
Seeed-LoRa-E5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001b628  08000138  08000138  00001138  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f64  0801b760  0801b760  0001c760  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .USER_embedded_Keys 000000c0  0801c6c4  0801c6c4  0001d6c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  0801c784  0801c784  0001e158  2**0
                  CONTENTS
  5 .ARM          00000008  0801c784  0801c784  0001d784  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  0801c78c  0801c78c  0001e158  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  0801c78c  0801c78c  0001d78c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  0801c790  0801c790  0001d790  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         00000158  20000000  0801c794  0001e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00002000  20000158  0801c8ec  0001e158  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20002158  0801c8ec  0001e158  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  0001e158  2**0
                  CONTENTS, READONLY
 13 .debug_info   0003e137  00000000  00000000  0001e182  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00009fb5  00000000  00000000  0005c2b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000031b8  00000000  00000000  00066270  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000025c9  00000000  00000000  00069428  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000279d2  00000000  00000000  0006b9f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0003d74f  00000000  00000000  000933c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c9d5e  00000000  00000000  000d0b12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0019a870  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000cc14  00000000  00000000  0019a8b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000061  00000000  00000000  001a74c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000138 <__do_global_dtors_aux>:
 8000138:	b510      	push	{r4, lr}
 800013a:	4c05      	ldr	r4, [pc, #20]	@ (8000150 <__do_global_dtors_aux+0x18>)
 800013c:	7823      	ldrb	r3, [r4, #0]
 800013e:	b933      	cbnz	r3, 800014e <__do_global_dtors_aux+0x16>
 8000140:	4b04      	ldr	r3, [pc, #16]	@ (8000154 <__do_global_dtors_aux+0x1c>)
 8000142:	b113      	cbz	r3, 800014a <__do_global_dtors_aux+0x12>
 8000144:	4804      	ldr	r0, [pc, #16]	@ (8000158 <__do_global_dtors_aux+0x20>)
 8000146:	f3af 8000 	nop.w
 800014a:	2301      	movs	r3, #1
 800014c:	7023      	strb	r3, [r4, #0]
 800014e:	bd10      	pop	{r4, pc}
 8000150:	20000158 	.word	0x20000158
 8000154:	00000000 	.word	0x00000000
 8000158:	0801b748 	.word	0x0801b748

0800015c <frame_dummy>:
 800015c:	b508      	push	{r3, lr}
 800015e:	4b03      	ldr	r3, [pc, #12]	@ (800016c <frame_dummy+0x10>)
 8000160:	b11b      	cbz	r3, 800016a <frame_dummy+0xe>
 8000162:	4903      	ldr	r1, [pc, #12]	@ (8000170 <frame_dummy+0x14>)
 8000164:	4803      	ldr	r0, [pc, #12]	@ (8000174 <frame_dummy+0x18>)
 8000166:	f3af 8000 	nop.w
 800016a:	bd08      	pop	{r3, pc}
 800016c:	00000000 	.word	0x00000000
 8000170:	2000015c 	.word	0x2000015c
 8000174:	0801b748 	.word	0x0801b748

08000178 <strlen>:
 8000178:	4603      	mov	r3, r0
 800017a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800017e:	2a00      	cmp	r2, #0
 8000180:	d1fb      	bne.n	800017a <strlen+0x2>
 8000182:	1a18      	subs	r0, r3, r0
 8000184:	3801      	subs	r0, #1
 8000186:	4770      	bx	lr

08000188 <__aeabi_drsub>:
 8000188:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800018c:	e002      	b.n	8000194 <__adddf3>
 800018e:	bf00      	nop

08000190 <__aeabi_dsub>:
 8000190:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000194 <__adddf3>:
 8000194:	b530      	push	{r4, r5, lr}
 8000196:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800019a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800019e:	ea94 0f05 	teq	r4, r5
 80001a2:	bf08      	it	eq
 80001a4:	ea90 0f02 	teqeq	r0, r2
 80001a8:	bf1f      	itttt	ne
 80001aa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ae:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001b2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001b6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001ba:	f000 80e2 	beq.w	8000382 <__adddf3+0x1ee>
 80001be:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001c2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001c6:	bfb8      	it	lt
 80001c8:	426d      	neglt	r5, r5
 80001ca:	dd0c      	ble.n	80001e6 <__adddf3+0x52>
 80001cc:	442c      	add	r4, r5
 80001ce:	ea80 0202 	eor.w	r2, r0, r2
 80001d2:	ea81 0303 	eor.w	r3, r1, r3
 80001d6:	ea82 0000 	eor.w	r0, r2, r0
 80001da:	ea83 0101 	eor.w	r1, r3, r1
 80001de:	ea80 0202 	eor.w	r2, r0, r2
 80001e2:	ea81 0303 	eor.w	r3, r1, r3
 80001e6:	2d36      	cmp	r5, #54	@ 0x36
 80001e8:	bf88      	it	hi
 80001ea:	bd30      	pophi	{r4, r5, pc}
 80001ec:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001f0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001f4:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001f8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x70>
 80001fe:	4240      	negs	r0, r0
 8000200:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000204:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000208:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800020c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000210:	d002      	beq.n	8000218 <__adddf3+0x84>
 8000212:	4252      	negs	r2, r2
 8000214:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000218:	ea94 0f05 	teq	r4, r5
 800021c:	f000 80a7 	beq.w	800036e <__adddf3+0x1da>
 8000220:	f1a4 0401 	sub.w	r4, r4, #1
 8000224:	f1d5 0e20 	rsbs	lr, r5, #32
 8000228:	db0d      	blt.n	8000246 <__adddf3+0xb2>
 800022a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800022e:	fa22 f205 	lsr.w	r2, r2, r5
 8000232:	1880      	adds	r0, r0, r2
 8000234:	f141 0100 	adc.w	r1, r1, #0
 8000238:	fa03 f20e 	lsl.w	r2, r3, lr
 800023c:	1880      	adds	r0, r0, r2
 800023e:	fa43 f305 	asr.w	r3, r3, r5
 8000242:	4159      	adcs	r1, r3
 8000244:	e00e      	b.n	8000264 <__adddf3+0xd0>
 8000246:	f1a5 0520 	sub.w	r5, r5, #32
 800024a:	f10e 0e20 	add.w	lr, lr, #32
 800024e:	2a01      	cmp	r2, #1
 8000250:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000254:	bf28      	it	cs
 8000256:	f04c 0c02 	orrcs.w	ip, ip, #2
 800025a:	fa43 f305 	asr.w	r3, r3, r5
 800025e:	18c0      	adds	r0, r0, r3
 8000260:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000264:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000268:	d507      	bpl.n	800027a <__adddf3+0xe6>
 800026a:	f04f 0e00 	mov.w	lr, #0
 800026e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000272:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000276:	eb6e 0101 	sbc.w	r1, lr, r1
 800027a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800027e:	d31b      	bcc.n	80002b8 <__adddf3+0x124>
 8000280:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000284:	d30c      	bcc.n	80002a0 <__adddf3+0x10c>
 8000286:	0849      	lsrs	r1, r1, #1
 8000288:	ea5f 0030 	movs.w	r0, r0, rrx
 800028c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000290:	f104 0401 	add.w	r4, r4, #1
 8000294:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000298:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800029c:	f080 809a 	bcs.w	80003d4 <__adddf3+0x240>
 80002a0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002a4:	bf08      	it	eq
 80002a6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002aa:	f150 0000 	adcs.w	r0, r0, #0
 80002ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002b2:	ea41 0105 	orr.w	r1, r1, r5
 80002b6:	bd30      	pop	{r4, r5, pc}
 80002b8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002bc:	4140      	adcs	r0, r0
 80002be:	eb41 0101 	adc.w	r1, r1, r1
 80002c2:	3c01      	subs	r4, #1
 80002c4:	bf28      	it	cs
 80002c6:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002ca:	d2e9      	bcs.n	80002a0 <__adddf3+0x10c>
 80002cc:	f091 0f00 	teq	r1, #0
 80002d0:	bf04      	itt	eq
 80002d2:	4601      	moveq	r1, r0
 80002d4:	2000      	moveq	r0, #0
 80002d6:	fab1 f381 	clz	r3, r1
 80002da:	bf08      	it	eq
 80002dc:	3320      	addeq	r3, #32
 80002de:	f1a3 030b 	sub.w	r3, r3, #11
 80002e2:	f1b3 0220 	subs.w	r2, r3, #32
 80002e6:	da0c      	bge.n	8000302 <__adddf3+0x16e>
 80002e8:	320c      	adds	r2, #12
 80002ea:	dd08      	ble.n	80002fe <__adddf3+0x16a>
 80002ec:	f102 0c14 	add.w	ip, r2, #20
 80002f0:	f1c2 020c 	rsb	r2, r2, #12
 80002f4:	fa01 f00c 	lsl.w	r0, r1, ip
 80002f8:	fa21 f102 	lsr.w	r1, r1, r2
 80002fc:	e00c      	b.n	8000318 <__adddf3+0x184>
 80002fe:	f102 0214 	add.w	r2, r2, #20
 8000302:	bfd8      	it	le
 8000304:	f1c2 0c20 	rsble	ip, r2, #32
 8000308:	fa01 f102 	lsl.w	r1, r1, r2
 800030c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000310:	bfdc      	itt	le
 8000312:	ea41 010c 	orrle.w	r1, r1, ip
 8000316:	4090      	lslle	r0, r2
 8000318:	1ae4      	subs	r4, r4, r3
 800031a:	bfa2      	ittt	ge
 800031c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000320:	4329      	orrge	r1, r5
 8000322:	bd30      	popge	{r4, r5, pc}
 8000324:	ea6f 0404 	mvn.w	r4, r4
 8000328:	3c1f      	subs	r4, #31
 800032a:	da1c      	bge.n	8000366 <__adddf3+0x1d2>
 800032c:	340c      	adds	r4, #12
 800032e:	dc0e      	bgt.n	800034e <__adddf3+0x1ba>
 8000330:	f104 0414 	add.w	r4, r4, #20
 8000334:	f1c4 0220 	rsb	r2, r4, #32
 8000338:	fa20 f004 	lsr.w	r0, r0, r4
 800033c:	fa01 f302 	lsl.w	r3, r1, r2
 8000340:	ea40 0003 	orr.w	r0, r0, r3
 8000344:	fa21 f304 	lsr.w	r3, r1, r4
 8000348:	ea45 0103 	orr.w	r1, r5, r3
 800034c:	bd30      	pop	{r4, r5, pc}
 800034e:	f1c4 040c 	rsb	r4, r4, #12
 8000352:	f1c4 0220 	rsb	r2, r4, #32
 8000356:	fa20 f002 	lsr.w	r0, r0, r2
 800035a:	fa01 f304 	lsl.w	r3, r1, r4
 800035e:	ea40 0003 	orr.w	r0, r0, r3
 8000362:	4629      	mov	r1, r5
 8000364:	bd30      	pop	{r4, r5, pc}
 8000366:	fa21 f004 	lsr.w	r0, r1, r4
 800036a:	4629      	mov	r1, r5
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	f094 0f00 	teq	r4, #0
 8000372:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000376:	bf06      	itte	eq
 8000378:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800037c:	3401      	addeq	r4, #1
 800037e:	3d01      	subne	r5, #1
 8000380:	e74e      	b.n	8000220 <__adddf3+0x8c>
 8000382:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000386:	bf18      	it	ne
 8000388:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800038c:	d029      	beq.n	80003e2 <__adddf3+0x24e>
 800038e:	ea94 0f05 	teq	r4, r5
 8000392:	bf08      	it	eq
 8000394:	ea90 0f02 	teqeq	r0, r2
 8000398:	d005      	beq.n	80003a6 <__adddf3+0x212>
 800039a:	ea54 0c00 	orrs.w	ip, r4, r0
 800039e:	bf04      	itt	eq
 80003a0:	4619      	moveq	r1, r3
 80003a2:	4610      	moveq	r0, r2
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea91 0f03 	teq	r1, r3
 80003aa:	bf1e      	ittt	ne
 80003ac:	2100      	movne	r1, #0
 80003ae:	2000      	movne	r0, #0
 80003b0:	bd30      	popne	{r4, r5, pc}
 80003b2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003b6:	d105      	bne.n	80003c4 <__adddf3+0x230>
 80003b8:	0040      	lsls	r0, r0, #1
 80003ba:	4149      	adcs	r1, r1
 80003bc:	bf28      	it	cs
 80003be:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80003c2:	bd30      	pop	{r4, r5, pc}
 80003c4:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003c8:	bf3c      	itt	cc
 80003ca:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003ce:	bd30      	popcc	{r4, r5, pc}
 80003d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003d4:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003d8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003dc:	f04f 0000 	mov.w	r0, #0
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003e6:	bf1a      	itte	ne
 80003e8:	4619      	movne	r1, r3
 80003ea:	4610      	movne	r0, r2
 80003ec:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003f0:	bf1c      	itt	ne
 80003f2:	460b      	movne	r3, r1
 80003f4:	4602      	movne	r2, r0
 80003f6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003fa:	bf06      	itte	eq
 80003fc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000400:	ea91 0f03 	teqeq	r1, r3
 8000404:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000408:	bd30      	pop	{r4, r5, pc}
 800040a:	bf00      	nop

0800040c <__aeabi_ui2d>:
 800040c:	f090 0f00 	teq	r0, #0
 8000410:	bf04      	itt	eq
 8000412:	2100      	moveq	r1, #0
 8000414:	4770      	bxeq	lr
 8000416:	b530      	push	{r4, r5, lr}
 8000418:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800041c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000420:	f04f 0500 	mov.w	r5, #0
 8000424:	f04f 0100 	mov.w	r1, #0
 8000428:	e750      	b.n	80002cc <__adddf3+0x138>
 800042a:	bf00      	nop

0800042c <__aeabi_i2d>:
 800042c:	f090 0f00 	teq	r0, #0
 8000430:	bf04      	itt	eq
 8000432:	2100      	moveq	r1, #0
 8000434:	4770      	bxeq	lr
 8000436:	b530      	push	{r4, r5, lr}
 8000438:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800043c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000440:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000444:	bf48      	it	mi
 8000446:	4240      	negmi	r0, r0
 8000448:	f04f 0100 	mov.w	r1, #0
 800044c:	e73e      	b.n	80002cc <__adddf3+0x138>
 800044e:	bf00      	nop

08000450 <__aeabi_f2d>:
 8000450:	0042      	lsls	r2, r0, #1
 8000452:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000456:	ea4f 0131 	mov.w	r1, r1, rrx
 800045a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800045e:	bf1f      	itttt	ne
 8000460:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000464:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000468:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 800046c:	4770      	bxne	lr
 800046e:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000472:	bf08      	it	eq
 8000474:	4770      	bxeq	lr
 8000476:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800047a:	bf04      	itt	eq
 800047c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000480:	4770      	bxeq	lr
 8000482:	b530      	push	{r4, r5, lr}
 8000484:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000488:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800048c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000490:	e71c      	b.n	80002cc <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_ul2d>:
 8000494:	ea50 0201 	orrs.w	r2, r0, r1
 8000498:	bf08      	it	eq
 800049a:	4770      	bxeq	lr
 800049c:	b530      	push	{r4, r5, lr}
 800049e:	f04f 0500 	mov.w	r5, #0
 80004a2:	e00a      	b.n	80004ba <__aeabi_l2d+0x16>

080004a4 <__aeabi_l2d>:
 80004a4:	ea50 0201 	orrs.w	r2, r0, r1
 80004a8:	bf08      	it	eq
 80004aa:	4770      	bxeq	lr
 80004ac:	b530      	push	{r4, r5, lr}
 80004ae:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004b2:	d502      	bpl.n	80004ba <__aeabi_l2d+0x16>
 80004b4:	4240      	negs	r0, r0
 80004b6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004ba:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004be:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004c6:	f43f aed8 	beq.w	800027a <__adddf3+0xe6>
 80004ca:	f04f 0203 	mov.w	r2, #3
 80004ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004d2:	bf18      	it	ne
 80004d4:	3203      	addne	r2, #3
 80004d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004da:	bf18      	it	ne
 80004dc:	3203      	addne	r2, #3
 80004de:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004e2:	f1c2 0320 	rsb	r3, r2, #32
 80004e6:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ea:	fa20 f002 	lsr.w	r0, r0, r2
 80004ee:	fa01 fe03 	lsl.w	lr, r1, r3
 80004f2:	ea40 000e 	orr.w	r0, r0, lr
 80004f6:	fa21 f102 	lsr.w	r1, r1, r2
 80004fa:	4414      	add	r4, r2
 80004fc:	e6bd      	b.n	800027a <__adddf3+0xe6>
 80004fe:	bf00      	nop

08000500 <__gedf2>:
 8000500:	f04f 3cff 	mov.w	ip, #4294967295
 8000504:	e006      	b.n	8000514 <__cmpdf2+0x4>
 8000506:	bf00      	nop

08000508 <__ledf2>:
 8000508:	f04f 0c01 	mov.w	ip, #1
 800050c:	e002      	b.n	8000514 <__cmpdf2+0x4>
 800050e:	bf00      	nop

08000510 <__cmpdf2>:
 8000510:	f04f 0c01 	mov.w	ip, #1
 8000514:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000518:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800051c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000520:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000524:	bf18      	it	ne
 8000526:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800052a:	d01b      	beq.n	8000564 <__cmpdf2+0x54>
 800052c:	b001      	add	sp, #4
 800052e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000532:	bf0c      	ite	eq
 8000534:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000538:	ea91 0f03 	teqne	r1, r3
 800053c:	bf02      	ittt	eq
 800053e:	ea90 0f02 	teqeq	r0, r2
 8000542:	2000      	moveq	r0, #0
 8000544:	4770      	bxeq	lr
 8000546:	f110 0f00 	cmn.w	r0, #0
 800054a:	ea91 0f03 	teq	r1, r3
 800054e:	bf58      	it	pl
 8000550:	4299      	cmppl	r1, r3
 8000552:	bf08      	it	eq
 8000554:	4290      	cmpeq	r0, r2
 8000556:	bf2c      	ite	cs
 8000558:	17d8      	asrcs	r0, r3, #31
 800055a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800055e:	f040 0001 	orr.w	r0, r0, #1
 8000562:	4770      	bx	lr
 8000564:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000568:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800056c:	d102      	bne.n	8000574 <__cmpdf2+0x64>
 800056e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000572:	d107      	bne.n	8000584 <__cmpdf2+0x74>
 8000574:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000578:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800057c:	d1d6      	bne.n	800052c <__cmpdf2+0x1c>
 800057e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000582:	d0d3      	beq.n	800052c <__cmpdf2+0x1c>
 8000584:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <__aeabi_cdrcmple>:
 800058c:	4684      	mov	ip, r0
 800058e:	4610      	mov	r0, r2
 8000590:	4662      	mov	r2, ip
 8000592:	468c      	mov	ip, r1
 8000594:	4619      	mov	r1, r3
 8000596:	4663      	mov	r3, ip
 8000598:	e000      	b.n	800059c <__aeabi_cdcmpeq>
 800059a:	bf00      	nop

0800059c <__aeabi_cdcmpeq>:
 800059c:	b501      	push	{r0, lr}
 800059e:	f7ff ffb7 	bl	8000510 <__cmpdf2>
 80005a2:	2800      	cmp	r0, #0
 80005a4:	bf48      	it	mi
 80005a6:	f110 0f00 	cmnmi.w	r0, #0
 80005aa:	bd01      	pop	{r0, pc}

080005ac <__aeabi_dcmpeq>:
 80005ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005b0:	f7ff fff4 	bl	800059c <__aeabi_cdcmpeq>
 80005b4:	bf0c      	ite	eq
 80005b6:	2001      	moveq	r0, #1
 80005b8:	2000      	movne	r0, #0
 80005ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80005be:	bf00      	nop

080005c0 <__aeabi_dcmplt>:
 80005c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005c4:	f7ff ffea 	bl	800059c <__aeabi_cdcmpeq>
 80005c8:	bf34      	ite	cc
 80005ca:	2001      	movcc	r0, #1
 80005cc:	2000      	movcs	r0, #0
 80005ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80005d2:	bf00      	nop

080005d4 <__aeabi_dcmple>:
 80005d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005d8:	f7ff ffe0 	bl	800059c <__aeabi_cdcmpeq>
 80005dc:	bf94      	ite	ls
 80005de:	2001      	movls	r0, #1
 80005e0:	2000      	movhi	r0, #0
 80005e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80005e6:	bf00      	nop

080005e8 <__aeabi_dcmpge>:
 80005e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005ec:	f7ff ffce 	bl	800058c <__aeabi_cdrcmple>
 80005f0:	bf94      	ite	ls
 80005f2:	2001      	movls	r0, #1
 80005f4:	2000      	movhi	r0, #0
 80005f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80005fa:	bf00      	nop

080005fc <__aeabi_dcmpgt>:
 80005fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000600:	f7ff ffc4 	bl	800058c <__aeabi_cdrcmple>
 8000604:	bf34      	ite	cc
 8000606:	2001      	movcc	r0, #1
 8000608:	2000      	movcs	r0, #0
 800060a:	f85d fb08 	ldr.w	pc, [sp], #8
 800060e:	bf00      	nop

08000610 <__aeabi_d2iz>:
 8000610:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000614:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000618:	d215      	bcs.n	8000646 <__aeabi_d2iz+0x36>
 800061a:	d511      	bpl.n	8000640 <__aeabi_d2iz+0x30>
 800061c:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000620:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000624:	d912      	bls.n	800064c <__aeabi_d2iz+0x3c>
 8000626:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800062a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800062e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000632:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000636:	fa23 f002 	lsr.w	r0, r3, r2
 800063a:	bf18      	it	ne
 800063c:	4240      	negne	r0, r0
 800063e:	4770      	bx	lr
 8000640:	f04f 0000 	mov.w	r0, #0
 8000644:	4770      	bx	lr
 8000646:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800064a:	d105      	bne.n	8000658 <__aeabi_d2iz+0x48>
 800064c:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000650:	bf08      	it	eq
 8000652:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000656:	4770      	bx	lr
 8000658:	f04f 0000 	mov.w	r0, #0
 800065c:	4770      	bx	lr
 800065e:	bf00      	nop

08000660 <__aeabi_frsub>:
 8000660:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000664:	e002      	b.n	800066c <__addsf3>
 8000666:	bf00      	nop

08000668 <__aeabi_fsub>:
 8000668:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

0800066c <__addsf3>:
 800066c:	0042      	lsls	r2, r0, #1
 800066e:	bf1f      	itttt	ne
 8000670:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000674:	ea92 0f03 	teqne	r2, r3
 8000678:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800067c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000680:	d06a      	beq.n	8000758 <__addsf3+0xec>
 8000682:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000686:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800068a:	bfc1      	itttt	gt
 800068c:	18d2      	addgt	r2, r2, r3
 800068e:	4041      	eorgt	r1, r0
 8000690:	4048      	eorgt	r0, r1
 8000692:	4041      	eorgt	r1, r0
 8000694:	bfb8      	it	lt
 8000696:	425b      	neglt	r3, r3
 8000698:	2b19      	cmp	r3, #25
 800069a:	bf88      	it	hi
 800069c:	4770      	bxhi	lr
 800069e:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 80006a2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80006a6:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 80006aa:	bf18      	it	ne
 80006ac:	4240      	negne	r0, r0
 80006ae:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80006b2:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80006b6:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 80006ba:	bf18      	it	ne
 80006bc:	4249      	negne	r1, r1
 80006be:	ea92 0f03 	teq	r2, r3
 80006c2:	d03f      	beq.n	8000744 <__addsf3+0xd8>
 80006c4:	f1a2 0201 	sub.w	r2, r2, #1
 80006c8:	fa41 fc03 	asr.w	ip, r1, r3
 80006cc:	eb10 000c 	adds.w	r0, r0, ip
 80006d0:	f1c3 0320 	rsb	r3, r3, #32
 80006d4:	fa01 f103 	lsl.w	r1, r1, r3
 80006d8:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80006dc:	d502      	bpl.n	80006e4 <__addsf3+0x78>
 80006de:	4249      	negs	r1, r1
 80006e0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80006e4:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 80006e8:	d313      	bcc.n	8000712 <__addsf3+0xa6>
 80006ea:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80006ee:	d306      	bcc.n	80006fe <__addsf3+0x92>
 80006f0:	0840      	lsrs	r0, r0, #1
 80006f2:	ea4f 0131 	mov.w	r1, r1, rrx
 80006f6:	f102 0201 	add.w	r2, r2, #1
 80006fa:	2afe      	cmp	r2, #254	@ 0xfe
 80006fc:	d251      	bcs.n	80007a2 <__addsf3+0x136>
 80006fe:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000702:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000706:	bf08      	it	eq
 8000708:	f020 0001 	biceq.w	r0, r0, #1
 800070c:	ea40 0003 	orr.w	r0, r0, r3
 8000710:	4770      	bx	lr
 8000712:	0049      	lsls	r1, r1, #1
 8000714:	eb40 0000 	adc.w	r0, r0, r0
 8000718:	3a01      	subs	r2, #1
 800071a:	bf28      	it	cs
 800071c:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000720:	d2ed      	bcs.n	80006fe <__addsf3+0x92>
 8000722:	fab0 fc80 	clz	ip, r0
 8000726:	f1ac 0c08 	sub.w	ip, ip, #8
 800072a:	ebb2 020c 	subs.w	r2, r2, ip
 800072e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000732:	bfaa      	itet	ge
 8000734:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000738:	4252      	neglt	r2, r2
 800073a:	4318      	orrge	r0, r3
 800073c:	bfbc      	itt	lt
 800073e:	40d0      	lsrlt	r0, r2
 8000740:	4318      	orrlt	r0, r3
 8000742:	4770      	bx	lr
 8000744:	f092 0f00 	teq	r2, #0
 8000748:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 800074c:	bf06      	itte	eq
 800074e:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000752:	3201      	addeq	r2, #1
 8000754:	3b01      	subne	r3, #1
 8000756:	e7b5      	b.n	80006c4 <__addsf3+0x58>
 8000758:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800075c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000760:	bf18      	it	ne
 8000762:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000766:	d021      	beq.n	80007ac <__addsf3+0x140>
 8000768:	ea92 0f03 	teq	r2, r3
 800076c:	d004      	beq.n	8000778 <__addsf3+0x10c>
 800076e:	f092 0f00 	teq	r2, #0
 8000772:	bf08      	it	eq
 8000774:	4608      	moveq	r0, r1
 8000776:	4770      	bx	lr
 8000778:	ea90 0f01 	teq	r0, r1
 800077c:	bf1c      	itt	ne
 800077e:	2000      	movne	r0, #0
 8000780:	4770      	bxne	lr
 8000782:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000786:	d104      	bne.n	8000792 <__addsf3+0x126>
 8000788:	0040      	lsls	r0, r0, #1
 800078a:	bf28      	it	cs
 800078c:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000790:	4770      	bx	lr
 8000792:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000796:	bf3c      	itt	cc
 8000798:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 800079c:	4770      	bxcc	lr
 800079e:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80007a2:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 80007a6:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80007aa:	4770      	bx	lr
 80007ac:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80007b0:	bf16      	itet	ne
 80007b2:	4608      	movne	r0, r1
 80007b4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80007b8:	4601      	movne	r1, r0
 80007ba:	0242      	lsls	r2, r0, #9
 80007bc:	bf06      	itte	eq
 80007be:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80007c2:	ea90 0f01 	teqeq	r0, r1
 80007c6:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 80007ca:	4770      	bx	lr

080007cc <__aeabi_ui2f>:
 80007cc:	f04f 0300 	mov.w	r3, #0
 80007d0:	e004      	b.n	80007dc <__aeabi_i2f+0x8>
 80007d2:	bf00      	nop

080007d4 <__aeabi_i2f>:
 80007d4:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 80007d8:	bf48      	it	mi
 80007da:	4240      	negmi	r0, r0
 80007dc:	ea5f 0c00 	movs.w	ip, r0
 80007e0:	bf08      	it	eq
 80007e2:	4770      	bxeq	lr
 80007e4:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 80007e8:	4601      	mov	r1, r0
 80007ea:	f04f 0000 	mov.w	r0, #0
 80007ee:	e01c      	b.n	800082a <__aeabi_l2f+0x2a>

080007f0 <__aeabi_ul2f>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	f04f 0300 	mov.w	r3, #0
 80007fc:	e00a      	b.n	8000814 <__aeabi_l2f+0x14>
 80007fe:	bf00      	nop

08000800 <__aeabi_l2f>:
 8000800:	ea50 0201 	orrs.w	r2, r0, r1
 8000804:	bf08      	it	eq
 8000806:	4770      	bxeq	lr
 8000808:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 800080c:	d502      	bpl.n	8000814 <__aeabi_l2f+0x14>
 800080e:	4240      	negs	r0, r0
 8000810:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000814:	ea5f 0c01 	movs.w	ip, r1
 8000818:	bf02      	ittt	eq
 800081a:	4684      	moveq	ip, r0
 800081c:	4601      	moveq	r1, r0
 800081e:	2000      	moveq	r0, #0
 8000820:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000824:	bf08      	it	eq
 8000826:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 800082a:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 800082e:	fabc f28c 	clz	r2, ip
 8000832:	3a08      	subs	r2, #8
 8000834:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000838:	db10      	blt.n	800085c <__aeabi_l2f+0x5c>
 800083a:	fa01 fc02 	lsl.w	ip, r1, r2
 800083e:	4463      	add	r3, ip
 8000840:	fa00 fc02 	lsl.w	ip, r0, r2
 8000844:	f1c2 0220 	rsb	r2, r2, #32
 8000848:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800084c:	fa20 f202 	lsr.w	r2, r0, r2
 8000850:	eb43 0002 	adc.w	r0, r3, r2
 8000854:	bf08      	it	eq
 8000856:	f020 0001 	biceq.w	r0, r0, #1
 800085a:	4770      	bx	lr
 800085c:	f102 0220 	add.w	r2, r2, #32
 8000860:	fa01 fc02 	lsl.w	ip, r1, r2
 8000864:	f1c2 0220 	rsb	r2, r2, #32
 8000868:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800086c:	fa21 f202 	lsr.w	r2, r1, r2
 8000870:	eb43 0002 	adc.w	r0, r3, r2
 8000874:	bf08      	it	eq
 8000876:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800087a:	4770      	bx	lr

0800087c <__aeabi_fmul>:
 800087c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000880:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000884:	bf1e      	ittt	ne
 8000886:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800088a:	ea92 0f0c 	teqne	r2, ip
 800088e:	ea93 0f0c 	teqne	r3, ip
 8000892:	d06f      	beq.n	8000974 <__aeabi_fmul+0xf8>
 8000894:	441a      	add	r2, r3
 8000896:	ea80 0c01 	eor.w	ip, r0, r1
 800089a:	0240      	lsls	r0, r0, #9
 800089c:	bf18      	it	ne
 800089e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80008a2:	d01e      	beq.n	80008e2 <__aeabi_fmul+0x66>
 80008a4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80008a8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80008ac:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80008b0:	fba0 3101 	umull	r3, r1, r0, r1
 80008b4:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 80008b8:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80008bc:	bf3e      	ittt	cc
 80008be:	0049      	lslcc	r1, r1, #1
 80008c0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80008c4:	005b      	lslcc	r3, r3, #1
 80008c6:	ea40 0001 	orr.w	r0, r0, r1
 80008ca:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80008ce:	2afd      	cmp	r2, #253	@ 0xfd
 80008d0:	d81d      	bhi.n	800090e <__aeabi_fmul+0x92>
 80008d2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80008d6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80008da:	bf08      	it	eq
 80008dc:	f020 0001 	biceq.w	r0, r0, #1
 80008e0:	4770      	bx	lr
 80008e2:	f090 0f00 	teq	r0, #0
 80008e6:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80008ea:	bf08      	it	eq
 80008ec:	0249      	lsleq	r1, r1, #9
 80008ee:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80008f2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80008f6:	3a7f      	subs	r2, #127	@ 0x7f
 80008f8:	bfc2      	ittt	gt
 80008fa:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80008fe:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000902:	4770      	bxgt	lr
 8000904:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000908:	f04f 0300 	mov.w	r3, #0
 800090c:	3a01      	subs	r2, #1
 800090e:	dc5d      	bgt.n	80009cc <__aeabi_fmul+0x150>
 8000910:	f112 0f19 	cmn.w	r2, #25
 8000914:	bfdc      	itt	le
 8000916:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 800091a:	4770      	bxle	lr
 800091c:	f1c2 0200 	rsb	r2, r2, #0
 8000920:	0041      	lsls	r1, r0, #1
 8000922:	fa21 f102 	lsr.w	r1, r1, r2
 8000926:	f1c2 0220 	rsb	r2, r2, #32
 800092a:	fa00 fc02 	lsl.w	ip, r0, r2
 800092e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000932:	f140 0000 	adc.w	r0, r0, #0
 8000936:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800093a:	bf08      	it	eq
 800093c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000940:	4770      	bx	lr
 8000942:	f092 0f00 	teq	r2, #0
 8000946:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 800094a:	bf02      	ittt	eq
 800094c:	0040      	lsleq	r0, r0, #1
 800094e:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000952:	3a01      	subeq	r2, #1
 8000954:	d0f9      	beq.n	800094a <__aeabi_fmul+0xce>
 8000956:	ea40 000c 	orr.w	r0, r0, ip
 800095a:	f093 0f00 	teq	r3, #0
 800095e:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000962:	bf02      	ittt	eq
 8000964:	0049      	lsleq	r1, r1, #1
 8000966:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 800096a:	3b01      	subeq	r3, #1
 800096c:	d0f9      	beq.n	8000962 <__aeabi_fmul+0xe6>
 800096e:	ea41 010c 	orr.w	r1, r1, ip
 8000972:	e78f      	b.n	8000894 <__aeabi_fmul+0x18>
 8000974:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000978:	ea92 0f0c 	teq	r2, ip
 800097c:	bf18      	it	ne
 800097e:	ea93 0f0c 	teqne	r3, ip
 8000982:	d00a      	beq.n	800099a <__aeabi_fmul+0x11e>
 8000984:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000988:	bf18      	it	ne
 800098a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800098e:	d1d8      	bne.n	8000942 <__aeabi_fmul+0xc6>
 8000990:	ea80 0001 	eor.w	r0, r0, r1
 8000994:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000998:	4770      	bx	lr
 800099a:	f090 0f00 	teq	r0, #0
 800099e:	bf17      	itett	ne
 80009a0:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 80009a4:	4608      	moveq	r0, r1
 80009a6:	f091 0f00 	teqne	r1, #0
 80009aa:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 80009ae:	d014      	beq.n	80009da <__aeabi_fmul+0x15e>
 80009b0:	ea92 0f0c 	teq	r2, ip
 80009b4:	d101      	bne.n	80009ba <__aeabi_fmul+0x13e>
 80009b6:	0242      	lsls	r2, r0, #9
 80009b8:	d10f      	bne.n	80009da <__aeabi_fmul+0x15e>
 80009ba:	ea93 0f0c 	teq	r3, ip
 80009be:	d103      	bne.n	80009c8 <__aeabi_fmul+0x14c>
 80009c0:	024b      	lsls	r3, r1, #9
 80009c2:	bf18      	it	ne
 80009c4:	4608      	movne	r0, r1
 80009c6:	d108      	bne.n	80009da <__aeabi_fmul+0x15e>
 80009c8:	ea80 0001 	eor.w	r0, r0, r1
 80009cc:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80009d0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80009d4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80009d8:	4770      	bx	lr
 80009da:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80009de:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80009e2:	4770      	bx	lr

080009e4 <__aeabi_fdiv>:
 80009e4:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80009e8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80009ec:	bf1e      	ittt	ne
 80009ee:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80009f2:	ea92 0f0c 	teqne	r2, ip
 80009f6:	ea93 0f0c 	teqne	r3, ip
 80009fa:	d069      	beq.n	8000ad0 <__aeabi_fdiv+0xec>
 80009fc:	eba2 0203 	sub.w	r2, r2, r3
 8000a00:	ea80 0c01 	eor.w	ip, r0, r1
 8000a04:	0249      	lsls	r1, r1, #9
 8000a06:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000a0a:	d037      	beq.n	8000a7c <__aeabi_fdiv+0x98>
 8000a0c:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000a10:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000a14:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000a18:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000a1c:	428b      	cmp	r3, r1
 8000a1e:	bf38      	it	cc
 8000a20:	005b      	lslcc	r3, r3, #1
 8000a22:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000a26:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000a2a:	428b      	cmp	r3, r1
 8000a2c:	bf24      	itt	cs
 8000a2e:	1a5b      	subcs	r3, r3, r1
 8000a30:	ea40 000c 	orrcs.w	r0, r0, ip
 8000a34:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000a38:	bf24      	itt	cs
 8000a3a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000a3e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000a42:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000a46:	bf24      	itt	cs
 8000a48:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000a4c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000a50:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000a54:	bf24      	itt	cs
 8000a56:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000a5a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000a5e:	011b      	lsls	r3, r3, #4
 8000a60:	bf18      	it	ne
 8000a62:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000a66:	d1e0      	bne.n	8000a2a <__aeabi_fdiv+0x46>
 8000a68:	2afd      	cmp	r2, #253	@ 0xfd
 8000a6a:	f63f af50 	bhi.w	800090e <__aeabi_fmul+0x92>
 8000a6e:	428b      	cmp	r3, r1
 8000a70:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a74:	bf08      	it	eq
 8000a76:	f020 0001 	biceq.w	r0, r0, #1
 8000a7a:	4770      	bx	lr
 8000a7c:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000a80:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000a84:	327f      	adds	r2, #127	@ 0x7f
 8000a86:	bfc2      	ittt	gt
 8000a88:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000a8c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000a90:	4770      	bxgt	lr
 8000a92:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a96:	f04f 0300 	mov.w	r3, #0
 8000a9a:	3a01      	subs	r2, #1
 8000a9c:	e737      	b.n	800090e <__aeabi_fmul+0x92>
 8000a9e:	f092 0f00 	teq	r2, #0
 8000aa2:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000aa6:	bf02      	ittt	eq
 8000aa8:	0040      	lsleq	r0, r0, #1
 8000aaa:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000aae:	3a01      	subeq	r2, #1
 8000ab0:	d0f9      	beq.n	8000aa6 <__aeabi_fdiv+0xc2>
 8000ab2:	ea40 000c 	orr.w	r0, r0, ip
 8000ab6:	f093 0f00 	teq	r3, #0
 8000aba:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000abe:	bf02      	ittt	eq
 8000ac0:	0049      	lsleq	r1, r1, #1
 8000ac2:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000ac6:	3b01      	subeq	r3, #1
 8000ac8:	d0f9      	beq.n	8000abe <__aeabi_fdiv+0xda>
 8000aca:	ea41 010c 	orr.w	r1, r1, ip
 8000ace:	e795      	b.n	80009fc <__aeabi_fdiv+0x18>
 8000ad0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ad4:	ea92 0f0c 	teq	r2, ip
 8000ad8:	d108      	bne.n	8000aec <__aeabi_fdiv+0x108>
 8000ada:	0242      	lsls	r2, r0, #9
 8000adc:	f47f af7d 	bne.w	80009da <__aeabi_fmul+0x15e>
 8000ae0:	ea93 0f0c 	teq	r3, ip
 8000ae4:	f47f af70 	bne.w	80009c8 <__aeabi_fmul+0x14c>
 8000ae8:	4608      	mov	r0, r1
 8000aea:	e776      	b.n	80009da <__aeabi_fmul+0x15e>
 8000aec:	ea93 0f0c 	teq	r3, ip
 8000af0:	d104      	bne.n	8000afc <__aeabi_fdiv+0x118>
 8000af2:	024b      	lsls	r3, r1, #9
 8000af4:	f43f af4c 	beq.w	8000990 <__aeabi_fmul+0x114>
 8000af8:	4608      	mov	r0, r1
 8000afa:	e76e      	b.n	80009da <__aeabi_fmul+0x15e>
 8000afc:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000b00:	bf18      	it	ne
 8000b02:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000b06:	d1ca      	bne.n	8000a9e <__aeabi_fdiv+0xba>
 8000b08:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000b0c:	f47f af5c 	bne.w	80009c8 <__aeabi_fmul+0x14c>
 8000b10:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000b14:	f47f af3c 	bne.w	8000990 <__aeabi_fmul+0x114>
 8000b18:	e75f      	b.n	80009da <__aeabi_fmul+0x15e>
 8000b1a:	bf00      	nop

08000b1c <__aeabi_f2iz>:
 8000b1c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000b20:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000b24:	d30f      	bcc.n	8000b46 <__aeabi_f2iz+0x2a>
 8000b26:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000b2a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000b2e:	d90d      	bls.n	8000b4c <__aeabi_f2iz+0x30>
 8000b30:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000b34:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b38:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b3c:	fa23 f002 	lsr.w	r0, r3, r2
 8000b40:	bf18      	it	ne
 8000b42:	4240      	negne	r0, r0
 8000b44:	4770      	bx	lr
 8000b46:	f04f 0000 	mov.w	r0, #0
 8000b4a:	4770      	bx	lr
 8000b4c:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000b50:	d101      	bne.n	8000b56 <__aeabi_f2iz+0x3a>
 8000b52:	0242      	lsls	r2, r0, #9
 8000b54:	d105      	bne.n	8000b62 <__aeabi_f2iz+0x46>
 8000b56:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 8000b5a:	bf08      	it	eq
 8000b5c:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0000 	mov.w	r0, #0
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_f2uiz>:
 8000b68:	0042      	lsls	r2, r0, #1
 8000b6a:	d20e      	bcs.n	8000b8a <__aeabi_f2uiz+0x22>
 8000b6c:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000b70:	d30b      	bcc.n	8000b8a <__aeabi_f2uiz+0x22>
 8000b72:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000b76:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000b7a:	d409      	bmi.n	8000b90 <__aeabi_f2uiz+0x28>
 8000b7c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000b80:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b84:	fa23 f002 	lsr.w	r0, r3, r2
 8000b88:	4770      	bx	lr
 8000b8a:	f04f 0000 	mov.w	r0, #0
 8000b8e:	4770      	bx	lr
 8000b90:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000b94:	d101      	bne.n	8000b9a <__aeabi_f2uiz+0x32>
 8000b96:	0242      	lsls	r2, r0, #9
 8000b98:	d102      	bne.n	8000ba0 <__aeabi_f2uiz+0x38>
 8000b9a:	f04f 30ff 	mov.w	r0, #4294967295
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b96a 	b.w	8000e94 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	460c      	mov	r4, r1
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d14e      	bne.n	8000c82 <__udivmoddi4+0xaa>
 8000be4:	4694      	mov	ip, r2
 8000be6:	458c      	cmp	ip, r1
 8000be8:	4686      	mov	lr, r0
 8000bea:	fab2 f282 	clz	r2, r2
 8000bee:	d962      	bls.n	8000cb6 <__udivmoddi4+0xde>
 8000bf0:	b14a      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf2:	f1c2 0320 	rsb	r3, r2, #32
 8000bf6:	4091      	lsls	r1, r2
 8000bf8:	fa20 f303 	lsr.w	r3, r0, r3
 8000bfc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c00:	4319      	orrs	r1, r3
 8000c02:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c06:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c0a:	fa1f f68c 	uxth.w	r6, ip
 8000c0e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c12:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c16:	fb07 1114 	mls	r1, r7, r4, r1
 8000c1a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c1e:	fb04 f106 	mul.w	r1, r4, r6
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x64>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c2e:	f080 8112 	bcs.w	8000e56 <__udivmoddi4+0x27e>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 810f 	bls.w	8000e56 <__udivmoddi4+0x27e>
 8000c38:	3c02      	subs	r4, #2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	1a59      	subs	r1, r3, r1
 8000c3e:	fa1f f38e 	uxth.w	r3, lr
 8000c42:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c46:	fb07 1110 	mls	r1, r7, r0, r1
 8000c4a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c4e:	fb00 f606 	mul.w	r6, r0, r6
 8000c52:	429e      	cmp	r6, r3
 8000c54:	d90a      	bls.n	8000c6c <__udivmoddi4+0x94>
 8000c56:	eb1c 0303 	adds.w	r3, ip, r3
 8000c5a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c5e:	f080 80fc 	bcs.w	8000e5a <__udivmoddi4+0x282>
 8000c62:	429e      	cmp	r6, r3
 8000c64:	f240 80f9 	bls.w	8000e5a <__udivmoddi4+0x282>
 8000c68:	4463      	add	r3, ip
 8000c6a:	3802      	subs	r0, #2
 8000c6c:	1b9b      	subs	r3, r3, r6
 8000c6e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c72:	2100      	movs	r1, #0
 8000c74:	b11d      	cbz	r5, 8000c7e <__udivmoddi4+0xa6>
 8000c76:	40d3      	lsrs	r3, r2
 8000c78:	2200      	movs	r2, #0
 8000c7a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d905      	bls.n	8000c92 <__udivmoddi4+0xba>
 8000c86:	b10d      	cbz	r5, 8000c8c <__udivmoddi4+0xb4>
 8000c88:	e9c5 0100 	strd	r0, r1, [r5]
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	4608      	mov	r0, r1
 8000c90:	e7f5      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000c92:	fab3 f183 	clz	r1, r3
 8000c96:	2900      	cmp	r1, #0
 8000c98:	d146      	bne.n	8000d28 <__udivmoddi4+0x150>
 8000c9a:	42a3      	cmp	r3, r4
 8000c9c:	d302      	bcc.n	8000ca4 <__udivmoddi4+0xcc>
 8000c9e:	4290      	cmp	r0, r2
 8000ca0:	f0c0 80f0 	bcc.w	8000e84 <__udivmoddi4+0x2ac>
 8000ca4:	1a86      	subs	r6, r0, r2
 8000ca6:	eb64 0303 	sbc.w	r3, r4, r3
 8000caa:	2001      	movs	r0, #1
 8000cac:	2d00      	cmp	r5, #0
 8000cae:	d0e6      	beq.n	8000c7e <__udivmoddi4+0xa6>
 8000cb0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cb4:	e7e3      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000cb6:	2a00      	cmp	r2, #0
 8000cb8:	f040 8090 	bne.w	8000ddc <__udivmoddi4+0x204>
 8000cbc:	eba1 040c 	sub.w	r4, r1, ip
 8000cc0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cc4:	fa1f f78c 	uxth.w	r7, ip
 8000cc8:	2101      	movs	r1, #1
 8000cca:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cce:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cd2:	fb08 4416 	mls	r4, r8, r6, r4
 8000cd6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cda:	fb07 f006 	mul.w	r0, r7, r6
 8000cde:	4298      	cmp	r0, r3
 8000ce0:	d908      	bls.n	8000cf4 <__udivmoddi4+0x11c>
 8000ce2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ce6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000cea:	d202      	bcs.n	8000cf2 <__udivmoddi4+0x11a>
 8000cec:	4298      	cmp	r0, r3
 8000cee:	f200 80cd 	bhi.w	8000e8c <__udivmoddi4+0x2b4>
 8000cf2:	4626      	mov	r6, r4
 8000cf4:	1a1c      	subs	r4, r3, r0
 8000cf6:	fa1f f38e 	uxth.w	r3, lr
 8000cfa:	fbb4 f0f8 	udiv	r0, r4, r8
 8000cfe:	fb08 4410 	mls	r4, r8, r0, r4
 8000d02:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d06:	fb00 f707 	mul.w	r7, r0, r7
 8000d0a:	429f      	cmp	r7, r3
 8000d0c:	d908      	bls.n	8000d20 <__udivmoddi4+0x148>
 8000d0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d12:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d16:	d202      	bcs.n	8000d1e <__udivmoddi4+0x146>
 8000d18:	429f      	cmp	r7, r3
 8000d1a:	f200 80b0 	bhi.w	8000e7e <__udivmoddi4+0x2a6>
 8000d1e:	4620      	mov	r0, r4
 8000d20:	1bdb      	subs	r3, r3, r7
 8000d22:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d26:	e7a5      	b.n	8000c74 <__udivmoddi4+0x9c>
 8000d28:	f1c1 0620 	rsb	r6, r1, #32
 8000d2c:	408b      	lsls	r3, r1
 8000d2e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d32:	431f      	orrs	r7, r3
 8000d34:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d38:	fa04 f301 	lsl.w	r3, r4, r1
 8000d3c:	ea43 030c 	orr.w	r3, r3, ip
 8000d40:	40f4      	lsrs	r4, r6
 8000d42:	fa00 f801 	lsl.w	r8, r0, r1
 8000d46:	0c38      	lsrs	r0, r7, #16
 8000d48:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d4c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d50:	fa1f fc87 	uxth.w	ip, r7
 8000d54:	fb00 441e 	mls	r4, r0, lr, r4
 8000d58:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d5c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d60:	45a1      	cmp	r9, r4
 8000d62:	fa02 f201 	lsl.w	r2, r2, r1
 8000d66:	d90a      	bls.n	8000d7e <__udivmoddi4+0x1a6>
 8000d68:	193c      	adds	r4, r7, r4
 8000d6a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d6e:	f080 8084 	bcs.w	8000e7a <__udivmoddi4+0x2a2>
 8000d72:	45a1      	cmp	r9, r4
 8000d74:	f240 8081 	bls.w	8000e7a <__udivmoddi4+0x2a2>
 8000d78:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d7c:	443c      	add	r4, r7
 8000d7e:	eba4 0409 	sub.w	r4, r4, r9
 8000d82:	fa1f f983 	uxth.w	r9, r3
 8000d86:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d8a:	fb00 4413 	mls	r4, r0, r3, r4
 8000d8e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d92:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d96:	45a4      	cmp	ip, r4
 8000d98:	d907      	bls.n	8000daa <__udivmoddi4+0x1d2>
 8000d9a:	193c      	adds	r4, r7, r4
 8000d9c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000da0:	d267      	bcs.n	8000e72 <__udivmoddi4+0x29a>
 8000da2:	45a4      	cmp	ip, r4
 8000da4:	d965      	bls.n	8000e72 <__udivmoddi4+0x29a>
 8000da6:	3b02      	subs	r3, #2
 8000da8:	443c      	add	r4, r7
 8000daa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dae:	fba0 9302 	umull	r9, r3, r0, r2
 8000db2:	eba4 040c 	sub.w	r4, r4, ip
 8000db6:	429c      	cmp	r4, r3
 8000db8:	46ce      	mov	lr, r9
 8000dba:	469c      	mov	ip, r3
 8000dbc:	d351      	bcc.n	8000e62 <__udivmoddi4+0x28a>
 8000dbe:	d04e      	beq.n	8000e5e <__udivmoddi4+0x286>
 8000dc0:	b155      	cbz	r5, 8000dd8 <__udivmoddi4+0x200>
 8000dc2:	ebb8 030e 	subs.w	r3, r8, lr
 8000dc6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dca:	fa04 f606 	lsl.w	r6, r4, r6
 8000dce:	40cb      	lsrs	r3, r1
 8000dd0:	431e      	orrs	r6, r3
 8000dd2:	40cc      	lsrs	r4, r1
 8000dd4:	e9c5 6400 	strd	r6, r4, [r5]
 8000dd8:	2100      	movs	r1, #0
 8000dda:	e750      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000ddc:	f1c2 0320 	rsb	r3, r2, #32
 8000de0:	fa20 f103 	lsr.w	r1, r0, r3
 8000de4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000de8:	fa24 f303 	lsr.w	r3, r4, r3
 8000dec:	4094      	lsls	r4, r2
 8000dee:	430c      	orrs	r4, r1
 8000df0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000df4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000df8:	fa1f f78c 	uxth.w	r7, ip
 8000dfc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e00:	fb08 3110 	mls	r1, r8, r0, r3
 8000e04:	0c23      	lsrs	r3, r4, #16
 8000e06:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e0a:	fb00 f107 	mul.w	r1, r0, r7
 8000e0e:	4299      	cmp	r1, r3
 8000e10:	d908      	bls.n	8000e24 <__udivmoddi4+0x24c>
 8000e12:	eb1c 0303 	adds.w	r3, ip, r3
 8000e16:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e1a:	d22c      	bcs.n	8000e76 <__udivmoddi4+0x29e>
 8000e1c:	4299      	cmp	r1, r3
 8000e1e:	d92a      	bls.n	8000e76 <__udivmoddi4+0x29e>
 8000e20:	3802      	subs	r0, #2
 8000e22:	4463      	add	r3, ip
 8000e24:	1a5b      	subs	r3, r3, r1
 8000e26:	b2a4      	uxth	r4, r4
 8000e28:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e2c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e30:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e34:	fb01 f307 	mul.w	r3, r1, r7
 8000e38:	42a3      	cmp	r3, r4
 8000e3a:	d908      	bls.n	8000e4e <__udivmoddi4+0x276>
 8000e3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e40:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e44:	d213      	bcs.n	8000e6e <__udivmoddi4+0x296>
 8000e46:	42a3      	cmp	r3, r4
 8000e48:	d911      	bls.n	8000e6e <__udivmoddi4+0x296>
 8000e4a:	3902      	subs	r1, #2
 8000e4c:	4464      	add	r4, ip
 8000e4e:	1ae4      	subs	r4, r4, r3
 8000e50:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e54:	e739      	b.n	8000cca <__udivmoddi4+0xf2>
 8000e56:	4604      	mov	r4, r0
 8000e58:	e6f0      	b.n	8000c3c <__udivmoddi4+0x64>
 8000e5a:	4608      	mov	r0, r1
 8000e5c:	e706      	b.n	8000c6c <__udivmoddi4+0x94>
 8000e5e:	45c8      	cmp	r8, r9
 8000e60:	d2ae      	bcs.n	8000dc0 <__udivmoddi4+0x1e8>
 8000e62:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e66:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e6a:	3801      	subs	r0, #1
 8000e6c:	e7a8      	b.n	8000dc0 <__udivmoddi4+0x1e8>
 8000e6e:	4631      	mov	r1, r6
 8000e70:	e7ed      	b.n	8000e4e <__udivmoddi4+0x276>
 8000e72:	4603      	mov	r3, r0
 8000e74:	e799      	b.n	8000daa <__udivmoddi4+0x1d2>
 8000e76:	4630      	mov	r0, r6
 8000e78:	e7d4      	b.n	8000e24 <__udivmoddi4+0x24c>
 8000e7a:	46d6      	mov	lr, sl
 8000e7c:	e77f      	b.n	8000d7e <__udivmoddi4+0x1a6>
 8000e7e:	4463      	add	r3, ip
 8000e80:	3802      	subs	r0, #2
 8000e82:	e74d      	b.n	8000d20 <__udivmoddi4+0x148>
 8000e84:	4606      	mov	r6, r0
 8000e86:	4623      	mov	r3, r4
 8000e88:	4608      	mov	r0, r1
 8000e8a:	e70f      	b.n	8000cac <__udivmoddi4+0xd4>
 8000e8c:	3e02      	subs	r6, #2
 8000e8e:	4463      	add	r3, ip
 8000e90:	e730      	b.n	8000cf4 <__udivmoddi4+0x11c>
 8000e92:	bf00      	nop

08000e94 <__aeabi_idiv0>:
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop

08000e98 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b085      	sub	sp, #20
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000ea0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000ea4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000ea6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	4313      	orrs	r3, r2
 8000eae:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000eb0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000eb4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	4013      	ands	r3, r2
 8000eba:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000ebc:	68fb      	ldr	r3, [r7, #12]
}
 8000ebe:	bf00      	nop
 8000ec0:	3714      	adds	r7, #20
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bc80      	pop	{r7}
 8000ec6:	4770      	bx	lr

08000ec8 <LL_APB2_GRP1_DisableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_DisableClock(uint32_t Periphs)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	b083      	sub	sp, #12
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 8000ed0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000ed4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	43db      	mvns	r3, r3
 8000eda:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000ede:	4013      	ands	r3, r2
 8000ee0:	660b      	str	r3, [r1, #96]	@ 0x60
}
 8000ee2:	bf00      	nop
 8000ee4:	370c      	adds	r7, #12
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bc80      	pop	{r7}
 8000eea:	4770      	bx	lr

08000eec <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	af00      	add	r7, sp, #0

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC;
 8000ef0:	4b23      	ldr	r3, [pc, #140]	@ (8000f80 <MX_ADC_Init+0x94>)
 8000ef2:	4a24      	ldr	r2, [pc, #144]	@ (8000f84 <MX_ADC_Init+0x98>)
 8000ef4:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000ef6:	4b22      	ldr	r3, [pc, #136]	@ (8000f80 <MX_ADC_Init+0x94>)
 8000ef8:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8000efc:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000efe:	4b20      	ldr	r3, [pc, #128]	@ (8000f80 <MX_ADC_Init+0x94>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f04:	4b1e      	ldr	r3, [pc, #120]	@ (8000f80 <MX_ADC_Init+0x94>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000f0a:	4b1d      	ldr	r3, [pc, #116]	@ (8000f80 <MX_ADC_Init+0x94>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f10:	4b1b      	ldr	r3, [pc, #108]	@ (8000f80 <MX_ADC_Init+0x94>)
 8000f12:	2204      	movs	r2, #4
 8000f14:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000f16:	4b1a      	ldr	r3, [pc, #104]	@ (8000f80 <MX_ADC_Init+0x94>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000f1c:	4b18      	ldr	r3, [pc, #96]	@ (8000f80 <MX_ADC_Init+0x94>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 8000f22:	4b17      	ldr	r3, [pc, #92]	@ (8000f80 <MX_ADC_Init+0x94>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	769a      	strb	r2, [r3, #26]
  hadc.Init.NbrOfConversion = 1;
 8000f28:	4b15      	ldr	r3, [pc, #84]	@ (8000f80 <MX_ADC_Init+0x94>)
 8000f2a:	2201      	movs	r2, #1
 8000f2c:	61da      	str	r2, [r3, #28]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000f2e:	4b14      	ldr	r3, [pc, #80]	@ (8000f80 <MX_ADC_Init+0x94>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	f883 2020 	strb.w	r2, [r3, #32]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f36:	4b12      	ldr	r3, [pc, #72]	@ (8000f80 <MX_ADC_Init+0x94>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f3c:	4b10      	ldr	r3, [pc, #64]	@ (8000f80 <MX_ADC_Init+0x94>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000f42:	4b0f      	ldr	r3, [pc, #60]	@ (8000f80 <MX_ADC_Init+0x94>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  hadc.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000f4a:	4b0d      	ldr	r3, [pc, #52]	@ (8000f80 <MX_ADC_Init+0x94>)
 8000f4c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000f50:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_160CYCLES_5;
 8000f52:	4b0b      	ldr	r3, [pc, #44]	@ (8000f80 <MX_ADC_Init+0x94>)
 8000f54:	2207      	movs	r2, #7
 8000f56:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_160CYCLES_5;
 8000f58:	4b09      	ldr	r3, [pc, #36]	@ (8000f80 <MX_ADC_Init+0x94>)
 8000f5a:	2207      	movs	r2, #7
 8000f5c:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc.Init.OversamplingMode = DISABLE;
 8000f5e:	4b08      	ldr	r3, [pc, #32]	@ (8000f80 <MX_ADC_Init+0x94>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  hadc.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000f66:	4b06      	ldr	r3, [pc, #24]	@ (8000f80 <MX_ADC_Init+0x94>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000f6c:	4804      	ldr	r0, [pc, #16]	@ (8000f80 <MX_ADC_Init+0x94>)
 8000f6e:	f001 fee7 	bl	8002d40 <HAL_ADC_Init>
 8000f72:	4603      	mov	r3, r0
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d001      	beq.n	8000f7c <MX_ADC_Init+0x90>
  {
    Error_Handler();
 8000f78:	f000 fb80 	bl	800167c <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000f7c:	bf00      	nop
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	20000174 	.word	0x20000174
 8000f84:	40012400 	.word	0x40012400

08000f88 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b082      	sub	sp, #8
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC)
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	4a05      	ldr	r2, [pc, #20]	@ (8000fac <HAL_ADC_MspInit+0x24>)
 8000f96:	4293      	cmp	r3, r2
 8000f98:	d103      	bne.n	8000fa2 <HAL_ADC_MspInit+0x1a>
  {
  /* USER CODE BEGIN ADC_MspInit 0 */

  /* USER CODE END ADC_MspInit 0 */
    /* ADC clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000f9a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000f9e:	f7ff ff7b 	bl	8000e98 <LL_APB2_GRP1_EnableClock>
  /* USER CODE BEGIN ADC_MspInit 1 */

  /* USER CODE END ADC_MspInit 1 */
  }
}
 8000fa2:	bf00      	nop
 8000fa4:	3708      	adds	r7, #8
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	40012400 	.word	0x40012400

08000fb0 <HAL_ADC_MspDeInit>:

void HAL_ADC_MspDeInit(ADC_HandleTypeDef* adcHandle)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b082      	sub	sp, #8
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC)
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	4a05      	ldr	r2, [pc, #20]	@ (8000fd4 <HAL_ADC_MspDeInit+0x24>)
 8000fbe:	4293      	cmp	r3, r2
 8000fc0:	d103      	bne.n	8000fca <HAL_ADC_MspDeInit+0x1a>
  {
  /* USER CODE BEGIN ADC_MspDeInit 0 */

  /* USER CODE END ADC_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_ADC_CLK_DISABLE();
 8000fc2:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000fc6:	f7ff ff7f 	bl	8000ec8 <LL_APB2_GRP1_DisableClock>
  /* USER CODE BEGIN ADC_MspDeInit 1 */

  /* USER CODE END ADC_MspDeInit 1 */
  }
}
 8000fca:	bf00      	nop
 8000fcc:	3708      	adds	r7, #8
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	40012400 	.word	0x40012400

08000fd8 <SYS_InitMeasurement>:
/* USER CODE BEGIN EF */

/* USER CODE END EF */

void SYS_InitMeasurement(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SYS_InitMeasurement_1 */

  /* USER CODE END SYS_InitMeasurement_1 */
  hadc.Instance = ADC;
 8000fdc:	4b03      	ldr	r3, [pc, #12]	@ (8000fec <SYS_InitMeasurement+0x14>)
 8000fde:	4a04      	ldr	r2, [pc, #16]	@ (8000ff0 <SYS_InitMeasurement+0x18>)
 8000fe0:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN SYS_InitMeasurement_2 */

  /* USER CODE END SYS_InitMeasurement_2 */
}
 8000fe2:	bf00      	nop
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bc80      	pop	{r7}
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop
 8000fec:	20000174 	.word	0x20000174
 8000ff0:	40012400 	.word	0x40012400

08000ff4 <SYS_GetBatteryLevel>:

  /* USER CODE END SYS_GetTemperatureLevel_2 */
}

uint16_t SYS_GetBatteryLevel(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b082      	sub	sp, #8
 8000ff8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SYS_GetBatteryLevel_1 */

  /* USER CODE END SYS_GetBatteryLevel_1 */
  uint16_t batteryLevelmV = 0;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	80fb      	strh	r3, [r7, #6]
  uint32_t measuredLevel = 0;
 8000ffe:	2300      	movs	r3, #0
 8001000:	603b      	str	r3, [r7, #0]

  measuredLevel = ADC_ReadChannels(ADC_CHANNEL_VREFINT);
 8001002:	4813      	ldr	r0, [pc, #76]	@ (8001050 <SYS_GetBatteryLevel+0x5c>)
 8001004:	f000 f82a 	bl	800105c <ADC_ReadChannels>
 8001008:	6038      	str	r0, [r7, #0]

  if (measuredLevel == 0)
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	2b00      	cmp	r3, #0
 800100e:	d102      	bne.n	8001016 <SYS_GetBatteryLevel+0x22>
  {
    batteryLevelmV = 0;
 8001010:	2300      	movs	r3, #0
 8001012:	80fb      	strh	r3, [r7, #6]
 8001014:	e016      	b.n	8001044 <SYS_GetBatteryLevel+0x50>
  }
  else
  {
    if ((uint32_t)*VREFINT_CAL_ADDR != (uint32_t)0xFFFFU)
 8001016:	4b0f      	ldr	r3, [pc, #60]	@ (8001054 <SYS_GetBatteryLevel+0x60>)
 8001018:	881b      	ldrh	r3, [r3, #0]
 800101a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800101e:	4293      	cmp	r3, r2
 8001020:	d00b      	beq.n	800103a <SYS_GetBatteryLevel+0x46>
    {
      /* Device with Reference voltage calibrated in production:
         use device optimized parameters */
      batteryLevelmV = __LL_ADC_CALC_VREFANALOG_VOLTAGE(measuredLevel,
 8001022:	4b0c      	ldr	r3, [pc, #48]	@ (8001054 <SYS_GetBatteryLevel+0x60>)
 8001024:	881b      	ldrh	r3, [r3, #0]
 8001026:	461a      	mov	r2, r3
 8001028:	f640 43e4 	movw	r3, #3300	@ 0xce4
 800102c:	fb03 f202 	mul.w	r2, r3, r2
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	fbb2 f3f3 	udiv	r3, r2, r3
 8001036:	80fb      	strh	r3, [r7, #6]
 8001038:	e004      	b.n	8001044 <SYS_GetBatteryLevel+0x50>
    }
    else
    {
      /* Device with Reference voltage not calibrated in production:
         use generic parameters */
      batteryLevelmV = (VREFINT_CAL_VREF * 1510) / measuredLevel;
 800103a:	4a07      	ldr	r2, [pc, #28]	@ (8001058 <SYS_GetBatteryLevel+0x64>)
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001042:	80fb      	strh	r3, [r7, #6]
    }
  }

  return batteryLevelmV;
 8001044:	88fb      	ldrh	r3, [r7, #6]
  /* USER CODE BEGIN SYS_GetBatteryLevel_2 */

  /* USER CODE END SYS_GetBatteryLevel_2 */
}
 8001046:	4618      	mov	r0, r3
 8001048:	3708      	adds	r7, #8
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	b4002000 	.word	0xb4002000
 8001054:	1fff75aa 	.word	0x1fff75aa
 8001058:	004c08d8 	.word	0x004c08d8

0800105c <ADC_ReadChannels>:
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

static uint32_t ADC_ReadChannels(uint32_t channel)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b086      	sub	sp, #24
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ADC_ReadChannels_1 */

  /* USER CODE END ADC_ReadChannels_1 */
  uint32_t ADCxConvertedValues = 0;
 8001064:	2300      	movs	r3, #0
 8001066:	617b      	str	r3, [r7, #20]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001068:	f107 0308 	add.w	r3, r7, #8
 800106c:	2200      	movs	r2, #0
 800106e:	601a      	str	r2, [r3, #0]
 8001070:	605a      	str	r2, [r3, #4]
 8001072:	609a      	str	r2, [r3, #8]

  MX_ADC_Init();
 8001074:	f7ff ff3a 	bl	8000eec <MX_ADC_Init>

  /* Start Calibration */
  if (HAL_ADCEx_Calibration_Start(&hadc) != HAL_OK)
 8001078:	481a      	ldr	r0, [pc, #104]	@ (80010e4 <ADC_ReadChannels+0x88>)
 800107a:	f002 fc90 	bl	800399e <HAL_ADCEx_Calibration_Start>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	d001      	beq.n	8001088 <ADC_ReadChannels+0x2c>
  {
    Error_Handler();
 8001084:	f000 fafa 	bl	800167c <Error_Handler>
  }

  /* Configure Regular Channel */
  sConfig.Channel = channel;
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	60bb      	str	r3, [r7, #8]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800108c:	2300      	movs	r3, #0
 800108e:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8001090:	2300      	movs	r3, #0
 8001092:	613b      	str	r3, [r7, #16]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001094:	f107 0308 	add.w	r3, r7, #8
 8001098:	4619      	mov	r1, r3
 800109a:	4812      	ldr	r0, [pc, #72]	@ (80010e4 <ADC_ReadChannels+0x88>)
 800109c:	f002 f99c 	bl	80033d8 <HAL_ADC_ConfigChannel>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d001      	beq.n	80010aa <ADC_ReadChannels+0x4e>
  {
    Error_Handler();
 80010a6:	f000 fae9 	bl	800167c <Error_Handler>
  }

  if (HAL_ADC_Start(&hadc) != HAL_OK)
 80010aa:	480e      	ldr	r0, [pc, #56]	@ (80010e4 <ADC_ReadChannels+0x88>)
 80010ac:	f002 f878 	bl	80031a0 <HAL_ADC_Start>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d001      	beq.n	80010ba <ADC_ReadChannels+0x5e>
  {
    /* Start Error */
    Error_Handler();
 80010b6:	f000 fae1 	bl	800167c <Error_Handler>
  }
  /** Wait for end of conversion */
  HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 80010ba:	f04f 31ff 	mov.w	r1, #4294967295
 80010be:	4809      	ldr	r0, [pc, #36]	@ (80010e4 <ADC_ReadChannels+0x88>)
 80010c0:	f002 f8e6 	bl	8003290 <HAL_ADC_PollForConversion>

  /** Wait for end of conversion */
  HAL_ADC_Stop(&hadc);   /* it calls also ADC_Disable() */
 80010c4:	4807      	ldr	r0, [pc, #28]	@ (80010e4 <ADC_ReadChannels+0x88>)
 80010c6:	f002 f8b1 	bl	800322c <HAL_ADC_Stop>

  ADCxConvertedValues = HAL_ADC_GetValue(&hadc);
 80010ca:	4806      	ldr	r0, [pc, #24]	@ (80010e4 <ADC_ReadChannels+0x88>)
 80010cc:	f002 f977 	bl	80033be <HAL_ADC_GetValue>
 80010d0:	6178      	str	r0, [r7, #20]

  HAL_ADC_DeInit(&hadc);
 80010d2:	4804      	ldr	r0, [pc, #16]	@ (80010e4 <ADC_ReadChannels+0x88>)
 80010d4:	f001 ffe8 	bl	80030a8 <HAL_ADC_DeInit>

  return ADCxConvertedValues;
 80010d8:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN ADC_ReadChannels_2 */

  /* USER CODE END ADC_ReadChannels_2 */
}
 80010da:	4618      	mov	r0, r3
 80010dc:	3718      	adds	r7, #24
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	20000174 	.word	0x20000174

080010e8 <LL_AHB1_GRP1_EnableClock>:
{
 80010e8:	b480      	push	{r7}
 80010ea:	b085      	sub	sp, #20
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80010f0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80010f4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80010f6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	4313      	orrs	r3, r2
 80010fe:	648b      	str	r3, [r1, #72]	@ 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001100:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001104:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	4013      	ands	r3, r2
 800110a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800110c:	68fb      	ldr	r3, [r7, #12]
}
 800110e:	bf00      	nop
 8001110:	3714      	adds	r7, #20
 8001112:	46bd      	mov	sp, r7
 8001114:	bc80      	pop	{r7}
 8001116:	4770      	bx	lr

08001118 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800111c:	2004      	movs	r0, #4
 800111e:	f7ff ffe3 	bl	80010e8 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001122:	2001      	movs	r0, #1
 8001124:	f7ff ffe0 	bl	80010e8 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 2, 0);
 8001128:	2200      	movs	r2, #0
 800112a:	2102      	movs	r1, #2
 800112c:	200b      	movs	r0, #11
 800112e:	f002 fddc 	bl	8003cea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001132:	200b      	movs	r0, #11
 8001134:	f002 fdf3 	bl	8003d1e <HAL_NVIC_EnableIRQ>

}
 8001138:	bf00      	nop
 800113a:	bd80      	pop	{r7, pc}

0800113c <LL_FLASH_IsActiveFlag_OperationSuspended>:
  * @rmtoll FLASH_SR      PESD         LL_FLASH_IsActiveFlag_OperationSuspended
  * @rmtoll FLASH_C2SR    PESD         LL_FLASH_IsActiveFlag_OperationSuspended
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_FLASH_IsActiveFlag_OperationSuspended(void)
{
 800113c:	b480      	push	{r7}
 800113e:	af00      	add	r7, sp, #0
#if defined(CORE_CM0PLUS)
  return ((READ_BIT(FLASH->C2SR, FLASH_C2SR_PESD) == (FLASH_C2SR_PESD)) ? 1UL : 0UL);
#else
  return ((READ_BIT(FLASH->SR, FLASH_SR_PESD) == (FLASH_SR_PESD)) ? 1UL : 0UL);
 8001140:	4b06      	ldr	r3, [pc, #24]	@ (800115c <LL_FLASH_IsActiveFlag_OperationSuspended+0x20>)
 8001142:	691b      	ldr	r3, [r3, #16]
 8001144:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001148:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800114c:	d101      	bne.n	8001152 <LL_FLASH_IsActiveFlag_OperationSuspended+0x16>
 800114e:	2301      	movs	r3, #1
 8001150:	e000      	b.n	8001154 <LL_FLASH_IsActiveFlag_OperationSuspended+0x18>
 8001152:	2300      	movs	r3, #0
#endif
}
 8001154:	4618      	mov	r0, r3
 8001156:	46bd      	mov	sp, r7
 8001158:	bc80      	pop	{r7}
 800115a:	4770      	bx	lr
 800115c:	58004000 	.word	0x58004000

08001160 <FLASH_IF_Write>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t FLASH_IF_Write(uint32_t address, uint8_t *data, uint32_t size, uint8_t *dataTempPage)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b08c      	sub	sp, #48	@ 0x30
 8001164:	af00      	add	r7, sp, #0
 8001166:	60f8      	str	r0, [r7, #12]
 8001168:	60b9      	str	r1, [r7, #8]
 800116a:	607a      	str	r2, [r7, #4]
 800116c:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN FLASH_IF_Write_1 */

  /* USER CODE END FLASH_IF_Write_1 */
  int32_t status = FLASH_OK;
 800116e:	2300      	movs	r3, #0
 8001170:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t page_start_index = PAGE(address);
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	f103 4278 	add.w	r2, r3, #4160749568	@ 0xf8000000
 8001178:	4b56      	ldr	r3, [pc, #344]	@ (80012d4 <FLASH_IF_Write+0x174>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	0299      	lsls	r1, r3, #10
 800117e:	4b56      	ldr	r3, [pc, #344]	@ (80012d8 <FLASH_IF_Write+0x178>)
 8001180:	400b      	ands	r3, r1
 8001182:	fbb2 f1f3 	udiv	r1, r2, r3
 8001186:	fb01 f303 	mul.w	r3, r1, r3
 800118a:	1ad3      	subs	r3, r2, r3
 800118c:	0adb      	lsrs	r3, r3, #11
 800118e:	61bb      	str	r3, [r7, #24]
  uint32_t page_end_index = PAGE(address + size - 1);
 8001190:	68fa      	ldr	r2, [r7, #12]
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	4413      	add	r3, r2
 8001196:	f103 4378 	add.w	r3, r3, #4160749568	@ 0xf8000000
 800119a:	3b01      	subs	r3, #1
 800119c:	4a4d      	ldr	r2, [pc, #308]	@ (80012d4 <FLASH_IF_Write+0x174>)
 800119e:	6812      	ldr	r2, [r2, #0]
 80011a0:	0291      	lsls	r1, r2, #10
 80011a2:	4a4d      	ldr	r2, [pc, #308]	@ (80012d8 <FLASH_IF_Write+0x178>)
 80011a4:	400a      	ands	r2, r1
 80011a6:	fbb3 f1f2 	udiv	r1, r3, r2
 80011aa:	fb01 f202 	mul.w	r2, r1, r2
 80011ae:	1a9b      	subs	r3, r3, r2
 80011b0:	0adb      	lsrs	r3, r3, #11
 80011b2:	617b      	str	r3, [r7, #20]
  uint32_t curr_size = size;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t curr_dest_addr = address;
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t curr_src_addr = (uint32_t)data;
 80011bc:	68bb      	ldr	r3, [r7, #8]
 80011be:	623b      	str	r3, [r7, #32]

  if ((data == NULL) || ((size % sizeof(uint64_t)) != 0) || ((address % sizeof(uint64_t)) != 0))
 80011c0:	68bb      	ldr	r3, [r7, #8]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d009      	beq.n	80011da <FLASH_IF_Write+0x7a>
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	f003 0307 	and.w	r3, r3, #7
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d104      	bne.n	80011da <FLASH_IF_Write+0x7a>
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	f003 0307 	and.w	r3, r3, #7
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d002      	beq.n	80011e0 <FLASH_IF_Write+0x80>
  {
    return FLASH_PARAM_ERROR;
 80011da:	f06f 0304 	mvn.w	r3, #4
 80011de:	e074      	b.n	80012ca <FLASH_IF_Write+0x16a>
  }

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 80011e0:	4b3e      	ldr	r3, [pc, #248]	@ (80012dc <FLASH_IF_Write+0x17c>)
 80011e2:	695b      	ldr	r3, [r3, #20]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	da02      	bge.n	80011ee <FLASH_IF_Write+0x8e>
  {
    return FLASH_LOCK_ERROR;
 80011e8:	f06f 0303 	mvn.w	r3, #3
 80011ec:	e06d      	b.n	80012ca <FLASH_IF_Write+0x16a>
  }

  if (page_start_index != page_end_index)
 80011ee:	69ba      	ldr	r2, [r7, #24]
 80011f0:	697b      	ldr	r3, [r7, #20]
 80011f2:	429a      	cmp	r2, r3
 80011f4:	d005      	beq.n	8001202 <FLASH_IF_Write+0xa2>
  {
    curr_size = FLASH_PAGE_SIZE - (address % FLASH_PAGE_SIZE);
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80011fc:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 8001200:	62bb      	str	r3, [r7, #40]	@ 0x28
  }

  for (uint32_t idx = page_start_index; idx <= page_end_index; idx++)
 8001202:	69bb      	ldr	r3, [r7, #24]
 8001204:	61fb      	str	r3, [r7, #28]
 8001206:	e05b      	b.n	80012c0 <FLASH_IF_Write+0x160>
  {
    if (FLASH_IF_IsEmpty((uint8_t *)curr_dest_addr, curr_size) != FLASH_EMPTY)
 8001208:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800120a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800120c:	4618      	mov	r0, r3
 800120e:	f000 f8f8 	bl	8001402 <FLASH_IF_IsEmpty>
 8001212:	4603      	mov	r3, r0
 8001214:	2b00      	cmp	r3, #0
 8001216:	d037      	beq.n	8001288 <FLASH_IF_Write+0x128>
    {
      if (dataTempPage == NULL)
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	2b00      	cmp	r3, #0
 800121c:	d102      	bne.n	8001224 <FLASH_IF_Write+0xc4>
      {
        return FLASH_PARAM_ERROR;
 800121e:	f06f 0304 	mvn.w	r3, #4
 8001222:	e052      	b.n	80012ca <FLASH_IF_Write+0x16a>
      }
      /* backup initial Flash page data in RAM area */
      UTIL_MEM_cpy_8(dataTempPage, (uint8_t *)(idx * FLASH_PAGE_SIZE + FLASH_BASE), FLASH_PAGE_SIZE);
 8001224:	69fb      	ldr	r3, [r7, #28]
 8001226:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 800122a:	02db      	lsls	r3, r3, #11
 800122c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001230:	4619      	mov	r1, r3
 8001232:	6838      	ldr	r0, [r7, #0]
 8001234:	f018 ff18 	bl	801a068 <UTIL_MEM_cpy_8>
      /* copy fragment into RAM area */
      UTIL_MEM_cpy_8(&dataTempPage[((uint32_t)curr_dest_addr) % FLASH_PAGE_SIZE], (uint8_t *)curr_src_addr, curr_size);
 8001238:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800123a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800123e:	683a      	ldr	r2, [r7, #0]
 8001240:	4413      	add	r3, r2
 8001242:	6a39      	ldr	r1, [r7, #32]
 8001244:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001246:	b292      	uxth	r2, r2
 8001248:	4618      	mov	r0, r3
 800124a:	f018 ff0d 	bl	801a068 <UTIL_MEM_cpy_8>

      /*  erase the Flash sector, to avoid writing twice in RAM */
      if (FLASH_IF_EraseByPages(idx, 1, 0) != FLASH_OK)
 800124e:	2200      	movs	r2, #0
 8001250:	2101      	movs	r1, #1
 8001252:	69f8      	ldr	r0, [r7, #28]
 8001254:	f000 f865 	bl	8001322 <FLASH_IF_EraseByPages>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d003      	beq.n	8001266 <FLASH_IF_Write+0x106>
      {
        status = FLASH_ERASE_ERROR;
 800125e:	f06f 0301 	mvn.w	r3, #1
 8001262:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break; /* exit for loop */
 8001264:	e030      	b.n	80012c8 <FLASH_IF_Write+0x168>
      }
      else
      {
        /* copy the whole flash sector including fragment from RAM to Flash*/
        if (FLASH_IF_Write_Buffer(idx * FLASH_PAGE_SIZE + FLASH_BASE, dataTempPage, FLASH_PAGE_SIZE) != FLASH_OK)
 8001266:	69fb      	ldr	r3, [r7, #28]
 8001268:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 800126c:	02db      	lsls	r3, r3, #11
 800126e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001272:	6839      	ldr	r1, [r7, #0]
 8001274:	4618      	mov	r0, r3
 8001276:	f000 f88a 	bl	800138e <FLASH_IF_Write_Buffer>
 800127a:	4603      	mov	r3, r0
 800127c:	2b00      	cmp	r3, #0
 800127e:	d010      	beq.n	80012a2 <FLASH_IF_Write+0x142>
        {
          status = FLASH_WRITE_ERROR;
 8001280:	f06f 0302 	mvn.w	r3, #2
 8001284:	62fb      	str	r3, [r7, #44]	@ 0x2c
          break; /* exit for loop */
 8001286:	e01f      	b.n	80012c8 <FLASH_IF_Write+0x168>
        }
      }
    }
    else
    {
      if (FLASH_IF_Write_Buffer(curr_dest_addr, (uint8_t *)curr_src_addr, curr_size) != FLASH_OK)
 8001288:	6a3b      	ldr	r3, [r7, #32]
 800128a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800128c:	4619      	mov	r1, r3
 800128e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001290:	f000 f87d 	bl	800138e <FLASH_IF_Write_Buffer>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d003      	beq.n	80012a2 <FLASH_IF_Write+0x142>
      {
        status = FLASH_WRITE_ERROR;
 800129a:	f06f 0302 	mvn.w	r3, #2
 800129e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break; /* exit for loop */
 80012a0:	e012      	b.n	80012c8 <FLASH_IF_Write+0x168>
      }
    }

    /* 2nd part of memory overlapped on 2nd flash sector */
    curr_dest_addr += curr_size;
 80012a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80012a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80012a6:	4413      	add	r3, r2
 80012a8:	627b      	str	r3, [r7, #36]	@ 0x24
    curr_src_addr += curr_size;
 80012aa:	6a3a      	ldr	r2, [r7, #32]
 80012ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80012ae:	4413      	add	r3, r2
 80012b0:	623b      	str	r3, [r7, #32]
    curr_size = size - curr_size;
 80012b2:	687a      	ldr	r2, [r7, #4]
 80012b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80012b6:	1ad3      	subs	r3, r2, r3
 80012b8:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (uint32_t idx = page_start_index; idx <= page_end_index; idx++)
 80012ba:	69fb      	ldr	r3, [r7, #28]
 80012bc:	3301      	adds	r3, #1
 80012be:	61fb      	str	r3, [r7, #28]
 80012c0:	69fa      	ldr	r2, [r7, #28]
 80012c2:	697b      	ldr	r3, [r7, #20]
 80012c4:	429a      	cmp	r2, r3
 80012c6:	d99f      	bls.n	8001208 <FLASH_IF_Write+0xa8>
  }

  return status;
 80012c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
  /* USER CODE BEGIN FLASH_IF_Write_2 */

  /* USER CODE END FLASH_IF_Write_2 */
}
 80012ca:	4618      	mov	r0, r3
 80012cc:	3730      	adds	r7, #48	@ 0x30
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	1fff75e0 	.word	0x1fff75e0
 80012d8:	03fffc00 	.word	0x03fffc00
 80012dc:	58004000 	.word	0x58004000

080012e0 <FLASH_IF_Write64>:

int32_t FLASH_IF_Write64(uint32_t address, uint64_t data)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b084      	sub	sp, #16
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	60f8      	str	r0, [r7, #12]
 80012e8:	e9c7 2300 	strd	r2, r3, [r7]
  /* USER CODE BEGIN FLASH_IF_Write64_1 */

  /* USER CODE END FLASH_IF_Write64_1 */
  while (*(uint64_t *)address != data)
 80012ec:	e00b      	b.n	8001306 <FLASH_IF_Write64+0x26>
  {
    while (LL_FLASH_IsActiveFlag_OperationSuspended());
 80012ee:	bf00      	nop
 80012f0:	f7ff ff24 	bl	800113c <LL_FLASH_IsActiveFlag_OperationSuspended>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d1fa      	bne.n	80012f0 <FLASH_IF_Write64+0x10>
    HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, address, data);
 80012fa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80012fe:	68f9      	ldr	r1, [r7, #12]
 8001300:	2001      	movs	r0, #1
 8001302:	f003 f913 	bl	800452c <HAL_FLASH_Program>
  while (*(uint64_t *)address != data)
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	e9d3 2300 	ldrd	r2, r3, [r3]
 800130c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001310:	4299      	cmp	r1, r3
 8001312:	bf08      	it	eq
 8001314:	4290      	cmpeq	r0, r2
 8001316:	d1ea      	bne.n	80012ee <FLASH_IF_Write64+0xe>
  }

  return FLASH_OK;
 8001318:	2300      	movs	r3, #0
  /* USER CODE BEGIN FLASH_IF_Write64_2 */

  /* USER CODE END FLASH_IF_Write64_2 */
}
 800131a:	4618      	mov	r0, r3
 800131c:	3710      	adds	r7, #16
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}

08001322 <FLASH_IF_EraseByPages>:

int32_t FLASH_IF_EraseByPages(uint32_t page, uint16_t n, int32_t interrupt)
{
 8001322:	b580      	push	{r7, lr}
 8001324:	b08a      	sub	sp, #40	@ 0x28
 8001326:	af00      	add	r7, sp, #0
 8001328:	60f8      	str	r0, [r7, #12]
 800132a:	460b      	mov	r3, r1
 800132c:	607a      	str	r2, [r7, #4]
 800132e:	817b      	strh	r3, [r7, #10]
  /* USER CODE END FLASH_IF_EraseByPages_1 */
  HAL_StatusTypeDef hal_status;
  FLASH_EraseInitTypeDef erase_str;
  uint32_t page_error;

  erase_str.TypeErase = FLASH_TYPEERASE_PAGES;
 8001330:	2302      	movs	r3, #2
 8001332:	61bb      	str	r3, [r7, #24]
  erase_str.Page = page;
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	61fb      	str	r3, [r7, #28]
  erase_str.NbPages = n;
 8001338:	897b      	ldrh	r3, [r7, #10]
 800133a:	623b      	str	r3, [r7, #32]

  /* Erase the Page */
  if (interrupt)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	2b00      	cmp	r3, #0
 8001340:	d008      	beq.n	8001354 <FLASH_IF_EraseByPages+0x32>
  {
    hal_status = HAL_FLASHEx_Erase_IT(&erase_str);
 8001342:	f107 0318 	add.w	r3, r7, #24
 8001346:	4618      	mov	r0, r3
 8001348:	f003 fa8e 	bl	8004868 <HAL_FLASHEx_Erase_IT>
 800134c:	4603      	mov	r3, r0
 800134e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8001352:	e00a      	b.n	800136a <FLASH_IF_EraseByPages+0x48>
  }
  else
  {
    hal_status = HAL_FLASHEx_Erase(&erase_str, &page_error);
 8001354:	f107 0214 	add.w	r2, r7, #20
 8001358:	f107 0318 	add.w	r3, r7, #24
 800135c:	4611      	mov	r1, r2
 800135e:	4618      	mov	r0, r3
 8001360:	f003 fa2a 	bl	80047b8 <HAL_FLASHEx_Erase>
 8001364:	4603      	mov	r3, r0
 8001366:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  return ((hal_status == HAL_OK) ? FLASH_OK : ((hal_status == HAL_BUSY) ? FLASH_BUSY : FLASH_ERASE_ERROR));
 800136a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800136e:	2b00      	cmp	r3, #0
 8001370:	d008      	beq.n	8001384 <FLASH_IF_EraseByPages+0x62>
 8001372:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001376:	2b02      	cmp	r3, #2
 8001378:	d101      	bne.n	800137e <FLASH_IF_EraseByPages+0x5c>
 800137a:	2301      	movs	r3, #1
 800137c:	e003      	b.n	8001386 <FLASH_IF_EraseByPages+0x64>
 800137e:	f06f 0301 	mvn.w	r3, #1
 8001382:	e000      	b.n	8001386 <FLASH_IF_EraseByPages+0x64>
 8001384:	2300      	movs	r3, #0
  /* USER CODE BEGIN FLASH_IF_EraseByPages_2 */

  /* USER CODE END FLASH_IF_EraseByPages_2 */
}
 8001386:	4618      	mov	r0, r3
 8001388:	3728      	adds	r7, #40	@ 0x28
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}

0800138e <FLASH_IF_Write_Buffer>:

/* USER CODE END EF */

/* Private Functions Definition -----------------------------------------------*/
static int32_t FLASH_IF_Write_Buffer(uint32_t pDestination, uint8_t *pSource, uint32_t uLength)
{
 800138e:	b580      	push	{r7, lr}
 8001390:	b08a      	sub	sp, #40	@ 0x28
 8001392:	af00      	add	r7, sp, #0
 8001394:	60f8      	str	r0, [r7, #12]
 8001396:	60b9      	str	r1, [r7, #8]
 8001398:	607a      	str	r2, [r7, #4]
  /* USER CODE BEGIN FLASH_IF_Write_Buffer_1 */

  /* USER CODE END FLASH_IF_Write_Buffer_1 */
  uint8_t *pSrc = pSource;
 800139a:	68bb      	ldr	r3, [r7, #8]
 800139c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint64_t src_value;
  int32_t status = FLASH_OK;
 800139e:	2300      	movs	r3, #0
 80013a0:	623b      	str	r3, [r7, #32]

  for (uint32_t i = 0; i < (uLength / sizeof(uint64_t)); i++)
 80013a2:	2300      	movs	r3, #0
 80013a4:	61fb      	str	r3, [r7, #28]
 80013a6:	e020      	b.n	80013ea <FLASH_IF_Write_Buffer+0x5c>
  {
    UTIL_MEM_cpy_8(&src_value, pSrc, sizeof(uint64_t));
 80013a8:	f107 0310 	add.w	r3, r7, #16
 80013ac:	2208      	movs	r2, #8
 80013ae:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80013b0:	4618      	mov	r0, r3
 80013b2:	f018 fe59 	bl	801a068 <UTIL_MEM_cpy_8>

    /* Avoid writing 0xFFFFFFFFFFFFFFFFLL on erased Flash */
    if (src_value != UINT64_MAX)
 80013b6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80013ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013be:	bf08      	it	eq
 80013c0:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 80013c4:	d005      	beq.n	80013d2 <FLASH_IF_Write_Buffer+0x44>
    {
      status = FLASH_IF_Write64(pDestination, src_value);
 80013c6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80013ca:	68f8      	ldr	r0, [r7, #12]
 80013cc:	f7ff ff88 	bl	80012e0 <FLASH_IF_Write64>
 80013d0:	6238      	str	r0, [r7, #32]
    }

    pDestination += sizeof(uint64_t);
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	3308      	adds	r3, #8
 80013d6:	60fb      	str	r3, [r7, #12]
    pSrc += sizeof(uint64_t);
 80013d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013da:	3308      	adds	r3, #8
 80013dc:	627b      	str	r3, [r7, #36]	@ 0x24

    if (status != FLASH_OK)
 80013de:	6a3b      	ldr	r3, [r7, #32]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d108      	bne.n	80013f6 <FLASH_IF_Write_Buffer+0x68>
  for (uint32_t i = 0; i < (uLength / sizeof(uint64_t)); i++)
 80013e4:	69fb      	ldr	r3, [r7, #28]
 80013e6:	3301      	adds	r3, #1
 80013e8:	61fb      	str	r3, [r7, #28]
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	08db      	lsrs	r3, r3, #3
 80013ee:	69fa      	ldr	r2, [r7, #28]
 80013f0:	429a      	cmp	r2, r3
 80013f2:	d3d9      	bcc.n	80013a8 <FLASH_IF_Write_Buffer+0x1a>
 80013f4:	e000      	b.n	80013f8 <FLASH_IF_Write_Buffer+0x6a>
    {
      /* exit the for loop*/
      break;
 80013f6:	bf00      	nop
    }
  }

  return status;
 80013f8:	6a3b      	ldr	r3, [r7, #32]
  /* USER CODE BEGIN FLASH_IF_Write_Buffer_2 */

  /* USER CODE END FLASH_IF_Write_Buffer_2 */
}
 80013fa:	4618      	mov	r0, r3
 80013fc:	3728      	adds	r7, #40	@ 0x28
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}

08001402 <FLASH_IF_IsEmpty>:

static int32_t FLASH_IF_IsEmpty(uint8_t *addr, uint32_t size)
{
 8001402:	b480      	push	{r7}
 8001404:	b085      	sub	sp, #20
 8001406:	af00      	add	r7, sp, #0
 8001408:	6078      	str	r0, [r7, #4]
 800140a:	6039      	str	r1, [r7, #0]
  /* USER CODE END FLASH_IF_IsEmpty_1 */
  uint64_t *addr64;
  uint32_t i;

  /* start memory NOT 64bits aligned */
  while ((((uint32_t)addr) % sizeof(uint64_t)) != 0)
 800140c:	e00a      	b.n	8001424 <FLASH_IF_IsEmpty+0x22>
  {
    if (*addr++ != UINT8_MAX)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	1c5a      	adds	r2, r3, #1
 8001412:	607a      	str	r2, [r7, #4]
 8001414:	781b      	ldrb	r3, [r3, #0]
 8001416:	2bff      	cmp	r3, #255	@ 0xff
 8001418:	d001      	beq.n	800141e <FLASH_IF_IsEmpty+0x1c>
    {
      return FLASH_NOT_EMPTY;
 800141a:	2301      	movs	r3, #1
 800141c:	e039      	b.n	8001492 <FLASH_IF_IsEmpty+0x90>
    }
    size--;
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	3b01      	subs	r3, #1
 8001422:	603b      	str	r3, [r7, #0]
  while ((((uint32_t)addr) % sizeof(uint64_t)) != 0)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	f003 0307 	and.w	r3, r3, #7
 800142a:	2b00      	cmp	r3, #0
 800142c:	d1ef      	bne.n	800140e <FLASH_IF_IsEmpty+0xc>
  }

  /* addr64 is 64 bits aligned */
  addr64 = (uint64_t *)addr;
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	60fb      	str	r3, [r7, #12]
  for (i = 0; i < (size / sizeof(uint64_t)); i++)
 8001432:	2300      	movs	r3, #0
 8001434:	60bb      	str	r3, [r7, #8]
 8001436:	e010      	b.n	800145a <FLASH_IF_IsEmpty+0x58>
  {
    if (*addr64++ != UINT64_MAX)
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	f103 0208 	add.w	r2, r3, #8
 800143e:	60fa      	str	r2, [r7, #12]
 8001440:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001444:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001448:	bf08      	it	eq
 800144a:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 800144e:	d001      	beq.n	8001454 <FLASH_IF_IsEmpty+0x52>
    {
      return FLASH_NOT_EMPTY;
 8001450:	2301      	movs	r3, #1
 8001452:	e01e      	b.n	8001492 <FLASH_IF_IsEmpty+0x90>
  for (i = 0; i < (size / sizeof(uint64_t)); i++)
 8001454:	68bb      	ldr	r3, [r7, #8]
 8001456:	3301      	adds	r3, #1
 8001458:	60bb      	str	r3, [r7, #8]
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	08db      	lsrs	r3, r3, #3
 800145e:	68ba      	ldr	r2, [r7, #8]
 8001460:	429a      	cmp	r2, r3
 8001462:	d3e9      	bcc.n	8001438 <FLASH_IF_IsEmpty+0x36>
    }
  }
  size -= sizeof(uint64_t) * i;
 8001464:	68bb      	ldr	r3, [r7, #8]
 8001466:	00db      	lsls	r3, r3, #3
 8001468:	683a      	ldr	r2, [r7, #0]
 800146a:	1ad3      	subs	r3, r2, r3
 800146c:	603b      	str	r3, [r7, #0]

  /* end memory NOT 64 bits aligned */
  addr = (uint8_t *)addr64;
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	607b      	str	r3, [r7, #4]
  while (size != 0)
 8001472:	e00a      	b.n	800148a <FLASH_IF_IsEmpty+0x88>
  {
    if (*addr++ != UINT8_MAX)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	1c5a      	adds	r2, r3, #1
 8001478:	607a      	str	r2, [r7, #4]
 800147a:	781b      	ldrb	r3, [r3, #0]
 800147c:	2bff      	cmp	r3, #255	@ 0xff
 800147e:	d001      	beq.n	8001484 <FLASH_IF_IsEmpty+0x82>
    {
      return FLASH_NOT_EMPTY;
 8001480:	2301      	movs	r3, #1
 8001482:	e006      	b.n	8001492 <FLASH_IF_IsEmpty+0x90>
    }
    size--;
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	3b01      	subs	r3, #1
 8001488:	603b      	str	r3, [r7, #0]
  while (size != 0)
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	2b00      	cmp	r3, #0
 800148e:	d1f1      	bne.n	8001474 <FLASH_IF_IsEmpty+0x72>
  }
  return FLASH_EMPTY;
 8001490:	2300      	movs	r3, #0
  /* USER CODE BEGIN FLASH_IF_IsEmpty_2 */

  /* USER CODE END FLASH_IF_IsEmpty_2 */
}
 8001492:	4618      	mov	r0, r3
 8001494:	3714      	adds	r7, #20
 8001496:	46bd      	mov	sp, r7
 8001498:	bc80      	pop	{r7}
 800149a:	4770      	bx	lr

0800149c <LL_AHB2_GRP1_EnableClock>:
{
 800149c:	b480      	push	{r7}
 800149e:	b085      	sub	sp, #20
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80014a4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80014a8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80014aa:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	4313      	orrs	r3, r2
 80014b2:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80014b4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80014b8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	4013      	ands	r3, r2
 80014be:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80014c0:	68fb      	ldr	r3, [r7, #12]
}
 80014c2:	bf00      	nop
 80014c4:	3714      	adds	r7, #20
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bc80      	pop	{r7}
 80014ca:	4770      	bx	lr

080014cc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b086      	sub	sp, #24
 80014d0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014d2:	1d3b      	adds	r3, r7, #4
 80014d4:	2200      	movs	r2, #0
 80014d6:	601a      	str	r2, [r3, #0]
 80014d8:	605a      	str	r2, [r3, #4]
 80014da:	609a      	str	r2, [r3, #8]
 80014dc:	60da      	str	r2, [r3, #12]
 80014de:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014e0:	2004      	movs	r0, #4
 80014e2:	f7ff ffdb 	bl	800149c <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014e6:	2002      	movs	r0, #2
 80014e8:	f7ff ffd8 	bl	800149c <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ec:	2001      	movs	r0, #1
 80014ee:	f7ff ffd5 	bl	800149c <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DBG3_Pin|DBG4_Pin|DBG2_Pin, GPIO_PIN_RESET);
 80014f2:	2200      	movs	r2, #0
 80014f4:	f44f 6183 	mov.w	r1, #1048	@ 0x418
 80014f8:	4821      	ldr	r0, [pc, #132]	@ (8001580 <MX_GPIO_Init+0xb4>)
 80014fa:	f003 fca7 	bl	8004e4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 80014fe:	2201      	movs	r2, #1
 8001500:	2120      	movs	r1, #32
 8001502:	481f      	ldr	r0, [pc, #124]	@ (8001580 <MX_GPIO_Init+0xb4>)
 8001504:	f003 fca2 	bl	8004e4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DBG1_Pin|RF_CTRL1_Pin|RF_CTRL2_Pin, GPIO_PIN_RESET);
 8001508:	2200      	movs	r2, #0
 800150a:	2131      	movs	r1, #49	@ 0x31
 800150c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001510:	f003 fc9c 	bl	8004e4c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = DBG3_Pin|DBG4_Pin|LED2_Pin|DBG2_Pin;
 8001514:	f44f 6387 	mov.w	r3, #1080	@ 0x438
 8001518:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800151a:	2301      	movs	r3, #1
 800151c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800151e:	2300      	movs	r3, #0
 8001520:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001522:	2303      	movs	r3, #3
 8001524:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001526:	1d3b      	adds	r3, r7, #4
 8001528:	4619      	mov	r1, r3
 800152a:	4815      	ldr	r0, [pc, #84]	@ (8001580 <MX_GPIO_Init+0xb4>)
 800152c:	f003 fa60 	bl	80049f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = DBG1_Pin|RF_CTRL1_Pin|RF_CTRL2_Pin;
 8001530:	2331      	movs	r3, #49	@ 0x31
 8001532:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001534:	2301      	movs	r3, #1
 8001536:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001538:	2300      	movs	r3, #0
 800153a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800153c:	2303      	movs	r3, #3
 800153e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001540:	1d3b      	adds	r3, r7, #4
 8001542:	4619      	mov	r1, r3
 8001544:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001548:	f003 fa52 	bl	80049f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUT1_Pin;
 800154c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001550:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001552:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001556:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001558:	2301      	movs	r3, #1
 800155a:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(BUT1_GPIO_Port, &GPIO_InitStruct);
 800155c:	1d3b      	adds	r3, r7, #4
 800155e:	4619      	mov	r1, r3
 8001560:	4807      	ldr	r0, [pc, #28]	@ (8001580 <MX_GPIO_Init+0xb4>)
 8001562:	f003 fa45 	bl	80049f0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001566:	2200      	movs	r2, #0
 8001568:	2100      	movs	r1, #0
 800156a:	2029      	movs	r0, #41	@ 0x29
 800156c:	f002 fbbd 	bl	8003cea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001570:	2029      	movs	r0, #41	@ 0x29
 8001572:	f002 fbd4 	bl	8003d1e <HAL_NVIC_EnableIRQ>

}
 8001576:	bf00      	nop
 8001578:	3718      	adds	r7, #24
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	48000400 	.word	0x48000400

08001584 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8001584:	b480      	push	{r7}
 8001586:	b083      	sub	sp, #12
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 800158c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001590:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001594:	f023 0218 	bic.w	r2, r3, #24
 8001598:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	4313      	orrs	r3, r2
 80015a0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 80015a4:	bf00      	nop
 80015a6:	370c      	adds	r7, #12
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bc80      	pop	{r7}
 80015ac:	4770      	bx	lr

080015ae <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015ae:	b580      	push	{r7, lr}
 80015b0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015b2:	f001 f9d7 	bl	8002964 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015b6:	f000 f807 	bl	80015c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015ba:	f7ff ff87 	bl	80014cc <MX_GPIO_Init>
  MX_LoRaWAN_Init();
 80015be:	f008 f9d5 	bl	800996c <MX_LoRaWAN_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_LoRaWAN_Process();
 80015c2:	f008 f9db 	bl	800997c <MX_LoRaWAN_Process>
 80015c6:	e7fc      	b.n	80015c2 <main+0x14>

080015c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b09a      	sub	sp, #104	@ 0x68
 80015cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015ce:	f107 0320 	add.w	r3, r7, #32
 80015d2:	2248      	movs	r2, #72	@ 0x48
 80015d4:	2100      	movs	r1, #0
 80015d6:	4618      	mov	r0, r3
 80015d8:	f01a f808 	bl	801b5ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015dc:	f107 0308 	add.w	r3, r7, #8
 80015e0:	2200      	movs	r2, #0
 80015e2:	601a      	str	r2, [r3, #0]
 80015e4:	605a      	str	r2, [r3, #4]
 80015e6:	609a      	str	r2, [r3, #8]
 80015e8:	60da      	str	r2, [r3, #12]
 80015ea:	611a      	str	r2, [r3, #16]
 80015ec:	615a      	str	r2, [r3, #20]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80015ee:	f003 fc5d 	bl	8004eac <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80015f2:	2000      	movs	r0, #0
 80015f4:	f7ff ffc6 	bl	8001584 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80015f8:	4b1f      	ldr	r3, [pc, #124]	@ (8001678 <SystemClock_Config+0xb0>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001600:	4a1d      	ldr	r2, [pc, #116]	@ (8001678 <SystemClock_Config+0xb0>)
 8001602:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001606:	6013      	str	r3, [r2, #0]
 8001608:	4b1b      	ldr	r3, [pc, #108]	@ (8001678 <SystemClock_Config+0xb0>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001610:	607b      	str	r3, [r7, #4]
 8001612:	687b      	ldr	r3, [r7, #4]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001614:	2324      	movs	r3, #36	@ 0x24
 8001616:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001618:	2381      	movs	r3, #129	@ 0x81
 800161a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800161c:	2301      	movs	r3, #1
 800161e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8001620:	2300      	movs	r3, #0
 8001622:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 8001624:	23b0      	movs	r3, #176	@ 0xb0
 8001626:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001628:	2300      	movs	r3, #0
 800162a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800162c:	f107 0320 	add.w	r3, r7, #32
 8001630:	4618      	mov	r0, r3
 8001632:	f003 ff87 	bl	8005544 <HAL_RCC_OscConfig>
 8001636:	4603      	mov	r3, r0
 8001638:	2b00      	cmp	r3, #0
 800163a:	d001      	beq.n	8001640 <SystemClock_Config+0x78>
  {
    Error_Handler();
 800163c:	f000 f81e 	bl	800167c <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 8001640:	234f      	movs	r3, #79	@ 0x4f
 8001642:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001644:	2300      	movs	r3, #0
 8001646:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001648:	2300      	movs	r3, #0
 800164a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800164c:	2300      	movs	r3, #0
 800164e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001650:	2300      	movs	r3, #0
 8001652:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 8001654:	2300      	movs	r3, #0
 8001656:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001658:	f107 0308 	add.w	r3, r7, #8
 800165c:	2102      	movs	r1, #2
 800165e:	4618      	mov	r0, r3
 8001660:	f004 fb0c 	bl	8005c7c <HAL_RCC_ClockConfig>
 8001664:	4603      	mov	r3, r0
 8001666:	2b00      	cmp	r3, #0
 8001668:	d001      	beq.n	800166e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800166a:	f000 f807 	bl	800167c <Error_Handler>
  }
}
 800166e:	bf00      	nop
 8001670:	3768      	adds	r7, #104	@ 0x68
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	58000400 	.word	0x58000400

0800167c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800167c:	b480      	push	{r7}
 800167e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001680:	b672      	cpsid	i
}
 8001682:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001684:	bf00      	nop
 8001686:	e7fd      	b.n	8001684 <Error_Handler+0x8>

08001688 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8001688:	b480      	push	{r7}
 800168a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 800168c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001690:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001694:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001698:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800169c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80016a0:	bf00      	nop
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bc80      	pop	{r7}
 80016a6:	4770      	bx	lr

080016a8 <LL_APB1_GRP1_EnableClock>:
{
 80016a8:	b480      	push	{r7}
 80016aa:	b085      	sub	sp, #20
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 80016b0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80016b4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80016b6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	4313      	orrs	r3, r2
 80016be:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80016c0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80016c4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	4013      	ands	r3, r2
 80016ca:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80016cc:	68fb      	ldr	r3, [r7, #12]
}
 80016ce:	bf00      	nop
 80016d0:	3714      	adds	r7, #20
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bc80      	pop	{r7}
 80016d6:	4770      	bx	lr

080016d8 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b08c      	sub	sp, #48	@ 0x30
 80016dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_AlarmTypeDef sAlarm = {0};
 80016de:	1d3b      	adds	r3, r7, #4
 80016e0:	222c      	movs	r2, #44	@ 0x2c
 80016e2:	2100      	movs	r1, #0
 80016e4:	4618      	mov	r0, r3
 80016e6:	f019 ff81 	bl	801b5ec <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80016ea:	4b22      	ldr	r3, [pc, #136]	@ (8001774 <MX_RTC_Init+0x9c>)
 80016ec:	4a22      	ldr	r2, [pc, #136]	@ (8001778 <MX_RTC_Init+0xa0>)
 80016ee:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_PREDIV_A;
 80016f0:	4b20      	ldr	r3, [pc, #128]	@ (8001774 <MX_RTC_Init+0x9c>)
 80016f2:	221f      	movs	r2, #31
 80016f4:	609a      	str	r2, [r3, #8]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80016f6:	4b1f      	ldr	r3, [pc, #124]	@ (8001774 <MX_RTC_Init+0x9c>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80016fc:	4b1d      	ldr	r3, [pc, #116]	@ (8001774 <MX_RTC_Init+0x9c>)
 80016fe:	2200      	movs	r2, #0
 8001700:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001702:	4b1c      	ldr	r3, [pc, #112]	@ (8001774 <MX_RTC_Init+0x9c>)
 8001704:	2200      	movs	r2, #0
 8001706:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001708:	4b1a      	ldr	r3, [pc, #104]	@ (8001774 <MX_RTC_Init+0x9c>)
 800170a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800170e:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8001710:	4b18      	ldr	r3, [pc, #96]	@ (8001774 <MX_RTC_Init+0x9c>)
 8001712:	2200      	movs	r2, #0
 8001714:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_ONLY;
 8001716:	4b17      	ldr	r3, [pc, #92]	@ (8001774 <MX_RTC_Init+0x9c>)
 8001718:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800171c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800171e:	4815      	ldr	r0, [pc, #84]	@ (8001774 <MX_RTC_Init+0x9c>)
 8001720:	f004 ff68 	bl	80065f4 <HAL_RTC_Init>
 8001724:	4603      	mov	r3, r0
 8001726:	2b00      	cmp	r3, #0
 8001728:	d001      	beq.n	800172e <MX_RTC_Init+0x56>
  {
    Error_Handler();
 800172a:	f7ff ffa7 	bl	800167c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  if (HAL_RTCEx_SetSSRU_IT(&hrtc) != HAL_OK)
 800172e:	4811      	ldr	r0, [pc, #68]	@ (8001774 <MX_RTC_Init+0x9c>)
 8001730:	f005 fa56 	bl	8006be0 <HAL_RTCEx_SetSSRU_IT>
 8001734:	4603      	mov	r3, r0
 8001736:	2b00      	cmp	r3, #0
 8001738:	d001      	beq.n	800173e <MX_RTC_Init+0x66>
  {
    Error_Handler();
 800173a:	f7ff ff9f 	bl	800167c <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 800173e:	2300      	movs	r3, #0
 8001740:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8001742:	2300      	movs	r3, #0
 8001744:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001746:	2300      	movs	r3, #0
 8001748:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 800174a:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800174e:	61fb      	str	r3, [r7, #28]
  sAlarm.Alarm = RTC_ALARM_A;
 8001750:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001754:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, 0) != HAL_OK)
 8001756:	1d3b      	adds	r3, r7, #4
 8001758:	2200      	movs	r2, #0
 800175a:	4619      	mov	r1, r3
 800175c:	4805      	ldr	r0, [pc, #20]	@ (8001774 <MX_RTC_Init+0x9c>)
 800175e:	f004 ffc3 	bl	80066e8 <HAL_RTC_SetAlarm_IT>
 8001762:	4603      	mov	r3, r0
 8001764:	2b00      	cmp	r3, #0
 8001766:	d001      	beq.n	800176c <MX_RTC_Init+0x94>
  {
    Error_Handler();
 8001768:	f7ff ff88 	bl	800167c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800176c:	bf00      	nop
 800176e:	3730      	adds	r7, #48	@ 0x30
 8001770:	46bd      	mov	sp, r7
 8001772:	bd80      	pop	{r7, pc}
 8001774:	200001d8 	.word	0x200001d8
 8001778:	40002800 	.word	0x40002800

0800177c <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b090      	sub	sp, #64	@ 0x40
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001784:	f107 0308 	add.w	r3, r7, #8
 8001788:	2238      	movs	r2, #56	@ 0x38
 800178a:	2100      	movs	r1, #0
 800178c:	4618      	mov	r0, r3
 800178e:	f019 ff2d 	bl	801b5ec <memset>
  if(rtcHandle->Instance==RTC)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	4a16      	ldr	r2, [pc, #88]	@ (80017f0 <HAL_RTC_MspInit+0x74>)
 8001798:	4293      	cmp	r3, r2
 800179a:	d125      	bne.n	80017e8 <HAL_RTC_MspInit+0x6c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800179c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80017a0:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80017a2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80017a6:	63fb      	str	r3, [r7, #60]	@ 0x3c

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80017a8:	f107 0308 	add.w	r3, r7, #8
 80017ac:	4618      	mov	r0, r3
 80017ae:	f004 fe07 	bl	80063c0 <HAL_RCCEx_PeriphCLKConfig>
 80017b2:	4603      	mov	r3, r0
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d001      	beq.n	80017bc <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 80017b8:	f7ff ff60 	bl	800167c <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80017bc:	f7ff ff64 	bl	8001688 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 80017c0:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 80017c4:	f7ff ff70 	bl	80016a8 <LL_APB1_GRP1_EnableClock>

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(TAMP_STAMP_LSECSS_SSRU_IRQn, 0, 0);
 80017c8:	2200      	movs	r2, #0
 80017ca:	2100      	movs	r1, #0
 80017cc:	2002      	movs	r0, #2
 80017ce:	f002 fa8c 	bl	8003cea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TAMP_STAMP_LSECSS_SSRU_IRQn);
 80017d2:	2002      	movs	r0, #2
 80017d4:	f002 faa3 	bl	8003d1e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 80017d8:	2200      	movs	r2, #0
 80017da:	2100      	movs	r1, #0
 80017dc:	202a      	movs	r0, #42	@ 0x2a
 80017de:	f002 fa84 	bl	8003cea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 80017e2:	202a      	movs	r0, #42	@ 0x2a
 80017e4:	f002 fa9b 	bl	8003d1e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80017e8:	bf00      	nop
 80017ea:	3740      	adds	r7, #64	@ 0x40
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bd80      	pop	{r7, pc}
 80017f0:	40002800 	.word	0x40002800

080017f4 <LL_PWR_ClearFlag_C1STOP_C1STB>:
  * @brief  Clear standby and stop flags for CPU1
  * @rmtoll EXTSCR       C1CSSF        LL_PWR_ClearFlag_C1STOP_C1STB
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_C1STOP_C1STB(void)
{
 80017f4:	b480      	push	{r7}
 80017f6:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->EXTSCR, PWR_EXTSCR_C1CSSF);
 80017f8:	4b03      	ldr	r3, [pc, #12]	@ (8001808 <LL_PWR_ClearFlag_C1STOP_C1STB+0x14>)
 80017fa:	2201      	movs	r2, #1
 80017fc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8001800:	bf00      	nop
 8001802:	46bd      	mov	sp, r7
 8001804:	bc80      	pop	{r7}
 8001806:	4770      	bx	lr
 8001808:	58000400 	.word	0x58000400

0800180c <PWR_EnterOffMode>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void PWR_EnterOffMode(void)
{
 800180c:	b480      	push	{r7}
 800180e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterOffMode_1 */

  /* USER CODE END EnterOffMode_1 */
}
 8001810:	bf00      	nop
 8001812:	46bd      	mov	sp, r7
 8001814:	bc80      	pop	{r7}
 8001816:	4770      	bx	lr

08001818 <PWR_ExitOffMode>:

void PWR_ExitOffMode(void)
{
 8001818:	b480      	push	{r7}
 800181a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitOffMode_1 */

  /* USER CODE END ExitOffMode_1 */
}
 800181c:	bf00      	nop
 800181e:	46bd      	mov	sp, r7
 8001820:	bc80      	pop	{r7}
 8001822:	4770      	bx	lr

08001824 <PWR_EnterStopMode>:

void PWR_EnterStopMode(void)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterStopMode_1 */

  /* USER CODE END EnterStopMode_1 */
  HAL_SuspendTick();
 8001828:	f001 f8bc 	bl	80029a4 <HAL_SuspendTick>
  /* Clear Status Flag before entering STOP/STANDBY Mode */
  LL_PWR_ClearFlag_C1STOP_C1STB();
 800182c:	f7ff ffe2 	bl	80017f4 <LL_PWR_ClearFlag_C1STOP_C1STB>

  /* USER CODE BEGIN EnterStopMode_2 */

  /* USER CODE END EnterStopMode_2 */
  HAL_PWREx_EnterSTOP2Mode(PWR_STOPENTRY_WFI);
 8001830:	2001      	movs	r0, #1
 8001832:	f003 fbcd 	bl	8004fd0 <HAL_PWREx_EnterSTOP2Mode>
  /* USER CODE BEGIN EnterStopMode_3 */

  /* USER CODE END EnterStopMode_3 */
}
 8001836:	bf00      	nop
 8001838:	bd80      	pop	{r7, pc}

0800183a <PWR_ExitStopMode>:

void PWR_ExitStopMode(void)
{
 800183a:	b580      	push	{r7, lr}
 800183c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitStopMode_1 */

  /* USER CODE END ExitStopMode_1 */
  /* Resume sysTick : work around for debugger problem in dual core */
  HAL_ResumeTick();
 800183e:	f001 f8bf 	bl	80029c0 <HAL_ResumeTick>
    ADC interface
    DAC interface USARTx, TIMx, i2Cx, SPIx
    SRAM ctrls, DMAx, DMAMux, AES, RNG, HSEM  */

  /* Resume not retained USARTx and DMA */
  vcom_Resume();
 8001842:	f000 ff3f 	bl	80026c4 <vcom_Resume>
  /* USER CODE BEGIN ExitStopMode_2 */

  /* USER CODE END ExitStopMode_2 */
}
 8001846:	bf00      	nop
 8001848:	bd80      	pop	{r7, pc}

0800184a <PWR_EnterSleepMode>:

void PWR_EnterSleepMode(void)
{
 800184a:	b580      	push	{r7, lr}
 800184c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterSleepMode_1 */

  /* USER CODE END EnterSleepMode_1 */
  /* Suspend sysTick */
  HAL_SuspendTick();
 800184e:	f001 f8a9 	bl	80029a4 <HAL_SuspendTick>
  /* USER CODE BEGIN EnterSleepMode_2 */

  /* USER CODE END EnterSleepMode_2 */
  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8001852:	2101      	movs	r1, #1
 8001854:	2000      	movs	r0, #0
 8001856:	f003 fb37 	bl	8004ec8 <HAL_PWR_EnterSLEEPMode>
  /* USER CODE BEGIN EnterSleepMode_3 */

  /* USER CODE END EnterSleepMode_3 */
}
 800185a:	bf00      	nop
 800185c:	bd80      	pop	{r7, pc}

0800185e <PWR_ExitSleepMode>:

void PWR_ExitSleepMode(void)
{
 800185e:	b580      	push	{r7, lr}
 8001860:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitSleepMode_1 */

  /* USER CODE END ExitSleepMode_1 */
  /* Resume sysTick */
  HAL_ResumeTick();
 8001862:	f001 f8ad 	bl	80029c0 <HAL_ResumeTick>

  /* USER CODE BEGIN ExitSleepMode_2 */

  /* USER CODE END ExitSleepMode_2 */
}
 8001866:	bf00      	nop
 8001868:	bd80      	pop	{r7, pc}

0800186a <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800186a:	b480      	push	{r7}
 800186c:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800186e:	bf00      	nop
 8001870:	46bd      	mov	sp, r7
 8001872:	bc80      	pop	{r7}
 8001874:	4770      	bx	lr

08001876 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001876:	b480      	push	{r7}
 8001878:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800187a:	bf00      	nop
 800187c:	e7fd      	b.n	800187a <NMI_Handler+0x4>

0800187e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800187e:	b480      	push	{r7}
 8001880:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001882:	bf00      	nop
 8001884:	e7fd      	b.n	8001882 <HardFault_Handler+0x4>

08001886 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001886:	b480      	push	{r7}
 8001888:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800188a:	bf00      	nop
 800188c:	e7fd      	b.n	800188a <MemManage_Handler+0x4>

0800188e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800188e:	b480      	push	{r7}
 8001890:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001892:	bf00      	nop
 8001894:	e7fd      	b.n	8001892 <BusFault_Handler+0x4>

08001896 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001896:	b480      	push	{r7}
 8001898:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800189a:	bf00      	nop
 800189c:	e7fd      	b.n	800189a <UsageFault_Handler+0x4>

0800189e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800189e:	b480      	push	{r7}
 80018a0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018a2:	bf00      	nop
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bc80      	pop	{r7}
 80018a8:	4770      	bx	lr

080018aa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018aa:	b480      	push	{r7}
 80018ac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018ae:	bf00      	nop
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bc80      	pop	{r7}
 80018b4:	4770      	bx	lr

080018b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018b6:	b480      	push	{r7}
 80018b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018ba:	bf00      	nop
 80018bc:	46bd      	mov	sp, r7
 80018be:	bc80      	pop	{r7}
 80018c0:	4770      	bx	lr

080018c2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018c2:	b480      	push	{r7}
 80018c4:	af00      	add	r7, sp, #0

  /* USER CODE END SysTick_IRQn 0 */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018c6:	bf00      	nop
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bc80      	pop	{r7}
 80018cc:	4770      	bx	lr
	...

080018d0 <TAMP_STAMP_LSECSS_SSRU_IRQHandler>:

/**
  * @brief This function handles RTC Tamper, RTC TimeStamp, LSECSS and RTC SSRU Interrupts.
  */
void TAMP_STAMP_LSECSS_SSRU_IRQHandler(void)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 0 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 0 */
  HAL_RTCEx_SSRUIRQHandler(&hrtc);
 80018d4:	4802      	ldr	r0, [pc, #8]	@ (80018e0 <TAMP_STAMP_LSECSS_SSRU_IRQHandler+0x10>)
 80018d6:	f005 f9bf 	bl	8006c58 <HAL_RTCEx_SSRUIRQHandler>
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 1 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 1 */
}
 80018da:	bf00      	nop
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	200001d8 	.word	0x200001d8

080018e4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 1 Interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80018e8:	4802      	ldr	r0, [pc, #8]	@ (80018f4 <DMA1_Channel1_IRQHandler+0x10>)
 80018ea:	f002 fcaf 	bl	800424c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80018ee:	bf00      	nop
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop
 80018f4:	200002b4 	.word	0x200002b4

080018f8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 Interrupt.
  */
void USART1_IRQHandler(void)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80018fc:	4802      	ldr	r0, [pc, #8]	@ (8001908 <USART1_IRQHandler+0x10>)
 80018fe:	f006 f803 	bl	8007908 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001902:	bf00      	nop
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	20000224 	.word	0x20000224

0800190c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI Lines [15:10] Interrupt.
  */
void EXTI15_10_IRQHandler(void)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUT1_Pin);
 8001910:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001914:	f003 fab2 	bl	8004e7c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001918:	bf00      	nop
 800191a:	bd80      	pop	{r7, pc}

0800191c <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC Alarms (A and B) Interrupt.
  */
void RTC_Alarm_IRQHandler(void)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8001920:	4802      	ldr	r0, [pc, #8]	@ (800192c <RTC_Alarm_IRQHandler+0x10>)
 8001922:	f005 f849 	bl	80069b8 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8001926:	bf00      	nop
 8001928:	bd80      	pop	{r7, pc}
 800192a:	bf00      	nop
 800192c:	200001d8 	.word	0x200001d8

08001930 <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */
  HAL_SUBGHZ_IRQHandler(&hsubghz);
 8001934:	4802      	ldr	r0, [pc, #8]	@ (8001940 <SUBGHZ_Radio_IRQHandler+0x10>)
 8001936:	f005 fcf7 	bl	8007328 <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 800193a:	bf00      	nop
 800193c:	bd80      	pop	{r7, pc}
 800193e:	bf00      	nop
 8001940:	20000210 	.word	0x20000210

08001944 <LL_APB3_GRP1_EnableClock>:
  * @param  Periphs This parameter can be a combination of the following values:
  *         @arg @ref LL_APB3_GRP1_PERIPH_SUBGHZSPI
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
 8001944:	b480      	push	{r7}
 8001946:	b085      	sub	sp, #20
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 800194c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001950:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8001952:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	4313      	orrs	r3, r2
 800195a:	664b      	str	r3, [r1, #100]	@ 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 800195c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001960:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	4013      	ands	r3, r2
 8001966:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001968:	68fb      	ldr	r3, [r7, #12]
}
 800196a:	bf00      	nop
 800196c:	3714      	adds	r7, #20
 800196e:	46bd      	mov	sp, r7
 8001970:	bc80      	pop	{r7}
 8001972:	4770      	bx	lr

08001974 <MX_SUBGHZ_Init>:

SUBGHZ_HandleTypeDef hsubghz;

/* SUBGHZ init function */
void MX_SUBGHZ_Init(void)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	af00      	add	r7, sp, #0
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */

  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_4;
 8001978:	4b06      	ldr	r3, [pc, #24]	@ (8001994 <MX_SUBGHZ_Init+0x20>)
 800197a:	2208      	movs	r2, #8
 800197c:	601a      	str	r2, [r3, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 800197e:	4805      	ldr	r0, [pc, #20]	@ (8001994 <MX_SUBGHZ_Init+0x20>)
 8001980:	f005 fa56 	bl	8006e30 <HAL_SUBGHZ_Init>
 8001984:	4603      	mov	r3, r0
 8001986:	2b00      	cmp	r3, #0
 8001988:	d001      	beq.n	800198e <MX_SUBGHZ_Init+0x1a>
  {
    Error_Handler();
 800198a:	f7ff fe77 	bl	800167c <Error_Handler>
  }
  /* USER CODE BEGIN SUBGHZ_Init 2 */

  /* USER CODE END SUBGHZ_Init 2 */

}
 800198e:	bf00      	nop
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	20000210 	.word	0x20000210

08001998 <HAL_SUBGHZ_MspInit>:

void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* subghzHandle)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b082      	sub	sp, #8
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN SUBGHZ_MspInit 0 */

  /* USER CODE END SUBGHZ_MspInit 0 */
    /* SUBGHZ clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();
 80019a0:	2001      	movs	r0, #1
 80019a2:	f7ff ffcf 	bl	8001944 <LL_APB3_GRP1_EnableClock>

    /* SUBGHZ interrupt Init */
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 0, 0);
 80019a6:	2200      	movs	r2, #0
 80019a8:	2100      	movs	r1, #0
 80019aa:	2032      	movs	r0, #50	@ 0x32
 80019ac:	f002 f99d 	bl	8003cea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 80019b0:	2032      	movs	r0, #50	@ 0x32
 80019b2:	f002 f9b4 	bl	8003d1e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */
}
 80019b6:	bf00      	nop
 80019b8:	3708      	adds	r7, #8
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}

080019be <LL_RCC_SetClkAfterWakeFromStop>:
{
 80019be:	b480      	push	{r7}
 80019c0:	b083      	sub	sp, #12
 80019c2:	af00      	add	r7, sp, #0
 80019c4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 80019c6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80019ca:	689b      	ldr	r3, [r3, #8]
 80019cc:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 80019d0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	4313      	orrs	r3, r2
 80019d8:	608b      	str	r3, [r1, #8]
}
 80019da:	bf00      	nop
 80019dc:	370c      	adds	r7, #12
 80019de:	46bd      	mov	sp, r7
 80019e0:	bc80      	pop	{r7}
 80019e2:	4770      	bx	lr

080019e4 <LL_FLASH_GetUDN>:
/**
  * @brief  Return the Unique Device Number
  * @retval Values between Min_Data=0x00000000 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 80019e4:	b480      	push	{r7}
 80019e6:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID64_BASE)));
 80019e8:	4b02      	ldr	r3, [pc, #8]	@ (80019f4 <LL_FLASH_GetUDN+0x10>)
 80019ea:	681b      	ldr	r3, [r3, #0]
}
 80019ec:	4618      	mov	r0, r3
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bc80      	pop	{r7}
 80019f2:	4770      	bx	lr
 80019f4:	1fff7580 	.word	0x1fff7580

080019f8 <LL_FLASH_GetDeviceID>:
  * @brief  Return the Device ID
  *         For STM32WLxxxx devices, the device ID is 0x15
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x15)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 80019f8:	b480      	push	{r7}
 80019fa:	af00      	add	r7, sp, #0
  return ((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 80019fc:	4b03      	ldr	r3, [pc, #12]	@ (8001a0c <LL_FLASH_GetDeviceID+0x14>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	b2db      	uxtb	r3, r3
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bc80      	pop	{r7}
 8001a08:	4770      	bx	lr
 8001a0a:	bf00      	nop
 8001a0c:	1fff7584 	.word	0x1fff7584

08001a10 <LL_FLASH_GetSTCompanyID>:
  * @brief  Return the ST Company ID
  * @note   For STM32WLxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 8001a10:	b480      	push	{r7}
 8001a12:	af00      	add	r7, sp, #0
  return (((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 8001a14:	4b03      	ldr	r3, [pc, #12]	@ (8001a24 <LL_FLASH_GetSTCompanyID+0x14>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	0a1b      	lsrs	r3, r3, #8
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bc80      	pop	{r7}
 8001a20:	4770      	bx	lr
 8001a22:	bf00      	nop
 8001a24:	1fff7584 	.word	0x1fff7584

08001a28 <SystemApp_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
void SystemApp_Init(void)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SystemApp_Init_1 */

  /* USER CODE END SystemApp_Init_1 */

  /* Ensure that MSI is wake-up system clock */
  __HAL_RCC_WAKEUPSTOP_CLK_CONFIG(RCC_STOP_WAKEUPCLOCK_MSI);
 8001a2c:	2000      	movs	r0, #0
 8001a2e:	f7ff ffc6 	bl	80019be <LL_RCC_SetClkAfterWakeFromStop>

  /*Initialize timer and RTC*/
  UTIL_TIMER_Init();
 8001a32:	f019 f8a5 	bl	801ab80 <UTIL_TIMER_Init>
  SYS_TimerInitialisedFlag = 1;
 8001a36:	4b10      	ldr	r3, [pc, #64]	@ (8001a78 <SystemApp_Init+0x50>)
 8001a38:	2201      	movs	r2, #1
 8001a3a:	701a      	strb	r2, [r3, #0]
  /* Initializes the SW probes pins and the monitor RF pins via Alternate Function */
  DBG_Init();
 8001a3c:	f000 f98c 	bl	8001d58 <DBG_Init>

  /*Initialize the terminal */
  UTIL_ADV_TRACE_Init();
 8001a40:	f019 fb2e 	bl	801b0a0 <UTIL_ADV_TRACE_Init>
  UTIL_ADV_TRACE_RegisterTimeStampFunction(TimestampNow);
 8001a44:	480d      	ldr	r0, [pc, #52]	@ (8001a7c <SystemApp_Init+0x54>)
 8001a46:	f019 fbd9 	bl	801b1fc <UTIL_ADV_TRACE_RegisterTimeStampFunction>

  /* #warning "should be removed when proper obl is done" */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8001a4a:	4b0d      	ldr	r3, [pc, #52]	@ (8001a80 <SystemApp_Init+0x58>)
 8001a4c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001a50:	611a      	str	r2, [r3, #16]

  /*Set verbose LEVEL*/
  UTIL_ADV_TRACE_SetVerboseLevel(VERBOSE_LEVEL);
 8001a52:	2002      	movs	r0, #2
 8001a54:	f019 fbe0 	bl	801b218 <UTIL_ADV_TRACE_SetVerboseLevel>

  /*Initialize the temperature and Battery measurement services */
  SYS_InitMeasurement();
 8001a58:	f7ff fabe 	bl	8000fd8 <SYS_InitMeasurement>

  /*Initialize the Sensors */
  EnvSensors_Init();
 8001a5c:	f000 fa02 	bl	8001e64 <EnvSensors_Init>

  /*Init low power manager*/
  UTIL_LPM_Init();
 8001a60:	f018 fa5c 	bl	8019f1c <UTIL_LPM_Init>
  /* Disable Stand-by mode */
  UTIL_LPM_SetOffMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 8001a64:	2101      	movs	r1, #1
 8001a66:	2001      	movs	r0, #1
 8001a68:	f018 fa98 	bl	8019f9c <UTIL_LPM_SetOffMode>

#if defined (LOW_POWER_DISABLE) && (LOW_POWER_DISABLE == 1)
  /* Disable Stop Mode */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 8001a6c:	2101      	movs	r1, #1
 8001a6e:	2001      	movs	r0, #1
 8001a70:	f018 fa64 	bl	8019f3c <UTIL_LPM_SetStopMode>
#endif /* LOW_POWER_DISABLE */

  /* USER CODE BEGIN SystemApp_Init_2 */

  /* USER CODE END SystemApp_Init_2 */
}
 8001a74:	bf00      	nop
 8001a76:	bd80      	pop	{r7, pc}
 8001a78:	2000021c 	.word	0x2000021c
 8001a7c:	08001c49 	.word	0x08001c49
 8001a80:	58004000 	.word	0x58004000

08001a84 <UTIL_SEQ_Idle>:

/**
  * @brief redefines __weak function in stm32_seq.c such to enter low power
  */
void UTIL_SEQ_Idle(void)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_SEQ_Idle_1 */

  /* USER CODE END UTIL_SEQ_Idle_1 */
  UTIL_LPM_EnterLowPower();
 8001a88:	f018 fab8 	bl	8019ffc <UTIL_LPM_EnterLowPower>
  /* USER CODE BEGIN UTIL_SEQ_Idle_2 */

  /* USER CODE END UTIL_SEQ_Idle_2 */
}
 8001a8c:	bf00      	nop
 8001a8e:	bd80      	pop	{r7, pc}

08001a90 <GetBatteryLevel>:

uint8_t GetBatteryLevel(void)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b082      	sub	sp, #8
 8001a94:	af00      	add	r7, sp, #0
  uint8_t batteryLevel = 0;
 8001a96:	2300      	movs	r3, #0
 8001a98:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN GetBatteryLevel_0 */

  /* USER CODE END GetBatteryLevel_0 */

  batteryLevelmV = (uint16_t) SYS_GetBatteryLevel();
 8001a9a:	f7ff faab 	bl	8000ff4 <SYS_GetBatteryLevel>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	80bb      	strh	r3, [r7, #4]

  /* Convert battery level from mV to linear scale: 1 (very low) to 254 (fully charged) */
  if (batteryLevelmV > VDD_BAT)
 8001aa2:	88bb      	ldrh	r3, [r7, #4]
 8001aa4:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8001aa8:	4293      	cmp	r3, r2
 8001aaa:	d902      	bls.n	8001ab2 <GetBatteryLevel+0x22>
  {
    batteryLevel = LORAWAN_MAX_BAT;
 8001aac:	23fe      	movs	r3, #254	@ 0xfe
 8001aae:	71fb      	strb	r3, [r7, #7]
 8001ab0:	e014      	b.n	8001adc <GetBatteryLevel+0x4c>
  }
  else if (batteryLevelmV < VDD_MIN)
 8001ab2:	88bb      	ldrh	r3, [r7, #4]
 8001ab4:	f5b3 6fe1 	cmp.w	r3, #1800	@ 0x708
 8001ab8:	d202      	bcs.n	8001ac0 <GetBatteryLevel+0x30>
  {
    batteryLevel = 0;
 8001aba:	2300      	movs	r3, #0
 8001abc:	71fb      	strb	r3, [r7, #7]
 8001abe:	e00d      	b.n	8001adc <GetBatteryLevel+0x4c>
  }
  else
  {
    batteryLevel = (((uint32_t)(batteryLevelmV - VDD_MIN) * LORAWAN_MAX_BAT) / (VDD_BAT - VDD_MIN));
 8001ac0:	88bb      	ldrh	r3, [r7, #4]
 8001ac2:	f5a3 63e1 	sub.w	r3, r3, #1800	@ 0x708
 8001ac6:	461a      	mov	r2, r3
 8001ac8:	4613      	mov	r3, r2
 8001aca:	01db      	lsls	r3, r3, #7
 8001acc:	1a9b      	subs	r3, r3, r2
 8001ace:	005b      	lsls	r3, r3, #1
 8001ad0:	461a      	mov	r2, r3
 8001ad2:	4b05      	ldr	r3, [pc, #20]	@ (8001ae8 <GetBatteryLevel+0x58>)
 8001ad4:	fba3 2302 	umull	r2, r3, r3, r2
 8001ad8:	09db      	lsrs	r3, r3, #7
 8001ada:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN GetBatteryLevel_2 */

  /* USER CODE END GetBatteryLevel_2 */

  return batteryLevel;  /* 1 (very low) to 254 (fully charged) */
 8001adc:	79fb      	ldrb	r3, [r7, #7]
}
 8001ade:	4618      	mov	r0, r3
 8001ae0:	3708      	adds	r7, #8
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}
 8001ae6:	bf00      	nop
 8001ae8:	1b4e81b5 	.word	0x1b4e81b5

08001aec <GetTemperatureLevel>:

int16_t GetTemperatureLevel(void)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b088      	sub	sp, #32
 8001af0:	af00      	add	r7, sp, #0
  int16_t temperatureLevel = 0;
 8001af2:	2300      	movs	r3, #0
 8001af4:	83fb      	strh	r3, [r7, #30]

  sensor_t sensor_data;

  EnvSensors_Read(&sensor_data);
 8001af6:	1d3b      	adds	r3, r7, #4
 8001af8:	4618      	mov	r0, r3
 8001afa:	f000 f989 	bl	8001e10 <EnvSensors_Read>
  temperatureLevel = (int16_t)(sensor_data.temperature);
 8001afe:	68bb      	ldr	r3, [r7, #8]
 8001b00:	4618      	mov	r0, r3
 8001b02:	f7ff f80b 	bl	8000b1c <__aeabi_f2iz>
 8001b06:	4603      	mov	r3, r0
 8001b08:	83fb      	strh	r3, [r7, #30]
  /* USER CODE BEGIN GetTemperatureLevel */

  /* USER CODE END GetTemperatureLevel */
  return temperatureLevel;
 8001b0a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
}
 8001b0e:	4618      	mov	r0, r3
 8001b10:	3720      	adds	r7, #32
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}

08001b16 <GetUniqueId>:

void GetUniqueId(uint8_t *id)
{
 8001b16:	b590      	push	{r4, r7, lr}
 8001b18:	b087      	sub	sp, #28
 8001b1a:	af00      	add	r7, sp, #0
 8001b1c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GetUniqueId_1 */

  /* USER CODE END GetUniqueId_1 */
  uint32_t val = 0;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	617b      	str	r3, [r7, #20]
  val = LL_FLASH_GetUDN();
 8001b22:	f7ff ff5f 	bl	80019e4 <LL_FLASH_GetUDN>
 8001b26:	6178      	str	r0, [r7, #20]
  if (val == 0xFFFFFFFF)  /* Normally this should not happen */
 8001b28:	697b      	ldr	r3, [r7, #20]
 8001b2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b2e:	d138      	bne.n	8001ba2 <GetUniqueId+0x8c>
  {
    uint32_t ID_1_3_val = HAL_GetUIDw0() + HAL_GetUIDw2();
 8001b30:	f000 ff54 	bl	80029dc <HAL_GetUIDw0>
 8001b34:	4604      	mov	r4, r0
 8001b36:	f000 ff65 	bl	8002a04 <HAL_GetUIDw2>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	4423      	add	r3, r4
 8001b3e:	613b      	str	r3, [r7, #16]
    uint32_t ID_2_val = HAL_GetUIDw1();
 8001b40:	f000 ff56 	bl	80029f0 <HAL_GetUIDw1>
 8001b44:	60f8      	str	r0, [r7, #12]

    id[7] = (ID_1_3_val) >> 24;
 8001b46:	693b      	ldr	r3, [r7, #16]
 8001b48:	0e1a      	lsrs	r2, r3, #24
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	3307      	adds	r3, #7
 8001b4e:	b2d2      	uxtb	r2, r2
 8001b50:	701a      	strb	r2, [r3, #0]
    id[6] = (ID_1_3_val) >> 16;
 8001b52:	693b      	ldr	r3, [r7, #16]
 8001b54:	0c1a      	lsrs	r2, r3, #16
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	3306      	adds	r3, #6
 8001b5a:	b2d2      	uxtb	r2, r2
 8001b5c:	701a      	strb	r2, [r3, #0]
    id[5] = (ID_1_3_val) >> 8;
 8001b5e:	693b      	ldr	r3, [r7, #16]
 8001b60:	0a1a      	lsrs	r2, r3, #8
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	3305      	adds	r3, #5
 8001b66:	b2d2      	uxtb	r2, r2
 8001b68:	701a      	strb	r2, [r3, #0]
    id[4] = (ID_1_3_val);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	3304      	adds	r3, #4
 8001b6e:	693a      	ldr	r2, [r7, #16]
 8001b70:	b2d2      	uxtb	r2, r2
 8001b72:	701a      	strb	r2, [r3, #0]
    id[3] = (ID_2_val) >> 24;
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	0e1a      	lsrs	r2, r3, #24
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	3303      	adds	r3, #3
 8001b7c:	b2d2      	uxtb	r2, r2
 8001b7e:	701a      	strb	r2, [r3, #0]
    id[2] = (ID_2_val) >> 16;
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	0c1a      	lsrs	r2, r3, #16
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	3302      	adds	r3, #2
 8001b88:	b2d2      	uxtb	r2, r2
 8001b8a:	701a      	strb	r2, [r3, #0]
    id[1] = (ID_2_val) >> 8;
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	0a1a      	lsrs	r2, r3, #8
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	3301      	adds	r3, #1
 8001b94:	b2d2      	uxtb	r2, r2
 8001b96:	701a      	strb	r2, [r3, #0]
    id[0] = (ID_2_val);
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	b2da      	uxtb	r2, r3
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	701a      	strb	r2, [r3, #0]
  }

  /* USER CODE BEGIN GetUniqueId_2 */

  /* USER CODE END GetUniqueId_2 */
}
 8001ba0:	e031      	b.n	8001c06 <GetUniqueId+0xf0>
    id[7] = val & 0xFF;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	3307      	adds	r3, #7
 8001ba6:	697a      	ldr	r2, [r7, #20]
 8001ba8:	b2d2      	uxtb	r2, r2
 8001baa:	701a      	strb	r2, [r3, #0]
    id[6] = (val >> 8) & 0xFF;
 8001bac:	697b      	ldr	r3, [r7, #20]
 8001bae:	0a1a      	lsrs	r2, r3, #8
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	3306      	adds	r3, #6
 8001bb4:	b2d2      	uxtb	r2, r2
 8001bb6:	701a      	strb	r2, [r3, #0]
    id[5] = (val >> 16) & 0xFF;
 8001bb8:	697b      	ldr	r3, [r7, #20]
 8001bba:	0c1a      	lsrs	r2, r3, #16
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	3305      	adds	r3, #5
 8001bc0:	b2d2      	uxtb	r2, r2
 8001bc2:	701a      	strb	r2, [r3, #0]
    id[4] = (val >> 24) & 0xFF;
 8001bc4:	697b      	ldr	r3, [r7, #20]
 8001bc6:	0e1a      	lsrs	r2, r3, #24
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	3304      	adds	r3, #4
 8001bcc:	b2d2      	uxtb	r2, r2
 8001bce:	701a      	strb	r2, [r3, #0]
    val = LL_FLASH_GetDeviceID();
 8001bd0:	f7ff ff12 	bl	80019f8 <LL_FLASH_GetDeviceID>
 8001bd4:	6178      	str	r0, [r7, #20]
    id[3] = val & 0xFF;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	3303      	adds	r3, #3
 8001bda:	697a      	ldr	r2, [r7, #20]
 8001bdc:	b2d2      	uxtb	r2, r2
 8001bde:	701a      	strb	r2, [r3, #0]
    val = LL_FLASH_GetSTCompanyID();
 8001be0:	f7ff ff16 	bl	8001a10 <LL_FLASH_GetSTCompanyID>
 8001be4:	6178      	str	r0, [r7, #20]
    id[2] = val & 0xFF;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	3302      	adds	r3, #2
 8001bea:	697a      	ldr	r2, [r7, #20]
 8001bec:	b2d2      	uxtb	r2, r2
 8001bee:	701a      	strb	r2, [r3, #0]
    id[1] = (val >> 8) & 0xFF;
 8001bf0:	697b      	ldr	r3, [r7, #20]
 8001bf2:	0a1a      	lsrs	r2, r3, #8
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	3301      	adds	r3, #1
 8001bf8:	b2d2      	uxtb	r2, r2
 8001bfa:	701a      	strb	r2, [r3, #0]
    id[0] = (val >> 16) & 0xFF;
 8001bfc:	697b      	ldr	r3, [r7, #20]
 8001bfe:	0c1b      	lsrs	r3, r3, #16
 8001c00:	b2da      	uxtb	r2, r3
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	701a      	strb	r2, [r3, #0]
}
 8001c06:	bf00      	nop
 8001c08:	371c      	adds	r7, #28
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd90      	pop	{r4, r7, pc}

08001c0e <GetDevAddr>:

uint32_t GetDevAddr(void)
{
 8001c0e:	b590      	push	{r4, r7, lr}
 8001c10:	b083      	sub	sp, #12
 8001c12:	af00      	add	r7, sp, #0
  uint32_t val = 0;
 8001c14:	2300      	movs	r3, #0
 8001c16:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN GetDevAddr_1 */

  /* USER CODE END GetDevAddr_1 */

  val = LL_FLASH_GetUDN();
 8001c18:	f7ff fee4 	bl	80019e4 <LL_FLASH_GetUDN>
 8001c1c:	6078      	str	r0, [r7, #4]
  if (val == 0xFFFFFFFF)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c24:	d10b      	bne.n	8001c3e <GetDevAddr+0x30>
  {
    val = ((HAL_GetUIDw0()) ^ (HAL_GetUIDw1()) ^ (HAL_GetUIDw2()));
 8001c26:	f000 fed9 	bl	80029dc <HAL_GetUIDw0>
 8001c2a:	4604      	mov	r4, r0
 8001c2c:	f000 fee0 	bl	80029f0 <HAL_GetUIDw1>
 8001c30:	4603      	mov	r3, r0
 8001c32:	405c      	eors	r4, r3
 8001c34:	f000 fee6 	bl	8002a04 <HAL_GetUIDw2>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	4063      	eors	r3, r4
 8001c3c:	607b      	str	r3, [r7, #4]
  }

  /* USER CODE BEGIN GetDevAddr_2 */

  /* USER CODE END GetDevAddr_2 */
  return val;
 8001c3e:	687b      	ldr	r3, [r7, #4]

}
 8001c40:	4618      	mov	r0, r3
 8001c42:	370c      	adds	r7, #12
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd90      	pop	{r4, r7, pc}

08001c48 <TimestampNow>:
/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/

static void TimestampNow(uint8_t *buff, uint16_t *size)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b086      	sub	sp, #24
 8001c4c:	af02      	add	r7, sp, #8
 8001c4e:	6078      	str	r0, [r7, #4]
 8001c50:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN TimestampNow_1 */

  /* USER CODE END TimestampNow_1 */
  SysTime_t curtime = SysTimeGet();
 8001c52:	f107 0308 	add.w	r3, r7, #8
 8001c56:	4618      	mov	r0, r3
 8001c58:	f018 fae0 	bl	801a21c <SysTimeGet>
  tiny_snprintf_like((char *)buff, MAX_TS_SIZE, "%ds%03d:", curtime.Seconds, curtime.SubSeconds);
 8001c5c:	68bb      	ldr	r3, [r7, #8]
 8001c5e:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001c62:	9200      	str	r2, [sp, #0]
 8001c64:	4a07      	ldr	r2, [pc, #28]	@ (8001c84 <TimestampNow+0x3c>)
 8001c66:	2110      	movs	r1, #16
 8001c68:	6878      	ldr	r0, [r7, #4]
 8001c6a:	f000 f81d 	bl	8001ca8 <tiny_snprintf_like>
  *size = strlen((char *)buff);
 8001c6e:	6878      	ldr	r0, [r7, #4]
 8001c70:	f7fe fa82 	bl	8000178 <strlen>
 8001c74:	4603      	mov	r3, r0
 8001c76:	b29a      	uxth	r2, r3
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN TimestampNow_2 */

  /* USER CODE END TimestampNow_2 */
}
 8001c7c:	bf00      	nop
 8001c7e:	3710      	adds	r7, #16
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bd80      	pop	{r7, pc}
 8001c84:	0801b760 	.word	0x0801b760

08001c88 <UTIL_ADV_TRACE_PreSendHook>:

/* Disable StopMode when traces need to be printed */
void UTIL_ADV_TRACE_PreSendHook(void)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_1 */

  /* USER CODE END UTIL_ADV_TRACE_PreSendHook_1 */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_DISABLE);
 8001c8c:	2101      	movs	r1, #1
 8001c8e:	2002      	movs	r0, #2
 8001c90:	f018 f954 	bl	8019f3c <UTIL_LPM_SetStopMode>
  /* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_2 */

  /* USER CODE END UTIL_ADV_TRACE_PreSendHook_2 */
}
 8001c94:	bf00      	nop
 8001c96:	bd80      	pop	{r7, pc}

08001c98 <UTIL_ADV_TRACE_PostSendHook>:
/* Re-enable StopMode when traces have been printed */
void UTIL_ADV_TRACE_PostSendHook(void)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_1 */

  /* USER CODE END UTIL_LPM_SetStopMode_1 */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_ENABLE);
 8001c9c:	2100      	movs	r1, #0
 8001c9e:	2002      	movs	r0, #2
 8001ca0:	f018 f94c 	bl	8019f3c <UTIL_LPM_SetStopMode>
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_2 */

  /* USER CODE END UTIL_LPM_SetStopMode_2 */
}
 8001ca4:	bf00      	nop
 8001ca6:	bd80      	pop	{r7, pc}

08001ca8 <tiny_snprintf_like>:

static void tiny_snprintf_like(char *buf, uint32_t maxsize, const char *strFormat, ...)
{
 8001ca8:	b40c      	push	{r2, r3}
 8001caa:	b580      	push	{r7, lr}
 8001cac:	b084      	sub	sp, #16
 8001cae:	af00      	add	r7, sp, #0
 8001cb0:	6078      	str	r0, [r7, #4]
 8001cb2:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN tiny_snprintf_like_1 */

  /* USER CODE END tiny_snprintf_like_1 */
  va_list vaArgs;
  va_start(vaArgs, strFormat);
 8001cb4:	f107 031c 	add.w	r3, r7, #28
 8001cb8:	60fb      	str	r3, [r7, #12]
  UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 8001cba:	6839      	ldr	r1, [r7, #0]
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	69ba      	ldr	r2, [r7, #24]
 8001cc0:	6878      	ldr	r0, [r7, #4]
 8001cc2:	f018 fc7d 	bl	801a5c0 <tiny_vsnprintf_like>
  va_end(vaArgs);
  /* USER CODE BEGIN tiny_snprintf_like_2 */

  /* USER CODE END tiny_snprintf_like_2 */
}
 8001cc6:	bf00      	nop
 8001cc8:	3710      	adds	r7, #16
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001cd0:	b002      	add	sp, #8
 8001cd2:	4770      	bx	lr

08001cd4 <HAL_InitTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	b083      	sub	sp, #12
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  /*Don't enable SysTick if TIMER_IF is based on other counters (e.g. RTC) */
  /* USER CODE BEGIN HAL_InitTick_1 */

  /* USER CODE END HAL_InitTick_1 */
  return HAL_OK;
 8001cdc:	2300      	movs	r3, #0
  /* USER CODE BEGIN HAL_InitTick_2 */

  /* USER CODE END HAL_InitTick_2 */
}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	370c      	adds	r7, #12
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bc80      	pop	{r7}
 8001ce6:	4770      	bx	lr

08001ce8 <HAL_GetTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
uint32_t HAL_GetTick(void)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b082      	sub	sp, #8
 8001cec:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	607b      	str	r3, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_GetTick_1 */

  /* USER CODE END HAL_GetTick_1 */
  if (SYS_TimerInitialisedFlag == 0)
 8001cf2:	4b06      	ldr	r3, [pc, #24]	@ (8001d0c <HAL_GetTick+0x24>)
 8001cf4:	781b      	ldrb	r3, [r3, #0]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d002      	beq.n	8001d00 <HAL_GetTick+0x18>

    /* USER CODE END HAL_GetTick_EarlyCall */
  }
  else
  {
    ret = TIMER_IF_GetTimerValue();
 8001cfa:	f000 f97f 	bl	8001ffc <TIMER_IF_GetTimerValue>
 8001cfe:	6078      	str	r0, [r7, #4]
  }
  /* USER CODE BEGIN HAL_GetTick_2 */

  /* USER CODE END HAL_GetTick_2 */
  return ret;
 8001d00:	687b      	ldr	r3, [r7, #4]
}
 8001d02:	4618      	mov	r0, r3
 8001d04:	3708      	adds	r7, #8
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}
 8001d0a:	bf00      	nop
 8001d0c:	2000021c 	.word	0x2000021c

08001d10 <HAL_Delay>:

/**
  * @note This function overwrites the __weak one from HAL
  */
void HAL_Delay(__IO uint32_t Delay)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b082      	sub	sp, #8
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_Delay_1 */

  /* USER CODE END HAL_Delay_1 */
  TIMER_IF_DelayMs(Delay);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	f000 f9f5 	bl	800210a <TIMER_IF_DelayMs>
  /* USER CODE BEGIN HAL_Delay_2 */

  /* USER CODE END HAL_Delay_2 */
}
 8001d20:	bf00      	nop
 8001d22:	3708      	adds	r7, #8
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bd80      	pop	{r7, pc}

08001d28 <LL_AHB2_GRP1_EnableClock>:
{
 8001d28:	b480      	push	{r7}
 8001d2a:	b085      	sub	sp, #20
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001d30:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001d34:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001d36:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	4313      	orrs	r3, r2
 8001d3e:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001d40:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001d44:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	4013      	ands	r3, r2
 8001d4a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001d4c:	68fb      	ldr	r3, [r7, #12]
}
 8001d4e:	bf00      	nop
 8001d50:	3714      	adds	r7, #20
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bc80      	pop	{r7}
 8001d56:	4770      	bx	lr

08001d58 <DBG_Init>:

/**
  * @brief Initializes the SW probes pins and the monitor RF pins via Alternate Function
  */
void DBG_Init(void)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b086      	sub	sp, #24
 8001d5c:	af00      	add	r7, sp, #0

  /* USER CODE END DBG_Init_1 */

  /* SW probes */
#if defined (DEBUGGER_ENABLED) && ( DEBUGGER_ENABLED == 0 )
  HAL_DBGMCU_DisableDBGSleepMode();
 8001d5e:	f000 fe5b 	bl	8002a18 <HAL_DBGMCU_DisableDBGSleepMode>
  HAL_DBGMCU_DisableDBGStopMode();
 8001d62:	f000 fe5f 	bl	8002a24 <HAL_DBGMCU_DisableDBGStopMode>
  HAL_DBGMCU_DisableDBGStandbyMode();
 8001d66:	f000 fe63 	bl	8002a30 <HAL_DBGMCU_DisableDBGStandbyMode>
  HAL_DBGMCU_EnableDBGStandbyMode();
#elif !defined (DEBUGGER_ENABLED)
#error "DEBUGGER_ENABLED not defined or out of range <0,1>"
#endif /* DEBUGGER_OFF */

  GPIO_InitTypeDef  GPIO_InitStruct = {0};
 8001d6a:	1d3b      	adds	r3, r7, #4
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	601a      	str	r2, [r3, #0]
 8001d70:	605a      	str	r2, [r3, #4]
 8001d72:	609a      	str	r2, [r3, #8]
 8001d74:	60da      	str	r2, [r3, #12]
 8001d76:	611a      	str	r2, [r3, #16]

  /* Configure the GPIO pin */
  GPIO_InitStruct.Mode   = GPIO_MODE_OUTPUT_PP;
 8001d78:	2301      	movs	r3, #1
 8001d7a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull   = GPIO_NOPULL;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed  = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d80:	2303      	movs	r3, #3
 8001d82:	613b      	str	r3, [r7, #16]

  /* Enable the GPIO Clock */
  PROBE_LINE1_CLK_ENABLE();
 8001d84:	2001      	movs	r0, #1
 8001d86:	f7ff ffcf 	bl	8001d28 <LL_AHB2_GRP1_EnableClock>
  PROBE_LINE2_CLK_ENABLE();
 8001d8a:	2002      	movs	r0, #2
 8001d8c:	f7ff ffcc 	bl	8001d28 <LL_AHB2_GRP1_EnableClock>
  PROBE_LINE3_CLK_ENABLE();
 8001d90:	2002      	movs	r0, #2
 8001d92:	f7ff ffc9 	bl	8001d28 <LL_AHB2_GRP1_EnableClock>
  PROBE_LINE4_CLK_ENABLE();
 8001d96:	2002      	movs	r0, #2
 8001d98:	f7ff ffc6 	bl	8001d28 <LL_AHB2_GRP1_EnableClock>

  GPIO_InitStruct.Pin    = PROBE_LINE1_PIN;
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(PROBE_LINE1_PORT, &GPIO_InitStruct);
 8001da0:	1d3b      	adds	r3, r7, #4
 8001da2:	4619      	mov	r1, r3
 8001da4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001da8:	f002 fe22 	bl	80049f0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin    = PROBE_LINE2_PIN;
 8001dac:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001db0:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(PROBE_LINE2_PORT, &GPIO_InitStruct);
 8001db2:	1d3b      	adds	r3, r7, #4
 8001db4:	4619      	mov	r1, r3
 8001db6:	4815      	ldr	r0, [pc, #84]	@ (8001e0c <DBG_Init+0xb4>)
 8001db8:	f002 fe1a 	bl	80049f0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin    = PROBE_LINE3_PIN;
 8001dbc:	2308      	movs	r3, #8
 8001dbe:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(PROBE_LINE3_PORT, &GPIO_InitStruct);
 8001dc0:	1d3b      	adds	r3, r7, #4
 8001dc2:	4619      	mov	r1, r3
 8001dc4:	4811      	ldr	r0, [pc, #68]	@ (8001e0c <DBG_Init+0xb4>)
 8001dc6:	f002 fe13 	bl	80049f0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin    = PROBE_LINE4_PIN;
 8001dca:	2310      	movs	r3, #16
 8001dcc:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(PROBE_LINE4_PORT, &GPIO_InitStruct);
 8001dce:	1d3b      	adds	r3, r7, #4
 8001dd0:	4619      	mov	r1, r3
 8001dd2:	480e      	ldr	r0, [pc, #56]	@ (8001e0c <DBG_Init+0xb4>)
 8001dd4:	f002 fe0c 	bl	80049f0 <HAL_GPIO_Init>

  /* Reset probe Pins */
  HAL_GPIO_WritePin(PROBE_LINE1_PORT, PROBE_LINE1_PIN, GPIO_PIN_RESET);
 8001dd8:	2200      	movs	r2, #0
 8001dda:	2101      	movs	r1, #1
 8001ddc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001de0:	f003 f834 	bl	8004e4c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PROBE_LINE2_PORT, PROBE_LINE2_PIN, GPIO_PIN_RESET);
 8001de4:	2200      	movs	r2, #0
 8001de6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001dea:	4808      	ldr	r0, [pc, #32]	@ (8001e0c <DBG_Init+0xb4>)
 8001dec:	f003 f82e 	bl	8004e4c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PROBE_LINE3_PORT, PROBE_LINE3_PIN, GPIO_PIN_RESET);
 8001df0:	2200      	movs	r2, #0
 8001df2:	2108      	movs	r1, #8
 8001df4:	4805      	ldr	r0, [pc, #20]	@ (8001e0c <DBG_Init+0xb4>)
 8001df6:	f003 f829 	bl	8004e4c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PROBE_LINE4_PORT, PROBE_LINE4_PIN, GPIO_PIN_RESET);
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	2110      	movs	r1, #16
 8001dfe:	4803      	ldr	r0, [pc, #12]	@ (8001e0c <DBG_Init+0xb4>)
 8001e00:	f003 f824 	bl	8004e4c <HAL_GPIO_WritePin>
#endif /* DEBUG_RF_BUSY_ENABLED */

  /* USER CODE BEGIN DBG_Init_3 */

  /* USER CODE END DBG_Init_3 */
}
 8001e04:	bf00      	nop
 8001e06:	3718      	adds	r7, #24
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bd80      	pop	{r7, pc}
 8001e0c:	48000400 	.word	0x48000400

08001e10 <EnvSensors_Read>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t EnvSensors_Read(sensor_t *sensor_data)
{
 8001e10:	b480      	push	{r7}
 8001e12:	b087      	sub	sp, #28
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN EnvSensors_Read */
  float HUMIDITY_Value = HUMIDITY_DEFAULT_VAL;
 8001e18:	4b0d      	ldr	r3, [pc, #52]	@ (8001e50 <EnvSensors_Read+0x40>)
 8001e1a:	617b      	str	r3, [r7, #20]
  float TEMPERATURE_Value = TEMPERATURE_DEFAULT_VAL;
 8001e1c:	4b0d      	ldr	r3, [pc, #52]	@ (8001e54 <EnvSensors_Read+0x44>)
 8001e1e:	613b      	str	r3, [r7, #16]
  float PRESSURE_Value = PRESSURE_DEFAULT_VAL;
 8001e20:	4b0d      	ldr	r3, [pc, #52]	@ (8001e58 <EnvSensors_Read+0x48>)
 8001e22:	60fb      	str	r3, [r7, #12]
#endif /* USE_IKS01A3_ENV_SENSOR_LPS22HH_0 */
#elif !defined (SENSOR_ENABLED)
#error SENSOR_ENABLED not defined
#endif  /* SENSOR_ENABLED */

  sensor_data->humidity    = HUMIDITY_Value;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	697a      	ldr	r2, [r7, #20]
 8001e28:	609a      	str	r2, [r3, #8]
  sensor_data->temperature = TEMPERATURE_Value;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	693a      	ldr	r2, [r7, #16]
 8001e2e:	605a      	str	r2, [r3, #4]
  sensor_data->pressure    = PRESSURE_Value;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	68fa      	ldr	r2, [r7, #12]
 8001e34:	601a      	str	r2, [r3, #0]

  sensor_data->latitude  = (int32_t)((STSOP_LATTITUDE  * MAX_GPS_POS) / 90);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	4a08      	ldr	r2, [pc, #32]	@ (8001e5c <EnvSensors_Read+0x4c>)
 8001e3a:	60da      	str	r2, [r3, #12]
  sensor_data->longitude = (int32_t)((STSOP_LONGITUDE  * MAX_GPS_POS) / 180);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	4a08      	ldr	r2, [pc, #32]	@ (8001e60 <EnvSensors_Read+0x50>)
 8001e40:	611a      	str	r2, [r3, #16]

  return 0;
 8001e42:	2300      	movs	r3, #0
  /* USER CODE END EnvSensors_Read */
}
 8001e44:	4618      	mov	r0, r3
 8001e46:	371c      	adds	r7, #28
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bc80      	pop	{r7}
 8001e4c:	4770      	bx	lr
 8001e4e:	bf00      	nop
 8001e50:	42480000 	.word	0x42480000
 8001e54:	41900000 	.word	0x41900000
 8001e58:	447a0000 	.word	0x447a0000
 8001e5c:	003e090d 	.word	0x003e090d
 8001e60:	000503ab 	.word	0x000503ab

08001e64 <EnvSensors_Init>:

int32_t EnvSensors_Init(void)
{
 8001e64:	b480      	push	{r7}
 8001e66:	b083      	sub	sp, #12
 8001e68:	af00      	add	r7, sp, #0
#if defined( USE_IKS01A2_ENV_SENSOR_HTS221_0 ) || defined( USE_IKS01A2_ENV_SENSOR_LPS22HB_0 ) || \
    defined( USE_IKS01A3_ENV_SENSOR_HTS221_0 ) || defined( USE_IKS01A3_ENV_SENSOR_LPS22HH_0 ) || \
    defined( USE_BSP_DRIVER )
  int32_t ret = BSP_ERROR_NONE;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	607b      	str	r3, [r7, #4]
#endif /* USE_IKS01A3_ENV_SENSOR_LPS22HH_0 */

#elif !defined (SENSOR_ENABLED)
#error SENSOR_ENABLED not defined
#endif /* SENSOR_ENABLED  */
  return 0;
 8001e6e:	2300      	movs	r3, #0
  /* USER CODE END EnvSensors_Init */
  return ret;
}
 8001e70:	4618      	mov	r0, r3
 8001e72:	370c      	adds	r7, #12
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bc80      	pop	{r7}
 8001e78:	4770      	bx	lr

08001e7a <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e7a:	b480      	push	{r7}
 8001e7c:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8001e7e:	bf00      	nop
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bc80      	pop	{r7}
 8001e84:	4770      	bx	lr

08001e86 <LL_RTC_TIME_GetSubSecond>:
  * @param  RTCx RTC Instance
  * @retval If binary mode is none, Value between Min_Data=0x0 and Max_Data=0x7FFF
  *         else Value between Min_Data=0x0 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_RTC_TIME_GetSubSecond(RTC_TypeDef *RTCx)
{
 8001e86:	b480      	push	{r7}
 8001e88:	b083      	sub	sp, #12
 8001e8a:	af00      	add	r7, sp, #0
 8001e8c:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RTCx->SSR, RTC_SSR_SS));
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	689b      	ldr	r3, [r3, #8]
}
 8001e92:	4618      	mov	r0, r3
 8001e94:	370c      	adds	r7, #12
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bc80      	pop	{r7}
 8001e9a:	4770      	bx	lr

08001e9c <TIMER_IF_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
UTIL_TIMER_Status_t TIMER_IF_Init(void)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b082      	sub	sp, #8
 8001ea0:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_Init */

  /* USER CODE END TIMER_IF_Init */
  if (RTC_Initialized == false)
 8001ea6:	4b14      	ldr	r3, [pc, #80]	@ (8001ef8 <TIMER_IF_Init+0x5c>)
 8001ea8:	781b      	ldrb	r3, [r3, #0]
 8001eaa:	f083 0301 	eor.w	r3, r3, #1
 8001eae:	b2db      	uxtb	r3, r3
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d01b      	beq.n	8001eec <TIMER_IF_Init+0x50>
  {
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8001eb4:	4b11      	ldr	r3, [pc, #68]	@ (8001efc <TIMER_IF_Init+0x60>)
 8001eb6:	f04f 32ff 	mov.w	r2, #4294967295
 8001eba:	631a      	str	r2, [r3, #48]	@ 0x30
    /*Init RTC*/
    MX_RTC_Init();
 8001ebc:	f7ff fc0c 	bl	80016d8 <MX_RTC_Init>
    /*Stop Timer */
    TIMER_IF_StopTimer();
 8001ec0:	f000 f856 	bl	8001f70 <TIMER_IF_StopTimer>
    /** DeActivate the Alarm A enabled by STM32CubeMX during MX_RTC_Init() */
    HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8001ec4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001ec8:	480c      	ldr	r0, [pc, #48]	@ (8001efc <TIMER_IF_Init+0x60>)
 8001eca:	f004 fd19 	bl	8006900 <HAL_RTC_DeactivateAlarm>
    /*overload RTC feature enable*/
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8001ece:	4b0b      	ldr	r3, [pc, #44]	@ (8001efc <TIMER_IF_Init+0x60>)
 8001ed0:	f04f 32ff 	mov.w	r2, #4294967295
 8001ed4:	631a      	str	r2, [r3, #48]	@ 0x30

    /*Enable Direct Read of the calendar registers (not through Shadow) */
    HAL_RTCEx_EnableBypassShadow(&hrtc);
 8001ed6:	4809      	ldr	r0, [pc, #36]	@ (8001efc <TIMER_IF_Init+0x60>)
 8001ed8:	f004 fe50 	bl	8006b7c <HAL_RTCEx_EnableBypassShadow>
    /*Initialize MSB ticks*/
    TIMER_IF_BkUp_Write_MSBticks(0);
 8001edc:	2000      	movs	r0, #0
 8001ede:	f000 f9d3 	bl	8002288 <TIMER_IF_BkUp_Write_MSBticks>

    TIMER_IF_SetTimerContext();
 8001ee2:	f000 f85f 	bl	8001fa4 <TIMER_IF_SetTimerContext>

    /* Register a task to associate to UTIL_TIMER_Irq() interrupt */
    UTIL_TIMER_IRQ_MAP_INIT();

    RTC_Initialized = true;
 8001ee6:	4b04      	ldr	r3, [pc, #16]	@ (8001ef8 <TIMER_IF_Init+0x5c>)
 8001ee8:	2201      	movs	r2, #1
 8001eea:	701a      	strb	r2, [r3, #0]
  }

  /* USER CODE BEGIN TIMER_IF_Init_Last */

  /* USER CODE END TIMER_IF_Init_Last */
  return ret;
 8001eec:	79fb      	ldrb	r3, [r7, #7]
}
 8001eee:	4618      	mov	r0, r3
 8001ef0:	3708      	adds	r7, #8
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}
 8001ef6:	bf00      	nop
 8001ef8:	2000021d 	.word	0x2000021d
 8001efc:	200001d8 	.word	0x200001d8

08001f00 <TIMER_IF_StartTimer>:

UTIL_TIMER_Status_t TIMER_IF_StartTimer(uint32_t timeout)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b08e      	sub	sp, #56	@ 0x38
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  /* USER CODE BEGIN TIMER_IF_StartTimer */

  /* USER CODE END TIMER_IF_StartTimer */
  RTC_AlarmTypeDef sAlarm = {0};
 8001f0e:	f107 0308 	add.w	r3, r7, #8
 8001f12:	222c      	movs	r2, #44	@ 0x2c
 8001f14:	2100      	movs	r1, #0
 8001f16:	4618      	mov	r0, r3
 8001f18:	f019 fb68 	bl	801b5ec <memset>
  /*Stop timer if one is already started*/
  TIMER_IF_StopTimer();
 8001f1c:	f000 f828 	bl	8001f70 <TIMER_IF_StopTimer>
  timeout += RtcTimerContext;
 8001f20:	4b11      	ldr	r3, [pc, #68]	@ (8001f68 <TIMER_IF_StartTimer+0x68>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	687a      	ldr	r2, [r7, #4]
 8001f26:	4413      	add	r3, r2
 8001f28:	607b      	str	r3, [r7, #4]

  TIMER_IF_DBG_PRINTF("Start timer: time=%d, alarm=%d\n\r",  GetTimerTicks(), timeout);
  /* starts timer*/
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	627b      	str	r3, [r7, #36]	@ 0x24
  sAlarm.AlarmTime.SubSeconds = UINT32_MAX - timeout;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	43db      	mvns	r3, r3
 8001f32:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001f34:	2300      	movs	r3, #0
 8001f36:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 8001f38:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001f3c:	623b      	str	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8001f3e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001f42:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001f44:	f107 0308 	add.w	r3, r7, #8
 8001f48:	2201      	movs	r2, #1
 8001f4a:	4619      	mov	r1, r3
 8001f4c:	4807      	ldr	r0, [pc, #28]	@ (8001f6c <TIMER_IF_StartTimer+0x6c>)
 8001f4e:	f004 fbcb 	bl	80066e8 <HAL_RTC_SetAlarm_IT>
 8001f52:	4603      	mov	r3, r0
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d001      	beq.n	8001f5c <TIMER_IF_StartTimer+0x5c>
  {
    Error_Handler();
 8001f58:	f7ff fb90 	bl	800167c <Error_Handler>
  }
  /* USER CODE BEGIN TIMER_IF_StartTimer_Last */

  /* USER CODE END TIMER_IF_StartTimer_Last */
  return ret;
 8001f5c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}
 8001f60:	4618      	mov	r0, r3
 8001f62:	3738      	adds	r7, #56	@ 0x38
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bd80      	pop	{r7, pc}
 8001f68:	20000220 	.word	0x20000220
 8001f6c:	200001d8 	.word	0x200001d8

08001f70 <TIMER_IF_StopTimer>:

UTIL_TIMER_Status_t TIMER_IF_StopTimer(void)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b082      	sub	sp, #8
 8001f74:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8001f76:	2300      	movs	r3, #0
 8001f78:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_StopTimer */

  /* USER CODE END TIMER_IF_StopTimer */
  /* Clear RTC Alarm Flag */
  __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 8001f7a:	4b08      	ldr	r3, [pc, #32]	@ (8001f9c <TIMER_IF_StopTimer+0x2c>)
 8001f7c:	2201      	movs	r2, #1
 8001f7e:	65da      	str	r2, [r3, #92]	@ 0x5c
  /* Disable the Alarm A interrupt */
  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8001f80:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001f84:	4806      	ldr	r0, [pc, #24]	@ (8001fa0 <TIMER_IF_StopTimer+0x30>)
 8001f86:	f004 fcbb 	bl	8006900 <HAL_RTC_DeactivateAlarm>
  /*overload RTC feature enable*/
  hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8001f8a:	4b05      	ldr	r3, [pc, #20]	@ (8001fa0 <TIMER_IF_StopTimer+0x30>)
 8001f8c:	f04f 32ff 	mov.w	r2, #4294967295
 8001f90:	631a      	str	r2, [r3, #48]	@ 0x30
  /* USER CODE BEGIN TIMER_IF_StopTimer_Last */

  /* USER CODE END TIMER_IF_StopTimer_Last */
  return ret;
 8001f92:	79fb      	ldrb	r3, [r7, #7]
}
 8001f94:	4618      	mov	r0, r3
 8001f96:	3708      	adds	r7, #8
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bd80      	pop	{r7, pc}
 8001f9c:	40002800 	.word	0x40002800
 8001fa0:	200001d8 	.word	0x200001d8

08001fa4 <TIMER_IF_SetTimerContext>:

uint32_t TIMER_IF_SetTimerContext(void)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	af00      	add	r7, sp, #0
  /*store time context*/
  RtcTimerContext = GetTimerTicks();
 8001fa8:	f000 f98e 	bl	80022c8 <GetTimerTicks>
 8001fac:	4603      	mov	r3, r0
 8001fae:	4a03      	ldr	r2, [pc, #12]	@ (8001fbc <TIMER_IF_SetTimerContext+0x18>)
 8001fb0:	6013      	str	r3, [r2, #0]

  /* USER CODE END TIMER_IF_SetTimerContext */

  TIMER_IF_DBG_PRINTF("TIMER_IF_SetTimerContext=%d\n\r", RtcTimerContext);
  /*return time context*/
  return RtcTimerContext;
 8001fb2:	4b02      	ldr	r3, [pc, #8]	@ (8001fbc <TIMER_IF_SetTimerContext+0x18>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
}
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	bd80      	pop	{r7, pc}
 8001fba:	bf00      	nop
 8001fbc:	20000220 	.word	0x20000220

08001fc0 <TIMER_IF_GetTimerContext>:

uint32_t TIMER_IF_GetTimerContext(void)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	af00      	add	r7, sp, #0

  /* USER CODE END TIMER_IF_GetTimerContext */

  TIMER_IF_DBG_PRINTF("TIMER_IF_GetTimerContext=%d\n\r", RtcTimerContext);
  /*return time context*/
  return RtcTimerContext;
 8001fc4:	4b02      	ldr	r3, [pc, #8]	@ (8001fd0 <TIMER_IF_GetTimerContext+0x10>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
}
 8001fc8:	4618      	mov	r0, r3
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bc80      	pop	{r7}
 8001fce:	4770      	bx	lr
 8001fd0:	20000220 	.word	0x20000220

08001fd4 <TIMER_IF_GetTimerElapsedTime>:

uint32_t TIMER_IF_GetTimerElapsedTime(void)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b082      	sub	sp, #8
 8001fd8:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime */
  ret = ((uint32_t)(GetTimerTicks() - RtcTimerContext));
 8001fde:	f000 f973 	bl	80022c8 <GetTimerTicks>
 8001fe2:	4602      	mov	r2, r0
 8001fe4:	4b04      	ldr	r3, [pc, #16]	@ (8001ff8 <TIMER_IF_GetTimerElapsedTime+0x24>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	1ad3      	subs	r3, r2, r3
 8001fea:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime_Last */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime_Last */
  return ret;
 8001fec:	687b      	ldr	r3, [r7, #4]
}
 8001fee:	4618      	mov	r0, r3
 8001ff0:	3708      	adds	r7, #8
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	bf00      	nop
 8001ff8:	20000220 	.word	0x20000220

08001ffc <TIMER_IF_GetTimerValue>:

uint32_t TIMER_IF_GetTimerValue(void)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b082      	sub	sp, #8
 8002000:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8002002:	2300      	movs	r3, #0
 8002004:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerValue */

  /* USER CODE END TIMER_IF_GetTimerValue */
  if (RTC_Initialized == true)
 8002006:	4b06      	ldr	r3, [pc, #24]	@ (8002020 <TIMER_IF_GetTimerValue+0x24>)
 8002008:	781b      	ldrb	r3, [r3, #0]
 800200a:	2b00      	cmp	r3, #0
 800200c:	d002      	beq.n	8002014 <TIMER_IF_GetTimerValue+0x18>
  {
    ret = GetTimerTicks();
 800200e:	f000 f95b 	bl	80022c8 <GetTimerTicks>
 8002012:	6078      	str	r0, [r7, #4]
  }
  /* USER CODE BEGIN TIMER_IF_GetTimerValue_Last */

  /* USER CODE END TIMER_IF_GetTimerValue_Last */
  return ret;
 8002014:	687b      	ldr	r3, [r7, #4]
}
 8002016:	4618      	mov	r0, r3
 8002018:	3708      	adds	r7, #8
 800201a:	46bd      	mov	sp, r7
 800201c:	bd80      	pop	{r7, pc}
 800201e:	bf00      	nop
 8002020:	2000021d 	.word	0x2000021d

08002024 <TIMER_IF_GetMinimumTimeout>:

uint32_t TIMER_IF_GetMinimumTimeout(void)
{
 8002024:	b480      	push	{r7}
 8002026:	b083      	sub	sp, #12
 8002028:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 800202a:	2300      	movs	r3, #0
 800202c:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout */

  /* USER CODE END TIMER_IF_GetMinimumTimeout */
  ret = (MIN_ALARM_DELAY);
 800202e:	2303      	movs	r3, #3
 8002030:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout_Last */

  /* USER CODE END TIMER_IF_GetMinimumTimeout_Last */
  return ret;
 8002032:	687b      	ldr	r3, [r7, #4]
}
 8002034:	4618      	mov	r0, r3
 8002036:	370c      	adds	r7, #12
 8002038:	46bd      	mov	sp, r7
 800203a:	bc80      	pop	{r7}
 800203c:	4770      	bx	lr

0800203e <TIMER_IF_Convert_ms2Tick>:

uint32_t TIMER_IF_Convert_ms2Tick(uint32_t timeMilliSec)
{
 800203e:	b5b0      	push	{r4, r5, r7, lr}
 8002040:	b084      	sub	sp, #16
 8002042:	af00      	add	r7, sp, #0
 8002044:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 8002046:	2100      	movs	r1, #0
 8002048:	60f9      	str	r1, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick */

  /* USER CODE END TIMER_IF_Convert_ms2Tick */
  ret = ((uint32_t)((((uint64_t) timeMilliSec) << RTC_N_PREDIV_S) / 1000));
 800204a:	6879      	ldr	r1, [r7, #4]
 800204c:	2000      	movs	r0, #0
 800204e:	460a      	mov	r2, r1
 8002050:	4603      	mov	r3, r0
 8002052:	0d95      	lsrs	r5, r2, #22
 8002054:	0294      	lsls	r4, r2, #10
 8002056:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800205a:	f04f 0300 	mov.w	r3, #0
 800205e:	4620      	mov	r0, r4
 8002060:	4629      	mov	r1, r5
 8002062:	f7fe fda1 	bl	8000ba8 <__aeabi_uldivmod>
 8002066:	4602      	mov	r2, r0
 8002068:	460b      	mov	r3, r1
 800206a:	4613      	mov	r3, r2
 800206c:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick_Last */

  /* USER CODE END TIMER_IF_Convert_ms2Tick_Last */
  return ret;
 800206e:	68fb      	ldr	r3, [r7, #12]
}
 8002070:	4618      	mov	r0, r3
 8002072:	3710      	adds	r7, #16
 8002074:	46bd      	mov	sp, r7
 8002076:	bdb0      	pop	{r4, r5, r7, pc}

08002078 <TIMER_IF_Convert_Tick2ms>:

uint32_t TIMER_IF_Convert_Tick2ms(uint32_t tick)
{
 8002078:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800207c:	b085      	sub	sp, #20
 800207e:	af00      	add	r7, sp, #0
 8002080:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 8002082:	2100      	movs	r1, #0
 8002084:	60f9      	str	r1, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms */

  /* USER CODE END TIMER_IF_Convert_Tick2ms */
  ret = ((uint32_t)((((uint64_t)(tick)) * 1000) >> RTC_N_PREDIV_S));
 8002086:	6879      	ldr	r1, [r7, #4]
 8002088:	2000      	movs	r0, #0
 800208a:	460c      	mov	r4, r1
 800208c:	4605      	mov	r5, r0
 800208e:	4620      	mov	r0, r4
 8002090:	4629      	mov	r1, r5
 8002092:	f04f 0a00 	mov.w	sl, #0
 8002096:	f04f 0b00 	mov.w	fp, #0
 800209a:	ea4f 1b41 	mov.w	fp, r1, lsl #5
 800209e:	ea4b 6bd0 	orr.w	fp, fp, r0, lsr #27
 80020a2:	ea4f 1a40 	mov.w	sl, r0, lsl #5
 80020a6:	4650      	mov	r0, sl
 80020a8:	4659      	mov	r1, fp
 80020aa:	1b02      	subs	r2, r0, r4
 80020ac:	eb61 0305 	sbc.w	r3, r1, r5
 80020b0:	f04f 0000 	mov.w	r0, #0
 80020b4:	f04f 0100 	mov.w	r1, #0
 80020b8:	0099      	lsls	r1, r3, #2
 80020ba:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 80020be:	0090      	lsls	r0, r2, #2
 80020c0:	4602      	mov	r2, r0
 80020c2:	460b      	mov	r3, r1
 80020c4:	eb12 0804 	adds.w	r8, r2, r4
 80020c8:	eb43 0905 	adc.w	r9, r3, r5
 80020cc:	f04f 0200 	mov.w	r2, #0
 80020d0:	f04f 0300 	mov.w	r3, #0
 80020d4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80020d8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80020dc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80020e0:	4690      	mov	r8, r2
 80020e2:	4699      	mov	r9, r3
 80020e4:	4640      	mov	r0, r8
 80020e6:	4649      	mov	r1, r9
 80020e8:	f04f 0200 	mov.w	r2, #0
 80020ec:	f04f 0300 	mov.w	r3, #0
 80020f0:	0a82      	lsrs	r2, r0, #10
 80020f2:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 80020f6:	0a8b      	lsrs	r3, r1, #10
 80020f8:	4613      	mov	r3, r2
 80020fa:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms_Last */

  /* USER CODE END TIMER_IF_Convert_Tick2ms_Last */
  return ret;
 80020fc:	68fb      	ldr	r3, [r7, #12]
}
 80020fe:	4618      	mov	r0, r3
 8002100:	3714      	adds	r7, #20
 8002102:	46bd      	mov	sp, r7
 8002104:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002108:	4770      	bx	lr

0800210a <TIMER_IF_DelayMs>:

void TIMER_IF_DelayMs(uint32_t delay)
{
 800210a:	b580      	push	{r7, lr}
 800210c:	b084      	sub	sp, #16
 800210e:	af00      	add	r7, sp, #0
 8002110:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_DelayMs */

  /* USER CODE END TIMER_IF_DelayMs */
  uint32_t delayTicks = TIMER_IF_Convert_ms2Tick(delay);
 8002112:	6878      	ldr	r0, [r7, #4]
 8002114:	f7ff ff93 	bl	800203e <TIMER_IF_Convert_ms2Tick>
 8002118:	60f8      	str	r0, [r7, #12]
  uint32_t timeout = GetTimerTicks();
 800211a:	f000 f8d5 	bl	80022c8 <GetTimerTicks>
 800211e:	60b8      	str	r0, [r7, #8]

  /* Wait delay ms */
  while (((GetTimerTicks() - timeout)) < delayTicks)
 8002120:	e000      	b.n	8002124 <TIMER_IF_DelayMs+0x1a>
  {
    __NOP();
 8002122:	bf00      	nop
  while (((GetTimerTicks() - timeout)) < delayTicks)
 8002124:	f000 f8d0 	bl	80022c8 <GetTimerTicks>
 8002128:	4602      	mov	r2, r0
 800212a:	68bb      	ldr	r3, [r7, #8]
 800212c:	1ad3      	subs	r3, r2, r3
 800212e:	68fa      	ldr	r2, [r7, #12]
 8002130:	429a      	cmp	r2, r3
 8002132:	d8f6      	bhi.n	8002122 <TIMER_IF_DelayMs+0x18>
  }
  /* USER CODE BEGIN TIMER_IF_DelayMs_Last */

  /* USER CODE END TIMER_IF_DelayMs_Last */
}
 8002134:	bf00      	nop
 8002136:	bf00      	nop
 8002138:	3710      	adds	r7, #16
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}

0800213e <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 800213e:	b580      	push	{r7, lr}
 8002140:	b082      	sub	sp, #8
 8002142:	af00      	add	r7, sp, #0
 8002144:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_RTC_AlarmAEventCallback */

  /* USER CODE END HAL_RTC_AlarmAEventCallback */
  UTIL_TIMER_IRQ_MAP_PROCESS();
 8002146:	f018 fe69 	bl	801ae1c <UTIL_TIMER_IRQ_Handler>
  /* USER CODE BEGIN HAL_RTC_AlarmAEventCallback_Last */

  /* USER CODE END HAL_RTC_AlarmAEventCallback_Last */
}
 800214a:	bf00      	nop
 800214c:	3708      	adds	r7, #8
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}

08002152 <HAL_RTCEx_SSRUEventCallback>:

void HAL_RTCEx_SSRUEventCallback(RTC_HandleTypeDef *hrtc)
{
 8002152:	b580      	push	{r7, lr}
 8002154:	b084      	sub	sp, #16
 8002156:	af00      	add	r7, sp, #0
 8002158:	6078      	str	r0, [r7, #4]

  /* USER CODE END HAL_RTCEx_SSRUEventCallback */
  /*called every 48 days with 1024 ticks per seconds*/
  TIMER_IF_DBG_PRINTF(">>Handler SSRUnderflow at %d\n\r", GetTimerTicks());
  /*Increment MSBticks*/
  uint32_t MSB_ticks = TIMER_IF_BkUp_Read_MSBticks();
 800215a:	f000 f8a5 	bl	80022a8 <TIMER_IF_BkUp_Read_MSBticks>
 800215e:	60f8      	str	r0, [r7, #12]
  TIMER_IF_BkUp_Write_MSBticks(MSB_ticks + 1);
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	3301      	adds	r3, #1
 8002164:	4618      	mov	r0, r3
 8002166:	f000 f88f 	bl	8002288 <TIMER_IF_BkUp_Write_MSBticks>
  /* USER CODE BEGIN HAL_RTCEx_SSRUEventCallback_Last */

  /* USER CODE END HAL_RTCEx_SSRUEventCallback_Last */
}
 800216a:	bf00      	nop
 800216c:	3710      	adds	r7, #16
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}

08002172 <TIMER_IF_GetTime>:

uint32_t TIMER_IF_GetTime(uint16_t *mSeconds)
{
 8002172:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002176:	b08c      	sub	sp, #48	@ 0x30
 8002178:	af00      	add	r7, sp, #0
 800217a:	6178      	str	r0, [r7, #20]
  uint32_t seconds = 0;
 800217c:	2300      	movs	r3, #0
 800217e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* USER CODE BEGIN TIMER_IF_GetTime */

  /* USER CODE END TIMER_IF_GetTime */
  uint64_t ticks;
  uint32_t timerValueLsb = GetTimerTicks();
 8002180:	f000 f8a2 	bl	80022c8 <GetTimerTicks>
 8002184:	62b8      	str	r0, [r7, #40]	@ 0x28
  uint32_t timerValueMSB = TIMER_IF_BkUp_Read_MSBticks();
 8002186:	f000 f88f 	bl	80022a8 <TIMER_IF_BkUp_Read_MSBticks>
 800218a:	6278      	str	r0, [r7, #36]	@ 0x24

  ticks = (((uint64_t) timerValueMSB) << 32) + timerValueLsb;
 800218c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800218e:	2200      	movs	r2, #0
 8002190:	60bb      	str	r3, [r7, #8]
 8002192:	60fa      	str	r2, [r7, #12]
 8002194:	f04f 0200 	mov.w	r2, #0
 8002198:	f04f 0300 	mov.w	r3, #0
 800219c:	68b9      	ldr	r1, [r7, #8]
 800219e:	000b      	movs	r3, r1
 80021a0:	2200      	movs	r2, #0
 80021a2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80021a4:	2000      	movs	r0, #0
 80021a6:	460c      	mov	r4, r1
 80021a8:	4605      	mov	r5, r0
 80021aa:	eb12 0804 	adds.w	r8, r2, r4
 80021ae:	eb43 0905 	adc.w	r9, r3, r5
 80021b2:	e9c7 8906 	strd	r8, r9, [r7, #24]

  seconds = (uint32_t)(ticks >> RTC_N_PREDIV_S);
 80021b6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80021ba:	f04f 0200 	mov.w	r2, #0
 80021be:	f04f 0300 	mov.w	r3, #0
 80021c2:	0a82      	lsrs	r2, r0, #10
 80021c4:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 80021c8:	0a8b      	lsrs	r3, r1, #10
 80021ca:	4613      	mov	r3, r2
 80021cc:	62fb      	str	r3, [r7, #44]	@ 0x2c

  ticks = (uint32_t) ticks & RTC_PREDIV_S;
 80021ce:	69bb      	ldr	r3, [r7, #24]
 80021d0:	2200      	movs	r2, #0
 80021d2:	603b      	str	r3, [r7, #0]
 80021d4:	607a      	str	r2, [r7, #4]
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	f3c3 0a09 	ubfx	sl, r3, #0, #10
 80021dc:	f04f 0b00 	mov.w	fp, #0
 80021e0:	e9c7 ab06 	strd	sl, fp, [r7, #24]

  *mSeconds = TIMER_IF_Convert_Tick2ms(ticks);
 80021e4:	69bb      	ldr	r3, [r7, #24]
 80021e6:	4618      	mov	r0, r3
 80021e8:	f7ff ff46 	bl	8002078 <TIMER_IF_Convert_Tick2ms>
 80021ec:	4603      	mov	r3, r0
 80021ee:	b29a      	uxth	r2, r3
 80021f0:	697b      	ldr	r3, [r7, #20]
 80021f2:	801a      	strh	r2, [r3, #0]

  /* USER CODE BEGIN TIMER_IF_GetTime_Last */

  /* USER CODE END TIMER_IF_GetTime_Last */
  return seconds;
 80021f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 80021f6:	4618      	mov	r0, r3
 80021f8:	3730      	adds	r7, #48	@ 0x30
 80021fa:	46bd      	mov	sp, r7
 80021fc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08002200 <TIMER_IF_BkUp_Write_Seconds>:

void TIMER_IF_BkUp_Write_Seconds(uint32_t Seconds)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b082      	sub	sp, #8
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_Seconds */

  /* USER CODE END TIMER_IF_BkUp_Write_Seconds */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SECONDS, Seconds);
 8002208:	687a      	ldr	r2, [r7, #4]
 800220a:	2100      	movs	r1, #0
 800220c:	4803      	ldr	r0, [pc, #12]	@ (800221c <TIMER_IF_BkUp_Write_Seconds+0x1c>)
 800220e:	f004 fd47 	bl	8006ca0 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_Seconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_Seconds_Last */
}
 8002212:	bf00      	nop
 8002214:	3708      	adds	r7, #8
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}
 800221a:	bf00      	nop
 800221c:	200001d8 	.word	0x200001d8

08002220 <TIMER_IF_BkUp_Write_SubSeconds>:

void TIMER_IF_BkUp_Write_SubSeconds(uint32_t SubSeconds)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b082      	sub	sp, #8
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_SubSeconds */

  /* USER CODE END TIMER_IF_BkUp_Write_SubSeconds */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SUBSECONDS, SubSeconds);
 8002228:	687a      	ldr	r2, [r7, #4]
 800222a:	2101      	movs	r1, #1
 800222c:	4803      	ldr	r0, [pc, #12]	@ (800223c <TIMER_IF_BkUp_Write_SubSeconds+0x1c>)
 800222e:	f004 fd37 	bl	8006ca0 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_SubSeconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_SubSeconds_Last */
}
 8002232:	bf00      	nop
 8002234:	3708      	adds	r7, #8
 8002236:	46bd      	mov	sp, r7
 8002238:	bd80      	pop	{r7, pc}
 800223a:	bf00      	nop
 800223c:	200001d8 	.word	0x200001d8

08002240 <TIMER_IF_BkUp_Read_Seconds>:

uint32_t TIMER_IF_BkUp_Read_Seconds(void)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b082      	sub	sp, #8
 8002244:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8002246:	2300      	movs	r3, #0
 8002248:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_Seconds */

  /* USER CODE END TIMER_IF_BkUp_Read_Seconds */
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SECONDS);
 800224a:	2100      	movs	r1, #0
 800224c:	4804      	ldr	r0, [pc, #16]	@ (8002260 <TIMER_IF_BkUp_Read_Seconds+0x20>)
 800224e:	f004 fd3f 	bl	8006cd0 <HAL_RTCEx_BKUPRead>
 8002252:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_Seconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_Seconds_Last */
  return ret;
 8002254:	687b      	ldr	r3, [r7, #4]
}
 8002256:	4618      	mov	r0, r3
 8002258:	3708      	adds	r7, #8
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}
 800225e:	bf00      	nop
 8002260:	200001d8 	.word	0x200001d8

08002264 <TIMER_IF_BkUp_Read_SubSeconds>:

uint32_t TIMER_IF_BkUp_Read_SubSeconds(void)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b082      	sub	sp, #8
 8002268:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 800226a:	2300      	movs	r3, #0
 800226c:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_SubSeconds */

  /* USER CODE END TIMER_IF_BkUp_Read_SubSeconds */
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SUBSECONDS);
 800226e:	2101      	movs	r1, #1
 8002270:	4804      	ldr	r0, [pc, #16]	@ (8002284 <TIMER_IF_BkUp_Read_SubSeconds+0x20>)
 8002272:	f004 fd2d 	bl	8006cd0 <HAL_RTCEx_BKUPRead>
 8002276:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_SubSeconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_SubSeconds_Last */
  return ret;
 8002278:	687b      	ldr	r3, [r7, #4]
}
 800227a:	4618      	mov	r0, r3
 800227c:	3708      	adds	r7, #8
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}
 8002282:	bf00      	nop
 8002284:	200001d8 	.word	0x200001d8

08002288 <TIMER_IF_BkUp_Write_MSBticks>:

/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/
static void TIMER_IF_BkUp_Write_MSBticks(uint32_t MSBticks)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b082      	sub	sp, #8
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_MSBticks */

  /* USER CODE END TIMER_IF_BkUp_Write_MSBticks */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_MSBTICKS, MSBticks);
 8002290:	687a      	ldr	r2, [r7, #4]
 8002292:	2102      	movs	r1, #2
 8002294:	4803      	ldr	r0, [pc, #12]	@ (80022a4 <TIMER_IF_BkUp_Write_MSBticks+0x1c>)
 8002296:	f004 fd03 	bl	8006ca0 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_MSBticks_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_MSBticks_Last */
}
 800229a:	bf00      	nop
 800229c:	3708      	adds	r7, #8
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}
 80022a2:	bf00      	nop
 80022a4:	200001d8 	.word	0x200001d8

080022a8 <TIMER_IF_BkUp_Read_MSBticks>:

static uint32_t TIMER_IF_BkUp_Read_MSBticks(void)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b082      	sub	sp, #8
 80022ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_MSBticks */

  /* USER CODE END TIMER_IF_BkUp_Read_MSBticks */
  uint32_t MSBticks;
  MSBticks = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_MSBTICKS);
 80022ae:	2102      	movs	r1, #2
 80022b0:	4804      	ldr	r0, [pc, #16]	@ (80022c4 <TIMER_IF_BkUp_Read_MSBticks+0x1c>)
 80022b2:	f004 fd0d 	bl	8006cd0 <HAL_RTCEx_BKUPRead>
 80022b6:	6078      	str	r0, [r7, #4]
  return MSBticks;
 80022b8:	687b      	ldr	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_MSBticks_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_MSBticks_Last */
}
 80022ba:	4618      	mov	r0, r3
 80022bc:	3708      	adds	r7, #8
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}
 80022c2:	bf00      	nop
 80022c4:	200001d8 	.word	0x200001d8

080022c8 <GetTimerTicks>:

static inline uint32_t GetTimerTicks(void)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b082      	sub	sp, #8
 80022cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GetTimerTicks */

  /* USER CODE END GetTimerTicks */
  uint32_t ssr = LL_RTC_TIME_GetSubSecond(RTC);
 80022ce:	480b      	ldr	r0, [pc, #44]	@ (80022fc <GetTimerTicks+0x34>)
 80022d0:	f7ff fdd9 	bl	8001e86 <LL_RTC_TIME_GetSubSecond>
 80022d4:	6078      	str	r0, [r7, #4]
  /* read twice to make sure value it valid*/
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 80022d6:	e003      	b.n	80022e0 <GetTimerTicks+0x18>
  {
    ssr = LL_RTC_TIME_GetSubSecond(RTC);
 80022d8:	4808      	ldr	r0, [pc, #32]	@ (80022fc <GetTimerTicks+0x34>)
 80022da:	f7ff fdd4 	bl	8001e86 <LL_RTC_TIME_GetSubSecond>
 80022de:	6078      	str	r0, [r7, #4]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 80022e0:	4806      	ldr	r0, [pc, #24]	@ (80022fc <GetTimerTicks+0x34>)
 80022e2:	f7ff fdd0 	bl	8001e86 <LL_RTC_TIME_GetSubSecond>
 80022e6:	4602      	mov	r2, r0
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d1f4      	bne.n	80022d8 <GetTimerTicks+0x10>
  }
  return UINT32_MAX - ssr;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	43db      	mvns	r3, r3
  /* USER CODE BEGIN GetTimerTicks_Last */

  /* USER CODE END GetTimerTicks_Last */
}
 80022f2:	4618      	mov	r0, r3
 80022f4:	3708      	adds	r7, #8
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}
 80022fa:	bf00      	nop
 80022fc:	40002800 	.word	0x40002800

08002300 <LL_AHB2_GRP1_EnableClock>:
{
 8002300:	b480      	push	{r7}
 8002302:	b085      	sub	sp, #20
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002308:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800230c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800230e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	4313      	orrs	r3, r2
 8002316:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002318:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800231c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	4013      	ands	r3, r2
 8002322:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002324:	68fb      	ldr	r3, [r7, #12]
}
 8002326:	bf00      	nop
 8002328:	3714      	adds	r7, #20
 800232a:	46bd      	mov	sp, r7
 800232c:	bc80      	pop	{r7}
 800232e:	4770      	bx	lr

08002330 <LL_APB2_GRP1_EnableClock>:
{
 8002330:	b480      	push	{r7}
 8002332:	b085      	sub	sp, #20
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8002338:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800233c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800233e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	4313      	orrs	r3, r2
 8002346:	660b      	str	r3, [r1, #96]	@ 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002348:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800234c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	4013      	ands	r3, r2
 8002352:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002354:	68fb      	ldr	r3, [r7, #12]
}
 8002356:	bf00      	nop
 8002358:	3714      	adds	r7, #20
 800235a:	46bd      	mov	sp, r7
 800235c:	bc80      	pop	{r7}
 800235e:	4770      	bx	lr

08002360 <LL_APB2_GRP1_DisableClock>:
{
 8002360:	b480      	push	{r7}
 8002362:	b083      	sub	sp, #12
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 8002368:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800236c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	43db      	mvns	r3, r3
 8002372:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002376:	4013      	ands	r3, r2
 8002378:	660b      	str	r3, [r1, #96]	@ 0x60
}
 800237a:	bf00      	nop
 800237c:	370c      	adds	r7, #12
 800237e:	46bd      	mov	sp, r7
 8002380:	bc80      	pop	{r7}
 8002382:	4770      	bx	lr

08002384 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002388:	4b22      	ldr	r3, [pc, #136]	@ (8002414 <MX_USART1_UART_Init+0x90>)
 800238a:	4a23      	ldr	r2, [pc, #140]	@ (8002418 <MX_USART1_UART_Init+0x94>)
 800238c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800238e:	4b21      	ldr	r3, [pc, #132]	@ (8002414 <MX_USART1_UART_Init+0x90>)
 8002390:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002394:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002396:	4b1f      	ldr	r3, [pc, #124]	@ (8002414 <MX_USART1_UART_Init+0x90>)
 8002398:	2200      	movs	r2, #0
 800239a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800239c:	4b1d      	ldr	r3, [pc, #116]	@ (8002414 <MX_USART1_UART_Init+0x90>)
 800239e:	2200      	movs	r2, #0
 80023a0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80023a2:	4b1c      	ldr	r3, [pc, #112]	@ (8002414 <MX_USART1_UART_Init+0x90>)
 80023a4:	2200      	movs	r2, #0
 80023a6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80023a8:	4b1a      	ldr	r3, [pc, #104]	@ (8002414 <MX_USART1_UART_Init+0x90>)
 80023aa:	220c      	movs	r2, #12
 80023ac:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80023ae:	4b19      	ldr	r3, [pc, #100]	@ (8002414 <MX_USART1_UART_Init+0x90>)
 80023b0:	2200      	movs	r2, #0
 80023b2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80023b4:	4b17      	ldr	r3, [pc, #92]	@ (8002414 <MX_USART1_UART_Init+0x90>)
 80023b6:	2200      	movs	r2, #0
 80023b8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80023ba:	4b16      	ldr	r3, [pc, #88]	@ (8002414 <MX_USART1_UART_Init+0x90>)
 80023bc:	2200      	movs	r2, #0
 80023be:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80023c0:	4b14      	ldr	r3, [pc, #80]	@ (8002414 <MX_USART1_UART_Init+0x90>)
 80023c2:	2200      	movs	r2, #0
 80023c4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80023c6:	4b13      	ldr	r3, [pc, #76]	@ (8002414 <MX_USART1_UART_Init+0x90>)
 80023c8:	2200      	movs	r2, #0
 80023ca:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80023cc:	4811      	ldr	r0, [pc, #68]	@ (8002414 <MX_USART1_UART_Init+0x90>)
 80023ce:	f005 f962 	bl	8007696 <HAL_UART_Init>
 80023d2:	4603      	mov	r3, r0
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d001      	beq.n	80023dc <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80023d8:	f7ff f950 	bl	800167c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80023dc:	2100      	movs	r1, #0
 80023de:	480d      	ldr	r0, [pc, #52]	@ (8002414 <MX_USART1_UART_Init+0x90>)
 80023e0:	f007 f9d9 	bl	8009796 <HAL_UARTEx_SetTxFifoThreshold>
 80023e4:	4603      	mov	r3, r0
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d001      	beq.n	80023ee <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80023ea:	f7ff f947 	bl	800167c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80023ee:	2100      	movs	r1, #0
 80023f0:	4808      	ldr	r0, [pc, #32]	@ (8002414 <MX_USART1_UART_Init+0x90>)
 80023f2:	f007 fa0e 	bl	8009812 <HAL_UARTEx_SetRxFifoThreshold>
 80023f6:	4603      	mov	r3, r0
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d001      	beq.n	8002400 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80023fc:	f7ff f93e 	bl	800167c <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart1) != HAL_OK)
 8002400:	4804      	ldr	r0, [pc, #16]	@ (8002414 <MX_USART1_UART_Init+0x90>)
 8002402:	f007 f98d 	bl	8009720 <HAL_UARTEx_EnableFifoMode>
 8002406:	4603      	mov	r3, r0
 8002408:	2b00      	cmp	r3, #0
 800240a:	d001      	beq.n	8002410 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 800240c:	f7ff f936 	bl	800167c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002410:	bf00      	nop
 8002412:	bd80      	pop	{r7, pc}
 8002414:	20000224 	.word	0x20000224
 8002418:	40013800 	.word	0x40013800

0800241c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b096      	sub	sp, #88	@ 0x58
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002424:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8002428:	2200      	movs	r2, #0
 800242a:	601a      	str	r2, [r3, #0]
 800242c:	605a      	str	r2, [r3, #4]
 800242e:	609a      	str	r2, [r3, #8]
 8002430:	60da      	str	r2, [r3, #12]
 8002432:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002434:	f107 030c 	add.w	r3, r7, #12
 8002438:	2238      	movs	r2, #56	@ 0x38
 800243a:	2100      	movs	r1, #0
 800243c:	4618      	mov	r0, r3
 800243e:	f019 f8d5 	bl	801b5ec <memset>
  if(uartHandle->Instance==USART1)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4a2f      	ldr	r2, [pc, #188]	@ (8002504 <HAL_UART_MspInit+0xe8>)
 8002448:	4293      	cmp	r3, r2
 800244a:	d156      	bne.n	80024fa <HAL_UART_MspInit+0xde>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800244c:	2301      	movs	r3, #1
 800244e:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002450:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 8002454:	613b      	str	r3, [r7, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002456:	f107 030c 	add.w	r3, r7, #12
 800245a:	4618      	mov	r0, r3
 800245c:	f003 ffb0 	bl	80063c0 <HAL_RCCEx_PeriphCLKConfig>
 8002460:	4603      	mov	r3, r0
 8002462:	2b00      	cmp	r3, #0
 8002464:	d001      	beq.n	800246a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002466:	f7ff f909 	bl	800167c <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800246a:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800246e:	f7ff ff5f 	bl	8002330 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002472:	2002      	movs	r0, #2
 8002474:	f7ff ff44 	bl	8002300 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = USARTx_RX_Pin|USARTx_TX_Pin;
 8002478:	23c0      	movs	r3, #192	@ 0xc0
 800247a:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800247c:	2302      	movs	r3, #2
 800247e:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002480:	2300      	movs	r3, #0
 8002482:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002484:	2303      	movs	r3, #3
 8002486:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002488:	2307      	movs	r3, #7
 800248a:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800248c:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8002490:	4619      	mov	r1, r3
 8002492:	481d      	ldr	r0, [pc, #116]	@ (8002508 <HAL_UART_MspInit+0xec>)
 8002494:	f002 faac 	bl	80049f0 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel1;
 8002498:	4b1c      	ldr	r3, [pc, #112]	@ (800250c <HAL_UART_MspInit+0xf0>)
 800249a:	4a1d      	ldr	r2, [pc, #116]	@ (8002510 <HAL_UART_MspInit+0xf4>)
 800249c:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 800249e:	4b1b      	ldr	r3, [pc, #108]	@ (800250c <HAL_UART_MspInit+0xf0>)
 80024a0:	2212      	movs	r2, #18
 80024a2:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80024a4:	4b19      	ldr	r3, [pc, #100]	@ (800250c <HAL_UART_MspInit+0xf0>)
 80024a6:	2210      	movs	r2, #16
 80024a8:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80024aa:	4b18      	ldr	r3, [pc, #96]	@ (800250c <HAL_UART_MspInit+0xf0>)
 80024ac:	2200      	movs	r2, #0
 80024ae:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80024b0:	4b16      	ldr	r3, [pc, #88]	@ (800250c <HAL_UART_MspInit+0xf0>)
 80024b2:	2280      	movs	r2, #128	@ 0x80
 80024b4:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80024b6:	4b15      	ldr	r3, [pc, #84]	@ (800250c <HAL_UART_MspInit+0xf0>)
 80024b8:	2200      	movs	r2, #0
 80024ba:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80024bc:	4b13      	ldr	r3, [pc, #76]	@ (800250c <HAL_UART_MspInit+0xf0>)
 80024be:	2200      	movs	r2, #0
 80024c0:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80024c2:	4b12      	ldr	r3, [pc, #72]	@ (800250c <HAL_UART_MspInit+0xf0>)
 80024c4:	2200      	movs	r2, #0
 80024c6:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80024c8:	4b10      	ldr	r3, [pc, #64]	@ (800250c <HAL_UART_MspInit+0xf0>)
 80024ca:	2200      	movs	r2, #0
 80024cc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80024ce:	480f      	ldr	r0, [pc, #60]	@ (800250c <HAL_UART_MspInit+0xf0>)
 80024d0:	f001 fc42 	bl	8003d58 <HAL_DMA_Init>
 80024d4:	4603      	mov	r3, r0
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d001      	beq.n	80024de <HAL_UART_MspInit+0xc2>
    {
      Error_Handler();
 80024da:	f7ff f8cf 	bl	800167c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	4a0a      	ldr	r2, [pc, #40]	@ (800250c <HAL_UART_MspInit+0xf0>)
 80024e2:	679a      	str	r2, [r3, #120]	@ 0x78
 80024e4:	4a09      	ldr	r2, [pc, #36]	@ (800250c <HAL_UART_MspInit+0xf0>)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 2, 0);
 80024ea:	2200      	movs	r2, #0
 80024ec:	2102      	movs	r1, #2
 80024ee:	2024      	movs	r0, #36	@ 0x24
 80024f0:	f001 fbfb 	bl	8003cea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80024f4:	2024      	movs	r0, #36	@ 0x24
 80024f6:	f001 fc12 	bl	8003d1e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80024fa:	bf00      	nop
 80024fc:	3758      	adds	r7, #88	@ 0x58
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd80      	pop	{r7, pc}
 8002502:	bf00      	nop
 8002504:	40013800 	.word	0x40013800
 8002508:	48000400 	.word	0x48000400
 800250c:	200002b4 	.word	0x200002b4
 8002510:	40020008 	.word	0x40020008

08002514 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b082      	sub	sp, #8
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART1)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4a0b      	ldr	r2, [pc, #44]	@ (8002550 <HAL_UART_MspDeInit+0x3c>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d10f      	bne.n	8002546 <HAL_UART_MspDeInit+0x32>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8002526:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800252a:	f7ff ff19 	bl	8002360 <LL_APB2_GRP1_DisableClock>

    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    HAL_GPIO_DeInit(GPIOB, USARTx_RX_Pin|USARTx_TX_Pin);
 800252e:	21c0      	movs	r1, #192	@ 0xc0
 8002530:	4808      	ldr	r0, [pc, #32]	@ (8002554 <HAL_UART_MspDeInit+0x40>)
 8002532:	f002 fbbd 	bl	8004cb0 <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmatx);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800253a:	4618      	mov	r0, r3
 800253c:	f001 fcb4 	bl	8003ea8 <HAL_DMA_DeInit>

    /* USART1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8002540:	2024      	movs	r0, #36	@ 0x24
 8002542:	f001 fbfa 	bl	8003d3a <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }
}
 8002546:	bf00      	nop
 8002548:	3708      	adds	r7, #8
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}
 800254e:	bf00      	nop
 8002550:	40013800 	.word	0x40013800
 8002554:	48000400 	.word	0x48000400

08002558 <LL_APB2_GRP1_ForceReset>:
{
 8002558:	b480      	push	{r7}
 800255a:	b083      	sub	sp, #12
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2RSTR, Periphs);
 8002560:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002564:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002566:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	4313      	orrs	r3, r2
 800256e:	640b      	str	r3, [r1, #64]	@ 0x40
}
 8002570:	bf00      	nop
 8002572:	370c      	adds	r7, #12
 8002574:	46bd      	mov	sp, r7
 8002576:	bc80      	pop	{r7}
 8002578:	4770      	bx	lr

0800257a <LL_APB2_GRP1_ReleaseReset>:
{
 800257a:	b480      	push	{r7}
 800257c:	b083      	sub	sp, #12
 800257e:	af00      	add	r7, sp, #0
 8002580:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2RSTR, Periphs);
 8002582:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002586:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	43db      	mvns	r3, r3
 800258c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002590:	4013      	ands	r3, r2
 8002592:	640b      	str	r3, [r1, #64]	@ 0x40
}
 8002594:	bf00      	nop
 8002596:	370c      	adds	r7, #12
 8002598:	46bd      	mov	sp, r7
 800259a:	bc80      	pop	{r7}
 800259c:	4770      	bx	lr
	...

080025a0 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 80025a0:	b480      	push	{r7}
 80025a2:	b083      	sub	sp, #12
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 80025a8:	4b06      	ldr	r3, [pc, #24]	@ (80025c4 <LL_EXTI_EnableIT_0_31+0x24>)
 80025aa:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 80025ae:	4905      	ldr	r1, [pc, #20]	@ (80025c4 <LL_EXTI_EnableIT_0_31+0x24>)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	4313      	orrs	r3, r2
 80025b4:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 80025b8:	bf00      	nop
 80025ba:	370c      	adds	r7, #12
 80025bc:	46bd      	mov	sp, r7
 80025be:	bc80      	pop	{r7}
 80025c0:	4770      	bx	lr
 80025c2:	bf00      	nop
 80025c4:	58000800 	.word	0x58000800

080025c8 <vcom_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

UTIL_ADV_TRACE_Status_t vcom_Init(void (*cb)(void *))
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b082      	sub	sp, #8
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vcom_Init_1 */

  /* USER CODE END vcom_Init_1 */
  TxCpltCallback = cb;
 80025d0:	4a07      	ldr	r2, [pc, #28]	@ (80025f0 <vcom_Init+0x28>)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6013      	str	r3, [r2, #0]
  MX_DMA_Init();
 80025d6:	f7fe fd9f 	bl	8001118 <MX_DMA_Init>
  MX_USART1_UART_Init();
 80025da:	f7ff fed3 	bl	8002384 <MX_USART1_UART_Init>
  LL_EXTI_EnableIT_0_31(LL_EXTI_LINE_26);
 80025de:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 80025e2:	f7ff ffdd 	bl	80025a0 <LL_EXTI_EnableIT_0_31>
  return UTIL_ADV_TRACE_OK;
 80025e6:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Init_2 */

  /* USER CODE END vcom_Init_2 */
}
 80025e8:	4618      	mov	r0, r3
 80025ea:	3708      	adds	r7, #8
 80025ec:	46bd      	mov	sp, r7
 80025ee:	bd80      	pop	{r7, pc}
 80025f0:	20000318 	.word	0x20000318

080025f4 <vcom_DeInit>:

UTIL_ADV_TRACE_Status_t vcom_DeInit(void)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN vcom_DeInit_1 */

  /* USER CODE END vcom_DeInit_1 */
  /* ##-1- Reset peripherals ################################################## */
  __HAL_RCC_USART1_FORCE_RESET();
 80025f8:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 80025fc:	f7ff ffac 	bl	8002558 <LL_APB2_GRP1_ForceReset>
  __HAL_RCC_USART1_RELEASE_RESET();
 8002600:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8002604:	f7ff ffb9 	bl	800257a <LL_APB2_GRP1_ReleaseReset>

  /* ##-2- MspDeInit ################################################## */
  HAL_UART_MspDeInit(&huart1);
 8002608:	4804      	ldr	r0, [pc, #16]	@ (800261c <vcom_DeInit+0x28>)
 800260a:	f7ff ff83 	bl	8002514 <HAL_UART_MspDeInit>

  /* ##-3- Disable the NVIC for DMA ########################################### */
  /* USER CODE BEGIN 1 */
  HAL_NVIC_DisableIRQ(DMA1_Channel5_IRQn);
 800260e:	200f      	movs	r0, #15
 8002610:	f001 fb93 	bl	8003d3a <HAL_NVIC_DisableIRQ>

  return UTIL_ADV_TRACE_OK;
 8002614:	2300      	movs	r3, #0
  /* USER CODE END 1 */
  /* USER CODE BEGIN vcom_DeInit_2 */

  /* USER CODE END vcom_DeInit_2 */
}
 8002616:	4618      	mov	r0, r3
 8002618:	bd80      	pop	{r7, pc}
 800261a:	bf00      	nop
 800261c:	20000224 	.word	0x20000224

08002620 <vcom_Trace_DMA>:

  /* USER CODE END vcom_Trace_2 */
}

UTIL_ADV_TRACE_Status_t vcom_Trace_DMA(uint8_t *p_data, uint16_t size)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b082      	sub	sp, #8
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
 8002628:	460b      	mov	r3, r1
 800262a:	807b      	strh	r3, [r7, #2]
  /* USER CODE BEGIN vcom_Trace_DMA_1 */

  /* USER CODE END vcom_Trace_DMA_1 */
  HAL_UART_Transmit_DMA(&huart1, p_data, size);
 800262c:	887b      	ldrh	r3, [r7, #2]
 800262e:	461a      	mov	r2, r3
 8002630:	6879      	ldr	r1, [r7, #4]
 8002632:	4804      	ldr	r0, [pc, #16]	@ (8002644 <vcom_Trace_DMA+0x24>)
 8002634:	f005 f8d6 	bl	80077e4 <HAL_UART_Transmit_DMA>
  return UTIL_ADV_TRACE_OK;
 8002638:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Trace_DMA_2 */

  /* USER CODE END vcom_Trace_DMA_2 */
}
 800263a:	4618      	mov	r0, r3
 800263c:	3708      	adds	r7, #8
 800263e:	46bd      	mov	sp, r7
 8002640:	bd80      	pop	{r7, pc}
 8002642:	bf00      	nop
 8002644:	20000224 	.word	0x20000224

08002648 <vcom_ReceiveInit>:

UTIL_ADV_TRACE_Status_t vcom_ReceiveInit(void (*RxCb)(uint8_t *rxChar, uint16_t size, uint8_t error))
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b084      	sub	sp, #16
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]

  /* USER CODE END vcom_ReceiveInit_1 */
  UART_WakeUpTypeDef WakeUpSelection;

  /*record call back*/
  RxCpltCallback = RxCb;
 8002650:	4a19      	ldr	r2, [pc, #100]	@ (80026b8 <vcom_ReceiveInit+0x70>)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6013      	str	r3, [r2, #0]

  /*Set wakeUp event on start bit*/
  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_STARTBIT;
 8002656:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800265a:	60bb      	str	r3, [r7, #8]

  HAL_UARTEx_StopModeWakeUpSourceConfig(&huart1, WakeUpSelection);
 800265c:	f107 0308 	add.w	r3, r7, #8
 8002660:	e893 0006 	ldmia.w	r3, {r1, r2}
 8002664:	4815      	ldr	r0, [pc, #84]	@ (80026bc <vcom_ReceiveInit+0x74>)
 8002666:	f006 ffce 	bl	8009606 <HAL_UARTEx_StopModeWakeUpSourceConfig>

  /* Make sure that no UART transfer is on-going */
  while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_BUSY) == SET);
 800266a:	bf00      	nop
 800266c:	4b13      	ldr	r3, [pc, #76]	@ (80026bc <vcom_ReceiveInit+0x74>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	69db      	ldr	r3, [r3, #28]
 8002672:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002676:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800267a:	d0f7      	beq.n	800266c <vcom_ReceiveInit+0x24>

  /* Make sure that UART is ready to receive)   */
  while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_REACK) == RESET);
 800267c:	bf00      	nop
 800267e:	4b0f      	ldr	r3, [pc, #60]	@ (80026bc <vcom_ReceiveInit+0x74>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	69db      	ldr	r3, [r3, #28]
 8002684:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002688:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800268c:	d1f7      	bne.n	800267e <vcom_ReceiveInit+0x36>

  /* Enable USART interrupt */
  __HAL_UART_ENABLE_IT(&huart1, UART_IT_WUF);
 800268e:	4b0b      	ldr	r3, [pc, #44]	@ (80026bc <vcom_ReceiveInit+0x74>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	689a      	ldr	r2, [r3, #8]
 8002694:	4b09      	ldr	r3, [pc, #36]	@ (80026bc <vcom_ReceiveInit+0x74>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 800269c:	609a      	str	r2, [r3, #8]

  /*Enable wakeup from stop mode*/
  HAL_UARTEx_EnableStopMode(&huart1);
 800269e:	4807      	ldr	r0, [pc, #28]	@ (80026bc <vcom_ReceiveInit+0x74>)
 80026a0:	f007 f80c 	bl	80096bc <HAL_UARTEx_EnableStopMode>

  /*Start LPUART receive on IT*/
  HAL_UART_Receive_IT(&huart1, &charRx, 1);
 80026a4:	2201      	movs	r2, #1
 80026a6:	4906      	ldr	r1, [pc, #24]	@ (80026c0 <vcom_ReceiveInit+0x78>)
 80026a8:	4804      	ldr	r0, [pc, #16]	@ (80026bc <vcom_ReceiveInit+0x74>)
 80026aa:	f005 f845 	bl	8007738 <HAL_UART_Receive_IT>

  return UTIL_ADV_TRACE_OK;
 80026ae:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_ReceiveInit_2 */

  /* USER CODE END vcom_ReceiveInit_2 */
}
 80026b0:	4618      	mov	r0, r3
 80026b2:	3710      	adds	r7, #16
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bd80      	pop	{r7, pc}
 80026b8:	2000031c 	.word	0x2000031c
 80026bc:	20000224 	.word	0x20000224
 80026c0:	20000314 	.word	0x20000314

080026c4 <vcom_Resume>:

void vcom_Resume(void)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN vcom_Resume_1 */

  /* USER CODE END vcom_Resume_1 */
  /*to re-enable lost UART settings*/
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80026c8:	4808      	ldr	r0, [pc, #32]	@ (80026ec <vcom_Resume+0x28>)
 80026ca:	f004 ffe4 	bl	8007696 <HAL_UART_Init>
 80026ce:	4603      	mov	r3, r0
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d001      	beq.n	80026d8 <vcom_Resume+0x14>
  {
    Error_Handler();
 80026d4:	f7fe ffd2 	bl	800167c <Error_Handler>
  }

  /*to re-enable lost DMA settings*/
  if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80026d8:	4805      	ldr	r0, [pc, #20]	@ (80026f0 <vcom_Resume+0x2c>)
 80026da:	f001 fb3d 	bl	8003d58 <HAL_DMA_Init>
 80026de:	4603      	mov	r3, r0
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d001      	beq.n	80026e8 <vcom_Resume+0x24>
  {
    Error_Handler();
 80026e4:	f7fe ffca 	bl	800167c <Error_Handler>
  }
  /* USER CODE BEGIN vcom_Resume_2 */

  /* USER CODE END vcom_Resume_2 */
}
 80026e8:	bf00      	nop
 80026ea:	bd80      	pop	{r7, pc}
 80026ec:	20000224 	.word	0x20000224
 80026f0:	200002b4 	.word	0x200002b4

080026f4 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b082      	sub	sp, #8
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_1 */

  /* USER CODE END HAL_UART_TxCpltCallback_1 */
  /* buffer transmission complete*/
  if (huart->Instance == USART1)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4a05      	ldr	r2, [pc, #20]	@ (8002718 <HAL_UART_TxCpltCallback+0x24>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d103      	bne.n	800270e <HAL_UART_TxCpltCallback+0x1a>
  {
    TxCpltCallback(NULL);
 8002706:	4b05      	ldr	r3, [pc, #20]	@ (800271c <HAL_UART_TxCpltCallback+0x28>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	2000      	movs	r0, #0
 800270c:	4798      	blx	r3
  }
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_2 */

  /* USER CODE END HAL_UART_TxCpltCallback_2 */
}
 800270e:	bf00      	nop
 8002710:	3708      	adds	r7, #8
 8002712:	46bd      	mov	sp, r7
 8002714:	bd80      	pop	{r7, pc}
 8002716:	bf00      	nop
 8002718:	40013800 	.word	0x40013800
 800271c:	20000318 	.word	0x20000318

08002720 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b082      	sub	sp, #8
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_1 */

  /* USER CODE END HAL_UART_RxCpltCallback_1 */
  if (huart->Instance == USART1)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4a0d      	ldr	r2, [pc, #52]	@ (8002764 <HAL_UART_RxCpltCallback+0x44>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d113      	bne.n	800275a <HAL_UART_RxCpltCallback+0x3a>
  {
    if ((NULL != RxCpltCallback) && (HAL_UART_ERROR_NONE == huart->ErrorCode))
 8002732:	4b0d      	ldr	r3, [pc, #52]	@ (8002768 <HAL_UART_RxCpltCallback+0x48>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d00a      	beq.n	8002750 <HAL_UART_RxCpltCallback+0x30>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002740:	2b00      	cmp	r3, #0
 8002742:	d105      	bne.n	8002750 <HAL_UART_RxCpltCallback+0x30>
    {
      RxCpltCallback(&charRx, 1, 0);
 8002744:	4b08      	ldr	r3, [pc, #32]	@ (8002768 <HAL_UART_RxCpltCallback+0x48>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	2200      	movs	r2, #0
 800274a:	2101      	movs	r1, #1
 800274c:	4807      	ldr	r0, [pc, #28]	@ (800276c <HAL_UART_RxCpltCallback+0x4c>)
 800274e:	4798      	blx	r3
    }
    HAL_UART_Receive_IT(huart, &charRx, 1);
 8002750:	2201      	movs	r2, #1
 8002752:	4906      	ldr	r1, [pc, #24]	@ (800276c <HAL_UART_RxCpltCallback+0x4c>)
 8002754:	6878      	ldr	r0, [r7, #4]
 8002756:	f004 ffef 	bl	8007738 <HAL_UART_Receive_IT>
  }
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_2 */

  /* USER CODE END HAL_UART_RxCpltCallback_2 */
}
 800275a:	bf00      	nop
 800275c:	3708      	adds	r7, #8
 800275e:	46bd      	mov	sp, r7
 8002760:	bd80      	pop	{r7, pc}
 8002762:	bf00      	nop
 8002764:	40013800 	.word	0x40013800
 8002768:	2000031c 	.word	0x2000031c
 800276c:	20000314 	.word	0x20000314

08002770 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002770:	480d      	ldr	r0, [pc, #52]	@ (80027a8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002772:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002774:	f7ff fb81 	bl	8001e7a <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002778:	480c      	ldr	r0, [pc, #48]	@ (80027ac <LoopForever+0x6>)
  ldr r1, =_edata
 800277a:	490d      	ldr	r1, [pc, #52]	@ (80027b0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800277c:	4a0d      	ldr	r2, [pc, #52]	@ (80027b4 <LoopForever+0xe>)
  movs r3, #0
 800277e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002780:	e002      	b.n	8002788 <LoopCopyDataInit>

08002782 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002782:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002784:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002786:	3304      	adds	r3, #4

08002788 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002788:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800278a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800278c:	d3f9      	bcc.n	8002782 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800278e:	4a0a      	ldr	r2, [pc, #40]	@ (80027b8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002790:	4c0a      	ldr	r4, [pc, #40]	@ (80027bc <LoopForever+0x16>)
  movs r3, #0
 8002792:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002794:	e001      	b.n	800279a <LoopFillZerobss>

08002796 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002796:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002798:	3204      	adds	r2, #4

0800279a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800279a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800279c:	d3fb      	bcc.n	8002796 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800279e:	f018 ff2d 	bl	801b5fc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80027a2:	f7fe ff04 	bl	80015ae <main>

080027a6 <LoopForever>:

LoopForever:
    b LoopForever
 80027a6:	e7fe      	b.n	80027a6 <LoopForever>
  ldr   r0, =_estack
 80027a8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80027ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80027b0:	20000158 	.word	0x20000158
  ldr r2, =_sidata
 80027b4:	0801c794 	.word	0x0801c794
  ldr r2, =_sbss
 80027b8:	20000158 	.word	0x20000158
  ldr r4, =_ebss
 80027bc:	20002158 	.word	0x20002158

080027c0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80027c0:	e7fe      	b.n	80027c0 <ADC_IRQHandler>

080027c2 <BSP_RADIO_Init>:
/**
  * @brief  Init Radio Switch 
  * @retval BSP status
  */
int32_t BSP_RADIO_Init(void)
{
 80027c2:	b580      	push	{r7, lr}
 80027c4:	b086      	sub	sp, #24
 80027c6:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  gpio_init_structure = {0};
 80027c8:	1d3b      	adds	r3, r7, #4
 80027ca:	2200      	movs	r2, #0
 80027cc:	601a      	str	r2, [r3, #0]
 80027ce:	605a      	str	r2, [r3, #4]
 80027d0:	609a      	str	r2, [r3, #8]
 80027d2:	60da      	str	r2, [r3, #12]
 80027d4:	611a      	str	r2, [r3, #16]
  
  /* Configure the Radio Switch pin */
  gpio_init_structure.Pin   = RF_SW_CTRL1_PIN;
 80027d6:	2310      	movs	r3, #16
 80027d8:	607b      	str	r3, [r7, #4]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 80027da:	2301      	movs	r3, #1
 80027dc:	60bb      	str	r3, [r7, #8]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 80027de:	2300      	movs	r3, #0
 80027e0:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027e2:	2303      	movs	r3, #3
 80027e4:	613b      	str	r3, [r7, #16]
  
  HAL_GPIO_Init(RF_SW_CTRL1_GPIO_PORT, &gpio_init_structure);
 80027e6:	1d3b      	adds	r3, r7, #4
 80027e8:	4619      	mov	r1, r3
 80027ea:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80027ee:	f002 f8ff 	bl	80049f0 <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL2_PIN;
 80027f2:	2320      	movs	r3, #32
 80027f4:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(RF_SW_CTRL2_GPIO_PORT, &gpio_init_structure);
 80027f6:	1d3b      	adds	r3, r7, #4
 80027f8:	4619      	mov	r1, r3
 80027fa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80027fe:	f002 f8f7 	bl	80049f0 <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 8002802:	2200      	movs	r2, #0
 8002804:	2120      	movs	r1, #32
 8002806:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800280a:	f002 fb1f 	bl	8004e4c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 800280e:	2200      	movs	r2, #0
 8002810:	2110      	movs	r1, #16
 8002812:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002816:	f002 fb19 	bl	8004e4c <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 800281a:	2300      	movs	r3, #0
}
 800281c:	4618      	mov	r0, r3
 800281e:	3718      	adds	r7, #24
 8002820:	46bd      	mov	sp, r7
 8002822:	bd80      	pop	{r7, pc}

08002824 <BSP_RADIO_ConfigRFSwitch>:
  *           @arg RADIO_SWITCH_RFO_LP
  *           @arg RADIO_SWITCH_RFO_HP
  * @retval BSP status
  */
int32_t BSP_RADIO_ConfigRFSwitch(BSP_RADIO_Switch_TypeDef Config)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b082      	sub	sp, #8
 8002828:	af00      	add	r7, sp, #0
 800282a:	4603      	mov	r3, r0
 800282c:	71fb      	strb	r3, [r7, #7]
  switch (Config)
 800282e:	79fb      	ldrb	r3, [r7, #7]
 8002830:	2b03      	cmp	r3, #3
 8002832:	d83f      	bhi.n	80028b4 <BSP_RADIO_ConfigRFSwitch+0x90>
 8002834:	a201      	add	r2, pc, #4	@ (adr r2, 800283c <BSP_RADIO_ConfigRFSwitch+0x18>)
 8002836:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800283a:	bf00      	nop
 800283c:	0800284d 	.word	0x0800284d
 8002840:	08002867 	.word	0x08002867
 8002844:	08002881 	.word	0x08002881
 8002848:	0800289b 	.word	0x0800289b
  {
    case RADIO_SWITCH_OFF:
    {
      /* Turn off switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET);
 800284c:	2200      	movs	r2, #0
 800284e:	2110      	movs	r1, #16
 8002850:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002854:	f002 fafa 	bl	8004e4c <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET);
 8002858:	2200      	movs	r2, #0
 800285a:	2120      	movs	r1, #32
 800285c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002860:	f002 faf4 	bl	8004e4c <HAL_GPIO_WritePin>
      break;      
 8002864:	e027      	b.n	80028b6 <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RX:
    {
      /*Turns On in Rx Mode the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 8002866:	2201      	movs	r2, #1
 8002868:	2110      	movs	r1, #16
 800286a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800286e:	f002 faed 	bl	8004e4c <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 8002872:	2200      	movs	r2, #0
 8002874:	2120      	movs	r1, #32
 8002876:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800287a:	f002 fae7 	bl	8004e4c <HAL_GPIO_WritePin>
      break;
 800287e:	e01a      	b.n	80028b6 <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RFO_LP:
    {
      /*Turns On in Tx Low Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 8002880:	2201      	movs	r2, #1
 8002882:	2110      	movs	r1, #16
 8002884:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002888:	f002 fae0 	bl	8004e4c <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 800288c:	2201      	movs	r2, #1
 800288e:	2120      	movs	r1, #32
 8002890:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002894:	f002 fada 	bl	8004e4c <HAL_GPIO_WritePin>
      break;
 8002898:	e00d      	b.n	80028b6 <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RFO_HP:
    {
      /*Turns On in Tx High Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 800289a:	2200      	movs	r2, #0
 800289c:	2110      	movs	r1, #16
 800289e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80028a2:	f002 fad3 	bl	8004e4c <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 80028a6:	2201      	movs	r2, #1
 80028a8:	2120      	movs	r1, #32
 80028aa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80028ae:	f002 facd 	bl	8004e4c <HAL_GPIO_WritePin>
      break;
 80028b2:	e000      	b.n	80028b6 <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    default:
      break;    
 80028b4:	bf00      	nop
  }  

  return BSP_ERROR_NONE;
 80028b6:	2300      	movs	r3, #0
}
 80028b8:	4618      	mov	r0, r3
 80028ba:	3708      	adds	r7, #8
 80028bc:	46bd      	mov	sp, r7
 80028be:	bd80      	pop	{r7, pc}

080028c0 <BSP_RADIO_GetTxConfig>:
  *  RADIO_CONF_RFO_LP_HP
  *  RADIO_CONF_RFO_LP
  *  RADIO_CONF_RFO_HP
  */
int32_t BSP_RADIO_GetTxConfig(void)
{
 80028c0:	b480      	push	{r7}
 80028c2:	af00      	add	r7, sp, #0
  return RADIO_CONF_RFO_HP;
 80028c4:	2302      	movs	r3, #2
}
 80028c6:	4618      	mov	r0, r3
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bc80      	pop	{r7}
 80028cc:	4770      	bx	lr

080028ce <BSP_RADIO_IsTCXO>:
  * @retval
  *  RADIO_CONF_TCXO_NOT_SUPPORTED
  *  RADIO_CONF_TCXO_SUPPORTED
  */
int32_t BSP_RADIO_IsTCXO(void)
{
 80028ce:	b480      	push	{r7}
 80028d0:	af00      	add	r7, sp, #0
  return RADIO_CONF_TCXO_SUPPORTED;
 80028d2:	2301      	movs	r3, #1
}
 80028d4:	4618      	mov	r0, r3
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bc80      	pop	{r7}
 80028da:	4770      	bx	lr

080028dc <BSP_RADIO_IsDCDC>:
  * @retval
  *  RADIO_CONF_DCDC_NOT_SUPPORTED
  *  RADIO_CONF_DCDC_SUPPORTED  
  */
int32_t BSP_RADIO_IsDCDC(void)
{
 80028dc:	b480      	push	{r7}
 80028de:	af00      	add	r7, sp, #0
  return RADIO_CONF_DCDC_SUPPORTED;
 80028e0:	2301      	movs	r3, #1
}
 80028e2:	4618      	mov	r0, r3
 80028e4:	46bd      	mov	sp, r7
 80028e6:	bc80      	pop	{r7}
 80028e8:	4770      	bx	lr

080028ea <BSP_RADIO_GetRFOMaxPowerConfig>:
  * @retval
  *    RADIO_CONF_RFO_LP_MAX_15_dBm for LP mode
  *    RADIO_CONF_RFO_HP_MAX_22_dBm for HP mode
  */
int32_t BSP_RADIO_GetRFOMaxPowerConfig(BSP_RADIO_RFOMaxPowerConfig_TypeDef Config)
{
 80028ea:	b480      	push	{r7}
 80028ec:	b085      	sub	sp, #20
 80028ee:	af00      	add	r7, sp, #0
 80028f0:	4603      	mov	r3, r0
 80028f2:	71fb      	strb	r3, [r7, #7]
  int32_t ret;

  if(Config == RADIO_RFO_LP_MAXPOWER)
 80028f4:	79fb      	ldrb	r3, [r7, #7]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d102      	bne.n	8002900 <BSP_RADIO_GetRFOMaxPowerConfig+0x16>
  {
    ret = RADIO_CONF_RFO_LP_MAX_15_dBm;
 80028fa:	230f      	movs	r3, #15
 80028fc:	60fb      	str	r3, [r7, #12]
 80028fe:	e001      	b.n	8002904 <BSP_RADIO_GetRFOMaxPowerConfig+0x1a>
  }
  else
  {
    ret = RADIO_CONF_RFO_HP_MAX_22_dBm;
 8002900:	2316      	movs	r3, #22
 8002902:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8002904:	68fb      	ldr	r3, [r7, #12]
}
 8002906:	4618      	mov	r0, r3
 8002908:	3714      	adds	r7, #20
 800290a:	46bd      	mov	sp, r7
 800290c:	bc80      	pop	{r7}
 800290e:	4770      	bx	lr

08002910 <LL_DBGMCU_DisableDBGSleepMode>:
{
 8002910:	b480      	push	{r7}
 8002912:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8002914:	4b04      	ldr	r3, [pc, #16]	@ (8002928 <LL_DBGMCU_DisableDBGSleepMode+0x18>)
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	4a03      	ldr	r2, [pc, #12]	@ (8002928 <LL_DBGMCU_DisableDBGSleepMode+0x18>)
 800291a:	f023 0301 	bic.w	r3, r3, #1
 800291e:	6053      	str	r3, [r2, #4]
}
 8002920:	bf00      	nop
 8002922:	46bd      	mov	sp, r7
 8002924:	bc80      	pop	{r7}
 8002926:	4770      	bx	lr
 8002928:	e0042000 	.word	0xe0042000

0800292c <LL_DBGMCU_DisableDBGStopMode>:
{
 800292c:	b480      	push	{r7}
 800292e:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8002930:	4b04      	ldr	r3, [pc, #16]	@ (8002944 <LL_DBGMCU_DisableDBGStopMode+0x18>)
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	4a03      	ldr	r2, [pc, #12]	@ (8002944 <LL_DBGMCU_DisableDBGStopMode+0x18>)
 8002936:	f023 0302 	bic.w	r3, r3, #2
 800293a:	6053      	str	r3, [r2, #4]
}
 800293c:	bf00      	nop
 800293e:	46bd      	mov	sp, r7
 8002940:	bc80      	pop	{r7}
 8002942:	4770      	bx	lr
 8002944:	e0042000 	.word	0xe0042000

08002948 <LL_DBGMCU_DisableDBGStandbyMode>:
{
 8002948:	b480      	push	{r7}
 800294a:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 800294c:	4b04      	ldr	r3, [pc, #16]	@ (8002960 <LL_DBGMCU_DisableDBGStandbyMode+0x18>)
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	4a03      	ldr	r2, [pc, #12]	@ (8002960 <LL_DBGMCU_DisableDBGStandbyMode+0x18>)
 8002952:	f023 0304 	bic.w	r3, r3, #4
 8002956:	6053      	str	r3, [r2, #4]
}
 8002958:	bf00      	nop
 800295a:	46bd      	mov	sp, r7
 800295c:	bc80      	pop	{r7}
 800295e:	4770      	bx	lr
 8002960:	e0042000 	.word	0xe0042000

08002964 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b082      	sub	sp, #8
 8002968:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800296a:	2300      	movs	r3, #0
 800296c:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800296e:	2003      	movs	r0, #3
 8002970:	f001 f9b0 	bl	8003cd4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002974:	f003 fb46 	bl	8006004 <HAL_RCC_GetHCLKFreq>
 8002978:	4603      	mov	r3, r0
 800297a:	4a09      	ldr	r2, [pc, #36]	@ (80029a0 <HAL_Init+0x3c>)
 800297c:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800297e:	200f      	movs	r0, #15
 8002980:	f7ff f9a8 	bl	8001cd4 <HAL_InitTick>
 8002984:	4603      	mov	r3, r0
 8002986:	2b00      	cmp	r3, #0
 8002988:	d002      	beq.n	8002990 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 800298a:	2301      	movs	r3, #1
 800298c:	71fb      	strb	r3, [r7, #7]
 800298e:	e001      	b.n	8002994 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002990:	f7fe ff6b 	bl	800186a <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002994:	79fb      	ldrb	r3, [r7, #7]
}
 8002996:	4618      	mov	r0, r3
 8002998:	3708      	adds	r7, #8
 800299a:	46bd      	mov	sp, r7
 800299c:	bd80      	pop	{r7, pc}
 800299e:	bf00      	nop
 80029a0:	20000000 	.word	0x20000000

080029a4 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 80029a4:	b480      	push	{r7}
 80029a6:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 80029a8:	4b04      	ldr	r3, [pc, #16]	@ (80029bc <HAL_SuspendTick+0x18>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a03      	ldr	r2, [pc, #12]	@ (80029bc <HAL_SuspendTick+0x18>)
 80029ae:	f023 0302 	bic.w	r3, r3, #2
 80029b2:	6013      	str	r3, [r2, #0]
}
 80029b4:	bf00      	nop
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bc80      	pop	{r7}
 80029ba:	4770      	bx	lr
 80029bc:	e000e010 	.word	0xe000e010

080029c0 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 80029c0:	b480      	push	{r7}
 80029c2:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 80029c4:	4b04      	ldr	r3, [pc, #16]	@ (80029d8 <HAL_ResumeTick+0x18>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4a03      	ldr	r2, [pc, #12]	@ (80029d8 <HAL_ResumeTick+0x18>)
 80029ca:	f043 0302 	orr.w	r3, r3, #2
 80029ce:	6013      	str	r3, [r2, #0]
}
 80029d0:	bf00      	nop
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bc80      	pop	{r7}
 80029d6:	4770      	bx	lr
 80029d8:	e000e010 	.word	0xe000e010

080029dc <HAL_GetUIDw0>:
/**
  * @brief  Return the first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 80029dc:	b480      	push	{r7}
 80029de:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID_BASE)));
 80029e0:	4b02      	ldr	r3, [pc, #8]	@ (80029ec <HAL_GetUIDw0+0x10>)
 80029e2:	681b      	ldr	r3, [r3, #0]
}
 80029e4:	4618      	mov	r0, r3
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bc80      	pop	{r7}
 80029ea:	4770      	bx	lr
 80029ec:	1fff7590 	.word	0x1fff7590

080029f0 <HAL_GetUIDw1>:
/**
  * @brief  Return the second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 80029f0:	b480      	push	{r7}
 80029f2:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 80029f4:	4b02      	ldr	r3, [pc, #8]	@ (8002a00 <HAL_GetUIDw1+0x10>)
 80029f6:	681b      	ldr	r3, [r3, #0]
}
 80029f8:	4618      	mov	r0, r3
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bc80      	pop	{r7}
 80029fe:	4770      	bx	lr
 8002a00:	1fff7594 	.word	0x1fff7594

08002a04 <HAL_GetUIDw2>:
/**
  * @brief  Return the third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 8002a04:	b480      	push	{r7}
 8002a06:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 8002a08:	4b02      	ldr	r3, [pc, #8]	@ (8002a14 <HAL_GetUIDw2+0x10>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
}
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bc80      	pop	{r7}
 8002a12:	4770      	bx	lr
 8002a14:	1fff7598 	.word	0x1fff7598

08002a18 <HAL_DBGMCU_DisableDBGSleepMode>:
/**
  * @brief  Disable the CPU1 Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGSleepMode(void)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	af00      	add	r7, sp, #0
  LL_DBGMCU_DisableDBGSleepMode();
 8002a1c:	f7ff ff78 	bl	8002910 <LL_DBGMCU_DisableDBGSleepMode>
}
 8002a20:	bf00      	nop
 8002a22:	bd80      	pop	{r7, pc}

08002a24 <HAL_DBGMCU_DisableDBGStopMode>:
/**
  * @brief  Disable the CPU1 Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStopMode(void)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	af00      	add	r7, sp, #0
  LL_DBGMCU_DisableDBGStopMode();
 8002a28:	f7ff ff80 	bl	800292c <LL_DBGMCU_DisableDBGStopMode>
}
 8002a2c:	bf00      	nop
 8002a2e:	bd80      	pop	{r7, pc}

08002a30 <HAL_DBGMCU_DisableDBGStandbyMode>:
/**
  * @brief  Disable the CPU1 Debug Module during STANDBY mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStandbyMode(void)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	af00      	add	r7, sp, #0
  LL_DBGMCU_DisableDBGStandbyMode();
 8002a34:	f7ff ff88 	bl	8002948 <LL_DBGMCU_DisableDBGStandbyMode>
}
 8002a38:	bf00      	nop
 8002a3a:	bd80      	pop	{r7, pc}

08002a3c <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	b083      	sub	sp, #12
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
 8002a44:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	431a      	orrs	r2, r3
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	601a      	str	r2, [r3, #0]
}
 8002a56:	bf00      	nop
 8002a58:	370c      	adds	r7, #12
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bc80      	pop	{r7}
 8002a5e:	4770      	bx	lr

08002a60 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002a60:	b480      	push	{r7}
 8002a62:	b083      	sub	sp, #12
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002a70:	4618      	mov	r0, r3
 8002a72:	370c      	adds	r7, #12
 8002a74:	46bd      	mov	sp, r7
 8002a76:	bc80      	pop	{r7}
 8002a78:	4770      	bx	lr

08002a7a <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8002a7a:	b480      	push	{r7}
 8002a7c:	b085      	sub	sp, #20
 8002a7e:	af00      	add	r7, sp, #0
 8002a80:	60f8      	str	r0, [r7, #12]
 8002a82:	60b9      	str	r1, [r7, #8]
 8002a84:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	695a      	ldr	r2, [r3, #20]
 8002a8a:	68bb      	ldr	r3, [r7, #8]
 8002a8c:	f003 0304 	and.w	r3, r3, #4
 8002a90:	2107      	movs	r1, #7
 8002a92:	fa01 f303 	lsl.w	r3, r1, r3
 8002a96:	43db      	mvns	r3, r3
 8002a98:	401a      	ands	r2, r3
 8002a9a:	68bb      	ldr	r3, [r7, #8]
 8002a9c:	f003 0304 	and.w	r3, r3, #4
 8002aa0:	6879      	ldr	r1, [r7, #4]
 8002aa2:	fa01 f303 	lsl.w	r3, r1, r3
 8002aa6:	431a      	orrs	r2, r3
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8002aac:	bf00      	nop
 8002aae:	3714      	adds	r7, #20
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	bc80      	pop	{r7}
 8002ab4:	4770      	bx	lr

08002ab6 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8002ab6:	b480      	push	{r7}
 8002ab8:	b083      	sub	sp, #12
 8002aba:	af00      	add	r7, sp, #0
 8002abc:	6078      	str	r0, [r7, #4]
 8002abe:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	695a      	ldr	r2, [r3, #20]
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	f003 0304 	and.w	r3, r3, #4
 8002aca:	2107      	movs	r1, #7
 8002acc:	fa01 f303 	lsl.w	r3, r1, r3
 8002ad0:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	f003 0304 	and.w	r3, r3, #4
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8002ad8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002adc:	4618      	mov	r0, r3
 8002ade:	370c      	adds	r7, #12
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	bc80      	pop	{r7}
 8002ae4:	4770      	bx	lr

08002ae6 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002ae6:	b480      	push	{r7}
 8002ae8:	b083      	sub	sp, #12
 8002aea:	af00      	add	r7, sp, #0
 8002aec:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	68db      	ldr	r3, [r3, #12]
 8002af2:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d101      	bne.n	8002afe <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002afa:	2301      	movs	r3, #1
 8002afc:	e000      	b.n	8002b00 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002afe:	2300      	movs	r3, #0
}
 8002b00:	4618      	mov	r0, r3
 8002b02:	370c      	adds	r7, #12
 8002b04:	46bd      	mov	sp, r7
 8002b06:	bc80      	pop	{r7}
 8002b08:	4770      	bx	lr

08002b0a <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002b0a:	b480      	push	{r7}
 8002b0c:	b085      	sub	sp, #20
 8002b0e:	af00      	add	r7, sp, #0
 8002b10:	60f8      	str	r0, [r7, #12]
 8002b12:	60b9      	str	r1, [r7, #8]
 8002b14:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002b1a:	68bb      	ldr	r3, [r7, #8]
 8002b1c:	f003 031f 	and.w	r3, r3, #31
 8002b20:	210f      	movs	r1, #15
 8002b22:	fa01 f303 	lsl.w	r3, r1, r3
 8002b26:	43db      	mvns	r3, r3
 8002b28:	401a      	ands	r2, r3
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	0e9b      	lsrs	r3, r3, #26
 8002b2e:	f003 010f 	and.w	r1, r3, #15
 8002b32:	68bb      	ldr	r3, [r7, #8]
 8002b34:	f003 031f 	and.w	r3, r3, #31
 8002b38:	fa01 f303 	lsl.w	r3, r1, r3
 8002b3c:	431a      	orrs	r2, r3
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002b42:	bf00      	nop
 8002b44:	3714      	adds	r7, #20
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bc80      	pop	{r7}
 8002b4a:	4770      	bx	lr

08002b4c <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	b083      	sub	sp, #12
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
 8002b54:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8002b60:	431a      	orrs	r2, r3
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002b66:	bf00      	nop
 8002b68:	370c      	adds	r7, #12
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bc80      	pop	{r7}
 8002b6e:	4770      	bx	lr

08002b70 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8002b70:	b480      	push	{r7}
 8002b72:	b083      	sub	sp, #12
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
 8002b78:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8002b84:	43db      	mvns	r3, r3
 8002b86:	401a      	ands	r2, r3
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002b8c:	bf00      	nop
 8002b8e:	370c      	adds	r7, #12
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bc80      	pop	{r7}
 8002b94:	4770      	bx	lr

08002b96 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8002b96:	b480      	push	{r7}
 8002b98:	b085      	sub	sp, #20
 8002b9a:	af00      	add	r7, sp, #0
 8002b9c:	60f8      	str	r0, [r7, #12]
 8002b9e:	60b9      	str	r1, [r7, #8]
 8002ba0:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	695a      	ldr	r2, [r3, #20]
 8002ba6:	68bb      	ldr	r3, [r7, #8]
 8002ba8:	021b      	lsls	r3, r3, #8
 8002baa:	43db      	mvns	r3, r3
 8002bac:	401a      	ands	r2, r3
 8002bae:	68bb      	ldr	r3, [r7, #8]
 8002bb0:	0219      	lsls	r1, r3, #8
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	400b      	ands	r3, r1
 8002bb6:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 8002bba:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002bbe:	431a      	orrs	r2, r3
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8002bc4:	bf00      	nop
 8002bc6:	3714      	adds	r7, #20
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	bc80      	pop	{r7}
 8002bcc:	4770      	bx	lr

08002bce <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002bce:	b480      	push	{r7}
 8002bd0:	b083      	sub	sp, #12
 8002bd2:	af00      	add	r7, sp, #0
 8002bd4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	689b      	ldr	r3, [r3, #8]
 8002bda:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8002bde:	f023 0317 	bic.w	r3, r3, #23
 8002be2:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002bea:	bf00      	nop
 8002bec:	370c      	adds	r7, #12
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bc80      	pop	{r7}
 8002bf2:	4770      	bx	lr

08002bf4 <LL_ADC_DisableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_DisableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	b083      	sub	sp, #12
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->CR, (ADC_CR_ADVREGEN | ADC_CR_BITS_PROPERTY_RS));
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	689b      	ldr	r3, [r3, #8]
 8002c00:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8002c04:	f023 0317 	bic.w	r3, r3, #23
 8002c08:	687a      	ldr	r2, [r7, #4]
 8002c0a:	6093      	str	r3, [r2, #8]
}
 8002c0c:	bf00      	nop
 8002c0e:	370c      	adds	r7, #12
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bc80      	pop	{r7}
 8002c14:	4770      	bx	lr

08002c16 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002c16:	b480      	push	{r7}
 8002c18:	b083      	sub	sp, #12
 8002c1a:	af00      	add	r7, sp, #0
 8002c1c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	689b      	ldr	r3, [r3, #8]
 8002c22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c26:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002c2a:	d101      	bne.n	8002c30 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	e000      	b.n	8002c32 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002c30:	2300      	movs	r3, #0
}
 8002c32:	4618      	mov	r0, r3
 8002c34:	370c      	adds	r7, #12
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bc80      	pop	{r7}
 8002c3a:	4770      	bx	lr

08002c3c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	b083      	sub	sp, #12
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	689b      	ldr	r3, [r3, #8]
 8002c48:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002c4c:	f023 0317 	bic.w	r3, r3, #23
 8002c50:	f043 0201 	orr.w	r2, r3, #1
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002c58:	bf00      	nop
 8002c5a:	370c      	adds	r7, #12
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bc80      	pop	{r7}
 8002c60:	4770      	bx	lr

08002c62 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002c62:	b480      	push	{r7}
 8002c64:	b083      	sub	sp, #12
 8002c66:	af00      	add	r7, sp, #0
 8002c68:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	689b      	ldr	r3, [r3, #8]
 8002c6e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002c72:	f023 0317 	bic.w	r3, r3, #23
 8002c76:	f043 0202 	orr.w	r2, r3, #2
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002c7e:	bf00      	nop
 8002c80:	370c      	adds	r7, #12
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bc80      	pop	{r7}
 8002c86:	4770      	bx	lr

08002c88 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	b083      	sub	sp, #12
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	689b      	ldr	r3, [r3, #8]
 8002c94:	f003 0301 	and.w	r3, r3, #1
 8002c98:	2b01      	cmp	r3, #1
 8002c9a:	d101      	bne.n	8002ca0 <LL_ADC_IsEnabled+0x18>
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	e000      	b.n	8002ca2 <LL_ADC_IsEnabled+0x1a>
 8002ca0:	2300      	movs	r3, #0
}
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	370c      	adds	r7, #12
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bc80      	pop	{r7}
 8002caa:	4770      	bx	lr

08002cac <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8002cac:	b480      	push	{r7}
 8002cae:	b083      	sub	sp, #12
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	689b      	ldr	r3, [r3, #8]
 8002cb8:	f003 0302 	and.w	r3, r3, #2
 8002cbc:	2b02      	cmp	r3, #2
 8002cbe:	d101      	bne.n	8002cc4 <LL_ADC_IsDisableOngoing+0x18>
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	e000      	b.n	8002cc6 <LL_ADC_IsDisableOngoing+0x1a>
 8002cc4:	2300      	movs	r3, #0
}
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	370c      	adds	r7, #12
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bc80      	pop	{r7}
 8002cce:	4770      	bx	lr

08002cd0 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	b083      	sub	sp, #12
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	689b      	ldr	r3, [r3, #8]
 8002cdc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002ce0:	f023 0317 	bic.w	r3, r3, #23
 8002ce4:	f043 0204 	orr.w	r2, r3, #4
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002cec:	bf00      	nop
 8002cee:	370c      	adds	r7, #12
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	bc80      	pop	{r7}
 8002cf4:	4770      	bx	lr

08002cf6 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8002cf6:	b480      	push	{r7}
 8002cf8:	b083      	sub	sp, #12
 8002cfa:	af00      	add	r7, sp, #0
 8002cfc:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	689b      	ldr	r3, [r3, #8]
 8002d02:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002d06:	f023 0317 	bic.w	r3, r3, #23
 8002d0a:	f043 0210 	orr.w	r2, r3, #16
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8002d12:	bf00      	nop
 8002d14:	370c      	adds	r7, #12
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bc80      	pop	{r7}
 8002d1a:	4770      	bx	lr

08002d1c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	b083      	sub	sp, #12
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	689b      	ldr	r3, [r3, #8]
 8002d28:	f003 0304 	and.w	r3, r3, #4
 8002d2c:	2b04      	cmp	r3, #4
 8002d2e:	d101      	bne.n	8002d34 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002d30:	2301      	movs	r3, #1
 8002d32:	e000      	b.n	8002d36 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002d34:	2300      	movs	r3, #0
}
 8002d36:	4618      	mov	r0, r3
 8002d38:	370c      	adds	r7, #12
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bc80      	pop	{r7}
 8002d3e:	4770      	bx	lr

08002d40 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b088      	sub	sp, #32
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d48:	2300      	movs	r3, #0
 8002d4a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR1 = 0UL;
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8002d50:	2300      	movs	r3, #0
 8002d52:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002d54:	2300      	movs	r3, #0
 8002d56:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if (hadc == NULL)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d101      	bne.n	8002d62 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002d5e:	2301      	movs	r3, #1
 8002d60:	e19e      	b.n	80030a0 <HAL_ADC_Init+0x360>
    assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
    assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
  }
  assert_param(IS_ADC_TRIGGER_FREQ(hadc->Init.TriggerFrequencyMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	691b      	ldr	r3, [r3, #16]
 8002d66:	2b00      	cmp	r3, #0
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d109      	bne.n	8002d84 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002d70:	6878      	ldr	r0, [r7, #4]
 8002d72:	f7fe f909 	bl	8000f88 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2200      	movs	r2, #0
 8002d7a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2200      	movs	r2, #0
 8002d80:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4618      	mov	r0, r3
 8002d8a:	f7ff ff44 	bl	8002c16 <LL_ADC_IsInternalRegulatorEnabled>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d115      	bne.n	8002dc0 <HAL_ADC_Init+0x80>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4618      	mov	r0, r3
 8002d9a:	f7ff ff18 	bl	8002bce <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002d9e:	4b99      	ldr	r3, [pc, #612]	@ (8003004 <HAL_ADC_Init+0x2c4>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	099b      	lsrs	r3, r3, #6
 8002da4:	4a98      	ldr	r2, [pc, #608]	@ (8003008 <HAL_ADC_Init+0x2c8>)
 8002da6:	fba2 2303 	umull	r2, r3, r2, r3
 8002daa:	099b      	lsrs	r3, r3, #6
 8002dac:	3301      	adds	r3, #1
 8002dae:	005b      	lsls	r3, r3, #1
 8002db0:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002db2:	e002      	b.n	8002dba <HAL_ADC_Init+0x7a>
    {
      wait_loop_index--;
 8002db4:	68bb      	ldr	r3, [r7, #8]
 8002db6:	3b01      	subs	r3, #1
 8002db8:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002dba:	68bb      	ldr	r3, [r7, #8]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d1f9      	bne.n	8002db4 <HAL_ADC_Init+0x74>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	f7ff ff26 	bl	8002c16 <LL_ADC_IsInternalRegulatorEnabled>
 8002dca:	4603      	mov	r3, r0
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d10d      	bne.n	8002dec <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002dd4:	f043 0210 	orr.w	r2, r3, #16
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002de0:	f043 0201 	orr.w	r2, r3, #1
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002de8:	2301      	movs	r3, #1
 8002dea:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4618      	mov	r0, r3
 8002df2:	f7ff ff93 	bl	8002d1c <LL_ADC_REG_IsConversionOngoing>
 8002df6:	60f8      	str	r0, [r7, #12]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002dfc:	f003 0310 	and.w	r3, r3, #16
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	f040 8144 	bne.w	800308e <HAL_ADC_Init+0x34e>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	f040 8140 	bne.w	800308e <HAL_ADC_Init+0x34e>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e12:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002e16:	f043 0202 	orr.w	r2, r3, #2
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4618      	mov	r0, r3
 8002e24:	f7ff ff30 	bl	8002c88 <LL_ADC_IsEnabled>
 8002e28:	4603      	mov	r3, r0
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	f040 80a7 	bne.w	8002f7e <HAL_ADC_Init+0x23e>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	7e1b      	ldrb	r3, [r3, #24]
 8002e38:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8002e3a:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	7e5b      	ldrb	r3, [r3, #25]
 8002e40:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8002e42:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	7e9b      	ldrb	r3, [r3, #26]
 8002e48:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8002e4a:	4313      	orrs	r3, r2
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8002e4c:	687a      	ldr	r2, [r7, #4]
 8002e4e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002e50:	2a00      	cmp	r2, #0
 8002e52:	d002      	beq.n	8002e5a <HAL_ADC_Init+0x11a>
 8002e54:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002e58:	e000      	b.n	8002e5c <HAL_ADC_Init+0x11c>
 8002e5a:	2200      	movs	r2, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8002e5c:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8002e62:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	691b      	ldr	r3, [r3, #16]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	da04      	bge.n	8002e76 <HAL_ADC_Init+0x136>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	691b      	ldr	r3, [r3, #16]
 8002e70:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002e74:	e001      	b.n	8002e7a <HAL_ADC_Init+0x13a>
 8002e76:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
                   hadc->Init.DataAlign                                           |
 8002e7a:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8002e82:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8002e84:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8002e86:	69ba      	ldr	r2, [r7, #24]
 8002e88:	4313      	orrs	r3, r2
 8002e8a:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002e92:	2b01      	cmp	r3, #1
 8002e94:	d114      	bne.n	8002ec0 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	7e9b      	ldrb	r3, [r3, #26]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d104      	bne.n	8002ea8 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8002e9e:	69bb      	ldr	r3, [r7, #24]
 8002ea0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ea4:	61bb      	str	r3, [r7, #24]
 8002ea6:	e00b      	b.n	8002ec0 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002eac:	f043 0220 	orr.w	r2, r3, #32
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002eb8:	f043 0201 	orr.w	r2, r3, #1
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d009      	beq.n	8002edc <HAL_ADC_Init+0x19c>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ecc:	f403 72e0 	and.w	r2, r3, #448	@ 0x1c0
                     hadc->Init.ExternalTrigConvEdge);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8002ed4:	4313      	orrs	r3, r2
 8002ed6:	69ba      	ldr	r2, [r7, #24]
 8002ed8:	4313      	orrs	r3, r2
 8002eda:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	68db      	ldr	r3, [r3, #12]
 8002ee2:	f423 33fe 	bic.w	r3, r3, #130048	@ 0x1fc00
 8002ee6:	f423 73ff 	bic.w	r3, r3, #510	@ 0x1fe
 8002eea:	687a      	ldr	r2, [r7, #4]
 8002eec:	6812      	ldr	r2, [r2, #0]
 8002eee:	69b9      	ldr	r1, [r7, #24]
 8002ef0:	430b      	orrs	r3, r1
 8002ef2:	60d3      	str	r3, [r2, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	f003 4240 	and.w	r2, r3, #3221225472	@ 0xc0000000
                   hadc->Init.TriggerFrequencyMode
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002f00:	4313      	orrs	r3, r2
 8002f02:	697a      	ldr	r2, [r7, #20]
 8002f04:	4313      	orrs	r3, r2
 8002f06:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002f0e:	2b01      	cmp	r3, #1
 8002f10:	d111      	bne.n	8002f36 <HAL_ADC_Init+0x1f6>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	685b      	ldr	r3, [r3, #4]
 8002f16:	f003 4240 	and.w	r2, r3, #3221225472	@ 0xc0000000
                     hadc->Init.Oversampling.Ratio         |
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002f1e:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                     hadc->Init.Oversampling.Ratio         |
 8002f24:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                     hadc->Init.Oversampling.RightBitShift |
 8002f2a:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8002f2c:	697b      	ldr	r3, [r7, #20]
 8002f2e:	4313      	orrs	r3, r2
 8002f30:	f043 0301 	orr.w	r3, r3, #1
 8002f34:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	691a      	ldr	r2, [r3, #16]
 8002f3c:	4b33      	ldr	r3, [pc, #204]	@ (800300c <HAL_ADC_Init+0x2cc>)
 8002f3e:	4013      	ands	r3, r2
 8002f40:	687a      	ldr	r2, [r7, #4]
 8002f42:	6812      	ldr	r2, [r2, #0]
 8002f44:	6979      	ldr	r1, [r7, #20]
 8002f46:	430b      	orrs	r3, r1
 8002f48:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8002f52:	d014      	beq.n	8002f7e <HAL_ADC_Init+0x23e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	685b      	ldr	r3, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8002f58:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f5c:	d00f      	beq.n	8002f7e <HAL_ADC_Init+0x23e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	685b      	ldr	r3, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8002f62:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002f66:	d00a      	beq.n	8002f7e <HAL_ADC_Init+0x23e>
      {
        MODIFY_REG(ADC_COMMON->CCR,
 8002f68:	4b29      	ldr	r3, [pc, #164]	@ (8003010 <HAL_ADC_Init+0x2d0>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f423 1270 	bic.w	r2, r3, #3932160	@ 0x3c0000
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 8002f78:	4925      	ldr	r1, [pc, #148]	@ (8003010 <HAL_ADC_Init+0x2d0>)
 8002f7a:	4313      	orrs	r3, r2
 8002f7c:	600b      	str	r3, [r1, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6818      	ldr	r0, [r3, #0]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f86:	461a      	mov	r2, r3
 8002f88:	2100      	movs	r1, #0
 8002f8a:	f7ff fd76 	bl	8002a7a <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6818      	ldr	r0, [r3, #0]
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f96:	461a      	mov	r2, r3
 8002f98:	491e      	ldr	r1, [pc, #120]	@ (8003014 <HAL_ADC_Init+0x2d4>)
 8002f9a:	f7ff fd6e 	bl	8002a7a <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	691b      	ldr	r3, [r3, #16]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d108      	bne.n	8002fb8 <HAL_ADC_Init+0x278>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f062 020f 	orn	r2, r2, #15
 8002fb4:	629a      	str	r2, [r3, #40]	@ 0x28
 8002fb6:	e042      	b.n	800303e <HAL_ADC_Init+0x2fe>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	691b      	ldr	r3, [r3, #16]
 8002fbc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002fc0:	d13d      	bne.n	800303e <HAL_ADC_Init+0x2fe>
    {
      /* Count number of ranks available in HAL ADC handle variable */
      uint32_t ADCGroupRegularSequencerRanksCount;

      /* Parse all ranks from 1 to 8 */
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	613b      	str	r3, [r7, #16]
 8002fc6:	e00c      	b.n	8002fe2 <HAL_ADC_Init+0x2a2>
      {
        /* Check each sequencer rank until value of end of sequence */
        if (((hadc->ADCGroupRegularSequencerRanks >> (ADCGroupRegularSequencerRanksCount * 4UL)) & ADC_CHSELR_SQ1) ==
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002fcc:	693b      	ldr	r3, [r7, #16]
 8002fce:	009b      	lsls	r3, r3, #2
 8002fd0:	fa22 f303 	lsr.w	r3, r2, r3
 8002fd4:	f003 030f 	and.w	r3, r3, #15
 8002fd8:	2b0f      	cmp	r3, #15
 8002fda:	d006      	beq.n	8002fea <HAL_ADC_Init+0x2aa>
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8002fdc:	693b      	ldr	r3, [r7, #16]
 8002fde:	3301      	adds	r3, #1
 8002fe0:	613b      	str	r3, [r7, #16]
 8002fe2:	693b      	ldr	r3, [r7, #16]
 8002fe4:	2b07      	cmp	r3, #7
 8002fe6:	d9ef      	bls.n	8002fc8 <HAL_ADC_Init+0x288>
 8002fe8:	e000      	b.n	8002fec <HAL_ADC_Init+0x2ac>
            ADC_CHSELR_SQ1)
        {
          break;
 8002fea:	bf00      	nop
        }
      }

      if (ADCGroupRegularSequencerRanksCount == 1UL)
 8002fec:	693b      	ldr	r3, [r7, #16]
 8002fee:	2b01      	cmp	r3, #1
 8002ff0:	d112      	bne.n	8003018 <HAL_ADC_Init+0x2d8>
      {
        /* Set ADC group regular sequencer:                                   */
        /* Set sequencer scan length by clearing ranks above rank 1           */
        /* and do not modify rank 1 value.                                    */
        SET_BIT(hadc->Instance->CHSELR,
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f062 020f 	orn	r2, r2, #15
 8003000:	629a      	str	r2, [r3, #40]	@ 0x28
 8003002:	e01c      	b.n	800303e <HAL_ADC_Init+0x2fe>
 8003004:	20000000 	.word	0x20000000
 8003008:	053e2d63 	.word	0x053e2d63
 800300c:	1ffffc02 	.word	0x1ffffc02
 8003010:	40012708 	.word	0x40012708
 8003014:	03ffff04 	.word	0x03ffff04
        /*          therefore after the first call of "HAL_ADC_Init()",       */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	69db      	ldr	r3, [r3, #28]
 8003022:	3b01      	subs	r3, #1
 8003024:	009b      	lsls	r3, r3, #2
 8003026:	f003 031c 	and.w	r3, r3, #28
 800302a:	f06f 020f 	mvn.w	r2, #15
 800302e:	fa02 f103 	lsl.w	r1, r2, r3
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	430a      	orrs	r2, r1
 800303c:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	2100      	movs	r1, #0
 8003044:	4618      	mov	r0, r3
 8003046:	f7ff fd36 	bl	8002ab6 <LL_ADC_GetSamplingTimeCommonChannels>
 800304a:	4602      	mov	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8003050:	429a      	cmp	r2, r3
 8003052:	d10b      	bne.n	800306c <HAL_ADC_Init+0x32c>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2200      	movs	r2, #0
 8003058:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800305e:	f023 0303 	bic.w	r3, r3, #3
 8003062:	f043 0201 	orr.w	r2, r3, #1
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	659a      	str	r2, [r3, #88]	@ 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800306a:	e018      	b.n	800309e <HAL_ADC_Init+0x35e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003070:	f023 0312 	bic.w	r3, r3, #18
 8003074:	f043 0210 	orr.w	r2, r3, #16
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003080:	f043 0201 	orr.w	r2, r3, #1
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 8003088:	2301      	movs	r3, #1
 800308a:	77fb      	strb	r3, [r7, #31]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800308c:	e007      	b.n	800309e <HAL_ADC_Init+0x35e>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003092:	f043 0210 	orr.w	r2, r3, #16
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800309a:	2301      	movs	r3, #1
 800309c:	77fb      	strb	r3, [r7, #31]
  }

  return tmp_hal_status;
 800309e:	7ffb      	ldrb	r3, [r7, #31]
}
 80030a0:	4618      	mov	r0, r3
 80030a2:	3720      	adds	r7, #32
 80030a4:	46bd      	mov	sp, r7
 80030a6:	bd80      	pop	{r7, pc}

080030a8 <HAL_ADC_DeInit>:
  *         common group is still running.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef *hadc)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b084      	sub	sp, #16
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check ADC handle */
  if (hadc == NULL)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d101      	bne.n	80030ba <HAL_ADC_DeInit+0x12>
  {
    return HAL_ERROR;
 80030b6:	2301      	movs	r3, #1
 80030b8:	e06a      	b.n	8003190 <HAL_ADC_DeInit+0xe8>

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030be:	f043 0202 	orr.w	r2, r3, #2
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Stop potential conversion on going, on regular group */
  tmp_hal_status = ADC_ConversionStop(hadc);
 80030c6:	6878      	ldr	r0, [r7, #4]
 80030c8:	f000 fabe 	bl	8003648 <ADC_ConversionStop>
 80030cc:	4603      	mov	r3, r0
 80030ce:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80030d0:	7bfb      	ldrb	r3, [r7, #15]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d10f      	bne.n	80030f6 <HAL_ADC_DeInit+0x4e>
  {
    /* Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80030d6:	6878      	ldr	r0, [r7, #4]
 80030d8:	f000 fb82 	bl	80037e0 <ADC_Disable>
 80030dc:	4603      	mov	r3, r0
 80030de:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80030e0:	7bfb      	ldrb	r3, [r7, #15]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d102      	bne.n	80030ec <HAL_ADC_DeInit+0x44>
    {
      /* Change ADC state */
      hadc->State = HAL_ADC_STATE_READY;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2201      	movs	r2, #1
 80030ea:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Disable ADC internal voltage regulator */
    LL_ADC_DisableInternalRegulator(hadc->Instance);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4618      	mov	r0, r3
 80030f2:	f7ff fd7f 	bl	8002bf4 <LL_ADC_DisableInternalRegulator>
  /*       in HAL_ADC_MspDeInit() to reset the ADC peripheral using           */
  /*       system RCC hard reset.                                             */

  /* ========== Reset ADC registers ========== */
  /* Reset register IER */
  __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD3  | ADC_IT_AWD2 |
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	687a      	ldr	r2, [r7, #4]
 80030fe:	6812      	ldr	r2, [r2, #0]
 8003100:	f423 7367 	bic.w	r3, r3, #924	@ 0x39c
 8003104:	f023 0303 	bic.w	r3, r3, #3
 8003108:	6053      	str	r3, [r2, #4]
                              ADC_IT_AWD1  | ADC_IT_OVR  |
                              ADC_IT_EOS   | ADC_IT_EOC  |
                              ADC_IT_EOSMP | ADC_IT_RDY));

  /* Reset register ISR */
  __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD3  | ADC_FLAG_AWD2 |
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f240 329f 	movw	r2, #927	@ 0x39f
 8003112:	601a      	str	r2, [r3, #0]
  /* Reset register CR */
  /* Bits ADC_CR_ADCAL, ADC_CR_ADSTP, ADC_CR_ADSTART are in access mode     */
  /* "read-set": no direct reset applicable.                                */

  /* Reset register CFGR1 */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_AWD1CH   | ADC_CFGR1_AWD1EN  | ADC_CFGR1_AWD1SGL | ADC_CFGR1_DISCEN |
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	68d9      	ldr	r1, [r3, #12]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681a      	ldr	r2, [r3, #0]
 800311e:	4b1e      	ldr	r3, [pc, #120]	@ (8003198 <HAL_ADC_DeInit+0xf0>)
 8003120:	400b      	ands	r3, r1
 8003122:	60d3      	str	r3, [r2, #12]
                             ADC_CFGR1_SCANDIR | ADC_CFGR1_DMACFG | ADC_CFGR1_DMAEN);

  /* Reset register CFGR2 */
  /* Note: Update of ADC clock mode is conditioned to ADC state disabled:   */
  /*       already done above.                                              */
  hadc->Instance->CFGR2 &= ~ADC_CFGR2_CKMODE;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	691a      	ldr	r2, [r3, #16]
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f022 4240 	bic.w	r2, r2, #3221225472	@ 0xc0000000
 8003132:	611a      	str	r2, [r3, #16]

  /* Reset register SMPR */
  hadc->Instance->SMPR &= ~ADC_SMPR_SMP1;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	695a      	ldr	r2, [r3, #20]
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f022 0207 	bic.w	r2, r2, #7
 8003142:	615a      	str	r2, [r3, #20]

  /* Reset register TR1 */
  hadc->Instance->TR1 &= ~(ADC_TR1_HT1 | ADC_TR1_LT1);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	6a1a      	ldr	r2, [r3, #32]
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f002 22f0 	and.w	r2, r2, #4026593280	@ 0xf000f000
 8003152:	621a      	str	r2, [r3, #32]

  /* Reset register CHSELR */
  hadc->Instance->CHSELR &= ~(ADC_CHSELR_SQ_ALL);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	2200      	movs	r2, #0
 8003160:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset register DR */
  /* bits in access mode read only, no direct reset applicable */

  /* Reset register CCR */
  ADC_COMMON->CCR &= ~(ADC_CCR_VBATEN | ADC_CCR_TSEN | ADC_CCR_VREFEN | ADC_CCR_PRESC);
 8003162:	4b0e      	ldr	r3, [pc, #56]	@ (800319c <HAL_ADC_DeInit+0xf4>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4a0d      	ldr	r2, [pc, #52]	@ (800319c <HAL_ADC_DeInit+0xf4>)
 8003168:	f023 73fe 	bic.w	r3, r3, #33292288	@ 0x1fc0000
 800316c:	6013      	str	r3, [r2, #0]

  /* DeInit the low level hardware */
  hadc->MspDeInitCallback(hadc);
#else
  /* DeInit the low level hardware */
  HAL_ADC_MspDeInit(hadc);
 800316e:	6878      	ldr	r0, [r7, #4]
 8003170:	f7fd ff1e 	bl	8000fb0 <HAL_ADC_MspDeInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

  /* Reset HAL ADC handle variable */
  hadc->ADCGroupRegularSequencerRanks = 0x00000000UL;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2200      	movs	r2, #0
 8003178:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Set ADC error code to none */
  ADC_CLEAR_ERRORCODE(hadc);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2200      	movs	r2, #0
 800317e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC state */
  hadc->State = HAL_ADC_STATE_RESET;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2200      	movs	r2, #0
 8003184:	659a      	str	r2, [r3, #88]	@ 0x58

  __HAL_UNLOCK(hadc);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2200      	movs	r2, #0
 800318a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return tmp_hal_status;
 800318e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003190:	4618      	mov	r0, r3
 8003192:	3710      	adds	r7, #16
 8003194:	46bd      	mov	sp, r7
 8003196:	bd80      	pop	{r7, pc}
 8003198:	833e0200 	.word	0x833e0200
 800319c:	40012708 	.word	0x40012708

080031a0 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b084      	sub	sp, #16
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4618      	mov	r0, r3
 80031ae:	f7ff fdb5 	bl	8002d1c <LL_ADC_REG_IsConversionOngoing>
 80031b2:	4603      	mov	r3, r0
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d132      	bne.n	800321e <HAL_ADC_Start+0x7e>
  {
    __HAL_LOCK(hadc);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80031be:	2b01      	cmp	r3, #1
 80031c0:	d101      	bne.n	80031c6 <HAL_ADC_Start+0x26>
 80031c2:	2302      	movs	r3, #2
 80031c4:	e02e      	b.n	8003224 <HAL_ADC_Start+0x84>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2201      	movs	r2, #1
 80031ca:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80031ce:	6878      	ldr	r0, [r7, #4]
 80031d0:	f000 fa80 	bl	80036d4 <ADC_Enable>
 80031d4:	4603      	mov	r3, r0
 80031d6:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80031d8:	7bfb      	ldrb	r3, [r7, #15]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d11a      	bne.n	8003214 <HAL_ADC_Start+0x74>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031e2:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80031e6:	f023 0301 	bic.w	r3, r3, #1
 80031ea:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2200      	movs	r2, #0
 80031f6:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	221c      	movs	r2, #28
 80031fe:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2200      	movs	r2, #0
 8003204:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4618      	mov	r0, r3
 800320e:	f7ff fd5f 	bl	8002cd0 <LL_ADC_REG_StartConversion>
 8003212:	e006      	b.n	8003222 <HAL_ADC_Start+0x82>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2200      	movs	r2, #0
 8003218:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
 800321c:	e001      	b.n	8003222 <HAL_ADC_Start+0x82>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800321e:	2302      	movs	r3, #2
 8003220:	73fb      	strb	r3, [r7, #15]
  }

  return tmp_hal_status;
 8003222:	7bfb      	ldrb	r3, [r7, #15]
}
 8003224:	4618      	mov	r0, r3
 8003226:	3710      	adds	r7, #16
 8003228:	46bd      	mov	sp, r7
 800322a:	bd80      	pop	{r7, pc}

0800322c <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b084      	sub	sp, #16
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800323a:	2b01      	cmp	r3, #1
 800323c:	d101      	bne.n	8003242 <HAL_ADC_Stop+0x16>
 800323e:	2302      	movs	r3, #2
 8003240:	e022      	b.n	8003288 <HAL_ADC_Stop+0x5c>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2201      	movs	r2, #1
 8003246:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 800324a:	6878      	ldr	r0, [r7, #4]
 800324c:	f000 f9fc 	bl	8003648 <ADC_ConversionStop>
 8003250:	4603      	mov	r3, r0
 8003252:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8003254:	7bfb      	ldrb	r3, [r7, #15]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d111      	bne.n	800327e <HAL_ADC_Stop+0x52>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 800325a:	6878      	ldr	r0, [r7, #4]
 800325c:	f000 fac0 	bl	80037e0 <ADC_Disable>
 8003260:	4603      	mov	r3, r0
 8003262:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8003264:	7bfb      	ldrb	r3, [r7, #15]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d109      	bne.n	800327e <HAL_ADC_Stop+0x52>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800326e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003272:	f023 0301 	bic.w	r3, r3, #1
 8003276:	f043 0201 	orr.w	r2, r3, #1
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_REG_BUSY,
                        HAL_ADC_STATE_READY);
    }
  }

  __HAL_UNLOCK(hadc);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2200      	movs	r2, #0
 8003282:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return tmp_hal_status;
 8003286:	7bfb      	ldrb	r3, [r7, #15]
}
 8003288:	4618      	mov	r0, r3
 800328a:	3710      	adds	r7, #16
 800328c:	46bd      	mov	sp, r7
 800328e:	bd80      	pop	{r7, pc}

08003290 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b084      	sub	sp, #16
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
 8003298:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	695b      	ldr	r3, [r3, #20]
 800329e:	2b08      	cmp	r3, #8
 80032a0:	d102      	bne.n	80032a8 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 80032a2:	2308      	movs	r3, #8
 80032a4:	60fb      	str	r3, [r7, #12]
 80032a6:	e010      	b.n	80032ca <HAL_ADC_PollForConversion+0x3a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	68db      	ldr	r3, [r3, #12]
 80032ae:	f003 0301 	and.w	r3, r3, #1
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d007      	beq.n	80032c6 <HAL_ADC_PollForConversion+0x36>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032ba:	f043 0220 	orr.w	r2, r3, #32
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 80032c2:	2301      	movs	r3, #1
 80032c4:	e077      	b.n	80033b6 <HAL_ADC_PollForConversion+0x126>
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 80032c6:	2304      	movs	r3, #4
 80032c8:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80032ca:	f7fe fd0d 	bl	8001ce8 <HAL_GetTick>
 80032ce:	60b8      	str	r0, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 80032d0:	e021      	b.n	8003316 <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032d8:	d01d      	beq.n	8003316 <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80032da:	f7fe fd05 	bl	8001ce8 <HAL_GetTick>
 80032de:	4602      	mov	r2, r0
 80032e0:	68bb      	ldr	r3, [r7, #8]
 80032e2:	1ad3      	subs	r3, r2, r3
 80032e4:	683a      	ldr	r2, [r7, #0]
 80032e6:	429a      	cmp	r2, r3
 80032e8:	d302      	bcc.n	80032f0 <HAL_ADC_PollForConversion+0x60>
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d112      	bne.n	8003316 <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	681a      	ldr	r2, [r3, #0]
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	4013      	ands	r3, r2
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d10b      	bne.n	8003316 <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003302:	f043 0204 	orr.w	r2, r3, #4
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	659a      	str	r2, [r3, #88]	@ 0x58

          __HAL_UNLOCK(hadc);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2200      	movs	r2, #0
 800330e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

          return HAL_TIMEOUT;
 8003312:	2303      	movs	r3, #3
 8003314:	e04f      	b.n	80033b6 <HAL_ADC_PollForConversion+0x126>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	681a      	ldr	r2, [r3, #0]
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	4013      	ands	r3, r2
 8003320:	2b00      	cmp	r3, #0
 8003322:	d0d6      	beq.n	80032d2 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003328:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4618      	mov	r0, r3
 8003336:	f7ff fbd6 	bl	8002ae6 <LL_ADC_REG_IsTriggerSourceSWStart>
 800333a:	4603      	mov	r3, r0
 800333c:	2b00      	cmp	r3, #0
 800333e:	d031      	beq.n	80033a4 <HAL_ADC_PollForConversion+0x114>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	7e9b      	ldrb	r3, [r3, #26]
 8003344:	2b00      	cmp	r3, #0
 8003346:	d12d      	bne.n	80033a4 <HAL_ADC_PollForConversion+0x114>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f003 0308 	and.w	r3, r3, #8
 8003352:	2b08      	cmp	r3, #8
 8003354:	d126      	bne.n	80033a4 <HAL_ADC_PollForConversion+0x114>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4618      	mov	r0, r3
 800335c:	f7ff fcde 	bl	8002d1c <LL_ADC_REG_IsConversionOngoing>
 8003360:	4603      	mov	r3, r0
 8003362:	2b00      	cmp	r3, #0
 8003364:	d112      	bne.n	800338c <HAL_ADC_PollForConversion+0xfc>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	685a      	ldr	r2, [r3, #4]
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f022 020c 	bic.w	r2, r2, #12
 8003374:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800337a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800337e:	f023 0301 	bic.w	r3, r3, #1
 8003382:	f043 0201 	orr.w	r2, r3, #1
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	659a      	str	r2, [r3, #88]	@ 0x58
 800338a:	e00b      	b.n	80033a4 <HAL_ADC_PollForConversion+0x114>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003390:	f043 0220 	orr.w	r2, r3, #32
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800339c:	f043 0201 	orr.w	r2, r3, #1
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	7e1b      	ldrb	r3, [r3, #24]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d103      	bne.n	80033b4 <HAL_ADC_PollForConversion+0x124>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	220c      	movs	r2, #12
 80033b2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80033b4:	2300      	movs	r3, #0
}
 80033b6:	4618      	mov	r0, r3
 80033b8:	3710      	adds	r7, #16
 80033ba:	46bd      	mov	sp, r7
 80033bc:	bd80      	pop	{r7, pc}

080033be <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80033be:	b480      	push	{r7}
 80033c0:	b083      	sub	sp, #12
 80033c2:	af00      	add	r7, sp, #0
 80033c4:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 80033cc:	4618      	mov	r0, r3
 80033ce:	370c      	adds	r7, #12
 80033d0:	46bd      	mov	sp, r7
 80033d2:	bc80      	pop	{r7}
 80033d4:	4770      	bx	lr
	...

080033d8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b088      	sub	sp, #32
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
 80033e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80033e2:	2300      	movs	r3, #0
 80033e4:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80033e6:	2300      	movs	r3, #0
 80033e8:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(pConfig->Channel));
  assert_param(IS_ADC_SAMPLING_TIME_COMMON(pConfig->SamplingTime));

  if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	691b      	ldr	r3, [r3, #16]
 80033ee:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80033f8:	2b01      	cmp	r3, #1
 80033fa:	d101      	bne.n	8003400 <HAL_ADC_ConfigChannel+0x28>
 80033fc:	2302      	movs	r3, #2
 80033fe:	e110      	b.n	8003622 <HAL_ADC_ConfigChannel+0x24a>
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2201      	movs	r2, #1
 8003404:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4618      	mov	r0, r3
 800340e:	f7ff fc85 	bl	8002d1c <LL_ADC_REG_IsConversionOngoing>
 8003412:	4603      	mov	r3, r0
 8003414:	2b00      	cmp	r3, #0
 8003416:	f040 80f7 	bne.w	8003608 <HAL_ADC_ConfigChannel+0x230>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	2b02      	cmp	r3, #2
 8003420:	f000 80b1 	beq.w	8003586 <HAL_ADC_ConfigChannel+0x1ae>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	691b      	ldr	r3, [r3, #16]
 8003428:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800342c:	d004      	beq.n	8003438 <HAL_ADC_ConfigChannel+0x60>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003432:	4a7e      	ldr	r2, [pc, #504]	@ (800362c <HAL_ADC_ConfigChannel+0x254>)
 8003434:	4293      	cmp	r3, r2
 8003436:	d108      	bne.n	800344a <HAL_ADC_ConfigChannel+0x72>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681a      	ldr	r2, [r3, #0]
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4619      	mov	r1, r3
 8003442:	4610      	mov	r0, r2
 8003444:	f7ff fb82 	bl	8002b4c <LL_ADC_REG_SetSequencerChAdd>
 8003448:	e041      	b.n	80034ce <HAL_ADC_ConfigChannel+0xf6>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	f003 031f 	and.w	r3, r3, #31
 8003456:	210f      	movs	r1, #15
 8003458:	fa01 f303 	lsl.w	r3, r1, r3
 800345c:	43db      	mvns	r3, r3
 800345e:	401a      	ands	r2, r3
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8003468:	2b00      	cmp	r3, #0
 800346a:	d105      	bne.n	8003478 <HAL_ADC_ConfigChannel+0xa0>
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	0e9b      	lsrs	r3, r3, #26
 8003472:	f003 031f 	and.w	r3, r3, #31
 8003476:	e011      	b.n	800349c <HAL_ADC_ConfigChannel+0xc4>
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800347e:	693b      	ldr	r3, [r7, #16]
 8003480:	fa93 f3a3 	rbit	r3, r3
 8003484:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800348a:	697b      	ldr	r3, [r7, #20]
 800348c:	2b00      	cmp	r3, #0
 800348e:	d101      	bne.n	8003494 <HAL_ADC_ConfigChannel+0xbc>
  {
    return 32U;
 8003490:	2320      	movs	r3, #32
 8003492:	e003      	b.n	800349c <HAL_ADC_ConfigChannel+0xc4>
  }
  return __builtin_clz(value);
 8003494:	697b      	ldr	r3, [r7, #20]
 8003496:	fab3 f383 	clz	r3, r3
 800349a:	b2db      	uxtb	r3, r3
 800349c:	6839      	ldr	r1, [r7, #0]
 800349e:	6849      	ldr	r1, [r1, #4]
 80034a0:	f001 011f 	and.w	r1, r1, #31
 80034a4:	408b      	lsls	r3, r1
 80034a6:	431a      	orrs	r2, r3
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	089b      	lsrs	r3, r3, #2
 80034b2:	1c5a      	adds	r2, r3, #1
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	69db      	ldr	r3, [r3, #28]
 80034b8:	429a      	cmp	r2, r3
 80034ba:	d808      	bhi.n	80034ce <HAL_ADC_ConfigChannel+0xf6>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6818      	ldr	r0, [r3, #0]
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	6859      	ldr	r1, [r3, #4]
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	461a      	mov	r2, r3
 80034ca:	f7ff fb1e 	bl	8002b0a <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6818      	ldr	r0, [r3, #0]
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	6819      	ldr	r1, [r3, #0]
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	689b      	ldr	r3, [r3, #8]
 80034da:	461a      	mov	r2, r3
 80034dc:	f7ff fb5b 	bl	8002b96 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	f280 8097 	bge.w	8003618 <HAL_ADC_ConfigChannel+0x240>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80034ea:	4851      	ldr	r0, [pc, #324]	@ (8003630 <HAL_ADC_ConfigChannel+0x258>)
 80034ec:	f7ff fab8 	bl	8002a60 <LL_ADC_GetCommonPathInternalCh>
 80034f0:	61b8      	str	r0, [r7, #24]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4a4f      	ldr	r2, [pc, #316]	@ (8003634 <HAL_ADC_ConfigChannel+0x25c>)
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d120      	bne.n	800353e <HAL_ADC_ConfigChannel+0x166>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80034fc:	69bb      	ldr	r3, [r7, #24]
 80034fe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003502:	2b00      	cmp	r3, #0
 8003504:	d11b      	bne.n	800353e <HAL_ADC_ConfigChannel+0x166>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003506:	69bb      	ldr	r3, [r7, #24]
 8003508:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800350c:	4619      	mov	r1, r3
 800350e:	4848      	ldr	r0, [pc, #288]	@ (8003630 <HAL_ADC_ConfigChannel+0x258>)
 8003510:	f7ff fa94 	bl	8002a3c <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003514:	4b48      	ldr	r3, [pc, #288]	@ (8003638 <HAL_ADC_ConfigChannel+0x260>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	099b      	lsrs	r3, r3, #6
 800351a:	4a48      	ldr	r2, [pc, #288]	@ (800363c <HAL_ADC_ConfigChannel+0x264>)
 800351c:	fba2 2303 	umull	r2, r3, r2, r3
 8003520:	099b      	lsrs	r3, r3, #6
 8003522:	1c5a      	adds	r2, r3, #1
 8003524:	4613      	mov	r3, r2
 8003526:	005b      	lsls	r3, r3, #1
 8003528:	4413      	add	r3, r2
 800352a:	009b      	lsls	r3, r3, #2
 800352c:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800352e:	e002      	b.n	8003536 <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 8003530:	68bb      	ldr	r3, [r7, #8]
 8003532:	3b01      	subs	r3, #1
 8003534:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003536:	68bb      	ldr	r3, [r7, #8]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d1f9      	bne.n	8003530 <HAL_ADC_ConfigChannel+0x158>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800353c:	e06c      	b.n	8003618 <HAL_ADC_ConfigChannel+0x240>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4a3f      	ldr	r2, [pc, #252]	@ (8003640 <HAL_ADC_ConfigChannel+0x268>)
 8003544:	4293      	cmp	r3, r2
 8003546:	d10c      	bne.n	8003562 <HAL_ADC_ConfigChannel+0x18a>
 8003548:	69bb      	ldr	r3, [r7, #24]
 800354a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800354e:	2b00      	cmp	r3, #0
 8003550:	d107      	bne.n	8003562 <HAL_ADC_ConfigChannel+0x18a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003552:	69bb      	ldr	r3, [r7, #24]
 8003554:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003558:	4619      	mov	r1, r3
 800355a:	4835      	ldr	r0, [pc, #212]	@ (8003630 <HAL_ADC_ConfigChannel+0x258>)
 800355c:	f7ff fa6e 	bl	8002a3c <LL_ADC_SetCommonPathInternalCh>
 8003560:	e05a      	b.n	8003618 <HAL_ADC_ConfigChannel+0x240>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4a37      	ldr	r2, [pc, #220]	@ (8003644 <HAL_ADC_ConfigChannel+0x26c>)
 8003568:	4293      	cmp	r3, r2
 800356a:	d155      	bne.n	8003618 <HAL_ADC_ConfigChannel+0x240>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800356c:	69bb      	ldr	r3, [r7, #24]
 800356e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8003572:	2b00      	cmp	r3, #0
 8003574:	d150      	bne.n	8003618 <HAL_ADC_ConfigChannel+0x240>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003576:	69bb      	ldr	r3, [r7, #24]
 8003578:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800357c:	4619      	mov	r1, r3
 800357e:	482c      	ldr	r0, [pc, #176]	@ (8003630 <HAL_ADC_ConfigChannel+0x258>)
 8003580:	f7ff fa5c 	bl	8002a3c <LL_ADC_SetCommonPathInternalCh>
 8003584:	e048      	b.n	8003618 <HAL_ADC_ConfigChannel+0x240>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	691b      	ldr	r3, [r3, #16]
 800358a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800358e:	d004      	beq.n	800359a <HAL_ADC_ConfigChannel+0x1c2>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003594:	4a25      	ldr	r2, [pc, #148]	@ (800362c <HAL_ADC_ConfigChannel+0x254>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d107      	bne.n	80035aa <HAL_ADC_ConfigChannel+0x1d2>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681a      	ldr	r2, [r3, #0]
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4619      	mov	r1, r3
 80035a4:	4610      	mov	r0, r2
 80035a6:	f7ff fae3 	bl	8002b70 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	da32      	bge.n	8003618 <HAL_ADC_ConfigChannel+0x240>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80035b2:	481f      	ldr	r0, [pc, #124]	@ (8003630 <HAL_ADC_ConfigChannel+0x258>)
 80035b4:	f7ff fa54 	bl	8002a60 <LL_ADC_GetCommonPathInternalCh>
 80035b8:	61b8      	str	r0, [r7, #24]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4a1d      	ldr	r2, [pc, #116]	@ (8003634 <HAL_ADC_ConfigChannel+0x25c>)
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d107      	bne.n	80035d4 <HAL_ADC_ConfigChannel+0x1fc>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80035c4:	69bb      	ldr	r3, [r7, #24]
 80035c6:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80035ca:	4619      	mov	r1, r3
 80035cc:	4818      	ldr	r0, [pc, #96]	@ (8003630 <HAL_ADC_ConfigChannel+0x258>)
 80035ce:	f7ff fa35 	bl	8002a3c <LL_ADC_SetCommonPathInternalCh>
 80035d2:	e021      	b.n	8003618 <HAL_ADC_ConfigChannel+0x240>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4a19      	ldr	r2, [pc, #100]	@ (8003640 <HAL_ADC_ConfigChannel+0x268>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d107      	bne.n	80035ee <HAL_ADC_ConfigChannel+0x216>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80035de:	69bb      	ldr	r3, [r7, #24]
 80035e0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80035e4:	4619      	mov	r1, r3
 80035e6:	4812      	ldr	r0, [pc, #72]	@ (8003630 <HAL_ADC_ConfigChannel+0x258>)
 80035e8:	f7ff fa28 	bl	8002a3c <LL_ADC_SetCommonPathInternalCh>
 80035ec:	e014      	b.n	8003618 <HAL_ADC_ConfigChannel+0x240>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4a14      	ldr	r2, [pc, #80]	@ (8003644 <HAL_ADC_ConfigChannel+0x26c>)
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d10f      	bne.n	8003618 <HAL_ADC_ConfigChannel+0x240>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80035f8:	69bb      	ldr	r3, [r7, #24]
 80035fa:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 80035fe:	4619      	mov	r1, r3
 8003600:	480b      	ldr	r0, [pc, #44]	@ (8003630 <HAL_ADC_ConfigChannel+0x258>)
 8003602:	f7ff fa1b 	bl	8002a3c <LL_ADC_SetCommonPathInternalCh>
 8003606:	e007      	b.n	8003618 <HAL_ADC_ConfigChannel+0x240>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800360c:	f043 0220 	orr.w	r2, r3, #32
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8003614:	2301      	movs	r3, #1
 8003616:	77fb      	strb	r3, [r7, #31]
  }

  __HAL_UNLOCK(hadc);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2200      	movs	r2, #0
 800361c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return tmp_hal_status;
 8003620:	7ffb      	ldrb	r3, [r7, #31]
}
 8003622:	4618      	mov	r0, r3
 8003624:	3720      	adds	r7, #32
 8003626:	46bd      	mov	sp, r7
 8003628:	bd80      	pop	{r7, pc}
 800362a:	bf00      	nop
 800362c:	80000004 	.word	0x80000004
 8003630:	40012708 	.word	0x40012708
 8003634:	b0001000 	.word	0xb0001000
 8003638:	20000000 	.word	0x20000000
 800363c:	053e2d63 	.word	0x053e2d63
 8003640:	b8004000 	.word	0xb8004000
 8003644:	b4002000 	.word	0xb4002000

08003648 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b084      	sub	sp, #16
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4618      	mov	r0, r3
 8003656:	f7ff fb61 	bl	8002d1c <LL_ADC_REG_IsConversionOngoing>
 800365a:	4603      	mov	r3, r0
 800365c:	2b00      	cmp	r3, #0
 800365e:	d033      	beq.n	80036c8 <ADC_ConversionStop+0x80>
  {
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4618      	mov	r0, r3
 8003666:	f7ff fb21 	bl	8002cac <LL_ADC_IsDisableOngoing>
 800366a:	4603      	mov	r3, r0
 800366c:	2b00      	cmp	r3, #0
 800366e:	d104      	bne.n	800367a <ADC_ConversionStop+0x32>
    {
      /* Stop ADC group regular conversion */
      LL_ADC_REG_StopConversion(hadc->Instance);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4618      	mov	r0, r3
 8003676:	f7ff fb3e 	bl	8002cf6 <LL_ADC_REG_StopConversion>
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800367a:	f7fe fb35 	bl	8001ce8 <HAL_GetTick>
 800367e:	60f8      	str	r0, [r7, #12]

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8003680:	e01b      	b.n	80036ba <ADC_ConversionStop+0x72>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8003682:	f7fe fb31 	bl	8001ce8 <HAL_GetTick>
 8003686:	4602      	mov	r2, r0
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	1ad3      	subs	r3, r2, r3
 800368c:	2b02      	cmp	r3, #2
 800368e:	d914      	bls.n	80036ba <ADC_ConversionStop+0x72>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	689b      	ldr	r3, [r3, #8]
 8003696:	f003 0304 	and.w	r3, r3, #4
 800369a:	2b00      	cmp	r3, #0
 800369c:	d00d      	beq.n	80036ba <ADC_ConversionStop+0x72>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036a2:	f043 0210 	orr.w	r2, r3, #16
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036ae:	f043 0201 	orr.w	r2, r3, #1
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 80036b6:	2301      	movs	r3, #1
 80036b8:	e007      	b.n	80036ca <ADC_ConversionStop+0x82>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	689b      	ldr	r3, [r3, #8]
 80036c0:	f003 0304 	and.w	r3, r3, #4
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d1dc      	bne.n	8003682 <ADC_ConversionStop+0x3a>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 80036c8:	2300      	movs	r3, #0
}
 80036ca:	4618      	mov	r0, r3
 80036cc:	3710      	adds	r7, #16
 80036ce:	46bd      	mov	sp, r7
 80036d0:	bd80      	pop	{r7, pc}
	...

080036d4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b084      	sub	sp, #16
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80036dc:	2300      	movs	r3, #0
 80036de:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4618      	mov	r0, r3
 80036e6:	f7ff facf 	bl	8002c88 <LL_ADC_IsEnabled>
 80036ea:	4603      	mov	r3, r0
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d169      	bne.n	80037c4 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	689a      	ldr	r2, [r3, #8]
 80036f6:	4b36      	ldr	r3, [pc, #216]	@ (80037d0 <ADC_Enable+0xfc>)
 80036f8:	4013      	ands	r3, r2
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d00d      	beq.n	800371a <ADC_Enable+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003702:	f043 0210 	orr.w	r2, r3, #16
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800370e:	f043 0201 	orr.w	r2, r3, #1
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8003716:	2301      	movs	r3, #1
 8003718:	e055      	b.n	80037c6 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	4618      	mov	r0, r3
 8003720:	f7ff fa8c 	bl	8002c3c <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003724:	482b      	ldr	r0, [pc, #172]	@ (80037d4 <ADC_Enable+0x100>)
 8003726:	f7ff f99b 	bl	8002a60 <LL_ADC_GetCommonPathInternalCh>
 800372a:	4603      	mov	r3, r0
 800372c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003730:	2b00      	cmp	r3, #0
 8003732:	d00f      	beq.n	8003754 <ADC_Enable+0x80>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003734:	4b28      	ldr	r3, [pc, #160]	@ (80037d8 <ADC_Enable+0x104>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	099b      	lsrs	r3, r3, #6
 800373a:	4a28      	ldr	r2, [pc, #160]	@ (80037dc <ADC_Enable+0x108>)
 800373c:	fba2 2303 	umull	r2, r3, r2, r3
 8003740:	099b      	lsrs	r3, r3, #6
 8003742:	3301      	adds	r3, #1
 8003744:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003746:	e002      	b.n	800374e <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8003748:	68bb      	ldr	r3, [r7, #8]
 800374a:	3b01      	subs	r3, #1
 800374c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800374e:	68bb      	ldr	r3, [r7, #8]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d1f9      	bne.n	8003748 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	7e5b      	ldrb	r3, [r3, #25]
 8003758:	2b01      	cmp	r3, #1
 800375a:	d033      	beq.n	80037c4 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 800375c:	f7fe fac4 	bl	8001ce8 <HAL_GetTick>
 8003760:	60f8      	str	r0, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003762:	e028      	b.n	80037b6 <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	4618      	mov	r0, r3
 800376a:	f7ff fa8d 	bl	8002c88 <LL_ADC_IsEnabled>
 800376e:	4603      	mov	r3, r0
 8003770:	2b00      	cmp	r3, #0
 8003772:	d104      	bne.n	800377e <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4618      	mov	r0, r3
 800377a:	f7ff fa5f 	bl	8002c3c <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800377e:	f7fe fab3 	bl	8001ce8 <HAL_GetTick>
 8003782:	4602      	mov	r2, r0
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	1ad3      	subs	r3, r2, r3
 8003788:	2b02      	cmp	r3, #2
 800378a:	d914      	bls.n	80037b6 <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f003 0301 	and.w	r3, r3, #1
 8003796:	2b01      	cmp	r3, #1
 8003798:	d00d      	beq.n	80037b6 <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800379e:	f043 0210 	orr.w	r2, r3, #16
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	659a      	str	r2, [r3, #88]	@ 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037aa:	f043 0201 	orr.w	r2, r3, #1
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	65da      	str	r2, [r3, #92]	@ 0x5c

            return HAL_ERROR;
 80037b2:	2301      	movs	r3, #1
 80037b4:	e007      	b.n	80037c6 <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f003 0301 	and.w	r3, r3, #1
 80037c0:	2b01      	cmp	r3, #1
 80037c2:	d1cf      	bne.n	8003764 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80037c4:	2300      	movs	r3, #0
}
 80037c6:	4618      	mov	r0, r3
 80037c8:	3710      	adds	r7, #16
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bd80      	pop	{r7, pc}
 80037ce:	bf00      	nop
 80037d0:	80000017 	.word	0x80000017
 80037d4:	40012708 	.word	0x40012708
 80037d8:	20000000 	.word	0x20000000
 80037dc:	053e2d63 	.word	0x053e2d63

080037e0 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b084      	sub	sp, #16
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4618      	mov	r0, r3
 80037ee:	f7ff fa5d 	bl	8002cac <LL_ADC_IsDisableOngoing>
 80037f2:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4618      	mov	r0, r3
 80037fa:	f7ff fa45 	bl	8002c88 <LL_ADC_IsEnabled>
 80037fe:	4603      	mov	r3, r0
 8003800:	2b00      	cmp	r3, #0
 8003802:	d047      	beq.n	8003894 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d144      	bne.n	8003894 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	689b      	ldr	r3, [r3, #8]
 8003810:	f003 0305 	and.w	r3, r3, #5
 8003814:	2b01      	cmp	r3, #1
 8003816:	d10c      	bne.n	8003832 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4618      	mov	r0, r3
 800381e:	f7ff fa20 	bl	8002c62 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	2203      	movs	r2, #3
 8003828:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800382a:	f7fe fa5d 	bl	8001ce8 <HAL_GetTick>
 800382e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003830:	e029      	b.n	8003886 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003836:	f043 0210 	orr.w	r2, r3, #16
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	659a      	str	r2, [r3, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003842:	f043 0201 	orr.w	r2, r3, #1
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 800384a:	2301      	movs	r3, #1
 800384c:	e023      	b.n	8003896 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800384e:	f7fe fa4b 	bl	8001ce8 <HAL_GetTick>
 8003852:	4602      	mov	r2, r0
 8003854:	68bb      	ldr	r3, [r7, #8]
 8003856:	1ad3      	subs	r3, r2, r3
 8003858:	2b02      	cmp	r3, #2
 800385a:	d914      	bls.n	8003886 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	689b      	ldr	r3, [r3, #8]
 8003862:	f003 0301 	and.w	r3, r3, #1
 8003866:	2b00      	cmp	r3, #0
 8003868:	d00d      	beq.n	8003886 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800386e:	f043 0210 	orr.w	r2, r3, #16
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800387a:	f043 0201 	orr.w	r2, r3, #1
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8003882:	2301      	movs	r3, #1
 8003884:	e007      	b.n	8003896 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	689b      	ldr	r3, [r3, #8]
 800388c:	f003 0301 	and.w	r3, r3, #1
 8003890:	2b00      	cmp	r3, #0
 8003892:	d1dc      	bne.n	800384e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003894:	2300      	movs	r3, #0
}
 8003896:	4618      	mov	r0, r3
 8003898:	3710      	adds	r7, #16
 800389a:	46bd      	mov	sp, r7
 800389c:	bd80      	pop	{r7, pc}

0800389e <LL_ADC_SetCalibrationFactor>:
{
 800389e:	b480      	push	{r7}
 80038a0:	b083      	sub	sp, #12
 80038a2:	af00      	add	r7, sp, #0
 80038a4:	6078      	str	r0, [r7, #4]
 80038a6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CALFACT,
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80038ae:	f023 027f 	bic.w	r2, r3, #127	@ 0x7f
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	431a      	orrs	r2, r3
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
}
 80038bc:	bf00      	nop
 80038be:	370c      	adds	r7, #12
 80038c0:	46bd      	mov	sp, r7
 80038c2:	bc80      	pop	{r7}
 80038c4:	4770      	bx	lr

080038c6 <LL_ADC_GetCalibrationFactor>:
{
 80038c6:	b480      	push	{r7}
 80038c8:	b083      	sub	sp, #12
 80038ca:	af00      	add	r7, sp, #0
 80038cc:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80038d4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 80038d8:	4618      	mov	r0, r3
 80038da:	370c      	adds	r7, #12
 80038dc:	46bd      	mov	sp, r7
 80038de:	bc80      	pop	{r7}
 80038e0:	4770      	bx	lr

080038e2 <LL_ADC_Enable>:
{
 80038e2:	b480      	push	{r7}
 80038e4:	b083      	sub	sp, #12
 80038e6:	af00      	add	r7, sp, #0
 80038e8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	689b      	ldr	r3, [r3, #8]
 80038ee:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80038f2:	f023 0317 	bic.w	r3, r3, #23
 80038f6:	f043 0201 	orr.w	r2, r3, #1
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	609a      	str	r2, [r3, #8]
}
 80038fe:	bf00      	nop
 8003900:	370c      	adds	r7, #12
 8003902:	46bd      	mov	sp, r7
 8003904:	bc80      	pop	{r7}
 8003906:	4770      	bx	lr

08003908 <LL_ADC_Disable>:
{
 8003908:	b480      	push	{r7}
 800390a:	b083      	sub	sp, #12
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	689b      	ldr	r3, [r3, #8]
 8003914:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003918:	f023 0317 	bic.w	r3, r3, #23
 800391c:	f043 0202 	orr.w	r2, r3, #2
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	609a      	str	r2, [r3, #8]
}
 8003924:	bf00      	nop
 8003926:	370c      	adds	r7, #12
 8003928:	46bd      	mov	sp, r7
 800392a:	bc80      	pop	{r7}
 800392c:	4770      	bx	lr

0800392e <LL_ADC_IsEnabled>:
{
 800392e:	b480      	push	{r7}
 8003930:	b083      	sub	sp, #12
 8003932:	af00      	add	r7, sp, #0
 8003934:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	689b      	ldr	r3, [r3, #8]
 800393a:	f003 0301 	and.w	r3, r3, #1
 800393e:	2b01      	cmp	r3, #1
 8003940:	d101      	bne.n	8003946 <LL_ADC_IsEnabled+0x18>
 8003942:	2301      	movs	r3, #1
 8003944:	e000      	b.n	8003948 <LL_ADC_IsEnabled+0x1a>
 8003946:	2300      	movs	r3, #0
}
 8003948:	4618      	mov	r0, r3
 800394a:	370c      	adds	r7, #12
 800394c:	46bd      	mov	sp, r7
 800394e:	bc80      	pop	{r7}
 8003950:	4770      	bx	lr

08003952 <LL_ADC_StartCalibration>:
{
 8003952:	b480      	push	{r7}
 8003954:	b083      	sub	sp, #12
 8003956:	af00      	add	r7, sp, #0
 8003958:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	689b      	ldr	r3, [r3, #8]
 800395e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003962:	f023 0317 	bic.w	r3, r3, #23
 8003966:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	609a      	str	r2, [r3, #8]
}
 800396e:	bf00      	nop
 8003970:	370c      	adds	r7, #12
 8003972:	46bd      	mov	sp, r7
 8003974:	bc80      	pop	{r7}
 8003976:	4770      	bx	lr

08003978 <LL_ADC_IsCalibrationOnGoing>:
{
 8003978:	b480      	push	{r7}
 800397a:	b083      	sub	sp, #12
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	689b      	ldr	r3, [r3, #8]
 8003984:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003988:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800398c:	d101      	bne.n	8003992 <LL_ADC_IsCalibrationOnGoing+0x1a>
 800398e:	2301      	movs	r3, #1
 8003990:	e000      	b.n	8003994 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8003992:	2300      	movs	r3, #0
}
 8003994:	4618      	mov	r0, r3
 8003996:	370c      	adds	r7, #12
 8003998:	46bd      	mov	sp, r7
 800399a:	bc80      	pop	{r7}
 800399c:	4770      	bx	lr

0800399e <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 800399e:	b580      	push	{r7, lr}
 80039a0:	b088      	sub	sp, #32
 80039a2:	af00      	add	r7, sp, #0
 80039a4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80039a6:	2300      	movs	r3, #0
 80039a8:	60bb      	str	r3, [r7, #8]
  uint32_t backup_setting_cfgr1;
  uint32_t calibration_index;
  uint32_t calibration_factor_accumulated = 0;
 80039aa:	2300      	movs	r3, #0
 80039ac:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80039b4:	2b01      	cmp	r3, #1
 80039b6:	d101      	bne.n	80039bc <HAL_ADCEx_Calibration_Start+0x1e>
 80039b8:	2302      	movs	r3, #2
 80039ba:	e0b9      	b.n	8003b30 <HAL_ADCEx_Calibration_Start+0x192>
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2201      	movs	r2, #1
 80039c0:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80039c4:	6878      	ldr	r0, [r7, #4]
 80039c6:	f7ff ff0b 	bl	80037e0 <ADC_Disable>
 80039ca:	4603      	mov	r3, r0
 80039cc:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4618      	mov	r0, r3
 80039d4:	f7ff ffab 	bl	800392e <LL_ADC_IsEnabled>
 80039d8:	4603      	mov	r3, r0
 80039da:	2b00      	cmp	r3, #0
 80039dc:	f040 809d 	bne.w	8003b1a <HAL_ADCEx_Calibration_Start+0x17c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039e4:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80039e8:	f043 0202 	orr.w	r2, r3, #2
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Note: Specificity of this STM32 series: Calibration factor is          */
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	68da      	ldr	r2, [r3, #12]
 80039f6:	f248 0303 	movw	r3, #32771	@ 0x8003
 80039fa:	4013      	ands	r3, r2
 80039fc:	613b      	str	r3, [r7, #16]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	68db      	ldr	r3, [r3, #12]
 8003a04:	687a      	ldr	r2, [r7, #4]
 8003a06:	6812      	ldr	r2, [r2, #0]
 8003a08:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003a0c:	f023 0303 	bic.w	r3, r3, #3
 8003a10:	60d3      	str	r3, [r2, #12]

    /* ADC calibration procedure */
    /* Note: Perform an averaging of 8 calibrations for optimized accuracy */
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8003a12:	2300      	movs	r3, #0
 8003a14:	61fb      	str	r3, [r7, #28]
 8003a16:	e02e      	b.n	8003a76 <HAL_ADCEx_Calibration_Start+0xd8>
    {
      /* Start ADC calibration */
      LL_ADC_StartCalibration(hadc->Instance);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	f7ff ff98 	bl	8003952 <LL_ADC_StartCalibration>

      /* Wait for calibration completion */
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003a22:	e014      	b.n	8003a4e <HAL_ADCEx_Calibration_Start+0xb0>
      {
        wait_loop_index++;
 8003a24:	68bb      	ldr	r3, [r7, #8]
 8003a26:	3301      	adds	r3, #1
 8003a28:	60bb      	str	r3, [r7, #8]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003a2a:	68bb      	ldr	r3, [r7, #8]
 8003a2c:	f5b3 3f2e 	cmp.w	r3, #178176	@ 0x2b800
 8003a30:	d30d      	bcc.n	8003a4e <HAL_ADCEx_Calibration_Start+0xb0>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a36:	f023 0312 	bic.w	r3, r3, #18
 8003a3a:	f043 0210 	orr.w	r2, r3, #16
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	659a      	str	r2, [r3, #88]	@ 0x58
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          __HAL_UNLOCK(hadc);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2200      	movs	r2, #0
 8003a46:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

          return HAL_ERROR;
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	e070      	b.n	8003b30 <HAL_ADCEx_Calibration_Start+0x192>
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	4618      	mov	r0, r3
 8003a54:	f7ff ff90 	bl	8003978 <LL_ADC_IsCalibrationOnGoing>
 8003a58:	4603      	mov	r3, r0
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d1e2      	bne.n	8003a24 <HAL_ADCEx_Calibration_Start+0x86>
        }
      }

      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	4618      	mov	r0, r3
 8003a64:	f7ff ff2f 	bl	80038c6 <LL_ADC_GetCalibrationFactor>
 8003a68:	4602      	mov	r2, r0
 8003a6a:	69bb      	ldr	r3, [r7, #24]
 8003a6c:	4413      	add	r3, r2
 8003a6e:	61bb      	str	r3, [r7, #24]
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8003a70:	69fb      	ldr	r3, [r7, #28]
 8003a72:	3301      	adds	r3, #1
 8003a74:	61fb      	str	r3, [r7, #28]
 8003a76:	69fb      	ldr	r3, [r7, #28]
 8003a78:	2b07      	cmp	r3, #7
 8003a7a:	d9cd      	bls.n	8003a18 <HAL_ADCEx_Calibration_Start+0x7a>
    }
    /* Compute average */
    calibration_factor_accumulated /= calibration_index;
 8003a7c:	69ba      	ldr	r2, [r7, #24]
 8003a7e:	69fb      	ldr	r3, [r7, #28]
 8003a80:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a84:	61bb      	str	r3, [r7, #24]
    /* Apply calibration factor */
    LL_ADC_Enable(hadc->Instance);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	f7ff ff29 	bl	80038e2 <LL_ADC_Enable>
    LL_ADC_SetCalibrationFactor(hadc->Instance, calibration_factor_accumulated);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	69b9      	ldr	r1, [r7, #24]
 8003a96:	4618      	mov	r0, r3
 8003a98:	f7ff ff01 	bl	800389e <LL_ADC_SetCalibrationFactor>
    LL_ADC_Disable(hadc->Instance);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	f7ff ff31 	bl	8003908 <LL_ADC_Disable>

    /* Wait for ADC effectively disabled before changing configuration */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003aa6:	f7fe f91f 	bl	8001ce8 <HAL_GetTick>
 8003aaa:	60f8      	str	r0, [r7, #12]

    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003aac:	e01c      	b.n	8003ae8 <HAL_ADCEx_Calibration_Start+0x14a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003aae:	f7fe f91b 	bl	8001ce8 <HAL_GetTick>
 8003ab2:	4602      	mov	r2, r0
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	1ad3      	subs	r3, r2, r3
 8003ab8:	2b02      	cmp	r3, #2
 8003aba:	d915      	bls.n	8003ae8 <HAL_ADCEx_Calibration_Start+0x14a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	f7ff ff34 	bl	800392e <LL_ADC_IsEnabled>
 8003ac6:	4603      	mov	r3, r0
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d00d      	beq.n	8003ae8 <HAL_ADCEx_Calibration_Start+0x14a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ad0:	f043 0210 	orr.w	r2, r3, #16
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003adc:	f043 0201 	orr.w	r2, r3, #1
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8003ae4:	2301      	movs	r3, #1
 8003ae6:	e023      	b.n	8003b30 <HAL_ADCEx_Calibration_Start+0x192>
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4618      	mov	r0, r3
 8003aee:	f7ff ff1e 	bl	800392e <LL_ADC_IsEnabled>
 8003af2:	4603      	mov	r3, r0
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d1da      	bne.n	8003aae <HAL_ADCEx_Calibration_Start+0x110>
        }
      }
    }

    /* Restore configuration after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	68d9      	ldr	r1, [r3, #12]
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	693a      	ldr	r2, [r7, #16]
 8003b04:	430a      	orrs	r2, r1
 8003b06:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b0c:	f023 0303 	bic.w	r3, r3, #3
 8003b10:	f043 0201 	orr.w	r2, r3, #1
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	659a      	str	r2, [r3, #88]	@ 0x58
 8003b18:	e005      	b.n	8003b26 <HAL_ADCEx_Calibration_Start+0x188>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b1e:	f043 0210 	orr.w	r2, r3, #16
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2200      	movs	r2, #0
 8003b2a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return tmp_hal_status;
 8003b2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b30:	4618      	mov	r0, r3
 8003b32:	3720      	adds	r7, #32
 8003b34:	46bd      	mov	sp, r7
 8003b36:	bd80      	pop	{r7, pc}

08003b38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b38:	b480      	push	{r7}
 8003b3a:	b085      	sub	sp, #20
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	f003 0307 	and.w	r3, r3, #7
 8003b46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003b48:	4b0c      	ldr	r3, [pc, #48]	@ (8003b7c <__NVIC_SetPriorityGrouping+0x44>)
 8003b4a:	68db      	ldr	r3, [r3, #12]
 8003b4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003b4e:	68ba      	ldr	r2, [r7, #8]
 8003b50:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003b54:	4013      	ands	r3, r2
 8003b56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003b5c:	68bb      	ldr	r3, [r7, #8]
 8003b5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003b60:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003b64:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003b68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003b6a:	4a04      	ldr	r2, [pc, #16]	@ (8003b7c <__NVIC_SetPriorityGrouping+0x44>)
 8003b6c:	68bb      	ldr	r3, [r7, #8]
 8003b6e:	60d3      	str	r3, [r2, #12]
}
 8003b70:	bf00      	nop
 8003b72:	3714      	adds	r7, #20
 8003b74:	46bd      	mov	sp, r7
 8003b76:	bc80      	pop	{r7}
 8003b78:	4770      	bx	lr
 8003b7a:	bf00      	nop
 8003b7c:	e000ed00 	.word	0xe000ed00

08003b80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003b80:	b480      	push	{r7}
 8003b82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003b84:	4b04      	ldr	r3, [pc, #16]	@ (8003b98 <__NVIC_GetPriorityGrouping+0x18>)
 8003b86:	68db      	ldr	r3, [r3, #12]
 8003b88:	0a1b      	lsrs	r3, r3, #8
 8003b8a:	f003 0307 	and.w	r3, r3, #7
}
 8003b8e:	4618      	mov	r0, r3
 8003b90:	46bd      	mov	sp, r7
 8003b92:	bc80      	pop	{r7}
 8003b94:	4770      	bx	lr
 8003b96:	bf00      	nop
 8003b98:	e000ed00 	.word	0xe000ed00

08003b9c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	b083      	sub	sp, #12
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	4603      	mov	r3, r0
 8003ba4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ba6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	db0b      	blt.n	8003bc6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003bae:	79fb      	ldrb	r3, [r7, #7]
 8003bb0:	f003 021f 	and.w	r2, r3, #31
 8003bb4:	4906      	ldr	r1, [pc, #24]	@ (8003bd0 <__NVIC_EnableIRQ+0x34>)
 8003bb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bba:	095b      	lsrs	r3, r3, #5
 8003bbc:	2001      	movs	r0, #1
 8003bbe:	fa00 f202 	lsl.w	r2, r0, r2
 8003bc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003bc6:	bf00      	nop
 8003bc8:	370c      	adds	r7, #12
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	bc80      	pop	{r7}
 8003bce:	4770      	bx	lr
 8003bd0:	e000e100 	.word	0xe000e100

08003bd4 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003bd4:	b480      	push	{r7}
 8003bd6:	b083      	sub	sp, #12
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	4603      	mov	r3, r0
 8003bdc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003bde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	db12      	blt.n	8003c0c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003be6:	79fb      	ldrb	r3, [r7, #7]
 8003be8:	f003 021f 	and.w	r2, r3, #31
 8003bec:	490a      	ldr	r1, [pc, #40]	@ (8003c18 <__NVIC_DisableIRQ+0x44>)
 8003bee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bf2:	095b      	lsrs	r3, r3, #5
 8003bf4:	2001      	movs	r0, #1
 8003bf6:	fa00 f202 	lsl.w	r2, r0, r2
 8003bfa:	3320      	adds	r3, #32
 8003bfc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8003c00:	f3bf 8f4f 	dsb	sy
}
 8003c04:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003c06:	f3bf 8f6f 	isb	sy
}
 8003c0a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8003c0c:	bf00      	nop
 8003c0e:	370c      	adds	r7, #12
 8003c10:	46bd      	mov	sp, r7
 8003c12:	bc80      	pop	{r7}
 8003c14:	4770      	bx	lr
 8003c16:	bf00      	nop
 8003c18:	e000e100 	.word	0xe000e100

08003c1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003c1c:	b480      	push	{r7}
 8003c1e:	b083      	sub	sp, #12
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	4603      	mov	r3, r0
 8003c24:	6039      	str	r1, [r7, #0]
 8003c26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	db0a      	blt.n	8003c46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	b2da      	uxtb	r2, r3
 8003c34:	490c      	ldr	r1, [pc, #48]	@ (8003c68 <__NVIC_SetPriority+0x4c>)
 8003c36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c3a:	0112      	lsls	r2, r2, #4
 8003c3c:	b2d2      	uxtb	r2, r2
 8003c3e:	440b      	add	r3, r1
 8003c40:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003c44:	e00a      	b.n	8003c5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	b2da      	uxtb	r2, r3
 8003c4a:	4908      	ldr	r1, [pc, #32]	@ (8003c6c <__NVIC_SetPriority+0x50>)
 8003c4c:	79fb      	ldrb	r3, [r7, #7]
 8003c4e:	f003 030f 	and.w	r3, r3, #15
 8003c52:	3b04      	subs	r3, #4
 8003c54:	0112      	lsls	r2, r2, #4
 8003c56:	b2d2      	uxtb	r2, r2
 8003c58:	440b      	add	r3, r1
 8003c5a:	761a      	strb	r2, [r3, #24]
}
 8003c5c:	bf00      	nop
 8003c5e:	370c      	adds	r7, #12
 8003c60:	46bd      	mov	sp, r7
 8003c62:	bc80      	pop	{r7}
 8003c64:	4770      	bx	lr
 8003c66:	bf00      	nop
 8003c68:	e000e100 	.word	0xe000e100
 8003c6c:	e000ed00 	.word	0xe000ed00

08003c70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003c70:	b480      	push	{r7}
 8003c72:	b089      	sub	sp, #36	@ 0x24
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	60f8      	str	r0, [r7, #12]
 8003c78:	60b9      	str	r1, [r7, #8]
 8003c7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	f003 0307 	and.w	r3, r3, #7
 8003c82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003c84:	69fb      	ldr	r3, [r7, #28]
 8003c86:	f1c3 0307 	rsb	r3, r3, #7
 8003c8a:	2b04      	cmp	r3, #4
 8003c8c:	bf28      	it	cs
 8003c8e:	2304      	movcs	r3, #4
 8003c90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003c92:	69fb      	ldr	r3, [r7, #28]
 8003c94:	3304      	adds	r3, #4
 8003c96:	2b06      	cmp	r3, #6
 8003c98:	d902      	bls.n	8003ca0 <NVIC_EncodePriority+0x30>
 8003c9a:	69fb      	ldr	r3, [r7, #28]
 8003c9c:	3b03      	subs	r3, #3
 8003c9e:	e000      	b.n	8003ca2 <NVIC_EncodePriority+0x32>
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ca4:	f04f 32ff 	mov.w	r2, #4294967295
 8003ca8:	69bb      	ldr	r3, [r7, #24]
 8003caa:	fa02 f303 	lsl.w	r3, r2, r3
 8003cae:	43da      	mvns	r2, r3
 8003cb0:	68bb      	ldr	r3, [r7, #8]
 8003cb2:	401a      	ands	r2, r3
 8003cb4:	697b      	ldr	r3, [r7, #20]
 8003cb6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003cb8:	f04f 31ff 	mov.w	r1, #4294967295
 8003cbc:	697b      	ldr	r3, [r7, #20]
 8003cbe:	fa01 f303 	lsl.w	r3, r1, r3
 8003cc2:	43d9      	mvns	r1, r3
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003cc8:	4313      	orrs	r3, r2
         );
}
 8003cca:	4618      	mov	r0, r3
 8003ccc:	3724      	adds	r7, #36	@ 0x24
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	bc80      	pop	{r7}
 8003cd2:	4770      	bx	lr

08003cd4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b082      	sub	sp, #8
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003cdc:	6878      	ldr	r0, [r7, #4]
 8003cde:	f7ff ff2b 	bl	8003b38 <__NVIC_SetPriorityGrouping>
}
 8003ce2:	bf00      	nop
 8003ce4:	3708      	adds	r7, #8
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bd80      	pop	{r7, pc}

08003cea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003cea:	b580      	push	{r7, lr}
 8003cec:	b086      	sub	sp, #24
 8003cee:	af00      	add	r7, sp, #0
 8003cf0:	4603      	mov	r3, r0
 8003cf2:	60b9      	str	r1, [r7, #8]
 8003cf4:	607a      	str	r2, [r7, #4]
 8003cf6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003cf8:	f7ff ff42 	bl	8003b80 <__NVIC_GetPriorityGrouping>
 8003cfc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003cfe:	687a      	ldr	r2, [r7, #4]
 8003d00:	68b9      	ldr	r1, [r7, #8]
 8003d02:	6978      	ldr	r0, [r7, #20]
 8003d04:	f7ff ffb4 	bl	8003c70 <NVIC_EncodePriority>
 8003d08:	4602      	mov	r2, r0
 8003d0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d0e:	4611      	mov	r1, r2
 8003d10:	4618      	mov	r0, r3
 8003d12:	f7ff ff83 	bl	8003c1c <__NVIC_SetPriority>
}
 8003d16:	bf00      	nop
 8003d18:	3718      	adds	r7, #24
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	bd80      	pop	{r7, pc}

08003d1e <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d1e:	b580      	push	{r7, lr}
 8003d20:	b082      	sub	sp, #8
 8003d22:	af00      	add	r7, sp, #0
 8003d24:	4603      	mov	r3, r0
 8003d26:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003d28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	f7ff ff35 	bl	8003b9c <__NVIC_EnableIRQ>
}
 8003d32:	bf00      	nop
 8003d34:	3708      	adds	r7, #8
 8003d36:	46bd      	mov	sp, r7
 8003d38:	bd80      	pop	{r7, pc}

08003d3a <HAL_NVIC_DisableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003d3a:	b580      	push	{r7, lr}
 8003d3c:	b082      	sub	sp, #8
 8003d3e:	af00      	add	r7, sp, #0
 8003d40:	4603      	mov	r3, r0
 8003d42:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003d44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d48:	4618      	mov	r0, r3
 8003d4a:	f7ff ff43 	bl	8003bd4 <__NVIC_DisableIRQ>
}
 8003d4e:	bf00      	nop
 8003d50:	3708      	adds	r7, #8
 8003d52:	46bd      	mov	sp, r7
 8003d54:	bd80      	pop	{r7, pc}
	...

08003d58 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b082      	sub	sp, #8
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d101      	bne.n	8003d6a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003d66:	2301      	movs	r3, #1
 8003d68:	e08e      	b.n	8003e88 <HAL_DMA_Init+0x130>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	461a      	mov	r2, r3
 8003d70:	4b47      	ldr	r3, [pc, #284]	@ (8003e90 <HAL_DMA_Init+0x138>)
 8003d72:	429a      	cmp	r2, r3
 8003d74:	d80f      	bhi.n	8003d96 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	461a      	mov	r2, r3
 8003d7c:	4b45      	ldr	r3, [pc, #276]	@ (8003e94 <HAL_DMA_Init+0x13c>)
 8003d7e:	4413      	add	r3, r2
 8003d80:	4a45      	ldr	r2, [pc, #276]	@ (8003e98 <HAL_DMA_Init+0x140>)
 8003d82:	fba2 2303 	umull	r2, r3, r2, r3
 8003d86:	091b      	lsrs	r3, r3, #4
 8003d88:	009a      	lsls	r2, r3, #2
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	4a42      	ldr	r2, [pc, #264]	@ (8003e9c <HAL_DMA_Init+0x144>)
 8003d92:	641a      	str	r2, [r3, #64]	@ 0x40
 8003d94:	e00e      	b.n	8003db4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	461a      	mov	r2, r3
 8003d9c:	4b40      	ldr	r3, [pc, #256]	@ (8003ea0 <HAL_DMA_Init+0x148>)
 8003d9e:	4413      	add	r3, r2
 8003da0:	4a3d      	ldr	r2, [pc, #244]	@ (8003e98 <HAL_DMA_Init+0x140>)
 8003da2:	fba2 2303 	umull	r2, r3, r2, r3
 8003da6:	091b      	lsrs	r3, r3, #4
 8003da8:	009a      	lsls	r2, r3, #2
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	4a3c      	ldr	r2, [pc, #240]	@ (8003ea4 <HAL_DMA_Init+0x14c>)
 8003db2:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2202      	movs	r2, #2
 8003db8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	687a      	ldr	r2, [r7, #4]
 8003dc4:	6812      	ldr	r2, [r2, #0]
 8003dc6:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8003dca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003dce:	6013      	str	r3, [r2, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	6819      	ldr	r1, [r3, #0]
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	689a      	ldr	r2, [r3, #8]
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	68db      	ldr	r3, [r3, #12]
 8003dde:	431a      	orrs	r2, r3
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	691b      	ldr	r3, [r3, #16]
 8003de4:	431a      	orrs	r2, r3
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	695b      	ldr	r3, [r3, #20]
 8003dea:	431a      	orrs	r2, r3
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	699b      	ldr	r3, [r3, #24]
 8003df0:	431a      	orrs	r2, r3
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	69db      	ldr	r3, [r3, #28]
 8003df6:	431a      	orrs	r2, r3
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6a1b      	ldr	r3, [r3, #32]
 8003dfc:	431a      	orrs	r2, r3
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	430a      	orrs	r2, r1
 8003e04:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003e06:	6878      	ldr	r0, [r7, #4]
 8003e08:	f000 fb24 	bl	8004454 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	689b      	ldr	r3, [r3, #8]
 8003e10:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003e14:	d102      	bne.n	8003e1c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2200      	movs	r2, #0
 8003e1a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	685a      	ldr	r2, [r3, #4]
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e24:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003e28:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e2e:	687a      	ldr	r2, [r7, #4]
 8003e30:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003e32:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	685b      	ldr	r3, [r3, #4]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d010      	beq.n	8003e5e <HAL_DMA_Init+0x106>
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	2b04      	cmp	r3, #4
 8003e42:	d80c      	bhi.n	8003e5e <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003e44:	6878      	ldr	r0, [r7, #4]
 8003e46:	f000 fb4d 	bl	80044e4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e4e:	2200      	movs	r2, #0
 8003e50:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e56:	687a      	ldr	r2, [r7, #4]
 8003e58:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003e5a:	605a      	str	r2, [r3, #4]
 8003e5c:	e008      	b.n	8003e70 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2200      	movs	r2, #0
 8003e62:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2200      	movs	r2, #0
 8003e68:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2200      	movs	r2, #0
 8003e74:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2201      	movs	r2, #1
 8003e7a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2200      	movs	r2, #0
 8003e82:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003e86:	2300      	movs	r3, #0
}
 8003e88:	4618      	mov	r0, r3
 8003e8a:	3708      	adds	r7, #8
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	bd80      	pop	{r7, pc}
 8003e90:	40020407 	.word	0x40020407
 8003e94:	bffdfff8 	.word	0xbffdfff8
 8003e98:	cccccccd 	.word	0xcccccccd
 8003e9c:	40020000 	.word	0x40020000
 8003ea0:	bffdfbf8 	.word	0xbffdfbf8
 8003ea4:	40020400 	.word	0x40020400

08003ea8 <HAL_DMA_DeInit>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b082      	sub	sp, #8
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d101      	bne.n	8003eba <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	e07b      	b.n	8003fb2 <HAL_DMA_DeInit+0x10a>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	681a      	ldr	r2, [r3, #0]
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f022 0201 	bic.w	r2, r2, #1
 8003ec8:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	461a      	mov	r2, r3
 8003ed0:	4b3a      	ldr	r3, [pc, #232]	@ (8003fbc <HAL_DMA_DeInit+0x114>)
 8003ed2:	429a      	cmp	r2, r3
 8003ed4:	d80f      	bhi.n	8003ef6 <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	461a      	mov	r2, r3
 8003edc:	4b38      	ldr	r3, [pc, #224]	@ (8003fc0 <HAL_DMA_DeInit+0x118>)
 8003ede:	4413      	add	r3, r2
 8003ee0:	4a38      	ldr	r2, [pc, #224]	@ (8003fc4 <HAL_DMA_DeInit+0x11c>)
 8003ee2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ee6:	091b      	lsrs	r3, r3, #4
 8003ee8:	009a      	lsls	r2, r3, #2
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	4a35      	ldr	r2, [pc, #212]	@ (8003fc8 <HAL_DMA_DeInit+0x120>)
 8003ef2:	641a      	str	r2, [r3, #64]	@ 0x40
 8003ef4:	e00e      	b.n	8003f14 <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	461a      	mov	r2, r3
 8003efc:	4b33      	ldr	r3, [pc, #204]	@ (8003fcc <HAL_DMA_DeInit+0x124>)
 8003efe:	4413      	add	r3, r2
 8003f00:	4a30      	ldr	r2, [pc, #192]	@ (8003fc4 <HAL_DMA_DeInit+0x11c>)
 8003f02:	fba2 2303 	umull	r2, r3, r2, r3
 8003f06:	091b      	lsrs	r3, r3, #4
 8003f08:	009a      	lsls	r2, r3, #2
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	4a2f      	ldr	r2, [pc, #188]	@ (8003fd0 <HAL_DMA_DeInit+0x128>)
 8003f12:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Reset DMA Channel control register */
  hdma->Instance->CCR = 0U;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	2200      	movs	r2, #0
 8003f1a:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f20:	f003 021c 	and.w	r2, r3, #28
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f28:	2101      	movs	r1, #1
 8003f2a:	fa01 f202 	lsl.w	r2, r1, r2
 8003f2e:	605a      	str	r2, [r3, #4]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */

  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003f30:	6878      	ldr	r0, [r7, #4]
 8003f32:	f000 fa8f 	bl	8004454 <DMA_CalcDMAMUXChannelBaseAndMask>

  /* Reset the DMAMUX channel that corresponds to the DMA channel */
  hdma->DMAmuxChannel->CCR = 0U;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f42:	687a      	ldr	r2, [r7, #4]
 8003f44:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003f46:	605a      	str	r2, [r3, #4]

  /* Reset Request generator parameters if any */
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	685b      	ldr	r3, [r3, #4]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d00f      	beq.n	8003f70 <HAL_DMA_DeInit+0xc8>
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	685b      	ldr	r3, [r3, #4]
 8003f54:	2b04      	cmp	r3, #4
 8003f56:	d80b      	bhi.n	8003f70 <HAL_DMA_DeInit+0xc8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003f58:	6878      	ldr	r0, [r7, #4]
 8003f5a:	f000 fac3 	bl	80044e4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f62:	2200      	movs	r2, #0
 8003f64:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f6a:	687a      	ldr	r2, [r7, #4]
 8003f6c:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003f6e:	605a      	str	r2, [r3, #4]
  }

  hdma->DMAmuxRequestGen = 0U;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2200      	movs	r2, #0
 8003f74:	655a      	str	r2, [r3, #84]	@ 0x54
  hdma->DMAmuxRequestGenStatus = 0U;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2200      	movs	r2, #0
 8003f7a:	659a      	str	r2, [r3, #88]	@ 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2200      	movs	r2, #0
 8003f80:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2200      	movs	r2, #0
 8003f86:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma->XferErrorCallback = NULL;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	2200      	movs	r2, #0
 8003f92:	635a      	str	r2, [r3, #52]	@ 0x34
  hdma->XferAbortCallback = NULL;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2200      	movs	r2, #0
 8003f98:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2200      	movs	r2, #0
 8003fac:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003fb0:	2300      	movs	r3, #0
}
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	3708      	adds	r7, #8
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	bd80      	pop	{r7, pc}
 8003fba:	bf00      	nop
 8003fbc:	40020407 	.word	0x40020407
 8003fc0:	bffdfff8 	.word	0xbffdfff8
 8003fc4:	cccccccd 	.word	0xcccccccd
 8003fc8:	40020000 	.word	0x40020000
 8003fcc:	bffdfbf8 	.word	0xbffdfbf8
 8003fd0:	40020400 	.word	0x40020400

08003fd4 <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b086      	sub	sp, #24
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	60f8      	str	r0, [r7, #12]
 8003fdc:	60b9      	str	r1, [r7, #8]
 8003fde:	607a      	str	r2, [r7, #4]
 8003fe0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003fec:	2b01      	cmp	r3, #1
 8003fee:	d101      	bne.n	8003ff4 <HAL_DMA_Start_IT+0x20>
 8003ff0:	2302      	movs	r3, #2
 8003ff2:	e069      	b.n	80040c8 <HAL_DMA_Start_IT+0xf4>
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	2201      	movs	r2, #1
 8003ff8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (hdma->State == HAL_DMA_STATE_READY)
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004002:	b2db      	uxtb	r3, r3
 8004004:	2b01      	cmp	r3, #1
 8004006:	d155      	bne.n	80040b4 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	2202      	movs	r2, #2
 800400c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	2200      	movs	r2, #0
 8004014:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	681a      	ldr	r2, [r3, #0]
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f022 0201 	bic.w	r2, r2, #1
 8004024:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	687a      	ldr	r2, [r7, #4]
 800402a:	68b9      	ldr	r1, [r7, #8]
 800402c:	68f8      	ldr	r0, [r7, #12]
 800402e:	f000 f9d3 	bl	80043d8 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004036:	2b00      	cmp	r3, #0
 8004038:	d008      	beq.n	800404c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	681a      	ldr	r2, [r3, #0]
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f042 020e 	orr.w	r2, r2, #14
 8004048:	601a      	str	r2, [r3, #0]
 800404a:	e00f      	b.n	800406c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	681a      	ldr	r2, [r3, #0]
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f022 0204 	bic.w	r2, r2, #4
 800405a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	681a      	ldr	r2, [r3, #0]
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f042 020a 	orr.w	r2, r2, #10
 800406a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004076:	2b00      	cmp	r3, #0
 8004078:	d007      	beq.n	800408a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800407e:	681a      	ldr	r2, [r3, #0]
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004084:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004088:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800408e:	2b00      	cmp	r3, #0
 8004090:	d007      	beq.n	80040a2 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004096:	681a      	ldr	r2, [r3, #0]
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800409c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80040a0:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	681a      	ldr	r2, [r3, #0]
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f042 0201 	orr.w	r2, r2, #1
 80040b0:	601a      	str	r2, [r3, #0]
 80040b2:	e008      	b.n	80040c6 <HAL_DMA_Start_IT+0xf2>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	2280      	movs	r2, #128	@ 0x80
 80040b8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	2200      	movs	r2, #0
 80040be:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Return error status */
    status = HAL_ERROR;
 80040c2:	2301      	movs	r3, #1
 80040c4:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80040c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80040c8:	4618      	mov	r0, r3
 80040ca:	3718      	adds	r7, #24
 80040cc:	46bd      	mov	sp, r7
 80040ce:	bd80      	pop	{r7, pc}

080040d0 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80040d0:	b480      	push	{r7}
 80040d2:	b083      	sub	sp, #12
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d101      	bne.n	80040e2 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 80040de:	2301      	movs	r3, #1
 80040e0:	e04f      	b.n	8004182 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80040e8:	b2db      	uxtb	r3, r3
 80040ea:	2b02      	cmp	r3, #2
 80040ec:	d008      	beq.n	8004100 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2204      	movs	r2, #4
 80040f2:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2200      	movs	r2, #0
 80040f8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80040fc:	2301      	movs	r3, #1
 80040fe:	e040      	b.n	8004182 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	681a      	ldr	r2, [r3, #0]
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f022 020e 	bic.w	r2, r2, #14
 800410e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004114:	681a      	ldr	r2, [r3, #0]
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800411a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800411e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	681a      	ldr	r2, [r3, #0]
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f022 0201 	bic.w	r2, r2, #1
 800412e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004134:	f003 021c 	and.w	r2, r3, #28
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800413c:	2101      	movs	r1, #1
 800413e:	fa01 f202 	lsl.w	r2, r1, r2
 8004142:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004148:	687a      	ldr	r2, [r7, #4]
 800414a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800414c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004152:	2b00      	cmp	r3, #0
 8004154:	d00c      	beq.n	8004170 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800415a:	681a      	ldr	r2, [r3, #0]
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004160:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004164:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800416a:	687a      	ldr	r2, [r7, #4]
 800416c:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800416e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2201      	movs	r2, #1
 8004174:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2200      	movs	r2, #0
 800417c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }

  return HAL_OK;
 8004180:	2300      	movs	r3, #0
}
 8004182:	4618      	mov	r0, r3
 8004184:	370c      	adds	r7, #12
 8004186:	46bd      	mov	sp, r7
 8004188:	bc80      	pop	{r7}
 800418a:	4770      	bx	lr

0800418c <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b084      	sub	sp, #16
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004194:	2300      	movs	r3, #0
 8004196:	73fb      	strb	r3, [r7, #15]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800419e:	b2db      	uxtb	r3, r3
 80041a0:	2b02      	cmp	r3, #2
 80041a2:	d005      	beq.n	80041b0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2204      	movs	r2, #4
 80041a8:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80041aa:	2301      	movs	r3, #1
 80041ac:	73fb      	strb	r3, [r7, #15]
 80041ae:	e047      	b.n	8004240 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	681a      	ldr	r2, [r3, #0]
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f022 020e 	bic.w	r2, r2, #14
 80041be:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	681a      	ldr	r2, [r3, #0]
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f022 0201 	bic.w	r2, r2, #1
 80041ce:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80041d4:	681a      	ldr	r2, [r3, #0]
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80041da:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80041de:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041e4:	f003 021c 	and.w	r2, r3, #28
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041ec:	2101      	movs	r1, #1
 80041ee:	fa01 f202 	lsl.w	r2, r1, r2
 80041f2:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80041f8:	687a      	ldr	r2, [r7, #4]
 80041fa:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80041fc:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004202:	2b00      	cmp	r3, #0
 8004204:	d00c      	beq.n	8004220 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800420a:	681a      	ldr	r2, [r3, #0]
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004210:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004214:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800421a:	687a      	ldr	r2, [r7, #4]
 800421c:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800421e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2201      	movs	r2, #1
 8004224:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2200      	movs	r2, #0
 800422c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004234:	2b00      	cmp	r3, #0
 8004236:	d003      	beq.n	8004240 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800423c:	6878      	ldr	r0, [r7, #4]
 800423e:	4798      	blx	r3
    }
  }
  return status;
 8004240:	7bfb      	ldrb	r3, [r7, #15]
}
 8004242:	4618      	mov	r0, r3
 8004244:	3710      	adds	r7, #16
 8004246:	46bd      	mov	sp, r7
 8004248:	bd80      	pop	{r7, pc}
	...

0800424c <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	b084      	sub	sp, #16
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004268:	f003 031c 	and.w	r3, r3, #28
 800426c:	2204      	movs	r2, #4
 800426e:	409a      	lsls	r2, r3
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	4013      	ands	r3, r2
 8004274:	2b00      	cmp	r3, #0
 8004276:	d027      	beq.n	80042c8 <HAL_DMA_IRQHandler+0x7c>
 8004278:	68bb      	ldr	r3, [r7, #8]
 800427a:	f003 0304 	and.w	r3, r3, #4
 800427e:	2b00      	cmp	r3, #0
 8004280:	d022      	beq.n	80042c8 <HAL_DMA_IRQHandler+0x7c>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f003 0320 	and.w	r3, r3, #32
 800428c:	2b00      	cmp	r3, #0
 800428e:	d107      	bne.n	80042a0 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	681a      	ldr	r2, [r3, #0]
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f022 0204 	bic.w	r2, r2, #4
 800429e:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042a4:	f003 021c 	and.w	r2, r3, #28
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042ac:	2104      	movs	r1, #4
 80042ae:	fa01 f202 	lsl.w	r2, r1, r2
 80042b2:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	f000 8081 	beq.w	80043c0 <HAL_DMA_IRQHandler+0x174>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042c2:	6878      	ldr	r0, [r7, #4]
 80042c4:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 80042c6:	e07b      	b.n	80043c0 <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042cc:	f003 031c 	and.w	r3, r3, #28
 80042d0:	2202      	movs	r2, #2
 80042d2:	409a      	lsls	r2, r3
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	4013      	ands	r3, r2
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d03d      	beq.n	8004358 <HAL_DMA_IRQHandler+0x10c>
 80042dc:	68bb      	ldr	r3, [r7, #8]
 80042de:	f003 0302 	and.w	r3, r3, #2
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d038      	beq.n	8004358 <HAL_DMA_IRQHandler+0x10c>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f003 0320 	and.w	r3, r3, #32
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d10b      	bne.n	800430c <HAL_DMA_IRQHandler+0xc0>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	681a      	ldr	r2, [r3, #0]
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f022 020a 	bic.w	r2, r2, #10
 8004302:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2201      	movs	r2, #1
 8004308:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	461a      	mov	r2, r3
 8004312:	4b2e      	ldr	r3, [pc, #184]	@ (80043cc <HAL_DMA_IRQHandler+0x180>)
 8004314:	429a      	cmp	r2, r3
 8004316:	d909      	bls.n	800432c <HAL_DMA_IRQHandler+0xe0>
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800431c:	f003 031c 	and.w	r3, r3, #28
 8004320:	4a2b      	ldr	r2, [pc, #172]	@ (80043d0 <HAL_DMA_IRQHandler+0x184>)
 8004322:	2102      	movs	r1, #2
 8004324:	fa01 f303 	lsl.w	r3, r1, r3
 8004328:	6053      	str	r3, [r2, #4]
 800432a:	e008      	b.n	800433e <HAL_DMA_IRQHandler+0xf2>
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004330:	f003 031c 	and.w	r3, r3, #28
 8004334:	4a27      	ldr	r2, [pc, #156]	@ (80043d4 <HAL_DMA_IRQHandler+0x188>)
 8004336:	2102      	movs	r1, #2
 8004338:	fa01 f303 	lsl.w	r3, r1, r3
 800433c:	6053      	str	r3, [r2, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2200      	movs	r2, #0
 8004342:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

      if (hdma->XferCpltCallback != NULL)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800434a:	2b00      	cmp	r3, #0
 800434c:	d038      	beq.n	80043c0 <HAL_DMA_IRQHandler+0x174>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004352:	6878      	ldr	r0, [r7, #4]
 8004354:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8004356:	e033      	b.n	80043c0 <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800435c:	f003 031c 	and.w	r3, r3, #28
 8004360:	2208      	movs	r2, #8
 8004362:	409a      	lsls	r2, r3
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	4013      	ands	r3, r2
 8004368:	2b00      	cmp	r3, #0
 800436a:	d02a      	beq.n	80043c2 <HAL_DMA_IRQHandler+0x176>
 800436c:	68bb      	ldr	r3, [r7, #8]
 800436e:	f003 0308 	and.w	r3, r3, #8
 8004372:	2b00      	cmp	r3, #0
 8004374:	d025      	beq.n	80043c2 <HAL_DMA_IRQHandler+0x176>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	681a      	ldr	r2, [r3, #0]
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f022 020e 	bic.w	r2, r2, #14
 8004384:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800438a:	f003 021c 	and.w	r2, r3, #28
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004392:	2101      	movs	r1, #1
 8004394:	fa01 f202 	lsl.w	r2, r1, r2
 8004398:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2201      	movs	r2, #1
 800439e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2201      	movs	r2, #1
 80043a4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2200      	movs	r2, #0
 80043ac:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d004      	beq.n	80043c2 <HAL_DMA_IRQHandler+0x176>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80043bc:	6878      	ldr	r0, [r7, #4]
 80043be:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80043c0:	bf00      	nop
 80043c2:	bf00      	nop
}
 80043c4:	3710      	adds	r7, #16
 80043c6:	46bd      	mov	sp, r7
 80043c8:	bd80      	pop	{r7, pc}
 80043ca:	bf00      	nop
 80043cc:	40020080 	.word	0x40020080
 80043d0:	40020400 	.word	0x40020400
 80043d4:	40020000 	.word	0x40020000

080043d8 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80043d8:	b480      	push	{r7}
 80043da:	b085      	sub	sp, #20
 80043dc:	af00      	add	r7, sp, #0
 80043de:	60f8      	str	r0, [r7, #12]
 80043e0:	60b9      	str	r1, [r7, #8]
 80043e2:	607a      	str	r2, [r7, #4]
 80043e4:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80043ea:	68fa      	ldr	r2, [r7, #12]
 80043ec:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80043ee:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d004      	beq.n	8004402 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043fc:	68fa      	ldr	r2, [r7, #12]
 80043fe:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004400:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004406:	f003 021c 	and.w	r2, r3, #28
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800440e:	2101      	movs	r1, #1
 8004410:	fa01 f202 	lsl.w	r2, r1, r2
 8004414:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	683a      	ldr	r2, [r7, #0]
 800441c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	689b      	ldr	r3, [r3, #8]
 8004422:	2b10      	cmp	r3, #16
 8004424:	d108      	bne.n	8004438 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	687a      	ldr	r2, [r7, #4]
 800442c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	68ba      	ldr	r2, [r7, #8]
 8004434:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004436:	e007      	b.n	8004448 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	68ba      	ldr	r2, [r7, #8]
 800443e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	687a      	ldr	r2, [r7, #4]
 8004446:	60da      	str	r2, [r3, #12]
}
 8004448:	bf00      	nop
 800444a:	3714      	adds	r7, #20
 800444c:	46bd      	mov	sp, r7
 800444e:	bc80      	pop	{r7}
 8004450:	4770      	bx	lr
	...

08004454 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004454:	b480      	push	{r7}
 8004456:	b085      	sub	sp, #20
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	461a      	mov	r2, r3
 8004462:	4b1c      	ldr	r3, [pc, #112]	@ (80044d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x80>)
 8004464:	429a      	cmp	r2, r3
 8004466:	d813      	bhi.n	8004490 <DMA_CalcDMAMUXChannelBaseAndMask+0x3c>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800446c:	089b      	lsrs	r3, r3, #2
 800446e:	009b      	lsls	r3, r3, #2
 8004470:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004474:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 8004478:	687a      	ldr	r2, [r7, #4]
 800447a:	6493      	str	r3, [r2, #72]	@ 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	b2db      	uxtb	r3, r3
 8004482:	3b08      	subs	r3, #8
 8004484:	4a14      	ldr	r2, [pc, #80]	@ (80044d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 8004486:	fba2 2303 	umull	r2, r3, r2, r3
 800448a:	091b      	lsrs	r3, r3, #4
 800448c:	60fb      	str	r3, [r7, #12]
 800448e:	e011      	b.n	80044b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
  }
  else
  {
    /* DMA2 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004494:	089b      	lsrs	r3, r3, #2
 8004496:	009a      	lsls	r2, r3, #2
 8004498:	4b10      	ldr	r3, [pc, #64]	@ (80044dc <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
 800449a:	4413      	add	r3, r2
 800449c:	687a      	ldr	r2, [r7, #4]
 800449e:	6493      	str	r3, [r2, #72]	@ 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	b2db      	uxtb	r3, r3
 80044a6:	3b08      	subs	r3, #8
 80044a8:	4a0b      	ldr	r2, [pc, #44]	@ (80044d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 80044aa:	fba2 2303 	umull	r2, r3, r2, r3
 80044ae:	091b      	lsrs	r3, r3, #4
 80044b0:	3307      	adds	r3, #7
 80044b2:	60fb      	str	r3, [r7, #12]
  }

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	4a0a      	ldr	r2, [pc, #40]	@ (80044e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 80044b8:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	f003 031f 	and.w	r3, r3, #31
 80044c0:	2201      	movs	r2, #1
 80044c2:	409a      	lsls	r2, r3
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80044c8:	bf00      	nop
 80044ca:	3714      	adds	r7, #20
 80044cc:	46bd      	mov	sp, r7
 80044ce:	bc80      	pop	{r7}
 80044d0:	4770      	bx	lr
 80044d2:	bf00      	nop
 80044d4:	40020407 	.word	0x40020407
 80044d8:	cccccccd 	.word	0xcccccccd
 80044dc:	4002081c 	.word	0x4002081c
 80044e0:	40020880 	.word	0x40020880

080044e4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80044e4:	b480      	push	{r7}
 80044e6:	b085      	sub	sp, #20
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	685b      	ldr	r3, [r3, #4]
 80044f0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80044f4:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80044f6:	68fa      	ldr	r2, [r7, #12]
 80044f8:	4b0a      	ldr	r3, [pc, #40]	@ (8004524 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80044fa:	4413      	add	r3, r2
 80044fc:	009b      	lsls	r3, r3, #2
 80044fe:	461a      	mov	r2, r3
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	4a08      	ldr	r2, [pc, #32]	@ (8004528 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8004508:	659a      	str	r2, [r3, #88]	@ 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	3b01      	subs	r3, #1
 800450e:	f003 0303 	and.w	r3, r3, #3
 8004512:	2201      	movs	r2, #1
 8004514:	409a      	lsls	r2, r3
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 800451a:	bf00      	nop
 800451c:	3714      	adds	r7, #20
 800451e:	46bd      	mov	sp, r7
 8004520:	bc80      	pop	{r7}
 8004522:	4770      	bx	lr
 8004524:	1000823f 	.word	0x1000823f
 8004528:	40020940 	.word	0x40020940

0800452c <HAL_FLASH_Program>:
  *                are stored the data for the row fast program.
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 800452c:	b580      	push	{r7, lr}
 800452e:	b086      	sub	sp, #24
 8004530:	af00      	add	r7, sp, #0
 8004532:	60f8      	str	r0, [r7, #12]
 8004534:	60b9      	str	r1, [r7, #8]
 8004536:	e9c7 2300 	strd	r2, r3, [r7]
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_ADDR_ALIGNED_64BITS(Address));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800453a:	4b1c      	ldr	r3, [pc, #112]	@ (80045ac <HAL_FLASH_Program+0x80>)
 800453c:	781b      	ldrb	r3, [r3, #0]
 800453e:	2b01      	cmp	r3, #1
 8004540:	d101      	bne.n	8004546 <HAL_FLASH_Program+0x1a>
 8004542:	2302      	movs	r3, #2
 8004544:	e02d      	b.n	80045a2 <HAL_FLASH_Program+0x76>
 8004546:	4b19      	ldr	r3, [pc, #100]	@ (80045ac <HAL_FLASH_Program+0x80>)
 8004548:	2201      	movs	r2, #1
 800454a:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800454c:	4b17      	ldr	r3, [pc, #92]	@ (80045ac <HAL_FLASH_Program+0x80>)
 800454e:	2200      	movs	r2, #0
 8004550:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004552:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8004556:	f000 f869 	bl	800462c <FLASH_WaitForLastOperation>
 800455a:	4603      	mov	r3, r0
 800455c:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 800455e:	7dfb      	ldrb	r3, [r7, #23]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d11a      	bne.n	800459a <HAL_FLASH_Program+0x6e>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	2b01      	cmp	r3, #1
 8004568:	d105      	bne.n	8004576 <HAL_FLASH_Program+0x4a>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 800456a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800456e:	68b8      	ldr	r0, [r7, #8]
 8004570:	f000 f8be 	bl	80046f0 <FLASH_Program_DoubleWord>
 8004574:	e004      	b.n	8004580 <HAL_FLASH_Program+0x54>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_FAST_PROGRAM_ADDRESS(Address));

      /* Fast program a 32 double-word (64-bit) row at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	4619      	mov	r1, r3
 800457a:	68b8      	ldr	r0, [r7, #8]
 800457c:	f000 f8de 	bl	800473c <FLASH_Program_Fast>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004580:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8004584:	f000 f852 	bl	800462c <FLASH_WaitForLastOperation>
 8004588:	4603      	mov	r3, r0
 800458a:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
#ifdef CORE_CM0PLUS
    CLEAR_BIT(FLASH->C2CR, TypeProgram);
#else
    CLEAR_BIT(FLASH->CR, TypeProgram);
 800458c:	4b08      	ldr	r3, [pc, #32]	@ (80045b0 <HAL_FLASH_Program+0x84>)
 800458e:	695a      	ldr	r2, [r3, #20]
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	43db      	mvns	r3, r3
 8004594:	4906      	ldr	r1, [pc, #24]	@ (80045b0 <HAL_FLASH_Program+0x84>)
 8004596:	4013      	ands	r3, r2
 8004598:	614b      	str	r3, [r1, #20]
#endif
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800459a:	4b04      	ldr	r3, [pc, #16]	@ (80045ac <HAL_FLASH_Program+0x80>)
 800459c:	2200      	movs	r2, #0
 800459e:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 80045a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80045a2:	4618      	mov	r0, r3
 80045a4:	3718      	adds	r7, #24
 80045a6:	46bd      	mov	sp, r7
 80045a8:	bd80      	pop	{r7, pc}
 80045aa:	bf00      	nop
 80045ac:	20000320 	.word	0x20000320
 80045b0:	58004000 	.word	0x58004000

080045b4 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80045b4:	b480      	push	{r7}
 80045b6:	b083      	sub	sp, #12
 80045b8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80045ba:	2300      	movs	r3, #0
 80045bc:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 80045be:	4b0b      	ldr	r3, [pc, #44]	@ (80045ec <HAL_FLASH_Unlock+0x38>)
 80045c0:	695b      	ldr	r3, [r3, #20]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	da0b      	bge.n	80045de <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80045c6:	4b09      	ldr	r3, [pc, #36]	@ (80045ec <HAL_FLASH_Unlock+0x38>)
 80045c8:	4a09      	ldr	r2, [pc, #36]	@ (80045f0 <HAL_FLASH_Unlock+0x3c>)
 80045ca:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80045cc:	4b07      	ldr	r3, [pc, #28]	@ (80045ec <HAL_FLASH_Unlock+0x38>)
 80045ce:	4a09      	ldr	r2, [pc, #36]	@ (80045f4 <HAL_FLASH_Unlock+0x40>)
 80045d0:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlock */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 80045d2:	4b06      	ldr	r3, [pc, #24]	@ (80045ec <HAL_FLASH_Unlock+0x38>)
 80045d4:	695b      	ldr	r3, [r3, #20]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	da01      	bge.n	80045de <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80045da:	2301      	movs	r3, #1
 80045dc:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80045de:	79fb      	ldrb	r3, [r7, #7]
}
 80045e0:	4618      	mov	r0, r3
 80045e2:	370c      	adds	r7, #12
 80045e4:	46bd      	mov	sp, r7
 80045e6:	bc80      	pop	{r7}
 80045e8:	4770      	bx	lr
 80045ea:	bf00      	nop
 80045ec:	58004000 	.word	0x58004000
 80045f0:	45670123 	.word	0x45670123
 80045f4:	cdef89ab 	.word	0xcdef89ab

080045f8 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80045f8:	b480      	push	{r7}
 80045fa:	b083      	sub	sp, #12
 80045fc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80045fe:	2300      	movs	r3, #0
 8004600:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  /* @Note  The lock and unlock procedure is done only using CR registers even from CPU2 */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8004602:	4b09      	ldr	r3, [pc, #36]	@ (8004628 <HAL_FLASH_Lock+0x30>)
 8004604:	695b      	ldr	r3, [r3, #20]
 8004606:	4a08      	ldr	r2, [pc, #32]	@ (8004628 <HAL_FLASH_Lock+0x30>)
 8004608:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800460c:	6153      	str	r3, [r2, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) == 0U)
 800460e:	4b06      	ldr	r3, [pc, #24]	@ (8004628 <HAL_FLASH_Lock+0x30>)
 8004610:	695b      	ldr	r3, [r3, #20]
 8004612:	2b00      	cmp	r3, #0
 8004614:	db01      	blt.n	800461a <HAL_FLASH_Lock+0x22>
  {
    status = HAL_ERROR;
 8004616:	2301      	movs	r3, #1
 8004618:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800461a:	79fb      	ldrb	r3, [r7, #7]
}
 800461c:	4618      	mov	r0, r3
 800461e:	370c      	adds	r7, #12
 8004620:	46bd      	mov	sp, r7
 8004622:	bc80      	pop	{r7}
 8004624:	4770      	bx	lr
 8004626:	bf00      	nop
 8004628:	58004000 	.word	0x58004000

0800462c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout Maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 800462c:	b580      	push	{r7, lr}
 800462e:	b084      	sub	sp, #16
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
  uint32_t error;
  uint32_t tickstart = HAL_GetTick();
 8004634:	f7fd fb58 	bl	8001ce8 <HAL_GetTick>
 8004638:	60f8      	str	r0, [r7, #12]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 800463a:	e009      	b.n	8004650 <FLASH_WaitForLastOperation+0x24>
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 800463c:	f7fd fb54 	bl	8001ce8 <HAL_GetTick>
 8004640:	4602      	mov	r2, r0
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	1ad3      	subs	r3, r2, r3
 8004646:	687a      	ldr	r2, [r7, #4]
 8004648:	429a      	cmp	r2, r3
 800464a:	d801      	bhi.n	8004650 <FLASH_WaitForLastOperation+0x24>
    {
      return HAL_TIMEOUT;
 800464c:	2303      	movs	r3, #3
 800464e:	e046      	b.n	80046de <FLASH_WaitForLastOperation+0xb2>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8004650:	4b25      	ldr	r3, [pc, #148]	@ (80046e8 <FLASH_WaitForLastOperation+0xbc>)
 8004652:	691b      	ldr	r3, [r3, #16]
 8004654:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004658:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800465c:	d0ee      	beq.n	800463c <FLASH_WaitForLastOperation+0x10>
  /* check flash errors. Only ECC correction can be checked here as ECCD
      generates NMI */
#ifdef CORE_CM0PLUS
  error = FLASH->C2SR;
#else
  error = FLASH->SR;
 800465e:	4b22      	ldr	r3, [pc, #136]	@ (80046e8 <FLASH_WaitForLastOperation+0xbc>)
 8004660:	691b      	ldr	r3, [r3, #16]
 8004662:	60bb      	str	r3, [r7, #8]
#endif

  /* Check FLASH End of Operation flag */
  if ((error & FLASH_FLAG_EOP) != 0U)
 8004664:	68bb      	ldr	r3, [r7, #8]
 8004666:	f003 0301 	and.w	r3, r3, #1
 800466a:	2b00      	cmp	r3, #0
 800466c:	d002      	beq.n	8004674 <FLASH_WaitForLastOperation+0x48>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800466e:	4b1e      	ldr	r3, [pc, #120]	@ (80046e8 <FLASH_WaitForLastOperation+0xbc>)
 8004670:	2201      	movs	r2, #1
 8004672:	611a      	str	r2, [r3, #16]
  }

  /* Now update error variable to only error value */
  error &= FLASH_FLAG_SR_ERRORS;
 8004674:	68ba      	ldr	r2, [r7, #8]
 8004676:	f24c 33fa 	movw	r3, #50170	@ 0xc3fa
 800467a:	4013      	ands	r3, r2
 800467c:	60bb      	str	r3, [r7, #8]

  /* clear error flags */
  __HAL_FLASH_CLEAR_FLAG(error);
 800467e:	68bb      	ldr	r3, [r7, #8]
 8004680:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004684:	d307      	bcc.n	8004696 <FLASH_WaitForLastOperation+0x6a>
 8004686:	4b18      	ldr	r3, [pc, #96]	@ (80046e8 <FLASH_WaitForLastOperation+0xbc>)
 8004688:	699a      	ldr	r2, [r3, #24]
 800468a:	68bb      	ldr	r3, [r7, #8]
 800468c:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8004690:	4915      	ldr	r1, [pc, #84]	@ (80046e8 <FLASH_WaitForLastOperation+0xbc>)
 8004692:	4313      	orrs	r3, r2
 8004694:	618b      	str	r3, [r1, #24]
 8004696:	68bb      	ldr	r3, [r7, #8]
 8004698:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 800469c:	2b00      	cmp	r3, #0
 800469e:	d004      	beq.n	80046aa <FLASH_WaitForLastOperation+0x7e>
 80046a0:	4a11      	ldr	r2, [pc, #68]	@ (80046e8 <FLASH_WaitForLastOperation+0xbc>)
 80046a2:	68bb      	ldr	r3, [r7, #8]
 80046a4:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 80046a8:	6113      	str	r3, [r2, #16]

  if (error != 0U)
 80046aa:	68bb      	ldr	r3, [r7, #8]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d00e      	beq.n	80046ce <FLASH_WaitForLastOperation+0xa2>
  {
    /*Save the error code*/
    pFlash.ErrorCode = error;
 80046b0:	4a0e      	ldr	r2, [pc, #56]	@ (80046ec <FLASH_WaitForLastOperation+0xc0>)
 80046b2:	68bb      	ldr	r3, [r7, #8]
 80046b4:	6053      	str	r3, [r2, #4]

    return HAL_ERROR;
 80046b6:	2301      	movs	r3, #1
 80046b8:	e011      	b.n	80046de <FLASH_WaitForLastOperation+0xb2>
  }

  /* Wait for control register to be written */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 80046ba:	f7fd fb15 	bl	8001ce8 <HAL_GetTick>
 80046be:	4602      	mov	r2, r0
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	1ad3      	subs	r3, r2, r3
 80046c4:	687a      	ldr	r2, [r7, #4]
 80046c6:	429a      	cmp	r2, r3
 80046c8:	d801      	bhi.n	80046ce <FLASH_WaitForLastOperation+0xa2>
    {
      return HAL_TIMEOUT;
 80046ca:	2303      	movs	r3, #3
 80046cc:	e007      	b.n	80046de <FLASH_WaitForLastOperation+0xb2>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
 80046ce:	4b06      	ldr	r3, [pc, #24]	@ (80046e8 <FLASH_WaitForLastOperation+0xbc>)
 80046d0:	691b      	ldr	r3, [r3, #16]
 80046d2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80046d6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80046da:	d0ee      	beq.n	80046ba <FLASH_WaitForLastOperation+0x8e>
    }
  }

  return HAL_OK;
 80046dc:	2300      	movs	r3, #0
}
 80046de:	4618      	mov	r0, r3
 80046e0:	3710      	adds	r7, #16
 80046e2:	46bd      	mov	sp, r7
 80046e4:	bd80      	pop	{r7, pc}
 80046e6:	bf00      	nop
 80046e8:	58004000 	.word	0x58004000
 80046ec:	20000320 	.word	0x20000320

080046f0 <FLASH_Program_DoubleWord>:
  * @param  Address Specifies the address to be programmed.
  * @param  Data Specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80046f0:	b480      	push	{r7}
 80046f2:	b085      	sub	sp, #20
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	60f8      	str	r0, [r7, #12]
 80046f8:	e9c7 2300 	strd	r2, r3, [r7]
#ifdef CORE_CM0PLUS
  /* Set PG bit */
  SET_BIT(FLASH->C2CR, FLASH_CR_PG);
#else
  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 80046fc:	4b0e      	ldr	r3, [pc, #56]	@ (8004738 <FLASH_Program_DoubleWord+0x48>)
 80046fe:	695b      	ldr	r3, [r3, #20]
 8004700:	4a0d      	ldr	r2, [pc, #52]	@ (8004738 <FLASH_Program_DoubleWord+0x48>)
 8004702:	f043 0301 	orr.w	r3, r3, #1
 8004706:	6153      	str	r3, [r2, #20]
#endif

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	683a      	ldr	r2, [r7, #0]
 800470c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 800470e:	f3bf 8f6f 	isb	sy
}
 8004712:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 8004714:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004718:	f04f 0200 	mov.w	r2, #0
 800471c:	f04f 0300 	mov.w	r3, #0
 8004720:	000a      	movs	r2, r1
 8004722:	2300      	movs	r3, #0
 8004724:	68f9      	ldr	r1, [r7, #12]
 8004726:	3104      	adds	r1, #4
 8004728:	4613      	mov	r3, r2
 800472a:	600b      	str	r3, [r1, #0]
}
 800472c:	bf00      	nop
 800472e:	3714      	adds	r7, #20
 8004730:	46bd      	mov	sp, r7
 8004732:	bc80      	pop	{r7}
 8004734:	4770      	bx	lr
 8004736:	bf00      	nop
 8004738:	58004000 	.word	0x58004000

0800473c <FLASH_Program_Fast>:
#ifdef CORE_CM0PLUS
static __RAM_FUNC void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
#else
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
#endif
{
 800473c:	b480      	push	{r7}
 800473e:	b089      	sub	sp, #36	@ 0x24
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
 8004744:	6039      	str	r1, [r7, #0]
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
 8004746:	2340      	movs	r3, #64	@ 0x40
 8004748:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t *)Address;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t *)DataAddress;
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	617b      	str	r3, [r7, #20]

  /* Set FSTPG bit */
#ifdef CORE_CM0PLUS
  SET_BIT(FLASH->C2CR, FLASH_CR_FSTPG);
#else
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8004752:	4b18      	ldr	r3, [pc, #96]	@ (80047b4 <FLASH_Program_Fast+0x78>)
 8004754:	695b      	ldr	r3, [r3, #20]
 8004756:	4a17      	ldr	r2, [pc, #92]	@ (80047b4 <FLASH_Program_Fast+0x78>)
 8004758:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800475c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800475e:	f3ef 8310 	mrs	r3, PRIMASK
 8004762:	60fb      	str	r3, [r7, #12]
  return(result);
 8004764:	68fb      	ldr	r3, [r7, #12]
#endif

  /* Enter critical section: row programming should not be longer than 7 ms */
  primask_bit = __get_PRIMASK();
 8004766:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8004768:	b672      	cpsid	i
}
 800476a:	bf00      	nop
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 800476c:	697b      	ldr	r3, [r7, #20]
 800476e:	681a      	ldr	r2, [r3, #0]
 8004770:	69bb      	ldr	r3, [r7, #24]
 8004772:	601a      	str	r2, [r3, #0]
    dest_addr++;
 8004774:	69bb      	ldr	r3, [r7, #24]
 8004776:	3304      	adds	r3, #4
 8004778:	61bb      	str	r3, [r7, #24]
    src_addr++;
 800477a:	697b      	ldr	r3, [r7, #20]
 800477c:	3304      	adds	r3, #4
 800477e:	617b      	str	r3, [r7, #20]
    row_index--;
 8004780:	7ffb      	ldrb	r3, [r7, #31]
 8004782:	3b01      	subs	r3, #1
 8004784:	77fb      	strb	r3, [r7, #31]
  }
  while (row_index != 0U);
 8004786:	7ffb      	ldrb	r3, [r7, #31]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d1ef      	bne.n	800476c <FLASH_Program_Fast+0x30>

  /* wait for BSY in order to be sure that flash operation is ended before
     allowing prefetch in flash. Timeout does not return status, as it will
     be anyway done later */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != 0U)
 800478c:	bf00      	nop
 800478e:	4b09      	ldr	r3, [pc, #36]	@ (80047b4 <FLASH_Program_Fast+0x78>)
 8004790:	691b      	ldr	r3, [r3, #16]
 8004792:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004796:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800479a:	d0f8      	beq.n	800478e <FLASH_Program_Fast+0x52>
 800479c:	693b      	ldr	r3, [r7, #16]
 800479e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047a0:	68bb      	ldr	r3, [r7, #8]
 80047a2:	f383 8810 	msr	PRIMASK, r3
}
 80047a6:	bf00      	nop
  {
  }

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 80047a8:	bf00      	nop
 80047aa:	3724      	adds	r7, #36	@ 0x24
 80047ac:	46bd      	mov	sp, r7
 80047ae:	bc80      	pop	{r7}
 80047b0:	4770      	bx	lr
 80047b2:	bf00      	nop
 80047b4:	58004000 	.word	0x58004000

080047b8 <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased)
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b084      	sub	sp, #16
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
 80047c0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80047c2:	4b28      	ldr	r3, [pc, #160]	@ (8004864 <HAL_FLASHEx_Erase+0xac>)
 80047c4:	781b      	ldrb	r3, [r3, #0]
 80047c6:	2b01      	cmp	r3, #1
 80047c8:	d101      	bne.n	80047ce <HAL_FLASHEx_Erase+0x16>
 80047ca:	2302      	movs	r3, #2
 80047cc:	e046      	b.n	800485c <HAL_FLASHEx_Erase+0xa4>
 80047ce:	4b25      	ldr	r3, [pc, #148]	@ (8004864 <HAL_FLASHEx_Erase+0xac>)
 80047d0:	2201      	movs	r2, #1
 80047d2:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80047d4:	4b23      	ldr	r3, [pc, #140]	@ (8004864 <HAL_FLASHEx_Erase+0xac>)
 80047d6:	2200      	movs	r2, #0
 80047d8:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80047da:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80047de:	f7ff ff25 	bl	800462c <FLASH_WaitForLastOperation>
 80047e2:	4603      	mov	r3, r0
 80047e4:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80047e6:	7bfb      	ldrb	r3, [r7, #15]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d133      	bne.n	8004854 <HAL_FLASHEx_Erase+0x9c>
  {
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	2b04      	cmp	r3, #4
 80047f2:	d108      	bne.n	8004806 <HAL_FLASHEx_Erase+0x4e>
    {
      /* Mass erase to be done */
      FLASH_MassErase();
 80047f4:	f000 f880 	bl	80048f8 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80047f8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80047fc:	f7ff ff16 	bl	800462c <FLASH_WaitForLastOperation>
 8004800:	4603      	mov	r3, r0
 8004802:	73fb      	strb	r3, [r7, #15]
 8004804:	e024      	b.n	8004850 <HAL_FLASHEx_Erase+0x98>
      /* If operation is completed or interrupted, no need to clear the Mass Erase Bit */
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	f04f 32ff 	mov.w	r2, #4294967295
 800480c:	601a      	str	r2, [r3, #0]

      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	685b      	ldr	r3, [r3, #4]
 8004812:	60bb      	str	r3, [r7, #8]
 8004814:	e012      	b.n	800483c <HAL_FLASHEx_Erase+0x84>
      {
        /* Start erase page */
        FLASH_PageErase(index);
 8004816:	68b8      	ldr	r0, [r7, #8]
 8004818:	f000 f87e 	bl	8004918 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800481c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8004820:	f7ff ff04 	bl	800462c <FLASH_WaitForLastOperation>
 8004824:	4603      	mov	r3, r0
 8004826:	73fb      	strb	r3, [r7, #15]

        if (status != HAL_OK)
 8004828:	7bfb      	ldrb	r3, [r7, #15]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d003      	beq.n	8004836 <HAL_FLASHEx_Erase+0x7e>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = index;
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	68ba      	ldr	r2, [r7, #8]
 8004832:	601a      	str	r2, [r3, #0]
          break;
 8004834:	e00a      	b.n	800484c <HAL_FLASHEx_Erase+0x94>
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8004836:	68bb      	ldr	r3, [r7, #8]
 8004838:	3301      	adds	r3, #1
 800483a:	60bb      	str	r3, [r7, #8]
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	685a      	ldr	r2, [r3, #4]
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	689b      	ldr	r3, [r3, #8]
 8004844:	4413      	add	r3, r2
 8004846:	68ba      	ldr	r2, [r7, #8]
 8004848:	429a      	cmp	r2, r3
 800484a:	d3e4      	bcc.n	8004816 <HAL_FLASHEx_Erase+0x5e>
        }
      }

      /* If operation is completed or interrupted, disable the Page Erase Bit */
      FLASH_AcknowledgePageErase();
 800484c:	f000 f8c0 	bl	80049d0 <FLASH_AcknowledgePageErase>
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8004850:	f000 f87a 	bl	8004948 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8004854:	4b03      	ldr	r3, [pc, #12]	@ (8004864 <HAL_FLASHEx_Erase+0xac>)
 8004856:	2200      	movs	r2, #0
 8004858:	701a      	strb	r2, [r3, #0]

  return status;
 800485a:	7bfb      	ldrb	r3, [r7, #15]
}
 800485c:	4618      	mov	r0, r3
 800485e:	3710      	adds	r7, #16
 8004860:	46bd      	mov	sp, r7
 8004862:	bd80      	pop	{r7, pc}
 8004864:	20000320 	.word	0x20000320

08004868 <HAL_FLASHEx_Erase_IT>:
  * @param  pEraseInit Pointer to an @ref FLASH_EraseInitTypeDef structure that
  *         contains the configuration information for the erasing.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase_IT(FLASH_EraseInitTypeDef *pEraseInit)
{
 8004868:	b580      	push	{r7, lr}
 800486a:	b084      	sub	sp, #16
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8004870:	4b1f      	ldr	r3, [pc, #124]	@ (80048f0 <HAL_FLASHEx_Erase_IT+0x88>)
 8004872:	781b      	ldrb	r3, [r3, #0]
 8004874:	2b01      	cmp	r3, #1
 8004876:	d101      	bne.n	800487c <HAL_FLASHEx_Erase_IT+0x14>
 8004878:	2302      	movs	r3, #2
 800487a:	e034      	b.n	80048e6 <HAL_FLASHEx_Erase_IT+0x7e>
 800487c:	4b1c      	ldr	r3, [pc, #112]	@ (80048f0 <HAL_FLASHEx_Erase_IT+0x88>)
 800487e:	2201      	movs	r2, #1
 8004880:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004882:	4b1b      	ldr	r3, [pc, #108]	@ (80048f0 <HAL_FLASHEx_Erase_IT+0x88>)
 8004884:	2200      	movs	r2, #0
 8004886:	605a      	str	r2, [r3, #4]

  /* save procedure for interrupt treatment */
  pFlash.ProcedureOnGoing = pEraseInit->TypeErase;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	4a18      	ldr	r2, [pc, #96]	@ (80048f0 <HAL_FLASHEx_Erase_IT+0x88>)
 800488e:	6093      	str	r3, [r2, #8]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004890:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8004894:	f7ff feca 	bl	800462c <FLASH_WaitForLastOperation>
 8004898:	4603      	mov	r3, r0
 800489a:	73fb      	strb	r3, [r7, #15]

  if (status != HAL_OK)
 800489c:	7bfb      	ldrb	r3, [r7, #15]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d003      	beq.n	80048aa <HAL_FLASHEx_Erase_IT+0x42>
  {
    /* Process Unlocked */
    __HAL_UNLOCK(&pFlash);
 80048a2:	4b13      	ldr	r3, [pc, #76]	@ (80048f0 <HAL_FLASHEx_Erase_IT+0x88>)
 80048a4:	2200      	movs	r2, #0
 80048a6:	701a      	strb	r2, [r3, #0]
 80048a8:	e01c      	b.n	80048e4 <HAL_FLASHEx_Erase_IT+0x7c>
  }
  else
  {
    /* Enable End of Operation and Error interrupts */
    __HAL_FLASH_ENABLE_IT(FLASH_IT_EOP | FLASH_IT_OPERR);
 80048aa:	4b12      	ldr	r3, [pc, #72]	@ (80048f4 <HAL_FLASHEx_Erase_IT+0x8c>)
 80048ac:	695b      	ldr	r3, [r3, #20]
 80048ae:	4a11      	ldr	r2, [pc, #68]	@ (80048f4 <HAL_FLASHEx_Erase_IT+0x8c>)
 80048b0:	f043 7340 	orr.w	r3, r3, #50331648	@ 0x3000000
 80048b4:	6153      	str	r3, [r2, #20]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	2b04      	cmp	r3, #4
 80048bc:	d105      	bne.n	80048ca <HAL_FLASHEx_Erase_IT+0x62>
    {
      /* Set Page to 0 for Interrupt callback management */
      pFlash.Page = 0;
 80048be:	4b0c      	ldr	r3, [pc, #48]	@ (80048f0 <HAL_FLASHEx_Erase_IT+0x88>)
 80048c0:	2200      	movs	r2, #0
 80048c2:	611a      	str	r2, [r3, #16]

      /* Proceed to Mass Erase */
      FLASH_MassErase();
 80048c4:	f000 f818 	bl	80048f8 <FLASH_MassErase>
 80048c8:	e00c      	b.n	80048e4 <HAL_FLASHEx_Erase_IT+0x7c>
    }
    else
    {
      /* Erase by page to be done */
      pFlash.NbPagesToErase = pEraseInit->NbPages;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	689b      	ldr	r3, [r3, #8]
 80048ce:	4a08      	ldr	r2, [pc, #32]	@ (80048f0 <HAL_FLASHEx_Erase_IT+0x88>)
 80048d0:	6153      	str	r3, [r2, #20]
      pFlash.Page = pEraseInit->Page;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	685b      	ldr	r3, [r3, #4]
 80048d6:	4a06      	ldr	r2, [pc, #24]	@ (80048f0 <HAL_FLASHEx_Erase_IT+0x88>)
 80048d8:	6113      	str	r3, [r2, #16]

      /*Erase 1st page and wait for IT */
      FLASH_PageErase(pEraseInit->Page);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	685b      	ldr	r3, [r3, #4]
 80048de:	4618      	mov	r0, r3
 80048e0:	f000 f81a 	bl	8004918 <FLASH_PageErase>
    }
  }

  /* return status */
  return status;
 80048e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80048e6:	4618      	mov	r0, r3
 80048e8:	3710      	adds	r7, #16
 80048ea:	46bd      	mov	sp, r7
 80048ec:	bd80      	pop	{r7, pc}
 80048ee:	bf00      	nop
 80048f0:	20000320 	.word	0x20000320
 80048f4:	58004000 	.word	0x58004000

080048f8 <FLASH_MassErase>:
/**
  * @brief  Mass erase of FLASH memory.
  * @retval None
  */
static void FLASH_MassErase(void)
{
 80048f8:	b480      	push	{r7}
 80048fa:	af00      	add	r7, sp, #0
  /* Set the Mass Erase Bit and start bit */
#ifdef CORE_CM0PLUS
  SET_BIT(FLASH->C2CR, (FLASH_CR_MER | FLASH_CR_STRT));
#else
  SET_BIT(FLASH->CR, (FLASH_CR_MER | FLASH_CR_STRT));
 80048fc:	4b05      	ldr	r3, [pc, #20]	@ (8004914 <FLASH_MassErase+0x1c>)
 80048fe:	695b      	ldr	r3, [r3, #20]
 8004900:	4a04      	ldr	r2, [pc, #16]	@ (8004914 <FLASH_MassErase+0x1c>)
 8004902:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004906:	f043 0304 	orr.w	r3, r3, #4
 800490a:	6153      	str	r3, [r2, #20]
#endif
}
 800490c:	bf00      	nop
 800490e:	46bd      	mov	sp, r7
 8004910:	bc80      	pop	{r7}
 8004912:	4770      	bx	lr
 8004914:	58004000 	.word	0x58004000

08004918 <FLASH_PageErase>:
  * @param  Page FLASH page to erase
  *         This parameter must be a value between 0 and (max number of pages in Flash - 1)
  * @retval None
  */
void FLASH_PageErase(uint32_t Page)
{
 8004918:	b480      	push	{r7}
 800491a:	b083      	sub	sp, #12
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]

  /* Proceed to erase the page */
#ifdef CORE_CM0PLUS
  MODIFY_REG(FLASH->C2CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
#else
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
 8004920:	4b08      	ldr	r3, [pc, #32]	@ (8004944 <FLASH_PageErase+0x2c>)
 8004922:	695b      	ldr	r3, [r3, #20]
 8004924:	f423 727e 	bic.w	r2, r3, #1016	@ 0x3f8
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	00db      	lsls	r3, r3, #3
 800492c:	4313      	orrs	r3, r2
 800492e:	4a05      	ldr	r2, [pc, #20]	@ (8004944 <FLASH_PageErase+0x2c>)
 8004930:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004934:	f043 0302 	orr.w	r3, r3, #2
 8004938:	6153      	str	r3, [r2, #20]
#endif
}
 800493a:	bf00      	nop
 800493c:	370c      	adds	r7, #12
 800493e:	46bd      	mov	sp, r7
 8004940:	bc80      	pop	{r7}
 8004942:	4770      	bx	lr
 8004944:	58004000 	.word	0x58004000

08004948 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8004948:	b480      	push	{r7}
 800494a:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) == 1U)
 800494c:	4b1f      	ldr	r3, [pc, #124]	@ (80049cc <FLASH_FlushCaches+0x84>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004954:	2b01      	cmp	r3, #1
 8004956:	d117      	bne.n	8004988 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8004958:	4b1c      	ldr	r3, [pc, #112]	@ (80049cc <FLASH_FlushCaches+0x84>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4a1b      	ldr	r2, [pc, #108]	@ (80049cc <FLASH_FlushCaches+0x84>)
 800495e:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004962:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8004964:	4b19      	ldr	r3, [pc, #100]	@ (80049cc <FLASH_FlushCaches+0x84>)
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	4a18      	ldr	r2, [pc, #96]	@ (80049cc <FLASH_FlushCaches+0x84>)
 800496a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800496e:	6013      	str	r3, [r2, #0]
 8004970:	4b16      	ldr	r3, [pc, #88]	@ (80049cc <FLASH_FlushCaches+0x84>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	4a15      	ldr	r2, [pc, #84]	@ (80049cc <FLASH_FlushCaches+0x84>)
 8004976:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800497a:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800497c:	4b13      	ldr	r3, [pc, #76]	@ (80049cc <FLASH_FlushCaches+0x84>)
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	4a12      	ldr	r2, [pc, #72]	@ (80049cc <FLASH_FlushCaches+0x84>)
 8004982:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004986:	6013      	str	r3, [r2, #0]
  }

#ifdef CORE_CM0PLUS
#else
  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) == 1U)
 8004988:	4b10      	ldr	r3, [pc, #64]	@ (80049cc <FLASH_FlushCaches+0x84>)
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004990:	2b01      	cmp	r3, #1
 8004992:	d117      	bne.n	80049c4 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8004994:	4b0d      	ldr	r3, [pc, #52]	@ (80049cc <FLASH_FlushCaches+0x84>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	4a0c      	ldr	r2, [pc, #48]	@ (80049cc <FLASH_FlushCaches+0x84>)
 800499a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800499e:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 80049a0:	4b0a      	ldr	r3, [pc, #40]	@ (80049cc <FLASH_FlushCaches+0x84>)
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	4a09      	ldr	r2, [pc, #36]	@ (80049cc <FLASH_FlushCaches+0x84>)
 80049a6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80049aa:	6013      	str	r3, [r2, #0]
 80049ac:	4b07      	ldr	r3, [pc, #28]	@ (80049cc <FLASH_FlushCaches+0x84>)
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	4a06      	ldr	r2, [pc, #24]	@ (80049cc <FLASH_FlushCaches+0x84>)
 80049b2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80049b6:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80049b8:	4b04      	ldr	r3, [pc, #16]	@ (80049cc <FLASH_FlushCaches+0x84>)
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	4a03      	ldr	r2, [pc, #12]	@ (80049cc <FLASH_FlushCaches+0x84>)
 80049be:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80049c2:	6013      	str	r3, [r2, #0]
  }
#endif
}
 80049c4:	bf00      	nop
 80049c6:	46bd      	mov	sp, r7
 80049c8:	bc80      	pop	{r7}
 80049ca:	4770      	bx	lr
 80049cc:	58004000 	.word	0x58004000

080049d0 <FLASH_AcknowledgePageErase>:
/**
  * @brief  Acknlowldge the page erase operation.
  * @retval None
  */
static void FLASH_AcknowledgePageErase(void)
{
 80049d0:	b480      	push	{r7}
 80049d2:	af00      	add	r7, sp, #0
#ifdef CORE_CM0PLUS
  CLEAR_BIT(FLASH->C2CR, (FLASH_CR_PER | FLASH_CR_PNB));
#else
  CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 80049d4:	4b05      	ldr	r3, [pc, #20]	@ (80049ec <FLASH_AcknowledgePageErase+0x1c>)
 80049d6:	695b      	ldr	r3, [r3, #20]
 80049d8:	4a04      	ldr	r2, [pc, #16]	@ (80049ec <FLASH_AcknowledgePageErase+0x1c>)
 80049da:	f423 737e 	bic.w	r3, r3, #1016	@ 0x3f8
 80049de:	f023 0302 	bic.w	r3, r3, #2
 80049e2:	6153      	str	r3, [r2, #20]
#endif
}
 80049e4:	bf00      	nop
 80049e6:	46bd      	mov	sp, r7
 80049e8:	bc80      	pop	{r7}
 80049ea:	4770      	bx	lr
 80049ec:	58004000 	.word	0x58004000

080049f0 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80049f0:	b480      	push	{r7}
 80049f2:	b087      	sub	sp, #28
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
 80049f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80049fa:	2300      	movs	r3, #0
 80049fc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80049fe:	e140      	b.n	8004c82 <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	681a      	ldr	r2, [r3, #0]
 8004a04:	2101      	movs	r1, #1
 8004a06:	697b      	ldr	r3, [r7, #20]
 8004a08:	fa01 f303 	lsl.w	r3, r1, r3
 8004a0c:	4013      	ands	r3, r2
 8004a0e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	f000 8132 	beq.w	8004c7c <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	685b      	ldr	r3, [r3, #4]
 8004a1c:	f003 0303 	and.w	r3, r3, #3
 8004a20:	2b01      	cmp	r3, #1
 8004a22:	d005      	beq.n	8004a30 <HAL_GPIO_Init+0x40>
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	685b      	ldr	r3, [r3, #4]
 8004a28:	f003 0303 	and.w	r3, r3, #3
 8004a2c:	2b02      	cmp	r3, #2
 8004a2e:	d130      	bne.n	8004a92 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	689b      	ldr	r3, [r3, #8]
 8004a34:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004a36:	697b      	ldr	r3, [r7, #20]
 8004a38:	005b      	lsls	r3, r3, #1
 8004a3a:	2203      	movs	r2, #3
 8004a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8004a40:	43db      	mvns	r3, r3
 8004a42:	693a      	ldr	r2, [r7, #16]
 8004a44:	4013      	ands	r3, r2
 8004a46:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	68da      	ldr	r2, [r3, #12]
 8004a4c:	697b      	ldr	r3, [r7, #20]
 8004a4e:	005b      	lsls	r3, r3, #1
 8004a50:	fa02 f303 	lsl.w	r3, r2, r3
 8004a54:	693a      	ldr	r2, [r7, #16]
 8004a56:	4313      	orrs	r3, r2
 8004a58:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	693a      	ldr	r2, [r7, #16]
 8004a5e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	685b      	ldr	r3, [r3, #4]
 8004a64:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004a66:	2201      	movs	r2, #1
 8004a68:	697b      	ldr	r3, [r7, #20]
 8004a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8004a6e:	43db      	mvns	r3, r3
 8004a70:	693a      	ldr	r2, [r7, #16]
 8004a72:	4013      	ands	r3, r2
 8004a74:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	685b      	ldr	r3, [r3, #4]
 8004a7a:	091b      	lsrs	r3, r3, #4
 8004a7c:	f003 0201 	and.w	r2, r3, #1
 8004a80:	697b      	ldr	r3, [r7, #20]
 8004a82:	fa02 f303 	lsl.w	r3, r2, r3
 8004a86:	693a      	ldr	r2, [r7, #16]
 8004a88:	4313      	orrs	r3, r2
 8004a8a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	693a      	ldr	r2, [r7, #16]
 8004a90:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	685b      	ldr	r3, [r3, #4]
 8004a96:	f003 0303 	and.w	r3, r3, #3
 8004a9a:	2b03      	cmp	r3, #3
 8004a9c:	d017      	beq.n	8004ace <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	68db      	ldr	r3, [r3, #12]
 8004aa2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004aa4:	697b      	ldr	r3, [r7, #20]
 8004aa6:	005b      	lsls	r3, r3, #1
 8004aa8:	2203      	movs	r2, #3
 8004aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8004aae:	43db      	mvns	r3, r3
 8004ab0:	693a      	ldr	r2, [r7, #16]
 8004ab2:	4013      	ands	r3, r2
 8004ab4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	689a      	ldr	r2, [r3, #8]
 8004aba:	697b      	ldr	r3, [r7, #20]
 8004abc:	005b      	lsls	r3, r3, #1
 8004abe:	fa02 f303 	lsl.w	r3, r2, r3
 8004ac2:	693a      	ldr	r2, [r7, #16]
 8004ac4:	4313      	orrs	r3, r2
 8004ac6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	693a      	ldr	r2, [r7, #16]
 8004acc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	685b      	ldr	r3, [r3, #4]
 8004ad2:	f003 0303 	and.w	r3, r3, #3
 8004ad6:	2b02      	cmp	r3, #2
 8004ad8:	d123      	bne.n	8004b22 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004ada:	697b      	ldr	r3, [r7, #20]
 8004adc:	08da      	lsrs	r2, r3, #3
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	3208      	adds	r2, #8
 8004ae2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ae6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004ae8:	697b      	ldr	r3, [r7, #20]
 8004aea:	f003 0307 	and.w	r3, r3, #7
 8004aee:	009b      	lsls	r3, r3, #2
 8004af0:	220f      	movs	r2, #15
 8004af2:	fa02 f303 	lsl.w	r3, r2, r3
 8004af6:	43db      	mvns	r3, r3
 8004af8:	693a      	ldr	r2, [r7, #16]
 8004afa:	4013      	ands	r3, r2
 8004afc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	691a      	ldr	r2, [r3, #16]
 8004b02:	697b      	ldr	r3, [r7, #20]
 8004b04:	f003 0307 	and.w	r3, r3, #7
 8004b08:	009b      	lsls	r3, r3, #2
 8004b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8004b0e:	693a      	ldr	r2, [r7, #16]
 8004b10:	4313      	orrs	r3, r2
 8004b12:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004b14:	697b      	ldr	r3, [r7, #20]
 8004b16:	08da      	lsrs	r2, r3, #3
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	3208      	adds	r2, #8
 8004b1c:	6939      	ldr	r1, [r7, #16]
 8004b1e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004b28:	697b      	ldr	r3, [r7, #20]
 8004b2a:	005b      	lsls	r3, r3, #1
 8004b2c:	2203      	movs	r2, #3
 8004b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8004b32:	43db      	mvns	r3, r3
 8004b34:	693a      	ldr	r2, [r7, #16]
 8004b36:	4013      	ands	r3, r2
 8004b38:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004b3a:	683b      	ldr	r3, [r7, #0]
 8004b3c:	685b      	ldr	r3, [r3, #4]
 8004b3e:	f003 0203 	and.w	r2, r3, #3
 8004b42:	697b      	ldr	r3, [r7, #20]
 8004b44:	005b      	lsls	r3, r3, #1
 8004b46:	fa02 f303 	lsl.w	r3, r2, r3
 8004b4a:	693a      	ldr	r2, [r7, #16]
 8004b4c:	4313      	orrs	r3, r2
 8004b4e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	693a      	ldr	r2, [r7, #16]
 8004b54:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	685b      	ldr	r3, [r3, #4]
 8004b5a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	f000 808c 	beq.w	8004c7c <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8004b64:	4a4e      	ldr	r2, [pc, #312]	@ (8004ca0 <HAL_GPIO_Init+0x2b0>)
 8004b66:	697b      	ldr	r3, [r7, #20]
 8004b68:	089b      	lsrs	r3, r3, #2
 8004b6a:	3302      	adds	r3, #2
 8004b6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b70:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8004b72:	697b      	ldr	r3, [r7, #20]
 8004b74:	f003 0303 	and.w	r3, r3, #3
 8004b78:	009b      	lsls	r3, r3, #2
 8004b7a:	2207      	movs	r2, #7
 8004b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8004b80:	43db      	mvns	r3, r3
 8004b82:	693a      	ldr	r2, [r7, #16]
 8004b84:	4013      	ands	r3, r2
 8004b86:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004b8e:	d00d      	beq.n	8004bac <HAL_GPIO_Init+0x1bc>
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	4a44      	ldr	r2, [pc, #272]	@ (8004ca4 <HAL_GPIO_Init+0x2b4>)
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d007      	beq.n	8004ba8 <HAL_GPIO_Init+0x1b8>
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	4a43      	ldr	r2, [pc, #268]	@ (8004ca8 <HAL_GPIO_Init+0x2b8>)
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	d101      	bne.n	8004ba4 <HAL_GPIO_Init+0x1b4>
 8004ba0:	2302      	movs	r3, #2
 8004ba2:	e004      	b.n	8004bae <HAL_GPIO_Init+0x1be>
 8004ba4:	2307      	movs	r3, #7
 8004ba6:	e002      	b.n	8004bae <HAL_GPIO_Init+0x1be>
 8004ba8:	2301      	movs	r3, #1
 8004baa:	e000      	b.n	8004bae <HAL_GPIO_Init+0x1be>
 8004bac:	2300      	movs	r3, #0
 8004bae:	697a      	ldr	r2, [r7, #20]
 8004bb0:	f002 0203 	and.w	r2, r2, #3
 8004bb4:	0092      	lsls	r2, r2, #2
 8004bb6:	4093      	lsls	r3, r2
 8004bb8:	693a      	ldr	r2, [r7, #16]
 8004bba:	4313      	orrs	r3, r2
 8004bbc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004bbe:	4938      	ldr	r1, [pc, #224]	@ (8004ca0 <HAL_GPIO_Init+0x2b0>)
 8004bc0:	697b      	ldr	r3, [r7, #20]
 8004bc2:	089b      	lsrs	r3, r3, #2
 8004bc4:	3302      	adds	r3, #2
 8004bc6:	693a      	ldr	r2, [r7, #16]
 8004bc8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004bcc:	4b37      	ldr	r3, [pc, #220]	@ (8004cac <HAL_GPIO_Init+0x2bc>)
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	43db      	mvns	r3, r3
 8004bd6:	693a      	ldr	r2, [r7, #16]
 8004bd8:	4013      	ands	r3, r2
 8004bda:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	685b      	ldr	r3, [r3, #4]
 8004be0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d003      	beq.n	8004bf0 <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 8004be8:	693a      	ldr	r2, [r7, #16]
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	4313      	orrs	r3, r2
 8004bee:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004bf0:	4a2e      	ldr	r2, [pc, #184]	@ (8004cac <HAL_GPIO_Init+0x2bc>)
 8004bf2:	693b      	ldr	r3, [r7, #16]
 8004bf4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004bf6:	4b2d      	ldr	r3, [pc, #180]	@ (8004cac <HAL_GPIO_Init+0x2bc>)
 8004bf8:	685b      	ldr	r3, [r3, #4]
 8004bfa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	43db      	mvns	r3, r3
 8004c00:	693a      	ldr	r2, [r7, #16]
 8004c02:	4013      	ands	r3, r2
 8004c04:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	685b      	ldr	r3, [r3, #4]
 8004c0a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d003      	beq.n	8004c1a <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 8004c12:	693a      	ldr	r2, [r7, #16]
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	4313      	orrs	r3, r2
 8004c18:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004c1a:	4a24      	ldr	r2, [pc, #144]	@ (8004cac <HAL_GPIO_Init+0x2bc>)
 8004c1c:	693b      	ldr	r3, [r7, #16]
 8004c1e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8004c20:	4b22      	ldr	r3, [pc, #136]	@ (8004cac <HAL_GPIO_Init+0x2bc>)
 8004c22:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004c26:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	43db      	mvns	r3, r3
 8004c2c:	693a      	ldr	r2, [r7, #16]
 8004c2e:	4013      	ands	r3, r2
 8004c30:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	685b      	ldr	r3, [r3, #4]
 8004c36:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d003      	beq.n	8004c46 <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 8004c3e:	693a      	ldr	r2, [r7, #16]
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	4313      	orrs	r3, r2
 8004c44:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8004c46:	4a19      	ldr	r2, [pc, #100]	@ (8004cac <HAL_GPIO_Init+0x2bc>)
 8004c48:	693b      	ldr	r3, [r7, #16]
 8004c4a:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 8004c4e:	4b17      	ldr	r3, [pc, #92]	@ (8004cac <HAL_GPIO_Init+0x2bc>)
 8004c50:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004c54:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	43db      	mvns	r3, r3
 8004c5a:	693a      	ldr	r2, [r7, #16]
 8004c5c:	4013      	ands	r3, r2
 8004c5e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	685b      	ldr	r3, [r3, #4]
 8004c64:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d003      	beq.n	8004c74 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8004c6c:	693a      	ldr	r2, [r7, #16]
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	4313      	orrs	r3, r2
 8004c72:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8004c74:	4a0d      	ldr	r2, [pc, #52]	@ (8004cac <HAL_GPIO_Init+0x2bc>)
 8004c76:	693b      	ldr	r3, [r7, #16]
 8004c78:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 8004c7c:	697b      	ldr	r3, [r7, #20]
 8004c7e:	3301      	adds	r3, #1
 8004c80:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	681a      	ldr	r2, [r3, #0]
 8004c86:	697b      	ldr	r3, [r7, #20]
 8004c88:	fa22 f303 	lsr.w	r3, r2, r3
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	f47f aeb7 	bne.w	8004a00 <HAL_GPIO_Init+0x10>
  }
}
 8004c92:	bf00      	nop
 8004c94:	bf00      	nop
 8004c96:	371c      	adds	r7, #28
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	bc80      	pop	{r7}
 8004c9c:	4770      	bx	lr
 8004c9e:	bf00      	nop
 8004ca0:	40010000 	.word	0x40010000
 8004ca4:	48000400 	.word	0x48000400
 8004ca8:	48000800 	.word	0x48000800
 8004cac:	58000800 	.word	0x58000800

08004cb0 <HAL_GPIO_DeInit>:
  * @param GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004cb0:	b480      	push	{r7}
 8004cb2:	b087      	sub	sp, #28
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
 8004cb8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004cba:	2300      	movs	r3, #0
 8004cbc:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8004cbe:	e0af      	b.n	8004e20 <HAL_GPIO_DeInit+0x170>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8004cc0:	2201      	movs	r2, #1
 8004cc2:	697b      	ldr	r3, [r7, #20]
 8004cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8004cc8:	683a      	ldr	r2, [r7, #0]
 8004cca:	4013      	ands	r3, r2
 8004ccc:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8004cce:	693b      	ldr	r3, [r7, #16]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	f000 80a2 	beq.w	8004e1a <HAL_GPIO_DeInit+0x16a>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8004cd6:	4a59      	ldr	r2, [pc, #356]	@ (8004e3c <HAL_GPIO_DeInit+0x18c>)
 8004cd8:	697b      	ldr	r3, [r7, #20]
 8004cda:	089b      	lsrs	r3, r3, #2
 8004cdc:	3302      	adds	r3, #2
 8004cde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ce2:	60fb      	str	r3, [r7, #12]
      tmp &= (0x07uL << (4U * (position & 0x03U)));
 8004ce4:	697b      	ldr	r3, [r7, #20]
 8004ce6:	f003 0303 	and.w	r3, r3, #3
 8004cea:	009b      	lsls	r3, r3, #2
 8004cec:	2207      	movs	r2, #7
 8004cee:	fa02 f303 	lsl.w	r3, r2, r3
 8004cf2:	68fa      	ldr	r2, [r7, #12]
 8004cf4:	4013      	ands	r3, r2
 8004cf6:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004cfe:	d00d      	beq.n	8004d1c <HAL_GPIO_DeInit+0x6c>
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	4a4f      	ldr	r2, [pc, #316]	@ (8004e40 <HAL_GPIO_DeInit+0x190>)
 8004d04:	4293      	cmp	r3, r2
 8004d06:	d007      	beq.n	8004d18 <HAL_GPIO_DeInit+0x68>
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	4a4e      	ldr	r2, [pc, #312]	@ (8004e44 <HAL_GPIO_DeInit+0x194>)
 8004d0c:	4293      	cmp	r3, r2
 8004d0e:	d101      	bne.n	8004d14 <HAL_GPIO_DeInit+0x64>
 8004d10:	2302      	movs	r3, #2
 8004d12:	e004      	b.n	8004d1e <HAL_GPIO_DeInit+0x6e>
 8004d14:	2307      	movs	r3, #7
 8004d16:	e002      	b.n	8004d1e <HAL_GPIO_DeInit+0x6e>
 8004d18:	2301      	movs	r3, #1
 8004d1a:	e000      	b.n	8004d1e <HAL_GPIO_DeInit+0x6e>
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	697a      	ldr	r2, [r7, #20]
 8004d20:	f002 0203 	and.w	r2, r2, #3
 8004d24:	0092      	lsls	r2, r2, #2
 8004d26:	4093      	lsls	r3, r2
 8004d28:	68fa      	ldr	r2, [r7, #12]
 8004d2a:	429a      	cmp	r2, r3
 8004d2c:	d136      	bne.n	8004d9c <HAL_GPIO_DeInit+0xec>
        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 &= ~(iocurrent);
        EXTI->C2EMR1 &= ~(iocurrent);
#else
        EXTI->IMR1 &= ~(iocurrent);
 8004d2e:	4b46      	ldr	r3, [pc, #280]	@ (8004e48 <HAL_GPIO_DeInit+0x198>)
 8004d30:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8004d34:	693b      	ldr	r3, [r7, #16]
 8004d36:	43db      	mvns	r3, r3
 8004d38:	4943      	ldr	r1, [pc, #268]	@ (8004e48 <HAL_GPIO_DeInit+0x198>)
 8004d3a:	4013      	ands	r3, r2
 8004d3c:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
        EXTI->EMR1 &= ~(iocurrent);
 8004d40:	4b41      	ldr	r3, [pc, #260]	@ (8004e48 <HAL_GPIO_DeInit+0x198>)
 8004d42:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8004d46:	693b      	ldr	r3, [r7, #16]
 8004d48:	43db      	mvns	r3, r3
 8004d4a:	493f      	ldr	r1, [pc, #252]	@ (8004e48 <HAL_GPIO_DeInit+0x198>)
 8004d4c:	4013      	ands	r3, r2
 8004d4e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* CORE_CM0PLUS */

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8004d52:	4b3d      	ldr	r3, [pc, #244]	@ (8004e48 <HAL_GPIO_DeInit+0x198>)
 8004d54:	681a      	ldr	r2, [r3, #0]
 8004d56:	693b      	ldr	r3, [r7, #16]
 8004d58:	43db      	mvns	r3, r3
 8004d5a:	493b      	ldr	r1, [pc, #236]	@ (8004e48 <HAL_GPIO_DeInit+0x198>)
 8004d5c:	4013      	ands	r3, r2
 8004d5e:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 8004d60:	4b39      	ldr	r3, [pc, #228]	@ (8004e48 <HAL_GPIO_DeInit+0x198>)
 8004d62:	685a      	ldr	r2, [r3, #4]
 8004d64:	693b      	ldr	r3, [r7, #16]
 8004d66:	43db      	mvns	r3, r3
 8004d68:	4937      	ldr	r1, [pc, #220]	@ (8004e48 <HAL_GPIO_DeInit+0x198>)
 8004d6a:	4013      	ands	r3, r2
 8004d6c:	604b      	str	r3, [r1, #4]

        /* Clear EXTICR configuration */
        tmp = 0x07uL << (4u * (position & 0x03U));
 8004d6e:	697b      	ldr	r3, [r7, #20]
 8004d70:	f003 0303 	and.w	r3, r3, #3
 8004d74:	009b      	lsls	r3, r3, #2
 8004d76:	2207      	movs	r2, #7
 8004d78:	fa02 f303 	lsl.w	r3, r2, r3
 8004d7c:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8004d7e:	4a2f      	ldr	r2, [pc, #188]	@ (8004e3c <HAL_GPIO_DeInit+0x18c>)
 8004d80:	697b      	ldr	r3, [r7, #20]
 8004d82:	089b      	lsrs	r3, r3, #2
 8004d84:	3302      	adds	r3, #2
 8004d86:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	43da      	mvns	r2, r3
 8004d8e:	482b      	ldr	r0, [pc, #172]	@ (8004e3c <HAL_GPIO_DeInit+0x18c>)
 8004d90:	697b      	ldr	r3, [r7, #20]
 8004d92:	089b      	lsrs	r3, r3, #2
 8004d94:	400a      	ands	r2, r1
 8004d96:	3302      	adds	r3, #2
 8004d98:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681a      	ldr	r2, [r3, #0]
 8004da0:	697b      	ldr	r3, [r7, #20]
 8004da2:	005b      	lsls	r3, r3, #1
 8004da4:	2103      	movs	r1, #3
 8004da6:	fa01 f303 	lsl.w	r3, r1, r3
 8004daa:	431a      	orrs	r2, r3
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8004db0:	697b      	ldr	r3, [r7, #20]
 8004db2:	08da      	lsrs	r2, r3, #3
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	3208      	adds	r2, #8
 8004db8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004dbc:	697b      	ldr	r3, [r7, #20]
 8004dbe:	f003 0307 	and.w	r3, r3, #7
 8004dc2:	009b      	lsls	r3, r3, #2
 8004dc4:	220f      	movs	r2, #15
 8004dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8004dca:	43db      	mvns	r3, r3
 8004dcc:	697a      	ldr	r2, [r7, #20]
 8004dce:	08d2      	lsrs	r2, r2, #3
 8004dd0:	4019      	ands	r1, r3
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	3208      	adds	r2, #8
 8004dd6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	689a      	ldr	r2, [r3, #8]
 8004dde:	697b      	ldr	r3, [r7, #20]
 8004de0:	005b      	lsls	r3, r3, #1
 8004de2:	2103      	movs	r1, #3
 8004de4:	fa01 f303 	lsl.w	r3, r1, r3
 8004de8:	43db      	mvns	r3, r3
 8004dea:	401a      	ands	r2, r3
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	685a      	ldr	r2, [r3, #4]
 8004df4:	2101      	movs	r1, #1
 8004df6:	697b      	ldr	r3, [r7, #20]
 8004df8:	fa01 f303 	lsl.w	r3, r1, r3
 8004dfc:	43db      	mvns	r3, r3
 8004dfe:	401a      	ands	r2, r3
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	68da      	ldr	r2, [r3, #12]
 8004e08:	697b      	ldr	r3, [r7, #20]
 8004e0a:	005b      	lsls	r3, r3, #1
 8004e0c:	2103      	movs	r1, #3
 8004e0e:	fa01 f303 	lsl.w	r3, r1, r3
 8004e12:	43db      	mvns	r3, r3
 8004e14:	401a      	ands	r2, r3
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	60da      	str	r2, [r3, #12]
    }

    position++;
 8004e1a:	697b      	ldr	r3, [r7, #20]
 8004e1c:	3301      	adds	r3, #1
 8004e1e:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8004e20:	683a      	ldr	r2, [r7, #0]
 8004e22:	697b      	ldr	r3, [r7, #20]
 8004e24:	fa22 f303 	lsr.w	r3, r2, r3
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	f47f af49 	bne.w	8004cc0 <HAL_GPIO_DeInit+0x10>
  }
}
 8004e2e:	bf00      	nop
 8004e30:	bf00      	nop
 8004e32:	371c      	adds	r7, #28
 8004e34:	46bd      	mov	sp, r7
 8004e36:	bc80      	pop	{r7}
 8004e38:	4770      	bx	lr
 8004e3a:	bf00      	nop
 8004e3c:	40010000 	.word	0x40010000
 8004e40:	48000400 	.word	0x48000400
 8004e44:	48000800 	.word	0x48000800
 8004e48:	58000800 	.word	0x58000800

08004e4c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004e4c:	b480      	push	{r7}
 8004e4e:	b083      	sub	sp, #12
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
 8004e54:	460b      	mov	r3, r1
 8004e56:	807b      	strh	r3, [r7, #2]
 8004e58:	4613      	mov	r3, r2
 8004e5a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004e5c:	787b      	ldrb	r3, [r7, #1]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d003      	beq.n	8004e6a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004e62:	887a      	ldrh	r2, [r7, #2]
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004e68:	e002      	b.n	8004e70 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004e6a:	887a      	ldrh	r2, [r7, #2]
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004e70:	bf00      	nop
 8004e72:	370c      	adds	r7, #12
 8004e74:	46bd      	mov	sp, r7
 8004e76:	bc80      	pop	{r7}
 8004e78:	4770      	bx	lr
	...

08004e7c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b082      	sub	sp, #8
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	4603      	mov	r3, r0
 8004e84:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004e86:	4b08      	ldr	r3, [pc, #32]	@ (8004ea8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004e88:	68da      	ldr	r2, [r3, #12]
 8004e8a:	88fb      	ldrh	r3, [r7, #6]
 8004e8c:	4013      	ands	r3, r2
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d006      	beq.n	8004ea0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004e92:	4a05      	ldr	r2, [pc, #20]	@ (8004ea8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004e94:	88fb      	ldrh	r3, [r7, #6]
 8004e96:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004e98:	88fb      	ldrh	r3, [r7, #6]
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	f004 fe7e 	bl	8009b9c <HAL_GPIO_EXTI_Callback>
  }
}
 8004ea0:	bf00      	nop
 8004ea2:	3708      	adds	r7, #8
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	bd80      	pop	{r7, pc}
 8004ea8:	58000800 	.word	0x58000800

08004eac <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004eac:	b480      	push	{r7}
 8004eae:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004eb0:	4b04      	ldr	r3, [pc, #16]	@ (8004ec4 <HAL_PWR_EnableBkUpAccess+0x18>)
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	4a03      	ldr	r2, [pc, #12]	@ (8004ec4 <HAL_PWR_EnableBkUpAccess+0x18>)
 8004eb6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004eba:	6013      	str	r3, [r2, #0]
}
 8004ebc:	bf00      	nop
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	bc80      	pop	{r7}
 8004ec2:	4770      	bx	lr
 8004ec4:	58000400 	.word	0x58000400

08004ec8 <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b082      	sub	sp, #8
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
 8004ed0:	460b      	mov	r3, r1
 8004ed2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d10c      	bne.n	8004ef4 <HAL_PWR_EnterSLEEPMode+0x2c>
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 8004eda:	4b13      	ldr	r3, [pc, #76]	@ (8004f28 <HAL_PWR_EnterSLEEPMode+0x60>)
 8004edc:	695b      	ldr	r3, [r3, #20]
 8004ede:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004ee2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004ee6:	d10d      	bne.n	8004f04 <HAL_PWR_EnterSLEEPMode+0x3c>
    {
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 8004ee8:	f000 f83c 	bl	8004f64 <HAL_PWREx_DisableLowPowerRunMode>
 8004eec:	4603      	mov	r3, r0
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d008      	beq.n	8004f04 <HAL_PWR_EnterSLEEPMode+0x3c>
      {
        return ;
 8004ef2:	e015      	b.n	8004f20 <HAL_PWR_EnterSLEEPMode+0x58>
  }
  else
  {
    /* If in run mode, first move to low-power run mode.
       The system clock frequency must be below 2 MHz at this point. */
    if (HAL_IS_BIT_CLR(PWR->SR2, (PWR_SR2_REGLPF)))
 8004ef4:	4b0c      	ldr	r3, [pc, #48]	@ (8004f28 <HAL_PWR_EnterSLEEPMode+0x60>)
 8004ef6:	695b      	ldr	r3, [r3, #20]
 8004ef8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d101      	bne.n	8004f04 <HAL_PWR_EnterSLEEPMode+0x3c>
    {
      HAL_PWREx_EnableLowPowerRunMode();
 8004f00:	f000 f822 	bl	8004f48 <HAL_PWREx_EnableLowPowerRunMode>
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8004f04:	4b09      	ldr	r3, [pc, #36]	@ (8004f2c <HAL_PWR_EnterSLEEPMode+0x64>)
 8004f06:	691b      	ldr	r3, [r3, #16]
 8004f08:	4a08      	ldr	r2, [pc, #32]	@ (8004f2c <HAL_PWR_EnterSLEEPMode+0x64>)
 8004f0a:	f023 0304 	bic.w	r3, r3, #4
 8004f0e:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if (SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8004f10:	78fb      	ldrb	r3, [r7, #3]
 8004f12:	2b01      	cmp	r3, #1
 8004f14:	d101      	bne.n	8004f1a <HAL_PWR_EnterSLEEPMode+0x52>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8004f16:	bf30      	wfi
 8004f18:	e002      	b.n	8004f20 <HAL_PWR_EnterSLEEPMode+0x58>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8004f1a:	bf40      	sev
    __WFE();
 8004f1c:	bf20      	wfe
    __WFE();
 8004f1e:	bf20      	wfe
  }
}
 8004f20:	3708      	adds	r7, #8
 8004f22:	46bd      	mov	sp, r7
 8004f24:	bd80      	pop	{r7, pc}
 8004f26:	bf00      	nop
 8004f28:	58000400 	.word	0x58000400
 8004f2c:	e000ed00 	.word	0xe000ed00

08004f30 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004f30:	b480      	push	{r7}
 8004f32:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8004f34:	4b03      	ldr	r3, [pc, #12]	@ (8004f44 <HAL_PWREx_GetVoltageRange+0x14>)
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	bc80      	pop	{r7}
 8004f42:	4770      	bx	lr
 8004f44:	58000400 	.word	0x58000400

08004f48 <HAL_PWREx_EnableLowPowerRunMode>:
  * @note  In Low-power Run mode, all I/O pins keep the same state as in Run mode.
  * @note  Clock frequency must be reduced below 2 MHz.
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
 8004f48:	b480      	push	{r7}
 8004f4a:	af00      	add	r7, sp, #0
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 8004f4c:	4b04      	ldr	r3, [pc, #16]	@ (8004f60 <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	4a03      	ldr	r2, [pc, #12]	@ (8004f60 <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 8004f52:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004f56:	6013      	str	r3, [r2, #0]
}
 8004f58:	bf00      	nop
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	bc80      	pop	{r7}
 8004f5e:	4770      	bx	lr
 8004f60:	58000400 	.word	0x58000400

08004f64 <HAL_PWREx_DisableLowPowerRunMode>:
  *        returns HAL_TIMEOUT status). The system clock frequency can then be
  *        increased above 2 MHz.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
 8004f64:	b480      	push	{r7}
 8004f66:	b083      	sub	sp, #12
 8004f68:	af00      	add	r7, sp, #0
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 8004f6a:	4b16      	ldr	r3, [pc, #88]	@ (8004fc4 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	4a15      	ldr	r2, [pc, #84]	@ (8004fc4 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8004f70:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004f74:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000UL);
 8004f76:	4b14      	ldr	r3, [pc, #80]	@ (8004fc8 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	2232      	movs	r2, #50	@ 0x32
 8004f7c:	fb02 f303 	mul.w	r3, r2, r3
 8004f80:	4a12      	ldr	r2, [pc, #72]	@ (8004fcc <HAL_PWREx_DisableLowPowerRunMode+0x68>)
 8004f82:	fba2 2303 	umull	r2, r3, r2, r3
 8004f86:	0c9b      	lsrs	r3, r3, #18
 8004f88:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8004f8a:	e002      	b.n	8004f92 <HAL_PWREx_DisableLowPowerRunMode+0x2e>
  {
    wait_loop_index--;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	3b01      	subs	r3, #1
 8004f90:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8004f92:	4b0c      	ldr	r3, [pc, #48]	@ (8004fc4 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8004f94:	695b      	ldr	r3, [r3, #20]
 8004f96:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004f9a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004f9e:	d102      	bne.n	8004fa6 <HAL_PWREx_DisableLowPowerRunMode+0x42>
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d1f2      	bne.n	8004f8c <HAL_PWREx_DisableLowPowerRunMode+0x28>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 8004fa6:	4b07      	ldr	r3, [pc, #28]	@ (8004fc4 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8004fa8:	695b      	ldr	r3, [r3, #20]
 8004faa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004fae:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004fb2:	d101      	bne.n	8004fb8 <HAL_PWREx_DisableLowPowerRunMode+0x54>
  {
    return HAL_TIMEOUT;
 8004fb4:	2303      	movs	r3, #3
 8004fb6:	e000      	b.n	8004fba <HAL_PWREx_DisableLowPowerRunMode+0x56>
  }

  return HAL_OK;
 8004fb8:	2300      	movs	r3, #0
}
 8004fba:	4618      	mov	r0, r3
 8004fbc:	370c      	adds	r7, #12
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	bc80      	pop	{r7}
 8004fc2:	4770      	bx	lr
 8004fc4:	58000400 	.word	0x58000400
 8004fc8:	20000000 	.word	0x20000000
 8004fcc:	431bde83 	.word	0x431bde83

08004fd0 <HAL_PWREx_EnterSTOP2Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP2Mode(uint8_t STOPEntry)
{
 8004fd0:	b480      	push	{r7}
 8004fd2:	b083      	sub	sp, #12
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	4603      	mov	r3, r0
 8004fd8:	71fb      	strb	r3, [r7, #7]
#ifdef CORE_CM0PLUS
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
#else
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
 8004fda:	4b10      	ldr	r3, [pc, #64]	@ (800501c <HAL_PWREx_EnterSTOP2Mode+0x4c>)
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f023 0307 	bic.w	r3, r3, #7
 8004fe2:	4a0e      	ldr	r2, [pc, #56]	@ (800501c <HAL_PWREx_EnterSTOP2Mode+0x4c>)
 8004fe4:	f043 0302 	orr.w	r3, r3, #2
 8004fe8:	6013      	str	r3, [r2, #0]
#endif

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8004fea:	4b0d      	ldr	r3, [pc, #52]	@ (8005020 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8004fec:	691b      	ldr	r3, [r3, #16]
 8004fee:	4a0c      	ldr	r2, [pc, #48]	@ (8005020 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8004ff0:	f043 0304 	orr.w	r3, r3, #4
 8004ff4:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if (STOPEntry == PWR_STOPENTRY_WFI)
 8004ff6:	79fb      	ldrb	r3, [r7, #7]
 8004ff8:	2b01      	cmp	r3, #1
 8004ffa:	d101      	bne.n	8005000 <HAL_PWREx_EnterSTOP2Mode+0x30>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8004ffc:	bf30      	wfi
 8004ffe:	e002      	b.n	8005006 <HAL_PWREx_EnterSTOP2Mode+0x36>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8005000:	bf40      	sev
    __WFE();
 8005002:	bf20      	wfe
    __WFE();
 8005004:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8005006:	4b06      	ldr	r3, [pc, #24]	@ (8005020 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8005008:	691b      	ldr	r3, [r3, #16]
 800500a:	4a05      	ldr	r2, [pc, #20]	@ (8005020 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 800500c:	f023 0304 	bic.w	r3, r3, #4
 8005010:	6113      	str	r3, [r2, #16]
}
 8005012:	bf00      	nop
 8005014:	370c      	adds	r7, #12
 8005016:	46bd      	mov	sp, r7
 8005018:	bc80      	pop	{r7}
 800501a:	4770      	bx	lr
 800501c:	58000400 	.word	0x58000400
 8005020:	e000ed00 	.word	0xe000ed00

08005024 <LL_PWR_IsEnabledBkUpAccess>:
{
 8005024:	b480      	push	{r7}
 8005026:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8005028:	4b06      	ldr	r3, [pc, #24]	@ (8005044 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005030:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005034:	d101      	bne.n	800503a <LL_PWR_IsEnabledBkUpAccess+0x16>
 8005036:	2301      	movs	r3, #1
 8005038:	e000      	b.n	800503c <LL_PWR_IsEnabledBkUpAccess+0x18>
 800503a:	2300      	movs	r3, #0
}
 800503c:	4618      	mov	r0, r3
 800503e:	46bd      	mov	sp, r7
 8005040:	bc80      	pop	{r7}
 8005042:	4770      	bx	lr
 8005044:	58000400 	.word	0x58000400

08005048 <LL_RCC_HSE_EnableTcxo>:
{
 8005048:	b480      	push	{r7}
 800504a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 800504c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005056:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800505a:	6013      	str	r3, [r2, #0]
}
 800505c:	bf00      	nop
 800505e:	46bd      	mov	sp, r7
 8005060:	bc80      	pop	{r7}
 8005062:	4770      	bx	lr

08005064 <LL_RCC_HSE_DisableTcxo>:
{
 8005064:	b480      	push	{r7}
 8005066:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8005068:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005072:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005076:	6013      	str	r3, [r2, #0]
}
 8005078:	bf00      	nop
 800507a:	46bd      	mov	sp, r7
 800507c:	bc80      	pop	{r7}
 800507e:	4770      	bx	lr

08005080 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8005080:	b480      	push	{r7}
 8005082:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8005084:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800508e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005092:	d101      	bne.n	8005098 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8005094:	2301      	movs	r3, #1
 8005096:	e000      	b.n	800509a <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8005098:	2300      	movs	r3, #0
}
 800509a:	4618      	mov	r0, r3
 800509c:	46bd      	mov	sp, r7
 800509e:	bc80      	pop	{r7}
 80050a0:	4770      	bx	lr

080050a2 <LL_RCC_HSE_Enable>:
{
 80050a2:	b480      	push	{r7}
 80050a4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80050a6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80050b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80050b4:	6013      	str	r3, [r2, #0]
}
 80050b6:	bf00      	nop
 80050b8:	46bd      	mov	sp, r7
 80050ba:	bc80      	pop	{r7}
 80050bc:	4770      	bx	lr

080050be <LL_RCC_HSE_Disable>:
{
 80050be:	b480      	push	{r7}
 80050c0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80050c2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80050cc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80050d0:	6013      	str	r3, [r2, #0]
}
 80050d2:	bf00      	nop
 80050d4:	46bd      	mov	sp, r7
 80050d6:	bc80      	pop	{r7}
 80050d8:	4770      	bx	lr

080050da <LL_RCC_HSE_IsReady>:
{
 80050da:	b480      	push	{r7}
 80050dc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80050de:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80050e8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80050ec:	d101      	bne.n	80050f2 <LL_RCC_HSE_IsReady+0x18>
 80050ee:	2301      	movs	r3, #1
 80050f0:	e000      	b.n	80050f4 <LL_RCC_HSE_IsReady+0x1a>
 80050f2:	2300      	movs	r3, #0
}
 80050f4:	4618      	mov	r0, r3
 80050f6:	46bd      	mov	sp, r7
 80050f8:	bc80      	pop	{r7}
 80050fa:	4770      	bx	lr

080050fc <LL_RCC_HSI_Enable>:
{
 80050fc:	b480      	push	{r7}
 80050fe:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8005100:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800510a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800510e:	6013      	str	r3, [r2, #0]
}
 8005110:	bf00      	nop
 8005112:	46bd      	mov	sp, r7
 8005114:	bc80      	pop	{r7}
 8005116:	4770      	bx	lr

08005118 <LL_RCC_HSI_Disable>:
{
 8005118:	b480      	push	{r7}
 800511a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800511c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005126:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800512a:	6013      	str	r3, [r2, #0]
}
 800512c:	bf00      	nop
 800512e:	46bd      	mov	sp, r7
 8005130:	bc80      	pop	{r7}
 8005132:	4770      	bx	lr

08005134 <LL_RCC_HSI_IsReady>:
{
 8005134:	b480      	push	{r7}
 8005136:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8005138:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005142:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005146:	d101      	bne.n	800514c <LL_RCC_HSI_IsReady+0x18>
 8005148:	2301      	movs	r3, #1
 800514a:	e000      	b.n	800514e <LL_RCC_HSI_IsReady+0x1a>
 800514c:	2300      	movs	r3, #0
}
 800514e:	4618      	mov	r0, r3
 8005150:	46bd      	mov	sp, r7
 8005152:	bc80      	pop	{r7}
 8005154:	4770      	bx	lr

08005156 <LL_RCC_HSI_SetCalibTrimming>:
{
 8005156:	b480      	push	{r7}
 8005158:	b083      	sub	sp, #12
 800515a:	af00      	add	r7, sp, #0
 800515c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 800515e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005162:	685b      	ldr	r3, [r3, #4]
 8005164:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	061b      	lsls	r3, r3, #24
 800516c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005170:	4313      	orrs	r3, r2
 8005172:	604b      	str	r3, [r1, #4]
}
 8005174:	bf00      	nop
 8005176:	370c      	adds	r7, #12
 8005178:	46bd      	mov	sp, r7
 800517a:	bc80      	pop	{r7}
 800517c:	4770      	bx	lr

0800517e <LL_RCC_LSE_IsReady>:
{
 800517e:	b480      	push	{r7}
 8005180:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8005182:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005186:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800518a:	f003 0302 	and.w	r3, r3, #2
 800518e:	2b02      	cmp	r3, #2
 8005190:	d101      	bne.n	8005196 <LL_RCC_LSE_IsReady+0x18>
 8005192:	2301      	movs	r3, #1
 8005194:	e000      	b.n	8005198 <LL_RCC_LSE_IsReady+0x1a>
 8005196:	2300      	movs	r3, #0
}
 8005198:	4618      	mov	r0, r3
 800519a:	46bd      	mov	sp, r7
 800519c:	bc80      	pop	{r7}
 800519e:	4770      	bx	lr

080051a0 <LL_RCC_LSI_Enable>:
{
 80051a0:	b480      	push	{r7}
 80051a2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 80051a4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80051a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80051ac:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80051b0:	f043 0301 	orr.w	r3, r3, #1
 80051b4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 80051b8:	bf00      	nop
 80051ba:	46bd      	mov	sp, r7
 80051bc:	bc80      	pop	{r7}
 80051be:	4770      	bx	lr

080051c0 <LL_RCC_LSI_Disable>:
{
 80051c0:	b480      	push	{r7}
 80051c2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 80051c4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80051c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80051cc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80051d0:	f023 0301 	bic.w	r3, r3, #1
 80051d4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 80051d8:	bf00      	nop
 80051da:	46bd      	mov	sp, r7
 80051dc:	bc80      	pop	{r7}
 80051de:	4770      	bx	lr

080051e0 <LL_RCC_LSI_IsReady>:
{
 80051e0:	b480      	push	{r7}
 80051e2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 80051e4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80051e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80051ec:	f003 0302 	and.w	r3, r3, #2
 80051f0:	2b02      	cmp	r3, #2
 80051f2:	d101      	bne.n	80051f8 <LL_RCC_LSI_IsReady+0x18>
 80051f4:	2301      	movs	r3, #1
 80051f6:	e000      	b.n	80051fa <LL_RCC_LSI_IsReady+0x1a>
 80051f8:	2300      	movs	r3, #0
}
 80051fa:	4618      	mov	r0, r3
 80051fc:	46bd      	mov	sp, r7
 80051fe:	bc80      	pop	{r7}
 8005200:	4770      	bx	lr

08005202 <LL_RCC_MSI_Enable>:
{
 8005202:	b480      	push	{r7}
 8005204:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8005206:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005210:	f043 0301 	orr.w	r3, r3, #1
 8005214:	6013      	str	r3, [r2, #0]
}
 8005216:	bf00      	nop
 8005218:	46bd      	mov	sp, r7
 800521a:	bc80      	pop	{r7}
 800521c:	4770      	bx	lr

0800521e <LL_RCC_MSI_Disable>:
{
 800521e:	b480      	push	{r7}
 8005220:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8005222:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800522c:	f023 0301 	bic.w	r3, r3, #1
 8005230:	6013      	str	r3, [r2, #0]
}
 8005232:	bf00      	nop
 8005234:	46bd      	mov	sp, r7
 8005236:	bc80      	pop	{r7}
 8005238:	4770      	bx	lr

0800523a <LL_RCC_MSI_IsReady>:
{
 800523a:	b480      	push	{r7}
 800523c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 800523e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f003 0302 	and.w	r3, r3, #2
 8005248:	2b02      	cmp	r3, #2
 800524a:	d101      	bne.n	8005250 <LL_RCC_MSI_IsReady+0x16>
 800524c:	2301      	movs	r3, #1
 800524e:	e000      	b.n	8005252 <LL_RCC_MSI_IsReady+0x18>
 8005250:	2300      	movs	r3, #0
}
 8005252:	4618      	mov	r0, r3
 8005254:	46bd      	mov	sp, r7
 8005256:	bc80      	pop	{r7}
 8005258:	4770      	bx	lr

0800525a <LL_RCC_MSI_IsEnabledRangeSelect>:
{
 800525a:	b480      	push	{r7}
 800525c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 800525e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f003 0308 	and.w	r3, r3, #8
 8005268:	2b08      	cmp	r3, #8
 800526a:	d101      	bne.n	8005270 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 800526c:	2301      	movs	r3, #1
 800526e:	e000      	b.n	8005272 <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8005270:	2300      	movs	r3, #0
}
 8005272:	4618      	mov	r0, r3
 8005274:	46bd      	mov	sp, r7
 8005276:	bc80      	pop	{r7}
 8005278:	4770      	bx	lr

0800527a <LL_RCC_MSI_GetRange>:
{
 800527a:	b480      	push	{r7}
 800527c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 800527e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8005288:	4618      	mov	r0, r3
 800528a:	46bd      	mov	sp, r7
 800528c:	bc80      	pop	{r7}
 800528e:	4770      	bx	lr

08005290 <LL_RCC_MSI_GetRangeAfterStandby>:
{
 8005290:	b480      	push	{r7}
 8005292:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8005294:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005298:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800529c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
}
 80052a0:	4618      	mov	r0, r3
 80052a2:	46bd      	mov	sp, r7
 80052a4:	bc80      	pop	{r7}
 80052a6:	4770      	bx	lr

080052a8 <LL_RCC_MSI_SetCalibTrimming>:
{
 80052a8:	b480      	push	{r7}
 80052aa:	b083      	sub	sp, #12
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80052b0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80052b4:	685b      	ldr	r3, [r3, #4]
 80052b6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	021b      	lsls	r3, r3, #8
 80052be:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80052c2:	4313      	orrs	r3, r2
 80052c4:	604b      	str	r3, [r1, #4]
}
 80052c6:	bf00      	nop
 80052c8:	370c      	adds	r7, #12
 80052ca:	46bd      	mov	sp, r7
 80052cc:	bc80      	pop	{r7}
 80052ce:	4770      	bx	lr

080052d0 <LL_RCC_SetSysClkSource>:
{
 80052d0:	b480      	push	{r7}
 80052d2:	b083      	sub	sp, #12
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80052d8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80052dc:	689b      	ldr	r3, [r3, #8]
 80052de:	f023 0203 	bic.w	r2, r3, #3
 80052e2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	4313      	orrs	r3, r2
 80052ea:	608b      	str	r3, [r1, #8]
}
 80052ec:	bf00      	nop
 80052ee:	370c      	adds	r7, #12
 80052f0:	46bd      	mov	sp, r7
 80052f2:	bc80      	pop	{r7}
 80052f4:	4770      	bx	lr

080052f6 <LL_RCC_GetSysClkSource>:
{
 80052f6:	b480      	push	{r7}
 80052f8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80052fa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80052fe:	689b      	ldr	r3, [r3, #8]
 8005300:	f003 030c 	and.w	r3, r3, #12
}
 8005304:	4618      	mov	r0, r3
 8005306:	46bd      	mov	sp, r7
 8005308:	bc80      	pop	{r7}
 800530a:	4770      	bx	lr

0800530c <LL_RCC_SetAHBPrescaler>:
{
 800530c:	b480      	push	{r7}
 800530e:	b083      	sub	sp, #12
 8005310:	af00      	add	r7, sp, #0
 8005312:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8005314:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005318:	689b      	ldr	r3, [r3, #8]
 800531a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800531e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	4313      	orrs	r3, r2
 8005326:	608b      	str	r3, [r1, #8]
}
 8005328:	bf00      	nop
 800532a:	370c      	adds	r7, #12
 800532c:	46bd      	mov	sp, r7
 800532e:	bc80      	pop	{r7}
 8005330:	4770      	bx	lr

08005332 <LL_RCC_SetAHB3Prescaler>:
{
 8005332:	b480      	push	{r7}
 8005334:	b083      	sub	sp, #12
 8005336:	af00      	add	r7, sp, #0
 8005338:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800533a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800533e:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8005342:	f023 020f 	bic.w	r2, r3, #15
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	091b      	lsrs	r3, r3, #4
 800534a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800534e:	4313      	orrs	r3, r2
 8005350:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8005354:	bf00      	nop
 8005356:	370c      	adds	r7, #12
 8005358:	46bd      	mov	sp, r7
 800535a:	bc80      	pop	{r7}
 800535c:	4770      	bx	lr

0800535e <LL_RCC_SetAPB1Prescaler>:
{
 800535e:	b480      	push	{r7}
 8005360:	b083      	sub	sp, #12
 8005362:	af00      	add	r7, sp, #0
 8005364:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8005366:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800536a:	689b      	ldr	r3, [r3, #8]
 800536c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005370:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	4313      	orrs	r3, r2
 8005378:	608b      	str	r3, [r1, #8]
}
 800537a:	bf00      	nop
 800537c:	370c      	adds	r7, #12
 800537e:	46bd      	mov	sp, r7
 8005380:	bc80      	pop	{r7}
 8005382:	4770      	bx	lr

08005384 <LL_RCC_SetAPB2Prescaler>:
{
 8005384:	b480      	push	{r7}
 8005386:	b083      	sub	sp, #12
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800538c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005390:	689b      	ldr	r3, [r3, #8]
 8005392:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005396:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	4313      	orrs	r3, r2
 800539e:	608b      	str	r3, [r1, #8]
}
 80053a0:	bf00      	nop
 80053a2:	370c      	adds	r7, #12
 80053a4:	46bd      	mov	sp, r7
 80053a6:	bc80      	pop	{r7}
 80053a8:	4770      	bx	lr

080053aa <LL_RCC_GetAHBPrescaler>:
{
 80053aa:	b480      	push	{r7}
 80053ac:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80053ae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80053b2:	689b      	ldr	r3, [r3, #8]
 80053b4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 80053b8:	4618      	mov	r0, r3
 80053ba:	46bd      	mov	sp, r7
 80053bc:	bc80      	pop	{r7}
 80053be:	4770      	bx	lr

080053c0 <LL_RCC_GetAHB3Prescaler>:
{
 80053c0:	b480      	push	{r7}
 80053c2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80053c4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80053c8:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80053cc:	011b      	lsls	r3, r3, #4
 80053ce:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 80053d2:	4618      	mov	r0, r3
 80053d4:	46bd      	mov	sp, r7
 80053d6:	bc80      	pop	{r7}
 80053d8:	4770      	bx	lr

080053da <LL_RCC_GetAPB1Prescaler>:
{
 80053da:	b480      	push	{r7}
 80053dc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80053de:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80053e2:	689b      	ldr	r3, [r3, #8]
 80053e4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 80053e8:	4618      	mov	r0, r3
 80053ea:	46bd      	mov	sp, r7
 80053ec:	bc80      	pop	{r7}
 80053ee:	4770      	bx	lr

080053f0 <LL_RCC_GetAPB2Prescaler>:
{
 80053f0:	b480      	push	{r7}
 80053f2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80053f4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80053f8:	689b      	ldr	r3, [r3, #8]
 80053fa:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 80053fe:	4618      	mov	r0, r3
 8005400:	46bd      	mov	sp, r7
 8005402:	bc80      	pop	{r7}
 8005404:	4770      	bx	lr

08005406 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8005406:	b480      	push	{r7}
 8005408:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800540a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005414:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005418:	6013      	str	r3, [r2, #0]
}
 800541a:	bf00      	nop
 800541c:	46bd      	mov	sp, r7
 800541e:	bc80      	pop	{r7}
 8005420:	4770      	bx	lr

08005422 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8005422:	b480      	push	{r7}
 8005424:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8005426:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005430:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005434:	6013      	str	r3, [r2, #0]
}
 8005436:	bf00      	nop
 8005438:	46bd      	mov	sp, r7
 800543a:	bc80      	pop	{r7}
 800543c:	4770      	bx	lr

0800543e <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 800543e:	b480      	push	{r7}
 8005440:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8005442:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800544c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005450:	d101      	bne.n	8005456 <LL_RCC_PLL_IsReady+0x18>
 8005452:	2301      	movs	r3, #1
 8005454:	e000      	b.n	8005458 <LL_RCC_PLL_IsReady+0x1a>
 8005456:	2300      	movs	r3, #0
}
 8005458:	4618      	mov	r0, r3
 800545a:	46bd      	mov	sp, r7
 800545c:	bc80      	pop	{r7}
 800545e:	4770      	bx	lr

08005460 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8005460:	b480      	push	{r7}
 8005462:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8005464:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005468:	68db      	ldr	r3, [r3, #12]
 800546a:	0a1b      	lsrs	r3, r3, #8
 800546c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 8005470:	4618      	mov	r0, r3
 8005472:	46bd      	mov	sp, r7
 8005474:	bc80      	pop	{r7}
 8005476:	4770      	bx	lr

08005478 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8005478:	b480      	push	{r7}
 800547a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800547c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005480:	68db      	ldr	r3, [r3, #12]
 8005482:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 8005486:	4618      	mov	r0, r3
 8005488:	46bd      	mov	sp, r7
 800548a:	bc80      	pop	{r7}
 800548c:	4770      	bx	lr

0800548e <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800548e:	b480      	push	{r7}
 8005490:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8005492:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005496:	68db      	ldr	r3, [r3, #12]
 8005498:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 800549c:	4618      	mov	r0, r3
 800549e:	46bd      	mov	sp, r7
 80054a0:	bc80      	pop	{r7}
 80054a2:	4770      	bx	lr

080054a4 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80054a4:	b480      	push	{r7}
 80054a6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80054a8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80054ac:	68db      	ldr	r3, [r3, #12]
 80054ae:	f003 0303 	and.w	r3, r3, #3
}
 80054b2:	4618      	mov	r0, r3
 80054b4:	46bd      	mov	sp, r7
 80054b6:	bc80      	pop	{r7}
 80054b8:	4770      	bx	lr

080054ba <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 80054ba:	b480      	push	{r7}
 80054bc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80054be:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80054c2:	689b      	ldr	r3, [r3, #8]
 80054c4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80054c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80054cc:	d101      	bne.n	80054d2 <LL_RCC_IsActiveFlag_HPRE+0x18>
 80054ce:	2301      	movs	r3, #1
 80054d0:	e000      	b.n	80054d4 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 80054d2:	2300      	movs	r3, #0
}
 80054d4:	4618      	mov	r0, r3
 80054d6:	46bd      	mov	sp, r7
 80054d8:	bc80      	pop	{r7}
 80054da:	4770      	bx	lr

080054dc <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 80054dc:	b480      	push	{r7}
 80054de:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 80054e0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80054e4:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80054e8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80054ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80054f0:	d101      	bne.n	80054f6 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 80054f2:	2301      	movs	r3, #1
 80054f4:	e000      	b.n	80054f8 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 80054f6:	2300      	movs	r3, #0
}
 80054f8:	4618      	mov	r0, r3
 80054fa:	46bd      	mov	sp, r7
 80054fc:	bc80      	pop	{r7}
 80054fe:	4770      	bx	lr

08005500 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8005500:	b480      	push	{r7}
 8005502:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8005504:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005508:	689b      	ldr	r3, [r3, #8]
 800550a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800550e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005512:	d101      	bne.n	8005518 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8005514:	2301      	movs	r3, #1
 8005516:	e000      	b.n	800551a <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8005518:	2300      	movs	r3, #0
}
 800551a:	4618      	mov	r0, r3
 800551c:	46bd      	mov	sp, r7
 800551e:	bc80      	pop	{r7}
 8005520:	4770      	bx	lr

08005522 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8005522:	b480      	push	{r7}
 8005524:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8005526:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800552a:	689b      	ldr	r3, [r3, #8]
 800552c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005530:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005534:	d101      	bne.n	800553a <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8005536:	2301      	movs	r3, #1
 8005538:	e000      	b.n	800553c <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 800553a:	2300      	movs	r3, #0
}
 800553c:	4618      	mov	r0, r3
 800553e:	46bd      	mov	sp, r7
 8005540:	bc80      	pop	{r7}
 8005542:	4770      	bx	lr

08005544 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005544:	b580      	push	{r7, lr}
 8005546:	b088      	sub	sp, #32
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2b00      	cmp	r3, #0
 8005550:	d101      	bne.n	8005556 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005552:	2301      	movs	r3, #1
 8005554:	e38b      	b.n	8005c6e <HAL_RCC_OscConfig+0x72a>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005556:	f7ff fece 	bl	80052f6 <LL_RCC_GetSysClkSource>
 800555a:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800555c:	f7ff ffa2 	bl	80054a4 <LL_RCC_PLL_GetMainSource>
 8005560:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f003 0320 	and.w	r3, r3, #32
 800556a:	2b00      	cmp	r3, #0
 800556c:	f000 80c9 	beq.w	8005702 <HAL_RCC_OscConfig+0x1be>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8005570:	69fb      	ldr	r3, [r7, #28]
 8005572:	2b00      	cmp	r3, #0
 8005574:	d005      	beq.n	8005582 <HAL_RCC_OscConfig+0x3e>
 8005576:	69fb      	ldr	r3, [r7, #28]
 8005578:	2b0c      	cmp	r3, #12
 800557a:	d17b      	bne.n	8005674 <HAL_RCC_OscConfig+0x130>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 800557c:	69bb      	ldr	r3, [r7, #24]
 800557e:	2b01      	cmp	r3, #1
 8005580:	d178      	bne.n	8005674 <HAL_RCC_OscConfig+0x130>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005582:	f7ff fe5a 	bl	800523a <LL_RCC_MSI_IsReady>
 8005586:	4603      	mov	r3, r0
 8005588:	2b00      	cmp	r3, #0
 800558a:	d005      	beq.n	8005598 <HAL_RCC_OscConfig+0x54>
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	6a1b      	ldr	r3, [r3, #32]
 8005590:	2b00      	cmp	r3, #0
 8005592:	d101      	bne.n	8005598 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8005594:	2301      	movs	r3, #1
 8005596:	e36a      	b.n	8005c6e <HAL_RCC_OscConfig+0x72a>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800559c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f003 0308 	and.w	r3, r3, #8
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d005      	beq.n	80055b6 <HAL_RCC_OscConfig+0x72>
 80055aa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80055b4:	e006      	b.n	80055c4 <HAL_RCC_OscConfig+0x80>
 80055b6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80055ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80055be:	091b      	lsrs	r3, r3, #4
 80055c0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80055c4:	4293      	cmp	r3, r2
 80055c6:	d222      	bcs.n	800560e <HAL_RCC_OscConfig+0xca>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055cc:	4618      	mov	r0, r3
 80055ce:	f000 fd51 	bl	8006074 <RCC_SetFlashLatencyFromMSIRange>
 80055d2:	4603      	mov	r3, r0
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d001      	beq.n	80055dc <HAL_RCC_OscConfig+0x98>
          {
            return HAL_ERROR;
 80055d8:	2301      	movs	r3, #1
 80055da:	e348      	b.n	8005c6e <HAL_RCC_OscConfig+0x72a>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80055dc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80055e6:	f043 0308 	orr.w	r3, r3, #8
 80055ea:	6013      	str	r3, [r2, #0]
 80055ec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055fa:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80055fe:	4313      	orrs	r3, r2
 8005600:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005606:	4618      	mov	r0, r3
 8005608:	f7ff fe4e 	bl	80052a8 <LL_RCC_MSI_SetCalibTrimming>
 800560c:	e021      	b.n	8005652 <HAL_RCC_OscConfig+0x10e>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800560e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005618:	f043 0308 	orr.w	r3, r3, #8
 800561c:	6013      	str	r3, [r2, #0]
 800561e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800562c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005630:	4313      	orrs	r3, r2
 8005632:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005638:	4618      	mov	r0, r3
 800563a:	f7ff fe35 	bl	80052a8 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005642:	4618      	mov	r0, r3
 8005644:	f000 fd16 	bl	8006074 <RCC_SetFlashLatencyFromMSIRange>
 8005648:	4603      	mov	r3, r0
 800564a:	2b00      	cmp	r3, #0
 800564c:	d001      	beq.n	8005652 <HAL_RCC_OscConfig+0x10e>
          {
            return HAL_ERROR;
 800564e:	2301      	movs	r3, #1
 8005650:	e30d      	b.n	8005c6e <HAL_RCC_OscConfig+0x72a>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8005652:	f000 fcd7 	bl	8006004 <HAL_RCC_GetHCLKFreq>
 8005656:	4603      	mov	r3, r0
 8005658:	4aa1      	ldr	r2, [pc, #644]	@ (80058e0 <HAL_RCC_OscConfig+0x39c>)
 800565a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800565c:	4ba1      	ldr	r3, [pc, #644]	@ (80058e4 <HAL_RCC_OscConfig+0x3a0>)
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	4618      	mov	r0, r3
 8005662:	f7fc fb37 	bl	8001cd4 <HAL_InitTick>
 8005666:	4603      	mov	r3, r0
 8005668:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 800566a:	7cfb      	ldrb	r3, [r7, #19]
 800566c:	2b00      	cmp	r3, #0
 800566e:	d047      	beq.n	8005700 <HAL_RCC_OscConfig+0x1bc>
        {
          return status;
 8005670:	7cfb      	ldrb	r3, [r7, #19]
 8005672:	e2fc      	b.n	8005c6e <HAL_RCC_OscConfig+0x72a>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	6a1b      	ldr	r3, [r3, #32]
 8005678:	2b00      	cmp	r3, #0
 800567a:	d02c      	beq.n	80056d6 <HAL_RCC_OscConfig+0x192>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800567c:	f7ff fdc1 	bl	8005202 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005680:	f7fc fb32 	bl	8001ce8 <HAL_GetTick>
 8005684:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8005686:	e008      	b.n	800569a <HAL_RCC_OscConfig+0x156>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005688:	f7fc fb2e 	bl	8001ce8 <HAL_GetTick>
 800568c:	4602      	mov	r2, r0
 800568e:	697b      	ldr	r3, [r7, #20]
 8005690:	1ad3      	subs	r3, r2, r3
 8005692:	2b02      	cmp	r3, #2
 8005694:	d901      	bls.n	800569a <HAL_RCC_OscConfig+0x156>
          {
            return HAL_TIMEOUT;
 8005696:	2303      	movs	r3, #3
 8005698:	e2e9      	b.n	8005c6e <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_MSI_IsReady() == 0U)
 800569a:	f7ff fdce 	bl	800523a <LL_RCC_MSI_IsReady>
 800569e:	4603      	mov	r3, r0
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d0f1      	beq.n	8005688 <HAL_RCC_OscConfig+0x144>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80056a4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80056ae:	f043 0308 	orr.w	r3, r3, #8
 80056b2:	6013      	str	r3, [r2, #0]
 80056b4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056c2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80056c6:	4313      	orrs	r3, r2
 80056c8:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056ce:	4618      	mov	r0, r3
 80056d0:	f7ff fdea 	bl	80052a8 <LL_RCC_MSI_SetCalibTrimming>
 80056d4:	e015      	b.n	8005702 <HAL_RCC_OscConfig+0x1be>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80056d6:	f7ff fda2 	bl	800521e <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80056da:	f7fc fb05 	bl	8001ce8 <HAL_GetTick>
 80056de:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 80056e0:	e008      	b.n	80056f4 <HAL_RCC_OscConfig+0x1b0>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80056e2:	f7fc fb01 	bl	8001ce8 <HAL_GetTick>
 80056e6:	4602      	mov	r2, r0
 80056e8:	697b      	ldr	r3, [r7, #20]
 80056ea:	1ad3      	subs	r3, r2, r3
 80056ec:	2b02      	cmp	r3, #2
 80056ee:	d901      	bls.n	80056f4 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 80056f0:	2303      	movs	r3, #3
 80056f2:	e2bc      	b.n	8005c6e <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_MSI_IsReady() != 0U)
 80056f4:	f7ff fda1 	bl	800523a <LL_RCC_MSI_IsReady>
 80056f8:	4603      	mov	r3, r0
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d1f1      	bne.n	80056e2 <HAL_RCC_OscConfig+0x19e>
 80056fe:	e000      	b.n	8005702 <HAL_RCC_OscConfig+0x1be>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005700:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f003 0301 	and.w	r3, r3, #1
 800570a:	2b00      	cmp	r3, #0
 800570c:	d05f      	beq.n	80057ce <HAL_RCC_OscConfig+0x28a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800570e:	69fb      	ldr	r3, [r7, #28]
 8005710:	2b08      	cmp	r3, #8
 8005712:	d005      	beq.n	8005720 <HAL_RCC_OscConfig+0x1dc>
 8005714:	69fb      	ldr	r3, [r7, #28]
 8005716:	2b0c      	cmp	r3, #12
 8005718:	d10d      	bne.n	8005736 <HAL_RCC_OscConfig+0x1f2>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800571a:	69bb      	ldr	r3, [r7, #24]
 800571c:	2b03      	cmp	r3, #3
 800571e:	d10a      	bne.n	8005736 <HAL_RCC_OscConfig+0x1f2>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005720:	f7ff fcdb 	bl	80050da <LL_RCC_HSE_IsReady>
 8005724:	4603      	mov	r3, r0
 8005726:	2b00      	cmp	r3, #0
 8005728:	d050      	beq.n	80057cc <HAL_RCC_OscConfig+0x288>
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	685b      	ldr	r3, [r3, #4]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d14c      	bne.n	80057cc <HAL_RCC_OscConfig+0x288>
      {
        return HAL_ERROR;
 8005732:	2301      	movs	r3, #1
 8005734:	e29b      	b.n	8005c6e <HAL_RCC_OscConfig+0x72a>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 8005736:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	689b      	ldr	r3, [r3, #8]
 8005744:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005748:	4313      	orrs	r3, r2
 800574a:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	685b      	ldr	r3, [r3, #4]
 8005750:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005754:	d102      	bne.n	800575c <HAL_RCC_OscConfig+0x218>
 8005756:	f7ff fca4 	bl	80050a2 <LL_RCC_HSE_Enable>
 800575a:	e00d      	b.n	8005778 <HAL_RCC_OscConfig+0x234>
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	685b      	ldr	r3, [r3, #4]
 8005760:	f5b3 1f04 	cmp.w	r3, #2162688	@ 0x210000
 8005764:	d104      	bne.n	8005770 <HAL_RCC_OscConfig+0x22c>
 8005766:	f7ff fc6f 	bl	8005048 <LL_RCC_HSE_EnableTcxo>
 800576a:	f7ff fc9a 	bl	80050a2 <LL_RCC_HSE_Enable>
 800576e:	e003      	b.n	8005778 <HAL_RCC_OscConfig+0x234>
 8005770:	f7ff fca5 	bl	80050be <LL_RCC_HSE_Disable>
 8005774:	f7ff fc76 	bl	8005064 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	685b      	ldr	r3, [r3, #4]
 800577c:	2b00      	cmp	r3, #0
 800577e:	d012      	beq.n	80057a6 <HAL_RCC_OscConfig+0x262>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005780:	f7fc fab2 	bl	8001ce8 <HAL_GetTick>
 8005784:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8005786:	e008      	b.n	800579a <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005788:	f7fc faae 	bl	8001ce8 <HAL_GetTick>
 800578c:	4602      	mov	r2, r0
 800578e:	697b      	ldr	r3, [r7, #20]
 8005790:	1ad3      	subs	r3, r2, r3
 8005792:	2b64      	cmp	r3, #100	@ 0x64
 8005794:	d901      	bls.n	800579a <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 8005796:	2303      	movs	r3, #3
 8005798:	e269      	b.n	8005c6e <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSE_IsReady() == 0U)
 800579a:	f7ff fc9e 	bl	80050da <LL_RCC_HSE_IsReady>
 800579e:	4603      	mov	r3, r0
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d0f1      	beq.n	8005788 <HAL_RCC_OscConfig+0x244>
 80057a4:	e013      	b.n	80057ce <HAL_RCC_OscConfig+0x28a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057a6:	f7fc fa9f 	bl	8001ce8 <HAL_GetTick>
 80057aa:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 80057ac:	e008      	b.n	80057c0 <HAL_RCC_OscConfig+0x27c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80057ae:	f7fc fa9b 	bl	8001ce8 <HAL_GetTick>
 80057b2:	4602      	mov	r2, r0
 80057b4:	697b      	ldr	r3, [r7, #20]
 80057b6:	1ad3      	subs	r3, r2, r3
 80057b8:	2b64      	cmp	r3, #100	@ 0x64
 80057ba:	d901      	bls.n	80057c0 <HAL_RCC_OscConfig+0x27c>
          {
            return HAL_TIMEOUT;
 80057bc:	2303      	movs	r3, #3
 80057be:	e256      	b.n	8005c6e <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSE_IsReady() != 0U)
 80057c0:	f7ff fc8b 	bl	80050da <LL_RCC_HSE_IsReady>
 80057c4:	4603      	mov	r3, r0
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d1f1      	bne.n	80057ae <HAL_RCC_OscConfig+0x26a>
 80057ca:	e000      	b.n	80057ce <HAL_RCC_OscConfig+0x28a>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80057cc:	bf00      	nop
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f003 0302 	and.w	r3, r3, #2
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d04b      	beq.n	8005872 <HAL_RCC_OscConfig+0x32e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80057da:	69fb      	ldr	r3, [r7, #28]
 80057dc:	2b04      	cmp	r3, #4
 80057de:	d005      	beq.n	80057ec <HAL_RCC_OscConfig+0x2a8>
 80057e0:	69fb      	ldr	r3, [r7, #28]
 80057e2:	2b0c      	cmp	r3, #12
 80057e4:	d113      	bne.n	800580e <HAL_RCC_OscConfig+0x2ca>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80057e6:	69bb      	ldr	r3, [r7, #24]
 80057e8:	2b02      	cmp	r3, #2
 80057ea:	d110      	bne.n	800580e <HAL_RCC_OscConfig+0x2ca>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80057ec:	f7ff fca2 	bl	8005134 <LL_RCC_HSI_IsReady>
 80057f0:	4603      	mov	r3, r0
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d005      	beq.n	8005802 <HAL_RCC_OscConfig+0x2be>
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	691b      	ldr	r3, [r3, #16]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d101      	bne.n	8005802 <HAL_RCC_OscConfig+0x2be>
      {
        return HAL_ERROR;
 80057fe:	2301      	movs	r3, #1
 8005800:	e235      	b.n	8005c6e <HAL_RCC_OscConfig+0x72a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	695b      	ldr	r3, [r3, #20]
 8005806:	4618      	mov	r0, r3
 8005808:	f7ff fca5 	bl	8005156 <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800580c:	e031      	b.n	8005872 <HAL_RCC_OscConfig+0x32e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	691b      	ldr	r3, [r3, #16]
 8005812:	2b00      	cmp	r3, #0
 8005814:	d019      	beq.n	800584a <HAL_RCC_OscConfig+0x306>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005816:	f7ff fc71 	bl	80050fc <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800581a:	f7fc fa65 	bl	8001ce8 <HAL_GetTick>
 800581e:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8005820:	e008      	b.n	8005834 <HAL_RCC_OscConfig+0x2f0>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005822:	f7fc fa61 	bl	8001ce8 <HAL_GetTick>
 8005826:	4602      	mov	r2, r0
 8005828:	697b      	ldr	r3, [r7, #20]
 800582a:	1ad3      	subs	r3, r2, r3
 800582c:	2b02      	cmp	r3, #2
 800582e:	d901      	bls.n	8005834 <HAL_RCC_OscConfig+0x2f0>
          {
            return HAL_TIMEOUT;
 8005830:	2303      	movs	r3, #3
 8005832:	e21c      	b.n	8005c6e <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSI_IsReady() == 0U)
 8005834:	f7ff fc7e 	bl	8005134 <LL_RCC_HSI_IsReady>
 8005838:	4603      	mov	r3, r0
 800583a:	2b00      	cmp	r3, #0
 800583c:	d0f1      	beq.n	8005822 <HAL_RCC_OscConfig+0x2de>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	695b      	ldr	r3, [r3, #20]
 8005842:	4618      	mov	r0, r3
 8005844:	f7ff fc87 	bl	8005156 <LL_RCC_HSI_SetCalibTrimming>
 8005848:	e013      	b.n	8005872 <HAL_RCC_OscConfig+0x32e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800584a:	f7ff fc65 	bl	8005118 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800584e:	f7fc fa4b 	bl	8001ce8 <HAL_GetTick>
 8005852:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8005854:	e008      	b.n	8005868 <HAL_RCC_OscConfig+0x324>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005856:	f7fc fa47 	bl	8001ce8 <HAL_GetTick>
 800585a:	4602      	mov	r2, r0
 800585c:	697b      	ldr	r3, [r7, #20]
 800585e:	1ad3      	subs	r3, r2, r3
 8005860:	2b02      	cmp	r3, #2
 8005862:	d901      	bls.n	8005868 <HAL_RCC_OscConfig+0x324>
          {
            return HAL_TIMEOUT;
 8005864:	2303      	movs	r3, #3
 8005866:	e202      	b.n	8005c6e <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSI_IsReady() != 0U)
 8005868:	f7ff fc64 	bl	8005134 <LL_RCC_HSI_IsReady>
 800586c:	4603      	mov	r3, r0
 800586e:	2b00      	cmp	r3, #0
 8005870:	d1f1      	bne.n	8005856 <HAL_RCC_OscConfig+0x312>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f003 0308 	and.w	r3, r3, #8
 800587a:	2b00      	cmp	r3, #0
 800587c:	d06f      	beq.n	800595e <HAL_RCC_OscConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	699b      	ldr	r3, [r3, #24]
 8005882:	2b00      	cmp	r3, #0
 8005884:	d057      	beq.n	8005936 <HAL_RCC_OscConfig+0x3f2>
    {
      uint32_t csr_temp = RCC->CSR;
 8005886:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800588a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800588e:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	69da      	ldr	r2, [r3, #28]
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	f003 0310 	and.w	r3, r3, #16
 800589a:	429a      	cmp	r2, r3
 800589c:	d036      	beq.n	800590c <HAL_RCC_OscConfig+0x3c8>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	f003 0302 	and.w	r3, r3, #2
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d006      	beq.n	80058b6 <HAL_RCC_OscConfig+0x372>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d101      	bne.n	80058b6 <HAL_RCC_OscConfig+0x372>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated  */
          return HAL_ERROR;
 80058b2:	2301      	movs	r3, #1
 80058b4:	e1db      	b.n	8005c6e <HAL_RCC_OscConfig+0x72a>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	f003 0301 	and.w	r3, r3, #1
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d018      	beq.n	80058f2 <HAL_RCC_OscConfig+0x3ae>
        {
          __HAL_RCC_LSI_DISABLE();
 80058c0:	f7ff fc7e 	bl	80051c0 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80058c4:	f7fc fa10 	bl	8001ce8 <HAL_GetTick>
 80058c8:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 80058ca:	e00d      	b.n	80058e8 <HAL_RCC_OscConfig+0x3a4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80058cc:	f7fc fa0c 	bl	8001ce8 <HAL_GetTick>
 80058d0:	4602      	mov	r2, r0
 80058d2:	697b      	ldr	r3, [r7, #20]
 80058d4:	1ad3      	subs	r3, r2, r3
 80058d6:	2b11      	cmp	r3, #17
 80058d8:	d906      	bls.n	80058e8 <HAL_RCC_OscConfig+0x3a4>
            {
              return HAL_TIMEOUT;
 80058da:	2303      	movs	r3, #3
 80058dc:	e1c7      	b.n	8005c6e <HAL_RCC_OscConfig+0x72a>
 80058de:	bf00      	nop
 80058e0:	20000000 	.word	0x20000000
 80058e4:	20000004 	.word	0x20000004
          while (LL_RCC_LSI_IsReady() != 0U)
 80058e8:	f7ff fc7a 	bl	80051e0 <LL_RCC_LSI_IsReady>
 80058ec:	4603      	mov	r3, r0
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d1ec      	bne.n	80058cc <HAL_RCC_OscConfig+0x388>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 80058f2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80058f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80058fa:	f023 0210 	bic.w	r2, r3, #16
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	69db      	ldr	r3, [r3, #28]
 8005902:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005906:	4313      	orrs	r3, r2
 8005908:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800590c:	f7ff fc48 	bl	80051a0 <LL_RCC_LSI_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005910:	f7fc f9ea 	bl	8001ce8 <HAL_GetTick>
 8005914:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 8005916:	e008      	b.n	800592a <HAL_RCC_OscConfig+0x3e6>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005918:	f7fc f9e6 	bl	8001ce8 <HAL_GetTick>
 800591c:	4602      	mov	r2, r0
 800591e:	697b      	ldr	r3, [r7, #20]
 8005920:	1ad3      	subs	r3, r2, r3
 8005922:	2b11      	cmp	r3, #17
 8005924:	d901      	bls.n	800592a <HAL_RCC_OscConfig+0x3e6>
        {
          return HAL_TIMEOUT;
 8005926:	2303      	movs	r3, #3
 8005928:	e1a1      	b.n	8005c6e <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSI_IsReady() == 0U)
 800592a:	f7ff fc59 	bl	80051e0 <LL_RCC_LSI_IsReady>
 800592e:	4603      	mov	r3, r0
 8005930:	2b00      	cmp	r3, #0
 8005932:	d0f1      	beq.n	8005918 <HAL_RCC_OscConfig+0x3d4>
 8005934:	e013      	b.n	800595e <HAL_RCC_OscConfig+0x41a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005936:	f7ff fc43 	bl	80051c0 <LL_RCC_LSI_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800593a:	f7fc f9d5 	bl	8001ce8 <HAL_GetTick>
 800593e:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 8005940:	e008      	b.n	8005954 <HAL_RCC_OscConfig+0x410>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005942:	f7fc f9d1 	bl	8001ce8 <HAL_GetTick>
 8005946:	4602      	mov	r2, r0
 8005948:	697b      	ldr	r3, [r7, #20]
 800594a:	1ad3      	subs	r3, r2, r3
 800594c:	2b11      	cmp	r3, #17
 800594e:	d901      	bls.n	8005954 <HAL_RCC_OscConfig+0x410>
        {
          return HAL_TIMEOUT;
 8005950:	2303      	movs	r3, #3
 8005952:	e18c      	b.n	8005c6e <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSI_IsReady() != 0U)
 8005954:	f7ff fc44 	bl	80051e0 <LL_RCC_LSI_IsReady>
 8005958:	4603      	mov	r3, r0
 800595a:	2b00      	cmp	r3, #0
 800595c:	d1f1      	bne.n	8005942 <HAL_RCC_OscConfig+0x3fe>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f003 0304 	and.w	r3, r3, #4
 8005966:	2b00      	cmp	r3, #0
 8005968:	f000 80d8 	beq.w	8005b1c <HAL_RCC_OscConfig+0x5d8>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 800596c:	f7ff fb5a 	bl	8005024 <LL_PWR_IsEnabledBkUpAccess>
 8005970:	4603      	mov	r3, r0
 8005972:	2b00      	cmp	r3, #0
 8005974:	d113      	bne.n	800599e <HAL_RCC_OscConfig+0x45a>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8005976:	f7ff fa99 	bl	8004eac <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800597a:	f7fc f9b5 	bl	8001ce8 <HAL_GetTick>
 800597e:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8005980:	e008      	b.n	8005994 <HAL_RCC_OscConfig+0x450>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005982:	f7fc f9b1 	bl	8001ce8 <HAL_GetTick>
 8005986:	4602      	mov	r2, r0
 8005988:	697b      	ldr	r3, [r7, #20]
 800598a:	1ad3      	subs	r3, r2, r3
 800598c:	2b02      	cmp	r3, #2
 800598e:	d901      	bls.n	8005994 <HAL_RCC_OscConfig+0x450>
        {
          return HAL_TIMEOUT;
 8005990:	2303      	movs	r3, #3
 8005992:	e16c      	b.n	8005c6e <HAL_RCC_OscConfig+0x72a>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8005994:	f7ff fb46 	bl	8005024 <LL_PWR_IsEnabledBkUpAccess>
 8005998:	4603      	mov	r3, r0
 800599a:	2b00      	cmp	r3, #0
 800599c:	d0f1      	beq.n	8005982 <HAL_RCC_OscConfig+0x43e>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	68db      	ldr	r3, [r3, #12]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d07b      	beq.n	8005a9e <HAL_RCC_OscConfig+0x55a>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	68db      	ldr	r3, [r3, #12]
 80059aa:	2b85      	cmp	r3, #133	@ 0x85
 80059ac:	d003      	beq.n	80059b6 <HAL_RCC_OscConfig+0x472>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	68db      	ldr	r3, [r3, #12]
 80059b2:	2b05      	cmp	r3, #5
 80059b4:	d109      	bne.n	80059ca <HAL_RCC_OscConfig+0x486>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80059b6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80059ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80059be:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80059c2:	f043 0304 	orr.w	r3, r3, #4
 80059c6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059ca:	f7fc f98d 	bl	8001ce8 <HAL_GetTick>
 80059ce:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80059d0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80059d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80059d8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80059dc:	f043 0301 	orr.w	r3, r3, #1
 80059e0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80059e4:	e00a      	b.n	80059fc <HAL_RCC_OscConfig+0x4b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80059e6:	f7fc f97f 	bl	8001ce8 <HAL_GetTick>
 80059ea:	4602      	mov	r2, r0
 80059ec:	697b      	ldr	r3, [r7, #20]
 80059ee:	1ad3      	subs	r3, r2, r3
 80059f0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80059f4:	4293      	cmp	r3, r2
 80059f6:	d901      	bls.n	80059fc <HAL_RCC_OscConfig+0x4b8>
        {
          return HAL_TIMEOUT;
 80059f8:	2303      	movs	r3, #3
 80059fa:	e138      	b.n	8005c6e <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSE_IsReady() == 0U)
 80059fc:	f7ff fbbf 	bl	800517e <LL_RCC_LSE_IsReady>
 8005a00:	4603      	mov	r3, r0
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d0ef      	beq.n	80059e6 <HAL_RCC_OscConfig+0x4a2>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	68db      	ldr	r3, [r3, #12]
 8005a0a:	2b81      	cmp	r3, #129	@ 0x81
 8005a0c:	d003      	beq.n	8005a16 <HAL_RCC_OscConfig+0x4d2>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	68db      	ldr	r3, [r3, #12]
 8005a12:	2b85      	cmp	r3, #133	@ 0x85
 8005a14:	d121      	bne.n	8005a5a <HAL_RCC_OscConfig+0x516>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a16:	f7fc f967 	bl	8001ce8 <HAL_GetTick>
 8005a1a:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8005a1c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005a20:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a24:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005a28:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005a2c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8005a30:	e00a      	b.n	8005a48 <HAL_RCC_OscConfig+0x504>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a32:	f7fc f959 	bl	8001ce8 <HAL_GetTick>
 8005a36:	4602      	mov	r2, r0
 8005a38:	697b      	ldr	r3, [r7, #20]
 8005a3a:	1ad3      	subs	r3, r2, r3
 8005a3c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005a40:	4293      	cmp	r3, r2
 8005a42:	d901      	bls.n	8005a48 <HAL_RCC_OscConfig+0x504>
          {
            return HAL_TIMEOUT;
 8005a44:	2303      	movs	r3, #3
 8005a46:	e112      	b.n	8005c6e <HAL_RCC_OscConfig+0x72a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8005a48:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005a4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a50:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d0ec      	beq.n	8005a32 <HAL_RCC_OscConfig+0x4ee>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8005a58:	e060      	b.n	8005b1c <HAL_RCC_OscConfig+0x5d8>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a5a:	f7fc f945 	bl	8001ce8 <HAL_GetTick>
 8005a5e:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8005a60:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005a64:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a68:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005a6c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005a70:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005a74:	e00a      	b.n	8005a8c <HAL_RCC_OscConfig+0x548>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a76:	f7fc f937 	bl	8001ce8 <HAL_GetTick>
 8005a7a:	4602      	mov	r2, r0
 8005a7c:	697b      	ldr	r3, [r7, #20]
 8005a7e:	1ad3      	subs	r3, r2, r3
 8005a80:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005a84:	4293      	cmp	r3, r2
 8005a86:	d901      	bls.n	8005a8c <HAL_RCC_OscConfig+0x548>
          {
            return HAL_TIMEOUT;
 8005a88:	2303      	movs	r3, #3
 8005a8a:	e0f0      	b.n	8005c6e <HAL_RCC_OscConfig+0x72a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005a8c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005a90:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a94:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d1ec      	bne.n	8005a76 <HAL_RCC_OscConfig+0x532>
 8005a9c:	e03e      	b.n	8005b1c <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a9e:	f7fc f923 	bl	8001ce8 <HAL_GetTick>
 8005aa2:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8005aa4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005aa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005aac:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005ab0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005ab4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005ab8:	e00a      	b.n	8005ad0 <HAL_RCC_OscConfig+0x58c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005aba:	f7fc f915 	bl	8001ce8 <HAL_GetTick>
 8005abe:	4602      	mov	r2, r0
 8005ac0:	697b      	ldr	r3, [r7, #20]
 8005ac2:	1ad3      	subs	r3, r2, r3
 8005ac4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005ac8:	4293      	cmp	r3, r2
 8005aca:	d901      	bls.n	8005ad0 <HAL_RCC_OscConfig+0x58c>
        {
          return HAL_TIMEOUT;
 8005acc:	2303      	movs	r3, #3
 8005ace:	e0ce      	b.n	8005c6e <HAL_RCC_OscConfig+0x72a>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005ad0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005ad4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ad8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d1ec      	bne.n	8005aba <HAL_RCC_OscConfig+0x576>
        }
      }

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ae0:	f7fc f902 	bl	8001ce8 <HAL_GetTick>
 8005ae4:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005ae6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005aea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005aee:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005af2:	f023 0301 	bic.w	r3, r3, #1
 8005af6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8005afa:	e00a      	b.n	8005b12 <HAL_RCC_OscConfig+0x5ce>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005afc:	f7fc f8f4 	bl	8001ce8 <HAL_GetTick>
 8005b00:	4602      	mov	r2, r0
 8005b02:	697b      	ldr	r3, [r7, #20]
 8005b04:	1ad3      	subs	r3, r2, r3
 8005b06:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005b0a:	4293      	cmp	r3, r2
 8005b0c:	d901      	bls.n	8005b12 <HAL_RCC_OscConfig+0x5ce>
        {
          return HAL_TIMEOUT;
 8005b0e:	2303      	movs	r3, #3
 8005b10:	e0ad      	b.n	8005c6e <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSE_IsReady() != 0U)
 8005b12:	f7ff fb34 	bl	800517e <LL_RCC_LSE_IsReady>
 8005b16:	4603      	mov	r3, r0
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d1ef      	bne.n	8005afc <HAL_RCC_OscConfig+0x5b8>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	f000 80a3 	beq.w	8005c6c <HAL_RCC_OscConfig+0x728>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005b26:	69fb      	ldr	r3, [r7, #28]
 8005b28:	2b0c      	cmp	r3, #12
 8005b2a:	d076      	beq.n	8005c1a <HAL_RCC_OscConfig+0x6d6>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b30:	2b02      	cmp	r3, #2
 8005b32:	d14b      	bne.n	8005bcc <HAL_RCC_OscConfig+0x688>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b34:	f7ff fc75 	bl	8005422 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b38:	f7fc f8d6 	bl	8001ce8 <HAL_GetTick>
 8005b3c:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 8005b3e:	e008      	b.n	8005b52 <HAL_RCC_OscConfig+0x60e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b40:	f7fc f8d2 	bl	8001ce8 <HAL_GetTick>
 8005b44:	4602      	mov	r2, r0
 8005b46:	697b      	ldr	r3, [r7, #20]
 8005b48:	1ad3      	subs	r3, r2, r3
 8005b4a:	2b0a      	cmp	r3, #10
 8005b4c:	d901      	bls.n	8005b52 <HAL_RCC_OscConfig+0x60e>
          {
            return HAL_TIMEOUT;
 8005b4e:	2303      	movs	r3, #3
 8005b50:	e08d      	b.n	8005c6e <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_PLL_IsReady() != 0U)
 8005b52:	f7ff fc74 	bl	800543e <LL_RCC_PLL_IsReady>
 8005b56:	4603      	mov	r3, r0
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d1f1      	bne.n	8005b40 <HAL_RCC_OscConfig+0x5fc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005b5c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005b60:	68da      	ldr	r2, [r3, #12]
 8005b62:	4b45      	ldr	r3, [pc, #276]	@ (8005c78 <HAL_RCC_OscConfig+0x734>)
 8005b64:	4013      	ands	r3, r2
 8005b66:	687a      	ldr	r2, [r7, #4]
 8005b68:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8005b6a:	687a      	ldr	r2, [r7, #4]
 8005b6c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005b6e:	4311      	orrs	r1, r2
 8005b70:	687a      	ldr	r2, [r7, #4]
 8005b72:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005b74:	0212      	lsls	r2, r2, #8
 8005b76:	4311      	orrs	r1, r2
 8005b78:	687a      	ldr	r2, [r7, #4]
 8005b7a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005b7c:	4311      	orrs	r1, r2
 8005b7e:	687a      	ldr	r2, [r7, #4]
 8005b80:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8005b82:	4311      	orrs	r1, r2
 8005b84:	687a      	ldr	r2, [r7, #4]
 8005b86:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8005b88:	430a      	orrs	r2, r1
 8005b8a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005b8e:	4313      	orrs	r3, r2
 8005b90:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005b92:	f7ff fc38 	bl	8005406 <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005b96:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005b9a:	68db      	ldr	r3, [r3, #12]
 8005b9c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005ba0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005ba4:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ba6:	f7fc f89f 	bl	8001ce8 <HAL_GetTick>
 8005baa:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 8005bac:	e008      	b.n	8005bc0 <HAL_RCC_OscConfig+0x67c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005bae:	f7fc f89b 	bl	8001ce8 <HAL_GetTick>
 8005bb2:	4602      	mov	r2, r0
 8005bb4:	697b      	ldr	r3, [r7, #20]
 8005bb6:	1ad3      	subs	r3, r2, r3
 8005bb8:	2b0a      	cmp	r3, #10
 8005bba:	d901      	bls.n	8005bc0 <HAL_RCC_OscConfig+0x67c>
          {
            return HAL_TIMEOUT;
 8005bbc:	2303      	movs	r3, #3
 8005bbe:	e056      	b.n	8005c6e <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_PLL_IsReady() == 0U)
 8005bc0:	f7ff fc3d 	bl	800543e <LL_RCC_PLL_IsReady>
 8005bc4:	4603      	mov	r3, r0
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d0f1      	beq.n	8005bae <HAL_RCC_OscConfig+0x66a>
 8005bca:	e04f      	b.n	8005c6c <HAL_RCC_OscConfig+0x728>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005bcc:	f7ff fc29 	bl	8005422 <LL_RCC_PLL_Disable>

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8005bd0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005bd4:	68db      	ldr	r3, [r3, #12]
 8005bd6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005bda:	f023 0303 	bic.w	r3, r3, #3
 8005bde:	60d3      	str	r3, [r2, #12]

        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_RNGCLK | RCC_PLL_ADCCLK);
 8005be0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005be4:	68db      	ldr	r3, [r3, #12]
 8005be6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005bea:	f023 5388 	bic.w	r3, r3, #285212672	@ 0x11000000
 8005bee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005bf2:	60d3      	str	r3, [r2, #12]


        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bf4:	f7fc f878 	bl	8001ce8 <HAL_GetTick>
 8005bf8:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 8005bfa:	e008      	b.n	8005c0e <HAL_RCC_OscConfig+0x6ca>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005bfc:	f7fc f874 	bl	8001ce8 <HAL_GetTick>
 8005c00:	4602      	mov	r2, r0
 8005c02:	697b      	ldr	r3, [r7, #20]
 8005c04:	1ad3      	subs	r3, r2, r3
 8005c06:	2b0a      	cmp	r3, #10
 8005c08:	d901      	bls.n	8005c0e <HAL_RCC_OscConfig+0x6ca>
          {
            return HAL_TIMEOUT;
 8005c0a:	2303      	movs	r3, #3
 8005c0c:	e02f      	b.n	8005c6e <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_PLL_IsReady() != 0U)
 8005c0e:	f7ff fc16 	bl	800543e <LL_RCC_PLL_IsReady>
 8005c12:	4603      	mov	r3, r0
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d1f1      	bne.n	8005bfc <HAL_RCC_OscConfig+0x6b8>
 8005c18:	e028      	b.n	8005c6c <HAL_RCC_OscConfig+0x728>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c1e:	2b01      	cmp	r3, #1
 8005c20:	d101      	bne.n	8005c26 <HAL_RCC_OscConfig+0x6e2>
      {
        return HAL_ERROR;
 8005c22:	2301      	movs	r3, #1
 8005c24:	e023      	b.n	8005c6e <HAL_RCC_OscConfig+0x72a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005c26:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005c2a:	68db      	ldr	r3, [r3, #12]
 8005c2c:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 8005c2e:	69bb      	ldr	r3, [r7, #24]
 8005c30:	f003 0203 	and.w	r2, r3, #3
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c38:	429a      	cmp	r2, r3
 8005c3a:	d115      	bne.n	8005c68 <HAL_RCC_OscConfig+0x724>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8005c3c:	69bb      	ldr	r3, [r7, #24]
 8005c3e:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c46:	429a      	cmp	r2, r3
 8005c48:	d10e      	bne.n	8005c68 <HAL_RCC_OscConfig+0x724>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 8005c4a:	69bb      	ldr	r3, [r7, #24]
 8005c4c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c54:	021b      	lsls	r3, r3, #8
 8005c56:	429a      	cmp	r2, r3
 8005c58:	d106      	bne.n	8005c68 <HAL_RCC_OscConfig+0x724>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 8005c5a:	69bb      	ldr	r3, [r7, #24]
 8005c5c:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c64:	429a      	cmp	r2, r3
 8005c66:	d001      	beq.n	8005c6c <HAL_RCC_OscConfig+0x728>
        {
          return HAL_ERROR;
 8005c68:	2301      	movs	r3, #1
 8005c6a:	e000      	b.n	8005c6e <HAL_RCC_OscConfig+0x72a>
        }
      }
    }
  }
  return HAL_OK;
 8005c6c:	2300      	movs	r3, #0
}
 8005c6e:	4618      	mov	r0, r3
 8005c70:	3720      	adds	r7, #32
 8005c72:	46bd      	mov	sp, r7
 8005c74:	bd80      	pop	{r7, pc}
 8005c76:	bf00      	nop
 8005c78:	11c1808c 	.word	0x11c1808c

08005c7c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005c7c:	b580      	push	{r7, lr}
 8005c7e:	b084      	sub	sp, #16
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	6078      	str	r0, [r7, #4]
 8005c84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d101      	bne.n	8005c90 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005c8c:	2301      	movs	r3, #1
 8005c8e:	e10f      	b.n	8005eb0 <HAL_RCC_ClockConfig+0x234>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005c90:	4b89      	ldr	r3, [pc, #548]	@ (8005eb8 <HAL_RCC_ClockConfig+0x23c>)
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f003 0307 	and.w	r3, r3, #7
 8005c98:	683a      	ldr	r2, [r7, #0]
 8005c9a:	429a      	cmp	r2, r3
 8005c9c:	d91b      	bls.n	8005cd6 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c9e:	4b86      	ldr	r3, [pc, #536]	@ (8005eb8 <HAL_RCC_ClockConfig+0x23c>)
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f023 0207 	bic.w	r2, r3, #7
 8005ca6:	4984      	ldr	r1, [pc, #528]	@ (8005eb8 <HAL_RCC_ClockConfig+0x23c>)
 8005ca8:	683b      	ldr	r3, [r7, #0]
 8005caa:	4313      	orrs	r3, r2
 8005cac:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005cae:	f7fc f81b 	bl	8001ce8 <HAL_GetTick>
 8005cb2:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005cb4:	e008      	b.n	8005cc8 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005cb6:	f7fc f817 	bl	8001ce8 <HAL_GetTick>
 8005cba:	4602      	mov	r2, r0
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	1ad3      	subs	r3, r2, r3
 8005cc0:	2b02      	cmp	r3, #2
 8005cc2:	d901      	bls.n	8005cc8 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8005cc4:	2303      	movs	r3, #3
 8005cc6:	e0f3      	b.n	8005eb0 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005cc8:	4b7b      	ldr	r3, [pc, #492]	@ (8005eb8 <HAL_RCC_ClockConfig+0x23c>)
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f003 0307 	and.w	r3, r3, #7
 8005cd0:	683a      	ldr	r2, [r7, #0]
 8005cd2:	429a      	cmp	r2, r3
 8005cd4:	d1ef      	bne.n	8005cb6 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f003 0302 	and.w	r3, r3, #2
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d016      	beq.n	8005d10 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	689b      	ldr	r3, [r3, #8]
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	f7ff fb10 	bl	800530c <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005cec:	f7fb fffc 	bl	8001ce8 <HAL_GetTick>
 8005cf0:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8005cf2:	e008      	b.n	8005d06 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005cf4:	f7fb fff8 	bl	8001ce8 <HAL_GetTick>
 8005cf8:	4602      	mov	r2, r0
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	1ad3      	subs	r3, r2, r3
 8005cfe:	2b02      	cmp	r3, #2
 8005d00:	d901      	bls.n	8005d06 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8005d02:	2303      	movs	r3, #3
 8005d04:	e0d4      	b.n	8005eb0 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8005d06:	f7ff fbd8 	bl	80054ba <LL_RCC_IsActiveFlag_HPRE>
 8005d0a:	4603      	mov	r3, r0
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d0f1      	beq.n	8005cf4 <HAL_RCC_ClockConfig+0x78>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d016      	beq.n	8005d4a <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	695b      	ldr	r3, [r3, #20]
 8005d20:	4618      	mov	r0, r3
 8005d22:	f7ff fb06 	bl	8005332 <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005d26:	f7fb ffdf 	bl	8001ce8 <HAL_GetTick>
 8005d2a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8005d2c:	e008      	b.n	8005d40 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005d2e:	f7fb ffdb 	bl	8001ce8 <HAL_GetTick>
 8005d32:	4602      	mov	r2, r0
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	1ad3      	subs	r3, r2, r3
 8005d38:	2b02      	cmp	r3, #2
 8005d3a:	d901      	bls.n	8005d40 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8005d3c:	2303      	movs	r3, #3
 8005d3e:	e0b7      	b.n	8005eb0 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8005d40:	f7ff fbcc 	bl	80054dc <LL_RCC_IsActiveFlag_SHDHPRE>
 8005d44:	4603      	mov	r3, r0
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d0f1      	beq.n	8005d2e <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f003 0304 	and.w	r3, r3, #4
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d016      	beq.n	8005d84 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	68db      	ldr	r3, [r3, #12]
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	f7ff faff 	bl	800535e <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005d60:	f7fb ffc2 	bl	8001ce8 <HAL_GetTick>
 8005d64:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8005d66:	e008      	b.n	8005d7a <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005d68:	f7fb ffbe 	bl	8001ce8 <HAL_GetTick>
 8005d6c:	4602      	mov	r2, r0
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	1ad3      	subs	r3, r2, r3
 8005d72:	2b02      	cmp	r3, #2
 8005d74:	d901      	bls.n	8005d7a <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8005d76:	2303      	movs	r3, #3
 8005d78:	e09a      	b.n	8005eb0 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8005d7a:	f7ff fbc1 	bl	8005500 <LL_RCC_IsActiveFlag_PPRE1>
 8005d7e:	4603      	mov	r3, r0
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d0f1      	beq.n	8005d68 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f003 0308 	and.w	r3, r3, #8
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d017      	beq.n	8005dc0 <HAL_RCC_ClockConfig+0x144>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	691b      	ldr	r3, [r3, #16]
 8005d94:	00db      	lsls	r3, r3, #3
 8005d96:	4618      	mov	r0, r3
 8005d98:	f7ff faf4 	bl	8005384 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005d9c:	f7fb ffa4 	bl	8001ce8 <HAL_GetTick>
 8005da0:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8005da2:	e008      	b.n	8005db6 <HAL_RCC_ClockConfig+0x13a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005da4:	f7fb ffa0 	bl	8001ce8 <HAL_GetTick>
 8005da8:	4602      	mov	r2, r0
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	1ad3      	subs	r3, r2, r3
 8005dae:	2b02      	cmp	r3, #2
 8005db0:	d901      	bls.n	8005db6 <HAL_RCC_ClockConfig+0x13a>
      {
        return HAL_TIMEOUT;
 8005db2:	2303      	movs	r3, #3
 8005db4:	e07c      	b.n	8005eb0 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8005db6:	f7ff fbb4 	bl	8005522 <LL_RCC_IsActiveFlag_PPRE2>
 8005dba:	4603      	mov	r3, r0
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d0f1      	beq.n	8005da4 <HAL_RCC_ClockConfig+0x128>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	f003 0301 	and.w	r3, r3, #1
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d043      	beq.n	8005e54 <HAL_RCC_ClockConfig+0x1d8>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	685b      	ldr	r3, [r3, #4]
 8005dd0:	2b02      	cmp	r3, #2
 8005dd2:	d106      	bne.n	8005de2 <HAL_RCC_ClockConfig+0x166>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8005dd4:	f7ff f981 	bl	80050da <LL_RCC_HSE_IsReady>
 8005dd8:	4603      	mov	r3, r0
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d11e      	bne.n	8005e1c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005dde:	2301      	movs	r3, #1
 8005de0:	e066      	b.n	8005eb0 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	685b      	ldr	r3, [r3, #4]
 8005de6:	2b03      	cmp	r3, #3
 8005de8:	d106      	bne.n	8005df8 <HAL_RCC_ClockConfig+0x17c>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8005dea:	f7ff fb28 	bl	800543e <LL_RCC_PLL_IsReady>
 8005dee:	4603      	mov	r3, r0
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d113      	bne.n	8005e1c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005df4:	2301      	movs	r3, #1
 8005df6:	e05b      	b.n	8005eb0 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	685b      	ldr	r3, [r3, #4]
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d106      	bne.n	8005e0e <HAL_RCC_ClockConfig+0x192>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8005e00:	f7ff fa1b 	bl	800523a <LL_RCC_MSI_IsReady>
 8005e04:	4603      	mov	r3, r0
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d108      	bne.n	8005e1c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005e0a:	2301      	movs	r3, #1
 8005e0c:	e050      	b.n	8005eb0 <HAL_RCC_ClockConfig+0x234>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8005e0e:	f7ff f991 	bl	8005134 <LL_RCC_HSI_IsReady>
 8005e12:	4603      	mov	r3, r0
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d101      	bne.n	8005e1c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005e18:	2301      	movs	r3, #1
 8005e1a:	e049      	b.n	8005eb0 <HAL_RCC_ClockConfig+0x234>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	685b      	ldr	r3, [r3, #4]
 8005e20:	4618      	mov	r0, r3
 8005e22:	f7ff fa55 	bl	80052d0 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005e26:	f7fb ff5f 	bl	8001ce8 <HAL_GetTick>
 8005e2a:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e2c:	e00a      	b.n	8005e44 <HAL_RCC_ClockConfig+0x1c8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005e2e:	f7fb ff5b 	bl	8001ce8 <HAL_GetTick>
 8005e32:	4602      	mov	r2, r0
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	1ad3      	subs	r3, r2, r3
 8005e38:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005e3c:	4293      	cmp	r3, r2
 8005e3e:	d901      	bls.n	8005e44 <HAL_RCC_ClockConfig+0x1c8>
      {
        return HAL_TIMEOUT;
 8005e40:	2303      	movs	r3, #3
 8005e42:	e035      	b.n	8005eb0 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e44:	f7ff fa57 	bl	80052f6 <LL_RCC_GetSysClkSource>
 8005e48:	4602      	mov	r2, r0
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	685b      	ldr	r3, [r3, #4]
 8005e4e:	009b      	lsls	r3, r3, #2
 8005e50:	429a      	cmp	r2, r3
 8005e52:	d1ec      	bne.n	8005e2e <HAL_RCC_ClockConfig+0x1b2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005e54:	4b18      	ldr	r3, [pc, #96]	@ (8005eb8 <HAL_RCC_ClockConfig+0x23c>)
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f003 0307 	and.w	r3, r3, #7
 8005e5c:	683a      	ldr	r2, [r7, #0]
 8005e5e:	429a      	cmp	r2, r3
 8005e60:	d21b      	bcs.n	8005e9a <HAL_RCC_ClockConfig+0x21e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e62:	4b15      	ldr	r3, [pc, #84]	@ (8005eb8 <HAL_RCC_ClockConfig+0x23c>)
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f023 0207 	bic.w	r2, r3, #7
 8005e6a:	4913      	ldr	r1, [pc, #76]	@ (8005eb8 <HAL_RCC_ClockConfig+0x23c>)
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	4313      	orrs	r3, r2
 8005e70:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005e72:	f7fb ff39 	bl	8001ce8 <HAL_GetTick>
 8005e76:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e78:	e008      	b.n	8005e8c <HAL_RCC_ClockConfig+0x210>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005e7a:	f7fb ff35 	bl	8001ce8 <HAL_GetTick>
 8005e7e:	4602      	mov	r2, r0
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	1ad3      	subs	r3, r2, r3
 8005e84:	2b02      	cmp	r3, #2
 8005e86:	d901      	bls.n	8005e8c <HAL_RCC_ClockConfig+0x210>
      {
        return HAL_TIMEOUT;
 8005e88:	2303      	movs	r3, #3
 8005e8a:	e011      	b.n	8005eb0 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e8c:	4b0a      	ldr	r3, [pc, #40]	@ (8005eb8 <HAL_RCC_ClockConfig+0x23c>)
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	f003 0307 	and.w	r3, r3, #7
 8005e94:	683a      	ldr	r2, [r7, #0]
 8005e96:	429a      	cmp	r2, r3
 8005e98:	d1ef      	bne.n	8005e7a <HAL_RCC_ClockConfig+0x1fe>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8005e9a:	f000 f8b3 	bl	8006004 <HAL_RCC_GetHCLKFreq>
 8005e9e:	4603      	mov	r3, r0
 8005ea0:	4a06      	ldr	r2, [pc, #24]	@ (8005ebc <HAL_RCC_ClockConfig+0x240>)
 8005ea2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005ea4:	4b06      	ldr	r3, [pc, #24]	@ (8005ec0 <HAL_RCC_ClockConfig+0x244>)
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	4618      	mov	r0, r3
 8005eaa:	f7fb ff13 	bl	8001cd4 <HAL_InitTick>
 8005eae:	4603      	mov	r3, r0
}
 8005eb0:	4618      	mov	r0, r3
 8005eb2:	3710      	adds	r7, #16
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	bd80      	pop	{r7, pc}
 8005eb8:	58004000 	.word	0x58004000
 8005ebc:	20000000 	.word	0x20000000
 8005ec0:	20000004 	.word	0x20000004

08005ec4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005ec4:	b590      	push	{r4, r7, lr}
 8005ec6:	b087      	sub	sp, #28
 8005ec8:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 8005eca:	2300      	movs	r3, #0
 8005ecc:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 8005ece:	2300      	movs	r3, #0
 8005ed0:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005ed2:	f7ff fa10 	bl	80052f6 <LL_RCC_GetSysClkSource>
 8005ed6:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005ed8:	f7ff fae4 	bl	80054a4 <LL_RCC_PLL_GetMainSource>
 8005edc:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8005ede:	68bb      	ldr	r3, [r7, #8]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d005      	beq.n	8005ef0 <HAL_RCC_GetSysClockFreq+0x2c>
 8005ee4:	68bb      	ldr	r3, [r7, #8]
 8005ee6:	2b0c      	cmp	r3, #12
 8005ee8:	d139      	bne.n	8005f5e <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	2b01      	cmp	r3, #1
 8005eee:	d136      	bne.n	8005f5e <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /*Retrieve MSI frequency range in HZ*/
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8005ef0:	f7ff f9b3 	bl	800525a <LL_RCC_MSI_IsEnabledRangeSelect>
 8005ef4:	4603      	mov	r3, r0
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d115      	bne.n	8005f26 <HAL_RCC_GetSysClockFreq+0x62>
 8005efa:	f7ff f9ae 	bl	800525a <LL_RCC_MSI_IsEnabledRangeSelect>
 8005efe:	4603      	mov	r3, r0
 8005f00:	2b01      	cmp	r3, #1
 8005f02:	d106      	bne.n	8005f12 <HAL_RCC_GetSysClockFreq+0x4e>
 8005f04:	f7ff f9b9 	bl	800527a <LL_RCC_MSI_GetRange>
 8005f08:	4603      	mov	r3, r0
 8005f0a:	0a1b      	lsrs	r3, r3, #8
 8005f0c:	f003 030f 	and.w	r3, r3, #15
 8005f10:	e005      	b.n	8005f1e <HAL_RCC_GetSysClockFreq+0x5a>
 8005f12:	f7ff f9bd 	bl	8005290 <LL_RCC_MSI_GetRangeAfterStandby>
 8005f16:	4603      	mov	r3, r0
 8005f18:	0a1b      	lsrs	r3, r3, #8
 8005f1a:	f003 030f 	and.w	r3, r3, #15
 8005f1e:	4a36      	ldr	r2, [pc, #216]	@ (8005ff8 <HAL_RCC_GetSysClockFreq+0x134>)
 8005f20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f24:	e014      	b.n	8005f50 <HAL_RCC_GetSysClockFreq+0x8c>
 8005f26:	f7ff f998 	bl	800525a <LL_RCC_MSI_IsEnabledRangeSelect>
 8005f2a:	4603      	mov	r3, r0
 8005f2c:	2b01      	cmp	r3, #1
 8005f2e:	d106      	bne.n	8005f3e <HAL_RCC_GetSysClockFreq+0x7a>
 8005f30:	f7ff f9a3 	bl	800527a <LL_RCC_MSI_GetRange>
 8005f34:	4603      	mov	r3, r0
 8005f36:	091b      	lsrs	r3, r3, #4
 8005f38:	f003 030f 	and.w	r3, r3, #15
 8005f3c:	e005      	b.n	8005f4a <HAL_RCC_GetSysClockFreq+0x86>
 8005f3e:	f7ff f9a7 	bl	8005290 <LL_RCC_MSI_GetRangeAfterStandby>
 8005f42:	4603      	mov	r3, r0
 8005f44:	091b      	lsrs	r3, r3, #4
 8005f46:	f003 030f 	and.w	r3, r3, #15
 8005f4a:	4a2b      	ldr	r2, [pc, #172]	@ (8005ff8 <HAL_RCC_GetSysClockFreq+0x134>)
 8005f4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f50:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005f52:	68bb      	ldr	r3, [r7, #8]
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d115      	bne.n	8005f84 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 8005f58:	693b      	ldr	r3, [r7, #16]
 8005f5a:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005f5c:	e012      	b.n	8005f84 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005f5e:	68bb      	ldr	r3, [r7, #8]
 8005f60:	2b04      	cmp	r3, #4
 8005f62:	d102      	bne.n	8005f6a <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005f64:	4b25      	ldr	r3, [pc, #148]	@ (8005ffc <HAL_RCC_GetSysClockFreq+0x138>)
 8005f66:	617b      	str	r3, [r7, #20]
 8005f68:	e00c      	b.n	8005f84 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005f6a:	68bb      	ldr	r3, [r7, #8]
 8005f6c:	2b08      	cmp	r3, #8
 8005f6e:	d109      	bne.n	8005f84 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8005f70:	f7ff f886 	bl	8005080 <LL_RCC_HSE_IsEnabledDiv2>
 8005f74:	4603      	mov	r3, r0
 8005f76:	2b01      	cmp	r3, #1
 8005f78:	d102      	bne.n	8005f80 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8005f7a:	4b20      	ldr	r3, [pc, #128]	@ (8005ffc <HAL_RCC_GetSysClockFreq+0x138>)
 8005f7c:	617b      	str	r3, [r7, #20]
 8005f7e:	e001      	b.n	8005f84 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8005f80:	4b1f      	ldr	r3, [pc, #124]	@ (8006000 <HAL_RCC_GetSysClockFreq+0x13c>)
 8005f82:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005f84:	f7ff f9b7 	bl	80052f6 <LL_RCC_GetSysClkSource>
 8005f88:	4603      	mov	r3, r0
 8005f8a:	2b0c      	cmp	r3, #12
 8005f8c:	d12f      	bne.n	8005fee <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8005f8e:	f7ff fa89 	bl	80054a4 <LL_RCC_PLL_GetMainSource>
 8005f92:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2b02      	cmp	r3, #2
 8005f98:	d003      	beq.n	8005fa2 <HAL_RCC_GetSysClockFreq+0xde>
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	2b03      	cmp	r3, #3
 8005f9e:	d003      	beq.n	8005fa8 <HAL_RCC_GetSysClockFreq+0xe4>
 8005fa0:	e00d      	b.n	8005fbe <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8005fa2:	4b16      	ldr	r3, [pc, #88]	@ (8005ffc <HAL_RCC_GetSysClockFreq+0x138>)
 8005fa4:	60fb      	str	r3, [r7, #12]
        break;
 8005fa6:	e00d      	b.n	8005fc4 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8005fa8:	f7ff f86a 	bl	8005080 <LL_RCC_HSE_IsEnabledDiv2>
 8005fac:	4603      	mov	r3, r0
 8005fae:	2b01      	cmp	r3, #1
 8005fb0:	d102      	bne.n	8005fb8 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8005fb2:	4b12      	ldr	r3, [pc, #72]	@ (8005ffc <HAL_RCC_GetSysClockFreq+0x138>)
 8005fb4:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8005fb6:	e005      	b.n	8005fc4 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8005fb8:	4b11      	ldr	r3, [pc, #68]	@ (8006000 <HAL_RCC_GetSysClockFreq+0x13c>)
 8005fba:	60fb      	str	r3, [r7, #12]
        break;
 8005fbc:	e002      	b.n	8005fc4 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 8005fbe:	693b      	ldr	r3, [r7, #16]
 8005fc0:	60fb      	str	r3, [r7, #12]
        break;
 8005fc2:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8005fc4:	f7ff fa4c 	bl	8005460 <LL_RCC_PLL_GetN>
 8005fc8:	4602      	mov	r2, r0
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	fb03 f402 	mul.w	r4, r3, r2
 8005fd0:	f7ff fa5d 	bl	800548e <LL_RCC_PLL_GetDivider>
 8005fd4:	4603      	mov	r3, r0
 8005fd6:	091b      	lsrs	r3, r3, #4
 8005fd8:	3301      	adds	r3, #1
 8005fda:	fbb4 f4f3 	udiv	r4, r4, r3
 8005fde:	f7ff fa4b 	bl	8005478 <LL_RCC_PLL_GetR>
 8005fe2:	4603      	mov	r3, r0
 8005fe4:	0f5b      	lsrs	r3, r3, #29
 8005fe6:	3301      	adds	r3, #1
 8005fe8:	fbb4 f3f3 	udiv	r3, r4, r3
 8005fec:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8005fee:	697b      	ldr	r3, [r7, #20]
}
 8005ff0:	4618      	mov	r0, r3
 8005ff2:	371c      	adds	r7, #28
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	bd90      	pop	{r4, r7, pc}
 8005ff8:	0801c0f4 	.word	0x0801c0f4
 8005ffc:	00f42400 	.word	0x00f42400
 8006000:	01e84800 	.word	0x01e84800

08006004 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006004:	b598      	push	{r3, r4, r7, lr}
 8006006:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8006008:	f7ff ff5c 	bl	8005ec4 <HAL_RCC_GetSysClockFreq>
 800600c:	4604      	mov	r4, r0
 800600e:	f7ff f9cc 	bl	80053aa <LL_RCC_GetAHBPrescaler>
 8006012:	4603      	mov	r3, r0
 8006014:	091b      	lsrs	r3, r3, #4
 8006016:	f003 030f 	and.w	r3, r3, #15
 800601a:	4a03      	ldr	r2, [pc, #12]	@ (8006028 <HAL_RCC_GetHCLKFreq+0x24>)
 800601c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006020:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8006024:	4618      	mov	r0, r3
 8006026:	bd98      	pop	{r3, r4, r7, pc}
 8006028:	0801c094 	.word	0x0801c094

0800602c <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800602c:	b598      	push	{r3, r4, r7, lr}
 800602e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8006030:	f7ff ffe8 	bl	8006004 <HAL_RCC_GetHCLKFreq>
 8006034:	4604      	mov	r4, r0
 8006036:	f7ff f9d0 	bl	80053da <LL_RCC_GetAPB1Prescaler>
 800603a:	4603      	mov	r3, r0
 800603c:	0a1b      	lsrs	r3, r3, #8
 800603e:	4a03      	ldr	r2, [pc, #12]	@ (800604c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006040:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006044:	fa24 f303 	lsr.w	r3, r4, r3
}
 8006048:	4618      	mov	r0, r3
 800604a:	bd98      	pop	{r3, r4, r7, pc}
 800604c:	0801c0d4 	.word	0x0801c0d4

08006050 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006050:	b598      	push	{r3, r4, r7, lr}
 8006052:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8006054:	f7ff ffd6 	bl	8006004 <HAL_RCC_GetHCLKFreq>
 8006058:	4604      	mov	r4, r0
 800605a:	f7ff f9c9 	bl	80053f0 <LL_RCC_GetAPB2Prescaler>
 800605e:	4603      	mov	r3, r0
 8006060:	0adb      	lsrs	r3, r3, #11
 8006062:	4a03      	ldr	r2, [pc, #12]	@ (8006070 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006064:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006068:	fa24 f303 	lsr.w	r3, r4, r3
}
 800606c:	4618      	mov	r0, r3
 800606e:	bd98      	pop	{r3, r4, r7, pc}
 8006070:	0801c0d4 	.word	0x0801c0d4

08006074 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8006074:	b590      	push	{r4, r7, lr}
 8006076:	b085      	sub	sp, #20
 8006078:	af00      	add	r7, sp, #0
 800607a:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	091b      	lsrs	r3, r3, #4
 8006080:	f003 030f 	and.w	r3, r3, #15
 8006084:	4a10      	ldr	r2, [pc, #64]	@ (80060c8 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 8006086:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800608a:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 800608c:	f7ff f998 	bl	80053c0 <LL_RCC_GetAHB3Prescaler>
 8006090:	4603      	mov	r3, r0
 8006092:	091b      	lsrs	r3, r3, #4
 8006094:	f003 030f 	and.w	r3, r3, #15
 8006098:	4a0c      	ldr	r2, [pc, #48]	@ (80060cc <RCC_SetFlashLatencyFromMSIRange+0x58>)
 800609a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800609e:	68fa      	ldr	r2, [r7, #12]
 80060a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80060a4:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 80060a6:	68bb      	ldr	r3, [r7, #8]
 80060a8:	4a09      	ldr	r2, [pc, #36]	@ (80060d0 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 80060aa:	fba2 2303 	umull	r2, r3, r2, r3
 80060ae:	0c9c      	lsrs	r4, r3, #18
 80060b0:	f7fe ff3e 	bl	8004f30 <HAL_PWREx_GetVoltageRange>
 80060b4:	4603      	mov	r3, r0
 80060b6:	4619      	mov	r1, r3
 80060b8:	4620      	mov	r0, r4
 80060ba:	f000 f80b 	bl	80060d4 <RCC_SetFlashLatency>
 80060be:	4603      	mov	r3, r0
}
 80060c0:	4618      	mov	r0, r3
 80060c2:	3714      	adds	r7, #20
 80060c4:	46bd      	mov	sp, r7
 80060c6:	bd90      	pop	{r4, r7, pc}
 80060c8:	0801c0f4 	.word	0x0801c0f4
 80060cc:	0801c094 	.word	0x0801c094
 80060d0:	431bde83 	.word	0x431bde83

080060d4 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 80060d4:	b580      	push	{r7, lr}
 80060d6:	b08e      	sub	sp, #56	@ 0x38
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
 80060dc:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 80060de:	4a3a      	ldr	r2, [pc, #232]	@ (80061c8 <RCC_SetFlashLatency+0xf4>)
 80060e0:	f107 0320 	add.w	r3, r7, #32
 80060e4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80060e8:	6018      	str	r0, [r3, #0]
 80060ea:	3304      	adds	r3, #4
 80060ec:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 80060ee:	4a37      	ldr	r2, [pc, #220]	@ (80061cc <RCC_SetFlashLatency+0xf8>)
 80060f0:	f107 0318 	add.w	r3, r7, #24
 80060f4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80060f8:	6018      	str	r0, [r3, #0]
 80060fa:	3304      	adds	r3, #4
 80060fc:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 80060fe:	4a34      	ldr	r2, [pc, #208]	@ (80061d0 <RCC_SetFlashLatency+0xfc>)
 8006100:	f107 030c 	add.w	r3, r7, #12
 8006104:	ca07      	ldmia	r2, {r0, r1, r2}
 8006106:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800610a:	2300      	movs	r3, #0
 800610c:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800610e:	683b      	ldr	r3, [r7, #0]
 8006110:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006114:	d11b      	bne.n	800614e <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8006116:	2300      	movs	r3, #0
 8006118:	633b      	str	r3, [r7, #48]	@ 0x30
 800611a:	e014      	b.n	8006146 <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 800611c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800611e:	005b      	lsls	r3, r3, #1
 8006120:	3338      	adds	r3, #56	@ 0x38
 8006122:	443b      	add	r3, r7
 8006124:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8006128:	461a      	mov	r2, r3
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	4293      	cmp	r3, r2
 800612e:	d807      	bhi.n	8006140 <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8006130:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006132:	009b      	lsls	r3, r3, #2
 8006134:	3338      	adds	r3, #56	@ 0x38
 8006136:	443b      	add	r3, r7
 8006138:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800613c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800613e:	e021      	b.n	8006184 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8006140:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006142:	3301      	adds	r3, #1
 8006144:	633b      	str	r3, [r7, #48]	@ 0x30
 8006146:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006148:	2b02      	cmp	r3, #2
 800614a:	d9e7      	bls.n	800611c <RCC_SetFlashLatency+0x48>
 800614c:	e01a      	b.n	8006184 <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800614e:	2300      	movs	r3, #0
 8006150:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006152:	e014      	b.n	800617e <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8006154:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006156:	005b      	lsls	r3, r3, #1
 8006158:	3338      	adds	r3, #56	@ 0x38
 800615a:	443b      	add	r3, r7
 800615c:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8006160:	461a      	mov	r2, r3
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	4293      	cmp	r3, r2
 8006166:	d807      	bhi.n	8006178 <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8006168:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800616a:	009b      	lsls	r3, r3, #2
 800616c:	3338      	adds	r3, #56	@ 0x38
 800616e:	443b      	add	r3, r7
 8006170:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8006174:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006176:	e005      	b.n	8006184 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8006178:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800617a:	3301      	adds	r3, #1
 800617c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800617e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006180:	2b02      	cmp	r3, #2
 8006182:	d9e7      	bls.n	8006154 <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006184:	4b13      	ldr	r3, [pc, #76]	@ (80061d4 <RCC_SetFlashLatency+0x100>)
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	f023 0207 	bic.w	r2, r3, #7
 800618c:	4911      	ldr	r1, [pc, #68]	@ (80061d4 <RCC_SetFlashLatency+0x100>)
 800618e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006190:	4313      	orrs	r3, r2
 8006192:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006194:	f7fb fda8 	bl	8001ce8 <HAL_GetTick>
 8006198:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800619a:	e008      	b.n	80061ae <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800619c:	f7fb fda4 	bl	8001ce8 <HAL_GetTick>
 80061a0:	4602      	mov	r2, r0
 80061a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061a4:	1ad3      	subs	r3, r2, r3
 80061a6:	2b02      	cmp	r3, #2
 80061a8:	d901      	bls.n	80061ae <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 80061aa:	2303      	movs	r3, #3
 80061ac:	e007      	b.n	80061be <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80061ae:	4b09      	ldr	r3, [pc, #36]	@ (80061d4 <RCC_SetFlashLatency+0x100>)
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	f003 0307 	and.w	r3, r3, #7
 80061b6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80061b8:	429a      	cmp	r2, r3
 80061ba:	d1ef      	bne.n	800619c <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 80061bc:	2300      	movs	r3, #0
}
 80061be:	4618      	mov	r0, r3
 80061c0:	3738      	adds	r7, #56	@ 0x38
 80061c2:	46bd      	mov	sp, r7
 80061c4:	bd80      	pop	{r7, pc}
 80061c6:	bf00      	nop
 80061c8:	0801b76c 	.word	0x0801b76c
 80061cc:	0801b774 	.word	0x0801b774
 80061d0:	0801b77c 	.word	0x0801b77c
 80061d4:	58004000 	.word	0x58004000

080061d8 <LL_RCC_LSE_IsReady>:
{
 80061d8:	b480      	push	{r7}
 80061da:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80061dc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80061e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80061e4:	f003 0302 	and.w	r3, r3, #2
 80061e8:	2b02      	cmp	r3, #2
 80061ea:	d101      	bne.n	80061f0 <LL_RCC_LSE_IsReady+0x18>
 80061ec:	2301      	movs	r3, #1
 80061ee:	e000      	b.n	80061f2 <LL_RCC_LSE_IsReady+0x1a>
 80061f0:	2300      	movs	r3, #0
}
 80061f2:	4618      	mov	r0, r3
 80061f4:	46bd      	mov	sp, r7
 80061f6:	bc80      	pop	{r7}
 80061f8:	4770      	bx	lr

080061fa <LL_RCC_SetUSARTClockSource>:
{
 80061fa:	b480      	push	{r7}
 80061fc:	b083      	sub	sp, #12
 80061fe:	af00      	add	r7, sp, #0
 8006200:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 8006202:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006206:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	0c1b      	lsrs	r3, r3, #16
 800620e:	43db      	mvns	r3, r3
 8006210:	401a      	ands	r2, r3
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	b29b      	uxth	r3, r3
 8006216:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800621a:	4313      	orrs	r3, r2
 800621c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8006220:	bf00      	nop
 8006222:	370c      	adds	r7, #12
 8006224:	46bd      	mov	sp, r7
 8006226:	bc80      	pop	{r7}
 8006228:	4770      	bx	lr

0800622a <LL_RCC_SetI2SClockSource>:
{
 800622a:	b480      	push	{r7}
 800622c:	b083      	sub	sp, #12
 800622e:	af00      	add	r7, sp, #0
 8006230:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 8006232:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006236:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800623a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800623e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	4313      	orrs	r3, r2
 8006246:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800624a:	bf00      	nop
 800624c:	370c      	adds	r7, #12
 800624e:	46bd      	mov	sp, r7
 8006250:	bc80      	pop	{r7}
 8006252:	4770      	bx	lr

08006254 <LL_RCC_SetLPUARTClockSource>:
{
 8006254:	b480      	push	{r7}
 8006256:	b083      	sub	sp, #12
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 800625c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006260:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006264:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006268:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	4313      	orrs	r3, r2
 8006270:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8006274:	bf00      	nop
 8006276:	370c      	adds	r7, #12
 8006278:	46bd      	mov	sp, r7
 800627a:	bc80      	pop	{r7}
 800627c:	4770      	bx	lr

0800627e <LL_RCC_SetI2CClockSource>:
{
 800627e:	b480      	push	{r7}
 8006280:	b083      	sub	sp, #12
 8006282:	af00      	add	r7, sp, #0
 8006284:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8006286:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800628a:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	091b      	lsrs	r3, r3, #4
 8006292:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8006296:	43db      	mvns	r3, r3
 8006298:	401a      	ands	r2, r3
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	011b      	lsls	r3, r3, #4
 800629e:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 80062a2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80062a6:	4313      	orrs	r3, r2
 80062a8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80062ac:	bf00      	nop
 80062ae:	370c      	adds	r7, #12
 80062b0:	46bd      	mov	sp, r7
 80062b2:	bc80      	pop	{r7}
 80062b4:	4770      	bx	lr

080062b6 <LL_RCC_SetLPTIMClockSource>:
{
 80062b6:	b480      	push	{r7}
 80062b8:	b083      	sub	sp, #12
 80062ba:	af00      	add	r7, sp, #0
 80062bc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 80062be:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80062c2:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	0c1b      	lsrs	r3, r3, #16
 80062ca:	041b      	lsls	r3, r3, #16
 80062cc:	43db      	mvns	r3, r3
 80062ce:	401a      	ands	r2, r3
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	041b      	lsls	r3, r3, #16
 80062d4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80062d8:	4313      	orrs	r3, r2
 80062da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80062de:	bf00      	nop
 80062e0:	370c      	adds	r7, #12
 80062e2:	46bd      	mov	sp, r7
 80062e4:	bc80      	pop	{r7}
 80062e6:	4770      	bx	lr

080062e8 <LL_RCC_SetRNGClockSource>:
{
 80062e8:	b480      	push	{r7}
 80062ea:	b083      	sub	sp, #12
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 80062f0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80062f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80062f8:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 80062fc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	4313      	orrs	r3, r2
 8006304:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8006308:	bf00      	nop
 800630a:	370c      	adds	r7, #12
 800630c:	46bd      	mov	sp, r7
 800630e:	bc80      	pop	{r7}
 8006310:	4770      	bx	lr

08006312 <LL_RCC_SetADCClockSource>:
{
 8006312:	b480      	push	{r7}
 8006314:	b083      	sub	sp, #12
 8006316:	af00      	add	r7, sp, #0
 8006318:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 800631a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800631e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006322:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8006326:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	4313      	orrs	r3, r2
 800632e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8006332:	bf00      	nop
 8006334:	370c      	adds	r7, #12
 8006336:	46bd      	mov	sp, r7
 8006338:	bc80      	pop	{r7}
 800633a:	4770      	bx	lr

0800633c <LL_RCC_SetRTCClockSource>:
{
 800633c:	b480      	push	{r7}
 800633e:	b083      	sub	sp, #12
 8006340:	af00      	add	r7, sp, #0
 8006342:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8006344:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006348:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800634c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006350:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	4313      	orrs	r3, r2
 8006358:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 800635c:	bf00      	nop
 800635e:	370c      	adds	r7, #12
 8006360:	46bd      	mov	sp, r7
 8006362:	bc80      	pop	{r7}
 8006364:	4770      	bx	lr

08006366 <LL_RCC_GetRTCClockSource>:
{
 8006366:	b480      	push	{r7}
 8006368:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 800636a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800636e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006372:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 8006376:	4618      	mov	r0, r3
 8006378:	46bd      	mov	sp, r7
 800637a:	bc80      	pop	{r7}
 800637c:	4770      	bx	lr

0800637e <LL_RCC_ForceBackupDomainReset>:
{
 800637e:	b480      	push	{r7}
 8006380:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8006382:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006386:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800638a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800638e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006392:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8006396:	bf00      	nop
 8006398:	46bd      	mov	sp, r7
 800639a:	bc80      	pop	{r7}
 800639c:	4770      	bx	lr

0800639e <LL_RCC_ReleaseBackupDomainReset>:
{
 800639e:	b480      	push	{r7}
 80063a0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80063a2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80063a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80063aa:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80063ae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80063b2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80063b6:	bf00      	nop
 80063b8:	46bd      	mov	sp, r7
 80063ba:	bc80      	pop	{r7}
 80063bc:	4770      	bx	lr
	...

080063c0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80063c0:	b580      	push	{r7, lr}
 80063c2:	b086      	sub	sp, #24
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 80063c8:	2300      	movs	r3, #0
 80063ca:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 80063cc:	2300      	movs	r3, #0
 80063ce:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 80063d0:	2300      	movs	r3, #0
 80063d2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d058      	beq.n	8006492 <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 80063e0:	f7fe fd64 	bl	8004eac <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80063e4:	f7fb fc80 	bl	8001ce8 <HAL_GetTick>
 80063e8:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 80063ea:	e009      	b.n	8006400 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80063ec:	f7fb fc7c 	bl	8001ce8 <HAL_GetTick>
 80063f0:	4602      	mov	r2, r0
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	1ad3      	subs	r3, r2, r3
 80063f6:	2b02      	cmp	r3, #2
 80063f8:	d902      	bls.n	8006400 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 80063fa:	2303      	movs	r3, #3
 80063fc:	74fb      	strb	r3, [r7, #19]
        break;
 80063fe:	e006      	b.n	800640e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8006400:	4b7b      	ldr	r3, [pc, #492]	@ (80065f0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006408:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800640c:	d1ee      	bne.n	80063ec <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 800640e:	7cfb      	ldrb	r3, [r7, #19]
 8006410:	2b00      	cmp	r3, #0
 8006412:	d13c      	bne.n	800648e <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8006414:	f7ff ffa7 	bl	8006366 <LL_RCC_GetRTCClockSource>
 8006418:	4602      	mov	r2, r0
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800641e:	429a      	cmp	r2, r3
 8006420:	d00f      	beq.n	8006442 <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006422:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006426:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800642a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800642e:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006430:	f7ff ffa5 	bl	800637e <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006434:	f7ff ffb3 	bl	800639e <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006438:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800643c:	697b      	ldr	r3, [r7, #20]
 800643e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 8006442:	697b      	ldr	r3, [r7, #20]
 8006444:	f003 0302 	and.w	r3, r3, #2
 8006448:	2b00      	cmp	r3, #0
 800644a:	d014      	beq.n	8006476 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800644c:	f7fb fc4c 	bl	8001ce8 <HAL_GetTick>
 8006450:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 8006452:	e00b      	b.n	800646c <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006454:	f7fb fc48 	bl	8001ce8 <HAL_GetTick>
 8006458:	4602      	mov	r2, r0
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	1ad3      	subs	r3, r2, r3
 800645e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006462:	4293      	cmp	r3, r2
 8006464:	d902      	bls.n	800646c <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 8006466:	2303      	movs	r3, #3
 8006468:	74fb      	strb	r3, [r7, #19]
            break;
 800646a:	e004      	b.n	8006476 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 800646c:	f7ff feb4 	bl	80061d8 <LL_RCC_LSE_IsReady>
 8006470:	4603      	mov	r3, r0
 8006472:	2b01      	cmp	r3, #1
 8006474:	d1ee      	bne.n	8006454 <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 8006476:	7cfb      	ldrb	r3, [r7, #19]
 8006478:	2b00      	cmp	r3, #0
 800647a:	d105      	bne.n	8006488 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006480:	4618      	mov	r0, r3
 8006482:	f7ff ff5b 	bl	800633c <LL_RCC_SetRTCClockSource>
 8006486:	e004      	b.n	8006492 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006488:	7cfb      	ldrb	r3, [r7, #19]
 800648a:	74bb      	strb	r3, [r7, #18]
 800648c:	e001      	b.n	8006492 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800648e:	7cfb      	ldrb	r3, [r7, #19]
 8006490:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	f003 0301 	and.w	r3, r3, #1
 800649a:	2b00      	cmp	r3, #0
 800649c:	d004      	beq.n	80064a8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	685b      	ldr	r3, [r3, #4]
 80064a2:	4618      	mov	r0, r3
 80064a4:	f7ff fea9 	bl	80061fa <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	f003 0302 	and.w	r3, r3, #2
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d004      	beq.n	80064be <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	689b      	ldr	r3, [r3, #8]
 80064b8:	4618      	mov	r0, r3
 80064ba:	f7ff fe9e 	bl	80061fa <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	f003 0320 	and.w	r3, r3, #32
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d004      	beq.n	80064d4 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	691b      	ldr	r3, [r3, #16]
 80064ce:	4618      	mov	r0, r3
 80064d0:	f7ff fec0 	bl	8006254 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d004      	beq.n	80064ea <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	6a1b      	ldr	r3, [r3, #32]
 80064e4:	4618      	mov	r0, r3
 80064e6:	f7ff fee6 	bl	80062b6 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d004      	beq.n	8006500 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064fa:	4618      	mov	r0, r3
 80064fc:	f7ff fedb 	bl	80062b6 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006508:	2b00      	cmp	r3, #0
 800650a:	d004      	beq.n	8006516 <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006510:	4618      	mov	r0, r3
 8006512:	f7ff fed0 	bl	80062b6 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800651e:	2b00      	cmp	r3, #0
 8006520:	d004      	beq.n	800652c <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	695b      	ldr	r3, [r3, #20]
 8006526:	4618      	mov	r0, r3
 8006528:	f7ff fea9 	bl	800627e <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006534:	2b00      	cmp	r3, #0
 8006536:	d004      	beq.n	8006542 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	699b      	ldr	r3, [r3, #24]
 800653c:	4618      	mov	r0, r3
 800653e:	f7ff fe9e 	bl	800627e <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800654a:	2b00      	cmp	r3, #0
 800654c:	d004      	beq.n	8006558 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	69db      	ldr	r3, [r3, #28]
 8006552:	4618      	mov	r0, r3
 8006554:	f7ff fe93 	bl	800627e <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	f003 0310 	and.w	r3, r3, #16
 8006560:	2b00      	cmp	r3, #0
 8006562:	d011      	beq.n	8006588 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	68db      	ldr	r3, [r3, #12]
 8006568:	4618      	mov	r0, r3
 800656a:	f7ff fe5e 	bl	800622a <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	68db      	ldr	r3, [r3, #12]
 8006572:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006576:	d107      	bne.n	8006588 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8006578:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800657c:	68db      	ldr	r3, [r3, #12]
 800657e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006582:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006586:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006590:	2b00      	cmp	r3, #0
 8006592:	d010      	beq.n	80065b6 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006598:	4618      	mov	r0, r3
 800659a:	f7ff fea5 	bl	80062e8 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d107      	bne.n	80065b6 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 80065a6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80065aa:	68db      	ldr	r3, [r3, #12]
 80065ac:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80065b0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80065b4:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d011      	beq.n	80065e6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065c6:	4618      	mov	r0, r3
 80065c8:	f7ff fea3 	bl	8006312 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065d0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80065d4:	d107      	bne.n	80065e6 <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80065d6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80065da:	68db      	ldr	r3, [r3, #12]
 80065dc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80065e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80065e4:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 80065e6:	7cbb      	ldrb	r3, [r7, #18]
}
 80065e8:	4618      	mov	r0, r3
 80065ea:	3718      	adds	r7, #24
 80065ec:	46bd      	mov	sp, r7
 80065ee:	bd80      	pop	{r7, pc}
 80065f0:	58000400 	.word	0x58000400

080065f4 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80065f4:	b580      	push	{r7, lr}
 80065f6:	b084      	sub	sp, #16
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80065fc:	2301      	movs	r3, #1
 80065fe:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	2b00      	cmp	r3, #0
 8006604:	d068      	beq.n	80066d8 <HAL_RTC_Init+0xe4>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800660c:	b2db      	uxtb	r3, r3
 800660e:	2b00      	cmp	r3, #0
 8006610:	d106      	bne.n	8006620 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	2200      	movs	r2, #0
 8006616:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800661a:	6878      	ldr	r0, [r7, #4]
 800661c:	f7fb f8ae 	bl	800177c <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	2202      	movs	r2, #2
 8006624:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006628:	4b2e      	ldr	r3, [pc, #184]	@ (80066e4 <HAL_RTC_Init+0xf0>)
 800662a:	22ca      	movs	r2, #202	@ 0xca
 800662c:	625a      	str	r2, [r3, #36]	@ 0x24
 800662e:	4b2d      	ldr	r3, [pc, #180]	@ (80066e4 <HAL_RTC_Init+0xf0>)
 8006630:	2253      	movs	r2, #83	@ 0x53
 8006632:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8006634:	6878      	ldr	r0, [r7, #4]
 8006636:	f000 fa0f 	bl	8006a58 <RTC_EnterInitMode>
 800663a:	4603      	mov	r3, r0
 800663c:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK)
 800663e:	7bfb      	ldrb	r3, [r7, #15]
 8006640:	2b00      	cmp	r3, #0
 8006642:	d13f      	bne.n	80066c4 <HAL_RTC_Init+0xd0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8006644:	4b27      	ldr	r3, [pc, #156]	@ (80066e4 <HAL_RTC_Init+0xf0>)
 8006646:	699b      	ldr	r3, [r3, #24]
 8006648:	4a26      	ldr	r2, [pc, #152]	@ (80066e4 <HAL_RTC_Init+0xf0>)
 800664a:	f023 638e 	bic.w	r3, r3, #74448896	@ 0x4700000
 800664e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006652:	6193      	str	r3, [r2, #24]
      /* Set RTC_CR register */
      SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8006654:	4b23      	ldr	r3, [pc, #140]	@ (80066e4 <HAL_RTC_Init+0xf0>)
 8006656:	699a      	ldr	r2, [r3, #24]
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	6859      	ldr	r1, [r3, #4]
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	691b      	ldr	r3, [r3, #16]
 8006660:	4319      	orrs	r1, r3
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	699b      	ldr	r3, [r3, #24]
 8006666:	430b      	orrs	r3, r1
 8006668:	491e      	ldr	r1, [pc, #120]	@ (80066e4 <HAL_RTC_Init+0xf0>)
 800666a:	4313      	orrs	r3, r2
 800666c:	618b      	str	r3, [r1, #24]

      /* Configure the RTC PRER */
      WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	68da      	ldr	r2, [r3, #12]
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	689b      	ldr	r3, [r3, #8]
 8006676:	041b      	lsls	r3, r3, #16
 8006678:	491a      	ldr	r1, [pc, #104]	@ (80066e4 <HAL_RTC_Init+0xf0>)
 800667a:	4313      	orrs	r3, r2
 800667c:	610b      	str	r3, [r1, #16]

      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 800667e:	4b19      	ldr	r3, [pc, #100]	@ (80066e4 <HAL_RTC_Init+0xf0>)
 8006680:	68db      	ldr	r3, [r3, #12]
 8006682:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800668e:	430b      	orrs	r3, r1
 8006690:	4914      	ldr	r1, [pc, #80]	@ (80066e4 <HAL_RTC_Init+0xf0>)
 8006692:	4313      	orrs	r3, r2
 8006694:	60cb      	str	r3, [r1, #12]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8006696:	6878      	ldr	r0, [r7, #4]
 8006698:	f000 fa12 	bl	8006ac0 <RTC_ExitInitMode>
 800669c:	4603      	mov	r3, r0
 800669e:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 80066a0:	7bfb      	ldrb	r3, [r7, #15]
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d10e      	bne.n	80066c4 <HAL_RTC_Init+0xd0>
      {
        MODIFY_REG(RTC->CR, \
 80066a6:	4b0f      	ldr	r3, [pc, #60]	@ (80066e4 <HAL_RTC_Init+0xf0>)
 80066a8:	699b      	ldr	r3, [r3, #24]
 80066aa:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	6a19      	ldr	r1, [r3, #32]
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	69db      	ldr	r3, [r3, #28]
 80066b6:	4319      	orrs	r1, r3
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	695b      	ldr	r3, [r3, #20]
 80066bc:	430b      	orrs	r3, r1
 80066be:	4909      	ldr	r1, [pc, #36]	@ (80066e4 <HAL_RTC_Init+0xf0>)
 80066c0:	4313      	orrs	r3, r2
 80066c2:	618b      	str	r3, [r1, #24]
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80066c4:	4b07      	ldr	r3, [pc, #28]	@ (80066e4 <HAL_RTC_Init+0xf0>)
 80066c6:	22ff      	movs	r2, #255	@ 0xff
 80066c8:	625a      	str	r2, [r3, #36]	@ 0x24

    if (status == HAL_OK)
 80066ca:	7bfb      	ldrb	r3, [r7, #15]
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d103      	bne.n	80066d8 <HAL_RTC_Init+0xe4>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	2201      	movs	r2, #1
 80066d4:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    }
  }

  return status;
 80066d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80066da:	4618      	mov	r0, r3
 80066dc:	3710      	adds	r7, #16
 80066de:	46bd      	mov	sp, r7
 80066e0:	bd80      	pop	{r7, pc}
 80066e2:	bf00      	nop
 80066e4:	40002800 	.word	0x40002800

080066e8 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 80066e8:	b590      	push	{r4, r7, lr}
 80066ea:	b087      	sub	sp, #28
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	60f8      	str	r0, [r7, #12]
 80066f0:	60b9      	str	r1, [r7, #8]
 80066f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 80066f4:	2300      	movs	r3, #0
 80066f6:	617b      	str	r3, [r7, #20]
  uint32_t binaryMode;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80066fe:	2b01      	cmp	r3, #1
 8006700:	d101      	bne.n	8006706 <HAL_RTC_SetAlarm_IT+0x1e>
 8006702:	2302      	movs	r3, #2
 8006704:	e0f3      	b.n	80068ee <HAL_RTC_SetAlarm_IT+0x206>
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	2201      	movs	r2, #1
 800670a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  hrtc->State = HAL_RTC_STATE_BUSY;
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	2202      	movs	r2, #2
 8006712:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    assert_param((sAlarm->AlarmSubSecondMask >> RTC_ALRMASSR_MASKSS_Pos) <= (8U + (READ_BIT(RTC->ICSR, RTC_ICSR_BCDU) >> RTC_ICSR_BCDU_Pos)));
  }
#endif

  /* Get Binary mode (32-bit free-running counter configuration) */
  binaryMode = READ_BIT(RTC->ICSR, RTC_ICSR_BIN);
 8006716:	4b78      	ldr	r3, [pc, #480]	@ (80068f8 <HAL_RTC_SetAlarm_IT+0x210>)
 8006718:	68db      	ldr	r3, [r3, #12]
 800671a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800671e:	613b      	str	r3, [r7, #16]

  if (binaryMode != RTC_BINARY_ONLY)
 8006720:	693b      	ldr	r3, [r7, #16]
 8006722:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006726:	d06a      	beq.n	80067fe <HAL_RTC_SetAlarm_IT+0x116>
  {
    if (Format == RTC_FORMAT_BIN)
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2b00      	cmp	r3, #0
 800672c:	d13a      	bne.n	80067a4 <HAL_RTC_SetAlarm_IT+0xbc>
    {
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 800672e:	4b72      	ldr	r3, [pc, #456]	@ (80068f8 <HAL_RTC_SetAlarm_IT+0x210>)
 8006730:	699b      	ldr	r3, [r3, #24]
 8006732:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006736:	2b00      	cmp	r3, #0
 8006738:	d102      	bne.n	8006740 <HAL_RTC_SetAlarm_IT+0x58>
        assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
        assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
      }
      else
      {
        sAlarm->AlarmTime.TimeFormat = 0x00U;
 800673a:	68bb      	ldr	r3, [r7, #8]
 800673c:	2200      	movs	r2, #0
 800673e:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
      }
      assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
      assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));

      if( sAlarm->AlarmMask != RTC_ALARMMASK_DATEWEEKDAY )
 8006740:	68bb      	ldr	r3, [r7, #8]
 8006742:	695b      	ldr	r3, [r3, #20]
 8006744:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
        }
      }

      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006748:	68bb      	ldr	r3, [r7, #8]
 800674a:	781b      	ldrb	r3, [r3, #0]
 800674c:	4618      	mov	r0, r3
 800674e:	f000 f9f5 	bl	8006b3c <RTC_ByteToBcd2>
 8006752:	4603      	mov	r3, r0
 8006754:	041c      	lsls	r4, r3, #16
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006756:	68bb      	ldr	r3, [r7, #8]
 8006758:	785b      	ldrb	r3, [r3, #1]
 800675a:	4618      	mov	r0, r3
 800675c:	f000 f9ee 	bl	8006b3c <RTC_ByteToBcd2>
 8006760:	4603      	mov	r3, r0
 8006762:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006764:	431c      	orrs	r4, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8006766:	68bb      	ldr	r3, [r7, #8]
 8006768:	789b      	ldrb	r3, [r3, #2]
 800676a:	4618      	mov	r0, r3
 800676c:	f000 f9e6 	bl	8006b3c <RTC_ByteToBcd2>
 8006770:	4603      	mov	r3, r0
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006772:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8006776:	68bb      	ldr	r3, [r7, #8]
 8006778:	78db      	ldrb	r3, [r3, #3]
 800677a:	059b      	lsls	r3, r3, #22
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800677c:	ea42 0403 	orr.w	r4, r2, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8006780:	68bb      	ldr	r3, [r7, #8]
 8006782:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006786:	4618      	mov	r0, r3
 8006788:	f000 f9d8 	bl	8006b3c <RTC_ByteToBcd2>
 800678c:	4603      	mov	r3, r0
 800678e:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8006790:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8006794:	68bb      	ldr	r3, [r7, #8]
 8006796:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8006798:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 800679a:	68bb      	ldr	r3, [r7, #8]
 800679c:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800679e:	4313      	orrs	r3, r2
 80067a0:	617b      	str	r3, [r7, #20]
 80067a2:	e02c      	b.n	80067fe <HAL_RTC_SetAlarm_IT+0x116>
    }
    else /* Format BCD */
    {
      if( sAlarm->AlarmMask != RTC_ALARMMASK_ALL )
 80067a4:	68bb      	ldr	r3, [r7, #8]
 80067a6:	695b      	ldr	r3, [r3, #20]
 80067a8:	f1b3 3f80 	cmp.w	r3, #2155905152	@ 0x80808080
 80067ac:	d00d      	beq.n	80067ca <HAL_RTC_SetAlarm_IT+0xe2>
      {
        if( sAlarm->AlarmMask != RTC_ALARMMASK_HOURS )
 80067ae:	68bb      	ldr	r3, [r7, #8]
 80067b0:	695b      	ldr	r3, [r3, #20]
 80067b2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80067b6:	d008      	beq.n	80067ca <HAL_RTC_SetAlarm_IT+0xe2>
        {
          if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 80067b8:	4b4f      	ldr	r3, [pc, #316]	@ (80068f8 <HAL_RTC_SetAlarm_IT+0x210>)
 80067ba:	699b      	ldr	r3, [r3, #24]
 80067bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d102      	bne.n	80067ca <HAL_RTC_SetAlarm_IT+0xe2>
            assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
            assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
          }
          else
          {
            sAlarm->AlarmTime.TimeFormat = 0x00U;
 80067c4:	68bb      	ldr	r3, [r7, #8]
 80067c6:	2200      	movs	r2, #0
 80067c8:	70da      	strb	r2, [r3, #3]
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
        }
      }
#endif /* USE_FULL_ASSERT */
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80067ca:	68bb      	ldr	r3, [r7, #8]
 80067cc:	781b      	ldrb	r3, [r3, #0]
 80067ce:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80067d0:	68bb      	ldr	r3, [r7, #8]
 80067d2:	785b      	ldrb	r3, [r3, #1]
 80067d4:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80067d6:	4313      	orrs	r3, r2
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80067d8:	68ba      	ldr	r2, [r7, #8]
 80067da:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80067dc:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80067de:	68bb      	ldr	r3, [r7, #8]
 80067e0:	78db      	ldrb	r3, [r3, #3]
 80067e2:	059b      	lsls	r3, r3, #22
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80067e4:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80067e6:	68bb      	ldr	r3, [r7, #8]
 80067e8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80067ec:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80067ee:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80067f0:	68bb      	ldr	r3, [r7, #8]
 80067f2:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80067f4:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 80067f6:	68bb      	ldr	r3, [r7, #8]
 80067f8:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80067fa:	4313      	orrs	r3, r2
 80067fc:	617b      	str	r3, [r7, #20]

    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80067fe:	4b3e      	ldr	r3, [pc, #248]	@ (80068f8 <HAL_RTC_SetAlarm_IT+0x210>)
 8006800:	22ca      	movs	r2, #202	@ 0xca
 8006802:	625a      	str	r2, [r3, #36]	@ 0x24
 8006804:	4b3c      	ldr	r3, [pc, #240]	@ (80068f8 <HAL_RTC_SetAlarm_IT+0x210>)
 8006806:	2253      	movs	r2, #83	@ 0x53
 8006808:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 800680a:	68bb      	ldr	r3, [r7, #8]
 800680c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800680e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006812:	d12c      	bne.n	800686e <HAL_RTC_SetAlarm_IT+0x186>
  {
    /* Disable the Alarm A interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8006814:	4b38      	ldr	r3, [pc, #224]	@ (80068f8 <HAL_RTC_SetAlarm_IT+0x210>)
 8006816:	699b      	ldr	r3, [r3, #24]
 8006818:	4a37      	ldr	r2, [pc, #220]	@ (80068f8 <HAL_RTC_SetAlarm_IT+0x210>)
 800681a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800681e:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm A */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8006820:	4b35      	ldr	r3, [pc, #212]	@ (80068f8 <HAL_RTC_SetAlarm_IT+0x210>)
 8006822:	2201      	movs	r2, #1
 8006824:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 8006826:	693b      	ldr	r3, [r7, #16]
 8006828:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800682c:	d107      	bne.n	800683e <HAL_RTC_SetAlarm_IT+0x156>
    {
      RTC->ALRMASSR = sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr;
 800682e:	68bb      	ldr	r3, [r7, #8]
 8006830:	699a      	ldr	r2, [r3, #24]
 8006832:	68bb      	ldr	r3, [r7, #8]
 8006834:	69db      	ldr	r3, [r3, #28]
 8006836:	4930      	ldr	r1, [pc, #192]	@ (80068f8 <HAL_RTC_SetAlarm_IT+0x210>)
 8006838:	4313      	orrs	r3, r2
 800683a:	644b      	str	r3, [r1, #68]	@ 0x44
 800683c:	e006      	b.n	800684c <HAL_RTC_SetAlarm_IT+0x164>
    }
    else
    {
      WRITE_REG(RTC->ALRMAR, tmpreg);
 800683e:	4a2e      	ldr	r2, [pc, #184]	@ (80068f8 <HAL_RTC_SetAlarm_IT+0x210>)
 8006840:	697b      	ldr	r3, [r7, #20]
 8006842:	6413      	str	r3, [r2, #64]	@ 0x40
      WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask);
 8006844:	4a2c      	ldr	r2, [pc, #176]	@ (80068f8 <HAL_RTC_SetAlarm_IT+0x210>)
 8006846:	68bb      	ldr	r3, [r7, #8]
 8006848:	699b      	ldr	r3, [r3, #24]
 800684a:	6453      	str	r3, [r2, #68]	@ 0x44
    }

    WRITE_REG(RTC->ALRABINR, sAlarm->AlarmTime.SubSeconds);
 800684c:	4a2a      	ldr	r2, [pc, #168]	@ (80068f8 <HAL_RTC_SetAlarm_IT+0x210>)
 800684e:	68bb      	ldr	r3, [r7, #8]
 8006850:	685b      	ldr	r3, [r3, #4]
 8006852:	6713      	str	r3, [r2, #112]	@ 0x70

    /* Store in the handle the Alarm A enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006858:	f043 0201 	orr.w	r2, r3, #1
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8006860:	4b25      	ldr	r3, [pc, #148]	@ (80068f8 <HAL_RTC_SetAlarm_IT+0x210>)
 8006862:	699b      	ldr	r3, [r3, #24]
 8006864:	4a24      	ldr	r2, [pc, #144]	@ (80068f8 <HAL_RTC_SetAlarm_IT+0x210>)
 8006866:	f443 5388 	orr.w	r3, r3, #4352	@ 0x1100
 800686a:	6193      	str	r3, [r2, #24]
 800686c:	e02b      	b.n	80068c6 <HAL_RTC_SetAlarm_IT+0x1de>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 800686e:	4b22      	ldr	r3, [pc, #136]	@ (80068f8 <HAL_RTC_SetAlarm_IT+0x210>)
 8006870:	699b      	ldr	r3, [r3, #24]
 8006872:	4a21      	ldr	r2, [pc, #132]	@ (80068f8 <HAL_RTC_SetAlarm_IT+0x210>)
 8006874:	f423 5308 	bic.w	r3, r3, #8704	@ 0x2200
 8006878:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm B */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 800687a:	4b1f      	ldr	r3, [pc, #124]	@ (80068f8 <HAL_RTC_SetAlarm_IT+0x210>)
 800687c:	2202      	movs	r2, #2
 800687e:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 8006880:	693b      	ldr	r3, [r7, #16]
 8006882:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006886:	d107      	bne.n	8006898 <HAL_RTC_SetAlarm_IT+0x1b0>
    {
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
 8006888:	68bb      	ldr	r3, [r7, #8]
 800688a:	699a      	ldr	r2, [r3, #24]
 800688c:	68bb      	ldr	r3, [r7, #8]
 800688e:	69db      	ldr	r3, [r3, #28]
 8006890:	4919      	ldr	r1, [pc, #100]	@ (80068f8 <HAL_RTC_SetAlarm_IT+0x210>)
 8006892:	4313      	orrs	r3, r2
 8006894:	64cb      	str	r3, [r1, #76]	@ 0x4c
 8006896:	e006      	b.n	80068a6 <HAL_RTC_SetAlarm_IT+0x1be>
    }
    else
    {
      WRITE_REG(RTC->ALRMBR, tmpreg);
 8006898:	4a17      	ldr	r2, [pc, #92]	@ (80068f8 <HAL_RTC_SetAlarm_IT+0x210>)
 800689a:	697b      	ldr	r3, [r7, #20]
 800689c:	6493      	str	r3, [r2, #72]	@ 0x48
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask);
 800689e:	4a16      	ldr	r2, [pc, #88]	@ (80068f8 <HAL_RTC_SetAlarm_IT+0x210>)
 80068a0:	68bb      	ldr	r3, [r7, #8]
 80068a2:	699b      	ldr	r3, [r3, #24]
 80068a4:	64d3      	str	r3, [r2, #76]	@ 0x4c
    }

    WRITE_REG(RTC->ALRBBINR, sAlarm->AlarmTime.SubSeconds);
 80068a6:	4a14      	ldr	r2, [pc, #80]	@ (80068f8 <HAL_RTC_SetAlarm_IT+0x210>)
 80068a8:	68bb      	ldr	r3, [r7, #8]
 80068aa:	685b      	ldr	r3, [r3, #4]
 80068ac:	6753      	str	r3, [r2, #116]	@ 0x74

    /* Store in the handle the Alarm B enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068b2:	f043 0202 	orr.w	r2, r3, #2
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 80068ba:	4b0f      	ldr	r3, [pc, #60]	@ (80068f8 <HAL_RTC_SetAlarm_IT+0x210>)
 80068bc:	699b      	ldr	r3, [r3, #24]
 80068be:	4a0e      	ldr	r2, [pc, #56]	@ (80068f8 <HAL_RTC_SetAlarm_IT+0x210>)
 80068c0:	f443 5308 	orr.w	r3, r3, #8704	@ 0x2200
 80068c4:	6193      	str	r3, [r2, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 80068c6:	4b0d      	ldr	r3, [pc, #52]	@ (80068fc <HAL_RTC_SetAlarm_IT+0x214>)
 80068c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80068cc:	4a0b      	ldr	r2, [pc, #44]	@ (80068fc <HAL_RTC_SetAlarm_IT+0x214>)
 80068ce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80068d2:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80068d6:	4b08      	ldr	r3, [pc, #32]	@ (80068f8 <HAL_RTC_SetAlarm_IT+0x210>)
 80068d8:	22ff      	movs	r2, #255	@ 0xff
 80068da:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	2201      	movs	r2, #1
 80068e0:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	2200      	movs	r2, #0
 80068e8:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 80068ec:	2300      	movs	r3, #0
}
 80068ee:	4618      	mov	r0, r3
 80068f0:	371c      	adds	r7, #28
 80068f2:	46bd      	mov	sp, r7
 80068f4:	bd90      	pop	{r4, r7, pc}
 80068f6:	bf00      	nop
 80068f8:	40002800 	.word	0x40002800
 80068fc:	58000800 	.word	0x58000800

08006900 <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 8006900:	b480      	push	{r7}
 8006902:	b083      	sub	sp, #12
 8006904:	af00      	add	r7, sp, #0
 8006906:	6078      	str	r0, [r7, #4]
 8006908:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8006910:	2b01      	cmp	r3, #1
 8006912:	d101      	bne.n	8006918 <HAL_RTC_DeactivateAlarm+0x18>
 8006914:	2302      	movs	r3, #2
 8006916:	e048      	b.n	80069aa <HAL_RTC_DeactivateAlarm+0xaa>
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	2201      	movs	r2, #1
 800691c:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	2202      	movs	r2, #2
 8006924:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006928:	4b22      	ldr	r3, [pc, #136]	@ (80069b4 <HAL_RTC_DeactivateAlarm+0xb4>)
 800692a:	22ca      	movs	r2, #202	@ 0xca
 800692c:	625a      	str	r2, [r3, #36]	@ 0x24
 800692e:	4b21      	ldr	r3, [pc, #132]	@ (80069b4 <HAL_RTC_DeactivateAlarm+0xb4>)
 8006930:	2253      	movs	r2, #83	@ 0x53
 8006932:	625a      	str	r2, [r3, #36]	@ 0x24

  if (Alarm == RTC_ALARM_A)
 8006934:	683b      	ldr	r3, [r7, #0]
 8006936:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800693a:	d115      	bne.n	8006968 <HAL_RTC_DeactivateAlarm+0x68>
  {
    /* AlarmA, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 800693c:	4b1d      	ldr	r3, [pc, #116]	@ (80069b4 <HAL_RTC_DeactivateAlarm+0xb4>)
 800693e:	699b      	ldr	r3, [r3, #24]
 8006940:	4a1c      	ldr	r2, [pc, #112]	@ (80069b4 <HAL_RTC_DeactivateAlarm+0xb4>)
 8006942:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8006946:	6193      	str	r3, [r2, #24]

    /* AlarmA, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMASSR, RTC_ALRMASSR_SSCLR);
 8006948:	4b1a      	ldr	r3, [pc, #104]	@ (80069b4 <HAL_RTC_DeactivateAlarm+0xb4>)
 800694a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800694c:	4a19      	ldr	r2, [pc, #100]	@ (80069b4 <HAL_RTC_DeactivateAlarm+0xb4>)
 800694e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006952:	6453      	str	r3, [r2, #68]	@ 0x44

    /* Store in the handle the Alarm A disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006958:	f023 0201 	bic.w	r2, r3, #1
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Clear AlarmA flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8006960:	4b14      	ldr	r3, [pc, #80]	@ (80069b4 <HAL_RTC_DeactivateAlarm+0xb4>)
 8006962:	2201      	movs	r2, #1
 8006964:	65da      	str	r2, [r3, #92]	@ 0x5c
 8006966:	e014      	b.n	8006992 <HAL_RTC_DeactivateAlarm+0x92>
  }
  else
  {
    /* AlarmB, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8006968:	4b12      	ldr	r3, [pc, #72]	@ (80069b4 <HAL_RTC_DeactivateAlarm+0xb4>)
 800696a:	699b      	ldr	r3, [r3, #24]
 800696c:	4a11      	ldr	r2, [pc, #68]	@ (80069b4 <HAL_RTC_DeactivateAlarm+0xb4>)
 800696e:	f423 5308 	bic.w	r3, r3, #8704	@ 0x2200
 8006972:	6193      	str	r3, [r2, #24]

    /* AlarmB, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMBSSR, RTC_ALRMBSSR_SSCLR);
 8006974:	4b0f      	ldr	r3, [pc, #60]	@ (80069b4 <HAL_RTC_DeactivateAlarm+0xb4>)
 8006976:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006978:	4a0e      	ldr	r2, [pc, #56]	@ (80069b4 <HAL_RTC_DeactivateAlarm+0xb4>)
 800697a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800697e:	64d3      	str	r3, [r2, #76]	@ 0x4c

    /* Store in the handle the Alarm B disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006984:	f023 0202 	bic.w	r2, r3, #2
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Clear AlarmB flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 800698c:	4b09      	ldr	r3, [pc, #36]	@ (80069b4 <HAL_RTC_DeactivateAlarm+0xb4>)
 800698e:	2202      	movs	r2, #2
 8006990:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006992:	4b08      	ldr	r3, [pc, #32]	@ (80069b4 <HAL_RTC_DeactivateAlarm+0xb4>)
 8006994:	22ff      	movs	r2, #255	@ 0xff
 8006996:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	2201      	movs	r2, #1
 800699c:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	2200      	movs	r2, #0
 80069a4:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 80069a8:	2300      	movs	r3, #0
}
 80069aa:	4618      	mov	r0, r3
 80069ac:	370c      	adds	r7, #12
 80069ae:	46bd      	mov	sp, r7
 80069b0:	bc80      	pop	{r7}
 80069b2:	4770      	bx	lr
 80069b4:	40002800 	.word	0x40002800

080069b8 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80069b8:	b580      	push	{r7, lr}
 80069ba:	b084      	sub	sp, #16
 80069bc:	af00      	add	r7, sp, #0
 80069be:	6078      	str	r0, [r7, #4]
  uint32_t tmp = READ_REG(RTC->MISR) & READ_REG(hrtc->IsEnabled.RtcFeatures);
 80069c0:	4b11      	ldr	r3, [pc, #68]	@ (8006a08 <HAL_RTC_AlarmIRQHandler+0x50>)
 80069c2:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80069c8:	4013      	ands	r3, r2
 80069ca:	60fb      	str	r3, [r7, #12]

  if ((tmp & RTC_MISR_ALRAMF) != 0U)
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	f003 0301 	and.w	r3, r3, #1
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d005      	beq.n	80069e2 <HAL_RTC_AlarmIRQHandler+0x2a>
  {
    /* Clear the AlarmA interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 80069d6:	4b0c      	ldr	r3, [pc, #48]	@ (8006a08 <HAL_RTC_AlarmIRQHandler+0x50>)
 80069d8:	2201      	movs	r2, #1
 80069da:	65da      	str	r2, [r3, #92]	@ 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmAEventCallback(hrtc);
#else
    HAL_RTC_AlarmAEventCallback(hrtc);
 80069dc:	6878      	ldr	r0, [r7, #4]
 80069de:	f7fb fbae 	bl	800213e <HAL_RTC_AlarmAEventCallback>
#endif
  }

  if ((tmp & RTC_MISR_ALRBMF) != 0U)
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	f003 0302 	and.w	r3, r3, #2
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d005      	beq.n	80069f8 <HAL_RTC_AlarmIRQHandler+0x40>
  {
    /* Clear the AlarmB interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 80069ec:	4b06      	ldr	r3, [pc, #24]	@ (8006a08 <HAL_RTC_AlarmIRQHandler+0x50>)
 80069ee:	2202      	movs	r2, #2
 80069f0:	65da      	str	r2, [r3, #92]	@ 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmBEventCallback(hrtc);
#else
    HAL_RTCEx_AlarmBEventCallback(hrtc);
 80069f2:	6878      	ldr	r0, [r7, #4]
 80069f4:	f000 f94a 	bl	8006c8c <HAL_RTCEx_AlarmBEventCallback>
#endif
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	2201      	movs	r2, #1
 80069fc:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
}
 8006a00:	bf00      	nop
 8006a02:	3710      	adds	r7, #16
 8006a04:	46bd      	mov	sp, r7
 8006a06:	bd80      	pop	{r7, pc}
 8006a08:	40002800 	.word	0x40002800

08006a0c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8006a0c:	b580      	push	{r7, lr}
 8006a0e:	b084      	sub	sp, #16
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 8006a14:	4b0f      	ldr	r3, [pc, #60]	@ (8006a54 <HAL_RTC_WaitForSynchro+0x48>)
 8006a16:	68db      	ldr	r3, [r3, #12]
 8006a18:	4a0e      	ldr	r2, [pc, #56]	@ (8006a54 <HAL_RTC_WaitForSynchro+0x48>)
 8006a1a:	f023 0320 	bic.w	r3, r3, #32
 8006a1e:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8006a20:	f7fb f962 	bl	8001ce8 <HAL_GetTick>
 8006a24:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8006a26:	e009      	b.n	8006a3c <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006a28:	f7fb f95e 	bl	8001ce8 <HAL_GetTick>
 8006a2c:	4602      	mov	r2, r0
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	1ad3      	subs	r3, r2, r3
 8006a32:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006a36:	d901      	bls.n	8006a3c <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8006a38:	2303      	movs	r3, #3
 8006a3a:	e006      	b.n	8006a4a <HAL_RTC_WaitForSynchro+0x3e>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8006a3c:	4b05      	ldr	r3, [pc, #20]	@ (8006a54 <HAL_RTC_WaitForSynchro+0x48>)
 8006a3e:	68db      	ldr	r3, [r3, #12]
 8006a40:	f003 0320 	and.w	r3, r3, #32
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d0ef      	beq.n	8006a28 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8006a48:	2300      	movs	r3, #0
}
 8006a4a:	4618      	mov	r0, r3
 8006a4c:	3710      	adds	r7, #16
 8006a4e:	46bd      	mov	sp, r7
 8006a50:	bd80      	pop	{r7, pc}
 8006a52:	bf00      	nop
 8006a54:	40002800 	.word	0x40002800

08006a58 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006a58:	b580      	push	{r7, lr}
 8006a5a:	b084      	sub	sp, #16
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006a60:	2300      	movs	r3, #0
 8006a62:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8006a64:	4b15      	ldr	r3, [pc, #84]	@ (8006abc <RTC_EnterInitMode+0x64>)
 8006a66:	68db      	ldr	r3, [r3, #12]
 8006a68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d120      	bne.n	8006ab2 <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8006a70:	4b12      	ldr	r3, [pc, #72]	@ (8006abc <RTC_EnterInitMode+0x64>)
 8006a72:	68db      	ldr	r3, [r3, #12]
 8006a74:	4a11      	ldr	r2, [pc, #68]	@ (8006abc <RTC_EnterInitMode+0x64>)
 8006a76:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006a7a:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 8006a7c:	f7fb f934 	bl	8001ce8 <HAL_GetTick>
 8006a80:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8006a82:	e00d      	b.n	8006aa0 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8006a84:	f7fb f930 	bl	8001ce8 <HAL_GetTick>
 8006a88:	4602      	mov	r2, r0
 8006a8a:	68bb      	ldr	r3, [r7, #8]
 8006a8c:	1ad3      	subs	r3, r2, r3
 8006a8e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006a92:	d905      	bls.n	8006aa0 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8006a94:	2303      	movs	r3, #3
 8006a96:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	2203      	movs	r2, #3
 8006a9c:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8006aa0:	4b06      	ldr	r3, [pc, #24]	@ (8006abc <RTC_EnterInitMode+0x64>)
 8006aa2:	68db      	ldr	r3, [r3, #12]
 8006aa4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d102      	bne.n	8006ab2 <RTC_EnterInitMode+0x5a>
 8006aac:	7bfb      	ldrb	r3, [r7, #15]
 8006aae:	2b03      	cmp	r3, #3
 8006ab0:	d1e8      	bne.n	8006a84 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 8006ab2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ab4:	4618      	mov	r0, r3
 8006ab6:	3710      	adds	r7, #16
 8006ab8:	46bd      	mov	sp, r7
 8006aba:	bd80      	pop	{r7, pc}
 8006abc:	40002800 	.word	0x40002800

08006ac0 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8006ac0:	b580      	push	{r7, lr}
 8006ac2:	b084      	sub	sp, #16
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006ac8:	2300      	movs	r3, #0
 8006aca:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8006acc:	4b1a      	ldr	r3, [pc, #104]	@ (8006b38 <RTC_ExitInitMode+0x78>)
 8006ace:	68db      	ldr	r3, [r3, #12]
 8006ad0:	4a19      	ldr	r2, [pc, #100]	@ (8006b38 <RTC_ExitInitMode+0x78>)
 8006ad2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006ad6:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8006ad8:	4b17      	ldr	r3, [pc, #92]	@ (8006b38 <RTC_ExitInitMode+0x78>)
 8006ada:	699b      	ldr	r3, [r3, #24]
 8006adc:	f003 0320 	and.w	r3, r3, #32
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d10c      	bne.n	8006afe <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006ae4:	6878      	ldr	r0, [r7, #4]
 8006ae6:	f7ff ff91 	bl	8006a0c <HAL_RTC_WaitForSynchro>
 8006aea:	4603      	mov	r3, r0
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d01e      	beq.n	8006b2e <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	2203      	movs	r2, #3
 8006af4:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 8006af8:	2303      	movs	r3, #3
 8006afa:	73fb      	strb	r3, [r7, #15]
 8006afc:	e017      	b.n	8006b2e <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8006afe:	4b0e      	ldr	r3, [pc, #56]	@ (8006b38 <RTC_ExitInitMode+0x78>)
 8006b00:	699b      	ldr	r3, [r3, #24]
 8006b02:	4a0d      	ldr	r2, [pc, #52]	@ (8006b38 <RTC_ExitInitMode+0x78>)
 8006b04:	f023 0320 	bic.w	r3, r3, #32
 8006b08:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006b0a:	6878      	ldr	r0, [r7, #4]
 8006b0c:	f7ff ff7e 	bl	8006a0c <HAL_RTC_WaitForSynchro>
 8006b10:	4603      	mov	r3, r0
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d005      	beq.n	8006b22 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	2203      	movs	r2, #3
 8006b1a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 8006b1e:	2303      	movs	r3, #3
 8006b20:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8006b22:	4b05      	ldr	r3, [pc, #20]	@ (8006b38 <RTC_ExitInitMode+0x78>)
 8006b24:	699b      	ldr	r3, [r3, #24]
 8006b26:	4a04      	ldr	r2, [pc, #16]	@ (8006b38 <RTC_ExitInitMode+0x78>)
 8006b28:	f043 0320 	orr.w	r3, r3, #32
 8006b2c:	6193      	str	r3, [r2, #24]
  }

  return status;
 8006b2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b30:	4618      	mov	r0, r3
 8006b32:	3710      	adds	r7, #16
 8006b34:	46bd      	mov	sp, r7
 8006b36:	bd80      	pop	{r7, pc}
 8006b38:	40002800 	.word	0x40002800

08006b3c <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8006b3c:	b480      	push	{r7}
 8006b3e:	b085      	sub	sp, #20
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	4603      	mov	r3, r0
 8006b44:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8006b46:	2300      	movs	r3, #0
 8006b48:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 8006b4a:	79fb      	ldrb	r3, [r7, #7]
 8006b4c:	72fb      	strb	r3, [r7, #11]

  while (tmp_Value >= 10U)
 8006b4e:	e005      	b.n	8006b5c <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	3301      	adds	r3, #1
 8006b54:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 8006b56:	7afb      	ldrb	r3, [r7, #11]
 8006b58:	3b0a      	subs	r3, #10
 8006b5a:	72fb      	strb	r3, [r7, #11]
  while (tmp_Value >= 10U)
 8006b5c:	7afb      	ldrb	r3, [r7, #11]
 8006b5e:	2b09      	cmp	r3, #9
 8006b60:	d8f6      	bhi.n	8006b50 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	b2db      	uxtb	r3, r3
 8006b66:	011b      	lsls	r3, r3, #4
 8006b68:	b2da      	uxtb	r2, r3
 8006b6a:	7afb      	ldrb	r3, [r7, #11]
 8006b6c:	4313      	orrs	r3, r2
 8006b6e:	b2db      	uxtb	r3, r3
}
 8006b70:	4618      	mov	r0, r3
 8006b72:	3714      	adds	r7, #20
 8006b74:	46bd      	mov	sp, r7
 8006b76:	bc80      	pop	{r7}
 8006b78:	4770      	bx	lr
	...

08006b7c <HAL_RTCEx_EnableBypassShadow>:
  *         directly from the Calendar counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
 8006b7c:	b480      	push	{r7}
 8006b7e:	b083      	sub	sp, #12
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8006b8a:	2b01      	cmp	r3, #1
 8006b8c:	d101      	bne.n	8006b92 <HAL_RTCEx_EnableBypassShadow+0x16>
 8006b8e:	2302      	movs	r3, #2
 8006b90:	e01f      	b.n	8006bd2 <HAL_RTCEx_EnableBypassShadow+0x56>
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	2201      	movs	r2, #1
 8006b96:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	2202      	movs	r2, #2
 8006b9e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006ba2:	4b0e      	ldr	r3, [pc, #56]	@ (8006bdc <HAL_RTCEx_EnableBypassShadow+0x60>)
 8006ba4:	22ca      	movs	r2, #202	@ 0xca
 8006ba6:	625a      	str	r2, [r3, #36]	@ 0x24
 8006ba8:	4b0c      	ldr	r3, [pc, #48]	@ (8006bdc <HAL_RTCEx_EnableBypassShadow+0x60>)
 8006baa:	2253      	movs	r2, #83	@ 0x53
 8006bac:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the BYPSHAD bit */
  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8006bae:	4b0b      	ldr	r3, [pc, #44]	@ (8006bdc <HAL_RTCEx_EnableBypassShadow+0x60>)
 8006bb0:	699b      	ldr	r3, [r3, #24]
 8006bb2:	4a0a      	ldr	r2, [pc, #40]	@ (8006bdc <HAL_RTCEx_EnableBypassShadow+0x60>)
 8006bb4:	f043 0320 	orr.w	r3, r3, #32
 8006bb8:	6193      	str	r3, [r2, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006bba:	4b08      	ldr	r3, [pc, #32]	@ (8006bdc <HAL_RTCEx_EnableBypassShadow+0x60>)
 8006bbc:	22ff      	movs	r2, #255	@ 0xff
 8006bbe:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	2201      	movs	r2, #1
 8006bc4:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	2200      	movs	r2, #0
 8006bcc:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8006bd0:	2300      	movs	r3, #0
}
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	370c      	adds	r7, #12
 8006bd6:	46bd      	mov	sp, r7
 8006bd8:	bc80      	pop	{r7}
 8006bda:	4770      	bx	lr
 8006bdc:	40002800 	.word	0x40002800

08006be0 <HAL_RTCEx_SetSSRU_IT>:
  * @brief  Set SSR Underflow detection with Interrupt.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetSSRU_IT(RTC_HandleTypeDef *hrtc)
{
 8006be0:	b480      	push	{r7}
 8006be2:	b083      	sub	sp, #12
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8006bee:	2b01      	cmp	r3, #1
 8006bf0:	d101      	bne.n	8006bf6 <HAL_RTCEx_SetSSRU_IT+0x16>
 8006bf2:	2302      	movs	r3, #2
 8006bf4:	e027      	b.n	8006c46 <HAL_RTCEx_SetSSRU_IT+0x66>
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	2201      	movs	r2, #1
 8006bfa:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	2202      	movs	r2, #2
 8006c02:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006c06:	4b12      	ldr	r3, [pc, #72]	@ (8006c50 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8006c08:	22ca      	movs	r2, #202	@ 0xca
 8006c0a:	625a      	str	r2, [r3, #36]	@ 0x24
 8006c0c:	4b10      	ldr	r3, [pc, #64]	@ (8006c50 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8006c0e:	2253      	movs	r2, #83	@ 0x53
 8006c10:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enable IT SSRU */
  __HAL_RTC_SSRU_ENABLE_IT(hrtc, RTC_IT_SSRU);
 8006c12:	4b0f      	ldr	r3, [pc, #60]	@ (8006c50 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8006c14:	699b      	ldr	r3, [r3, #24]
 8006c16:	4a0e      	ldr	r2, [pc, #56]	@ (8006c50 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8006c18:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006c1c:	6193      	str	r3, [r2, #24]

  /* RTC SSRU Interrupt Configuration: EXTI configuration */
  __HAL_RTC_SSRU_EXTI_ENABLE_IT();
 8006c1e:	4b0d      	ldr	r3, [pc, #52]	@ (8006c54 <HAL_RTCEx_SetSSRU_IT+0x74>)
 8006c20:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006c24:	4a0b      	ldr	r2, [pc, #44]	@ (8006c54 <HAL_RTCEx_SetSSRU_IT+0x74>)
 8006c26:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006c2a:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006c2e:	4b08      	ldr	r3, [pc, #32]	@ (8006c50 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8006c30:	22ff      	movs	r2, #255	@ 0xff
 8006c32:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	2201      	movs	r2, #1
 8006c38:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	2200      	movs	r2, #0
 8006c40:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8006c44:	2300      	movs	r3, #0
}
 8006c46:	4618      	mov	r0, r3
 8006c48:	370c      	adds	r7, #12
 8006c4a:	46bd      	mov	sp, r7
 8006c4c:	bc80      	pop	{r7}
 8006c4e:	4770      	bx	lr
 8006c50:	40002800 	.word	0x40002800
 8006c54:	58000800 	.word	0x58000800

08006c58 <HAL_RTCEx_SSRUIRQHandler>:
  * @brief  Handle SSR underflow interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_SSRUIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8006c58:	b580      	push	{r7, lr}
 8006c5a:	b082      	sub	sp, #8
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	6078      	str	r0, [r7, #4]
  if ((RTC->MISR & RTC_MISR_SSRUMF) != 0u)
 8006c60:	4b09      	ldr	r3, [pc, #36]	@ (8006c88 <HAL_RTCEx_SSRUIRQHandler+0x30>)
 8006c62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d005      	beq.n	8006c78 <HAL_RTCEx_SSRUIRQHandler+0x20>
  {
    /* Immediately clear flags */
    RTC->SCR = RTC_SCR_CSSRUF;
 8006c6c:	4b06      	ldr	r3, [pc, #24]	@ (8006c88 <HAL_RTCEx_SSRUIRQHandler+0x30>)
 8006c6e:	2240      	movs	r2, #64	@ 0x40
 8006c70:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* SSRU callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call SSRUEvent registered Callback */
    hrtc->SSRUEventCallback(hrtc);
#else
    HAL_RTCEx_SSRUEventCallback(hrtc);
 8006c72:	6878      	ldr	r0, [r7, #4]
 8006c74:	f7fb fa6d 	bl	8002152 <HAL_RTCEx_SSRUEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	2201      	movs	r2, #1
 8006c7c:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
}
 8006c80:	bf00      	nop
 8006c82:	3708      	adds	r7, #8
 8006c84:	46bd      	mov	sp, r7
 8006c86:	bd80      	pop	{r7, pc}
 8006c88:	40002800 	.word	0x40002800

08006c8c <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8006c8c:	b480      	push	{r7}
 8006c8e:	b083      	sub	sp, #12
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8006c94:	bf00      	nop
 8006c96:	370c      	adds	r7, #12
 8006c98:	46bd      	mov	sp, r7
 8006c9a:	bc80      	pop	{r7}
 8006c9c:	4770      	bx	lr
	...

08006ca0 <HAL_RTCEx_BKUPWrite>:
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @param  Data Data to be written in the specified Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8006ca0:	b480      	push	{r7}
 8006ca2:	b087      	sub	sp, #28
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	60f8      	str	r0, [r7, #12]
 8006ca8:	60b9      	str	r1, [r7, #8]
 8006caa:	607a      	str	r2, [r7, #4]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
 8006cac:	4b07      	ldr	r3, [pc, #28]	@ (8006ccc <HAL_RTCEx_BKUPWrite+0x2c>)
 8006cae:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8006cb0:	68bb      	ldr	r3, [r7, #8]
 8006cb2:	009b      	lsls	r3, r3, #2
 8006cb4:	697a      	ldr	r2, [r7, #20]
 8006cb6:	4413      	add	r3, r2
 8006cb8:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8006cba:	697b      	ldr	r3, [r7, #20]
 8006cbc:	687a      	ldr	r2, [r7, #4]
 8006cbe:	601a      	str	r2, [r3, #0]
}
 8006cc0:	bf00      	nop
 8006cc2:	371c      	adds	r7, #28
 8006cc4:	46bd      	mov	sp, r7
 8006cc6:	bc80      	pop	{r7}
 8006cc8:	4770      	bx	lr
 8006cca:	bf00      	nop
 8006ccc:	4000b100 	.word	0x4000b100

08006cd0 <HAL_RTCEx_BKUPRead>:
  * @param  BackupRegister RTC Backup data Register number.
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8006cd0:	b480      	push	{r7}
 8006cd2:	b085      	sub	sp, #20
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	6078      	str	r0, [r7, #4]
 8006cd8:	6039      	str	r1, [r7, #0]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
 8006cda:	4b07      	ldr	r3, [pc, #28]	@ (8006cf8 <HAL_RTCEx_BKUPRead+0x28>)
 8006cdc:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 8006cde:	683b      	ldr	r3, [r7, #0]
 8006ce0:	009b      	lsls	r3, r3, #2
 8006ce2:	68fa      	ldr	r2, [r7, #12]
 8006ce4:	4413      	add	r3, r2
 8006ce6:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	681b      	ldr	r3, [r3, #0]
}
 8006cec:	4618      	mov	r0, r3
 8006cee:	3714      	adds	r7, #20
 8006cf0:	46bd      	mov	sp, r7
 8006cf2:	bc80      	pop	{r7}
 8006cf4:	4770      	bx	lr
 8006cf6:	bf00      	nop
 8006cf8:	4000b100 	.word	0x4000b100

08006cfc <LL_PWR_SetRadioBusyTrigger>:
{
 8006cfc:	b480      	push	{r7}
 8006cfe:	b083      	sub	sp, #12
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 8006d04:	4b06      	ldr	r3, [pc, #24]	@ (8006d20 <LL_PWR_SetRadioBusyTrigger+0x24>)
 8006d06:	689b      	ldr	r3, [r3, #8]
 8006d08:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8006d0c:	4904      	ldr	r1, [pc, #16]	@ (8006d20 <LL_PWR_SetRadioBusyTrigger+0x24>)
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	4313      	orrs	r3, r2
 8006d12:	608b      	str	r3, [r1, #8]
}
 8006d14:	bf00      	nop
 8006d16:	370c      	adds	r7, #12
 8006d18:	46bd      	mov	sp, r7
 8006d1a:	bc80      	pop	{r7}
 8006d1c:	4770      	bx	lr
 8006d1e:	bf00      	nop
 8006d20:	58000400 	.word	0x58000400

08006d24 <LL_PWR_UnselectSUBGHZSPI_NSS>:
{
 8006d24:	b480      	push	{r7}
 8006d26:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8006d28:	4b05      	ldr	r3, [pc, #20]	@ (8006d40 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8006d2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d2e:	4a04      	ldr	r2, [pc, #16]	@ (8006d40 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8006d30:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006d34:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8006d38:	bf00      	nop
 8006d3a:	46bd      	mov	sp, r7
 8006d3c:	bc80      	pop	{r7}
 8006d3e:	4770      	bx	lr
 8006d40:	58000400 	.word	0x58000400

08006d44 <LL_PWR_SelectSUBGHZSPI_NSS>:
{
 8006d44:	b480      	push	{r7}
 8006d46:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8006d48:	4b05      	ldr	r3, [pc, #20]	@ (8006d60 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8006d4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d4e:	4a04      	ldr	r2, [pc, #16]	@ (8006d60 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8006d50:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006d54:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8006d58:	bf00      	nop
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	bc80      	pop	{r7}
 8006d5e:	4770      	bx	lr
 8006d60:	58000400 	.word	0x58000400

08006d64 <LL_PWR_ClearFlag_RFBUSY>:
{
 8006d64:	b480      	push	{r7}
 8006d66:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 8006d68:	4b03      	ldr	r3, [pc, #12]	@ (8006d78 <LL_PWR_ClearFlag_RFBUSY+0x14>)
 8006d6a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006d6e:	619a      	str	r2, [r3, #24]
}
 8006d70:	bf00      	nop
 8006d72:	46bd      	mov	sp, r7
 8006d74:	bc80      	pop	{r7}
 8006d76:	4770      	bx	lr
 8006d78:	58000400 	.word	0x58000400

08006d7c <LL_PWR_IsActiveFlag_RFBUSYS>:
{
 8006d7c:	b480      	push	{r7}
 8006d7e:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 8006d80:	4b06      	ldr	r3, [pc, #24]	@ (8006d9c <LL_PWR_IsActiveFlag_RFBUSYS+0x20>)
 8006d82:	695b      	ldr	r3, [r3, #20]
 8006d84:	f003 0302 	and.w	r3, r3, #2
 8006d88:	2b02      	cmp	r3, #2
 8006d8a:	d101      	bne.n	8006d90 <LL_PWR_IsActiveFlag_RFBUSYS+0x14>
 8006d8c:	2301      	movs	r3, #1
 8006d8e:	e000      	b.n	8006d92 <LL_PWR_IsActiveFlag_RFBUSYS+0x16>
 8006d90:	2300      	movs	r3, #0
}
 8006d92:	4618      	mov	r0, r3
 8006d94:	46bd      	mov	sp, r7
 8006d96:	bc80      	pop	{r7}
 8006d98:	4770      	bx	lr
 8006d9a:	bf00      	nop
 8006d9c:	58000400 	.word	0x58000400

08006da0 <LL_PWR_IsActiveFlag_RFBUSYMS>:
{
 8006da0:	b480      	push	{r7}
 8006da2:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 8006da4:	4b06      	ldr	r3, [pc, #24]	@ (8006dc0 <LL_PWR_IsActiveFlag_RFBUSYMS+0x20>)
 8006da6:	695b      	ldr	r3, [r3, #20]
 8006da8:	f003 0304 	and.w	r3, r3, #4
 8006dac:	2b04      	cmp	r3, #4
 8006dae:	d101      	bne.n	8006db4 <LL_PWR_IsActiveFlag_RFBUSYMS+0x14>
 8006db0:	2301      	movs	r3, #1
 8006db2:	e000      	b.n	8006db6 <LL_PWR_IsActiveFlag_RFBUSYMS+0x16>
 8006db4:	2300      	movs	r3, #0
}
 8006db6:	4618      	mov	r0, r3
 8006db8:	46bd      	mov	sp, r7
 8006dba:	bc80      	pop	{r7}
 8006dbc:	4770      	bx	lr
 8006dbe:	bf00      	nop
 8006dc0:	58000400 	.word	0x58000400

08006dc4 <LL_RCC_RF_DisableReset>:
{
 8006dc4:	b480      	push	{r7}
 8006dc6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 8006dc8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006dcc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006dd0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006dd4:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006dd8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8006ddc:	bf00      	nop
 8006dde:	46bd      	mov	sp, r7
 8006de0:	bc80      	pop	{r7}
 8006de2:	4770      	bx	lr

08006de4 <LL_RCC_IsRFUnderReset>:
{
 8006de4:	b480      	push	{r7}
 8006de6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 8006de8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006dec:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006df0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006df4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006df8:	d101      	bne.n	8006dfe <LL_RCC_IsRFUnderReset+0x1a>
 8006dfa:	2301      	movs	r3, #1
 8006dfc:	e000      	b.n	8006e00 <LL_RCC_IsRFUnderReset+0x1c>
 8006dfe:	2300      	movs	r3, #0
}
 8006e00:	4618      	mov	r0, r3
 8006e02:	46bd      	mov	sp, r7
 8006e04:	bc80      	pop	{r7}
 8006e06:	4770      	bx	lr

08006e08 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8006e08:	b480      	push	{r7}
 8006e0a:	b083      	sub	sp, #12
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8006e10:	4b06      	ldr	r3, [pc, #24]	@ (8006e2c <LL_EXTI_EnableIT_32_63+0x24>)
 8006e12:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8006e16:	4905      	ldr	r1, [pc, #20]	@ (8006e2c <LL_EXTI_EnableIT_32_63+0x24>)
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	4313      	orrs	r3, r2
 8006e1c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8006e20:	bf00      	nop
 8006e22:	370c      	adds	r7, #12
 8006e24:	46bd      	mov	sp, r7
 8006e26:	bc80      	pop	{r7}
 8006e28:	4770      	bx	lr
 8006e2a:	bf00      	nop
 8006e2c:	58000800 	.word	0x58000800

08006e30 <HAL_SUBGHZ_Init>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SUBGHZ_Init(SUBGHZ_HandleTypeDef *hsubghz)
{
 8006e30:	b580      	push	{r7, lr}
 8006e32:	b084      	sub	sp, #16
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;

  /* Check the hsubghz handle allocation */
  if (hsubghz == NULL)
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d103      	bne.n	8006e46 <HAL_SUBGHZ_Init+0x16>
  {
    status = HAL_ERROR;
 8006e3e:	2301      	movs	r3, #1
 8006e40:	73fb      	strb	r3, [r7, #15]
    return status;
 8006e42:	7bfb      	ldrb	r3, [r7, #15]
 8006e44:	e04b      	b.n	8006ede <HAL_SUBGHZ_Init+0xae>
  }
  else
  {
    status = HAL_OK;
 8006e46:	2300      	movs	r3, #0
 8006e48:	73fb      	strb	r3, [r7, #15]
  }

  assert_param(IS_SUBGHZSPI_BAUDRATE_PRESCALER(hsubghz->Init.BaudratePrescaler));

  if (hsubghz->State == HAL_SUBGHZ_STATE_RESET)
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	799b      	ldrb	r3, [r3, #6]
 8006e4e:	b2db      	uxtb	r3, r3
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d105      	bne.n	8006e60 <HAL_SUBGHZ_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsubghz->Lock = HAL_UNLOCKED;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	2200      	movs	r2, #0
 8006e58:	715a      	strb	r2, [r3, #5]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hsubghz->MspInitCallback(hsubghz);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SUBGHZ_MspInit(hsubghz);
 8006e5a:	6878      	ldr	r0, [r7, #4]
 8006e5c:	f7fa fd9c 	bl	8001998 <HAL_SUBGHZ_MspInit>
#endif /* USE_HAL_ SUBGHZ_REGISTER_CALLBACKS */
  }

  hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	2202      	movs	r2, #2
 8006e64:	719a      	strb	r2, [r3, #6]

  /* De-asserts the reset signal of the Radio peripheral */
  LL_RCC_RF_DisableReset();
 8006e66:	f7ff ffad 	bl	8006dc4 <LL_RCC_RF_DisableReset>

  /* Verify that Radio in reset status flag is set */
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8006e6a:	4b1f      	ldr	r3, [pc, #124]	@ (8006ee8 <HAL_SUBGHZ_Init+0xb8>)
 8006e6c:	681a      	ldr	r2, [r3, #0]
 8006e6e:	4613      	mov	r3, r2
 8006e70:	00db      	lsls	r3, r3, #3
 8006e72:	1a9b      	subs	r3, r3, r2
 8006e74:	009b      	lsls	r3, r3, #2
 8006e76:	0cdb      	lsrs	r3, r3, #19
 8006e78:	2264      	movs	r2, #100	@ 0x64
 8006e7a:	fb02 f303 	mul.w	r3, r2, r3
 8006e7e:	60bb      	str	r3, [r7, #8]

  do
  {
    if (count == 0U)
 8006e80:	68bb      	ldr	r3, [r7, #8]
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d105      	bne.n	8006e92 <HAL_SUBGHZ_Init+0x62>
    {
      status  = HAL_ERROR;
 8006e86:	2301      	movs	r3, #1
 8006e88:	73fb      	strb	r3, [r7, #15]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	2201      	movs	r2, #1
 8006e8e:	609a      	str	r2, [r3, #8]
      break;
 8006e90:	e007      	b.n	8006ea2 <HAL_SUBGHZ_Init+0x72>
    }
    count--;
 8006e92:	68bb      	ldr	r3, [r7, #8]
 8006e94:	3b01      	subs	r3, #1
 8006e96:	60bb      	str	r3, [r7, #8]
  } while (LL_RCC_IsRFUnderReset() != 0UL);
 8006e98:	f7ff ffa4 	bl	8006de4 <LL_RCC_IsRFUnderReset>
 8006e9c:	4603      	mov	r3, r0
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d1ee      	bne.n	8006e80 <HAL_SUBGHZ_Init+0x50>

  /* Asserts the reset signal of the Radio peripheral */
  LL_PWR_UnselectSUBGHZSPI_NSS();
 8006ea2:	f7ff ff3f 	bl	8006d24 <LL_PWR_UnselectSUBGHZSPI_NSS>

  /* Enable wakeup signal of the Radio peripheral */
  LL_C2_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
#else
  /* Enable EXTI 44 : Radio IRQ ITs for CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
 8006ea6:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8006eaa:	f7ff ffad 	bl	8006e08 <LL_EXTI_EnableIT_32_63>

  /* Enable wakeup signal of the Radio peripheral */
  LL_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
 8006eae:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8006eb2:	f7ff ff23 	bl	8006cfc <LL_PWR_SetRadioBusyTrigger>
#endif /* CM0PLUS */

  /* Clear Pending Flag */
  LL_PWR_ClearFlag_RFBUSY();
 8006eb6:	f7ff ff55 	bl	8006d64 <LL_PWR_ClearFlag_RFBUSY>

  if (status == HAL_OK)
 8006eba:	7bfb      	ldrb	r3, [r7, #15]
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d10a      	bne.n	8006ed6 <HAL_SUBGHZ_Init+0xa6>
  {
    /* Initialize SUBGHZSPI Peripheral */
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	4618      	mov	r0, r3
 8006ec6:	f000 faa5 	bl	8007414 <SUBGHZSPI_Init>

    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	2201      	movs	r2, #1
 8006ece:	711a      	strb	r2, [r3, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	2200      	movs	r2, #0
 8006ed4:	609a      	str	r2, [r3, #8]
  }
  hsubghz->State     = HAL_SUBGHZ_STATE_READY;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	2201      	movs	r2, #1
 8006eda:	719a      	strb	r2, [r3, #6]

  return status;
 8006edc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ede:	4618      	mov	r0, r3
 8006ee0:	3710      	adds	r7, #16
 8006ee2:	46bd      	mov	sp, r7
 8006ee4:	bd80      	pop	{r7, pc}
 8006ee6:	bf00      	nop
 8006ee8:	20000000 	.word	0x20000000

08006eec <HAL_SUBGHZ_WriteRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                            uint16_t Address,
                                            uint8_t *pBuffer,
                                            uint16_t Size)
{
 8006eec:	b580      	push	{r7, lr}
 8006eee:	b086      	sub	sp, #24
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	60f8      	str	r0, [r7, #12]
 8006ef4:	607a      	str	r2, [r7, #4]
 8006ef6:	461a      	mov	r2, r3
 8006ef8:	460b      	mov	r3, r1
 8006efa:	817b      	strh	r3, [r7, #10]
 8006efc:	4613      	mov	r3, r2
 8006efe:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	799b      	ldrb	r3, [r3, #6]
 8006f04:	b2db      	uxtb	r3, r3
 8006f06:	2b01      	cmp	r3, #1
 8006f08:	d14a      	bne.n	8006fa0 <HAL_SUBGHZ_WriteRegisters+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	795b      	ldrb	r3, [r3, #5]
 8006f0e:	2b01      	cmp	r3, #1
 8006f10:	d101      	bne.n	8006f16 <HAL_SUBGHZ_WriteRegisters+0x2a>
 8006f12:	2302      	movs	r3, #2
 8006f14:	e045      	b.n	8006fa2 <HAL_SUBGHZ_WriteRegisters+0xb6>
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	2201      	movs	r2, #1
 8006f1a:	715a      	strb	r2, [r3, #5]

    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	2202      	movs	r2, #2
 8006f20:	719a      	strb	r2, [r3, #6]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8006f22:	68f8      	ldr	r0, [r7, #12]
 8006f24:	f000 fb44 	bl	80075b0 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8006f28:	f7ff ff0c 	bl	8006d44 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 8006f2c:	210d      	movs	r1, #13
 8006f2e:	68f8      	ldr	r0, [r7, #12]
 8006f30:	f000 fa90 	bl	8007454 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8006f34:	897b      	ldrh	r3, [r7, #10]
 8006f36:	0a1b      	lsrs	r3, r3, #8
 8006f38:	b29b      	uxth	r3, r3
 8006f3a:	b2db      	uxtb	r3, r3
 8006f3c:	4619      	mov	r1, r3
 8006f3e:	68f8      	ldr	r0, [r7, #12]
 8006f40:	f000 fa88 	bl	8007454 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8006f44:	897b      	ldrh	r3, [r7, #10]
 8006f46:	b2db      	uxtb	r3, r3
 8006f48:	4619      	mov	r1, r3
 8006f4a:	68f8      	ldr	r0, [r7, #12]
 8006f4c:	f000 fa82 	bl	8007454 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8006f50:	2300      	movs	r3, #0
 8006f52:	82bb      	strh	r3, [r7, #20]
 8006f54:	e00a      	b.n	8006f6c <HAL_SUBGHZ_WriteRegisters+0x80>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8006f56:	8abb      	ldrh	r3, [r7, #20]
 8006f58:	687a      	ldr	r2, [r7, #4]
 8006f5a:	4413      	add	r3, r2
 8006f5c:	781b      	ldrb	r3, [r3, #0]
 8006f5e:	4619      	mov	r1, r3
 8006f60:	68f8      	ldr	r0, [r7, #12]
 8006f62:	f000 fa77 	bl	8007454 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8006f66:	8abb      	ldrh	r3, [r7, #20]
 8006f68:	3301      	adds	r3, #1
 8006f6a:	82bb      	strh	r3, [r7, #20]
 8006f6c:	8aba      	ldrh	r2, [r7, #20]
 8006f6e:	893b      	ldrh	r3, [r7, #8]
 8006f70:	429a      	cmp	r2, r3
 8006f72:	d3f0      	bcc.n	8006f56 <HAL_SUBGHZ_WriteRegisters+0x6a>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8006f74:	f7ff fed6 	bl	8006d24 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8006f78:	68f8      	ldr	r0, [r7, #12]
 8006f7a:	f000 fb3d 	bl	80075f8 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	689b      	ldr	r3, [r3, #8]
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d002      	beq.n	8006f8c <HAL_SUBGHZ_WriteRegisters+0xa0>
    {
      status = HAL_ERROR;
 8006f86:	2301      	movs	r3, #1
 8006f88:	75fb      	strb	r3, [r7, #23]
 8006f8a:	e001      	b.n	8006f90 <HAL_SUBGHZ_WriteRegisters+0xa4>
    }
    else
    {
      status = HAL_OK;
 8006f8c:	2300      	movs	r3, #0
 8006f8e:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	2201      	movs	r2, #1
 8006f94:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	2200      	movs	r2, #0
 8006f9a:	715a      	strb	r2, [r3, #5]

    return status;
 8006f9c:	7dfb      	ldrb	r3, [r7, #23]
 8006f9e:	e000      	b.n	8006fa2 <HAL_SUBGHZ_WriteRegisters+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8006fa0:	2302      	movs	r3, #2
  }
}
 8006fa2:	4618      	mov	r0, r3
 8006fa4:	3718      	adds	r7, #24
 8006fa6:	46bd      	mov	sp, r7
 8006fa8:	bd80      	pop	{r7, pc}

08006faa <HAL_SUBGHZ_ReadRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                           uint16_t Address,
                                           uint8_t *pBuffer,
                                           uint16_t Size)
{
 8006faa:	b580      	push	{r7, lr}
 8006fac:	b088      	sub	sp, #32
 8006fae:	af00      	add	r7, sp, #0
 8006fb0:	60f8      	str	r0, [r7, #12]
 8006fb2:	607a      	str	r2, [r7, #4]
 8006fb4:	461a      	mov	r2, r3
 8006fb6:	460b      	mov	r3, r1
 8006fb8:	817b      	strh	r3, [r7, #10]
 8006fba:	4613      	mov	r3, r2
 8006fbc:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	799b      	ldrb	r3, [r3, #6]
 8006fc6:	b2db      	uxtb	r3, r3
 8006fc8:	2b01      	cmp	r3, #1
 8006fca:	d14a      	bne.n	8007062 <HAL_SUBGHZ_ReadRegisters+0xb8>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	795b      	ldrb	r3, [r3, #5]
 8006fd0:	2b01      	cmp	r3, #1
 8006fd2:	d101      	bne.n	8006fd8 <HAL_SUBGHZ_ReadRegisters+0x2e>
 8006fd4:	2302      	movs	r3, #2
 8006fd6:	e045      	b.n	8007064 <HAL_SUBGHZ_ReadRegisters+0xba>
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	2201      	movs	r2, #1
 8006fdc:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8006fde:	68f8      	ldr	r0, [r7, #12]
 8006fe0:	f000 fae6 	bl	80075b0 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8006fe4:	f7ff feae 	bl	8006d44 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 8006fe8:	211d      	movs	r1, #29
 8006fea:	68f8      	ldr	r0, [r7, #12]
 8006fec:	f000 fa32 	bl	8007454 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8006ff0:	897b      	ldrh	r3, [r7, #10]
 8006ff2:	0a1b      	lsrs	r3, r3, #8
 8006ff4:	b29b      	uxth	r3, r3
 8006ff6:	b2db      	uxtb	r3, r3
 8006ff8:	4619      	mov	r1, r3
 8006ffa:	68f8      	ldr	r0, [r7, #12]
 8006ffc:	f000 fa2a 	bl	8007454 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8007000:	897b      	ldrh	r3, [r7, #10]
 8007002:	b2db      	uxtb	r3, r3
 8007004:	4619      	mov	r1, r3
 8007006:	68f8      	ldr	r0, [r7, #12]
 8007008:	f000 fa24 	bl	8007454 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 800700c:	2100      	movs	r1, #0
 800700e:	68f8      	ldr	r0, [r7, #12]
 8007010:	f000 fa20 	bl	8007454 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8007014:	2300      	movs	r3, #0
 8007016:	82fb      	strh	r3, [r7, #22]
 8007018:	e009      	b.n	800702e <HAL_SUBGHZ_ReadRegisters+0x84>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 800701a:	69b9      	ldr	r1, [r7, #24]
 800701c:	68f8      	ldr	r0, [r7, #12]
 800701e:	f000 fa6f 	bl	8007500 <SUBGHZSPI_Receive>
      pData++;
 8007022:	69bb      	ldr	r3, [r7, #24]
 8007024:	3301      	adds	r3, #1
 8007026:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8007028:	8afb      	ldrh	r3, [r7, #22]
 800702a:	3301      	adds	r3, #1
 800702c:	82fb      	strh	r3, [r7, #22]
 800702e:	8afa      	ldrh	r2, [r7, #22]
 8007030:	893b      	ldrh	r3, [r7, #8]
 8007032:	429a      	cmp	r2, r3
 8007034:	d3f1      	bcc.n	800701a <HAL_SUBGHZ_ReadRegisters+0x70>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8007036:	f7ff fe75 	bl	8006d24 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 800703a:	68f8      	ldr	r0, [r7, #12]
 800703c:	f000 fadc 	bl	80075f8 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	689b      	ldr	r3, [r3, #8]
 8007044:	2b00      	cmp	r3, #0
 8007046:	d002      	beq.n	800704e <HAL_SUBGHZ_ReadRegisters+0xa4>
    {
      status = HAL_ERROR;
 8007048:	2301      	movs	r3, #1
 800704a:	77fb      	strb	r3, [r7, #31]
 800704c:	e001      	b.n	8007052 <HAL_SUBGHZ_ReadRegisters+0xa8>
    }
    else
    {
      status = HAL_OK;
 800704e:	2300      	movs	r3, #0
 8007050:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	2201      	movs	r2, #1
 8007056:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	2200      	movs	r2, #0
 800705c:	715a      	strb	r2, [r3, #5]

    return status;
 800705e:	7ffb      	ldrb	r3, [r7, #31]
 8007060:	e000      	b.n	8007064 <HAL_SUBGHZ_ReadRegisters+0xba>
  }
  else
  {
    return HAL_BUSY;
 8007062:	2302      	movs	r3, #2
  }
}
 8007064:	4618      	mov	r0, r3
 8007066:	3720      	adds	r7, #32
 8007068:	46bd      	mov	sp, r7
 800706a:	bd80      	pop	{r7, pc}

0800706c <HAL_SUBGHZ_ExecSetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecSetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioSetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 800706c:	b580      	push	{r7, lr}
 800706e:	b086      	sub	sp, #24
 8007070:	af00      	add	r7, sp, #0
 8007072:	60f8      	str	r0, [r7, #12]
 8007074:	607a      	str	r2, [r7, #4]
 8007076:	461a      	mov	r2, r3
 8007078:	460b      	mov	r3, r1
 800707a:	72fb      	strb	r3, [r7, #11]
 800707c:	4613      	mov	r3, r2
 800707e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  /* LORA Modulation not available on STM32WLx4xx devices */
  assert_param(IS_SUBGHZ_MODULATION_SUPPORTED(Command, pBuffer[0U]));

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	799b      	ldrb	r3, [r3, #6]
 8007084:	b2db      	uxtb	r3, r3
 8007086:	2b01      	cmp	r3, #1
 8007088:	d14a      	bne.n	8007120 <HAL_SUBGHZ_ExecSetCmd+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	795b      	ldrb	r3, [r3, #5]
 800708e:	2b01      	cmp	r3, #1
 8007090:	d101      	bne.n	8007096 <HAL_SUBGHZ_ExecSetCmd+0x2a>
 8007092:	2302      	movs	r3, #2
 8007094:	e045      	b.n	8007122 <HAL_SUBGHZ_ExecSetCmd+0xb6>
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	2201      	movs	r2, #1
 800709a:	715a      	strb	r2, [r3, #5]

    /* Need to wakeup Radio if already in Sleep at startup */
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800709c:	68f8      	ldr	r0, [r7, #12]
 800709e:	f000 fa87 	bl	80075b0 <SUBGHZ_CheckDeviceReady>

    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 80070a2:	7afb      	ldrb	r3, [r7, #11]
 80070a4:	2b84      	cmp	r3, #132	@ 0x84
 80070a6:	d002      	beq.n	80070ae <HAL_SUBGHZ_ExecSetCmd+0x42>
 80070a8:	7afb      	ldrb	r3, [r7, #11]
 80070aa:	2b94      	cmp	r3, #148	@ 0x94
 80070ac:	d103      	bne.n	80070b6 <HAL_SUBGHZ_ExecSetCmd+0x4a>
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	2201      	movs	r2, #1
 80070b2:	711a      	strb	r2, [r3, #4]
 80070b4:	e002      	b.n	80070bc <HAL_SUBGHZ_ExecSetCmd+0x50>
    }
    else
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	2200      	movs	r2, #0
 80070ba:	711a      	strb	r2, [r3, #4]
    }

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80070bc:	f7ff fe42 	bl	8006d44 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 80070c0:	7afb      	ldrb	r3, [r7, #11]
 80070c2:	4619      	mov	r1, r3
 80070c4:	68f8      	ldr	r0, [r7, #12]
 80070c6:	f000 f9c5 	bl	8007454 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 80070ca:	2300      	movs	r3, #0
 80070cc:	82bb      	strh	r3, [r7, #20]
 80070ce:	e00a      	b.n	80070e6 <HAL_SUBGHZ_ExecSetCmd+0x7a>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 80070d0:	8abb      	ldrh	r3, [r7, #20]
 80070d2:	687a      	ldr	r2, [r7, #4]
 80070d4:	4413      	add	r3, r2
 80070d6:	781b      	ldrb	r3, [r3, #0]
 80070d8:	4619      	mov	r1, r3
 80070da:	68f8      	ldr	r0, [r7, #12]
 80070dc:	f000 f9ba 	bl	8007454 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 80070e0:	8abb      	ldrh	r3, [r7, #20]
 80070e2:	3301      	adds	r3, #1
 80070e4:	82bb      	strh	r3, [r7, #20]
 80070e6:	8aba      	ldrh	r2, [r7, #20]
 80070e8:	893b      	ldrh	r3, [r7, #8]
 80070ea:	429a      	cmp	r2, r3
 80070ec:	d3f0      	bcc.n	80070d0 <HAL_SUBGHZ_ExecSetCmd+0x64>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80070ee:	f7ff fe19 	bl	8006d24 <LL_PWR_UnselectSUBGHZSPI_NSS>

    if (Command != RADIO_SET_SLEEP)
 80070f2:	7afb      	ldrb	r3, [r7, #11]
 80070f4:	2b84      	cmp	r3, #132	@ 0x84
 80070f6:	d002      	beq.n	80070fe <HAL_SUBGHZ_ExecSetCmd+0x92>
    {
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 80070f8:	68f8      	ldr	r0, [r7, #12]
 80070fa:	f000 fa7d 	bl	80075f8 <SUBGHZ_WaitOnBusy>
    }

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	689b      	ldr	r3, [r3, #8]
 8007102:	2b00      	cmp	r3, #0
 8007104:	d002      	beq.n	800710c <HAL_SUBGHZ_ExecSetCmd+0xa0>
    {
      status = HAL_ERROR;
 8007106:	2301      	movs	r3, #1
 8007108:	75fb      	strb	r3, [r7, #23]
 800710a:	e001      	b.n	8007110 <HAL_SUBGHZ_ExecSetCmd+0xa4>
    }
    else
    {
      status = HAL_OK;
 800710c:	2300      	movs	r3, #0
 800710e:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	2201      	movs	r2, #1
 8007114:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	2200      	movs	r2, #0
 800711a:	715a      	strb	r2, [r3, #5]

    return status;
 800711c:	7dfb      	ldrb	r3, [r7, #23]
 800711e:	e000      	b.n	8007122 <HAL_SUBGHZ_ExecSetCmd+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8007120:	2302      	movs	r3, #2
  }
}
 8007122:	4618      	mov	r0, r3
 8007124:	3718      	adds	r7, #24
 8007126:	46bd      	mov	sp, r7
 8007128:	bd80      	pop	{r7, pc}

0800712a <HAL_SUBGHZ_ExecGetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecGetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioGetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 800712a:	b580      	push	{r7, lr}
 800712c:	b088      	sub	sp, #32
 800712e:	af00      	add	r7, sp, #0
 8007130:	60f8      	str	r0, [r7, #12]
 8007132:	607a      	str	r2, [r7, #4]
 8007134:	461a      	mov	r2, r3
 8007136:	460b      	mov	r3, r1
 8007138:	72fb      	strb	r3, [r7, #11]
 800713a:	4613      	mov	r3, r2
 800713c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	799b      	ldrb	r3, [r3, #6]
 8007146:	b2db      	uxtb	r3, r3
 8007148:	2b01      	cmp	r3, #1
 800714a:	d13d      	bne.n	80071c8 <HAL_SUBGHZ_ExecGetCmd+0x9e>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	795b      	ldrb	r3, [r3, #5]
 8007150:	2b01      	cmp	r3, #1
 8007152:	d101      	bne.n	8007158 <HAL_SUBGHZ_ExecGetCmd+0x2e>
 8007154:	2302      	movs	r3, #2
 8007156:	e038      	b.n	80071ca <HAL_SUBGHZ_ExecGetCmd+0xa0>
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	2201      	movs	r2, #1
 800715c:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800715e:	68f8      	ldr	r0, [r7, #12]
 8007160:	f000 fa26 	bl	80075b0 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8007164:	f7ff fdee 	bl	8006d44 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8007168:	7afb      	ldrb	r3, [r7, #11]
 800716a:	4619      	mov	r1, r3
 800716c:	68f8      	ldr	r0, [r7, #12]
 800716e:	f000 f971 	bl	8007454 <SUBGHZSPI_Transmit>

    /* Use to flush the Status (First byte) receive from SUBGHZ as not use */
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8007172:	2100      	movs	r1, #0
 8007174:	68f8      	ldr	r0, [r7, #12]
 8007176:	f000 f96d 	bl	8007454 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 800717a:	2300      	movs	r3, #0
 800717c:	82fb      	strh	r3, [r7, #22]
 800717e:	e009      	b.n	8007194 <HAL_SUBGHZ_ExecGetCmd+0x6a>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8007180:	69b9      	ldr	r1, [r7, #24]
 8007182:	68f8      	ldr	r0, [r7, #12]
 8007184:	f000 f9bc 	bl	8007500 <SUBGHZSPI_Receive>
      pData++;
 8007188:	69bb      	ldr	r3, [r7, #24]
 800718a:	3301      	adds	r3, #1
 800718c:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 800718e:	8afb      	ldrh	r3, [r7, #22]
 8007190:	3301      	adds	r3, #1
 8007192:	82fb      	strh	r3, [r7, #22]
 8007194:	8afa      	ldrh	r2, [r7, #22]
 8007196:	893b      	ldrh	r3, [r7, #8]
 8007198:	429a      	cmp	r2, r3
 800719a:	d3f1      	bcc.n	8007180 <HAL_SUBGHZ_ExecGetCmd+0x56>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800719c:	f7ff fdc2 	bl	8006d24 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80071a0:	68f8      	ldr	r0, [r7, #12]
 80071a2:	f000 fa29 	bl	80075f8 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	689b      	ldr	r3, [r3, #8]
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d002      	beq.n	80071b4 <HAL_SUBGHZ_ExecGetCmd+0x8a>
    {
      status = HAL_ERROR;
 80071ae:	2301      	movs	r3, #1
 80071b0:	77fb      	strb	r3, [r7, #31]
 80071b2:	e001      	b.n	80071b8 <HAL_SUBGHZ_ExecGetCmd+0x8e>
    }
    else
    {
      status = HAL_OK;
 80071b4:	2300      	movs	r3, #0
 80071b6:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	2201      	movs	r2, #1
 80071bc:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	2200      	movs	r2, #0
 80071c2:	715a      	strb	r2, [r3, #5]

    return status;
 80071c4:	7ffb      	ldrb	r3, [r7, #31]
 80071c6:	e000      	b.n	80071ca <HAL_SUBGHZ_ExecGetCmd+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80071c8:	2302      	movs	r3, #2
  }
}
 80071ca:	4618      	mov	r0, r3
 80071cc:	3720      	adds	r7, #32
 80071ce:	46bd      	mov	sp, r7
 80071d0:	bd80      	pop	{r7, pc}

080071d2 <HAL_SUBGHZ_WriteBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                         uint8_t Offset,
                                         uint8_t *pBuffer,
                                         uint16_t Size)
{
 80071d2:	b580      	push	{r7, lr}
 80071d4:	b086      	sub	sp, #24
 80071d6:	af00      	add	r7, sp, #0
 80071d8:	60f8      	str	r0, [r7, #12]
 80071da:	607a      	str	r2, [r7, #4]
 80071dc:	461a      	mov	r2, r3
 80071de:	460b      	mov	r3, r1
 80071e0:	72fb      	strb	r3, [r7, #11]
 80071e2:	4613      	mov	r3, r2
 80071e4:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	799b      	ldrb	r3, [r3, #6]
 80071ea:	b2db      	uxtb	r3, r3
 80071ec:	2b01      	cmp	r3, #1
 80071ee:	d13e      	bne.n	800726e <HAL_SUBGHZ_WriteBuffer+0x9c>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	795b      	ldrb	r3, [r3, #5]
 80071f4:	2b01      	cmp	r3, #1
 80071f6:	d101      	bne.n	80071fc <HAL_SUBGHZ_WriteBuffer+0x2a>
 80071f8:	2302      	movs	r3, #2
 80071fa:	e039      	b.n	8007270 <HAL_SUBGHZ_WriteBuffer+0x9e>
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	2201      	movs	r2, #1
 8007200:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8007202:	68f8      	ldr	r0, [r7, #12]
 8007204:	f000 f9d4 	bl	80075b0 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8007208:	f7ff fd9c 	bl	8006d44 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 800720c:	210e      	movs	r1, #14
 800720e:	68f8      	ldr	r0, [r7, #12]
 8007210:	f000 f920 	bl	8007454 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8007214:	7afb      	ldrb	r3, [r7, #11]
 8007216:	4619      	mov	r1, r3
 8007218:	68f8      	ldr	r0, [r7, #12]
 800721a:	f000 f91b 	bl	8007454 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 800721e:	2300      	movs	r3, #0
 8007220:	82bb      	strh	r3, [r7, #20]
 8007222:	e00a      	b.n	800723a <HAL_SUBGHZ_WriteBuffer+0x68>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8007224:	8abb      	ldrh	r3, [r7, #20]
 8007226:	687a      	ldr	r2, [r7, #4]
 8007228:	4413      	add	r3, r2
 800722a:	781b      	ldrb	r3, [r3, #0]
 800722c:	4619      	mov	r1, r3
 800722e:	68f8      	ldr	r0, [r7, #12]
 8007230:	f000 f910 	bl	8007454 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8007234:	8abb      	ldrh	r3, [r7, #20]
 8007236:	3301      	adds	r3, #1
 8007238:	82bb      	strh	r3, [r7, #20]
 800723a:	8aba      	ldrh	r2, [r7, #20]
 800723c:	893b      	ldrh	r3, [r7, #8]
 800723e:	429a      	cmp	r2, r3
 8007240:	d3f0      	bcc.n	8007224 <HAL_SUBGHZ_WriteBuffer+0x52>
    }
    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8007242:	f7ff fd6f 	bl	8006d24 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8007246:	68f8      	ldr	r0, [r7, #12]
 8007248:	f000 f9d6 	bl	80075f8 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	689b      	ldr	r3, [r3, #8]
 8007250:	2b00      	cmp	r3, #0
 8007252:	d002      	beq.n	800725a <HAL_SUBGHZ_WriteBuffer+0x88>
    {
      status = HAL_ERROR;
 8007254:	2301      	movs	r3, #1
 8007256:	75fb      	strb	r3, [r7, #23]
 8007258:	e001      	b.n	800725e <HAL_SUBGHZ_WriteBuffer+0x8c>
    }
    else
    {
      status = HAL_OK;
 800725a:	2300      	movs	r3, #0
 800725c:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	2201      	movs	r2, #1
 8007262:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	2200      	movs	r2, #0
 8007268:	715a      	strb	r2, [r3, #5]

    return status;
 800726a:	7dfb      	ldrb	r3, [r7, #23]
 800726c:	e000      	b.n	8007270 <HAL_SUBGHZ_WriteBuffer+0x9e>
  }
  else
  {
    return HAL_BUSY;
 800726e:	2302      	movs	r3, #2
  }
}
 8007270:	4618      	mov	r0, r3
 8007272:	3718      	adds	r7, #24
 8007274:	46bd      	mov	sp, r7
 8007276:	bd80      	pop	{r7, pc}

08007278 <HAL_SUBGHZ_ReadBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                        uint8_t Offset,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8007278:	b580      	push	{r7, lr}
 800727a:	b088      	sub	sp, #32
 800727c:	af00      	add	r7, sp, #0
 800727e:	60f8      	str	r0, [r7, #12]
 8007280:	607a      	str	r2, [r7, #4]
 8007282:	461a      	mov	r2, r3
 8007284:	460b      	mov	r3, r1
 8007286:	72fb      	strb	r3, [r7, #11]
 8007288:	4613      	mov	r3, r2
 800728a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	799b      	ldrb	r3, [r3, #6]
 8007294:	b2db      	uxtb	r3, r3
 8007296:	2b01      	cmp	r3, #1
 8007298:	d141      	bne.n	800731e <HAL_SUBGHZ_ReadBuffer+0xa6>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	795b      	ldrb	r3, [r3, #5]
 800729e:	2b01      	cmp	r3, #1
 80072a0:	d101      	bne.n	80072a6 <HAL_SUBGHZ_ReadBuffer+0x2e>
 80072a2:	2302      	movs	r3, #2
 80072a4:	e03c      	b.n	8007320 <HAL_SUBGHZ_ReadBuffer+0xa8>
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	2201      	movs	r2, #1
 80072aa:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80072ac:	68f8      	ldr	r0, [r7, #12]
 80072ae:	f000 f97f 	bl	80075b0 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80072b2:	f7ff fd47 	bl	8006d44 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 80072b6:	211e      	movs	r1, #30
 80072b8:	68f8      	ldr	r0, [r7, #12]
 80072ba:	f000 f8cb 	bl	8007454 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 80072be:	7afb      	ldrb	r3, [r7, #11]
 80072c0:	4619      	mov	r1, r3
 80072c2:	68f8      	ldr	r0, [r7, #12]
 80072c4:	f000 f8c6 	bl	8007454 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 80072c8:	2100      	movs	r1, #0
 80072ca:	68f8      	ldr	r0, [r7, #12]
 80072cc:	f000 f8c2 	bl	8007454 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 80072d0:	2300      	movs	r3, #0
 80072d2:	82fb      	strh	r3, [r7, #22]
 80072d4:	e009      	b.n	80072ea <HAL_SUBGHZ_ReadBuffer+0x72>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 80072d6:	69b9      	ldr	r1, [r7, #24]
 80072d8:	68f8      	ldr	r0, [r7, #12]
 80072da:	f000 f911 	bl	8007500 <SUBGHZSPI_Receive>
      pData++;
 80072de:	69bb      	ldr	r3, [r7, #24]
 80072e0:	3301      	adds	r3, #1
 80072e2:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 80072e4:	8afb      	ldrh	r3, [r7, #22]
 80072e6:	3301      	adds	r3, #1
 80072e8:	82fb      	strh	r3, [r7, #22]
 80072ea:	8afa      	ldrh	r2, [r7, #22]
 80072ec:	893b      	ldrh	r3, [r7, #8]
 80072ee:	429a      	cmp	r2, r3
 80072f0:	d3f1      	bcc.n	80072d6 <HAL_SUBGHZ_ReadBuffer+0x5e>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80072f2:	f7ff fd17 	bl	8006d24 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80072f6:	68f8      	ldr	r0, [r7, #12]
 80072f8:	f000 f97e 	bl	80075f8 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	689b      	ldr	r3, [r3, #8]
 8007300:	2b00      	cmp	r3, #0
 8007302:	d002      	beq.n	800730a <HAL_SUBGHZ_ReadBuffer+0x92>
    {
      status = HAL_ERROR;
 8007304:	2301      	movs	r3, #1
 8007306:	77fb      	strb	r3, [r7, #31]
 8007308:	e001      	b.n	800730e <HAL_SUBGHZ_ReadBuffer+0x96>
    }
    else
    {
      status = HAL_OK;
 800730a:	2300      	movs	r3, #0
 800730c:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	2201      	movs	r2, #1
 8007312:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	2200      	movs	r2, #0
 8007318:	715a      	strb	r2, [r3, #5]

    return status;
 800731a:	7ffb      	ldrb	r3, [r7, #31]
 800731c:	e000      	b.n	8007320 <HAL_SUBGHZ_ReadBuffer+0xa8>
  }
  else
  {
    return HAL_BUSY;
 800731e:	2302      	movs	r3, #2
  }
}
 8007320:	4618      	mov	r0, r3
 8007322:	3720      	adds	r7, #32
 8007324:	46bd      	mov	sp, r7
 8007326:	bd80      	pop	{r7, pc}

08007328 <HAL_SUBGHZ_IRQHandler>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *               the configuration information for the specified SUBGHZ module.
  * @retval None
  */
void HAL_SUBGHZ_IRQHandler(SUBGHZ_HandleTypeDef *hsubghz)
{
 8007328:	b580      	push	{r7, lr}
 800732a:	b084      	sub	sp, #16
 800732c:	af00      	add	r7, sp, #0
 800732e:	6078      	str	r0, [r7, #4]
  uint8_t tmpisr[2U] = {0U};
 8007330:	2300      	movs	r3, #0
 8007332:	81bb      	strh	r3, [r7, #12]
  uint16_t itsource;

  /* Retrieve Interrupts from SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2U);
 8007334:	f107 020c 	add.w	r2, r7, #12
 8007338:	2302      	movs	r3, #2
 800733a:	2112      	movs	r1, #18
 800733c:	6878      	ldr	r0, [r7, #4]
 800733e:	f7ff fef4 	bl	800712a <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0U];
 8007342:	7b3b      	ldrb	r3, [r7, #12]
 8007344:	81fb      	strh	r3, [r7, #14]
  itsource = (itsource << 8U) | tmpisr[1U];
 8007346:	89fb      	ldrh	r3, [r7, #14]
 8007348:	021b      	lsls	r3, r3, #8
 800734a:	b21a      	sxth	r2, r3
 800734c:	7b7b      	ldrb	r3, [r7, #13]
 800734e:	b21b      	sxth	r3, r3
 8007350:	4313      	orrs	r3, r2
 8007352:	b21b      	sxth	r3, r3
 8007354:	81fb      	strh	r3, [r7, #14]

  /* Packet transmission completed Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 8007356:	89fb      	ldrh	r3, [r7, #14]
 8007358:	f003 0301 	and.w	r3, r3, #1
 800735c:	2b00      	cmp	r3, #0
 800735e:	d002      	beq.n	8007366 <HAL_SUBGHZ_IRQHandler+0x3e>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->TxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 8007360:	6878      	ldr	r0, [r7, #4]
 8007362:	f012 fc0f 	bl	8019b84 <HAL_SUBGHZ_TxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Packet received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET)
 8007366:	89fb      	ldrh	r3, [r7, #14]
 8007368:	f003 0302 	and.w	r3, r3, #2
 800736c:	2b00      	cmp	r3, #0
 800736e:	d002      	beq.n	8007376 <HAL_SUBGHZ_IRQHandler+0x4e>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 8007370:	6878      	ldr	r0, [r7, #4]
 8007372:	f012 fc15 	bl	8019ba0 <HAL_SUBGHZ_RxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Preamble Detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 8007376:	89fb      	ldrh	r3, [r7, #14]
 8007378:	f003 0304 	and.w	r3, r3, #4
 800737c:	2b00      	cmp	r3, #0
 800737e:	d002      	beq.n	8007386 <HAL_SUBGHZ_IRQHandler+0x5e>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->PreambleDetectedCallback(hsubghz);
#else
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 8007380:	6878      	ldr	r0, [r7, #4]
 8007382:	f012 fc65 	bl	8019c50 <HAL_SUBGHZ_PreambleDetectedCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /*  Valid sync word detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 8007386:	89fb      	ldrh	r3, [r7, #14]
 8007388:	f003 0308 	and.w	r3, r3, #8
 800738c:	2b00      	cmp	r3, #0
 800738e:	d002      	beq.n	8007396 <HAL_SUBGHZ_IRQHandler+0x6e>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->SyncWordValidCallback(hsubghz);
#else
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 8007390:	6878      	ldr	r0, [r7, #4]
 8007392:	f012 fc6b 	bl	8019c6c <HAL_SUBGHZ_SyncWordValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Valid LoRa header received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 8007396:	89fb      	ldrh	r3, [r7, #14]
 8007398:	f003 0310 	and.w	r3, r3, #16
 800739c:	2b00      	cmp	r3, #0
 800739e:	d002      	beq.n	80073a6 <HAL_SUBGHZ_IRQHandler+0x7e>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderValidCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 80073a0:	6878      	ldr	r0, [r7, #4]
 80073a2:	f012 fc71 	bl	8019c88 <HAL_SUBGHZ_HeaderValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LoRa header CRC error Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 80073a6:	89fb      	ldrh	r3, [r7, #14]
 80073a8:	f003 0320 	and.w	r3, r3, #32
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d002      	beq.n	80073b6 <HAL_SUBGHZ_IRQHandler+0x8e>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 80073b0:	6878      	ldr	r0, [r7, #4]
 80073b2:	f012 fc3f 	bl	8019c34 <HAL_SUBGHZ_HeaderErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Wrong CRC received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 80073b6:	89fb      	ldrh	r3, [r7, #14]
 80073b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d002      	beq.n	80073c6 <HAL_SUBGHZ_IRQHandler+0x9e>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->CRCErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 80073c0:	6878      	ldr	r0, [r7, #4]
 80073c2:	f012 fbfb 	bl	8019bbc <HAL_SUBGHZ_CRCErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Channel activity detection finished Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 80073c6:	89fb      	ldrh	r3, [r7, #14]
 80073c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d00d      	beq.n	80073ec <HAL_SUBGHZ_IRQHandler+0xc4>
    {
      hsubghz->CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
    }
#else
    /* Channel activity Detected Interrupt */
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 80073d0:	89fb      	ldrh	r3, [r7, #14]
 80073d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d004      	beq.n	80073e4 <HAL_SUBGHZ_IRQHandler+0xbc>
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 80073da:	2101      	movs	r1, #1
 80073dc:	6878      	ldr	r0, [r7, #4]
 80073de:	f012 fbfb 	bl	8019bd8 <HAL_SUBGHZ_CADStatusCallback>
 80073e2:	e003      	b.n	80073ec <HAL_SUBGHZ_IRQHandler+0xc4>
    }
    else
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 80073e4:	2100      	movs	r1, #0
 80073e6:	6878      	ldr	r0, [r7, #4]
 80073e8:	f012 fbf6 	bl	8019bd8 <HAL_SUBGHZ_CADStatusCallback>
    }
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Rx or Tx Timeout Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 80073ec:	89fb      	ldrh	r3, [r7, #14]
 80073ee:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d002      	beq.n	80073fc <HAL_SUBGHZ_IRQHandler+0xd4>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxTxTimeoutCallback(hsubghz);
#else
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 80073f6:	6878      	ldr	r0, [r7, #4]
 80073f8:	f012 fc0c 	bl	8019c14 <HAL_SUBGHZ_RxTxTimeoutCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Clear SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2);
 80073fc:	f107 020c 	add.w	r2, r7, #12
 8007400:	2302      	movs	r3, #2
 8007402:	2102      	movs	r1, #2
 8007404:	6878      	ldr	r0, [r7, #4]
 8007406:	f7ff fe31 	bl	800706c <HAL_SUBGHZ_ExecSetCmd>
}
 800740a:	bf00      	nop
 800740c:	3710      	adds	r7, #16
 800740e:	46bd      	mov	sp, r7
 8007410:	bd80      	pop	{r7, pc}
	...

08007414 <SUBGHZSPI_Init>:
  * @brief  Initializes the SUBGHZSPI peripheral
  * @param  BaudratePrescaler SPI Baudrate prescaler
  * @retval None
  */
void SUBGHZSPI_Init(uint32_t BaudratePrescaler)
{
 8007414:	b480      	push	{r7}
 8007416:	b083      	sub	sp, #12
 8007418:	af00      	add	r7, sp, #0
 800741a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 800741c:	4b0c      	ldr	r3, [pc, #48]	@ (8007450 <SUBGHZSPI_Init+0x3c>)
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	4a0b      	ldr	r2, [pc, #44]	@ (8007450 <SUBGHZSPI_Init+0x3c>)
 8007422:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007426:	6013      	str	r3, [r2, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 8007428:	4a09      	ldr	r2, [pc, #36]	@ (8007450 <SUBGHZSPI_Init+0x3c>)
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	f443 7341 	orr.w	r3, r3, #772	@ 0x304
 8007430:	6013      	str	r3, [r2, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 8007432:	4b07      	ldr	r3, [pc, #28]	@ (8007450 <SUBGHZSPI_Init+0x3c>)
 8007434:	f44f 52b8 	mov.w	r2, #5888	@ 0x1700
 8007438:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 800743a:	4b05      	ldr	r3, [pc, #20]	@ (8007450 <SUBGHZSPI_Init+0x3c>)
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	4a04      	ldr	r2, [pc, #16]	@ (8007450 <SUBGHZSPI_Init+0x3c>)
 8007440:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007444:	6013      	str	r3, [r2, #0]
}
 8007446:	bf00      	nop
 8007448:	370c      	adds	r7, #12
 800744a:	46bd      	mov	sp, r7
 800744c:	bc80      	pop	{r7}
 800744e:	4770      	bx	lr
 8007450:	58010000 	.word	0x58010000

08007454 <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 8007454:	b480      	push	{r7}
 8007456:	b087      	sub	sp, #28
 8007458:	af00      	add	r7, sp, #0
 800745a:	6078      	str	r0, [r7, #4]
 800745c:	460b      	mov	r3, r1
 800745e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8007460:	2300      	movs	r3, #0
 8007462:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8007464:	4b23      	ldr	r3, [pc, #140]	@ (80074f4 <SUBGHZSPI_Transmit+0xa0>)
 8007466:	681a      	ldr	r2, [r3, #0]
 8007468:	4613      	mov	r3, r2
 800746a:	00db      	lsls	r3, r3, #3
 800746c:	1a9b      	subs	r3, r3, r2
 800746e:	009b      	lsls	r3, r3, #2
 8007470:	0cdb      	lsrs	r3, r3, #19
 8007472:	2264      	movs	r2, #100	@ 0x64
 8007474:	fb02 f303 	mul.w	r3, r2, r3
 8007478:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	2b00      	cmp	r3, #0
 800747e:	d105      	bne.n	800748c <SUBGHZSPI_Transmit+0x38>
    {
      status = HAL_ERROR;
 8007480:	2301      	movs	r3, #1
 8007482:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	2201      	movs	r2, #1
 8007488:	609a      	str	r2, [r3, #8]
      break;
 800748a:	e008      	b.n	800749e <SUBGHZSPI_Transmit+0x4a>
    }
    count--;
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	3b01      	subs	r3, #1
 8007490:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8007492:	4b19      	ldr	r3, [pc, #100]	@ (80074f8 <SUBGHZSPI_Transmit+0xa4>)
 8007494:	689b      	ldr	r3, [r3, #8]
 8007496:	f003 0302 	and.w	r3, r3, #2
 800749a:	2b02      	cmp	r3, #2
 800749c:	d1ed      	bne.n	800747a <SUBGHZSPI_Transmit+0x26>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 800749e:	4b17      	ldr	r3, [pc, #92]	@ (80074fc <SUBGHZSPI_Transmit+0xa8>)
 80074a0:	613b      	str	r3, [r7, #16]
  *spidr = Data;
 80074a2:	693b      	ldr	r3, [r7, #16]
 80074a4:	78fa      	ldrb	r2, [r7, #3]
 80074a6:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80074a8:	4b12      	ldr	r3, [pc, #72]	@ (80074f4 <SUBGHZSPI_Transmit+0xa0>)
 80074aa:	681a      	ldr	r2, [r3, #0]
 80074ac:	4613      	mov	r3, r2
 80074ae:	00db      	lsls	r3, r3, #3
 80074b0:	1a9b      	subs	r3, r3, r2
 80074b2:	009b      	lsls	r3, r3, #2
 80074b4:	0cdb      	lsrs	r3, r3, #19
 80074b6:	2264      	movs	r2, #100	@ 0x64
 80074b8:	fb02 f303 	mul.w	r3, r2, r3
 80074bc:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d105      	bne.n	80074d0 <SUBGHZSPI_Transmit+0x7c>
    {
      status = HAL_ERROR;
 80074c4:	2301      	movs	r3, #1
 80074c6:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	2201      	movs	r2, #1
 80074cc:	609a      	str	r2, [r3, #8]
      break;
 80074ce:	e008      	b.n	80074e2 <SUBGHZSPI_Transmit+0x8e>
    }
    count--;
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	3b01      	subs	r3, #1
 80074d4:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 80074d6:	4b08      	ldr	r3, [pc, #32]	@ (80074f8 <SUBGHZSPI_Transmit+0xa4>)
 80074d8:	689b      	ldr	r3, [r3, #8]
 80074da:	f003 0301 	and.w	r3, r3, #1
 80074de:	2b01      	cmp	r3, #1
 80074e0:	d1ed      	bne.n	80074be <SUBGHZSPI_Transmit+0x6a>

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 80074e2:	4b05      	ldr	r3, [pc, #20]	@ (80074f8 <SUBGHZSPI_Transmit+0xa4>)
 80074e4:	68db      	ldr	r3, [r3, #12]

  return status;
 80074e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80074e8:	4618      	mov	r0, r3
 80074ea:	371c      	adds	r7, #28
 80074ec:	46bd      	mov	sp, r7
 80074ee:	bc80      	pop	{r7}
 80074f0:	4770      	bx	lr
 80074f2:	bf00      	nop
 80074f4:	20000000 	.word	0x20000000
 80074f8:	58010000 	.word	0x58010000
 80074fc:	5801000c 	.word	0x5801000c

08007500 <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 8007500:	b480      	push	{r7}
 8007502:	b087      	sub	sp, #28
 8007504:	af00      	add	r7, sp, #0
 8007506:	6078      	str	r0, [r7, #4]
 8007508:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800750a:	2300      	movs	r3, #0
 800750c:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800750e:	4b25      	ldr	r3, [pc, #148]	@ (80075a4 <SUBGHZSPI_Receive+0xa4>)
 8007510:	681a      	ldr	r2, [r3, #0]
 8007512:	4613      	mov	r3, r2
 8007514:	00db      	lsls	r3, r3, #3
 8007516:	1a9b      	subs	r3, r3, r2
 8007518:	009b      	lsls	r3, r3, #2
 800751a:	0cdb      	lsrs	r3, r3, #19
 800751c:	2264      	movs	r2, #100	@ 0x64
 800751e:	fb02 f303 	mul.w	r3, r2, r3
 8007522:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	2b00      	cmp	r3, #0
 8007528:	d105      	bne.n	8007536 <SUBGHZSPI_Receive+0x36>
    {
      status = HAL_ERROR;
 800752a:	2301      	movs	r3, #1
 800752c:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	2201      	movs	r2, #1
 8007532:	609a      	str	r2, [r3, #8]
      break;
 8007534:	e008      	b.n	8007548 <SUBGHZSPI_Receive+0x48>
    }
    count--;
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	3b01      	subs	r3, #1
 800753a:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 800753c:	4b1a      	ldr	r3, [pc, #104]	@ (80075a8 <SUBGHZSPI_Receive+0xa8>)
 800753e:	689b      	ldr	r3, [r3, #8]
 8007540:	f003 0302 	and.w	r3, r3, #2
 8007544:	2b02      	cmp	r3, #2
 8007546:	d1ed      	bne.n	8007524 <SUBGHZSPI_Receive+0x24>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8007548:	4b18      	ldr	r3, [pc, #96]	@ (80075ac <SUBGHZSPI_Receive+0xac>)
 800754a:	613b      	str	r3, [r7, #16]
  *spidr = SUBGHZ_DUMMY_DATA;
 800754c:	693b      	ldr	r3, [r7, #16]
 800754e:	22ff      	movs	r2, #255	@ 0xff
 8007550:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8007552:	4b14      	ldr	r3, [pc, #80]	@ (80075a4 <SUBGHZSPI_Receive+0xa4>)
 8007554:	681a      	ldr	r2, [r3, #0]
 8007556:	4613      	mov	r3, r2
 8007558:	00db      	lsls	r3, r3, #3
 800755a:	1a9b      	subs	r3, r3, r2
 800755c:	009b      	lsls	r3, r3, #2
 800755e:	0cdb      	lsrs	r3, r3, #19
 8007560:	2264      	movs	r2, #100	@ 0x64
 8007562:	fb02 f303 	mul.w	r3, r2, r3
 8007566:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	2b00      	cmp	r3, #0
 800756c:	d105      	bne.n	800757a <SUBGHZSPI_Receive+0x7a>
    {
      status = HAL_ERROR;
 800756e:	2301      	movs	r3, #1
 8007570:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	2201      	movs	r2, #1
 8007576:	609a      	str	r2, [r3, #8]
      break;
 8007578:	e008      	b.n	800758c <SUBGHZSPI_Receive+0x8c>
    }
    count--;
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	3b01      	subs	r3, #1
 800757e:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8007580:	4b09      	ldr	r3, [pc, #36]	@ (80075a8 <SUBGHZSPI_Receive+0xa8>)
 8007582:	689b      	ldr	r3, [r3, #8]
 8007584:	f003 0301 	and.w	r3, r3, #1
 8007588:	2b01      	cmp	r3, #1
 800758a:	d1ed      	bne.n	8007568 <SUBGHZSPI_Receive+0x68>

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 800758c:	4b06      	ldr	r3, [pc, #24]	@ (80075a8 <SUBGHZSPI_Receive+0xa8>)
 800758e:	68db      	ldr	r3, [r3, #12]
 8007590:	b2da      	uxtb	r2, r3
 8007592:	683b      	ldr	r3, [r7, #0]
 8007594:	701a      	strb	r2, [r3, #0]

  return status;
 8007596:	7dfb      	ldrb	r3, [r7, #23]
}
 8007598:	4618      	mov	r0, r3
 800759a:	371c      	adds	r7, #28
 800759c:	46bd      	mov	sp, r7
 800759e:	bc80      	pop	{r7}
 80075a0:	4770      	bx	lr
 80075a2:	bf00      	nop
 80075a4:	20000000 	.word	0x20000000
 80075a8:	58010000 	.word	0x58010000
 80075ac:	5801000c 	.word	0x5801000c

080075b0 <SUBGHZ_CheckDeviceReady>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_CheckDeviceReady(SUBGHZ_HandleTypeDef *hsubghz)
{
 80075b0:	b580      	push	{r7, lr}
 80075b2:	b084      	sub	sp, #16
 80075b4:	af00      	add	r7, sp, #0
 80075b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  /* Wakeup radio in case of sleep mode: Select-Unselect radio */
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	791b      	ldrb	r3, [r3, #4]
 80075bc:	2b01      	cmp	r3, #1
 80075be:	d111      	bne.n	80075e4 <SUBGHZ_CheckDeviceReady+0x34>
  {
    /* Initialize NSS switch Delay */
    count  = SUBGHZ_NSS_LOOP_TIME;
 80075c0:	4b0c      	ldr	r3, [pc, #48]	@ (80075f4 <SUBGHZ_CheckDeviceReady+0x44>)
 80075c2:	681a      	ldr	r2, [r3, #0]
 80075c4:	4613      	mov	r3, r2
 80075c6:	005b      	lsls	r3, r3, #1
 80075c8:	4413      	add	r3, r2
 80075ca:	00db      	lsls	r3, r3, #3
 80075cc:	0c1b      	lsrs	r3, r3, #16
 80075ce:	60fb      	str	r3, [r7, #12]

    /* NSS = 0; */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80075d0:	f7ff fbb8 	bl	8006d44 <LL_PWR_SelectSUBGHZSPI_NSS>

    /* Wait Radio wakeup */
    do
    {
      count--;
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	3b01      	subs	r3, #1
 80075d8:	60fb      	str	r3, [r7, #12]
    } while (count != 0UL);
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d1f9      	bne.n	80075d4 <SUBGHZ_CheckDeviceReady+0x24>

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80075e0:	f7ff fba0 	bl	8006d24 <LL_PWR_UnselectSUBGHZSPI_NSS>
  }
  return (SUBGHZ_WaitOnBusy(hsubghz));
 80075e4:	6878      	ldr	r0, [r7, #4]
 80075e6:	f000 f807 	bl	80075f8 <SUBGHZ_WaitOnBusy>
 80075ea:	4603      	mov	r3, r0
}
 80075ec:	4618      	mov	r0, r3
 80075ee:	3710      	adds	r7, #16
 80075f0:	46bd      	mov	sp, r7
 80075f2:	bd80      	pop	{r7, pc}
 80075f4:	20000000 	.word	0x20000000

080075f8 <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 80075f8:	b580      	push	{r7, lr}
 80075fa:	b086      	sub	sp, #24
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
 8007600:	2300      	movs	r3, #0
 8007602:	75fb      	strb	r3, [r7, #23]
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 8007604:	4b12      	ldr	r3, [pc, #72]	@ (8007650 <SUBGHZ_WaitOnBusy+0x58>)
 8007606:	681a      	ldr	r2, [r3, #0]
 8007608:	4613      	mov	r3, r2
 800760a:	005b      	lsls	r3, r3, #1
 800760c:	4413      	add	r3, r2
 800760e:	00db      	lsls	r3, r3, #3
 8007610:	0d1b      	lsrs	r3, r3, #20
 8007612:	2264      	movs	r2, #100	@ 0x64
 8007614:	fb02 f303 	mul.w	r3, r2, r3
 8007618:	60fb      	str	r3, [r7, #12]

  /* Wait until Busy signal is set */
  do
  {
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();
 800761a:	f7ff fbc1 	bl	8006da0 <LL_PWR_IsActiveFlag_RFBUSYMS>
 800761e:	6138      	str	r0, [r7, #16]

    if (count == 0U)
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	2b00      	cmp	r3, #0
 8007624:	d105      	bne.n	8007632 <SUBGHZ_WaitOnBusy+0x3a>
    {
      status  = HAL_ERROR;
 8007626:	2301      	movs	r3, #1
 8007628:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	2202      	movs	r2, #2
 800762e:	609a      	str	r2, [r3, #8]
      break;
 8007630:	e009      	b.n	8007646 <SUBGHZ_WaitOnBusy+0x4e>
    }
    count--;
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	3b01      	subs	r3, #1
 8007636:	60fb      	str	r3, [r7, #12]
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 8007638:	f7ff fba0 	bl	8006d7c <LL_PWR_IsActiveFlag_RFBUSYS>
 800763c:	4602      	mov	r2, r0
 800763e:	693b      	ldr	r3, [r7, #16]
 8007640:	4013      	ands	r3, r2
 8007642:	2b01      	cmp	r3, #1
 8007644:	d0e9      	beq.n	800761a <SUBGHZ_WaitOnBusy+0x22>

  return status;
 8007646:	7dfb      	ldrb	r3, [r7, #23]
}
 8007648:	4618      	mov	r0, r3
 800764a:	3718      	adds	r7, #24
 800764c:	46bd      	mov	sp, r7
 800764e:	bd80      	pop	{r7, pc}
 8007650:	20000000 	.word	0x20000000

08007654 <LL_RCC_GetUSARTClockSource>:
{
 8007654:	b480      	push	{r7}
 8007656:	b083      	sub	sp, #12
 8007658:	af00      	add	r7, sp, #0
 800765a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 800765c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007660:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	401a      	ands	r2, r3
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	041b      	lsls	r3, r3, #16
 800766c:	4313      	orrs	r3, r2
}
 800766e:	4618      	mov	r0, r3
 8007670:	370c      	adds	r7, #12
 8007672:	46bd      	mov	sp, r7
 8007674:	bc80      	pop	{r7}
 8007676:	4770      	bx	lr

08007678 <LL_RCC_GetLPUARTClockSource>:
{
 8007678:	b480      	push	{r7}
 800767a:	b083      	sub	sp, #12
 800767c:	af00      	add	r7, sp, #0
 800767e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8007680:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007684:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	4013      	ands	r3, r2
}
 800768c:	4618      	mov	r0, r3
 800768e:	370c      	adds	r7, #12
 8007690:	46bd      	mov	sp, r7
 8007692:	bc80      	pop	{r7}
 8007694:	4770      	bx	lr

08007696 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007696:	b580      	push	{r7, lr}
 8007698:	b082      	sub	sp, #8
 800769a:	af00      	add	r7, sp, #0
 800769c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d101      	bne.n	80076a8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80076a4:	2301      	movs	r3, #1
 80076a6:	e042      	b.n	800772e <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d106      	bne.n	80076c0 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	2200      	movs	r2, #0
 80076b6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80076ba:	6878      	ldr	r0, [r7, #4]
 80076bc:	f7fa feae 	bl	800241c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	2224      	movs	r2, #36	@ 0x24
 80076c4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  __HAL_UART_DISABLE(huart);
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	681a      	ldr	r2, [r3, #0]
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	f022 0201 	bic.w	r2, r2, #1
 80076d6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80076d8:	6878      	ldr	r0, [r7, #4]
 80076da:	f000 fc4b 	bl	8007f74 <UART_SetConfig>
 80076de:	4603      	mov	r3, r0
 80076e0:	2b01      	cmp	r3, #1
 80076e2:	d101      	bne.n	80076e8 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80076e4:	2301      	movs	r3, #1
 80076e6:	e022      	b.n	800772e <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d002      	beq.n	80076f6 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80076f0:	6878      	ldr	r0, [r7, #4]
 80076f2:	f000 feb3 	bl	800845c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	685a      	ldr	r2, [r3, #4]
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007704:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	689a      	ldr	r2, [r3, #8]
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007714:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	681a      	ldr	r2, [r3, #0]
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	f042 0201 	orr.w	r2, r2, #1
 8007724:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007726:	6878      	ldr	r0, [r7, #4]
 8007728:	f000 ff39 	bl	800859e <UART_CheckIdleState>
 800772c:	4603      	mov	r3, r0
}
 800772e:	4618      	mov	r0, r3
 8007730:	3708      	adds	r7, #8
 8007732:	46bd      	mov	sp, r7
 8007734:	bd80      	pop	{r7, pc}
	...

08007738 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007738:	b580      	push	{r7, lr}
 800773a:	b08a      	sub	sp, #40	@ 0x28
 800773c:	af00      	add	r7, sp, #0
 800773e:	60f8      	str	r0, [r7, #12]
 8007740:	60b9      	str	r1, [r7, #8]
 8007742:	4613      	mov	r3, r2
 8007744:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800774c:	2b20      	cmp	r3, #32
 800774e:	d142      	bne.n	80077d6 <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8007750:	68bb      	ldr	r3, [r7, #8]
 8007752:	2b00      	cmp	r3, #0
 8007754:	d002      	beq.n	800775c <HAL_UART_Receive_IT+0x24>
 8007756:	88fb      	ldrh	r3, [r7, #6]
 8007758:	2b00      	cmp	r3, #0
 800775a:	d101      	bne.n	8007760 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800775c:	2301      	movs	r3, #1
 800775e:	e03b      	b.n	80077d8 <HAL_UART_Receive_IT+0xa0>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    __HAL_LOCK(huart);
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8007766:	2b01      	cmp	r3, #1
 8007768:	d101      	bne.n	800776e <HAL_UART_Receive_IT+0x36>
 800776a:	2302      	movs	r3, #2
 800776c:	e034      	b.n	80077d8 <HAL_UART_Receive_IT+0xa0>
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	2201      	movs	r2, #1
 8007772:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	2200      	movs	r2, #0
 800777a:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	4a17      	ldr	r2, [pc, #92]	@ (80077e0 <HAL_UART_Receive_IT+0xa8>)
 8007782:	4293      	cmp	r3, r2
 8007784:	d01f      	beq.n	80077c6 <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	685b      	ldr	r3, [r3, #4]
 800778c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007790:	2b00      	cmp	r3, #0
 8007792:	d018      	beq.n	80077c6 <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800779a:	697b      	ldr	r3, [r7, #20]
 800779c:	e853 3f00 	ldrex	r3, [r3]
 80077a0:	613b      	str	r3, [r7, #16]
   return(result);
 80077a2:	693b      	ldr	r3, [r7, #16]
 80077a4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80077a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	461a      	mov	r2, r3
 80077b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077b2:	623b      	str	r3, [r7, #32]
 80077b4:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077b6:	69f9      	ldr	r1, [r7, #28]
 80077b8:	6a3a      	ldr	r2, [r7, #32]
 80077ba:	e841 2300 	strex	r3, r2, [r1]
 80077be:	61bb      	str	r3, [r7, #24]
   return(result);
 80077c0:	69bb      	ldr	r3, [r7, #24]
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d1e6      	bne.n	8007794 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return(UART_Start_Receive_IT(huart, pData, Size));
 80077c6:	88fb      	ldrh	r3, [r7, #6]
 80077c8:	461a      	mov	r2, r3
 80077ca:	68b9      	ldr	r1, [r7, #8]
 80077cc:	68f8      	ldr	r0, [r7, #12]
 80077ce:	f000 fff9 	bl	80087c4 <UART_Start_Receive_IT>
 80077d2:	4603      	mov	r3, r0
 80077d4:	e000      	b.n	80077d8 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80077d6:	2302      	movs	r3, #2
  }
}
 80077d8:	4618      	mov	r0, r3
 80077da:	3728      	adds	r7, #40	@ 0x28
 80077dc:	46bd      	mov	sp, r7
 80077de:	bd80      	pop	{r7, pc}
 80077e0:	40008000 	.word	0x40008000

080077e4 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80077e4:	b580      	push	{r7, lr}
 80077e6:	b08a      	sub	sp, #40	@ 0x28
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	60f8      	str	r0, [r7, #12]
 80077ec:	60b9      	str	r1, [r7, #8]
 80077ee:	4613      	mov	r3, r2
 80077f0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80077f8:	2b20      	cmp	r3, #32
 80077fa:	d17a      	bne.n	80078f2 <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 80077fc:	68bb      	ldr	r3, [r7, #8]
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d002      	beq.n	8007808 <HAL_UART_Transmit_DMA+0x24>
 8007802:	88fb      	ldrh	r3, [r7, #6]
 8007804:	2b00      	cmp	r3, #0
 8007806:	d101      	bne.n	800780c <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8007808:	2301      	movs	r3, #1
 800780a:	e073      	b.n	80078f4 <HAL_UART_Transmit_DMA+0x110>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    __HAL_LOCK(huart);
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8007812:	2b01      	cmp	r3, #1
 8007814:	d101      	bne.n	800781a <HAL_UART_Transmit_DMA+0x36>
 8007816:	2302      	movs	r3, #2
 8007818:	e06c      	b.n	80078f4 <HAL_UART_Transmit_DMA+0x110>
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	2201      	movs	r2, #1
 800781e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    huart->pTxBuffPtr  = pData;
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	68ba      	ldr	r2, [r7, #8]
 8007826:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	88fa      	ldrh	r2, [r7, #6]
 800782c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	88fa      	ldrh	r2, [r7, #6]
 8007834:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	2200      	movs	r2, #0
 800783c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	2221      	movs	r2, #33	@ 0x21
 8007844:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    if (huart->hdmatx != NULL)
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800784c:	2b00      	cmp	r3, #0
 800784e:	d02c      	beq.n	80078aa <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007854:	4a29      	ldr	r2, [pc, #164]	@ (80078fc <HAL_UART_Transmit_DMA+0x118>)
 8007856:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800785c:	4a28      	ldr	r2, [pc, #160]	@ (8007900 <HAL_UART_Transmit_DMA+0x11c>)
 800785e:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007864:	4a27      	ldr	r2, [pc, #156]	@ (8007904 <HAL_UART_Transmit_DMA+0x120>)
 8007866:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800786c:	2200      	movs	r2, #0
 800786e:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	6f98      	ldr	r0, [r3, #120]	@ 0x78
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007878:	4619      	mov	r1, r3
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	3328      	adds	r3, #40	@ 0x28
 8007880:	461a      	mov	r2, r3
 8007882:	88fb      	ldrh	r3, [r7, #6]
 8007884:	f7fc fba6 	bl	8003fd4 <HAL_DMA_Start_IT>
 8007888:	4603      	mov	r3, r0
 800788a:	2b00      	cmp	r3, #0
 800788c:	d00d      	beq.n	80078aa <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	2210      	movs	r2, #16
 8007892:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        __HAL_UNLOCK(huart);
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	2200      	movs	r2, #0
 800789a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	2220      	movs	r2, #32
 80078a2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

        return HAL_ERROR;
 80078a6:	2301      	movs	r3, #1
 80078a8:	e024      	b.n	80078f4 <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	2240      	movs	r2, #64	@ 0x40
 80078b0:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	2200      	movs	r2, #0
 80078b6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	3308      	adds	r3, #8
 80078c0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078c2:	697b      	ldr	r3, [r7, #20]
 80078c4:	e853 3f00 	ldrex	r3, [r3]
 80078c8:	613b      	str	r3, [r7, #16]
   return(result);
 80078ca:	693b      	ldr	r3, [r7, #16]
 80078cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80078d0:	627b      	str	r3, [r7, #36]	@ 0x24
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	3308      	adds	r3, #8
 80078d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80078da:	623a      	str	r2, [r7, #32]
 80078dc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078de:	69f9      	ldr	r1, [r7, #28]
 80078e0:	6a3a      	ldr	r2, [r7, #32]
 80078e2:	e841 2300 	strex	r3, r2, [r1]
 80078e6:	61bb      	str	r3, [r7, #24]
   return(result);
 80078e8:	69bb      	ldr	r3, [r7, #24]
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d1e5      	bne.n	80078ba <HAL_UART_Transmit_DMA+0xd6>

    return HAL_OK;
 80078ee:	2300      	movs	r3, #0
 80078f0:	e000      	b.n	80078f4 <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 80078f2:	2302      	movs	r3, #2
  }
}
 80078f4:	4618      	mov	r0, r3
 80078f6:	3728      	adds	r7, #40	@ 0x28
 80078f8:	46bd      	mov	sp, r7
 80078fa:	bd80      	pop	{r7, pc}
 80078fc:	08008b5f 	.word	0x08008b5f
 8007900:	08008bf9 	.word	0x08008bf9
 8007904:	08008c15 	.word	0x08008c15

08007908 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007908:	b580      	push	{r7, lr}
 800790a:	b0ba      	sub	sp, #232	@ 0xe8
 800790c:	af00      	add	r7, sp, #0
 800790e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	69db      	ldr	r3, [r3, #28]
 8007916:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	689b      	ldr	r3, [r3, #8]
 800792a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800792e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8007932:	f640 030f 	movw	r3, #2063	@ 0x80f
 8007936:	4013      	ands	r3, r2
 8007938:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800793c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007940:	2b00      	cmp	r3, #0
 8007942:	d11b      	bne.n	800797c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007944:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007948:	f003 0320 	and.w	r3, r3, #32
 800794c:	2b00      	cmp	r3, #0
 800794e:	d015      	beq.n	800797c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007950:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007954:	f003 0320 	and.w	r3, r3, #32
 8007958:	2b00      	cmp	r3, #0
 800795a:	d105      	bne.n	8007968 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800795c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007960:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007964:	2b00      	cmp	r3, #0
 8007966:	d009      	beq.n	800797c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800796c:	2b00      	cmp	r3, #0
 800796e:	f000 82d6 	beq.w	8007f1e <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007976:	6878      	ldr	r0, [r7, #4]
 8007978:	4798      	blx	r3
      }
      return;
 800797a:	e2d0      	b.n	8007f1e <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800797c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007980:	2b00      	cmp	r3, #0
 8007982:	f000 811f 	beq.w	8007bc4 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8007986:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800798a:	4b8b      	ldr	r3, [pc, #556]	@ (8007bb8 <HAL_UART_IRQHandler+0x2b0>)
 800798c:	4013      	ands	r3, r2
 800798e:	2b00      	cmp	r3, #0
 8007990:	d106      	bne.n	80079a0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8007992:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8007996:	4b89      	ldr	r3, [pc, #548]	@ (8007bbc <HAL_UART_IRQHandler+0x2b4>)
 8007998:	4013      	ands	r3, r2
 800799a:	2b00      	cmp	r3, #0
 800799c:	f000 8112 	beq.w	8007bc4 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80079a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80079a4:	f003 0301 	and.w	r3, r3, #1
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d011      	beq.n	80079d0 <HAL_UART_IRQHandler+0xc8>
 80079ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80079b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d00b      	beq.n	80079d0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	2201      	movs	r2, #1
 80079be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80079c6:	f043 0201 	orr.w	r2, r3, #1
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80079d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80079d4:	f003 0302 	and.w	r3, r3, #2
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d011      	beq.n	8007a00 <HAL_UART_IRQHandler+0xf8>
 80079dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80079e0:	f003 0301 	and.w	r3, r3, #1
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d00b      	beq.n	8007a00 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	2202      	movs	r2, #2
 80079ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80079f6:	f043 0204 	orr.w	r2, r3, #4
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007a00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007a04:	f003 0304 	and.w	r3, r3, #4
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d011      	beq.n	8007a30 <HAL_UART_IRQHandler+0x128>
 8007a0c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007a10:	f003 0301 	and.w	r3, r3, #1
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d00b      	beq.n	8007a30 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	2204      	movs	r2, #4
 8007a1e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007a26:	f043 0202 	orr.w	r2, r3, #2
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007a30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007a34:	f003 0308 	and.w	r3, r3, #8
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d017      	beq.n	8007a6c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007a3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007a40:	f003 0320 	and.w	r3, r3, #32
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d105      	bne.n	8007a54 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8007a48:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8007a4c:	4b5a      	ldr	r3, [pc, #360]	@ (8007bb8 <HAL_UART_IRQHandler+0x2b0>)
 8007a4e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d00b      	beq.n	8007a6c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	2208      	movs	r2, #8
 8007a5a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007a62:	f043 0208 	orr.w	r2, r3, #8
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007a6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007a70:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d012      	beq.n	8007a9e <HAL_UART_IRQHandler+0x196>
 8007a78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007a7c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d00c      	beq.n	8007a9e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007a8c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007a94:	f043 0220 	orr.w	r2, r3, #32
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	f000 823c 	beq.w	8007f22 <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007aaa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007aae:	f003 0320 	and.w	r3, r3, #32
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d013      	beq.n	8007ade <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007ab6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007aba:	f003 0320 	and.w	r3, r3, #32
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d105      	bne.n	8007ace <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007ac2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007ac6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d007      	beq.n	8007ade <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d003      	beq.n	8007ade <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007ada:	6878      	ldr	r0, [r7, #4]
 8007adc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007ae4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	689b      	ldr	r3, [r3, #8]
 8007aee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007af2:	2b40      	cmp	r3, #64	@ 0x40
 8007af4:	d005      	beq.n	8007b02 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007af6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007afa:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d04f      	beq.n	8007ba2 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007b02:	6878      	ldr	r0, [r7, #4]
 8007b04:	f000 ffc6 	bl	8008a94 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	689b      	ldr	r3, [r3, #8]
 8007b0e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b12:	2b40      	cmp	r3, #64	@ 0x40
 8007b14:	d141      	bne.n	8007b9a <HAL_UART_IRQHandler+0x292>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	3308      	adds	r3, #8
 8007b1c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b20:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007b24:	e853 3f00 	ldrex	r3, [r3]
 8007b28:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8007b2c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007b30:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007b34:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	3308      	adds	r3, #8
 8007b3e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8007b42:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8007b46:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b4a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8007b4e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8007b52:	e841 2300 	strex	r3, r2, [r1]
 8007b56:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8007b5a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d1d9      	bne.n	8007b16 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d013      	beq.n	8007b92 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007b6e:	4a14      	ldr	r2, [pc, #80]	@ (8007bc0 <HAL_UART_IRQHandler+0x2b8>)
 8007b70:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007b76:	4618      	mov	r0, r3
 8007b78:	f7fc fb08 	bl	800418c <HAL_DMA_Abort_IT>
 8007b7c:	4603      	mov	r3, r0
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d017      	beq.n	8007bb2 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007b86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b88:	687a      	ldr	r2, [r7, #4]
 8007b8a:	6fd2      	ldr	r2, [r2, #124]	@ 0x7c
 8007b8c:	4610      	mov	r0, r2
 8007b8e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b90:	e00f      	b.n	8007bb2 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007b92:	6878      	ldr	r0, [r7, #4]
 8007b94:	f000 f9d9 	bl	8007f4a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b98:	e00b      	b.n	8007bb2 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007b9a:	6878      	ldr	r0, [r7, #4]
 8007b9c:	f000 f9d5 	bl	8007f4a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ba0:	e007      	b.n	8007bb2 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007ba2:	6878      	ldr	r0, [r7, #4]
 8007ba4:	f000 f9d1 	bl	8007f4a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	2200      	movs	r2, #0
 8007bac:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      }
    }
    return;
 8007bb0:	e1b7      	b.n	8007f22 <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007bb2:	bf00      	nop
    return;
 8007bb4:	e1b5      	b.n	8007f22 <HAL_UART_IRQHandler+0x61a>
 8007bb6:	bf00      	nop
 8007bb8:	10000001 	.word	0x10000001
 8007bbc:	04000120 	.word	0x04000120
 8007bc0:	08008c95 	.word	0x08008c95

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007bc8:	2b01      	cmp	r3, #1
 8007bca:	f040 814a 	bne.w	8007e62 <HAL_UART_IRQHandler+0x55a>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 8007bce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007bd2:	f003 0310 	and.w	r3, r3, #16
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	f000 8143 	beq.w	8007e62 <HAL_UART_IRQHandler+0x55a>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8007bdc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007be0:	f003 0310 	and.w	r3, r3, #16
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	f000 813c 	beq.w	8007e62 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	2210      	movs	r2, #16
 8007bf0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	689b      	ldr	r3, [r3, #8]
 8007bf8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007bfc:	2b40      	cmp	r3, #64	@ 0x40
 8007bfe:	f040 80b5 	bne.w	8007d6c <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	685b      	ldr	r3, [r3, #4]
 8007c0a:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if (  (nb_remaining_rx_data > 0U)
 8007c0e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	f000 8187 	beq.w	8007f26 <HAL_UART_IRQHandler+0x61e>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007c1e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007c22:	429a      	cmp	r2, r3
 8007c24:	f080 817f 	bcs.w	8007f26 <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007c2e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	f003 0320 	and.w	r3, r3, #32
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	f040 8086 	bne.w	8007d50 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c4c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007c50:	e853 3f00 	ldrex	r3, [r3]
 8007c54:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007c58:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007c5c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007c60:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	461a      	mov	r2, r3
 8007c6a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007c6e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007c72:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c76:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8007c7a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007c7e:	e841 2300 	strex	r3, r2, [r1]
 8007c82:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8007c86:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d1da      	bne.n	8007c44 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	3308      	adds	r3, #8
 8007c94:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c96:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007c98:	e853 3f00 	ldrex	r3, [r3]
 8007c9c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007c9e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007ca0:	f023 0301 	bic.w	r3, r3, #1
 8007ca4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	3308      	adds	r3, #8
 8007cae:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007cb2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8007cb6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cb8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007cba:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007cbe:	e841 2300 	strex	r3, r2, [r1]
 8007cc2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007cc4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d1e1      	bne.n	8007c8e <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	3308      	adds	r3, #8
 8007cd0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cd2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007cd4:	e853 3f00 	ldrex	r3, [r3]
 8007cd8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007cda:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007cdc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007ce0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	3308      	adds	r3, #8
 8007cea:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8007cee:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007cf0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cf2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007cf4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007cf6:	e841 2300 	strex	r3, r2, [r1]
 8007cfa:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007cfc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d1e3      	bne.n	8007cca <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	2220      	movs	r2, #32
 8007d06:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	2200      	movs	r2, #0
 8007d0e:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d16:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007d18:	e853 3f00 	ldrex	r3, [r3]
 8007d1c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007d1e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007d20:	f023 0310 	bic.w	r3, r3, #16
 8007d24:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	461a      	mov	r2, r3
 8007d2e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007d32:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007d34:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d36:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007d38:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007d3a:	e841 2300 	strex	r3, r2, [r1]
 8007d3e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007d40:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d1e4      	bne.n	8007d10 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007d4a:	4618      	mov	r0, r3
 8007d4c:	f7fc f9c0 	bl	80040d0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007d5c:	b29b      	uxth	r3, r3
 8007d5e:	1ad3      	subs	r3, r2, r3
 8007d60:	b29b      	uxth	r3, r3
 8007d62:	4619      	mov	r1, r3
 8007d64:	6878      	ldr	r0, [r7, #4]
 8007d66:	f000 f8f9 	bl	8007f5c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8007d6a:	e0dc      	b.n	8007f26 <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007d78:	b29b      	uxth	r3, r3
 8007d7a:	1ad3      	subs	r3, r2, r3
 8007d7c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if (  (huart->RxXferCount > 0U)
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007d86:	b29b      	uxth	r3, r3
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	f000 80ce 	beq.w	8007f2a <HAL_UART_IRQHandler+0x622>
          &&(nb_rx_data > 0U) )
 8007d8e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	f000 80c9 	beq.w	8007f2a <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007da0:	e853 3f00 	ldrex	r3, [r3]
 8007da4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007da6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007da8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007dac:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	461a      	mov	r2, r3
 8007db6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007dba:	647b      	str	r3, [r7, #68]	@ 0x44
 8007dbc:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dbe:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007dc0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007dc2:	e841 2300 	strex	r3, r2, [r1]
 8007dc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007dc8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d1e4      	bne.n	8007d98 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	3308      	adds	r3, #8
 8007dd4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dd8:	e853 3f00 	ldrex	r3, [r3]
 8007ddc:	623b      	str	r3, [r7, #32]
   return(result);
 8007dde:	6a3b      	ldr	r3, [r7, #32]
 8007de0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007de4:	f023 0301 	bic.w	r3, r3, #1
 8007de8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	3308      	adds	r3, #8
 8007df2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007df6:	633a      	str	r2, [r7, #48]	@ 0x30
 8007df8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dfa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007dfc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007dfe:	e841 2300 	strex	r3, r2, [r1]
 8007e02:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007e04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d1e1      	bne.n	8007dce <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	2220      	movs	r2, #32
 8007e0e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	2200      	movs	r2, #0
 8007e16:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	2200      	movs	r2, #0
 8007e1c:	671a      	str	r2, [r3, #112]	@ 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e24:	693b      	ldr	r3, [r7, #16]
 8007e26:	e853 3f00 	ldrex	r3, [r3]
 8007e2a:	60fb      	str	r3, [r7, #12]
   return(result);
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	f023 0310 	bic.w	r3, r3, #16
 8007e32:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	461a      	mov	r2, r3
 8007e3c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8007e40:	61fb      	str	r3, [r7, #28]
 8007e42:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e44:	69b9      	ldr	r1, [r7, #24]
 8007e46:	69fa      	ldr	r2, [r7, #28]
 8007e48:	e841 2300 	strex	r3, r2, [r1]
 8007e4c:	617b      	str	r3, [r7, #20]
   return(result);
 8007e4e:	697b      	ldr	r3, [r7, #20]
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d1e4      	bne.n	8007e1e <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007e54:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007e58:	4619      	mov	r1, r3
 8007e5a:	6878      	ldr	r0, [r7, #4]
 8007e5c:	f000 f87e 	bl	8007f5c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8007e60:	e063      	b.n	8007f2a <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007e62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007e66:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d00e      	beq.n	8007e8c <HAL_UART_IRQHandler+0x584>
 8007e6e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007e72:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d008      	beq.n	8007e8c <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8007e82:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007e84:	6878      	ldr	r0, [r7, #4]
 8007e86:	f001 fba3 	bl	80095d0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007e8a:	e051      	b.n	8007f30 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8007e8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007e90:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d014      	beq.n	8007ec2 <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007e98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007e9c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d105      	bne.n	8007eb0 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8007ea4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007ea8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d008      	beq.n	8007ec2 <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d03a      	beq.n	8007f2e <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007ebc:	6878      	ldr	r0, [r7, #4]
 8007ebe:	4798      	blx	r3
    }
    return;
 8007ec0:	e035      	b.n	8007f2e <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007ec2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007ec6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d009      	beq.n	8007ee2 <HAL_UART_IRQHandler+0x5da>
 8007ece:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007ed2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d003      	beq.n	8007ee2 <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 8007eda:	6878      	ldr	r0, [r7, #4]
 8007edc:	f000 fef0 	bl	8008cc0 <UART_EndTransmit_IT>
    return;
 8007ee0:	e026      	b.n	8007f30 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007ee2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007ee6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d009      	beq.n	8007f02 <HAL_UART_IRQHandler+0x5fa>
 8007eee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007ef2:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d003      	beq.n	8007f02 <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007efa:	6878      	ldr	r0, [r7, #4]
 8007efc:	f001 fb7a 	bl	80095f4 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007f00:	e016      	b.n	8007f30 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007f02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007f06:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d010      	beq.n	8007f30 <HAL_UART_IRQHandler+0x628>
 8007f0e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	da0c      	bge.n	8007f30 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007f16:	6878      	ldr	r0, [r7, #4]
 8007f18:	f001 fb63 	bl	80095e2 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007f1c:	e008      	b.n	8007f30 <HAL_UART_IRQHandler+0x628>
      return;
 8007f1e:	bf00      	nop
 8007f20:	e006      	b.n	8007f30 <HAL_UART_IRQHandler+0x628>
    return;
 8007f22:	bf00      	nop
 8007f24:	e004      	b.n	8007f30 <HAL_UART_IRQHandler+0x628>
      return;
 8007f26:	bf00      	nop
 8007f28:	e002      	b.n	8007f30 <HAL_UART_IRQHandler+0x628>
      return;
 8007f2a:	bf00      	nop
 8007f2c:	e000      	b.n	8007f30 <HAL_UART_IRQHandler+0x628>
    return;
 8007f2e:	bf00      	nop
  }
}
 8007f30:	37e8      	adds	r7, #232	@ 0xe8
 8007f32:	46bd      	mov	sp, r7
 8007f34:	bd80      	pop	{r7, pc}
 8007f36:	bf00      	nop

08007f38 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007f38:	b480      	push	{r7}
 8007f3a:	b083      	sub	sp, #12
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8007f40:	bf00      	nop
 8007f42:	370c      	adds	r7, #12
 8007f44:	46bd      	mov	sp, r7
 8007f46:	bc80      	pop	{r7}
 8007f48:	4770      	bx	lr

08007f4a <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007f4a:	b480      	push	{r7}
 8007f4c:	b083      	sub	sp, #12
 8007f4e:	af00      	add	r7, sp, #0
 8007f50:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007f52:	bf00      	nop
 8007f54:	370c      	adds	r7, #12
 8007f56:	46bd      	mov	sp, r7
 8007f58:	bc80      	pop	{r7}
 8007f5a:	4770      	bx	lr

08007f5c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007f5c:	b480      	push	{r7}
 8007f5e:	b083      	sub	sp, #12
 8007f60:	af00      	add	r7, sp, #0
 8007f62:	6078      	str	r0, [r7, #4]
 8007f64:	460b      	mov	r3, r1
 8007f66:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007f68:	bf00      	nop
 8007f6a:	370c      	adds	r7, #12
 8007f6c:	46bd      	mov	sp, r7
 8007f6e:	bc80      	pop	{r7}
 8007f70:	4770      	bx	lr
	...

08007f74 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007f74:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007f78:	b08c      	sub	sp, #48	@ 0x30
 8007f7a:	af00      	add	r7, sp, #0
 8007f7c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007f7e:	2300      	movs	r3, #0
 8007f80:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007f84:	697b      	ldr	r3, [r7, #20]
 8007f86:	689a      	ldr	r2, [r3, #8]
 8007f88:	697b      	ldr	r3, [r7, #20]
 8007f8a:	691b      	ldr	r3, [r3, #16]
 8007f8c:	431a      	orrs	r2, r3
 8007f8e:	697b      	ldr	r3, [r7, #20]
 8007f90:	695b      	ldr	r3, [r3, #20]
 8007f92:	431a      	orrs	r2, r3
 8007f94:	697b      	ldr	r3, [r7, #20]
 8007f96:	69db      	ldr	r3, [r3, #28]
 8007f98:	4313      	orrs	r3, r2
 8007f9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007f9c:	697b      	ldr	r3, [r7, #20]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	681a      	ldr	r2, [r3, #0]
 8007fa2:	4b94      	ldr	r3, [pc, #592]	@ (80081f4 <UART_SetConfig+0x280>)
 8007fa4:	4013      	ands	r3, r2
 8007fa6:	697a      	ldr	r2, [r7, #20]
 8007fa8:	6812      	ldr	r2, [r2, #0]
 8007faa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007fac:	430b      	orrs	r3, r1
 8007fae:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007fb0:	697b      	ldr	r3, [r7, #20]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	685b      	ldr	r3, [r3, #4]
 8007fb6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007fba:	697b      	ldr	r3, [r7, #20]
 8007fbc:	68da      	ldr	r2, [r3, #12]
 8007fbe:	697b      	ldr	r3, [r7, #20]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	430a      	orrs	r2, r1
 8007fc4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007fc6:	697b      	ldr	r3, [r7, #20]
 8007fc8:	699b      	ldr	r3, [r3, #24]
 8007fca:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007fcc:	697b      	ldr	r3, [r7, #20]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	4a89      	ldr	r2, [pc, #548]	@ (80081f8 <UART_SetConfig+0x284>)
 8007fd2:	4293      	cmp	r3, r2
 8007fd4:	d004      	beq.n	8007fe0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007fd6:	697b      	ldr	r3, [r7, #20]
 8007fd8:	6a1b      	ldr	r3, [r3, #32]
 8007fda:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007fdc:	4313      	orrs	r3, r2
 8007fde:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007fe0:	697b      	ldr	r3, [r7, #20]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	689b      	ldr	r3, [r3, #8]
 8007fe6:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8007fea:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8007fee:	697a      	ldr	r2, [r7, #20]
 8007ff0:	6812      	ldr	r2, [r2, #0]
 8007ff2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007ff4:	430b      	orrs	r3, r1
 8007ff6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007ff8:	697b      	ldr	r3, [r7, #20]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ffe:	f023 010f 	bic.w	r1, r3, #15
 8008002:	697b      	ldr	r3, [r7, #20]
 8008004:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008006:	697b      	ldr	r3, [r7, #20]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	430a      	orrs	r2, r1
 800800c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800800e:	697b      	ldr	r3, [r7, #20]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	4a7a      	ldr	r2, [pc, #488]	@ (80081fc <UART_SetConfig+0x288>)
 8008014:	4293      	cmp	r3, r2
 8008016:	d127      	bne.n	8008068 <UART_SetConfig+0xf4>
 8008018:	2003      	movs	r0, #3
 800801a:	f7ff fb1b 	bl	8007654 <LL_RCC_GetUSARTClockSource>
 800801e:	4603      	mov	r3, r0
 8008020:	f5a3 3340 	sub.w	r3, r3, #196608	@ 0x30000
 8008024:	2b03      	cmp	r3, #3
 8008026:	d81b      	bhi.n	8008060 <UART_SetConfig+0xec>
 8008028:	a201      	add	r2, pc, #4	@ (adr r2, 8008030 <UART_SetConfig+0xbc>)
 800802a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800802e:	bf00      	nop
 8008030:	08008041 	.word	0x08008041
 8008034:	08008051 	.word	0x08008051
 8008038:	08008049 	.word	0x08008049
 800803c:	08008059 	.word	0x08008059
 8008040:	2301      	movs	r3, #1
 8008042:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008046:	e080      	b.n	800814a <UART_SetConfig+0x1d6>
 8008048:	2302      	movs	r3, #2
 800804a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800804e:	e07c      	b.n	800814a <UART_SetConfig+0x1d6>
 8008050:	2304      	movs	r3, #4
 8008052:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008056:	e078      	b.n	800814a <UART_SetConfig+0x1d6>
 8008058:	2308      	movs	r3, #8
 800805a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800805e:	e074      	b.n	800814a <UART_SetConfig+0x1d6>
 8008060:	2310      	movs	r3, #16
 8008062:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008066:	e070      	b.n	800814a <UART_SetConfig+0x1d6>
 8008068:	697b      	ldr	r3, [r7, #20]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	4a64      	ldr	r2, [pc, #400]	@ (8008200 <UART_SetConfig+0x28c>)
 800806e:	4293      	cmp	r3, r2
 8008070:	d138      	bne.n	80080e4 <UART_SetConfig+0x170>
 8008072:	200c      	movs	r0, #12
 8008074:	f7ff faee 	bl	8007654 <LL_RCC_GetUSARTClockSource>
 8008078:	4603      	mov	r3, r0
 800807a:	f5a3 2340 	sub.w	r3, r3, #786432	@ 0xc0000
 800807e:	2b0c      	cmp	r3, #12
 8008080:	d82c      	bhi.n	80080dc <UART_SetConfig+0x168>
 8008082:	a201      	add	r2, pc, #4	@ (adr r2, 8008088 <UART_SetConfig+0x114>)
 8008084:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008088:	080080bd 	.word	0x080080bd
 800808c:	080080dd 	.word	0x080080dd
 8008090:	080080dd 	.word	0x080080dd
 8008094:	080080dd 	.word	0x080080dd
 8008098:	080080cd 	.word	0x080080cd
 800809c:	080080dd 	.word	0x080080dd
 80080a0:	080080dd 	.word	0x080080dd
 80080a4:	080080dd 	.word	0x080080dd
 80080a8:	080080c5 	.word	0x080080c5
 80080ac:	080080dd 	.word	0x080080dd
 80080b0:	080080dd 	.word	0x080080dd
 80080b4:	080080dd 	.word	0x080080dd
 80080b8:	080080d5 	.word	0x080080d5
 80080bc:	2300      	movs	r3, #0
 80080be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80080c2:	e042      	b.n	800814a <UART_SetConfig+0x1d6>
 80080c4:	2302      	movs	r3, #2
 80080c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80080ca:	e03e      	b.n	800814a <UART_SetConfig+0x1d6>
 80080cc:	2304      	movs	r3, #4
 80080ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80080d2:	e03a      	b.n	800814a <UART_SetConfig+0x1d6>
 80080d4:	2308      	movs	r3, #8
 80080d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80080da:	e036      	b.n	800814a <UART_SetConfig+0x1d6>
 80080dc:	2310      	movs	r3, #16
 80080de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80080e2:	e032      	b.n	800814a <UART_SetConfig+0x1d6>
 80080e4:	697b      	ldr	r3, [r7, #20]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	4a43      	ldr	r2, [pc, #268]	@ (80081f8 <UART_SetConfig+0x284>)
 80080ea:	4293      	cmp	r3, r2
 80080ec:	d12a      	bne.n	8008144 <UART_SetConfig+0x1d0>
 80080ee:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 80080f2:	f7ff fac1 	bl	8007678 <LL_RCC_GetLPUARTClockSource>
 80080f6:	4603      	mov	r3, r0
 80080f8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80080fc:	d01a      	beq.n	8008134 <UART_SetConfig+0x1c0>
 80080fe:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008102:	d81b      	bhi.n	800813c <UART_SetConfig+0x1c8>
 8008104:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008108:	d00c      	beq.n	8008124 <UART_SetConfig+0x1b0>
 800810a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800810e:	d815      	bhi.n	800813c <UART_SetConfig+0x1c8>
 8008110:	2b00      	cmp	r3, #0
 8008112:	d003      	beq.n	800811c <UART_SetConfig+0x1a8>
 8008114:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008118:	d008      	beq.n	800812c <UART_SetConfig+0x1b8>
 800811a:	e00f      	b.n	800813c <UART_SetConfig+0x1c8>
 800811c:	2300      	movs	r3, #0
 800811e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008122:	e012      	b.n	800814a <UART_SetConfig+0x1d6>
 8008124:	2302      	movs	r3, #2
 8008126:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800812a:	e00e      	b.n	800814a <UART_SetConfig+0x1d6>
 800812c:	2304      	movs	r3, #4
 800812e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008132:	e00a      	b.n	800814a <UART_SetConfig+0x1d6>
 8008134:	2308      	movs	r3, #8
 8008136:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800813a:	e006      	b.n	800814a <UART_SetConfig+0x1d6>
 800813c:	2310      	movs	r3, #16
 800813e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008142:	e002      	b.n	800814a <UART_SetConfig+0x1d6>
 8008144:	2310      	movs	r3, #16
 8008146:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800814a:	697b      	ldr	r3, [r7, #20]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	4a2a      	ldr	r2, [pc, #168]	@ (80081f8 <UART_SetConfig+0x284>)
 8008150:	4293      	cmp	r3, r2
 8008152:	f040 80a4 	bne.w	800829e <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008156:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800815a:	2b08      	cmp	r3, #8
 800815c:	d823      	bhi.n	80081a6 <UART_SetConfig+0x232>
 800815e:	a201      	add	r2, pc, #4	@ (adr r2, 8008164 <UART_SetConfig+0x1f0>)
 8008160:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008164:	08008189 	.word	0x08008189
 8008168:	080081a7 	.word	0x080081a7
 800816c:	08008191 	.word	0x08008191
 8008170:	080081a7 	.word	0x080081a7
 8008174:	08008197 	.word	0x08008197
 8008178:	080081a7 	.word	0x080081a7
 800817c:	080081a7 	.word	0x080081a7
 8008180:	080081a7 	.word	0x080081a7
 8008184:	0800819f 	.word	0x0800819f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008188:	f7fd ff50 	bl	800602c <HAL_RCC_GetPCLK1Freq>
 800818c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800818e:	e010      	b.n	80081b2 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008190:	4b1c      	ldr	r3, [pc, #112]	@ (8008204 <UART_SetConfig+0x290>)
 8008192:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008194:	e00d      	b.n	80081b2 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008196:	f7fd fe95 	bl	8005ec4 <HAL_RCC_GetSysClockFreq>
 800819a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800819c:	e009      	b.n	80081b2 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800819e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80081a2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80081a4:	e005      	b.n	80081b2 <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 80081a6:	2300      	movs	r3, #0
 80081a8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80081aa:	2301      	movs	r3, #1
 80081ac:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80081b0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80081b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	f000 8137 	beq.w	8008428 <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80081ba:	697b      	ldr	r3, [r7, #20]
 80081bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80081be:	4a12      	ldr	r2, [pc, #72]	@ (8008208 <UART_SetConfig+0x294>)
 80081c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80081c4:	461a      	mov	r2, r3
 80081c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081c8:	fbb3 f3f2 	udiv	r3, r3, r2
 80081cc:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80081ce:	697b      	ldr	r3, [r7, #20]
 80081d0:	685a      	ldr	r2, [r3, #4]
 80081d2:	4613      	mov	r3, r2
 80081d4:	005b      	lsls	r3, r3, #1
 80081d6:	4413      	add	r3, r2
 80081d8:	69ba      	ldr	r2, [r7, #24]
 80081da:	429a      	cmp	r2, r3
 80081dc:	d305      	bcc.n	80081ea <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80081de:	697b      	ldr	r3, [r7, #20]
 80081e0:	685b      	ldr	r3, [r3, #4]
 80081e2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80081e4:	69ba      	ldr	r2, [r7, #24]
 80081e6:	429a      	cmp	r2, r3
 80081e8:	d910      	bls.n	800820c <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 80081ea:	2301      	movs	r3, #1
 80081ec:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80081f0:	e11a      	b.n	8008428 <UART_SetConfig+0x4b4>
 80081f2:	bf00      	nop
 80081f4:	cfff69f3 	.word	0xcfff69f3
 80081f8:	40008000 	.word	0x40008000
 80081fc:	40013800 	.word	0x40013800
 8008200:	40004400 	.word	0x40004400
 8008204:	00f42400 	.word	0x00f42400
 8008208:	0801c184 	.word	0x0801c184
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800820c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800820e:	2200      	movs	r2, #0
 8008210:	60bb      	str	r3, [r7, #8]
 8008212:	60fa      	str	r2, [r7, #12]
 8008214:	697b      	ldr	r3, [r7, #20]
 8008216:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008218:	4a8e      	ldr	r2, [pc, #568]	@ (8008454 <UART_SetConfig+0x4e0>)
 800821a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800821e:	b29b      	uxth	r3, r3
 8008220:	2200      	movs	r2, #0
 8008222:	603b      	str	r3, [r7, #0]
 8008224:	607a      	str	r2, [r7, #4]
 8008226:	e9d7 2300 	ldrd	r2, r3, [r7]
 800822a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800822e:	f7f8 fcbb 	bl	8000ba8 <__aeabi_uldivmod>
 8008232:	4602      	mov	r2, r0
 8008234:	460b      	mov	r3, r1
 8008236:	4610      	mov	r0, r2
 8008238:	4619      	mov	r1, r3
 800823a:	f04f 0200 	mov.w	r2, #0
 800823e:	f04f 0300 	mov.w	r3, #0
 8008242:	020b      	lsls	r3, r1, #8
 8008244:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008248:	0202      	lsls	r2, r0, #8
 800824a:	6979      	ldr	r1, [r7, #20]
 800824c:	6849      	ldr	r1, [r1, #4]
 800824e:	0849      	lsrs	r1, r1, #1
 8008250:	2000      	movs	r0, #0
 8008252:	460c      	mov	r4, r1
 8008254:	4605      	mov	r5, r0
 8008256:	eb12 0804 	adds.w	r8, r2, r4
 800825a:	eb43 0905 	adc.w	r9, r3, r5
 800825e:	697b      	ldr	r3, [r7, #20]
 8008260:	685b      	ldr	r3, [r3, #4]
 8008262:	2200      	movs	r2, #0
 8008264:	469a      	mov	sl, r3
 8008266:	4693      	mov	fp, r2
 8008268:	4652      	mov	r2, sl
 800826a:	465b      	mov	r3, fp
 800826c:	4640      	mov	r0, r8
 800826e:	4649      	mov	r1, r9
 8008270:	f7f8 fc9a 	bl	8000ba8 <__aeabi_uldivmod>
 8008274:	4602      	mov	r2, r0
 8008276:	460b      	mov	r3, r1
 8008278:	4613      	mov	r3, r2
 800827a:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800827c:	6a3b      	ldr	r3, [r7, #32]
 800827e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008282:	d308      	bcc.n	8008296 <UART_SetConfig+0x322>
 8008284:	6a3b      	ldr	r3, [r7, #32]
 8008286:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800828a:	d204      	bcs.n	8008296 <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 800828c:	697b      	ldr	r3, [r7, #20]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	6a3a      	ldr	r2, [r7, #32]
 8008292:	60da      	str	r2, [r3, #12]
 8008294:	e0c8      	b.n	8008428 <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 8008296:	2301      	movs	r3, #1
 8008298:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800829c:	e0c4      	b.n	8008428 <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800829e:	697b      	ldr	r3, [r7, #20]
 80082a0:	69db      	ldr	r3, [r3, #28]
 80082a2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80082a6:	d168      	bne.n	800837a <UART_SetConfig+0x406>
  {
    switch (clocksource)
 80082a8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80082ac:	2b08      	cmp	r3, #8
 80082ae:	d828      	bhi.n	8008302 <UART_SetConfig+0x38e>
 80082b0:	a201      	add	r2, pc, #4	@ (adr r2, 80082b8 <UART_SetConfig+0x344>)
 80082b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082b6:	bf00      	nop
 80082b8:	080082dd 	.word	0x080082dd
 80082bc:	080082e5 	.word	0x080082e5
 80082c0:	080082ed 	.word	0x080082ed
 80082c4:	08008303 	.word	0x08008303
 80082c8:	080082f3 	.word	0x080082f3
 80082cc:	08008303 	.word	0x08008303
 80082d0:	08008303 	.word	0x08008303
 80082d4:	08008303 	.word	0x08008303
 80082d8:	080082fb 	.word	0x080082fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80082dc:	f7fd fea6 	bl	800602c <HAL_RCC_GetPCLK1Freq>
 80082e0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80082e2:	e014      	b.n	800830e <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80082e4:	f7fd feb4 	bl	8006050 <HAL_RCC_GetPCLK2Freq>
 80082e8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80082ea:	e010      	b.n	800830e <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80082ec:	4b5a      	ldr	r3, [pc, #360]	@ (8008458 <UART_SetConfig+0x4e4>)
 80082ee:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80082f0:	e00d      	b.n	800830e <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80082f2:	f7fd fde7 	bl	8005ec4 <HAL_RCC_GetSysClockFreq>
 80082f6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80082f8:	e009      	b.n	800830e <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80082fa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80082fe:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008300:	e005      	b.n	800830e <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 8008302:	2300      	movs	r3, #0
 8008304:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8008306:	2301      	movs	r3, #1
 8008308:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800830c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800830e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008310:	2b00      	cmp	r3, #0
 8008312:	f000 8089 	beq.w	8008428 <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008316:	697b      	ldr	r3, [r7, #20]
 8008318:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800831a:	4a4e      	ldr	r2, [pc, #312]	@ (8008454 <UART_SetConfig+0x4e0>)
 800831c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008320:	461a      	mov	r2, r3
 8008322:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008324:	fbb3 f3f2 	udiv	r3, r3, r2
 8008328:	005a      	lsls	r2, r3, #1
 800832a:	697b      	ldr	r3, [r7, #20]
 800832c:	685b      	ldr	r3, [r3, #4]
 800832e:	085b      	lsrs	r3, r3, #1
 8008330:	441a      	add	r2, r3
 8008332:	697b      	ldr	r3, [r7, #20]
 8008334:	685b      	ldr	r3, [r3, #4]
 8008336:	fbb2 f3f3 	udiv	r3, r2, r3
 800833a:	b29b      	uxth	r3, r3
 800833c:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800833e:	6a3b      	ldr	r3, [r7, #32]
 8008340:	2b0f      	cmp	r3, #15
 8008342:	d916      	bls.n	8008372 <UART_SetConfig+0x3fe>
 8008344:	6a3b      	ldr	r3, [r7, #32]
 8008346:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800834a:	d212      	bcs.n	8008372 <UART_SetConfig+0x3fe>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800834c:	6a3b      	ldr	r3, [r7, #32]
 800834e:	b29b      	uxth	r3, r3
 8008350:	f023 030f 	bic.w	r3, r3, #15
 8008354:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008356:	6a3b      	ldr	r3, [r7, #32]
 8008358:	085b      	lsrs	r3, r3, #1
 800835a:	b29b      	uxth	r3, r3
 800835c:	f003 0307 	and.w	r3, r3, #7
 8008360:	b29a      	uxth	r2, r3
 8008362:	8bfb      	ldrh	r3, [r7, #30]
 8008364:	4313      	orrs	r3, r2
 8008366:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8008368:	697b      	ldr	r3, [r7, #20]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	8bfa      	ldrh	r2, [r7, #30]
 800836e:	60da      	str	r2, [r3, #12]
 8008370:	e05a      	b.n	8008428 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8008372:	2301      	movs	r3, #1
 8008374:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008378:	e056      	b.n	8008428 <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800837a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800837e:	2b08      	cmp	r3, #8
 8008380:	d827      	bhi.n	80083d2 <UART_SetConfig+0x45e>
 8008382:	a201      	add	r2, pc, #4	@ (adr r2, 8008388 <UART_SetConfig+0x414>)
 8008384:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008388:	080083ad 	.word	0x080083ad
 800838c:	080083b5 	.word	0x080083b5
 8008390:	080083bd 	.word	0x080083bd
 8008394:	080083d3 	.word	0x080083d3
 8008398:	080083c3 	.word	0x080083c3
 800839c:	080083d3 	.word	0x080083d3
 80083a0:	080083d3 	.word	0x080083d3
 80083a4:	080083d3 	.word	0x080083d3
 80083a8:	080083cb 	.word	0x080083cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80083ac:	f7fd fe3e 	bl	800602c <HAL_RCC_GetPCLK1Freq>
 80083b0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80083b2:	e014      	b.n	80083de <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80083b4:	f7fd fe4c 	bl	8006050 <HAL_RCC_GetPCLK2Freq>
 80083b8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80083ba:	e010      	b.n	80083de <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80083bc:	4b26      	ldr	r3, [pc, #152]	@ (8008458 <UART_SetConfig+0x4e4>)
 80083be:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80083c0:	e00d      	b.n	80083de <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80083c2:	f7fd fd7f 	bl	8005ec4 <HAL_RCC_GetSysClockFreq>
 80083c6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80083c8:	e009      	b.n	80083de <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80083ca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80083ce:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80083d0:	e005      	b.n	80083de <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 80083d2:	2300      	movs	r3, #0
 80083d4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80083d6:	2301      	movs	r3, #1
 80083d8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80083dc:	bf00      	nop
    }

    if (pclk != 0U)
 80083de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d021      	beq.n	8008428 <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80083e4:	697b      	ldr	r3, [r7, #20]
 80083e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80083e8:	4a1a      	ldr	r2, [pc, #104]	@ (8008454 <UART_SetConfig+0x4e0>)
 80083ea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80083ee:	461a      	mov	r2, r3
 80083f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083f2:	fbb3 f2f2 	udiv	r2, r3, r2
 80083f6:	697b      	ldr	r3, [r7, #20]
 80083f8:	685b      	ldr	r3, [r3, #4]
 80083fa:	085b      	lsrs	r3, r3, #1
 80083fc:	441a      	add	r2, r3
 80083fe:	697b      	ldr	r3, [r7, #20]
 8008400:	685b      	ldr	r3, [r3, #4]
 8008402:	fbb2 f3f3 	udiv	r3, r2, r3
 8008406:	b29b      	uxth	r3, r3
 8008408:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800840a:	6a3b      	ldr	r3, [r7, #32]
 800840c:	2b0f      	cmp	r3, #15
 800840e:	d908      	bls.n	8008422 <UART_SetConfig+0x4ae>
 8008410:	6a3b      	ldr	r3, [r7, #32]
 8008412:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008416:	d204      	bcs.n	8008422 <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = usartdiv;
 8008418:	697b      	ldr	r3, [r7, #20]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	6a3a      	ldr	r2, [r7, #32]
 800841e:	60da      	str	r2, [r3, #12]
 8008420:	e002      	b.n	8008428 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8008422:	2301      	movs	r3, #1
 8008424:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008428:	697b      	ldr	r3, [r7, #20]
 800842a:	2201      	movs	r2, #1
 800842c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8008430:	697b      	ldr	r3, [r7, #20]
 8008432:	2201      	movs	r2, #1
 8008434:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008438:	697b      	ldr	r3, [r7, #20]
 800843a:	2200      	movs	r2, #0
 800843c:	671a      	str	r2, [r3, #112]	@ 0x70
  huart->TxISR = NULL;
 800843e:	697b      	ldr	r3, [r7, #20]
 8008440:	2200      	movs	r2, #0
 8008442:	675a      	str	r2, [r3, #116]	@ 0x74

  return ret;
 8008444:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8008448:	4618      	mov	r0, r3
 800844a:	3730      	adds	r7, #48	@ 0x30
 800844c:	46bd      	mov	sp, r7
 800844e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008452:	bf00      	nop
 8008454:	0801c184 	.word	0x0801c184
 8008458:	00f42400 	.word	0x00f42400

0800845c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800845c:	b480      	push	{r7}
 800845e:	b083      	sub	sp, #12
 8008460:	af00      	add	r7, sp, #0
 8008462:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008468:	f003 0301 	and.w	r3, r3, #1
 800846c:	2b00      	cmp	r3, #0
 800846e:	d00a      	beq.n	8008486 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	685b      	ldr	r3, [r3, #4]
 8008476:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	430a      	orrs	r2, r1
 8008484:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800848a:	f003 0302 	and.w	r3, r3, #2
 800848e:	2b00      	cmp	r3, #0
 8008490:	d00a      	beq.n	80084a8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	685b      	ldr	r3, [r3, #4]
 8008498:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	430a      	orrs	r2, r1
 80084a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80084ac:	f003 0304 	and.w	r3, r3, #4
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d00a      	beq.n	80084ca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	685b      	ldr	r3, [r3, #4]
 80084ba:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	430a      	orrs	r2, r1
 80084c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80084ce:	f003 0308 	and.w	r3, r3, #8
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d00a      	beq.n	80084ec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	685b      	ldr	r3, [r3, #4]
 80084dc:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	430a      	orrs	r2, r1
 80084ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80084f0:	f003 0310 	and.w	r3, r3, #16
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d00a      	beq.n	800850e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	689b      	ldr	r3, [r3, #8]
 80084fe:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	430a      	orrs	r2, r1
 800850c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008512:	f003 0320 	and.w	r3, r3, #32
 8008516:	2b00      	cmp	r3, #0
 8008518:	d00a      	beq.n	8008530 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	689b      	ldr	r3, [r3, #8]
 8008520:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	430a      	orrs	r2, r1
 800852e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008534:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008538:	2b00      	cmp	r3, #0
 800853a:	d01a      	beq.n	8008572 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	685b      	ldr	r3, [r3, #4]
 8008542:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	430a      	orrs	r2, r1
 8008550:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008556:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800855a:	d10a      	bne.n	8008572 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	685b      	ldr	r3, [r3, #4]
 8008562:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	430a      	orrs	r2, r1
 8008570:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008576:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800857a:	2b00      	cmp	r3, #0
 800857c:	d00a      	beq.n	8008594 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	685b      	ldr	r3, [r3, #4]
 8008584:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	430a      	orrs	r2, r1
 8008592:	605a      	str	r2, [r3, #4]
  }
}
 8008594:	bf00      	nop
 8008596:	370c      	adds	r7, #12
 8008598:	46bd      	mov	sp, r7
 800859a:	bc80      	pop	{r7}
 800859c:	4770      	bx	lr

0800859e <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800859e:	b580      	push	{r7, lr}
 80085a0:	b086      	sub	sp, #24
 80085a2:	af02      	add	r7, sp, #8
 80085a4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	2200      	movs	r2, #0
 80085aa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80085ae:	f7f9 fb9b 	bl	8001ce8 <HAL_GetTick>
 80085b2:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	f003 0308 	and.w	r3, r3, #8
 80085be:	2b08      	cmp	r3, #8
 80085c0:	d10e      	bne.n	80085e0 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80085c2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80085c6:	9300      	str	r3, [sp, #0]
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	2200      	movs	r2, #0
 80085cc:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80085d0:	6878      	ldr	r0, [r7, #4]
 80085d2:	f000 f82f 	bl	8008634 <UART_WaitOnFlagUntilTimeout>
 80085d6:	4603      	mov	r3, r0
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d001      	beq.n	80085e0 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80085dc:	2303      	movs	r3, #3
 80085de:	e025      	b.n	800862c <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	f003 0304 	and.w	r3, r3, #4
 80085ea:	2b04      	cmp	r3, #4
 80085ec:	d10e      	bne.n	800860c <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80085ee:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80085f2:	9300      	str	r3, [sp, #0]
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	2200      	movs	r2, #0
 80085f8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80085fc:	6878      	ldr	r0, [r7, #4]
 80085fe:	f000 f819 	bl	8008634 <UART_WaitOnFlagUntilTimeout>
 8008602:	4603      	mov	r3, r0
 8008604:	2b00      	cmp	r3, #0
 8008606:	d001      	beq.n	800860c <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008608:	2303      	movs	r3, #3
 800860a:	e00f      	b.n	800862c <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	2220      	movs	r2, #32
 8008610:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	2220      	movs	r2, #32
 8008618:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	2200      	movs	r2, #0
 8008620:	66da      	str	r2, [r3, #108]	@ 0x6c

  __HAL_UNLOCK(huart);
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	2200      	movs	r2, #0
 8008626:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800862a:	2300      	movs	r3, #0
}
 800862c:	4618      	mov	r0, r3
 800862e:	3710      	adds	r7, #16
 8008630:	46bd      	mov	sp, r7
 8008632:	bd80      	pop	{r7, pc}

08008634 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008634:	b580      	push	{r7, lr}
 8008636:	b09c      	sub	sp, #112	@ 0x70
 8008638:	af00      	add	r7, sp, #0
 800863a:	60f8      	str	r0, [r7, #12]
 800863c:	60b9      	str	r1, [r7, #8]
 800863e:	603b      	str	r3, [r7, #0]
 8008640:	4613      	mov	r3, r2
 8008642:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008644:	e0a9      	b.n	800879a <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008646:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008648:	f1b3 3fff 	cmp.w	r3, #4294967295
 800864c:	f000 80a5 	beq.w	800879a <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008650:	f7f9 fb4a 	bl	8001ce8 <HAL_GetTick>
 8008654:	4602      	mov	r2, r0
 8008656:	683b      	ldr	r3, [r7, #0]
 8008658:	1ad3      	subs	r3, r2, r3
 800865a:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800865c:	429a      	cmp	r2, r3
 800865e:	d302      	bcc.n	8008666 <UART_WaitOnFlagUntilTimeout+0x32>
 8008660:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008662:	2b00      	cmp	r3, #0
 8008664:	d140      	bne.n	80086e8 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800866c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800866e:	e853 3f00 	ldrex	r3, [r3]
 8008672:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8008674:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008676:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 800867a:	667b      	str	r3, [r7, #100]	@ 0x64
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	461a      	mov	r2, r3
 8008682:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008684:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008686:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008688:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800868a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800868c:	e841 2300 	strex	r3, r2, [r1]
 8008690:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8008692:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008694:	2b00      	cmp	r3, #0
 8008696:	d1e6      	bne.n	8008666 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	3308      	adds	r3, #8
 800869e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80086a2:	e853 3f00 	ldrex	r3, [r3]
 80086a6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80086a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086aa:	f023 0301 	bic.w	r3, r3, #1
 80086ae:	663b      	str	r3, [r7, #96]	@ 0x60
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	3308      	adds	r3, #8
 80086b6:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80086b8:	64ba      	str	r2, [r7, #72]	@ 0x48
 80086ba:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086bc:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80086be:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80086c0:	e841 2300 	strex	r3, r2, [r1]
 80086c4:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80086c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d1e5      	bne.n	8008698 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	2220      	movs	r2, #32
 80086d0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	2220      	movs	r2, #32
 80086d8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        __HAL_UNLOCK(huart);
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	2200      	movs	r2, #0
 80086e0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 80086e4:	2303      	movs	r3, #3
 80086e6:	e069      	b.n	80087bc <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	f003 0304 	and.w	r3, r3, #4
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d051      	beq.n	800879a <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	69db      	ldr	r3, [r3, #28]
 80086fc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008700:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008704:	d149      	bne.n	800879a <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800870e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008716:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008718:	e853 3f00 	ldrex	r3, [r3]
 800871c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800871e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008720:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8008724:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	461a      	mov	r2, r3
 800872c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800872e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008730:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008732:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008734:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008736:	e841 2300 	strex	r3, r2, [r1]
 800873a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800873c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800873e:	2b00      	cmp	r3, #0
 8008740:	d1e6      	bne.n	8008710 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	3308      	adds	r3, #8
 8008748:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800874a:	697b      	ldr	r3, [r7, #20]
 800874c:	e853 3f00 	ldrex	r3, [r3]
 8008750:	613b      	str	r3, [r7, #16]
   return(result);
 8008752:	693b      	ldr	r3, [r7, #16]
 8008754:	f023 0301 	bic.w	r3, r3, #1
 8008758:	66bb      	str	r3, [r7, #104]	@ 0x68
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	3308      	adds	r3, #8
 8008760:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8008762:	623a      	str	r2, [r7, #32]
 8008764:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008766:	69f9      	ldr	r1, [r7, #28]
 8008768:	6a3a      	ldr	r2, [r7, #32]
 800876a:	e841 2300 	strex	r3, r2, [r1]
 800876e:	61bb      	str	r3, [r7, #24]
   return(result);
 8008770:	69bb      	ldr	r3, [r7, #24]
 8008772:	2b00      	cmp	r3, #0
 8008774:	d1e5      	bne.n	8008742 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	2220      	movs	r2, #32
 800877a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	2220      	movs	r2, #32
 8008782:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	2220      	movs	r2, #32
 800878a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	2200      	movs	r2, #0
 8008792:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8008796:	2303      	movs	r3, #3
 8008798:	e010      	b.n	80087bc <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	69da      	ldr	r2, [r3, #28]
 80087a0:	68bb      	ldr	r3, [r7, #8]
 80087a2:	4013      	ands	r3, r2
 80087a4:	68ba      	ldr	r2, [r7, #8]
 80087a6:	429a      	cmp	r2, r3
 80087a8:	bf0c      	ite	eq
 80087aa:	2301      	moveq	r3, #1
 80087ac:	2300      	movne	r3, #0
 80087ae:	b2db      	uxtb	r3, r3
 80087b0:	461a      	mov	r2, r3
 80087b2:	79fb      	ldrb	r3, [r7, #7]
 80087b4:	429a      	cmp	r2, r3
 80087b6:	f43f af46 	beq.w	8008646 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80087ba:	2300      	movs	r3, #0
}
 80087bc:	4618      	mov	r0, r3
 80087be:	3770      	adds	r7, #112	@ 0x70
 80087c0:	46bd      	mov	sp, r7
 80087c2:	bd80      	pop	{r7, pc}

080087c4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80087c4:	b480      	push	{r7}
 80087c6:	b0a3      	sub	sp, #140	@ 0x8c
 80087c8:	af00      	add	r7, sp, #0
 80087ca:	60f8      	str	r0, [r7, #12]
 80087cc:	60b9      	str	r1, [r7, #8]
 80087ce:	4613      	mov	r3, r2
 80087d0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	68ba      	ldr	r2, [r7, #8]
 80087d6:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	88fa      	ldrh	r2, [r7, #6]
 80087dc:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	88fa      	ldrh	r2, [r7, #6]
 80087e4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	2200      	movs	r2, #0
 80087ec:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	689b      	ldr	r3, [r3, #8]
 80087f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80087f6:	d10e      	bne.n	8008816 <UART_Start_Receive_IT+0x52>
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	691b      	ldr	r3, [r3, #16]
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d105      	bne.n	800880c <UART_Start_Receive_IT+0x48>
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8008806:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800880a:	e02d      	b.n	8008868 <UART_Start_Receive_IT+0xa4>
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	22ff      	movs	r2, #255	@ 0xff
 8008810:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008814:	e028      	b.n	8008868 <UART_Start_Receive_IT+0xa4>
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	689b      	ldr	r3, [r3, #8]
 800881a:	2b00      	cmp	r3, #0
 800881c:	d10d      	bne.n	800883a <UART_Start_Receive_IT+0x76>
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	691b      	ldr	r3, [r3, #16]
 8008822:	2b00      	cmp	r3, #0
 8008824:	d104      	bne.n	8008830 <UART_Start_Receive_IT+0x6c>
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	22ff      	movs	r2, #255	@ 0xff
 800882a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800882e:	e01b      	b.n	8008868 <UART_Start_Receive_IT+0xa4>
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	227f      	movs	r2, #127	@ 0x7f
 8008834:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008838:	e016      	b.n	8008868 <UART_Start_Receive_IT+0xa4>
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	689b      	ldr	r3, [r3, #8]
 800883e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008842:	d10d      	bne.n	8008860 <UART_Start_Receive_IT+0x9c>
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	691b      	ldr	r3, [r3, #16]
 8008848:	2b00      	cmp	r3, #0
 800884a:	d104      	bne.n	8008856 <UART_Start_Receive_IT+0x92>
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	227f      	movs	r2, #127	@ 0x7f
 8008850:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008854:	e008      	b.n	8008868 <UART_Start_Receive_IT+0xa4>
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	223f      	movs	r2, #63	@ 0x3f
 800885a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800885e:	e003      	b.n	8008868 <UART_Start_Receive_IT+0xa4>
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	2200      	movs	r2, #0
 8008864:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	2200      	movs	r2, #0
 800886c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	2222      	movs	r2, #34	@ 0x22
 8008874:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	3308      	adds	r3, #8
 800887e:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008880:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008882:	e853 3f00 	ldrex	r3, [r3]
 8008886:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8008888:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800888a:	f043 0301 	orr.w	r3, r3, #1
 800888e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	3308      	adds	r3, #8
 8008898:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800889c:	673a      	str	r2, [r7, #112]	@ 0x70
 800889e:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088a0:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 80088a2:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80088a4:	e841 2300 	strex	r3, r2, [r1]
 80088a8:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 80088aa:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d1e3      	bne.n	8008878 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80088b4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80088b8:	d153      	bne.n	8008962 <UART_Start_Receive_IT+0x19e>
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80088c0:	88fa      	ldrh	r2, [r7, #6]
 80088c2:	429a      	cmp	r2, r3
 80088c4:	d34d      	bcc.n	8008962 <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	689b      	ldr	r3, [r3, #8]
 80088ca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80088ce:	d107      	bne.n	80088e0 <UART_Start_Receive_IT+0x11c>
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	691b      	ldr	r3, [r3, #16]
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d103      	bne.n	80088e0 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	4a4a      	ldr	r2, [pc, #296]	@ (8008a04 <UART_Start_Receive_IT+0x240>)
 80088dc:	671a      	str	r2, [r3, #112]	@ 0x70
 80088de:	e002      	b.n	80088e6 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	4a49      	ldr	r2, [pc, #292]	@ (8008a08 <UART_Start_Receive_IT+0x244>)
 80088e4:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    __HAL_UNLOCK(huart);
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	2200      	movs	r2, #0
 80088ea:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	691b      	ldr	r3, [r3, #16]
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d01a      	beq.n	800892c <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088fc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80088fe:	e853 3f00 	ldrex	r3, [r3]
 8008902:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8008904:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008906:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800890a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	461a      	mov	r2, r3
 8008914:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8008918:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800891a:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800891c:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800891e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8008920:	e841 2300 	strex	r3, r2, [r1]
 8008924:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8008926:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008928:	2b00      	cmp	r3, #0
 800892a:	d1e4      	bne.n	80088f6 <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	3308      	adds	r3, #8
 8008932:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008934:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008936:	e853 3f00 	ldrex	r3, [r3]
 800893a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800893c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800893e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008942:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	3308      	adds	r3, #8
 800894a:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800894c:	64ba      	str	r2, [r7, #72]	@ 0x48
 800894e:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008950:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008952:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008954:	e841 2300 	strex	r3, r2, [r1]
 8008958:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800895a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800895c:	2b00      	cmp	r3, #0
 800895e:	d1e5      	bne.n	800892c <UART_Start_Receive_IT+0x168>
 8008960:	e04a      	b.n	80089f8 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	689b      	ldr	r3, [r3, #8]
 8008966:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800896a:	d107      	bne.n	800897c <UART_Start_Receive_IT+0x1b8>
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	691b      	ldr	r3, [r3, #16]
 8008970:	2b00      	cmp	r3, #0
 8008972:	d103      	bne.n	800897c <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	4a25      	ldr	r2, [pc, #148]	@ (8008a0c <UART_Start_Receive_IT+0x248>)
 8008978:	671a      	str	r2, [r3, #112]	@ 0x70
 800897a:	e002      	b.n	8008982 <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	4a24      	ldr	r2, [pc, #144]	@ (8008a10 <UART_Start_Receive_IT+0x24c>)
 8008980:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    __HAL_UNLOCK(huart);
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	2200      	movs	r2, #0
 8008986:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	691b      	ldr	r3, [r3, #16]
 800898e:	2b00      	cmp	r3, #0
 8008990:	d019      	beq.n	80089c6 <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008998:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800899a:	e853 3f00 	ldrex	r3, [r3]
 800899e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80089a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089a2:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 80089a6:	677b      	str	r3, [r7, #116]	@ 0x74
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	461a      	mov	r2, r3
 80089ae:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80089b0:	637b      	str	r3, [r7, #52]	@ 0x34
 80089b2:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089b4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80089b6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80089b8:	e841 2300 	strex	r3, r2, [r1]
 80089bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80089be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d1e6      	bne.n	8008992 <UART_Start_Receive_IT+0x1ce>
 80089c4:	e018      	b.n	80089f8 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089cc:	697b      	ldr	r3, [r7, #20]
 80089ce:	e853 3f00 	ldrex	r3, [r3]
 80089d2:	613b      	str	r3, [r7, #16]
   return(result);
 80089d4:	693b      	ldr	r3, [r7, #16]
 80089d6:	f043 0320 	orr.w	r3, r3, #32
 80089da:	67bb      	str	r3, [r7, #120]	@ 0x78
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	461a      	mov	r2, r3
 80089e2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80089e4:	623b      	str	r3, [r7, #32]
 80089e6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089e8:	69f9      	ldr	r1, [r7, #28]
 80089ea:	6a3a      	ldr	r2, [r7, #32]
 80089ec:	e841 2300 	strex	r3, r2, [r1]
 80089f0:	61bb      	str	r3, [r7, #24]
   return(result);
 80089f2:	69bb      	ldr	r3, [r7, #24]
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d1e6      	bne.n	80089c6 <UART_Start_Receive_IT+0x202>
    }  
  }
  return HAL_OK;
 80089f8:	2300      	movs	r3, #0
}
 80089fa:	4618      	mov	r0, r3
 80089fc:	378c      	adds	r7, #140	@ 0x8c
 80089fe:	46bd      	mov	sp, r7
 8008a00:	bc80      	pop	{r7}
 8008a02:	4770      	bx	lr
 8008a04:	080092d1 	.word	0x080092d1
 8008a08:	08008fd9 	.word	0x08008fd9
 8008a0c:	08008e77 	.word	0x08008e77
 8008a10:	08008d17 	.word	0x08008d17

08008a14 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008a14:	b480      	push	{r7}
 8008a16:	b08f      	sub	sp, #60	@ 0x3c
 8008a18:	af00      	add	r7, sp, #0
 8008a1a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a22:	6a3b      	ldr	r3, [r7, #32]
 8008a24:	e853 3f00 	ldrex	r3, [r3]
 8008a28:	61fb      	str	r3, [r7, #28]
   return(result);
 8008a2a:	69fb      	ldr	r3, [r7, #28]
 8008a2c:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8008a30:	637b      	str	r3, [r7, #52]	@ 0x34
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	461a      	mov	r2, r3
 8008a38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008a3c:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a3e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008a40:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008a42:	e841 2300 	strex	r3, r2, [r1]
 8008a46:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008a48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d1e6      	bne.n	8008a1c <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	3308      	adds	r3, #8
 8008a54:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	e853 3f00 	ldrex	r3, [r3]
 8008a5c:	60bb      	str	r3, [r7, #8]
   return(result);
 8008a5e:	68bb      	ldr	r3, [r7, #8]
 8008a60:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8008a64:	633b      	str	r3, [r7, #48]	@ 0x30
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	3308      	adds	r3, #8
 8008a6c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008a6e:	61ba      	str	r2, [r7, #24]
 8008a70:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a72:	6979      	ldr	r1, [r7, #20]
 8008a74:	69ba      	ldr	r2, [r7, #24]
 8008a76:	e841 2300 	strex	r3, r2, [r1]
 8008a7a:	613b      	str	r3, [r7, #16]
   return(result);
 8008a7c:	693b      	ldr	r3, [r7, #16]
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d1e5      	bne.n	8008a4e <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	2220      	movs	r2, #32
 8008a86:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
}
 8008a8a:	bf00      	nop
 8008a8c:	373c      	adds	r7, #60	@ 0x3c
 8008a8e:	46bd      	mov	sp, r7
 8008a90:	bc80      	pop	{r7}
 8008a92:	4770      	bx	lr

08008a94 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008a94:	b480      	push	{r7}
 8008a96:	b095      	sub	sp, #84	@ 0x54
 8008a98:	af00      	add	r7, sp, #0
 8008a9a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008aa2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008aa4:	e853 3f00 	ldrex	r3, [r3]
 8008aa8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008aaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008aac:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008ab0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	461a      	mov	r2, r3
 8008ab8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008aba:	643b      	str	r3, [r7, #64]	@ 0x40
 8008abc:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008abe:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008ac0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008ac2:	e841 2300 	strex	r3, r2, [r1]
 8008ac6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008ac8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d1e6      	bne.n	8008a9c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	3308      	adds	r3, #8
 8008ad4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ad6:	6a3b      	ldr	r3, [r7, #32]
 8008ad8:	e853 3f00 	ldrex	r3, [r3]
 8008adc:	61fb      	str	r3, [r7, #28]
   return(result);
 8008ade:	69fb      	ldr	r3, [r7, #28]
 8008ae0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008ae4:	f023 0301 	bic.w	r3, r3, #1
 8008ae8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	3308      	adds	r3, #8
 8008af0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008af2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008af4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008af6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008af8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008afa:	e841 2300 	strex	r3, r2, [r1]
 8008afe:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008b00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d1e3      	bne.n	8008ace <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008b0a:	2b01      	cmp	r3, #1
 8008b0c:	d118      	bne.n	8008b40 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	e853 3f00 	ldrex	r3, [r3]
 8008b1a:	60bb      	str	r3, [r7, #8]
   return(result);
 8008b1c:	68bb      	ldr	r3, [r7, #8]
 8008b1e:	f023 0310 	bic.w	r3, r3, #16
 8008b22:	647b      	str	r3, [r7, #68]	@ 0x44
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	461a      	mov	r2, r3
 8008b2a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008b2c:	61bb      	str	r3, [r7, #24]
 8008b2e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b30:	6979      	ldr	r1, [r7, #20]
 8008b32:	69ba      	ldr	r2, [r7, #24]
 8008b34:	e841 2300 	strex	r3, r2, [r1]
 8008b38:	613b      	str	r3, [r7, #16]
   return(result);
 8008b3a:	693b      	ldr	r3, [r7, #16]
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d1e6      	bne.n	8008b0e <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	2220      	movs	r2, #32
 8008b44:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	2200      	movs	r2, #0
 8008b4c:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	2200      	movs	r2, #0
 8008b52:	671a      	str	r2, [r3, #112]	@ 0x70
}
 8008b54:	bf00      	nop
 8008b56:	3754      	adds	r7, #84	@ 0x54
 8008b58:	46bd      	mov	sp, r7
 8008b5a:	bc80      	pop	{r7}
 8008b5c:	4770      	bx	lr

08008b5e <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008b5e:	b580      	push	{r7, lr}
 8008b60:	b090      	sub	sp, #64	@ 0x40
 8008b62:	af00      	add	r7, sp, #0
 8008b64:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b6a:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	f003 0320 	and.w	r3, r3, #32
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d137      	bne.n	8008bea <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8008b7a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008b7c:	2200      	movs	r2, #0
 8008b7e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008b82:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	3308      	adds	r3, #8
 8008b88:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b8c:	e853 3f00 	ldrex	r3, [r3]
 8008b90:	623b      	str	r3, [r7, #32]
   return(result);
 8008b92:	6a3b      	ldr	r3, [r7, #32]
 8008b94:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008b98:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008b9a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	3308      	adds	r3, #8
 8008ba0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008ba2:	633a      	str	r2, [r7, #48]	@ 0x30
 8008ba4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ba6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008ba8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008baa:	e841 2300 	strex	r3, r2, [r1]
 8008bae:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008bb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d1e5      	bne.n	8008b82 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008bb6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bbc:	693b      	ldr	r3, [r7, #16]
 8008bbe:	e853 3f00 	ldrex	r3, [r3]
 8008bc2:	60fb      	str	r3, [r7, #12]
   return(result);
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008bca:	637b      	str	r3, [r7, #52]	@ 0x34
 8008bcc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	461a      	mov	r2, r3
 8008bd2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008bd4:	61fb      	str	r3, [r7, #28]
 8008bd6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bd8:	69b9      	ldr	r1, [r7, #24]
 8008bda:	69fa      	ldr	r2, [r7, #28]
 8008bdc:	e841 2300 	strex	r3, r2, [r1]
 8008be0:	617b      	str	r3, [r7, #20]
   return(result);
 8008be2:	697b      	ldr	r3, [r7, #20]
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d1e6      	bne.n	8008bb6 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008be8:	e002      	b.n	8008bf0 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8008bea:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8008bec:	f7f9 fd82 	bl	80026f4 <HAL_UART_TxCpltCallback>
}
 8008bf0:	bf00      	nop
 8008bf2:	3740      	adds	r7, #64	@ 0x40
 8008bf4:	46bd      	mov	sp, r7
 8008bf6:	bd80      	pop	{r7, pc}

08008bf8 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008bf8:	b580      	push	{r7, lr}
 8008bfa:	b084      	sub	sp, #16
 8008bfc:	af00      	add	r7, sp, #0
 8008bfe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c04:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8008c06:	68f8      	ldr	r0, [r7, #12]
 8008c08:	f7ff f996 	bl	8007f38 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008c0c:	bf00      	nop
 8008c0e:	3710      	adds	r7, #16
 8008c10:	46bd      	mov	sp, r7
 8008c12:	bd80      	pop	{r7, pc}

08008c14 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008c14:	b580      	push	{r7, lr}
 8008c16:	b086      	sub	sp, #24
 8008c18:	af00      	add	r7, sp, #0
 8008c1a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c20:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8008c22:	697b      	ldr	r3, [r7, #20]
 8008c24:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008c28:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8008c2a:	697b      	ldr	r3, [r7, #20]
 8008c2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008c30:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8008c32:	697b      	ldr	r3, [r7, #20]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	689b      	ldr	r3, [r3, #8]
 8008c38:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008c3c:	2b80      	cmp	r3, #128	@ 0x80
 8008c3e:	d109      	bne.n	8008c54 <UART_DMAError+0x40>
 8008c40:	693b      	ldr	r3, [r7, #16]
 8008c42:	2b21      	cmp	r3, #33	@ 0x21
 8008c44:	d106      	bne.n	8008c54 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8008c46:	697b      	ldr	r3, [r7, #20]
 8008c48:	2200      	movs	r2, #0
 8008c4a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 8008c4e:	6978      	ldr	r0, [r7, #20]
 8008c50:	f7ff fee0 	bl	8008a14 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8008c54:	697b      	ldr	r3, [r7, #20]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	689b      	ldr	r3, [r3, #8]
 8008c5a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008c5e:	2b40      	cmp	r3, #64	@ 0x40
 8008c60:	d109      	bne.n	8008c76 <UART_DMAError+0x62>
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	2b22      	cmp	r3, #34	@ 0x22
 8008c66:	d106      	bne.n	8008c76 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8008c68:	697b      	ldr	r3, [r7, #20]
 8008c6a:	2200      	movs	r2, #0
 8008c6c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 8008c70:	6978      	ldr	r0, [r7, #20]
 8008c72:	f7ff ff0f 	bl	8008a94 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008c76:	697b      	ldr	r3, [r7, #20]
 8008c78:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008c7c:	f043 0210 	orr.w	r2, r3, #16
 8008c80:	697b      	ldr	r3, [r7, #20]
 8008c82:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008c86:	6978      	ldr	r0, [r7, #20]
 8008c88:	f7ff f95f 	bl	8007f4a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008c8c:	bf00      	nop
 8008c8e:	3718      	adds	r7, #24
 8008c90:	46bd      	mov	sp, r7
 8008c92:	bd80      	pop	{r7, pc}

08008c94 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008c94:	b580      	push	{r7, lr}
 8008c96:	b084      	sub	sp, #16
 8008c98:	af00      	add	r7, sp, #0
 8008c9a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ca0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	2200      	movs	r2, #0
 8008ca6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	2200      	movs	r2, #0
 8008cae:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008cb2:	68f8      	ldr	r0, [r7, #12]
 8008cb4:	f7ff f949 	bl	8007f4a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008cb8:	bf00      	nop
 8008cba:	3710      	adds	r7, #16
 8008cbc:	46bd      	mov	sp, r7
 8008cbe:	bd80      	pop	{r7, pc}

08008cc0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008cc0:	b580      	push	{r7, lr}
 8008cc2:	b088      	sub	sp, #32
 8008cc4:	af00      	add	r7, sp, #0
 8008cc6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	e853 3f00 	ldrex	r3, [r3]
 8008cd4:	60bb      	str	r3, [r7, #8]
   return(result);
 8008cd6:	68bb      	ldr	r3, [r7, #8]
 8008cd8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008cdc:	61fb      	str	r3, [r7, #28]
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	461a      	mov	r2, r3
 8008ce4:	69fb      	ldr	r3, [r7, #28]
 8008ce6:	61bb      	str	r3, [r7, #24]
 8008ce8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cea:	6979      	ldr	r1, [r7, #20]
 8008cec:	69ba      	ldr	r2, [r7, #24]
 8008cee:	e841 2300 	strex	r3, r2, [r1]
 8008cf2:	613b      	str	r3, [r7, #16]
   return(result);
 8008cf4:	693b      	ldr	r3, [r7, #16]
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d1e6      	bne.n	8008cc8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	2220      	movs	r2, #32
 8008cfe:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	2200      	movs	r2, #0
 8008d06:	675a      	str	r2, [r3, #116]	@ 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008d08:	6878      	ldr	r0, [r7, #4]
 8008d0a:	f7f9 fcf3 	bl	80026f4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008d0e:	bf00      	nop
 8008d10:	3720      	adds	r7, #32
 8008d12:	46bd      	mov	sp, r7
 8008d14:	bd80      	pop	{r7, pc}

08008d16 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008d16:	b580      	push	{r7, lr}
 8008d18:	b096      	sub	sp, #88	@ 0x58
 8008d1a:	af00      	add	r7, sp, #0
 8008d1c:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8008d24:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008d2e:	2b22      	cmp	r3, #34	@ 0x22
 8008d30:	f040 8095 	bne.w	8008e5e <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d3a:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008d3e:	f8b7 3054 	ldrh.w	r3, [r7, #84]	@ 0x54
 8008d42:	b2d9      	uxtb	r1, r3
 8008d44:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8008d48:	b2da      	uxtb	r2, r3
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008d4e:	400a      	ands	r2, r1
 8008d50:	b2d2      	uxtb	r2, r2
 8008d52:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008d58:	1c5a      	adds	r2, r3, #1
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008d64:	b29b      	uxth	r3, r3
 8008d66:	3b01      	subs	r3, #1
 8008d68:	b29a      	uxth	r2, r3
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008d76:	b29b      	uxth	r3, r3
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d178      	bne.n	8008e6e <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d84:	e853 3f00 	ldrex	r3, [r3]
 8008d88:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008d8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d8c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008d90:	653b      	str	r3, [r7, #80]	@ 0x50
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	461a      	mov	r2, r3
 8008d98:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008d9a:	647b      	str	r3, [r7, #68]	@ 0x44
 8008d9c:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d9e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008da0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008da2:	e841 2300 	strex	r3, r2, [r1]
 8008da6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008da8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d1e6      	bne.n	8008d7c <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	3308      	adds	r3, #8
 8008db4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008db6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008db8:	e853 3f00 	ldrex	r3, [r3]
 8008dbc:	623b      	str	r3, [r7, #32]
   return(result);
 8008dbe:	6a3b      	ldr	r3, [r7, #32]
 8008dc0:	f023 0301 	bic.w	r3, r3, #1
 8008dc4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	3308      	adds	r3, #8
 8008dcc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008dce:	633a      	str	r2, [r7, #48]	@ 0x30
 8008dd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dd2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008dd4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008dd6:	e841 2300 	strex	r3, r2, [r1]
 8008dda:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008ddc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d1e5      	bne.n	8008dae <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	2220      	movs	r2, #32
 8008de6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	2200      	movs	r2, #0
 8008dee:	671a      	str	r2, [r3, #112]	@ 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008df4:	2b01      	cmp	r3, #1
 8008df6:	d12e      	bne.n	8008e56 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	2200      	movs	r2, #0
 8008dfc:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e04:	693b      	ldr	r3, [r7, #16]
 8008e06:	e853 3f00 	ldrex	r3, [r3]
 8008e0a:	60fb      	str	r3, [r7, #12]
   return(result);
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	f023 0310 	bic.w	r3, r3, #16
 8008e12:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	461a      	mov	r2, r3
 8008e1a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008e1c:	61fb      	str	r3, [r7, #28]
 8008e1e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e20:	69b9      	ldr	r1, [r7, #24]
 8008e22:	69fa      	ldr	r2, [r7, #28]
 8008e24:	e841 2300 	strex	r3, r2, [r1]
 8008e28:	617b      	str	r3, [r7, #20]
   return(result);
 8008e2a:	697b      	ldr	r3, [r7, #20]
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d1e6      	bne.n	8008dfe <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	69db      	ldr	r3, [r3, #28]
 8008e36:	f003 0310 	and.w	r3, r3, #16
 8008e3a:	2b10      	cmp	r3, #16
 8008e3c:	d103      	bne.n	8008e46 <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	2210      	movs	r2, #16
 8008e44:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008e4c:	4619      	mov	r1, r3
 8008e4e:	6878      	ldr	r0, [r7, #4]
 8008e50:	f7ff f884 	bl	8007f5c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008e54:	e00b      	b.n	8008e6e <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8008e56:	6878      	ldr	r0, [r7, #4]
 8008e58:	f7f9 fc62 	bl	8002720 <HAL_UART_RxCpltCallback>
}
 8008e5c:	e007      	b.n	8008e6e <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	699a      	ldr	r2, [r3, #24]
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	f042 0208 	orr.w	r2, r2, #8
 8008e6c:	619a      	str	r2, [r3, #24]
}
 8008e6e:	bf00      	nop
 8008e70:	3758      	adds	r7, #88	@ 0x58
 8008e72:	46bd      	mov	sp, r7
 8008e74:	bd80      	pop	{r7, pc}

08008e76 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008e76:	b580      	push	{r7, lr}
 8008e78:	b096      	sub	sp, #88	@ 0x58
 8008e7a:	af00      	add	r7, sp, #0
 8008e7c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8008e84:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008e8e:	2b22      	cmp	r3, #34	@ 0x22
 8008e90:	f040 8095 	bne.w	8008fbe <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e9a:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008ea2:	653b      	str	r3, [r7, #80]	@ 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8008ea4:	f8b7 2054 	ldrh.w	r2, [r7, #84]	@ 0x54
 8008ea8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8008eac:	4013      	ands	r3, r2
 8008eae:	b29a      	uxth	r2, r3
 8008eb0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008eb2:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008eb8:	1c9a      	adds	r2, r3, #2
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008ec4:	b29b      	uxth	r3, r3
 8008ec6:	3b01      	subs	r3, #1
 8008ec8:	b29a      	uxth	r2, r3
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008ed6:	b29b      	uxth	r3, r3
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d178      	bne.n	8008fce <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ee2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008ee4:	e853 3f00 	ldrex	r3, [r3]
 8008ee8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008eea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008eec:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008ef0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	461a      	mov	r2, r3
 8008ef8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008efa:	643b      	str	r3, [r7, #64]	@ 0x40
 8008efc:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008efe:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008f00:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008f02:	e841 2300 	strex	r3, r2, [r1]
 8008f06:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008f08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d1e6      	bne.n	8008edc <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	3308      	adds	r3, #8
 8008f14:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f16:	6a3b      	ldr	r3, [r7, #32]
 8008f18:	e853 3f00 	ldrex	r3, [r3]
 8008f1c:	61fb      	str	r3, [r7, #28]
   return(result);
 8008f1e:	69fb      	ldr	r3, [r7, #28]
 8008f20:	f023 0301 	bic.w	r3, r3, #1
 8008f24:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	3308      	adds	r3, #8
 8008f2c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008f2e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008f30:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f32:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008f34:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008f36:	e841 2300 	strex	r3, r2, [r1]
 8008f3a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008f3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d1e5      	bne.n	8008f0e <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	2220      	movs	r2, #32
 8008f46:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	2200      	movs	r2, #0
 8008f4e:	671a      	str	r2, [r3, #112]	@ 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008f54:	2b01      	cmp	r3, #1
 8008f56:	d12e      	bne.n	8008fb6 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	2200      	movs	r2, #0
 8008f5c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	e853 3f00 	ldrex	r3, [r3]
 8008f6a:	60bb      	str	r3, [r7, #8]
   return(result);
 8008f6c:	68bb      	ldr	r3, [r7, #8]
 8008f6e:	f023 0310 	bic.w	r3, r3, #16
 8008f72:	647b      	str	r3, [r7, #68]	@ 0x44
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	461a      	mov	r2, r3
 8008f7a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008f7c:	61bb      	str	r3, [r7, #24]
 8008f7e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f80:	6979      	ldr	r1, [r7, #20]
 8008f82:	69ba      	ldr	r2, [r7, #24]
 8008f84:	e841 2300 	strex	r3, r2, [r1]
 8008f88:	613b      	str	r3, [r7, #16]
   return(result);
 8008f8a:	693b      	ldr	r3, [r7, #16]
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d1e6      	bne.n	8008f5e <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	69db      	ldr	r3, [r3, #28]
 8008f96:	f003 0310 	and.w	r3, r3, #16
 8008f9a:	2b10      	cmp	r3, #16
 8008f9c:	d103      	bne.n	8008fa6 <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	2210      	movs	r2, #16
 8008fa4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008fac:	4619      	mov	r1, r3
 8008fae:	6878      	ldr	r0, [r7, #4]
 8008fb0:	f7fe ffd4 	bl	8007f5c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008fb4:	e00b      	b.n	8008fce <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8008fb6:	6878      	ldr	r0, [r7, #4]
 8008fb8:	f7f9 fbb2 	bl	8002720 <HAL_UART_RxCpltCallback>
}
 8008fbc:	e007      	b.n	8008fce <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	699a      	ldr	r2, [r3, #24]
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	f042 0208 	orr.w	r2, r2, #8
 8008fcc:	619a      	str	r2, [r3, #24]
}
 8008fce:	bf00      	nop
 8008fd0:	3758      	adds	r7, #88	@ 0x58
 8008fd2:	46bd      	mov	sp, r7
 8008fd4:	bd80      	pop	{r7, pc}
	...

08008fd8 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008fd8:	b580      	push	{r7, lr}
 8008fda:	b0a6      	sub	sp, #152	@ 0x98
 8008fdc:	af00      	add	r7, sp, #0
 8008fde:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8008fe6:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	69db      	ldr	r3, [r3, #28]
 8008ff0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	689b      	ldr	r3, [r3, #8]
 8009004:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800900e:	2b22      	cmp	r3, #34	@ 0x22
 8009010:	f040 814f 	bne.w	80092b2 <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800901a:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800901e:	e0f6      	b.n	800920e <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009026:	f8a7 3084 	strh.w	r3, [r7, #132]	@ 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800902a:	f8b7 3084 	ldrh.w	r3, [r7, #132]	@ 0x84
 800902e:	b2d9      	uxtb	r1, r3
 8009030:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8009034:	b2da      	uxtb	r2, r3
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800903a:	400a      	ands	r2, r1
 800903c:	b2d2      	uxtb	r2, r2
 800903e:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009044:	1c5a      	adds	r2, r3, #1
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009050:	b29b      	uxth	r3, r3
 8009052:	3b01      	subs	r3, #1
 8009054:	b29a      	uxth	r2, r3
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	69db      	ldr	r3, [r3, #28]
 8009062:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8009066:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800906a:	f003 0307 	and.w	r3, r3, #7
 800906e:	2b00      	cmp	r3, #0
 8009070:	d053      	beq.n	800911a <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009072:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8009076:	f003 0301 	and.w	r3, r3, #1
 800907a:	2b00      	cmp	r3, #0
 800907c:	d011      	beq.n	80090a2 <UART_RxISR_8BIT_FIFOEN+0xca>
 800907e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009082:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009086:	2b00      	cmp	r3, #0
 8009088:	d00b      	beq.n	80090a2 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	2201      	movs	r2, #1
 8009090:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009098:	f043 0201 	orr.w	r2, r3, #1
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80090a2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80090a6:	f003 0302 	and.w	r3, r3, #2
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d011      	beq.n	80090d2 <UART_RxISR_8BIT_FIFOEN+0xfa>
 80090ae:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80090b2:	f003 0301 	and.w	r3, r3, #1
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d00b      	beq.n	80090d2 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	2202      	movs	r2, #2
 80090c0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80090c8:	f043 0204 	orr.w	r2, r3, #4
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80090d2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80090d6:	f003 0304 	and.w	r3, r3, #4
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d011      	beq.n	8009102 <UART_RxISR_8BIT_FIFOEN+0x12a>
 80090de:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80090e2:	f003 0301 	and.w	r3, r3, #1
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d00b      	beq.n	8009102 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	2204      	movs	r2, #4
 80090f0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80090f8:	f043 0202 	orr.w	r2, r3, #2
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009108:	2b00      	cmp	r3, #0
 800910a:	d006      	beq.n	800911a <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800910c:	6878      	ldr	r0, [r7, #4]
 800910e:	f7fe ff1c 	bl	8007f4a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	2200      	movs	r2, #0
 8009116:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009120:	b29b      	uxth	r3, r3
 8009122:	2b00      	cmp	r3, #0
 8009124:	d173      	bne.n	800920e <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800912c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800912e:	e853 3f00 	ldrex	r3, [r3]
 8009132:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 8009134:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009136:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800913a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	461a      	mov	r2, r3
 8009144:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8009148:	66bb      	str	r3, [r7, #104]	@ 0x68
 800914a:	667a      	str	r2, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800914c:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800914e:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8009150:	e841 2300 	strex	r3, r2, [r1]
 8009154:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8009156:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009158:	2b00      	cmp	r3, #0
 800915a:	d1e4      	bne.n	8009126 <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	3308      	adds	r3, #8
 8009162:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009164:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009166:	e853 3f00 	ldrex	r3, [r3]
 800916a:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800916c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800916e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009172:	f023 0301 	bic.w	r3, r3, #1
 8009176:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	3308      	adds	r3, #8
 800917e:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8009180:	657a      	str	r2, [r7, #84]	@ 0x54
 8009182:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009184:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009186:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8009188:	e841 2300 	strex	r3, r2, [r1]
 800918c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800918e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009190:	2b00      	cmp	r3, #0
 8009192:	d1e3      	bne.n	800915c <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	2220      	movs	r2, #32
 8009198:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	2200      	movs	r2, #0
 80091a0:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80091a6:	2b01      	cmp	r3, #1
 80091a8:	d12e      	bne.n	8009208 <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	2200      	movs	r2, #0
 80091ae:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80091b8:	e853 3f00 	ldrex	r3, [r3]
 80091bc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80091be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091c0:	f023 0310 	bic.w	r3, r3, #16
 80091c4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	461a      	mov	r2, r3
 80091cc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80091ce:	643b      	str	r3, [r7, #64]	@ 0x40
 80091d0:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091d2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80091d4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80091d6:	e841 2300 	strex	r3, r2, [r1]
 80091da:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80091dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d1e6      	bne.n	80091b0 <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	69db      	ldr	r3, [r3, #28]
 80091e8:	f003 0310 	and.w	r3, r3, #16
 80091ec:	2b10      	cmp	r3, #16
 80091ee:	d103      	bne.n	80091f8 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	2210      	movs	r2, #16
 80091f6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80091fe:	4619      	mov	r1, r3
 8009200:	6878      	ldr	r0, [r7, #4]
 8009202:	f7fe feab 	bl	8007f5c <HAL_UARTEx_RxEventCallback>
 8009206:	e002      	b.n	800920e <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8009208:	6878      	ldr	r0, [r7, #4]
 800920a:	f7f9 fa89 	bl	8002720 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800920e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8009212:	2b00      	cmp	r3, #0
 8009214:	d006      	beq.n	8009224 <UART_RxISR_8BIT_FIFOEN+0x24c>
 8009216:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800921a:	f003 0320 	and.w	r3, r3, #32
 800921e:	2b00      	cmp	r3, #0
 8009220:	f47f aefe 	bne.w	8009020 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800922a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800922e:	f8b7 3076 	ldrh.w	r3, [r7, #118]	@ 0x76
 8009232:	2b00      	cmp	r3, #0
 8009234:	d045      	beq.n	80092c2 <UART_RxISR_8BIT_FIFOEN+0x2ea>
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800923c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8009240:	429a      	cmp	r2, r3
 8009242:	d23e      	bcs.n	80092c2 <UART_RxISR_8BIT_FIFOEN+0x2ea>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	3308      	adds	r3, #8
 800924a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800924c:	6a3b      	ldr	r3, [r7, #32]
 800924e:	e853 3f00 	ldrex	r3, [r3]
 8009252:	61fb      	str	r3, [r7, #28]
   return(result);
 8009254:	69fb      	ldr	r3, [r7, #28]
 8009256:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800925a:	673b      	str	r3, [r7, #112]	@ 0x70
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	3308      	adds	r3, #8
 8009262:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8009264:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009266:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009268:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800926a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800926c:	e841 2300 	strex	r3, r2, [r1]
 8009270:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009272:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009274:	2b00      	cmp	r3, #0
 8009276:	d1e5      	bne.n	8009244 <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	4a14      	ldr	r2, [pc, #80]	@ (80092cc <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 800927c:	671a      	str	r2, [r3, #112]	@ 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	e853 3f00 	ldrex	r3, [r3]
 800928a:	60bb      	str	r3, [r7, #8]
   return(result);
 800928c:	68bb      	ldr	r3, [r7, #8]
 800928e:	f043 0320 	orr.w	r3, r3, #32
 8009292:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	461a      	mov	r2, r3
 800929a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800929c:	61bb      	str	r3, [r7, #24]
 800929e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092a0:	6979      	ldr	r1, [r7, #20]
 80092a2:	69ba      	ldr	r2, [r7, #24]
 80092a4:	e841 2300 	strex	r3, r2, [r1]
 80092a8:	613b      	str	r3, [r7, #16]
   return(result);
 80092aa:	693b      	ldr	r3, [r7, #16]
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d1e6      	bne.n	800927e <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80092b0:	e007      	b.n	80092c2 <UART_RxISR_8BIT_FIFOEN+0x2ea>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	699a      	ldr	r2, [r3, #24]
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	f042 0208 	orr.w	r2, r2, #8
 80092c0:	619a      	str	r2, [r3, #24]
}
 80092c2:	bf00      	nop
 80092c4:	3798      	adds	r7, #152	@ 0x98
 80092c6:	46bd      	mov	sp, r7
 80092c8:	bd80      	pop	{r7, pc}
 80092ca:	bf00      	nop
 80092cc:	08008d17 	.word	0x08008d17

080092d0 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80092d0:	b580      	push	{r7, lr}
 80092d2:	b0a8      	sub	sp, #160	@ 0xa0
 80092d4:	af00      	add	r7, sp, #0
 80092d6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80092de:	f8a7 309a 	strh.w	r3, [r7, #154]	@ 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	69db      	ldr	r3, [r3, #28]
 80092e8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	689b      	ldr	r3, [r3, #8]
 80092fc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009306:	2b22      	cmp	r3, #34	@ 0x22
 8009308:	f040 8153 	bne.w	80095b2 <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009312:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009316:	e0fa      	b.n	800950e <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800931e:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009326:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 800932a:	f8b7 208c 	ldrh.w	r2, [r7, #140]	@ 0x8c
 800932e:	f8b7 309a 	ldrh.w	r3, [r7, #154]	@ 0x9a
 8009332:	4013      	ands	r3, r2
 8009334:	b29a      	uxth	r2, r3
 8009336:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800933a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009340:	1c9a      	adds	r2, r3, #2
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800934c:	b29b      	uxth	r3, r3
 800934e:	3b01      	subs	r3, #1
 8009350:	b29a      	uxth	r2, r3
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	69db      	ldr	r3, [r3, #28]
 800935e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8009362:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009366:	f003 0307 	and.w	r3, r3, #7
 800936a:	2b00      	cmp	r3, #0
 800936c:	d053      	beq.n	8009416 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800936e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009372:	f003 0301 	and.w	r3, r3, #1
 8009376:	2b00      	cmp	r3, #0
 8009378:	d011      	beq.n	800939e <UART_RxISR_16BIT_FIFOEN+0xce>
 800937a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800937e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009382:	2b00      	cmp	r3, #0
 8009384:	d00b      	beq.n	800939e <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	2201      	movs	r2, #1
 800938c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009394:	f043 0201 	orr.w	r2, r3, #1
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800939e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80093a2:	f003 0302 	and.w	r3, r3, #2
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d011      	beq.n	80093ce <UART_RxISR_16BIT_FIFOEN+0xfe>
 80093aa:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80093ae:	f003 0301 	and.w	r3, r3, #1
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d00b      	beq.n	80093ce <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	2202      	movs	r2, #2
 80093bc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80093c4:	f043 0204 	orr.w	r2, r3, #4
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80093ce:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80093d2:	f003 0304 	and.w	r3, r3, #4
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d011      	beq.n	80093fe <UART_RxISR_16BIT_FIFOEN+0x12e>
 80093da:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80093de:	f003 0301 	and.w	r3, r3, #1
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d00b      	beq.n	80093fe <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	2204      	movs	r2, #4
 80093ec:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80093f4:	f043 0202 	orr.w	r2, r3, #2
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009404:	2b00      	cmp	r3, #0
 8009406:	d006      	beq.n	8009416 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009408:	6878      	ldr	r0, [r7, #4]
 800940a:	f7fe fd9e 	bl	8007f4a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	2200      	movs	r2, #0
 8009412:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800941c:	b29b      	uxth	r3, r3
 800941e:	2b00      	cmp	r3, #0
 8009420:	d175      	bne.n	800950e <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009428:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800942a:	e853 3f00 	ldrex	r3, [r3]
 800942e:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8009430:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009432:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009436:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	461a      	mov	r2, r3
 8009440:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009444:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009446:	66ba      	str	r2, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009448:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800944a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800944c:	e841 2300 	strex	r3, r2, [r1]
 8009450:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009452:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009454:	2b00      	cmp	r3, #0
 8009456:	d1e4      	bne.n	8009422 <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	3308      	adds	r3, #8
 800945e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009460:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009462:	e853 3f00 	ldrex	r3, [r3]
 8009466:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009468:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800946a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800946e:	f023 0301 	bic.w	r3, r3, #1
 8009472:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	3308      	adds	r3, #8
 800947c:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009480:	65ba      	str	r2, [r7, #88]	@ 0x58
 8009482:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009484:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009486:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009488:	e841 2300 	strex	r3, r2, [r1]
 800948c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800948e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009490:	2b00      	cmp	r3, #0
 8009492:	d1e1      	bne.n	8009458 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	2220      	movs	r2, #32
 8009498:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	2200      	movs	r2, #0
 80094a0:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80094a6:	2b01      	cmp	r3, #1
 80094a8:	d12e      	bne.n	8009508 <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	2200      	movs	r2, #0
 80094ae:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094b8:	e853 3f00 	ldrex	r3, [r3]
 80094bc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80094be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80094c0:	f023 0310 	bic.w	r3, r3, #16
 80094c4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	461a      	mov	r2, r3
 80094cc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80094ce:	647b      	str	r3, [r7, #68]	@ 0x44
 80094d0:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094d2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80094d4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80094d6:	e841 2300 	strex	r3, r2, [r1]
 80094da:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80094dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d1e6      	bne.n	80094b0 <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	69db      	ldr	r3, [r3, #28]
 80094e8:	f003 0310 	and.w	r3, r3, #16
 80094ec:	2b10      	cmp	r3, #16
 80094ee:	d103      	bne.n	80094f8 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	2210      	movs	r2, #16
 80094f6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80094fe:	4619      	mov	r1, r3
 8009500:	6878      	ldr	r0, [r7, #4]
 8009502:	f7fe fd2b 	bl	8007f5c <HAL_UARTEx_RxEventCallback>
 8009506:	e002      	b.n	800950e <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8009508:	6878      	ldr	r0, [r7, #4]
 800950a:	f7f9 f909 	bl	8002720 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800950e:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8009512:	2b00      	cmp	r3, #0
 8009514:	d006      	beq.n	8009524 <UART_RxISR_16BIT_FIFOEN+0x254>
 8009516:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800951a:	f003 0320 	and.w	r3, r3, #32
 800951e:	2b00      	cmp	r3, #0
 8009520:	f47f aefa 	bne.w	8009318 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800952a:	f8a7 307a 	strh.w	r3, [r7, #122]	@ 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800952e:	f8b7 307a 	ldrh.w	r3, [r7, #122]	@ 0x7a
 8009532:	2b00      	cmp	r3, #0
 8009534:	d045      	beq.n	80095c2 <UART_RxISR_16BIT_FIFOEN+0x2f2>
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800953c:	f8b7 207a 	ldrh.w	r2, [r7, #122]	@ 0x7a
 8009540:	429a      	cmp	r2, r3
 8009542:	d23e      	bcs.n	80095c2 <UART_RxISR_16BIT_FIFOEN+0x2f2>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	3308      	adds	r3, #8
 800954a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800954c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800954e:	e853 3f00 	ldrex	r3, [r3]
 8009552:	623b      	str	r3, [r7, #32]
   return(result);
 8009554:	6a3b      	ldr	r3, [r7, #32]
 8009556:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800955a:	677b      	str	r3, [r7, #116]	@ 0x74
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	3308      	adds	r3, #8
 8009562:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8009564:	633a      	str	r2, [r7, #48]	@ 0x30
 8009566:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009568:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800956a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800956c:	e841 2300 	strex	r3, r2, [r1]
 8009570:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009572:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009574:	2b00      	cmp	r3, #0
 8009576:	d1e5      	bne.n	8009544 <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	4a14      	ldr	r2, [pc, #80]	@ (80095cc <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 800957c:	671a      	str	r2, [r3, #112]	@ 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009584:	693b      	ldr	r3, [r7, #16]
 8009586:	e853 3f00 	ldrex	r3, [r3]
 800958a:	60fb      	str	r3, [r7, #12]
   return(result);
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	f043 0320 	orr.w	r3, r3, #32
 8009592:	673b      	str	r3, [r7, #112]	@ 0x70
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	461a      	mov	r2, r3
 800959a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800959c:	61fb      	str	r3, [r7, #28]
 800959e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095a0:	69b9      	ldr	r1, [r7, #24]
 80095a2:	69fa      	ldr	r2, [r7, #28]
 80095a4:	e841 2300 	strex	r3, r2, [r1]
 80095a8:	617b      	str	r3, [r7, #20]
   return(result);
 80095aa:	697b      	ldr	r3, [r7, #20]
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d1e6      	bne.n	800957e <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80095b0:	e007      	b.n	80095c2 <UART_RxISR_16BIT_FIFOEN+0x2f2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	699a      	ldr	r2, [r3, #24]
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	f042 0208 	orr.w	r2, r2, #8
 80095c0:	619a      	str	r2, [r3, #24]
}
 80095c2:	bf00      	nop
 80095c4:	37a0      	adds	r7, #160	@ 0xa0
 80095c6:	46bd      	mov	sp, r7
 80095c8:	bd80      	pop	{r7, pc}
 80095ca:	bf00      	nop
 80095cc:	08008e77 	.word	0x08008e77

080095d0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80095d0:	b480      	push	{r7}
 80095d2:	b083      	sub	sp, #12
 80095d4:	af00      	add	r7, sp, #0
 80095d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80095d8:	bf00      	nop
 80095da:	370c      	adds	r7, #12
 80095dc:	46bd      	mov	sp, r7
 80095de:	bc80      	pop	{r7}
 80095e0:	4770      	bx	lr

080095e2 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80095e2:	b480      	push	{r7}
 80095e4:	b083      	sub	sp, #12
 80095e6:	af00      	add	r7, sp, #0
 80095e8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80095ea:	bf00      	nop
 80095ec:	370c      	adds	r7, #12
 80095ee:	46bd      	mov	sp, r7
 80095f0:	bc80      	pop	{r7}
 80095f2:	4770      	bx	lr

080095f4 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80095f4:	b480      	push	{r7}
 80095f6:	b083      	sub	sp, #12
 80095f8:	af00      	add	r7, sp, #0
 80095fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80095fc:	bf00      	nop
 80095fe:	370c      	adds	r7, #12
 8009600:	46bd      	mov	sp, r7
 8009602:	bc80      	pop	{r7}
 8009604:	4770      	bx	lr

08009606 <HAL_UARTEx_StopModeWakeUpSourceConfig>:
  *          @arg @ref UART_WAKEUP_ON_STARTBIT
  *          @arg @ref UART_WAKEUP_ON_READDATA_NONEMPTY
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_StopModeWakeUpSourceConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 8009606:	b580      	push	{r7, lr}
 8009608:	b088      	sub	sp, #32
 800960a:	af02      	add	r7, sp, #8
 800960c:	60f8      	str	r0, [r7, #12]
 800960e:	1d3b      	adds	r3, r7, #4
 8009610:	e883 0006 	stmia.w	r3, {r1, r2}
  HAL_StatusTypeDef status = HAL_OK;
 8009614:	2300      	movs	r3, #0
 8009616:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance));
  /* check the wake-up selection parameter */
  assert_param(IS_UART_WAKEUP_SELECTION(WakeUpSelection.WakeUpEvent));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800961e:	2b01      	cmp	r3, #1
 8009620:	d101      	bne.n	8009626 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x20>
 8009622:	2302      	movs	r3, #2
 8009624:	e046      	b.n	80096b4 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xae>
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	2201      	movs	r2, #1
 800962a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	2224      	movs	r2, #36	@ 0x24
 8009632:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	681a      	ldr	r2, [r3, #0]
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	f022 0201 	bic.w	r2, r2, #1
 8009644:	601a      	str	r2, [r3, #0]

  /* Set the wake-up selection scheme */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	689b      	ldr	r3, [r3, #8]
 800964c:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8009650:	687a      	ldr	r2, [r7, #4]
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	430a      	orrs	r2, r1
 8009658:	609a      	str	r2, [r3, #8]

  if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	2b00      	cmp	r3, #0
 800965e:	d105      	bne.n	800966c <HAL_UARTEx_StopModeWakeUpSourceConfig+0x66>
  {
    UARTEx_Wakeup_AddressConfig(huart, WakeUpSelection);
 8009660:	1d3b      	adds	r3, r7, #4
 8009662:	e893 0006 	ldmia.w	r3, {r1, r2}
 8009666:	68f8      	ldr	r0, [r7, #12]
 8009668:	f000 f911 	bl	800988e <UARTEx_Wakeup_AddressConfig>
  }

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	681a      	ldr	r2, [r3, #0]
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	f042 0201 	orr.w	r2, r2, #1
 800967a:	601a      	str	r2, [r3, #0]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800967c:	f7f8 fb34 	bl	8001ce8 <HAL_GetTick>
 8009680:	6138      	str	r0, [r7, #16]

  /* Wait until REACK flag is set */
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009682:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009686:	9300      	str	r3, [sp, #0]
 8009688:	693b      	ldr	r3, [r7, #16]
 800968a:	2200      	movs	r2, #0
 800968c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8009690:	68f8      	ldr	r0, [r7, #12]
 8009692:	f7fe ffcf 	bl	8008634 <UART_WaitOnFlagUntilTimeout>
 8009696:	4603      	mov	r3, r0
 8009698:	2b00      	cmp	r3, #0
 800969a:	d002      	beq.n	80096a2 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x9c>
  {
    status = HAL_TIMEOUT;
 800969c:	2303      	movs	r3, #3
 800969e:	75fb      	strb	r3, [r7, #23]
 80096a0:	e003      	b.n	80096aa <HAL_UARTEx_StopModeWakeUpSourceConfig+0xa4>
  }
  else
  {
    /* Initialize the UART State */
    huart->gState = HAL_UART_STATE_READY;
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	2220      	movs	r2, #32
 80096a6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	2200      	movs	r2, #0
 80096ae:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return status;
 80096b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80096b4:	4618      	mov	r0, r3
 80096b6:	3718      	adds	r7, #24
 80096b8:	46bd      	mov	sp, r7
 80096ba:	bd80      	pop	{r7, pc}

080096bc <HAL_UARTEx_EnableStopMode>:
  * @note The UART is able to wake up the MCU from Stop 1 mode as long as UART clock is HSI or LSE.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableStopMode(UART_HandleTypeDef *huart)
{
 80096bc:	b480      	push	{r7}
 80096be:	b089      	sub	sp, #36	@ 0x24
 80096c0:	af00      	add	r7, sp, #0
 80096c2:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80096ca:	2b01      	cmp	r3, #1
 80096cc:	d101      	bne.n	80096d2 <HAL_UARTEx_EnableStopMode+0x16>
 80096ce:	2302      	movs	r3, #2
 80096d0:	e021      	b.n	8009716 <HAL_UARTEx_EnableStopMode+0x5a>
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	2201      	movs	r2, #1
 80096d6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set UESM bit */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	e853 3f00 	ldrex	r3, [r3]
 80096e6:	60bb      	str	r3, [r7, #8]
   return(result);
 80096e8:	68bb      	ldr	r3, [r7, #8]
 80096ea:	f043 0302 	orr.w	r3, r3, #2
 80096ee:	61fb      	str	r3, [r7, #28]
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	461a      	mov	r2, r3
 80096f6:	69fb      	ldr	r3, [r7, #28]
 80096f8:	61bb      	str	r3, [r7, #24]
 80096fa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096fc:	6979      	ldr	r1, [r7, #20]
 80096fe:	69ba      	ldr	r2, [r7, #24]
 8009700:	e841 2300 	strex	r3, r2, [r1]
 8009704:	613b      	str	r3, [r7, #16]
   return(result);
 8009706:	693b      	ldr	r3, [r7, #16]
 8009708:	2b00      	cmp	r3, #0
 800970a:	d1e6      	bne.n	80096da <HAL_UARTEx_EnableStopMode+0x1e>

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	2200      	movs	r2, #0
 8009710:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8009714:	2300      	movs	r3, #0
}
 8009716:	4618      	mov	r0, r3
 8009718:	3724      	adds	r7, #36	@ 0x24
 800971a:	46bd      	mov	sp, r7
 800971c:	bc80      	pop	{r7}
 800971e:	4770      	bx	lr

08009720 <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 8009720:	b580      	push	{r7, lr}
 8009722:	b084      	sub	sp, #16
 8009724:	af00      	add	r7, sp, #0
 8009726:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800972e:	2b01      	cmp	r3, #1
 8009730:	d101      	bne.n	8009736 <HAL_UARTEx_EnableFifoMode+0x16>
 8009732:	2302      	movs	r3, #2
 8009734:	e02b      	b.n	800978e <HAL_UARTEx_EnableFifoMode+0x6e>
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	2201      	movs	r2, #1
 800973a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	2224      	movs	r2, #36	@ 0x24
 8009742:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	681a      	ldr	r2, [r3, #0]
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	f022 0201 	bic.w	r2, r2, #1
 800975c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8009764:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 800976c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	68fa      	ldr	r2, [r7, #12]
 8009774:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009776:	6878      	ldr	r0, [r7, #4]
 8009778:	f000 f8ac 	bl	80098d4 <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	2220      	movs	r2, #32
 8009780:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	2200      	movs	r2, #0
 8009788:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800978c:	2300      	movs	r3, #0
}
 800978e:	4618      	mov	r0, r3
 8009790:	3710      	adds	r7, #16
 8009792:	46bd      	mov	sp, r7
 8009794:	bd80      	pop	{r7, pc}

08009796 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009796:	b580      	push	{r7, lr}
 8009798:	b084      	sub	sp, #16
 800979a:	af00      	add	r7, sp, #0
 800979c:	6078      	str	r0, [r7, #4]
 800979e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80097a6:	2b01      	cmp	r3, #1
 80097a8:	d101      	bne.n	80097ae <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80097aa:	2302      	movs	r3, #2
 80097ac:	e02d      	b.n	800980a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	2201      	movs	r2, #1
 80097b2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	2224      	movs	r2, #36	@ 0x24
 80097ba:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	681a      	ldr	r2, [r3, #0]
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	f022 0201 	bic.w	r2, r2, #1
 80097d4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	689b      	ldr	r3, [r3, #8]
 80097dc:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	683a      	ldr	r2, [r7, #0]
 80097e6:	430a      	orrs	r2, r1
 80097e8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80097ea:	6878      	ldr	r0, [r7, #4]
 80097ec:	f000 f872 	bl	80098d4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	68fa      	ldr	r2, [r7, #12]
 80097f6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	2220      	movs	r2, #32
 80097fc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	2200      	movs	r2, #0
 8009804:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8009808:	2300      	movs	r3, #0
}
 800980a:	4618      	mov	r0, r3
 800980c:	3710      	adds	r7, #16
 800980e:	46bd      	mov	sp, r7
 8009810:	bd80      	pop	{r7, pc}

08009812 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009812:	b580      	push	{r7, lr}
 8009814:	b084      	sub	sp, #16
 8009816:	af00      	add	r7, sp, #0
 8009818:	6078      	str	r0, [r7, #4]
 800981a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8009822:	2b01      	cmp	r3, #1
 8009824:	d101      	bne.n	800982a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009826:	2302      	movs	r3, #2
 8009828:	e02d      	b.n	8009886 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	2201      	movs	r2, #1
 800982e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	2224      	movs	r2, #36	@ 0x24
 8009836:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	681a      	ldr	r2, [r3, #0]
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	f022 0201 	bic.w	r2, r2, #1
 8009850:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	689b      	ldr	r3, [r3, #8]
 8009858:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	683a      	ldr	r2, [r7, #0]
 8009862:	430a      	orrs	r2, r1
 8009864:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009866:	6878      	ldr	r0, [r7, #4]
 8009868:	f000 f834 	bl	80098d4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	68fa      	ldr	r2, [r7, #12]
 8009872:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	2220      	movs	r2, #32
 8009878:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	2200      	movs	r2, #0
 8009880:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8009884:	2300      	movs	r3, #0
}
 8009886:	4618      	mov	r0, r3
 8009888:	3710      	adds	r7, #16
 800988a:	46bd      	mov	sp, r7
 800988c:	bd80      	pop	{r7, pc}

0800988e <UARTEx_Wakeup_AddressConfig>:
  * @param huart           UART handle.
  * @param WakeUpSelection UART wake up from stop mode parameters.
  * @retval None
  */
static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 800988e:	b480      	push	{r7}
 8009890:	b085      	sub	sp, #20
 8009892:	af00      	add	r7, sp, #0
 8009894:	60f8      	str	r0, [r7, #12]
 8009896:	1d3b      	adds	r3, r7, #4
 8009898:	e883 0006 	stmia.w	r3, {r1, r2}
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(WakeUpSelection.AddressLength));

  /* Set the USART address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	685b      	ldr	r3, [r3, #4]
 80098a2:	f023 0210 	bic.w	r2, r3, #16
 80098a6:	893b      	ldrh	r3, [r7, #8]
 80098a8:	4619      	mov	r1, r3
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	430a      	orrs	r2, r1
 80098b0:	605a      	str	r2, [r3, #4]

  /* Set the USART address node */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	685b      	ldr	r3, [r3, #4]
 80098b8:	f023 417f 	bic.w	r1, r3, #4278190080	@ 0xff000000
 80098bc:	7abb      	ldrb	r3, [r7, #10]
 80098be:	061a      	lsls	r2, r3, #24
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	430a      	orrs	r2, r1
 80098c6:	605a      	str	r2, [r3, #4]
}
 80098c8:	bf00      	nop
 80098ca:	3714      	adds	r7, #20
 80098cc:	46bd      	mov	sp, r7
 80098ce:	bc80      	pop	{r7}
 80098d0:	4770      	bx	lr
	...

080098d4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80098d4:	b480      	push	{r7}
 80098d6:	b085      	sub	sp, #20
 80098d8:	af00      	add	r7, sp, #0
 80098da:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d108      	bne.n	80098f6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	2201      	movs	r2, #1
 80098e8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	2201      	movs	r2, #1
 80098f0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80098f4:	e031      	b.n	800995a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80098f6:	2308      	movs	r3, #8
 80098f8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80098fa:	2308      	movs	r3, #8
 80098fc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	689b      	ldr	r3, [r3, #8]
 8009904:	0e5b      	lsrs	r3, r3, #25
 8009906:	b2db      	uxtb	r3, r3
 8009908:	f003 0307 	and.w	r3, r3, #7
 800990c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	689b      	ldr	r3, [r3, #8]
 8009914:	0f5b      	lsrs	r3, r3, #29
 8009916:	b2db      	uxtb	r3, r3
 8009918:	f003 0307 	and.w	r3, r3, #7
 800991c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800991e:	7bbb      	ldrb	r3, [r7, #14]
 8009920:	7b3a      	ldrb	r2, [r7, #12]
 8009922:	4910      	ldr	r1, [pc, #64]	@ (8009964 <UARTEx_SetNbDataToProcess+0x90>)
 8009924:	5c8a      	ldrb	r2, [r1, r2]
 8009926:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800992a:	7b3a      	ldrb	r2, [r7, #12]
 800992c:	490e      	ldr	r1, [pc, #56]	@ (8009968 <UARTEx_SetNbDataToProcess+0x94>)
 800992e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009930:	fb93 f3f2 	sdiv	r3, r3, r2
 8009934:	b29a      	uxth	r2, r3
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800993c:	7bfb      	ldrb	r3, [r7, #15]
 800993e:	7b7a      	ldrb	r2, [r7, #13]
 8009940:	4908      	ldr	r1, [pc, #32]	@ (8009964 <UARTEx_SetNbDataToProcess+0x90>)
 8009942:	5c8a      	ldrb	r2, [r1, r2]
 8009944:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009948:	7b7a      	ldrb	r2, [r7, #13]
 800994a:	4907      	ldr	r1, [pc, #28]	@ (8009968 <UARTEx_SetNbDataToProcess+0x94>)
 800994c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800994e:	fb93 f3f2 	sdiv	r3, r3, r2
 8009952:	b29a      	uxth	r2, r3
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800995a:	bf00      	nop
 800995c:	3714      	adds	r7, #20
 800995e:	46bd      	mov	sp, r7
 8009960:	bc80      	pop	{r7}
 8009962:	4770      	bx	lr
 8009964:	0801c19c 	.word	0x0801c19c
 8009968:	0801c1a4 	.word	0x0801c1a4

0800996c <MX_LoRaWAN_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void MX_LoRaWAN_Init(void)
{
 800996c:	b580      	push	{r7, lr}
 800996e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_LoRaWAN_Init_1 */

  /* USER CODE END MX_LoRaWAN_Init_1 */
  SystemApp_Init();
 8009970:	f7f8 f85a 	bl	8001a28 <SystemApp_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_2 */

  /* USER CODE END MX_LoRaWAN_Init_2 */
  LoRaWAN_Init();
 8009974:	f000 f820 	bl	80099b8 <LoRaWAN_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_3 */

  /* USER CODE END MX_LoRaWAN_Init_3 */
}
 8009978:	bf00      	nop
 800997a:	bd80      	pop	{r7, pc}

0800997c <MX_LoRaWAN_Process>:

void MX_LoRaWAN_Process(void)
{
 800997c:	b580      	push	{r7, lr}
 800997e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_LoRaWAN_Process_1 */

  /* USER CODE END MX_LoRaWAN_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8009980:	f04f 30ff 	mov.w	r0, #4294967295
 8009984:	f010 ff6e 	bl	801a864 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_LoRaWAN_Process_2 */

  /* USER CODE END MX_LoRaWAN_Process_2 */
}
 8009988:	bf00      	nop
 800998a:	bd80      	pop	{r7, pc}

0800998c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800998c:	b480      	push	{r7}
 800998e:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8009990:	f3bf 8f4f 	dsb	sy
}
 8009994:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8009996:	4b06      	ldr	r3, [pc, #24]	@ (80099b0 <__NVIC_SystemReset+0x24>)
 8009998:	68db      	ldr	r3, [r3, #12]
 800999a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800999e:	4904      	ldr	r1, [pc, #16]	@ (80099b0 <__NVIC_SystemReset+0x24>)
 80099a0:	4b04      	ldr	r3, [pc, #16]	@ (80099b4 <__NVIC_SystemReset+0x28>)
 80099a2:	4313      	orrs	r3, r2
 80099a4:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80099a6:	f3bf 8f4f 	dsb	sy
}
 80099aa:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80099ac:	bf00      	nop
 80099ae:	e7fd      	b.n	80099ac <__NVIC_SystemReset+0x20>
 80099b0:	e000ed00 	.word	0xe000ed00
 80099b4:	05fa0004 	.word	0x05fa0004

080099b8 <LoRaWAN_Init>:
/* USER CODE BEGIN EF */

/* USER CODE END EF */

void LoRaWAN_Init(void)
{
 80099b8:	b580      	push	{r7, lr}
 80099ba:	b086      	sub	sp, #24
 80099bc:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN LoRaWAN_Init_LV */
  uint32_t feature_version = 0UL;
 80099be:	2300      	movs	r3, #0
 80099c0:	607b      	str	r3, [r7, #4]
  /* USER CODE END LoRaWAN_Init_LV */

  /* USER CODE BEGIN LoRaWAN_Init_1 */

  /* Get LoRaWAN APP version*/
  APP_LOG(TS_OFF, VLEVEL_M, "APPLICATION_VERSION: V%X.%X.%X\r\n",
 80099c2:	2300      	movs	r3, #0
 80099c4:	9302      	str	r3, [sp, #8]
 80099c6:	2302      	movs	r3, #2
 80099c8:	9301      	str	r3, [sp, #4]
 80099ca:	2301      	movs	r3, #1
 80099cc:	9300      	str	r3, [sp, #0]
 80099ce:	4b5a      	ldr	r3, [pc, #360]	@ (8009b38 <LoRaWAN_Init+0x180>)
 80099d0:	2200      	movs	r2, #0
 80099d2:	2100      	movs	r1, #0
 80099d4:	2002      	movs	r0, #2
 80099d6:	f011 fb91 	bl	801b0fc <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(APP_VERSION_MAIN),
          (uint8_t)(APP_VERSION_SUB1),
          (uint8_t)(APP_VERSION_SUB2));

  /* Get MW LoRaWAN info */
  APP_LOG(TS_OFF, VLEVEL_M, "MW_LORAWAN_VERSION:  V%X.%X.%X\r\n",
 80099da:	2300      	movs	r3, #0
 80099dc:	9302      	str	r3, [sp, #8]
 80099de:	2304      	movs	r3, #4
 80099e0:	9301      	str	r3, [sp, #4]
 80099e2:	2302      	movs	r3, #2
 80099e4:	9300      	str	r3, [sp, #0]
 80099e6:	4b55      	ldr	r3, [pc, #340]	@ (8009b3c <LoRaWAN_Init+0x184>)
 80099e8:	2200      	movs	r2, #0
 80099ea:	2100      	movs	r1, #0
 80099ec:	2002      	movs	r0, #2
 80099ee:	f011 fb85 	bl	801b0fc <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(LORAWAN_VERSION_MAIN),
          (uint8_t)(LORAWAN_VERSION_SUB1),
          (uint8_t)(LORAWAN_VERSION_SUB2));

  /* Get MW SubGhz_Phy info */
  APP_LOG(TS_OFF, VLEVEL_M, "MW_RADIO_VERSION:    V%X.%X.%X\r\n",
 80099f2:	2300      	movs	r3, #0
 80099f4:	9302      	str	r3, [sp, #8]
 80099f6:	2302      	movs	r3, #2
 80099f8:	9301      	str	r3, [sp, #4]
 80099fa:	2301      	movs	r3, #1
 80099fc:	9300      	str	r3, [sp, #0]
 80099fe:	4b50      	ldr	r3, [pc, #320]	@ (8009b40 <LoRaWAN_Init+0x188>)
 8009a00:	2200      	movs	r2, #0
 8009a02:	2100      	movs	r1, #0
 8009a04:	2002      	movs	r0, #2
 8009a06:	f011 fb79 	bl	801b0fc <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(SUBGHZ_PHY_VERSION_MAIN),
          (uint8_t)(SUBGHZ_PHY_VERSION_SUB1),
          (uint8_t)(SUBGHZ_PHY_VERSION_SUB2));

  /* Get LoRaWAN Link Layer info */
  LmHandlerGetVersion(LORAMAC_HANDLER_L2_VERSION, &feature_version);
 8009a0a:	1d3b      	adds	r3, r7, #4
 8009a0c:	4619      	mov	r1, r3
 8009a0e:	2000      	movs	r0, #0
 8009a10:	f003 f976 	bl	800cd00 <LmHandlerGetVersion>
  APP_LOG(TS_OFF, VLEVEL_M, "L2_SPEC_VERSION:     V%X.%X.%X\r\n",
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	0e1b      	lsrs	r3, r3, #24
 8009a18:	b2db      	uxtb	r3, r3
 8009a1a:	461a      	mov	r2, r3
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	0c1b      	lsrs	r3, r3, #16
 8009a20:	b2db      	uxtb	r3, r3
 8009a22:	4619      	mov	r1, r3
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	0a1b      	lsrs	r3, r3, #8
 8009a28:	b2db      	uxtb	r3, r3
 8009a2a:	9302      	str	r3, [sp, #8]
 8009a2c:	9101      	str	r1, [sp, #4]
 8009a2e:	9200      	str	r2, [sp, #0]
 8009a30:	4b44      	ldr	r3, [pc, #272]	@ (8009b44 <LoRaWAN_Init+0x18c>)
 8009a32:	2200      	movs	r2, #0
 8009a34:	2100      	movs	r1, #0
 8009a36:	2002      	movs	r0, #2
 8009a38:	f011 fb60 	bl	801b0fc <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(feature_version >> 24),
          (uint8_t)(feature_version >> 16),
          (uint8_t)(feature_version >> 8));

  /* Get LoRaWAN Regional Parameters info */
  LmHandlerGetVersion(LORAMAC_HANDLER_REGION_VERSION, &feature_version);
 8009a3c:	1d3b      	adds	r3, r7, #4
 8009a3e:	4619      	mov	r1, r3
 8009a40:	2001      	movs	r0, #1
 8009a42:	f003 f95d 	bl	800cd00 <LmHandlerGetVersion>
  APP_LOG(TS_OFF, VLEVEL_M, "RP_SPEC_VERSION:     V%X-%X.%X.%X\r\n",
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	0e1b      	lsrs	r3, r3, #24
 8009a4a:	b2db      	uxtb	r3, r3
 8009a4c:	461a      	mov	r2, r3
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	0c1b      	lsrs	r3, r3, #16
 8009a52:	b2db      	uxtb	r3, r3
 8009a54:	4619      	mov	r1, r3
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	0a1b      	lsrs	r3, r3, #8
 8009a5a:	b2db      	uxtb	r3, r3
 8009a5c:	6878      	ldr	r0, [r7, #4]
 8009a5e:	b2c0      	uxtb	r0, r0
 8009a60:	9003      	str	r0, [sp, #12]
 8009a62:	9302      	str	r3, [sp, #8]
 8009a64:	9101      	str	r1, [sp, #4]
 8009a66:	9200      	str	r2, [sp, #0]
 8009a68:	4b37      	ldr	r3, [pc, #220]	@ (8009b48 <LoRaWAN_Init+0x190>)
 8009a6a:	2200      	movs	r2, #0
 8009a6c:	2100      	movs	r1, #0
 8009a6e:	2002      	movs	r0, #2
 8009a70:	f011 fb44 	bl	801b0fc <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(feature_version >> 24),
          (uint8_t)(feature_version >> 16),
          (uint8_t)(feature_version >> 8),
          (uint8_t)(feature_version));

  UTIL_TIMER_Create(&TxLedTimer, LED_PERIOD_TIME, UTIL_TIMER_ONESHOT, OnTxTimerLedEvent, NULL);
 8009a74:	2300      	movs	r3, #0
 8009a76:	9300      	str	r3, [sp, #0]
 8009a78:	4b34      	ldr	r3, [pc, #208]	@ (8009b4c <LoRaWAN_Init+0x194>)
 8009a7a:	2200      	movs	r2, #0
 8009a7c:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8009a80:	4833      	ldr	r0, [pc, #204]	@ (8009b50 <LoRaWAN_Init+0x198>)
 8009a82:	f011 f88d 	bl	801aba0 <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&RxLedTimer, LED_PERIOD_TIME, UTIL_TIMER_ONESHOT, OnRxTimerLedEvent, NULL);
 8009a86:	2300      	movs	r3, #0
 8009a88:	9300      	str	r3, [sp, #0]
 8009a8a:	4b32      	ldr	r3, [pc, #200]	@ (8009b54 <LoRaWAN_Init+0x19c>)
 8009a8c:	2200      	movs	r2, #0
 8009a8e:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8009a92:	4831      	ldr	r0, [pc, #196]	@ (8009b58 <LoRaWAN_Init+0x1a0>)
 8009a94:	f011 f884 	bl	801aba0 <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&JoinLedTimer, LED_PERIOD_TIME, UTIL_TIMER_PERIODIC, OnJoinTimerLedEvent, NULL);
 8009a98:	2300      	movs	r3, #0
 8009a9a:	9300      	str	r3, [sp, #0]
 8009a9c:	4b2f      	ldr	r3, [pc, #188]	@ (8009b5c <LoRaWAN_Init+0x1a4>)
 8009a9e:	2201      	movs	r2, #1
 8009aa0:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8009aa4:	482e      	ldr	r0, [pc, #184]	@ (8009b60 <LoRaWAN_Init+0x1a8>)
 8009aa6:	f011 f87b 	bl	801aba0 <UTIL_TIMER_Create>

  /* USER CODE END LoRaWAN_Init_1 */

  UTIL_TIMER_Create(&StopJoinTimer, JOIN_TIME, UTIL_TIMER_ONESHOT, OnStopJoinTimerEvent, NULL);
 8009aaa:	2300      	movs	r3, #0
 8009aac:	9300      	str	r3, [sp, #0]
 8009aae:	4b2d      	ldr	r3, [pc, #180]	@ (8009b64 <LoRaWAN_Init+0x1ac>)
 8009ab0:	2200      	movs	r2, #0
 8009ab2:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8009ab6:	482c      	ldr	r0, [pc, #176]	@ (8009b68 <LoRaWAN_Init+0x1b0>)
 8009ab8:	f011 f872 	bl	801aba0 <UTIL_TIMER_Create>

  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LmHandlerProcess), UTIL_SEQ_RFU, LmHandlerProcess);
 8009abc:	4a2b      	ldr	r2, [pc, #172]	@ (8009b6c <LoRaWAN_Init+0x1b4>)
 8009abe:	2100      	movs	r1, #0
 8009ac0:	2001      	movs	r0, #1
 8009ac2:	f010 ffcb 	bl	801aa5c <UTIL_SEQ_RegTask>

  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), UTIL_SEQ_RFU, SendTxData);
 8009ac6:	4a2a      	ldr	r2, [pc, #168]	@ (8009b70 <LoRaWAN_Init+0x1b8>)
 8009ac8:	2100      	movs	r1, #0
 8009aca:	2002      	movs	r0, #2
 8009acc:	f010 ffc6 	bl	801aa5c <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaStoreContextEvent), UTIL_SEQ_RFU, StoreContext);
 8009ad0:	4a28      	ldr	r2, [pc, #160]	@ (8009b74 <LoRaWAN_Init+0x1bc>)
 8009ad2:	2100      	movs	r1, #0
 8009ad4:	2004      	movs	r0, #4
 8009ad6:	f010 ffc1 	bl	801aa5c <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaStopJoinEvent), UTIL_SEQ_RFU, StopJoin);
 8009ada:	4a27      	ldr	r2, [pc, #156]	@ (8009b78 <LoRaWAN_Init+0x1c0>)
 8009adc:	2100      	movs	r1, #0
 8009ade:	2008      	movs	r0, #8
 8009ae0:	f010 ffbc 	bl	801aa5c <UTIL_SEQ_RegTask>

  /* Init Info table used by LmHandler*/
  LoraInfo_Init();
 8009ae4:	f000 fd38 	bl	800a558 <LoraInfo_Init>

  /* Init the Lora Stack*/
  LmHandlerInit(&LmHandlerCallbacks, APP_VERSION);
 8009ae8:	f04f 7181 	mov.w	r1, #16908288	@ 0x1020000
 8009aec:	4823      	ldr	r0, [pc, #140]	@ (8009b7c <LoRaWAN_Init+0x1c4>)
 8009aee:	f002 f9ed 	bl	800becc <LmHandlerInit>

  LmHandlerConfigure(&LmHandlerParams);
 8009af2:	4823      	ldr	r0, [pc, #140]	@ (8009b80 <LoRaWAN_Init+0x1c8>)
 8009af4:	f002 fa48 	bl	800bf88 <LmHandlerConfigure>

  /* USER CODE BEGIN LoRaWAN_Init_2 */
  UTIL_TIMER_Start(&JoinLedTimer);
 8009af8:	4819      	ldr	r0, [pc, #100]	@ (8009b60 <LoRaWAN_Init+0x1a8>)
 8009afa:	f011 f887 	bl	801ac0c <UTIL_TIMER_Start>

  /* USER CODE END LoRaWAN_Init_2 */

  LmHandlerJoin(ActivationType, ForceRejoin);
 8009afe:	4b21      	ldr	r3, [pc, #132]	@ (8009b84 <LoRaWAN_Init+0x1cc>)
 8009b00:	781b      	ldrb	r3, [r3, #0]
 8009b02:	4a21      	ldr	r2, [pc, #132]	@ (8009b88 <LoRaWAN_Init+0x1d0>)
 8009b04:	7812      	ldrb	r2, [r2, #0]
 8009b06:	4611      	mov	r1, r2
 8009b08:	4618      	mov	r0, r3
 8009b0a:	f002 fbb9 	bl	800c280 <LmHandlerJoin>

  if (EventType == TX_ON_TIMER)
 8009b0e:	4b1f      	ldr	r3, [pc, #124]	@ (8009b8c <LoRaWAN_Init+0x1d4>)
 8009b10:	781b      	ldrb	r3, [r3, #0]
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d10b      	bne.n	8009b2e <LoRaWAN_Init+0x176>
  {
    /* send every time timer elapses */
    UTIL_TIMER_Create(&TxTimer, TxPeriodicity, UTIL_TIMER_ONESHOT, OnTxTimerEvent, NULL);
 8009b16:	4b1e      	ldr	r3, [pc, #120]	@ (8009b90 <LoRaWAN_Init+0x1d8>)
 8009b18:	6819      	ldr	r1, [r3, #0]
 8009b1a:	2300      	movs	r3, #0
 8009b1c:	9300      	str	r3, [sp, #0]
 8009b1e:	4b1d      	ldr	r3, [pc, #116]	@ (8009b94 <LoRaWAN_Init+0x1dc>)
 8009b20:	2200      	movs	r2, #0
 8009b22:	481d      	ldr	r0, [pc, #116]	@ (8009b98 <LoRaWAN_Init+0x1e0>)
 8009b24:	f011 f83c 	bl	801aba0 <UTIL_TIMER_Create>
    UTIL_TIMER_Start(&TxTimer);
 8009b28:	481b      	ldr	r0, [pc, #108]	@ (8009b98 <LoRaWAN_Init+0x1e0>)
 8009b2a:	f011 f86f 	bl	801ac0c <UTIL_TIMER_Start>
  }

  /* USER CODE BEGIN LoRaWAN_Init_Last */

  /* USER CODE END LoRaWAN_Init_Last */
}
 8009b2e:	bf00      	nop
 8009b30:	3708      	adds	r7, #8
 8009b32:	46bd      	mov	sp, r7
 8009b34:	bd80      	pop	{r7, pc}
 8009b36:	bf00      	nop
 8009b38:	0801b7a8 	.word	0x0801b7a8
 8009b3c:	0801b7cc 	.word	0x0801b7cc
 8009b40:	0801b7f0 	.word	0x0801b7f0
 8009b44:	0801b814 	.word	0x0801b814
 8009b48:	0801b838 	.word	0x0801b838
 8009b4c:	0800a04d 	.word	0x0800a04d
 8009b50:	20000460 	.word	0x20000460
 8009b54:	0800a05f 	.word	0x0800a05f
 8009b58:	20000478 	.word	0x20000478
 8009b5c:	0800a071 	.word	0x0800a071
 8009b60:	20000490 	.word	0x20000490
 8009b64:	0800a421 	.word	0x0800a421
 8009b68:	20000354 	.word	0x20000354
 8009b6c:	0800c215 	.word	0x0800c215
 8009b70:	08009d0d 	.word	0x08009d0d
 8009b74:	0800a445 	.word	0x0800a445
 8009b78:	0800a3a1 	.word	0x0800a3a1
 8009b7c:	20000024 	.word	0x20000024
 8009b80:	20000070 	.word	0x20000070
 8009b84:	20000020 	.word	0x20000020
 8009b88:	20000021 	.word	0x20000021
 8009b8c:	20000338 	.word	0x20000338
 8009b90:	20000084 	.word	0x20000084
 8009b94:	0800a029 	.word	0x0800a029
 8009b98:	2000033c 	.word	0x2000033c

08009b9c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN PB_Callbacks */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8009b9c:	b580      	push	{r7, lr}
 8009b9e:	b082      	sub	sp, #8
 8009ba0:	af00      	add	r7, sp, #0
 8009ba2:	4603      	mov	r3, r0
 8009ba4:	80fb      	strh	r3, [r7, #6]
  switch (GPIO_Pin)
 8009ba6:	88fb      	ldrh	r3, [r7, #6]
 8009ba8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009bac:	d104      	bne.n	8009bb8 <HAL_GPIO_EXTI_Callback+0x1c>
  {
    case  BUT1_Pin:
    	// XXX: always initialized
      if (EventType == TX_ON_EVENT || 1)
      {
        UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), CFG_SEQ_Prio_0);
 8009bae:	2100      	movs	r1, #0
 8009bb0:	2002      	movs	r0, #2
 8009bb2:	f010 ff75 	bl	801aaa0 <UTIL_SEQ_SetTask>
      }
      break;
 8009bb6:	e000      	b.n	8009bba <HAL_GPIO_EXTI_Callback+0x1e>
    default:
      break;
 8009bb8:	bf00      	nop
  }
}
 8009bba:	bf00      	nop
 8009bbc:	3708      	adds	r7, #8
 8009bbe:	46bd      	mov	sp, r7
 8009bc0:	bd80      	pop	{r7, pc}
	...

08009bc4 <OnRxData>:
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

static void OnRxData(LmHandlerAppData_t *appData, LmHandlerRxParams_t *params)
{
 8009bc4:	b5b0      	push	{r4, r5, r7, lr}
 8009bc6:	b08a      	sub	sp, #40	@ 0x28
 8009bc8:	af06      	add	r7, sp, #24
 8009bca:	6078      	str	r0, [r7, #4]
 8009bcc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN OnRxData_1 */
  uint8_t RxPort = 0;
 8009bce:	2300      	movs	r3, #0
 8009bd0:	73fb      	strb	r3, [r7, #15]

  if (params != NULL)
 8009bd2:	683b      	ldr	r3, [r7, #0]
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	f000 8086 	beq.w	8009ce6 <OnRxData+0x122>
  {
#if 0   // XXX:
    HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET); /* LED_BLUE */
#endif

    UTIL_TIMER_Start(&RxLedTimer);
 8009bda:	4845      	ldr	r0, [pc, #276]	@ (8009cf0 <OnRxData+0x12c>)
 8009bdc:	f011 f816 	bl	801ac0c <UTIL_TIMER_Start>

    if (params->IsMcpsIndication)
 8009be0:	683b      	ldr	r3, [r7, #0]
 8009be2:	781b      	ldrb	r3, [r3, #0]
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d05a      	beq.n	8009c9e <OnRxData+0xda>
    {
      if (appData != NULL)
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d057      	beq.n	8009c9e <OnRxData+0xda>
      {
        RxPort = appData->Port;
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	781b      	ldrb	r3, [r3, #0]
 8009bf2:	73fb      	strb	r3, [r7, #15]
        if (appData->Buffer != NULL)
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	685b      	ldr	r3, [r3, #4]
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d050      	beq.n	8009c9e <OnRxData+0xda>
        {
          switch (appData->Port)
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	781b      	ldrb	r3, [r3, #0]
 8009c00:	2b02      	cmp	r3, #2
 8009c02:	d01f      	beq.n	8009c44 <OnRxData+0x80>
 8009c04:	2b03      	cmp	r3, #3
 8009c06:	d145      	bne.n	8009c94 <OnRxData+0xd0>
          {
            case LORAWAN_SWITCH_CLASS_PORT:
              /*this port switches the class*/
              if (appData->BufferSize == 1)
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	785b      	ldrb	r3, [r3, #1]
 8009c0c:	2b01      	cmp	r3, #1
 8009c0e:	d143      	bne.n	8009c98 <OnRxData+0xd4>
              {
                switch (appData->Buffer[0])
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	685b      	ldr	r3, [r3, #4]
 8009c14:	781b      	ldrb	r3, [r3, #0]
 8009c16:	2b02      	cmp	r3, #2
 8009c18:	d00e      	beq.n	8009c38 <OnRxData+0x74>
 8009c1a:	2b02      	cmp	r3, #2
 8009c1c:	dc10      	bgt.n	8009c40 <OnRxData+0x7c>
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d002      	beq.n	8009c28 <OnRxData+0x64>
 8009c22:	2b01      	cmp	r3, #1
 8009c24:	d004      	beq.n	8009c30 <OnRxData+0x6c>
                  {
                    LmHandlerRequestClass(CLASS_C);
                    break;
                  }
                  default:
                    break;
 8009c26:	e00b      	b.n	8009c40 <OnRxData+0x7c>
                    LmHandlerRequestClass(CLASS_A);
 8009c28:	2000      	movs	r0, #0
 8009c2a:	f002 fcb5 	bl	800c598 <LmHandlerRequestClass>
                    break;
 8009c2e:	e008      	b.n	8009c42 <OnRxData+0x7e>
                    LmHandlerRequestClass(CLASS_B);
 8009c30:	2001      	movs	r0, #1
 8009c32:	f002 fcb1 	bl	800c598 <LmHandlerRequestClass>
                    break;
 8009c36:	e004      	b.n	8009c42 <OnRxData+0x7e>
                    LmHandlerRequestClass(CLASS_C);
 8009c38:	2002      	movs	r0, #2
 8009c3a:	f002 fcad 	bl	800c598 <LmHandlerRequestClass>
                    break;
 8009c3e:	e000      	b.n	8009c42 <OnRxData+0x7e>
                    break;
 8009c40:	bf00      	nop
                }
              }
              break;
 8009c42:	e029      	b.n	8009c98 <OnRxData+0xd4>
            case LORAWAN_USER_APP_PORT:
              if (appData->BufferSize == 1)
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	785b      	ldrb	r3, [r3, #1]
 8009c48:	2b01      	cmp	r3, #1
 8009c4a:	d127      	bne.n	8009c9c <OnRxData+0xd8>
              {
                AppLedStateOn = appData->Buffer[0] & 0x01;
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	685b      	ldr	r3, [r3, #4]
 8009c50:	781b      	ldrb	r3, [r3, #0]
 8009c52:	f003 0301 	and.w	r3, r3, #1
 8009c56:	b2da      	uxtb	r2, r3
 8009c58:	4b26      	ldr	r3, [pc, #152]	@ (8009cf4 <OnRxData+0x130>)
 8009c5a:	701a      	strb	r2, [r3, #0]
                if (AppLedStateOn == RESET)
 8009c5c:	4b25      	ldr	r3, [pc, #148]	@ (8009cf4 <OnRxData+0x130>)
 8009c5e:	781b      	ldrb	r3, [r3, #0]
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d10b      	bne.n	8009c7c <OnRxData+0xb8>
                {
                  APP_LOG(TS_OFF, VLEVEL_H, "LED OFF\r\n");
 8009c64:	4b24      	ldr	r3, [pc, #144]	@ (8009cf8 <OnRxData+0x134>)
 8009c66:	2200      	movs	r2, #0
 8009c68:	2100      	movs	r1, #0
 8009c6a:	2003      	movs	r0, #3
 8009c6c:	f011 fa46 	bl	801b0fc <UTIL_ADV_TRACE_COND_FSend>
                  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET); /* LED_RED */
 8009c70:	2201      	movs	r2, #1
 8009c72:	2120      	movs	r1, #32
 8009c74:	4821      	ldr	r0, [pc, #132]	@ (8009cfc <OnRxData+0x138>)
 8009c76:	f7fb f8e9 	bl	8004e4c <HAL_GPIO_WritePin>
                {
                  APP_LOG(TS_OFF, VLEVEL_H, "LED ON\r\n");
                  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_RED */
                }
              }
              break;
 8009c7a:	e00f      	b.n	8009c9c <OnRxData+0xd8>
                  APP_LOG(TS_OFF, VLEVEL_H, "LED ON\r\n");
 8009c7c:	4b20      	ldr	r3, [pc, #128]	@ (8009d00 <OnRxData+0x13c>)
 8009c7e:	2200      	movs	r2, #0
 8009c80:	2100      	movs	r1, #0
 8009c82:	2003      	movs	r0, #3
 8009c84:	f011 fa3a 	bl	801b0fc <UTIL_ADV_TRACE_COND_FSend>
                  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_RED */
 8009c88:	2200      	movs	r2, #0
 8009c8a:	2120      	movs	r1, #32
 8009c8c:	481b      	ldr	r0, [pc, #108]	@ (8009cfc <OnRxData+0x138>)
 8009c8e:	f7fb f8dd 	bl	8004e4c <HAL_GPIO_WritePin>
              break;
 8009c92:	e003      	b.n	8009c9c <OnRxData+0xd8>

            default:

              break;
 8009c94:	bf00      	nop
 8009c96:	e002      	b.n	8009c9e <OnRxData+0xda>
              break;
 8009c98:	bf00      	nop
 8009c9a:	e000      	b.n	8009c9e <OnRxData+0xda>
              break;
 8009c9c:	bf00      	nop
          }
        }
      }
    }
    if (params->RxSlot < RX_SLOT_NONE)
 8009c9e:	683b      	ldr	r3, [r7, #0]
 8009ca0:	7c1b      	ldrb	r3, [r3, #16]
 8009ca2:	2b05      	cmp	r3, #5
 8009ca4:	d81f      	bhi.n	8009ce6 <OnRxData+0x122>
    {
      APP_LOG(TS_OFF, VLEVEL_H, "###### D/L FRAME:%04d | PORT:%d | DR:%d | SLOT:%s | RSSI:%d | SNR:%d\r\n",
 8009ca6:	683b      	ldr	r3, [r7, #0]
 8009ca8:	68db      	ldr	r3, [r3, #12]
 8009caa:	7bfa      	ldrb	r2, [r7, #15]
 8009cac:	6839      	ldr	r1, [r7, #0]
 8009cae:	f991 1008 	ldrsb.w	r1, [r1, #8]
 8009cb2:	460c      	mov	r4, r1
 8009cb4:	6839      	ldr	r1, [r7, #0]
 8009cb6:	7c09      	ldrb	r1, [r1, #16]
 8009cb8:	4608      	mov	r0, r1
 8009cba:	4912      	ldr	r1, [pc, #72]	@ (8009d04 <OnRxData+0x140>)
 8009cbc:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8009cc0:	6838      	ldr	r0, [r7, #0]
 8009cc2:	f990 0009 	ldrsb.w	r0, [r0, #9]
 8009cc6:	4605      	mov	r5, r0
 8009cc8:	6838      	ldr	r0, [r7, #0]
 8009cca:	f990 000a 	ldrsb.w	r0, [r0, #10]
 8009cce:	9005      	str	r0, [sp, #20]
 8009cd0:	9504      	str	r5, [sp, #16]
 8009cd2:	9103      	str	r1, [sp, #12]
 8009cd4:	9402      	str	r4, [sp, #8]
 8009cd6:	9201      	str	r2, [sp, #4]
 8009cd8:	9300      	str	r3, [sp, #0]
 8009cda:	4b0b      	ldr	r3, [pc, #44]	@ (8009d08 <OnRxData+0x144>)
 8009cdc:	2200      	movs	r2, #0
 8009cde:	2100      	movs	r1, #0
 8009ce0:	2003      	movs	r0, #3
 8009ce2:	f011 fa0b 	bl	801b0fc <UTIL_ADV_TRACE_COND_FSend>
              params->DownlinkCounter, RxPort, params->Datarate, slotStrings[params->RxSlot], params->Rssi, params->Snr);
    }
  }
  /* USER CODE END OnRxData_1 */
}
 8009ce6:	bf00      	nop
 8009ce8:	3710      	adds	r7, #16
 8009cea:	46bd      	mov	sp, r7
 8009cec:	bdb0      	pop	{r4, r5, r7, pc}
 8009cee:	bf00      	nop
 8009cf0:	20000478 	.word	0x20000478
 8009cf4:	2000045e 	.word	0x2000045e
 8009cf8:	0801b85c 	.word	0x0801b85c
 8009cfc:	48000400 	.word	0x48000400
 8009d00:	0801b868 	.word	0x0801b868
 8009d04:	20000008 	.word	0x20000008
 8009d08:	0801b874 	.word	0x0801b874

08009d0c <SendTxData>:

static void SendTxData(void)
{
 8009d0c:	b590      	push	{r4, r7, lr}
 8009d0e:	b091      	sub	sp, #68	@ 0x44
 8009d10:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN SendTxData_1 */
  LmHandlerErrorStatus_t status = LORAMAC_HANDLER_ERROR;
 8009d12:	23ff      	movs	r3, #255	@ 0xff
 8009d14:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  uint8_t batteryLevel = GetBatteryLevel();
 8009d18:	f7f7 feba 	bl	8001a90 <GetBatteryLevel>
 8009d1c:	4603      	mov	r3, r0
 8009d1e:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
  sensor_t sensor_data;
  UTIL_TIMER_Time_t nextTxIn = 0;
 8009d22:	2300      	movs	r3, #0
 8009d24:	637b      	str	r3, [r7, #52]	@ 0x34

#ifdef CAYENNE_LPP
  uint8_t channel = 0;
#else
  uint16_t pressure = 0;
 8009d26:	2300      	movs	r3, #0
 8009d28:	85bb      	strh	r3, [r7, #44]	@ 0x2c
  int16_t temperature = 0;
 8009d2a:	2300      	movs	r3, #0
 8009d2c:	857b      	strh	r3, [r7, #42]	@ 0x2a
  uint16_t humidity = 0;
 8009d2e:	2300      	movs	r3, #0
 8009d30:	853b      	strh	r3, [r7, #40]	@ 0x28
  uint32_t i = 0;
 8009d32:	2300      	movs	r3, #0
 8009d34:	633b      	str	r3, [r7, #48]	@ 0x30
  int32_t latitude = 0;
 8009d36:	2300      	movs	r3, #0
 8009d38:	627b      	str	r3, [r7, #36]	@ 0x24
  int32_t longitude = 0;
 8009d3a:	2300      	movs	r3, #0
 8009d3c:	623b      	str	r3, [r7, #32]
  uint16_t altitudeGps = 0;
 8009d3e:	2300      	movs	r3, #0
 8009d40:	83fb      	strh	r3, [r7, #30]
#endif /* CAYENNE_LPP */

  EnvSensors_Read(&sensor_data);
 8009d42:	1d3b      	adds	r3, r7, #4
 8009d44:	4618      	mov	r0, r3
 8009d46:	f7f8 f863 	bl	8001e10 <EnvSensors_Read>

  APP_LOG(TS_ON, VLEVEL_M, "VDDA: %d\r\n", batteryLevel);
 8009d4a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8009d4e:	9300      	str	r3, [sp, #0]
 8009d50:	4b8f      	ldr	r3, [pc, #572]	@ (8009f90 <SendTxData+0x284>)
 8009d52:	2201      	movs	r2, #1
 8009d54:	2100      	movs	r1, #0
 8009d56:	2002      	movs	r0, #2
 8009d58:	f011 f9d0 	bl	801b0fc <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_ON, VLEVEL_M, "temp: %d\r\n", (int16_t)(sensor_data.temperature));
 8009d5c:	68bb      	ldr	r3, [r7, #8]
 8009d5e:	4618      	mov	r0, r3
 8009d60:	f7f6 fedc 	bl	8000b1c <__aeabi_f2iz>
 8009d64:	4603      	mov	r3, r0
 8009d66:	b21b      	sxth	r3, r3
 8009d68:	9300      	str	r3, [sp, #0]
 8009d6a:	4b8a      	ldr	r3, [pc, #552]	@ (8009f94 <SendTxData+0x288>)
 8009d6c:	2201      	movs	r2, #1
 8009d6e:	2100      	movs	r1, #0
 8009d70:	2002      	movs	r0, #2
 8009d72:	f011 f9c3 	bl	801b0fc <UTIL_ADV_TRACE_COND_FSend>

  AppData.Port = LORAWAN_USER_APP_PORT;
 8009d76:	4b88      	ldr	r3, [pc, #544]	@ (8009f98 <SendTxData+0x28c>)
 8009d78:	2202      	movs	r2, #2
 8009d7a:	701a      	strb	r2, [r3, #0]
  }

  CayenneLppCopy(AppData.Buffer);
  AppData.BufferSize = CayenneLppGetSize();
#else  /* not CAYENNE_LPP */
  humidity    = (uint16_t)(sensor_data.humidity * 10);            /* in %*10     */
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	4987      	ldr	r1, [pc, #540]	@ (8009f9c <SendTxData+0x290>)
 8009d80:	4618      	mov	r0, r3
 8009d82:	f7f6 fd7b 	bl	800087c <__aeabi_fmul>
 8009d86:	4603      	mov	r3, r0
 8009d88:	4618      	mov	r0, r3
 8009d8a:	f7f6 feed 	bl	8000b68 <__aeabi_f2uiz>
 8009d8e:	4603      	mov	r3, r0
 8009d90:	853b      	strh	r3, [r7, #40]	@ 0x28
  temperature = (int16_t)(sensor_data.temperature);
 8009d92:	68bb      	ldr	r3, [r7, #8]
 8009d94:	4618      	mov	r0, r3
 8009d96:	f7f6 fec1 	bl	8000b1c <__aeabi_f2iz>
 8009d9a:	4603      	mov	r3, r0
 8009d9c:	857b      	strh	r3, [r7, #42]	@ 0x2a
  pressure = (uint16_t)(sensor_data.pressure * 100 / 10); /* in hPa / 10 */
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	497f      	ldr	r1, [pc, #508]	@ (8009fa0 <SendTxData+0x294>)
 8009da2:	4618      	mov	r0, r3
 8009da4:	f7f6 fd6a 	bl	800087c <__aeabi_fmul>
 8009da8:	4603      	mov	r3, r0
 8009daa:	497c      	ldr	r1, [pc, #496]	@ (8009f9c <SendTxData+0x290>)
 8009dac:	4618      	mov	r0, r3
 8009dae:	f7f6 fe19 	bl	80009e4 <__aeabi_fdiv>
 8009db2:	4603      	mov	r3, r0
 8009db4:	4618      	mov	r0, r3
 8009db6:	f7f6 fed7 	bl	8000b68 <__aeabi_f2uiz>
 8009dba:	4603      	mov	r3, r0
 8009dbc:	85bb      	strh	r3, [r7, #44]	@ 0x2c

  AppData.Buffer[i++] = AppLedStateOn;
 8009dbe:	4b76      	ldr	r3, [pc, #472]	@ (8009f98 <SendTxData+0x28c>)
 8009dc0:	685a      	ldr	r2, [r3, #4]
 8009dc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009dc4:	1c59      	adds	r1, r3, #1
 8009dc6:	6339      	str	r1, [r7, #48]	@ 0x30
 8009dc8:	4413      	add	r3, r2
 8009dca:	4a76      	ldr	r2, [pc, #472]	@ (8009fa4 <SendTxData+0x298>)
 8009dcc:	7812      	ldrb	r2, [r2, #0]
 8009dce:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (uint8_t)((pressure >> 8) & 0xFF);
 8009dd0:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8009dd2:	0a1b      	lsrs	r3, r3, #8
 8009dd4:	b298      	uxth	r0, r3
 8009dd6:	4b70      	ldr	r3, [pc, #448]	@ (8009f98 <SendTxData+0x28c>)
 8009dd8:	685a      	ldr	r2, [r3, #4]
 8009dda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ddc:	1c59      	adds	r1, r3, #1
 8009dde:	6339      	str	r1, [r7, #48]	@ 0x30
 8009de0:	4413      	add	r3, r2
 8009de2:	b2c2      	uxtb	r2, r0
 8009de4:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (uint8_t)(pressure & 0xFF);
 8009de6:	4b6c      	ldr	r3, [pc, #432]	@ (8009f98 <SendTxData+0x28c>)
 8009de8:	685a      	ldr	r2, [r3, #4]
 8009dea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009dec:	1c59      	adds	r1, r3, #1
 8009dee:	6339      	str	r1, [r7, #48]	@ 0x30
 8009df0:	4413      	add	r3, r2
 8009df2:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8009df4:	b2d2      	uxtb	r2, r2
 8009df6:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (uint8_t)(temperature & 0xFF);
 8009df8:	4b67      	ldr	r3, [pc, #412]	@ (8009f98 <SendTxData+0x28c>)
 8009dfa:	685a      	ldr	r2, [r3, #4]
 8009dfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009dfe:	1c59      	adds	r1, r3, #1
 8009e00:	6339      	str	r1, [r7, #48]	@ 0x30
 8009e02:	4413      	add	r3, r2
 8009e04:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 8009e06:	b2d2      	uxtb	r2, r2
 8009e08:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (uint8_t)((humidity >> 8) & 0xFF);
 8009e0a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8009e0c:	0a1b      	lsrs	r3, r3, #8
 8009e0e:	b298      	uxth	r0, r3
 8009e10:	4b61      	ldr	r3, [pc, #388]	@ (8009f98 <SendTxData+0x28c>)
 8009e12:	685a      	ldr	r2, [r3, #4]
 8009e14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e16:	1c59      	adds	r1, r3, #1
 8009e18:	6339      	str	r1, [r7, #48]	@ 0x30
 8009e1a:	4413      	add	r3, r2
 8009e1c:	b2c2      	uxtb	r2, r0
 8009e1e:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (uint8_t)(humidity & 0xFF);
 8009e20:	4b5d      	ldr	r3, [pc, #372]	@ (8009f98 <SendTxData+0x28c>)
 8009e22:	685a      	ldr	r2, [r3, #4]
 8009e24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e26:	1c59      	adds	r1, r3, #1
 8009e28:	6339      	str	r1, [r7, #48]	@ 0x30
 8009e2a:	4413      	add	r3, r2
 8009e2c:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8009e2e:	b2d2      	uxtb	r2, r2
 8009e30:	701a      	strb	r2, [r3, #0]

  if ((LmHandlerParams.ActiveRegion == LORAMAC_REGION_US915) || (LmHandlerParams.ActiveRegion == LORAMAC_REGION_AU915)
 8009e32:	4b5d      	ldr	r3, [pc, #372]	@ (8009fa8 <SendTxData+0x29c>)
 8009e34:	781b      	ldrb	r3, [r3, #0]
 8009e36:	2b08      	cmp	r3, #8
 8009e38:	d007      	beq.n	8009e4a <SendTxData+0x13e>
 8009e3a:	4b5b      	ldr	r3, [pc, #364]	@ (8009fa8 <SendTxData+0x29c>)
 8009e3c:	781b      	ldrb	r3, [r3, #0]
 8009e3e:	2b01      	cmp	r3, #1
 8009e40:	d003      	beq.n	8009e4a <SendTxData+0x13e>
      || (LmHandlerParams.ActiveRegion == LORAMAC_REGION_AS923))
 8009e42:	4b59      	ldr	r3, [pc, #356]	@ (8009fa8 <SendTxData+0x29c>)
 8009e44:	781b      	ldrb	r3, [r3, #0]
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d120      	bne.n	8009e8c <SendTxData+0x180>
  {
    AppData.Buffer[i++] = 0;
 8009e4a:	4b53      	ldr	r3, [pc, #332]	@ (8009f98 <SendTxData+0x28c>)
 8009e4c:	685a      	ldr	r2, [r3, #4]
 8009e4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e50:	1c59      	adds	r1, r3, #1
 8009e52:	6339      	str	r1, [r7, #48]	@ 0x30
 8009e54:	4413      	add	r3, r2
 8009e56:	2200      	movs	r2, #0
 8009e58:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = 0;
 8009e5a:	4b4f      	ldr	r3, [pc, #316]	@ (8009f98 <SendTxData+0x28c>)
 8009e5c:	685a      	ldr	r2, [r3, #4]
 8009e5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e60:	1c59      	adds	r1, r3, #1
 8009e62:	6339      	str	r1, [r7, #48]	@ 0x30
 8009e64:	4413      	add	r3, r2
 8009e66:	2200      	movs	r2, #0
 8009e68:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = 0;
 8009e6a:	4b4b      	ldr	r3, [pc, #300]	@ (8009f98 <SendTxData+0x28c>)
 8009e6c:	685a      	ldr	r2, [r3, #4]
 8009e6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e70:	1c59      	adds	r1, r3, #1
 8009e72:	6339      	str	r1, [r7, #48]	@ 0x30
 8009e74:	4413      	add	r3, r2
 8009e76:	2200      	movs	r2, #0
 8009e78:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = 0;
 8009e7a:	4b47      	ldr	r3, [pc, #284]	@ (8009f98 <SendTxData+0x28c>)
 8009e7c:	685a      	ldr	r2, [r3, #4]
 8009e7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e80:	1c59      	adds	r1, r3, #1
 8009e82:	6339      	str	r1, [r7, #48]	@ 0x30
 8009e84:	4413      	add	r3, r2
 8009e86:	2200      	movs	r2, #0
 8009e88:	701a      	strb	r2, [r3, #0]
 8009e8a:	e05b      	b.n	8009f44 <SendTxData+0x238>
  }
  else
  {
    latitude = sensor_data.latitude;
 8009e8c:	693b      	ldr	r3, [r7, #16]
 8009e8e:	627b      	str	r3, [r7, #36]	@ 0x24
    longitude = sensor_data.longitude;
 8009e90:	697b      	ldr	r3, [r7, #20]
 8009e92:	623b      	str	r3, [r7, #32]

    AppData.Buffer[i++] = GetBatteryLevel();        /* 1 (very low) to 254 (fully charged) */
 8009e94:	4b40      	ldr	r3, [pc, #256]	@ (8009f98 <SendTxData+0x28c>)
 8009e96:	685a      	ldr	r2, [r3, #4]
 8009e98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e9a:	1c59      	adds	r1, r3, #1
 8009e9c:	6339      	str	r1, [r7, #48]	@ 0x30
 8009e9e:	18d4      	adds	r4, r2, r3
 8009ea0:	f7f7 fdf6 	bl	8001a90 <GetBatteryLevel>
 8009ea4:	4603      	mov	r3, r0
 8009ea6:	7023      	strb	r3, [r4, #0]
    AppData.Buffer[i++] = (uint8_t)((latitude >> 16) & 0xFF);
 8009ea8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009eaa:	1418      	asrs	r0, r3, #16
 8009eac:	4b3a      	ldr	r3, [pc, #232]	@ (8009f98 <SendTxData+0x28c>)
 8009eae:	685a      	ldr	r2, [r3, #4]
 8009eb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009eb2:	1c59      	adds	r1, r3, #1
 8009eb4:	6339      	str	r1, [r7, #48]	@ 0x30
 8009eb6:	4413      	add	r3, r2
 8009eb8:	b2c2      	uxtb	r2, r0
 8009eba:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)((latitude >> 8) & 0xFF);
 8009ebc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ebe:	1218      	asrs	r0, r3, #8
 8009ec0:	4b35      	ldr	r3, [pc, #212]	@ (8009f98 <SendTxData+0x28c>)
 8009ec2:	685a      	ldr	r2, [r3, #4]
 8009ec4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ec6:	1c59      	adds	r1, r3, #1
 8009ec8:	6339      	str	r1, [r7, #48]	@ 0x30
 8009eca:	4413      	add	r3, r2
 8009ecc:	b2c2      	uxtb	r2, r0
 8009ece:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)(latitude & 0xFF);
 8009ed0:	4b31      	ldr	r3, [pc, #196]	@ (8009f98 <SendTxData+0x28c>)
 8009ed2:	685a      	ldr	r2, [r3, #4]
 8009ed4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ed6:	1c59      	adds	r1, r3, #1
 8009ed8:	6339      	str	r1, [r7, #48]	@ 0x30
 8009eda:	4413      	add	r3, r2
 8009edc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009ede:	b2d2      	uxtb	r2, r2
 8009ee0:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)((longitude >> 16) & 0xFF);
 8009ee2:	6a3b      	ldr	r3, [r7, #32]
 8009ee4:	1418      	asrs	r0, r3, #16
 8009ee6:	4b2c      	ldr	r3, [pc, #176]	@ (8009f98 <SendTxData+0x28c>)
 8009ee8:	685a      	ldr	r2, [r3, #4]
 8009eea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009eec:	1c59      	adds	r1, r3, #1
 8009eee:	6339      	str	r1, [r7, #48]	@ 0x30
 8009ef0:	4413      	add	r3, r2
 8009ef2:	b2c2      	uxtb	r2, r0
 8009ef4:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)((longitude >> 8) & 0xFF);
 8009ef6:	6a3b      	ldr	r3, [r7, #32]
 8009ef8:	1218      	asrs	r0, r3, #8
 8009efa:	4b27      	ldr	r3, [pc, #156]	@ (8009f98 <SendTxData+0x28c>)
 8009efc:	685a      	ldr	r2, [r3, #4]
 8009efe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f00:	1c59      	adds	r1, r3, #1
 8009f02:	6339      	str	r1, [r7, #48]	@ 0x30
 8009f04:	4413      	add	r3, r2
 8009f06:	b2c2      	uxtb	r2, r0
 8009f08:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)(longitude & 0xFF);
 8009f0a:	4b23      	ldr	r3, [pc, #140]	@ (8009f98 <SendTxData+0x28c>)
 8009f0c:	685a      	ldr	r2, [r3, #4]
 8009f0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f10:	1c59      	adds	r1, r3, #1
 8009f12:	6339      	str	r1, [r7, #48]	@ 0x30
 8009f14:	4413      	add	r3, r2
 8009f16:	6a3a      	ldr	r2, [r7, #32]
 8009f18:	b2d2      	uxtb	r2, r2
 8009f1a:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)((altitudeGps >> 8) & 0xFF);
 8009f1c:	8bfb      	ldrh	r3, [r7, #30]
 8009f1e:	0a1b      	lsrs	r3, r3, #8
 8009f20:	b298      	uxth	r0, r3
 8009f22:	4b1d      	ldr	r3, [pc, #116]	@ (8009f98 <SendTxData+0x28c>)
 8009f24:	685a      	ldr	r2, [r3, #4]
 8009f26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f28:	1c59      	adds	r1, r3, #1
 8009f2a:	6339      	str	r1, [r7, #48]	@ 0x30
 8009f2c:	4413      	add	r3, r2
 8009f2e:	b2c2      	uxtb	r2, r0
 8009f30:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)(altitudeGps & 0xFF);
 8009f32:	4b19      	ldr	r3, [pc, #100]	@ (8009f98 <SendTxData+0x28c>)
 8009f34:	685a      	ldr	r2, [r3, #4]
 8009f36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f38:	1c59      	adds	r1, r3, #1
 8009f3a:	6339      	str	r1, [r7, #48]	@ 0x30
 8009f3c:	4413      	add	r3, r2
 8009f3e:	8bfa      	ldrh	r2, [r7, #30]
 8009f40:	b2d2      	uxtb	r2, r2
 8009f42:	701a      	strb	r2, [r3, #0]
  }

  AppData.BufferSize = i;
 8009f44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f46:	b2da      	uxtb	r2, r3
 8009f48:	4b13      	ldr	r3, [pc, #76]	@ (8009f98 <SendTxData+0x28c>)
 8009f4a:	705a      	strb	r2, [r3, #1]
#endif /* CAYENNE_LPP */

  if ((JoinLedTimer.IsRunning) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 8009f4c:	4b17      	ldr	r3, [pc, #92]	@ (8009fac <SendTxData+0x2a0>)
 8009f4e:	7a5b      	ldrb	r3, [r3, #9]
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d007      	beq.n	8009f64 <SendTxData+0x258>
 8009f54:	f002 fa16 	bl	800c384 <LmHandlerJoinStatus>
 8009f58:	4603      	mov	r3, r0
 8009f5a:	2b01      	cmp	r3, #1
 8009f5c:	d102      	bne.n	8009f64 <SendTxData+0x258>
  {
    UTIL_TIMER_Stop(&JoinLedTimer);
 8009f5e:	4813      	ldr	r0, [pc, #76]	@ (8009fac <SendTxData+0x2a0>)
 8009f60:	f010 fec2 	bl	801ace8 <UTIL_TIMER_Stop>
#if 0   // XXX:
    HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_RED */
#endif
  }

  status = LmHandlerSend(&AppData, LmHandlerParams.IsTxConfirmed, false);
 8009f64:	4b10      	ldr	r3, [pc, #64]	@ (8009fa8 <SendTxData+0x29c>)
 8009f66:	78db      	ldrb	r3, [r3, #3]
 8009f68:	2200      	movs	r2, #0
 8009f6a:	4619      	mov	r1, r3
 8009f6c:	480a      	ldr	r0, [pc, #40]	@ (8009f98 <SendTxData+0x28c>)
 8009f6e:	f002 fa25 	bl	800c3bc <LmHandlerSend>
 8009f72:	4603      	mov	r3, r0
 8009f74:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (LORAMAC_HANDLER_SUCCESS == status)
 8009f78:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d119      	bne.n	8009fb4 <SendTxData+0x2a8>
  {
    APP_LOG(TS_ON, VLEVEL_L, "SEND REQUEST\r\n");
 8009f80:	4b0b      	ldr	r3, [pc, #44]	@ (8009fb0 <SendTxData+0x2a4>)
 8009f82:	2201      	movs	r2, #1
 8009f84:	2100      	movs	r1, #0
 8009f86:	2001      	movs	r0, #1
 8009f88:	f011 f8b8 	bl	801b0fc <UTIL_ADV_TRACE_COND_FSend>
 8009f8c:	e029      	b.n	8009fe2 <SendTxData+0x2d6>
 8009f8e:	bf00      	nop
 8009f90:	0801b8bc 	.word	0x0801b8bc
 8009f94:	0801b8c8 	.word	0x0801b8c8
 8009f98:	20000088 	.word	0x20000088
 8009f9c:	41200000 	.word	0x41200000
 8009fa0:	42c80000 	.word	0x42c80000
 8009fa4:	2000045e 	.word	0x2000045e
 8009fa8:	20000070 	.word	0x20000070
 8009fac:	20000490 	.word	0x20000490
 8009fb0:	0801b8d4 	.word	0x0801b8d4
  }
  else if (LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED == status)
 8009fb4:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8009fb8:	f113 0f06 	cmn.w	r3, #6
 8009fbc:	d111      	bne.n	8009fe2 <SendTxData+0x2d6>
  {
    nextTxIn = LmHandlerGetDutyCycleWaitTime();
 8009fbe:	f002 f955 	bl	800c26c <LmHandlerGetDutyCycleWaitTime>
 8009fc2:	6378      	str	r0, [r7, #52]	@ 0x34
    if (nextTxIn > 0)
 8009fc4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d00b      	beq.n	8009fe2 <SendTxData+0x2d6>
    {
      APP_LOG(TS_ON, VLEVEL_L, "Next Tx in  : ~%d second(s)\r\n", (nextTxIn / 1000));
 8009fca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009fcc:	4a11      	ldr	r2, [pc, #68]	@ (800a014 <SendTxData+0x308>)
 8009fce:	fba2 2303 	umull	r2, r3, r2, r3
 8009fd2:	099b      	lsrs	r3, r3, #6
 8009fd4:	9300      	str	r3, [sp, #0]
 8009fd6:	4b10      	ldr	r3, [pc, #64]	@ (800a018 <SendTxData+0x30c>)
 8009fd8:	2201      	movs	r2, #1
 8009fda:	2100      	movs	r1, #0
 8009fdc:	2001      	movs	r0, #1
 8009fde:	f011 f88d 	bl	801b0fc <UTIL_ADV_TRACE_COND_FSend>
    }
  }

  if (EventType == TX_ON_TIMER)
 8009fe2:	4b0e      	ldr	r3, [pc, #56]	@ (800a01c <SendTxData+0x310>)
 8009fe4:	781b      	ldrb	r3, [r3, #0]
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d10f      	bne.n	800a00a <SendTxData+0x2fe>
  {
    UTIL_TIMER_Stop(&TxTimer);
 8009fea:	480d      	ldr	r0, [pc, #52]	@ (800a020 <SendTxData+0x314>)
 8009fec:	f010 fe7c 	bl	801ace8 <UTIL_TIMER_Stop>
    UTIL_TIMER_SetPeriod(&TxTimer, MAX(nextTxIn, TxPeriodicity));
 8009ff0:	4b0c      	ldr	r3, [pc, #48]	@ (800a024 <SendTxData+0x318>)
 8009ff2:	681a      	ldr	r2, [r3, #0]
 8009ff4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009ff6:	4293      	cmp	r3, r2
 8009ff8:	bf38      	it	cc
 8009ffa:	4613      	movcc	r3, r2
 8009ffc:	4619      	mov	r1, r3
 8009ffe:	4808      	ldr	r0, [pc, #32]	@ (800a020 <SendTxData+0x314>)
 800a000:	f010 fee2 	bl	801adc8 <UTIL_TIMER_SetPeriod>
    UTIL_TIMER_Start(&TxTimer);
 800a004:	4806      	ldr	r0, [pc, #24]	@ (800a020 <SendTxData+0x314>)
 800a006:	f010 fe01 	bl	801ac0c <UTIL_TIMER_Start>
  }

  /* USER CODE END SendTxData_1 */
}
 800a00a:	bf00      	nop
 800a00c:	373c      	adds	r7, #60	@ 0x3c
 800a00e:	46bd      	mov	sp, r7
 800a010:	bd90      	pop	{r4, r7, pc}
 800a012:	bf00      	nop
 800a014:	10624dd3 	.word	0x10624dd3
 800a018:	0801b8e4 	.word	0x0801b8e4
 800a01c:	20000338 	.word	0x20000338
 800a020:	2000033c 	.word	0x2000033c
 800a024:	20000084 	.word	0x20000084

0800a028 <OnTxTimerEvent>:

static void OnTxTimerEvent(void *context)
{
 800a028:	b580      	push	{r7, lr}
 800a02a:	b082      	sub	sp, #8
 800a02c:	af00      	add	r7, sp, #0
 800a02e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxTimerEvent_1 */

  /* USER CODE END OnTxTimerEvent_1 */
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), CFG_SEQ_Prio_0);
 800a030:	2100      	movs	r1, #0
 800a032:	2002      	movs	r0, #2
 800a034:	f010 fd34 	bl	801aaa0 <UTIL_SEQ_SetTask>

  /*Wait for next tx slot*/
  UTIL_TIMER_Start(&TxTimer);
 800a038:	4803      	ldr	r0, [pc, #12]	@ (800a048 <OnTxTimerEvent+0x20>)
 800a03a:	f010 fde7 	bl	801ac0c <UTIL_TIMER_Start>
  /* USER CODE BEGIN OnTxTimerEvent_2 */

  /* USER CODE END OnTxTimerEvent_2 */
}
 800a03e:	bf00      	nop
 800a040:	3708      	adds	r7, #8
 800a042:	46bd      	mov	sp, r7
 800a044:	bd80      	pop	{r7, pc}
 800a046:	bf00      	nop
 800a048:	2000033c 	.word	0x2000033c

0800a04c <OnTxTimerLedEvent>:

/* USER CODE BEGIN PrFD_LedEvents */
static void OnTxTimerLedEvent(void *context)
{
 800a04c:	b480      	push	{r7}
 800a04e:	b083      	sub	sp, #12
 800a050:	af00      	add	r7, sp, #0
 800a052:	6078      	str	r0, [r7, #4]
#if 0	// XXX: No LED available
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_GREEN */
#endif
}
 800a054:	bf00      	nop
 800a056:	370c      	adds	r7, #12
 800a058:	46bd      	mov	sp, r7
 800a05a:	bc80      	pop	{r7}
 800a05c:	4770      	bx	lr

0800a05e <OnRxTimerLedEvent>:

static void OnRxTimerLedEvent(void *context)
{
 800a05e:	b480      	push	{r7}
 800a060:	b083      	sub	sp, #12
 800a062:	af00      	add	r7, sp, #0
 800a064:	6078      	str	r0, [r7, #4]
#if 0   // XXX: No LED available
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET); /* LED_BLUE */
#endif
}
 800a066:	bf00      	nop
 800a068:	370c      	adds	r7, #12
 800a06a:	46bd      	mov	sp, r7
 800a06c:	bc80      	pop	{r7}
 800a06e:	4770      	bx	lr

0800a070 <OnJoinTimerLedEvent>:

static void OnJoinTimerLedEvent(void *context)
{
 800a070:	b480      	push	{r7}
 800a072:	b083      	sub	sp, #12
 800a074:	af00      	add	r7, sp, #0
 800a076:	6078      	str	r0, [r7, #4]
#if 0   // XXX: No LED available
  HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin); /* LED_RED */
#endif
}
 800a078:	bf00      	nop
 800a07a:	370c      	adds	r7, #12
 800a07c:	46bd      	mov	sp, r7
 800a07e:	bc80      	pop	{r7}
 800a080:	4770      	bx	lr
	...

0800a084 <OnTxData>:

/* USER CODE END PrFD_LedEvents */

static void OnTxData(LmHandlerTxParams_t *params)
{
 800a084:	b580      	push	{r7, lr}
 800a086:	b086      	sub	sp, #24
 800a088:	af04      	add	r7, sp, #16
 800a08a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxData_1 */
  if ((params != NULL))
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d041      	beq.n	800a116 <OnTxData+0x92>
  {
    /* Process Tx event only if its a mcps response to prevent some internal events (mlme) */
    if (params->IsMcpsConfirm != 0)
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	781b      	ldrb	r3, [r3, #0]
 800a096:	2b00      	cmp	r3, #0
 800a098:	d03d      	beq.n	800a116 <OnTxData+0x92>
    {
#if 0	// XXX: No LED available
      HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET); /* LED_GREEN */
#endif
      UTIL_TIMER_Start(&TxLedTimer);
 800a09a:	4821      	ldr	r0, [pc, #132]	@ (800a120 <OnTxData+0x9c>)
 800a09c:	f010 fdb6 	bl	801ac0c <UTIL_TIMER_Start>

      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### ========== MCPS-Confirm =============\r\n");
 800a0a0:	4b20      	ldr	r3, [pc, #128]	@ (800a124 <OnTxData+0xa0>)
 800a0a2:	2200      	movs	r2, #0
 800a0a4:	2100      	movs	r1, #0
 800a0a6:	2002      	movs	r0, #2
 800a0a8:	f011 f828 	bl	801b0fc <UTIL_ADV_TRACE_COND_FSend>
      APP_LOG(TS_OFF, VLEVEL_H, "###### U/L FRAME:%04d | PORT:%d | DR:%d | PWR:%d", params->UplinkCounter,
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	68db      	ldr	r3, [r3, #12]
 800a0b0:	687a      	ldr	r2, [r7, #4]
 800a0b2:	7c12      	ldrb	r2, [r2, #16]
 800a0b4:	4611      	mov	r1, r2
 800a0b6:	687a      	ldr	r2, [r7, #4]
 800a0b8:	f992 200a 	ldrsb.w	r2, [r2, #10]
 800a0bc:	4610      	mov	r0, r2
 800a0be:	687a      	ldr	r2, [r7, #4]
 800a0c0:	f992 2018 	ldrsb.w	r2, [r2, #24]
 800a0c4:	9203      	str	r2, [sp, #12]
 800a0c6:	9002      	str	r0, [sp, #8]
 800a0c8:	9101      	str	r1, [sp, #4]
 800a0ca:	9300      	str	r3, [sp, #0]
 800a0cc:	4b16      	ldr	r3, [pc, #88]	@ (800a128 <OnTxData+0xa4>)
 800a0ce:	2200      	movs	r2, #0
 800a0d0:	2100      	movs	r1, #0
 800a0d2:	2003      	movs	r0, #3
 800a0d4:	f011 f812 	bl	801b0fc <UTIL_ADV_TRACE_COND_FSend>
              params->AppData.Port, params->Datarate, params->TxPower);

      APP_LOG(TS_OFF, VLEVEL_H, " | MSG TYPE:");
 800a0d8:	4b14      	ldr	r3, [pc, #80]	@ (800a12c <OnTxData+0xa8>)
 800a0da:	2200      	movs	r2, #0
 800a0dc:	2100      	movs	r1, #0
 800a0de:	2003      	movs	r0, #3
 800a0e0:	f011 f80c 	bl	801b0fc <UTIL_ADV_TRACE_COND_FSend>
      if (params->MsgType == LORAMAC_HANDLER_CONFIRMED_MSG)
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	7a1b      	ldrb	r3, [r3, #8]
 800a0e8:	2b01      	cmp	r3, #1
 800a0ea:	d10e      	bne.n	800a10a <OnTxData+0x86>
      {
        APP_LOG(TS_OFF, VLEVEL_H, "CONFIRMED [%s]\r\n", (params->AckReceived != 0) ? "ACK" : "NACK");
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	7a5b      	ldrb	r3, [r3, #9]
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d001      	beq.n	800a0f8 <OnTxData+0x74>
 800a0f4:	4b0e      	ldr	r3, [pc, #56]	@ (800a130 <OnTxData+0xac>)
 800a0f6:	e000      	b.n	800a0fa <OnTxData+0x76>
 800a0f8:	4b0e      	ldr	r3, [pc, #56]	@ (800a134 <OnTxData+0xb0>)
 800a0fa:	9300      	str	r3, [sp, #0]
 800a0fc:	4b0e      	ldr	r3, [pc, #56]	@ (800a138 <OnTxData+0xb4>)
 800a0fe:	2200      	movs	r2, #0
 800a100:	2100      	movs	r1, #0
 800a102:	2003      	movs	r0, #3
 800a104:	f010 fffa 	bl	801b0fc <UTIL_ADV_TRACE_COND_FSend>
        APP_LOG(TS_OFF, VLEVEL_H, "UNCONFIRMED\r\n");
      }
    }
  }
  /* USER CODE END OnTxData_1 */
}
 800a108:	e005      	b.n	800a116 <OnTxData+0x92>
        APP_LOG(TS_OFF, VLEVEL_H, "UNCONFIRMED\r\n");
 800a10a:	4b0c      	ldr	r3, [pc, #48]	@ (800a13c <OnTxData+0xb8>)
 800a10c:	2200      	movs	r2, #0
 800a10e:	2100      	movs	r1, #0
 800a110:	2003      	movs	r0, #3
 800a112:	f010 fff3 	bl	801b0fc <UTIL_ADV_TRACE_COND_FSend>
}
 800a116:	bf00      	nop
 800a118:	3708      	adds	r7, #8
 800a11a:	46bd      	mov	sp, r7
 800a11c:	bd80      	pop	{r7, pc}
 800a11e:	bf00      	nop
 800a120:	20000460 	.word	0x20000460
 800a124:	0801b904 	.word	0x0801b904
 800a128:	0801b938 	.word	0x0801b938
 800a12c:	0801b96c 	.word	0x0801b96c
 800a130:	0801b97c 	.word	0x0801b97c
 800a134:	0801b980 	.word	0x0801b980
 800a138:	0801b988 	.word	0x0801b988
 800a13c:	0801b99c 	.word	0x0801b99c

0800a140 <OnJoinRequest>:

static void OnJoinRequest(LmHandlerJoinParams_t *joinParams)
{
 800a140:	b580      	push	{r7, lr}
 800a142:	b082      	sub	sp, #8
 800a144:	af00      	add	r7, sp, #0
 800a146:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnJoinRequest_1 */
  if (joinParams != NULL)
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d039      	beq.n	800a1c2 <OnJoinRequest+0x82>
  {
    if (joinParams->Status == LORAMAC_HANDLER_SUCCESS)
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	f993 3005 	ldrsb.w	r3, [r3, #5]
 800a154:	2b00      	cmp	r3, #0
 800a156:	d11e      	bne.n	800a196 <OnJoinRequest+0x56>
    {
      UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaStoreContextEvent), CFG_SEQ_Prio_0);
 800a158:	2100      	movs	r1, #0
 800a15a:	2004      	movs	r0, #4
 800a15c:	f010 fca0 	bl	801aaa0 <UTIL_SEQ_SetTask>

      UTIL_TIMER_Stop(&JoinLedTimer);
 800a160:	481a      	ldr	r0, [pc, #104]	@ (800a1cc <OnJoinRequest+0x8c>)
 800a162:	f010 fdc1 	bl	801ace8 <UTIL_TIMER_Stop>
#if 0   // XXX:
      HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_RED */
#endif

      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOINED = ");
 800a166:	4b1a      	ldr	r3, [pc, #104]	@ (800a1d0 <OnJoinRequest+0x90>)
 800a168:	2200      	movs	r2, #0
 800a16a:	2100      	movs	r1, #0
 800a16c:	2002      	movs	r0, #2
 800a16e:	f010 ffc5 	bl	801b0fc <UTIL_ADV_TRACE_COND_FSend>
      if (joinParams->Mode == ACTIVATION_TYPE_ABP)
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	799b      	ldrb	r3, [r3, #6]
 800a176:	2b01      	cmp	r3, #1
 800a178:	d106      	bne.n	800a188 <OnJoinRequest+0x48>
      {
        APP_LOG(TS_OFF, VLEVEL_M, "ABP ======================\r\n");
 800a17a:	4b16      	ldr	r3, [pc, #88]	@ (800a1d4 <OnJoinRequest+0x94>)
 800a17c:	2200      	movs	r2, #0
 800a17e:	2100      	movs	r1, #0
 800a180:	2002      	movs	r0, #2
 800a182:	f010 ffbb 	bl	801b0fc <UTIL_ADV_TRACE_COND_FSend>
    	LmHandlerJoin(ActivationType, LORAWAN_FORCE_REJOIN_AT_BOOT);
      }
    }
  }
  /* USER CODE END OnJoinRequest_1 */
}
 800a186:	e01c      	b.n	800a1c2 <OnJoinRequest+0x82>
        APP_LOG(TS_OFF, VLEVEL_M, "OTAA =====================\r\n");
 800a188:	4b13      	ldr	r3, [pc, #76]	@ (800a1d8 <OnJoinRequest+0x98>)
 800a18a:	2200      	movs	r2, #0
 800a18c:	2100      	movs	r1, #0
 800a18e:	2002      	movs	r0, #2
 800a190:	f010 ffb4 	bl	801b0fc <UTIL_ADV_TRACE_COND_FSend>
}
 800a194:	e015      	b.n	800a1c2 <OnJoinRequest+0x82>
      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOIN FAILED\r\n");
 800a196:	4b11      	ldr	r3, [pc, #68]	@ (800a1dc <OnJoinRequest+0x9c>)
 800a198:	2200      	movs	r2, #0
 800a19a:	2100      	movs	r1, #0
 800a19c:	2002      	movs	r0, #2
 800a19e:	f010 ffad 	bl	801b0fc <UTIL_ADV_TRACE_COND_FSend>
      if (joinParams->Mode == ACTIVATION_TYPE_OTAA) {
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	799b      	ldrb	r3, [r3, #6]
 800a1a6:	2b02      	cmp	r3, #2
 800a1a8:	d10b      	bne.n	800a1c2 <OnJoinRequest+0x82>
          APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = RE-TRYING OTAA JOIN\r\n");
 800a1aa:	4b0d      	ldr	r3, [pc, #52]	@ (800a1e0 <OnJoinRequest+0xa0>)
 800a1ac:	2200      	movs	r2, #0
 800a1ae:	2100      	movs	r1, #0
 800a1b0:	2002      	movs	r0, #2
 800a1b2:	f010 ffa3 	bl	801b0fc <UTIL_ADV_TRACE_COND_FSend>
    	LmHandlerJoin(ActivationType, LORAWAN_FORCE_REJOIN_AT_BOOT);
 800a1b6:	4b0b      	ldr	r3, [pc, #44]	@ (800a1e4 <OnJoinRequest+0xa4>)
 800a1b8:	781b      	ldrb	r3, [r3, #0]
 800a1ba:	2101      	movs	r1, #1
 800a1bc:	4618      	mov	r0, r3
 800a1be:	f002 f85f 	bl	800c280 <LmHandlerJoin>
}
 800a1c2:	bf00      	nop
 800a1c4:	3708      	adds	r7, #8
 800a1c6:	46bd      	mov	sp, r7
 800a1c8:	bd80      	pop	{r7, pc}
 800a1ca:	bf00      	nop
 800a1cc:	20000490 	.word	0x20000490
 800a1d0:	0801b9ac 	.word	0x0801b9ac
 800a1d4:	0801b9c4 	.word	0x0801b9c4
 800a1d8:	0801b9e4 	.word	0x0801b9e4
 800a1dc:	0801ba04 	.word	0x0801ba04
 800a1e0:	0801ba20 	.word	0x0801ba20
 800a1e4:	20000020 	.word	0x20000020

0800a1e8 <OnBeaconStatusChange>:

static void OnBeaconStatusChange(LmHandlerBeaconParams_t *params)
{
 800a1e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a1ea:	b093      	sub	sp, #76	@ 0x4c
 800a1ec:	af0c      	add	r7, sp, #48	@ 0x30
 800a1ee:	6178      	str	r0, [r7, #20]
  /* USER CODE BEGIN OnBeaconStatusChange_1 */
  if (params != NULL)
 800a1f0:	697b      	ldr	r3, [r7, #20]
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d056      	beq.n	800a2a4 <OnBeaconStatusChange+0xbc>
  {
    switch (params->State)
 800a1f6:	697b      	ldr	r3, [r7, #20]
 800a1f8:	785b      	ldrb	r3, [r3, #1]
 800a1fa:	2b02      	cmp	r3, #2
 800a1fc:	d008      	beq.n	800a210 <OnBeaconStatusChange+0x28>
 800a1fe:	2b03      	cmp	r3, #3
 800a200:	d049      	beq.n	800a296 <OnBeaconStatusChange+0xae>
    {
      default:
      case LORAMAC_HANDLER_BEACON_LOST:
      {
        APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### BEACON LOST\r\n");
 800a202:	4b2a      	ldr	r3, [pc, #168]	@ (800a2ac <OnBeaconStatusChange+0xc4>)
 800a204:	2200      	movs	r2, #0
 800a206:	2100      	movs	r1, #0
 800a208:	2002      	movs	r0, #2
 800a20a:	f010 ff77 	bl	801b0fc <UTIL_ADV_TRACE_COND_FSend>
        break;
 800a20e:	e049      	b.n	800a2a4 <OnBeaconStatusChange+0xbc>
      }
      case LORAMAC_HANDLER_BEACON_RX:
      {
        APP_LOG(TS_OFF, VLEVEL_M,
 800a210:	697b      	ldr	r3, [r7, #20]
 800a212:	7c1b      	ldrb	r3, [r3, #16]
 800a214:	4618      	mov	r0, r3
 800a216:	697b      	ldr	r3, [r7, #20]
 800a218:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800a21c:	461c      	mov	r4, r3
 800a21e:	697b      	ldr	r3, [r7, #20]
 800a220:	f993 3014 	ldrsb.w	r3, [r3, #20]
 800a224:	461d      	mov	r5, r3
 800a226:	697b      	ldr	r3, [r7, #20]
 800a228:	68db      	ldr	r3, [r3, #12]
 800a22a:	697a      	ldr	r2, [r7, #20]
 800a22c:	6852      	ldr	r2, [r2, #4]
 800a22e:	6979      	ldr	r1, [r7, #20]
 800a230:	7d89      	ldrb	r1, [r1, #22]
 800a232:	460e      	mov	r6, r1
 800a234:	6979      	ldr	r1, [r7, #20]
 800a236:	7dc9      	ldrb	r1, [r1, #23]
 800a238:	6139      	str	r1, [r7, #16]
 800a23a:	6979      	ldr	r1, [r7, #20]
 800a23c:	7e09      	ldrb	r1, [r1, #24]
 800a23e:	60f9      	str	r1, [r7, #12]
 800a240:	6979      	ldr	r1, [r7, #20]
 800a242:	7e49      	ldrb	r1, [r1, #25]
 800a244:	60b9      	str	r1, [r7, #8]
 800a246:	6979      	ldr	r1, [r7, #20]
 800a248:	7e89      	ldrb	r1, [r1, #26]
 800a24a:	6079      	str	r1, [r7, #4]
 800a24c:	6979      	ldr	r1, [r7, #20]
 800a24e:	7ec9      	ldrb	r1, [r1, #27]
 800a250:	6039      	str	r1, [r7, #0]
 800a252:	6979      	ldr	r1, [r7, #20]
 800a254:	7f09      	ldrb	r1, [r1, #28]
 800a256:	910b      	str	r1, [sp, #44]	@ 0x2c
 800a258:	f8d7 c000 	ldr.w	ip, [r7]
 800a25c:	f8cd c028 	str.w	ip, [sp, #40]	@ 0x28
 800a260:	f8d7 c004 	ldr.w	ip, [r7, #4]
 800a264:	f8cd c024 	str.w	ip, [sp, #36]	@ 0x24
 800a268:	f8d7 c008 	ldr.w	ip, [r7, #8]
 800a26c:	f8cd c020 	str.w	ip, [sp, #32]
 800a270:	f8d7 c00c 	ldr.w	ip, [r7, #12]
 800a274:	f8cd c01c 	str.w	ip, [sp, #28]
 800a278:	6939      	ldr	r1, [r7, #16]
 800a27a:	9106      	str	r1, [sp, #24]
 800a27c:	9605      	str	r6, [sp, #20]
 800a27e:	9204      	str	r2, [sp, #16]
 800a280:	9303      	str	r3, [sp, #12]
 800a282:	9502      	str	r5, [sp, #8]
 800a284:	9401      	str	r4, [sp, #4]
 800a286:	9000      	str	r0, [sp, #0]
 800a288:	4b09      	ldr	r3, [pc, #36]	@ (800a2b0 <OnBeaconStatusChange+0xc8>)
 800a28a:	2200      	movs	r2, #0
 800a28c:	2100      	movs	r1, #0
 800a28e:	2002      	movs	r0, #2
 800a290:	f010 ff34 	bl	801b0fc <UTIL_ADV_TRACE_COND_FSend>
                params->Info.Datarate, params->Info.Rssi, params->Info.Snr, params->Info.Frequency,
                params->Info.Time.Seconds, params->Info.GwSpecific.InfoDesc,
                params->Info.GwSpecific.Info[0], params->Info.GwSpecific.Info[1],
                params->Info.GwSpecific.Info[2], params->Info.GwSpecific.Info[3],
                params->Info.GwSpecific.Info[4], params->Info.GwSpecific.Info[5]);
        break;
 800a294:	e006      	b.n	800a2a4 <OnBeaconStatusChange+0xbc>
      }
      case LORAMAC_HANDLER_BEACON_NRX:
      {
        APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### BEACON NOT RECEIVED\r\n");
 800a296:	4b07      	ldr	r3, [pc, #28]	@ (800a2b4 <OnBeaconStatusChange+0xcc>)
 800a298:	2200      	movs	r2, #0
 800a29a:	2100      	movs	r1, #0
 800a29c:	2002      	movs	r0, #2
 800a29e:	f010 ff2d 	bl	801b0fc <UTIL_ADV_TRACE_COND_FSend>
        break;
 800a2a2:	bf00      	nop
      }
    }
  }
  /* USER CODE END OnBeaconStatusChange_1 */
}
 800a2a4:	bf00      	nop
 800a2a6:	371c      	adds	r7, #28
 800a2a8:	46bd      	mov	sp, r7
 800a2aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a2ac:	0801ba44 	.word	0x0801ba44
 800a2b0:	0801ba5c 	.word	0x0801ba5c
 800a2b4:	0801bad0 	.word	0x0801bad0

0800a2b8 <OnClassChange>:

static void OnClassChange(DeviceClass_t deviceClass)
{
 800a2b8:	b580      	push	{r7, lr}
 800a2ba:	b084      	sub	sp, #16
 800a2bc:	af02      	add	r7, sp, #8
 800a2be:	4603      	mov	r3, r0
 800a2c0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnClassChange_1 */
  APP_LOG(TS_OFF, VLEVEL_M, "Switch to Class %c done\r\n", "ABC"[deviceClass]);
 800a2c2:	79fb      	ldrb	r3, [r7, #7]
 800a2c4:	4a06      	ldr	r2, [pc, #24]	@ (800a2e0 <OnClassChange+0x28>)
 800a2c6:	5cd3      	ldrb	r3, [r2, r3]
 800a2c8:	9300      	str	r3, [sp, #0]
 800a2ca:	4b06      	ldr	r3, [pc, #24]	@ (800a2e4 <OnClassChange+0x2c>)
 800a2cc:	2200      	movs	r2, #0
 800a2ce:	2100      	movs	r1, #0
 800a2d0:	2002      	movs	r0, #2
 800a2d2:	f010 ff13 	bl	801b0fc <UTIL_ADV_TRACE_COND_FSend>
  /* USER CODE END OnClassChange_1 */
}
 800a2d6:	bf00      	nop
 800a2d8:	3708      	adds	r7, #8
 800a2da:	46bd      	mov	sp, r7
 800a2dc:	bd80      	pop	{r7, pc}
 800a2de:	bf00      	nop
 800a2e0:	0801bb0c 	.word	0x0801bb0c
 800a2e4:	0801baf0 	.word	0x0801baf0

0800a2e8 <OnMacProcessNotify>:

static void OnMacProcessNotify(void)
{
 800a2e8:	b580      	push	{r7, lr}
 800a2ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnMacProcessNotify_1 */

  /* USER CODE END OnMacProcessNotify_1 */
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LmHandlerProcess), CFG_SEQ_Prio_0);
 800a2ec:	2100      	movs	r1, #0
 800a2ee:	2001      	movs	r0, #1
 800a2f0:	f010 fbd6 	bl	801aaa0 <UTIL_SEQ_SetTask>

  /* USER CODE BEGIN OnMacProcessNotify_2 */

  /* USER CODE END OnMacProcessNotify_2 */
}
 800a2f4:	bf00      	nop
 800a2f6:	bd80      	pop	{r7, pc}

0800a2f8 <OnTxPeriodicityChanged>:

static void OnTxPeriodicityChanged(uint32_t periodicity)
{
 800a2f8:	b580      	push	{r7, lr}
 800a2fa:	b082      	sub	sp, #8
 800a2fc:	af00      	add	r7, sp, #0
 800a2fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxPeriodicityChanged_1 */

  /* USER CODE END OnTxPeriodicityChanged_1 */
  TxPeriodicity = periodicity;
 800a300:	4a0d      	ldr	r2, [pc, #52]	@ (800a338 <OnTxPeriodicityChanged+0x40>)
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	6013      	str	r3, [r2, #0]

  if (TxPeriodicity == 0)
 800a306:	4b0c      	ldr	r3, [pc, #48]	@ (800a338 <OnTxPeriodicityChanged+0x40>)
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d103      	bne.n	800a316 <OnTxPeriodicityChanged+0x1e>
  {
    /* Revert to application default periodicity */
    TxPeriodicity = APP_TX_DUTYCYCLE;
 800a30e:	4b0a      	ldr	r3, [pc, #40]	@ (800a338 <OnTxPeriodicityChanged+0x40>)
 800a310:	f242 7210 	movw	r2, #10000	@ 0x2710
 800a314:	601a      	str	r2, [r3, #0]
  }

  /* Update timer periodicity */
  UTIL_TIMER_Stop(&TxTimer);
 800a316:	4809      	ldr	r0, [pc, #36]	@ (800a33c <OnTxPeriodicityChanged+0x44>)
 800a318:	f010 fce6 	bl	801ace8 <UTIL_TIMER_Stop>
  UTIL_TIMER_SetPeriod(&TxTimer, TxPeriodicity);
 800a31c:	4b06      	ldr	r3, [pc, #24]	@ (800a338 <OnTxPeriodicityChanged+0x40>)
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	4619      	mov	r1, r3
 800a322:	4806      	ldr	r0, [pc, #24]	@ (800a33c <OnTxPeriodicityChanged+0x44>)
 800a324:	f010 fd50 	bl	801adc8 <UTIL_TIMER_SetPeriod>
  UTIL_TIMER_Start(&TxTimer);
 800a328:	4804      	ldr	r0, [pc, #16]	@ (800a33c <OnTxPeriodicityChanged+0x44>)
 800a32a:	f010 fc6f 	bl	801ac0c <UTIL_TIMER_Start>
  /* USER CODE BEGIN OnTxPeriodicityChanged_2 */

  /* USER CODE END OnTxPeriodicityChanged_2 */
}
 800a32e:	bf00      	nop
 800a330:	3708      	adds	r7, #8
 800a332:	46bd      	mov	sp, r7
 800a334:	bd80      	pop	{r7, pc}
 800a336:	bf00      	nop
 800a338:	20000084 	.word	0x20000084
 800a33c:	2000033c 	.word	0x2000033c

0800a340 <OnTxFrameCtrlChanged>:

static void OnTxFrameCtrlChanged(LmHandlerMsgTypes_t isTxConfirmed)
{
 800a340:	b480      	push	{r7}
 800a342:	b083      	sub	sp, #12
 800a344:	af00      	add	r7, sp, #0
 800a346:	4603      	mov	r3, r0
 800a348:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnTxFrameCtrlChanged_1 */

  /* USER CODE END OnTxFrameCtrlChanged_1 */
  LmHandlerParams.IsTxConfirmed = isTxConfirmed;
 800a34a:	4a04      	ldr	r2, [pc, #16]	@ (800a35c <OnTxFrameCtrlChanged+0x1c>)
 800a34c:	79fb      	ldrb	r3, [r7, #7]
 800a34e:	70d3      	strb	r3, [r2, #3]
  /* USER CODE BEGIN OnTxFrameCtrlChanged_2 */

  /* USER CODE END OnTxFrameCtrlChanged_2 */
}
 800a350:	bf00      	nop
 800a352:	370c      	adds	r7, #12
 800a354:	46bd      	mov	sp, r7
 800a356:	bc80      	pop	{r7}
 800a358:	4770      	bx	lr
 800a35a:	bf00      	nop
 800a35c:	20000070 	.word	0x20000070

0800a360 <OnPingSlotPeriodicityChanged>:

static void OnPingSlotPeriodicityChanged(uint8_t pingSlotPeriodicity)
{
 800a360:	b480      	push	{r7}
 800a362:	b083      	sub	sp, #12
 800a364:	af00      	add	r7, sp, #0
 800a366:	4603      	mov	r3, r0
 800a368:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnPingSlotPeriodicityChanged_1 */

  /* USER CODE END OnPingSlotPeriodicityChanged_1 */
  LmHandlerParams.PingSlotPeriodicity = pingSlotPeriodicity;
 800a36a:	4a04      	ldr	r2, [pc, #16]	@ (800a37c <OnPingSlotPeriodicityChanged+0x1c>)
 800a36c:	79fb      	ldrb	r3, [r7, #7]
 800a36e:	7313      	strb	r3, [r2, #12]
  /* USER CODE BEGIN OnPingSlotPeriodicityChanged_2 */

  /* USER CODE END OnPingSlotPeriodicityChanged_2 */
}
 800a370:	bf00      	nop
 800a372:	370c      	adds	r7, #12
 800a374:	46bd      	mov	sp, r7
 800a376:	bc80      	pop	{r7}
 800a378:	4770      	bx	lr
 800a37a:	bf00      	nop
 800a37c:	20000070 	.word	0x20000070

0800a380 <OnSystemReset>:

static void OnSystemReset(void)
{
 800a380:	b580      	push	{r7, lr}
 800a382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnSystemReset_1 */

  /* USER CODE END OnSystemReset_1 */
  if ((LORAMAC_HANDLER_SUCCESS == LmHandlerHalt()) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 800a384:	f002 fced 	bl	800cd62 <LmHandlerHalt>
 800a388:	4603      	mov	r3, r0
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d106      	bne.n	800a39c <OnSystemReset+0x1c>
 800a38e:	f001 fff9 	bl	800c384 <LmHandlerJoinStatus>
 800a392:	4603      	mov	r3, r0
 800a394:	2b01      	cmp	r3, #1
 800a396:	d101      	bne.n	800a39c <OnSystemReset+0x1c>
  {
    NVIC_SystemReset();
 800a398:	f7ff faf8 	bl	800998c <__NVIC_SystemReset>
  }
  /* USER CODE BEGIN OnSystemReset_Last */

  /* USER CODE END OnSystemReset_Last */
}
 800a39c:	bf00      	nop
 800a39e:	bd80      	pop	{r7, pc}

0800a3a0 <StopJoin>:

static void StopJoin(void)
{
 800a3a0:	b580      	push	{r7, lr}
 800a3a2:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET); /* LED_GREEN */
#endif

  /* USER CODE END StopJoin_1 */

  UTIL_TIMER_Stop(&TxTimer);
 800a3a4:	4817      	ldr	r0, [pc, #92]	@ (800a404 <StopJoin+0x64>)
 800a3a6:	f010 fc9f 	bl	801ace8 <UTIL_TIMER_Stop>

  if (LORAMAC_HANDLER_SUCCESS != LmHandlerStop())
 800a3aa:	f002 fccd 	bl	800cd48 <LmHandlerStop>
 800a3ae:	4603      	mov	r3, r0
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d006      	beq.n	800a3c2 <StopJoin+0x22>
  {
    APP_LOG(TS_OFF, VLEVEL_M, "LmHandler Stop on going ...\r\n");
 800a3b4:	4b14      	ldr	r3, [pc, #80]	@ (800a408 <StopJoin+0x68>)
 800a3b6:	2200      	movs	r2, #0
 800a3b8:	2100      	movs	r1, #0
 800a3ba:	2002      	movs	r0, #2
 800a3bc:	f010 fe9e 	bl	801b0fc <UTIL_ADV_TRACE_COND_FSend>
 800a3c0:	e01a      	b.n	800a3f8 <StopJoin+0x58>
  }
  else
  {
    APP_LOG(TS_OFF, VLEVEL_M, "LmHandler Stopped\r\n");
 800a3c2:	4b12      	ldr	r3, [pc, #72]	@ (800a40c <StopJoin+0x6c>)
 800a3c4:	2200      	movs	r2, #0
 800a3c6:	2100      	movs	r1, #0
 800a3c8:	2002      	movs	r0, #2
 800a3ca:	f010 fe97 	bl	801b0fc <UTIL_ADV_TRACE_COND_FSend>
      ActivationType = ACTIVATION_TYPE_OTAA;
      APP_LOG(TS_OFF, VLEVEL_M, "LmHandler switch to OTAA mode\r\n");
    }
    else
    {
      ActivationType = ACTIVATION_TYPE_ABP;
 800a3ce:	4b10      	ldr	r3, [pc, #64]	@ (800a410 <StopJoin+0x70>)
 800a3d0:	2201      	movs	r2, #1
 800a3d2:	701a      	strb	r2, [r3, #0]
      APP_LOG(TS_OFF, VLEVEL_M, "LmHandler switch to ABP mode\r\n");
 800a3d4:	4b0f      	ldr	r3, [pc, #60]	@ (800a414 <StopJoin+0x74>)
 800a3d6:	2200      	movs	r2, #0
 800a3d8:	2100      	movs	r1, #0
 800a3da:	2002      	movs	r0, #2
 800a3dc:	f010 fe8e 	bl	801b0fc <UTIL_ADV_TRACE_COND_FSend>
    }
    LmHandlerConfigure(&LmHandlerParams);
 800a3e0:	480d      	ldr	r0, [pc, #52]	@ (800a418 <StopJoin+0x78>)
 800a3e2:	f001 fdd1 	bl	800bf88 <LmHandlerConfigure>
    LmHandlerJoin(ActivationType, true);
 800a3e6:	4b0a      	ldr	r3, [pc, #40]	@ (800a410 <StopJoin+0x70>)
 800a3e8:	781b      	ldrb	r3, [r3, #0]
 800a3ea:	2101      	movs	r1, #1
 800a3ec:	4618      	mov	r0, r3
 800a3ee:	f001 ff47 	bl	800c280 <LmHandlerJoin>
    UTIL_TIMER_Start(&TxTimer);
 800a3f2:	4804      	ldr	r0, [pc, #16]	@ (800a404 <StopJoin+0x64>)
 800a3f4:	f010 fc0a 	bl	801ac0c <UTIL_TIMER_Start>
  }
  UTIL_TIMER_Start(&StopJoinTimer);
 800a3f8:	4808      	ldr	r0, [pc, #32]	@ (800a41c <StopJoin+0x7c>)
 800a3fa:	f010 fc07 	bl	801ac0c <UTIL_TIMER_Start>
  /* USER CODE BEGIN StopJoin_Last */

  /* USER CODE END StopJoin_Last */
}
 800a3fe:	bf00      	nop
 800a400:	bd80      	pop	{r7, pc}
 800a402:	bf00      	nop
 800a404:	2000033c 	.word	0x2000033c
 800a408:	0801bb10 	.word	0x0801bb10
 800a40c:	0801bb30 	.word	0x0801bb30
 800a410:	20000020 	.word	0x20000020
 800a414:	0801bb44 	.word	0x0801bb44
 800a418:	20000070 	.word	0x20000070
 800a41c:	20000354 	.word	0x20000354

0800a420 <OnStopJoinTimerEvent>:

static void OnStopJoinTimerEvent(void *context)
{
 800a420:	b580      	push	{r7, lr}
 800a422:	b082      	sub	sp, #8
 800a424:	af00      	add	r7, sp, #0
 800a426:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnStopJoinTimerEvent_1 */

  /* USER CODE END OnStopJoinTimerEvent_1 */
  if (ActivationType == LORAWAN_DEFAULT_ACTIVATION_TYPE)
 800a428:	4b05      	ldr	r3, [pc, #20]	@ (800a440 <OnStopJoinTimerEvent+0x20>)
 800a42a:	781b      	ldrb	r3, [r3, #0]
 800a42c:	2b02      	cmp	r3, #2
 800a42e:	d103      	bne.n	800a438 <OnStopJoinTimerEvent+0x18>
  {
    UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaStopJoinEvent), CFG_SEQ_Prio_0);
 800a430:	2100      	movs	r1, #0
 800a432:	2008      	movs	r0, #8
 800a434:	f010 fb34 	bl	801aaa0 <UTIL_SEQ_SetTask>
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET); /* LED_BLUE */
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_RED */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_GREEN */
#endif
  /* USER CODE END OnStopJoinTimerEvent_Last */
}
 800a438:	bf00      	nop
 800a43a:	3708      	adds	r7, #8
 800a43c:	46bd      	mov	sp, r7
 800a43e:	bd80      	pop	{r7, pc}
 800a440:	20000020 	.word	0x20000020

0800a444 <StoreContext>:

static void StoreContext(void)
{
 800a444:	b580      	push	{r7, lr}
 800a446:	b082      	sub	sp, #8
 800a448:	af00      	add	r7, sp, #0
  LmHandlerErrorStatus_t status = LORAMAC_HANDLER_ERROR;
 800a44a:	23ff      	movs	r3, #255	@ 0xff
 800a44c:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN StoreContext_1 */

  /* USER CODE END StoreContext_1 */
  status = LmHandlerNvmDataStore();
 800a44e:	f002 fc95 	bl	800cd7c <LmHandlerNvmDataStore>
 800a452:	4603      	mov	r3, r0
 800a454:	71fb      	strb	r3, [r7, #7]

  if (status == LORAMAC_HANDLER_NVM_DATA_UP_TO_DATE)
 800a456:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a45a:	f113 0f08 	cmn.w	r3, #8
 800a45e:	d106      	bne.n	800a46e <StoreContext+0x2a>
  {
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA UP TO DATE\r\n");
 800a460:	4b0a      	ldr	r3, [pc, #40]	@ (800a48c <StoreContext+0x48>)
 800a462:	2200      	movs	r2, #0
 800a464:	2100      	movs	r1, #0
 800a466:	2002      	movs	r0, #2
 800a468:	f010 fe48 	bl	801b0fc <UTIL_ADV_TRACE_COND_FSend>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORE FAILED\r\n");
  }
  /* USER CODE BEGIN StoreContext_Last */

  /* USER CODE END StoreContext_Last */
}
 800a46c:	e00a      	b.n	800a484 <StoreContext+0x40>
  else if (status == LORAMAC_HANDLER_ERROR)
 800a46e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a472:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a476:	d105      	bne.n	800a484 <StoreContext+0x40>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORE FAILED\r\n");
 800a478:	4b05      	ldr	r3, [pc, #20]	@ (800a490 <StoreContext+0x4c>)
 800a47a:	2200      	movs	r2, #0
 800a47c:	2100      	movs	r1, #0
 800a47e:	2002      	movs	r0, #2
 800a480:	f010 fe3c 	bl	801b0fc <UTIL_ADV_TRACE_COND_FSend>
}
 800a484:	bf00      	nop
 800a486:	3708      	adds	r7, #8
 800a488:	46bd      	mov	sp, r7
 800a48a:	bd80      	pop	{r7, pc}
 800a48c:	0801bb64 	.word	0x0801bb64
 800a490:	0801bb7c 	.word	0x0801bb7c

0800a494 <OnNvmDataChange>:

static void OnNvmDataChange(LmHandlerNvmContextStates_t state)
{
 800a494:	b580      	push	{r7, lr}
 800a496:	b082      	sub	sp, #8
 800a498:	af00      	add	r7, sp, #0
 800a49a:	4603      	mov	r3, r0
 800a49c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnNvmDataChange_1 */

  /* USER CODE END OnNvmDataChange_1 */
  if (state == LORAMAC_HANDLER_NVM_STORE)
 800a49e:	79fb      	ldrb	r3, [r7, #7]
 800a4a0:	2b01      	cmp	r3, #1
 800a4a2:	d106      	bne.n	800a4b2 <OnNvmDataChange+0x1e>
  {
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORED\r\n");
 800a4a4:	4b08      	ldr	r3, [pc, #32]	@ (800a4c8 <OnNvmDataChange+0x34>)
 800a4a6:	2200      	movs	r2, #0
 800a4a8:	2100      	movs	r1, #0
 800a4aa:	2002      	movs	r0, #2
 800a4ac:	f010 fe26 	bl	801b0fc <UTIL_ADV_TRACE_COND_FSend>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA RESTORED\r\n");
  }
  /* USER CODE BEGIN OnNvmDataChange_Last */

  /* USER CODE END OnNvmDataChange_Last */
}
 800a4b0:	e005      	b.n	800a4be <OnNvmDataChange+0x2a>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA RESTORED\r\n");
 800a4b2:	4b06      	ldr	r3, [pc, #24]	@ (800a4cc <OnNvmDataChange+0x38>)
 800a4b4:	2200      	movs	r2, #0
 800a4b6:	2100      	movs	r1, #0
 800a4b8:	2002      	movs	r0, #2
 800a4ba:	f010 fe1f 	bl	801b0fc <UTIL_ADV_TRACE_COND_FSend>
}
 800a4be:	bf00      	nop
 800a4c0:	3708      	adds	r7, #8
 800a4c2:	46bd      	mov	sp, r7
 800a4c4:	bd80      	pop	{r7, pc}
 800a4c6:	bf00      	nop
 800a4c8:	0801bb94 	.word	0x0801bb94
 800a4cc:	0801bba8 	.word	0x0801bba8

0800a4d0 <OnStoreContextRequest>:

static void OnStoreContextRequest(void *nvm, uint32_t nvm_size)
{
 800a4d0:	b580      	push	{r7, lr}
 800a4d2:	b082      	sub	sp, #8
 800a4d4:	af00      	add	r7, sp, #0
 800a4d6:	6078      	str	r0, [r7, #4]
 800a4d8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN OnStoreContextRequest_1 */

  /* USER CODE END OnStoreContextRequest_1 */
  /* store nvm in flash */
  if (HAL_FLASH_Unlock() == HAL_OK)
 800a4da:	f7fa f86b 	bl	80045b4 <HAL_FLASH_Unlock>
 800a4de:	4603      	mov	r3, r0
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d11c      	bne.n	800a51e <OnStoreContextRequest+0x4e>
  {
    if (FLASH_IF_EraseByPages(PAGE(LORAWAN_NVM_BASE_ADDRESS), 1, 0U) == FLASH_OK)
 800a4e4:	4b10      	ldr	r3, [pc, #64]	@ (800a528 <OnStoreContextRequest+0x58>)
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	029a      	lsls	r2, r3, #10
 800a4ea:	4b10      	ldr	r3, [pc, #64]	@ (800a52c <OnStoreContextRequest+0x5c>)
 800a4ec:	4013      	ands	r3, r2
 800a4ee:	f44f 327c 	mov.w	r2, #258048	@ 0x3f000
 800a4f2:	fbb2 f1f3 	udiv	r1, r2, r3
 800a4f6:	fb01 f303 	mul.w	r3, r1, r3
 800a4fa:	1ad3      	subs	r3, r2, r3
 800a4fc:	0adb      	lsrs	r3, r3, #11
 800a4fe:	2200      	movs	r2, #0
 800a500:	2101      	movs	r1, #1
 800a502:	4618      	mov	r0, r3
 800a504:	f7f6 ff0d 	bl	8001322 <FLASH_IF_EraseByPages>
 800a508:	4603      	mov	r3, r0
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d105      	bne.n	800a51a <OnStoreContextRequest+0x4a>
    {
      FLASH_IF_Write(LORAWAN_NVM_BASE_ADDRESS, (uint8_t *)nvm, nvm_size, NULL);
 800a50e:	2300      	movs	r3, #0
 800a510:	683a      	ldr	r2, [r7, #0]
 800a512:	6879      	ldr	r1, [r7, #4]
 800a514:	4806      	ldr	r0, [pc, #24]	@ (800a530 <OnStoreContextRequest+0x60>)
 800a516:	f7f6 fe23 	bl	8001160 <FLASH_IF_Write>
    }
    HAL_FLASH_Lock();
 800a51a:	f7fa f86d 	bl	80045f8 <HAL_FLASH_Lock>
  }
  /* USER CODE BEGIN OnStoreContextRequest_Last */

  /* USER CODE END OnStoreContextRequest_Last */
}
 800a51e:	bf00      	nop
 800a520:	3708      	adds	r7, #8
 800a522:	46bd      	mov	sp, r7
 800a524:	bd80      	pop	{r7, pc}
 800a526:	bf00      	nop
 800a528:	1fff75e0 	.word	0x1fff75e0
 800a52c:	03fffc00 	.word	0x03fffc00
 800a530:	0803f000 	.word	0x0803f000

0800a534 <OnRestoreContextRequest>:

static void OnRestoreContextRequest(void *nvm, uint32_t nvm_size)
{
 800a534:	b580      	push	{r7, lr}
 800a536:	b082      	sub	sp, #8
 800a538:	af00      	add	r7, sp, #0
 800a53a:	6078      	str	r0, [r7, #4]
 800a53c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN OnRestoreContextRequest_1 */

  /* USER CODE END OnRestoreContextRequest_1 */
  UTIL_MEM_cpy_8(nvm, (void *)LORAWAN_NVM_BASE_ADDRESS, nvm_size);
 800a53e:	683b      	ldr	r3, [r7, #0]
 800a540:	b29b      	uxth	r3, r3
 800a542:	461a      	mov	r2, r3
 800a544:	4903      	ldr	r1, [pc, #12]	@ (800a554 <OnRestoreContextRequest+0x20>)
 800a546:	6878      	ldr	r0, [r7, #4]
 800a548:	f00f fd8e 	bl	801a068 <UTIL_MEM_cpy_8>
  /* USER CODE BEGIN OnRestoreContextRequest_Last */

  /* USER CODE END OnRestoreContextRequest_Last */
}
 800a54c:	bf00      	nop
 800a54e:	3708      	adds	r7, #8
 800a550:	46bd      	mov	sp, r7
 800a552:	bd80      	pop	{r7, pc}
 800a554:	0803f000 	.word	0x0803f000

0800a558 <LoraInfo_Init>:

/* USER CODE END EV */

/* Exported functions --------------------------------------------------------*/
void LoraInfo_Init(void)
{
 800a558:	b580      	push	{r7, lr}
 800a55a:	af00      	add	r7, sp, #0
  loraInfo.ActivationMode = 0;
 800a55c:	4b15      	ldr	r3, [pc, #84]	@ (800a5b4 <LoraInfo_Init+0x5c>)
 800a55e:	2200      	movs	r2, #0
 800a560:	601a      	str	r2, [r3, #0]
  loraInfo.Region = 0;
 800a562:	4b14      	ldr	r3, [pc, #80]	@ (800a5b4 <LoraInfo_Init+0x5c>)
 800a564:	2200      	movs	r2, #0
 800a566:	605a      	str	r2, [r3, #4]
  loraInfo.ClassB = 0;
 800a568:	4b12      	ldr	r3, [pc, #72]	@ (800a5b4 <LoraInfo_Init+0x5c>)
 800a56a:	2200      	movs	r2, #0
 800a56c:	609a      	str	r2, [r3, #8]
  loraInfo.Kms = 0;
 800a56e:	4b11      	ldr	r3, [pc, #68]	@ (800a5b4 <LoraInfo_Init+0x5c>)
 800a570:	2200      	movs	r2, #0
 800a572:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN LoraInfo_Init_1 */

  /* USER CODE END LoraInfo_Init_1 */

#ifdef  REGION_AS923
  loraInfo.Region |= (1 << LORAMAC_REGION_AS923);
 800a574:	4b0f      	ldr	r3, [pc, #60]	@ (800a5b4 <LoraInfo_Init+0x5c>)
 800a576:	685b      	ldr	r3, [r3, #4]
 800a578:	f043 0301 	orr.w	r3, r3, #1
 800a57c:	4a0d      	ldr	r2, [pc, #52]	@ (800a5b4 <LoraInfo_Init+0x5c>)
 800a57e:	6053      	str	r3, [r2, #4]
#endif /* REGION_US915 */
#ifdef  REGION_RU864
  loraInfo.Region |= (1 << LORAMAC_REGION_RU864);
#endif /* REGION_RU864 */

  if (loraInfo.Region == 0)
 800a580:	4b0c      	ldr	r3, [pc, #48]	@ (800a5b4 <LoraInfo_Init+0x5c>)
 800a582:	685b      	ldr	r3, [r3, #4]
 800a584:	2b00      	cmp	r3, #0
 800a586:	d10d      	bne.n	800a5a4 <LoraInfo_Init+0x4c>
  {
    APP_PRINTF("error: At least one region shall be defined in the MW: check lorawan_conf.h \r\n");
 800a588:	4b0b      	ldr	r3, [pc, #44]	@ (800a5b8 <LoraInfo_Init+0x60>)
 800a58a:	2200      	movs	r2, #0
 800a58c:	2100      	movs	r1, #0
 800a58e:	2000      	movs	r0, #0
 800a590:	f010 fdb4 	bl	801b0fc <UTIL_ADV_TRACE_COND_FSend>
    while (1 != UTIL_ADV_TRACE_IsBufferEmpty())
 800a594:	bf00      	nop
 800a596:	f010 fd9f 	bl	801b0d8 <UTIL_ADV_TRACE_IsBufferEmpty>
 800a59a:	4603      	mov	r3, r0
 800a59c:	2b01      	cmp	r3, #1
 800a59e:	d1fa      	bne.n	800a596 <LoraInfo_Init+0x3e>
    {
      /* Wait that all printfs are completed*/
    }
    while (1) {} /* At least one region shall be defined */
 800a5a0:	bf00      	nop
 800a5a2:	e7fd      	b.n	800a5a0 <LoraInfo_Init+0x48>
#elif !defined (LORAMAC_CLASSB_ENABLED)
#error LORAMAC_CLASSB_ENABLED not defined ( shall be <0 or 1> )
#endif /* LORAMAC_CLASSB_ENABLED */

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
  loraInfo.Kms = 0;
 800a5a4:	4b03      	ldr	r3, [pc, #12]	@ (800a5b4 <LoraInfo_Init+0x5c>)
 800a5a6:	2200      	movs	r2, #0
 800a5a8:	60da      	str	r2, [r3, #12]
  loraInfo.ActivationMode = 3;
 800a5aa:	4b02      	ldr	r3, [pc, #8]	@ (800a5b4 <LoraInfo_Init+0x5c>)
 800a5ac:	2203      	movs	r2, #3
 800a5ae:	601a      	str	r2, [r3, #0]
  loraInfo.ActivationMode = ACTIVATION_BY_PERSONALIZATION + (OVER_THE_AIR_ACTIVATION << 1);
#endif /* LORAWAN_KMS */
  /* USER CODE BEGIN LoraInfo_Init_2 */

  /* USER CODE END LoraInfo_Init_2 */
}
 800a5b0:	bf00      	nop
 800a5b2:	bd80      	pop	{r7, pc}
 800a5b4:	200004a8 	.word	0x200004a8
 800a5b8:	0801bbbc 	.word	0x0801bbbc

0800a5bc <LoraInfo_GetPtr>:

LoraInfo_t *LoraInfo_GetPtr(void)
{
 800a5bc:	b480      	push	{r7}
 800a5be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LoraInfo_GetPtr */

  /* USER CODE END LoraInfo_GetPtr */
  return &loraInfo;
 800a5c0:	4b02      	ldr	r3, [pc, #8]	@ (800a5cc <LoraInfo_GetPtr+0x10>)
}
 800a5c2:	4618      	mov	r0, r3
 800a5c4:	46bd      	mov	sp, r7
 800a5c6:	bc80      	pop	{r7}
 800a5c8:	4770      	bx	lr
 800a5ca:	bf00      	nop
 800a5cc:	200004a8 	.word	0x200004a8

0800a5d0 <RBI_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t RBI_Init(void)
{
 800a5d0:	b580      	push	{r7, lr}
 800a5d2:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_Init();
 800a5d4:	f7f8 f8f5 	bl	80027c2 <BSP_RADIO_Init>
 800a5d8:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_Init_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_Init_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800a5da:	4618      	mov	r0, r3
 800a5dc:	bd80      	pop	{r7, pc}

0800a5de <RBI_ConfigRFSwitch>:
  return retcode;
#endif  /* USE_BSP_DRIVER */
}

int32_t RBI_ConfigRFSwitch(RBI_Switch_TypeDef Config)
{
 800a5de:	b580      	push	{r7, lr}
 800a5e0:	b082      	sub	sp, #8
 800a5e2:	af00      	add	r7, sp, #0
 800a5e4:	4603      	mov	r3, r0
 800a5e6:	71fb      	strb	r3, [r7, #7]
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_ConfigRFSwitch((BSP_RADIO_Switch_TypeDef) Config);
 800a5e8:	79fb      	ldrb	r3, [r7, #7]
 800a5ea:	4618      	mov	r0, r3
 800a5ec:	f7f8 f91a 	bl	8002824 <BSP_RADIO_ConfigRFSwitch>
 800a5f0:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_ConfigRFSwitch_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_ConfigRFSwitch_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 800a5f2:	4618      	mov	r0, r3
 800a5f4:	3708      	adds	r7, #8
 800a5f6:	46bd      	mov	sp, r7
 800a5f8:	bd80      	pop	{r7, pc}

0800a5fa <RBI_GetTxConfig>:

int32_t RBI_GetTxConfig(void)
{
 800a5fa:	b580      	push	{r7, lr}
 800a5fc:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetTxConfig();
 800a5fe:	f7f8 f95f 	bl	80028c0 <BSP_RADIO_GetTxConfig>
 800a602:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_GetTxConfig_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_GetTxConfig_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 800a604:	4618      	mov	r0, r3
 800a606:	bd80      	pop	{r7, pc}

0800a608 <RBI_IsTCXO>:

int32_t RBI_IsTCXO(void)
{
 800a608:	b580      	push	{r7, lr}
 800a60a:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsTCXO();
 800a60c:	f7f8 f95f 	bl	80028ce <BSP_RADIO_IsTCXO>
 800a610:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsTCXO_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsTCXO_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800a612:	4618      	mov	r0, r3
 800a614:	bd80      	pop	{r7, pc}

0800a616 <RBI_IsDCDC>:

int32_t RBI_IsDCDC(void)
{
 800a616:	b580      	push	{r7, lr}
 800a618:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsDCDC();
 800a61a:	f7f8 f95f 	bl	80028dc <BSP_RADIO_IsDCDC>
 800a61e:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsDCDC_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsDCDC_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800a620:	4618      	mov	r0, r3
 800a622:	bd80      	pop	{r7, pc}

0800a624 <RBI_GetRFOMaxPowerConfig>:

int32_t RBI_GetRFOMaxPowerConfig(RBI_RFOMaxPowerConfig_TypeDef Config)
{
 800a624:	b580      	push	{r7, lr}
 800a626:	b082      	sub	sp, #8
 800a628:	af00      	add	r7, sp, #0
 800a62a:	4603      	mov	r3, r0
 800a62c:	71fb      	strb	r3, [r7, #7]
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetRFOMaxPowerConfig((BSP_RADIO_RFOMaxPowerConfig_TypeDef) Config);
 800a62e:	79fb      	ldrb	r3, [r7, #7]
 800a630:	4618      	mov	r0, r3
 800a632:	f7f8 f95a 	bl	80028ea <BSP_RADIO_GetRFOMaxPowerConfig>
 800a636:	4603      	mov	r3, r0
    ret = 22; /*dBm*/
  }
  /* USER CODE END RBI_GetRFOMaxPowerConfig_2 */
  return ret;
#endif  /* USE_BSP_DRIVER  */
}
 800a638:	4618      	mov	r0, r3
 800a63a:	3708      	adds	r7, #8
 800a63c:	46bd      	mov	sp, r7
 800a63e:	bd80      	pop	{r7, pc}

0800a640 <AES_CMAC_Init>:
            ( r )[i] = ( r )[i] ^ ( v )[i]; \
        }                                   \
    } while( 0 )

void AES_CMAC_Init( AES_CMAC_CTX* ctx )
{
 800a640:	b580      	push	{r7, lr}
 800a642:	b082      	sub	sp, #8
 800a644:	af00      	add	r7, sp, #0
 800a646:	6078      	str	r0, [r7, #4]
    memset1( ctx->X, 0, sizeof ctx->X );
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	33f1      	adds	r3, #241	@ 0xf1
 800a64c:	2210      	movs	r2, #16
 800a64e:	2100      	movs	r1, #0
 800a650:	4618      	mov	r0, r3
 800a652:	f00c fa3f 	bl	8016ad4 <memset1>
    ctx->M_n = 0;
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	2200      	movs	r2, #0
 800a65a:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
    memset1( ctx->rijndael.ksch, '\0', 240 );
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	22f0      	movs	r2, #240	@ 0xf0
 800a662:	2100      	movs	r1, #0
 800a664:	4618      	mov	r0, r3
 800a666:	f00c fa35 	bl	8016ad4 <memset1>
}
 800a66a:	bf00      	nop
 800a66c:	3708      	adds	r7, #8
 800a66e:	46bd      	mov	sp, r7
 800a670:	bd80      	pop	{r7, pc}

0800a672 <AES_CMAC_SetKey>:

void AES_CMAC_SetKey( AES_CMAC_CTX* ctx, const uint8_t key[AES_CMAC_KEY_LENGTH] )
{
 800a672:	b580      	push	{r7, lr}
 800a674:	b082      	sub	sp, #8
 800a676:	af00      	add	r7, sp, #0
 800a678:	6078      	str	r0, [r7, #4]
 800a67a:	6039      	str	r1, [r7, #0]
    lorawan_aes_set_key( key, AES_CMAC_KEY_LENGTH, &ctx->rijndael );
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	461a      	mov	r2, r3
 800a680:	2110      	movs	r1, #16
 800a682:	6838      	ldr	r0, [r7, #0]
 800a684:	f000 fe5c 	bl	800b340 <lorawan_aes_set_key>
}
 800a688:	bf00      	nop
 800a68a:	3708      	adds	r7, #8
 800a68c:	46bd      	mov	sp, r7
 800a68e:	bd80      	pop	{r7, pc}

0800a690 <AES_CMAC_Update>:

void AES_CMAC_Update( AES_CMAC_CTX* ctx, const uint8_t* data, uint32_t len )
{
 800a690:	b580      	push	{r7, lr}
 800a692:	b08c      	sub	sp, #48	@ 0x30
 800a694:	af00      	add	r7, sp, #0
 800a696:	60f8      	str	r0, [r7, #12]
 800a698:	60b9      	str	r1, [r7, #8]
 800a69a:	607a      	str	r2, [r7, #4]
    uint32_t mlen;
    uint8_t  in[16];

    if( ctx->M_n > 0 )
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	f000 80a1 	beq.w	800a7ea <AES_CMAC_Update+0x15a>
    {
        mlen = MIN( 16 - ctx->M_n, len );
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800a6ae:	f1c3 0310 	rsb	r3, r3, #16
 800a6b2:	687a      	ldr	r2, [r7, #4]
 800a6b4:	4293      	cmp	r3, r2
 800a6b6:	bf28      	it	cs
 800a6b8:	4613      	movcs	r3, r2
 800a6ba:	627b      	str	r3, [r7, #36]	@ 0x24
        memcpy1( ctx->M_last + ctx->M_n, data, mlen );
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	f203 1201 	addw	r2, r3, #257	@ 0x101
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800a6c8:	4413      	add	r3, r2
 800a6ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a6cc:	b292      	uxth	r2, r2
 800a6ce:	68b9      	ldr	r1, [r7, #8]
 800a6d0:	4618      	mov	r0, r3
 800a6d2:	f00c f9c4 	bl	8016a5e <memcpy1>
        ctx->M_n += mlen;
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	f8d3 2114 	ldr.w	r2, [r3, #276]	@ 0x114
 800a6dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6de:	441a      	add	r2, r3
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
        if( ctx->M_n < 16 || len == mlen )
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800a6ec:	2b0f      	cmp	r3, #15
 800a6ee:	f240 808d 	bls.w	800a80c <AES_CMAC_Update+0x17c>
 800a6f2:	687a      	ldr	r2, [r7, #4]
 800a6f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6f6:	429a      	cmp	r2, r3
 800a6f8:	f000 8088 	beq.w	800a80c <AES_CMAC_Update+0x17c>
            return;
        XOR( ctx->M_last, ctx->X );
 800a6fc:	2300      	movs	r3, #0
 800a6fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a700:	e015      	b.n	800a72e <AES_CMAC_Update+0x9e>
 800a702:	68fa      	ldr	r2, [r7, #12]
 800a704:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a706:	4413      	add	r3, r2
 800a708:	33f1      	adds	r3, #241	@ 0xf1
 800a70a:	781a      	ldrb	r2, [r3, #0]
 800a70c:	68f9      	ldr	r1, [r7, #12]
 800a70e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a710:	440b      	add	r3, r1
 800a712:	f203 1301 	addw	r3, r3, #257	@ 0x101
 800a716:	781b      	ldrb	r3, [r3, #0]
 800a718:	4053      	eors	r3, r2
 800a71a:	b2d9      	uxtb	r1, r3
 800a71c:	68fa      	ldr	r2, [r7, #12]
 800a71e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a720:	4413      	add	r3, r2
 800a722:	33f1      	adds	r3, #241	@ 0xf1
 800a724:	460a      	mov	r2, r1
 800a726:	701a      	strb	r2, [r3, #0]
 800a728:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a72a:	3301      	adds	r3, #1
 800a72c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a72e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a730:	2b0f      	cmp	r3, #15
 800a732:	dde6      	ble.n	800a702 <AES_CMAC_Update+0x72>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	f103 01f1 	add.w	r1, r3, #241	@ 0xf1
 800a73a:	f107 0314 	add.w	r3, r7, #20
 800a73e:	2210      	movs	r2, #16
 800a740:	4618      	mov	r0, r3
 800a742:	f00c f98c 	bl	8016a5e <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 800a746:	68fa      	ldr	r2, [r7, #12]
 800a748:	f107 0114 	add.w	r1, r7, #20
 800a74c:	f107 0314 	add.w	r3, r7, #20
 800a750:	4618      	mov	r0, r3
 800a752:	f000 fed3 	bl	800b4fc <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	33f1      	adds	r3, #241	@ 0xf1
 800a75a:	f107 0114 	add.w	r1, r7, #20
 800a75e:	2210      	movs	r2, #16
 800a760:	4618      	mov	r0, r3
 800a762:	f00c f97c 	bl	8016a5e <memcpy1>

        data += mlen;
 800a766:	68ba      	ldr	r2, [r7, #8]
 800a768:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a76a:	4413      	add	r3, r2
 800a76c:	60bb      	str	r3, [r7, #8]
        len -= mlen;
 800a76e:	687a      	ldr	r2, [r7, #4]
 800a770:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a772:	1ad3      	subs	r3, r2, r3
 800a774:	607b      	str	r3, [r7, #4]
    }
    while( len > 16 )
 800a776:	e038      	b.n	800a7ea <AES_CMAC_Update+0x15a>
    { /* not last block */

        XOR( data, ctx->X );
 800a778:	2300      	movs	r3, #0
 800a77a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a77c:	e013      	b.n	800a7a6 <AES_CMAC_Update+0x116>
 800a77e:	68fa      	ldr	r2, [r7, #12]
 800a780:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a782:	4413      	add	r3, r2
 800a784:	33f1      	adds	r3, #241	@ 0xf1
 800a786:	781a      	ldrb	r2, [r3, #0]
 800a788:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a78a:	68b9      	ldr	r1, [r7, #8]
 800a78c:	440b      	add	r3, r1
 800a78e:	781b      	ldrb	r3, [r3, #0]
 800a790:	4053      	eors	r3, r2
 800a792:	b2d9      	uxtb	r1, r3
 800a794:	68fa      	ldr	r2, [r7, #12]
 800a796:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a798:	4413      	add	r3, r2
 800a79a:	33f1      	adds	r3, #241	@ 0xf1
 800a79c:	460a      	mov	r2, r1
 800a79e:	701a      	strb	r2, [r3, #0]
 800a7a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7a2:	3301      	adds	r3, #1
 800a7a4:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a7a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7a8:	2b0f      	cmp	r3, #15
 800a7aa:	dde8      	ble.n	800a77e <AES_CMAC_Update+0xee>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	f103 01f1 	add.w	r1, r3, #241	@ 0xf1
 800a7b2:	f107 0314 	add.w	r3, r7, #20
 800a7b6:	2210      	movs	r2, #16
 800a7b8:	4618      	mov	r0, r3
 800a7ba:	f00c f950 	bl	8016a5e <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 800a7be:	68fa      	ldr	r2, [r7, #12]
 800a7c0:	f107 0114 	add.w	r1, r7, #20
 800a7c4:	f107 0314 	add.w	r3, r7, #20
 800a7c8:	4618      	mov	r0, r3
 800a7ca:	f000 fe97 	bl	800b4fc <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	33f1      	adds	r3, #241	@ 0xf1
 800a7d2:	f107 0114 	add.w	r1, r7, #20
 800a7d6:	2210      	movs	r2, #16
 800a7d8:	4618      	mov	r0, r3
 800a7da:	f00c f940 	bl	8016a5e <memcpy1>

        data += 16;
 800a7de:	68bb      	ldr	r3, [r7, #8]
 800a7e0:	3310      	adds	r3, #16
 800a7e2:	60bb      	str	r3, [r7, #8]
        len -= 16;
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	3b10      	subs	r3, #16
 800a7e8:	607b      	str	r3, [r7, #4]
    while( len > 16 )
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	2b10      	cmp	r3, #16
 800a7ee:	d8c3      	bhi.n	800a778 <AES_CMAC_Update+0xe8>
    }
    /* potential last block, save it */
    memcpy1( ctx->M_last, data, len );
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	f203 1301 	addw	r3, r3, #257	@ 0x101
 800a7f6:	687a      	ldr	r2, [r7, #4]
 800a7f8:	b292      	uxth	r2, r2
 800a7fa:	68b9      	ldr	r1, [r7, #8]
 800a7fc:	4618      	mov	r0, r3
 800a7fe:	f00c f92e 	bl	8016a5e <memcpy1>
    ctx->M_n = len;
 800a802:	68fb      	ldr	r3, [r7, #12]
 800a804:	687a      	ldr	r2, [r7, #4]
 800a806:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
 800a80a:	e000      	b.n	800a80e <AES_CMAC_Update+0x17e>
            return;
 800a80c:	bf00      	nop
}
 800a80e:	3730      	adds	r7, #48	@ 0x30
 800a810:	46bd      	mov	sp, r7
 800a812:	bd80      	pop	{r7, pc}

0800a814 <AES_CMAC_Final>:

void AES_CMAC_Final( uint8_t digest[AES_CMAC_DIGEST_LENGTH], AES_CMAC_CTX* ctx )
{
 800a814:	b580      	push	{r7, lr}
 800a816:	b092      	sub	sp, #72	@ 0x48
 800a818:	af00      	add	r7, sp, #0
 800a81a:	6078      	str	r0, [r7, #4]
 800a81c:	6039      	str	r1, [r7, #0]
    uint8_t K[16];
    uint8_t in[16];
    /* generate subkey K1 */
    memset1( K, '\0', 16 );
 800a81e:	f107 031c 	add.w	r3, r7, #28
 800a822:	2210      	movs	r2, #16
 800a824:	2100      	movs	r1, #0
 800a826:	4618      	mov	r0, r3
 800a828:	f00c f954 	bl	8016ad4 <memset1>

    lorawan_aes_encrypt( K, K, &ctx->rijndael );
 800a82c:	683a      	ldr	r2, [r7, #0]
 800a82e:	f107 011c 	add.w	r1, r7, #28
 800a832:	f107 031c 	add.w	r3, r7, #28
 800a836:	4618      	mov	r0, r3
 800a838:	f000 fe60 	bl	800b4fc <lorawan_aes_encrypt>

    if( K[0] & 0x80 )
 800a83c:	7f3b      	ldrb	r3, [r7, #28]
 800a83e:	b25b      	sxtb	r3, r3
 800a840:	2b00      	cmp	r3, #0
 800a842:	da30      	bge.n	800a8a6 <AES_CMAC_Final+0x92>
    {
        LSHIFT( K, K );
 800a844:	2300      	movs	r3, #0
 800a846:	647b      	str	r3, [r7, #68]	@ 0x44
 800a848:	e01b      	b.n	800a882 <AES_CMAC_Final+0x6e>
 800a84a:	f107 021c 	add.w	r2, r7, #28
 800a84e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a850:	4413      	add	r3, r2
 800a852:	781b      	ldrb	r3, [r3, #0]
 800a854:	005b      	lsls	r3, r3, #1
 800a856:	b25a      	sxtb	r2, r3
 800a858:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a85a:	3301      	adds	r3, #1
 800a85c:	3348      	adds	r3, #72	@ 0x48
 800a85e:	443b      	add	r3, r7
 800a860:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800a864:	09db      	lsrs	r3, r3, #7
 800a866:	b2db      	uxtb	r3, r3
 800a868:	b25b      	sxtb	r3, r3
 800a86a:	4313      	orrs	r3, r2
 800a86c:	b25b      	sxtb	r3, r3
 800a86e:	b2d9      	uxtb	r1, r3
 800a870:	f107 021c 	add.w	r2, r7, #28
 800a874:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a876:	4413      	add	r3, r2
 800a878:	460a      	mov	r2, r1
 800a87a:	701a      	strb	r2, [r3, #0]
 800a87c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a87e:	3301      	adds	r3, #1
 800a880:	647b      	str	r3, [r7, #68]	@ 0x44
 800a882:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a884:	2b0e      	cmp	r3, #14
 800a886:	dde0      	ble.n	800a84a <AES_CMAC_Final+0x36>
 800a888:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a88c:	005b      	lsls	r3, r3, #1
 800a88e:	b2db      	uxtb	r3, r3
 800a890:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        K[15] ^= 0x87;
 800a894:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a898:	f083 0378 	eor.w	r3, r3, #120	@ 0x78
 800a89c:	43db      	mvns	r3, r3
 800a89e:	b2db      	uxtb	r3, r3
 800a8a0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a8a4:	e027      	b.n	800a8f6 <AES_CMAC_Final+0xe2>
    }
    else
        LSHIFT( K, K );
 800a8a6:	2300      	movs	r3, #0
 800a8a8:	643b      	str	r3, [r7, #64]	@ 0x40
 800a8aa:	e01b      	b.n	800a8e4 <AES_CMAC_Final+0xd0>
 800a8ac:	f107 021c 	add.w	r2, r7, #28
 800a8b0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a8b2:	4413      	add	r3, r2
 800a8b4:	781b      	ldrb	r3, [r3, #0]
 800a8b6:	005b      	lsls	r3, r3, #1
 800a8b8:	b25a      	sxtb	r2, r3
 800a8ba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a8bc:	3301      	adds	r3, #1
 800a8be:	3348      	adds	r3, #72	@ 0x48
 800a8c0:	443b      	add	r3, r7
 800a8c2:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800a8c6:	09db      	lsrs	r3, r3, #7
 800a8c8:	b2db      	uxtb	r3, r3
 800a8ca:	b25b      	sxtb	r3, r3
 800a8cc:	4313      	orrs	r3, r2
 800a8ce:	b25b      	sxtb	r3, r3
 800a8d0:	b2d9      	uxtb	r1, r3
 800a8d2:	f107 021c 	add.w	r2, r7, #28
 800a8d6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a8d8:	4413      	add	r3, r2
 800a8da:	460a      	mov	r2, r1
 800a8dc:	701a      	strb	r2, [r3, #0]
 800a8de:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a8e0:	3301      	adds	r3, #1
 800a8e2:	643b      	str	r3, [r7, #64]	@ 0x40
 800a8e4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a8e6:	2b0e      	cmp	r3, #14
 800a8e8:	dde0      	ble.n	800a8ac <AES_CMAC_Final+0x98>
 800a8ea:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a8ee:	005b      	lsls	r3, r3, #1
 800a8f0:	b2db      	uxtb	r3, r3
 800a8f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

    if( ctx->M_n == 16 )
 800a8f6:	683b      	ldr	r3, [r7, #0]
 800a8f8:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800a8fc:	2b10      	cmp	r3, #16
 800a8fe:	d11d      	bne.n	800a93c <AES_CMAC_Final+0x128>
    {
        /* last block was a complete block */
        XOR( K, ctx->M_last );
 800a900:	2300      	movs	r3, #0
 800a902:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a904:	e016      	b.n	800a934 <AES_CMAC_Final+0x120>
 800a906:	683a      	ldr	r2, [r7, #0]
 800a908:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a90a:	4413      	add	r3, r2
 800a90c:	f203 1301 	addw	r3, r3, #257	@ 0x101
 800a910:	781a      	ldrb	r2, [r3, #0]
 800a912:	f107 011c 	add.w	r1, r7, #28
 800a916:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a918:	440b      	add	r3, r1
 800a91a:	781b      	ldrb	r3, [r3, #0]
 800a91c:	4053      	eors	r3, r2
 800a91e:	b2d9      	uxtb	r1, r3
 800a920:	683a      	ldr	r2, [r7, #0]
 800a922:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a924:	4413      	add	r3, r2
 800a926:	f203 1301 	addw	r3, r3, #257	@ 0x101
 800a92a:	460a      	mov	r2, r1
 800a92c:	701a      	strb	r2, [r3, #0]
 800a92e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a930:	3301      	adds	r3, #1
 800a932:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a934:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a936:	2b0f      	cmp	r3, #15
 800a938:	dde5      	ble.n	800a906 <AES_CMAC_Final+0xf2>
 800a93a:	e096      	b.n	800aa6a <AES_CMAC_Final+0x256>
    }
    else
    {
        /* generate subkey K2 */
        if( K[0] & 0x80 )
 800a93c:	7f3b      	ldrb	r3, [r7, #28]
 800a93e:	b25b      	sxtb	r3, r3
 800a940:	2b00      	cmp	r3, #0
 800a942:	da30      	bge.n	800a9a6 <AES_CMAC_Final+0x192>
        {
            LSHIFT( K, K );
 800a944:	2300      	movs	r3, #0
 800a946:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a948:	e01b      	b.n	800a982 <AES_CMAC_Final+0x16e>
 800a94a:	f107 021c 	add.w	r2, r7, #28
 800a94e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a950:	4413      	add	r3, r2
 800a952:	781b      	ldrb	r3, [r3, #0]
 800a954:	005b      	lsls	r3, r3, #1
 800a956:	b25a      	sxtb	r2, r3
 800a958:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a95a:	3301      	adds	r3, #1
 800a95c:	3348      	adds	r3, #72	@ 0x48
 800a95e:	443b      	add	r3, r7
 800a960:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800a964:	09db      	lsrs	r3, r3, #7
 800a966:	b2db      	uxtb	r3, r3
 800a968:	b25b      	sxtb	r3, r3
 800a96a:	4313      	orrs	r3, r2
 800a96c:	b25b      	sxtb	r3, r3
 800a96e:	b2d9      	uxtb	r1, r3
 800a970:	f107 021c 	add.w	r2, r7, #28
 800a974:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a976:	4413      	add	r3, r2
 800a978:	460a      	mov	r2, r1
 800a97a:	701a      	strb	r2, [r3, #0]
 800a97c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a97e:	3301      	adds	r3, #1
 800a980:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a982:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a984:	2b0e      	cmp	r3, #14
 800a986:	dde0      	ble.n	800a94a <AES_CMAC_Final+0x136>
 800a988:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a98c:	005b      	lsls	r3, r3, #1
 800a98e:	b2db      	uxtb	r3, r3
 800a990:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
            K[15] ^= 0x87;
 800a994:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a998:	f083 0378 	eor.w	r3, r3, #120	@ 0x78
 800a99c:	43db      	mvns	r3, r3
 800a99e:	b2db      	uxtb	r3, r3
 800a9a0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a9a4:	e027      	b.n	800a9f6 <AES_CMAC_Final+0x1e2>
        }
        else
            LSHIFT( K, K );
 800a9a6:	2300      	movs	r3, #0
 800a9a8:	637b      	str	r3, [r7, #52]	@ 0x34
 800a9aa:	e01b      	b.n	800a9e4 <AES_CMAC_Final+0x1d0>
 800a9ac:	f107 021c 	add.w	r2, r7, #28
 800a9b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a9b2:	4413      	add	r3, r2
 800a9b4:	781b      	ldrb	r3, [r3, #0]
 800a9b6:	005b      	lsls	r3, r3, #1
 800a9b8:	b25a      	sxtb	r2, r3
 800a9ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a9bc:	3301      	adds	r3, #1
 800a9be:	3348      	adds	r3, #72	@ 0x48
 800a9c0:	443b      	add	r3, r7
 800a9c2:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800a9c6:	09db      	lsrs	r3, r3, #7
 800a9c8:	b2db      	uxtb	r3, r3
 800a9ca:	b25b      	sxtb	r3, r3
 800a9cc:	4313      	orrs	r3, r2
 800a9ce:	b25b      	sxtb	r3, r3
 800a9d0:	b2d9      	uxtb	r1, r3
 800a9d2:	f107 021c 	add.w	r2, r7, #28
 800a9d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a9d8:	4413      	add	r3, r2
 800a9da:	460a      	mov	r2, r1
 800a9dc:	701a      	strb	r2, [r3, #0]
 800a9de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a9e0:	3301      	adds	r3, #1
 800a9e2:	637b      	str	r3, [r7, #52]	@ 0x34
 800a9e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a9e6:	2b0e      	cmp	r3, #14
 800a9e8:	dde0      	ble.n	800a9ac <AES_CMAC_Final+0x198>
 800a9ea:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a9ee:	005b      	lsls	r3, r3, #1
 800a9f0:	b2db      	uxtb	r3, r3
 800a9f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

        /* padding(M_last) */
        ctx->M_last[ctx->M_n] = 0x80;
 800a9f6:	683b      	ldr	r3, [r7, #0]
 800a9f8:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800a9fc:	683a      	ldr	r2, [r7, #0]
 800a9fe:	4413      	add	r3, r2
 800aa00:	2280      	movs	r2, #128	@ 0x80
 800aa02:	f883 2101 	strb.w	r2, [r3, #257]	@ 0x101
        while( ++ctx->M_n < 16 )
 800aa06:	e007      	b.n	800aa18 <AES_CMAC_Final+0x204>
            ctx->M_last[ctx->M_n] = 0;
 800aa08:	683b      	ldr	r3, [r7, #0]
 800aa0a:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800aa0e:	683a      	ldr	r2, [r7, #0]
 800aa10:	4413      	add	r3, r2
 800aa12:	2200      	movs	r2, #0
 800aa14:	f883 2101 	strb.w	r2, [r3, #257]	@ 0x101
        while( ++ctx->M_n < 16 )
 800aa18:	683b      	ldr	r3, [r7, #0]
 800aa1a:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800aa1e:	1c5a      	adds	r2, r3, #1
 800aa20:	683b      	ldr	r3, [r7, #0]
 800aa22:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
 800aa26:	683b      	ldr	r3, [r7, #0]
 800aa28:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800aa2c:	2b0f      	cmp	r3, #15
 800aa2e:	d9eb      	bls.n	800aa08 <AES_CMAC_Final+0x1f4>

        XOR( K, ctx->M_last );
 800aa30:	2300      	movs	r3, #0
 800aa32:	633b      	str	r3, [r7, #48]	@ 0x30
 800aa34:	e016      	b.n	800aa64 <AES_CMAC_Final+0x250>
 800aa36:	683a      	ldr	r2, [r7, #0]
 800aa38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa3a:	4413      	add	r3, r2
 800aa3c:	f203 1301 	addw	r3, r3, #257	@ 0x101
 800aa40:	781a      	ldrb	r2, [r3, #0]
 800aa42:	f107 011c 	add.w	r1, r7, #28
 800aa46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa48:	440b      	add	r3, r1
 800aa4a:	781b      	ldrb	r3, [r3, #0]
 800aa4c:	4053      	eors	r3, r2
 800aa4e:	b2d9      	uxtb	r1, r3
 800aa50:	683a      	ldr	r2, [r7, #0]
 800aa52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa54:	4413      	add	r3, r2
 800aa56:	f203 1301 	addw	r3, r3, #257	@ 0x101
 800aa5a:	460a      	mov	r2, r1
 800aa5c:	701a      	strb	r2, [r3, #0]
 800aa5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa60:	3301      	adds	r3, #1
 800aa62:	633b      	str	r3, [r7, #48]	@ 0x30
 800aa64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa66:	2b0f      	cmp	r3, #15
 800aa68:	dde5      	ble.n	800aa36 <AES_CMAC_Final+0x222>
    }
    XOR( ctx->M_last, ctx->X );
 800aa6a:	2300      	movs	r3, #0
 800aa6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800aa6e:	e015      	b.n	800aa9c <AES_CMAC_Final+0x288>
 800aa70:	683a      	ldr	r2, [r7, #0]
 800aa72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa74:	4413      	add	r3, r2
 800aa76:	33f1      	adds	r3, #241	@ 0xf1
 800aa78:	781a      	ldrb	r2, [r3, #0]
 800aa7a:	6839      	ldr	r1, [r7, #0]
 800aa7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa7e:	440b      	add	r3, r1
 800aa80:	f203 1301 	addw	r3, r3, #257	@ 0x101
 800aa84:	781b      	ldrb	r3, [r3, #0]
 800aa86:	4053      	eors	r3, r2
 800aa88:	b2d9      	uxtb	r1, r3
 800aa8a:	683a      	ldr	r2, [r7, #0]
 800aa8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa8e:	4413      	add	r3, r2
 800aa90:	33f1      	adds	r3, #241	@ 0xf1
 800aa92:	460a      	mov	r2, r1
 800aa94:	701a      	strb	r2, [r3, #0]
 800aa96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa98:	3301      	adds	r3, #1
 800aa9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800aa9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa9e:	2b0f      	cmp	r3, #15
 800aaa0:	dde6      	ble.n	800aa70 <AES_CMAC_Final+0x25c>

    memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800aaa2:	683b      	ldr	r3, [r7, #0]
 800aaa4:	f103 01f1 	add.w	r1, r3, #241	@ 0xf1
 800aaa8:	f107 030c 	add.w	r3, r7, #12
 800aaac:	2210      	movs	r2, #16
 800aaae:	4618      	mov	r0, r3
 800aab0:	f00b ffd5 	bl	8016a5e <memcpy1>
    lorawan_aes_encrypt( in, digest, &ctx->rijndael );
 800aab4:	683a      	ldr	r2, [r7, #0]
 800aab6:	f107 030c 	add.w	r3, r7, #12
 800aaba:	6879      	ldr	r1, [r7, #4]
 800aabc:	4618      	mov	r0, r3
 800aabe:	f000 fd1d 	bl	800b4fc <lorawan_aes_encrypt>
    memset1( K, 0, sizeof K );
 800aac2:	f107 031c 	add.w	r3, r7, #28
 800aac6:	2210      	movs	r2, #16
 800aac8:	2100      	movs	r1, #0
 800aaca:	4618      	mov	r0, r3
 800aacc:	f00c f802 	bl	8016ad4 <memset1>
}
 800aad0:	bf00      	nop
 800aad2:	3748      	adds	r7, #72	@ 0x48
 800aad4:	46bd      	mov	sp, r7
 800aad6:	bd80      	pop	{r7, pc}

0800aad8 <copy_block>:
#  define block_copy_nn(d, s, l)    copy_block_nn(d, s, l)
#  define block_copy(d, s)          copy_block(d, s)
#endif

static void copy_block( void *d, const void *s )
{
 800aad8:	b480      	push	{r7}
 800aada:	b083      	sub	sp, #12
 800aadc:	af00      	add	r7, sp, #0
 800aade:	6078      	str	r0, [r7, #4]
 800aae0:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0];
 800aae2:	683b      	ldr	r3, [r7, #0]
 800aae4:	781a      	ldrb	r2, [r3, #0]
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1];
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	3301      	adds	r3, #1
 800aaee:	683a      	ldr	r2, [r7, #0]
 800aaf0:	7852      	ldrb	r2, [r2, #1]
 800aaf2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2];
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	3302      	adds	r3, #2
 800aaf8:	683a      	ldr	r2, [r7, #0]
 800aafa:	7892      	ldrb	r2, [r2, #2]
 800aafc:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3];
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	3303      	adds	r3, #3
 800ab02:	683a      	ldr	r2, [r7, #0]
 800ab04:	78d2      	ldrb	r2, [r2, #3]
 800ab06:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4];
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	3304      	adds	r3, #4
 800ab0c:	683a      	ldr	r2, [r7, #0]
 800ab0e:	7912      	ldrb	r2, [r2, #4]
 800ab10:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5];
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	3305      	adds	r3, #5
 800ab16:	683a      	ldr	r2, [r7, #0]
 800ab18:	7952      	ldrb	r2, [r2, #5]
 800ab1a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6];
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	3306      	adds	r3, #6
 800ab20:	683a      	ldr	r2, [r7, #0]
 800ab22:	7992      	ldrb	r2, [r2, #6]
 800ab24:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7];
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	3307      	adds	r3, #7
 800ab2a:	683a      	ldr	r2, [r7, #0]
 800ab2c:	79d2      	ldrb	r2, [r2, #7]
 800ab2e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8];
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	3308      	adds	r3, #8
 800ab34:	683a      	ldr	r2, [r7, #0]
 800ab36:	7a12      	ldrb	r2, [r2, #8]
 800ab38:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9];
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	3309      	adds	r3, #9
 800ab3e:	683a      	ldr	r2, [r7, #0]
 800ab40:	7a52      	ldrb	r2, [r2, #9]
 800ab42:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10];
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	330a      	adds	r3, #10
 800ab48:	683a      	ldr	r2, [r7, #0]
 800ab4a:	7a92      	ldrb	r2, [r2, #10]
 800ab4c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11];
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	330b      	adds	r3, #11
 800ab52:	683a      	ldr	r2, [r7, #0]
 800ab54:	7ad2      	ldrb	r2, [r2, #11]
 800ab56:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12];
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	330c      	adds	r3, #12
 800ab5c:	683a      	ldr	r2, [r7, #0]
 800ab5e:	7b12      	ldrb	r2, [r2, #12]
 800ab60:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13];
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	330d      	adds	r3, #13
 800ab66:	683a      	ldr	r2, [r7, #0]
 800ab68:	7b52      	ldrb	r2, [r2, #13]
 800ab6a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14];
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	330e      	adds	r3, #14
 800ab70:	683a      	ldr	r2, [r7, #0]
 800ab72:	7b92      	ldrb	r2, [r2, #14]
 800ab74:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15];
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	330f      	adds	r3, #15
 800ab7a:	683a      	ldr	r2, [r7, #0]
 800ab7c:	7bd2      	ldrb	r2, [r2, #15]
 800ab7e:	701a      	strb	r2, [r3, #0]
#endif
}
 800ab80:	bf00      	nop
 800ab82:	370c      	adds	r7, #12
 800ab84:	46bd      	mov	sp, r7
 800ab86:	bc80      	pop	{r7}
 800ab88:	4770      	bx	lr

0800ab8a <copy_block_nn>:

static void copy_block_nn( uint8_t * d, const uint8_t *s, uint8_t nn )
{
 800ab8a:	b480      	push	{r7}
 800ab8c:	b085      	sub	sp, #20
 800ab8e:	af00      	add	r7, sp, #0
 800ab90:	60f8      	str	r0, [r7, #12]
 800ab92:	60b9      	str	r1, [r7, #8]
 800ab94:	4613      	mov	r3, r2
 800ab96:	71fb      	strb	r3, [r7, #7]
    while( nn-- )
 800ab98:	e007      	b.n	800abaa <copy_block_nn+0x20>
        //*((uint8_t*)d)++ = *((uint8_t*)s)++;
        *d++ = *s++;
 800ab9a:	68ba      	ldr	r2, [r7, #8]
 800ab9c:	1c53      	adds	r3, r2, #1
 800ab9e:	60bb      	str	r3, [r7, #8]
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	1c59      	adds	r1, r3, #1
 800aba4:	60f9      	str	r1, [r7, #12]
 800aba6:	7812      	ldrb	r2, [r2, #0]
 800aba8:	701a      	strb	r2, [r3, #0]
    while( nn-- )
 800abaa:	79fb      	ldrb	r3, [r7, #7]
 800abac:	1e5a      	subs	r2, r3, #1
 800abae:	71fa      	strb	r2, [r7, #7]
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d1f2      	bne.n	800ab9a <copy_block_nn+0x10>
}
 800abb4:	bf00      	nop
 800abb6:	bf00      	nop
 800abb8:	3714      	adds	r7, #20
 800abba:	46bd      	mov	sp, r7
 800abbc:	bc80      	pop	{r7}
 800abbe:	4770      	bx	lr

0800abc0 <xor_block>:

static void xor_block( void *d, const void *s )
{
 800abc0:	b480      	push	{r7}
 800abc2:	b083      	sub	sp, #12
 800abc4:	af00      	add	r7, sp, #0
 800abc6:	6078      	str	r0, [r7, #4]
 800abc8:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] ^= ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] ^= ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] ^= ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] ^= ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] ^= ((uint8_t*)s)[ 0];
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	781a      	ldrb	r2, [r3, #0]
 800abce:	683b      	ldr	r3, [r7, #0]
 800abd0:	781b      	ldrb	r3, [r3, #0]
 800abd2:	4053      	eors	r3, r2
 800abd4:	b2da      	uxtb	r2, r3
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] ^= ((uint8_t*)s)[ 1];
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	3301      	adds	r3, #1
 800abde:	7819      	ldrb	r1, [r3, #0]
 800abe0:	683b      	ldr	r3, [r7, #0]
 800abe2:	3301      	adds	r3, #1
 800abe4:	781a      	ldrb	r2, [r3, #0]
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	3301      	adds	r3, #1
 800abea:	404a      	eors	r2, r1
 800abec:	b2d2      	uxtb	r2, r2
 800abee:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] ^= ((uint8_t*)s)[ 2];
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	3302      	adds	r3, #2
 800abf4:	7819      	ldrb	r1, [r3, #0]
 800abf6:	683b      	ldr	r3, [r7, #0]
 800abf8:	3302      	adds	r3, #2
 800abfa:	781a      	ldrb	r2, [r3, #0]
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	3302      	adds	r3, #2
 800ac00:	404a      	eors	r2, r1
 800ac02:	b2d2      	uxtb	r2, r2
 800ac04:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] ^= ((uint8_t*)s)[ 3];
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	3303      	adds	r3, #3
 800ac0a:	7819      	ldrb	r1, [r3, #0]
 800ac0c:	683b      	ldr	r3, [r7, #0]
 800ac0e:	3303      	adds	r3, #3
 800ac10:	781a      	ldrb	r2, [r3, #0]
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	3303      	adds	r3, #3
 800ac16:	404a      	eors	r2, r1
 800ac18:	b2d2      	uxtb	r2, r2
 800ac1a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] ^= ((uint8_t*)s)[ 4];
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	3304      	adds	r3, #4
 800ac20:	7819      	ldrb	r1, [r3, #0]
 800ac22:	683b      	ldr	r3, [r7, #0]
 800ac24:	3304      	adds	r3, #4
 800ac26:	781a      	ldrb	r2, [r3, #0]
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	3304      	adds	r3, #4
 800ac2c:	404a      	eors	r2, r1
 800ac2e:	b2d2      	uxtb	r2, r2
 800ac30:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] ^= ((uint8_t*)s)[ 5];
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	3305      	adds	r3, #5
 800ac36:	7819      	ldrb	r1, [r3, #0]
 800ac38:	683b      	ldr	r3, [r7, #0]
 800ac3a:	3305      	adds	r3, #5
 800ac3c:	781a      	ldrb	r2, [r3, #0]
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	3305      	adds	r3, #5
 800ac42:	404a      	eors	r2, r1
 800ac44:	b2d2      	uxtb	r2, r2
 800ac46:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] ^= ((uint8_t*)s)[ 6];
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	3306      	adds	r3, #6
 800ac4c:	7819      	ldrb	r1, [r3, #0]
 800ac4e:	683b      	ldr	r3, [r7, #0]
 800ac50:	3306      	adds	r3, #6
 800ac52:	781a      	ldrb	r2, [r3, #0]
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	3306      	adds	r3, #6
 800ac58:	404a      	eors	r2, r1
 800ac5a:	b2d2      	uxtb	r2, r2
 800ac5c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] ^= ((uint8_t*)s)[ 7];
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	3307      	adds	r3, #7
 800ac62:	7819      	ldrb	r1, [r3, #0]
 800ac64:	683b      	ldr	r3, [r7, #0]
 800ac66:	3307      	adds	r3, #7
 800ac68:	781a      	ldrb	r2, [r3, #0]
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	3307      	adds	r3, #7
 800ac6e:	404a      	eors	r2, r1
 800ac70:	b2d2      	uxtb	r2, r2
 800ac72:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] ^= ((uint8_t*)s)[ 8];
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	3308      	adds	r3, #8
 800ac78:	7819      	ldrb	r1, [r3, #0]
 800ac7a:	683b      	ldr	r3, [r7, #0]
 800ac7c:	3308      	adds	r3, #8
 800ac7e:	781a      	ldrb	r2, [r3, #0]
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	3308      	adds	r3, #8
 800ac84:	404a      	eors	r2, r1
 800ac86:	b2d2      	uxtb	r2, r2
 800ac88:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] ^= ((uint8_t*)s)[ 9];
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	3309      	adds	r3, #9
 800ac8e:	7819      	ldrb	r1, [r3, #0]
 800ac90:	683b      	ldr	r3, [r7, #0]
 800ac92:	3309      	adds	r3, #9
 800ac94:	781a      	ldrb	r2, [r3, #0]
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	3309      	adds	r3, #9
 800ac9a:	404a      	eors	r2, r1
 800ac9c:	b2d2      	uxtb	r2, r2
 800ac9e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] ^= ((uint8_t*)s)[10];
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	330a      	adds	r3, #10
 800aca4:	7819      	ldrb	r1, [r3, #0]
 800aca6:	683b      	ldr	r3, [r7, #0]
 800aca8:	330a      	adds	r3, #10
 800acaa:	781a      	ldrb	r2, [r3, #0]
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	330a      	adds	r3, #10
 800acb0:	404a      	eors	r2, r1
 800acb2:	b2d2      	uxtb	r2, r2
 800acb4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] ^= ((uint8_t*)s)[11];
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	330b      	adds	r3, #11
 800acba:	7819      	ldrb	r1, [r3, #0]
 800acbc:	683b      	ldr	r3, [r7, #0]
 800acbe:	330b      	adds	r3, #11
 800acc0:	781a      	ldrb	r2, [r3, #0]
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	330b      	adds	r3, #11
 800acc6:	404a      	eors	r2, r1
 800acc8:	b2d2      	uxtb	r2, r2
 800acca:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] ^= ((uint8_t*)s)[12];
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	330c      	adds	r3, #12
 800acd0:	7819      	ldrb	r1, [r3, #0]
 800acd2:	683b      	ldr	r3, [r7, #0]
 800acd4:	330c      	adds	r3, #12
 800acd6:	781a      	ldrb	r2, [r3, #0]
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	330c      	adds	r3, #12
 800acdc:	404a      	eors	r2, r1
 800acde:	b2d2      	uxtb	r2, r2
 800ace0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] ^= ((uint8_t*)s)[13];
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	330d      	adds	r3, #13
 800ace6:	7819      	ldrb	r1, [r3, #0]
 800ace8:	683b      	ldr	r3, [r7, #0]
 800acea:	330d      	adds	r3, #13
 800acec:	781a      	ldrb	r2, [r3, #0]
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	330d      	adds	r3, #13
 800acf2:	404a      	eors	r2, r1
 800acf4:	b2d2      	uxtb	r2, r2
 800acf6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] ^= ((uint8_t*)s)[14];
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	330e      	adds	r3, #14
 800acfc:	7819      	ldrb	r1, [r3, #0]
 800acfe:	683b      	ldr	r3, [r7, #0]
 800ad00:	330e      	adds	r3, #14
 800ad02:	781a      	ldrb	r2, [r3, #0]
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	330e      	adds	r3, #14
 800ad08:	404a      	eors	r2, r1
 800ad0a:	b2d2      	uxtb	r2, r2
 800ad0c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] ^= ((uint8_t*)s)[15];
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	330f      	adds	r3, #15
 800ad12:	7819      	ldrb	r1, [r3, #0]
 800ad14:	683b      	ldr	r3, [r7, #0]
 800ad16:	330f      	adds	r3, #15
 800ad18:	781a      	ldrb	r2, [r3, #0]
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	330f      	adds	r3, #15
 800ad1e:	404a      	eors	r2, r1
 800ad20:	b2d2      	uxtb	r2, r2
 800ad22:	701a      	strb	r2, [r3, #0]
#endif
}
 800ad24:	bf00      	nop
 800ad26:	370c      	adds	r7, #12
 800ad28:	46bd      	mov	sp, r7
 800ad2a:	bc80      	pop	{r7}
 800ad2c:	4770      	bx	lr

0800ad2e <copy_and_key>:

static void copy_and_key( void *d, const void *s, const void *k )
{
 800ad2e:	b480      	push	{r7}
 800ad30:	b085      	sub	sp, #20
 800ad32:	af00      	add	r7, sp, #0
 800ad34:	60f8      	str	r0, [r7, #12]
 800ad36:	60b9      	str	r1, [r7, #8]
 800ad38:	607a      	str	r2, [r7, #4]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0] ^ ((uint32_t*)k)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1] ^ ((uint32_t*)k)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2] ^ ((uint32_t*)k)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3] ^ ((uint32_t*)k)[ 3];
#elif 1
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0] ^ ((uint8_t*)k)[ 0];
 800ad3a:	68bb      	ldr	r3, [r7, #8]
 800ad3c:	781a      	ldrb	r2, [r3, #0]
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	781b      	ldrb	r3, [r3, #0]
 800ad42:	4053      	eors	r3, r2
 800ad44:	b2da      	uxtb	r2, r3
 800ad46:	68fb      	ldr	r3, [r7, #12]
 800ad48:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1] ^ ((uint8_t*)k)[ 1];
 800ad4a:	68bb      	ldr	r3, [r7, #8]
 800ad4c:	3301      	adds	r3, #1
 800ad4e:	7819      	ldrb	r1, [r3, #0]
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	3301      	adds	r3, #1
 800ad54:	781a      	ldrb	r2, [r3, #0]
 800ad56:	68fb      	ldr	r3, [r7, #12]
 800ad58:	3301      	adds	r3, #1
 800ad5a:	404a      	eors	r2, r1
 800ad5c:	b2d2      	uxtb	r2, r2
 800ad5e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2] ^ ((uint8_t*)k)[ 2];
 800ad60:	68bb      	ldr	r3, [r7, #8]
 800ad62:	3302      	adds	r3, #2
 800ad64:	7819      	ldrb	r1, [r3, #0]
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	3302      	adds	r3, #2
 800ad6a:	781a      	ldrb	r2, [r3, #0]
 800ad6c:	68fb      	ldr	r3, [r7, #12]
 800ad6e:	3302      	adds	r3, #2
 800ad70:	404a      	eors	r2, r1
 800ad72:	b2d2      	uxtb	r2, r2
 800ad74:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3] ^ ((uint8_t*)k)[ 3];
 800ad76:	68bb      	ldr	r3, [r7, #8]
 800ad78:	3303      	adds	r3, #3
 800ad7a:	7819      	ldrb	r1, [r3, #0]
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	3303      	adds	r3, #3
 800ad80:	781a      	ldrb	r2, [r3, #0]
 800ad82:	68fb      	ldr	r3, [r7, #12]
 800ad84:	3303      	adds	r3, #3
 800ad86:	404a      	eors	r2, r1
 800ad88:	b2d2      	uxtb	r2, r2
 800ad8a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4] ^ ((uint8_t*)k)[ 4];
 800ad8c:	68bb      	ldr	r3, [r7, #8]
 800ad8e:	3304      	adds	r3, #4
 800ad90:	7819      	ldrb	r1, [r3, #0]
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	3304      	adds	r3, #4
 800ad96:	781a      	ldrb	r2, [r3, #0]
 800ad98:	68fb      	ldr	r3, [r7, #12]
 800ad9a:	3304      	adds	r3, #4
 800ad9c:	404a      	eors	r2, r1
 800ad9e:	b2d2      	uxtb	r2, r2
 800ada0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5] ^ ((uint8_t*)k)[ 5];
 800ada2:	68bb      	ldr	r3, [r7, #8]
 800ada4:	3305      	adds	r3, #5
 800ada6:	7819      	ldrb	r1, [r3, #0]
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	3305      	adds	r3, #5
 800adac:	781a      	ldrb	r2, [r3, #0]
 800adae:	68fb      	ldr	r3, [r7, #12]
 800adb0:	3305      	adds	r3, #5
 800adb2:	404a      	eors	r2, r1
 800adb4:	b2d2      	uxtb	r2, r2
 800adb6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6] ^ ((uint8_t*)k)[ 6];
 800adb8:	68bb      	ldr	r3, [r7, #8]
 800adba:	3306      	adds	r3, #6
 800adbc:	7819      	ldrb	r1, [r3, #0]
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	3306      	adds	r3, #6
 800adc2:	781a      	ldrb	r2, [r3, #0]
 800adc4:	68fb      	ldr	r3, [r7, #12]
 800adc6:	3306      	adds	r3, #6
 800adc8:	404a      	eors	r2, r1
 800adca:	b2d2      	uxtb	r2, r2
 800adcc:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7] ^ ((uint8_t*)k)[ 7];
 800adce:	68bb      	ldr	r3, [r7, #8]
 800add0:	3307      	adds	r3, #7
 800add2:	7819      	ldrb	r1, [r3, #0]
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	3307      	adds	r3, #7
 800add8:	781a      	ldrb	r2, [r3, #0]
 800adda:	68fb      	ldr	r3, [r7, #12]
 800addc:	3307      	adds	r3, #7
 800adde:	404a      	eors	r2, r1
 800ade0:	b2d2      	uxtb	r2, r2
 800ade2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8] ^ ((uint8_t*)k)[ 8];
 800ade4:	68bb      	ldr	r3, [r7, #8]
 800ade6:	3308      	adds	r3, #8
 800ade8:	7819      	ldrb	r1, [r3, #0]
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	3308      	adds	r3, #8
 800adee:	781a      	ldrb	r2, [r3, #0]
 800adf0:	68fb      	ldr	r3, [r7, #12]
 800adf2:	3308      	adds	r3, #8
 800adf4:	404a      	eors	r2, r1
 800adf6:	b2d2      	uxtb	r2, r2
 800adf8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9] ^ ((uint8_t*)k)[ 9];
 800adfa:	68bb      	ldr	r3, [r7, #8]
 800adfc:	3309      	adds	r3, #9
 800adfe:	7819      	ldrb	r1, [r3, #0]
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	3309      	adds	r3, #9
 800ae04:	781a      	ldrb	r2, [r3, #0]
 800ae06:	68fb      	ldr	r3, [r7, #12]
 800ae08:	3309      	adds	r3, #9
 800ae0a:	404a      	eors	r2, r1
 800ae0c:	b2d2      	uxtb	r2, r2
 800ae0e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10] ^ ((uint8_t*)k)[10];
 800ae10:	68bb      	ldr	r3, [r7, #8]
 800ae12:	330a      	adds	r3, #10
 800ae14:	7819      	ldrb	r1, [r3, #0]
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	330a      	adds	r3, #10
 800ae1a:	781a      	ldrb	r2, [r3, #0]
 800ae1c:	68fb      	ldr	r3, [r7, #12]
 800ae1e:	330a      	adds	r3, #10
 800ae20:	404a      	eors	r2, r1
 800ae22:	b2d2      	uxtb	r2, r2
 800ae24:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11] ^ ((uint8_t*)k)[11];
 800ae26:	68bb      	ldr	r3, [r7, #8]
 800ae28:	330b      	adds	r3, #11
 800ae2a:	7819      	ldrb	r1, [r3, #0]
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	330b      	adds	r3, #11
 800ae30:	781a      	ldrb	r2, [r3, #0]
 800ae32:	68fb      	ldr	r3, [r7, #12]
 800ae34:	330b      	adds	r3, #11
 800ae36:	404a      	eors	r2, r1
 800ae38:	b2d2      	uxtb	r2, r2
 800ae3a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12] ^ ((uint8_t*)k)[12];
 800ae3c:	68bb      	ldr	r3, [r7, #8]
 800ae3e:	330c      	adds	r3, #12
 800ae40:	7819      	ldrb	r1, [r3, #0]
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	330c      	adds	r3, #12
 800ae46:	781a      	ldrb	r2, [r3, #0]
 800ae48:	68fb      	ldr	r3, [r7, #12]
 800ae4a:	330c      	adds	r3, #12
 800ae4c:	404a      	eors	r2, r1
 800ae4e:	b2d2      	uxtb	r2, r2
 800ae50:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13] ^ ((uint8_t*)k)[13];
 800ae52:	68bb      	ldr	r3, [r7, #8]
 800ae54:	330d      	adds	r3, #13
 800ae56:	7819      	ldrb	r1, [r3, #0]
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	330d      	adds	r3, #13
 800ae5c:	781a      	ldrb	r2, [r3, #0]
 800ae5e:	68fb      	ldr	r3, [r7, #12]
 800ae60:	330d      	adds	r3, #13
 800ae62:	404a      	eors	r2, r1
 800ae64:	b2d2      	uxtb	r2, r2
 800ae66:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14] ^ ((uint8_t*)k)[14];
 800ae68:	68bb      	ldr	r3, [r7, #8]
 800ae6a:	330e      	adds	r3, #14
 800ae6c:	7819      	ldrb	r1, [r3, #0]
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	330e      	adds	r3, #14
 800ae72:	781a      	ldrb	r2, [r3, #0]
 800ae74:	68fb      	ldr	r3, [r7, #12]
 800ae76:	330e      	adds	r3, #14
 800ae78:	404a      	eors	r2, r1
 800ae7a:	b2d2      	uxtb	r2, r2
 800ae7c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15] ^ ((uint8_t*)k)[15];
 800ae7e:	68bb      	ldr	r3, [r7, #8]
 800ae80:	330f      	adds	r3, #15
 800ae82:	7819      	ldrb	r1, [r3, #0]
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	330f      	adds	r3, #15
 800ae88:	781a      	ldrb	r2, [r3, #0]
 800ae8a:	68fb      	ldr	r3, [r7, #12]
 800ae8c:	330f      	adds	r3, #15
 800ae8e:	404a      	eors	r2, r1
 800ae90:	b2d2      	uxtb	r2, r2
 800ae92:	701a      	strb	r2, [r3, #0]
#else
    block_copy(d, s);
    xor_block(d, k);
#endif
}
 800ae94:	bf00      	nop
 800ae96:	3714      	adds	r7, #20
 800ae98:	46bd      	mov	sp, r7
 800ae9a:	bc80      	pop	{r7}
 800ae9c:	4770      	bx	lr

0800ae9e <add_round_key>:

static void add_round_key( uint8_t d[N_BLOCK], const uint8_t k[N_BLOCK] )
{
 800ae9e:	b580      	push	{r7, lr}
 800aea0:	b082      	sub	sp, #8
 800aea2:	af00      	add	r7, sp, #0
 800aea4:	6078      	str	r0, [r7, #4]
 800aea6:	6039      	str	r1, [r7, #0]
    xor_block(d, k);
 800aea8:	6839      	ldr	r1, [r7, #0]
 800aeaa:	6878      	ldr	r0, [r7, #4]
 800aeac:	f7ff fe88 	bl	800abc0 <xor_block>
}
 800aeb0:	bf00      	nop
 800aeb2:	3708      	adds	r7, #8
 800aeb4:	46bd      	mov	sp, r7
 800aeb6:	bd80      	pop	{r7, pc}

0800aeb8 <shift_sub_rows>:

static void shift_sub_rows( uint8_t st[N_BLOCK] )
{   uint8_t tt;
 800aeb8:	b480      	push	{r7}
 800aeba:	b085      	sub	sp, #20
 800aebc:	af00      	add	r7, sp, #0
 800aebe:	6078      	str	r0, [r7, #4]

    st[ 0] = s_box(st[ 0]); st[ 4] = s_box(st[ 4]);
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	781b      	ldrb	r3, [r3, #0]
 800aec4:	461a      	mov	r2, r3
 800aec6:	4b48      	ldr	r3, [pc, #288]	@ (800afe8 <shift_sub_rows+0x130>)
 800aec8:	5c9a      	ldrb	r2, [r3, r2]
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	701a      	strb	r2, [r3, #0]
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	3304      	adds	r3, #4
 800aed2:	781b      	ldrb	r3, [r3, #0]
 800aed4:	4619      	mov	r1, r3
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	3304      	adds	r3, #4
 800aeda:	4a43      	ldr	r2, [pc, #268]	@ (800afe8 <shift_sub_rows+0x130>)
 800aedc:	5c52      	ldrb	r2, [r2, r1]
 800aede:	701a      	strb	r2, [r3, #0]
    st[ 8] = s_box(st[ 8]); st[12] = s_box(st[12]);
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	3308      	adds	r3, #8
 800aee4:	781b      	ldrb	r3, [r3, #0]
 800aee6:	4619      	mov	r1, r3
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	3308      	adds	r3, #8
 800aeec:	4a3e      	ldr	r2, [pc, #248]	@ (800afe8 <shift_sub_rows+0x130>)
 800aeee:	5c52      	ldrb	r2, [r2, r1]
 800aef0:	701a      	strb	r2, [r3, #0]
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	330c      	adds	r3, #12
 800aef6:	781b      	ldrb	r3, [r3, #0]
 800aef8:	4619      	mov	r1, r3
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	330c      	adds	r3, #12
 800aefe:	4a3a      	ldr	r2, [pc, #232]	@ (800afe8 <shift_sub_rows+0x130>)
 800af00:	5c52      	ldrb	r2, [r2, r1]
 800af02:	701a      	strb	r2, [r3, #0]

    tt = st[1]; st[ 1] = s_box(st[ 5]); st[ 5] = s_box(st[ 9]);
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	785b      	ldrb	r3, [r3, #1]
 800af08:	73fb      	strb	r3, [r7, #15]
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	3305      	adds	r3, #5
 800af0e:	781b      	ldrb	r3, [r3, #0]
 800af10:	4619      	mov	r1, r3
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	3301      	adds	r3, #1
 800af16:	4a34      	ldr	r2, [pc, #208]	@ (800afe8 <shift_sub_rows+0x130>)
 800af18:	5c52      	ldrb	r2, [r2, r1]
 800af1a:	701a      	strb	r2, [r3, #0]
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	3309      	adds	r3, #9
 800af20:	781b      	ldrb	r3, [r3, #0]
 800af22:	4619      	mov	r1, r3
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	3305      	adds	r3, #5
 800af28:	4a2f      	ldr	r2, [pc, #188]	@ (800afe8 <shift_sub_rows+0x130>)
 800af2a:	5c52      	ldrb	r2, [r2, r1]
 800af2c:	701a      	strb	r2, [r3, #0]
    st[ 9] = s_box(st[13]); st[13] = s_box( tt );
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	330d      	adds	r3, #13
 800af32:	781b      	ldrb	r3, [r3, #0]
 800af34:	4619      	mov	r1, r3
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	3309      	adds	r3, #9
 800af3a:	4a2b      	ldr	r2, [pc, #172]	@ (800afe8 <shift_sub_rows+0x130>)
 800af3c:	5c52      	ldrb	r2, [r2, r1]
 800af3e:	701a      	strb	r2, [r3, #0]
 800af40:	7bfa      	ldrb	r2, [r7, #15]
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	330d      	adds	r3, #13
 800af46:	4928      	ldr	r1, [pc, #160]	@ (800afe8 <shift_sub_rows+0x130>)
 800af48:	5c8a      	ldrb	r2, [r1, r2]
 800af4a:	701a      	strb	r2, [r3, #0]

    tt = st[2]; st[ 2] = s_box(st[10]); st[10] = s_box( tt );
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	789b      	ldrb	r3, [r3, #2]
 800af50:	73fb      	strb	r3, [r7, #15]
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	330a      	adds	r3, #10
 800af56:	781b      	ldrb	r3, [r3, #0]
 800af58:	4619      	mov	r1, r3
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	3302      	adds	r3, #2
 800af5e:	4a22      	ldr	r2, [pc, #136]	@ (800afe8 <shift_sub_rows+0x130>)
 800af60:	5c52      	ldrb	r2, [r2, r1]
 800af62:	701a      	strb	r2, [r3, #0]
 800af64:	7bfa      	ldrb	r2, [r7, #15]
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	330a      	adds	r3, #10
 800af6a:	491f      	ldr	r1, [pc, #124]	@ (800afe8 <shift_sub_rows+0x130>)
 800af6c:	5c8a      	ldrb	r2, [r1, r2]
 800af6e:	701a      	strb	r2, [r3, #0]
    tt = st[6]; st[ 6] = s_box(st[14]); st[14] = s_box( tt );
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	799b      	ldrb	r3, [r3, #6]
 800af74:	73fb      	strb	r3, [r7, #15]
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	330e      	adds	r3, #14
 800af7a:	781b      	ldrb	r3, [r3, #0]
 800af7c:	4619      	mov	r1, r3
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	3306      	adds	r3, #6
 800af82:	4a19      	ldr	r2, [pc, #100]	@ (800afe8 <shift_sub_rows+0x130>)
 800af84:	5c52      	ldrb	r2, [r2, r1]
 800af86:	701a      	strb	r2, [r3, #0]
 800af88:	7bfa      	ldrb	r2, [r7, #15]
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	330e      	adds	r3, #14
 800af8e:	4916      	ldr	r1, [pc, #88]	@ (800afe8 <shift_sub_rows+0x130>)
 800af90:	5c8a      	ldrb	r2, [r1, r2]
 800af92:	701a      	strb	r2, [r3, #0]

    tt = st[15]; st[15] = s_box(st[11]); st[11] = s_box(st[ 7]);
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	7bdb      	ldrb	r3, [r3, #15]
 800af98:	73fb      	strb	r3, [r7, #15]
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	330b      	adds	r3, #11
 800af9e:	781b      	ldrb	r3, [r3, #0]
 800afa0:	4619      	mov	r1, r3
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	330f      	adds	r3, #15
 800afa6:	4a10      	ldr	r2, [pc, #64]	@ (800afe8 <shift_sub_rows+0x130>)
 800afa8:	5c52      	ldrb	r2, [r2, r1]
 800afaa:	701a      	strb	r2, [r3, #0]
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	3307      	adds	r3, #7
 800afb0:	781b      	ldrb	r3, [r3, #0]
 800afb2:	4619      	mov	r1, r3
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	330b      	adds	r3, #11
 800afb8:	4a0b      	ldr	r2, [pc, #44]	@ (800afe8 <shift_sub_rows+0x130>)
 800afba:	5c52      	ldrb	r2, [r2, r1]
 800afbc:	701a      	strb	r2, [r3, #0]
    st[ 7] = s_box(st[ 3]); st[ 3] = s_box( tt );
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	3303      	adds	r3, #3
 800afc2:	781b      	ldrb	r3, [r3, #0]
 800afc4:	4619      	mov	r1, r3
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	3307      	adds	r3, #7
 800afca:	4a07      	ldr	r2, [pc, #28]	@ (800afe8 <shift_sub_rows+0x130>)
 800afcc:	5c52      	ldrb	r2, [r2, r1]
 800afce:	701a      	strb	r2, [r3, #0]
 800afd0:	7bfa      	ldrb	r2, [r7, #15]
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	3303      	adds	r3, #3
 800afd6:	4904      	ldr	r1, [pc, #16]	@ (800afe8 <shift_sub_rows+0x130>)
 800afd8:	5c8a      	ldrb	r2, [r1, r2]
 800afda:	701a      	strb	r2, [r3, #0]
}
 800afdc:	bf00      	nop
 800afde:	3714      	adds	r7, #20
 800afe0:	46bd      	mov	sp, r7
 800afe2:	bc80      	pop	{r7}
 800afe4:	4770      	bx	lr
 800afe6:	bf00      	nop
 800afe8:	0801c1ac 	.word	0x0801c1ac

0800afec <mix_sub_columns>:

#endif

#if defined( VERSION_1 )
  static void mix_sub_columns( uint8_t dt[N_BLOCK] )
  { uint8_t st[N_BLOCK];
 800afec:	b580      	push	{r7, lr}
 800afee:	b086      	sub	sp, #24
 800aff0:	af00      	add	r7, sp, #0
 800aff2:	6078      	str	r0, [r7, #4]
    block_copy(st, dt);
 800aff4:	f107 0308 	add.w	r3, r7, #8
 800aff8:	6879      	ldr	r1, [r7, #4]
 800affa:	4618      	mov	r0, r3
 800affc:	f7ff fd6c 	bl	800aad8 <copy_block>
#else
  static void mix_sub_columns( uint8_t dt[N_BLOCK], uint8_t st[N_BLOCK] )
  {
#endif
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 800b000:	7a3b      	ldrb	r3, [r7, #8]
 800b002:	461a      	mov	r2, r3
 800b004:	4b9a      	ldr	r3, [pc, #616]	@ (800b270 <mix_sub_columns+0x284>)
 800b006:	5c9a      	ldrb	r2, [r3, r2]
 800b008:	7b7b      	ldrb	r3, [r7, #13]
 800b00a:	4619      	mov	r1, r3
 800b00c:	4b99      	ldr	r3, [pc, #612]	@ (800b274 <mix_sub_columns+0x288>)
 800b00e:	5c5b      	ldrb	r3, [r3, r1]
 800b010:	4053      	eors	r3, r2
 800b012:	b2da      	uxtb	r2, r3
 800b014:	7cbb      	ldrb	r3, [r7, #18]
 800b016:	4619      	mov	r1, r3
 800b018:	4b97      	ldr	r3, [pc, #604]	@ (800b278 <mix_sub_columns+0x28c>)
 800b01a:	5c5b      	ldrb	r3, [r3, r1]
 800b01c:	4053      	eors	r3, r2
 800b01e:	b2da      	uxtb	r2, r3
 800b020:	7dfb      	ldrb	r3, [r7, #23]
 800b022:	4619      	mov	r1, r3
 800b024:	4b94      	ldr	r3, [pc, #592]	@ (800b278 <mix_sub_columns+0x28c>)
 800b026:	5c5b      	ldrb	r3, [r3, r1]
 800b028:	4053      	eors	r3, r2
 800b02a:	b2da      	uxtb	r2, r3
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	701a      	strb	r2, [r3, #0]
    dt[ 1] = s_box(st[0]) ^ gfm2_sb(st[5]) ^ gfm3_sb(st[10]) ^ s_box(st[15]);
 800b030:	7a3b      	ldrb	r3, [r7, #8]
 800b032:	461a      	mov	r2, r3
 800b034:	4b90      	ldr	r3, [pc, #576]	@ (800b278 <mix_sub_columns+0x28c>)
 800b036:	5c9a      	ldrb	r2, [r3, r2]
 800b038:	7b7b      	ldrb	r3, [r7, #13]
 800b03a:	4619      	mov	r1, r3
 800b03c:	4b8c      	ldr	r3, [pc, #560]	@ (800b270 <mix_sub_columns+0x284>)
 800b03e:	5c5b      	ldrb	r3, [r3, r1]
 800b040:	4053      	eors	r3, r2
 800b042:	b2da      	uxtb	r2, r3
 800b044:	7cbb      	ldrb	r3, [r7, #18]
 800b046:	4619      	mov	r1, r3
 800b048:	4b8a      	ldr	r3, [pc, #552]	@ (800b274 <mix_sub_columns+0x288>)
 800b04a:	5c5b      	ldrb	r3, [r3, r1]
 800b04c:	4053      	eors	r3, r2
 800b04e:	b2d9      	uxtb	r1, r3
 800b050:	7dfb      	ldrb	r3, [r7, #23]
 800b052:	461a      	mov	r2, r3
 800b054:	4b88      	ldr	r3, [pc, #544]	@ (800b278 <mix_sub_columns+0x28c>)
 800b056:	5c9a      	ldrb	r2, [r3, r2]
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	3301      	adds	r3, #1
 800b05c:	404a      	eors	r2, r1
 800b05e:	b2d2      	uxtb	r2, r2
 800b060:	701a      	strb	r2, [r3, #0]
    dt[ 2] = s_box(st[0]) ^ s_box(st[5]) ^ gfm2_sb(st[10]) ^ gfm3_sb(st[15]);
 800b062:	7a3b      	ldrb	r3, [r7, #8]
 800b064:	461a      	mov	r2, r3
 800b066:	4b84      	ldr	r3, [pc, #528]	@ (800b278 <mix_sub_columns+0x28c>)
 800b068:	5c9a      	ldrb	r2, [r3, r2]
 800b06a:	7b7b      	ldrb	r3, [r7, #13]
 800b06c:	4619      	mov	r1, r3
 800b06e:	4b82      	ldr	r3, [pc, #520]	@ (800b278 <mix_sub_columns+0x28c>)
 800b070:	5c5b      	ldrb	r3, [r3, r1]
 800b072:	4053      	eors	r3, r2
 800b074:	b2da      	uxtb	r2, r3
 800b076:	7cbb      	ldrb	r3, [r7, #18]
 800b078:	4619      	mov	r1, r3
 800b07a:	4b7d      	ldr	r3, [pc, #500]	@ (800b270 <mix_sub_columns+0x284>)
 800b07c:	5c5b      	ldrb	r3, [r3, r1]
 800b07e:	4053      	eors	r3, r2
 800b080:	b2d9      	uxtb	r1, r3
 800b082:	7dfb      	ldrb	r3, [r7, #23]
 800b084:	461a      	mov	r2, r3
 800b086:	4b7b      	ldr	r3, [pc, #492]	@ (800b274 <mix_sub_columns+0x288>)
 800b088:	5c9a      	ldrb	r2, [r3, r2]
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	3302      	adds	r3, #2
 800b08e:	404a      	eors	r2, r1
 800b090:	b2d2      	uxtb	r2, r2
 800b092:	701a      	strb	r2, [r3, #0]
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
 800b094:	7a3b      	ldrb	r3, [r7, #8]
 800b096:	461a      	mov	r2, r3
 800b098:	4b76      	ldr	r3, [pc, #472]	@ (800b274 <mix_sub_columns+0x288>)
 800b09a:	5c9a      	ldrb	r2, [r3, r2]
 800b09c:	7b7b      	ldrb	r3, [r7, #13]
 800b09e:	4619      	mov	r1, r3
 800b0a0:	4b75      	ldr	r3, [pc, #468]	@ (800b278 <mix_sub_columns+0x28c>)
 800b0a2:	5c5b      	ldrb	r3, [r3, r1]
 800b0a4:	4053      	eors	r3, r2
 800b0a6:	b2da      	uxtb	r2, r3
 800b0a8:	7cbb      	ldrb	r3, [r7, #18]
 800b0aa:	4619      	mov	r1, r3
 800b0ac:	4b72      	ldr	r3, [pc, #456]	@ (800b278 <mix_sub_columns+0x28c>)
 800b0ae:	5c5b      	ldrb	r3, [r3, r1]
 800b0b0:	4053      	eors	r3, r2
 800b0b2:	b2d9      	uxtb	r1, r3
 800b0b4:	7dfb      	ldrb	r3, [r7, #23]
 800b0b6:	461a      	mov	r2, r3
 800b0b8:	4b6d      	ldr	r3, [pc, #436]	@ (800b270 <mix_sub_columns+0x284>)
 800b0ba:	5c9a      	ldrb	r2, [r3, r2]
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	3303      	adds	r3, #3
 800b0c0:	404a      	eors	r2, r1
 800b0c2:	b2d2      	uxtb	r2, r2
 800b0c4:	701a      	strb	r2, [r3, #0]

    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 800b0c6:	7b3b      	ldrb	r3, [r7, #12]
 800b0c8:	461a      	mov	r2, r3
 800b0ca:	4b69      	ldr	r3, [pc, #420]	@ (800b270 <mix_sub_columns+0x284>)
 800b0cc:	5c9a      	ldrb	r2, [r3, r2]
 800b0ce:	7c7b      	ldrb	r3, [r7, #17]
 800b0d0:	4619      	mov	r1, r3
 800b0d2:	4b68      	ldr	r3, [pc, #416]	@ (800b274 <mix_sub_columns+0x288>)
 800b0d4:	5c5b      	ldrb	r3, [r3, r1]
 800b0d6:	4053      	eors	r3, r2
 800b0d8:	b2da      	uxtb	r2, r3
 800b0da:	7dbb      	ldrb	r3, [r7, #22]
 800b0dc:	4619      	mov	r1, r3
 800b0de:	4b66      	ldr	r3, [pc, #408]	@ (800b278 <mix_sub_columns+0x28c>)
 800b0e0:	5c5b      	ldrb	r3, [r3, r1]
 800b0e2:	4053      	eors	r3, r2
 800b0e4:	b2d9      	uxtb	r1, r3
 800b0e6:	7afb      	ldrb	r3, [r7, #11]
 800b0e8:	461a      	mov	r2, r3
 800b0ea:	4b63      	ldr	r3, [pc, #396]	@ (800b278 <mix_sub_columns+0x28c>)
 800b0ec:	5c9a      	ldrb	r2, [r3, r2]
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	3304      	adds	r3, #4
 800b0f2:	404a      	eors	r2, r1
 800b0f4:	b2d2      	uxtb	r2, r2
 800b0f6:	701a      	strb	r2, [r3, #0]
    dt[ 5] = s_box(st[4]) ^ gfm2_sb(st[9]) ^ gfm3_sb(st[14]) ^ s_box(st[3]);
 800b0f8:	7b3b      	ldrb	r3, [r7, #12]
 800b0fa:	461a      	mov	r2, r3
 800b0fc:	4b5e      	ldr	r3, [pc, #376]	@ (800b278 <mix_sub_columns+0x28c>)
 800b0fe:	5c9a      	ldrb	r2, [r3, r2]
 800b100:	7c7b      	ldrb	r3, [r7, #17]
 800b102:	4619      	mov	r1, r3
 800b104:	4b5a      	ldr	r3, [pc, #360]	@ (800b270 <mix_sub_columns+0x284>)
 800b106:	5c5b      	ldrb	r3, [r3, r1]
 800b108:	4053      	eors	r3, r2
 800b10a:	b2da      	uxtb	r2, r3
 800b10c:	7dbb      	ldrb	r3, [r7, #22]
 800b10e:	4619      	mov	r1, r3
 800b110:	4b58      	ldr	r3, [pc, #352]	@ (800b274 <mix_sub_columns+0x288>)
 800b112:	5c5b      	ldrb	r3, [r3, r1]
 800b114:	4053      	eors	r3, r2
 800b116:	b2d9      	uxtb	r1, r3
 800b118:	7afb      	ldrb	r3, [r7, #11]
 800b11a:	461a      	mov	r2, r3
 800b11c:	4b56      	ldr	r3, [pc, #344]	@ (800b278 <mix_sub_columns+0x28c>)
 800b11e:	5c9a      	ldrb	r2, [r3, r2]
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	3305      	adds	r3, #5
 800b124:	404a      	eors	r2, r1
 800b126:	b2d2      	uxtb	r2, r2
 800b128:	701a      	strb	r2, [r3, #0]
    dt[ 6] = s_box(st[4]) ^ s_box(st[9]) ^ gfm2_sb(st[14]) ^ gfm3_sb(st[3]);
 800b12a:	7b3b      	ldrb	r3, [r7, #12]
 800b12c:	461a      	mov	r2, r3
 800b12e:	4b52      	ldr	r3, [pc, #328]	@ (800b278 <mix_sub_columns+0x28c>)
 800b130:	5c9a      	ldrb	r2, [r3, r2]
 800b132:	7c7b      	ldrb	r3, [r7, #17]
 800b134:	4619      	mov	r1, r3
 800b136:	4b50      	ldr	r3, [pc, #320]	@ (800b278 <mix_sub_columns+0x28c>)
 800b138:	5c5b      	ldrb	r3, [r3, r1]
 800b13a:	4053      	eors	r3, r2
 800b13c:	b2da      	uxtb	r2, r3
 800b13e:	7dbb      	ldrb	r3, [r7, #22]
 800b140:	4619      	mov	r1, r3
 800b142:	4b4b      	ldr	r3, [pc, #300]	@ (800b270 <mix_sub_columns+0x284>)
 800b144:	5c5b      	ldrb	r3, [r3, r1]
 800b146:	4053      	eors	r3, r2
 800b148:	b2d9      	uxtb	r1, r3
 800b14a:	7afb      	ldrb	r3, [r7, #11]
 800b14c:	461a      	mov	r2, r3
 800b14e:	4b49      	ldr	r3, [pc, #292]	@ (800b274 <mix_sub_columns+0x288>)
 800b150:	5c9a      	ldrb	r2, [r3, r2]
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	3306      	adds	r3, #6
 800b156:	404a      	eors	r2, r1
 800b158:	b2d2      	uxtb	r2, r2
 800b15a:	701a      	strb	r2, [r3, #0]
    dt[ 7] = gfm3_sb(st[4]) ^ s_box(st[9]) ^ s_box(st[14]) ^ gfm2_sb(st[3]);
 800b15c:	7b3b      	ldrb	r3, [r7, #12]
 800b15e:	461a      	mov	r2, r3
 800b160:	4b44      	ldr	r3, [pc, #272]	@ (800b274 <mix_sub_columns+0x288>)
 800b162:	5c9a      	ldrb	r2, [r3, r2]
 800b164:	7c7b      	ldrb	r3, [r7, #17]
 800b166:	4619      	mov	r1, r3
 800b168:	4b43      	ldr	r3, [pc, #268]	@ (800b278 <mix_sub_columns+0x28c>)
 800b16a:	5c5b      	ldrb	r3, [r3, r1]
 800b16c:	4053      	eors	r3, r2
 800b16e:	b2da      	uxtb	r2, r3
 800b170:	7dbb      	ldrb	r3, [r7, #22]
 800b172:	4619      	mov	r1, r3
 800b174:	4b40      	ldr	r3, [pc, #256]	@ (800b278 <mix_sub_columns+0x28c>)
 800b176:	5c5b      	ldrb	r3, [r3, r1]
 800b178:	4053      	eors	r3, r2
 800b17a:	b2d9      	uxtb	r1, r3
 800b17c:	7afb      	ldrb	r3, [r7, #11]
 800b17e:	461a      	mov	r2, r3
 800b180:	4b3b      	ldr	r3, [pc, #236]	@ (800b270 <mix_sub_columns+0x284>)
 800b182:	5c9a      	ldrb	r2, [r3, r2]
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	3307      	adds	r3, #7
 800b188:	404a      	eors	r2, r1
 800b18a:	b2d2      	uxtb	r2, r2
 800b18c:	701a      	strb	r2, [r3, #0]

    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
 800b18e:	7c3b      	ldrb	r3, [r7, #16]
 800b190:	461a      	mov	r2, r3
 800b192:	4b37      	ldr	r3, [pc, #220]	@ (800b270 <mix_sub_columns+0x284>)
 800b194:	5c9a      	ldrb	r2, [r3, r2]
 800b196:	7d7b      	ldrb	r3, [r7, #21]
 800b198:	4619      	mov	r1, r3
 800b19a:	4b36      	ldr	r3, [pc, #216]	@ (800b274 <mix_sub_columns+0x288>)
 800b19c:	5c5b      	ldrb	r3, [r3, r1]
 800b19e:	4053      	eors	r3, r2
 800b1a0:	b2da      	uxtb	r2, r3
 800b1a2:	7abb      	ldrb	r3, [r7, #10]
 800b1a4:	4619      	mov	r1, r3
 800b1a6:	4b34      	ldr	r3, [pc, #208]	@ (800b278 <mix_sub_columns+0x28c>)
 800b1a8:	5c5b      	ldrb	r3, [r3, r1]
 800b1aa:	4053      	eors	r3, r2
 800b1ac:	b2d9      	uxtb	r1, r3
 800b1ae:	7bfb      	ldrb	r3, [r7, #15]
 800b1b0:	461a      	mov	r2, r3
 800b1b2:	4b31      	ldr	r3, [pc, #196]	@ (800b278 <mix_sub_columns+0x28c>)
 800b1b4:	5c9a      	ldrb	r2, [r3, r2]
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	3308      	adds	r3, #8
 800b1ba:	404a      	eors	r2, r1
 800b1bc:	b2d2      	uxtb	r2, r2
 800b1be:	701a      	strb	r2, [r3, #0]
    dt[ 9] = s_box(st[8]) ^ gfm2_sb(st[13]) ^ gfm3_sb(st[2]) ^ s_box(st[7]);
 800b1c0:	7c3b      	ldrb	r3, [r7, #16]
 800b1c2:	461a      	mov	r2, r3
 800b1c4:	4b2c      	ldr	r3, [pc, #176]	@ (800b278 <mix_sub_columns+0x28c>)
 800b1c6:	5c9a      	ldrb	r2, [r3, r2]
 800b1c8:	7d7b      	ldrb	r3, [r7, #21]
 800b1ca:	4619      	mov	r1, r3
 800b1cc:	4b28      	ldr	r3, [pc, #160]	@ (800b270 <mix_sub_columns+0x284>)
 800b1ce:	5c5b      	ldrb	r3, [r3, r1]
 800b1d0:	4053      	eors	r3, r2
 800b1d2:	b2da      	uxtb	r2, r3
 800b1d4:	7abb      	ldrb	r3, [r7, #10]
 800b1d6:	4619      	mov	r1, r3
 800b1d8:	4b26      	ldr	r3, [pc, #152]	@ (800b274 <mix_sub_columns+0x288>)
 800b1da:	5c5b      	ldrb	r3, [r3, r1]
 800b1dc:	4053      	eors	r3, r2
 800b1de:	b2d9      	uxtb	r1, r3
 800b1e0:	7bfb      	ldrb	r3, [r7, #15]
 800b1e2:	461a      	mov	r2, r3
 800b1e4:	4b24      	ldr	r3, [pc, #144]	@ (800b278 <mix_sub_columns+0x28c>)
 800b1e6:	5c9a      	ldrb	r2, [r3, r2]
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	3309      	adds	r3, #9
 800b1ec:	404a      	eors	r2, r1
 800b1ee:	b2d2      	uxtb	r2, r2
 800b1f0:	701a      	strb	r2, [r3, #0]
    dt[10] = s_box(st[8]) ^ s_box(st[13]) ^ gfm2_sb(st[2]) ^ gfm3_sb(st[7]);
 800b1f2:	7c3b      	ldrb	r3, [r7, #16]
 800b1f4:	461a      	mov	r2, r3
 800b1f6:	4b20      	ldr	r3, [pc, #128]	@ (800b278 <mix_sub_columns+0x28c>)
 800b1f8:	5c9a      	ldrb	r2, [r3, r2]
 800b1fa:	7d7b      	ldrb	r3, [r7, #21]
 800b1fc:	4619      	mov	r1, r3
 800b1fe:	4b1e      	ldr	r3, [pc, #120]	@ (800b278 <mix_sub_columns+0x28c>)
 800b200:	5c5b      	ldrb	r3, [r3, r1]
 800b202:	4053      	eors	r3, r2
 800b204:	b2da      	uxtb	r2, r3
 800b206:	7abb      	ldrb	r3, [r7, #10]
 800b208:	4619      	mov	r1, r3
 800b20a:	4b19      	ldr	r3, [pc, #100]	@ (800b270 <mix_sub_columns+0x284>)
 800b20c:	5c5b      	ldrb	r3, [r3, r1]
 800b20e:	4053      	eors	r3, r2
 800b210:	b2d9      	uxtb	r1, r3
 800b212:	7bfb      	ldrb	r3, [r7, #15]
 800b214:	461a      	mov	r2, r3
 800b216:	4b17      	ldr	r3, [pc, #92]	@ (800b274 <mix_sub_columns+0x288>)
 800b218:	5c9a      	ldrb	r2, [r3, r2]
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	330a      	adds	r3, #10
 800b21e:	404a      	eors	r2, r1
 800b220:	b2d2      	uxtb	r2, r2
 800b222:	701a      	strb	r2, [r3, #0]
    dt[11] = gfm3_sb(st[8]) ^ s_box(st[13]) ^ s_box(st[2]) ^ gfm2_sb(st[7]);
 800b224:	7c3b      	ldrb	r3, [r7, #16]
 800b226:	461a      	mov	r2, r3
 800b228:	4b12      	ldr	r3, [pc, #72]	@ (800b274 <mix_sub_columns+0x288>)
 800b22a:	5c9a      	ldrb	r2, [r3, r2]
 800b22c:	7d7b      	ldrb	r3, [r7, #21]
 800b22e:	4619      	mov	r1, r3
 800b230:	4b11      	ldr	r3, [pc, #68]	@ (800b278 <mix_sub_columns+0x28c>)
 800b232:	5c5b      	ldrb	r3, [r3, r1]
 800b234:	4053      	eors	r3, r2
 800b236:	b2da      	uxtb	r2, r3
 800b238:	7abb      	ldrb	r3, [r7, #10]
 800b23a:	4619      	mov	r1, r3
 800b23c:	4b0e      	ldr	r3, [pc, #56]	@ (800b278 <mix_sub_columns+0x28c>)
 800b23e:	5c5b      	ldrb	r3, [r3, r1]
 800b240:	4053      	eors	r3, r2
 800b242:	b2d9      	uxtb	r1, r3
 800b244:	7bfb      	ldrb	r3, [r7, #15]
 800b246:	461a      	mov	r2, r3
 800b248:	4b09      	ldr	r3, [pc, #36]	@ (800b270 <mix_sub_columns+0x284>)
 800b24a:	5c9a      	ldrb	r2, [r3, r2]
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	330b      	adds	r3, #11
 800b250:	404a      	eors	r2, r1
 800b252:	b2d2      	uxtb	r2, r2
 800b254:	701a      	strb	r2, [r3, #0]

    dt[12] = gfm2_sb(st[12]) ^ gfm3_sb(st[1]) ^ s_box(st[6]) ^ s_box(st[11]);
 800b256:	7d3b      	ldrb	r3, [r7, #20]
 800b258:	461a      	mov	r2, r3
 800b25a:	4b05      	ldr	r3, [pc, #20]	@ (800b270 <mix_sub_columns+0x284>)
 800b25c:	5c9a      	ldrb	r2, [r3, r2]
 800b25e:	7a7b      	ldrb	r3, [r7, #9]
 800b260:	4619      	mov	r1, r3
 800b262:	4b04      	ldr	r3, [pc, #16]	@ (800b274 <mix_sub_columns+0x288>)
 800b264:	5c5b      	ldrb	r3, [r3, r1]
 800b266:	4053      	eors	r3, r2
 800b268:	b2da      	uxtb	r2, r3
 800b26a:	7bbb      	ldrb	r3, [r7, #14]
 800b26c:	4619      	mov	r1, r3
 800b26e:	e005      	b.n	800b27c <mix_sub_columns+0x290>
 800b270:	0801c2ac 	.word	0x0801c2ac
 800b274:	0801c3ac 	.word	0x0801c3ac
 800b278:	0801c1ac 	.word	0x0801c1ac
 800b27c:	4b2d      	ldr	r3, [pc, #180]	@ (800b334 <mix_sub_columns+0x348>)
 800b27e:	5c5b      	ldrb	r3, [r3, r1]
 800b280:	4053      	eors	r3, r2
 800b282:	b2d9      	uxtb	r1, r3
 800b284:	7cfb      	ldrb	r3, [r7, #19]
 800b286:	461a      	mov	r2, r3
 800b288:	4b2a      	ldr	r3, [pc, #168]	@ (800b334 <mix_sub_columns+0x348>)
 800b28a:	5c9a      	ldrb	r2, [r3, r2]
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	330c      	adds	r3, #12
 800b290:	404a      	eors	r2, r1
 800b292:	b2d2      	uxtb	r2, r2
 800b294:	701a      	strb	r2, [r3, #0]
    dt[13] = s_box(st[12]) ^ gfm2_sb(st[1]) ^ gfm3_sb(st[6]) ^ s_box(st[11]);
 800b296:	7d3b      	ldrb	r3, [r7, #20]
 800b298:	461a      	mov	r2, r3
 800b29a:	4b26      	ldr	r3, [pc, #152]	@ (800b334 <mix_sub_columns+0x348>)
 800b29c:	5c9a      	ldrb	r2, [r3, r2]
 800b29e:	7a7b      	ldrb	r3, [r7, #9]
 800b2a0:	4619      	mov	r1, r3
 800b2a2:	4b25      	ldr	r3, [pc, #148]	@ (800b338 <mix_sub_columns+0x34c>)
 800b2a4:	5c5b      	ldrb	r3, [r3, r1]
 800b2a6:	4053      	eors	r3, r2
 800b2a8:	b2da      	uxtb	r2, r3
 800b2aa:	7bbb      	ldrb	r3, [r7, #14]
 800b2ac:	4619      	mov	r1, r3
 800b2ae:	4b23      	ldr	r3, [pc, #140]	@ (800b33c <mix_sub_columns+0x350>)
 800b2b0:	5c5b      	ldrb	r3, [r3, r1]
 800b2b2:	4053      	eors	r3, r2
 800b2b4:	b2d9      	uxtb	r1, r3
 800b2b6:	7cfb      	ldrb	r3, [r7, #19]
 800b2b8:	461a      	mov	r2, r3
 800b2ba:	4b1e      	ldr	r3, [pc, #120]	@ (800b334 <mix_sub_columns+0x348>)
 800b2bc:	5c9a      	ldrb	r2, [r3, r2]
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	330d      	adds	r3, #13
 800b2c2:	404a      	eors	r2, r1
 800b2c4:	b2d2      	uxtb	r2, r2
 800b2c6:	701a      	strb	r2, [r3, #0]
    dt[14] = s_box(st[12]) ^ s_box(st[1]) ^ gfm2_sb(st[6]) ^ gfm3_sb(st[11]);
 800b2c8:	7d3b      	ldrb	r3, [r7, #20]
 800b2ca:	461a      	mov	r2, r3
 800b2cc:	4b19      	ldr	r3, [pc, #100]	@ (800b334 <mix_sub_columns+0x348>)
 800b2ce:	5c9a      	ldrb	r2, [r3, r2]
 800b2d0:	7a7b      	ldrb	r3, [r7, #9]
 800b2d2:	4619      	mov	r1, r3
 800b2d4:	4b17      	ldr	r3, [pc, #92]	@ (800b334 <mix_sub_columns+0x348>)
 800b2d6:	5c5b      	ldrb	r3, [r3, r1]
 800b2d8:	4053      	eors	r3, r2
 800b2da:	b2da      	uxtb	r2, r3
 800b2dc:	7bbb      	ldrb	r3, [r7, #14]
 800b2de:	4619      	mov	r1, r3
 800b2e0:	4b15      	ldr	r3, [pc, #84]	@ (800b338 <mix_sub_columns+0x34c>)
 800b2e2:	5c5b      	ldrb	r3, [r3, r1]
 800b2e4:	4053      	eors	r3, r2
 800b2e6:	b2d9      	uxtb	r1, r3
 800b2e8:	7cfb      	ldrb	r3, [r7, #19]
 800b2ea:	461a      	mov	r2, r3
 800b2ec:	4b13      	ldr	r3, [pc, #76]	@ (800b33c <mix_sub_columns+0x350>)
 800b2ee:	5c9a      	ldrb	r2, [r3, r2]
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	330e      	adds	r3, #14
 800b2f4:	404a      	eors	r2, r1
 800b2f6:	b2d2      	uxtb	r2, r2
 800b2f8:	701a      	strb	r2, [r3, #0]
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 800b2fa:	7d3b      	ldrb	r3, [r7, #20]
 800b2fc:	461a      	mov	r2, r3
 800b2fe:	4b0f      	ldr	r3, [pc, #60]	@ (800b33c <mix_sub_columns+0x350>)
 800b300:	5c9a      	ldrb	r2, [r3, r2]
 800b302:	7a7b      	ldrb	r3, [r7, #9]
 800b304:	4619      	mov	r1, r3
 800b306:	4b0b      	ldr	r3, [pc, #44]	@ (800b334 <mix_sub_columns+0x348>)
 800b308:	5c5b      	ldrb	r3, [r3, r1]
 800b30a:	4053      	eors	r3, r2
 800b30c:	b2da      	uxtb	r2, r3
 800b30e:	7bbb      	ldrb	r3, [r7, #14]
 800b310:	4619      	mov	r1, r3
 800b312:	4b08      	ldr	r3, [pc, #32]	@ (800b334 <mix_sub_columns+0x348>)
 800b314:	5c5b      	ldrb	r3, [r3, r1]
 800b316:	4053      	eors	r3, r2
 800b318:	b2d9      	uxtb	r1, r3
 800b31a:	7cfb      	ldrb	r3, [r7, #19]
 800b31c:	461a      	mov	r2, r3
 800b31e:	4b06      	ldr	r3, [pc, #24]	@ (800b338 <mix_sub_columns+0x34c>)
 800b320:	5c9a      	ldrb	r2, [r3, r2]
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	330f      	adds	r3, #15
 800b326:	404a      	eors	r2, r1
 800b328:	b2d2      	uxtb	r2, r2
 800b32a:	701a      	strb	r2, [r3, #0]
  }
 800b32c:	bf00      	nop
 800b32e:	3718      	adds	r7, #24
 800b330:	46bd      	mov	sp, r7
 800b332:	bd80      	pop	{r7, pc}
 800b334:	0801c1ac 	.word	0x0801c1ac
 800b338:	0801c2ac 	.word	0x0801c2ac
 800b33c:	0801c3ac 	.word	0x0801c3ac

0800b340 <lorawan_aes_set_key>:
#if defined( AES_ENC_PREKEYED ) || defined( AES_DEC_PREKEYED )

/*  Set the cipher key for the pre-keyed version */

return_type lorawan_aes_set_key( const uint8_t key[], length_type keylen, lorawan_aes_context ctx[1] )
{
 800b340:	b580      	push	{r7, lr}
 800b342:	b086      	sub	sp, #24
 800b344:	af00      	add	r7, sp, #0
 800b346:	60f8      	str	r0, [r7, #12]
 800b348:	460b      	mov	r3, r1
 800b34a:	607a      	str	r2, [r7, #4]
 800b34c:	72fb      	strb	r3, [r7, #11]
    uint8_t cc, rc, hi;

    switch( keylen )
 800b34e:	7afb      	ldrb	r3, [r7, #11]
 800b350:	3b10      	subs	r3, #16
 800b352:	2b10      	cmp	r3, #16
 800b354:	bf8c      	ite	hi
 800b356:	2201      	movhi	r2, #1
 800b358:	2200      	movls	r2, #0
 800b35a:	b2d2      	uxtb	r2, r2
 800b35c:	2a00      	cmp	r2, #0
 800b35e:	d10b      	bne.n	800b378 <lorawan_aes_set_key+0x38>
 800b360:	4a64      	ldr	r2, [pc, #400]	@ (800b4f4 <lorawan_aes_set_key+0x1b4>)
 800b362:	fa22 f303 	lsr.w	r3, r2, r3
 800b366:	f003 0301 	and.w	r3, r3, #1
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	bf14      	ite	ne
 800b36e:	2301      	movne	r3, #1
 800b370:	2300      	moveq	r3, #0
 800b372:	b2db      	uxtb	r3, r3
 800b374:	2b00      	cmp	r3, #0
 800b376:	d105      	bne.n	800b384 <lorawan_aes_set_key+0x44>
    case 16:
    case 24:
    case 32:
        break;
    default:
        ctx->rnd = 0;
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	2200      	movs	r2, #0
 800b37c:	f883 20f0 	strb.w	r2, [r3, #240]	@ 0xf0
        return ( uint8_t )-1;
 800b380:	23ff      	movs	r3, #255	@ 0xff
 800b382:	e0b2      	b.n	800b4ea <lorawan_aes_set_key+0x1aa>
        break;
 800b384:	bf00      	nop
    }
    block_copy_nn(ctx->ksch, key, keylen);
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	7afa      	ldrb	r2, [r7, #11]
 800b38a:	68f9      	ldr	r1, [r7, #12]
 800b38c:	4618      	mov	r0, r3
 800b38e:	f7ff fbfc 	bl	800ab8a <copy_block_nn>
    hi = (keylen + 28) << 2;
 800b392:	7afb      	ldrb	r3, [r7, #11]
 800b394:	331c      	adds	r3, #28
 800b396:	b2db      	uxtb	r3, r3
 800b398:	009b      	lsls	r3, r3, #2
 800b39a:	747b      	strb	r3, [r7, #17]
    ctx->rnd = (hi >> 4) - 1;
 800b39c:	7c7b      	ldrb	r3, [r7, #17]
 800b39e:	091b      	lsrs	r3, r3, #4
 800b3a0:	b2db      	uxtb	r3, r3
 800b3a2:	3b01      	subs	r3, #1
 800b3a4:	b2da      	uxtb	r2, r3
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	f883 20f0 	strb.w	r2, [r3, #240]	@ 0xf0
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800b3ac:	7afb      	ldrb	r3, [r7, #11]
 800b3ae:	75fb      	strb	r3, [r7, #23]
 800b3b0:	2301      	movs	r3, #1
 800b3b2:	75bb      	strb	r3, [r7, #22]
 800b3b4:	e093      	b.n	800b4de <lorawan_aes_set_key+0x19e>
    {   uint8_t tt, t0, t1, t2, t3;

        t0 = ctx->ksch[cc - 4];
 800b3b6:	7dfb      	ldrb	r3, [r7, #23]
 800b3b8:	3b04      	subs	r3, #4
 800b3ba:	687a      	ldr	r2, [r7, #4]
 800b3bc:	5cd3      	ldrb	r3, [r2, r3]
 800b3be:	757b      	strb	r3, [r7, #21]
        t1 = ctx->ksch[cc - 3];
 800b3c0:	7dfb      	ldrb	r3, [r7, #23]
 800b3c2:	3b03      	subs	r3, #3
 800b3c4:	687a      	ldr	r2, [r7, #4]
 800b3c6:	5cd3      	ldrb	r3, [r2, r3]
 800b3c8:	753b      	strb	r3, [r7, #20]
        t2 = ctx->ksch[cc - 2];
 800b3ca:	7dfb      	ldrb	r3, [r7, #23]
 800b3cc:	3b02      	subs	r3, #2
 800b3ce:	687a      	ldr	r2, [r7, #4]
 800b3d0:	5cd3      	ldrb	r3, [r2, r3]
 800b3d2:	74fb      	strb	r3, [r7, #19]
        t3 = ctx->ksch[cc - 1];
 800b3d4:	7dfb      	ldrb	r3, [r7, #23]
 800b3d6:	3b01      	subs	r3, #1
 800b3d8:	687a      	ldr	r2, [r7, #4]
 800b3da:	5cd3      	ldrb	r3, [r2, r3]
 800b3dc:	74bb      	strb	r3, [r7, #18]
        if( cc % keylen == 0 )
 800b3de:	7dfb      	ldrb	r3, [r7, #23]
 800b3e0:	7afa      	ldrb	r2, [r7, #11]
 800b3e2:	fbb3 f1f2 	udiv	r1, r3, r2
 800b3e6:	fb01 f202 	mul.w	r2, r1, r2
 800b3ea:	1a9b      	subs	r3, r3, r2
 800b3ec:	b2db      	uxtb	r3, r3
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d127      	bne.n	800b442 <lorawan_aes_set_key+0x102>
        {
            tt = t0;
 800b3f2:	7d7b      	ldrb	r3, [r7, #21]
 800b3f4:	743b      	strb	r3, [r7, #16]
            t0 = s_box(t1) ^ rc;
 800b3f6:	7d3b      	ldrb	r3, [r7, #20]
 800b3f8:	4a3f      	ldr	r2, [pc, #252]	@ (800b4f8 <lorawan_aes_set_key+0x1b8>)
 800b3fa:	5cd2      	ldrb	r2, [r2, r3]
 800b3fc:	7dbb      	ldrb	r3, [r7, #22]
 800b3fe:	4053      	eors	r3, r2
 800b400:	757b      	strb	r3, [r7, #21]
            t1 = s_box(t2);
 800b402:	7cfb      	ldrb	r3, [r7, #19]
 800b404:	4a3c      	ldr	r2, [pc, #240]	@ (800b4f8 <lorawan_aes_set_key+0x1b8>)
 800b406:	5cd3      	ldrb	r3, [r2, r3]
 800b408:	753b      	strb	r3, [r7, #20]
            t2 = s_box(t3);
 800b40a:	7cbb      	ldrb	r3, [r7, #18]
 800b40c:	4a3a      	ldr	r2, [pc, #232]	@ (800b4f8 <lorawan_aes_set_key+0x1b8>)
 800b40e:	5cd3      	ldrb	r3, [r2, r3]
 800b410:	74fb      	strb	r3, [r7, #19]
            t3 = s_box(tt);
 800b412:	7c3b      	ldrb	r3, [r7, #16]
 800b414:	4a38      	ldr	r2, [pc, #224]	@ (800b4f8 <lorawan_aes_set_key+0x1b8>)
 800b416:	5cd3      	ldrb	r3, [r2, r3]
 800b418:	74bb      	strb	r3, [r7, #18]
            rc = f2(rc);
 800b41a:	7dbb      	ldrb	r3, [r7, #22]
 800b41c:	005b      	lsls	r3, r3, #1
 800b41e:	b25a      	sxtb	r2, r3
 800b420:	7dbb      	ldrb	r3, [r7, #22]
 800b422:	09db      	lsrs	r3, r3, #7
 800b424:	b2db      	uxtb	r3, r3
 800b426:	4619      	mov	r1, r3
 800b428:	0049      	lsls	r1, r1, #1
 800b42a:	440b      	add	r3, r1
 800b42c:	4619      	mov	r1, r3
 800b42e:	00c8      	lsls	r0, r1, #3
 800b430:	4619      	mov	r1, r3
 800b432:	4603      	mov	r3, r0
 800b434:	440b      	add	r3, r1
 800b436:	b2db      	uxtb	r3, r3
 800b438:	b25b      	sxtb	r3, r3
 800b43a:	4053      	eors	r3, r2
 800b43c:	b25b      	sxtb	r3, r3
 800b43e:	75bb      	strb	r3, [r7, #22]
 800b440:	e01c      	b.n	800b47c <lorawan_aes_set_key+0x13c>
        }
        else if( keylen > 24 && cc % keylen == 16 )
 800b442:	7afb      	ldrb	r3, [r7, #11]
 800b444:	2b18      	cmp	r3, #24
 800b446:	d919      	bls.n	800b47c <lorawan_aes_set_key+0x13c>
 800b448:	7dfb      	ldrb	r3, [r7, #23]
 800b44a:	7afa      	ldrb	r2, [r7, #11]
 800b44c:	fbb3 f1f2 	udiv	r1, r3, r2
 800b450:	fb01 f202 	mul.w	r2, r1, r2
 800b454:	1a9b      	subs	r3, r3, r2
 800b456:	b2db      	uxtb	r3, r3
 800b458:	2b10      	cmp	r3, #16
 800b45a:	d10f      	bne.n	800b47c <lorawan_aes_set_key+0x13c>
        {
            t0 = s_box(t0);
 800b45c:	7d7b      	ldrb	r3, [r7, #21]
 800b45e:	4a26      	ldr	r2, [pc, #152]	@ (800b4f8 <lorawan_aes_set_key+0x1b8>)
 800b460:	5cd3      	ldrb	r3, [r2, r3]
 800b462:	757b      	strb	r3, [r7, #21]
            t1 = s_box(t1);
 800b464:	7d3b      	ldrb	r3, [r7, #20]
 800b466:	4a24      	ldr	r2, [pc, #144]	@ (800b4f8 <lorawan_aes_set_key+0x1b8>)
 800b468:	5cd3      	ldrb	r3, [r2, r3]
 800b46a:	753b      	strb	r3, [r7, #20]
            t2 = s_box(t2);
 800b46c:	7cfb      	ldrb	r3, [r7, #19]
 800b46e:	4a22      	ldr	r2, [pc, #136]	@ (800b4f8 <lorawan_aes_set_key+0x1b8>)
 800b470:	5cd3      	ldrb	r3, [r2, r3]
 800b472:	74fb      	strb	r3, [r7, #19]
            t3 = s_box(t3);
 800b474:	7cbb      	ldrb	r3, [r7, #18]
 800b476:	4a20      	ldr	r2, [pc, #128]	@ (800b4f8 <lorawan_aes_set_key+0x1b8>)
 800b478:	5cd3      	ldrb	r3, [r2, r3]
 800b47a:	74bb      	strb	r3, [r7, #18]
        }
        tt = cc - keylen;
 800b47c:	7dfa      	ldrb	r2, [r7, #23]
 800b47e:	7afb      	ldrb	r3, [r7, #11]
 800b480:	1ad3      	subs	r3, r2, r3
 800b482:	743b      	strb	r3, [r7, #16]
        ctx->ksch[cc + 0] = ctx->ksch[tt + 0] ^ t0;
 800b484:	7c3b      	ldrb	r3, [r7, #16]
 800b486:	687a      	ldr	r2, [r7, #4]
 800b488:	5cd1      	ldrb	r1, [r2, r3]
 800b48a:	7dfb      	ldrb	r3, [r7, #23]
 800b48c:	7d7a      	ldrb	r2, [r7, #21]
 800b48e:	404a      	eors	r2, r1
 800b490:	b2d1      	uxtb	r1, r2
 800b492:	687a      	ldr	r2, [r7, #4]
 800b494:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
 800b496:	7c3b      	ldrb	r3, [r7, #16]
 800b498:	3301      	adds	r3, #1
 800b49a:	687a      	ldr	r2, [r7, #4]
 800b49c:	5cd1      	ldrb	r1, [r2, r3]
 800b49e:	7dfb      	ldrb	r3, [r7, #23]
 800b4a0:	3301      	adds	r3, #1
 800b4a2:	7d3a      	ldrb	r2, [r7, #20]
 800b4a4:	404a      	eors	r2, r1
 800b4a6:	b2d1      	uxtb	r1, r2
 800b4a8:	687a      	ldr	r2, [r7, #4]
 800b4aa:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
 800b4ac:	7c3b      	ldrb	r3, [r7, #16]
 800b4ae:	3302      	adds	r3, #2
 800b4b0:	687a      	ldr	r2, [r7, #4]
 800b4b2:	5cd1      	ldrb	r1, [r2, r3]
 800b4b4:	7dfb      	ldrb	r3, [r7, #23]
 800b4b6:	3302      	adds	r3, #2
 800b4b8:	7cfa      	ldrb	r2, [r7, #19]
 800b4ba:	404a      	eors	r2, r1
 800b4bc:	b2d1      	uxtb	r1, r2
 800b4be:	687a      	ldr	r2, [r7, #4]
 800b4c0:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 800b4c2:	7c3b      	ldrb	r3, [r7, #16]
 800b4c4:	3303      	adds	r3, #3
 800b4c6:	687a      	ldr	r2, [r7, #4]
 800b4c8:	5cd1      	ldrb	r1, [r2, r3]
 800b4ca:	7dfb      	ldrb	r3, [r7, #23]
 800b4cc:	3303      	adds	r3, #3
 800b4ce:	7cba      	ldrb	r2, [r7, #18]
 800b4d0:	404a      	eors	r2, r1
 800b4d2:	b2d1      	uxtb	r1, r2
 800b4d4:	687a      	ldr	r2, [r7, #4]
 800b4d6:	54d1      	strb	r1, [r2, r3]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800b4d8:	7dfb      	ldrb	r3, [r7, #23]
 800b4da:	3304      	adds	r3, #4
 800b4dc:	75fb      	strb	r3, [r7, #23]
 800b4de:	7dfa      	ldrb	r2, [r7, #23]
 800b4e0:	7c7b      	ldrb	r3, [r7, #17]
 800b4e2:	429a      	cmp	r2, r3
 800b4e4:	f4ff af67 	bcc.w	800b3b6 <lorawan_aes_set_key+0x76>
    }
    return 0;
 800b4e8:	2300      	movs	r3, #0
}
 800b4ea:	4618      	mov	r0, r3
 800b4ec:	3718      	adds	r7, #24
 800b4ee:	46bd      	mov	sp, r7
 800b4f0:	bd80      	pop	{r7, pc}
 800b4f2:	bf00      	nop
 800b4f4:	00010101 	.word	0x00010101
 800b4f8:	0801c1ac 	.word	0x0801c1ac

0800b4fc <lorawan_aes_encrypt>:
#if defined( AES_ENC_PREKEYED )

/*  Encrypt a single block of 16 bytes */

return_type lorawan_aes_encrypt( const uint8_t in[N_BLOCK], uint8_t  out[N_BLOCK], const lorawan_aes_context ctx[1] )
{
 800b4fc:	b580      	push	{r7, lr}
 800b4fe:	b08a      	sub	sp, #40	@ 0x28
 800b500:	af00      	add	r7, sp, #0
 800b502:	60f8      	str	r0, [r7, #12]
 800b504:	60b9      	str	r1, [r7, #8]
 800b506:	607a      	str	r2, [r7, #4]
    if( ctx->rnd )
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800b50e:	2b00      	cmp	r3, #0
 800b510:	d038      	beq.n	800b584 <lorawan_aes_encrypt+0x88>
    {
        uint8_t s1[N_BLOCK], r;
        copy_and_key( s1, in, ctx->ksch );
 800b512:	687a      	ldr	r2, [r7, #4]
 800b514:	f107 0314 	add.w	r3, r7, #20
 800b518:	68f9      	ldr	r1, [r7, #12]
 800b51a:	4618      	mov	r0, r3
 800b51c:	f7ff fc07 	bl	800ad2e <copy_and_key>

        for( r = 1 ; r < ctx->rnd ; ++r )
 800b520:	2301      	movs	r3, #1
 800b522:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800b526:	e014      	b.n	800b552 <lorawan_aes_encrypt+0x56>
#if defined( VERSION_1 )
        {
            mix_sub_columns( s1 );
 800b528:	f107 0314 	add.w	r3, r7, #20
 800b52c:	4618      	mov	r0, r3
 800b52e:	f7ff fd5d 	bl	800afec <mix_sub_columns>
            add_round_key( s1, ctx->ksch + r * N_BLOCK);
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800b538:	0112      	lsls	r2, r2, #4
 800b53a:	441a      	add	r2, r3
 800b53c:	f107 0314 	add.w	r3, r7, #20
 800b540:	4611      	mov	r1, r2
 800b542:	4618      	mov	r0, r3
 800b544:	f7ff fcab 	bl	800ae9e <add_round_key>
        for( r = 1 ; r < ctx->rnd ; ++r )
 800b548:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b54c:	3301      	adds	r3, #1
 800b54e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800b558:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800b55c:	429a      	cmp	r2, r3
 800b55e:	d3e3      	bcc.n	800b528 <lorawan_aes_encrypt+0x2c>
        {   uint8_t s2[N_BLOCK];
            mix_sub_columns( s2, s1 );
            copy_and_key( s1, s2, ctx->ksch + r * N_BLOCK);
        }
#endif
        shift_sub_rows( s1 );
 800b560:	f107 0314 	add.w	r3, r7, #20
 800b564:	4618      	mov	r0, r3
 800b566:	f7ff fca7 	bl	800aeb8 <shift_sub_rows>
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800b570:	0112      	lsls	r2, r2, #4
 800b572:	441a      	add	r2, r3
 800b574:	f107 0314 	add.w	r3, r7, #20
 800b578:	4619      	mov	r1, r3
 800b57a:	68b8      	ldr	r0, [r7, #8]
 800b57c:	f7ff fbd7 	bl	800ad2e <copy_and_key>
    }
    else
        return ( uint8_t )-1;
    return 0;
 800b580:	2300      	movs	r3, #0
 800b582:	e000      	b.n	800b586 <lorawan_aes_encrypt+0x8a>
        return ( uint8_t )-1;
 800b584:	23ff      	movs	r3, #255	@ 0xff
}
 800b586:	4618      	mov	r0, r3
 800b588:	3728      	adds	r7, #40	@ 0x28
 800b58a:	46bd      	mov	sp, r7
 800b58c:	bd80      	pop	{r7, pc}
	...

0800b590 <PrintKey>:
static SecureElementStatus_t ComputeCmac(uint8_t *micBxBuffer, uint8_t *buffer, uint16_t size, KeyIdentifier_t keyID,
                                         uint32_t *cmac);

/* Private functions ---------------------------------------------------------*/
static void PrintKey( KeyIdentifier_t key )
{
 800b590:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b592:	b09d      	sub	sp, #116	@ 0x74
 800b594:	af10      	add	r7, sp, #64	@ 0x40
 800b596:	4603      	mov	r3, r0
 800b598:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
#if (defined (KEY_EXTRACTABLE) && (KEY_EXTRACTABLE == 1))
    SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 800b59c:	2306      	movs	r3, #6
 800b59e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    Key_t *keyItem;
    retval = SecureElementGetKeyByID(key, &keyItem);
 800b5a2:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 800b5a6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b5aa:	4611      	mov	r1, r2
 800b5ac:	4618      	mov	r0, r3
 800b5ae:	f000 f9a7 	bl	800b900 <SecureElementGetKeyByID>
 800b5b2:	4603      	mov	r3, r0
 800b5b4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
#else
    uint8_t extractable_key[16] = {0};
    retval = SecureElementGetKeyByID(key, (uint8_t*)extractable_key);
#endif /* LORAWAN_KMS */
    if (retval == SECURE_ELEMENT_SUCCESS)
 800b5b8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	f040 80b0 	bne.w	800b722 <PrintKey+0x192>
    {
        if (key == APP_KEY)
 800b5c2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	d106      	bne.n	800b5d8 <PrintKey+0x48>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### AppKey:      ");
 800b5ca:	4b58      	ldr	r3, [pc, #352]	@ (800b72c <PrintKey+0x19c>)
 800b5cc:	2200      	movs	r2, #0
 800b5ce:	2100      	movs	r1, #0
 800b5d0:	2002      	movs	r0, #2
 800b5d2:	f00f fd93 	bl	801b0fc <UTIL_ADV_TRACE_COND_FSend>
 800b5d6:	e056      	b.n	800b686 <PrintKey+0xf6>
        }
        else if (key == NWK_KEY)
 800b5d8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b5dc:	2b01      	cmp	r3, #1
 800b5de:	d106      	bne.n	800b5ee <PrintKey+0x5e>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### NwkKey:      ");
 800b5e0:	4b53      	ldr	r3, [pc, #332]	@ (800b730 <PrintKey+0x1a0>)
 800b5e2:	2200      	movs	r2, #0
 800b5e4:	2100      	movs	r1, #0
 800b5e6:	2002      	movs	r0, #2
 800b5e8:	f00f fd88 	bl	801b0fc <UTIL_ADV_TRACE_COND_FSend>
 800b5ec:	e04b      	b.n	800b686 <PrintKey+0xf6>
        }
        else if (key == APP_S_KEY)
 800b5ee:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b5f2:	2b03      	cmp	r3, #3
 800b5f4:	d106      	bne.n	800b604 <PrintKey+0x74>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### AppSKey:     ");
 800b5f6:	4b4f      	ldr	r3, [pc, #316]	@ (800b734 <PrintKey+0x1a4>)
 800b5f8:	2200      	movs	r2, #0
 800b5fa:	2100      	movs	r1, #0
 800b5fc:	2002      	movs	r0, #2
 800b5fe:	f00f fd7d 	bl	801b0fc <UTIL_ADV_TRACE_COND_FSend>
 800b602:	e040      	b.n	800b686 <PrintKey+0xf6>
        }
        else if (key == NWK_S_KEY)
 800b604:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b608:	2b02      	cmp	r3, #2
 800b60a:	d106      	bne.n	800b61a <PrintKey+0x8a>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### NwkSKey:     ");
 800b60c:	4b4a      	ldr	r3, [pc, #296]	@ (800b738 <PrintKey+0x1a8>)
 800b60e:	2200      	movs	r2, #0
 800b610:	2100      	movs	r1, #0
 800b612:	2002      	movs	r0, #2
 800b614:	f00f fd72 	bl	801b0fc <UTIL_ADV_TRACE_COND_FSend>
 800b618:	e035      	b.n	800b686 <PrintKey+0xf6>
        }
        else if (key == MC_ROOT_KEY)
 800b61a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b61e:	2b04      	cmp	r3, #4
 800b620:	d106      	bne.n	800b630 <PrintKey+0xa0>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCRootKey:   ");
 800b622:	4b46      	ldr	r3, [pc, #280]	@ (800b73c <PrintKey+0x1ac>)
 800b624:	2200      	movs	r2, #0
 800b626:	2100      	movs	r1, #0
 800b628:	2002      	movs	r0, #2
 800b62a:	f00f fd67 	bl	801b0fc <UTIL_ADV_TRACE_COND_FSend>
 800b62e:	e02a      	b.n	800b686 <PrintKey+0xf6>
        }
        else if (key == MC_KE_KEY)
 800b630:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b634:	2b7f      	cmp	r3, #127	@ 0x7f
 800b636:	d106      	bne.n	800b646 <PrintKey+0xb6>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCKEKey:     ");
 800b638:	4b41      	ldr	r3, [pc, #260]	@ (800b740 <PrintKey+0x1b0>)
 800b63a:	2200      	movs	r2, #0
 800b63c:	2100      	movs	r1, #0
 800b63e:	2002      	movs	r0, #2
 800b640:	f00f fd5c 	bl	801b0fc <UTIL_ADV_TRACE_COND_FSend>
 800b644:	e01f      	b.n	800b686 <PrintKey+0xf6>
        }
        else if (key == MC_KEY_0)
 800b646:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b64a:	2b80      	cmp	r3, #128	@ 0x80
 800b64c:	d106      	bne.n	800b65c <PrintKey+0xcc>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCKey_0:     ");
 800b64e:	4b3d      	ldr	r3, [pc, #244]	@ (800b744 <PrintKey+0x1b4>)
 800b650:	2200      	movs	r2, #0
 800b652:	2100      	movs	r1, #0
 800b654:	2002      	movs	r0, #2
 800b656:	f00f fd51 	bl	801b0fc <UTIL_ADV_TRACE_COND_FSend>
 800b65a:	e014      	b.n	800b686 <PrintKey+0xf6>
        }
        else if (key == MC_APP_S_KEY_0)
 800b65c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b660:	2b81      	cmp	r3, #129	@ 0x81
 800b662:	d106      	bne.n	800b672 <PrintKey+0xe2>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCAppSKey_0: ");
 800b664:	4b38      	ldr	r3, [pc, #224]	@ (800b748 <PrintKey+0x1b8>)
 800b666:	2200      	movs	r2, #0
 800b668:	2100      	movs	r1, #0
 800b66a:	2002      	movs	r0, #2
 800b66c:	f00f fd46 	bl	801b0fc <UTIL_ADV_TRACE_COND_FSend>
 800b670:	e009      	b.n	800b686 <PrintKey+0xf6>
        }
        else if (key == MC_NWK_S_KEY_0)
 800b672:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b676:	2b82      	cmp	r3, #130	@ 0x82
 800b678:	d105      	bne.n	800b686 <PrintKey+0xf6>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCNwkSKey_0: ");
 800b67a:	4b34      	ldr	r3, [pc, #208]	@ (800b74c <PrintKey+0x1bc>)
 800b67c:	2200      	movs	r2, #0
 800b67e:	2100      	movs	r1, #0
 800b680:	2002      	movs	r0, #2
 800b682:	f00f fd3b 	bl	801b0fc <UTIL_ADV_TRACE_COND_FSend>
        }
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
        MW_LOG(TS_OFF, VLEVEL_M, "%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800b686:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b688:	785b      	ldrb	r3, [r3, #1]
 800b68a:	4618      	mov	r0, r3
 800b68c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b68e:	789b      	ldrb	r3, [r3, #2]
 800b690:	461c      	mov	r4, r3
 800b692:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b694:	78db      	ldrb	r3, [r3, #3]
 800b696:	461d      	mov	r5, r3
 800b698:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b69a:	791b      	ldrb	r3, [r3, #4]
 800b69c:	461e      	mov	r6, r3
 800b69e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b6a0:	795b      	ldrb	r3, [r3, #5]
 800b6a2:	623b      	str	r3, [r7, #32]
 800b6a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b6a6:	799b      	ldrb	r3, [r3, #6]
 800b6a8:	61fb      	str	r3, [r7, #28]
 800b6aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b6ac:	79db      	ldrb	r3, [r3, #7]
 800b6ae:	61bb      	str	r3, [r7, #24]
 800b6b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b6b2:	7a1b      	ldrb	r3, [r3, #8]
 800b6b4:	617b      	str	r3, [r7, #20]
 800b6b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b6b8:	7a5b      	ldrb	r3, [r3, #9]
 800b6ba:	613b      	str	r3, [r7, #16]
 800b6bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b6be:	7a9b      	ldrb	r3, [r3, #10]
 800b6c0:	60fb      	str	r3, [r7, #12]
 800b6c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b6c4:	7adb      	ldrb	r3, [r3, #11]
 800b6c6:	60bb      	str	r3, [r7, #8]
 800b6c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b6ca:	7b1b      	ldrb	r3, [r3, #12]
 800b6cc:	607b      	str	r3, [r7, #4]
 800b6ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b6d0:	7b5b      	ldrb	r3, [r3, #13]
 800b6d2:	603b      	str	r3, [r7, #0]
 800b6d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b6d6:	7b9b      	ldrb	r3, [r3, #14]
 800b6d8:	4619      	mov	r1, r3
 800b6da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b6dc:	7bdb      	ldrb	r3, [r3, #15]
 800b6de:	461a      	mov	r2, r3
 800b6e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b6e2:	7c1b      	ldrb	r3, [r3, #16]
 800b6e4:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b6e6:	920e      	str	r2, [sp, #56]	@ 0x38
 800b6e8:	910d      	str	r1, [sp, #52]	@ 0x34
 800b6ea:	683a      	ldr	r2, [r7, #0]
 800b6ec:	920c      	str	r2, [sp, #48]	@ 0x30
 800b6ee:	687a      	ldr	r2, [r7, #4]
 800b6f0:	920b      	str	r2, [sp, #44]	@ 0x2c
 800b6f2:	68ba      	ldr	r2, [r7, #8]
 800b6f4:	920a      	str	r2, [sp, #40]	@ 0x28
 800b6f6:	68fa      	ldr	r2, [r7, #12]
 800b6f8:	9209      	str	r2, [sp, #36]	@ 0x24
 800b6fa:	693a      	ldr	r2, [r7, #16]
 800b6fc:	9208      	str	r2, [sp, #32]
 800b6fe:	697a      	ldr	r2, [r7, #20]
 800b700:	9207      	str	r2, [sp, #28]
 800b702:	69ba      	ldr	r2, [r7, #24]
 800b704:	9206      	str	r2, [sp, #24]
 800b706:	69fa      	ldr	r2, [r7, #28]
 800b708:	9205      	str	r2, [sp, #20]
 800b70a:	6a3b      	ldr	r3, [r7, #32]
 800b70c:	9304      	str	r3, [sp, #16]
 800b70e:	9603      	str	r6, [sp, #12]
 800b710:	9502      	str	r5, [sp, #8]
 800b712:	9401      	str	r4, [sp, #4]
 800b714:	9000      	str	r0, [sp, #0]
 800b716:	4b0e      	ldr	r3, [pc, #56]	@ (800b750 <PrintKey+0x1c0>)
 800b718:	2200      	movs	r2, #0
 800b71a:	2100      	movs	r1, #0
 800b71c:	2002      	movs	r0, #2
 800b71e:	f00f fced 	bl	801b0fc <UTIL_ADV_TRACE_COND_FSend>
        MW_LOG(TS_OFF, VLEVEL_M, "%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
               HEX16(extractable_key));
#endif /* LORAWAN_KMS */
    }
#endif /* KEY_EXTRACTABLE */
}
 800b722:	bf00      	nop
 800b724:	3734      	adds	r7, #52	@ 0x34
 800b726:	46bd      	mov	sp, r7
 800b728:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b72a:	bf00      	nop
 800b72c:	0801bc0c 	.word	0x0801bc0c
 800b730:	0801bc24 	.word	0x0801bc24
 800b734:	0801bc3c 	.word	0x0801bc3c
 800b738:	0801bc54 	.word	0x0801bc54
 800b73c:	0801bc6c 	.word	0x0801bc6c
 800b740:	0801bc84 	.word	0x0801bc84
 800b744:	0801bc9c 	.word	0x0801bc9c
 800b748:	0801bcb4 	.word	0x0801bcb4
 800b74c:	0801bccc 	.word	0x0801bccc
 800b750:	0801bce4 	.word	0x0801bce4

0800b754 <GetKeyByID>:
 * \param [in] keyID          - Key identifier
 * \param [out] keyItem       - Key item reference
 * \retval                    - Status of the operation
 */
static SecureElementStatus_t GetKeyByID( KeyIdentifier_t keyID, Key_t** keyItem )
{
 800b754:	b480      	push	{r7}
 800b756:	b085      	sub	sp, #20
 800b758:	af00      	add	r7, sp, #0
 800b75a:	4603      	mov	r3, r0
 800b75c:	6039      	str	r1, [r7, #0]
 800b75e:	71fb      	strb	r3, [r7, #7]
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800b760:	2300      	movs	r3, #0
 800b762:	73fb      	strb	r3, [r7, #15]
 800b764:	e01a      	b.n	800b79c <GetKeyByID+0x48>
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 800b766:	4b12      	ldr	r3, [pc, #72]	@ (800b7b0 <GetKeyByID+0x5c>)
 800b768:	6819      	ldr	r1, [r3, #0]
 800b76a:	7bfa      	ldrb	r2, [r7, #15]
 800b76c:	4613      	mov	r3, r2
 800b76e:	011b      	lsls	r3, r3, #4
 800b770:	4413      	add	r3, r2
 800b772:	440b      	add	r3, r1
 800b774:	3310      	adds	r3, #16
 800b776:	781b      	ldrb	r3, [r3, #0]
 800b778:	79fa      	ldrb	r2, [r7, #7]
 800b77a:	429a      	cmp	r2, r3
 800b77c:	d10b      	bne.n	800b796 <GetKeyByID+0x42>
        {
            *keyItem = &( SeNvm->KeyList[i] );
 800b77e:	4b0c      	ldr	r3, [pc, #48]	@ (800b7b0 <GetKeyByID+0x5c>)
 800b780:	6819      	ldr	r1, [r3, #0]
 800b782:	7bfa      	ldrb	r2, [r7, #15]
 800b784:	4613      	mov	r3, r2
 800b786:	011b      	lsls	r3, r3, #4
 800b788:	4413      	add	r3, r2
 800b78a:	3310      	adds	r3, #16
 800b78c:	18ca      	adds	r2, r1, r3
 800b78e:	683b      	ldr	r3, [r7, #0]
 800b790:	601a      	str	r2, [r3, #0]
            return SECURE_ELEMENT_SUCCESS;
 800b792:	2300      	movs	r3, #0
 800b794:	e006      	b.n	800b7a4 <GetKeyByID+0x50>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800b796:	7bfb      	ldrb	r3, [r7, #15]
 800b798:	3301      	adds	r3, #1
 800b79a:	73fb      	strb	r3, [r7, #15]
 800b79c:	7bfb      	ldrb	r3, [r7, #15]
 800b79e:	2b09      	cmp	r3, #9
 800b7a0:	d9e1      	bls.n	800b766 <GetKeyByID+0x12>
        }
    }
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800b7a2:	2303      	movs	r3, #3
}
 800b7a4:	4618      	mov	r0, r3
 800b7a6:	3714      	adds	r7, #20
 800b7a8:	46bd      	mov	sp, r7
 800b7aa:	bc80      	pop	{r7}
 800b7ac:	4770      	bx	lr
 800b7ae:	bf00      	nop
 800b7b0:	200004b8 	.word	0x200004b8

0800b7b4 <ComputeCmac>:
 * \param [out] cmac          - Computed cmac
 * \retval                    - Status of the operation
 */
static SecureElementStatus_t ComputeCmac( uint8_t* micBxBuffer, uint8_t* buffer, uint16_t size, KeyIdentifier_t keyID,
                                          uint32_t* cmac )
{
 800b7b4:	b590      	push	{r4, r7, lr}
 800b7b6:	b0d1      	sub	sp, #324	@ 0x144
 800b7b8:	af00      	add	r7, sp, #0
 800b7ba:	f507 74a0 	add.w	r4, r7, #320	@ 0x140
 800b7be:	f5a4 749a 	sub.w	r4, r4, #308	@ 0x134
 800b7c2:	6020      	str	r0, [r4, #0]
 800b7c4:	f507 70a0 	add.w	r0, r7, #320	@ 0x140
 800b7c8:	f5a0 709c 	sub.w	r0, r0, #312	@ 0x138
 800b7cc:	6001      	str	r1, [r0, #0]
 800b7ce:	4619      	mov	r1, r3
 800b7d0:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800b7d4:	f5a3 739d 	sub.w	r3, r3, #314	@ 0x13a
 800b7d8:	801a      	strh	r2, [r3, #0]
 800b7da:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800b7de:	f2a3 133b 	subw	r3, r3, #315	@ 0x13b
 800b7e2:	460a      	mov	r2, r1
 800b7e4:	701a      	strb	r2, [r3, #0]
    if( ( buffer == NULL ) || ( cmac == NULL ) )
 800b7e6:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800b7ea:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800b7ee:	681b      	ldr	r3, [r3, #0]
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	d003      	beq.n	800b7fc <ComputeCmac+0x48>
 800b7f4:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	d101      	bne.n	800b800 <ComputeCmac+0x4c>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800b7fc:	2302      	movs	r3, #2
 800b7fe:	e05c      	b.n	800b8ba <ComputeCmac+0x106>

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    uint8_t Cmac[16];
    AES_CMAC_CTX aesCmacCtx[1];

    AES_CMAC_Init( aesCmacCtx );
 800b800:	f107 0314 	add.w	r3, r7, #20
 800b804:	4618      	mov	r0, r3
 800b806:	f7fe ff1b 	bl	800a640 <AES_CMAC_Init>

    Key_t*                keyItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &keyItem );
 800b80a:	f107 0210 	add.w	r2, r7, #16
 800b80e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800b812:	f2a3 133b 	subw	r3, r3, #315	@ 0x13b
 800b816:	781b      	ldrb	r3, [r3, #0]
 800b818:	4611      	mov	r1, r2
 800b81a:	4618      	mov	r0, r3
 800b81c:	f7ff ff9a 	bl	800b754 <GetKeyByID>
 800b820:	4603      	mov	r3, r0
 800b822:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f

    if( retval == SECURE_ELEMENT_SUCCESS )
 800b826:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	d143      	bne.n	800b8b6 <ComputeCmac+0x102>
    {
        AES_CMAC_SetKey( aesCmacCtx, keyItem->KeyValue );
 800b82e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800b832:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	1c5a      	adds	r2, r3, #1
 800b83a:	f107 0314 	add.w	r3, r7, #20
 800b83e:	4611      	mov	r1, r2
 800b840:	4618      	mov	r0, r3
 800b842:	f7fe ff16 	bl	800a672 <AES_CMAC_SetKey>

        if( micBxBuffer != NULL )
 800b846:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800b84a:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800b84e:	681b      	ldr	r3, [r3, #0]
 800b850:	2b00      	cmp	r3, #0
 800b852:	d009      	beq.n	800b868 <ComputeCmac+0xb4>
        {
            AES_CMAC_Update( aesCmacCtx, micBxBuffer, 16 );
 800b854:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800b858:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800b85c:	f107 0014 	add.w	r0, r7, #20
 800b860:	2210      	movs	r2, #16
 800b862:	6819      	ldr	r1, [r3, #0]
 800b864:	f7fe ff14 	bl	800a690 <AES_CMAC_Update>
        }

        AES_CMAC_Update( aesCmacCtx, buffer, size );
 800b868:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800b86c:	f5a3 739d 	sub.w	r3, r3, #314	@ 0x13a
 800b870:	881a      	ldrh	r2, [r3, #0]
 800b872:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800b876:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800b87a:	f107 0014 	add.w	r0, r7, #20
 800b87e:	6819      	ldr	r1, [r3, #0]
 800b880:	f7fe ff06 	bl	800a690 <AES_CMAC_Update>

        AES_CMAC_Final( Cmac, aesCmacCtx );
 800b884:	f107 0214 	add.w	r2, r7, #20
 800b888:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 800b88c:	4611      	mov	r1, r2
 800b88e:	4618      	mov	r0, r3
 800b890:	f7fe ffc0 	bl	800a814 <AES_CMAC_Final>

        // Bring into the required format
        *cmac = ( uint32_t )( ( uint32_t ) Cmac[3] << 24 | ( uint32_t ) Cmac[2] << 16 | ( uint32_t ) Cmac[1] << 8 |
 800b894:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800b898:	061a      	lsls	r2, r3, #24
 800b89a:	f897 312e 	ldrb.w	r3, [r7, #302]	@ 0x12e
 800b89e:	041b      	lsls	r3, r3, #16
 800b8a0:	431a      	orrs	r2, r3
 800b8a2:	f897 312d 	ldrb.w	r3, [r7, #301]	@ 0x12d
 800b8a6:	021b      	lsls	r3, r3, #8
 800b8a8:	4313      	orrs	r3, r2
                              ( uint32_t ) Cmac[0] );
 800b8aa:	f897 212c 	ldrb.w	r2, [r7, #300]	@ 0x12c
        *cmac = ( uint32_t )( ( uint32_t ) Cmac[3] << 24 | ( uint32_t ) Cmac[2] << 16 | ( uint32_t ) Cmac[1] << 8 |
 800b8ae:	431a      	orrs	r2, r3
 800b8b0:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 800b8b4:	601a      	str	r2, [r3, #0]
    if (rv != CKR_OK)
    {
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */
    return retval;
 800b8b6:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
}
 800b8ba:	4618      	mov	r0, r3
 800b8bc:	f507 77a2 	add.w	r7, r7, #324	@ 0x144
 800b8c0:	46bd      	mov	sp, r7
 800b8c2:	bd90      	pop	{r4, r7, pc}

0800b8c4 <SecureElementInit>:
/*
 * API functions
 */
/* ST_WORKAROUND: Add unique ID callback as input parameter */
SecureElementStatus_t SecureElementInit( SecureElementNvmData_t *nvm, SecureElementGetUniqueId seGetUniqueId )
{
 800b8c4:	b580      	push	{r7, lr}
 800b8c6:	b082      	sub	sp, #8
 800b8c8:	af00      	add	r7, sp, #0
 800b8ca:	6078      	str	r0, [r7, #4]
 800b8cc:	6039      	str	r1, [r7, #0]
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    if( nvm == NULL )
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	d101      	bne.n	800b8d8 <SecureElementInit+0x14>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800b8d4:	2302      	movs	r3, #2
 800b8d6:	e00a      	b.n	800b8ee <SecureElementInit+0x2a>
    }

    // Initialize nvm pointer
    SeNvm = nvm;
 800b8d8:	4a07      	ldr	r2, [pc, #28]	@ (800b8f8 <SecureElementInit+0x34>)
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	6013      	str	r3, [r2, #0]

    // Initialize data
    memcpy1( ( uint8_t* )SeNvm, ( uint8_t* )&seNvmInit, sizeof( seNvmInit ) );
 800b8de:	4b06      	ldr	r3, [pc, #24]	@ (800b8f8 <SecureElementInit+0x34>)
 800b8e0:	681b      	ldr	r3, [r3, #0]
 800b8e2:	22c0      	movs	r2, #192	@ 0xc0
 800b8e4:	4905      	ldr	r1, [pc, #20]	@ (800b8fc <SecureElementInit+0x38>)
 800b8e6:	4618      	mov	r0, r3
 800b8e8:	f00b f8b9 	bl	8016a5e <memcpy1>
        // Get a DevEUI from MCU unique ID
        seGetUniqueId(SeNvm->DevEui);
    }
#endif /* STATIC_DEVICE_EUI */
#endif /* !SECURE_ELEMENT_PRE_PROVISIONED */
    return SECURE_ELEMENT_SUCCESS;
 800b8ec:	2300      	movs	r3, #0
}
 800b8ee:	4618      	mov	r0, r3
 800b8f0:	3708      	adds	r7, #8
 800b8f2:	46bd      	mov	sp, r7
 800b8f4:	bd80      	pop	{r7, pc}
 800b8f6:	bf00      	nop
 800b8f8:	200004b8 	.word	0x200004b8
 800b8fc:	0801c6c4 	.word	0x0801c6c4

0800b900 <SecureElementGetKeyByID>:
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
SecureElementStatus_t SecureElementGetKeyByID( KeyIdentifier_t keyID, Key_t **keyItem)
#else
SecureElementStatus_t SecureElementGetKeyByID( KeyIdentifier_t keyID, uint8_t* extractable_key )
#endif /* LORAWAN_KMS */
{
 800b900:	b480      	push	{r7}
 800b902:	b085      	sub	sp, #20
 800b904:	af00      	add	r7, sp, #0
 800b906:	4603      	mov	r3, r0
 800b908:	6039      	str	r1, [r7, #0]
 800b90a:	71fb      	strb	r3, [r7, #7]
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
#if (defined (KEY_EXTRACTABLE) && (KEY_EXTRACTABLE == 1))
    for (uint8_t i = 0; i < NUM_OF_KEYS; i++)
 800b90c:	2300      	movs	r3, #0
 800b90e:	73fb      	strb	r3, [r7, #15]
 800b910:	e01a      	b.n	800b948 <SecureElementGetKeyByID+0x48>
    {
        if (SeNvm->KeyList[i].KeyID == keyID)
 800b912:	4b12      	ldr	r3, [pc, #72]	@ (800b95c <SecureElementGetKeyByID+0x5c>)
 800b914:	6819      	ldr	r1, [r3, #0]
 800b916:	7bfa      	ldrb	r2, [r7, #15]
 800b918:	4613      	mov	r3, r2
 800b91a:	011b      	lsls	r3, r3, #4
 800b91c:	4413      	add	r3, r2
 800b91e:	440b      	add	r3, r1
 800b920:	3310      	adds	r3, #16
 800b922:	781b      	ldrb	r3, [r3, #0]
 800b924:	79fa      	ldrb	r2, [r7, #7]
 800b926:	429a      	cmp	r2, r3
 800b928:	d10b      	bne.n	800b942 <SecureElementGetKeyByID+0x42>
        {
            *keyItem = &(SeNvm->KeyList[i]);
 800b92a:	4b0c      	ldr	r3, [pc, #48]	@ (800b95c <SecureElementGetKeyByID+0x5c>)
 800b92c:	6819      	ldr	r1, [r3, #0]
 800b92e:	7bfa      	ldrb	r2, [r7, #15]
 800b930:	4613      	mov	r3, r2
 800b932:	011b      	lsls	r3, r3, #4
 800b934:	4413      	add	r3, r2
 800b936:	3310      	adds	r3, #16
 800b938:	18ca      	adds	r2, r1, r3
 800b93a:	683b      	ldr	r3, [r7, #0]
 800b93c:	601a      	str	r2, [r3, #0]
            return SECURE_ELEMENT_SUCCESS;
 800b93e:	2300      	movs	r3, #0
 800b940:	e006      	b.n	800b950 <SecureElementGetKeyByID+0x50>
    for (uint8_t i = 0; i < NUM_OF_KEYS; i++)
 800b942:	7bfb      	ldrb	r3, [r7, #15]
 800b944:	3301      	adds	r3, #1
 800b946:	73fb      	strb	r3, [r7, #15]
 800b948:	7bfb      	ldrb	r3, [r7, #15]
 800b94a:	2b09      	cmp	r3, #9
 800b94c:	d9e1      	bls.n	800b912 <SecureElementGetKeyByID+0x12>
        }
    }
#endif /* KEY_EXTRACTABLE */
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800b94e:	2303      	movs	r3, #3
        return SECURE_ELEMENT_ERROR;
    }
    return SECURE_ELEMENT_SUCCESS;

#endif /* LORAWAN_KMS == 1 */
}
 800b950:	4618      	mov	r0, r3
 800b952:	3714      	adds	r7, #20
 800b954:	46bd      	mov	sp, r7
 800b956:	bc80      	pop	{r7}
 800b958:	4770      	bx	lr
 800b95a:	bf00      	nop
 800b95c:	200004b8 	.word	0x200004b8

0800b960 <SecureElementPrintKeys>:

SecureElementStatus_t SecureElementPrintKeys( void )
{
 800b960:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b962:	b08b      	sub	sp, #44	@ 0x2c
 800b964:	af08      	add	r7, sp, #32
#if (defined (KEY_EXTRACTABLE) && (KEY_EXTRACTABLE == 1))
    MW_LOG(TS_OFF, VLEVEL_M, "###### OTAA ######\r\n");
 800b966:	4b3f      	ldr	r3, [pc, #252]	@ (800ba64 <SecureElementPrintKeys+0x104>)
 800b968:	2200      	movs	r2, #0
 800b96a:	2100      	movs	r1, #0
 800b96c:	2002      	movs	r0, #2
 800b96e:	f00f fbc5 	bl	801b0fc <UTIL_ADV_TRACE_COND_FSend>
    PrintKey(APP_KEY);
 800b972:	2000      	movs	r0, #0
 800b974:	f7ff fe0c 	bl	800b590 <PrintKey>
    PrintKey(NWK_KEY);
 800b978:	2001      	movs	r0, #1
 800b97a:	f7ff fe09 	bl	800b590 <PrintKey>
    MW_LOG(TS_OFF, VLEVEL_M, "###### ABP  ######\r\n");
 800b97e:	4b3a      	ldr	r3, [pc, #232]	@ (800ba68 <SecureElementPrintKeys+0x108>)
 800b980:	2200      	movs	r2, #0
 800b982:	2100      	movs	r1, #0
 800b984:	2002      	movs	r0, #2
 800b986:	f00f fbb9 	bl	801b0fc <UTIL_ADV_TRACE_COND_FSend>
    PrintKey(APP_S_KEY);
 800b98a:	2003      	movs	r0, #3
 800b98c:	f7ff fe00 	bl	800b590 <PrintKey>
    PrintKey(NWK_S_KEY);
 800b990:	2002      	movs	r0, #2
 800b992:	f7ff fdfd 	bl	800b590 <PrintKey>
#endif /* KEY_EXTRACTABLE */
    MW_LOG(TS_OFF, VLEVEL_M, "###### IDs  ######\r\n");
 800b996:	4b35      	ldr	r3, [pc, #212]	@ (800ba6c <SecureElementPrintKeys+0x10c>)
 800b998:	2200      	movs	r2, #0
 800b99a:	2100      	movs	r1, #0
 800b99c:	2002      	movs	r0, #2
 800b99e:	f00f fbad 	bl	801b0fc <UTIL_ADV_TRACE_COND_FSend>
    MW_LOG(TS_OFF, VLEVEL_M, "###### DevEui:      %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800b9a2:	4b33      	ldr	r3, [pc, #204]	@ (800ba70 <SecureElementPrintKeys+0x110>)
 800b9a4:	681b      	ldr	r3, [r3, #0]
 800b9a6:	781b      	ldrb	r3, [r3, #0]
 800b9a8:	461a      	mov	r2, r3
 800b9aa:	4b31      	ldr	r3, [pc, #196]	@ (800ba70 <SecureElementPrintKeys+0x110>)
 800b9ac:	681b      	ldr	r3, [r3, #0]
 800b9ae:	785b      	ldrb	r3, [r3, #1]
 800b9b0:	4619      	mov	r1, r3
 800b9b2:	4b2f      	ldr	r3, [pc, #188]	@ (800ba70 <SecureElementPrintKeys+0x110>)
 800b9b4:	681b      	ldr	r3, [r3, #0]
 800b9b6:	789b      	ldrb	r3, [r3, #2]
 800b9b8:	4618      	mov	r0, r3
 800b9ba:	4b2d      	ldr	r3, [pc, #180]	@ (800ba70 <SecureElementPrintKeys+0x110>)
 800b9bc:	681b      	ldr	r3, [r3, #0]
 800b9be:	78db      	ldrb	r3, [r3, #3]
 800b9c0:	461c      	mov	r4, r3
 800b9c2:	4b2b      	ldr	r3, [pc, #172]	@ (800ba70 <SecureElementPrintKeys+0x110>)
 800b9c4:	681b      	ldr	r3, [r3, #0]
 800b9c6:	791b      	ldrb	r3, [r3, #4]
 800b9c8:	461d      	mov	r5, r3
 800b9ca:	4b29      	ldr	r3, [pc, #164]	@ (800ba70 <SecureElementPrintKeys+0x110>)
 800b9cc:	681b      	ldr	r3, [r3, #0]
 800b9ce:	795b      	ldrb	r3, [r3, #5]
 800b9d0:	461e      	mov	r6, r3
 800b9d2:	4b27      	ldr	r3, [pc, #156]	@ (800ba70 <SecureElementPrintKeys+0x110>)
 800b9d4:	681b      	ldr	r3, [r3, #0]
 800b9d6:	799b      	ldrb	r3, [r3, #6]
 800b9d8:	607b      	str	r3, [r7, #4]
 800b9da:	4b25      	ldr	r3, [pc, #148]	@ (800ba70 <SecureElementPrintKeys+0x110>)
 800b9dc:	681b      	ldr	r3, [r3, #0]
 800b9de:	79db      	ldrb	r3, [r3, #7]
 800b9e0:	9307      	str	r3, [sp, #28]
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	9306      	str	r3, [sp, #24]
 800b9e6:	9605      	str	r6, [sp, #20]
 800b9e8:	9504      	str	r5, [sp, #16]
 800b9ea:	9403      	str	r4, [sp, #12]
 800b9ec:	9002      	str	r0, [sp, #8]
 800b9ee:	9101      	str	r1, [sp, #4]
 800b9f0:	9200      	str	r2, [sp, #0]
 800b9f2:	4b20      	ldr	r3, [pc, #128]	@ (800ba74 <SecureElementPrintKeys+0x114>)
 800b9f4:	2200      	movs	r2, #0
 800b9f6:	2100      	movs	r1, #0
 800b9f8:	2002      	movs	r0, #2
 800b9fa:	f00f fb7f 	bl	801b0fc <UTIL_ADV_TRACE_COND_FSend>
           HEX8(SeNvm->DevEui));
    MW_LOG(TS_OFF, VLEVEL_M, "###### AppEui:      %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800b9fe:	4b1c      	ldr	r3, [pc, #112]	@ (800ba70 <SecureElementPrintKeys+0x110>)
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	7a1b      	ldrb	r3, [r3, #8]
 800ba04:	461a      	mov	r2, r3
 800ba06:	4b1a      	ldr	r3, [pc, #104]	@ (800ba70 <SecureElementPrintKeys+0x110>)
 800ba08:	681b      	ldr	r3, [r3, #0]
 800ba0a:	7a5b      	ldrb	r3, [r3, #9]
 800ba0c:	4619      	mov	r1, r3
 800ba0e:	4b18      	ldr	r3, [pc, #96]	@ (800ba70 <SecureElementPrintKeys+0x110>)
 800ba10:	681b      	ldr	r3, [r3, #0]
 800ba12:	7a9b      	ldrb	r3, [r3, #10]
 800ba14:	4618      	mov	r0, r3
 800ba16:	4b16      	ldr	r3, [pc, #88]	@ (800ba70 <SecureElementPrintKeys+0x110>)
 800ba18:	681b      	ldr	r3, [r3, #0]
 800ba1a:	7adb      	ldrb	r3, [r3, #11]
 800ba1c:	461c      	mov	r4, r3
 800ba1e:	4b14      	ldr	r3, [pc, #80]	@ (800ba70 <SecureElementPrintKeys+0x110>)
 800ba20:	681b      	ldr	r3, [r3, #0]
 800ba22:	7b1b      	ldrb	r3, [r3, #12]
 800ba24:	461d      	mov	r5, r3
 800ba26:	4b12      	ldr	r3, [pc, #72]	@ (800ba70 <SecureElementPrintKeys+0x110>)
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	7b5b      	ldrb	r3, [r3, #13]
 800ba2c:	461e      	mov	r6, r3
 800ba2e:	4b10      	ldr	r3, [pc, #64]	@ (800ba70 <SecureElementPrintKeys+0x110>)
 800ba30:	681b      	ldr	r3, [r3, #0]
 800ba32:	7b9b      	ldrb	r3, [r3, #14]
 800ba34:	607b      	str	r3, [r7, #4]
 800ba36:	4b0e      	ldr	r3, [pc, #56]	@ (800ba70 <SecureElementPrintKeys+0x110>)
 800ba38:	681b      	ldr	r3, [r3, #0]
 800ba3a:	7bdb      	ldrb	r3, [r3, #15]
 800ba3c:	9307      	str	r3, [sp, #28]
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	9306      	str	r3, [sp, #24]
 800ba42:	9605      	str	r6, [sp, #20]
 800ba44:	9504      	str	r5, [sp, #16]
 800ba46:	9403      	str	r4, [sp, #12]
 800ba48:	9002      	str	r0, [sp, #8]
 800ba4a:	9101      	str	r1, [sp, #4]
 800ba4c:	9200      	str	r2, [sp, #0]
 800ba4e:	4b0a      	ldr	r3, [pc, #40]	@ (800ba78 <SecureElementPrintKeys+0x118>)
 800ba50:	2200      	movs	r2, #0
 800ba52:	2100      	movs	r1, #0
 800ba54:	2002      	movs	r0, #2
 800ba56:	f00f fb51 	bl	801b0fc <UTIL_ADV_TRACE_COND_FSend>
           HEX8(SeNvm->JoinEui));
    return SECURE_ELEMENT_SUCCESS;
 800ba5a:	2300      	movs	r3, #0
}
 800ba5c:	4618      	mov	r0, r3
 800ba5e:	370c      	adds	r7, #12
 800ba60:	46bd      	mov	sp, r7
 800ba62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ba64:	0801bd38 	.word	0x0801bd38
 800ba68:	0801bd50 	.word	0x0801bd50
 800ba6c:	0801bd68 	.word	0x0801bd68
 800ba70:	200004b8 	.word	0x200004b8
 800ba74:	0801bd80 	.word	0x0801bd80
 800ba78:	0801bdc0 	.word	0x0801bdc0

0800ba7c <SecureElementPrintSessionKeys>:
    
SecureElementStatus_t SecureElementPrintSessionKeys( void )
{
 800ba7c:	b580      	push	{r7, lr}
 800ba7e:	af00      	add	r7, sp, #0
#if (defined (KEY_EXTRACTABLE) && (KEY_EXTRACTABLE == 1))
    PrintKey(MC_ROOT_KEY);
 800ba80:	2004      	movs	r0, #4
 800ba82:	f7ff fd85 	bl	800b590 <PrintKey>
    PrintKey(MC_KE_KEY);
 800ba86:	207f      	movs	r0, #127	@ 0x7f
 800ba88:	f7ff fd82 	bl	800b590 <PrintKey>
#if( USE_LRWAN_1_1_X_CRYPTO == 1 )
    PrintKey(F_NWK_S_INT_KEY);
    PrintKey(S_NWK_S_INT_KEY);
    PrintKey(NWK_S_ENC_KEY);
#else
    PrintKey(NWK_S_KEY);
 800ba8c:	2002      	movs	r0, #2
 800ba8e:	f7ff fd7f 	bl	800b590 <PrintKey>
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */
    PrintKey(APP_S_KEY);
 800ba92:	2003      	movs	r0, #3
 800ba94:	f7ff fd7c 	bl	800b590 <PrintKey>
#endif /* KEY_EXTRACTABLE */
    return SECURE_ELEMENT_SUCCESS;
 800ba98:	2300      	movs	r3, #0
}
 800ba9a:	4618      	mov	r0, r3
 800ba9c:	bd80      	pop	{r7, pc}
	...

0800baa0 <SecureElementSetKey>:
#endif /* LORAWAN_KMS */
}
/* ST_WORKAROUND_END */

SecureElementStatus_t SecureElementSetKey( KeyIdentifier_t keyID, uint8_t* key )
{
 800baa0:	b580      	push	{r7, lr}
 800baa2:	b088      	sub	sp, #32
 800baa4:	af00      	add	r7, sp, #0
 800baa6:	4603      	mov	r3, r0
 800baa8:	6039      	str	r1, [r7, #0]
 800baaa:	71fb      	strb	r3, [r7, #7]
    if( key == NULL )
 800baac:	683b      	ldr	r3, [r7, #0]
 800baae:	2b00      	cmp	r3, #0
 800bab0:	d101      	bne.n	800bab6 <SecureElementSetKey+0x16>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800bab2:	2302      	movs	r3, #2
 800bab4:	e04c      	b.n	800bb50 <SecureElementSetKey+0xb0>
    }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800bab6:	2300      	movs	r3, #0
 800bab8:	77fb      	strb	r3, [r7, #31]
 800baba:	e045      	b.n	800bb48 <SecureElementSetKey+0xa8>
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 800babc:	4b26      	ldr	r3, [pc, #152]	@ (800bb58 <SecureElementSetKey+0xb8>)
 800babe:	6819      	ldr	r1, [r3, #0]
 800bac0:	7ffa      	ldrb	r2, [r7, #31]
 800bac2:	4613      	mov	r3, r2
 800bac4:	011b      	lsls	r3, r3, #4
 800bac6:	4413      	add	r3, r2
 800bac8:	440b      	add	r3, r1
 800baca:	3310      	adds	r3, #16
 800bacc:	781b      	ldrb	r3, [r3, #0]
 800bace:	79fa      	ldrb	r2, [r7, #7]
 800bad0:	429a      	cmp	r2, r3
 800bad2:	d136      	bne.n	800bb42 <SecureElementSetKey+0xa2>
        {
            /* ST_WORKAROUND_BEGIN: reduced LORAMAC_MAX_MC_CTX */
#if ( LORAMAC_MAX_MC_CTX == 1 )
            if ( keyID == MC_KEY_0 )
 800bad4:	79fb      	ldrb	r3, [r7, #7]
 800bad6:	2b80      	cmp	r3, #128	@ 0x80
 800bad8:	d123      	bne.n	800bb22 <SecureElementSetKey+0x82>
#else /* LORAMAC_MAX_MC_CTX > 1 */
            if( ( keyID == MC_KEY_0 ) || ( keyID == MC_KEY_1 ) || ( keyID == MC_KEY_2 ) || ( keyID == MC_KEY_3 ) )
#endif /* LORAMAC_MAX_MC_CTX */
            /* ST_WORKAROUND_END */
            {  // Decrypt the key if its a Mckey
                SecureElementStatus_t retval           = SECURE_ELEMENT_ERROR;
 800bada:	2306      	movs	r3, #6
 800badc:	77bb      	strb	r3, [r7, #30]
                uint8_t               decryptedKey[16] = { 0 };
 800bade:	2300      	movs	r3, #0
 800bae0:	60fb      	str	r3, [r7, #12]
 800bae2:	f107 0310 	add.w	r3, r7, #16
 800bae6:	2200      	movs	r2, #0
 800bae8:	601a      	str	r2, [r3, #0]
 800baea:	605a      	str	r2, [r3, #4]
 800baec:	609a      	str	r2, [r3, #8]

                retval = SecureElementAesEncrypt( key, 16, MC_KE_KEY, decryptedKey );
 800baee:	f107 030c 	add.w	r3, r7, #12
 800baf2:	227f      	movs	r2, #127	@ 0x7f
 800baf4:	2110      	movs	r1, #16
 800baf6:	6838      	ldr	r0, [r7, #0]
 800baf8:	f000 f87d 	bl	800bbf6 <SecureElementAesEncrypt>
 800bafc:	4603      	mov	r3, r0
 800bafe:	77bb      	strb	r3, [r7, #30]

                memcpy1( SeNvm->KeyList[i].KeyValue, decryptedKey, SE_KEY_SIZE );
 800bb00:	4b15      	ldr	r3, [pc, #84]	@ (800bb58 <SecureElementSetKey+0xb8>)
 800bb02:	6819      	ldr	r1, [r3, #0]
 800bb04:	7ffa      	ldrb	r2, [r7, #31]
 800bb06:	4613      	mov	r3, r2
 800bb08:	011b      	lsls	r3, r3, #4
 800bb0a:	4413      	add	r3, r2
 800bb0c:	3310      	adds	r3, #16
 800bb0e:	440b      	add	r3, r1
 800bb10:	3301      	adds	r3, #1
 800bb12:	f107 010c 	add.w	r1, r7, #12
 800bb16:	2210      	movs	r2, #16
 800bb18:	4618      	mov	r0, r3
 800bb1a:	f00a ffa0 	bl	8016a5e <memcpy1>
                return retval;
 800bb1e:	7fbb      	ldrb	r3, [r7, #30]
 800bb20:	e016      	b.n	800bb50 <SecureElementSetKey+0xb0>
            }
            else
            {
                memcpy1( SeNvm->KeyList[i].KeyValue, key, SE_KEY_SIZE );
 800bb22:	4b0d      	ldr	r3, [pc, #52]	@ (800bb58 <SecureElementSetKey+0xb8>)
 800bb24:	6819      	ldr	r1, [r3, #0]
 800bb26:	7ffa      	ldrb	r2, [r7, #31]
 800bb28:	4613      	mov	r3, r2
 800bb2a:	011b      	lsls	r3, r3, #4
 800bb2c:	4413      	add	r3, r2
 800bb2e:	3310      	adds	r3, #16
 800bb30:	440b      	add	r3, r1
 800bb32:	3301      	adds	r3, #1
 800bb34:	2210      	movs	r2, #16
 800bb36:	6839      	ldr	r1, [r7, #0]
 800bb38:	4618      	mov	r0, r3
 800bb3a:	f00a ff90 	bl	8016a5e <memcpy1>
                return SECURE_ELEMENT_SUCCESS;
 800bb3e:	2300      	movs	r3, #0
 800bb40:	e006      	b.n	800bb50 <SecureElementSetKey+0xb0>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800bb42:	7ffb      	ldrb	r3, [r7, #31]
 800bb44:	3301      	adds	r3, #1
 800bb46:	77fb      	strb	r3, [r7, #31]
 800bb48:	7ffb      	ldrb	r3, [r7, #31]
 800bb4a:	2b09      	cmp	r3, #9
 800bb4c:	d9b6      	bls.n	800babc <SecureElementSetKey+0x1c>
            }
        }
    }

    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800bb4e:	2303      	movs	r3, #3
    {
        retval = SECURE_ELEMENT_ERROR;
    }
    return retval;
#endif /* LORAWAN_KMS */
}
 800bb50:	4618      	mov	r0, r3
 800bb52:	3720      	adds	r7, #32
 800bb54:	46bd      	mov	sp, r7
 800bb56:	bd80      	pop	{r7, pc}
 800bb58:	200004b8 	.word	0x200004b8

0800bb5c <SecureElementComputeAesCmac>:

SecureElementStatus_t SecureElementComputeAesCmac( uint8_t* micBxBuffer, uint8_t* buffer, uint16_t size,
                                                   KeyIdentifier_t keyID, uint32_t* cmac )
{
 800bb5c:	b580      	push	{r7, lr}
 800bb5e:	b086      	sub	sp, #24
 800bb60:	af02      	add	r7, sp, #8
 800bb62:	60f8      	str	r0, [r7, #12]
 800bb64:	60b9      	str	r1, [r7, #8]
 800bb66:	4611      	mov	r1, r2
 800bb68:	461a      	mov	r2, r3
 800bb6a:	460b      	mov	r3, r1
 800bb6c:	80fb      	strh	r3, [r7, #6]
 800bb6e:	4613      	mov	r3, r2
 800bb70:	717b      	strb	r3, [r7, #5]
    if( keyID >= LORAMAC_CRYPTO_MULTICAST_KEYS )
 800bb72:	797b      	ldrb	r3, [r7, #5]
 800bb74:	2b7e      	cmp	r3, #126	@ 0x7e
 800bb76:	d901      	bls.n	800bb7c <SecureElementComputeAesCmac+0x20>
    {
        // Never accept multicast key identifier for cmac computation
        return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800bb78:	2303      	movs	r3, #3
 800bb7a:	e009      	b.n	800bb90 <SecureElementComputeAesCmac+0x34>
    }

    return ComputeCmac( micBxBuffer, buffer, size, keyID, cmac );
 800bb7c:	7979      	ldrb	r1, [r7, #5]
 800bb7e:	88fa      	ldrh	r2, [r7, #6]
 800bb80:	69bb      	ldr	r3, [r7, #24]
 800bb82:	9300      	str	r3, [sp, #0]
 800bb84:	460b      	mov	r3, r1
 800bb86:	68b9      	ldr	r1, [r7, #8]
 800bb88:	68f8      	ldr	r0, [r7, #12]
 800bb8a:	f7ff fe13 	bl	800b7b4 <ComputeCmac>
 800bb8e:	4603      	mov	r3, r0
}
 800bb90:	4618      	mov	r0, r3
 800bb92:	3710      	adds	r7, #16
 800bb94:	46bd      	mov	sp, r7
 800bb96:	bd80      	pop	{r7, pc}

0800bb98 <SecureElementVerifyAesCmac>:

SecureElementStatus_t SecureElementVerifyAesCmac( uint8_t* buffer, uint16_t size, uint32_t expectedCmac,
                                                  KeyIdentifier_t keyID )
{
 800bb98:	b580      	push	{r7, lr}
 800bb9a:	b088      	sub	sp, #32
 800bb9c:	af02      	add	r7, sp, #8
 800bb9e:	60f8      	str	r0, [r7, #12]
 800bba0:	607a      	str	r2, [r7, #4]
 800bba2:	461a      	mov	r2, r3
 800bba4:	460b      	mov	r3, r1
 800bba6:	817b      	strh	r3, [r7, #10]
 800bba8:	4613      	mov	r3, r2
 800bbaa:	727b      	strb	r3, [r7, #9]
    if( buffer == NULL )
 800bbac:	68fb      	ldr	r3, [r7, #12]
 800bbae:	2b00      	cmp	r3, #0
 800bbb0:	d101      	bne.n	800bbb6 <SecureElementVerifyAesCmac+0x1e>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800bbb2:	2302      	movs	r3, #2
 800bbb4:	e01b      	b.n	800bbee <SecureElementVerifyAesCmac+0x56>
    }

    SecureElementStatus_t retval   = SECURE_ELEMENT_ERROR;
 800bbb6:	2306      	movs	r3, #6
 800bbb8:	75fb      	strb	r3, [r7, #23]
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    uint32_t              compCmac = 0;
 800bbba:	2300      	movs	r3, #0
 800bbbc:	613b      	str	r3, [r7, #16]
    retval                         = ComputeCmac( NULL, buffer, size, keyID, &compCmac );
 800bbbe:	7a79      	ldrb	r1, [r7, #9]
 800bbc0:	897a      	ldrh	r2, [r7, #10]
 800bbc2:	f107 0310 	add.w	r3, r7, #16
 800bbc6:	9300      	str	r3, [sp, #0]
 800bbc8:	460b      	mov	r3, r1
 800bbca:	68f9      	ldr	r1, [r7, #12]
 800bbcc:	2000      	movs	r0, #0
 800bbce:	f7ff fdf1 	bl	800b7b4 <ComputeCmac>
 800bbd2:	4603      	mov	r3, r0
 800bbd4:	75fb      	strb	r3, [r7, #23]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800bbd6:	7dfb      	ldrb	r3, [r7, #23]
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	d001      	beq.n	800bbe0 <SecureElementVerifyAesCmac+0x48>
    {
        return retval;
 800bbdc:	7dfb      	ldrb	r3, [r7, #23]
 800bbde:	e006      	b.n	800bbee <SecureElementVerifyAesCmac+0x56>
    }

    if( expectedCmac != compCmac )
 800bbe0:	693b      	ldr	r3, [r7, #16]
 800bbe2:	687a      	ldr	r2, [r7, #4]
 800bbe4:	429a      	cmp	r2, r3
 800bbe6:	d001      	beq.n	800bbec <SecureElementVerifyAesCmac+0x54>
    {
        retval = SECURE_ELEMENT_FAIL_CMAC;
 800bbe8:	2301      	movs	r3, #1
 800bbea:	75fb      	strb	r3, [r7, #23]
        retval = SECURE_ELEMENT_ERROR;
    }

#endif /* LORAWAN_KMS */

    return retval;
 800bbec:	7dfb      	ldrb	r3, [r7, #23]
}
 800bbee:	4618      	mov	r0, r3
 800bbf0:	3718      	adds	r7, #24
 800bbf2:	46bd      	mov	sp, r7
 800bbf4:	bd80      	pop	{r7, pc}

0800bbf6 <SecureElementAesEncrypt>:

SecureElementStatus_t SecureElementAesEncrypt( uint8_t* buffer, uint16_t size, KeyIdentifier_t keyID,
                                               uint8_t* encBuffer )
{
 800bbf6:	b580      	push	{r7, lr}
 800bbf8:	b0c2      	sub	sp, #264	@ 0x108
 800bbfa:	af00      	add	r7, sp, #0
 800bbfc:	60f8      	str	r0, [r7, #12]
 800bbfe:	4608      	mov	r0, r1
 800bc00:	4611      	mov	r1, r2
 800bc02:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 800bc06:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 800bc0a:	6013      	str	r3, [r2, #0]
 800bc0c:	4603      	mov	r3, r0
 800bc0e:	817b      	strh	r3, [r7, #10]
 800bc10:	460b      	mov	r3, r1
 800bc12:	727b      	strb	r3, [r7, #9]
    if( buffer == NULL || encBuffer == NULL )
 800bc14:	68fb      	ldr	r3, [r7, #12]
 800bc16:	2b00      	cmp	r3, #0
 800bc18:	d006      	beq.n	800bc28 <SecureElementAesEncrypt+0x32>
 800bc1a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bc1e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800bc22:	681b      	ldr	r3, [r3, #0]
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	d101      	bne.n	800bc2c <SecureElementAesEncrypt+0x36>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800bc28:	2302      	movs	r3, #2
 800bc2a:	e046      	b.n	800bcba <SecureElementAesEncrypt+0xc4>
    }

    // Check if the size is divisible by 16,
    if( ( size % 16 ) != 0 )
 800bc2c:	897b      	ldrh	r3, [r7, #10]
 800bc2e:	f003 030f 	and.w	r3, r3, #15
 800bc32:	b29b      	uxth	r3, r3
 800bc34:	2b00      	cmp	r3, #0
 800bc36:	d001      	beq.n	800bc3c <SecureElementAesEncrypt+0x46>
    {
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 800bc38:	2305      	movs	r3, #5
 800bc3a:	e03e      	b.n	800bcba <SecureElementAesEncrypt+0xc4>
    }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    lorawan_aes_context aesContext;
    memset1( aesContext.ksch, '\0', 240 );
 800bc3c:	f107 0314 	add.w	r3, r7, #20
 800bc40:	22f0      	movs	r2, #240	@ 0xf0
 800bc42:	2100      	movs	r1, #0
 800bc44:	4618      	mov	r0, r3
 800bc46:	f00a ff45 	bl	8016ad4 <memset1>

    Key_t*                pItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &pItem );
 800bc4a:	f107 0210 	add.w	r2, r7, #16
 800bc4e:	7a7b      	ldrb	r3, [r7, #9]
 800bc50:	4611      	mov	r1, r2
 800bc52:	4618      	mov	r0, r3
 800bc54:	f7ff fd7e 	bl	800b754 <GetKeyByID>
 800bc58:	4603      	mov	r3, r0
 800bc5a:	f887 3106 	strb.w	r3, [r7, #262]	@ 0x106

    if( retval == SECURE_ELEMENT_SUCCESS )
 800bc5e:	f897 3106 	ldrb.w	r3, [r7, #262]	@ 0x106
 800bc62:	2b00      	cmp	r3, #0
 800bc64:	d127      	bne.n	800bcb6 <SecureElementAesEncrypt+0xc0>
    {
        lorawan_aes_set_key(pItem->KeyValue, 16, &aesContext);
 800bc66:	693b      	ldr	r3, [r7, #16]
 800bc68:	3301      	adds	r3, #1
 800bc6a:	f107 0214 	add.w	r2, r7, #20
 800bc6e:	2110      	movs	r1, #16
 800bc70:	4618      	mov	r0, r3
 800bc72:	f7ff fb65 	bl	800b340 <lorawan_aes_set_key>

        uint8_t block = 0;
 800bc76:	2300      	movs	r3, #0
 800bc78:	f887 3107 	strb.w	r3, [r7, #263]	@ 0x107

        while( size != 0 )
 800bc7c:	e018      	b.n	800bcb0 <SecureElementAesEncrypt+0xba>
        {
            lorawan_aes_encrypt(&buffer[block], &encBuffer[block], &aesContext);
 800bc7e:	f897 3107 	ldrb.w	r3, [r7, #263]	@ 0x107
 800bc82:	68fa      	ldr	r2, [r7, #12]
 800bc84:	18d0      	adds	r0, r2, r3
 800bc86:	f897 3107 	ldrb.w	r3, [r7, #263]	@ 0x107
 800bc8a:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 800bc8e:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 800bc92:	6812      	ldr	r2, [r2, #0]
 800bc94:	4413      	add	r3, r2
 800bc96:	f107 0214 	add.w	r2, r7, #20
 800bc9a:	4619      	mov	r1, r3
 800bc9c:	f7ff fc2e 	bl	800b4fc <lorawan_aes_encrypt>
            block = block + 16;
 800bca0:	f897 3107 	ldrb.w	r3, [r7, #263]	@ 0x107
 800bca4:	3310      	adds	r3, #16
 800bca6:	f887 3107 	strb.w	r3, [r7, #263]	@ 0x107
            size  = size - 16;
 800bcaa:	897b      	ldrh	r3, [r7, #10]
 800bcac:	3b10      	subs	r3, #16
 800bcae:	817b      	strh	r3, [r7, #10]
        while( size != 0 )
 800bcb0:	897b      	ldrh	r3, [r7, #10]
 800bcb2:	2b00      	cmp	r3, #0
 800bcb4:	d1e3      	bne.n	800bc7e <SecureElementAesEncrypt+0x88>
    {
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */

    return retval;
 800bcb6:	f897 3106 	ldrb.w	r3, [r7, #262]	@ 0x106
}
 800bcba:	4618      	mov	r0, r3
 800bcbc:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 800bcc0:	46bd      	mov	sp, r7
 800bcc2:	bd80      	pop	{r7, pc}

0800bcc4 <SecureElementDeriveAndStoreKey>:

SecureElementStatus_t SecureElementDeriveAndStoreKey( uint8_t* input, KeyIdentifier_t rootKeyID,
                                                      KeyIdentifier_t targetKeyID )
{
 800bcc4:	b580      	push	{r7, lr}
 800bcc6:	b088      	sub	sp, #32
 800bcc8:	af00      	add	r7, sp, #0
 800bcca:	6078      	str	r0, [r7, #4]
 800bccc:	460b      	mov	r3, r1
 800bcce:	70fb      	strb	r3, [r7, #3]
 800bcd0:	4613      	mov	r3, r2
 800bcd2:	70bb      	strb	r3, [r7, #2]
    if( input == NULL )
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	2b00      	cmp	r3, #0
 800bcd8:	d101      	bne.n	800bcde <SecureElementDeriveAndStoreKey+0x1a>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800bcda:	2302      	movs	r3, #2
 800bcdc:	e02e      	b.n	800bd3c <SecureElementDeriveAndStoreKey+0x78>
    }

    SecureElementStatus_t retval  = SECURE_ELEMENT_ERROR;
 800bcde:	2306      	movs	r3, #6
 800bce0:	77fb      	strb	r3, [r7, #31]

    // In case of MC_KE_KEY, only McRootKey can be used as root key
    if( targetKeyID == MC_KE_KEY )
 800bce2:	78bb      	ldrb	r3, [r7, #2]
 800bce4:	2b7f      	cmp	r3, #127	@ 0x7f
 800bce6:	d104      	bne.n	800bcf2 <SecureElementDeriveAndStoreKey+0x2e>
    {
        if( rootKeyID != MC_ROOT_KEY )
 800bce8:	78fb      	ldrb	r3, [r7, #3]
 800bcea:	2b04      	cmp	r3, #4
 800bcec:	d001      	beq.n	800bcf2 <SecureElementDeriveAndStoreKey+0x2e>
        {
            return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800bcee:	2303      	movs	r3, #3
 800bcf0:	e024      	b.n	800bd3c <SecureElementDeriveAndStoreKey+0x78>
        }
    }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    uint8_t key[16] = { 0 };
 800bcf2:	2300      	movs	r3, #0
 800bcf4:	60fb      	str	r3, [r7, #12]
 800bcf6:	f107 0310 	add.w	r3, r7, #16
 800bcfa:	2200      	movs	r2, #0
 800bcfc:	601a      	str	r2, [r3, #0]
 800bcfe:	605a      	str	r2, [r3, #4]
 800bd00:	609a      	str	r2, [r3, #8]
    // Derive key
    retval = SecureElementAesEncrypt( input, 16, rootKeyID, key );
 800bd02:	f107 030c 	add.w	r3, r7, #12
 800bd06:	78fa      	ldrb	r2, [r7, #3]
 800bd08:	2110      	movs	r1, #16
 800bd0a:	6878      	ldr	r0, [r7, #4]
 800bd0c:	f7ff ff73 	bl	800bbf6 <SecureElementAesEncrypt>
 800bd10:	4603      	mov	r3, r0
 800bd12:	77fb      	strb	r3, [r7, #31]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800bd14:	7ffb      	ldrb	r3, [r7, #31]
 800bd16:	2b00      	cmp	r3, #0
 800bd18:	d001      	beq.n	800bd1e <SecureElementDeriveAndStoreKey+0x5a>
    {
        return retval;
 800bd1a:	7ffb      	ldrb	r3, [r7, #31]
 800bd1c:	e00e      	b.n	800bd3c <SecureElementDeriveAndStoreKey+0x78>
    }

    // Store key
    retval = SecureElementSetKey( targetKeyID, key );
 800bd1e:	f107 020c 	add.w	r2, r7, #12
 800bd22:	78bb      	ldrb	r3, [r7, #2]
 800bd24:	4611      	mov	r1, r2
 800bd26:	4618      	mov	r0, r3
 800bd28:	f7ff feba 	bl	800baa0 <SecureElementSetKey>
 800bd2c:	4603      	mov	r3, r0
 800bd2e:	77fb      	strb	r3, [r7, #31]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800bd30:	7ffb      	ldrb	r3, [r7, #31]
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	d001      	beq.n	800bd3a <SecureElementDeriveAndStoreKey+0x76>
    {
        return retval;
 800bd36:	7ffb      	ldrb	r3, [r7, #31]
 800bd38:	e000      	b.n	800bd3c <SecureElementDeriveAndStoreKey+0x78>
    }

    return SECURE_ELEMENT_SUCCESS;
 800bd3a:	2300      	movs	r3, #0
    {
        retval = SECURE_ELEMENT_ERROR;
    }
    return retval;
#endif /* LORAWAN_KMS */
}
 800bd3c:	4618      	mov	r0, r3
 800bd3e:	3720      	adds	r7, #32
 800bd40:	46bd      	mov	sp, r7
 800bd42:	bd80      	pop	{r7, pc}

0800bd44 <SecureElementProcessJoinAccept>:

SecureElementStatus_t SecureElementProcessJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t* joinEui,
                                                      uint16_t devNonce, uint8_t* encJoinAccept,
                                                      uint8_t encJoinAcceptSize, uint8_t* decJoinAccept,
                                                      uint8_t* versionMinor )
{
 800bd44:	b580      	push	{r7, lr}
 800bd46:	b086      	sub	sp, #24
 800bd48:	af00      	add	r7, sp, #0
 800bd4a:	60b9      	str	r1, [r7, #8]
 800bd4c:	607b      	str	r3, [r7, #4]
 800bd4e:	4603      	mov	r3, r0
 800bd50:	73fb      	strb	r3, [r7, #15]
 800bd52:	4613      	mov	r3, r2
 800bd54:	81bb      	strh	r3, [r7, #12]
    if( ( encJoinAccept == NULL ) || ( decJoinAccept == NULL ) || ( versionMinor == NULL ) )
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	d005      	beq.n	800bd68 <SecureElementProcessJoinAccept+0x24>
 800bd5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd5e:	2b00      	cmp	r3, #0
 800bd60:	d002      	beq.n	800bd68 <SecureElementProcessJoinAccept+0x24>
 800bd62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd64:	2b00      	cmp	r3, #0
 800bd66:	d101      	bne.n	800bd6c <SecureElementProcessJoinAccept+0x28>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800bd68:	2302      	movs	r3, #2
 800bd6a:	e064      	b.n	800be36 <SecureElementProcessJoinAccept+0xf2>
    }

    // Check that frame size isn't bigger than a JoinAccept with CFList size
    if( encJoinAcceptSize > LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE )
 800bd6c:	f897 3020 	ldrb.w	r3, [r7, #32]
 800bd70:	2b21      	cmp	r3, #33	@ 0x21
 800bd72:	d901      	bls.n	800bd78 <SecureElementProcessJoinAccept+0x34>
    {
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 800bd74:	2305      	movs	r3, #5
 800bd76:	e05e      	b.n	800be36 <SecureElementProcessJoinAccept+0xf2>
    }

    // Determine decryption key
    KeyIdentifier_t encKeyID = NWK_KEY;
 800bd78:	2301      	movs	r3, #1
 800bd7a:	75fb      	strb	r3, [r7, #23]
    {
        encKeyID = J_S_ENC_KEY;
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

    memcpy1( decJoinAccept, encJoinAccept, encJoinAcceptSize );
 800bd7c:	f897 3020 	ldrb.w	r3, [r7, #32]
 800bd80:	b29b      	uxth	r3, r3
 800bd82:	461a      	mov	r2, r3
 800bd84:	6879      	ldr	r1, [r7, #4]
 800bd86:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800bd88:	f00a fe69 	bl	8016a5e <memcpy1>

    // Decrypt JoinAccept, skip MHDR
    if( SecureElementAesEncrypt( encJoinAccept + LORAMAC_MHDR_FIELD_SIZE, encJoinAcceptSize - LORAMAC_MHDR_FIELD_SIZE,
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	1c58      	adds	r0, r3, #1
 800bd90:	f897 3020 	ldrb.w	r3, [r7, #32]
 800bd94:	b29b      	uxth	r3, r3
 800bd96:	3b01      	subs	r3, #1
 800bd98:	b299      	uxth	r1, r3
 800bd9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd9c:	3301      	adds	r3, #1
 800bd9e:	7dfa      	ldrb	r2, [r7, #23]
 800bda0:	f7ff ff29 	bl	800bbf6 <SecureElementAesEncrypt>
 800bda4:	4603      	mov	r3, r0
 800bda6:	2b00      	cmp	r3, #0
 800bda8:	d001      	beq.n	800bdae <SecureElementProcessJoinAccept+0x6a>
                                 encKeyID, decJoinAccept + LORAMAC_MHDR_FIELD_SIZE ) != SECURE_ELEMENT_SUCCESS )
    {
        return SECURE_ELEMENT_FAIL_ENCRYPT;
 800bdaa:	2307      	movs	r3, #7
 800bdac:	e043      	b.n	800be36 <SecureElementProcessJoinAccept+0xf2>
    }

    *versionMinor = ( ( decJoinAccept[11] & 0x80 ) == 0x80 ) ? 1 : 0;
 800bdae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bdb0:	330b      	adds	r3, #11
 800bdb2:	781b      	ldrb	r3, [r3, #0]
 800bdb4:	09db      	lsrs	r3, r3, #7
 800bdb6:	b2da      	uxtb	r2, r3
 800bdb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bdba:	701a      	strb	r2, [r3, #0]

    uint32_t mic = 0;
 800bdbc:	2300      	movs	r3, #0
 800bdbe:	613b      	str	r3, [r7, #16]

    mic = ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE] << 0 );
 800bdc0:	f897 3020 	ldrb.w	r3, [r7, #32]
 800bdc4:	3b04      	subs	r3, #4
 800bdc6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bdc8:	4413      	add	r3, r2
 800bdca:	781b      	ldrb	r3, [r3, #0]
 800bdcc:	613b      	str	r3, [r7, #16]
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 1] << 8 );
 800bdce:	f897 3020 	ldrb.w	r3, [r7, #32]
 800bdd2:	3b03      	subs	r3, #3
 800bdd4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bdd6:	4413      	add	r3, r2
 800bdd8:	781b      	ldrb	r3, [r3, #0]
 800bdda:	021b      	lsls	r3, r3, #8
 800bddc:	693a      	ldr	r2, [r7, #16]
 800bdde:	4313      	orrs	r3, r2
 800bde0:	613b      	str	r3, [r7, #16]
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 2] << 16 );
 800bde2:	f897 3020 	ldrb.w	r3, [r7, #32]
 800bde6:	3b02      	subs	r3, #2
 800bde8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bdea:	4413      	add	r3, r2
 800bdec:	781b      	ldrb	r3, [r3, #0]
 800bdee:	041b      	lsls	r3, r3, #16
 800bdf0:	693a      	ldr	r2, [r7, #16]
 800bdf2:	4313      	orrs	r3, r2
 800bdf4:	613b      	str	r3, [r7, #16]
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 3] << 24 );
 800bdf6:	f897 3020 	ldrb.w	r3, [r7, #32]
 800bdfa:	3b01      	subs	r3, #1
 800bdfc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bdfe:	4413      	add	r3, r2
 800be00:	781b      	ldrb	r3, [r3, #0]
 800be02:	061b      	lsls	r3, r3, #24
 800be04:	693a      	ldr	r2, [r7, #16]
 800be06:	4313      	orrs	r3, r2
 800be08:	613b      	str	r3, [r7, #16]
    //  - Header buffer to be used for MIC computation
    //        - LoRaWAN 1.0.x : micHeader = [MHDR(1)]
    //        - LoRaWAN 1.1.x : micHeader = [JoinReqType(1), JoinEUI(8), DevNonce(2), MHDR(1)]

    // Verify mic
    if( *versionMinor == 0 )
 800be0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be0c:	781b      	ldrb	r3, [r3, #0]
 800be0e:	2b00      	cmp	r3, #0
 800be10:	d10e      	bne.n	800be30 <SecureElementProcessJoinAccept+0xec>
    {
        // For LoRaWAN 1.0.x
        //   cmac = aes128_cmac(NwkKey, MHDR |  JoinNonce | NetID | DevAddr | DLSettings | RxDelay | CFList |
        //   CFListType)
        if( SecureElementVerifyAesCmac( decJoinAccept, ( encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE ), mic, NWK_KEY ) !=
 800be12:	f897 3020 	ldrb.w	r3, [r7, #32]
 800be16:	b29b      	uxth	r3, r3
 800be18:	3b04      	subs	r3, #4
 800be1a:	b299      	uxth	r1, r3
 800be1c:	2301      	movs	r3, #1
 800be1e:	693a      	ldr	r2, [r7, #16]
 800be20:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800be22:	f7ff feb9 	bl	800bb98 <SecureElementVerifyAesCmac>
 800be26:	4603      	mov	r3, r0
 800be28:	2b00      	cmp	r3, #0
 800be2a:	d003      	beq.n	800be34 <SecureElementProcessJoinAccept+0xf0>
            SECURE_ELEMENT_SUCCESS )
        {
            return SECURE_ELEMENT_FAIL_CMAC;
 800be2c:	2301      	movs	r3, #1
 800be2e:	e002      	b.n	800be36 <SecureElementProcessJoinAccept+0xf2>
        }
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */
    else
    {
        return SECURE_ELEMENT_ERROR_INVALID_LORAWAM_SPEC_VERSION;
 800be30:	2304      	movs	r3, #4
 800be32:	e000      	b.n	800be36 <SecureElementProcessJoinAccept+0xf2>
    }

    return SECURE_ELEMENT_SUCCESS;
 800be34:	2300      	movs	r3, #0
}
 800be36:	4618      	mov	r0, r3
 800be38:	3718      	adds	r7, #24
 800be3a:	46bd      	mov	sp, r7
 800be3c:	bd80      	pop	{r7, pc}
	...

0800be40 <SecureElementSetDevEui>:
    return SECURE_ELEMENT_SUCCESS;
}
#endif /* LORAMAC_VERSION */

SecureElementStatus_t SecureElementSetDevEui( uint8_t* devEui )
{
 800be40:	b580      	push	{r7, lr}
 800be42:	b082      	sub	sp, #8
 800be44:	af00      	add	r7, sp, #0
 800be46:	6078      	str	r0, [r7, #4]
    if( devEui == NULL )
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	2b00      	cmp	r3, #0
 800be4c:	d101      	bne.n	800be52 <SecureElementSetDevEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800be4e:	2302      	movs	r3, #2
 800be50:	e007      	b.n	800be62 <SecureElementSetDevEui+0x22>
    }
    memcpy1( SeNvm->DevEui, devEui, SE_EUI_SIZE );
 800be52:	4b06      	ldr	r3, [pc, #24]	@ (800be6c <SecureElementSetDevEui+0x2c>)
 800be54:	681b      	ldr	r3, [r3, #0]
 800be56:	2208      	movs	r2, #8
 800be58:	6879      	ldr	r1, [r7, #4]
 800be5a:	4618      	mov	r0, r3
 800be5c:	f00a fdff 	bl	8016a5e <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800be60:	2300      	movs	r3, #0
}
 800be62:	4618      	mov	r0, r3
 800be64:	3708      	adds	r7, #8
 800be66:	46bd      	mov	sp, r7
 800be68:	bd80      	pop	{r7, pc}
 800be6a:	bf00      	nop
 800be6c:	200004b8 	.word	0x200004b8

0800be70 <SecureElementGetDevEui>:

uint8_t* SecureElementGetDevEui( void )
{
 800be70:	b480      	push	{r7}
 800be72:	af00      	add	r7, sp, #0
    return SeNvm->DevEui;
 800be74:	4b02      	ldr	r3, [pc, #8]	@ (800be80 <SecureElementGetDevEui+0x10>)
 800be76:	681b      	ldr	r3, [r3, #0]
}
 800be78:	4618      	mov	r0, r3
 800be7a:	46bd      	mov	sp, r7
 800be7c:	bc80      	pop	{r7}
 800be7e:	4770      	bx	lr
 800be80:	200004b8 	.word	0x200004b8

0800be84 <SecureElementSetJoinEui>:

SecureElementStatus_t SecureElementSetJoinEui( uint8_t* joinEui )
{
 800be84:	b580      	push	{r7, lr}
 800be86:	b082      	sub	sp, #8
 800be88:	af00      	add	r7, sp, #0
 800be8a:	6078      	str	r0, [r7, #4]
    if( joinEui == NULL )
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	2b00      	cmp	r3, #0
 800be90:	d101      	bne.n	800be96 <SecureElementSetJoinEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800be92:	2302      	movs	r3, #2
 800be94:	e008      	b.n	800bea8 <SecureElementSetJoinEui+0x24>
    }
    memcpy1( SeNvm->JoinEui, joinEui, SE_EUI_SIZE );
 800be96:	4b06      	ldr	r3, [pc, #24]	@ (800beb0 <SecureElementSetJoinEui+0x2c>)
 800be98:	681b      	ldr	r3, [r3, #0]
 800be9a:	3308      	adds	r3, #8
 800be9c:	2208      	movs	r2, #8
 800be9e:	6879      	ldr	r1, [r7, #4]
 800bea0:	4618      	mov	r0, r3
 800bea2:	f00a fddc 	bl	8016a5e <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800bea6:	2300      	movs	r3, #0
}
 800bea8:	4618      	mov	r0, r3
 800beaa:	3708      	adds	r7, #8
 800beac:	46bd      	mov	sp, r7
 800beae:	bd80      	pop	{r7, pc}
 800beb0:	200004b8 	.word	0x200004b8

0800beb4 <SecureElementGetJoinEui>:

uint8_t* SecureElementGetJoinEui( void )
{
 800beb4:	b480      	push	{r7}
 800beb6:	af00      	add	r7, sp, #0
    return SeNvm->JoinEui;
 800beb8:	4b03      	ldr	r3, [pc, #12]	@ (800bec8 <SecureElementGetJoinEui+0x14>)
 800beba:	681b      	ldr	r3, [r3, #0]
 800bebc:	3308      	adds	r3, #8
}
 800bebe:	4618      	mov	r0, r3
 800bec0:	46bd      	mov	sp, r7
 800bec2:	bc80      	pop	{r7}
 800bec4:	4770      	bx	lr
 800bec6:	bf00      	nop
 800bec8:	200004b8 	.word	0x200004b8

0800becc <LmHandlerInit>:
 */
static bool LmHandlerPackageIsInitialized(uint8_t id);

/* Exported functions ---------------------------------------------------------*/
LmHandlerErrorStatus_t LmHandlerInit( LmHandlerCallbacks_t *handlerCallbacks, uint32_t fwVersion )
{
 800becc:	b580      	push	{r7, lr}
 800bece:	b082      	sub	sp, #8
 800bed0:	af00      	add	r7, sp, #0
 800bed2:	6078      	str	r0, [r7, #4]
 800bed4:	6039      	str	r1, [r7, #0]
    LmHandlerCallbacks = handlerCallbacks;
 800bed6:	4a23      	ldr	r2, [pc, #140]	@ (800bf64 <LmHandlerInit+0x98>)
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	6013      	str	r3, [r2, #0]

    LoRaMacPrimitives.MacMcpsConfirm = McpsConfirm;
 800bedc:	4b22      	ldr	r3, [pc, #136]	@ (800bf68 <LmHandlerInit+0x9c>)
 800bede:	4a23      	ldr	r2, [pc, #140]	@ (800bf6c <LmHandlerInit+0xa0>)
 800bee0:	601a      	str	r2, [r3, #0]
    LoRaMacPrimitives.MacMcpsIndication = McpsIndication;
 800bee2:	4b21      	ldr	r3, [pc, #132]	@ (800bf68 <LmHandlerInit+0x9c>)
 800bee4:	4a22      	ldr	r2, [pc, #136]	@ (800bf70 <LmHandlerInit+0xa4>)
 800bee6:	605a      	str	r2, [r3, #4]
    LoRaMacPrimitives.MacMlmeConfirm = MlmeConfirm;
 800bee8:	4b1f      	ldr	r3, [pc, #124]	@ (800bf68 <LmHandlerInit+0x9c>)
 800beea:	4a22      	ldr	r2, [pc, #136]	@ (800bf74 <LmHandlerInit+0xa8>)
 800beec:	609a      	str	r2, [r3, #8]
    LoRaMacPrimitives.MacMlmeIndication = MlmeIndication;
 800beee:	4b1e      	ldr	r3, [pc, #120]	@ (800bf68 <LmHandlerInit+0x9c>)
 800bef0:	4a21      	ldr	r2, [pc, #132]	@ (800bf78 <LmHandlerInit+0xac>)
 800bef2:	60da      	str	r2, [r3, #12]
    LoRaMacCallbacks.GetBatteryLevel = LmHandlerCallbacks->GetBatteryLevel;
 800bef4:	4b1b      	ldr	r3, [pc, #108]	@ (800bf64 <LmHandlerInit+0x98>)
 800bef6:	681b      	ldr	r3, [r3, #0]
 800bef8:	681b      	ldr	r3, [r3, #0]
 800befa:	4a20      	ldr	r2, [pc, #128]	@ (800bf7c <LmHandlerInit+0xb0>)
 800befc:	6013      	str	r3, [r2, #0]
    LoRaMacCallbacks.GetTemperatureLevel = LmHandlerCallbacks->GetTemperature;
 800befe:	4b19      	ldr	r3, [pc, #100]	@ (800bf64 <LmHandlerInit+0x98>)
 800bf00:	681b      	ldr	r3, [r3, #0]
 800bf02:	685b      	ldr	r3, [r3, #4]
 800bf04:	4a1d      	ldr	r2, [pc, #116]	@ (800bf7c <LmHandlerInit+0xb0>)
 800bf06:	6053      	str	r3, [r2, #4]
    LoRaMacCallbacks.GetUniqueId = LmHandlerCallbacks->GetUniqueId;
 800bf08:	4b16      	ldr	r3, [pc, #88]	@ (800bf64 <LmHandlerInit+0x98>)
 800bf0a:	681b      	ldr	r3, [r3, #0]
 800bf0c:	689b      	ldr	r3, [r3, #8]
 800bf0e:	4a1b      	ldr	r2, [pc, #108]	@ (800bf7c <LmHandlerInit+0xb0>)
 800bf10:	6093      	str	r3, [r2, #8]
    LoRaMacCallbacks.NvmDataChange  = NvmDataMgmtEvent;
 800bf12:	4b1a      	ldr	r3, [pc, #104]	@ (800bf7c <LmHandlerInit+0xb0>)
 800bf14:	4a1a      	ldr	r2, [pc, #104]	@ (800bf80 <LmHandlerInit+0xb4>)
 800bf16:	60da      	str	r2, [r3, #12]
    LoRaMacCallbacks.MacProcessNotify = LmHandlerCallbacks->OnMacProcess;
 800bf18:	4b12      	ldr	r3, [pc, #72]	@ (800bf64 <LmHandlerInit+0x98>)
 800bf1a:	681b      	ldr	r3, [r3, #0]
 800bf1c:	699b      	ldr	r3, [r3, #24]
 800bf1e:	4a17      	ldr	r2, [pc, #92]	@ (800bf7c <LmHandlerInit+0xb0>)
 800bf20:	6113      	str	r3, [r2, #16]

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    LmhpComplianceParams.FwVersion.Value = fwVersion;
 800bf22:	4a18      	ldr	r2, [pc, #96]	@ (800bf84 <LmHandlerInit+0xb8>)
 800bf24:	683b      	ldr	r3, [r7, #0]
 800bf26:	6013      	str	r3, [r2, #0]
    LmhpComplianceParams.OnTxPeriodicityChanged = LmHandlerCallbacks->OnTxPeriodicityChanged;
 800bf28:	4b0e      	ldr	r3, [pc, #56]	@ (800bf64 <LmHandlerInit+0x98>)
 800bf2a:	681b      	ldr	r3, [r3, #0]
 800bf2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bf2e:	4a15      	ldr	r2, [pc, #84]	@ (800bf84 <LmHandlerInit+0xb8>)
 800bf30:	6053      	str	r3, [r2, #4]
    LmhpComplianceParams.OnTxFrameCtrlChanged = LmHandlerCallbacks->OnTxFrameCtrlChanged;
 800bf32:	4b0c      	ldr	r3, [pc, #48]	@ (800bf64 <LmHandlerInit+0x98>)
 800bf34:	681b      	ldr	r3, [r3, #0]
 800bf36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bf38:	4a12      	ldr	r2, [pc, #72]	@ (800bf84 <LmHandlerInit+0xb8>)
 800bf3a:	6093      	str	r3, [r2, #8]
    LmhpComplianceParams.OnPingSlotPeriodicityChanged = LmHandlerCallbacks->OnPingSlotPeriodicityChanged;
 800bf3c:	4b09      	ldr	r3, [pc, #36]	@ (800bf64 <LmHandlerInit+0x98>)
 800bf3e:	681b      	ldr	r3, [r3, #0]
 800bf40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bf42:	4a10      	ldr	r2, [pc, #64]	@ (800bf84 <LmHandlerInit+0xb8>)
 800bf44:	60d3      	str	r3, [r2, #12]
#endif /* LORAMAC_VERSION */

    /*The LoRa-Alliance Compliance protocol package should always be initialized and activated.*/
    if (LmHandlerPackageRegister(PACKAGE_ID_COMPLIANCE, &LmhpComplianceParams) != LORAMAC_HANDLER_SUCCESS)
 800bf46:	490f      	ldr	r1, [pc, #60]	@ (800bf84 <LmHandlerInit+0xb8>)
 800bf48:	2000      	movs	r0, #0
 800bf4a:	f000 fd87 	bl	800ca5c <LmHandlerPackageRegister>
 800bf4e:	4603      	mov	r3, r0
 800bf50:	2b00      	cmp	r3, #0
 800bf52:	d002      	beq.n	800bf5a <LmHandlerInit+0x8e>
    {
        return LORAMAC_HANDLER_ERROR;
 800bf54:	f04f 33ff 	mov.w	r3, #4294967295
 800bf58:	e000      	b.n	800bf5c <LmHandlerInit+0x90>
    if (LmhpPackagesRegistrationInit() != LORAMAC_HANDLER_SUCCESS)
    {
        return LORAMAC_HANDLER_ERROR;
    }
#endif /*LORAWAN_DATA_DISTRIB_MGT*/
    return LORAMAC_HANDLER_SUCCESS;
 800bf5a:	2300      	movs	r3, #0
}
 800bf5c:	4618      	mov	r0, r3
 800bf5e:	3708      	adds	r7, #8
 800bf60:	46bd      	mov	sp, r7
 800bf62:	bd80      	pop	{r7, pc}
 800bf64:	200004f4 	.word	0x200004f4
 800bf68:	200004f8 	.word	0x200004f8
 800bf6c:	0800c769 	.word	0x0800c769
 800bf70:	0800c7d1 	.word	0x0800c7d1
 800bf74:	0800c89d 	.word	0x0800c89d
 800bf78:	0800c9b5 	.word	0x0800c9b5
 800bf7c:	20000508 	.word	0x20000508
 800bf80:	0800ce2d 	.word	0x0800ce2d
 800bf84:	200004bc 	.word	0x200004bc

0800bf88 <LmHandlerConfigure>:
        return LORAMAC_HANDLER_BUSY_ERROR;
    }
}

LmHandlerErrorStatus_t LmHandlerConfigure( LmHandlerParams_t *handlerParams )
{
 800bf88:	b580      	push	{r7, lr}
 800bf8a:	b094      	sub	sp, #80	@ 0x50
 800bf8c:	af04      	add	r7, sp, #16
 800bf8e:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
    LoraInfo_t *loraInfo;

    UTIL_MEM_cpy_8((void *)&LmHandlerParams, (const void *)handlerParams, sizeof(LmHandlerParams_t));
 800bf90:	2214      	movs	r2, #20
 800bf92:	6879      	ldr	r1, [r7, #4]
 800bf94:	4891      	ldr	r0, [pc, #580]	@ (800c1dc <LmHandlerConfigure+0x254>)
 800bf96:	f00e f867 	bl	801a068 <UTIL_MEM_cpy_8>

#if ( LORAMAC_CLASSB_ENABLED == 1 )
    IsClassBSwitchPending = false;
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    IsUplinkTxPending = false;
 800bf9a:	4b91      	ldr	r3, [pc, #580]	@ (800c1e0 <LmHandlerConfigure+0x258>)
 800bf9c:	2200      	movs	r2, #0
 800bf9e:	701a      	strb	r2, [r3, #0]
#endif /* LORAMAC_VERSION */

    loraInfo = LoraInfo_GetPtr();
 800bfa0:	f7fe fb0c 	bl	800a5bc <LoraInfo_GetPtr>
 800bfa4:	63f8      	str	r0, [r7, #60]	@ 0x3c

    if (0U == ((1 << (LmHandlerParams.ActiveRegion)) & (loraInfo->Region)))
 800bfa6:	4b8d      	ldr	r3, [pc, #564]	@ (800c1dc <LmHandlerConfigure+0x254>)
 800bfa8:	781b      	ldrb	r3, [r3, #0]
 800bfaa:	461a      	mov	r2, r3
 800bfac:	2301      	movs	r3, #1
 800bfae:	4093      	lsls	r3, r2
 800bfb0:	461a      	mov	r2, r3
 800bfb2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bfb4:	685b      	ldr	r3, [r3, #4]
 800bfb6:	4013      	ands	r3, r2
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	d107      	bne.n	800bfcc <LmHandlerConfigure+0x44>
    {
        MW_LOG(TS_ON, VLEVEL_ALWAYS, "error: Region is not defined in the MW: set lorawan_conf.h accordingly\r\n");
 800bfbc:	4b89      	ldr	r3, [pc, #548]	@ (800c1e4 <LmHandlerConfigure+0x25c>)
 800bfbe:	2201      	movs	r2, #1
 800bfc0:	2100      	movs	r1, #0
 800bfc2:	2000      	movs	r0, #0
 800bfc4:	f00f f89a 	bl	801b0fc <UTIL_ADV_TRACE_COND_FSend>
        while (1) {}  /* error: Region is not defined in the MW */
 800bfc8:	bf00      	nop
 800bfca:	e7fd      	b.n	800bfc8 <LmHandlerConfigure+0x40>
    }

    if (LoRaMacInitialization(&LoRaMacPrimitives, &LoRaMacCallbacks, LmHandlerParams.ActiveRegion) != LORAMAC_STATUS_OK)
 800bfcc:	4b83      	ldr	r3, [pc, #524]	@ (800c1dc <LmHandlerConfigure+0x254>)
 800bfce:	781b      	ldrb	r3, [r3, #0]
 800bfd0:	461a      	mov	r2, r3
 800bfd2:	4985      	ldr	r1, [pc, #532]	@ (800c1e8 <LmHandlerConfigure+0x260>)
 800bfd4:	4885      	ldr	r0, [pc, #532]	@ (800c1ec <LmHandlerConfigure+0x264>)
 800bfd6:	f004 fe95 	bl	8010d04 <LoRaMacInitialization>
 800bfda:	4603      	mov	r3, r0
 800bfdc:	2b00      	cmp	r3, #0
 800bfde:	d002      	beq.n	800bfe6 <LmHandlerConfigure+0x5e>
    {
        return LORAMAC_HANDLER_ERROR;
 800bfe0:	f04f 33ff 	mov.w	r3, #4294967295
 800bfe4:	e0f5      	b.n	800c1d2 <LmHandlerConfigure+0x24a>
    }

    // Try the restore context from the Backup RAM structure if data retention is available
    mibReq.Type = MIB_NVM_CTXS;
 800bfe6:	2327      	movs	r3, #39	@ 0x27
 800bfe8:	763b      	strb	r3, [r7, #24]
    if (LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK)
 800bfea:	f107 0318 	add.w	r3, r7, #24
 800bfee:	4618      	mov	r0, r3
 800bff0:	f005 fbd8 	bl	80117a4 <LoRaMacMibSetRequestConfirm>
 800bff4:	4603      	mov	r3, r0
 800bff6:	2b00      	cmp	r3, #0
 800bff8:	d103      	bne.n	800c002 <LmHandlerConfigure+0x7a>
    {
        CtxRestoreDone = true;
 800bffa:	4b7d      	ldr	r3, [pc, #500]	@ (800c1f0 <LmHandlerConfigure+0x268>)
 800bffc:	2201      	movs	r2, #1
 800bffe:	701a      	strb	r2, [r3, #0]
 800c000:	e02a      	b.n	800c058 <LmHandlerConfigure+0xd0>
    }
    else
    {
        // Restore context data backup from user callback (stored in FLASH)
        mibReq.Type = MIB_NVM_BKP_CTXS;
 800c002:	2328      	movs	r3, #40	@ 0x28
 800c004:	763b      	strb	r3, [r7, #24]
        if (LmHandlerCallbacks->OnRestoreContextRequest != NULL)
 800c006:	4b7b      	ldr	r3, [pc, #492]	@ (800c1f4 <LmHandlerConfigure+0x26c>)
 800c008:	681b      	ldr	r3, [r3, #0]
 800c00a:	691b      	ldr	r3, [r3, #16]
 800c00c:	2b00      	cmp	r3, #0
 800c00e:	d00c      	beq.n	800c02a <LmHandlerConfigure+0xa2>
        {
            LoRaMacMibGetRequestConfirm( &mibReq );
 800c010:	f107 0318 	add.w	r3, r7, #24
 800c014:	4618      	mov	r0, r3
 800c016:	f005 fa1f 	bl	8011458 <LoRaMacMibGetRequestConfirm>
            LmHandlerCallbacks->OnRestoreContextRequest(mibReq.Param.BackupContexts, sizeof(LoRaMacNvmData_t));
 800c01a:	4b76      	ldr	r3, [pc, #472]	@ (800c1f4 <LmHandlerConfigure+0x26c>)
 800c01c:	681b      	ldr	r3, [r3, #0]
 800c01e:	691b      	ldr	r3, [r3, #16]
 800c020:	69fa      	ldr	r2, [r7, #28]
 800c022:	f240 517c 	movw	r1, #1404	@ 0x57c
 800c026:	4610      	mov	r0, r2
 800c028:	4798      	blx	r3
        }
        // Restore context data from backup to main nvm structure
        mibReq.Type = MIB_NVM_CTXS;
 800c02a:	2327      	movs	r3, #39	@ 0x27
 800c02c:	763b      	strb	r3, [r7, #24]
        if (LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK)
 800c02e:	f107 0318 	add.w	r3, r7, #24
 800c032:	4618      	mov	r0, r3
 800c034:	f005 fbb6 	bl	80117a4 <LoRaMacMibSetRequestConfirm>
 800c038:	4603      	mov	r3, r0
 800c03a:	2b00      	cmp	r3, #0
 800c03c:	d10c      	bne.n	800c058 <LmHandlerConfigure+0xd0>
        {
            mibReq.Type = MIB_NETWORK_ACTIVATION;
 800c03e:	2301      	movs	r3, #1
 800c040:	763b      	strb	r3, [r7, #24]
            LoRaMacMibGetRequestConfirm( &mibReq );
 800c042:	f107 0318 	add.w	r3, r7, #24
 800c046:	4618      	mov	r0, r3
 800c048:	f005 fa06 	bl	8011458 <LoRaMacMibGetRequestConfirm>
            if (mibReq.Param.NetworkActivation != ACTIVATION_TYPE_NONE)
 800c04c:	7f3b      	ldrb	r3, [r7, #28]
 800c04e:	2b00      	cmp	r3, #0
 800c050:	d002      	beq.n	800c058 <LmHandlerConfigure+0xd0>
            {
                CtxRestoreDone = true;
 800c052:	4b67      	ldr	r3, [pc, #412]	@ (800c1f0 <LmHandlerConfigure+0x268>)
 800c054:	2201      	movs	r2, #1
 800c056:	701a      	strb	r2, [r3, #0]
            }
        }
    }

    if (CtxRestoreDone == true)
 800c058:	4b65      	ldr	r3, [pc, #404]	@ (800c1f0 <LmHandlerConfigure+0x268>)
 800c05a:	781b      	ldrb	r3, [r3, #0]
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	d02a      	beq.n	800c0b6 <LmHandlerConfigure+0x12e>
    {
        if ( LmHandlerCallbacks->OnNvmDataChange != NULL )
 800c060:	4b64      	ldr	r3, [pc, #400]	@ (800c1f4 <LmHandlerConfigure+0x26c>)
 800c062:	681b      	ldr	r3, [r3, #0]
 800c064:	69db      	ldr	r3, [r3, #28]
 800c066:	2b00      	cmp	r3, #0
 800c068:	d004      	beq.n	800c074 <LmHandlerConfigure+0xec>
        {
            LmHandlerCallbacks->OnNvmDataChange( LORAMAC_HANDLER_NVM_RESTORE );
 800c06a:	4b62      	ldr	r3, [pc, #392]	@ (800c1f4 <LmHandlerConfigure+0x26c>)
 800c06c:	681b      	ldr	r3, [r3, #0]
 800c06e:	69db      	ldr	r3, [r3, #28]
 800c070:	2000      	movs	r0, #0
 800c072:	4798      	blx	r3
        }

        mibReq.Type = MIB_DEV_ADDR;
 800c074:	2306      	movs	r3, #6
 800c076:	763b      	strb	r3, [r7, #24]
        LoRaMacMibGetRequestConfirm( &mibReq );
 800c078:	f107 0318 	add.w	r3, r7, #24
 800c07c:	4618      	mov	r0, r3
 800c07e:	f005 f9eb 	bl	8011458 <LoRaMacMibGetRequestConfirm>
        CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 800c082:	69fb      	ldr	r3, [r7, #28]
 800c084:	4a5c      	ldr	r2, [pc, #368]	@ (800c1f8 <LmHandlerConfigure+0x270>)
 800c086:	6153      	str	r3, [r2, #20]

        mibReq.Type = MIB_NVM_CTXS;
 800c088:	2327      	movs	r3, #39	@ 0x27
 800c08a:	763b      	strb	r3, [r7, #24]
        LoRaMacMibGetRequestConfirm( &mibReq );
 800c08c:	f107 0318 	add.w	r3, r7, #24
 800c090:	4618      	mov	r0, r3
 800c092:	f005 f9e1 	bl	8011458 <LoRaMacMibGetRequestConfirm>

        LmHandlerParams.ActiveRegion = mibReq.Param.Contexts->MacGroup2.Region;
 800c096:	69fb      	ldr	r3, [r7, #28]
 800c098:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 800c09c:	4b4f      	ldr	r3, [pc, #316]	@ (800c1dc <LmHandlerConfigure+0x254>)
 800c09e:	701a      	strb	r2, [r3, #0]
        LmHandlerParams.DefaultClass = mibReq.Param.Contexts->MacGroup2.DeviceClass;
 800c0a0:	69fb      	ldr	r3, [r7, #28]
 800c0a2:	f893 2104 	ldrb.w	r2, [r3, #260]	@ 0x104
 800c0a6:	4b4d      	ldr	r3, [pc, #308]	@ (800c1dc <LmHandlerConfigure+0x254>)
 800c0a8:	705a      	strb	r2, [r3, #1]
        LmHandlerParams.AdrEnable = mibReq.Param.Contexts->MacGroup2.AdrCtrlOn;
 800c0aa:	69fb      	ldr	r3, [r7, #28]
 800c0ac:	f893 2106 	ldrb.w	r2, [r3, #262]	@ 0x106
 800c0b0:	4b4a      	ldr	r3, [pc, #296]	@ (800c1dc <LmHandlerConfigure+0x254>)
 800c0b2:	709a      	strb	r2, [r3, #2]
 800c0b4:	e019      	b.n	800c0ea <LmHandlerConfigure+0x162>
    }
    else
    {
        mibReq.Type = MIB_NET_ID;
 800c0b6:	2305      	movs	r3, #5
 800c0b8:	763b      	strb	r3, [r7, #24]
        mibReq.Param.NetID = LORAWAN_NETWORK_ID;
 800c0ba:	2300      	movs	r3, #0
 800c0bc:	61fb      	str	r3, [r7, #28]
        LoRaMacMibSetRequestConfirm(&mibReq);
 800c0be:	f107 0318 	add.w	r3, r7, #24
 800c0c2:	4618      	mov	r0, r3
 800c0c4:	f005 fb6e 	bl	80117a4 <LoRaMacMibSetRequestConfirm>

#if ( STATIC_DEVICE_ADDRESS != 1 )
        CommissioningParams.DevAddr = LmHandlerCallbacks->GetDevAddr();
 800c0c8:	4b4a      	ldr	r3, [pc, #296]	@ (800c1f4 <LmHandlerConfigure+0x26c>)
 800c0ca:	681b      	ldr	r3, [r3, #0]
 800c0cc:	68db      	ldr	r3, [r3, #12]
 800c0ce:	4798      	blx	r3
 800c0d0:	4603      	mov	r3, r0
 800c0d2:	4a49      	ldr	r2, [pc, #292]	@ (800c1f8 <LmHandlerConfigure+0x270>)
 800c0d4:	6153      	str	r3, [r2, #20]
#endif /* STATIC_DEVICE_ADDRESS != 1 */

        mibReq.Type = MIB_DEV_ADDR;
 800c0d6:	2306      	movs	r3, #6
 800c0d8:	763b      	strb	r3, [r7, #24]
        mibReq.Param.DevAddr = CommissioningParams.DevAddr;
 800c0da:	4b47      	ldr	r3, [pc, #284]	@ (800c1f8 <LmHandlerConfigure+0x270>)
 800c0dc:	695b      	ldr	r3, [r3, #20]
 800c0de:	61fb      	str	r3, [r7, #28]
        LoRaMacMibSetRequestConfirm(&mibReq);
 800c0e0:	f107 0318 	add.w	r3, r7, #24
 800c0e4:	4618      	mov	r0, r3
 800c0e6:	f005 fb5d 	bl	80117a4 <LoRaMacMibSetRequestConfirm>
    }
    // Read secure-element DEV_EUI and JOIN_EUI values.
    mibReq.Type = MIB_DEV_EUI;
 800c0ea:	2302      	movs	r3, #2
 800c0ec:	763b      	strb	r3, [r7, #24]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800c0ee:	f107 0318 	add.w	r3, r7, #24
 800c0f2:	4618      	mov	r0, r3
 800c0f4:	f005 f9b0 	bl	8011458 <LoRaMacMibGetRequestConfirm>
    memcpy1( CommissioningParams.DevEui, mibReq.Param.DevEui, 8 );
 800c0f8:	69fb      	ldr	r3, [r7, #28]
 800c0fa:	2208      	movs	r2, #8
 800c0fc:	4619      	mov	r1, r3
 800c0fe:	483e      	ldr	r0, [pc, #248]	@ (800c1f8 <LmHandlerConfigure+0x270>)
 800c100:	f00a fcad 	bl	8016a5e <memcpy1>

    mibReq.Type = MIB_JOIN_EUI;
 800c104:	2303      	movs	r3, #3
 800c106:	763b      	strb	r3, [r7, #24]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800c108:	f107 0318 	add.w	r3, r7, #24
 800c10c:	4618      	mov	r0, r3
 800c10e:	f005 f9a3 	bl	8011458 <LoRaMacMibGetRequestConfirm>
    memcpy1( CommissioningParams.JoinEui, mibReq.Param.JoinEui, 8 );
 800c112:	69fb      	ldr	r3, [r7, #28]
 800c114:	2208      	movs	r2, #8
 800c116:	4619      	mov	r1, r3
 800c118:	4838      	ldr	r0, [pc, #224]	@ (800c1fc <LmHandlerConfigure+0x274>)
 800c11a:	f00a fca0 	bl	8016a5e <memcpy1>

    SecureElementPrintKeys();
 800c11e:	f7ff fc1f 	bl	800b960 <SecureElementPrintKeys>
    MW_LOG(TS_OFF, VLEVEL_M, "###### DevAddr:     %02X:%02X:%02X:%02X\r\n",
 800c122:	4b37      	ldr	r3, [pc, #220]	@ (800c200 <LmHandlerConfigure+0x278>)
 800c124:	781b      	ldrb	r3, [r3, #0]
 800c126:	461a      	mov	r2, r3
 800c128:	4b36      	ldr	r3, [pc, #216]	@ (800c204 <LmHandlerConfigure+0x27c>)
 800c12a:	781b      	ldrb	r3, [r3, #0]
 800c12c:	4619      	mov	r1, r3
 800c12e:	4b36      	ldr	r3, [pc, #216]	@ (800c208 <LmHandlerConfigure+0x280>)
 800c130:	781b      	ldrb	r3, [r3, #0]
 800c132:	4618      	mov	r0, r3
 800c134:	4b35      	ldr	r3, [pc, #212]	@ (800c20c <LmHandlerConfigure+0x284>)
 800c136:	781b      	ldrb	r3, [r3, #0]
 800c138:	9303      	str	r3, [sp, #12]
 800c13a:	9002      	str	r0, [sp, #8]
 800c13c:	9101      	str	r1, [sp, #4]
 800c13e:	9200      	str	r2, [sp, #0]
 800c140:	4b33      	ldr	r3, [pc, #204]	@ (800c210 <LmHandlerConfigure+0x288>)
 800c142:	2200      	movs	r2, #0
 800c144:	2100      	movs	r1, #0
 800c146:	2002      	movs	r0, #2
 800c148:	f00e ffd8 	bl	801b0fc <UTIL_ADV_TRACE_COND_FSend>

#if (defined (LORAWAN_KMS) && (LORAWAN_KMS == 1))
    MW_LOG(TS_OFF, VLEVEL_L, "###### KMS ENABLED \r\n");
#endif /* LORAWAN_KMS == 1 */

    mibReq.Type = MIB_PUBLIC_NETWORK;
 800c14c:	230f      	movs	r3, #15
 800c14e:	763b      	strb	r3, [r7, #24]
    mibReq.Param.EnablePublicNetwork = LORAWAN_PUBLIC_NETWORK;
 800c150:	2301      	movs	r3, #1
 800c152:	773b      	strb	r3, [r7, #28]
    LoRaMacMibSetRequestConfirm(&mibReq);
 800c154:	f107 0318 	add.w	r3, r7, #24
 800c158:	4618      	mov	r0, r3
 800c15a:	f005 fb23 	bl	80117a4 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_REPEATER_SUPPORT;
 800c15e:	2310      	movs	r3, #16
 800c160:	763b      	strb	r3, [r7, #24]
    mibReq.Param.EnableRepeaterSupport = LORAWAN_REPEATER_SUPPORT;
 800c162:	2300      	movs	r3, #0
 800c164:	773b      	strb	r3, [r7, #28]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800c166:	f107 0318 	add.w	r3, r7, #24
 800c16a:	4618      	mov	r0, r3
 800c16c:	f005 fb1a 	bl	80117a4 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_ADR;
 800c170:	2304      	movs	r3, #4
 800c172:	763b      	strb	r3, [r7, #24]
    mibReq.Param.AdrEnable = LmHandlerParams.AdrEnable;
 800c174:	4b19      	ldr	r3, [pc, #100]	@ (800c1dc <LmHandlerConfigure+0x254>)
 800c176:	789b      	ldrb	r3, [r3, #2]
 800c178:	773b      	strb	r3, [r7, #28]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800c17a:	f107 0318 	add.w	r3, r7, #24
 800c17e:	4618      	mov	r0, r3
 800c180:	f005 fb10 	bl	80117a4 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_RXB_C_TIMEOUT;
 800c184:	2338      	movs	r3, #56	@ 0x38
 800c186:	763b      	strb	r3, [r7, #24]
    mibReq.Param.RxBCTimeout = LmHandlerParams.RxBCTimeout;
 800c188:	4b14      	ldr	r3, [pc, #80]	@ (800c1dc <LmHandlerConfigure+0x254>)
 800c18a:	691b      	ldr	r3, [r3, #16]
 800c18c:	61fb      	str	r3, [r7, #28]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800c18e:	f107 0318 	add.w	r3, r7, #24
 800c192:	4618      	mov	r0, r3
 800c194:	f005 fb06 	bl	80117a4 <LoRaMacMibSetRequestConfirm>

    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    getPhy.Attribute = PHY_DUTY_CYCLE;
 800c198:	230f      	movs	r3, #15
 800c19a:	743b      	strb	r3, [r7, #16]
    phyParam = RegionGetPhyParam( LmHandlerParams.ActiveRegion, &getPhy );
 800c19c:	4b0f      	ldr	r3, [pc, #60]	@ (800c1dc <LmHandlerConfigure+0x254>)
 800c19e:	781b      	ldrb	r3, [r3, #0]
 800c1a0:	f107 0210 	add.w	r2, r7, #16
 800c1a4:	4611      	mov	r1, r2
 800c1a6:	4618      	mov	r0, r3
 800c1a8:	f008 f9b8 	bl	801451c <RegionGetPhyParam>
 800c1ac:	4603      	mov	r3, r0
 800c1ae:	60fb      	str	r3, [r7, #12]
    LmHandlerParams.DutyCycleEnabled = (bool) phyParam.Value;
 800c1b0:	68fb      	ldr	r3, [r7, #12]
 800c1b2:	2b00      	cmp	r3, #0
 800c1b4:	bf14      	ite	ne
 800c1b6:	2301      	movne	r3, #1
 800c1b8:	2300      	moveq	r3, #0
 800c1ba:	b2da      	uxtb	r2, r3
 800c1bc:	4b07      	ldr	r3, [pc, #28]	@ (800c1dc <LmHandlerConfigure+0x254>)
 800c1be:	719a      	strb	r2, [r3, #6]

    // Set system maximum tolerated rx error in milliseconds
    LmHandlerSetSystemMaxRxError( 20 );
 800c1c0:	2014      	movs	r0, #20
 800c1c2:	f000 fab9 	bl	800c738 <LmHandlerSetSystemMaxRxError>

    /* override previous value if reconfigure new region */
    LoRaMacTestSetDutyCycleOn( LmHandlerParams.DutyCycleEnabled );
 800c1c6:	4b05      	ldr	r3, [pc, #20]	@ (800c1dc <LmHandlerConfigure+0x254>)
 800c1c8:	799b      	ldrb	r3, [r3, #6]
 800c1ca:	4618      	mov	r0, r3
 800c1cc:	f006 f918 	bl	8012400 <LoRaMacTestSetDutyCycleOn>

    return LORAMAC_HANDLER_SUCCESS;
 800c1d0:	2300      	movs	r3, #0
}
 800c1d2:	4618      	mov	r0, r3
 800c1d4:	3740      	adds	r7, #64	@ 0x40
 800c1d6:	46bd      	mov	sp, r7
 800c1d8:	bd80      	pop	{r7, pc}
 800c1da:	bf00      	nop
 800c1dc:	200004e0 	.word	0x200004e0
 800c1e0:	20000520 	.word	0x20000520
 800c1e4:	0801be00 	.word	0x0801be00
 800c1e8:	20000508 	.word	0x20000508
 800c1ec:	200004f8 	.word	0x200004f8
 800c1f0:	20000616 	.word	0x20000616
 800c1f4:	200004f4 	.word	0x200004f4
 800c1f8:	20000090 	.word	0x20000090
 800c1fc:	20000098 	.word	0x20000098
 800c200:	200000a7 	.word	0x200000a7
 800c204:	200000a6 	.word	0x200000a6
 800c208:	200000a5 	.word	0x200000a5
 800c20c:	200000a4 	.word	0x200000a4
 800c210:	0801be4c 	.word	0x0801be4c

0800c214 <LmHandlerProcess>:

    return false;
}

void LmHandlerProcess( void )
{
 800c214:	b580      	push	{r7, lr}
 800c216:	b082      	sub	sp, #8
 800c218:	af00      	add	r7, sp, #0
    /* Call at first the LoRaMAC process before to run all package process features */
    // Processes the LoRaMac events
    LoRaMacProcess( );
 800c21a:	f002 fd45 	bl	800eca8 <LoRaMacProcess>

    // Call all packages process functions
    LmHandlerPackagesProcess( );
 800c21e:	f000 fd3b 	bl	800cc98 <LmHandlerPackagesProcess>

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    // Check if a package transmission is pending.
    // If it is the case exit function earlier
    if( LmHandlerPackageIsTxPending( ) == true )
 800c222:	f000 fd0f 	bl	800cc44 <LmHandlerPackageIsTxPending>
 800c226:	4603      	mov	r3, r0
 800c228:	2b00      	cmp	r3, #0
 800c22a:	d117      	bne.n	800c25c <LmHandlerProcess+0x48>
    {
        return;
    }

    // If a MAC layer scheduled uplink is still pending try to send it.
    if( IsUplinkTxPending == true )
 800c22c:	4b0d      	ldr	r3, [pc, #52]	@ (800c264 <LmHandlerProcess+0x50>)
 800c22e:	781b      	ldrb	r3, [r3, #0]
 800c230:	2b00      	cmp	r3, #0
 800c232:	d014      	beq.n	800c25e <LmHandlerProcess+0x4a>
    {
        // Send an empty message
        LmHandlerAppData_t appData =
 800c234:	2300      	movs	r3, #0
 800c236:	703b      	strb	r3, [r7, #0]
 800c238:	2300      	movs	r3, #0
 800c23a:	707b      	strb	r3, [r7, #1]
 800c23c:	2300      	movs	r3, #0
 800c23e:	607b      	str	r3, [r7, #4]
            .Buffer = NULL,
            .BufferSize = 0,
            .Port = 0,
        };

        if( LmHandlerSend( &appData, LmHandlerParams.IsTxConfirmed, false ) == LORAMAC_HANDLER_SUCCESS )
 800c240:	4b09      	ldr	r3, [pc, #36]	@ (800c268 <LmHandlerProcess+0x54>)
 800c242:	78d9      	ldrb	r1, [r3, #3]
 800c244:	463b      	mov	r3, r7
 800c246:	2200      	movs	r2, #0
 800c248:	4618      	mov	r0, r3
 800c24a:	f000 f8b7 	bl	800c3bc <LmHandlerSend>
 800c24e:	4603      	mov	r3, r0
 800c250:	2b00      	cmp	r3, #0
 800c252:	d104      	bne.n	800c25e <LmHandlerProcess+0x4a>
        {
            IsUplinkTxPending = false;
 800c254:	4b03      	ldr	r3, [pc, #12]	@ (800c264 <LmHandlerProcess+0x50>)
 800c256:	2200      	movs	r2, #0
 800c258:	701a      	strb	r2, [r3, #0]
 800c25a:	e000      	b.n	800c25e <LmHandlerProcess+0x4a>
        return;
 800c25c:	bf00      	nop
        }
    }
#endif /* LORAMAC_VERSION */
}
 800c25e:	3708      	adds	r7, #8
 800c260:	46bd      	mov	sp, r7
 800c262:	bd80      	pop	{r7, pc}
 800c264:	20000520 	.word	0x20000520
 800c268:	200004e0 	.word	0x200004e0

0800c26c <LmHandlerGetDutyCycleWaitTime>:

TimerTime_t LmHandlerGetDutyCycleWaitTime( void )
{
 800c26c:	b480      	push	{r7}
 800c26e:	af00      	add	r7, sp, #0
    return DutyCycleWaitTime;
 800c270:	4b02      	ldr	r3, [pc, #8]	@ (800c27c <LmHandlerGetDutyCycleWaitTime+0x10>)
 800c272:	681b      	ldr	r3, [r3, #0]
}
 800c274:	4618      	mov	r0, r3
 800c276:	46bd      	mov	sp, r7
 800c278:	bc80      	pop	{r7}
 800c27a:	4770      	bx	lr
 800c27c:	2000051c 	.word	0x2000051c

0800c280 <LmHandlerJoin>:

void LmHandlerJoin( ActivationType_t mode, bool forceRejoin )
{
 800c280:	b580      	push	{r7, lr}
 800c282:	b090      	sub	sp, #64	@ 0x40
 800c284:	af00      	add	r7, sp, #0
 800c286:	4603      	mov	r3, r0
 800c288:	460a      	mov	r2, r1
 800c28a:	71fb      	strb	r3, [r7, #7]
 800c28c:	4613      	mov	r3, r2
 800c28e:	71bb      	strb	r3, [r7, #6]
#endif /* ACTIVATION_BY_PERSONALIZATION */
#endif /* LORAWAN_KMS */

    MlmeReq_t mlmeReq;

    mlmeReq.Type = MLME_JOIN;
 800c290:	2301      	movs	r3, #1
 800c292:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    mlmeReq.Req.Join.Datarate = LmHandlerParams.TxDatarate;
 800c296:	4b36      	ldr	r3, [pc, #216]	@ (800c370 <LmHandlerJoin+0xf0>)
 800c298:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800c29c:	b2db      	uxtb	r3, r3
 800c29e:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31

    if ( mode == ACTIVATION_TYPE_OTAA )
 800c2a2:	79fb      	ldrb	r3, [r7, #7]
 800c2a4:	2b02      	cmp	r3, #2
 800c2a6:	d10b      	bne.n	800c2c0 <LmHandlerJoin+0x40>
    {
        mlmeReq.Req.Join.NetworkActivation = ACTIVATION_TYPE_OTAA;
 800c2a8:	2302      	movs	r3, #2
 800c2aa:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
        JoinParams.Mode = ACTIVATION_TYPE_OTAA;
 800c2ae:	4b31      	ldr	r3, [pc, #196]	@ (800c374 <LmHandlerJoin+0xf4>)
 800c2b0:	2202      	movs	r2, #2
 800c2b2:	719a      	strb	r2, [r3, #6]
        JoinParams.forceRejoin = forceRejoin;
 800c2b4:	4a2f      	ldr	r2, [pc, #188]	@ (800c374 <LmHandlerJoin+0xf4>)
 800c2b6:	79bb      	ldrb	r3, [r7, #6]
 800c2b8:	71d3      	strb	r3, [r2, #7]
        LoRaMacStart();
 800c2ba:	f004 ffdb 	bl	8011274 <LoRaMacStart>
 800c2be:	e041      	b.n	800c344 <LmHandlerJoin+0xc4>
    }
    else
    {
        MibRequestConfirm_t mibReq;

        mlmeReq.Req.Join.NetworkActivation = ACTIVATION_TYPE_ABP;
 800c2c0:	2301      	movs	r3, #1
 800c2c2:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
        JoinParams.Mode = ACTIVATION_TYPE_ABP;
 800c2c6:	4b2b      	ldr	r3, [pc, #172]	@ (800c374 <LmHandlerJoin+0xf4>)
 800c2c8:	2201      	movs	r2, #1
 800c2ca:	719a      	strb	r2, [r3, #6]
        JoinParams.Datarate = LmHandlerParams.TxDatarate;
 800c2cc:	4b28      	ldr	r3, [pc, #160]	@ (800c370 <LmHandlerJoin+0xf0>)
 800c2ce:	f993 2004 	ldrsb.w	r2, [r3, #4]
 800c2d2:	4b28      	ldr	r3, [pc, #160]	@ (800c374 <LmHandlerJoin+0xf4>)
 800c2d4:	711a      	strb	r2, [r3, #4]
        JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 800c2d6:	4b27      	ldr	r3, [pc, #156]	@ (800c374 <LmHandlerJoin+0xf4>)
 800c2d8:	2200      	movs	r2, #0
 800c2da:	715a      	strb	r2, [r3, #5]
        JoinParams.forceRejoin = forceRejoin;
 800c2dc:	4a25      	ldr	r2, [pc, #148]	@ (800c374 <LmHandlerJoin+0xf4>)
 800c2de:	79bb      	ldrb	r3, [r7, #6]
 800c2e0:	71d3      	strb	r3, [r2, #7]

        if (CtxRestoreDone == false)
 800c2e2:	4b25      	ldr	r3, [pc, #148]	@ (800c378 <LmHandlerJoin+0xf8>)
 800c2e4:	781b      	ldrb	r3, [r3, #0]
 800c2e6:	f083 0301 	eor.w	r3, r3, #1
 800c2ea:	b2db      	uxtb	r3, r3
 800c2ec:	2b00      	cmp	r3, #0
 800c2ee:	d01e      	beq.n	800c32e <LmHandlerJoin+0xae>
        {
            // Configure the default datarate
            mibReq.Type = MIB_CHANNELS_DEFAULT_DATARATE;
 800c2f0:	231f      	movs	r3, #31
 800c2f2:	723b      	strb	r3, [r7, #8]
            mibReq.Param.ChannelsDefaultDatarate = LmHandlerParams.TxDatarate;
 800c2f4:	4b1e      	ldr	r3, [pc, #120]	@ (800c370 <LmHandlerJoin+0xf0>)
 800c2f6:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800c2fa:	733b      	strb	r3, [r7, #12]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800c2fc:	f107 0308 	add.w	r3, r7, #8
 800c300:	4618      	mov	r0, r3
 800c302:	f005 fa4f 	bl	80117a4 <LoRaMacMibSetRequestConfirm>

            mibReq.Type = MIB_CHANNELS_DATARATE;
 800c306:	2320      	movs	r3, #32
 800c308:	723b      	strb	r3, [r7, #8]
            mibReq.Param.ChannelsDatarate = LmHandlerParams.TxDatarate;
 800c30a:	4b19      	ldr	r3, [pc, #100]	@ (800c370 <LmHandlerJoin+0xf0>)
 800c30c:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800c310:	733b      	strb	r3, [r7, #12]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800c312:	f107 0308 	add.w	r3, r7, #8
 800c316:	4618      	mov	r0, r3
 800c318:	f005 fa44 	bl	80117a4 <LoRaMacMibSetRequestConfirm>

            /* Tell the MAC layer which network server version are we connecting too. */
            mibReq.Type = MIB_ABP_LORAWAN_VERSION;
 800c31c:	2329      	movs	r3, #41	@ 0x29
 800c31e:	723b      	strb	r3, [r7, #8]
            mibReq.Param.AbpLrWanVersion.Value = ABP_ACTIVATION_LRWAN_VERSION;
 800c320:	4b16      	ldr	r3, [pc, #88]	@ (800c37c <LmHandlerJoin+0xfc>)
 800c322:	60fb      	str	r3, [r7, #12]
            LoRaMacMibSetRequestConfirm(&mibReq);
 800c324:	f107 0308 	add.w	r3, r7, #8
 800c328:	4618      	mov	r0, r3
 800c32a:	f005 fa3b 	bl	80117a4 <LoRaMacMibSetRequestConfirm>
#endif /* USE_LRWAN_1_1_X_CRYPTO */
            SecureElementSetObjHandler(APP_S_KEY, KMS_APP_S_KEY_OBJECT_HANDLE);
#endif  /* LORAWAN_KMS == 1 */
        }

        LoRaMacStart();
 800c32e:	f004 ffa1 	bl	8011274 <LoRaMacStart>
        mibReq.Type = MIB_NETWORK_ACTIVATION;
 800c332:	2301      	movs	r3, #1
 800c334:	723b      	strb	r3, [r7, #8]
        mibReq.Param.NetworkActivation = ACTIVATION_TYPE_ABP;
 800c336:	2301      	movs	r3, #1
 800c338:	733b      	strb	r3, [r7, #12]
        LoRaMacMibSetRequestConfirm( &mibReq );
 800c33a:	f107 0308 	add.w	r3, r7, #8
 800c33e:	4618      	mov	r0, r3
 800c340:	f005 fa30 	bl	80117a4 <LoRaMacMibSetRequestConfirm>
        LmHandlerRequestClass(LmHandlerParams.DefaultClass);
#endif
    }

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    if ((CtxRestoreDone == false) || (forceRejoin == true))
 800c344:	4b0c      	ldr	r3, [pc, #48]	@ (800c378 <LmHandlerJoin+0xf8>)
 800c346:	781b      	ldrb	r3, [r3, #0]
 800c348:	f083 0301 	eor.w	r3, r3, #1
 800c34c:	b2db      	uxtb	r3, r3
 800c34e:	2b00      	cmp	r3, #0
 800c350:	d102      	bne.n	800c358 <LmHandlerJoin+0xd8>
 800c352:	79bb      	ldrb	r3, [r7, #6]
 800c354:	2b00      	cmp	r3, #0
 800c356:	d004      	beq.n	800c362 <LmHandlerJoin+0xe2>
    {
        // Starts the join procedure
        LoRaMacMlmeRequest( &mlmeReq );
 800c358:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800c35c:	4618      	mov	r0, r3
 800c35e:	f005 fd91 	bl	8011e84 <LoRaMacMlmeRequest>
    }
    DutyCycleWaitTime = mlmeReq.ReqReturn.DutyCycleWaitTime;
 800c362:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c364:	4a06      	ldr	r2, [pc, #24]	@ (800c380 <LmHandlerJoin+0x100>)
 800c366:	6013      	str	r3, [r2, #0]
#endif /* LORAMAC_VERSION */
}
 800c368:	bf00      	nop
 800c36a:	3740      	adds	r7, #64	@ 0x40
 800c36c:	46bd      	mov	sp, r7
 800c36e:	bd80      	pop	{r7, pc}
 800c370:	200004e0 	.word	0x200004e0
 800c374:	200000a8 	.word	0x200000a8
 800c378:	20000616 	.word	0x20000616
 800c37c:	01000400 	.word	0x01000400
 800c380:	2000051c 	.word	0x2000051c

0800c384 <LmHandlerJoinStatus>:

LmHandlerFlagStatus_t LmHandlerJoinStatus( void )
{
 800c384:	b580      	push	{r7, lr}
 800c386:	b08a      	sub	sp, #40	@ 0x28
 800c388:	af00      	add	r7, sp, #0
    MibRequestConfirm_t mibReq;
    LoRaMacStatus_t status;

    mibReq.Type = MIB_NETWORK_ACTIVATION;
 800c38a:	2301      	movs	r3, #1
 800c38c:	703b      	strb	r3, [r7, #0]
    status = LoRaMacMibGetRequestConfirm( &mibReq );
 800c38e:	463b      	mov	r3, r7
 800c390:	4618      	mov	r0, r3
 800c392:	f005 f861 	bl	8011458 <LoRaMacMibGetRequestConfirm>
 800c396:	4603      	mov	r3, r0
 800c398:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    if( status == LORAMAC_STATUS_OK )
 800c39c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c3a0:	2b00      	cmp	r3, #0
 800c3a2:	d106      	bne.n	800c3b2 <LmHandlerJoinStatus+0x2e>
    {
        if( mibReq.Param.NetworkActivation == ACTIVATION_TYPE_NONE )
 800c3a4:	793b      	ldrb	r3, [r7, #4]
 800c3a6:	2b00      	cmp	r3, #0
 800c3a8:	d101      	bne.n	800c3ae <LmHandlerJoinStatus+0x2a>
        {
            return LORAMAC_HANDLER_RESET;
 800c3aa:	2300      	movs	r3, #0
 800c3ac:	e002      	b.n	800c3b4 <LmHandlerJoinStatus+0x30>
        }
        else
        {
            return LORAMAC_HANDLER_SET;
 800c3ae:	2301      	movs	r3, #1
 800c3b0:	e000      	b.n	800c3b4 <LmHandlerJoinStatus+0x30>
        }
    }
    else
    {
        return LORAMAC_HANDLER_RESET;
 800c3b2:	2300      	movs	r3, #0
    }
}
 800c3b4:	4618      	mov	r0, r3
 800c3b6:	3728      	adds	r7, #40	@ 0x28
 800c3b8:	46bd      	mov	sp, r7
 800c3ba:	bd80      	pop	{r7, pc}

0800c3bc <LmHandlerSend>:

LmHandlerErrorStatus_t LmHandlerSend( LmHandlerAppData_t *appData, LmHandlerMsgTypes_t isTxConfirmed, bool allowDelayedTx )
{
 800c3bc:	b580      	push	{r7, lr}
 800c3be:	b08a      	sub	sp, #40	@ 0x28
 800c3c0:	af00      	add	r7, sp, #0
 800c3c2:	6078      	str	r0, [r7, #4]
 800c3c4:	460b      	mov	r3, r1
 800c3c6:	70fb      	strb	r3, [r7, #3]
 800c3c8:	4613      	mov	r3, r2
 800c3ca:	70bb      	strb	r3, [r7, #2]
    LoRaMacStatus_t status;
    LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_ERROR;
 800c3cc:	23ff      	movs	r3, #255	@ 0xff
 800c3ce:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    McpsReq_t mcpsReq;
    LoRaMacTxInfo_t txInfo;

    if (LoRaMacIsBusy() == true)
 800c3d2:	f002 f9c9 	bl	800e768 <LoRaMacIsBusy>
 800c3d6:	4603      	mov	r3, r0
 800c3d8:	2b00      	cmp	r3, #0
 800c3da:	d002      	beq.n	800c3e2 <LmHandlerSend+0x26>
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800c3dc:	f06f 0301 	mvn.w	r3, #1
 800c3e0:	e0a3      	b.n	800c52a <LmHandlerSend+0x16e>
    }

    if( LmHandlerJoinStatus( ) != LORAMAC_HANDLER_SET )
 800c3e2:	f7ff ffcf 	bl	800c384 <LmHandlerJoinStatus>
 800c3e6:	4603      	mov	r3, r0
 800c3e8:	2b01      	cmp	r3, #1
 800c3ea:	d00a      	beq.n	800c402 <LmHandlerSend+0x46>
    {
        // The network isn't joined, try again.
        LmHandlerJoin( JoinParams.Mode, JoinParams.forceRejoin );
 800c3ec:	4b51      	ldr	r3, [pc, #324]	@ (800c534 <LmHandlerSend+0x178>)
 800c3ee:	799b      	ldrb	r3, [r3, #6]
 800c3f0:	4a50      	ldr	r2, [pc, #320]	@ (800c534 <LmHandlerSend+0x178>)
 800c3f2:	79d2      	ldrb	r2, [r2, #7]
 800c3f4:	4611      	mov	r1, r2
 800c3f6:	4618      	mov	r0, r3
 800c3f8:	f7ff ff42 	bl	800c280 <LmHandlerJoin>
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800c3fc:	f06f 0302 	mvn.w	r3, #2
 800c400:	e093      	b.n	800c52a <LmHandlerSend+0x16e>
    {
        return LORAMAC_HANDLER_COMPLIANCE_RUNNING;
    }
#endif /* LORAMAC_VERSION */

    TxParams.MsgType = isTxConfirmed;
 800c402:	4a4d      	ldr	r2, [pc, #308]	@ (800c538 <LmHandlerSend+0x17c>)
 800c404:	78fb      	ldrb	r3, [r7, #3]
 800c406:	7213      	strb	r3, [r2, #8]
    mcpsReq.Type = ( isTxConfirmed == LORAMAC_HANDLER_UNCONFIRMED_MSG ) ? MCPS_UNCONFIRMED : MCPS_CONFIRMED;
 800c408:	78fb      	ldrb	r3, [r7, #3]
 800c40a:	2b00      	cmp	r3, #0
 800c40c:	bf14      	ite	ne
 800c40e:	2301      	movne	r3, #1
 800c410:	2300      	moveq	r3, #0
 800c412:	b2db      	uxtb	r3, r3
 800c414:	743b      	strb	r3, [r7, #16]
    mcpsReq.Req.Unconfirmed.Datarate = LmHandlerParams.TxDatarate;
 800c416:	4b49      	ldr	r3, [pc, #292]	@ (800c53c <LmHandlerSend+0x180>)
 800c418:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800c41c:	77bb      	strb	r3, [r7, #30]
    if( LoRaMacQueryTxPossible( appData->BufferSize, &txInfo ) != LORAMAC_STATUS_OK )
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	785b      	ldrb	r3, [r3, #1]
 800c422:	f107 020c 	add.w	r2, r7, #12
 800c426:	4611      	mov	r1, r2
 800c428:	4618      	mov	r0, r3
 800c42a:	f004 ff85 	bl	8011338 <LoRaMacQueryTxPossible>
 800c42e:	4603      	mov	r3, r0
 800c430:	2b00      	cmp	r3, #0
 800c432:	d009      	beq.n	800c448 <LmHandlerSend+0x8c>
    {
        // Send empty frame in order to flush MAC commands
        mcpsReq.Type = MCPS_UNCONFIRMED;
 800c434:	2300      	movs	r3, #0
 800c436:	743b      	strb	r3, [r7, #16]
        mcpsReq.Req.Unconfirmed.fBuffer = NULL;
 800c438:	2300      	movs	r3, #0
 800c43a:	61bb      	str	r3, [r7, #24]
        mcpsReq.Req.Unconfirmed.fBufferSize = 0;
 800c43c:	2300      	movs	r3, #0
 800c43e:	83bb      	strh	r3, [r7, #28]
        lmhStatus = LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED;
 800c440:	23f9      	movs	r3, #249	@ 0xf9
 800c442:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800c446:	e008      	b.n	800c45a <LmHandlerSend+0x9e>
    }
    else
    {
        mcpsReq.Req.Unconfirmed.fPort = appData->Port;
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	781b      	ldrb	r3, [r3, #0]
 800c44c:	753b      	strb	r3, [r7, #20]
        mcpsReq.Req.Unconfirmed.fBufferSize = appData->BufferSize;
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	785b      	ldrb	r3, [r3, #1]
 800c452:	83bb      	strh	r3, [r7, #28]
        mcpsReq.Req.Unconfirmed.fBuffer = appData->Buffer;
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	685b      	ldr	r3, [r3, #4]
 800c458:	61bb      	str	r3, [r7, #24]
    }

    TxParams.AppData = *appData;
 800c45a:	4b37      	ldr	r3, [pc, #220]	@ (800c538 <LmHandlerSend+0x17c>)
 800c45c:	687a      	ldr	r2, [r7, #4]
 800c45e:	3310      	adds	r3, #16
 800c460:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c464:	e883 0003 	stmia.w	r3, {r0, r1}
    TxParams.Datarate = LmHandlerParams.TxDatarate;
 800c468:	4b34      	ldr	r3, [pc, #208]	@ (800c53c <LmHandlerSend+0x180>)
 800c46a:	f993 2004 	ldrsb.w	r2, [r3, #4]
 800c46e:	4b32      	ldr	r3, [pc, #200]	@ (800c538 <LmHandlerSend+0x17c>)
 800c470:	729a      	strb	r2, [r3, #10]

    status = LoRaMacMcpsRequest(&mcpsReq, allowDelayedTx);
 800c472:	78ba      	ldrb	r2, [r7, #2]
 800c474:	f107 0310 	add.w	r3, r7, #16
 800c478:	4611      	mov	r1, r2
 800c47a:	4618      	mov	r0, r3
 800c47c:	f005 fe88 	bl	8012190 <LoRaMacMcpsRequest>
 800c480:	4603      	mov	r3, r0
 800c482:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    DutyCycleWaitTime = mcpsReq.ReqReturn.DutyCycleWaitTime;
 800c486:	6a3b      	ldr	r3, [r7, #32]
 800c488:	4a2d      	ldr	r2, [pc, #180]	@ (800c540 <LmHandlerSend+0x184>)
 800c48a:	6013      	str	r3, [r2, #0]

    switch (status)
 800c48c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800c490:	2b11      	cmp	r3, #17
 800c492:	d843      	bhi.n	800c51c <LmHandlerSend+0x160>
 800c494:	a201      	add	r2, pc, #4	@ (adr r2, 800c49c <LmHandlerSend+0xe0>)
 800c496:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c49a:	bf00      	nop
 800c49c:	0800c4e5 	.word	0x0800c4e5
 800c4a0:	0800c4fd 	.word	0x0800c4fd
 800c4a4:	0800c51d 	.word	0x0800c51d
 800c4a8:	0800c51d 	.word	0x0800c51d
 800c4ac:	0800c51d 	.word	0x0800c51d
 800c4b0:	0800c51d 	.word	0x0800c51d
 800c4b4:	0800c51d 	.word	0x0800c51d
 800c4b8:	0800c505 	.word	0x0800c505
 800c4bc:	0800c51d 	.word	0x0800c51d
 800c4c0:	0800c51d 	.word	0x0800c51d
 800c4c4:	0800c51d 	.word	0x0800c51d
 800c4c8:	0800c515 	.word	0x0800c515
 800c4cc:	0800c51d 	.word	0x0800c51d
 800c4d0:	0800c51d 	.word	0x0800c51d
 800c4d4:	0800c4fd 	.word	0x0800c4fd
 800c4d8:	0800c4fd 	.word	0x0800c4fd
 800c4dc:	0800c4fd 	.word	0x0800c4fd
 800c4e0:	0800c50d 	.word	0x0800c50d
    {
        case LORAMAC_STATUS_OK:
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
            IsUplinkTxPending = false;
 800c4e4:	4b17      	ldr	r3, [pc, #92]	@ (800c544 <LmHandlerSend+0x188>)
 800c4e6:	2200      	movs	r2, #0
 800c4e8:	701a      	strb	r2, [r3, #0]
#endif /* LORAMAC_VERSION */
            if (lmhStatus != LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED)
 800c4ea:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800c4ee:	f113 0f07 	cmn.w	r3, #7
 800c4f2:	d017      	beq.n	800c524 <LmHandlerSend+0x168>
            {
                lmhStatus = LORAMAC_HANDLER_SUCCESS;
 800c4f4:	2300      	movs	r3, #0
 800c4f6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            }
            break;
 800c4fa:	e013      	b.n	800c524 <LmHandlerSend+0x168>
        case LORAMAC_STATUS_BUSY:
        case LORAMAC_STATUS_BUSY_UPLINK_COLLISION:
        case LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME:
        case LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME:
            lmhStatus = LORAMAC_HANDLER_BUSY_ERROR;
 800c4fc:	23fe      	movs	r3, #254	@ 0xfe
 800c4fe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 800c502:	e010      	b.n	800c526 <LmHandlerSend+0x16a>
        case LORAMAC_STATUS_NO_NETWORK_JOINED:
            lmhStatus = LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800c504:	23fd      	movs	r3, #253	@ 0xfd
 800c506:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 800c50a:	e00c      	b.n	800c526 <LmHandlerSend+0x16a>
        case LORAMAC_STATUS_CRYPTO_ERROR:
            lmhStatus = LORAMAC_HANDLER_CRYPTO_ERROR;
 800c50c:	23fb      	movs	r3, #251	@ 0xfb
 800c50e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 800c512:	e008      	b.n	800c526 <LmHandlerSend+0x16a>
        case LORAMAC_STATUS_DUTYCYCLE_RESTRICTED:
            lmhStatus = LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED;
 800c514:	23fa      	movs	r3, #250	@ 0xfa
 800c516:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 800c51a:	e004      	b.n	800c526 <LmHandlerSend+0x16a>
        case LORAMAC_STATUS_REGION_NOT_SUPPORTED:
        case LORAMAC_STATUS_NO_FREE_CHANNEL_FOUND:
        case LORAMAC_STATUS_NO_CHANNEL_FOUND:
        case LORAMAC_STATUS_LENGTH_ERROR:
        default:
            lmhStatus = LORAMAC_HANDLER_ERROR;
 800c51c:	23ff      	movs	r3, #255	@ 0xff
 800c51e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 800c522:	e000      	b.n	800c526 <LmHandlerSend+0x16a>
            break;
 800c524:	bf00      	nop
    }

    return lmhStatus;
 800c526:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 800c52a:	4618      	mov	r0, r3
 800c52c:	3728      	adds	r7, #40	@ 0x28
 800c52e:	46bd      	mov	sp, r7
 800c530:	bd80      	pop	{r7, pc}
 800c532:	bf00      	nop
 800c534:	200000a8 	.word	0x200000a8
 800c538:	200000b0 	.word	0x200000b0
 800c53c:	200004e0 	.word	0x200004e0
 800c540:	2000051c 	.word	0x2000051c
 800c544:	20000520 	.word	0x20000520

0800c548 <LmHandlerDeviceTimeReq>:

LmHandlerErrorStatus_t LmHandlerDeviceTimeReq( void )
{
 800c548:	b580      	push	{r7, lr}
 800c54a:	b086      	sub	sp, #24
 800c54c:	af00      	add	r7, sp, #0
    LoRaMacStatus_t status;
    MlmeReq_t mlmeReq;

    mlmeReq.Type = MLME_DEVICE_TIME;
 800c54e:	2309      	movs	r3, #9
 800c550:	703b      	strb	r3, [r7, #0]

    status = LoRaMacMlmeRequest( &mlmeReq );
 800c552:	463b      	mov	r3, r7
 800c554:	4618      	mov	r0, r3
 800c556:	f005 fc95 	bl	8011e84 <LoRaMacMlmeRequest>
 800c55a:	4603      	mov	r3, r0
 800c55c:	75fb      	strb	r3, [r7, #23]
    DutyCycleWaitTime = mlmeReq.ReqReturn.DutyCycleWaitTime;
 800c55e:	693b      	ldr	r3, [r7, #16]
 800c560:	4a06      	ldr	r2, [pc, #24]	@ (800c57c <LmHandlerDeviceTimeReq+0x34>)
 800c562:	6013      	str	r3, [r2, #0]

    if( status == LORAMAC_STATUS_OK )
 800c564:	7dfb      	ldrb	r3, [r7, #23]
 800c566:	2b00      	cmp	r3, #0
 800c568:	d101      	bne.n	800c56e <LmHandlerDeviceTimeReq+0x26>
    {
        return LORAMAC_HANDLER_SUCCESS;
 800c56a:	2300      	movs	r3, #0
 800c56c:	e001      	b.n	800c572 <LmHandlerDeviceTimeReq+0x2a>
    }
    else
    {
        return LORAMAC_HANDLER_ERROR;
 800c56e:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 800c572:	4618      	mov	r0, r3
 800c574:	3718      	adds	r7, #24
 800c576:	46bd      	mov	sp, r7
 800c578:	bd80      	pop	{r7, pc}
 800c57a:	bf00      	nop
 800c57c:	2000051c 	.word	0x2000051c

0800c580 <LmHandlerPingSlotReq>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED == 1 */

LmHandlerErrorStatus_t LmHandlerPingSlotReq( uint8_t periodicity )
{
 800c580:	b480      	push	{r7}
 800c582:	b083      	sub	sp, #12
 800c584:	af00      	add	r7, sp, #0
 800c586:	4603      	mov	r3, r0
 800c588:	71fb      	strb	r3, [r7, #7]
        return LmHandlerSend( &appData, LmHandlerParams.IsTxConfirmed, false );
    }
    else
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
    {
        return LORAMAC_HANDLER_ERROR;
 800c58a:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 800c58e:	4618      	mov	r0, r3
 800c590:	370c      	adds	r7, #12
 800c592:	46bd      	mov	sp, r7
 800c594:	bc80      	pop	{r7}
 800c596:	4770      	bx	lr

0800c598 <LmHandlerRequestClass>:

LmHandlerErrorStatus_t LmHandlerRequestClass( DeviceClass_t newClass )
{
 800c598:	b580      	push	{r7, lr}
 800c59a:	b08c      	sub	sp, #48	@ 0x30
 800c59c:	af00      	add	r7, sp, #0
 800c59e:	4603      	mov	r3, r0
 800c5a0:	71fb      	strb	r3, [r7, #7]
    MibRequestConfirm_t mibReq;
    DeviceClass_t currentClass;
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 800c5a2:	2300      	movs	r3, #0
 800c5a4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    if (LoRaMacIsBusy() == true)
 800c5a8:	f002 f8de 	bl	800e768 <LoRaMacIsBusy>
 800c5ac:	4603      	mov	r3, r0
 800c5ae:	2b00      	cmp	r3, #0
 800c5b0:	d002      	beq.n	800c5b8 <LmHandlerRequestClass+0x20>
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800c5b2:	f06f 0301 	mvn.w	r3, #1
 800c5b6:	e071      	b.n	800c69c <LmHandlerRequestClass+0x104>
    }

    if (LmHandlerJoinStatus() != LORAMAC_HANDLER_SET)
 800c5b8:	f7ff fee4 	bl	800c384 <LmHandlerJoinStatus>
 800c5bc:	4603      	mov	r3, r0
 800c5be:	2b01      	cmp	r3, #1
 800c5c0:	d002      	beq.n	800c5c8 <LmHandlerRequestClass+0x30>
    {
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800c5c2:	f06f 0302 	mvn.w	r3, #2
 800c5c6:	e069      	b.n	800c69c <LmHandlerRequestClass+0x104>
    }

    mibReq.Type = MIB_DEVICE_CLASS;
 800c5c8:	2300      	movs	r3, #0
 800c5ca:	723b      	strb	r3, [r7, #8]
    if ( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800c5cc:	f107 0308 	add.w	r3, r7, #8
 800c5d0:	4618      	mov	r0, r3
 800c5d2:	f004 ff41 	bl	8011458 <LoRaMacMibGetRequestConfirm>
 800c5d6:	4603      	mov	r3, r0
 800c5d8:	2b00      	cmp	r3, #0
 800c5da:	d002      	beq.n	800c5e2 <LmHandlerRequestClass+0x4a>
    {
        return LORAMAC_HANDLER_ERROR;
 800c5dc:	f04f 33ff 	mov.w	r3, #4294967295
 800c5e0:	e05c      	b.n	800c69c <LmHandlerRequestClass+0x104>
    }
    currentClass = mibReq.Param.Class;
 800c5e2:	7b3b      	ldrb	r3, [r7, #12]
 800c5e4:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e

    // Attempt to switch only if class update
    if( currentClass != newClass )
 800c5e8:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 800c5ec:	79fb      	ldrb	r3, [r7, #7]
 800c5ee:	429a      	cmp	r2, r3
 800c5f0:	d052      	beq.n	800c698 <LmHandlerRequestClass+0x100>
    {
        switch( newClass )
 800c5f2:	79fb      	ldrb	r3, [r7, #7]
 800c5f4:	2b02      	cmp	r3, #2
 800c5f6:	d028      	beq.n	800c64a <LmHandlerRequestClass+0xb2>
 800c5f8:	2b02      	cmp	r3, #2
 800c5fa:	dc48      	bgt.n	800c68e <LmHandlerRequestClass+0xf6>
 800c5fc:	2b00      	cmp	r3, #0
 800c5fe:	d002      	beq.n	800c606 <LmHandlerRequestClass+0x6e>
 800c600:	2b01      	cmp	r3, #1
 800c602:	d01e      	beq.n	800c642 <LmHandlerRequestClass+0xaa>
                    }
                }
            }
            break;
        default:
            break;
 800c604:	e043      	b.n	800c68e <LmHandlerRequestClass+0xf6>
                if( currentClass != CLASS_A )
 800c606:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800c60a:	2b00      	cmp	r3, #0
 800c60c:	d041      	beq.n	800c692 <LmHandlerRequestClass+0xfa>
                    mibReq.Param.Class = newClass;
 800c60e:	79fb      	ldrb	r3, [r7, #7]
 800c610:	733b      	strb	r3, [r7, #12]
                    if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 800c612:	f107 0308 	add.w	r3, r7, #8
 800c616:	4618      	mov	r0, r3
 800c618:	f005 f8c4 	bl	80117a4 <LoRaMacMibSetRequestConfirm>
 800c61c:	4603      	mov	r3, r0
 800c61e:	2b00      	cmp	r3, #0
 800c620:	d10b      	bne.n	800c63a <LmHandlerRequestClass+0xa2>
                        if (LmHandlerCallbacks->OnClassChange != NULL)
 800c622:	4b20      	ldr	r3, [pc, #128]	@ (800c6a4 <LmHandlerRequestClass+0x10c>)
 800c624:	681b      	ldr	r3, [r3, #0]
 800c626:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c628:	2b00      	cmp	r3, #0
 800c62a:	d032      	beq.n	800c692 <LmHandlerRequestClass+0xfa>
                            LmHandlerCallbacks->OnClassChange( newClass );
 800c62c:	4b1d      	ldr	r3, [pc, #116]	@ (800c6a4 <LmHandlerRequestClass+0x10c>)
 800c62e:	681b      	ldr	r3, [r3, #0]
 800c630:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c632:	79fa      	ldrb	r2, [r7, #7]
 800c634:	4610      	mov	r0, r2
 800c636:	4798      	blx	r3
            break;
 800c638:	e02b      	b.n	800c692 <LmHandlerRequestClass+0xfa>
                        errorStatus = LORAMAC_HANDLER_ERROR;
 800c63a:	23ff      	movs	r3, #255	@ 0xff
 800c63c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            break;
 800c640:	e027      	b.n	800c692 <LmHandlerRequestClass+0xfa>
                errorStatus = LORAMAC_HANDLER_ERROR;
 800c642:	23ff      	movs	r3, #255	@ 0xff
 800c644:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            break;
 800c648:	e026      	b.n	800c698 <LmHandlerRequestClass+0x100>
                if( currentClass != CLASS_A )
 800c64a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800c64e:	2b00      	cmp	r3, #0
 800c650:	d003      	beq.n	800c65a <LmHandlerRequestClass+0xc2>
                    errorStatus = LORAMAC_HANDLER_ERROR;
 800c652:	23ff      	movs	r3, #255	@ 0xff
 800c654:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            break;
 800c658:	e01d      	b.n	800c696 <LmHandlerRequestClass+0xfe>
                    mibReq.Param.Class = newClass;
 800c65a:	79fb      	ldrb	r3, [r7, #7]
 800c65c:	733b      	strb	r3, [r7, #12]
                    if (LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK)
 800c65e:	f107 0308 	add.w	r3, r7, #8
 800c662:	4618      	mov	r0, r3
 800c664:	f005 f89e 	bl	80117a4 <LoRaMacMibSetRequestConfirm>
 800c668:	4603      	mov	r3, r0
 800c66a:	2b00      	cmp	r3, #0
 800c66c:	d10b      	bne.n	800c686 <LmHandlerRequestClass+0xee>
                        if (LmHandlerCallbacks->OnClassChange != NULL)
 800c66e:	4b0d      	ldr	r3, [pc, #52]	@ (800c6a4 <LmHandlerRequestClass+0x10c>)
 800c670:	681b      	ldr	r3, [r3, #0]
 800c672:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c674:	2b00      	cmp	r3, #0
 800c676:	d00e      	beq.n	800c696 <LmHandlerRequestClass+0xfe>
                            LmHandlerCallbacks->OnClassChange( newClass );
 800c678:	4b0a      	ldr	r3, [pc, #40]	@ (800c6a4 <LmHandlerRequestClass+0x10c>)
 800c67a:	681b      	ldr	r3, [r3, #0]
 800c67c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c67e:	79fa      	ldrb	r2, [r7, #7]
 800c680:	4610      	mov	r0, r2
 800c682:	4798      	blx	r3
            break;
 800c684:	e007      	b.n	800c696 <LmHandlerRequestClass+0xfe>
                        errorStatus = LORAMAC_HANDLER_ERROR;
 800c686:	23ff      	movs	r3, #255	@ 0xff
 800c688:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            break;
 800c68c:	e003      	b.n	800c696 <LmHandlerRequestClass+0xfe>
            break;
 800c68e:	bf00      	nop
 800c690:	e002      	b.n	800c698 <LmHandlerRequestClass+0x100>
            break;
 800c692:	bf00      	nop
 800c694:	e000      	b.n	800c698 <LmHandlerRequestClass+0x100>
            break;
 800c696:	bf00      	nop
        }
    }
    return errorStatus;
 800c698:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 800c69c:	4618      	mov	r0, r3
 800c69e:	3730      	adds	r7, #48	@ 0x30
 800c6a0:	46bd      	mov	sp, r7
 800c6a2:	bd80      	pop	{r7, pc}
 800c6a4:	200004f4 	.word	0x200004f4

0800c6a8 <LmHandlerGetCurrentClass>:

LmHandlerErrorStatus_t LmHandlerGetCurrentClass( DeviceClass_t *deviceClass )
{
 800c6a8:	b580      	push	{r7, lr}
 800c6aa:	b08c      	sub	sp, #48	@ 0x30
 800c6ac:	af00      	add	r7, sp, #0
 800c6ae:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
    if (deviceClass == NULL)
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	2b00      	cmp	r3, #0
 800c6b4:	d102      	bne.n	800c6bc <LmHandlerGetCurrentClass+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 800c6b6:	f04f 33ff 	mov.w	r3, #4294967295
 800c6ba:	e010      	b.n	800c6de <LmHandlerGetCurrentClass+0x36>
    }

    mibReq.Type = MIB_DEVICE_CLASS;
 800c6bc:	2300      	movs	r3, #0
 800c6be:	733b      	strb	r3, [r7, #12]
    if (LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK)
 800c6c0:	f107 030c 	add.w	r3, r7, #12
 800c6c4:	4618      	mov	r0, r3
 800c6c6:	f004 fec7 	bl	8011458 <LoRaMacMibGetRequestConfirm>
 800c6ca:	4603      	mov	r3, r0
 800c6cc:	2b00      	cmp	r3, #0
 800c6ce:	d002      	beq.n	800c6d6 <LmHandlerGetCurrentClass+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 800c6d0:	f04f 33ff 	mov.w	r3, #4294967295
 800c6d4:	e003      	b.n	800c6de <LmHandlerGetCurrentClass+0x36>
    }

    *deviceClass = mibReq.Param.Class;
 800c6d6:	7c3a      	ldrb	r2, [r7, #16]
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	701a      	strb	r2, [r3, #0]
    return LORAMAC_HANDLER_SUCCESS;
 800c6dc:	2300      	movs	r3, #0
}
 800c6de:	4618      	mov	r0, r3
 800c6e0:	3730      	adds	r7, #48	@ 0x30
 800c6e2:	46bd      	mov	sp, r7
 800c6e4:	bd80      	pop	{r7, pc}
	...

0800c6e8 <LmHandlerGetTxDatarate>:

LmHandlerErrorStatus_t LmHandlerGetTxDatarate( int8_t *txDatarate )
{
 800c6e8:	b580      	push	{r7, lr}
 800c6ea:	b08c      	sub	sp, #48	@ 0x30
 800c6ec:	af00      	add	r7, sp, #0
 800c6ee:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibGet;
    if (txDatarate == NULL)
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	2b00      	cmp	r3, #0
 800c6f4:	d102      	bne.n	800c6fc <LmHandlerGetTxDatarate+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 800c6f6:	f04f 33ff 	mov.w	r3, #4294967295
 800c6fa:	e016      	b.n	800c72a <LmHandlerGetTxDatarate+0x42>
    }

    mibGet.Type = MIB_CHANNELS_DATARATE;
 800c6fc:	2320      	movs	r3, #32
 800c6fe:	733b      	strb	r3, [r7, #12]
    if (LoRaMacMibGetRequestConfirm( &mibGet ) != LORAMAC_STATUS_OK)
 800c700:	f107 030c 	add.w	r3, r7, #12
 800c704:	4618      	mov	r0, r3
 800c706:	f004 fea7 	bl	8011458 <LoRaMacMibGetRequestConfirm>
 800c70a:	4603      	mov	r3, r0
 800c70c:	2b00      	cmp	r3, #0
 800c70e:	d002      	beq.n	800c716 <LmHandlerGetTxDatarate+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 800c710:	f04f 33ff 	mov.w	r3, #4294967295
 800c714:	e009      	b.n	800c72a <LmHandlerGetTxDatarate+0x42>
    }

    *txDatarate = mibGet.Param.ChannelsDatarate;
 800c716:	f997 2010 	ldrsb.w	r2, [r7, #16]
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	701a      	strb	r2, [r3, #0]
    LmHandlerParams.TxDatarate = *txDatarate;
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	f993 2000 	ldrsb.w	r2, [r3]
 800c724:	4b03      	ldr	r3, [pc, #12]	@ (800c734 <LmHandlerGetTxDatarate+0x4c>)
 800c726:	711a      	strb	r2, [r3, #4]
    return LORAMAC_HANDLER_SUCCESS;
 800c728:	2300      	movs	r3, #0
}
 800c72a:	4618      	mov	r0, r3
 800c72c:	3730      	adds	r7, #48	@ 0x30
 800c72e:	46bd      	mov	sp, r7
 800c730:	bd80      	pop	{r7, pc}
 800c732:	bf00      	nop
 800c734:	200004e0 	.word	0x200004e0

0800c738 <LmHandlerSetSystemMaxRxError>:
    *region = LmHandlerParams.ActiveRegion;
    return LORAMAC_HANDLER_SUCCESS;
}

LmHandlerErrorStatus_t LmHandlerSetSystemMaxRxError( uint32_t maxErrorInMs )
{
 800c738:	b580      	push	{r7, lr}
 800c73a:	b08c      	sub	sp, #48	@ 0x30
 800c73c:	af00      	add	r7, sp, #0
 800c73e:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;

    mibReq.Type = MIB_SYSTEM_MAX_RX_ERROR;
 800c740:	2323      	movs	r3, #35	@ 0x23
 800c742:	733b      	strb	r3, [r7, #12]
    mibReq.Param.SystemMaxRxError = maxErrorInMs;
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	613b      	str	r3, [r7, #16]
    if( LoRaMacMibSetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800c748:	f107 030c 	add.w	r3, r7, #12
 800c74c:	4618      	mov	r0, r3
 800c74e:	f005 f829 	bl	80117a4 <LoRaMacMibSetRequestConfirm>
 800c752:	4603      	mov	r3, r0
 800c754:	2b00      	cmp	r3, #0
 800c756:	d002      	beq.n	800c75e <LmHandlerSetSystemMaxRxError+0x26>
    {
        return LORAMAC_HANDLER_ERROR;
 800c758:	f04f 33ff 	mov.w	r3, #4294967295
 800c75c:	e000      	b.n	800c760 <LmHandlerSetSystemMaxRxError+0x28>
    }
    return LORAMAC_HANDLER_SUCCESS;
 800c75e:	2300      	movs	r3, #0
}
 800c760:	4618      	mov	r0, r3
 800c762:	3730      	adds	r7, #48	@ 0x30
 800c764:	46bd      	mov	sp, r7
 800c766:	bd80      	pop	{r7, pc}

0800c768 <McpsConfirm>:
 * LORAMAC NOTIFICATIONS HANDLING
 *=============================================================================
 */

static void McpsConfirm( McpsConfirm_t *mcpsConfirm )
{
 800c768:	b580      	push	{r7, lr}
 800c76a:	b082      	sub	sp, #8
 800c76c:	af00      	add	r7, sp, #0
 800c76e:	6078      	str	r0, [r7, #4]
    TxParams.IsMcpsConfirm = 1;
 800c770:	4b15      	ldr	r3, [pc, #84]	@ (800c7c8 <McpsConfirm+0x60>)
 800c772:	2201      	movs	r2, #1
 800c774:	701a      	strb	r2, [r3, #0]
    TxParams.Status = mcpsConfirm->Status;
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	785a      	ldrb	r2, [r3, #1]
 800c77a:	4b13      	ldr	r3, [pc, #76]	@ (800c7c8 <McpsConfirm+0x60>)
 800c77c:	705a      	strb	r2, [r3, #1]
    TxParams.Datarate = mcpsConfirm->Datarate;
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	789b      	ldrb	r3, [r3, #2]
 800c782:	b25a      	sxtb	r2, r3
 800c784:	4b10      	ldr	r3, [pc, #64]	@ (800c7c8 <McpsConfirm+0x60>)
 800c786:	729a      	strb	r2, [r3, #10]
    TxParams.UplinkCounter = mcpsConfirm->UpLinkCounter;
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	68db      	ldr	r3, [r3, #12]
 800c78c:	4a0e      	ldr	r2, [pc, #56]	@ (800c7c8 <McpsConfirm+0x60>)
 800c78e:	60d3      	str	r3, [r2, #12]
    TxParams.TxPower = mcpsConfirm->TxPower;
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	f993 2003 	ldrsb.w	r2, [r3, #3]
 800c796:	4b0c      	ldr	r3, [pc, #48]	@ (800c7c8 <McpsConfirm+0x60>)
 800c798:	761a      	strb	r2, [r3, #24]
    TxParams.Channel = mcpsConfirm->Channel;
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	691b      	ldr	r3, [r3, #16]
 800c79e:	b2da      	uxtb	r2, r3
 800c7a0:	4b09      	ldr	r3, [pc, #36]	@ (800c7c8 <McpsConfirm+0x60>)
 800c7a2:	765a      	strb	r2, [r3, #25]
    TxParams.AckReceived = mcpsConfirm->AckReceived;
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	791b      	ldrb	r3, [r3, #4]
 800c7a8:	461a      	mov	r2, r3
 800c7aa:	4b07      	ldr	r3, [pc, #28]	@ (800c7c8 <McpsConfirm+0x60>)
 800c7ac:	725a      	strb	r2, [r3, #9]

    LmHandlerCallbacks->OnTxData( &TxParams );
 800c7ae:	4b07      	ldr	r3, [pc, #28]	@ (800c7cc <McpsConfirm+0x64>)
 800c7b0:	681b      	ldr	r3, [r3, #0]
 800c7b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c7b4:	4804      	ldr	r0, [pc, #16]	@ (800c7c8 <McpsConfirm+0x60>)
 800c7b6:	4798      	blx	r3

    LmHandlerPackagesNotify( PACKAGE_MCPS_CONFIRM, mcpsConfirm );
 800c7b8:	6879      	ldr	r1, [r7, #4]
 800c7ba:	2000      	movs	r0, #0
 800c7bc:	f000 f9c6 	bl	800cb4c <LmHandlerPackagesNotify>
}
 800c7c0:	bf00      	nop
 800c7c2:	3708      	adds	r7, #8
 800c7c4:	46bd      	mov	sp, r7
 800c7c6:	bd80      	pop	{r7, pc}
 800c7c8:	200000b0 	.word	0x200000b0
 800c7cc:	200004f4 	.word	0x200004f4

0800c7d0 <McpsIndication>:

static void McpsIndication( McpsIndication_t *mcpsIndication, LoRaMacRxStatus_t *rxStatus )
{
 800c7d0:	b580      	push	{r7, lr}
 800c7d2:	b086      	sub	sp, #24
 800c7d4:	af00      	add	r7, sp, #0
 800c7d6:	6078      	str	r0, [r7, #4]
 800c7d8:	6039      	str	r1, [r7, #0]
    LmHandlerAppData_t appData;
    DeviceClass_t deviceClass = CLASS_A;
 800c7da:	2300      	movs	r3, #0
 800c7dc:	73fb      	strb	r3, [r7, #15]
    RxParams.IsMcpsIndication = 1;
 800c7de:	4b2c      	ldr	r3, [pc, #176]	@ (800c890 <McpsIndication+0xc0>)
 800c7e0:	2201      	movs	r2, #1
 800c7e2:	701a      	strb	r2, [r3, #0]
    RxParams.Status = mcpsIndication->Status;
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	785a      	ldrb	r2, [r3, #1]
 800c7e8:	4b29      	ldr	r3, [pc, #164]	@ (800c890 <McpsIndication+0xc0>)
 800c7ea:	705a      	strb	r2, [r3, #1]

    if( RxParams.Status != LORAMAC_EVENT_INFO_STATUS_OK )
 800c7ec:	4b28      	ldr	r3, [pc, #160]	@ (800c890 <McpsIndication+0xc0>)
 800c7ee:	785b      	ldrb	r3, [r3, #1]
 800c7f0:	2b00      	cmp	r3, #0
 800c7f2:	d149      	bne.n	800c888 <McpsIndication+0xb8>
    {
        return;
    }

    RxParams.Datarate = mcpsIndication->RxDatarate;
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	791b      	ldrb	r3, [r3, #4]
 800c7f8:	b25a      	sxtb	r2, r3
 800c7fa:	4b25      	ldr	r3, [pc, #148]	@ (800c890 <McpsIndication+0xc0>)
 800c7fc:	721a      	strb	r2, [r3, #8]
    RxParams.Rssi = rxStatus->Rssi;
 800c7fe:	683b      	ldr	r3, [r7, #0]
 800c800:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c804:	b25a      	sxtb	r2, r3
 800c806:	4b22      	ldr	r3, [pc, #136]	@ (800c890 <McpsIndication+0xc0>)
 800c808:	725a      	strb	r2, [r3, #9]
    RxParams.Snr = rxStatus->Snr;
 800c80a:	683b      	ldr	r3, [r7, #0]
 800c80c:	f993 2002 	ldrsb.w	r2, [r3, #2]
 800c810:	4b1f      	ldr	r3, [pc, #124]	@ (800c890 <McpsIndication+0xc0>)
 800c812:	729a      	strb	r2, [r3, #10]
    RxParams.RxSlot = rxStatus->RxSlot;
 800c814:	683b      	ldr	r3, [r7, #0]
 800c816:	78da      	ldrb	r2, [r3, #3]
 800c818:	4b1d      	ldr	r3, [pc, #116]	@ (800c890 <McpsIndication+0xc0>)
 800c81a:	741a      	strb	r2, [r3, #16]
    RxParams.DownlinkCounter = mcpsIndication->DownLinkCounter;
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	691b      	ldr	r3, [r3, #16]
 800c820:	4a1b      	ldr	r2, [pc, #108]	@ (800c890 <McpsIndication+0xc0>)
 800c822:	60d3      	str	r3, [r2, #12]

    appData.Port = mcpsIndication->Port;
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	78db      	ldrb	r3, [r3, #3]
 800c828:	743b      	strb	r3, [r7, #16]
    appData.BufferSize = mcpsIndication->BufferSize;
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	7b1b      	ldrb	r3, [r3, #12]
 800c82e:	747b      	strb	r3, [r7, #17]
    appData.Buffer = mcpsIndication->Buffer;
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	689b      	ldr	r3, [r3, #8]
 800c834:	617b      	str	r3, [r7, #20]

    LmHandlerCallbacks->OnRxData( &appData, &RxParams );
 800c836:	4b17      	ldr	r3, [pc, #92]	@ (800c894 <McpsIndication+0xc4>)
 800c838:	681b      	ldr	r3, [r3, #0]
 800c83a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c83c:	f107 0210 	add.w	r2, r7, #16
 800c840:	4913      	ldr	r1, [pc, #76]	@ (800c890 <McpsIndication+0xc0>)
 800c842:	4610      	mov	r0, r2
 800c844:	4798      	blx	r3

    if ((LmHandlerCallbacks->OnSysTimeUpdate != NULL) && (mcpsIndication->DeviceTimeAnsReceived == true))
 800c846:	4b13      	ldr	r3, [pc, #76]	@ (800c894 <McpsIndication+0xc4>)
 800c848:	681b      	ldr	r3, [r3, #0]
 800c84a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c84c:	2b00      	cmp	r3, #0
 800c84e:	d007      	beq.n	800c860 <McpsIndication+0x90>
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	7e1b      	ldrb	r3, [r3, #24]
 800c854:	2b00      	cmp	r3, #0
 800c856:	d003      	beq.n	800c860 <McpsIndication+0x90>
    {
        LmHandlerCallbacks->OnSysTimeUpdate( );
 800c858:	4b0e      	ldr	r3, [pc, #56]	@ (800c894 <McpsIndication+0xc4>)
 800c85a:	681b      	ldr	r3, [r3, #0]
 800c85c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c85e:	4798      	blx	r3
    }
    // Call packages RxProcess function
    LmHandlerPackagesNotify( PACKAGE_MCPS_INDICATION, mcpsIndication );
 800c860:	6879      	ldr	r1, [r7, #4]
 800c862:	2001      	movs	r0, #1
 800c864:	f000 f972 	bl	800cb4c <LmHandlerPackagesNotify>

    LmHandlerGetCurrentClass( &deviceClass );
 800c868:	f107 030f 	add.w	r3, r7, #15
 800c86c:	4618      	mov	r0, r3
 800c86e:	f7ff ff1b 	bl	800c6a8 <LmHandlerGetCurrentClass>
            .Port = 0
        };
        LmHandlerSend(&appData, LORAMAC_HANDLER_UNCONFIRMED_MSG, true);
    }
#elif (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    if ( ( mcpsIndication->FramePending == true ) && ( deviceClass == CLASS_A ) )
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	795b      	ldrb	r3, [r3, #5]
 800c876:	2b01      	cmp	r3, #1
 800c878:	d107      	bne.n	800c88a <McpsIndication+0xba>
 800c87a:	7bfb      	ldrb	r3, [r7, #15]
 800c87c:	2b00      	cmp	r3, #0
 800c87e:	d104      	bne.n	800c88a <McpsIndication+0xba>
    {
        // The server signals that it has pending data to be sent.
        // We schedule an uplink as soon as possible to flush the server.
        IsUplinkTxPending = true;
 800c880:	4b05      	ldr	r3, [pc, #20]	@ (800c898 <McpsIndication+0xc8>)
 800c882:	2201      	movs	r2, #1
 800c884:	701a      	strb	r2, [r3, #0]
 800c886:	e000      	b.n	800c88a <McpsIndication+0xba>
        return;
 800c888:	bf00      	nop
    }
#endif /* LORAMAC_VERSION */
}
 800c88a:	3718      	adds	r7, #24
 800c88c:	46bd      	mov	sp, r7
 800c88e:	bd80      	pop	{r7, pc}
 800c890:	200000cc 	.word	0x200000cc
 800c894:	200004f4 	.word	0x200004f4
 800c898:	20000520 	.word	0x20000520

0800c89c <MlmeConfirm>:

static void MlmeConfirm( MlmeConfirm_t *mlmeConfirm )
{
 800c89c:	b580      	push	{r7, lr}
 800c89e:	b08c      	sub	sp, #48	@ 0x30
 800c8a0:	af00      	add	r7, sp, #0
 800c8a2:	6078      	str	r0, [r7, #4]
    TxParams.IsMcpsConfirm = 0;
 800c8a4:	4b3c      	ldr	r3, [pc, #240]	@ (800c998 <MlmeConfirm+0xfc>)
 800c8a6:	2200      	movs	r2, #0
 800c8a8:	701a      	strb	r2, [r3, #0]
    TxParams.Status = mlmeConfirm->Status;
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	785a      	ldrb	r2, [r3, #1]
 800c8ae:	4b3a      	ldr	r3, [pc, #232]	@ (800c998 <MlmeConfirm+0xfc>)
 800c8b0:	705a      	strb	r2, [r3, #1]
    LmHandlerCallbacks->OnTxData( &TxParams );
 800c8b2:	4b3a      	ldr	r3, [pc, #232]	@ (800c99c <MlmeConfirm+0x100>)
 800c8b4:	681b      	ldr	r3, [r3, #0]
 800c8b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c8b8:	4837      	ldr	r0, [pc, #220]	@ (800c998 <MlmeConfirm+0xfc>)
 800c8ba:	4798      	blx	r3

    LmHandlerPackagesNotify( PACKAGE_MLME_CONFIRM, mlmeConfirm );
 800c8bc:	6879      	ldr	r1, [r7, #4]
 800c8be:	2002      	movs	r0, #2
 800c8c0:	f000 f944 	bl	800cb4c <LmHandlerPackagesNotify>

    switch( mlmeConfirm->MlmeRequest )
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	781b      	ldrb	r3, [r3, #0]
 800c8c8:	3b01      	subs	r3, #1
 800c8ca:	2b0b      	cmp	r3, #11
 800c8cc:	d85c      	bhi.n	800c988 <MlmeConfirm+0xec>
 800c8ce:	a201      	add	r2, pc, #4	@ (adr r2, 800c8d4 <MlmeConfirm+0x38>)
 800c8d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c8d4:	0800c905 	.word	0x0800c905
 800c8d8:	0800c989 	.word	0x0800c989
 800c8dc:	0800c989 	.word	0x0800c989
 800c8e0:	0800c957 	.word	0x0800c957
 800c8e4:	0800c989 	.word	0x0800c989
 800c8e8:	0800c989 	.word	0x0800c989
 800c8ec:	0800c989 	.word	0x0800c989
 800c8f0:	0800c989 	.word	0x0800c989
 800c8f4:	0800c989 	.word	0x0800c989
 800c8f8:	0800c989 	.word	0x0800c989
 800c8fc:	0800c96f 	.word	0x0800c96f
 800c900:	0800c989 	.word	0x0800c989
    {
    case MLME_JOIN:
        {
            MibRequestConfirm_t mibReq;
            mibReq.Type = MIB_DEV_ADDR;
 800c904:	2306      	movs	r3, #6
 800c906:	733b      	strb	r3, [r7, #12]
            LoRaMacMibGetRequestConfirm( &mibReq );
 800c908:	f107 030c 	add.w	r3, r7, #12
 800c90c:	4618      	mov	r0, r3
 800c90e:	f004 fda3 	bl	8011458 <LoRaMacMibGetRequestConfirm>
            CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 800c912:	693b      	ldr	r3, [r7, #16]
 800c914:	4a22      	ldr	r2, [pc, #136]	@ (800c9a0 <MlmeConfirm+0x104>)
 800c916:	6153      	str	r3, [r2, #20]
            LmHandlerGetTxDatarate( &JoinParams.Datarate );
 800c918:	4822      	ldr	r0, [pc, #136]	@ (800c9a4 <MlmeConfirm+0x108>)
 800c91a:	f7ff fee5 	bl	800c6e8 <LmHandlerGetTxDatarate>

            if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	785b      	ldrb	r3, [r3, #1]
 800c922:	2b00      	cmp	r3, #0
 800c924:	d108      	bne.n	800c938 <MlmeConfirm+0x9c>
            {
                // Status is OK, node has joined the network
                JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 800c926:	4b20      	ldr	r3, [pc, #128]	@ (800c9a8 <MlmeConfirm+0x10c>)
 800c928:	2200      	movs	r2, #0
 800c92a:	715a      	strb	r2, [r3, #5]
                LmHandlerRequestClass(LmHandlerParams.DefaultClass);
 800c92c:	4b1f      	ldr	r3, [pc, #124]	@ (800c9ac <MlmeConfirm+0x110>)
 800c92e:	785b      	ldrb	r3, [r3, #1]
 800c930:	4618      	mov	r0, r3
 800c932:	f7ff fe31 	bl	800c598 <LmHandlerRequestClass>
 800c936:	e002      	b.n	800c93e <MlmeConfirm+0xa2>
            }
            else
            {
                // Join was not successful. Try to join again
                JoinParams.Status = LORAMAC_HANDLER_ERROR;
 800c938:	4b1b      	ldr	r3, [pc, #108]	@ (800c9a8 <MlmeConfirm+0x10c>)
 800c93a:	22ff      	movs	r2, #255	@ 0xff
 800c93c:	715a      	strb	r2, [r3, #5]
            }
            // Notify upper layer
            LmHandlerCallbacks->OnJoinRequest( &JoinParams );
 800c93e:	4b17      	ldr	r3, [pc, #92]	@ (800c99c <MlmeConfirm+0x100>)
 800c940:	681b      	ldr	r3, [r3, #0]
 800c942:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c944:	4818      	ldr	r0, [pc, #96]	@ (800c9a8 <MlmeConfirm+0x10c>)
 800c946:	4798      	blx	r3
            if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	785b      	ldrb	r3, [r3, #1]
 800c94c:	2b00      	cmp	r3, #0
 800c94e:	d11d      	bne.n	800c98c <MlmeConfirm+0xf0>
            {
                SecureElementPrintSessionKeys();
 800c950:	f7ff f894 	bl	800ba7c <SecureElementPrintSessionKeys>
            }
        }
        break;
 800c954:	e01a      	b.n	800c98c <MlmeConfirm+0xf0>
    case MLME_LINK_CHECK:
        {
            RxParams.LinkCheck = true;
 800c956:	4b16      	ldr	r3, [pc, #88]	@ (800c9b0 <MlmeConfirm+0x114>)
 800c958:	2201      	movs	r2, #1
 800c95a:	745a      	strb	r2, [r3, #17]
            RxParams.DemodMargin = mlmeConfirm->DemodMargin;
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	7a1a      	ldrb	r2, [r3, #8]
 800c960:	4b13      	ldr	r3, [pc, #76]	@ (800c9b0 <MlmeConfirm+0x114>)
 800c962:	749a      	strb	r2, [r3, #18]
            RxParams.NbGateways = mlmeConfirm->NbGateways;
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	7a5a      	ldrb	r2, [r3, #9]
 800c968:	4b11      	ldr	r3, [pc, #68]	@ (800c9b0 <MlmeConfirm+0x114>)
 800c96a:	74da      	strb	r2, [r3, #19]
        }
        break;
 800c96c:	e00f      	b.n	800c98e <MlmeConfirm+0xf2>
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
        }
        break;
    case MLME_BEACON_ACQUISITION:
        {
            if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	785b      	ldrb	r3, [r3, #1]
 800c972:	2b00      	cmp	r3, #0
 800c974:	d105      	bne.n	800c982 <MlmeConfirm+0xe6>
            {
                // Beacon has been acquired
                // Request server for ping slot
                LmHandlerPingSlotReq( LmHandlerParams.PingSlotPeriodicity );
 800c976:	4b0d      	ldr	r3, [pc, #52]	@ (800c9ac <MlmeConfirm+0x110>)
 800c978:	7b1b      	ldrb	r3, [r3, #12]
 800c97a:	4618      	mov	r0, r3
 800c97c:	f7ff fe00 	bl	800c580 <LmHandlerPingSlotReq>
                // Beacon not acquired
                // Request Device Time again.
                LmHandlerDeviceTimeReq( );
            }
        }
        break;
 800c980:	e005      	b.n	800c98e <MlmeConfirm+0xf2>
                LmHandlerDeviceTimeReq( );
 800c982:	f7ff fde1 	bl	800c548 <LmHandlerDeviceTimeReq>
        break;
 800c986:	e002      	b.n	800c98e <MlmeConfirm+0xf2>
            }
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
        }
        break;
    default:
        break;
 800c988:	bf00      	nop
 800c98a:	e000      	b.n	800c98e <MlmeConfirm+0xf2>
        break;
 800c98c:	bf00      	nop
    }
}
 800c98e:	bf00      	nop
 800c990:	3730      	adds	r7, #48	@ 0x30
 800c992:	46bd      	mov	sp, r7
 800c994:	bd80      	pop	{r7, pc}
 800c996:	bf00      	nop
 800c998:	200000b0 	.word	0x200000b0
 800c99c:	200004f4 	.word	0x200004f4
 800c9a0:	20000090 	.word	0x20000090
 800c9a4:	200000ac 	.word	0x200000ac
 800c9a8:	200000a8 	.word	0x200000a8
 800c9ac:	200004e0 	.word	0x200004e0
 800c9b0:	200000cc 	.word	0x200000cc

0800c9b4 <MlmeIndication>:

static void MlmeIndication( MlmeIndication_t *mlmeIndication, LoRaMacRxStatus_t *rxStatus )
{
 800c9b4:	b580      	push	{r7, lr}
 800c9b6:	b082      	sub	sp, #8
 800c9b8:	af00      	add	r7, sp, #0
 800c9ba:	6078      	str	r0, [r7, #4]
 800c9bc:	6039      	str	r1, [r7, #0]
    RxParams.IsMcpsIndication = 0;
 800c9be:	4b24      	ldr	r3, [pc, #144]	@ (800ca50 <MlmeIndication+0x9c>)
 800c9c0:	2200      	movs	r2, #0
 800c9c2:	701a      	strb	r2, [r3, #0]
    RxParams.Status = mlmeIndication->Status;
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	785a      	ldrb	r2, [r3, #1]
 800c9c8:	4b21      	ldr	r3, [pc, #132]	@ (800ca50 <MlmeIndication+0x9c>)
 800c9ca:	705a      	strb	r2, [r3, #1]
    RxParams.Datarate = mlmeIndication->RxDatarate;
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	789b      	ldrb	r3, [r3, #2]
 800c9d0:	b25a      	sxtb	r2, r3
 800c9d2:	4b1f      	ldr	r3, [pc, #124]	@ (800ca50 <MlmeIndication+0x9c>)
 800c9d4:	721a      	strb	r2, [r3, #8]
    RxParams.Rssi = rxStatus->Rssi;
 800c9d6:	683b      	ldr	r3, [r7, #0]
 800c9d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c9dc:	b25a      	sxtb	r2, r3
 800c9de:	4b1c      	ldr	r3, [pc, #112]	@ (800ca50 <MlmeIndication+0x9c>)
 800c9e0:	725a      	strb	r2, [r3, #9]
    RxParams.Snr = rxStatus->Snr;
 800c9e2:	683b      	ldr	r3, [r7, #0]
 800c9e4:	f993 2002 	ldrsb.w	r2, [r3, #2]
 800c9e8:	4b19      	ldr	r3, [pc, #100]	@ (800ca50 <MlmeIndication+0x9c>)
 800c9ea:	729a      	strb	r2, [r3, #10]
    RxParams.RxSlot = rxStatus->RxSlot;
 800c9ec:	683b      	ldr	r3, [r7, #0]
 800c9ee:	78da      	ldrb	r2, [r3, #3]
 800c9f0:	4b17      	ldr	r3, [pc, #92]	@ (800ca50 <MlmeIndication+0x9c>)
 800c9f2:	741a      	strb	r2, [r3, #16]
    RxParams.DownlinkCounter = mlmeIndication->DownLinkCounter;
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	685b      	ldr	r3, [r3, #4]
 800c9f8:	4a15      	ldr	r2, [pc, #84]	@ (800ca50 <MlmeIndication+0x9c>)
 800c9fa:	60d3      	str	r3, [r2, #12]
    if ((mlmeIndication->MlmeIndication != MLME_BEACON) && (mlmeIndication->MlmeIndication != MLME_BEACON_LOST))
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	781b      	ldrb	r3, [r3, #0]
 800ca00:	2b0a      	cmp	r3, #10
 800ca02:	d009      	beq.n	800ca18 <MlmeIndication+0x64>
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	781b      	ldrb	r3, [r3, #0]
 800ca08:	2b0e      	cmp	r3, #14
 800ca0a:	d005      	beq.n	800ca18 <MlmeIndication+0x64>
    {
        LmHandlerCallbacks->OnRxData( NULL, &RxParams );
 800ca0c:	4b11      	ldr	r3, [pc, #68]	@ (800ca54 <MlmeIndication+0xa0>)
 800ca0e:	681b      	ldr	r3, [r3, #0]
 800ca10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ca12:	490f      	ldr	r1, [pc, #60]	@ (800ca50 <MlmeIndication+0x9c>)
 800ca14:	2000      	movs	r0, #0
 800ca16:	4798      	blx	r3
    }

    // Call packages RxProcess function
    LmHandlerPackagesNotify( PACKAGE_MLME_INDICATION, mlmeIndication );
 800ca18:	6879      	ldr	r1, [r7, #4]
 800ca1a:	2003      	movs	r0, #3
 800ca1c:	f000 f896 	bl	800cb4c <LmHandlerPackagesNotify>

    switch( mlmeIndication->MlmeIndication )
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	781b      	ldrb	r3, [r3, #0]
 800ca24:	2b0e      	cmp	r3, #14
 800ca26:	d00a      	beq.n	800ca3e <MlmeIndication+0x8a>
 800ca28:	2b0e      	cmp	r3, #14
 800ca2a:	dc0a      	bgt.n	800ca42 <MlmeIndication+0x8e>
 800ca2c:	2b06      	cmp	r3, #6
 800ca2e:	d002      	beq.n	800ca36 <MlmeIndication+0x82>
 800ca30:	2b0a      	cmp	r3, #10
 800ca32:	d008      	beq.n	800ca46 <MlmeIndication+0x92>
            }
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
        }
        break;
    default:
        break;
 800ca34:	e005      	b.n	800ca42 <MlmeIndication+0x8e>
            IsUplinkTxPending = true;
 800ca36:	4b08      	ldr	r3, [pc, #32]	@ (800ca58 <MlmeIndication+0xa4>)
 800ca38:	2201      	movs	r2, #1
 800ca3a:	701a      	strb	r2, [r3, #0]
        break;
 800ca3c:	e004      	b.n	800ca48 <MlmeIndication+0x94>
        break;
 800ca3e:	bf00      	nop
 800ca40:	e002      	b.n	800ca48 <MlmeIndication+0x94>
        break;
 800ca42:	bf00      	nop
 800ca44:	e000      	b.n	800ca48 <MlmeIndication+0x94>
        break;
 800ca46:	bf00      	nop
    }
}
 800ca48:	bf00      	nop
 800ca4a:	3708      	adds	r7, #8
 800ca4c:	46bd      	mov	sp, r7
 800ca4e:	bd80      	pop	{r7, pc}
 800ca50:	200000cc 	.word	0x200000cc
 800ca54:	200004f4 	.word	0x200004f4
 800ca58:	20000520 	.word	0x20000520

0800ca5c <LmHandlerPackageRegister>:
 * PACKAGES HANDLING
 *=============================================================================
 */

LmHandlerErrorStatus_t LmHandlerPackageRegister( uint8_t id, void *params )
{
 800ca5c:	b580      	push	{r7, lr}
 800ca5e:	b084      	sub	sp, #16
 800ca60:	af00      	add	r7, sp, #0
 800ca62:	4603      	mov	r3, r0
 800ca64:	6039      	str	r1, [r7, #0]
 800ca66:	71fb      	strb	r3, [r7, #7]
    LmhPackage_t *package = NULL;
 800ca68:	2300      	movs	r3, #0
 800ca6a:	60fb      	str	r3, [r7, #12]
    switch( id )
 800ca6c:	79fb      	ldrb	r3, [r7, #7]
 800ca6e:	2b00      	cmp	r3, #0
 800ca70:	d103      	bne.n	800ca7a <LmHandlerPackageRegister+0x1e>
    {
        case PACKAGE_ID_COMPLIANCE:
        {
            package = LmhpCompliancePackageFactory( );
 800ca72:	f000 fa1d 	bl	800ceb0 <LmhpCompliancePackageFactory>
 800ca76:	60f8      	str	r0, [r7, #12]
            break;
 800ca78:	e000      	b.n	800ca7c <LmHandlerPackageRegister+0x20>
        {
#if (!defined (LORAWAN_DATA_DISTRIB_MGT) || (LORAWAN_DATA_DISTRIB_MGT == 0))
#else /*LORAWAN_DATA_DISTRIB_MGT == 1*/
            LmhpPackagesRegister( id, &package );
#endif /*LORAWAN_DATA_DISTRIB_MGT*/
            break;
 800ca7a:	bf00      	nop
        }
    }
    if( package != NULL )
 800ca7c:	68fb      	ldr	r3, [r7, #12]
 800ca7e:	2b00      	cmp	r3, #0
 800ca80:	d035      	beq.n	800caee <LmHandlerPackageRegister+0x92>
    {
        LmHandlerPackages[id] = package;
 800ca82:	79fb      	ldrb	r3, [r7, #7]
 800ca84:	491d      	ldr	r1, [pc, #116]	@ (800cafc <LmHandlerPackageRegister+0xa0>)
 800ca86:	68fa      	ldr	r2, [r7, #12]
 800ca88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        LmHandlerPackages[id]->OnJoinRequest = LmHandlerJoin;
 800ca8c:	79fb      	ldrb	r3, [r7, #7]
 800ca8e:	4a1b      	ldr	r2, [pc, #108]	@ (800cafc <LmHandlerPackageRegister+0xa0>)
 800ca90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ca94:	4a1a      	ldr	r2, [pc, #104]	@ (800cb00 <LmHandlerPackageRegister+0xa4>)
 800ca96:	629a      	str	r2, [r3, #40]	@ 0x28
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        LmHandlerPackages[id]->OnSendRequest = LmHandlerSend;
#elif (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
        LmHandlerPackages[id]->OnSysTimeUpdate = LmHandlerCallbacks->OnSysTimeUpdate;
 800ca98:	4b1a      	ldr	r3, [pc, #104]	@ (800cb04 <LmHandlerPackageRegister+0xa8>)
 800ca9a:	681a      	ldr	r2, [r3, #0]
 800ca9c:	79fb      	ldrb	r3, [r7, #7]
 800ca9e:	4917      	ldr	r1, [pc, #92]	@ (800cafc <LmHandlerPackageRegister+0xa0>)
 800caa0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800caa4:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800caa6:	631a      	str	r2, [r3, #48]	@ 0x30
        LmHandlerPackages[id]->OnSystemReset = LmHandlerCallbacks->OnSystemReset;
 800caa8:	4b16      	ldr	r3, [pc, #88]	@ (800cb04 <LmHandlerPackageRegister+0xa8>)
 800caaa:	681a      	ldr	r2, [r3, #0]
 800caac:	79fb      	ldrb	r3, [r7, #7]
 800caae:	4913      	ldr	r1, [pc, #76]	@ (800cafc <LmHandlerPackageRegister+0xa0>)
 800cab0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800cab4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800cab6:	635a      	str	r2, [r3, #52]	@ 0x34
#endif /* LORAMAC_VERSION */
        LmHandlerPackages[id]->OnDeviceTimeRequest = LmHandlerDeviceTimeReq;
 800cab8:	79fb      	ldrb	r3, [r7, #7]
 800caba:	4a10      	ldr	r2, [pc, #64]	@ (800cafc <LmHandlerPackageRegister+0xa0>)
 800cabc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cac0:	4a11      	ldr	r2, [pc, #68]	@ (800cb08 <LmHandlerPackageRegister+0xac>)
 800cac2:	62da      	str	r2, [r3, #44]	@ 0x2c
        LmHandlerPackages[id]->OnPackageProcessEvent = LmHandlerCallbacks->OnMacProcess;
 800cac4:	4b0f      	ldr	r3, [pc, #60]	@ (800cb04 <LmHandlerPackageRegister+0xa8>)
 800cac6:	681a      	ldr	r2, [r3, #0]
 800cac8:	79fb      	ldrb	r3, [r7, #7]
 800caca:	490c      	ldr	r1, [pc, #48]	@ (800cafc <LmHandlerPackageRegister+0xa0>)
 800cacc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800cad0:	6992      	ldr	r2, [r2, #24]
 800cad2:	615a      	str	r2, [r3, #20]
        LmHandlerPackages[id]->Init( params, AppData.Buffer, AppData.BufferSize );
 800cad4:	79fb      	ldrb	r3, [r7, #7]
 800cad6:	4a09      	ldr	r2, [pc, #36]	@ (800cafc <LmHandlerPackageRegister+0xa0>)
 800cad8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cadc:	685b      	ldr	r3, [r3, #4]
 800cade:	4a0b      	ldr	r2, [pc, #44]	@ (800cb0c <LmHandlerPackageRegister+0xb0>)
 800cae0:	6851      	ldr	r1, [r2, #4]
 800cae2:	4a0a      	ldr	r2, [pc, #40]	@ (800cb0c <LmHandlerPackageRegister+0xb0>)
 800cae4:	7852      	ldrb	r2, [r2, #1]
 800cae6:	6838      	ldr	r0, [r7, #0]
 800cae8:	4798      	blx	r3

        return LORAMAC_HANDLER_SUCCESS;
 800caea:	2300      	movs	r3, #0
 800caec:	e001      	b.n	800caf2 <LmHandlerPackageRegister+0x96>
    }
    else
    {
        return LORAMAC_HANDLER_ERROR;
 800caee:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 800caf2:	4618      	mov	r0, r3
 800caf4:	3710      	adds	r7, #16
 800caf6:	46bd      	mov	sp, r7
 800caf8:	bd80      	pop	{r7, pc}
 800cafa:	bf00      	nop
 800cafc:	200004cc 	.word	0x200004cc
 800cb00:	0800c281 	.word	0x0800c281
 800cb04:	200004f4 	.word	0x200004f4
 800cb08:	0800c549 	.word	0x0800c549
 800cb0c:	200000e0 	.word	0x200000e0

0800cb10 <LmHandlerPackageIsInitialized>:

static bool LmHandlerPackageIsInitialized( uint8_t id )
{
 800cb10:	b580      	push	{r7, lr}
 800cb12:	b082      	sub	sp, #8
 800cb14:	af00      	add	r7, sp, #0
 800cb16:	4603      	mov	r3, r0
 800cb18:	71fb      	strb	r3, [r7, #7]
    if( ( id < PKG_MAX_NUMBER ) && ( LmHandlerPackages[id]->IsInitialized != NULL ) )
 800cb1a:	79fb      	ldrb	r3, [r7, #7]
 800cb1c:	2b04      	cmp	r3, #4
 800cb1e:	d80e      	bhi.n	800cb3e <LmHandlerPackageIsInitialized+0x2e>
 800cb20:	79fb      	ldrb	r3, [r7, #7]
 800cb22:	4a09      	ldr	r2, [pc, #36]	@ (800cb48 <LmHandlerPackageIsInitialized+0x38>)
 800cb24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cb28:	689b      	ldr	r3, [r3, #8]
 800cb2a:	2b00      	cmp	r3, #0
 800cb2c:	d007      	beq.n	800cb3e <LmHandlerPackageIsInitialized+0x2e>
    {
        return LmHandlerPackages[id]->IsInitialized( );
 800cb2e:	79fb      	ldrb	r3, [r7, #7]
 800cb30:	4a05      	ldr	r2, [pc, #20]	@ (800cb48 <LmHandlerPackageIsInitialized+0x38>)
 800cb32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cb36:	689b      	ldr	r3, [r3, #8]
 800cb38:	4798      	blx	r3
 800cb3a:	4603      	mov	r3, r0
 800cb3c:	e000      	b.n	800cb40 <LmHandlerPackageIsInitialized+0x30>
    }
    else
    {
        return false;
 800cb3e:	2300      	movs	r3, #0
    }
}
 800cb40:	4618      	mov	r0, r3
 800cb42:	3708      	adds	r7, #8
 800cb44:	46bd      	mov	sp, r7
 800cb46:	bd80      	pop	{r7, pc}
 800cb48:	200004cc 	.word	0x200004cc

0800cb4c <LmHandlerPackagesNotify>:

static void LmHandlerPackagesNotify( PackageNotifyTypes_t notifyType, void *params )
{
 800cb4c:	b580      	push	{r7, lr}
 800cb4e:	b084      	sub	sp, #16
 800cb50:	af00      	add	r7, sp, #0
 800cb52:	4603      	mov	r3, r0
 800cb54:	6039      	str	r1, [r7, #0]
 800cb56:	71fb      	strb	r3, [r7, #7]
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800cb58:	2300      	movs	r3, #0
 800cb5a:	73fb      	strb	r3, [r7, #15]
 800cb5c:	e067      	b.n	800cc2e <LmHandlerPackagesNotify+0xe2>
    {
        if( LmHandlerPackages[i] != NULL )
 800cb5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cb62:	4a37      	ldr	r2, [pc, #220]	@ (800cc40 <LmHandlerPackagesNotify+0xf4>)
 800cb64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cb68:	2b00      	cmp	r3, #0
 800cb6a:	d05a      	beq.n	800cc22 <LmHandlerPackagesNotify+0xd6>
        {
            switch( notifyType )
 800cb6c:	79fb      	ldrb	r3, [r7, #7]
 800cb6e:	2b03      	cmp	r3, #3
 800cb70:	d84e      	bhi.n	800cc10 <LmHandlerPackagesNotify+0xc4>
 800cb72:	a201      	add	r2, pc, #4	@ (adr r2, 800cb78 <LmHandlerPackagesNotify+0x2c>)
 800cb74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb78:	0800cb89 	.word	0x0800cb89
 800cb7c:	0800cbab 	.word	0x0800cbab
 800cb80:	0800cbcd 	.word	0x0800cbcd
 800cb84:	0800cbef 	.word	0x0800cbef
            {
                case PACKAGE_MCPS_CONFIRM:
                {
                    if( LmHandlerPackages[i]->OnMcpsConfirmProcess != NULL )
 800cb88:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cb8c:	4a2c      	ldr	r2, [pc, #176]	@ (800cc40 <LmHandlerPackagesNotify+0xf4>)
 800cb8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cb92:	699b      	ldr	r3, [r3, #24]
 800cb94:	2b00      	cmp	r3, #0
 800cb96:	d03d      	beq.n	800cc14 <LmHandlerPackagesNotify+0xc8>
                    {
                        LmHandlerPackages[i]->OnMcpsConfirmProcess( ( McpsConfirm_t* ) params );
 800cb98:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cb9c:	4a28      	ldr	r2, [pc, #160]	@ (800cc40 <LmHandlerPackagesNotify+0xf4>)
 800cb9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cba2:	699b      	ldr	r3, [r3, #24]
 800cba4:	6838      	ldr	r0, [r7, #0]
 800cba6:	4798      	blx	r3
                    }
                    break;
 800cba8:	e034      	b.n	800cc14 <LmHandlerPackagesNotify+0xc8>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
                    if( ( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL ) &&
                        ( ( LmHandlerPackages[i]->Port == ((McpsIndication_t* )params)->Port ) ||
                          ( ( i == PACKAGE_ID_COMPLIANCE ) && ( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning() ))))
#elif (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
                    if( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL )
 800cbaa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cbae:	4a24      	ldr	r2, [pc, #144]	@ (800cc40 <LmHandlerPackagesNotify+0xf4>)
 800cbb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cbb4:	69db      	ldr	r3, [r3, #28]
 800cbb6:	2b00      	cmp	r3, #0
 800cbb8:	d02e      	beq.n	800cc18 <LmHandlerPackagesNotify+0xcc>
#endif /* LORAMAC_VERSION */
                    {
                        LmHandlerPackages[i]->OnMcpsIndicationProcess( ( McpsIndication_t* )params );
 800cbba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cbbe:	4a20      	ldr	r2, [pc, #128]	@ (800cc40 <LmHandlerPackagesNotify+0xf4>)
 800cbc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cbc4:	69db      	ldr	r3, [r3, #28]
 800cbc6:	6838      	ldr	r0, [r7, #0]
 800cbc8:	4798      	blx	r3
                    }
                    break;
 800cbca:	e025      	b.n	800cc18 <LmHandlerPackagesNotify+0xcc>
                }
                case PACKAGE_MLME_CONFIRM:
                {
                    if( LmHandlerPackages[i]->OnMlmeConfirmProcess != NULL )
 800cbcc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cbd0:	4a1b      	ldr	r2, [pc, #108]	@ (800cc40 <LmHandlerPackagesNotify+0xf4>)
 800cbd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cbd6:	6a1b      	ldr	r3, [r3, #32]
 800cbd8:	2b00      	cmp	r3, #0
 800cbda:	d01f      	beq.n	800cc1c <LmHandlerPackagesNotify+0xd0>
                    {
                        LmHandlerPackages[i]->OnMlmeConfirmProcess( ( MlmeConfirm_t* )params );
 800cbdc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cbe0:	4a17      	ldr	r2, [pc, #92]	@ (800cc40 <LmHandlerPackagesNotify+0xf4>)
 800cbe2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cbe6:	6a1b      	ldr	r3, [r3, #32]
 800cbe8:	6838      	ldr	r0, [r7, #0]
 800cbea:	4798      	blx	r3
                    }
                    break;
 800cbec:	e016      	b.n	800cc1c <LmHandlerPackagesNotify+0xd0>
                }
                case PACKAGE_MLME_INDICATION:
                {
                    if( LmHandlerPackages[i]->OnMlmeIndicationProcess != NULL )
 800cbee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cbf2:	4a13      	ldr	r2, [pc, #76]	@ (800cc40 <LmHandlerPackagesNotify+0xf4>)
 800cbf4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cbf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cbfa:	2b00      	cmp	r3, #0
 800cbfc:	d010      	beq.n	800cc20 <LmHandlerPackagesNotify+0xd4>
                    {
                        LmHandlerPackages[i]->OnMlmeIndicationProcess( params );
 800cbfe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cc02:	4a0f      	ldr	r2, [pc, #60]	@ (800cc40 <LmHandlerPackagesNotify+0xf4>)
 800cc04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cc08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cc0a:	6838      	ldr	r0, [r7, #0]
 800cc0c:	4798      	blx	r3
                    }
                    break;
 800cc0e:	e007      	b.n	800cc20 <LmHandlerPackagesNotify+0xd4>
                }
                default:
                {
                    break;
 800cc10:	bf00      	nop
 800cc12:	e006      	b.n	800cc22 <LmHandlerPackagesNotify+0xd6>
                    break;
 800cc14:	bf00      	nop
 800cc16:	e004      	b.n	800cc22 <LmHandlerPackagesNotify+0xd6>
                    break;
 800cc18:	bf00      	nop
 800cc1a:	e002      	b.n	800cc22 <LmHandlerPackagesNotify+0xd6>
                    break;
 800cc1c:	bf00      	nop
 800cc1e:	e000      	b.n	800cc22 <LmHandlerPackagesNotify+0xd6>
                    break;
 800cc20:	bf00      	nop
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800cc22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cc26:	b2db      	uxtb	r3, r3
 800cc28:	3301      	adds	r3, #1
 800cc2a:	b2db      	uxtb	r3, r3
 800cc2c:	73fb      	strb	r3, [r7, #15]
 800cc2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cc32:	2b04      	cmp	r3, #4
 800cc34:	dd93      	ble.n	800cb5e <LmHandlerPackagesNotify+0x12>
                }
            }
        }
    }
}
 800cc36:	bf00      	nop
 800cc38:	bf00      	nop
 800cc3a:	3710      	adds	r7, #16
 800cc3c:	46bd      	mov	sp, r7
 800cc3e:	bd80      	pop	{r7, pc}
 800cc40:	200004cc 	.word	0x200004cc

0800cc44 <LmHandlerPackageIsTxPending>:

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
static bool LmHandlerPackageIsTxPending( void )
{
 800cc44:	b580      	push	{r7, lr}
 800cc46:	b082      	sub	sp, #8
 800cc48:	af00      	add	r7, sp, #0
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800cc4a:	2300      	movs	r3, #0
 800cc4c:	71fb      	strb	r3, [r7, #7]
 800cc4e:	e018      	b.n	800cc82 <LmHandlerPackageIsTxPending+0x3e>
    {
        if( LmHandlerPackages[i] != NULL )
 800cc50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cc54:	4a0f      	ldr	r2, [pc, #60]	@ (800cc94 <LmHandlerPackageIsTxPending+0x50>)
 800cc56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cc5a:	2b00      	cmp	r3, #0
 800cc5c:	d00b      	beq.n	800cc76 <LmHandlerPackageIsTxPending+0x32>
        {
            if( LmHandlerPackages[i]->IsTxPending( ) == true )
 800cc5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cc62:	4a0c      	ldr	r2, [pc, #48]	@ (800cc94 <LmHandlerPackageIsTxPending+0x50>)
 800cc64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cc68:	68db      	ldr	r3, [r3, #12]
 800cc6a:	4798      	blx	r3
 800cc6c:	4603      	mov	r3, r0
 800cc6e:	2b00      	cmp	r3, #0
 800cc70:	d001      	beq.n	800cc76 <LmHandlerPackageIsTxPending+0x32>
            {
                return true;
 800cc72:	2301      	movs	r3, #1
 800cc74:	e00a      	b.n	800cc8c <LmHandlerPackageIsTxPending+0x48>
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800cc76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cc7a:	b2db      	uxtb	r3, r3
 800cc7c:	3301      	adds	r3, #1
 800cc7e:	b2db      	uxtb	r3, r3
 800cc80:	71fb      	strb	r3, [r7, #7]
 800cc82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cc86:	2b04      	cmp	r3, #4
 800cc88:	dde2      	ble.n	800cc50 <LmHandlerPackageIsTxPending+0xc>
            }
        }
    }
    return false;
 800cc8a:	2300      	movs	r3, #0
}
 800cc8c:	4618      	mov	r0, r3
 800cc8e:	3708      	adds	r7, #8
 800cc90:	46bd      	mov	sp, r7
 800cc92:	bd80      	pop	{r7, pc}
 800cc94:	200004cc 	.word	0x200004cc

0800cc98 <LmHandlerPackagesProcess>:
#endif /* LORAMAC_VERSION */

static void LmHandlerPackagesProcess( void )
{
 800cc98:	b580      	push	{r7, lr}
 800cc9a:	b082      	sub	sp, #8
 800cc9c:	af00      	add	r7, sp, #0
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800cc9e:	2300      	movs	r3, #0
 800cca0:	71fb      	strb	r3, [r7, #7]
 800cca2:	e022      	b.n	800ccea <LmHandlerPackagesProcess+0x52>
    {
        if( ( LmHandlerPackages[i] != NULL ) &&
 800cca4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cca8:	4a14      	ldr	r2, [pc, #80]	@ (800ccfc <LmHandlerPackagesProcess+0x64>)
 800ccaa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ccae:	2b00      	cmp	r3, #0
 800ccb0:	d015      	beq.n	800ccde <LmHandlerPackagesProcess+0x46>
            ( LmHandlerPackages[i]->Process != NULL ) &&
 800ccb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ccb6:	4a11      	ldr	r2, [pc, #68]	@ (800ccfc <LmHandlerPackagesProcess+0x64>)
 800ccb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ccbc:	691b      	ldr	r3, [r3, #16]
        if( ( LmHandlerPackages[i] != NULL ) &&
 800ccbe:	2b00      	cmp	r3, #0
 800ccc0:	d00d      	beq.n	800ccde <LmHandlerPackagesProcess+0x46>
            ( LmHandlerPackageIsInitialized( i ) != false ) )
 800ccc2:	79fb      	ldrb	r3, [r7, #7]
 800ccc4:	4618      	mov	r0, r3
 800ccc6:	f7ff ff23 	bl	800cb10 <LmHandlerPackageIsInitialized>
 800ccca:	4603      	mov	r3, r0
            ( LmHandlerPackages[i]->Process != NULL ) &&
 800cccc:	2b00      	cmp	r3, #0
 800ccce:	d006      	beq.n	800ccde <LmHandlerPackagesProcess+0x46>
        {
            LmHandlerPackages[i]->Process( );
 800ccd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ccd4:	4a09      	ldr	r2, [pc, #36]	@ (800ccfc <LmHandlerPackagesProcess+0x64>)
 800ccd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ccda:	691b      	ldr	r3, [r3, #16]
 800ccdc:	4798      	blx	r3
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800ccde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cce2:	b2db      	uxtb	r3, r3
 800cce4:	3301      	adds	r3, #1
 800cce6:	b2db      	uxtb	r3, r3
 800cce8:	71fb      	strb	r3, [r7, #7]
 800ccea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ccee:	2b04      	cmp	r3, #4
 800ccf0:	ddd8      	ble.n	800cca4 <LmHandlerPackagesProcess+0xc>
        }
    }
}
 800ccf2:	bf00      	nop
 800ccf4:	bf00      	nop
 800ccf6:	3708      	adds	r7, #8
 800ccf8:	46bd      	mov	sp, r7
 800ccfa:	bd80      	pop	{r7, pc}
 800ccfc:	200004cc 	.word	0x200004cc

0800cd00 <LmHandlerGetVersion>:
 * ST ADDITIONAL FUNCTIONS
 *=============================================================================
 */

LmHandlerErrorStatus_t LmHandlerGetVersion(LmHandlerVersionType_t lmhType, uint32_t *featureVersion)
{
 800cd00:	b480      	push	{r7}
 800cd02:	b083      	sub	sp, #12
 800cd04:	af00      	add	r7, sp, #0
 800cd06:	4603      	mov	r3, r0
 800cd08:	6039      	str	r1, [r7, #0]
 800cd0a:	71fb      	strb	r3, [r7, #7]
    if (featureVersion == NULL)
 800cd0c:	683b      	ldr	r3, [r7, #0]
 800cd0e:	2b00      	cmp	r3, #0
 800cd10:	d102      	bne.n	800cd18 <LmHandlerGetVersion+0x18>
    {
        return LORAMAC_HANDLER_ERROR;
 800cd12:	f04f 33ff 	mov.w	r3, #4294967295
 800cd16:	e00e      	b.n	800cd36 <LmHandlerGetVersion+0x36>
    }

    switch(lmhType)
 800cd18:	79fb      	ldrb	r3, [r7, #7]
 800cd1a:	2b00      	cmp	r3, #0
 800cd1c:	d002      	beq.n	800cd24 <LmHandlerGetVersion+0x24>
 800cd1e:	2b01      	cmp	r3, #1
 800cd20:	d004      	beq.n	800cd2c <LmHandlerGetVersion+0x2c>
            break;
        case LORAMAC_HANDLER_REGION_VERSION:
            *featureVersion = REGION_VERSION;
            break;
        default:
          break;
 800cd22:	e007      	b.n	800cd34 <LmHandlerGetVersion+0x34>
            *featureVersion = LORAMAC_VERSION;
 800cd24:	683b      	ldr	r3, [r7, #0]
 800cd26:	4a06      	ldr	r2, [pc, #24]	@ (800cd40 <LmHandlerGetVersion+0x40>)
 800cd28:	601a      	str	r2, [r3, #0]
            break;
 800cd2a:	e003      	b.n	800cd34 <LmHandlerGetVersion+0x34>
            *featureVersion = REGION_VERSION;
 800cd2c:	683b      	ldr	r3, [r7, #0]
 800cd2e:	4a05      	ldr	r2, [pc, #20]	@ (800cd44 <LmHandlerGetVersion+0x44>)
 800cd30:	601a      	str	r2, [r3, #0]
            break;
 800cd32:	bf00      	nop
    }

    return LORAMAC_HANDLER_SUCCESS;
 800cd34:	2300      	movs	r3, #0
}
 800cd36:	4618      	mov	r0, r3
 800cd38:	370c      	adds	r7, #12
 800cd3a:	46bd      	mov	sp, r7
 800cd3c:	bc80      	pop	{r7}
 800cd3e:	4770      	bx	lr
 800cd40:	01000400 	.word	0x01000400
 800cd44:	02010001 	.word	0x02010001

0800cd48 <LmHandlerStop>:

LmHandlerErrorStatus_t LmHandlerStop(void)
{
 800cd48:	b580      	push	{r7, lr}
 800cd4a:	af00      	add	r7, sp, #0
    if (LoRaMacDeInitialization() == LORAMAC_STATUS_OK)
 800cd4c:	f005 fb76 	bl	801243c <LoRaMacDeInitialization>
 800cd50:	4603      	mov	r3, r0
 800cd52:	2b00      	cmp	r3, #0
 800cd54:	d101      	bne.n	800cd5a <LmHandlerStop+0x12>
    {
        return LORAMAC_HANDLER_SUCCESS;
 800cd56:	2300      	movs	r3, #0
 800cd58:	e001      	b.n	800cd5e <LmHandlerStop+0x16>
    }
    else
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800cd5a:	f06f 0301 	mvn.w	r3, #1
    }
}
 800cd5e:	4618      	mov	r0, r3
 800cd60:	bd80      	pop	{r7, pc}

0800cd62 <LmHandlerHalt>:

LmHandlerErrorStatus_t LmHandlerHalt(void)
{
 800cd62:	b580      	push	{r7, lr}
 800cd64:	af00      	add	r7, sp, #0
    if (LoRaMacHalt() == LORAMAC_STATUS_OK)
 800cd66:	f004 faaf 	bl	80112c8 <LoRaMacHalt>
 800cd6a:	4603      	mov	r3, r0
 800cd6c:	2b00      	cmp	r3, #0
 800cd6e:	d101      	bne.n	800cd74 <LmHandlerHalt+0x12>
    {
        return LORAMAC_HANDLER_SUCCESS;
 800cd70:	2300      	movs	r3, #0
 800cd72:	e001      	b.n	800cd78 <LmHandlerHalt+0x16>
    }
    else
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800cd74:	f06f 0301 	mvn.w	r3, #1
    }
}
 800cd78:	4618      	mov	r0, r3
 800cd7a:	bd80      	pop	{r7, pc}

0800cd7c <LmHandlerNvmDataStore>:
        return LORAMAC_HANDLER_ERROR;
    }
}

LmHandlerErrorStatus_t LmHandlerNvmDataStore( void )
{
 800cd7c:	b580      	push	{r7, lr}
 800cd7e:	b08e      	sub	sp, #56	@ 0x38
 800cd80:	af00      	add	r7, sp, #0
    LoRaMacNvmData_t *nvm;
    uint32_t nvm_size;
    LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_SUCCESS;
 800cd82:	2300      	movs	r3, #0
 800cd84:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    int32_t status = NVM_DATA_OK;
 800cd88:	2300      	movs	r3, #0
 800cd8a:	633b      	str	r3, [r7, #48]	@ 0x30

    lmhStatus = LmHandlerHalt();
 800cd8c:	f7ff ffe9 	bl	800cd62 <LmHandlerHalt>
 800cd90:	4603      	mov	r3, r0
 800cd92:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

    if (lmhStatus == LORAMAC_HANDLER_SUCCESS)
 800cd96:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 800cd9a:	2b00      	cmp	r3, #0
 800cd9c:	d12f      	bne.n	800cdfe <LmHandlerNvmDataStore+0x82>
    {
        status = NvmDataMgmtStoreBegin();
 800cd9e:	f000 f859 	bl	800ce54 <NvmDataMgmtStoreBegin>
 800cda2:	6338      	str	r0, [r7, #48]	@ 0x30

        if (status == NVM_DATA_NO_UPDATED_DATA)
 800cda4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cda6:	f113 0f02 	cmn.w	r3, #2
 800cdaa:	d103      	bne.n	800cdb4 <LmHandlerNvmDataStore+0x38>
        {
            lmhStatus = LORAMAC_HANDLER_NVM_DATA_UP_TO_DATE;
 800cdac:	23f8      	movs	r3, #248	@ 0xf8
 800cdae:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800cdb2:	e01c      	b.n	800cdee <LmHandlerNvmDataStore+0x72>
        }
        else if (( status != NVM_DATA_OK ) || (LmHandlerCallbacks->OnStoreContextRequest == NULL))
 800cdb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cdb6:	2b00      	cmp	r3, #0
 800cdb8:	d104      	bne.n	800cdc4 <LmHandlerNvmDataStore+0x48>
 800cdba:	4b1b      	ldr	r3, [pc, #108]	@ (800ce28 <LmHandlerNvmDataStore+0xac>)
 800cdbc:	681b      	ldr	r3, [r3, #0]
 800cdbe:	695b      	ldr	r3, [r3, #20]
 800cdc0:	2b00      	cmp	r3, #0
 800cdc2:	d103      	bne.n	800cdcc <LmHandlerNvmDataStore+0x50>
        {
            lmhStatus = LORAMAC_HANDLER_ERROR;
 800cdc4:	23ff      	movs	r3, #255	@ 0xff
 800cdc6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800cdca:	e010      	b.n	800cdee <LmHandlerNvmDataStore+0x72>
        }
        else
        {
          MibRequestConfirm_t mibReq;
          mibReq.Type = MIB_NVM_CTXS;
 800cdcc:	2327      	movs	r3, #39	@ 0x27
 800cdce:	713b      	strb	r3, [r7, #4]
          LoRaMacMibGetRequestConfirm( &mibReq );
 800cdd0:	1d3b      	adds	r3, r7, #4
 800cdd2:	4618      	mov	r0, r3
 800cdd4:	f004 fb40 	bl	8011458 <LoRaMacMibGetRequestConfirm>
          nvm = mibReq.Param.Contexts;
 800cdd8:	68bb      	ldr	r3, [r7, #8]
 800cdda:	62fb      	str	r3, [r7, #44]	@ 0x2c
          nvm_size = ((sizeof(LoRaMacNvmData_t) + 7) & ~0x07);
 800cddc:	f44f 63b0 	mov.w	r3, #1408	@ 0x580
 800cde0:	62bb      	str	r3, [r7, #40]	@ 0x28
          LmHandlerCallbacks->OnStoreContextRequest(nvm, nvm_size);
 800cde2:	4b11      	ldr	r3, [pc, #68]	@ (800ce28 <LmHandlerNvmDataStore+0xac>)
 800cde4:	681b      	ldr	r3, [r3, #0]
 800cde6:	695b      	ldr	r3, [r3, #20]
 800cde8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800cdea:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800cdec:	4798      	blx	r3
        }

        if ( NvmDataMgmtStoreEnd() != NVM_DATA_OK )
 800cdee:	f000 f847 	bl	800ce80 <NvmDataMgmtStoreEnd>
 800cdf2:	4603      	mov	r3, r0
 800cdf4:	2b00      	cmp	r3, #0
 800cdf6:	d002      	beq.n	800cdfe <LmHandlerNvmDataStore+0x82>
        {
            lmhStatus = LORAMAC_HANDLER_ERROR;
 800cdf8:	23ff      	movs	r3, #255	@ 0xff
 800cdfa:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
    }

    if ((lmhStatus == LORAMAC_HANDLER_SUCCESS) && (LmHandlerCallbacks->OnNvmDataChange != NULL ))
 800cdfe:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 800ce02:	2b00      	cmp	r3, #0
 800ce04:	d109      	bne.n	800ce1a <LmHandlerNvmDataStore+0x9e>
 800ce06:	4b08      	ldr	r3, [pc, #32]	@ (800ce28 <LmHandlerNvmDataStore+0xac>)
 800ce08:	681b      	ldr	r3, [r3, #0]
 800ce0a:	69db      	ldr	r3, [r3, #28]
 800ce0c:	2b00      	cmp	r3, #0
 800ce0e:	d004      	beq.n	800ce1a <LmHandlerNvmDataStore+0x9e>
    {
        LmHandlerCallbacks->OnNvmDataChange( LORAMAC_HANDLER_NVM_STORE );
 800ce10:	4b05      	ldr	r3, [pc, #20]	@ (800ce28 <LmHandlerNvmDataStore+0xac>)
 800ce12:	681b      	ldr	r3, [r3, #0]
 800ce14:	69db      	ldr	r3, [r3, #28]
 800ce16:	2001      	movs	r0, #1
 800ce18:	4798      	blx	r3
    }

    return lmhStatus;
 800ce1a:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 800ce1e:	4618      	mov	r0, r3
 800ce20:	3738      	adds	r7, #56	@ 0x38
 800ce22:	46bd      	mov	sp, r7
 800ce24:	bd80      	pop	{r7, pc}
 800ce26:	bf00      	nop
 800ce28:	200004f4 	.word	0x200004f4

0800ce2c <NvmDataMgmtEvent>:
static uint16_t NvmNotifyFlags = 0;

#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */

void NvmDataMgmtEvent( uint16_t notifyFlags )
{
 800ce2c:	b480      	push	{r7}
 800ce2e:	b083      	sub	sp, #12
 800ce30:	af00      	add	r7, sp, #0
 800ce32:	4603      	mov	r3, r0
 800ce34:	80fb      	strh	r3, [r7, #6]
#if( CONTEXT_MANAGEMENT_ENABLED == 1 )
    NvmNotifyFlags |= notifyFlags;
 800ce36:	4b06      	ldr	r3, [pc, #24]	@ (800ce50 <NvmDataMgmtEvent+0x24>)
 800ce38:	881a      	ldrh	r2, [r3, #0]
 800ce3a:	88fb      	ldrh	r3, [r7, #6]
 800ce3c:	4313      	orrs	r3, r2
 800ce3e:	b29a      	uxth	r2, r3
 800ce40:	4b03      	ldr	r3, [pc, #12]	@ (800ce50 <NvmDataMgmtEvent+0x24>)
 800ce42:	801a      	strh	r2, [r3, #0]
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */
}
 800ce44:	bf00      	nop
 800ce46:	370c      	adds	r7, #12
 800ce48:	46bd      	mov	sp, r7
 800ce4a:	bc80      	pop	{r7}
 800ce4c:	4770      	bx	lr
 800ce4e:	bf00      	nop
 800ce50:	20000618 	.word	0x20000618

0800ce54 <NvmDataMgmtStoreBegin>:

int32_t NvmDataMgmtStoreBegin( void )
{
 800ce54:	b580      	push	{r7, lr}
 800ce56:	af00      	add	r7, sp, #0
#if( CONTEXT_MANAGEMENT_ENABLED == 1 )
    // Input checks
    if( NvmNotifyFlags == LORAMAC_NVM_NOTIFY_FLAG_NONE )
 800ce58:	4b08      	ldr	r3, [pc, #32]	@ (800ce7c <NvmDataMgmtStoreBegin+0x28>)
 800ce5a:	881b      	ldrh	r3, [r3, #0]
 800ce5c:	2b00      	cmp	r3, #0
 800ce5e:	d102      	bne.n	800ce66 <NvmDataMgmtStoreBegin+0x12>
    {
        // There was no update.
        return NVM_DATA_NO_UPDATED_DATA;
 800ce60:	f06f 0301 	mvn.w	r3, #1
 800ce64:	e008      	b.n	800ce78 <NvmDataMgmtStoreBegin+0x24>
    }
    if( LoRaMacStop( ) != LORAMAC_STATUS_OK )
 800ce66:	f004 fa13 	bl	8011290 <LoRaMacStop>
 800ce6a:	4603      	mov	r3, r0
 800ce6c:	2b00      	cmp	r3, #0
 800ce6e:	d002      	beq.n	800ce76 <NvmDataMgmtStoreBegin+0x22>
    {
        return NVM_DATA_NOT_AVAILABLE;
 800ce70:	f06f 0302 	mvn.w	r3, #2
 800ce74:	e000      	b.n	800ce78 <NvmDataMgmtStoreBegin+0x24>
    }
    return NVM_DATA_OK;
 800ce76:	2300      	movs	r3, #0
#else
    return NVM_DATA_DISABLED;
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 800ce78:	4618      	mov	r0, r3
 800ce7a:	bd80      	pop	{r7, pc}
 800ce7c:	20000618 	.word	0x20000618

0800ce80 <NvmDataMgmtStoreEnd>:

int32_t NvmDataMgmtStoreEnd( void )
{
 800ce80:	b580      	push	{r7, lr}
 800ce82:	af00      	add	r7, sp, #0
#if( CONTEXT_MANAGEMENT_ENABLED == 1 )
    // Reset notification flags
    NvmNotifyFlags = LORAMAC_NVM_NOTIFY_FLAG_NONE;
 800ce84:	4b03      	ldr	r3, [pc, #12]	@ (800ce94 <NvmDataMgmtStoreEnd+0x14>)
 800ce86:	2200      	movs	r2, #0
 800ce88:	801a      	strh	r2, [r3, #0]

    // Resume LoRaMac
    LoRaMacStart( );
 800ce8a:	f004 f9f3 	bl	8011274 <LoRaMacStart>
    return NVM_DATA_OK;
 800ce8e:	2300      	movs	r3, #0
#else
    return NVM_DATA_DISABLED;
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 800ce90:	4618      	mov	r0, r3
 800ce92:	bd80      	pop	{r7, pc}
 800ce94:	20000618 	.word	0x20000618

0800ce98 <ClassBStatusReset>:

/*!
 * Reset Beacon status structure
 */
static inline void ClassBStatusReset( void )
{
 800ce98:	b580      	push	{r7, lr}
 800ce9a:	af00      	add	r7, sp, #0
    memset1( ( uint8_t* ) &ComplianceTestState.ClassBStatus, 0, sizeof( ClassBStatus_t ) / sizeof( uint8_t ) );
 800ce9c:	2220      	movs	r2, #32
 800ce9e:	2100      	movs	r1, #0
 800cea0:	4802      	ldr	r0, [pc, #8]	@ (800ceac <ClassBStatusReset+0x14>)
 800cea2:	f009 fe17 	bl	8016ad4 <memset1>
}
 800cea6:	bf00      	nop
 800cea8:	bd80      	pop	{r7, pc}
 800ceaa:	bf00      	nop
 800ceac:	20000630 	.word	0x20000630

0800ceb0 <LmhpCompliancePackageFactory>:
    .OnSysTimeUpdate         = NULL,  // To be initialized by LmHandler
    .OnSystemReset           = NULL,  // To be initialized by LmHandler
};

LmhPackage_t *LmhpCompliancePackageFactory( void )
{
 800ceb0:	b480      	push	{r7}
 800ceb2:	af00      	add	r7, sp, #0
    return &CompliancePackage;
 800ceb4:	4b02      	ldr	r3, [pc, #8]	@ (800cec0 <LmhpCompliancePackageFactory+0x10>)
}
 800ceb6:	4618      	mov	r0, r3
 800ceb8:	46bd      	mov	sp, r7
 800ceba:	bc80      	pop	{r7}
 800cebc:	4770      	bx	lr
 800cebe:	bf00      	nop
 800cec0:	200000e8 	.word	0x200000e8

0800cec4 <LmhpComplianceInit>:

static void LmhpComplianceInit( void* params, uint8_t* dataBuffer, uint8_t dataBufferMaxSize )
{
 800cec4:	b580      	push	{r7, lr}
 800cec6:	b086      	sub	sp, #24
 800cec8:	af02      	add	r7, sp, #8
 800ceca:	60f8      	str	r0, [r7, #12]
 800cecc:	60b9      	str	r1, [r7, #8]
 800cece:	4613      	mov	r3, r2
 800ced0:	71fb      	strb	r3, [r7, #7]
    if( ( params != NULL ) && ( dataBuffer != NULL ) )
 800ced2:	68fb      	ldr	r3, [r7, #12]
 800ced4:	2b00      	cmp	r3, #0
 800ced6:	d018      	beq.n	800cf0a <LmhpComplianceInit+0x46>
 800ced8:	68bb      	ldr	r3, [r7, #8]
 800ceda:	2b00      	cmp	r3, #0
 800cedc:	d015      	beq.n	800cf0a <LmhpComplianceInit+0x46>
    {
        ComplianceParams                      = ( LmhpComplianceParams_t* ) params;
 800cede:	4a19      	ldr	r2, [pc, #100]	@ (800cf44 <LmhpComplianceInit+0x80>)
 800cee0:	68fb      	ldr	r3, [r7, #12]
 800cee2:	6013      	str	r3, [r2, #0]
        ComplianceTestState.DataBuffer        = dataBuffer;
 800cee4:	4a18      	ldr	r2, [pc, #96]	@ (800cf48 <LmhpComplianceInit+0x84>)
 800cee6:	68bb      	ldr	r3, [r7, #8]
 800cee8:	60d3      	str	r3, [r2, #12]
        ComplianceTestState.DataBufferMaxSize = dataBufferMaxSize;
 800ceea:	4a17      	ldr	r2, [pc, #92]	@ (800cf48 <LmhpComplianceInit+0x84>)
 800ceec:	79fb      	ldrb	r3, [r7, #7]
 800ceee:	7253      	strb	r3, [r2, #9]
        ComplianceTestState.Initialized       = true;
 800cef0:	4b15      	ldr	r3, [pc, #84]	@ (800cf48 <LmhpComplianceInit+0x84>)
 800cef2:	2201      	movs	r2, #1
 800cef4:	701a      	strb	r2, [r3, #0]
        TimerInit( &ProcessTimer, OnProcessTimer );
 800cef6:	2300      	movs	r3, #0
 800cef8:	9300      	str	r3, [sp, #0]
 800cefa:	4b14      	ldr	r3, [pc, #80]	@ (800cf4c <LmhpComplianceInit+0x88>)
 800cefc:	2200      	movs	r2, #0
 800cefe:	f04f 31ff 	mov.w	r1, #4294967295
 800cf02:	4813      	ldr	r0, [pc, #76]	@ (800cf50 <LmhpComplianceInit+0x8c>)
 800cf04:	f00d fe4c 	bl	801aba0 <UTIL_TIMER_Create>
 800cf08:	e005      	b.n	800cf16 <LmhpComplianceInit+0x52>
    }
    else
    {
        ComplianceParams                = NULL;
 800cf0a:	4b0e      	ldr	r3, [pc, #56]	@ (800cf44 <LmhpComplianceInit+0x80>)
 800cf0c:	2200      	movs	r2, #0
 800cf0e:	601a      	str	r2, [r3, #0]
        ComplianceTestState.Initialized = false;
 800cf10:	4b0d      	ldr	r3, [pc, #52]	@ (800cf48 <LmhpComplianceInit+0x84>)
 800cf12:	2200      	movs	r2, #0
 800cf14:	701a      	strb	r2, [r3, #0]
    }
    ComplianceTestState.RxAppCnt = 0;
 800cf16:	4b0c      	ldr	r3, [pc, #48]	@ (800cf48 <LmhpComplianceInit+0x84>)
 800cf18:	2200      	movs	r2, #0
 800cf1a:	821a      	strh	r2, [r3, #16]
    ClassBStatusReset( );
 800cf1c:	f7ff ffbc 	bl	800ce98 <ClassBStatusReset>
    ComplianceTestState.IsTxPending = false;
 800cf20:	4b09      	ldr	r3, [pc, #36]	@ (800cf48 <LmhpComplianceInit+0x84>)
 800cf22:	2200      	movs	r2, #0
 800cf24:	705a      	strb	r2, [r3, #1]
    ComplianceTestState.IsBeaconRxStatusIndOn = false;
 800cf26:	4b08      	ldr	r3, [pc, #32]	@ (800cf48 <LmhpComplianceInit+0x84>)
 800cf28:	2200      	movs	r2, #0
 800cf2a:	749a      	strb	r2, [r3, #18]
    ComplianceTestState.IsResetCmdPending = false;
 800cf2c:	4b06      	ldr	r3, [pc, #24]	@ (800cf48 <LmhpComplianceInit+0x84>)
 800cf2e:	2200      	movs	r2, #0
 800cf30:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    ComplianceTestState.IsClassReqCmdPending = false;
 800cf34:	4b04      	ldr	r3, [pc, #16]	@ (800cf48 <LmhpComplianceInit+0x84>)
 800cf36:	2200      	movs	r2, #0
 800cf38:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
}
 800cf3c:	bf00      	nop
 800cf3e:	3710      	adds	r7, #16
 800cf40:	46bd      	mov	sp, r7
 800cf42:	bd80      	pop	{r7, pc}
 800cf44:	20000654 	.word	0x20000654
 800cf48:	2000061c 	.word	0x2000061c
 800cf4c:	0800d839 	.word	0x0800d839
 800cf50:	20000658 	.word	0x20000658

0800cf54 <LmhpComplianceIsInitialized>:

static bool LmhpComplianceIsInitialized( void )
{
 800cf54:	b480      	push	{r7}
 800cf56:	af00      	add	r7, sp, #0
    return ComplianceTestState.Initialized;
 800cf58:	4b02      	ldr	r3, [pc, #8]	@ (800cf64 <LmhpComplianceIsInitialized+0x10>)
 800cf5a:	781b      	ldrb	r3, [r3, #0]
}
 800cf5c:	4618      	mov	r0, r3
 800cf5e:	46bd      	mov	sp, r7
 800cf60:	bc80      	pop	{r7}
 800cf62:	4770      	bx	lr
 800cf64:	2000061c 	.word	0x2000061c

0800cf68 <LmhpComplianceIsTxPending>:

static bool LmhpComplianceIsTxPending( void )
{
 800cf68:	b480      	push	{r7}
 800cf6a:	af00      	add	r7, sp, #0
    return ComplianceTestState.IsTxPending;
 800cf6c:	4b02      	ldr	r3, [pc, #8]	@ (800cf78 <LmhpComplianceIsTxPending+0x10>)
 800cf6e:	785b      	ldrb	r3, [r3, #1]
}
 800cf70:	4618      	mov	r0, r3
 800cf72:	46bd      	mov	sp, r7
 800cf74:	bc80      	pop	{r7}
 800cf76:	4770      	bx	lr
 800cf78:	2000061c 	.word	0x2000061c

0800cf7c <LmhpComplianceProcess>:

static void LmhpComplianceProcess( void )
{
 800cf7c:	b590      	push	{r4, r7, lr}
 800cf7e:	b085      	sub	sp, #20
 800cf80:	af00      	add	r7, sp, #0
    if( ComplianceTestState.IsTxPending == true )
 800cf82:	4b33      	ldr	r3, [pc, #204]	@ (800d050 <LmhpComplianceProcess+0xd4>)
 800cf84:	785b      	ldrb	r3, [r3, #1]
 800cf86:	2b00      	cmp	r3, #0
 800cf88:	d03f      	beq.n	800d00a <LmhpComplianceProcess+0x8e>
    {
        TimerTime_t now = TimerGetCurrentTime( );
 800cf8a:	f00d ffc7 	bl	801af1c <UTIL_TIMER_GetCurrentTime>
 800cf8e:	60f8      	str	r0, [r7, #12]
        if( now > ( ComplianceTestState.TxPendingTimestamp + LmHandlerGetDutyCycleWaitTime( ) ) )
 800cf90:	4b2f      	ldr	r3, [pc, #188]	@ (800d050 <LmhpComplianceProcess+0xd4>)
 800cf92:	685c      	ldr	r4, [r3, #4]
 800cf94:	f7ff f96a 	bl	800c26c <LmHandlerGetDutyCycleWaitTime>
 800cf98:	4603      	mov	r3, r0
 800cf9a:	4423      	add	r3, r4
 800cf9c:	68fa      	ldr	r2, [r7, #12]
 800cf9e:	429a      	cmp	r2, r3
 800cfa0:	d942      	bls.n	800d028 <LmhpComplianceProcess+0xac>
        {
            if( ComplianceTestState.DataBufferSize != 0 )
 800cfa2:	4b2b      	ldr	r3, [pc, #172]	@ (800d050 <LmhpComplianceProcess+0xd4>)
 800cfa4:	7a9b      	ldrb	r3, [r3, #10]
 800cfa6:	2b00      	cmp	r3, #0
 800cfa8:	d03e      	beq.n	800d028 <LmhpComplianceProcess+0xac>
            {
                // Answer commands
                LmHandlerAppData_t appData = {
 800cfaa:	23e0      	movs	r3, #224	@ 0xe0
 800cfac:	703b      	strb	r3, [r7, #0]
                    .Buffer     = ComplianceTestState.DataBuffer,
                    .BufferSize = ComplianceTestState.DataBufferSize,
 800cfae:	4b28      	ldr	r3, [pc, #160]	@ (800d050 <LmhpComplianceProcess+0xd4>)
 800cfb0:	7a9b      	ldrb	r3, [r3, #10]
                LmHandlerAppData_t appData = {
 800cfb2:	707b      	strb	r3, [r7, #1]
                    .Buffer     = ComplianceTestState.DataBuffer,
 800cfb4:	4b26      	ldr	r3, [pc, #152]	@ (800d050 <LmhpComplianceProcess+0xd4>)
 800cfb6:	68db      	ldr	r3, [r3, #12]
                LmHandlerAppData_t appData = {
 800cfb8:	607b      	str	r3, [r7, #4]
                    .Port       = COMPLIANCE_PORT,
                };
                LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_ERROR;
 800cfba:	23ff      	movs	r3, #255	@ 0xff
 800cfbc:	72fb      	strb	r3, [r7, #11]
                lmhStatus = LmHandlerSend( &appData, ComplianceTestState.IsTxConfirmed, true );
 800cfbe:	4b24      	ldr	r3, [pc, #144]	@ (800d050 <LmhpComplianceProcess+0xd4>)
 800cfc0:	7a19      	ldrb	r1, [r3, #8]
 800cfc2:	463b      	mov	r3, r7
 800cfc4:	2201      	movs	r2, #1
 800cfc6:	4618      	mov	r0, r3
 800cfc8:	f7ff f9f8 	bl	800c3bc <LmHandlerSend>
 800cfcc:	4603      	mov	r3, r0
 800cfce:	72fb      	strb	r3, [r7, #11]
                if ((lmhStatus == LORAMAC_HANDLER_BUSY_ERROR) || (lmhStatus == LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED))
 800cfd0:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800cfd4:	f113 0f02 	cmn.w	r3, #2
 800cfd8:	d004      	beq.n	800cfe4 <LmhpComplianceProcess+0x68>
 800cfda:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800cfde:	f113 0f06 	cmn.w	r3, #6
 800cfe2:	d108      	bne.n	800cff6 <LmhpComplianceProcess+0x7a>
                {
                    // try to send the message again
                    TimerSetValue( &ProcessTimer, 1000 );
 800cfe4:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800cfe8:	481a      	ldr	r0, [pc, #104]	@ (800d054 <LmhpComplianceProcess+0xd8>)
 800cfea:	f00d feed 	bl	801adc8 <UTIL_TIMER_SetPeriod>
                    TimerStart(&ProcessTimer);
 800cfee:	4819      	ldr	r0, [pc, #100]	@ (800d054 <LmhpComplianceProcess+0xd8>)
 800cff0:	f00d fe0c 	bl	801ac0c <UTIL_TIMER_Start>
 800cff4:	e005      	b.n	800d002 <LmhpComplianceProcess+0x86>
                }
                else
                {
                    ComplianceTestState.IsTxPending = false;
 800cff6:	4b16      	ldr	r3, [pc, #88]	@ (800d050 <LmhpComplianceProcess+0xd4>)
 800cff8:	2200      	movs	r2, #0
 800cffa:	705a      	strb	r2, [r3, #1]
                    ComplianceTestState.DataBufferSize = 0;
 800cffc:	4b14      	ldr	r3, [pc, #80]	@ (800d050 <LmhpComplianceProcess+0xd4>)
 800cffe:	2200      	movs	r2, #0
 800d000:	729a      	strb	r2, [r3, #10]
                }
                ComplianceTestState.TxPendingTimestamp = now;
 800d002:	4a13      	ldr	r2, [pc, #76]	@ (800d050 <LmhpComplianceProcess+0xd4>)
 800d004:	68fb      	ldr	r3, [r7, #12]
 800d006:	6053      	str	r3, [r2, #4]
 800d008:	e00e      	b.n	800d028 <LmhpComplianceProcess+0xac>
            }
        }
    }
    else
    { // If no Tx is pending process other commands
        if( ComplianceTestState.IsClassReqCmdPending == true )
 800d00a:	4b11      	ldr	r3, [pc, #68]	@ (800d050 <LmhpComplianceProcess+0xd4>)
 800d00c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800d010:	2b00      	cmp	r3, #0
 800d012:	d009      	beq.n	800d028 <LmhpComplianceProcess+0xac>
        {
            ComplianceTestState.IsClassReqCmdPending = false;
 800d014:	4b0e      	ldr	r3, [pc, #56]	@ (800d050 <LmhpComplianceProcess+0xd4>)
 800d016:	2200      	movs	r2, #0
 800d018:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
            LmHandlerRequestClass( ComplianceTestState.NewClass );
 800d01c:	4b0c      	ldr	r3, [pc, #48]	@ (800d050 <LmhpComplianceProcess+0xd4>)
 800d01e:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 800d022:	4618      	mov	r0, r3
 800d024:	f7ff fab8 	bl	800c598 <LmHandlerRequestClass>
        }
    }

    if( ComplianceTestState.IsResetCmdPending == true )
 800d028:	4b09      	ldr	r3, [pc, #36]	@ (800d050 <LmhpComplianceProcess+0xd4>)
 800d02a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800d02e:	2b00      	cmp	r3, #0
 800d030:	d00a      	beq.n	800d048 <LmhpComplianceProcess+0xcc>
    {
        ComplianceTestState.IsResetCmdPending = false;
 800d032:	4b07      	ldr	r3, [pc, #28]	@ (800d050 <LmhpComplianceProcess+0xd4>)
 800d034:	2200      	movs	r2, #0
 800d036:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        // Call platform MCU reset API
        if (CompliancePackage.OnSystemReset != NULL)
 800d03a:	4b07      	ldr	r3, [pc, #28]	@ (800d058 <LmhpComplianceProcess+0xdc>)
 800d03c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d03e:	2b00      	cmp	r3, #0
 800d040:	d002      	beq.n	800d048 <LmhpComplianceProcess+0xcc>
        {
            CompliancePackage.OnSystemReset( );
 800d042:	4b05      	ldr	r3, [pc, #20]	@ (800d058 <LmhpComplianceProcess+0xdc>)
 800d044:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d046:	4798      	blx	r3
        }
    }
}
 800d048:	bf00      	nop
 800d04a:	3714      	adds	r7, #20
 800d04c:	46bd      	mov	sp, r7
 800d04e:	bd90      	pop	{r4, r7, pc}
 800d050:	2000061c 	.word	0x2000061c
 800d054:	20000658 	.word	0x20000658
 800d058:	200000e8 	.word	0x200000e8

0800d05c <LmhpComplianceOnMcpsIndication>:

static void LmhpComplianceOnMcpsIndication( McpsIndication_t* mcpsIndication )
{
 800d05c:	b5b0      	push	{r4, r5, r7, lr}
 800d05e:	b0a4      	sub	sp, #144	@ 0x90
 800d060:	af00      	add	r7, sp, #0
 800d062:	6078      	str	r0, [r7, #4]
    uint8_t cmdIndex        = 0;
 800d064:	2300      	movs	r3, #0
 800d066:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
    MibRequestConfirm_t mibReq;

    if( ComplianceTestState.Initialized == false )
 800d06a:	4bce      	ldr	r3, [pc, #824]	@ (800d3a4 <LmhpComplianceOnMcpsIndication+0x348>)
 800d06c:	781b      	ldrb	r3, [r3, #0]
 800d06e:	f083 0301 	eor.w	r3, r3, #1
 800d072:	b2db      	uxtb	r3, r3
 800d074:	2b00      	cmp	r3, #0
 800d076:	f040 83b5 	bne.w	800d7e4 <LmhpComplianceOnMcpsIndication+0x788>
        return;
    }

    // Increment the compliance certification protocol downlink counter
    // Not counting downlinks on FPort 0
    if( ( mcpsIndication->Port > 0 ) || ( mcpsIndication->AckReceived == true ) )
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	78db      	ldrb	r3, [r3, #3]
 800d07e:	2b00      	cmp	r3, #0
 800d080:	d103      	bne.n	800d08a <LmhpComplianceOnMcpsIndication+0x2e>
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	7b9b      	ldrb	r3, [r3, #14]
 800d086:	2b00      	cmp	r3, #0
 800d088:	d005      	beq.n	800d096 <LmhpComplianceOnMcpsIndication+0x3a>
    {
        ComplianceTestState.RxAppCnt++;
 800d08a:	4bc6      	ldr	r3, [pc, #792]	@ (800d3a4 <LmhpComplianceOnMcpsIndication+0x348>)
 800d08c:	8a1b      	ldrh	r3, [r3, #16]
 800d08e:	3301      	adds	r3, #1
 800d090:	b29a      	uxth	r2, r3
 800d092:	4bc4      	ldr	r3, [pc, #784]	@ (800d3a4 <LmhpComplianceOnMcpsIndication+0x348>)
 800d094:	821a      	strh	r2, [r3, #16]
    }

    if( mcpsIndication->RxData == false )
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	7b5b      	ldrb	r3, [r3, #13]
 800d09a:	f083 0301 	eor.w	r3, r3, #1
 800d09e:	b2db      	uxtb	r3, r3
 800d0a0:	2b00      	cmp	r3, #0
 800d0a2:	f040 83a1 	bne.w	800d7e8 <LmhpComplianceOnMcpsIndication+0x78c>
    {
        return;
    }

    if( mcpsIndication->Port != COMPLIANCE_PORT )
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	78db      	ldrb	r3, [r3, #3]
 800d0aa:	2be0      	cmp	r3, #224	@ 0xe0
 800d0ac:	f040 839e 	bne.w	800d7ec <LmhpComplianceOnMcpsIndication+0x790>
    {
        return;
    }

    ComplianceTestState.DataBufferSize = 0;
 800d0b0:	4bbc      	ldr	r3, [pc, #752]	@ (800d3a4 <LmhpComplianceOnMcpsIndication+0x348>)
 800d0b2:	2200      	movs	r2, #0
 800d0b4:	729a      	strb	r2, [r3, #10]

    switch( mcpsIndication->Buffer[cmdIndex++] )
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	689a      	ldr	r2, [r3, #8]
 800d0ba:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800d0be:	1c59      	adds	r1, r3, #1
 800d0c0:	f887 108f 	strb.w	r1, [r7, #143]	@ 0x8f
 800d0c4:	4413      	add	r3, r2
 800d0c6:	781b      	ldrb	r3, [r3, #0]
 800d0c8:	2b7f      	cmp	r3, #127	@ 0x7f
 800d0ca:	f200 836e 	bhi.w	800d7aa <LmhpComplianceOnMcpsIndication+0x74e>
 800d0ce:	a201      	add	r2, pc, #4	@ (adr r2, 800d0d4 <LmhpComplianceOnMcpsIndication+0x78>)
 800d0d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d0d4:	0800d2d5 	.word	0x0800d2d5
 800d0d8:	0800d319 	.word	0x0800d319
 800d0dc:	0800d323 	.word	0x0800d323
 800d0e0:	0800d32f 	.word	0x0800d32f
 800d0e4:	0800d351 	.word	0x0800d351
 800d0e8:	0800d37f 	.word	0x0800d37f
 800d0ec:	0800d3ad 	.word	0x0800d3ad
 800d0f0:	0800d40b 	.word	0x0800d40b
 800d0f4:	0800d463 	.word	0x0800d463
 800d0f8:	0800d4cf 	.word	0x0800d4cf
 800d0fc:	0800d51f 	.word	0x0800d51f
 800d100:	0800d7ab 	.word	0x0800d7ab
 800d104:	0800d7ab 	.word	0x0800d7ab
 800d108:	0800d7ab 	.word	0x0800d7ab
 800d10c:	0800d7ab 	.word	0x0800d7ab
 800d110:	0800d7ab 	.word	0x0800d7ab
 800d114:	0800d7ab 	.word	0x0800d7ab
 800d118:	0800d7ab 	.word	0x0800d7ab
 800d11c:	0800d7ab 	.word	0x0800d7ab
 800d120:	0800d7ab 	.word	0x0800d7ab
 800d124:	0800d7ab 	.word	0x0800d7ab
 800d128:	0800d7ab 	.word	0x0800d7ab
 800d12c:	0800d7ab 	.word	0x0800d7ab
 800d130:	0800d7ab 	.word	0x0800d7ab
 800d134:	0800d7ab 	.word	0x0800d7ab
 800d138:	0800d7ab 	.word	0x0800d7ab
 800d13c:	0800d7ab 	.word	0x0800d7ab
 800d140:	0800d7ab 	.word	0x0800d7ab
 800d144:	0800d7ab 	.word	0x0800d7ab
 800d148:	0800d7ab 	.word	0x0800d7ab
 800d14c:	0800d7ab 	.word	0x0800d7ab
 800d150:	0800d7ab 	.word	0x0800d7ab
 800d154:	0800d527 	.word	0x0800d527
 800d158:	0800d539 	.word	0x0800d539
 800d15c:	0800d541 	.word	0x0800d541
 800d160:	0800d7ab 	.word	0x0800d7ab
 800d164:	0800d7ab 	.word	0x0800d7ab
 800d168:	0800d7ab 	.word	0x0800d7ab
 800d16c:	0800d7ab 	.word	0x0800d7ab
 800d170:	0800d7ab 	.word	0x0800d7ab
 800d174:	0800d7ab 	.word	0x0800d7ab
 800d178:	0800d7ab 	.word	0x0800d7ab
 800d17c:	0800d7ab 	.word	0x0800d7ab
 800d180:	0800d7ab 	.word	0x0800d7ab
 800d184:	0800d7ab 	.word	0x0800d7ab
 800d188:	0800d7ab 	.word	0x0800d7ab
 800d18c:	0800d7ab 	.word	0x0800d7ab
 800d190:	0800d7ab 	.word	0x0800d7ab
 800d194:	0800d7ab 	.word	0x0800d7ab
 800d198:	0800d7ab 	.word	0x0800d7ab
 800d19c:	0800d7ab 	.word	0x0800d7ab
 800d1a0:	0800d7ab 	.word	0x0800d7ab
 800d1a4:	0800d7ab 	.word	0x0800d7ab
 800d1a8:	0800d7ab 	.word	0x0800d7ab
 800d1ac:	0800d7ab 	.word	0x0800d7ab
 800d1b0:	0800d7ab 	.word	0x0800d7ab
 800d1b4:	0800d7ab 	.word	0x0800d7ab
 800d1b8:	0800d7ab 	.word	0x0800d7ab
 800d1bc:	0800d7ab 	.word	0x0800d7ab
 800d1c0:	0800d7ab 	.word	0x0800d7ab
 800d1c4:	0800d7ab 	.word	0x0800d7ab
 800d1c8:	0800d7ab 	.word	0x0800d7ab
 800d1cc:	0800d7ab 	.word	0x0800d7ab
 800d1d0:	0800d7ab 	.word	0x0800d7ab
 800d1d4:	0800d7ab 	.word	0x0800d7ab
 800d1d8:	0800d7ab 	.word	0x0800d7ab
 800d1dc:	0800d7ab 	.word	0x0800d7ab
 800d1e0:	0800d7ab 	.word	0x0800d7ab
 800d1e4:	0800d7ab 	.word	0x0800d7ab
 800d1e8:	0800d7ab 	.word	0x0800d7ab
 800d1ec:	0800d7ab 	.word	0x0800d7ab
 800d1f0:	0800d7ab 	.word	0x0800d7ab
 800d1f4:	0800d7ab 	.word	0x0800d7ab
 800d1f8:	0800d7ab 	.word	0x0800d7ab
 800d1fc:	0800d7ab 	.word	0x0800d7ab
 800d200:	0800d7ab 	.word	0x0800d7ab
 800d204:	0800d7ab 	.word	0x0800d7ab
 800d208:	0800d7ab 	.word	0x0800d7ab
 800d20c:	0800d7ab 	.word	0x0800d7ab
 800d210:	0800d7ab 	.word	0x0800d7ab
 800d214:	0800d7ab 	.word	0x0800d7ab
 800d218:	0800d7ab 	.word	0x0800d7ab
 800d21c:	0800d7ab 	.word	0x0800d7ab
 800d220:	0800d7ab 	.word	0x0800d7ab
 800d224:	0800d7ab 	.word	0x0800d7ab
 800d228:	0800d7ab 	.word	0x0800d7ab
 800d22c:	0800d7ab 	.word	0x0800d7ab
 800d230:	0800d7ab 	.word	0x0800d7ab
 800d234:	0800d7ab 	.word	0x0800d7ab
 800d238:	0800d7ab 	.word	0x0800d7ab
 800d23c:	0800d7ab 	.word	0x0800d7ab
 800d240:	0800d7ab 	.word	0x0800d7ab
 800d244:	0800d7ab 	.word	0x0800d7ab
 800d248:	0800d7ab 	.word	0x0800d7ab
 800d24c:	0800d7ab 	.word	0x0800d7ab
 800d250:	0800d7ab 	.word	0x0800d7ab
 800d254:	0800d7ab 	.word	0x0800d7ab
 800d258:	0800d7ab 	.word	0x0800d7ab
 800d25c:	0800d7ab 	.word	0x0800d7ab
 800d260:	0800d7ab 	.word	0x0800d7ab
 800d264:	0800d7ab 	.word	0x0800d7ab
 800d268:	0800d7ab 	.word	0x0800d7ab
 800d26c:	0800d7ab 	.word	0x0800d7ab
 800d270:	0800d7ab 	.word	0x0800d7ab
 800d274:	0800d7ab 	.word	0x0800d7ab
 800d278:	0800d7ab 	.word	0x0800d7ab
 800d27c:	0800d7ab 	.word	0x0800d7ab
 800d280:	0800d7ab 	.word	0x0800d7ab
 800d284:	0800d7ab 	.word	0x0800d7ab
 800d288:	0800d7ab 	.word	0x0800d7ab
 800d28c:	0800d7ab 	.word	0x0800d7ab
 800d290:	0800d7ab 	.word	0x0800d7ab
 800d294:	0800d7ab 	.word	0x0800d7ab
 800d298:	0800d7ab 	.word	0x0800d7ab
 800d29c:	0800d7ab 	.word	0x0800d7ab
 800d2a0:	0800d7ab 	.word	0x0800d7ab
 800d2a4:	0800d7ab 	.word	0x0800d7ab
 800d2a8:	0800d7ab 	.word	0x0800d7ab
 800d2ac:	0800d7ab 	.word	0x0800d7ab
 800d2b0:	0800d7ab 	.word	0x0800d7ab
 800d2b4:	0800d7ab 	.word	0x0800d7ab
 800d2b8:	0800d7ab 	.word	0x0800d7ab
 800d2bc:	0800d7ab 	.word	0x0800d7ab
 800d2c0:	0800d7ab 	.word	0x0800d7ab
 800d2c4:	0800d7ab 	.word	0x0800d7ab
 800d2c8:	0800d573 	.word	0x0800d573
 800d2cc:	0800d623 	.word	0x0800d623
 800d2d0:	0800d655 	.word	0x0800d655
    {
    case COMPLIANCE_PKG_VERSION_REQ:
    {
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_PKG_VERSION_ANS;
 800d2d4:	4b33      	ldr	r3, [pc, #204]	@ (800d3a4 <LmhpComplianceOnMcpsIndication+0x348>)
 800d2d6:	68da      	ldr	r2, [r3, #12]
 800d2d8:	4b32      	ldr	r3, [pc, #200]	@ (800d3a4 <LmhpComplianceOnMcpsIndication+0x348>)
 800d2da:	7a9b      	ldrb	r3, [r3, #10]
 800d2dc:	1c59      	adds	r1, r3, #1
 800d2de:	b2c8      	uxtb	r0, r1
 800d2e0:	4930      	ldr	r1, [pc, #192]	@ (800d3a4 <LmhpComplianceOnMcpsIndication+0x348>)
 800d2e2:	7288      	strb	r0, [r1, #10]
 800d2e4:	4413      	add	r3, r2
 800d2e6:	2200      	movs	r2, #0
 800d2e8:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_ID;
 800d2ea:	4b2e      	ldr	r3, [pc, #184]	@ (800d3a4 <LmhpComplianceOnMcpsIndication+0x348>)
 800d2ec:	68da      	ldr	r2, [r3, #12]
 800d2ee:	4b2d      	ldr	r3, [pc, #180]	@ (800d3a4 <LmhpComplianceOnMcpsIndication+0x348>)
 800d2f0:	7a9b      	ldrb	r3, [r3, #10]
 800d2f2:	1c59      	adds	r1, r3, #1
 800d2f4:	b2c8      	uxtb	r0, r1
 800d2f6:	492b      	ldr	r1, [pc, #172]	@ (800d3a4 <LmhpComplianceOnMcpsIndication+0x348>)
 800d2f8:	7288      	strb	r0, [r1, #10]
 800d2fa:	4413      	add	r3, r2
 800d2fc:	2206      	movs	r2, #6
 800d2fe:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_VERSION;
 800d300:	4b28      	ldr	r3, [pc, #160]	@ (800d3a4 <LmhpComplianceOnMcpsIndication+0x348>)
 800d302:	68da      	ldr	r2, [r3, #12]
 800d304:	4b27      	ldr	r3, [pc, #156]	@ (800d3a4 <LmhpComplianceOnMcpsIndication+0x348>)
 800d306:	7a9b      	ldrb	r3, [r3, #10]
 800d308:	1c59      	adds	r1, r3, #1
 800d30a:	b2c8      	uxtb	r0, r1
 800d30c:	4925      	ldr	r1, [pc, #148]	@ (800d3a4 <LmhpComplianceOnMcpsIndication+0x348>)
 800d30e:	7288      	strb	r0, [r1, #10]
 800d310:	4413      	add	r3, r2
 800d312:	2201      	movs	r2, #1
 800d314:	701a      	strb	r2, [r3, #0]
        break;
 800d316:	e251      	b.n	800d7bc <LmhpComplianceOnMcpsIndication+0x760>
    }
    case COMPLIANCE_DUT_RESET_REQ:
    {
        ComplianceTestState.IsResetCmdPending = true;
 800d318:	4b22      	ldr	r3, [pc, #136]	@ (800d3a4 <LmhpComplianceOnMcpsIndication+0x348>)
 800d31a:	2201      	movs	r2, #1
 800d31c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        break;
 800d320:	e24c      	b.n	800d7bc <LmhpComplianceOnMcpsIndication+0x760>
    }
    case COMPLIANCE_DUT_JOIN_REQ:
    {
        CompliancePackage.OnJoinRequest( ACTIVATION_TYPE_OTAA, true );
 800d322:	4b21      	ldr	r3, [pc, #132]	@ (800d3a8 <LmhpComplianceOnMcpsIndication+0x34c>)
 800d324:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d326:	2101      	movs	r1, #1
 800d328:	2002      	movs	r0, #2
 800d32a:	4798      	blx	r3
        break;
 800d32c:	e246      	b.n	800d7bc <LmhpComplianceOnMcpsIndication+0x760>
    }
    case COMPLIANCE_SWITCH_CLASS_REQ:
    {
        // CLASS_A = 0, CLASS_B = 1, CLASS_C = 2
        ComplianceTestState.NewClass = ( DeviceClass_t ) mcpsIndication->Buffer[cmdIndex++];
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	689a      	ldr	r2, [r3, #8]
 800d332:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800d336:	1c59      	adds	r1, r3, #1
 800d338:	f887 108f 	strb.w	r1, [r7, #143]	@ 0x8f
 800d33c:	4413      	add	r3, r2
 800d33e:	781a      	ldrb	r2, [r3, #0]
 800d340:	4b18      	ldr	r3, [pc, #96]	@ (800d3a4 <LmhpComplianceOnMcpsIndication+0x348>)
 800d342:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
        ComplianceTestState.IsClassReqCmdPending = true;
 800d346:	4b17      	ldr	r3, [pc, #92]	@ (800d3a4 <LmhpComplianceOnMcpsIndication+0x348>)
 800d348:	2201      	movs	r2, #1
 800d34a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        break;
 800d34e:	e235      	b.n	800d7bc <LmhpComplianceOnMcpsIndication+0x760>
    }
    case COMPLIANCE_ADR_BIT_CHANGE_REQ:
    {
        MibRequestConfirm_t mibReq;
        mibReq.Type            = MIB_ADR;
 800d350:	2304      	movs	r3, #4
 800d352:	733b      	strb	r3, [r7, #12]
        mibReq.Param.AdrEnable = mcpsIndication->Buffer[cmdIndex++];
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	689a      	ldr	r2, [r3, #8]
 800d358:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800d35c:	1c59      	adds	r1, r3, #1
 800d35e:	f887 108f 	strb.w	r1, [r7, #143]	@ 0x8f
 800d362:	4413      	add	r3, r2
 800d364:	781b      	ldrb	r3, [r3, #0]
 800d366:	2b00      	cmp	r3, #0
 800d368:	bf14      	ite	ne
 800d36a:	2301      	movne	r3, #1
 800d36c:	2300      	moveq	r3, #0
 800d36e:	b2db      	uxtb	r3, r3
 800d370:	743b      	strb	r3, [r7, #16]

        LoRaMacMibSetRequestConfirm( &mibReq );
 800d372:	f107 030c 	add.w	r3, r7, #12
 800d376:	4618      	mov	r0, r3
 800d378:	f004 fa14 	bl	80117a4 <LoRaMacMibSetRequestConfirm>
        break;
 800d37c:	e21e      	b.n	800d7bc <LmhpComplianceOnMcpsIndication+0x760>
    }
    case COMPLIANCE_REGIONAL_DUTY_CYCLE_CTRL_REQ:
    {
        LoRaMacTestSetDutyCycleOn( mcpsIndication->Buffer[cmdIndex++] );
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	689a      	ldr	r2, [r3, #8]
 800d382:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800d386:	1c59      	adds	r1, r3, #1
 800d388:	f887 108f 	strb.w	r1, [r7, #143]	@ 0x8f
 800d38c:	4413      	add	r3, r2
 800d38e:	781b      	ldrb	r3, [r3, #0]
 800d390:	2b00      	cmp	r3, #0
 800d392:	bf14      	ite	ne
 800d394:	2301      	movne	r3, #1
 800d396:	2300      	moveq	r3, #0
 800d398:	b2db      	uxtb	r3, r3
 800d39a:	4618      	mov	r0, r3
 800d39c:	f005 f830 	bl	8012400 <LoRaMacTestSetDutyCycleOn>
        break;
 800d3a0:	e20c      	b.n	800d7bc <LmhpComplianceOnMcpsIndication+0x760>
 800d3a2:	bf00      	nop
 800d3a4:	2000061c 	.word	0x2000061c
 800d3a8:	200000e8 	.word	0x200000e8
    }
    case COMPLIANCE_TX_PERIODICITY_CHANGE_REQ:
    {
        // Periodicity in milli-seconds
        uint32_t periodicity[] = { 0, 5000, 10000, 20000, 30000, 40000, 50000, 60000, 120000, 240000, 480000 };
 800d3ac:	4ba5      	ldr	r3, [pc, #660]	@ (800d644 <LmhpComplianceOnMcpsIndication+0x5e8>)
 800d3ae:	f107 040c 	add.w	r4, r7, #12
 800d3b2:	461d      	mov	r5, r3
 800d3b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d3b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d3b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d3ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d3bc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800d3c0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        uint8_t  index         = mcpsIndication->Buffer[cmdIndex++];
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	689a      	ldr	r2, [r3, #8]
 800d3c8:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800d3cc:	1c59      	adds	r1, r3, #1
 800d3ce:	f887 108f 	strb.w	r1, [r7, #143]	@ 0x8f
 800d3d2:	4413      	add	r3, r2
 800d3d4:	781b      	ldrb	r3, [r3, #0]
 800d3d6:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c

        if( index < ( sizeof( periodicity ) / sizeof( uint32_t ) ) )
 800d3da:	f897 308c 	ldrb.w	r3, [r7, #140]	@ 0x8c
 800d3de:	2b0a      	cmp	r3, #10
 800d3e0:	f200 81e5 	bhi.w	800d7ae <LmhpComplianceOnMcpsIndication+0x752>
        {
            if( ComplianceParams->OnTxPeriodicityChanged != NULL )
 800d3e4:	4b98      	ldr	r3, [pc, #608]	@ (800d648 <LmhpComplianceOnMcpsIndication+0x5ec>)
 800d3e6:	681b      	ldr	r3, [r3, #0]
 800d3e8:	685b      	ldr	r3, [r3, #4]
 800d3ea:	2b00      	cmp	r3, #0
 800d3ec:	f000 81df 	beq.w	800d7ae <LmhpComplianceOnMcpsIndication+0x752>
            {
                ComplianceParams->OnTxPeriodicityChanged( periodicity[index] );
 800d3f0:	4b95      	ldr	r3, [pc, #596]	@ (800d648 <LmhpComplianceOnMcpsIndication+0x5ec>)
 800d3f2:	681b      	ldr	r3, [r3, #0]
 800d3f4:	685a      	ldr	r2, [r3, #4]
 800d3f6:	f897 308c 	ldrb.w	r3, [r7, #140]	@ 0x8c
 800d3fa:	009b      	lsls	r3, r3, #2
 800d3fc:	3390      	adds	r3, #144	@ 0x90
 800d3fe:	443b      	add	r3, r7
 800d400:	f853 3c84 	ldr.w	r3, [r3, #-132]
 800d404:	4618      	mov	r0, r3
 800d406:	4790      	blx	r2
            }
        }
        break;
 800d408:	e1d1      	b.n	800d7ae <LmhpComplianceOnMcpsIndication+0x752>
    }
    case COMPLIANCE_TX_FRAMES_CTRL_REQ:
    {
        uint8_t frameType = mcpsIndication->Buffer[cmdIndex++];
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	689a      	ldr	r2, [r3, #8]
 800d40e:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800d412:	1c59      	adds	r1, r3, #1
 800d414:	f887 108f 	strb.w	r1, [r7, #143]	@ 0x8f
 800d418:	4413      	add	r3, r2
 800d41a:	781b      	ldrb	r3, [r3, #0]
 800d41c:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d

        if( ( frameType == 1 ) || ( frameType == 2 ) )
 800d420:	f897 308d 	ldrb.w	r3, [r7, #141]	@ 0x8d
 800d424:	2b01      	cmp	r3, #1
 800d426:	d004      	beq.n	800d432 <LmhpComplianceOnMcpsIndication+0x3d6>
 800d428:	f897 308d 	ldrb.w	r3, [r7, #141]	@ 0x8d
 800d42c:	2b02      	cmp	r3, #2
 800d42e:	f040 81c0 	bne.w	800d7b2 <LmhpComplianceOnMcpsIndication+0x756>
        {
            ComplianceTestState.IsTxConfirmed = ( frameType != 1 ) ? LORAMAC_HANDLER_CONFIRMED_MSG : LORAMAC_HANDLER_UNCONFIRMED_MSG;
 800d432:	f897 308d 	ldrb.w	r3, [r7, #141]	@ 0x8d
 800d436:	2b01      	cmp	r3, #1
 800d438:	bf14      	ite	ne
 800d43a:	2301      	movne	r3, #1
 800d43c:	2300      	moveq	r3, #0
 800d43e:	b2db      	uxtb	r3, r3
 800d440:	461a      	mov	r2, r3
 800d442:	4b82      	ldr	r3, [pc, #520]	@ (800d64c <LmhpComplianceOnMcpsIndication+0x5f0>)
 800d444:	721a      	strb	r2, [r3, #8]

            if( ComplianceParams->OnTxFrameCtrlChanged != NULL )
 800d446:	4b80      	ldr	r3, [pc, #512]	@ (800d648 <LmhpComplianceOnMcpsIndication+0x5ec>)
 800d448:	681b      	ldr	r3, [r3, #0]
 800d44a:	689b      	ldr	r3, [r3, #8]
 800d44c:	2b00      	cmp	r3, #0
 800d44e:	f000 81b0 	beq.w	800d7b2 <LmhpComplianceOnMcpsIndication+0x756>
            {
                ComplianceParams->OnTxFrameCtrlChanged( ComplianceTestState.IsTxConfirmed );
 800d452:	4b7d      	ldr	r3, [pc, #500]	@ (800d648 <LmhpComplianceOnMcpsIndication+0x5ec>)
 800d454:	681b      	ldr	r3, [r3, #0]
 800d456:	689b      	ldr	r3, [r3, #8]
 800d458:	4a7c      	ldr	r2, [pc, #496]	@ (800d64c <LmhpComplianceOnMcpsIndication+0x5f0>)
 800d45a:	7a12      	ldrb	r2, [r2, #8]
 800d45c:	4610      	mov	r0, r2
 800d45e:	4798      	blx	r3
            }
        }
        break;
 800d460:	e1a7      	b.n	800d7b2 <LmhpComplianceOnMcpsIndication+0x756>
    }
    case COMPLIANCE_ECHO_PAYLOAD_REQ:
    {
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_ECHO_PAYLOAD_ANS;
 800d462:	4b7a      	ldr	r3, [pc, #488]	@ (800d64c <LmhpComplianceOnMcpsIndication+0x5f0>)
 800d464:	68da      	ldr	r2, [r3, #12]
 800d466:	4b79      	ldr	r3, [pc, #484]	@ (800d64c <LmhpComplianceOnMcpsIndication+0x5f0>)
 800d468:	7a9b      	ldrb	r3, [r3, #10]
 800d46a:	1c59      	adds	r1, r3, #1
 800d46c:	b2c8      	uxtb	r0, r1
 800d46e:	4977      	ldr	r1, [pc, #476]	@ (800d64c <LmhpComplianceOnMcpsIndication+0x5f0>)
 800d470:	7288      	strb	r0, [r1, #10]
 800d472:	4413      	add	r3, r2
 800d474:	2208      	movs	r2, #8
 800d476:	701a      	strb	r2, [r3, #0]

        for( uint8_t i = 1; i < MIN( mcpsIndication->BufferSize, ComplianceTestState.DataBufferMaxSize );
 800d478:	2301      	movs	r3, #1
 800d47a:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
 800d47e:	e019      	b.n	800d4b4 <LmhpComplianceOnMcpsIndication+0x458>
             i++ )
        {
            ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = mcpsIndication->Buffer[cmdIndex++] + 1;
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	689a      	ldr	r2, [r3, #8]
 800d484:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800d488:	1c59      	adds	r1, r3, #1
 800d48a:	f887 108f 	strb.w	r1, [r7, #143]	@ 0x8f
 800d48e:	4413      	add	r3, r2
 800d490:	781a      	ldrb	r2, [r3, #0]
 800d492:	4b6e      	ldr	r3, [pc, #440]	@ (800d64c <LmhpComplianceOnMcpsIndication+0x5f0>)
 800d494:	68d9      	ldr	r1, [r3, #12]
 800d496:	4b6d      	ldr	r3, [pc, #436]	@ (800d64c <LmhpComplianceOnMcpsIndication+0x5f0>)
 800d498:	7a9b      	ldrb	r3, [r3, #10]
 800d49a:	1c58      	adds	r0, r3, #1
 800d49c:	b2c4      	uxtb	r4, r0
 800d49e:	486b      	ldr	r0, [pc, #428]	@ (800d64c <LmhpComplianceOnMcpsIndication+0x5f0>)
 800d4a0:	7284      	strb	r4, [r0, #10]
 800d4a2:	440b      	add	r3, r1
 800d4a4:	3201      	adds	r2, #1
 800d4a6:	b2d2      	uxtb	r2, r2
 800d4a8:	701a      	strb	r2, [r3, #0]
             i++ )
 800d4aa:	f897 308e 	ldrb.w	r3, [r7, #142]	@ 0x8e
 800d4ae:	3301      	adds	r3, #1
 800d4b0:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
        for( uint8_t i = 1; i < MIN( mcpsIndication->BufferSize, ComplianceTestState.DataBufferMaxSize );
 800d4b4:	4b65      	ldr	r3, [pc, #404]	@ (800d64c <LmhpComplianceOnMcpsIndication+0x5f0>)
 800d4b6:	7a5a      	ldrb	r2, [r3, #9]
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	7b1b      	ldrb	r3, [r3, #12]
 800d4bc:	4293      	cmp	r3, r2
 800d4be:	bf28      	it	cs
 800d4c0:	4613      	movcs	r3, r2
 800d4c2:	b2db      	uxtb	r3, r3
 800d4c4:	f897 208e 	ldrb.w	r2, [r7, #142]	@ 0x8e
 800d4c8:	429a      	cmp	r2, r3
 800d4ca:	d3d9      	bcc.n	800d480 <LmhpComplianceOnMcpsIndication+0x424>
        }
        break;
 800d4cc:	e176      	b.n	800d7bc <LmhpComplianceOnMcpsIndication+0x760>
    }
    case COMPLIANCE_RX_APP_CNT_REQ:
    {
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_RX_APP_CNT_ANS;
 800d4ce:	4b5f      	ldr	r3, [pc, #380]	@ (800d64c <LmhpComplianceOnMcpsIndication+0x5f0>)
 800d4d0:	68da      	ldr	r2, [r3, #12]
 800d4d2:	4b5e      	ldr	r3, [pc, #376]	@ (800d64c <LmhpComplianceOnMcpsIndication+0x5f0>)
 800d4d4:	7a9b      	ldrb	r3, [r3, #10]
 800d4d6:	1c59      	adds	r1, r3, #1
 800d4d8:	b2c8      	uxtb	r0, r1
 800d4da:	495c      	ldr	r1, [pc, #368]	@ (800d64c <LmhpComplianceOnMcpsIndication+0x5f0>)
 800d4dc:	7288      	strb	r0, [r1, #10]
 800d4de:	4413      	add	r3, r2
 800d4e0:	2209      	movs	r2, #9
 800d4e2:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceTestState.RxAppCnt;
 800d4e4:	4b59      	ldr	r3, [pc, #356]	@ (800d64c <LmhpComplianceOnMcpsIndication+0x5f0>)
 800d4e6:	8a18      	ldrh	r0, [r3, #16]
 800d4e8:	4b58      	ldr	r3, [pc, #352]	@ (800d64c <LmhpComplianceOnMcpsIndication+0x5f0>)
 800d4ea:	68da      	ldr	r2, [r3, #12]
 800d4ec:	4b57      	ldr	r3, [pc, #348]	@ (800d64c <LmhpComplianceOnMcpsIndication+0x5f0>)
 800d4ee:	7a9b      	ldrb	r3, [r3, #10]
 800d4f0:	1c59      	adds	r1, r3, #1
 800d4f2:	b2cc      	uxtb	r4, r1
 800d4f4:	4955      	ldr	r1, [pc, #340]	@ (800d64c <LmhpComplianceOnMcpsIndication+0x5f0>)
 800d4f6:	728c      	strb	r4, [r1, #10]
 800d4f8:	4413      	add	r3, r2
 800d4fa:	b2c2      	uxtb	r2, r0
 800d4fc:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceTestState.RxAppCnt >> 8;
 800d4fe:	4b53      	ldr	r3, [pc, #332]	@ (800d64c <LmhpComplianceOnMcpsIndication+0x5f0>)
 800d500:	8a1b      	ldrh	r3, [r3, #16]
 800d502:	0a1b      	lsrs	r3, r3, #8
 800d504:	b298      	uxth	r0, r3
 800d506:	4b51      	ldr	r3, [pc, #324]	@ (800d64c <LmhpComplianceOnMcpsIndication+0x5f0>)
 800d508:	68da      	ldr	r2, [r3, #12]
 800d50a:	4b50      	ldr	r3, [pc, #320]	@ (800d64c <LmhpComplianceOnMcpsIndication+0x5f0>)
 800d50c:	7a9b      	ldrb	r3, [r3, #10]
 800d50e:	1c59      	adds	r1, r3, #1
 800d510:	b2cc      	uxtb	r4, r1
 800d512:	494e      	ldr	r1, [pc, #312]	@ (800d64c <LmhpComplianceOnMcpsIndication+0x5f0>)
 800d514:	728c      	strb	r4, [r1, #10]
 800d516:	4413      	add	r3, r2
 800d518:	b2c2      	uxtb	r2, r0
 800d51a:	701a      	strb	r2, [r3, #0]
        break;
 800d51c:	e14e      	b.n	800d7bc <LmhpComplianceOnMcpsIndication+0x760>
    }
    case COMPLIANCE_RX_APP_CNT_RESET_REQ:
    {
        ComplianceTestState.RxAppCnt = 0;
 800d51e:	4b4b      	ldr	r3, [pc, #300]	@ (800d64c <LmhpComplianceOnMcpsIndication+0x5f0>)
 800d520:	2200      	movs	r2, #0
 800d522:	821a      	strh	r2, [r3, #16]
        break;
 800d524:	e14a      	b.n	800d7bc <LmhpComplianceOnMcpsIndication+0x760>
    }
    case COMPLIANCE_LINK_CHECK_REQ:
    {
        MlmeReq_t mlmeReq;
        mlmeReq.Type = MLME_LINK_CHECK;
 800d526:	2304      	movs	r3, #4
 800d528:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54

        LoRaMacMlmeRequest( &mlmeReq );
 800d52c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800d530:	4618      	mov	r0, r3
 800d532:	f004 fca7 	bl	8011e84 <LoRaMacMlmeRequest>
        break;
 800d536:	e141      	b.n	800d7bc <LmhpComplianceOnMcpsIndication+0x760>
    }
    case COMPLIANCE_DEVICE_TIME_REQ:
    {
        CompliancePackage.OnDeviceTimeRequest( );
 800d538:	4b45      	ldr	r3, [pc, #276]	@ (800d650 <LmhpComplianceOnMcpsIndication+0x5f4>)
 800d53a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d53c:	4798      	blx	r3
        break;
 800d53e:	e13d      	b.n	800d7bc <LmhpComplianceOnMcpsIndication+0x760>
    }
    case COMPLIANCE_PING_SLOT_INFO_REQ:
    {
        ComplianceTestState.ClassBStatus.PingSlotPeriodicity = mcpsIndication->Buffer[cmdIndex++];
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	689a      	ldr	r2, [r3, #8]
 800d544:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800d548:	1c59      	adds	r1, r3, #1
 800d54a:	f887 108f 	strb.w	r1, [r7, #143]	@ 0x8f
 800d54e:	4413      	add	r3, r2
 800d550:	781a      	ldrb	r2, [r3, #0]
 800d552:	4b3e      	ldr	r3, [pc, #248]	@ (800d64c <LmhpComplianceOnMcpsIndication+0x5f0>)
 800d554:	755a      	strb	r2, [r3, #21]
        if( ComplianceParams->OnPingSlotPeriodicityChanged != NULL )
 800d556:	4b3c      	ldr	r3, [pc, #240]	@ (800d648 <LmhpComplianceOnMcpsIndication+0x5ec>)
 800d558:	681b      	ldr	r3, [r3, #0]
 800d55a:	68db      	ldr	r3, [r3, #12]
 800d55c:	2b00      	cmp	r3, #0
 800d55e:	f000 812a 	beq.w	800d7b6 <LmhpComplianceOnMcpsIndication+0x75a>
        {
        ComplianceParams->OnPingSlotPeriodicityChanged( ComplianceTestState.ClassBStatus.PingSlotPeriodicity );
 800d562:	4b39      	ldr	r3, [pc, #228]	@ (800d648 <LmhpComplianceOnMcpsIndication+0x5ec>)
 800d564:	681b      	ldr	r3, [r3, #0]
 800d566:	68db      	ldr	r3, [r3, #12]
 800d568:	4a38      	ldr	r2, [pc, #224]	@ (800d64c <LmhpComplianceOnMcpsIndication+0x5f0>)
 800d56a:	7d52      	ldrb	r2, [r2, #21]
 800d56c:	4610      	mov	r0, r2
 800d56e:	4798      	blx	r3
        }
        break;
 800d570:	e121      	b.n	800d7b6 <LmhpComplianceOnMcpsIndication+0x75a>
#endif
    /* ST_WORKAROUND_END */
    case COMPLIANCE_TX_CW_REQ:
    {
        MlmeReq_t mlmeReq;
        if( mcpsIndication->BufferSize == 7 )
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	7b1b      	ldrb	r3, [r3, #12]
 800d576:	2b07      	cmp	r3, #7
 800d578:	f040 811f 	bne.w	800d7ba <LmhpComplianceOnMcpsIndication+0x75e>
        {
            mlmeReq.Type = MLME_TXCW;
 800d57c:	2305      	movs	r3, #5
 800d57e:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
            mlmeReq.Req.TxCw.Timeout =
                ( uint16_t )( mcpsIndication->Buffer[cmdIndex] | ( mcpsIndication->Buffer[cmdIndex + 1] << 8 ) );
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	689a      	ldr	r2, [r3, #8]
 800d586:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800d58a:	4413      	add	r3, r2
 800d58c:	781b      	ldrb	r3, [r3, #0]
 800d58e:	b21a      	sxth	r2, r3
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	6899      	ldr	r1, [r3, #8]
 800d594:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800d598:	3301      	adds	r3, #1
 800d59a:	440b      	add	r3, r1
 800d59c:	781b      	ldrb	r3, [r3, #0]
 800d59e:	021b      	lsls	r3, r3, #8
 800d5a0:	b21b      	sxth	r3, r3
 800d5a2:	4313      	orrs	r3, r2
 800d5a4:	b21b      	sxth	r3, r3
 800d5a6:	b29b      	uxth	r3, r3
            mlmeReq.Req.TxCw.Timeout =
 800d5a8:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
            cmdIndex += 2;
 800d5ac:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800d5b0:	3302      	adds	r3, #2
 800d5b2:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
            mlmeReq.Req.TxCw.Frequency =
                ( uint32_t )( mcpsIndication->Buffer[cmdIndex] | ( mcpsIndication->Buffer[cmdIndex + 1] << 8 ) |
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	689a      	ldr	r2, [r3, #8]
 800d5ba:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800d5be:	4413      	add	r3, r2
 800d5c0:	781b      	ldrb	r3, [r3, #0]
 800d5c2:	4619      	mov	r1, r3
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	689a      	ldr	r2, [r3, #8]
 800d5c8:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800d5cc:	3301      	adds	r3, #1
 800d5ce:	4413      	add	r3, r2
 800d5d0:	781b      	ldrb	r3, [r3, #0]
 800d5d2:	021b      	lsls	r3, r3, #8
 800d5d4:	ea41 0203 	orr.w	r2, r1, r3
                               ( mcpsIndication->Buffer[cmdIndex + 2] << 16 ) ) *
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	6899      	ldr	r1, [r3, #8]
 800d5dc:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800d5e0:	3302      	adds	r3, #2
 800d5e2:	440b      	add	r3, r1
 800d5e4:	781b      	ldrb	r3, [r3, #0]
 800d5e6:	041b      	lsls	r3, r3, #16
                ( uint32_t )( mcpsIndication->Buffer[cmdIndex] | ( mcpsIndication->Buffer[cmdIndex + 1] << 8 ) |
 800d5e8:	4313      	orrs	r3, r2
 800d5ea:	461a      	mov	r2, r3
                               ( mcpsIndication->Buffer[cmdIndex + 2] << 16 ) ) *
 800d5ec:	2364      	movs	r3, #100	@ 0x64
 800d5ee:	fb02 f303 	mul.w	r3, r2, r3
            mlmeReq.Req.TxCw.Frequency =
 800d5f2:	64bb      	str	r3, [r7, #72]	@ 0x48
                100;
            cmdIndex += 3;
 800d5f4:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800d5f8:	3303      	adds	r3, #3
 800d5fa:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
            mlmeReq.Req.TxCw.Power = mcpsIndication->Buffer[cmdIndex++];
 800d5fe:	687b      	ldr	r3, [r7, #4]
 800d600:	689a      	ldr	r2, [r3, #8]
 800d602:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800d606:	1c59      	adds	r1, r3, #1
 800d608:	f887 108f 	strb.w	r1, [r7, #143]	@ 0x8f
 800d60c:	4413      	add	r3, r2
 800d60e:	781b      	ldrb	r3, [r3, #0]
 800d610:	b25b      	sxtb	r3, r3
 800d612:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c

            LoRaMacMlmeRequest( &mlmeReq );
 800d616:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800d61a:	4618      	mov	r0, r3
 800d61c:	f004 fc32 	bl	8011e84 <LoRaMacMlmeRequest>
        }
        break;
 800d620:	e0cb      	b.n	800d7ba <LmhpComplianceOnMcpsIndication+0x75e>
    }
    case COMPLIANCE_DUT_FPORT_224_DISABLE_REQ:
    {
        mibReq.Type = MIB_IS_CERT_FPORT_ON;
 800d622:	2339      	movs	r3, #57	@ 0x39
 800d624:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
        mibReq.Param.IsCertPortOn = false;
 800d628:	2300      	movs	r3, #0
 800d62a:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
        LoRaMacMibSetRequestConfirm( &mibReq );
 800d62e:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800d632:	4618      	mov	r0, r3
 800d634:	f004 f8b6 	bl	80117a4 <LoRaMacMibSetRequestConfirm>

        ComplianceTestState.IsResetCmdPending = true;
 800d638:	4b04      	ldr	r3, [pc, #16]	@ (800d64c <LmhpComplianceOnMcpsIndication+0x5f0>)
 800d63a:	2201      	movs	r2, #1
 800d63c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        break;
 800d640:	e0bc      	b.n	800d7bc <LmhpComplianceOnMcpsIndication+0x760>
 800d642:	bf00      	nop
 800d644:	0801be78 	.word	0x0801be78
 800d648:	20000654 	.word	0x20000654
 800d64c:	2000061c 	.word	0x2000061c
 800d650:	200000e8 	.word	0x200000e8
    {
        Version_t           lrwanVersion;
        Version_t           lrwanRpVersion;
        MibRequestConfirm_t mibReq;

        mibReq.Type = MIB_LORAWAN_VERSION;
 800d654:	232a      	movs	r3, #42	@ 0x2a
 800d656:	733b      	strb	r3, [r7, #12]

        LoRaMacMibGetRequestConfirm( &mibReq );
 800d658:	f107 030c 	add.w	r3, r7, #12
 800d65c:	4618      	mov	r0, r3
 800d65e:	f003 fefb 	bl	8011458 <LoRaMacMibGetRequestConfirm>
        lrwanVersion   = mibReq.Param.LrWanVersion.LoRaWan;
 800d662:	693b      	ldr	r3, [r7, #16]
 800d664:	63fb      	str	r3, [r7, #60]	@ 0x3c
        lrwanRpVersion = mibReq.Param.LrWanVersion.LoRaWanRegion;
 800d666:	697b      	ldr	r3, [r7, #20]
 800d668:	63bb      	str	r3, [r7, #56]	@ 0x38

        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_DUT_VERSION_ANS;
 800d66a:	4b62      	ldr	r3, [pc, #392]	@ (800d7f4 <LmhpComplianceOnMcpsIndication+0x798>)
 800d66c:	68da      	ldr	r2, [r3, #12]
 800d66e:	4b61      	ldr	r3, [pc, #388]	@ (800d7f4 <LmhpComplianceOnMcpsIndication+0x798>)
 800d670:	7a9b      	ldrb	r3, [r3, #10]
 800d672:	1c59      	adds	r1, r3, #1
 800d674:	b2c8      	uxtb	r0, r1
 800d676:	495f      	ldr	r1, [pc, #380]	@ (800d7f4 <LmhpComplianceOnMcpsIndication+0x798>)
 800d678:	7288      	strb	r0, [r1, #10]
 800d67a:	4413      	add	r3, r2
 800d67c:	227f      	movs	r2, #127	@ 0x7f
 800d67e:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Major;
 800d680:	4b5d      	ldr	r3, [pc, #372]	@ (800d7f8 <LmhpComplianceOnMcpsIndication+0x79c>)
 800d682:	681a      	ldr	r2, [r3, #0]
 800d684:	4b5b      	ldr	r3, [pc, #364]	@ (800d7f4 <LmhpComplianceOnMcpsIndication+0x798>)
 800d686:	68d9      	ldr	r1, [r3, #12]
 800d688:	4b5a      	ldr	r3, [pc, #360]	@ (800d7f4 <LmhpComplianceOnMcpsIndication+0x798>)
 800d68a:	7a9b      	ldrb	r3, [r3, #10]
 800d68c:	1c58      	adds	r0, r3, #1
 800d68e:	b2c4      	uxtb	r4, r0
 800d690:	4858      	ldr	r0, [pc, #352]	@ (800d7f4 <LmhpComplianceOnMcpsIndication+0x798>)
 800d692:	7284      	strb	r4, [r0, #10]
 800d694:	440b      	add	r3, r1
 800d696:	78d2      	ldrb	r2, [r2, #3]
 800d698:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Minor;
 800d69a:	4b57      	ldr	r3, [pc, #348]	@ (800d7f8 <LmhpComplianceOnMcpsIndication+0x79c>)
 800d69c:	681a      	ldr	r2, [r3, #0]
 800d69e:	4b55      	ldr	r3, [pc, #340]	@ (800d7f4 <LmhpComplianceOnMcpsIndication+0x798>)
 800d6a0:	68d9      	ldr	r1, [r3, #12]
 800d6a2:	4b54      	ldr	r3, [pc, #336]	@ (800d7f4 <LmhpComplianceOnMcpsIndication+0x798>)
 800d6a4:	7a9b      	ldrb	r3, [r3, #10]
 800d6a6:	1c58      	adds	r0, r3, #1
 800d6a8:	b2c4      	uxtb	r4, r0
 800d6aa:	4852      	ldr	r0, [pc, #328]	@ (800d7f4 <LmhpComplianceOnMcpsIndication+0x798>)
 800d6ac:	7284      	strb	r4, [r0, #10]
 800d6ae:	440b      	add	r3, r1
 800d6b0:	7892      	ldrb	r2, [r2, #2]
 800d6b2:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Patch;
 800d6b4:	4b50      	ldr	r3, [pc, #320]	@ (800d7f8 <LmhpComplianceOnMcpsIndication+0x79c>)
 800d6b6:	681a      	ldr	r2, [r3, #0]
 800d6b8:	4b4e      	ldr	r3, [pc, #312]	@ (800d7f4 <LmhpComplianceOnMcpsIndication+0x798>)
 800d6ba:	68d9      	ldr	r1, [r3, #12]
 800d6bc:	4b4d      	ldr	r3, [pc, #308]	@ (800d7f4 <LmhpComplianceOnMcpsIndication+0x798>)
 800d6be:	7a9b      	ldrb	r3, [r3, #10]
 800d6c0:	1c58      	adds	r0, r3, #1
 800d6c2:	b2c4      	uxtb	r4, r0
 800d6c4:	484b      	ldr	r0, [pc, #300]	@ (800d7f4 <LmhpComplianceOnMcpsIndication+0x798>)
 800d6c6:	7284      	strb	r4, [r0, #10]
 800d6c8:	440b      	add	r3, r1
 800d6ca:	7852      	ldrb	r2, [r2, #1]
 800d6cc:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Revision;
 800d6ce:	4b4a      	ldr	r3, [pc, #296]	@ (800d7f8 <LmhpComplianceOnMcpsIndication+0x79c>)
 800d6d0:	681a      	ldr	r2, [r3, #0]
 800d6d2:	4b48      	ldr	r3, [pc, #288]	@ (800d7f4 <LmhpComplianceOnMcpsIndication+0x798>)
 800d6d4:	68d9      	ldr	r1, [r3, #12]
 800d6d6:	4b47      	ldr	r3, [pc, #284]	@ (800d7f4 <LmhpComplianceOnMcpsIndication+0x798>)
 800d6d8:	7a9b      	ldrb	r3, [r3, #10]
 800d6da:	1c58      	adds	r0, r3, #1
 800d6dc:	b2c4      	uxtb	r4, r0
 800d6de:	4845      	ldr	r0, [pc, #276]	@ (800d7f4 <LmhpComplianceOnMcpsIndication+0x798>)
 800d6e0:	7284      	strb	r4, [r0, #10]
 800d6e2:	440b      	add	r3, r1
 800d6e4:	7812      	ldrb	r2, [r2, #0]
 800d6e6:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Major;
 800d6e8:	4b42      	ldr	r3, [pc, #264]	@ (800d7f4 <LmhpComplianceOnMcpsIndication+0x798>)
 800d6ea:	68da      	ldr	r2, [r3, #12]
 800d6ec:	4b41      	ldr	r3, [pc, #260]	@ (800d7f4 <LmhpComplianceOnMcpsIndication+0x798>)
 800d6ee:	7a9b      	ldrb	r3, [r3, #10]
 800d6f0:	1c59      	adds	r1, r3, #1
 800d6f2:	b2c8      	uxtb	r0, r1
 800d6f4:	493f      	ldr	r1, [pc, #252]	@ (800d7f4 <LmhpComplianceOnMcpsIndication+0x798>)
 800d6f6:	7288      	strb	r0, [r1, #10]
 800d6f8:	4413      	add	r3, r2
 800d6fa:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 800d6fe:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Minor;
 800d700:	4b3c      	ldr	r3, [pc, #240]	@ (800d7f4 <LmhpComplianceOnMcpsIndication+0x798>)
 800d702:	68da      	ldr	r2, [r3, #12]
 800d704:	4b3b      	ldr	r3, [pc, #236]	@ (800d7f4 <LmhpComplianceOnMcpsIndication+0x798>)
 800d706:	7a9b      	ldrb	r3, [r3, #10]
 800d708:	1c59      	adds	r1, r3, #1
 800d70a:	b2c8      	uxtb	r0, r1
 800d70c:	4939      	ldr	r1, [pc, #228]	@ (800d7f4 <LmhpComplianceOnMcpsIndication+0x798>)
 800d70e:	7288      	strb	r0, [r1, #10]
 800d710:	4413      	add	r3, r2
 800d712:	f897 203e 	ldrb.w	r2, [r7, #62]	@ 0x3e
 800d716:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Patch;
 800d718:	4b36      	ldr	r3, [pc, #216]	@ (800d7f4 <LmhpComplianceOnMcpsIndication+0x798>)
 800d71a:	68da      	ldr	r2, [r3, #12]
 800d71c:	4b35      	ldr	r3, [pc, #212]	@ (800d7f4 <LmhpComplianceOnMcpsIndication+0x798>)
 800d71e:	7a9b      	ldrb	r3, [r3, #10]
 800d720:	1c59      	adds	r1, r3, #1
 800d722:	b2c8      	uxtb	r0, r1
 800d724:	4933      	ldr	r1, [pc, #204]	@ (800d7f4 <LmhpComplianceOnMcpsIndication+0x798>)
 800d726:	7288      	strb	r0, [r1, #10]
 800d728:	4413      	add	r3, r2
 800d72a:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 800d72e:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Revision;
 800d730:	4b30      	ldr	r3, [pc, #192]	@ (800d7f4 <LmhpComplianceOnMcpsIndication+0x798>)
 800d732:	68da      	ldr	r2, [r3, #12]
 800d734:	4b2f      	ldr	r3, [pc, #188]	@ (800d7f4 <LmhpComplianceOnMcpsIndication+0x798>)
 800d736:	7a9b      	ldrb	r3, [r3, #10]
 800d738:	1c59      	adds	r1, r3, #1
 800d73a:	b2c8      	uxtb	r0, r1
 800d73c:	492d      	ldr	r1, [pc, #180]	@ (800d7f4 <LmhpComplianceOnMcpsIndication+0x798>)
 800d73e:	7288      	strb	r0, [r1, #10]
 800d740:	4413      	add	r3, r2
 800d742:	f897 203c 	ldrb.w	r2, [r7, #60]	@ 0x3c
 800d746:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Major;
 800d748:	4b2a      	ldr	r3, [pc, #168]	@ (800d7f4 <LmhpComplianceOnMcpsIndication+0x798>)
 800d74a:	68da      	ldr	r2, [r3, #12]
 800d74c:	4b29      	ldr	r3, [pc, #164]	@ (800d7f4 <LmhpComplianceOnMcpsIndication+0x798>)
 800d74e:	7a9b      	ldrb	r3, [r3, #10]
 800d750:	1c59      	adds	r1, r3, #1
 800d752:	b2c8      	uxtb	r0, r1
 800d754:	4927      	ldr	r1, [pc, #156]	@ (800d7f4 <LmhpComplianceOnMcpsIndication+0x798>)
 800d756:	7288      	strb	r0, [r1, #10]
 800d758:	4413      	add	r3, r2
 800d75a:	f897 203b 	ldrb.w	r2, [r7, #59]	@ 0x3b
 800d75e:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Minor;
 800d760:	4b24      	ldr	r3, [pc, #144]	@ (800d7f4 <LmhpComplianceOnMcpsIndication+0x798>)
 800d762:	68da      	ldr	r2, [r3, #12]
 800d764:	4b23      	ldr	r3, [pc, #140]	@ (800d7f4 <LmhpComplianceOnMcpsIndication+0x798>)
 800d766:	7a9b      	ldrb	r3, [r3, #10]
 800d768:	1c59      	adds	r1, r3, #1
 800d76a:	b2c8      	uxtb	r0, r1
 800d76c:	4921      	ldr	r1, [pc, #132]	@ (800d7f4 <LmhpComplianceOnMcpsIndication+0x798>)
 800d76e:	7288      	strb	r0, [r1, #10]
 800d770:	4413      	add	r3, r2
 800d772:	f897 203a 	ldrb.w	r2, [r7, #58]	@ 0x3a
 800d776:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Patch;
 800d778:	4b1e      	ldr	r3, [pc, #120]	@ (800d7f4 <LmhpComplianceOnMcpsIndication+0x798>)
 800d77a:	68da      	ldr	r2, [r3, #12]
 800d77c:	4b1d      	ldr	r3, [pc, #116]	@ (800d7f4 <LmhpComplianceOnMcpsIndication+0x798>)
 800d77e:	7a9b      	ldrb	r3, [r3, #10]
 800d780:	1c59      	adds	r1, r3, #1
 800d782:	b2c8      	uxtb	r0, r1
 800d784:	491b      	ldr	r1, [pc, #108]	@ (800d7f4 <LmhpComplianceOnMcpsIndication+0x798>)
 800d786:	7288      	strb	r0, [r1, #10]
 800d788:	4413      	add	r3, r2
 800d78a:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 800d78e:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Revision;
 800d790:	4b18      	ldr	r3, [pc, #96]	@ (800d7f4 <LmhpComplianceOnMcpsIndication+0x798>)
 800d792:	68da      	ldr	r2, [r3, #12]
 800d794:	4b17      	ldr	r3, [pc, #92]	@ (800d7f4 <LmhpComplianceOnMcpsIndication+0x798>)
 800d796:	7a9b      	ldrb	r3, [r3, #10]
 800d798:	1c59      	adds	r1, r3, #1
 800d79a:	b2c8      	uxtb	r0, r1
 800d79c:	4915      	ldr	r1, [pc, #84]	@ (800d7f4 <LmhpComplianceOnMcpsIndication+0x798>)
 800d79e:	7288      	strb	r0, [r1, #10]
 800d7a0:	4413      	add	r3, r2
 800d7a2:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800d7a6:	701a      	strb	r2, [r3, #0]
        break;
 800d7a8:	e008      	b.n	800d7bc <LmhpComplianceOnMcpsIndication+0x760>
    }
    default:
    {
        break;
 800d7aa:	bf00      	nop
 800d7ac:	e006      	b.n	800d7bc <LmhpComplianceOnMcpsIndication+0x760>
        break;
 800d7ae:	bf00      	nop
 800d7b0:	e004      	b.n	800d7bc <LmhpComplianceOnMcpsIndication+0x760>
        break;
 800d7b2:	bf00      	nop
 800d7b4:	e002      	b.n	800d7bc <LmhpComplianceOnMcpsIndication+0x760>
        break;
 800d7b6:	bf00      	nop
 800d7b8:	e000      	b.n	800d7bc <LmhpComplianceOnMcpsIndication+0x760>
        break;
 800d7ba:	bf00      	nop
    }
    }

    if( ComplianceTestState.DataBufferSize != 0 )
 800d7bc:	4b0d      	ldr	r3, [pc, #52]	@ (800d7f4 <LmhpComplianceOnMcpsIndication+0x798>)
 800d7be:	7a9b      	ldrb	r3, [r3, #10]
 800d7c0:	2b00      	cmp	r3, #0
 800d7c2:	d008      	beq.n	800d7d6 <LmhpComplianceOnMcpsIndication+0x77a>
    {
        TimerSetValue( &ProcessTimer, 1000 );
 800d7c4:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800d7c8:	480c      	ldr	r0, [pc, #48]	@ (800d7fc <LmhpComplianceOnMcpsIndication+0x7a0>)
 800d7ca:	f00d fafd 	bl	801adc8 <UTIL_TIMER_SetPeriod>
        TimerStart(&ProcessTimer);
 800d7ce:	480b      	ldr	r0, [pc, #44]	@ (800d7fc <LmhpComplianceOnMcpsIndication+0x7a0>)
 800d7d0:	f00d fa1c 	bl	801ac0c <UTIL_TIMER_Start>
 800d7d4:	e00b      	b.n	800d7ee <LmhpComplianceOnMcpsIndication+0x792>
    }
    else
    {
        // Abort any pending Tx as a new command has been processed
        TimerStop(&ProcessTimer);
 800d7d6:	4809      	ldr	r0, [pc, #36]	@ (800d7fc <LmhpComplianceOnMcpsIndication+0x7a0>)
 800d7d8:	f00d fa86 	bl	801ace8 <UTIL_TIMER_Stop>
        ComplianceTestState.IsTxPending = false;
 800d7dc:	4b05      	ldr	r3, [pc, #20]	@ (800d7f4 <LmhpComplianceOnMcpsIndication+0x798>)
 800d7de:	2200      	movs	r2, #0
 800d7e0:	705a      	strb	r2, [r3, #1]
 800d7e2:	e004      	b.n	800d7ee <LmhpComplianceOnMcpsIndication+0x792>
        return;
 800d7e4:	bf00      	nop
 800d7e6:	e002      	b.n	800d7ee <LmhpComplianceOnMcpsIndication+0x792>
        return;
 800d7e8:	bf00      	nop
 800d7ea:	e000      	b.n	800d7ee <LmhpComplianceOnMcpsIndication+0x792>
        return;
 800d7ec:	bf00      	nop
    }
}
 800d7ee:	3790      	adds	r7, #144	@ 0x90
 800d7f0:	46bd      	mov	sp, r7
 800d7f2:	bdb0      	pop	{r4, r5, r7, pc}
 800d7f4:	2000061c 	.word	0x2000061c
 800d7f8:	20000654 	.word	0x20000654
 800d7fc:	20000658 	.word	0x20000658

0800d800 <LmhpComplianceOnMlmeConfirm>:

static void LmhpComplianceOnMlmeConfirm( MlmeConfirm_t *mlmeConfirm )
{
 800d800:	b480      	push	{r7}
 800d802:	b083      	sub	sp, #12
 800d804:	af00      	add	r7, sp, #0
 800d806:	6078      	str	r0, [r7, #4]
        break;
    }
#endif
    /* ST_WORKAROUND_END */
    default:
        break;
 800d808:	bf00      	nop
    }
}
 800d80a:	bf00      	nop
 800d80c:	370c      	adds	r7, #12
 800d80e:	46bd      	mov	sp, r7
 800d810:	bc80      	pop	{r7}
 800d812:	4770      	bx	lr

0800d814 <LmhpComplianceOnMlmeIndication>:

static void LmhpComplianceOnMlmeIndication( MlmeIndication_t* mlmeIndication )
{
 800d814:	b480      	push	{r7}
 800d816:	b083      	sub	sp, #12
 800d818:	af00      	add	r7, sp, #0
 800d81a:	6078      	str	r0, [r7, #4]
    if( ComplianceTestState.Initialized == false )
 800d81c:	4b05      	ldr	r3, [pc, #20]	@ (800d834 <LmhpComplianceOnMlmeIndication+0x20>)
 800d81e:	781b      	ldrb	r3, [r3, #0]
 800d820:	f083 0301 	eor.w	r3, r3, #1
 800d824:	b2db      	uxtb	r3, r3
 800d826:	2b00      	cmp	r3, #0
    {
        return;
 800d828:	bf00      	nop
#endif
    /* ST_WORKAROUND_END */
    default:
        break;
    }
}
 800d82a:	370c      	adds	r7, #12
 800d82c:	46bd      	mov	sp, r7
 800d82e:	bc80      	pop	{r7}
 800d830:	4770      	bx	lr
 800d832:	bf00      	nop
 800d834:	2000061c 	.word	0x2000061c

0800d838 <OnProcessTimer>:
}
#endif
/* ST_WORKAROUND_END */

static void OnProcessTimer( void *context )
{
 800d838:	b580      	push	{r7, lr}
 800d83a:	b082      	sub	sp, #8
 800d83c:	af00      	add	r7, sp, #0
 800d83e:	6078      	str	r0, [r7, #4]
    ComplianceTestState.IsTxPending = true;
 800d840:	4b04      	ldr	r3, [pc, #16]	@ (800d854 <OnProcessTimer+0x1c>)
 800d842:	2201      	movs	r2, #1
 800d844:	705a      	strb	r2, [r3, #1]
    CompliancePackage.OnPackageProcessEvent();
 800d846:	4b04      	ldr	r3, [pc, #16]	@ (800d858 <OnProcessTimer+0x20>)
 800d848:	695b      	ldr	r3, [r3, #20]
 800d84a:	4798      	blx	r3
}
 800d84c:	bf00      	nop
 800d84e:	3708      	adds	r7, #8
 800d850:	46bd      	mov	sp, r7
 800d852:	bd80      	pop	{r7, pc}
 800d854:	2000061c 	.word	0x2000061c
 800d858:	200000e8 	.word	0x200000e8

0800d85c <OnRadioTxDone>:
    int16_t Rssi;
    int8_t Snr;
}RxDoneParams;

static void OnRadioTxDone( void )
{
 800d85c:	b590      	push	{r4, r7, lr}
 800d85e:	b083      	sub	sp, #12
 800d860:	af00      	add	r7, sp, #0
    TxDoneParams.CurTime = TimerGetCurrentTime( );
 800d862:	f00d fb5b 	bl	801af1c <UTIL_TIMER_GetCurrentTime>
 800d866:	4603      	mov	r3, r0
 800d868:	4a16      	ldr	r2, [pc, #88]	@ (800d8c4 <OnRadioTxDone+0x68>)
 800d86a:	6013      	str	r3, [r2, #0]
    MacCtx.LastTxSysTime = SysTimeGet( );
 800d86c:	4c16      	ldr	r4, [pc, #88]	@ (800d8c8 <OnRadioTxDone+0x6c>)
 800d86e:	463b      	mov	r3, r7
 800d870:	4618      	mov	r0, r3
 800d872:	f00c fcd3 	bl	801a21c <SysTimeGet>
 800d876:	f504 734e 	add.w	r3, r4, #824	@ 0x338
 800d87a:	463a      	mov	r2, r7
 800d87c:	e892 0003 	ldmia.w	r2, {r0, r1}
 800d880:	e883 0003 	stmia.w	r3, {r0, r1}

    LoRaMacRadioEvents.Events.TxDone = 1;
 800d884:	4a11      	ldr	r2, [pc, #68]	@ (800d8cc <OnRadioTxDone+0x70>)
 800d886:	7813      	ldrb	r3, [r2, #0]
 800d888:	f043 0320 	orr.w	r3, r3, #32
 800d88c:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800d88e:	4b0e      	ldr	r3, [pc, #56]	@ (800d8c8 <OnRadioTxDone+0x6c>)
 800d890:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800d894:	2b00      	cmp	r3, #0
 800d896:	d00a      	beq.n	800d8ae <OnRadioTxDone+0x52>
 800d898:	4b0b      	ldr	r3, [pc, #44]	@ (800d8c8 <OnRadioTxDone+0x6c>)
 800d89a:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800d89e:	691b      	ldr	r3, [r3, #16]
 800d8a0:	2b00      	cmp	r3, #0
 800d8a2:	d004      	beq.n	800d8ae <OnRadioTxDone+0x52>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800d8a4:	4b08      	ldr	r3, [pc, #32]	@ (800d8c8 <OnRadioTxDone+0x6c>)
 800d8a6:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800d8aa:	691b      	ldr	r3, [r3, #16]
 800d8ac:	4798      	blx	r3
    }
    MW_LOG(TS_ON, VLEVEL_M, "MAC txDone\r\n" );
 800d8ae:	4b08      	ldr	r3, [pc, #32]	@ (800d8d0 <OnRadioTxDone+0x74>)
 800d8b0:	2201      	movs	r2, #1
 800d8b2:	2100      	movs	r1, #0
 800d8b4:	2002      	movs	r0, #2
 800d8b6:	f00d fc21 	bl	801b0fc <UTIL_ADV_TRACE_COND_FSend>
}
 800d8ba:	bf00      	nop
 800d8bc:	370c      	adds	r7, #12
 800d8be:	46bd      	mov	sp, r7
 800d8c0:	bd90      	pop	{r4, r7, pc}
 800d8c2:	bf00      	nop
 800d8c4:	2000171c 	.word	0x2000171c
 800d8c8:	20000670 	.word	0x20000670
 800d8cc:	20001718 	.word	0x20001718
 800d8d0:	0801bea4 	.word	0x0801bea4

0800d8d4 <OnRadioRxDone>:

static void OnRadioRxDone( uint8_t *payload, uint16_t size, int16_t rssi, int8_t snr )
{
 800d8d4:	b580      	push	{r7, lr}
 800d8d6:	b084      	sub	sp, #16
 800d8d8:	af00      	add	r7, sp, #0
 800d8da:	60f8      	str	r0, [r7, #12]
 800d8dc:	4608      	mov	r0, r1
 800d8de:	4611      	mov	r1, r2
 800d8e0:	461a      	mov	r2, r3
 800d8e2:	4603      	mov	r3, r0
 800d8e4:	817b      	strh	r3, [r7, #10]
 800d8e6:	460b      	mov	r3, r1
 800d8e8:	813b      	strh	r3, [r7, #8]
 800d8ea:	4613      	mov	r3, r2
 800d8ec:	71fb      	strb	r3, [r7, #7]
    RxDoneParams.LastRxDone = TimerGetCurrentTime( );
 800d8ee:	f00d fb15 	bl	801af1c <UTIL_TIMER_GetCurrentTime>
 800d8f2:	4603      	mov	r3, r0
 800d8f4:	4a18      	ldr	r2, [pc, #96]	@ (800d958 <OnRadioRxDone+0x84>)
 800d8f6:	6013      	str	r3, [r2, #0]
    RxDoneParams.Payload = payload;
 800d8f8:	4a17      	ldr	r2, [pc, #92]	@ (800d958 <OnRadioRxDone+0x84>)
 800d8fa:	68fb      	ldr	r3, [r7, #12]
 800d8fc:	6053      	str	r3, [r2, #4]
    RxDoneParams.Size = size;
 800d8fe:	4a16      	ldr	r2, [pc, #88]	@ (800d958 <OnRadioRxDone+0x84>)
 800d900:	897b      	ldrh	r3, [r7, #10]
 800d902:	8113      	strh	r3, [r2, #8]
    RxDoneParams.Rssi = rssi;
 800d904:	4a14      	ldr	r2, [pc, #80]	@ (800d958 <OnRadioRxDone+0x84>)
 800d906:	893b      	ldrh	r3, [r7, #8]
 800d908:	8153      	strh	r3, [r2, #10]
    RxDoneParams.Snr = snr;
 800d90a:	4a13      	ldr	r2, [pc, #76]	@ (800d958 <OnRadioRxDone+0x84>)
 800d90c:	79fb      	ldrb	r3, [r7, #7]
 800d90e:	7313      	strb	r3, [r2, #12]

    LoRaMacRadioEvents.Events.RxDone = 1;
 800d910:	4a12      	ldr	r2, [pc, #72]	@ (800d95c <OnRadioRxDone+0x88>)
 800d912:	7813      	ldrb	r3, [r2, #0]
 800d914:	f043 0310 	orr.w	r3, r3, #16
 800d918:	7013      	strb	r3, [r2, #0]
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    LoRaMacRadioEvents.Events.RxProcessPending = 1;
 800d91a:	4a10      	ldr	r2, [pc, #64]	@ (800d95c <OnRadioRxDone+0x88>)
 800d91c:	7813      	ldrb	r3, [r2, #0]
 800d91e:	f043 0301 	orr.w	r3, r3, #1
 800d922:	7013      	strb	r3, [r2, #0]
#endif /* LORAMAC_VERSION */

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800d924:	4b0e      	ldr	r3, [pc, #56]	@ (800d960 <OnRadioRxDone+0x8c>)
 800d926:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800d92a:	2b00      	cmp	r3, #0
 800d92c:	d00a      	beq.n	800d944 <OnRadioRxDone+0x70>
 800d92e:	4b0c      	ldr	r3, [pc, #48]	@ (800d960 <OnRadioRxDone+0x8c>)
 800d930:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800d934:	691b      	ldr	r3, [r3, #16]
 800d936:	2b00      	cmp	r3, #0
 800d938:	d004      	beq.n	800d944 <OnRadioRxDone+0x70>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800d93a:	4b09      	ldr	r3, [pc, #36]	@ (800d960 <OnRadioRxDone+0x8c>)
 800d93c:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800d940:	691b      	ldr	r3, [r3, #16]
 800d942:	4798      	blx	r3
    }
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxDone\r\n" );
 800d944:	4b07      	ldr	r3, [pc, #28]	@ (800d964 <OnRadioRxDone+0x90>)
 800d946:	2201      	movs	r2, #1
 800d948:	2100      	movs	r1, #0
 800d94a:	2002      	movs	r0, #2
 800d94c:	f00d fbd6 	bl	801b0fc <UTIL_ADV_TRACE_COND_FSend>
}
 800d950:	bf00      	nop
 800d952:	3710      	adds	r7, #16
 800d954:	46bd      	mov	sp, r7
 800d956:	bd80      	pop	{r7, pc}
 800d958:	20001720 	.word	0x20001720
 800d95c:	20001718 	.word	0x20001718
 800d960:	20000670 	.word	0x20000670
 800d964:	0801beb4 	.word	0x0801beb4

0800d968 <OnRadioTxTimeout>:

static void OnRadioTxTimeout( void )
{
 800d968:	b580      	push	{r7, lr}
 800d96a:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.TxTimeout = 1;
 800d96c:	4a0e      	ldr	r2, [pc, #56]	@ (800d9a8 <OnRadioTxTimeout+0x40>)
 800d96e:	7813      	ldrb	r3, [r2, #0]
 800d970:	f043 0308 	orr.w	r3, r3, #8
 800d974:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800d976:	4b0d      	ldr	r3, [pc, #52]	@ (800d9ac <OnRadioTxTimeout+0x44>)
 800d978:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800d97c:	2b00      	cmp	r3, #0
 800d97e:	d00a      	beq.n	800d996 <OnRadioTxTimeout+0x2e>
 800d980:	4b0a      	ldr	r3, [pc, #40]	@ (800d9ac <OnRadioTxTimeout+0x44>)
 800d982:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800d986:	691b      	ldr	r3, [r3, #16]
 800d988:	2b00      	cmp	r3, #0
 800d98a:	d004      	beq.n	800d996 <OnRadioTxTimeout+0x2e>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800d98c:	4b07      	ldr	r3, [pc, #28]	@ (800d9ac <OnRadioTxTimeout+0x44>)
 800d98e:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800d992:	691b      	ldr	r3, [r3, #16]
 800d994:	4798      	blx	r3
    }
    MW_LOG(TS_ON, VLEVEL_M, "MAC txTimeOut\r\n" );
 800d996:	4b06      	ldr	r3, [pc, #24]	@ (800d9b0 <OnRadioTxTimeout+0x48>)
 800d998:	2201      	movs	r2, #1
 800d99a:	2100      	movs	r1, #0
 800d99c:	2002      	movs	r0, #2
 800d99e:	f00d fbad 	bl	801b0fc <UTIL_ADV_TRACE_COND_FSend>
}
 800d9a2:	bf00      	nop
 800d9a4:	bd80      	pop	{r7, pc}
 800d9a6:	bf00      	nop
 800d9a8:	20001718 	.word	0x20001718
 800d9ac:	20000670 	.word	0x20000670
 800d9b0:	0801bec4 	.word	0x0801bec4

0800d9b4 <OnRadioRxError>:

static void OnRadioRxError( void )
{
 800d9b4:	b580      	push	{r7, lr}
 800d9b6:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.RxError = 1;
 800d9b8:	4a0b      	ldr	r2, [pc, #44]	@ (800d9e8 <OnRadioRxError+0x34>)
 800d9ba:	7813      	ldrb	r3, [r2, #0]
 800d9bc:	f043 0304 	orr.w	r3, r3, #4
 800d9c0:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800d9c2:	4b0a      	ldr	r3, [pc, #40]	@ (800d9ec <OnRadioRxError+0x38>)
 800d9c4:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800d9c8:	2b00      	cmp	r3, #0
 800d9ca:	d00a      	beq.n	800d9e2 <OnRadioRxError+0x2e>
 800d9cc:	4b07      	ldr	r3, [pc, #28]	@ (800d9ec <OnRadioRxError+0x38>)
 800d9ce:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800d9d2:	691b      	ldr	r3, [r3, #16]
 800d9d4:	2b00      	cmp	r3, #0
 800d9d6:	d004      	beq.n	800d9e2 <OnRadioRxError+0x2e>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800d9d8:	4b04      	ldr	r3, [pc, #16]	@ (800d9ec <OnRadioRxError+0x38>)
 800d9da:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800d9de:	691b      	ldr	r3, [r3, #16]
 800d9e0:	4798      	blx	r3
    }
}
 800d9e2:	bf00      	nop
 800d9e4:	bd80      	pop	{r7, pc}
 800d9e6:	bf00      	nop
 800d9e8:	20001718 	.word	0x20001718
 800d9ec:	20000670 	.word	0x20000670

0800d9f0 <OnRadioRxTimeout>:

static void OnRadioRxTimeout( void )
{
 800d9f0:	b580      	push	{r7, lr}
 800d9f2:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.RxTimeout = 1;
 800d9f4:	4a0e      	ldr	r2, [pc, #56]	@ (800da30 <OnRadioRxTimeout+0x40>)
 800d9f6:	7813      	ldrb	r3, [r2, #0]
 800d9f8:	f043 0302 	orr.w	r3, r3, #2
 800d9fc:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800d9fe:	4b0d      	ldr	r3, [pc, #52]	@ (800da34 <OnRadioRxTimeout+0x44>)
 800da00:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800da04:	2b00      	cmp	r3, #0
 800da06:	d00a      	beq.n	800da1e <OnRadioRxTimeout+0x2e>
 800da08:	4b0a      	ldr	r3, [pc, #40]	@ (800da34 <OnRadioRxTimeout+0x44>)
 800da0a:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800da0e:	691b      	ldr	r3, [r3, #16]
 800da10:	2b00      	cmp	r3, #0
 800da12:	d004      	beq.n	800da1e <OnRadioRxTimeout+0x2e>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800da14:	4b07      	ldr	r3, [pc, #28]	@ (800da34 <OnRadioRxTimeout+0x44>)
 800da16:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800da1a:	691b      	ldr	r3, [r3, #16]
 800da1c:	4798      	blx	r3
    }
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxTimeOut\r\n" );
 800da1e:	4b06      	ldr	r3, [pc, #24]	@ (800da38 <OnRadioRxTimeout+0x48>)
 800da20:	2201      	movs	r2, #1
 800da22:	2100      	movs	r1, #0
 800da24:	2002      	movs	r0, #2
 800da26:	f00d fb69 	bl	801b0fc <UTIL_ADV_TRACE_COND_FSend>
}
 800da2a:	bf00      	nop
 800da2c:	bd80      	pop	{r7, pc}
 800da2e:	bf00      	nop
 800da30:	20001718 	.word	0x20001718
 800da34:	20000670 	.word	0x20000670
 800da38:	0801bed4 	.word	0x0801bed4

0800da3c <UpdateRxSlotIdleState>:

static void UpdateRxSlotIdleState( void )
{
 800da3c:	b480      	push	{r7}
 800da3e:	af00      	add	r7, sp, #0
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800da40:	4b08      	ldr	r3, [pc, #32]	@ (800da64 <UpdateRxSlotIdleState+0x28>)
 800da42:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 800da46:	2b02      	cmp	r3, #2
 800da48:	d004      	beq.n	800da54 <UpdateRxSlotIdleState+0x18>
    {
        MacCtx.RxSlot = RX_SLOT_NONE;
 800da4a:	4b07      	ldr	r3, [pc, #28]	@ (800da68 <UpdateRxSlotIdleState+0x2c>)
 800da4c:	2206      	movs	r2, #6
 800da4e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
    }
    else
    {
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
    }
}
 800da52:	e003      	b.n	800da5c <UpdateRxSlotIdleState+0x20>
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
 800da54:	4b04      	ldr	r3, [pc, #16]	@ (800da68 <UpdateRxSlotIdleState+0x2c>)
 800da56:	2202      	movs	r2, #2
 800da58:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
}
 800da5c:	bf00      	nop
 800da5e:	46bd      	mov	sp, r7
 800da60:	bc80      	pop	{r7}
 800da62:	4770      	bx	lr
 800da64:	20000b90 	.word	0x20000b90
 800da68:	20000670 	.word	0x20000670

0800da6c <ProcessRadioTxDone>:

static void ProcessRadioTxDone( void )
{
 800da6c:	b580      	push	{r7, lr}
 800da6e:	b08e      	sub	sp, #56	@ 0x38
 800da70:	af02      	add	r7, sp, #8
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    SetBandTxDoneParams_t txDone;

    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800da72:	4b3e      	ldr	r3, [pc, #248]	@ (800db6c <ProcessRadioTxDone+0x100>)
 800da74:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 800da78:	2b02      	cmp	r3, #2
 800da7a:	d002      	beq.n	800da82 <ProcessRadioTxDone+0x16>
    {
        Radio.Sleep( );
 800da7c:	4b3c      	ldr	r3, [pc, #240]	@ (800db70 <ProcessRadioTxDone+0x104>)
 800da7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800da80:	4798      	blx	r3
    }
#if ( !defined(DISABLE_LORAWAN_RX_WINDOW) || (DISABLE_LORAWAN_RX_WINDOW == 0) )
    // Setup timers
    TimerSetValue( &MacCtx.RxWindowTimer1, MacCtx.RxWindow1Delay );
 800da82:	4b3c      	ldr	r3, [pc, #240]	@ (800db74 <ProcessRadioTxDone+0x108>)
 800da84:	f8d3 33b0 	ldr.w	r3, [r3, #944]	@ 0x3b0
 800da88:	4619      	mov	r1, r3
 800da8a:	483b      	ldr	r0, [pc, #236]	@ (800db78 <ProcessRadioTxDone+0x10c>)
 800da8c:	f00d f99c 	bl	801adc8 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer1 );
 800da90:	4839      	ldr	r0, [pc, #228]	@ (800db78 <ProcessRadioTxDone+0x10c>)
 800da92:	f00d f8bb 	bl	801ac0c <UTIL_TIMER_Start>
    TimerSetValue( &MacCtx.RxWindowTimer2, MacCtx.RxWindow2Delay );
 800da96:	4b37      	ldr	r3, [pc, #220]	@ (800db74 <ProcessRadioTxDone+0x108>)
 800da98:	f8d3 33b4 	ldr.w	r3, [r3, #948]	@ 0x3b4
 800da9c:	4619      	mov	r1, r3
 800da9e:	4837      	ldr	r0, [pc, #220]	@ (800db7c <ProcessRadioTxDone+0x110>)
 800daa0:	f00d f992 	bl	801adc8 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer2 );
 800daa4:	4835      	ldr	r0, [pc, #212]	@ (800db7c <ProcessRadioTxDone+0x110>)
 800daa6:	f00d f8b1 	bl	801ac0c <UTIL_TIMER_Start>
        phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
        TimerSetValue( &MacCtx.AckTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
        TimerStart( &MacCtx.AckTimeoutTimer );
    }
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    if( MacCtx.NodeAckRequested == true )
 800daaa:	4b32      	ldr	r3, [pc, #200]	@ (800db74 <ProcessRadioTxDone+0x108>)
 800daac:	f893 341e 	ldrb.w	r3, [r3, #1054]	@ 0x41e
 800dab0:	2b00      	cmp	r3, #0
 800dab2:	d01a      	beq.n	800daea <ProcessRadioTxDone+0x7e>
    {
        getPhy.Attribute = PHY_RETRANSMIT_TIMEOUT;
 800dab4:	2315      	movs	r3, #21
 800dab6:	f887 3020 	strb.w	r3, [r7, #32]
        phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800daba:	4b2c      	ldr	r3, [pc, #176]	@ (800db6c <ProcessRadioTxDone+0x100>)
 800dabc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800dac0:	f107 0220 	add.w	r2, r7, #32
 800dac4:	4611      	mov	r1, r2
 800dac6:	4618      	mov	r0, r3
 800dac8:	f006 fd28 	bl	801451c <RegionGetPhyParam>
 800dacc:	4603      	mov	r3, r0
 800dace:	61fb      	str	r3, [r7, #28]
        TimerSetValue( &MacCtx.RetransmitTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
 800dad0:	4b28      	ldr	r3, [pc, #160]	@ (800db74 <ProcessRadioTxDone+0x108>)
 800dad2:	f8d3 23b4 	ldr.w	r2, [r3, #948]	@ 0x3b4
 800dad6:	69fb      	ldr	r3, [r7, #28]
 800dad8:	4413      	add	r3, r2
 800dada:	4619      	mov	r1, r3
 800dadc:	4828      	ldr	r0, [pc, #160]	@ (800db80 <ProcessRadioTxDone+0x114>)
 800dade:	f00d f973 	bl	801adc8 <UTIL_TIMER_SetPeriod>
        TimerStart( &MacCtx.RetransmitTimeoutTimer );
 800dae2:	4827      	ldr	r0, [pc, #156]	@ (800db80 <ProcessRadioTxDone+0x114>)
 800dae4:	f00d f892 	bl	801ac0c <UTIL_TIMER_Start>
 800dae8:	e003      	b.n	800daf2 <ProcessRadioTxDone+0x86>
    }
    else
    {
        // Transmission successful, setup status directly
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800daea:	4b22      	ldr	r3, [pc, #136]	@ (800db74 <ProcessRadioTxDone+0x108>)
 800daec:	2200      	movs	r2, #0
 800daee:	f883 2445 	strb.w	r2, [r3, #1093]	@ 0x445
    }
#endif /* LORAMAC_VERSION */

    // Update Aggregated last tx done time
    Nvm.MacGroup1.LastTxDoneTime = TxDoneParams.CurTime;
 800daf2:	4b24      	ldr	r3, [pc, #144]	@ (800db84 <ProcessRadioTxDone+0x118>)
 800daf4:	681b      	ldr	r3, [r3, #0]
 800daf6:	4a1d      	ldr	r2, [pc, #116]	@ (800db6c <ProcessRadioTxDone+0x100>)
 800daf8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    // Update last tx done time for the current channel
    txDone.Channel = MacCtx.Channel;
 800dafa:	4b1e      	ldr	r3, [pc, #120]	@ (800db74 <ProcessRadioTxDone+0x108>)
 800dafc:	f893 341f 	ldrb.w	r3, [r3, #1055]	@ 0x41f
 800db00:	723b      	strb	r3, [r7, #8]
    txDone.LastTxDoneTime = TxDoneParams.CurTime;
 800db02:	4b20      	ldr	r3, [pc, #128]	@ (800db84 <ProcessRadioTxDone+0x118>)
 800db04:	681b      	ldr	r3, [r3, #0]
 800db06:	60fb      	str	r3, [r7, #12]
    txDone.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 800db08:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800db0c:	4618      	mov	r0, r3
 800db0e:	f00c fbbd 	bl	801a28c <SysTimeGetMcuTime>
 800db12:	4638      	mov	r0, r7
 800db14:	4b15      	ldr	r3, [pc, #84]	@ (800db6c <ProcessRadioTxDone+0x100>)
 800db16:	f8d3 2114 	ldr.w	r2, [r3, #276]	@ 0x114
 800db1a:	9200      	str	r2, [sp, #0]
 800db1c:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 800db20:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 800db24:	ca06      	ldmia	r2, {r1, r2}
 800db26:	f00c fb12 	bl	801a14e <SysTimeSub>
 800db2a:	f107 0314 	add.w	r3, r7, #20
 800db2e:	463a      	mov	r2, r7
 800db30:	e892 0003 	ldmia.w	r2, {r0, r1}
 800db34:	e883 0003 	stmia.w	r3, {r0, r1}
    txDone.LastTxAirTime = MacCtx.TxTimeOnAir;
 800db38:	4b0e      	ldr	r3, [pc, #56]	@ (800db74 <ProcessRadioTxDone+0x108>)
 800db3a:	f8d3 3420 	ldr.w	r3, [r3, #1056]	@ 0x420
 800db3e:	613b      	str	r3, [r7, #16]
    txDone.Joined  = true;
 800db40:	2301      	movs	r3, #1
 800db42:	727b      	strb	r3, [r7, #9]
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800db44:	4b09      	ldr	r3, [pc, #36]	@ (800db6c <ProcessRadioTxDone+0x100>)
 800db46:	f893 311c 	ldrb.w	r3, [r3, #284]	@ 0x11c
 800db4a:	2b00      	cmp	r3, #0
 800db4c:	d101      	bne.n	800db52 <ProcessRadioTxDone+0xe6>
    {
        txDone.Joined  = false;
 800db4e:	2300      	movs	r3, #0
 800db50:	727b      	strb	r3, [r7, #9]
    }

    RegionSetBandTxDone( Nvm.MacGroup2.Region, &txDone );
 800db52:	4b06      	ldr	r3, [pc, #24]	@ (800db6c <ProcessRadioTxDone+0x100>)
 800db54:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800db58:	f107 0208 	add.w	r2, r7, #8
 800db5c:	4611      	mov	r1, r2
 800db5e:	4618      	mov	r0, r3
 800db60:	f006 fcf4 	bl	801454c <RegionSetBandTxDone>
    if( MacCtx.NodeAckRequested == false )
    {
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
    }
#endif /* LORAMAC_VERSION */
}
 800db64:	bf00      	nop
 800db66:	3730      	adds	r7, #48	@ 0x30
 800db68:	46bd      	mov	sp, r7
 800db6a:	bd80      	pop	{r7, pc}
 800db6c:	20000b90 	.word	0x20000b90
 800db70:	0801c57c 	.word	0x0801c57c
 800db74:	20000670 	.word	0x20000670
 800db78:	200009f0 	.word	0x200009f0
 800db7c:	20000a08 	.word	0x20000a08
 800db80:	20000a74 	.word	0x20000a74
 800db84:	2000171c 	.word	0x2000171c

0800db88 <PrepareRxDoneAbort>:

static void PrepareRxDoneAbort( void )
{
 800db88:	b580      	push	{r7, lr}
 800db8a:	af00      	add	r7, sp, #0
    MacCtx.MacState |= LORAMAC_RX_ABORT;
 800db8c:	4b10      	ldr	r3, [pc, #64]	@ (800dbd0 <PrepareRxDoneAbort+0x48>)
 800db8e:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800db92:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800db96:	4a0e      	ldr	r2, [pc, #56]	@ (800dbd0 <PrepareRxDoneAbort+0x48>)
 800db98:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340

    if( MacCtx.NodeAckRequested == true )
 800db9c:	4b0c      	ldr	r3, [pc, #48]	@ (800dbd0 <PrepareRxDoneAbort+0x48>)
 800db9e:	f893 341e 	ldrb.w	r3, [r3, #1054]	@ 0x41e
 800dba2:	2b00      	cmp	r3, #0
 800dba4:	d002      	beq.n	800dbac <PrepareRxDoneAbort+0x24>
    {
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        OnAckTimeoutTimerEvent( NULL );
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
        OnRetransmitTimeoutTimerEvent( NULL );
 800dba6:	2000      	movs	r0, #0
 800dba8:	f001 f99c 	bl	800eee4 <OnRetransmitTimeoutTimerEvent>
#endif /* LORAMAC_VERSION */
    }

    MacCtx.MacFlags.Bits.McpsInd = 1;
 800dbac:	4a08      	ldr	r2, [pc, #32]	@ (800dbd0 <PrepareRxDoneAbort+0x48>)
 800dbae:	f892 3495 	ldrb.w	r3, [r2, #1173]	@ 0x495
 800dbb2:	f043 0302 	orr.w	r3, r3, #2
 800dbb6:	f882 3495 	strb.w	r3, [r2, #1173]	@ 0x495
    MacCtx.MacFlags.Bits.MacDone = 1;
 800dbba:	4a05      	ldr	r2, [pc, #20]	@ (800dbd0 <PrepareRxDoneAbort+0x48>)
 800dbbc:	f892 3495 	ldrb.w	r3, [r2, #1173]	@ 0x495
 800dbc0:	f043 0320 	orr.w	r3, r3, #32
 800dbc4:	f882 3495 	strb.w	r3, [r2, #1173]	@ 0x495

    UpdateRxSlotIdleState( );
 800dbc8:	f7ff ff38 	bl	800da3c <UpdateRxSlotIdleState>
}
 800dbcc:	bf00      	nop
 800dbce:	bd80      	pop	{r7, pc}
 800dbd0:	20000670 	.word	0x20000670

0800dbd4 <ProcessRadioRxDone>:

static void ProcessRadioRxDone( void )
{
 800dbd4:	b590      	push	{r4, r7, lr}
 800dbd6:	b0a7      	sub	sp, #156	@ 0x9c
 800dbd8:	af02      	add	r7, sp, #8
    LoRaMacHeader_t macHdr;
    ApplyCFListParams_t applyCFList;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacCryptoStatus_t macCryptoStatus = LORAMAC_CRYPTO_ERROR;
 800dbda:	2312      	movs	r3, #18
 800dbdc:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88

    LoRaMacMessageData_t macMsgData;
    LoRaMacMessageJoinAccept_t macMsgJoinAccept;
    uint8_t *payload = RxDoneParams.Payload;
 800dbe0:	4bbd      	ldr	r3, [pc, #756]	@ (800ded8 <ProcessRadioRxDone+0x304>)
 800dbe2:	685b      	ldr	r3, [r3, #4]
 800dbe4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    uint16_t size = RxDoneParams.Size;
 800dbe8:	4bbb      	ldr	r3, [pc, #748]	@ (800ded8 <ProcessRadioRxDone+0x304>)
 800dbea:	891b      	ldrh	r3, [r3, #8]
 800dbec:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
    int16_t rssi = RxDoneParams.Rssi;
 800dbf0:	4bb9      	ldr	r3, [pc, #740]	@ (800ded8 <ProcessRadioRxDone+0x304>)
 800dbf2:	895b      	ldrh	r3, [r3, #10]
 800dbf4:	f8a7 3080 	strh.w	r3, [r7, #128]	@ 0x80
    int8_t snr = RxDoneParams.Snr;
 800dbf8:	4bb7      	ldr	r3, [pc, #732]	@ (800ded8 <ProcessRadioRxDone+0x304>)
 800dbfa:	7b1b      	ldrb	r3, [r3, #12]
 800dbfc:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f

    uint8_t pktHeaderLen = 0;
 800dc00:	2300      	movs	r3, #0
 800dc02:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e

    uint32_t downLinkCounter = 0;
 800dc06:	2300      	movs	r3, #0
 800dc08:	60bb      	str	r3, [r7, #8]
    uint32_t address = Nvm.MacGroup2.DevAddr;
 800dc0a:	4bb4      	ldr	r3, [pc, #720]	@ (800dedc <ProcessRadioRxDone+0x308>)
 800dc0c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800dc10:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    uint8_t multicast = 0;
 800dc14:	2300      	movs	r3, #0
 800dc16:	f887 308b 	strb.w	r3, [r7, #139]	@ 0x8b
    AddressIdentifier_t addrID = UNICAST_DEV_ADDR;
 800dc1a:	2301      	movs	r3, #1
 800dc1c:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
    FCntIdentifier_t fCntID;

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    LoRaMacRadioEvents.Events.RxProcessPending = 0;
 800dc20:	4aaf      	ldr	r2, [pc, #700]	@ (800dee0 <ProcessRadioRxDone+0x30c>)
 800dc22:	7813      	ldrb	r3, [r2, #0]
 800dc24:	f36f 0300 	bfc	r3, #0, #1
 800dc28:	7013      	strb	r3, [r2, #0]
#endif /* LORAMAC_VERSION */

    MacCtx.McpsConfirm.AckReceived = false;
 800dc2a:	4bae      	ldr	r3, [pc, #696]	@ (800dee4 <ProcessRadioRxDone+0x310>)
 800dc2c:	2200      	movs	r2, #0
 800dc2e:	f883 2448 	strb.w	r2, [r3, #1096]	@ 0x448
    MacCtx.RxStatus.Rssi = rssi;
 800dc32:	4aac      	ldr	r2, [pc, #688]	@ (800dee4 <ProcessRadioRxDone+0x310>)
 800dc34:	f8b7 3080 	ldrh.w	r3, [r7, #128]	@ 0x80
 800dc38:	f8a2 3490 	strh.w	r3, [r2, #1168]	@ 0x490
    MacCtx.RxStatus.Snr = snr;
 800dc3c:	4aa9      	ldr	r2, [pc, #676]	@ (800dee4 <ProcessRadioRxDone+0x310>)
 800dc3e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800dc42:	f882 3492 	strb.w	r3, [r2, #1170]	@ 0x492
    MacCtx.RxStatus.RxSlot = MacCtx.RxSlot;
 800dc46:	4ba7      	ldr	r3, [pc, #668]	@ (800dee4 <ProcessRadioRxDone+0x310>)
 800dc48:	f893 2494 	ldrb.w	r2, [r3, #1172]	@ 0x494
 800dc4c:	4ba5      	ldr	r3, [pc, #660]	@ (800dee4 <ProcessRadioRxDone+0x310>)
 800dc4e:	f883 2493 	strb.w	r2, [r3, #1171]	@ 0x493
    MacCtx.McpsIndication.Port = 0;
 800dc52:	4ba4      	ldr	r3, [pc, #656]	@ (800dee4 <ProcessRadioRxDone+0x310>)
 800dc54:	2200      	movs	r2, #0
 800dc56:	f883 2427 	strb.w	r2, [r3, #1063]	@ 0x427
    MacCtx.McpsIndication.Multicast = 0;
 800dc5a:	4ba2      	ldr	r3, [pc, #648]	@ (800dee4 <ProcessRadioRxDone+0x310>)
 800dc5c:	2200      	movs	r2, #0
 800dc5e:	f883 2426 	strb.w	r2, [r3, #1062]	@ 0x426
    MacCtx.McpsIndication.FramePending = 0;
 800dc62:	4ba0      	ldr	r3, [pc, #640]	@ (800dee4 <ProcessRadioRxDone+0x310>)
 800dc64:	2200      	movs	r2, #0
 800dc66:	f883 2429 	strb.w	r2, [r3, #1065]	@ 0x429
    MacCtx.McpsIndication.Buffer = NULL;
 800dc6a:	4b9e      	ldr	r3, [pc, #632]	@ (800dee4 <ProcessRadioRxDone+0x310>)
 800dc6c:	2200      	movs	r2, #0
 800dc6e:	f8c3 242c 	str.w	r2, [r3, #1068]	@ 0x42c
    MacCtx.McpsIndication.BufferSize = 0;
 800dc72:	4b9c      	ldr	r3, [pc, #624]	@ (800dee4 <ProcessRadioRxDone+0x310>)
 800dc74:	2200      	movs	r2, #0
 800dc76:	f883 2430 	strb.w	r2, [r3, #1072]	@ 0x430
    MacCtx.McpsIndication.RxData = false;
 800dc7a:	4b9a      	ldr	r3, [pc, #616]	@ (800dee4 <ProcessRadioRxDone+0x310>)
 800dc7c:	2200      	movs	r2, #0
 800dc7e:	f883 2431 	strb.w	r2, [r3, #1073]	@ 0x431
    MacCtx.McpsIndication.AckReceived = false;
 800dc82:	4b98      	ldr	r3, [pc, #608]	@ (800dee4 <ProcessRadioRxDone+0x310>)
 800dc84:	2200      	movs	r2, #0
 800dc86:	f883 2432 	strb.w	r2, [r3, #1074]	@ 0x432
    MacCtx.McpsIndication.DownLinkCounter = 0;
 800dc8a:	4b96      	ldr	r3, [pc, #600]	@ (800dee4 <ProcessRadioRxDone+0x310>)
 800dc8c:	2200      	movs	r2, #0
 800dc8e:	f8c3 2434 	str.w	r2, [r3, #1076]	@ 0x434
    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 800dc92:	4b94      	ldr	r3, [pc, #592]	@ (800dee4 <ProcessRadioRxDone+0x310>)
 800dc94:	2200      	movs	r2, #0
 800dc96:	f883 2424 	strb.w	r2, [r3, #1060]	@ 0x424
    MacCtx.McpsIndication.DevAddress = 0;
 800dc9a:	4b92      	ldr	r3, [pc, #584]	@ (800dee4 <ProcessRadioRxDone+0x310>)
 800dc9c:	2200      	movs	r2, #0
 800dc9e:	f8c3 2438 	str.w	r2, [r3, #1080]	@ 0x438
    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 800dca2:	4b90      	ldr	r3, [pc, #576]	@ (800dee4 <ProcessRadioRxDone+0x310>)
 800dca4:	2200      	movs	r2, #0
 800dca6:	f883 243c 	strb.w	r2, [r3, #1084]	@ 0x43c
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    MacCtx.McpsIndication.ResponseTimeout = 0;
 800dcaa:	4b8e      	ldr	r3, [pc, #568]	@ (800dee4 <ProcessRadioRxDone+0x310>)
 800dcac:	2200      	movs	r2, #0
 800dcae:	f8c3 2440 	str.w	r2, [r3, #1088]	@ 0x440
#endif /* LORAMAC_VERSION */

    Radio.Sleep( );
 800dcb2:	4b8d      	ldr	r3, [pc, #564]	@ (800dee8 <ProcessRadioRxDone+0x314>)
 800dcb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dcb6:	4798      	blx	r3

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerStop( &MacCtx.RxWindowTimer2 );
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    if( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 )
 800dcb8:	4b8a      	ldr	r3, [pc, #552]	@ (800dee4 <ProcessRadioRxDone+0x310>)
 800dcba:	f893 3493 	ldrb.w	r3, [r3, #1171]	@ 0x493
 800dcbe:	2b00      	cmp	r3, #0
 800dcc0:	d102      	bne.n	800dcc8 <ProcessRadioRxDone+0xf4>
    {
        TimerStop( &MacCtx.RxWindowTimer2 );
 800dcc2:	488a      	ldr	r0, [pc, #552]	@ (800deec <ProcessRadioRxDone+0x318>)
 800dcc4:	f00d f810 	bl	801ace8 <UTIL_TIMER_Stop>
    }
#endif /* LORAMAC_VERSION */

    // This function must be called even if we are not in class b mode yet.
    if( LoRaMacClassBRxBeacon( payload, size ) == true )
 800dcc8:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 800dccc:	4619      	mov	r1, r3
 800dcce:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 800dcd2:	f004 fcdb 	bl	801268c <LoRaMacClassBRxBeacon>
 800dcd6:	4603      	mov	r3, r0
 800dcd8:	2b00      	cmp	r3, #0
 800dcda:	d00b      	beq.n	800dcf4 <ProcessRadioRxDone+0x120>
    {
        MacCtx.MlmeIndication.BeaconInfo.Rssi = rssi;
 800dcdc:	4a81      	ldr	r2, [pc, #516]	@ (800dee4 <ProcessRadioRxDone+0x310>)
 800dcde:	f8b7 3080 	ldrh.w	r3, [r7, #128]	@ 0x80
 800dce2:	f8a2 3482 	strh.w	r3, [r2, #1154]	@ 0x482
        MacCtx.MlmeIndication.BeaconInfo.Snr = snr;
 800dce6:	4a7f      	ldr	r2, [pc, #508]	@ (800dee4 <ProcessRadioRxDone+0x310>)
 800dce8:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800dcec:	f882 3484 	strb.w	r3, [r2, #1156]	@ 0x484
        return;
 800dcf0:	f000 bc22 	b.w	800e538 <ProcessRadioRxDone+0x964>
    }
    // Check if we expect a ping or a multicast slot.
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800dcf4:	4b79      	ldr	r3, [pc, #484]	@ (800dedc <ProcessRadioRxDone+0x308>)
 800dcf6:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 800dcfa:	2b01      	cmp	r3, #1
 800dcfc:	d11e      	bne.n	800dd3c <ProcessRadioRxDone+0x168>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 800dcfe:	f004 fcd8 	bl	80126b2 <LoRaMacClassBIsPingExpected>
 800dd02:	4603      	mov	r3, r0
 800dd04:	2b00      	cmp	r3, #0
 800dd06:	d00a      	beq.n	800dd1e <ProcessRadioRxDone+0x14a>
        {
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800dd08:	2000      	movs	r0, #0
 800dd0a:	f004 fc89 	bl	8012620 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 800dd0e:	2000      	movs	r0, #0
 800dd10:	f004 fcaa 	bl	8012668 <LoRaMacClassBPingSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 800dd14:	4b73      	ldr	r3, [pc, #460]	@ (800dee4 <ProcessRadioRxDone+0x310>)
 800dd16:	2204      	movs	r2, #4
 800dd18:	f883 2493 	strb.w	r2, [r3, #1171]	@ 0x493
 800dd1c:	e00e      	b.n	800dd3c <ProcessRadioRxDone+0x168>
        }
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 800dd1e:	f004 fccf 	bl	80126c0 <LoRaMacClassBIsMulticastExpected>
 800dd22:	4603      	mov	r3, r0
 800dd24:	2b00      	cmp	r3, #0
 800dd26:	d009      	beq.n	800dd3c <ProcessRadioRxDone+0x168>
        {
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800dd28:	2000      	movs	r0, #0
 800dd2a:	f004 fc83 	bl	8012634 <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800dd2e:	2000      	movs	r0, #0
 800dd30:	f004 fca3 	bl	801267a <LoRaMacClassBMulticastSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 800dd34:	4b6b      	ldr	r3, [pc, #428]	@ (800dee4 <ProcessRadioRxDone+0x310>)
 800dd36:	2205      	movs	r2, #5
 800dd38:	f883 2493 	strb.w	r2, [r3, #1171]	@ 0x493
        }
    }

    macHdr.Value = payload[pktHeaderLen++];
 800dd3c:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 800dd40:	1c5a      	adds	r2, r3, #1
 800dd42:	f887 207e 	strb.w	r2, [r7, #126]	@ 0x7e
 800dd46:	461a      	mov	r2, r3
 800dd48:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800dd4c:	4413      	add	r3, r2
 800dd4e:	781b      	ldrb	r3, [r3, #0]
 800dd50:	f887 307c 	strb.w	r3, [r7, #124]	@ 0x7c

    switch( macHdr.Bits.MType )
 800dd54:	f897 307c 	ldrb.w	r3, [r7, #124]	@ 0x7c
 800dd58:	f3c3 1342 	ubfx	r3, r3, #5, #3
 800dd5c:	b2db      	uxtb	r3, r3
 800dd5e:	3b01      	subs	r3, #1
 800dd60:	2b06      	cmp	r3, #6
 800dd62:	f200 83bd 	bhi.w	800e4e0 <ProcessRadioRxDone+0x90c>
 800dd66:	a201      	add	r2, pc, #4	@ (adr r2, 800dd6c <ProcessRadioRxDone+0x198>)
 800dd68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd6c:	0800dd89 	.word	0x0800dd89
 800dd70:	0800e4e1 	.word	0x0800e4e1
 800dd74:	0800df1d 	.word	0x0800df1d
 800dd78:	0800e4e1 	.word	0x0800e4e1
 800dd7c:	0800df15 	.word	0x0800df15
 800dd80:	0800e4e1 	.word	0x0800e4e1
 800dd84:	0800e473 	.word	0x0800e473
    {
        case FRAME_TYPE_JOIN_ACCEPT:
            // Check if the received frame size is valid
            if( size < LORAMAC_JOIN_ACCEPT_FRAME_MIN_SIZE )
 800dd88:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 800dd8c:	2b10      	cmp	r3, #16
 800dd8e:	d806      	bhi.n	800dd9e <ProcessRadioRxDone+0x1ca>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800dd90:	4b54      	ldr	r3, [pc, #336]	@ (800dee4 <ProcessRadioRxDone+0x310>)
 800dd92:	2201      	movs	r2, #1
 800dd94:	f883 2425 	strb.w	r2, [r3, #1061]	@ 0x425
                PrepareRxDoneAbort( );
 800dd98:	f7ff fef6 	bl	800db88 <PrepareRxDoneAbort>
                return;
 800dd9c:	e3cc      	b.n	800e538 <ProcessRadioRxDone+0x964>
            }
            macMsgJoinAccept.Buffer = payload;
 800dd9e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800dda2:	60fb      	str	r3, [r7, #12]
            macMsgJoinAccept.BufSize = size;
 800dda4:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 800dda8:	b2db      	uxtb	r3, r3
 800ddaa:	743b      	strb	r3, [r7, #16]

            // Abort in case if the device isn't joined yet and no rejoin request is ongoing.
            if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 800ddac:	4b4b      	ldr	r3, [pc, #300]	@ (800dedc <ProcessRadioRxDone+0x308>)
 800ddae:	f893 311c 	ldrb.w	r3, [r3, #284]	@ 0x11c
 800ddb2:	2b00      	cmp	r3, #0
 800ddb4:	d006      	beq.n	800ddc4 <ProcessRadioRxDone+0x1f0>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800ddb6:	4b4b      	ldr	r3, [pc, #300]	@ (800dee4 <ProcessRadioRxDone+0x310>)
 800ddb8:	2201      	movs	r2, #1
 800ddba:	f883 2425 	strb.w	r2, [r3, #1061]	@ 0x425
                PrepareRxDoneAbort( );
 800ddbe:	f7ff fee3 	bl	800db88 <PrepareRxDoneAbort>
                return;
 800ddc2:	e3b9      	b.n	800e538 <ProcessRadioRxDone+0x964>
            }
            macCryptoStatus = LoRaMacCryptoHandleJoinAccept( JOIN_REQ, SecureElementGetJoinEui( ), &macMsgJoinAccept );
 800ddc4:	f7fe f876 	bl	800beb4 <SecureElementGetJoinEui>
 800ddc8:	4601      	mov	r1, r0
 800ddca:	f107 030c 	add.w	r3, r7, #12
 800ddce:	461a      	mov	r2, r3
 800ddd0:	20ff      	movs	r0, #255	@ 0xff
 800ddd2:	f005 fe2d 	bl	8013a30 <LoRaMacCryptoHandleJoinAccept>
 800ddd6:	4603      	mov	r3, r0
 800ddd8:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88

            if( LORAMAC_CRYPTO_SUCCESS == macCryptoStatus )
 800dddc:	f897 3088 	ldrb.w	r3, [r7, #136]	@ 0x88
 800dde0:	2b00      	cmp	r3, #0
 800dde2:	f040 8085 	bne.w	800def0 <ProcessRadioRxDone+0x31c>
            {
                // Network ID
                Nvm.MacGroup2.NetID = ( uint32_t ) macMsgJoinAccept.NetID[0];
 800dde6:	7d7b      	ldrb	r3, [r7, #21]
 800dde8:	461a      	mov	r2, r3
 800ddea:	4b3c      	ldr	r3, [pc, #240]	@ (800dedc <ProcessRadioRxDone+0x308>)
 800ddec:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[1] << 8 );
 800ddf0:	4b3a      	ldr	r3, [pc, #232]	@ (800dedc <ProcessRadioRxDone+0x308>)
 800ddf2:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 800ddf6:	7dbb      	ldrb	r3, [r7, #22]
 800ddf8:	021b      	lsls	r3, r3, #8
 800ddfa:	4313      	orrs	r3, r2
 800ddfc:	4a37      	ldr	r2, [pc, #220]	@ (800dedc <ProcessRadioRxDone+0x308>)
 800ddfe:	f8c2 30d0 	str.w	r3, [r2, #208]	@ 0xd0
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 800de02:	4b36      	ldr	r3, [pc, #216]	@ (800dedc <ProcessRadioRxDone+0x308>)
 800de04:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 800de08:	7dfb      	ldrb	r3, [r7, #23]
 800de0a:	041b      	lsls	r3, r3, #16
 800de0c:	4313      	orrs	r3, r2
 800de0e:	4a33      	ldr	r2, [pc, #204]	@ (800dedc <ProcessRadioRxDone+0x308>)
 800de10:	f8c2 30d0 	str.w	r3, [r2, #208]	@ 0xd0

                // Device Address
                Nvm.MacGroup2.DevAddr = macMsgJoinAccept.DevAddr;
 800de14:	69bb      	ldr	r3, [r7, #24]
 800de16:	4a31      	ldr	r2, [pc, #196]	@ (800dedc <ProcessRadioRxDone+0x308>)
 800de18:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4

                // DLSettings
                Nvm.MacGroup2.MacParams.Rx1DrOffset = macMsgJoinAccept.DLSettings.Bits.RX1DRoffset;
 800de1c:	7f3b      	ldrb	r3, [r7, #28]
 800de1e:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800de22:	b2db      	uxtb	r3, r3
 800de24:	461a      	mov	r2, r3
 800de26:	4b2d      	ldr	r3, [pc, #180]	@ (800dedc <ProcessRadioRxDone+0x308>)
 800de28:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
                Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800de2c:	7f3b      	ldrb	r3, [r7, #28]
 800de2e:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800de32:	b2db      	uxtb	r3, r3
 800de34:	461a      	mov	r2, r3
 800de36:	4b29      	ldr	r3, [pc, #164]	@ (800dedc <ProcessRadioRxDone+0x308>)
 800de38:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
                Nvm.MacGroup2.MacParams.RxCChannel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800de3c:	7f3b      	ldrb	r3, [r7, #28]
 800de3e:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800de42:	b2db      	uxtb	r3, r3
 800de44:	461a      	mov	r2, r3
 800de46:	4b25      	ldr	r3, [pc, #148]	@ (800dedc <ProcessRadioRxDone+0x308>)
 800de48:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70

                // RxDelay
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = macMsgJoinAccept.RxDelay;
 800de4c:	7f7b      	ldrb	r3, [r7, #29]
 800de4e:	461a      	mov	r2, r3
 800de50:	4b22      	ldr	r3, [pc, #136]	@ (800dedc <ProcessRadioRxDone+0x308>)
 800de52:	651a      	str	r2, [r3, #80]	@ 0x50
                if( Nvm.MacGroup2.MacParams.ReceiveDelay1 == 0 )
 800de54:	4b21      	ldr	r3, [pc, #132]	@ (800dedc <ProcessRadioRxDone+0x308>)
 800de56:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800de58:	2b00      	cmp	r3, #0
 800de5a:	d102      	bne.n	800de62 <ProcessRadioRxDone+0x28e>
                {
                    Nvm.MacGroup2.MacParams.ReceiveDelay1 = 1;
 800de5c:	4b1f      	ldr	r3, [pc, #124]	@ (800dedc <ProcessRadioRxDone+0x308>)
 800de5e:	2201      	movs	r2, #1
 800de60:	651a      	str	r2, [r3, #80]	@ 0x50
                }
                Nvm.MacGroup2.MacParams.ReceiveDelay1 *= 1000;
 800de62:	4b1e      	ldr	r3, [pc, #120]	@ (800dedc <ProcessRadioRxDone+0x308>)
 800de64:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800de66:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800de6a:	fb02 f303 	mul.w	r3, r2, r3
 800de6e:	4a1b      	ldr	r2, [pc, #108]	@ (800dedc <ProcessRadioRxDone+0x308>)
 800de70:	6513      	str	r3, [r2, #80]	@ 0x50
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 800de72:	4b1a      	ldr	r3, [pc, #104]	@ (800dedc <ProcessRadioRxDone+0x308>)
 800de74:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800de76:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800de7a:	4a18      	ldr	r2, [pc, #96]	@ (800dedc <ProcessRadioRxDone+0x308>)
 800de7c:	6553      	str	r3, [r2, #84]	@ 0x54

                Nvm.MacGroup2.Version.Fields.Minor = 0;
 800de7e:	4b17      	ldr	r3, [pc, #92]	@ (800dedc <ProcessRadioRxDone+0x308>)
 800de80:	2200      	movs	r2, #0
 800de82:	f883 211a 	strb.w	r2, [r3, #282]	@ 0x11a

                // Apply CF list
                applyCFList.Payload = macMsgJoinAccept.CFList;
 800de86:	f107 030c 	add.w	r3, r7, #12
 800de8a:	3312      	adds	r3, #18
 800de8c:	677b      	str	r3, [r7, #116]	@ 0x74
                // Size of the regular payload is 12. Plus 1 byte MHDR and 4 bytes MIC
                applyCFList.Size = size - 17;
 800de8e:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 800de92:	b2db      	uxtb	r3, r3
 800de94:	3b11      	subs	r3, #17
 800de96:	b2db      	uxtb	r3, r3
 800de98:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
                // Apply the last tx channel
                applyCFList.JoinChannel = MacCtx.Channel;
 800de9c:	4b11      	ldr	r3, [pc, #68]	@ (800dee4 <ProcessRadioRxDone+0x310>)
 800de9e:	f893 341f 	ldrb.w	r3, [r3, #1055]	@ 0x41f
 800dea2:	f887 3070 	strb.w	r3, [r7, #112]	@ 0x70
#endif /* LORAMAC_VERSION */

                RegionApplyCFList( Nvm.MacGroup2.Region, &applyCFList );
 800dea6:	4b0d      	ldr	r3, [pc, #52]	@ (800dedc <ProcessRadioRxDone+0x308>)
 800dea8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800deac:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 800deb0:	4611      	mov	r1, r2
 800deb2:	4618      	mov	r0, r3
 800deb4:	f006 fb84 	bl	80145c0 <RegionApplyCFList>

                Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_OTAA;
 800deb8:	4b08      	ldr	r3, [pc, #32]	@ (800dedc <ProcessRadioRxDone+0x308>)
 800deba:	2202      	movs	r2, #2
 800debc:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c

                // MLME handling
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800dec0:	2001      	movs	r0, #1
 800dec2:	f005 f8dd 	bl	8013080 <LoRaMacConfirmQueueIsCmdActive>
 800dec6:	4603      	mov	r3, r0
 800dec8:	2b00      	cmp	r3, #0
 800deca:	d01b      	beq.n	800df04 <ProcessRadioRxDone+0x330>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_JOIN );
 800decc:	2101      	movs	r1, #1
 800dece:	2000      	movs	r0, #0
 800ded0:	f005 f84a 	bl	8012f68 <LoRaMacConfirmQueueSetStatus>
 800ded4:	e016      	b.n	800df04 <ProcessRadioRxDone+0x330>
 800ded6:	bf00      	nop
 800ded8:	20001720 	.word	0x20001720
 800dedc:	20000b90 	.word	0x20000b90
 800dee0:	20001718 	.word	0x20001718
 800dee4:	20000670 	.word	0x20000670
 800dee8:	0801c57c 	.word	0x0801c57c
 800deec:	20000a08 	.word	0x20000a08
                }
            }
            else
            {
                // MLME handling
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800def0:	2001      	movs	r0, #1
 800def2:	f005 f8c5 	bl	8013080 <LoRaMacConfirmQueueIsCmdActive>
 800def6:	4603      	mov	r3, r0
 800def8:	2b00      	cmp	r3, #0
 800defa:	d003      	beq.n	800df04 <ProcessRadioRxDone+0x330>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
 800defc:	2101      	movs	r1, #1
 800defe:	2007      	movs	r0, #7
 800df00:	f005 f832 	bl	8012f68 <LoRaMacConfirmQueueSetStatus>
                }
            }
            MacCtx.MacFlags.Bits.MlmeInd = 1;
 800df04:	4ab9      	ldr	r2, [pc, #740]	@ (800e1ec <ProcessRadioRxDone+0x618>)
 800df06:	f892 3495 	ldrb.w	r3, [r2, #1173]	@ 0x495
 800df0a:	f043 0308 	orr.w	r3, r3, #8
 800df0e:	f882 3495 	strb.w	r3, [r2, #1173]	@ 0x495
            break;
 800df12:	e2ec      	b.n	800e4ee <ProcessRadioRxDone+0x91a>
        case FRAME_TYPE_DATA_CONFIRMED_DOWN:
            MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 800df14:	4bb5      	ldr	r3, [pc, #724]	@ (800e1ec <ProcessRadioRxDone+0x618>)
 800df16:	2201      	movs	r2, #1
 800df18:	f883 2424 	strb.w	r2, [r3, #1060]	@ 0x424
            // Intentional fall through
        case FRAME_TYPE_DATA_UNCONFIRMED_DOWN:
            // Check if the received payload size is valid
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800df1c:	4bb4      	ldr	r3, [pc, #720]	@ (800e1f0 <ProcessRadioRxDone+0x61c>)
 800df1e:	f893 3075 	ldrb.w	r3, [r3, #117]	@ 0x75
 800df22:	f887 306a 	strb.w	r3, [r7, #106]	@ 0x6a
            getPhy.Datarate = MacCtx.McpsIndication.RxDatarate;
 800df26:	4bb1      	ldr	r3, [pc, #708]	@ (800e1ec <ProcessRadioRxDone+0x618>)
 800df28:	f893 3428 	ldrb.w	r3, [r3, #1064]	@ 0x428
 800df2c:	b25b      	sxtb	r3, r3
 800df2e:	f887 3069 	strb.w	r3, [r7, #105]	@ 0x69
            getPhy.Attribute = PHY_MAX_PAYLOAD;
 800df32:	230d      	movs	r3, #13
 800df34:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68

            /* ST_WORKAROUND_BEGIN: Keep repeater feature */
            // Get the maximum payload length
            if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 800df38:	4bad      	ldr	r3, [pc, #692]	@ (800e1f0 <ProcessRadioRxDone+0x61c>)
 800df3a:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800df3e:	2b00      	cmp	r3, #0
 800df40:	d002      	beq.n	800df48 <ProcessRadioRxDone+0x374>
            {
                getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 800df42:	230e      	movs	r3, #14
 800df44:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
            }
            /* ST_WORKAROUND_END */

            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800df48:	4ba9      	ldr	r3, [pc, #676]	@ (800e1f0 <ProcessRadioRxDone+0x61c>)
 800df4a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800df4e:	f107 0268 	add.w	r2, r7, #104	@ 0x68
 800df52:	4611      	mov	r1, r2
 800df54:	4618      	mov	r0, r3
 800df56:	f006 fae1 	bl	801451c <RegionGetPhyParam>
 800df5a:	4603      	mov	r3, r0
 800df5c:	667b      	str	r3, [r7, #100]	@ 0x64
            if( ( MAX( 0, ( int16_t )( ( int16_t ) size - ( int16_t ) LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE ) ) > ( int16_t )phyParam.Value ) ||
 800df5e:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 800df62:	3b0d      	subs	r3, #13
 800df64:	b29b      	uxth	r3, r3
 800df66:	b21b      	sxth	r3, r3
 800df68:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800df6c:	b21a      	sxth	r2, r3
 800df6e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800df70:	b21b      	sxth	r3, r3
 800df72:	429a      	cmp	r2, r3
 800df74:	dc03      	bgt.n	800df7e <ProcessRadioRxDone+0x3aa>
 800df76:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 800df7a:	2b0b      	cmp	r3, #11
 800df7c:	d806      	bhi.n	800df8c <ProcessRadioRxDone+0x3b8>
                ( size < LORAMAC_FRAME_PAYLOAD_MIN_SIZE ) )
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800df7e:	4b9b      	ldr	r3, [pc, #620]	@ (800e1ec <ProcessRadioRxDone+0x618>)
 800df80:	2201      	movs	r2, #1
 800df82:	f883 2425 	strb.w	r2, [r3, #1061]	@ 0x425
                PrepareRxDoneAbort( );
 800df86:	f7ff fdff 	bl	800db88 <PrepareRxDoneAbort>
                return;
 800df8a:	e2d5      	b.n	800e538 <ProcessRadioRxDone+0x964>
            }
            macMsgData.Buffer = payload;
 800df8c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800df90:	637b      	str	r3, [r7, #52]	@ 0x34
            macMsgData.BufSize = size;
 800df92:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 800df96:	b2db      	uxtb	r3, r3
 800df98:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
            macMsgData.FRMPayload = MacCtx.RxPayload;
 800df9c:	4b95      	ldr	r3, [pc, #596]	@ (800e1f4 <ProcessRadioRxDone+0x620>)
 800df9e:	65bb      	str	r3, [r7, #88]	@ 0x58
            macMsgData.FRMPayloadSize = LORAMAC_PHY_MAXPAYLOAD;
 800dfa0:	23ff      	movs	r3, #255	@ 0xff
 800dfa2:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c

            if( LORAMAC_PARSER_SUCCESS != LoRaMacParserData( &macMsgData ) )
 800dfa6:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800dfaa:	4618      	mov	r0, r3
 800dfac:	f006 f83d 	bl	801402a <LoRaMacParserData>
 800dfb0:	4603      	mov	r3, r0
 800dfb2:	2b00      	cmp	r3, #0
 800dfb4:	d006      	beq.n	800dfc4 <ProcessRadioRxDone+0x3f0>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800dfb6:	4b8d      	ldr	r3, [pc, #564]	@ (800e1ec <ProcessRadioRxDone+0x618>)
 800dfb8:	2201      	movs	r2, #1
 800dfba:	f883 2425 	strb.w	r2, [r3, #1061]	@ 0x425
                PrepareRxDoneAbort( );
 800dfbe:	f7ff fde3 	bl	800db88 <PrepareRxDoneAbort>
                return;
 800dfc2:	e2b9      	b.n	800e538 <ProcessRadioRxDone+0x964>
            }

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
            // Handle Class B
            // Check if we expect a ping or a multicast slot.
            if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800dfc4:	4b8a      	ldr	r3, [pc, #552]	@ (800e1f0 <ProcessRadioRxDone+0x61c>)
 800dfc6:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 800dfca:	2b01      	cmp	r3, #1
 800dfcc:	d132      	bne.n	800e034 <ProcessRadioRxDone+0x460>
            {
                if( LoRaMacClassBIsPingExpected( ) == true )
 800dfce:	f004 fb70 	bl	80126b2 <LoRaMacClassBIsPingExpected>
 800dfd2:	4603      	mov	r3, r0
 800dfd4:	2b00      	cmp	r3, #0
 800dfd6:	d014      	beq.n	800e002 <ProcessRadioRxDone+0x42e>
                {
                    LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800dfd8:	2000      	movs	r0, #0
 800dfda:	f004 fb21 	bl	8012620 <LoRaMacClassBSetPingSlotState>
                    LoRaMacClassBPingSlotTimerEvent( NULL );
 800dfde:	2000      	movs	r0, #0
 800dfe0:	f004 fb42 	bl	8012668 <LoRaMacClassBPingSlotTimerEvent>
                    MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 800dfe4:	4b81      	ldr	r3, [pc, #516]	@ (800e1ec <ProcessRadioRxDone+0x618>)
 800dfe6:	2204      	movs	r2, #4
 800dfe8:	f883 2493 	strb.w	r2, [r3, #1171]	@ 0x493
                    LoRaMacClassBSetFPendingBit( macMsgData.FHDR.DevAddr, ( uint8_t ) macMsgData.FHDR.FCtrl.Bits.FPending );
 800dfec:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800dfee:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800dff2:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800dff6:	b2db      	uxtb	r3, r3
 800dff8:	4619      	mov	r1, r3
 800dffa:	4610      	mov	r0, r2
 800dffc:	f004 fbe2 	bl	80127c4 <LoRaMacClassBSetFPendingBit>
 800e000:	e018      	b.n	800e034 <ProcessRadioRxDone+0x460>
                }
                else if( LoRaMacClassBIsMulticastExpected( ) == true )
 800e002:	f004 fb5d 	bl	80126c0 <LoRaMacClassBIsMulticastExpected>
 800e006:	4603      	mov	r3, r0
 800e008:	2b00      	cmp	r3, #0
 800e00a:	d013      	beq.n	800e034 <ProcessRadioRxDone+0x460>
                {
                    LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800e00c:	2000      	movs	r0, #0
 800e00e:	f004 fb11 	bl	8012634 <LoRaMacClassBSetMulticastSlotState>
                    LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800e012:	2000      	movs	r0, #0
 800e014:	f004 fb31 	bl	801267a <LoRaMacClassBMulticastSlotTimerEvent>
                    MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 800e018:	4b74      	ldr	r3, [pc, #464]	@ (800e1ec <ProcessRadioRxDone+0x618>)
 800e01a:	2205      	movs	r2, #5
 800e01c:	f883 2493 	strb.w	r2, [r3, #1171]	@ 0x493
                    LoRaMacClassBSetFPendingBit( macMsgData.FHDR.DevAddr, ( uint8_t ) macMsgData.FHDR.FCtrl.Bits.FPending );
 800e020:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800e022:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800e026:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800e02a:	b2db      	uxtb	r3, r3
 800e02c:	4619      	mov	r1, r3
 800e02e:	4610      	mov	r0, r2
 800e030:	f004 fbc8 	bl	80127c4 <LoRaMacClassBSetFPendingBit>
                }
            }
#endif /* LORAMAC_VERSION */

            // Store device address
            MacCtx.McpsIndication.DevAddress = macMsgData.FHDR.DevAddr;
 800e034:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e036:	4a6d      	ldr	r2, [pc, #436]	@ (800e1ec <ProcessRadioRxDone+0x618>)
 800e038:	f8c2 3438 	str.w	r3, [r2, #1080]	@ 0x438

            FType_t fType;
            if( LORAMAC_STATUS_OK != DetermineFrameType( &macMsgData, &fType ) )
 800e03c:	1dba      	adds	r2, r7, #6
 800e03e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800e042:	4611      	mov	r1, r2
 800e044:	4618      	mov	r0, r3
 800e046:	f002 fd1f 	bl	8010a88 <DetermineFrameType>
 800e04a:	4603      	mov	r3, r0
 800e04c:	2b00      	cmp	r3, #0
 800e04e:	d006      	beq.n	800e05e <ProcessRadioRxDone+0x48a>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800e050:	4b66      	ldr	r3, [pc, #408]	@ (800e1ec <ProcessRadioRxDone+0x618>)
 800e052:	2201      	movs	r2, #1
 800e054:	f883 2425 	strb.w	r2, [r3, #1061]	@ 0x425
                PrepareRxDoneAbort( );
 800e058:	f7ff fd96 	bl	800db88 <PrepareRxDoneAbort>
                return;
 800e05c:	e26c      	b.n	800e538 <ProcessRadioRxDone+0x964>
            }

            //Check if it is a multicast message
            multicast = 0;
 800e05e:	2300      	movs	r3, #0
 800e060:	f887 308b 	strb.w	r3, [r7, #139]	@ 0x8b
            downLinkCounter = 0;
 800e064:	2300      	movs	r3, #0
 800e066:	60bb      	str	r3, [r7, #8]
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800e068:	2300      	movs	r3, #0
 800e06a:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89
 800e06e:	e049      	b.n	800e104 <ProcessRadioRxDone+0x530>
            {
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 800e070:	f897 3089 	ldrb.w	r3, [r7, #137]	@ 0x89
 800e074:	4a5e      	ldr	r2, [pc, #376]	@ (800e1f0 <ProcessRadioRxDone+0x61c>)
 800e076:	212c      	movs	r1, #44	@ 0x2c
 800e078:	fb01 f303 	mul.w	r3, r1, r3
 800e07c:	4413      	add	r3, r2
 800e07e:	33dc      	adds	r3, #220	@ 0xdc
 800e080:	681a      	ldr	r2, [r3, #0]
 800e082:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e084:	429a      	cmp	r2, r3
 800e086:	d138      	bne.n	800e0fa <ProcessRadioRxDone+0x526>
                    ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) )
 800e088:	f897 3089 	ldrb.w	r3, [r7, #137]	@ 0x89
 800e08c:	4a58      	ldr	r2, [pc, #352]	@ (800e1f0 <ProcessRadioRxDone+0x61c>)
 800e08e:	212c      	movs	r1, #44	@ 0x2c
 800e090:	fb01 f303 	mul.w	r3, r1, r3
 800e094:	4413      	add	r3, r2
 800e096:	33da      	adds	r3, #218	@ 0xda
 800e098:	781b      	ldrb	r3, [r3, #0]
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 800e09a:	2b00      	cmp	r3, #0
 800e09c:	d02d      	beq.n	800e0fa <ProcessRadioRxDone+0x526>
                {
                    multicast = 1;
 800e09e:	2301      	movs	r3, #1
 800e0a0:	f887 308b 	strb.w	r3, [r7, #139]	@ 0x8b
                    addrID = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.GroupID;
 800e0a4:	f897 3089 	ldrb.w	r3, [r7, #137]	@ 0x89
 800e0a8:	4a51      	ldr	r2, [pc, #324]	@ (800e1f0 <ProcessRadioRxDone+0x61c>)
 800e0aa:	212c      	movs	r1, #44	@ 0x2c
 800e0ac:	fb01 f303 	mul.w	r3, r1, r3
 800e0b0:	4413      	add	r3, r2
 800e0b2:	33db      	adds	r3, #219	@ 0xdb
 800e0b4:	781b      	ldrb	r3, [r3, #0]
 800e0b6:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
                    downLinkCounter = *( Nvm.MacGroup2.MulticastChannelList[i].DownLinkCounter );
 800e0ba:	f897 3089 	ldrb.w	r3, [r7, #137]	@ 0x89
 800e0be:	4a4c      	ldr	r2, [pc, #304]	@ (800e1f0 <ProcessRadioRxDone+0x61c>)
 800e0c0:	212c      	movs	r1, #44	@ 0x2c
 800e0c2:	fb01 f303 	mul.w	r3, r1, r3
 800e0c6:	4413      	add	r3, r2
 800e0c8:	33f8      	adds	r3, #248	@ 0xf8
 800e0ca:	681b      	ldr	r3, [r3, #0]
 800e0cc:	681b      	ldr	r3, [r3, #0]
 800e0ce:	60bb      	str	r3, [r7, #8]
                    address = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address;
 800e0d0:	f897 3089 	ldrb.w	r3, [r7, #137]	@ 0x89
 800e0d4:	4a46      	ldr	r2, [pc, #280]	@ (800e1f0 <ProcessRadioRxDone+0x61c>)
 800e0d6:	212c      	movs	r1, #44	@ 0x2c
 800e0d8:	fb01 f303 	mul.w	r3, r1, r3
 800e0dc:	4413      	add	r3, r2
 800e0de:	33dc      	adds	r3, #220	@ 0xdc
 800e0e0:	681b      	ldr	r3, [r3, #0]
 800e0e2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
                    if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 800e0e6:	4b42      	ldr	r3, [pc, #264]	@ (800e1f0 <ProcessRadioRxDone+0x61c>)
 800e0e8:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 800e0ec:	2b02      	cmp	r3, #2
 800e0ee:	d10e      	bne.n	800e10e <ProcessRadioRxDone+0x53a>
                    {
                        MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 800e0f0:	4b3e      	ldr	r3, [pc, #248]	@ (800e1ec <ProcessRadioRxDone+0x618>)
 800e0f2:	2203      	movs	r2, #3
 800e0f4:	f883 2493 	strb.w	r2, [r3, #1171]	@ 0x493
                    }
                    break;
 800e0f8:	e009      	b.n	800e10e <ProcessRadioRxDone+0x53a>
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800e0fa:	f897 3089 	ldrb.w	r3, [r7, #137]	@ 0x89
 800e0fe:	3301      	adds	r3, #1
 800e100:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89
 800e104:	f897 3089 	ldrb.w	r3, [r7, #137]	@ 0x89
 800e108:	2b00      	cmp	r3, #0
 800e10a:	d0b1      	beq.n	800e070 <ProcessRadioRxDone+0x49c>
 800e10c:	e000      	b.n	800e110 <ProcessRadioRxDone+0x53c>
                    break;
 800e10e:	bf00      	nop
                }
            }

            // Filter messages according to multicast downlink exceptions
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 800e110:	f897 308b 	ldrb.w	r3, [r7, #139]	@ 0x8b
 800e114:	2b01      	cmp	r3, #1
 800e116:	d117      	bne.n	800e148 <ProcessRadioRxDone+0x574>
 800e118:	79bb      	ldrb	r3, [r7, #6]
 800e11a:	2b03      	cmp	r3, #3
 800e11c:	d10d      	bne.n	800e13a <ProcessRadioRxDone+0x566>
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 800e11e:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800e122:	f003 0320 	and.w	r3, r3, #32
 800e126:	b2db      	uxtb	r3, r3
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 800e128:	2b00      	cmp	r3, #0
 800e12a:	d106      	bne.n	800e13a <ProcessRadioRxDone+0x566>
                                        ( macMsgData.FHDR.FCtrl.Bits.AdrAckReq != 0 ) ) )
 800e12c:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800e130:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e134:	b2db      	uxtb	r3, r3
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 800e136:	2b00      	cmp	r3, #0
 800e138:	d006      	beq.n	800e148 <ProcessRadioRxDone+0x574>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800e13a:	4b2c      	ldr	r3, [pc, #176]	@ (800e1ec <ProcessRadioRxDone+0x618>)
 800e13c:	2201      	movs	r2, #1
 800e13e:	f883 2425 	strb.w	r2, [r3, #1061]	@ 0x425
                PrepareRxDoneAbort( );
 800e142:	f7ff fd21 	bl	800db88 <PrepareRxDoneAbort>
                return;
 800e146:	e1f7      	b.n	800e538 <ProcessRadioRxDone+0x964>
                PrepareRxDoneAbort( );
                return;
            }
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
            // Get downlink frame counter value
            macCryptoStatus = GetFCntDown( addrID, fType, &macMsgData, Nvm.MacGroup2.Version, &fCntID, &downLinkCounter );
 800e148:	79b9      	ldrb	r1, [r7, #6]
 800e14a:	4c29      	ldr	r4, [pc, #164]	@ (800e1f0 <ProcessRadioRxDone+0x61c>)
 800e14c:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 800e150:	f897 008a 	ldrb.w	r0, [r7, #138]	@ 0x8a
 800e154:	f107 0308 	add.w	r3, r7, #8
 800e158:	9301      	str	r3, [sp, #4]
 800e15a:	1dfb      	adds	r3, r7, #7
 800e15c:	9300      	str	r3, [sp, #0]
 800e15e:	f8d4 3118 	ldr.w	r3, [r4, #280]	@ 0x118
 800e162:	f000 fee7 	bl	800ef34 <GetFCntDown>
 800e166:	4603      	mov	r3, r0
 800e168:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800e16c:	f897 3088 	ldrb.w	r3, [r7, #136]	@ 0x88
 800e170:	2b00      	cmp	r3, #0
 800e172:	d017      	beq.n	800e1a4 <ProcessRadioRxDone+0x5d0>
            {
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED )
 800e174:	f897 3088 	ldrb.w	r3, [r7, #136]	@ 0x88
 800e178:	2b07      	cmp	r3, #7
 800e17a:	d104      	bne.n	800e186 <ProcessRadioRxDone+0x5b2>
                {
                    // Catch the case of repeated downlink frame counter
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_REPEATED;
 800e17c:	4b1b      	ldr	r3, [pc, #108]	@ (800e1ec <ProcessRadioRxDone+0x618>)
 800e17e:	2208      	movs	r2, #8
 800e180:	f883 2425 	strb.w	r2, [r3, #1061]	@ 0x425
 800e184:	e003      	b.n	800e18e <ProcessRadioRxDone+0x5ba>
                }
                else
                {
                    // Other errors
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800e186:	4b19      	ldr	r3, [pc, #100]	@ (800e1ec <ProcessRadioRxDone+0x618>)
 800e188:	2201      	movs	r2, #1
 800e18a:	f883 2425 	strb.w	r2, [r3, #1061]	@ 0x425
                }
                MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 800e18e:	68bb      	ldr	r3, [r7, #8]
 800e190:	4a16      	ldr	r2, [pc, #88]	@ (800e1ec <ProcessRadioRxDone+0x618>)
 800e192:	f8c2 3434 	str.w	r3, [r2, #1076]	@ 0x434
                MacCtx.MlmeIndication.DownLinkCounter = downLinkCounter;
 800e196:	68bb      	ldr	r3, [r7, #8]
 800e198:	4a14      	ldr	r2, [pc, #80]	@ (800e1ec <ProcessRadioRxDone+0x618>)
 800e19a:	f8c2 3470 	str.w	r3, [r2, #1136]	@ 0x470
                PrepareRxDoneAbort( );
 800e19e:	f7ff fcf3 	bl	800db88 <PrepareRxDoneAbort>
                return;
 800e1a2:	e1c9      	b.n	800e538 <ProcessRadioRxDone+0x964>
            }

            macCryptoStatus = LoRaMacCryptoUnsecureMessage( addrID, address, fCntID, downLinkCounter, &macMsgData );
 800e1a4:	79fa      	ldrb	r2, [r7, #7]
 800e1a6:	68b9      	ldr	r1, [r7, #8]
 800e1a8:	f897 008a 	ldrb.w	r0, [r7, #138]	@ 0x8a
 800e1ac:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800e1b0:	9300      	str	r3, [sp, #0]
 800e1b2:	460b      	mov	r3, r1
 800e1b4:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 800e1b8:	f005 fd86 	bl	8013cc8 <LoRaMacCryptoUnsecureMessage>
 800e1bc:	4603      	mov	r3, r0
 800e1be:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800e1c2:	f897 3088 	ldrb.w	r3, [r7, #136]	@ 0x88
 800e1c6:	2b00      	cmp	r3, #0
 800e1c8:	d016      	beq.n	800e1f8 <ProcessRadioRxDone+0x624>
            {
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_ADDRESS )
 800e1ca:	f897 3088 	ldrb.w	r3, [r7, #136]	@ 0x88
 800e1ce:	2b02      	cmp	r3, #2
 800e1d0:	d104      	bne.n	800e1dc <ProcessRadioRxDone+0x608>
                {
                    // We are not the destination of this frame.
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ADDRESS_FAIL;
 800e1d2:	4b06      	ldr	r3, [pc, #24]	@ (800e1ec <ProcessRadioRxDone+0x618>)
 800e1d4:	220a      	movs	r2, #10
 800e1d6:	f883 2425 	strb.w	r2, [r3, #1061]	@ 0x425
 800e1da:	e003      	b.n	800e1e4 <ProcessRadioRxDone+0x610>
                }
                else
                {
                    // MIC calculation fail
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_MIC_FAIL;
 800e1dc:	4b03      	ldr	r3, [pc, #12]	@ (800e1ec <ProcessRadioRxDone+0x618>)
 800e1de:	220b      	movs	r2, #11
 800e1e0:	f883 2425 	strb.w	r2, [r3, #1061]	@ 0x425
                }
                PrepareRxDoneAbort( );
 800e1e4:	f7ff fcd0 	bl	800db88 <PrepareRxDoneAbort>
                return;
 800e1e8:	e1a6      	b.n	800e538 <ProcessRadioRxDone+0x964>
 800e1ea:	bf00      	nop
 800e1ec:	20000670 	.word	0x20000670
 800e1f0:	20000b90 	.word	0x20000b90
 800e1f4:	200008a8 	.word	0x200008a8
            }
#endif /* LORAMAC_VERSION */

            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800e1f8:	4bb5      	ldr	r3, [pc, #724]	@ (800e4d0 <ProcessRadioRxDone+0x8fc>)
 800e1fa:	2200      	movs	r2, #0
 800e1fc:	f883 2425 	strb.w	r2, [r3, #1061]	@ 0x425
            MacCtx.McpsIndication.Multicast = multicast;
 800e200:	4ab3      	ldr	r2, [pc, #716]	@ (800e4d0 <ProcessRadioRxDone+0x8fc>)
 800e202:	f897 308b 	ldrb.w	r3, [r7, #139]	@ 0x8b
 800e206:	f882 3426 	strb.w	r3, [r2, #1062]	@ 0x426
            MacCtx.McpsIndication.FramePending = macMsgData.FHDR.FCtrl.Bits.FPending;
 800e20a:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800e20e:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800e212:	b2db      	uxtb	r3, r3
 800e214:	461a      	mov	r2, r3
 800e216:	4bae      	ldr	r3, [pc, #696]	@ (800e4d0 <ProcessRadioRxDone+0x8fc>)
 800e218:	f883 2429 	strb.w	r2, [r3, #1065]	@ 0x429
            MacCtx.McpsIndication.Buffer = NULL;
 800e21c:	4bac      	ldr	r3, [pc, #688]	@ (800e4d0 <ProcessRadioRxDone+0x8fc>)
 800e21e:	2200      	movs	r2, #0
 800e220:	f8c3 242c 	str.w	r2, [r3, #1068]	@ 0x42c
            MacCtx.McpsIndication.BufferSize = 0;
 800e224:	4baa      	ldr	r3, [pc, #680]	@ (800e4d0 <ProcessRadioRxDone+0x8fc>)
 800e226:	2200      	movs	r2, #0
 800e228:	f883 2430 	strb.w	r2, [r3, #1072]	@ 0x430
            MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 800e22c:	68bb      	ldr	r3, [r7, #8]
 800e22e:	4aa8      	ldr	r2, [pc, #672]	@ (800e4d0 <ProcessRadioRxDone+0x8fc>)
 800e230:	f8c2 3434 	str.w	r3, [r2, #1076]	@ 0x434
            MacCtx.MlmeIndication.DownLinkCounter = downLinkCounter;
 800e234:	68bb      	ldr	r3, [r7, #8]
 800e236:	4aa6      	ldr	r2, [pc, #664]	@ (800e4d0 <ProcessRadioRxDone+0x8fc>)
 800e238:	f8c2 3470 	str.w	r3, [r2, #1136]	@ 0x470
            MacCtx.McpsIndication.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 800e23c:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800e240:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800e244:	b2db      	uxtb	r3, r3
 800e246:	2b00      	cmp	r3, #0
 800e248:	bf14      	ite	ne
 800e24a:	2301      	movne	r3, #1
 800e24c:	2300      	moveq	r3, #0
 800e24e:	b2da      	uxtb	r2, r3
 800e250:	4b9f      	ldr	r3, [pc, #636]	@ (800e4d0 <ProcessRadioRxDone+0x8fc>)
 800e252:	f883 2432 	strb.w	r2, [r3, #1074]	@ 0x432

            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800e256:	4b9e      	ldr	r3, [pc, #632]	@ (800e4d0 <ProcessRadioRxDone+0x8fc>)
 800e258:	2200      	movs	r2, #0
 800e25a:	f883 2445 	strb.w	r2, [r3, #1093]	@ 0x445
            MacCtx.McpsConfirm.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 800e25e:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800e262:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800e266:	b2db      	uxtb	r3, r3
 800e268:	2b00      	cmp	r3, #0
 800e26a:	bf14      	ite	ne
 800e26c:	2301      	movne	r3, #1
 800e26e:	2300      	moveq	r3, #0
 800e270:	b2da      	uxtb	r2, r3
 800e272:	4b97      	ldr	r3, [pc, #604]	@ (800e4d0 <ProcessRadioRxDone+0x8fc>)
 800e274:	f883 2448 	strb.w	r2, [r3, #1096]	@ 0x448

            // Reset ADR ACK Counter only, when RX1 or RX2 slot
            if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 800e278:	4b95      	ldr	r3, [pc, #596]	@ (800e4d0 <ProcessRadioRxDone+0x8fc>)
 800e27a:	f893 3493 	ldrb.w	r3, [r3, #1171]	@ 0x493
 800e27e:	2b00      	cmp	r3, #0
 800e280:	d004      	beq.n	800e28c <ProcessRadioRxDone+0x6b8>
                ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_2 ) )
 800e282:	4b93      	ldr	r3, [pc, #588]	@ (800e4d0 <ProcessRadioRxDone+0x8fc>)
 800e284:	f893 3493 	ldrb.w	r3, [r3, #1171]	@ 0x493
            if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 800e288:	2b01      	cmp	r3, #1
 800e28a:	d106      	bne.n	800e29a <ProcessRadioRxDone+0x6c6>
            {
                Nvm.MacGroup1.AdrAckCounter = 0;
 800e28c:	4b91      	ldr	r3, [pc, #580]	@ (800e4d4 <ProcessRadioRxDone+0x900>)
 800e28e:	2200      	movs	r2, #0
 800e290:	629a      	str	r2, [r3, #40]	@ 0x28
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
                Nvm.MacGroup2.DownlinkReceived = true;
 800e292:	4b90      	ldr	r3, [pc, #576]	@ (800e4d4 <ProcessRadioRxDone+0x900>)
 800e294:	2201      	movs	r2, #1
 800e296:	f883 210a 	strb.w	r2, [r3, #266]	@ 0x10a
#endif /* LORAMAC_VERSION */
            }

            // MCPS Indication and ack requested handling
            if( multicast == 1 )
 800e29a:	f897 308b 	ldrb.w	r3, [r7, #139]	@ 0x8b
 800e29e:	2b01      	cmp	r3, #1
 800e2a0:	d104      	bne.n	800e2ac <ProcessRadioRxDone+0x6d8>
            {
                MacCtx.McpsIndication.McpsIndication = MCPS_MULTICAST;
 800e2a2:	4b8b      	ldr	r3, [pc, #556]	@ (800e4d0 <ProcessRadioRxDone+0x8fc>)
 800e2a4:	2202      	movs	r2, #2
 800e2a6:	f883 2424 	strb.w	r2, [r3, #1060]	@ 0x424
 800e2aa:	e034      	b.n	800e316 <ProcessRadioRxDone+0x742>
            }
            else
            {
                if( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN )
 800e2ac:	f897 307c 	ldrb.w	r3, [r7, #124]	@ 0x7c
 800e2b0:	f023 031f 	bic.w	r3, r3, #31
 800e2b4:	b2db      	uxtb	r3, r3
 800e2b6:	2ba0      	cmp	r3, #160	@ 0xa0
 800e2b8:	d125      	bne.n	800e306 <ProcessRadioRxDone+0x732>
                {
                    Nvm.MacGroup1.SrvAckRequested = true;
 800e2ba:	4b86      	ldr	r3, [pc, #536]	@ (800e4d4 <ProcessRadioRxDone+0x900>)
 800e2bc:	2201      	movs	r2, #1
 800e2be:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
                    if( Nvm.MacGroup2.Version.Fields.Minor == 0 )
 800e2c2:	4b84      	ldr	r3, [pc, #528]	@ (800e4d4 <ProcessRadioRxDone+0x900>)
 800e2c4:	f893 311a 	ldrb.w	r3, [r3, #282]	@ 0x11a
 800e2c8:	2b00      	cmp	r3, #0
 800e2ca:	d102      	bne.n	800e2d2 <ProcessRadioRxDone+0x6fe>
                    {
                        Nvm.MacGroup1.LastRxMic = macMsgData.MIC;
 800e2cc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e2ce:	4a81      	ldr	r2, [pc, #516]	@ (800e4d4 <ProcessRadioRxDone+0x900>)
 800e2d0:	6353      	str	r3, [r2, #52]	@ 0x34
                    }
                    MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 800e2d2:	4b7f      	ldr	r3, [pc, #508]	@ (800e4d0 <ProcessRadioRxDone+0x8fc>)
 800e2d4:	2201      	movs	r2, #1
 800e2d6:	f883 2424 	strb.w	r2, [r3, #1060]	@ 0x424

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
                    // Handle response timeout for class c and class b downlinks
                    if( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 800e2da:	4b7d      	ldr	r3, [pc, #500]	@ (800e4d0 <ProcessRadioRxDone+0x8fc>)
 800e2dc:	f893 3493 	ldrb.w	r3, [r3, #1171]	@ 0x493
 800e2e0:	2b00      	cmp	r3, #0
 800e2e2:	d018      	beq.n	800e316 <ProcessRadioRxDone+0x742>
                        ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_2 ) )
 800e2e4:	4b7a      	ldr	r3, [pc, #488]	@ (800e4d0 <ProcessRadioRxDone+0x8fc>)
 800e2e6:	f893 3493 	ldrb.w	r3, [r3, #1171]	@ 0x493
                    if( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 800e2ea:	2b01      	cmp	r3, #1
 800e2ec:	d013      	beq.n	800e316 <ProcessRadioRxDone+0x742>
                    {
                        // Calculate timeout
                        MacCtx.McpsIndication.ResponseTimeout = Nvm.MacGroup2.MacParams.RxBCTimeout;
 800e2ee:	4b79      	ldr	r3, [pc, #484]	@ (800e4d4 <ProcessRadioRxDone+0x900>)
 800e2f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e2f4:	4a76      	ldr	r2, [pc, #472]	@ (800e4d0 <ProcessRadioRxDone+0x8fc>)
 800e2f6:	f8c2 3440 	str.w	r3, [r2, #1088]	@ 0x440
                        MacCtx.ResponseTimeoutStartTime = RxDoneParams.LastRxDone;
 800e2fa:	4b77      	ldr	r3, [pc, #476]	@ (800e4d8 <ProcessRadioRxDone+0x904>)
 800e2fc:	681b      	ldr	r3, [r3, #0]
 800e2fe:	4a74      	ldr	r2, [pc, #464]	@ (800e4d0 <ProcessRadioRxDone+0x8fc>)
 800e300:	f8c2 349c 	str.w	r3, [r2, #1180]	@ 0x49c
 800e304:	e007      	b.n	800e316 <ProcessRadioRxDone+0x742>
                    }
#endif /* LORAMAC_VERSION */
                }
                else
                {
                    Nvm.MacGroup1.SrvAckRequested = false;
 800e306:	4b73      	ldr	r3, [pc, #460]	@ (800e4d4 <ProcessRadioRxDone+0x900>)
 800e308:	2200      	movs	r2, #0
 800e30a:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
                    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 800e30e:	4b70      	ldr	r3, [pc, #448]	@ (800e4d0 <ProcessRadioRxDone+0x8fc>)
 800e310:	2200      	movs	r2, #0
 800e312:	f883 2424 	strb.w	r2, [r3, #1060]	@ 0x424
                }
            }

            RemoveMacCommands( MacCtx.RxStatus.RxSlot, macMsgData.FHDR.FCtrl, MacCtx.McpsConfirm.McpsRequest );
 800e316:	4b6e      	ldr	r3, [pc, #440]	@ (800e4d0 <ProcessRadioRxDone+0x8fc>)
 800e318:	f893 3493 	ldrb.w	r3, [r3, #1171]	@ 0x493
 800e31c:	4a6c      	ldr	r2, [pc, #432]	@ (800e4d0 <ProcessRadioRxDone+0x8fc>)
 800e31e:	f892 2444 	ldrb.w	r2, [r2, #1092]	@ 0x444
 800e322:	f897 1040 	ldrb.w	r1, [r7, #64]	@ 0x40
 800e326:	4618      	mov	r0, r3
 800e328:	f001 ff96 	bl	8010258 <RemoveMacCommands>

            switch( fType )
 800e32c:	79bb      	ldrb	r3, [r7, #6]
 800e32e:	2b03      	cmp	r3, #3
 800e330:	d873      	bhi.n	800e41a <ProcessRadioRxDone+0x846>
 800e332:	a201      	add	r2, pc, #4	@ (adr r2, 800e338 <ProcessRadioRxDone+0x764>)
 800e334:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e338:	0800e349 	.word	0x0800e349
 800e33c:	0800e399 	.word	0x0800e399
 800e340:	0800e3cf 	.word	0x0800e3cf
 800e344:	0800e3f5 	.word	0x0800e3f5
                    * |    > 0   |   X  |  > 0  |       X      |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FOpts field
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 800e348:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800e34c:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800e350:	b2db      	uxtb	r3, r3
 800e352:	461c      	mov	r4, r3
 800e354:	4b5e      	ldr	r3, [pc, #376]	@ (800e4d0 <ProcessRadioRxDone+0x8fc>)
 800e356:	f893 3493 	ldrb.w	r3, [r3, #1171]	@ 0x493
 800e35a:	f997 107f 	ldrsb.w	r1, [r7, #127]	@ 0x7f
 800e35e:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 800e362:	f102 0010 	add.w	r0, r2, #16
 800e366:	9300      	str	r3, [sp, #0]
 800e368:	460b      	mov	r3, r1
 800e36a:	4622      	mov	r2, r4
 800e36c:	2100      	movs	r1, #0
 800e36e:	f000 ff45 	bl	800f1fc <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800e372:	f897 2054 	ldrb.w	r2, [r7, #84]	@ 0x54
 800e376:	4b56      	ldr	r3, [pc, #344]	@ (800e4d0 <ProcessRadioRxDone+0x8fc>)
 800e378:	f883 2427 	strb.w	r2, [r3, #1063]	@ 0x427
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 800e37c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e37e:	4a54      	ldr	r2, [pc, #336]	@ (800e4d0 <ProcessRadioRxDone+0x8fc>)
 800e380:	f8c2 342c 	str.w	r3, [r2, #1068]	@ 0x42c
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 800e384:	f897 205c 	ldrb.w	r2, [r7, #92]	@ 0x5c
 800e388:	4b51      	ldr	r3, [pc, #324]	@ (800e4d0 <ProcessRadioRxDone+0x8fc>)
 800e38a:	f883 2430 	strb.w	r2, [r3, #1072]	@ 0x430
                    MacCtx.McpsIndication.RxData = true;
 800e38e:	4b50      	ldr	r3, [pc, #320]	@ (800e4d0 <ProcessRadioRxDone+0x8fc>)
 800e390:	2201      	movs	r2, #1
 800e392:	f883 2431 	strb.w	r2, [r3, #1073]	@ 0x431
                    break;
 800e396:	e047      	b.n	800e428 <ProcessRadioRxDone+0x854>
                    * |    > 0   |   X  |   -   |       -      |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FOpts field
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 800e398:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800e39c:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800e3a0:	b2db      	uxtb	r3, r3
 800e3a2:	461c      	mov	r4, r3
 800e3a4:	4b4a      	ldr	r3, [pc, #296]	@ (800e4d0 <ProcessRadioRxDone+0x8fc>)
 800e3a6:	f893 3493 	ldrb.w	r3, [r3, #1171]	@ 0x493
 800e3aa:	f997 107f 	ldrsb.w	r1, [r7, #127]	@ 0x7f
 800e3ae:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 800e3b2:	f102 0010 	add.w	r0, r2, #16
 800e3b6:	9300      	str	r3, [sp, #0]
 800e3b8:	460b      	mov	r3, r1
 800e3ba:	4622      	mov	r2, r4
 800e3bc:	2100      	movs	r1, #0
 800e3be:	f000 ff1d 	bl	800f1fc <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800e3c2:	f897 2054 	ldrb.w	r2, [r7, #84]	@ 0x54
 800e3c6:	4b42      	ldr	r3, [pc, #264]	@ (800e4d0 <ProcessRadioRxDone+0x8fc>)
 800e3c8:	f883 2427 	strb.w	r2, [r3, #1063]	@ 0x427
                    break;
 800e3cc:	e02c      	b.n	800e428 <ProcessRadioRxDone+0x854>
                    * |    = 0   |   -  |  = 0  | MAC commands |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FRMPayload
                    ProcessMacCommands( macMsgData.FRMPayload, 0, macMsgData.FRMPayloadSize, snr, MacCtx.RxStatus.RxSlot );
 800e3ce:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800e3d0:	f897 205c 	ldrb.w	r2, [r7, #92]	@ 0x5c
 800e3d4:	4b3e      	ldr	r3, [pc, #248]	@ (800e4d0 <ProcessRadioRxDone+0x8fc>)
 800e3d6:	f893 3493 	ldrb.w	r3, [r3, #1171]	@ 0x493
 800e3da:	f997 107f 	ldrsb.w	r1, [r7, #127]	@ 0x7f
 800e3de:	9300      	str	r3, [sp, #0]
 800e3e0:	460b      	mov	r3, r1
 800e3e2:	2100      	movs	r1, #0
 800e3e4:	f000 ff0a 	bl	800f1fc <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800e3e8:	f897 2054 	ldrb.w	r2, [r7, #84]	@ 0x54
 800e3ec:	4b38      	ldr	r3, [pc, #224]	@ (800e4d0 <ProcessRadioRxDone+0x8fc>)
 800e3ee:	f883 2427 	strb.w	r2, [r3, #1063]	@ 0x427
                    break;
 800e3f2:	e019      	b.n	800e428 <ProcessRadioRxDone+0x854>
                    * |    = 0   |   -  |  > 0  |       X      |
                    * +----------+------+-------+--------------+
                    */

                    // No MAC commands just application payload
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800e3f4:	f897 2054 	ldrb.w	r2, [r7, #84]	@ 0x54
 800e3f8:	4b35      	ldr	r3, [pc, #212]	@ (800e4d0 <ProcessRadioRxDone+0x8fc>)
 800e3fa:	f883 2427 	strb.w	r2, [r3, #1063]	@ 0x427
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 800e3fe:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e400:	4a33      	ldr	r2, [pc, #204]	@ (800e4d0 <ProcessRadioRxDone+0x8fc>)
 800e402:	f8c2 342c 	str.w	r3, [r2, #1068]	@ 0x42c
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 800e406:	f897 205c 	ldrb.w	r2, [r7, #92]	@ 0x5c
 800e40a:	4b31      	ldr	r3, [pc, #196]	@ (800e4d0 <ProcessRadioRxDone+0x8fc>)
 800e40c:	f883 2430 	strb.w	r2, [r3, #1072]	@ 0x430
                    MacCtx.McpsIndication.RxData = true;
 800e410:	4b2f      	ldr	r3, [pc, #188]	@ (800e4d0 <ProcessRadioRxDone+0x8fc>)
 800e412:	2201      	movs	r2, #1
 800e414:	f883 2431 	strb.w	r2, [r3, #1073]	@ 0x431
                    break;
 800e418:	e006      	b.n	800e428 <ProcessRadioRxDone+0x854>
                }
                default:
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800e41a:	4b2d      	ldr	r3, [pc, #180]	@ (800e4d0 <ProcessRadioRxDone+0x8fc>)
 800e41c:	2201      	movs	r2, #1
 800e41e:	f883 2425 	strb.w	r2, [r3, #1061]	@ 0x425
                    PrepareRxDoneAbort( );
 800e422:	f7ff fbb1 	bl	800db88 <PrepareRxDoneAbort>
                    break;
 800e426:	bf00      	nop
            }

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
            if( ( macMsgData.FPort == LORAMAC_CERT_FPORT ) && ( Nvm.MacGroup2.IsCertPortOn == false ) )
 800e428:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 800e42c:	2be0      	cmp	r3, #224	@ 0xe0
 800e42e:	d118      	bne.n	800e462 <ProcessRadioRxDone+0x88e>
 800e430:	4b28      	ldr	r3, [pc, #160]	@ (800e4d4 <ProcessRadioRxDone+0x900>)
 800e432:	f893 310b 	ldrb.w	r3, [r3, #267]	@ 0x10b
 800e436:	f083 0301 	eor.w	r3, r3, #1
 800e43a:	b2db      	uxtb	r3, r3
 800e43c:	2b00      	cmp	r3, #0
 800e43e:	d010      	beq.n	800e462 <ProcessRadioRxDone+0x88e>
            { // Do not notify the upper layer of data reception on FPort LORAMAC_CERT_FPORT if the port
              // handling is disabled.
                MacCtx.McpsIndication.Port = macMsgData.FPort;
 800e440:	f897 2054 	ldrb.w	r2, [r7, #84]	@ 0x54
 800e444:	4b22      	ldr	r3, [pc, #136]	@ (800e4d0 <ProcessRadioRxDone+0x8fc>)
 800e446:	f883 2427 	strb.w	r2, [r3, #1063]	@ 0x427
                MacCtx.McpsIndication.Buffer = NULL;
 800e44a:	4b21      	ldr	r3, [pc, #132]	@ (800e4d0 <ProcessRadioRxDone+0x8fc>)
 800e44c:	2200      	movs	r2, #0
 800e44e:	f8c3 242c 	str.w	r2, [r3, #1068]	@ 0x42c
                MacCtx.McpsIndication.BufferSize = 0;
 800e452:	4b1f      	ldr	r3, [pc, #124]	@ (800e4d0 <ProcessRadioRxDone+0x8fc>)
 800e454:	2200      	movs	r2, #0
 800e456:	f883 2430 	strb.w	r2, [r3, #1072]	@ 0x430
                MacCtx.McpsIndication.RxData = false;
 800e45a:	4b1d      	ldr	r3, [pc, #116]	@ (800e4d0 <ProcessRadioRxDone+0x8fc>)
 800e45c:	2200      	movs	r2, #0
 800e45e:	f883 2431 	strb.w	r2, [r3, #1073]	@ 0x431
            }
#endif /* LORAMAC_VERSION */

            // Provide always an indication, skip the callback to the user application,
            // in case of a confirmed downlink retransmission.
            MacCtx.MacFlags.Bits.McpsInd = 1;
 800e462:	4a1b      	ldr	r2, [pc, #108]	@ (800e4d0 <ProcessRadioRxDone+0x8fc>)
 800e464:	f892 3495 	ldrb.w	r3, [r2, #1173]	@ 0x495
 800e468:	f043 0302 	orr.w	r3, r3, #2
 800e46c:	f882 3495 	strb.w	r3, [r2, #1173]	@ 0x495

            break;
 800e470:	e03d      	b.n	800e4ee <ProcessRadioRxDone+0x91a>
        case FRAME_TYPE_PROPRIETARY:
            memcpy1( MacCtx.RxPayload, &payload[pktHeaderLen], size - pktHeaderLen );
 800e472:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 800e476:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800e47a:	18d1      	adds	r1, r2, r3
 800e47c:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 800e480:	b29b      	uxth	r3, r3
 800e482:	f8b7 2082 	ldrh.w	r2, [r7, #130]	@ 0x82
 800e486:	1ad3      	subs	r3, r2, r3
 800e488:	b29b      	uxth	r3, r3
 800e48a:	461a      	mov	r2, r3
 800e48c:	4813      	ldr	r0, [pc, #76]	@ (800e4dc <ProcessRadioRxDone+0x908>)
 800e48e:	f008 fae6 	bl	8016a5e <memcpy1>

            MacCtx.McpsIndication.McpsIndication = MCPS_PROPRIETARY;
 800e492:	4b0f      	ldr	r3, [pc, #60]	@ (800e4d0 <ProcessRadioRxDone+0x8fc>)
 800e494:	2203      	movs	r2, #3
 800e496:	f883 2424 	strb.w	r2, [r3, #1060]	@ 0x424
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800e49a:	4b0d      	ldr	r3, [pc, #52]	@ (800e4d0 <ProcessRadioRxDone+0x8fc>)
 800e49c:	2200      	movs	r2, #0
 800e49e:	f883 2425 	strb.w	r2, [r3, #1061]	@ 0x425
            MacCtx.McpsIndication.Buffer = MacCtx.RxPayload;
 800e4a2:	4b0b      	ldr	r3, [pc, #44]	@ (800e4d0 <ProcessRadioRxDone+0x8fc>)
 800e4a4:	4a0d      	ldr	r2, [pc, #52]	@ (800e4dc <ProcessRadioRxDone+0x908>)
 800e4a6:	f8c3 242c 	str.w	r2, [r3, #1068]	@ 0x42c
            MacCtx.McpsIndication.BufferSize = size - pktHeaderLen;
 800e4aa:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 800e4ae:	b2da      	uxtb	r2, r3
 800e4b0:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 800e4b4:	1ad3      	subs	r3, r2, r3
 800e4b6:	b2da      	uxtb	r2, r3
 800e4b8:	4b05      	ldr	r3, [pc, #20]	@ (800e4d0 <ProcessRadioRxDone+0x8fc>)
 800e4ba:	f883 2430 	strb.w	r2, [r3, #1072]	@ 0x430

            MacCtx.MacFlags.Bits.McpsInd = 1;
 800e4be:	4a04      	ldr	r2, [pc, #16]	@ (800e4d0 <ProcessRadioRxDone+0x8fc>)
 800e4c0:	f892 3495 	ldrb.w	r3, [r2, #1173]	@ 0x495
 800e4c4:	f043 0302 	orr.w	r3, r3, #2
 800e4c8:	f882 3495 	strb.w	r3, [r2, #1173]	@ 0x495
            break;
 800e4cc:	e00f      	b.n	800e4ee <ProcessRadioRxDone+0x91a>
 800e4ce:	bf00      	nop
 800e4d0:	20000670 	.word	0x20000670
 800e4d4:	20000b90 	.word	0x20000b90
 800e4d8:	20001720 	.word	0x20001720
 800e4dc:	200008a8 	.word	0x200008a8
        default:
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800e4e0:	4b17      	ldr	r3, [pc, #92]	@ (800e540 <ProcessRadioRxDone+0x96c>)
 800e4e2:	2201      	movs	r2, #1
 800e4e4:	f883 2425 	strb.w	r2, [r3, #1061]	@ 0x425
            PrepareRxDoneAbort( );
 800e4e8:	f7ff fb4e 	bl	800db88 <PrepareRxDoneAbort>
            break;
 800e4ec:	bf00      	nop
    }
    MacCtx.MacFlags.Bits.MacDone = 1;
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    // Verify if we need to disable the RetransmitTimeoutTimer
    // Only aplies if downlink is received on Rx1 or Rx2 windows.
    if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 800e4ee:	4b14      	ldr	r3, [pc, #80]	@ (800e540 <ProcessRadioRxDone+0x96c>)
 800e4f0:	f893 3493 	ldrb.w	r3, [r3, #1171]	@ 0x493
 800e4f4:	2b00      	cmp	r3, #0
 800e4f6:	d004      	beq.n	800e502 <ProcessRadioRxDone+0x92e>
        ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_2 ) )
 800e4f8:	4b11      	ldr	r3, [pc, #68]	@ (800e540 <ProcessRadioRxDone+0x96c>)
 800e4fa:	f893 3493 	ldrb.w	r3, [r3, #1171]	@ 0x493
    if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 800e4fe:	2b01      	cmp	r3, #1
 800e500:	d10c      	bne.n	800e51c <ProcessRadioRxDone+0x948>
    {
        if( MacCtx.NodeAckRequested == true )
 800e502:	4b0f      	ldr	r3, [pc, #60]	@ (800e540 <ProcessRadioRxDone+0x96c>)
 800e504:	f893 341e 	ldrb.w	r3, [r3, #1054]	@ 0x41e
 800e508:	2b00      	cmp	r3, #0
 800e50a:	d007      	beq.n	800e51c <ProcessRadioRxDone+0x948>
        {
            if( MacCtx.McpsConfirm.AckReceived == true )
 800e50c:	4b0c      	ldr	r3, [pc, #48]	@ (800e540 <ProcessRadioRxDone+0x96c>)
 800e50e:	f893 3448 	ldrb.w	r3, [r3, #1096]	@ 0x448
 800e512:	2b00      	cmp	r3, #0
 800e514:	d002      	beq.n	800e51c <ProcessRadioRxDone+0x948>
            {
                OnRetransmitTimeoutTimerEvent( NULL );
 800e516:	2000      	movs	r0, #0
 800e518:	f000 fce4 	bl	800eee4 <OnRetransmitTimeoutTimerEvent>
            }
        }
    }

    if( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_CLASS_C )
 800e51c:	4b08      	ldr	r3, [pc, #32]	@ (800e540 <ProcessRadioRxDone+0x96c>)
 800e51e:	f893 3493 	ldrb.w	r3, [r3, #1171]	@ 0x493
 800e522:	2b02      	cmp	r3, #2
 800e524:	d006      	beq.n	800e534 <ProcessRadioRxDone+0x960>
    {
        MacCtx.MacFlags.Bits.MacDone = 1;
 800e526:	4a06      	ldr	r2, [pc, #24]	@ (800e540 <ProcessRadioRxDone+0x96c>)
 800e528:	f892 3495 	ldrb.w	r3, [r2, #1173]	@ 0x495
 800e52c:	f043 0320 	orr.w	r3, r3, #32
 800e530:	f882 3495 	strb.w	r3, [r2, #1173]	@ 0x495
    }
#endif /* LORAMAC_VERSION */

    UpdateRxSlotIdleState( );
 800e534:	f7ff fa82 	bl	800da3c <UpdateRxSlotIdleState>
}
 800e538:	3794      	adds	r7, #148	@ 0x94
 800e53a:	46bd      	mov	sp, r7
 800e53c:	bd90      	pop	{r4, r7, pc}
 800e53e:	bf00      	nop
 800e540:	20000670 	.word	0x20000670

0800e544 <ProcessRadioTxTimeout>:

static void ProcessRadioTxTimeout( void )
{
 800e544:	b580      	push	{r7, lr}
 800e546:	af00      	add	r7, sp, #0
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800e548:	4b11      	ldr	r3, [pc, #68]	@ (800e590 <ProcessRadioTxTimeout+0x4c>)
 800e54a:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 800e54e:	2b02      	cmp	r3, #2
 800e550:	d002      	beq.n	800e558 <ProcessRadioTxTimeout+0x14>
    {
        Radio.Sleep( );
 800e552:	4b10      	ldr	r3, [pc, #64]	@ (800e594 <ProcessRadioTxTimeout+0x50>)
 800e554:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e556:	4798      	blx	r3
    }
    UpdateRxSlotIdleState( );
 800e558:	f7ff fa70 	bl	800da3c <UpdateRxSlotIdleState>

    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT;
 800e55c:	4b0e      	ldr	r3, [pc, #56]	@ (800e598 <ProcessRadioTxTimeout+0x54>)
 800e55e:	2202      	movs	r2, #2
 800e560:	f883 2445 	strb.w	r2, [r3, #1093]	@ 0x445
    LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT );
 800e564:	2002      	movs	r0, #2
 800e566:	f004 fd57 	bl	8013018 <LoRaMacConfirmQueueSetStatusCmn>
    if( MacCtx.NodeAckRequested == true )
 800e56a:	4b0b      	ldr	r3, [pc, #44]	@ (800e598 <ProcessRadioTxTimeout+0x54>)
 800e56c:	f893 341e 	ldrb.w	r3, [r3, #1054]	@ 0x41e
 800e570:	2b00      	cmp	r3, #0
 800e572:	d003      	beq.n	800e57c <ProcessRadioTxTimeout+0x38>
    {
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        MacCtx.AckTimeoutRetry = true;
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
        MacCtx.RetransmitTimeoutRetry = true;
 800e574:	4b08      	ldr	r3, [pc, #32]	@ (800e598 <ProcessRadioTxTimeout+0x54>)
 800e576:	2201      	movs	r2, #1
 800e578:	f883 241d 	strb.w	r2, [r3, #1053]	@ 0x41d
#endif /* LORAMAC_VERSION */
    }
    MacCtx.MacFlags.Bits.MacDone = 1;
 800e57c:	4a06      	ldr	r2, [pc, #24]	@ (800e598 <ProcessRadioTxTimeout+0x54>)
 800e57e:	f892 3495 	ldrb.w	r3, [r2, #1173]	@ 0x495
 800e582:	f043 0320 	orr.w	r3, r3, #32
 800e586:	f882 3495 	strb.w	r3, [r2, #1173]	@ 0x495
}
 800e58a:	bf00      	nop
 800e58c:	bd80      	pop	{r7, pc}
 800e58e:	bf00      	nop
 800e590:	20000b90 	.word	0x20000b90
 800e594:	0801c57c 	.word	0x0801c57c
 800e598:	20000670 	.word	0x20000670

0800e59c <HandleRadioRxErrorTimeout>:

static void HandleRadioRxErrorTimeout( LoRaMacEventInfoStatus_t rx1EventInfoStatus, LoRaMacEventInfoStatus_t rx2EventInfoStatus )
{
 800e59c:	b580      	push	{r7, lr}
 800e59e:	b084      	sub	sp, #16
 800e5a0:	af00      	add	r7, sp, #0
 800e5a2:	4603      	mov	r3, r0
 800e5a4:	460a      	mov	r2, r1
 800e5a6:	71fb      	strb	r3, [r7, #7]
 800e5a8:	4613      	mov	r3, r2
 800e5aa:	71bb      	strb	r3, [r7, #6]
    bool classBRx = false;
 800e5ac:	2300      	movs	r3, #0
 800e5ae:	73fb      	strb	r3, [r7, #15]

    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800e5b0:	4b3d      	ldr	r3, [pc, #244]	@ (800e6a8 <HandleRadioRxErrorTimeout+0x10c>)
 800e5b2:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 800e5b6:	2b02      	cmp	r3, #2
 800e5b8:	d002      	beq.n	800e5c0 <HandleRadioRxErrorTimeout+0x24>
    {
        Radio.Sleep( );
 800e5ba:	4b3c      	ldr	r3, [pc, #240]	@ (800e6ac <HandleRadioRxErrorTimeout+0x110>)
 800e5bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e5be:	4798      	blx	r3
    }

    if( LoRaMacClassBIsBeaconExpected( ) == true )
 800e5c0:	f004 f870 	bl	80126a4 <LoRaMacClassBIsBeaconExpected>
 800e5c4:	4603      	mov	r3, r0
 800e5c6:	2b00      	cmp	r3, #0
 800e5c8:	d007      	beq.n	800e5da <HandleRadioRxErrorTimeout+0x3e>
    {
        LoRaMacClassBSetBeaconState( BEACON_STATE_TIMEOUT );
 800e5ca:	2002      	movs	r0, #2
 800e5cc:	f004 f81e 	bl	801260c <LoRaMacClassBSetBeaconState>
        LoRaMacClassBBeaconTimerEvent( NULL );
 800e5d0:	2000      	movs	r0, #0
 800e5d2:	f004 f840 	bl	8012656 <LoRaMacClassBBeaconTimerEvent>
        classBRx = true;
 800e5d6:	2301      	movs	r3, #1
 800e5d8:	73fb      	strb	r3, [r7, #15]
    }
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800e5da:	4b33      	ldr	r3, [pc, #204]	@ (800e6a8 <HandleRadioRxErrorTimeout+0x10c>)
 800e5dc:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 800e5e0:	2b01      	cmp	r3, #1
 800e5e2:	d119      	bne.n	800e618 <HandleRadioRxErrorTimeout+0x7c>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 800e5e4:	f004 f865 	bl	80126b2 <LoRaMacClassBIsPingExpected>
 800e5e8:	4603      	mov	r3, r0
 800e5ea:	2b00      	cmp	r3, #0
 800e5ec:	d007      	beq.n	800e5fe <HandleRadioRxErrorTimeout+0x62>
        {
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800e5ee:	2000      	movs	r0, #0
 800e5f0:	f004 f816 	bl	8012620 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 800e5f4:	2000      	movs	r0, #0
 800e5f6:	f004 f837 	bl	8012668 <LoRaMacClassBPingSlotTimerEvent>
            classBRx = true;
 800e5fa:	2301      	movs	r3, #1
 800e5fc:	73fb      	strb	r3, [r7, #15]
        }
        if( LoRaMacClassBIsMulticastExpected( ) == true )
 800e5fe:	f004 f85f 	bl	80126c0 <LoRaMacClassBIsMulticastExpected>
 800e602:	4603      	mov	r3, r0
 800e604:	2b00      	cmp	r3, #0
 800e606:	d007      	beq.n	800e618 <HandleRadioRxErrorTimeout+0x7c>
        {
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800e608:	2000      	movs	r0, #0
 800e60a:	f004 f813 	bl	8012634 <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800e60e:	2000      	movs	r0, #0
 800e610:	f004 f833 	bl	801267a <LoRaMacClassBMulticastSlotTimerEvent>
            classBRx = true;
 800e614:	2301      	movs	r3, #1
 800e616:	73fb      	strb	r3, [r7, #15]
        }
    }

    if( classBRx == false )
 800e618:	7bfb      	ldrb	r3, [r7, #15]
 800e61a:	f083 0301 	eor.w	r3, r3, #1
 800e61e:	b2db      	uxtb	r3, r3
 800e620:	2b00      	cmp	r3, #0
 800e622:	d03b      	beq.n	800e69c <HandleRadioRxErrorTimeout+0x100>
    {
        if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 800e624:	4b22      	ldr	r3, [pc, #136]	@ (800e6b0 <HandleRadioRxErrorTimeout+0x114>)
 800e626:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800e62a:	2b00      	cmp	r3, #0
 800e62c:	d122      	bne.n	800e674 <HandleRadioRxErrorTimeout+0xd8>
        {
            if( MacCtx.NodeAckRequested == true )
 800e62e:	4b20      	ldr	r3, [pc, #128]	@ (800e6b0 <HandleRadioRxErrorTimeout+0x114>)
 800e630:	f893 341e 	ldrb.w	r3, [r3, #1054]	@ 0x41e
 800e634:	2b00      	cmp	r3, #0
 800e636:	d003      	beq.n	800e640 <HandleRadioRxErrorTimeout+0xa4>
            {
                MacCtx.McpsConfirm.Status = rx1EventInfoStatus;
 800e638:	4a1d      	ldr	r2, [pc, #116]	@ (800e6b0 <HandleRadioRxErrorTimeout+0x114>)
 800e63a:	79fb      	ldrb	r3, [r7, #7]
 800e63c:	f882 3445 	strb.w	r3, [r2, #1093]	@ 0x445
            }
            LoRaMacConfirmQueueSetStatusCmn( rx1EventInfoStatus );
 800e640:	79fb      	ldrb	r3, [r7, #7]
 800e642:	4618      	mov	r0, r3
 800e644:	f004 fce8 	bl	8013018 <LoRaMacConfirmQueueSetStatusCmn>

            if( TimerGetElapsedTime( Nvm.MacGroup1.LastTxDoneTime ) >= MacCtx.RxWindow2Delay )
 800e648:	4b17      	ldr	r3, [pc, #92]	@ (800e6a8 <HandleRadioRxErrorTimeout+0x10c>)
 800e64a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e64c:	4618      	mov	r0, r3
 800e64e:	f00c fc77 	bl	801af40 <UTIL_TIMER_GetElapsedTime>
 800e652:	4602      	mov	r2, r0
 800e654:	4b16      	ldr	r3, [pc, #88]	@ (800e6b0 <HandleRadioRxErrorTimeout+0x114>)
 800e656:	f8d3 33b4 	ldr.w	r3, [r3, #948]	@ 0x3b4
 800e65a:	429a      	cmp	r2, r3
 800e65c:	d31e      	bcc.n	800e69c <HandleRadioRxErrorTimeout+0x100>
            {
                TimerStop( &MacCtx.RxWindowTimer2 );
 800e65e:	4815      	ldr	r0, [pc, #84]	@ (800e6b4 <HandleRadioRxErrorTimeout+0x118>)
 800e660:	f00c fb42 	bl	801ace8 <UTIL_TIMER_Stop>
                MacCtx.MacFlags.Bits.MacDone = 1;
 800e664:	4a12      	ldr	r2, [pc, #72]	@ (800e6b0 <HandleRadioRxErrorTimeout+0x114>)
 800e666:	f892 3495 	ldrb.w	r3, [r2, #1173]	@ 0x495
 800e66a:	f043 0320 	orr.w	r3, r3, #32
 800e66e:	f882 3495 	strb.w	r3, [r2, #1173]	@ 0x495
 800e672:	e013      	b.n	800e69c <HandleRadioRxErrorTimeout+0x100>
            }
        }
        else
        {
            if( MacCtx.NodeAckRequested == true )
 800e674:	4b0e      	ldr	r3, [pc, #56]	@ (800e6b0 <HandleRadioRxErrorTimeout+0x114>)
 800e676:	f893 341e 	ldrb.w	r3, [r3, #1054]	@ 0x41e
 800e67a:	2b00      	cmp	r3, #0
 800e67c:	d003      	beq.n	800e686 <HandleRadioRxErrorTimeout+0xea>
            {
                MacCtx.McpsConfirm.Status = rx2EventInfoStatus;
 800e67e:	4a0c      	ldr	r2, [pc, #48]	@ (800e6b0 <HandleRadioRxErrorTimeout+0x114>)
 800e680:	79bb      	ldrb	r3, [r7, #6]
 800e682:	f882 3445 	strb.w	r3, [r2, #1093]	@ 0x445
            }
            LoRaMacConfirmQueueSetStatusCmn( rx2EventInfoStatus );
 800e686:	79bb      	ldrb	r3, [r7, #6]
 800e688:	4618      	mov	r0, r3
 800e68a:	f004 fcc5 	bl	8013018 <LoRaMacConfirmQueueSetStatusCmn>
            if( Nvm.MacGroup2.DeviceClass != CLASS_C )
            {
                MacCtx.MacFlags.Bits.MacDone = 1;
            }
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
            MacCtx.MacFlags.Bits.MacDone = 1;
 800e68e:	4a08      	ldr	r2, [pc, #32]	@ (800e6b0 <HandleRadioRxErrorTimeout+0x114>)
 800e690:	f892 3495 	ldrb.w	r3, [r2, #1173]	@ 0x495
 800e694:	f043 0320 	orr.w	r3, r3, #32
 800e698:	f882 3495 	strb.w	r3, [r2, #1173]	@ 0x495
#endif /* LORAMAC_VERSION */
        }
    }

    UpdateRxSlotIdleState( );
 800e69c:	f7ff f9ce 	bl	800da3c <UpdateRxSlotIdleState>
}
 800e6a0:	bf00      	nop
 800e6a2:	3710      	adds	r7, #16
 800e6a4:	46bd      	mov	sp, r7
 800e6a6:	bd80      	pop	{r7, pc}
 800e6a8:	20000b90 	.word	0x20000b90
 800e6ac:	0801c57c 	.word	0x0801c57c
 800e6b0:	20000670 	.word	0x20000670
 800e6b4:	20000a08 	.word	0x20000a08

0800e6b8 <ProcessRadioRxError>:

static void ProcessRadioRxError( void )
{
 800e6b8:	b580      	push	{r7, lr}
 800e6ba:	af00      	add	r7, sp, #0
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_ERROR, LORAMAC_EVENT_INFO_STATUS_RX2_ERROR );
 800e6bc:	2106      	movs	r1, #6
 800e6be:	2005      	movs	r0, #5
 800e6c0:	f7ff ff6c 	bl	800e59c <HandleRadioRxErrorTimeout>
}
 800e6c4:	bf00      	nop
 800e6c6:	bd80      	pop	{r7, pc}

0800e6c8 <ProcessRadioRxTimeout>:

static void ProcessRadioRxTimeout( void )
{
 800e6c8:	b580      	push	{r7, lr}
 800e6ca:	af00      	add	r7, sp, #0
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_TIMEOUT, LORAMAC_EVENT_INFO_STATUS_RX2_TIMEOUT );
 800e6cc:	2104      	movs	r1, #4
 800e6ce:	2003      	movs	r0, #3
 800e6d0:	f7ff ff64 	bl	800e59c <HandleRadioRxErrorTimeout>
}
 800e6d4:	bf00      	nop
 800e6d6:	bd80      	pop	{r7, pc}

0800e6d8 <LoRaMacHandleIrqEvents>:

static void LoRaMacHandleIrqEvents( void )
{
 800e6d8:	b580      	push	{r7, lr}
 800e6da:	b084      	sub	sp, #16
 800e6dc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e6de:	f3ef 8310 	mrs	r3, PRIMASK
 800e6e2:	607b      	str	r3, [r7, #4]
  return(result);
 800e6e4:	687b      	ldr	r3, [r7, #4]
    LoRaMacRadioEvents_t events;

    CRITICAL_SECTION_BEGIN( );
 800e6e6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800e6e8:	b672      	cpsid	i
}
 800e6ea:	bf00      	nop
    events = LoRaMacRadioEvents;
 800e6ec:	4b1d      	ldr	r3, [pc, #116]	@ (800e764 <LoRaMacHandleIrqEvents+0x8c>)
 800e6ee:	681b      	ldr	r3, [r3, #0]
 800e6f0:	603b      	str	r3, [r7, #0]
    LoRaMacRadioEvents.Value = 0;
 800e6f2:	4b1c      	ldr	r3, [pc, #112]	@ (800e764 <LoRaMacHandleIrqEvents+0x8c>)
 800e6f4:	2200      	movs	r2, #0
 800e6f6:	601a      	str	r2, [r3, #0]
 800e6f8:	68fb      	ldr	r3, [r7, #12]
 800e6fa:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e6fc:	68bb      	ldr	r3, [r7, #8]
 800e6fe:	f383 8810 	msr	PRIMASK, r3
}
 800e702:	bf00      	nop
    CRITICAL_SECTION_END( );

    if( events.Value != 0 )
 800e704:	683b      	ldr	r3, [r7, #0]
 800e706:	2b00      	cmp	r3, #0
 800e708:	d027      	beq.n	800e75a <LoRaMacHandleIrqEvents+0x82>
    {
        if( events.Events.TxDone == 1 )
 800e70a:	783b      	ldrb	r3, [r7, #0]
 800e70c:	f003 0320 	and.w	r3, r3, #32
 800e710:	b2db      	uxtb	r3, r3
 800e712:	2b00      	cmp	r3, #0
 800e714:	d001      	beq.n	800e71a <LoRaMacHandleIrqEvents+0x42>
        {
            ProcessRadioTxDone( );
 800e716:	f7ff f9a9 	bl	800da6c <ProcessRadioTxDone>
        }
        if( events.Events.RxDone == 1 )
 800e71a:	783b      	ldrb	r3, [r7, #0]
 800e71c:	f003 0310 	and.w	r3, r3, #16
 800e720:	b2db      	uxtb	r3, r3
 800e722:	2b00      	cmp	r3, #0
 800e724:	d001      	beq.n	800e72a <LoRaMacHandleIrqEvents+0x52>
        {
            ProcessRadioRxDone( );
 800e726:	f7ff fa55 	bl	800dbd4 <ProcessRadioRxDone>
        }
        if( events.Events.TxTimeout == 1 )
 800e72a:	783b      	ldrb	r3, [r7, #0]
 800e72c:	f003 0308 	and.w	r3, r3, #8
 800e730:	b2db      	uxtb	r3, r3
 800e732:	2b00      	cmp	r3, #0
 800e734:	d001      	beq.n	800e73a <LoRaMacHandleIrqEvents+0x62>
        {
            ProcessRadioTxTimeout( );
 800e736:	f7ff ff05 	bl	800e544 <ProcessRadioTxTimeout>
        }
        if( events.Events.RxError == 1 )
 800e73a:	783b      	ldrb	r3, [r7, #0]
 800e73c:	f003 0304 	and.w	r3, r3, #4
 800e740:	b2db      	uxtb	r3, r3
 800e742:	2b00      	cmp	r3, #0
 800e744:	d001      	beq.n	800e74a <LoRaMacHandleIrqEvents+0x72>
        {
            ProcessRadioRxError( );
 800e746:	f7ff ffb7 	bl	800e6b8 <ProcessRadioRxError>
        }
        if( events.Events.RxTimeout == 1 )
 800e74a:	783b      	ldrb	r3, [r7, #0]
 800e74c:	f003 0302 	and.w	r3, r3, #2
 800e750:	b2db      	uxtb	r3, r3
 800e752:	2b00      	cmp	r3, #0
 800e754:	d001      	beq.n	800e75a <LoRaMacHandleIrqEvents+0x82>
        {
            ProcessRadioRxTimeout( );
 800e756:	f7ff ffb7 	bl	800e6c8 <ProcessRadioRxTimeout>
        }
    }
}
 800e75a:	bf00      	nop
 800e75c:	3710      	adds	r7, #16
 800e75e:	46bd      	mov	sp, r7
 800e760:	bd80      	pop	{r7, pc}
 800e762:	bf00      	nop
 800e764:	20001718 	.word	0x20001718

0800e768 <LoRaMacIsBusy>:

bool LoRaMacIsBusy( void )
{
 800e768:	b480      	push	{r7}
 800e76a:	af00      	add	r7, sp, #0
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    if( LoRaMacRadioEvents.Events.RxProcessPending == 1 )
 800e76c:	4b0c      	ldr	r3, [pc, #48]	@ (800e7a0 <LoRaMacIsBusy+0x38>)
 800e76e:	781b      	ldrb	r3, [r3, #0]
 800e770:	f003 0301 	and.w	r3, r3, #1
 800e774:	b2db      	uxtb	r3, r3
 800e776:	2b00      	cmp	r3, #0
 800e778:	d001      	beq.n	800e77e <LoRaMacIsBusy+0x16>
    {
        return true;
 800e77a:	2301      	movs	r3, #1
 800e77c:	e00c      	b.n	800e798 <LoRaMacIsBusy+0x30>
    }
#endif /* LORAMAC_VERSION */

    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 800e77e:	4b09      	ldr	r3, [pc, #36]	@ (800e7a4 <LoRaMacIsBusy+0x3c>)
 800e780:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800e784:	2b00      	cmp	r3, #0
 800e786:	d106      	bne.n	800e796 <LoRaMacIsBusy+0x2e>
        ( MacCtx.AllowRequests == LORAMAC_REQUEST_HANDLING_ON ) )
 800e788:	4b06      	ldr	r3, [pc, #24]	@ (800e7a4 <LoRaMacIsBusy+0x3c>)
 800e78a:	f893 3496 	ldrb.w	r3, [r3, #1174]	@ 0x496
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 800e78e:	2b01      	cmp	r3, #1
 800e790:	d101      	bne.n	800e796 <LoRaMacIsBusy+0x2e>
    {
        return false;
 800e792:	2300      	movs	r3, #0
 800e794:	e000      	b.n	800e798 <LoRaMacIsBusy+0x30>
    }
    return true;
 800e796:	2301      	movs	r3, #1
}
 800e798:	4618      	mov	r0, r3
 800e79a:	46bd      	mov	sp, r7
 800e79c:	bc80      	pop	{r7}
 800e79e:	4770      	bx	lr
 800e7a0:	20001718 	.word	0x20001718
 800e7a4:	20000670 	.word	0x20000670

0800e7a8 <LoRaMacEnableRequests>:

static void LoRaMacEnableRequests( LoRaMacRequestHandling_t requestState )
{
 800e7a8:	b480      	push	{r7}
 800e7aa:	b083      	sub	sp, #12
 800e7ac:	af00      	add	r7, sp, #0
 800e7ae:	4603      	mov	r3, r0
 800e7b0:	71fb      	strb	r3, [r7, #7]
    MacCtx.AllowRequests = requestState;
 800e7b2:	4a04      	ldr	r2, [pc, #16]	@ (800e7c4 <LoRaMacEnableRequests+0x1c>)
 800e7b4:	79fb      	ldrb	r3, [r7, #7]
 800e7b6:	f882 3496 	strb.w	r3, [r2, #1174]	@ 0x496
}
 800e7ba:	bf00      	nop
 800e7bc:	370c      	adds	r7, #12
 800e7be:	46bd      	mov	sp, r7
 800e7c0:	bc80      	pop	{r7}
 800e7c2:	4770      	bx	lr
 800e7c4:	20000670 	.word	0x20000670

0800e7c8 <LoRaMacHandleRequestEvents>:

static void LoRaMacHandleRequestEvents( void )
{
 800e7c8:	b580      	push	{r7, lr}
 800e7ca:	b082      	sub	sp, #8
 800e7cc:	af00      	add	r7, sp, #0
    // Handle events
    LoRaMacFlags_t reqEvents = MacCtx.MacFlags;
 800e7ce:	4b2c      	ldr	r3, [pc, #176]	@ (800e880 <LoRaMacHandleRequestEvents+0xb8>)
 800e7d0:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800e7d4:	713b      	strb	r3, [r7, #4]

    if( MacCtx.MacState == LORAMAC_IDLE )
 800e7d6:	4b2a      	ldr	r3, [pc, #168]	@ (800e880 <LoRaMacHandleRequestEvents+0xb8>)
 800e7d8:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800e7dc:	2b00      	cmp	r3, #0
 800e7de:	d14a      	bne.n	800e876 <LoRaMacHandleRequestEvents+0xae>
    {
        // Update event bits
        if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 800e7e0:	4b27      	ldr	r3, [pc, #156]	@ (800e880 <LoRaMacHandleRequestEvents+0xb8>)
 800e7e2:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800e7e6:	f003 0301 	and.w	r3, r3, #1
 800e7ea:	b2db      	uxtb	r3, r3
 800e7ec:	2b00      	cmp	r3, #0
 800e7ee:	d006      	beq.n	800e7fe <LoRaMacHandleRequestEvents+0x36>
        {
            MacCtx.MacFlags.Bits.McpsReq = 0;
 800e7f0:	4a23      	ldr	r2, [pc, #140]	@ (800e880 <LoRaMacHandleRequestEvents+0xb8>)
 800e7f2:	f892 3495 	ldrb.w	r3, [r2, #1173]	@ 0x495
 800e7f6:	f36f 0300 	bfc	r3, #0, #1
 800e7fa:	f882 3495 	strb.w	r3, [r2, #1173]	@ 0x495
        }

        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800e7fe:	4b20      	ldr	r3, [pc, #128]	@ (800e880 <LoRaMacHandleRequestEvents+0xb8>)
 800e800:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800e804:	f003 0304 	and.w	r3, r3, #4
 800e808:	b2db      	uxtb	r3, r3
 800e80a:	2b00      	cmp	r3, #0
 800e80c:	d006      	beq.n	800e81c <LoRaMacHandleRequestEvents+0x54>
        {
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 800e80e:	4a1c      	ldr	r2, [pc, #112]	@ (800e880 <LoRaMacHandleRequestEvents+0xb8>)
 800e810:	f892 3495 	ldrb.w	r3, [r2, #1173]	@ 0x495
 800e814:	f36f 0382 	bfc	r3, #2, #1
 800e818:	f882 3495 	strb.w	r3, [r2, #1173]	@ 0x495
        }

        // Allow requests again
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 800e81c:	2001      	movs	r0, #1
 800e81e:	f7ff ffc3 	bl	800e7a8 <LoRaMacEnableRequests>

        // Handle callbacks
        if( reqEvents.Bits.McpsReq == 1 )
 800e822:	793b      	ldrb	r3, [r7, #4]
 800e824:	f003 0301 	and.w	r3, r3, #1
 800e828:	b2db      	uxtb	r3, r3
 800e82a:	2b00      	cmp	r3, #0
 800e82c:	d005      	beq.n	800e83a <LoRaMacHandleRequestEvents+0x72>
        {
            MacCtx.MacPrimitives->MacMcpsConfirm( &MacCtx.McpsConfirm );
 800e82e:	4b14      	ldr	r3, [pc, #80]	@ (800e880 <LoRaMacHandleRequestEvents+0xb8>)
 800e830:	f8d3 3344 	ldr.w	r3, [r3, #836]	@ 0x344
 800e834:	681b      	ldr	r3, [r3, #0]
 800e836:	4813      	ldr	r0, [pc, #76]	@ (800e884 <LoRaMacHandleRequestEvents+0xbc>)
 800e838:	4798      	blx	r3
        }

        if( reqEvents.Bits.MlmeReq == 1 )
 800e83a:	793b      	ldrb	r3, [r7, #4]
 800e83c:	f003 0304 	and.w	r3, r3, #4
 800e840:	b2db      	uxtb	r3, r3
 800e842:	2b00      	cmp	r3, #0
 800e844:	d00e      	beq.n	800e864 <LoRaMacHandleRequestEvents+0x9c>
        {
            LoRaMacConfirmQueueHandleCb( &MacCtx.MlmeConfirm );
 800e846:	4810      	ldr	r0, [pc, #64]	@ (800e888 <LoRaMacHandleRequestEvents+0xc0>)
 800e848:	f004 fc34 	bl	80130b4 <LoRaMacConfirmQueueHandleCb>
            if( LoRaMacConfirmQueueGetCnt( ) > 0 )
 800e84c:	f004 fc7e 	bl	801314c <LoRaMacConfirmQueueGetCnt>
 800e850:	4603      	mov	r3, r0
 800e852:	2b00      	cmp	r3, #0
 800e854:	d006      	beq.n	800e864 <LoRaMacHandleRequestEvents+0x9c>
            {
                MacCtx.MacFlags.Bits.MlmeReq = 1;
 800e856:	4a0a      	ldr	r2, [pc, #40]	@ (800e880 <LoRaMacHandleRequestEvents+0xb8>)
 800e858:	f892 3495 	ldrb.w	r3, [r2, #1173]	@ 0x495
 800e85c:	f043 0304 	orr.w	r3, r3, #4
 800e860:	f882 3495 	strb.w	r3, [r2, #1173]	@ 0x495
            }
        }

        // Start beaconing again
        LoRaMacClassBResumeBeaconing( );
 800e864:	f003 ff4a 	bl	80126fc <LoRaMacClassBResumeBeaconing>

        // Procedure done. Reset variables.
        MacCtx.MacFlags.Bits.MacDone = 0;
 800e868:	4a05      	ldr	r2, [pc, #20]	@ (800e880 <LoRaMacHandleRequestEvents+0xb8>)
 800e86a:	f892 3495 	ldrb.w	r3, [r2, #1173]	@ 0x495
 800e86e:	f36f 1345 	bfc	r3, #5, #1
 800e872:	f882 3495 	strb.w	r3, [r2, #1173]	@ 0x495
    }
}
 800e876:	bf00      	nop
 800e878:	3708      	adds	r7, #8
 800e87a:	46bd      	mov	sp, r7
 800e87c:	bd80      	pop	{r7, pc}
 800e87e:	bf00      	nop
 800e880:	20000670 	.word	0x20000670
 800e884:	20000ab4 	.word	0x20000ab4
 800e888:	20000ac8 	.word	0x20000ac8

0800e88c <LoRaMacHandleScheduleUplinkEvent>:

static void LoRaMacHandleScheduleUplinkEvent( void )
{
 800e88c:	b580      	push	{r7, lr}
 800e88e:	b082      	sub	sp, #8
 800e890:	af00      	add	r7, sp, #0
    // Handle events
    if( MacCtx.MacState == LORAMAC_IDLE )
 800e892:	4b07      	ldr	r3, [pc, #28]	@ (800e8b0 <LoRaMacHandleScheduleUplinkEvent+0x24>)
 800e894:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800e898:	2b00      	cmp	r3, #0
 800e89a:	d105      	bne.n	800e8a8 <LoRaMacHandleScheduleUplinkEvent+0x1c>
    {
        // Verify if sticky MAC commands are pending or not
        bool isStickyMacCommandPending = false;
 800e89c:	2300      	movs	r3, #0
 800e89e:	71fb      	strb	r3, [r7, #7]
        LoRaMacCommandsStickyCmdsPending( &isStickyMacCommandPending );
 800e8a0:	1dfb      	adds	r3, r7, #7
 800e8a2:	4618      	mov	r0, r3
 800e8a4:	f004 f9ec 	bl	8012c80 <LoRaMacCommandsStickyCmdsPending>
        {// Setup MLME indication
            /* ST_WORKAROUND: remove unnecessary mlme operation to prevent uplinks burst */
            //SetMlmeScheduleUplinkIndication( );
        }
    }
}
 800e8a8:	bf00      	nop
 800e8aa:	3708      	adds	r7, #8
 800e8ac:	46bd      	mov	sp, r7
 800e8ae:	bd80      	pop	{r7, pc}
 800e8b0:	20000670 	.word	0x20000670

0800e8b4 <LoRaMacHandleIndicationEvents>:

static void LoRaMacHandleIndicationEvents( void )
{
 800e8b4:	b580      	push	{r7, lr}
 800e8b6:	af00      	add	r7, sp, #0
    // Handle MLME indication
    if( MacCtx.MacFlags.Bits.MlmeInd == 1 )
 800e8b8:	4b16      	ldr	r3, [pc, #88]	@ (800e914 <LoRaMacHandleIndicationEvents+0x60>)
 800e8ba:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800e8be:	f003 0308 	and.w	r3, r3, #8
 800e8c2:	b2db      	uxtb	r3, r3
 800e8c4:	2b00      	cmp	r3, #0
 800e8c6:	d00d      	beq.n	800e8e4 <LoRaMacHandleIndicationEvents+0x30>
    {
        MacCtx.MacFlags.Bits.MlmeInd = 0;
 800e8c8:	4a12      	ldr	r2, [pc, #72]	@ (800e914 <LoRaMacHandleIndicationEvents+0x60>)
 800e8ca:	f892 3495 	ldrb.w	r3, [r2, #1173]	@ 0x495
 800e8ce:	f36f 03c3 	bfc	r3, #3, #1
 800e8d2:	f882 3495 	strb.w	r3, [r2, #1173]	@ 0x495
        MacCtx.MacPrimitives->MacMlmeIndication( &MacCtx.MlmeIndication, &MacCtx.RxStatus );
 800e8d6:	4b0f      	ldr	r3, [pc, #60]	@ (800e914 <LoRaMacHandleIndicationEvents+0x60>)
 800e8d8:	f8d3 3344 	ldr.w	r3, [r3, #836]	@ 0x344
 800e8dc:	68db      	ldr	r3, [r3, #12]
 800e8de:	490e      	ldr	r1, [pc, #56]	@ (800e918 <LoRaMacHandleIndicationEvents+0x64>)
 800e8e0:	480e      	ldr	r0, [pc, #56]	@ (800e91c <LoRaMacHandleIndicationEvents+0x68>)
 800e8e2:	4798      	blx	r3
    }
    */
    /*ST_WORKAROUND_END */

    // Handle MCPS indication
    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 800e8e4:	4b0b      	ldr	r3, [pc, #44]	@ (800e914 <LoRaMacHandleIndicationEvents+0x60>)
 800e8e6:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800e8ea:	f003 0302 	and.w	r3, r3, #2
 800e8ee:	b2db      	uxtb	r3, r3
 800e8f0:	2b00      	cmp	r3, #0
 800e8f2:	d00d      	beq.n	800e910 <LoRaMacHandleIndicationEvents+0x5c>
    {
        MacCtx.MacFlags.Bits.McpsInd = 0;
 800e8f4:	4a07      	ldr	r2, [pc, #28]	@ (800e914 <LoRaMacHandleIndicationEvents+0x60>)
 800e8f6:	f892 3495 	ldrb.w	r3, [r2, #1173]	@ 0x495
 800e8fa:	f36f 0341 	bfc	r3, #1, #1
 800e8fe:	f882 3495 	strb.w	r3, [r2, #1173]	@ 0x495
        MacCtx.MacPrimitives->MacMcpsIndication( &MacCtx.McpsIndication, &MacCtx.RxStatus );
 800e902:	4b04      	ldr	r3, [pc, #16]	@ (800e914 <LoRaMacHandleIndicationEvents+0x60>)
 800e904:	f8d3 3344 	ldr.w	r3, [r3, #836]	@ 0x344
 800e908:	685b      	ldr	r3, [r3, #4]
 800e90a:	4903      	ldr	r1, [pc, #12]	@ (800e918 <LoRaMacHandleIndicationEvents+0x64>)
 800e90c:	4804      	ldr	r0, [pc, #16]	@ (800e920 <LoRaMacHandleIndicationEvents+0x6c>)
 800e90e:	4798      	blx	r3
    }
}
 800e910:	bf00      	nop
 800e912:	bd80      	pop	{r7, pc}
 800e914:	20000670 	.word	0x20000670
 800e918:	20000b00 	.word	0x20000b00
 800e91c:	20000adc 	.word	0x20000adc
 800e920:	20000a94 	.word	0x20000a94

0800e924 <LoRaMacHandleMcpsRequest>:

static void LoRaMacHandleMcpsRequest( void )
{
 800e924:	b580      	push	{r7, lr}
 800e926:	b082      	sub	sp, #8
 800e928:	af00      	add	r7, sp, #0
    // Handle MCPS uplinks
    if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 800e92a:	4b2a      	ldr	r3, [pc, #168]	@ (800e9d4 <LoRaMacHandleMcpsRequest+0xb0>)
 800e92c:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800e930:	f003 0301 	and.w	r3, r3, #1
 800e934:	b2db      	uxtb	r3, r3
 800e936:	2b00      	cmp	r3, #0
 800e938:	d048      	beq.n	800e9cc <LoRaMacHandleMcpsRequest+0xa8>
    {
        bool stopRetransmission = false;
 800e93a:	2300      	movs	r3, #0
 800e93c:	71fb      	strb	r3, [r7, #7]
        bool waitForRetransmission = false;
 800e93e:	2300      	movs	r3, #0
 800e940:	71bb      	strb	r3, [r7, #6]

        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 800e942:	4b24      	ldr	r3, [pc, #144]	@ (800e9d4 <LoRaMacHandleMcpsRequest+0xb0>)
 800e944:	f893 3444 	ldrb.w	r3, [r3, #1092]	@ 0x444
 800e948:	2b00      	cmp	r3, #0
 800e94a:	d004      	beq.n	800e956 <LoRaMacHandleMcpsRequest+0x32>
            ( MacCtx.McpsConfirm.McpsRequest == MCPS_PROPRIETARY ) )
 800e94c:	4b21      	ldr	r3, [pc, #132]	@ (800e9d4 <LoRaMacHandleMcpsRequest+0xb0>)
 800e94e:	f893 3444 	ldrb.w	r3, [r3, #1092]	@ 0x444
        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 800e952:	2b03      	cmp	r3, #3
 800e954:	d104      	bne.n	800e960 <LoRaMacHandleMcpsRequest+0x3c>
        {
            stopRetransmission = CheckRetransUnconfirmedUplink( );
 800e956:	f002 f8f9 	bl	8010b4c <CheckRetransUnconfirmedUplink>
 800e95a:	4603      	mov	r3, r0
 800e95c:	71fb      	strb	r3, [r7, #7]
 800e95e:	e010      	b.n	800e982 <LoRaMacHandleMcpsRequest+0x5e>
        }
        else if( MacCtx.McpsConfirm.McpsRequest == MCPS_CONFIRMED )
 800e960:	4b1c      	ldr	r3, [pc, #112]	@ (800e9d4 <LoRaMacHandleMcpsRequest+0xb0>)
 800e962:	f893 3444 	ldrb.w	r3, [r3, #1092]	@ 0x444
 800e966:	2b01      	cmp	r3, #1
 800e968:	d10b      	bne.n	800e982 <LoRaMacHandleMcpsRequest+0x5e>
            else
            {
                waitForRetransmission = true;
            }
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
            if( MacCtx.RetransmitTimeoutRetry == true )
 800e96a:	4b1a      	ldr	r3, [pc, #104]	@ (800e9d4 <LoRaMacHandleMcpsRequest+0xb0>)
 800e96c:	f893 341d 	ldrb.w	r3, [r3, #1053]	@ 0x41d
 800e970:	2b00      	cmp	r3, #0
 800e972:	d004      	beq.n	800e97e <LoRaMacHandleMcpsRequest+0x5a>
            {
                stopRetransmission = CheckRetransConfirmedUplink( );
 800e974:	f002 f916 	bl	8010ba4 <CheckRetransConfirmedUplink>
 800e978:	4603      	mov	r3, r0
 800e97a:	71fb      	strb	r3, [r7, #7]
 800e97c:	e001      	b.n	800e982 <LoRaMacHandleMcpsRequest+0x5e>
            }
            else
            {
                waitForRetransmission = true;
 800e97e:	2301      	movs	r3, #1
 800e980:	71bb      	strb	r3, [r7, #6]
            }
#endif /* LORAMAC_VERSION */
        }

        if( stopRetransmission == true )
 800e982:	79fb      	ldrb	r3, [r7, #7]
 800e984:	2b00      	cmp	r3, #0
 800e986:	d00d      	beq.n	800e9a4 <LoRaMacHandleMcpsRequest+0x80>
        {// Stop retransmission
            TimerStop( &MacCtx.TxDelayedTimer );
 800e988:	4813      	ldr	r0, [pc, #76]	@ (800e9d8 <LoRaMacHandleMcpsRequest+0xb4>)
 800e98a:	f00c f9ad 	bl	801ace8 <UTIL_TIMER_Stop>
            MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 800e98e:	4b11      	ldr	r3, [pc, #68]	@ (800e9d4 <LoRaMacHandleMcpsRequest+0xb0>)
 800e990:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800e994:	f023 0320 	bic.w	r3, r3, #32
 800e998:	4a0e      	ldr	r2, [pc, #56]	@ (800e9d4 <LoRaMacHandleMcpsRequest+0xb0>)
 800e99a:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
            StopRetransmission( );
 800e99e:	f002 f93b 	bl	8010c18 <StopRetransmission>
#endif /* LORAMAC_VERSION */
            // Sends the same frame again
            OnTxDelayedTimerEvent( NULL );
        }
    }
}
 800e9a2:	e013      	b.n	800e9cc <LoRaMacHandleMcpsRequest+0xa8>
        else if( waitForRetransmission == false )
 800e9a4:	79bb      	ldrb	r3, [r7, #6]
 800e9a6:	f083 0301 	eor.w	r3, r3, #1
 800e9aa:	b2db      	uxtb	r3, r3
 800e9ac:	2b00      	cmp	r3, #0
 800e9ae:	d00d      	beq.n	800e9cc <LoRaMacHandleMcpsRequest+0xa8>
            MacCtx.MacFlags.Bits.MacDone = 0;
 800e9b0:	4a08      	ldr	r2, [pc, #32]	@ (800e9d4 <LoRaMacHandleMcpsRequest+0xb0>)
 800e9b2:	f892 3495 	ldrb.w	r3, [r2, #1173]	@ 0x495
 800e9b6:	f36f 1345 	bfc	r3, #5, #1
 800e9ba:	f882 3495 	strb.w	r3, [r2, #1173]	@ 0x495
            MacCtx.RetransmitTimeoutRetry = false;
 800e9be:	4b05      	ldr	r3, [pc, #20]	@ (800e9d4 <LoRaMacHandleMcpsRequest+0xb0>)
 800e9c0:	2200      	movs	r2, #0
 800e9c2:	f883 241d 	strb.w	r2, [r3, #1053]	@ 0x41d
            OnTxDelayedTimerEvent( NULL );
 800e9c6:	2000      	movs	r0, #0
 800e9c8:	f000 f9c8 	bl	800ed5c <OnTxDelayedTimerEvent>
}
 800e9cc:	bf00      	nop
 800e9ce:	3708      	adds	r7, #8
 800e9d0:	46bd      	mov	sp, r7
 800e9d2:	bd80      	pop	{r7, pc}
 800e9d4:	20000670 	.word	0x20000670
 800e9d8:	200009d8 	.word	0x200009d8

0800e9dc <LoRaMacHandleMlmeRequest>:

static void LoRaMacHandleMlmeRequest( void )
{
 800e9dc:	b580      	push	{r7, lr}
 800e9de:	af00      	add	r7, sp, #0
    // Handle join request
    if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800e9e0:	4b18      	ldr	r3, [pc, #96]	@ (800ea44 <LoRaMacHandleMlmeRequest+0x68>)
 800e9e2:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800e9e6:	f003 0304 	and.w	r3, r3, #4
 800e9ea:	b2db      	uxtb	r3, r3
 800e9ec:	2b00      	cmp	r3, #0
 800e9ee:	d026      	beq.n	800ea3e <LoRaMacHandleMlmeRequest+0x62>
    {
        if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800e9f0:	2001      	movs	r0, #1
 800e9f2:	f004 fb45 	bl	8013080 <LoRaMacConfirmQueueIsCmdActive>
 800e9f6:	4603      	mov	r3, r0
 800e9f8:	2b00      	cmp	r3, #0
 800e9fa:	d012      	beq.n	800ea22 <LoRaMacHandleMlmeRequest+0x46>
        {
            if( LoRaMacConfirmQueueGetStatus( MLME_JOIN ) == LORAMAC_EVENT_INFO_STATUS_OK )
 800e9fc:	2001      	movs	r0, #1
 800e9fe:	f004 fae1 	bl	8012fc4 <LoRaMacConfirmQueueGetStatus>
 800ea02:	4603      	mov	r3, r0
 800ea04:	2b00      	cmp	r3, #0
 800ea06:	d103      	bne.n	800ea10 <LoRaMacHandleMlmeRequest+0x34>
            {// Node joined successfully
                MacCtx.ChannelsNbTransCounter = 0;
 800ea08:	4b0e      	ldr	r3, [pc, #56]	@ (800ea44 <LoRaMacHandleMlmeRequest+0x68>)
 800ea0a:	2200      	movs	r2, #0
 800ea0c:	f883 241c 	strb.w	r2, [r3, #1052]	@ 0x41c
            }
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800ea10:	4b0c      	ldr	r3, [pc, #48]	@ (800ea44 <LoRaMacHandleMlmeRequest+0x68>)
 800ea12:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800ea16:	f023 0302 	bic.w	r3, r3, #2
 800ea1a:	4a0a      	ldr	r2, [pc, #40]	@ (800ea44 <LoRaMacHandleMlmeRequest+0x68>)
 800ea1c:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
        {
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
        }
#endif /* LORAMAC_VERSION */
    }
}
 800ea20:	e00d      	b.n	800ea3e <LoRaMacHandleMlmeRequest+0x62>
        else if( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true )
 800ea22:	2005      	movs	r0, #5
 800ea24:	f004 fb2c 	bl	8013080 <LoRaMacConfirmQueueIsCmdActive>
 800ea28:	4603      	mov	r3, r0
 800ea2a:	2b00      	cmp	r3, #0
 800ea2c:	d007      	beq.n	800ea3e <LoRaMacHandleMlmeRequest+0x62>
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800ea2e:	4b05      	ldr	r3, [pc, #20]	@ (800ea44 <LoRaMacHandleMlmeRequest+0x68>)
 800ea30:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800ea34:	f023 0302 	bic.w	r3, r3, #2
 800ea38:	4a02      	ldr	r2, [pc, #8]	@ (800ea44 <LoRaMacHandleMlmeRequest+0x68>)
 800ea3a:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
}
 800ea3e:	bf00      	nop
 800ea40:	bd80      	pop	{r7, pc}
 800ea42:	bf00      	nop
 800ea44:	20000670 	.word	0x20000670

0800ea48 <LoRaMacCheckForBeaconAcquisition>:

static uint8_t LoRaMacCheckForBeaconAcquisition( void )
{
 800ea48:	b580      	push	{r7, lr}
 800ea4a:	af00      	add	r7, sp, #0
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 800ea4c:	200b      	movs	r0, #11
 800ea4e:	f004 fb17 	bl	8013080 <LoRaMacConfirmQueueIsCmdActive>
 800ea52:	4603      	mov	r3, r0
 800ea54:	2b00      	cmp	r3, #0
 800ea56:	d019      	beq.n	800ea8c <LoRaMacCheckForBeaconAcquisition+0x44>
        ( MacCtx.MacFlags.Bits.McpsReq == 0 ) )
 800ea58:	4b0e      	ldr	r3, [pc, #56]	@ (800ea94 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 800ea5a:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800ea5e:	f003 0301 	and.w	r3, r3, #1
 800ea62:	b2db      	uxtb	r3, r3
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 800ea64:	2b00      	cmp	r3, #0
 800ea66:	d111      	bne.n	800ea8c <LoRaMacCheckForBeaconAcquisition+0x44>
    {
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800ea68:	4b0a      	ldr	r3, [pc, #40]	@ (800ea94 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 800ea6a:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800ea6e:	f003 0304 	and.w	r3, r3, #4
 800ea72:	b2db      	uxtb	r3, r3
 800ea74:	2b00      	cmp	r3, #0
 800ea76:	d009      	beq.n	800ea8c <LoRaMacCheckForBeaconAcquisition+0x44>
        {
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800ea78:	4b06      	ldr	r3, [pc, #24]	@ (800ea94 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 800ea7a:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800ea7e:	f023 0302 	bic.w	r3, r3, #2
 800ea82:	4a04      	ldr	r2, [pc, #16]	@ (800ea94 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 800ea84:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
            return 0x01;
 800ea88:	2301      	movs	r3, #1
 800ea8a:	e000      	b.n	800ea8e <LoRaMacCheckForBeaconAcquisition+0x46>
        }
    }
    return 0x00;
 800ea8c:	2300      	movs	r3, #0
}
 800ea8e:	4618      	mov	r0, r3
 800ea90:	bd80      	pop	{r7, pc}
 800ea92:	bf00      	nop
 800ea94:	20000670 	.word	0x20000670

0800ea98 <CheckForMinimumAbpDatarate>:

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
static bool CheckForMinimumAbpDatarate( bool adr, ActivationType_t activation, bool datarateChanged )
{
 800ea98:	b480      	push	{r7}
 800ea9a:	b083      	sub	sp, #12
 800ea9c:	af00      	add	r7, sp, #0
 800ea9e:	4603      	mov	r3, r0
 800eaa0:	71fb      	strb	r3, [r7, #7]
 800eaa2:	460b      	mov	r3, r1
 800eaa4:	71bb      	strb	r3, [r7, #6]
 800eaa6:	4613      	mov	r3, r2
 800eaa8:	717b      	strb	r3, [r7, #5]
    if( ( adr == true ) &&
 800eaaa:	79fb      	ldrb	r3, [r7, #7]
 800eaac:	2b00      	cmp	r3, #0
 800eaae:	d00a      	beq.n	800eac6 <CheckForMinimumAbpDatarate+0x2e>
 800eab0:	79bb      	ldrb	r3, [r7, #6]
 800eab2:	2b01      	cmp	r3, #1
 800eab4:	d107      	bne.n	800eac6 <CheckForMinimumAbpDatarate+0x2e>
        ( activation == ACTIVATION_TYPE_ABP ) &&
        ( datarateChanged == false ) )
 800eab6:	797b      	ldrb	r3, [r7, #5]
 800eab8:	f083 0301 	eor.w	r3, r3, #1
 800eabc:	b2db      	uxtb	r3, r3
        ( activation == ACTIVATION_TYPE_ABP ) &&
 800eabe:	2b00      	cmp	r3, #0
 800eac0:	d001      	beq.n	800eac6 <CheckForMinimumAbpDatarate+0x2e>
    {
        return true;
 800eac2:	2301      	movs	r3, #1
 800eac4:	e000      	b.n	800eac8 <CheckForMinimumAbpDatarate+0x30>
    }
    return false;
 800eac6:	2300      	movs	r3, #0
}
 800eac8:	4618      	mov	r0, r3
 800eaca:	370c      	adds	r7, #12
 800eacc:	46bd      	mov	sp, r7
 800eace:	bc80      	pop	{r7}
 800ead0:	4770      	bx	lr
	...

0800ead4 <LoRaMacCheckForRxAbort>:
#endif /* LORAMAC_VERSION */

static void LoRaMacCheckForRxAbort( void )
{
 800ead4:	b480      	push	{r7}
 800ead6:	af00      	add	r7, sp, #0
    // A error occurs during receiving
    if( ( MacCtx.MacState & LORAMAC_RX_ABORT ) == LORAMAC_RX_ABORT )
 800ead8:	4b0d      	ldr	r3, [pc, #52]	@ (800eb10 <LoRaMacCheckForRxAbort+0x3c>)
 800eada:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800eade:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800eae2:	2b00      	cmp	r3, #0
 800eae4:	d00f      	beq.n	800eb06 <LoRaMacCheckForRxAbort+0x32>
    {
        MacCtx.MacState &= ~LORAMAC_RX_ABORT;
 800eae6:	4b0a      	ldr	r3, [pc, #40]	@ (800eb10 <LoRaMacCheckForRxAbort+0x3c>)
 800eae8:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800eaec:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800eaf0:	4a07      	ldr	r2, [pc, #28]	@ (800eb10 <LoRaMacCheckForRxAbort+0x3c>)
 800eaf2:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
        MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800eaf6:	4b06      	ldr	r3, [pc, #24]	@ (800eb10 <LoRaMacCheckForRxAbort+0x3c>)
 800eaf8:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800eafc:	f023 0302 	bic.w	r3, r3, #2
 800eb00:	4a03      	ldr	r2, [pc, #12]	@ (800eb10 <LoRaMacCheckForRxAbort+0x3c>)
 800eb02:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
    }
}
 800eb06:	bf00      	nop
 800eb08:	46bd      	mov	sp, r7
 800eb0a:	bc80      	pop	{r7}
 800eb0c:	4770      	bx	lr
 800eb0e:	bf00      	nop
 800eb10:	20000670 	.word	0x20000670

0800eb14 <LoRaMacHandleNvm>:

static void LoRaMacHandleNvm( LoRaMacNvmData_t* nvmData )
{
 800eb14:	b580      	push	{r7, lr}
 800eb16:	b084      	sub	sp, #16
 800eb18:	af00      	add	r7, sp, #0
 800eb1a:	6078      	str	r0, [r7, #4]
    uint32_t crc = 0;
 800eb1c:	2300      	movs	r3, #0
 800eb1e:	60bb      	str	r3, [r7, #8]
    uint16_t notifyFlags = LORAMAC_NVM_NOTIFY_FLAG_NONE;
 800eb20:	2300      	movs	r3, #0
 800eb22:	81fb      	strh	r3, [r7, #14]

    if( MacCtx.MacState != LORAMAC_IDLE )
 800eb24:	4b50      	ldr	r3, [pc, #320]	@ (800ec68 <LoRaMacHandleNvm+0x154>)
 800eb26:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800eb2a:	2b00      	cmp	r3, #0
 800eb2c:	f040 8098 	bne.w	800ec60 <LoRaMacHandleNvm+0x14c>
    {
        return;
    }

    // Crypto
    crc = Crc32( ( uint8_t* ) &nvmData->Crypto, sizeof( nvmData->Crypto ) -
 800eb30:	687b      	ldr	r3, [r7, #4]
 800eb32:	2124      	movs	r1, #36	@ 0x24
 800eb34:	4618      	mov	r0, r3
 800eb36:	f007 ffe7 	bl	8016b08 <Crc32>
 800eb3a:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->Crypto.Crc32 ) );
    if( crc != nvmData->Crypto.Crc32 )
 800eb3c:	687b      	ldr	r3, [r7, #4]
 800eb3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eb40:	68ba      	ldr	r2, [r7, #8]
 800eb42:	429a      	cmp	r2, r3
 800eb44:	d006      	beq.n	800eb54 <LoRaMacHandleNvm+0x40>
    {
        nvmData->Crypto.Crc32 = crc;
 800eb46:	687b      	ldr	r3, [r7, #4]
 800eb48:	68ba      	ldr	r2, [r7, #8]
 800eb4a:	625a      	str	r2, [r3, #36]	@ 0x24
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CRYPTO;
 800eb4c:	89fb      	ldrh	r3, [r7, #14]
 800eb4e:	f043 0301 	orr.w	r3, r3, #1
 800eb52:	81fb      	strh	r3, [r7, #14]
    }

    // MacGroup1
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup1, sizeof( nvmData->MacGroup1 ) -
 800eb54:	687b      	ldr	r3, [r7, #4]
 800eb56:	3328      	adds	r3, #40	@ 0x28
 800eb58:	2114      	movs	r1, #20
 800eb5a:	4618      	mov	r0, r3
 800eb5c:	f007 ffd4 	bl	8016b08 <Crc32>
 800eb60:	60b8      	str	r0, [r7, #8]
                                                   sizeof( nvmData->MacGroup1.Crc32 ) );
    if( crc != nvmData->MacGroup1.Crc32 )
 800eb62:	687b      	ldr	r3, [r7, #4]
 800eb64:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800eb66:	68ba      	ldr	r2, [r7, #8]
 800eb68:	429a      	cmp	r2, r3
 800eb6a:	d006      	beq.n	800eb7a <LoRaMacHandleNvm+0x66>
    {
        nvmData->MacGroup1.Crc32 = crc;
 800eb6c:	687b      	ldr	r3, [r7, #4]
 800eb6e:	68ba      	ldr	r2, [r7, #8]
 800eb70:	63da      	str	r2, [r3, #60]	@ 0x3c
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP1;
 800eb72:	89fb      	ldrh	r3, [r7, #14]
 800eb74:	f043 0302 	orr.w	r3, r3, #2
 800eb78:	81fb      	strh	r3, [r7, #14]
    }

    // MacGroup2
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup2, sizeof( nvmData->MacGroup2 ) -
 800eb7a:	687b      	ldr	r3, [r7, #4]
 800eb7c:	3340      	adds	r3, #64	@ 0x40
 800eb7e:	21e0      	movs	r1, #224	@ 0xe0
 800eb80:	4618      	mov	r0, r3
 800eb82:	f007 ffc1 	bl	8016b08 <Crc32>
 800eb86:	60b8      	str	r0, [r7, #8]
                                                   sizeof( nvmData->MacGroup2.Crc32 ) );
    if( crc != nvmData->MacGroup2.Crc32 )
 800eb88:	687b      	ldr	r3, [r7, #4]
 800eb8a:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 800eb8e:	68ba      	ldr	r2, [r7, #8]
 800eb90:	429a      	cmp	r2, r3
 800eb92:	d007      	beq.n	800eba4 <LoRaMacHandleNvm+0x90>
    {
        nvmData->MacGroup2.Crc32 = crc;
 800eb94:	687b      	ldr	r3, [r7, #4]
 800eb96:	68ba      	ldr	r2, [r7, #8]
 800eb98:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP2;
 800eb9c:	89fb      	ldrh	r3, [r7, #14]
 800eb9e:	f043 0304 	orr.w	r3, r3, #4
 800eba2:	81fb      	strh	r3, [r7, #14]
    }

    // Secure Element
    crc = Crc32( ( uint8_t* ) &nvmData->SecureElement, sizeof( nvmData->SecureElement ) -
 800eba4:	687b      	ldr	r3, [r7, #4]
 800eba6:	f503 7392 	add.w	r3, r3, #292	@ 0x124
 800ebaa:	21bc      	movs	r1, #188	@ 0xbc
 800ebac:	4618      	mov	r0, r3
 800ebae:	f007 ffab 	bl	8016b08 <Crc32>
 800ebb2:	60b8      	str	r0, [r7, #8]
                                                       sizeof( nvmData->SecureElement.Crc32 ) );
    if( crc != nvmData->SecureElement.Crc32 )
 800ebb4:	687b      	ldr	r3, [r7, #4]
 800ebb6:	f8d3 31e0 	ldr.w	r3, [r3, #480]	@ 0x1e0
 800ebba:	68ba      	ldr	r2, [r7, #8]
 800ebbc:	429a      	cmp	r2, r3
 800ebbe:	d007      	beq.n	800ebd0 <LoRaMacHandleNvm+0xbc>
    {
        nvmData->SecureElement.Crc32 = crc;
 800ebc0:	687b      	ldr	r3, [r7, #4]
 800ebc2:	68ba      	ldr	r2, [r7, #8]
 800ebc4:	f8c3 21e0 	str.w	r2, [r3, #480]	@ 0x1e0
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_SECURE_ELEMENT;
 800ebc8:	89fb      	ldrh	r3, [r7, #14]
 800ebca:	f043 0308 	orr.w	r3, r3, #8
 800ebce:	81fb      	strh	r3, [r7, #14]
    }

    // Region
    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup1, sizeof( nvmData->RegionGroup1 ) -
 800ebd0:	687b      	ldr	r3, [r7, #4]
 800ebd2:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800ebd6:	2100      	movs	r1, #0
 800ebd8:	4618      	mov	r0, r3
 800ebda:	f007 ff95 	bl	8016b08 <Crc32>
 800ebde:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->RegionGroup1.Crc32 ) );
    if( crc != nvmData->RegionGroup1.Crc32 )
 800ebe0:	687b      	ldr	r3, [r7, #4]
 800ebe2:	f8d3 31e4 	ldr.w	r3, [r3, #484]	@ 0x1e4
 800ebe6:	68ba      	ldr	r2, [r7, #8]
 800ebe8:	429a      	cmp	r2, r3
 800ebea:	d007      	beq.n	800ebfc <LoRaMacHandleNvm+0xe8>
    {
        nvmData->RegionGroup1.Crc32 = crc;
 800ebec:	687b      	ldr	r3, [r7, #4]
 800ebee:	68ba      	ldr	r2, [r7, #8]
 800ebf0:	f8c3 21e4 	str.w	r2, [r3, #484]	@ 0x1e4
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP1;
 800ebf4:	89fb      	ldrh	r3, [r7, #14]
 800ebf6:	f043 0310 	orr.w	r3, r3, #16
 800ebfa:	81fb      	strh	r3, [r7, #14]
    }

    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup2, sizeof( nvmData->RegionGroup2 ) -
 800ebfc:	687b      	ldr	r3, [r7, #4]
 800ebfe:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800ec02:	f44f 715e 	mov.w	r1, #888	@ 0x378
 800ec06:	4618      	mov	r0, r3
 800ec08:	f007 ff7e 	bl	8016b08 <Crc32>
 800ec0c:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->RegionGroup2.Crc32 ) );
    if( crc != nvmData->RegionGroup2.Crc32 )
 800ec0e:	687b      	ldr	r3, [r7, #4]
 800ec10:	f8d3 3560 	ldr.w	r3, [r3, #1376]	@ 0x560
 800ec14:	68ba      	ldr	r2, [r7, #8]
 800ec16:	429a      	cmp	r2, r3
 800ec18:	d007      	beq.n	800ec2a <LoRaMacHandleNvm+0x116>
    {
        nvmData->RegionGroup2.Crc32 = crc;
 800ec1a:	687b      	ldr	r3, [r7, #4]
 800ec1c:	68ba      	ldr	r2, [r7, #8]
 800ec1e:	f8c3 2560 	str.w	r2, [r3, #1376]	@ 0x560
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP2;
 800ec22:	89fb      	ldrh	r3, [r7, #14]
 800ec24:	f043 0320 	orr.w	r3, r3, #32
 800ec28:	81fb      	strh	r3, [r7, #14]
    }

    // ClassB
    crc = Crc32( ( uint8_t* ) &nvmData->ClassB, sizeof( nvmData->ClassB ) -
 800ec2a:	687b      	ldr	r3, [r7, #4]
 800ec2c:	f203 5364 	addw	r3, r3, #1380	@ 0x564
 800ec30:	2114      	movs	r1, #20
 800ec32:	4618      	mov	r0, r3
 800ec34:	f007 ff68 	bl	8016b08 <Crc32>
 800ec38:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->ClassB.Crc32 ) );
    if( crc != nvmData->ClassB.Crc32 )
 800ec3a:	687b      	ldr	r3, [r7, #4]
 800ec3c:	f8d3 3578 	ldr.w	r3, [r3, #1400]	@ 0x578
 800ec40:	68ba      	ldr	r2, [r7, #8]
 800ec42:	429a      	cmp	r2, r3
 800ec44:	d007      	beq.n	800ec56 <LoRaMacHandleNvm+0x142>
    {
        nvmData->ClassB.Crc32 = crc;
 800ec46:	687b      	ldr	r3, [r7, #4]
 800ec48:	68ba      	ldr	r2, [r7, #8]
 800ec4a:	f8c3 2578 	str.w	r2, [r3, #1400]	@ 0x578
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CLASS_B;
 800ec4e:	89fb      	ldrh	r3, [r7, #14]
 800ec50:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ec54:	81fb      	strh	r3, [r7, #14]
    }

    CallNvmDataChangeCallback( notifyFlags );
 800ec56:	89fb      	ldrh	r3, [r7, #14]
 800ec58:	4618      	mov	r0, r3
 800ec5a:	f002 f819 	bl	8010c90 <CallNvmDataChangeCallback>
 800ec5e:	e000      	b.n	800ec62 <LoRaMacHandleNvm+0x14e>
        return;
 800ec60:	bf00      	nop
}
 800ec62:	3710      	adds	r7, #16
 800ec64:	46bd      	mov	sp, r7
 800ec66:	bd80      	pop	{r7, pc}
 800ec68:	20000670 	.word	0x20000670

0800ec6c <LoRaMacHandleResponseTimeout>:

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
static bool LoRaMacHandleResponseTimeout( TimerTime_t timeoutInMs, TimerTime_t startTimeInMs )
{
 800ec6c:	b580      	push	{r7, lr}
 800ec6e:	b084      	sub	sp, #16
 800ec70:	af00      	add	r7, sp, #0
 800ec72:	6078      	str	r0, [r7, #4]
 800ec74:	6039      	str	r1, [r7, #0]
    if( startTimeInMs != 0 )
 800ec76:	683b      	ldr	r3, [r7, #0]
 800ec78:	2b00      	cmp	r3, #0
 800ec7a:	d00d      	beq.n	800ec98 <LoRaMacHandleResponseTimeout+0x2c>
    {
        TimerTime_t elapsedTime = TimerGetElapsedTime( startTimeInMs );
 800ec7c:	6838      	ldr	r0, [r7, #0]
 800ec7e:	f00c f95f 	bl	801af40 <UTIL_TIMER_GetElapsedTime>
 800ec82:	60f8      	str	r0, [r7, #12]
        if( elapsedTime > timeoutInMs )
 800ec84:	68fa      	ldr	r2, [r7, #12]
 800ec86:	687b      	ldr	r3, [r7, #4]
 800ec88:	429a      	cmp	r2, r3
 800ec8a:	d905      	bls.n	800ec98 <LoRaMacHandleResponseTimeout+0x2c>
        {
            Nvm.MacGroup1.SrvAckRequested = false;
 800ec8c:	4b05      	ldr	r3, [pc, #20]	@ (800eca4 <LoRaMacHandleResponseTimeout+0x38>)
 800ec8e:	2200      	movs	r2, #0
 800ec90:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
            return true;
 800ec94:	2301      	movs	r3, #1
 800ec96:	e000      	b.n	800ec9a <LoRaMacHandleResponseTimeout+0x2e>
        }
    }
    return false;
 800ec98:	2300      	movs	r3, #0
}
 800ec9a:	4618      	mov	r0, r3
 800ec9c:	3710      	adds	r7, #16
 800ec9e:	46bd      	mov	sp, r7
 800eca0:	bd80      	pop	{r7, pc}
 800eca2:	bf00      	nop
 800eca4:	20000b90 	.word	0x20000b90

0800eca8 <LoRaMacProcess>:
#endif /* LORAMAC_VERSION */

void LoRaMacProcess( void )
{
 800eca8:	b580      	push	{r7, lr}
 800ecaa:	b082      	sub	sp, #8
 800ecac:	af00      	add	r7, sp, #0
    uint8_t noTx = false;
 800ecae:	2300      	movs	r3, #0
 800ecb0:	71fb      	strb	r3, [r7, #7]

    LoRaMacHandleIrqEvents( );
 800ecb2:	f7ff fd11 	bl	800e6d8 <LoRaMacHandleIrqEvents>
    LoRaMacClassBProcess( );
 800ecb6:	f003 fd90 	bl	80127da <LoRaMacClassBProcess>

    // MAC proceeded a state and is ready to check
    if( MacCtx.MacFlags.Bits.MacDone == 1 )
 800ecba:	4b26      	ldr	r3, [pc, #152]	@ (800ed54 <LoRaMacProcess+0xac>)
 800ecbc:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800ecc0:	f003 0320 	and.w	r3, r3, #32
 800ecc4:	b2db      	uxtb	r3, r3
 800ecc6:	2b00      	cmp	r3, #0
 800ecc8:	d025      	beq.n	800ed16 <LoRaMacProcess+0x6e>
    {
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_OFF );
 800ecca:	2000      	movs	r0, #0
 800eccc:	f7ff fd6c 	bl	800e7a8 <LoRaMacEnableRequests>
        LoRaMacCheckForRxAbort( );
 800ecd0:	f7ff ff00 	bl	800ead4 <LoRaMacCheckForRxAbort>

        // An error occurs during transmitting
        if( IsRequestPending( ) > 0 )
 800ecd4:	f001 fffa 	bl	8010ccc <IsRequestPending>
 800ecd8:	4603      	mov	r3, r0
 800ecda:	2b00      	cmp	r3, #0
 800ecdc:	d006      	beq.n	800ecec <LoRaMacProcess+0x44>
        {
            noTx |= LoRaMacCheckForBeaconAcquisition( );
 800ecde:	f7ff feb3 	bl	800ea48 <LoRaMacCheckForBeaconAcquisition>
 800ece2:	4603      	mov	r3, r0
 800ece4:	461a      	mov	r2, r3
 800ece6:	79fb      	ldrb	r3, [r7, #7]
 800ece8:	4313      	orrs	r3, r2
 800ecea:	71fb      	strb	r3, [r7, #7]
        }

        if( noTx == 0x00 )
 800ecec:	79fb      	ldrb	r3, [r7, #7]
 800ecee:	2b00      	cmp	r3, #0
 800ecf0:	d103      	bne.n	800ecfa <LoRaMacProcess+0x52>
        {
            LoRaMacHandleMlmeRequest( );
 800ecf2:	f7ff fe73 	bl	800e9dc <LoRaMacHandleMlmeRequest>
            LoRaMacHandleMcpsRequest( );
 800ecf6:	f7ff fe15 	bl	800e924 <LoRaMacHandleMcpsRequest>
        }
        LoRaMacHandleRequestEvents( );
 800ecfa:	f7ff fd65 	bl	800e7c8 <LoRaMacHandleRequestEvents>
        LoRaMacHandleScheduleUplinkEvent( );
 800ecfe:	f7ff fdc5 	bl	800e88c <LoRaMacHandleScheduleUplinkEvent>
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 800ed02:	2001      	movs	r0, #1
 800ed04:	f7ff fd50 	bl	800e7a8 <LoRaMacEnableRequests>
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 800ed08:	4a12      	ldr	r2, [pc, #72]	@ (800ed54 <LoRaMacProcess+0xac>)
 800ed0a:	f892 3495 	ldrb.w	r3, [r2, #1173]	@ 0x495
 800ed0e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ed12:	f882 3495 	strb.w	r3, [r2, #1173]	@ 0x495
    }
    LoRaMacHandleIndicationEvents( );
 800ed16:	f7ff fdcd 	bl	800e8b4 <LoRaMacHandleIndicationEvents>
    if( MacCtx.RxSlot == RX_SLOT_WIN_CLASS_C )
 800ed1a:	4b0e      	ldr	r3, [pc, #56]	@ (800ed54 <LoRaMacProcess+0xac>)
 800ed1c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800ed20:	2b02      	cmp	r3, #2
 800ed22:	d101      	bne.n	800ed28 <LoRaMacProcess+0x80>
    {
        OpenContinuousRxCWindow( );
 800ed24:	f001 fbee 	bl	8010504 <OpenContinuousRxCWindow>
    }
    if( MacCtx.MacFlags.Bits.NvmHandle == 1 )
 800ed28:	4b0a      	ldr	r3, [pc, #40]	@ (800ed54 <LoRaMacProcess+0xac>)
 800ed2a:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800ed2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ed32:	b2db      	uxtb	r3, r3
 800ed34:	2b00      	cmp	r3, #0
 800ed36:	d009      	beq.n	800ed4c <LoRaMacProcess+0xa4>
    {
        MacCtx.MacFlags.Bits.NvmHandle = 0;
 800ed38:	4a06      	ldr	r2, [pc, #24]	@ (800ed54 <LoRaMacProcess+0xac>)
 800ed3a:	f892 3495 	ldrb.w	r3, [r2, #1173]	@ 0x495
 800ed3e:	f36f 1386 	bfc	r3, #6, #1
 800ed42:	f882 3495 	strb.w	r3, [r2, #1173]	@ 0x495
        LoRaMacHandleNvm( &Nvm );
 800ed46:	4804      	ldr	r0, [pc, #16]	@ (800ed58 <LoRaMacProcess+0xb0>)
 800ed48:	f7ff fee4 	bl	800eb14 <LoRaMacHandleNvm>
    }
}
 800ed4c:	bf00      	nop
 800ed4e:	3708      	adds	r7, #8
 800ed50:	46bd      	mov	sp, r7
 800ed52:	bd80      	pop	{r7, pc}
 800ed54:	20000670 	.word	0x20000670
 800ed58:	20000b90 	.word	0x20000b90

0800ed5c <OnTxDelayedTimerEvent>:

static void OnTxDelayedTimerEvent( void* context )
{
 800ed5c:	b580      	push	{r7, lr}
 800ed5e:	b082      	sub	sp, #8
 800ed60:	af00      	add	r7, sp, #0
 800ed62:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.TxDelayedTimer );
 800ed64:	481e      	ldr	r0, [pc, #120]	@ (800ede0 <OnTxDelayedTimerEvent+0x84>)
 800ed66:	f00b ffbf 	bl	801ace8 <UTIL_TIMER_Stop>
    MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 800ed6a:	4b1e      	ldr	r3, [pc, #120]	@ (800ede4 <OnTxDelayedTimerEvent+0x88>)
 800ed6c:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800ed70:	f023 0320 	bic.w	r3, r3, #32
 800ed74:	4a1b      	ldr	r2, [pc, #108]	@ (800ede4 <OnTxDelayedTimerEvent+0x88>)
 800ed76:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    if( LoRaMacHandleResponseTimeout( Nvm.MacGroup2.MacParams.RxBCTimeout,
 800ed7a:	4b1b      	ldr	r3, [pc, #108]	@ (800ede8 <OnTxDelayedTimerEvent+0x8c>)
 800ed7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ed80:	4a18      	ldr	r2, [pc, #96]	@ (800ede4 <OnTxDelayedTimerEvent+0x88>)
 800ed82:	f8d2 249c 	ldr.w	r2, [r2, #1180]	@ 0x49c
 800ed86:	4611      	mov	r1, r2
 800ed88:	4618      	mov	r0, r3
 800ed8a:	f7ff ff6f 	bl	800ec6c <LoRaMacHandleResponseTimeout>
 800ed8e:	4603      	mov	r3, r0
 800ed90:	2b00      	cmp	r3, #0
 800ed92:	d11e      	bne.n	800edd2 <OnTxDelayedTimerEvent+0x76>
        return;
    }
#endif /* LORAMAC_VERSION */

    // Schedule frame, allow delayed frame transmissions
    switch( ScheduleTx( true ) )
 800ed94:	2001      	movs	r0, #1
 800ed96:	f001 f93b 	bl	8010010 <ScheduleTx>
 800ed9a:	4603      	mov	r3, r0
 800ed9c:	2b00      	cmp	r3, #0
 800ed9e:	d01a      	beq.n	800edd6 <OnTxDelayedTimerEvent+0x7a>
 800eda0:	2b0b      	cmp	r3, #11
 800eda2:	d018      	beq.n	800edd6 <OnTxDelayedTimerEvent+0x7a>
            break;
        }
        default:
        {
            // Stop retransmission attempt
            MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800eda4:	4b10      	ldr	r3, [pc, #64]	@ (800ede8 <OnTxDelayedTimerEvent+0x8c>)
 800eda6:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 800edaa:	b2da      	uxtb	r2, r3
 800edac:	4b0d      	ldr	r3, [pc, #52]	@ (800ede4 <OnTxDelayedTimerEvent+0x88>)
 800edae:	f883 2446 	strb.w	r2, [r3, #1094]	@ 0x446
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
            MacCtx.McpsConfirm.NbTrans = MacCtx.ChannelsNbTransCounter;
 800edb2:	4b0c      	ldr	r3, [pc, #48]	@ (800ede4 <OnTxDelayedTimerEvent+0x88>)
 800edb4:	f893 241c 	ldrb.w	r2, [r3, #1052]	@ 0x41c
 800edb8:	4b0a      	ldr	r3, [pc, #40]	@ (800ede4 <OnTxDelayedTimerEvent+0x88>)
 800edba:	f883 2449 	strb.w	r2, [r3, #1097]	@ 0x449
#endif /* LORAMAC_VERSION */
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR;
 800edbe:	4b09      	ldr	r3, [pc, #36]	@ (800ede4 <OnTxDelayedTimerEvent+0x88>)
 800edc0:	2209      	movs	r2, #9
 800edc2:	f883 2445 	strb.w	r2, [r3, #1093]	@ 0x445
            LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR );
 800edc6:	2009      	movs	r0, #9
 800edc8:	f004 f926 	bl	8013018 <LoRaMacConfirmQueueSetStatusCmn>
            StopRetransmission( );
 800edcc:	f001 ff24 	bl	8010c18 <StopRetransmission>
            break;
 800edd0:	e002      	b.n	800edd8 <OnTxDelayedTimerEvent+0x7c>
        return;
 800edd2:	bf00      	nop
 800edd4:	e000      	b.n	800edd8 <OnTxDelayedTimerEvent+0x7c>
            break;
 800edd6:	bf00      	nop
        }
    }
}
 800edd8:	3708      	adds	r7, #8
 800edda:	46bd      	mov	sp, r7
 800eddc:	bd80      	pop	{r7, pc}
 800edde:	bf00      	nop
 800ede0:	200009d8 	.word	0x200009d8
 800ede4:	20000670 	.word	0x20000670
 800ede8:	20000b90 	.word	0x20000b90

0800edec <OnRxWindow1TimerEvent>:

static void OnRxWindow1TimerEvent( void* context )
{
 800edec:	b580      	push	{r7, lr}
 800edee:	b082      	sub	sp, #8
 800edf0:	af00      	add	r7, sp, #0
 800edf2:	6078      	str	r0, [r7, #4]
    MacCtx.RxWindow1Config.Channel = MacCtx.Channel;
 800edf4:	4b17      	ldr	r3, [pc, #92]	@ (800ee54 <OnRxWindow1TimerEvent+0x68>)
 800edf6:	f893 241f 	ldrb.w	r2, [r3, #1055]	@ 0x41f
 800edfa:	4b16      	ldr	r3, [pc, #88]	@ (800ee54 <OnRxWindow1TimerEvent+0x68>)
 800edfc:	f883 23b8 	strb.w	r2, [r3, #952]	@ 0x3b8
    MacCtx.RxWindow1Config.DrOffset = Nvm.MacGroup2.MacParams.Rx1DrOffset;
 800ee00:	4b15      	ldr	r3, [pc, #84]	@ (800ee58 <OnRxWindow1TimerEvent+0x6c>)
 800ee02:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 800ee06:	b25a      	sxtb	r2, r3
 800ee08:	4b12      	ldr	r3, [pc, #72]	@ (800ee54 <OnRxWindow1TimerEvent+0x68>)
 800ee0a:	f883 23bb 	strb.w	r2, [r3, #955]	@ 0x3bb
    MacCtx.RxWindow1Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800ee0e:	4b12      	ldr	r3, [pc, #72]	@ (800ee58 <OnRxWindow1TimerEvent+0x6c>)
 800ee10:	f893 2075 	ldrb.w	r2, [r3, #117]	@ 0x75
 800ee14:	4b0f      	ldr	r3, [pc, #60]	@ (800ee54 <OnRxWindow1TimerEvent+0x68>)
 800ee16:	f883 23c8 	strb.w	r2, [r3, #968]	@ 0x3c8
    MacCtx.RxWindow1Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 800ee1a:	4b0f      	ldr	r3, [pc, #60]	@ (800ee58 <OnRxWindow1TimerEvent+0x6c>)
 800ee1c:	f893 2080 	ldrb.w	r2, [r3, #128]	@ 0x80
 800ee20:	4b0c      	ldr	r3, [pc, #48]	@ (800ee54 <OnRxWindow1TimerEvent+0x68>)
 800ee22:	f883 23c9 	strb.w	r2, [r3, #969]	@ 0x3c9
    MacCtx.RxWindow1Config.RxContinuous = false;
 800ee26:	4b0b      	ldr	r3, [pc, #44]	@ (800ee54 <OnRxWindow1TimerEvent+0x68>)
 800ee28:	2200      	movs	r2, #0
 800ee2a:	f883 23ca 	strb.w	r2, [r3, #970]	@ 0x3ca
    MacCtx.RxWindow1Config.RxSlot = RX_SLOT_WIN_1;
 800ee2e:	4b09      	ldr	r3, [pc, #36]	@ (800ee54 <OnRxWindow1TimerEvent+0x68>)
 800ee30:	2200      	movs	r2, #0
 800ee32:	f883 23cb 	strb.w	r2, [r3, #971]	@ 0x3cb
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    MacCtx.RxWindow1Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 800ee36:	4b08      	ldr	r3, [pc, #32]	@ (800ee58 <OnRxWindow1TimerEvent+0x6c>)
 800ee38:	f893 211c 	ldrb.w	r2, [r3, #284]	@ 0x11c
 800ee3c:	4b05      	ldr	r3, [pc, #20]	@ (800ee54 <OnRxWindow1TimerEvent+0x68>)
 800ee3e:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc
#endif /* LORAMAC_VERSION */

    RxWindowSetup( &MacCtx.RxWindowTimer1, &MacCtx.RxWindow1Config );
 800ee42:	4906      	ldr	r1, [pc, #24]	@ (800ee5c <OnRxWindow1TimerEvent+0x70>)
 800ee44:	4806      	ldr	r0, [pc, #24]	@ (800ee60 <OnRxWindow1TimerEvent+0x74>)
 800ee46:	f001 fb29 	bl	801049c <RxWindowSetup>
}
 800ee4a:	bf00      	nop
 800ee4c:	3708      	adds	r7, #8
 800ee4e:	46bd      	mov	sp, r7
 800ee50:	bd80      	pop	{r7, pc}
 800ee52:	bf00      	nop
 800ee54:	20000670 	.word	0x20000670
 800ee58:	20000b90 	.word	0x20000b90
 800ee5c:	20000a28 	.word	0x20000a28
 800ee60:	200009f0 	.word	0x200009f0

0800ee64 <OnRxWindow2TimerEvent>:

static void OnRxWindow2TimerEvent( void* context )
{
 800ee64:	b580      	push	{r7, lr}
 800ee66:	b082      	sub	sp, #8
 800ee68:	af00      	add	r7, sp, #0
 800ee6a:	6078      	str	r0, [r7, #4]
    // Check if we are processing Rx1 window.
    // If yes, we don't setup the Rx2 window.
    if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 800ee6c:	4b19      	ldr	r3, [pc, #100]	@ (800eed4 <OnRxWindow2TimerEvent+0x70>)
 800ee6e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800ee72:	2b00      	cmp	r3, #0
 800ee74:	d029      	beq.n	800eeca <OnRxWindow2TimerEvent+0x66>
    {
        return;
    }
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 800ee76:	4b17      	ldr	r3, [pc, #92]	@ (800eed4 <OnRxWindow2TimerEvent+0x70>)
 800ee78:	f893 241f 	ldrb.w	r2, [r3, #1055]	@ 0x41f
 800ee7c:	4b15      	ldr	r3, [pc, #84]	@ (800eed4 <OnRxWindow2TimerEvent+0x70>)
 800ee7e:	f883 23d0 	strb.w	r2, [r3, #976]	@ 0x3d0
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 800ee82:	4b15      	ldr	r3, [pc, #84]	@ (800eed8 <OnRxWindow2TimerEvent+0x74>)
 800ee84:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ee86:	4a13      	ldr	r2, [pc, #76]	@ (800eed4 <OnRxWindow2TimerEvent+0x70>)
 800ee88:	f8c2 33d4 	str.w	r3, [r2, #980]	@ 0x3d4
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800ee8c:	4b12      	ldr	r3, [pc, #72]	@ (800eed8 <OnRxWindow2TimerEvent+0x74>)
 800ee8e:	f893 2075 	ldrb.w	r2, [r3, #117]	@ 0x75
 800ee92:	4b10      	ldr	r3, [pc, #64]	@ (800eed4 <OnRxWindow2TimerEvent+0x70>)
 800ee94:	f883 23e0 	strb.w	r2, [r3, #992]	@ 0x3e0
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 800ee98:	4b0f      	ldr	r3, [pc, #60]	@ (800eed8 <OnRxWindow2TimerEvent+0x74>)
 800ee9a:	f893 2080 	ldrb.w	r2, [r3, #128]	@ 0x80
 800ee9e:	4b0d      	ldr	r3, [pc, #52]	@ (800eed4 <OnRxWindow2TimerEvent+0x70>)
 800eea0:	f883 23e1 	strb.w	r2, [r3, #993]	@ 0x3e1
    MacCtx.RxWindow2Config.RxContinuous = false;
 800eea4:	4b0b      	ldr	r3, [pc, #44]	@ (800eed4 <OnRxWindow2TimerEvent+0x70>)
 800eea6:	2200      	movs	r2, #0
 800eea8:	f883 23e2 	strb.w	r2, [r3, #994]	@ 0x3e2
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 800eeac:	4b09      	ldr	r3, [pc, #36]	@ (800eed4 <OnRxWindow2TimerEvent+0x70>)
 800eeae:	2201      	movs	r2, #1
 800eeb0:	f883 23e3 	strb.w	r2, [r3, #995]	@ 0x3e3
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    MacCtx.RxWindow2Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 800eeb4:	4b08      	ldr	r3, [pc, #32]	@ (800eed8 <OnRxWindow2TimerEvent+0x74>)
 800eeb6:	f893 211c 	ldrb.w	r2, [r3, #284]	@ 0x11c
 800eeba:	4b06      	ldr	r3, [pc, #24]	@ (800eed4 <OnRxWindow2TimerEvent+0x70>)
 800eebc:	f883 23e4 	strb.w	r2, [r3, #996]	@ 0x3e4
#endif /* LORAMAC_VERSION */

    RxWindowSetup( &MacCtx.RxWindowTimer2, &MacCtx.RxWindow2Config );
 800eec0:	4906      	ldr	r1, [pc, #24]	@ (800eedc <OnRxWindow2TimerEvent+0x78>)
 800eec2:	4807      	ldr	r0, [pc, #28]	@ (800eee0 <OnRxWindow2TimerEvent+0x7c>)
 800eec4:	f001 faea 	bl	801049c <RxWindowSetup>
 800eec8:	e000      	b.n	800eecc <OnRxWindow2TimerEvent+0x68>
        return;
 800eeca:	bf00      	nop
}
 800eecc:	3708      	adds	r7, #8
 800eece:	46bd      	mov	sp, r7
 800eed0:	bd80      	pop	{r7, pc}
 800eed2:	bf00      	nop
 800eed4:	20000670 	.word	0x20000670
 800eed8:	20000b90 	.word	0x20000b90
 800eedc:	20000a40 	.word	0x20000a40
 800eee0:	20000a08 	.word	0x20000a08

0800eee4 <OnRetransmitTimeoutTimerEvent>:

    return LoRaMacCryptoGetFCntDown( *fCntID, maxFCntGap, macMsg->FHDR.FCnt, currentDown );
}
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
static void OnRetransmitTimeoutTimerEvent( void* context )
{
 800eee4:	b580      	push	{r7, lr}
 800eee6:	b082      	sub	sp, #8
 800eee8:	af00      	add	r7, sp, #0
 800eeea:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.RetransmitTimeoutTimer );
 800eeec:	480f      	ldr	r0, [pc, #60]	@ (800ef2c <OnRetransmitTimeoutTimerEvent+0x48>)
 800eeee:	f00b fefb 	bl	801ace8 <UTIL_TIMER_Stop>

    if( MacCtx.NodeAckRequested == true )
 800eef2:	4b0f      	ldr	r3, [pc, #60]	@ (800ef30 <OnRetransmitTimeoutTimerEvent+0x4c>)
 800eef4:	f893 341e 	ldrb.w	r3, [r3, #1054]	@ 0x41e
 800eef8:	2b00      	cmp	r3, #0
 800eefa:	d003      	beq.n	800ef04 <OnRetransmitTimeoutTimerEvent+0x20>
    {
        MacCtx.RetransmitTimeoutRetry = true;
 800eefc:	4b0c      	ldr	r3, [pc, #48]	@ (800ef30 <OnRetransmitTimeoutTimerEvent+0x4c>)
 800eefe:	2201      	movs	r2, #1
 800ef00:	f883 241d 	strb.w	r2, [r3, #1053]	@ 0x41d
    }
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800ef04:	4b0a      	ldr	r3, [pc, #40]	@ (800ef30 <OnRetransmitTimeoutTimerEvent+0x4c>)
 800ef06:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800ef0a:	2b00      	cmp	r3, #0
 800ef0c:	d00a      	beq.n	800ef24 <OnRetransmitTimeoutTimerEvent+0x40>
 800ef0e:	4b08      	ldr	r3, [pc, #32]	@ (800ef30 <OnRetransmitTimeoutTimerEvent+0x4c>)
 800ef10:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800ef14:	691b      	ldr	r3, [r3, #16]
 800ef16:	2b00      	cmp	r3, #0
 800ef18:	d004      	beq.n	800ef24 <OnRetransmitTimeoutTimerEvent+0x40>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800ef1a:	4b05      	ldr	r3, [pc, #20]	@ (800ef30 <OnRetransmitTimeoutTimerEvent+0x4c>)
 800ef1c:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800ef20:	691b      	ldr	r3, [r3, #16]
 800ef22:	4798      	blx	r3
    }
}
 800ef24:	bf00      	nop
 800ef26:	3708      	adds	r7, #8
 800ef28:	46bd      	mov	sp, r7
 800ef2a:	bd80      	pop	{r7, pc}
 800ef2c:	20000a74 	.word	0x20000a74
 800ef30:	20000670 	.word	0x20000670

0800ef34 <GetFCntDown>:

static LoRaMacCryptoStatus_t GetFCntDown( AddressIdentifier_t addrID, FType_t fType, LoRaMacMessageData_t* macMsg, Version_t lrWanVersion,
                                          FCntIdentifier_t* fCntID, uint32_t* currentDown )
{
 800ef34:	b580      	push	{r7, lr}
 800ef36:	b084      	sub	sp, #16
 800ef38:	af00      	add	r7, sp, #0
 800ef3a:	60ba      	str	r2, [r7, #8]
 800ef3c:	607b      	str	r3, [r7, #4]
 800ef3e:	4603      	mov	r3, r0
 800ef40:	73fb      	strb	r3, [r7, #15]
 800ef42:	460b      	mov	r3, r1
 800ef44:	73bb      	strb	r3, [r7, #14]
    if( ( macMsg == NULL ) || ( fCntID == NULL ) ||
 800ef46:	68bb      	ldr	r3, [r7, #8]
 800ef48:	2b00      	cmp	r3, #0
 800ef4a:	d005      	beq.n	800ef58 <GetFCntDown+0x24>
 800ef4c:	69bb      	ldr	r3, [r7, #24]
 800ef4e:	2b00      	cmp	r3, #0
 800ef50:	d002      	beq.n	800ef58 <GetFCntDown+0x24>
 800ef52:	69fb      	ldr	r3, [r7, #28]
 800ef54:	2b00      	cmp	r3, #0
 800ef56:	d101      	bne.n	800ef5c <GetFCntDown+0x28>
        ( currentDown == NULL ) )
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 800ef58:	2309      	movs	r3, #9
 800ef5a:	e028      	b.n	800efae <GetFCntDown+0x7a>
    }

    // Determine the frame counter identifier and choose counter from FCntList
    switch( addrID )
 800ef5c:	7bfb      	ldrb	r3, [r7, #15]
 800ef5e:	2b00      	cmp	r3, #0
 800ef60:	d016      	beq.n	800ef90 <GetFCntDown+0x5c>
 800ef62:	2b01      	cmp	r3, #1
 800ef64:	d118      	bne.n	800ef98 <GetFCntDown+0x64>
    {
        case UNICAST_DEV_ADDR:
            if( lrWanVersion.Fields.Minor == 1 )
 800ef66:	79bb      	ldrb	r3, [r7, #6]
 800ef68:	2b01      	cmp	r3, #1
 800ef6a:	d10d      	bne.n	800ef88 <GetFCntDown+0x54>
            {
                if( ( fType == FRAME_TYPE_A ) || ( fType == FRAME_TYPE_D ) )
 800ef6c:	7bbb      	ldrb	r3, [r7, #14]
 800ef6e:	2b00      	cmp	r3, #0
 800ef70:	d002      	beq.n	800ef78 <GetFCntDown+0x44>
 800ef72:	7bbb      	ldrb	r3, [r7, #14]
 800ef74:	2b03      	cmp	r3, #3
 800ef76:	d103      	bne.n	800ef80 <GetFCntDown+0x4c>
                {
                    *fCntID = A_FCNT_DOWN;
 800ef78:	69bb      	ldr	r3, [r7, #24]
 800ef7a:	2202      	movs	r2, #2
 800ef7c:	701a      	strb	r2, [r3, #0]
            }
            else
            { // For LoRaWAN 1.0.X
                *fCntID = FCNT_DOWN;
            }
            break;
 800ef7e:	e00d      	b.n	800ef9c <GetFCntDown+0x68>
                    *fCntID = N_FCNT_DOWN;
 800ef80:	69bb      	ldr	r3, [r7, #24]
 800ef82:	2201      	movs	r2, #1
 800ef84:	701a      	strb	r2, [r3, #0]
            break;
 800ef86:	e009      	b.n	800ef9c <GetFCntDown+0x68>
                *fCntID = FCNT_DOWN;
 800ef88:	69bb      	ldr	r3, [r7, #24]
 800ef8a:	2203      	movs	r2, #3
 800ef8c:	701a      	strb	r2, [r3, #0]
            break;
 800ef8e:	e005      	b.n	800ef9c <GetFCntDown+0x68>
        /* ST_WORKAROUND_BEGIN: reduced LORAMAC_MAX_MC_CTX */
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MULTICAST_0_ADDR:
            *fCntID = MC_FCNT_DOWN_0;
 800ef90:	69bb      	ldr	r3, [r7, #24]
 800ef92:	2204      	movs	r2, #4
 800ef94:	701a      	strb	r2, [r3, #0]
            break;
 800ef96:	e001      	b.n	800ef9c <GetFCntDown+0x68>
            *fCntID = MC_FCNT_DOWN_3;
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        /* ST_WORKAROUND_END */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
 800ef98:	2305      	movs	r3, #5
 800ef9a:	e008      	b.n	800efae <GetFCntDown+0x7a>
    }

    return LoRaMacCryptoGetFCntDown( *fCntID, macMsg->FHDR.FCnt, currentDown );
 800ef9c:	69bb      	ldr	r3, [r7, #24]
 800ef9e:	7818      	ldrb	r0, [r3, #0]
 800efa0:	68bb      	ldr	r3, [r7, #8]
 800efa2:	89db      	ldrh	r3, [r3, #14]
 800efa4:	69fa      	ldr	r2, [r7, #28]
 800efa6:	4619      	mov	r1, r3
 800efa8:	f004 fc60 	bl	801386c <LoRaMacCryptoGetFCntDown>
 800efac:	4603      	mov	r3, r0
}
 800efae:	4618      	mov	r0, r3
 800efb0:	3710      	adds	r7, #16
 800efb2:	46bd      	mov	sp, r7
 800efb4:	bd80      	pop	{r7, pc}
	...

0800efb8 <SwitchClass>:
#endif /* LORAMAC_VERSION */

static LoRaMacStatus_t SwitchClass( DeviceClass_t deviceClass )
{
 800efb8:	b5b0      	push	{r4, r5, r7, lr}
 800efba:	b084      	sub	sp, #16
 800efbc:	af00      	add	r7, sp, #0
 800efbe:	4603      	mov	r3, r0
 800efc0:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 800efc2:	2303      	movs	r3, #3
 800efc4:	73fb      	strb	r3, [r7, #15]

    switch( Nvm.MacGroup2.DeviceClass )
 800efc6:	4b62      	ldr	r3, [pc, #392]	@ (800f150 <SwitchClass+0x198>)
 800efc8:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 800efcc:	2b02      	cmp	r3, #2
 800efce:	f000 80a7 	beq.w	800f120 <SwitchClass+0x168>
 800efd2:	2b02      	cmp	r3, #2
 800efd4:	f300 80b6 	bgt.w	800f144 <SwitchClass+0x18c>
 800efd8:	2b00      	cmp	r3, #0
 800efda:	d003      	beq.n	800efe4 <SwitchClass+0x2c>
 800efdc:	2b01      	cmp	r3, #1
 800efde:	f000 8091 	beq.w	800f104 <SwitchClass+0x14c>
 800efe2:	e0af      	b.n	800f144 <SwitchClass+0x18c>
    {
        case CLASS_A:
        {
            if( deviceClass == CLASS_A )
 800efe4:	79fb      	ldrb	r3, [r7, #7]
 800efe6:	2b00      	cmp	r3, #0
 800efe8:	d107      	bne.n	800effa <SwitchClass+0x42>
            {
                // Revert back RxC parameters
                Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParams.Rx2Channel;
 800efea:	4b59      	ldr	r3, [pc, #356]	@ (800f150 <SwitchClass+0x198>)
 800efec:	4a58      	ldr	r2, [pc, #352]	@ (800f150 <SwitchClass+0x198>)
 800efee:	336c      	adds	r3, #108	@ 0x6c
 800eff0:	3264      	adds	r2, #100	@ 0x64
 800eff2:	e892 0003 	ldmia.w	r2, {r0, r1}
 800eff6:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            if( deviceClass == CLASS_B )
 800effa:	79fb      	ldrb	r3, [r7, #7]
 800effc:	2b01      	cmp	r3, #1
 800effe:	d10c      	bne.n	800f01a <SwitchClass+0x62>
            {
                status = LoRaMacClassBSwitchClass( deviceClass );
 800f000:	79fb      	ldrb	r3, [r7, #7]
 800f002:	4618      	mov	r0, r3
 800f004:	f003 fb80 	bl	8012708 <LoRaMacClassBSwitchClass>
 800f008:	4603      	mov	r3, r0
 800f00a:	73fb      	strb	r3, [r7, #15]
                if( status == LORAMAC_STATUS_OK )
 800f00c:	7bfb      	ldrb	r3, [r7, #15]
 800f00e:	2b00      	cmp	r3, #0
 800f010:	d103      	bne.n	800f01a <SwitchClass+0x62>
                {
                    Nvm.MacGroup2.DeviceClass = deviceClass;
 800f012:	4a4f      	ldr	r2, [pc, #316]	@ (800f150 <SwitchClass+0x198>)
 800f014:	79fb      	ldrb	r3, [r7, #7]
 800f016:	f882 3104 	strb.w	r3, [r2, #260]	@ 0x104
                }
            }

            if( deviceClass == CLASS_C )
 800f01a:	79fb      	ldrb	r3, [r7, #7]
 800f01c:	2b02      	cmp	r3, #2
 800f01e:	f040 808c 	bne.w	800f13a <SwitchClass+0x182>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 800f022:	4a4b      	ldr	r2, [pc, #300]	@ (800f150 <SwitchClass+0x198>)
 800f024:	79fb      	ldrb	r3, [r7, #7]
 800f026:	f882 3104 	strb.w	r3, [r2, #260]	@ 0x104

                MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 800f02a:	4a4a      	ldr	r2, [pc, #296]	@ (800f154 <SwitchClass+0x19c>)
 800f02c:	4b49      	ldr	r3, [pc, #292]	@ (800f154 <SwitchClass+0x19c>)
 800f02e:	f502 747a 	add.w	r4, r2, #1000	@ 0x3e8
 800f032:	f503 7574 	add.w	r5, r3, #976	@ 0x3d0
 800f036:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f038:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f03a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800f03e:	e884 0003 	stmia.w	r4, {r0, r1}
                MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 800f042:	4b44      	ldr	r3, [pc, #272]	@ (800f154 <SwitchClass+0x19c>)
 800f044:	2202      	movs	r2, #2
 800f046:	f883 23fb 	strb.w	r2, [r3, #1019]	@ 0x3fb

                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800f04a:	2300      	movs	r3, #0
 800f04c:	73bb      	strb	r3, [r7, #14]
 800f04e:	e049      	b.n	800f0e4 <SwitchClass+0x12c>
                {
                    if( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true )
 800f050:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f054:	4a3e      	ldr	r2, [pc, #248]	@ (800f150 <SwitchClass+0x198>)
 800f056:	212c      	movs	r1, #44	@ 0x2c
 800f058:	fb01 f303 	mul.w	r3, r1, r3
 800f05c:	4413      	add	r3, r2
 800f05e:	33da      	adds	r3, #218	@ 0xda
 800f060:	781b      	ldrb	r3, [r3, #0]
 800f062:	2b00      	cmp	r3, #0
 800f064:	d038      	beq.n	800f0d8 <SwitchClass+0x120>
                    {
                        Nvm.MacGroup2.MacParams.RxCChannel.Frequency = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.ClassC.Frequency;
 800f066:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f06a:	4a39      	ldr	r2, [pc, #228]	@ (800f150 <SwitchClass+0x198>)
 800f06c:	212c      	movs	r1, #44	@ 0x2c
 800f06e:	fb01 f303 	mul.w	r3, r1, r3
 800f072:	4413      	add	r3, r2
 800f074:	33f0      	adds	r3, #240	@ 0xf0
 800f076:	681b      	ldr	r3, [r3, #0]
 800f078:	4a35      	ldr	r2, [pc, #212]	@ (800f150 <SwitchClass+0x198>)
 800f07a:	66d3      	str	r3, [r2, #108]	@ 0x6c
                        Nvm.MacGroup2.MacParams.RxCChannel.Datarate = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.ClassC.Datarate;
 800f07c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f080:	4a33      	ldr	r2, [pc, #204]	@ (800f150 <SwitchClass+0x198>)
 800f082:	212c      	movs	r1, #44	@ 0x2c
 800f084:	fb01 f303 	mul.w	r3, r1, r3
 800f088:	4413      	add	r3, r2
 800f08a:	33f4      	adds	r3, #244	@ 0xf4
 800f08c:	f993 3000 	ldrsb.w	r3, [r3]
 800f090:	b2da      	uxtb	r2, r3
 800f092:	4b2f      	ldr	r3, [pc, #188]	@ (800f150 <SwitchClass+0x198>)
 800f094:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70

                        MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 800f098:	4b2e      	ldr	r3, [pc, #184]	@ (800f154 <SwitchClass+0x19c>)
 800f09a:	f893 241f 	ldrb.w	r2, [r3, #1055]	@ 0x41f
 800f09e:	4b2d      	ldr	r3, [pc, #180]	@ (800f154 <SwitchClass+0x19c>)
 800f0a0:	f883 23e8 	strb.w	r2, [r3, #1000]	@ 0x3e8
                        MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 800f0a4:	4b2a      	ldr	r3, [pc, #168]	@ (800f150 <SwitchClass+0x198>)
 800f0a6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f0a8:	4a2a      	ldr	r2, [pc, #168]	@ (800f154 <SwitchClass+0x19c>)
 800f0aa:	f8c2 33ec 	str.w	r3, [r2, #1004]	@ 0x3ec
                        MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800f0ae:	4b28      	ldr	r3, [pc, #160]	@ (800f150 <SwitchClass+0x198>)
 800f0b0:	f893 2075 	ldrb.w	r2, [r3, #117]	@ 0x75
 800f0b4:	4b27      	ldr	r3, [pc, #156]	@ (800f154 <SwitchClass+0x19c>)
 800f0b6:	f883 23f8 	strb.w	r2, [r3, #1016]	@ 0x3f8
                        MacCtx.RxWindowCConfig.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 800f0ba:	4b25      	ldr	r3, [pc, #148]	@ (800f150 <SwitchClass+0x198>)
 800f0bc:	f893 2080 	ldrb.w	r2, [r3, #128]	@ 0x80
 800f0c0:	4b24      	ldr	r3, [pc, #144]	@ (800f154 <SwitchClass+0x19c>)
 800f0c2:	f883 23f9 	strb.w	r2, [r3, #1017]	@ 0x3f9
                        MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 800f0c6:	4b23      	ldr	r3, [pc, #140]	@ (800f154 <SwitchClass+0x19c>)
 800f0c8:	2203      	movs	r2, #3
 800f0ca:	f883 23fb 	strb.w	r2, [r3, #1019]	@ 0x3fb
                        MacCtx.RxWindowCConfig.RxContinuous = true;
 800f0ce:	4b21      	ldr	r3, [pc, #132]	@ (800f154 <SwitchClass+0x19c>)
 800f0d0:	2201      	movs	r2, #1
 800f0d2:	f883 23fa 	strb.w	r2, [r3, #1018]	@ 0x3fa
                        break;
 800f0d6:	e009      	b.n	800f0ec <SwitchClass+0x134>
                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800f0d8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f0dc:	b2db      	uxtb	r3, r3
 800f0de:	3301      	adds	r3, #1
 800f0e0:	b2db      	uxtb	r3, r3
 800f0e2:	73bb      	strb	r3, [r7, #14]
 800f0e4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f0e8:	2b00      	cmp	r3, #0
 800f0ea:	ddb1      	ble.n	800f050 <SwitchClass+0x98>
                    }
                }

                // Set the NodeAckRequested indicator to default
                MacCtx.NodeAckRequested = false;
 800f0ec:	4b19      	ldr	r3, [pc, #100]	@ (800f154 <SwitchClass+0x19c>)
 800f0ee:	2200      	movs	r2, #0
 800f0f0:	f883 241e 	strb.w	r2, [r3, #1054]	@ 0x41e
                // Set the radio into sleep mode in case we are still in RX mode
                Radio.Sleep( );
 800f0f4:	4b18      	ldr	r3, [pc, #96]	@ (800f158 <SwitchClass+0x1a0>)
 800f0f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f0f8:	4798      	blx	r3

                OpenContinuousRxCWindow( );
 800f0fa:	f001 fa03 	bl	8010504 <OpenContinuousRxCWindow>

                status = LORAMAC_STATUS_OK;
 800f0fe:	2300      	movs	r3, #0
 800f100:	73fb      	strb	r3, [r7, #15]
            }
            break;
 800f102:	e01a      	b.n	800f13a <SwitchClass+0x182>
        }
        case CLASS_B:
        {
            status = LoRaMacClassBSwitchClass( deviceClass );
 800f104:	79fb      	ldrb	r3, [r7, #7]
 800f106:	4618      	mov	r0, r3
 800f108:	f003 fafe 	bl	8012708 <LoRaMacClassBSwitchClass>
 800f10c:	4603      	mov	r3, r0
 800f10e:	73fb      	strb	r3, [r7, #15]
            if( status == LORAMAC_STATUS_OK )
 800f110:	7bfb      	ldrb	r3, [r7, #15]
 800f112:	2b00      	cmp	r3, #0
 800f114:	d113      	bne.n	800f13e <SwitchClass+0x186>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 800f116:	4a0e      	ldr	r2, [pc, #56]	@ (800f150 <SwitchClass+0x198>)
 800f118:	79fb      	ldrb	r3, [r7, #7]
 800f11a:	f882 3104 	strb.w	r3, [r2, #260]	@ 0x104
            }
            break;
 800f11e:	e00e      	b.n	800f13e <SwitchClass+0x186>
        }
        case CLASS_C:
        {
            if( deviceClass == CLASS_A )
 800f120:	79fb      	ldrb	r3, [r7, #7]
 800f122:	2b00      	cmp	r3, #0
 800f124:	d10d      	bne.n	800f142 <SwitchClass+0x18a>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 800f126:	4a0a      	ldr	r2, [pc, #40]	@ (800f150 <SwitchClass+0x198>)
 800f128:	79fb      	ldrb	r3, [r7, #7]
 800f12a:	f882 3104 	strb.w	r3, [r2, #260]	@ 0x104

                // Set the radio into sleep to setup a defined state
                Radio.Sleep( );
 800f12e:	4b0a      	ldr	r3, [pc, #40]	@ (800f158 <SwitchClass+0x1a0>)
 800f130:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f132:	4798      	blx	r3

                status = LORAMAC_STATUS_OK;
 800f134:	2300      	movs	r3, #0
 800f136:	73fb      	strb	r3, [r7, #15]
            }
            break;
 800f138:	e003      	b.n	800f142 <SwitchClass+0x18a>
            break;
 800f13a:	bf00      	nop
 800f13c:	e002      	b.n	800f144 <SwitchClass+0x18c>
            break;
 800f13e:	bf00      	nop
 800f140:	e000      	b.n	800f144 <SwitchClass+0x18c>
            break;
 800f142:	bf00      	nop
        }
    }

    return status;
 800f144:	7bfb      	ldrb	r3, [r7, #15]
}
 800f146:	4618      	mov	r0, r3
 800f148:	3710      	adds	r7, #16
 800f14a:	46bd      	mov	sp, r7
 800f14c:	bdb0      	pop	{r4, r5, r7, pc}
 800f14e:	bf00      	nop
 800f150:	20000b90 	.word	0x20000b90
 800f154:	20000670 	.word	0x20000670
 800f158:	0801c57c 	.word	0x0801c57c

0800f15c <GetMaxAppPayloadWithoutFOptsLength>:

static uint8_t GetMaxAppPayloadWithoutFOptsLength( int8_t datarate )
{
 800f15c:	b580      	push	{r7, lr}
 800f15e:	b086      	sub	sp, #24
 800f160:	af00      	add	r7, sp, #0
 800f162:	4603      	mov	r3, r0
 800f164:	71fb      	strb	r3, [r7, #7]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Setup PHY request
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800f166:	4b10      	ldr	r3, [pc, #64]	@ (800f1a8 <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 800f168:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 800f16c:	74bb      	strb	r3, [r7, #18]
    getPhy.Datarate = datarate;
 800f16e:	79fb      	ldrb	r3, [r7, #7]
 800f170:	747b      	strb	r3, [r7, #17]
    getPhy.Attribute = PHY_MAX_PAYLOAD;
 800f172:	230d      	movs	r3, #13
 800f174:	743b      	strb	r3, [r7, #16]
    /* ST_WORKAROUND_BEGIN: Keep repeater feature */
    // Get the maximum payload length
    if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 800f176:	4b0c      	ldr	r3, [pc, #48]	@ (800f1a8 <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 800f178:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800f17c:	2b00      	cmp	r3, #0
 800f17e:	d001      	beq.n	800f184 <GetMaxAppPayloadWithoutFOptsLength+0x28>
    {
        getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 800f180:	230e      	movs	r3, #14
 800f182:	743b      	strb	r3, [r7, #16]
    }
    /* ST_WORKAROUND_END */
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800f184:	4b08      	ldr	r3, [pc, #32]	@ (800f1a8 <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 800f186:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800f18a:	f107 0210 	add.w	r2, r7, #16
 800f18e:	4611      	mov	r1, r2
 800f190:	4618      	mov	r0, r3
 800f192:	f005 f9c3 	bl	801451c <RegionGetPhyParam>
 800f196:	4603      	mov	r3, r0
 800f198:	60fb      	str	r3, [r7, #12]

    return phyParam.Value;
 800f19a:	68fb      	ldr	r3, [r7, #12]
 800f19c:	b2db      	uxtb	r3, r3
}
 800f19e:	4618      	mov	r0, r3
 800f1a0:	3718      	adds	r7, #24
 800f1a2:	46bd      	mov	sp, r7
 800f1a4:	bd80      	pop	{r7, pc}
 800f1a6:	bf00      	nop
 800f1a8:	20000b90 	.word	0x20000b90

0800f1ac <ValidatePayloadLength>:

static bool ValidatePayloadLength( uint8_t lenN, int8_t datarate, uint8_t fOptsLen )
{
 800f1ac:	b580      	push	{r7, lr}
 800f1ae:	b084      	sub	sp, #16
 800f1b0:	af00      	add	r7, sp, #0
 800f1b2:	4603      	mov	r3, r0
 800f1b4:	71fb      	strb	r3, [r7, #7]
 800f1b6:	460b      	mov	r3, r1
 800f1b8:	71bb      	strb	r3, [r7, #6]
 800f1ba:	4613      	mov	r3, r2
 800f1bc:	717b      	strb	r3, [r7, #5]
    uint16_t maxN = 0;
 800f1be:	2300      	movs	r3, #0
 800f1c0:	81fb      	strh	r3, [r7, #14]
    uint16_t payloadSize = 0;
 800f1c2:	2300      	movs	r3, #0
 800f1c4:	81bb      	strh	r3, [r7, #12]

    maxN = GetMaxAppPayloadWithoutFOptsLength( datarate );
 800f1c6:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800f1ca:	4618      	mov	r0, r3
 800f1cc:	f7ff ffc6 	bl	800f15c <GetMaxAppPayloadWithoutFOptsLength>
 800f1d0:	4603      	mov	r3, r0
 800f1d2:	81fb      	strh	r3, [r7, #14]

    // Calculate the resulting payload size
    payloadSize = ( lenN + fOptsLen );
 800f1d4:	79fb      	ldrb	r3, [r7, #7]
 800f1d6:	b29a      	uxth	r2, r3
 800f1d8:	797b      	ldrb	r3, [r7, #5]
 800f1da:	b29b      	uxth	r3, r3
 800f1dc:	4413      	add	r3, r2
 800f1de:	81bb      	strh	r3, [r7, #12]

    // Validation of the application payload size
    if( ( payloadSize <= maxN ) && ( payloadSize <= LORAMAC_PHY_MAXPAYLOAD ) )
 800f1e0:	89ba      	ldrh	r2, [r7, #12]
 800f1e2:	89fb      	ldrh	r3, [r7, #14]
 800f1e4:	429a      	cmp	r2, r3
 800f1e6:	d804      	bhi.n	800f1f2 <ValidatePayloadLength+0x46>
 800f1e8:	89bb      	ldrh	r3, [r7, #12]
 800f1ea:	2bff      	cmp	r3, #255	@ 0xff
 800f1ec:	d801      	bhi.n	800f1f2 <ValidatePayloadLength+0x46>
    {
        return true;
 800f1ee:	2301      	movs	r3, #1
 800f1f0:	e000      	b.n	800f1f4 <ValidatePayloadLength+0x48>
    }
    return false;
 800f1f2:	2300      	movs	r3, #0
}
 800f1f4:	4618      	mov	r0, r3
 800f1f6:	3710      	adds	r7, #16
 800f1f8:	46bd      	mov	sp, r7
 800f1fa:	bd80      	pop	{r7, pc}

0800f1fc <ProcessMacCommands>:
}
*/
/*ST_WORKAROUND_END */

static void ProcessMacCommands( uint8_t *payload, uint8_t macIndex, uint8_t commandsSize, int8_t snr, LoRaMacRxSlot_t rxSlot )
{
 800f1fc:	b590      	push	{r4, r7, lr}
 800f1fe:	b0a5      	sub	sp, #148	@ 0x94
 800f200:	af02      	add	r7, sp, #8
 800f202:	6078      	str	r0, [r7, #4]
 800f204:	4608      	mov	r0, r1
 800f206:	4611      	mov	r1, r2
 800f208:	461a      	mov	r2, r3
 800f20a:	4603      	mov	r3, r0
 800f20c:	70fb      	strb	r3, [r7, #3]
 800f20e:	460b      	mov	r3, r1
 800f210:	70bb      	strb	r3, [r7, #2]
 800f212:	4613      	mov	r3, r2
 800f214:	707b      	strb	r3, [r7, #1]
    uint8_t status = 0;
 800f216:	2300      	movs	r3, #0
 800f218:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
    bool adrBlockFound = false;
 800f21c:	2300      	movs	r3, #0
 800f21e:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 800f222:	2300      	movs	r3, #0
 800f224:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    if( ( rxSlot != RX_SLOT_WIN_1 ) && ( rxSlot != RX_SLOT_WIN_2 ) )
 800f228:	f897 3098 	ldrb.w	r3, [r7, #152]	@ 0x98
 800f22c:	2b00      	cmp	r3, #0
 800f22e:	f000 84b9 	beq.w	800fba4 <ProcessMacCommands+0x9a8>
 800f232:	f897 3098 	ldrb.w	r3, [r7, #152]	@ 0x98
 800f236:	2b01      	cmp	r3, #1
 800f238:	f040 84ba 	bne.w	800fbb0 <ProcessMacCommands+0x9b4>
        // Do only parse MAC commands for Class A RX windows
        return;
    }
#endif /* LORAMAC_VERSION */

    while( macIndex < commandsSize )
 800f23c:	f000 bcb2 	b.w	800fba4 <ProcessMacCommands+0x9a8>
    {
        // Make sure to parse only complete MAC commands
        if( ( LoRaMacCommandsGetCmdSize( payload[macIndex] ) + macIndex ) > commandsSize )
 800f240:	78fb      	ldrb	r3, [r7, #3]
 800f242:	687a      	ldr	r2, [r7, #4]
 800f244:	4413      	add	r3, r2
 800f246:	781b      	ldrb	r3, [r3, #0]
 800f248:	4618      	mov	r0, r3
 800f24a:	f003 fd41 	bl	8012cd0 <LoRaMacCommandsGetCmdSize>
 800f24e:	4603      	mov	r3, r0
 800f250:	461a      	mov	r2, r3
 800f252:	78fb      	ldrb	r3, [r7, #3]
 800f254:	441a      	add	r2, r3
 800f256:	78bb      	ldrb	r3, [r7, #2]
 800f258:	429a      	cmp	r2, r3
 800f25a:	f300 84ab 	bgt.w	800fbb4 <ProcessMacCommands+0x9b8>
        {
            return;
        }

        // Decode Frame MAC commands
        switch( payload[macIndex++] )
 800f25e:	78fb      	ldrb	r3, [r7, #3]
 800f260:	1c5a      	adds	r2, r3, #1
 800f262:	70fa      	strb	r2, [r7, #3]
 800f264:	461a      	mov	r2, r3
 800f266:	687b      	ldr	r3, [r7, #4]
 800f268:	4413      	add	r3, r2
 800f26a:	781b      	ldrb	r3, [r3, #0]
 800f26c:	3b02      	subs	r3, #2
 800f26e:	2b11      	cmp	r3, #17
 800f270:	f200 84a2 	bhi.w	800fbb8 <ProcessMacCommands+0x9bc>
 800f274:	a201      	add	r2, pc, #4	@ (adr r2, 800f27c <ProcessMacCommands+0x80>)
 800f276:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f27a:	bf00      	nop
 800f27c:	0800f2c5 	.word	0x0800f2c5
 800f280:	0800f307 	.word	0x0800f307
 800f284:	0800f483 	.word	0x0800f483
 800f288:	0800f4c1 	.word	0x0800f4c1
 800f28c:	0800f5b9 	.word	0x0800f5b9
 800f290:	0800f609 	.word	0x0800f609
 800f294:	0800f6c5 	.word	0x0800f6c5
 800f298:	0800f71b 	.word	0x0800f71b
 800f29c:	0800f7ff 	.word	0x0800f7ff
 800f2a0:	0800fbb9 	.word	0x0800fbb9
 800f2a4:	0800fbb9 	.word	0x0800fbb9
 800f2a8:	0800f8a9 	.word	0x0800f8a9
 800f2ac:	0800fbb9 	.word	0x0800fbb9
 800f2b0:	0800fbb9 	.word	0x0800fbb9
 800f2b4:	0800f9c9 	.word	0x0800f9c9
 800f2b8:	0800f9fd 	.word	0x0800f9fd
 800f2bc:	0800fa8d 	.word	0x0800fa8d
 800f2c0:	0800fb05 	.word	0x0800fb05
        {
            case SRV_MAC_LINK_CHECK_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_LINK_CHECK ) == true )
 800f2c4:	2004      	movs	r0, #4
 800f2c6:	f003 fedb 	bl	8013080 <LoRaMacConfirmQueueIsCmdActive>
 800f2ca:	4603      	mov	r3, r0
 800f2cc:	2b00      	cmp	r3, #0
 800f2ce:	f000 845c 	beq.w	800fb8a <ProcessMacCommands+0x98e>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_LINK_CHECK );
 800f2d2:	2104      	movs	r1, #4
 800f2d4:	2000      	movs	r0, #0
 800f2d6:	f003 fe47 	bl	8012f68 <LoRaMacConfirmQueueSetStatus>
                    MacCtx.MlmeConfirm.DemodMargin = payload[macIndex++];
 800f2da:	78fb      	ldrb	r3, [r7, #3]
 800f2dc:	1c5a      	adds	r2, r3, #1
 800f2de:	70fa      	strb	r2, [r7, #3]
 800f2e0:	461a      	mov	r2, r3
 800f2e2:	687b      	ldr	r3, [r7, #4]
 800f2e4:	4413      	add	r3, r2
 800f2e6:	781a      	ldrb	r2, [r3, #0]
 800f2e8:	4bb0      	ldr	r3, [pc, #704]	@ (800f5ac <ProcessMacCommands+0x3b0>)
 800f2ea:	f883 2460 	strb.w	r2, [r3, #1120]	@ 0x460
                    MacCtx.MlmeConfirm.NbGateways = payload[macIndex++];
 800f2ee:	78fb      	ldrb	r3, [r7, #3]
 800f2f0:	1c5a      	adds	r2, r3, #1
 800f2f2:	70fa      	strb	r2, [r7, #3]
 800f2f4:	461a      	mov	r2, r3
 800f2f6:	687b      	ldr	r3, [r7, #4]
 800f2f8:	4413      	add	r3, r2
 800f2fa:	781a      	ldrb	r2, [r3, #0]
 800f2fc:	4bab      	ldr	r3, [pc, #684]	@ (800f5ac <ProcessMacCommands+0x3b0>)
 800f2fe:	f883 2461 	strb.w	r2, [r3, #1121]	@ 0x461
                }
                break;
 800f302:	f000 bc42 	b.w	800fb8a <ProcessMacCommands+0x98e>
            }
            case SRV_MAC_LINK_ADR_REQ:
            {
                LinkAdrReqParams_t linkAdrReq;
                int8_t linkAdrDatarate = DR_0;
 800f306:	2300      	movs	r3, #0
 800f308:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
                int8_t linkAdrTxPower = TX_POWER_0;
 800f30c:	2300      	movs	r3, #0
 800f30e:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
                uint8_t linkAdrNbRep = 0;
 800f312:	2300      	movs	r3, #0
 800f314:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
                uint8_t linkAdrNbBytesParsed = 0;
 800f318:	2300      	movs	r3, #0
 800f31a:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
                    }
                    // Update MAC index
                    macIndex += linkAdrNbBytesParsed - 1;
                }
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
                if( adrBlockFound == false )
 800f31e:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 800f322:	f083 0301 	eor.w	r3, r3, #1
 800f326:	b2db      	uxtb	r3, r3
 800f328:	2b00      	cmp	r3, #0
 800f32a:	f000 80a6 	beq.w	800f47a <ProcessMacCommands+0x27e>
                {
                    adrBlockFound = true;
 800f32e:	2301      	movs	r3, #1
 800f330:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87

                    do
                    {
                        // Fill parameter structure
                        linkAdrReq.Payload = &payload[macIndex - 1];
 800f334:	78fb      	ldrb	r3, [r7, #3]
 800f336:	3b01      	subs	r3, #1
 800f338:	687a      	ldr	r2, [r7, #4]
 800f33a:	4413      	add	r3, r2
 800f33c:	65fb      	str	r3, [r7, #92]	@ 0x5c
                        linkAdrReq.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 800f33e:	4b9c      	ldr	r3, [pc, #624]	@ (800f5b0 <ProcessMacCommands+0x3b4>)
 800f340:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 800f344:	f887 3062 	strb.w	r3, [r7, #98]	@ 0x62
                        linkAdrReq.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800f348:	4b99      	ldr	r3, [pc, #612]	@ (800f5b0 <ProcessMacCommands+0x3b4>)
 800f34a:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 800f34e:	f887 3061 	strb.w	r3, [r7, #97]	@ 0x61
                        linkAdrReq.CurrentDatarate = Nvm.MacGroup1.ChannelsDatarate;
 800f352:	4b97      	ldr	r3, [pc, #604]	@ (800f5b0 <ProcessMacCommands+0x3b4>)
 800f354:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 800f358:	f887 3063 	strb.w	r3, [r7, #99]	@ 0x63
                        linkAdrReq.CurrentTxPower = Nvm.MacGroup1.ChannelsTxPower;
 800f35c:	4b94      	ldr	r3, [pc, #592]	@ (800f5b0 <ProcessMacCommands+0x3b4>)
 800f35e:	f993 3038 	ldrsb.w	r3, [r3, #56]	@ 0x38
 800f362:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
                        linkAdrReq.CurrentNbRep = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 800f366:	4b92      	ldr	r3, [pc, #584]	@ (800f5b0 <ProcessMacCommands+0x3b4>)
 800f368:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
 800f36c:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
                        linkAdrReq.Version = Nvm.MacGroup2.Version;
 800f370:	4b8f      	ldr	r3, [pc, #572]	@ (800f5b0 <ProcessMacCommands+0x3b4>)
 800f372:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 800f376:	65bb      	str	r3, [r7, #88]	@ 0x58

                        // There is a fundamental difference in reporting the status
                        // of the LinkAdrRequests when ADR is on or off. When ADR is on, every
                        // LinkAdrAns contains the same value. This does not hold when ADR is off,
                        // where every LinkAdrAns requires an individual status.
                        if( Nvm.MacGroup2.AdrCtrlOn == true )
 800f378:	4b8d      	ldr	r3, [pc, #564]	@ (800f5b0 <ProcessMacCommands+0x3b4>)
 800f37a:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 800f37e:	2b00      	cmp	r3, #0
 800f380:	d008      	beq.n	800f394 <ProcessMacCommands+0x198>
                        {
                            // When ADR is on, the function RegionLinkAdrReq will take care
                            // about the parsing and interpretation of the LinkAdrRequest block and
                            // it provides one status which shall be applied to every LinkAdrAns
                            linkAdrReq.PayloadSize = commandsSize - ( macIndex - 1 );
 800f382:	78ba      	ldrb	r2, [r7, #2]
 800f384:	78fb      	ldrb	r3, [r7, #3]
 800f386:	1ad3      	subs	r3, r2, r3
 800f388:	b2db      	uxtb	r3, r3
 800f38a:	3301      	adds	r3, #1
 800f38c:	b2db      	uxtb	r3, r3
 800f38e:	f887 3060 	strb.w	r3, [r7, #96]	@ 0x60
 800f392:	e002      	b.n	800f39a <ProcessMacCommands+0x19e>
                            // When ADR is off, this function will loop over the individual LinkAdrRequests
                            // and will call RegionLinkAdrReq for each individually, as every request
                            // requires an individual answer.
                            // When ADR is off, the function RegionLinkAdrReq ignores the new values for
                            // ChannelsDatarate, ChannelsTxPower and ChannelsNbTrans.
                            linkAdrReq.PayloadSize = 5;
 800f394:	2305      	movs	r3, #5
 800f396:	f887 3060 	strb.w	r3, [r7, #96]	@ 0x60
                        }

                        // Process the ADR requests
                        status = RegionLinkAdrReq( Nvm.MacGroup2.Region, &linkAdrReq, &linkAdrDatarate,
 800f39a:	4b85      	ldr	r3, [pc, #532]	@ (800f5b0 <ProcessMacCommands+0x3b4>)
 800f39c:	f893 0040 	ldrb.w	r0, [r3, #64]	@ 0x40
 800f3a0:	f107 0456 	add.w	r4, r7, #86	@ 0x56
 800f3a4:	f107 0257 	add.w	r2, r7, #87	@ 0x57
 800f3a8:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 800f3ac:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800f3b0:	9301      	str	r3, [sp, #4]
 800f3b2:	f107 0355 	add.w	r3, r7, #85	@ 0x55
 800f3b6:	9300      	str	r3, [sp, #0]
 800f3b8:	4623      	mov	r3, r4
 800f3ba:	f005 f96c 	bl	8014696 <RegionLinkAdrReq>
 800f3be:	4603      	mov	r3, r0
 800f3c0:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
                                                &linkAdrTxPower, &linkAdrNbRep, &linkAdrNbBytesParsed );

                        if( ( status & 0x07 ) == 0x07 )
 800f3c4:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 800f3c8:	f003 0307 	and.w	r3, r3, #7
 800f3cc:	2b07      	cmp	r3, #7
 800f3ce:	d119      	bne.n	800f404 <ProcessMacCommands+0x208>
                        {
                            // Set the status that the datarate has been increased
                            if( linkAdrDatarate > Nvm.MacGroup1.ChannelsDatarate )
 800f3d0:	4b77      	ldr	r3, [pc, #476]	@ (800f5b0 <ProcessMacCommands+0x3b4>)
 800f3d2:	f993 2039 	ldrsb.w	r2, [r3, #57]	@ 0x39
 800f3d6:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 800f3da:	429a      	cmp	r2, r3
 800f3dc:	da03      	bge.n	800f3e6 <ProcessMacCommands+0x1ea>
                            {
                                Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = true;
 800f3de:	4b74      	ldr	r3, [pc, #464]	@ (800f5b0 <ProcessMacCommands+0x3b4>)
 800f3e0:	2201      	movs	r2, #1
 800f3e2:	f883 2109 	strb.w	r2, [r3, #265]	@ 0x109
                            }
                            Nvm.MacGroup1.ChannelsDatarate = linkAdrDatarate;
 800f3e6:	f997 2057 	ldrsb.w	r2, [r7, #87]	@ 0x57
 800f3ea:	4b71      	ldr	r3, [pc, #452]	@ (800f5b0 <ProcessMacCommands+0x3b4>)
 800f3ec:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
                            Nvm.MacGroup1.ChannelsTxPower = linkAdrTxPower;
 800f3f0:	f997 2056 	ldrsb.w	r2, [r7, #86]	@ 0x56
 800f3f4:	4b6e      	ldr	r3, [pc, #440]	@ (800f5b0 <ProcessMacCommands+0x3b4>)
 800f3f6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
                            Nvm.MacGroup2.MacParams.ChannelsNbTrans = linkAdrNbRep;
 800f3fa:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 800f3fe:	4b6c      	ldr	r3, [pc, #432]	@ (800f5b0 <ProcessMacCommands+0x3b4>)
 800f400:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
                        }

                        // Add the answers to the buffer
                        for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 800f404:	2300      	movs	r3, #0
 800f406:	f887 3086 	strb.w	r3, [r7, #134]	@ 0x86
 800f40a:	e00b      	b.n	800f424 <ProcessMacCommands+0x228>
                        {
                            LoRaMacCommandsAddCmd( MOTE_MAC_LINK_ADR_ANS, &status, 1 );
 800f40c:	f107 036b 	add.w	r3, r7, #107	@ 0x6b
 800f410:	2201      	movs	r2, #1
 800f412:	4619      	mov	r1, r3
 800f414:	2003      	movs	r0, #3
 800f416:	f003 fb0b 	bl	8012a30 <LoRaMacCommandsAddCmd>
                        for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 800f41a:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
 800f41e:	3301      	adds	r3, #1
 800f420:	f887 3086 	strb.w	r3, [r7, #134]	@ 0x86
 800f424:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 800f428:	4a62      	ldr	r2, [pc, #392]	@ (800f5b4 <ProcessMacCommands+0x3b8>)
 800f42a:	fba2 2303 	umull	r2, r3, r2, r3
 800f42e:	089b      	lsrs	r3, r3, #2
 800f430:	b2db      	uxtb	r3, r3
 800f432:	f897 2086 	ldrb.w	r2, [r7, #134]	@ 0x86
 800f436:	429a      	cmp	r2, r3
 800f438:	d3e8      	bcc.n	800f40c <ProcessMacCommands+0x210>
                        }
                        // Update MAC index
                        macIndex += linkAdrNbBytesParsed - 1;
 800f43a:	f897 2054 	ldrb.w	r2, [r7, #84]	@ 0x54
 800f43e:	78fb      	ldrb	r3, [r7, #3]
 800f440:	4413      	add	r3, r2
 800f442:	b2db      	uxtb	r3, r3
 800f444:	3b01      	subs	r3, #1
 800f446:	70fb      	strb	r3, [r7, #3]

                        // Check to prevent invalid access
                        if( macIndex >= commandsSize )
 800f448:	78fa      	ldrb	r2, [r7, #3]
 800f44a:	78bb      	ldrb	r3, [r7, #2]
 800f44c:	429a      	cmp	r2, r3
 800f44e:	d20a      	bcs.n	800f466 <ProcessMacCommands+0x26a>
                            break;

                    } while( payload[macIndex++] == SRV_MAC_LINK_ADR_REQ );
 800f450:	78fb      	ldrb	r3, [r7, #3]
 800f452:	1c5a      	adds	r2, r3, #1
 800f454:	70fa      	strb	r2, [r7, #3]
 800f456:	461a      	mov	r2, r3
 800f458:	687b      	ldr	r3, [r7, #4]
 800f45a:	4413      	add	r3, r2
 800f45c:	781b      	ldrb	r3, [r3, #0]
 800f45e:	2b03      	cmp	r3, #3
 800f460:	f43f af68 	beq.w	800f334 <ProcessMacCommands+0x138>
 800f464:	e000      	b.n	800f468 <ProcessMacCommands+0x26c>
                            break;
 800f466:	bf00      	nop

                    if( macIndex < commandsSize )
 800f468:	78fa      	ldrb	r2, [r7, #3]
 800f46a:	78bb      	ldrb	r3, [r7, #2]
 800f46c:	429a      	cmp	r2, r3
 800f46e:	f080 838e 	bcs.w	800fb8e <ProcessMacCommands+0x992>
                    {
                        // Decrease the index such that it points to the next MAC command
                        macIndex--;
 800f472:	78fb      	ldrb	r3, [r7, #3]
 800f474:	3b01      	subs	r3, #1
 800f476:	70fb      	strb	r3, [r7, #3]
                {
                    // Increase the index by the MAC command size (without command)
                    macIndex += 4;
                }
#endif /* LORAMAC_VERSION */
                break;
 800f478:	e389      	b.n	800fb8e <ProcessMacCommands+0x992>
                    macIndex += 4;
 800f47a:	78fb      	ldrb	r3, [r7, #3]
 800f47c:	3304      	adds	r3, #4
 800f47e:	70fb      	strb	r3, [r7, #3]
                break;
 800f480:	e385      	b.n	800fb8e <ProcessMacCommands+0x992>
            }
            case SRV_MAC_DUTY_CYCLE_REQ:
            {
                Nvm.MacGroup2.MaxDCycle = payload[macIndex++] & 0x0F;
 800f482:	78fb      	ldrb	r3, [r7, #3]
 800f484:	1c5a      	adds	r2, r3, #1
 800f486:	70fa      	strb	r2, [r7, #3]
 800f488:	461a      	mov	r2, r3
 800f48a:	687b      	ldr	r3, [r7, #4]
 800f48c:	4413      	add	r3, r2
 800f48e:	781b      	ldrb	r3, [r3, #0]
 800f490:	f003 030f 	and.w	r3, r3, #15
 800f494:	b2da      	uxtb	r2, r3
 800f496:	4b46      	ldr	r3, [pc, #280]	@ (800f5b0 <ProcessMacCommands+0x3b4>)
 800f498:	f883 2107 	strb.w	r2, [r3, #263]	@ 0x107
                Nvm.MacGroup2.AggregatedDCycle = 1 << Nvm.MacGroup2.MaxDCycle;
 800f49c:	4b44      	ldr	r3, [pc, #272]	@ (800f5b0 <ProcessMacCommands+0x3b4>)
 800f49e:	f893 3107 	ldrb.w	r3, [r3, #263]	@ 0x107
 800f4a2:	461a      	mov	r2, r3
 800f4a4:	2301      	movs	r3, #1
 800f4a6:	4093      	lsls	r3, r2
 800f4a8:	b29a      	uxth	r2, r3
 800f4aa:	4b41      	ldr	r3, [pc, #260]	@ (800f5b0 <ProcessMacCommands+0x3b4>)
 800f4ac:	f8a3 210c 	strh.w	r2, [r3, #268]	@ 0x10c
                LoRaMacCommandsAddCmd( MOTE_MAC_DUTY_CYCLE_ANS, macCmdPayload, 0 );
 800f4b0:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800f4b4:	2200      	movs	r2, #0
 800f4b6:	4619      	mov	r1, r3
 800f4b8:	2004      	movs	r0, #4
 800f4ba:	f003 fab9 	bl	8012a30 <LoRaMacCommandsAddCmd>
                break;
 800f4be:	e371      	b.n	800fba4 <ProcessMacCommands+0x9a8>
            }
            case SRV_MAC_RX_PARAM_SETUP_REQ:
            {
                RxParamSetupReqParams_t rxParamSetupReq;
                status = 0x07;
 800f4c0:	2307      	movs	r3, #7
 800f4c2:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b

                rxParamSetupReq.DrOffset = ( payload[macIndex] >> 4 ) & 0x07;
 800f4c6:	78fb      	ldrb	r3, [r7, #3]
 800f4c8:	687a      	ldr	r2, [r7, #4]
 800f4ca:	4413      	add	r3, r2
 800f4cc:	781b      	ldrb	r3, [r3, #0]
 800f4ce:	091b      	lsrs	r3, r3, #4
 800f4d0:	b2db      	uxtb	r3, r3
 800f4d2:	b25b      	sxtb	r3, r3
 800f4d4:	f003 0307 	and.w	r3, r3, #7
 800f4d8:	b25b      	sxtb	r3, r3
 800f4da:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
                rxParamSetupReq.Datarate = payload[macIndex] & 0x0F;
 800f4de:	78fb      	ldrb	r3, [r7, #3]
 800f4e0:	687a      	ldr	r2, [r7, #4]
 800f4e2:	4413      	add	r3, r2
 800f4e4:	781b      	ldrb	r3, [r3, #0]
 800f4e6:	b25b      	sxtb	r3, r3
 800f4e8:	f003 030f 	and.w	r3, r3, #15
 800f4ec:	b25b      	sxtb	r3, r3
 800f4ee:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
                macIndex++;
 800f4f2:	78fb      	ldrb	r3, [r7, #3]
 800f4f4:	3301      	adds	r3, #1
 800f4f6:	70fb      	strb	r3, [r7, #3]

                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
 800f4f8:	78fb      	ldrb	r3, [r7, #3]
 800f4fa:	1c5a      	adds	r2, r3, #1
 800f4fc:	70fa      	strb	r2, [r7, #3]
 800f4fe:	461a      	mov	r2, r3
 800f500:	687b      	ldr	r3, [r7, #4]
 800f502:	4413      	add	r3, r2
 800f504:	781b      	ldrb	r3, [r3, #0]
 800f506:	653b      	str	r3, [r7, #80]	@ 0x50
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800f508:	78fb      	ldrb	r3, [r7, #3]
 800f50a:	1c5a      	adds	r2, r3, #1
 800f50c:	70fa      	strb	r2, [r7, #3]
 800f50e:	461a      	mov	r2, r3
 800f510:	687b      	ldr	r3, [r7, #4]
 800f512:	4413      	add	r3, r2
 800f514:	781b      	ldrb	r3, [r3, #0]
 800f516:	021a      	lsls	r2, r3, #8
 800f518:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f51a:	4313      	orrs	r3, r2
 800f51c:	653b      	str	r3, [r7, #80]	@ 0x50
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800f51e:	78fb      	ldrb	r3, [r7, #3]
 800f520:	1c5a      	adds	r2, r3, #1
 800f522:	70fa      	strb	r2, [r7, #3]
 800f524:	461a      	mov	r2, r3
 800f526:	687b      	ldr	r3, [r7, #4]
 800f528:	4413      	add	r3, r2
 800f52a:	781b      	ldrb	r3, [r3, #0]
 800f52c:	041a      	lsls	r2, r3, #16
 800f52e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f530:	4313      	orrs	r3, r2
 800f532:	653b      	str	r3, [r7, #80]	@ 0x50
                rxParamSetupReq.Frequency *= 100;
 800f534:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f536:	2264      	movs	r2, #100	@ 0x64
 800f538:	fb02 f303 	mul.w	r3, r2, r3
 800f53c:	653b      	str	r3, [r7, #80]	@ 0x50

                // Perform request on region
                status = RegionRxParamSetupReq( Nvm.MacGroup2.Region, &rxParamSetupReq );
 800f53e:	4b1c      	ldr	r3, [pc, #112]	@ (800f5b0 <ProcessMacCommands+0x3b4>)
 800f540:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800f544:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 800f548:	4611      	mov	r1, r2
 800f54a:	4618      	mov	r0, r3
 800f54c:	f005 f8bd 	bl	80146ca <RegionRxParamSetupReq>
 800f550:	4603      	mov	r3, r0
 800f552:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b

                if( ( status & 0x07 ) == 0x07 )
 800f556:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 800f55a:	f003 0307 	and.w	r3, r3, #7
 800f55e:	2b07      	cmp	r3, #7
 800f560:	d117      	bne.n	800f592 <ProcessMacCommands+0x396>
                {
                    Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = rxParamSetupReq.Datarate;
 800f562:	f997 304c 	ldrsb.w	r3, [r7, #76]	@ 0x4c
 800f566:	b2da      	uxtb	r2, r3
 800f568:	4b11      	ldr	r3, [pc, #68]	@ (800f5b0 <ProcessMacCommands+0x3b4>)
 800f56a:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
                    Nvm.MacGroup2.MacParams.RxCChannel.Datarate = rxParamSetupReq.Datarate;
 800f56e:	f997 304c 	ldrsb.w	r3, [r7, #76]	@ 0x4c
 800f572:	b2da      	uxtb	r2, r3
 800f574:	4b0e      	ldr	r3, [pc, #56]	@ (800f5b0 <ProcessMacCommands+0x3b4>)
 800f576:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
                    Nvm.MacGroup2.MacParams.Rx2Channel.Frequency = rxParamSetupReq.Frequency;
 800f57a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f57c:	4a0c      	ldr	r2, [pc, #48]	@ (800f5b0 <ProcessMacCommands+0x3b4>)
 800f57e:	6653      	str	r3, [r2, #100]	@ 0x64
                    Nvm.MacGroup2.MacParams.RxCChannel.Frequency = rxParamSetupReq.Frequency;
 800f580:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f582:	4a0b      	ldr	r2, [pc, #44]	@ (800f5b0 <ProcessMacCommands+0x3b4>)
 800f584:	66d3      	str	r3, [r2, #108]	@ 0x6c
                    Nvm.MacGroup2.MacParams.Rx1DrOffset = rxParamSetupReq.DrOffset;
 800f586:	f997 304d 	ldrsb.w	r3, [r7, #77]	@ 0x4d
 800f58a:	b2da      	uxtb	r2, r3
 800f58c:	4b08      	ldr	r3, [pc, #32]	@ (800f5b0 <ProcessMacCommands+0x3b4>)
 800f58e:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
                }
                macCmdPayload[0] = status;
 800f592:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 800f596:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_PARAM_SETUP_ANS, macCmdPayload, 1 );
 800f59a:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800f59e:	2201      	movs	r2, #1
 800f5a0:	4619      	mov	r1, r3
 800f5a2:	2005      	movs	r0, #5
 800f5a4:	f003 fa44 	bl	8012a30 <LoRaMacCommandsAddCmd>
                /*ST_WORKAROUND_BEGIN: remove unnecessary mlme operation to prevent uplinks burst */
                // Setup indication to inform the application
                /* SetMlmeScheduleUplinkIndication( ); */
                /*ST_WORKAROUND_END */
                break;
 800f5a8:	e2fc      	b.n	800fba4 <ProcessMacCommands+0x9a8>
 800f5aa:	bf00      	nop
 800f5ac:	20000670 	.word	0x20000670
 800f5b0:	20000b90 	.word	0x20000b90
 800f5b4:	cccccccd 	.word	0xcccccccd
            }
            case SRV_MAC_DEV_STATUS_REQ:
            {
                uint8_t batteryLevel = BAT_LEVEL_NO_MEASURE;
 800f5b8:	23ff      	movs	r3, #255	@ 0xff
 800f5ba:	f887 3085 	strb.w	r3, [r7, #133]	@ 0x85
                if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->GetBatteryLevel != NULL ) )
 800f5be:	4bb7      	ldr	r3, [pc, #732]	@ (800f89c <ProcessMacCommands+0x6a0>)
 800f5c0:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800f5c4:	2b00      	cmp	r3, #0
 800f5c6:	d00d      	beq.n	800f5e4 <ProcessMacCommands+0x3e8>
 800f5c8:	4bb4      	ldr	r3, [pc, #720]	@ (800f89c <ProcessMacCommands+0x6a0>)
 800f5ca:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800f5ce:	681b      	ldr	r3, [r3, #0]
 800f5d0:	2b00      	cmp	r3, #0
 800f5d2:	d007      	beq.n	800f5e4 <ProcessMacCommands+0x3e8>
                {
                    batteryLevel = MacCtx.MacCallbacks->GetBatteryLevel( );
 800f5d4:	4bb1      	ldr	r3, [pc, #708]	@ (800f89c <ProcessMacCommands+0x6a0>)
 800f5d6:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800f5da:	681b      	ldr	r3, [r3, #0]
 800f5dc:	4798      	blx	r3
 800f5de:	4603      	mov	r3, r0
 800f5e0:	f887 3085 	strb.w	r3, [r7, #133]	@ 0x85
                }
                macCmdPayload[0] = batteryLevel;
 800f5e4:	f897 3085 	ldrb.w	r3, [r7, #133]	@ 0x85
 800f5e8:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
                macCmdPayload[1] = ( uint8_t )( snr & 0x3F );
 800f5ec:	787b      	ldrb	r3, [r7, #1]
 800f5ee:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800f5f2:	b2db      	uxtb	r3, r3
 800f5f4:	f887 3069 	strb.w	r3, [r7, #105]	@ 0x69
                LoRaMacCommandsAddCmd( MOTE_MAC_DEV_STATUS_ANS, macCmdPayload, 2 );
 800f5f8:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800f5fc:	2202      	movs	r2, #2
 800f5fe:	4619      	mov	r1, r3
 800f600:	2006      	movs	r0, #6
 800f602:	f003 fa15 	bl	8012a30 <LoRaMacCommandsAddCmd>
                break;
 800f606:	e2cd      	b.n	800fba4 <ProcessMacCommands+0x9a8>
            }
            case SRV_MAC_NEW_CHANNEL_REQ:
            {
                NewChannelReqParams_t newChannelReq;
                ChannelParams_t chParam;
                status = 0x03;
 800f608:	2303      	movs	r3, #3
 800f60a:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b

                newChannelReq.ChannelId = payload[macIndex++];
 800f60e:	78fb      	ldrb	r3, [r7, #3]
 800f610:	1c5a      	adds	r2, r3, #1
 800f612:	70fa      	strb	r2, [r7, #3]
 800f614:	461a      	mov	r2, r3
 800f616:	687b      	ldr	r3, [r7, #4]
 800f618:	4413      	add	r3, r2
 800f61a:	781b      	ldrb	r3, [r3, #0]
 800f61c:	b25b      	sxtb	r3, r3
 800f61e:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
                newChannelReq.NewChannel = &chParam;
 800f622:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800f626:	647b      	str	r3, [r7, #68]	@ 0x44

                chParam.Frequency = ( uint32_t ) payload[macIndex++];
 800f628:	78fb      	ldrb	r3, [r7, #3]
 800f62a:	1c5a      	adds	r2, r3, #1
 800f62c:	70fa      	strb	r2, [r7, #3]
 800f62e:	461a      	mov	r2, r3
 800f630:	687b      	ldr	r3, [r7, #4]
 800f632:	4413      	add	r3, r2
 800f634:	781b      	ldrb	r3, [r3, #0]
 800f636:	63bb      	str	r3, [r7, #56]	@ 0x38
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800f638:	78fb      	ldrb	r3, [r7, #3]
 800f63a:	1c5a      	adds	r2, r3, #1
 800f63c:	70fa      	strb	r2, [r7, #3]
 800f63e:	461a      	mov	r2, r3
 800f640:	687b      	ldr	r3, [r7, #4]
 800f642:	4413      	add	r3, r2
 800f644:	781b      	ldrb	r3, [r3, #0]
 800f646:	021a      	lsls	r2, r3, #8
 800f648:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f64a:	4313      	orrs	r3, r2
 800f64c:	63bb      	str	r3, [r7, #56]	@ 0x38
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800f64e:	78fb      	ldrb	r3, [r7, #3]
 800f650:	1c5a      	adds	r2, r3, #1
 800f652:	70fa      	strb	r2, [r7, #3]
 800f654:	461a      	mov	r2, r3
 800f656:	687b      	ldr	r3, [r7, #4]
 800f658:	4413      	add	r3, r2
 800f65a:	781b      	ldrb	r3, [r3, #0]
 800f65c:	041a      	lsls	r2, r3, #16
 800f65e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f660:	4313      	orrs	r3, r2
 800f662:	63bb      	str	r3, [r7, #56]	@ 0x38
                chParam.Frequency *= 100;
 800f664:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f666:	2264      	movs	r2, #100	@ 0x64
 800f668:	fb02 f303 	mul.w	r3, r2, r3
 800f66c:	63bb      	str	r3, [r7, #56]	@ 0x38
                chParam.Rx1Frequency = 0;
 800f66e:	2300      	movs	r3, #0
 800f670:	63fb      	str	r3, [r7, #60]	@ 0x3c
                chParam.DrRange.Value = payload[macIndex++];
 800f672:	78fb      	ldrb	r3, [r7, #3]
 800f674:	1c5a      	adds	r2, r3, #1
 800f676:	70fa      	strb	r2, [r7, #3]
 800f678:	461a      	mov	r2, r3
 800f67a:	687b      	ldr	r3, [r7, #4]
 800f67c:	4413      	add	r3, r2
 800f67e:	781b      	ldrb	r3, [r3, #0]
 800f680:	b25b      	sxtb	r3, r3
 800f682:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40

                status = ( uint8_t )RegionNewChannelReq( Nvm.MacGroup2.Region, &newChannelReq );
 800f686:	4b86      	ldr	r3, [pc, #536]	@ (800f8a0 <ProcessMacCommands+0x6a4>)
 800f688:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800f68c:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 800f690:	4611      	mov	r1, r2
 800f692:	4618      	mov	r0, r3
 800f694:	f005 f82c 	bl	80146f0 <RegionNewChannelReq>
 800f698:	4603      	mov	r3, r0
 800f69a:	b2db      	uxtb	r3, r3
 800f69c:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b

                if( ( int8_t )status >= 0 )
 800f6a0:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 800f6a4:	b25b      	sxtb	r3, r3
 800f6a6:	2b00      	cmp	r3, #0
 800f6a8:	f2c0 8273 	blt.w	800fb92 <ProcessMacCommands+0x996>
                {
                    macCmdPayload[0] = status;
 800f6ac:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 800f6b0:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
                    LoRaMacCommandsAddCmd( MOTE_MAC_NEW_CHANNEL_ANS, macCmdPayload, 1 );
 800f6b4:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800f6b8:	2201      	movs	r2, #1
 800f6ba:	4619      	mov	r1, r3
 800f6bc:	2007      	movs	r0, #7
 800f6be:	f003 f9b7 	bl	8012a30 <LoRaMacCommandsAddCmd>
                }
                break;
 800f6c2:	e266      	b.n	800fb92 <ProcessMacCommands+0x996>
            }
            case SRV_MAC_RX_TIMING_SETUP_REQ:
            {
                uint8_t delay = payload[macIndex++] & 0x0F;
 800f6c4:	78fb      	ldrb	r3, [r7, #3]
 800f6c6:	1c5a      	adds	r2, r3, #1
 800f6c8:	70fa      	strb	r2, [r7, #3]
 800f6ca:	461a      	mov	r2, r3
 800f6cc:	687b      	ldr	r3, [r7, #4]
 800f6ce:	4413      	add	r3, r2
 800f6d0:	781b      	ldrb	r3, [r3, #0]
 800f6d2:	f003 030f 	and.w	r3, r3, #15
 800f6d6:	f887 3084 	strb.w	r3, [r7, #132]	@ 0x84

                if( delay == 0 )
 800f6da:	f897 3084 	ldrb.w	r3, [r7, #132]	@ 0x84
 800f6de:	2b00      	cmp	r3, #0
 800f6e0:	d104      	bne.n	800f6ec <ProcessMacCommands+0x4f0>
                {
                    delay++;
 800f6e2:	f897 3084 	ldrb.w	r3, [r7, #132]	@ 0x84
 800f6e6:	3301      	adds	r3, #1
 800f6e8:	f887 3084 	strb.w	r3, [r7, #132]	@ 0x84
                }
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = delay * 1000;
 800f6ec:	f897 3084 	ldrb.w	r3, [r7, #132]	@ 0x84
 800f6f0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800f6f4:	fb02 f303 	mul.w	r3, r2, r3
 800f6f8:	461a      	mov	r2, r3
 800f6fa:	4b69      	ldr	r3, [pc, #420]	@ (800f8a0 <ProcessMacCommands+0x6a4>)
 800f6fc:	651a      	str	r2, [r3, #80]	@ 0x50
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 800f6fe:	4b68      	ldr	r3, [pc, #416]	@ (800f8a0 <ProcessMacCommands+0x6a4>)
 800f700:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f702:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800f706:	4a66      	ldr	r2, [pc, #408]	@ (800f8a0 <ProcessMacCommands+0x6a4>)
 800f708:	6553      	str	r3, [r2, #84]	@ 0x54
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_TIMING_SETUP_ANS, macCmdPayload, 0 );
 800f70a:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800f70e:	2200      	movs	r2, #0
 800f710:	4619      	mov	r1, r3
 800f712:	2008      	movs	r0, #8
 800f714:	f003 f98c 	bl	8012a30 <LoRaMacCommandsAddCmd>
                /*ST_WORKAROUND_BEGIN: remove unnecessary mlme operation to prevent uplinks burst */
                // Setup indication to inform the application
                /* SetMlmeScheduleUplinkIndication( ); */
                /*ST_WORKAROUND_END */
                break;
 800f718:	e244      	b.n	800fba4 <ProcessMacCommands+0x9a8>
            case SRV_MAC_TX_PARAM_SETUP_REQ:
            {
                TxParamSetupReqParams_t txParamSetupReq;
                GetPhyParams_t getPhy;
                PhyParam_t phyParam;
                uint8_t eirpDwellTime = payload[macIndex++];
 800f71a:	78fb      	ldrb	r3, [r7, #3]
 800f71c:	1c5a      	adds	r2, r3, #1
 800f71e:	70fa      	strb	r2, [r7, #3]
 800f720:	461a      	mov	r2, r3
 800f722:	687b      	ldr	r3, [r7, #4]
 800f724:	4413      	add	r3, r2
 800f726:	781b      	ldrb	r3, [r3, #0]
 800f728:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76

                txParamSetupReq.UplinkDwellTime = 0;
 800f72c:	2300      	movs	r3, #0
 800f72e:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
                txParamSetupReq.DownlinkDwellTime = 0;
 800f732:	2300      	movs	r3, #0
 800f734:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35

                if( ( eirpDwellTime & 0x20 ) == 0x20 )
 800f738:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 800f73c:	f003 0320 	and.w	r3, r3, #32
 800f740:	2b00      	cmp	r3, #0
 800f742:	d002      	beq.n	800f74a <ProcessMacCommands+0x54e>
                {
                    txParamSetupReq.DownlinkDwellTime = 1;
 800f744:	2301      	movs	r3, #1
 800f746:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
                }
                if( ( eirpDwellTime & 0x10 ) == 0x10 )
 800f74a:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 800f74e:	f003 0310 	and.w	r3, r3, #16
 800f752:	2b00      	cmp	r3, #0
 800f754:	d002      	beq.n	800f75c <ProcessMacCommands+0x560>
                {
                    txParamSetupReq.UplinkDwellTime = 1;
 800f756:	2301      	movs	r3, #1
 800f758:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
                }
                txParamSetupReq.MaxEirp = eirpDwellTime & 0x0F;
 800f75c:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 800f760:	f003 030f 	and.w	r3, r3, #15
 800f764:	b2db      	uxtb	r3, r3
 800f766:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

                // Check the status for correctness
                if( RegionTxParamSetupReq( Nvm.MacGroup2.Region, &txParamSetupReq ) != -1 )
 800f76a:	4b4d      	ldr	r3, [pc, #308]	@ (800f8a0 <ProcessMacCommands+0x6a4>)
 800f76c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800f770:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 800f774:	4611      	mov	r1, r2
 800f776:	4618      	mov	r0, r3
 800f778:	f004 ffcd 	bl	8014716 <RegionTxParamSetupReq>
 800f77c:	4603      	mov	r3, r0
 800f77e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f782:	f000 8208 	beq.w	800fb96 <ProcessMacCommands+0x99a>
                {
                    // Accept command
                    Nvm.MacGroup2.MacParams.UplinkDwellTime = txParamSetupReq.UplinkDwellTime;
 800f786:	f897 2034 	ldrb.w	r2, [r7, #52]	@ 0x34
 800f78a:	4b45      	ldr	r3, [pc, #276]	@ (800f8a0 <ProcessMacCommands+0x6a4>)
 800f78c:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
                    Nvm.MacGroup2.MacParams.DownlinkDwellTime = txParamSetupReq.DownlinkDwellTime;
 800f790:	f897 2035 	ldrb.w	r2, [r7, #53]	@ 0x35
 800f794:	4b42      	ldr	r3, [pc, #264]	@ (800f8a0 <ProcessMacCommands+0x6a4>)
 800f796:	f883 2075 	strb.w	r2, [r3, #117]	@ 0x75
                    Nvm.MacGroup2.MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
 800f79a:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800f79e:	461a      	mov	r2, r3
 800f7a0:	4b40      	ldr	r3, [pc, #256]	@ (800f8a4 <ProcessMacCommands+0x6a8>)
 800f7a2:	5c9b      	ldrb	r3, [r3, r2]
 800f7a4:	4618      	mov	r0, r3
 800f7a6:	f7f1 f811 	bl	80007cc <__aeabi_ui2f>
 800f7aa:	4603      	mov	r3, r0
 800f7ac:	4a3c      	ldr	r2, [pc, #240]	@ (800f8a0 <ProcessMacCommands+0x6a4>)
 800f7ae:	6793      	str	r3, [r2, #120]	@ 0x78
                    // Update the datarate in case of the new configuration limits it
                    getPhy.Attribute = PHY_MIN_TX_DR;
 800f7b0:	2302      	movs	r3, #2
 800f7b2:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
                    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800f7b6:	4b3a      	ldr	r3, [pc, #232]	@ (800f8a0 <ProcessMacCommands+0x6a4>)
 800f7b8:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 800f7bc:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
                    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800f7c0:	4b37      	ldr	r3, [pc, #220]	@ (800f8a0 <ProcessMacCommands+0x6a4>)
 800f7c2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800f7c6:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 800f7ca:	4611      	mov	r1, r2
 800f7cc:	4618      	mov	r0, r3
 800f7ce:	f004 fea5 	bl	801451c <RegionGetPhyParam>
 800f7d2:	4603      	mov	r3, r0
 800f7d4:	62bb      	str	r3, [r7, #40]	@ 0x28
                    Nvm.MacGroup1.ChannelsDatarate = MAX( Nvm.MacGroup1.ChannelsDatarate, ( int8_t )phyParam.Value );
 800f7d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f7d8:	b25a      	sxtb	r2, r3
 800f7da:	4b31      	ldr	r3, [pc, #196]	@ (800f8a0 <ProcessMacCommands+0x6a4>)
 800f7dc:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 800f7e0:	4293      	cmp	r3, r2
 800f7e2:	bfb8      	it	lt
 800f7e4:	4613      	movlt	r3, r2
 800f7e6:	b25a      	sxtb	r2, r3
 800f7e8:	4b2d      	ldr	r3, [pc, #180]	@ (800f8a0 <ProcessMacCommands+0x6a4>)
 800f7ea:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

                    // Add command response
                    LoRaMacCommandsAddCmd( MOTE_MAC_TX_PARAM_SETUP_ANS, macCmdPayload, 0 );
 800f7ee:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800f7f2:	2200      	movs	r2, #0
 800f7f4:	4619      	mov	r1, r3
 800f7f6:	2009      	movs	r0, #9
 800f7f8:	f003 f91a 	bl	8012a30 <LoRaMacCommandsAddCmd>
                }
                break;
 800f7fc:	e1cb      	b.n	800fb96 <ProcessMacCommands+0x99a>
            }
            case SRV_MAC_DL_CHANNEL_REQ:
            {
                DlChannelReqParams_t dlChannelReq;
                status = 0x03;
 800f7fe:	2303      	movs	r3, #3
 800f800:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b

                dlChannelReq.ChannelId = payload[macIndex++];
 800f804:	78fb      	ldrb	r3, [r7, #3]
 800f806:	1c5a      	adds	r2, r3, #1
 800f808:	70fa      	strb	r2, [r7, #3]
 800f80a:	461a      	mov	r2, r3
 800f80c:	687b      	ldr	r3, [r7, #4]
 800f80e:	4413      	add	r3, r2
 800f810:	781b      	ldrb	r3, [r3, #0]
 800f812:	f887 3020 	strb.w	r3, [r7, #32]
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
 800f816:	78fb      	ldrb	r3, [r7, #3]
 800f818:	1c5a      	adds	r2, r3, #1
 800f81a:	70fa      	strb	r2, [r7, #3]
 800f81c:	461a      	mov	r2, r3
 800f81e:	687b      	ldr	r3, [r7, #4]
 800f820:	4413      	add	r3, r2
 800f822:	781b      	ldrb	r3, [r3, #0]
 800f824:	627b      	str	r3, [r7, #36]	@ 0x24
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800f826:	78fb      	ldrb	r3, [r7, #3]
 800f828:	1c5a      	adds	r2, r3, #1
 800f82a:	70fa      	strb	r2, [r7, #3]
 800f82c:	461a      	mov	r2, r3
 800f82e:	687b      	ldr	r3, [r7, #4]
 800f830:	4413      	add	r3, r2
 800f832:	781b      	ldrb	r3, [r3, #0]
 800f834:	021a      	lsls	r2, r3, #8
 800f836:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f838:	4313      	orrs	r3, r2
 800f83a:	627b      	str	r3, [r7, #36]	@ 0x24
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800f83c:	78fb      	ldrb	r3, [r7, #3]
 800f83e:	1c5a      	adds	r2, r3, #1
 800f840:	70fa      	strb	r2, [r7, #3]
 800f842:	461a      	mov	r2, r3
 800f844:	687b      	ldr	r3, [r7, #4]
 800f846:	4413      	add	r3, r2
 800f848:	781b      	ldrb	r3, [r3, #0]
 800f84a:	041a      	lsls	r2, r3, #16
 800f84c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f84e:	4313      	orrs	r3, r2
 800f850:	627b      	str	r3, [r7, #36]	@ 0x24
                dlChannelReq.Rx1Frequency *= 100;
 800f852:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f854:	2264      	movs	r2, #100	@ 0x64
 800f856:	fb02 f303 	mul.w	r3, r2, r3
 800f85a:	627b      	str	r3, [r7, #36]	@ 0x24

                status = ( uint8_t )RegionDlChannelReq( Nvm.MacGroup2.Region, &dlChannelReq );
 800f85c:	4b10      	ldr	r3, [pc, #64]	@ (800f8a0 <ProcessMacCommands+0x6a4>)
 800f85e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800f862:	f107 0220 	add.w	r2, r7, #32
 800f866:	4611      	mov	r1, r2
 800f868:	4618      	mov	r0, r3
 800f86a:	f004 ff67 	bl	801473c <RegionDlChannelReq>
 800f86e:	4603      	mov	r3, r0
 800f870:	b2db      	uxtb	r3, r3
 800f872:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b

                if( ( int8_t )status >= 0 )
 800f876:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 800f87a:	b25b      	sxtb	r3, r3
 800f87c:	2b00      	cmp	r3, #0
 800f87e:	f2c0 818c 	blt.w	800fb9a <ProcessMacCommands+0x99e>
                {
                    macCmdPayload[0] = status;
 800f882:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 800f886:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
                    LoRaMacCommandsAddCmd( MOTE_MAC_DL_CHANNEL_ANS, macCmdPayload, 1 );
 800f88a:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800f88e:	2201      	movs	r2, #1
 800f890:	4619      	mov	r1, r3
 800f892:	200a      	movs	r0, #10
 800f894:	f003 f8cc 	bl	8012a30 <LoRaMacCommandsAddCmd>
                    /*ST_WORKAROUND_BEGIN: remove unnecessary mlme operation to prevent uplinks burst */
                    // Setup indication to inform the application
                    /* SetMlmeScheduleUplinkIndication( ); */
                    /*ST_WORKAROUND_END */
                }
                break;
 800f898:	e17f      	b.n	800fb9a <ProcessMacCommands+0x99e>
 800f89a:	bf00      	nop
 800f89c:	20000670 	.word	0x20000670
 800f8a0:	20000b90 	.word	0x20000b90
 800f8a4:	0801c4ac 	.word	0x0801c4ac
            }
            case SRV_MAC_DEVICE_TIME_ANS:
            {
                // The mote time can be updated only when the time is received in classA
                // receive windows only.
                if( LoRaMacConfirmQueueIsCmdActive( MLME_DEVICE_TIME ) == true )
 800f8a8:	2009      	movs	r0, #9
 800f8aa:	f003 fbe9 	bl	8013080 <LoRaMacConfirmQueueIsCmdActive>
 800f8ae:	4603      	mov	r3, r0
 800f8b0:	2b00      	cmp	r3, #0
 800f8b2:	f000 8084 	beq.w	800f9be <ProcessMacCommands+0x7c2>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
 800f8b6:	2109      	movs	r1, #9
 800f8b8:	2000      	movs	r0, #0
 800f8ba:	f003 fb55 	bl	8012f68 <LoRaMacConfirmQueueSetStatus>

                    SysTime_t gpsEpochTime = { 0 };
 800f8be:	f107 0318 	add.w	r3, r7, #24
 800f8c2:	2200      	movs	r2, #0
 800f8c4:	601a      	str	r2, [r3, #0]
 800f8c6:	605a      	str	r2, [r3, #4]
                    SysTime_t sysTime = { 0 };
 800f8c8:	f107 0310 	add.w	r3, r7, #16
 800f8cc:	2200      	movs	r2, #0
 800f8ce:	601a      	str	r2, [r3, #0]
 800f8d0:	605a      	str	r2, [r3, #4]
                    SysTime_t sysTimeCurrent = { 0 };
 800f8d2:	f107 0308 	add.w	r3, r7, #8
 800f8d6:	2200      	movs	r2, #0
 800f8d8:	601a      	str	r2, [r3, #0]
 800f8da:	605a      	str	r2, [r3, #4]

                    gpsEpochTime.Seconds = ( uint32_t )payload[macIndex++];
 800f8dc:	78fb      	ldrb	r3, [r7, #3]
 800f8de:	1c5a      	adds	r2, r3, #1
 800f8e0:	70fa      	strb	r2, [r7, #3]
 800f8e2:	461a      	mov	r2, r3
 800f8e4:	687b      	ldr	r3, [r7, #4]
 800f8e6:	4413      	add	r3, r2
 800f8e8:	781b      	ldrb	r3, [r3, #0]
 800f8ea:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 8;
 800f8ec:	78fb      	ldrb	r3, [r7, #3]
 800f8ee:	1c5a      	adds	r2, r3, #1
 800f8f0:	70fa      	strb	r2, [r7, #3]
 800f8f2:	461a      	mov	r2, r3
 800f8f4:	687b      	ldr	r3, [r7, #4]
 800f8f6:	4413      	add	r3, r2
 800f8f8:	781b      	ldrb	r3, [r3, #0]
 800f8fa:	021a      	lsls	r2, r3, #8
 800f8fc:	69bb      	ldr	r3, [r7, #24]
 800f8fe:	4313      	orrs	r3, r2
 800f900:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 800f902:	78fb      	ldrb	r3, [r7, #3]
 800f904:	1c5a      	adds	r2, r3, #1
 800f906:	70fa      	strb	r2, [r7, #3]
 800f908:	461a      	mov	r2, r3
 800f90a:	687b      	ldr	r3, [r7, #4]
 800f90c:	4413      	add	r3, r2
 800f90e:	781b      	ldrb	r3, [r3, #0]
 800f910:	041a      	lsls	r2, r3, #16
 800f912:	69bb      	ldr	r3, [r7, #24]
 800f914:	4313      	orrs	r3, r2
 800f916:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 800f918:	78fb      	ldrb	r3, [r7, #3]
 800f91a:	1c5a      	adds	r2, r3, #1
 800f91c:	70fa      	strb	r2, [r7, #3]
 800f91e:	461a      	mov	r2, r3
 800f920:	687b      	ldr	r3, [r7, #4]
 800f922:	4413      	add	r3, r2
 800f924:	781b      	ldrb	r3, [r3, #0]
 800f926:	061a      	lsls	r2, r3, #24
 800f928:	69bb      	ldr	r3, [r7, #24]
 800f92a:	4313      	orrs	r3, r2
 800f92c:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.SubSeconds = payload[macIndex++];
 800f92e:	78fb      	ldrb	r3, [r7, #3]
 800f930:	1c5a      	adds	r2, r3, #1
 800f932:	70fa      	strb	r2, [r7, #3]
 800f934:	461a      	mov	r2, r3
 800f936:	687b      	ldr	r3, [r7, #4]
 800f938:	4413      	add	r3, r2
 800f93a:	781b      	ldrb	r3, [r3, #0]
 800f93c:	b21b      	sxth	r3, r3
 800f93e:	83bb      	strh	r3, [r7, #28]

                    // Convert the fractional second received in ms
                    // round( pow( 0.5, 8.0 ) * 1000 ) = 3.90625
                    gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 800f940:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800f944:	461a      	mov	r2, r3
 800f946:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800f94a:	fb02 f303 	mul.w	r3, r2, r3
 800f94e:	121b      	asrs	r3, r3, #8
 800f950:	b21b      	sxth	r3, r3
 800f952:	83bb      	strh	r3, [r7, #28]

                    // Copy received GPS Epoch time into system time
                    sysTime = gpsEpochTime;
 800f954:	f107 0310 	add.w	r3, r7, #16
 800f958:	f107 0218 	add.w	r2, r7, #24
 800f95c:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f960:	e883 0003 	stmia.w	r3, {r0, r1}
                    // Add Unix to Gps epoch offset. The system time is based on Unix time.
                    sysTime.Seconds += UNIX_GPS_EPOCH_OFFSET;
 800f964:	693a      	ldr	r2, [r7, #16]
 800f966:	4b96      	ldr	r3, [pc, #600]	@ (800fbc0 <ProcessMacCommands+0x9c4>)
 800f968:	4413      	add	r3, r2
 800f96a:	613b      	str	r3, [r7, #16]

                    // Compensate time difference between Tx Done time and now
                    sysTimeCurrent = SysTimeGet( );
 800f96c:	f107 0308 	add.w	r3, r7, #8
 800f970:	4618      	mov	r0, r3
 800f972:	f00a fc53 	bl	801a21c <SysTimeGet>
                    sysTime = SysTimeAdd( sysTimeCurrent, SysTimeSub( sysTime, MacCtx.LastTxSysTime ) );
 800f976:	f107 006c 	add.w	r0, r7, #108	@ 0x6c
 800f97a:	4b92      	ldr	r3, [pc, #584]	@ (800fbc4 <ProcessMacCommands+0x9c8>)
 800f97c:	f8d3 233c 	ldr.w	r2, [r3, #828]	@ 0x33c
 800f980:	9200      	str	r2, [sp, #0]
 800f982:	f8d3 3338 	ldr.w	r3, [r3, #824]	@ 0x338
 800f986:	f107 0210 	add.w	r2, r7, #16
 800f98a:	ca06      	ldmia	r2, {r1, r2}
 800f98c:	f00a fbdf 	bl	801a14e <SysTimeSub>
 800f990:	f107 0010 	add.w	r0, r7, #16
 800f994:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800f996:	9300      	str	r3, [sp, #0]
 800f998:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f99a:	f107 0208 	add.w	r2, r7, #8
 800f99e:	ca06      	ldmia	r2, {r1, r2}
 800f9a0:	f00a fb9c 	bl	801a0dc <SysTimeAdd>

                    // Apply the new system time.
                    SysTimeSet( sysTime );
 800f9a4:	f107 0310 	add.w	r3, r7, #16
 800f9a8:	e893 0003 	ldmia.w	r3, {r0, r1}
 800f9ac:	f00a fc08 	bl	801a1c0 <SysTimeSet>
                    LoRaMacClassBDeviceTimeAns( );
 800f9b0:	f002 fee8 	bl	8012784 <LoRaMacClassBDeviceTimeAns>
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = true;
 800f9b4:	4b83      	ldr	r3, [pc, #524]	@ (800fbc4 <ProcessMacCommands+0x9c8>)
 800f9b6:	2201      	movs	r2, #1
 800f9b8:	f883 243c 	strb.w	r2, [r3, #1084]	@ 0x43c
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
                    // In case of other receive windows the Device Time Answer is not received.
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
#endif /* LORAMAC_VERSION */
                }
                break;
 800f9bc:	e0f2      	b.n	800fba4 <ProcessMacCommands+0x9a8>
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 800f9be:	4b81      	ldr	r3, [pc, #516]	@ (800fbc4 <ProcessMacCommands+0x9c8>)
 800f9c0:	2200      	movs	r2, #0
 800f9c2:	f883 243c 	strb.w	r2, [r3, #1084]	@ 0x43c
                break;
 800f9c6:	e0ed      	b.n	800fba4 <ProcessMacCommands+0x9a8>
            }
            case SRV_MAC_PING_SLOT_INFO_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_PING_SLOT_INFO ) == true )
 800f9c8:	200c      	movs	r0, #12
 800f9ca:	f003 fb59 	bl	8013080 <LoRaMacConfirmQueueIsCmdActive>
 800f9ce:	4603      	mov	r3, r0
 800f9d0:	2b00      	cmp	r3, #0
 800f9d2:	f000 80e4 	beq.w	800fb9e <ProcessMacCommands+0x9a2>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
 800f9d6:	210c      	movs	r1, #12
 800f9d8:	2000      	movs	r0, #0
 800f9da:	f003 fac5 	bl	8012f68 <LoRaMacConfirmQueueSetStatus>
                    // According to the specification, it is not allowed to process this answer in
                    // a ping or multicast slot
                    if( ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_PING_SLOT ) && ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT ) )
 800f9de:	4b79      	ldr	r3, [pc, #484]	@ (800fbc4 <ProcessMacCommands+0x9c8>)
 800f9e0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800f9e4:	2b04      	cmp	r3, #4
 800f9e6:	f000 80da 	beq.w	800fb9e <ProcessMacCommands+0x9a2>
 800f9ea:	4b76      	ldr	r3, [pc, #472]	@ (800fbc4 <ProcessMacCommands+0x9c8>)
 800f9ec:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800f9f0:	2b05      	cmp	r3, #5
 800f9f2:	f000 80d4 	beq.w	800fb9e <ProcessMacCommands+0x9a2>
                    {
                        LoRaMacClassBPingSlotInfoAns( );
 800f9f6:	f002 fea6 	bl	8012746 <LoRaMacClassBPingSlotInfoAns>
                    }
                }
                break;
 800f9fa:	e0d0      	b.n	800fb9e <ProcessMacCommands+0x9a2>
            }
            case SRV_MAC_PING_SLOT_CHANNEL_REQ:
            {
                uint8_t status = 0x03;
 800f9fc:	2303      	movs	r3, #3
 800f9fe:	f887 307c 	strb.w	r3, [r7, #124]	@ 0x7c
                uint32_t frequency = 0;
 800fa02:	2300      	movs	r3, #0
 800fa04:	67bb      	str	r3, [r7, #120]	@ 0x78
                uint8_t datarate;

                frequency = ( uint32_t )payload[macIndex++];
 800fa06:	78fb      	ldrb	r3, [r7, #3]
 800fa08:	1c5a      	adds	r2, r3, #1
 800fa0a:	70fa      	strb	r2, [r7, #3]
 800fa0c:	461a      	mov	r2, r3
 800fa0e:	687b      	ldr	r3, [r7, #4]
 800fa10:	4413      	add	r3, r2
 800fa12:	781b      	ldrb	r3, [r3, #0]
 800fa14:	67bb      	str	r3, [r7, #120]	@ 0x78
                frequency |= ( uint32_t )payload[macIndex++] << 8;
 800fa16:	78fb      	ldrb	r3, [r7, #3]
 800fa18:	1c5a      	adds	r2, r3, #1
 800fa1a:	70fa      	strb	r2, [r7, #3]
 800fa1c:	461a      	mov	r2, r3
 800fa1e:	687b      	ldr	r3, [r7, #4]
 800fa20:	4413      	add	r3, r2
 800fa22:	781b      	ldrb	r3, [r3, #0]
 800fa24:	021b      	lsls	r3, r3, #8
 800fa26:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800fa28:	4313      	orrs	r3, r2
 800fa2a:	67bb      	str	r3, [r7, #120]	@ 0x78
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 800fa2c:	78fb      	ldrb	r3, [r7, #3]
 800fa2e:	1c5a      	adds	r2, r3, #1
 800fa30:	70fa      	strb	r2, [r7, #3]
 800fa32:	461a      	mov	r2, r3
 800fa34:	687b      	ldr	r3, [r7, #4]
 800fa36:	4413      	add	r3, r2
 800fa38:	781b      	ldrb	r3, [r3, #0]
 800fa3a:	041b      	lsls	r3, r3, #16
 800fa3c:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800fa3e:	4313      	orrs	r3, r2
 800fa40:	67bb      	str	r3, [r7, #120]	@ 0x78
                frequency *= 100;
 800fa42:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800fa44:	2264      	movs	r2, #100	@ 0x64
 800fa46:	fb02 f303 	mul.w	r3, r2, r3
 800fa4a:	67bb      	str	r3, [r7, #120]	@ 0x78
                datarate = payload[macIndex++] & 0x0F;
 800fa4c:	78fb      	ldrb	r3, [r7, #3]
 800fa4e:	1c5a      	adds	r2, r3, #1
 800fa50:	70fa      	strb	r2, [r7, #3]
 800fa52:	461a      	mov	r2, r3
 800fa54:	687b      	ldr	r3, [r7, #4]
 800fa56:	4413      	add	r3, r2
 800fa58:	781b      	ldrb	r3, [r3, #0]
 800fa5a:	f003 030f 	and.w	r3, r3, #15
 800fa5e:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77

                status = LoRaMacClassBPingSlotChannelReq( datarate, frequency );
 800fa62:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800fa66:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800fa68:	4618      	mov	r0, r3
 800fa6a:	f002 fe72 	bl	8012752 <LoRaMacClassBPingSlotChannelReq>
 800fa6e:	4603      	mov	r3, r0
 800fa70:	f887 307c 	strb.w	r3, [r7, #124]	@ 0x7c
                macCmdPayload[0] = status;
 800fa74:	f897 307c 	ldrb.w	r3, [r7, #124]	@ 0x7c
 800fa78:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_FREQ_ANS, macCmdPayload, 1 );
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_CHANNEL_ANS, macCmdPayload, 1 );
 800fa7c:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800fa80:	2201      	movs	r2, #1
 800fa82:	4619      	mov	r1, r3
 800fa84:	2011      	movs	r0, #17
 800fa86:	f002 ffd3 	bl	8012a30 <LoRaMacCommandsAddCmd>
                /*ST_WORKAROUND_BEGIN: remove unnecessary mlme operation to prevent uplinks burst */
                // Setup indication to inform the application
                /* SetMlmeScheduleUplinkIndication( ); */
                /*ST_WORKAROUND_END */
#endif /* LORAMAC_VERSION */
                break;
 800fa8a:	e08b      	b.n	800fba4 <ProcessMacCommands+0x9a8>
            }
            case SRV_MAC_BEACON_TIMING_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_TIMING ) == true )
 800fa8c:	200d      	movs	r0, #13
 800fa8e:	f003 faf7 	bl	8013080 <LoRaMacConfirmQueueIsCmdActive>
 800fa92:	4603      	mov	r3, r0
 800fa94:	2b00      	cmp	r3, #0
 800fa96:	f000 8084 	beq.w	800fba2 <ProcessMacCommands+0x9a6>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_BEACON_TIMING );
 800fa9a:	210d      	movs	r1, #13
 800fa9c:	2000      	movs	r0, #0
 800fa9e:	f003 fa63 	bl	8012f68 <LoRaMacConfirmQueueSetStatus>
                    uint16_t beaconTimingDelay = 0;
 800faa2:	2300      	movs	r3, #0
 800faa4:	f8a7 307e 	strh.w	r3, [r7, #126]	@ 0x7e
                    uint8_t beaconTimingChannel = 0;
 800faa8:	2300      	movs	r3, #0
 800faaa:	f887 307d 	strb.w	r3, [r7, #125]	@ 0x7d

                    beaconTimingDelay = ( uint16_t )payload[macIndex++];
 800faae:	78fb      	ldrb	r3, [r7, #3]
 800fab0:	1c5a      	adds	r2, r3, #1
 800fab2:	70fa      	strb	r2, [r7, #3]
 800fab4:	461a      	mov	r2, r3
 800fab6:	687b      	ldr	r3, [r7, #4]
 800fab8:	4413      	add	r3, r2
 800faba:	781b      	ldrb	r3, [r3, #0]
 800fabc:	f8a7 307e 	strh.w	r3, [r7, #126]	@ 0x7e
                    beaconTimingDelay |= ( uint16_t )payload[macIndex++] << 8;
 800fac0:	78fb      	ldrb	r3, [r7, #3]
 800fac2:	1c5a      	adds	r2, r3, #1
 800fac4:	70fa      	strb	r2, [r7, #3]
 800fac6:	461a      	mov	r2, r3
 800fac8:	687b      	ldr	r3, [r7, #4]
 800faca:	4413      	add	r3, r2
 800facc:	781b      	ldrb	r3, [r3, #0]
 800face:	021b      	lsls	r3, r3, #8
 800fad0:	b21a      	sxth	r2, r3
 800fad2:	f9b7 307e 	ldrsh.w	r3, [r7, #126]	@ 0x7e
 800fad6:	4313      	orrs	r3, r2
 800fad8:	b21b      	sxth	r3, r3
 800fada:	f8a7 307e 	strh.w	r3, [r7, #126]	@ 0x7e
                    beaconTimingChannel = payload[macIndex++];
 800fade:	78fb      	ldrb	r3, [r7, #3]
 800fae0:	1c5a      	adds	r2, r3, #1
 800fae2:	70fa      	strb	r2, [r7, #3]
 800fae4:	461a      	mov	r2, r3
 800fae6:	687b      	ldr	r3, [r7, #4]
 800fae8:	4413      	add	r3, r2
 800faea:	781b      	ldrb	r3, [r3, #0]
 800faec:	f887 307d 	strb.w	r3, [r7, #125]	@ 0x7d

                    LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
 800faf0:	4b35      	ldr	r3, [pc, #212]	@ (800fbc8 <ProcessMacCommands+0x9cc>)
 800faf2:	681a      	ldr	r2, [r3, #0]
 800faf4:	f897 107d 	ldrb.w	r1, [r7, #125]	@ 0x7d
 800faf8:	f8b7 307e 	ldrh.w	r3, [r7, #126]	@ 0x7e
 800fafc:	4618      	mov	r0, r3
 800fafe:	f002 fe34 	bl	801276a <LoRaMacClassBBeaconTimingAns>
                }
                break;
 800fb02:	e04e      	b.n	800fba2 <ProcessMacCommands+0x9a6>
            }
            case SRV_MAC_BEACON_FREQ_REQ:
                {
                    uint32_t frequency = 0;
 800fb04:	2300      	movs	r3, #0
 800fb06:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80

                    frequency = ( uint32_t )payload[macIndex++];
 800fb0a:	78fb      	ldrb	r3, [r7, #3]
 800fb0c:	1c5a      	adds	r2, r3, #1
 800fb0e:	70fa      	strb	r2, [r7, #3]
 800fb10:	461a      	mov	r2, r3
 800fb12:	687b      	ldr	r3, [r7, #4]
 800fb14:	4413      	add	r3, r2
 800fb16:	781b      	ldrb	r3, [r3, #0]
 800fb18:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
                    frequency |= ( uint32_t )payload[macIndex++] << 8;
 800fb1c:	78fb      	ldrb	r3, [r7, #3]
 800fb1e:	1c5a      	adds	r2, r3, #1
 800fb20:	70fa      	strb	r2, [r7, #3]
 800fb22:	461a      	mov	r2, r3
 800fb24:	687b      	ldr	r3, [r7, #4]
 800fb26:	4413      	add	r3, r2
 800fb28:	781b      	ldrb	r3, [r3, #0]
 800fb2a:	021b      	lsls	r3, r3, #8
 800fb2c:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800fb30:	4313      	orrs	r3, r2
 800fb32:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 800fb36:	78fb      	ldrb	r3, [r7, #3]
 800fb38:	1c5a      	adds	r2, r3, #1
 800fb3a:	70fa      	strb	r2, [r7, #3]
 800fb3c:	461a      	mov	r2, r3
 800fb3e:	687b      	ldr	r3, [r7, #4]
 800fb40:	4413      	add	r3, r2
 800fb42:	781b      	ldrb	r3, [r3, #0]
 800fb44:	041b      	lsls	r3, r3, #16
 800fb46:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800fb4a:	4313      	orrs	r3, r2
 800fb4c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
                    frequency *= 100;
 800fb50:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800fb54:	2264      	movs	r2, #100	@ 0x64
 800fb56:	fb02 f303 	mul.w	r3, r2, r3
 800fb5a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80

                    if( LoRaMacClassBBeaconFreqReq( frequency ) == true )
 800fb5e:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 800fb62:	f002 fe15 	bl	8012790 <LoRaMacClassBBeaconFreqReq>
 800fb66:	4603      	mov	r3, r0
 800fb68:	2b00      	cmp	r3, #0
 800fb6a:	d003      	beq.n	800fb74 <ProcessMacCommands+0x978>
                    {
                        macCmdPayload[0] = 1;
 800fb6c:	2301      	movs	r3, #1
 800fb6e:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
 800fb72:	e002      	b.n	800fb7a <ProcessMacCommands+0x97e>
                    }
                    else
                    {
                        macCmdPayload[0] = 0;
 800fb74:	2300      	movs	r3, #0
 800fb76:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
                    }
                    LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_FREQ_ANS, macCmdPayload, 1 );
 800fb7a:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800fb7e:	2201      	movs	r2, #1
 800fb80:	4619      	mov	r1, r3
 800fb82:	2013      	movs	r0, #19
 800fb84:	f002 ff54 	bl	8012a30 <LoRaMacCommandsAddCmd>
                }
                break;
 800fb88:	e00c      	b.n	800fba4 <ProcessMacCommands+0x9a8>
                break;
 800fb8a:	bf00      	nop
 800fb8c:	e00a      	b.n	800fba4 <ProcessMacCommands+0x9a8>
                break;
 800fb8e:	bf00      	nop
 800fb90:	e008      	b.n	800fba4 <ProcessMacCommands+0x9a8>
                break;
 800fb92:	bf00      	nop
 800fb94:	e006      	b.n	800fba4 <ProcessMacCommands+0x9a8>
                break;
 800fb96:	bf00      	nop
 800fb98:	e004      	b.n	800fba4 <ProcessMacCommands+0x9a8>
                break;
 800fb9a:	bf00      	nop
 800fb9c:	e002      	b.n	800fba4 <ProcessMacCommands+0x9a8>
                break;
 800fb9e:	bf00      	nop
 800fba0:	e000      	b.n	800fba4 <ProcessMacCommands+0x9a8>
                break;
 800fba2:	bf00      	nop
    while( macIndex < commandsSize )
 800fba4:	78fa      	ldrb	r2, [r7, #3]
 800fba6:	78bb      	ldrb	r3, [r7, #2]
 800fba8:	429a      	cmp	r2, r3
 800fbaa:	f4ff ab49 	bcc.w	800f240 <ProcessMacCommands+0x44>
 800fbae:	e004      	b.n	800fbba <ProcessMacCommands+0x9be>
        return;
 800fbb0:	bf00      	nop
 800fbb2:	e002      	b.n	800fbba <ProcessMacCommands+0x9be>
            return;
 800fbb4:	bf00      	nop
 800fbb6:	e000      	b.n	800fbba <ProcessMacCommands+0x9be>
            default:
                // Unknown command. ABORT MAC commands processing
                return;
 800fbb8:	bf00      	nop
        }
    }
}
 800fbba:	378c      	adds	r7, #140	@ 0x8c
 800fbbc:	46bd      	mov	sp, r7
 800fbbe:	bd90      	pop	{r4, r7, pc}
 800fbc0:	12d53d80 	.word	0x12d53d80
 800fbc4:	20000670 	.word	0x20000670
 800fbc8:	20001720 	.word	0x20001720

0800fbcc <Send>:

/* ST_WORKAROUND: Update Send request with new input parameter to allow delayed tx */
static LoRaMacStatus_t Send( LoRaMacHeader_t* macHdr, uint8_t fPort, void* fBuffer, uint16_t fBufferSize, bool allowDelayedTx )
{
 800fbcc:	b580      	push	{r7, lr}
 800fbce:	b08e      	sub	sp, #56	@ 0x38
 800fbd0:	af02      	add	r7, sp, #8
 800fbd2:	60f8      	str	r0, [r7, #12]
 800fbd4:	607a      	str	r2, [r7, #4]
 800fbd6:	461a      	mov	r2, r3
 800fbd8:	460b      	mov	r3, r1
 800fbda:	72fb      	strb	r3, [r7, #11]
 800fbdc:	4613      	mov	r3, r2
 800fbde:	813b      	strh	r3, [r7, #8]
    LoRaMacFrameCtrl_t fCtrl;
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 800fbe0:	2303      	movs	r3, #3
 800fbe2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    int8_t datarate = Nvm.MacGroup1.ChannelsDatarate;
 800fbe6:	4b66      	ldr	r3, [pc, #408]	@ (800fd80 <Send+0x1b4>)
 800fbe8:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800fbec:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    int8_t txPower = Nvm.MacGroup1.ChannelsTxPower;
 800fbf0:	4b63      	ldr	r3, [pc, #396]	@ (800fd80 <Send+0x1b4>)
 800fbf2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800fbf6:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 800fbfa:	4b61      	ldr	r3, [pc, #388]	@ (800fd80 <Send+0x1b4>)
 800fbfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fbfe:	62bb      	str	r3, [r7, #40]	@ 0x28
    CalcNextAdrParams_t adrNext;

    // Check if we are joined
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800fc00:	4b5f      	ldr	r3, [pc, #380]	@ (800fd80 <Send+0x1b4>)
 800fc02:	f893 311c 	ldrb.w	r3, [r3, #284]	@ 0x11c
 800fc06:	2b00      	cmp	r3, #0
 800fc08:	d101      	bne.n	800fc0e <Send+0x42>
    {
        return LORAMAC_STATUS_NO_NETWORK_JOINED;
 800fc0a:	2307      	movs	r3, #7
 800fc0c:	e0b4      	b.n	800fd78 <Send+0x1ac>
    }
    if( Nvm.MacGroup2.MaxDCycle == 0 )
 800fc0e:	4b5c      	ldr	r3, [pc, #368]	@ (800fd80 <Send+0x1b4>)
 800fc10:	f893 3107 	ldrb.w	r3, [r3, #263]	@ 0x107
 800fc14:	2b00      	cmp	r3, #0
 800fc16:	d102      	bne.n	800fc1e <Send+0x52>
    {
        Nvm.MacGroup1.AggregatedTimeOff = 0;
 800fc18:	4b59      	ldr	r3, [pc, #356]	@ (800fd80 <Send+0x1b4>)
 800fc1a:	2200      	movs	r2, #0
 800fc1c:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    fCtrl.Value = 0;
 800fc1e:	2300      	movs	r3, #0
 800fc20:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    fCtrl.Bits.FOptsLen      = 0;
 800fc24:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800fc28:	f36f 0303 	bfc	r3, #0, #4
 800fc2c:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    fCtrl.Bits.Adr           = Nvm.MacGroup2.AdrCtrlOn;
 800fc30:	4b53      	ldr	r3, [pc, #332]	@ (800fd80 <Send+0x1b4>)
 800fc32:	f893 2106 	ldrb.w	r2, [r3, #262]	@ 0x106
 800fc36:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800fc3a:	f362 13c7 	bfi	r3, r2, #7, #1
 800fc3e:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c

    // Check class b
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800fc42:	4b4f      	ldr	r3, [pc, #316]	@ (800fd80 <Send+0x1b4>)
 800fc44:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 800fc48:	2b01      	cmp	r3, #1
 800fc4a:	d106      	bne.n	800fc5a <Send+0x8e>
    {
        fCtrl.Bits.FPending      = 1;
 800fc4c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800fc50:	f043 0310 	orr.w	r3, r3, #16
 800fc54:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
 800fc58:	e005      	b.n	800fc66 <Send+0x9a>
    }
    else
    {
        fCtrl.Bits.FPending      = 0;
 800fc5a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800fc5e:	f36f 1304 	bfc	r3, #4, #1
 800fc62:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    }

    // Check server ack
    if( Nvm.MacGroup1.SrvAckRequested == true )
 800fc66:	4b46      	ldr	r3, [pc, #280]	@ (800fd80 <Send+0x1b4>)
 800fc68:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 800fc6c:	2b00      	cmp	r3, #0
 800fc6e:	d005      	beq.n	800fc7c <Send+0xb0>
    {
        fCtrl.Bits.Ack = 1;
 800fc70:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800fc74:	f043 0320 	orr.w	r3, r3, #32
 800fc78:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    adrNext.Region = Nvm.MacGroup2.Region;

    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &Nvm.MacGroup1.ChannelsDatarate,
                                               &Nvm.MacGroup1.ChannelsTxPower, &adrAckCounter );
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    adrNext.UpdateChanMask = true;
 800fc7c:	2301      	movs	r3, #1
 800fc7e:	753b      	strb	r3, [r7, #20]
    adrNext.AdrEnabled = fCtrl.Bits.Adr;
 800fc80:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800fc84:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800fc88:	b2db      	uxtb	r3, r3
 800fc8a:	2b00      	cmp	r3, #0
 800fc8c:	bf14      	ite	ne
 800fc8e:	2301      	movne	r3, #1
 800fc90:	2300      	moveq	r3, #0
 800fc92:	b2db      	uxtb	r3, r3
 800fc94:	757b      	strb	r3, [r7, #21]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 800fc96:	4b3a      	ldr	r3, [pc, #232]	@ (800fd80 <Send+0x1b4>)
 800fc98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fc9a:	61bb      	str	r3, [r7, #24]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 800fc9c:	4b39      	ldr	r3, [pc, #228]	@ (800fd84 <Send+0x1b8>)
 800fc9e:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	@ 0x400
 800fca2:	83bb      	strh	r3, [r7, #28]
    adrNext.AdrAckDelay = MacCtx.AdrAckDelay;
 800fca4:	4b37      	ldr	r3, [pc, #220]	@ (800fd84 <Send+0x1b8>)
 800fca6:	f8b3 3402 	ldrh.w	r3, [r3, #1026]	@ 0x402
 800fcaa:	83fb      	strh	r3, [r7, #30]
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800fcac:	4b34      	ldr	r3, [pc, #208]	@ (800fd80 <Send+0x1b4>)
 800fcae:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 800fcb2:	f887 3020 	strb.w	r3, [r7, #32]
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 800fcb6:	4b32      	ldr	r3, [pc, #200]	@ (800fd80 <Send+0x1b4>)
 800fcb8:	f993 3038 	ldrsb.w	r3, [r3, #56]	@ 0x38
 800fcbc:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
    adrNext.NbTrans = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 800fcc0:	4b2f      	ldr	r3, [pc, #188]	@ (800fd80 <Send+0x1b4>)
 800fcc2:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
 800fcc6:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    adrNext.UplinkDwellTime =  Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800fcca:	4b2d      	ldr	r3, [pc, #180]	@ (800fd80 <Send+0x1b4>)
 800fccc:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 800fcd0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    adrNext.Region = Nvm.MacGroup2.Region;
 800fcd4:	4b2a      	ldr	r3, [pc, #168]	@ (800fd80 <Send+0x1b4>)
 800fcd6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800fcda:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24

    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &Nvm.MacGroup1.ChannelsDatarate,
 800fcde:	f107 0014 	add.w	r0, r7, #20
 800fce2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800fce6:	9300      	str	r3, [sp, #0]
 800fce8:	4b27      	ldr	r3, [pc, #156]	@ (800fd88 <Send+0x1bc>)
 800fcea:	4a28      	ldr	r2, [pc, #160]	@ (800fd8c <Send+0x1c0>)
 800fcec:	4928      	ldr	r1, [pc, #160]	@ (800fd90 <Send+0x1c4>)
 800fcee:	f002 fbc9 	bl	8012484 <LoRaMacAdrCalcNext>
 800fcf2:	4603      	mov	r3, r0
 800fcf4:	461a      	mov	r2, r3
 800fcf6:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800fcfa:	f362 1386 	bfi	r3, r2, #6, #1
 800fcfe:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
                                               &Nvm.MacGroup1.ChannelsTxPower,
                                               &Nvm.MacGroup2.MacParams.ChannelsNbTrans, &adrAckCounter );
#endif /* LORAMAC_VERSION */

    // Prepare the frame
    status = PrepareFrame( macHdr, &fCtrl, fPort, fBuffer, fBufferSize );
 800fd02:	7afa      	ldrb	r2, [r7, #11]
 800fd04:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 800fd08:	893b      	ldrh	r3, [r7, #8]
 800fd0a:	9300      	str	r3, [sp, #0]
 800fd0c:	687b      	ldr	r3, [r7, #4]
 800fd0e:	68f8      	ldr	r0, [r7, #12]
 800fd10:	f000 fc42 	bl	8010598 <PrepareFrame>
 800fd14:	4603      	mov	r3, r0
 800fd16:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    // Validate status
    if( ( status == LORAMAC_STATUS_OK ) || ( status == LORAMAC_STATUS_SKIPPED_APP_DATA ) )
 800fd1a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800fd1e:	2b00      	cmp	r3, #0
 800fd20:	d003      	beq.n	800fd2a <Send+0x15e>
 800fd22:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800fd26:	2b0a      	cmp	r3, #10
 800fd28:	d107      	bne.n	800fd3a <Send+0x16e>
    {
        // Schedule frame, do not allow delayed transmissions
        status = ScheduleTx( allowDelayedTx ); /* ST_WORKAROUND: Update Send request with new input parameter to allow delayed tx */
 800fd2a:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 800fd2e:	4618      	mov	r0, r3
 800fd30:	f000 f96e 	bl	8010010 <ScheduleTx>
 800fd34:	4603      	mov	r3, r0
 800fd36:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

    // Post processing
    if( status != LORAMAC_STATUS_OK )
 800fd3a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800fd3e:	2b00      	cmp	r3, #0
 800fd40:	d00a      	beq.n	800fd58 <Send+0x18c>
    {
        // Bad case - restore
        // Store local variables
        Nvm.MacGroup1.ChannelsDatarate = datarate;
 800fd42:	4a0f      	ldr	r2, [pc, #60]	@ (800fd80 <Send+0x1b4>)
 800fd44:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800fd48:	f882 3039 	strb.w	r3, [r2, #57]	@ 0x39
        Nvm.MacGroup1.ChannelsTxPower = txPower;
 800fd4c:	4a0c      	ldr	r2, [pc, #48]	@ (800fd80 <Send+0x1b4>)
 800fd4e:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800fd52:	f882 3038 	strb.w	r3, [r2, #56]	@ 0x38
 800fd56:	e00d      	b.n	800fd74 <Send+0x1a8>
    }
    else
    {
        // Good case
        Nvm.MacGroup1.SrvAckRequested = false;
 800fd58:	4b09      	ldr	r3, [pc, #36]	@ (800fd80 <Send+0x1b4>)
 800fd5a:	2200      	movs	r2, #0
 800fd5c:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
        Nvm.MacGroup1.AdrAckCounter = adrAckCounter;
 800fd60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fd62:	4a07      	ldr	r2, [pc, #28]	@ (800fd80 <Send+0x1b4>)
 800fd64:	6293      	str	r3, [r2, #40]	@ 0x28
        // Remove all none sticky MAC commands
        if( LoRaMacCommandsRemoveNoneStickyCmds( ) != LORAMAC_COMMANDS_SUCCESS )
 800fd66:	f002 fedb 	bl	8012b20 <LoRaMacCommandsRemoveNoneStickyCmds>
 800fd6a:	4603      	mov	r3, r0
 800fd6c:	2b00      	cmp	r3, #0
 800fd6e:	d001      	beq.n	800fd74 <Send+0x1a8>
        {
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800fd70:	2313      	movs	r3, #19
 800fd72:	e001      	b.n	800fd78 <Send+0x1ac>
        }
    }
    return status;
 800fd74:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800fd78:	4618      	mov	r0, r3
 800fd7a:	3730      	adds	r7, #48	@ 0x30
 800fd7c:	46bd      	mov	sp, r7
 800fd7e:	bd80      	pop	{r7, pc}
 800fd80:	20000b90 	.word	0x20000b90
 800fd84:	20000670 	.word	0x20000670
 800fd88:	20000bf0 	.word	0x20000bf0
 800fd8c:	20000bc8 	.word	0x20000bc8
 800fd90:	20000bc9 	.word	0x20000bc9

0800fd94 <SendReJoinReq>:

static LoRaMacStatus_t SendReJoinReq( JoinReqIdentifier_t joinReqType )
{
 800fd94:	b580      	push	{r7, lr}
 800fd96:	b084      	sub	sp, #16
 800fd98:	af00      	add	r7, sp, #0
 800fd9a:	4603      	mov	r3, r0
 800fd9c:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800fd9e:	2300      	movs	r3, #0
 800fda0:	73bb      	strb	r3, [r7, #14]
    LoRaMacHeader_t macHdr;
    macHdr.Value = 0;
 800fda2:	2300      	movs	r3, #0
 800fda4:	733b      	strb	r3, [r7, #12]
    bool allowDelayedTx = true;
 800fda6:	2301      	movs	r3, #1
 800fda8:	73fb      	strb	r3, [r7, #15]

    // Setup join/rejoin message
    switch( joinReqType )
 800fdaa:	79fb      	ldrb	r3, [r7, #7]
 800fdac:	2bff      	cmp	r3, #255	@ 0xff
 800fdae:	d129      	bne.n	800fe04 <SendReJoinReq+0x70>
    {
        case JOIN_REQ:
        {
            SwitchClass( CLASS_A );
 800fdb0:	2000      	movs	r0, #0
 800fdb2:	f7ff f901 	bl	800efb8 <SwitchClass>

            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_JOIN_REQUEST;
 800fdb6:	4b1a      	ldr	r3, [pc, #104]	@ (800fe20 <SendReJoinReq+0x8c>)
 800fdb8:	2200      	movs	r2, #0
 800fdba:	f883 2104 	strb.w	r2, [r3, #260]	@ 0x104
            MacCtx.TxMsg.Message.JoinReq.Buffer = MacCtx.PktBuffer;
 800fdbe:	4b18      	ldr	r3, [pc, #96]	@ (800fe20 <SendReJoinReq+0x8c>)
 800fdc0:	4a18      	ldr	r2, [pc, #96]	@ (800fe24 <SendReJoinReq+0x90>)
 800fdc2:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
            MacCtx.TxMsg.Message.JoinReq.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 800fdc6:	4b16      	ldr	r3, [pc, #88]	@ (800fe20 <SendReJoinReq+0x8c>)
 800fdc8:	22ff      	movs	r2, #255	@ 0xff
 800fdca:	f883 210c 	strb.w	r2, [r3, #268]	@ 0x10c

            macHdr.Bits.MType = FRAME_TYPE_JOIN_REQ;
 800fdce:	7b3b      	ldrb	r3, [r7, #12]
 800fdd0:	f36f 1347 	bfc	r3, #5, #3
 800fdd4:	733b      	strb	r3, [r7, #12]
            MacCtx.TxMsg.Message.JoinReq.MHDR.Value = macHdr.Value;
 800fdd6:	7b3a      	ldrb	r2, [r7, #12]
 800fdd8:	4b11      	ldr	r3, [pc, #68]	@ (800fe20 <SendReJoinReq+0x8c>)
 800fdda:	f883 210d 	strb.w	r2, [r3, #269]	@ 0x10d

            memcpy1( MacCtx.TxMsg.Message.JoinReq.JoinEUI, SecureElementGetJoinEui( ), LORAMAC_JOIN_EUI_FIELD_SIZE );
 800fdde:	f7fc f869 	bl	800beb4 <SecureElementGetJoinEui>
 800fde2:	4603      	mov	r3, r0
 800fde4:	2208      	movs	r2, #8
 800fde6:	4619      	mov	r1, r3
 800fde8:	480f      	ldr	r0, [pc, #60]	@ (800fe28 <SendReJoinReq+0x94>)
 800fdea:	f006 fe38 	bl	8016a5e <memcpy1>
            memcpy1( MacCtx.TxMsg.Message.JoinReq.DevEUI, SecureElementGetDevEui( ), LORAMAC_DEV_EUI_FIELD_SIZE );
 800fdee:	f7fc f83f 	bl	800be70 <SecureElementGetDevEui>
 800fdf2:	4603      	mov	r3, r0
 800fdf4:	2208      	movs	r2, #8
 800fdf6:	4619      	mov	r1, r3
 800fdf8:	480c      	ldr	r0, [pc, #48]	@ (800fe2c <SendReJoinReq+0x98>)
 800fdfa:	f006 fe30 	bl	8016a5e <memcpy1>

            allowDelayedTx = false;
 800fdfe:	2300      	movs	r3, #0
 800fe00:	73fb      	strb	r3, [r7, #15]

            break;
 800fe02:	e002      	b.n	800fe0a <SendReJoinReq+0x76>
        }
        default:
            status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 800fe04:	2302      	movs	r3, #2
 800fe06:	73bb      	strb	r3, [r7, #14]
            break;
 800fe08:	bf00      	nop
    }

    // Schedule frame
    status = ScheduleTx( allowDelayedTx );
 800fe0a:	7bfb      	ldrb	r3, [r7, #15]
 800fe0c:	4618      	mov	r0, r3
 800fe0e:	f000 f8ff 	bl	8010010 <ScheduleTx>
 800fe12:	4603      	mov	r3, r0
 800fe14:	73bb      	strb	r3, [r7, #14]
    return status;
 800fe16:	7bbb      	ldrb	r3, [r7, #14]
}
 800fe18:	4618      	mov	r0, r3
 800fe1a:	3710      	adds	r7, #16
 800fe1c:	46bd      	mov	sp, r7
 800fe1e:	bd80      	pop	{r7, pc}
 800fe20:	20000670 	.word	0x20000670
 800fe24:	20000672 	.word	0x20000672
 800fe28:	2000077e 	.word	0x2000077e
 800fe2c:	20000786 	.word	0x20000786

0800fe30 <CheckForClassBCollision>:

static LoRaMacStatus_t CheckForClassBCollision( void )
{
 800fe30:	b580      	push	{r7, lr}
 800fe32:	af00      	add	r7, sp, #0
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 800fe34:	f002 fc36 	bl	80126a4 <LoRaMacClassBIsBeaconExpected>
 800fe38:	4603      	mov	r3, r0
 800fe3a:	2b00      	cmp	r3, #0
 800fe3c:	d001      	beq.n	800fe42 <CheckForClassBCollision+0x12>
    {
        return LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME;
 800fe3e:	230e      	movs	r3, #14
 800fe40:	e013      	b.n	800fe6a <CheckForClassBCollision+0x3a>
    }

    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800fe42:	4b0b      	ldr	r3, [pc, #44]	@ (800fe70 <CheckForClassBCollision+0x40>)
 800fe44:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 800fe48:	2b01      	cmp	r3, #1
 800fe4a:	d10d      	bne.n	800fe68 <CheckForClassBCollision+0x38>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 800fe4c:	f002 fc31 	bl	80126b2 <LoRaMacClassBIsPingExpected>
 800fe50:	4603      	mov	r3, r0
 800fe52:	2b00      	cmp	r3, #0
 800fe54:	d001      	beq.n	800fe5a <CheckForClassBCollision+0x2a>
        {
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 800fe56:	230f      	movs	r3, #15
 800fe58:	e007      	b.n	800fe6a <CheckForClassBCollision+0x3a>
        }
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 800fe5a:	f002 fc31 	bl	80126c0 <LoRaMacClassBIsMulticastExpected>
 800fe5e:	4603      	mov	r3, r0
 800fe60:	2b00      	cmp	r3, #0
 800fe62:	d001      	beq.n	800fe68 <CheckForClassBCollision+0x38>
        {
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 800fe64:	230f      	movs	r3, #15
 800fe66:	e000      	b.n	800fe6a <CheckForClassBCollision+0x3a>
        }
    }
    return LORAMAC_STATUS_OK;
 800fe68:	2300      	movs	r3, #0
}
 800fe6a:	4618      	mov	r0, r3
 800fe6c:	bd80      	pop	{r7, pc}
 800fe6e:	bf00      	nop
 800fe70:	20000b90 	.word	0x20000b90

0800fe74 <ComputeRxWindowParameters>:

static void ComputeRxWindowParameters( void )
{
 800fe74:	b590      	push	{r4, r7, lr}
 800fe76:	b083      	sub	sp, #12
 800fe78:	af02      	add	r7, sp, #8
    // Compute Rx1 windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800fe7a:	4b2d      	ldr	r3, [pc, #180]	@ (800ff30 <ComputeRxWindowParameters+0xbc>)
 800fe7c:	f893 4040 	ldrb.w	r4, [r3, #64]	@ 0x40
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 800fe80:	4b2b      	ldr	r3, [pc, #172]	@ (800ff30 <ComputeRxWindowParameters+0xbc>)
 800fe82:	f893 0040 	ldrb.w	r0, [r3, #64]	@ 0x40
 800fe86:	4b2a      	ldr	r3, [pc, #168]	@ (800ff30 <ComputeRxWindowParameters+0xbc>)
 800fe88:	f893 1075 	ldrb.w	r1, [r3, #117]	@ 0x75
 800fe8c:	4b28      	ldr	r3, [pc, #160]	@ (800ff30 <ComputeRxWindowParameters+0xbc>)
 800fe8e:	f993 2039 	ldrsb.w	r2, [r3, #57]	@ 0x39
                                                          Nvm.MacGroup2.MacParams.DownlinkDwellTime,
                                                          Nvm.MacGroup1.ChannelsDatarate,
                                                          Nvm.MacGroup2.MacParams.Rx1DrOffset ),
 800fe92:	4b27      	ldr	r3, [pc, #156]	@ (800ff30 <ComputeRxWindowParameters+0xbc>)
 800fe94:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 800fe98:	b25b      	sxtb	r3, r3
 800fe9a:	f004 fc94 	bl	80147c6 <RegionApplyDrOffset>
 800fe9e:	4603      	mov	r3, r0
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800fea0:	b259      	sxtb	r1, r3
 800fea2:	4b23      	ldr	r3, [pc, #140]	@ (800ff30 <ComputeRxWindowParameters+0xbc>)
 800fea4:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 800fea8:	4b21      	ldr	r3, [pc, #132]	@ (800ff30 <ComputeRxWindowParameters+0xbc>)
 800feaa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800feac:	4821      	ldr	r0, [pc, #132]	@ (800ff34 <ComputeRxWindowParameters+0xc0>)
 800feae:	9000      	str	r0, [sp, #0]
 800feb0:	4620      	mov	r0, r4
 800feb2:	f004 fbaa 	bl	801460a <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindow1Config );
    // Compute Rx2 windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800feb6:	4b1e      	ldr	r3, [pc, #120]	@ (800ff30 <ComputeRxWindowParameters+0xbc>)
 800feb8:	f893 0040 	ldrb.w	r0, [r3, #64]	@ 0x40
                                     Nvm.MacGroup2.MacParams.Rx2Channel.Datarate,
 800febc:	4b1c      	ldr	r3, [pc, #112]	@ (800ff30 <ComputeRxWindowParameters+0xbc>)
 800febe:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800fec2:	b259      	sxtb	r1, r3
 800fec4:	4b1a      	ldr	r3, [pc, #104]	@ (800ff30 <ComputeRxWindowParameters+0xbc>)
 800fec6:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 800feca:	4b19      	ldr	r3, [pc, #100]	@ (800ff30 <ComputeRxWindowParameters+0xbc>)
 800fecc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fece:	4c1a      	ldr	r4, [pc, #104]	@ (800ff38 <ComputeRxWindowParameters+0xc4>)
 800fed0:	9400      	str	r4, [sp, #0]
 800fed2:	f004 fb9a 	bl	801460a <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindow2Config );

    // Default setup, in case the device joined
    MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.ReceiveDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 800fed6:	4b16      	ldr	r3, [pc, #88]	@ (800ff30 <ComputeRxWindowParameters+0xbc>)
 800fed8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800feda:	4a18      	ldr	r2, [pc, #96]	@ (800ff3c <ComputeRxWindowParameters+0xc8>)
 800fedc:	f8d2 23c4 	ldr.w	r2, [r2, #964]	@ 0x3c4
 800fee0:	4413      	add	r3, r2
 800fee2:	4a16      	ldr	r2, [pc, #88]	@ (800ff3c <ComputeRxWindowParameters+0xc8>)
 800fee4:	f8c2 33b0 	str.w	r3, [r2, #944]	@ 0x3b0
    MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.ReceiveDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 800fee8:	4b11      	ldr	r3, [pc, #68]	@ (800ff30 <ComputeRxWindowParameters+0xbc>)
 800feea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800feec:	4a13      	ldr	r2, [pc, #76]	@ (800ff3c <ComputeRxWindowParameters+0xc8>)
 800feee:	f8d2 23dc 	ldr.w	r2, [r2, #988]	@ 0x3dc
 800fef2:	4413      	add	r3, r2
 800fef4:	4a11      	ldr	r2, [pc, #68]	@ (800ff3c <ComputeRxWindowParameters+0xc8>)
 800fef6:	f8c2 33b4 	str.w	r3, [r2, #948]	@ 0x3b4

    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800fefa:	4b0d      	ldr	r3, [pc, #52]	@ (800ff30 <ComputeRxWindowParameters+0xbc>)
 800fefc:	f893 311c 	ldrb.w	r3, [r3, #284]	@ 0x11c
 800ff00:	2b00      	cmp	r3, #0
 800ff02:	d111      	bne.n	800ff28 <ComputeRxWindowParameters+0xb4>
    {
        MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 800ff04:	4b0a      	ldr	r3, [pc, #40]	@ (800ff30 <ComputeRxWindowParameters+0xbc>)
 800ff06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ff08:	4a0c      	ldr	r2, [pc, #48]	@ (800ff3c <ComputeRxWindowParameters+0xc8>)
 800ff0a:	f8d2 23c4 	ldr.w	r2, [r2, #964]	@ 0x3c4
 800ff0e:	4413      	add	r3, r2
 800ff10:	4a0a      	ldr	r2, [pc, #40]	@ (800ff3c <ComputeRxWindowParameters+0xc8>)
 800ff12:	f8c2 33b0 	str.w	r3, [r2, #944]	@ 0x3b0
        MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 800ff16:	4b06      	ldr	r3, [pc, #24]	@ (800ff30 <ComputeRxWindowParameters+0xbc>)
 800ff18:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ff1a:	4a08      	ldr	r2, [pc, #32]	@ (800ff3c <ComputeRxWindowParameters+0xc8>)
 800ff1c:	f8d2 23dc 	ldr.w	r2, [r2, #988]	@ 0x3dc
 800ff20:	4413      	add	r3, r2
 800ff22:	4a06      	ldr	r2, [pc, #24]	@ (800ff3c <ComputeRxWindowParameters+0xc8>)
 800ff24:	f8c2 33b4 	str.w	r3, [r2, #948]	@ 0x3b4
    }
}
 800ff28:	bf00      	nop
 800ff2a:	3704      	adds	r7, #4
 800ff2c:	46bd      	mov	sp, r7
 800ff2e:	bd90      	pop	{r4, r7, pc}
 800ff30:	20000b90 	.word	0x20000b90
 800ff34:	20000a28 	.word	0x20000a28
 800ff38:	20000a40 	.word	0x20000a40
 800ff3c:	20000670 	.word	0x20000670

0800ff40 <VerifyTxFrame>:

static LoRaMacStatus_t VerifyTxFrame( void )
{
 800ff40:	b580      	push	{r7, lr}
 800ff42:	b082      	sub	sp, #8
 800ff44:	af00      	add	r7, sp, #0
    size_t macCmdsSize = 0;
 800ff46:	2300      	movs	r3, #0
 800ff48:	607b      	str	r3, [r7, #4]

    if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 800ff4a:	4b13      	ldr	r3, [pc, #76]	@ (800ff98 <VerifyTxFrame+0x58>)
 800ff4c:	f893 311c 	ldrb.w	r3, [r3, #284]	@ 0x11c
 800ff50:	2b00      	cmp	r3, #0
 800ff52:	d01b      	beq.n	800ff8c <VerifyTxFrame+0x4c>
    {
        if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 800ff54:	1d3b      	adds	r3, r7, #4
 800ff56:	4618      	mov	r0, r3
 800ff58:	f002 fe28 	bl	8012bac <LoRaMacCommandsGetSizeSerializedCmds>
 800ff5c:	4603      	mov	r3, r0
 800ff5e:	2b00      	cmp	r3, #0
 800ff60:	d001      	beq.n	800ff66 <VerifyTxFrame+0x26>
        {
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800ff62:	2313      	movs	r3, #19
 800ff64:	e013      	b.n	800ff8e <VerifyTxFrame+0x4e>
        }

        if( ValidatePayloadLength( MacCtx.AppDataSize, Nvm.MacGroup1.ChannelsDatarate, macCmdsSize ) == false )
 800ff66:	4b0d      	ldr	r3, [pc, #52]	@ (800ff9c <VerifyTxFrame+0x5c>)
 800ff68:	f893 3237 	ldrb.w	r3, [r3, #567]	@ 0x237
 800ff6c:	4a0a      	ldr	r2, [pc, #40]	@ (800ff98 <VerifyTxFrame+0x58>)
 800ff6e:	f992 1039 	ldrsb.w	r1, [r2, #57]	@ 0x39
 800ff72:	687a      	ldr	r2, [r7, #4]
 800ff74:	b2d2      	uxtb	r2, r2
 800ff76:	4618      	mov	r0, r3
 800ff78:	f7ff f918 	bl	800f1ac <ValidatePayloadLength>
 800ff7c:	4603      	mov	r3, r0
 800ff7e:	f083 0301 	eor.w	r3, r3, #1
 800ff82:	b2db      	uxtb	r3, r3
 800ff84:	2b00      	cmp	r3, #0
 800ff86:	d001      	beq.n	800ff8c <VerifyTxFrame+0x4c>
        {
            return LORAMAC_STATUS_LENGTH_ERROR;
 800ff88:	2308      	movs	r3, #8
 800ff8a:	e000      	b.n	800ff8e <VerifyTxFrame+0x4e>
        }
    }
    return LORAMAC_STATUS_OK;
 800ff8c:	2300      	movs	r3, #0
}
 800ff8e:	4618      	mov	r0, r3
 800ff90:	3708      	adds	r7, #8
 800ff92:	46bd      	mov	sp, r7
 800ff94:	bd80      	pop	{r7, pc}
 800ff96:	bf00      	nop
 800ff98:	20000b90 	.word	0x20000b90
 800ff9c:	20000670 	.word	0x20000670

0800ffa0 <SerializeTxFrame>:

static LoRaMacStatus_t SerializeTxFrame( void )
{
 800ffa0:	b580      	push	{r7, lr}
 800ffa2:	b082      	sub	sp, #8
 800ffa4:	af00      	add	r7, sp, #0
    LoRaMacSerializerStatus_t serializeStatus;

    switch( MacCtx.TxMsg.Type )
 800ffa6:	4b18      	ldr	r3, [pc, #96]	@ (8010008 <SerializeTxFrame+0x68>)
 800ffa8:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 800ffac:	2b00      	cmp	r3, #0
 800ffae:	d002      	beq.n	800ffb6 <SerializeTxFrame+0x16>
 800ffb0:	2b04      	cmp	r3, #4
 800ffb2:	d011      	beq.n	800ffd8 <SerializeTxFrame+0x38>
 800ffb4:	e021      	b.n	800fffa <SerializeTxFrame+0x5a>
    {
        case LORAMAC_MSG_TYPE_JOIN_REQUEST:
            serializeStatus = LoRaMacSerializerJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 800ffb6:	4815      	ldr	r0, [pc, #84]	@ (801000c <SerializeTxFrame+0x6c>)
 800ffb8:	f004 f929 	bl	801420e <LoRaMacSerializerJoinRequest>
 800ffbc:	4603      	mov	r3, r0
 800ffbe:	71fb      	strb	r3, [r7, #7]
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 800ffc0:	79fb      	ldrb	r3, [r7, #7]
 800ffc2:	2b00      	cmp	r3, #0
 800ffc4:	d001      	beq.n	800ffca <SerializeTxFrame+0x2a>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 800ffc6:	2311      	movs	r3, #17
 800ffc8:	e01a      	b.n	8010000 <SerializeTxFrame+0x60>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 800ffca:	4b0f      	ldr	r3, [pc, #60]	@ (8010008 <SerializeTxFrame+0x68>)
 800ffcc:	f893 310c 	ldrb.w	r3, [r3, #268]	@ 0x10c
 800ffd0:	461a      	mov	r2, r3
 800ffd2:	4b0d      	ldr	r3, [pc, #52]	@ (8010008 <SerializeTxFrame+0x68>)
 800ffd4:	801a      	strh	r2, [r3, #0]
            break;
 800ffd6:	e012      	b.n	800fffe <SerializeTxFrame+0x5e>
        case LORAMAC_MSG_TYPE_DATA:
            serializeStatus = LoRaMacSerializerData( &MacCtx.TxMsg.Message.Data );
 800ffd8:	480c      	ldr	r0, [pc, #48]	@ (801000c <SerializeTxFrame+0x6c>)
 800ffda:	f004 f99a 	bl	8014312 <LoRaMacSerializerData>
 800ffde:	4603      	mov	r3, r0
 800ffe0:	71fb      	strb	r3, [r7, #7]
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 800ffe2:	79fb      	ldrb	r3, [r7, #7]
 800ffe4:	2b00      	cmp	r3, #0
 800ffe6:	d001      	beq.n	800ffec <SerializeTxFrame+0x4c>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 800ffe8:	2311      	movs	r3, #17
 800ffea:	e009      	b.n	8010000 <SerializeTxFrame+0x60>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 800ffec:	4b06      	ldr	r3, [pc, #24]	@ (8010008 <SerializeTxFrame+0x68>)
 800ffee:	f893 310c 	ldrb.w	r3, [r3, #268]	@ 0x10c
 800fff2:	461a      	mov	r2, r3
 800fff4:	4b04      	ldr	r3, [pc, #16]	@ (8010008 <SerializeTxFrame+0x68>)
 800fff6:	801a      	strh	r2, [r3, #0]
            break;
 800fff8:	e001      	b.n	800fffe <SerializeTxFrame+0x5e>
        case LORAMAC_MSG_TYPE_JOIN_ACCEPT:
        case LORAMAC_MSG_TYPE_UNDEF:
        default:
            return LORAMAC_STATUS_PARAMETER_INVALID;
 800fffa:	2303      	movs	r3, #3
 800fffc:	e000      	b.n	8010000 <SerializeTxFrame+0x60>
    }
    return LORAMAC_STATUS_OK;
 800fffe:	2300      	movs	r3, #0
}
 8010000:	4618      	mov	r0, r3
 8010002:	3708      	adds	r7, #8
 8010004:	46bd      	mov	sp, r7
 8010006:	bd80      	pop	{r7, pc}
 8010008:	20000670 	.word	0x20000670
 801000c:	20000778 	.word	0x20000778

08010010 <ScheduleTx>:

static LoRaMacStatus_t ScheduleTx( bool allowDelayedTx )
{
 8010010:	b580      	push	{r7, lr}
 8010012:	b090      	sub	sp, #64	@ 0x40
 8010014:	af02      	add	r7, sp, #8
 8010016:	4603      	mov	r3, r0
 8010018:	73fb      	strb	r3, [r7, #15]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 801001a:	2303      	movs	r3, #3
 801001c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    NextChanParams_t nextChan;

    // Check class b collisions
    status = CheckForClassBCollision( );
 8010020:	f7ff ff06 	bl	800fe30 <CheckForClassBCollision>
 8010024:	4603      	mov	r3, r0
 8010026:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    if( status != LORAMAC_STATUS_OK )
 801002a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801002e:	2b00      	cmp	r3, #0
 8010030:	d002      	beq.n	8010038 <ScheduleTx+0x28>
    {
        return status;
 8010032:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8010036:	e08f      	b.n	8010158 <ScheduleTx+0x148>
    }

    // Update back-off
    CalculateBackOff( );
 8010038:	f000 f8f4 	bl	8010224 <CalculateBackOff>

    // Serialize frame
    status = SerializeTxFrame( );
 801003c:	f7ff ffb0 	bl	800ffa0 <SerializeTxFrame>
 8010040:	4603      	mov	r3, r0
 8010042:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    if( status != LORAMAC_STATUS_OK )
 8010046:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801004a:	2b00      	cmp	r3, #0
 801004c:	d002      	beq.n	8010054 <ScheduleTx+0x44>
    {
        return status;
 801004e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8010052:	e081      	b.n	8010158 <ScheduleTx+0x148>
    }

    nextChan.AggrTimeOff = Nvm.MacGroup1.AggregatedTimeOff;
 8010054:	4b42      	ldr	r3, [pc, #264]	@ (8010160 <ScheduleTx+0x150>)
 8010056:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010058:	617b      	str	r3, [r7, #20]
    nextChan.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 801005a:	4b41      	ldr	r3, [pc, #260]	@ (8010160 <ScheduleTx+0x150>)
 801005c:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 8010060:	773b      	strb	r3, [r7, #28]
    nextChan.DutyCycleEnabled = Nvm.MacGroup2.DutyCycleOn;
 8010062:	4b3f      	ldr	r3, [pc, #252]	@ (8010160 <ScheduleTx+0x150>)
 8010064:	f893 3108 	ldrb.w	r3, [r3, #264]	@ 0x108
 8010068:	77bb      	strb	r3, [r7, #30]
    nextChan.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 801006a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 801006e:	4618      	mov	r0, r3
 8010070:	f00a f90c 	bl	801a28c <SysTimeGetMcuTime>
 8010074:	4638      	mov	r0, r7
 8010076:	4b3a      	ldr	r3, [pc, #232]	@ (8010160 <ScheduleTx+0x150>)
 8010078:	f8d3 2114 	ldr.w	r2, [r3, #276]	@ 0x114
 801007c:	9200      	str	r2, [sp, #0]
 801007e:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8010082:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8010086:	ca06      	ldmia	r2, {r1, r2}
 8010088:	f00a f861 	bl	801a14e <SysTimeSub>
 801008c:	f107 0320 	add.w	r3, r7, #32
 8010090:	463a      	mov	r2, r7
 8010092:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010096:	e883 0003 	stmia.w	r3, {r0, r1}
    nextChan.LastAggrTx = Nvm.MacGroup1.LastTxDoneTime;
 801009a:	4b31      	ldr	r3, [pc, #196]	@ (8010160 <ScheduleTx+0x150>)
 801009c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801009e:	61bb      	str	r3, [r7, #24]
    nextChan.LastTxIsJoinRequest = false;
 80100a0:	2300      	movs	r3, #0
 80100a2:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    nextChan.Joined = true;
 80100a6:	2301      	movs	r3, #1
 80100a8:	777b      	strb	r3, [r7, #29]
    nextChan.PktLen = MacCtx.PktBufferLen;
 80100aa:	4b2e      	ldr	r3, [pc, #184]	@ (8010164 <ScheduleTx+0x154>)
 80100ac:	881b      	ldrh	r3, [r3, #0]
 80100ae:	857b      	strh	r3, [r7, #42]	@ 0x2a

    // Setup the parameters based on the join status
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 80100b0:	4b2b      	ldr	r3, [pc, #172]	@ (8010160 <ScheduleTx+0x150>)
 80100b2:	f893 311c 	ldrb.w	r3, [r3, #284]	@ 0x11c
 80100b6:	2b00      	cmp	r3, #0
 80100b8:	d104      	bne.n	80100c4 <ScheduleTx+0xb4>
    {
        nextChan.LastTxIsJoinRequest = true;
 80100ba:	2301      	movs	r3, #1
 80100bc:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
        nextChan.Joined = false;
 80100c0:	2300      	movs	r3, #0
 80100c2:	777b      	strb	r3, [r7, #29]
    }

    // Select channel
    status = RegionNextChannel( Nvm.MacGroup2.Region, &nextChan, &MacCtx.Channel, &MacCtx.DutyCycleWaitTime, &Nvm.MacGroup1.AggregatedTimeOff );
 80100c4:	4b26      	ldr	r3, [pc, #152]	@ (8010160 <ScheduleTx+0x150>)
 80100c6:	f893 0040 	ldrb.w	r0, [r3, #64]	@ 0x40
 80100ca:	f107 0114 	add.w	r1, r7, #20
 80100ce:	4b26      	ldr	r3, [pc, #152]	@ (8010168 <ScheduleTx+0x158>)
 80100d0:	9300      	str	r3, [sp, #0]
 80100d2:	4b26      	ldr	r3, [pc, #152]	@ (801016c <ScheduleTx+0x15c>)
 80100d4:	4a26      	ldr	r2, [pc, #152]	@ (8010170 <ScheduleTx+0x160>)
 80100d6:	f004 fb5e 	bl	8014796 <RegionNextChannel>
 80100da:	4603      	mov	r3, r0
 80100dc:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

    if( status != LORAMAC_STATUS_OK )
 80100e0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80100e4:	2b00      	cmp	r3, #0
 80100e6:	d022      	beq.n	801012e <ScheduleTx+0x11e>
    {
        if( ( status == LORAMAC_STATUS_DUTYCYCLE_RESTRICTED ) &&
 80100e8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80100ec:	2b0b      	cmp	r3, #11
 80100ee:	d11b      	bne.n	8010128 <ScheduleTx+0x118>
 80100f0:	7bfb      	ldrb	r3, [r7, #15]
 80100f2:	2b00      	cmp	r3, #0
 80100f4:	d018      	beq.n	8010128 <ScheduleTx+0x118>
            ( allowDelayedTx == true ) )
        {
            // Allow delayed transmissions. We have to allow it in case
            // the MAC must retransmit a frame with the frame repetitions
            if( MacCtx.DutyCycleWaitTime != 0 )
 80100f6:	4b1b      	ldr	r3, [pc, #108]	@ (8010164 <ScheduleTx+0x154>)
 80100f8:	f8d3 3498 	ldr.w	r3, [r3, #1176]	@ 0x498
 80100fc:	2b00      	cmp	r3, #0
 80100fe:	d011      	beq.n	8010124 <ScheduleTx+0x114>
            {// Send later - prepare timer
                MacCtx.MacState |= LORAMAC_TX_DELAYED;
 8010100:	4b18      	ldr	r3, [pc, #96]	@ (8010164 <ScheduleTx+0x154>)
 8010102:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 8010106:	f043 0320 	orr.w	r3, r3, #32
 801010a:	4a16      	ldr	r2, [pc, #88]	@ (8010164 <ScheduleTx+0x154>)
 801010c:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
                TimerSetValue( &MacCtx.TxDelayedTimer, MacCtx.DutyCycleWaitTime );
 8010110:	4b14      	ldr	r3, [pc, #80]	@ (8010164 <ScheduleTx+0x154>)
 8010112:	f8d3 3498 	ldr.w	r3, [r3, #1176]	@ 0x498
 8010116:	4619      	mov	r1, r3
 8010118:	4816      	ldr	r0, [pc, #88]	@ (8010174 <ScheduleTx+0x164>)
 801011a:	f00a fe55 	bl	801adc8 <UTIL_TIMER_SetPeriod>
                TimerStart( &MacCtx.TxDelayedTimer );
 801011e:	4815      	ldr	r0, [pc, #84]	@ (8010174 <ScheduleTx+0x164>)
 8010120:	f00a fd74 	bl	801ac0c <UTIL_TIMER_Start>
            }
            return LORAMAC_STATUS_OK;
 8010124:	2300      	movs	r3, #0
 8010126:	e017      	b.n	8010158 <ScheduleTx+0x148>
        }
        else
        {// State where the MAC cannot send a frame
            return status;
 8010128:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801012c:	e014      	b.n	8010158 <ScheduleTx+0x148>
        }
    }

    // Compute window parameters, offsets, rx symbols, system errors etc.
    ComputeRxWindowParameters( );
 801012e:	f7ff fea1 	bl	800fe74 <ComputeRxWindowParameters>

    // Verify TX frame
    status = VerifyTxFrame( );
 8010132:	f7ff ff05 	bl	800ff40 <VerifyTxFrame>
 8010136:	4603      	mov	r3, r0
 8010138:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    if( status != LORAMAC_STATUS_OK )
 801013c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8010140:	2b00      	cmp	r3, #0
 8010142:	d002      	beq.n	801014a <ScheduleTx+0x13a>
    {
        return status;
 8010144:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8010148:	e006      	b.n	8010158 <ScheduleTx+0x148>
    }

    // Try to send now
    return SendFrameOnChannel( MacCtx.Channel );
 801014a:	4b06      	ldr	r3, [pc, #24]	@ (8010164 <ScheduleTx+0x154>)
 801014c:	f893 341f 	ldrb.w	r3, [r3, #1055]	@ 0x41f
 8010150:	4618      	mov	r0, r3
 8010152:	f000 fb3b 	bl	80107cc <SendFrameOnChannel>
 8010156:	4603      	mov	r3, r0
}
 8010158:	4618      	mov	r0, r3
 801015a:	3738      	adds	r7, #56	@ 0x38
 801015c:	46bd      	mov	sp, r7
 801015e:	bd80      	pop	{r7, pc}
 8010160:	20000b90 	.word	0x20000b90
 8010164:	20000670 	.word	0x20000670
 8010168:	20000bc0 	.word	0x20000bc0
 801016c:	20000b08 	.word	0x20000b08
 8010170:	20000a8f 	.word	0x20000a8f
 8010174:	200009d8 	.word	0x200009d8

08010178 <SecureFrame>:

static LoRaMacStatus_t SecureFrame( uint8_t txDr, uint8_t txCh )
{
 8010178:	b580      	push	{r7, lr}
 801017a:	b084      	sub	sp, #16
 801017c:	af00      	add	r7, sp, #0
 801017e:	4603      	mov	r3, r0
 8010180:	460a      	mov	r2, r1
 8010182:	71fb      	strb	r3, [r7, #7]
 8010184:	4613      	mov	r3, r2
 8010186:	71bb      	strb	r3, [r7, #6]
    LoRaMacCryptoStatus_t macCryptoStatus = LORAMAC_CRYPTO_ERROR;
 8010188:	2312      	movs	r3, #18
 801018a:	73fb      	strb	r3, [r7, #15]
    uint32_t fCntUp = 0;
 801018c:	2300      	movs	r3, #0
 801018e:	60bb      	str	r3, [r7, #8]

    switch( MacCtx.TxMsg.Type )
 8010190:	4b22      	ldr	r3, [pc, #136]	@ (801021c <SecureFrame+0xa4>)
 8010192:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 8010196:	2b00      	cmp	r3, #0
 8010198:	d002      	beq.n	80101a0 <SecureFrame+0x28>
 801019a:	2b04      	cmp	r3, #4
 801019c:	d011      	beq.n	80101c2 <SecureFrame+0x4a>
 801019e:	e036      	b.n	801020e <SecureFrame+0x96>
    {
        case LORAMAC_MSG_TYPE_JOIN_REQUEST:
            macCryptoStatus = LoRaMacCryptoPrepareJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 80101a0:	481f      	ldr	r0, [pc, #124]	@ (8010220 <SecureFrame+0xa8>)
 80101a2:	f003 fc07 	bl	80139b4 <LoRaMacCryptoPrepareJoinRequest>
 80101a6:	4603      	mov	r3, r0
 80101a8:	73fb      	strb	r3, [r7, #15]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 80101aa:	7bfb      	ldrb	r3, [r7, #15]
 80101ac:	2b00      	cmp	r3, #0
 80101ae:	d001      	beq.n	80101b4 <SecureFrame+0x3c>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 80101b0:	2311      	movs	r3, #17
 80101b2:	e02f      	b.n	8010214 <SecureFrame+0x9c>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 80101b4:	4b19      	ldr	r3, [pc, #100]	@ (801021c <SecureFrame+0xa4>)
 80101b6:	f893 310c 	ldrb.w	r3, [r3, #268]	@ 0x10c
 80101ba:	461a      	mov	r2, r3
 80101bc:	4b17      	ldr	r3, [pc, #92]	@ (801021c <SecureFrame+0xa4>)
 80101be:	801a      	strh	r2, [r3, #0]
            break;
 80101c0:	e027      	b.n	8010212 <SecureFrame+0x9a>
        case LORAMAC_MSG_TYPE_DATA:

            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 80101c2:	f107 0308 	add.w	r3, r7, #8
 80101c6:	4618      	mov	r0, r3
 80101c8:	f003 fb38 	bl	801383c <LoRaMacCryptoGetFCntUp>
 80101cc:	4603      	mov	r3, r0
 80101ce:	2b00      	cmp	r3, #0
 80101d0:	d001      	beq.n	80101d6 <SecureFrame+0x5e>
            {
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 80101d2:	2312      	movs	r3, #18
 80101d4:	e01e      	b.n	8010214 <SecureFrame+0x9c>
            }

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            if( ( MacCtx.ChannelsNbTransCounter >= 1 ) || ( MacCtx.AckTimeoutRetriesCounter > 1 ) )
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
            if( MacCtx.ChannelsNbTransCounter >= 1 )
 80101d6:	4b11      	ldr	r3, [pc, #68]	@ (801021c <SecureFrame+0xa4>)
 80101d8:	f893 341c 	ldrb.w	r3, [r3, #1052]	@ 0x41c
 80101dc:	2b00      	cmp	r3, #0
 80101de:	d002      	beq.n	80101e6 <SecureFrame+0x6e>
#endif /* LORAMAC_VERSION */
            {
                fCntUp -= 1;
 80101e0:	68bb      	ldr	r3, [r7, #8]
 80101e2:	3b01      	subs	r3, #1
 80101e4:	60bb      	str	r3, [r7, #8]
            }

            macCryptoStatus = LoRaMacCryptoSecureMessage( fCntUp, txDr, txCh, &MacCtx.TxMsg.Message.Data );
 80101e6:	68b8      	ldr	r0, [r7, #8]
 80101e8:	79ba      	ldrb	r2, [r7, #6]
 80101ea:	79f9      	ldrb	r1, [r7, #7]
 80101ec:	4b0c      	ldr	r3, [pc, #48]	@ (8010220 <SecureFrame+0xa8>)
 80101ee:	f003 fcf3 	bl	8013bd8 <LoRaMacCryptoSecureMessage>
 80101f2:	4603      	mov	r3, r0
 80101f4:	73fb      	strb	r3, [r7, #15]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 80101f6:	7bfb      	ldrb	r3, [r7, #15]
 80101f8:	2b00      	cmp	r3, #0
 80101fa:	d001      	beq.n	8010200 <SecureFrame+0x88>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 80101fc:	2311      	movs	r3, #17
 80101fe:	e009      	b.n	8010214 <SecureFrame+0x9c>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 8010200:	4b06      	ldr	r3, [pc, #24]	@ (801021c <SecureFrame+0xa4>)
 8010202:	f893 310c 	ldrb.w	r3, [r3, #268]	@ 0x10c
 8010206:	461a      	mov	r2, r3
 8010208:	4b04      	ldr	r3, [pc, #16]	@ (801021c <SecureFrame+0xa4>)
 801020a:	801a      	strh	r2, [r3, #0]
            break;
 801020c:	e001      	b.n	8010212 <SecureFrame+0x9a>
        case LORAMAC_MSG_TYPE_JOIN_ACCEPT:
        case LORAMAC_MSG_TYPE_UNDEF:
        default:
            return LORAMAC_STATUS_PARAMETER_INVALID;
 801020e:	2303      	movs	r3, #3
 8010210:	e000      	b.n	8010214 <SecureFrame+0x9c>
    }
    return LORAMAC_STATUS_OK;
 8010212:	2300      	movs	r3, #0
}
 8010214:	4618      	mov	r0, r3
 8010216:	3710      	adds	r7, #16
 8010218:	46bd      	mov	sp, r7
 801021a:	bd80      	pop	{r7, pc}
 801021c:	20000670 	.word	0x20000670
 8010220:	20000778 	.word	0x20000778

08010224 <CalculateBackOff>:

static void CalculateBackOff( void )
{
 8010224:	b480      	push	{r7}
 8010226:	af00      	add	r7, sp, #0
    // Make sure that the calculation of the backoff time for the aggregated time off will only be done in
    // case the value is zero. It will be set to zero in the function RegionNextChannel.
    if( Nvm.MacGroup1.AggregatedTimeOff == 0 )
 8010228:	4b09      	ldr	r3, [pc, #36]	@ (8010250 <CalculateBackOff+0x2c>)
 801022a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801022c:	2b00      	cmp	r3, #0
 801022e:	d10a      	bne.n	8010246 <CalculateBackOff+0x22>
    {
        // Update aggregated time-off. This must be an assignment and no incremental
        // update as we do only calculate the time-off based on the last transmission
        Nvm.MacGroup1.AggregatedTimeOff = ( MacCtx.TxTimeOnAir * Nvm.MacGroup2.AggregatedDCycle - MacCtx.TxTimeOnAir );
 8010230:	4b07      	ldr	r3, [pc, #28]	@ (8010250 <CalculateBackOff+0x2c>)
 8010232:	f8b3 310c 	ldrh.w	r3, [r3, #268]	@ 0x10c
 8010236:	3b01      	subs	r3, #1
 8010238:	4a06      	ldr	r2, [pc, #24]	@ (8010254 <CalculateBackOff+0x30>)
 801023a:	f8d2 2420 	ldr.w	r2, [r2, #1056]	@ 0x420
 801023e:	fb02 f303 	mul.w	r3, r2, r3
 8010242:	4a03      	ldr	r2, [pc, #12]	@ (8010250 <CalculateBackOff+0x2c>)
 8010244:	6313      	str	r3, [r2, #48]	@ 0x30
    }
}
 8010246:	bf00      	nop
 8010248:	46bd      	mov	sp, r7
 801024a:	bc80      	pop	{r7}
 801024c:	4770      	bx	lr
 801024e:	bf00      	nop
 8010250:	20000b90 	.word	0x20000b90
 8010254:	20000670 	.word	0x20000670

08010258 <RemoveMacCommands>:

static void RemoveMacCommands( LoRaMacRxSlot_t rxSlot, LoRaMacFrameCtrl_t fCtrl, Mcps_t request )
{
 8010258:	b580      	push	{r7, lr}
 801025a:	b082      	sub	sp, #8
 801025c:	af00      	add	r7, sp, #0
 801025e:	4603      	mov	r3, r0
 8010260:	7139      	strb	r1, [r7, #4]
 8010262:	71fb      	strb	r3, [r7, #7]
 8010264:	4613      	mov	r3, r2
 8010266:	71bb      	strb	r3, [r7, #6]
    if( rxSlot == RX_SLOT_WIN_1 || rxSlot == RX_SLOT_WIN_2  )
 8010268:	79fb      	ldrb	r3, [r7, #7]
 801026a:	2b00      	cmp	r3, #0
 801026c:	d002      	beq.n	8010274 <RemoveMacCommands+0x1c>
 801026e:	79fb      	ldrb	r3, [r7, #7]
 8010270:	2b01      	cmp	r3, #1
 8010272:	d10d      	bne.n	8010290 <RemoveMacCommands+0x38>
    {
        // Remove all sticky MAC commands answers since we can assume
        // that they have been received by the server.
        if( request == MCPS_CONFIRMED )
 8010274:	79bb      	ldrb	r3, [r7, #6]
 8010276:	2b01      	cmp	r3, #1
 8010278:	d108      	bne.n	801028c <RemoveMacCommands+0x34>
        {
            if( fCtrl.Bits.Ack == 1 )
 801027a:	793b      	ldrb	r3, [r7, #4]
 801027c:	f003 0320 	and.w	r3, r3, #32
 8010280:	b2db      	uxtb	r3, r3
 8010282:	2b00      	cmp	r3, #0
 8010284:	d004      	beq.n	8010290 <RemoveMacCommands+0x38>
            {  // For confirmed uplinks only if we have received an ACK.
                LoRaMacCommandsRemoveStickyAnsCmds( );
 8010286:	f002 fc6f 	bl	8012b68 <LoRaMacCommandsRemoveStickyAnsCmds>
        else
        {
            LoRaMacCommandsRemoveStickyAnsCmds( );
        }
    }
}
 801028a:	e001      	b.n	8010290 <RemoveMacCommands+0x38>
            LoRaMacCommandsRemoveStickyAnsCmds( );
 801028c:	f002 fc6c 	bl	8012b68 <LoRaMacCommandsRemoveStickyAnsCmds>
}
 8010290:	bf00      	nop
 8010292:	3708      	adds	r7, #8
 8010294:	46bd      	mov	sp, r7
 8010296:	bd80      	pop	{r7, pc}

08010298 <ResetMacParameters>:

static void ResetMacParameters( void )
{
 8010298:	b5b0      	push	{r4, r5, r7, lr}
 801029a:	b090      	sub	sp, #64	@ 0x40
 801029c:	af00      	add	r7, sp, #0
    LoRaMacClassBCallback_t classBCallbacks;
    LoRaMacClassBParams_t classBParams;

    Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_NONE;
 801029e:	4b70      	ldr	r3, [pc, #448]	@ (8010460 <ResetMacParameters+0x1c8>)
 80102a0:	2200      	movs	r2, #0
 80102a2:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c

    // ADR counter
    Nvm.MacGroup1.AdrAckCounter = 0;
 80102a6:	4b6e      	ldr	r3, [pc, #440]	@ (8010460 <ResetMacParameters+0x1c8>)
 80102a8:	2200      	movs	r2, #0
 80102aa:	629a      	str	r2, [r3, #40]	@ 0x28

    MacCtx.ChannelsNbTransCounter = 0;
 80102ac:	4b6d      	ldr	r3, [pc, #436]	@ (8010464 <ResetMacParameters+0x1cc>)
 80102ae:	2200      	movs	r2, #0
 80102b0:	f883 241c 	strb.w	r2, [r3, #1052]	@ 0x41c
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetries = 1;
    MacCtx.AckTimeoutRetriesCounter = 1;
    MacCtx.AckTimeoutRetry = false;
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    MacCtx.RetransmitTimeoutRetry = false;
 80102b4:	4b6b      	ldr	r3, [pc, #428]	@ (8010464 <ResetMacParameters+0x1cc>)
 80102b6:	2200      	movs	r2, #0
 80102b8:	f883 241d 	strb.w	r2, [r3, #1053]	@ 0x41d
    MacCtx.ResponseTimeoutStartTime = 0;
 80102bc:	4b69      	ldr	r3, [pc, #420]	@ (8010464 <ResetMacParameters+0x1cc>)
 80102be:	2200      	movs	r2, #0
 80102c0:	f8c3 249c 	str.w	r2, [r3, #1180]	@ 0x49c
#endif /* LORAMAC_VERSION */

    Nvm.MacGroup2.MaxDCycle = 0;
 80102c4:	4b66      	ldr	r3, [pc, #408]	@ (8010460 <ResetMacParameters+0x1c8>)
 80102c6:	2200      	movs	r2, #0
 80102c8:	f883 2107 	strb.w	r2, [r3, #263]	@ 0x107
    Nvm.MacGroup2.AggregatedDCycle = 1;
 80102cc:	4b64      	ldr	r3, [pc, #400]	@ (8010460 <ResetMacParameters+0x1c8>)
 80102ce:	2201      	movs	r2, #1
 80102d0:	f8a3 210c 	strh.w	r2, [r3, #268]	@ 0x10c

    Nvm.MacGroup1.ChannelsTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 80102d4:	4b62      	ldr	r3, [pc, #392]	@ (8010460 <ResetMacParameters+0x1c8>)
 80102d6:	f993 20cc 	ldrsb.w	r2, [r3, #204]	@ 0xcc
 80102da:	4b61      	ldr	r3, [pc, #388]	@ (8010460 <ResetMacParameters+0x1c8>)
 80102dc:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    Nvm.MacGroup1.ChannelsDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 80102e0:	4b5f      	ldr	r3, [pc, #380]	@ (8010460 <ResetMacParameters+0x1c8>)
 80102e2:	f993 20cd 	ldrsb.w	r2, [r3, #205]	@ 0xcd
 80102e6:	4b5e      	ldr	r3, [pc, #376]	@ (8010460 <ResetMacParameters+0x1c8>)
 80102e8:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
    Nvm.MacGroup2.MacParams.Rx1DrOffset = Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset;
 80102ec:	4b5c      	ldr	r3, [pc, #368]	@ (8010460 <ResetMacParameters+0x1c8>)
 80102ee:	f893 20a5 	ldrb.w	r2, [r3, #165]	@ 0xa5
 80102f2:	4b5b      	ldr	r3, [pc, #364]	@ (8010460 <ResetMacParameters+0x1c8>)
 80102f4:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
    Nvm.MacGroup2.MacParams.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 80102f8:	4b59      	ldr	r3, [pc, #356]	@ (8010460 <ResetMacParameters+0x1c8>)
 80102fa:	4a59      	ldr	r2, [pc, #356]	@ (8010460 <ResetMacParameters+0x1c8>)
 80102fc:	3364      	adds	r3, #100	@ 0x64
 80102fe:	32a8      	adds	r2, #168	@ 0xa8
 8010300:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010304:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 8010308:	4b55      	ldr	r3, [pc, #340]	@ (8010460 <ResetMacParameters+0x1c8>)
 801030a:	4a55      	ldr	r2, [pc, #340]	@ (8010460 <ResetMacParameters+0x1c8>)
 801030c:	336c      	adds	r3, #108	@ 0x6c
 801030e:	32b0      	adds	r2, #176	@ 0xb0
 8010310:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010314:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.UplinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime;
 8010318:	4b51      	ldr	r3, [pc, #324]	@ (8010460 <ResetMacParameters+0x1c8>)
 801031a:	f893 20b8 	ldrb.w	r2, [r3, #184]	@ 0xb8
 801031e:	4b50      	ldr	r3, [pc, #320]	@ (8010460 <ResetMacParameters+0x1c8>)
 8010320:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
    Nvm.MacGroup2.MacParams.DownlinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime;
 8010324:	4b4e      	ldr	r3, [pc, #312]	@ (8010460 <ResetMacParameters+0x1c8>)
 8010326:	f893 20b9 	ldrb.w	r2, [r3, #185]	@ 0xb9
 801032a:	4b4d      	ldr	r3, [pc, #308]	@ (8010460 <ResetMacParameters+0x1c8>)
 801032c:	f883 2075 	strb.w	r2, [r3, #117]	@ 0x75
    Nvm.MacGroup2.MacParams.MaxEirp = Nvm.MacGroup2.MacParamsDefaults.MaxEirp;
 8010330:	4b4b      	ldr	r3, [pc, #300]	@ (8010460 <ResetMacParameters+0x1c8>)
 8010332:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8010336:	4a4a      	ldr	r2, [pc, #296]	@ (8010460 <ResetMacParameters+0x1c8>)
 8010338:	6793      	str	r3, [r2, #120]	@ 0x78
    Nvm.MacGroup2.MacParams.AntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 801033a:	4b49      	ldr	r3, [pc, #292]	@ (8010460 <ResetMacParameters+0x1c8>)
 801033c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8010340:	4a47      	ldr	r2, [pc, #284]	@ (8010460 <ResetMacParameters+0x1c8>)
 8010342:	67d3      	str	r3, [r2, #124]	@ 0x7c

    MacCtx.NodeAckRequested = false;
 8010344:	4b47      	ldr	r3, [pc, #284]	@ (8010464 <ResetMacParameters+0x1cc>)
 8010346:	2200      	movs	r2, #0
 8010348:	f883 241e 	strb.w	r2, [r3, #1054]	@ 0x41e
    Nvm.MacGroup1.SrvAckRequested = false;
 801034c:	4b44      	ldr	r3, [pc, #272]	@ (8010460 <ResetMacParameters+0x1c8>)
 801034e:	2200      	movs	r2, #0
 8010350:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = false;
 8010354:	4b42      	ldr	r3, [pc, #264]	@ (8010460 <ResetMacParameters+0x1c8>)
 8010356:	2200      	movs	r2, #0
 8010358:	f883 2109 	strb.w	r2, [r3, #265]	@ 0x109
    Nvm.MacGroup2.DownlinkReceived = false;
 801035c:	4b40      	ldr	r3, [pc, #256]	@ (8010460 <ResetMacParameters+0x1c8>)
 801035e:	2200      	movs	r2, #0
 8010360:	f883 210a 	strb.w	r2, [r3, #266]	@ 0x10a
#endif /* LORAMAC_VERSION */

    // Reset to application defaults
    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_RESET_TO_DEFAULT_CHANNELS;
 8010364:	2301      	movs	r3, #1
 8010366:	743b      	strb	r3, [r7, #16]
    params.NvmGroup1 = &Nvm.RegionGroup1;
 8010368:	4b3f      	ldr	r3, [pc, #252]	@ (8010468 <ResetMacParameters+0x1d0>)
 801036a:	607b      	str	r3, [r7, #4]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 801036c:	4b3f      	ldr	r3, [pc, #252]	@ (801046c <ResetMacParameters+0x1d4>)
 801036e:	60bb      	str	r3, [r7, #8]
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    params.Bands = &RegionBands;
 8010370:	4b3f      	ldr	r3, [pc, #252]	@ (8010470 <ResetMacParameters+0x1d8>)
 8010372:	60fb      	str	r3, [r7, #12]
#endif /* LORAMAC_VERSION */
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 8010374:	4b3a      	ldr	r3, [pc, #232]	@ (8010460 <ResetMacParameters+0x1c8>)
 8010376:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 801037a:	1d3a      	adds	r2, r7, #4
 801037c:	4611      	mov	r1, r2
 801037e:	4618      	mov	r0, r3
 8010380:	f004 f8f5 	bl	801456e <RegionInitDefaults>

    // Initialize channel index.
    MacCtx.Channel = 0;
 8010384:	4b37      	ldr	r3, [pc, #220]	@ (8010464 <ResetMacParameters+0x1cc>)
 8010386:	2200      	movs	r2, #0
 8010388:	f883 241f 	strb.w	r2, [r3, #1055]	@ 0x41f

    // Initialize Rx2 config parameters.
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 801038c:	4b35      	ldr	r3, [pc, #212]	@ (8010464 <ResetMacParameters+0x1cc>)
 801038e:	f893 241f 	ldrb.w	r2, [r3, #1055]	@ 0x41f
 8010392:	4b34      	ldr	r3, [pc, #208]	@ (8010464 <ResetMacParameters+0x1cc>)
 8010394:	f883 23d0 	strb.w	r2, [r3, #976]	@ 0x3d0
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 8010398:	4b31      	ldr	r3, [pc, #196]	@ (8010460 <ResetMacParameters+0x1c8>)
 801039a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801039c:	4a31      	ldr	r2, [pc, #196]	@ (8010464 <ResetMacParameters+0x1cc>)
 801039e:	f8c2 33d4 	str.w	r3, [r2, #980]	@ 0x3d4
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 80103a2:	4b2f      	ldr	r3, [pc, #188]	@ (8010460 <ResetMacParameters+0x1c8>)
 80103a4:	f893 2075 	ldrb.w	r2, [r3, #117]	@ 0x75
 80103a8:	4b2e      	ldr	r3, [pc, #184]	@ (8010464 <ResetMacParameters+0x1cc>)
 80103aa:	f883 23e0 	strb.w	r2, [r3, #992]	@ 0x3e0
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 80103ae:	4b2c      	ldr	r3, [pc, #176]	@ (8010460 <ResetMacParameters+0x1c8>)
 80103b0:	f893 2080 	ldrb.w	r2, [r3, #128]	@ 0x80
 80103b4:	4b2b      	ldr	r3, [pc, #172]	@ (8010464 <ResetMacParameters+0x1cc>)
 80103b6:	f883 23e1 	strb.w	r2, [r3, #993]	@ 0x3e1
    MacCtx.RxWindow2Config.RxContinuous = false;
 80103ba:	4b2a      	ldr	r3, [pc, #168]	@ (8010464 <ResetMacParameters+0x1cc>)
 80103bc:	2200      	movs	r2, #0
 80103be:	f883 23e2 	strb.w	r2, [r3, #994]	@ 0x3e2
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 80103c2:	4b28      	ldr	r3, [pc, #160]	@ (8010464 <ResetMacParameters+0x1cc>)
 80103c4:	2201      	movs	r2, #1
 80103c6:	f883 23e3 	strb.w	r2, [r3, #995]	@ 0x3e3
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    MacCtx.RxWindow2Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 80103ca:	4b25      	ldr	r3, [pc, #148]	@ (8010460 <ResetMacParameters+0x1c8>)
 80103cc:	f893 211c 	ldrb.w	r2, [r3, #284]	@ 0x11c
 80103d0:	4b24      	ldr	r3, [pc, #144]	@ (8010464 <ResetMacParameters+0x1cc>)
 80103d2:	f883 23e4 	strb.w	r2, [r3, #996]	@ 0x3e4
#endif /* LORAMAC_VERSION */

    // Initialize RxC config parameters.
    MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 80103d6:	4a23      	ldr	r2, [pc, #140]	@ (8010464 <ResetMacParameters+0x1cc>)
 80103d8:	4b22      	ldr	r3, [pc, #136]	@ (8010464 <ResetMacParameters+0x1cc>)
 80103da:	f502 747a 	add.w	r4, r2, #1000	@ 0x3e8
 80103de:	f503 7574 	add.w	r5, r3, #976	@ 0x3d0
 80103e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80103e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80103e6:	e895 0003 	ldmia.w	r5, {r0, r1}
 80103ea:	e884 0003 	stmia.w	r4, {r0, r1}
    MacCtx.RxWindowCConfig.RxContinuous = true;
 80103ee:	4b1d      	ldr	r3, [pc, #116]	@ (8010464 <ResetMacParameters+0x1cc>)
 80103f0:	2201      	movs	r2, #1
 80103f2:	f883 23fa 	strb.w	r2, [r3, #1018]	@ 0x3fa
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 80103f6:	4b1b      	ldr	r3, [pc, #108]	@ (8010464 <ResetMacParameters+0x1cc>)
 80103f8:	2202      	movs	r2, #2
 80103fa:	f883 23fb 	strb.w	r2, [r3, #1019]	@ 0x3fb

    // Initialize class b
    // Apply callback
    classBCallbacks.GetTemperatureLevel = NULL;
 80103fe:	2300      	movs	r3, #0
 8010400:	63bb      	str	r3, [r7, #56]	@ 0x38
    classBCallbacks.MacProcessNotify = NULL;
 8010402:	2300      	movs	r3, #0
 8010404:	63fb      	str	r3, [r7, #60]	@ 0x3c

    if( MacCtx.MacCallbacks != NULL )
 8010406:	4b17      	ldr	r3, [pc, #92]	@ (8010464 <ResetMacParameters+0x1cc>)
 8010408:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 801040c:	2b00      	cmp	r3, #0
 801040e:	d009      	beq.n	8010424 <ResetMacParameters+0x18c>
    {
        classBCallbacks.GetTemperatureLevel = MacCtx.MacCallbacks->GetTemperatureLevel;
 8010410:	4b14      	ldr	r3, [pc, #80]	@ (8010464 <ResetMacParameters+0x1cc>)
 8010412:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 8010416:	685b      	ldr	r3, [r3, #4]
 8010418:	63bb      	str	r3, [r7, #56]	@ 0x38
        classBCallbacks.MacProcessNotify = MacCtx.MacCallbacks->MacProcessNotify;
 801041a:	4b12      	ldr	r3, [pc, #72]	@ (8010464 <ResetMacParameters+0x1cc>)
 801041c:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 8010420:	691b      	ldr	r3, [r3, #16]
 8010422:	63fb      	str	r3, [r7, #60]	@ 0x3c
    }

    // Must all be static. Don't use local references.
    classBParams.MlmeIndication = &MacCtx.MlmeIndication;
 8010424:	4b13      	ldr	r3, [pc, #76]	@ (8010474 <ResetMacParameters+0x1dc>)
 8010426:	617b      	str	r3, [r7, #20]
    classBParams.McpsIndication = &MacCtx.McpsIndication;
 8010428:	4b13      	ldr	r3, [pc, #76]	@ (8010478 <ResetMacParameters+0x1e0>)
 801042a:	61bb      	str	r3, [r7, #24]
    classBParams.MlmeConfirm = &MacCtx.MlmeConfirm;
 801042c:	4b13      	ldr	r3, [pc, #76]	@ (801047c <ResetMacParameters+0x1e4>)
 801042e:	61fb      	str	r3, [r7, #28]
    classBParams.LoRaMacFlags = &MacCtx.MacFlags;
 8010430:	4b13      	ldr	r3, [pc, #76]	@ (8010480 <ResetMacParameters+0x1e8>)
 8010432:	623b      	str	r3, [r7, #32]
    classBParams.LoRaMacDevAddr = &Nvm.MacGroup2.DevAddr;
 8010434:	4b13      	ldr	r3, [pc, #76]	@ (8010484 <ResetMacParameters+0x1ec>)
 8010436:	627b      	str	r3, [r7, #36]	@ 0x24
    classBParams.LoRaMacRegion = &Nvm.MacGroup2.Region;
 8010438:	4b13      	ldr	r3, [pc, #76]	@ (8010488 <ResetMacParameters+0x1f0>)
 801043a:	62bb      	str	r3, [r7, #40]	@ 0x28
    classBParams.LoRaMacParams = &Nvm.MacGroup2.MacParams;
 801043c:	4b13      	ldr	r3, [pc, #76]	@ (801048c <ResetMacParameters+0x1f4>)
 801043e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    classBParams.MulticastChannels = &Nvm.MacGroup2.MulticastChannelList[0];
 8010440:	4b13      	ldr	r3, [pc, #76]	@ (8010490 <ResetMacParameters+0x1f8>)
 8010442:	633b      	str	r3, [r7, #48]	@ 0x30
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    classBParams.NetworkActivation = &Nvm.MacGroup2.NetworkActivation;
 8010444:	4b13      	ldr	r3, [pc, #76]	@ (8010494 <ResetMacParameters+0x1fc>)
 8010446:	637b      	str	r3, [r7, #52]	@ 0x34
#endif /* LORAMAC_VERSION */

    LoRaMacClassBInit( &classBParams, &classBCallbacks, &Nvm.ClassB );
 8010448:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 801044c:	f107 0314 	add.w	r3, r7, #20
 8010450:	4a11      	ldr	r2, [pc, #68]	@ (8010498 <ResetMacParameters+0x200>)
 8010452:	4618      	mov	r0, r3
 8010454:	f002 f8cf 	bl	80125f6 <LoRaMacClassBInit>
}
 8010458:	bf00      	nop
 801045a:	3740      	adds	r7, #64	@ 0x40
 801045c:	46bd      	mov	sp, r7
 801045e:	bdb0      	pop	{r4, r5, r7, pc}
 8010460:	20000b90 	.word	0x20000b90
 8010464:	20000670 	.word	0x20000670
 8010468:	20000d74 	.word	0x20000d74
 801046c:	20000d78 	.word	0x20000d78
 8010470:	20001688 	.word	0x20001688
 8010474:	20000adc 	.word	0x20000adc
 8010478:	20000a94 	.word	0x20000a94
 801047c:	20000ac8 	.word	0x20000ac8
 8010480:	20000b05 	.word	0x20000b05
 8010484:	20000c64 	.word	0x20000c64
 8010488:	20000bd0 	.word	0x20000bd0
 801048c:	20000bd4 	.word	0x20000bd4
 8010490:	20000c68 	.word	0x20000c68
 8010494:	20000cac 	.word	0x20000cac
 8010498:	200010f4 	.word	0x200010f4

0801049c <RxWindowSetup>:
 *
 * \param [in] rxTimer  Window timer to be topped.
 * \param [in] rxConfig Window parameters to be setup
 */
static void RxWindowSetup( TimerEvent_t* rxTimer, RxConfigParams_t* rxConfig )
{
 801049c:	b580      	push	{r7, lr}
 801049e:	b082      	sub	sp, #8
 80104a0:	af00      	add	r7, sp, #0
 80104a2:	6078      	str	r0, [r7, #4]
 80104a4:	6039      	str	r1, [r7, #0]
    TimerStop( rxTimer );
 80104a6:	6878      	ldr	r0, [r7, #4]
 80104a8:	f00a fc1e 	bl	801ace8 <UTIL_TIMER_Stop>

    // Ensure the radio is Idle
    Radio.Standby( );
 80104ac:	4b11      	ldr	r3, [pc, #68]	@ (80104f4 <RxWindowSetup+0x58>)
 80104ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80104b0:	4798      	blx	r3

    if( RegionRxConfig( Nvm.MacGroup2.Region, rxConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 80104b2:	4b11      	ldr	r3, [pc, #68]	@ (80104f8 <RxWindowSetup+0x5c>)
 80104b4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80104b8:	4a10      	ldr	r2, [pc, #64]	@ (80104fc <RxWindowSetup+0x60>)
 80104ba:	6839      	ldr	r1, [r7, #0]
 80104bc:	4618      	mov	r0, r3
 80104be:	f004 f8be 	bl	801463e <RegionRxConfig>
 80104c2:	4603      	mov	r3, r0
 80104c4:	2b00      	cmp	r3, #0
 80104c6:	d010      	beq.n	80104ea <RxWindowSetup+0x4e>
    {
        MacCtx.MlmeIndication.RxDatarate = MacCtx.McpsIndication.RxDatarate;
 80104c8:	4b0d      	ldr	r3, [pc, #52]	@ (8010500 <RxWindowSetup+0x64>)
 80104ca:	f893 2428 	ldrb.w	r2, [r3, #1064]	@ 0x428
 80104ce:	4b0c      	ldr	r3, [pc, #48]	@ (8010500 <RxWindowSetup+0x64>)
 80104d0:	f883 246e 	strb.w	r2, [r3, #1134]	@ 0x46e
        Radio.Rx( Nvm.MacGroup2.MacParams.MaxRxWindow );
 80104d4:	4b07      	ldr	r3, [pc, #28]	@ (80104f4 <RxWindowSetup+0x58>)
 80104d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80104d8:	4a07      	ldr	r2, [pc, #28]	@ (80104f8 <RxWindowSetup+0x5c>)
 80104da:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80104dc:	4610      	mov	r0, r2
 80104de:	4798      	blx	r3
        MacCtx.RxSlot = rxConfig->RxSlot;
 80104e0:	683b      	ldr	r3, [r7, #0]
 80104e2:	7cda      	ldrb	r2, [r3, #19]
 80104e4:	4b06      	ldr	r3, [pc, #24]	@ (8010500 <RxWindowSetup+0x64>)
 80104e6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
    }
}
 80104ea:	bf00      	nop
 80104ec:	3708      	adds	r7, #8
 80104ee:	46bd      	mov	sp, r7
 80104f0:	bd80      	pop	{r7, pc}
 80104f2:	bf00      	nop
 80104f4:	0801c57c 	.word	0x0801c57c
 80104f8:	20000b90 	.word	0x20000b90
 80104fc:	20000a98 	.word	0x20000a98
 8010500:	20000670 	.word	0x20000670

08010504 <OpenContinuousRxCWindow>:

static void OpenContinuousRxCWindow( void )
{
 8010504:	b590      	push	{r4, r7, lr}
 8010506:	b083      	sub	sp, #12
 8010508:	af02      	add	r7, sp, #8
    // Compute RxC windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 801050a:	4b1e      	ldr	r3, [pc, #120]	@ (8010584 <OpenContinuousRxCWindow+0x80>)
 801050c:	f893 0040 	ldrb.w	r0, [r3, #64]	@ 0x40
                                     Nvm.MacGroup2.MacParams.RxCChannel.Datarate,
 8010510:	4b1c      	ldr	r3, [pc, #112]	@ (8010584 <OpenContinuousRxCWindow+0x80>)
 8010512:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8010516:	b259      	sxtb	r1, r3
 8010518:	4b1a      	ldr	r3, [pc, #104]	@ (8010584 <OpenContinuousRxCWindow+0x80>)
 801051a:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 801051e:	4b19      	ldr	r3, [pc, #100]	@ (8010584 <OpenContinuousRxCWindow+0x80>)
 8010520:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010522:	4c19      	ldr	r4, [pc, #100]	@ (8010588 <OpenContinuousRxCWindow+0x84>)
 8010524:	9400      	str	r4, [sp, #0]
 8010526:	f004 f870 	bl	801460a <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindowCConfig );

    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 801052a:	4b18      	ldr	r3, [pc, #96]	@ (801058c <OpenContinuousRxCWindow+0x88>)
 801052c:	2202      	movs	r2, #2
 801052e:	f883 23fb 	strb.w	r2, [r3, #1019]	@ 0x3fb
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    MacCtx.RxWindowCConfig.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 8010532:	4b14      	ldr	r3, [pc, #80]	@ (8010584 <OpenContinuousRxCWindow+0x80>)
 8010534:	f893 211c 	ldrb.w	r2, [r3, #284]	@ 0x11c
 8010538:	4b14      	ldr	r3, [pc, #80]	@ (801058c <OpenContinuousRxCWindow+0x88>)
 801053a:	f883 23fc 	strb.w	r2, [r3, #1020]	@ 0x3fc
#endif /* LORAMAC_VERSION */
    // Setup continuous listening
    MacCtx.RxWindowCConfig.RxContinuous = true;
 801053e:	4b13      	ldr	r3, [pc, #76]	@ (801058c <OpenContinuousRxCWindow+0x88>)
 8010540:	2201      	movs	r2, #1
 8010542:	f883 23fa 	strb.w	r2, [r3, #1018]	@ 0x3fa

    // At this point the Radio should be idle.
    // Thus, there is no need to set the radio in standby mode.
    if( RegionRxConfig( Nvm.MacGroup2.Region, &MacCtx.RxWindowCConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 8010546:	4b0f      	ldr	r3, [pc, #60]	@ (8010584 <OpenContinuousRxCWindow+0x80>)
 8010548:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 801054c:	4a10      	ldr	r2, [pc, #64]	@ (8010590 <OpenContinuousRxCWindow+0x8c>)
 801054e:	490e      	ldr	r1, [pc, #56]	@ (8010588 <OpenContinuousRxCWindow+0x84>)
 8010550:	4618      	mov	r0, r3
 8010552:	f004 f874 	bl	801463e <RegionRxConfig>
 8010556:	4603      	mov	r3, r0
 8010558:	2b00      	cmp	r3, #0
 801055a:	d00f      	beq.n	801057c <OpenContinuousRxCWindow+0x78>
    {
        MacCtx.MlmeIndication.RxDatarate = MacCtx.McpsIndication.RxDatarate;
 801055c:	4b0b      	ldr	r3, [pc, #44]	@ (801058c <OpenContinuousRxCWindow+0x88>)
 801055e:	f893 2428 	ldrb.w	r2, [r3, #1064]	@ 0x428
 8010562:	4b0a      	ldr	r3, [pc, #40]	@ (801058c <OpenContinuousRxCWindow+0x88>)
 8010564:	f883 246e 	strb.w	r2, [r3, #1134]	@ 0x46e
        Radio.Rx( 0 ); // Continuous mode
 8010568:	4b0a      	ldr	r3, [pc, #40]	@ (8010594 <OpenContinuousRxCWindow+0x90>)
 801056a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801056c:	2000      	movs	r0, #0
 801056e:	4798      	blx	r3
        MacCtx.RxSlot = MacCtx.RxWindowCConfig.RxSlot;
 8010570:	4b06      	ldr	r3, [pc, #24]	@ (801058c <OpenContinuousRxCWindow+0x88>)
 8010572:	f893 23fb 	ldrb.w	r2, [r3, #1019]	@ 0x3fb
 8010576:	4b05      	ldr	r3, [pc, #20]	@ (801058c <OpenContinuousRxCWindow+0x88>)
 8010578:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
    }
}
 801057c:	bf00      	nop
 801057e:	3704      	adds	r7, #4
 8010580:	46bd      	mov	sp, r7
 8010582:	bd90      	pop	{r4, r7, pc}
 8010584:	20000b90 	.word	0x20000b90
 8010588:	20000a58 	.word	0x20000a58
 801058c:	20000670 	.word	0x20000670
 8010590:	20000a98 	.word	0x20000a98
 8010594:	0801c57c 	.word	0x0801c57c

08010598 <PrepareFrame>:

static LoRaMacStatus_t PrepareFrame( LoRaMacHeader_t* macHdr, LoRaMacFrameCtrl_t* fCtrl, uint8_t fPort, void* fBuffer, uint16_t fBufferSize )
{
 8010598:	b580      	push	{r7, lr}
 801059a:	b088      	sub	sp, #32
 801059c:	af00      	add	r7, sp, #0
 801059e:	60f8      	str	r0, [r7, #12]
 80105a0:	60b9      	str	r1, [r7, #8]
 80105a2:	603b      	str	r3, [r7, #0]
 80105a4:	4613      	mov	r3, r2
 80105a6:	71fb      	strb	r3, [r7, #7]
    MacCtx.PktBufferLen = 0;
 80105a8:	4b81      	ldr	r3, [pc, #516]	@ (80107b0 <PrepareFrame+0x218>)
 80105aa:	2200      	movs	r2, #0
 80105ac:	801a      	strh	r2, [r3, #0]
    MacCtx.NodeAckRequested = false;
 80105ae:	4b80      	ldr	r3, [pc, #512]	@ (80107b0 <PrepareFrame+0x218>)
 80105b0:	2200      	movs	r2, #0
 80105b2:	f883 241e 	strb.w	r2, [r3, #1054]	@ 0x41e
    uint32_t fCntUp = 0;
 80105b6:	2300      	movs	r3, #0
 80105b8:	61bb      	str	r3, [r7, #24]
    size_t macCmdsSize = 0;
 80105ba:	2300      	movs	r3, #0
 80105bc:	617b      	str	r3, [r7, #20]
    uint8_t availableSize = 0;
 80105be:	2300      	movs	r3, #0
 80105c0:	77fb      	strb	r3, [r7, #31]

    if( fBuffer == NULL )
 80105c2:	683b      	ldr	r3, [r7, #0]
 80105c4:	2b00      	cmp	r3, #0
 80105c6:	d101      	bne.n	80105cc <PrepareFrame+0x34>
    {
        fBufferSize = 0;
 80105c8:	2300      	movs	r3, #0
 80105ca:	853b      	strh	r3, [r7, #40]	@ 0x28
    }

    memcpy1( MacCtx.AppData, ( uint8_t* ) fBuffer, fBufferSize );
 80105cc:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80105ce:	461a      	mov	r2, r3
 80105d0:	6839      	ldr	r1, [r7, #0]
 80105d2:	4878      	ldr	r0, [pc, #480]	@ (80107b4 <PrepareFrame+0x21c>)
 80105d4:	f006 fa43 	bl	8016a5e <memcpy1>
    MacCtx.AppDataSize = fBufferSize;
 80105d8:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80105da:	b2da      	uxtb	r2, r3
 80105dc:	4b74      	ldr	r3, [pc, #464]	@ (80107b0 <PrepareFrame+0x218>)
 80105de:	f883 2237 	strb.w	r2, [r3, #567]	@ 0x237
    MacCtx.PktBuffer[0] = macHdr->Value;
 80105e2:	68fb      	ldr	r3, [r7, #12]
 80105e4:	781a      	ldrb	r2, [r3, #0]
 80105e6:	4b72      	ldr	r3, [pc, #456]	@ (80107b0 <PrepareFrame+0x218>)
 80105e8:	709a      	strb	r2, [r3, #2]

    switch( macHdr->Bits.MType )
 80105ea:	68fb      	ldr	r3, [r7, #12]
 80105ec:	781b      	ldrb	r3, [r3, #0]
 80105ee:	f3c3 1342 	ubfx	r3, r3, #5, #3
 80105f2:	b2db      	uxtb	r3, r3
 80105f4:	2b07      	cmp	r3, #7
 80105f6:	f000 80b9 	beq.w	801076c <PrepareFrame+0x1d4>
 80105fa:	2b07      	cmp	r3, #7
 80105fc:	f300 80ce 	bgt.w	801079c <PrepareFrame+0x204>
 8010600:	2b02      	cmp	r3, #2
 8010602:	d006      	beq.n	8010612 <PrepareFrame+0x7a>
 8010604:	2b04      	cmp	r3, #4
 8010606:	f040 80c9 	bne.w	801079c <PrepareFrame+0x204>
    {
        case FRAME_TYPE_DATA_CONFIRMED_UP:
            MacCtx.NodeAckRequested = true;
 801060a:	4b69      	ldr	r3, [pc, #420]	@ (80107b0 <PrepareFrame+0x218>)
 801060c:	2201      	movs	r2, #1
 801060e:	f883 241e 	strb.w	r2, [r3, #1054]	@ 0x41e
            // Intentional fall through
        case FRAME_TYPE_DATA_UNCONFIRMED_UP:
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_DATA;
 8010612:	4b67      	ldr	r3, [pc, #412]	@ (80107b0 <PrepareFrame+0x218>)
 8010614:	2204      	movs	r2, #4
 8010616:	f883 2104 	strb.w	r2, [r3, #260]	@ 0x104
            MacCtx.TxMsg.Message.Data.Buffer = MacCtx.PktBuffer;
 801061a:	4b65      	ldr	r3, [pc, #404]	@ (80107b0 <PrepareFrame+0x218>)
 801061c:	4a66      	ldr	r2, [pc, #408]	@ (80107b8 <PrepareFrame+0x220>)
 801061e:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
            MacCtx.TxMsg.Message.Data.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 8010622:	4b63      	ldr	r3, [pc, #396]	@ (80107b0 <PrepareFrame+0x218>)
 8010624:	22ff      	movs	r2, #255	@ 0xff
 8010626:	f883 210c 	strb.w	r2, [r3, #268]	@ 0x10c
            MacCtx.TxMsg.Message.Data.MHDR.Value = macHdr->Value;
 801062a:	68fb      	ldr	r3, [r7, #12]
 801062c:	781a      	ldrb	r2, [r3, #0]
 801062e:	4b60      	ldr	r3, [pc, #384]	@ (80107b0 <PrepareFrame+0x218>)
 8010630:	f883 210d 	strb.w	r2, [r3, #269]	@ 0x10d
            MacCtx.TxMsg.Message.Data.FPort = fPort;
 8010634:	4a5e      	ldr	r2, [pc, #376]	@ (80107b0 <PrepareFrame+0x218>)
 8010636:	79fb      	ldrb	r3, [r7, #7]
 8010638:	f882 3128 	strb.w	r3, [r2, #296]	@ 0x128
            MacCtx.TxMsg.Message.Data.FHDR.DevAddr = Nvm.MacGroup2.DevAddr;
 801063c:	4b5f      	ldr	r3, [pc, #380]	@ (80107bc <PrepareFrame+0x224>)
 801063e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8010642:	4a5b      	ldr	r2, [pc, #364]	@ (80107b0 <PrepareFrame+0x218>)
 8010644:	f8c2 3110 	str.w	r3, [r2, #272]	@ 0x110
            MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 8010648:	68bb      	ldr	r3, [r7, #8]
 801064a:	781a      	ldrb	r2, [r3, #0]
 801064c:	4b58      	ldr	r3, [pc, #352]	@ (80107b0 <PrepareFrame+0x218>)
 801064e:	f883 2114 	strb.w	r2, [r3, #276]	@ 0x114
            MacCtx.TxMsg.Message.Data.FRMPayloadSize = MacCtx.AppDataSize;
 8010652:	4b57      	ldr	r3, [pc, #348]	@ (80107b0 <PrepareFrame+0x218>)
 8010654:	f893 2237 	ldrb.w	r2, [r3, #567]	@ 0x237
 8010658:	4b55      	ldr	r3, [pc, #340]	@ (80107b0 <PrepareFrame+0x218>)
 801065a:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
            MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.AppData;
 801065e:	4b54      	ldr	r3, [pc, #336]	@ (80107b0 <PrepareFrame+0x218>)
 8010660:	4a54      	ldr	r2, [pc, #336]	@ (80107b4 <PrepareFrame+0x21c>)
 8010662:	f8c3 212c 	str.w	r2, [r3, #300]	@ 0x12c

            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 8010666:	f107 0318 	add.w	r3, r7, #24
 801066a:	4618      	mov	r0, r3
 801066c:	f003 f8e6 	bl	801383c <LoRaMacCryptoGetFCntUp>
 8010670:	4603      	mov	r3, r0
 8010672:	2b00      	cmp	r3, #0
 8010674:	d001      	beq.n	801067a <PrepareFrame+0xe2>
            {
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 8010676:	2312      	movs	r3, #18
 8010678:	e096      	b.n	80107a8 <PrepareFrame+0x210>
            }
            MacCtx.TxMsg.Message.Data.FHDR.FCnt = ( uint16_t )fCntUp;
 801067a:	69bb      	ldr	r3, [r7, #24]
 801067c:	b29a      	uxth	r2, r3
 801067e:	4b4c      	ldr	r3, [pc, #304]	@ (80107b0 <PrepareFrame+0x218>)
 8010680:	f8a3 2116 	strh.w	r2, [r3, #278]	@ 0x116

            // Reset confirm parameters
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            MacCtx.McpsConfirm.NbRetries = 0;
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
            MacCtx.McpsConfirm.NbTrans = 0;
 8010684:	4b4a      	ldr	r3, [pc, #296]	@ (80107b0 <PrepareFrame+0x218>)
 8010686:	2200      	movs	r2, #0
 8010688:	f883 2449 	strb.w	r2, [r3, #1097]	@ 0x449
#endif /* LORAMAC_VERSION */
            MacCtx.McpsConfirm.AckReceived = false;
 801068c:	4b48      	ldr	r3, [pc, #288]	@ (80107b0 <PrepareFrame+0x218>)
 801068e:	2200      	movs	r2, #0
 8010690:	f883 2448 	strb.w	r2, [r3, #1096]	@ 0x448
            MacCtx.McpsConfirm.UpLinkCounter = fCntUp;
 8010694:	69bb      	ldr	r3, [r7, #24]
 8010696:	4a46      	ldr	r2, [pc, #280]	@ (80107b0 <PrepareFrame+0x218>)
 8010698:	f8c2 3450 	str.w	r3, [r2, #1104]	@ 0x450

            // Handle the MAC commands if there are any available
            if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 801069c:	f107 0314 	add.w	r3, r7, #20
 80106a0:	4618      	mov	r0, r3
 80106a2:	f002 fa83 	bl	8012bac <LoRaMacCommandsGetSizeSerializedCmds>
 80106a6:	4603      	mov	r3, r0
 80106a8:	2b00      	cmp	r3, #0
 80106aa:	d001      	beq.n	80106b0 <PrepareFrame+0x118>
            {
                return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80106ac:	2313      	movs	r3, #19
 80106ae:	e07b      	b.n	80107a8 <PrepareFrame+0x210>
            }

            if( macCmdsSize > 0 )
 80106b0:	697b      	ldr	r3, [r7, #20]
 80106b2:	2b00      	cmp	r3, #0
 80106b4:	d074      	beq.n	80107a0 <PrepareFrame+0x208>
            {
                availableSize = GetMaxAppPayloadWithoutFOptsLength( Nvm.MacGroup1.ChannelsDatarate );
 80106b6:	4b41      	ldr	r3, [pc, #260]	@ (80107bc <PrepareFrame+0x224>)
 80106b8:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 80106bc:	4618      	mov	r0, r3
 80106be:	f7fe fd4d 	bl	800f15c <GetMaxAppPayloadWithoutFOptsLength>
 80106c2:	4603      	mov	r3, r0
 80106c4:	77fb      	strb	r3, [r7, #31]

                // There is application payload available and the MAC commands fit into FOpts field.
                if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize <= LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 80106c6:	4b3a      	ldr	r3, [pc, #232]	@ (80107b0 <PrepareFrame+0x218>)
 80106c8:	f893 3237 	ldrb.w	r3, [r3, #567]	@ 0x237
 80106cc:	2b00      	cmp	r3, #0
 80106ce:	d01d      	beq.n	801070c <PrepareFrame+0x174>
 80106d0:	697b      	ldr	r3, [r7, #20]
 80106d2:	2b0f      	cmp	r3, #15
 80106d4:	d81a      	bhi.n	801070c <PrepareFrame+0x174>
                {
                    if( LoRaMacCommandsSerializeCmds( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH, &macCmdsSize, MacCtx.TxMsg.Message.Data.FHDR.FOpts ) != LORAMAC_COMMANDS_SUCCESS )
 80106d6:	f107 0314 	add.w	r3, r7, #20
 80106da:	4a39      	ldr	r2, [pc, #228]	@ (80107c0 <PrepareFrame+0x228>)
 80106dc:	4619      	mov	r1, r3
 80106de:	200f      	movs	r0, #15
 80106e0:	f002 fa7a 	bl	8012bd8 <LoRaMacCommandsSerializeCmds>
 80106e4:	4603      	mov	r3, r0
 80106e6:	2b00      	cmp	r3, #0
 80106e8:	d001      	beq.n	80106ee <PrepareFrame+0x156>
                    {
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80106ea:	2313      	movs	r3, #19
 80106ec:	e05c      	b.n	80107a8 <PrepareFrame+0x210>
                    }
                    fCtrl->Bits.FOptsLen = macCmdsSize;
 80106ee:	697b      	ldr	r3, [r7, #20]
 80106f0:	f003 030f 	and.w	r3, r3, #15
 80106f4:	b2d9      	uxtb	r1, r3
 80106f6:	68ba      	ldr	r2, [r7, #8]
 80106f8:	7813      	ldrb	r3, [r2, #0]
 80106fa:	f361 0303 	bfi	r3, r1, #0, #4
 80106fe:	7013      	strb	r3, [r2, #0]
                    // Update FCtrl field with new value of FOptionsLength
                    MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 8010700:	68bb      	ldr	r3, [r7, #8]
 8010702:	781a      	ldrb	r2, [r3, #0]
 8010704:	4b2a      	ldr	r3, [pc, #168]	@ (80107b0 <PrepareFrame+0x218>)
 8010706:	f883 2114 	strb.w	r2, [r3, #276]	@ 0x114
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
                }
            }

            break;
 801070a:	e049      	b.n	80107a0 <PrepareFrame+0x208>
                else if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize > LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 801070c:	4b28      	ldr	r3, [pc, #160]	@ (80107b0 <PrepareFrame+0x218>)
 801070e:	f893 3237 	ldrb.w	r3, [r3, #567]	@ 0x237
 8010712:	2b00      	cmp	r3, #0
 8010714:	d010      	beq.n	8010738 <PrepareFrame+0x1a0>
 8010716:	697b      	ldr	r3, [r7, #20]
 8010718:	2b0f      	cmp	r3, #15
 801071a:	d90d      	bls.n	8010738 <PrepareFrame+0x1a0>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 801071c:	7ffb      	ldrb	r3, [r7, #31]
 801071e:	f107 0114 	add.w	r1, r7, #20
 8010722:	4a28      	ldr	r2, [pc, #160]	@ (80107c4 <PrepareFrame+0x22c>)
 8010724:	4618      	mov	r0, r3
 8010726:	f002 fa57 	bl	8012bd8 <LoRaMacCommandsSerializeCmds>
 801072a:	4603      	mov	r3, r0
 801072c:	2b00      	cmp	r3, #0
 801072e:	d001      	beq.n	8010734 <PrepareFrame+0x19c>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8010730:	2313      	movs	r3, #19
 8010732:	e039      	b.n	80107a8 <PrepareFrame+0x210>
                    return LORAMAC_STATUS_SKIPPED_APP_DATA;
 8010734:	230a      	movs	r3, #10
 8010736:	e037      	b.n	80107a8 <PrepareFrame+0x210>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 8010738:	7ffb      	ldrb	r3, [r7, #31]
 801073a:	f107 0114 	add.w	r1, r7, #20
 801073e:	4a21      	ldr	r2, [pc, #132]	@ (80107c4 <PrepareFrame+0x22c>)
 8010740:	4618      	mov	r0, r3
 8010742:	f002 fa49 	bl	8012bd8 <LoRaMacCommandsSerializeCmds>
 8010746:	4603      	mov	r3, r0
 8010748:	2b00      	cmp	r3, #0
 801074a:	d001      	beq.n	8010750 <PrepareFrame+0x1b8>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 801074c:	2313      	movs	r3, #19
 801074e:	e02b      	b.n	80107a8 <PrepareFrame+0x210>
                    MacCtx.TxMsg.Message.Data.FPort = 0;
 8010750:	4b17      	ldr	r3, [pc, #92]	@ (80107b0 <PrepareFrame+0x218>)
 8010752:	2200      	movs	r2, #0
 8010754:	f883 2128 	strb.w	r2, [r3, #296]	@ 0x128
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
 8010758:	4b15      	ldr	r3, [pc, #84]	@ (80107b0 <PrepareFrame+0x218>)
 801075a:	4a1a      	ldr	r2, [pc, #104]	@ (80107c4 <PrepareFrame+0x22c>)
 801075c:	f8c3 212c 	str.w	r2, [r3, #300]	@ 0x12c
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
 8010760:	697b      	ldr	r3, [r7, #20]
 8010762:	b2da      	uxtb	r2, r3
 8010764:	4b12      	ldr	r3, [pc, #72]	@ (80107b0 <PrepareFrame+0x218>)
 8010766:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
            break;
 801076a:	e019      	b.n	80107a0 <PrepareFrame+0x208>
        case FRAME_TYPE_PROPRIETARY:
            if( ( fBuffer != NULL ) && ( MacCtx.AppDataSize > 0 ) )
 801076c:	683b      	ldr	r3, [r7, #0]
 801076e:	2b00      	cmp	r3, #0
 8010770:	d018      	beq.n	80107a4 <PrepareFrame+0x20c>
 8010772:	4b0f      	ldr	r3, [pc, #60]	@ (80107b0 <PrepareFrame+0x218>)
 8010774:	f893 3237 	ldrb.w	r3, [r3, #567]	@ 0x237
 8010778:	2b00      	cmp	r3, #0
 801077a:	d013      	beq.n	80107a4 <PrepareFrame+0x20c>
            {
                memcpy1( MacCtx.PktBuffer + LORAMAC_MHDR_FIELD_SIZE, ( uint8_t* ) fBuffer, MacCtx.AppDataSize );
 801077c:	4812      	ldr	r0, [pc, #72]	@ (80107c8 <PrepareFrame+0x230>)
 801077e:	4b0c      	ldr	r3, [pc, #48]	@ (80107b0 <PrepareFrame+0x218>)
 8010780:	f893 3237 	ldrb.w	r3, [r3, #567]	@ 0x237
 8010784:	461a      	mov	r2, r3
 8010786:	6839      	ldr	r1, [r7, #0]
 8010788:	f006 f969 	bl	8016a5e <memcpy1>
                MacCtx.PktBufferLen = LORAMAC_MHDR_FIELD_SIZE + MacCtx.AppDataSize;
 801078c:	4b08      	ldr	r3, [pc, #32]	@ (80107b0 <PrepareFrame+0x218>)
 801078e:	f893 3237 	ldrb.w	r3, [r3, #567]	@ 0x237
 8010792:	3301      	adds	r3, #1
 8010794:	b29a      	uxth	r2, r3
 8010796:	4b06      	ldr	r3, [pc, #24]	@ (80107b0 <PrepareFrame+0x218>)
 8010798:	801a      	strh	r2, [r3, #0]
            }
            break;
 801079a:	e003      	b.n	80107a4 <PrepareFrame+0x20c>
        default:
            return LORAMAC_STATUS_SERVICE_UNKNOWN;
 801079c:	2302      	movs	r3, #2
 801079e:	e003      	b.n	80107a8 <PrepareFrame+0x210>
            break;
 80107a0:	bf00      	nop
 80107a2:	e000      	b.n	80107a6 <PrepareFrame+0x20e>
            break;
 80107a4:	bf00      	nop
    }

    return LORAMAC_STATUS_OK;
 80107a6:	2300      	movs	r3, #0
}
 80107a8:	4618      	mov	r0, r3
 80107aa:	3720      	adds	r7, #32
 80107ac:	46bd      	mov	sp, r7
 80107ae:	bd80      	pop	{r7, pc}
 80107b0:	20000670 	.word	0x20000670
 80107b4:	200007a8 	.word	0x200007a8
 80107b8:	20000672 	.word	0x20000672
 80107bc:	20000b90 	.word	0x20000b90
 80107c0:	20000788 	.word	0x20000788
 80107c4:	20000b10 	.word	0x20000b10
 80107c8:	20000673 	.word	0x20000673

080107cc <SendFrameOnChannel>:

static LoRaMacStatus_t SendFrameOnChannel( uint8_t channel )
{
 80107cc:	b580      	push	{r7, lr}
 80107ce:	b08a      	sub	sp, #40	@ 0x28
 80107d0:	af00      	add	r7, sp, #0
 80107d2:	4603      	mov	r3, r0
 80107d4:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 80107d6:	2303      	movs	r3, #3
 80107d8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    TxConfigParams_t txConfig;
    int8_t txPower = 0;
 80107dc:	2300      	movs	r3, #0
 80107de:	73fb      	strb	r3, [r7, #15]

    txConfig.Channel = channel;
 80107e0:	79fb      	ldrb	r3, [r7, #7]
 80107e2:	743b      	strb	r3, [r7, #16]
    txConfig.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 80107e4:	4b4a      	ldr	r3, [pc, #296]	@ (8010910 <SendFrameOnChannel+0x144>)
 80107e6:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 80107ea:	747b      	strb	r3, [r7, #17]
    txConfig.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 80107ec:	4b48      	ldr	r3, [pc, #288]	@ (8010910 <SendFrameOnChannel+0x144>)
 80107ee:	f993 3038 	ldrsb.w	r3, [r3, #56]	@ 0x38
 80107f2:	74bb      	strb	r3, [r7, #18]
    txConfig.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
 80107f4:	4b46      	ldr	r3, [pc, #280]	@ (8010910 <SendFrameOnChannel+0x144>)
 80107f6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80107f8:	617b      	str	r3, [r7, #20]
    txConfig.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 80107fa:	4b45      	ldr	r3, [pc, #276]	@ (8010910 <SendFrameOnChannel+0x144>)
 80107fc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80107fe:	61bb      	str	r3, [r7, #24]
    txConfig.PktLen = MacCtx.PktBufferLen;
 8010800:	4b44      	ldr	r3, [pc, #272]	@ (8010914 <SendFrameOnChannel+0x148>)
 8010802:	881b      	ldrh	r3, [r3, #0]
 8010804:	83bb      	strh	r3, [r7, #28]
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    txConfig.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 8010806:	4b42      	ldr	r3, [pc, #264]	@ (8010910 <SendFrameOnChannel+0x144>)
 8010808:	f893 311c 	ldrb.w	r3, [r3, #284]	@ 0x11c
 801080c:	77bb      	strb	r3, [r7, #30]
#endif /* LORAMAC_VERSION */

    RegionTxConfig( Nvm.MacGroup2.Region, &txConfig, &txPower, &MacCtx.TxTimeOnAir );
 801080e:	4b40      	ldr	r3, [pc, #256]	@ (8010910 <SendFrameOnChannel+0x144>)
 8010810:	f893 0040 	ldrb.w	r0, [r3, #64]	@ 0x40
 8010814:	f107 020f 	add.w	r2, r7, #15
 8010818:	f107 0110 	add.w	r1, r7, #16
 801081c:	4b3e      	ldr	r3, [pc, #248]	@ (8010918 <SendFrameOnChannel+0x14c>)
 801081e:	f003 ff23 	bl	8014668 <RegionTxConfig>

    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8010822:	4b3c      	ldr	r3, [pc, #240]	@ (8010914 <SendFrameOnChannel+0x148>)
 8010824:	2201      	movs	r2, #1
 8010826:	f883 2445 	strb.w	r2, [r3, #1093]	@ 0x445
    MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 801082a:	4b39      	ldr	r3, [pc, #228]	@ (8010910 <SendFrameOnChannel+0x144>)
 801082c:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 8010830:	b2da      	uxtb	r2, r3
 8010832:	4b38      	ldr	r3, [pc, #224]	@ (8010914 <SendFrameOnChannel+0x148>)
 8010834:	f883 2446 	strb.w	r2, [r3, #1094]	@ 0x446
    MacCtx.McpsConfirm.TxPower = txPower;
 8010838:	f997 200f 	ldrsb.w	r2, [r7, #15]
 801083c:	4b35      	ldr	r3, [pc, #212]	@ (8010914 <SendFrameOnChannel+0x148>)
 801083e:	f883 2447 	strb.w	r2, [r3, #1095]	@ 0x447
    MacCtx.McpsConfirm.Channel = channel;
 8010842:	79fb      	ldrb	r3, [r7, #7]
 8010844:	4a33      	ldr	r2, [pc, #204]	@ (8010914 <SendFrameOnChannel+0x148>)
 8010846:	f8c2 3454 	str.w	r3, [r2, #1108]	@ 0x454

    // Store the time on air
    MacCtx.McpsConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 801084a:	4b32      	ldr	r3, [pc, #200]	@ (8010914 <SendFrameOnChannel+0x148>)
 801084c:	f8d3 3420 	ldr.w	r3, [r3, #1056]	@ 0x420
 8010850:	4a30      	ldr	r2, [pc, #192]	@ (8010914 <SendFrameOnChannel+0x148>)
 8010852:	f8c2 344c 	str.w	r3, [r2, #1100]	@ 0x44c
    MacCtx.MlmeConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 8010856:	4b2f      	ldr	r3, [pc, #188]	@ (8010914 <SendFrameOnChannel+0x148>)
 8010858:	f8d3 3420 	ldr.w	r3, [r3, #1056]	@ 0x420
 801085c:	4a2d      	ldr	r2, [pc, #180]	@ (8010914 <SendFrameOnChannel+0x148>)
 801085e:	f8c2 345c 	str.w	r3, [r2, #1116]	@ 0x45c

    if( LoRaMacClassBIsBeaconModeActive( ) == true )
 8010862:	f001 ff34 	bl	80126ce <LoRaMacClassBIsBeaconModeActive>
 8010866:	4603      	mov	r3, r0
 8010868:	2b00      	cmp	r3, #0
 801086a:	d00b      	beq.n	8010884 <SendFrameOnChannel+0xb8>
    {
        // Currently, the Time-On-Air can only be computed when the radio is configured with
        // the TX configuration
        TimerTime_t collisionTime = LoRaMacClassBIsUplinkCollision( MacCtx.TxTimeOnAir );
 801086c:	4b29      	ldr	r3, [pc, #164]	@ (8010914 <SendFrameOnChannel+0x148>)
 801086e:	f8d3 3420 	ldr.w	r3, [r3, #1056]	@ 0x420
 8010872:	4618      	mov	r0, r3
 8010874:	f001 ff96 	bl	80127a4 <LoRaMacClassBIsUplinkCollision>
 8010878:	6238      	str	r0, [r7, #32]

        if( collisionTime > 0 )
 801087a:	6a3b      	ldr	r3, [r7, #32]
 801087c:	2b00      	cmp	r3, #0
 801087e:	d001      	beq.n	8010884 <SendFrameOnChannel+0xb8>
        {
            return LORAMAC_STATUS_BUSY_UPLINK_COLLISION;
 8010880:	2310      	movs	r3, #16
 8010882:	e040      	b.n	8010906 <SendFrameOnChannel+0x13a>
        }
    }

    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8010884:	4b22      	ldr	r3, [pc, #136]	@ (8010910 <SendFrameOnChannel+0x144>)
 8010886:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 801088a:	2b01      	cmp	r3, #1
 801088c:	d101      	bne.n	8010892 <SendFrameOnChannel+0xc6>
    {
        // Stop slots for class b
        LoRaMacClassBStopRxSlots( );
 801088e:	f001 ff93 	bl	80127b8 <LoRaMacClassBStopRxSlots>
    }

    LoRaMacClassBHaltBeaconing( );
 8010892:	f001 ff2d 	bl	80126f0 <LoRaMacClassBHaltBeaconing>

    // Secure frame
    status = SecureFrame( Nvm.MacGroup1.ChannelsDatarate, MacCtx.Channel );
 8010896:	4b1e      	ldr	r3, [pc, #120]	@ (8010910 <SendFrameOnChannel+0x144>)
 8010898:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 801089c:	b2db      	uxtb	r3, r3
 801089e:	4a1d      	ldr	r2, [pc, #116]	@ (8010914 <SendFrameOnChannel+0x148>)
 80108a0:	f892 241f 	ldrb.w	r2, [r2, #1055]	@ 0x41f
 80108a4:	4611      	mov	r1, r2
 80108a6:	4618      	mov	r0, r3
 80108a8:	f7ff fc66 	bl	8010178 <SecureFrame>
 80108ac:	4603      	mov	r3, r0
 80108ae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if( status != LORAMAC_STATUS_OK )
 80108b2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80108b6:	2b00      	cmp	r3, #0
 80108b8:	d002      	beq.n	80108c0 <SendFrameOnChannel+0xf4>
    {
        return status;
 80108ba:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80108be:	e022      	b.n	8010906 <SendFrameOnChannel+0x13a>
    }

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 80108c0:	4b14      	ldr	r3, [pc, #80]	@ (8010914 <SendFrameOnChannel+0x148>)
 80108c2:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 80108c6:	f043 0302 	orr.w	r3, r3, #2
 80108ca:	4a12      	ldr	r2, [pc, #72]	@ (8010914 <SendFrameOnChannel+0x148>)
 80108cc:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
    if( MacCtx.NodeAckRequested == false )
    {
        MacCtx.ChannelsNbTransCounter++;
    }
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    MacCtx.ChannelsNbTransCounter++;
 80108d0:	4b10      	ldr	r3, [pc, #64]	@ (8010914 <SendFrameOnChannel+0x148>)
 80108d2:	f893 341c 	ldrb.w	r3, [r3, #1052]	@ 0x41c
 80108d6:	3301      	adds	r3, #1
 80108d8:	b2da      	uxtb	r2, r3
 80108da:	4b0e      	ldr	r3, [pc, #56]	@ (8010914 <SendFrameOnChannel+0x148>)
 80108dc:	f883 241c 	strb.w	r2, [r3, #1052]	@ 0x41c
    MacCtx.McpsConfirm.NbTrans = MacCtx.ChannelsNbTransCounter;
 80108e0:	4b0c      	ldr	r3, [pc, #48]	@ (8010914 <SendFrameOnChannel+0x148>)
 80108e2:	f893 241c 	ldrb.w	r2, [r3, #1052]	@ 0x41c
 80108e6:	4b0b      	ldr	r3, [pc, #44]	@ (8010914 <SendFrameOnChannel+0x148>)
 80108e8:	f883 2449 	strb.w	r2, [r3, #1097]	@ 0x449
    MacCtx.ResponseTimeoutStartTime = 0;
 80108ec:	4b09      	ldr	r3, [pc, #36]	@ (8010914 <SendFrameOnChannel+0x148>)
 80108ee:	2200      	movs	r2, #0
 80108f0:	f8c3 249c 	str.w	r2, [r3, #1180]	@ 0x49c
#endif /* LORAMAC_VERSION */

    // Send now
    Radio.Send( MacCtx.PktBuffer, MacCtx.PktBufferLen );
 80108f4:	4b09      	ldr	r3, [pc, #36]	@ (801091c <SendFrameOnChannel+0x150>)
 80108f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80108f8:	4a06      	ldr	r2, [pc, #24]	@ (8010914 <SendFrameOnChannel+0x148>)
 80108fa:	8812      	ldrh	r2, [r2, #0]
 80108fc:	b2d2      	uxtb	r2, r2
 80108fe:	4611      	mov	r1, r2
 8010900:	4807      	ldr	r0, [pc, #28]	@ (8010920 <SendFrameOnChannel+0x154>)
 8010902:	4798      	blx	r3

    return LORAMAC_STATUS_OK;
 8010904:	2300      	movs	r3, #0
}
 8010906:	4618      	mov	r0, r3
 8010908:	3728      	adds	r7, #40	@ 0x28
 801090a:	46bd      	mov	sp, r7
 801090c:	bd80      	pop	{r7, pc}
 801090e:	bf00      	nop
 8010910:	20000b90 	.word	0x20000b90
 8010914:	20000670 	.word	0x20000670
 8010918:	20000a90 	.word	0x20000a90
 801091c:	0801c57c 	.word	0x0801c57c
 8010920:	20000672 	.word	0x20000672

08010924 <SetTxContinuousWave>:

    return LORAMAC_STATUS_OK;
}
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
static LoRaMacStatus_t SetTxContinuousWave( uint16_t timeout, uint32_t frequency, uint8_t power )
{
 8010924:	b580      	push	{r7, lr}
 8010926:	b082      	sub	sp, #8
 8010928:	af00      	add	r7, sp, #0
 801092a:	4603      	mov	r3, r0
 801092c:	6039      	str	r1, [r7, #0]
 801092e:	80fb      	strh	r3, [r7, #6]
 8010930:	4613      	mov	r3, r2
 8010932:	717b      	strb	r3, [r7, #5]
    Radio.SetTxContinuousWave( frequency, power, timeout );
 8010934:	4b09      	ldr	r3, [pc, #36]	@ (801095c <SetTxContinuousWave+0x38>)
 8010936:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010938:	f997 1005 	ldrsb.w	r1, [r7, #5]
 801093c:	88fa      	ldrh	r2, [r7, #6]
 801093e:	6838      	ldr	r0, [r7, #0]
 8010940:	4798      	blx	r3

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8010942:	4b07      	ldr	r3, [pc, #28]	@ (8010960 <SetTxContinuousWave+0x3c>)
 8010944:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 8010948:	f043 0302 	orr.w	r3, r3, #2
 801094c:	4a04      	ldr	r2, [pc, #16]	@ (8010960 <SetTxContinuousWave+0x3c>)
 801094e:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340

    return LORAMAC_STATUS_OK;
 8010952:	2300      	movs	r3, #0
}
 8010954:	4618      	mov	r0, r3
 8010956:	3708      	adds	r7, #8
 8010958:	46bd      	mov	sp, r7
 801095a:	bd80      	pop	{r7, pc}
 801095c:	0801c57c 	.word	0x0801c57c
 8010960:	20000670 	.word	0x20000670

08010964 <RestoreNvmData>:
#endif /* LORAMAC_VERSION */

static LoRaMacStatus_t RestoreNvmData( void )
{
 8010964:	b580      	push	{r7, lr}
 8010966:	b082      	sub	sp, #8
 8010968:	af00      	add	r7, sp, #0
    uint32_t crc = 0;
 801096a:	2300      	movs	r3, #0
 801096c:	607b      	str	r3, [r7, #4]

    // Status and parameter validation
    if( MacCtx.MacState != LORAMAC_STOPPED )
 801096e:	4b3e      	ldr	r3, [pc, #248]	@ (8010a68 <RestoreNvmData+0x104>)
 8010970:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 8010974:	2b01      	cmp	r3, #1
 8010976:	d001      	beq.n	801097c <RestoreNvmData+0x18>
    {
        return LORAMAC_STATUS_BUSY;
 8010978:	2301      	movs	r3, #1
 801097a:	e071      	b.n	8010a60 <RestoreNvmData+0xfc>
    }

    // Crypto
    crc = Crc32( ( uint8_t* ) &(NvmBackup.Crypto), sizeof( NvmBackup.Crypto ) -
 801097c:	2124      	movs	r1, #36	@ 0x24
 801097e:	483b      	ldr	r0, [pc, #236]	@ (8010a6c <RestoreNvmData+0x108>)
 8010980:	f006 f8c2 	bl	8016b08 <Crc32>
 8010984:	6078      	str	r0, [r7, #4]
                                            sizeof( NvmBackup.Crypto.Crc32 ) );
    if( crc != NvmBackup.Crypto.Crc32 )
 8010986:	4b39      	ldr	r3, [pc, #228]	@ (8010a6c <RestoreNvmData+0x108>)
 8010988:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801098a:	687a      	ldr	r2, [r7, #4]
 801098c:	429a      	cmp	r2, r3
 801098e:	d001      	beq.n	8010994 <RestoreNvmData+0x30>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8010990:	2317      	movs	r3, #23
 8010992:	e065      	b.n	8010a60 <RestoreNvmData+0xfc>
    }

    // MacGroup1
    crc = Crc32( ( uint8_t* ) &(NvmBackup.MacGroup1), sizeof( NvmBackup.MacGroup1 ) -
 8010994:	2114      	movs	r1, #20
 8010996:	4836      	ldr	r0, [pc, #216]	@ (8010a70 <RestoreNvmData+0x10c>)
 8010998:	f006 f8b6 	bl	8016b08 <Crc32>
 801099c:	6078      	str	r0, [r7, #4]
                                               sizeof( NvmBackup.MacGroup1.Crc32 ) );
    if( crc != NvmBackup.MacGroup1.Crc32 )
 801099e:	4b33      	ldr	r3, [pc, #204]	@ (8010a6c <RestoreNvmData+0x108>)
 80109a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80109a2:	687a      	ldr	r2, [r7, #4]
 80109a4:	429a      	cmp	r2, r3
 80109a6:	d001      	beq.n	80109ac <RestoreNvmData+0x48>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 80109a8:	2317      	movs	r3, #23
 80109aa:	e059      	b.n	8010a60 <RestoreNvmData+0xfc>
    }

    // MacGroup2
    crc = Crc32( ( uint8_t* ) &(NvmBackup.MacGroup2), sizeof( NvmBackup.MacGroup2 ) -
 80109ac:	21e0      	movs	r1, #224	@ 0xe0
 80109ae:	4831      	ldr	r0, [pc, #196]	@ (8010a74 <RestoreNvmData+0x110>)
 80109b0:	f006 f8aa 	bl	8016b08 <Crc32>
 80109b4:	6078      	str	r0, [r7, #4]
                                               sizeof( NvmBackup.MacGroup2.Crc32 ) );
    if( crc != NvmBackup.MacGroup2.Crc32 )
 80109b6:	4b2d      	ldr	r3, [pc, #180]	@ (8010a6c <RestoreNvmData+0x108>)
 80109b8:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 80109bc:	687a      	ldr	r2, [r7, #4]
 80109be:	429a      	cmp	r2, r3
 80109c0:	d001      	beq.n	80109c6 <RestoreNvmData+0x62>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 80109c2:	2317      	movs	r3, #23
 80109c4:	e04c      	b.n	8010a60 <RestoreNvmData+0xfc>
    }

    // Secure Element
    crc = Crc32( ( uint8_t* ) &(NvmBackup.SecureElement), sizeof( NvmBackup.SecureElement ) -
 80109c6:	21bc      	movs	r1, #188	@ 0xbc
 80109c8:	482b      	ldr	r0, [pc, #172]	@ (8010a78 <RestoreNvmData+0x114>)
 80109ca:	f006 f89d 	bl	8016b08 <Crc32>
 80109ce:	6078      	str	r0, [r7, #4]
                                                   sizeof( NvmBackup.SecureElement.Crc32 ) );
    if( crc != NvmBackup.SecureElement.Crc32 )
 80109d0:	4b26      	ldr	r3, [pc, #152]	@ (8010a6c <RestoreNvmData+0x108>)
 80109d2:	f8d3 31e0 	ldr.w	r3, [r3, #480]	@ 0x1e0
 80109d6:	687a      	ldr	r2, [r7, #4]
 80109d8:	429a      	cmp	r2, r3
 80109da:	d001      	beq.n	80109e0 <RestoreNvmData+0x7c>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 80109dc:	2317      	movs	r3, #23
 80109de:	e03f      	b.n	8010a60 <RestoreNvmData+0xfc>
    }

    // Region
    crc = Crc32( ( uint8_t* ) &(NvmBackup.RegionGroup1), sizeof( NvmBackup.RegionGroup1 ) -
 80109e0:	2100      	movs	r1, #0
 80109e2:	4826      	ldr	r0, [pc, #152]	@ (8010a7c <RestoreNvmData+0x118>)
 80109e4:	f006 f890 	bl	8016b08 <Crc32>
 80109e8:	6078      	str	r0, [r7, #4]
                                            sizeof( NvmBackup.RegionGroup1.Crc32 ) );
    if( crc != NvmBackup.RegionGroup1.Crc32 )
 80109ea:	4b20      	ldr	r3, [pc, #128]	@ (8010a6c <RestoreNvmData+0x108>)
 80109ec:	f8d3 31e4 	ldr.w	r3, [r3, #484]	@ 0x1e4
 80109f0:	687a      	ldr	r2, [r7, #4]
 80109f2:	429a      	cmp	r2, r3
 80109f4:	d001      	beq.n	80109fa <RestoreNvmData+0x96>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 80109f6:	2317      	movs	r3, #23
 80109f8:	e032      	b.n	8010a60 <RestoreNvmData+0xfc>
    }

    crc = Crc32( ( uint8_t* ) &(NvmBackup.ClassB), sizeof( NvmBackup.ClassB ) -
 80109fa:	2114      	movs	r1, #20
 80109fc:	4820      	ldr	r0, [pc, #128]	@ (8010a80 <RestoreNvmData+0x11c>)
 80109fe:	f006 f883 	bl	8016b08 <Crc32>
 8010a02:	6078      	str	r0, [r7, #4]
                                            sizeof( NvmBackup.ClassB.Crc32 ) );
    if( crc != NvmBackup.ClassB.Crc32 )
 8010a04:	4b19      	ldr	r3, [pc, #100]	@ (8010a6c <RestoreNvmData+0x108>)
 8010a06:	f8d3 3578 	ldr.w	r3, [r3, #1400]	@ 0x578
 8010a0a:	687a      	ldr	r2, [r7, #4]
 8010a0c:	429a      	cmp	r2, r3
 8010a0e:	d001      	beq.n	8010a14 <RestoreNvmData+0xb0>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8010a10:	2317      	movs	r3, #23
 8010a12:	e025      	b.n	8010a60 <RestoreNvmData+0xfc>
    }

    memcpy1( ( uint8_t* ) &Nvm, ( uint8_t* ) &NvmBackup, sizeof( LoRaMacNvmData_t ) );
 8010a14:	f240 527c 	movw	r2, #1404	@ 0x57c
 8010a18:	4914      	ldr	r1, [pc, #80]	@ (8010a6c <RestoreNvmData+0x108>)
 8010a1a:	481a      	ldr	r0, [pc, #104]	@ (8010a84 <RestoreNvmData+0x120>)
 8010a1c:	f006 f81f 	bl	8016a5e <memcpy1>
    memset1( ( uint8_t* ) &NvmBackup, 0, sizeof( LoRaMacNvmData_t ) );
 8010a20:	f240 527c 	movw	r2, #1404	@ 0x57c
 8010a24:	2100      	movs	r1, #0
 8010a26:	4811      	ldr	r0, [pc, #68]	@ (8010a6c <RestoreNvmData+0x108>)
 8010a28:	f006 f854 	bl	8016ad4 <memset1>

    // Initialize RxC config parameters.
    MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 8010a2c:	4b0e      	ldr	r3, [pc, #56]	@ (8010a68 <RestoreNvmData+0x104>)
 8010a2e:	f893 241f 	ldrb.w	r2, [r3, #1055]	@ 0x41f
 8010a32:	4b0d      	ldr	r3, [pc, #52]	@ (8010a68 <RestoreNvmData+0x104>)
 8010a34:	f883 23e8 	strb.w	r2, [r3, #1000]	@ 0x3e8
    MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 8010a38:	4b12      	ldr	r3, [pc, #72]	@ (8010a84 <RestoreNvmData+0x120>)
 8010a3a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010a3c:	4a0a      	ldr	r2, [pc, #40]	@ (8010a68 <RestoreNvmData+0x104>)
 8010a3e:	f8c2 33ec 	str.w	r3, [r2, #1004]	@ 0x3ec
    MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8010a42:	4b10      	ldr	r3, [pc, #64]	@ (8010a84 <RestoreNvmData+0x120>)
 8010a44:	f893 2075 	ldrb.w	r2, [r3, #117]	@ 0x75
 8010a48:	4b07      	ldr	r3, [pc, #28]	@ (8010a68 <RestoreNvmData+0x104>)
 8010a4a:	f883 23f8 	strb.w	r2, [r3, #1016]	@ 0x3f8
    MacCtx.RxWindowCConfig.RxContinuous = true;
 8010a4e:	4b06      	ldr	r3, [pc, #24]	@ (8010a68 <RestoreNvmData+0x104>)
 8010a50:	2201      	movs	r2, #1
 8010a52:	f883 23fa 	strb.w	r2, [r3, #1018]	@ 0x3fa
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8010a56:	4b04      	ldr	r3, [pc, #16]	@ (8010a68 <RestoreNvmData+0x104>)
 8010a58:	2202      	movs	r2, #2
 8010a5a:	f883 23fb 	strb.w	r2, [r3, #1019]	@ 0x3fb

    return LORAMAC_STATUS_OK;
 8010a5e:	2300      	movs	r3, #0
}
 8010a60:	4618      	mov	r0, r3
 8010a62:	3708      	adds	r7, #8
 8010a64:	46bd      	mov	sp, r7
 8010a66:	bd80      	pop	{r7, pc}
 8010a68:	20000670 	.word	0x20000670
 8010a6c:	2000110c 	.word	0x2000110c
 8010a70:	20001134 	.word	0x20001134
 8010a74:	2000114c 	.word	0x2000114c
 8010a78:	20001230 	.word	0x20001230
 8010a7c:	200012f0 	.word	0x200012f0
 8010a80:	20001670 	.word	0x20001670
 8010a84:	20000b90 	.word	0x20000b90

08010a88 <DetermineFrameType>:

static LoRaMacStatus_t DetermineFrameType( LoRaMacMessageData_t* macMsg, FType_t* fType )
{
 8010a88:	b480      	push	{r7}
 8010a8a:	b083      	sub	sp, #12
 8010a8c:	af00      	add	r7, sp, #0
 8010a8e:	6078      	str	r0, [r7, #4]
 8010a90:	6039      	str	r1, [r7, #0]
    if( ( macMsg == NULL ) || ( fType == NULL ) )
 8010a92:	687b      	ldr	r3, [r7, #4]
 8010a94:	2b00      	cmp	r3, #0
 8010a96:	d002      	beq.n	8010a9e <DetermineFrameType+0x16>
 8010a98:	683b      	ldr	r3, [r7, #0]
 8010a9a:	2b00      	cmp	r3, #0
 8010a9c:	d101      	bne.n	8010aa2 <DetermineFrameType+0x1a>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8010a9e:	2303      	movs	r3, #3
 8010aa0:	e03b      	b.n	8010b1a <DetermineFrameType+0x92>
     * +-------+  +----------+------+-------+--------------+
     * |   D   |  |    = 0   |   -  |  > 0  |       X      |
     * +-------+  +----------+------+-------+--------------+
     */

    if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen > 0 ) && ( macMsg->FPort > 0 ) )
 8010aa2:	687b      	ldr	r3, [r7, #4]
 8010aa4:	7b1b      	ldrb	r3, [r3, #12]
 8010aa6:	f003 030f 	and.w	r3, r3, #15
 8010aaa:	b2db      	uxtb	r3, r3
 8010aac:	2b00      	cmp	r3, #0
 8010aae:	d008      	beq.n	8010ac2 <DetermineFrameType+0x3a>
 8010ab0:	687b      	ldr	r3, [r7, #4]
 8010ab2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8010ab6:	2b00      	cmp	r3, #0
 8010ab8:	d003      	beq.n	8010ac2 <DetermineFrameType+0x3a>
    {
        *fType = FRAME_TYPE_A;
 8010aba:	683b      	ldr	r3, [r7, #0]
 8010abc:	2200      	movs	r2, #0
 8010abe:	701a      	strb	r2, [r3, #0]
 8010ac0:	e02a      	b.n	8010b18 <DetermineFrameType+0x90>
    }
    else if( macMsg->FRMPayloadSize == 0 )
 8010ac2:	687b      	ldr	r3, [r7, #4]
 8010ac4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8010ac8:	2b00      	cmp	r3, #0
 8010aca:	d103      	bne.n	8010ad4 <DetermineFrameType+0x4c>
    {
        *fType = FRAME_TYPE_B;
 8010acc:	683b      	ldr	r3, [r7, #0]
 8010ace:	2201      	movs	r2, #1
 8010ad0:	701a      	strb	r2, [r3, #0]
 8010ad2:	e021      	b.n	8010b18 <DetermineFrameType+0x90>
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort == 0 ) )
 8010ad4:	687b      	ldr	r3, [r7, #4]
 8010ad6:	7b1b      	ldrb	r3, [r3, #12]
 8010ad8:	f003 030f 	and.w	r3, r3, #15
 8010adc:	b2db      	uxtb	r3, r3
 8010ade:	2b00      	cmp	r3, #0
 8010ae0:	d108      	bne.n	8010af4 <DetermineFrameType+0x6c>
 8010ae2:	687b      	ldr	r3, [r7, #4]
 8010ae4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8010ae8:	2b00      	cmp	r3, #0
 8010aea:	d103      	bne.n	8010af4 <DetermineFrameType+0x6c>
    {
        *fType = FRAME_TYPE_C;
 8010aec:	683b      	ldr	r3, [r7, #0]
 8010aee:	2202      	movs	r2, #2
 8010af0:	701a      	strb	r2, [r3, #0]
 8010af2:	e011      	b.n	8010b18 <DetermineFrameType+0x90>
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort > 0 ) )
 8010af4:	687b      	ldr	r3, [r7, #4]
 8010af6:	7b1b      	ldrb	r3, [r3, #12]
 8010af8:	f003 030f 	and.w	r3, r3, #15
 8010afc:	b2db      	uxtb	r3, r3
 8010afe:	2b00      	cmp	r3, #0
 8010b00:	d108      	bne.n	8010b14 <DetermineFrameType+0x8c>
 8010b02:	687b      	ldr	r3, [r7, #4]
 8010b04:	f893 3020 	ldrb.w	r3, [r3, #32]
 8010b08:	2b00      	cmp	r3, #0
 8010b0a:	d003      	beq.n	8010b14 <DetermineFrameType+0x8c>
    {
        *fType = FRAME_TYPE_D;
 8010b0c:	683b      	ldr	r3, [r7, #0]
 8010b0e:	2203      	movs	r2, #3
 8010b10:	701a      	strb	r2, [r3, #0]
 8010b12:	e001      	b.n	8010b18 <DetermineFrameType+0x90>
    }
    else
    {
        // Should never happen.
        return LORAMAC_STATUS_ERROR;
 8010b14:	2318      	movs	r3, #24
 8010b16:	e000      	b.n	8010b1a <DetermineFrameType+0x92>
    }

    return LORAMAC_STATUS_OK;
 8010b18:	2300      	movs	r3, #0
}
 8010b1a:	4618      	mov	r0, r3
 8010b1c:	370c      	adds	r7, #12
 8010b1e:	46bd      	mov	sp, r7
 8010b20:	bc80      	pop	{r7}
 8010b22:	4770      	bx	lr

08010b24 <CheckRetrans>:
    }
    return false;
}
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
static bool CheckRetrans( uint8_t counter, uint8_t limit )
{
 8010b24:	b480      	push	{r7}
 8010b26:	b083      	sub	sp, #12
 8010b28:	af00      	add	r7, sp, #0
 8010b2a:	4603      	mov	r3, r0
 8010b2c:	460a      	mov	r2, r1
 8010b2e:	71fb      	strb	r3, [r7, #7]
 8010b30:	4613      	mov	r3, r2
 8010b32:	71bb      	strb	r3, [r7, #6]
    if( counter >= limit )
 8010b34:	79fa      	ldrb	r2, [r7, #7]
 8010b36:	79bb      	ldrb	r3, [r7, #6]
 8010b38:	429a      	cmp	r2, r3
 8010b3a:	d301      	bcc.n	8010b40 <CheckRetrans+0x1c>
    {
        return true;
 8010b3c:	2301      	movs	r3, #1
 8010b3e:	e000      	b.n	8010b42 <CheckRetrans+0x1e>
    }
    return false;
 8010b40:	2300      	movs	r3, #0
}
 8010b42:	4618      	mov	r0, r3
 8010b44:	370c      	adds	r7, #12
 8010b46:	46bd      	mov	sp, r7
 8010b48:	bc80      	pop	{r7}
 8010b4a:	4770      	bx	lr

08010b4c <CheckRetransUnconfirmedUplink>:

static bool CheckRetransUnconfirmedUplink( void )
{
 8010b4c:	b580      	push	{r7, lr}
 8010b4e:	af00      	add	r7, sp, #0
    // Verify, if the max number of retransmissions have been reached
    if( CheckRetrans( MacCtx.ChannelsNbTransCounter,
 8010b50:	4b12      	ldr	r3, [pc, #72]	@ (8010b9c <CheckRetransUnconfirmedUplink+0x50>)
 8010b52:	f893 341c 	ldrb.w	r3, [r3, #1052]	@ 0x41c
 8010b56:	4a12      	ldr	r2, [pc, #72]	@ (8010ba0 <CheckRetransUnconfirmedUplink+0x54>)
 8010b58:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 8010b5c:	4611      	mov	r1, r2
 8010b5e:	4618      	mov	r0, r3
 8010b60:	f7ff ffe0 	bl	8010b24 <CheckRetrans>
 8010b64:	4603      	mov	r3, r0
 8010b66:	2b00      	cmp	r3, #0
 8010b68:	d001      	beq.n	8010b6e <CheckRetransUnconfirmedUplink+0x22>
                      Nvm.MacGroup2.MacParams.ChannelsNbTrans ) == true )
    {
        return true;
 8010b6a:	2301      	movs	r3, #1
 8010b6c:	e014      	b.n	8010b98 <CheckRetransUnconfirmedUplink+0x4c>
    }

    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8010b6e:	4b0b      	ldr	r3, [pc, #44]	@ (8010b9c <CheckRetransUnconfirmedUplink+0x50>)
 8010b70:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8010b74:	f003 0302 	and.w	r3, r3, #2
 8010b78:	b2db      	uxtb	r3, r3
 8010b7a:	2b00      	cmp	r3, #0
 8010b7c:	d00b      	beq.n	8010b96 <CheckRetransUnconfirmedUplink+0x4a>
    {
        // Stop the retransmissions, if a valid downlink is received
        // a class A RX window. This holds also for class B and C.
        if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 8010b7e:	4b07      	ldr	r3, [pc, #28]	@ (8010b9c <CheckRetransUnconfirmedUplink+0x50>)
 8010b80:	f893 3493 	ldrb.w	r3, [r3, #1171]	@ 0x493
 8010b84:	2b00      	cmp	r3, #0
 8010b86:	d004      	beq.n	8010b92 <CheckRetransUnconfirmedUplink+0x46>
            ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_2 ) )
 8010b88:	4b04      	ldr	r3, [pc, #16]	@ (8010b9c <CheckRetransUnconfirmedUplink+0x50>)
 8010b8a:	f893 3493 	ldrb.w	r3, [r3, #1171]	@ 0x493
        if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 8010b8e:	2b01      	cmp	r3, #1
 8010b90:	d101      	bne.n	8010b96 <CheckRetransUnconfirmedUplink+0x4a>
        {
            return true;
 8010b92:	2301      	movs	r3, #1
 8010b94:	e000      	b.n	8010b98 <CheckRetransUnconfirmedUplink+0x4c>
        }
    }
    return false;
 8010b96:	2300      	movs	r3, #0
}
 8010b98:	4618      	mov	r0, r3
 8010b9a:	bd80      	pop	{r7, pc}
 8010b9c:	20000670 	.word	0x20000670
 8010ba0:	20000b90 	.word	0x20000b90

08010ba4 <CheckRetransConfirmedUplink>:

static bool CheckRetransConfirmedUplink( void )
{
 8010ba4:	b580      	push	{r7, lr}
 8010ba6:	af00      	add	r7, sp, #0
    // Verify, if the max number of retransmissions have been reached
    if( CheckRetrans( MacCtx.ChannelsNbTransCounter,
 8010ba8:	4b10      	ldr	r3, [pc, #64]	@ (8010bec <CheckRetransConfirmedUplink+0x48>)
 8010baa:	f893 341c 	ldrb.w	r3, [r3, #1052]	@ 0x41c
 8010bae:	4a10      	ldr	r2, [pc, #64]	@ (8010bf0 <CheckRetransConfirmedUplink+0x4c>)
 8010bb0:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 8010bb4:	4611      	mov	r1, r2
 8010bb6:	4618      	mov	r0, r3
 8010bb8:	f7ff ffb4 	bl	8010b24 <CheckRetrans>
 8010bbc:	4603      	mov	r3, r0
 8010bbe:	2b00      	cmp	r3, #0
 8010bc0:	d001      	beq.n	8010bc6 <CheckRetransConfirmedUplink+0x22>
                      Nvm.MacGroup2.MacParams.ChannelsNbTrans ) == true )
    {
        return true;
 8010bc2:	2301      	movs	r3, #1
 8010bc4:	e00f      	b.n	8010be6 <CheckRetransConfirmedUplink+0x42>
    }

    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8010bc6:	4b09      	ldr	r3, [pc, #36]	@ (8010bec <CheckRetransConfirmedUplink+0x48>)
 8010bc8:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8010bcc:	f003 0302 	and.w	r3, r3, #2
 8010bd0:	b2db      	uxtb	r3, r3
 8010bd2:	2b00      	cmp	r3, #0
 8010bd4:	d006      	beq.n	8010be4 <CheckRetransConfirmedUplink+0x40>
    {
        if( MacCtx.McpsConfirm.AckReceived == true )
 8010bd6:	4b05      	ldr	r3, [pc, #20]	@ (8010bec <CheckRetransConfirmedUplink+0x48>)
 8010bd8:	f893 3448 	ldrb.w	r3, [r3, #1096]	@ 0x448
 8010bdc:	2b00      	cmp	r3, #0
 8010bde:	d001      	beq.n	8010be4 <CheckRetransConfirmedUplink+0x40>
        {
            return true;
 8010be0:	2301      	movs	r3, #1
 8010be2:	e000      	b.n	8010be6 <CheckRetransConfirmedUplink+0x42>
        }
    }
    return false;
 8010be4:	2300      	movs	r3, #0
}
 8010be6:	4618      	mov	r0, r3
 8010be8:	bd80      	pop	{r7, pc}
 8010bea:	bf00      	nop
 8010bec:	20000670 	.word	0x20000670
 8010bf0:	20000b90 	.word	0x20000b90

08010bf4 <IncreaseAdrAckCounter>:

static uint32_t IncreaseAdrAckCounter( uint32_t counter )
{
 8010bf4:	b480      	push	{r7}
 8010bf6:	b083      	sub	sp, #12
 8010bf8:	af00      	add	r7, sp, #0
 8010bfa:	6078      	str	r0, [r7, #4]
    if( counter < ADR_ACK_COUNTER_MAX )
 8010bfc:	687b      	ldr	r3, [r7, #4]
 8010bfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010c02:	d002      	beq.n	8010c0a <IncreaseAdrAckCounter+0x16>
    {
        counter++;
 8010c04:	687b      	ldr	r3, [r7, #4]
 8010c06:	3301      	adds	r3, #1
 8010c08:	607b      	str	r3, [r7, #4]
    }
    return counter;
 8010c0a:	687b      	ldr	r3, [r7, #4]
}
 8010c0c:	4618      	mov	r0, r3
 8010c0e:	370c      	adds	r7, #12
 8010c10:	46bd      	mov	sp, r7
 8010c12:	bc80      	pop	{r7}
 8010c14:	4770      	bx	lr
	...

08010c18 <StopRetransmission>:
#endif /* LORAMAC_VERSION */

static bool StopRetransmission( void )
{
 8010c18:	b580      	push	{r7, lr}
 8010c1a:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 8010c1c:	4b1a      	ldr	r3, [pc, #104]	@ (8010c88 <StopRetransmission+0x70>)
 8010c1e:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8010c22:	f003 0302 	and.w	r3, r3, #2
 8010c26:	b2db      	uxtb	r3, r3
 8010c28:	2b00      	cmp	r3, #0
 8010c2a:	d009      	beq.n	8010c40 <StopRetransmission+0x28>
        ( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 8010c2c:	4b16      	ldr	r3, [pc, #88]	@ (8010c88 <StopRetransmission+0x70>)
 8010c2e:	f893 3493 	ldrb.w	r3, [r3, #1171]	@ 0x493
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 8010c32:	2b00      	cmp	r3, #0
 8010c34:	d011      	beq.n	8010c5a <StopRetransmission+0x42>
          ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_2 ) ) )
 8010c36:	4b14      	ldr	r3, [pc, #80]	@ (8010c88 <StopRetransmission+0x70>)
 8010c38:	f893 3493 	ldrb.w	r3, [r3, #1171]	@ 0x493
        ( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 8010c3c:	2b01      	cmp	r3, #1
 8010c3e:	d00c      	beq.n	8010c5a <StopRetransmission+0x42>
    {   // Maximum repetitions without downlink. Increase ADR Ack counter.
        // Only process the case when the MAC did not receive a downlink.
        if( Nvm.MacGroup2.AdrCtrlOn == true )
 8010c40:	4b12      	ldr	r3, [pc, #72]	@ (8010c8c <StopRetransmission+0x74>)
 8010c42:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 8010c46:	2b00      	cmp	r3, #0
 8010c48:	d007      	beq.n	8010c5a <StopRetransmission+0x42>
        {
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            Nvm.MacGroup1.AdrAckCounter++;
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
            Nvm.MacGroup1.AdrAckCounter = IncreaseAdrAckCounter( Nvm.MacGroup1.AdrAckCounter );
 8010c4a:	4b10      	ldr	r3, [pc, #64]	@ (8010c8c <StopRetransmission+0x74>)
 8010c4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010c4e:	4618      	mov	r0, r3
 8010c50:	f7ff ffd0 	bl	8010bf4 <IncreaseAdrAckCounter>
 8010c54:	4603      	mov	r3, r0
 8010c56:	4a0d      	ldr	r2, [pc, #52]	@ (8010c8c <StopRetransmission+0x74>)
 8010c58:	6293      	str	r3, [r2, #40]	@ 0x28
#endif /* LORAMAC_VERSION */
        }
    }

    MacCtx.ChannelsNbTransCounter = 0;
 8010c5a:	4b0b      	ldr	r3, [pc, #44]	@ (8010c88 <StopRetransmission+0x70>)
 8010c5c:	2200      	movs	r2, #0
 8010c5e:	f883 241c 	strb.w	r2, [r3, #1052]	@ 0x41c
    MacCtx.NodeAckRequested = false;
 8010c62:	4b09      	ldr	r3, [pc, #36]	@ (8010c88 <StopRetransmission+0x70>)
 8010c64:	2200      	movs	r2, #0
 8010c66:	f883 241e 	strb.w	r2, [r3, #1054]	@ 0x41e
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetry = false;
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    MacCtx.RetransmitTimeoutRetry = false;
 8010c6a:	4b07      	ldr	r3, [pc, #28]	@ (8010c88 <StopRetransmission+0x70>)
 8010c6c:	2200      	movs	r2, #0
 8010c6e:	f883 241d 	strb.w	r2, [r3, #1053]	@ 0x41d
#endif /* LORAMAC_VERSION */
    MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8010c72:	4b05      	ldr	r3, [pc, #20]	@ (8010c88 <StopRetransmission+0x70>)
 8010c74:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 8010c78:	f023 0302 	bic.w	r3, r3, #2
 8010c7c:	4a02      	ldr	r2, [pc, #8]	@ (8010c88 <StopRetransmission+0x70>)
 8010c7e:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340

    return true;
 8010c82:	2301      	movs	r3, #1
}
 8010c84:	4618      	mov	r0, r3
 8010c86:	bd80      	pop	{r7, pc}
 8010c88:	20000670 	.word	0x20000670
 8010c8c:	20000b90 	.word	0x20000b90

08010c90 <CallNvmDataChangeCallback>:

static void CallNvmDataChangeCallback( uint16_t notifyFlags )
{
 8010c90:	b580      	push	{r7, lr}
 8010c92:	b082      	sub	sp, #8
 8010c94:	af00      	add	r7, sp, #0
 8010c96:	4603      	mov	r3, r0
 8010c98:	80fb      	strh	r3, [r7, #6]
    if( ( MacCtx.MacCallbacks != NULL ) &&
 8010c9a:	4b0b      	ldr	r3, [pc, #44]	@ (8010cc8 <CallNvmDataChangeCallback+0x38>)
 8010c9c:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 8010ca0:	2b00      	cmp	r3, #0
 8010ca2:	d00c      	beq.n	8010cbe <CallNvmDataChangeCallback+0x2e>
        ( MacCtx.MacCallbacks->NvmDataChange  != NULL ) )
 8010ca4:	4b08      	ldr	r3, [pc, #32]	@ (8010cc8 <CallNvmDataChangeCallback+0x38>)
 8010ca6:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 8010caa:	68db      	ldr	r3, [r3, #12]
    if( ( MacCtx.MacCallbacks != NULL ) &&
 8010cac:	2b00      	cmp	r3, #0
 8010cae:	d006      	beq.n	8010cbe <CallNvmDataChangeCallback+0x2e>
    {
        MacCtx.MacCallbacks->NvmDataChange ( notifyFlags );
 8010cb0:	4b05      	ldr	r3, [pc, #20]	@ (8010cc8 <CallNvmDataChangeCallback+0x38>)
 8010cb2:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 8010cb6:	68db      	ldr	r3, [r3, #12]
 8010cb8:	88fa      	ldrh	r2, [r7, #6]
 8010cba:	4610      	mov	r0, r2
 8010cbc:	4798      	blx	r3
    }
}
 8010cbe:	bf00      	nop
 8010cc0:	3708      	adds	r7, #8
 8010cc2:	46bd      	mov	sp, r7
 8010cc4:	bd80      	pop	{r7, pc}
 8010cc6:	bf00      	nop
 8010cc8:	20000670 	.word	0x20000670

08010ccc <IsRequestPending>:
    MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
}
#endif /* LORAMAC_VERSION */

static uint8_t IsRequestPending( void )
{
 8010ccc:	b480      	push	{r7}
 8010cce:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 8010cd0:	4b0b      	ldr	r3, [pc, #44]	@ (8010d00 <IsRequestPending+0x34>)
 8010cd2:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8010cd6:	f003 0304 	and.w	r3, r3, #4
 8010cda:	b2db      	uxtb	r3, r3
 8010cdc:	2b00      	cmp	r3, #0
 8010cde:	d107      	bne.n	8010cf0 <IsRequestPending+0x24>
        ( MacCtx.MacFlags.Bits.McpsReq == 1 ) )
 8010ce0:	4b07      	ldr	r3, [pc, #28]	@ (8010d00 <IsRequestPending+0x34>)
 8010ce2:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8010ce6:	f003 0301 	and.w	r3, r3, #1
 8010cea:	b2db      	uxtb	r3, r3
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 8010cec:	2b00      	cmp	r3, #0
 8010cee:	d001      	beq.n	8010cf4 <IsRequestPending+0x28>
    {
        return 1;
 8010cf0:	2301      	movs	r3, #1
 8010cf2:	e000      	b.n	8010cf6 <IsRequestPending+0x2a>
    }
    return 0;
 8010cf4:	2300      	movs	r3, #0
}
 8010cf6:	4618      	mov	r0, r3
 8010cf8:	46bd      	mov	sp, r7
 8010cfa:	bc80      	pop	{r7}
 8010cfc:	4770      	bx	lr
 8010cfe:	bf00      	nop
 8010d00:	20000670 	.word	0x20000670

08010d04 <LoRaMacInitialization>:

LoRaMacStatus_t LoRaMacInitialization( LoRaMacPrimitives_t* primitives, LoRaMacCallback_t* callbacks, LoRaMacRegion_t region )
{
 8010d04:	b590      	push	{r4, r7, lr}
 8010d06:	b091      	sub	sp, #68	@ 0x44
 8010d08:	af02      	add	r7, sp, #8
 8010d0a:	6178      	str	r0, [r7, #20]
 8010d0c:	6139      	str	r1, [r7, #16]
 8010d0e:	4613      	mov	r3, r2
 8010d10:	73fb      	strb	r3, [r7, #15]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( ( primitives == NULL ) ||
 8010d12:	697b      	ldr	r3, [r7, #20]
 8010d14:	2b00      	cmp	r3, #0
 8010d16:	d002      	beq.n	8010d1e <LoRaMacInitialization+0x1a>
 8010d18:	693b      	ldr	r3, [r7, #16]
 8010d1a:	2b00      	cmp	r3, #0
 8010d1c:	d101      	bne.n	8010d22 <LoRaMacInitialization+0x1e>
        ( callbacks == NULL ) )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8010d1e:	2303      	movs	r3, #3
 8010d20:	e27c      	b.n	801121c <LoRaMacInitialization+0x518>
    }

    if( ( primitives->MacMcpsConfirm == NULL ) ||
 8010d22:	697b      	ldr	r3, [r7, #20]
 8010d24:	681b      	ldr	r3, [r3, #0]
 8010d26:	2b00      	cmp	r3, #0
 8010d28:	d00b      	beq.n	8010d42 <LoRaMacInitialization+0x3e>
        ( primitives->MacMcpsIndication == NULL ) ||
 8010d2a:	697b      	ldr	r3, [r7, #20]
 8010d2c:	685b      	ldr	r3, [r3, #4]
    if( ( primitives->MacMcpsConfirm == NULL ) ||
 8010d2e:	2b00      	cmp	r3, #0
 8010d30:	d007      	beq.n	8010d42 <LoRaMacInitialization+0x3e>
        ( primitives->MacMlmeConfirm == NULL ) ||
 8010d32:	697b      	ldr	r3, [r7, #20]
 8010d34:	689b      	ldr	r3, [r3, #8]
        ( primitives->MacMcpsIndication == NULL ) ||
 8010d36:	2b00      	cmp	r3, #0
 8010d38:	d003      	beq.n	8010d42 <LoRaMacInitialization+0x3e>
        ( primitives->MacMlmeIndication == NULL ) )
 8010d3a:	697b      	ldr	r3, [r7, #20]
 8010d3c:	68db      	ldr	r3, [r3, #12]
        ( primitives->MacMlmeConfirm == NULL ) ||
 8010d3e:	2b00      	cmp	r3, #0
 8010d40:	d101      	bne.n	8010d46 <LoRaMacInitialization+0x42>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8010d42:	2303      	movs	r3, #3
 8010d44:	e26a      	b.n	801121c <LoRaMacInitialization+0x518>
    }
    // Verify if the region is supported
    if( RegionIsActive( region ) == false )
 8010d46:	7bfb      	ldrb	r3, [r7, #15]
 8010d48:	4618      	mov	r0, r3
 8010d4a:	f003 fbd7 	bl	80144fc <RegionIsActive>
 8010d4e:	4603      	mov	r3, r0
 8010d50:	f083 0301 	eor.w	r3, r3, #1
 8010d54:	b2db      	uxtb	r3, r3
 8010d56:	2b00      	cmp	r3, #0
 8010d58:	d001      	beq.n	8010d5e <LoRaMacInitialization+0x5a>
    {
        return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 8010d5a:	2309      	movs	r3, #9
 8010d5c:	e25e      	b.n	801121c <LoRaMacInitialization+0x518>
    }

    // Confirm queue reset
    LoRaMacConfirmQueueInit( primitives );
 8010d5e:	6978      	ldr	r0, [r7, #20]
 8010d60:	f002 f884 	bl	8012e6c <LoRaMacConfirmQueueInit>

    // Initialize the module context with zeros
    memset1( ( uint8_t* ) &Nvm, 0x00, sizeof( LoRaMacNvmData_t ) );
 8010d64:	f240 527c 	movw	r2, #1404	@ 0x57c
 8010d68:	2100      	movs	r1, #0
 8010d6a:	48c7      	ldr	r0, [pc, #796]	@ (8011088 <LoRaMacInitialization+0x384>)
 8010d6c:	f005 feb2 	bl	8016ad4 <memset1>
    memset1( ( uint8_t* ) &MacCtx, 0x00, sizeof( LoRaMacCtx_t ) );
 8010d70:	f44f 62a4 	mov.w	r2, #1312	@ 0x520
 8010d74:	2100      	movs	r1, #0
 8010d76:	48c5      	ldr	r0, [pc, #788]	@ (801108c <LoRaMacInitialization+0x388>)
 8010d78:	f005 feac 	bl	8016ad4 <memset1>
    // Set non zero variables to its default value
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetriesCounter = 1;
    MacCtx.AckTimeoutRetries = 1;
#endif /* LORAMAC_VERSION */
    Nvm.MacGroup2.Region = region;
 8010d7c:	4ac2      	ldr	r2, [pc, #776]	@ (8011088 <LoRaMacInitialization+0x384>)
 8010d7e:	7bfb      	ldrb	r3, [r7, #15]
 8010d80:	f882 3040 	strb.w	r3, [r2, #64]	@ 0x40
    Nvm.MacGroup2.DeviceClass = CLASS_A;
 8010d84:	4bc0      	ldr	r3, [pc, #768]	@ (8011088 <LoRaMacInitialization+0x384>)
 8010d86:	2200      	movs	r2, #0
 8010d88:	f883 2104 	strb.w	r2, [r3, #260]	@ 0x104
    Nvm.MacGroup2.MacParams.RepeaterSupport = false; /* ST_WORKAROUND: Keep repeater feature */
 8010d8c:	4bbe      	ldr	r3, [pc, #760]	@ (8011088 <LoRaMacInitialization+0x384>)
 8010d8e:	2200      	movs	r2, #0
 8010d90:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    // Setup version
    Nvm.MacGroup2.Version.Value = LORAMAC_VERSION;
 8010d94:	4bbc      	ldr	r3, [pc, #752]	@ (8011088 <LoRaMacInitialization+0x384>)
 8010d96:	4abe      	ldr	r2, [pc, #760]	@ (8011090 <LoRaMacInitialization+0x38c>)
 8010d98:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_DEFAULTS;
 8010d9c:	2300      	movs	r3, #0
 8010d9e:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    params.NvmGroup1 = &Nvm.RegionGroup1;
 8010da2:	4bbc      	ldr	r3, [pc, #752]	@ (8011094 <LoRaMacInitialization+0x390>)
 8010da4:	61fb      	str	r3, [r7, #28]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 8010da6:	4bbc      	ldr	r3, [pc, #752]	@ (8011098 <LoRaMacInitialization+0x394>)
 8010da8:	623b      	str	r3, [r7, #32]
    params.Bands = &RegionBands;
 8010daa:	4bbc      	ldr	r3, [pc, #752]	@ (801109c <LoRaMacInitialization+0x398>)
 8010dac:	627b      	str	r3, [r7, #36]	@ 0x24
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 8010dae:	4bb6      	ldr	r3, [pc, #728]	@ (8011088 <LoRaMacInitialization+0x384>)
 8010db0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8010db4:	f107 021c 	add.w	r2, r7, #28
 8010db8:	4611      	mov	r1, r2
 8010dba:	4618      	mov	r0, r3
 8010dbc:	f003 fbd7 	bl	801456e <RegionInitDefaults>
#endif /* LORAMAC_VERSION */

    // Reset to defaults
    getPhy.Attribute = PHY_DUTY_CYCLE;
 8010dc0:	230f      	movs	r3, #15
 8010dc2:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010dc6:	4bb0      	ldr	r3, [pc, #704]	@ (8011088 <LoRaMacInitialization+0x384>)
 8010dc8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8010dcc:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8010dd0:	4611      	mov	r1, r2
 8010dd2:	4618      	mov	r0, r3
 8010dd4:	f003 fba2 	bl	801451c <RegionGetPhyParam>
 8010dd8:	4603      	mov	r3, r0
 8010dda:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.DutyCycleOn = ( bool ) phyParam.Value;
 8010ddc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010dde:	2b00      	cmp	r3, #0
 8010de0:	bf14      	ite	ne
 8010de2:	2301      	movne	r3, #1
 8010de4:	2300      	moveq	r3, #0
 8010de6:	b2da      	uxtb	r2, r3
 8010de8:	4ba7      	ldr	r3, [pc, #668]	@ (8011088 <LoRaMacInitialization+0x384>)
 8010dea:	f883 2108 	strb.w	r2, [r3, #264]	@ 0x108

    getPhy.Attribute = PHY_DEF_TX_POWER;
 8010dee:	230a      	movs	r3, #10
 8010df0:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010df4:	4ba4      	ldr	r3, [pc, #656]	@ (8011088 <LoRaMacInitialization+0x384>)
 8010df6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8010dfa:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8010dfe:	4611      	mov	r1, r2
 8010e00:	4618      	mov	r0, r3
 8010e02:	f003 fb8b 	bl	801451c <RegionGetPhyParam>
 8010e06:	4603      	mov	r3, r0
 8010e08:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.ChannelsTxPowerDefault = phyParam.Value;
 8010e0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010e0c:	b25a      	sxtb	r2, r3
 8010e0e:	4b9e      	ldr	r3, [pc, #632]	@ (8011088 <LoRaMacInitialization+0x384>)
 8010e10:	f883 20cc 	strb.w	r2, [r3, #204]	@ 0xcc

    getPhy.Attribute = PHY_DEF_TX_DR;
 8010e14:	2306      	movs	r3, #6
 8010e16:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010e1a:	4b9b      	ldr	r3, [pc, #620]	@ (8011088 <LoRaMacInitialization+0x384>)
 8010e1c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8010e20:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8010e24:	4611      	mov	r1, r2
 8010e26:	4618      	mov	r0, r3
 8010e28:	f003 fb78 	bl	801451c <RegionGetPhyParam>
 8010e2c:	4603      	mov	r3, r0
 8010e2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.ChannelsDatarateDefault = phyParam.Value;
 8010e30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010e32:	b25a      	sxtb	r2, r3
 8010e34:	4b94      	ldr	r3, [pc, #592]	@ (8011088 <LoRaMacInitialization+0x384>)
 8010e36:	f883 20cd 	strb.w	r2, [r3, #205]	@ 0xcd

    getPhy.Attribute = PHY_MAX_RX_WINDOW;
 8010e3a:	2310      	movs	r3, #16
 8010e3c:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010e40:	4b91      	ldr	r3, [pc, #580]	@ (8011088 <LoRaMacInitialization+0x384>)
 8010e42:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8010e46:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8010e4a:	4611      	mov	r1, r2
 8010e4c:	4618      	mov	r0, r3
 8010e4e:	f003 fb65 	bl	801451c <RegionGetPhyParam>
 8010e52:	4603      	mov	r3, r0
 8010e54:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow = phyParam.Value;
 8010e56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010e58:	4a8b      	ldr	r2, [pc, #556]	@ (8011088 <LoRaMacInitialization+0x384>)
 8010e5a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    getPhy.Attribute = PHY_RECEIVE_DELAY1;
 8010e5e:	2311      	movs	r3, #17
 8010e60:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010e64:	4b88      	ldr	r3, [pc, #544]	@ (8011088 <LoRaMacInitialization+0x384>)
 8010e66:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8010e6a:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8010e6e:	4611      	mov	r1, r2
 8010e70:	4618      	mov	r0, r3
 8010e72:	f003 fb53 	bl	801451c <RegionGetPhyParam>
 8010e76:	4603      	mov	r3, r0
 8010e78:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1 = phyParam.Value;
 8010e7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010e7c:	4a82      	ldr	r2, [pc, #520]	@ (8011088 <LoRaMacInitialization+0x384>)
 8010e7e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

    getPhy.Attribute = PHY_RECEIVE_DELAY2;
 8010e82:	2312      	movs	r3, #18
 8010e84:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010e88:	4b7f      	ldr	r3, [pc, #508]	@ (8011088 <LoRaMacInitialization+0x384>)
 8010e8a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8010e8e:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8010e92:	4611      	mov	r1, r2
 8010e94:	4618      	mov	r0, r3
 8010e96:	f003 fb41 	bl	801451c <RegionGetPhyParam>
 8010e9a:	4603      	mov	r3, r0
 8010e9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2 = phyParam.Value;
 8010e9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010ea0:	4a79      	ldr	r2, [pc, #484]	@ (8011088 <LoRaMacInitialization+0x384>)
 8010ea2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY1;
 8010ea6:	2313      	movs	r3, #19
 8010ea8:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010eac:	4b76      	ldr	r3, [pc, #472]	@ (8011088 <LoRaMacInitialization+0x384>)
 8010eae:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8010eb2:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8010eb6:	4611      	mov	r1, r2
 8010eb8:	4618      	mov	r0, r3
 8010eba:	f003 fb2f 	bl	801451c <RegionGetPhyParam>
 8010ebe:	4603      	mov	r3, r0
 8010ec0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1 = phyParam.Value;
 8010ec2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010ec4:	4a70      	ldr	r2, [pc, #448]	@ (8011088 <LoRaMacInitialization+0x384>)
 8010ec6:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY2;
 8010eca:	2314      	movs	r3, #20
 8010ecc:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010ed0:	4b6d      	ldr	r3, [pc, #436]	@ (8011088 <LoRaMacInitialization+0x384>)
 8010ed2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8010ed6:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8010eda:	4611      	mov	r1, r2
 8010edc:	4618      	mov	r0, r3
 8010ede:	f003 fb1d 	bl	801451c <RegionGetPhyParam>
 8010ee2:	4603      	mov	r3, r0
 8010ee4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2 = phyParam.Value;
 8010ee6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010ee8:	4a67      	ldr	r2, [pc, #412]	@ (8011088 <LoRaMacInitialization+0x384>)
 8010eea:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

    getPhy.Attribute = PHY_DEF_DR1_OFFSET;
 8010eee:	2316      	movs	r3, #22
 8010ef0:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010ef4:	4b64      	ldr	r3, [pc, #400]	@ (8011088 <LoRaMacInitialization+0x384>)
 8010ef6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8010efa:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8010efe:	4611      	mov	r1, r2
 8010f00:	4618      	mov	r0, r3
 8010f02:	f003 fb0b 	bl	801451c <RegionGetPhyParam>
 8010f06:	4603      	mov	r3, r0
 8010f08:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset = phyParam.Value;
 8010f0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010f0c:	b2da      	uxtb	r2, r3
 8010f0e:	4b5e      	ldr	r3, [pc, #376]	@ (8011088 <LoRaMacInitialization+0x384>)
 8010f10:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5

    getPhy.Attribute = PHY_DEF_RX2_FREQUENCY;
 8010f14:	2317      	movs	r3, #23
 8010f16:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010f1a:	4b5b      	ldr	r3, [pc, #364]	@ (8011088 <LoRaMacInitialization+0x384>)
 8010f1c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8010f20:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8010f24:	4611      	mov	r1, r2
 8010f26:	4618      	mov	r0, r3
 8010f28:	f003 faf8 	bl	801451c <RegionGetPhyParam>
 8010f2c:	4603      	mov	r3, r0
 8010f2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Frequency = phyParam.Value;
 8010f30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010f32:	4a55      	ldr	r2, [pc, #340]	@ (8011088 <LoRaMacInitialization+0x384>)
 8010f34:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Frequency = phyParam.Value;
 8010f38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010f3a:	4a53      	ldr	r2, [pc, #332]	@ (8011088 <LoRaMacInitialization+0x384>)
 8010f3c:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0

    getPhy.Attribute = PHY_DEF_RX2_DR;
 8010f40:	2318      	movs	r3, #24
 8010f42:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010f46:	4b50      	ldr	r3, [pc, #320]	@ (8011088 <LoRaMacInitialization+0x384>)
 8010f48:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8010f4c:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8010f50:	4611      	mov	r1, r2
 8010f52:	4618      	mov	r0, r3
 8010f54:	f003 fae2 	bl	801451c <RegionGetPhyParam>
 8010f58:	4603      	mov	r3, r0
 8010f5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Datarate = phyParam.Value;
 8010f5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010f5e:	b2da      	uxtb	r2, r3
 8010f60:	4b49      	ldr	r3, [pc, #292]	@ (8011088 <LoRaMacInitialization+0x384>)
 8010f62:	f883 20ac 	strb.w	r2, [r3, #172]	@ 0xac
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Datarate = phyParam.Value;
 8010f66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010f68:	b2da      	uxtb	r2, r3
 8010f6a:	4b47      	ldr	r3, [pc, #284]	@ (8011088 <LoRaMacInitialization+0x384>)
 8010f6c:	f883 20b4 	strb.w	r2, [r3, #180]	@ 0xb4

    getPhy.Attribute = PHY_DEF_UPLINK_DWELL_TIME;
 8010f70:	231d      	movs	r3, #29
 8010f72:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010f76:	4b44      	ldr	r3, [pc, #272]	@ (8011088 <LoRaMacInitialization+0x384>)
 8010f78:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8010f7c:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8010f80:	4611      	mov	r1, r2
 8010f82:	4618      	mov	r0, r3
 8010f84:	f003 faca 	bl	801451c <RegionGetPhyParam>
 8010f88:	4603      	mov	r3, r0
 8010f8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime = phyParam.Value;
 8010f8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010f8e:	b2da      	uxtb	r2, r3
 8010f90:	4b3d      	ldr	r3, [pc, #244]	@ (8011088 <LoRaMacInitialization+0x384>)
 8010f92:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8

    getPhy.Attribute = PHY_DEF_DOWNLINK_DWELL_TIME;
 8010f96:	231e      	movs	r3, #30
 8010f98:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010f9c:	4b3a      	ldr	r3, [pc, #232]	@ (8011088 <LoRaMacInitialization+0x384>)
 8010f9e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8010fa2:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8010fa6:	4611      	mov	r1, r2
 8010fa8:	4618      	mov	r0, r3
 8010faa:	f003 fab7 	bl	801451c <RegionGetPhyParam>
 8010fae:	4603      	mov	r3, r0
 8010fb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime = phyParam.Value;
 8010fb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010fb4:	b2da      	uxtb	r2, r3
 8010fb6:	4b34      	ldr	r3, [pc, #208]	@ (8011088 <LoRaMacInitialization+0x384>)
 8010fb8:	f883 20b9 	strb.w	r2, [r3, #185]	@ 0xb9

    getPhy.Attribute = PHY_DEF_MAX_EIRP;
 8010fbc:	231f      	movs	r3, #31
 8010fbe:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010fc2:	4b31      	ldr	r3, [pc, #196]	@ (8011088 <LoRaMacInitialization+0x384>)
 8010fc4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8010fc8:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8010fcc:	4611      	mov	r1, r2
 8010fce:	4618      	mov	r0, r3
 8010fd0:	f003 faa4 	bl	801451c <RegionGetPhyParam>
 8010fd4:	4603      	mov	r3, r0
 8010fd6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.MaxEirp = phyParam.fValue;
 8010fd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010fda:	4a2b      	ldr	r2, [pc, #172]	@ (8011088 <LoRaMacInitialization+0x384>)
 8010fdc:	f8c2 30bc 	str.w	r3, [r2, #188]	@ 0xbc

    getPhy.Attribute = PHY_DEF_ANTENNA_GAIN;
 8010fe0:	2320      	movs	r3, #32
 8010fe2:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010fe6:	4b28      	ldr	r3, [pc, #160]	@ (8011088 <LoRaMacInitialization+0x384>)
 8010fe8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8010fec:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8010ff0:	4611      	mov	r1, r2
 8010ff2:	4618      	mov	r0, r3
 8010ff4:	f003 fa92 	bl	801451c <RegionGetPhyParam>
 8010ff8:	4603      	mov	r3, r0
 8010ffa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.AntennaGain = phyParam.fValue;
 8010ffc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010ffe:	4a22      	ldr	r2, [pc, #136]	@ (8011088 <LoRaMacInitialization+0x384>)
 8011000:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0

    getPhy.Attribute = PHY_DEF_ADR_ACK_LIMIT;
 8011004:	230b      	movs	r3, #11
 8011006:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801100a:	4b1f      	ldr	r3, [pc, #124]	@ (8011088 <LoRaMacInitialization+0x384>)
 801100c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8011010:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8011014:	4611      	mov	r1, r2
 8011016:	4618      	mov	r0, r3
 8011018:	f003 fa80 	bl	801451c <RegionGetPhyParam>
 801101c:	4603      	mov	r3, r0
 801101e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    MacCtx.AdrAckLimit = phyParam.Value;
 8011020:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011022:	b29a      	uxth	r2, r3
 8011024:	4b19      	ldr	r3, [pc, #100]	@ (801108c <LoRaMacInitialization+0x388>)
 8011026:	f8a3 2400 	strh.w	r2, [r3, #1024]	@ 0x400

    getPhy.Attribute = PHY_DEF_ADR_ACK_DELAY;
 801102a:	230c      	movs	r3, #12
 801102c:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011030:	4b15      	ldr	r3, [pc, #84]	@ (8011088 <LoRaMacInitialization+0x384>)
 8011032:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8011036:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 801103a:	4611      	mov	r1, r2
 801103c:	4618      	mov	r0, r3
 801103e:	f003 fa6d 	bl	801451c <RegionGetPhyParam>
 8011042:	4603      	mov	r3, r0
 8011044:	62fb      	str	r3, [r7, #44]	@ 0x2c
    MacCtx.AdrAckDelay = phyParam.Value;
 8011046:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011048:	b29a      	uxth	r2, r3
 801104a:	4b10      	ldr	r3, [pc, #64]	@ (801108c <LoRaMacInitialization+0x388>)
 801104c:	f8a3 2402 	strh.w	r2, [r3, #1026]	@ 0x402

    // Init parameters which are not set in function ResetMacParameters
    Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans = 1;
 8011050:	4b0d      	ldr	r3, [pc, #52]	@ (8011088 <LoRaMacInitialization+0x384>)
 8011052:	2201      	movs	r2, #1
 8011054:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
    Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = 10;
 8011058:	4b0b      	ldr	r3, [pc, #44]	@ (8011088 <LoRaMacInitialization+0x384>)
 801105a:	220a      	movs	r2, #10
 801105c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = 6;
 8011060:	4b09      	ldr	r3, [pc, #36]	@ (8011088 <LoRaMacInitialization+0x384>)
 8011062:	2206      	movs	r2, #6
 8011064:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c

    Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError;
 8011068:	4b07      	ldr	r3, [pc, #28]	@ (8011088 <LoRaMacInitialization+0x384>)
 801106a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801106e:	4a06      	ldr	r2, [pc, #24]	@ (8011088 <LoRaMacInitialization+0x384>)
 8011070:	6453      	str	r3, [r2, #68]	@ 0x44
    Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols;
 8011072:	4b05      	ldr	r3, [pc, #20]	@ (8011088 <LoRaMacInitialization+0x384>)
 8011074:	f893 208c 	ldrb.w	r2, [r3, #140]	@ 0x8c
 8011078:	4b03      	ldr	r3, [pc, #12]	@ (8011088 <LoRaMacInitialization+0x384>)
 801107a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
    Nvm.MacGroup2.MacParams.MaxRxWindow = Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow;
 801107e:	4b02      	ldr	r3, [pc, #8]	@ (8011088 <LoRaMacInitialization+0x384>)
 8011080:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8011084:	e00c      	b.n	80110a0 <LoRaMacInitialization+0x39c>
 8011086:	bf00      	nop
 8011088:	20000b90 	.word	0x20000b90
 801108c:	20000670 	.word	0x20000670
 8011090:	01000400 	.word	0x01000400
 8011094:	20000d74 	.word	0x20000d74
 8011098:	20000d78 	.word	0x20000d78
 801109c:	20001688 	.word	0x20001688
 80110a0:	4a60      	ldr	r2, [pc, #384]	@ (8011224 <LoRaMacInitialization+0x520>)
 80110a2:	64d3      	str	r3, [r2, #76]	@ 0x4c
    Nvm.MacGroup2.MacParams.ReceiveDelay1 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1;
 80110a4:	4b5f      	ldr	r3, [pc, #380]	@ (8011224 <LoRaMacInitialization+0x520>)
 80110a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80110aa:	4a5e      	ldr	r2, [pc, #376]	@ (8011224 <LoRaMacInitialization+0x520>)
 80110ac:	6513      	str	r3, [r2, #80]	@ 0x50
    Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2;
 80110ae:	4b5d      	ldr	r3, [pc, #372]	@ (8011224 <LoRaMacInitialization+0x520>)
 80110b0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80110b4:	4a5b      	ldr	r2, [pc, #364]	@ (8011224 <LoRaMacInitialization+0x520>)
 80110b6:	6553      	str	r3, [r2, #84]	@ 0x54
    Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1;
 80110b8:	4b5a      	ldr	r3, [pc, #360]	@ (8011224 <LoRaMacInitialization+0x520>)
 80110ba:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80110be:	4a59      	ldr	r2, [pc, #356]	@ (8011224 <LoRaMacInitialization+0x520>)
 80110c0:	6593      	str	r3, [r2, #88]	@ 0x58
    Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2;
 80110c2:	4b58      	ldr	r3, [pc, #352]	@ (8011224 <LoRaMacInitialization+0x520>)
 80110c4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80110c8:	4a56      	ldr	r2, [pc, #344]	@ (8011224 <LoRaMacInitialization+0x520>)
 80110ca:	65d3      	str	r3, [r2, #92]	@ 0x5c
    Nvm.MacGroup2.MacParams.ChannelsNbTrans = Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans;
 80110cc:	4b55      	ldr	r3, [pc, #340]	@ (8011224 <LoRaMacInitialization+0x520>)
 80110ce:	f893 20a4 	ldrb.w	r2, [r3, #164]	@ 0xa4
 80110d2:	4b54      	ldr	r3, [pc, #336]	@ (8011224 <LoRaMacInitialization+0x520>)
 80110d4:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
    params.NvmGroup1 = &Nvm.RegionGroup1;
    params.NvmGroup2 = &Nvm.RegionGroup2;
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    // FPort 224 is enabled by default.
    Nvm.MacGroup2.IsCertPortOn = true;
 80110d8:	4b52      	ldr	r3, [pc, #328]	@ (8011224 <LoRaMacInitialization+0x520>)
 80110da:	2201      	movs	r2, #1
 80110dc:	f883 210b 	strb.w	r2, [r3, #267]	@ 0x10b
#endif /* LORAMAC_VERSION */

    MacCtx.MacCallbacks = callbacks;
 80110e0:	4a51      	ldr	r2, [pc, #324]	@ (8011228 <LoRaMacInitialization+0x524>)
 80110e2:	693b      	ldr	r3, [r7, #16]
 80110e4:	f8c2 3348 	str.w	r3, [r2, #840]	@ 0x348
    ResetMacParameters( );
 80110e8:	f7ff f8d6 	bl	8010298 <ResetMacParameters>

    Nvm.MacGroup2.PublicNetwork = true;
 80110ec:	4b4d      	ldr	r3, [pc, #308]	@ (8011224 <LoRaMacInitialization+0x520>)
 80110ee:	2201      	movs	r2, #1
 80110f0:	f883 2105 	strb.w	r2, [r3, #261]	@ 0x105

    MacCtx.MacPrimitives = primitives;
 80110f4:	4a4c      	ldr	r2, [pc, #304]	@ (8011228 <LoRaMacInitialization+0x524>)
 80110f6:	697b      	ldr	r3, [r7, #20]
 80110f8:	f8c2 3344 	str.w	r3, [r2, #836]	@ 0x344
    MacCtx.MacFlags.Value = 0;
 80110fc:	4b4a      	ldr	r3, [pc, #296]	@ (8011228 <LoRaMacInitialization+0x524>)
 80110fe:	2200      	movs	r2, #0
 8011100:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    MacCtx.MacState = LORAMAC_STOPPED;
 8011104:	4b48      	ldr	r3, [pc, #288]	@ (8011228 <LoRaMacInitialization+0x524>)
 8011106:	2201      	movs	r2, #1
 8011108:	f8c3 2340 	str.w	r2, [r3, #832]	@ 0x340

    // Reset duty cycle times
    Nvm.MacGroup1.LastTxDoneTime = 0;
 801110c:	4b45      	ldr	r3, [pc, #276]	@ (8011224 <LoRaMacInitialization+0x520>)
 801110e:	2200      	movs	r2, #0
 8011110:	62da      	str	r2, [r3, #44]	@ 0x2c
    Nvm.MacGroup1.AggregatedTimeOff = 0;
 8011112:	4b44      	ldr	r3, [pc, #272]	@ (8011224 <LoRaMacInitialization+0x520>)
 8011114:	2200      	movs	r2, #0
 8011116:	631a      	str	r2, [r3, #48]	@ 0x30

    // Initialize timers
    TimerInit( &MacCtx.TxDelayedTimer, OnTxDelayedTimerEvent );
 8011118:	2300      	movs	r3, #0
 801111a:	9300      	str	r3, [sp, #0]
 801111c:	4b43      	ldr	r3, [pc, #268]	@ (801122c <LoRaMacInitialization+0x528>)
 801111e:	2200      	movs	r2, #0
 8011120:	f04f 31ff 	mov.w	r1, #4294967295
 8011124:	4842      	ldr	r0, [pc, #264]	@ (8011230 <LoRaMacInitialization+0x52c>)
 8011126:	f009 fd3b 	bl	801aba0 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer1, OnRxWindow1TimerEvent );
 801112a:	2300      	movs	r3, #0
 801112c:	9300      	str	r3, [sp, #0]
 801112e:	4b41      	ldr	r3, [pc, #260]	@ (8011234 <LoRaMacInitialization+0x530>)
 8011130:	2200      	movs	r2, #0
 8011132:	f04f 31ff 	mov.w	r1, #4294967295
 8011136:	4840      	ldr	r0, [pc, #256]	@ (8011238 <LoRaMacInitialization+0x534>)
 8011138:	f009 fd32 	bl	801aba0 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer2, OnRxWindow2TimerEvent );
 801113c:	2300      	movs	r3, #0
 801113e:	9300      	str	r3, [sp, #0]
 8011140:	4b3e      	ldr	r3, [pc, #248]	@ (801123c <LoRaMacInitialization+0x538>)
 8011142:	2200      	movs	r2, #0
 8011144:	f04f 31ff 	mov.w	r1, #4294967295
 8011148:	483d      	ldr	r0, [pc, #244]	@ (8011240 <LoRaMacInitialization+0x53c>)
 801114a:	f009 fd29 	bl	801aba0 <UTIL_TIMER_Create>
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerInit( &MacCtx.AckTimeoutTimer, OnAckTimeoutTimerEvent );
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    TimerInit( &MacCtx.RetransmitTimeoutTimer, OnRetransmitTimeoutTimerEvent );
 801114e:	2300      	movs	r3, #0
 8011150:	9300      	str	r3, [sp, #0]
 8011152:	4b3c      	ldr	r3, [pc, #240]	@ (8011244 <LoRaMacInitialization+0x540>)
 8011154:	2200      	movs	r2, #0
 8011156:	f04f 31ff 	mov.w	r1, #4294967295
 801115a:	483b      	ldr	r0, [pc, #236]	@ (8011248 <LoRaMacInitialization+0x544>)
 801115c:	f009 fd20 	bl	801aba0 <UTIL_TIMER_Create>
#endif /* LORAMAC_VERSION */

    // Store the current initialization time
    Nvm.MacGroup2.InitializationTime = SysTimeGetMcuTime( );
 8011160:	4c30      	ldr	r4, [pc, #192]	@ (8011224 <LoRaMacInitialization+0x520>)
 8011162:	463b      	mov	r3, r7
 8011164:	4618      	mov	r0, r3
 8011166:	f009 f891 	bl	801a28c <SysTimeGetMcuTime>
 801116a:	f504 7388 	add.w	r3, r4, #272	@ 0x110
 801116e:	463a      	mov	r2, r7
 8011170:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011174:	e883 0003 	stmia.w	r3, {r0, r1}

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    // Initialize MAC radio events
    LoRaMacRadioEvents.Value = 0;
 8011178:	4b34      	ldr	r3, [pc, #208]	@ (801124c <LoRaMacInitialization+0x548>)
 801117a:	2200      	movs	r2, #0
 801117c:	601a      	str	r2, [r3, #0]
#endif /* LORAMAC_VERSION */

    // Initialize Radio driver
    MacCtx.RadioEvents.TxDone = OnRadioTxDone;
 801117e:	4b2a      	ldr	r3, [pc, #168]	@ (8011228 <LoRaMacInitialization+0x524>)
 8011180:	4a33      	ldr	r2, [pc, #204]	@ (8011250 <LoRaMacInitialization+0x54c>)
 8011182:	f8c3 234c 	str.w	r2, [r3, #844]	@ 0x34c
    MacCtx.RadioEvents.RxDone = OnRadioRxDone;
 8011186:	4b28      	ldr	r3, [pc, #160]	@ (8011228 <LoRaMacInitialization+0x524>)
 8011188:	4a32      	ldr	r2, [pc, #200]	@ (8011254 <LoRaMacInitialization+0x550>)
 801118a:	f8c3 2354 	str.w	r2, [r3, #852]	@ 0x354
    MacCtx.RadioEvents.RxError = OnRadioRxError;
 801118e:	4b26      	ldr	r3, [pc, #152]	@ (8011228 <LoRaMacInitialization+0x524>)
 8011190:	4a31      	ldr	r2, [pc, #196]	@ (8011258 <LoRaMacInitialization+0x554>)
 8011192:	f8c3 235c 	str.w	r2, [r3, #860]	@ 0x35c
    MacCtx.RadioEvents.TxTimeout = OnRadioTxTimeout;
 8011196:	4b24      	ldr	r3, [pc, #144]	@ (8011228 <LoRaMacInitialization+0x524>)
 8011198:	4a30      	ldr	r2, [pc, #192]	@ (801125c <LoRaMacInitialization+0x558>)
 801119a:	f8c3 2350 	str.w	r2, [r3, #848]	@ 0x350
    MacCtx.RadioEvents.RxTimeout = OnRadioRxTimeout;
 801119e:	4b22      	ldr	r3, [pc, #136]	@ (8011228 <LoRaMacInitialization+0x524>)
 80111a0:	4a2f      	ldr	r2, [pc, #188]	@ (8011260 <LoRaMacInitialization+0x55c>)
 80111a2:	f8c3 2358 	str.w	r2, [r3, #856]	@ 0x358
    Radio.Init( &MacCtx.RadioEvents );
 80111a6:	4b2f      	ldr	r3, [pc, #188]	@ (8011264 <LoRaMacInitialization+0x560>)
 80111a8:	681b      	ldr	r3, [r3, #0]
 80111aa:	482f      	ldr	r0, [pc, #188]	@ (8011268 <LoRaMacInitialization+0x564>)
 80111ac:	4798      	blx	r3

    // Initialize the Secure Element driver
    if( SecureElementInit( &Nvm.SecureElement, callbacks->GetUniqueId ) != SECURE_ELEMENT_SUCCESS ) /* ST_WORKAROUND: Add unique ID callback as input parameter */
 80111ae:	693b      	ldr	r3, [r7, #16]
 80111b0:	689b      	ldr	r3, [r3, #8]
 80111b2:	4619      	mov	r1, r3
 80111b4:	482d      	ldr	r0, [pc, #180]	@ (801126c <LoRaMacInitialization+0x568>)
 80111b6:	f7fa fb85 	bl	800b8c4 <SecureElementInit>
 80111ba:	4603      	mov	r3, r0
 80111bc:	2b00      	cmp	r3, #0
 80111be:	d001      	beq.n	80111c4 <LoRaMacInitialization+0x4c0>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 80111c0:	2311      	movs	r3, #17
 80111c2:	e02b      	b.n	801121c <LoRaMacInitialization+0x518>
    }

    // Initialize Crypto module
    if( LoRaMacCryptoInit( &Nvm.Crypto ) != LORAMAC_CRYPTO_SUCCESS )
 80111c4:	4817      	ldr	r0, [pc, #92]	@ (8011224 <LoRaMacInitialization+0x520>)
 80111c6:	f002 fafd 	bl	80137c4 <LoRaMacCryptoInit>
 80111ca:	4603      	mov	r3, r0
 80111cc:	2b00      	cmp	r3, #0
 80111ce:	d001      	beq.n	80111d4 <LoRaMacInitialization+0x4d0>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 80111d0:	2311      	movs	r3, #17
 80111d2:	e023      	b.n	801121c <LoRaMacInitialization+0x518>
    }

    // Initialize MAC commands module
    if( LoRaMacCommandsInit( ) != LORAMAC_COMMANDS_SUCCESS )
 80111d4:	f001 fc1c 	bl	8012a10 <LoRaMacCommandsInit>
 80111d8:	4603      	mov	r3, r0
 80111da:	2b00      	cmp	r3, #0
 80111dc:	d001      	beq.n	80111e2 <LoRaMacInitialization+0x4de>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80111de:	2313      	movs	r3, #19
 80111e0:	e01c      	b.n	801121c <LoRaMacInitialization+0x518>
    }

    // Set multicast downlink counter reference
    if( LoRaMacCryptoSetMulticastReference( Nvm.MacGroup2.MulticastChannelList ) != LORAMAC_CRYPTO_SUCCESS )
 80111e2:	4823      	ldr	r0, [pc, #140]	@ (8011270 <LoRaMacInitialization+0x56c>)
 80111e4:	f002 fb8e 	bl	8013904 <LoRaMacCryptoSetMulticastReference>
 80111e8:	4603      	mov	r3, r0
 80111ea:	2b00      	cmp	r3, #0
 80111ec:	d001      	beq.n	80111f2 <LoRaMacInitialization+0x4ee>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 80111ee:	2311      	movs	r3, #17
 80111f0:	e014      	b.n	801121c <LoRaMacInitialization+0x518>
    }

    // Random seed initialization
    srand1( Radio.Random( ) );
 80111f2:	4b1c      	ldr	r3, [pc, #112]	@ (8011264 <LoRaMacInitialization+0x560>)
 80111f4:	695b      	ldr	r3, [r3, #20]
 80111f6:	4798      	blx	r3
 80111f8:	4603      	mov	r3, r0
 80111fa:	4618      	mov	r0, r3
 80111fc:	f005 fc0a 	bl	8016a14 <srand1>

    Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 8011200:	4b18      	ldr	r3, [pc, #96]	@ (8011264 <LoRaMacInitialization+0x560>)
 8011202:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8011204:	4a07      	ldr	r2, [pc, #28]	@ (8011224 <LoRaMacInitialization+0x520>)
 8011206:	f892 2105 	ldrb.w	r2, [r2, #261]	@ 0x105
 801120a:	4610      	mov	r0, r2
 801120c:	4798      	blx	r3
    Radio.Sleep( );
 801120e:	4b15      	ldr	r3, [pc, #84]	@ (8011264 <LoRaMacInitialization+0x560>)
 8011210:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011212:	4798      	blx	r3

    LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 8011214:	2001      	movs	r0, #1
 8011216:	f7fd fac7 	bl	800e7a8 <LoRaMacEnableRequests>

    return LORAMAC_STATUS_OK;
 801121a:	2300      	movs	r3, #0
}
 801121c:	4618      	mov	r0, r3
 801121e:	373c      	adds	r7, #60	@ 0x3c
 8011220:	46bd      	mov	sp, r7
 8011222:	bd90      	pop	{r4, r7, pc}
 8011224:	20000b90 	.word	0x20000b90
 8011228:	20000670 	.word	0x20000670
 801122c:	0800ed5d 	.word	0x0800ed5d
 8011230:	200009d8 	.word	0x200009d8
 8011234:	0800eded 	.word	0x0800eded
 8011238:	200009f0 	.word	0x200009f0
 801123c:	0800ee65 	.word	0x0800ee65
 8011240:	20000a08 	.word	0x20000a08
 8011244:	0800eee5 	.word	0x0800eee5
 8011248:	20000a74 	.word	0x20000a74
 801124c:	20001718 	.word	0x20001718
 8011250:	0800d85d 	.word	0x0800d85d
 8011254:	0800d8d5 	.word	0x0800d8d5
 8011258:	0800d9b5 	.word	0x0800d9b5
 801125c:	0800d969 	.word	0x0800d969
 8011260:	0800d9f1 	.word	0x0800d9f1
 8011264:	0801c57c 	.word	0x0801c57c
 8011268:	200009bc 	.word	0x200009bc
 801126c:	20000cb4 	.word	0x20000cb4
 8011270:	20000c68 	.word	0x20000c68

08011274 <LoRaMacStart>:

LoRaMacStatus_t LoRaMacStart( void )
{
 8011274:	b480      	push	{r7}
 8011276:	af00      	add	r7, sp, #0
    MacCtx.MacState = LORAMAC_IDLE;
 8011278:	4b04      	ldr	r3, [pc, #16]	@ (801128c <LoRaMacStart+0x18>)
 801127a:	2200      	movs	r2, #0
 801127c:	f8c3 2340 	str.w	r2, [r3, #832]	@ 0x340
    return LORAMAC_STATUS_OK;
 8011280:	2300      	movs	r3, #0
}
 8011282:	4618      	mov	r0, r3
 8011284:	46bd      	mov	sp, r7
 8011286:	bc80      	pop	{r7}
 8011288:	4770      	bx	lr
 801128a:	bf00      	nop
 801128c:	20000670 	.word	0x20000670

08011290 <LoRaMacStop>:

LoRaMacStatus_t LoRaMacStop( void )
{
 8011290:	b580      	push	{r7, lr}
 8011292:	af00      	add	r7, sp, #0
    if( LoRaMacIsBusy( ) == false )
 8011294:	f7fd fa68 	bl	800e768 <LoRaMacIsBusy>
 8011298:	4603      	mov	r3, r0
 801129a:	f083 0301 	eor.w	r3, r3, #1
 801129e:	b2db      	uxtb	r3, r3
 80112a0:	2b00      	cmp	r3, #0
 80112a2:	d005      	beq.n	80112b0 <LoRaMacStop+0x20>
    {
        MacCtx.MacState = LORAMAC_STOPPED;
 80112a4:	4b07      	ldr	r3, [pc, #28]	@ (80112c4 <LoRaMacStop+0x34>)
 80112a6:	2201      	movs	r2, #1
 80112a8:	f8c3 2340 	str.w	r2, [r3, #832]	@ 0x340
        return LORAMAC_STATUS_OK;
 80112ac:	2300      	movs	r3, #0
 80112ae:	e007      	b.n	80112c0 <LoRaMacStop+0x30>
    }
    else if(  MacCtx.MacState == LORAMAC_STOPPED )
 80112b0:	4b04      	ldr	r3, [pc, #16]	@ (80112c4 <LoRaMacStop+0x34>)
 80112b2:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 80112b6:	2b01      	cmp	r3, #1
 80112b8:	d101      	bne.n	80112be <LoRaMacStop+0x2e>
    {
        return LORAMAC_STATUS_OK;
 80112ba:	2300      	movs	r3, #0
 80112bc:	e000      	b.n	80112c0 <LoRaMacStop+0x30>
    }
    return LORAMAC_STATUS_BUSY;
 80112be:	2301      	movs	r3, #1
}
 80112c0:	4618      	mov	r0, r3
 80112c2:	bd80      	pop	{r7, pc}
 80112c4:	20000670 	.word	0x20000670

080112c8 <LoRaMacHalt>:

LoRaMacStatus_t LoRaMacHalt( void )
{
 80112c8:	b580      	push	{r7, lr}
 80112ca:	af00      	add	r7, sp, #0
    // Stop Timers
    TimerStop( &MacCtx.TxDelayedTimer );
 80112cc:	4812      	ldr	r0, [pc, #72]	@ (8011318 <LoRaMacHalt+0x50>)
 80112ce:	f009 fd0b 	bl	801ace8 <UTIL_TIMER_Stop>
    TimerStop( &MacCtx.RxWindowTimer1 );
 80112d2:	4812      	ldr	r0, [pc, #72]	@ (801131c <LoRaMacHalt+0x54>)
 80112d4:	f009 fd08 	bl	801ace8 <UTIL_TIMER_Stop>
    TimerStop( &MacCtx.RxWindowTimer2 );
 80112d8:	4811      	ldr	r0, [pc, #68]	@ (8011320 <LoRaMacHalt+0x58>)
 80112da:	f009 fd05 	bl	801ace8 <UTIL_TIMER_Stop>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerStop( &MacCtx.AckTimeoutTimer );
#elif (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    TimerStop( &MacCtx.RetransmitTimeoutTimer );
 80112de:	4811      	ldr	r0, [pc, #68]	@ (8011324 <LoRaMacHalt+0x5c>)
 80112e0:	f009 fd02 	bl	801ace8 <UTIL_TIMER_Stop>
#endif /* LORAMAC_VERSION */

    // Take care about class B
    LoRaMacClassBHaltBeaconing( );
 80112e4:	f001 fa04 	bl	80126f0 <LoRaMacClassBHaltBeaconing>

    // Switch off Radio
    Radio.Sleep( );
 80112e8:	4b0f      	ldr	r3, [pc, #60]	@ (8011328 <LoRaMacHalt+0x60>)
 80112ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80112ec:	4798      	blx	r3

    MacCtx.MacState = LORAMAC_IDLE;
 80112ee:	4b0f      	ldr	r3, [pc, #60]	@ (801132c <LoRaMacHalt+0x64>)
 80112f0:	2200      	movs	r2, #0
 80112f2:	f8c3 2340 	str.w	r2, [r3, #832]	@ 0x340

    LoRaMacHandleNvm( &Nvm );
 80112f6:	480e      	ldr	r0, [pc, #56]	@ (8011330 <LoRaMacHalt+0x68>)
 80112f8:	f7fd fc0c 	bl	800eb14 <LoRaMacHandleNvm>

    // Preserve the Nvm context if data retention
    memcpy1( ( uint8_t* ) &NvmBackup, ( uint8_t* ) &Nvm, sizeof( LoRaMacNvmData_t ) );
 80112fc:	f240 527c 	movw	r2, #1404	@ 0x57c
 8011300:	490b      	ldr	r1, [pc, #44]	@ (8011330 <LoRaMacHalt+0x68>)
 8011302:	480c      	ldr	r0, [pc, #48]	@ (8011334 <LoRaMacHalt+0x6c>)
 8011304:	f005 fbab 	bl	8016a5e <memcpy1>

    MacCtx.MacState = LORAMAC_STOPPED;
 8011308:	4b08      	ldr	r3, [pc, #32]	@ (801132c <LoRaMacHalt+0x64>)
 801130a:	2201      	movs	r2, #1
 801130c:	f8c3 2340 	str.w	r2, [r3, #832]	@ 0x340

    return LORAMAC_STATUS_OK;
 8011310:	2300      	movs	r3, #0
}
 8011312:	4618      	mov	r0, r3
 8011314:	bd80      	pop	{r7, pc}
 8011316:	bf00      	nop
 8011318:	200009d8 	.word	0x200009d8
 801131c:	200009f0 	.word	0x200009f0
 8011320:	20000a08 	.word	0x20000a08
 8011324:	20000a74 	.word	0x20000a74
 8011328:	0801c57c 	.word	0x0801c57c
 801132c:	20000670 	.word	0x20000670
 8011330:	20000b90 	.word	0x20000b90
 8011334:	2000110c 	.word	0x2000110c

08011338 <LoRaMacQueryTxPossible>:

LoRaMacStatus_t LoRaMacQueryTxPossible( uint8_t size, LoRaMacTxInfo_t* txInfo )
{
 8011338:	b590      	push	{r4, r7, lr}
 801133a:	b08d      	sub	sp, #52	@ 0x34
 801133c:	af02      	add	r7, sp, #8
 801133e:	4603      	mov	r3, r0
 8011340:	6039      	str	r1, [r7, #0]
 8011342:	71fb      	strb	r3, [r7, #7]
    CalcNextAdrParams_t adrNext;
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8011344:	4b42      	ldr	r3, [pc, #264]	@ (8011450 <LoRaMacQueryTxPossible+0x118>)
 8011346:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011348:	613b      	str	r3, [r7, #16]
    int8_t datarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 801134a:	4b41      	ldr	r3, [pc, #260]	@ (8011450 <LoRaMacQueryTxPossible+0x118>)
 801134c:	f993 30cd 	ldrsb.w	r3, [r3, #205]	@ 0xcd
 8011350:	73fb      	strb	r3, [r7, #15]
    int8_t txPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 8011352:	4b3f      	ldr	r3, [pc, #252]	@ (8011450 <LoRaMacQueryTxPossible+0x118>)
 8011354:	f993 30cc 	ldrsb.w	r3, [r3, #204]	@ 0xcc
 8011358:	73bb      	strb	r3, [r7, #14]
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    uint8_t nbTrans = MacCtx.ChannelsNbTransCounter;
 801135a:	4b3e      	ldr	r3, [pc, #248]	@ (8011454 <LoRaMacQueryTxPossible+0x11c>)
 801135c:	f893 341c 	ldrb.w	r3, [r3, #1052]	@ 0x41c
 8011360:	737b      	strb	r3, [r7, #13]
#endif /* LORAMAC_VERSION */
    size_t macCmdsSize = 0;
 8011362:	2300      	movs	r3, #0
 8011364:	60bb      	str	r3, [r7, #8]

    if( txInfo == NULL )
 8011366:	683b      	ldr	r3, [r7, #0]
 8011368:	2b00      	cmp	r3, #0
 801136a:	d101      	bne.n	8011370 <LoRaMacQueryTxPossible+0x38>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 801136c:	2303      	movs	r3, #3
 801136e:	e06b      	b.n	8011448 <LoRaMacQueryTxPossible+0x110>

    // Setup ADR request
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    adrNext.Version = Nvm.MacGroup2.Version;
#endif /* LORAMAC_VERSION */
    adrNext.UpdateChanMask = false;
 8011370:	2300      	movs	r3, #0
 8011372:	753b      	strb	r3, [r7, #20]
    adrNext.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 8011374:	4b36      	ldr	r3, [pc, #216]	@ (8011450 <LoRaMacQueryTxPossible+0x118>)
 8011376:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 801137a:	757b      	strb	r3, [r7, #21]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 801137c:	4b34      	ldr	r3, [pc, #208]	@ (8011450 <LoRaMacQueryTxPossible+0x118>)
 801137e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011380:	61bb      	str	r3, [r7, #24]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 8011382:	4b34      	ldr	r3, [pc, #208]	@ (8011454 <LoRaMacQueryTxPossible+0x11c>)
 8011384:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	@ 0x400
 8011388:	83bb      	strh	r3, [r7, #28]
    adrNext.AdrAckDelay = MacCtx.AdrAckDelay;
 801138a:	4b32      	ldr	r3, [pc, #200]	@ (8011454 <LoRaMacQueryTxPossible+0x11c>)
 801138c:	f8b3 3402 	ldrh.w	r3, [r3, #1026]	@ 0x402
 8011390:	83fb      	strh	r3, [r7, #30]
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8011392:	4b2f      	ldr	r3, [pc, #188]	@ (8011450 <LoRaMacQueryTxPossible+0x118>)
 8011394:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 8011398:	f887 3020 	strb.w	r3, [r7, #32]
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 801139c:	4b2c      	ldr	r3, [pc, #176]	@ (8011450 <LoRaMacQueryTxPossible+0x118>)
 801139e:	f993 3038 	ldrsb.w	r3, [r3, #56]	@ 0x38
 80113a2:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    adrNext.NbTrans = MacCtx.ChannelsNbTransCounter;
 80113a6:	4b2b      	ldr	r3, [pc, #172]	@ (8011454 <LoRaMacQueryTxPossible+0x11c>)
 80113a8:	f893 341c 	ldrb.w	r3, [r3, #1052]	@ 0x41c
 80113ac:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
#endif /* LORAMAC_VERSION */
    adrNext.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 80113b0:	4b27      	ldr	r3, [pc, #156]	@ (8011450 <LoRaMacQueryTxPossible+0x118>)
 80113b2:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 80113b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    adrNext.Region = Nvm.MacGroup2.Region;
 80113ba:	4b25      	ldr	r3, [pc, #148]	@ (8011450 <LoRaMacQueryTxPossible+0x118>)
 80113bc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80113c0:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
    // We call the function for information purposes only. We don't want to
    // apply the datarate, the tx power and the ADR ack counter.
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &adrAckCounter );
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &nbTrans, &adrAckCounter );
 80113c4:	f107 040d 	add.w	r4, r7, #13
 80113c8:	f107 020e 	add.w	r2, r7, #14
 80113cc:	f107 010f 	add.w	r1, r7, #15
 80113d0:	f107 0014 	add.w	r0, r7, #20
 80113d4:	f107 0310 	add.w	r3, r7, #16
 80113d8:	9300      	str	r3, [sp, #0]
 80113da:	4623      	mov	r3, r4
 80113dc:	f001 f852 	bl	8012484 <LoRaMacAdrCalcNext>
#endif /* LORAMAC_VERSION */

    txInfo->CurrentPossiblePayloadSize = GetMaxAppPayloadWithoutFOptsLength( datarate );
 80113e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80113e4:	4618      	mov	r0, r3
 80113e6:	f7fd feb9 	bl	800f15c <GetMaxAppPayloadWithoutFOptsLength>
 80113ea:	4603      	mov	r3, r0
 80113ec:	461a      	mov	r2, r3
 80113ee:	683b      	ldr	r3, [r7, #0]
 80113f0:	705a      	strb	r2, [r3, #1]

    if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 80113f2:	f107 0308 	add.w	r3, r7, #8
 80113f6:	4618      	mov	r0, r3
 80113f8:	f001 fbd8 	bl	8012bac <LoRaMacCommandsGetSizeSerializedCmds>
 80113fc:	4603      	mov	r3, r0
 80113fe:	2b00      	cmp	r3, #0
 8011400:	d001      	beq.n	8011406 <LoRaMacQueryTxPossible+0xce>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8011402:	2313      	movs	r3, #19
 8011404:	e020      	b.n	8011448 <LoRaMacQueryTxPossible+0x110>
    }

    // Verify if the MAC commands fit into the FOpts and into the maximum payload.
    if( ( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH >= macCmdsSize ) && ( txInfo->CurrentPossiblePayloadSize >= macCmdsSize ) )
 8011406:	68bb      	ldr	r3, [r7, #8]
 8011408:	2b0f      	cmp	r3, #15
 801140a:	d819      	bhi.n	8011440 <LoRaMacQueryTxPossible+0x108>
 801140c:	683b      	ldr	r3, [r7, #0]
 801140e:	785b      	ldrb	r3, [r3, #1]
 8011410:	461a      	mov	r2, r3
 8011412:	68bb      	ldr	r3, [r7, #8]
 8011414:	429a      	cmp	r2, r3
 8011416:	d313      	bcc.n	8011440 <LoRaMacQueryTxPossible+0x108>
    {
        txInfo->MaxPossibleApplicationDataSize = txInfo->CurrentPossiblePayloadSize - macCmdsSize;
 8011418:	683b      	ldr	r3, [r7, #0]
 801141a:	785a      	ldrb	r2, [r3, #1]
 801141c:	68bb      	ldr	r3, [r7, #8]
 801141e:	b2db      	uxtb	r3, r3
 8011420:	1ad3      	subs	r3, r2, r3
 8011422:	b2da      	uxtb	r2, r3
 8011424:	683b      	ldr	r3, [r7, #0]
 8011426:	701a      	strb	r2, [r3, #0]

        // Verify if the application data together with MAC command fit into the maximum payload.
        if( txInfo->CurrentPossiblePayloadSize >= ( macCmdsSize + size ) )
 8011428:	683b      	ldr	r3, [r7, #0]
 801142a:	785b      	ldrb	r3, [r3, #1]
 801142c:	4619      	mov	r1, r3
 801142e:	79fa      	ldrb	r2, [r7, #7]
 8011430:	68bb      	ldr	r3, [r7, #8]
 8011432:	4413      	add	r3, r2
 8011434:	4299      	cmp	r1, r3
 8011436:	d301      	bcc.n	801143c <LoRaMacQueryTxPossible+0x104>
        {
            return LORAMAC_STATUS_OK;
 8011438:	2300      	movs	r3, #0
 801143a:	e005      	b.n	8011448 <LoRaMacQueryTxPossible+0x110>
        }
        else
        {
           return LORAMAC_STATUS_LENGTH_ERROR;
 801143c:	2308      	movs	r3, #8
 801143e:	e003      	b.n	8011448 <LoRaMacQueryTxPossible+0x110>
        }
    }
    else
    {
        txInfo->MaxPossibleApplicationDataSize = 0;
 8011440:	683b      	ldr	r3, [r7, #0]
 8011442:	2200      	movs	r2, #0
 8011444:	701a      	strb	r2, [r3, #0]
        return LORAMAC_STATUS_LENGTH_ERROR;
 8011446:	2308      	movs	r3, #8
    }
}
 8011448:	4618      	mov	r0, r3
 801144a:	372c      	adds	r7, #44	@ 0x2c
 801144c:	46bd      	mov	sp, r7
 801144e:	bd90      	pop	{r4, r7, pc}
 8011450:	20000b90 	.word	0x20000b90
 8011454:	20000670 	.word	0x20000670

08011458 <LoRaMacMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibGetRequestConfirm( MibRequestConfirm_t* mibGet )
{
 8011458:	b590      	push	{r4, r7, lr}
 801145a:	b087      	sub	sp, #28
 801145c:	af00      	add	r7, sp, #0
 801145e:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8011460:	2300      	movs	r3, #0
 8011462:	75fb      	strb	r3, [r7, #23]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( mibGet == NULL )
 8011464:	687b      	ldr	r3, [r7, #4]
 8011466:	2b00      	cmp	r3, #0
 8011468:	d101      	bne.n	801146e <LoRaMacMibGetRequestConfirm+0x16>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 801146a:	2303      	movs	r3, #3
 801146c:	e191      	b.n	8011792 <LoRaMacMibGetRequestConfirm+0x33a>
    }

    switch( mibGet->Type )
 801146e:	687b      	ldr	r3, [r7, #4]
 8011470:	781b      	ldrb	r3, [r3, #0]
 8011472:	2b39      	cmp	r3, #57	@ 0x39
 8011474:	f200 8186 	bhi.w	8011784 <LoRaMacMibGetRequestConfirm+0x32c>
 8011478:	a201      	add	r2, pc, #4	@ (adr r2, 8011480 <LoRaMacMibGetRequestConfirm+0x28>)
 801147a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801147e:	bf00      	nop
 8011480:	08011569 	.word	0x08011569
 8011484:	08011575 	.word	0x08011575
 8011488:	08011581 	.word	0x08011581
 801148c:	0801158d 	.word	0x0801158d
 8011490:	08011599 	.word	0x08011599
 8011494:	080115a5 	.word	0x080115a5
 8011498:	080115b1 	.word	0x080115b1
 801149c:	08011785 	.word	0x08011785
 80114a0:	08011785 	.word	0x08011785
 80114a4:	08011785 	.word	0x08011785
 80114a8:	08011785 	.word	0x08011785
 80114ac:	08011785 	.word	0x08011785
 80114b0:	08011785 	.word	0x08011785
 80114b4:	08011785 	.word	0x08011785
 80114b8:	08011785 	.word	0x08011785
 80114bc:	080115bd 	.word	0x080115bd
 80114c0:	080115c9 	.word	0x080115c9
 80114c4:	080115d5 	.word	0x080115d5
 80114c8:	080115f7 	.word	0x080115f7
 80114cc:	08011609 	.word	0x08011609
 80114d0:	0801161b 	.word	0x0801161b
 80114d4:	0801162d 	.word	0x0801162d
 80114d8:	08011661 	.word	0x08011661
 80114dc:	0801163f 	.word	0x0801163f
 80114e0:	08011683 	.word	0x08011683
 80114e4:	0801168f 	.word	0x0801168f
 80114e8:	08011699 	.word	0x08011699
 80114ec:	080116a3 	.word	0x080116a3
 80114f0:	080116ad 	.word	0x080116ad
 80114f4:	080116b7 	.word	0x080116b7
 80114f8:	080116c1 	.word	0x080116c1
 80114fc:	080116ed 	.word	0x080116ed
 8011500:	080116f9 	.word	0x080116f9
 8011504:	08011711 	.word	0x08011711
 8011508:	08011705 	.word	0x08011705
 801150c:	0801171d 	.word	0x0801171d
 8011510:	08011727 	.word	0x08011727
 8011514:	08011733 	.word	0x08011733
 8011518:	0801174d 	.word	0x0801174d
 801151c:	0801173d 	.word	0x0801173d
 8011520:	08011745 	.word	0x08011745
 8011524:	08011785 	.word	0x08011785
 8011528:	08011759 	.word	0x08011759
 801152c:	08011785 	.word	0x08011785
 8011530:	08011785 	.word	0x08011785
 8011534:	08011785 	.word	0x08011785
 8011538:	08011785 	.word	0x08011785
 801153c:	08011785 	.word	0x08011785
 8011540:	08011785 	.word	0x08011785
 8011544:	08011785 	.word	0x08011785
 8011548:	08011785 	.word	0x08011785
 801154c:	08011785 	.word	0x08011785
 8011550:	08011785 	.word	0x08011785
 8011554:	08011785 	.word	0x08011785
 8011558:	08011785 	.word	0x08011785
 801155c:	08011785 	.word	0x08011785
 8011560:	0801176d 	.word	0x0801176d
 8011564:	08011779 	.word	0x08011779
    {
        case MIB_DEVICE_CLASS:
        {
            mibGet->Param.Class = Nvm.MacGroup2.DeviceClass;
 8011568:	4b8c      	ldr	r3, [pc, #560]	@ (801179c <LoRaMacMibGetRequestConfirm+0x344>)
 801156a:	f893 2104 	ldrb.w	r2, [r3, #260]	@ 0x104
 801156e:	687b      	ldr	r3, [r7, #4]
 8011570:	711a      	strb	r2, [r3, #4]
            break;
 8011572:	e10d      	b.n	8011790 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            mibGet->Param.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 8011574:	4b89      	ldr	r3, [pc, #548]	@ (801179c <LoRaMacMibGetRequestConfirm+0x344>)
 8011576:	f893 211c 	ldrb.w	r2, [r3, #284]	@ 0x11c
 801157a:	687b      	ldr	r3, [r7, #4]
 801157c:	711a      	strb	r2, [r3, #4]
            break;
 801157e:	e107      	b.n	8011790 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_DEV_EUI:
        {
            mibGet->Param.DevEui = SecureElementGetDevEui( );
 8011580:	f7fa fc76 	bl	800be70 <SecureElementGetDevEui>
 8011584:	4602      	mov	r2, r0
 8011586:	687b      	ldr	r3, [r7, #4]
 8011588:	605a      	str	r2, [r3, #4]
            break;
 801158a:	e101      	b.n	8011790 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_JOIN_EUI:
        {
            mibGet->Param.JoinEui = SecureElementGetJoinEui( );
 801158c:	f7fa fc92 	bl	800beb4 <SecureElementGetJoinEui>
 8011590:	4602      	mov	r2, r0
 8011592:	687b      	ldr	r3, [r7, #4]
 8011594:	605a      	str	r2, [r3, #4]
            break;
 8011596:	e0fb      	b.n	8011790 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_ADR:
        {
            mibGet->Param.AdrEnable = Nvm.MacGroup2.AdrCtrlOn;
 8011598:	4b80      	ldr	r3, [pc, #512]	@ (801179c <LoRaMacMibGetRequestConfirm+0x344>)
 801159a:	f893 2106 	ldrb.w	r2, [r3, #262]	@ 0x106
 801159e:	687b      	ldr	r3, [r7, #4]
 80115a0:	711a      	strb	r2, [r3, #4]
            break;
 80115a2:	e0f5      	b.n	8011790 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_NET_ID:
        {
            mibGet->Param.NetID = Nvm.MacGroup2.NetID;
 80115a4:	4b7d      	ldr	r3, [pc, #500]	@ (801179c <LoRaMacMibGetRequestConfirm+0x344>)
 80115a6:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 80115aa:	687b      	ldr	r3, [r7, #4]
 80115ac:	605a      	str	r2, [r3, #4]
            break;
 80115ae:	e0ef      	b.n	8011790 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_DEV_ADDR:
        {
            mibGet->Param.DevAddr = Nvm.MacGroup2.DevAddr;
 80115b0:	4b7a      	ldr	r3, [pc, #488]	@ (801179c <LoRaMacMibGetRequestConfirm+0x344>)
 80115b2:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 80115b6:	687b      	ldr	r3, [r7, #4]
 80115b8:	605a      	str	r2, [r3, #4]
            break;
 80115ba:	e0e9      	b.n	8011790 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_PUBLIC_NETWORK:
        {
            mibGet->Param.EnablePublicNetwork = Nvm.MacGroup2.PublicNetwork;
 80115bc:	4b77      	ldr	r3, [pc, #476]	@ (801179c <LoRaMacMibGetRequestConfirm+0x344>)
 80115be:	f893 2105 	ldrb.w	r2, [r3, #261]	@ 0x105
 80115c2:	687b      	ldr	r3, [r7, #4]
 80115c4:	711a      	strb	r2, [r3, #4]
            break;
 80115c6:	e0e3      	b.n	8011790 <LoRaMacMibGetRequestConfirm+0x338>
        }
        /* ST_WORKAROUND_BEGIN: Keep repeater feature */
        case MIB_REPEATER_SUPPORT:
        {
            mibGet->Param.EnableRepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 80115c8:	4b74      	ldr	r3, [pc, #464]	@ (801179c <LoRaMacMibGetRequestConfirm+0x344>)
 80115ca:	f893 2080 	ldrb.w	r2, [r3, #128]	@ 0x80
 80115ce:	687b      	ldr	r3, [r7, #4]
 80115d0:	711a      	strb	r2, [r3, #4]
            break;
 80115d2:	e0dd      	b.n	8011790 <LoRaMacMibGetRequestConfirm+0x338>
        }
        /* ST_WORKAROUND_END */
        case MIB_CHANNELS:
        {
            getPhy.Attribute = PHY_CHANNELS;
 80115d4:	231c      	movs	r3, #28
 80115d6:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80115d8:	4b70      	ldr	r3, [pc, #448]	@ (801179c <LoRaMacMibGetRequestConfirm+0x344>)
 80115da:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80115de:	f107 0210 	add.w	r2, r7, #16
 80115e2:	4611      	mov	r1, r2
 80115e4:	4618      	mov	r0, r3
 80115e6:	f002 ff99 	bl	801451c <RegionGetPhyParam>
 80115ea:	4603      	mov	r3, r0
 80115ec:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelList = phyParam.Channels;
 80115ee:	68fa      	ldr	r2, [r7, #12]
 80115f0:	687b      	ldr	r3, [r7, #4]
 80115f2:	605a      	str	r2, [r3, #4]
            break;
 80115f4:	e0cc      	b.n	8011790 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_RX2_CHANNEL:
        {
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParams.Rx2Channel;
 80115f6:	687b      	ldr	r3, [r7, #4]
 80115f8:	4a68      	ldr	r2, [pc, #416]	@ (801179c <LoRaMacMibGetRequestConfirm+0x344>)
 80115fa:	3304      	adds	r3, #4
 80115fc:	3264      	adds	r2, #100	@ 0x64
 80115fe:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011602:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8011606:	e0c3      	b.n	8011790 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 8011608:	687b      	ldr	r3, [r7, #4]
 801160a:	4a64      	ldr	r2, [pc, #400]	@ (801179c <LoRaMacMibGetRequestConfirm+0x344>)
 801160c:	3304      	adds	r3, #4
 801160e:	32a8      	adds	r2, #168	@ 0xa8
 8011610:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011614:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8011618:	e0ba      	b.n	8011790 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_RXC_CHANNEL:
        {
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParams.RxCChannel;
 801161a:	687b      	ldr	r3, [r7, #4]
 801161c:	4a5f      	ldr	r2, [pc, #380]	@ (801179c <LoRaMacMibGetRequestConfirm+0x344>)
 801161e:	3304      	adds	r3, #4
 8011620:	326c      	adds	r2, #108	@ 0x6c
 8011622:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011626:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 801162a:	e0b1      	b.n	8011790 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 801162c:	687b      	ldr	r3, [r7, #4]
 801162e:	4a5b      	ldr	r2, [pc, #364]	@ (801179c <LoRaMacMibGetRequestConfirm+0x344>)
 8011630:	3304      	adds	r3, #4
 8011632:	32b0      	adds	r2, #176	@ 0xb0
 8011634:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011638:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 801163c:	e0a8      	b.n	8011790 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_DEFAULT_MASK;
 801163e:	231a      	movs	r3, #26
 8011640:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011642:	4b56      	ldr	r3, [pc, #344]	@ (801179c <LoRaMacMibGetRequestConfirm+0x344>)
 8011644:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8011648:	f107 0210 	add.w	r2, r7, #16
 801164c:	4611      	mov	r1, r2
 801164e:	4618      	mov	r0, r3
 8011650:	f002 ff64 	bl	801451c <RegionGetPhyParam>
 8011654:	4603      	mov	r3, r0
 8011656:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsDefaultMask = phyParam.ChannelsMask;
 8011658:	68fa      	ldr	r2, [r7, #12]
 801165a:	687b      	ldr	r3, [r7, #4]
 801165c:	605a      	str	r2, [r3, #4]
            break;
 801165e:	e097      	b.n	8011790 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_CHANNELS_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_MASK;
 8011660:	2319      	movs	r3, #25
 8011662:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011664:	4b4d      	ldr	r3, [pc, #308]	@ (801179c <LoRaMacMibGetRequestConfirm+0x344>)
 8011666:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 801166a:	f107 0210 	add.w	r2, r7, #16
 801166e:	4611      	mov	r1, r2
 8011670:	4618      	mov	r0, r3
 8011672:	f002 ff53 	bl	801451c <RegionGetPhyParam>
 8011676:	4603      	mov	r3, r0
 8011678:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsMask = phyParam.ChannelsMask;
 801167a:	68fa      	ldr	r2, [r7, #12]
 801167c:	687b      	ldr	r3, [r7, #4]
 801167e:	605a      	str	r2, [r3, #4]
            break;
 8011680:	e086      	b.n	8011790 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            mibGet->Param.ChannelsNbTrans = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 8011682:	4b46      	ldr	r3, [pc, #280]	@ (801179c <LoRaMacMibGetRequestConfirm+0x344>)
 8011684:	f893 2060 	ldrb.w	r2, [r3, #96]	@ 0x60
 8011688:	687b      	ldr	r3, [r7, #4]
 801168a:	711a      	strb	r2, [r3, #4]
            break;
 801168c:	e080      	b.n	8011790 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            mibGet->Param.MaxRxWindow = Nvm.MacGroup2.MacParams.MaxRxWindow;
 801168e:	4b43      	ldr	r3, [pc, #268]	@ (801179c <LoRaMacMibGetRequestConfirm+0x344>)
 8011690:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8011692:	687b      	ldr	r3, [r7, #4]
 8011694:	605a      	str	r2, [r3, #4]
            break;
 8011696:	e07b      	b.n	8011790 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            mibGet->Param.ReceiveDelay1 = Nvm.MacGroup2.MacParams.ReceiveDelay1;
 8011698:	4b40      	ldr	r3, [pc, #256]	@ (801179c <LoRaMacMibGetRequestConfirm+0x344>)
 801169a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801169c:	687b      	ldr	r3, [r7, #4]
 801169e:	605a      	str	r2, [r3, #4]
            break;
 80116a0:	e076      	b.n	8011790 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            mibGet->Param.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay2;
 80116a2:	4b3e      	ldr	r3, [pc, #248]	@ (801179c <LoRaMacMibGetRequestConfirm+0x344>)
 80116a4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80116a6:	687b      	ldr	r3, [r7, #4]
 80116a8:	605a      	str	r2, [r3, #4]
            break;
 80116aa:	e071      	b.n	8011790 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            mibGet->Param.JoinAcceptDelay1 = Nvm.MacGroup2.MacParams.JoinAcceptDelay1;
 80116ac:	4b3b      	ldr	r3, [pc, #236]	@ (801179c <LoRaMacMibGetRequestConfirm+0x344>)
 80116ae:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80116b0:	687b      	ldr	r3, [r7, #4]
 80116b2:	605a      	str	r2, [r3, #4]
            break;
 80116b4:	e06c      	b.n	8011790 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            mibGet->Param.JoinAcceptDelay2 = Nvm.MacGroup2.MacParams.JoinAcceptDelay2;
 80116b6:	4b39      	ldr	r3, [pc, #228]	@ (801179c <LoRaMacMibGetRequestConfirm+0x344>)
 80116b8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80116ba:	687b      	ldr	r3, [r7, #4]
 80116bc:	605a      	str	r2, [r3, #4]
            break;
 80116be:	e067      	b.n	8011790 <LoRaMacMibGetRequestConfirm+0x338>
        }
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
        case MIB_CHANNELS_MIN_TX_DATARATE:
        {
            getPhy.Attribute = PHY_MIN_TX_DR;
 80116c0:	2302      	movs	r3, #2
 80116c2:	743b      	strb	r3, [r7, #16]
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 80116c4:	4b35      	ldr	r3, [pc, #212]	@ (801179c <LoRaMacMibGetRequestConfirm+0x344>)
 80116c6:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 80116ca:	74bb      	strb	r3, [r7, #18]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80116cc:	4b33      	ldr	r3, [pc, #204]	@ (801179c <LoRaMacMibGetRequestConfirm+0x344>)
 80116ce:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80116d2:	f107 0210 	add.w	r2, r7, #16
 80116d6:	4611      	mov	r1, r2
 80116d8:	4618      	mov	r0, r3
 80116da:	f002 ff1f 	bl	801451c <RegionGetPhyParam>
 80116de:	4603      	mov	r3, r0
 80116e0:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsMinTxDatarate = phyParam.Value;
 80116e2:	68fb      	ldr	r3, [r7, #12]
 80116e4:	b25a      	sxtb	r2, r3
 80116e6:	687b      	ldr	r3, [r7, #4]
 80116e8:	711a      	strb	r2, [r3, #4]
            break;
 80116ea:	e051      	b.n	8011790 <LoRaMacMibGetRequestConfirm+0x338>
        }
#endif /* LORAMAC_VERSION */
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            mibGet->Param.ChannelsDefaultDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 80116ec:	4b2b      	ldr	r3, [pc, #172]	@ (801179c <LoRaMacMibGetRequestConfirm+0x344>)
 80116ee:	f993 20cd 	ldrsb.w	r2, [r3, #205]	@ 0xcd
 80116f2:	687b      	ldr	r3, [r7, #4]
 80116f4:	711a      	strb	r2, [r3, #4]
            break;
 80116f6:	e04b      	b.n	8011790 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_CHANNELS_DATARATE:
        {
            mibGet->Param.ChannelsDatarate = Nvm.MacGroup1.ChannelsDatarate;
 80116f8:	4b28      	ldr	r3, [pc, #160]	@ (801179c <LoRaMacMibGetRequestConfirm+0x344>)
 80116fa:	f993 2039 	ldrsb.w	r2, [r3, #57]	@ 0x39
 80116fe:	687b      	ldr	r3, [r7, #4]
 8011700:	711a      	strb	r2, [r3, #4]
            break;
 8011702:	e045      	b.n	8011790 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            mibGet->Param.ChannelsDefaultTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 8011704:	4b25      	ldr	r3, [pc, #148]	@ (801179c <LoRaMacMibGetRequestConfirm+0x344>)
 8011706:	f993 20cc 	ldrsb.w	r2, [r3, #204]	@ 0xcc
 801170a:	687b      	ldr	r3, [r7, #4]
 801170c:	711a      	strb	r2, [r3, #4]
            break;
 801170e:	e03f      	b.n	8011790 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_CHANNELS_TX_POWER:
        {
            mibGet->Param.ChannelsTxPower = Nvm.MacGroup1.ChannelsTxPower;
 8011710:	4b22      	ldr	r3, [pc, #136]	@ (801179c <LoRaMacMibGetRequestConfirm+0x344>)
 8011712:	f993 2038 	ldrsb.w	r2, [r3, #56]	@ 0x38
 8011716:	687b      	ldr	r3, [r7, #4]
 8011718:	711a      	strb	r2, [r3, #4]
            break;
 801171a:	e039      	b.n	8011790 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            mibGet->Param.SystemMaxRxError = Nvm.MacGroup2.MacParams.SystemMaxRxError;
 801171c:	4b1f      	ldr	r3, [pc, #124]	@ (801179c <LoRaMacMibGetRequestConfirm+0x344>)
 801171e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8011720:	687b      	ldr	r3, [r7, #4]
 8011722:	605a      	str	r2, [r3, #4]
            break;
 8011724:	e034      	b.n	8011790 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            mibGet->Param.MinRxSymbols = Nvm.MacGroup2.MacParams.MinRxSymbols;
 8011726:	4b1d      	ldr	r3, [pc, #116]	@ (801179c <LoRaMacMibGetRequestConfirm+0x344>)
 8011728:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 801172c:	687b      	ldr	r3, [r7, #4]
 801172e:	711a      	strb	r2, [r3, #4]
            break;
 8011730:	e02e      	b.n	8011790 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_ANTENNA_GAIN:
        {
            mibGet->Param.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 8011732:	4b1a      	ldr	r3, [pc, #104]	@ (801179c <LoRaMacMibGetRequestConfirm+0x344>)
 8011734:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8011736:	687b      	ldr	r3, [r7, #4]
 8011738:	605a      	str	r2, [r3, #4]
            break;
 801173a:	e029      	b.n	8011790 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_NVM_CTXS:
        {
            mibGet->Param.Contexts = &Nvm;
 801173c:	687b      	ldr	r3, [r7, #4]
 801173e:	4a17      	ldr	r2, [pc, #92]	@ (801179c <LoRaMacMibGetRequestConfirm+0x344>)
 8011740:	605a      	str	r2, [r3, #4]
            break;
 8011742:	e025      	b.n	8011790 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_NVM_BKP_CTXS:
        {
            mibGet->Param.BackupContexts = &NvmBackup;
 8011744:	687b      	ldr	r3, [r7, #4]
 8011746:	4a16      	ldr	r2, [pc, #88]	@ (80117a0 <LoRaMacMibGetRequestConfirm+0x348>)
 8011748:	605a      	str	r2, [r3, #4]
            break;
 801174a:	e021      	b.n	8011790 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            mibGet->Param.DefaultAntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 801174c:	4b13      	ldr	r3, [pc, #76]	@ (801179c <LoRaMacMibGetRequestConfirm+0x344>)
 801174e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8011752:	687b      	ldr	r3, [r7, #4]
 8011754:	605a      	str	r2, [r3, #4]
            break;
 8011756:	e01b      	b.n	8011790 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_LORAWAN_VERSION:
        {
            mibGet->Param.LrWanVersion.LoRaWan = Nvm.MacGroup2.Version;
 8011758:	687b      	ldr	r3, [r7, #4]
 801175a:	4a10      	ldr	r2, [pc, #64]	@ (801179c <LoRaMacMibGetRequestConfirm+0x344>)
 801175c:	f8d2 2118 	ldr.w	r2, [r2, #280]	@ 0x118
 8011760:	605a      	str	r2, [r3, #4]
            mibGet->Param.LrWanVersion.LoRaWanRegion = RegionGetVersion( );
 8011762:	687c      	ldr	r4, [r7, #4]
 8011764:	f003 f850 	bl	8014808 <RegionGetVersion>
 8011768:	60a0      	str	r0, [r4, #8]
            break;
 801176a:	e011      	b.n	8011790 <LoRaMacMibGetRequestConfirm+0x338>
        }
    case MIB_RXB_C_TIMEOUT:
        {
            mibGet->Param.RxBCTimeout = Nvm.MacGroup2.MacParams.RxBCTimeout;
 801176c:	4b0b      	ldr	r3, [pc, #44]	@ (801179c <LoRaMacMibGetRequestConfirm+0x344>)
 801176e:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8011772:	687b      	ldr	r3, [r7, #4]
 8011774:	605a      	str	r2, [r3, #4]
            break;
 8011776:	e00b      	b.n	8011790 <LoRaMacMibGetRequestConfirm+0x338>
        }
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
        case MIB_IS_CERT_FPORT_ON:
        {
            mibGet->Param.IsCertPortOn = Nvm.MacGroup2.IsCertPortOn;
 8011778:	4b08      	ldr	r3, [pc, #32]	@ (801179c <LoRaMacMibGetRequestConfirm+0x344>)
 801177a:	f893 210b 	ldrb.w	r2, [r3, #267]	@ 0x10b
 801177e:	687b      	ldr	r3, [r7, #4]
 8011780:	711a      	strb	r2, [r3, #4]
            break;
 8011782:	e005      	b.n	8011790 <LoRaMacMibGetRequestConfirm+0x338>
        }
#endif /* LORAMAC_VERSION */
        default:
        {
            status = LoRaMacClassBMibGetRequestConfirm( mibGet );
 8011784:	6878      	ldr	r0, [r7, #4]
 8011786:	f000 ffca 	bl	801271e <LoRaMacClassBMibGetRequestConfirm>
 801178a:	4603      	mov	r3, r0
 801178c:	75fb      	strb	r3, [r7, #23]
            break;
 801178e:	bf00      	nop
        }
    }
    return status;
 8011790:	7dfb      	ldrb	r3, [r7, #23]
}
 8011792:	4618      	mov	r0, r3
 8011794:	371c      	adds	r7, #28
 8011796:	46bd      	mov	sp, r7
 8011798:	bd90      	pop	{r4, r7, pc}
 801179a:	bf00      	nop
 801179c:	20000b90 	.word	0x20000b90
 80117a0:	2000110c 	.word	0x2000110c

080117a4 <LoRaMacMibSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibSetRequestConfirm( MibRequestConfirm_t* mibSet )
{
 80117a4:	b580      	push	{r7, lr}
 80117a6:	b086      	sub	sp, #24
 80117a8:	af00      	add	r7, sp, #0
 80117aa:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 80117ac:	2300      	movs	r3, #0
 80117ae:	75fb      	strb	r3, [r7, #23]
    ChanMaskSetParams_t chanMaskSet;
    VerifyParams_t verify;

    if( mibSet == NULL )
 80117b0:	687b      	ldr	r3, [r7, #4]
 80117b2:	2b00      	cmp	r3, #0
 80117b4:	d101      	bne.n	80117ba <LoRaMacMibSetRequestConfirm+0x16>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80117b6:	2303      	movs	r3, #3
 80117b8:	e35c      	b.n	8011e74 <LoRaMacMibSetRequestConfirm+0x6d0>
    }
    if( ( MacCtx.MacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING )
 80117ba:	4bb9      	ldr	r3, [pc, #740]	@ (8011aa0 <LoRaMacMibSetRequestConfirm+0x2fc>)
 80117bc:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 80117c0:	f003 0302 	and.w	r3, r3, #2
 80117c4:	2b00      	cmp	r3, #0
 80117c6:	d001      	beq.n	80117cc <LoRaMacMibSetRequestConfirm+0x28>
    {
        return LORAMAC_STATUS_BUSY;
 80117c8:	2301      	movs	r3, #1
 80117ca:	e353      	b.n	8011e74 <LoRaMacMibSetRequestConfirm+0x6d0>
    }

    switch( mibSet->Type )
 80117cc:	687b      	ldr	r3, [r7, #4]
 80117ce:	781b      	ldrb	r3, [r3, #0]
 80117d0:	2b39      	cmp	r3, #57	@ 0x39
 80117d2:	f200 8323 	bhi.w	8011e1c <LoRaMacMibSetRequestConfirm+0x678>
 80117d6:	a201      	add	r2, pc, #4	@ (adr r2, 80117dc <LoRaMacMibSetRequestConfirm+0x38>)
 80117d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80117dc:	080118c5 	.word	0x080118c5
 80117e0:	080118d5 	.word	0x080118d5
 80117e4:	080118ef 	.word	0x080118ef
 80117e8:	08011907 	.word	0x08011907
 80117ec:	0801191f 	.word	0x0801191f
 80117f0:	0801192b 	.word	0x0801192b
 80117f4:	08011937 	.word	0x08011937
 80117f8:	08011943 	.word	0x08011943
 80117fc:	08011969 	.word	0x08011969
 8011800:	0801198f 	.word	0x0801198f
 8011804:	080119b5 	.word	0x080119b5
 8011808:	080119db 	.word	0x080119db
 801180c:	08011a01 	.word	0x08011a01
 8011810:	08011a27 	.word	0x08011a27
 8011814:	08011a4d 	.word	0x08011a4d
 8011818:	08011a73 	.word	0x08011a73
 801181c:	08011a93 	.word	0x08011a93
 8011820:	08011e1d 	.word	0x08011e1d
 8011824:	08011aad 	.word	0x08011aad
 8011828:	08011b1d 	.word	0x08011b1d
 801182c:	08011b5d 	.word	0x08011b5d
 8011830:	08011bbf 	.word	0x08011bbf
 8011834:	08011c2f 	.word	0x08011c2f
 8011838:	08011bff 	.word	0x08011bff
 801183c:	08011c5f 	.word	0x08011c5f
 8011840:	08011c81 	.word	0x08011c81
 8011844:	08011c8b 	.word	0x08011c8b
 8011848:	08011c95 	.word	0x08011c95
 801184c:	08011c9f 	.word	0x08011c9f
 8011850:	08011ca9 	.word	0x08011ca9
 8011854:	08011e1d 	.word	0x08011e1d
 8011858:	08011cb3 	.word	0x08011cb3
 801185c:	08011ce5 	.word	0x08011ce5
 8011860:	08011d51 	.word	0x08011d51
 8011864:	08011d1f 	.word	0x08011d1f
 8011868:	08011d8d 	.word	0x08011d8d
 801186c:	08011da3 	.word	0x08011da3
 8011870:	08011dbb 	.word	0x08011dbb
 8011874:	08011dc5 	.word	0x08011dc5
 8011878:	08011dd1 	.word	0x08011dd1
 801187c:	08011e1d 	.word	0x08011e1d
 8011880:	08011ddb 	.word	0x08011ddb
 8011884:	08011e1d 	.word	0x08011e1d
 8011888:	08011e1d 	.word	0x08011e1d
 801188c:	08011e1d 	.word	0x08011e1d
 8011890:	08011e1d 	.word	0x08011e1d
 8011894:	08011e1d 	.word	0x08011e1d
 8011898:	08011e1d 	.word	0x08011e1d
 801189c:	08011e1d 	.word	0x08011e1d
 80118a0:	08011e1d 	.word	0x08011e1d
 80118a4:	08011e1d 	.word	0x08011e1d
 80118a8:	08011e1d 	.word	0x08011e1d
 80118ac:	08011e1d 	.word	0x08011e1d
 80118b0:	08011e1d 	.word	0x08011e1d
 80118b4:	08011e1d 	.word	0x08011e1d
 80118b8:	08011e1d 	.word	0x08011e1d
 80118bc:	08011e05 	.word	0x08011e05
 80118c0:	08011e11 	.word	0x08011e11
    {
        case MIB_DEVICE_CLASS:
        {
            status = SwitchClass( mibSet->Param.Class );
 80118c4:	687b      	ldr	r3, [r7, #4]
 80118c6:	791b      	ldrb	r3, [r3, #4]
 80118c8:	4618      	mov	r0, r3
 80118ca:	f7fd fb75 	bl	800efb8 <SwitchClass>
 80118ce:	4603      	mov	r3, r0
 80118d0:	75fb      	strb	r3, [r7, #23]
            break;
 80118d2:	e2c4      	b.n	8011e5e <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            if( mibSet->Param.NetworkActivation != ACTIVATION_TYPE_OTAA  )
 80118d4:	687b      	ldr	r3, [r7, #4]
 80118d6:	791b      	ldrb	r3, [r3, #4]
 80118d8:	2b02      	cmp	r3, #2
 80118da:	d005      	beq.n	80118e8 <LoRaMacMibSetRequestConfirm+0x144>
            {
                Nvm.MacGroup2.NetworkActivation = mibSet->Param.NetworkActivation;
 80118dc:	687b      	ldr	r3, [r7, #4]
 80118de:	791a      	ldrb	r2, [r3, #4]
 80118e0:	4b70      	ldr	r3, [pc, #448]	@ (8011aa4 <LoRaMacMibSetRequestConfirm+0x300>)
 80118e2:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c
            }
            else
            {   // Do not allow to set ACTIVATION_TYPE_OTAA since the MAC will set it automatically after a successful join process.
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 80118e6:	e2ba      	b.n	8011e5e <LoRaMacMibSetRequestConfirm+0x6ba>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80118e8:	2303      	movs	r3, #3
 80118ea:	75fb      	strb	r3, [r7, #23]
            break;
 80118ec:	e2b7      	b.n	8011e5e <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_DEV_EUI:
        {
            if( SecureElementSetDevEui( mibSet->Param.DevEui ) != SECURE_ELEMENT_SUCCESS )
 80118ee:	687b      	ldr	r3, [r7, #4]
 80118f0:	685b      	ldr	r3, [r3, #4]
 80118f2:	4618      	mov	r0, r3
 80118f4:	f7fa faa4 	bl	800be40 <SecureElementSetDevEui>
 80118f8:	4603      	mov	r3, r0
 80118fa:	2b00      	cmp	r3, #0
 80118fc:	f000 8294 	beq.w	8011e28 <LoRaMacMibSetRequestConfirm+0x684>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011900:	2303      	movs	r3, #3
 8011902:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8011904:	e290      	b.n	8011e28 <LoRaMacMibSetRequestConfirm+0x684>
        }
        case MIB_JOIN_EUI:
        {
            if( SecureElementSetJoinEui( mibSet->Param.JoinEui ) != SECURE_ELEMENT_SUCCESS )
 8011906:	687b      	ldr	r3, [r7, #4]
 8011908:	685b      	ldr	r3, [r3, #4]
 801190a:	4618      	mov	r0, r3
 801190c:	f7fa faba 	bl	800be84 <SecureElementSetJoinEui>
 8011910:	4603      	mov	r3, r0
 8011912:	2b00      	cmp	r3, #0
 8011914:	f000 828a 	beq.w	8011e2c <LoRaMacMibSetRequestConfirm+0x688>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011918:	2303      	movs	r3, #3
 801191a:	75fb      	strb	r3, [r7, #23]
            }
            break;
 801191c:	e286      	b.n	8011e2c <LoRaMacMibSetRequestConfirm+0x688>
        }
        case MIB_ADR:
        {
            Nvm.MacGroup2.AdrCtrlOn = mibSet->Param.AdrEnable;
 801191e:	687b      	ldr	r3, [r7, #4]
 8011920:	791a      	ldrb	r2, [r3, #4]
 8011922:	4b60      	ldr	r3, [pc, #384]	@ (8011aa4 <LoRaMacMibSetRequestConfirm+0x300>)
 8011924:	f883 2106 	strb.w	r2, [r3, #262]	@ 0x106
            break;
 8011928:	e299      	b.n	8011e5e <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_NET_ID:
        {
            Nvm.MacGroup2.NetID = mibSet->Param.NetID;
 801192a:	687b      	ldr	r3, [r7, #4]
 801192c:	685b      	ldr	r3, [r3, #4]
 801192e:	4a5d      	ldr	r2, [pc, #372]	@ (8011aa4 <LoRaMacMibSetRequestConfirm+0x300>)
 8011930:	f8c2 30d0 	str.w	r3, [r2, #208]	@ 0xd0
            break;
 8011934:	e293      	b.n	8011e5e <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_DEV_ADDR:
        {
            Nvm.MacGroup2.DevAddr = mibSet->Param.DevAddr;
 8011936:	687b      	ldr	r3, [r7, #4]
 8011938:	685b      	ldr	r3, [r3, #4]
 801193a:	4a5a      	ldr	r2, [pc, #360]	@ (8011aa4 <LoRaMacMibSetRequestConfirm+0x300>)
 801193c:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
            break;
 8011940:	e28d      	b.n	8011e5e <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_APP_KEY:
        {
            if( mibSet->Param.AppKey != NULL )
 8011942:	687b      	ldr	r3, [r7, #4]
 8011944:	685b      	ldr	r3, [r3, #4]
 8011946:	2b00      	cmp	r3, #0
 8011948:	d00b      	beq.n	8011962 <LoRaMacMibSetRequestConfirm+0x1be>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_KEY, mibSet->Param.AppKey ) )
 801194a:	687b      	ldr	r3, [r7, #4]
 801194c:	685b      	ldr	r3, [r3, #4]
 801194e:	4619      	mov	r1, r3
 8011950:	2000      	movs	r0, #0
 8011952:	f001 ffff 	bl	8013954 <LoRaMacCryptoSetKey>
 8011956:	4603      	mov	r3, r0
 8011958:	2b00      	cmp	r3, #0
 801195a:	f000 8269 	beq.w	8011e30 <LoRaMacMibSetRequestConfirm+0x68c>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 801195e:	2311      	movs	r3, #17
 8011960:	e288      	b.n	8011e74 <LoRaMacMibSetRequestConfirm+0x6d0>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011962:	2303      	movs	r3, #3
 8011964:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8011966:	e263      	b.n	8011e30 <LoRaMacMibSetRequestConfirm+0x68c>
        }
        case MIB_NWK_KEY:
        {
            if( mibSet->Param.NwkKey != NULL )
 8011968:	687b      	ldr	r3, [r7, #4]
 801196a:	685b      	ldr	r3, [r3, #4]
 801196c:	2b00      	cmp	r3, #0
 801196e:	d00b      	beq.n	8011988 <LoRaMacMibSetRequestConfirm+0x1e4>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_KEY, mibSet->Param.NwkKey ) )
 8011970:	687b      	ldr	r3, [r7, #4]
 8011972:	685b      	ldr	r3, [r3, #4]
 8011974:	4619      	mov	r1, r3
 8011976:	2001      	movs	r0, #1
 8011978:	f001 ffec 	bl	8013954 <LoRaMacCryptoSetKey>
 801197c:	4603      	mov	r3, r0
 801197e:	2b00      	cmp	r3, #0
 8011980:	f000 8258 	beq.w	8011e34 <LoRaMacMibSetRequestConfirm+0x690>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8011984:	2311      	movs	r3, #17
 8011986:	e275      	b.n	8011e74 <LoRaMacMibSetRequestConfirm+0x6d0>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011988:	2303      	movs	r3, #3
 801198a:	75fb      	strb	r3, [r7, #23]
            }
            break;
 801198c:	e252      	b.n	8011e34 <LoRaMacMibSetRequestConfirm+0x690>
            break;
        }
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        case MIB_NWK_S_KEY:
        {
            if( mibSet->Param.NwkSKey != NULL )
 801198e:	687b      	ldr	r3, [r7, #4]
 8011990:	685b      	ldr	r3, [r3, #4]
 8011992:	2b00      	cmp	r3, #0
 8011994:	d00b      	beq.n	80119ae <LoRaMacMibSetRequestConfirm+0x20a>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_S_KEY, mibSet->Param.NwkSKey ) )
 8011996:	687b      	ldr	r3, [r7, #4]
 8011998:	685b      	ldr	r3, [r3, #4]
 801199a:	4619      	mov	r1, r3
 801199c:	2002      	movs	r0, #2
 801199e:	f001 ffd9 	bl	8013954 <LoRaMacCryptoSetKey>
 80119a2:	4603      	mov	r3, r0
 80119a4:	2b00      	cmp	r3, #0
 80119a6:	f000 8247 	beq.w	8011e38 <LoRaMacMibSetRequestConfirm+0x694>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80119aa:	2311      	movs	r3, #17
 80119ac:	e262      	b.n	8011e74 <LoRaMacMibSetRequestConfirm+0x6d0>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80119ae:	2303      	movs	r3, #3
 80119b0:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80119b2:	e241      	b.n	8011e38 <LoRaMacMibSetRequestConfirm+0x694>
        }
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        case MIB_APP_S_KEY:
        {
            if( mibSet->Param.AppSKey != NULL )
 80119b4:	687b      	ldr	r3, [r7, #4]
 80119b6:	685b      	ldr	r3, [r3, #4]
 80119b8:	2b00      	cmp	r3, #0
 80119ba:	d00b      	beq.n	80119d4 <LoRaMacMibSetRequestConfirm+0x230>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_S_KEY, mibSet->Param.AppSKey ) )
 80119bc:	687b      	ldr	r3, [r7, #4]
 80119be:	685b      	ldr	r3, [r3, #4]
 80119c0:	4619      	mov	r1, r3
 80119c2:	2003      	movs	r0, #3
 80119c4:	f001 ffc6 	bl	8013954 <LoRaMacCryptoSetKey>
 80119c8:	4603      	mov	r3, r0
 80119ca:	2b00      	cmp	r3, #0
 80119cc:	f000 8236 	beq.w	8011e3c <LoRaMacMibSetRequestConfirm+0x698>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80119d0:	2311      	movs	r3, #17
 80119d2:	e24f      	b.n	8011e74 <LoRaMacMibSetRequestConfirm+0x6d0>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80119d4:	2303      	movs	r3, #3
 80119d6:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80119d8:	e230      	b.n	8011e3c <LoRaMacMibSetRequestConfirm+0x698>
        }
        case MIB_MC_KE_KEY:
        {
            if( mibSet->Param.McKEKey != NULL )
 80119da:	687b      	ldr	r3, [r7, #4]
 80119dc:	685b      	ldr	r3, [r3, #4]
 80119de:	2b00      	cmp	r3, #0
 80119e0:	d00b      	beq.n	80119fa <LoRaMacMibSetRequestConfirm+0x256>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KE_KEY, mibSet->Param.McKEKey ) )
 80119e2:	687b      	ldr	r3, [r7, #4]
 80119e4:	685b      	ldr	r3, [r3, #4]
 80119e6:	4619      	mov	r1, r3
 80119e8:	207f      	movs	r0, #127	@ 0x7f
 80119ea:	f001 ffb3 	bl	8013954 <LoRaMacCryptoSetKey>
 80119ee:	4603      	mov	r3, r0
 80119f0:	2b00      	cmp	r3, #0
 80119f2:	f000 8225 	beq.w	8011e40 <LoRaMacMibSetRequestConfirm+0x69c>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80119f6:	2311      	movs	r3, #17
 80119f8:	e23c      	b.n	8011e74 <LoRaMacMibSetRequestConfirm+0x6d0>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80119fa:	2303      	movs	r3, #3
 80119fc:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80119fe:	e21f      	b.n	8011e40 <LoRaMacMibSetRequestConfirm+0x69c>
        }
#if ( LORAMAC_MAX_MC_CTX > 0 ) /* ST_WORKAROUND: reduced LORAMAC_MAX_MC_CTX */
        case MIB_MC_KEY_0:
        {
            if( mibSet->Param.McKey0 != NULL )
 8011a00:	687b      	ldr	r3, [r7, #4]
 8011a02:	685b      	ldr	r3, [r3, #4]
 8011a04:	2b00      	cmp	r3, #0
 8011a06:	d00b      	beq.n	8011a20 <LoRaMacMibSetRequestConfirm+0x27c>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_0, mibSet->Param.McKey0 ) )
 8011a08:	687b      	ldr	r3, [r7, #4]
 8011a0a:	685b      	ldr	r3, [r3, #4]
 8011a0c:	4619      	mov	r1, r3
 8011a0e:	2080      	movs	r0, #128	@ 0x80
 8011a10:	f001 ffa0 	bl	8013954 <LoRaMacCryptoSetKey>
 8011a14:	4603      	mov	r3, r0
 8011a16:	2b00      	cmp	r3, #0
 8011a18:	f000 8214 	beq.w	8011e44 <LoRaMacMibSetRequestConfirm+0x6a0>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8011a1c:	2311      	movs	r3, #17
 8011a1e:	e229      	b.n	8011e74 <LoRaMacMibSetRequestConfirm+0x6d0>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011a20:	2303      	movs	r3, #3
 8011a22:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8011a24:	e20e      	b.n	8011e44 <LoRaMacMibSetRequestConfirm+0x6a0>
        }
        case MIB_MC_APP_S_KEY_0:
        {
            if( mibSet->Param.McAppSKey0 != NULL )
 8011a26:	687b      	ldr	r3, [r7, #4]
 8011a28:	685b      	ldr	r3, [r3, #4]
 8011a2a:	2b00      	cmp	r3, #0
 8011a2c:	d00b      	beq.n	8011a46 <LoRaMacMibSetRequestConfirm+0x2a2>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_0, mibSet->Param.McAppSKey0 ) )
 8011a2e:	687b      	ldr	r3, [r7, #4]
 8011a30:	685b      	ldr	r3, [r3, #4]
 8011a32:	4619      	mov	r1, r3
 8011a34:	2081      	movs	r0, #129	@ 0x81
 8011a36:	f001 ff8d 	bl	8013954 <LoRaMacCryptoSetKey>
 8011a3a:	4603      	mov	r3, r0
 8011a3c:	2b00      	cmp	r3, #0
 8011a3e:	f000 8203 	beq.w	8011e48 <LoRaMacMibSetRequestConfirm+0x6a4>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8011a42:	2311      	movs	r3, #17
 8011a44:	e216      	b.n	8011e74 <LoRaMacMibSetRequestConfirm+0x6d0>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011a46:	2303      	movs	r3, #3
 8011a48:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8011a4a:	e1fd      	b.n	8011e48 <LoRaMacMibSetRequestConfirm+0x6a4>
        }
        case MIB_MC_NWK_S_KEY_0:
        {
            if( mibSet->Param.McNwkSKey0 != NULL )
 8011a4c:	687b      	ldr	r3, [r7, #4]
 8011a4e:	685b      	ldr	r3, [r3, #4]
 8011a50:	2b00      	cmp	r3, #0
 8011a52:	d00b      	beq.n	8011a6c <LoRaMacMibSetRequestConfirm+0x2c8>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_0, mibSet->Param.McNwkSKey0 ) )
 8011a54:	687b      	ldr	r3, [r7, #4]
 8011a56:	685b      	ldr	r3, [r3, #4]
 8011a58:	4619      	mov	r1, r3
 8011a5a:	2082      	movs	r0, #130	@ 0x82
 8011a5c:	f001 ff7a 	bl	8013954 <LoRaMacCryptoSetKey>
 8011a60:	4603      	mov	r3, r0
 8011a62:	2b00      	cmp	r3, #0
 8011a64:	f000 81f2 	beq.w	8011e4c <LoRaMacMibSetRequestConfirm+0x6a8>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8011a68:	2311      	movs	r3, #17
 8011a6a:	e203      	b.n	8011e74 <LoRaMacMibSetRequestConfirm+0x6d0>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011a6c:	2303      	movs	r3, #3
 8011a6e:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8011a70:	e1ec      	b.n	8011e4c <LoRaMacMibSetRequestConfirm+0x6a8>
            break;
        }
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        case MIB_PUBLIC_NETWORK:
        {
            Nvm.MacGroup2.PublicNetwork = mibSet->Param.EnablePublicNetwork;
 8011a72:	687b      	ldr	r3, [r7, #4]
 8011a74:	791a      	ldrb	r2, [r3, #4]
 8011a76:	4b0b      	ldr	r3, [pc, #44]	@ (8011aa4 <LoRaMacMibSetRequestConfirm+0x300>)
 8011a78:	f883 2105 	strb.w	r2, [r3, #261]	@ 0x105
            Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 8011a7c:	4b0a      	ldr	r3, [pc, #40]	@ (8011aa8 <LoRaMacMibSetRequestConfirm+0x304>)
 8011a7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8011a80:	4a08      	ldr	r2, [pc, #32]	@ (8011aa4 <LoRaMacMibSetRequestConfirm+0x300>)
 8011a82:	f892 2105 	ldrb.w	r2, [r2, #261]	@ 0x105
 8011a86:	4610      	mov	r0, r2
 8011a88:	4798      	blx	r3
            /* ST_WORAROUND_BEGIN: Required to avoid keeping the radio active after init */
            Radio.Sleep( );
 8011a8a:	4b07      	ldr	r3, [pc, #28]	@ (8011aa8 <LoRaMacMibSetRequestConfirm+0x304>)
 8011a8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011a8e:	4798      	blx	r3
            /* ST_WORKAROUND_END */
            break;
 8011a90:	e1e5      	b.n	8011e5e <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        /* ST_WORKAROUND_BEGIN: Keep repeater feature */
        case MIB_REPEATER_SUPPORT:
        {
            Nvm.MacGroup2.MacParams.RepeaterSupport = mibSet->Param.EnableRepeaterSupport;
 8011a92:	687b      	ldr	r3, [r7, #4]
 8011a94:	791a      	ldrb	r2, [r3, #4]
 8011a96:	4b03      	ldr	r3, [pc, #12]	@ (8011aa4 <LoRaMacMibSetRequestConfirm+0x300>)
 8011a98:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
            break;
 8011a9c:	e1df      	b.n	8011e5e <LoRaMacMibSetRequestConfirm+0x6ba>
 8011a9e:	bf00      	nop
 8011aa0:	20000670 	.word	0x20000670
 8011aa4:	20000b90 	.word	0x20000b90
 8011aa8:	0801c57c 	.word	0x0801c57c
        }
        /* ST_WORKAROUND_END */
        case MIB_RX2_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 8011aac:	687b      	ldr	r3, [r7, #4]
 8011aae:	7a1b      	ldrb	r3, [r3, #8]
 8011ab0:	b25b      	sxtb	r3, r3
 8011ab2:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8011ab4:	4bb3      	ldr	r3, [pc, #716]	@ (8011d84 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8011ab6:	f893 3075 	ldrb.w	r3, [r3, #117]	@ 0x75
 8011aba:	727b      	strb	r3, [r7, #9]
            /* ST_WORAROUND_BEGIN: Check also the Rx Frequency parameter */
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) != true )
 8011abc:	4bb1      	ldr	r3, [pc, #708]	@ (8011d84 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8011abe:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8011ac2:	f107 0108 	add.w	r1, r7, #8
 8011ac6:	2207      	movs	r2, #7
 8011ac8:	4618      	mov	r0, r3
 8011aca:	f002 fd62 	bl	8014592 <RegionVerify>
 8011ace:	4603      	mov	r3, r0
 8011ad0:	f083 0301 	eor.w	r3, r3, #1
 8011ad4:	b2db      	uxtb	r3, r3
 8011ad6:	2b00      	cmp	r3, #0
 8011ad8:	d002      	beq.n	8011ae0 <LoRaMacMibSetRequestConfirm+0x33c>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011ada:	2303      	movs	r3, #3
 8011adc:	75fb      	strb	r3, [r7, #23]
                {
                    Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
                }
            }
            /* ST_WORKAROUND_END */
            break;
 8011ade:	e1be      	b.n	8011e5e <LoRaMacMibSetRequestConfirm+0x6ba>
                verify.Frequency = mibSet->Param.Rx2Channel.Frequency;
 8011ae0:	687b      	ldr	r3, [r7, #4]
 8011ae2:	685b      	ldr	r3, [r3, #4]
 8011ae4:	60bb      	str	r3, [r7, #8]
                if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_FREQUENCY ) != true )
 8011ae6:	4ba7      	ldr	r3, [pc, #668]	@ (8011d84 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8011ae8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8011aec:	f107 0108 	add.w	r1, r7, #8
 8011af0:	2200      	movs	r2, #0
 8011af2:	4618      	mov	r0, r3
 8011af4:	f002 fd4d 	bl	8014592 <RegionVerify>
 8011af8:	4603      	mov	r3, r0
 8011afa:	f083 0301 	eor.w	r3, r3, #1
 8011afe:	b2db      	uxtb	r3, r3
 8011b00:	2b00      	cmp	r3, #0
 8011b02:	d002      	beq.n	8011b0a <LoRaMacMibSetRequestConfirm+0x366>
                    status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011b04:	2303      	movs	r3, #3
 8011b06:	75fb      	strb	r3, [r7, #23]
            break;
 8011b08:	e1a9      	b.n	8011e5e <LoRaMacMibSetRequestConfirm+0x6ba>
                    Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
 8011b0a:	4b9e      	ldr	r3, [pc, #632]	@ (8011d84 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8011b0c:	687a      	ldr	r2, [r7, #4]
 8011b0e:	3364      	adds	r3, #100	@ 0x64
 8011b10:	3204      	adds	r2, #4
 8011b12:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011b16:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8011b1a:	e1a0      	b.n	8011e5e <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 8011b1c:	687b      	ldr	r3, [r7, #4]
 8011b1e:	7a1b      	ldrb	r3, [r3, #8]
 8011b20:	b25b      	sxtb	r3, r3
 8011b22:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8011b24:	4b97      	ldr	r3, [pc, #604]	@ (8011d84 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8011b26:	f893 3075 	ldrb.w	r3, [r3, #117]	@ 0x75
 8011b2a:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 8011b2c:	4b95      	ldr	r3, [pc, #596]	@ (8011d84 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8011b2e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8011b32:	f107 0108 	add.w	r1, r7, #8
 8011b36:	2207      	movs	r2, #7
 8011b38:	4618      	mov	r0, r3
 8011b3a:	f002 fd2a 	bl	8014592 <RegionVerify>
 8011b3e:	4603      	mov	r3, r0
 8011b40:	2b00      	cmp	r3, #0
 8011b42:	d008      	beq.n	8011b56 <LoRaMacMibSetRequestConfirm+0x3b2>
            {
                Nvm.MacGroup2.MacParamsDefaults.Rx2Channel = mibSet->Param.Rx2DefaultChannel;
 8011b44:	4b8f      	ldr	r3, [pc, #572]	@ (8011d84 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8011b46:	687a      	ldr	r2, [r7, #4]
 8011b48:	33a8      	adds	r3, #168	@ 0xa8
 8011b4a:	3204      	adds	r2, #4
 8011b4c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011b50:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8011b54:	e183      	b.n	8011e5e <LoRaMacMibSetRequestConfirm+0x6ba>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011b56:	2303      	movs	r3, #3
 8011b58:	75fb      	strb	r3, [r7, #23]
            break;
 8011b5a:	e180      	b.n	8011e5e <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_RXC_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 8011b5c:	687b      	ldr	r3, [r7, #4]
 8011b5e:	7a1b      	ldrb	r3, [r3, #8]
 8011b60:	b25b      	sxtb	r3, r3
 8011b62:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8011b64:	4b87      	ldr	r3, [pc, #540]	@ (8011d84 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8011b66:	f893 3075 	ldrb.w	r3, [r3, #117]	@ 0x75
 8011b6a:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 8011b6c:	4b85      	ldr	r3, [pc, #532]	@ (8011d84 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8011b6e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8011b72:	f107 0108 	add.w	r1, r7, #8
 8011b76:	2207      	movs	r2, #7
 8011b78:	4618      	mov	r0, r3
 8011b7a:	f002 fd0a 	bl	8014592 <RegionVerify>
 8011b7e:	4603      	mov	r3, r0
 8011b80:	2b00      	cmp	r3, #0
 8011b82:	d019      	beq.n	8011bb8 <LoRaMacMibSetRequestConfirm+0x414>
            {
                Nvm.MacGroup2.MacParams.RxCChannel = mibSet->Param.RxCChannel;
 8011b84:	4b7f      	ldr	r3, [pc, #508]	@ (8011d84 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8011b86:	687a      	ldr	r2, [r7, #4]
 8011b88:	336c      	adds	r3, #108	@ 0x6c
 8011b8a:	3204      	adds	r2, #4
 8011b8c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011b90:	e883 0003 	stmia.w	r3, {r0, r1}

                if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) && ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) )
 8011b94:	4b7b      	ldr	r3, [pc, #492]	@ (8011d84 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8011b96:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 8011b9a:	2b02      	cmp	r3, #2
 8011b9c:	f040 8158 	bne.w	8011e50 <LoRaMacMibSetRequestConfirm+0x6ac>
 8011ba0:	4b78      	ldr	r3, [pc, #480]	@ (8011d84 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8011ba2:	f893 311c 	ldrb.w	r3, [r3, #284]	@ 0x11c
 8011ba6:	2b00      	cmp	r3, #0
 8011ba8:	f000 8152 	beq.w	8011e50 <LoRaMacMibSetRequestConfirm+0x6ac>
                {
                    // We can only compute the RX window parameters directly, if we are already
                    // in class c mode and joined. We cannot setup an RX window in case of any other
                    // class type.
                    // Set the radio into sleep mode in case we are still in RX mode
                    Radio.Sleep( );
 8011bac:	4b76      	ldr	r3, [pc, #472]	@ (8011d88 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8011bae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011bb0:	4798      	blx	r3

                    OpenContinuousRxCWindow( );
 8011bb2:	f7fe fca7 	bl	8010504 <OpenContinuousRxCWindow>
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8011bb6:	e14b      	b.n	8011e50 <LoRaMacMibSetRequestConfirm+0x6ac>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011bb8:	2303      	movs	r3, #3
 8011bba:	75fb      	strb	r3, [r7, #23]
            break;
 8011bbc:	e148      	b.n	8011e50 <LoRaMacMibSetRequestConfirm+0x6ac>
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 8011bbe:	687b      	ldr	r3, [r7, #4]
 8011bc0:	7a1b      	ldrb	r3, [r3, #8]
 8011bc2:	b25b      	sxtb	r3, r3
 8011bc4:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8011bc6:	4b6f      	ldr	r3, [pc, #444]	@ (8011d84 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8011bc8:	f893 3075 	ldrb.w	r3, [r3, #117]	@ 0x75
 8011bcc:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 8011bce:	4b6d      	ldr	r3, [pc, #436]	@ (8011d84 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8011bd0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8011bd4:	f107 0108 	add.w	r1, r7, #8
 8011bd8:	2207      	movs	r2, #7
 8011bda:	4618      	mov	r0, r3
 8011bdc:	f002 fcd9 	bl	8014592 <RegionVerify>
 8011be0:	4603      	mov	r3, r0
 8011be2:	2b00      	cmp	r3, #0
 8011be4:	d008      	beq.n	8011bf8 <LoRaMacMibSetRequestConfirm+0x454>
            {
                Nvm.MacGroup2.MacParamsDefaults.RxCChannel = mibSet->Param.RxCDefaultChannel;
 8011be6:	4b67      	ldr	r3, [pc, #412]	@ (8011d84 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8011be8:	687a      	ldr	r2, [r7, #4]
 8011bea:	33b0      	adds	r3, #176	@ 0xb0
 8011bec:	3204      	adds	r2, #4
 8011bee:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011bf2:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8011bf6:	e132      	b.n	8011e5e <LoRaMacMibSetRequestConfirm+0x6ba>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011bf8:	2303      	movs	r3, #3
 8011bfa:	75fb      	strb	r3, [r7, #23]
            break;
 8011bfc:	e12f      	b.n	8011e5e <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsDefaultMask;
 8011bfe:	687b      	ldr	r3, [r7, #4]
 8011c00:	685b      	ldr	r3, [r3, #4]
 8011c02:	60fb      	str	r3, [r7, #12]
            chanMaskSet.ChannelsMaskType = CHANNELS_DEFAULT_MASK;
 8011c04:	2301      	movs	r3, #1
 8011c06:	743b      	strb	r3, [r7, #16]

            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 8011c08:	4b5e      	ldr	r3, [pc, #376]	@ (8011d84 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8011c0a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8011c0e:	f107 020c 	add.w	r2, r7, #12
 8011c12:	4611      	mov	r1, r2
 8011c14:	4618      	mov	r0, r3
 8011c16:	f002 fce5 	bl	80145e4 <RegionChanMaskSet>
 8011c1a:	4603      	mov	r3, r0
 8011c1c:	f083 0301 	eor.w	r3, r3, #1
 8011c20:	b2db      	uxtb	r3, r3
 8011c22:	2b00      	cmp	r3, #0
 8011c24:	f000 8116 	beq.w	8011e54 <LoRaMacMibSetRequestConfirm+0x6b0>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011c28:	2303      	movs	r3, #3
 8011c2a:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8011c2c:	e112      	b.n	8011e54 <LoRaMacMibSetRequestConfirm+0x6b0>
        }
        case MIB_CHANNELS_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsMask;
 8011c2e:	687b      	ldr	r3, [r7, #4]
 8011c30:	685b      	ldr	r3, [r3, #4]
 8011c32:	60fb      	str	r3, [r7, #12]
            chanMaskSet.ChannelsMaskType = CHANNELS_MASK;
 8011c34:	2300      	movs	r3, #0
 8011c36:	743b      	strb	r3, [r7, #16]

            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 8011c38:	4b52      	ldr	r3, [pc, #328]	@ (8011d84 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8011c3a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8011c3e:	f107 020c 	add.w	r2, r7, #12
 8011c42:	4611      	mov	r1, r2
 8011c44:	4618      	mov	r0, r3
 8011c46:	f002 fccd 	bl	80145e4 <RegionChanMaskSet>
 8011c4a:	4603      	mov	r3, r0
 8011c4c:	f083 0301 	eor.w	r3, r3, #1
 8011c50:	b2db      	uxtb	r3, r3
 8011c52:	2b00      	cmp	r3, #0
 8011c54:	f000 8100 	beq.w	8011e58 <LoRaMacMibSetRequestConfirm+0x6b4>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011c58:	2303      	movs	r3, #3
 8011c5a:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8011c5c:	e0fc      	b.n	8011e58 <LoRaMacMibSetRequestConfirm+0x6b4>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 8011c5e:	687b      	ldr	r3, [r7, #4]
 8011c60:	791b      	ldrb	r3, [r3, #4]
 8011c62:	2b00      	cmp	r3, #0
 8011c64:	d009      	beq.n	8011c7a <LoRaMacMibSetRequestConfirm+0x4d6>
                ( mibSet->Param.ChannelsNbTrans <= 15 ) )
 8011c66:	687b      	ldr	r3, [r7, #4]
 8011c68:	791b      	ldrb	r3, [r3, #4]
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 8011c6a:	2b0f      	cmp	r3, #15
 8011c6c:	d805      	bhi.n	8011c7a <LoRaMacMibSetRequestConfirm+0x4d6>
            {
                Nvm.MacGroup2.MacParams.ChannelsNbTrans = mibSet->Param.ChannelsNbTrans;
 8011c6e:	687b      	ldr	r3, [r7, #4]
 8011c70:	791a      	ldrb	r2, [r3, #4]
 8011c72:	4b44      	ldr	r3, [pc, #272]	@ (8011d84 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8011c74:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8011c78:	e0f1      	b.n	8011e5e <LoRaMacMibSetRequestConfirm+0x6ba>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011c7a:	2303      	movs	r3, #3
 8011c7c:	75fb      	strb	r3, [r7, #23]
            break;
 8011c7e:	e0ee      	b.n	8011e5e <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            Nvm.MacGroup2.MacParams.MaxRxWindow = mibSet->Param.MaxRxWindow;
 8011c80:	687b      	ldr	r3, [r7, #4]
 8011c82:	685b      	ldr	r3, [r3, #4]
 8011c84:	4a3f      	ldr	r2, [pc, #252]	@ (8011d84 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8011c86:	64d3      	str	r3, [r2, #76]	@ 0x4c
            break;
 8011c88:	e0e9      	b.n	8011e5e <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            Nvm.MacGroup2.MacParams.ReceiveDelay1 = mibSet->Param.ReceiveDelay1;
 8011c8a:	687b      	ldr	r3, [r7, #4]
 8011c8c:	685b      	ldr	r3, [r3, #4]
 8011c8e:	4a3d      	ldr	r2, [pc, #244]	@ (8011d84 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8011c90:	6513      	str	r3, [r2, #80]	@ 0x50
            break;
 8011c92:	e0e4      	b.n	8011e5e <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            Nvm.MacGroup2.MacParams.ReceiveDelay2 = mibSet->Param.ReceiveDelay2;
 8011c94:	687b      	ldr	r3, [r7, #4]
 8011c96:	685b      	ldr	r3, [r3, #4]
 8011c98:	4a3a      	ldr	r2, [pc, #232]	@ (8011d84 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8011c9a:	6553      	str	r3, [r2, #84]	@ 0x54
            break;
 8011c9c:	e0df      	b.n	8011e5e <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = mibSet->Param.JoinAcceptDelay1;
 8011c9e:	687b      	ldr	r3, [r7, #4]
 8011ca0:	685b      	ldr	r3, [r3, #4]
 8011ca2:	4a38      	ldr	r2, [pc, #224]	@ (8011d84 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8011ca4:	6593      	str	r3, [r2, #88]	@ 0x58
            break;
 8011ca6:	e0da      	b.n	8011e5e <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = mibSet->Param.JoinAcceptDelay2;
 8011ca8:	687b      	ldr	r3, [r7, #4]
 8011caa:	685b      	ldr	r3, [r3, #4]
 8011cac:	4a35      	ldr	r2, [pc, #212]	@ (8011d84 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8011cae:	65d3      	str	r3, [r2, #92]	@ 0x5c
            break;
 8011cb0:	e0d5      	b.n	8011e5e <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDefaultDatarate;
 8011cb2:	687b      	ldr	r3, [r7, #4]
 8011cb4:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8011cb8:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_DR ) == true )
 8011cba:	4b32      	ldr	r3, [pc, #200]	@ (8011d84 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8011cbc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8011cc0:	f107 0108 	add.w	r1, r7, #8
 8011cc4:	2206      	movs	r2, #6
 8011cc6:	4618      	mov	r0, r3
 8011cc8:	f002 fc63 	bl	8014592 <RegionVerify>
 8011ccc:	4603      	mov	r3, r0
 8011cce:	2b00      	cmp	r3, #0
 8011cd0:	d005      	beq.n	8011cde <LoRaMacMibSetRequestConfirm+0x53a>
            {
                Nvm.MacGroup2.ChannelsDatarateDefault = verify.DatarateParams.Datarate;
 8011cd2:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8011cd6:	4b2b      	ldr	r3, [pc, #172]	@ (8011d84 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8011cd8:	f883 20cd 	strb.w	r2, [r3, #205]	@ 0xcd
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8011cdc:	e0bf      	b.n	8011e5e <LoRaMacMibSetRequestConfirm+0x6ba>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011cde:	2303      	movs	r3, #3
 8011ce0:	75fb      	strb	r3, [r7, #23]
            break;
 8011ce2:	e0bc      	b.n	8011e5e <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_CHANNELS_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDatarate;
 8011ce4:	687b      	ldr	r3, [r7, #4]
 8011ce6:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8011cea:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8011cec:	4b25      	ldr	r3, [pc, #148]	@ (8011d84 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8011cee:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 8011cf2:	72bb      	strb	r3, [r7, #10]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 8011cf4:	4b23      	ldr	r3, [pc, #140]	@ (8011d84 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8011cf6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8011cfa:	f107 0108 	add.w	r1, r7, #8
 8011cfe:	2205      	movs	r2, #5
 8011d00:	4618      	mov	r0, r3
 8011d02:	f002 fc46 	bl	8014592 <RegionVerify>
 8011d06:	4603      	mov	r3, r0
 8011d08:	2b00      	cmp	r3, #0
 8011d0a:	d005      	beq.n	8011d18 <LoRaMacMibSetRequestConfirm+0x574>
            {
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 8011d0c:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8011d10:	4b1c      	ldr	r3, [pc, #112]	@ (8011d84 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8011d12:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8011d16:	e0a2      	b.n	8011e5e <LoRaMacMibSetRequestConfirm+0x6ba>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011d18:	2303      	movs	r3, #3
 8011d1a:	75fb      	strb	r3, [r7, #23]
            break;
 8011d1c:	e09f      	b.n	8011e5e <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsDefaultTxPower;
 8011d1e:	687b      	ldr	r3, [r7, #4]
 8011d20:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8011d24:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_POWER ) == true )
 8011d26:	4b17      	ldr	r3, [pc, #92]	@ (8011d84 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8011d28:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8011d2c:	f107 0108 	add.w	r1, r7, #8
 8011d30:	220a      	movs	r2, #10
 8011d32:	4618      	mov	r0, r3
 8011d34:	f002 fc2d 	bl	8014592 <RegionVerify>
 8011d38:	4603      	mov	r3, r0
 8011d3a:	2b00      	cmp	r3, #0
 8011d3c:	d005      	beq.n	8011d4a <LoRaMacMibSetRequestConfirm+0x5a6>
            {
                Nvm.MacGroup2.ChannelsTxPowerDefault = verify.TxPower;
 8011d3e:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8011d42:	4b10      	ldr	r3, [pc, #64]	@ (8011d84 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8011d44:	f883 20cc 	strb.w	r2, [r3, #204]	@ 0xcc
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8011d48:	e089      	b.n	8011e5e <LoRaMacMibSetRequestConfirm+0x6ba>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011d4a:	2303      	movs	r3, #3
 8011d4c:	75fb      	strb	r3, [r7, #23]
            break;
 8011d4e:	e086      	b.n	8011e5e <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_CHANNELS_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsTxPower;
 8011d50:	687b      	ldr	r3, [r7, #4]
 8011d52:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8011d56:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_POWER ) == true )
 8011d58:	4b0a      	ldr	r3, [pc, #40]	@ (8011d84 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8011d5a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8011d5e:	f107 0108 	add.w	r1, r7, #8
 8011d62:	2209      	movs	r2, #9
 8011d64:	4618      	mov	r0, r3
 8011d66:	f002 fc14 	bl	8014592 <RegionVerify>
 8011d6a:	4603      	mov	r3, r0
 8011d6c:	2b00      	cmp	r3, #0
 8011d6e:	d005      	beq.n	8011d7c <LoRaMacMibSetRequestConfirm+0x5d8>
            {
                Nvm.MacGroup1.ChannelsTxPower = verify.TxPower;
 8011d70:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8011d74:	4b03      	ldr	r3, [pc, #12]	@ (8011d84 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8011d76:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8011d7a:	e070      	b.n	8011e5e <LoRaMacMibSetRequestConfirm+0x6ba>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011d7c:	2303      	movs	r3, #3
 8011d7e:	75fb      	strb	r3, [r7, #23]
            break;
 8011d80:	e06d      	b.n	8011e5e <LoRaMacMibSetRequestConfirm+0x6ba>
 8011d82:	bf00      	nop
 8011d84:	20000b90 	.word	0x20000b90
 8011d88:	0801c57c 	.word	0x0801c57c
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = mibSet->Param.SystemMaxRxError;
 8011d8c:	687b      	ldr	r3, [r7, #4]
 8011d8e:	685b      	ldr	r3, [r3, #4]
 8011d90:	4a3a      	ldr	r2, [pc, #232]	@ (8011e7c <LoRaMacMibSetRequestConfirm+0x6d8>)
 8011d92:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 8011d96:	4b39      	ldr	r3, [pc, #228]	@ (8011e7c <LoRaMacMibSetRequestConfirm+0x6d8>)
 8011d98:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8011d9c:	4a37      	ldr	r2, [pc, #220]	@ (8011e7c <LoRaMacMibSetRequestConfirm+0x6d8>)
 8011d9e:	6453      	str	r3, [r2, #68]	@ 0x44
            break;
 8011da0:	e05d      	b.n	8011e5e <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = mibSet->Param.MinRxSymbols;
 8011da2:	687b      	ldr	r3, [r7, #4]
 8011da4:	791a      	ldrb	r2, [r3, #4]
 8011da6:	4b35      	ldr	r3, [pc, #212]	@ (8011e7c <LoRaMacMibSetRequestConfirm+0x6d8>)
 8011da8:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c
 8011dac:	4b33      	ldr	r3, [pc, #204]	@ (8011e7c <LoRaMacMibSetRequestConfirm+0x6d8>)
 8011dae:	f893 208c 	ldrb.w	r2, [r3, #140]	@ 0x8c
 8011db2:	4b32      	ldr	r3, [pc, #200]	@ (8011e7c <LoRaMacMibSetRequestConfirm+0x6d8>)
 8011db4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
            break;
 8011db8:	e051      	b.n	8011e5e <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_ANTENNA_GAIN:
        {
            Nvm.MacGroup2.MacParams.AntennaGain = mibSet->Param.AntennaGain;
 8011dba:	687b      	ldr	r3, [r7, #4]
 8011dbc:	685b      	ldr	r3, [r3, #4]
 8011dbe:	4a2f      	ldr	r2, [pc, #188]	@ (8011e7c <LoRaMacMibSetRequestConfirm+0x6d8>)
 8011dc0:	67d3      	str	r3, [r2, #124]	@ 0x7c
            break;
 8011dc2:	e04c      	b.n	8011e5e <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            Nvm.MacGroup2.MacParamsDefaults.AntennaGain = mibSet->Param.DefaultAntennaGain;
 8011dc4:	687b      	ldr	r3, [r7, #4]
 8011dc6:	685b      	ldr	r3, [r3, #4]
 8011dc8:	4a2c      	ldr	r2, [pc, #176]	@ (8011e7c <LoRaMacMibSetRequestConfirm+0x6d8>)
 8011dca:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
            break;
 8011dce:	e046      	b.n	8011e5e <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_NVM_CTXS:
        {
            status = RestoreNvmData( );
 8011dd0:	f7fe fdc8 	bl	8010964 <RestoreNvmData>
 8011dd4:	4603      	mov	r3, r0
 8011dd6:	75fb      	strb	r3, [r7, #23]
            break;
 8011dd8:	e041      	b.n	8011e5e <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_ABP_LORAWAN_VERSION:
        {
            if( mibSet->Param.AbpLrWanVersion.Fields.Minor <= 1 )
 8011dda:	687b      	ldr	r3, [r7, #4]
 8011ddc:	799b      	ldrb	r3, [r3, #6]
 8011dde:	2b01      	cmp	r3, #1
 8011de0:	d80d      	bhi.n	8011dfe <LoRaMacMibSetRequestConfirm+0x65a>
            {
                Nvm.MacGroup2.Version = mibSet->Param.AbpLrWanVersion;
 8011de2:	4a26      	ldr	r2, [pc, #152]	@ (8011e7c <LoRaMacMibSetRequestConfirm+0x6d8>)
 8011de4:	687b      	ldr	r3, [r7, #4]
 8011de6:	685b      	ldr	r3, [r3, #4]
 8011de8:	f8c2 3118 	str.w	r3, [r2, #280]	@ 0x118

                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetLrWanVersion( mibSet->Param.AbpLrWanVersion ) )
 8011dec:	687b      	ldr	r3, [r7, #4]
 8011dee:	6858      	ldr	r0, [r3, #4]
 8011df0:	f001 fd14 	bl	801381c <LoRaMacCryptoSetLrWanVersion>
 8011df4:	4603      	mov	r3, r0
 8011df6:	2b00      	cmp	r3, #0
 8011df8:	d030      	beq.n	8011e5c <LoRaMacMibSetRequestConfirm+0x6b8>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8011dfa:	2311      	movs	r3, #17
 8011dfc:	e03a      	b.n	8011e74 <LoRaMacMibSetRequestConfirm+0x6d0>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011dfe:	2303      	movs	r3, #3
 8011e00:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8011e02:	e02b      	b.n	8011e5c <LoRaMacMibSetRequestConfirm+0x6b8>
        }
        case MIB_RXB_C_TIMEOUT:
        {
            Nvm.MacGroup2.MacParams.RxBCTimeout = mibSet->Param.RxBCTimeout;
 8011e04:	687b      	ldr	r3, [r7, #4]
 8011e06:	685b      	ldr	r3, [r3, #4]
 8011e08:	4a1c      	ldr	r2, [pc, #112]	@ (8011e7c <LoRaMacMibSetRequestConfirm+0x6d8>)
 8011e0a:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
            break;
 8011e0e:	e026      	b.n	8011e5e <LoRaMacMibSetRequestConfirm+0x6ba>
        }
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
        case MIB_IS_CERT_FPORT_ON:
        {
            Nvm.MacGroup2.IsCertPortOn = mibSet->Param.IsCertPortOn;
 8011e10:	687b      	ldr	r3, [r7, #4]
 8011e12:	791a      	ldrb	r2, [r3, #4]
 8011e14:	4b19      	ldr	r3, [pc, #100]	@ (8011e7c <LoRaMacMibSetRequestConfirm+0x6d8>)
 8011e16:	f883 210b 	strb.w	r2, [r3, #267]	@ 0x10b
            break;
 8011e1a:	e020      	b.n	8011e5e <LoRaMacMibSetRequestConfirm+0x6ba>
        }
#endif /* LORAMAC_VERSION */
        default:
        {
            status = LoRaMacMibClassBSetRequestConfirm( mibSet );
 8011e1c:	6878      	ldr	r0, [r7, #4]
 8011e1e:	f000 fc88 	bl	8012732 <LoRaMacMibClassBSetRequestConfirm>
 8011e22:	4603      	mov	r3, r0
 8011e24:	75fb      	strb	r3, [r7, #23]
            break;
 8011e26:	e01a      	b.n	8011e5e <LoRaMacMibSetRequestConfirm+0x6ba>
            break;
 8011e28:	bf00      	nop
 8011e2a:	e018      	b.n	8011e5e <LoRaMacMibSetRequestConfirm+0x6ba>
            break;
 8011e2c:	bf00      	nop
 8011e2e:	e016      	b.n	8011e5e <LoRaMacMibSetRequestConfirm+0x6ba>
            break;
 8011e30:	bf00      	nop
 8011e32:	e014      	b.n	8011e5e <LoRaMacMibSetRequestConfirm+0x6ba>
            break;
 8011e34:	bf00      	nop
 8011e36:	e012      	b.n	8011e5e <LoRaMacMibSetRequestConfirm+0x6ba>
            break;
 8011e38:	bf00      	nop
 8011e3a:	e010      	b.n	8011e5e <LoRaMacMibSetRequestConfirm+0x6ba>
            break;
 8011e3c:	bf00      	nop
 8011e3e:	e00e      	b.n	8011e5e <LoRaMacMibSetRequestConfirm+0x6ba>
            break;
 8011e40:	bf00      	nop
 8011e42:	e00c      	b.n	8011e5e <LoRaMacMibSetRequestConfirm+0x6ba>
            break;
 8011e44:	bf00      	nop
 8011e46:	e00a      	b.n	8011e5e <LoRaMacMibSetRequestConfirm+0x6ba>
            break;
 8011e48:	bf00      	nop
 8011e4a:	e008      	b.n	8011e5e <LoRaMacMibSetRequestConfirm+0x6ba>
            break;
 8011e4c:	bf00      	nop
 8011e4e:	e006      	b.n	8011e5e <LoRaMacMibSetRequestConfirm+0x6ba>
            break;
 8011e50:	bf00      	nop
 8011e52:	e004      	b.n	8011e5e <LoRaMacMibSetRequestConfirm+0x6ba>
            break;
 8011e54:	bf00      	nop
 8011e56:	e002      	b.n	8011e5e <LoRaMacMibSetRequestConfirm+0x6ba>
            break;
 8011e58:	bf00      	nop
 8011e5a:	e000      	b.n	8011e5e <LoRaMacMibSetRequestConfirm+0x6ba>
            break;
 8011e5c:	bf00      	nop
        }
    }

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    if( status == LORAMAC_STATUS_OK )
 8011e5e:	7dfb      	ldrb	r3, [r7, #23]
 8011e60:	2b00      	cmp	r3, #0
 8011e62:	d106      	bne.n	8011e72 <LoRaMacMibSetRequestConfirm+0x6ce>
    {
        // Handle NVM potential changes
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 8011e64:	4a06      	ldr	r2, [pc, #24]	@ (8011e80 <LoRaMacMibSetRequestConfirm+0x6dc>)
 8011e66:	f892 3495 	ldrb.w	r3, [r2, #1173]	@ 0x495
 8011e6a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011e6e:	f882 3495 	strb.w	r3, [r2, #1173]	@ 0x495
    }
#endif /* LORAMAC_VERSION */
    return status;
 8011e72:	7dfb      	ldrb	r3, [r7, #23]
}
 8011e74:	4618      	mov	r0, r3
 8011e76:	3718      	adds	r7, #24
 8011e78:	46bd      	mov	sp, r7
 8011e7a:	bd80      	pop	{r7, pc}
 8011e7c:	20000b90 	.word	0x20000b90
 8011e80:	20000670 	.word	0x20000670

08011e84 <LoRaMacMlmeRequest>:
    }
    return LORAMAC_STATUS_OK;
}

LoRaMacStatus_t LoRaMacMlmeRequest( MlmeReq_t* mlmeRequest )
{
 8011e84:	b580      	push	{r7, lr}
 8011e86:	b08a      	sub	sp, #40	@ 0x28
 8011e88:	af00      	add	r7, sp, #0
 8011e8a:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 8011e8c:	2302      	movs	r3, #2
 8011e8e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    MlmeConfirmQueue_t queueElement;
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 8011e92:	2300      	movs	r3, #0
 8011e94:	83bb      	strh	r3, [r7, #28]

    if( mlmeRequest == NULL )
 8011e96:	687b      	ldr	r3, [r7, #4]
 8011e98:	2b00      	cmp	r3, #0
 8011e9a:	d101      	bne.n	8011ea0 <LoRaMacMlmeRequest+0x1c>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8011e9c:	2303      	movs	r3, #3
 8011e9e:	e16c      	b.n	801217a <LoRaMacMlmeRequest+0x2f6>
    }
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    // Initialize mlmeRequest->ReqReturn.DutyCycleWaitTime to 0 in order to
    // return a valid value in case the MAC is busy.
    mlmeRequest->ReqReturn.DutyCycleWaitTime = 0;
 8011ea0:	687b      	ldr	r3, [r7, #4]
 8011ea2:	2200      	movs	r2, #0
 8011ea4:	611a      	str	r2, [r3, #16]
#endif /* LORAMAC_VERSION */

    if( LoRaMacIsBusy( ) == true )
 8011ea6:	f7fc fc5f 	bl	800e768 <LoRaMacIsBusy>
 8011eaa:	4603      	mov	r3, r0
 8011eac:	2b00      	cmp	r3, #0
 8011eae:	d001      	beq.n	8011eb4 <LoRaMacMlmeRequest+0x30>
    {
        return LORAMAC_STATUS_BUSY;
 8011eb0:	2301      	movs	r3, #1
 8011eb2:	e162      	b.n	801217a <LoRaMacMlmeRequest+0x2f6>
    }
    if( LoRaMacConfirmQueueIsFull( ) == true )
 8011eb4:	f001 f956 	bl	8013164 <LoRaMacConfirmQueueIsFull>
 8011eb8:	4603      	mov	r3, r0
 8011eba:	2b00      	cmp	r3, #0
 8011ebc:	d001      	beq.n	8011ec2 <LoRaMacMlmeRequest+0x3e>
    {
        return LORAMAC_STATUS_BUSY;
 8011ebe:	2301      	movs	r3, #1
 8011ec0:	e15b      	b.n	801217a <LoRaMacMlmeRequest+0x2f6>
    }

    if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 8011ec2:	f001 f943 	bl	801314c <LoRaMacConfirmQueueGetCnt>
 8011ec6:	4603      	mov	r3, r0
 8011ec8:	2b00      	cmp	r3, #0
 8011eca:	d104      	bne.n	8011ed6 <LoRaMacMlmeRequest+0x52>
    {
        memset1( ( uint8_t* ) &MacCtx.MlmeConfirm, 0, sizeof( MacCtx.MlmeConfirm ) );
 8011ecc:	2214      	movs	r2, #20
 8011ece:	2100      	movs	r1, #0
 8011ed0:	48ac      	ldr	r0, [pc, #688]	@ (8012184 <LoRaMacMlmeRequest+0x300>)
 8011ed2:	f004 fdff 	bl	8016ad4 <memset1>
    }
    MacCtx.MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8011ed6:	4bac      	ldr	r3, [pc, #688]	@ (8012188 <LoRaMacMlmeRequest+0x304>)
 8011ed8:	2201      	movs	r2, #1
 8011eda:	f883 2459 	strb.w	r2, [r3, #1113]	@ 0x459

    MacCtx.MacFlags.Bits.MlmeReq = 1;
 8011ede:	4aaa      	ldr	r2, [pc, #680]	@ (8012188 <LoRaMacMlmeRequest+0x304>)
 8011ee0:	f892 3495 	ldrb.w	r3, [r2, #1173]	@ 0x495
 8011ee4:	f043 0304 	orr.w	r3, r3, #4
 8011ee8:	f882 3495 	strb.w	r3, [r2, #1173]	@ 0x495
    queueElement.Request = mlmeRequest->Type;
 8011eec:	687b      	ldr	r3, [r7, #4]
 8011eee:	781b      	ldrb	r3, [r3, #0]
 8011ef0:	f887 3020 	strb.w	r3, [r7, #32]
    queueElement.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8011ef4:	2301      	movs	r3, #1
 8011ef6:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
    queueElement.RestrictCommonReadyToHandle = false;
 8011efa:	2300      	movs	r3, #0
 8011efc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    queueElement.ReadyToHandle = false;
 8011f00:	2300      	movs	r3, #0
 8011f02:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
#endif /* LORAMAC_VERSION */

    switch( mlmeRequest->Type )
 8011f06:	687b      	ldr	r3, [r7, #4]
 8011f08:	781b      	ldrb	r3, [r3, #0]
 8011f0a:	3b01      	subs	r3, #1
 8011f0c:	2b0c      	cmp	r3, #12
 8011f0e:	f200 8108 	bhi.w	8012122 <LoRaMacMlmeRequest+0x29e>
 8011f12:	a201      	add	r2, pc, #4	@ (adr r2, 8011f18 <LoRaMacMlmeRequest+0x94>)
 8011f14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011f18:	08011f4d 	.word	0x08011f4d
 8011f1c:	08012123 	.word	0x08012123
 8011f20:	08012123 	.word	0x08012123
 8011f24:	08012023 	.word	0x08012023
 8011f28:	08012045 	.word	0x08012045
 8011f2c:	08012123 	.word	0x08012123
 8011f30:	08012123 	.word	0x08012123
 8011f34:	08012123 	.word	0x08012123
 8011f38:	08012063 	.word	0x08012063
 8011f3c:	08012123 	.word	0x08012123
 8011f40:	080120f1 	.word	0x080120f1
 8011f44:	08012085 	.word	0x08012085
 8011f48:	080120cf 	.word	0x080120cf
    {
        case MLME_JOIN:
        {
            if( ( MacCtx.MacState & LORAMAC_TX_DELAYED ) == LORAMAC_TX_DELAYED )
 8011f4c:	4b8e      	ldr	r3, [pc, #568]	@ (8012188 <LoRaMacMlmeRequest+0x304>)
 8011f4e:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 8011f52:	f003 0320 	and.w	r3, r3, #32
 8011f56:	2b00      	cmp	r3, #0
 8011f58:	d001      	beq.n	8011f5e <LoRaMacMlmeRequest+0xda>
            {
                return LORAMAC_STATUS_BUSY;
 8011f5a:	2301      	movs	r3, #1
 8011f5c:	e10d      	b.n	801217a <LoRaMacMlmeRequest+0x2f6>
            {
                // Revert back the previous datarate ( mainly used for US915 like regions )
                Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR_RESTORE );
            }
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
            if( mlmeRequest->Req.Join.NetworkActivation == ACTIVATION_TYPE_OTAA )
 8011f5e:	687b      	ldr	r3, [r7, #4]
 8011f60:	791b      	ldrb	r3, [r3, #4]
 8011f62:	2b02      	cmp	r3, #2
 8011f64:	d12e      	bne.n	8011fc4 <LoRaMacMlmeRequest+0x140>
            {
                ResetMacParameters( );
 8011f66:	f7fe f997 	bl	8010298 <ResetMacParameters>

                Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR );
 8011f6a:	4b88      	ldr	r3, [pc, #544]	@ (801218c <LoRaMacMlmeRequest+0x308>)
 8011f6c:	f893 0040 	ldrb.w	r0, [r3, #64]	@ 0x40
 8011f70:	687b      	ldr	r3, [r7, #4]
 8011f72:	795b      	ldrb	r3, [r3, #5]
 8011f74:	b25b      	sxtb	r3, r3
 8011f76:	2200      	movs	r2, #0
 8011f78:	4619      	mov	r1, r3
 8011f7a:	f002 fbf2 	bl	8014762 <RegionAlternateDr>
 8011f7e:	4603      	mov	r3, r0
 8011f80:	461a      	mov	r2, r3
 8011f82:	4b82      	ldr	r3, [pc, #520]	@ (801218c <LoRaMacMlmeRequest+0x308>)
 8011f84:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

                queueElement.Status = LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL;
 8011f88:	2307      	movs	r3, #7
 8011f8a:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21

                status = SendReJoinReq( JOIN_REQ );
 8011f8e:	20ff      	movs	r0, #255	@ 0xff
 8011f90:	f7fd ff00 	bl	800fd94 <SendReJoinReq>
 8011f94:	4603      	mov	r3, r0
 8011f96:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

                if( status != LORAMAC_STATUS_OK )
 8011f9a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011f9e:	2b00      	cmp	r3, #0
 8011fa0:	f000 80c1 	beq.w	8012126 <LoRaMacMlmeRequest+0x2a2>
                {
                    // Revert back the previous datarate ( mainly used for US915 like regions )
                    Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR_RESTORE );
 8011fa4:	4b79      	ldr	r3, [pc, #484]	@ (801218c <LoRaMacMlmeRequest+0x308>)
 8011fa6:	f893 0040 	ldrb.w	r0, [r3, #64]	@ 0x40
 8011faa:	687b      	ldr	r3, [r7, #4]
 8011fac:	795b      	ldrb	r3, [r3, #5]
 8011fae:	b25b      	sxtb	r3, r3
 8011fb0:	2201      	movs	r2, #1
 8011fb2:	4619      	mov	r1, r3
 8011fb4:	f002 fbd5 	bl	8014762 <RegionAlternateDr>
 8011fb8:	4603      	mov	r3, r0
 8011fba:	461a      	mov	r2, r3
 8011fbc:	4b73      	ldr	r3, [pc, #460]	@ (801218c <LoRaMacMlmeRequest+0x308>)
 8011fbe:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
                MacCtx.MacCallbacks->MacProcessNotify( );
                MacCtx.MacFlags.Bits.MacDone = 1;
                status = LORAMAC_STATUS_OK;
            }
#endif /* LORAMAC_VERSION */
            break;
 8011fc2:	e0b0      	b.n	8012126 <LoRaMacMlmeRequest+0x2a2>
            else if( mlmeRequest->Req.Join.NetworkActivation == ACTIVATION_TYPE_ABP )
 8011fc4:	687b      	ldr	r3, [r7, #4]
 8011fc6:	791b      	ldrb	r3, [r3, #4]
 8011fc8:	2b01      	cmp	r3, #1
 8011fca:	f040 80ac 	bne.w	8012126 <LoRaMacMlmeRequest+0x2a2>
                Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = false;
 8011fce:	4b6f      	ldr	r3, [pc, #444]	@ (801218c <LoRaMacMlmeRequest+0x308>)
 8011fd0:	2200      	movs	r2, #0
 8011fd2:	f883 2109 	strb.w	r2, [r3, #265]	@ 0x109
                params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 8011fd6:	2302      	movs	r3, #2
 8011fd8:	763b      	strb	r3, [r7, #24]
                RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 8011fda:	4b6c      	ldr	r3, [pc, #432]	@ (801218c <LoRaMacMlmeRequest+0x308>)
 8011fdc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8011fe0:	f107 020c 	add.w	r2, r7, #12
 8011fe4:	4611      	mov	r1, r2
 8011fe6:	4618      	mov	r0, r3
 8011fe8:	f002 fac1 	bl	801456e <RegionInitDefaults>
                Nvm.MacGroup2.NetworkActivation = mlmeRequest->Req.Join.NetworkActivation;
 8011fec:	687b      	ldr	r3, [r7, #4]
 8011fee:	791a      	ldrb	r2, [r3, #4]
 8011ff0:	4b66      	ldr	r3, [pc, #408]	@ (801218c <LoRaMacMlmeRequest+0x308>)
 8011ff2:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c
                queueElement.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8011ff6:	2300      	movs	r3, #0
 8011ff8:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
                queueElement.ReadyToHandle = true;
 8011ffc:	2301      	movs	r3, #1
 8011ffe:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
                MacCtx.MacCallbacks->MacProcessNotify( );
 8012002:	4b61      	ldr	r3, [pc, #388]	@ (8012188 <LoRaMacMlmeRequest+0x304>)
 8012004:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 8012008:	691b      	ldr	r3, [r3, #16]
 801200a:	4798      	blx	r3
                MacCtx.MacFlags.Bits.MacDone = 1;
 801200c:	4a5e      	ldr	r2, [pc, #376]	@ (8012188 <LoRaMacMlmeRequest+0x304>)
 801200e:	f892 3495 	ldrb.w	r3, [r2, #1173]	@ 0x495
 8012012:	f043 0320 	orr.w	r3, r3, #32
 8012016:	f882 3495 	strb.w	r3, [r2, #1173]	@ 0x495
                status = LORAMAC_STATUS_OK;
 801201a:	2300      	movs	r3, #0
 801201c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 8012020:	e081      	b.n	8012126 <LoRaMacMlmeRequest+0x2a2>
        }
        case MLME_LINK_CHECK:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 8012022:	2300      	movs	r3, #0
 8012024:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            if( LoRaMacCommandsAddCmd( MOTE_MAC_LINK_CHECK_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8012028:	f107 031c 	add.w	r3, r7, #28
 801202c:	2200      	movs	r2, #0
 801202e:	4619      	mov	r1, r3
 8012030:	2002      	movs	r0, #2
 8012032:	f000 fcfd 	bl	8012a30 <LoRaMacCommandsAddCmd>
 8012036:	4603      	mov	r3, r0
 8012038:	2b00      	cmp	r3, #0
 801203a:	d076      	beq.n	801212a <LoRaMacMlmeRequest+0x2a6>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 801203c:	2313      	movs	r3, #19
 801203e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            }
            break;
 8012042:	e072      	b.n	801212a <LoRaMacMlmeRequest+0x2a6>
            break;
        }
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
        case MLME_TXCW:
        {
            status = SetTxContinuousWave( mlmeRequest->Req.TxCw.Timeout, mlmeRequest->Req.TxCw.Frequency, mlmeRequest->Req.TxCw.Power );
 8012044:	687b      	ldr	r3, [r7, #4]
 8012046:	8898      	ldrh	r0, [r3, #4]
 8012048:	687b      	ldr	r3, [r7, #4]
 801204a:	6899      	ldr	r1, [r3, #8]
 801204c:	687b      	ldr	r3, [r7, #4]
 801204e:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8012052:	b2db      	uxtb	r3, r3
 8012054:	461a      	mov	r2, r3
 8012056:	f7fe fc65 	bl	8010924 <SetTxContinuousWave>
 801205a:	4603      	mov	r3, r0
 801205c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 8012060:	e06a      	b.n	8012138 <LoRaMacMlmeRequest+0x2b4>
        }
#endif /* LORAMAC_VERSION */
        case MLME_DEVICE_TIME:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 8012062:	2300      	movs	r3, #0
 8012064:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            if( LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_TIME_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8012068:	f107 031c 	add.w	r3, r7, #28
 801206c:	2200      	movs	r2, #0
 801206e:	4619      	mov	r1, r3
 8012070:	200d      	movs	r0, #13
 8012072:	f000 fcdd 	bl	8012a30 <LoRaMacCommandsAddCmd>
 8012076:	4603      	mov	r3, r0
 8012078:	2b00      	cmp	r3, #0
 801207a:	d058      	beq.n	801212e <LoRaMacMlmeRequest+0x2aa>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 801207c:	2313      	movs	r3, #19
 801207e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            }
            break;
 8012082:	e054      	b.n	801212e <LoRaMacMlmeRequest+0x2aa>
        }
        case MLME_PING_SLOT_INFO:
        {
            if( Nvm.MacGroup2.DeviceClass == CLASS_A )
 8012084:	4b41      	ldr	r3, [pc, #260]	@ (801218c <LoRaMacMlmeRequest+0x308>)
 8012086:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 801208a:	2b00      	cmp	r3, #0
 801208c:	d151      	bne.n	8012132 <LoRaMacMlmeRequest+0x2ae>
            {
                uint8_t value = mlmeRequest->Req.PingSlotInfo.PingSlot.Value;
 801208e:	687b      	ldr	r3, [r7, #4]
 8012090:	791b      	ldrb	r3, [r3, #4]
 8012092:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

                // LoRaMac will send this command piggy-pack
                LoRaMacClassBSetPingSlotInfo( mlmeRequest->Req.PingSlotInfo.PingSlot.Fields.Periodicity );
 8012096:	687b      	ldr	r3, [r7, #4]
 8012098:	791b      	ldrb	r3, [r3, #4]
 801209a:	f3c3 0302 	ubfx	r3, r3, #0, #3
 801209e:	b2db      	uxtb	r3, r3
 80120a0:	4618      	mov	r0, r3
 80120a2:	f000 fb1b 	bl	80126dc <LoRaMacClassBSetPingSlotInfo>
                macCmdPayload[0] = value;
 80120a6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80120aa:	773b      	strb	r3, [r7, #28]
                status = LORAMAC_STATUS_OK;
 80120ac:	2300      	movs	r3, #0
 80120ae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                if( LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_INFO_REQ, macCmdPayload, 1 ) != LORAMAC_COMMANDS_SUCCESS )
 80120b2:	f107 031c 	add.w	r3, r7, #28
 80120b6:	2201      	movs	r2, #1
 80120b8:	4619      	mov	r1, r3
 80120ba:	2010      	movs	r0, #16
 80120bc:	f000 fcb8 	bl	8012a30 <LoRaMacCommandsAddCmd>
 80120c0:	4603      	mov	r3, r0
 80120c2:	2b00      	cmp	r3, #0
 80120c4:	d035      	beq.n	8012132 <LoRaMacMlmeRequest+0x2ae>
                {
                    status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80120c6:	2313      	movs	r3, #19
 80120c8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                }
            }
            break;
 80120cc:	e031      	b.n	8012132 <LoRaMacMlmeRequest+0x2ae>
        }
        case MLME_BEACON_TIMING:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 80120ce:	2300      	movs	r3, #0
 80120d0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            if( LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_TIMING_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 80120d4:	f107 031c 	add.w	r3, r7, #28
 80120d8:	2200      	movs	r2, #0
 80120da:	4619      	mov	r1, r3
 80120dc:	2012      	movs	r0, #18
 80120de:	f000 fca7 	bl	8012a30 <LoRaMacCommandsAddCmd>
 80120e2:	4603      	mov	r3, r0
 80120e4:	2b00      	cmp	r3, #0
 80120e6:	d026      	beq.n	8012136 <LoRaMacMlmeRequest+0x2b2>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80120e8:	2313      	movs	r3, #19
 80120ea:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            }
            break;
 80120ee:	e022      	b.n	8012136 <LoRaMacMlmeRequest+0x2b2>
        }
        case MLME_BEACON_ACQUISITION:
        {
            // Apply the request
            queueElement.RestrictCommonReadyToHandle = true;
 80120f0:	2301      	movs	r3, #1
 80120f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

            if( LoRaMacClassBIsAcquisitionInProgress( ) == false )
 80120f6:	f000 faa7 	bl	8012648 <LoRaMacClassBIsAcquisitionInProgress>
 80120fa:	4603      	mov	r3, r0
 80120fc:	f083 0301 	eor.w	r3, r3, #1
 8012100:	b2db      	uxtb	r3, r3
 8012102:	2b00      	cmp	r3, #0
 8012104:	d009      	beq.n	801211a <LoRaMacMlmeRequest+0x296>
            {
                // Start class B algorithm
                LoRaMacClassBSetBeaconState( BEACON_STATE_ACQUISITION );
 8012106:	2000      	movs	r0, #0
 8012108:	f000 fa80 	bl	801260c <LoRaMacClassBSetBeaconState>
                LoRaMacClassBBeaconTimerEvent( NULL );
 801210c:	2000      	movs	r0, #0
 801210e:	f000 faa2 	bl	8012656 <LoRaMacClassBBeaconTimerEvent>

                status = LORAMAC_STATUS_OK;
 8012112:	2300      	movs	r3, #0
 8012114:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            }
            else
            {
                status = LORAMAC_STATUS_BUSY;
            }
            break;
 8012118:	e00e      	b.n	8012138 <LoRaMacMlmeRequest+0x2b4>
                status = LORAMAC_STATUS_BUSY;
 801211a:	2301      	movs	r3, #1
 801211c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 8012120:	e00a      	b.n	8012138 <LoRaMacMlmeRequest+0x2b4>
        }
        default:
            break;
 8012122:	bf00      	nop
 8012124:	e008      	b.n	8012138 <LoRaMacMlmeRequest+0x2b4>
            break;
 8012126:	bf00      	nop
 8012128:	e006      	b.n	8012138 <LoRaMacMlmeRequest+0x2b4>
            break;
 801212a:	bf00      	nop
 801212c:	e004      	b.n	8012138 <LoRaMacMlmeRequest+0x2b4>
            break;
 801212e:	bf00      	nop
 8012130:	e002      	b.n	8012138 <LoRaMacMlmeRequest+0x2b4>
            break;
 8012132:	bf00      	nop
 8012134:	e000      	b.n	8012138 <LoRaMacMlmeRequest+0x2b4>
            break;
 8012136:	bf00      	nop
    }

    // Fill return structure
    mlmeRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 8012138:	4b13      	ldr	r3, [pc, #76]	@ (8012188 <LoRaMacMlmeRequest+0x304>)
 801213a:	f8d3 2498 	ldr.w	r2, [r3, #1176]	@ 0x498
 801213e:	687b      	ldr	r3, [r7, #4]
 8012140:	611a      	str	r2, [r3, #16]

    if( status != LORAMAC_STATUS_OK )
 8012142:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012146:	2b00      	cmp	r3, #0
 8012148:	d010      	beq.n	801216c <LoRaMacMlmeRequest+0x2e8>
    {
        if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 801214a:	f000 ffff 	bl	801314c <LoRaMacConfirmQueueGetCnt>
 801214e:	4603      	mov	r3, r0
 8012150:	2b00      	cmp	r3, #0
 8012152:	d110      	bne.n	8012176 <LoRaMacMlmeRequest+0x2f2>
        {
            MacCtx.NodeAckRequested = false;
 8012154:	4b0c      	ldr	r3, [pc, #48]	@ (8012188 <LoRaMacMlmeRequest+0x304>)
 8012156:	2200      	movs	r2, #0
 8012158:	f883 241e 	strb.w	r2, [r3, #1054]	@ 0x41e
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 801215c:	4a0a      	ldr	r2, [pc, #40]	@ (8012188 <LoRaMacMlmeRequest+0x304>)
 801215e:	f892 3495 	ldrb.w	r3, [r2, #1173]	@ 0x495
 8012162:	f36f 0382 	bfc	r3, #2, #1
 8012166:	f882 3495 	strb.w	r3, [r2, #1173]	@ 0x495
 801216a:	e004      	b.n	8012176 <LoRaMacMlmeRequest+0x2f2>
        }
    }
    else
    {
        LoRaMacConfirmQueueAdd( &queueElement );
 801216c:	f107 0320 	add.w	r3, r7, #32
 8012170:	4618      	mov	r0, r3
 8012172:	f000 fe9d 	bl	8012eb0 <LoRaMacConfirmQueueAdd>
    }
    return status;
 8012176:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 801217a:	4618      	mov	r0, r3
 801217c:	3728      	adds	r7, #40	@ 0x28
 801217e:	46bd      	mov	sp, r7
 8012180:	bd80      	pop	{r7, pc}
 8012182:	bf00      	nop
 8012184:	20000ac8 	.word	0x20000ac8
 8012188:	20000670 	.word	0x20000670
 801218c:	20000b90 	.word	0x20000b90

08012190 <LoRaMacMcpsRequest>:

/* ST_WORKAROUND_BEGIN: Update MCPS request with new input parameter to allow delayed tx */
LoRaMacStatus_t LoRaMacMcpsRequest( McpsReq_t* mcpsRequest, bool allowDelayedTx )
{
 8012190:	b5b0      	push	{r4, r5, r7, lr}
 8012192:	b092      	sub	sp, #72	@ 0x48
 8012194:	af02      	add	r7, sp, #8
 8012196:	6078      	str	r0, [r7, #4]
 8012198:	460b      	mov	r3, r1
 801219a:	70fb      	strb	r3, [r7, #3]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 801219c:	2302      	movs	r3, #2
 801219e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    LoRaMacHeader_t macHdr;
    VerifyParams_t verify;
    uint8_t fPort = 0;
 80121a2:	2300      	movs	r3, #0
 80121a4:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
    /* ST_WORKAROUND_BEGIN: remove GCC9 warning */
    void* fBuffer = NULL;
 80121a8:	2300      	movs	r3, #0
 80121aa:	63bb      	str	r3, [r7, #56]	@ 0x38
    /* ST_WORKAROUND_END */
    uint16_t fBufferSize;
    int8_t datarate = DR_0;
 80121ac:	2300      	movs	r3, #0
 80121ae:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    bool readyToSend = false;
 80121b2:	2300      	movs	r3, #0
 80121b4:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

    if( mcpsRequest == NULL )
 80121b8:	687b      	ldr	r3, [r7, #4]
 80121ba:	2b00      	cmp	r3, #0
 80121bc:	d101      	bne.n	80121c2 <LoRaMacMcpsRequest+0x32>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80121be:	2303      	movs	r3, #3
 80121c0:	e113      	b.n	80123ea <LoRaMacMcpsRequest+0x25a>
        }
    }
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    // Initialize mcpsRequest->ReqReturn.DutyCycleWaitTime to 0 in order to
    // return a valid value in case the MAC is busy.
    mcpsRequest->ReqReturn.DutyCycleWaitTime = 0;
 80121c2:	687b      	ldr	r3, [r7, #4]
 80121c4:	2200      	movs	r2, #0
 80121c6:	611a      	str	r2, [r3, #16]

    if( LoRaMacIsBusy( ) == true )
 80121c8:	f7fc face 	bl	800e768 <LoRaMacIsBusy>
 80121cc:	4603      	mov	r3, r0
 80121ce:	2b00      	cmp	r3, #0
 80121d0:	d001      	beq.n	80121d6 <LoRaMacMcpsRequest+0x46>
    {
        return LORAMAC_STATUS_BUSY;
 80121d2:	2301      	movs	r3, #1
 80121d4:	e109      	b.n	80123ea <LoRaMacMcpsRequest+0x25a>
    }

    McpsReq_t request = *mcpsRequest;
 80121d6:	687b      	ldr	r3, [r7, #4]
 80121d8:	f107 040c 	add.w	r4, r7, #12
 80121dc:	461d      	mov	r5, r3
 80121de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80121e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80121e2:	682b      	ldr	r3, [r5, #0]
 80121e4:	6023      	str	r3, [r4, #0]

    macHdr.Value = 0;
 80121e6:	2300      	movs	r3, #0
 80121e8:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
    memset1( ( uint8_t* ) &MacCtx.McpsConfirm, 0, sizeof( MacCtx.McpsConfirm ) );
 80121ec:	2214      	movs	r2, #20
 80121ee:	2100      	movs	r1, #0
 80121f0:	4880      	ldr	r0, [pc, #512]	@ (80123f4 <LoRaMacMcpsRequest+0x264>)
 80121f2:	f004 fc6f 	bl	8016ad4 <memset1>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80121f6:	4b80      	ldr	r3, [pc, #512]	@ (80123f8 <LoRaMacMcpsRequest+0x268>)
 80121f8:	2201      	movs	r2, #1
 80121fa:	f883 2445 	strb.w	r2, [r3, #1093]	@ 0x445

    // Apply confirmed downlinks, if the device has not received a valid
    // downlink after a join accept.
    if( ( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_OTAA ) &&
 80121fe:	4b7f      	ldr	r3, [pc, #508]	@ (80123fc <LoRaMacMcpsRequest+0x26c>)
 8012200:	f893 311c 	ldrb.w	r3, [r3, #284]	@ 0x11c
 8012204:	2b02      	cmp	r3, #2
 8012206:	d111      	bne.n	801222c <LoRaMacMcpsRequest+0x9c>
        ( Nvm.MacGroup2.DeviceClass == CLASS_C ) &&
 8012208:	4b7c      	ldr	r3, [pc, #496]	@ (80123fc <LoRaMacMcpsRequest+0x26c>)
 801220a:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
    if( ( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_OTAA ) &&
 801220e:	2b02      	cmp	r3, #2
 8012210:	d10c      	bne.n	801222c <LoRaMacMcpsRequest+0x9c>
        ( Nvm.MacGroup2.DownlinkReceived == false ) &&
 8012212:	4b7a      	ldr	r3, [pc, #488]	@ (80123fc <LoRaMacMcpsRequest+0x26c>)
 8012214:	f893 310a 	ldrb.w	r3, [r3, #266]	@ 0x10a
 8012218:	f083 0301 	eor.w	r3, r3, #1
 801221c:	b2db      	uxtb	r3, r3
        ( Nvm.MacGroup2.DeviceClass == CLASS_C ) &&
 801221e:	2b00      	cmp	r3, #0
 8012220:	d004      	beq.n	801222c <LoRaMacMcpsRequest+0x9c>
        ( request.Type == MCPS_UNCONFIRMED ) )
 8012222:	7b3b      	ldrb	r3, [r7, #12]
        ( Nvm.MacGroup2.DownlinkReceived == false ) &&
 8012224:	2b00      	cmp	r3, #0
 8012226:	d101      	bne.n	801222c <LoRaMacMcpsRequest+0x9c>
    {
        request.Type = MCPS_CONFIRMED;
 8012228:	2301      	movs	r3, #1
 801222a:	733b      	strb	r3, [r7, #12]
    }

    switch( request.Type )
 801222c:	7b3b      	ldrb	r3, [r7, #12]
 801222e:	2b03      	cmp	r3, #3
 8012230:	d030      	beq.n	8012294 <LoRaMacMcpsRequest+0x104>
 8012232:	2b03      	cmp	r3, #3
 8012234:	dc3f      	bgt.n	80122b6 <LoRaMacMcpsRequest+0x126>
 8012236:	2b00      	cmp	r3, #0
 8012238:	d002      	beq.n	8012240 <LoRaMacMcpsRequest+0xb0>
 801223a:	2b01      	cmp	r3, #1
 801223c:	d015      	beq.n	801226a <LoRaMacMcpsRequest+0xda>
            fBufferSize = request.Req.Proprietary.fBufferSize;
            datarate = request.Req.Proprietary.Datarate;
            break;
        }
        default:
            break;
 801223e:	e03a      	b.n	80122b6 <LoRaMacMcpsRequest+0x126>
            readyToSend = true;
 8012240:	2301      	movs	r3, #1
 8012242:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
            macHdr.Bits.MType = FRAME_TYPE_DATA_UNCONFIRMED_UP;
 8012246:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 801224a:	2202      	movs	r2, #2
 801224c:	f362 1347 	bfi	r3, r2, #5, #3
 8012250:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
            fPort = request.Req.Unconfirmed.fPort;
 8012254:	7c3b      	ldrb	r3, [r7, #16]
 8012256:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
            fBuffer = request.Req.Unconfirmed.fBuffer;
 801225a:	697b      	ldr	r3, [r7, #20]
 801225c:	63bb      	str	r3, [r7, #56]	@ 0x38
            fBufferSize = request.Req.Unconfirmed.fBufferSize;
 801225e:	8b3b      	ldrh	r3, [r7, #24]
 8012260:	86fb      	strh	r3, [r7, #54]	@ 0x36
            datarate = request.Req.Unconfirmed.Datarate;
 8012262:	7ebb      	ldrb	r3, [r7, #26]
 8012264:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
            break;
 8012268:	e026      	b.n	80122b8 <LoRaMacMcpsRequest+0x128>
            readyToSend = true;
 801226a:	2301      	movs	r3, #1
 801226c:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
            macHdr.Bits.MType = FRAME_TYPE_DATA_CONFIRMED_UP;
 8012270:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8012274:	2204      	movs	r2, #4
 8012276:	f362 1347 	bfi	r3, r2, #5, #3
 801227a:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
            fPort = request.Req.Confirmed.fPort;
 801227e:	7c3b      	ldrb	r3, [r7, #16]
 8012280:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
            fBuffer = request.Req.Confirmed.fBuffer;
 8012284:	697b      	ldr	r3, [r7, #20]
 8012286:	63bb      	str	r3, [r7, #56]	@ 0x38
            fBufferSize = request.Req.Confirmed.fBufferSize;
 8012288:	8b3b      	ldrh	r3, [r7, #24]
 801228a:	86fb      	strh	r3, [r7, #54]	@ 0x36
            datarate = request.Req.Confirmed.Datarate;
 801228c:	7ebb      	ldrb	r3, [r7, #26]
 801228e:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
            break;
 8012292:	e011      	b.n	80122b8 <LoRaMacMcpsRequest+0x128>
            readyToSend = true;
 8012294:	2301      	movs	r3, #1
 8012296:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
            macHdr.Bits.MType = FRAME_TYPE_PROPRIETARY;
 801229a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 801229e:	f043 03e0 	orr.w	r3, r3, #224	@ 0xe0
 80122a2:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
            fBuffer = request.Req.Proprietary.fBuffer;
 80122a6:	693b      	ldr	r3, [r7, #16]
 80122a8:	63bb      	str	r3, [r7, #56]	@ 0x38
            fBufferSize = request.Req.Proprietary.fBufferSize;
 80122aa:	8abb      	ldrh	r3, [r7, #20]
 80122ac:	86fb      	strh	r3, [r7, #54]	@ 0x36
            datarate = request.Req.Proprietary.Datarate;
 80122ae:	7dbb      	ldrb	r3, [r7, #22]
 80122b0:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
            break;
 80122b4:	e000      	b.n	80122b8 <LoRaMacMcpsRequest+0x128>
            break;
 80122b6:	bf00      	nop
    }

    // Make sure that the input datarate is compliant
    // to the regional specification.
    getPhy.Attribute = PHY_MIN_TX_DR;
 80122b8:	2302      	movs	r3, #2
 80122ba:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 80122be:	4b4f      	ldr	r3, [pc, #316]	@ (80123fc <LoRaMacMcpsRequest+0x26c>)
 80122c0:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 80122c4:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80122c8:	4b4c      	ldr	r3, [pc, #304]	@ (80123fc <LoRaMacMcpsRequest+0x26c>)
 80122ca:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80122ce:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 80122d2:	4611      	mov	r1, r2
 80122d4:	4618      	mov	r0, r3
 80122d6:	f002 f921 	bl	801451c <RegionGetPhyParam>
 80122da:	4603      	mov	r3, r0
 80122dc:	62bb      	str	r3, [r7, #40]	@ 0x28
    // Apply the minimum possible datarate.
    // Some regions have limitations for the minimum datarate.
    datarate = MAX( datarate, ( int8_t )phyParam.Value );
 80122de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80122e0:	b25b      	sxtb	r3, r3
 80122e2:	f997 2035 	ldrsb.w	r2, [r7, #53]	@ 0x35
 80122e6:	4293      	cmp	r3, r2
 80122e8:	bfb8      	it	lt
 80122ea:	4613      	movlt	r3, r2
 80122ec:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35

    // Apply minimum datarate in this special case.
    if( CheckForMinimumAbpDatarate( Nvm.MacGroup2.AdrCtrlOn, Nvm.MacGroup2.NetworkActivation,
 80122f0:	4b42      	ldr	r3, [pc, #264]	@ (80123fc <LoRaMacMcpsRequest+0x26c>)
 80122f2:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 80122f6:	4a41      	ldr	r2, [pc, #260]	@ (80123fc <LoRaMacMcpsRequest+0x26c>)
 80122f8:	f892 111c 	ldrb.w	r1, [r2, #284]	@ 0x11c
 80122fc:	4a3f      	ldr	r2, [pc, #252]	@ (80123fc <LoRaMacMcpsRequest+0x26c>)
 80122fe:	f892 2109 	ldrb.w	r2, [r2, #265]	@ 0x109
 8012302:	4618      	mov	r0, r3
 8012304:	f7fc fbc8 	bl	800ea98 <CheckForMinimumAbpDatarate>
 8012308:	4603      	mov	r3, r0
 801230a:	2b00      	cmp	r3, #0
 801230c:	d002      	beq.n	8012314 <LoRaMacMcpsRequest+0x184>
                                    Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq ) == true )
    {
        datarate = ( int8_t )phyParam.Value;
 801230e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012310:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    }

    if( readyToSend == true )
 8012314:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8012318:	2b00      	cmp	r3, #0
 801231a:	d05f      	beq.n	80123dc <LoRaMacMcpsRequest+0x24c>
    {
        if( ( Nvm.MacGroup2.AdrCtrlOn == false ) ||
 801231c:	4b37      	ldr	r3, [pc, #220]	@ (80123fc <LoRaMacMcpsRequest+0x26c>)
 801231e:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 8012322:	f083 0301 	eor.w	r3, r3, #1
 8012326:	b2db      	uxtb	r3, r3
 8012328:	2b00      	cmp	r3, #0
 801232a:	d10e      	bne.n	801234a <LoRaMacMcpsRequest+0x1ba>
            ( CheckForMinimumAbpDatarate( Nvm.MacGroup2.AdrCtrlOn, Nvm.MacGroup2.NetworkActivation,
 801232c:	4b33      	ldr	r3, [pc, #204]	@ (80123fc <LoRaMacMcpsRequest+0x26c>)
 801232e:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 8012332:	4a32      	ldr	r2, [pc, #200]	@ (80123fc <LoRaMacMcpsRequest+0x26c>)
 8012334:	f892 111c 	ldrb.w	r1, [r2, #284]	@ 0x11c
 8012338:	4a30      	ldr	r2, [pc, #192]	@ (80123fc <LoRaMacMcpsRequest+0x26c>)
 801233a:	f892 2109 	ldrb.w	r2, [r2, #265]	@ 0x109
 801233e:	4618      	mov	r0, r3
 8012340:	f7fc fbaa 	bl	800ea98 <CheckForMinimumAbpDatarate>
 8012344:	4603      	mov	r3, r0
        if( ( Nvm.MacGroup2.AdrCtrlOn == false ) ||
 8012346:	2b00      	cmp	r3, #0
 8012348:	d01c      	beq.n	8012384 <LoRaMacMcpsRequest+0x1f4>
                                          Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq ) == true ) )
        {
            verify.DatarateParams.Datarate = datarate;
 801234a:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 801234e:	f887 3020 	strb.w	r3, [r7, #32]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8012352:	4b2a      	ldr	r3, [pc, #168]	@ (80123fc <LoRaMacMcpsRequest+0x26c>)
 8012354:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 8012358:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 801235c:	4b27      	ldr	r3, [pc, #156]	@ (80123fc <LoRaMacMcpsRequest+0x26c>)
 801235e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8012362:	f107 0120 	add.w	r1, r7, #32
 8012366:	2205      	movs	r2, #5
 8012368:	4618      	mov	r0, r3
 801236a:	f002 f912 	bl	8014592 <RegionVerify>
 801236e:	4603      	mov	r3, r0
 8012370:	2b00      	cmp	r3, #0
 8012372:	d005      	beq.n	8012380 <LoRaMacMcpsRequest+0x1f0>
            {
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 8012374:	f997 2020 	ldrsb.w	r2, [r7, #32]
 8012378:	4b20      	ldr	r3, [pc, #128]	@ (80123fc <LoRaMacMcpsRequest+0x26c>)
 801237a:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 801237e:	e001      	b.n	8012384 <LoRaMacMcpsRequest+0x1f4>
            }
            else
            {
                return LORAMAC_STATUS_PARAMETER_INVALID;
 8012380:	2303      	movs	r3, #3
 8012382:	e032      	b.n	80123ea <LoRaMacMcpsRequest+0x25a>
            }
        }

        // Verification of response timeout for class b and class c
        LoRaMacHandleResponseTimeout( Nvm.MacGroup2.MacParams.RxBCTimeout,
 8012384:	4b1d      	ldr	r3, [pc, #116]	@ (80123fc <LoRaMacMcpsRequest+0x26c>)
 8012386:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801238a:	4a1b      	ldr	r2, [pc, #108]	@ (80123f8 <LoRaMacMcpsRequest+0x268>)
 801238c:	f8d2 249c 	ldr.w	r2, [r2, #1180]	@ 0x49c
 8012390:	4611      	mov	r1, r2
 8012392:	4618      	mov	r0, r3
 8012394:	f7fc fc6a 	bl	800ec6c <LoRaMacHandleResponseTimeout>
                                      MacCtx.ResponseTimeoutStartTime );

        status = Send( &macHdr, fPort, fBuffer, fBufferSize, allowDelayedTx ); /* ST_WORKAROUND: Update Send request with new input parameter to allow delayed tx */
 8012398:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 801239a:	f897 103e 	ldrb.w	r1, [r7, #62]	@ 0x3e
 801239e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80123a2:	78fb      	ldrb	r3, [r7, #3]
 80123a4:	9300      	str	r3, [sp, #0]
 80123a6:	4613      	mov	r3, r2
 80123a8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80123aa:	f7fd fc0f 	bl	800fbcc <Send>
 80123ae:	4603      	mov	r3, r0
 80123b0:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
        if( status == LORAMAC_STATUS_OK )
 80123b4:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80123b8:	2b00      	cmp	r3, #0
 80123ba:	d10b      	bne.n	80123d4 <LoRaMacMcpsRequest+0x244>
        {
            MacCtx.McpsConfirm.McpsRequest = request.Type;
 80123bc:	7b3a      	ldrb	r2, [r7, #12]
 80123be:	4b0e      	ldr	r3, [pc, #56]	@ (80123f8 <LoRaMacMcpsRequest+0x268>)
 80123c0:	f883 2444 	strb.w	r2, [r3, #1092]	@ 0x444
            MacCtx.MacFlags.Bits.McpsReq = 1;
 80123c4:	4a0c      	ldr	r2, [pc, #48]	@ (80123f8 <LoRaMacMcpsRequest+0x268>)
 80123c6:	f892 3495 	ldrb.w	r3, [r2, #1173]	@ 0x495
 80123ca:	f043 0301 	orr.w	r3, r3, #1
 80123ce:	f882 3495 	strb.w	r3, [r2, #1173]	@ 0x495
 80123d2:	e003      	b.n	80123dc <LoRaMacMcpsRequest+0x24c>
        }
        else
        {
            MacCtx.NodeAckRequested = false;
 80123d4:	4b08      	ldr	r3, [pc, #32]	@ (80123f8 <LoRaMacMcpsRequest+0x268>)
 80123d6:	2200      	movs	r2, #0
 80123d8:	f883 241e 	strb.w	r2, [r3, #1054]	@ 0x41e
        }
    }
#endif /* LORAMAC_VERSION */

    // Fill return structure
    mcpsRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 80123dc:	4b06      	ldr	r3, [pc, #24]	@ (80123f8 <LoRaMacMcpsRequest+0x268>)
 80123de:	f8d3 2498 	ldr.w	r2, [r3, #1176]	@ 0x498
 80123e2:	687b      	ldr	r3, [r7, #4]
 80123e4:	611a      	str	r2, [r3, #16]

    return status;
 80123e6:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 80123ea:	4618      	mov	r0, r3
 80123ec:	3740      	adds	r7, #64	@ 0x40
 80123ee:	46bd      	mov	sp, r7
 80123f0:	bdb0      	pop	{r4, r5, r7, pc}
 80123f2:	bf00      	nop
 80123f4:	20000ab4 	.word	0x20000ab4
 80123f8:	20000670 	.word	0x20000670
 80123fc:	20000b90 	.word	0x20000b90

08012400 <LoRaMacTestSetDutyCycleOn>:
/* ST_WORKAROUND_END */

void LoRaMacTestSetDutyCycleOn( bool enable )
{
 8012400:	b580      	push	{r7, lr}
 8012402:	b084      	sub	sp, #16
 8012404:	af00      	add	r7, sp, #0
 8012406:	4603      	mov	r3, r0
 8012408:	71fb      	strb	r3, [r7, #7]
    VerifyParams_t verify;

    verify.DutyCycle = enable;
 801240a:	79fb      	ldrb	r3, [r7, #7]
 801240c:	733b      	strb	r3, [r7, #12]

    if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DUTY_CYCLE ) == true )
 801240e:	4b0a      	ldr	r3, [pc, #40]	@ (8012438 <LoRaMacTestSetDutyCycleOn+0x38>)
 8012410:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8012414:	f107 010c 	add.w	r1, r7, #12
 8012418:	220f      	movs	r2, #15
 801241a:	4618      	mov	r0, r3
 801241c:	f002 f8b9 	bl	8014592 <RegionVerify>
 8012420:	4603      	mov	r3, r0
 8012422:	2b00      	cmp	r3, #0
 8012424:	d003      	beq.n	801242e <LoRaMacTestSetDutyCycleOn+0x2e>
    {
        Nvm.MacGroup2.DutyCycleOn = enable;
 8012426:	4a04      	ldr	r2, [pc, #16]	@ (8012438 <LoRaMacTestSetDutyCycleOn+0x38>)
 8012428:	79fb      	ldrb	r3, [r7, #7]
 801242a:	f882 3108 	strb.w	r3, [r2, #264]	@ 0x108
    }
}
 801242e:	bf00      	nop
 8012430:	3710      	adds	r7, #16
 8012432:	46bd      	mov	sp, r7
 8012434:	bd80      	pop	{r7, pc}
 8012436:	bf00      	nop
 8012438:	20000b90 	.word	0x20000b90

0801243c <LoRaMacDeInitialization>:

LoRaMacStatus_t LoRaMacDeInitialization( void )
{
 801243c:	b580      	push	{r7, lr}
 801243e:	af00      	add	r7, sp, #0
    // Check the current state of the LoRaMac
    if ( LoRaMacStop( ) == LORAMAC_STATUS_OK )
 8012440:	f7fe ff26 	bl	8011290 <LoRaMacStop>
 8012444:	4603      	mov	r3, r0
 8012446:	2b00      	cmp	r3, #0
 8012448:	d111      	bne.n	801246e <LoRaMacDeInitialization+0x32>
    {
        // Stop Timers
        TimerStop( &MacCtx.TxDelayedTimer );
 801244a:	480a      	ldr	r0, [pc, #40]	@ (8012474 <LoRaMacDeInitialization+0x38>)
 801244c:	f008 fc4c 	bl	801ace8 <UTIL_TIMER_Stop>
        TimerStop( &MacCtx.RxWindowTimer1 );
 8012450:	4809      	ldr	r0, [pc, #36]	@ (8012478 <LoRaMacDeInitialization+0x3c>)
 8012452:	f008 fc49 	bl	801ace8 <UTIL_TIMER_Stop>
        TimerStop( &MacCtx.RxWindowTimer2 );
 8012456:	4809      	ldr	r0, [pc, #36]	@ (801247c <LoRaMacDeInitialization+0x40>)
 8012458:	f008 fc46 	bl	801ace8 <UTIL_TIMER_Stop>
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        TimerStop( &MacCtx.AckTimeoutTimer );
#endif /* LORAMAC_VERSION */

        // Take care about class B
        LoRaMacClassBHaltBeaconing( );
 801245c:	f000 f948 	bl	80126f0 <LoRaMacClassBHaltBeaconing>

        // Reset Mac parameters
        ResetMacParameters( );
 8012460:	f7fd ff1a 	bl	8010298 <ResetMacParameters>

        // Switch off Radio
        Radio.Sleep( );
 8012464:	4b06      	ldr	r3, [pc, #24]	@ (8012480 <LoRaMacDeInitialization+0x44>)
 8012466:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012468:	4798      	blx	r3

        // Return success
        return LORAMAC_STATUS_OK;
 801246a:	2300      	movs	r3, #0
 801246c:	e000      	b.n	8012470 <LoRaMacDeInitialization+0x34>
    }
    else
    {
        return LORAMAC_STATUS_BUSY;
 801246e:	2301      	movs	r3, #1
    }
}
 8012470:	4618      	mov	r0, r3
 8012472:	bd80      	pop	{r7, pc}
 8012474:	200009d8 	.word	0x200009d8
 8012478:	200009f0 	.word	0x200009f0
 801247c:	20000a08 	.word	0x20000a08
 8012480:	0801c57c 	.word	0x0801c57c

08012484 <LoRaMacAdrCalcNext>:
    return false;
}
#elif (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
bool LoRaMacAdrCalcNext( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut,
                         uint8_t* nbTransOut, uint32_t* adrAckCounter )
{
 8012484:	b580      	push	{r7, lr}
 8012486:	b08c      	sub	sp, #48	@ 0x30
 8012488:	af00      	add	r7, sp, #0
 801248a:	60f8      	str	r0, [r7, #12]
 801248c:	60b9      	str	r1, [r7, #8]
 801248e:	607a      	str	r2, [r7, #4]
 8012490:	603b      	str	r3, [r7, #0]
    bool adrAckReq = false;
 8012492:	2300      	movs	r3, #0
 8012494:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    int8_t datarate = adrNext->Datarate;
 8012498:	68fb      	ldr	r3, [r7, #12]
 801249a:	7b1b      	ldrb	r3, [r3, #12]
 801249c:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    int8_t txPower = adrNext->TxPower;
 80124a0:	68fb      	ldr	r3, [r7, #12]
 80124a2:	7b5b      	ldrb	r3, [r3, #13]
 80124a4:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
    uint8_t nbTrans = adrNext->NbTrans;
 80124a8:	68fb      	ldr	r3, [r7, #12]
 80124aa:	7b9b      	ldrb	r3, [r3, #14]
 80124ac:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    int8_t minTxDatarate;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Report back the adr ack counter
    *adrAckCounter = adrNext->AdrAckCounter;
 80124b0:	68fb      	ldr	r3, [r7, #12]
 80124b2:	685a      	ldr	r2, [r3, #4]
 80124b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80124b6:	601a      	str	r2, [r3, #0]

    if( adrNext->AdrEnabled == true )
 80124b8:	68fb      	ldr	r3, [r7, #12]
 80124ba:	785b      	ldrb	r3, [r3, #1]
 80124bc:	2b00      	cmp	r3, #0
 80124be:	f000 8088 	beq.w	80125d2 <LoRaMacAdrCalcNext+0x14e>
    {
        // Query minimum TX Datarate
        getPhy.Attribute = PHY_MIN_TX_DR;
 80124c2:	2302      	movs	r3, #2
 80124c4:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
        getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 80124c8:	68fb      	ldr	r3, [r7, #12]
 80124ca:	7bdb      	ldrb	r3, [r3, #15]
 80124cc:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 80124d0:	68fb      	ldr	r3, [r7, #12]
 80124d2:	7c1b      	ldrb	r3, [r3, #16]
 80124d4:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 80124d8:	4611      	mov	r1, r2
 80124da:	4618      	mov	r0, r3
 80124dc:	f002 f81e 	bl	801451c <RegionGetPhyParam>
 80124e0:	4603      	mov	r3, r0
 80124e2:	623b      	str	r3, [r7, #32]
        minTxDatarate = phyParam.Value;
 80124e4:	6a3b      	ldr	r3, [r7, #32]
 80124e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        datarate = MAX( datarate, minTxDatarate );
 80124ea:	f997 202b 	ldrsb.w	r2, [r7, #43]	@ 0x2b
 80124ee:	f997 302e 	ldrsb.w	r3, [r7, #46]	@ 0x2e
 80124f2:	4293      	cmp	r3, r2
 80124f4:	bfb8      	it	lt
 80124f6:	4613      	movlt	r3, r2
 80124f8:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e

        // Verify if ADR ack req bit needs to be set.
        if( adrNext->AdrAckCounter >= adrNext->AdrAckLimit )
 80124fc:	68fb      	ldr	r3, [r7, #12]
 80124fe:	685b      	ldr	r3, [r3, #4]
 8012500:	68fa      	ldr	r2, [r7, #12]
 8012502:	8912      	ldrh	r2, [r2, #8]
 8012504:	4293      	cmp	r3, r2
 8012506:	d302      	bcc.n	801250e <LoRaMacAdrCalcNext+0x8a>
        {
            adrAckReq = true;
 8012508:	2301      	movs	r3, #1
 801250a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        }

        // Verify, if we need to set the TX power to default
        if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
 801250e:	68fb      	ldr	r3, [r7, #12]
 8012510:	685b      	ldr	r3, [r3, #4]
 8012512:	68fa      	ldr	r2, [r7, #12]
 8012514:	8912      	ldrh	r2, [r2, #8]
 8012516:	4611      	mov	r1, r2
 8012518:	68fa      	ldr	r2, [r7, #12]
 801251a:	8952      	ldrh	r2, [r2, #10]
 801251c:	440a      	add	r2, r1
 801251e:	4293      	cmp	r3, r2
 8012520:	d30f      	bcc.n	8012542 <LoRaMacAdrCalcNext+0xbe>
        {
            // Set TX Power to default
            getPhy.Attribute = PHY_DEF_TX_POWER;
 8012522:	230a      	movs	r3, #10
 8012524:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
            phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 8012528:	68fb      	ldr	r3, [r7, #12]
 801252a:	7c1b      	ldrb	r3, [r3, #16]
 801252c:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8012530:	4611      	mov	r1, r2
 8012532:	4618      	mov	r0, r3
 8012534:	f001 fff2 	bl	801451c <RegionGetPhyParam>
 8012538:	4603      	mov	r3, r0
 801253a:	623b      	str	r3, [r7, #32]
            txPower = phyParam.Value;
 801253c:	6a3b      	ldr	r3, [r7, #32]
 801253e:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
        }

        // Verify, if we need to decrease the data rate
        if( adrNext->AdrAckCounter >= ( uint32_t )( adrNext->AdrAckLimit + ( adrNext->AdrAckDelay << 1 ) ) )
 8012542:	68fb      	ldr	r3, [r7, #12]
 8012544:	685b      	ldr	r3, [r3, #4]
 8012546:	68fa      	ldr	r2, [r7, #12]
 8012548:	8912      	ldrh	r2, [r2, #8]
 801254a:	4611      	mov	r1, r2
 801254c:	68fa      	ldr	r2, [r7, #12]
 801254e:	8952      	ldrh	r2, [r2, #10]
 8012550:	0052      	lsls	r2, r2, #1
 8012552:	440a      	add	r2, r1
 8012554:	4293      	cmp	r3, r2
 8012556:	d33c      	bcc.n	80125d2 <LoRaMacAdrCalcNext+0x14e>
        {
            // Perform actions with every adrNext->AdrAckDelay only
            if( ( ( adrNext->AdrAckCounter - adrNext->AdrAckLimit ) % adrNext->AdrAckDelay ) == 0 )
 8012558:	68fb      	ldr	r3, [r7, #12]
 801255a:	685b      	ldr	r3, [r3, #4]
 801255c:	68fa      	ldr	r2, [r7, #12]
 801255e:	8912      	ldrh	r2, [r2, #8]
 8012560:	1a9b      	subs	r3, r3, r2
 8012562:	68fa      	ldr	r2, [r7, #12]
 8012564:	8952      	ldrh	r2, [r2, #10]
 8012566:	fbb3 f1f2 	udiv	r1, r3, r2
 801256a:	fb01 f202 	mul.w	r2, r1, r2
 801256e:	1a9b      	subs	r3, r3, r2
 8012570:	2b00      	cmp	r3, #0
 8012572:	d12e      	bne.n	80125d2 <LoRaMacAdrCalcNext+0x14e>
            {
                if( datarate == minTxDatarate )
 8012574:	f997 202e 	ldrsb.w	r2, [r7, #46]	@ 0x2e
 8012578:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 801257c:	429a      	cmp	r2, r3
 801257e:	d110      	bne.n	80125a2 <LoRaMacAdrCalcNext+0x11e>
                {
                    // Restore the channel mask
                    if( adrNext->UpdateChanMask == true )
 8012580:	68fb      	ldr	r3, [r7, #12]
 8012582:	781b      	ldrb	r3, [r3, #0]
 8012584:	2b00      	cmp	r3, #0
 8012586:	d009      	beq.n	801259c <LoRaMacAdrCalcNext+0x118>
                    {
                        InitDefaultsParams_t params;
                        params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 8012588:	2302      	movs	r3, #2
 801258a:	773b      	strb	r3, [r7, #28]
                        RegionInitDefaults( adrNext->Region, &params );
 801258c:	68fb      	ldr	r3, [r7, #12]
 801258e:	7c1b      	ldrb	r3, [r3, #16]
 8012590:	f107 0210 	add.w	r2, r7, #16
 8012594:	4611      	mov	r1, r2
 8012596:	4618      	mov	r0, r3
 8012598:	f001 ffe9 	bl	801456e <RegionInitDefaults>
                    }

                    // Restore NbTrans
                    nbTrans = 1;
 801259c:	2301      	movs	r3, #1
 801259e:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
                }

                // Decrease the datarate
                getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 80125a2:	2321      	movs	r3, #33	@ 0x21
 80125a4:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
                getPhy.Datarate = datarate;
 80125a8:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80125ac:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
                getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 80125b0:	68fb      	ldr	r3, [r7, #12]
 80125b2:	7bdb      	ldrb	r3, [r3, #15]
 80125b4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
                phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 80125b8:	68fb      	ldr	r3, [r7, #12]
 80125ba:	7c1b      	ldrb	r3, [r3, #16]
 80125bc:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 80125c0:	4611      	mov	r1, r2
 80125c2:	4618      	mov	r0, r3
 80125c4:	f001 ffaa 	bl	801451c <RegionGetPhyParam>
 80125c8:	4603      	mov	r3, r0
 80125ca:	623b      	str	r3, [r7, #32]
                datarate = phyParam.Value;
 80125cc:	6a3b      	ldr	r3, [r7, #32]
 80125ce:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
            }
        }
    }

    *drOut = datarate;
 80125d2:	68bb      	ldr	r3, [r7, #8]
 80125d4:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 80125d8:	701a      	strb	r2, [r3, #0]
    *txPowOut = txPower;
 80125da:	687b      	ldr	r3, [r7, #4]
 80125dc:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 80125e0:	701a      	strb	r2, [r3, #0]
    *nbTransOut = nbTrans;
 80125e2:	683b      	ldr	r3, [r7, #0]
 80125e4:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 80125e8:	701a      	strb	r2, [r3, #0]
    return adrAckReq;
 80125ea:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80125ee:	4618      	mov	r0, r3
 80125f0:	3730      	adds	r7, #48	@ 0x30
 80125f2:	46bd      	mov	sp, r7
 80125f4:	bd80      	pop	{r7, pc}

080125f6 <LoRaMacClassBInit>:
#endif /* LORAMAC_VERSION */

#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBInit( LoRaMacClassBParams_t *classBParams, LoRaMacClassBCallback_t *callbacks, LoRaMacClassBNvmData_t* nvm )
{
 80125f6:	b480      	push	{r7}
 80125f8:	b085      	sub	sp, #20
 80125fa:	af00      	add	r7, sp, #0
 80125fc:	60f8      	str	r0, [r7, #12]
 80125fe:	60b9      	str	r1, [r7, #8]
 8012600:	607a      	str	r2, [r7, #4]
    TimerInit( &Ctx.PingSlotTimer, LoRaMacClassBPingSlotTimerEvent );
    TimerInit( &Ctx.MulticastSlotTimer, LoRaMacClassBMulticastSlotTimerEvent );

    InitClassB( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012602:	bf00      	nop
 8012604:	3714      	adds	r7, #20
 8012606:	46bd      	mov	sp, r7
 8012608:	bc80      	pop	{r7}
 801260a:	4770      	bx	lr

0801260c <LoRaMacClassBSetBeaconState>:

void LoRaMacClassBSetBeaconState( BeaconState_t beaconState )
{
 801260c:	b480      	push	{r7}
 801260e:	b083      	sub	sp, #12
 8012610:	af00      	add	r7, sp, #0
 8012612:	4603      	mov	r3, r0
 8012614:	71fb      	strb	r3, [r7, #7]
        {
            Ctx.BeaconState = beaconState;
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012616:	bf00      	nop
 8012618:	370c      	adds	r7, #12
 801261a:	46bd      	mov	sp, r7
 801261c:	bc80      	pop	{r7}
 801261e:	4770      	bx	lr

08012620 <LoRaMacClassBSetPingSlotState>:

void LoRaMacClassBSetPingSlotState( PingSlotState_t pingSlotState )
{
 8012620:	b480      	push	{r7}
 8012622:	b083      	sub	sp, #12
 8012624:	af00      	add	r7, sp, #0
 8012626:	4603      	mov	r3, r0
 8012628:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.PingSlotState = pingSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801262a:	bf00      	nop
 801262c:	370c      	adds	r7, #12
 801262e:	46bd      	mov	sp, r7
 8012630:	bc80      	pop	{r7}
 8012632:	4770      	bx	lr

08012634 <LoRaMacClassBSetMulticastSlotState>:

void LoRaMacClassBSetMulticastSlotState( PingSlotState_t multicastSlotState )
{
 8012634:	b480      	push	{r7}
 8012636:	b083      	sub	sp, #12
 8012638:	af00      	add	r7, sp, #0
 801263a:	4603      	mov	r3, r0
 801263c:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.MulticastSlotState = multicastSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801263e:	bf00      	nop
 8012640:	370c      	adds	r7, #12
 8012642:	46bd      	mov	sp, r7
 8012644:	bc80      	pop	{r7}
 8012646:	4770      	bx	lr

08012648 <LoRaMacClassBIsAcquisitionInProgress>:

bool LoRaMacClassBIsAcquisitionInProgress( void )
{
 8012648:	b480      	push	{r7}
 801264a:	af00      	add	r7, sp, #0
        // searches for a beacon.
        return true;
    }
    return false;
#else
    return false;
 801264c:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801264e:	4618      	mov	r0, r3
 8012650:	46bd      	mov	sp, r7
 8012652:	bc80      	pop	{r7}
 8012654:	4770      	bx	lr

08012656 <LoRaMacClassBBeaconTimerEvent>:

void LoRaMacClassBBeaconTimerEvent( void* context )
{
 8012656:	b480      	push	{r7}
 8012658:	b083      	sub	sp, #12
 801265a:	af00      	add	r7, sp, #0
 801265c:	6078      	str	r0, [r7, #4]
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801265e:	bf00      	nop
 8012660:	370c      	adds	r7, #12
 8012662:	46bd      	mov	sp, r7
 8012664:	bc80      	pop	{r7}
 8012666:	4770      	bx	lr

08012668 <LoRaMacClassBPingSlotTimerEvent>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBPingSlotTimerEvent( void* context )
{
 8012668:	b480      	push	{r7}
 801266a:	b083      	sub	sp, #12
 801266c:	af00      	add	r7, sp, #0
 801266e:	6078      	str	r0, [r7, #4]
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012670:	bf00      	nop
 8012672:	370c      	adds	r7, #12
 8012674:	46bd      	mov	sp, r7
 8012676:	bc80      	pop	{r7}
 8012678:	4770      	bx	lr

0801267a <LoRaMacClassBMulticastSlotTimerEvent>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBMulticastSlotTimerEvent( void* context )
{
 801267a:	b480      	push	{r7}
 801267c:	b083      	sub	sp, #12
 801267e:	af00      	add	r7, sp, #0
 8012680:	6078      	str	r0, [r7, #4]
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012682:	bf00      	nop
 8012684:	370c      	adds	r7, #12
 8012686:	46bd      	mov	sp, r7
 8012688:	bc80      	pop	{r7}
 801268a:	4770      	bx	lr

0801268c <LoRaMacClassBRxBeacon>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

bool LoRaMacClassBRxBeacon( uint8_t *payload, uint16_t size )
{
 801268c:	b480      	push	{r7}
 801268e:	b083      	sub	sp, #12
 8012690:	af00      	add	r7, sp, #0
 8012692:	6078      	str	r0, [r7, #4]
 8012694:	460b      	mov	r3, r1
 8012696:	807b      	strh	r3, [r7, #2]
        // valid beacon has been received.
        beaconProcessed = true;
    }
    return beaconProcessed;
#else
    return false;
 8012698:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801269a:	4618      	mov	r0, r3
 801269c:	370c      	adds	r7, #12
 801269e:	46bd      	mov	sp, r7
 80126a0:	bc80      	pop	{r7}
 80126a2:	4770      	bx	lr

080126a4 <LoRaMacClassBIsBeaconExpected>:

bool LoRaMacClassBIsBeaconExpected( void )
{
 80126a4:	b480      	push	{r7}
 80126a6:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 80126a8:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80126aa:	4618      	mov	r0, r3
 80126ac:	46bd      	mov	sp, r7
 80126ae:	bc80      	pop	{r7}
 80126b0:	4770      	bx	lr

080126b2 <LoRaMacClassBIsPingExpected>:

bool LoRaMacClassBIsPingExpected( void )
{
 80126b2:	b480      	push	{r7}
 80126b4:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 80126b6:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80126b8:	4618      	mov	r0, r3
 80126ba:	46bd      	mov	sp, r7
 80126bc:	bc80      	pop	{r7}
 80126be:	4770      	bx	lr

080126c0 <LoRaMacClassBIsMulticastExpected>:

bool LoRaMacClassBIsMulticastExpected( void )
{
 80126c0:	b480      	push	{r7}
 80126c2:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 80126c4:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80126c6:	4618      	mov	r0, r3
 80126c8:	46bd      	mov	sp, r7
 80126ca:	bc80      	pop	{r7}
 80126cc:	4770      	bx	lr

080126ce <LoRaMacClassBIsBeaconModeActive>:
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}

bool LoRaMacClassBIsBeaconModeActive( void )
{
 80126ce:	b480      	push	{r7}
 80126d0:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 80126d2:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80126d4:	4618      	mov	r0, r3
 80126d6:	46bd      	mov	sp, r7
 80126d8:	bc80      	pop	{r7}
 80126da:	4770      	bx	lr

080126dc <LoRaMacClassBSetPingSlotInfo>:

void LoRaMacClassBSetPingSlotInfo( uint8_t periodicity )
{
 80126dc:	b480      	push	{r7}
 80126de:	b083      	sub	sp, #12
 80126e0:	af00      	add	r7, sp, #0
 80126e2:	4603      	mov	r3, r0
 80126e4:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    ClassBNvm->PingSlotCtx.PingNb = CalcPingNb( periodicity );
    ClassBNvm->PingSlotCtx.PingPeriod = CalcPingPeriod( ClassBNvm->PingSlotCtx.PingNb );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80126e6:	bf00      	nop
 80126e8:	370c      	adds	r7, #12
 80126ea:	46bd      	mov	sp, r7
 80126ec:	bc80      	pop	{r7}
 80126ee:	4770      	bx	lr

080126f0 <LoRaMacClassBHaltBeaconing>:

void LoRaMacClassBHaltBeaconing( void )
{
 80126f0:	b480      	push	{r7}
 80126f2:	af00      	add	r7, sp, #0

        // Halt ping and multicast slot state machines
        LoRaMacClassBStopRxSlots( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80126f4:	bf00      	nop
 80126f6:	46bd      	mov	sp, r7
 80126f8:	bc80      	pop	{r7}
 80126fa:	4770      	bx	lr

080126fc <LoRaMacClassBResumeBeaconing>:

void LoRaMacClassBResumeBeaconing( void )
{
 80126fc:	b480      	push	{r7}
 80126fe:	af00      	add	r7, sp, #0
        }

        LoRaMacClassBBeaconTimerEvent( NULL );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012700:	bf00      	nop
 8012702:	46bd      	mov	sp, r7
 8012704:	bc80      	pop	{r7}
 8012706:	4770      	bx	lr

08012708 <LoRaMacClassBSwitchClass>:

LoRaMacStatus_t LoRaMacClassBSwitchClass( DeviceClass_t nextClass )
{
 8012708:	b480      	push	{r7}
 801270a:	b083      	sub	sp, #12
 801270c:	af00      	add	r7, sp, #0
 801270e:	4603      	mov	r3, r0
 8012710:	71fb      	strb	r3, [r7, #7]

        return LORAMAC_STATUS_OK;
    }
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8012712:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012714:	4618      	mov	r0, r3
 8012716:	370c      	adds	r7, #12
 8012718:	46bd      	mov	sp, r7
 801271a:	bc80      	pop	{r7}
 801271c:	4770      	bx	lr

0801271e <LoRaMacClassBMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacClassBMibGetRequestConfirm( MibRequestConfirm_t *mibGet )
{
 801271e:	b480      	push	{r7}
 8012720:	b083      	sub	sp, #12
 8012722:	af00      	add	r7, sp, #0
 8012724:	6078      	str	r0, [r7, #4]
            break;
        }
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8012726:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012728:	4618      	mov	r0, r3
 801272a:	370c      	adds	r7, #12
 801272c:	46bd      	mov	sp, r7
 801272e:	bc80      	pop	{r7}
 8012730:	4770      	bx	lr

08012732 <LoRaMacMibClassBSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibClassBSetRequestConfirm( MibRequestConfirm_t *mibSet )
{
 8012732:	b480      	push	{r7}
 8012734:	b083      	sub	sp, #12
 8012736:	af00      	add	r7, sp, #0
 8012738:	6078      	str	r0, [r7, #4]
            break;
        }
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 801273a:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801273c:	4618      	mov	r0, r3
 801273e:	370c      	adds	r7, #12
 8012740:	46bd      	mov	sp, r7
 8012742:	bc80      	pop	{r7}
 8012744:	4770      	bx	lr

08012746 <LoRaMacClassBPingSlotInfoAns>:

void LoRaMacClassBPingSlotInfoAns( void )
{
 8012746:	b480      	push	{r7}
 8012748:	af00      	add	r7, sp, #0
    {
        LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
        ClassBNvm->PingSlotCtx.Ctrl.Assigned = 1;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801274a:	bf00      	nop
 801274c:	46bd      	mov	sp, r7
 801274e:	bc80      	pop	{r7}
 8012750:	4770      	bx	lr

08012752 <LoRaMacClassBPingSlotChannelReq>:

uint8_t LoRaMacClassBPingSlotChannelReq( uint8_t datarate, uint32_t frequency )
{
 8012752:	b480      	push	{r7}
 8012754:	b083      	sub	sp, #12
 8012756:	af00      	add	r7, sp, #0
 8012758:	4603      	mov	r3, r0
 801275a:	6039      	str	r1, [r7, #0]
 801275c:	71fb      	strb	r3, [r7, #7]
        ClassBNvm->PingSlotCtx.Datarate = datarate;
    }

    return status;
#else
    return 0;
 801275e:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012760:	4618      	mov	r0, r3
 8012762:	370c      	adds	r7, #12
 8012764:	46bd      	mov	sp, r7
 8012766:	bc80      	pop	{r7}
 8012768:	4770      	bx	lr

0801276a <LoRaMacClassBBeaconTimingAns>:

void LoRaMacClassBBeaconTimingAns( uint16_t beaconTimingDelay, uint8_t beaconTimingChannel, TimerTime_t lastRxDone )
{
 801276a:	b480      	push	{r7}
 801276c:	b083      	sub	sp, #12
 801276e:	af00      	add	r7, sp, #0
 8012770:	4603      	mov	r3, r0
 8012772:	603a      	str	r2, [r7, #0]
 8012774:	80fb      	strh	r3, [r7, #6]
 8012776:	460b      	mov	r3, r1
 8012778:	717b      	strb	r3, [r7, #5]

        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingDelay = Ctx.BeaconCtx.BeaconTimingDelay;
        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingChannel = Ctx.BeaconCtx.BeaconTimingChannel;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801277a:	bf00      	nop
 801277c:	370c      	adds	r7, #12
 801277e:	46bd      	mov	sp, r7
 8012780:	bc80      	pop	{r7}
 8012782:	4770      	bx	lr

08012784 <LoRaMacClassBDeviceTimeAns>:

void LoRaMacClassBDeviceTimeAns( void )
{
 8012784:	b480      	push	{r7}
 8012786:	af00      	add	r7, sp, #0
            Ctx.BeaconCtx.BeaconTime.SubSeconds = 0;
            LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012788:	bf00      	nop
 801278a:	46bd      	mov	sp, r7
 801278c:	bc80      	pop	{r7}
 801278e:	4770      	bx	lr

08012790 <LoRaMacClassBBeaconFreqReq>:

bool LoRaMacClassBBeaconFreqReq( uint32_t frequency )
{
 8012790:	b480      	push	{r7}
 8012792:	b083      	sub	sp, #12
 8012794:	af00      	add	r7, sp, #0
 8012796:	6078      	str	r0, [r7, #4]
        ClassBNvm->BeaconCtx.Ctrl.CustomFreq = 0;
        return true;
    }
    return false;
#else
    return false;
 8012798:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801279a:	4618      	mov	r0, r3
 801279c:	370c      	adds	r7, #12
 801279e:	46bd      	mov	sp, r7
 80127a0:	bc80      	pop	{r7}
 80127a2:	4770      	bx	lr

080127a4 <LoRaMacClassBIsUplinkCollision>:

TimerTime_t LoRaMacClassBIsUplinkCollision( TimerTime_t txTimeOnAir )
{
 80127a4:	b480      	push	{r7}
 80127a6:	b083      	sub	sp, #12
 80127a8:	af00      	add	r7, sp, #0
 80127aa:	6078      	str	r0, [r7, #4]
    {// Next beacon will be sent during the next uplink.
        return CLASSB_BEACON_RESERVED;
    }
    return 0;
#else
    return 0;
 80127ac:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80127ae:	4618      	mov	r0, r3
 80127b0:	370c      	adds	r7, #12
 80127b2:	46bd      	mov	sp, r7
 80127b4:	bc80      	pop	{r7}
 80127b6:	4770      	bx	lr

080127b8 <LoRaMacClassBStopRxSlots>:

void LoRaMacClassBStopRxSlots( void )
{
 80127b8:	b480      	push	{r7}
 80127ba:	af00      	add	r7, sp, #0
    CRITICAL_SECTION_BEGIN( );
    LoRaMacClassBEvents.Events.PingSlot = 0;
    LoRaMacClassBEvents.Events.MulticastSlot = 0;
    CRITICAL_SECTION_END( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80127bc:	bf00      	nop
 80127be:	46bd      	mov	sp, r7
 80127c0:	bc80      	pop	{r7}
 80127c2:	4770      	bx	lr

080127c4 <LoRaMacClassBSetFPendingBit>:
#endif /* LORAMAC_CLASSB_ENABLED */
}

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
void LoRaMacClassBSetFPendingBit( uint32_t address, uint8_t fPendingSet )
{
 80127c4:	b480      	push	{r7}
 80127c6:	b083      	sub	sp, #12
 80127c8:	af00      	add	r7, sp, #0
 80127ca:	6078      	str	r0, [r7, #4]
 80127cc:	460b      	mov	r3, r1
 80127ce:	70fb      	strb	r3, [r7, #3]
            }
            cur++;
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80127d0:	bf00      	nop
 80127d2:	370c      	adds	r7, #12
 80127d4:	46bd      	mov	sp, r7
 80127d6:	bc80      	pop	{r7}
 80127d8:	4770      	bx	lr

080127da <LoRaMacClassBProcess>:
#endif /* LORAMAC_VERSION */

void LoRaMacClassBProcess( void )
{
 80127da:	b480      	push	{r7}
 80127dc:	af00      	add	r7, sp, #0
        {
            LoRaMacClassBProcessMulticastSlot( );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80127de:	bf00      	nop
 80127e0:	46bd      	mov	sp, r7
 80127e2:	bc80      	pop	{r7}
 80127e4:	4770      	bx	lr

080127e6 <IsSlotFree>:
 *
 * \param [in]    slot           - Slot to check
 * \retval                       - Status of the operation
 */
static bool IsSlotFree( const MacCommand_t* slot )
{
 80127e6:	b480      	push	{r7}
 80127e8:	b085      	sub	sp, #20
 80127ea:	af00      	add	r7, sp, #0
 80127ec:	6078      	str	r0, [r7, #4]
    uint8_t* mem = ( uint8_t* )slot;
 80127ee:	687b      	ldr	r3, [r7, #4]
 80127f0:	60bb      	str	r3, [r7, #8]

    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 80127f2:	2300      	movs	r3, #0
 80127f4:	81fb      	strh	r3, [r7, #14]
 80127f6:	e00a      	b.n	801280e <IsSlotFree+0x28>
    {
        if( mem[size] != 0x00 )
 80127f8:	89fb      	ldrh	r3, [r7, #14]
 80127fa:	68ba      	ldr	r2, [r7, #8]
 80127fc:	4413      	add	r3, r2
 80127fe:	781b      	ldrb	r3, [r3, #0]
 8012800:	2b00      	cmp	r3, #0
 8012802:	d001      	beq.n	8012808 <IsSlotFree+0x22>
        {
            return false;
 8012804:	2300      	movs	r3, #0
 8012806:	e006      	b.n	8012816 <IsSlotFree+0x30>
    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 8012808:	89fb      	ldrh	r3, [r7, #14]
 801280a:	3301      	adds	r3, #1
 801280c:	81fb      	strh	r3, [r7, #14]
 801280e:	89fb      	ldrh	r3, [r7, #14]
 8012810:	2b0f      	cmp	r3, #15
 8012812:	d9f1      	bls.n	80127f8 <IsSlotFree+0x12>
        }
    }
    return true;
 8012814:	2301      	movs	r3, #1
}
 8012816:	4618      	mov	r0, r3
 8012818:	3714      	adds	r7, #20
 801281a:	46bd      	mov	sp, r7
 801281c:	bc80      	pop	{r7}
 801281e:	4770      	bx	lr

08012820 <MallocNewMacCommandSlot>:
 * \brief Allocates a new MAC command memory slot
 *
 * \retval                       - Pointer to slot
 */
static MacCommand_t* MallocNewMacCommandSlot( void )
{
 8012820:	b580      	push	{r7, lr}
 8012822:	b082      	sub	sp, #8
 8012824:	af00      	add	r7, sp, #0
    uint8_t itr = 0;
 8012826:	2300      	movs	r3, #0
 8012828:	71fb      	strb	r3, [r7, #7]

    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 801282a:	e007      	b.n	801283c <MallocNewMacCommandSlot+0x1c>
    {
        itr++;
 801282c:	79fb      	ldrb	r3, [r7, #7]
 801282e:	3301      	adds	r3, #1
 8012830:	71fb      	strb	r3, [r7, #7]
        if( itr == NUM_OF_MAC_COMMANDS )
 8012832:	79fb      	ldrb	r3, [r7, #7]
 8012834:	2b20      	cmp	r3, #32
 8012836:	d101      	bne.n	801283c <MallocNewMacCommandSlot+0x1c>
        {
            return NULL;
 8012838:	2300      	movs	r3, #0
 801283a:	e012      	b.n	8012862 <MallocNewMacCommandSlot+0x42>
    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 801283c:	79fb      	ldrb	r3, [r7, #7]
 801283e:	011b      	lsls	r3, r3, #4
 8012840:	3308      	adds	r3, #8
 8012842:	4a0a      	ldr	r2, [pc, #40]	@ (801286c <MallocNewMacCommandSlot+0x4c>)
 8012844:	4413      	add	r3, r2
 8012846:	4618      	mov	r0, r3
 8012848:	f7ff ffcd 	bl	80127e6 <IsSlotFree>
 801284c:	4603      	mov	r3, r0
 801284e:	f083 0301 	eor.w	r3, r3, #1
 8012852:	b2db      	uxtb	r3, r3
 8012854:	2b00      	cmp	r3, #0
 8012856:	d1e9      	bne.n	801282c <MallocNewMacCommandSlot+0xc>
        }
    }

    return &CommandsCtx.MacCommandSlots[itr];
 8012858:	79fb      	ldrb	r3, [r7, #7]
 801285a:	011b      	lsls	r3, r3, #4
 801285c:	3308      	adds	r3, #8
 801285e:	4a03      	ldr	r2, [pc, #12]	@ (801286c <MallocNewMacCommandSlot+0x4c>)
 8012860:	4413      	add	r3, r2
}
 8012862:	4618      	mov	r0, r3
 8012864:	3708      	adds	r7, #8
 8012866:	46bd      	mov	sp, r7
 8012868:	bd80      	pop	{r7, pc}
 801286a:	bf00      	nop
 801286c:	20001730 	.word	0x20001730

08012870 <FreeMacCommandSlot>:
 * \param [in]    slot           - Slot to free
 *
 * \retval                       - Status of the operation
 */
static bool FreeMacCommandSlot( MacCommand_t* slot )
{
 8012870:	b580      	push	{r7, lr}
 8012872:	b082      	sub	sp, #8
 8012874:	af00      	add	r7, sp, #0
 8012876:	6078      	str	r0, [r7, #4]
    if( slot == NULL )
 8012878:	687b      	ldr	r3, [r7, #4]
 801287a:	2b00      	cmp	r3, #0
 801287c:	d101      	bne.n	8012882 <FreeMacCommandSlot+0x12>
    {
        return false;
 801287e:	2300      	movs	r3, #0
 8012880:	e005      	b.n	801288e <FreeMacCommandSlot+0x1e>
    }

    memset1( ( uint8_t* )slot, 0x00, sizeof( MacCommand_t ) );
 8012882:	2210      	movs	r2, #16
 8012884:	2100      	movs	r1, #0
 8012886:	6878      	ldr	r0, [r7, #4]
 8012888:	f004 f924 	bl	8016ad4 <memset1>

    return true;
 801288c:	2301      	movs	r3, #1
}
 801288e:	4618      	mov	r0, r3
 8012890:	3708      	adds	r7, #8
 8012892:	46bd      	mov	sp, r7
 8012894:	bd80      	pop	{r7, pc}

08012896 <LinkedListInit>:
 *
 * \param [in]    list           - List that shall be initialized
 * \retval                       - Status of the operation
 */
static bool LinkedListInit( MacCommandsList_t* list )
{
 8012896:	b480      	push	{r7}
 8012898:	b083      	sub	sp, #12
 801289a:	af00      	add	r7, sp, #0
 801289c:	6078      	str	r0, [r7, #4]
    if( list == NULL )
 801289e:	687b      	ldr	r3, [r7, #4]
 80128a0:	2b00      	cmp	r3, #0
 80128a2:	d101      	bne.n	80128a8 <LinkedListInit+0x12>
    {
        return false;
 80128a4:	2300      	movs	r3, #0
 80128a6:	e006      	b.n	80128b6 <LinkedListInit+0x20>
    }

    list->First = NULL;
 80128a8:	687b      	ldr	r3, [r7, #4]
 80128aa:	2200      	movs	r2, #0
 80128ac:	601a      	str	r2, [r3, #0]
    list->Last = NULL;
 80128ae:	687b      	ldr	r3, [r7, #4]
 80128b0:	2200      	movs	r2, #0
 80128b2:	605a      	str	r2, [r3, #4]

    return true;
 80128b4:	2301      	movs	r3, #1
}
 80128b6:	4618      	mov	r0, r3
 80128b8:	370c      	adds	r7, #12
 80128ba:	46bd      	mov	sp, r7
 80128bc:	bc80      	pop	{r7}
 80128be:	4770      	bx	lr

080128c0 <LinkedListAdd>:
 * \param [in]    list           - List where the element shall be added.
 * \param [in]    element        - Element to add
 * \retval                       - Status of the operation
 */
static bool LinkedListAdd( MacCommandsList_t* list, MacCommand_t* element )
{
 80128c0:	b480      	push	{r7}
 80128c2:	b083      	sub	sp, #12
 80128c4:	af00      	add	r7, sp, #0
 80128c6:	6078      	str	r0, [r7, #4]
 80128c8:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 80128ca:	687b      	ldr	r3, [r7, #4]
 80128cc:	2b00      	cmp	r3, #0
 80128ce:	d002      	beq.n	80128d6 <LinkedListAdd+0x16>
 80128d0:	683b      	ldr	r3, [r7, #0]
 80128d2:	2b00      	cmp	r3, #0
 80128d4:	d101      	bne.n	80128da <LinkedListAdd+0x1a>
    {
        return false;
 80128d6:	2300      	movs	r3, #0
 80128d8:	e015      	b.n	8012906 <LinkedListAdd+0x46>
    }

    // Check if this is the first entry to enter the list.
    if( list->First == NULL )
 80128da:	687b      	ldr	r3, [r7, #4]
 80128dc:	681b      	ldr	r3, [r3, #0]
 80128de:	2b00      	cmp	r3, #0
 80128e0:	d102      	bne.n	80128e8 <LinkedListAdd+0x28>
    {
        list->First = element;
 80128e2:	687b      	ldr	r3, [r7, #4]
 80128e4:	683a      	ldr	r2, [r7, #0]
 80128e6:	601a      	str	r2, [r3, #0]
    }

    // Check if the last entry exists and update its next point.
    if( list->Last )
 80128e8:	687b      	ldr	r3, [r7, #4]
 80128ea:	685b      	ldr	r3, [r3, #4]
 80128ec:	2b00      	cmp	r3, #0
 80128ee:	d003      	beq.n	80128f8 <LinkedListAdd+0x38>
    {
        list->Last->Next = element;
 80128f0:	687b      	ldr	r3, [r7, #4]
 80128f2:	685b      	ldr	r3, [r3, #4]
 80128f4:	683a      	ldr	r2, [r7, #0]
 80128f6:	601a      	str	r2, [r3, #0]
    }

    // Update the next point of this entry.
    element->Next = NULL;
 80128f8:	683b      	ldr	r3, [r7, #0]
 80128fa:	2200      	movs	r2, #0
 80128fc:	601a      	str	r2, [r3, #0]

    // Update the last entry of the list.
    list->Last = element;
 80128fe:	687b      	ldr	r3, [r7, #4]
 8012900:	683a      	ldr	r2, [r7, #0]
 8012902:	605a      	str	r2, [r3, #4]

    return true;
 8012904:	2301      	movs	r3, #1
}
 8012906:	4618      	mov	r0, r3
 8012908:	370c      	adds	r7, #12
 801290a:	46bd      	mov	sp, r7
 801290c:	bc80      	pop	{r7}
 801290e:	4770      	bx	lr

08012910 <LinkedListGetPrevious>:
 * \param [in]    list           - List
 * \param [in]    element        - Element where the previous element shall be searched
 * \retval                       - Status of the operation
 */
static MacCommand_t* LinkedListGetPrevious( MacCommandsList_t* list, MacCommand_t* element )
{
 8012910:	b480      	push	{r7}
 8012912:	b085      	sub	sp, #20
 8012914:	af00      	add	r7, sp, #0
 8012916:	6078      	str	r0, [r7, #4]
 8012918:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 801291a:	687b      	ldr	r3, [r7, #4]
 801291c:	2b00      	cmp	r3, #0
 801291e:	d002      	beq.n	8012926 <LinkedListGetPrevious+0x16>
 8012920:	683b      	ldr	r3, [r7, #0]
 8012922:	2b00      	cmp	r3, #0
 8012924:	d101      	bne.n	801292a <LinkedListGetPrevious+0x1a>
    {
        return NULL;
 8012926:	2300      	movs	r3, #0
 8012928:	e016      	b.n	8012958 <LinkedListGetPrevious+0x48>
    }

    MacCommand_t* curElement;

    // Start at the head of the list
    curElement = list->First;
 801292a:	687b      	ldr	r3, [r7, #4]
 801292c:	681b      	ldr	r3, [r3, #0]
 801292e:	60fb      	str	r3, [r7, #12]

    // When current element is the first of the list, there's no previous element so we can return NULL immediately.
    if( element != curElement )
 8012930:	683a      	ldr	r2, [r7, #0]
 8012932:	68fb      	ldr	r3, [r7, #12]
 8012934:	429a      	cmp	r2, r3
 8012936:	d00c      	beq.n	8012952 <LinkedListGetPrevious+0x42>
    {
        // Loop through all elements until the end is reached or the next of current is the current element.
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 8012938:	e002      	b.n	8012940 <LinkedListGetPrevious+0x30>
        {
            curElement = curElement->Next;
 801293a:	68fb      	ldr	r3, [r7, #12]
 801293c:	681b      	ldr	r3, [r3, #0]
 801293e:	60fb      	str	r3, [r7, #12]
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 8012940:	68fb      	ldr	r3, [r7, #12]
 8012942:	2b00      	cmp	r3, #0
 8012944:	d007      	beq.n	8012956 <LinkedListGetPrevious+0x46>
 8012946:	68fb      	ldr	r3, [r7, #12]
 8012948:	681b      	ldr	r3, [r3, #0]
 801294a:	683a      	ldr	r2, [r7, #0]
 801294c:	429a      	cmp	r2, r3
 801294e:	d1f4      	bne.n	801293a <LinkedListGetPrevious+0x2a>
 8012950:	e001      	b.n	8012956 <LinkedListGetPrevious+0x46>
        }
    }
    else
    {
        curElement = NULL;
 8012952:	2300      	movs	r3, #0
 8012954:	60fb      	str	r3, [r7, #12]
    }

    return curElement;
 8012956:	68fb      	ldr	r3, [r7, #12]
}
 8012958:	4618      	mov	r0, r3
 801295a:	3714      	adds	r7, #20
 801295c:	46bd      	mov	sp, r7
 801295e:	bc80      	pop	{r7}
 8012960:	4770      	bx	lr

08012962 <LinkedListRemove>:
 * \param [in]    list           - List where the element shall be removed from.
 * \param [in]    element        - Element to remove
 * \retval                       - Status of the operation
 */
static bool LinkedListRemove( MacCommandsList_t* list, MacCommand_t* element )
{
 8012962:	b580      	push	{r7, lr}
 8012964:	b084      	sub	sp, #16
 8012966:	af00      	add	r7, sp, #0
 8012968:	6078      	str	r0, [r7, #4]
 801296a:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 801296c:	687b      	ldr	r3, [r7, #4]
 801296e:	2b00      	cmp	r3, #0
 8012970:	d002      	beq.n	8012978 <LinkedListRemove+0x16>
 8012972:	683b      	ldr	r3, [r7, #0]
 8012974:	2b00      	cmp	r3, #0
 8012976:	d101      	bne.n	801297c <LinkedListRemove+0x1a>
    {
        return false;
 8012978:	2300      	movs	r3, #0
 801297a:	e020      	b.n	80129be <LinkedListRemove+0x5c>
    }

    MacCommand_t* PrevElement = LinkedListGetPrevious( list, element );
 801297c:	6839      	ldr	r1, [r7, #0]
 801297e:	6878      	ldr	r0, [r7, #4]
 8012980:	f7ff ffc6 	bl	8012910 <LinkedListGetPrevious>
 8012984:	60f8      	str	r0, [r7, #12]

    if( list->First == element )
 8012986:	687b      	ldr	r3, [r7, #4]
 8012988:	681b      	ldr	r3, [r3, #0]
 801298a:	683a      	ldr	r2, [r7, #0]
 801298c:	429a      	cmp	r2, r3
 801298e:	d103      	bne.n	8012998 <LinkedListRemove+0x36>
    {
        list->First = element->Next;
 8012990:	683b      	ldr	r3, [r7, #0]
 8012992:	681a      	ldr	r2, [r3, #0]
 8012994:	687b      	ldr	r3, [r7, #4]
 8012996:	601a      	str	r2, [r3, #0]
    }

    if( list->Last == element )
 8012998:	687b      	ldr	r3, [r7, #4]
 801299a:	685b      	ldr	r3, [r3, #4]
 801299c:	683a      	ldr	r2, [r7, #0]
 801299e:	429a      	cmp	r2, r3
 80129a0:	d102      	bne.n	80129a8 <LinkedListRemove+0x46>
    {
        list->Last = PrevElement;
 80129a2:	687b      	ldr	r3, [r7, #4]
 80129a4:	68fa      	ldr	r2, [r7, #12]
 80129a6:	605a      	str	r2, [r3, #4]
    }

    if( PrevElement != NULL )
 80129a8:	68fb      	ldr	r3, [r7, #12]
 80129aa:	2b00      	cmp	r3, #0
 80129ac:	d003      	beq.n	80129b6 <LinkedListRemove+0x54>
    {
        PrevElement->Next = element->Next;
 80129ae:	683b      	ldr	r3, [r7, #0]
 80129b0:	681a      	ldr	r2, [r3, #0]
 80129b2:	68fb      	ldr	r3, [r7, #12]
 80129b4:	601a      	str	r2, [r3, #0]
    }

    element->Next = NULL;
 80129b6:	683b      	ldr	r3, [r7, #0]
 80129b8:	2200      	movs	r2, #0
 80129ba:	601a      	str	r2, [r3, #0]

    return true;
 80129bc:	2301      	movs	r3, #1
}
 80129be:	4618      	mov	r0, r3
 80129c0:	3710      	adds	r7, #16
 80129c2:	46bd      	mov	sp, r7
 80129c4:	bd80      	pop	{r7, pc}
	...

080129c8 <IsSticky>:
 * \param [in]  cid                - MAC command identifier
 *
 * \retval                     - Status of the operation
 */
static bool IsSticky( uint8_t cid )
{
 80129c8:	b480      	push	{r7}
 80129ca:	b083      	sub	sp, #12
 80129cc:	af00      	add	r7, sp, #0
 80129ce:	4603      	mov	r3, r0
 80129d0:	71fb      	strb	r3, [r7, #7]
    switch( cid )
 80129d2:	79fb      	ldrb	r3, [r7, #7]
 80129d4:	2b11      	cmp	r3, #17
 80129d6:	bf8c      	ite	hi
 80129d8:	2201      	movhi	r2, #1
 80129da:	2200      	movls	r2, #0
 80129dc:	b2d2      	uxtb	r2, r2
 80129de:	2a00      	cmp	r2, #0
 80129e0:	d10d      	bne.n	80129fe <IsSticky+0x36>
 80129e2:	4a0a      	ldr	r2, [pc, #40]	@ (8012a0c <IsSticky+0x44>)
 80129e4:	fa22 f303 	lsr.w	r3, r2, r3
 80129e8:	f003 0301 	and.w	r3, r3, #1
 80129ec:	2b00      	cmp	r3, #0
 80129ee:	bf14      	ite	ne
 80129f0:	2301      	movne	r3, #1
 80129f2:	2300      	moveq	r3, #0
 80129f4:	b2db      	uxtb	r3, r3
 80129f6:	2b00      	cmp	r3, #0
 80129f8:	d001      	beq.n	80129fe <IsSticky+0x36>
        case MOTE_MAC_RX_TIMING_SETUP_ANS:
        case MOTE_MAC_TX_PARAM_SETUP_ANS:
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
        case MOTE_MAC_PING_SLOT_CHANNEL_ANS:
#endif /* LORAMAC_VERSION */
            return true;
 80129fa:	2301      	movs	r3, #1
 80129fc:	e000      	b.n	8012a00 <IsSticky+0x38>
        default:
            return false;
 80129fe:	2300      	movs	r3, #0
    }
}
 8012a00:	4618      	mov	r0, r3
 8012a02:	370c      	adds	r7, #12
 8012a04:	46bd      	mov	sp, r7
 8012a06:	bc80      	pop	{r7}
 8012a08:	4770      	bx	lr
 8012a0a:	bf00      	nop
 8012a0c:	00020720 	.word	0x00020720

08012a10 <LoRaMacCommandsInit>:

LoRaMacCommandStatus_t LoRaMacCommandsInit( void )
{
 8012a10:	b580      	push	{r7, lr}
 8012a12:	af00      	add	r7, sp, #0
    // Initialize with default
    memset1( ( uint8_t* )&CommandsCtx, 0, sizeof( CommandsCtx ) );
 8012a14:	f44f 7203 	mov.w	r2, #524	@ 0x20c
 8012a18:	2100      	movs	r1, #0
 8012a1a:	4804      	ldr	r0, [pc, #16]	@ (8012a2c <LoRaMacCommandsInit+0x1c>)
 8012a1c:	f004 f85a 	bl	8016ad4 <memset1>

    LinkedListInit( &CommandsCtx.MacCommandList );
 8012a20:	4802      	ldr	r0, [pc, #8]	@ (8012a2c <LoRaMacCommandsInit+0x1c>)
 8012a22:	f7ff ff38 	bl	8012896 <LinkedListInit>

    return LORAMAC_COMMANDS_SUCCESS;
 8012a26:	2300      	movs	r3, #0
}
 8012a28:	4618      	mov	r0, r3
 8012a2a:	bd80      	pop	{r7, pc}
 8012a2c:	20001730 	.word	0x20001730

08012a30 <LoRaMacCommandsAddCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsAddCmd( uint8_t cid, uint8_t* payload, size_t payloadSize )
{
 8012a30:	b580      	push	{r7, lr}
 8012a32:	b086      	sub	sp, #24
 8012a34:	af00      	add	r7, sp, #0
 8012a36:	4603      	mov	r3, r0
 8012a38:	60b9      	str	r1, [r7, #8]
 8012a3a:	607a      	str	r2, [r7, #4]
 8012a3c:	73fb      	strb	r3, [r7, #15]
    if( payload == NULL )
 8012a3e:	68bb      	ldr	r3, [r7, #8]
 8012a40:	2b00      	cmp	r3, #0
 8012a42:	d101      	bne.n	8012a48 <LoRaMacCommandsAddCmd+0x18>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8012a44:	2301      	movs	r3, #1
 8012a46:	e033      	b.n	8012ab0 <LoRaMacCommandsAddCmd+0x80>
    }
    MacCommand_t* newCmd;

    // Allocate a memory slot
    newCmd = MallocNewMacCommandSlot( );
 8012a48:	f7ff feea 	bl	8012820 <MallocNewMacCommandSlot>
 8012a4c:	6178      	str	r0, [r7, #20]

    if( newCmd == NULL )
 8012a4e:	697b      	ldr	r3, [r7, #20]
 8012a50:	2b00      	cmp	r3, #0
 8012a52:	d101      	bne.n	8012a58 <LoRaMacCommandsAddCmd+0x28>
    {
        return LORAMAC_COMMANDS_ERROR_MEMORY;
 8012a54:	2302      	movs	r3, #2
 8012a56:	e02b      	b.n	8012ab0 <LoRaMacCommandsAddCmd+0x80>
    }

    // Add it to the list of Mac commands
    if( LinkedListAdd( &CommandsCtx.MacCommandList, newCmd ) == false )
 8012a58:	6979      	ldr	r1, [r7, #20]
 8012a5a:	4817      	ldr	r0, [pc, #92]	@ (8012ab8 <LoRaMacCommandsAddCmd+0x88>)
 8012a5c:	f7ff ff30 	bl	80128c0 <LinkedListAdd>
 8012a60:	4603      	mov	r3, r0
 8012a62:	f083 0301 	eor.w	r3, r3, #1
 8012a66:	b2db      	uxtb	r3, r3
 8012a68:	2b00      	cmp	r3, #0
 8012a6a:	d001      	beq.n	8012a70 <LoRaMacCommandsAddCmd+0x40>
    {
        return LORAMAC_COMMANDS_ERROR;
 8012a6c:	2305      	movs	r3, #5
 8012a6e:	e01f      	b.n	8012ab0 <LoRaMacCommandsAddCmd+0x80>
    }

    // Set Values
    newCmd->CID = cid;
 8012a70:	697b      	ldr	r3, [r7, #20]
 8012a72:	7bfa      	ldrb	r2, [r7, #15]
 8012a74:	711a      	strb	r2, [r3, #4]
    newCmd->PayloadSize = payloadSize;
 8012a76:	697b      	ldr	r3, [r7, #20]
 8012a78:	687a      	ldr	r2, [r7, #4]
 8012a7a:	609a      	str	r2, [r3, #8]
    memcpy1( ( uint8_t* )newCmd->Payload, payload, payloadSize );
 8012a7c:	697b      	ldr	r3, [r7, #20]
 8012a7e:	3305      	adds	r3, #5
 8012a80:	687a      	ldr	r2, [r7, #4]
 8012a82:	b292      	uxth	r2, r2
 8012a84:	68b9      	ldr	r1, [r7, #8]
 8012a86:	4618      	mov	r0, r3
 8012a88:	f003 ffe9 	bl	8016a5e <memcpy1>
    newCmd->IsSticky = IsSticky( cid );
 8012a8c:	7bfb      	ldrb	r3, [r7, #15]
 8012a8e:	4618      	mov	r0, r3
 8012a90:	f7ff ff9a 	bl	80129c8 <IsSticky>
 8012a94:	4603      	mov	r3, r0
 8012a96:	461a      	mov	r2, r3
 8012a98:	697b      	ldr	r3, [r7, #20]
 8012a9a:	731a      	strb	r2, [r3, #12]

    CommandsCtx.SerializedCmdsSize += ( CID_FIELD_SIZE + payloadSize );
 8012a9c:	4b06      	ldr	r3, [pc, #24]	@ (8012ab8 <LoRaMacCommandsAddCmd+0x88>)
 8012a9e:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8012aa2:	687b      	ldr	r3, [r7, #4]
 8012aa4:	4413      	add	r3, r2
 8012aa6:	3301      	adds	r3, #1
 8012aa8:	4a03      	ldr	r2, [pc, #12]	@ (8012ab8 <LoRaMacCommandsAddCmd+0x88>)
 8012aaa:	f8c2 3208 	str.w	r3, [r2, #520]	@ 0x208

    return LORAMAC_COMMANDS_SUCCESS;
 8012aae:	2300      	movs	r3, #0
}
 8012ab0:	4618      	mov	r0, r3
 8012ab2:	3718      	adds	r7, #24
 8012ab4:	46bd      	mov	sp, r7
 8012ab6:	bd80      	pop	{r7, pc}
 8012ab8:	20001730 	.word	0x20001730

08012abc <LoRaMacCommandsRemoveCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveCmd( MacCommand_t* macCmd )
{
 8012abc:	b580      	push	{r7, lr}
 8012abe:	b082      	sub	sp, #8
 8012ac0:	af00      	add	r7, sp, #0
 8012ac2:	6078      	str	r0, [r7, #4]
    if( macCmd == NULL )
 8012ac4:	687b      	ldr	r3, [r7, #4]
 8012ac6:	2b00      	cmp	r3, #0
 8012ac8:	d101      	bne.n	8012ace <LoRaMacCommandsRemoveCmd+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8012aca:	2301      	movs	r3, #1
 8012acc:	e021      	b.n	8012b12 <LoRaMacCommandsRemoveCmd+0x56>
    }

    // Remove the Mac command element from MacCommandList
    if( LinkedListRemove( &CommandsCtx.MacCommandList, macCmd ) == false )
 8012ace:	6879      	ldr	r1, [r7, #4]
 8012ad0:	4812      	ldr	r0, [pc, #72]	@ (8012b1c <LoRaMacCommandsRemoveCmd+0x60>)
 8012ad2:	f7ff ff46 	bl	8012962 <LinkedListRemove>
 8012ad6:	4603      	mov	r3, r0
 8012ad8:	f083 0301 	eor.w	r3, r3, #1
 8012adc:	b2db      	uxtb	r3, r3
 8012ade:	2b00      	cmp	r3, #0
 8012ae0:	d001      	beq.n	8012ae6 <LoRaMacCommandsRemoveCmd+0x2a>
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
 8012ae2:	2303      	movs	r3, #3
 8012ae4:	e015      	b.n	8012b12 <LoRaMacCommandsRemoveCmd+0x56>
    }

    CommandsCtx.SerializedCmdsSize -= ( CID_FIELD_SIZE + macCmd->PayloadSize );
 8012ae6:	4b0d      	ldr	r3, [pc, #52]	@ (8012b1c <LoRaMacCommandsRemoveCmd+0x60>)
 8012ae8:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8012aec:	687b      	ldr	r3, [r7, #4]
 8012aee:	689b      	ldr	r3, [r3, #8]
 8012af0:	1ad3      	subs	r3, r2, r3
 8012af2:	3b01      	subs	r3, #1
 8012af4:	4a09      	ldr	r2, [pc, #36]	@ (8012b1c <LoRaMacCommandsRemoveCmd+0x60>)
 8012af6:	f8c2 3208 	str.w	r3, [r2, #520]	@ 0x208

    // Free the MacCommand Slot
    if( FreeMacCommandSlot( macCmd ) == false )
 8012afa:	6878      	ldr	r0, [r7, #4]
 8012afc:	f7ff feb8 	bl	8012870 <FreeMacCommandSlot>
 8012b00:	4603      	mov	r3, r0
 8012b02:	f083 0301 	eor.w	r3, r3, #1
 8012b06:	b2db      	uxtb	r3, r3
 8012b08:	2b00      	cmp	r3, #0
 8012b0a:	d001      	beq.n	8012b10 <LoRaMacCommandsRemoveCmd+0x54>
    {
        return LORAMAC_COMMANDS_ERROR;
 8012b0c:	2305      	movs	r3, #5
 8012b0e:	e000      	b.n	8012b12 <LoRaMacCommandsRemoveCmd+0x56>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 8012b10:	2300      	movs	r3, #0
}
 8012b12:	4618      	mov	r0, r3
 8012b14:	3708      	adds	r7, #8
 8012b16:	46bd      	mov	sp, r7
 8012b18:	bd80      	pop	{r7, pc}
 8012b1a:	bf00      	nop
 8012b1c:	20001730 	.word	0x20001730

08012b20 <LoRaMacCommandsRemoveNoneStickyCmds>:
    }
    return LORAMAC_COMMANDS_SUCCESS;
}

LoRaMacCommandStatus_t LoRaMacCommandsRemoveNoneStickyCmds( void )
{
 8012b20:	b580      	push	{r7, lr}
 8012b22:	b082      	sub	sp, #8
 8012b24:	af00      	add	r7, sp, #0
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 8012b26:	4b0f      	ldr	r3, [pc, #60]	@ (8012b64 <LoRaMacCommandsRemoveNoneStickyCmds+0x44>)
 8012b28:	681b      	ldr	r3, [r3, #0]
 8012b2a:	607b      	str	r3, [r7, #4]

    // Loop through all elements
    while( curElement != NULL )
 8012b2c:	e012      	b.n	8012b54 <LoRaMacCommandsRemoveNoneStickyCmds+0x34>
    {
        if( curElement->IsSticky == false )
 8012b2e:	687b      	ldr	r3, [r7, #4]
 8012b30:	7b1b      	ldrb	r3, [r3, #12]
 8012b32:	f083 0301 	eor.w	r3, r3, #1
 8012b36:	b2db      	uxtb	r3, r3
 8012b38:	2b00      	cmp	r3, #0
 8012b3a:	d008      	beq.n	8012b4e <LoRaMacCommandsRemoveNoneStickyCmds+0x2e>
        {
            nexElement = curElement->Next;
 8012b3c:	687b      	ldr	r3, [r7, #4]
 8012b3e:	681b      	ldr	r3, [r3, #0]
 8012b40:	603b      	str	r3, [r7, #0]
            LoRaMacCommandsRemoveCmd( curElement );
 8012b42:	6878      	ldr	r0, [r7, #4]
 8012b44:	f7ff ffba 	bl	8012abc <LoRaMacCommandsRemoveCmd>
            curElement = nexElement;
 8012b48:	683b      	ldr	r3, [r7, #0]
 8012b4a:	607b      	str	r3, [r7, #4]
 8012b4c:	e002      	b.n	8012b54 <LoRaMacCommandsRemoveNoneStickyCmds+0x34>
        }
        else
        {
            curElement = curElement->Next;
 8012b4e:	687b      	ldr	r3, [r7, #4]
 8012b50:	681b      	ldr	r3, [r3, #0]
 8012b52:	607b      	str	r3, [r7, #4]
    while( curElement != NULL )
 8012b54:	687b      	ldr	r3, [r7, #4]
 8012b56:	2b00      	cmp	r3, #0
 8012b58:	d1e9      	bne.n	8012b2e <LoRaMacCommandsRemoveNoneStickyCmds+0xe>
        }
    }

    return LORAMAC_COMMANDS_SUCCESS;
 8012b5a:	2300      	movs	r3, #0
}
 8012b5c:	4618      	mov	r0, r3
 8012b5e:	3708      	adds	r7, #8
 8012b60:	46bd      	mov	sp, r7
 8012b62:	bd80      	pop	{r7, pc}
 8012b64:	20001730 	.word	0x20001730

08012b68 <LoRaMacCommandsRemoveStickyAnsCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveStickyAnsCmds( void )
{
 8012b68:	b580      	push	{r7, lr}
 8012b6a:	b082      	sub	sp, #8
 8012b6c:	af00      	add	r7, sp, #0
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 8012b6e:	4b0e      	ldr	r3, [pc, #56]	@ (8012ba8 <LoRaMacCommandsRemoveStickyAnsCmds+0x40>)
 8012b70:	681b      	ldr	r3, [r3, #0]
 8012b72:	607b      	str	r3, [r7, #4]

    // Loop through all elements
    while( curElement != NULL )
 8012b74:	e00f      	b.n	8012b96 <LoRaMacCommandsRemoveStickyAnsCmds+0x2e>
    {
        nexElement = curElement->Next;
 8012b76:	687b      	ldr	r3, [r7, #4]
 8012b78:	681b      	ldr	r3, [r3, #0]
 8012b7a:	603b      	str	r3, [r7, #0]
        if( IsSticky( curElement->CID ) == true )
 8012b7c:	687b      	ldr	r3, [r7, #4]
 8012b7e:	791b      	ldrb	r3, [r3, #4]
 8012b80:	4618      	mov	r0, r3
 8012b82:	f7ff ff21 	bl	80129c8 <IsSticky>
 8012b86:	4603      	mov	r3, r0
 8012b88:	2b00      	cmp	r3, #0
 8012b8a:	d002      	beq.n	8012b92 <LoRaMacCommandsRemoveStickyAnsCmds+0x2a>
        {
            LoRaMacCommandsRemoveCmd( curElement );
 8012b8c:	6878      	ldr	r0, [r7, #4]
 8012b8e:	f7ff ff95 	bl	8012abc <LoRaMacCommandsRemoveCmd>
        }
        curElement = nexElement;
 8012b92:	683b      	ldr	r3, [r7, #0]
 8012b94:	607b      	str	r3, [r7, #4]
    while( curElement != NULL )
 8012b96:	687b      	ldr	r3, [r7, #4]
 8012b98:	2b00      	cmp	r3, #0
 8012b9a:	d1ec      	bne.n	8012b76 <LoRaMacCommandsRemoveStickyAnsCmds+0xe>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 8012b9c:	2300      	movs	r3, #0
}
 8012b9e:	4618      	mov	r0, r3
 8012ba0:	3708      	adds	r7, #8
 8012ba2:	46bd      	mov	sp, r7
 8012ba4:	bd80      	pop	{r7, pc}
 8012ba6:	bf00      	nop
 8012ba8:	20001730 	.word	0x20001730

08012bac <LoRaMacCommandsGetSizeSerializedCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsGetSizeSerializedCmds( size_t* size )
{
 8012bac:	b480      	push	{r7}
 8012bae:	b083      	sub	sp, #12
 8012bb0:	af00      	add	r7, sp, #0
 8012bb2:	6078      	str	r0, [r7, #4]
    if( size == NULL )
 8012bb4:	687b      	ldr	r3, [r7, #4]
 8012bb6:	2b00      	cmp	r3, #0
 8012bb8:	d101      	bne.n	8012bbe <LoRaMacCommandsGetSizeSerializedCmds+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8012bba:	2301      	movs	r3, #1
 8012bbc:	e005      	b.n	8012bca <LoRaMacCommandsGetSizeSerializedCmds+0x1e>
    }
    *size = CommandsCtx.SerializedCmdsSize;
 8012bbe:	4b05      	ldr	r3, [pc, #20]	@ (8012bd4 <LoRaMacCommandsGetSizeSerializedCmds+0x28>)
 8012bc0:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8012bc4:	687b      	ldr	r3, [r7, #4]
 8012bc6:	601a      	str	r2, [r3, #0]
    return LORAMAC_COMMANDS_SUCCESS;
 8012bc8:	2300      	movs	r3, #0
}
 8012bca:	4618      	mov	r0, r3
 8012bcc:	370c      	adds	r7, #12
 8012bce:	46bd      	mov	sp, r7
 8012bd0:	bc80      	pop	{r7}
 8012bd2:	4770      	bx	lr
 8012bd4:	20001730 	.word	0x20001730

08012bd8 <LoRaMacCommandsSerializeCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsSerializeCmds( size_t availableSize, size_t* effectiveSize, uint8_t* buffer )
{
 8012bd8:	b580      	push	{r7, lr}
 8012bda:	b088      	sub	sp, #32
 8012bdc:	af00      	add	r7, sp, #0
 8012bde:	60f8      	str	r0, [r7, #12]
 8012be0:	60b9      	str	r1, [r7, #8]
 8012be2:	607a      	str	r2, [r7, #4]
    MacCommand_t* curElement = CommandsCtx.MacCommandList.First;
 8012be4:	4b25      	ldr	r3, [pc, #148]	@ (8012c7c <LoRaMacCommandsSerializeCmds+0xa4>)
 8012be6:	681b      	ldr	r3, [r3, #0]
 8012be8:	61fb      	str	r3, [r7, #28]
    MacCommand_t* nextElement;
    uint8_t itr = 0;
 8012bea:	2300      	movs	r3, #0
 8012bec:	76fb      	strb	r3, [r7, #27]

    if( ( buffer == NULL ) || ( effectiveSize == NULL ) )
 8012bee:	687b      	ldr	r3, [r7, #4]
 8012bf0:	2b00      	cmp	r3, #0
 8012bf2:	d002      	beq.n	8012bfa <LoRaMacCommandsSerializeCmds+0x22>
 8012bf4:	68bb      	ldr	r3, [r7, #8]
 8012bf6:	2b00      	cmp	r3, #0
 8012bf8:	d126      	bne.n	8012c48 <LoRaMacCommandsSerializeCmds+0x70>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8012bfa:	2301      	movs	r3, #1
 8012bfc:	e039      	b.n	8012c72 <LoRaMacCommandsSerializeCmds+0x9a>

    // Loop through all elements which fits into the buffer
    while( curElement != NULL )
    {
        // If the next MAC command still fits into the buffer, add it.
        if( ( availableSize - itr ) >= ( CID_FIELD_SIZE + curElement->PayloadSize ) )
 8012bfe:	7efb      	ldrb	r3, [r7, #27]
 8012c00:	68fa      	ldr	r2, [r7, #12]
 8012c02:	1ad2      	subs	r2, r2, r3
 8012c04:	69fb      	ldr	r3, [r7, #28]
 8012c06:	689b      	ldr	r3, [r3, #8]
 8012c08:	3301      	adds	r3, #1
 8012c0a:	429a      	cmp	r2, r3
 8012c0c:	d320      	bcc.n	8012c50 <LoRaMacCommandsSerializeCmds+0x78>
        {
            buffer[itr++] = curElement->CID;
 8012c0e:	7efb      	ldrb	r3, [r7, #27]
 8012c10:	1c5a      	adds	r2, r3, #1
 8012c12:	76fa      	strb	r2, [r7, #27]
 8012c14:	461a      	mov	r2, r3
 8012c16:	687b      	ldr	r3, [r7, #4]
 8012c18:	4413      	add	r3, r2
 8012c1a:	69fa      	ldr	r2, [r7, #28]
 8012c1c:	7912      	ldrb	r2, [r2, #4]
 8012c1e:	701a      	strb	r2, [r3, #0]
            memcpy1( &buffer[itr], curElement->Payload, curElement->PayloadSize );
 8012c20:	7efb      	ldrb	r3, [r7, #27]
 8012c22:	687a      	ldr	r2, [r7, #4]
 8012c24:	18d0      	adds	r0, r2, r3
 8012c26:	69fb      	ldr	r3, [r7, #28]
 8012c28:	1d59      	adds	r1, r3, #5
 8012c2a:	69fb      	ldr	r3, [r7, #28]
 8012c2c:	689b      	ldr	r3, [r3, #8]
 8012c2e:	b29b      	uxth	r3, r3
 8012c30:	461a      	mov	r2, r3
 8012c32:	f003 ff14 	bl	8016a5e <memcpy1>
            itr += curElement->PayloadSize;
 8012c36:	69fb      	ldr	r3, [r7, #28]
 8012c38:	689b      	ldr	r3, [r3, #8]
 8012c3a:	b2da      	uxtb	r2, r3
 8012c3c:	7efb      	ldrb	r3, [r7, #27]
 8012c3e:	4413      	add	r3, r2
 8012c40:	76fb      	strb	r3, [r7, #27]
        }
        else
        {
            break;
        }
        curElement = curElement->Next;
 8012c42:	69fb      	ldr	r3, [r7, #28]
 8012c44:	681b      	ldr	r3, [r3, #0]
 8012c46:	61fb      	str	r3, [r7, #28]
    while( curElement != NULL )
 8012c48:	69fb      	ldr	r3, [r7, #28]
 8012c4a:	2b00      	cmp	r3, #0
 8012c4c:	d1d7      	bne.n	8012bfe <LoRaMacCommandsSerializeCmds+0x26>
 8012c4e:	e009      	b.n	8012c64 <LoRaMacCommandsSerializeCmds+0x8c>
            break;
 8012c50:	bf00      	nop
    }

    // Remove all commands which do not fit into the buffer
    while( curElement != NULL )
 8012c52:	e007      	b.n	8012c64 <LoRaMacCommandsSerializeCmds+0x8c>
    {
        // Store the next element before removing the current one
        nextElement = curElement->Next;
 8012c54:	69fb      	ldr	r3, [r7, #28]
 8012c56:	681b      	ldr	r3, [r3, #0]
 8012c58:	617b      	str	r3, [r7, #20]
        LoRaMacCommandsRemoveCmd( curElement );
 8012c5a:	69f8      	ldr	r0, [r7, #28]
 8012c5c:	f7ff ff2e 	bl	8012abc <LoRaMacCommandsRemoveCmd>
        curElement = nextElement;
 8012c60:	697b      	ldr	r3, [r7, #20]
 8012c62:	61fb      	str	r3, [r7, #28]
    while( curElement != NULL )
 8012c64:	69fb      	ldr	r3, [r7, #28]
 8012c66:	2b00      	cmp	r3, #0
 8012c68:	d1f4      	bne.n	8012c54 <LoRaMacCommandsSerializeCmds+0x7c>
    }

    // Fetch the effective size of the mac commands
    LoRaMacCommandsGetSizeSerializedCmds( effectiveSize );
 8012c6a:	68b8      	ldr	r0, [r7, #8]
 8012c6c:	f7ff ff9e 	bl	8012bac <LoRaMacCommandsGetSizeSerializedCmds>

    return LORAMAC_COMMANDS_SUCCESS;
 8012c70:	2300      	movs	r3, #0
}
 8012c72:	4618      	mov	r0, r3
 8012c74:	3720      	adds	r7, #32
 8012c76:	46bd      	mov	sp, r7
 8012c78:	bd80      	pop	{r7, pc}
 8012c7a:	bf00      	nop
 8012c7c:	20001730 	.word	0x20001730

08012c80 <LoRaMacCommandsStickyCmdsPending>:

LoRaMacCommandStatus_t LoRaMacCommandsStickyCmdsPending( bool* cmdsPending )
{
 8012c80:	b480      	push	{r7}
 8012c82:	b085      	sub	sp, #20
 8012c84:	af00      	add	r7, sp, #0
 8012c86:	6078      	str	r0, [r7, #4]
    if( cmdsPending == NULL )
 8012c88:	687b      	ldr	r3, [r7, #4]
 8012c8a:	2b00      	cmp	r3, #0
 8012c8c:	d101      	bne.n	8012c92 <LoRaMacCommandsStickyCmdsPending+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8012c8e:	2301      	movs	r3, #1
 8012c90:	e016      	b.n	8012cc0 <LoRaMacCommandsStickyCmdsPending+0x40>
    }
    MacCommand_t* curElement;
    curElement = CommandsCtx.MacCommandList.First;
 8012c92:	4b0e      	ldr	r3, [pc, #56]	@ (8012ccc <LoRaMacCommandsStickyCmdsPending+0x4c>)
 8012c94:	681b      	ldr	r3, [r3, #0]
 8012c96:	60fb      	str	r3, [r7, #12]

    *cmdsPending = false;
 8012c98:	687b      	ldr	r3, [r7, #4]
 8012c9a:	2200      	movs	r2, #0
 8012c9c:	701a      	strb	r2, [r3, #0]

    // Loop through all elements
    while( curElement != NULL )
 8012c9e:	e00b      	b.n	8012cb8 <LoRaMacCommandsStickyCmdsPending+0x38>
    {
        if( curElement->IsSticky == true )
 8012ca0:	68fb      	ldr	r3, [r7, #12]
 8012ca2:	7b1b      	ldrb	r3, [r3, #12]
 8012ca4:	2b00      	cmp	r3, #0
 8012ca6:	d004      	beq.n	8012cb2 <LoRaMacCommandsStickyCmdsPending+0x32>
        {
            // Found one sticky MAC command
            *cmdsPending = true;
 8012ca8:	687b      	ldr	r3, [r7, #4]
 8012caa:	2201      	movs	r2, #1
 8012cac:	701a      	strb	r2, [r3, #0]
            return LORAMAC_COMMANDS_SUCCESS;
 8012cae:	2300      	movs	r3, #0
 8012cb0:	e006      	b.n	8012cc0 <LoRaMacCommandsStickyCmdsPending+0x40>
        }
        curElement = curElement->Next;
 8012cb2:	68fb      	ldr	r3, [r7, #12]
 8012cb4:	681b      	ldr	r3, [r3, #0]
 8012cb6:	60fb      	str	r3, [r7, #12]
    while( curElement != NULL )
 8012cb8:	68fb      	ldr	r3, [r7, #12]
 8012cba:	2b00      	cmp	r3, #0
 8012cbc:	d1f0      	bne.n	8012ca0 <LoRaMacCommandsStickyCmdsPending+0x20>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 8012cbe:	2300      	movs	r3, #0
}
 8012cc0:	4618      	mov	r0, r3
 8012cc2:	3714      	adds	r7, #20
 8012cc4:	46bd      	mov	sp, r7
 8012cc6:	bc80      	pop	{r7}
 8012cc8:	4770      	bx	lr
 8012cca:	bf00      	nop
 8012ccc:	20001730 	.word	0x20001730

08012cd0 <LoRaMacCommandsGetCmdSize>:

uint8_t LoRaMacCommandsGetCmdSize( uint8_t cid )
{
 8012cd0:	b480      	push	{r7}
 8012cd2:	b085      	sub	sp, #20
 8012cd4:	af00      	add	r7, sp, #0
 8012cd6:	4603      	mov	r3, r0
 8012cd8:	71fb      	strb	r3, [r7, #7]
    uint8_t cidSize = 0;
 8012cda:	2300      	movs	r3, #0
 8012cdc:	73fb      	strb	r3, [r7, #15]

    // Decode Frame MAC commands
    switch( cid )
 8012cde:	79fb      	ldrb	r3, [r7, #7]
 8012ce0:	3b02      	subs	r3, #2
 8012ce2:	2b11      	cmp	r3, #17
 8012ce4:	d850      	bhi.n	8012d88 <LoRaMacCommandsGetCmdSize+0xb8>
 8012ce6:	a201      	add	r2, pc, #4	@ (adr r2, 8012cec <LoRaMacCommandsGetCmdSize+0x1c>)
 8012ce8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012cec:	08012d35 	.word	0x08012d35
 8012cf0:	08012d3b 	.word	0x08012d3b
 8012cf4:	08012d41 	.word	0x08012d41
 8012cf8:	08012d47 	.word	0x08012d47
 8012cfc:	08012d4d 	.word	0x08012d4d
 8012d00:	08012d53 	.word	0x08012d53
 8012d04:	08012d59 	.word	0x08012d59
 8012d08:	08012d5f 	.word	0x08012d5f
 8012d0c:	08012d65 	.word	0x08012d65
 8012d10:	08012d89 	.word	0x08012d89
 8012d14:	08012d89 	.word	0x08012d89
 8012d18:	08012d6b 	.word	0x08012d6b
 8012d1c:	08012d89 	.word	0x08012d89
 8012d20:	08012d89 	.word	0x08012d89
 8012d24:	08012d71 	.word	0x08012d71
 8012d28:	08012d77 	.word	0x08012d77
 8012d2c:	08012d7d 	.word	0x08012d7d
 8012d30:	08012d83 	.word	0x08012d83
    {
        case SRV_MAC_LINK_CHECK_ANS:
        {
            // cid + Margin + GwCnt
            cidSize = 3;
 8012d34:	2303      	movs	r3, #3
 8012d36:	73fb      	strb	r3, [r7, #15]
            break;
 8012d38:	e027      	b.n	8012d8a <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_LINK_ADR_REQ:
        {
            // cid + DataRate_TXPower + ChMask (2) + Redundancy
            cidSize = 5;
 8012d3a:	2305      	movs	r3, #5
 8012d3c:	73fb      	strb	r3, [r7, #15]
            break;
 8012d3e:	e024      	b.n	8012d8a <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DUTY_CYCLE_REQ:
        {
            // cid + DutyCyclePL
            cidSize = 2;
 8012d40:	2302      	movs	r3, #2
 8012d42:	73fb      	strb	r3, [r7, #15]
            break;
 8012d44:	e021      	b.n	8012d8a <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_RX_PARAM_SETUP_REQ:
        {
            // cid + DLsettings + Frequency (3)
            cidSize = 5;
 8012d46:	2305      	movs	r3, #5
 8012d48:	73fb      	strb	r3, [r7, #15]
            break;
 8012d4a:	e01e      	b.n	8012d8a <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DEV_STATUS_REQ:
        {
            // cid
            cidSize = 1;
 8012d4c:	2301      	movs	r3, #1
 8012d4e:	73fb      	strb	r3, [r7, #15]
            break;
 8012d50:	e01b      	b.n	8012d8a <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_NEW_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3) + DrRange
            cidSize = 6;
 8012d52:	2306      	movs	r3, #6
 8012d54:	73fb      	strb	r3, [r7, #15]
            break;
 8012d56:	e018      	b.n	8012d8a <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_RX_TIMING_SETUP_REQ:
        {
            // cid + Settings
            cidSize = 2;
 8012d58:	2302      	movs	r3, #2
 8012d5a:	73fb      	strb	r3, [r7, #15]
            break;
 8012d5c:	e015      	b.n	8012d8a <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_TX_PARAM_SETUP_REQ:
        {
            // cid + EIRP_DwellTime
            cidSize = 2;
 8012d5e:	2302      	movs	r3, #2
 8012d60:	73fb      	strb	r3, [r7, #15]
            break;
 8012d62:	e012      	b.n	8012d8a <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DL_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3)
            cidSize = 5;
 8012d64:	2305      	movs	r3, #5
 8012d66:	73fb      	strb	r3, [r7, #15]
            break;
 8012d68:	e00f      	b.n	8012d8a <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DEVICE_TIME_ANS:
        {
            // cid + Seconds (4) + Fractional seconds (1)
            cidSize = 6;
 8012d6a:	2306      	movs	r3, #6
 8012d6c:	73fb      	strb	r3, [r7, #15]
            break;
 8012d6e:	e00c      	b.n	8012d8a <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_PING_SLOT_INFO_ANS:
        {
            // cid
            cidSize = 1;
 8012d70:	2301      	movs	r3, #1
 8012d72:	73fb      	strb	r3, [r7, #15]
            break;
 8012d74:	e009      	b.n	8012d8a <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_PING_SLOT_CHANNEL_REQ:
        {
            // cid + Frequency (3) + DR
            cidSize = 5;
 8012d76:	2305      	movs	r3, #5
 8012d78:	73fb      	strb	r3, [r7, #15]
            break;
 8012d7a:	e006      	b.n	8012d8a <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_BEACON_TIMING_ANS:
        {
            // cid + TimingDelay (2) + Channel
            cidSize = 4;
 8012d7c:	2304      	movs	r3, #4
 8012d7e:	73fb      	strb	r3, [r7, #15]
            break;
 8012d80:	e003      	b.n	8012d8a <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_BEACON_FREQ_REQ:
        {
            // cid + Frequency (3)
            cidSize = 4;
 8012d82:	2304      	movs	r3, #4
 8012d84:	73fb      	strb	r3, [r7, #15]
            break;
 8012d86:	e000      	b.n	8012d8a <LoRaMacCommandsGetCmdSize+0xba>
        }
        default:
        {
            // Unknown command. ABORT MAC commands processing
            break;
 8012d88:	bf00      	nop
        }
    }
    return cidSize;
 8012d8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8012d8c:	4618      	mov	r0, r3
 8012d8e:	3714      	adds	r7, #20
 8012d90:	46bd      	mov	sp, r7
 8012d92:	bc80      	pop	{r7}
 8012d94:	4770      	bx	lr
 8012d96:	bf00      	nop

08012d98 <IncreaseBufferPointer>:
 * Module context.
 */
static LoRaMacConfirmQueueCtx_t ConfirmQueueCtx;

static MlmeConfirmQueue_t* IncreaseBufferPointer( MlmeConfirmQueue_t* bufferPointer )
{
 8012d98:	b480      	push	{r7}
 8012d9a:	b083      	sub	sp, #12
 8012d9c:	af00      	add	r7, sp, #0
 8012d9e:	6078      	str	r0, [r7, #4]
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 8012da0:	687b      	ldr	r3, [r7, #4]
 8012da2:	4a07      	ldr	r2, [pc, #28]	@ (8012dc0 <IncreaseBufferPointer+0x28>)
 8012da4:	4293      	cmp	r3, r2
 8012da6:	d102      	bne.n	8012dae <IncreaseBufferPointer+0x16>
    {
        // Reset to the first element
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 8012da8:	4b06      	ldr	r3, [pc, #24]	@ (8012dc4 <IncreaseBufferPointer+0x2c>)
 8012daa:	607b      	str	r3, [r7, #4]
 8012dac:	e002      	b.n	8012db4 <IncreaseBufferPointer+0x1c>
    }
    else
    {
        // Increase
        bufferPointer++;
 8012dae:	687b      	ldr	r3, [r7, #4]
 8012db0:	3304      	adds	r3, #4
 8012db2:	607b      	str	r3, [r7, #4]
    }
    return bufferPointer;
 8012db4:	687b      	ldr	r3, [r7, #4]
}
 8012db6:	4618      	mov	r0, r3
 8012db8:	370c      	adds	r7, #12
 8012dba:	46bd      	mov	sp, r7
 8012dbc:	bc80      	pop	{r7}
 8012dbe:	4770      	bx	lr
 8012dc0:	20001958 	.word	0x20001958
 8012dc4:	20001948 	.word	0x20001948

08012dc8 <IsListEmpty>:
    }
    return bufferPointer;
}

static bool IsListEmpty( uint8_t count )
{
 8012dc8:	b480      	push	{r7}
 8012dca:	b083      	sub	sp, #12
 8012dcc:	af00      	add	r7, sp, #0
 8012dce:	4603      	mov	r3, r0
 8012dd0:	71fb      	strb	r3, [r7, #7]
    if( count == 0 )
 8012dd2:	79fb      	ldrb	r3, [r7, #7]
 8012dd4:	2b00      	cmp	r3, #0
 8012dd6:	d101      	bne.n	8012ddc <IsListEmpty+0x14>
    {
        return true;
 8012dd8:	2301      	movs	r3, #1
 8012dda:	e000      	b.n	8012dde <IsListEmpty+0x16>
    }
    return false;
 8012ddc:	2300      	movs	r3, #0
}
 8012dde:	4618      	mov	r0, r3
 8012de0:	370c      	adds	r7, #12
 8012de2:	46bd      	mov	sp, r7
 8012de4:	bc80      	pop	{r7}
 8012de6:	4770      	bx	lr

08012de8 <IsListFull>:

static bool IsListFull( uint8_t count )
{
 8012de8:	b480      	push	{r7}
 8012dea:	b083      	sub	sp, #12
 8012dec:	af00      	add	r7, sp, #0
 8012dee:	4603      	mov	r3, r0
 8012df0:	71fb      	strb	r3, [r7, #7]
    if( count >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
 8012df2:	79fb      	ldrb	r3, [r7, #7]
 8012df4:	2b04      	cmp	r3, #4
 8012df6:	d901      	bls.n	8012dfc <IsListFull+0x14>
    {
        return true;
 8012df8:	2301      	movs	r3, #1
 8012dfa:	e000      	b.n	8012dfe <IsListFull+0x16>
    }
    return false;
 8012dfc:	2300      	movs	r3, #0
}
 8012dfe:	4618      	mov	r0, r3
 8012e00:	370c      	adds	r7, #12
 8012e02:	46bd      	mov	sp, r7
 8012e04:	bc80      	pop	{r7}
 8012e06:	4770      	bx	lr

08012e08 <GetElement>:

static MlmeConfirmQueue_t* GetElement( Mlme_t request, MlmeConfirmQueue_t* bufferStart, MlmeConfirmQueue_t* bufferEnd )
{
 8012e08:	b580      	push	{r7, lr}
 8012e0a:	b086      	sub	sp, #24
 8012e0c:	af00      	add	r7, sp, #0
 8012e0e:	4603      	mov	r3, r0
 8012e10:	60b9      	str	r1, [r7, #8]
 8012e12:	607a      	str	r2, [r7, #4]
 8012e14:	73fb      	strb	r3, [r7, #15]
    MlmeConfirmQueue_t* element = bufferStart;
 8012e16:	68bb      	ldr	r3, [r7, #8]
 8012e18:	617b      	str	r3, [r7, #20]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8012e1a:	4b13      	ldr	r3, [pc, #76]	@ (8012e68 <GetElement+0x60>)
 8012e1c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012e20:	4618      	mov	r0, r3
 8012e22:	f7ff ffd1 	bl	8012dc8 <IsListEmpty>
 8012e26:	4603      	mov	r3, r0
 8012e28:	2b00      	cmp	r3, #0
 8012e2a:	d001      	beq.n	8012e30 <GetElement+0x28>
    {
        return NULL;
 8012e2c:	2300      	movs	r3, #0
 8012e2e:	e017      	b.n	8012e60 <GetElement+0x58>
    }

    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 8012e30:	2300      	movs	r3, #0
 8012e32:	74fb      	strb	r3, [r7, #19]
 8012e34:	e00d      	b.n	8012e52 <GetElement+0x4a>
    {
        if( element->Request == request )
 8012e36:	697b      	ldr	r3, [r7, #20]
 8012e38:	781b      	ldrb	r3, [r3, #0]
 8012e3a:	7bfa      	ldrb	r2, [r7, #15]
 8012e3c:	429a      	cmp	r2, r3
 8012e3e:	d101      	bne.n	8012e44 <GetElement+0x3c>
        {
            // We have found the element
            return element;
 8012e40:	697b      	ldr	r3, [r7, #20]
 8012e42:	e00d      	b.n	8012e60 <GetElement+0x58>
        }
        element = IncreaseBufferPointer( element );
 8012e44:	6978      	ldr	r0, [r7, #20]
 8012e46:	f7ff ffa7 	bl	8012d98 <IncreaseBufferPointer>
 8012e4a:	6178      	str	r0, [r7, #20]
    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 8012e4c:	7cfb      	ldrb	r3, [r7, #19]
 8012e4e:	3301      	adds	r3, #1
 8012e50:	74fb      	strb	r3, [r7, #19]
 8012e52:	4b05      	ldr	r3, [pc, #20]	@ (8012e68 <GetElement+0x60>)
 8012e54:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012e58:	7cfa      	ldrb	r2, [r7, #19]
 8012e5a:	429a      	cmp	r2, r3
 8012e5c:	d3eb      	bcc.n	8012e36 <GetElement+0x2e>
    }

    return NULL;
 8012e5e:	2300      	movs	r3, #0
}
 8012e60:	4618      	mov	r0, r3
 8012e62:	3718      	adds	r7, #24
 8012e64:	46bd      	mov	sp, r7
 8012e66:	bd80      	pop	{r7, pc}
 8012e68:	2000193c 	.word	0x2000193c

08012e6c <LoRaMacConfirmQueueInit>:

void LoRaMacConfirmQueueInit( LoRaMacPrimitives_t* primitives )
{
 8012e6c:	b580      	push	{r7, lr}
 8012e6e:	b082      	sub	sp, #8
 8012e70:	af00      	add	r7, sp, #0
 8012e72:	6078      	str	r0, [r7, #4]
    ConfirmQueueCtx.Primitives = primitives;
 8012e74:	4a0c      	ldr	r2, [pc, #48]	@ (8012ea8 <LoRaMacConfirmQueueInit+0x3c>)
 8012e76:	687b      	ldr	r3, [r7, #4]
 8012e78:	6013      	str	r3, [r2, #0]

    // Init counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt = 0;
 8012e7a:	4b0b      	ldr	r3, [pc, #44]	@ (8012ea8 <LoRaMacConfirmQueueInit+0x3c>)
 8012e7c:	2200      	movs	r2, #0
 8012e7e:	f883 2020 	strb.w	r2, [r3, #32]

    // Init buffer
    ConfirmQueueCtx.BufferStart = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 8012e82:	4b09      	ldr	r3, [pc, #36]	@ (8012ea8 <LoRaMacConfirmQueueInit+0x3c>)
 8012e84:	4a09      	ldr	r2, [pc, #36]	@ (8012eac <LoRaMacConfirmQueueInit+0x40>)
 8012e86:	605a      	str	r2, [r3, #4]
    ConfirmQueueCtx.BufferEnd = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 8012e88:	4b07      	ldr	r3, [pc, #28]	@ (8012ea8 <LoRaMacConfirmQueueInit+0x3c>)
 8012e8a:	4a08      	ldr	r2, [pc, #32]	@ (8012eac <LoRaMacConfirmQueueInit+0x40>)
 8012e8c:	609a      	str	r2, [r3, #8]

    memset1( ( uint8_t* )ConfirmQueueCtx.Nvm.MlmeConfirmQueue, 0xFF, sizeof( ConfirmQueueCtx.Nvm.MlmeConfirmQueue ) );
 8012e8e:	2214      	movs	r2, #20
 8012e90:	21ff      	movs	r1, #255	@ 0xff
 8012e92:	4806      	ldr	r0, [pc, #24]	@ (8012eac <LoRaMacConfirmQueueInit+0x40>)
 8012e94:	f003 fe1e 	bl	8016ad4 <memset1>

    // Common status
    ConfirmQueueCtx.Nvm.CommonStatus = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8012e98:	4b03      	ldr	r3, [pc, #12]	@ (8012ea8 <LoRaMacConfirmQueueInit+0x3c>)
 8012e9a:	2201      	movs	r2, #1
 8012e9c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
}
 8012ea0:	bf00      	nop
 8012ea2:	3708      	adds	r7, #8
 8012ea4:	46bd      	mov	sp, r7
 8012ea6:	bd80      	pop	{r7, pc}
 8012ea8:	2000193c 	.word	0x2000193c
 8012eac:	20001948 	.word	0x20001948

08012eb0 <LoRaMacConfirmQueueAdd>:

bool LoRaMacConfirmQueueAdd( MlmeConfirmQueue_t* mlmeConfirm )
{
 8012eb0:	b580      	push	{r7, lr}
 8012eb2:	b082      	sub	sp, #8
 8012eb4:	af00      	add	r7, sp, #0
 8012eb6:	6078      	str	r0, [r7, #4]
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8012eb8:	4b19      	ldr	r3, [pc, #100]	@ (8012f20 <LoRaMacConfirmQueueAdd+0x70>)
 8012eba:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012ebe:	4618      	mov	r0, r3
 8012ec0:	f7ff ff92 	bl	8012de8 <IsListFull>
 8012ec4:	4603      	mov	r3, r0
 8012ec6:	2b00      	cmp	r3, #0
 8012ec8:	d001      	beq.n	8012ece <LoRaMacConfirmQueueAdd+0x1e>
    {
        // Protect the buffer against overwrites
        return false;
 8012eca:	2300      	movs	r3, #0
 8012ecc:	e024      	b.n	8012f18 <LoRaMacConfirmQueueAdd+0x68>
    }

    // Add the element to the ring buffer
    ConfirmQueueCtx.BufferEnd->Request = mlmeConfirm->Request;
 8012ece:	4b14      	ldr	r3, [pc, #80]	@ (8012f20 <LoRaMacConfirmQueueAdd+0x70>)
 8012ed0:	689b      	ldr	r3, [r3, #8]
 8012ed2:	687a      	ldr	r2, [r7, #4]
 8012ed4:	7812      	ldrb	r2, [r2, #0]
 8012ed6:	701a      	strb	r2, [r3, #0]
    ConfirmQueueCtx.BufferEnd->Status = mlmeConfirm->Status;
 8012ed8:	4b11      	ldr	r3, [pc, #68]	@ (8012f20 <LoRaMacConfirmQueueAdd+0x70>)
 8012eda:	689b      	ldr	r3, [r3, #8]
 8012edc:	687a      	ldr	r2, [r7, #4]
 8012ede:	7852      	ldrb	r2, [r2, #1]
 8012ee0:	705a      	strb	r2, [r3, #1]
    ConfirmQueueCtx.BufferEnd->RestrictCommonReadyToHandle = mlmeConfirm->RestrictCommonReadyToHandle;
 8012ee2:	4b0f      	ldr	r3, [pc, #60]	@ (8012f20 <LoRaMacConfirmQueueAdd+0x70>)
 8012ee4:	689b      	ldr	r3, [r3, #8]
 8012ee6:	687a      	ldr	r2, [r7, #4]
 8012ee8:	78d2      	ldrb	r2, [r2, #3]
 8012eea:	70da      	strb	r2, [r3, #3]
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = false;
#elif (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = mlmeConfirm->ReadyToHandle;
 8012eec:	4b0c      	ldr	r3, [pc, #48]	@ (8012f20 <LoRaMacConfirmQueueAdd+0x70>)
 8012eee:	689b      	ldr	r3, [r3, #8]
 8012ef0:	687a      	ldr	r2, [r7, #4]
 8012ef2:	7892      	ldrb	r2, [r2, #2]
 8012ef4:	709a      	strb	r2, [r3, #2]
#endif /* LORAMAC_VERSION */
    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt++;
 8012ef6:	4b0a      	ldr	r3, [pc, #40]	@ (8012f20 <LoRaMacConfirmQueueAdd+0x70>)
 8012ef8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012efc:	3301      	adds	r3, #1
 8012efe:	b2da      	uxtb	r2, r3
 8012f00:	4b07      	ldr	r3, [pc, #28]	@ (8012f20 <LoRaMacConfirmQueueAdd+0x70>)
 8012f02:	f883 2020 	strb.w	r2, [r3, #32]
    // Update end pointer
    ConfirmQueueCtx.BufferEnd = IncreaseBufferPointer( ConfirmQueueCtx.BufferEnd );
 8012f06:	4b06      	ldr	r3, [pc, #24]	@ (8012f20 <LoRaMacConfirmQueueAdd+0x70>)
 8012f08:	689b      	ldr	r3, [r3, #8]
 8012f0a:	4618      	mov	r0, r3
 8012f0c:	f7ff ff44 	bl	8012d98 <IncreaseBufferPointer>
 8012f10:	4603      	mov	r3, r0
 8012f12:	4a03      	ldr	r2, [pc, #12]	@ (8012f20 <LoRaMacConfirmQueueAdd+0x70>)
 8012f14:	6093      	str	r3, [r2, #8]

    return true;
 8012f16:	2301      	movs	r3, #1
}
 8012f18:	4618      	mov	r0, r3
 8012f1a:	3708      	adds	r7, #8
 8012f1c:	46bd      	mov	sp, r7
 8012f1e:	bd80      	pop	{r7, pc}
 8012f20:	2000193c 	.word	0x2000193c

08012f24 <LoRaMacConfirmQueueRemoveFirst>:

    return true;
}

bool LoRaMacConfirmQueueRemoveFirst( void )
{
 8012f24:	b580      	push	{r7, lr}
 8012f26:	af00      	add	r7, sp, #0
    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8012f28:	4b0e      	ldr	r3, [pc, #56]	@ (8012f64 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8012f2a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012f2e:	4618      	mov	r0, r3
 8012f30:	f7ff ff4a 	bl	8012dc8 <IsListEmpty>
 8012f34:	4603      	mov	r3, r0
 8012f36:	2b00      	cmp	r3, #0
 8012f38:	d001      	beq.n	8012f3e <LoRaMacConfirmQueueRemoveFirst+0x1a>
    {
        return false;
 8012f3a:	2300      	movs	r3, #0
 8012f3c:	e010      	b.n	8012f60 <LoRaMacConfirmQueueRemoveFirst+0x3c>
    }

    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt--;
 8012f3e:	4b09      	ldr	r3, [pc, #36]	@ (8012f64 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8012f40:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012f44:	3b01      	subs	r3, #1
 8012f46:	b2da      	uxtb	r2, r3
 8012f48:	4b06      	ldr	r3, [pc, #24]	@ (8012f64 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8012f4a:	f883 2020 	strb.w	r2, [r3, #32]
    // Update start pointer
    ConfirmQueueCtx.BufferStart = IncreaseBufferPointer( ConfirmQueueCtx.BufferStart );
 8012f4e:	4b05      	ldr	r3, [pc, #20]	@ (8012f64 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8012f50:	685b      	ldr	r3, [r3, #4]
 8012f52:	4618      	mov	r0, r3
 8012f54:	f7ff ff20 	bl	8012d98 <IncreaseBufferPointer>
 8012f58:	4603      	mov	r3, r0
 8012f5a:	4a02      	ldr	r2, [pc, #8]	@ (8012f64 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8012f5c:	6053      	str	r3, [r2, #4]

    return true;
 8012f5e:	2301      	movs	r3, #1
}
 8012f60:	4618      	mov	r0, r3
 8012f62:	bd80      	pop	{r7, pc}
 8012f64:	2000193c 	.word	0x2000193c

08012f68 <LoRaMacConfirmQueueSetStatus>:

void LoRaMacConfirmQueueSetStatus( LoRaMacEventInfoStatus_t status, Mlme_t request )
{
 8012f68:	b580      	push	{r7, lr}
 8012f6a:	b084      	sub	sp, #16
 8012f6c:	af00      	add	r7, sp, #0
 8012f6e:	4603      	mov	r3, r0
 8012f70:	460a      	mov	r2, r1
 8012f72:	71fb      	strb	r3, [r7, #7]
 8012f74:	4613      	mov	r3, r2
 8012f76:	71bb      	strb	r3, [r7, #6]
    MlmeConfirmQueue_t* element = NULL;
 8012f78:	2300      	movs	r3, #0
 8012f7a:	60fb      	str	r3, [r7, #12]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 8012f7c:	4b10      	ldr	r3, [pc, #64]	@ (8012fc0 <LoRaMacConfirmQueueSetStatus+0x58>)
 8012f7e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012f82:	4618      	mov	r0, r3
 8012f84:	f7ff ff20 	bl	8012dc8 <IsListEmpty>
 8012f88:	4603      	mov	r3, r0
 8012f8a:	f083 0301 	eor.w	r3, r3, #1
 8012f8e:	b2db      	uxtb	r3, r3
 8012f90:	2b00      	cmp	r3, #0
 8012f92:	d011      	beq.n	8012fb8 <LoRaMacConfirmQueueSetStatus+0x50>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 8012f94:	4b0a      	ldr	r3, [pc, #40]	@ (8012fc0 <LoRaMacConfirmQueueSetStatus+0x58>)
 8012f96:	6859      	ldr	r1, [r3, #4]
 8012f98:	4b09      	ldr	r3, [pc, #36]	@ (8012fc0 <LoRaMacConfirmQueueSetStatus+0x58>)
 8012f9a:	689a      	ldr	r2, [r3, #8]
 8012f9c:	79bb      	ldrb	r3, [r7, #6]
 8012f9e:	4618      	mov	r0, r3
 8012fa0:	f7ff ff32 	bl	8012e08 <GetElement>
 8012fa4:	60f8      	str	r0, [r7, #12]
        if( element != NULL )
 8012fa6:	68fb      	ldr	r3, [r7, #12]
 8012fa8:	2b00      	cmp	r3, #0
 8012faa:	d005      	beq.n	8012fb8 <LoRaMacConfirmQueueSetStatus+0x50>
        {
            element->Status = status;
 8012fac:	68fb      	ldr	r3, [r7, #12]
 8012fae:	79fa      	ldrb	r2, [r7, #7]
 8012fb0:	705a      	strb	r2, [r3, #1]
            element->ReadyToHandle = true;
 8012fb2:	68fb      	ldr	r3, [r7, #12]
 8012fb4:	2201      	movs	r2, #1
 8012fb6:	709a      	strb	r2, [r3, #2]
        }
    }
}
 8012fb8:	bf00      	nop
 8012fba:	3710      	adds	r7, #16
 8012fbc:	46bd      	mov	sp, r7
 8012fbe:	bd80      	pop	{r7, pc}
 8012fc0:	2000193c 	.word	0x2000193c

08012fc4 <LoRaMacConfirmQueueGetStatus>:

LoRaMacEventInfoStatus_t LoRaMacConfirmQueueGetStatus( Mlme_t request )
{
 8012fc4:	b580      	push	{r7, lr}
 8012fc6:	b084      	sub	sp, #16
 8012fc8:	af00      	add	r7, sp, #0
 8012fca:	4603      	mov	r3, r0
 8012fcc:	71fb      	strb	r3, [r7, #7]
    MlmeConfirmQueue_t* element = NULL;
 8012fce:	2300      	movs	r3, #0
 8012fd0:	60fb      	str	r3, [r7, #12]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 8012fd2:	4b10      	ldr	r3, [pc, #64]	@ (8013014 <LoRaMacConfirmQueueGetStatus+0x50>)
 8012fd4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012fd8:	4618      	mov	r0, r3
 8012fda:	f7ff fef5 	bl	8012dc8 <IsListEmpty>
 8012fde:	4603      	mov	r3, r0
 8012fe0:	f083 0301 	eor.w	r3, r3, #1
 8012fe4:	b2db      	uxtb	r3, r3
 8012fe6:	2b00      	cmp	r3, #0
 8012fe8:	d00e      	beq.n	8013008 <LoRaMacConfirmQueueGetStatus+0x44>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 8012fea:	4b0a      	ldr	r3, [pc, #40]	@ (8013014 <LoRaMacConfirmQueueGetStatus+0x50>)
 8012fec:	6859      	ldr	r1, [r3, #4]
 8012fee:	4b09      	ldr	r3, [pc, #36]	@ (8013014 <LoRaMacConfirmQueueGetStatus+0x50>)
 8012ff0:	689a      	ldr	r2, [r3, #8]
 8012ff2:	79fb      	ldrb	r3, [r7, #7]
 8012ff4:	4618      	mov	r0, r3
 8012ff6:	f7ff ff07 	bl	8012e08 <GetElement>
 8012ffa:	60f8      	str	r0, [r7, #12]
        if( element != NULL )
 8012ffc:	68fb      	ldr	r3, [r7, #12]
 8012ffe:	2b00      	cmp	r3, #0
 8013000:	d002      	beq.n	8013008 <LoRaMacConfirmQueueGetStatus+0x44>
        {
            return element->Status;
 8013002:	68fb      	ldr	r3, [r7, #12]
 8013004:	785b      	ldrb	r3, [r3, #1]
 8013006:	e000      	b.n	801300a <LoRaMacConfirmQueueGetStatus+0x46>
        }
    }
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 8013008:	2301      	movs	r3, #1
}
 801300a:	4618      	mov	r0, r3
 801300c:	3710      	adds	r7, #16
 801300e:	46bd      	mov	sp, r7
 8013010:	bd80      	pop	{r7, pc}
 8013012:	bf00      	nop
 8013014:	2000193c 	.word	0x2000193c

08013018 <LoRaMacConfirmQueueSetStatusCmn>:

void LoRaMacConfirmQueueSetStatusCmn( LoRaMacEventInfoStatus_t status )
{
 8013018:	b580      	push	{r7, lr}
 801301a:	b084      	sub	sp, #16
 801301c:	af00      	add	r7, sp, #0
 801301e:	4603      	mov	r3, r0
 8013020:	71fb      	strb	r3, [r7, #7]
    MlmeConfirmQueue_t* element = ConfirmQueueCtx.BufferStart;
 8013022:	4b16      	ldr	r3, [pc, #88]	@ (801307c <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8013024:	685b      	ldr	r3, [r3, #4]
 8013026:	60fb      	str	r3, [r7, #12]

    ConfirmQueueCtx.Nvm.CommonStatus = status;
 8013028:	4a14      	ldr	r2, [pc, #80]	@ (801307c <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 801302a:	79fb      	ldrb	r3, [r7, #7]
 801302c:	f882 3021 	strb.w	r3, [r2, #33]	@ 0x21

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 8013030:	4b12      	ldr	r3, [pc, #72]	@ (801307c <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8013032:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013036:	4618      	mov	r0, r3
 8013038:	f7ff fec6 	bl	8012dc8 <IsListEmpty>
 801303c:	4603      	mov	r3, r0
 801303e:	f083 0301 	eor.w	r3, r3, #1
 8013042:	b2db      	uxtb	r3, r3
 8013044:	2b00      	cmp	r3, #0
 8013046:	d015      	beq.n	8013074 <LoRaMacConfirmQueueSetStatusCmn+0x5c>
    {
        do
        {
            element->Status = status;
 8013048:	68fb      	ldr	r3, [r7, #12]
 801304a:	79fa      	ldrb	r2, [r7, #7]
 801304c:	705a      	strb	r2, [r3, #1]
            // Set the status if it is allowed to set it with a call to
            // LoRaMacConfirmQueueSetStatusCmn.
            if( element->RestrictCommonReadyToHandle == false )
 801304e:	68fb      	ldr	r3, [r7, #12]
 8013050:	78db      	ldrb	r3, [r3, #3]
 8013052:	f083 0301 	eor.w	r3, r3, #1
 8013056:	b2db      	uxtb	r3, r3
 8013058:	2b00      	cmp	r3, #0
 801305a:	d002      	beq.n	8013062 <LoRaMacConfirmQueueSetStatusCmn+0x4a>
            {
                element->ReadyToHandle = true;
 801305c:	68fb      	ldr	r3, [r7, #12]
 801305e:	2201      	movs	r2, #1
 8013060:	709a      	strb	r2, [r3, #2]
            }
            element = IncreaseBufferPointer( element );
 8013062:	68f8      	ldr	r0, [r7, #12]
 8013064:	f7ff fe98 	bl	8012d98 <IncreaseBufferPointer>
 8013068:	60f8      	str	r0, [r7, #12]
        }while( element != ConfirmQueueCtx.BufferEnd );
 801306a:	4b04      	ldr	r3, [pc, #16]	@ (801307c <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 801306c:	689b      	ldr	r3, [r3, #8]
 801306e:	68fa      	ldr	r2, [r7, #12]
 8013070:	429a      	cmp	r2, r3
 8013072:	d1e9      	bne.n	8013048 <LoRaMacConfirmQueueSetStatusCmn+0x30>
    }
}
 8013074:	bf00      	nop
 8013076:	3710      	adds	r7, #16
 8013078:	46bd      	mov	sp, r7
 801307a:	bd80      	pop	{r7, pc}
 801307c:	2000193c 	.word	0x2000193c

08013080 <LoRaMacConfirmQueueIsCmdActive>:
{
    return ConfirmQueueCtx.Nvm.CommonStatus;
}

bool LoRaMacConfirmQueueIsCmdActive( Mlme_t request )
{
 8013080:	b580      	push	{r7, lr}
 8013082:	b082      	sub	sp, #8
 8013084:	af00      	add	r7, sp, #0
 8013086:	4603      	mov	r3, r0
 8013088:	71fb      	strb	r3, [r7, #7]
    if( GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd ) != NULL )
 801308a:	4b09      	ldr	r3, [pc, #36]	@ (80130b0 <LoRaMacConfirmQueueIsCmdActive+0x30>)
 801308c:	6859      	ldr	r1, [r3, #4]
 801308e:	4b08      	ldr	r3, [pc, #32]	@ (80130b0 <LoRaMacConfirmQueueIsCmdActive+0x30>)
 8013090:	689a      	ldr	r2, [r3, #8]
 8013092:	79fb      	ldrb	r3, [r7, #7]
 8013094:	4618      	mov	r0, r3
 8013096:	f7ff feb7 	bl	8012e08 <GetElement>
 801309a:	4603      	mov	r3, r0
 801309c:	2b00      	cmp	r3, #0
 801309e:	d001      	beq.n	80130a4 <LoRaMacConfirmQueueIsCmdActive+0x24>
    {
        return true;
 80130a0:	2301      	movs	r3, #1
 80130a2:	e000      	b.n	80130a6 <LoRaMacConfirmQueueIsCmdActive+0x26>
    }
    return false;
 80130a4:	2300      	movs	r3, #0
}
 80130a6:	4618      	mov	r0, r3
 80130a8:	3708      	adds	r7, #8
 80130aa:	46bd      	mov	sp, r7
 80130ac:	bd80      	pop	{r7, pc}
 80130ae:	bf00      	nop
 80130b0:	2000193c 	.word	0x2000193c

080130b4 <LoRaMacConfirmQueueHandleCb>:

void LoRaMacConfirmQueueHandleCb( MlmeConfirm_t* mlmeConfirm )
{
 80130b4:	b580      	push	{r7, lr}
 80130b6:	b084      	sub	sp, #16
 80130b8:	af00      	add	r7, sp, #0
 80130ba:	6078      	str	r0, [r7, #4]
    uint8_t nbElements = ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 80130bc:	4b22      	ldr	r3, [pc, #136]	@ (8013148 <LoRaMacConfirmQueueHandleCb+0x94>)
 80130be:	f893 3020 	ldrb.w	r3, [r3, #32]
 80130c2:	73bb      	strb	r3, [r7, #14]
    bool readyToHandle = false;
 80130c4:	2300      	movs	r3, #0
 80130c6:	737b      	strb	r3, [r7, #13]
    MlmeConfirmQueue_t mlmeConfirmToStore;

    for( uint8_t i = 0; i < nbElements; i++ )
 80130c8:	2300      	movs	r3, #0
 80130ca:	73fb      	strb	r3, [r7, #15]
 80130cc:	e032      	b.n	8013134 <LoRaMacConfirmQueueHandleCb+0x80>
    {
        mlmeConfirm->MlmeRequest = ConfirmQueueCtx.BufferStart->Request;
 80130ce:	4b1e      	ldr	r3, [pc, #120]	@ (8013148 <LoRaMacConfirmQueueHandleCb+0x94>)
 80130d0:	685b      	ldr	r3, [r3, #4]
 80130d2:	781a      	ldrb	r2, [r3, #0]
 80130d4:	687b      	ldr	r3, [r7, #4]
 80130d6:	701a      	strb	r2, [r3, #0]
        mlmeConfirm->Status = ConfirmQueueCtx.BufferStart->Status;
 80130d8:	4b1b      	ldr	r3, [pc, #108]	@ (8013148 <LoRaMacConfirmQueueHandleCb+0x94>)
 80130da:	685b      	ldr	r3, [r3, #4]
 80130dc:	785a      	ldrb	r2, [r3, #1]
 80130de:	687b      	ldr	r3, [r7, #4]
 80130e0:	705a      	strb	r2, [r3, #1]
        readyToHandle = ConfirmQueueCtx.BufferStart->ReadyToHandle;
 80130e2:	4b19      	ldr	r3, [pc, #100]	@ (8013148 <LoRaMacConfirmQueueHandleCb+0x94>)
 80130e4:	685b      	ldr	r3, [r3, #4]
 80130e6:	789b      	ldrb	r3, [r3, #2]
 80130e8:	737b      	strb	r3, [r7, #13]

        if( readyToHandle == true )
 80130ea:	7b7b      	ldrb	r3, [r7, #13]
 80130ec:	2b00      	cmp	r3, #0
 80130ee:	d005      	beq.n	80130fc <LoRaMacConfirmQueueHandleCb+0x48>
        {
            ConfirmQueueCtx.Primitives->MacMlmeConfirm( mlmeConfirm );
 80130f0:	4b15      	ldr	r3, [pc, #84]	@ (8013148 <LoRaMacConfirmQueueHandleCb+0x94>)
 80130f2:	681b      	ldr	r3, [r3, #0]
 80130f4:	689b      	ldr	r3, [r3, #8]
 80130f6:	6878      	ldr	r0, [r7, #4]
 80130f8:	4798      	blx	r3
 80130fa:	e00b      	b.n	8013114 <LoRaMacConfirmQueueHandleCb+0x60>
        }
        else
        {
            // The request is not processed yet. Store the state.
            mlmeConfirmToStore.Request = ConfirmQueueCtx.BufferStart->Request;
 80130fc:	4b12      	ldr	r3, [pc, #72]	@ (8013148 <LoRaMacConfirmQueueHandleCb+0x94>)
 80130fe:	685b      	ldr	r3, [r3, #4]
 8013100:	781b      	ldrb	r3, [r3, #0]
 8013102:	723b      	strb	r3, [r7, #8]
            mlmeConfirmToStore.Status = ConfirmQueueCtx.BufferStart->Status;
 8013104:	4b10      	ldr	r3, [pc, #64]	@ (8013148 <LoRaMacConfirmQueueHandleCb+0x94>)
 8013106:	685b      	ldr	r3, [r3, #4]
 8013108:	785b      	ldrb	r3, [r3, #1]
 801310a:	727b      	strb	r3, [r7, #9]
            mlmeConfirmToStore.RestrictCommonReadyToHandle = ConfirmQueueCtx.BufferStart->RestrictCommonReadyToHandle;
 801310c:	4b0e      	ldr	r3, [pc, #56]	@ (8013148 <LoRaMacConfirmQueueHandleCb+0x94>)
 801310e:	685b      	ldr	r3, [r3, #4]
 8013110:	78db      	ldrb	r3, [r3, #3]
 8013112:	72fb      	strb	r3, [r7, #11]
        }

        // Increase the pointer afterwards to prevent overwrites
        LoRaMacConfirmQueueRemoveFirst( );
 8013114:	f7ff ff06 	bl	8012f24 <LoRaMacConfirmQueueRemoveFirst>

        if( readyToHandle == false )
 8013118:	7b7b      	ldrb	r3, [r7, #13]
 801311a:	f083 0301 	eor.w	r3, r3, #1
 801311e:	b2db      	uxtb	r3, r3
 8013120:	2b00      	cmp	r3, #0
 8013122:	d004      	beq.n	801312e <LoRaMacConfirmQueueHandleCb+0x7a>
        {
            // Add a request which has not been finished again to the queue
            LoRaMacConfirmQueueAdd( &mlmeConfirmToStore );
 8013124:	f107 0308 	add.w	r3, r7, #8
 8013128:	4618      	mov	r0, r3
 801312a:	f7ff fec1 	bl	8012eb0 <LoRaMacConfirmQueueAdd>
    for( uint8_t i = 0; i < nbElements; i++ )
 801312e:	7bfb      	ldrb	r3, [r7, #15]
 8013130:	3301      	adds	r3, #1
 8013132:	73fb      	strb	r3, [r7, #15]
 8013134:	7bfa      	ldrb	r2, [r7, #15]
 8013136:	7bbb      	ldrb	r3, [r7, #14]
 8013138:	429a      	cmp	r2, r3
 801313a:	d3c8      	bcc.n	80130ce <LoRaMacConfirmQueueHandleCb+0x1a>
        }
    }
}
 801313c:	bf00      	nop
 801313e:	bf00      	nop
 8013140:	3710      	adds	r7, #16
 8013142:	46bd      	mov	sp, r7
 8013144:	bd80      	pop	{r7, pc}
 8013146:	bf00      	nop
 8013148:	2000193c 	.word	0x2000193c

0801314c <LoRaMacConfirmQueueGetCnt>:

uint8_t LoRaMacConfirmQueueGetCnt( void )
{
 801314c:	b480      	push	{r7}
 801314e:	af00      	add	r7, sp, #0
    return ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 8013150:	4b03      	ldr	r3, [pc, #12]	@ (8013160 <LoRaMacConfirmQueueGetCnt+0x14>)
 8013152:	f893 3020 	ldrb.w	r3, [r3, #32]
}
 8013156:	4618      	mov	r0, r3
 8013158:	46bd      	mov	sp, r7
 801315a:	bc80      	pop	{r7}
 801315c:	4770      	bx	lr
 801315e:	bf00      	nop
 8013160:	2000193c 	.word	0x2000193c

08013164 <LoRaMacConfirmQueueIsFull>:

bool LoRaMacConfirmQueueIsFull( void )
{
 8013164:	b580      	push	{r7, lr}
 8013166:	af00      	add	r7, sp, #0
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8013168:	4b06      	ldr	r3, [pc, #24]	@ (8013184 <LoRaMacConfirmQueueIsFull+0x20>)
 801316a:	f893 3020 	ldrb.w	r3, [r3, #32]
 801316e:	4618      	mov	r0, r3
 8013170:	f7ff fe3a 	bl	8012de8 <IsListFull>
 8013174:	4603      	mov	r3, r0
 8013176:	2b00      	cmp	r3, #0
 8013178:	d001      	beq.n	801317e <LoRaMacConfirmQueueIsFull+0x1a>
    {
        return true;
 801317a:	2301      	movs	r3, #1
 801317c:	e000      	b.n	8013180 <LoRaMacConfirmQueueIsFull+0x1c>
    }
    else
    {
        return false;
 801317e:	2300      	movs	r3, #0
    }
}
 8013180:	4618      	mov	r0, r3
 8013182:	bd80      	pop	{r7, pc}
 8013184:	2000193c 	.word	0x2000193c

08013188 <PayloadEncrypt>:
 * \param [in] size             - Size of data
 * \param [in,out] buffer       - Data buffer
 * \retval                      - Status of the operation
 */
static LoRaMacCryptoStatus_t PayloadEncrypt( uint8_t* buffer, int16_t size, KeyIdentifier_t keyID, uint32_t address, uint8_t dir, uint32_t frameCounter )
{
 8013188:	b580      	push	{r7, lr}
 801318a:	b08e      	sub	sp, #56	@ 0x38
 801318c:	af00      	add	r7, sp, #0
 801318e:	60f8      	str	r0, [r7, #12]
 8013190:	607b      	str	r3, [r7, #4]
 8013192:	460b      	mov	r3, r1
 8013194:	817b      	strh	r3, [r7, #10]
 8013196:	4613      	mov	r3, r2
 8013198:	727b      	strb	r3, [r7, #9]
    if( buffer == 0 )
 801319a:	68fb      	ldr	r3, [r7, #12]
 801319c:	2b00      	cmp	r3, #0
 801319e:	d101      	bne.n	80131a4 <PayloadEncrypt+0x1c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80131a0:	2309      	movs	r3, #9
 80131a2:	e086      	b.n	80132b2 <PayloadEncrypt+0x12a>
    }

    uint8_t bufferIndex = 0;
 80131a4:	2300      	movs	r3, #0
 80131a6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    uint16_t ctr = 1;
 80131aa:	2301      	movs	r3, #1
 80131ac:	86bb      	strh	r3, [r7, #52]	@ 0x34
    uint8_t sBlock[16] = { 0 };
 80131ae:	2300      	movs	r3, #0
 80131b0:	623b      	str	r3, [r7, #32]
 80131b2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80131b6:	2200      	movs	r2, #0
 80131b8:	601a      	str	r2, [r3, #0]
 80131ba:	605a      	str	r2, [r3, #4]
 80131bc:	609a      	str	r2, [r3, #8]
    uint8_t aBlock[16] = { 0 };
 80131be:	2300      	movs	r3, #0
 80131c0:	613b      	str	r3, [r7, #16]
 80131c2:	f107 0314 	add.w	r3, r7, #20
 80131c6:	2200      	movs	r2, #0
 80131c8:	601a      	str	r2, [r3, #0]
 80131ca:	605a      	str	r2, [r3, #4]
 80131cc:	609a      	str	r2, [r3, #8]

    aBlock[0] = 0x01;
 80131ce:	2301      	movs	r3, #1
 80131d0:	743b      	strb	r3, [r7, #16]

    aBlock[5] = dir;
 80131d2:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 80131d6:	757b      	strb	r3, [r7, #21]

    aBlock[6] = address & 0xFF;
 80131d8:	687b      	ldr	r3, [r7, #4]
 80131da:	b2db      	uxtb	r3, r3
 80131dc:	75bb      	strb	r3, [r7, #22]
    aBlock[7] = ( address >> 8 ) & 0xFF;
 80131de:	687b      	ldr	r3, [r7, #4]
 80131e0:	0a1b      	lsrs	r3, r3, #8
 80131e2:	b2db      	uxtb	r3, r3
 80131e4:	75fb      	strb	r3, [r7, #23]
    aBlock[8] = ( address >> 16 ) & 0xFF;
 80131e6:	687b      	ldr	r3, [r7, #4]
 80131e8:	0c1b      	lsrs	r3, r3, #16
 80131ea:	b2db      	uxtb	r3, r3
 80131ec:	763b      	strb	r3, [r7, #24]
    aBlock[9] = ( address >> 24 ) & 0xFF;
 80131ee:	687b      	ldr	r3, [r7, #4]
 80131f0:	0e1b      	lsrs	r3, r3, #24
 80131f2:	b2db      	uxtb	r3, r3
 80131f4:	767b      	strb	r3, [r7, #25]

    aBlock[10] = frameCounter & 0xFF;
 80131f6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80131f8:	b2db      	uxtb	r3, r3
 80131fa:	76bb      	strb	r3, [r7, #26]
    aBlock[11] = ( frameCounter >> 8 ) & 0xFF;
 80131fc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80131fe:	0a1b      	lsrs	r3, r3, #8
 8013200:	b2db      	uxtb	r3, r3
 8013202:	76fb      	strb	r3, [r7, #27]
    aBlock[12] = ( frameCounter >> 16 ) & 0xFF;
 8013204:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013206:	0c1b      	lsrs	r3, r3, #16
 8013208:	b2db      	uxtb	r3, r3
 801320a:	773b      	strb	r3, [r7, #28]
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
 801320c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801320e:	0e1b      	lsrs	r3, r3, #24
 8013210:	b2db      	uxtb	r3, r3
 8013212:	777b      	strb	r3, [r7, #29]

    while( size > 0 )
 8013214:	e048      	b.n	80132a8 <PayloadEncrypt+0x120>
    {
        aBlock[15] = ctr & 0xFF;
 8013216:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8013218:	b2db      	uxtb	r3, r3
 801321a:	77fb      	strb	r3, [r7, #31]
        ctr++;
 801321c:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 801321e:	3301      	adds	r3, #1
 8013220:	86bb      	strh	r3, [r7, #52]	@ 0x34
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 8013222:	f107 0320 	add.w	r3, r7, #32
 8013226:	7a7a      	ldrb	r2, [r7, #9]
 8013228:	f107 0010 	add.w	r0, r7, #16
 801322c:	2110      	movs	r1, #16
 801322e:	f7f8 fce2 	bl	800bbf6 <SecureElementAesEncrypt>
 8013232:	4603      	mov	r3, r0
 8013234:	2b00      	cmp	r3, #0
 8013236:	d001      	beq.n	801323c <PayloadEncrypt+0xb4>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8013238:	230e      	movs	r3, #14
 801323a:	e03a      	b.n	80132b2 <PayloadEncrypt+0x12a>
        }

        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 801323c:	2300      	movs	r3, #0
 801323e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 8013242:	e01e      	b.n	8013282 <PayloadEncrypt+0xfa>
        {
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 8013244:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8013248:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 801324c:	4413      	add	r3, r2
 801324e:	461a      	mov	r2, r3
 8013250:	68fb      	ldr	r3, [r7, #12]
 8013252:	4413      	add	r3, r2
 8013254:	7819      	ldrb	r1, [r3, #0]
 8013256:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 801325a:	3338      	adds	r3, #56	@ 0x38
 801325c:	443b      	add	r3, r7
 801325e:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 8013262:	f897 0037 	ldrb.w	r0, [r7, #55]	@ 0x37
 8013266:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 801326a:	4403      	add	r3, r0
 801326c:	4618      	mov	r0, r3
 801326e:	68fb      	ldr	r3, [r7, #12]
 8013270:	4403      	add	r3, r0
 8013272:	404a      	eors	r2, r1
 8013274:	b2d2      	uxtb	r2, r2
 8013276:	701a      	strb	r2, [r3, #0]
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 8013278:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 801327c:	3301      	adds	r3, #1
 801327e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 8013282:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8013286:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 801328a:	2a10      	cmp	r2, #16
 801328c:	bfa8      	it	ge
 801328e:	2210      	movge	r2, #16
 8013290:	b212      	sxth	r2, r2
 8013292:	4293      	cmp	r3, r2
 8013294:	dbd6      	blt.n	8013244 <PayloadEncrypt+0xbc>
        }
        size -= 16;
 8013296:	897b      	ldrh	r3, [r7, #10]
 8013298:	3b10      	subs	r3, #16
 801329a:	b29b      	uxth	r3, r3
 801329c:	817b      	strh	r3, [r7, #10]
        bufferIndex += 16;
 801329e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80132a2:	3310      	adds	r3, #16
 80132a4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    while( size > 0 )
 80132a8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80132ac:	2b00      	cmp	r3, #0
 80132ae:	dcb2      	bgt.n	8013216 <PayloadEncrypt+0x8e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 80132b0:	2300      	movs	r3, #0
}
 80132b2:	4618      	mov	r0, r3
 80132b4:	3738      	adds	r7, #56	@ 0x38
 80132b6:	46bd      	mov	sp, r7
 80132b8:	bd80      	pop	{r7, pc}

080132ba <PrepareB0>:
 * \param [in] fCnt           - Frame counter
 * \param [in,out] b0         - B0 block
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t PrepareB0( uint16_t msgLen, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint8_t* b0 )
{
 80132ba:	b490      	push	{r4, r7}
 80132bc:	b082      	sub	sp, #8
 80132be:	af00      	add	r7, sp, #0
 80132c0:	4604      	mov	r4, r0
 80132c2:	4608      	mov	r0, r1
 80132c4:	4611      	mov	r1, r2
 80132c6:	461a      	mov	r2, r3
 80132c8:	4623      	mov	r3, r4
 80132ca:	80fb      	strh	r3, [r7, #6]
 80132cc:	4603      	mov	r3, r0
 80132ce:	717b      	strb	r3, [r7, #5]
 80132d0:	460b      	mov	r3, r1
 80132d2:	713b      	strb	r3, [r7, #4]
 80132d4:	4613      	mov	r3, r2
 80132d6:	70fb      	strb	r3, [r7, #3]
    if( b0 == 0 )
 80132d8:	69bb      	ldr	r3, [r7, #24]
 80132da:	2b00      	cmp	r3, #0
 80132dc:	d101      	bne.n	80132e2 <PrepareB0+0x28>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80132de:	2309      	movs	r3, #9
 80132e0:	e04e      	b.n	8013380 <PrepareB0+0xc6>
    }

    b0[0] = 0x49;
 80132e2:	69bb      	ldr	r3, [r7, #24]
 80132e4:	2249      	movs	r2, #73	@ 0x49
 80132e6:	701a      	strb	r2, [r3, #0]
    }
    else
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */
    /* ST_WORAROUND_END */
    {
        b0[1] = 0x00;
 80132e8:	69bb      	ldr	r3, [r7, #24]
 80132ea:	3301      	adds	r3, #1
 80132ec:	2200      	movs	r2, #0
 80132ee:	701a      	strb	r2, [r3, #0]
        b0[2] = 0x00;
 80132f0:	69bb      	ldr	r3, [r7, #24]
 80132f2:	3302      	adds	r3, #2
 80132f4:	2200      	movs	r2, #0
 80132f6:	701a      	strb	r2, [r3, #0]
    }

    b0[3] = 0x00;
 80132f8:	69bb      	ldr	r3, [r7, #24]
 80132fa:	3303      	adds	r3, #3
 80132fc:	2200      	movs	r2, #0
 80132fe:	701a      	strb	r2, [r3, #0]
    b0[4] = 0x00;
 8013300:	69bb      	ldr	r3, [r7, #24]
 8013302:	3304      	adds	r3, #4
 8013304:	2200      	movs	r2, #0
 8013306:	701a      	strb	r2, [r3, #0]

    b0[5] = dir;
 8013308:	69bb      	ldr	r3, [r7, #24]
 801330a:	3305      	adds	r3, #5
 801330c:	78fa      	ldrb	r2, [r7, #3]
 801330e:	701a      	strb	r2, [r3, #0]

    b0[6] = devAddr & 0xFF;
 8013310:	69bb      	ldr	r3, [r7, #24]
 8013312:	3306      	adds	r3, #6
 8013314:	693a      	ldr	r2, [r7, #16]
 8013316:	b2d2      	uxtb	r2, r2
 8013318:	701a      	strb	r2, [r3, #0]
    b0[7] = ( devAddr >> 8 ) & 0xFF;
 801331a:	693b      	ldr	r3, [r7, #16]
 801331c:	0a1a      	lsrs	r2, r3, #8
 801331e:	69bb      	ldr	r3, [r7, #24]
 8013320:	3307      	adds	r3, #7
 8013322:	b2d2      	uxtb	r2, r2
 8013324:	701a      	strb	r2, [r3, #0]
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 8013326:	693b      	ldr	r3, [r7, #16]
 8013328:	0c1a      	lsrs	r2, r3, #16
 801332a:	69bb      	ldr	r3, [r7, #24]
 801332c:	3308      	adds	r3, #8
 801332e:	b2d2      	uxtb	r2, r2
 8013330:	701a      	strb	r2, [r3, #0]
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 8013332:	693b      	ldr	r3, [r7, #16]
 8013334:	0e1a      	lsrs	r2, r3, #24
 8013336:	69bb      	ldr	r3, [r7, #24]
 8013338:	3309      	adds	r3, #9
 801333a:	b2d2      	uxtb	r2, r2
 801333c:	701a      	strb	r2, [r3, #0]

    b0[10] = fCnt & 0xFF;
 801333e:	69bb      	ldr	r3, [r7, #24]
 8013340:	330a      	adds	r3, #10
 8013342:	697a      	ldr	r2, [r7, #20]
 8013344:	b2d2      	uxtb	r2, r2
 8013346:	701a      	strb	r2, [r3, #0]
    b0[11] = ( fCnt >> 8 ) & 0xFF;
 8013348:	697b      	ldr	r3, [r7, #20]
 801334a:	0a1a      	lsrs	r2, r3, #8
 801334c:	69bb      	ldr	r3, [r7, #24]
 801334e:	330b      	adds	r3, #11
 8013350:	b2d2      	uxtb	r2, r2
 8013352:	701a      	strb	r2, [r3, #0]
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 8013354:	697b      	ldr	r3, [r7, #20]
 8013356:	0c1a      	lsrs	r2, r3, #16
 8013358:	69bb      	ldr	r3, [r7, #24]
 801335a:	330c      	adds	r3, #12
 801335c:	b2d2      	uxtb	r2, r2
 801335e:	701a      	strb	r2, [r3, #0]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 8013360:	697b      	ldr	r3, [r7, #20]
 8013362:	0e1a      	lsrs	r2, r3, #24
 8013364:	69bb      	ldr	r3, [r7, #24]
 8013366:	330d      	adds	r3, #13
 8013368:	b2d2      	uxtb	r2, r2
 801336a:	701a      	strb	r2, [r3, #0]

    b0[14] = 0x00;
 801336c:	69bb      	ldr	r3, [r7, #24]
 801336e:	330e      	adds	r3, #14
 8013370:	2200      	movs	r2, #0
 8013372:	701a      	strb	r2, [r3, #0]

    b0[15] = msgLen & 0xFF;
 8013374:	69bb      	ldr	r3, [r7, #24]
 8013376:	330f      	adds	r3, #15
 8013378:	88fa      	ldrh	r2, [r7, #6]
 801337a:	b2d2      	uxtb	r2, r2
 801337c:	701a      	strb	r2, [r3, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 801337e:	2300      	movs	r3, #0
}
 8013380:	4618      	mov	r0, r3
 8013382:	3708      	adds	r7, #8
 8013384:	46bd      	mov	sp, r7
 8013386:	bc90      	pop	{r4, r7}
 8013388:	4770      	bx	lr

0801338a <ComputeCmacB0>:
 * \param [in] fCnt           - Frame counter
 * \param [out] cmac          - Computed cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t ComputeCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t* cmac )
{
 801338a:	b590      	push	{r4, r7, lr}
 801338c:	b08b      	sub	sp, #44	@ 0x2c
 801338e:	af04      	add	r7, sp, #16
 8013390:	6078      	str	r0, [r7, #4]
 8013392:	4608      	mov	r0, r1
 8013394:	4611      	mov	r1, r2
 8013396:	461a      	mov	r2, r3
 8013398:	4603      	mov	r3, r0
 801339a:	807b      	strh	r3, [r7, #2]
 801339c:	460b      	mov	r3, r1
 801339e:	707b      	strb	r3, [r7, #1]
 80133a0:	4613      	mov	r3, r2
 80133a2:	703b      	strb	r3, [r7, #0]
    if( ( msg == 0 ) || ( cmac == 0 ) )
 80133a4:	687b      	ldr	r3, [r7, #4]
 80133a6:	2b00      	cmp	r3, #0
 80133a8:	d002      	beq.n	80133b0 <ComputeCmacB0+0x26>
 80133aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80133ac:	2b00      	cmp	r3, #0
 80133ae:	d101      	bne.n	80133b4 <ComputeCmacB0+0x2a>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80133b0:	2309      	movs	r3, #9
 80133b2:	e024      	b.n	80133fe <ComputeCmacB0+0x74>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 80133b4:	887b      	ldrh	r3, [r7, #2]
 80133b6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80133ba:	d901      	bls.n	80133c0 <ComputeCmacB0+0x36>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 80133bc:	230d      	movs	r3, #13
 80133be:	e01e      	b.n	80133fe <ComputeCmacB0+0x74>
    }

    uint8_t micBuff[MIC_BLOCK_BX_SIZE];

    // Initialize the first Block
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 80133c0:	f897 4028 	ldrb.w	r4, [r7, #40]	@ 0x28
 80133c4:	783a      	ldrb	r2, [r7, #0]
 80133c6:	7879      	ldrb	r1, [r7, #1]
 80133c8:	8878      	ldrh	r0, [r7, #2]
 80133ca:	f107 0308 	add.w	r3, r7, #8
 80133ce:	9302      	str	r3, [sp, #8]
 80133d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80133d2:	9301      	str	r3, [sp, #4]
 80133d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80133d6:	9300      	str	r3, [sp, #0]
 80133d8:	4623      	mov	r3, r4
 80133da:	f7ff ff6e 	bl	80132ba <PrepareB0>

    if( SecureElementComputeAesCmac( micBuff, msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
 80133de:	7879      	ldrb	r1, [r7, #1]
 80133e0:	887a      	ldrh	r2, [r7, #2]
 80133e2:	f107 0008 	add.w	r0, r7, #8
 80133e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80133e8:	9300      	str	r3, [sp, #0]
 80133ea:	460b      	mov	r3, r1
 80133ec:	6879      	ldr	r1, [r7, #4]
 80133ee:	f7f8 fbb5 	bl	800bb5c <SecureElementComputeAesCmac>
 80133f2:	4603      	mov	r3, r0
 80133f4:	2b00      	cmp	r3, #0
 80133f6:	d001      	beq.n	80133fc <ComputeCmacB0+0x72>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80133f8:	230e      	movs	r3, #14
 80133fa:	e000      	b.n	80133fe <ComputeCmacB0+0x74>
    }
    return LORAMAC_CRYPTO_SUCCESS;
 80133fc:	2300      	movs	r3, #0
}
 80133fe:	4618      	mov	r0, r3
 8013400:	371c      	adds	r7, #28
 8013402:	46bd      	mov	sp, r7
 8013404:	bd90      	pop	{r4, r7, pc}

08013406 <VerifyCmacB0>:
 * \param [in] fCnt           - Frame counter
 * \param [in] expectedCmac   - Expected cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t VerifyCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t expectedCmac )
{
 8013406:	b590      	push	{r4, r7, lr}
 8013408:	b0cd      	sub	sp, #308	@ 0x134
 801340a:	af04      	add	r7, sp, #16
 801340c:	f507 7490 	add.w	r4, r7, #288	@ 0x120
 8013410:	f5a4 748e 	sub.w	r4, r4, #284	@ 0x11c
 8013414:	6020      	str	r0, [r4, #0]
 8013416:	460c      	mov	r4, r1
 8013418:	4610      	mov	r0, r2
 801341a:	4619      	mov	r1, r3
 801341c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8013420:	f5a3 738f 	sub.w	r3, r3, #286	@ 0x11e
 8013424:	4622      	mov	r2, r4
 8013426:	801a      	strh	r2, [r3, #0]
 8013428:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 801342c:	f2a3 131f 	subw	r3, r3, #287	@ 0x11f
 8013430:	4602      	mov	r2, r0
 8013432:	701a      	strb	r2, [r3, #0]
 8013434:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8013438:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 801343c:	460a      	mov	r2, r1
 801343e:	701a      	strb	r2, [r3, #0]
    if( msg == 0 )
 8013440:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8013444:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8013448:	681b      	ldr	r3, [r3, #0]
 801344a:	2b00      	cmp	r3, #0
 801344c:	d101      	bne.n	8013452 <VerifyCmacB0+0x4c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 801344e:	2309      	movs	r3, #9
 8013450:	e063      	b.n	801351a <VerifyCmacB0+0x114>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 8013452:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8013456:	f5a3 738f 	sub.w	r3, r3, #286	@ 0x11e
 801345a:	881b      	ldrh	r3, [r3, #0]
 801345c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8013460:	d901      	bls.n	8013466 <VerifyCmacB0+0x60>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 8013462:	230d      	movs	r3, #13
 8013464:	e059      	b.n	801351a <VerifyCmacB0+0x114>
    }

    uint8_t micBuff[CRYPTO_BUFFER_SIZE];
    memset1( micBuff, 0, CRYPTO_BUFFER_SIZE );
 8013466:	f107 030c 	add.w	r3, r7, #12
 801346a:	f44f 7288 	mov.w	r2, #272	@ 0x110
 801346e:	2100      	movs	r1, #0
 8013470:	4618      	mov	r0, r3
 8013472:	f003 fb2f 	bl	8016ad4 <memset1>

    // Initialize the first Block
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 8013476:	f897 4130 	ldrb.w	r4, [r7, #304]	@ 0x130
 801347a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 801347e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8013482:	781a      	ldrb	r2, [r3, #0]
 8013484:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8013488:	f2a3 131f 	subw	r3, r3, #287	@ 0x11f
 801348c:	7819      	ldrb	r1, [r3, #0]
 801348e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8013492:	f5a3 738f 	sub.w	r3, r3, #286	@ 0x11e
 8013496:	8818      	ldrh	r0, [r3, #0]
 8013498:	f107 030c 	add.w	r3, r7, #12
 801349c:	9302      	str	r3, [sp, #8]
 801349e:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80134a2:	9301      	str	r3, [sp, #4]
 80134a4:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80134a8:	9300      	str	r3, [sp, #0]
 80134aa:	4623      	mov	r3, r4
 80134ac:	f7ff ff05 	bl	80132ba <PrepareB0>

    // Copy the given data to the mic computation buffer
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
 80134b0:	f107 030c 	add.w	r3, r7, #12
 80134b4:	3310      	adds	r3, #16
 80134b6:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 80134ba:	f5a2 728f 	sub.w	r2, r2, #286	@ 0x11e
 80134be:	8812      	ldrh	r2, [r2, #0]
 80134c0:	f507 7190 	add.w	r1, r7, #288	@ 0x120
 80134c4:	f5a1 718e 	sub.w	r1, r1, #284	@ 0x11c
 80134c8:	6809      	ldr	r1, [r1, #0]
 80134ca:	4618      	mov	r0, r3
 80134cc:	f003 fac7 	bl	8016a5e <memcpy1>

    SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 80134d0:	2306      	movs	r3, #6
 80134d2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    retval = SecureElementVerifyAesCmac( micBuff, ( len + MIC_BLOCK_BX_SIZE ), expectedCmac, keyID );
 80134d6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80134da:	f5a3 738f 	sub.w	r3, r3, #286	@ 0x11e
 80134de:	881b      	ldrh	r3, [r3, #0]
 80134e0:	3310      	adds	r3, #16
 80134e2:	b299      	uxth	r1, r3
 80134e4:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80134e8:	f2a3 131f 	subw	r3, r3, #287	@ 0x11f
 80134ec:	781b      	ldrb	r3, [r3, #0]
 80134ee:	f107 000c 	add.w	r0, r7, #12
 80134f2:	f8d7 213c 	ldr.w	r2, [r7, #316]	@ 0x13c
 80134f6:	f7f8 fb4f 	bl	800bb98 <SecureElementVerifyAesCmac>
 80134fa:	4603      	mov	r3, r0
 80134fc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

    if( retval == SECURE_ELEMENT_SUCCESS )
 8013500:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8013504:	2b00      	cmp	r3, #0
 8013506:	d101      	bne.n	801350c <VerifyCmacB0+0x106>
    {
        return LORAMAC_CRYPTO_SUCCESS;
 8013508:	2300      	movs	r3, #0
 801350a:	e006      	b.n	801351a <VerifyCmacB0+0x114>
    }
    else if( retval == SECURE_ELEMENT_FAIL_CMAC )
 801350c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8013510:	2b01      	cmp	r3, #1
 8013512:	d101      	bne.n	8013518 <VerifyCmacB0+0x112>
    {
        return LORAMAC_CRYPTO_FAIL_MIC;
 8013514:	2301      	movs	r3, #1
 8013516:	e000      	b.n	801351a <VerifyCmacB0+0x114>
    }

    return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8013518:	230e      	movs	r3, #14
}
 801351a:	4618      	mov	r0, r3
 801351c:	f507 7792 	add.w	r7, r7, #292	@ 0x124
 8013520:	46bd      	mov	sp, r7
 8013522:	bd90      	pop	{r4, r7, pc}

08013524 <GetKeyAddrItem>:
 * \param [in] addrID         - Address identifier
 * \param [out] keyItem       - Key item reference
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t GetKeyAddrItem( AddressIdentifier_t addrID, KeyAddr_t** item )
{
 8013524:	b480      	push	{r7}
 8013526:	b085      	sub	sp, #20
 8013528:	af00      	add	r7, sp, #0
 801352a:	4603      	mov	r3, r0
 801352c:	6039      	str	r1, [r7, #0]
 801352e:	71fb      	strb	r3, [r7, #7]
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 8013530:	2300      	movs	r3, #0
 8013532:	73fb      	strb	r3, [r7, #15]
 8013534:	e011      	b.n	801355a <GetKeyAddrItem+0x36>
    {
        if( KeyAddrList[i].AddrID == addrID )
 8013536:	7bfb      	ldrb	r3, [r7, #15]
 8013538:	4a0c      	ldr	r2, [pc, #48]	@ (801356c <GetKeyAddrItem+0x48>)
 801353a:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 801353e:	79fa      	ldrb	r2, [r7, #7]
 8013540:	429a      	cmp	r2, r3
 8013542:	d107      	bne.n	8013554 <GetKeyAddrItem+0x30>
        {
            *item = &( KeyAddrList[i] );
 8013544:	7bfb      	ldrb	r3, [r7, #15]
 8013546:	009b      	lsls	r3, r3, #2
 8013548:	4a08      	ldr	r2, [pc, #32]	@ (801356c <GetKeyAddrItem+0x48>)
 801354a:	441a      	add	r2, r3
 801354c:	683b      	ldr	r3, [r7, #0]
 801354e:	601a      	str	r2, [r3, #0]
            return LORAMAC_CRYPTO_SUCCESS;
 8013550:	2300      	movs	r3, #0
 8013552:	e006      	b.n	8013562 <GetKeyAddrItem+0x3e>
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 8013554:	7bfb      	ldrb	r3, [r7, #15]
 8013556:	3301      	adds	r3, #1
 8013558:	73fb      	strb	r3, [r7, #15]
 801355a:	7bfb      	ldrb	r3, [r7, #15]
 801355c:	2b01      	cmp	r3, #1
 801355e:	d9ea      	bls.n	8013536 <GetKeyAddrItem+0x12>
        }
    }
    return LORAMAC_CRYPTO_ERROR_INVALID_ADDR_ID;
 8013560:	230b      	movs	r3, #11
}
 8013562:	4618      	mov	r0, r3
 8013564:	3714      	adds	r7, #20
 8013566:	46bd      	mov	sp, r7
 8013568:	bc80      	pop	{r7}
 801356a:	4770      	bx	lr
 801356c:	20000120 	.word	0x20000120

08013570 <DeriveSessionKey10x>:
 * \param [in] netID          - Network Identifier
 * \param [in] deviceNonce    - Device nonce
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t DeriveSessionKey10x( KeyIdentifier_t keyID, uint32_t joinNonce, uint32_t netID, uint16_t devNonce )
{
 8013570:	b580      	push	{r7, lr}
 8013572:	b088      	sub	sp, #32
 8013574:	af00      	add	r7, sp, #0
 8013576:	60b9      	str	r1, [r7, #8]
 8013578:	607a      	str	r2, [r7, #4]
 801357a:	461a      	mov	r2, r3
 801357c:	4603      	mov	r3, r0
 801357e:	73fb      	strb	r3, [r7, #15]
 8013580:	4613      	mov	r3, r2
 8013582:	81bb      	strh	r3, [r7, #12]
    uint8_t compBase[16] = { 0 };
 8013584:	2300      	movs	r3, #0
 8013586:	613b      	str	r3, [r7, #16]
 8013588:	f107 0314 	add.w	r3, r7, #20
 801358c:	2200      	movs	r2, #0
 801358e:	601a      	str	r2, [r3, #0]
 8013590:	605a      	str	r2, [r3, #4]
 8013592:	609a      	str	r2, [r3, #8]

    /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
    switch( keyID )
 8013594:	7bfb      	ldrb	r3, [r7, #15]
 8013596:	2b02      	cmp	r3, #2
 8013598:	d002      	beq.n	80135a0 <DeriveSessionKey10x+0x30>
 801359a:	2b03      	cmp	r3, #3
 801359c:	d003      	beq.n	80135a6 <DeriveSessionKey10x+0x36>
 801359e:	e005      	b.n	80135ac <DeriveSessionKey10x+0x3c>
        case S_NWK_S_INT_KEY:
        case NWK_S_ENC_KEY:
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        case NWK_S_KEY:
#endif /* USE_LRWAN_1_1_X_CRYPTO */
            compBase[0] = 0x01;
 80135a0:	2301      	movs	r3, #1
 80135a2:	743b      	strb	r3, [r7, #16]
            break;
 80135a4:	e004      	b.n	80135b0 <DeriveSessionKey10x+0x40>
        case APP_S_KEY:
            compBase[0] = 0x02;
 80135a6:	2302      	movs	r3, #2
 80135a8:	743b      	strb	r3, [r7, #16]
            break;
 80135aa:	e001      	b.n	80135b0 <DeriveSessionKey10x+0x40>
        default:
            return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 80135ac:	230a      	movs	r3, #10
 80135ae:	e02a      	b.n	8013606 <DeriveSessionKey10x+0x96>
    }
   /* ST_WORKAROUND_END */

    compBase[1] = ( uint8_t )( ( joinNonce >> 0 ) & 0xFF );
 80135b0:	68bb      	ldr	r3, [r7, #8]
 80135b2:	b2db      	uxtb	r3, r3
 80135b4:	747b      	strb	r3, [r7, #17]
    compBase[2] = ( uint8_t )( ( joinNonce >> 8 ) & 0xFF );
 80135b6:	68bb      	ldr	r3, [r7, #8]
 80135b8:	0a1b      	lsrs	r3, r3, #8
 80135ba:	b2db      	uxtb	r3, r3
 80135bc:	74bb      	strb	r3, [r7, #18]
    compBase[3] = ( uint8_t )( ( joinNonce >> 16 ) & 0xFF );
 80135be:	68bb      	ldr	r3, [r7, #8]
 80135c0:	0c1b      	lsrs	r3, r3, #16
 80135c2:	b2db      	uxtb	r3, r3
 80135c4:	74fb      	strb	r3, [r7, #19]

    compBase[4] = ( uint8_t )( ( netID >> 0 ) & 0xFF );
 80135c6:	687b      	ldr	r3, [r7, #4]
 80135c8:	b2db      	uxtb	r3, r3
 80135ca:	753b      	strb	r3, [r7, #20]
    compBase[5] = ( uint8_t )( ( netID >> 8 ) & 0xFF );
 80135cc:	687b      	ldr	r3, [r7, #4]
 80135ce:	0a1b      	lsrs	r3, r3, #8
 80135d0:	b2db      	uxtb	r3, r3
 80135d2:	757b      	strb	r3, [r7, #21]
    compBase[6] = ( uint8_t )( ( netID >> 16 ) & 0xFF );
 80135d4:	687b      	ldr	r3, [r7, #4]
 80135d6:	0c1b      	lsrs	r3, r3, #16
 80135d8:	b2db      	uxtb	r3, r3
 80135da:	75bb      	strb	r3, [r7, #22]

    compBase[7] = ( uint8_t )( ( devNonce >> 0 ) & 0xFF );
 80135dc:	89bb      	ldrh	r3, [r7, #12]
 80135de:	b2db      	uxtb	r3, r3
 80135e0:	75fb      	strb	r3, [r7, #23]
    compBase[8] = ( uint8_t )( ( devNonce >> 8 ) & 0xFF );
 80135e2:	89bb      	ldrh	r3, [r7, #12]
 80135e4:	0a1b      	lsrs	r3, r3, #8
 80135e6:	b29b      	uxth	r3, r3
 80135e8:	b2db      	uxtb	r3, r3
 80135ea:	763b      	strb	r3, [r7, #24]

    if( SecureElementDeriveAndStoreKey( compBase, NWK_KEY, keyID ) != SECURE_ELEMENT_SUCCESS )
 80135ec:	7bfa      	ldrb	r2, [r7, #15]
 80135ee:	f107 0310 	add.w	r3, r7, #16
 80135f2:	2101      	movs	r1, #1
 80135f4:	4618      	mov	r0, r3
 80135f6:	f7f8 fb65 	bl	800bcc4 <SecureElementDeriveAndStoreKey>
 80135fa:	4603      	mov	r3, r0
 80135fc:	2b00      	cmp	r3, #0
 80135fe:	d001      	beq.n	8013604 <DeriveSessionKey10x+0x94>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8013600:	230e      	movs	r3, #14
 8013602:	e000      	b.n	8013606 <DeriveSessionKey10x+0x96>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8013604:	2300      	movs	r3, #0
}
 8013606:	4618      	mov	r0, r3
 8013608:	3720      	adds	r7, #32
 801360a:	46bd      	mov	sp, r7
 801360c:	bd80      	pop	{r7, pc}
	...

08013610 <GetLastFcntDown>:
 * \param [in]    lastDown     - Last downlink counter value
 *
 * \retval                     - Status of the operation
 */
static LoRaMacCryptoStatus_t GetLastFcntDown( FCntIdentifier_t fCntID, uint32_t* lastDown )
{
 8013610:	b480      	push	{r7}
 8013612:	b083      	sub	sp, #12
 8013614:	af00      	add	r7, sp, #0
 8013616:	4603      	mov	r3, r0
 8013618:	6039      	str	r1, [r7, #0]
 801361a:	71fb      	strb	r3, [r7, #7]
    if( lastDown == NULL )
 801361c:	683b      	ldr	r3, [r7, #0]
 801361e:	2b00      	cmp	r3, #0
 8013620:	d101      	bne.n	8013626 <GetLastFcntDown+0x16>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8013622:	2309      	movs	r3, #9
 8013624:	e03b      	b.n	801369e <GetLastFcntDown+0x8e>
    }
    switch( fCntID )
 8013626:	79fb      	ldrb	r3, [r7, #7]
 8013628:	3b01      	subs	r3, #1
 801362a:	2b03      	cmp	r3, #3
 801362c:	d834      	bhi.n	8013698 <GetLastFcntDown+0x88>
 801362e:	a201      	add	r2, pc, #4	@ (adr r2, 8013634 <GetLastFcntDown+0x24>)
 8013630:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013634:	08013645 	.word	0x08013645
 8013638:	0801365d 	.word	0x0801365d
 801363c:	08013675 	.word	0x08013675
 8013640:	0801368d 	.word	0x0801368d
    {
        case N_FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.NFCntDown;
 8013644:	4b18      	ldr	r3, [pc, #96]	@ (80136a8 <GetLastFcntDown+0x98>)
 8013646:	681b      	ldr	r3, [r3, #0]
 8013648:	691a      	ldr	r2, [r3, #16]
 801364a:	683b      	ldr	r3, [r7, #0]
 801364c:	601a      	str	r2, [r3, #0]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.NFCntDown;
 801364e:	4b16      	ldr	r3, [pc, #88]	@ (80136a8 <GetLastFcntDown+0x98>)
 8013650:	681a      	ldr	r2, [r3, #0]
 8013652:	4b15      	ldr	r3, [pc, #84]	@ (80136a8 <GetLastFcntDown+0x98>)
 8013654:	681b      	ldr	r3, [r3, #0]
 8013656:	6912      	ldr	r2, [r2, #16]
 8013658:	621a      	str	r2, [r3, #32]
            break;
 801365a:	e01f      	b.n	801369c <GetLastFcntDown+0x8c>
        case A_FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.AFCntDown;
 801365c:	4b12      	ldr	r3, [pc, #72]	@ (80136a8 <GetLastFcntDown+0x98>)
 801365e:	681b      	ldr	r3, [r3, #0]
 8013660:	695a      	ldr	r2, [r3, #20]
 8013662:	683b      	ldr	r3, [r7, #0]
 8013664:	601a      	str	r2, [r3, #0]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.AFCntDown;
 8013666:	4b10      	ldr	r3, [pc, #64]	@ (80136a8 <GetLastFcntDown+0x98>)
 8013668:	681a      	ldr	r2, [r3, #0]
 801366a:	4b0f      	ldr	r3, [pc, #60]	@ (80136a8 <GetLastFcntDown+0x98>)
 801366c:	681b      	ldr	r3, [r3, #0]
 801366e:	6952      	ldr	r2, [r2, #20]
 8013670:	621a      	str	r2, [r3, #32]
            break;
 8013672:	e013      	b.n	801369c <GetLastFcntDown+0x8c>
        case FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.FCntDown;
 8013674:	4b0c      	ldr	r3, [pc, #48]	@ (80136a8 <GetLastFcntDown+0x98>)
 8013676:	681b      	ldr	r3, [r3, #0]
 8013678:	699a      	ldr	r2, [r3, #24]
 801367a:	683b      	ldr	r3, [r7, #0]
 801367c:	601a      	str	r2, [r3, #0]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.FCntDown;
 801367e:	4b0a      	ldr	r3, [pc, #40]	@ (80136a8 <GetLastFcntDown+0x98>)
 8013680:	681a      	ldr	r2, [r3, #0]
 8013682:	4b09      	ldr	r3, [pc, #36]	@ (80136a8 <GetLastFcntDown+0x98>)
 8013684:	681b      	ldr	r3, [r3, #0]
 8013686:	6992      	ldr	r2, [r2, #24]
 8013688:	621a      	str	r2, [r3, #32]
            break;
 801368a:	e007      	b.n	801369c <GetLastFcntDown+0x8c>
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MC_FCNT_DOWN_0:
            *lastDown = CryptoNvm->FCntList.McFCntDown[0];
 801368c:	4b06      	ldr	r3, [pc, #24]	@ (80136a8 <GetLastFcntDown+0x98>)
 801368e:	681b      	ldr	r3, [r3, #0]
 8013690:	69da      	ldr	r2, [r3, #28]
 8013692:	683b      	ldr	r3, [r7, #0]
 8013694:	601a      	str	r2, [r3, #0]
            break;
 8013696:	e001      	b.n	801369c <GetLastFcntDown+0x8c>
        case MC_FCNT_DOWN_3:
            *lastDown = CryptoNvm->FCntList.McFCntDown[3];
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
 8013698:	2305      	movs	r3, #5
 801369a:	e000      	b.n	801369e <GetLastFcntDown+0x8e>
    }
    return LORAMAC_CRYPTO_SUCCESS;
 801369c:	2300      	movs	r3, #0
}
 801369e:	4618      	mov	r0, r3
 80136a0:	370c      	adds	r7, #12
 80136a2:	46bd      	mov	sp, r7
 80136a4:	bc80      	pop	{r7}
 80136a6:	4770      	bx	lr
 80136a8:	20001960 	.word	0x20001960

080136ac <CheckFCntDown>:
 * \param [in]    currentDown  - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static bool CheckFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 80136ac:	b580      	push	{r7, lr}
 80136ae:	b084      	sub	sp, #16
 80136b0:	af00      	add	r7, sp, #0
 80136b2:	4603      	mov	r3, r0
 80136b4:	6039      	str	r1, [r7, #0]
 80136b6:	71fb      	strb	r3, [r7, #7]
    uint32_t lastDown = 0;
 80136b8:	2300      	movs	r3, #0
 80136ba:	60fb      	str	r3, [r7, #12]
    if( GetLastFcntDown( fCntID, &lastDown ) != LORAMAC_CRYPTO_SUCCESS )
 80136bc:	f107 020c 	add.w	r2, r7, #12
 80136c0:	79fb      	ldrb	r3, [r7, #7]
 80136c2:	4611      	mov	r1, r2
 80136c4:	4618      	mov	r0, r3
 80136c6:	f7ff ffa3 	bl	8013610 <GetLastFcntDown>
 80136ca:	4603      	mov	r3, r0
 80136cc:	2b00      	cmp	r3, #0
 80136ce:	d001      	beq.n	80136d4 <CheckFCntDown+0x28>
    {
        return false;
 80136d0:	2300      	movs	r3, #0
 80136d2:	e00a      	b.n	80136ea <CheckFCntDown+0x3e>
    }
    if( ( currentDown > lastDown ) ||
 80136d4:	68fb      	ldr	r3, [r7, #12]
 80136d6:	683a      	ldr	r2, [r7, #0]
 80136d8:	429a      	cmp	r2, r3
 80136da:	d803      	bhi.n	80136e4 <CheckFCntDown+0x38>
        // For LoRaWAN 1.0.X only. Allow downlink frames of 0
        ( lastDown == FCNT_DOWN_INITAL_VALUE ) )
 80136dc:	68fb      	ldr	r3, [r7, #12]
    if( ( currentDown > lastDown ) ||
 80136de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80136e2:	d101      	bne.n	80136e8 <CheckFCntDown+0x3c>
    {
        return true;
 80136e4:	2301      	movs	r3, #1
 80136e6:	e000      	b.n	80136ea <CheckFCntDown+0x3e>
    }
    else
    {
        return false;
 80136e8:	2300      	movs	r3, #0
    }
}
 80136ea:	4618      	mov	r0, r3
 80136ec:	3710      	adds	r7, #16
 80136ee:	46bd      	mov	sp, r7
 80136f0:	bd80      	pop	{r7, pc}
	...

080136f4 <UpdateFCntDown>:
 * \param [in]    currentDown   - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static void UpdateFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 80136f4:	b480      	push	{r7}
 80136f6:	b083      	sub	sp, #12
 80136f8:	af00      	add	r7, sp, #0
 80136fa:	4603      	mov	r3, r0
 80136fc:	6039      	str	r1, [r7, #0]
 80136fe:	71fb      	strb	r3, [r7, #7]
    switch( fCntID )
 8013700:	79fb      	ldrb	r3, [r7, #7]
 8013702:	3b01      	subs	r3, #1
 8013704:	2b03      	cmp	r3, #3
 8013706:	d81f      	bhi.n	8013748 <UpdateFCntDown+0x54>
 8013708:	a201      	add	r2, pc, #4	@ (adr r2, 8013710 <UpdateFCntDown+0x1c>)
 801370a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801370e:	bf00      	nop
 8013710:	08013721 	.word	0x08013721
 8013714:	0801372b 	.word	0x0801372b
 8013718:	08013735 	.word	0x08013735
 801371c:	0801373f 	.word	0x0801373f
    {
        case N_FCNT_DOWN:
            CryptoNvm->FCntList.NFCntDown = currentDown;
 8013720:	4b0c      	ldr	r3, [pc, #48]	@ (8013754 <UpdateFCntDown+0x60>)
 8013722:	681b      	ldr	r3, [r3, #0]
 8013724:	683a      	ldr	r2, [r7, #0]
 8013726:	611a      	str	r2, [r3, #16]
            break;
 8013728:	e00f      	b.n	801374a <UpdateFCntDown+0x56>
        case A_FCNT_DOWN:
            CryptoNvm->FCntList.AFCntDown = currentDown;
 801372a:	4b0a      	ldr	r3, [pc, #40]	@ (8013754 <UpdateFCntDown+0x60>)
 801372c:	681b      	ldr	r3, [r3, #0]
 801372e:	683a      	ldr	r2, [r7, #0]
 8013730:	615a      	str	r2, [r3, #20]
            break;
 8013732:	e00a      	b.n	801374a <UpdateFCntDown+0x56>
        case FCNT_DOWN:
            CryptoNvm->FCntList.FCntDown = currentDown;
 8013734:	4b07      	ldr	r3, [pc, #28]	@ (8013754 <UpdateFCntDown+0x60>)
 8013736:	681b      	ldr	r3, [r3, #0]
 8013738:	683a      	ldr	r2, [r7, #0]
 801373a:	619a      	str	r2, [r3, #24]
            break;
 801373c:	e005      	b.n	801374a <UpdateFCntDown+0x56>
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MC_FCNT_DOWN_0:
            CryptoNvm->FCntList.McFCntDown[0] = currentDown;
 801373e:	4b05      	ldr	r3, [pc, #20]	@ (8013754 <UpdateFCntDown+0x60>)
 8013740:	681b      	ldr	r3, [r3, #0]
 8013742:	683a      	ldr	r2, [r7, #0]
 8013744:	61da      	str	r2, [r3, #28]
            break;
 8013746:	e000      	b.n	801374a <UpdateFCntDown+0x56>
        case MC_FCNT_DOWN_3:
            CryptoNvm->FCntList.McFCntDown[3] = currentDown;
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            break;
 8013748:	bf00      	nop
    }
}
 801374a:	bf00      	nop
 801374c:	370c      	adds	r7, #12
 801374e:	46bd      	mov	sp, r7
 8013750:	bc80      	pop	{r7}
 8013752:	4770      	bx	lr
 8013754:	20001960 	.word	0x20001960

08013758 <ResetFCnts>:

/*!
 * Resets the frame counters
 */
static void ResetFCnts( void )
{
 8013758:	b480      	push	{r7}
 801375a:	b083      	sub	sp, #12
 801375c:	af00      	add	r7, sp, #0
    CryptoNvm->FCntList.FCntUp = 0;
 801375e:	4b18      	ldr	r3, [pc, #96]	@ (80137c0 <ResetFCnts+0x68>)
 8013760:	681b      	ldr	r3, [r3, #0]
 8013762:	2200      	movs	r2, #0
 8013764:	60da      	str	r2, [r3, #12]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 8013766:	4b16      	ldr	r3, [pc, #88]	@ (80137c0 <ResetFCnts+0x68>)
 8013768:	681b      	ldr	r3, [r3, #0]
 801376a:	f04f 32ff 	mov.w	r2, #4294967295
 801376e:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITAL_VALUE;
 8013770:	4b13      	ldr	r3, [pc, #76]	@ (80137c0 <ResetFCnts+0x68>)
 8013772:	681b      	ldr	r3, [r3, #0]
 8013774:	f04f 32ff 	mov.w	r2, #4294967295
 8013778:	615a      	str	r2, [r3, #20]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 801377a:	4b11      	ldr	r3, [pc, #68]	@ (80137c0 <ResetFCnts+0x68>)
 801377c:	681b      	ldr	r3, [r3, #0]
 801377e:	f04f 32ff 	mov.w	r2, #4294967295
 8013782:	619a      	str	r2, [r3, #24]
    CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.FCntDown;
 8013784:	4b0e      	ldr	r3, [pc, #56]	@ (80137c0 <ResetFCnts+0x68>)
 8013786:	681a      	ldr	r2, [r3, #0]
 8013788:	4b0d      	ldr	r3, [pc, #52]	@ (80137c0 <ResetFCnts+0x68>)
 801378a:	681b      	ldr	r3, [r3, #0]
 801378c:	6992      	ldr	r2, [r2, #24]
 801378e:	621a      	str	r2, [r3, #32]

    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8013790:	2300      	movs	r3, #0
 8013792:	607b      	str	r3, [r7, #4]
 8013794:	e00b      	b.n	80137ae <ResetFCnts+0x56>
    {
        CryptoNvm->FCntList.McFCntDown[i] = FCNT_DOWN_INITAL_VALUE;
 8013796:	4b0a      	ldr	r3, [pc, #40]	@ (80137c0 <ResetFCnts+0x68>)
 8013798:	681a      	ldr	r2, [r3, #0]
 801379a:	687b      	ldr	r3, [r7, #4]
 801379c:	3306      	adds	r3, #6
 801379e:	009b      	lsls	r3, r3, #2
 80137a0:	4413      	add	r3, r2
 80137a2:	f04f 32ff 	mov.w	r2, #4294967295
 80137a6:	605a      	str	r2, [r3, #4]
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 80137a8:	687b      	ldr	r3, [r7, #4]
 80137aa:	3301      	adds	r3, #1
 80137ac:	607b      	str	r3, [r7, #4]
 80137ae:	687b      	ldr	r3, [r7, #4]
 80137b0:	2b00      	cmp	r3, #0
 80137b2:	ddf0      	ble.n	8013796 <ResetFCnts+0x3e>
    }
}
 80137b4:	bf00      	nop
 80137b6:	bf00      	nop
 80137b8:	370c      	adds	r7, #12
 80137ba:	46bd      	mov	sp, r7
 80137bc:	bc80      	pop	{r7}
 80137be:	4770      	bx	lr
 80137c0:	20001960 	.word	0x20001960

080137c4 <LoRaMacCryptoInit>:

/*
 *  API functions
 */
LoRaMacCryptoStatus_t LoRaMacCryptoInit( LoRaMacCryptoNvmData_t* nvm )
{
 80137c4:	b580      	push	{r7, lr}
 80137c6:	b082      	sub	sp, #8
 80137c8:	af00      	add	r7, sp, #0
 80137ca:	6078      	str	r0, [r7, #4]
    if( nvm == NULL )
 80137cc:	687b      	ldr	r3, [r7, #4]
 80137ce:	2b00      	cmp	r3, #0
 80137d0:	d101      	bne.n	80137d6 <LoRaMacCryptoInit+0x12>
    {
        return LORAMAC_CRYPTO_FAIL_PARAM;
 80137d2:	2308      	movs	r3, #8
 80137d4:	e01c      	b.n	8013810 <LoRaMacCryptoInit+0x4c>
    }

    // Assign non volatile context
    CryptoNvm = nvm;
 80137d6:	4a10      	ldr	r2, [pc, #64]	@ (8013818 <LoRaMacCryptoInit+0x54>)
 80137d8:	687b      	ldr	r3, [r7, #4]
 80137da:	6013      	str	r3, [r2, #0]

    // Initialize with default
    memset1( ( uint8_t* )CryptoNvm, 0, sizeof( LoRaMacCryptoNvmData_t ) );
 80137dc:	4b0e      	ldr	r3, [pc, #56]	@ (8013818 <LoRaMacCryptoInit+0x54>)
 80137de:	681b      	ldr	r3, [r3, #0]
 80137e0:	2228      	movs	r2, #40	@ 0x28
 80137e2:	2100      	movs	r1, #0
 80137e4:	4618      	mov	r0, r3
 80137e6:	f003 f975 	bl	8016ad4 <memset1>

    // Set default LoRaWAN version
    CryptoNvm->LrWanVersion.Fields.Major = 1;
 80137ea:	4b0b      	ldr	r3, [pc, #44]	@ (8013818 <LoRaMacCryptoInit+0x54>)
 80137ec:	681b      	ldr	r3, [r3, #0]
 80137ee:	2201      	movs	r2, #1
 80137f0:	70da      	strb	r2, [r3, #3]
    CryptoNvm->LrWanVersion.Fields.Minor = 1;
 80137f2:	4b09      	ldr	r3, [pc, #36]	@ (8013818 <LoRaMacCryptoInit+0x54>)
 80137f4:	681b      	ldr	r3, [r3, #0]
 80137f6:	2201      	movs	r2, #1
 80137f8:	709a      	strb	r2, [r3, #2]
    CryptoNvm->LrWanVersion.Fields.Patch = 1;
 80137fa:	4b07      	ldr	r3, [pc, #28]	@ (8013818 <LoRaMacCryptoInit+0x54>)
 80137fc:	681b      	ldr	r3, [r3, #0]
 80137fe:	2201      	movs	r2, #1
 8013800:	705a      	strb	r2, [r3, #1]
    CryptoNvm->LrWanVersion.Fields.Revision = 0;
 8013802:	4b05      	ldr	r3, [pc, #20]	@ (8013818 <LoRaMacCryptoInit+0x54>)
 8013804:	681b      	ldr	r3, [r3, #0]
 8013806:	2200      	movs	r2, #0
 8013808:	701a      	strb	r2, [r3, #0]

    // Reset frame counters
    ResetFCnts( );
 801380a:	f7ff ffa5 	bl	8013758 <ResetFCnts>

    return LORAMAC_CRYPTO_SUCCESS;
 801380e:	2300      	movs	r3, #0
}
 8013810:	4618      	mov	r0, r3
 8013812:	3708      	adds	r7, #8
 8013814:	46bd      	mov	sp, r7
 8013816:	bd80      	pop	{r7, pc}
 8013818:	20001960 	.word	0x20001960

0801381c <LoRaMacCryptoSetLrWanVersion>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetLrWanVersion( Version_t version )
{
 801381c:	b480      	push	{r7}
 801381e:	b083      	sub	sp, #12
 8013820:	af00      	add	r7, sp, #0
 8013822:	6078      	str	r0, [r7, #4]
    CryptoNvm->LrWanVersion = version;
 8013824:	4b04      	ldr	r3, [pc, #16]	@ (8013838 <LoRaMacCryptoSetLrWanVersion+0x1c>)
 8013826:	681b      	ldr	r3, [r3, #0]
 8013828:	687a      	ldr	r2, [r7, #4]
 801382a:	601a      	str	r2, [r3, #0]
    return LORAMAC_CRYPTO_SUCCESS;
 801382c:	2300      	movs	r3, #0
}
 801382e:	4618      	mov	r0, r3
 8013830:	370c      	adds	r7, #12
 8013832:	46bd      	mov	sp, r7
 8013834:	bc80      	pop	{r7}
 8013836:	4770      	bx	lr
 8013838:	20001960 	.word	0x20001960

0801383c <LoRaMacCryptoGetFCntUp>:

LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntUp( uint32_t* currentUp )
{
 801383c:	b480      	push	{r7}
 801383e:	b083      	sub	sp, #12
 8013840:	af00      	add	r7, sp, #0
 8013842:	6078      	str	r0, [r7, #4]
    if( currentUp == NULL )
 8013844:	687b      	ldr	r3, [r7, #4]
 8013846:	2b00      	cmp	r3, #0
 8013848:	d101      	bne.n	801384e <LoRaMacCryptoGetFCntUp+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 801384a:	2309      	movs	r3, #9
 801384c:	e006      	b.n	801385c <LoRaMacCryptoGetFCntUp+0x20>
    }

    *currentUp = CryptoNvm->FCntList.FCntUp + 1;
 801384e:	4b06      	ldr	r3, [pc, #24]	@ (8013868 <LoRaMacCryptoGetFCntUp+0x2c>)
 8013850:	681b      	ldr	r3, [r3, #0]
 8013852:	68db      	ldr	r3, [r3, #12]
 8013854:	1c5a      	adds	r2, r3, #1
 8013856:	687b      	ldr	r3, [r7, #4]
 8013858:	601a      	str	r2, [r3, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 801385a:	2300      	movs	r3, #0
}
 801385c:	4618      	mov	r0, r3
 801385e:	370c      	adds	r7, #12
 8013860:	46bd      	mov	sp, r7
 8013862:	bc80      	pop	{r7}
 8013864:	4770      	bx	lr
 8013866:	bf00      	nop
 8013868:	20001960 	.word	0x20001960

0801386c <LoRaMacCryptoGetFCntDown>:

    return LORAMAC_CRYPTO_SUCCESS;
}
#elif (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntDown( FCntIdentifier_t fCntID, uint32_t frameFcnt, uint32_t* currentDown )
{
 801386c:	b580      	push	{r7, lr}
 801386e:	b088      	sub	sp, #32
 8013870:	af00      	add	r7, sp, #0
 8013872:	4603      	mov	r3, r0
 8013874:	60b9      	str	r1, [r7, #8]
 8013876:	607a      	str	r2, [r7, #4]
 8013878:	73fb      	strb	r3, [r7, #15]
    uint32_t lastDown = 0;
 801387a:	2300      	movs	r3, #0
 801387c:	617b      	str	r3, [r7, #20]
    int32_t fCntDiff = 0;
 801387e:	2300      	movs	r3, #0
 8013880:	61fb      	str	r3, [r7, #28]
    LoRaMacCryptoStatus_t cryptoStatus = LORAMAC_CRYPTO_ERROR;
 8013882:	2312      	movs	r3, #18
 8013884:	76fb      	strb	r3, [r7, #27]

    if( currentDown == NULL )
 8013886:	687b      	ldr	r3, [r7, #4]
 8013888:	2b00      	cmp	r3, #0
 801388a:	d101      	bne.n	8013890 <LoRaMacCryptoGetFCntDown+0x24>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 801388c:	2309      	movs	r3, #9
 801388e:	e035      	b.n	80138fc <LoRaMacCryptoGetFCntDown+0x90>
    }

    cryptoStatus = GetLastFcntDown( fCntID, &lastDown );
 8013890:	f107 0214 	add.w	r2, r7, #20
 8013894:	7bfb      	ldrb	r3, [r7, #15]
 8013896:	4611      	mov	r1, r2
 8013898:	4618      	mov	r0, r3
 801389a:	f7ff feb9 	bl	8013610 <GetLastFcntDown>
 801389e:	4603      	mov	r3, r0
 80138a0:	76fb      	strb	r3, [r7, #27]
    if( cryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 80138a2:	7efb      	ldrb	r3, [r7, #27]
 80138a4:	2b00      	cmp	r3, #0
 80138a6:	d001      	beq.n	80138ac <LoRaMacCryptoGetFCntDown+0x40>
    {
        return cryptoStatus;
 80138a8:	7efb      	ldrb	r3, [r7, #27]
 80138aa:	e027      	b.n	80138fc <LoRaMacCryptoGetFCntDown+0x90>
    }

    // For LoRaWAN 1.0.X only, allow downlink frames of 0
    if( lastDown == FCNT_DOWN_INITAL_VALUE )
 80138ac:	697b      	ldr	r3, [r7, #20]
 80138ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80138b2:	d103      	bne.n	80138bc <LoRaMacCryptoGetFCntDown+0x50>
    {
        *currentDown = frameFcnt;
 80138b4:	687b      	ldr	r3, [r7, #4]
 80138b6:	68ba      	ldr	r2, [r7, #8]
 80138b8:	601a      	str	r2, [r3, #0]
 80138ba:	e01e      	b.n	80138fa <LoRaMacCryptoGetFCntDown+0x8e>
    }
    else
    {
        // Add difference, consider roll-over
        fCntDiff = ( int32_t )( ( int64_t )frameFcnt - ( int64_t )( lastDown & 0x0000FFFF ) );
 80138bc:	697b      	ldr	r3, [r7, #20]
 80138be:	b29b      	uxth	r3, r3
 80138c0:	68ba      	ldr	r2, [r7, #8]
 80138c2:	1ad3      	subs	r3, r2, r3
 80138c4:	61fb      	str	r3, [r7, #28]

        if( fCntDiff > 0 )
 80138c6:	69fb      	ldr	r3, [r7, #28]
 80138c8:	2b00      	cmp	r3, #0
 80138ca:	dd05      	ble.n	80138d8 <LoRaMacCryptoGetFCntDown+0x6c>
        {  // Positive difference
            *currentDown = lastDown + fCntDiff;
 80138cc:	697a      	ldr	r2, [r7, #20]
 80138ce:	69fb      	ldr	r3, [r7, #28]
 80138d0:	441a      	add	r2, r3
 80138d2:	687b      	ldr	r3, [r7, #4]
 80138d4:	601a      	str	r2, [r3, #0]
 80138d6:	e010      	b.n	80138fa <LoRaMacCryptoGetFCntDown+0x8e>
        }
        else if( fCntDiff == 0 )
 80138d8:	69fb      	ldr	r3, [r7, #28]
 80138da:	2b00      	cmp	r3, #0
 80138dc:	d104      	bne.n	80138e8 <LoRaMacCryptoGetFCntDown+0x7c>
        {  // Duplicate FCnt value, keep the current value.
            *currentDown = lastDown;
 80138de:	697a      	ldr	r2, [r7, #20]
 80138e0:	687b      	ldr	r3, [r7, #4]
 80138e2:	601a      	str	r2, [r3, #0]
            return LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED;
 80138e4:	2307      	movs	r3, #7
 80138e6:	e009      	b.n	80138fc <LoRaMacCryptoGetFCntDown+0x90>
        }
        else
        {  // Negative difference, assume a roll-over of one uint16_t
            *currentDown = ( lastDown & 0xFFFF0000 ) + 0x10000 + frameFcnt;
 80138e8:	697b      	ldr	r3, [r7, #20]
 80138ea:	0c1b      	lsrs	r3, r3, #16
 80138ec:	041b      	lsls	r3, r3, #16
 80138ee:	68ba      	ldr	r2, [r7, #8]
 80138f0:	4413      	add	r3, r2
 80138f2:	f503 3280 	add.w	r2, r3, #65536	@ 0x10000
 80138f6:	687b      	ldr	r3, [r7, #4]
 80138f8:	601a      	str	r2, [r3, #0]
        }
    }

    return LORAMAC_CRYPTO_SUCCESS;
 80138fa:	2300      	movs	r3, #0
}
 80138fc:	4618      	mov	r0, r3
 80138fe:	3720      	adds	r7, #32
 8013900:	46bd      	mov	sp, r7
 8013902:	bd80      	pop	{r7, pc}

08013904 <LoRaMacCryptoSetMulticastReference>:
    return LORAMAC_CRYPTO_SUCCESS;
}
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

LoRaMacCryptoStatus_t LoRaMacCryptoSetMulticastReference( MulticastCtx_t* multicastList )
{
 8013904:	b480      	push	{r7}
 8013906:	b085      	sub	sp, #20
 8013908:	af00      	add	r7, sp, #0
 801390a:	6078      	str	r0, [r7, #4]
    if( multicastList == NULL )
 801390c:	687b      	ldr	r3, [r7, #4]
 801390e:	2b00      	cmp	r3, #0
 8013910:	d101      	bne.n	8013916 <LoRaMacCryptoSetMulticastReference+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8013912:	2309      	movs	r3, #9
 8013914:	e017      	b.n	8013946 <LoRaMacCryptoSetMulticastReference+0x42>
    }

    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8013916:	2300      	movs	r3, #0
 8013918:	60fb      	str	r3, [r7, #12]
 801391a:	e010      	b.n	801393e <LoRaMacCryptoSetMulticastReference+0x3a>
    {
        multicastList[i].DownLinkCounter = &CryptoNvm->FCntList.McFCntDown[i];
 801391c:	4b0c      	ldr	r3, [pc, #48]	@ (8013950 <LoRaMacCryptoSetMulticastReference+0x4c>)
 801391e:	6819      	ldr	r1, [r3, #0]
 8013920:	68fb      	ldr	r3, [r7, #12]
 8013922:	222c      	movs	r2, #44	@ 0x2c
 8013924:	fb02 f303 	mul.w	r3, r2, r3
 8013928:	687a      	ldr	r2, [r7, #4]
 801392a:	4413      	add	r3, r2
 801392c:	68fa      	ldr	r2, [r7, #12]
 801392e:	3206      	adds	r2, #6
 8013930:	0092      	lsls	r2, r2, #2
 8013932:	440a      	add	r2, r1
 8013934:	3204      	adds	r2, #4
 8013936:	621a      	str	r2, [r3, #32]
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8013938:	68fb      	ldr	r3, [r7, #12]
 801393a:	3301      	adds	r3, #1
 801393c:	60fb      	str	r3, [r7, #12]
 801393e:	68fb      	ldr	r3, [r7, #12]
 8013940:	2b00      	cmp	r3, #0
 8013942:	ddeb      	ble.n	801391c <LoRaMacCryptoSetMulticastReference+0x18>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8013944:	2300      	movs	r3, #0
}
 8013946:	4618      	mov	r0, r3
 8013948:	3714      	adds	r7, #20
 801394a:	46bd      	mov	sp, r7
 801394c:	bc80      	pop	{r7}
 801394e:	4770      	bx	lr
 8013950:	20001960 	.word	0x20001960

08013954 <LoRaMacCryptoSetKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetKey( KeyIdentifier_t keyID, uint8_t* key )
{
 8013954:	b580      	push	{r7, lr}
 8013956:	b082      	sub	sp, #8
 8013958:	af00      	add	r7, sp, #0
 801395a:	4603      	mov	r3, r0
 801395c:	6039      	str	r1, [r7, #0]
 801395e:	71fb      	strb	r3, [r7, #7]
    if( SecureElementSetKey( keyID, key ) != SECURE_ELEMENT_SUCCESS )
 8013960:	79fb      	ldrb	r3, [r7, #7]
 8013962:	6839      	ldr	r1, [r7, #0]
 8013964:	4618      	mov	r0, r3
 8013966:	f7f8 f89b 	bl	800baa0 <SecureElementSetKey>
 801396a:	4603      	mov	r3, r0
 801396c:	2b00      	cmp	r3, #0
 801396e:	d001      	beq.n	8013974 <LoRaMacCryptoSetKey+0x20>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8013970:	230e      	movs	r3, #14
 8013972:	e018      	b.n	80139a6 <LoRaMacCryptoSetKey+0x52>
    }
    if( keyID == APP_KEY )
 8013974:	79fb      	ldrb	r3, [r7, #7]
 8013976:	2b00      	cmp	r3, #0
 8013978:	d114      	bne.n	80139a4 <LoRaMacCryptoSetKey+0x50>
    {
        // Derive lifetime keys
        if( LoRaMacCryptoDeriveMcRootKey( CryptoNvm->LrWanVersion.Fields.Minor, keyID ) != LORAMAC_CRYPTO_SUCCESS )
 801397a:	4b0d      	ldr	r3, [pc, #52]	@ (80139b0 <LoRaMacCryptoSetKey+0x5c>)
 801397c:	681b      	ldr	r3, [r3, #0]
 801397e:	789b      	ldrb	r3, [r3, #2]
 8013980:	79fa      	ldrb	r2, [r7, #7]
 8013982:	4611      	mov	r1, r2
 8013984:	4618      	mov	r0, r3
 8013986:	f000 fa37 	bl	8013df8 <LoRaMacCryptoDeriveMcRootKey>
 801398a:	4603      	mov	r3, r0
 801398c:	2b00      	cmp	r3, #0
 801398e:	d001      	beq.n	8013994 <LoRaMacCryptoSetKey+0x40>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8013990:	230e      	movs	r3, #14
 8013992:	e008      	b.n	80139a6 <LoRaMacCryptoSetKey+0x52>
        }
        if( LoRaMacCryptoDeriveMcKEKey( MC_ROOT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 8013994:	2004      	movs	r0, #4
 8013996:	f000 fa5a 	bl	8013e4e <LoRaMacCryptoDeriveMcKEKey>
 801399a:	4603      	mov	r3, r0
 801399c:	2b00      	cmp	r3, #0
 801399e:	d001      	beq.n	80139a4 <LoRaMacCryptoSetKey+0x50>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80139a0:	230e      	movs	r3, #14
 80139a2:	e000      	b.n	80139a6 <LoRaMacCryptoSetKey+0x52>
        }
    }
    return LORAMAC_CRYPTO_SUCCESS;
 80139a4:	2300      	movs	r3, #0
}
 80139a6:	4618      	mov	r0, r3
 80139a8:	3708      	adds	r7, #8
 80139aa:	46bd      	mov	sp, r7
 80139ac:	bd80      	pop	{r7, pc}
 80139ae:	bf00      	nop
 80139b0:	20001960 	.word	0x20001960

080139b4 <LoRaMacCryptoPrepareJoinRequest>:

LoRaMacCryptoStatus_t LoRaMacCryptoPrepareJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 80139b4:	b580      	push	{r7, lr}
 80139b6:	b086      	sub	sp, #24
 80139b8:	af02      	add	r7, sp, #8
 80139ba:	6078      	str	r0, [r7, #4]
    if( macMsg == 0 )
 80139bc:	687b      	ldr	r3, [r7, #4]
 80139be:	2b00      	cmp	r3, #0
 80139c0:	d101      	bne.n	80139c6 <LoRaMacCryptoPrepareJoinRequest+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80139c2:	2309      	movs	r3, #9
 80139c4:	e02d      	b.n	8013a22 <LoRaMacCryptoPrepareJoinRequest+0x6e>
    }
    KeyIdentifier_t micComputationKeyID = NWK_KEY;
 80139c6:	2301      	movs	r3, #1
 80139c8:	73fb      	strb	r3, [r7, #15]
#if ( USE_RANDOM_DEV_NONCE == 1 )
    uint32_t devNonce = 0;
    SecureElementRandomNumber( &devNonce );
    CryptoNvm->DevNonce = devNonce;
#else
    CryptoNvm->DevNonce++;
 80139ca:	4b18      	ldr	r3, [pc, #96]	@ (8013a2c <LoRaMacCryptoPrepareJoinRequest+0x78>)
 80139cc:	681b      	ldr	r3, [r3, #0]
 80139ce:	889a      	ldrh	r2, [r3, #4]
 80139d0:	3201      	adds	r2, #1
 80139d2:	b292      	uxth	r2, r2
 80139d4:	809a      	strh	r2, [r3, #4]
#endif /* USE_RANDOM_DEV_NONCE */
    macMsg->DevNonce = CryptoNvm->DevNonce;
 80139d6:	4b15      	ldr	r3, [pc, #84]	@ (8013a2c <LoRaMacCryptoPrepareJoinRequest+0x78>)
 80139d8:	681b      	ldr	r3, [r3, #0]
 80139da:	889a      	ldrh	r2, [r3, #4]
 80139dc:	687b      	ldr	r3, [r7, #4]
 80139de:	82da      	strh	r2, [r3, #22]
        return LORAMAC_CRYPTO_ERROR;
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

    // Serialize message
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 80139e0:	6878      	ldr	r0, [r7, #4]
 80139e2:	f000 fc14 	bl	801420e <LoRaMacSerializerJoinRequest>
 80139e6:	4603      	mov	r3, r0
 80139e8:	2b00      	cmp	r3, #0
 80139ea:	d001      	beq.n	80139f0 <LoRaMacCryptoPrepareJoinRequest+0x3c>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 80139ec:	2310      	movs	r3, #16
 80139ee:	e018      	b.n	8013a22 <LoRaMacCryptoPrepareJoinRequest+0x6e>
    }

    // Compute mic
    if( SecureElementComputeAesCmac( NULL, macMsg->Buffer, ( LORAMAC_JOIN_REQ_MSG_SIZE - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, &macMsg->MIC ) != SECURE_ELEMENT_SUCCESS )
 80139f0:	687b      	ldr	r3, [r7, #4]
 80139f2:	6819      	ldr	r1, [r3, #0]
 80139f4:	687b      	ldr	r3, [r7, #4]
 80139f6:	3318      	adds	r3, #24
 80139f8:	7bfa      	ldrb	r2, [r7, #15]
 80139fa:	9300      	str	r3, [sp, #0]
 80139fc:	4613      	mov	r3, r2
 80139fe:	2213      	movs	r2, #19
 8013a00:	2000      	movs	r0, #0
 8013a02:	f7f8 f8ab 	bl	800bb5c <SecureElementComputeAesCmac>
 8013a06:	4603      	mov	r3, r0
 8013a08:	2b00      	cmp	r3, #0
 8013a0a:	d001      	beq.n	8013a10 <LoRaMacCryptoPrepareJoinRequest+0x5c>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8013a0c:	230e      	movs	r3, #14
 8013a0e:	e008      	b.n	8013a22 <LoRaMacCryptoPrepareJoinRequest+0x6e>
    }

    // Reserialize message to add the MIC
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8013a10:	6878      	ldr	r0, [r7, #4]
 8013a12:	f000 fbfc 	bl	801420e <LoRaMacSerializerJoinRequest>
 8013a16:	4603      	mov	r3, r0
 8013a18:	2b00      	cmp	r3, #0
 8013a1a:	d001      	beq.n	8013a20 <LoRaMacCryptoPrepareJoinRequest+0x6c>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8013a1c:	2310      	movs	r3, #16
 8013a1e:	e000      	b.n	8013a22 <LoRaMacCryptoPrepareJoinRequest+0x6e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8013a20:	2300      	movs	r3, #0
}
 8013a22:	4618      	mov	r0, r3
 8013a24:	3710      	adds	r7, #16
 8013a26:	46bd      	mov	sp, r7
 8013a28:	bd80      	pop	{r7, pc}
 8013a2a:	bf00      	nop
 8013a2c:	20001960 	.word	0x20001960

08013a30 <LoRaMacCryptoHandleJoinAccept>:
    return LORAMAC_CRYPTO_SUCCESS;
}
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

LoRaMacCryptoStatus_t LoRaMacCryptoHandleJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t* joinEUI, LoRaMacMessageJoinAccept_t* macMsg )
{
 8013a30:	b590      	push	{r4, r7, lr}
 8013a32:	b097      	sub	sp, #92	@ 0x5c
 8013a34:	af04      	add	r7, sp, #16
 8013a36:	4603      	mov	r3, r0
 8013a38:	60b9      	str	r1, [r7, #8]
 8013a3a:	607a      	str	r2, [r7, #4]
 8013a3c:	73fb      	strb	r3, [r7, #15]
    if( ( macMsg == 0 ) || ( joinEUI == 0 ) )
 8013a3e:	687b      	ldr	r3, [r7, #4]
 8013a40:	2b00      	cmp	r3, #0
 8013a42:	d002      	beq.n	8013a4a <LoRaMacCryptoHandleJoinAccept+0x1a>
 8013a44:	68bb      	ldr	r3, [r7, #8]
 8013a46:	2b00      	cmp	r3, #0
 8013a48:	d101      	bne.n	8013a4e <LoRaMacCryptoHandleJoinAccept+0x1e>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8013a4a:	2309      	movs	r3, #9
 8013a4c:	e0bd      	b.n	8013bca <LoRaMacCryptoHandleJoinAccept+0x19a>
    }

    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 8013a4e:	2312      	movs	r3, #18
 8013a50:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    uint8_t decJoinAccept[LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE] = { 0 };
 8013a54:	2300      	movs	r3, #0
 8013a56:	61bb      	str	r3, [r7, #24]
 8013a58:	f107 031c 	add.w	r3, r7, #28
 8013a5c:	221d      	movs	r2, #29
 8013a5e:	2100      	movs	r1, #0
 8013a60:	4618      	mov	r0, r3
 8013a62:	f007 fdc3 	bl	801b5ec <memset>
    uint8_t versionMinor         = 0;
 8013a66:	2300      	movs	r3, #0
 8013a68:	75fb      	strb	r3, [r7, #23]
    uint16_t nonce               = CryptoNvm->DevNonce;
 8013a6a:	4b5a      	ldr	r3, [pc, #360]	@ (8013bd4 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 8013a6c:	681b      	ldr	r3, [r3, #0]
 8013a6e:	889b      	ldrh	r3, [r3, #4]
 8013a70:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
            nonce = CryptoNvm->FCntList.RJcount1;
        }
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

    if( SecureElementProcessJoinAccept( joinReqType, joinEUI, nonce, macMsg->Buffer,
 8013a74:	687b      	ldr	r3, [r7, #4]
 8013a76:	681c      	ldr	r4, [r3, #0]
 8013a78:	687b      	ldr	r3, [r7, #4]
 8013a7a:	791b      	ldrb	r3, [r3, #4]
 8013a7c:	f8b7 1044 	ldrh.w	r1, [r7, #68]	@ 0x44
 8013a80:	7bf8      	ldrb	r0, [r7, #15]
 8013a82:	f107 0217 	add.w	r2, r7, #23
 8013a86:	9202      	str	r2, [sp, #8]
 8013a88:	f107 0218 	add.w	r2, r7, #24
 8013a8c:	9201      	str	r2, [sp, #4]
 8013a8e:	9300      	str	r3, [sp, #0]
 8013a90:	4623      	mov	r3, r4
 8013a92:	460a      	mov	r2, r1
 8013a94:	68b9      	ldr	r1, [r7, #8]
 8013a96:	f7f8 f955 	bl	800bd44 <SecureElementProcessJoinAccept>
 8013a9a:	4603      	mov	r3, r0
 8013a9c:	2b00      	cmp	r3, #0
 8013a9e:	d001      	beq.n	8013aa4 <LoRaMacCryptoHandleJoinAccept+0x74>
                                        macMsg->BufSize, decJoinAccept,
                                        &versionMinor ) != SECURE_ELEMENT_SUCCESS )
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8013aa0:	230e      	movs	r3, #14
 8013aa2:	e092      	b.n	8013bca <LoRaMacCryptoHandleJoinAccept+0x19a>
    }

    memcpy1( macMsg->Buffer, decJoinAccept, macMsg->BufSize );
 8013aa4:	687b      	ldr	r3, [r7, #4]
 8013aa6:	6818      	ldr	r0, [r3, #0]
 8013aa8:	687b      	ldr	r3, [r7, #4]
 8013aaa:	791b      	ldrb	r3, [r3, #4]
 8013aac:	461a      	mov	r2, r3
 8013aae:	f107 0318 	add.w	r3, r7, #24
 8013ab2:	4619      	mov	r1, r3
 8013ab4:	f002 ffd3 	bl	8016a5e <memcpy1>

    // Parse the message
    if( LoRaMacParserJoinAccept( macMsg ) != LORAMAC_PARSER_SUCCESS )
 8013ab8:	6878      	ldr	r0, [r7, #4]
 8013aba:	f000 f9eb 	bl	8013e94 <LoRaMacParserJoinAccept>
 8013abe:	4603      	mov	r3, r0
 8013ac0:	2b00      	cmp	r3, #0
 8013ac2:	d001      	beq.n	8013ac8 <LoRaMacCryptoHandleJoinAccept+0x98>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
 8013ac4:	230f      	movs	r3, #15
 8013ac6:	e080      	b.n	8013bca <LoRaMacCryptoHandleJoinAccept+0x19a>
    }

    uint32_t currentJoinNonce;

    currentJoinNonce = ( uint32_t )macMsg->JoinNonce[0];
 8013ac8:	687b      	ldr	r3, [r7, #4]
 8013aca:	799b      	ldrb	r3, [r3, #6]
 8013acc:	643b      	str	r3, [r7, #64]	@ 0x40
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[1] << 8 );
 8013ace:	687b      	ldr	r3, [r7, #4]
 8013ad0:	79db      	ldrb	r3, [r3, #7]
 8013ad2:	021b      	lsls	r3, r3, #8
 8013ad4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8013ad6:	4313      	orrs	r3, r2
 8013ad8:	643b      	str	r3, [r7, #64]	@ 0x40
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[2] << 16 );
 8013ada:	687b      	ldr	r3, [r7, #4]
 8013adc:	7a1b      	ldrb	r3, [r3, #8]
 8013ade:	041b      	lsls	r3, r3, #16
 8013ae0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8013ae2:	4313      	orrs	r3, r2
 8013ae4:	643b      	str	r3, [r7, #64]	@ 0x40
#if( USE_JOIN_NONCE_COUNTER_CHECK == 1 )
    // Check if the JoinNonce is greater as the previous one
    if( currentJoinNonce > CryptoNvm->JoinNonce )
#else
    // Check if the JoinNonce is different from the previous one
    if( currentJoinNonce != CryptoNvm->JoinNonce )
 8013ae6:	4b3b      	ldr	r3, [pc, #236]	@ (8013bd4 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 8013ae8:	681b      	ldr	r3, [r3, #0]
 8013aea:	689b      	ldr	r3, [r3, #8]
 8013aec:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8013aee:	429a      	cmp	r2, r3
 8013af0:	d010      	beq.n	8013b14 <LoRaMacCryptoHandleJoinAccept+0xe4>
#endif /* USE_JOIN_NONCE_COUNTER_CHECK */
    {
        CryptoNvm->JoinNonce = currentJoinNonce;
 8013af2:	4b38      	ldr	r3, [pc, #224]	@ (8013bd4 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 8013af4:	681b      	ldr	r3, [r3, #0]
 8013af6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8013af8:	609a      	str	r2, [r3, #8]
    {
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
    }

    // Derive lifetime keys
    retval = LoRaMacCryptoDeriveMcRootKey( versionMinor, APP_KEY );
 8013afa:	7dfb      	ldrb	r3, [r7, #23]
 8013afc:	2100      	movs	r1, #0
 8013afe:	4618      	mov	r0, r3
 8013b00:	f000 f97a 	bl	8013df8 <LoRaMacCryptoDeriveMcRootKey>
 8013b04:	4603      	mov	r3, r0
 8013b06:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8013b0a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8013b0e:	2b00      	cmp	r3, #0
 8013b10:	d005      	beq.n	8013b1e <LoRaMacCryptoHandleJoinAccept+0xee>
 8013b12:	e001      	b.n	8013b18 <LoRaMacCryptoHandleJoinAccept+0xe8>
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
 8013b14:	2303      	movs	r3, #3
 8013b16:	e058      	b.n	8013bca <LoRaMacCryptoHandleJoinAccept+0x19a>
    {
        return retval;
 8013b18:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8013b1c:	e055      	b.n	8013bca <LoRaMacCryptoHandleJoinAccept+0x19a>
    }

    retval = LoRaMacCryptoDeriveMcKEKey( MC_ROOT_KEY );
 8013b1e:	2004      	movs	r0, #4
 8013b20:	f000 f995 	bl	8013e4e <LoRaMacCryptoDeriveMcKEKey>
 8013b24:	4603      	mov	r3, r0
 8013b26:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8013b2a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8013b2e:	2b00      	cmp	r3, #0
 8013b30:	d002      	beq.n	8013b38 <LoRaMacCryptoHandleJoinAccept+0x108>
    {
        return retval;
 8013b32:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8013b36:	e048      	b.n	8013bca <LoRaMacCryptoHandleJoinAccept+0x19a>
    {
        // Operating in LoRaWAN 1.0.x mode

        uint32_t netID;

        netID = ( uint32_t )macMsg->NetID[0];
 8013b38:	687b      	ldr	r3, [r7, #4]
 8013b3a:	7a5b      	ldrb	r3, [r3, #9]
 8013b3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        netID |= ( ( uint32_t )macMsg->NetID[1] << 8 );
 8013b3e:	687b      	ldr	r3, [r7, #4]
 8013b40:	7a9b      	ldrb	r3, [r3, #10]
 8013b42:	021b      	lsls	r3, r3, #8
 8013b44:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8013b46:	4313      	orrs	r3, r2
 8013b48:	63fb      	str	r3, [r7, #60]	@ 0x3c
        netID |= ( ( uint32_t )macMsg->NetID[2] << 16 );
 8013b4a:	687b      	ldr	r3, [r7, #4]
 8013b4c:	7adb      	ldrb	r3, [r3, #11]
 8013b4e:	041b      	lsls	r3, r3, #16
 8013b50:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8013b52:	4313      	orrs	r3, r2
 8013b54:	63fb      	str	r3, [r7, #60]	@ 0x3c

        retval = DeriveSessionKey10x( APP_S_KEY, currentJoinNonce, netID, nonce );
 8013b56:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8013b5a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8013b5c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8013b5e:	2003      	movs	r0, #3
 8013b60:	f7ff fd06 	bl	8013570 <DeriveSessionKey10x>
 8013b64:	4603      	mov	r3, r0
 8013b66:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8013b6a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8013b6e:	2b00      	cmp	r3, #0
 8013b70:	d002      	beq.n	8013b78 <LoRaMacCryptoHandleJoinAccept+0x148>
        {
            return retval;
 8013b72:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8013b76:	e028      	b.n	8013bca <LoRaMacCryptoHandleJoinAccept+0x19a>
            return retval;
        }

        retval = DeriveSessionKey10x( S_NWK_S_INT_KEY, currentJoinNonce, netID, nonce );
#else
        retval = DeriveSessionKey10x( NWK_S_KEY, currentJoinNonce, netID, nonce );
 8013b78:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8013b7c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8013b7e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8013b80:	2002      	movs	r0, #2
 8013b82:	f7ff fcf5 	bl	8013570 <DeriveSessionKey10x>
 8013b86:	4603      	mov	r3, r0
 8013b88:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8013b8c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8013b90:	2b00      	cmp	r3, #0
 8013b92:	d002      	beq.n	8013b9a <LoRaMacCryptoHandleJoinAccept+0x16a>
        {
            return retval;
 8013b94:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8013b98:	e017      	b.n	8013bca <LoRaMacCryptoHandleJoinAccept+0x19a>
        }
    }

    // Join-Accept is successfully processed
    // Save LoRaWAN specification version
    CryptoNvm->LrWanVersion.Fields.Minor = versionMinor;
 8013b9a:	4b0e      	ldr	r3, [pc, #56]	@ (8013bd4 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 8013b9c:	681b      	ldr	r3, [r3, #0]
 8013b9e:	7dfa      	ldrb	r2, [r7, #23]
 8013ba0:	709a      	strb	r2, [r3, #2]

    // Reset frame counters
#if( USE_LRWAN_1_1_X_CRYPTO == 1 )
    RJcount0 = 0;
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */
    CryptoNvm->FCntList.FCntUp = 0;
 8013ba2:	4b0c      	ldr	r3, [pc, #48]	@ (8013bd4 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 8013ba4:	681b      	ldr	r3, [r3, #0]
 8013ba6:	2200      	movs	r2, #0
 8013ba8:	60da      	str	r2, [r3, #12]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 8013baa:	4b0a      	ldr	r3, [pc, #40]	@ (8013bd4 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 8013bac:	681b      	ldr	r3, [r3, #0]
 8013bae:	f04f 32ff 	mov.w	r2, #4294967295
 8013bb2:	619a      	str	r2, [r3, #24]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 8013bb4:	4b07      	ldr	r3, [pc, #28]	@ (8013bd4 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 8013bb6:	681b      	ldr	r3, [r3, #0]
 8013bb8:	f04f 32ff 	mov.w	r2, #4294967295
 8013bbc:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITAL_VALUE;
 8013bbe:	4b05      	ldr	r3, [pc, #20]	@ (8013bd4 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 8013bc0:	681b      	ldr	r3, [r3, #0]
 8013bc2:	f04f 32ff 	mov.w	r2, #4294967295
 8013bc6:	615a      	str	r2, [r3, #20]

    return LORAMAC_CRYPTO_SUCCESS;
 8013bc8:	2300      	movs	r3, #0
}
 8013bca:	4618      	mov	r0, r3
 8013bcc:	374c      	adds	r7, #76	@ 0x4c
 8013bce:	46bd      	mov	sp, r7
 8013bd0:	bd90      	pop	{r4, r7, pc}
 8013bd2:	bf00      	nop
 8013bd4:	20001960 	.word	0x20001960

08013bd8 <LoRaMacCryptoSecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoSecureMessage( uint32_t fCntUp, uint8_t txDr, uint8_t txCh, LoRaMacMessageData_t* macMsg )
{
 8013bd8:	b590      	push	{r4, r7, lr}
 8013bda:	b08b      	sub	sp, #44	@ 0x2c
 8013bdc:	af04      	add	r7, sp, #16
 8013bde:	60f8      	str	r0, [r7, #12]
 8013be0:	607b      	str	r3, [r7, #4]
 8013be2:	460b      	mov	r3, r1
 8013be4:	72fb      	strb	r3, [r7, #11]
 8013be6:	4613      	mov	r3, r2
 8013be8:	72bb      	strb	r3, [r7, #10]
    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 8013bea:	2312      	movs	r3, #18
 8013bec:	75bb      	strb	r3, [r7, #22]
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 8013bee:	2303      	movs	r3, #3
 8013bf0:	75fb      	strb	r3, [r7, #23]

    if( macMsg == NULL )
 8013bf2:	687b      	ldr	r3, [r7, #4]
 8013bf4:	2b00      	cmp	r3, #0
 8013bf6:	d101      	bne.n	8013bfc <LoRaMacCryptoSecureMessage+0x24>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8013bf8:	2309      	movs	r3, #9
 8013bfa:	e05e      	b.n	8013cba <LoRaMacCryptoSecureMessage+0xe2>
    }

    if( fCntUp < CryptoNvm->FCntList.FCntUp )
 8013bfc:	4b31      	ldr	r3, [pc, #196]	@ (8013cc4 <LoRaMacCryptoSecureMessage+0xec>)
 8013bfe:	681b      	ldr	r3, [r3, #0]
 8013c00:	68db      	ldr	r3, [r3, #12]
 8013c02:	68fa      	ldr	r2, [r7, #12]
 8013c04:	429a      	cmp	r2, r3
 8013c06:	d201      	bcs.n	8013c0c <LoRaMacCryptoSecureMessage+0x34>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 8013c08:	2306      	movs	r3, #6
 8013c0a:	e056      	b.n	8013cba <LoRaMacCryptoSecureMessage+0xe2>
    }

    // Encrypt payload
    if( macMsg->FPort == 0 )
 8013c0c:	687b      	ldr	r3, [r7, #4]
 8013c0e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013c12:	2b00      	cmp	r3, #0
 8013c14:	d101      	bne.n	8013c1a <LoRaMacCryptoSecureMessage+0x42>
        // Use network session key
        /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        payloadDecryptionKeyID = NWK_S_KEY;
 8013c16:	2302      	movs	r3, #2
 8013c18:	75fb      	strb	r3, [r7, #23]
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
    }

    if( fCntUp > CryptoNvm->FCntList.FCntUp )
 8013c1a:	4b2a      	ldr	r3, [pc, #168]	@ (8013cc4 <LoRaMacCryptoSecureMessage+0xec>)
 8013c1c:	681b      	ldr	r3, [r3, #0]
 8013c1e:	68db      	ldr	r3, [r3, #12]
 8013c20:	68fa      	ldr	r2, [r7, #12]
 8013c22:	429a      	cmp	r2, r3
 8013c24:	d916      	bls.n	8013c54 <LoRaMacCryptoSecureMessage+0x7c>
    {
        retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, macMsg->FHDR.DevAddr, UPLINK, fCntUp );
 8013c26:	687b      	ldr	r3, [r7, #4]
 8013c28:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8013c2a:	687b      	ldr	r3, [r7, #4]
 8013c2c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8013c30:	b219      	sxth	r1, r3
 8013c32:	687b      	ldr	r3, [r7, #4]
 8013c34:	689c      	ldr	r4, [r3, #8]
 8013c36:	7dfa      	ldrb	r2, [r7, #23]
 8013c38:	68fb      	ldr	r3, [r7, #12]
 8013c3a:	9301      	str	r3, [sp, #4]
 8013c3c:	2300      	movs	r3, #0
 8013c3e:	9300      	str	r3, [sp, #0]
 8013c40:	4623      	mov	r3, r4
 8013c42:	f7ff faa1 	bl	8013188 <PayloadEncrypt>
 8013c46:	4603      	mov	r3, r0
 8013c48:	75bb      	strb	r3, [r7, #22]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8013c4a:	7dbb      	ldrb	r3, [r7, #22]
 8013c4c:	2b00      	cmp	r3, #0
 8013c4e:	d001      	beq.n	8013c54 <LoRaMacCryptoSecureMessage+0x7c>
        {
            return retval;
 8013c50:	7dbb      	ldrb	r3, [r7, #22]
 8013c52:	e032      	b.n	8013cba <LoRaMacCryptoSecureMessage+0xe2>
        }
#endif /* USE_LRWAN_1_1_X_CRYPTO */
    }

    // Serialize message
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8013c54:	6878      	ldr	r0, [r7, #4]
 8013c56:	f000 fb5c 	bl	8014312 <LoRaMacSerializerData>
 8013c5a:	4603      	mov	r3, r0
 8013c5c:	2b00      	cmp	r3, #0
 8013c5e:	d001      	beq.n	8013c64 <LoRaMacCryptoSecureMessage+0x8c>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8013c60:	2310      	movs	r3, #16
 8013c62:	e02a      	b.n	8013cba <LoRaMacCryptoSecureMessage+0xe2>
        // Use network session key
        /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        payloadDecryptionKeyID = NWK_S_KEY;
 8013c64:	2302      	movs	r3, #2
 8013c66:	75fb      	strb	r3, [r7, #23]
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
        // MIC = cmacF[0..3]
        // The IsAck parameter is every time false since the ConfFCnt field is not used in legacy mode.
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), payloadDecryptionKeyID, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 8013c68:	687b      	ldr	r3, [r7, #4]
 8013c6a:	6818      	ldr	r0, [r3, #0]
 8013c6c:	687b      	ldr	r3, [r7, #4]
 8013c6e:	791b      	ldrb	r3, [r3, #4]
 8013c70:	3b04      	subs	r3, #4
 8013c72:	b299      	uxth	r1, r3
 8013c74:	687b      	ldr	r3, [r7, #4]
 8013c76:	689b      	ldr	r3, [r3, #8]
 8013c78:	687a      	ldr	r2, [r7, #4]
 8013c7a:	322c      	adds	r2, #44	@ 0x2c
 8013c7c:	7dfc      	ldrb	r4, [r7, #23]
 8013c7e:	9203      	str	r2, [sp, #12]
 8013c80:	68fa      	ldr	r2, [r7, #12]
 8013c82:	9202      	str	r2, [sp, #8]
 8013c84:	9301      	str	r3, [sp, #4]
 8013c86:	2300      	movs	r3, #0
 8013c88:	9300      	str	r3, [sp, #0]
 8013c8a:	2300      	movs	r3, #0
 8013c8c:	4622      	mov	r2, r4
 8013c8e:	f7ff fb7c 	bl	801338a <ComputeCmacB0>
 8013c92:	4603      	mov	r3, r0
 8013c94:	75bb      	strb	r3, [r7, #22]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8013c96:	7dbb      	ldrb	r3, [r7, #22]
 8013c98:	2b00      	cmp	r3, #0
 8013c9a:	d001      	beq.n	8013ca0 <LoRaMacCryptoSecureMessage+0xc8>
        {
            return retval;
 8013c9c:	7dbb      	ldrb	r3, [r7, #22]
 8013c9e:	e00c      	b.n	8013cba <LoRaMacCryptoSecureMessage+0xe2>
        }
    }

    // Re-serialize message to add the MIC
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8013ca0:	6878      	ldr	r0, [r7, #4]
 8013ca2:	f000 fb36 	bl	8014312 <LoRaMacSerializerData>
 8013ca6:	4603      	mov	r3, r0
 8013ca8:	2b00      	cmp	r3, #0
 8013caa:	d001      	beq.n	8013cb0 <LoRaMacCryptoSecureMessage+0xd8>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8013cac:	2310      	movs	r3, #16
 8013cae:	e004      	b.n	8013cba <LoRaMacCryptoSecureMessage+0xe2>
    }

    CryptoNvm->FCntList.FCntUp = fCntUp;
 8013cb0:	4b04      	ldr	r3, [pc, #16]	@ (8013cc4 <LoRaMacCryptoSecureMessage+0xec>)
 8013cb2:	681b      	ldr	r3, [r3, #0]
 8013cb4:	68fa      	ldr	r2, [r7, #12]
 8013cb6:	60da      	str	r2, [r3, #12]

    return LORAMAC_CRYPTO_SUCCESS;
 8013cb8:	2300      	movs	r3, #0
}
 8013cba:	4618      	mov	r0, r3
 8013cbc:	371c      	adds	r7, #28
 8013cbe:	46bd      	mov	sp, r7
 8013cc0:	bd90      	pop	{r4, r7, pc}
 8013cc2:	bf00      	nop
 8013cc4:	20001960 	.word	0x20001960

08013cc8 <LoRaMacCryptoUnsecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoUnsecureMessage( AddressIdentifier_t addrID, uint32_t address, FCntIdentifier_t fCntID, uint32_t fCntDown, LoRaMacMessageData_t* macMsg )
{
 8013cc8:	b590      	push	{r4, r7, lr}
 8013cca:	b08b      	sub	sp, #44	@ 0x2c
 8013ccc:	af04      	add	r7, sp, #16
 8013cce:	60b9      	str	r1, [r7, #8]
 8013cd0:	607b      	str	r3, [r7, #4]
 8013cd2:	4603      	mov	r3, r0
 8013cd4:	73fb      	strb	r3, [r7, #15]
 8013cd6:	4613      	mov	r3, r2
 8013cd8:	73bb      	strb	r3, [r7, #14]
    if( macMsg == 0 )
 8013cda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013cdc:	2b00      	cmp	r3, #0
 8013cde:	d101      	bne.n	8013ce4 <LoRaMacCryptoUnsecureMessage+0x1c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8013ce0:	2309      	movs	r3, #9
 8013ce2:	e083      	b.n	8013dec <LoRaMacCryptoUnsecureMessage+0x124>
    }

    if( CheckFCntDown( fCntID, fCntDown ) == false )
 8013ce4:	7bbb      	ldrb	r3, [r7, #14]
 8013ce6:	6879      	ldr	r1, [r7, #4]
 8013ce8:	4618      	mov	r0, r3
 8013cea:	f7ff fcdf 	bl	80136ac <CheckFCntDown>
 8013cee:	4603      	mov	r3, r0
 8013cf0:	f083 0301 	eor.w	r3, r3, #1
 8013cf4:	b2db      	uxtb	r3, r3
 8013cf6:	2b00      	cmp	r3, #0
 8013cf8:	d001      	beq.n	8013cfe <LoRaMacCryptoUnsecureMessage+0x36>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 8013cfa:	2306      	movs	r3, #6
 8013cfc:	e076      	b.n	8013dec <LoRaMacCryptoUnsecureMessage+0x124>
    }

    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 8013cfe:	2312      	movs	r3, #18
 8013d00:	757b      	strb	r3, [r7, #21]
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 8013d02:	2303      	movs	r3, #3
 8013d04:	75fb      	strb	r3, [r7, #23]
    /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
    KeyIdentifier_t micComputationKeyID = S_NWK_S_INT_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
    KeyIdentifier_t micComputationKeyID = NWK_S_KEY;
 8013d06:	2302      	movs	r3, #2
 8013d08:	753b      	strb	r3, [r7, #20]
#endif /* USE_LRWAN_1_1_X_CRYPTO */
    /* ST_WORKAROUND_END */
    KeyAddr_t* curItem;

    // Parse the message
    if( LoRaMacParserData( macMsg ) != LORAMAC_PARSER_SUCCESS )
 8013d0a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8013d0c:	f000 f98d 	bl	801402a <LoRaMacParserData>
 8013d10:	4603      	mov	r3, r0
 8013d12:	2b00      	cmp	r3, #0
 8013d14:	d001      	beq.n	8013d1a <LoRaMacCryptoUnsecureMessage+0x52>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
 8013d16:	230f      	movs	r3, #15
 8013d18:	e068      	b.n	8013dec <LoRaMacCryptoUnsecureMessage+0x124>
    }

    // Determine current security context
    retval = GetKeyAddrItem( addrID, &curItem );
 8013d1a:	f107 0210 	add.w	r2, r7, #16
 8013d1e:	7bfb      	ldrb	r3, [r7, #15]
 8013d20:	4611      	mov	r1, r2
 8013d22:	4618      	mov	r0, r3
 8013d24:	f7ff fbfe 	bl	8013524 <GetKeyAddrItem>
 8013d28:	4603      	mov	r3, r0
 8013d2a:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8013d2c:	7d7b      	ldrb	r3, [r7, #21]
 8013d2e:	2b00      	cmp	r3, #0
 8013d30:	d001      	beq.n	8013d36 <LoRaMacCryptoUnsecureMessage+0x6e>
    {
        return retval;
 8013d32:	7d7b      	ldrb	r3, [r7, #21]
 8013d34:	e05a      	b.n	8013dec <LoRaMacCryptoUnsecureMessage+0x124>
    }

    payloadDecryptionKeyID = curItem->AppSkey;
 8013d36:	693b      	ldr	r3, [r7, #16]
 8013d38:	785b      	ldrb	r3, [r3, #1]
 8013d3a:	75fb      	strb	r3, [r7, #23]
    micComputationKeyID = curItem->NwkSkey;
 8013d3c:	693b      	ldr	r3, [r7, #16]
 8013d3e:	789b      	ldrb	r3, [r3, #2]
 8013d40:	753b      	strb	r3, [r7, #20]

    // Check if it is our address
    if( address != macMsg->FHDR.DevAddr )
 8013d42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013d44:	689b      	ldr	r3, [r3, #8]
 8013d46:	68ba      	ldr	r2, [r7, #8]
 8013d48:	429a      	cmp	r2, r3
 8013d4a:	d001      	beq.n	8013d50 <LoRaMacCryptoUnsecureMessage+0x88>
    {
        return LORAMAC_CRYPTO_FAIL_ADDRESS;
 8013d4c:	2302      	movs	r3, #2
 8013d4e:	e04d      	b.n	8013dec <LoRaMacCryptoUnsecureMessage+0x124>
    }

    // Compute mic
    bool isAck = macMsg->FHDR.FCtrl.Bits.Ack;
 8013d50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013d52:	7b1b      	ldrb	r3, [r3, #12]
 8013d54:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8013d58:	b2db      	uxtb	r3, r3
 8013d5a:	2b00      	cmp	r3, #0
 8013d5c:	bf14      	ite	ne
 8013d5e:	2301      	movne	r3, #1
 8013d60:	2300      	moveq	r3, #0
 8013d62:	75bb      	strb	r3, [r7, #22]
    if( CryptoNvm->LrWanVersion.Fields.Minor == 0 )
 8013d64:	4b23      	ldr	r3, [pc, #140]	@ (8013df4 <LoRaMacCryptoUnsecureMessage+0x12c>)
 8013d66:	681b      	ldr	r3, [r3, #0]
 8013d68:	789b      	ldrb	r3, [r3, #2]
 8013d6a:	2b00      	cmp	r3, #0
 8013d6c:	d101      	bne.n	8013d72 <LoRaMacCryptoUnsecureMessage+0xaa>
    {
        // In legacy mode the IsAck parameter is forced to be false since the ConfFCnt field is not used.
        isAck = false;
 8013d6e:	2300      	movs	r3, #0
 8013d70:	75bb      	strb	r3, [r7, #22]
    }

    // Verify mic
    retval = VerifyCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, isAck, DOWNLINK, address, fCntDown, macMsg->MIC );
 8013d72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013d74:	6818      	ldr	r0, [r3, #0]
 8013d76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013d78:	791b      	ldrb	r3, [r3, #4]
 8013d7a:	3b04      	subs	r3, #4
 8013d7c:	b299      	uxth	r1, r3
 8013d7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013d80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013d82:	7dbc      	ldrb	r4, [r7, #22]
 8013d84:	7d3a      	ldrb	r2, [r7, #20]
 8013d86:	9303      	str	r3, [sp, #12]
 8013d88:	687b      	ldr	r3, [r7, #4]
 8013d8a:	9302      	str	r3, [sp, #8]
 8013d8c:	68bb      	ldr	r3, [r7, #8]
 8013d8e:	9301      	str	r3, [sp, #4]
 8013d90:	2301      	movs	r3, #1
 8013d92:	9300      	str	r3, [sp, #0]
 8013d94:	4623      	mov	r3, r4
 8013d96:	f7ff fb36 	bl	8013406 <VerifyCmacB0>
 8013d9a:	4603      	mov	r3, r0
 8013d9c:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8013d9e:	7d7b      	ldrb	r3, [r7, #21]
 8013da0:	2b00      	cmp	r3, #0
 8013da2:	d001      	beq.n	8013da8 <LoRaMacCryptoUnsecureMessage+0xe0>
    {
        return retval;
 8013da4:	7d7b      	ldrb	r3, [r7, #21]
 8013da6:	e021      	b.n	8013dec <LoRaMacCryptoUnsecureMessage+0x124>
    }

    // Decrypt payload
    if( macMsg->FPort == 0 )
 8013da8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013daa:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013dae:	2b00      	cmp	r3, #0
 8013db0:	d101      	bne.n	8013db6 <LoRaMacCryptoUnsecureMessage+0xee>
        // Use network session encryption key
        /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        payloadDecryptionKeyID = NWK_S_KEY;
 8013db2:	2302      	movs	r3, #2
 8013db4:	75fb      	strb	r3, [r7, #23]
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
    }
    retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, address, DOWNLINK, fCntDown );
 8013db6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013db8:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8013dba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013dbc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8013dc0:	b219      	sxth	r1, r3
 8013dc2:	7dfa      	ldrb	r2, [r7, #23]
 8013dc4:	687b      	ldr	r3, [r7, #4]
 8013dc6:	9301      	str	r3, [sp, #4]
 8013dc8:	2301      	movs	r3, #1
 8013dca:	9300      	str	r3, [sp, #0]
 8013dcc:	68bb      	ldr	r3, [r7, #8]
 8013dce:	f7ff f9db 	bl	8013188 <PayloadEncrypt>
 8013dd2:	4603      	mov	r3, r0
 8013dd4:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8013dd6:	7d7b      	ldrb	r3, [r7, #21]
 8013dd8:	2b00      	cmp	r3, #0
 8013dda:	d001      	beq.n	8013de0 <LoRaMacCryptoUnsecureMessage+0x118>
    {
        return retval;
 8013ddc:	7d7b      	ldrb	r3, [r7, #21]
 8013dde:	e005      	b.n	8013dec <LoRaMacCryptoUnsecureMessage+0x124>
            }
        }
    }
#endif

    UpdateFCntDown( fCntID, fCntDown );
 8013de0:	7bbb      	ldrb	r3, [r7, #14]
 8013de2:	6879      	ldr	r1, [r7, #4]
 8013de4:	4618      	mov	r0, r3
 8013de6:	f7ff fc85 	bl	80136f4 <UpdateFCntDown>

    return LORAMAC_CRYPTO_SUCCESS;
 8013dea:	2300      	movs	r3, #0
}
 8013dec:	4618      	mov	r0, r3
 8013dee:	371c      	adds	r7, #28
 8013df0:	46bd      	mov	sp, r7
 8013df2:	bd90      	pop	{r4, r7, pc}
 8013df4:	20001960 	.word	0x20001960

08013df8 <LoRaMacCryptoDeriveMcRootKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveMcRootKey( uint8_t versionMinor, KeyIdentifier_t keyID )
{
 8013df8:	b580      	push	{r7, lr}
 8013dfa:	b086      	sub	sp, #24
 8013dfc:	af00      	add	r7, sp, #0
 8013dfe:	4603      	mov	r3, r0
 8013e00:	460a      	mov	r2, r1
 8013e02:	71fb      	strb	r3, [r7, #7]
 8013e04:	4613      	mov	r3, r2
 8013e06:	71bb      	strb	r3, [r7, #6]
    // Prevent other keys than AppKey
    if( keyID != APP_KEY )
 8013e08:	79bb      	ldrb	r3, [r7, #6]
 8013e0a:	2b00      	cmp	r3, #0
 8013e0c:	d001      	beq.n	8013e12 <LoRaMacCryptoDeriveMcRootKey+0x1a>
    {
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 8013e0e:	230a      	movs	r3, #10
 8013e10:	e019      	b.n	8013e46 <LoRaMacCryptoDeriveMcRootKey+0x4e>
    }
    uint8_t compBase[16] = { 0 };
 8013e12:	2300      	movs	r3, #0
 8013e14:	60bb      	str	r3, [r7, #8]
 8013e16:	f107 030c 	add.w	r3, r7, #12
 8013e1a:	2200      	movs	r2, #0
 8013e1c:	601a      	str	r2, [r3, #0]
 8013e1e:	605a      	str	r2, [r3, #4]
 8013e20:	609a      	str	r2, [r3, #8]

    if( versionMinor == 1 )
 8013e22:	79fb      	ldrb	r3, [r7, #7]
 8013e24:	2b01      	cmp	r3, #1
 8013e26:	d101      	bne.n	8013e2c <LoRaMacCryptoDeriveMcRootKey+0x34>
    {
        compBase[0] = 0x20;
 8013e28:	2320      	movs	r3, #32
 8013e2a:	723b      	strb	r3, [r7, #8]
    }
    if( SecureElementDeriveAndStoreKey( compBase, keyID, MC_ROOT_KEY ) != SECURE_ELEMENT_SUCCESS )
 8013e2c:	79b9      	ldrb	r1, [r7, #6]
 8013e2e:	f107 0308 	add.w	r3, r7, #8
 8013e32:	2204      	movs	r2, #4
 8013e34:	4618      	mov	r0, r3
 8013e36:	f7f7 ff45 	bl	800bcc4 <SecureElementDeriveAndStoreKey>
 8013e3a:	4603      	mov	r3, r0
 8013e3c:	2b00      	cmp	r3, #0
 8013e3e:	d001      	beq.n	8013e44 <LoRaMacCryptoDeriveMcRootKey+0x4c>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8013e40:	230e      	movs	r3, #14
 8013e42:	e000      	b.n	8013e46 <LoRaMacCryptoDeriveMcRootKey+0x4e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8013e44:	2300      	movs	r3, #0
}
 8013e46:	4618      	mov	r0, r3
 8013e48:	3718      	adds	r7, #24
 8013e4a:	46bd      	mov	sp, r7
 8013e4c:	bd80      	pop	{r7, pc}

08013e4e <LoRaMacCryptoDeriveMcKEKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveMcKEKey( KeyIdentifier_t keyID )
{
 8013e4e:	b580      	push	{r7, lr}
 8013e50:	b086      	sub	sp, #24
 8013e52:	af00      	add	r7, sp, #0
 8013e54:	4603      	mov	r3, r0
 8013e56:	71fb      	strb	r3, [r7, #7]
    // Prevent other keys than McRootKey
    if( keyID != MC_ROOT_KEY )
 8013e58:	79fb      	ldrb	r3, [r7, #7]
 8013e5a:	2b04      	cmp	r3, #4
 8013e5c:	d001      	beq.n	8013e62 <LoRaMacCryptoDeriveMcKEKey+0x14>
    {
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 8013e5e:	230a      	movs	r3, #10
 8013e60:	e014      	b.n	8013e8c <LoRaMacCryptoDeriveMcKEKey+0x3e>
    }
    uint8_t compBase[16] = { 0 };
 8013e62:	2300      	movs	r3, #0
 8013e64:	60bb      	str	r3, [r7, #8]
 8013e66:	f107 030c 	add.w	r3, r7, #12
 8013e6a:	2200      	movs	r2, #0
 8013e6c:	601a      	str	r2, [r3, #0]
 8013e6e:	605a      	str	r2, [r3, #4]
 8013e70:	609a      	str	r2, [r3, #8]

    if( SecureElementDeriveAndStoreKey( compBase, keyID, MC_KE_KEY ) != SECURE_ELEMENT_SUCCESS )
 8013e72:	79f9      	ldrb	r1, [r7, #7]
 8013e74:	f107 0308 	add.w	r3, r7, #8
 8013e78:	227f      	movs	r2, #127	@ 0x7f
 8013e7a:	4618      	mov	r0, r3
 8013e7c:	f7f7 ff22 	bl	800bcc4 <SecureElementDeriveAndStoreKey>
 8013e80:	4603      	mov	r3, r0
 8013e82:	2b00      	cmp	r3, #0
 8013e84:	d001      	beq.n	8013e8a <LoRaMacCryptoDeriveMcKEKey+0x3c>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8013e86:	230e      	movs	r3, #14
 8013e88:	e000      	b.n	8013e8c <LoRaMacCryptoDeriveMcKEKey+0x3e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8013e8a:	2300      	movs	r3, #0
}
 8013e8c:	4618      	mov	r0, r3
 8013e8e:	3718      	adds	r7, #24
 8013e90:	46bd      	mov	sp, r7
 8013e92:	bd80      	pop	{r7, pc}

08013e94 <LoRaMacParserJoinAccept>:
 */
#include "LoRaMacParser.h"
#include "utilities.h"

LoRaMacParserStatus_t LoRaMacParserJoinAccept( LoRaMacMessageJoinAccept_t* macMsg )
{
 8013e94:	b580      	push	{r7, lr}
 8013e96:	b084      	sub	sp, #16
 8013e98:	af00      	add	r7, sp, #0
 8013e9a:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8013e9c:	687b      	ldr	r3, [r7, #4]
 8013e9e:	2b00      	cmp	r3, #0
 8013ea0:	d003      	beq.n	8013eaa <LoRaMacParserJoinAccept+0x16>
 8013ea2:	687b      	ldr	r3, [r7, #4]
 8013ea4:	681b      	ldr	r3, [r3, #0]
 8013ea6:	2b00      	cmp	r3, #0
 8013ea8:	d101      	bne.n	8013eae <LoRaMacParserJoinAccept+0x1a>
    {
        return LORAMAC_PARSER_ERROR_NPE;
 8013eaa:	2302      	movs	r3, #2
 8013eac:	e0b9      	b.n	8014022 <LoRaMacParserJoinAccept+0x18e>
    }

    uint16_t bufItr = 0;
 8013eae:	2300      	movs	r3, #0
 8013eb0:	81fb      	strh	r3, [r7, #14]

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 8013eb2:	687b      	ldr	r3, [r7, #4]
 8013eb4:	681a      	ldr	r2, [r3, #0]
 8013eb6:	89fb      	ldrh	r3, [r7, #14]
 8013eb8:	1c59      	adds	r1, r3, #1
 8013eba:	81f9      	strh	r1, [r7, #14]
 8013ebc:	4413      	add	r3, r2
 8013ebe:	781a      	ldrb	r2, [r3, #0]
 8013ec0:	687b      	ldr	r3, [r7, #4]
 8013ec2:	715a      	strb	r2, [r3, #5]

    memcpy1( macMsg->JoinNonce, &macMsg->Buffer[bufItr], 3 );
 8013ec4:	687b      	ldr	r3, [r7, #4]
 8013ec6:	1d98      	adds	r0, r3, #6
 8013ec8:	687b      	ldr	r3, [r7, #4]
 8013eca:	681a      	ldr	r2, [r3, #0]
 8013ecc:	89fb      	ldrh	r3, [r7, #14]
 8013ece:	4413      	add	r3, r2
 8013ed0:	2203      	movs	r2, #3
 8013ed2:	4619      	mov	r1, r3
 8013ed4:	f002 fdc3 	bl	8016a5e <memcpy1>
    bufItr = bufItr + 3;
 8013ed8:	89fb      	ldrh	r3, [r7, #14]
 8013eda:	3303      	adds	r3, #3
 8013edc:	81fb      	strh	r3, [r7, #14]

    memcpy1( macMsg->NetID, &macMsg->Buffer[bufItr], 3 );
 8013ede:	687b      	ldr	r3, [r7, #4]
 8013ee0:	f103 0009 	add.w	r0, r3, #9
 8013ee4:	687b      	ldr	r3, [r7, #4]
 8013ee6:	681a      	ldr	r2, [r3, #0]
 8013ee8:	89fb      	ldrh	r3, [r7, #14]
 8013eea:	4413      	add	r3, r2
 8013eec:	2203      	movs	r2, #3
 8013eee:	4619      	mov	r1, r3
 8013ef0:	f002 fdb5 	bl	8016a5e <memcpy1>
    bufItr = bufItr + 3;
 8013ef4:	89fb      	ldrh	r3, [r7, #14]
 8013ef6:	3303      	adds	r3, #3
 8013ef8:	81fb      	strh	r3, [r7, #14]

    macMsg->DevAddr = ( uint32_t ) macMsg->Buffer[bufItr++];
 8013efa:	687b      	ldr	r3, [r7, #4]
 8013efc:	681a      	ldr	r2, [r3, #0]
 8013efe:	89fb      	ldrh	r3, [r7, #14]
 8013f00:	1c59      	adds	r1, r3, #1
 8013f02:	81f9      	strh	r1, [r7, #14]
 8013f04:	4413      	add	r3, r2
 8013f06:	781b      	ldrb	r3, [r3, #0]
 8013f08:	461a      	mov	r2, r3
 8013f0a:	687b      	ldr	r3, [r7, #4]
 8013f0c:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8013f0e:	687b      	ldr	r3, [r7, #4]
 8013f10:	681a      	ldr	r2, [r3, #0]
 8013f12:	89fb      	ldrh	r3, [r7, #14]
 8013f14:	1c59      	adds	r1, r3, #1
 8013f16:	81f9      	strh	r1, [r7, #14]
 8013f18:	4413      	add	r3, r2
 8013f1a:	781b      	ldrb	r3, [r3, #0]
 8013f1c:	021a      	lsls	r2, r3, #8
 8013f1e:	687b      	ldr	r3, [r7, #4]
 8013f20:	68db      	ldr	r3, [r3, #12]
 8013f22:	431a      	orrs	r2, r3
 8013f24:	687b      	ldr	r3, [r7, #4]
 8013f26:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8013f28:	687b      	ldr	r3, [r7, #4]
 8013f2a:	681a      	ldr	r2, [r3, #0]
 8013f2c:	89fb      	ldrh	r3, [r7, #14]
 8013f2e:	1c59      	adds	r1, r3, #1
 8013f30:	81f9      	strh	r1, [r7, #14]
 8013f32:	4413      	add	r3, r2
 8013f34:	781b      	ldrb	r3, [r3, #0]
 8013f36:	041a      	lsls	r2, r3, #16
 8013f38:	687b      	ldr	r3, [r7, #4]
 8013f3a:	68db      	ldr	r3, [r3, #12]
 8013f3c:	431a      	orrs	r2, r3
 8013f3e:	687b      	ldr	r3, [r7, #4]
 8013f40:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 8013f42:	687b      	ldr	r3, [r7, #4]
 8013f44:	681a      	ldr	r2, [r3, #0]
 8013f46:	89fb      	ldrh	r3, [r7, #14]
 8013f48:	1c59      	adds	r1, r3, #1
 8013f4a:	81f9      	strh	r1, [r7, #14]
 8013f4c:	4413      	add	r3, r2
 8013f4e:	781b      	ldrb	r3, [r3, #0]
 8013f50:	061a      	lsls	r2, r3, #24
 8013f52:	687b      	ldr	r3, [r7, #4]
 8013f54:	68db      	ldr	r3, [r3, #12]
 8013f56:	431a      	orrs	r2, r3
 8013f58:	687b      	ldr	r3, [r7, #4]
 8013f5a:	60da      	str	r2, [r3, #12]

    macMsg->DLSettings.Value = macMsg->Buffer[bufItr++];
 8013f5c:	687b      	ldr	r3, [r7, #4]
 8013f5e:	681a      	ldr	r2, [r3, #0]
 8013f60:	89fb      	ldrh	r3, [r7, #14]
 8013f62:	1c59      	adds	r1, r3, #1
 8013f64:	81f9      	strh	r1, [r7, #14]
 8013f66:	4413      	add	r3, r2
 8013f68:	781a      	ldrb	r2, [r3, #0]
 8013f6a:	687b      	ldr	r3, [r7, #4]
 8013f6c:	741a      	strb	r2, [r3, #16]

    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 8013f6e:	687b      	ldr	r3, [r7, #4]
 8013f70:	681a      	ldr	r2, [r3, #0]
 8013f72:	89fb      	ldrh	r3, [r7, #14]
 8013f74:	1c59      	adds	r1, r3, #1
 8013f76:	81f9      	strh	r1, [r7, #14]
 8013f78:	4413      	add	r3, r2
 8013f7a:	781a      	ldrb	r2, [r3, #0]
 8013f7c:	687b      	ldr	r3, [r7, #4]
 8013f7e:	745a      	strb	r2, [r3, #17]

    if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) == LORAMAC_CF_LIST_FIELD_SIZE )
 8013f80:	687b      	ldr	r3, [r7, #4]
 8013f82:	791b      	ldrb	r3, [r3, #4]
 8013f84:	1f1a      	subs	r2, r3, #4
 8013f86:	89fb      	ldrh	r3, [r7, #14]
 8013f88:	1ad3      	subs	r3, r2, r3
 8013f8a:	2b10      	cmp	r3, #16
 8013f8c:	d10e      	bne.n	8013fac <LoRaMacParserJoinAccept+0x118>
    {
        memcpy1( macMsg->CFList, &macMsg->Buffer[bufItr], LORAMAC_CF_LIST_FIELD_SIZE );
 8013f8e:	687b      	ldr	r3, [r7, #4]
 8013f90:	f103 0012 	add.w	r0, r3, #18
 8013f94:	687b      	ldr	r3, [r7, #4]
 8013f96:	681a      	ldr	r2, [r3, #0]
 8013f98:	89fb      	ldrh	r3, [r7, #14]
 8013f9a:	4413      	add	r3, r2
 8013f9c:	2210      	movs	r2, #16
 8013f9e:	4619      	mov	r1, r3
 8013fa0:	f002 fd5d 	bl	8016a5e <memcpy1>
        bufItr = bufItr + LORAMAC_CF_LIST_FIELD_SIZE;
 8013fa4:	89fb      	ldrh	r3, [r7, #14]
 8013fa6:	3310      	adds	r3, #16
 8013fa8:	81fb      	strh	r3, [r7, #14]
 8013faa:	e008      	b.n	8013fbe <LoRaMacParserJoinAccept+0x12a>
    }
    else if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) > 0 )
 8013fac:	687b      	ldr	r3, [r7, #4]
 8013fae:	791b      	ldrb	r3, [r3, #4]
 8013fb0:	1f1a      	subs	r2, r3, #4
 8013fb2:	89fb      	ldrh	r3, [r7, #14]
 8013fb4:	1ad3      	subs	r3, r2, r3
 8013fb6:	2b00      	cmp	r3, #0
 8013fb8:	dd01      	ble.n	8013fbe <LoRaMacParserJoinAccept+0x12a>
    {
        return LORAMAC_PARSER_FAIL;
 8013fba:	2301      	movs	r3, #1
 8013fbc:	e031      	b.n	8014022 <LoRaMacParserJoinAccept+0x18e>
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[bufItr++];
 8013fbe:	687b      	ldr	r3, [r7, #4]
 8013fc0:	681a      	ldr	r2, [r3, #0]
 8013fc2:	89fb      	ldrh	r3, [r7, #14]
 8013fc4:	1c59      	adds	r1, r3, #1
 8013fc6:	81f9      	strh	r1, [r7, #14]
 8013fc8:	4413      	add	r3, r2
 8013fca:	781b      	ldrb	r3, [r3, #0]
 8013fcc:	461a      	mov	r2, r3
 8013fce:	687b      	ldr	r3, [r7, #4]
 8013fd0:	625a      	str	r2, [r3, #36]	@ 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8013fd2:	687b      	ldr	r3, [r7, #4]
 8013fd4:	681a      	ldr	r2, [r3, #0]
 8013fd6:	89fb      	ldrh	r3, [r7, #14]
 8013fd8:	1c59      	adds	r1, r3, #1
 8013fda:	81f9      	strh	r1, [r7, #14]
 8013fdc:	4413      	add	r3, r2
 8013fde:	781b      	ldrb	r3, [r3, #0]
 8013fe0:	021a      	lsls	r2, r3, #8
 8013fe2:	687b      	ldr	r3, [r7, #4]
 8013fe4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013fe6:	431a      	orrs	r2, r3
 8013fe8:	687b      	ldr	r3, [r7, #4]
 8013fea:	625a      	str	r2, [r3, #36]	@ 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8013fec:	687b      	ldr	r3, [r7, #4]
 8013fee:	681a      	ldr	r2, [r3, #0]
 8013ff0:	89fb      	ldrh	r3, [r7, #14]
 8013ff2:	1c59      	adds	r1, r3, #1
 8013ff4:	81f9      	strh	r1, [r7, #14]
 8013ff6:	4413      	add	r3, r2
 8013ff8:	781b      	ldrb	r3, [r3, #0]
 8013ffa:	041a      	lsls	r2, r3, #16
 8013ffc:	687b      	ldr	r3, [r7, #4]
 8013ffe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014000:	431a      	orrs	r2, r3
 8014002:	687b      	ldr	r3, [r7, #4]
 8014004:	625a      	str	r2, [r3, #36]	@ 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 8014006:	687b      	ldr	r3, [r7, #4]
 8014008:	681a      	ldr	r2, [r3, #0]
 801400a:	89fb      	ldrh	r3, [r7, #14]
 801400c:	1c59      	adds	r1, r3, #1
 801400e:	81f9      	strh	r1, [r7, #14]
 8014010:	4413      	add	r3, r2
 8014012:	781b      	ldrb	r3, [r3, #0]
 8014014:	061a      	lsls	r2, r3, #24
 8014016:	687b      	ldr	r3, [r7, #4]
 8014018:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801401a:	431a      	orrs	r2, r3
 801401c:	687b      	ldr	r3, [r7, #4]
 801401e:	625a      	str	r2, [r3, #36]	@ 0x24

    return LORAMAC_PARSER_SUCCESS;
 8014020:	2300      	movs	r3, #0
}
 8014022:	4618      	mov	r0, r3
 8014024:	3710      	adds	r7, #16
 8014026:	46bd      	mov	sp, r7
 8014028:	bd80      	pop	{r7, pc}

0801402a <LoRaMacParserData>:

LoRaMacParserStatus_t LoRaMacParserData( LoRaMacMessageData_t* macMsg )
{
 801402a:	b580      	push	{r7, lr}
 801402c:	b084      	sub	sp, #16
 801402e:	af00      	add	r7, sp, #0
 8014030:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8014032:	687b      	ldr	r3, [r7, #4]
 8014034:	2b00      	cmp	r3, #0
 8014036:	d003      	beq.n	8014040 <LoRaMacParserData+0x16>
 8014038:	687b      	ldr	r3, [r7, #4]
 801403a:	681b      	ldr	r3, [r3, #0]
 801403c:	2b00      	cmp	r3, #0
 801403e:	d101      	bne.n	8014044 <LoRaMacParserData+0x1a>
    {
        return LORAMAC_PARSER_ERROR_NPE;
 8014040:	2302      	movs	r3, #2
 8014042:	e0e0      	b.n	8014206 <LoRaMacParserData+0x1dc>
    }

    uint16_t bufItr = 0;
 8014044:	2300      	movs	r3, #0
 8014046:	81fb      	strh	r3, [r7, #14]

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 8014048:	687b      	ldr	r3, [r7, #4]
 801404a:	681a      	ldr	r2, [r3, #0]
 801404c:	89fb      	ldrh	r3, [r7, #14]
 801404e:	1c59      	adds	r1, r3, #1
 8014050:	81f9      	strh	r1, [r7, #14]
 8014052:	4413      	add	r3, r2
 8014054:	781a      	ldrb	r2, [r3, #0]
 8014056:	687b      	ldr	r3, [r7, #4]
 8014058:	715a      	strb	r2, [r3, #5]

    macMsg->FHDR.DevAddr = macMsg->Buffer[bufItr++];
 801405a:	687b      	ldr	r3, [r7, #4]
 801405c:	681a      	ldr	r2, [r3, #0]
 801405e:	89fb      	ldrh	r3, [r7, #14]
 8014060:	1c59      	adds	r1, r3, #1
 8014062:	81f9      	strh	r1, [r7, #14]
 8014064:	4413      	add	r3, r2
 8014066:	781b      	ldrb	r3, [r3, #0]
 8014068:	461a      	mov	r2, r3
 801406a:	687b      	ldr	r3, [r7, #4]
 801406c:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 801406e:	687b      	ldr	r3, [r7, #4]
 8014070:	681a      	ldr	r2, [r3, #0]
 8014072:	89fb      	ldrh	r3, [r7, #14]
 8014074:	1c59      	adds	r1, r3, #1
 8014076:	81f9      	strh	r1, [r7, #14]
 8014078:	4413      	add	r3, r2
 801407a:	781b      	ldrb	r3, [r3, #0]
 801407c:	021a      	lsls	r2, r3, #8
 801407e:	687b      	ldr	r3, [r7, #4]
 8014080:	689b      	ldr	r3, [r3, #8]
 8014082:	431a      	orrs	r2, r3
 8014084:	687b      	ldr	r3, [r7, #4]
 8014086:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8014088:	687b      	ldr	r3, [r7, #4]
 801408a:	681a      	ldr	r2, [r3, #0]
 801408c:	89fb      	ldrh	r3, [r7, #14]
 801408e:	1c59      	adds	r1, r3, #1
 8014090:	81f9      	strh	r1, [r7, #14]
 8014092:	4413      	add	r3, r2
 8014094:	781b      	ldrb	r3, [r3, #0]
 8014096:	041a      	lsls	r2, r3, #16
 8014098:	687b      	ldr	r3, [r7, #4]
 801409a:	689b      	ldr	r3, [r3, #8]
 801409c:	431a      	orrs	r2, r3
 801409e:	687b      	ldr	r3, [r7, #4]
 80140a0:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 80140a2:	687b      	ldr	r3, [r7, #4]
 80140a4:	681a      	ldr	r2, [r3, #0]
 80140a6:	89fb      	ldrh	r3, [r7, #14]
 80140a8:	1c59      	adds	r1, r3, #1
 80140aa:	81f9      	strh	r1, [r7, #14]
 80140ac:	4413      	add	r3, r2
 80140ae:	781b      	ldrb	r3, [r3, #0]
 80140b0:	061a      	lsls	r2, r3, #24
 80140b2:	687b      	ldr	r3, [r7, #4]
 80140b4:	689b      	ldr	r3, [r3, #8]
 80140b6:	431a      	orrs	r2, r3
 80140b8:	687b      	ldr	r3, [r7, #4]
 80140ba:	609a      	str	r2, [r3, #8]

    macMsg->FHDR.FCtrl.Value = macMsg->Buffer[bufItr++];
 80140bc:	687b      	ldr	r3, [r7, #4]
 80140be:	681a      	ldr	r2, [r3, #0]
 80140c0:	89fb      	ldrh	r3, [r7, #14]
 80140c2:	1c59      	adds	r1, r3, #1
 80140c4:	81f9      	strh	r1, [r7, #14]
 80140c6:	4413      	add	r3, r2
 80140c8:	781a      	ldrb	r2, [r3, #0]
 80140ca:	687b      	ldr	r3, [r7, #4]
 80140cc:	731a      	strb	r2, [r3, #12]

    macMsg->FHDR.FCnt = macMsg->Buffer[bufItr++];
 80140ce:	687b      	ldr	r3, [r7, #4]
 80140d0:	681a      	ldr	r2, [r3, #0]
 80140d2:	89fb      	ldrh	r3, [r7, #14]
 80140d4:	1c59      	adds	r1, r3, #1
 80140d6:	81f9      	strh	r1, [r7, #14]
 80140d8:	4413      	add	r3, r2
 80140da:	781b      	ldrb	r3, [r3, #0]
 80140dc:	461a      	mov	r2, r3
 80140de:	687b      	ldr	r3, [r7, #4]
 80140e0:	81da      	strh	r2, [r3, #14]
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;
 80140e2:	687b      	ldr	r3, [r7, #4]
 80140e4:	681a      	ldr	r2, [r3, #0]
 80140e6:	89fb      	ldrh	r3, [r7, #14]
 80140e8:	1c59      	adds	r1, r3, #1
 80140ea:	81f9      	strh	r1, [r7, #14]
 80140ec:	4413      	add	r3, r2
 80140ee:	781b      	ldrb	r3, [r3, #0]
 80140f0:	0219      	lsls	r1, r3, #8
 80140f2:	687b      	ldr	r3, [r7, #4]
 80140f4:	89db      	ldrh	r3, [r3, #14]
 80140f6:	b21a      	sxth	r2, r3
 80140f8:	b20b      	sxth	r3, r1
 80140fa:	4313      	orrs	r3, r2
 80140fc:	b21b      	sxth	r3, r3
 80140fe:	b29a      	uxth	r2, r3
 8014100:	687b      	ldr	r3, [r7, #4]
 8014102:	81da      	strh	r2, [r3, #14]

    if( macMsg->FHDR.FCtrl.Bits.FOptsLen <= 15 )
    {
        memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 8014104:	687b      	ldr	r3, [r7, #4]
 8014106:	f103 0010 	add.w	r0, r3, #16
 801410a:	687b      	ldr	r3, [r7, #4]
 801410c:	681a      	ldr	r2, [r3, #0]
 801410e:	89fb      	ldrh	r3, [r7, #14]
 8014110:	18d1      	adds	r1, r2, r3
 8014112:	687b      	ldr	r3, [r7, #4]
 8014114:	7b1b      	ldrb	r3, [r3, #12]
 8014116:	f3c3 0303 	ubfx	r3, r3, #0, #4
 801411a:	b2db      	uxtb	r3, r3
 801411c:	461a      	mov	r2, r3
 801411e:	f002 fc9e 	bl	8016a5e <memcpy1>
        bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8014122:	687b      	ldr	r3, [r7, #4]
 8014124:	7b1b      	ldrb	r3, [r3, #12]
 8014126:	f3c3 0303 	ubfx	r3, r3, #0, #4
 801412a:	b2db      	uxtb	r3, r3
 801412c:	461a      	mov	r2, r3
 801412e:	89fb      	ldrh	r3, [r7, #14]
 8014130:	4413      	add	r3, r2
 8014132:	81fb      	strh	r3, [r7, #14]
    {
        return LORAMAC_PARSER_FAIL;
    }

    // Initialize anyway with zero.
    macMsg->FPort = 0;
 8014134:	687b      	ldr	r3, [r7, #4]
 8014136:	2200      	movs	r2, #0
 8014138:	f883 2020 	strb.w	r2, [r3, #32]
    macMsg->FRMPayloadSize = 0;
 801413c:	687b      	ldr	r3, [r7, #4]
 801413e:	2200      	movs	r2, #0
 8014140:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

    if( ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE ) > 0 )
 8014144:	687b      	ldr	r3, [r7, #4]
 8014146:	791b      	ldrb	r3, [r3, #4]
 8014148:	461a      	mov	r2, r3
 801414a:	89fb      	ldrh	r3, [r7, #14]
 801414c:	1ad3      	subs	r3, r2, r3
 801414e:	2b04      	cmp	r3, #4
 8014150:	dd27      	ble.n	80141a2 <LoRaMacParserData+0x178>
    {
        macMsg->FPort = macMsg->Buffer[bufItr++];
 8014152:	687b      	ldr	r3, [r7, #4]
 8014154:	681a      	ldr	r2, [r3, #0]
 8014156:	89fb      	ldrh	r3, [r7, #14]
 8014158:	1c59      	adds	r1, r3, #1
 801415a:	81f9      	strh	r1, [r7, #14]
 801415c:	4413      	add	r3, r2
 801415e:	781a      	ldrb	r2, [r3, #0]
 8014160:	687b      	ldr	r3, [r7, #4]
 8014162:	f883 2020 	strb.w	r2, [r3, #32]

        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
 8014166:	687b      	ldr	r3, [r7, #4]
 8014168:	791a      	ldrb	r2, [r3, #4]
 801416a:	89fb      	ldrh	r3, [r7, #14]
 801416c:	b2db      	uxtb	r3, r3
 801416e:	1ad3      	subs	r3, r2, r3
 8014170:	b2db      	uxtb	r3, r3
 8014172:	3b04      	subs	r3, #4
 8014174:	b2da      	uxtb	r2, r3
 8014176:	687b      	ldr	r3, [r7, #4]
 8014178:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        memcpy1( macMsg->FRMPayload, &macMsg->Buffer[bufItr], macMsg->FRMPayloadSize );
 801417c:	687b      	ldr	r3, [r7, #4]
 801417e:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8014180:	687b      	ldr	r3, [r7, #4]
 8014182:	681a      	ldr	r2, [r3, #0]
 8014184:	89fb      	ldrh	r3, [r7, #14]
 8014186:	18d1      	adds	r1, r2, r3
 8014188:	687b      	ldr	r3, [r7, #4]
 801418a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801418e:	461a      	mov	r2, r3
 8014190:	f002 fc65 	bl	8016a5e <memcpy1>
        bufItr = bufItr + macMsg->FRMPayloadSize;
 8014194:	687b      	ldr	r3, [r7, #4]
 8014196:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801419a:	461a      	mov	r2, r3
 801419c:	89fb      	ldrh	r3, [r7, #14]
 801419e:	4413      	add	r3, r2
 80141a0:	81fb      	strh	r3, [r7, #14]
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE )];
 80141a2:	687b      	ldr	r3, [r7, #4]
 80141a4:	681a      	ldr	r2, [r3, #0]
 80141a6:	687b      	ldr	r3, [r7, #4]
 80141a8:	791b      	ldrb	r3, [r3, #4]
 80141aa:	3b04      	subs	r3, #4
 80141ac:	4413      	add	r3, r2
 80141ae:	781b      	ldrb	r3, [r3, #0]
 80141b0:	461a      	mov	r2, r3
 80141b2:	687b      	ldr	r3, [r7, #4]
 80141b4:	62da      	str	r2, [r3, #44]	@ 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 1] << 8 );
 80141b6:	687b      	ldr	r3, [r7, #4]
 80141b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80141ba:	687b      	ldr	r3, [r7, #4]
 80141bc:	6819      	ldr	r1, [r3, #0]
 80141be:	687b      	ldr	r3, [r7, #4]
 80141c0:	791b      	ldrb	r3, [r3, #4]
 80141c2:	3b03      	subs	r3, #3
 80141c4:	440b      	add	r3, r1
 80141c6:	781b      	ldrb	r3, [r3, #0]
 80141c8:	021b      	lsls	r3, r3, #8
 80141ca:	431a      	orrs	r2, r3
 80141cc:	687b      	ldr	r3, [r7, #4]
 80141ce:	62da      	str	r2, [r3, #44]	@ 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 2] << 16 );
 80141d0:	687b      	ldr	r3, [r7, #4]
 80141d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80141d4:	687b      	ldr	r3, [r7, #4]
 80141d6:	6819      	ldr	r1, [r3, #0]
 80141d8:	687b      	ldr	r3, [r7, #4]
 80141da:	791b      	ldrb	r3, [r3, #4]
 80141dc:	3b02      	subs	r3, #2
 80141de:	440b      	add	r3, r1
 80141e0:	781b      	ldrb	r3, [r3, #0]
 80141e2:	041b      	lsls	r3, r3, #16
 80141e4:	431a      	orrs	r2, r3
 80141e6:	687b      	ldr	r3, [r7, #4]
 80141e8:	62da      	str	r2, [r3, #44]	@ 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 3] << 24 );
 80141ea:	687b      	ldr	r3, [r7, #4]
 80141ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80141ee:	687b      	ldr	r3, [r7, #4]
 80141f0:	6819      	ldr	r1, [r3, #0]
 80141f2:	687b      	ldr	r3, [r7, #4]
 80141f4:	791b      	ldrb	r3, [r3, #4]
 80141f6:	3b01      	subs	r3, #1
 80141f8:	440b      	add	r3, r1
 80141fa:	781b      	ldrb	r3, [r3, #0]
 80141fc:	061b      	lsls	r3, r3, #24
 80141fe:	431a      	orrs	r2, r3
 8014200:	687b      	ldr	r3, [r7, #4]
 8014202:	62da      	str	r2, [r3, #44]	@ 0x2c

    return LORAMAC_PARSER_SUCCESS;
 8014204:	2300      	movs	r3, #0
}
 8014206:	4618      	mov	r0, r3
 8014208:	3710      	adds	r7, #16
 801420a:	46bd      	mov	sp, r7
 801420c:	bd80      	pop	{r7, pc}

0801420e <LoRaMacSerializerJoinRequest>:
 */
#include "LoRaMacSerializer.h"
#include "utilities.h"

LoRaMacSerializerStatus_t LoRaMacSerializerJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 801420e:	b580      	push	{r7, lr}
 8014210:	b084      	sub	sp, #16
 8014212:	af00      	add	r7, sp, #0
 8014214:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8014216:	687b      	ldr	r3, [r7, #4]
 8014218:	2b00      	cmp	r3, #0
 801421a:	d003      	beq.n	8014224 <LoRaMacSerializerJoinRequest+0x16>
 801421c:	687b      	ldr	r3, [r7, #4]
 801421e:	681b      	ldr	r3, [r3, #0]
 8014220:	2b00      	cmp	r3, #0
 8014222:	d101      	bne.n	8014228 <LoRaMacSerializerJoinRequest+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 8014224:	2301      	movs	r3, #1
 8014226:	e070      	b.n	801430a <LoRaMacSerializerJoinRequest+0xfc>
    }

    uint16_t bufItr = 0;
 8014228:	2300      	movs	r3, #0
 801422a:	81fb      	strh	r3, [r7, #14]

    // Check macMsg->BufSize
    if( macMsg->BufSize < LORAMAC_JOIN_REQ_MSG_SIZE )
 801422c:	687b      	ldr	r3, [r7, #4]
 801422e:	791b      	ldrb	r3, [r3, #4]
 8014230:	2b16      	cmp	r3, #22
 8014232:	d801      	bhi.n	8014238 <LoRaMacSerializerJoinRequest+0x2a>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 8014234:	2302      	movs	r3, #2
 8014236:	e068      	b.n	801430a <LoRaMacSerializerJoinRequest+0xfc>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 8014238:	687b      	ldr	r3, [r7, #4]
 801423a:	681a      	ldr	r2, [r3, #0]
 801423c:	89fb      	ldrh	r3, [r7, #14]
 801423e:	1c59      	adds	r1, r3, #1
 8014240:	81f9      	strh	r1, [r7, #14]
 8014242:	4413      	add	r3, r2
 8014244:	687a      	ldr	r2, [r7, #4]
 8014246:	7952      	ldrb	r2, [r2, #5]
 8014248:	701a      	strb	r2, [r3, #0]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->JoinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
 801424a:	687b      	ldr	r3, [r7, #4]
 801424c:	681a      	ldr	r2, [r3, #0]
 801424e:	89fb      	ldrh	r3, [r7, #14]
 8014250:	18d0      	adds	r0, r2, r3
 8014252:	687b      	ldr	r3, [r7, #4]
 8014254:	3306      	adds	r3, #6
 8014256:	2208      	movs	r2, #8
 8014258:	4619      	mov	r1, r3
 801425a:	f002 fc1b 	bl	8016a94 <memcpyr>
    bufItr += LORAMAC_JOIN_EUI_FIELD_SIZE;
 801425e:	89fb      	ldrh	r3, [r7, #14]
 8014260:	3308      	adds	r3, #8
 8014262:	81fb      	strh	r3, [r7, #14]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->DevEUI, LORAMAC_DEV_EUI_FIELD_SIZE );
 8014264:	687b      	ldr	r3, [r7, #4]
 8014266:	681a      	ldr	r2, [r3, #0]
 8014268:	89fb      	ldrh	r3, [r7, #14]
 801426a:	18d0      	adds	r0, r2, r3
 801426c:	687b      	ldr	r3, [r7, #4]
 801426e:	330e      	adds	r3, #14
 8014270:	2208      	movs	r2, #8
 8014272:	4619      	mov	r1, r3
 8014274:	f002 fc0e 	bl	8016a94 <memcpyr>
    bufItr += LORAMAC_DEV_EUI_FIELD_SIZE;
 8014278:	89fb      	ldrh	r3, [r7, #14]
 801427a:	3308      	adds	r3, #8
 801427c:	81fb      	strh	r3, [r7, #14]

    macMsg->Buffer[bufItr++] = macMsg->DevNonce & 0xFF;
 801427e:	687b      	ldr	r3, [r7, #4]
 8014280:	8ad9      	ldrh	r1, [r3, #22]
 8014282:	687b      	ldr	r3, [r7, #4]
 8014284:	681a      	ldr	r2, [r3, #0]
 8014286:	89fb      	ldrh	r3, [r7, #14]
 8014288:	1c58      	adds	r0, r3, #1
 801428a:	81f8      	strh	r0, [r7, #14]
 801428c:	4413      	add	r3, r2
 801428e:	b2ca      	uxtb	r2, r1
 8014290:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->DevNonce >> 8 ) & 0xFF;
 8014292:	687b      	ldr	r3, [r7, #4]
 8014294:	8adb      	ldrh	r3, [r3, #22]
 8014296:	0a1b      	lsrs	r3, r3, #8
 8014298:	b299      	uxth	r1, r3
 801429a:	687b      	ldr	r3, [r7, #4]
 801429c:	681a      	ldr	r2, [r3, #0]
 801429e:	89fb      	ldrh	r3, [r7, #14]
 80142a0:	1c58      	adds	r0, r3, #1
 80142a2:	81f8      	strh	r0, [r7, #14]
 80142a4:	4413      	add	r3, r2
 80142a6:	b2ca      	uxtb	r2, r1
 80142a8:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 80142aa:	687b      	ldr	r3, [r7, #4]
 80142ac:	6999      	ldr	r1, [r3, #24]
 80142ae:	687b      	ldr	r3, [r7, #4]
 80142b0:	681a      	ldr	r2, [r3, #0]
 80142b2:	89fb      	ldrh	r3, [r7, #14]
 80142b4:	1c58      	adds	r0, r3, #1
 80142b6:	81f8      	strh	r0, [r7, #14]
 80142b8:	4413      	add	r3, r2
 80142ba:	b2ca      	uxtb	r2, r1
 80142bc:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 80142be:	687b      	ldr	r3, [r7, #4]
 80142c0:	699b      	ldr	r3, [r3, #24]
 80142c2:	0a19      	lsrs	r1, r3, #8
 80142c4:	687b      	ldr	r3, [r7, #4]
 80142c6:	681a      	ldr	r2, [r3, #0]
 80142c8:	89fb      	ldrh	r3, [r7, #14]
 80142ca:	1c58      	adds	r0, r3, #1
 80142cc:	81f8      	strh	r0, [r7, #14]
 80142ce:	4413      	add	r3, r2
 80142d0:	b2ca      	uxtb	r2, r1
 80142d2:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 80142d4:	687b      	ldr	r3, [r7, #4]
 80142d6:	699b      	ldr	r3, [r3, #24]
 80142d8:	0c19      	lsrs	r1, r3, #16
 80142da:	687b      	ldr	r3, [r7, #4]
 80142dc:	681a      	ldr	r2, [r3, #0]
 80142de:	89fb      	ldrh	r3, [r7, #14]
 80142e0:	1c58      	adds	r0, r3, #1
 80142e2:	81f8      	strh	r0, [r7, #14]
 80142e4:	4413      	add	r3, r2
 80142e6:	b2ca      	uxtb	r2, r1
 80142e8:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 80142ea:	687b      	ldr	r3, [r7, #4]
 80142ec:	699b      	ldr	r3, [r3, #24]
 80142ee:	0e19      	lsrs	r1, r3, #24
 80142f0:	687b      	ldr	r3, [r7, #4]
 80142f2:	681a      	ldr	r2, [r3, #0]
 80142f4:	89fb      	ldrh	r3, [r7, #14]
 80142f6:	1c58      	adds	r0, r3, #1
 80142f8:	81f8      	strh	r0, [r7, #14]
 80142fa:	4413      	add	r3, r2
 80142fc:	b2ca      	uxtb	r2, r1
 80142fe:	701a      	strb	r2, [r3, #0]

    macMsg->BufSize = bufItr;
 8014300:	89fb      	ldrh	r3, [r7, #14]
 8014302:	b2da      	uxtb	r2, r3
 8014304:	687b      	ldr	r3, [r7, #4]
 8014306:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 8014308:	2300      	movs	r3, #0
}
 801430a:	4618      	mov	r0, r3
 801430c:	3710      	adds	r7, #16
 801430e:	46bd      	mov	sp, r7
 8014310:	bd80      	pop	{r7, pc}

08014312 <LoRaMacSerializerData>:

    return LORAMAC_SERIALIZER_SUCCESS;
}

LoRaMacSerializerStatus_t LoRaMacSerializerData( LoRaMacMessageData_t* macMsg )
{
 8014312:	b580      	push	{r7, lr}
 8014314:	b084      	sub	sp, #16
 8014316:	af00      	add	r7, sp, #0
 8014318:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 801431a:	687b      	ldr	r3, [r7, #4]
 801431c:	2b00      	cmp	r3, #0
 801431e:	d003      	beq.n	8014328 <LoRaMacSerializerData+0x16>
 8014320:	687b      	ldr	r3, [r7, #4]
 8014322:	681b      	ldr	r3, [r3, #0]
 8014324:	2b00      	cmp	r3, #0
 8014326:	d101      	bne.n	801432c <LoRaMacSerializerData+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 8014328:	2301      	movs	r3, #1
 801432a:	e0e3      	b.n	80144f4 <LoRaMacSerializerData+0x1e2>
    }

    uint16_t bufItr = 0;
 801432c:	2300      	movs	r3, #0
 801432e:	81fb      	strh	r3, [r7, #14]

    // Check macMsg->BufSize
    uint16_t computedBufSize =   LORAMAC_MHDR_FIELD_SIZE
 8014330:	2308      	movs	r3, #8
 8014332:	81bb      	strh	r3, [r7, #12]
                               + LORAMAC_FHDR_DEV_ADDR_FIELD_SIZE
                               + LORAMAC_FHDR_F_CTRL_FIELD_SIZE
                               + LORAMAC_FHDR_F_CNT_FIELD_SIZE;

    computedBufSize += macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8014334:	687b      	ldr	r3, [r7, #4]
 8014336:	7b1b      	ldrb	r3, [r3, #12]
 8014338:	f3c3 0303 	ubfx	r3, r3, #0, #4
 801433c:	b2db      	uxtb	r3, r3
 801433e:	461a      	mov	r2, r3
 8014340:	89bb      	ldrh	r3, [r7, #12]
 8014342:	4413      	add	r3, r2
 8014344:	81bb      	strh	r3, [r7, #12]

    if( macMsg->FRMPayloadSize > 0 )
 8014346:	687b      	ldr	r3, [r7, #4]
 8014348:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801434c:	2b00      	cmp	r3, #0
 801434e:	d002      	beq.n	8014356 <LoRaMacSerializerData+0x44>
    {
        computedBufSize += LORAMAC_F_PORT_FIELD_SIZE;
 8014350:	89bb      	ldrh	r3, [r7, #12]
 8014352:	3301      	adds	r3, #1
 8014354:	81bb      	strh	r3, [r7, #12]
    }

    computedBufSize += macMsg->FRMPayloadSize;
 8014356:	687b      	ldr	r3, [r7, #4]
 8014358:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801435c:	461a      	mov	r2, r3
 801435e:	89bb      	ldrh	r3, [r7, #12]
 8014360:	4413      	add	r3, r2
 8014362:	81bb      	strh	r3, [r7, #12]
    computedBufSize += LORAMAC_MIC_FIELD_SIZE;
 8014364:	89bb      	ldrh	r3, [r7, #12]
 8014366:	3304      	adds	r3, #4
 8014368:	81bb      	strh	r3, [r7, #12]

    if( macMsg->BufSize < computedBufSize )
 801436a:	687b      	ldr	r3, [r7, #4]
 801436c:	791b      	ldrb	r3, [r3, #4]
 801436e:	461a      	mov	r2, r3
 8014370:	89bb      	ldrh	r3, [r7, #12]
 8014372:	4293      	cmp	r3, r2
 8014374:	d901      	bls.n	801437a <LoRaMacSerializerData+0x68>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 8014376:	2302      	movs	r3, #2
 8014378:	e0bc      	b.n	80144f4 <LoRaMacSerializerData+0x1e2>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 801437a:	687b      	ldr	r3, [r7, #4]
 801437c:	681a      	ldr	r2, [r3, #0]
 801437e:	89fb      	ldrh	r3, [r7, #14]
 8014380:	1c59      	adds	r1, r3, #1
 8014382:	81f9      	strh	r1, [r7, #14]
 8014384:	4413      	add	r3, r2
 8014386:	687a      	ldr	r2, [r7, #4]
 8014388:	7952      	ldrb	r2, [r2, #5]
 801438a:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr ) & 0xFF;
 801438c:	687b      	ldr	r3, [r7, #4]
 801438e:	6899      	ldr	r1, [r3, #8]
 8014390:	687b      	ldr	r3, [r7, #4]
 8014392:	681a      	ldr	r2, [r3, #0]
 8014394:	89fb      	ldrh	r3, [r7, #14]
 8014396:	1c58      	adds	r0, r3, #1
 8014398:	81f8      	strh	r0, [r7, #14]
 801439a:	4413      	add	r3, r2
 801439c:	b2ca      	uxtb	r2, r1
 801439e:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 8 ) & 0xFF;
 80143a0:	687b      	ldr	r3, [r7, #4]
 80143a2:	689b      	ldr	r3, [r3, #8]
 80143a4:	0a19      	lsrs	r1, r3, #8
 80143a6:	687b      	ldr	r3, [r7, #4]
 80143a8:	681a      	ldr	r2, [r3, #0]
 80143aa:	89fb      	ldrh	r3, [r7, #14]
 80143ac:	1c58      	adds	r0, r3, #1
 80143ae:	81f8      	strh	r0, [r7, #14]
 80143b0:	4413      	add	r3, r2
 80143b2:	b2ca      	uxtb	r2, r1
 80143b4:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 16 ) & 0xFF;
 80143b6:	687b      	ldr	r3, [r7, #4]
 80143b8:	689b      	ldr	r3, [r3, #8]
 80143ba:	0c19      	lsrs	r1, r3, #16
 80143bc:	687b      	ldr	r3, [r7, #4]
 80143be:	681a      	ldr	r2, [r3, #0]
 80143c0:	89fb      	ldrh	r3, [r7, #14]
 80143c2:	1c58      	adds	r0, r3, #1
 80143c4:	81f8      	strh	r0, [r7, #14]
 80143c6:	4413      	add	r3, r2
 80143c8:	b2ca      	uxtb	r2, r1
 80143ca:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 24 ) & 0xFF;
 80143cc:	687b      	ldr	r3, [r7, #4]
 80143ce:	689b      	ldr	r3, [r3, #8]
 80143d0:	0e19      	lsrs	r1, r3, #24
 80143d2:	687b      	ldr	r3, [r7, #4]
 80143d4:	681a      	ldr	r2, [r3, #0]
 80143d6:	89fb      	ldrh	r3, [r7, #14]
 80143d8:	1c58      	adds	r0, r3, #1
 80143da:	81f8      	strh	r0, [r7, #14]
 80143dc:	4413      	add	r3, r2
 80143de:	b2ca      	uxtb	r2, r1
 80143e0:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCtrl.Value;
 80143e2:	687b      	ldr	r3, [r7, #4]
 80143e4:	681a      	ldr	r2, [r3, #0]
 80143e6:	89fb      	ldrh	r3, [r7, #14]
 80143e8:	1c59      	adds	r1, r3, #1
 80143ea:	81f9      	strh	r1, [r7, #14]
 80143ec:	4413      	add	r3, r2
 80143ee:	687a      	ldr	r2, [r7, #4]
 80143f0:	7b12      	ldrb	r2, [r2, #12]
 80143f2:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCnt & 0xFF;
 80143f4:	687b      	ldr	r3, [r7, #4]
 80143f6:	89d9      	ldrh	r1, [r3, #14]
 80143f8:	687b      	ldr	r3, [r7, #4]
 80143fa:	681a      	ldr	r2, [r3, #0]
 80143fc:	89fb      	ldrh	r3, [r7, #14]
 80143fe:	1c58      	adds	r0, r3, #1
 8014400:	81f8      	strh	r0, [r7, #14]
 8014402:	4413      	add	r3, r2
 8014404:	b2ca      	uxtb	r2, r1
 8014406:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.FCnt >> 8 ) & 0xFF;
 8014408:	687b      	ldr	r3, [r7, #4]
 801440a:	89db      	ldrh	r3, [r3, #14]
 801440c:	0a1b      	lsrs	r3, r3, #8
 801440e:	b299      	uxth	r1, r3
 8014410:	687b      	ldr	r3, [r7, #4]
 8014412:	681a      	ldr	r2, [r3, #0]
 8014414:	89fb      	ldrh	r3, [r7, #14]
 8014416:	1c58      	adds	r0, r3, #1
 8014418:	81f8      	strh	r0, [r7, #14]
 801441a:	4413      	add	r3, r2
 801441c:	b2ca      	uxtb	r2, r1
 801441e:	701a      	strb	r2, [r3, #0]

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FHDR.FOpts, macMsg->FHDR.FCtrl.Bits.FOptsLen );
 8014420:	687b      	ldr	r3, [r7, #4]
 8014422:	681a      	ldr	r2, [r3, #0]
 8014424:	89fb      	ldrh	r3, [r7, #14]
 8014426:	18d0      	adds	r0, r2, r3
 8014428:	687b      	ldr	r3, [r7, #4]
 801442a:	f103 0110 	add.w	r1, r3, #16
 801442e:	687b      	ldr	r3, [r7, #4]
 8014430:	7b1b      	ldrb	r3, [r3, #12]
 8014432:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8014436:	b2db      	uxtb	r3, r3
 8014438:	461a      	mov	r2, r3
 801443a:	f002 fb10 	bl	8016a5e <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 801443e:	687b      	ldr	r3, [r7, #4]
 8014440:	7b1b      	ldrb	r3, [r3, #12]
 8014442:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8014446:	b2db      	uxtb	r3, r3
 8014448:	461a      	mov	r2, r3
 801444a:	89fb      	ldrh	r3, [r7, #14]
 801444c:	4413      	add	r3, r2
 801444e:	81fb      	strh	r3, [r7, #14]

    if( macMsg->FRMPayloadSize > 0 )
 8014450:	687b      	ldr	r3, [r7, #4]
 8014452:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8014456:	2b00      	cmp	r3, #0
 8014458:	d009      	beq.n	801446e <LoRaMacSerializerData+0x15c>
    {
        macMsg->Buffer[bufItr++] = macMsg->FPort;
 801445a:	687b      	ldr	r3, [r7, #4]
 801445c:	681a      	ldr	r2, [r3, #0]
 801445e:	89fb      	ldrh	r3, [r7, #14]
 8014460:	1c59      	adds	r1, r3, #1
 8014462:	81f9      	strh	r1, [r7, #14]
 8014464:	4413      	add	r3, r2
 8014466:	687a      	ldr	r2, [r7, #4]
 8014468:	f892 2020 	ldrb.w	r2, [r2, #32]
 801446c:	701a      	strb	r2, [r3, #0]
    }

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FRMPayload, macMsg->FRMPayloadSize );
 801446e:	687b      	ldr	r3, [r7, #4]
 8014470:	681a      	ldr	r2, [r3, #0]
 8014472:	89fb      	ldrh	r3, [r7, #14]
 8014474:	18d0      	adds	r0, r2, r3
 8014476:	687b      	ldr	r3, [r7, #4]
 8014478:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 801447a:	687b      	ldr	r3, [r7, #4]
 801447c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8014480:	461a      	mov	r2, r3
 8014482:	f002 faec 	bl	8016a5e <memcpy1>
    bufItr = bufItr + macMsg->FRMPayloadSize;
 8014486:	687b      	ldr	r3, [r7, #4]
 8014488:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801448c:	461a      	mov	r2, r3
 801448e:	89fb      	ldrh	r3, [r7, #14]
 8014490:	4413      	add	r3, r2
 8014492:	81fb      	strh	r3, [r7, #14]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 8014494:	687b      	ldr	r3, [r7, #4]
 8014496:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8014498:	687b      	ldr	r3, [r7, #4]
 801449a:	681a      	ldr	r2, [r3, #0]
 801449c:	89fb      	ldrh	r3, [r7, #14]
 801449e:	1c58      	adds	r0, r3, #1
 80144a0:	81f8      	strh	r0, [r7, #14]
 80144a2:	4413      	add	r3, r2
 80144a4:	b2ca      	uxtb	r2, r1
 80144a6:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 80144a8:	687b      	ldr	r3, [r7, #4]
 80144aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80144ac:	0a19      	lsrs	r1, r3, #8
 80144ae:	687b      	ldr	r3, [r7, #4]
 80144b0:	681a      	ldr	r2, [r3, #0]
 80144b2:	89fb      	ldrh	r3, [r7, #14]
 80144b4:	1c58      	adds	r0, r3, #1
 80144b6:	81f8      	strh	r0, [r7, #14]
 80144b8:	4413      	add	r3, r2
 80144ba:	b2ca      	uxtb	r2, r1
 80144bc:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 80144be:	687b      	ldr	r3, [r7, #4]
 80144c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80144c2:	0c19      	lsrs	r1, r3, #16
 80144c4:	687b      	ldr	r3, [r7, #4]
 80144c6:	681a      	ldr	r2, [r3, #0]
 80144c8:	89fb      	ldrh	r3, [r7, #14]
 80144ca:	1c58      	adds	r0, r3, #1
 80144cc:	81f8      	strh	r0, [r7, #14]
 80144ce:	4413      	add	r3, r2
 80144d0:	b2ca      	uxtb	r2, r1
 80144d2:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 80144d4:	687b      	ldr	r3, [r7, #4]
 80144d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80144d8:	0e19      	lsrs	r1, r3, #24
 80144da:	687b      	ldr	r3, [r7, #4]
 80144dc:	681a      	ldr	r2, [r3, #0]
 80144de:	89fb      	ldrh	r3, [r7, #14]
 80144e0:	1c58      	adds	r0, r3, #1
 80144e2:	81f8      	strh	r0, [r7, #14]
 80144e4:	4413      	add	r3, r2
 80144e6:	b2ca      	uxtb	r2, r1
 80144e8:	701a      	strb	r2, [r3, #0]

    macMsg->BufSize = bufItr;
 80144ea:	89fb      	ldrh	r3, [r7, #14]
 80144ec:	b2da      	uxtb	r2, r3
 80144ee:	687b      	ldr	r3, [r7, #4]
 80144f0:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 80144f2:	2300      	movs	r3, #0
}
 80144f4:	4618      	mov	r0, r3
 80144f6:	3710      	adds	r7, #16
 80144f8:	46bd      	mov	sp, r7
 80144fa:	bd80      	pop	{r7, pc}

080144fc <RegionIsActive>:
#define RU864_APPLY_DR_OFFSET( )
#define RU864_RX_BEACON_SETUP( )
#endif

bool RegionIsActive( LoRaMacRegion_t region )
{
 80144fc:	b480      	push	{r7}
 80144fe:	b083      	sub	sp, #12
 8014500:	af00      	add	r7, sp, #0
 8014502:	4603      	mov	r3, r0
 8014504:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8014506:	79fb      	ldrb	r3, [r7, #7]
 8014508:	2b00      	cmp	r3, #0
 801450a:	d101      	bne.n	8014510 <RegionIsActive+0x14>
    {
        AS923_IS_ACTIVE( );
 801450c:	2301      	movs	r3, #1
 801450e:	e000      	b.n	8014512 <RegionIsActive+0x16>
        IN865_IS_ACTIVE( );
        US915_IS_ACTIVE( );
        RU864_IS_ACTIVE( );
        default:
        {
            return false;
 8014510:	2300      	movs	r3, #0
        }
    }
}
 8014512:	4618      	mov	r0, r3
 8014514:	370c      	adds	r7, #12
 8014516:	46bd      	mov	sp, r7
 8014518:	bc80      	pop	{r7}
 801451a:	4770      	bx	lr

0801451c <RegionGetPhyParam>:

PhyParam_t RegionGetPhyParam( LoRaMacRegion_t region, GetPhyParams_t* getPhy )
{
 801451c:	b580      	push	{r7, lr}
 801451e:	b084      	sub	sp, #16
 8014520:	af00      	add	r7, sp, #0
 8014522:	4603      	mov	r3, r0
 8014524:	6039      	str	r1, [r7, #0]
 8014526:	71fb      	strb	r3, [r7, #7]
    PhyParam_t phyParam = { 0 };
 8014528:	2300      	movs	r3, #0
 801452a:	60bb      	str	r3, [r7, #8]
    switch( region )
 801452c:	79fb      	ldrb	r3, [r7, #7]
 801452e:	2b00      	cmp	r3, #0
 8014530:	d105      	bne.n	801453e <RegionGetPhyParam+0x22>
    {
        AS923_GET_PHY_PARAM( );
 8014532:	6838      	ldr	r0, [r7, #0]
 8014534:	f000 f9ec 	bl	8014910 <RegionAS923GetPhyParam>
 8014538:	4603      	mov	r3, r0
 801453a:	60fb      	str	r3, [r7, #12]
 801453c:	e001      	b.n	8014542 <RegionGetPhyParam+0x26>
        IN865_GET_PHY_PARAM( );
        US915_GET_PHY_PARAM( );
        RU864_GET_PHY_PARAM( );
        default:
        {
            return phyParam;
 801453e:	68bb      	ldr	r3, [r7, #8]
 8014540:	60fb      	str	r3, [r7, #12]
        }
    }
}
 8014542:	68fb      	ldr	r3, [r7, #12]
 8014544:	4618      	mov	r0, r3
 8014546:	3710      	adds	r7, #16
 8014548:	46bd      	mov	sp, r7
 801454a:	bd80      	pop	{r7, pc}

0801454c <RegionSetBandTxDone>:

void RegionSetBandTxDone( LoRaMacRegion_t region, SetBandTxDoneParams_t* txDone )
{
 801454c:	b580      	push	{r7, lr}
 801454e:	b082      	sub	sp, #8
 8014550:	af00      	add	r7, sp, #0
 8014552:	4603      	mov	r3, r0
 8014554:	6039      	str	r1, [r7, #0]
 8014556:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8014558:	79fb      	ldrb	r3, [r7, #7]
 801455a:	2b00      	cmp	r3, #0
 801455c:	d103      	bne.n	8014566 <RegionSetBandTxDone+0x1a>
    {
        AS923_SET_BAND_TX_DONE( );
 801455e:	6838      	ldr	r0, [r7, #0]
 8014560:	f000 fb4c 	bl	8014bfc <RegionAS923SetBandTxDone>
 8014564:	e000      	b.n	8014568 <RegionSetBandTxDone+0x1c>
        IN865_SET_BAND_TX_DONE( );
        US915_SET_BAND_TX_DONE( );
        RU864_SET_BAND_TX_DONE( );
        default:
        {
            return;
 8014566:	bf00      	nop
        }
    }
}
 8014568:	3708      	adds	r7, #8
 801456a:	46bd      	mov	sp, r7
 801456c:	bd80      	pop	{r7, pc}

0801456e <RegionInitDefaults>:

void RegionInitDefaults( LoRaMacRegion_t region, InitDefaultsParams_t* params )
{
 801456e:	b580      	push	{r7, lr}
 8014570:	b082      	sub	sp, #8
 8014572:	af00      	add	r7, sp, #0
 8014574:	4603      	mov	r3, r0
 8014576:	6039      	str	r1, [r7, #0]
 8014578:	71fb      	strb	r3, [r7, #7]
    switch( region )
 801457a:	79fb      	ldrb	r3, [r7, #7]
 801457c:	2b00      	cmp	r3, #0
 801457e:	d103      	bne.n	8014588 <RegionInitDefaults+0x1a>
    {
        AS923_INIT_DEFAULTS( );
 8014580:	6838      	ldr	r0, [r7, #0]
 8014582:	f000 fb67 	bl	8014c54 <RegionAS923InitDefaults>
 8014586:	e000      	b.n	801458a <RegionInitDefaults+0x1c>
        IN865_INIT_DEFAULTS( );
        US915_INIT_DEFAULTS( );
        RU864_INIT_DEFAULTS( );
        default:
        {
            break;
 8014588:	bf00      	nop
        }
    }
}
 801458a:	bf00      	nop
 801458c:	3708      	adds	r7, #8
 801458e:	46bd      	mov	sp, r7
 8014590:	bd80      	pop	{r7, pc}

08014592 <RegionVerify>:

bool RegionVerify( LoRaMacRegion_t region, VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 8014592:	b580      	push	{r7, lr}
 8014594:	b082      	sub	sp, #8
 8014596:	af00      	add	r7, sp, #0
 8014598:	4603      	mov	r3, r0
 801459a:	6039      	str	r1, [r7, #0]
 801459c:	71fb      	strb	r3, [r7, #7]
 801459e:	4613      	mov	r3, r2
 80145a0:	71bb      	strb	r3, [r7, #6]
    switch( region )
 80145a2:	79fb      	ldrb	r3, [r7, #7]
 80145a4:	2b00      	cmp	r3, #0
 80145a6:	d106      	bne.n	80145b6 <RegionVerify+0x24>
    {
        AS923_VERIFY( );
 80145a8:	79bb      	ldrb	r3, [r7, #6]
 80145aa:	4619      	mov	r1, r3
 80145ac:	6838      	ldr	r0, [r7, #0]
 80145ae:	f000 fbe3 	bl	8014d78 <RegionAS923Verify>
 80145b2:	4603      	mov	r3, r0
 80145b4:	e000      	b.n	80145b8 <RegionVerify+0x26>
        IN865_VERIFY( );
        US915_VERIFY( );
        RU864_VERIFY( );
        default:
        {
            return false;
 80145b6:	2300      	movs	r3, #0
        }
    }
}
 80145b8:	4618      	mov	r0, r3
 80145ba:	3708      	adds	r7, #8
 80145bc:	46bd      	mov	sp, r7
 80145be:	bd80      	pop	{r7, pc}

080145c0 <RegionApplyCFList>:

void RegionApplyCFList( LoRaMacRegion_t region, ApplyCFListParams_t* applyCFList )
{
 80145c0:	b580      	push	{r7, lr}
 80145c2:	b082      	sub	sp, #8
 80145c4:	af00      	add	r7, sp, #0
 80145c6:	4603      	mov	r3, r0
 80145c8:	6039      	str	r1, [r7, #0]
 80145ca:	71fb      	strb	r3, [r7, #7]
    switch( region )
 80145cc:	79fb      	ldrb	r3, [r7, #7]
 80145ce:	2b00      	cmp	r3, #0
 80145d0:	d103      	bne.n	80145da <RegionApplyCFList+0x1a>
    {
        AS923_APPLY_CF_LIST( );
 80145d2:	6838      	ldr	r0, [r7, #0]
 80145d4:	f000 fc6e 	bl	8014eb4 <RegionAS923ApplyCFList>
 80145d8:	e000      	b.n	80145dc <RegionApplyCFList+0x1c>
        IN865_APPLY_CF_LIST( );
        US915_APPLY_CF_LIST( );
        RU864_APPLY_CF_LIST( );
        default:
        {
            break;
 80145da:	bf00      	nop
        }
    }
}
 80145dc:	bf00      	nop
 80145de:	3708      	adds	r7, #8
 80145e0:	46bd      	mov	sp, r7
 80145e2:	bd80      	pop	{r7, pc}

080145e4 <RegionChanMaskSet>:

bool RegionChanMaskSet( LoRaMacRegion_t region, ChanMaskSetParams_t* chanMaskSet )
{
 80145e4:	b580      	push	{r7, lr}
 80145e6:	b082      	sub	sp, #8
 80145e8:	af00      	add	r7, sp, #0
 80145ea:	4603      	mov	r3, r0
 80145ec:	6039      	str	r1, [r7, #0]
 80145ee:	71fb      	strb	r3, [r7, #7]
    switch( region )
 80145f0:	79fb      	ldrb	r3, [r7, #7]
 80145f2:	2b00      	cmp	r3, #0
 80145f4:	d104      	bne.n	8014600 <RegionChanMaskSet+0x1c>
    {
        AS923_CHAN_MASK_SET( );
 80145f6:	6838      	ldr	r0, [r7, #0]
 80145f8:	f000 fcd0 	bl	8014f9c <RegionAS923ChanMaskSet>
 80145fc:	4603      	mov	r3, r0
 80145fe:	e000      	b.n	8014602 <RegionChanMaskSet+0x1e>
        IN865_CHAN_MASK_SET( );
        US915_CHAN_MASK_SET( );
        RU864_CHAN_MASK_SET( );
        default:
        {
            return false;
 8014600:	2300      	movs	r3, #0
        }
    }
}
 8014602:	4618      	mov	r0, r3
 8014604:	3708      	adds	r7, #8
 8014606:	46bd      	mov	sp, r7
 8014608:	bd80      	pop	{r7, pc}

0801460a <RegionComputeRxWindowParameters>:

void RegionComputeRxWindowParameters( LoRaMacRegion_t region, int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 801460a:	b580      	push	{r7, lr}
 801460c:	b082      	sub	sp, #8
 801460e:	af00      	add	r7, sp, #0
 8014610:	603b      	str	r3, [r7, #0]
 8014612:	4603      	mov	r3, r0
 8014614:	71fb      	strb	r3, [r7, #7]
 8014616:	460b      	mov	r3, r1
 8014618:	71bb      	strb	r3, [r7, #6]
 801461a:	4613      	mov	r3, r2
 801461c:	717b      	strb	r3, [r7, #5]
    switch( region )
 801461e:	79fb      	ldrb	r3, [r7, #7]
 8014620:	2b00      	cmp	r3, #0
 8014622:	d107      	bne.n	8014634 <RegionComputeRxWindowParameters+0x2a>
    {
        AS923_COMPUTE_RX_WINDOW_PARAMETERS( );
 8014624:	7979      	ldrb	r1, [r7, #5]
 8014626:	f997 0006 	ldrsb.w	r0, [r7, #6]
 801462a:	693b      	ldr	r3, [r7, #16]
 801462c:	683a      	ldr	r2, [r7, #0]
 801462e:	f000 fcdf 	bl	8014ff0 <RegionAS923ComputeRxWindowParameters>
 8014632:	e000      	b.n	8014636 <RegionComputeRxWindowParameters+0x2c>
        IN865_COMPUTE_RX_WINDOW_PARAMETERS( );
        US915_COMPUTE_RX_WINDOW_PARAMETERS( );
        RU864_COMPUTE_RX_WINDOW_PARAMETERS( );
        default:
        {
            break;
 8014634:	bf00      	nop
        }
    }
}
 8014636:	bf00      	nop
 8014638:	3708      	adds	r7, #8
 801463a:	46bd      	mov	sp, r7
 801463c:	bd80      	pop	{r7, pc}

0801463e <RegionRxConfig>:

bool RegionRxConfig( LoRaMacRegion_t region, RxConfigParams_t* rxConfig, int8_t* datarate )
{
 801463e:	b580      	push	{r7, lr}
 8014640:	b084      	sub	sp, #16
 8014642:	af00      	add	r7, sp, #0
 8014644:	4603      	mov	r3, r0
 8014646:	60b9      	str	r1, [r7, #8]
 8014648:	607a      	str	r2, [r7, #4]
 801464a:	73fb      	strb	r3, [r7, #15]
    switch( region )
 801464c:	7bfb      	ldrb	r3, [r7, #15]
 801464e:	2b00      	cmp	r3, #0
 8014650:	d105      	bne.n	801465e <RegionRxConfig+0x20>
    {
        AS923_RX_CONFIG( );
 8014652:	6879      	ldr	r1, [r7, #4]
 8014654:	68b8      	ldr	r0, [r7, #8]
 8014656:	f000 fd25 	bl	80150a4 <RegionAS923RxConfig>
 801465a:	4603      	mov	r3, r0
 801465c:	e000      	b.n	8014660 <RegionRxConfig+0x22>
        IN865_RX_CONFIG( );
        US915_RX_CONFIG( );
        RU864_RX_CONFIG( );
        default:
        {
            return false;
 801465e:	2300      	movs	r3, #0
        }
    }
}
 8014660:	4618      	mov	r0, r3
 8014662:	3710      	adds	r7, #16
 8014664:	46bd      	mov	sp, r7
 8014666:	bd80      	pop	{r7, pc}

08014668 <RegionTxConfig>:

bool RegionTxConfig( LoRaMacRegion_t region, TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 8014668:	b580      	push	{r7, lr}
 801466a:	b084      	sub	sp, #16
 801466c:	af00      	add	r7, sp, #0
 801466e:	60b9      	str	r1, [r7, #8]
 8014670:	607a      	str	r2, [r7, #4]
 8014672:	603b      	str	r3, [r7, #0]
 8014674:	4603      	mov	r3, r0
 8014676:	73fb      	strb	r3, [r7, #15]
    switch( region )
 8014678:	7bfb      	ldrb	r3, [r7, #15]
 801467a:	2b00      	cmp	r3, #0
 801467c:	d106      	bne.n	801468c <RegionTxConfig+0x24>
    {
        AS923_TX_CONFIG( );
 801467e:	683a      	ldr	r2, [r7, #0]
 8014680:	6879      	ldr	r1, [r7, #4]
 8014682:	68b8      	ldr	r0, [r7, #8]
 8014684:	f000 fdde 	bl	8015244 <RegionAS923TxConfig>
 8014688:	4603      	mov	r3, r0
 801468a:	e000      	b.n	801468e <RegionTxConfig+0x26>
        IN865_TX_CONFIG( );
        US915_TX_CONFIG( );
        RU864_TX_CONFIG( );
        default:
        {
            return false;
 801468c:	2300      	movs	r3, #0
        }
    }
}
 801468e:	4618      	mov	r0, r3
 8014690:	3710      	adds	r7, #16
 8014692:	46bd      	mov	sp, r7
 8014694:	bd80      	pop	{r7, pc}

08014696 <RegionLinkAdrReq>:

uint8_t RegionLinkAdrReq( LoRaMacRegion_t region, LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 8014696:	b580      	push	{r7, lr}
 8014698:	b086      	sub	sp, #24
 801469a:	af02      	add	r7, sp, #8
 801469c:	60b9      	str	r1, [r7, #8]
 801469e:	607a      	str	r2, [r7, #4]
 80146a0:	603b      	str	r3, [r7, #0]
 80146a2:	4603      	mov	r3, r0
 80146a4:	73fb      	strb	r3, [r7, #15]
    switch( region )
 80146a6:	7bfb      	ldrb	r3, [r7, #15]
 80146a8:	2b00      	cmp	r3, #0
 80146aa:	d109      	bne.n	80146c0 <RegionLinkAdrReq+0x2a>
    {
        AS923_LINK_ADR_REQ( );
 80146ac:	69fb      	ldr	r3, [r7, #28]
 80146ae:	9300      	str	r3, [sp, #0]
 80146b0:	69bb      	ldr	r3, [r7, #24]
 80146b2:	683a      	ldr	r2, [r7, #0]
 80146b4:	6879      	ldr	r1, [r7, #4]
 80146b6:	68b8      	ldr	r0, [r7, #8]
 80146b8:	f000 fe94 	bl	80153e4 <RegionAS923LinkAdrReq>
 80146bc:	4603      	mov	r3, r0
 80146be:	e000      	b.n	80146c2 <RegionLinkAdrReq+0x2c>
        IN865_LINK_ADR_REQ( );
        US915_LINK_ADR_REQ( );
        RU864_LINK_ADR_REQ( );
        default:
        {
            return 0;
 80146c0:	2300      	movs	r3, #0
        }
    }
}
 80146c2:	4618      	mov	r0, r3
 80146c4:	3710      	adds	r7, #16
 80146c6:	46bd      	mov	sp, r7
 80146c8:	bd80      	pop	{r7, pc}

080146ca <RegionRxParamSetupReq>:

uint8_t RegionRxParamSetupReq( LoRaMacRegion_t region, RxParamSetupReqParams_t* rxParamSetupReq )
{
 80146ca:	b580      	push	{r7, lr}
 80146cc:	b082      	sub	sp, #8
 80146ce:	af00      	add	r7, sp, #0
 80146d0:	4603      	mov	r3, r0
 80146d2:	6039      	str	r1, [r7, #0]
 80146d4:	71fb      	strb	r3, [r7, #7]
    switch( region )
 80146d6:	79fb      	ldrb	r3, [r7, #7]
 80146d8:	2b00      	cmp	r3, #0
 80146da:	d104      	bne.n	80146e6 <RegionRxParamSetupReq+0x1c>
    {
        AS923_RX_PARAM_SETUP_REQ( );
 80146dc:	6838      	ldr	r0, [r7, #0]
 80146de:	f000 ffa3 	bl	8015628 <RegionAS923RxParamSetupReq>
 80146e2:	4603      	mov	r3, r0
 80146e4:	e000      	b.n	80146e8 <RegionRxParamSetupReq+0x1e>
        IN865_RX_PARAM_SETUP_REQ( );
        US915_RX_PARAM_SETUP_REQ( );
        RU864_RX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 80146e6:	2300      	movs	r3, #0
        }
    }
}
 80146e8:	4618      	mov	r0, r3
 80146ea:	3708      	adds	r7, #8
 80146ec:	46bd      	mov	sp, r7
 80146ee:	bd80      	pop	{r7, pc}

080146f0 <RegionNewChannelReq>:

int8_t RegionNewChannelReq( LoRaMacRegion_t region, NewChannelReqParams_t* newChannelReq )
{
 80146f0:	b580      	push	{r7, lr}
 80146f2:	b082      	sub	sp, #8
 80146f4:	af00      	add	r7, sp, #0
 80146f6:	4603      	mov	r3, r0
 80146f8:	6039      	str	r1, [r7, #0]
 80146fa:	71fb      	strb	r3, [r7, #7]
    switch( region )
 80146fc:	79fb      	ldrb	r3, [r7, #7]
 80146fe:	2b00      	cmp	r3, #0
 8014700:	d104      	bne.n	801470c <RegionNewChannelReq+0x1c>
    {
        AS923_NEW_CHANNEL_REQ( );
 8014702:	6838      	ldr	r0, [r7, #0]
 8014704:	f000 ffc8 	bl	8015698 <RegionAS923NewChannelReq>
 8014708:	4603      	mov	r3, r0
 801470a:	e000      	b.n	801470e <RegionNewChannelReq+0x1e>
        IN865_NEW_CHANNEL_REQ( );
        US915_NEW_CHANNEL_REQ( );
        RU864_NEW_CHANNEL_REQ( );
        default:
        {
            return 0;
 801470c:	2300      	movs	r3, #0
        }
    }
}
 801470e:	4618      	mov	r0, r3
 8014710:	3708      	adds	r7, #8
 8014712:	46bd      	mov	sp, r7
 8014714:	bd80      	pop	{r7, pc}

08014716 <RegionTxParamSetupReq>:

int8_t RegionTxParamSetupReq( LoRaMacRegion_t region, TxParamSetupReqParams_t* txParamSetupReq )
{
 8014716:	b580      	push	{r7, lr}
 8014718:	b082      	sub	sp, #8
 801471a:	af00      	add	r7, sp, #0
 801471c:	4603      	mov	r3, r0
 801471e:	6039      	str	r1, [r7, #0]
 8014720:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8014722:	79fb      	ldrb	r3, [r7, #7]
 8014724:	2b00      	cmp	r3, #0
 8014726:	d104      	bne.n	8014732 <RegionTxParamSetupReq+0x1c>
    {
        AS923_TX_PARAM_SETUP_REQ( );
 8014728:	6838      	ldr	r0, [r7, #0]
 801472a:	f001 f813 	bl	8015754 <RegionAS923TxParamSetupReq>
 801472e:	4603      	mov	r3, r0
 8014730:	e000      	b.n	8014734 <RegionTxParamSetupReq+0x1e>
        IN865_TX_PARAM_SETUP_REQ( );
        US915_TX_PARAM_SETUP_REQ( );
        RU864_TX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 8014732:	2300      	movs	r3, #0
        }
    }
}
 8014734:	4618      	mov	r0, r3
 8014736:	3708      	adds	r7, #8
 8014738:	46bd      	mov	sp, r7
 801473a:	bd80      	pop	{r7, pc}

0801473c <RegionDlChannelReq>:

int8_t RegionDlChannelReq( LoRaMacRegion_t region, DlChannelReqParams_t* dlChannelReq )
{
 801473c:	b580      	push	{r7, lr}
 801473e:	b082      	sub	sp, #8
 8014740:	af00      	add	r7, sp, #0
 8014742:	4603      	mov	r3, r0
 8014744:	6039      	str	r1, [r7, #0]
 8014746:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8014748:	79fb      	ldrb	r3, [r7, #7]
 801474a:	2b00      	cmp	r3, #0
 801474c:	d104      	bne.n	8014758 <RegionDlChannelReq+0x1c>
    {
        AS923_DL_CHANNEL_REQ( );
 801474e:	6838      	ldr	r0, [r7, #0]
 8014750:	f001 f80a 	bl	8015768 <RegionAS923DlChannelReq>
 8014754:	4603      	mov	r3, r0
 8014756:	e000      	b.n	801475a <RegionDlChannelReq+0x1e>
        IN865_DL_CHANNEL_REQ( );
        US915_DL_CHANNEL_REQ( );
        RU864_DL_CHANNEL_REQ( );
        default:
        {
            return 0;
 8014758:	2300      	movs	r3, #0
        }
    }
}
 801475a:	4618      	mov	r0, r3
 801475c:	3708      	adds	r7, #8
 801475e:	46bd      	mov	sp, r7
 8014760:	bd80      	pop	{r7, pc}

08014762 <RegionAlternateDr>:

int8_t RegionAlternateDr( LoRaMacRegion_t region, int8_t currentDr, AlternateDrType_t type )
{
 8014762:	b580      	push	{r7, lr}
 8014764:	b082      	sub	sp, #8
 8014766:	af00      	add	r7, sp, #0
 8014768:	4603      	mov	r3, r0
 801476a:	71fb      	strb	r3, [r7, #7]
 801476c:	460b      	mov	r3, r1
 801476e:	71bb      	strb	r3, [r7, #6]
 8014770:	4613      	mov	r3, r2
 8014772:	717b      	strb	r3, [r7, #5]
    switch( region )
 8014774:	79fb      	ldrb	r3, [r7, #7]
 8014776:	2b00      	cmp	r3, #0
 8014778:	d108      	bne.n	801478c <RegionAlternateDr+0x2a>
    {
        AS923_ALTERNATE_DR( );
 801477a:	797a      	ldrb	r2, [r7, #5]
 801477c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8014780:	4611      	mov	r1, r2
 8014782:	4618      	mov	r0, r3
 8014784:	f001 f830 	bl	80157e8 <RegionAS923AlternateDr>
 8014788:	4603      	mov	r3, r0
 801478a:	e000      	b.n	801478e <RegionAlternateDr+0x2c>
        IN865_ALTERNATE_DR( );
        US915_ALTERNATE_DR( );
        RU864_ALTERNATE_DR( );
        default:
        {
            return 0;
 801478c:	2300      	movs	r3, #0
        }
    }
}
 801478e:	4618      	mov	r0, r3
 8014790:	3708      	adds	r7, #8
 8014792:	46bd      	mov	sp, r7
 8014794:	bd80      	pop	{r7, pc}

08014796 <RegionNextChannel>:

LoRaMacStatus_t RegionNextChannel( LoRaMacRegion_t region, NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 8014796:	b580      	push	{r7, lr}
 8014798:	b084      	sub	sp, #16
 801479a:	af00      	add	r7, sp, #0
 801479c:	60b9      	str	r1, [r7, #8]
 801479e:	607a      	str	r2, [r7, #4]
 80147a0:	603b      	str	r3, [r7, #0]
 80147a2:	4603      	mov	r3, r0
 80147a4:	73fb      	strb	r3, [r7, #15]
    switch( region )
 80147a6:	7bfb      	ldrb	r3, [r7, #15]
 80147a8:	2b00      	cmp	r3, #0
 80147aa:	d107      	bne.n	80147bc <RegionNextChannel+0x26>
    {
        AS923_NEXT_CHANNEL( );
 80147ac:	69bb      	ldr	r3, [r7, #24]
 80147ae:	683a      	ldr	r2, [r7, #0]
 80147b0:	6879      	ldr	r1, [r7, #4]
 80147b2:	68b8      	ldr	r0, [r7, #8]
 80147b4:	f001 f826 	bl	8015804 <RegionAS923NextChannel>
 80147b8:	4603      	mov	r3, r0
 80147ba:	e000      	b.n	80147be <RegionNextChannel+0x28>
        IN865_NEXT_CHANNEL( );
        US915_NEXT_CHANNEL( );
        RU864_NEXT_CHANNEL( );
        default:
        {
            return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 80147bc:	2309      	movs	r3, #9
        }
    }
}
 80147be:	4618      	mov	r0, r3
 80147c0:	3710      	adds	r7, #16
 80147c2:	46bd      	mov	sp, r7
 80147c4:	bd80      	pop	{r7, pc}

080147c6 <RegionApplyDrOffset>:
    }
}
#endif /* REGION_VERSION */

uint8_t RegionApplyDrOffset( LoRaMacRegion_t region, uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 80147c6:	b590      	push	{r4, r7, lr}
 80147c8:	b083      	sub	sp, #12
 80147ca:	af00      	add	r7, sp, #0
 80147cc:	4604      	mov	r4, r0
 80147ce:	4608      	mov	r0, r1
 80147d0:	4611      	mov	r1, r2
 80147d2:	461a      	mov	r2, r3
 80147d4:	4623      	mov	r3, r4
 80147d6:	71fb      	strb	r3, [r7, #7]
 80147d8:	4603      	mov	r3, r0
 80147da:	71bb      	strb	r3, [r7, #6]
 80147dc:	460b      	mov	r3, r1
 80147de:	717b      	strb	r3, [r7, #5]
 80147e0:	4613      	mov	r3, r2
 80147e2:	713b      	strb	r3, [r7, #4]
    switch( region )
 80147e4:	79fb      	ldrb	r3, [r7, #7]
 80147e6:	2b00      	cmp	r3, #0
 80147e8:	d109      	bne.n	80147fe <RegionApplyDrOffset+0x38>
    {
        AS923_APPLY_DR_OFFSET( );
 80147ea:	f997 2004 	ldrsb.w	r2, [r7, #4]
 80147ee:	f997 1005 	ldrsb.w	r1, [r7, #5]
 80147f2:	79bb      	ldrb	r3, [r7, #6]
 80147f4:	4618      	mov	r0, r3
 80147f6:	f001 f979 	bl	8015aec <RegionAS923ApplyDrOffset>
 80147fa:	4603      	mov	r3, r0
 80147fc:	e000      	b.n	8014800 <RegionApplyDrOffset+0x3a>
        IN865_APPLY_DR_OFFSET( );
        US915_APPLY_DR_OFFSET( );
        RU864_APPLY_DR_OFFSET( );
        default:
        {
            return dr;
 80147fe:	797b      	ldrb	r3, [r7, #5]
        }
    }
}
 8014800:	4618      	mov	r0, r3
 8014802:	370c      	adds	r7, #12
 8014804:	46bd      	mov	sp, r7
 8014806:	bd90      	pop	{r4, r7, pc}

08014808 <RegionGetVersion>:
        }
    }
}

Version_t RegionGetVersion( void )
{
 8014808:	b480      	push	{r7}
 801480a:	b083      	sub	sp, #12
 801480c:	af00      	add	r7, sp, #0
    Version_t version;

    version.Value = REGION_VERSION;
 801480e:	4b04      	ldr	r3, [pc, #16]	@ (8014820 <RegionGetVersion+0x18>)
 8014810:	607b      	str	r3, [r7, #4]

    return version;
 8014812:	687b      	ldr	r3, [r7, #4]
}
 8014814:	4618      	mov	r0, r3
 8014816:	370c      	adds	r7, #12
 8014818:	46bd      	mov	sp, r7
 801481a:	bc80      	pop	{r7}
 801481c:	4770      	bx	lr
 801481e:	bf00      	nop
 8014820:	02010001 	.word	0x02010001

08014824 <VerifyRfFreq>:
static Band_t* RegionBands;
#endif /* REGION_VERSION */

// Static functions
static bool VerifyRfFreq( uint32_t freq )
{
 8014824:	b580      	push	{r7, lr}
 8014826:	b082      	sub	sp, #8
 8014828:	af00      	add	r7, sp, #0
 801482a:	6078      	str	r0, [r7, #4]
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 801482c:	4b0d      	ldr	r3, [pc, #52]	@ (8014864 <VerifyRfFreq+0x40>)
 801482e:	6a1b      	ldr	r3, [r3, #32]
 8014830:	6878      	ldr	r0, [r7, #4]
 8014832:	4798      	blx	r3
 8014834:	4603      	mov	r3, r0
 8014836:	f083 0301 	eor.w	r3, r3, #1
 801483a:	b2db      	uxtb	r3, r3
 801483c:	2b00      	cmp	r3, #0
 801483e:	d001      	beq.n	8014844 <VerifyRfFreq+0x20>
    {
        return false;
 8014840:	2300      	movs	r3, #0
 8014842:	e00a      	b.n	801485a <VerifyRfFreq+0x36>
    }

    if( ( freq < AS923_MIN_RF_FREQUENCY ) || ( freq > AS923_MAX_RF_FREQUENCY ) )
 8014844:	687b      	ldr	r3, [r7, #4]
 8014846:	4a08      	ldr	r2, [pc, #32]	@ (8014868 <VerifyRfFreq+0x44>)
 8014848:	4293      	cmp	r3, r2
 801484a:	d903      	bls.n	8014854 <VerifyRfFreq+0x30>
 801484c:	687b      	ldr	r3, [r7, #4]
 801484e:	4a07      	ldr	r2, [pc, #28]	@ (801486c <VerifyRfFreq+0x48>)
 8014850:	4293      	cmp	r3, r2
 8014852:	d901      	bls.n	8014858 <VerifyRfFreq+0x34>
    {
        return false;
 8014854:	2300      	movs	r3, #0
 8014856:	e000      	b.n	801485a <VerifyRfFreq+0x36>
    }
    return true;
 8014858:	2301      	movs	r3, #1
}
 801485a:	4618      	mov	r0, r3
 801485c:	3708      	adds	r7, #8
 801485e:	46bd      	mov	sp, r7
 8014860:	bd80      	pop	{r7, pc}
 8014862:	bf00      	nop
 8014864:	0801c57c 	.word	0x0801c57c
 8014868:	3689cabf 	.word	0x3689cabf
 801486c:	37502800 	.word	0x37502800

08014870 <GetTimeOnAir>:

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 8014870:	b590      	push	{r4, r7, lr}
 8014872:	b08b      	sub	sp, #44	@ 0x2c
 8014874:	af04      	add	r7, sp, #16
 8014876:	4603      	mov	r3, r0
 8014878:	460a      	mov	r2, r1
 801487a:	71fb      	strb	r3, [r7, #7]
 801487c:	4613      	mov	r3, r2
 801487e:	80bb      	strh	r3, [r7, #4]
    int8_t phyDr = DataratesAS923[datarate];
 8014880:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014884:	4a1f      	ldr	r2, [pc, #124]	@ (8014904 <GetTimeOnAir+0x94>)
 8014886:	5cd3      	ldrb	r3, [r2, r3]
 8014888:	74fb      	strb	r3, [r7, #19]
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsAS923 );
 801488a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801488e:	491e      	ldr	r1, [pc, #120]	@ (8014908 <GetTimeOnAir+0x98>)
 8014890:	4618      	mov	r0, r3
 8014892:	f002 f835 	bl	8016900 <RegionCommonGetBandwidth>
 8014896:	60f8      	str	r0, [r7, #12]
    TimerTime_t timeOnAir = 0;
 8014898:	2300      	movs	r3, #0
 801489a:	617b      	str	r3, [r7, #20]

    if( datarate == DR_7 )
 801489c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80148a0:	2b07      	cmp	r3, #7
 80148a2:	d118      	bne.n	80148d6 <GetTimeOnAir+0x66>
    { // High Speed FSK channel
        timeOnAir = Radio.TimeOnAir( MODEM_FSK, bandwidth, phyDr * 1000, 0, 5, false, pktLen, true );
 80148a4:	4b19      	ldr	r3, [pc, #100]	@ (801490c <GetTimeOnAir+0x9c>)
 80148a6:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 80148a8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80148ac:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80148b0:	fb02 f303 	mul.w	r3, r2, r3
 80148b4:	4619      	mov	r1, r3
 80148b6:	88bb      	ldrh	r3, [r7, #4]
 80148b8:	b2db      	uxtb	r3, r3
 80148ba:	2201      	movs	r2, #1
 80148bc:	9203      	str	r2, [sp, #12]
 80148be:	9302      	str	r3, [sp, #8]
 80148c0:	2300      	movs	r3, #0
 80148c2:	9301      	str	r3, [sp, #4]
 80148c4:	2305      	movs	r3, #5
 80148c6:	9300      	str	r3, [sp, #0]
 80148c8:	2300      	movs	r3, #0
 80148ca:	460a      	mov	r2, r1
 80148cc:	68f9      	ldr	r1, [r7, #12]
 80148ce:	2000      	movs	r0, #0
 80148d0:	47a0      	blx	r4
 80148d2:	6178      	str	r0, [r7, #20]
 80148d4:	e011      	b.n	80148fa <GetTimeOnAir+0x8a>
    }
    else
    {
        timeOnAir = Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 80148d6:	4b0d      	ldr	r3, [pc, #52]	@ (801490c <GetTimeOnAir+0x9c>)
 80148d8:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 80148da:	f997 2013 	ldrsb.w	r2, [r7, #19]
 80148de:	88bb      	ldrh	r3, [r7, #4]
 80148e0:	b2db      	uxtb	r3, r3
 80148e2:	2101      	movs	r1, #1
 80148e4:	9103      	str	r1, [sp, #12]
 80148e6:	9302      	str	r3, [sp, #8]
 80148e8:	2300      	movs	r3, #0
 80148ea:	9301      	str	r3, [sp, #4]
 80148ec:	2308      	movs	r3, #8
 80148ee:	9300      	str	r3, [sp, #0]
 80148f0:	2301      	movs	r3, #1
 80148f2:	68f9      	ldr	r1, [r7, #12]
 80148f4:	2001      	movs	r0, #1
 80148f6:	47a0      	blx	r4
 80148f8:	6178      	str	r0, [r7, #20]
    }
    return timeOnAir;
 80148fa:	697b      	ldr	r3, [r7, #20]
}
 80148fc:	4618      	mov	r0, r3
 80148fe:	371c      	adds	r7, #28
 8014900:	46bd      	mov	sp, r7
 8014902:	bd90      	pop	{r4, r7, pc}
 8014904:	0801c4bc 	.word	0x0801c4bc
 8014908:	0801c4c4 	.word	0x0801c4c4
 801490c:	0801c57c 	.word	0x0801c57c

08014910 <RegionAS923GetPhyParam>:
#endif /* REGION_AS923 */

PhyParam_t RegionAS923GetPhyParam( GetPhyParams_t* getPhy )
{
 8014910:	b580      	push	{r7, lr}
 8014912:	b088      	sub	sp, #32
 8014914:	af00      	add	r7, sp, #0
 8014916:	6078      	str	r0, [r7, #4]
    PhyParam_t phyParam = { 0 };
 8014918:	2300      	movs	r3, #0
 801491a:	61bb      	str	r3, [r7, #24]

#if defined( REGION_AS923 )
    switch( getPhy->Attribute )
 801491c:	687b      	ldr	r3, [r7, #4]
 801491e:	781b      	ldrb	r3, [r3, #0]
 8014920:	3b01      	subs	r3, #1
 8014922:	2b37      	cmp	r3, #55	@ 0x37
 8014924:	f200 814e 	bhi.w	8014bc4 <RegionAS923GetPhyParam+0x2b4>
 8014928:	a201      	add	r2, pc, #4	@ (adr r2, 8014930 <RegionAS923GetPhyParam+0x20>)
 801492a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801492e:	bf00      	nop
 8014930:	08014a11 	.word	0x08014a11
 8014934:	08014a25 	.word	0x08014a25
 8014938:	08014bc5 	.word	0x08014bc5
 801493c:	08014bc5 	.word	0x08014bc5
 8014940:	08014bc5 	.word	0x08014bc5
 8014944:	08014a39 	.word	0x08014a39
 8014948:	08014bc5 	.word	0x08014bc5
 801494c:	08014a7f 	.word	0x08014a7f
 8014950:	08014bc5 	.word	0x08014bc5
 8014954:	08014a85 	.word	0x08014a85
 8014958:	08014a8b 	.word	0x08014a8b
 801495c:	08014a91 	.word	0x08014a91
 8014960:	08014a97 	.word	0x08014a97
 8014964:	08014abf 	.word	0x08014abf
 8014968:	08014ae7 	.word	0x08014ae7
 801496c:	08014aed 	.word	0x08014aed
 8014970:	08014af5 	.word	0x08014af5
 8014974:	08014afd 	.word	0x08014afd
 8014978:	08014b05 	.word	0x08014b05
 801497c:	08014b0d 	.word	0x08014b0d
 8014980:	08014b15 	.word	0x08014b15
 8014984:	08014b29 	.word	0x08014b29
 8014988:	08014b2f 	.word	0x08014b2f
 801498c:	08014b35 	.word	0x08014b35
 8014990:	08014b3b 	.word	0x08014b3b
 8014994:	08014b47 	.word	0x08014b47
 8014998:	08014b53 	.word	0x08014b53
 801499c:	08014b59 	.word	0x08014b59
 80149a0:	08014b61 	.word	0x08014b61
 80149a4:	08014b67 	.word	0x08014b67
 80149a8:	08014b6d 	.word	0x08014b6d
 80149ac:	08014b75 	.word	0x08014b75
 80149b0:	08014a3f 	.word	0x08014a3f
 80149b4:	08014bc5 	.word	0x08014bc5
 80149b8:	08014bc5 	.word	0x08014bc5
 80149bc:	08014bc5 	.word	0x08014bc5
 80149c0:	08014bc5 	.word	0x08014bc5
 80149c4:	08014bc5 	.word	0x08014bc5
 80149c8:	08014bc5 	.word	0x08014bc5
 80149cc:	08014bc5 	.word	0x08014bc5
 80149d0:	08014bc5 	.word	0x08014bc5
 80149d4:	08014bc5 	.word	0x08014bc5
 80149d8:	08014bc5 	.word	0x08014bc5
 80149dc:	08014bc5 	.word	0x08014bc5
 80149e0:	08014bc5 	.word	0x08014bc5
 80149e4:	08014bc5 	.word	0x08014bc5
 80149e8:	08014b7b 	.word	0x08014b7b
 80149ec:	08014b81 	.word	0x08014b81
 80149f0:	08014b8f 	.word	0x08014b8f
 80149f4:	08014bc5 	.word	0x08014bc5
 80149f8:	08014bc5 	.word	0x08014bc5
 80149fc:	08014b95 	.word	0x08014b95
 8014a00:	08014b9b 	.word	0x08014b9b
 8014a04:	08014bc5 	.word	0x08014bc5
 8014a08:	08014ba1 	.word	0x08014ba1
 8014a0c:	08014bb1 	.word	0x08014bb1
    {
        case PHY_MIN_RX_DR:
        {
            if( getPhy->DownlinkDwellTime == 0 )
 8014a10:	687b      	ldr	r3, [r7, #4]
 8014a12:	78db      	ldrb	r3, [r3, #3]
 8014a14:	2b00      	cmp	r3, #0
 8014a16:	d102      	bne.n	8014a1e <RegionAS923GetPhyParam+0x10e>
            {
                phyParam.Value = AS923_RX_MIN_DATARATE;
 8014a18:	2300      	movs	r3, #0
 8014a1a:	61bb      	str	r3, [r7, #24]
            }
            else
            {
                phyParam.Value = AS923_DWELL_LIMIT_DATARATE;
            }
            break;
 8014a1c:	e0d3      	b.n	8014bc6 <RegionAS923GetPhyParam+0x2b6>
                phyParam.Value = AS923_DWELL_LIMIT_DATARATE;
 8014a1e:	2302      	movs	r3, #2
 8014a20:	61bb      	str	r3, [r7, #24]
            break;
 8014a22:	e0d0      	b.n	8014bc6 <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_MIN_TX_DR:
        {
            if( getPhy->UplinkDwellTime == 0 )
 8014a24:	687b      	ldr	r3, [r7, #4]
 8014a26:	789b      	ldrb	r3, [r3, #2]
 8014a28:	2b00      	cmp	r3, #0
 8014a2a:	d102      	bne.n	8014a32 <RegionAS923GetPhyParam+0x122>
            {
                phyParam.Value = AS923_TX_MIN_DATARATE;
 8014a2c:	2300      	movs	r3, #0
 8014a2e:	61bb      	str	r3, [r7, #24]
            }
            else
            {
                phyParam.Value = AS923_DWELL_LIMIT_DATARATE;
            }
            break;
 8014a30:	e0c9      	b.n	8014bc6 <RegionAS923GetPhyParam+0x2b6>
                phyParam.Value = AS923_DWELL_LIMIT_DATARATE;
 8014a32:	2302      	movs	r3, #2
 8014a34:	61bb      	str	r3, [r7, #24]
            break;
 8014a36:	e0c6      	b.n	8014bc6 <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_DEF_TX_DR:
        {
            phyParam.Value = AS923_DEFAULT_DATARATE;
 8014a38:	2302      	movs	r3, #2
 8014a3a:	61bb      	str	r3, [r7, #24]
            break;
 8014a3c:	e0c3      	b.n	8014bc6 <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_NEXT_LOWER_TX_DR:
        {
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
            {
                .CurrentDr = getPhy->Datarate,
 8014a3e:	687b      	ldr	r3, [r7, #4]
 8014a40:	f993 3001 	ldrsb.w	r3, [r3, #1]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8014a44:	733b      	strb	r3, [r7, #12]
 8014a46:	2307      	movs	r3, #7
 8014a48:	737b      	strb	r3, [r7, #13]
                .MaxDr = ( int8_t )AS923_TX_MAX_DATARATE,
                .MinDr = ( int8_t )( ( getPhy->UplinkDwellTime == 0 ) ? AS923_TX_MIN_DATARATE : AS923_DWELL_LIMIT_DATARATE ),
 8014a4a:	687b      	ldr	r3, [r7, #4]
 8014a4c:	789b      	ldrb	r3, [r3, #2]
 8014a4e:	2b00      	cmp	r3, #0
 8014a50:	d101      	bne.n	8014a56 <RegionAS923GetPhyParam+0x146>
 8014a52:	2300      	movs	r3, #0
 8014a54:	e000      	b.n	8014a58 <RegionAS923GetPhyParam+0x148>
 8014a56:	2302      	movs	r3, #2
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8014a58:	73bb      	strb	r3, [r7, #14]
 8014a5a:	2310      	movs	r3, #16
 8014a5c:	73fb      	strb	r3, [r7, #15]
                .NbChannels = AS923_MAX_NB_CHANNELS,
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
 8014a5e:	4b5d      	ldr	r3, [pc, #372]	@ (8014bd4 <RegionAS923GetPhyParam+0x2c4>)
 8014a60:	681b      	ldr	r3, [r3, #0]
 8014a62:	f503 7358 	add.w	r3, r3, #864	@ 0x360
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8014a66:	613b      	str	r3, [r7, #16]
                .Channels = RegionNvmGroup2->Channels,
 8014a68:	4b5a      	ldr	r3, [pc, #360]	@ (8014bd4 <RegionAS923GetPhyParam+0x2c4>)
 8014a6a:	681b      	ldr	r3, [r3, #0]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8014a6c:	617b      	str	r3, [r7, #20]
            };
            phyParam.Value = RegionCommonGetNextLowerTxDr( &nextLowerTxDrParams );
 8014a6e:	f107 030c 	add.w	r3, r7, #12
 8014a72:	4618      	mov	r0, r3
 8014a74:	f001 fef1 	bl	801685a <RegionCommonGetNextLowerTxDr>
 8014a78:	4603      	mov	r3, r0
 8014a7a:	61bb      	str	r3, [r7, #24]
            break;
 8014a7c:	e0a3      	b.n	8014bc6 <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_MAX_TX_POWER:
        {
            phyParam.Value = AS923_MAX_TX_POWER;
 8014a7e:	2300      	movs	r3, #0
 8014a80:	61bb      	str	r3, [r7, #24]
            break;
 8014a82:	e0a0      	b.n	8014bc6 <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_DEF_TX_POWER:
        {
            phyParam.Value = AS923_DEFAULT_TX_POWER;
 8014a84:	2300      	movs	r3, #0
 8014a86:	61bb      	str	r3, [r7, #24]
            break;
 8014a88:	e09d      	b.n	8014bc6 <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_DEF_ADR_ACK_LIMIT:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_LIMIT;
 8014a8a:	2340      	movs	r3, #64	@ 0x40
 8014a8c:	61bb      	str	r3, [r7, #24]
            break;
 8014a8e:	e09a      	b.n	8014bc6 <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_DEF_ADR_ACK_DELAY:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_DELAY;
 8014a90:	2320      	movs	r3, #32
 8014a92:	61bb      	str	r3, [r7, #24]
            break;
 8014a94:	e097      	b.n	8014bc6 <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_MAX_PAYLOAD:
        {
            if( getPhy->UplinkDwellTime == 0 )
 8014a96:	687b      	ldr	r3, [r7, #4]
 8014a98:	789b      	ldrb	r3, [r3, #2]
 8014a9a:	2b00      	cmp	r3, #0
 8014a9c:	d107      	bne.n	8014aae <RegionAS923GetPhyParam+0x19e>
            {
                phyParam.Value = MaxPayloadOfDatarateDwell0AS923[getPhy->Datarate];
 8014a9e:	687b      	ldr	r3, [r7, #4]
 8014aa0:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8014aa4:	461a      	mov	r2, r3
 8014aa6:	4b4c      	ldr	r3, [pc, #304]	@ (8014bd8 <RegionAS923GetPhyParam+0x2c8>)
 8014aa8:	5c9b      	ldrb	r3, [r3, r2]
 8014aaa:	61bb      	str	r3, [r7, #24]
            }
            else
            {
                phyParam.Value = MaxPayloadOfDatarateDwell1AS923[getPhy->Datarate];
            }
            break;
 8014aac:	e08b      	b.n	8014bc6 <RegionAS923GetPhyParam+0x2b6>
                phyParam.Value = MaxPayloadOfDatarateDwell1AS923[getPhy->Datarate];
 8014aae:	687b      	ldr	r3, [r7, #4]
 8014ab0:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8014ab4:	461a      	mov	r2, r3
 8014ab6:	4b49      	ldr	r3, [pc, #292]	@ (8014bdc <RegionAS923GetPhyParam+0x2cc>)
 8014ab8:	5c9b      	ldrb	r3, [r3, r2]
 8014aba:	61bb      	str	r3, [r7, #24]
            break;
 8014abc:	e083      	b.n	8014bc6 <RegionAS923GetPhyParam+0x2b6>
        }
        /* ST_WORKAROUND_BEGIN: Keep repeater feature */
        case PHY_MAX_PAYLOAD_REPEATER:
        {
            if( getPhy->UplinkDwellTime == 0 )
 8014abe:	687b      	ldr	r3, [r7, #4]
 8014ac0:	789b      	ldrb	r3, [r3, #2]
 8014ac2:	2b00      	cmp	r3, #0
 8014ac4:	d107      	bne.n	8014ad6 <RegionAS923GetPhyParam+0x1c6>
            {
                phyParam.Value = MaxPayloadOfDatarateRepeaterDwell0AS923[getPhy->Datarate];
 8014ac6:	687b      	ldr	r3, [r7, #4]
 8014ac8:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8014acc:	461a      	mov	r2, r3
 8014ace:	4b44      	ldr	r3, [pc, #272]	@ (8014be0 <RegionAS923GetPhyParam+0x2d0>)
 8014ad0:	5c9b      	ldrb	r3, [r3, r2]
 8014ad2:	61bb      	str	r3, [r7, #24]
            }
            else
            {
                phyParam.Value = MaxPayloadOfDatarateDwell1AS923[getPhy->Datarate];
            }
            break;
 8014ad4:	e077      	b.n	8014bc6 <RegionAS923GetPhyParam+0x2b6>
                phyParam.Value = MaxPayloadOfDatarateDwell1AS923[getPhy->Datarate];
 8014ad6:	687b      	ldr	r3, [r7, #4]
 8014ad8:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8014adc:	461a      	mov	r2, r3
 8014ade:	4b3f      	ldr	r3, [pc, #252]	@ (8014bdc <RegionAS923GetPhyParam+0x2cc>)
 8014ae0:	5c9b      	ldrb	r3, [r3, r2]
 8014ae2:	61bb      	str	r3, [r7, #24]
            break;
 8014ae4:	e06f      	b.n	8014bc6 <RegionAS923GetPhyParam+0x2b6>
        }
        /* ST_WORKAROUND_END */
        case PHY_DUTY_CYCLE:
        {
            phyParam.Value = AS923_DUTY_CYCLE_ENABLED;
 8014ae6:	2300      	movs	r3, #0
 8014ae8:	61bb      	str	r3, [r7, #24]
            break;
 8014aea:	e06c      	b.n	8014bc6 <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_MAX_RX_WINDOW:
        {
            phyParam.Value = AS923_MAX_RX_WINDOW;
 8014aec:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8014af0:	61bb      	str	r3, [r7, #24]
            break;
 8014af2:	e068      	b.n	8014bc6 <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_RECEIVE_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY1;
 8014af4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8014af8:	61bb      	str	r3, [r7, #24]
            break;
 8014afa:	e064      	b.n	8014bc6 <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_RECEIVE_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY2;
 8014afc:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8014b00:	61bb      	str	r3, [r7, #24]
            break;
 8014b02:	e060      	b.n	8014bc6 <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_JOIN_ACCEPT_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY1;
 8014b04:	f241 3388 	movw	r3, #5000	@ 0x1388
 8014b08:	61bb      	str	r3, [r7, #24]
            break;
 8014b0a:	e05c      	b.n	8014bc6 <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_JOIN_ACCEPT_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY2;
 8014b0c:	f241 7370 	movw	r3, #6000	@ 0x1770
 8014b10:	61bb      	str	r3, [r7, #24]
            break;
 8014b12:	e058      	b.n	8014bc6 <RegionAS923GetPhyParam+0x2b6>
            break;
        }
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
        case PHY_RETRANSMIT_TIMEOUT:
        {
            phyParam.Value = ( REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT + randr( -REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT_RND, REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT_RND ) );
 8014b14:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8014b18:	4832      	ldr	r0, [pc, #200]	@ (8014be4 <RegionAS923GetPhyParam+0x2d4>)
 8014b1a:	f001 ff89 	bl	8016a30 <randr>
 8014b1e:	4603      	mov	r3, r0
 8014b20:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 8014b24:	61bb      	str	r3, [r7, #24]
            break;
 8014b26:	e04e      	b.n	8014bc6 <RegionAS923GetPhyParam+0x2b6>
        }
#endif /* REGION_VERSION */
        case PHY_DEF_DR1_OFFSET:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RX1_DR_OFFSET;
 8014b28:	2300      	movs	r3, #0
 8014b2a:	61bb      	str	r3, [r7, #24]
            break;
 8014b2c:	e04b      	b.n	8014bc6 <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_DEF_RX2_FREQUENCY:
        {
            phyParam.Value = AS923_RX_WND_2_FREQ - REGION_AS923_FREQ_OFFSET;
 8014b2e:	4b2e      	ldr	r3, [pc, #184]	@ (8014be8 <RegionAS923GetPhyParam+0x2d8>)
 8014b30:	61bb      	str	r3, [r7, #24]
            break;
 8014b32:	e048      	b.n	8014bc6 <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_DEF_RX2_DR:
        {
            phyParam.Value = AS923_RX_WND_2_DR;
 8014b34:	2302      	movs	r3, #2
 8014b36:	61bb      	str	r3, [r7, #24]
            break;
 8014b38:	e045      	b.n	8014bc6 <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_CHANNELS_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 8014b3a:	4b26      	ldr	r3, [pc, #152]	@ (8014bd4 <RegionAS923GetPhyParam+0x2c4>)
 8014b3c:	681b      	ldr	r3, [r3, #0]
 8014b3e:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8014b42:	61bb      	str	r3, [r7, #24]
            break;
 8014b44:	e03f      	b.n	8014bc6 <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_CHANNELS_DEFAULT_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsDefaultMask;
 8014b46:	4b23      	ldr	r3, [pc, #140]	@ (8014bd4 <RegionAS923GetPhyParam+0x2c4>)
 8014b48:	681b      	ldr	r3, [r3, #0]
 8014b4a:	f503 735b 	add.w	r3, r3, #876	@ 0x36c
 8014b4e:	61bb      	str	r3, [r7, #24]
            break;
 8014b50:	e039      	b.n	8014bc6 <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_MAX_NB_CHANNELS:
        {
            phyParam.Value = AS923_MAX_NB_CHANNELS;
 8014b52:	2310      	movs	r3, #16
 8014b54:	61bb      	str	r3, [r7, #24]
            break;
 8014b56:	e036      	b.n	8014bc6 <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_CHANNELS:
        {
            phyParam.Channels = RegionNvmGroup2->Channels;
 8014b58:	4b1e      	ldr	r3, [pc, #120]	@ (8014bd4 <RegionAS923GetPhyParam+0x2c4>)
 8014b5a:	681b      	ldr	r3, [r3, #0]
 8014b5c:	61bb      	str	r3, [r7, #24]
            break;
 8014b5e:	e032      	b.n	8014bc6 <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_DEF_UPLINK_DWELL_TIME:
        {
            phyParam.Value = AS923_DEFAULT_UPLINK_DWELL_TIME;
 8014b60:	2301      	movs	r3, #1
 8014b62:	61bb      	str	r3, [r7, #24]
            break;
 8014b64:	e02f      	b.n	8014bc6 <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_DEF_DOWNLINK_DWELL_TIME:
        {
            phyParam.Value = AS923_DEFAULT_DOWNLINK_DWELL_TIME;
 8014b66:	2300      	movs	r3, #0
 8014b68:	61bb      	str	r3, [r7, #24]
            break;
 8014b6a:	e02c      	b.n	8014bc6 <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_DEF_MAX_EIRP:
        {
            phyParam.fValue = AS923_DEFAULT_MAX_EIRP;
 8014b6c:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 8014b70:	61bb      	str	r3, [r7, #24]
            break;
 8014b72:	e028      	b.n	8014bc6 <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_DEF_ANTENNA_GAIN:
        {
            phyParam.fValue = AS923_DEFAULT_ANTENNA_GAIN;
 8014b74:	4b1d      	ldr	r3, [pc, #116]	@ (8014bec <RegionAS923GetPhyParam+0x2dc>)
 8014b76:	61bb      	str	r3, [r7, #24]
            break;
 8014b78:	e025      	b.n	8014bc6 <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_BEACON_CHANNEL_FREQ:
        {
            phyParam.Value = AS923_BEACON_CHANNEL_FREQ - REGION_AS923_FREQ_OFFSET;
 8014b7a:	4b1d      	ldr	r3, [pc, #116]	@ (8014bf0 <RegionAS923GetPhyParam+0x2e0>)
 8014b7c:	61bb      	str	r3, [r7, #24]
            break;
 8014b7e:	e022      	b.n	8014bc6 <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_BEACON_FORMAT:
        {
            phyParam.BeaconFormat.BeaconSize = AS923_BEACON_SIZE;
 8014b80:	2311      	movs	r3, #17
 8014b82:	763b      	strb	r3, [r7, #24]
            phyParam.BeaconFormat.Rfu1Size = AS923_RFU1_SIZE;
 8014b84:	2301      	movs	r3, #1
 8014b86:	767b      	strb	r3, [r7, #25]
            phyParam.BeaconFormat.Rfu2Size = AS923_RFU2_SIZE;
 8014b88:	2300      	movs	r3, #0
 8014b8a:	76bb      	strb	r3, [r7, #26]
            break;
 8014b8c:	e01b      	b.n	8014bc6 <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_BEACON_CHANNEL_DR:
        {
            phyParam.Value = AS923_BEACON_CHANNEL_DR;
 8014b8e:	2303      	movs	r3, #3
 8014b90:	61bb      	str	r3, [r7, #24]
            break;
 8014b92:	e018      	b.n	8014bc6 <RegionAS923GetPhyParam+0x2b6>
        case PHY_PING_SLOT_CHANNEL_FREQ:
        {
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
            phyParam.Value = AS923_PING_SLOT_CHANNEL_FREQ;
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
            phyParam.Value = AS923_PING_SLOT_CHANNEL_FREQ - REGION_AS923_FREQ_OFFSET;
 8014b94:	4b16      	ldr	r3, [pc, #88]	@ (8014bf0 <RegionAS923GetPhyParam+0x2e0>)
 8014b96:	61bb      	str	r3, [r7, #24]
#endif /* REGION_VERSION */
            break;
 8014b98:	e015      	b.n	8014bc6 <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_PING_SLOT_CHANNEL_DR:
        {
            phyParam.Value = AS923_PING_SLOT_CHANNEL_DR;
 8014b9a:	2303      	movs	r3, #3
 8014b9c:	61bb      	str	r3, [r7, #24]
            break;
 8014b9e:	e012      	b.n	8014bc6 <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_SF_FROM_DR:
        {
            phyParam.Value = DataratesAS923[getPhy->Datarate];
 8014ba0:	687b      	ldr	r3, [r7, #4]
 8014ba2:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8014ba6:	461a      	mov	r2, r3
 8014ba8:	4b12      	ldr	r3, [pc, #72]	@ (8014bf4 <RegionAS923GetPhyParam+0x2e4>)
 8014baa:	5c9b      	ldrb	r3, [r3, r2]
 8014bac:	61bb      	str	r3, [r7, #24]
            break;
 8014bae:	e00a      	b.n	8014bc6 <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_BW_FROM_DR:
        {
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsAS923 );
 8014bb0:	687b      	ldr	r3, [r7, #4]
 8014bb2:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8014bb6:	4910      	ldr	r1, [pc, #64]	@ (8014bf8 <RegionAS923GetPhyParam+0x2e8>)
 8014bb8:	4618      	mov	r0, r3
 8014bba:	f001 fea1 	bl	8016900 <RegionCommonGetBandwidth>
 8014bbe:	4603      	mov	r3, r0
 8014bc0:	61bb      	str	r3, [r7, #24]
            break;
 8014bc2:	e000      	b.n	8014bc6 <RegionAS923GetPhyParam+0x2b6>
        }
        default:
        {
            break;
 8014bc4:	bf00      	nop
        }
    }

#endif /* REGION_AS923 */
    return phyParam;
 8014bc6:	69bb      	ldr	r3, [r7, #24]
 8014bc8:	61fb      	str	r3, [r7, #28]
 8014bca:	69fb      	ldr	r3, [r7, #28]
}
 8014bcc:	4618      	mov	r0, r3
 8014bce:	3720      	adds	r7, #32
 8014bd0:	46bd      	mov	sp, r7
 8014bd2:	bd80      	pop	{r7, pc}
 8014bd4:	20001964 	.word	0x20001964
 8014bd8:	0801c4e4 	.word	0x0801c4e4
 8014bdc:	0801c4f4 	.word	0x0801c4f4
 8014be0:	0801c4ec 	.word	0x0801c4ec
 8014be4:	fffffc18 	.word	0xfffffc18
 8014be8:	3706ea00 	.word	0x3706ea00
 8014bec:	4009999a 	.word	0x4009999a
 8014bf0:	3709f740 	.word	0x3709f740
 8014bf4:	0801c4bc 	.word	0x0801c4bc
 8014bf8:	0801c4c4 	.word	0x0801c4c4

08014bfc <RegionAS923SetBandTxDone>:

void RegionAS923SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 8014bfc:	b590      	push	{r4, r7, lr}
 8014bfe:	b085      	sub	sp, #20
 8014c00:	af02      	add	r7, sp, #8
 8014c02:	6078      	str	r0, [r7, #4]
#if defined( REGION_AS923 )
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    RegionCommonSetBandTxDone( &RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txDone->Channel].Band],
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    RegionCommonSetBandTxDone( &RegionBands[RegionNvmGroup2->Channels[txDone->Channel].Band],
 8014c04:	4b11      	ldr	r3, [pc, #68]	@ (8014c4c <RegionAS923SetBandTxDone+0x50>)
 8014c06:	681a      	ldr	r2, [r3, #0]
 8014c08:	4b11      	ldr	r3, [pc, #68]	@ (8014c50 <RegionAS923SetBandTxDone+0x54>)
 8014c0a:	6819      	ldr	r1, [r3, #0]
 8014c0c:	687b      	ldr	r3, [r7, #4]
 8014c0e:	781b      	ldrb	r3, [r3, #0]
 8014c10:	4618      	mov	r0, r3
 8014c12:	4603      	mov	r3, r0
 8014c14:	005b      	lsls	r3, r3, #1
 8014c16:	4403      	add	r3, r0
 8014c18:	009b      	lsls	r3, r3, #2
 8014c1a:	440b      	add	r3, r1
 8014c1c:	3309      	adds	r3, #9
 8014c1e:	781b      	ldrb	r3, [r3, #0]
 8014c20:	4619      	mov	r1, r3
 8014c22:	460b      	mov	r3, r1
 8014c24:	005b      	lsls	r3, r3, #1
 8014c26:	440b      	add	r3, r1
 8014c28:	00db      	lsls	r3, r3, #3
 8014c2a:	18d0      	adds	r0, r2, r3
 8014c2c:	687b      	ldr	r3, [r7, #4]
 8014c2e:	6899      	ldr	r1, [r3, #8]
 8014c30:	687b      	ldr	r3, [r7, #4]
 8014c32:	785c      	ldrb	r4, [r3, #1]
 8014c34:	687b      	ldr	r3, [r7, #4]
 8014c36:	691a      	ldr	r2, [r3, #16]
 8014c38:	9200      	str	r2, [sp, #0]
 8014c3a:	68db      	ldr	r3, [r3, #12]
 8014c3c:	4622      	mov	r2, r4
 8014c3e:	f001 f9e5 	bl	801600c <RegionCommonSetBandTxDone>
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#endif /* REGION_VERSION */
#endif /* REGION_AS923 */
}
 8014c42:	bf00      	nop
 8014c44:	370c      	adds	r7, #12
 8014c46:	46bd      	mov	sp, r7
 8014c48:	bd90      	pop	{r4, r7, pc}
 8014c4a:	bf00      	nop
 8014c4c:	20001968 	.word	0x20001968
 8014c50:	20001964 	.word	0x20001964

08014c54 <RegionAS923InitDefaults>:

void RegionAS923InitDefaults( InitDefaultsParams_t* params )
{
 8014c54:	b580      	push	{r7, lr}
 8014c56:	b08e      	sub	sp, #56	@ 0x38
 8014c58:	af00      	add	r7, sp, #0
 8014c5a:	6078      	str	r0, [r7, #4]
#if defined( REGION_AS923 )
    Band_t bands[AS923_MAX_NB_BANDS] =
 8014c5c:	2364      	movs	r3, #100	@ 0x64
 8014c5e:	843b      	strh	r3, [r7, #32]
 8014c60:	2300      	movs	r3, #0
 8014c62:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8014c66:	2300      	movs	r3, #0
 8014c68:	627b      	str	r3, [r7, #36]	@ 0x24
 8014c6a:	2300      	movs	r3, #0
 8014c6c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8014c6e:	2300      	movs	r3, #0
 8014c70:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8014c72:	2300      	movs	r3, #0
 8014c74:	633b      	str	r3, [r7, #48]	@ 0x30
 8014c76:	2300      	movs	r3, #0
 8014c78:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
    {
        AS923_BAND0
    };

    switch( params->Type )
 8014c7c:	687b      	ldr	r3, [r7, #4]
 8014c7e:	7b1b      	ldrb	r3, [r3, #12]
 8014c80:	2b02      	cmp	r3, #2
 8014c82:	d05e      	beq.n	8014d42 <RegionAS923InitDefaults+0xee>
 8014c84:	2b02      	cmp	r3, #2
 8014c86:	dc6b      	bgt.n	8014d60 <RegionAS923InitDefaults+0x10c>
 8014c88:	2b00      	cmp	r3, #0
 8014c8a:	d002      	beq.n	8014c92 <RegionAS923InitDefaults+0x3e>
 8014c8c:	2b01      	cmp	r3, #1
 8014c8e:	d043      	beq.n	8014d18 <RegionAS923InitDefaults+0xc4>
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
            break;
        }
        default:
        {
            break;
 8014c90:	e066      	b.n	8014d60 <RegionAS923InitDefaults+0x10c>
            if( ( params->NvmGroup1 == NULL ) || ( params->NvmGroup2 == NULL ) )
 8014c92:	687b      	ldr	r3, [r7, #4]
 8014c94:	681b      	ldr	r3, [r3, #0]
 8014c96:	2b00      	cmp	r3, #0
 8014c98:	d063      	beq.n	8014d62 <RegionAS923InitDefaults+0x10e>
 8014c9a:	687b      	ldr	r3, [r7, #4]
 8014c9c:	685b      	ldr	r3, [r3, #4]
 8014c9e:	2b00      	cmp	r3, #0
 8014ca0:	d05f      	beq.n	8014d62 <RegionAS923InitDefaults+0x10e>
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
 8014ca2:	687b      	ldr	r3, [r7, #4]
 8014ca4:	685b      	ldr	r3, [r3, #4]
 8014ca6:	4a30      	ldr	r2, [pc, #192]	@ (8014d68 <RegionAS923InitDefaults+0x114>)
 8014ca8:	6013      	str	r3, [r2, #0]
            RegionBands = (Band_t*) params->Bands;
 8014caa:	687b      	ldr	r3, [r7, #4]
 8014cac:	689b      	ldr	r3, [r3, #8]
 8014cae:	4a2f      	ldr	r2, [pc, #188]	@ (8014d6c <RegionAS923InitDefaults+0x118>)
 8014cb0:	6013      	str	r3, [r2, #0]
            memcpy1( ( uint8_t* )RegionBands, ( uint8_t* )bands, sizeof( Band_t ) * AS923_MAX_NB_BANDS );
 8014cb2:	4b2e      	ldr	r3, [pc, #184]	@ (8014d6c <RegionAS923InitDefaults+0x118>)
 8014cb4:	681b      	ldr	r3, [r3, #0]
 8014cb6:	f107 0120 	add.w	r1, r7, #32
 8014cba:	2218      	movs	r2, #24
 8014cbc:	4618      	mov	r0, r3
 8014cbe:	f001 fece 	bl	8016a5e <memcpy1>
            RegionNvmGroup2->Channels[0] = ( ChannelParams_t ) AS923_LC1;
 8014cc2:	4b29      	ldr	r3, [pc, #164]	@ (8014d68 <RegionAS923InitDefaults+0x114>)
 8014cc4:	681b      	ldr	r3, [r3, #0]
 8014cc6:	4a2a      	ldr	r2, [pc, #168]	@ (8014d70 <RegionAS923InitDefaults+0x11c>)
 8014cc8:	ca07      	ldmia	r2, {r0, r1, r2}
 8014cca:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->Channels[1] = ( ChannelParams_t ) AS923_LC2;
 8014cce:	4b26      	ldr	r3, [pc, #152]	@ (8014d68 <RegionAS923InitDefaults+0x114>)
 8014cd0:	681b      	ldr	r3, [r3, #0]
 8014cd2:	4a28      	ldr	r2, [pc, #160]	@ (8014d74 <RegionAS923InitDefaults+0x120>)
 8014cd4:	330c      	adds	r3, #12
 8014cd6:	ca07      	ldmia	r2, {r0, r1, r2}
 8014cd8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->Channels[0].Frequency -= REGION_AS923_FREQ_OFFSET;
 8014cdc:	4b22      	ldr	r3, [pc, #136]	@ (8014d68 <RegionAS923InitDefaults+0x114>)
 8014cde:	681a      	ldr	r2, [r3, #0]
 8014ce0:	4b21      	ldr	r3, [pc, #132]	@ (8014d68 <RegionAS923InitDefaults+0x114>)
 8014ce2:	681b      	ldr	r3, [r3, #0]
 8014ce4:	6812      	ldr	r2, [r2, #0]
 8014ce6:	601a      	str	r2, [r3, #0]
            RegionNvmGroup2->Channels[1].Frequency -= REGION_AS923_FREQ_OFFSET;
 8014ce8:	4b1f      	ldr	r3, [pc, #124]	@ (8014d68 <RegionAS923InitDefaults+0x114>)
 8014cea:	681a      	ldr	r2, [r3, #0]
 8014cec:	4b1e      	ldr	r3, [pc, #120]	@ (8014d68 <RegionAS923InitDefaults+0x114>)
 8014cee:	681b      	ldr	r3, [r3, #0]
 8014cf0:	68d2      	ldr	r2, [r2, #12]
 8014cf2:	60da      	str	r2, [r3, #12]
            RegionNvmGroup2->ChannelsDefaultMask[0] = LC( 1 ) + LC( 2 );
 8014cf4:	4b1c      	ldr	r3, [pc, #112]	@ (8014d68 <RegionAS923InitDefaults+0x114>)
 8014cf6:	681b      	ldr	r3, [r3, #0]
 8014cf8:	2203      	movs	r2, #3
 8014cfa:	f8a3 236c 	strh.w	r2, [r3, #876]	@ 0x36c
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 8014cfe:	4b1a      	ldr	r3, [pc, #104]	@ (8014d68 <RegionAS923InitDefaults+0x114>)
 8014d00:	681b      	ldr	r3, [r3, #0]
 8014d02:	f503 7058 	add.w	r0, r3, #864	@ 0x360
 8014d06:	4b18      	ldr	r3, [pc, #96]	@ (8014d68 <RegionAS923InitDefaults+0x114>)
 8014d08:	681b      	ldr	r3, [r3, #0]
 8014d0a:	f503 735b 	add.w	r3, r3, #876	@ 0x36c
 8014d0e:	2201      	movs	r2, #1
 8014d10:	4619      	mov	r1, r3
 8014d12:	f001 f955 	bl	8015fc0 <RegionCommonChanMaskCopy>
 8014d16:	e024      	b.n	8014d62 <RegionAS923InitDefaults+0x10e>
            RegionNvmGroup2->Channels[0].Rx1Frequency = 0;
 8014d18:	4b13      	ldr	r3, [pc, #76]	@ (8014d68 <RegionAS923InitDefaults+0x114>)
 8014d1a:	681b      	ldr	r3, [r3, #0]
 8014d1c:	2200      	movs	r2, #0
 8014d1e:	605a      	str	r2, [r3, #4]
            RegionNvmGroup2->Channels[1].Rx1Frequency = 0;
 8014d20:	4b11      	ldr	r3, [pc, #68]	@ (8014d68 <RegionAS923InitDefaults+0x114>)
 8014d22:	681b      	ldr	r3, [r3, #0]
 8014d24:	2200      	movs	r2, #0
 8014d26:	611a      	str	r2, [r3, #16]
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 8014d28:	4b0f      	ldr	r3, [pc, #60]	@ (8014d68 <RegionAS923InitDefaults+0x114>)
 8014d2a:	681b      	ldr	r3, [r3, #0]
 8014d2c:	f503 7058 	add.w	r0, r3, #864	@ 0x360
 8014d30:	4b0d      	ldr	r3, [pc, #52]	@ (8014d68 <RegionAS923InitDefaults+0x114>)
 8014d32:	681b      	ldr	r3, [r3, #0]
 8014d34:	f503 735b 	add.w	r3, r3, #876	@ 0x36c
 8014d38:	2201      	movs	r2, #1
 8014d3a:	4619      	mov	r1, r3
 8014d3c:	f001 f940 	bl	8015fc0 <RegionCommonChanMaskCopy>
            break;
 8014d40:	e00f      	b.n	8014d62 <RegionAS923InitDefaults+0x10e>
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
 8014d42:	4b09      	ldr	r3, [pc, #36]	@ (8014d68 <RegionAS923InitDefaults+0x114>)
 8014d44:	681b      	ldr	r3, [r3, #0]
 8014d46:	f8b3 1360 	ldrh.w	r1, [r3, #864]	@ 0x360
 8014d4a:	4b07      	ldr	r3, [pc, #28]	@ (8014d68 <RegionAS923InitDefaults+0x114>)
 8014d4c:	681b      	ldr	r3, [r3, #0]
 8014d4e:	f8b3 236c 	ldrh.w	r2, [r3, #876]	@ 0x36c
 8014d52:	4b05      	ldr	r3, [pc, #20]	@ (8014d68 <RegionAS923InitDefaults+0x114>)
 8014d54:	681b      	ldr	r3, [r3, #0]
 8014d56:	430a      	orrs	r2, r1
 8014d58:	b292      	uxth	r2, r2
 8014d5a:	f8a3 2360 	strh.w	r2, [r3, #864]	@ 0x360
            break;
 8014d5e:	e000      	b.n	8014d62 <RegionAS923InitDefaults+0x10e>
            break;
 8014d60:	bf00      	nop
        }
    }
#endif /* REGION_AS923 */
}
 8014d62:	3738      	adds	r7, #56	@ 0x38
 8014d64:	46bd      	mov	sp, r7
 8014d66:	bd80      	pop	{r7, pc}
 8014d68:	20001964 	.word	0x20001964
 8014d6c:	20001968 	.word	0x20001968
 8014d70:	0801bee4 	.word	0x0801bee4
 8014d74:	0801bef0 	.word	0x0801bef0

08014d78 <RegionAS923Verify>:

bool RegionAS923Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 8014d78:	b580      	push	{r7, lr}
 8014d7a:	b082      	sub	sp, #8
 8014d7c:	af00      	add	r7, sp, #0
 8014d7e:	6078      	str	r0, [r7, #4]
 8014d80:	460b      	mov	r3, r1
 8014d82:	70fb      	strb	r3, [r7, #3]
#if defined( REGION_AS923 )
    switch( phyAttribute )
 8014d84:	78fb      	ldrb	r3, [r7, #3]
 8014d86:	2b0f      	cmp	r3, #15
 8014d88:	f200 808f 	bhi.w	8014eaa <RegionAS923Verify+0x132>
 8014d8c:	a201      	add	r2, pc, #4	@ (adr r2, 8014d94 <RegionAS923Verify+0x1c>)
 8014d8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014d92:	bf00      	nop
 8014d94:	08014dd5 	.word	0x08014dd5
 8014d98:	08014eab 	.word	0x08014eab
 8014d9c:	08014eab 	.word	0x08014eab
 8014da0:	08014eab 	.word	0x08014eab
 8014da4:	08014eab 	.word	0x08014eab
 8014da8:	08014de3 	.word	0x08014de3
 8014dac:	08014e27 	.word	0x08014e27
 8014db0:	08014e45 	.word	0x08014e45
 8014db4:	08014eab 	.word	0x08014eab
 8014db8:	08014e89 	.word	0x08014e89
 8014dbc:	08014e89 	.word	0x08014e89
 8014dc0:	08014eab 	.word	0x08014eab
 8014dc4:	08014eab 	.word	0x08014eab
 8014dc8:	08014eab 	.word	0x08014eab
 8014dcc:	08014eab 	.word	0x08014eab
 8014dd0:	08014ea7 	.word	0x08014ea7
    {
        case PHY_FREQUENCY:
        {
            return VerifyRfFreq( verify->Frequency );
 8014dd4:	687b      	ldr	r3, [r7, #4]
 8014dd6:	681b      	ldr	r3, [r3, #0]
 8014dd8:	4618      	mov	r0, r3
 8014dda:	f7ff fd23 	bl	8014824 <VerifyRfFreq>
 8014dde:	4603      	mov	r3, r0
 8014de0:	e064      	b.n	8014eac <RegionAS923Verify+0x134>
        }
        case PHY_TX_DR:
        {
            if( verify->DatarateParams.UplinkDwellTime == 0 )
 8014de2:	687b      	ldr	r3, [r7, #4]
 8014de4:	789b      	ldrb	r3, [r3, #2]
 8014de6:	2b00      	cmp	r3, #0
 8014de8:	d10e      	bne.n	8014e08 <RegionAS923Verify+0x90>
            {
                return RegionCommonValueInRange( verify->DatarateParams.Datarate, AS923_TX_MIN_DATARATE, AS923_TX_MAX_DATARATE );
 8014dea:	687b      	ldr	r3, [r7, #4]
 8014dec:	f993 3000 	ldrsb.w	r3, [r3]
 8014df0:	2207      	movs	r2, #7
 8014df2:	2100      	movs	r1, #0
 8014df4:	4618      	mov	r0, r3
 8014df6:	f001 f866 	bl	8015ec6 <RegionCommonValueInRange>
 8014dfa:	4603      	mov	r3, r0
 8014dfc:	2b00      	cmp	r3, #0
 8014dfe:	bf14      	ite	ne
 8014e00:	2301      	movne	r3, #1
 8014e02:	2300      	moveq	r3, #0
 8014e04:	b2db      	uxtb	r3, r3
 8014e06:	e051      	b.n	8014eac <RegionAS923Verify+0x134>
            }
            else
            {
                return RegionCommonValueInRange( verify->DatarateParams.Datarate, AS923_DWELL_LIMIT_DATARATE, AS923_TX_MAX_DATARATE );
 8014e08:	687b      	ldr	r3, [r7, #4]
 8014e0a:	f993 3000 	ldrsb.w	r3, [r3]
 8014e0e:	2207      	movs	r2, #7
 8014e10:	2102      	movs	r1, #2
 8014e12:	4618      	mov	r0, r3
 8014e14:	f001 f857 	bl	8015ec6 <RegionCommonValueInRange>
 8014e18:	4603      	mov	r3, r0
 8014e1a:	2b00      	cmp	r3, #0
 8014e1c:	bf14      	ite	ne
 8014e1e:	2301      	movne	r3, #1
 8014e20:	2300      	moveq	r3, #0
 8014e22:	b2db      	uxtb	r3, r3
 8014e24:	e042      	b.n	8014eac <RegionAS923Verify+0x134>
            }
        }
        case PHY_DEF_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
 8014e26:	687b      	ldr	r3, [r7, #4]
 8014e28:	f993 3000 	ldrsb.w	r3, [r3]
 8014e2c:	2205      	movs	r2, #5
 8014e2e:	2100      	movs	r1, #0
 8014e30:	4618      	mov	r0, r3
 8014e32:	f001 f848 	bl	8015ec6 <RegionCommonValueInRange>
 8014e36:	4603      	mov	r3, r0
 8014e38:	2b00      	cmp	r3, #0
 8014e3a:	bf14      	ite	ne
 8014e3c:	2301      	movne	r3, #1
 8014e3e:	2300      	moveq	r3, #0
 8014e40:	b2db      	uxtb	r3, r3
 8014e42:	e033      	b.n	8014eac <RegionAS923Verify+0x134>
        }
        case PHY_RX_DR:
        {
            if( verify->DatarateParams.DownlinkDwellTime == 0 )
 8014e44:	687b      	ldr	r3, [r7, #4]
 8014e46:	785b      	ldrb	r3, [r3, #1]
 8014e48:	2b00      	cmp	r3, #0
 8014e4a:	d10e      	bne.n	8014e6a <RegionAS923Verify+0xf2>
            {
                return RegionCommonValueInRange( verify->DatarateParams.Datarate, AS923_RX_MIN_DATARATE, AS923_RX_MAX_DATARATE );
 8014e4c:	687b      	ldr	r3, [r7, #4]
 8014e4e:	f993 3000 	ldrsb.w	r3, [r3]
 8014e52:	2207      	movs	r2, #7
 8014e54:	2100      	movs	r1, #0
 8014e56:	4618      	mov	r0, r3
 8014e58:	f001 f835 	bl	8015ec6 <RegionCommonValueInRange>
 8014e5c:	4603      	mov	r3, r0
 8014e5e:	2b00      	cmp	r3, #0
 8014e60:	bf14      	ite	ne
 8014e62:	2301      	movne	r3, #1
 8014e64:	2300      	moveq	r3, #0
 8014e66:	b2db      	uxtb	r3, r3
 8014e68:	e020      	b.n	8014eac <RegionAS923Verify+0x134>
            }
            else
            {
                return RegionCommonValueInRange( verify->DatarateParams.Datarate, AS923_DWELL_LIMIT_DATARATE, AS923_RX_MAX_DATARATE );
 8014e6a:	687b      	ldr	r3, [r7, #4]
 8014e6c:	f993 3000 	ldrsb.w	r3, [r3]
 8014e70:	2207      	movs	r2, #7
 8014e72:	2102      	movs	r1, #2
 8014e74:	4618      	mov	r0, r3
 8014e76:	f001 f826 	bl	8015ec6 <RegionCommonValueInRange>
 8014e7a:	4603      	mov	r3, r0
 8014e7c:	2b00      	cmp	r3, #0
 8014e7e:	bf14      	ite	ne
 8014e80:	2301      	movne	r3, #1
 8014e82:	2300      	moveq	r3, #0
 8014e84:	b2db      	uxtb	r3, r3
 8014e86:	e011      	b.n	8014eac <RegionAS923Verify+0x134>
        }
        case PHY_DEF_TX_POWER:
        case PHY_TX_POWER:
        {
            // Remark: switched min and max!
            return RegionCommonValueInRange( verify->TxPower, AS923_MAX_TX_POWER, AS923_MIN_TX_POWER );
 8014e88:	687b      	ldr	r3, [r7, #4]
 8014e8a:	f993 3000 	ldrsb.w	r3, [r3]
 8014e8e:	2207      	movs	r2, #7
 8014e90:	2100      	movs	r1, #0
 8014e92:	4618      	mov	r0, r3
 8014e94:	f001 f817 	bl	8015ec6 <RegionCommonValueInRange>
 8014e98:	4603      	mov	r3, r0
 8014e9a:	2b00      	cmp	r3, #0
 8014e9c:	bf14      	ite	ne
 8014e9e:	2301      	movne	r3, #1
 8014ea0:	2300      	moveq	r3, #0
 8014ea2:	b2db      	uxtb	r3, r3
 8014ea4:	e002      	b.n	8014eac <RegionAS923Verify+0x134>
        }
        case PHY_DUTY_CYCLE:
        {
            return AS923_DUTY_CYCLE_ENABLED;
 8014ea6:	2300      	movs	r3, #0
 8014ea8:	e000      	b.n	8014eac <RegionAS923Verify+0x134>
        }
        default:
            return false;
 8014eaa:	2300      	movs	r3, #0
    }
#else
    return false;
#endif /* REGION_AS923 */
}
 8014eac:	4618      	mov	r0, r3
 8014eae:	3708      	adds	r7, #8
 8014eb0:	46bd      	mov	sp, r7
 8014eb2:	bd80      	pop	{r7, pc}

08014eb4 <RegionAS923ApplyCFList>:

void RegionAS923ApplyCFList( ApplyCFListParams_t* applyCFList )
{
 8014eb4:	b580      	push	{r7, lr}
 8014eb6:	b08a      	sub	sp, #40	@ 0x28
 8014eb8:	af00      	add	r7, sp, #0
 8014eba:	6078      	str	r0, [r7, #4]
    ChannelParams_t newChannel;
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    // Setup default datarate range
    newChannel.DrRange.Value = ( DR_5 << 4 ) | DR_0;
 8014ebc:	2350      	movs	r3, #80	@ 0x50
 8014ebe:	f887 3020 	strb.w	r3, [r7, #32]

    // Size of the optional CF list
    if( applyCFList->Size != 16 )
 8014ec2:	687b      	ldr	r3, [r7, #4]
 8014ec4:	7a1b      	ldrb	r3, [r3, #8]
 8014ec6:	2b10      	cmp	r3, #16
 8014ec8:	d162      	bne.n	8014f90 <RegionAS923ApplyCFList+0xdc>
    {
        return;
    }

    // Last byte CFListType must be 0 to indicate the CFList contains a list of frequencies
    if( applyCFList->Payload[15] != 0 )
 8014eca:	687b      	ldr	r3, [r7, #4]
 8014ecc:	685b      	ldr	r3, [r3, #4]
 8014ece:	330f      	adds	r3, #15
 8014ed0:	781b      	ldrb	r3, [r3, #0]
 8014ed2:	2b00      	cmp	r3, #0
 8014ed4:	d15e      	bne.n	8014f94 <RegionAS923ApplyCFList+0xe0>
    {
        return;
    }

    // Last byte is RFU, don't take it into account
    for( uint8_t i = 0, chanIdx = AS923_NUMB_DEFAULT_CHANNELS; chanIdx < AS923_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 8014ed6:	2300      	movs	r3, #0
 8014ed8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8014edc:	2302      	movs	r3, #2
 8014ede:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8014ee2:	e050      	b.n	8014f86 <RegionAS923ApplyCFList+0xd2>
    {
        if( chanIdx < ( AS923_NUMB_CHANNELS_CF_LIST + AS923_NUMB_DEFAULT_CHANNELS ) )
 8014ee4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8014ee8:	2b06      	cmp	r3, #6
 8014eea:	d824      	bhi.n	8014f36 <RegionAS923ApplyCFList+0x82>
        {
            // Channel frequency
            newChannel.Frequency = (uint32_t) applyCFList->Payload[i];
 8014eec:	687b      	ldr	r3, [r7, #4]
 8014eee:	685a      	ldr	r2, [r3, #4]
 8014ef0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8014ef4:	4413      	add	r3, r2
 8014ef6:	781b      	ldrb	r3, [r3, #0]
 8014ef8:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 1] << 8 );
 8014efa:	69ba      	ldr	r2, [r7, #24]
 8014efc:	687b      	ldr	r3, [r7, #4]
 8014efe:	6859      	ldr	r1, [r3, #4]
 8014f00:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8014f04:	3301      	adds	r3, #1
 8014f06:	440b      	add	r3, r1
 8014f08:	781b      	ldrb	r3, [r3, #0]
 8014f0a:	021b      	lsls	r3, r3, #8
 8014f0c:	4313      	orrs	r3, r2
 8014f0e:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 2] << 16 );
 8014f10:	69ba      	ldr	r2, [r7, #24]
 8014f12:	687b      	ldr	r3, [r7, #4]
 8014f14:	6859      	ldr	r1, [r3, #4]
 8014f16:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8014f1a:	3302      	adds	r3, #2
 8014f1c:	440b      	add	r3, r1
 8014f1e:	781b      	ldrb	r3, [r3, #0]
 8014f20:	041b      	lsls	r3, r3, #16
 8014f22:	4313      	orrs	r3, r2
 8014f24:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency *= 100;
 8014f26:	69bb      	ldr	r3, [r7, #24]
 8014f28:	2264      	movs	r2, #100	@ 0x64
 8014f2a:	fb02 f303 	mul.w	r3, r2, r3
 8014f2e:	61bb      	str	r3, [r7, #24]

            // Initialize alternative frequency to 0
            newChannel.Rx1Frequency = 0;
 8014f30:	2300      	movs	r3, #0
 8014f32:	61fb      	str	r3, [r7, #28]
 8014f34:	e006      	b.n	8014f44 <RegionAS923ApplyCFList+0x90>
        }
        else
        {
            newChannel.Frequency = 0;
 8014f36:	2300      	movs	r3, #0
 8014f38:	61bb      	str	r3, [r7, #24]
            newChannel.DrRange.Value = 0;
 8014f3a:	2300      	movs	r3, #0
 8014f3c:	f887 3020 	strb.w	r3, [r7, #32]
            newChannel.Rx1Frequency = 0;
 8014f40:	2300      	movs	r3, #0
 8014f42:	61fb      	str	r3, [r7, #28]
        }

        if( newChannel.Frequency != 0 )
 8014f44:	69bb      	ldr	r3, [r7, #24]
 8014f46:	2b00      	cmp	r3, #0
 8014f48:	d00b      	beq.n	8014f62 <RegionAS923ApplyCFList+0xae>
        {
            channelAdd.NewChannel = &newChannel;
 8014f4a:	f107 0318 	add.w	r3, r7, #24
 8014f4e:	613b      	str	r3, [r7, #16]
            channelAdd.ChannelId = chanIdx;
 8014f50:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8014f54:	753b      	strb	r3, [r7, #20]

            // Try to add all channels
            RegionAS923ChannelAdd( &channelAdd );
 8014f56:	f107 0310 	add.w	r3, r7, #16
 8014f5a:	4618      	mov	r0, r3
 8014f5c:	f000 fd00 	bl	8015960 <RegionAS923ChannelAdd>
 8014f60:	e007      	b.n	8014f72 <RegionAS923ApplyCFList+0xbe>
        }
        else
        {
            channelRemove.ChannelId = chanIdx;
 8014f62:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8014f66:	733b      	strb	r3, [r7, #12]

            RegionAS923ChannelsRemove( &channelRemove );
 8014f68:	f107 030c 	add.w	r3, r7, #12
 8014f6c:	4618      	mov	r0, r3
 8014f6e:	f000 fd93 	bl	8015a98 <RegionAS923ChannelsRemove>
    for( uint8_t i = 0, chanIdx = AS923_NUMB_DEFAULT_CHANNELS; chanIdx < AS923_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 8014f72:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8014f76:	3303      	adds	r3, #3
 8014f78:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8014f7c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8014f80:	3301      	adds	r3, #1
 8014f82:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8014f86:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8014f8a:	2b0f      	cmp	r3, #15
 8014f8c:	d9aa      	bls.n	8014ee4 <RegionAS923ApplyCFList+0x30>
 8014f8e:	e002      	b.n	8014f96 <RegionAS923ApplyCFList+0xe2>
        return;
 8014f90:	bf00      	nop
 8014f92:	e000      	b.n	8014f96 <RegionAS923ApplyCFList+0xe2>
        return;
 8014f94:	bf00      	nop
        }
    }
#endif /* REGION_AS923 */
}
 8014f96:	3728      	adds	r7, #40	@ 0x28
 8014f98:	46bd      	mov	sp, r7
 8014f9a:	bd80      	pop	{r7, pc}

08014f9c <RegionAS923ChanMaskSet>:

bool RegionAS923ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 8014f9c:	b580      	push	{r7, lr}
 8014f9e:	b082      	sub	sp, #8
 8014fa0:	af00      	add	r7, sp, #0
 8014fa2:	6078      	str	r0, [r7, #4]
#if defined( REGION_AS923 )
    switch( chanMaskSet->ChannelsMaskType )
 8014fa4:	687b      	ldr	r3, [r7, #4]
 8014fa6:	791b      	ldrb	r3, [r3, #4]
 8014fa8:	2b00      	cmp	r3, #0
 8014faa:	d002      	beq.n	8014fb2 <RegionAS923ChanMaskSet+0x16>
 8014fac:	2b01      	cmp	r3, #1
 8014fae:	d00b      	beq.n	8014fc8 <RegionAS923ChanMaskSet+0x2c>
 8014fb0:	e015      	b.n	8014fde <RegionAS923ChanMaskSet+0x42>
    {
        case CHANNELS_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, chanMaskSet->ChannelsMaskIn, 1 );
 8014fb2:	4b0e      	ldr	r3, [pc, #56]	@ (8014fec <RegionAS923ChanMaskSet+0x50>)
 8014fb4:	681b      	ldr	r3, [r3, #0]
 8014fb6:	f503 7058 	add.w	r0, r3, #864	@ 0x360
 8014fba:	687b      	ldr	r3, [r7, #4]
 8014fbc:	681b      	ldr	r3, [r3, #0]
 8014fbe:	2201      	movs	r2, #1
 8014fc0:	4619      	mov	r1, r3
 8014fc2:	f000 fffd 	bl	8015fc0 <RegionCommonChanMaskCopy>
            break;
 8014fc6:	e00c      	b.n	8014fe2 <RegionAS923ChanMaskSet+0x46>
        }
        case CHANNELS_DEFAULT_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, 1 );
 8014fc8:	4b08      	ldr	r3, [pc, #32]	@ (8014fec <RegionAS923ChanMaskSet+0x50>)
 8014fca:	681b      	ldr	r3, [r3, #0]
 8014fcc:	f503 705b 	add.w	r0, r3, #876	@ 0x36c
 8014fd0:	687b      	ldr	r3, [r7, #4]
 8014fd2:	681b      	ldr	r3, [r3, #0]
 8014fd4:	2201      	movs	r2, #1
 8014fd6:	4619      	mov	r1, r3
 8014fd8:	f000 fff2 	bl	8015fc0 <RegionCommonChanMaskCopy>
            break;
 8014fdc:	e001      	b.n	8014fe2 <RegionAS923ChanMaskSet+0x46>
        }
        default:
            return false;
 8014fde:	2300      	movs	r3, #0
 8014fe0:	e000      	b.n	8014fe4 <RegionAS923ChanMaskSet+0x48>
    }
    return true;
 8014fe2:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_AS923 */
}
 8014fe4:	4618      	mov	r0, r3
 8014fe6:	3708      	adds	r7, #8
 8014fe8:	46bd      	mov	sp, r7
 8014fea:	bd80      	pop	{r7, pc}
 8014fec:	20001964 	.word	0x20001964

08014ff0 <RegionAS923ComputeRxWindowParameters>:

void RegionAS923ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 8014ff0:	b580      	push	{r7, lr}
 8014ff2:	b088      	sub	sp, #32
 8014ff4:	af02      	add	r7, sp, #8
 8014ff6:	60ba      	str	r2, [r7, #8]
 8014ff8:	607b      	str	r3, [r7, #4]
 8014ffa:	4603      	mov	r3, r0
 8014ffc:	73fb      	strb	r3, [r7, #15]
 8014ffe:	460b      	mov	r3, r1
 8015000:	73bb      	strb	r3, [r7, #14]
#if defined( REGION_AS923 )
    uint32_t tSymbolInUs = 0;
 8015002:	2300      	movs	r3, #0
 8015004:	617b      	str	r3, [r7, #20]

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, AS923_RX_MAX_DATARATE );
 8015006:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801500a:	2b07      	cmp	r3, #7
 801500c:	bfa8      	it	ge
 801500e:	2307      	movge	r3, #7
 8015010:	b25a      	sxtb	r2, r3
 8015012:	687b      	ldr	r3, [r7, #4]
 8015014:	705a      	strb	r2, [r3, #1]
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsAS923 );
 8015016:	687b      	ldr	r3, [r7, #4]
 8015018:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801501c:	491e      	ldr	r1, [pc, #120]	@ (8015098 <RegionAS923ComputeRxWindowParameters+0xa8>)
 801501e:	4618      	mov	r0, r3
 8015020:	f001 fc6e 	bl	8016900 <RegionCommonGetBandwidth>
 8015024:	4603      	mov	r3, r0
 8015026:	b2da      	uxtb	r2, r3
 8015028:	687b      	ldr	r3, [r7, #4]
 801502a:	709a      	strb	r2, [r3, #2]

    if( rxConfigParams->Datarate == DR_7 )
 801502c:	687b      	ldr	r3, [r7, #4]
 801502e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015032:	2b07      	cmp	r3, #7
 8015034:	d10a      	bne.n	801504c <RegionAS923ComputeRxWindowParameters+0x5c>
    { // FSK
        tSymbolInUs = RegionCommonComputeSymbolTimeFsk( DataratesAS923[rxConfigParams->Datarate] );
 8015036:	687b      	ldr	r3, [r7, #4]
 8015038:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801503c:	461a      	mov	r2, r3
 801503e:	4b17      	ldr	r3, [pc, #92]	@ (801509c <RegionAS923ComputeRxWindowParameters+0xac>)
 8015040:	5c9b      	ldrb	r3, [r3, r2]
 8015042:	4618      	mov	r0, r3
 8015044:	f001 f9f0 	bl	8016428 <RegionCommonComputeSymbolTimeFsk>
 8015048:	6178      	str	r0, [r7, #20]
 801504a:	e011      	b.n	8015070 <RegionAS923ComputeRxWindowParameters+0x80>
    }
    else
    { // LoRa
        tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesAS923[rxConfigParams->Datarate], BandwidthsAS923[rxConfigParams->Datarate] );
 801504c:	687b      	ldr	r3, [r7, #4]
 801504e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015052:	461a      	mov	r2, r3
 8015054:	4b11      	ldr	r3, [pc, #68]	@ (801509c <RegionAS923ComputeRxWindowParameters+0xac>)
 8015056:	5c9a      	ldrb	r2, [r3, r2]
 8015058:	687b      	ldr	r3, [r7, #4]
 801505a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801505e:	4619      	mov	r1, r3
 8015060:	4b0d      	ldr	r3, [pc, #52]	@ (8015098 <RegionAS923ComputeRxWindowParameters+0xa8>)
 8015062:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8015066:	4619      	mov	r1, r3
 8015068:	4610      	mov	r0, r2
 801506a:	f001 f9c7 	bl	80163fc <RegionCommonComputeSymbolTimeLoRa>
 801506e:	6178      	str	r0, [r7, #20]
    }

    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 8015070:	4b0b      	ldr	r3, [pc, #44]	@ (80150a0 <RegionAS923ComputeRxWindowParameters+0xb0>)
 8015072:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8015074:	4798      	blx	r3
 8015076:	687b      	ldr	r3, [r7, #4]
 8015078:	3308      	adds	r3, #8
 801507a:	687a      	ldr	r2, [r7, #4]
 801507c:	320c      	adds	r2, #12
 801507e:	7bb9      	ldrb	r1, [r7, #14]
 8015080:	9201      	str	r2, [sp, #4]
 8015082:	9300      	str	r3, [sp, #0]
 8015084:	4603      	mov	r3, r0
 8015086:	68ba      	ldr	r2, [r7, #8]
 8015088:	6978      	ldr	r0, [r7, #20]
 801508a:	f001 f9dd 	bl	8016448 <RegionCommonComputeRxWindowParameters>
#endif /* REGION_AS923 */
}
 801508e:	bf00      	nop
 8015090:	3718      	adds	r7, #24
 8015092:	46bd      	mov	sp, r7
 8015094:	bd80      	pop	{r7, pc}
 8015096:	bf00      	nop
 8015098:	0801c4c4 	.word	0x0801c4c4
 801509c:	0801c4bc 	.word	0x0801c4bc
 80150a0:	0801c57c 	.word	0x0801c57c

080150a4 <RegionAS923RxConfig>:

bool RegionAS923RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 80150a4:	b5b0      	push	{r4, r5, r7, lr}
 80150a6:	b090      	sub	sp, #64	@ 0x40
 80150a8:	af0a      	add	r7, sp, #40	@ 0x28
 80150aa:	6078      	str	r0, [r7, #4]
 80150ac:	6039      	str	r1, [r7, #0]
#if defined( REGION_AS923 )
    RadioModems_t modem;
    int8_t dr = rxConfig->Datarate;
 80150ae:	687b      	ldr	r3, [r7, #4]
 80150b0:	785b      	ldrb	r3, [r3, #1]
 80150b2:	73fb      	strb	r3, [r7, #15]
    uint8_t maxPayload = 0;
 80150b4:	2300      	movs	r3, #0
 80150b6:	75bb      	strb	r3, [r7, #22]
    int8_t phyDr = 0;
 80150b8:	2300      	movs	r3, #0
 80150ba:	73bb      	strb	r3, [r7, #14]
    uint32_t frequency = rxConfig->Frequency;
 80150bc:	687b      	ldr	r3, [r7, #4]
 80150be:	685b      	ldr	r3, [r3, #4]
 80150c0:	613b      	str	r3, [r7, #16]

    if( Radio.GetStatus( ) != RF_IDLE )
 80150c2:	4b5a      	ldr	r3, [pc, #360]	@ (801522c <RegionAS923RxConfig+0x188>)
 80150c4:	685b      	ldr	r3, [r3, #4]
 80150c6:	4798      	blx	r3
 80150c8:	4603      	mov	r3, r0
 80150ca:	2b00      	cmp	r3, #0
 80150cc:	d001      	beq.n	80150d2 <RegionAS923RxConfig+0x2e>
    {
        return false;
 80150ce:	2300      	movs	r3, #0
 80150d0:	e0a8      	b.n	8015224 <RegionAS923RxConfig+0x180>
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 80150d2:	687b      	ldr	r3, [r7, #4]
 80150d4:	7cdb      	ldrb	r3, [r3, #19]
 80150d6:	2b00      	cmp	r3, #0
 80150d8:	d126      	bne.n	8015128 <RegionAS923RxConfig+0x84>
    {
        // Apply window 1 frequency
        frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Frequency;
 80150da:	4b55      	ldr	r3, [pc, #340]	@ (8015230 <RegionAS923RxConfig+0x18c>)
 80150dc:	681a      	ldr	r2, [r3, #0]
 80150de:	687b      	ldr	r3, [r7, #4]
 80150e0:	781b      	ldrb	r3, [r3, #0]
 80150e2:	4619      	mov	r1, r3
 80150e4:	460b      	mov	r3, r1
 80150e6:	005b      	lsls	r3, r3, #1
 80150e8:	440b      	add	r3, r1
 80150ea:	009b      	lsls	r3, r3, #2
 80150ec:	4413      	add	r3, r2
 80150ee:	681b      	ldr	r3, [r3, #0]
 80150f0:	613b      	str	r3, [r7, #16]
        // Apply the alternative RX 1 window frequency, if it is available
        if( RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency != 0 )
 80150f2:	4b4f      	ldr	r3, [pc, #316]	@ (8015230 <RegionAS923RxConfig+0x18c>)
 80150f4:	681a      	ldr	r2, [r3, #0]
 80150f6:	687b      	ldr	r3, [r7, #4]
 80150f8:	781b      	ldrb	r3, [r3, #0]
 80150fa:	4619      	mov	r1, r3
 80150fc:	460b      	mov	r3, r1
 80150fe:	005b      	lsls	r3, r3, #1
 8015100:	440b      	add	r3, r1
 8015102:	009b      	lsls	r3, r3, #2
 8015104:	4413      	add	r3, r2
 8015106:	3304      	adds	r3, #4
 8015108:	681b      	ldr	r3, [r3, #0]
 801510a:	2b00      	cmp	r3, #0
 801510c:	d00c      	beq.n	8015128 <RegionAS923RxConfig+0x84>
        {
            frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency;
 801510e:	4b48      	ldr	r3, [pc, #288]	@ (8015230 <RegionAS923RxConfig+0x18c>)
 8015110:	681a      	ldr	r2, [r3, #0]
 8015112:	687b      	ldr	r3, [r7, #4]
 8015114:	781b      	ldrb	r3, [r3, #0]
 8015116:	4619      	mov	r1, r3
 8015118:	460b      	mov	r3, r1
 801511a:	005b      	lsls	r3, r3, #1
 801511c:	440b      	add	r3, r1
 801511e:	009b      	lsls	r3, r3, #2
 8015120:	4413      	add	r3, r2
 8015122:	3304      	adds	r3, #4
 8015124:	681b      	ldr	r3, [r3, #0]
 8015126:	613b      	str	r3, [r7, #16]
        }
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesAS923[dr];
 8015128:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801512c:	4a41      	ldr	r2, [pc, #260]	@ (8015234 <RegionAS923RxConfig+0x190>)
 801512e:	5cd3      	ldrb	r3, [r2, r3]
 8015130:	73bb      	strb	r3, [r7, #14]

    Radio.SetChannel( frequency );
 8015132:	4b3e      	ldr	r3, [pc, #248]	@ (801522c <RegionAS923RxConfig+0x188>)
 8015134:	68db      	ldr	r3, [r3, #12]
 8015136:	6938      	ldr	r0, [r7, #16]
 8015138:	4798      	blx	r3

    // Radio configuration
    if( dr == DR_7 )
 801513a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801513e:	2b07      	cmp	r3, #7
 8015140:	d128      	bne.n	8015194 <RegionAS923RxConfig+0xf0>
    {
        modem = MODEM_FSK;
 8015142:	2300      	movs	r3, #0
 8015144:	75fb      	strb	r3, [r7, #23]
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
 8015146:	4b39      	ldr	r3, [pc, #228]	@ (801522c <RegionAS923RxConfig+0x188>)
 8015148:	699c      	ldr	r4, [r3, #24]
 801514a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801514e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8015152:	fb02 f303 	mul.w	r3, r2, r3
 8015156:	4619      	mov	r1, r3
 8015158:	687b      	ldr	r3, [r7, #4]
 801515a:	689b      	ldr	r3, [r3, #8]
 801515c:	b29b      	uxth	r3, r3
 801515e:	687a      	ldr	r2, [r7, #4]
 8015160:	7c92      	ldrb	r2, [r2, #18]
 8015162:	7df8      	ldrb	r0, [r7, #23]
 8015164:	9209      	str	r2, [sp, #36]	@ 0x24
 8015166:	2200      	movs	r2, #0
 8015168:	9208      	str	r2, [sp, #32]
 801516a:	2200      	movs	r2, #0
 801516c:	9207      	str	r2, [sp, #28]
 801516e:	2200      	movs	r2, #0
 8015170:	9206      	str	r2, [sp, #24]
 8015172:	2201      	movs	r2, #1
 8015174:	9205      	str	r2, [sp, #20]
 8015176:	2200      	movs	r2, #0
 8015178:	9204      	str	r2, [sp, #16]
 801517a:	2200      	movs	r2, #0
 801517c:	9203      	str	r2, [sp, #12]
 801517e:	9302      	str	r3, [sp, #8]
 8015180:	2305      	movs	r3, #5
 8015182:	9301      	str	r3, [sp, #4]
 8015184:	4b2c      	ldr	r3, [pc, #176]	@ (8015238 <RegionAS923RxConfig+0x194>)
 8015186:	9300      	str	r3, [sp, #0]
 8015188:	2300      	movs	r3, #0
 801518a:	460a      	mov	r2, r1
 801518c:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8015190:	47a0      	blx	r4
 8015192:	e024      	b.n	80151de <RegionAS923RxConfig+0x13a>
    }
    else
    {
        modem = MODEM_LORA;
 8015194:	2301      	movs	r3, #1
 8015196:	75fb      	strb	r3, [r7, #23]
        Radio.SetRxConfig( modem, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 8015198:	4b24      	ldr	r3, [pc, #144]	@ (801522c <RegionAS923RxConfig+0x188>)
 801519a:	699c      	ldr	r4, [r3, #24]
 801519c:	687b      	ldr	r3, [r7, #4]
 801519e:	789b      	ldrb	r3, [r3, #2]
 80151a0:	461d      	mov	r5, r3
 80151a2:	f997 100e 	ldrsb.w	r1, [r7, #14]
 80151a6:	687b      	ldr	r3, [r7, #4]
 80151a8:	689b      	ldr	r3, [r3, #8]
 80151aa:	b29b      	uxth	r3, r3
 80151ac:	687a      	ldr	r2, [r7, #4]
 80151ae:	7c92      	ldrb	r2, [r2, #18]
 80151b0:	7df8      	ldrb	r0, [r7, #23]
 80151b2:	9209      	str	r2, [sp, #36]	@ 0x24
 80151b4:	2201      	movs	r2, #1
 80151b6:	9208      	str	r2, [sp, #32]
 80151b8:	2200      	movs	r2, #0
 80151ba:	9207      	str	r2, [sp, #28]
 80151bc:	2200      	movs	r2, #0
 80151be:	9206      	str	r2, [sp, #24]
 80151c0:	2200      	movs	r2, #0
 80151c2:	9205      	str	r2, [sp, #20]
 80151c4:	2200      	movs	r2, #0
 80151c6:	9204      	str	r2, [sp, #16]
 80151c8:	2200      	movs	r2, #0
 80151ca:	9203      	str	r2, [sp, #12]
 80151cc:	9302      	str	r3, [sp, #8]
 80151ce:	2308      	movs	r3, #8
 80151d0:	9301      	str	r3, [sp, #4]
 80151d2:	2300      	movs	r3, #0
 80151d4:	9300      	str	r3, [sp, #0]
 80151d6:	2301      	movs	r3, #1
 80151d8:	460a      	mov	r2, r1
 80151da:	4629      	mov	r1, r5
 80151dc:	47a0      	blx	r4
    }

    /* ST_WORKAROUND_BEGIN: Keep repeater feature */
    if( rxConfig->RepeaterSupport == true )
 80151de:	687b      	ldr	r3, [r7, #4]
 80151e0:	7c5b      	ldrb	r3, [r3, #17]
 80151e2:	2b00      	cmp	r3, #0
 80151e4:	d005      	beq.n	80151f2 <RegionAS923RxConfig+0x14e>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterDwell0AS923[dr];
 80151e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80151ea:	4a14      	ldr	r2, [pc, #80]	@ (801523c <RegionAS923RxConfig+0x198>)
 80151ec:	5cd3      	ldrb	r3, [r2, r3]
 80151ee:	75bb      	strb	r3, [r7, #22]
 80151f0:	e004      	b.n	80151fc <RegionAS923RxConfig+0x158>
    }
    else
    {
        maxPayload = MaxPayloadOfDatarateDwell0AS923[dr];
 80151f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80151f6:	4a12      	ldr	r2, [pc, #72]	@ (8015240 <RegionAS923RxConfig+0x19c>)
 80151f8:	5cd3      	ldrb	r3, [r2, r3]
 80151fa:	75bb      	strb	r3, [r7, #22]
    }

    Radio.SetMaxPayloadLength( modem, maxPayload + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 80151fc:	4b0b      	ldr	r3, [pc, #44]	@ (801522c <RegionAS923RxConfig+0x188>)
 80151fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8015200:	7dba      	ldrb	r2, [r7, #22]
 8015202:	320d      	adds	r2, #13
 8015204:	b2d1      	uxtb	r1, r2
 8015206:	7dfa      	ldrb	r2, [r7, #23]
 8015208:	4610      	mov	r0, r2
 801520a:	4798      	blx	r3
    /* ST_WORKAROUND_END */

    /* ST_WORKAROUND_BEGIN: Print Rx config */
    RegionCommonRxConfigPrint(rxConfig->RxSlot, frequency, dr);
 801520c:	687b      	ldr	r3, [r7, #4]
 801520e:	7cdb      	ldrb	r3, [r3, #19]
 8015210:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8015214:	6939      	ldr	r1, [r7, #16]
 8015216:	4618      	mov	r0, r3
 8015218:	f001 fb90 	bl	801693c <RegionCommonRxConfigPrint>
    /* ST_WORKAROUND_END */

    *datarate = (uint8_t) dr;
 801521c:	683b      	ldr	r3, [r7, #0]
 801521e:	7bfa      	ldrb	r2, [r7, #15]
 8015220:	701a      	strb	r2, [r3, #0]
    return true;
 8015222:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_AS923 */
}
 8015224:	4618      	mov	r0, r3
 8015226:	3718      	adds	r7, #24
 8015228:	46bd      	mov	sp, r7
 801522a:	bdb0      	pop	{r4, r5, r7, pc}
 801522c:	0801c57c 	.word	0x0801c57c
 8015230:	20001964 	.word	0x20001964
 8015234:	0801c4bc 	.word	0x0801c4bc
 8015238:	00014585 	.word	0x00014585
 801523c:	0801c4ec 	.word	0x0801c4ec
 8015240:	0801c4e4 	.word	0x0801c4e4

08015244 <RegionAS923TxConfig>:

bool RegionAS923TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 8015244:	b590      	push	{r4, r7, lr}
 8015246:	b093      	sub	sp, #76	@ 0x4c
 8015248:	af0a      	add	r7, sp, #40	@ 0x28
 801524a:	60f8      	str	r0, [r7, #12]
 801524c:	60b9      	str	r1, [r7, #8]
 801524e:	607a      	str	r2, [r7, #4]
#if defined( REGION_AS923 )
    RadioModems_t modem;
    int8_t phyDr = DataratesAS923[txConfig->Datarate];
 8015250:	68fb      	ldr	r3, [r7, #12]
 8015252:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015256:	461a      	mov	r2, r3
 8015258:	4b5d      	ldr	r3, [pc, #372]	@ (80153d0 <RegionAS923TxConfig+0x18c>)
 801525a:	5c9b      	ldrb	r3, [r3, r2]
 801525c:	77bb      	strb	r3, [r7, #30]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionBands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
 801525e:	68fb      	ldr	r3, [r7, #12]
 8015260:	f993 0002 	ldrsb.w	r0, [r3, #2]
 8015264:	4b5b      	ldr	r3, [pc, #364]	@ (80153d4 <RegionAS923TxConfig+0x190>)
 8015266:	681a      	ldr	r2, [r3, #0]
 8015268:	4b5b      	ldr	r3, [pc, #364]	@ (80153d8 <RegionAS923TxConfig+0x194>)
 801526a:	6819      	ldr	r1, [r3, #0]
 801526c:	68fb      	ldr	r3, [r7, #12]
 801526e:	781b      	ldrb	r3, [r3, #0]
 8015270:	461c      	mov	r4, r3
 8015272:	4623      	mov	r3, r4
 8015274:	005b      	lsls	r3, r3, #1
 8015276:	4423      	add	r3, r4
 8015278:	009b      	lsls	r3, r3, #2
 801527a:	440b      	add	r3, r1
 801527c:	3309      	adds	r3, #9
 801527e:	781b      	ldrb	r3, [r3, #0]
 8015280:	4619      	mov	r1, r3
 8015282:	460b      	mov	r3, r1
 8015284:	005b      	lsls	r3, r3, #1
 8015286:	440b      	add	r3, r1
 8015288:	00db      	lsls	r3, r3, #3
 801528a:	4413      	add	r3, r2
 801528c:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8015290:	4619      	mov	r1, r3
 8015292:	f001 fb20 	bl	80168d6 <RegionCommonLimitTxPower>
 8015296:	4603      	mov	r3, r0
 8015298:	777b      	strb	r3, [r7, #29]
#endif /* REGION_VERSION */
    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsAS923 );
 801529a:	68fb      	ldr	r3, [r7, #12]
 801529c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80152a0:	494e      	ldr	r1, [pc, #312]	@ (80153dc <RegionAS923TxConfig+0x198>)
 80152a2:	4618      	mov	r0, r3
 80152a4:	f001 fb2c 	bl	8016900 <RegionCommonGetBandwidth>
 80152a8:	61b8      	str	r0, [r7, #24]
    int8_t phyTxPower = 0;
 80152aa:	2300      	movs	r3, #0
 80152ac:	75fb      	strb	r3, [r7, #23]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 80152ae:	68fb      	ldr	r3, [r7, #12]
 80152b0:	6859      	ldr	r1, [r3, #4]
 80152b2:	68fb      	ldr	r3, [r7, #12]
 80152b4:	689a      	ldr	r2, [r3, #8]
 80152b6:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80152ba:	4618      	mov	r0, r3
 80152bc:	f001 f97c 	bl	80165b8 <RegionCommonComputeTxPower>
 80152c0:	4603      	mov	r3, r0
 80152c2:	75fb      	strb	r3, [r7, #23]

    // Setup the radio frequency
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 80152c4:	4b46      	ldr	r3, [pc, #280]	@ (80153e0 <RegionAS923TxConfig+0x19c>)
 80152c6:	68da      	ldr	r2, [r3, #12]
 80152c8:	4b43      	ldr	r3, [pc, #268]	@ (80153d8 <RegionAS923TxConfig+0x194>)
 80152ca:	6819      	ldr	r1, [r3, #0]
 80152cc:	68fb      	ldr	r3, [r7, #12]
 80152ce:	781b      	ldrb	r3, [r3, #0]
 80152d0:	4618      	mov	r0, r3
 80152d2:	4603      	mov	r3, r0
 80152d4:	005b      	lsls	r3, r3, #1
 80152d6:	4403      	add	r3, r0
 80152d8:	009b      	lsls	r3, r3, #2
 80152da:	440b      	add	r3, r1
 80152dc:	681b      	ldr	r3, [r3, #0]
 80152de:	4618      	mov	r0, r3
 80152e0:	4790      	blx	r2

    if( txConfig->Datarate == DR_7 )
 80152e2:	68fb      	ldr	r3, [r7, #12]
 80152e4:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80152e8:	2b07      	cmp	r3, #7
 80152ea:	d124      	bne.n	8015336 <RegionAS923TxConfig+0xf2>
    { // High Speed FSK channel
        modem = MODEM_FSK;
 80152ec:	2300      	movs	r3, #0
 80152ee:	77fb      	strb	r3, [r7, #31]
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
 80152f0:	4b3b      	ldr	r3, [pc, #236]	@ (80153e0 <RegionAS923TxConfig+0x19c>)
 80152f2:	69dc      	ldr	r4, [r3, #28]
 80152f4:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80152f8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80152fc:	fb02 f303 	mul.w	r3, r2, r3
 8015300:	461a      	mov	r2, r3
 8015302:	f997 1017 	ldrsb.w	r1, [r7, #23]
 8015306:	7ff8      	ldrb	r0, [r7, #31]
 8015308:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 801530c:	9308      	str	r3, [sp, #32]
 801530e:	2300      	movs	r3, #0
 8015310:	9307      	str	r3, [sp, #28]
 8015312:	2300      	movs	r3, #0
 8015314:	9306      	str	r3, [sp, #24]
 8015316:	2300      	movs	r3, #0
 8015318:	9305      	str	r3, [sp, #20]
 801531a:	2301      	movs	r3, #1
 801531c:	9304      	str	r3, [sp, #16]
 801531e:	2300      	movs	r3, #0
 8015320:	9303      	str	r3, [sp, #12]
 8015322:	2305      	movs	r3, #5
 8015324:	9302      	str	r3, [sp, #8]
 8015326:	2300      	movs	r3, #0
 8015328:	9301      	str	r3, [sp, #4]
 801532a:	9200      	str	r2, [sp, #0]
 801532c:	69bb      	ldr	r3, [r7, #24]
 801532e:	f246 12a8 	movw	r2, #25000	@ 0x61a8
 8015332:	47a0      	blx	r4
 8015334:	e01d      	b.n	8015372 <RegionAS923TxConfig+0x12e>
    }
    else
    {
        modem = MODEM_LORA;
 8015336:	2301      	movs	r3, #1
 8015338:	77fb      	strb	r3, [r7, #31]
        Radio.SetTxConfig( modem, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 801533a:	4b29      	ldr	r3, [pc, #164]	@ (80153e0 <RegionAS923TxConfig+0x19c>)
 801533c:	69dc      	ldr	r4, [r3, #28]
 801533e:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8015342:	f997 1017 	ldrsb.w	r1, [r7, #23]
 8015346:	7ff8      	ldrb	r0, [r7, #31]
 8015348:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 801534c:	9208      	str	r2, [sp, #32]
 801534e:	2200      	movs	r2, #0
 8015350:	9207      	str	r2, [sp, #28]
 8015352:	2200      	movs	r2, #0
 8015354:	9206      	str	r2, [sp, #24]
 8015356:	2200      	movs	r2, #0
 8015358:	9205      	str	r2, [sp, #20]
 801535a:	2201      	movs	r2, #1
 801535c:	9204      	str	r2, [sp, #16]
 801535e:	2200      	movs	r2, #0
 8015360:	9203      	str	r2, [sp, #12]
 8015362:	2208      	movs	r2, #8
 8015364:	9202      	str	r2, [sp, #8]
 8015366:	2201      	movs	r2, #1
 8015368:	9201      	str	r2, [sp, #4]
 801536a:	9300      	str	r3, [sp, #0]
 801536c:	69bb      	ldr	r3, [r7, #24]
 801536e:	2200      	movs	r2, #0
 8015370:	47a0      	blx	r4
    }
    /* ST_WORKAROUND_BEGIN: Print Tx config */
    RegionCommonTxConfigPrint(RegionNvmGroup2->Channels[txConfig->Channel].Frequency, txConfig->Datarate);
 8015372:	4b19      	ldr	r3, [pc, #100]	@ (80153d8 <RegionAS923TxConfig+0x194>)
 8015374:	681a      	ldr	r2, [r3, #0]
 8015376:	68fb      	ldr	r3, [r7, #12]
 8015378:	781b      	ldrb	r3, [r3, #0]
 801537a:	4619      	mov	r1, r3
 801537c:	460b      	mov	r3, r1
 801537e:	005b      	lsls	r3, r3, #1
 8015380:	440b      	add	r3, r1
 8015382:	009b      	lsls	r3, r3, #2
 8015384:	4413      	add	r3, r2
 8015386:	681a      	ldr	r2, [r3, #0]
 8015388:	68fb      	ldr	r3, [r7, #12]
 801538a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801538e:	4619      	mov	r1, r3
 8015390:	4610      	mov	r0, r2
 8015392:	f001 fb05 	bl	80169a0 <RegionCommonTxConfigPrint>
    /* ST_WORKAROUND_END */

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 8015396:	68fb      	ldr	r3, [r7, #12]
 8015398:	f993 2001 	ldrsb.w	r2, [r3, #1]
 801539c:	68fb      	ldr	r3, [r7, #12]
 801539e:	899b      	ldrh	r3, [r3, #12]
 80153a0:	4619      	mov	r1, r3
 80153a2:	4610      	mov	r0, r2
 80153a4:	f7ff fa64 	bl	8014870 <GetTimeOnAir>
 80153a8:	4602      	mov	r2, r0
 80153aa:	687b      	ldr	r3, [r7, #4]
 80153ac:	601a      	str	r2, [r3, #0]

    // Setup maximum payload length of the radio driver
    Radio.SetMaxPayloadLength( modem, txConfig->PktLen );
 80153ae:	4b0c      	ldr	r3, [pc, #48]	@ (80153e0 <RegionAS923TxConfig+0x19c>)
 80153b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80153b2:	68fa      	ldr	r2, [r7, #12]
 80153b4:	8992      	ldrh	r2, [r2, #12]
 80153b6:	b2d1      	uxtb	r1, r2
 80153b8:	7ffa      	ldrb	r2, [r7, #31]
 80153ba:	4610      	mov	r0, r2
 80153bc:	4798      	blx	r3

    *txPower = txPowerLimited;
 80153be:	68bb      	ldr	r3, [r7, #8]
 80153c0:	7f7a      	ldrb	r2, [r7, #29]
 80153c2:	701a      	strb	r2, [r3, #0]
    return true;
 80153c4:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_AS923 */
}
 80153c6:	4618      	mov	r0, r3
 80153c8:	3724      	adds	r7, #36	@ 0x24
 80153ca:	46bd      	mov	sp, r7
 80153cc:	bd90      	pop	{r4, r7, pc}
 80153ce:	bf00      	nop
 80153d0:	0801c4bc 	.word	0x0801c4bc
 80153d4:	20001968 	.word	0x20001968
 80153d8:	20001964 	.word	0x20001964
 80153dc:	0801c4c4 	.word	0x0801c4c4
 80153e0:	0801c57c 	.word	0x0801c57c

080153e4 <RegionAS923LinkAdrReq>:

uint8_t RegionAS923LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 80153e4:	b590      	push	{r4, r7, lr}
 80153e6:	b093      	sub	sp, #76	@ 0x4c
 80153e8:	af00      	add	r7, sp, #0
 80153ea:	60f8      	str	r0, [r7, #12]
 80153ec:	60b9      	str	r1, [r7, #8]
 80153ee:	607a      	str	r2, [r7, #4]
 80153f0:	603b      	str	r3, [r7, #0]
    uint8_t status = 0x07;
 80153f2:	2307      	movs	r3, #7
 80153f4:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
#if defined( REGION_AS923 )
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 80153f8:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80153fc:	2200      	movs	r2, #0
 80153fe:	601a      	str	r2, [r3, #0]
 8015400:	809a      	strh	r2, [r3, #4]
    uint8_t nextIndex = 0;
 8015402:	2300      	movs	r3, #0
 8015404:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
    uint8_t bytesProcessed = 0;
 8015408:	2300      	movs	r3, #0
 801540a:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    uint16_t chMask = 0;
 801540e:	2300      	movs	r3, #0
 8015410:	877b      	strh	r3, [r7, #58]	@ 0x3a
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    while( bytesProcessed < linkAdrReq->PayloadSize )
 8015412:	e085      	b.n	8015520 <RegionAS923LinkAdrReq+0x13c>
    {
        // Get ADR request parameters
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 8015414:	68fb      	ldr	r3, [r7, #12]
 8015416:	685a      	ldr	r2, [r3, #4]
 8015418:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 801541c:	4413      	add	r3, r2
 801541e:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 8015422:	4611      	mov	r1, r2
 8015424:	4618      	mov	r0, r3
 8015426:	f000 ff0f 	bl	8016248 <RegionCommonParseLinkAdrReq>
 801542a:	4603      	mov	r3, r0
 801542c:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44

        if( nextIndex == 0 )
 8015430:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8015434:	2b00      	cmp	r3, #0
 8015436:	d07b      	beq.n	8015530 <RegionAS923LinkAdrReq+0x14c>
            break; // break loop, since no more request has been found

        // Update bytes processed
        bytesProcessed += nextIndex;
 8015438:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 801543c:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8015440:	4413      	add	r3, r2
 8015442:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46

        // Revert status, as we only check the last ADR request for the channel mask KO
        status = 0x07;
 8015446:	2307      	movs	r3, #7
 8015448:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47

        // Setup temporary channels mask
        chMask = linkAdrParams.ChMask;
 801544c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8015450:	877b      	strh	r3, [r7, #58]	@ 0x3a

        // Verify channels mask
        if( ( linkAdrParams.ChMaskCtrl == 0 ) && ( chMask == 0 ) )
 8015452:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8015456:	2b00      	cmp	r3, #0
 8015458:	d109      	bne.n	801546e <RegionAS923LinkAdrReq+0x8a>
 801545a:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801545c:	2b00      	cmp	r3, #0
 801545e:	d106      	bne.n	801546e <RegionAS923LinkAdrReq+0x8a>
        {
            status &= 0xFE; // Channel mask KO
 8015460:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8015464:	f023 0301 	bic.w	r3, r3, #1
 8015468:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 801546c:	e058      	b.n	8015520 <RegionAS923LinkAdrReq+0x13c>
        }
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 801546e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8015472:	2b00      	cmp	r3, #0
 8015474:	d003      	beq.n	801547e <RegionAS923LinkAdrReq+0x9a>
 8015476:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 801547a:	2b05      	cmp	r3, #5
 801547c:	d903      	bls.n	8015486 <RegionAS923LinkAdrReq+0xa2>
                ( linkAdrParams.ChMaskCtrl >= 7 ) )
 801547e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 8015482:	2b06      	cmp	r3, #6
 8015484:	d906      	bls.n	8015494 <RegionAS923LinkAdrReq+0xb0>
        {
            // RFU
            status &= 0xFE; // Channel mask KO
 8015486:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 801548a:	f023 0301 	bic.w	r3, r3, #1
 801548e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8015492:	e045      	b.n	8015520 <RegionAS923LinkAdrReq+0x13c>
        }
        else
        {
            for( uint8_t i = 0; i < AS923_MAX_NB_CHANNELS; i++ )
 8015494:	2300      	movs	r3, #0
 8015496:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
 801549a:	e03d      	b.n	8015518 <RegionAS923LinkAdrReq+0x134>
            {
                if( linkAdrParams.ChMaskCtrl == 6 )
 801549c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80154a0:	2b06      	cmp	r3, #6
 80154a2:	d118      	bne.n	80154d6 <RegionAS923LinkAdrReq+0xf2>
                {
                    if( RegionNvmGroup2->Channels[i].Frequency != 0 )
 80154a4:	4b5f      	ldr	r3, [pc, #380]	@ (8015624 <RegionAS923LinkAdrReq+0x240>)
 80154a6:	6819      	ldr	r1, [r3, #0]
 80154a8:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80154ac:	4613      	mov	r3, r2
 80154ae:	005b      	lsls	r3, r3, #1
 80154b0:	4413      	add	r3, r2
 80154b2:	009b      	lsls	r3, r3, #2
 80154b4:	440b      	add	r3, r1
 80154b6:	681b      	ldr	r3, [r3, #0]
 80154b8:	2b00      	cmp	r3, #0
 80154ba:	d028      	beq.n	801550e <RegionAS923LinkAdrReq+0x12a>
                    {
                        chMask |= 1 << i;
 80154bc:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 80154c0:	2201      	movs	r2, #1
 80154c2:	fa02 f303 	lsl.w	r3, r2, r3
 80154c6:	b21a      	sxth	r2, r3
 80154c8:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80154ca:	b21b      	sxth	r3, r3
 80154cc:	4313      	orrs	r3, r2
 80154ce:	b21b      	sxth	r3, r3
 80154d0:	b29b      	uxth	r3, r3
 80154d2:	877b      	strh	r3, [r7, #58]	@ 0x3a
 80154d4:	e01b      	b.n	801550e <RegionAS923LinkAdrReq+0x12a>
                    }
                }
                else
                {
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 80154d6:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80154d8:	461a      	mov	r2, r3
 80154da:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 80154de:	fa42 f303 	asr.w	r3, r2, r3
 80154e2:	f003 0301 	and.w	r3, r3, #1
 80154e6:	2b00      	cmp	r3, #0
 80154e8:	d011      	beq.n	801550e <RegionAS923LinkAdrReq+0x12a>
                        ( RegionNvmGroup2->Channels[i].Frequency == 0 ) )
 80154ea:	4b4e      	ldr	r3, [pc, #312]	@ (8015624 <RegionAS923LinkAdrReq+0x240>)
 80154ec:	6819      	ldr	r1, [r3, #0]
 80154ee:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80154f2:	4613      	mov	r3, r2
 80154f4:	005b      	lsls	r3, r3, #1
 80154f6:	4413      	add	r3, r2
 80154f8:	009b      	lsls	r3, r3, #2
 80154fa:	440b      	add	r3, r1
 80154fc:	681b      	ldr	r3, [r3, #0]
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 80154fe:	2b00      	cmp	r3, #0
 8015500:	d105      	bne.n	801550e <RegionAS923LinkAdrReq+0x12a>
                    {// Trying to enable an undefined channel
                        status &= 0xFE; // Channel mask KO
 8015502:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8015506:	f023 0301 	bic.w	r3, r3, #1
 801550a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
            for( uint8_t i = 0; i < AS923_MAX_NB_CHANNELS; i++ )
 801550e:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8015512:	3301      	adds	r3, #1
 8015514:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
 8015518:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 801551c:	2b0f      	cmp	r3, #15
 801551e:	d9bd      	bls.n	801549c <RegionAS923LinkAdrReq+0xb8>
    while( bytesProcessed < linkAdrReq->PayloadSize )
 8015520:	68fb      	ldr	r3, [r7, #12]
 8015522:	7a1b      	ldrb	r3, [r3, #8]
 8015524:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 8015528:	429a      	cmp	r2, r3
 801552a:	f4ff af73 	bcc.w	8015414 <RegionAS923LinkAdrReq+0x30>
 801552e:	e000      	b.n	8015532 <RegionAS923LinkAdrReq+0x14e>
            break; // break loop, since no more request has been found
 8015530:	bf00      	nop
            }
        }
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 8015532:	2302      	movs	r3, #2
 8015534:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 8015538:	68fb      	ldr	r3, [r7, #12]
 801553a:	7a5b      	ldrb	r3, [r3, #9]
 801553c:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    phyParam = RegionAS923GetPhyParam( &getPhy );
 8015540:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8015544:	4618      	mov	r0, r3
 8015546:	f7ff f9e3 	bl	8014910 <RegionAS923GetPhyParam>
 801554a:	4603      	mov	r3, r0
 801554c:	633b      	str	r3, [r7, #48]	@ 0x30

    linkAdrVerifyParams.Status = status;
 801554e:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8015552:	753b      	strb	r3, [r7, #20]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 8015554:	68fb      	ldr	r3, [r7, #12]
 8015556:	7a9b      	ldrb	r3, [r3, #10]
 8015558:	757b      	strb	r3, [r7, #21]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 801555a:	f997 303d 	ldrsb.w	r3, [r7, #61]	@ 0x3d
 801555e:	75bb      	strb	r3, [r7, #22]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 8015560:	f997 303e 	ldrsb.w	r3, [r7, #62]	@ 0x3e
 8015564:	75fb      	strb	r3, [r7, #23]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 8015566:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 801556a:	763b      	strb	r3, [r7, #24]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 801556c:	68fb      	ldr	r3, [r7, #12]
 801556e:	f993 300b 	ldrsb.w	r3, [r3, #11]
 8015572:	767b      	strb	r3, [r7, #25]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 8015574:	68fb      	ldr	r3, [r7, #12]
 8015576:	f993 300c 	ldrsb.w	r3, [r3, #12]
 801557a:	76bb      	strb	r3, [r7, #26]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 801557c:	68fb      	ldr	r3, [r7, #12]
 801557e:	7b5b      	ldrb	r3, [r3, #13]
 8015580:	b25b      	sxtb	r3, r3
 8015582:	76fb      	strb	r3, [r7, #27]
    linkAdrVerifyParams.NbChannels = AS923_MAX_NB_CHANNELS;
 8015584:	2310      	movs	r3, #16
 8015586:	773b      	strb	r3, [r7, #28]
    linkAdrVerifyParams.ChannelsMask = &chMask;
 8015588:	f107 033a 	add.w	r3, r7, #58	@ 0x3a
 801558c:	623b      	str	r3, [r7, #32]
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 801558e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015590:	b25b      	sxtb	r3, r3
 8015592:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
    linkAdrVerifyParams.MaxDatarate = AS923_TX_MAX_DATARATE;
 8015596:	2307      	movs	r3, #7
 8015598:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
    linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
 801559c:	4b21      	ldr	r3, [pc, #132]	@ (8015624 <RegionAS923LinkAdrReq+0x240>)
 801559e:	681b      	ldr	r3, [r3, #0]
 80155a0:	62bb      	str	r3, [r7, #40]	@ 0x28
    linkAdrVerifyParams.MinTxPower = AS923_MIN_TX_POWER;
 80155a2:	2307      	movs	r3, #7
 80155a4:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    linkAdrVerifyParams.MaxTxPower = AS923_MAX_TX_POWER;
 80155a8:	2300      	movs	r3, #0
 80155aa:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 80155ae:	68fb      	ldr	r3, [r7, #12]
 80155b0:	681b      	ldr	r3, [r3, #0]
 80155b2:	613b      	str	r3, [r7, #16]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 80155b4:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 80155b8:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80155bc:	1c9a      	adds	r2, r3, #2
 80155be:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80155c2:	1c59      	adds	r1, r3, #1
 80155c4:	f107 0010 	add.w	r0, r7, #16
 80155c8:	4623      	mov	r3, r4
 80155ca:	f000 fe8e 	bl	80162ea <RegionCommonLinkAdrReqVerifyParams>
 80155ce:	4603      	mov	r3, r0
 80155d0:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 80155d4:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80155d8:	2b07      	cmp	r3, #7
 80155da:	d10d      	bne.n	80155f8 <RegionAS923LinkAdrReq+0x214>
    {
        // Set the channels mask to a default value
        memset1( ( uint8_t* ) RegionNvmGroup2->ChannelsMask, 0, sizeof( RegionNvmGroup2->ChannelsMask ) );
 80155dc:	4b11      	ldr	r3, [pc, #68]	@ (8015624 <RegionAS923LinkAdrReq+0x240>)
 80155de:	681b      	ldr	r3, [r3, #0]
 80155e0:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 80155e4:	220c      	movs	r2, #12
 80155e6:	2100      	movs	r1, #0
 80155e8:	4618      	mov	r0, r3
 80155ea:	f001 fa73 	bl	8016ad4 <memset1>
        // Update the channels mask
        RegionNvmGroup2->ChannelsMask[0] = chMask;
 80155ee:	4b0d      	ldr	r3, [pc, #52]	@ (8015624 <RegionAS923LinkAdrReq+0x240>)
 80155f0:	681b      	ldr	r3, [r3, #0]
 80155f2:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 80155f4:	f8a3 2360 	strh.w	r2, [r3, #864]	@ 0x360
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 80155f8:	f997 203d 	ldrsb.w	r2, [r7, #61]	@ 0x3d
 80155fc:	68bb      	ldr	r3, [r7, #8]
 80155fe:	701a      	strb	r2, [r3, #0]
    *txPowOut = linkAdrParams.TxPower;
 8015600:	f997 203e 	ldrsb.w	r2, [r7, #62]	@ 0x3e
 8015604:	687b      	ldr	r3, [r7, #4]
 8015606:	701a      	strb	r2, [r3, #0]
    *nbRepOut = linkAdrParams.NbRep;
 8015608:	f897 203c 	ldrb.w	r2, [r7, #60]	@ 0x3c
 801560c:	683b      	ldr	r3, [r7, #0]
 801560e:	701a      	strb	r2, [r3, #0]
    *nbBytesParsed = bytesProcessed;
 8015610:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8015612:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 8015616:	701a      	strb	r2, [r3, #0]

#endif /* REGION_AS923 */
    return status;
 8015618:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 801561c:	4618      	mov	r0, r3
 801561e:	374c      	adds	r7, #76	@ 0x4c
 8015620:	46bd      	mov	sp, r7
 8015622:	bd90      	pop	{r4, r7, pc}
 8015624:	20001964 	.word	0x20001964

08015628 <RegionAS923RxParamSetupReq>:

uint8_t RegionAS923RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 8015628:	b580      	push	{r7, lr}
 801562a:	b084      	sub	sp, #16
 801562c:	af00      	add	r7, sp, #0
 801562e:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x07;
 8015630:	2307      	movs	r3, #7
 8015632:	73fb      	strb	r3, [r7, #15]
#if defined( REGION_AS923 )

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency ) == false )
 8015634:	687b      	ldr	r3, [r7, #4]
 8015636:	685b      	ldr	r3, [r3, #4]
 8015638:	4618      	mov	r0, r3
 801563a:	f7ff f8f3 	bl	8014824 <VerifyRfFreq>
 801563e:	4603      	mov	r3, r0
 8015640:	f083 0301 	eor.w	r3, r3, #1
 8015644:	b2db      	uxtb	r3, r3
 8015646:	2b00      	cmp	r3, #0
 8015648:	d003      	beq.n	8015652 <RegionAS923RxParamSetupReq+0x2a>
    {
        status &= 0xFE; // Channel frequency KO
 801564a:	7bfb      	ldrb	r3, [r7, #15]
 801564c:	f023 0301 	bic.w	r3, r3, #1
 8015650:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, AS923_RX_MIN_DATARATE, AS923_RX_MAX_DATARATE ) == false )
 8015652:	687b      	ldr	r3, [r7, #4]
 8015654:	f993 3000 	ldrsb.w	r3, [r3]
 8015658:	2207      	movs	r2, #7
 801565a:	2100      	movs	r1, #0
 801565c:	4618      	mov	r0, r3
 801565e:	f000 fc32 	bl	8015ec6 <RegionCommonValueInRange>
 8015662:	4603      	mov	r3, r0
 8015664:	2b00      	cmp	r3, #0
 8015666:	d103      	bne.n	8015670 <RegionAS923RxParamSetupReq+0x48>
    {
        status &= 0xFD; // Datarate KO
 8015668:	7bfb      	ldrb	r3, [r7, #15]
 801566a:	f023 0302 	bic.w	r3, r3, #2
 801566e:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, AS923_MIN_RX1_DR_OFFSET, AS923_MAX_RX1_DR_OFFSET ) == false )
 8015670:	687b      	ldr	r3, [r7, #4]
 8015672:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015676:	2207      	movs	r2, #7
 8015678:	2100      	movs	r1, #0
 801567a:	4618      	mov	r0, r3
 801567c:	f000 fc23 	bl	8015ec6 <RegionCommonValueInRange>
 8015680:	4603      	mov	r3, r0
 8015682:	2b00      	cmp	r3, #0
 8015684:	d103      	bne.n	801568e <RegionAS923RxParamSetupReq+0x66>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 8015686:	7bfb      	ldrb	r3, [r7, #15]
 8015688:	f023 0304 	bic.w	r3, r3, #4
 801568c:	73fb      	strb	r3, [r7, #15]
    }

#endif /* REGION_AS923 */
    return status;
 801568e:	7bfb      	ldrb	r3, [r7, #15]
}
 8015690:	4618      	mov	r0, r3
 8015692:	3710      	adds	r7, #16
 8015694:	46bd      	mov	sp, r7
 8015696:	bd80      	pop	{r7, pc}

08015698 <RegionAS923NewChannelReq>:

int8_t RegionAS923NewChannelReq( NewChannelReqParams_t* newChannelReq )
{
 8015698:	b580      	push	{r7, lr}
 801569a:	b086      	sub	sp, #24
 801569c:	af00      	add	r7, sp, #0
 801569e:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
 80156a0:	2303      	movs	r3, #3
 80156a2:	75fb      	strb	r3, [r7, #23]
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    if( newChannelReq->NewChannel->Frequency == 0 )
 80156a4:	687b      	ldr	r3, [r7, #4]
 80156a6:	681b      	ldr	r3, [r3, #0]
 80156a8:	681b      	ldr	r3, [r3, #0]
 80156aa:	2b00      	cmp	r3, #0
 80156ac:	d114      	bne.n	80156d8 <RegionAS923NewChannelReq+0x40>
    {
        channelRemove.ChannelId = newChannelReq->ChannelId;
 80156ae:	687b      	ldr	r3, [r7, #4]
 80156b0:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80156b4:	b2db      	uxtb	r3, r3
 80156b6:	723b      	strb	r3, [r7, #8]

        // Remove
        if( RegionAS923ChannelsRemove( &channelRemove ) == false )
 80156b8:	f107 0308 	add.w	r3, r7, #8
 80156bc:	4618      	mov	r0, r3
 80156be:	f000 f9eb 	bl	8015a98 <RegionAS923ChannelsRemove>
 80156c2:	4603      	mov	r3, r0
 80156c4:	f083 0301 	eor.w	r3, r3, #1
 80156c8:	b2db      	uxtb	r3, r3
 80156ca:	2b00      	cmp	r3, #0
 80156cc:	d03b      	beq.n	8015746 <RegionAS923NewChannelReq+0xae>
        {
            status &= 0xFC;
 80156ce:	7dfb      	ldrb	r3, [r7, #23]
 80156d0:	f023 0303 	bic.w	r3, r3, #3
 80156d4:	75fb      	strb	r3, [r7, #23]
 80156d6:	e036      	b.n	8015746 <RegionAS923NewChannelReq+0xae>
        }
    }
    else
    {
        channelAdd.NewChannel = newChannelReq->NewChannel;
 80156d8:	687b      	ldr	r3, [r7, #4]
 80156da:	681b      	ldr	r3, [r3, #0]
 80156dc:	60fb      	str	r3, [r7, #12]
        channelAdd.ChannelId = newChannelReq->ChannelId;
 80156de:	687b      	ldr	r3, [r7, #4]
 80156e0:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80156e4:	b2db      	uxtb	r3, r3
 80156e6:	743b      	strb	r3, [r7, #16]

        switch( RegionAS923ChannelAdd( &channelAdd ) )
 80156e8:	f107 030c 	add.w	r3, r7, #12
 80156ec:	4618      	mov	r0, r3
 80156ee:	f000 f937 	bl	8015960 <RegionAS923ChannelAdd>
 80156f2:	4603      	mov	r3, r0
 80156f4:	2b06      	cmp	r3, #6
 80156f6:	d820      	bhi.n	801573a <RegionAS923NewChannelReq+0xa2>
 80156f8:	a201      	add	r2, pc, #4	@ (adr r2, 8015700 <RegionAS923NewChannelReq+0x68>)
 80156fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80156fe:	bf00      	nop
 8015700:	08015745 	.word	0x08015745
 8015704:	0801573b 	.word	0x0801573b
 8015708:	0801573b 	.word	0x0801573b
 801570c:	0801573b 	.word	0x0801573b
 8015710:	0801571d 	.word	0x0801571d
 8015714:	08015727 	.word	0x08015727
 8015718:	08015731 	.word	0x08015731
            {
                break;
            }
            case LORAMAC_STATUS_FREQUENCY_INVALID:
            {
                status &= 0xFE;
 801571c:	7dfb      	ldrb	r3, [r7, #23]
 801571e:	f023 0301 	bic.w	r3, r3, #1
 8015722:	75fb      	strb	r3, [r7, #23]
                break;
 8015724:	e00f      	b.n	8015746 <RegionAS923NewChannelReq+0xae>
            }
            case LORAMAC_STATUS_DATARATE_INVALID:
            {
                status &= 0xFD;
 8015726:	7dfb      	ldrb	r3, [r7, #23]
 8015728:	f023 0302 	bic.w	r3, r3, #2
 801572c:	75fb      	strb	r3, [r7, #23]
                break;
 801572e:	e00a      	b.n	8015746 <RegionAS923NewChannelReq+0xae>
            }
            case LORAMAC_STATUS_FREQ_AND_DR_INVALID:
            {
                status &= 0xFC;
 8015730:	7dfb      	ldrb	r3, [r7, #23]
 8015732:	f023 0303 	bic.w	r3, r3, #3
 8015736:	75fb      	strb	r3, [r7, #23]
                break;
 8015738:	e005      	b.n	8015746 <RegionAS923NewChannelReq+0xae>
            }
            default:
            {
                status &= 0xFC;
 801573a:	7dfb      	ldrb	r3, [r7, #23]
 801573c:	f023 0303 	bic.w	r3, r3, #3
 8015740:	75fb      	strb	r3, [r7, #23]
                break;
 8015742:	e000      	b.n	8015746 <RegionAS923NewChannelReq+0xae>
                break;
 8015744:	bf00      	nop
            }
        }
    }

    return status;
 8015746:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801574a:	4618      	mov	r0, r3
 801574c:	3718      	adds	r7, #24
 801574e:	46bd      	mov	sp, r7
 8015750:	bd80      	pop	{r7, pc}
 8015752:	bf00      	nop

08015754 <RegionAS923TxParamSetupReq>:

int8_t RegionAS923TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
 8015754:	b480      	push	{r7}
 8015756:	b083      	sub	sp, #12
 8015758:	af00      	add	r7, sp, #0
 801575a:	6078      	str	r0, [r7, #4]
    // Accept the request
    return 0;
 801575c:	2300      	movs	r3, #0
}
 801575e:	4618      	mov	r0, r3
 8015760:	370c      	adds	r7, #12
 8015762:	46bd      	mov	sp, r7
 8015764:	bc80      	pop	{r7}
 8015766:	4770      	bx	lr

08015768 <RegionAS923DlChannelReq>:

int8_t RegionAS923DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
 8015768:	b580      	push	{r7, lr}
 801576a:	b084      	sub	sp, #16
 801576c:	af00      	add	r7, sp, #0
 801576e:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
 8015770:	2303      	movs	r3, #3
 8015772:	73fb      	strb	r3, [r7, #15]

#if defined( REGION_AS923 )
    // Verify if the frequency is supported
    if( VerifyRfFreq( dlChannelReq->Rx1Frequency ) == false )
 8015774:	687b      	ldr	r3, [r7, #4]
 8015776:	685b      	ldr	r3, [r3, #4]
 8015778:	4618      	mov	r0, r3
 801577a:	f7ff f853 	bl	8014824 <VerifyRfFreq>
 801577e:	4603      	mov	r3, r0
 8015780:	f083 0301 	eor.w	r3, r3, #1
 8015784:	b2db      	uxtb	r3, r3
 8015786:	2b00      	cmp	r3, #0
 8015788:	d003      	beq.n	8015792 <RegionAS923DlChannelReq+0x2a>
    {
        status &= 0xFE;
 801578a:	7bfb      	ldrb	r3, [r7, #15]
 801578c:	f023 0301 	bic.w	r3, r3, #1
 8015790:	73fb      	strb	r3, [r7, #15]
    }

    // Verify if an uplink frequency exists
    if( RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Frequency == 0 )
 8015792:	4b14      	ldr	r3, [pc, #80]	@ (80157e4 <RegionAS923DlChannelReq+0x7c>)
 8015794:	681a      	ldr	r2, [r3, #0]
 8015796:	687b      	ldr	r3, [r7, #4]
 8015798:	781b      	ldrb	r3, [r3, #0]
 801579a:	4619      	mov	r1, r3
 801579c:	460b      	mov	r3, r1
 801579e:	005b      	lsls	r3, r3, #1
 80157a0:	440b      	add	r3, r1
 80157a2:	009b      	lsls	r3, r3, #2
 80157a4:	4413      	add	r3, r2
 80157a6:	681b      	ldr	r3, [r3, #0]
 80157a8:	2b00      	cmp	r3, #0
 80157aa:	d103      	bne.n	80157b4 <RegionAS923DlChannelReq+0x4c>
    {
        status &= 0xFD;
 80157ac:	7bfb      	ldrb	r3, [r7, #15]
 80157ae:	f023 0302 	bic.w	r3, r3, #2
 80157b2:	73fb      	strb	r3, [r7, #15]
    }

    // Apply Rx1 frequency, if the status is OK
    if( status == 0x03 )
 80157b4:	7bfb      	ldrb	r3, [r7, #15]
 80157b6:	2b03      	cmp	r3, #3
 80157b8:	d10d      	bne.n	80157d6 <RegionAS923DlChannelReq+0x6e>
    {
        RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
 80157ba:	4b0a      	ldr	r3, [pc, #40]	@ (80157e4 <RegionAS923DlChannelReq+0x7c>)
 80157bc:	6819      	ldr	r1, [r3, #0]
 80157be:	687b      	ldr	r3, [r7, #4]
 80157c0:	781b      	ldrb	r3, [r3, #0]
 80157c2:	4618      	mov	r0, r3
 80157c4:	687b      	ldr	r3, [r7, #4]
 80157c6:	685a      	ldr	r2, [r3, #4]
 80157c8:	4603      	mov	r3, r0
 80157ca:	005b      	lsls	r3, r3, #1
 80157cc:	4403      	add	r3, r0
 80157ce:	009b      	lsls	r3, r3, #2
 80157d0:	440b      	add	r3, r1
 80157d2:	3304      	adds	r3, #4
 80157d4:	601a      	str	r2, [r3, #0]
    }

#endif /* REGION_AS923 */
    return status;
 80157d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80157da:	4618      	mov	r0, r3
 80157dc:	3710      	adds	r7, #16
 80157de:	46bd      	mov	sp, r7
 80157e0:	bd80      	pop	{r7, pc}
 80157e2:	bf00      	nop
 80157e4:	20001964 	.word	0x20001964

080157e8 <RegionAS923AlternateDr>:

int8_t RegionAS923AlternateDr( int8_t currentDr, AlternateDrType_t type )
{
 80157e8:	b480      	push	{r7}
 80157ea:	b083      	sub	sp, #12
 80157ec:	af00      	add	r7, sp, #0
 80157ee:	4603      	mov	r3, r0
 80157f0:	460a      	mov	r2, r1
 80157f2:	71fb      	strb	r3, [r7, #7]
 80157f4:	4613      	mov	r3, r2
 80157f6:	71bb      	strb	r3, [r7, #6]
#if defined( REGION_AS923 )
    // Only AS923_DWELL_LIMIT_DATARATE is supported
    return AS923_DWELL_LIMIT_DATARATE;
 80157f8:	2302      	movs	r3, #2
#else
    return -1;
#endif /* REGION_AS923 */
}
 80157fa:	4618      	mov	r0, r3
 80157fc:	370c      	adds	r7, #12
 80157fe:	46bd      	mov	sp, r7
 8015800:	bc80      	pop	{r7}
 8015802:	4770      	bx	lr

08015804 <RegionAS923NextChannel>:

LoRaMacStatus_t RegionAS923NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 8015804:	b580      	push	{r7, lr}
 8015806:	b09a      	sub	sp, #104	@ 0x68
 8015808:	af02      	add	r7, sp, #8
 801580a:	60f8      	str	r0, [r7, #12]
 801580c:	60b9      	str	r1, [r7, #8]
 801580e:	607a      	str	r2, [r7, #4]
 8015810:	603b      	str	r3, [r7, #0]
#if defined( REGION_AS923 )
    uint8_t nbEnabledChannels = 0;
 8015812:	2300      	movs	r3, #0
 8015814:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
    uint8_t nbRestrictedChannels = 0;
 8015818:	2300      	movs	r3, #0
 801581a:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
    uint8_t enabledChannels[AS923_MAX_NB_CHANNELS] = { 0 };
 801581e:	2300      	movs	r3, #0
 8015820:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8015822:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8015826:	2200      	movs	r2, #0
 8015828:	601a      	str	r2, [r3, #0]
 801582a:	605a      	str	r2, [r3, #4]
 801582c:	609a      	str	r2, [r3, #8]
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;
 801582e:	230c      	movs	r3, #12
 8015830:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
    uint16_t joinChannels = AS923_JOIN_CHANNELS;
 8015834:	2303      	movs	r3, #3
 8015836:	827b      	strh	r3, [r7, #18]

    if( RegionCommonCountChannels( RegionNvmGroup2->ChannelsMask, 0, 1 ) == 0 )
 8015838:	4b47      	ldr	r3, [pc, #284]	@ (8015958 <RegionAS923NextChannel+0x154>)
 801583a:	681b      	ldr	r3, [r3, #0]
 801583c:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8015840:	2201      	movs	r2, #1
 8015842:	2100      	movs	r1, #0
 8015844:	4618      	mov	r0, r3
 8015846:	f000 fb8f 	bl	8015f68 <RegionCommonCountChannels>
 801584a:	4603      	mov	r3, r0
 801584c:	2b00      	cmp	r3, #0
 801584e:	d10a      	bne.n	8015866 <RegionAS923NextChannel+0x62>
    { // Reactivate default channels
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 );
 8015850:	4b41      	ldr	r3, [pc, #260]	@ (8015958 <RegionAS923NextChannel+0x154>)
 8015852:	681b      	ldr	r3, [r3, #0]
 8015854:	f8b3 2360 	ldrh.w	r2, [r3, #864]	@ 0x360
 8015858:	4b3f      	ldr	r3, [pc, #252]	@ (8015958 <RegionAS923NextChannel+0x154>)
 801585a:	681b      	ldr	r3, [r3, #0]
 801585c:	f042 0203 	orr.w	r2, r2, #3
 8015860:	b292      	uxth	r2, r2
 8015862:	f8a3 2360 	strh.w	r2, [r3, #864]	@ 0x360
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
 8015866:	68fb      	ldr	r3, [r7, #12]
 8015868:	7a5b      	ldrb	r3, [r3, #9]
 801586a:	753b      	strb	r3, [r7, #20]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 801586c:	68fb      	ldr	r3, [r7, #12]
 801586e:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8015872:	b2db      	uxtb	r3, r3
 8015874:	757b      	strb	r3, [r7, #21]
    countChannelsParams.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 8015876:	4b38      	ldr	r3, [pc, #224]	@ (8015958 <RegionAS923NextChannel+0x154>)
 8015878:	681b      	ldr	r3, [r3, #0]
 801587a:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 801587e:	61bb      	str	r3, [r7, #24]
    countChannelsParams.Channels = RegionNvmGroup2->Channels;
 8015880:	4b35      	ldr	r3, [pc, #212]	@ (8015958 <RegionAS923NextChannel+0x154>)
 8015882:	681b      	ldr	r3, [r3, #0]
 8015884:	61fb      	str	r3, [r7, #28]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    countChannelsParams.Bands = RegionNvmGroup1->Bands;
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    countChannelsParams.Bands = RegionBands;
 8015886:	4b35      	ldr	r3, [pc, #212]	@ (801595c <RegionAS923NextChannel+0x158>)
 8015888:	681b      	ldr	r3, [r3, #0]
 801588a:	623b      	str	r3, [r7, #32]
#endif /* REGION_VERSION */
    countChannelsParams.MaxNbChannels = AS923_MAX_NB_CHANNELS;
 801588c:	2310      	movs	r3, #16
 801588e:	84bb      	strh	r3, [r7, #36]	@ 0x24
    countChannelsParams.JoinChannels = &joinChannels;
 8015890:	f107 0312 	add.w	r3, r7, #18
 8015894:	62bb      	str	r3, [r7, #40]	@ 0x28

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 8015896:	68fb      	ldr	r3, [r7, #12]
 8015898:	681b      	ldr	r3, [r3, #0]
 801589a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 801589c:	68fb      	ldr	r3, [r7, #12]
 801589e:	685b      	ldr	r3, [r3, #4]
 80158a0:	633b      	str	r3, [r7, #48]	@ 0x30
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 80158a2:	68fb      	ldr	r3, [r7, #12]
 80158a4:	7a9b      	ldrb	r3, [r3, #10]
 80158a6:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
    identifyChannelsParam.MaxBands = AS923_MAX_NB_BANDS;
 80158aa:	2301      	movs	r3, #1
 80158ac:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35

    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 80158b0:	68fa      	ldr	r2, [r7, #12]
 80158b2:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80158b6:	320c      	adds	r2, #12
 80158b8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80158bc:	e883 0003 	stmia.w	r3, {r0, r1}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 80158c0:	68fb      	ldr	r3, [r7, #12]
 80158c2:	7d1b      	ldrb	r3, [r3, #20]
 80158c4:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 80158c8:	68fb      	ldr	r3, [r7, #12]
 80158ca:	f993 2008 	ldrsb.w	r2, [r3, #8]
 80158ce:	68fb      	ldr	r3, [r7, #12]
 80158d0:	8adb      	ldrh	r3, [r3, #22]
 80158d2:	4619      	mov	r1, r3
 80158d4:	4610      	mov	r0, r2
 80158d6:	f7fe ffcb 	bl	8014870 <GetTimeOnAir>
 80158da:	4603      	mov	r3, r0
 80158dc:	647b      	str	r3, [r7, #68]	@ 0x44

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 80158de:	f107 0314 	add.w	r3, r7, #20
 80158e2:	64bb      	str	r3, [r7, #72]	@ 0x48

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 80158e4:	f107 015e 	add.w	r1, r7, #94	@ 0x5e
 80158e8:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 80158ec:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 80158f0:	687b      	ldr	r3, [r7, #4]
 80158f2:	9301      	str	r3, [sp, #4]
 80158f4:	f107 035d 	add.w	r3, r7, #93	@ 0x5d
 80158f8:	9300      	str	r3, [sp, #0]
 80158fa:	460b      	mov	r3, r1
 80158fc:	6839      	ldr	r1, [r7, #0]
 80158fe:	f000 ff4a 	bl	8016796 <RegionCommonIdentifyChannels>
 8015902:	4603      	mov	r3, r0
 8015904:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 8015908:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801590c:	2b00      	cmp	r3, #0
 801590e:	d10e      	bne.n	801592e <RegionAS923NextChannel+0x12a>
        // Even if one or more channels are available according to the channel plan, no free channel
        // was found during the LBT procedure.
        status = LORAMAC_STATUS_NO_FREE_CHANNEL_FOUND;
#else
        // We found a valid channel
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 8015910:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 8015914:	3b01      	subs	r3, #1
 8015916:	4619      	mov	r1, r3
 8015918:	2000      	movs	r0, #0
 801591a:	f001 f889 	bl	8016a30 <randr>
 801591e:	4603      	mov	r3, r0
 8015920:	3360      	adds	r3, #96	@ 0x60
 8015922:	443b      	add	r3, r7
 8015924:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 8015928:	68bb      	ldr	r3, [r7, #8]
 801592a:	701a      	strb	r2, [r3, #0]
 801592c:	e00e      	b.n	801594c <RegionAS923NextChannel+0x148>
#endif
    }
    else if( status == LORAMAC_STATUS_NO_CHANNEL_FOUND )
 801592e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8015932:	2b0c      	cmp	r3, #12
 8015934:	d10a      	bne.n	801594c <RegionAS923NextChannel+0x148>
    {
        // Datarate not supported by any channel, restore defaults
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 );
 8015936:	4b08      	ldr	r3, [pc, #32]	@ (8015958 <RegionAS923NextChannel+0x154>)
 8015938:	681b      	ldr	r3, [r3, #0]
 801593a:	f8b3 2360 	ldrh.w	r2, [r3, #864]	@ 0x360
 801593e:	4b06      	ldr	r3, [pc, #24]	@ (8015958 <RegionAS923NextChannel+0x154>)
 8015940:	681b      	ldr	r3, [r3, #0]
 8015942:	f042 0203 	orr.w	r2, r2, #3
 8015946:	b292      	uxth	r2, r2
 8015948:	f8a3 2360 	strh.w	r2, [r3, #864]	@ 0x360
    }
    return status;
 801594c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_AS923 */
}
 8015950:	4618      	mov	r0, r3
 8015952:	3760      	adds	r7, #96	@ 0x60
 8015954:	46bd      	mov	sp, r7
 8015956:	bd80      	pop	{r7, pc}
 8015958:	20001964 	.word	0x20001964
 801595c:	20001968 	.word	0x20001968

08015960 <RegionAS923ChannelAdd>:

LoRaMacStatus_t RegionAS923ChannelAdd( ChannelAddParams_t* channelAdd )
{
 8015960:	b580      	push	{r7, lr}
 8015962:	b084      	sub	sp, #16
 8015964:	af00      	add	r7, sp, #0
 8015966:	6078      	str	r0, [r7, #4]
#if defined( REGION_AS923 )
    bool drInvalid = false;
 8015968:	2300      	movs	r3, #0
 801596a:	73fb      	strb	r3, [r7, #15]
    bool freqInvalid = false;
 801596c:	2300      	movs	r3, #0
 801596e:	73bb      	strb	r3, [r7, #14]
    uint8_t id = channelAdd->ChannelId;
 8015970:	687b      	ldr	r3, [r7, #4]
 8015972:	791b      	ldrb	r3, [r3, #4]
 8015974:	737b      	strb	r3, [r7, #13]

    if( id < AS923_NUMB_DEFAULT_CHANNELS )
 8015976:	7b7b      	ldrb	r3, [r7, #13]
 8015978:	2b01      	cmp	r3, #1
 801597a:	d801      	bhi.n	8015980 <RegionAS923ChannelAdd+0x20>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 801597c:	2306      	movs	r3, #6
 801597e:	e085      	b.n	8015a8c <RegionAS923ChannelAdd+0x12c>
    }

    if( id >= AS923_MAX_NB_CHANNELS )
 8015980:	7b7b      	ldrb	r3, [r7, #13]
 8015982:	2b0f      	cmp	r3, #15
 8015984:	d901      	bls.n	801598a <RegionAS923ChannelAdd+0x2a>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8015986:	2303      	movs	r3, #3
 8015988:	e080      	b.n	8015a8c <RegionAS923ChannelAdd+0x12c>
    }

    // Validate the datarate range
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Min, AS923_TX_MIN_DATARATE, AS923_TX_MAX_DATARATE ) == false )
 801598a:	687b      	ldr	r3, [r7, #4]
 801598c:	681b      	ldr	r3, [r3, #0]
 801598e:	7a1b      	ldrb	r3, [r3, #8]
 8015990:	f343 0303 	sbfx	r3, r3, #0, #4
 8015994:	b25b      	sxtb	r3, r3
 8015996:	2207      	movs	r2, #7
 8015998:	2100      	movs	r1, #0
 801599a:	4618      	mov	r0, r3
 801599c:	f000 fa93 	bl	8015ec6 <RegionCommonValueInRange>
 80159a0:	4603      	mov	r3, r0
 80159a2:	2b00      	cmp	r3, #0
 80159a4:	d101      	bne.n	80159aa <RegionAS923ChannelAdd+0x4a>
    {
        drInvalid = true;
 80159a6:	2301      	movs	r3, #1
 80159a8:	73fb      	strb	r3, [r7, #15]
    }
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Max, AS923_TX_MIN_DATARATE, AS923_TX_MAX_DATARATE ) == false )
 80159aa:	687b      	ldr	r3, [r7, #4]
 80159ac:	681b      	ldr	r3, [r3, #0]
 80159ae:	7a1b      	ldrb	r3, [r3, #8]
 80159b0:	f343 1303 	sbfx	r3, r3, #4, #4
 80159b4:	b25b      	sxtb	r3, r3
 80159b6:	2207      	movs	r2, #7
 80159b8:	2100      	movs	r1, #0
 80159ba:	4618      	mov	r0, r3
 80159bc:	f000 fa83 	bl	8015ec6 <RegionCommonValueInRange>
 80159c0:	4603      	mov	r3, r0
 80159c2:	2b00      	cmp	r3, #0
 80159c4:	d101      	bne.n	80159ca <RegionAS923ChannelAdd+0x6a>
    {
        drInvalid = true;
 80159c6:	2301      	movs	r3, #1
 80159c8:	73fb      	strb	r3, [r7, #15]
    }
    if( channelAdd->NewChannel->DrRange.Fields.Min > channelAdd->NewChannel->DrRange.Fields.Max )
 80159ca:	687b      	ldr	r3, [r7, #4]
 80159cc:	681b      	ldr	r3, [r3, #0]
 80159ce:	7a1b      	ldrb	r3, [r3, #8]
 80159d0:	f343 0303 	sbfx	r3, r3, #0, #4
 80159d4:	b25a      	sxtb	r2, r3
 80159d6:	687b      	ldr	r3, [r7, #4]
 80159d8:	681b      	ldr	r3, [r3, #0]
 80159da:	7a1b      	ldrb	r3, [r3, #8]
 80159dc:	f343 1303 	sbfx	r3, r3, #4, #4
 80159e0:	b25b      	sxtb	r3, r3
 80159e2:	429a      	cmp	r2, r3
 80159e4:	dd01      	ble.n	80159ea <RegionAS923ChannelAdd+0x8a>
    {
        drInvalid = true;
 80159e6:	2301      	movs	r3, #1
 80159e8:	73fb      	strb	r3, [r7, #15]
    }

    // Check frequency
    if( freqInvalid == false )
 80159ea:	7bbb      	ldrb	r3, [r7, #14]
 80159ec:	f083 0301 	eor.w	r3, r3, #1
 80159f0:	b2db      	uxtb	r3, r3
 80159f2:	2b00      	cmp	r3, #0
 80159f4:	d00d      	beq.n	8015a12 <RegionAS923ChannelAdd+0xb2>
    {
        if( VerifyRfFreq( channelAdd->NewChannel->Frequency ) == false )
 80159f6:	687b      	ldr	r3, [r7, #4]
 80159f8:	681b      	ldr	r3, [r3, #0]
 80159fa:	681b      	ldr	r3, [r3, #0]
 80159fc:	4618      	mov	r0, r3
 80159fe:	f7fe ff11 	bl	8014824 <VerifyRfFreq>
 8015a02:	4603      	mov	r3, r0
 8015a04:	f083 0301 	eor.w	r3, r3, #1
 8015a08:	b2db      	uxtb	r3, r3
 8015a0a:	2b00      	cmp	r3, #0
 8015a0c:	d001      	beq.n	8015a12 <RegionAS923ChannelAdd+0xb2>
        {
            freqInvalid = true;
 8015a0e:	2301      	movs	r3, #1
 8015a10:	73bb      	strb	r3, [r7, #14]
        }
    }

    // Check status
    if( ( drInvalid == true ) && ( freqInvalid == true ) )
 8015a12:	7bfb      	ldrb	r3, [r7, #15]
 8015a14:	2b00      	cmp	r3, #0
 8015a16:	d004      	beq.n	8015a22 <RegionAS923ChannelAdd+0xc2>
 8015a18:	7bbb      	ldrb	r3, [r7, #14]
 8015a1a:	2b00      	cmp	r3, #0
 8015a1c:	d001      	beq.n	8015a22 <RegionAS923ChannelAdd+0xc2>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 8015a1e:	2306      	movs	r3, #6
 8015a20:	e034      	b.n	8015a8c <RegionAS923ChannelAdd+0x12c>
    }
    if( drInvalid == true )
 8015a22:	7bfb      	ldrb	r3, [r7, #15]
 8015a24:	2b00      	cmp	r3, #0
 8015a26:	d001      	beq.n	8015a2c <RegionAS923ChannelAdd+0xcc>
    {
        return LORAMAC_STATUS_DATARATE_INVALID;
 8015a28:	2305      	movs	r3, #5
 8015a2a:	e02f      	b.n	8015a8c <RegionAS923ChannelAdd+0x12c>
    }
    if( freqInvalid == true )
 8015a2c:	7bbb      	ldrb	r3, [r7, #14]
 8015a2e:	2b00      	cmp	r3, #0
 8015a30:	d001      	beq.n	8015a36 <RegionAS923ChannelAdd+0xd6>
    {
        return LORAMAC_STATUS_FREQUENCY_INVALID;
 8015a32:	2304      	movs	r3, #4
 8015a34:	e02a      	b.n	8015a8c <RegionAS923ChannelAdd+0x12c>
    }

    memcpy1( ( uint8_t* ) &(RegionNvmGroup2->Channels[id]), ( uint8_t* ) channelAdd->NewChannel, sizeof( RegionNvmGroup2->Channels[id] ) );
 8015a36:	4b17      	ldr	r3, [pc, #92]	@ (8015a94 <RegionAS923ChannelAdd+0x134>)
 8015a38:	6819      	ldr	r1, [r3, #0]
 8015a3a:	7b7a      	ldrb	r2, [r7, #13]
 8015a3c:	4613      	mov	r3, r2
 8015a3e:	005b      	lsls	r3, r3, #1
 8015a40:	4413      	add	r3, r2
 8015a42:	009b      	lsls	r3, r3, #2
 8015a44:	18c8      	adds	r0, r1, r3
 8015a46:	687b      	ldr	r3, [r7, #4]
 8015a48:	681b      	ldr	r3, [r3, #0]
 8015a4a:	220c      	movs	r2, #12
 8015a4c:	4619      	mov	r1, r3
 8015a4e:	f001 f806 	bl	8016a5e <memcpy1>
    RegionNvmGroup2->Channels[id].Band = 0;
 8015a52:	4b10      	ldr	r3, [pc, #64]	@ (8015a94 <RegionAS923ChannelAdd+0x134>)
 8015a54:	6819      	ldr	r1, [r3, #0]
 8015a56:	7b7a      	ldrb	r2, [r7, #13]
 8015a58:	4613      	mov	r3, r2
 8015a5a:	005b      	lsls	r3, r3, #1
 8015a5c:	4413      	add	r3, r2
 8015a5e:	009b      	lsls	r3, r3, #2
 8015a60:	440b      	add	r3, r1
 8015a62:	3309      	adds	r3, #9
 8015a64:	2200      	movs	r2, #0
 8015a66:	701a      	strb	r2, [r3, #0]
    RegionNvmGroup2->ChannelsMask[0] |= ( 1 << id );
 8015a68:	4b0a      	ldr	r3, [pc, #40]	@ (8015a94 <RegionAS923ChannelAdd+0x134>)
 8015a6a:	681b      	ldr	r3, [r3, #0]
 8015a6c:	f8b3 3360 	ldrh.w	r3, [r3, #864]	@ 0x360
 8015a70:	b21a      	sxth	r2, r3
 8015a72:	7b7b      	ldrb	r3, [r7, #13]
 8015a74:	2101      	movs	r1, #1
 8015a76:	fa01 f303 	lsl.w	r3, r1, r3
 8015a7a:	b21b      	sxth	r3, r3
 8015a7c:	4313      	orrs	r3, r2
 8015a7e:	b21a      	sxth	r2, r3
 8015a80:	4b04      	ldr	r3, [pc, #16]	@ (8015a94 <RegionAS923ChannelAdd+0x134>)
 8015a82:	681b      	ldr	r3, [r3, #0]
 8015a84:	b292      	uxth	r2, r2
 8015a86:	f8a3 2360 	strh.w	r2, [r3, #864]	@ 0x360
    return LORAMAC_STATUS_OK;
 8015a8a:	2300      	movs	r3, #0
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_AS923 */
}
 8015a8c:	4618      	mov	r0, r3
 8015a8e:	3710      	adds	r7, #16
 8015a90:	46bd      	mov	sp, r7
 8015a92:	bd80      	pop	{r7, pc}
 8015a94:	20001964 	.word	0x20001964

08015a98 <RegionAS923ChannelsRemove>:

bool RegionAS923ChannelsRemove( ChannelRemoveParams_t* channelRemove  )
{
 8015a98:	b580      	push	{r7, lr}
 8015a9a:	b086      	sub	sp, #24
 8015a9c:	af00      	add	r7, sp, #0
 8015a9e:	6078      	str	r0, [r7, #4]
#if defined( REGION_AS923 )
    uint8_t id = channelRemove->ChannelId;
 8015aa0:	687b      	ldr	r3, [r7, #4]
 8015aa2:	781b      	ldrb	r3, [r3, #0]
 8015aa4:	75fb      	strb	r3, [r7, #23]

    if( id < AS923_NUMB_DEFAULT_CHANNELS )
 8015aa6:	7dfb      	ldrb	r3, [r7, #23]
 8015aa8:	2b01      	cmp	r3, #1
 8015aaa:	d801      	bhi.n	8015ab0 <RegionAS923ChannelsRemove+0x18>
    {
        return false;
 8015aac:	2300      	movs	r3, #0
 8015aae:	e016      	b.n	8015ade <RegionAS923ChannelsRemove+0x46>
    }

    // Remove the channel from the list of channels
    RegionNvmGroup2->Channels[id] = ( ChannelParams_t ){ 0, 0, { 0 }, 0 };
 8015ab0:	4b0d      	ldr	r3, [pc, #52]	@ (8015ae8 <RegionAS923ChannelsRemove+0x50>)
 8015ab2:	6819      	ldr	r1, [r3, #0]
 8015ab4:	7dfa      	ldrb	r2, [r7, #23]
 8015ab6:	4613      	mov	r3, r2
 8015ab8:	005b      	lsls	r3, r3, #1
 8015aba:	4413      	add	r3, r2
 8015abc:	009b      	lsls	r3, r3, #2
 8015abe:	440b      	add	r3, r1
 8015ac0:	461a      	mov	r2, r3
 8015ac2:	2300      	movs	r3, #0
 8015ac4:	6013      	str	r3, [r2, #0]
 8015ac6:	6053      	str	r3, [r2, #4]
 8015ac8:	6093      	str	r3, [r2, #8]

    return RegionCommonChanDisable( RegionNvmGroup2->ChannelsMask, id, AS923_MAX_NB_CHANNELS );
 8015aca:	4b07      	ldr	r3, [pc, #28]	@ (8015ae8 <RegionAS923ChannelsRemove+0x50>)
 8015acc:	681b      	ldr	r3, [r3, #0]
 8015ace:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8015ad2:	7df9      	ldrb	r1, [r7, #23]
 8015ad4:	2210      	movs	r2, #16
 8015ad6:	4618      	mov	r0, r3
 8015ad8:	f000 fa12 	bl	8015f00 <RegionCommonChanDisable>
 8015adc:	4603      	mov	r3, r0
#else
    return false;
#endif /* REGION_AS923 */
}
 8015ade:	4618      	mov	r0, r3
 8015ae0:	3718      	adds	r7, #24
 8015ae2:	46bd      	mov	sp, r7
 8015ae4:	bd80      	pop	{r7, pc}
 8015ae6:	bf00      	nop
 8015ae8:	20001964 	.word	0x20001964

08015aec <RegionAS923ApplyDrOffset>:
#endif /* REGION_AS923 */

}
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
uint8_t RegionAS923ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 8015aec:	b480      	push	{r7}
 8015aee:	b085      	sub	sp, #20
 8015af0:	af00      	add	r7, sp, #0
 8015af2:	4603      	mov	r3, r0
 8015af4:	71fb      	strb	r3, [r7, #7]
 8015af6:	460b      	mov	r3, r1
 8015af8:	71bb      	strb	r3, [r7, #6]
 8015afa:	4613      	mov	r3, r2
 8015afc:	717b      	strb	r3, [r7, #5]
#if defined( REGION_AS923 )
    // Initialize minDr
    int8_t minDr;

    if( downlinkDwellTime == 0 )
 8015afe:	79fb      	ldrb	r3, [r7, #7]
 8015b00:	2b00      	cmp	r3, #0
 8015b02:	d10a      	bne.n	8015b1a <RegionAS923ApplyDrOffset+0x2e>
    {
        // Update the minDR for a downlink dwell time configuration of 0
        minDr = EffectiveRx1DrOffsetDownlinkDwell0AS923[dr][drOffset];
 8015b04:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8015b08:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8015b0c:	490b      	ldr	r1, [pc, #44]	@ (8015b3c <RegionAS923ApplyDrOffset+0x50>)
 8015b0e:	00d2      	lsls	r2, r2, #3
 8015b10:	440a      	add	r2, r1
 8015b12:	4413      	add	r3, r2
 8015b14:	781b      	ldrb	r3, [r3, #0]
 8015b16:	73fb      	strb	r3, [r7, #15]
 8015b18:	e009      	b.n	8015b2e <RegionAS923ApplyDrOffset+0x42>
    }
    else
    {
        // Update the minDR for a downlink dwell time configuration of 1
        minDr = EffectiveRx1DrOffsetDownlinkDwell1AS923[dr][drOffset];
 8015b1a:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8015b1e:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8015b22:	4907      	ldr	r1, [pc, #28]	@ (8015b40 <RegionAS923ApplyDrOffset+0x54>)
 8015b24:	00d2      	lsls	r2, r2, #3
 8015b26:	440a      	add	r2, r1
 8015b28:	4413      	add	r3, r2
 8015b2a:	781b      	ldrb	r3, [r3, #0]
 8015b2c:	73fb      	strb	r3, [r7, #15]
    }

    return minDr;
 8015b2e:	7bfb      	ldrb	r3, [r7, #15]
#else
    return 0;
#endif /* REGION_AS923 */

}
 8015b30:	4618      	mov	r0, r3
 8015b32:	3714      	adds	r7, #20
 8015b34:	46bd      	mov	sp, r7
 8015b36:	bc80      	pop	{r7}
 8015b38:	4770      	bx	lr
 8015b3a:	bf00      	nop
 8015b3c:	0801c4fc 	.word	0x0801c4fc
 8015b40:	0801c53c 	.word	0x0801c53c

08015b44 <GetDutyCycle>:
#ifdef MW_LOG_ENABLED
static const char *EventRXSlotStrings[] = { "1", "2", "C", "Multi_C", "P", "Multi_P" };
#endif

static uint16_t GetDutyCycle( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 8015b44:	b480      	push	{r7}
 8015b46:	b087      	sub	sp, #28
 8015b48:	af00      	add	r7, sp, #0
 8015b4a:	60f8      	str	r0, [r7, #12]
 8015b4c:	4608      	mov	r0, r1
 8015b4e:	4639      	mov	r1, r7
 8015b50:	e881 000c 	stmia.w	r1, {r2, r3}
 8015b54:	4603      	mov	r3, r0
 8015b56:	72fb      	strb	r3, [r7, #11]
    uint16_t dutyCycle = band->DCycle;
 8015b58:	68fb      	ldr	r3, [r7, #12]
 8015b5a:	881b      	ldrh	r3, [r3, #0]
 8015b5c:	82fb      	strh	r3, [r7, #22]

    if( joined == false )
 8015b5e:	7afb      	ldrb	r3, [r7, #11]
 8015b60:	f083 0301 	eor.w	r3, r3, #1
 8015b64:	b2db      	uxtb	r3, r3
 8015b66:	2b00      	cmp	r3, #0
 8015b68:	d01b      	beq.n	8015ba2 <GetDutyCycle+0x5e>
    {
        uint16_t joinDutyCycle = BACKOFF_DC_24_HOURS;
 8015b6a:	f242 7310 	movw	r3, #10000	@ 0x2710
 8015b6e:	82bb      	strh	r3, [r7, #20]

        if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_1_HOUR_IN_S )
 8015b70:	683b      	ldr	r3, [r7, #0]
 8015b72:	f5b3 6f61 	cmp.w	r3, #3600	@ 0xe10
 8015b76:	d202      	bcs.n	8015b7e <GetDutyCycle+0x3a>
        {
            joinDutyCycle = BACKOFF_DC_1_HOUR;
 8015b78:	2364      	movs	r3, #100	@ 0x64
 8015b7a:	82bb      	strh	r3, [r7, #20]
 8015b7c:	e00b      	b.n	8015b96 <GetDutyCycle+0x52>
        }
        else if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_10_HOURS_IN_S )
 8015b7e:	683b      	ldr	r3, [r7, #0]
 8015b80:	f649 22af 	movw	r2, #39599	@ 0x9aaf
 8015b84:	4293      	cmp	r3, r2
 8015b86:	d803      	bhi.n	8015b90 <GetDutyCycle+0x4c>
        {
            joinDutyCycle = BACKOFF_DC_10_HOURS;
 8015b88:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8015b8c:	82bb      	strh	r3, [r7, #20]
 8015b8e:	e002      	b.n	8015b96 <GetDutyCycle+0x52>
        }
        else
        {
            joinDutyCycle = BACKOFF_DC_24_HOURS;
 8015b90:	f242 7310 	movw	r3, #10000	@ 0x2710
 8015b94:	82bb      	strh	r3, [r7, #20]
        }
        // Take the most restrictive duty cycle
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
 8015b96:	8aba      	ldrh	r2, [r7, #20]
 8015b98:	8afb      	ldrh	r3, [r7, #22]
 8015b9a:	4293      	cmp	r3, r2
 8015b9c:	bf38      	it	cc
 8015b9e:	4613      	movcc	r3, r2
 8015ba0:	82fb      	strh	r3, [r7, #22]
    }

    // Prevent value of 0
    if( dutyCycle == 0 )
 8015ba2:	8afb      	ldrh	r3, [r7, #22]
 8015ba4:	2b00      	cmp	r3, #0
 8015ba6:	d101      	bne.n	8015bac <GetDutyCycle+0x68>
    {
        dutyCycle = 1;
 8015ba8:	2301      	movs	r3, #1
 8015baa:	82fb      	strh	r3, [r7, #22]
    }

    return dutyCycle;
 8015bac:	8afb      	ldrh	r3, [r7, #22]
}
 8015bae:	4618      	mov	r0, r3
 8015bb0:	371c      	adds	r7, #28
 8015bb2:	46bd      	mov	sp, r7
 8015bb4:	bc80      	pop	{r7}
 8015bb6:	4770      	bx	lr

08015bb8 <SetMaxTimeCredits>:

static uint16_t SetMaxTimeCredits( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup,
                                   bool dutyCycleEnabled, bool lastTxIsJoinRequest )
{
 8015bb8:	b580      	push	{r7, lr}
 8015bba:	b08e      	sub	sp, #56	@ 0x38
 8015bbc:	af02      	add	r7, sp, #8
 8015bbe:	60f8      	str	r0, [r7, #12]
 8015bc0:	4608      	mov	r0, r1
 8015bc2:	4639      	mov	r1, r7
 8015bc4:	e881 000c 	stmia.w	r1, {r2, r3}
 8015bc8:	4603      	mov	r3, r0
 8015bca:	72fb      	strb	r3, [r7, #11]
    uint16_t dutyCycle = band->DCycle;
 8015bcc:	68fb      	ldr	r3, [r7, #12]
 8015bce:	881b      	ldrh	r3, [r3, #0]
 8015bd0:	857b      	strh	r3, [r7, #42]	@ 0x2a
    TimerTime_t maxCredits = DUTY_CYCLE_TIME_PERIOD;
 8015bd2:	4b4b      	ldr	r3, [pc, #300]	@ (8015d00 <SetMaxTimeCredits+0x148>)
 8015bd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimerTime_t elapsedTime = SysTimeToMs( elapsedTimeSinceStartup );
 8015bd6:	463b      	mov	r3, r7
 8015bd8:	e893 0003 	ldmia.w	r3, {r0, r1}
 8015bdc:	f004 fb76 	bl	801a2cc <SysTimeToMs>
 8015be0:	6278      	str	r0, [r7, #36]	@ 0x24
    SysTime_t timeDiff = { 0 };
 8015be2:	f107 0314 	add.w	r3, r7, #20
 8015be6:	2200      	movs	r2, #0
 8015be8:	601a      	str	r2, [r3, #0]
 8015bea:	605a      	str	r2, [r3, #4]

    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 8015bec:	7af9      	ldrb	r1, [r7, #11]
 8015bee:	463b      	mov	r3, r7
 8015bf0:	cb0c      	ldmia	r3, {r2, r3}
 8015bf2:	68f8      	ldr	r0, [r7, #12]
 8015bf4:	f7ff ffa6 	bl	8015b44 <GetDutyCycle>
 8015bf8:	4603      	mov	r3, r0
 8015bfa:	857b      	strh	r3, [r7, #42]	@ 0x2a

    if( joined == false )
 8015bfc:	7afb      	ldrb	r3, [r7, #11]
 8015bfe:	f083 0301 	eor.w	r3, r3, #1
 8015c02:	b2db      	uxtb	r3, r3
 8015c04:	2b00      	cmp	r3, #0
 8015c06:	d062      	beq.n	8015cce <SetMaxTimeCredits+0x116>
    {
        if( dutyCycle == BACKOFF_DC_1_HOUR )
 8015c08:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8015c0a:	2b64      	cmp	r3, #100	@ 0x64
 8015c0c:	d105      	bne.n	8015c1a <SetMaxTimeCredits+0x62>
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD;
 8015c0e:	4b3c      	ldr	r3, [pc, #240]	@ (8015d00 <SetMaxTimeCredits+0x148>)
 8015c10:	62fb      	str	r3, [r7, #44]	@ 0x2c
            band->LastMaxCreditAssignTime = elapsedTime;
 8015c12:	68fb      	ldr	r3, [r7, #12]
 8015c14:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8015c16:	609a      	str	r2, [r3, #8]
 8015c18:	e00b      	b.n	8015c32 <SetMaxTimeCredits+0x7a>
        }
        else if( dutyCycle == BACKOFF_DC_10_HOURS )
 8015c1a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8015c1c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8015c20:	d105      	bne.n	8015c2e <SetMaxTimeCredits+0x76>
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 10;
 8015c22:	4b38      	ldr	r3, [pc, #224]	@ (8015d04 <SetMaxTimeCredits+0x14c>)
 8015c24:	62fb      	str	r3, [r7, #44]	@ 0x2c
            band->LastMaxCreditAssignTime = elapsedTime;
 8015c26:	68fb      	ldr	r3, [r7, #12]
 8015c28:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8015c2a:	609a      	str	r2, [r3, #8]
 8015c2c:	e001      	b.n	8015c32 <SetMaxTimeCredits+0x7a>
        }
        else
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 24;
 8015c2e:	4b36      	ldr	r3, [pc, #216]	@ (8015d08 <SetMaxTimeCredits+0x150>)
 8015c30:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }

        timeDiff = SysTimeSub( elapsedTimeSinceStartup, SysTimeFromMs( band->LastMaxCreditAssignTime ) );
 8015c32:	68fb      	ldr	r3, [r7, #12]
 8015c34:	689a      	ldr	r2, [r3, #8]
 8015c36:	f107 031c 	add.w	r3, r7, #28
 8015c3a:	4611      	mov	r1, r2
 8015c3c:	4618      	mov	r0, r3
 8015c3e:	f004 fb6d 	bl	801a31c <SysTimeFromMs>
 8015c42:	f107 0014 	add.w	r0, r7, #20
 8015c46:	6a3b      	ldr	r3, [r7, #32]
 8015c48:	9300      	str	r3, [sp, #0]
 8015c4a:	69fb      	ldr	r3, [r7, #28]
 8015c4c:	463a      	mov	r2, r7
 8015c4e:	ca06      	ldmia	r2, {r1, r2}
 8015c50:	f004 fa7d 	bl	801a14e <SysTimeSub>

        // Verify if we have to assign the maximum credits in cases
        // of the preconditions have changed.
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 8015c54:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8015c58:	f083 0301 	eor.w	r3, r3, #1
 8015c5c:	b2db      	uxtb	r3, r3
 8015c5e:	2b00      	cmp	r3, #0
 8015c60:	d006      	beq.n	8015c70 <SetMaxTimeCredits+0xb8>
 8015c62:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8015c66:	f083 0301 	eor.w	r3, r3, #1
 8015c6a:	b2db      	uxtb	r3, r3
 8015c6c:	2b00      	cmp	r3, #0
 8015c6e:	d108      	bne.n	8015c82 <SetMaxTimeCredits+0xca>
            ( band->MaxTimeCredits != maxCredits ) ||
 8015c70:	68fb      	ldr	r3, [r7, #12]
 8015c72:	691b      	ldr	r3, [r3, #16]
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 8015c74:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8015c76:	429a      	cmp	r2, r3
 8015c78:	d103      	bne.n	8015c82 <SetMaxTimeCredits+0xca>
            ( timeDiff.Seconds >= BACKOFF_24_HOURS_IN_S ) )
 8015c7a:	697b      	ldr	r3, [r7, #20]
            ( band->MaxTimeCredits != maxCredits ) ||
 8015c7c:	4a23      	ldr	r2, [pc, #140]	@ (8015d0c <SetMaxTimeCredits+0x154>)
 8015c7e:	4293      	cmp	r3, r2
 8015c80:	d92f      	bls.n	8015ce2 <SetMaxTimeCredits+0x12a>
        {
            band->TimeCredits = maxCredits;
 8015c82:	68fb      	ldr	r3, [r7, #12]
 8015c84:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8015c86:	60da      	str	r2, [r3, #12]

            if( elapsedTimeSinceStartup.Seconds >= BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 8015c88:	683b      	ldr	r3, [r7, #0]
 8015c8a:	4a21      	ldr	r2, [pc, #132]	@ (8015d10 <SetMaxTimeCredits+0x158>)
 8015c8c:	4293      	cmp	r3, r2
 8015c8e:	d928      	bls.n	8015ce2 <SetMaxTimeCredits+0x12a>
            {
                timeDiff.Seconds = ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S;
 8015c90:	683b      	ldr	r3, [r7, #0]
 8015c92:	f5a3 33f6 	sub.w	r3, r3, #125952	@ 0x1ec00
 8015c96:	3b30      	subs	r3, #48	@ 0x30
 8015c98:	4a1e      	ldr	r2, [pc, #120]	@ (8015d14 <SetMaxTimeCredits+0x15c>)
 8015c9a:	fba2 2303 	umull	r2, r3, r2, r3
 8015c9e:	0c1b      	lsrs	r3, r3, #16
 8015ca0:	617b      	str	r3, [r7, #20]
                timeDiff.Seconds *= BACKOFF_24_HOURS_IN_S;
 8015ca2:	697b      	ldr	r3, [r7, #20]
 8015ca4:	4a1c      	ldr	r2, [pc, #112]	@ (8015d18 <SetMaxTimeCredits+0x160>)
 8015ca6:	fb02 f303 	mul.w	r3, r2, r3
 8015caa:	617b      	str	r3, [r7, #20]
                timeDiff.Seconds += BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 8015cac:	697b      	ldr	r3, [r7, #20]
 8015cae:	f503 33f6 	add.w	r3, r3, #125952	@ 0x1ec00
 8015cb2:	3330      	adds	r3, #48	@ 0x30
 8015cb4:	617b      	str	r3, [r7, #20]
                timeDiff.SubSeconds = 0;
 8015cb6:	2300      	movs	r3, #0
 8015cb8:	833b      	strh	r3, [r7, #24]
                band->LastMaxCreditAssignTime = SysTimeToMs( timeDiff );
 8015cba:	f107 0314 	add.w	r3, r7, #20
 8015cbe:	e893 0003 	ldmia.w	r3, {r0, r1}
 8015cc2:	f004 fb03 	bl	801a2cc <SysTimeToMs>
 8015cc6:	4602      	mov	r2, r0
 8015cc8:	68fb      	ldr	r3, [r7, #12]
 8015cca:	609a      	str	r2, [r3, #8]
 8015ccc:	e009      	b.n	8015ce2 <SetMaxTimeCredits+0x12a>
            }
        }
    }
    else
    {
        if( dutyCycleEnabled == false )
 8015cce:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8015cd2:	f083 0301 	eor.w	r3, r3, #1
 8015cd6:	b2db      	uxtb	r3, r3
 8015cd8:	2b00      	cmp	r3, #0
 8015cda:	d002      	beq.n	8015ce2 <SetMaxTimeCredits+0x12a>
        {
            // Assign max credits when the duty cycle is disabled.
            band->TimeCredits = maxCredits;
 8015cdc:	68fb      	ldr	r3, [r7, #12]
 8015cde:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8015ce0:	60da      	str	r2, [r3, #12]
        }
    }

    // Assign the max credits if its the first time
    if( band->LastBandUpdateTime == 0 )
 8015ce2:	68fb      	ldr	r3, [r7, #12]
 8015ce4:	685b      	ldr	r3, [r3, #4]
 8015ce6:	2b00      	cmp	r3, #0
 8015ce8:	d102      	bne.n	8015cf0 <SetMaxTimeCredits+0x138>
    {
        band->TimeCredits = maxCredits;
 8015cea:	68fb      	ldr	r3, [r7, #12]
 8015cec:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8015cee:	60da      	str	r2, [r3, #12]
    }

    // Setup the maximum allowed credits. We can assign them
    // safely all the time.
    band->MaxTimeCredits = maxCredits;
 8015cf0:	68fb      	ldr	r3, [r7, #12]
 8015cf2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8015cf4:	611a      	str	r2, [r3, #16]

    return dutyCycle;
 8015cf6:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
}
 8015cf8:	4618      	mov	r0, r3
 8015cfa:	3730      	adds	r7, #48	@ 0x30
 8015cfc:	46bd      	mov	sp, r7
 8015cfe:	bd80      	pop	{r7, pc}
 8015d00:	001b7740 	.word	0x001b7740
 8015d04:	0112a880 	.word	0x0112a880
 8015d08:	02932e00 	.word	0x02932e00
 8015d0c:	0001517f 	.word	0x0001517f
 8015d10:	0001ec2f 	.word	0x0001ec2f
 8015d14:	c22e4507 	.word	0xc22e4507
 8015d18:	00015180 	.word	0x00015180

08015d1c <UpdateTimeCredits>:

static uint16_t UpdateTimeCredits( Band_t* band, bool joined, bool dutyCycleEnabled,
                                   bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                   TimerTime_t currentTime )
{
 8015d1c:	b580      	push	{r7, lr}
 8015d1e:	b086      	sub	sp, #24
 8015d20:	af02      	add	r7, sp, #8
 8015d22:	6078      	str	r0, [r7, #4]
 8015d24:	4608      	mov	r0, r1
 8015d26:	4611      	mov	r1, r2
 8015d28:	461a      	mov	r2, r3
 8015d2a:	4603      	mov	r3, r0
 8015d2c:	70fb      	strb	r3, [r7, #3]
 8015d2e:	460b      	mov	r3, r1
 8015d30:	70bb      	strb	r3, [r7, #2]
 8015d32:	4613      	mov	r3, r2
 8015d34:	707b      	strb	r3, [r7, #1]
    uint16_t dutyCycle = SetMaxTimeCredits( band, joined, elapsedTimeSinceStartup,
 8015d36:	78f9      	ldrb	r1, [r7, #3]
 8015d38:	787b      	ldrb	r3, [r7, #1]
 8015d3a:	9301      	str	r3, [sp, #4]
 8015d3c:	78bb      	ldrb	r3, [r7, #2]
 8015d3e:	9300      	str	r3, [sp, #0]
 8015d40:	f107 0318 	add.w	r3, r7, #24
 8015d44:	cb0c      	ldmia	r3, {r2, r3}
 8015d46:	6878      	ldr	r0, [r7, #4]
 8015d48:	f7ff ff36 	bl	8015bb8 <SetMaxTimeCredits>
 8015d4c:	4603      	mov	r3, r0
 8015d4e:	81fb      	strh	r3, [r7, #14]
                                            dutyCycleEnabled, lastTxIsJoinRequest );

    if( joined == true )
 8015d50:	78fb      	ldrb	r3, [r7, #3]
 8015d52:	2b00      	cmp	r3, #0
 8015d54:	d00a      	beq.n	8015d6c <UpdateTimeCredits+0x50>
    {
        // Apply a sliding window for the duty cycle with collection and speding
        // credits.
        band->TimeCredits += TimerGetElapsedTime( band->LastBandUpdateTime );
 8015d56:	687b      	ldr	r3, [r7, #4]
 8015d58:	685b      	ldr	r3, [r3, #4]
 8015d5a:	4618      	mov	r0, r3
 8015d5c:	f005 f8f0 	bl	801af40 <UTIL_TIMER_GetElapsedTime>
 8015d60:	4602      	mov	r2, r0
 8015d62:	687b      	ldr	r3, [r7, #4]
 8015d64:	68db      	ldr	r3, [r3, #12]
 8015d66:	441a      	add	r2, r3
 8015d68:	687b      	ldr	r3, [r7, #4]
 8015d6a:	60da      	str	r2, [r3, #12]
    }

    // Limit band credits to maximum
    if( band->TimeCredits > band->MaxTimeCredits )
 8015d6c:	687b      	ldr	r3, [r7, #4]
 8015d6e:	68da      	ldr	r2, [r3, #12]
 8015d70:	687b      	ldr	r3, [r7, #4]
 8015d72:	691b      	ldr	r3, [r3, #16]
 8015d74:	429a      	cmp	r2, r3
 8015d76:	d903      	bls.n	8015d80 <UpdateTimeCredits+0x64>
    {
        band->TimeCredits = band->MaxTimeCredits;
 8015d78:	687b      	ldr	r3, [r7, #4]
 8015d7a:	691a      	ldr	r2, [r3, #16]
 8015d7c:	687b      	ldr	r3, [r7, #4]
 8015d7e:	60da      	str	r2, [r3, #12]
    }

    // Synchronize update time
    band->LastBandUpdateTime = currentTime;
 8015d80:	687b      	ldr	r3, [r7, #4]
 8015d82:	6a3a      	ldr	r2, [r7, #32]
 8015d84:	605a      	str	r2, [r3, #4]

    return dutyCycle;
 8015d86:	89fb      	ldrh	r3, [r7, #14]
}
 8015d88:	4618      	mov	r0, r3
 8015d8a:	3710      	adds	r7, #16
 8015d8c:	46bd      	mov	sp, r7
 8015d8e:	bd80      	pop	{r7, pc}

08015d90 <CountChannels>:

static uint8_t CountChannels( uint16_t mask, uint8_t nbBits )
{
 8015d90:	b480      	push	{r7}
 8015d92:	b085      	sub	sp, #20
 8015d94:	af00      	add	r7, sp, #0
 8015d96:	4603      	mov	r3, r0
 8015d98:	460a      	mov	r2, r1
 8015d9a:	80fb      	strh	r3, [r7, #6]
 8015d9c:	4613      	mov	r3, r2
 8015d9e:	717b      	strb	r3, [r7, #5]
    uint8_t nbActiveBits = 0;
 8015da0:	2300      	movs	r3, #0
 8015da2:	73fb      	strb	r3, [r7, #15]

    for( uint8_t j = 0; j < nbBits; j++ )
 8015da4:	2300      	movs	r3, #0
 8015da6:	73bb      	strb	r3, [r7, #14]
 8015da8:	e011      	b.n	8015dce <CountChannels+0x3e>
    {
        if( ( mask & ( 1 << j ) ) == ( 1 << j ) )
 8015daa:	88fa      	ldrh	r2, [r7, #6]
 8015dac:	7bbb      	ldrb	r3, [r7, #14]
 8015dae:	2101      	movs	r1, #1
 8015db0:	fa01 f303 	lsl.w	r3, r1, r3
 8015db4:	401a      	ands	r2, r3
 8015db6:	7bbb      	ldrb	r3, [r7, #14]
 8015db8:	2101      	movs	r1, #1
 8015dba:	fa01 f303 	lsl.w	r3, r1, r3
 8015dbe:	429a      	cmp	r2, r3
 8015dc0:	d102      	bne.n	8015dc8 <CountChannels+0x38>
        {
            nbActiveBits++;
 8015dc2:	7bfb      	ldrb	r3, [r7, #15]
 8015dc4:	3301      	adds	r3, #1
 8015dc6:	73fb      	strb	r3, [r7, #15]
    for( uint8_t j = 0; j < nbBits; j++ )
 8015dc8:	7bbb      	ldrb	r3, [r7, #14]
 8015dca:	3301      	adds	r3, #1
 8015dcc:	73bb      	strb	r3, [r7, #14]
 8015dce:	7bba      	ldrb	r2, [r7, #14]
 8015dd0:	797b      	ldrb	r3, [r7, #5]
 8015dd2:	429a      	cmp	r2, r3
 8015dd4:	d3e9      	bcc.n	8015daa <CountChannels+0x1a>
        }
    }
    return nbActiveBits;
 8015dd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8015dd8:	4618      	mov	r0, r3
 8015dda:	3714      	adds	r7, #20
 8015ddc:	46bd      	mov	sp, r7
 8015dde:	bc80      	pop	{r7}
 8015de0:	4770      	bx	lr

08015de2 <RegionCommonChanVerifyDr>:

bool RegionCommonChanVerifyDr( uint8_t nbChannels, uint16_t* channelsMask, int8_t dr, int8_t minDr, int8_t maxDr, ChannelParams_t* channels )
{
 8015de2:	b580      	push	{r7, lr}
 8015de4:	b084      	sub	sp, #16
 8015de6:	af00      	add	r7, sp, #0
 8015de8:	6039      	str	r1, [r7, #0]
 8015dea:	4611      	mov	r1, r2
 8015dec:	461a      	mov	r2, r3
 8015dee:	4603      	mov	r3, r0
 8015df0:	71fb      	strb	r3, [r7, #7]
 8015df2:	460b      	mov	r3, r1
 8015df4:	71bb      	strb	r3, [r7, #6]
 8015df6:	4613      	mov	r3, r2
 8015df8:	717b      	strb	r3, [r7, #5]
    if( RegionCommonValueInRange( dr, minDr, maxDr ) == 0 )
 8015dfa:	f997 2018 	ldrsb.w	r2, [r7, #24]
 8015dfe:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8015e02:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8015e06:	4618      	mov	r0, r3
 8015e08:	f000 f85d 	bl	8015ec6 <RegionCommonValueInRange>
 8015e0c:	4603      	mov	r3, r0
 8015e0e:	2b00      	cmp	r3, #0
 8015e10:	d101      	bne.n	8015e16 <RegionCommonChanVerifyDr+0x34>
    {
        return false;
 8015e12:	2300      	movs	r3, #0
 8015e14:	e053      	b.n	8015ebe <RegionCommonChanVerifyDr+0xdc>
    }

    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 8015e16:	2300      	movs	r3, #0
 8015e18:	73fb      	strb	r3, [r7, #15]
 8015e1a:	2300      	movs	r3, #0
 8015e1c:	73bb      	strb	r3, [r7, #14]
 8015e1e:	e049      	b.n	8015eb4 <RegionCommonChanVerifyDr+0xd2>
    {
        for( uint8_t j = 0; j < 16; j++ )
 8015e20:	2300      	movs	r3, #0
 8015e22:	737b      	strb	r3, [r7, #13]
 8015e24:	e03d      	b.n	8015ea2 <RegionCommonChanVerifyDr+0xc0>
        {
            if( ( ( channelsMask[k] & ( 1 << j ) ) != 0 ) )
 8015e26:	7bbb      	ldrb	r3, [r7, #14]
 8015e28:	005b      	lsls	r3, r3, #1
 8015e2a:	683a      	ldr	r2, [r7, #0]
 8015e2c:	4413      	add	r3, r2
 8015e2e:	881b      	ldrh	r3, [r3, #0]
 8015e30:	461a      	mov	r2, r3
 8015e32:	7b7b      	ldrb	r3, [r7, #13]
 8015e34:	fa42 f303 	asr.w	r3, r2, r3
 8015e38:	f003 0301 	and.w	r3, r3, #1
 8015e3c:	2b00      	cmp	r3, #0
 8015e3e:	d02d      	beq.n	8015e9c <RegionCommonChanVerifyDr+0xba>
            {// Check datarate validity for enabled channels
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 8015e40:	7bfa      	ldrb	r2, [r7, #15]
 8015e42:	7b7b      	ldrb	r3, [r7, #13]
 8015e44:	4413      	add	r3, r2
 8015e46:	461a      	mov	r2, r3
 8015e48:	4613      	mov	r3, r2
 8015e4a:	005b      	lsls	r3, r3, #1
 8015e4c:	4413      	add	r3, r2
 8015e4e:	009b      	lsls	r3, r3, #2
 8015e50:	461a      	mov	r2, r3
 8015e52:	69fb      	ldr	r3, [r7, #28]
 8015e54:	4413      	add	r3, r2
 8015e56:	7a1b      	ldrb	r3, [r3, #8]
 8015e58:	f343 0303 	sbfx	r3, r3, #0, #4
 8015e5c:	b25b      	sxtb	r3, r3
 8015e5e:	f003 030f 	and.w	r3, r3, #15
 8015e62:	b259      	sxtb	r1, r3
                                                  ( channels[i + j].DrRange.Fields.Max & 0x0F ) ) == 1 )
 8015e64:	7bfa      	ldrb	r2, [r7, #15]
 8015e66:	7b7b      	ldrb	r3, [r7, #13]
 8015e68:	4413      	add	r3, r2
 8015e6a:	461a      	mov	r2, r3
 8015e6c:	4613      	mov	r3, r2
 8015e6e:	005b      	lsls	r3, r3, #1
 8015e70:	4413      	add	r3, r2
 8015e72:	009b      	lsls	r3, r3, #2
 8015e74:	461a      	mov	r2, r3
 8015e76:	69fb      	ldr	r3, [r7, #28]
 8015e78:	4413      	add	r3, r2
 8015e7a:	7a1b      	ldrb	r3, [r3, #8]
 8015e7c:	f343 1303 	sbfx	r3, r3, #4, #4
 8015e80:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 8015e82:	f003 030f 	and.w	r3, r3, #15
 8015e86:	b25a      	sxtb	r2, r3
 8015e88:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8015e8c:	4618      	mov	r0, r3
 8015e8e:	f000 f81a 	bl	8015ec6 <RegionCommonValueInRange>
 8015e92:	4603      	mov	r3, r0
 8015e94:	2b01      	cmp	r3, #1
 8015e96:	d101      	bne.n	8015e9c <RegionCommonChanVerifyDr+0xba>
                {
                    // At least 1 channel has been found we can return OK.
                    return true;
 8015e98:	2301      	movs	r3, #1
 8015e9a:	e010      	b.n	8015ebe <RegionCommonChanVerifyDr+0xdc>
        for( uint8_t j = 0; j < 16; j++ )
 8015e9c:	7b7b      	ldrb	r3, [r7, #13]
 8015e9e:	3301      	adds	r3, #1
 8015ea0:	737b      	strb	r3, [r7, #13]
 8015ea2:	7b7b      	ldrb	r3, [r7, #13]
 8015ea4:	2b0f      	cmp	r3, #15
 8015ea6:	d9be      	bls.n	8015e26 <RegionCommonChanVerifyDr+0x44>
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 8015ea8:	7bfb      	ldrb	r3, [r7, #15]
 8015eaa:	3310      	adds	r3, #16
 8015eac:	73fb      	strb	r3, [r7, #15]
 8015eae:	7bbb      	ldrb	r3, [r7, #14]
 8015eb0:	3301      	adds	r3, #1
 8015eb2:	73bb      	strb	r3, [r7, #14]
 8015eb4:	7bfa      	ldrb	r2, [r7, #15]
 8015eb6:	79fb      	ldrb	r3, [r7, #7]
 8015eb8:	429a      	cmp	r2, r3
 8015eba:	d3b1      	bcc.n	8015e20 <RegionCommonChanVerifyDr+0x3e>
                }
            }
        }
    }
    return false;
 8015ebc:	2300      	movs	r3, #0
}
 8015ebe:	4618      	mov	r0, r3
 8015ec0:	3710      	adds	r7, #16
 8015ec2:	46bd      	mov	sp, r7
 8015ec4:	bd80      	pop	{r7, pc}

08015ec6 <RegionCommonValueInRange>:

uint8_t RegionCommonValueInRange( int8_t value, int8_t min, int8_t max )
{
 8015ec6:	b480      	push	{r7}
 8015ec8:	b083      	sub	sp, #12
 8015eca:	af00      	add	r7, sp, #0
 8015ecc:	4603      	mov	r3, r0
 8015ece:	71fb      	strb	r3, [r7, #7]
 8015ed0:	460b      	mov	r3, r1
 8015ed2:	71bb      	strb	r3, [r7, #6]
 8015ed4:	4613      	mov	r3, r2
 8015ed6:	717b      	strb	r3, [r7, #5]
    if( ( value >= min ) && ( value <= max ) )
 8015ed8:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8015edc:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8015ee0:	429a      	cmp	r2, r3
 8015ee2:	db07      	blt.n	8015ef4 <RegionCommonValueInRange+0x2e>
 8015ee4:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8015ee8:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8015eec:	429a      	cmp	r2, r3
 8015eee:	dc01      	bgt.n	8015ef4 <RegionCommonValueInRange+0x2e>
    {
        return 1;
 8015ef0:	2301      	movs	r3, #1
 8015ef2:	e000      	b.n	8015ef6 <RegionCommonValueInRange+0x30>
    }
    return 0;
 8015ef4:	2300      	movs	r3, #0
}
 8015ef6:	4618      	mov	r0, r3
 8015ef8:	370c      	adds	r7, #12
 8015efa:	46bd      	mov	sp, r7
 8015efc:	bc80      	pop	{r7}
 8015efe:	4770      	bx	lr

08015f00 <RegionCommonChanDisable>:

bool RegionCommonChanDisable( uint16_t* channelsMask, uint8_t id, uint8_t maxChannels )
{
 8015f00:	b480      	push	{r7}
 8015f02:	b085      	sub	sp, #20
 8015f04:	af00      	add	r7, sp, #0
 8015f06:	6078      	str	r0, [r7, #4]
 8015f08:	460b      	mov	r3, r1
 8015f0a:	70fb      	strb	r3, [r7, #3]
 8015f0c:	4613      	mov	r3, r2
 8015f0e:	70bb      	strb	r3, [r7, #2]
    uint8_t index = id / 16;
 8015f10:	78fb      	ldrb	r3, [r7, #3]
 8015f12:	091b      	lsrs	r3, r3, #4
 8015f14:	73fb      	strb	r3, [r7, #15]

    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
 8015f16:	78bb      	ldrb	r3, [r7, #2]
 8015f18:	091b      	lsrs	r3, r3, #4
 8015f1a:	b2db      	uxtb	r3, r3
 8015f1c:	7bfa      	ldrb	r2, [r7, #15]
 8015f1e:	429a      	cmp	r2, r3
 8015f20:	d803      	bhi.n	8015f2a <RegionCommonChanDisable+0x2a>
 8015f22:	78fa      	ldrb	r2, [r7, #3]
 8015f24:	78bb      	ldrb	r3, [r7, #2]
 8015f26:	429a      	cmp	r2, r3
 8015f28:	d301      	bcc.n	8015f2e <RegionCommonChanDisable+0x2e>
    {
        return false;
 8015f2a:	2300      	movs	r3, #0
 8015f2c:	e017      	b.n	8015f5e <RegionCommonChanDisable+0x5e>
    }

    // Deactivate channel
    channelsMask[index] &= ~( 1 << ( id % 16 ) );
 8015f2e:	7bfb      	ldrb	r3, [r7, #15]
 8015f30:	005b      	lsls	r3, r3, #1
 8015f32:	687a      	ldr	r2, [r7, #4]
 8015f34:	4413      	add	r3, r2
 8015f36:	881b      	ldrh	r3, [r3, #0]
 8015f38:	b21a      	sxth	r2, r3
 8015f3a:	78fb      	ldrb	r3, [r7, #3]
 8015f3c:	f003 030f 	and.w	r3, r3, #15
 8015f40:	2101      	movs	r1, #1
 8015f42:	fa01 f303 	lsl.w	r3, r1, r3
 8015f46:	b21b      	sxth	r3, r3
 8015f48:	43db      	mvns	r3, r3
 8015f4a:	b21b      	sxth	r3, r3
 8015f4c:	4013      	ands	r3, r2
 8015f4e:	b219      	sxth	r1, r3
 8015f50:	7bfb      	ldrb	r3, [r7, #15]
 8015f52:	005b      	lsls	r3, r3, #1
 8015f54:	687a      	ldr	r2, [r7, #4]
 8015f56:	4413      	add	r3, r2
 8015f58:	b28a      	uxth	r2, r1
 8015f5a:	801a      	strh	r2, [r3, #0]

    return true;
 8015f5c:	2301      	movs	r3, #1
}
 8015f5e:	4618      	mov	r0, r3
 8015f60:	3714      	adds	r7, #20
 8015f62:	46bd      	mov	sp, r7
 8015f64:	bc80      	pop	{r7}
 8015f66:	4770      	bx	lr

08015f68 <RegionCommonCountChannels>:

uint8_t RegionCommonCountChannels( uint16_t* channelsMask, uint8_t startIdx, uint8_t stopIdx )
{
 8015f68:	b580      	push	{r7, lr}
 8015f6a:	b084      	sub	sp, #16
 8015f6c:	af00      	add	r7, sp, #0
 8015f6e:	6078      	str	r0, [r7, #4]
 8015f70:	460b      	mov	r3, r1
 8015f72:	70fb      	strb	r3, [r7, #3]
 8015f74:	4613      	mov	r3, r2
 8015f76:	70bb      	strb	r3, [r7, #2]
    uint8_t nbChannels = 0;
 8015f78:	2300      	movs	r3, #0
 8015f7a:	73fb      	strb	r3, [r7, #15]

    if( channelsMask == NULL )
 8015f7c:	687b      	ldr	r3, [r7, #4]
 8015f7e:	2b00      	cmp	r3, #0
 8015f80:	d101      	bne.n	8015f86 <RegionCommonCountChannels+0x1e>
    {
        return 0;
 8015f82:	2300      	movs	r3, #0
 8015f84:	e018      	b.n	8015fb8 <RegionCommonCountChannels+0x50>
    }

    for( uint8_t i = startIdx; i < stopIdx; i++ )
 8015f86:	78fb      	ldrb	r3, [r7, #3]
 8015f88:	73bb      	strb	r3, [r7, #14]
 8015f8a:	e010      	b.n	8015fae <RegionCommonCountChannels+0x46>
    {
        nbChannels += CountChannels( channelsMask[i], 16 );
 8015f8c:	7bbb      	ldrb	r3, [r7, #14]
 8015f8e:	005b      	lsls	r3, r3, #1
 8015f90:	687a      	ldr	r2, [r7, #4]
 8015f92:	4413      	add	r3, r2
 8015f94:	881b      	ldrh	r3, [r3, #0]
 8015f96:	2110      	movs	r1, #16
 8015f98:	4618      	mov	r0, r3
 8015f9a:	f7ff fef9 	bl	8015d90 <CountChannels>
 8015f9e:	4603      	mov	r3, r0
 8015fa0:	461a      	mov	r2, r3
 8015fa2:	7bfb      	ldrb	r3, [r7, #15]
 8015fa4:	4413      	add	r3, r2
 8015fa6:	73fb      	strb	r3, [r7, #15]
    for( uint8_t i = startIdx; i < stopIdx; i++ )
 8015fa8:	7bbb      	ldrb	r3, [r7, #14]
 8015faa:	3301      	adds	r3, #1
 8015fac:	73bb      	strb	r3, [r7, #14]
 8015fae:	7bba      	ldrb	r2, [r7, #14]
 8015fb0:	78bb      	ldrb	r3, [r7, #2]
 8015fb2:	429a      	cmp	r2, r3
 8015fb4:	d3ea      	bcc.n	8015f8c <RegionCommonCountChannels+0x24>
    }

    return nbChannels;
 8015fb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8015fb8:	4618      	mov	r0, r3
 8015fba:	3710      	adds	r7, #16
 8015fbc:	46bd      	mov	sp, r7
 8015fbe:	bd80      	pop	{r7, pc}

08015fc0 <RegionCommonChanMaskCopy>:

void RegionCommonChanMaskCopy( uint16_t* channelsMaskDest, uint16_t* channelsMaskSrc, uint8_t len )
{
 8015fc0:	b480      	push	{r7}
 8015fc2:	b087      	sub	sp, #28
 8015fc4:	af00      	add	r7, sp, #0
 8015fc6:	60f8      	str	r0, [r7, #12]
 8015fc8:	60b9      	str	r1, [r7, #8]
 8015fca:	4613      	mov	r3, r2
 8015fcc:	71fb      	strb	r3, [r7, #7]
    if( ( channelsMaskDest != NULL ) && ( channelsMaskSrc != NULL ) )
 8015fce:	68fb      	ldr	r3, [r7, #12]
 8015fd0:	2b00      	cmp	r3, #0
 8015fd2:	d016      	beq.n	8016002 <RegionCommonChanMaskCopy+0x42>
 8015fd4:	68bb      	ldr	r3, [r7, #8]
 8015fd6:	2b00      	cmp	r3, #0
 8015fd8:	d013      	beq.n	8016002 <RegionCommonChanMaskCopy+0x42>
    {
        for( uint8_t i = 0; i < len; i++ )
 8015fda:	2300      	movs	r3, #0
 8015fdc:	75fb      	strb	r3, [r7, #23]
 8015fde:	e00c      	b.n	8015ffa <RegionCommonChanMaskCopy+0x3a>
        {
            channelsMaskDest[i] = channelsMaskSrc[i];
 8015fe0:	7dfb      	ldrb	r3, [r7, #23]
 8015fe2:	005b      	lsls	r3, r3, #1
 8015fe4:	68ba      	ldr	r2, [r7, #8]
 8015fe6:	441a      	add	r2, r3
 8015fe8:	7dfb      	ldrb	r3, [r7, #23]
 8015fea:	005b      	lsls	r3, r3, #1
 8015fec:	68f9      	ldr	r1, [r7, #12]
 8015fee:	440b      	add	r3, r1
 8015ff0:	8812      	ldrh	r2, [r2, #0]
 8015ff2:	801a      	strh	r2, [r3, #0]
        for( uint8_t i = 0; i < len; i++ )
 8015ff4:	7dfb      	ldrb	r3, [r7, #23]
 8015ff6:	3301      	adds	r3, #1
 8015ff8:	75fb      	strb	r3, [r7, #23]
 8015ffa:	7dfa      	ldrb	r2, [r7, #23]
 8015ffc:	79fb      	ldrb	r3, [r7, #7]
 8015ffe:	429a      	cmp	r2, r3
 8016000:	d3ee      	bcc.n	8015fe0 <RegionCommonChanMaskCopy+0x20>
        }
    }
}
 8016002:	bf00      	nop
 8016004:	371c      	adds	r7, #28
 8016006:	46bd      	mov	sp, r7
 8016008:	bc80      	pop	{r7}
 801600a:	4770      	bx	lr

0801600c <RegionCommonSetBandTxDone>:

void RegionCommonSetBandTxDone( Band_t* band, TimerTime_t lastTxAirTime, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 801600c:	b082      	sub	sp, #8
 801600e:	b580      	push	{r7, lr}
 8016010:	b086      	sub	sp, #24
 8016012:	af00      	add	r7, sp, #0
 8016014:	60f8      	str	r0, [r7, #12]
 8016016:	60b9      	str	r1, [r7, #8]
 8016018:	627b      	str	r3, [r7, #36]	@ 0x24
 801601a:	4613      	mov	r3, r2
 801601c:	71fb      	strb	r3, [r7, #7]
    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    uint16_t dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 801601e:	79f9      	ldrb	r1, [r7, #7]
 8016020:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8016024:	cb0c      	ldmia	r3, {r2, r3}
 8016026:	68f8      	ldr	r0, [r7, #12]
 8016028:	f7ff fd8c 	bl	8015b44 <GetDutyCycle>
 801602c:	4603      	mov	r3, r0
 801602e:	82fb      	strh	r3, [r7, #22]

    // Reduce with transmission time
    if( band->TimeCredits > ( lastTxAirTime * dutyCycle ) )
 8016030:	68fb      	ldr	r3, [r7, #12]
 8016032:	68da      	ldr	r2, [r3, #12]
 8016034:	8afb      	ldrh	r3, [r7, #22]
 8016036:	68b9      	ldr	r1, [r7, #8]
 8016038:	fb01 f303 	mul.w	r3, r1, r3
 801603c:	429a      	cmp	r2, r3
 801603e:	d909      	bls.n	8016054 <RegionCommonSetBandTxDone+0x48>
    {
        // Reduce time credits by the time of air
        band->TimeCredits -= ( lastTxAirTime * dutyCycle );
 8016040:	68fb      	ldr	r3, [r7, #12]
 8016042:	68da      	ldr	r2, [r3, #12]
 8016044:	8afb      	ldrh	r3, [r7, #22]
 8016046:	68b9      	ldr	r1, [r7, #8]
 8016048:	fb01 f303 	mul.w	r3, r1, r3
 801604c:	1ad2      	subs	r2, r2, r3
 801604e:	68fb      	ldr	r3, [r7, #12]
 8016050:	60da      	str	r2, [r3, #12]
    }
    else
    {
        band->TimeCredits = 0;
    }
}
 8016052:	e002      	b.n	801605a <RegionCommonSetBandTxDone+0x4e>
        band->TimeCredits = 0;
 8016054:	68fb      	ldr	r3, [r7, #12]
 8016056:	2200      	movs	r2, #0
 8016058:	60da      	str	r2, [r3, #12]
}
 801605a:	bf00      	nop
 801605c:	3718      	adds	r7, #24
 801605e:	46bd      	mov	sp, r7
 8016060:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8016064:	b002      	add	sp, #8
 8016066:	4770      	bx	lr

08016068 <RegionCommonUpdateBandTimeOff>:

TimerTime_t RegionCommonUpdateBandTimeOff( bool joined, Band_t* bands,
                                           uint8_t nbBands, bool dutyCycleEnabled,
                                           bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                           TimerTime_t expectedTimeOnAir )
{
 8016068:	b5f0      	push	{r4, r5, r6, r7, lr}
 801606a:	b08f      	sub	sp, #60	@ 0x3c
 801606c:	af04      	add	r7, sp, #16
 801606e:	6039      	str	r1, [r7, #0]
 8016070:	4611      	mov	r1, r2
 8016072:	461a      	mov	r2, r3
 8016074:	4603      	mov	r3, r0
 8016076:	71fb      	strb	r3, [r7, #7]
 8016078:	460b      	mov	r3, r1
 801607a:	71bb      	strb	r3, [r7, #6]
 801607c:	4613      	mov	r3, r2
 801607e:	717b      	strb	r3, [r7, #5]
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
 8016080:	f04f 33ff 	mov.w	r3, #4294967295
 8016084:	627b      	str	r3, [r7, #36]	@ 0x24
    TimerTime_t currentTime = TimerGetCurrentTime( );
 8016086:	f004 ff49 	bl	801af1c <UTIL_TIMER_GetCurrentTime>
 801608a:	61f8      	str	r0, [r7, #28]
    TimerTime_t creditCosts = 0;
 801608c:	2300      	movs	r3, #0
 801608e:	61bb      	str	r3, [r7, #24]
    uint16_t dutyCycle = 1;
 8016090:	2301      	movs	r3, #1
 8016092:	82fb      	strh	r3, [r7, #22]
    uint8_t validBands = 0;
 8016094:	2300      	movs	r3, #0
 8016096:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

    for( uint8_t i = 0; i < nbBands; i++ )
 801609a:	2300      	movs	r3, #0
 801609c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80160a0:	e0ba      	b.n	8016218 <RegionCommonUpdateBandTimeOff+0x1b0>
    {
        // Synchronization of bands and credits
        dutyCycle = UpdateTimeCredits( &bands[i], joined, dutyCycleEnabled,
 80160a2:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 80160a6:	4613      	mov	r3, r2
 80160a8:	005b      	lsls	r3, r3, #1
 80160aa:	4413      	add	r3, r2
 80160ac:	00db      	lsls	r3, r3, #3
 80160ae:	461a      	mov	r2, r3
 80160b0:	683b      	ldr	r3, [r7, #0]
 80160b2:	189c      	adds	r4, r3, r2
 80160b4:	f897 6040 	ldrb.w	r6, [r7, #64]	@ 0x40
 80160b8:	797a      	ldrb	r2, [r7, #5]
 80160ba:	79fd      	ldrb	r5, [r7, #7]
 80160bc:	69fb      	ldr	r3, [r7, #28]
 80160be:	9302      	str	r3, [sp, #8]
 80160c0:	46ec      	mov	ip, sp
 80160c2:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80160c6:	e893 0003 	ldmia.w	r3, {r0, r1}
 80160ca:	e88c 0003 	stmia.w	ip, {r0, r1}
 80160ce:	4633      	mov	r3, r6
 80160d0:	4629      	mov	r1, r5
 80160d2:	4620      	mov	r0, r4
 80160d4:	f7ff fe22 	bl	8015d1c <UpdateTimeCredits>
 80160d8:	4603      	mov	r3, r0
 80160da:	82fb      	strh	r3, [r7, #22]
                                       lastTxIsJoinRequest, elapsedTimeSinceStartup,
                                       currentTime );

        // Calculate the credit costs for the next transmission
        // with the duty cycle and the expected time on air
        creditCosts = expectedTimeOnAir * dutyCycle;
 80160dc:	8afa      	ldrh	r2, [r7, #22]
 80160de:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80160e0:	fb02 f303 	mul.w	r3, r2, r3
 80160e4:	61bb      	str	r3, [r7, #24]

        // Check if the band is ready for transmission. Its ready,
        // when the duty cycle is off, or the TimeCredits of the band
        // is higher than the credit costs for the transmission.
        if( ( bands[i].TimeCredits > creditCosts ) ||
 80160e6:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 80160ea:	4613      	mov	r3, r2
 80160ec:	005b      	lsls	r3, r3, #1
 80160ee:	4413      	add	r3, r2
 80160f0:	00db      	lsls	r3, r3, #3
 80160f2:	461a      	mov	r2, r3
 80160f4:	683b      	ldr	r3, [r7, #0]
 80160f6:	4413      	add	r3, r2
 80160f8:	68db      	ldr	r3, [r3, #12]
 80160fa:	69ba      	ldr	r2, [r7, #24]
 80160fc:	429a      	cmp	r2, r3
 80160fe:	d308      	bcc.n	8016112 <RegionCommonUpdateBandTimeOff+0xaa>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 8016100:	797b      	ldrb	r3, [r7, #5]
 8016102:	f083 0301 	eor.w	r3, r3, #1
 8016106:	b2db      	uxtb	r3, r3
        if( ( bands[i].TimeCredits > creditCosts ) ||
 8016108:	2b00      	cmp	r3, #0
 801610a:	d013      	beq.n	8016134 <RegionCommonUpdateBandTimeOff+0xcc>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 801610c:	79fb      	ldrb	r3, [r7, #7]
 801610e:	2b00      	cmp	r3, #0
 8016110:	d010      	beq.n	8016134 <RegionCommonUpdateBandTimeOff+0xcc>
        {
            bands[i].ReadyForTransmission = true;
 8016112:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8016116:	4613      	mov	r3, r2
 8016118:	005b      	lsls	r3, r3, #1
 801611a:	4413      	add	r3, r2
 801611c:	00db      	lsls	r3, r3, #3
 801611e:	461a      	mov	r2, r3
 8016120:	683b      	ldr	r3, [r7, #0]
 8016122:	4413      	add	r3, r2
 8016124:	2201      	movs	r2, #1
 8016126:	751a      	strb	r2, [r3, #20]
            // This band is a potential candidate for an
            // upcoming transmission, so increase the counter.
            validBands++;
 8016128:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801612c:	3301      	adds	r3, #1
 801612e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8016132:	e06c      	b.n	801620e <RegionCommonUpdateBandTimeOff+0x1a6>
        }
        else
        {
            // In this case, the band has not enough credits
            // for the next transmission.
            bands[i].ReadyForTransmission = false;
 8016134:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8016138:	4613      	mov	r3, r2
 801613a:	005b      	lsls	r3, r3, #1
 801613c:	4413      	add	r3, r2
 801613e:	00db      	lsls	r3, r3, #3
 8016140:	461a      	mov	r2, r3
 8016142:	683b      	ldr	r3, [r7, #0]
 8016144:	4413      	add	r3, r2
 8016146:	2200      	movs	r2, #0
 8016148:	751a      	strb	r2, [r3, #20]

            if( bands[i].MaxTimeCredits > creditCosts )
 801614a:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 801614e:	4613      	mov	r3, r2
 8016150:	005b      	lsls	r3, r3, #1
 8016152:	4413      	add	r3, r2
 8016154:	00db      	lsls	r3, r3, #3
 8016156:	461a      	mov	r2, r3
 8016158:	683b      	ldr	r3, [r7, #0]
 801615a:	4413      	add	r3, r2
 801615c:	691b      	ldr	r3, [r3, #16]
 801615e:	69ba      	ldr	r2, [r7, #24]
 8016160:	429a      	cmp	r2, r3
 8016162:	d215      	bcs.n	8016190 <RegionCommonUpdateBandTimeOff+0x128>
                // The band can only be taken into account, if the maximum credits
                // of the band are higher than the credit costs.
                // We calculate the minTimeToWait among the bands which are not
                // ready for transmission and which are potentially available
                // for a transmission in the future.
                minTimeToWait = MIN( minTimeToWait, ( creditCosts - bands[i].TimeCredits ) );
 8016164:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8016168:	4613      	mov	r3, r2
 801616a:	005b      	lsls	r3, r3, #1
 801616c:	4413      	add	r3, r2
 801616e:	00db      	lsls	r3, r3, #3
 8016170:	461a      	mov	r2, r3
 8016172:	683b      	ldr	r3, [r7, #0]
 8016174:	4413      	add	r3, r2
 8016176:	68db      	ldr	r3, [r3, #12]
 8016178:	69ba      	ldr	r2, [r7, #24]
 801617a:	1ad3      	subs	r3, r2, r3
 801617c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801617e:	4293      	cmp	r3, r2
 8016180:	bf28      	it	cs
 8016182:	4613      	movcs	r3, r2
 8016184:	627b      	str	r3, [r7, #36]	@ 0x24
                // This band is a potential candidate for an
                // upcoming transmission (even if its time credits are not enough
                // at the moment), so increase the counter.
                validBands++;
 8016186:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801618a:	3301      	adds	r3, #1
 801618c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
            }

            // Apply a special calculation if the device is not joined.
            if( joined == false )
 8016190:	79fb      	ldrb	r3, [r7, #7]
 8016192:	f083 0301 	eor.w	r3, r3, #1
 8016196:	b2db      	uxtb	r3, r3
 8016198:	2b00      	cmp	r3, #0
 801619a:	d038      	beq.n	801620e <RegionCommonUpdateBandTimeOff+0x1a6>
            {
                SysTime_t backoffTimeRange = {
 801619c:	2300      	movs	r3, #0
 801619e:	60fb      	str	r3, [r7, #12]
 80161a0:	2300      	movs	r3, #0
 80161a2:	823b      	strh	r3, [r7, #16]
                    .Seconds    = 0,
                    .SubSeconds = 0,
                };
                // Get the backoff time range based on the duty cycle definition
                if( dutyCycle == BACKOFF_DC_1_HOUR )
 80161a4:	8afb      	ldrh	r3, [r7, #22]
 80161a6:	2b64      	cmp	r3, #100	@ 0x64
 80161a8:	d103      	bne.n	80161b2 <RegionCommonUpdateBandTimeOff+0x14a>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_1_HOUR_IN_S;
 80161aa:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 80161ae:	60fb      	str	r3, [r7, #12]
 80161b0:	e009      	b.n	80161c6 <RegionCommonUpdateBandTimeOff+0x15e>
                }
                else if( dutyCycle == BACKOFF_DC_10_HOURS )
 80161b2:	8afb      	ldrh	r3, [r7, #22]
 80161b4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80161b8:	d103      	bne.n	80161c2 <RegionCommonUpdateBandTimeOff+0x15a>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_10_HOURS_IN_S;
 80161ba:	f649 23b0 	movw	r3, #39600	@ 0x9ab0
 80161be:	60fb      	str	r3, [r7, #12]
 80161c0:	e001      	b.n	80161c6 <RegionCommonUpdateBandTimeOff+0x15e>
                }
                else
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 80161c2:	4b1e      	ldr	r3, [pc, #120]	@ (801623c <RegionCommonUpdateBandTimeOff+0x1d4>)
 80161c4:	60fb      	str	r3, [r7, #12]
                }
                // Calculate the time to wait.
                if( elapsedTimeSinceStartup.Seconds > BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 80161c6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80161c8:	4a1c      	ldr	r2, [pc, #112]	@ (801623c <RegionCommonUpdateBandTimeOff+0x1d4>)
 80161ca:	4293      	cmp	r3, r2
 80161cc:	d90e      	bls.n	80161ec <RegionCommonUpdateBandTimeOff+0x184>
                {
                    backoffTimeRange.Seconds += BACKOFF_24_HOURS_IN_S * ( ( ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S ) + 1 );
 80161ce:	68fa      	ldr	r2, [r7, #12]
 80161d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80161d2:	f5a3 33f6 	sub.w	r3, r3, #125952	@ 0x1ec00
 80161d6:	3b30      	subs	r3, #48	@ 0x30
 80161d8:	4919      	ldr	r1, [pc, #100]	@ (8016240 <RegionCommonUpdateBandTimeOff+0x1d8>)
 80161da:	fba1 1303 	umull	r1, r3, r1, r3
 80161de:	0c1b      	lsrs	r3, r3, #16
 80161e0:	3301      	adds	r3, #1
 80161e2:	4918      	ldr	r1, [pc, #96]	@ (8016244 <RegionCommonUpdateBandTimeOff+0x1dc>)
 80161e4:	fb01 f303 	mul.w	r3, r1, r3
 80161e8:	4413      	add	r3, r2
 80161ea:	60fb      	str	r3, [r7, #12]
                }
                // Calculate the time difference between now and the next range
                backoffTimeRange  = SysTimeSub( backoffTimeRange, elapsedTimeSinceStartup );
 80161ec:	f107 000c 	add.w	r0, r7, #12
 80161f0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80161f2:	9300      	str	r3, [sp, #0]
 80161f4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80161f6:	f107 020c 	add.w	r2, r7, #12
 80161fa:	ca06      	ldmia	r2, {r1, r2}
 80161fc:	f003 ffa7 	bl	801a14e <SysTimeSub>
                minTimeToWait = SysTimeToMs( backoffTimeRange );
 8016200:	f107 030c 	add.w	r3, r7, #12
 8016204:	e893 0003 	ldmia.w	r3, {r0, r1}
 8016208:	f004 f860 	bl	801a2cc <SysTimeToMs>
 801620c:	6278      	str	r0, [r7, #36]	@ 0x24
    for( uint8_t i = 0; i < nbBands; i++ )
 801620e:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8016212:	3301      	adds	r3, #1
 8016214:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8016218:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 801621c:	79bb      	ldrb	r3, [r7, #6]
 801621e:	429a      	cmp	r2, r3
 8016220:	f4ff af3f 	bcc.w	80160a2 <RegionCommonUpdateBandTimeOff+0x3a>
            }
        }
    }

    if( validBands == 0 )
 8016224:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8016228:	2b00      	cmp	r3, #0
 801622a:	d102      	bne.n	8016232 <RegionCommonUpdateBandTimeOff+0x1ca>
    {
        // There is no valid band available to handle a transmission
        // in the given DUTY_CYCLE_TIME_PERIOD.
        return TIMERTIME_T_MAX;
 801622c:	f04f 33ff 	mov.w	r3, #4294967295
 8016230:	e000      	b.n	8016234 <RegionCommonUpdateBandTimeOff+0x1cc>
    }
    return minTimeToWait;
 8016232:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8016234:	4618      	mov	r0, r3
 8016236:	372c      	adds	r7, #44	@ 0x2c
 8016238:	46bd      	mov	sp, r7
 801623a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801623c:	0001ec30 	.word	0x0001ec30
 8016240:	c22e4507 	.word	0xc22e4507
 8016244:	00015180 	.word	0x00015180

08016248 <RegionCommonParseLinkAdrReq>:

uint8_t RegionCommonParseLinkAdrReq( uint8_t* payload, RegionCommonLinkAdrParams_t* linkAdrParams )
{
 8016248:	b480      	push	{r7}
 801624a:	b085      	sub	sp, #20
 801624c:	af00      	add	r7, sp, #0
 801624e:	6078      	str	r0, [r7, #4]
 8016250:	6039      	str	r1, [r7, #0]
    uint8_t retIndex = 0;
 8016252:	2300      	movs	r3, #0
 8016254:	73fb      	strb	r3, [r7, #15]

    if( payload[0] == SRV_MAC_LINK_ADR_REQ )
 8016256:	687b      	ldr	r3, [r7, #4]
 8016258:	781b      	ldrb	r3, [r3, #0]
 801625a:	2b03      	cmp	r3, #3
 801625c:	d13f      	bne.n	80162de <RegionCommonParseLinkAdrReq+0x96>
    {
        // Parse datarate and tx power
        linkAdrParams->Datarate = payload[1];
 801625e:	687b      	ldr	r3, [r7, #4]
 8016260:	3301      	adds	r3, #1
 8016262:	781b      	ldrb	r3, [r3, #0]
 8016264:	b25a      	sxtb	r2, r3
 8016266:	683b      	ldr	r3, [r7, #0]
 8016268:	705a      	strb	r2, [r3, #1]
        linkAdrParams->TxPower = linkAdrParams->Datarate & 0x0F;
 801626a:	683b      	ldr	r3, [r7, #0]
 801626c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8016270:	f003 030f 	and.w	r3, r3, #15
 8016274:	b25a      	sxtb	r2, r3
 8016276:	683b      	ldr	r3, [r7, #0]
 8016278:	709a      	strb	r2, [r3, #2]
        linkAdrParams->Datarate = ( linkAdrParams->Datarate >> 4 ) & 0x0F;
 801627a:	683b      	ldr	r3, [r7, #0]
 801627c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8016280:	b2db      	uxtb	r3, r3
 8016282:	091b      	lsrs	r3, r3, #4
 8016284:	b2db      	uxtb	r3, r3
 8016286:	b25a      	sxtb	r2, r3
 8016288:	683b      	ldr	r3, [r7, #0]
 801628a:	705a      	strb	r2, [r3, #1]
        // Parse ChMask
        linkAdrParams->ChMask = ( uint16_t )payload[2];
 801628c:	687b      	ldr	r3, [r7, #4]
 801628e:	3302      	adds	r3, #2
 8016290:	781b      	ldrb	r3, [r3, #0]
 8016292:	461a      	mov	r2, r3
 8016294:	683b      	ldr	r3, [r7, #0]
 8016296:	809a      	strh	r2, [r3, #4]
        linkAdrParams->ChMask |= ( uint16_t )payload[3] << 8;
 8016298:	683b      	ldr	r3, [r7, #0]
 801629a:	889b      	ldrh	r3, [r3, #4]
 801629c:	b21a      	sxth	r2, r3
 801629e:	687b      	ldr	r3, [r7, #4]
 80162a0:	3303      	adds	r3, #3
 80162a2:	781b      	ldrb	r3, [r3, #0]
 80162a4:	021b      	lsls	r3, r3, #8
 80162a6:	b21b      	sxth	r3, r3
 80162a8:	4313      	orrs	r3, r2
 80162aa:	b21b      	sxth	r3, r3
 80162ac:	b29a      	uxth	r2, r3
 80162ae:	683b      	ldr	r3, [r7, #0]
 80162b0:	809a      	strh	r2, [r3, #4]
        // Parse ChMaskCtrl and nbRep
        linkAdrParams->NbRep = payload[4];
 80162b2:	687b      	ldr	r3, [r7, #4]
 80162b4:	791a      	ldrb	r2, [r3, #4]
 80162b6:	683b      	ldr	r3, [r7, #0]
 80162b8:	701a      	strb	r2, [r3, #0]
        linkAdrParams->ChMaskCtrl = ( linkAdrParams->NbRep >> 4 ) & 0x07;
 80162ba:	683b      	ldr	r3, [r7, #0]
 80162bc:	781b      	ldrb	r3, [r3, #0]
 80162be:	091b      	lsrs	r3, r3, #4
 80162c0:	b2db      	uxtb	r3, r3
 80162c2:	f003 0307 	and.w	r3, r3, #7
 80162c6:	b2da      	uxtb	r2, r3
 80162c8:	683b      	ldr	r3, [r7, #0]
 80162ca:	70da      	strb	r2, [r3, #3]
        linkAdrParams->NbRep &= 0x0F;
 80162cc:	683b      	ldr	r3, [r7, #0]
 80162ce:	781b      	ldrb	r3, [r3, #0]
 80162d0:	f003 030f 	and.w	r3, r3, #15
 80162d4:	b2da      	uxtb	r2, r3
 80162d6:	683b      	ldr	r3, [r7, #0]
 80162d8:	701a      	strb	r2, [r3, #0]

        // LinkAdrReq has 4 bytes length + 1 byte CMD
        retIndex = 5;
 80162da:	2305      	movs	r3, #5
 80162dc:	73fb      	strb	r3, [r7, #15]
    }
    return retIndex;
 80162de:	7bfb      	ldrb	r3, [r7, #15]
}
 80162e0:	4618      	mov	r0, r3
 80162e2:	3714      	adds	r7, #20
 80162e4:	46bd      	mov	sp, r7
 80162e6:	bc80      	pop	{r7}
 80162e8:	4770      	bx	lr

080162ea <RegionCommonLinkAdrReqVerifyParams>:

uint8_t RegionCommonLinkAdrReqVerifyParams( RegionCommonLinkAdrReqVerifyParams_t* verifyParams, int8_t* dr, int8_t* txPow, uint8_t* nbRep )
{
 80162ea:	b5b0      	push	{r4, r5, r7, lr}
 80162ec:	b088      	sub	sp, #32
 80162ee:	af02      	add	r7, sp, #8
 80162f0:	60f8      	str	r0, [r7, #12]
 80162f2:	60b9      	str	r1, [r7, #8]
 80162f4:	607a      	str	r2, [r7, #4]
 80162f6:	603b      	str	r3, [r7, #0]
    uint8_t status = verifyParams->Status;
 80162f8:	68fb      	ldr	r3, [r7, #12]
 80162fa:	791b      	ldrb	r3, [r3, #4]
 80162fc:	75fb      	strb	r3, [r7, #23]
    int8_t datarate = verifyParams->Datarate;
 80162fe:	68fb      	ldr	r3, [r7, #12]
 8016300:	799b      	ldrb	r3, [r3, #6]
 8016302:	75bb      	strb	r3, [r7, #22]
    int8_t txPower = verifyParams->TxPower;
 8016304:	68fb      	ldr	r3, [r7, #12]
 8016306:	79db      	ldrb	r3, [r3, #7]
 8016308:	757b      	strb	r3, [r7, #21]
    int8_t nbRepetitions = verifyParams->NbRep;
 801630a:	68fb      	ldr	r3, [r7, #12]
 801630c:	7a1b      	ldrb	r3, [r3, #8]
 801630e:	753b      	strb	r3, [r7, #20]

    // Handle the case when ADR is off.
    if( verifyParams->AdrEnabled == false )
 8016310:	68fb      	ldr	r3, [r7, #12]
 8016312:	795b      	ldrb	r3, [r3, #5]
 8016314:	f083 0301 	eor.w	r3, r3, #1
 8016318:	b2db      	uxtb	r3, r3
 801631a:	2b00      	cmp	r3, #0
 801631c:	d008      	beq.n	8016330 <RegionCommonLinkAdrReqVerifyParams+0x46>
    {
        // When ADR is off, we are allowed to change the channels mask
        nbRepetitions = verifyParams->CurrentNbRep;
 801631e:	68fb      	ldr	r3, [r7, #12]
 8016320:	7adb      	ldrb	r3, [r3, #11]
 8016322:	753b      	strb	r3, [r7, #20]
        datarate =  verifyParams->CurrentDatarate;
 8016324:	68fb      	ldr	r3, [r7, #12]
 8016326:	7a5b      	ldrb	r3, [r3, #9]
 8016328:	75bb      	strb	r3, [r7, #22]
        txPower =  verifyParams->CurrentTxPower;
 801632a:	68fb      	ldr	r3, [r7, #12]
 801632c:	7a9b      	ldrb	r3, [r3, #10]
 801632e:	757b      	strb	r3, [r7, #21]
    }

    if( status != 0 )
 8016330:	7dfb      	ldrb	r3, [r7, #23]
 8016332:	2b00      	cmp	r3, #0
 8016334:	d04a      	beq.n	80163cc <RegionCommonLinkAdrReqVerifyParams+0xe2>
    {
        // Verify datarate. The variable phyParam. Value contains the minimum allowed datarate.
        if( datarate == 0x0F )
 8016336:	f997 3016 	ldrsb.w	r3, [r7, #22]
 801633a:	2b0f      	cmp	r3, #15
 801633c:	d103      	bne.n	8016346 <RegionCommonLinkAdrReqVerifyParams+0x5c>
        { // 0xF means that the device MUST ignore that field, and keep the current parameter value.
            datarate =  verifyParams->CurrentDatarate;
 801633e:	68fb      	ldr	r3, [r7, #12]
 8016340:	7a5b      	ldrb	r3, [r3, #9]
 8016342:	75bb      	strb	r3, [r7, #22]
 8016344:	e01d      	b.n	8016382 <RegionCommonLinkAdrReqVerifyParams+0x98>
        }
        else if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 8016346:	68fb      	ldr	r3, [r7, #12]
 8016348:	7b18      	ldrb	r0, [r3, #12]
 801634a:	68fb      	ldr	r3, [r7, #12]
 801634c:	6919      	ldr	r1, [r3, #16]
 801634e:	68fb      	ldr	r3, [r7, #12]
 8016350:	f993 5014 	ldrsb.w	r5, [r3, #20]
 8016354:	68fb      	ldr	r3, [r7, #12]
 8016356:	f993 3015 	ldrsb.w	r3, [r3, #21]
 801635a:	68fa      	ldr	r2, [r7, #12]
 801635c:	6992      	ldr	r2, [r2, #24]
 801635e:	f997 4016 	ldrsb.w	r4, [r7, #22]
 8016362:	9201      	str	r2, [sp, #4]
 8016364:	9300      	str	r3, [sp, #0]
 8016366:	462b      	mov	r3, r5
 8016368:	4622      	mov	r2, r4
 801636a:	f7ff fd3a 	bl	8015de2 <RegionCommonChanVerifyDr>
 801636e:	4603      	mov	r3, r0
                                      verifyParams->MinDatarate, verifyParams->MaxDatarate, verifyParams->Channels  ) == false )
 8016370:	f083 0301 	eor.w	r3, r3, #1
 8016374:	b2db      	uxtb	r3, r3
        else if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 8016376:	2b00      	cmp	r3, #0
 8016378:	d003      	beq.n	8016382 <RegionCommonLinkAdrReqVerifyParams+0x98>
        {
            status &= 0xFD; // Datarate KO
 801637a:	7dfb      	ldrb	r3, [r7, #23]
 801637c:	f023 0302 	bic.w	r3, r3, #2
 8016380:	75fb      	strb	r3, [r7, #23]
        }

        // Verify tx power
        if( txPower == 0x0F )
 8016382:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8016386:	2b0f      	cmp	r3, #15
 8016388:	d103      	bne.n	8016392 <RegionCommonLinkAdrReqVerifyParams+0xa8>
        { // 0xF means that the device MUST ignore that field, and keep the current parameter value.
            txPower =  verifyParams->CurrentTxPower;
 801638a:	68fb      	ldr	r3, [r7, #12]
 801638c:	7a9b      	ldrb	r3, [r3, #10]
 801638e:	757b      	strb	r3, [r7, #21]
 8016390:	e01c      	b.n	80163cc <RegionCommonLinkAdrReqVerifyParams+0xe2>
        }
        else if( RegionCommonValueInRange( txPower, verifyParams->MaxTxPower, verifyParams->MinTxPower ) == 0 )
 8016392:	68fb      	ldr	r3, [r7, #12]
 8016394:	f993 101d 	ldrsb.w	r1, [r3, #29]
 8016398:	68fb      	ldr	r3, [r7, #12]
 801639a:	f993 201c 	ldrsb.w	r2, [r3, #28]
 801639e:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80163a2:	4618      	mov	r0, r3
 80163a4:	f7ff fd8f 	bl	8015ec6 <RegionCommonValueInRange>
 80163a8:	4603      	mov	r3, r0
 80163aa:	2b00      	cmp	r3, #0
 80163ac:	d10e      	bne.n	80163cc <RegionCommonLinkAdrReqVerifyParams+0xe2>
        {
            // Verify if the maximum TX power is exceeded
            if( verifyParams->MaxTxPower > txPower )
 80163ae:	68fb      	ldr	r3, [r7, #12]
 80163b0:	f993 301d 	ldrsb.w	r3, [r3, #29]
 80163b4:	f997 2015 	ldrsb.w	r2, [r7, #21]
 80163b8:	429a      	cmp	r2, r3
 80163ba:	da03      	bge.n	80163c4 <RegionCommonLinkAdrReqVerifyParams+0xda>
            { // Apply maximum TX power. Accept TX power.
                txPower = verifyParams->MaxTxPower;
 80163bc:	68fb      	ldr	r3, [r7, #12]
 80163be:	7f5b      	ldrb	r3, [r3, #29]
 80163c0:	757b      	strb	r3, [r7, #21]
 80163c2:	e003      	b.n	80163cc <RegionCommonLinkAdrReqVerifyParams+0xe2>
            }
            else
            {
                status &= 0xFB; // TxPower KO
 80163c4:	7dfb      	ldrb	r3, [r7, #23]
 80163c6:	f023 0304 	bic.w	r3, r3, #4
 80163ca:	75fb      	strb	r3, [r7, #23]
            }
        }
    }

    // If the status is ok, verify the NbRep
    if( status == 0x07 )
 80163cc:	7dfb      	ldrb	r3, [r7, #23]
 80163ce:	2b07      	cmp	r3, #7
 80163d0:	d105      	bne.n	80163de <RegionCommonLinkAdrReqVerifyParams+0xf4>
    {
        if( nbRepetitions == 0 )
 80163d2:	f997 3014 	ldrsb.w	r3, [r7, #20]
 80163d6:	2b00      	cmp	r3, #0
 80163d8:	d101      	bne.n	80163de <RegionCommonLinkAdrReqVerifyParams+0xf4>
        { // Set nbRep to the default value of 1.
            nbRepetitions = 1;
 80163da:	2301      	movs	r3, #1
 80163dc:	753b      	strb	r3, [r7, #20]
        }
    }

    // Apply changes
    *dr = datarate;
 80163de:	68bb      	ldr	r3, [r7, #8]
 80163e0:	7dba      	ldrb	r2, [r7, #22]
 80163e2:	701a      	strb	r2, [r3, #0]
    *txPow = txPower;
 80163e4:	687b      	ldr	r3, [r7, #4]
 80163e6:	7d7a      	ldrb	r2, [r7, #21]
 80163e8:	701a      	strb	r2, [r3, #0]
    *nbRep = nbRepetitions;
 80163ea:	7d3a      	ldrb	r2, [r7, #20]
 80163ec:	683b      	ldr	r3, [r7, #0]
 80163ee:	701a      	strb	r2, [r3, #0]

    return status;
 80163f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80163f2:	4618      	mov	r0, r3
 80163f4:	3718      	adds	r7, #24
 80163f6:	46bd      	mov	sp, r7
 80163f8:	bdb0      	pop	{r4, r5, r7, pc}
	...

080163fc <RegionCommonComputeSymbolTimeLoRa>:

uint32_t RegionCommonComputeSymbolTimeLoRa( uint8_t phyDr, uint32_t bandwidthInHz )
{
 80163fc:	b480      	push	{r7}
 80163fe:	b083      	sub	sp, #12
 8016400:	af00      	add	r7, sp, #0
 8016402:	4603      	mov	r3, r0
 8016404:	6039      	str	r1, [r7, #0]
 8016406:	71fb      	strb	r3, [r7, #7]
    return ( 1 << phyDr ) * 1000000 / bandwidthInHz;
 8016408:	79fb      	ldrb	r3, [r7, #7]
 801640a:	4a06      	ldr	r2, [pc, #24]	@ (8016424 <RegionCommonComputeSymbolTimeLoRa+0x28>)
 801640c:	fa02 f303 	lsl.w	r3, r2, r3
 8016410:	461a      	mov	r2, r3
 8016412:	683b      	ldr	r3, [r7, #0]
 8016414:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8016418:	4618      	mov	r0, r3
 801641a:	370c      	adds	r7, #12
 801641c:	46bd      	mov	sp, r7
 801641e:	bc80      	pop	{r7}
 8016420:	4770      	bx	lr
 8016422:	bf00      	nop
 8016424:	000f4240 	.word	0x000f4240

08016428 <RegionCommonComputeSymbolTimeFsk>:

uint32_t RegionCommonComputeSymbolTimeFsk( uint8_t phyDrInKbps )
{
 8016428:	b480      	push	{r7}
 801642a:	b083      	sub	sp, #12
 801642c:	af00      	add	r7, sp, #0
 801642e:	4603      	mov	r3, r0
 8016430:	71fb      	strb	r3, [r7, #7]
    return 8000 / ( uint32_t )phyDrInKbps; // 1 symbol equals 1 byte
 8016432:	79fb      	ldrb	r3, [r7, #7]
 8016434:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8016438:	fbb2 f3f3 	udiv	r3, r2, r3
}
 801643c:	4618      	mov	r0, r3
 801643e:	370c      	adds	r7, #12
 8016440:	46bd      	mov	sp, r7
 8016442:	bc80      	pop	{r7}
 8016444:	4770      	bx	lr
	...

08016448 <RegionCommonComputeRxWindowParameters>:

void RegionCommonComputeRxWindowParameters( uint32_t tSymbolInUs, uint8_t minRxSymbols, uint32_t rxErrorInMs, uint32_t wakeUpTimeInMs, uint32_t* windowTimeoutInSymbols, int32_t* windowOffsetInMs )
{
 8016448:	b480      	push	{r7}
 801644a:	b085      	sub	sp, #20
 801644c:	af00      	add	r7, sp, #0
 801644e:	60f8      	str	r0, [r7, #12]
 8016450:	607a      	str	r2, [r7, #4]
 8016452:	603b      	str	r3, [r7, #0]
 8016454:	460b      	mov	r3, r1
 8016456:	72fb      	strb	r3, [r7, #11]
    *windowTimeoutInSymbols = MAX( DIV_CEIL( ( ( 2 * minRxSymbols - 8 ) * tSymbolInUs + 2 * ( rxErrorInMs * 1000 ) ),  tSymbolInUs ), minRxSymbols ); // Computed number of symbols
 8016458:	7afa      	ldrb	r2, [r7, #11]
 801645a:	7afb      	ldrb	r3, [r7, #11]
 801645c:	3b04      	subs	r3, #4
 801645e:	4619      	mov	r1, r3
 8016460:	68fb      	ldr	r3, [r7, #12]
 8016462:	fb03 f101 	mul.w	r1, r3, r1
 8016466:	687b      	ldr	r3, [r7, #4]
 8016468:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 801646c:	fb00 f303 	mul.w	r3, r0, r3
 8016470:	440b      	add	r3, r1
 8016472:	005b      	lsls	r3, r3, #1
 8016474:	2b00      	cmp	r3, #0
 8016476:	d013      	beq.n	80164a0 <RegionCommonComputeRxWindowParameters+0x58>
 8016478:	7afb      	ldrb	r3, [r7, #11]
 801647a:	3b04      	subs	r3, #4
 801647c:	4619      	mov	r1, r3
 801647e:	68fb      	ldr	r3, [r7, #12]
 8016480:	fb03 f101 	mul.w	r1, r3, r1
 8016484:	687b      	ldr	r3, [r7, #4]
 8016486:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 801648a:	fb00 f303 	mul.w	r3, r0, r3
 801648e:	440b      	add	r3, r1
 8016490:	0059      	lsls	r1, r3, #1
 8016492:	68fb      	ldr	r3, [r7, #12]
 8016494:	440b      	add	r3, r1
 8016496:	1e59      	subs	r1, r3, #1
 8016498:	68fb      	ldr	r3, [r7, #12]
 801649a:	fbb1 f3f3 	udiv	r3, r1, r3
 801649e:	e00f      	b.n	80164c0 <RegionCommonComputeRxWindowParameters+0x78>
 80164a0:	7afb      	ldrb	r3, [r7, #11]
 80164a2:	3b04      	subs	r3, #4
 80164a4:	4619      	mov	r1, r3
 80164a6:	68fb      	ldr	r3, [r7, #12]
 80164a8:	fb03 f101 	mul.w	r1, r3, r1
 80164ac:	687b      	ldr	r3, [r7, #4]
 80164ae:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80164b2:	fb00 f303 	mul.w	r3, r0, r3
 80164b6:	440b      	add	r3, r1
 80164b8:	0059      	lsls	r1, r3, #1
 80164ba:	68fb      	ldr	r3, [r7, #12]
 80164bc:	fbb1 f3f3 	udiv	r3, r1, r3
 80164c0:	429a      	cmp	r2, r3
 80164c2:	bf38      	it	cc
 80164c4:	461a      	movcc	r2, r3
 80164c6:	69bb      	ldr	r3, [r7, #24]
 80164c8:	601a      	str	r2, [r3, #0]
    *windowOffsetInMs = ( int32_t )DIV_CEIL( ( int32_t )( 4 * tSymbolInUs ) -
 80164ca:	68fb      	ldr	r3, [r7, #12]
 80164cc:	009b      	lsls	r3, r3, #2
 80164ce:	4619      	mov	r1, r3
 80164d0:	69bb      	ldr	r3, [r7, #24]
 80164d2:	681b      	ldr	r3, [r3, #0]
 80164d4:	68fa      	ldr	r2, [r7, #12]
 80164d6:	fb02 f303 	mul.w	r3, r2, r3
 80164da:	2b00      	cmp	r3, #0
 80164dc:	d007      	beq.n	80164ee <RegionCommonComputeRxWindowParameters+0xa6>
 80164de:	69bb      	ldr	r3, [r7, #24]
 80164e0:	681b      	ldr	r3, [r3, #0]
 80164e2:	68fa      	ldr	r2, [r7, #12]
 80164e4:	fb02 f303 	mul.w	r3, r2, r3
 80164e8:	3301      	adds	r3, #1
 80164ea:	085b      	lsrs	r3, r3, #1
 80164ec:	e005      	b.n	80164fa <RegionCommonComputeRxWindowParameters+0xb2>
 80164ee:	69bb      	ldr	r3, [r7, #24]
 80164f0:	681b      	ldr	r3, [r3, #0]
 80164f2:	68fa      	ldr	r2, [r7, #12]
 80164f4:	fb02 f303 	mul.w	r3, r2, r3
 80164f8:	085b      	lsrs	r3, r3, #1
 80164fa:	1acb      	subs	r3, r1, r3
 80164fc:	683a      	ldr	r2, [r7, #0]
 80164fe:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8016502:	fb01 f202 	mul.w	r2, r1, r2
 8016506:	1a9b      	subs	r3, r3, r2
 8016508:	2b00      	cmp	r3, #0
 801650a:	dd27      	ble.n	801655c <RegionCommonComputeRxWindowParameters+0x114>
 801650c:	68fb      	ldr	r3, [r7, #12]
 801650e:	009b      	lsls	r3, r3, #2
 8016510:	4619      	mov	r1, r3
 8016512:	69bb      	ldr	r3, [r7, #24]
 8016514:	681b      	ldr	r3, [r3, #0]
 8016516:	68fa      	ldr	r2, [r7, #12]
 8016518:	fb02 f303 	mul.w	r3, r2, r3
 801651c:	2b00      	cmp	r3, #0
 801651e:	d007      	beq.n	8016530 <RegionCommonComputeRxWindowParameters+0xe8>
 8016520:	69bb      	ldr	r3, [r7, #24]
 8016522:	681b      	ldr	r3, [r3, #0]
 8016524:	68fa      	ldr	r2, [r7, #12]
 8016526:	fb02 f303 	mul.w	r3, r2, r3
 801652a:	3301      	adds	r3, #1
 801652c:	085b      	lsrs	r3, r3, #1
 801652e:	e005      	b.n	801653c <RegionCommonComputeRxWindowParameters+0xf4>
 8016530:	69bb      	ldr	r3, [r7, #24]
 8016532:	681b      	ldr	r3, [r3, #0]
 8016534:	68fa      	ldr	r2, [r7, #12]
 8016536:	fb02 f303 	mul.w	r3, r2, r3
 801653a:	085b      	lsrs	r3, r3, #1
 801653c:	1acb      	subs	r3, r1, r3
 801653e:	683a      	ldr	r2, [r7, #0]
 8016540:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8016544:	fb01 f202 	mul.w	r2, r1, r2
 8016548:	1a9b      	subs	r3, r3, r2
 801654a:	f203 33e7 	addw	r3, r3, #999	@ 0x3e7
 801654e:	4a19      	ldr	r2, [pc, #100]	@ (80165b4 <RegionCommonComputeRxWindowParameters+0x16c>)
 8016550:	fb82 1203 	smull	r1, r2, r2, r3
 8016554:	1192      	asrs	r2, r2, #6
 8016556:	17db      	asrs	r3, r3, #31
 8016558:	1ad3      	subs	r3, r2, r3
 801655a:	e024      	b.n	80165a6 <RegionCommonComputeRxWindowParameters+0x15e>
 801655c:	68fb      	ldr	r3, [r7, #12]
 801655e:	009b      	lsls	r3, r3, #2
 8016560:	4619      	mov	r1, r3
 8016562:	69bb      	ldr	r3, [r7, #24]
 8016564:	681b      	ldr	r3, [r3, #0]
 8016566:	68fa      	ldr	r2, [r7, #12]
 8016568:	fb02 f303 	mul.w	r3, r2, r3
 801656c:	2b00      	cmp	r3, #0
 801656e:	d007      	beq.n	8016580 <RegionCommonComputeRxWindowParameters+0x138>
 8016570:	69bb      	ldr	r3, [r7, #24]
 8016572:	681b      	ldr	r3, [r3, #0]
 8016574:	68fa      	ldr	r2, [r7, #12]
 8016576:	fb02 f303 	mul.w	r3, r2, r3
 801657a:	3301      	adds	r3, #1
 801657c:	085b      	lsrs	r3, r3, #1
 801657e:	e005      	b.n	801658c <RegionCommonComputeRxWindowParameters+0x144>
 8016580:	69bb      	ldr	r3, [r7, #24]
 8016582:	681b      	ldr	r3, [r3, #0]
 8016584:	68fa      	ldr	r2, [r7, #12]
 8016586:	fb02 f303 	mul.w	r3, r2, r3
 801658a:	085b      	lsrs	r3, r3, #1
 801658c:	1acb      	subs	r3, r1, r3
 801658e:	683a      	ldr	r2, [r7, #0]
 8016590:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8016594:	fb01 f202 	mul.w	r2, r1, r2
 8016598:	1a9b      	subs	r3, r3, r2
 801659a:	4a06      	ldr	r2, [pc, #24]	@ (80165b4 <RegionCommonComputeRxWindowParameters+0x16c>)
 801659c:	fb82 1203 	smull	r1, r2, r2, r3
 80165a0:	1192      	asrs	r2, r2, #6
 80165a2:	17db      	asrs	r3, r3, #31
 80165a4:	1ad3      	subs	r3, r2, r3
 80165a6:	69fa      	ldr	r2, [r7, #28]
 80165a8:	6013      	str	r3, [r2, #0]
                                               ( int32_t )DIV_CEIL( ( *windowTimeoutInSymbols * tSymbolInUs ), 2 ) -
                                               ( int32_t )( wakeUpTimeInMs * 1000 ), 1000 );
}
 80165aa:	bf00      	nop
 80165ac:	3714      	adds	r7, #20
 80165ae:	46bd      	mov	sp, r7
 80165b0:	bc80      	pop	{r7}
 80165b2:	4770      	bx	lr
 80165b4:	10624dd3 	.word	0x10624dd3

080165b8 <RegionCommonComputeTxPower>:

int8_t RegionCommonComputeTxPower( int8_t txPowerIndex, float maxEirp, float antennaGain )
{
 80165b8:	b580      	push	{r7, lr}
 80165ba:	b086      	sub	sp, #24
 80165bc:	af00      	add	r7, sp, #0
 80165be:	4603      	mov	r3, r0
 80165c0:	60b9      	str	r1, [r7, #8]
 80165c2:	607a      	str	r2, [r7, #4]
 80165c4:	73fb      	strb	r3, [r7, #15]
    int8_t phyTxPower = 0;
 80165c6:	2300      	movs	r3, #0
 80165c8:	75fb      	strb	r3, [r7, #23]

    phyTxPower = ( int8_t )floor( ( maxEirp - ( txPowerIndex * 2U ) ) - antennaGain );
 80165ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80165ce:	005b      	lsls	r3, r3, #1
 80165d0:	4618      	mov	r0, r3
 80165d2:	f7ea f8fb 	bl	80007cc <__aeabi_ui2f>
 80165d6:	4603      	mov	r3, r0
 80165d8:	4619      	mov	r1, r3
 80165da:	68b8      	ldr	r0, [r7, #8]
 80165dc:	f7ea f844 	bl	8000668 <__aeabi_fsub>
 80165e0:	4603      	mov	r3, r0
 80165e2:	6879      	ldr	r1, [r7, #4]
 80165e4:	4618      	mov	r0, r3
 80165e6:	f7ea f83f 	bl	8000668 <__aeabi_fsub>
 80165ea:	4603      	mov	r3, r0
 80165ec:	4618      	mov	r0, r3
 80165ee:	f7e9 ff2f 	bl	8000450 <__aeabi_f2d>
 80165f2:	4602      	mov	r2, r0
 80165f4:	460b      	mov	r3, r1
 80165f6:	4610      	mov	r0, r2
 80165f8:	4619      	mov	r1, r3
 80165fa:	f005 f825 	bl	801b648 <floor>
 80165fe:	4602      	mov	r2, r0
 8016600:	460b      	mov	r3, r1
 8016602:	4610      	mov	r0, r2
 8016604:	4619      	mov	r1, r3
 8016606:	f7ea f803 	bl	8000610 <__aeabi_d2iz>
 801660a:	4603      	mov	r3, r0
 801660c:	75fb      	strb	r3, [r7, #23]

    return phyTxPower;
 801660e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8016612:	4618      	mov	r0, r3
 8016614:	3718      	adds	r7, #24
 8016616:	46bd      	mov	sp, r7
 8016618:	bd80      	pop	{r7, pc}

0801661a <RegionCommonCountNbOfEnabledChannels>:
    /* ST_WORKAROUND_END */
}

void RegionCommonCountNbOfEnabledChannels( RegionCommonCountNbOfEnabledChannelsParams_t* countNbOfEnabledChannelsParams,
                                           uint8_t* enabledChannels, uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels )
{
 801661a:	b590      	push	{r4, r7, lr}
 801661c:	b087      	sub	sp, #28
 801661e:	af00      	add	r7, sp, #0
 8016620:	60f8      	str	r0, [r7, #12]
 8016622:	60b9      	str	r1, [r7, #8]
 8016624:	607a      	str	r2, [r7, #4]
 8016626:	603b      	str	r3, [r7, #0]
    uint8_t nbChannelCount = 0;
 8016628:	2300      	movs	r3, #0
 801662a:	75fb      	strb	r3, [r7, #23]
    uint8_t nbRestrictedChannelsCount = 0;
 801662c:	2300      	movs	r3, #0
 801662e:	75bb      	strb	r3, [r7, #22]

    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 8016630:	2300      	movs	r3, #0
 8016632:	757b      	strb	r3, [r7, #21]
 8016634:	2300      	movs	r3, #0
 8016636:	753b      	strb	r3, [r7, #20]
 8016638:	e09c      	b.n	8016774 <RegionCommonCountNbOfEnabledChannels+0x15a>
    {
        for( uint8_t j = 0; j < 16; j++ )
 801663a:	2300      	movs	r3, #0
 801663c:	74fb      	strb	r3, [r7, #19]
 801663e:	e08f      	b.n	8016760 <RegionCommonCountNbOfEnabledChannels+0x146>
        {
            if( ( countNbOfEnabledChannelsParams->ChannelsMask[k] & ( 1 << j ) ) != 0 )
 8016640:	68fb      	ldr	r3, [r7, #12]
 8016642:	685a      	ldr	r2, [r3, #4]
 8016644:	7d3b      	ldrb	r3, [r7, #20]
 8016646:	005b      	lsls	r3, r3, #1
 8016648:	4413      	add	r3, r2
 801664a:	881b      	ldrh	r3, [r3, #0]
 801664c:	461a      	mov	r2, r3
 801664e:	7cfb      	ldrb	r3, [r7, #19]
 8016650:	fa42 f303 	asr.w	r3, r2, r3
 8016654:	f003 0301 	and.w	r3, r3, #1
 8016658:	2b00      	cmp	r3, #0
 801665a:	d07e      	beq.n	801675a <RegionCommonCountNbOfEnabledChannels+0x140>
            {
                if( countNbOfEnabledChannelsParams->Channels[i + j].Frequency == 0 )
 801665c:	68fb      	ldr	r3, [r7, #12]
 801665e:	689a      	ldr	r2, [r3, #8]
 8016660:	7d79      	ldrb	r1, [r7, #21]
 8016662:	7cfb      	ldrb	r3, [r7, #19]
 8016664:	440b      	add	r3, r1
 8016666:	4619      	mov	r1, r3
 8016668:	460b      	mov	r3, r1
 801666a:	005b      	lsls	r3, r3, #1
 801666c:	440b      	add	r3, r1
 801666e:	009b      	lsls	r3, r3, #2
 8016670:	4413      	add	r3, r2
 8016672:	681b      	ldr	r3, [r3, #0]
 8016674:	2b00      	cmp	r3, #0
 8016676:	d06b      	beq.n	8016750 <RegionCommonCountNbOfEnabledChannels+0x136>
                { // Check if the channel is enabled
                    continue;
                }
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 8016678:	68fb      	ldr	r3, [r7, #12]
 801667a:	781b      	ldrb	r3, [r3, #0]
 801667c:	f083 0301 	eor.w	r3, r3, #1
 8016680:	b2db      	uxtb	r3, r3
 8016682:	2b00      	cmp	r3, #0
 8016684:	d011      	beq.n	80166aa <RegionCommonCountNbOfEnabledChannels+0x90>
                    ( countNbOfEnabledChannelsParams->JoinChannels != NULL ) )
 8016686:	68fb      	ldr	r3, [r7, #12]
 8016688:	695b      	ldr	r3, [r3, #20]
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 801668a:	2b00      	cmp	r3, #0
 801668c:	d00d      	beq.n	80166aa <RegionCommonCountNbOfEnabledChannels+0x90>
                {
                    if( ( countNbOfEnabledChannelsParams->JoinChannels[k] & ( 1 << j ) ) == 0 )
 801668e:	68fb      	ldr	r3, [r7, #12]
 8016690:	695a      	ldr	r2, [r3, #20]
 8016692:	7d3b      	ldrb	r3, [r7, #20]
 8016694:	005b      	lsls	r3, r3, #1
 8016696:	4413      	add	r3, r2
 8016698:	881b      	ldrh	r3, [r3, #0]
 801669a:	461a      	mov	r2, r3
 801669c:	7cfb      	ldrb	r3, [r7, #19]
 801669e:	fa42 f303 	asr.w	r3, r2, r3
 80166a2:	f003 0301 	and.w	r3, r3, #1
 80166a6:	2b00      	cmp	r3, #0
 80166a8:	d054      	beq.n	8016754 <RegionCommonCountNbOfEnabledChannels+0x13a>
                    {
                        continue;
                    }
                }
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 80166aa:	68fb      	ldr	r3, [r7, #12]
 80166ac:	785b      	ldrb	r3, [r3, #1]
 80166ae:	b258      	sxtb	r0, r3
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Min,
 80166b0:	68fb      	ldr	r3, [r7, #12]
 80166b2:	689a      	ldr	r2, [r3, #8]
 80166b4:	7d79      	ldrb	r1, [r7, #21]
 80166b6:	7cfb      	ldrb	r3, [r7, #19]
 80166b8:	440b      	add	r3, r1
 80166ba:	4619      	mov	r1, r3
 80166bc:	460b      	mov	r3, r1
 80166be:	005b      	lsls	r3, r3, #1
 80166c0:	440b      	add	r3, r1
 80166c2:	009b      	lsls	r3, r3, #2
 80166c4:	4413      	add	r3, r2
 80166c6:	7a1b      	ldrb	r3, [r3, #8]
 80166c8:	f343 0303 	sbfx	r3, r3, #0, #4
 80166cc:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 80166ce:	461c      	mov	r4, r3
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Max ) == false )
 80166d0:	68fb      	ldr	r3, [r7, #12]
 80166d2:	689a      	ldr	r2, [r3, #8]
 80166d4:	7d79      	ldrb	r1, [r7, #21]
 80166d6:	7cfb      	ldrb	r3, [r7, #19]
 80166d8:	440b      	add	r3, r1
 80166da:	4619      	mov	r1, r3
 80166dc:	460b      	mov	r3, r1
 80166de:	005b      	lsls	r3, r3, #1
 80166e0:	440b      	add	r3, r1
 80166e2:	009b      	lsls	r3, r3, #2
 80166e4:	4413      	add	r3, r2
 80166e6:	7a1b      	ldrb	r3, [r3, #8]
 80166e8:	f343 1303 	sbfx	r3, r3, #4, #4
 80166ec:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 80166ee:	461a      	mov	r2, r3
 80166f0:	4621      	mov	r1, r4
 80166f2:	f7ff fbe8 	bl	8015ec6 <RegionCommonValueInRange>
 80166f6:	4603      	mov	r3, r0
 80166f8:	2b00      	cmp	r3, #0
 80166fa:	d02d      	beq.n	8016758 <RegionCommonCountNbOfEnabledChannels+0x13e>
                { // Check if the current channel selection supports the given datarate
                    continue;
                }
                if( countNbOfEnabledChannelsParams->Bands[countNbOfEnabledChannelsParams->Channels[i + j].Band].ReadyForTransmission == false )
 80166fc:	68fb      	ldr	r3, [r7, #12]
 80166fe:	68da      	ldr	r2, [r3, #12]
 8016700:	68fb      	ldr	r3, [r7, #12]
 8016702:	6899      	ldr	r1, [r3, #8]
 8016704:	7d78      	ldrb	r0, [r7, #21]
 8016706:	7cfb      	ldrb	r3, [r7, #19]
 8016708:	4403      	add	r3, r0
 801670a:	4618      	mov	r0, r3
 801670c:	4603      	mov	r3, r0
 801670e:	005b      	lsls	r3, r3, #1
 8016710:	4403      	add	r3, r0
 8016712:	009b      	lsls	r3, r3, #2
 8016714:	440b      	add	r3, r1
 8016716:	7a5b      	ldrb	r3, [r3, #9]
 8016718:	4619      	mov	r1, r3
 801671a:	460b      	mov	r3, r1
 801671c:	005b      	lsls	r3, r3, #1
 801671e:	440b      	add	r3, r1
 8016720:	00db      	lsls	r3, r3, #3
 8016722:	4413      	add	r3, r2
 8016724:	7d1b      	ldrb	r3, [r3, #20]
 8016726:	f083 0301 	eor.w	r3, r3, #1
 801672a:	b2db      	uxtb	r3, r3
 801672c:	2b00      	cmp	r3, #0
 801672e:	d003      	beq.n	8016738 <RegionCommonCountNbOfEnabledChannels+0x11e>
                { // Check if the band is available for transmission
                    nbRestrictedChannelsCount++;
 8016730:	7dbb      	ldrb	r3, [r7, #22]
 8016732:	3301      	adds	r3, #1
 8016734:	75bb      	strb	r3, [r7, #22]
                    continue;
 8016736:	e010      	b.n	801675a <RegionCommonCountNbOfEnabledChannels+0x140>
                }
                enabledChannels[nbChannelCount++] = i + j;
 8016738:	7dfb      	ldrb	r3, [r7, #23]
 801673a:	1c5a      	adds	r2, r3, #1
 801673c:	75fa      	strb	r2, [r7, #23]
 801673e:	461a      	mov	r2, r3
 8016740:	68bb      	ldr	r3, [r7, #8]
 8016742:	4413      	add	r3, r2
 8016744:	7d79      	ldrb	r1, [r7, #21]
 8016746:	7cfa      	ldrb	r2, [r7, #19]
 8016748:	440a      	add	r2, r1
 801674a:	b2d2      	uxtb	r2, r2
 801674c:	701a      	strb	r2, [r3, #0]
 801674e:	e004      	b.n	801675a <RegionCommonCountNbOfEnabledChannels+0x140>
                    continue;
 8016750:	bf00      	nop
 8016752:	e002      	b.n	801675a <RegionCommonCountNbOfEnabledChannels+0x140>
                        continue;
 8016754:	bf00      	nop
 8016756:	e000      	b.n	801675a <RegionCommonCountNbOfEnabledChannels+0x140>
                    continue;
 8016758:	bf00      	nop
        for( uint8_t j = 0; j < 16; j++ )
 801675a:	7cfb      	ldrb	r3, [r7, #19]
 801675c:	3301      	adds	r3, #1
 801675e:	74fb      	strb	r3, [r7, #19]
 8016760:	7cfb      	ldrb	r3, [r7, #19]
 8016762:	2b0f      	cmp	r3, #15
 8016764:	f67f af6c 	bls.w	8016640 <RegionCommonCountNbOfEnabledChannels+0x26>
    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 8016768:	7d7b      	ldrb	r3, [r7, #21]
 801676a:	3310      	adds	r3, #16
 801676c:	757b      	strb	r3, [r7, #21]
 801676e:	7d3b      	ldrb	r3, [r7, #20]
 8016770:	3301      	adds	r3, #1
 8016772:	753b      	strb	r3, [r7, #20]
 8016774:	7d7b      	ldrb	r3, [r7, #21]
 8016776:	b29a      	uxth	r2, r3
 8016778:	68fb      	ldr	r3, [r7, #12]
 801677a:	8a1b      	ldrh	r3, [r3, #16]
 801677c:	429a      	cmp	r2, r3
 801677e:	f4ff af5c 	bcc.w	801663a <RegionCommonCountNbOfEnabledChannels+0x20>
            }
        }
    }
    *nbEnabledChannels = nbChannelCount;
 8016782:	687b      	ldr	r3, [r7, #4]
 8016784:	7dfa      	ldrb	r2, [r7, #23]
 8016786:	701a      	strb	r2, [r3, #0]
    *nbRestrictedChannels = nbRestrictedChannelsCount;
 8016788:	683b      	ldr	r3, [r7, #0]
 801678a:	7dba      	ldrb	r2, [r7, #22]
 801678c:	701a      	strb	r2, [r3, #0]
}
 801678e:	bf00      	nop
 8016790:	371c      	adds	r7, #28
 8016792:	46bd      	mov	sp, r7
 8016794:	bd90      	pop	{r4, r7, pc}

08016796 <RegionCommonIdentifyChannels>:

LoRaMacStatus_t RegionCommonIdentifyChannels( RegionCommonIdentifyChannelsParam_t* identifyChannelsParam,
                                              TimerTime_t* aggregatedTimeOff, uint8_t* enabledChannels,
                                              uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels,
                                              TimerTime_t* nextTxDelay )
{
 8016796:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016798:	b08b      	sub	sp, #44	@ 0x2c
 801679a:	af04      	add	r7, sp, #16
 801679c:	60f8      	str	r0, [r7, #12]
 801679e:	60b9      	str	r1, [r7, #8]
 80167a0:	607a      	str	r2, [r7, #4]
 80167a2:	603b      	str	r3, [r7, #0]
    TimerTime_t elapsed = TimerGetElapsedTime( identifyChannelsParam->LastAggrTx );
 80167a4:	68fb      	ldr	r3, [r7, #12]
 80167a6:	685b      	ldr	r3, [r3, #4]
 80167a8:	4618      	mov	r0, r3
 80167aa:	f004 fbc9 	bl	801af40 <UTIL_TIMER_GetElapsedTime>
 80167ae:	6178      	str	r0, [r7, #20]
    *nextTxDelay = identifyChannelsParam->AggrTimeOff - elapsed;
 80167b0:	68fb      	ldr	r3, [r7, #12]
 80167b2:	681a      	ldr	r2, [r3, #0]
 80167b4:	697b      	ldr	r3, [r7, #20]
 80167b6:	1ad2      	subs	r2, r2, r3
 80167b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80167ba:	601a      	str	r2, [r3, #0]
    *nbRestrictedChannels = 1;
 80167bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80167be:	2201      	movs	r2, #1
 80167c0:	701a      	strb	r2, [r3, #0]
    *nbEnabledChannels = 0;
 80167c2:	683b      	ldr	r3, [r7, #0]
 80167c4:	2200      	movs	r2, #0
 80167c6:	701a      	strb	r2, [r3, #0]

    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 80167c8:	68fb      	ldr	r3, [r7, #12]
 80167ca:	685b      	ldr	r3, [r3, #4]
 80167cc:	2b00      	cmp	r3, #0
 80167ce:	d004      	beq.n	80167da <RegionCommonIdentifyChannels+0x44>
        ( identifyChannelsParam->AggrTimeOff <= elapsed ) )
 80167d0:	68fb      	ldr	r3, [r7, #12]
 80167d2:	681b      	ldr	r3, [r3, #0]
    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 80167d4:	697a      	ldr	r2, [r7, #20]
 80167d6:	429a      	cmp	r2, r3
 80167d8:	d32b      	bcc.n	8016832 <RegionCommonIdentifyChannels+0x9c>
    {
        // Reset Aggregated time off
        *aggregatedTimeOff = 0;
 80167da:	68bb      	ldr	r3, [r7, #8]
 80167dc:	2200      	movs	r2, #0
 80167de:	601a      	str	r2, [r3, #0]

        // Update bands Time OFF
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 80167e0:	68fb      	ldr	r3, [r7, #12]
 80167e2:	69db      	ldr	r3, [r3, #28]
 80167e4:	781c      	ldrb	r4, [r3, #0]
                                                      identifyChannelsParam->CountNbOfEnabledChannelsParam->Bands,
 80167e6:	68fb      	ldr	r3, [r7, #12]
 80167e8:	69db      	ldr	r3, [r3, #28]
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 80167ea:	68dd      	ldr	r5, [r3, #12]
 80167ec:	68fb      	ldr	r3, [r7, #12]
 80167ee:	7a5e      	ldrb	r6, [r3, #9]
 80167f0:	68fb      	ldr	r3, [r7, #12]
 80167f2:	f893 c008 	ldrb.w	ip, [r3, #8]
 80167f6:	68fb      	ldr	r3, [r7, #12]
 80167f8:	7d1b      	ldrb	r3, [r3, #20]
 80167fa:	68fa      	ldr	r2, [r7, #12]
 80167fc:	6992      	ldr	r2, [r2, #24]
 80167fe:	9203      	str	r2, [sp, #12]
 8016800:	68fa      	ldr	r2, [r7, #12]
 8016802:	f10d 0e04 	add.w	lr, sp, #4
 8016806:	320c      	adds	r2, #12
 8016808:	e892 0003 	ldmia.w	r2, {r0, r1}
 801680c:	e88e 0003 	stmia.w	lr, {r0, r1}
 8016810:	9300      	str	r3, [sp, #0]
 8016812:	4663      	mov	r3, ip
 8016814:	4632      	mov	r2, r6
 8016816:	4629      	mov	r1, r5
 8016818:	4620      	mov	r0, r4
 801681a:	f7ff fc25 	bl	8016068 <RegionCommonUpdateBandTimeOff>
 801681e:	4602      	mov	r2, r0
 8016820:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016822:	601a      	str	r2, [r3, #0]
                                                      identifyChannelsParam->DutyCycleEnabled,
                                                      identifyChannelsParam->LastTxIsJoinRequest,
                                                      identifyChannelsParam->ElapsedTimeSinceStartUp,
                                                      identifyChannelsParam->ExpectedTimeOnAir );

        RegionCommonCountNbOfEnabledChannels( identifyChannelsParam->CountNbOfEnabledChannelsParam, enabledChannels,
 8016824:	68fb      	ldr	r3, [r7, #12]
 8016826:	69d8      	ldr	r0, [r3, #28]
 8016828:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801682a:	683a      	ldr	r2, [r7, #0]
 801682c:	6879      	ldr	r1, [r7, #4]
 801682e:	f7ff fef4 	bl	801661a <RegionCommonCountNbOfEnabledChannels>
                                              nbEnabledChannels, nbRestrictedChannels );
    }

    if( *nbEnabledChannels > 0 )
 8016832:	683b      	ldr	r3, [r7, #0]
 8016834:	781b      	ldrb	r3, [r3, #0]
 8016836:	2b00      	cmp	r3, #0
 8016838:	d004      	beq.n	8016844 <RegionCommonIdentifyChannels+0xae>
    {
        *nextTxDelay = 0;
 801683a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801683c:	2200      	movs	r2, #0
 801683e:	601a      	str	r2, [r3, #0]
        return LORAMAC_STATUS_OK;
 8016840:	2300      	movs	r3, #0
 8016842:	e006      	b.n	8016852 <RegionCommonIdentifyChannels+0xbc>
    }
    else if( *nbRestrictedChannels > 0 )
 8016844:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016846:	781b      	ldrb	r3, [r3, #0]
 8016848:	2b00      	cmp	r3, #0
 801684a:	d001      	beq.n	8016850 <RegionCommonIdentifyChannels+0xba>
    {
        return LORAMAC_STATUS_DUTYCYCLE_RESTRICTED;
 801684c:	230b      	movs	r3, #11
 801684e:	e000      	b.n	8016852 <RegionCommonIdentifyChannels+0xbc>
    }
    else
    {
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
 8016850:	230c      	movs	r3, #12
    }
}
 8016852:	4618      	mov	r0, r3
 8016854:	371c      	adds	r7, #28
 8016856:	46bd      	mov	sp, r7
 8016858:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801685a <RegionCommonGetNextLowerTxDr>:

int8_t RegionCommonGetNextLowerTxDr( RegionCommonGetNextLowerTxDrParams_t *params )
{
 801685a:	b5b0      	push	{r4, r5, r7, lr}
 801685c:	b086      	sub	sp, #24
 801685e:	af02      	add	r7, sp, #8
 8016860:	6078      	str	r0, [r7, #4]
    int8_t drLocal = params->CurrentDr;
 8016862:	687b      	ldr	r3, [r7, #4]
 8016864:	781b      	ldrb	r3, [r3, #0]
 8016866:	73fb      	strb	r3, [r7, #15]

    if( params->CurrentDr == params->MinDr )
 8016868:	687b      	ldr	r3, [r7, #4]
 801686a:	f993 2000 	ldrsb.w	r2, [r3]
 801686e:	687b      	ldr	r3, [r7, #4]
 8016870:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8016874:	429a      	cmp	r2, r3
 8016876:	d103      	bne.n	8016880 <RegionCommonGetNextLowerTxDr+0x26>
    {
        return params->MinDr;
 8016878:	687b      	ldr	r3, [r7, #4]
 801687a:	f993 3002 	ldrsb.w	r3, [r3, #2]
 801687e:	e026      	b.n	80168ce <RegionCommonGetNextLowerTxDr+0x74>
    }
    else
    {
        do
        {
            drLocal = ( drLocal - 1 );
 8016880:	7bfb      	ldrb	r3, [r7, #15]
 8016882:	3b01      	subs	r3, #1
 8016884:	b2db      	uxtb	r3, r3
 8016886:	73fb      	strb	r3, [r7, #15]
        } while( ( drLocal != params->MinDr ) &&
 8016888:	687b      	ldr	r3, [r7, #4]
 801688a:	f993 3002 	ldrsb.w	r3, [r3, #2]
 801688e:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8016892:	429a      	cmp	r2, r3
 8016894:	d019      	beq.n	80168ca <RegionCommonGetNextLowerTxDr+0x70>
                 ( RegionCommonChanVerifyDr( params->NbChannels, params->ChannelsMask, drLocal, params->MinDr, params->MaxDr, params->Channels  ) == false ) );
 8016896:	687b      	ldr	r3, [r7, #4]
 8016898:	78d8      	ldrb	r0, [r3, #3]
 801689a:	687b      	ldr	r3, [r7, #4]
 801689c:	6859      	ldr	r1, [r3, #4]
 801689e:	687b      	ldr	r3, [r7, #4]
 80168a0:	f993 5002 	ldrsb.w	r5, [r3, #2]
 80168a4:	687b      	ldr	r3, [r7, #4]
 80168a6:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80168aa:	687a      	ldr	r2, [r7, #4]
 80168ac:	6892      	ldr	r2, [r2, #8]
 80168ae:	f997 400f 	ldrsb.w	r4, [r7, #15]
 80168b2:	9201      	str	r2, [sp, #4]
 80168b4:	9300      	str	r3, [sp, #0]
 80168b6:	462b      	mov	r3, r5
 80168b8:	4622      	mov	r2, r4
 80168ba:	f7ff fa92 	bl	8015de2 <RegionCommonChanVerifyDr>
 80168be:	4603      	mov	r3, r0
 80168c0:	f083 0301 	eor.w	r3, r3, #1
 80168c4:	b2db      	uxtb	r3, r3
        } while( ( drLocal != params->MinDr ) &&
 80168c6:	2b00      	cmp	r3, #0
 80168c8:	d1da      	bne.n	8016880 <RegionCommonGetNextLowerTxDr+0x26>

        return drLocal;
 80168ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
    }
}
 80168ce:	4618      	mov	r0, r3
 80168d0:	3710      	adds	r7, #16
 80168d2:	46bd      	mov	sp, r7
 80168d4:	bdb0      	pop	{r4, r5, r7, pc}

080168d6 <RegionCommonLimitTxPower>:

int8_t RegionCommonLimitTxPower( int8_t txPower, int8_t maxBandTxPower )
{
 80168d6:	b480      	push	{r7}
 80168d8:	b083      	sub	sp, #12
 80168da:	af00      	add	r7, sp, #0
 80168dc:	4603      	mov	r3, r0
 80168de:	460a      	mov	r2, r1
 80168e0:	71fb      	strb	r3, [r7, #7]
 80168e2:	4613      	mov	r3, r2
 80168e4:	71bb      	strb	r3, [r7, #6]
    // Limit tx power to the band max
    return MAX( txPower, maxBandTxPower );
 80168e6:	f997 2006 	ldrsb.w	r2, [r7, #6]
 80168ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80168ee:	4293      	cmp	r3, r2
 80168f0:	bfb8      	it	lt
 80168f2:	4613      	movlt	r3, r2
 80168f4:	b25b      	sxtb	r3, r3
}
 80168f6:	4618      	mov	r0, r3
 80168f8:	370c      	adds	r7, #12
 80168fa:	46bd      	mov	sp, r7
 80168fc:	bc80      	pop	{r7}
 80168fe:	4770      	bx	lr

08016900 <RegionCommonGetBandwidth>:

uint32_t RegionCommonGetBandwidth( uint32_t drIndex, const uint32_t* bandwidths )
{
 8016900:	b480      	push	{r7}
 8016902:	b083      	sub	sp, #12
 8016904:	af00      	add	r7, sp, #0
 8016906:	6078      	str	r0, [r7, #4]
 8016908:	6039      	str	r1, [r7, #0]
    switch( bandwidths[drIndex] )
 801690a:	687b      	ldr	r3, [r7, #4]
 801690c:	009b      	lsls	r3, r3, #2
 801690e:	683a      	ldr	r2, [r7, #0]
 8016910:	4413      	add	r3, r2
 8016912:	681b      	ldr	r3, [r3, #0]
 8016914:	4a07      	ldr	r2, [pc, #28]	@ (8016934 <RegionCommonGetBandwidth+0x34>)
 8016916:	4293      	cmp	r3, r2
 8016918:	d004      	beq.n	8016924 <RegionCommonGetBandwidth+0x24>
 801691a:	4a07      	ldr	r2, [pc, #28]	@ (8016938 <RegionCommonGetBandwidth+0x38>)
 801691c:	4293      	cmp	r3, r2
 801691e:	d003      	beq.n	8016928 <RegionCommonGetBandwidth+0x28>
    {
        default:
        case 125000:
            return 0;
 8016920:	2300      	movs	r3, #0
 8016922:	e002      	b.n	801692a <RegionCommonGetBandwidth+0x2a>
        case 250000:
            return 1;
 8016924:	2301      	movs	r3, #1
 8016926:	e000      	b.n	801692a <RegionCommonGetBandwidth+0x2a>
        case 500000:
            return 2;
 8016928:	2302      	movs	r3, #2
    }
}
 801692a:	4618      	mov	r0, r3
 801692c:	370c      	adds	r7, #12
 801692e:	46bd      	mov	sp, r7
 8016930:	bc80      	pop	{r7}
 8016932:	4770      	bx	lr
 8016934:	0003d090 	.word	0x0003d090
 8016938:	0007a120 	.word	0x0007a120

0801693c <RegionCommonRxConfigPrint>:

/* ST_WORKAROUND_BEGIN: Print Tx/Rx config */
void RegionCommonRxConfigPrint(LoRaMacRxSlot_t rxSlot, uint32_t frequency, int8_t dr)
{
 801693c:	b580      	push	{r7, lr}
 801693e:	b086      	sub	sp, #24
 8016940:	af04      	add	r7, sp, #16
 8016942:	4603      	mov	r3, r0
 8016944:	6039      	str	r1, [r7, #0]
 8016946:	71fb      	strb	r3, [r7, #7]
 8016948:	4613      	mov	r3, r2
 801694a:	71bb      	strb	r3, [r7, #6]
    if ( rxSlot < RX_SLOT_NONE )
 801694c:	79fb      	ldrb	r3, [r7, #7]
 801694e:	2b05      	cmp	r3, #5
 8016950:	d810      	bhi.n	8016974 <RegionCommonRxConfigPrint+0x38>
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX_%s on freq %d Hz at DR %d\r\n", EventRXSlotStrings[rxSlot], frequency, dr );
 8016952:	79fb      	ldrb	r3, [r7, #7]
 8016954:	4a0f      	ldr	r2, [pc, #60]	@ (8016994 <RegionCommonRxConfigPrint+0x58>)
 8016956:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801695a:	f997 2006 	ldrsb.w	r2, [r7, #6]
 801695e:	9202      	str	r2, [sp, #8]
 8016960:	683a      	ldr	r2, [r7, #0]
 8016962:	9201      	str	r2, [sp, #4]
 8016964:	9300      	str	r3, [sp, #0]
 8016966:	4b0c      	ldr	r3, [pc, #48]	@ (8016998 <RegionCommonRxConfigPrint+0x5c>)
 8016968:	2201      	movs	r2, #1
 801696a:	2100      	movs	r1, #0
 801696c:	2002      	movs	r0, #2
 801696e:	f004 fbc5 	bl	801b0fc <UTIL_ADV_TRACE_COND_FSend>
    }
    else
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
    }
}
 8016972:	e00a      	b.n	801698a <RegionCommonRxConfigPrint+0x4e>
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
 8016974:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8016978:	9301      	str	r3, [sp, #4]
 801697a:	683b      	ldr	r3, [r7, #0]
 801697c:	9300      	str	r3, [sp, #0]
 801697e:	4b07      	ldr	r3, [pc, #28]	@ (801699c <RegionCommonRxConfigPrint+0x60>)
 8016980:	2201      	movs	r2, #1
 8016982:	2100      	movs	r1, #0
 8016984:	2002      	movs	r0, #2
 8016986:	f004 fbb9 	bl	801b0fc <UTIL_ADV_TRACE_COND_FSend>
}
 801698a:	bf00      	nop
 801698c:	3708      	adds	r7, #8
 801698e:	46bd      	mov	sp, r7
 8016990:	bd80      	pop	{r7, pc}
 8016992:	bf00      	nop
 8016994:	20000128 	.word	0x20000128
 8016998:	0801bf3c 	.word	0x0801bf3c
 801699c:	0801bf5c 	.word	0x0801bf5c

080169a0 <RegionCommonTxConfigPrint>:

void RegionCommonTxConfigPrint(uint32_t frequency, int8_t dr)
{
 80169a0:	b580      	push	{r7, lr}
 80169a2:	b084      	sub	sp, #16
 80169a4:	af02      	add	r7, sp, #8
 80169a6:	6078      	str	r0, [r7, #4]
 80169a8:	460b      	mov	r3, r1
 80169aa:	70fb      	strb	r3, [r7, #3]
    MW_LOG(TS_ON, VLEVEL_M,  "TX on freq %d Hz at DR %d\r\n", frequency, dr );
 80169ac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80169b0:	9301      	str	r3, [sp, #4]
 80169b2:	687b      	ldr	r3, [r7, #4]
 80169b4:	9300      	str	r3, [sp, #0]
 80169b6:	4b05      	ldr	r3, [pc, #20]	@ (80169cc <RegionCommonTxConfigPrint+0x2c>)
 80169b8:	2201      	movs	r2, #1
 80169ba:	2100      	movs	r1, #0
 80169bc:	2002      	movs	r0, #2
 80169be:	f004 fb9d 	bl	801b0fc <UTIL_ADV_TRACE_COND_FSend>
}
 80169c2:	bf00      	nop
 80169c4:	3708      	adds	r7, #8
 80169c6:	46bd      	mov	sp, r7
 80169c8:	bd80      	pop	{r7, pc}
 80169ca:	bf00      	nop
 80169cc:	0801bf78 	.word	0x0801bf78

080169d0 <rand1>:
static uint32_t next = 1;

static int32_t rand1( void );

static int32_t rand1( void )
{
 80169d0:	b480      	push	{r7}
 80169d2:	af00      	add	r7, sp, #0
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
 80169d4:	4b0d      	ldr	r3, [pc, #52]	@ (8016a0c <rand1+0x3c>)
 80169d6:	681b      	ldr	r3, [r3, #0]
 80169d8:	4a0d      	ldr	r2, [pc, #52]	@ (8016a10 <rand1+0x40>)
 80169da:	fb02 f303 	mul.w	r3, r2, r3
 80169de:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 80169e2:	3339      	adds	r3, #57	@ 0x39
 80169e4:	4a09      	ldr	r2, [pc, #36]	@ (8016a0c <rand1+0x3c>)
 80169e6:	6013      	str	r3, [r2, #0]
 80169e8:	4b08      	ldr	r3, [pc, #32]	@ (8016a0c <rand1+0x3c>)
 80169ea:	681a      	ldr	r2, [r3, #0]
 80169ec:	2303      	movs	r3, #3
 80169ee:	fba3 1302 	umull	r1, r3, r3, r2
 80169f2:	1ad1      	subs	r1, r2, r3
 80169f4:	0849      	lsrs	r1, r1, #1
 80169f6:	440b      	add	r3, r1
 80169f8:	0f99      	lsrs	r1, r3, #30
 80169fa:	460b      	mov	r3, r1
 80169fc:	07db      	lsls	r3, r3, #31
 80169fe:	1a5b      	subs	r3, r3, r1
 8016a00:	1ad1      	subs	r1, r2, r3
 8016a02:	460b      	mov	r3, r1
}
 8016a04:	4618      	mov	r0, r3
 8016a06:	46bd      	mov	sp, r7
 8016a08:	bc80      	pop	{r7}
 8016a0a:	4770      	bx	lr
 8016a0c:	20000140 	.word	0x20000140
 8016a10:	41c64e6d 	.word	0x41c64e6d

08016a14 <srand1>:

void srand1( uint32_t seed )
{
 8016a14:	b480      	push	{r7}
 8016a16:	b083      	sub	sp, #12
 8016a18:	af00      	add	r7, sp, #0
 8016a1a:	6078      	str	r0, [r7, #4]
    next = seed;
 8016a1c:	4a03      	ldr	r2, [pc, #12]	@ (8016a2c <srand1+0x18>)
 8016a1e:	687b      	ldr	r3, [r7, #4]
 8016a20:	6013      	str	r3, [r2, #0]
}
 8016a22:	bf00      	nop
 8016a24:	370c      	adds	r7, #12
 8016a26:	46bd      	mov	sp, r7
 8016a28:	bc80      	pop	{r7}
 8016a2a:	4770      	bx	lr
 8016a2c:	20000140 	.word	0x20000140

08016a30 <randr>:
// Standard random functions redefinition end

int32_t randr( int32_t min, int32_t max )
{
 8016a30:	b580      	push	{r7, lr}
 8016a32:	b082      	sub	sp, #8
 8016a34:	af00      	add	r7, sp, #0
 8016a36:	6078      	str	r0, [r7, #4]
 8016a38:	6039      	str	r1, [r7, #0]
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
 8016a3a:	f7ff ffc9 	bl	80169d0 <rand1>
 8016a3e:	4602      	mov	r2, r0
 8016a40:	6839      	ldr	r1, [r7, #0]
 8016a42:	687b      	ldr	r3, [r7, #4]
 8016a44:	1acb      	subs	r3, r1, r3
 8016a46:	3301      	adds	r3, #1
 8016a48:	fb92 f1f3 	sdiv	r1, r2, r3
 8016a4c:	fb01 f303 	mul.w	r3, r1, r3
 8016a50:	1ad2      	subs	r2, r2, r3
 8016a52:	687b      	ldr	r3, [r7, #4]
 8016a54:	4413      	add	r3, r2
}
 8016a56:	4618      	mov	r0, r3
 8016a58:	3708      	adds	r7, #8
 8016a5a:	46bd      	mov	sp, r7
 8016a5c:	bd80      	pop	{r7, pc}

08016a5e <memcpy1>:

void memcpy1( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 8016a5e:	b480      	push	{r7}
 8016a60:	b085      	sub	sp, #20
 8016a62:	af00      	add	r7, sp, #0
 8016a64:	60f8      	str	r0, [r7, #12]
 8016a66:	60b9      	str	r1, [r7, #8]
 8016a68:	4613      	mov	r3, r2
 8016a6a:	80fb      	strh	r3, [r7, #6]
    while( size-- )
 8016a6c:	e007      	b.n	8016a7e <memcpy1+0x20>
    {
        *dst++ = *src++;
 8016a6e:	68ba      	ldr	r2, [r7, #8]
 8016a70:	1c53      	adds	r3, r2, #1
 8016a72:	60bb      	str	r3, [r7, #8]
 8016a74:	68fb      	ldr	r3, [r7, #12]
 8016a76:	1c59      	adds	r1, r3, #1
 8016a78:	60f9      	str	r1, [r7, #12]
 8016a7a:	7812      	ldrb	r2, [r2, #0]
 8016a7c:	701a      	strb	r2, [r3, #0]
    while( size-- )
 8016a7e:	88fb      	ldrh	r3, [r7, #6]
 8016a80:	1e5a      	subs	r2, r3, #1
 8016a82:	80fa      	strh	r2, [r7, #6]
 8016a84:	2b00      	cmp	r3, #0
 8016a86:	d1f2      	bne.n	8016a6e <memcpy1+0x10>
    }
}
 8016a88:	bf00      	nop
 8016a8a:	bf00      	nop
 8016a8c:	3714      	adds	r7, #20
 8016a8e:	46bd      	mov	sp, r7
 8016a90:	bc80      	pop	{r7}
 8016a92:	4770      	bx	lr

08016a94 <memcpyr>:

void memcpyr( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 8016a94:	b480      	push	{r7}
 8016a96:	b085      	sub	sp, #20
 8016a98:	af00      	add	r7, sp, #0
 8016a9a:	60f8      	str	r0, [r7, #12]
 8016a9c:	60b9      	str	r1, [r7, #8]
 8016a9e:	4613      	mov	r3, r2
 8016aa0:	80fb      	strh	r3, [r7, #6]
    dst = dst + ( size - 1 );
 8016aa2:	88fb      	ldrh	r3, [r7, #6]
 8016aa4:	3b01      	subs	r3, #1
 8016aa6:	68fa      	ldr	r2, [r7, #12]
 8016aa8:	4413      	add	r3, r2
 8016aaa:	60fb      	str	r3, [r7, #12]
    while( size-- )
 8016aac:	e007      	b.n	8016abe <memcpyr+0x2a>
    {
        *dst-- = *src++;
 8016aae:	68ba      	ldr	r2, [r7, #8]
 8016ab0:	1c53      	adds	r3, r2, #1
 8016ab2:	60bb      	str	r3, [r7, #8]
 8016ab4:	68fb      	ldr	r3, [r7, #12]
 8016ab6:	1e59      	subs	r1, r3, #1
 8016ab8:	60f9      	str	r1, [r7, #12]
 8016aba:	7812      	ldrb	r2, [r2, #0]
 8016abc:	701a      	strb	r2, [r3, #0]
    while( size-- )
 8016abe:	88fb      	ldrh	r3, [r7, #6]
 8016ac0:	1e5a      	subs	r2, r3, #1
 8016ac2:	80fa      	strh	r2, [r7, #6]
 8016ac4:	2b00      	cmp	r3, #0
 8016ac6:	d1f2      	bne.n	8016aae <memcpyr+0x1a>
    }
}
 8016ac8:	bf00      	nop
 8016aca:	bf00      	nop
 8016acc:	3714      	adds	r7, #20
 8016ace:	46bd      	mov	sp, r7
 8016ad0:	bc80      	pop	{r7}
 8016ad2:	4770      	bx	lr

08016ad4 <memset1>:

void memset1( uint8_t *dst, uint8_t value, uint16_t size )
{
 8016ad4:	b480      	push	{r7}
 8016ad6:	b083      	sub	sp, #12
 8016ad8:	af00      	add	r7, sp, #0
 8016ada:	6078      	str	r0, [r7, #4]
 8016adc:	460b      	mov	r3, r1
 8016ade:	70fb      	strb	r3, [r7, #3]
 8016ae0:	4613      	mov	r3, r2
 8016ae2:	803b      	strh	r3, [r7, #0]
    while( size-- )
 8016ae4:	e004      	b.n	8016af0 <memset1+0x1c>
    {
        *dst++ = value;
 8016ae6:	687b      	ldr	r3, [r7, #4]
 8016ae8:	1c5a      	adds	r2, r3, #1
 8016aea:	607a      	str	r2, [r7, #4]
 8016aec:	78fa      	ldrb	r2, [r7, #3]
 8016aee:	701a      	strb	r2, [r3, #0]
    while( size-- )
 8016af0:	883b      	ldrh	r3, [r7, #0]
 8016af2:	1e5a      	subs	r2, r3, #1
 8016af4:	803a      	strh	r2, [r7, #0]
 8016af6:	2b00      	cmp	r3, #0
 8016af8:	d1f5      	bne.n	8016ae6 <memset1+0x12>
    }
}
 8016afa:	bf00      	nop
 8016afc:	bf00      	nop
 8016afe:	370c      	adds	r7, #12
 8016b00:	46bd      	mov	sp, r7
 8016b02:	bc80      	pop	{r7}
 8016b04:	4770      	bx	lr
	...

08016b08 <Crc32>:
        return '?';
    }
}

uint32_t Crc32( uint8_t *buffer, uint16_t length )
{
 8016b08:	b480      	push	{r7}
 8016b0a:	b085      	sub	sp, #20
 8016b0c:	af00      	add	r7, sp, #0
 8016b0e:	6078      	str	r0, [r7, #4]
 8016b10:	460b      	mov	r3, r1
 8016b12:	807b      	strh	r3, [r7, #2]
    // CRC initial value
    uint32_t crc = 0xFFFFFFFF;
 8016b14:	f04f 33ff 	mov.w	r3, #4294967295
 8016b18:	60fb      	str	r3, [r7, #12]

    if( buffer == NULL )
 8016b1a:	687b      	ldr	r3, [r7, #4]
 8016b1c:	2b00      	cmp	r3, #0
 8016b1e:	d101      	bne.n	8016b24 <Crc32+0x1c>
    {
        return 0;
 8016b20:	2300      	movs	r3, #0
 8016b22:	e026      	b.n	8016b72 <Crc32+0x6a>
    }

    for( uint16_t i = 0; i < length; ++i )
 8016b24:	2300      	movs	r3, #0
 8016b26:	817b      	strh	r3, [r7, #10]
 8016b28:	e01d      	b.n	8016b66 <Crc32+0x5e>
    {
        crc ^= ( uint32_t )buffer[i];
 8016b2a:	897b      	ldrh	r3, [r7, #10]
 8016b2c:	687a      	ldr	r2, [r7, #4]
 8016b2e:	4413      	add	r3, r2
 8016b30:	781b      	ldrb	r3, [r3, #0]
 8016b32:	461a      	mov	r2, r3
 8016b34:	68fb      	ldr	r3, [r7, #12]
 8016b36:	4053      	eors	r3, r2
 8016b38:	60fb      	str	r3, [r7, #12]
        for( uint16_t i = 0; i < 8; i++ )
 8016b3a:	2300      	movs	r3, #0
 8016b3c:	813b      	strh	r3, [r7, #8]
 8016b3e:	e00c      	b.n	8016b5a <Crc32+0x52>
        {
            crc = ( crc >> 1 ) ^ ( reversedPolynom & ~( ( crc & 0x01 ) - 1 ) );
 8016b40:	68fb      	ldr	r3, [r7, #12]
 8016b42:	085a      	lsrs	r2, r3, #1
 8016b44:	68fb      	ldr	r3, [r7, #12]
 8016b46:	f003 0301 	and.w	r3, r3, #1
 8016b4a:	425b      	negs	r3, r3
 8016b4c:	490b      	ldr	r1, [pc, #44]	@ (8016b7c <Crc32+0x74>)
 8016b4e:	400b      	ands	r3, r1
 8016b50:	4053      	eors	r3, r2
 8016b52:	60fb      	str	r3, [r7, #12]
        for( uint16_t i = 0; i < 8; i++ )
 8016b54:	893b      	ldrh	r3, [r7, #8]
 8016b56:	3301      	adds	r3, #1
 8016b58:	813b      	strh	r3, [r7, #8]
 8016b5a:	893b      	ldrh	r3, [r7, #8]
 8016b5c:	2b07      	cmp	r3, #7
 8016b5e:	d9ef      	bls.n	8016b40 <Crc32+0x38>
    for( uint16_t i = 0; i < length; ++i )
 8016b60:	897b      	ldrh	r3, [r7, #10]
 8016b62:	3301      	adds	r3, #1
 8016b64:	817b      	strh	r3, [r7, #10]
 8016b66:	897a      	ldrh	r2, [r7, #10]
 8016b68:	887b      	ldrh	r3, [r7, #2]
 8016b6a:	429a      	cmp	r2, r3
 8016b6c:	d3dd      	bcc.n	8016b2a <Crc32+0x22>
        }
    }

    return ~crc;
 8016b6e:	68fb      	ldr	r3, [r7, #12]
 8016b70:	43db      	mvns	r3, r3
}
 8016b72:	4618      	mov	r0, r3
 8016b74:	3714      	adds	r7, #20
 8016b76:	46bd      	mov	sp, r7
 8016b78:	bc80      	pop	{r7}
 8016b7a:	4770      	bx	lr
 8016b7c:	edb88320 	.word	0xedb88320

08016b80 <RadioInit>:
TimerEvent_t RxTimeoutTimer;

/* Private  functions ---------------------------------------------------------*/

static void RadioInit( RadioEvents_t *events )
{
 8016b80:	b580      	push	{r7, lr}
 8016b82:	b084      	sub	sp, #16
 8016b84:	af02      	add	r7, sp, #8
 8016b86:	6078      	str	r0, [r7, #4]
    RadioEvents = events;
 8016b88:	4a24      	ldr	r2, [pc, #144]	@ (8016c1c <RadioInit+0x9c>)
 8016b8a:	687b      	ldr	r3, [r7, #4]
 8016b8c:	6013      	str	r3, [r2, #0]

    SubgRf.RxContinuous = false;
 8016b8e:	4b24      	ldr	r3, [pc, #144]	@ (8016c20 <RadioInit+0xa0>)
 8016b90:	2200      	movs	r2, #0
 8016b92:	705a      	strb	r2, [r3, #1]
    SubgRf.TxTimeout = 0;
 8016b94:	4b22      	ldr	r3, [pc, #136]	@ (8016c20 <RadioInit+0xa0>)
 8016b96:	2200      	movs	r2, #0
 8016b98:	605a      	str	r2, [r3, #4]
    SubgRf.RxTimeout = 0;
 8016b9a:	4b21      	ldr	r3, [pc, #132]	@ (8016c20 <RadioInit+0xa0>)
 8016b9c:	2200      	movs	r2, #0
 8016b9e:	609a      	str	r2, [r3, #8]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8016ba0:	4b1f      	ldr	r3, [pc, #124]	@ (8016c20 <RadioInit+0xa0>)
 8016ba2:	2200      	movs	r2, #0
 8016ba4:	659a      	str	r2, [r3, #88]	@ 0x58

    SUBGRF_Init( RadioOnDioIrq );
 8016ba6:	481f      	ldr	r0, [pc, #124]	@ (8016c24 <RadioInit+0xa4>)
 8016ba8:	f001 ff88 	bl	8018abc <SUBGRF_Init>
    /*SubgRf.publicNetwork set to false*/
    SubgRf.PublicNetwork.Current = false;
 8016bac:	4b1c      	ldr	r3, [pc, #112]	@ (8016c20 <RadioInit+0xa0>)
 8016bae:	2200      	movs	r2, #0
 8016bb0:	735a      	strb	r2, [r3, #13]
    SubgRf.PublicNetwork.Previous = false;
 8016bb2:	4b1b      	ldr	r3, [pc, #108]	@ (8016c20 <RadioInit+0xa0>)
 8016bb4:	2200      	movs	r2, #0
 8016bb6:	731a      	strb	r2, [r3, #12]

    RADIO_IRQ_PROCESS_INIT();

    SUBGRF_SetRegulatorMode( );
 8016bb8:	f002 fa16 	bl	8018fe8 <SUBGRF_SetRegulatorMode>

    SUBGRF_SetBufferBaseAddress( 0x00, 0x00 );
 8016bbc:	2100      	movs	r1, #0
 8016bbe:	2000      	movs	r0, #0
 8016bc0:	f002 fdde 	bl	8019780 <SUBGRF_SetBufferBaseAddress>
    SUBGRF_SetTxParams( RFO_LP, 0, RADIO_RAMP_200_US );
 8016bc4:	2204      	movs	r2, #4
 8016bc6:	2100      	movs	r1, #0
 8016bc8:	2001      	movs	r0, #1
 8016bca:	f002 fb9b 	bl	8019304 <SUBGRF_SetTxParams>
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8016bce:	2300      	movs	r3, #0
 8016bd0:	2200      	movs	r2, #0
 8016bd2:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8016bd6:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8016bda:	f002 facb 	bl	8019174 <SUBGRF_SetDioIrqParams>

    /* ST_WORKAROUND_BEGIN: Sleep radio */
    RadioSleep();
 8016bde:	f000 fe83 	bl	80178e8 <RadioSleep>
    /* ST_WORKAROUND_END */
    // Initialize driver timeout timers
    TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
 8016be2:	2300      	movs	r3, #0
 8016be4:	9300      	str	r3, [sp, #0]
 8016be6:	4b10      	ldr	r3, [pc, #64]	@ (8016c28 <RadioInit+0xa8>)
 8016be8:	2200      	movs	r2, #0
 8016bea:	f04f 31ff 	mov.w	r1, #4294967295
 8016bee:	480f      	ldr	r0, [pc, #60]	@ (8016c2c <RadioInit+0xac>)
 8016bf0:	f003 ffd6 	bl	801aba0 <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutTimer, RadioOnRxTimeoutIrq );
 8016bf4:	2300      	movs	r3, #0
 8016bf6:	9300      	str	r3, [sp, #0]
 8016bf8:	4b0d      	ldr	r3, [pc, #52]	@ (8016c30 <RadioInit+0xb0>)
 8016bfa:	2200      	movs	r2, #0
 8016bfc:	f04f 31ff 	mov.w	r1, #4294967295
 8016c00:	480c      	ldr	r0, [pc, #48]	@ (8016c34 <RadioInit+0xb4>)
 8016c02:	f003 ffcd 	bl	801aba0 <UTIL_TIMER_Create>
    TimerStop( &TxTimeoutTimer );
 8016c06:	4809      	ldr	r0, [pc, #36]	@ (8016c2c <RadioInit+0xac>)
 8016c08:	f004 f86e 	bl	801ace8 <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutTimer );
 8016c0c:	4809      	ldr	r0, [pc, #36]	@ (8016c34 <RadioInit+0xb4>)
 8016c0e:	f004 f86b 	bl	801ace8 <UTIL_TIMER_Stop>
}
 8016c12:	bf00      	nop
 8016c14:	3708      	adds	r7, #8
 8016c16:	46bd      	mov	sp, r7
 8016c18:	bd80      	pop	{r7, pc}
 8016c1a:	bf00      	nop
 8016c1c:	20001a6c 	.word	0x20001a6c
 8016c20:	20001a70 	.word	0x20001a70
 8016c24:	08017cd1 	.word	0x08017cd1
 8016c28:	08017c59 	.word	0x08017c59
 8016c2c:	20001acc 	.word	0x20001acc
 8016c30:	08017c6d 	.word	0x08017c6d
 8016c34:	20001ae4 	.word	0x20001ae4

08016c38 <RadioGetStatus>:

static RadioState_t RadioGetStatus( void )
{
 8016c38:	b580      	push	{r7, lr}
 8016c3a:	af00      	add	r7, sp, #0
    switch( SUBGRF_GetOperatingMode( ) )
 8016c3c:	f001 ff80 	bl	8018b40 <SUBGRF_GetOperatingMode>
 8016c40:	4603      	mov	r3, r0
 8016c42:	2b07      	cmp	r3, #7
 8016c44:	d00a      	beq.n	8016c5c <RadioGetStatus+0x24>
 8016c46:	2b07      	cmp	r3, #7
 8016c48:	dc0a      	bgt.n	8016c60 <RadioGetStatus+0x28>
 8016c4a:	2b04      	cmp	r3, #4
 8016c4c:	d002      	beq.n	8016c54 <RadioGetStatus+0x1c>
 8016c4e:	2b05      	cmp	r3, #5
 8016c50:	d002      	beq.n	8016c58 <RadioGetStatus+0x20>
 8016c52:	e005      	b.n	8016c60 <RadioGetStatus+0x28>
    {
        case MODE_TX:
            return RF_TX_RUNNING;
 8016c54:	2302      	movs	r3, #2
 8016c56:	e004      	b.n	8016c62 <RadioGetStatus+0x2a>
        case MODE_RX:
            return RF_RX_RUNNING;
 8016c58:	2301      	movs	r3, #1
 8016c5a:	e002      	b.n	8016c62 <RadioGetStatus+0x2a>
        case MODE_CAD:
            return RF_CAD;
 8016c5c:	2303      	movs	r3, #3
 8016c5e:	e000      	b.n	8016c62 <RadioGetStatus+0x2a>
        default:
            return RF_IDLE;
 8016c60:	2300      	movs	r3, #0
    }
}
 8016c62:	4618      	mov	r0, r3
 8016c64:	bd80      	pop	{r7, pc}
	...

08016c68 <RadioSetModem>:

static void RadioSetModem( RadioModems_t modem )
{
 8016c68:	b580      	push	{r7, lr}
 8016c6a:	b082      	sub	sp, #8
 8016c6c:	af00      	add	r7, sp, #0
 8016c6e:	4603      	mov	r3, r0
 8016c70:	71fb      	strb	r3, [r7, #7]
    SubgRf.Modem = modem;
 8016c72:	4a2a      	ldr	r2, [pc, #168]	@ (8016d1c <RadioSetModem+0xb4>)
 8016c74:	79fb      	ldrb	r3, [r7, #7]
 8016c76:	7013      	strb	r3, [r2, #0]
    RFW_SetRadioModem( modem );
 8016c78:	79fb      	ldrb	r3, [r7, #7]
 8016c7a:	4618      	mov	r0, r3
 8016c7c:	f003 f943 	bl	8019f06 <RFW_SetRadioModem>
    switch( modem )
 8016c80:	79fb      	ldrb	r3, [r7, #7]
 8016c82:	2b05      	cmp	r3, #5
 8016c84:	d80e      	bhi.n	8016ca4 <RadioSetModem+0x3c>
 8016c86:	a201      	add	r2, pc, #4	@ (adr r2, 8016c8c <RadioSetModem+0x24>)
 8016c88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016c8c:	08016cb3 	.word	0x08016cb3
 8016c90:	08016cc1 	.word	0x08016cc1
 8016c94:	08016ca5 	.word	0x08016ca5
 8016c98:	08016ce7 	.word	0x08016ce7
 8016c9c:	08016cf5 	.word	0x08016cf5
 8016ca0:	08016d03 	.word	0x08016d03
    {
    default:
    case MODEM_MSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GMSK );
 8016ca4:	2003      	movs	r0, #3
 8016ca6:	f002 fb07 	bl	80192b8 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8016caa:	4b1c      	ldr	r3, [pc, #112]	@ (8016d1c <RadioSetModem+0xb4>)
 8016cac:	2200      	movs	r2, #0
 8016cae:	735a      	strb	r2, [r3, #13]
        break;
 8016cb0:	e02f      	b.n	8016d12 <RadioSetModem+0xaa>
    case MODEM_FSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 8016cb2:	2000      	movs	r0, #0
 8016cb4:	f002 fb00 	bl	80192b8 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8016cb8:	4b18      	ldr	r3, [pc, #96]	@ (8016d1c <RadioSetModem+0xb4>)
 8016cba:	2200      	movs	r2, #0
 8016cbc:	735a      	strb	r2, [r3, #13]
        break;
 8016cbe:	e028      	b.n	8016d12 <RadioSetModem+0xaa>
    case MODEM_LORA:
        SUBGRF_SetPacketType( PACKET_TYPE_LORA );
 8016cc0:	2001      	movs	r0, #1
 8016cc2:	f002 faf9 	bl	80192b8 <SUBGRF_SetPacketType>
        // Public/Private network register is reset when switching modems
        if( SubgRf.PublicNetwork.Current != SubgRf.PublicNetwork.Previous )
 8016cc6:	4b15      	ldr	r3, [pc, #84]	@ (8016d1c <RadioSetModem+0xb4>)
 8016cc8:	7b5a      	ldrb	r2, [r3, #13]
 8016cca:	4b14      	ldr	r3, [pc, #80]	@ (8016d1c <RadioSetModem+0xb4>)
 8016ccc:	7b1b      	ldrb	r3, [r3, #12]
 8016cce:	429a      	cmp	r2, r3
 8016cd0:	d01e      	beq.n	8016d10 <RadioSetModem+0xa8>
        {
            SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous;
 8016cd2:	4b12      	ldr	r3, [pc, #72]	@ (8016d1c <RadioSetModem+0xb4>)
 8016cd4:	7b1a      	ldrb	r2, [r3, #12]
 8016cd6:	4b11      	ldr	r3, [pc, #68]	@ (8016d1c <RadioSetModem+0xb4>)
 8016cd8:	735a      	strb	r2, [r3, #13]
            RadioSetPublicNetwork( SubgRf.PublicNetwork.Current );
 8016cda:	4b10      	ldr	r3, [pc, #64]	@ (8016d1c <RadioSetModem+0xb4>)
 8016cdc:	7b5b      	ldrb	r3, [r3, #13]
 8016cde:	4618      	mov	r0, r3
 8016ce0:	f000 ff84 	bl	8017bec <RadioSetPublicNetwork>
        }
        break;
 8016ce4:	e014      	b.n	8016d10 <RadioSetModem+0xa8>
    case MODEM_BPSK:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 8016ce6:	2002      	movs	r0, #2
 8016ce8:	f002 fae6 	bl	80192b8 <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8016cec:	4b0b      	ldr	r3, [pc, #44]	@ (8016d1c <RadioSetModem+0xb4>)
 8016cee:	2200      	movs	r2, #0
 8016cf0:	735a      	strb	r2, [r3, #13]
        break;
 8016cf2:	e00e      	b.n	8016d12 <RadioSetModem+0xaa>
#if (RADIO_SIGFOX_ENABLE == 1)
    case MODEM_SIGFOX_TX:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 8016cf4:	2002      	movs	r0, #2
 8016cf6:	f002 fadf 	bl	80192b8 <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8016cfa:	4b08      	ldr	r3, [pc, #32]	@ (8016d1c <RadioSetModem+0xb4>)
 8016cfc:	2200      	movs	r2, #0
 8016cfe:	735a      	strb	r2, [r3, #13]
        break;
 8016d00:	e007      	b.n	8016d12 <RadioSetModem+0xaa>
    case MODEM_SIGFOX_RX:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 8016d02:	2000      	movs	r0, #0
 8016d04:	f002 fad8 	bl	80192b8 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8016d08:	4b04      	ldr	r3, [pc, #16]	@ (8016d1c <RadioSetModem+0xb4>)
 8016d0a:	2200      	movs	r2, #0
 8016d0c:	735a      	strb	r2, [r3, #13]
        break;
 8016d0e:	e000      	b.n	8016d12 <RadioSetModem+0xaa>
        break;
 8016d10:	bf00      	nop
#endif /*RADIO_SIGFOX_ENABLE == 1*/
    }
}
 8016d12:	bf00      	nop
 8016d14:	3708      	adds	r7, #8
 8016d16:	46bd      	mov	sp, r7
 8016d18:	bd80      	pop	{r7, pc}
 8016d1a:	bf00      	nop
 8016d1c:	20001a70 	.word	0x20001a70

08016d20 <RadioSetChannel>:

static void RadioSetChannel( uint32_t freq )
{
 8016d20:	b580      	push	{r7, lr}
 8016d22:	b082      	sub	sp, #8
 8016d24:	af00      	add	r7, sp, #0
 8016d26:	6078      	str	r0, [r7, #4]
    SUBGRF_SetRfFrequency( freq );
 8016d28:	6878      	ldr	r0, [r7, #4]
 8016d2a:	f002 fa7f 	bl	801922c <SUBGRF_SetRfFrequency>
}
 8016d2e:	bf00      	nop
 8016d30:	3708      	adds	r7, #8
 8016d32:	46bd      	mov	sp, r7
 8016d34:	bd80      	pop	{r7, pc}

08016d36 <RadioIsChannelFree>:

static bool RadioIsChannelFree( uint32_t freq, uint32_t rxBandwidth, int16_t rssiThresh, uint32_t maxCarrierSenseTime )
{
 8016d36:	b580      	push	{r7, lr}
 8016d38:	b090      	sub	sp, #64	@ 0x40
 8016d3a:	af0a      	add	r7, sp, #40	@ 0x28
 8016d3c:	60f8      	str	r0, [r7, #12]
 8016d3e:	60b9      	str	r1, [r7, #8]
 8016d40:	603b      	str	r3, [r7, #0]
 8016d42:	4613      	mov	r3, r2
 8016d44:	80fb      	strh	r3, [r7, #6]
    bool status = true;
 8016d46:	2301      	movs	r3, #1
 8016d48:	75fb      	strb	r3, [r7, #23]
    int16_t rssi = 0;
 8016d4a:	2300      	movs	r3, #0
 8016d4c:	82bb      	strh	r3, [r7, #20]
    uint32_t carrierSenseTime = 0;
 8016d4e:	2300      	movs	r3, #0
 8016d50:	613b      	str	r3, [r7, #16]

    RadioStandby( );  /* ST_WORKAROUND: Prevent multiple sleeps with TXCO delay */
 8016d52:	f000 fddc 	bl	801790e <RadioStandby>

    RadioSetModem( MODEM_FSK );
 8016d56:	2000      	movs	r0, #0
 8016d58:	f7ff ff86 	bl	8016c68 <RadioSetModem>

    RadioSetChannel( freq );
 8016d5c:	68f8      	ldr	r0, [r7, #12]
 8016d5e:	f7ff ffdf 	bl	8016d20 <RadioSetChannel>

    // Set Rx bandwidth. Other parameters are not used.
    RadioSetRxConfig( MODEM_FSK, rxBandwidth, 600, 0, rxBandwidth, 3, 0, false,
 8016d62:	2301      	movs	r3, #1
 8016d64:	9309      	str	r3, [sp, #36]	@ 0x24
 8016d66:	2300      	movs	r3, #0
 8016d68:	9308      	str	r3, [sp, #32]
 8016d6a:	2300      	movs	r3, #0
 8016d6c:	9307      	str	r3, [sp, #28]
 8016d6e:	2300      	movs	r3, #0
 8016d70:	9306      	str	r3, [sp, #24]
 8016d72:	2300      	movs	r3, #0
 8016d74:	9305      	str	r3, [sp, #20]
 8016d76:	2300      	movs	r3, #0
 8016d78:	9304      	str	r3, [sp, #16]
 8016d7a:	2300      	movs	r3, #0
 8016d7c:	9303      	str	r3, [sp, #12]
 8016d7e:	2300      	movs	r3, #0
 8016d80:	9302      	str	r3, [sp, #8]
 8016d82:	2303      	movs	r3, #3
 8016d84:	9301      	str	r3, [sp, #4]
 8016d86:	68bb      	ldr	r3, [r7, #8]
 8016d88:	9300      	str	r3, [sp, #0]
 8016d8a:	2300      	movs	r3, #0
 8016d8c:	f44f 7216 	mov.w	r2, #600	@ 0x258
 8016d90:	68b9      	ldr	r1, [r7, #8]
 8016d92:	2000      	movs	r0, #0
 8016d94:	f000 f83c 	bl	8016e10 <RadioSetRxConfig>
                      0, false, 0, 0, false, true );
    RadioRx( 0 );
 8016d98:	2000      	movs	r0, #0
 8016d9a:	f000 fdbf 	bl	801791c <RadioRx>

    RADIO_DELAY_MS( RadioGetWakeupTime( ) );
 8016d9e:	f000 ff53 	bl	8017c48 <RadioGetWakeupTime>
 8016da2:	4603      	mov	r3, r0
 8016da4:	4618      	mov	r0, r3
 8016da6:	f7ea ffb3 	bl	8001d10 <HAL_Delay>

    carrierSenseTime = TimerGetCurrentTime( );
 8016daa:	f004 f8b7 	bl	801af1c <UTIL_TIMER_GetCurrentTime>
 8016dae:	6138      	str	r0, [r7, #16]

    // Perform carrier sense for maxCarrierSenseTime
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 8016db0:	e00d      	b.n	8016dce <RadioIsChannelFree+0x98>
    {
        rssi = RadioRssi( MODEM_FSK );
 8016db2:	2000      	movs	r0, #0
 8016db4:	f000 fe9a 	bl	8017aec <RadioRssi>
 8016db8:	4603      	mov	r3, r0
 8016dba:	82bb      	strh	r3, [r7, #20]

        if( rssi > rssiThresh )
 8016dbc:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8016dc0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8016dc4:	429a      	cmp	r2, r3
 8016dc6:	dd02      	ble.n	8016dce <RadioIsChannelFree+0x98>
        {
            status = false;
 8016dc8:	2300      	movs	r3, #0
 8016dca:	75fb      	strb	r3, [r7, #23]
            break;
 8016dcc:	e006      	b.n	8016ddc <RadioIsChannelFree+0xa6>
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 8016dce:	6938      	ldr	r0, [r7, #16]
 8016dd0:	f004 f8b6 	bl	801af40 <UTIL_TIMER_GetElapsedTime>
 8016dd4:	4602      	mov	r2, r0
 8016dd6:	683b      	ldr	r3, [r7, #0]
 8016dd8:	4293      	cmp	r3, r2
 8016dda:	d8ea      	bhi.n	8016db2 <RadioIsChannelFree+0x7c>
        }
    }
    RadioStandby( ); /* ST_WORKAROUND: Prevent multiple sleeps with TXCO delay */
 8016ddc:	f000 fd97 	bl	801790e <RadioStandby>

    return status;
 8016de0:	7dfb      	ldrb	r3, [r7, #23]
}
 8016de2:	4618      	mov	r0, r3
 8016de4:	3718      	adds	r7, #24
 8016de6:	46bd      	mov	sp, r7
 8016de8:	bd80      	pop	{r7, pc}

08016dea <RadioRandom>:

static uint32_t RadioRandom( void )
{
 8016dea:	b580      	push	{r7, lr}
 8016dec:	b082      	sub	sp, #8
 8016dee:	af00      	add	r7, sp, #0
    uint32_t rnd = 0;
 8016df0:	2300      	movs	r3, #0
 8016df2:	607b      	str	r3, [r7, #4]

    /*
     * Radio setup for random number generation
     */
    // Disable modem interrupts
    SUBGRF_SetDioIrqParams( IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8016df4:	2300      	movs	r3, #0
 8016df6:	2200      	movs	r2, #0
 8016df8:	2100      	movs	r1, #0
 8016dfa:	2000      	movs	r0, #0
 8016dfc:	f002 f9ba 	bl	8019174 <SUBGRF_SetDioIrqParams>

    rnd = SUBGRF_GetRandom();
 8016e00:	f001 ff6f 	bl	8018ce2 <SUBGRF_GetRandom>
 8016e04:	6078      	str	r0, [r7, #4]

    return rnd;
 8016e06:	687b      	ldr	r3, [r7, #4]
}
 8016e08:	4618      	mov	r0, r3
 8016e0a:	3708      	adds	r7, #8
 8016e0c:	46bd      	mov	sp, r7
 8016e0e:	bd80      	pop	{r7, pc}

08016e10 <RadioSetRxConfig>:
                              uint32_t bandwidthAfc, uint16_t preambleLen,
                              uint16_t symbTimeout, bool fixLen,
                              uint8_t payloadLen,
                              bool crcOn, bool freqHopOn, uint8_t hopPeriod,
                              bool iqInverted, bool rxContinuous )
{
 8016e10:	b580      	push	{r7, lr}
 8016e12:	b08a      	sub	sp, #40	@ 0x28
 8016e14:	af00      	add	r7, sp, #0
 8016e16:	60b9      	str	r1, [r7, #8]
 8016e18:	607a      	str	r2, [r7, #4]
 8016e1a:	461a      	mov	r2, r3
 8016e1c:	4603      	mov	r3, r0
 8016e1e:	73fb      	strb	r3, [r7, #15]
 8016e20:	4613      	mov	r3, r2
 8016e22:	73bb      	strb	r3, [r7, #14]
#if (RADIO_SIGFOX_ENABLE == 1)
    uint8_t modReg;
#endif
    SubgRf.RxContinuous = rxContinuous;
 8016e24:	4ab9      	ldr	r2, [pc, #740]	@ (801710c <RadioSetRxConfig+0x2fc>)
 8016e26:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8016e2a:	7053      	strb	r3, [r2, #1]
    RFW_DeInit(); /* ST_WORKAROUND: Switch Off FwPacketDecoding by default */
 8016e2c:	f003 f829 	bl	8019e82 <RFW_DeInit>
    if( rxContinuous == true )
 8016e30:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8016e34:	2b00      	cmp	r3, #0
 8016e36:	d001      	beq.n	8016e3c <RadioSetRxConfig+0x2c>
    {
        symbTimeout = 0;
 8016e38:	2300      	movs	r3, #0
 8016e3a:	873b      	strh	r3, [r7, #56]	@ 0x38
    }
    if( fixLen == true )
 8016e3c:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8016e40:	2b00      	cmp	r3, #0
 8016e42:	d004      	beq.n	8016e4e <RadioSetRxConfig+0x3e>
    {
        MaxPayloadLength = payloadLen;
 8016e44:	4ab2      	ldr	r2, [pc, #712]	@ (8017110 <RadioSetRxConfig+0x300>)
 8016e46:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8016e4a:	7013      	strb	r3, [r2, #0]
 8016e4c:	e002      	b.n	8016e54 <RadioSetRxConfig+0x44>
    }
    else
    {
        MaxPayloadLength = 0xFF;
 8016e4e:	4bb0      	ldr	r3, [pc, #704]	@ (8017110 <RadioSetRxConfig+0x300>)
 8016e50:	22ff      	movs	r2, #255	@ 0xff
 8016e52:	701a      	strb	r2, [r3, #0]
    }

    switch( modem )
 8016e54:	7bfb      	ldrb	r3, [r7, #15]
 8016e56:	2b05      	cmp	r3, #5
 8016e58:	d009      	beq.n	8016e6e <RadioSetRxConfig+0x5e>
 8016e5a:	2b05      	cmp	r3, #5
 8016e5c:	f300 81ca 	bgt.w	80171f4 <RadioSetRxConfig+0x3e4>
 8016e60:	2b00      	cmp	r3, #0
 8016e62:	f000 80bf 	beq.w	8016fe4 <RadioSetRxConfig+0x1d4>
 8016e66:	2b01      	cmp	r3, #1
 8016e68:	f000 8124 	beq.w	80170b4 <RadioSetRxConfig+0x2a4>
            // Timeout Max, Timeout handled directly in SetRx function
            SubgRf.RxTimeout = 0xFFFF;

            break;
        default:
            break;
 8016e6c:	e1c2      	b.n	80171f4 <RadioSetRxConfig+0x3e4>
            SUBGRF_SetStopRxTimerOnPreambleDetect( true );
 8016e6e:	2001      	movs	r0, #1
 8016e70:	f002 f87c 	bl	8018f6c <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8016e74:	4ba5      	ldr	r3, [pc, #660]	@ (801710c <RadioSetRxConfig+0x2fc>)
 8016e76:	2200      	movs	r2, #0
 8016e78:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8016e7c:	4aa3      	ldr	r2, [pc, #652]	@ (801710c <RadioSetRxConfig+0x2fc>)
 8016e7e:	687b      	ldr	r3, [r7, #4]
 8016e80:	63d3      	str	r3, [r2, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_05;
 8016e82:	4ba2      	ldr	r3, [pc, #648]	@ (801710c <RadioSetRxConfig+0x2fc>)
 8016e84:	2209      	movs	r2, #9
 8016e86:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            SubgRf.ModulationParams.Params.Gfsk.Fdev = 800;
 8016e8a:	4ba0      	ldr	r3, [pc, #640]	@ (801710c <RadioSetRxConfig+0x2fc>)
 8016e8c:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8016e90:	641a      	str	r2, [r3, #64]	@ 0x40
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8016e92:	68b8      	ldr	r0, [r7, #8]
 8016e94:	f002 ff28 	bl	8019ce8 <SUBGRF_GetFskBandwidthRegValue>
 8016e98:	4603      	mov	r3, r0
 8016e9a:	461a      	mov	r2, r3
 8016e9c:	4b9b      	ldr	r3, [pc, #620]	@ (801710c <RadioSetRxConfig+0x2fc>)
 8016e9e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8016ea2:	4b9a      	ldr	r3, [pc, #616]	@ (801710c <RadioSetRxConfig+0x2fc>)
 8016ea4:	2200      	movs	r2, #0
 8016ea6:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8016ea8:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8016eaa:	00db      	lsls	r3, r3, #3
 8016eac:	b29a      	uxth	r2, r3
 8016eae:	4b97      	ldr	r3, [pc, #604]	@ (801710c <RadioSetRxConfig+0x2fc>)
 8016eb0:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_OFF;
 8016eb2:	4b96      	ldr	r3, [pc, #600]	@ (801710c <RadioSetRxConfig+0x2fc>)
 8016eb4:	2200      	movs	r2, #0
 8016eb6:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 2 << 3; // convert byte into bit
 8016eb8:	4b94      	ldr	r3, [pc, #592]	@ (801710c <RadioSetRxConfig+0x2fc>)
 8016eba:	2210      	movs	r2, #16
 8016ebc:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8016ebe:	4b93      	ldr	r3, [pc, #588]	@ (801710c <RadioSetRxConfig+0x2fc>)
 8016ec0:	2200      	movs	r2, #0
 8016ec2:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = RADIO_PACKET_FIXED_LENGTH;
 8016ec4:	4b91      	ldr	r3, [pc, #580]	@ (801710c <RadioSetRxConfig+0x2fc>)
 8016ec6:	2200      	movs	r2, #0
 8016ec8:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 8016eca:	4b91      	ldr	r3, [pc, #580]	@ (8017110 <RadioSetRxConfig+0x300>)
 8016ecc:	781a      	ldrb	r2, [r3, #0]
 8016ece:	4b8f      	ldr	r3, [pc, #572]	@ (801710c <RadioSetRxConfig+0x2fc>)
 8016ed0:	759a      	strb	r2, [r3, #22]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8016ed2:	4b8e      	ldr	r3, [pc, #568]	@ (801710c <RadioSetRxConfig+0x2fc>)
 8016ed4:	2201      	movs	r2, #1
 8016ed6:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREE_OFF;
 8016ed8:	4b8c      	ldr	r3, [pc, #560]	@ (801710c <RadioSetRxConfig+0x2fc>)
 8016eda:	2200      	movs	r2, #0
 8016edc:	761a      	strb	r2, [r3, #24]
            RadioSetModem( MODEM_SIGFOX_RX );
 8016ede:	2005      	movs	r0, #5
 8016ee0:	f7ff fec2 	bl	8016c68 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8016ee4:	488b      	ldr	r0, [pc, #556]	@ (8017114 <RadioSetRxConfig+0x304>)
 8016ee6:	f002 fadb 	bl	80194a0 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8016eea:	488b      	ldr	r0, [pc, #556]	@ (8017118 <RadioSetRxConfig+0x308>)
 8016eec:	f002 fbaa 	bl	8019644 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){0xB2, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8016ef0:	4a8a      	ldr	r2, [pc, #552]	@ (801711c <RadioSetRxConfig+0x30c>)
 8016ef2:	f107 031c 	add.w	r3, r7, #28
 8016ef6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8016efa:	e883 0003 	stmia.w	r3, {r0, r1}
 8016efe:	f107 031c 	add.w	r3, r7, #28
 8016f02:	4618      	mov	r0, r3
 8016f04:	f001 fe6b 	bl	8018bde <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8016f08:	f240 10ff 	movw	r0, #511	@ 0x1ff
 8016f0c:	f001 feb6 	bl	8018c7c <SUBGRF_SetWhiteningSeed>
            modReg= RadioRead(SUBGHZ_AGCGFORSTCFGR);
 8016f10:	f640 00b8 	movw	r0, #2232	@ 0x8b8
 8016f14:	f000 fe08 	bl	8017b28 <RadioRead>
 8016f18:	4603      	mov	r3, r0
 8016f1a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            modReg&=RADIO_BIT_MASK(4);
 8016f1e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8016f22:	f023 0310 	bic.w	r3, r3, #16
 8016f26:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            RadioWrite(SUBGHZ_AGCGFORSTCFGR, modReg);
 8016f2a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8016f2e:	4619      	mov	r1, r3
 8016f30:	f640 00b8 	movw	r0, #2232	@ 0x8b8
 8016f34:	f000 fde6 	bl	8017b04 <RadioWrite>
            RadioWrite(SUBGHZ_AGCGFORSTPOWTHR, 0x4 );
 8016f38:	2104      	movs	r1, #4
 8016f3a:	f640 00b9 	movw	r0, #2233	@ 0x8b9
 8016f3e:	f000 fde1 	bl	8017b04 <RadioWrite>
            modReg= RadioRead(SUBGHZ_AGCRSSICTL0R);
 8016f42:	f640 009b 	movw	r0, #2203	@ 0x89b
 8016f46:	f000 fdef 	bl	8017b28 <RadioRead>
 8016f4a:	4603      	mov	r3, r0
 8016f4c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            modReg&=( RADIO_BIT_MASK(2) & RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 8016f50:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8016f54:	f023 031c 	bic.w	r3, r3, #28
 8016f58:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            RadioWrite(SUBGHZ_AGCRSSICTL0R, (modReg| (0x1<<3) ) );
 8016f5c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8016f60:	f043 0308 	orr.w	r3, r3, #8
 8016f64:	b2db      	uxtb	r3, r3
 8016f66:	4619      	mov	r1, r3
 8016f68:	f640 009b 	movw	r0, #2203	@ 0x89b
 8016f6c:	f000 fdca 	bl	8017b04 <RadioWrite>
            modReg= RadioRead(SUBGHZ_GAFCR);
 8016f70:	f240 60d1 	movw	r0, #1745	@ 0x6d1
 8016f74:	f000 fdd8 	bl	8017b28 <RadioRead>
 8016f78:	4603      	mov	r3, r0
 8016f7a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            modReg&=( RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 8016f7e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8016f82:	f023 0318 	bic.w	r3, r3, #24
 8016f86:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            RadioWrite(SUBGHZ_GAFCR, (modReg| (0x3<<3) ));
 8016f8a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8016f8e:	f043 0318 	orr.w	r3, r3, #24
 8016f92:	b2db      	uxtb	r3, r3
 8016f94:	4619      	mov	r1, r3
 8016f96:	f240 60d1 	movw	r0, #1745	@ 0x6d1
 8016f9a:	f000 fdb3 	bl	8017b04 <RadioWrite>
            modReg= RadioRead(SUBGHZ_GBSYNCR);
 8016f9e:	f240 60ac 	movw	r0, #1708	@ 0x6ac
 8016fa2:	f000 fdc1 	bl	8017b28 <RadioRead>
 8016fa6:	4603      	mov	r3, r0
 8016fa8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            modReg&=( RADIO_BIT_MASK(4) & RADIO_BIT_MASK(5) & RADIO_BIT_MASK(6) );
 8016fac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8016fb0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8016fb4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            RadioWrite(SUBGHZ_GBSYNCR, (modReg| (0x5<<4) ));
 8016fb8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8016fbc:	f043 0350 	orr.w	r3, r3, #80	@ 0x50
 8016fc0:	b2db      	uxtb	r3, r3
 8016fc2:	4619      	mov	r1, r3
 8016fc4:	f240 60ac 	movw	r0, #1708	@ 0x6ac
 8016fc8:	f000 fd9c 	bl	8017b04 <RadioWrite>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 8016fcc:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8016fce:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8016fd2:	fb02 f303 	mul.w	r3, r2, r3
 8016fd6:	461a      	mov	r2, r3
 8016fd8:	687b      	ldr	r3, [r7, #4]
 8016fda:	fbb2 f3f3 	udiv	r3, r2, r3
 8016fde:	4a4b      	ldr	r2, [pc, #300]	@ (801710c <RadioSetRxConfig+0x2fc>)
 8016fe0:	6093      	str	r3, [r2, #8]
            break;
 8016fe2:	e108      	b.n	80171f6 <RadioSetRxConfig+0x3e6>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 8016fe4:	2000      	movs	r0, #0
 8016fe6:	f001 ffc1 	bl	8018f6c <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8016fea:	4b48      	ldr	r3, [pc, #288]	@ (801710c <RadioSetRxConfig+0x2fc>)
 8016fec:	2200      	movs	r2, #0
 8016fee:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8016ff2:	4a46      	ldr	r2, [pc, #280]	@ (801710c <RadioSetRxConfig+0x2fc>)
 8016ff4:	687b      	ldr	r3, [r7, #4]
 8016ff6:	63d3      	str	r3, [r2, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8016ff8:	4b44      	ldr	r3, [pc, #272]	@ (801710c <RadioSetRxConfig+0x2fc>)
 8016ffa:	220b      	movs	r2, #11
 8016ffc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8017000:	68b8      	ldr	r0, [r7, #8]
 8017002:	f002 fe71 	bl	8019ce8 <SUBGRF_GetFskBandwidthRegValue>
 8017006:	4603      	mov	r3, r0
 8017008:	461a      	mov	r2, r3
 801700a:	4b40      	ldr	r3, [pc, #256]	@ (801710c <RadioSetRxConfig+0x2fc>)
 801700c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8017010:	4b3e      	ldr	r3, [pc, #248]	@ (801710c <RadioSetRxConfig+0x2fc>)
 8017012:	2200      	movs	r2, #0
 8017014:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8017016:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8017018:	00db      	lsls	r3, r3, #3
 801701a:	b29a      	uxth	r2, r3
 801701c:	4b3b      	ldr	r3, [pc, #236]	@ (801710c <RadioSetRxConfig+0x2fc>)
 801701e:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 8017020:	4b3a      	ldr	r3, [pc, #232]	@ (801710c <RadioSetRxConfig+0x2fc>)
 8017022:	2204      	movs	r2, #4
 8017024:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 8017026:	4b39      	ldr	r3, [pc, #228]	@ (801710c <RadioSetRxConfig+0x2fc>)
 8017028:	2218      	movs	r2, #24
 801702a:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 801702c:	4b37      	ldr	r3, [pc, #220]	@ (801710c <RadioSetRxConfig+0x2fc>)
 801702e:	2200      	movs	r2, #0
 8017030:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 8017032:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8017036:	f083 0301 	eor.w	r3, r3, #1
 801703a:	b2db      	uxtb	r3, r3
 801703c:	461a      	mov	r2, r3
 801703e:	4b33      	ldr	r3, [pc, #204]	@ (801710c <RadioSetRxConfig+0x2fc>)
 8017040:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 8017042:	4b33      	ldr	r3, [pc, #204]	@ (8017110 <RadioSetRxConfig+0x300>)
 8017044:	781a      	ldrb	r2, [r3, #0]
 8017046:	4b31      	ldr	r3, [pc, #196]	@ (801710c <RadioSetRxConfig+0x2fc>)
 8017048:	759a      	strb	r2, [r3, #22]
            if( crcOn == true )
 801704a:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 801704e:	2b00      	cmp	r3, #0
 8017050:	d003      	beq.n	801705a <RadioSetRxConfig+0x24a>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 8017052:	4b2e      	ldr	r3, [pc, #184]	@ (801710c <RadioSetRxConfig+0x2fc>)
 8017054:	22f2      	movs	r2, #242	@ 0xf2
 8017056:	75da      	strb	r2, [r3, #23]
 8017058:	e002      	b.n	8017060 <RadioSetRxConfig+0x250>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 801705a:	4b2c      	ldr	r3, [pc, #176]	@ (801710c <RadioSetRxConfig+0x2fc>)
 801705c:	2201      	movs	r2, #1
 801705e:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8017060:	4b2a      	ldr	r3, [pc, #168]	@ (801710c <RadioSetRxConfig+0x2fc>)
 8017062:	2201      	movs	r2, #1
 8017064:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 8017066:	f000 fc52 	bl	801790e <RadioStandby>
            RadioSetModem( MODEM_FSK );
 801706a:	2000      	movs	r0, #0
 801706c:	f7ff fdfc 	bl	8016c68 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8017070:	4828      	ldr	r0, [pc, #160]	@ (8017114 <RadioSetRxConfig+0x304>)
 8017072:	f002 fa15 	bl	80194a0 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8017076:	4828      	ldr	r0, [pc, #160]	@ (8017118 <RadioSetRxConfig+0x308>)
 8017078:	f002 fae4 	bl	8019644 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 801707c:	4a28      	ldr	r2, [pc, #160]	@ (8017120 <RadioSetRxConfig+0x310>)
 801707e:	f107 0314 	add.w	r3, r7, #20
 8017082:	e892 0003 	ldmia.w	r2, {r0, r1}
 8017086:	e883 0003 	stmia.w	r3, {r0, r1}
 801708a:	f107 0314 	add.w	r3, r7, #20
 801708e:	4618      	mov	r0, r3
 8017090:	f001 fda5 	bl	8018bde <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8017094:	f240 10ff 	movw	r0, #511	@ 0x1ff
 8017098:	f001 fdf0 	bl	8018c7c <SUBGRF_SetWhiteningSeed>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 801709c:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 801709e:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 80170a2:	fb02 f303 	mul.w	r3, r2, r3
 80170a6:	461a      	mov	r2, r3
 80170a8:	687b      	ldr	r3, [r7, #4]
 80170aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80170ae:	4a17      	ldr	r2, [pc, #92]	@ (801710c <RadioSetRxConfig+0x2fc>)
 80170b0:	6093      	str	r3, [r2, #8]
            break;
 80170b2:	e0a0      	b.n	80171f6 <RadioSetRxConfig+0x3e6>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 80170b4:	2000      	movs	r0, #0
 80170b6:	f001 ff59 	bl	8018f6c <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 80170ba:	4b14      	ldr	r3, [pc, #80]	@ (801710c <RadioSetRxConfig+0x2fc>)
 80170bc:	2201      	movs	r2, #1
 80170be:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 80170c2:	687b      	ldr	r3, [r7, #4]
 80170c4:	b2da      	uxtb	r2, r3
 80170c6:	4b11      	ldr	r3, [pc, #68]	@ (801710c <RadioSetRxConfig+0x2fc>)
 80170c8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 80170cc:	4a15      	ldr	r2, [pc, #84]	@ (8017124 <RadioSetRxConfig+0x314>)
 80170ce:	68bb      	ldr	r3, [r7, #8]
 80170d0:	4413      	add	r3, r2
 80170d2:	781a      	ldrb	r2, [r3, #0]
 80170d4:	4b0d      	ldr	r3, [pc, #52]	@ (801710c <RadioSetRxConfig+0x2fc>)
 80170d6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t )coderate;
 80170da:	4a0c      	ldr	r2, [pc, #48]	@ (801710c <RadioSetRxConfig+0x2fc>)
 80170dc:	7bbb      	ldrb	r3, [r7, #14]
 80170de:	f882 3052 	strb.w	r3, [r2, #82]	@ 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 80170e2:	68bb      	ldr	r3, [r7, #8]
 80170e4:	2b00      	cmp	r3, #0
 80170e6:	d105      	bne.n	80170f4 <RadioSetRxConfig+0x2e4>
 80170e8:	687b      	ldr	r3, [r7, #4]
 80170ea:	2b0b      	cmp	r3, #11
 80170ec:	d008      	beq.n	8017100 <RadioSetRxConfig+0x2f0>
 80170ee:	687b      	ldr	r3, [r7, #4]
 80170f0:	2b0c      	cmp	r3, #12
 80170f2:	d005      	beq.n	8017100 <RadioSetRxConfig+0x2f0>
 80170f4:	68bb      	ldr	r3, [r7, #8]
 80170f6:	2b01      	cmp	r3, #1
 80170f8:	d116      	bne.n	8017128 <RadioSetRxConfig+0x318>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 80170fa:	687b      	ldr	r3, [r7, #4]
 80170fc:	2b0c      	cmp	r3, #12
 80170fe:	d113      	bne.n	8017128 <RadioSetRxConfig+0x318>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 8017100:	4b02      	ldr	r3, [pc, #8]	@ (801710c <RadioSetRxConfig+0x2fc>)
 8017102:	2201      	movs	r2, #1
 8017104:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
 8017108:	e012      	b.n	8017130 <RadioSetRxConfig+0x320>
 801710a:	bf00      	nop
 801710c:	20001a70 	.word	0x20001a70
 8017110:	20000144 	.word	0x20000144
 8017114:	20001aa8 	.word	0x20001aa8
 8017118:	20001a7e 	.word	0x20001a7e
 801711c:	0801bf94 	.word	0x0801bf94
 8017120:	0801bf9c 	.word	0x0801bf9c
 8017124:	0801c600 	.word	0x0801c600
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8017128:	4b35      	ldr	r3, [pc, #212]	@ (8017200 <RadioSetRxConfig+0x3f0>)
 801712a:	2200      	movs	r2, #0
 801712c:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8017130:	4b33      	ldr	r3, [pc, #204]	@ (8017200 <RadioSetRxConfig+0x3f0>)
 8017132:	2201      	movs	r2, #1
 8017134:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8017136:	4b32      	ldr	r3, [pc, #200]	@ (8017200 <RadioSetRxConfig+0x3f0>)
 8017138:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 801713c:	2b05      	cmp	r3, #5
 801713e:	d004      	beq.n	801714a <RadioSetRxConfig+0x33a>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 8017140:	4b2f      	ldr	r3, [pc, #188]	@ (8017200 <RadioSetRxConfig+0x3f0>)
 8017142:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8017146:	2b06      	cmp	r3, #6
 8017148:	d10a      	bne.n	8017160 <RadioSetRxConfig+0x350>
                if( preambleLen < 12 )
 801714a:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 801714c:	2b0b      	cmp	r3, #11
 801714e:	d803      	bhi.n	8017158 <RadioSetRxConfig+0x348>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 8017150:	4b2b      	ldr	r3, [pc, #172]	@ (8017200 <RadioSetRxConfig+0x3f0>)
 8017152:	220c      	movs	r2, #12
 8017154:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 8017156:	e006      	b.n	8017166 <RadioSetRxConfig+0x356>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8017158:	4a29      	ldr	r2, [pc, #164]	@ (8017200 <RadioSetRxConfig+0x3f0>)
 801715a:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 801715c:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 801715e:	e002      	b.n	8017166 <RadioSetRxConfig+0x356>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8017160:	4a27      	ldr	r2, [pc, #156]	@ (8017200 <RadioSetRxConfig+0x3f0>)
 8017162:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8017164:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 8017166:	f897 203c 	ldrb.w	r2, [r7, #60]	@ 0x3c
 801716a:	4b25      	ldr	r3, [pc, #148]	@ (8017200 <RadioSetRxConfig+0x3f0>)
 801716c:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 801716e:	4b25      	ldr	r3, [pc, #148]	@ (8017204 <RadioSetRxConfig+0x3f4>)
 8017170:	781a      	ldrb	r2, [r3, #0]
 8017172:	4b23      	ldr	r3, [pc, #140]	@ (8017200 <RadioSetRxConfig+0x3f0>)
 8017174:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 8017176:	f897 2044 	ldrb.w	r2, [r7, #68]	@ 0x44
 801717a:	4b21      	ldr	r3, [pc, #132]	@ (8017200 <RadioSetRxConfig+0x3f0>)
 801717c:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 8017180:	f897 2050 	ldrb.w	r2, [r7, #80]	@ 0x50
 8017184:	4b1e      	ldr	r3, [pc, #120]	@ (8017200 <RadioSetRxConfig+0x3f0>)
 8017186:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
            RadioStandby( );
 801718a:	f000 fbc0 	bl	801790e <RadioStandby>
            RadioSetModem( MODEM_LORA );
 801718e:	2001      	movs	r0, #1
 8017190:	f7ff fd6a 	bl	8016c68 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8017194:	481c      	ldr	r0, [pc, #112]	@ (8017208 <RadioSetRxConfig+0x3f8>)
 8017196:	f002 f983 	bl	80194a0 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801719a:	481c      	ldr	r0, [pc, #112]	@ (801720c <RadioSetRxConfig+0x3fc>)
 801719c:	f002 fa52 	bl	8019644 <SUBGRF_SetPacketParams>
            SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 80171a0:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80171a2:	b2db      	uxtb	r3, r3
 80171a4:	4618      	mov	r0, r3
 80171a6:	f001 fef0 	bl	8018f8a <SUBGRF_SetLoRaSymbNumTimeout>
            if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 80171aa:	4b15      	ldr	r3, [pc, #84]	@ (8017200 <RadioSetRxConfig+0x3f0>)
 80171ac:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80171b0:	2b01      	cmp	r3, #1
 80171b2:	d10d      	bne.n	80171d0 <RadioSetRxConfig+0x3c0>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 80171b4:	f240 7036 	movw	r0, #1846	@ 0x736
 80171b8:	f002 fba0 	bl	80198fc <SUBGRF_ReadRegister>
 80171bc:	4603      	mov	r3, r0
 80171be:	f023 0304 	bic.w	r3, r3, #4
 80171c2:	b2db      	uxtb	r3, r3
 80171c4:	4619      	mov	r1, r3
 80171c6:	f240 7036 	movw	r0, #1846	@ 0x736
 80171ca:	f002 fb83 	bl	80198d4 <SUBGRF_WriteRegister>
 80171ce:	e00c      	b.n	80171ea <RadioSetRxConfig+0x3da>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 80171d0:	f240 7036 	movw	r0, #1846	@ 0x736
 80171d4:	f002 fb92 	bl	80198fc <SUBGRF_ReadRegister>
 80171d8:	4603      	mov	r3, r0
 80171da:	f043 0304 	orr.w	r3, r3, #4
 80171de:	b2db      	uxtb	r3, r3
 80171e0:	4619      	mov	r1, r3
 80171e2:	f240 7036 	movw	r0, #1846	@ 0x736
 80171e6:	f002 fb75 	bl	80198d4 <SUBGRF_WriteRegister>
            SubgRf.RxTimeout = 0xFFFF;
 80171ea:	4b05      	ldr	r3, [pc, #20]	@ (8017200 <RadioSetRxConfig+0x3f0>)
 80171ec:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80171f0:	609a      	str	r2, [r3, #8]
            break;
 80171f2:	e000      	b.n	80171f6 <RadioSetRxConfig+0x3e6>
            break;
 80171f4:	bf00      	nop
    }
}
 80171f6:	bf00      	nop
 80171f8:	3728      	adds	r7, #40	@ 0x28
 80171fa:	46bd      	mov	sp, r7
 80171fc:	bd80      	pop	{r7, pc}
 80171fe:	bf00      	nop
 8017200:	20001a70 	.word	0x20001a70
 8017204:	20000144 	.word	0x20000144
 8017208:	20001aa8 	.word	0x20001aa8
 801720c:	20001a7e 	.word	0x20001a7e

08017210 <RadioSetTxConfig>:
static void RadioSetTxConfig( RadioModems_t modem, int8_t power, uint32_t fdev,
                              uint32_t bandwidth, uint32_t datarate,
                              uint8_t coderate, uint16_t preambleLen,
                              bool fixLen, bool crcOn, bool freqHopOn,
                              uint8_t hopPeriod, bool iqInverted, uint32_t timeout )
{
 8017210:	b580      	push	{r7, lr}
 8017212:	b086      	sub	sp, #24
 8017214:	af00      	add	r7, sp, #0
 8017216:	60ba      	str	r2, [r7, #8]
 8017218:	607b      	str	r3, [r7, #4]
 801721a:	4603      	mov	r3, r0
 801721c:	73fb      	strb	r3, [r7, #15]
 801721e:	460b      	mov	r3, r1
 8017220:	73bb      	strb	r3, [r7, #14]
    RFW_DeInit(); /* ST_WORKAROUND: Switch Off FwPacketDecoding by default */
 8017222:	f002 fe2e 	bl	8019e82 <RFW_DeInit>
    switch( modem )
 8017226:	7bfb      	ldrb	r3, [r7, #15]
 8017228:	2b04      	cmp	r3, #4
 801722a:	f000 80c7 	beq.w	80173bc <RadioSetTxConfig+0x1ac>
 801722e:	2b04      	cmp	r3, #4
 8017230:	f300 80d6 	bgt.w	80173e0 <RadioSetTxConfig+0x1d0>
 8017234:	2b00      	cmp	r3, #0
 8017236:	d002      	beq.n	801723e <RadioSetTxConfig+0x2e>
 8017238:	2b01      	cmp	r3, #1
 801723a:	d059      	beq.n	80172f0 <RadioSetTxConfig+0xe0>
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
            break;
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 801723c:	e0d0      	b.n	80173e0 <RadioSetTxConfig+0x1d0>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801723e:	4b74      	ldr	r3, [pc, #464]	@ (8017410 <RadioSetTxConfig+0x200>)
 8017240:	2200      	movs	r2, #0
 8017242:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8017246:	4a72      	ldr	r2, [pc, #456]	@ (8017410 <RadioSetTxConfig+0x200>)
 8017248:	6a3b      	ldr	r3, [r7, #32]
 801724a:	63d3      	str	r3, [r2, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 801724c:	4b70      	ldr	r3, [pc, #448]	@ (8017410 <RadioSetTxConfig+0x200>)
 801724e:	220b      	movs	r2, #11
 8017250:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8017254:	6878      	ldr	r0, [r7, #4]
 8017256:	f002 fd47 	bl	8019ce8 <SUBGRF_GetFskBandwidthRegValue>
 801725a:	4603      	mov	r3, r0
 801725c:	461a      	mov	r2, r3
 801725e:	4b6c      	ldr	r3, [pc, #432]	@ (8017410 <RadioSetTxConfig+0x200>)
 8017260:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            SubgRf.ModulationParams.Params.Gfsk.Fdev = fdev;
 8017264:	4a6a      	ldr	r2, [pc, #424]	@ (8017410 <RadioSetTxConfig+0x200>)
 8017266:	68bb      	ldr	r3, [r7, #8]
 8017268:	6413      	str	r3, [r2, #64]	@ 0x40
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801726a:	4b69      	ldr	r3, [pc, #420]	@ (8017410 <RadioSetTxConfig+0x200>)
 801726c:	2200      	movs	r2, #0
 801726e:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8017270:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8017272:	00db      	lsls	r3, r3, #3
 8017274:	b29a      	uxth	r2, r3
 8017276:	4b66      	ldr	r3, [pc, #408]	@ (8017410 <RadioSetTxConfig+0x200>)
 8017278:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 801727a:	4b65      	ldr	r3, [pc, #404]	@ (8017410 <RadioSetTxConfig+0x200>)
 801727c:	2204      	movs	r2, #4
 801727e:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3 ; // convert byte into bit
 8017280:	4b63      	ldr	r3, [pc, #396]	@ (8017410 <RadioSetTxConfig+0x200>)
 8017282:	2218      	movs	r2, #24
 8017284:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8017286:	4b62      	ldr	r3, [pc, #392]	@ (8017410 <RadioSetTxConfig+0x200>)
 8017288:	2200      	movs	r2, #0
 801728a:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 801728c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8017290:	f083 0301 	eor.w	r3, r3, #1
 8017294:	b2db      	uxtb	r3, r3
 8017296:	461a      	mov	r2, r3
 8017298:	4b5d      	ldr	r3, [pc, #372]	@ (8017410 <RadioSetTxConfig+0x200>)
 801729a:	755a      	strb	r2, [r3, #21]
            if( crcOn == true )
 801729c:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80172a0:	2b00      	cmp	r3, #0
 80172a2:	d003      	beq.n	80172ac <RadioSetTxConfig+0x9c>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 80172a4:	4b5a      	ldr	r3, [pc, #360]	@ (8017410 <RadioSetTxConfig+0x200>)
 80172a6:	22f2      	movs	r2, #242	@ 0xf2
 80172a8:	75da      	strb	r2, [r3, #23]
 80172aa:	e002      	b.n	80172b2 <RadioSetTxConfig+0xa2>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 80172ac:	4b58      	ldr	r3, [pc, #352]	@ (8017410 <RadioSetTxConfig+0x200>)
 80172ae:	2201      	movs	r2, #1
 80172b0:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 80172b2:	4b57      	ldr	r3, [pc, #348]	@ (8017410 <RadioSetTxConfig+0x200>)
 80172b4:	2201      	movs	r2, #1
 80172b6:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 80172b8:	f000 fb29 	bl	801790e <RadioStandby>
            RadioSetModem(  MODEM_FSK  );
 80172bc:	2000      	movs	r0, #0
 80172be:	f7ff fcd3 	bl	8016c68 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80172c2:	4854      	ldr	r0, [pc, #336]	@ (8017414 <RadioSetTxConfig+0x204>)
 80172c4:	f002 f8ec 	bl	80194a0 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80172c8:	4853      	ldr	r0, [pc, #332]	@ (8017418 <RadioSetTxConfig+0x208>)
 80172ca:	f002 f9bb 	bl	8019644 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 80172ce:	4a53      	ldr	r2, [pc, #332]	@ (801741c <RadioSetTxConfig+0x20c>)
 80172d0:	f107 0310 	add.w	r3, r7, #16
 80172d4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80172d8:	e883 0003 	stmia.w	r3, {r0, r1}
 80172dc:	f107 0310 	add.w	r3, r7, #16
 80172e0:	4618      	mov	r0, r3
 80172e2:	f001 fc7c 	bl	8018bde <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 80172e6:	f240 10ff 	movw	r0, #511	@ 0x1ff
 80172ea:	f001 fcc7 	bl	8018c7c <SUBGRF_SetWhiteningSeed>
            break;
 80172ee:	e078      	b.n	80173e2 <RadioSetTxConfig+0x1d2>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 80172f0:	4b47      	ldr	r3, [pc, #284]	@ (8017410 <RadioSetTxConfig+0x200>)
 80172f2:	2201      	movs	r2, #1
 80172f4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 80172f8:	6a3b      	ldr	r3, [r7, #32]
 80172fa:	b2da      	uxtb	r2, r3
 80172fc:	4b44      	ldr	r3, [pc, #272]	@ (8017410 <RadioSetTxConfig+0x200>)
 80172fe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 8017302:	4a47      	ldr	r2, [pc, #284]	@ (8017420 <RadioSetTxConfig+0x210>)
 8017304:	687b      	ldr	r3, [r7, #4]
 8017306:	4413      	add	r3, r2
 8017308:	781a      	ldrb	r2, [r3, #0]
 801730a:	4b41      	ldr	r3, [pc, #260]	@ (8017410 <RadioSetTxConfig+0x200>)
 801730c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate= ( RadioLoRaCodingRates_t )coderate;
 8017310:	4a3f      	ldr	r2, [pc, #252]	@ (8017410 <RadioSetTxConfig+0x200>)
 8017312:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8017316:	f882 3052 	strb.w	r3, [r2, #82]	@ 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 801731a:	687b      	ldr	r3, [r7, #4]
 801731c:	2b00      	cmp	r3, #0
 801731e:	d105      	bne.n	801732c <RadioSetTxConfig+0x11c>
 8017320:	6a3b      	ldr	r3, [r7, #32]
 8017322:	2b0b      	cmp	r3, #11
 8017324:	d008      	beq.n	8017338 <RadioSetTxConfig+0x128>
 8017326:	6a3b      	ldr	r3, [r7, #32]
 8017328:	2b0c      	cmp	r3, #12
 801732a:	d005      	beq.n	8017338 <RadioSetTxConfig+0x128>
 801732c:	687b      	ldr	r3, [r7, #4]
 801732e:	2b01      	cmp	r3, #1
 8017330:	d107      	bne.n	8017342 <RadioSetTxConfig+0x132>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8017332:	6a3b      	ldr	r3, [r7, #32]
 8017334:	2b0c      	cmp	r3, #12
 8017336:	d104      	bne.n	8017342 <RadioSetTxConfig+0x132>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 8017338:	4b35      	ldr	r3, [pc, #212]	@ (8017410 <RadioSetTxConfig+0x200>)
 801733a:	2201      	movs	r2, #1
 801733c:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
 8017340:	e003      	b.n	801734a <RadioSetTxConfig+0x13a>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8017342:	4b33      	ldr	r3, [pc, #204]	@ (8017410 <RadioSetTxConfig+0x200>)
 8017344:	2200      	movs	r2, #0
 8017346:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 801734a:	4b31      	ldr	r3, [pc, #196]	@ (8017410 <RadioSetTxConfig+0x200>)
 801734c:	2201      	movs	r2, #1
 801734e:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8017350:	4b2f      	ldr	r3, [pc, #188]	@ (8017410 <RadioSetTxConfig+0x200>)
 8017352:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8017356:	2b05      	cmp	r3, #5
 8017358:	d004      	beq.n	8017364 <RadioSetTxConfig+0x154>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 801735a:	4b2d      	ldr	r3, [pc, #180]	@ (8017410 <RadioSetTxConfig+0x200>)
 801735c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8017360:	2b06      	cmp	r3, #6
 8017362:	d10a      	bne.n	801737a <RadioSetTxConfig+0x16a>
                if( preambleLen < 12 )
 8017364:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8017366:	2b0b      	cmp	r3, #11
 8017368:	d803      	bhi.n	8017372 <RadioSetTxConfig+0x162>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 801736a:	4b29      	ldr	r3, [pc, #164]	@ (8017410 <RadioSetTxConfig+0x200>)
 801736c:	220c      	movs	r2, #12
 801736e:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 8017370:	e006      	b.n	8017380 <RadioSetTxConfig+0x170>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8017372:	4a27      	ldr	r2, [pc, #156]	@ (8017410 <RadioSetTxConfig+0x200>)
 8017374:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8017376:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 8017378:	e002      	b.n	8017380 <RadioSetTxConfig+0x170>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 801737a:	4a25      	ldr	r2, [pc, #148]	@ (8017410 <RadioSetTxConfig+0x200>)
 801737c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 801737e:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 8017380:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8017384:	4b22      	ldr	r3, [pc, #136]	@ (8017410 <RadioSetTxConfig+0x200>)
 8017386:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8017388:	4b26      	ldr	r3, [pc, #152]	@ (8017424 <RadioSetTxConfig+0x214>)
 801738a:	781a      	ldrb	r2, [r3, #0]
 801738c:	4b20      	ldr	r3, [pc, #128]	@ (8017410 <RadioSetTxConfig+0x200>)
 801738e:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 8017390:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8017394:	4b1e      	ldr	r3, [pc, #120]	@ (8017410 <RadioSetTxConfig+0x200>)
 8017396:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 801739a:	f897 203c 	ldrb.w	r2, [r7, #60]	@ 0x3c
 801739e:	4b1c      	ldr	r3, [pc, #112]	@ (8017410 <RadioSetTxConfig+0x200>)
 80173a0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
            RadioStandby( );
 80173a4:	f000 fab3 	bl	801790e <RadioStandby>
            RadioSetModem( MODEM_LORA );
 80173a8:	2001      	movs	r0, #1
 80173aa:	f7ff fc5d 	bl	8016c68 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80173ae:	4819      	ldr	r0, [pc, #100]	@ (8017414 <RadioSetTxConfig+0x204>)
 80173b0:	f002 f876 	bl	80194a0 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80173b4:	4818      	ldr	r0, [pc, #96]	@ (8017418 <RadioSetTxConfig+0x208>)
 80173b6:	f002 f945 	bl	8019644 <SUBGRF_SetPacketParams>
            break;
 80173ba:	e012      	b.n	80173e2 <RadioSetTxConfig+0x1d2>
            RadioSetModem(MODEM_SIGFOX_TX);
 80173bc:	2004      	movs	r0, #4
 80173be:	f7ff fc53 	bl	8016c68 <RadioSetModem>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 80173c2:	4b13      	ldr	r3, [pc, #76]	@ (8017410 <RadioSetTxConfig+0x200>)
 80173c4:	2202      	movs	r2, #2
 80173c6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Bpsk.BitRate           = datarate;
 80173ca:	4a11      	ldr	r2, [pc, #68]	@ (8017410 <RadioSetTxConfig+0x200>)
 80173cc:	6a3b      	ldr	r3, [r7, #32]
 80173ce:	6493      	str	r3, [r2, #72]	@ 0x48
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 80173d0:	4b0f      	ldr	r3, [pc, #60]	@ (8017410 <RadioSetTxConfig+0x200>)
 80173d2:	2216      	movs	r2, #22
 80173d4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80173d8:	480e      	ldr	r0, [pc, #56]	@ (8017414 <RadioSetTxConfig+0x204>)
 80173da:	f002 f861 	bl	80194a0 <SUBGRF_SetModulationParams>
            break;
 80173de:	e000      	b.n	80173e2 <RadioSetTxConfig+0x1d2>
            break;
 80173e0:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 80173e2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80173e6:	4618      	mov	r0, r3
 80173e8:	f002 fb90 	bl	8019b0c <SUBGRF_SetRfTxPower>
 80173ec:	4603      	mov	r3, r0
 80173ee:	461a      	mov	r2, r3
 80173f0:	4b07      	ldr	r3, [pc, #28]	@ (8017410 <RadioSetTxConfig+0x200>)
 80173f2:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect ); /* ST_WORKAROUND: ?????? */
 80173f6:	4b06      	ldr	r3, [pc, #24]	@ (8017410 <RadioSetTxConfig+0x200>)
 80173f8:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 80173fc:	4618      	mov	r0, r3
 80173fe:	f002 fd54 	bl	8019eaa <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 8017402:	4a03      	ldr	r2, [pc, #12]	@ (8017410 <RadioSetTxConfig+0x200>)
 8017404:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8017406:	6053      	str	r3, [r2, #4]
}
 8017408:	bf00      	nop
 801740a:	3718      	adds	r7, #24
 801740c:	46bd      	mov	sp, r7
 801740e:	bd80      	pop	{r7, pc}
 8017410:	20001a70 	.word	0x20001a70
 8017414:	20001aa8 	.word	0x20001aa8
 8017418:	20001a7e 	.word	0x20001a7e
 801741c:	0801bf9c 	.word	0x0801bf9c
 8017420:	0801c600 	.word	0x0801c600
 8017424:	20000144 	.word	0x20000144

08017428 <RadioCheckRfFrequency>:

static bool RadioCheckRfFrequency( uint32_t frequency )
{
 8017428:	b480      	push	{r7}
 801742a:	b083      	sub	sp, #12
 801742c:	af00      	add	r7, sp, #0
 801742e:	6078      	str	r0, [r7, #4]
    return true;
 8017430:	2301      	movs	r3, #1
}
 8017432:	4618      	mov	r0, r3
 8017434:	370c      	adds	r7, #12
 8017436:	46bd      	mov	sp, r7
 8017438:	bc80      	pop	{r7}
 801743a:	4770      	bx	lr

0801743c <RadioGetLoRaBandwidthInHz>:

static uint32_t RadioGetLoRaBandwidthInHz( RadioLoRaBandwidths_t bw )
{
 801743c:	b480      	push	{r7}
 801743e:	b085      	sub	sp, #20
 8017440:	af00      	add	r7, sp, #0
 8017442:	4603      	mov	r3, r0
 8017444:	71fb      	strb	r3, [r7, #7]
    uint32_t bandwidthInHz = 0;
 8017446:	2300      	movs	r3, #0
 8017448:	60fb      	str	r3, [r7, #12]

    switch( bw )
 801744a:	79fb      	ldrb	r3, [r7, #7]
 801744c:	2b0a      	cmp	r3, #10
 801744e:	d83e      	bhi.n	80174ce <RadioGetLoRaBandwidthInHz+0x92>
 8017450:	a201      	add	r2, pc, #4	@ (adr r2, 8017458 <RadioGetLoRaBandwidthInHz+0x1c>)
 8017452:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017456:	bf00      	nop
 8017458:	08017485 	.word	0x08017485
 801745c:	08017495 	.word	0x08017495
 8017460:	080174a5 	.word	0x080174a5
 8017464:	080174b5 	.word	0x080174b5
 8017468:	080174bd 	.word	0x080174bd
 801746c:	080174c3 	.word	0x080174c3
 8017470:	080174c9 	.word	0x080174c9
 8017474:	080174cf 	.word	0x080174cf
 8017478:	0801748d 	.word	0x0801748d
 801747c:	0801749d 	.word	0x0801749d
 8017480:	080174ad 	.word	0x080174ad
    {
    case LORA_BW_007:
        bandwidthInHz = 7812UL;
 8017484:	f641 6384 	movw	r3, #7812	@ 0x1e84
 8017488:	60fb      	str	r3, [r7, #12]
        break;
 801748a:	e020      	b.n	80174ce <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_010:
        bandwidthInHz = 10417UL;
 801748c:	f642 03b1 	movw	r3, #10417	@ 0x28b1
 8017490:	60fb      	str	r3, [r7, #12]
        break;
 8017492:	e01c      	b.n	80174ce <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_015:
        bandwidthInHz = 15625UL;
 8017494:	f643 5309 	movw	r3, #15625	@ 0x3d09
 8017498:	60fb      	str	r3, [r7, #12]
        break;
 801749a:	e018      	b.n	80174ce <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_020:
        bandwidthInHz = 20833UL;
 801749c:	f245 1361 	movw	r3, #20833	@ 0x5161
 80174a0:	60fb      	str	r3, [r7, #12]
        break;
 80174a2:	e014      	b.n	80174ce <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_031:
        bandwidthInHz = 31250UL;
 80174a4:	f647 2312 	movw	r3, #31250	@ 0x7a12
 80174a8:	60fb      	str	r3, [r7, #12]
        break;
 80174aa:	e010      	b.n	80174ce <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_041:
        bandwidthInHz = 41667UL;
 80174ac:	f24a 23c3 	movw	r3, #41667	@ 0xa2c3
 80174b0:	60fb      	str	r3, [r7, #12]
        break;
 80174b2:	e00c      	b.n	80174ce <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_062:
        bandwidthInHz = 62500UL;
 80174b4:	f24f 4324 	movw	r3, #62500	@ 0xf424
 80174b8:	60fb      	str	r3, [r7, #12]
        break;
 80174ba:	e008      	b.n	80174ce <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_125:
        bandwidthInHz = 125000UL;
 80174bc:	4b07      	ldr	r3, [pc, #28]	@ (80174dc <RadioGetLoRaBandwidthInHz+0xa0>)
 80174be:	60fb      	str	r3, [r7, #12]
        break;
 80174c0:	e005      	b.n	80174ce <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_250:
        bandwidthInHz = 250000UL;
 80174c2:	4b07      	ldr	r3, [pc, #28]	@ (80174e0 <RadioGetLoRaBandwidthInHz+0xa4>)
 80174c4:	60fb      	str	r3, [r7, #12]
        break;
 80174c6:	e002      	b.n	80174ce <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_500:
        bandwidthInHz = 500000UL;
 80174c8:	4b06      	ldr	r3, [pc, #24]	@ (80174e4 <RadioGetLoRaBandwidthInHz+0xa8>)
 80174ca:	60fb      	str	r3, [r7, #12]
        break;
 80174cc:	bf00      	nop
    }

    return bandwidthInHz;
 80174ce:	68fb      	ldr	r3, [r7, #12]
}
 80174d0:	4618      	mov	r0, r3
 80174d2:	3714      	adds	r7, #20
 80174d4:	46bd      	mov	sp, r7
 80174d6:	bc80      	pop	{r7}
 80174d8:	4770      	bx	lr
 80174da:	bf00      	nop
 80174dc:	0001e848 	.word	0x0001e848
 80174e0:	0003d090 	.word	0x0003d090
 80174e4:	0007a120 	.word	0x0007a120

080174e8 <RadioGetGfskTimeOnAirNumerator>:

static uint32_t RadioGetGfskTimeOnAirNumerator( uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 80174e8:	b480      	push	{r7}
 80174ea:	b083      	sub	sp, #12
 80174ec:	af00      	add	r7, sp, #0
 80174ee:	6078      	str	r0, [r7, #4]
 80174f0:	4608      	mov	r0, r1
 80174f2:	4611      	mov	r1, r2
 80174f4:	461a      	mov	r2, r3
 80174f6:	4603      	mov	r3, r0
 80174f8:	70fb      	strb	r3, [r7, #3]
 80174fa:	460b      	mov	r3, r1
 80174fc:	803b      	strh	r3, [r7, #0]
 80174fe:	4613      	mov	r3, r2
 8017500:	70bb      	strb	r3, [r7, #2]
    /* ST_WORKAROUND_BEGIN: Simplified calculation without const values */
    return ( preambleLen << 3 ) +
 8017502:	883b      	ldrh	r3, [r7, #0]
 8017504:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8017506:	78ba      	ldrb	r2, [r7, #2]
 8017508:	f082 0201 	eor.w	r2, r2, #1
 801750c:	b2d2      	uxtb	r2, r2
 801750e:	2a00      	cmp	r2, #0
 8017510:	d001      	beq.n	8017516 <RadioGetGfskTimeOnAirNumerator+0x2e>
 8017512:	2208      	movs	r2, #8
 8017514:	e000      	b.n	8017518 <RadioGetGfskTimeOnAirNumerator+0x30>
 8017516:	2200      	movs	r2, #0
    return ( preambleLen << 3 ) +
 8017518:	4413      	add	r3, r2
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 801751a:	f103 0218 	add.w	r2, r3, #24
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 801751e:	7c3b      	ldrb	r3, [r7, #16]
 8017520:	7d39      	ldrb	r1, [r7, #20]
 8017522:	2900      	cmp	r1, #0
 8017524:	d001      	beq.n	801752a <RadioGetGfskTimeOnAirNumerator+0x42>
 8017526:	2102      	movs	r1, #2
 8017528:	e000      	b.n	801752c <RadioGetGfskTimeOnAirNumerator+0x44>
 801752a:	2100      	movs	r1, #0
 801752c:	440b      	add	r3, r1
 801752e:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8017530:	4413      	add	r3, r2
    /* ST_WORKAROUND_END */
}
 8017532:	4618      	mov	r0, r3
 8017534:	370c      	adds	r7, #12
 8017536:	46bd      	mov	sp, r7
 8017538:	bc80      	pop	{r7}
 801753a:	4770      	bx	lr

0801753c <RadioGetLoRaTimeOnAirNumerator>:

static uint32_t RadioGetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                                                uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 801753c:	b480      	push	{r7}
 801753e:	b08b      	sub	sp, #44	@ 0x2c
 8017540:	af00      	add	r7, sp, #0
 8017542:	60f8      	str	r0, [r7, #12]
 8017544:	60b9      	str	r1, [r7, #8]
 8017546:	4611      	mov	r1, r2
 8017548:	461a      	mov	r2, r3
 801754a:	460b      	mov	r3, r1
 801754c:	71fb      	strb	r3, [r7, #7]
 801754e:	4613      	mov	r3, r2
 8017550:	80bb      	strh	r3, [r7, #4]
    int32_t crDenom           = coderate + 4;
 8017552:	79fb      	ldrb	r3, [r7, #7]
 8017554:	3304      	adds	r3, #4
 8017556:	617b      	str	r3, [r7, #20]
    bool    lowDatareOptimize = false;
 8017558:	2300      	movs	r3, #0
 801755a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    // Ensure that the preamble length is at least 12 symbols when using SF5 or SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 801755e:	68bb      	ldr	r3, [r7, #8]
 8017560:	2b05      	cmp	r3, #5
 8017562:	d002      	beq.n	801756a <RadioGetLoRaTimeOnAirNumerator+0x2e>
 8017564:	68bb      	ldr	r3, [r7, #8]
 8017566:	2b06      	cmp	r3, #6
 8017568:	d104      	bne.n	8017574 <RadioGetLoRaTimeOnAirNumerator+0x38>
    {
        if( preambleLen < 12 )
 801756a:	88bb      	ldrh	r3, [r7, #4]
 801756c:	2b0b      	cmp	r3, #11
 801756e:	d801      	bhi.n	8017574 <RadioGetLoRaTimeOnAirNumerator+0x38>
        {
            preambleLen = 12;
 8017570:	230c      	movs	r3, #12
 8017572:	80bb      	strh	r3, [r7, #4]
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8017574:	68fb      	ldr	r3, [r7, #12]
 8017576:	2b00      	cmp	r3, #0
 8017578:	d105      	bne.n	8017586 <RadioGetLoRaTimeOnAirNumerator+0x4a>
 801757a:	68bb      	ldr	r3, [r7, #8]
 801757c:	2b0b      	cmp	r3, #11
 801757e:	d008      	beq.n	8017592 <RadioGetLoRaTimeOnAirNumerator+0x56>
 8017580:	68bb      	ldr	r3, [r7, #8]
 8017582:	2b0c      	cmp	r3, #12
 8017584:	d005      	beq.n	8017592 <RadioGetLoRaTimeOnAirNumerator+0x56>
 8017586:	68fb      	ldr	r3, [r7, #12]
 8017588:	2b01      	cmp	r3, #1
 801758a:	d105      	bne.n	8017598 <RadioGetLoRaTimeOnAirNumerator+0x5c>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 801758c:	68bb      	ldr	r3, [r7, #8]
 801758e:	2b0c      	cmp	r3, #12
 8017590:	d102      	bne.n	8017598 <RadioGetLoRaTimeOnAirNumerator+0x5c>
    {
        lowDatareOptimize = true;
 8017592:	2301      	movs	r3, #1
 8017594:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8017598:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 801759c:	00db      	lsls	r3, r3, #3
                            ( crcOn ? 16 : 0 ) -
 801759e:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80175a2:	2a00      	cmp	r2, #0
 80175a4:	d001      	beq.n	80175aa <RadioGetLoRaTimeOnAirNumerator+0x6e>
 80175a6:	2210      	movs	r2, #16
 80175a8:	e000      	b.n	80175ac <RadioGetLoRaTimeOnAirNumerator+0x70>
 80175aa:	2200      	movs	r2, #0
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 80175ac:	4413      	add	r3, r2
 80175ae:	461a      	mov	r2, r3
                            ( 4 * datarate ) +
 80175b0:	68bb      	ldr	r3, [r7, #8]
 80175b2:	009b      	lsls	r3, r3, #2
                            ( crcOn ? 16 : 0 ) -
 80175b4:	1ad3      	subs	r3, r2, r3
                            ( fixLen ? 0 : 20 );
 80175b6:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 80175ba:	2a00      	cmp	r2, #0
 80175bc:	d001      	beq.n	80175c2 <RadioGetLoRaTimeOnAirNumerator+0x86>
 80175be:	2200      	movs	r2, #0
 80175c0:	e000      	b.n	80175c4 <RadioGetLoRaTimeOnAirNumerator+0x88>
 80175c2:	2214      	movs	r2, #20
                            ( 4 * datarate ) +
 80175c4:	4413      	add	r3, r2
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 80175c6:	61fb      	str	r3, [r7, #28]

    if( datarate <= 6 )
 80175c8:	68bb      	ldr	r3, [r7, #8]
 80175ca:	2b06      	cmp	r3, #6
 80175cc:	d803      	bhi.n	80175d6 <RadioGetLoRaTimeOnAirNumerator+0x9a>
    {
        ceilDenominator = 4 * datarate;
 80175ce:	68bb      	ldr	r3, [r7, #8]
 80175d0:	009b      	lsls	r3, r3, #2
 80175d2:	623b      	str	r3, [r7, #32]
 80175d4:	e00e      	b.n	80175f4 <RadioGetLoRaTimeOnAirNumerator+0xb8>
    }
    else
    {
        ceilNumerator += 8;
 80175d6:	69fb      	ldr	r3, [r7, #28]
 80175d8:	3308      	adds	r3, #8
 80175da:	61fb      	str	r3, [r7, #28]

        if( lowDatareOptimize == true )
 80175dc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80175e0:	2b00      	cmp	r3, #0
 80175e2:	d004      	beq.n	80175ee <RadioGetLoRaTimeOnAirNumerator+0xb2>
        {
            ceilDenominator = 4 * ( datarate - 2 );
 80175e4:	68bb      	ldr	r3, [r7, #8]
 80175e6:	3b02      	subs	r3, #2
 80175e8:	009b      	lsls	r3, r3, #2
 80175ea:	623b      	str	r3, [r7, #32]
 80175ec:	e002      	b.n	80175f4 <RadioGetLoRaTimeOnAirNumerator+0xb8>
        }
        else
        {
            ceilDenominator = 4 * datarate;
 80175ee:	68bb      	ldr	r3, [r7, #8]
 80175f0:	009b      	lsls	r3, r3, #2
 80175f2:	623b      	str	r3, [r7, #32]
        }
    }

    if( ceilNumerator < 0 )
 80175f4:	69fb      	ldr	r3, [r7, #28]
 80175f6:	2b00      	cmp	r3, #0
 80175f8:	da01      	bge.n	80175fe <RadioGetLoRaTimeOnAirNumerator+0xc2>
    {
        ceilNumerator = 0;
 80175fa:	2300      	movs	r3, #0
 80175fc:	61fb      	str	r3, [r7, #28]
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 80175fe:	69fa      	ldr	r2, [r7, #28]
 8017600:	6a3b      	ldr	r3, [r7, #32]
 8017602:	4413      	add	r3, r2
 8017604:	1e5a      	subs	r2, r3, #1
 8017606:	6a3b      	ldr	r3, [r7, #32]
 8017608:	fb92 f3f3 	sdiv	r3, r2, r3
 801760c:	697a      	ldr	r2, [r7, #20]
 801760e:	fb03 f202 	mul.w	r2, r3, r2
 8017612:	88bb      	ldrh	r3, [r7, #4]
 8017614:	4413      	add	r3, r2
    int32_t intermediate =
 8017616:	330c      	adds	r3, #12
 8017618:	61bb      	str	r3, [r7, #24]

    if( datarate <= 6 )
 801761a:	68bb      	ldr	r3, [r7, #8]
 801761c:	2b06      	cmp	r3, #6
 801761e:	d802      	bhi.n	8017626 <RadioGetLoRaTimeOnAirNumerator+0xea>
    {
        intermediate += 2;
 8017620:	69bb      	ldr	r3, [r7, #24]
 8017622:	3302      	adds	r3, #2
 8017624:	61bb      	str	r3, [r7, #24]
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 8017626:	69bb      	ldr	r3, [r7, #24]
 8017628:	009b      	lsls	r3, r3, #2
 801762a:	1c5a      	adds	r2, r3, #1
 801762c:	68bb      	ldr	r3, [r7, #8]
 801762e:	3b02      	subs	r3, #2
 8017630:	fa02 f303 	lsl.w	r3, r2, r3
}
 8017634:	4618      	mov	r0, r3
 8017636:	372c      	adds	r7, #44	@ 0x2c
 8017638:	46bd      	mov	sp, r7
 801763a:	bc80      	pop	{r7}
 801763c:	4770      	bx	lr
	...

08017640 <RadioTimeOnAir>:

static uint32_t RadioTimeOnAir( RadioModems_t modem, uint32_t bandwidth,
                                uint32_t datarate, uint8_t coderate,
                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                bool crcOn )
{
 8017640:	b580      	push	{r7, lr}
 8017642:	b08a      	sub	sp, #40	@ 0x28
 8017644:	af04      	add	r7, sp, #16
 8017646:	60b9      	str	r1, [r7, #8]
 8017648:	607a      	str	r2, [r7, #4]
 801764a:	461a      	mov	r2, r3
 801764c:	4603      	mov	r3, r0
 801764e:	73fb      	strb	r3, [r7, #15]
 8017650:	4613      	mov	r3, r2
 8017652:	73bb      	strb	r3, [r7, #14]
    uint32_t numerator = 0;
 8017654:	2300      	movs	r3, #0
 8017656:	617b      	str	r3, [r7, #20]
    uint32_t denominator = 1;
 8017658:	2301      	movs	r3, #1
 801765a:	613b      	str	r3, [r7, #16]

    switch( modem )
 801765c:	7bfb      	ldrb	r3, [r7, #15]
 801765e:	2b00      	cmp	r3, #0
 8017660:	d002      	beq.n	8017668 <RadioTimeOnAir+0x28>
 8017662:	2b01      	cmp	r3, #1
 8017664:	d017      	beq.n	8017696 <RadioTimeOnAir+0x56>
                                                                  fixLen, payloadLen, crcOn );
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
        }
        break;
    default:
        break;
 8017666:	e035      	b.n	80176d4 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetGfskTimeOnAirNumerator( datarate, coderate,
 8017668:	f897 0024 	ldrb.w	r0, [r7, #36]	@ 0x24
 801766c:	8c3a      	ldrh	r2, [r7, #32]
 801766e:	7bb9      	ldrb	r1, [r7, #14]
 8017670:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8017674:	9301      	str	r3, [sp, #4]
 8017676:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 801767a:	9300      	str	r3, [sp, #0]
 801767c:	4603      	mov	r3, r0
 801767e:	6878      	ldr	r0, [r7, #4]
 8017680:	f7ff ff32 	bl	80174e8 <RadioGetGfskTimeOnAirNumerator>
 8017684:	4603      	mov	r3, r0
 8017686:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 801768a:	fb02 f303 	mul.w	r3, r2, r3
 801768e:	617b      	str	r3, [r7, #20]
            denominator = datarate;
 8017690:	687b      	ldr	r3, [r7, #4]
 8017692:	613b      	str	r3, [r7, #16]
        break;
 8017694:	e01e      	b.n	80176d4 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
 8017696:	8c39      	ldrh	r1, [r7, #32]
 8017698:	7bba      	ldrb	r2, [r7, #14]
 801769a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 801769e:	9302      	str	r3, [sp, #8]
 80176a0:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80176a4:	9301      	str	r3, [sp, #4]
 80176a6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80176aa:	9300      	str	r3, [sp, #0]
 80176ac:	460b      	mov	r3, r1
 80176ae:	6879      	ldr	r1, [r7, #4]
 80176b0:	68b8      	ldr	r0, [r7, #8]
 80176b2:	f7ff ff43 	bl	801753c <RadioGetLoRaTimeOnAirNumerator>
 80176b6:	4603      	mov	r3, r0
 80176b8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80176bc:	fb02 f303 	mul.w	r3, r2, r3
 80176c0:	617b      	str	r3, [r7, #20]
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
 80176c2:	4a0a      	ldr	r2, [pc, #40]	@ (80176ec <RadioTimeOnAir+0xac>)
 80176c4:	68bb      	ldr	r3, [r7, #8]
 80176c6:	4413      	add	r3, r2
 80176c8:	781b      	ldrb	r3, [r3, #0]
 80176ca:	4618      	mov	r0, r3
 80176cc:	f7ff feb6 	bl	801743c <RadioGetLoRaBandwidthInHz>
 80176d0:	6138      	str	r0, [r7, #16]
        break;
 80176d2:	bf00      	nop
    }
    // Perform integral ceil()
    return DIVC( numerator, denominator ); /* ST_WORKAROUND : simplified calculation with macro usage */
 80176d4:	697a      	ldr	r2, [r7, #20]
 80176d6:	693b      	ldr	r3, [r7, #16]
 80176d8:	4413      	add	r3, r2
 80176da:	1e5a      	subs	r2, r3, #1
 80176dc:	693b      	ldr	r3, [r7, #16]
 80176de:	fbb2 f3f3 	udiv	r3, r2, r3
}
 80176e2:	4618      	mov	r0, r3
 80176e4:	3718      	adds	r7, #24
 80176e6:	46bd      	mov	sp, r7
 80176e8:	bd80      	pop	{r7, pc}
 80176ea:	bf00      	nop
 80176ec:	0801c600 	.word	0x0801c600

080176f0 <RadioSend>:

static void RadioSend( uint8_t *buffer, uint8_t size )
{
 80176f0:	b580      	push	{r7, lr}
 80176f2:	b084      	sub	sp, #16
 80176f4:	af00      	add	r7, sp, #0
 80176f6:	6078      	str	r0, [r7, #4]
 80176f8:	460b      	mov	r3, r1
 80176fa:	70fb      	strb	r3, [r7, #3]
    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_TX_DBG,
 80176fc:	2300      	movs	r3, #0
 80176fe:	2200      	movs	r2, #0
 8017700:	f240 2101 	movw	r1, #513	@ 0x201
 8017704:	f240 2001 	movw	r0, #513	@ 0x201
 8017708:	f001 fd34 	bl	8019174 <SUBGRF_SetDioIrqParams>
    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    /* Set DBG pin */
    DBG_GPIO_RADIO_TX( SET );

    /* Set RF switch */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 801770c:	4b71      	ldr	r3, [pc, #452]	@ (80178d4 <RadioSend+0x1e4>)
 801770e:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8017712:	2101      	movs	r1, #1
 8017714:	4618      	mov	r0, r3
 8017716:	f002 f9d1 	bl	8019abc <SUBGRF_SetSwitch>
    /* WORKAROUND - Modulation Quality with 500 kHz LoRaTM Bandwidth*/
    /* RegTxModulation = @address 0x0889 */
    if( ( SubgRf.Modem == MODEM_LORA ) && ( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 ) )
 801771a:	4b6e      	ldr	r3, [pc, #440]	@ (80178d4 <RadioSend+0x1e4>)
 801771c:	781b      	ldrb	r3, [r3, #0]
 801771e:	2b01      	cmp	r3, #1
 8017720:	d112      	bne.n	8017748 <RadioSend+0x58>
 8017722:	4b6c      	ldr	r3, [pc, #432]	@ (80178d4 <RadioSend+0x1e4>)
 8017724:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8017728:	2b06      	cmp	r3, #6
 801772a:	d10d      	bne.n	8017748 <RadioSend+0x58>
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 801772c:	f640 0089 	movw	r0, #2185	@ 0x889
 8017730:	f002 f8e4 	bl	80198fc <SUBGRF_ReadRegister>
 8017734:	4603      	mov	r3, r0
 8017736:	f023 0304 	bic.w	r3, r3, #4
 801773a:	b2db      	uxtb	r3, r3
 801773c:	4619      	mov	r1, r3
 801773e:	f640 0089 	movw	r0, #2185	@ 0x889
 8017742:	f002 f8c7 	bl	80198d4 <SUBGRF_WriteRegister>
 8017746:	e00c      	b.n	8017762 <RadioSend+0x72>
    }
    else
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 8017748:	f640 0089 	movw	r0, #2185	@ 0x889
 801774c:	f002 f8d6 	bl	80198fc <SUBGRF_ReadRegister>
 8017750:	4603      	mov	r3, r0
 8017752:	f043 0304 	orr.w	r3, r3, #4
 8017756:	b2db      	uxtb	r3, r3
 8017758:	4619      	mov	r1, r3
 801775a:	f640 0089 	movw	r0, #2185	@ 0x889
 801775e:	f002 f8b9 	bl	80198d4 <SUBGRF_WriteRegister>
    }
    /* WORKAROUND END */
    switch( SubgRf.Modem )
 8017762:	4b5c      	ldr	r3, [pc, #368]	@ (80178d4 <RadioSend+0x1e4>)
 8017764:	781b      	ldrb	r3, [r3, #0]
 8017766:	2b04      	cmp	r3, #4
 8017768:	f200 80a7 	bhi.w	80178ba <RadioSend+0x1ca>
 801776c:	a201      	add	r2, pc, #4	@ (adr r2, 8017774 <RadioSend+0x84>)
 801776e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017772:	bf00      	nop
 8017774:	080177a3 	.word	0x080177a3
 8017778:	08017789 	.word	0x08017789
 801777c:	080177a3 	.word	0x080177a3
 8017780:	08017803 	.word	0x08017803
 8017784:	08017823 	.word	0x08017823
    {
        case MODEM_LORA:
        {
            SubgRf.PacketParams.Params.LoRa.PayloadLength = size;
 8017788:	4a52      	ldr	r2, [pc, #328]	@ (80178d4 <RadioSend+0x1e4>)
 801778a:	78fb      	ldrb	r3, [r7, #3]
 801778c:	77d3      	strb	r3, [r2, #31]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801778e:	4852      	ldr	r0, [pc, #328]	@ (80178d8 <RadioSend+0x1e8>)
 8017790:	f001 ff58 	bl	8019644 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 8017794:	78fb      	ldrb	r3, [r7, #3]
 8017796:	2200      	movs	r2, #0
 8017798:	4619      	mov	r1, r3
 801779a:	6878      	ldr	r0, [r7, #4]
 801779c:	f001 fa0c 	bl	8018bb8 <SUBGRF_SendPayload>
            break;
 80177a0:	e08c      	b.n	80178bc <RadioSend+0x1cc>
        }
        case MODEM_MSK:
        case MODEM_FSK:
        {
            if ( 1UL == RFW_Is_Init( ) )
 80177a2:	f002 fb74 	bl	8019e8e <RFW_Is_Init>
 80177a6:	4603      	mov	r3, r0
 80177a8:	2b01      	cmp	r3, #1
 80177aa:	d11d      	bne.n	80177e8 <RadioSend+0xf8>
            {
              uint8_t outsize;
              if ( 0UL == RFW_TransmitInit( buffer,size, &outsize ) )
 80177ac:	f107 020d 	add.w	r2, r7, #13
 80177b0:	78fb      	ldrb	r3, [r7, #3]
 80177b2:	4619      	mov	r1, r3
 80177b4:	6878      	ldr	r0, [r7, #4]
 80177b6:	f002 fb82 	bl	8019ebe <RFW_TransmitInit>
 80177ba:	4603      	mov	r3, r0
 80177bc:	2b00      	cmp	r3, #0
 80177be:	d10c      	bne.n	80177da <RadioSend+0xea>
              {
                  SubgRf.PacketParams.Params.Gfsk.PayloadLength = outsize;
 80177c0:	7b7a      	ldrb	r2, [r7, #13]
 80177c2:	4b44      	ldr	r3, [pc, #272]	@ (80178d4 <RadioSend+0x1e4>)
 80177c4:	759a      	strb	r2, [r3, #22]
                  SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80177c6:	4844      	ldr	r0, [pc, #272]	@ (80178d8 <RadioSend+0x1e8>)
 80177c8:	f001 ff3c 	bl	8019644 <SUBGRF_SetPacketParams>
                  SUBGRF_SendPayload( buffer, outsize, 0 );
 80177cc:	7b7b      	ldrb	r3, [r7, #13]
 80177ce:	2200      	movs	r2, #0
 80177d0:	4619      	mov	r1, r3
 80177d2:	6878      	ldr	r0, [r7, #4]
 80177d4:	f001 f9f0 	bl	8018bb8 <SUBGRF_SendPayload>
            {
              SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
              SUBGRF_SetPacketParams( &SubgRf.PacketParams );
              SUBGRF_SendPayload( buffer, size, 0 );
            }
            break;
 80177d8:	e070      	b.n	80178bc <RadioSend+0x1cc>
                MW_LOG( TS_ON, VLEVEL_M, "RadioSend Oversize\r\n");
 80177da:	4b40      	ldr	r3, [pc, #256]	@ (80178dc <RadioSend+0x1ec>)
 80177dc:	2201      	movs	r2, #1
 80177de:	2100      	movs	r1, #0
 80177e0:	2002      	movs	r0, #2
 80177e2:	f003 fc8b 	bl	801b0fc <UTIL_ADV_TRACE_COND_FSend>
 80177e6:	e072      	b.n	80178ce <RadioSend+0x1de>
              SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
 80177e8:	4a3a      	ldr	r2, [pc, #232]	@ (80178d4 <RadioSend+0x1e4>)
 80177ea:	78fb      	ldrb	r3, [r7, #3]
 80177ec:	7593      	strb	r3, [r2, #22]
              SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80177ee:	483a      	ldr	r0, [pc, #232]	@ (80178d8 <RadioSend+0x1e8>)
 80177f0:	f001 ff28 	bl	8019644 <SUBGRF_SetPacketParams>
              SUBGRF_SendPayload( buffer, size, 0 );
 80177f4:	78fb      	ldrb	r3, [r7, #3]
 80177f6:	2200      	movs	r2, #0
 80177f8:	4619      	mov	r1, r3
 80177fa:	6878      	ldr	r0, [r7, #4]
 80177fc:	f001 f9dc 	bl	8018bb8 <SUBGRF_SendPayload>
            break;
 8017800:	e05c      	b.n	80178bc <RadioSend+0x1cc>
        }
        case MODEM_BPSK:
        {
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 8017802:	4b34      	ldr	r3, [pc, #208]	@ (80178d4 <RadioSend+0x1e4>)
 8017804:	2202      	movs	r2, #2
 8017806:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size;
 8017808:	4a32      	ldr	r2, [pc, #200]	@ (80178d4 <RadioSend+0x1e4>)
 801780a:	78fb      	ldrb	r3, [r7, #3]
 801780c:	7693      	strb	r3, [r2, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801780e:	4832      	ldr	r0, [pc, #200]	@ (80178d8 <RadioSend+0x1e8>)
 8017810:	f001 ff18 	bl	8019644 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 8017814:	78fb      	ldrb	r3, [r7, #3]
 8017816:	2200      	movs	r2, #0
 8017818:	4619      	mov	r1, r3
 801781a:	6878      	ldr	r0, [r7, #4]
 801781c:	f001 f9cc 	bl	8018bb8 <SUBGRF_SendPayload>
            break;
 8017820:	e04c      	b.n	80178bc <RadioSend+0x1cc>
        case MODEM_SIGFOX_TX:
        {
            /* from bpsk to dbpsk */
            /* first 1 bit duplicated */
            /* RadioBuffer is 1 bytes more */
            payload_integration( RadioBuffer, buffer, size );
 8017822:	78fb      	ldrb	r3, [r7, #3]
 8017824:	461a      	mov	r2, r3
 8017826:	6879      	ldr	r1, [r7, #4]
 8017828:	482d      	ldr	r0, [pc, #180]	@ (80178e0 <RadioSend+0x1f0>)
 801782a:	f000 fcbc 	bl	80181a6 <payload_integration>

            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 801782e:	4b29      	ldr	r3, [pc, #164]	@ (80178d4 <RadioSend+0x1e4>)
 8017830:	2202      	movs	r2, #2
 8017832:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size + 1;
 8017834:	78fb      	ldrb	r3, [r7, #3]
 8017836:	3301      	adds	r3, #1
 8017838:	b2da      	uxtb	r2, r3
 801783a:	4b26      	ldr	r3, [pc, #152]	@ (80178d4 <RadioSend+0x1e4>)
 801783c:	769a      	strb	r2, [r3, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801783e:	4826      	ldr	r0, [pc, #152]	@ (80178d8 <RadioSend+0x1e8>)
 8017840:	f001 ff00 	bl	8019644 <SUBGRF_SetPacketParams>

            RadioWrite( SUBGHZ_RAM_RAMPUPL, 0 ); // clean start-up LSB
 8017844:	2100      	movs	r1, #0
 8017846:	20f1      	movs	r0, #241	@ 0xf1
 8017848:	f000 f95c 	bl	8017b04 <RadioWrite>
            RadioWrite( SUBGHZ_RAM_RAMPUPH, 0 ); // clean start-up MSB
 801784c:	2100      	movs	r1, #0
 801784e:	20f0      	movs	r0, #240	@ 0xf0
 8017850:	f000 f958 	bl	8017b04 <RadioWrite>
            if( SubgRf.ModulationParams.Params.Bpsk.BitRate == 100 )
 8017854:	4b1f      	ldr	r3, [pc, #124]	@ (80178d4 <RadioSend+0x1e4>)
 8017856:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8017858:	2b64      	cmp	r3, #100	@ 0x64
 801785a:	d108      	bne.n	801786e <RadioSend+0x17e>
            {
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0x70 ); // clean end of frame LSB
 801785c:	2170      	movs	r1, #112	@ 0x70
 801785e:	20f3      	movs	r0, #243	@ 0xf3
 8017860:	f000 f950 	bl	8017b04 <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x1D ); // clean end of frame MSB
 8017864:	211d      	movs	r1, #29
 8017866:	20f2      	movs	r0, #242	@ 0xf2
 8017868:	f000 f94c 	bl	8017b04 <RadioWrite>
 801786c:	e007      	b.n	801787e <RadioSend+0x18e>
            }
            else // 600 bps
            {
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0xE1 ); // clean end of frame LSB
 801786e:	21e1      	movs	r1, #225	@ 0xe1
 8017870:	20f3      	movs	r0, #243	@ 0xf3
 8017872:	f000 f947 	bl	8017b04 <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x04 ); // clean end of frame MSB
 8017876:	2104      	movs	r1, #4
 8017878:	20f2      	movs	r0, #242	@ 0xf2
 801787a:	f000 f943 	bl	8017b04 <RadioWrite>
            }

            uint16_t bitNum = ( size * 8 ) + 2;
 801787e:	78fb      	ldrb	r3, [r7, #3]
 8017880:	b29b      	uxth	r3, r3
 8017882:	00db      	lsls	r3, r3, #3
 8017884:	b29b      	uxth	r3, r3
 8017886:	3302      	adds	r3, #2
 8017888:	81fb      	strh	r3, [r7, #14]
            RadioWrite( SUBGHZ_RAM_FRAMELIMH, ( bitNum >> 8 ) & 0x00FF );    // limit frame
 801788a:	89fb      	ldrh	r3, [r7, #14]
 801788c:	0a1b      	lsrs	r3, r3, #8
 801788e:	b29b      	uxth	r3, r3
 8017890:	b2db      	uxtb	r3, r3
 8017892:	4619      	mov	r1, r3
 8017894:	20f4      	movs	r0, #244	@ 0xf4
 8017896:	f000 f935 	bl	8017b04 <RadioWrite>
            RadioWrite( SUBGHZ_RAM_FRAMELIML, bitNum & 0x00FF );             // limit frame
 801789a:	89fb      	ldrh	r3, [r7, #14]
 801789c:	b2db      	uxtb	r3, r3
 801789e:	4619      	mov	r1, r3
 80178a0:	20f5      	movs	r0, #245	@ 0xf5
 80178a2:	f000 f92f 	bl	8017b04 <RadioWrite>
            SUBGRF_SendPayload( RadioBuffer, size+1 , 0xFFFFFF );
 80178a6:	78fb      	ldrb	r3, [r7, #3]
 80178a8:	3301      	adds	r3, #1
 80178aa:	b2db      	uxtb	r3, r3
 80178ac:	f06f 427f 	mvn.w	r2, #4278190080	@ 0xff000000
 80178b0:	4619      	mov	r1, r3
 80178b2:	480b      	ldr	r0, [pc, #44]	@ (80178e0 <RadioSend+0x1f0>)
 80178b4:	f001 f980 	bl	8018bb8 <SUBGRF_SendPayload>
            break;
 80178b8:	e000      	b.n	80178bc <RadioSend+0x1cc>
        }
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 80178ba:	bf00      	nop
    }

    TimerSetValue( &TxTimeoutTimer, SubgRf.TxTimeout );
 80178bc:	4b05      	ldr	r3, [pc, #20]	@ (80178d4 <RadioSend+0x1e4>)
 80178be:	685b      	ldr	r3, [r3, #4]
 80178c0:	4619      	mov	r1, r3
 80178c2:	4808      	ldr	r0, [pc, #32]	@ (80178e4 <RadioSend+0x1f4>)
 80178c4:	f003 fa80 	bl	801adc8 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 80178c8:	4806      	ldr	r0, [pc, #24]	@ (80178e4 <RadioSend+0x1f4>)
 80178ca:	f003 f99f 	bl	801ac0c <UTIL_TIMER_Start>
}
 80178ce:	3710      	adds	r7, #16
 80178d0:	46bd      	mov	sp, r7
 80178d2:	bd80      	pop	{r7, pc}
 80178d4:	20001a70 	.word	0x20001a70
 80178d8:	20001a7e 	.word	0x20001a7e
 80178dc:	0801bfa4 	.word	0x0801bfa4
 80178e0:	2000196c 	.word	0x2000196c
 80178e4:	20001acc 	.word	0x20001acc

080178e8 <RadioSleep>:

static void RadioSleep( void )
{
 80178e8:	b580      	push	{r7, lr}
 80178ea:	b082      	sub	sp, #8
 80178ec:	af00      	add	r7, sp, #0
    SleepParams_t params = { 0 };
 80178ee:	2300      	movs	r3, #0
 80178f0:	713b      	strb	r3, [r7, #4]

    params.Fields.WarmStart = 1;
 80178f2:	793b      	ldrb	r3, [r7, #4]
 80178f4:	f043 0304 	orr.w	r3, r3, #4
 80178f8:	713b      	strb	r3, [r7, #4]
    SUBGRF_SetSleep( params );
 80178fa:	7938      	ldrb	r0, [r7, #4]
 80178fc:	f001 fa38 	bl	8018d70 <SUBGRF_SetSleep>

    RADIO_DELAY_MS( 2 );
 8017900:	2002      	movs	r0, #2
 8017902:	f7ea fa05 	bl	8001d10 <HAL_Delay>
}
 8017906:	bf00      	nop
 8017908:	3708      	adds	r7, #8
 801790a:	46bd      	mov	sp, r7
 801790c:	bd80      	pop	{r7, pc}

0801790e <RadioStandby>:

static void RadioStandby( void )
{
 801790e:	b580      	push	{r7, lr}
 8017910:	af00      	add	r7, sp, #0
    SUBGRF_SetStandby( STDBY_RC );
 8017912:	2000      	movs	r0, #0
 8017914:	f001 fa5e 	bl	8018dd4 <SUBGRF_SetStandby>
}
 8017918:	bf00      	nop
 801791a:	bd80      	pop	{r7, pc}

0801791c <RadioRx>:

static void RadioRx( uint32_t timeout )
{
 801791c:	b580      	push	{r7, lr}
 801791e:	b082      	sub	sp, #8
 8017920:	af00      	add	r7, sp, #0
 8017922:	6078      	str	r0, [r7, #4]
    if( 1UL == RFW_Is_Init( ) )
 8017924:	f002 fab3 	bl	8019e8e <RFW_Is_Init>
 8017928:	4603      	mov	r3, r0
 801792a:	2b01      	cmp	r3, #1
 801792c:	d102      	bne.n	8017934 <RadioRx+0x18>
    {
        RFW_ReceiveInit( );
 801792e:	f002 fad6 	bl	8019ede <RFW_ReceiveInit>
 8017932:	e007      	b.n	8017944 <RadioRx+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8017934:	2300      	movs	r3, #0
 8017936:	2200      	movs	r2, #0
 8017938:	f240 2162 	movw	r1, #610	@ 0x262
 801793c:	f240 2062 	movw	r0, #610	@ 0x262
 8017940:	f001 fc18 	bl	8019174 <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }

    if( timeout != 0 )
 8017944:	687b      	ldr	r3, [r7, #4]
 8017946:	2b00      	cmp	r3, #0
 8017948:	d006      	beq.n	8017958 <RadioRx+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 801794a:	6879      	ldr	r1, [r7, #4]
 801794c:	4811      	ldr	r0, [pc, #68]	@ (8017994 <RadioRx+0x78>)
 801794e:	f003 fa3b 	bl	801adc8 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 8017952:	4810      	ldr	r0, [pc, #64]	@ (8017994 <RadioRx+0x78>)
 8017954:	f003 f95a 	bl	801ac0c <UTIL_TIMER_Start>
    }
    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8017958:	4b0f      	ldr	r3, [pc, #60]	@ (8017998 <RadioRx+0x7c>)
 801795a:	2200      	movs	r2, #0
 801795c:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 801795e:	4b0e      	ldr	r3, [pc, #56]	@ (8017998 <RadioRx+0x7c>)
 8017960:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8017964:	2100      	movs	r1, #0
 8017966:	4618      	mov	r0, r3
 8017968:	f002 f8a8 	bl	8019abc <SUBGRF_SetSwitch>
    /* ST_WORKAROUND_END */

    if( SubgRf.RxContinuous == true )
 801796c:	4b0a      	ldr	r3, [pc, #40]	@ (8017998 <RadioRx+0x7c>)
 801796e:	785b      	ldrb	r3, [r3, #1]
 8017970:	2b00      	cmp	r3, #0
 8017972:	d004      	beq.n	801797e <RadioRx+0x62>
    {
        SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 8017974:	f06f 407f 	mvn.w	r0, #4278190080	@ 0xff000000
 8017978:	f001 fa68 	bl	8018e4c <SUBGRF_SetRx>
    }
    else
    {
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
    }
}
 801797c:	e005      	b.n	801798a <RadioRx+0x6e>
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
 801797e:	4b06      	ldr	r3, [pc, #24]	@ (8017998 <RadioRx+0x7c>)
 8017980:	689b      	ldr	r3, [r3, #8]
 8017982:	019b      	lsls	r3, r3, #6
 8017984:	4618      	mov	r0, r3
 8017986:	f001 fa61 	bl	8018e4c <SUBGRF_SetRx>
}
 801798a:	bf00      	nop
 801798c:	3708      	adds	r7, #8
 801798e:	46bd      	mov	sp, r7
 8017990:	bd80      	pop	{r7, pc}
 8017992:	bf00      	nop
 8017994:	20001ae4 	.word	0x20001ae4
 8017998:	20001a70 	.word	0x20001a70

0801799c <RadioRxBoosted>:

static void RadioRxBoosted( uint32_t timeout )
{
 801799c:	b580      	push	{r7, lr}
 801799e:	b082      	sub	sp, #8
 80179a0:	af00      	add	r7, sp, #0
 80179a2:	6078      	str	r0, [r7, #4]
    if( 1UL == RFW_Is_Init() )
 80179a4:	f002 fa73 	bl	8019e8e <RFW_Is_Init>
 80179a8:	4603      	mov	r3, r0
 80179aa:	2b01      	cmp	r3, #1
 80179ac:	d102      	bne.n	80179b4 <RadioRxBoosted+0x18>
    {
        RFW_ReceiveInit();
 80179ae:	f002 fa96 	bl	8019ede <RFW_ReceiveInit>
 80179b2:	e007      	b.n	80179c4 <RadioRxBoosted+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 80179b4:	2300      	movs	r3, #0
 80179b6:	2200      	movs	r2, #0
 80179b8:	f240 2162 	movw	r1, #610	@ 0x262
 80179bc:	f240 2062 	movw	r0, #610	@ 0x262
 80179c0:	f001 fbd8 	bl	8019174 <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }
    if( timeout != 0 )
 80179c4:	687b      	ldr	r3, [r7, #4]
 80179c6:	2b00      	cmp	r3, #0
 80179c8:	d006      	beq.n	80179d8 <RadioRxBoosted+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 80179ca:	6879      	ldr	r1, [r7, #4]
 80179cc:	4811      	ldr	r0, [pc, #68]	@ (8017a14 <RadioRxBoosted+0x78>)
 80179ce:	f003 f9fb 	bl	801adc8 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 80179d2:	4810      	ldr	r0, [pc, #64]	@ (8017a14 <RadioRxBoosted+0x78>)
 80179d4:	f003 f91a 	bl	801ac0c <UTIL_TIMER_Start>
    }
    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 80179d8:	4b0f      	ldr	r3, [pc, #60]	@ (8017a18 <RadioRxBoosted+0x7c>)
 80179da:	2200      	movs	r2, #0
 80179dc:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 80179de:	4b0e      	ldr	r3, [pc, #56]	@ (8017a18 <RadioRxBoosted+0x7c>)
 80179e0:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 80179e4:	2100      	movs	r1, #0
 80179e6:	4618      	mov	r0, r3
 80179e8:	f002 f868 	bl	8019abc <SUBGRF_SetSwitch>
    /* ST_WORKAROUND_END */

    if( SubgRf.RxContinuous == true )
 80179ec:	4b0a      	ldr	r3, [pc, #40]	@ (8017a18 <RadioRxBoosted+0x7c>)
 80179ee:	785b      	ldrb	r3, [r3, #1]
 80179f0:	2b00      	cmp	r3, #0
 80179f2:	d004      	beq.n	80179fe <RadioRxBoosted+0x62>
    {
        SUBGRF_SetRxBoosted( 0xFFFFFF ); // Rx Continuous
 80179f4:	f06f 407f 	mvn.w	r0, #4278190080	@ 0xff000000
 80179f8:	f001 fa48 	bl	8018e8c <SUBGRF_SetRxBoosted>
    }
    else
    {
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
    }
}
 80179fc:	e005      	b.n	8017a0a <RadioRxBoosted+0x6e>
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
 80179fe:	4b06      	ldr	r3, [pc, #24]	@ (8017a18 <RadioRxBoosted+0x7c>)
 8017a00:	689b      	ldr	r3, [r3, #8]
 8017a02:	019b      	lsls	r3, r3, #6
 8017a04:	4618      	mov	r0, r3
 8017a06:	f001 fa41 	bl	8018e8c <SUBGRF_SetRxBoosted>
}
 8017a0a:	bf00      	nop
 8017a0c:	3708      	adds	r7, #8
 8017a0e:	46bd      	mov	sp, r7
 8017a10:	bd80      	pop	{r7, pc}
 8017a12:	bf00      	nop
 8017a14:	20001ae4 	.word	0x20001ae4
 8017a18:	20001a70 	.word	0x20001a70

08017a1c <RadioSetRxDutyCycle>:

static void RadioSetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 8017a1c:	b580      	push	{r7, lr}
 8017a1e:	b082      	sub	sp, #8
 8017a20:	af00      	add	r7, sp, #0
 8017a22:	6078      	str	r0, [r7, #4]
 8017a24:	6039      	str	r1, [r7, #0]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 2 * rxTime + sleepTime;
 8017a26:	687b      	ldr	r3, [r7, #4]
 8017a28:	005a      	lsls	r2, r3, #1
 8017a2a:	683b      	ldr	r3, [r7, #0]
 8017a2c:	4413      	add	r3, r2
 8017a2e:	4a0c      	ldr	r2, [pc, #48]	@ (8017a60 <RadioSetRxDutyCycle+0x44>)
 8017a30:	6593      	str	r3, [r2, #88]	@ 0x58
    /*Enable also the IRQ_PREAMBLE_DETECTED*/
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8017a32:	2300      	movs	r3, #0
 8017a34:	2200      	movs	r2, #0
 8017a36:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8017a3a:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8017a3e:	f001 fb99 	bl	8019174 <SUBGRF_SetDioIrqParams>
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8017a42:	4b07      	ldr	r3, [pc, #28]	@ (8017a60 <RadioSetRxDutyCycle+0x44>)
 8017a44:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8017a48:	2100      	movs	r1, #0
 8017a4a:	4618      	mov	r0, r3
 8017a4c:	f002 f836 	bl	8019abc <SUBGRF_SetSwitch>
    /* Start Rx DutyCycle*/
    SUBGRF_SetRxDutyCycle( rxTime, sleepTime );
 8017a50:	6839      	ldr	r1, [r7, #0]
 8017a52:	6878      	ldr	r0, [r7, #4]
 8017a54:	f001 fa3e 	bl	8018ed4 <SUBGRF_SetRxDutyCycle>
}
 8017a58:	bf00      	nop
 8017a5a:	3708      	adds	r7, #8
 8017a5c:	46bd      	mov	sp, r7
 8017a5e:	bd80      	pop	{r7, pc}
 8017a60:	20001a70 	.word	0x20001a70

08017a64 <RadioStartCad>:

static void RadioStartCad( void )
{
 8017a64:	b580      	push	{r7, lr}
 8017a66:	af00      	add	r7, sp, #0
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8017a68:	4b09      	ldr	r3, [pc, #36]	@ (8017a90 <RadioStartCad+0x2c>)
 8017a6a:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8017a6e:	2100      	movs	r1, #0
 8017a70:	4618      	mov	r0, r3
 8017a72:	f002 f823 	bl	8019abc <SUBGRF_SetSwitch>

    SUBGRF_SetDioIrqParams( IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
 8017a76:	2300      	movs	r3, #0
 8017a78:	2200      	movs	r2, #0
 8017a7a:	f44f 71c0 	mov.w	r1, #384	@ 0x180
 8017a7e:	f44f 70c0 	mov.w	r0, #384	@ 0x180
 8017a82:	f001 fb77 	bl	8019174 <SUBGRF_SetDioIrqParams>
                            IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
                            IRQ_RADIO_NONE,
                            IRQ_RADIO_NONE );
    SUBGRF_SetCad( );
 8017a86:	f001 fa51 	bl	8018f2c <SUBGRF_SetCad>
}
 8017a8a:	bf00      	nop
 8017a8c:	bd80      	pop	{r7, pc}
 8017a8e:	bf00      	nop
 8017a90:	20001a70 	.word	0x20001a70

08017a94 <RadioSetTxContinuousWave>:

static void RadioSetTxContinuousWave( uint32_t freq, int8_t power, uint16_t time )
{
 8017a94:	b580      	push	{r7, lr}
 8017a96:	b084      	sub	sp, #16
 8017a98:	af00      	add	r7, sp, #0
 8017a9a:	6078      	str	r0, [r7, #4]
 8017a9c:	460b      	mov	r3, r1
 8017a9e:	70fb      	strb	r3, [r7, #3]
 8017aa0:	4613      	mov	r3, r2
 8017aa2:	803b      	strh	r3, [r7, #0]
    uint32_t timeout = ( uint32_t )time * 1000;
 8017aa4:	883b      	ldrh	r3, [r7, #0]
 8017aa6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8017aaa:	fb02 f303 	mul.w	r3, r2, r3
 8017aae:	60fb      	str	r3, [r7, #12]
    uint8_t antswitchpow;

    SUBGRF_SetRfFrequency( freq );
 8017ab0:	6878      	ldr	r0, [r7, #4]
 8017ab2:	f001 fbbb 	bl	801922c <SUBGRF_SetRfFrequency>

    antswitchpow = SUBGRF_SetRfTxPower( power );
 8017ab6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8017aba:	4618      	mov	r0, r3
 8017abc:	f002 f826 	bl	8019b0c <SUBGRF_SetRfTxPower>
 8017ac0:	4603      	mov	r3, r0
 8017ac2:	72fb      	strb	r3, [r7, #11]

    /* Set RF switch */
    SUBGRF_SetSwitch( antswitchpow, RFSWITCH_TX );
 8017ac4:	7afb      	ldrb	r3, [r7, #11]
 8017ac6:	2101      	movs	r1, #1
 8017ac8:	4618      	mov	r0, r3
 8017aca:	f001 fff7 	bl	8019abc <SUBGRF_SetSwitch>

    SUBGRF_SetTxContinuousWave( );
 8017ace:	f001 fa3b 	bl	8018f48 <SUBGRF_SetTxContinuousWave>

    TimerSetValue( &TxTimeoutTimer, timeout );
 8017ad2:	68f9      	ldr	r1, [r7, #12]
 8017ad4:	4804      	ldr	r0, [pc, #16]	@ (8017ae8 <RadioSetTxContinuousWave+0x54>)
 8017ad6:	f003 f977 	bl	801adc8 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 8017ada:	4803      	ldr	r0, [pc, #12]	@ (8017ae8 <RadioSetTxContinuousWave+0x54>)
 8017adc:	f003 f896 	bl	801ac0c <UTIL_TIMER_Start>
}
 8017ae0:	bf00      	nop
 8017ae2:	3710      	adds	r7, #16
 8017ae4:	46bd      	mov	sp, r7
 8017ae6:	bd80      	pop	{r7, pc}
 8017ae8:	20001acc 	.word	0x20001acc

08017aec <RadioRssi>:

static int16_t RadioRssi( RadioModems_t modem )
{
 8017aec:	b580      	push	{r7, lr}
 8017aee:	b082      	sub	sp, #8
 8017af0:	af00      	add	r7, sp, #0
 8017af2:	4603      	mov	r3, r0
 8017af4:	71fb      	strb	r3, [r7, #7]
    return SUBGRF_GetRssiInst( );
 8017af6:	f001 fe5a 	bl	80197ae <SUBGRF_GetRssiInst>
 8017afa:	4603      	mov	r3, r0
}
 8017afc:	4618      	mov	r0, r3
 8017afe:	3708      	adds	r7, #8
 8017b00:	46bd      	mov	sp, r7
 8017b02:	bd80      	pop	{r7, pc}

08017b04 <RadioWrite>:

static void RadioWrite( uint16_t addr, uint8_t data )
{
 8017b04:	b580      	push	{r7, lr}
 8017b06:	b082      	sub	sp, #8
 8017b08:	af00      	add	r7, sp, #0
 8017b0a:	4603      	mov	r3, r0
 8017b0c:	460a      	mov	r2, r1
 8017b0e:	80fb      	strh	r3, [r7, #6]
 8017b10:	4613      	mov	r3, r2
 8017b12:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegister( addr, data );
 8017b14:	797a      	ldrb	r2, [r7, #5]
 8017b16:	88fb      	ldrh	r3, [r7, #6]
 8017b18:	4611      	mov	r1, r2
 8017b1a:	4618      	mov	r0, r3
 8017b1c:	f001 feda 	bl	80198d4 <SUBGRF_WriteRegister>
}
 8017b20:	bf00      	nop
 8017b22:	3708      	adds	r7, #8
 8017b24:	46bd      	mov	sp, r7
 8017b26:	bd80      	pop	{r7, pc}

08017b28 <RadioRead>:

static uint8_t RadioRead( uint16_t addr )
{
 8017b28:	b580      	push	{r7, lr}
 8017b2a:	b082      	sub	sp, #8
 8017b2c:	af00      	add	r7, sp, #0
 8017b2e:	4603      	mov	r3, r0
 8017b30:	80fb      	strh	r3, [r7, #6]
    return SUBGRF_ReadRegister( addr );
 8017b32:	88fb      	ldrh	r3, [r7, #6]
 8017b34:	4618      	mov	r0, r3
 8017b36:	f001 fee1 	bl	80198fc <SUBGRF_ReadRegister>
 8017b3a:	4603      	mov	r3, r0
}
 8017b3c:	4618      	mov	r0, r3
 8017b3e:	3708      	adds	r7, #8
 8017b40:	46bd      	mov	sp, r7
 8017b42:	bd80      	pop	{r7, pc}

08017b44 <RadioWriteRegisters>:

static void RadioWriteRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 8017b44:	b580      	push	{r7, lr}
 8017b46:	b082      	sub	sp, #8
 8017b48:	af00      	add	r7, sp, #0
 8017b4a:	4603      	mov	r3, r0
 8017b4c:	6039      	str	r1, [r7, #0]
 8017b4e:	80fb      	strh	r3, [r7, #6]
 8017b50:	4613      	mov	r3, r2
 8017b52:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegisters( addr, buffer, size );
 8017b54:	797b      	ldrb	r3, [r7, #5]
 8017b56:	b29a      	uxth	r2, r3
 8017b58:	88fb      	ldrh	r3, [r7, #6]
 8017b5a:	6839      	ldr	r1, [r7, #0]
 8017b5c:	4618      	mov	r0, r3
 8017b5e:	f001 fee1 	bl	8019924 <SUBGRF_WriteRegisters>
}
 8017b62:	bf00      	nop
 8017b64:	3708      	adds	r7, #8
 8017b66:	46bd      	mov	sp, r7
 8017b68:	bd80      	pop	{r7, pc}

08017b6a <RadioReadRegisters>:

static void RadioReadRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 8017b6a:	b580      	push	{r7, lr}
 8017b6c:	b082      	sub	sp, #8
 8017b6e:	af00      	add	r7, sp, #0
 8017b70:	4603      	mov	r3, r0
 8017b72:	6039      	str	r1, [r7, #0]
 8017b74:	80fb      	strh	r3, [r7, #6]
 8017b76:	4613      	mov	r3, r2
 8017b78:	717b      	strb	r3, [r7, #5]
    SUBGRF_ReadRegisters( addr, buffer, size );
 8017b7a:	797b      	ldrb	r3, [r7, #5]
 8017b7c:	b29a      	uxth	r2, r3
 8017b7e:	88fb      	ldrh	r3, [r7, #6]
 8017b80:	6839      	ldr	r1, [r7, #0]
 8017b82:	4618      	mov	r0, r3
 8017b84:	f001 fef0 	bl	8019968 <SUBGRF_ReadRegisters>
}
 8017b88:	bf00      	nop
 8017b8a:	3708      	adds	r7, #8
 8017b8c:	46bd      	mov	sp, r7
 8017b8e:	bd80      	pop	{r7, pc}

08017b90 <RadioSetMaxPayloadLength>:

static void RadioSetMaxPayloadLength( RadioModems_t modem, uint8_t max )
{
 8017b90:	b580      	push	{r7, lr}
 8017b92:	b082      	sub	sp, #8
 8017b94:	af00      	add	r7, sp, #0
 8017b96:	4603      	mov	r3, r0
 8017b98:	460a      	mov	r2, r1
 8017b9a:	71fb      	strb	r3, [r7, #7]
 8017b9c:	4613      	mov	r3, r2
 8017b9e:	71bb      	strb	r3, [r7, #6]
    if( modem == MODEM_LORA )
 8017ba0:	79fb      	ldrb	r3, [r7, #7]
 8017ba2:	2b01      	cmp	r3, #1
 8017ba4:	d10a      	bne.n	8017bbc <RadioSetMaxPayloadLength+0x2c>
    {
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength = max;
 8017ba6:	4a0e      	ldr	r2, [pc, #56]	@ (8017be0 <RadioSetMaxPayloadLength+0x50>)
 8017ba8:	79bb      	ldrb	r3, [r7, #6]
 8017baa:	7013      	strb	r3, [r2, #0]
 8017bac:	4b0c      	ldr	r3, [pc, #48]	@ (8017be0 <RadioSetMaxPayloadLength+0x50>)
 8017bae:	781a      	ldrb	r2, [r3, #0]
 8017bb0:	4b0c      	ldr	r3, [pc, #48]	@ (8017be4 <RadioSetMaxPayloadLength+0x54>)
 8017bb2:	77da      	strb	r2, [r3, #31]
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8017bb4:	480c      	ldr	r0, [pc, #48]	@ (8017be8 <RadioSetMaxPayloadLength+0x58>)
 8017bb6:	f001 fd45 	bl	8019644 <SUBGRF_SetPacketParams>
        {
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
        }
    }
}
 8017bba:	e00d      	b.n	8017bd8 <RadioSetMaxPayloadLength+0x48>
        if( SubgRf.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_VARIABLE_LENGTH )
 8017bbc:	4b09      	ldr	r3, [pc, #36]	@ (8017be4 <RadioSetMaxPayloadLength+0x54>)
 8017bbe:	7d5b      	ldrb	r3, [r3, #21]
 8017bc0:	2b01      	cmp	r3, #1
 8017bc2:	d109      	bne.n	8017bd8 <RadioSetMaxPayloadLength+0x48>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
 8017bc4:	4a06      	ldr	r2, [pc, #24]	@ (8017be0 <RadioSetMaxPayloadLength+0x50>)
 8017bc6:	79bb      	ldrb	r3, [r7, #6]
 8017bc8:	7013      	strb	r3, [r2, #0]
 8017bca:	4b05      	ldr	r3, [pc, #20]	@ (8017be0 <RadioSetMaxPayloadLength+0x50>)
 8017bcc:	781a      	ldrb	r2, [r3, #0]
 8017bce:	4b05      	ldr	r3, [pc, #20]	@ (8017be4 <RadioSetMaxPayloadLength+0x54>)
 8017bd0:	759a      	strb	r2, [r3, #22]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8017bd2:	4805      	ldr	r0, [pc, #20]	@ (8017be8 <RadioSetMaxPayloadLength+0x58>)
 8017bd4:	f001 fd36 	bl	8019644 <SUBGRF_SetPacketParams>
}
 8017bd8:	bf00      	nop
 8017bda:	3708      	adds	r7, #8
 8017bdc:	46bd      	mov	sp, r7
 8017bde:	bd80      	pop	{r7, pc}
 8017be0:	20000144 	.word	0x20000144
 8017be4:	20001a70 	.word	0x20001a70
 8017be8:	20001a7e 	.word	0x20001a7e

08017bec <RadioSetPublicNetwork>:

static void RadioSetPublicNetwork( bool enable )
{
 8017bec:	b580      	push	{r7, lr}
 8017bee:	b082      	sub	sp, #8
 8017bf0:	af00      	add	r7, sp, #0
 8017bf2:	4603      	mov	r3, r0
 8017bf4:	71fb      	strb	r3, [r7, #7]
    SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous = enable;
 8017bf6:	4a13      	ldr	r2, [pc, #76]	@ (8017c44 <RadioSetPublicNetwork+0x58>)
 8017bf8:	79fb      	ldrb	r3, [r7, #7]
 8017bfa:	7313      	strb	r3, [r2, #12]
 8017bfc:	4b11      	ldr	r3, [pc, #68]	@ (8017c44 <RadioSetPublicNetwork+0x58>)
 8017bfe:	7b1a      	ldrb	r2, [r3, #12]
 8017c00:	4b10      	ldr	r3, [pc, #64]	@ (8017c44 <RadioSetPublicNetwork+0x58>)
 8017c02:	735a      	strb	r2, [r3, #13]

    RadioSetModem( MODEM_LORA );
 8017c04:	2001      	movs	r0, #1
 8017c06:	f7ff f82f 	bl	8016c68 <RadioSetModem>
    if( enable == true )
 8017c0a:	79fb      	ldrb	r3, [r7, #7]
 8017c0c:	2b00      	cmp	r3, #0
 8017c0e:	d00a      	beq.n	8017c26 <RadioSetPublicNetwork+0x3a>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PUBLIC_SYNCWORD >> 8 ) & 0xFF );
 8017c10:	2134      	movs	r1, #52	@ 0x34
 8017c12:	f44f 60e8 	mov.w	r0, #1856	@ 0x740
 8017c16:	f001 fe5d 	bl	80198d4 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF );
 8017c1a:	2144      	movs	r1, #68	@ 0x44
 8017c1c:	f240 7041 	movw	r0, #1857	@ 0x741
 8017c20:	f001 fe58 	bl	80198d4 <SUBGRF_WriteRegister>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
    }
}
 8017c24:	e009      	b.n	8017c3a <RadioSetPublicNetwork+0x4e>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 8017c26:	2114      	movs	r1, #20
 8017c28:	f44f 60e8 	mov.w	r0, #1856	@ 0x740
 8017c2c:	f001 fe52 	bl	80198d4 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 8017c30:	2124      	movs	r1, #36	@ 0x24
 8017c32:	f240 7041 	movw	r0, #1857	@ 0x741
 8017c36:	f001 fe4d 	bl	80198d4 <SUBGRF_WriteRegister>
}
 8017c3a:	bf00      	nop
 8017c3c:	3708      	adds	r7, #8
 8017c3e:	46bd      	mov	sp, r7
 8017c40:	bd80      	pop	{r7, pc}
 8017c42:	bf00      	nop
 8017c44:	20001a70 	.word	0x20001a70

08017c48 <RadioGetWakeupTime>:

static uint32_t RadioGetWakeupTime( void )
{
 8017c48:	b580      	push	{r7, lr}
 8017c4a:	af00      	add	r7, sp, #0
    return SUBGRF_GetRadioWakeUpTime() + RADIO_WAKEUP_TIME;
 8017c4c:	f001 ff92 	bl	8019b74 <SUBGRF_GetRadioWakeUpTime>
 8017c50:	4603      	mov	r3, r0
 8017c52:	3303      	adds	r3, #3
}
 8017c54:	4618      	mov	r0, r3
 8017c56:	bd80      	pop	{r7, pc}

08017c58 <RadioOnTxTimeoutIrq>:

static void RadioOnTxTimeoutIrq( void *context )
{
 8017c58:	b580      	push	{r7, lr}
 8017c5a:	b082      	sub	sp, #8
 8017c5c:	af00      	add	r7, sp, #0
 8017c5e:	6078      	str	r0, [r7, #4]
    RADIO_TX_TIMEOUT_PROCESS();
 8017c60:	f000 f80e 	bl	8017c80 <RadioOnTxTimeoutProcess>
}
 8017c64:	bf00      	nop
 8017c66:	3708      	adds	r7, #8
 8017c68:	46bd      	mov	sp, r7
 8017c6a:	bd80      	pop	{r7, pc}

08017c6c <RadioOnRxTimeoutIrq>:

static void RadioOnRxTimeoutIrq( void *context )
{
 8017c6c:	b580      	push	{r7, lr}
 8017c6e:	b082      	sub	sp, #8
 8017c70:	af00      	add	r7, sp, #0
 8017c72:	6078      	str	r0, [r7, #4]
    RADIO_RX_TIMEOUT_PROCESS();
 8017c74:	f000 f818 	bl	8017ca8 <RadioOnRxTimeoutProcess>
}
 8017c78:	bf00      	nop
 8017c7a:	3708      	adds	r7, #8
 8017c7c:	46bd      	mov	sp, r7
 8017c7e:	bd80      	pop	{r7, pc}

08017c80 <RadioOnTxTimeoutProcess>:

static void RadioOnTxTimeoutProcess( void )
{
 8017c80:	b580      	push	{r7, lr}
 8017c82:	af00      	add	r7, sp, #0
    /* ST_WORKAROUND_BEGIN: Reset DBG pin */
    DBG_GPIO_RADIO_TX( RST );
    /* ST_WORKAROUND_END */

    if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8017c84:	4b07      	ldr	r3, [pc, #28]	@ (8017ca4 <RadioOnTxTimeoutProcess+0x24>)
 8017c86:	681b      	ldr	r3, [r3, #0]
 8017c88:	2b00      	cmp	r3, #0
 8017c8a:	d008      	beq.n	8017c9e <RadioOnTxTimeoutProcess+0x1e>
 8017c8c:	4b05      	ldr	r3, [pc, #20]	@ (8017ca4 <RadioOnTxTimeoutProcess+0x24>)
 8017c8e:	681b      	ldr	r3, [r3, #0]
 8017c90:	685b      	ldr	r3, [r3, #4]
 8017c92:	2b00      	cmp	r3, #0
 8017c94:	d003      	beq.n	8017c9e <RadioOnTxTimeoutProcess+0x1e>
    {
        RadioEvents->TxTimeout( );
 8017c96:	4b03      	ldr	r3, [pc, #12]	@ (8017ca4 <RadioOnTxTimeoutProcess+0x24>)
 8017c98:	681b      	ldr	r3, [r3, #0]
 8017c9a:	685b      	ldr	r3, [r3, #4]
 8017c9c:	4798      	blx	r3
    }
}
 8017c9e:	bf00      	nop
 8017ca0:	bd80      	pop	{r7, pc}
 8017ca2:	bf00      	nop
 8017ca4:	20001a6c 	.word	0x20001a6c

08017ca8 <RadioOnRxTimeoutProcess>:

static void RadioOnRxTimeoutProcess( void )
{
 8017ca8:	b580      	push	{r7, lr}
 8017caa:	af00      	add	r7, sp, #0
    /* ST_WORKAROUND_BEGIN: Reset DBG pin */
    DBG_GPIO_RADIO_RX( RST );
    /* ST_WORKAROUND_END */

    if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8017cac:	4b07      	ldr	r3, [pc, #28]	@ (8017ccc <RadioOnRxTimeoutProcess+0x24>)
 8017cae:	681b      	ldr	r3, [r3, #0]
 8017cb0:	2b00      	cmp	r3, #0
 8017cb2:	d008      	beq.n	8017cc6 <RadioOnRxTimeoutProcess+0x1e>
 8017cb4:	4b05      	ldr	r3, [pc, #20]	@ (8017ccc <RadioOnRxTimeoutProcess+0x24>)
 8017cb6:	681b      	ldr	r3, [r3, #0]
 8017cb8:	68db      	ldr	r3, [r3, #12]
 8017cba:	2b00      	cmp	r3, #0
 8017cbc:	d003      	beq.n	8017cc6 <RadioOnRxTimeoutProcess+0x1e>
    {
        RadioEvents->RxTimeout( );
 8017cbe:	4b03      	ldr	r3, [pc, #12]	@ (8017ccc <RadioOnRxTimeoutProcess+0x24>)
 8017cc0:	681b      	ldr	r3, [r3, #0]
 8017cc2:	68db      	ldr	r3, [r3, #12]
 8017cc4:	4798      	blx	r3
    }
}
 8017cc6:	bf00      	nop
 8017cc8:	bd80      	pop	{r7, pc}
 8017cca:	bf00      	nop
 8017ccc:	20001a6c 	.word	0x20001a6c

08017cd0 <RadioOnDioIrq>:

static void RadioOnDioIrq( RadioIrqMasks_t radioIrq )
{
 8017cd0:	b580      	push	{r7, lr}
 8017cd2:	b082      	sub	sp, #8
 8017cd4:	af00      	add	r7, sp, #0
 8017cd6:	4603      	mov	r3, r0
 8017cd8:	80fb      	strh	r3, [r7, #6]
    SubgRf.RadioIrq = radioIrq;
 8017cda:	4a05      	ldr	r2, [pc, #20]	@ (8017cf0 <RadioOnDioIrq+0x20>)
 8017cdc:	88fb      	ldrh	r3, [r7, #6]
 8017cde:	f8a2 3054 	strh.w	r3, [r2, #84]	@ 0x54

    RADIO_IRQ_PROCESS();
 8017ce2:	f000 f807 	bl	8017cf4 <RadioIrqProcess>
}
 8017ce6:	bf00      	nop
 8017ce8:	3708      	adds	r7, #8
 8017cea:	46bd      	mov	sp, r7
 8017cec:	bd80      	pop	{r7, pc}
 8017cee:	bf00      	nop
 8017cf0:	20001a70 	.word	0x20001a70

08017cf4 <RadioIrqProcess>:

static void RadioIrqProcess( void )
{
 8017cf4:	b5b0      	push	{r4, r5, r7, lr}
 8017cf6:	b082      	sub	sp, #8
 8017cf8:	af00      	add	r7, sp, #0
    uint8_t size = 0;
 8017cfa:	2300      	movs	r3, #0
 8017cfc:	71fb      	strb	r3, [r7, #7]
    int32_t cfo = 0;
 8017cfe:	2300      	movs	r3, #0
 8017d00:	603b      	str	r3, [r7, #0]

    switch( SubgRf.RadioIrq )
 8017d02:	4ba8      	ldr	r3, [pc, #672]	@ (8017fa4 <RadioIrqProcess+0x2b0>)
 8017d04:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8017d08:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8017d0c:	f000 810d 	beq.w	8017f2a <RadioIrqProcess+0x236>
 8017d10:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8017d14:	f300 81e8 	bgt.w	80180e8 <RadioIrqProcess+0x3f4>
 8017d18:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8017d1c:	f000 80f1 	beq.w	8017f02 <RadioIrqProcess+0x20e>
 8017d20:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8017d24:	f300 81e0 	bgt.w	80180e8 <RadioIrqProcess+0x3f4>
 8017d28:	2b80      	cmp	r3, #128	@ 0x80
 8017d2a:	f000 80d6 	beq.w	8017eda <RadioIrqProcess+0x1e6>
 8017d2e:	2b80      	cmp	r3, #128	@ 0x80
 8017d30:	f300 81da 	bgt.w	80180e8 <RadioIrqProcess+0x3f4>
 8017d34:	2b20      	cmp	r3, #32
 8017d36:	dc49      	bgt.n	8017dcc <RadioIrqProcess+0xd8>
 8017d38:	2b00      	cmp	r3, #0
 8017d3a:	f340 81d5 	ble.w	80180e8 <RadioIrqProcess+0x3f4>
 8017d3e:	3b01      	subs	r3, #1
 8017d40:	2b1f      	cmp	r3, #31
 8017d42:	f200 81d1 	bhi.w	80180e8 <RadioIrqProcess+0x3f4>
 8017d46:	a201      	add	r2, pc, #4	@ (adr r2, 8017d4c <RadioIrqProcess+0x58>)
 8017d48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017d4c:	08017dd5 	.word	0x08017dd5
 8017d50:	08017e0f 	.word	0x08017e0f
 8017d54:	080180e9 	.word	0x080180e9
 8017d58:	08017fc5 	.word	0x08017fc5
 8017d5c:	080180e9 	.word	0x080180e9
 8017d60:	080180e9 	.word	0x080180e9
 8017d64:	080180e9 	.word	0x080180e9
 8017d68:	08018041 	.word	0x08018041
 8017d6c:	080180e9 	.word	0x080180e9
 8017d70:	080180e9 	.word	0x080180e9
 8017d74:	080180e9 	.word	0x080180e9
 8017d78:	080180e9 	.word	0x080180e9
 8017d7c:	080180e9 	.word	0x080180e9
 8017d80:	080180e9 	.word	0x080180e9
 8017d84:	080180e9 	.word	0x080180e9
 8017d88:	0801805d 	.word	0x0801805d
 8017d8c:	080180e9 	.word	0x080180e9
 8017d90:	080180e9 	.word	0x080180e9
 8017d94:	080180e9 	.word	0x080180e9
 8017d98:	080180e9 	.word	0x080180e9
 8017d9c:	080180e9 	.word	0x080180e9
 8017da0:	080180e9 	.word	0x080180e9
 8017da4:	080180e9 	.word	0x080180e9
 8017da8:	080180e9 	.word	0x080180e9
 8017dac:	080180e9 	.word	0x080180e9
 8017db0:	080180e9 	.word	0x080180e9
 8017db4:	080180e9 	.word	0x080180e9
 8017db8:	080180e9 	.word	0x080180e9
 8017dbc:	080180e9 	.word	0x080180e9
 8017dc0:	080180e9 	.word	0x080180e9
 8017dc4:	080180e9 	.word	0x080180e9
 8017dc8:	0801806b 	.word	0x0801806b
 8017dcc:	2b40      	cmp	r3, #64	@ 0x40
 8017dce:	f000 816d 	beq.w	80180ac <RadioIrqProcess+0x3b8>
        {
            RadioEvents->RxError( );
        }
        break;
    default:
        break;
 8017dd2:	e189      	b.n	80180e8 <RadioIrqProcess+0x3f4>
        TimerStop( &TxTimeoutTimer );
 8017dd4:	4874      	ldr	r0, [pc, #464]	@ (8017fa8 <RadioIrqProcess+0x2b4>)
 8017dd6:	f002 ff87 	bl	801ace8 <UTIL_TIMER_Stop>
        SUBGRF_SetStandby( STDBY_RC );
 8017dda:	2000      	movs	r0, #0
 8017ddc:	f000 fffa 	bl	8018dd4 <SUBGRF_SetStandby>
        if( RFW_Is_LongPacketModeEnabled() == 1 )
 8017de0:	f002 f85c 	bl	8019e9c <RFW_Is_LongPacketModeEnabled>
 8017de4:	4603      	mov	r3, r0
 8017de6:	2b01      	cmp	r3, #1
 8017de8:	d101      	bne.n	8017dee <RadioIrqProcess+0xfa>
            RFW_DeInit_TxLongPacket( );
 8017dea:	f002 f880 	bl	8019eee <RFW_DeInit_TxLongPacket>
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 8017dee:	4b6f      	ldr	r3, [pc, #444]	@ (8017fac <RadioIrqProcess+0x2b8>)
 8017df0:	681b      	ldr	r3, [r3, #0]
 8017df2:	2b00      	cmp	r3, #0
 8017df4:	f000 817a 	beq.w	80180ec <RadioIrqProcess+0x3f8>
 8017df8:	4b6c      	ldr	r3, [pc, #432]	@ (8017fac <RadioIrqProcess+0x2b8>)
 8017dfa:	681b      	ldr	r3, [r3, #0]
 8017dfc:	681b      	ldr	r3, [r3, #0]
 8017dfe:	2b00      	cmp	r3, #0
 8017e00:	f000 8174 	beq.w	80180ec <RadioIrqProcess+0x3f8>
            RadioEvents->TxDone( );
 8017e04:	4b69      	ldr	r3, [pc, #420]	@ (8017fac <RadioIrqProcess+0x2b8>)
 8017e06:	681b      	ldr	r3, [r3, #0]
 8017e08:	681b      	ldr	r3, [r3, #0]
 8017e0a:	4798      	blx	r3
        break;
 8017e0c:	e16e      	b.n	80180ec <RadioIrqProcess+0x3f8>
        TimerStop( &RxTimeoutTimer );
 8017e0e:	4868      	ldr	r0, [pc, #416]	@ (8017fb0 <RadioIrqProcess+0x2bc>)
 8017e10:	f002 ff6a 	bl	801ace8 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 8017e14:	4b63      	ldr	r3, [pc, #396]	@ (8017fa4 <RadioIrqProcess+0x2b0>)
 8017e16:	785b      	ldrb	r3, [r3, #1]
 8017e18:	f083 0301 	eor.w	r3, r3, #1
 8017e1c:	b2db      	uxtb	r3, r3
 8017e1e:	2b00      	cmp	r3, #0
 8017e20:	d014      	beq.n	8017e4c <RadioIrqProcess+0x158>
            SUBGRF_SetStandby( STDBY_RC );
 8017e22:	2000      	movs	r0, #0
 8017e24:	f000 ffd6 	bl	8018dd4 <SUBGRF_SetStandby>
            SUBGRF_WriteRegister( SUBGHZ_RTCCTLR, 0x00 );
 8017e28:	2100      	movs	r1, #0
 8017e2a:	f640 1002 	movw	r0, #2306	@ 0x902
 8017e2e:	f001 fd51 	bl	80198d4 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( SUBGHZ_EVENTMASKR, SUBGRF_ReadRegister( SUBGHZ_EVENTMASKR ) | ( 1 << 1 ) );
 8017e32:	f640 1044 	movw	r0, #2372	@ 0x944
 8017e36:	f001 fd61 	bl	80198fc <SUBGRF_ReadRegister>
 8017e3a:	4603      	mov	r3, r0
 8017e3c:	f043 0302 	orr.w	r3, r3, #2
 8017e40:	b2db      	uxtb	r3, r3
 8017e42:	4619      	mov	r1, r3
 8017e44:	f640 1044 	movw	r0, #2372	@ 0x944
 8017e48:	f001 fd44 	bl	80198d4 <SUBGRF_WriteRegister>
        SUBGRF_GetPayload( RadioBuffer, &size, 255 );
 8017e4c:	1dfb      	adds	r3, r7, #7
 8017e4e:	22ff      	movs	r2, #255	@ 0xff
 8017e50:	4619      	mov	r1, r3
 8017e52:	4858      	ldr	r0, [pc, #352]	@ (8017fb4 <RadioIrqProcess+0x2c0>)
 8017e54:	f000 fe8e 	bl	8018b74 <SUBGRF_GetPayload>
        SUBGRF_GetPacketStatus( &( SubgRf.PacketStatus ) );
 8017e58:	4857      	ldr	r0, [pc, #348]	@ (8017fb8 <RadioIrqProcess+0x2c4>)
 8017e5a:	f001 fce9 	bl	8019830 <SUBGRF_GetPacketStatus>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 8017e5e:	4b53      	ldr	r3, [pc, #332]	@ (8017fac <RadioIrqProcess+0x2b8>)
 8017e60:	681b      	ldr	r3, [r3, #0]
 8017e62:	2b00      	cmp	r3, #0
 8017e64:	f000 8144 	beq.w	80180f0 <RadioIrqProcess+0x3fc>
 8017e68:	4b50      	ldr	r3, [pc, #320]	@ (8017fac <RadioIrqProcess+0x2b8>)
 8017e6a:	681b      	ldr	r3, [r3, #0]
 8017e6c:	689b      	ldr	r3, [r3, #8]
 8017e6e:	2b00      	cmp	r3, #0
 8017e70:	f000 813e 	beq.w	80180f0 <RadioIrqProcess+0x3fc>
            switch( SubgRf.PacketStatus.packetType )
 8017e74:	4b4b      	ldr	r3, [pc, #300]	@ (8017fa4 <RadioIrqProcess+0x2b0>)
 8017e76:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8017e7a:	2b01      	cmp	r3, #1
 8017e7c:	d10e      	bne.n	8017e9c <RadioIrqProcess+0x1a8>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.LoRa.RssiPkt, SubgRf.PacketStatus.Params.LoRa.SnrPkt );
 8017e7e:	4b4b      	ldr	r3, [pc, #300]	@ (8017fac <RadioIrqProcess+0x2b8>)
 8017e80:	681b      	ldr	r3, [r3, #0]
 8017e82:	689c      	ldr	r4, [r3, #8]
 8017e84:	79fb      	ldrb	r3, [r7, #7]
 8017e86:	4619      	mov	r1, r3
 8017e88:	4b46      	ldr	r3, [pc, #280]	@ (8017fa4 <RadioIrqProcess+0x2b0>)
 8017e8a:	f993 3030 	ldrsb.w	r3, [r3, #48]	@ 0x30
 8017e8e:	461a      	mov	r2, r3
 8017e90:	4b44      	ldr	r3, [pc, #272]	@ (8017fa4 <RadioIrqProcess+0x2b0>)
 8017e92:	f993 3031 	ldrsb.w	r3, [r3, #49]	@ 0x31
 8017e96:	4847      	ldr	r0, [pc, #284]	@ (8017fb4 <RadioIrqProcess+0x2c0>)
 8017e98:	47a0      	blx	r4
                break;
 8017e9a:	e01d      	b.n	8017ed8 <RadioIrqProcess+0x1e4>
                SUBGRF_GetCFO( SubgRf.ModulationParams.Params.Gfsk.BitRate, &cfo );
 8017e9c:	4b41      	ldr	r3, [pc, #260]	@ (8017fa4 <RadioIrqProcess+0x2b0>)
 8017e9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8017ea0:	463a      	mov	r2, r7
 8017ea2:	4611      	mov	r1, r2
 8017ea4:	4618      	mov	r0, r3
 8017ea6:	f001 ff47 	bl	8019d38 <SUBGRF_GetCFO>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.Gfsk.RssiAvg, (int8_t) DIVR(cfo, 1000) );
 8017eaa:	4b40      	ldr	r3, [pc, #256]	@ (8017fac <RadioIrqProcess+0x2b8>)
 8017eac:	681b      	ldr	r3, [r3, #0]
 8017eae:	689c      	ldr	r4, [r3, #8]
 8017eb0:	79fb      	ldrb	r3, [r7, #7]
 8017eb2:	4619      	mov	r1, r3
 8017eb4:	4b3b      	ldr	r3, [pc, #236]	@ (8017fa4 <RadioIrqProcess+0x2b0>)
 8017eb6:	f993 3029 	ldrsb.w	r3, [r3, #41]	@ 0x29
 8017eba:	4618      	mov	r0, r3
 8017ebc:	683b      	ldr	r3, [r7, #0]
 8017ebe:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8017ec2:	4a3e      	ldr	r2, [pc, #248]	@ (8017fbc <RadioIrqProcess+0x2c8>)
 8017ec4:	fb82 5203 	smull	r5, r2, r2, r3
 8017ec8:	1192      	asrs	r2, r2, #6
 8017eca:	17db      	asrs	r3, r3, #31
 8017ecc:	1ad3      	subs	r3, r2, r3
 8017ece:	b25b      	sxtb	r3, r3
 8017ed0:	4602      	mov	r2, r0
 8017ed2:	4838      	ldr	r0, [pc, #224]	@ (8017fb4 <RadioIrqProcess+0x2c0>)
 8017ed4:	47a0      	blx	r4
                break;
 8017ed6:	bf00      	nop
        break;
 8017ed8:	e10a      	b.n	80180f0 <RadioIrqProcess+0x3fc>
        SUBGRF_SetStandby( STDBY_RC );
 8017eda:	2000      	movs	r0, #0
 8017edc:	f000 ff7a 	bl	8018dd4 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8017ee0:	4b32      	ldr	r3, [pc, #200]	@ (8017fac <RadioIrqProcess+0x2b8>)
 8017ee2:	681b      	ldr	r3, [r3, #0]
 8017ee4:	2b00      	cmp	r3, #0
 8017ee6:	f000 8105 	beq.w	80180f4 <RadioIrqProcess+0x400>
 8017eea:	4b30      	ldr	r3, [pc, #192]	@ (8017fac <RadioIrqProcess+0x2b8>)
 8017eec:	681b      	ldr	r3, [r3, #0]
 8017eee:	699b      	ldr	r3, [r3, #24]
 8017ef0:	2b00      	cmp	r3, #0
 8017ef2:	f000 80ff 	beq.w	80180f4 <RadioIrqProcess+0x400>
            RadioEvents->CadDone( false );
 8017ef6:	4b2d      	ldr	r3, [pc, #180]	@ (8017fac <RadioIrqProcess+0x2b8>)
 8017ef8:	681b      	ldr	r3, [r3, #0]
 8017efa:	699b      	ldr	r3, [r3, #24]
 8017efc:	2000      	movs	r0, #0
 8017efe:	4798      	blx	r3
        break;
 8017f00:	e0f8      	b.n	80180f4 <RadioIrqProcess+0x400>
        SUBGRF_SetStandby( STDBY_RC );
 8017f02:	2000      	movs	r0, #0
 8017f04:	f000 ff66 	bl	8018dd4 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8017f08:	4b28      	ldr	r3, [pc, #160]	@ (8017fac <RadioIrqProcess+0x2b8>)
 8017f0a:	681b      	ldr	r3, [r3, #0]
 8017f0c:	2b00      	cmp	r3, #0
 8017f0e:	f000 80f3 	beq.w	80180f8 <RadioIrqProcess+0x404>
 8017f12:	4b26      	ldr	r3, [pc, #152]	@ (8017fac <RadioIrqProcess+0x2b8>)
 8017f14:	681b      	ldr	r3, [r3, #0]
 8017f16:	699b      	ldr	r3, [r3, #24]
 8017f18:	2b00      	cmp	r3, #0
 8017f1a:	f000 80ed 	beq.w	80180f8 <RadioIrqProcess+0x404>
            RadioEvents->CadDone( true );
 8017f1e:	4b23      	ldr	r3, [pc, #140]	@ (8017fac <RadioIrqProcess+0x2b8>)
 8017f20:	681b      	ldr	r3, [r3, #0]
 8017f22:	699b      	ldr	r3, [r3, #24]
 8017f24:	2001      	movs	r0, #1
 8017f26:	4798      	blx	r3
        break;
 8017f28:	e0e6      	b.n	80180f8 <RadioIrqProcess+0x404>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_RX_TX_TIMEOUT\r\n" );
 8017f2a:	4b25      	ldr	r3, [pc, #148]	@ (8017fc0 <RadioIrqProcess+0x2cc>)
 8017f2c:	2201      	movs	r2, #1
 8017f2e:	2100      	movs	r1, #0
 8017f30:	2002      	movs	r0, #2
 8017f32:	f003 f8e3 	bl	801b0fc <UTIL_ADV_TRACE_COND_FSend>
        if( SUBGRF_GetOperatingMode( ) == MODE_TX )
 8017f36:	f000 fe03 	bl	8018b40 <SUBGRF_GetOperatingMode>
 8017f3a:	4603      	mov	r3, r0
 8017f3c:	2b04      	cmp	r3, #4
 8017f3e:	d115      	bne.n	8017f6c <RadioIrqProcess+0x278>
            TimerStop( &TxTimeoutTimer );
 8017f40:	4819      	ldr	r0, [pc, #100]	@ (8017fa8 <RadioIrqProcess+0x2b4>)
 8017f42:	f002 fed1 	bl	801ace8 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 8017f46:	2000      	movs	r0, #0
 8017f48:	f000 ff44 	bl	8018dd4 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8017f4c:	4b17      	ldr	r3, [pc, #92]	@ (8017fac <RadioIrqProcess+0x2b8>)
 8017f4e:	681b      	ldr	r3, [r3, #0]
 8017f50:	2b00      	cmp	r3, #0
 8017f52:	f000 80d3 	beq.w	80180fc <RadioIrqProcess+0x408>
 8017f56:	4b15      	ldr	r3, [pc, #84]	@ (8017fac <RadioIrqProcess+0x2b8>)
 8017f58:	681b      	ldr	r3, [r3, #0]
 8017f5a:	685b      	ldr	r3, [r3, #4]
 8017f5c:	2b00      	cmp	r3, #0
 8017f5e:	f000 80cd 	beq.w	80180fc <RadioIrqProcess+0x408>
                RadioEvents->TxTimeout( );
 8017f62:	4b12      	ldr	r3, [pc, #72]	@ (8017fac <RadioIrqProcess+0x2b8>)
 8017f64:	681b      	ldr	r3, [r3, #0]
 8017f66:	685b      	ldr	r3, [r3, #4]
 8017f68:	4798      	blx	r3
        break;
 8017f6a:	e0c7      	b.n	80180fc <RadioIrqProcess+0x408>
        else if( SUBGRF_GetOperatingMode( ) == MODE_RX )
 8017f6c:	f000 fde8 	bl	8018b40 <SUBGRF_GetOperatingMode>
 8017f70:	4603      	mov	r3, r0
 8017f72:	2b05      	cmp	r3, #5
 8017f74:	f040 80c2 	bne.w	80180fc <RadioIrqProcess+0x408>
            TimerStop( &RxTimeoutTimer );
 8017f78:	480d      	ldr	r0, [pc, #52]	@ (8017fb0 <RadioIrqProcess+0x2bc>)
 8017f7a:	f002 feb5 	bl	801ace8 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 8017f7e:	2000      	movs	r0, #0
 8017f80:	f000 ff28 	bl	8018dd4 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8017f84:	4b09      	ldr	r3, [pc, #36]	@ (8017fac <RadioIrqProcess+0x2b8>)
 8017f86:	681b      	ldr	r3, [r3, #0]
 8017f88:	2b00      	cmp	r3, #0
 8017f8a:	f000 80b7 	beq.w	80180fc <RadioIrqProcess+0x408>
 8017f8e:	4b07      	ldr	r3, [pc, #28]	@ (8017fac <RadioIrqProcess+0x2b8>)
 8017f90:	681b      	ldr	r3, [r3, #0]
 8017f92:	68db      	ldr	r3, [r3, #12]
 8017f94:	2b00      	cmp	r3, #0
 8017f96:	f000 80b1 	beq.w	80180fc <RadioIrqProcess+0x408>
                RadioEvents->RxTimeout( );
 8017f9a:	4b04      	ldr	r3, [pc, #16]	@ (8017fac <RadioIrqProcess+0x2b8>)
 8017f9c:	681b      	ldr	r3, [r3, #0]
 8017f9e:	68db      	ldr	r3, [r3, #12]
 8017fa0:	4798      	blx	r3
        break;
 8017fa2:	e0ab      	b.n	80180fc <RadioIrqProcess+0x408>
 8017fa4:	20001a70 	.word	0x20001a70
 8017fa8:	20001acc 	.word	0x20001acc
 8017fac:	20001a6c 	.word	0x20001a6c
 8017fb0:	20001ae4 	.word	0x20001ae4
 8017fb4:	2000196c 	.word	0x2000196c
 8017fb8:	20001a94 	.word	0x20001a94
 8017fbc:	10624dd3 	.word	0x10624dd3
 8017fc0:	0801bfbc 	.word	0x0801bfbc
        MW_LOG( TS_ON, VLEVEL_M,  "PRE OK\r\n" );
 8017fc4:	4b54      	ldr	r3, [pc, #336]	@ (8018118 <RadioIrqProcess+0x424>)
 8017fc6:	2201      	movs	r2, #1
 8017fc8:	2100      	movs	r1, #0
 8017fca:	2002      	movs	r0, #2
 8017fcc:	f003 f896 	bl	801b0fc <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxDcPreambleDetectTimeout != 0 )
 8017fd0:	4b52      	ldr	r3, [pc, #328]	@ (801811c <RadioIrqProcess+0x428>)
 8017fd2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8017fd4:	2b00      	cmp	r3, #0
 8017fd6:	f000 8093 	beq.w	8018100 <RadioIrqProcess+0x40c>
          Radio.Write(SUBGHZ_RTCPRDR2, (SubgRf.RxDcPreambleDetectTimeout>>16)&0xFF); /*Update Radio RTC Period MSB*/
 8017fda:	4a51      	ldr	r2, [pc, #324]	@ (8018120 <RadioIrqProcess+0x42c>)
 8017fdc:	4b4f      	ldr	r3, [pc, #316]	@ (801811c <RadioIrqProcess+0x428>)
 8017fde:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8017fe0:	0c1b      	lsrs	r3, r3, #16
 8017fe2:	b2db      	uxtb	r3, r3
 8017fe4:	4619      	mov	r1, r3
 8017fe6:	f640 1003 	movw	r0, #2307	@ 0x903
 8017fea:	4790      	blx	r2
          Radio.Write(SUBGHZ_RTCPRDR1, (SubgRf.RxDcPreambleDetectTimeout>>8)&0xFF); /*Update Radio RTC Period MidByte*/
 8017fec:	4a4c      	ldr	r2, [pc, #304]	@ (8018120 <RadioIrqProcess+0x42c>)
 8017fee:	4b4b      	ldr	r3, [pc, #300]	@ (801811c <RadioIrqProcess+0x428>)
 8017ff0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8017ff2:	0a1b      	lsrs	r3, r3, #8
 8017ff4:	b2db      	uxtb	r3, r3
 8017ff6:	4619      	mov	r1, r3
 8017ff8:	f640 1004 	movw	r0, #2308	@ 0x904
 8017ffc:	4790      	blx	r2
          Radio.Write(SUBGHZ_RTCPRDR0, (SubgRf.RxDcPreambleDetectTimeout)&0xFF); /*Update Radio RTC Period lsb*/
 8017ffe:	4a48      	ldr	r2, [pc, #288]	@ (8018120 <RadioIrqProcess+0x42c>)
 8018000:	4b46      	ldr	r3, [pc, #280]	@ (801811c <RadioIrqProcess+0x428>)
 8018002:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8018004:	b2db      	uxtb	r3, r3
 8018006:	4619      	mov	r1, r3
 8018008:	f640 1005 	movw	r0, #2309	@ 0x905
 801800c:	4790      	blx	r2
          Radio.Write(SUBGHZ_RTCCTLR, Radio.Read(SUBGHZ_RTCCTLR)|0x1); /*restart Radio RTC*/
 801800e:	4c44      	ldr	r4, [pc, #272]	@ (8018120 <RadioIrqProcess+0x42c>)
 8018010:	4b44      	ldr	r3, [pc, #272]	@ (8018124 <RadioIrqProcess+0x430>)
 8018012:	f640 1002 	movw	r0, #2306	@ 0x902
 8018016:	4798      	blx	r3
 8018018:	4603      	mov	r3, r0
 801801a:	f043 0301 	orr.w	r3, r3, #1
 801801e:	b2db      	uxtb	r3, r3
 8018020:	4619      	mov	r1, r3
 8018022:	f640 1002 	movw	r0, #2306	@ 0x902
 8018026:	47a0      	blx	r4
          SubgRf.RxDcPreambleDetectTimeout = 0;
 8018028:	4b3c      	ldr	r3, [pc, #240]	@ (801811c <RadioIrqProcess+0x428>)
 801802a:	2200      	movs	r2, #0
 801802c:	659a      	str	r2, [r3, #88]	@ 0x58
          SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 801802e:	2300      	movs	r3, #0
 8018030:	2200      	movs	r2, #0
 8018032:	f240 2162 	movw	r1, #610	@ 0x262
 8018036:	f240 2062 	movw	r0, #610	@ 0x262
 801803a:	f001 f89b 	bl	8019174 <SUBGRF_SetDioIrqParams>
        break;
 801803e:	e05f      	b.n	8018100 <RadioIrqProcess+0x40c>
        MW_LOG( TS_ON, VLEVEL_M,  "SYNC OK\r\n" );
 8018040:	4b39      	ldr	r3, [pc, #228]	@ (8018128 <RadioIrqProcess+0x434>)
 8018042:	2201      	movs	r2, #1
 8018044:	2100      	movs	r1, #0
 8018046:	2002      	movs	r0, #2
 8018048:	f003 f858 	bl	801b0fc <UTIL_ADV_TRACE_COND_FSend>
        if( 1UL == RFW_Is_Init( ) )
 801804c:	f001 ff1f 	bl	8019e8e <RFW_Is_Init>
 8018050:	4603      	mov	r3, r0
 8018052:	2b01      	cmp	r3, #1
 8018054:	d156      	bne.n	8018104 <RadioIrqProcess+0x410>
            RFW_ReceivePayload( );
 8018056:	f001 ff50 	bl	8019efa <RFW_ReceivePayload>
        break;
 801805a:	e053      	b.n	8018104 <RadioIrqProcess+0x410>
        MW_LOG( TS_ON, VLEVEL_M,  "HDR OK\r\n" );
 801805c:	4b33      	ldr	r3, [pc, #204]	@ (801812c <RadioIrqProcess+0x438>)
 801805e:	2201      	movs	r2, #1
 8018060:	2100      	movs	r1, #0
 8018062:	2002      	movs	r0, #2
 8018064:	f003 f84a 	bl	801b0fc <UTIL_ADV_TRACE_COND_FSend>
        break;
 8018068:	e051      	b.n	801810e <RadioIrqProcess+0x41a>
        TimerStop( &RxTimeoutTimer );
 801806a:	4831      	ldr	r0, [pc, #196]	@ (8018130 <RadioIrqProcess+0x43c>)
 801806c:	f002 fe3c 	bl	801ace8 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 8018070:	4b2a      	ldr	r3, [pc, #168]	@ (801811c <RadioIrqProcess+0x428>)
 8018072:	785b      	ldrb	r3, [r3, #1]
 8018074:	f083 0301 	eor.w	r3, r3, #1
 8018078:	b2db      	uxtb	r3, r3
 801807a:	2b00      	cmp	r3, #0
 801807c:	d002      	beq.n	8018084 <RadioIrqProcess+0x390>
            SUBGRF_SetStandby( STDBY_RC );
 801807e:	2000      	movs	r0, #0
 8018080:	f000 fea8 	bl	8018dd4 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8018084:	4b2b      	ldr	r3, [pc, #172]	@ (8018134 <RadioIrqProcess+0x440>)
 8018086:	681b      	ldr	r3, [r3, #0]
 8018088:	2b00      	cmp	r3, #0
 801808a:	d03d      	beq.n	8018108 <RadioIrqProcess+0x414>
 801808c:	4b29      	ldr	r3, [pc, #164]	@ (8018134 <RadioIrqProcess+0x440>)
 801808e:	681b      	ldr	r3, [r3, #0]
 8018090:	68db      	ldr	r3, [r3, #12]
 8018092:	2b00      	cmp	r3, #0
 8018094:	d038      	beq.n	8018108 <RadioIrqProcess+0x414>
            RadioEvents->RxTimeout( );
 8018096:	4b27      	ldr	r3, [pc, #156]	@ (8018134 <RadioIrqProcess+0x440>)
 8018098:	681b      	ldr	r3, [r3, #0]
 801809a:	68db      	ldr	r3, [r3, #12]
 801809c:	4798      	blx	r3
            MW_LOG( TS_ON, VLEVEL_M,  "HDR KO\r\n" );
 801809e:	4b26      	ldr	r3, [pc, #152]	@ (8018138 <RadioIrqProcess+0x444>)
 80180a0:	2201      	movs	r2, #1
 80180a2:	2100      	movs	r1, #0
 80180a4:	2002      	movs	r0, #2
 80180a6:	f003 f829 	bl	801b0fc <UTIL_ADV_TRACE_COND_FSend>
        break;
 80180aa:	e02d      	b.n	8018108 <RadioIrqProcess+0x414>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_CRC_ERROR\r\n" );
 80180ac:	4b23      	ldr	r3, [pc, #140]	@ (801813c <RadioIrqProcess+0x448>)
 80180ae:	2201      	movs	r2, #1
 80180b0:	2100      	movs	r1, #0
 80180b2:	2002      	movs	r0, #2
 80180b4:	f003 f822 	bl	801b0fc <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxContinuous == false )
 80180b8:	4b18      	ldr	r3, [pc, #96]	@ (801811c <RadioIrqProcess+0x428>)
 80180ba:	785b      	ldrb	r3, [r3, #1]
 80180bc:	f083 0301 	eor.w	r3, r3, #1
 80180c0:	b2db      	uxtb	r3, r3
 80180c2:	2b00      	cmp	r3, #0
 80180c4:	d002      	beq.n	80180cc <RadioIrqProcess+0x3d8>
            SUBGRF_SetStandby( STDBY_RC );
 80180c6:	2000      	movs	r0, #0
 80180c8:	f000 fe84 	bl	8018dd4 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError ) )
 80180cc:	4b19      	ldr	r3, [pc, #100]	@ (8018134 <RadioIrqProcess+0x440>)
 80180ce:	681b      	ldr	r3, [r3, #0]
 80180d0:	2b00      	cmp	r3, #0
 80180d2:	d01b      	beq.n	801810c <RadioIrqProcess+0x418>
 80180d4:	4b17      	ldr	r3, [pc, #92]	@ (8018134 <RadioIrqProcess+0x440>)
 80180d6:	681b      	ldr	r3, [r3, #0]
 80180d8:	691b      	ldr	r3, [r3, #16]
 80180da:	2b00      	cmp	r3, #0
 80180dc:	d016      	beq.n	801810c <RadioIrqProcess+0x418>
            RadioEvents->RxError( );
 80180de:	4b15      	ldr	r3, [pc, #84]	@ (8018134 <RadioIrqProcess+0x440>)
 80180e0:	681b      	ldr	r3, [r3, #0]
 80180e2:	691b      	ldr	r3, [r3, #16]
 80180e4:	4798      	blx	r3
        break;
 80180e6:	e011      	b.n	801810c <RadioIrqProcess+0x418>
        break;
 80180e8:	bf00      	nop
 80180ea:	e010      	b.n	801810e <RadioIrqProcess+0x41a>
        break;
 80180ec:	bf00      	nop
 80180ee:	e00e      	b.n	801810e <RadioIrqProcess+0x41a>
        break;
 80180f0:	bf00      	nop
 80180f2:	e00c      	b.n	801810e <RadioIrqProcess+0x41a>
        break;
 80180f4:	bf00      	nop
 80180f6:	e00a      	b.n	801810e <RadioIrqProcess+0x41a>
        break;
 80180f8:	bf00      	nop
 80180fa:	e008      	b.n	801810e <RadioIrqProcess+0x41a>
        break;
 80180fc:	bf00      	nop
 80180fe:	e006      	b.n	801810e <RadioIrqProcess+0x41a>
        break;
 8018100:	bf00      	nop
 8018102:	e004      	b.n	801810e <RadioIrqProcess+0x41a>
        break;
 8018104:	bf00      	nop
 8018106:	e002      	b.n	801810e <RadioIrqProcess+0x41a>
        break;
 8018108:	bf00      	nop
 801810a:	e000      	b.n	801810e <RadioIrqProcess+0x41a>
        break;
 801810c:	bf00      	nop
    }
}
 801810e:	bf00      	nop
 8018110:	3708      	adds	r7, #8
 8018112:	46bd      	mov	sp, r7
 8018114:	bdb0      	pop	{r4, r5, r7, pc}
 8018116:	bf00      	nop
 8018118:	0801bfd0 	.word	0x0801bfd0
 801811c:	20001a70 	.word	0x20001a70
 8018120:	08017b05 	.word	0x08017b05
 8018124:	08017b29 	.word	0x08017b29
 8018128:	0801bfdc 	.word	0x0801bfdc
 801812c:	0801bfe8 	.word	0x0801bfe8
 8018130:	20001ae4 	.word	0x20001ae4
 8018134:	20001a6c 	.word	0x20001a6c
 8018138:	0801bff4 	.word	0x0801bff4
 801813c:	0801c000 	.word	0x0801c000

08018140 <RadioTxPrbs>:

static void RadioTxPrbs( void )
{
 8018140:	b580      	push	{r7, lr}
 8018142:	af00      	add	r7, sp, #0
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 8018144:	4b09      	ldr	r3, [pc, #36]	@ (801816c <RadioTxPrbs+0x2c>)
 8018146:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 801814a:	2101      	movs	r1, #1
 801814c:	4618      	mov	r0, r3
 801814e:	f001 fcb5 	bl	8019abc <SUBGRF_SetSwitch>
    Radio.Write( SUBGHZ_GPKTCTL1AR, 0x2d );  // sel mode prbs9 instead of preamble
 8018152:	4b07      	ldr	r3, [pc, #28]	@ (8018170 <RadioTxPrbs+0x30>)
 8018154:	212d      	movs	r1, #45	@ 0x2d
 8018156:	f44f 60d7 	mov.w	r0, #1720	@ 0x6b8
 801815a:	4798      	blx	r3
    SUBGRF_SetTxInfinitePreamble( );
 801815c:	f000 fefd 	bl	8018f5a <SUBGRF_SetTxInfinitePreamble>
    SUBGRF_SetTx( 0x0fffff );
 8018160:	4804      	ldr	r0, [pc, #16]	@ (8018174 <RadioTxPrbs+0x34>)
 8018162:	f000 fe53 	bl	8018e0c <SUBGRF_SetTx>
}
 8018166:	bf00      	nop
 8018168:	bd80      	pop	{r7, pc}
 801816a:	bf00      	nop
 801816c:	20001a70 	.word	0x20001a70
 8018170:	08017b05 	.word	0x08017b05
 8018174:	000fffff 	.word	0x000fffff

08018178 <RadioTxCw>:

static void RadioTxCw( int8_t power )
{
 8018178:	b580      	push	{r7, lr}
 801817a:	b084      	sub	sp, #16
 801817c:	af00      	add	r7, sp, #0
 801817e:	4603      	mov	r3, r0
 8018180:	71fb      	strb	r3, [r7, #7]
    uint8_t paselect = SUBGRF_SetRfTxPower( power );
 8018182:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8018186:	4618      	mov	r0, r3
 8018188:	f001 fcc0 	bl	8019b0c <SUBGRF_SetRfTxPower>
 801818c:	4603      	mov	r3, r0
 801818e:	73fb      	strb	r3, [r7, #15]
    SUBGRF_SetSwitch( paselect, RFSWITCH_TX );
 8018190:	7bfb      	ldrb	r3, [r7, #15]
 8018192:	2101      	movs	r1, #1
 8018194:	4618      	mov	r0, r3
 8018196:	f001 fc91 	bl	8019abc <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 801819a:	f000 fed5 	bl	8018f48 <SUBGRF_SetTxContinuousWave>
}
 801819e:	bf00      	nop
 80181a0:	3710      	adds	r7, #16
 80181a2:	46bd      	mov	sp, r7
 80181a4:	bd80      	pop	{r7, pc}

080181a6 <payload_integration>:

#if (RADIO_SIGFOX_ENABLE == 1)
static void payload_integration( uint8_t *outBuffer, uint8_t *inBuffer, uint8_t size )
{
 80181a6:	b480      	push	{r7}
 80181a8:	b089      	sub	sp, #36	@ 0x24
 80181aa:	af00      	add	r7, sp, #0
 80181ac:	60f8      	str	r0, [r7, #12]
 80181ae:	60b9      	str	r1, [r7, #8]
 80181b0:	4613      	mov	r3, r2
 80181b2:	71fb      	strb	r3, [r7, #7]
    uint8_t prevInt = 0;
 80181b4:	2300      	movs	r3, #0
 80181b6:	77fb      	strb	r3, [r7, #31]
    uint8_t currBit;
    uint8_t index_bit;
    uint8_t index_byte;
    uint8_t index_bit_out;
    uint8_t index_byte_out;
    int32_t i = 0;
 80181b8:	2300      	movs	r3, #0
 80181ba:	61bb      	str	r3, [r7, #24]

    for( i = 0; i < size; i++ )
 80181bc:	2300      	movs	r3, #0
 80181be:	61bb      	str	r3, [r7, #24]
 80181c0:	e011      	b.n	80181e6 <payload_integration+0x40>
    {
        /* reverse all inputs */
        inBuffer[i] = ~inBuffer[i];
 80181c2:	69bb      	ldr	r3, [r7, #24]
 80181c4:	68ba      	ldr	r2, [r7, #8]
 80181c6:	4413      	add	r3, r2
 80181c8:	781a      	ldrb	r2, [r3, #0]
 80181ca:	69bb      	ldr	r3, [r7, #24]
 80181cc:	68b9      	ldr	r1, [r7, #8]
 80181ce:	440b      	add	r3, r1
 80181d0:	43d2      	mvns	r2, r2
 80181d2:	b2d2      	uxtb	r2, r2
 80181d4:	701a      	strb	r2, [r3, #0]
        /* init outBuffer */
        outBuffer[i] = 0;
 80181d6:	69bb      	ldr	r3, [r7, #24]
 80181d8:	68fa      	ldr	r2, [r7, #12]
 80181da:	4413      	add	r3, r2
 80181dc:	2200      	movs	r2, #0
 80181de:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < size; i++ )
 80181e0:	69bb      	ldr	r3, [r7, #24]
 80181e2:	3301      	adds	r3, #1
 80181e4:	61bb      	str	r3, [r7, #24]
 80181e6:	79fb      	ldrb	r3, [r7, #7]
 80181e8:	69ba      	ldr	r2, [r7, #24]
 80181ea:	429a      	cmp	r2, r3
 80181ec:	dbe9      	blt.n	80181c2 <payload_integration+0x1c>
    }

    for( i = 0; i < ( size * 8 ); i++ )
 80181ee:	2300      	movs	r3, #0
 80181f0:	61bb      	str	r3, [r7, #24]
 80181f2:	e049      	b.n	8018288 <payload_integration+0xe2>
    {
        /* index to take bit in inBuffer */
        index_bit = 7 - ( i % 8 );
 80181f4:	69bb      	ldr	r3, [r7, #24]
 80181f6:	425a      	negs	r2, r3
 80181f8:	f003 0307 	and.w	r3, r3, #7
 80181fc:	f002 0207 	and.w	r2, r2, #7
 8018200:	bf58      	it	pl
 8018202:	4253      	negpl	r3, r2
 8018204:	b2db      	uxtb	r3, r3
 8018206:	f1c3 0307 	rsb	r3, r3, #7
 801820a:	75fb      	strb	r3, [r7, #23]
        index_byte = i / 8;
 801820c:	69bb      	ldr	r3, [r7, #24]
 801820e:	2b00      	cmp	r3, #0
 8018210:	da00      	bge.n	8018214 <payload_integration+0x6e>
 8018212:	3307      	adds	r3, #7
 8018214:	10db      	asrs	r3, r3, #3
 8018216:	75bb      	strb	r3, [r7, #22]
        /* index to place bit in outBuffer is shifted 1 bit right */
        index_bit_out = 7 - ( ( i + 1 ) % 8 );
 8018218:	69bb      	ldr	r3, [r7, #24]
 801821a:	3301      	adds	r3, #1
 801821c:	425a      	negs	r2, r3
 801821e:	f003 0307 	and.w	r3, r3, #7
 8018222:	f002 0207 	and.w	r2, r2, #7
 8018226:	bf58      	it	pl
 8018228:	4253      	negpl	r3, r2
 801822a:	b2db      	uxtb	r3, r3
 801822c:	f1c3 0307 	rsb	r3, r3, #7
 8018230:	757b      	strb	r3, [r7, #21]
        index_byte_out = ( i + 1 ) / 8;
 8018232:	69bb      	ldr	r3, [r7, #24]
 8018234:	3301      	adds	r3, #1
 8018236:	2b00      	cmp	r3, #0
 8018238:	da00      	bge.n	801823c <payload_integration+0x96>
 801823a:	3307      	adds	r3, #7
 801823c:	10db      	asrs	r3, r3, #3
 801823e:	753b      	strb	r3, [r7, #20]
        /* extract current bit from input */
        currBit = ( inBuffer[index_byte] >> index_bit ) & 0x01;
 8018240:	7dbb      	ldrb	r3, [r7, #22]
 8018242:	68ba      	ldr	r2, [r7, #8]
 8018244:	4413      	add	r3, r2
 8018246:	781b      	ldrb	r3, [r3, #0]
 8018248:	461a      	mov	r2, r3
 801824a:	7dfb      	ldrb	r3, [r7, #23]
 801824c:	fa42 f303 	asr.w	r3, r2, r3
 8018250:	b2db      	uxtb	r3, r3
 8018252:	f003 0301 	and.w	r3, r3, #1
 8018256:	74fb      	strb	r3, [r7, #19]
        /* integration */
        prevInt ^= currBit;
 8018258:	7ffa      	ldrb	r2, [r7, #31]
 801825a:	7cfb      	ldrb	r3, [r7, #19]
 801825c:	4053      	eors	r3, r2
 801825e:	77fb      	strb	r3, [r7, #31]
        /* write result integration in output */
        outBuffer[index_byte_out] |= ( prevInt << index_bit_out );
 8018260:	7d3b      	ldrb	r3, [r7, #20]
 8018262:	68fa      	ldr	r2, [r7, #12]
 8018264:	4413      	add	r3, r2
 8018266:	781b      	ldrb	r3, [r3, #0]
 8018268:	b25a      	sxtb	r2, r3
 801826a:	7ff9      	ldrb	r1, [r7, #31]
 801826c:	7d7b      	ldrb	r3, [r7, #21]
 801826e:	fa01 f303 	lsl.w	r3, r1, r3
 8018272:	b25b      	sxtb	r3, r3
 8018274:	4313      	orrs	r3, r2
 8018276:	b259      	sxtb	r1, r3
 8018278:	7d3b      	ldrb	r3, [r7, #20]
 801827a:	68fa      	ldr	r2, [r7, #12]
 801827c:	4413      	add	r3, r2
 801827e:	b2ca      	uxtb	r2, r1
 8018280:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < ( size * 8 ); i++ )
 8018282:	69bb      	ldr	r3, [r7, #24]
 8018284:	3301      	adds	r3, #1
 8018286:	61bb      	str	r3, [r7, #24]
 8018288:	79fb      	ldrb	r3, [r7, #7]
 801828a:	00db      	lsls	r3, r3, #3
 801828c:	69ba      	ldr	r2, [r7, #24]
 801828e:	429a      	cmp	r2, r3
 8018290:	dbb0      	blt.n	80181f4 <payload_integration+0x4e>
    }

    outBuffer[size] = ( prevInt << 7 ) | ( prevInt << 6 ) | ( ( ( !prevInt ) & 0x01 ) << 5 ) ;
 8018292:	7ffb      	ldrb	r3, [r7, #31]
 8018294:	01db      	lsls	r3, r3, #7
 8018296:	b25a      	sxtb	r2, r3
 8018298:	7ffb      	ldrb	r3, [r7, #31]
 801829a:	019b      	lsls	r3, r3, #6
 801829c:	b25b      	sxtb	r3, r3
 801829e:	4313      	orrs	r3, r2
 80182a0:	b25b      	sxtb	r3, r3
 80182a2:	7ffa      	ldrb	r2, [r7, #31]
 80182a4:	2a00      	cmp	r2, #0
 80182a6:	d101      	bne.n	80182ac <payload_integration+0x106>
 80182a8:	2220      	movs	r2, #32
 80182aa:	e000      	b.n	80182ae <payload_integration+0x108>
 80182ac:	2200      	movs	r2, #0
 80182ae:	4313      	orrs	r3, r2
 80182b0:	b259      	sxtb	r1, r3
 80182b2:	79fb      	ldrb	r3, [r7, #7]
 80182b4:	68fa      	ldr	r2, [r7, #12]
 80182b6:	4413      	add	r3, r2
 80182b8:	b2ca      	uxtb	r2, r1
 80182ba:	701a      	strb	r2, [r3, #0]
}
 80182bc:	bf00      	nop
 80182be:	3724      	adds	r7, #36	@ 0x24
 80182c0:	46bd      	mov	sp, r7
 80182c2:	bc80      	pop	{r7}
 80182c4:	4770      	bx	lr
	...

080182c8 <RadioSetRxGenericConfig>:
#endif /*RADIO_SIGFOX_ENABLE == 1*/

static int32_t RadioSetRxGenericConfig( GenericModems_t modem, RxConfigGeneric_t* config, uint32_t rxContinuous, uint32_t symbTimeout )
{
 80182c8:	b580      	push	{r7, lr}
 80182ca:	b08c      	sub	sp, #48	@ 0x30
 80182cc:	af00      	add	r7, sp, #0
 80182ce:	60b9      	str	r1, [r7, #8]
 80182d0:	607a      	str	r2, [r7, #4]
 80182d2:	603b      	str	r3, [r7, #0]
 80182d4:	4603      	mov	r3, r0
 80182d6:	73fb      	strb	r3, [r7, #15]
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    int32_t status = 0;
 80182d8:	2300      	movs	r3, #0
 80182da:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint8_t syncword[8] = {0};
 80182dc:	2300      	movs	r3, #0
 80182de:	623b      	str	r3, [r7, #32]
 80182e0:	2300      	movs	r3, #0
 80182e2:	627b      	str	r3, [r7, #36]	@ 0x24
    uint8_t MaxPayloadLength;

    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 80182e4:	f001 fdcd 	bl	8019e82 <RFW_DeInit>

    if( rxContinuous != 0 )
 80182e8:	687b      	ldr	r3, [r7, #4]
 80182ea:	2b00      	cmp	r3, #0
 80182ec:	d001      	beq.n	80182f2 <RadioSetRxGenericConfig+0x2a>
    {
        symbTimeout = 0;
 80182ee:	2300      	movs	r3, #0
 80182f0:	603b      	str	r3, [r7, #0]
    }
    SubgRf.RxContinuous = ( rxContinuous == 0 ) ? false : true;
 80182f2:	687b      	ldr	r3, [r7, #4]
 80182f4:	2b00      	cmp	r3, #0
 80182f6:	bf14      	ite	ne
 80182f8:	2301      	movne	r3, #1
 80182fa:	2300      	moveq	r3, #0
 80182fc:	b2da      	uxtb	r2, r3
 80182fe:	4ba3      	ldr	r3, [pc, #652]	@ (801858c <RadioSetRxGenericConfig+0x2c4>)
 8018300:	705a      	strb	r2, [r3, #1]

    switch( modem )
 8018302:	7bfb      	ldrb	r3, [r7, #15]
 8018304:	2b00      	cmp	r3, #0
 8018306:	d003      	beq.n	8018310 <RadioSetRxGenericConfig+0x48>
 8018308:	2b01      	cmp	r3, #1
 801830a:	f000 80dc 	beq.w	80184c6 <RadioSetRxGenericConfig+0x1fe>

        // Timeout Max, Timeout handled directly in SetRx function
        SubgRf.RxTimeout = 0xFFFF;
        break;
    default:
        break;
 801830e:	e194      	b.n	801863a <RadioSetRxGenericConfig+0x372>
        if( ( config->fsk.BitRate == 0 ) || ( config->fsk.PreambleLen == 0 ) )
 8018310:	68bb      	ldr	r3, [r7, #8]
 8018312:	689b      	ldr	r3, [r3, #8]
 8018314:	2b00      	cmp	r3, #0
 8018316:	d003      	beq.n	8018320 <RadioSetRxGenericConfig+0x58>
 8018318:	68bb      	ldr	r3, [r7, #8]
 801831a:	68db      	ldr	r3, [r3, #12]
 801831c:	2b00      	cmp	r3, #0
 801831e:	d102      	bne.n	8018326 <RadioSetRxGenericConfig+0x5e>
            return -1;
 8018320:	f04f 33ff 	mov.w	r3, #4294967295
 8018324:	e18a      	b.n	801863c <RadioSetRxGenericConfig+0x374>
        if( config->fsk.SyncWordLength > 8 )
 8018326:	68bb      	ldr	r3, [r7, #8]
 8018328:	7f9b      	ldrb	r3, [r3, #30]
 801832a:	2b08      	cmp	r3, #8
 801832c:	d902      	bls.n	8018334 <RadioSetRxGenericConfig+0x6c>
            return -1;
 801832e:	f04f 33ff 	mov.w	r3, #4294967295
 8018332:	e183      	b.n	801863c <RadioSetRxGenericConfig+0x374>
            RADIO_MEMCPY8( syncword, config->fsk.SyncWord, config->fsk.SyncWordLength );
 8018334:	68bb      	ldr	r3, [r7, #8]
 8018336:	6919      	ldr	r1, [r3, #16]
 8018338:	68bb      	ldr	r3, [r7, #8]
 801833a:	7f9b      	ldrb	r3, [r3, #30]
 801833c:	461a      	mov	r2, r3
 801833e:	f107 0320 	add.w	r3, r7, #32
 8018342:	4618      	mov	r0, r3
 8018344:	f001 fe90 	bl	801a068 <UTIL_MEM_cpy_8>
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->fsk.StopTimerOnPreambleDetect == 0 ) ? false : true );
 8018348:	68bb      	ldr	r3, [r7, #8]
 801834a:	681b      	ldr	r3, [r3, #0]
 801834c:	2b00      	cmp	r3, #0
 801834e:	bf14      	ite	ne
 8018350:	2301      	movne	r3, #1
 8018352:	2300      	moveq	r3, #0
 8018354:	b2db      	uxtb	r3, r3
 8018356:	4618      	mov	r0, r3
 8018358:	f000 fe08 	bl	8018f6c <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801835c:	4b8b      	ldr	r3, [pc, #556]	@ (801858c <RadioSetRxGenericConfig+0x2c4>)
 801835e:	2200      	movs	r2, #0
 8018360:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 8018364:	68bb      	ldr	r3, [r7, #8]
 8018366:	689b      	ldr	r3, [r3, #8]
 8018368:	4a88      	ldr	r2, [pc, #544]	@ (801858c <RadioSetRxGenericConfig+0x2c4>)
 801836a:	63d3      	str	r3, [r2, #60]	@ 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = (RadioModShapings_t) config->fsk.ModulationShaping;
 801836c:	68bb      	ldr	r3, [r7, #8]
 801836e:	f893 2020 	ldrb.w	r2, [r3, #32]
 8018372:	4b86      	ldr	r3, [pc, #536]	@ (801858c <RadioSetRxGenericConfig+0x2c4>)
 8018374:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
        SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( config->fsk.Bandwidth );
 8018378:	68bb      	ldr	r3, [r7, #8]
 801837a:	685b      	ldr	r3, [r3, #4]
 801837c:	4618      	mov	r0, r3
 801837e:	f001 fcb3 	bl	8019ce8 <SUBGRF_GetFskBandwidthRegValue>
 8018382:	4603      	mov	r3, r0
 8018384:	461a      	mov	r2, r3
 8018386:	4b81      	ldr	r3, [pc, #516]	@ (801858c <RadioSetRxGenericConfig+0x2c4>)
 8018388:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801838c:	4b7f      	ldr	r3, [pc, #508]	@ (801858c <RadioSetRxGenericConfig+0x2c4>)
 801838e:	2200      	movs	r2, #0
 8018390:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3 ; // convert byte into bit
 8018392:	68bb      	ldr	r3, [r7, #8]
 8018394:	68db      	ldr	r3, [r3, #12]
 8018396:	b29b      	uxth	r3, r3
 8018398:	00db      	lsls	r3, r3, #3
 801839a:	b29a      	uxth	r2, r3
 801839c:	4b7b      	ldr	r3, [pc, #492]	@ (801858c <RadioSetRxGenericConfig+0x2c4>)
 801839e:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = ( RadioPreambleDetection_t ) config->fsk.PreambleMinDetect;
 80183a0:	68bb      	ldr	r3, [r7, #8]
 80183a2:	7fda      	ldrb	r2, [r3, #31]
 80183a4:	4b79      	ldr	r3, [pc, #484]	@ (801858c <RadioSetRxGenericConfig+0x2c4>)
 80183a6:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 80183a8:	68bb      	ldr	r3, [r7, #8]
 80183aa:	7f9b      	ldrb	r3, [r3, #30]
 80183ac:	00db      	lsls	r3, r3, #3
 80183ae:	b2da      	uxtb	r2, r3
 80183b0:	4b76      	ldr	r3, [pc, #472]	@ (801858c <RadioSetRxGenericConfig+0x2c4>)
 80183b2:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = ( RadioAddressComp_t ) config->fsk.AddrComp;
 80183b4:	68bb      	ldr	r3, [r7, #8]
 80183b6:	f893 2021 	ldrb.w	r2, [r3, #33]	@ 0x21
 80183ba:	4b74      	ldr	r3, [pc, #464]	@ (801858c <RadioSetRxGenericConfig+0x2c4>)
 80183bc:	751a      	strb	r2, [r3, #20]
        if( config->fsk.LengthMode == RADIO_FSK_PACKET_FIXED_LENGTH )
 80183be:	68bb      	ldr	r3, [r7, #8]
 80183c0:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 80183c4:	2b00      	cmp	r3, #0
 80183c6:	d105      	bne.n	80183d4 <RadioSetRxGenericConfig+0x10c>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = config->fsk.MaxPayloadLength;
 80183c8:	68bb      	ldr	r3, [r7, #8]
 80183ca:	695b      	ldr	r3, [r3, #20]
 80183cc:	b2da      	uxtb	r2, r3
 80183ce:	4b6f      	ldr	r3, [pc, #444]	@ (801858c <RadioSetRxGenericConfig+0x2c4>)
 80183d0:	759a      	strb	r2, [r3, #22]
 80183d2:	e00b      	b.n	80183ec <RadioSetRxGenericConfig+0x124>
        else if( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH )
 80183d4:	68bb      	ldr	r3, [r7, #8]
 80183d6:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 80183da:	2b02      	cmp	r3, #2
 80183dc:	d103      	bne.n	80183e6 <RadioSetRxGenericConfig+0x11e>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 80183de:	4b6b      	ldr	r3, [pc, #428]	@ (801858c <RadioSetRxGenericConfig+0x2c4>)
 80183e0:	22ff      	movs	r2, #255	@ 0xff
 80183e2:	759a      	strb	r2, [r3, #22]
 80183e4:	e002      	b.n	80183ec <RadioSetRxGenericConfig+0x124>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 80183e6:	4b69      	ldr	r3, [pc, #420]	@ (801858c <RadioSetRxGenericConfig+0x2c4>)
 80183e8:	22ff      	movs	r2, #255	@ 0xff
 80183ea:	759a      	strb	r2, [r3, #22]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING ) || ( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 80183ec:	68bb      	ldr	r3, [r7, #8]
 80183ee:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80183f2:	2b02      	cmp	r3, #2
 80183f4:	d004      	beq.n	8018400 <RadioSetRxGenericConfig+0x138>
 80183f6:	68bb      	ldr	r3, [r7, #8]
 80183f8:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 80183fc:	2b02      	cmp	r3, #2
 80183fe:	d12d      	bne.n	801845c <RadioSetRxGenericConfig+0x194>
          if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 8018400:	68bb      	ldr	r3, [r7, #8]
 8018402:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8018406:	2bf1      	cmp	r3, #241	@ 0xf1
 8018408:	d00c      	beq.n	8018424 <RadioSetRxGenericConfig+0x15c>
 801840a:	68bb      	ldr	r3, [r7, #8]
 801840c:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8018410:	2bf2      	cmp	r3, #242	@ 0xf2
 8018412:	d007      	beq.n	8018424 <RadioSetRxGenericConfig+0x15c>
 8018414:	68bb      	ldr	r3, [r7, #8]
 8018416:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 801841a:	2b01      	cmp	r3, #1
 801841c:	d002      	beq.n	8018424 <RadioSetRxGenericConfig+0x15c>
            return -1;
 801841e:	f04f 33ff 	mov.w	r3, #4294967295
 8018422:	e10b      	b.n	801863c <RadioSetRxGenericConfig+0x374>
          ConfigGeneric.rtx = CONFIG_RX;
 8018424:	2300      	movs	r3, #0
 8018426:	773b      	strb	r3, [r7, #28]
          ConfigGeneric.RxConfig = config;
 8018428:	68bb      	ldr	r3, [r7, #8]
 801842a:	61bb      	str	r3, [r7, #24]
          if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &RxTimeoutTimer ) )
 801842c:	4b58      	ldr	r3, [pc, #352]	@ (8018590 <RadioSetRxGenericConfig+0x2c8>)
 801842e:	6819      	ldr	r1, [r3, #0]
 8018430:	f107 0314 	add.w	r3, r7, #20
 8018434:	4a57      	ldr	r2, [pc, #348]	@ (8018594 <RadioSetRxGenericConfig+0x2cc>)
 8018436:	4618      	mov	r0, r3
 8018438:	f001 fd16 	bl	8019e68 <RFW_Init>
 801843c:	4603      	mov	r3, r0
 801843e:	2b00      	cmp	r3, #0
 8018440:	d002      	beq.n	8018448 <RadioSetRxGenericConfig+0x180>
            return -1;
 8018442:	f04f 33ff 	mov.w	r3, #4294967295
 8018446:	e0f9      	b.n	801863c <RadioSetRxGenericConfig+0x374>
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 8018448:	4b50      	ldr	r3, [pc, #320]	@ (801858c <RadioSetRxGenericConfig+0x2c4>)
 801844a:	2200      	movs	r2, #0
 801844c:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 801844e:	4b4f      	ldr	r3, [pc, #316]	@ (801858c <RadioSetRxGenericConfig+0x2c4>)
 8018450:	2201      	movs	r2, #1
 8018452:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 8018454:	4b4d      	ldr	r3, [pc, #308]	@ (801858c <RadioSetRxGenericConfig+0x2c4>)
 8018456:	2200      	movs	r2, #0
 8018458:	755a      	strb	r2, [r3, #21]
        {
 801845a:	e00e      	b.n	801847a <RadioSetRxGenericConfig+0x1b2>
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 801845c:	68bb      	ldr	r3, [r7, #8]
 801845e:	f893 2023 	ldrb.w	r2, [r3, #35]	@ 0x23
 8018462:	4b4a      	ldr	r3, [pc, #296]	@ (801858c <RadioSetRxGenericConfig+0x2c4>)
 8018464:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 8018466:	68bb      	ldr	r3, [r7, #8]
 8018468:	f893 2024 	ldrb.w	r2, [r3, #36]	@ 0x24
 801846c:	4b47      	ldr	r3, [pc, #284]	@ (801858c <RadioSetRxGenericConfig+0x2c4>)
 801846e:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.LengthMode;
 8018470:	68bb      	ldr	r3, [r7, #8]
 8018472:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
 8018476:	4b45      	ldr	r3, [pc, #276]	@ (801858c <RadioSetRxGenericConfig+0x2c4>)
 8018478:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 801847a:	f7ff fa48 	bl	801790e <RadioStandby>
        RadioSetModem( MODEM_FSK );
 801847e:	2000      	movs	r0, #0
 8018480:	f7fe fbf2 	bl	8016c68 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8018484:	4844      	ldr	r0, [pc, #272]	@ (8018598 <RadioSetRxGenericConfig+0x2d0>)
 8018486:	f001 f80b 	bl	80194a0 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801848a:	4844      	ldr	r0, [pc, #272]	@ (801859c <RadioSetRxGenericConfig+0x2d4>)
 801848c:	f001 f8da 	bl	8019644 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 8018490:	f107 0320 	add.w	r3, r7, #32
 8018494:	4618      	mov	r0, r3
 8018496:	f000 fba2 	bl	8018bde <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 801849a:	68bb      	ldr	r3, [r7, #8]
 801849c:	8b9b      	ldrh	r3, [r3, #28]
 801849e:	4618      	mov	r0, r3
 80184a0:	f000 fbec 	bl	8018c7c <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 80184a4:	68bb      	ldr	r3, [r7, #8]
 80184a6:	8b1b      	ldrh	r3, [r3, #24]
 80184a8:	4618      	mov	r0, r3
 80184aa:	f000 fbc7 	bl	8018c3c <SUBGRF_SetCrcPolynomial>
        SubgRf.RxTimeout = ( uint32_t )( ( symbTimeout * 1000 * 8 ) / config->fsk.BitRate );
 80184ae:	683b      	ldr	r3, [r7, #0]
 80184b0:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 80184b4:	fb03 f202 	mul.w	r2, r3, r2
 80184b8:	68bb      	ldr	r3, [r7, #8]
 80184ba:	689b      	ldr	r3, [r3, #8]
 80184bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80184c0:	4a32      	ldr	r2, [pc, #200]	@ (801858c <RadioSetRxGenericConfig+0x2c4>)
 80184c2:	6093      	str	r3, [r2, #8]
        break;
 80184c4:	e0b9      	b.n	801863a <RadioSetRxGenericConfig+0x372>
        if( config->lora.PreambleLen == 0 )
 80184c6:	68bb      	ldr	r3, [r7, #8]
 80184c8:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 80184ca:	2b00      	cmp	r3, #0
 80184cc:	d102      	bne.n	80184d4 <RadioSetRxGenericConfig+0x20c>
            return -1;
 80184ce:	f04f 33ff 	mov.w	r3, #4294967295
 80184d2:	e0b3      	b.n	801863c <RadioSetRxGenericConfig+0x374>
        if( config->lora.LengthMode == RADIO_LORA_PACKET_FIXED_LENGTH )
 80184d4:	68bb      	ldr	r3, [r7, #8]
 80184d6:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80184da:	2b01      	cmp	r3, #1
 80184dc:	d104      	bne.n	80184e8 <RadioSetRxGenericConfig+0x220>
            MaxPayloadLength = config->fsk.MaxPayloadLength;
 80184de:	68bb      	ldr	r3, [r7, #8]
 80184e0:	695b      	ldr	r3, [r3, #20]
 80184e2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80184e6:	e002      	b.n	80184ee <RadioSetRxGenericConfig+0x226>
            MaxPayloadLength = 0xFF;
 80184e8:	23ff      	movs	r3, #255	@ 0xff
 80184ea:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->lora.StopTimerOnPreambleDetect == 0 ) ? false : true );
 80184ee:	68bb      	ldr	r3, [r7, #8]
 80184f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80184f2:	2b00      	cmp	r3, #0
 80184f4:	bf14      	ite	ne
 80184f6:	2301      	movne	r3, #1
 80184f8:	2300      	moveq	r3, #0
 80184fa:	b2db      	uxtb	r3, r3
 80184fc:	4618      	mov	r0, r3
 80184fe:	f000 fd35 	bl	8018f6c <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 8018502:	683b      	ldr	r3, [r7, #0]
 8018504:	b2db      	uxtb	r3, r3
 8018506:	4618      	mov	r0, r3
 8018508:	f000 fd3f 	bl	8018f8a <SUBGRF_SetLoRaSymbNumTimeout>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 801850c:	4b1f      	ldr	r3, [pc, #124]	@ (801858c <RadioSetRxGenericConfig+0x2c4>)
 801850e:	2201      	movs	r2, #1
 8018510:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 8018514:	68bb      	ldr	r3, [r7, #8]
 8018516:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 801851a:	4b1c      	ldr	r3, [pc, #112]	@ (801858c <RadioSetRxGenericConfig+0x2c4>)
 801851c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 8018520:	68bb      	ldr	r3, [r7, #8]
 8018522:	f893 202d 	ldrb.w	r2, [r3, #45]	@ 0x2d
 8018526:	4b19      	ldr	r3, [pc, #100]	@ (801858c <RadioSetRxGenericConfig+0x2c4>)
 8018528:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 801852c:	68bb      	ldr	r3, [r7, #8]
 801852e:	f893 202e 	ldrb.w	r2, [r3, #46]	@ 0x2e
 8018532:	4b16      	ldr	r3, [pc, #88]	@ (801858c <RadioSetRxGenericConfig+0x2c4>)
 8018534:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
        switch( config->lora.LowDatarateOptimize )
 8018538:	68bb      	ldr	r3, [r7, #8]
 801853a:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 801853e:	2b02      	cmp	r3, #2
 8018540:	d010      	beq.n	8018564 <RadioSetRxGenericConfig+0x29c>
 8018542:	2b02      	cmp	r3, #2
 8018544:	dc2c      	bgt.n	80185a0 <RadioSetRxGenericConfig+0x2d8>
 8018546:	2b00      	cmp	r3, #0
 8018548:	d002      	beq.n	8018550 <RadioSetRxGenericConfig+0x288>
 801854a:	2b01      	cmp	r3, #1
 801854c:	d005      	beq.n	801855a <RadioSetRxGenericConfig+0x292>
            break;
 801854e:	e027      	b.n	80185a0 <RadioSetRxGenericConfig+0x2d8>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8018550:	4b0e      	ldr	r3, [pc, #56]	@ (801858c <RadioSetRxGenericConfig+0x2c4>)
 8018552:	2200      	movs	r2, #0
 8018554:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 8018558:	e023      	b.n	80185a2 <RadioSetRxGenericConfig+0x2da>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 801855a:	4b0c      	ldr	r3, [pc, #48]	@ (801858c <RadioSetRxGenericConfig+0x2c4>)
 801855c:	2201      	movs	r2, #1
 801855e:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 8018562:	e01e      	b.n	80185a2 <RadioSetRxGenericConfig+0x2da>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 8018564:	68bb      	ldr	r3, [r7, #8]
 8018566:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 801856a:	2b0b      	cmp	r3, #11
 801856c:	d004      	beq.n	8018578 <RadioSetRxGenericConfig+0x2b0>
 801856e:	68bb      	ldr	r3, [r7, #8]
 8018570:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8018574:	2b0c      	cmp	r3, #12
 8018576:	d104      	bne.n	8018582 <RadioSetRxGenericConfig+0x2ba>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8018578:	4b04      	ldr	r3, [pc, #16]	@ (801858c <RadioSetRxGenericConfig+0x2c4>)
 801857a:	2201      	movs	r2, #1
 801857c:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 8018580:	e00f      	b.n	80185a2 <RadioSetRxGenericConfig+0x2da>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8018582:	4b02      	ldr	r3, [pc, #8]	@ (801858c <RadioSetRxGenericConfig+0x2c4>)
 8018584:	2200      	movs	r2, #0
 8018586:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 801858a:	e00a      	b.n	80185a2 <RadioSetRxGenericConfig+0x2da>
 801858c:	20001a70 	.word	0x20001a70
 8018590:	20001a6c 	.word	0x20001a6c
 8018594:	20001ae4 	.word	0x20001ae4
 8018598:	20001aa8 	.word	0x20001aa8
 801859c:	20001a7e 	.word	0x20001a7e
            break;
 80185a0:	bf00      	nop
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 80185a2:	4b28      	ldr	r3, [pc, #160]	@ (8018644 <RadioSetRxGenericConfig+0x37c>)
 80185a4:	2201      	movs	r2, #1
 80185a6:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 80185a8:	68bb      	ldr	r3, [r7, #8]
 80185aa:	8e1a      	ldrh	r2, [r3, #48]	@ 0x30
 80185ac:	4b25      	ldr	r3, [pc, #148]	@ (8018644 <RadioSetRxGenericConfig+0x37c>)
 80185ae:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 80185b0:	68bb      	ldr	r3, [r7, #8]
 80185b2:	f893 2032 	ldrb.w	r2, [r3, #50]	@ 0x32
 80185b6:	4b23      	ldr	r3, [pc, #140]	@ (8018644 <RadioSetRxGenericConfig+0x37c>)
 80185b8:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 80185ba:	4a22      	ldr	r2, [pc, #136]	@ (8018644 <RadioSetRxGenericConfig+0x37c>)
 80185bc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80185c0:	77d3      	strb	r3, [r2, #31]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 80185c2:	68bb      	ldr	r3, [r7, #8]
 80185c4:	f893 2034 	ldrb.w	r2, [r3, #52]	@ 0x34
 80185c8:	4b1e      	ldr	r3, [pc, #120]	@ (8018644 <RadioSetRxGenericConfig+0x37c>)
 80185ca:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 80185ce:	68bb      	ldr	r3, [r7, #8]
 80185d0:	f893 2035 	ldrb.w	r2, [r3, #53]	@ 0x35
 80185d4:	4b1b      	ldr	r3, [pc, #108]	@ (8018644 <RadioSetRxGenericConfig+0x37c>)
 80185d6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
        RadioStandby( );
 80185da:	f7ff f998 	bl	801790e <RadioStandby>
        RadioSetModem( MODEM_LORA );
 80185de:	2001      	movs	r0, #1
 80185e0:	f7fe fb42 	bl	8016c68 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80185e4:	4818      	ldr	r0, [pc, #96]	@ (8018648 <RadioSetRxGenericConfig+0x380>)
 80185e6:	f000 ff5b 	bl	80194a0 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80185ea:	4818      	ldr	r0, [pc, #96]	@ (801864c <RadioSetRxGenericConfig+0x384>)
 80185ec:	f001 f82a 	bl	8019644 <SUBGRF_SetPacketParams>
        if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 80185f0:	4b14      	ldr	r3, [pc, #80]	@ (8018644 <RadioSetRxGenericConfig+0x37c>)
 80185f2:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80185f6:	2b01      	cmp	r3, #1
 80185f8:	d10d      	bne.n	8018616 <RadioSetRxGenericConfig+0x34e>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 80185fa:	f240 7036 	movw	r0, #1846	@ 0x736
 80185fe:	f001 f97d 	bl	80198fc <SUBGRF_ReadRegister>
 8018602:	4603      	mov	r3, r0
 8018604:	f023 0304 	bic.w	r3, r3, #4
 8018608:	b2db      	uxtb	r3, r3
 801860a:	4619      	mov	r1, r3
 801860c:	f240 7036 	movw	r0, #1846	@ 0x736
 8018610:	f001 f960 	bl	80198d4 <SUBGRF_WriteRegister>
 8018614:	e00c      	b.n	8018630 <RadioSetRxGenericConfig+0x368>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 8018616:	f240 7036 	movw	r0, #1846	@ 0x736
 801861a:	f001 f96f 	bl	80198fc <SUBGRF_ReadRegister>
 801861e:	4603      	mov	r3, r0
 8018620:	f043 0304 	orr.w	r3, r3, #4
 8018624:	b2db      	uxtb	r3, r3
 8018626:	4619      	mov	r1, r3
 8018628:	f240 7036 	movw	r0, #1846	@ 0x736
 801862c:	f001 f952 	bl	80198d4 <SUBGRF_WriteRegister>
        SubgRf.RxTimeout = 0xFFFF;
 8018630:	4b04      	ldr	r3, [pc, #16]	@ (8018644 <RadioSetRxGenericConfig+0x37c>)
 8018632:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8018636:	609a      	str	r2, [r3, #8]
        break;
 8018638:	bf00      	nop
    }
    return status;
 801863a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 801863c:	4618      	mov	r0, r3
 801863e:	3730      	adds	r7, #48	@ 0x30
 8018640:	46bd      	mov	sp, r7
 8018642:	bd80      	pop	{r7, pc}
 8018644:	20001a70 	.word	0x20001a70
 8018648:	20001aa8 	.word	0x20001aa8
 801864c:	20001a7e 	.word	0x20001a7e

08018650 <RadioSetTxGenericConfig>:

static int32_t RadioSetTxGenericConfig( GenericModems_t modem, TxConfigGeneric_t* config, int8_t power, uint32_t timeout )
{
 8018650:	b580      	push	{r7, lr}
 8018652:	b08e      	sub	sp, #56	@ 0x38
 8018654:	af00      	add	r7, sp, #0
 8018656:	60b9      	str	r1, [r7, #8]
 8018658:	607b      	str	r3, [r7, #4]
 801865a:	4603      	mov	r3, r0
 801865c:	73fb      	strb	r3, [r7, #15]
 801865e:	4613      	mov	r3, r2
 8018660:	73bb      	strb	r3, [r7, #14]
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    uint8_t syncword[8] = {0};
 8018662:	2300      	movs	r3, #0
 8018664:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8018666:	2300      	movs	r3, #0
 8018668:	633b      	str	r3, [r7, #48]	@ 0x30
    RadioModems_t radio_modem;
    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 801866a:	f001 fc0a 	bl	8019e82 <RFW_DeInit>
    switch( modem )
 801866e:	7bfb      	ldrb	r3, [r7, #15]
 8018670:	2b03      	cmp	r3, #3
 8018672:	f200 8204 	bhi.w	8018a7e <RadioSetTxGenericConfig+0x42e>
 8018676:	a201      	add	r2, pc, #4	@ (adr r2, 801867c <RadioSetTxGenericConfig+0x2c>)
 8018678:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801867c:	08018801 	.word	0x08018801
 8018680:	08018949 	.word	0x08018949
 8018684:	08018a41 	.word	0x08018a41
 8018688:	0801868d 	.word	0x0801868d
    {
    case GENERIC_MSK:
        if( config->msk.SyncWordLength > 8 )
 801868c:	68bb      	ldr	r3, [r7, #8]
 801868e:	7c9b      	ldrb	r3, [r3, #18]
 8018690:	2b08      	cmp	r3, #8
 8018692:	d902      	bls.n	801869a <RadioSetTxGenericConfig+0x4a>
        {
            return -1;
 8018694:	f04f 33ff 	mov.w	r3, #4294967295
 8018698:	e206      	b.n	8018aa8 <RadioSetTxGenericConfig+0x458>
        }
        else
        {
          RADIO_MEMCPY8(syncword, config->msk.SyncWord, config->msk.SyncWordLength);
 801869a:	68bb      	ldr	r3, [r7, #8]
 801869c:	6899      	ldr	r1, [r3, #8]
 801869e:	68bb      	ldr	r3, [r7, #8]
 80186a0:	7c9b      	ldrb	r3, [r3, #18]
 80186a2:	461a      	mov	r2, r3
 80186a4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80186a8:	4618      	mov	r0, r3
 80186aa:	f001 fcdd 	bl	801a068 <UTIL_MEM_cpy_8>
        }
        if( ( config->msk.BitRate == 0 ) )
 80186ae:	68bb      	ldr	r3, [r7, #8]
 80186b0:	681b      	ldr	r3, [r3, #0]
 80186b2:	2b00      	cmp	r3, #0
 80186b4:	d102      	bne.n	80186bc <RadioSetTxGenericConfig+0x6c>
        {
            return -1;
 80186b6:	f04f 33ff 	mov.w	r3, #4294967295
 80186ba:	e1f5      	b.n	8018aa8 <RadioSetTxGenericConfig+0x458>
        }
        else if (config->msk.BitRate<= 10000)
 80186bc:	68bb      	ldr	r3, [r7, #8]
 80186be:	681b      	ldr	r3, [r3, #0]
 80186c0:	f242 7210 	movw	r2, #10000	@ 0x2710
 80186c4:	4293      	cmp	r3, r2
 80186c6:	d813      	bhi.n	80186f0 <RadioSetTxGenericConfig+0xa0>
        {
          /*max msk modulator datarate is 10kbps*/
          radio_modem= MODEM_MSK;
 80186c8:	2302      	movs	r3, #2
 80186ca:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
          SubgRf.PacketParams.PacketType = PACKET_TYPE_GMSK;
 80186ce:	4b99      	ldr	r3, [pc, #612]	@ (8018934 <RadioSetTxGenericConfig+0x2e4>)
 80186d0:	2203      	movs	r2, #3
 80186d2:	739a      	strb	r2, [r3, #14]
          SubgRf.ModulationParams.PacketType = PACKET_TYPE_GMSK;
 80186d4:	4b97      	ldr	r3, [pc, #604]	@ (8018934 <RadioSetTxGenericConfig+0x2e4>)
 80186d6:	2203      	movs	r2, #3
 80186d8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
          SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 80186dc:	68bb      	ldr	r3, [r7, #8]
 80186de:	681b      	ldr	r3, [r3, #0]
 80186e0:	4a94      	ldr	r2, [pc, #592]	@ (8018934 <RadioSetTxGenericConfig+0x2e4>)
 80186e2:	63d3      	str	r3, [r2, #60]	@ 0x3c
          SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 80186e4:	68bb      	ldr	r3, [r7, #8]
 80186e6:	7cda      	ldrb	r2, [r3, #19]
 80186e8:	4b92      	ldr	r3, [pc, #584]	@ (8018934 <RadioSetTxGenericConfig+0x2e4>)
 80186ea:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80186ee:	e017      	b.n	8018720 <RadioSetTxGenericConfig+0xd0>
        }
        else
        {
          radio_modem= MODEM_FSK;
 80186f0:	2300      	movs	r3, #0
 80186f2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
          SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 80186f6:	4b8f      	ldr	r3, [pc, #572]	@ (8018934 <RadioSetTxGenericConfig+0x2e4>)
 80186f8:	2200      	movs	r2, #0
 80186fa:	739a      	strb	r2, [r3, #14]
          SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 80186fc:	4b8d      	ldr	r3, [pc, #564]	@ (8018934 <RadioSetTxGenericConfig+0x2e4>)
 80186fe:	2200      	movs	r2, #0
 8018700:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
          SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 8018704:	68bb      	ldr	r3, [r7, #8]
 8018706:	681b      	ldr	r3, [r3, #0]
 8018708:	4a8a      	ldr	r2, [pc, #552]	@ (8018934 <RadioSetTxGenericConfig+0x2e4>)
 801870a:	63d3      	str	r3, [r2, #60]	@ 0x3c
          SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 801870c:	68bb      	ldr	r3, [r7, #8]
 801870e:	7cda      	ldrb	r2, [r3, #19]
 8018710:	4b88      	ldr	r3, [pc, #544]	@ (8018934 <RadioSetTxGenericConfig+0x2e4>)
 8018712:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
          /*do msk with gfsk modulator*/
          SubgRf.ModulationParams.Params.Gfsk.Fdev = config->msk.BitRate/4;
 8018716:	68bb      	ldr	r3, [r7, #8]
 8018718:	681b      	ldr	r3, [r3, #0]
 801871a:	089b      	lsrs	r3, r3, #2
 801871c:	4a85      	ldr	r2, [pc, #532]	@ (8018934 <RadioSetTxGenericConfig+0x2e4>)
 801871e:	6413      	str	r3, [r2, #64]	@ 0x40
        }

        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->msk.PreambleLen ) << 3; // convert byte into bit
 8018720:	68bb      	ldr	r3, [r7, #8]
 8018722:	685b      	ldr	r3, [r3, #4]
 8018724:	b29b      	uxth	r3, r3
 8018726:	00db      	lsls	r3, r3, #3
 8018728:	b29a      	uxth	r2, r3
 801872a:	4b82      	ldr	r3, [pc, #520]	@ (8018934 <RadioSetTxGenericConfig+0x2e4>)
 801872c:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 801872e:	4b81      	ldr	r3, [pc, #516]	@ (8018934 <RadioSetTxGenericConfig+0x2e4>)
 8018730:	2204      	movs	r2, #4
 8018732:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->msk.SyncWordLength ) << 3; // convert byte into bit
 8018734:	68bb      	ldr	r3, [r7, #8]
 8018736:	7c9b      	ldrb	r3, [r3, #18]
 8018738:	00db      	lsls	r3, r3, #3
 801873a:	b2da      	uxtb	r2, r3
 801873c:	4b7d      	ldr	r3, [pc, #500]	@ (8018934 <RadioSetTxGenericConfig+0x2e4>)
 801873e:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 8018740:	4b7c      	ldr	r3, [pc, #496]	@ (8018934 <RadioSetTxGenericConfig+0x2e4>)
 8018742:	2200      	movs	r2, #0
 8018744:	751a      	strb	r2, [r3, #20]

        if( ( config->msk.Whitening == RADIO_FSK_DC_IBM_WHITENING ) || ( config->msk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 8018746:	68bb      	ldr	r3, [r7, #8]
 8018748:	7d9b      	ldrb	r3, [r3, #22]
 801874a:	2b02      	cmp	r3, #2
 801874c:	d003      	beq.n	8018756 <RadioSetTxGenericConfig+0x106>
 801874e:	68bb      	ldr	r3, [r7, #8]
 8018750:	7d1b      	ldrb	r3, [r3, #20]
 8018752:	2b02      	cmp	r3, #2
 8018754:	d12b      	bne.n	80187ae <RadioSetTxGenericConfig+0x15e>
        {
            /* Supports only RADIO_FSK_CRC_2_BYTES_IBM or RADIO_FSK_CRC_2_BYTES_CCIT */
            if( ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT ) &&( config->msk.CrcLength != RADIO_FSK_CRC_OFF ) )
 8018756:	68bb      	ldr	r3, [r7, #8]
 8018758:	7d5b      	ldrb	r3, [r3, #21]
 801875a:	2bf1      	cmp	r3, #241	@ 0xf1
 801875c:	d00a      	beq.n	8018774 <RadioSetTxGenericConfig+0x124>
 801875e:	68bb      	ldr	r3, [r7, #8]
 8018760:	7d5b      	ldrb	r3, [r3, #21]
 8018762:	2bf2      	cmp	r3, #242	@ 0xf2
 8018764:	d006      	beq.n	8018774 <RadioSetTxGenericConfig+0x124>
 8018766:	68bb      	ldr	r3, [r7, #8]
 8018768:	7d5b      	ldrb	r3, [r3, #21]
 801876a:	2b01      	cmp	r3, #1
 801876c:	d002      	beq.n	8018774 <RadioSetTxGenericConfig+0x124>
            {
                return -1;
 801876e:	f04f 33ff 	mov.w	r3, #4294967295
 8018772:	e199      	b.n	8018aa8 <RadioSetTxGenericConfig+0x458>
            }
            ConfigGeneric_t ConfigGeneric;
            /*msk and fsk are union, no need for copy as fsk/msk struct are on same address*/
            ConfigGeneric.TxConfig= config;
 8018774:	68bb      	ldr	r3, [r7, #8]
 8018776:	623b      	str	r3, [r7, #32]
            ConfigGeneric.rtx = CONFIG_TX;
 8018778:	2301      	movs	r3, #1
 801877a:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 801877e:	4b6e      	ldr	r3, [pc, #440]	@ (8018938 <RadioSetTxGenericConfig+0x2e8>)
 8018780:	6819      	ldr	r1, [r3, #0]
 8018782:	f107 0320 	add.w	r3, r7, #32
 8018786:	4a6d      	ldr	r2, [pc, #436]	@ (801893c <RadioSetTxGenericConfig+0x2ec>)
 8018788:	4618      	mov	r0, r3
 801878a:	f001 fb6d 	bl	8019e68 <RFW_Init>
 801878e:	4603      	mov	r3, r0
 8018790:	2b00      	cmp	r3, #0
 8018792:	d002      	beq.n	801879a <RadioSetTxGenericConfig+0x14a>
            {
              return -1;
 8018794:	f04f 33ff 	mov.w	r3, #4294967295
 8018798:	e186      	b.n	8018aa8 <RadioSetTxGenericConfig+0x458>
            }
            /* whitening off, will be processed by FW, switch off built-in radio whitening */
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 801879a:	4b66      	ldr	r3, [pc, #408]	@ (8018934 <RadioSetTxGenericConfig+0x2e4>)
 801879c:	2200      	movs	r2, #0
 801879e:	761a      	strb	r2, [r3, #24]
            /* Crc processed by FW, switch off built-in radio Crc */
            SubgRf.PacketParams.Params.Gfsk.CrcLength = (RadioCrcTypes_t) RADIO_CRC_OFF;
 80187a0:	4b64      	ldr	r3, [pc, #400]	@ (8018934 <RadioSetTxGenericConfig+0x2e4>)
 80187a2:	2201      	movs	r2, #1
 80187a4:	75da      	strb	r2, [r3, #23]
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 80187a6:	4b63      	ldr	r3, [pc, #396]	@ (8018934 <RadioSetTxGenericConfig+0x2e4>)
 80187a8:	2200      	movs	r2, #0
 80187aa:	755a      	strb	r2, [r3, #21]
        {
 80187ac:	e00b      	b.n	80187c6 <RadioSetTxGenericConfig+0x176>
        }
        else
        {
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->msk.CrcLength;
 80187ae:	68bb      	ldr	r3, [r7, #8]
 80187b0:	7d5a      	ldrb	r2, [r3, #21]
 80187b2:	4b60      	ldr	r3, [pc, #384]	@ (8018934 <RadioSetTxGenericConfig+0x2e4>)
 80187b4:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->msk.Whitening;
 80187b6:	68bb      	ldr	r3, [r7, #8]
 80187b8:	7d9a      	ldrb	r2, [r3, #22]
 80187ba:	4b5e      	ldr	r3, [pc, #376]	@ (8018934 <RadioSetTxGenericConfig+0x2e4>)
 80187bc:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->msk.HeaderType;
 80187be:	68bb      	ldr	r3, [r7, #8]
 80187c0:	7d1a      	ldrb	r2, [r3, #20]
 80187c2:	4b5c      	ldr	r3, [pc, #368]	@ (8018934 <RadioSetTxGenericConfig+0x2e4>)
 80187c4:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 80187c6:	f7ff f8a2 	bl	801790e <RadioStandby>
        RadioSetModem( radio_modem );
 80187ca:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80187ce:	4618      	mov	r0, r3
 80187d0:	f7fe fa4a 	bl	8016c68 <RadioSetModem>

        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80187d4:	485a      	ldr	r0, [pc, #360]	@ (8018940 <RadioSetTxGenericConfig+0x2f0>)
 80187d6:	f000 fe63 	bl	80194a0 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80187da:	485a      	ldr	r0, [pc, #360]	@ (8018944 <RadioSetTxGenericConfig+0x2f4>)
 80187dc:	f000 ff32 	bl	8019644 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 80187e0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80187e4:	4618      	mov	r0, r3
 80187e6:	f000 f9fa 	bl	8018bde <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->msk.whiteSeed );
 80187ea:	68bb      	ldr	r3, [r7, #8]
 80187ec:	8a1b      	ldrh	r3, [r3, #16]
 80187ee:	4618      	mov	r0, r3
 80187f0:	f000 fa44 	bl	8018c7c <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial(config->msk.CrcPolynomial );
 80187f4:	68bb      	ldr	r3, [r7, #8]
 80187f6:	899b      	ldrh	r3, [r3, #12]
 80187f8:	4618      	mov	r0, r3
 80187fa:	f000 fa1f 	bl	8018c3c <SUBGRF_SetCrcPolynomial>
        break;
 80187fe:	e13f      	b.n	8018a80 <RadioSetTxGenericConfig+0x430>
    case GENERIC_FSK:
        if( config->fsk.BitRate == 0 )
 8018800:	68bb      	ldr	r3, [r7, #8]
 8018802:	681b      	ldr	r3, [r3, #0]
 8018804:	2b00      	cmp	r3, #0
 8018806:	d102      	bne.n	801880e <RadioSetTxGenericConfig+0x1be>
        {
            return -1;
 8018808:	f04f 33ff 	mov.w	r3, #4294967295
 801880c:	e14c      	b.n	8018aa8 <RadioSetTxGenericConfig+0x458>
        }
        if( config->fsk.SyncWordLength > 8 )
 801880e:	68bb      	ldr	r3, [r7, #8]
 8018810:	7c9b      	ldrb	r3, [r3, #18]
 8018812:	2b08      	cmp	r3, #8
 8018814:	d902      	bls.n	801881c <RadioSetTxGenericConfig+0x1cc>
        {
            return -1;
 8018816:	f04f 33ff 	mov.w	r3, #4294967295
 801881a:	e145      	b.n	8018aa8 <RadioSetTxGenericConfig+0x458>
        }
        else
        {
            RADIO_MEMCPY8(syncword, config->fsk.SyncWord, config->fsk.SyncWordLength);
 801881c:	68bb      	ldr	r3, [r7, #8]
 801881e:	6899      	ldr	r1, [r3, #8]
 8018820:	68bb      	ldr	r3, [r7, #8]
 8018822:	7c9b      	ldrb	r3, [r3, #18]
 8018824:	461a      	mov	r2, r3
 8018826:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 801882a:	4618      	mov	r0, r3
 801882c:	f001 fc1c 	bl	801a068 <UTIL_MEM_cpy_8>
        }
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8018830:	4b40      	ldr	r3, [pc, #256]	@ (8018934 <RadioSetTxGenericConfig+0x2e4>)
 8018832:	2200      	movs	r2, #0
 8018834:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 8018838:	68bb      	ldr	r3, [r7, #8]
 801883a:	681b      	ldr	r3, [r3, #0]
 801883c:	4a3d      	ldr	r2, [pc, #244]	@ (8018934 <RadioSetTxGenericConfig+0x2e4>)
 801883e:	63d3      	str	r3, [r2, #60]	@ 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 8018840:	68bb      	ldr	r3, [r7, #8]
 8018842:	7cda      	ldrb	r2, [r3, #19]
 8018844:	4b3b      	ldr	r3, [pc, #236]	@ (8018934 <RadioSetTxGenericConfig+0x2e4>)
 8018846:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
        SubgRf.ModulationParams.Params.Gfsk.Fdev = config->fsk.FrequencyDeviation;
 801884a:	68bb      	ldr	r3, [r7, #8]
 801884c:	699b      	ldr	r3, [r3, #24]
 801884e:	4a39      	ldr	r2, [pc, #228]	@ (8018934 <RadioSetTxGenericConfig+0x2e4>)
 8018850:	6413      	str	r3, [r2, #64]	@ 0x40

        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8018852:	4b38      	ldr	r3, [pc, #224]	@ (8018934 <RadioSetTxGenericConfig+0x2e4>)
 8018854:	2200      	movs	r2, #0
 8018856:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3; // convert byte into bit
 8018858:	68bb      	ldr	r3, [r7, #8]
 801885a:	685b      	ldr	r3, [r3, #4]
 801885c:	b29b      	uxth	r3, r3
 801885e:	00db      	lsls	r3, r3, #3
 8018860:	b29a      	uxth	r2, r3
 8018862:	4b34      	ldr	r3, [pc, #208]	@ (8018934 <RadioSetTxGenericConfig+0x2e4>)
 8018864:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 8018866:	4b33      	ldr	r3, [pc, #204]	@ (8018934 <RadioSetTxGenericConfig+0x2e4>)
 8018868:	2204      	movs	r2, #4
 801886a:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 801886c:	68bb      	ldr	r3, [r7, #8]
 801886e:	7c9b      	ldrb	r3, [r3, #18]
 8018870:	00db      	lsls	r3, r3, #3
 8018872:	b2da      	uxtb	r2, r3
 8018874:	4b2f      	ldr	r3, [pc, #188]	@ (8018934 <RadioSetTxGenericConfig+0x2e4>)
 8018876:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 8018878:	4b2e      	ldr	r3, [pc, #184]	@ (8018934 <RadioSetTxGenericConfig+0x2e4>)
 801887a:	2200      	movs	r2, #0
 801887c:	751a      	strb	r2, [r3, #20]

        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING ) || ( config->fsk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 801887e:	68bb      	ldr	r3, [r7, #8]
 8018880:	7d9b      	ldrb	r3, [r3, #22]
 8018882:	2b02      	cmp	r3, #2
 8018884:	d003      	beq.n	801888e <RadioSetTxGenericConfig+0x23e>
 8018886:	68bb      	ldr	r3, [r7, #8]
 8018888:	7d1b      	ldrb	r3, [r3, #20]
 801888a:	2b02      	cmp	r3, #2
 801888c:	d12a      	bne.n	80188e4 <RadioSetTxGenericConfig+0x294>
        {
            /* Supports only RADIO_FSK_CRC_2_BYTES_IBM or RADIO_FSK_CRC_2_BYTES_CCIT */
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT ) &&( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 801888e:	68bb      	ldr	r3, [r7, #8]
 8018890:	7d5b      	ldrb	r3, [r3, #21]
 8018892:	2bf1      	cmp	r3, #241	@ 0xf1
 8018894:	d00a      	beq.n	80188ac <RadioSetTxGenericConfig+0x25c>
 8018896:	68bb      	ldr	r3, [r7, #8]
 8018898:	7d5b      	ldrb	r3, [r3, #21]
 801889a:	2bf2      	cmp	r3, #242	@ 0xf2
 801889c:	d006      	beq.n	80188ac <RadioSetTxGenericConfig+0x25c>
 801889e:	68bb      	ldr	r3, [r7, #8]
 80188a0:	7d5b      	ldrb	r3, [r3, #21]
 80188a2:	2b01      	cmp	r3, #1
 80188a4:	d002      	beq.n	80188ac <RadioSetTxGenericConfig+0x25c>
            {
                return -1;
 80188a6:	f04f 33ff 	mov.w	r3, #4294967295
 80188aa:	e0fd      	b.n	8018aa8 <RadioSetTxGenericConfig+0x458>
            }
            ConfigGeneric_t ConfigGeneric;
            ConfigGeneric.rtx = CONFIG_TX;
 80188ac:	2301      	movs	r3, #1
 80188ae:	773b      	strb	r3, [r7, #28]
            ConfigGeneric.TxConfig = config;
 80188b0:	68bb      	ldr	r3, [r7, #8]
 80188b2:	617b      	str	r3, [r7, #20]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 80188b4:	4b20      	ldr	r3, [pc, #128]	@ (8018938 <RadioSetTxGenericConfig+0x2e8>)
 80188b6:	6819      	ldr	r1, [r3, #0]
 80188b8:	f107 0314 	add.w	r3, r7, #20
 80188bc:	4a1f      	ldr	r2, [pc, #124]	@ (801893c <RadioSetTxGenericConfig+0x2ec>)
 80188be:	4618      	mov	r0, r3
 80188c0:	f001 fad2 	bl	8019e68 <RFW_Init>
 80188c4:	4603      	mov	r3, r0
 80188c6:	2b00      	cmp	r3, #0
 80188c8:	d002      	beq.n	80188d0 <RadioSetTxGenericConfig+0x280>
            {
              return -1;
 80188ca:	f04f 33ff 	mov.w	r3, #4294967295
 80188ce:	e0eb      	b.n	8018aa8 <RadioSetTxGenericConfig+0x458>
            }
            /* whitening off, will be processed by FW, switch off built-in radio whitening */
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 80188d0:	4b18      	ldr	r3, [pc, #96]	@ (8018934 <RadioSetTxGenericConfig+0x2e4>)
 80188d2:	2200      	movs	r2, #0
 80188d4:	761a      	strb	r2, [r3, #24]
            /* Crc processed by FW, switch off built-in radio Crc */
            SubgRf.PacketParams.Params.Gfsk.CrcLength = (RadioCrcTypes_t) RADIO_CRC_OFF;
 80188d6:	4b17      	ldr	r3, [pc, #92]	@ (8018934 <RadioSetTxGenericConfig+0x2e4>)
 80188d8:	2201      	movs	r2, #1
 80188da:	75da      	strb	r2, [r3, #23]
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 80188dc:	4b15      	ldr	r3, [pc, #84]	@ (8018934 <RadioSetTxGenericConfig+0x2e4>)
 80188de:	2200      	movs	r2, #0
 80188e0:	755a      	strb	r2, [r3, #21]
        {
 80188e2:	e00b      	b.n	80188fc <RadioSetTxGenericConfig+0x2ac>
        }
        else
        {
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 80188e4:	68bb      	ldr	r3, [r7, #8]
 80188e6:	7d5a      	ldrb	r2, [r3, #21]
 80188e8:	4b12      	ldr	r3, [pc, #72]	@ (8018934 <RadioSetTxGenericConfig+0x2e4>)
 80188ea:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 80188ec:	68bb      	ldr	r3, [r7, #8]
 80188ee:	7d9a      	ldrb	r2, [r3, #22]
 80188f0:	4b10      	ldr	r3, [pc, #64]	@ (8018934 <RadioSetTxGenericConfig+0x2e4>)
 80188f2:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.HeaderType;
 80188f4:	68bb      	ldr	r3, [r7, #8]
 80188f6:	7d1a      	ldrb	r2, [r3, #20]
 80188f8:	4b0e      	ldr	r3, [pc, #56]	@ (8018934 <RadioSetTxGenericConfig+0x2e4>)
 80188fa:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 80188fc:	f7ff f807 	bl	801790e <RadioStandby>
        RadioSetModem( MODEM_FSK );
 8018900:	2000      	movs	r0, #0
 8018902:	f7fe f9b1 	bl	8016c68 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8018906:	480e      	ldr	r0, [pc, #56]	@ (8018940 <RadioSetTxGenericConfig+0x2f0>)
 8018908:	f000 fdca 	bl	80194a0 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801890c:	480d      	ldr	r0, [pc, #52]	@ (8018944 <RadioSetTxGenericConfig+0x2f4>)
 801890e:	f000 fe99 	bl	8019644 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 8018912:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8018916:	4618      	mov	r0, r3
 8018918:	f000 f961 	bl	8018bde <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 801891c:	68bb      	ldr	r3, [r7, #8]
 801891e:	8a1b      	ldrh	r3, [r3, #16]
 8018920:	4618      	mov	r0, r3
 8018922:	f000 f9ab 	bl	8018c7c <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial(config->fsk.CrcPolynomial );
 8018926:	68bb      	ldr	r3, [r7, #8]
 8018928:	899b      	ldrh	r3, [r3, #12]
 801892a:	4618      	mov	r0, r3
 801892c:	f000 f986 	bl	8018c3c <SUBGRF_SetCrcPolynomial>
        break;
 8018930:	e0a6      	b.n	8018a80 <RadioSetTxGenericConfig+0x430>
 8018932:	bf00      	nop
 8018934:	20001a70 	.word	0x20001a70
 8018938:	20001a6c 	.word	0x20001a6c
 801893c:	20001acc 	.word	0x20001acc
 8018940:	20001aa8 	.word	0x20001aa8
 8018944:	20001a7e 	.word	0x20001a7e
    case GENERIC_LORA:
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8018948:	4b59      	ldr	r3, [pc, #356]	@ (8018ab0 <RadioSetTxGenericConfig+0x460>)
 801894a:	2201      	movs	r2, #1
 801894c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 8018950:	68bb      	ldr	r3, [r7, #8]
 8018952:	781a      	ldrb	r2, [r3, #0]
 8018954:	4b56      	ldr	r3, [pc, #344]	@ (8018ab0 <RadioSetTxGenericConfig+0x460>)
 8018956:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 801895a:	68bb      	ldr	r3, [r7, #8]
 801895c:	785a      	ldrb	r2, [r3, #1]
 801895e:	4b54      	ldr	r3, [pc, #336]	@ (8018ab0 <RadioSetTxGenericConfig+0x460>)
 8018960:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 8018964:	68bb      	ldr	r3, [r7, #8]
 8018966:	789a      	ldrb	r2, [r3, #2]
 8018968:	4b51      	ldr	r3, [pc, #324]	@ (8018ab0 <RadioSetTxGenericConfig+0x460>)
 801896a:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
        switch( config->lora.LowDatarateOptimize )
 801896e:	68bb      	ldr	r3, [r7, #8]
 8018970:	78db      	ldrb	r3, [r3, #3]
 8018972:	2b02      	cmp	r3, #2
 8018974:	d010      	beq.n	8018998 <RadioSetTxGenericConfig+0x348>
 8018976:	2b02      	cmp	r3, #2
 8018978:	dc20      	bgt.n	80189bc <RadioSetTxGenericConfig+0x36c>
 801897a:	2b00      	cmp	r3, #0
 801897c:	d002      	beq.n	8018984 <RadioSetTxGenericConfig+0x334>
 801897e:	2b01      	cmp	r3, #1
 8018980:	d005      	beq.n	801898e <RadioSetTxGenericConfig+0x33e>
            {
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
            }
            break;
          default:
            break;
 8018982:	e01b      	b.n	80189bc <RadioSetTxGenericConfig+0x36c>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8018984:	4b4a      	ldr	r3, [pc, #296]	@ (8018ab0 <RadioSetTxGenericConfig+0x460>)
 8018986:	2200      	movs	r2, #0
 8018988:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 801898c:	e017      	b.n	80189be <RadioSetTxGenericConfig+0x36e>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 801898e:	4b48      	ldr	r3, [pc, #288]	@ (8018ab0 <RadioSetTxGenericConfig+0x460>)
 8018990:	2201      	movs	r2, #1
 8018992:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 8018996:	e012      	b.n	80189be <RadioSetTxGenericConfig+0x36e>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 8018998:	68bb      	ldr	r3, [r7, #8]
 801899a:	781b      	ldrb	r3, [r3, #0]
 801899c:	2b0b      	cmp	r3, #11
 801899e:	d003      	beq.n	80189a8 <RadioSetTxGenericConfig+0x358>
 80189a0:	68bb      	ldr	r3, [r7, #8]
 80189a2:	781b      	ldrb	r3, [r3, #0]
 80189a4:	2b0c      	cmp	r3, #12
 80189a6:	d104      	bne.n	80189b2 <RadioSetTxGenericConfig+0x362>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 80189a8:	4b41      	ldr	r3, [pc, #260]	@ (8018ab0 <RadioSetTxGenericConfig+0x460>)
 80189aa:	2201      	movs	r2, #1
 80189ac:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 80189b0:	e005      	b.n	80189be <RadioSetTxGenericConfig+0x36e>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 80189b2:	4b3f      	ldr	r3, [pc, #252]	@ (8018ab0 <RadioSetTxGenericConfig+0x460>)
 80189b4:	2200      	movs	r2, #0
 80189b6:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 80189ba:	e000      	b.n	80189be <RadioSetTxGenericConfig+0x36e>
            break;
 80189bc:	bf00      	nop
        }

        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 80189be:	4b3c      	ldr	r3, [pc, #240]	@ (8018ab0 <RadioSetTxGenericConfig+0x460>)
 80189c0:	2201      	movs	r2, #1
 80189c2:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 80189c4:	68bb      	ldr	r3, [r7, #8]
 80189c6:	889a      	ldrh	r2, [r3, #4]
 80189c8:	4b39      	ldr	r3, [pc, #228]	@ (8018ab0 <RadioSetTxGenericConfig+0x460>)
 80189ca:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 80189cc:	68bb      	ldr	r3, [r7, #8]
 80189ce:	799a      	ldrb	r2, [r3, #6]
 80189d0:	4b37      	ldr	r3, [pc, #220]	@ (8018ab0 <RadioSetTxGenericConfig+0x460>)
 80189d2:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 80189d4:	68bb      	ldr	r3, [r7, #8]
 80189d6:	79da      	ldrb	r2, [r3, #7]
 80189d8:	4b35      	ldr	r3, [pc, #212]	@ (8018ab0 <RadioSetTxGenericConfig+0x460>)
 80189da:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 80189de:	68bb      	ldr	r3, [r7, #8]
 80189e0:	7a1a      	ldrb	r2, [r3, #8]
 80189e2:	4b33      	ldr	r3, [pc, #204]	@ (8018ab0 <RadioSetTxGenericConfig+0x460>)
 80189e4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        RadioStandby( );
 80189e8:	f7fe ff91 	bl	801790e <RadioStandby>
        RadioSetModem( MODEM_LORA );
 80189ec:	2001      	movs	r0, #1
 80189ee:	f7fe f93b 	bl	8016c68 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80189f2:	4830      	ldr	r0, [pc, #192]	@ (8018ab4 <RadioSetTxGenericConfig+0x464>)
 80189f4:	f000 fd54 	bl	80194a0 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80189f8:	482f      	ldr	r0, [pc, #188]	@ (8018ab8 <RadioSetTxGenericConfig+0x468>)
 80189fa:	f000 fe23 	bl	8019644 <SUBGRF_SetPacketParams>

        // WORKAROUND - Modulation Quality with 500 kHz LoRa Bandwidth, see STM32WL Erratasheet
        if( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 )
 80189fe:	4b2c      	ldr	r3, [pc, #176]	@ (8018ab0 <RadioSetTxGenericConfig+0x460>)
 8018a00:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8018a04:	2b06      	cmp	r3, #6
 8018a06:	d10d      	bne.n	8018a24 <RadioSetTxGenericConfig+0x3d4>
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 8018a08:	f640 0089 	movw	r0, #2185	@ 0x889
 8018a0c:	f000 ff76 	bl	80198fc <SUBGRF_ReadRegister>
 8018a10:	4603      	mov	r3, r0
 8018a12:	f023 0304 	bic.w	r3, r3, #4
 8018a16:	b2db      	uxtb	r3, r3
 8018a18:	4619      	mov	r1, r3
 8018a1a:	f640 0089 	movw	r0, #2185	@ 0x889
 8018a1e:	f000 ff59 	bl	80198d4 <SUBGRF_WriteRegister>
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
        }
        // WORKAROUND END
        break;
 8018a22:	e02d      	b.n	8018a80 <RadioSetTxGenericConfig+0x430>
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 8018a24:	f640 0089 	movw	r0, #2185	@ 0x889
 8018a28:	f000 ff68 	bl	80198fc <SUBGRF_ReadRegister>
 8018a2c:	4603      	mov	r3, r0
 8018a2e:	f043 0304 	orr.w	r3, r3, #4
 8018a32:	b2db      	uxtb	r3, r3
 8018a34:	4619      	mov	r1, r3
 8018a36:	f640 0089 	movw	r0, #2185	@ 0x889
 8018a3a:	f000 ff4b 	bl	80198d4 <SUBGRF_WriteRegister>
        break;
 8018a3e:	e01f      	b.n	8018a80 <RadioSetTxGenericConfig+0x430>
    case GENERIC_BPSK:
        if( ( config->bpsk.BitRate == 0 ) || ( config->bpsk.BitRate > 1000 ) )
 8018a40:	68bb      	ldr	r3, [r7, #8]
 8018a42:	681b      	ldr	r3, [r3, #0]
 8018a44:	2b00      	cmp	r3, #0
 8018a46:	d004      	beq.n	8018a52 <RadioSetTxGenericConfig+0x402>
 8018a48:	68bb      	ldr	r3, [r7, #8]
 8018a4a:	681b      	ldr	r3, [r3, #0]
 8018a4c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8018a50:	d902      	bls.n	8018a58 <RadioSetTxGenericConfig+0x408>
        {
            return -1;
 8018a52:	f04f 33ff 	mov.w	r3, #4294967295
 8018a56:	e027      	b.n	8018aa8 <RadioSetTxGenericConfig+0x458>
        }
        RadioSetModem( MODEM_BPSK );
 8018a58:	2003      	movs	r0, #3
 8018a5a:	f7fe f905 	bl	8016c68 <RadioSetModem>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 8018a5e:	4b14      	ldr	r3, [pc, #80]	@ (8018ab0 <RadioSetTxGenericConfig+0x460>)
 8018a60:	2202      	movs	r2, #2
 8018a62:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        SubgRf.ModulationParams.Params.Bpsk.BitRate = config->bpsk.BitRate;
 8018a66:	68bb      	ldr	r3, [r7, #8]
 8018a68:	681b      	ldr	r3, [r3, #0]
 8018a6a:	4a11      	ldr	r2, [pc, #68]	@ (8018ab0 <RadioSetTxGenericConfig+0x460>)
 8018a6c:	6493      	str	r3, [r2, #72]	@ 0x48
        SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 8018a6e:	4b10      	ldr	r3, [pc, #64]	@ (8018ab0 <RadioSetTxGenericConfig+0x460>)
 8018a70:	2216      	movs	r2, #22
 8018a72:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8018a76:	480f      	ldr	r0, [pc, #60]	@ (8018ab4 <RadioSetTxGenericConfig+0x464>)
 8018a78:	f000 fd12 	bl	80194a0 <SUBGRF_SetModulationParams>
        break;
 8018a7c:	e000      	b.n	8018a80 <RadioSetTxGenericConfig+0x430>
    default:
        break;
 8018a7e:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 8018a80:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8018a84:	4618      	mov	r0, r3
 8018a86:	f001 f841 	bl	8019b0c <SUBGRF_SetRfTxPower>
 8018a8a:	4603      	mov	r3, r0
 8018a8c:	461a      	mov	r2, r3
 8018a8e:	4b08      	ldr	r3, [pc, #32]	@ (8018ab0 <RadioSetTxGenericConfig+0x460>)
 8018a90:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 8018a94:	4b06      	ldr	r3, [pc, #24]	@ (8018ab0 <RadioSetTxGenericConfig+0x460>)
 8018a96:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8018a9a:	4618      	mov	r0, r3
 8018a9c:	f001 fa05 	bl	8019eaa <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 8018aa0:	4a03      	ldr	r2, [pc, #12]	@ (8018ab0 <RadioSetTxGenericConfig+0x460>)
 8018aa2:	687b      	ldr	r3, [r7, #4]
 8018aa4:	6053      	str	r3, [r2, #4]
    return 0;
 8018aa6:	2300      	movs	r3, #0
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 8018aa8:	4618      	mov	r0, r3
 8018aaa:	3738      	adds	r7, #56	@ 0x38
 8018aac:	46bd      	mov	sp, r7
 8018aae:	bd80      	pop	{r7, pc}
 8018ab0:	20001a70 	.word	0x20001a70
 8018ab4:	20001aa8 	.word	0x20001aa8
 8018ab8:	20001a7e 	.word	0x20001a7e

08018abc <SUBGRF_Init>:
static void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size );

/* Exported functions ---------------------------------------------------------*/
void SUBGRF_Init( DioIrqHandler dioIrq )
{
 8018abc:	b580      	push	{r7, lr}
 8018abe:	b084      	sub	sp, #16
 8018ac0:	af00      	add	r7, sp, #0
 8018ac2:	6078      	str	r0, [r7, #4]
    if ( dioIrq != NULL)
 8018ac4:	687b      	ldr	r3, [r7, #4]
 8018ac6:	2b00      	cmp	r3, #0
 8018ac8:	d002      	beq.n	8018ad0 <SUBGRF_Init+0x14>
    {
        RadioOnDioIrqCb = dioIrq;
 8018aca:	4a1a      	ldr	r2, [pc, #104]	@ (8018b34 <SUBGRF_Init+0x78>)
 8018acc:	687b      	ldr	r3, [r7, #4]
 8018ace:	6013      	str	r3, [r2, #0]
    }

    RADIO_INIT();
 8018ad0:	f7e8 ff50 	bl	8001974 <MX_SUBGHZ_Init>

    /* set default SMPS current drive to default*/
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 8018ad4:	2002      	movs	r0, #2
 8018ad6:	f001 f8e5 	bl	8019ca4 <Radio_SMPS_Set>

    ImageCalibrated = false;
 8018ada:	4b17      	ldr	r3, [pc, #92]	@ (8018b38 <SUBGRF_Init+0x7c>)
 8018adc:	2200      	movs	r2, #0
 8018ade:	701a      	strb	r2, [r3, #0]

    SUBGRF_SetStandby( STDBY_RC );
 8018ae0:	2000      	movs	r0, #0
 8018ae2:	f000 f977 	bl	8018dd4 <SUBGRF_SetStandby>

    // Initialize TCXO control
    if (1U == RBI_IsTCXO() )
 8018ae6:	f7f1 fd8f 	bl	800a608 <RBI_IsTCXO>
 8018aea:	4603      	mov	r3, r0
 8018aec:	2b01      	cmp	r3, #1
 8018aee:	d10e      	bne.n	8018b0e <SUBGRF_Init+0x52>
    {
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 8018af0:	2140      	movs	r1, #64	@ 0x40
 8018af2:	2001      	movs	r0, #1
 8018af4:	f000 fb78 	bl	80191e8 <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 8018af8:	2100      	movs	r1, #0
 8018afa:	f640 1011 	movw	r0, #2321	@ 0x911
 8018afe:	f000 fee9 	bl	80198d4 <SUBGRF_WriteRegister>

        /*enable calibration for cut1.1 and later*/
        CalibrationParams_t calibParam;
        calibParam.Value = 0x7F;
 8018b02:	237f      	movs	r3, #127	@ 0x7f
 8018b04:	733b      	strb	r3, [r7, #12]
        SUBGRF_Calibrate( calibParam );
 8018b06:	7b38      	ldrb	r0, [r7, #12]
 8018b08:	f000 fa85 	bl	8019016 <SUBGRF_Calibrate>
 8018b0c:	e009      	b.n	8018b22 <SUBGRF_Init+0x66>
    }
    else
    {
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 8018b0e:	2120      	movs	r1, #32
 8018b10:	f640 1011 	movw	r0, #2321	@ 0x911
 8018b14:	f000 fede 	bl	80198d4 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 8018b18:	2120      	movs	r1, #32
 8018b1a:	f640 1012 	movw	r0, #2322	@ 0x912
 8018b1e:	f000 fed9 	bl	80198d4 <SUBGRF_WriteRegister>
    }
    /* Init RF Switch */
    RBI_Init();
 8018b22:	f7f1 fd55 	bl	800a5d0 <RBI_Init>

    OperatingMode = MODE_STDBY_RC;
 8018b26:	4b05      	ldr	r3, [pc, #20]	@ (8018b3c <SUBGRF_Init+0x80>)
 8018b28:	2201      	movs	r2, #1
 8018b2a:	701a      	strb	r2, [r3, #0]
}
 8018b2c:	bf00      	nop
 8018b2e:	3710      	adds	r7, #16
 8018b30:	46bd      	mov	sp, r7
 8018b32:	bd80      	pop	{r7, pc}
 8018b34:	20001b08 	.word	0x20001b08
 8018b38:	20001b04 	.word	0x20001b04
 8018b3c:	20001afc 	.word	0x20001afc

08018b40 <SUBGRF_GetOperatingMode>:

RadioOperatingModes_t SUBGRF_GetOperatingMode( void )
{
 8018b40:	b480      	push	{r7}
 8018b42:	af00      	add	r7, sp, #0
    return OperatingMode;
 8018b44:	4b02      	ldr	r3, [pc, #8]	@ (8018b50 <SUBGRF_GetOperatingMode+0x10>)
 8018b46:	781b      	ldrb	r3, [r3, #0]
}
 8018b48:	4618      	mov	r0, r3
 8018b4a:	46bd      	mov	sp, r7
 8018b4c:	bc80      	pop	{r7}
 8018b4e:	4770      	bx	lr
 8018b50:	20001afc 	.word	0x20001afc

08018b54 <SUBGRF_SetPayload>:

void SUBGRF_SetPayload( uint8_t *payload, uint8_t size )
{
 8018b54:	b580      	push	{r7, lr}
 8018b56:	b082      	sub	sp, #8
 8018b58:	af00      	add	r7, sp, #0
 8018b5a:	6078      	str	r0, [r7, #4]
 8018b5c:	460b      	mov	r3, r1
 8018b5e:	70fb      	strb	r3, [r7, #3]
    SUBGRF_WriteBuffer( 0x00, payload, size );
 8018b60:	78fb      	ldrb	r3, [r7, #3]
 8018b62:	461a      	mov	r2, r3
 8018b64:	6879      	ldr	r1, [r7, #4]
 8018b66:	2000      	movs	r0, #0
 8018b68:	f000 ff20 	bl	80199ac <SUBGRF_WriteBuffer>
}
 8018b6c:	bf00      	nop
 8018b6e:	3708      	adds	r7, #8
 8018b70:	46bd      	mov	sp, r7
 8018b72:	bd80      	pop	{r7, pc}

08018b74 <SUBGRF_GetPayload>:

uint8_t SUBGRF_GetPayload( uint8_t *buffer, uint8_t *size,  uint8_t maxSize )
{
 8018b74:	b580      	push	{r7, lr}
 8018b76:	b086      	sub	sp, #24
 8018b78:	af00      	add	r7, sp, #0
 8018b7a:	60f8      	str	r0, [r7, #12]
 8018b7c:	60b9      	str	r1, [r7, #8]
 8018b7e:	4613      	mov	r3, r2
 8018b80:	71fb      	strb	r3, [r7, #7]
    uint8_t offset = 0;
 8018b82:	2300      	movs	r3, #0
 8018b84:	75fb      	strb	r3, [r7, #23]

    SUBGRF_GetRxBufferStatus( size, &offset );
 8018b86:	f107 0317 	add.w	r3, r7, #23
 8018b8a:	4619      	mov	r1, r3
 8018b8c:	68b8      	ldr	r0, [r7, #8]
 8018b8e:	f000 fe23 	bl	80197d8 <SUBGRF_GetRxBufferStatus>
    if( *size > maxSize )
 8018b92:	68bb      	ldr	r3, [r7, #8]
 8018b94:	781b      	ldrb	r3, [r3, #0]
 8018b96:	79fa      	ldrb	r2, [r7, #7]
 8018b98:	429a      	cmp	r2, r3
 8018b9a:	d201      	bcs.n	8018ba0 <SUBGRF_GetPayload+0x2c>
    {
        return 1;
 8018b9c:	2301      	movs	r3, #1
 8018b9e:	e007      	b.n	8018bb0 <SUBGRF_GetPayload+0x3c>
    }
    SUBGRF_ReadBuffer( offset, buffer, *size );
 8018ba0:	7df8      	ldrb	r0, [r7, #23]
 8018ba2:	68bb      	ldr	r3, [r7, #8]
 8018ba4:	781b      	ldrb	r3, [r3, #0]
 8018ba6:	461a      	mov	r2, r3
 8018ba8:	68f9      	ldr	r1, [r7, #12]
 8018baa:	f000 ff21 	bl	80199f0 <SUBGRF_ReadBuffer>

    return 0;
 8018bae:	2300      	movs	r3, #0
}
 8018bb0:	4618      	mov	r0, r3
 8018bb2:	3718      	adds	r7, #24
 8018bb4:	46bd      	mov	sp, r7
 8018bb6:	bd80      	pop	{r7, pc}

08018bb8 <SUBGRF_SendPayload>:

void SUBGRF_SendPayload( uint8_t *payload, uint8_t size, uint32_t timeout)
{
 8018bb8:	b580      	push	{r7, lr}
 8018bba:	b084      	sub	sp, #16
 8018bbc:	af00      	add	r7, sp, #0
 8018bbe:	60f8      	str	r0, [r7, #12]
 8018bc0:	460b      	mov	r3, r1
 8018bc2:	607a      	str	r2, [r7, #4]
 8018bc4:	72fb      	strb	r3, [r7, #11]
    SUBGRF_SetPayload( payload, size );
 8018bc6:	7afb      	ldrb	r3, [r7, #11]
 8018bc8:	4619      	mov	r1, r3
 8018bca:	68f8      	ldr	r0, [r7, #12]
 8018bcc:	f7ff ffc2 	bl	8018b54 <SUBGRF_SetPayload>
    SUBGRF_SetTx( timeout );
 8018bd0:	6878      	ldr	r0, [r7, #4]
 8018bd2:	f000 f91b 	bl	8018e0c <SUBGRF_SetTx>
}
 8018bd6:	bf00      	nop
 8018bd8:	3710      	adds	r7, #16
 8018bda:	46bd      	mov	sp, r7
 8018bdc:	bd80      	pop	{r7, pc}

08018bde <SUBGRF_SetSyncWord>:

uint8_t SUBGRF_SetSyncWord( uint8_t *syncWord )
{
 8018bde:	b580      	push	{r7, lr}
 8018be0:	b082      	sub	sp, #8
 8018be2:	af00      	add	r7, sp, #0
 8018be4:	6078      	str	r0, [r7, #4]
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
 8018be6:	2208      	movs	r2, #8
 8018be8:	6879      	ldr	r1, [r7, #4]
 8018bea:	f44f 60d8 	mov.w	r0, #1728	@ 0x6c0
 8018bee:	f000 fe99 	bl	8019924 <SUBGRF_WriteRegisters>
    return 0;
 8018bf2:	2300      	movs	r3, #0
}
 8018bf4:	4618      	mov	r0, r3
 8018bf6:	3708      	adds	r7, #8
 8018bf8:	46bd      	mov	sp, r7
 8018bfa:	bd80      	pop	{r7, pc}

08018bfc <SUBGRF_SetCrcSeed>:

void SUBGRF_SetCrcSeed( uint16_t seed )
{
 8018bfc:	b580      	push	{r7, lr}
 8018bfe:	b084      	sub	sp, #16
 8018c00:	af00      	add	r7, sp, #0
 8018c02:	4603      	mov	r3, r0
 8018c04:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 8018c06:	88fb      	ldrh	r3, [r7, #6]
 8018c08:	0a1b      	lsrs	r3, r3, #8
 8018c0a:	b29b      	uxth	r3, r3
 8018c0c:	b2db      	uxtb	r3, r3
 8018c0e:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( seed & 0xFF );
 8018c10:	88fb      	ldrh	r3, [r7, #6]
 8018c12:	b2db      	uxtb	r3, r3
 8018c14:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 8018c16:	f000 fb6b 	bl	80192f0 <SUBGRF_GetPacketType>
 8018c1a:	4603      	mov	r3, r0
 8018c1c:	2b00      	cmp	r3, #0
 8018c1e:	d108      	bne.n	8018c32 <SUBGRF_SetCrcSeed+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 8018c20:	f107 030c 	add.w	r3, r7, #12
 8018c24:	2202      	movs	r2, #2
 8018c26:	4619      	mov	r1, r3
 8018c28:	f240 60bc 	movw	r0, #1724	@ 0x6bc
 8018c2c:	f000 fe7a 	bl	8019924 <SUBGRF_WriteRegisters>
            break;
 8018c30:	e000      	b.n	8018c34 <SUBGRF_SetCrcSeed+0x38>

        default:
            break;
 8018c32:	bf00      	nop
    }
}
 8018c34:	bf00      	nop
 8018c36:	3710      	adds	r7, #16
 8018c38:	46bd      	mov	sp, r7
 8018c3a:	bd80      	pop	{r7, pc}

08018c3c <SUBGRF_SetCrcPolynomial>:

void SUBGRF_SetCrcPolynomial( uint16_t polynomial )
{
 8018c3c:	b580      	push	{r7, lr}
 8018c3e:	b084      	sub	sp, #16
 8018c40:	af00      	add	r7, sp, #0
 8018c42:	4603      	mov	r3, r0
 8018c44:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 8018c46:	88fb      	ldrh	r3, [r7, #6]
 8018c48:	0a1b      	lsrs	r3, r3, #8
 8018c4a:	b29b      	uxth	r3, r3
 8018c4c:	b2db      	uxtb	r3, r3
 8018c4e:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 8018c50:	88fb      	ldrh	r3, [r7, #6]
 8018c52:	b2db      	uxtb	r3, r3
 8018c54:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 8018c56:	f000 fb4b 	bl	80192f0 <SUBGRF_GetPacketType>
 8018c5a:	4603      	mov	r3, r0
 8018c5c:	2b00      	cmp	r3, #0
 8018c5e:	d108      	bne.n	8018c72 <SUBGRF_SetCrcPolynomial+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 8018c60:	f107 030c 	add.w	r3, r7, #12
 8018c64:	2202      	movs	r2, #2
 8018c66:	4619      	mov	r1, r3
 8018c68:	f240 60be 	movw	r0, #1726	@ 0x6be
 8018c6c:	f000 fe5a 	bl	8019924 <SUBGRF_WriteRegisters>
            break;
 8018c70:	e000      	b.n	8018c74 <SUBGRF_SetCrcPolynomial+0x38>

        default:
            break;
 8018c72:	bf00      	nop
    }
}
 8018c74:	bf00      	nop
 8018c76:	3710      	adds	r7, #16
 8018c78:	46bd      	mov	sp, r7
 8018c7a:	bd80      	pop	{r7, pc}

08018c7c <SUBGRF_SetWhiteningSeed>:

void SUBGRF_SetWhiteningSeed( uint16_t seed )
{
 8018c7c:	b580      	push	{r7, lr}
 8018c7e:	b084      	sub	sp, #16
 8018c80:	af00      	add	r7, sp, #0
 8018c82:	4603      	mov	r3, r0
 8018c84:	80fb      	strh	r3, [r7, #6]
    uint8_t regValue = 0;
 8018c86:	2300      	movs	r3, #0
 8018c88:	73fb      	strb	r3, [r7, #15]

    switch( SUBGRF_GetPacketType( ) )
 8018c8a:	f000 fb31 	bl	80192f0 <SUBGRF_GetPacketType>
 8018c8e:	4603      	mov	r3, r0
 8018c90:	2b00      	cmp	r3, #0
 8018c92:	d121      	bne.n	8018cd8 <SUBGRF_SetWhiteningSeed+0x5c>
    {
        case PACKET_TYPE_GFSK:
            regValue = SUBGRF_ReadRegister( REG_LR_WHITSEEDBASEADDR_MSB ) & 0xFE;
 8018c94:	f44f 60d7 	mov.w	r0, #1720	@ 0x6b8
 8018c98:	f000 fe30 	bl	80198fc <SUBGRF_ReadRegister>
 8018c9c:	4603      	mov	r3, r0
 8018c9e:	f023 0301 	bic.w	r3, r3, #1
 8018ca2:	73fb      	strb	r3, [r7, #15]
            regValue = ( ( seed >> 8 ) & 0x01 ) | regValue;
 8018ca4:	88fb      	ldrh	r3, [r7, #6]
 8018ca6:	0a1b      	lsrs	r3, r3, #8
 8018ca8:	b29b      	uxth	r3, r3
 8018caa:	b25b      	sxtb	r3, r3
 8018cac:	f003 0301 	and.w	r3, r3, #1
 8018cb0:	b25a      	sxtb	r2, r3
 8018cb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8018cb6:	4313      	orrs	r3, r2
 8018cb8:	b25b      	sxtb	r3, r3
 8018cba:	73fb      	strb	r3, [r7, #15]
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_MSB, regValue ); // only 1 bit.
 8018cbc:	7bfb      	ldrb	r3, [r7, #15]
 8018cbe:	4619      	mov	r1, r3
 8018cc0:	f44f 60d7 	mov.w	r0, #1720	@ 0x6b8
 8018cc4:	f000 fe06 	bl	80198d4 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_LSB, (uint8_t)seed );
 8018cc8:	88fb      	ldrh	r3, [r7, #6]
 8018cca:	b2db      	uxtb	r3, r3
 8018ccc:	4619      	mov	r1, r3
 8018cce:	f240 60b9 	movw	r0, #1721	@ 0x6b9
 8018cd2:	f000 fdff 	bl	80198d4 <SUBGRF_WriteRegister>
            break;
 8018cd6:	e000      	b.n	8018cda <SUBGRF_SetWhiteningSeed+0x5e>

        default:
            break;
 8018cd8:	bf00      	nop
    }
}
 8018cda:	bf00      	nop
 8018cdc:	3710      	adds	r7, #16
 8018cde:	46bd      	mov	sp, r7
 8018ce0:	bd80      	pop	{r7, pc}

08018ce2 <SUBGRF_GetRandom>:

uint32_t SUBGRF_GetRandom( void )
{
 8018ce2:	b580      	push	{r7, lr}
 8018ce4:	b082      	sub	sp, #8
 8018ce6:	af00      	add	r7, sp, #0
    uint32_t number = 0;
 8018ce8:	2300      	movs	r3, #0
 8018cea:	603b      	str	r3, [r7, #0]
    uint8_t regAnaLna = 0;
 8018cec:	2300      	movs	r3, #0
 8018cee:	71fb      	strb	r3, [r7, #7]
    uint8_t regAnaMixer = 0;
 8018cf0:	2300      	movs	r3, #0
 8018cf2:	71bb      	strb	r3, [r7, #6]

    regAnaLna = SUBGRF_ReadRegister( REG_ANA_LNA );
 8018cf4:	f640 00e2 	movw	r0, #2274	@ 0x8e2
 8018cf8:	f000 fe00 	bl	80198fc <SUBGRF_ReadRegister>
 8018cfc:	4603      	mov	r3, r0
 8018cfe:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 8018d00:	79fb      	ldrb	r3, [r7, #7]
 8018d02:	f023 0301 	bic.w	r3, r3, #1
 8018d06:	b2db      	uxtb	r3, r3
 8018d08:	4619      	mov	r1, r3
 8018d0a:	f640 00e2 	movw	r0, #2274	@ 0x8e2
 8018d0e:	f000 fde1 	bl	80198d4 <SUBGRF_WriteRegister>

    regAnaMixer = SUBGRF_ReadRegister( REG_ANA_MIXER );
 8018d12:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 8018d16:	f000 fdf1 	bl	80198fc <SUBGRF_ReadRegister>
 8018d1a:	4603      	mov	r3, r0
 8018d1c:	71bb      	strb	r3, [r7, #6]
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 8018d1e:	79bb      	ldrb	r3, [r7, #6]
 8018d20:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8018d24:	b2db      	uxtb	r3, r3
 8018d26:	4619      	mov	r1, r3
 8018d28:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 8018d2c:	f000 fdd2 	bl	80198d4 <SUBGRF_WriteRegister>

    // Set radio in continuous reception
    SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 8018d30:	f06f 407f 	mvn.w	r0, #4278190080	@ 0xff000000
 8018d34:	f000 f88a 	bl	8018e4c <SUBGRF_SetRx>

    SUBGRF_ReadRegisters( RANDOM_NUMBER_GENERATORBASEADDR, ( uint8_t* )&number, 4 );
 8018d38:	463b      	mov	r3, r7
 8018d3a:	2204      	movs	r2, #4
 8018d3c:	4619      	mov	r1, r3
 8018d3e:	f640 0019 	movw	r0, #2073	@ 0x819
 8018d42:	f000 fe11 	bl	8019968 <SUBGRF_ReadRegisters>

    SUBGRF_SetStandby( STDBY_RC );
 8018d46:	2000      	movs	r0, #0
 8018d48:	f000 f844 	bl	8018dd4 <SUBGRF_SetStandby>

    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna );
 8018d4c:	79fb      	ldrb	r3, [r7, #7]
 8018d4e:	4619      	mov	r1, r3
 8018d50:	f640 00e2 	movw	r0, #2274	@ 0x8e2
 8018d54:	f000 fdbe 	bl	80198d4 <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer );
 8018d58:	79bb      	ldrb	r3, [r7, #6]
 8018d5a:	4619      	mov	r1, r3
 8018d5c:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 8018d60:	f000 fdb8 	bl	80198d4 <SUBGRF_WriteRegister>

    return number;
 8018d64:	683b      	ldr	r3, [r7, #0]
}
 8018d66:	4618      	mov	r0, r3
 8018d68:	3708      	adds	r7, #8
 8018d6a:	46bd      	mov	sp, r7
 8018d6c:	bd80      	pop	{r7, pc}
	...

08018d70 <SUBGRF_SetSleep>:

void SUBGRF_SetSleep( SleepParams_t sleepConfig )
{
 8018d70:	b580      	push	{r7, lr}
 8018d72:	b084      	sub	sp, #16
 8018d74:	af00      	add	r7, sp, #0
 8018d76:	7138      	strb	r0, [r7, #4]
    /* switch the antenna OFF by SW */
    RBI_ConfigRFSwitch(RBI_SWITCH_OFF);
 8018d78:	2000      	movs	r0, #0
 8018d7a:	f7f1 fc30 	bl	800a5de <RBI_ConfigRFSwitch>

    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 8018d7e:	2002      	movs	r0, #2
 8018d80:	f000 ff90 	bl	8019ca4 <Radio_SMPS_Set>

    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8018d84:	793b      	ldrb	r3, [r7, #4]
 8018d86:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8018d8a:	b2db      	uxtb	r3, r3
 8018d8c:	009b      	lsls	r3, r3, #2
 8018d8e:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 8018d90:	793b      	ldrb	r3, [r7, #4]
 8018d92:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8018d96:	b2db      	uxtb	r3, r3
 8018d98:	005b      	lsls	r3, r3, #1
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8018d9a:	b25b      	sxtb	r3, r3
 8018d9c:	4313      	orrs	r3, r2
 8018d9e:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.WakeUpRTC ) );
 8018da0:	793b      	ldrb	r3, [r7, #4]
 8018da2:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8018da6:	b2db      	uxtb	r3, r3
 8018da8:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 8018daa:	4313      	orrs	r3, r2
 8018dac:	b25b      	sxtb	r3, r3
 8018dae:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8018db0:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
 8018db2:	f107 030f 	add.w	r3, r7, #15
 8018db6:	2201      	movs	r2, #1
 8018db8:	4619      	mov	r1, r3
 8018dba:	2084      	movs	r0, #132	@ 0x84
 8018dbc:	f000 fe3a 	bl	8019a34 <SUBGRF_WriteCommand>
    OperatingMode = MODE_SLEEP;
 8018dc0:	4b03      	ldr	r3, [pc, #12]	@ (8018dd0 <SUBGRF_SetSleep+0x60>)
 8018dc2:	2200      	movs	r2, #0
 8018dc4:	701a      	strb	r2, [r3, #0]
}
 8018dc6:	bf00      	nop
 8018dc8:	3710      	adds	r7, #16
 8018dca:	46bd      	mov	sp, r7
 8018dcc:	bd80      	pop	{r7, pc}
 8018dce:	bf00      	nop
 8018dd0:	20001afc 	.word	0x20001afc

08018dd4 <SUBGRF_SetStandby>:

void SUBGRF_SetStandby( RadioStandbyModes_t standbyConfig )
{
 8018dd4:	b580      	push	{r7, lr}
 8018dd6:	b082      	sub	sp, #8
 8018dd8:	af00      	add	r7, sp, #0
 8018dda:	4603      	mov	r3, r0
 8018ddc:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 8018dde:	1dfb      	adds	r3, r7, #7
 8018de0:	2201      	movs	r2, #1
 8018de2:	4619      	mov	r1, r3
 8018de4:	2080      	movs	r0, #128	@ 0x80
 8018de6:	f000 fe25 	bl	8019a34 <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 8018dea:	79fb      	ldrb	r3, [r7, #7]
 8018dec:	2b00      	cmp	r3, #0
 8018dee:	d103      	bne.n	8018df8 <SUBGRF_SetStandby+0x24>
    {
        OperatingMode = MODE_STDBY_RC;
 8018df0:	4b05      	ldr	r3, [pc, #20]	@ (8018e08 <SUBGRF_SetStandby+0x34>)
 8018df2:	2201      	movs	r2, #1
 8018df4:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        OperatingMode = MODE_STDBY_XOSC;
    }
}
 8018df6:	e002      	b.n	8018dfe <SUBGRF_SetStandby+0x2a>
        OperatingMode = MODE_STDBY_XOSC;
 8018df8:	4b03      	ldr	r3, [pc, #12]	@ (8018e08 <SUBGRF_SetStandby+0x34>)
 8018dfa:	2202      	movs	r2, #2
 8018dfc:	701a      	strb	r2, [r3, #0]
}
 8018dfe:	bf00      	nop
 8018e00:	3708      	adds	r7, #8
 8018e02:	46bd      	mov	sp, r7
 8018e04:	bd80      	pop	{r7, pc}
 8018e06:	bf00      	nop
 8018e08:	20001afc 	.word	0x20001afc

08018e0c <SUBGRF_SetTx>:
    SUBGRF_WriteCommand( RADIO_SET_FS, 0, 0 );
    OperatingMode = MODE_FS;
}

void SUBGRF_SetTx( uint32_t timeout )
{
 8018e0c:	b580      	push	{r7, lr}
 8018e0e:	b084      	sub	sp, #16
 8018e10:	af00      	add	r7, sp, #0
 8018e12:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_TX;
 8018e14:	4b0c      	ldr	r3, [pc, #48]	@ (8018e48 <SUBGRF_SetTx+0x3c>)
 8018e16:	2204      	movs	r2, #4
 8018e18:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8018e1a:	687b      	ldr	r3, [r7, #4]
 8018e1c:	0c1b      	lsrs	r3, r3, #16
 8018e1e:	b2db      	uxtb	r3, r3
 8018e20:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8018e22:	687b      	ldr	r3, [r7, #4]
 8018e24:	0a1b      	lsrs	r3, r3, #8
 8018e26:	b2db      	uxtb	r3, r3
 8018e28:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8018e2a:	687b      	ldr	r3, [r7, #4]
 8018e2c:	b2db      	uxtb	r3, r3
 8018e2e:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 8018e30:	f107 030c 	add.w	r3, r7, #12
 8018e34:	2203      	movs	r2, #3
 8018e36:	4619      	mov	r1, r3
 8018e38:	2083      	movs	r0, #131	@ 0x83
 8018e3a:	f000 fdfb 	bl	8019a34 <SUBGRF_WriteCommand>
}
 8018e3e:	bf00      	nop
 8018e40:	3710      	adds	r7, #16
 8018e42:	46bd      	mov	sp, r7
 8018e44:	bd80      	pop	{r7, pc}
 8018e46:	bf00      	nop
 8018e48:	20001afc 	.word	0x20001afc

08018e4c <SUBGRF_SetRx>:

void SUBGRF_SetRx( uint32_t timeout )
{
 8018e4c:	b580      	push	{r7, lr}
 8018e4e:	b084      	sub	sp, #16
 8018e50:	af00      	add	r7, sp, #0
 8018e52:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 8018e54:	4b0c      	ldr	r3, [pc, #48]	@ (8018e88 <SUBGRF_SetRx+0x3c>)
 8018e56:	2205      	movs	r2, #5
 8018e58:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8018e5a:	687b      	ldr	r3, [r7, #4]
 8018e5c:	0c1b      	lsrs	r3, r3, #16
 8018e5e:	b2db      	uxtb	r3, r3
 8018e60:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8018e62:	687b      	ldr	r3, [r7, #4]
 8018e64:	0a1b      	lsrs	r3, r3, #8
 8018e66:	b2db      	uxtb	r3, r3
 8018e68:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8018e6a:	687b      	ldr	r3, [r7, #4]
 8018e6c:	b2db      	uxtb	r3, r3
 8018e6e:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 8018e70:	f107 030c 	add.w	r3, r7, #12
 8018e74:	2203      	movs	r2, #3
 8018e76:	4619      	mov	r1, r3
 8018e78:	2082      	movs	r0, #130	@ 0x82
 8018e7a:	f000 fddb 	bl	8019a34 <SUBGRF_WriteCommand>
}
 8018e7e:	bf00      	nop
 8018e80:	3710      	adds	r7, #16
 8018e82:	46bd      	mov	sp, r7
 8018e84:	bd80      	pop	{r7, pc}
 8018e86:	bf00      	nop
 8018e88:	20001afc 	.word	0x20001afc

08018e8c <SUBGRF_SetRxBoosted>:

void SUBGRF_SetRxBoosted( uint32_t timeout )
{
 8018e8c:	b580      	push	{r7, lr}
 8018e8e:	b084      	sub	sp, #16
 8018e90:	af00      	add	r7, sp, #0
 8018e92:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 8018e94:	4b0e      	ldr	r3, [pc, #56]	@ (8018ed0 <SUBGRF_SetRxBoosted+0x44>)
 8018e96:	2205      	movs	r2, #5
 8018e98:	701a      	strb	r2, [r3, #0]

    /* ST_WORKAROUND_BEGIN: Sigfox patch > 0x96 replaced by 0x97 */
    SUBGRF_WriteRegister( REG_RX_GAIN, 0x97 ); // max LNA gain, increase current by ~2mA for around ~3dB in sensitivity
 8018e9a:	2197      	movs	r1, #151	@ 0x97
 8018e9c:	f640 00ac 	movw	r0, #2220	@ 0x8ac
 8018ea0:	f000 fd18 	bl	80198d4 <SUBGRF_WriteRegister>
    /* ST_WORKAROUND_END */

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8018ea4:	687b      	ldr	r3, [r7, #4]
 8018ea6:	0c1b      	lsrs	r3, r3, #16
 8018ea8:	b2db      	uxtb	r3, r3
 8018eaa:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8018eac:	687b      	ldr	r3, [r7, #4]
 8018eae:	0a1b      	lsrs	r3, r3, #8
 8018eb0:	b2db      	uxtb	r3, r3
 8018eb2:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8018eb4:	687b      	ldr	r3, [r7, #4]
 8018eb6:	b2db      	uxtb	r3, r3
 8018eb8:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 8018eba:	f107 030c 	add.w	r3, r7, #12
 8018ebe:	2203      	movs	r2, #3
 8018ec0:	4619      	mov	r1, r3
 8018ec2:	2082      	movs	r0, #130	@ 0x82
 8018ec4:	f000 fdb6 	bl	8019a34 <SUBGRF_WriteCommand>
}
 8018ec8:	bf00      	nop
 8018eca:	3710      	adds	r7, #16
 8018ecc:	46bd      	mov	sp, r7
 8018ece:	bd80      	pop	{r7, pc}
 8018ed0:	20001afc 	.word	0x20001afc

08018ed4 <SUBGRF_SetRxDutyCycle>:

void SUBGRF_SetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 8018ed4:	b580      	push	{r7, lr}
 8018ed6:	b084      	sub	sp, #16
 8018ed8:	af00      	add	r7, sp, #0
 8018eda:	6078      	str	r0, [r7, #4]
 8018edc:	6039      	str	r1, [r7, #0]
    uint8_t buf[6];

    buf[0] = ( uint8_t )( ( rxTime >> 16 ) & 0xFF );
 8018ede:	687b      	ldr	r3, [r7, #4]
 8018ee0:	0c1b      	lsrs	r3, r3, #16
 8018ee2:	b2db      	uxtb	r3, r3
 8018ee4:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( rxTime >> 8 ) & 0xFF );
 8018ee6:	687b      	ldr	r3, [r7, #4]
 8018ee8:	0a1b      	lsrs	r3, r3, #8
 8018eea:	b2db      	uxtb	r3, r3
 8018eec:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( rxTime & 0xFF );
 8018eee:	687b      	ldr	r3, [r7, #4]
 8018ef0:	b2db      	uxtb	r3, r3
 8018ef2:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( ( sleepTime >> 16 ) & 0xFF );
 8018ef4:	683b      	ldr	r3, [r7, #0]
 8018ef6:	0c1b      	lsrs	r3, r3, #16
 8018ef8:	b2db      	uxtb	r3, r3
 8018efa:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 8018efc:	683b      	ldr	r3, [r7, #0]
 8018efe:	0a1b      	lsrs	r3, r3, #8
 8018f00:	b2db      	uxtb	r3, r3
 8018f02:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( sleepTime & 0xFF );
 8018f04:	683b      	ldr	r3, [r7, #0]
 8018f06:	b2db      	uxtb	r3, r3
 8018f08:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_RXDUTYCYCLE, buf, 6 );
 8018f0a:	f107 0308 	add.w	r3, r7, #8
 8018f0e:	2206      	movs	r2, #6
 8018f10:	4619      	mov	r1, r3
 8018f12:	2094      	movs	r0, #148	@ 0x94
 8018f14:	f000 fd8e 	bl	8019a34 <SUBGRF_WriteCommand>
    OperatingMode = MODE_RX_DC;
 8018f18:	4b03      	ldr	r3, [pc, #12]	@ (8018f28 <SUBGRF_SetRxDutyCycle+0x54>)
 8018f1a:	2206      	movs	r2, #6
 8018f1c:	701a      	strb	r2, [r3, #0]
}
 8018f1e:	bf00      	nop
 8018f20:	3710      	adds	r7, #16
 8018f22:	46bd      	mov	sp, r7
 8018f24:	bd80      	pop	{r7, pc}
 8018f26:	bf00      	nop
 8018f28:	20001afc 	.word	0x20001afc

08018f2c <SUBGRF_SetCad>:

void SUBGRF_SetCad( void )
{
 8018f2c:	b580      	push	{r7, lr}
 8018f2e:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_CAD, 0, 0 );
 8018f30:	2200      	movs	r2, #0
 8018f32:	2100      	movs	r1, #0
 8018f34:	20c5      	movs	r0, #197	@ 0xc5
 8018f36:	f000 fd7d 	bl	8019a34 <SUBGRF_WriteCommand>
    OperatingMode = MODE_CAD;
 8018f3a:	4b02      	ldr	r3, [pc, #8]	@ (8018f44 <SUBGRF_SetCad+0x18>)
 8018f3c:	2207      	movs	r2, #7
 8018f3e:	701a      	strb	r2, [r3, #0]
}
 8018f40:	bf00      	nop
 8018f42:	bd80      	pop	{r7, pc}
 8018f44:	20001afc 	.word	0x20001afc

08018f48 <SUBGRF_SetTxContinuousWave>:

void SUBGRF_SetTxContinuousWave( void )
{
 8018f48:	b580      	push	{r7, lr}
 8018f4a:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSWAVE, 0, 0 );
 8018f4c:	2200      	movs	r2, #0
 8018f4e:	2100      	movs	r1, #0
 8018f50:	20d1      	movs	r0, #209	@ 0xd1
 8018f52:	f000 fd6f 	bl	8019a34 <SUBGRF_WriteCommand>
}
 8018f56:	bf00      	nop
 8018f58:	bd80      	pop	{r7, pc}

08018f5a <SUBGRF_SetTxInfinitePreamble>:

void SUBGRF_SetTxInfinitePreamble( void )
{
 8018f5a:	b580      	push	{r7, lr}
 8018f5c:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
 8018f5e:	2200      	movs	r2, #0
 8018f60:	2100      	movs	r1, #0
 8018f62:	20d2      	movs	r0, #210	@ 0xd2
 8018f64:	f000 fd66 	bl	8019a34 <SUBGRF_WriteCommand>
}
 8018f68:	bf00      	nop
 8018f6a:	bd80      	pop	{r7, pc}

08018f6c <SUBGRF_SetStopRxTimerOnPreambleDetect>:

void SUBGRF_SetStopRxTimerOnPreambleDetect( bool enable )
{
 8018f6c:	b580      	push	{r7, lr}
 8018f6e:	b082      	sub	sp, #8
 8018f70:	af00      	add	r7, sp, #0
 8018f72:	4603      	mov	r3, r0
 8018f74:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 8018f76:	1dfb      	adds	r3, r7, #7
 8018f78:	2201      	movs	r2, #1
 8018f7a:	4619      	mov	r1, r3
 8018f7c:	209f      	movs	r0, #159	@ 0x9f
 8018f7e:	f000 fd59 	bl	8019a34 <SUBGRF_WriteCommand>
}
 8018f82:	bf00      	nop
 8018f84:	3708      	adds	r7, #8
 8018f86:	46bd      	mov	sp, r7
 8018f88:	bd80      	pop	{r7, pc}

08018f8a <SUBGRF_SetLoRaSymbNumTimeout>:

void SUBGRF_SetLoRaSymbNumTimeout( uint8_t symbNum )
{
 8018f8a:	b580      	push	{r7, lr}
 8018f8c:	b084      	sub	sp, #16
 8018f8e:	af00      	add	r7, sp, #0
 8018f90:	4603      	mov	r3, r0
 8018f92:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_LORASYMBTIMEOUT, &symbNum, 1 );
 8018f94:	1dfb      	adds	r3, r7, #7
 8018f96:	2201      	movs	r2, #1
 8018f98:	4619      	mov	r1, r3
 8018f9a:	20a0      	movs	r0, #160	@ 0xa0
 8018f9c:	f000 fd4a 	bl	8019a34 <SUBGRF_WriteCommand>

    if( symbNum >= 64 )
 8018fa0:	79fb      	ldrb	r3, [r7, #7]
 8018fa2:	2b3f      	cmp	r3, #63	@ 0x3f
 8018fa4:	d91c      	bls.n	8018fe0 <SUBGRF_SetLoRaSymbNumTimeout+0x56>
    {
        uint8_t mant = symbNum >> 1;
 8018fa6:	79fb      	ldrb	r3, [r7, #7]
 8018fa8:	085b      	lsrs	r3, r3, #1
 8018faa:	73fb      	strb	r3, [r7, #15]
        uint8_t exp  = 0;
 8018fac:	2300      	movs	r3, #0
 8018fae:	73bb      	strb	r3, [r7, #14]
        uint8_t reg  = 0;
 8018fb0:	2300      	movs	r3, #0
 8018fb2:	737b      	strb	r3, [r7, #13]

        while( mant > 31 )
 8018fb4:	e005      	b.n	8018fc2 <SUBGRF_SetLoRaSymbNumTimeout+0x38>
        {
            mant >>= 2;
 8018fb6:	7bfb      	ldrb	r3, [r7, #15]
 8018fb8:	089b      	lsrs	r3, r3, #2
 8018fba:	73fb      	strb	r3, [r7, #15]
            exp++;
 8018fbc:	7bbb      	ldrb	r3, [r7, #14]
 8018fbe:	3301      	adds	r3, #1
 8018fc0:	73bb      	strb	r3, [r7, #14]
        while( mant > 31 )
 8018fc2:	7bfb      	ldrb	r3, [r7, #15]
 8018fc4:	2b1f      	cmp	r3, #31
 8018fc6:	d8f6      	bhi.n	8018fb6 <SUBGRF_SetLoRaSymbNumTimeout+0x2c>
        }

        reg = exp + ( mant << 3 );
 8018fc8:	7bfb      	ldrb	r3, [r7, #15]
 8018fca:	00db      	lsls	r3, r3, #3
 8018fcc:	b2da      	uxtb	r2, r3
 8018fce:	7bbb      	ldrb	r3, [r7, #14]
 8018fd0:	4413      	add	r3, r2
 8018fd2:	737b      	strb	r3, [r7, #13]
        SUBGRF_WriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
 8018fd4:	7b7b      	ldrb	r3, [r7, #13]
 8018fd6:	4619      	mov	r1, r3
 8018fd8:	f240 7006 	movw	r0, #1798	@ 0x706
 8018fdc:	f000 fc7a 	bl	80198d4 <SUBGRF_WriteRegister>
    }
}
 8018fe0:	bf00      	nop
 8018fe2:	3710      	adds	r7, #16
 8018fe4:	46bd      	mov	sp, r7
 8018fe6:	bd80      	pop	{r7, pc}

08018fe8 <SUBGRF_SetRegulatorMode>:

void SUBGRF_SetRegulatorMode( void )
{
 8018fe8:	b580      	push	{r7, lr}
 8018fea:	b082      	sub	sp, #8
 8018fec:	af00      	add	r7, sp, #0
    /* ST_WORKAROUND_BEGIN: Get RegulatorMode value from RBI */
    RadioRegulatorMode_t mode;

    if ( ( 1UL == RBI_IsDCDC() ) && ( 1UL == DCDC_ENABLE ) )
 8018fee:	f7f1 fb12 	bl	800a616 <RBI_IsDCDC>
 8018ff2:	4603      	mov	r3, r0
 8018ff4:	2b01      	cmp	r3, #1
 8018ff6:	d102      	bne.n	8018ffe <SUBGRF_SetRegulatorMode+0x16>
    {
        mode = USE_DCDC ;
 8018ff8:	2301      	movs	r3, #1
 8018ffa:	71fb      	strb	r3, [r7, #7]
 8018ffc:	e001      	b.n	8019002 <SUBGRF_SetRegulatorMode+0x1a>
    }
    else
    {
        mode = USE_LDO ;
 8018ffe:	2300      	movs	r3, #0
 8019000:	71fb      	strb	r3, [r7, #7]
    }
    /* ST_WORKAROUND_END */
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 8019002:	1dfb      	adds	r3, r7, #7
 8019004:	2201      	movs	r2, #1
 8019006:	4619      	mov	r1, r3
 8019008:	2096      	movs	r0, #150	@ 0x96
 801900a:	f000 fd13 	bl	8019a34 <SUBGRF_WriteCommand>
}
 801900e:	bf00      	nop
 8019010:	3708      	adds	r7, #8
 8019012:	46bd      	mov	sp, r7
 8019014:	bd80      	pop	{r7, pc}

08019016 <SUBGRF_Calibrate>:

void SUBGRF_Calibrate( CalibrationParams_t calibParam )
{
 8019016:	b580      	push	{r7, lr}
 8019018:	b084      	sub	sp, #16
 801901a:	af00      	add	r7, sp, #0
 801901c:	7138      	strb	r0, [r7, #4]
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 801901e:	793b      	ldrb	r3, [r7, #4]
 8019020:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8019024:	b2db      	uxtb	r3, r3
 8019026:	019b      	lsls	r3, r3, #6
 8019028:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 801902a:	793b      	ldrb	r3, [r7, #4]
 801902c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8019030:	b2db      	uxtb	r3, r3
 8019032:	015b      	lsls	r3, r3, #5
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8019034:	b25b      	sxtb	r3, r3
 8019036:	4313      	orrs	r3, r2
 8019038:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 801903a:	793b      	ldrb	r3, [r7, #4]
 801903c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8019040:	b2db      	uxtb	r3, r3
 8019042:	011b      	lsls	r3, r3, #4
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 8019044:	b25b      	sxtb	r3, r3
 8019046:	4313      	orrs	r3, r2
 8019048:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 801904a:	793b      	ldrb	r3, [r7, #4]
 801904c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8019050:	b2db      	uxtb	r3, r3
 8019052:	00db      	lsls	r3, r3, #3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 8019054:	b25b      	sxtb	r3, r3
 8019056:	4313      	orrs	r3, r2
 8019058:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 801905a:	793b      	ldrb	r3, [r7, #4]
 801905c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8019060:	b2db      	uxtb	r3, r3
 8019062:	009b      	lsls	r3, r3, #2
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 8019064:	b25b      	sxtb	r3, r3
 8019066:	4313      	orrs	r3, r2
 8019068:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 801906a:	793b      	ldrb	r3, [r7, #4]
 801906c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8019070:	b2db      	uxtb	r3, r3
 8019072:	005b      	lsls	r3, r3, #1
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 8019074:	b25b      	sxtb	r3, r3
 8019076:	4313      	orrs	r3, r2
 8019078:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 801907a:	793b      	ldrb	r3, [r7, #4]
 801907c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8019080:	b2db      	uxtb	r3, r3
 8019082:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 8019084:	4313      	orrs	r3, r2
 8019086:	b25b      	sxtb	r3, r3
 8019088:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 801908a:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 801908c:	f107 030f 	add.w	r3, r7, #15
 8019090:	2201      	movs	r2, #1
 8019092:	4619      	mov	r1, r3
 8019094:	2089      	movs	r0, #137	@ 0x89
 8019096:	f000 fccd 	bl	8019a34 <SUBGRF_WriteCommand>
}
 801909a:	bf00      	nop
 801909c:	3710      	adds	r7, #16
 801909e:	46bd      	mov	sp, r7
 80190a0:	bd80      	pop	{r7, pc}
	...

080190a4 <SUBGRF_CalibrateImage>:

void SUBGRF_CalibrateImage( uint32_t freq )
{
 80190a4:	b580      	push	{r7, lr}
 80190a6:	b084      	sub	sp, #16
 80190a8:	af00      	add	r7, sp, #0
 80190aa:	6078      	str	r0, [r7, #4]
    uint8_t calFreq[2];

    if( freq > 900000000 )
 80190ac:	687b      	ldr	r3, [r7, #4]
 80190ae:	4a1b      	ldr	r2, [pc, #108]	@ (801911c <SUBGRF_CalibrateImage+0x78>)
 80190b0:	4293      	cmp	r3, r2
 80190b2:	d904      	bls.n	80190be <SUBGRF_CalibrateImage+0x1a>
    {
        calFreq[0] = 0xE1;
 80190b4:	23e1      	movs	r3, #225	@ 0xe1
 80190b6:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xE9;
 80190b8:	23e9      	movs	r3, #233	@ 0xe9
 80190ba:	737b      	strb	r3, [r7, #13]
 80190bc:	e022      	b.n	8019104 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 850000000 )
 80190be:	687b      	ldr	r3, [r7, #4]
 80190c0:	4a17      	ldr	r2, [pc, #92]	@ (8019120 <SUBGRF_CalibrateImage+0x7c>)
 80190c2:	4293      	cmp	r3, r2
 80190c4:	d904      	bls.n	80190d0 <SUBGRF_CalibrateImage+0x2c>
    {
        calFreq[0] = 0xD7;
 80190c6:	23d7      	movs	r3, #215	@ 0xd7
 80190c8:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xDB;
 80190ca:	23db      	movs	r3, #219	@ 0xdb
 80190cc:	737b      	strb	r3, [r7, #13]
 80190ce:	e019      	b.n	8019104 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 770000000 )
 80190d0:	687b      	ldr	r3, [r7, #4]
 80190d2:	4a14      	ldr	r2, [pc, #80]	@ (8019124 <SUBGRF_CalibrateImage+0x80>)
 80190d4:	4293      	cmp	r3, r2
 80190d6:	d904      	bls.n	80190e2 <SUBGRF_CalibrateImage+0x3e>
    {
        calFreq[0] = 0xC1;
 80190d8:	23c1      	movs	r3, #193	@ 0xc1
 80190da:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xC5;
 80190dc:	23c5      	movs	r3, #197	@ 0xc5
 80190de:	737b      	strb	r3, [r7, #13]
 80190e0:	e010      	b.n	8019104 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 460000000 )
 80190e2:	687b      	ldr	r3, [r7, #4]
 80190e4:	4a10      	ldr	r2, [pc, #64]	@ (8019128 <SUBGRF_CalibrateImage+0x84>)
 80190e6:	4293      	cmp	r3, r2
 80190e8:	d904      	bls.n	80190f4 <SUBGRF_CalibrateImage+0x50>
    {
        calFreq[0] = 0x75;
 80190ea:	2375      	movs	r3, #117	@ 0x75
 80190ec:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x81;
 80190ee:	2381      	movs	r3, #129	@ 0x81
 80190f0:	737b      	strb	r3, [r7, #13]
 80190f2:	e007      	b.n	8019104 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 425000000 )
 80190f4:	687b      	ldr	r3, [r7, #4]
 80190f6:	4a0d      	ldr	r2, [pc, #52]	@ (801912c <SUBGRF_CalibrateImage+0x88>)
 80190f8:	4293      	cmp	r3, r2
 80190fa:	d903      	bls.n	8019104 <SUBGRF_CalibrateImage+0x60>
    {
        calFreq[0] = 0x6B;
 80190fc:	236b      	movs	r3, #107	@ 0x6b
 80190fe:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x6F;
 8019100:	236f      	movs	r3, #111	@ 0x6f
 8019102:	737b      	strb	r3, [r7, #13]
    }
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 8019104:	f107 030c 	add.w	r3, r7, #12
 8019108:	2202      	movs	r2, #2
 801910a:	4619      	mov	r1, r3
 801910c:	2098      	movs	r0, #152	@ 0x98
 801910e:	f000 fc91 	bl	8019a34 <SUBGRF_WriteCommand>
}
 8019112:	bf00      	nop
 8019114:	3710      	adds	r7, #16
 8019116:	46bd      	mov	sp, r7
 8019118:	bd80      	pop	{r7, pc}
 801911a:	bf00      	nop
 801911c:	35a4e900 	.word	0x35a4e900
 8019120:	32a9f880 	.word	0x32a9f880
 8019124:	2de54480 	.word	0x2de54480
 8019128:	1b6b0b00 	.word	0x1b6b0b00
 801912c:	1954fc40 	.word	0x1954fc40

08019130 <SUBGRF_SetPaConfig>:

void SUBGRF_SetPaConfig( uint8_t paDutyCycle, uint8_t hpMax, uint8_t deviceSel, uint8_t paLut )
{
 8019130:	b590      	push	{r4, r7, lr}
 8019132:	b085      	sub	sp, #20
 8019134:	af00      	add	r7, sp, #0
 8019136:	4604      	mov	r4, r0
 8019138:	4608      	mov	r0, r1
 801913a:	4611      	mov	r1, r2
 801913c:	461a      	mov	r2, r3
 801913e:	4623      	mov	r3, r4
 8019140:	71fb      	strb	r3, [r7, #7]
 8019142:	4603      	mov	r3, r0
 8019144:	71bb      	strb	r3, [r7, #6]
 8019146:	460b      	mov	r3, r1
 8019148:	717b      	strb	r3, [r7, #5]
 801914a:	4613      	mov	r3, r2
 801914c:	713b      	strb	r3, [r7, #4]
    uint8_t buf[4];

    buf[0] = paDutyCycle;
 801914e:	79fb      	ldrb	r3, [r7, #7]
 8019150:	733b      	strb	r3, [r7, #12]
    buf[1] = hpMax;
 8019152:	79bb      	ldrb	r3, [r7, #6]
 8019154:	737b      	strb	r3, [r7, #13]
    buf[2] = deviceSel;
 8019156:	797b      	ldrb	r3, [r7, #5]
 8019158:	73bb      	strb	r3, [r7, #14]
    buf[3] = paLut;
 801915a:	793b      	ldrb	r3, [r7, #4]
 801915c:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 801915e:	f107 030c 	add.w	r3, r7, #12
 8019162:	2204      	movs	r2, #4
 8019164:	4619      	mov	r1, r3
 8019166:	2095      	movs	r0, #149	@ 0x95
 8019168:	f000 fc64 	bl	8019a34 <SUBGRF_WriteCommand>
}
 801916c:	bf00      	nop
 801916e:	3714      	adds	r7, #20
 8019170:	46bd      	mov	sp, r7
 8019172:	bd90      	pop	{r4, r7, pc}

08019174 <SUBGRF_SetDioIrqParams>:
{
    SUBGRF_WriteCommand( RADIO_SET_TXFALLBACKMODE, &fallbackMode, 1 );
}

void SUBGRF_SetDioIrqParams( uint16_t irqMask, uint16_t dio1Mask, uint16_t dio2Mask, uint16_t dio3Mask )
{
 8019174:	b590      	push	{r4, r7, lr}
 8019176:	b085      	sub	sp, #20
 8019178:	af00      	add	r7, sp, #0
 801917a:	4604      	mov	r4, r0
 801917c:	4608      	mov	r0, r1
 801917e:	4611      	mov	r1, r2
 8019180:	461a      	mov	r2, r3
 8019182:	4623      	mov	r3, r4
 8019184:	80fb      	strh	r3, [r7, #6]
 8019186:	4603      	mov	r3, r0
 8019188:	80bb      	strh	r3, [r7, #4]
 801918a:	460b      	mov	r3, r1
 801918c:	807b      	strh	r3, [r7, #2]
 801918e:	4613      	mov	r3, r2
 8019190:	803b      	strh	r3, [r7, #0]
    uint8_t buf[8];

    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 8019192:	88fb      	ldrh	r3, [r7, #6]
 8019194:	0a1b      	lsrs	r3, r3, #8
 8019196:	b29b      	uxth	r3, r3
 8019198:	b2db      	uxtb	r3, r3
 801919a:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 801919c:	88fb      	ldrh	r3, [r7, #6]
 801919e:	b2db      	uxtb	r3, r3
 80191a0:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 80191a2:	88bb      	ldrh	r3, [r7, #4]
 80191a4:	0a1b      	lsrs	r3, r3, #8
 80191a6:	b29b      	uxth	r3, r3
 80191a8:	b2db      	uxtb	r3, r3
 80191aa:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 80191ac:	88bb      	ldrh	r3, [r7, #4]
 80191ae:	b2db      	uxtb	r3, r3
 80191b0:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 80191b2:	887b      	ldrh	r3, [r7, #2]
 80191b4:	0a1b      	lsrs	r3, r3, #8
 80191b6:	b29b      	uxth	r3, r3
 80191b8:	b2db      	uxtb	r3, r3
 80191ba:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 80191bc:	887b      	ldrh	r3, [r7, #2]
 80191be:	b2db      	uxtb	r3, r3
 80191c0:	737b      	strb	r3, [r7, #13]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 80191c2:	883b      	ldrh	r3, [r7, #0]
 80191c4:	0a1b      	lsrs	r3, r3, #8
 80191c6:	b29b      	uxth	r3, r3
 80191c8:	b2db      	uxtb	r3, r3
 80191ca:	73bb      	strb	r3, [r7, #14]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 80191cc:	883b      	ldrh	r3, [r7, #0]
 80191ce:	b2db      	uxtb	r3, r3
 80191d0:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 80191d2:	f107 0308 	add.w	r3, r7, #8
 80191d6:	2208      	movs	r2, #8
 80191d8:	4619      	mov	r1, r3
 80191da:	2008      	movs	r0, #8
 80191dc:	f000 fc2a 	bl	8019a34 <SUBGRF_WriteCommand>
}
 80191e0:	bf00      	nop
 80191e2:	3714      	adds	r7, #20
 80191e4:	46bd      	mov	sp, r7
 80191e6:	bd90      	pop	{r4, r7, pc}

080191e8 <SUBGRF_SetTcxoMode>:
    SUBGRF_ReadCommand( RADIO_GET_IRQSTATUS, irqStatus, 2 );
    return ( irqStatus[0] << 8 ) | irqStatus[1];
}

void SUBGRF_SetTcxoMode (RadioTcxoCtrlVoltage_t tcxoVoltage, uint32_t timeout )
{
 80191e8:	b580      	push	{r7, lr}
 80191ea:	b084      	sub	sp, #16
 80191ec:	af00      	add	r7, sp, #0
 80191ee:	4603      	mov	r3, r0
 80191f0:	6039      	str	r1, [r7, #0]
 80191f2:	71fb      	strb	r3, [r7, #7]
    uint8_t buf[4];

    buf[0] = tcxoVoltage & 0x07;
 80191f4:	79fb      	ldrb	r3, [r7, #7]
 80191f6:	f003 0307 	and.w	r3, r3, #7
 80191fa:	b2db      	uxtb	r3, r3
 80191fc:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 80191fe:	683b      	ldr	r3, [r7, #0]
 8019200:	0c1b      	lsrs	r3, r3, #16
 8019202:	b2db      	uxtb	r3, r3
 8019204:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8019206:	683b      	ldr	r3, [r7, #0]
 8019208:	0a1b      	lsrs	r3, r3, #8
 801920a:	b2db      	uxtb	r3, r3
 801920c:	73bb      	strb	r3, [r7, #14]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 801920e:	683b      	ldr	r3, [r7, #0]
 8019210:	b2db      	uxtb	r3, r3
 8019212:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 8019214:	f107 030c 	add.w	r3, r7, #12
 8019218:	2204      	movs	r2, #4
 801921a:	4619      	mov	r1, r3
 801921c:	2097      	movs	r0, #151	@ 0x97
 801921e:	f000 fc09 	bl	8019a34 <SUBGRF_WriteCommand>
}
 8019222:	bf00      	nop
 8019224:	3710      	adds	r7, #16
 8019226:	46bd      	mov	sp, r7
 8019228:	bd80      	pop	{r7, pc}
	...

0801922c <SUBGRF_SetRfFrequency>:

void SUBGRF_SetRfFrequency( uint32_t frequency )
{
 801922c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8019230:	b084      	sub	sp, #16
 8019232:	af00      	add	r7, sp, #0
 8019234:	6078      	str	r0, [r7, #4]
    uint8_t buf[4];
    uint32_t chan = 0;
 8019236:	2300      	movs	r3, #0
 8019238:	60fb      	str	r3, [r7, #12]

    if( ImageCalibrated == false )
 801923a:	4b1d      	ldr	r3, [pc, #116]	@ (80192b0 <SUBGRF_SetRfFrequency+0x84>)
 801923c:	781b      	ldrb	r3, [r3, #0]
 801923e:	f083 0301 	eor.w	r3, r3, #1
 8019242:	b2db      	uxtb	r3, r3
 8019244:	2b00      	cmp	r3, #0
 8019246:	d005      	beq.n	8019254 <SUBGRF_SetRfFrequency+0x28>
    {
        SUBGRF_CalibrateImage( frequency );
 8019248:	6878      	ldr	r0, [r7, #4]
 801924a:	f7ff ff2b 	bl	80190a4 <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 801924e:	4b18      	ldr	r3, [pc, #96]	@ (80192b0 <SUBGRF_SetRfFrequency+0x84>)
 8019250:	2201      	movs	r2, #1
 8019252:	701a      	strb	r2, [r3, #0]
    }
    /* ST_WORKAROUND_BEGIN: Simplified frequency calculation */
    SX_FREQ_TO_CHANNEL(chan, frequency);
 8019254:	687b      	ldr	r3, [r7, #4]
 8019256:	2200      	movs	r2, #0
 8019258:	461c      	mov	r4, r3
 801925a:	4615      	mov	r5, r2
 801925c:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 8019260:	ea4f 6844 	mov.w	r8, r4, lsl #25
 8019264:	4a13      	ldr	r2, [pc, #76]	@ (80192b4 <SUBGRF_SetRfFrequency+0x88>)
 8019266:	f04f 0300 	mov.w	r3, #0
 801926a:	4640      	mov	r0, r8
 801926c:	4649      	mov	r1, r9
 801926e:	f7e7 fc9b 	bl	8000ba8 <__aeabi_uldivmod>
 8019272:	4602      	mov	r2, r0
 8019274:	460b      	mov	r3, r1
 8019276:	4613      	mov	r3, r2
 8019278:	60fb      	str	r3, [r7, #12]
    /* ST_WORKAROUND_END */
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 801927a:	68fb      	ldr	r3, [r7, #12]
 801927c:	0e1b      	lsrs	r3, r3, #24
 801927e:	b2db      	uxtb	r3, r3
 8019280:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 8019282:	68fb      	ldr	r3, [r7, #12]
 8019284:	0c1b      	lsrs	r3, r3, #16
 8019286:	b2db      	uxtb	r3, r3
 8019288:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 801928a:	68fb      	ldr	r3, [r7, #12]
 801928c:	0a1b      	lsrs	r3, r3, #8
 801928e:	b2db      	uxtb	r3, r3
 8019290:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( chan & 0xFF );
 8019292:	68fb      	ldr	r3, [r7, #12]
 8019294:	b2db      	uxtb	r3, r3
 8019296:	72fb      	strb	r3, [r7, #11]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 8019298:	f107 0308 	add.w	r3, r7, #8
 801929c:	2204      	movs	r2, #4
 801929e:	4619      	mov	r1, r3
 80192a0:	2086      	movs	r0, #134	@ 0x86
 80192a2:	f000 fbc7 	bl	8019a34 <SUBGRF_WriteCommand>
}
 80192a6:	bf00      	nop
 80192a8:	3710      	adds	r7, #16
 80192aa:	46bd      	mov	sp, r7
 80192ac:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80192b0:	20001b04 	.word	0x20001b04
 80192b4:	01e84800 	.word	0x01e84800

080192b8 <SUBGRF_SetPacketType>:

void SUBGRF_SetPacketType( RadioPacketTypes_t packetType )
{
 80192b8:	b580      	push	{r7, lr}
 80192ba:	b082      	sub	sp, #8
 80192bc:	af00      	add	r7, sp, #0
 80192be:	4603      	mov	r3, r0
 80192c0:	71fb      	strb	r3, [r7, #7]
    // Save packet type internally to avoid questioning the radio
    PacketType = packetType;
 80192c2:	79fa      	ldrb	r2, [r7, #7]
 80192c4:	4b09      	ldr	r3, [pc, #36]	@ (80192ec <SUBGRF_SetPacketType+0x34>)
 80192c6:	701a      	strb	r2, [r3, #0]

    if( packetType == PACKET_TYPE_GFSK )
 80192c8:	79fb      	ldrb	r3, [r7, #7]
 80192ca:	2b00      	cmp	r3, #0
 80192cc:	d104      	bne.n	80192d8 <SUBGRF_SetPacketType+0x20>
    {
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 80192ce:	2100      	movs	r1, #0
 80192d0:	f240 60ac 	movw	r0, #1708	@ 0x6ac
 80192d4:	f000 fafe 	bl	80198d4 <SUBGRF_WriteRegister>
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 80192d8:	1dfb      	adds	r3, r7, #7
 80192da:	2201      	movs	r2, #1
 80192dc:	4619      	mov	r1, r3
 80192de:	208a      	movs	r0, #138	@ 0x8a
 80192e0:	f000 fba8 	bl	8019a34 <SUBGRF_WriteCommand>
}
 80192e4:	bf00      	nop
 80192e6:	3708      	adds	r7, #8
 80192e8:	46bd      	mov	sp, r7
 80192ea:	bd80      	pop	{r7, pc}
 80192ec:	20001afd 	.word	0x20001afd

080192f0 <SUBGRF_GetPacketType>:

RadioPacketTypes_t SUBGRF_GetPacketType( void )
{
 80192f0:	b480      	push	{r7}
 80192f2:	af00      	add	r7, sp, #0
    return PacketType;
 80192f4:	4b02      	ldr	r3, [pc, #8]	@ (8019300 <SUBGRF_GetPacketType+0x10>)
 80192f6:	781b      	ldrb	r3, [r3, #0]
}
 80192f8:	4618      	mov	r0, r3
 80192fa:	46bd      	mov	sp, r7
 80192fc:	bc80      	pop	{r7}
 80192fe:	4770      	bx	lr
 8019300:	20001afd 	.word	0x20001afd

08019304 <SUBGRF_SetTxParams>:

void SUBGRF_SetTxParams( uint8_t paSelect, int8_t power, RadioRampTimes_t rampTime )
{
 8019304:	b580      	push	{r7, lr}
 8019306:	b084      	sub	sp, #16
 8019308:	af00      	add	r7, sp, #0
 801930a:	4603      	mov	r3, r0
 801930c:	71fb      	strb	r3, [r7, #7]
 801930e:	460b      	mov	r3, r1
 8019310:	71bb      	strb	r3, [r7, #6]
 8019312:	4613      	mov	r3, r2
 8019314:	717b      	strb	r3, [r7, #5]
    uint8_t buf[2];
    int32_t max_power;

    if (paSelect == RFO_LP)
 8019316:	79fb      	ldrb	r3, [r7, #7]
 8019318:	2b01      	cmp	r3, #1
 801931a:	d149      	bne.n	80193b0 <SUBGRF_SetTxParams+0xac>
    {
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_LP_MAXPOWER);
 801931c:	2000      	movs	r0, #0
 801931e:	f7f1 f981 	bl	800a624 <RBI_GetRFOMaxPowerConfig>
 8019322:	60f8      	str	r0, [r7, #12]
        if (power >  max_power)
 8019324:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8019328:	68fa      	ldr	r2, [r7, #12]
 801932a:	429a      	cmp	r2, r3
 801932c:	da01      	bge.n	8019332 <SUBGRF_SetTxParams+0x2e>
        {
          power = max_power;
 801932e:	68fb      	ldr	r3, [r7, #12]
 8019330:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 14)
 8019332:	68fb      	ldr	r3, [r7, #12]
 8019334:	2b0e      	cmp	r3, #14
 8019336:	d10e      	bne.n	8019356 <SUBGRF_SetTxParams+0x52>
        {
            SUBGRF_SetPaConfig(0x04, 0x00, 0x01, 0x01);
 8019338:	2301      	movs	r3, #1
 801933a:	2201      	movs	r2, #1
 801933c:	2100      	movs	r1, #0
 801933e:	2004      	movs	r0, #4
 8019340:	f7ff fef6 	bl	8019130 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 8019344:	79ba      	ldrb	r2, [r7, #6]
 8019346:	68fb      	ldr	r3, [r7, #12]
 8019348:	b2db      	uxtb	r3, r3
 801934a:	1ad3      	subs	r3, r2, r3
 801934c:	b2db      	uxtb	r3, r3
 801934e:	330e      	adds	r3, #14
 8019350:	b2db      	uxtb	r3, r3
 8019352:	71bb      	strb	r3, [r7, #6]
 8019354:	e01f      	b.n	8019396 <SUBGRF_SetTxParams+0x92>
        }
        else if (max_power == 10)
 8019356:	68fb      	ldr	r3, [r7, #12]
 8019358:	2b0a      	cmp	r3, #10
 801935a:	d10e      	bne.n	801937a <SUBGRF_SetTxParams+0x76>
        {
            SUBGRF_SetPaConfig(0x01, 0x00, 0x01, 0x01);
 801935c:	2301      	movs	r3, #1
 801935e:	2201      	movs	r2, #1
 8019360:	2100      	movs	r1, #0
 8019362:	2001      	movs	r0, #1
 8019364:	f7ff fee4 	bl	8019130 <SUBGRF_SetPaConfig>
            power = 0x0D - (max_power - power);
 8019368:	79ba      	ldrb	r2, [r7, #6]
 801936a:	68fb      	ldr	r3, [r7, #12]
 801936c:	b2db      	uxtb	r3, r3
 801936e:	1ad3      	subs	r3, r2, r3
 8019370:	b2db      	uxtb	r3, r3
 8019372:	330d      	adds	r3, #13
 8019374:	b2db      	uxtb	r3, r3
 8019376:	71bb      	strb	r3, [r7, #6]
 8019378:	e00d      	b.n	8019396 <SUBGRF_SetTxParams+0x92>
        }
        else /*default 15dBm*/
        {
            SUBGRF_SetPaConfig(0x06, 0x00, 0x01, 0x01);
 801937a:	2301      	movs	r3, #1
 801937c:	2201      	movs	r2, #1
 801937e:	2100      	movs	r1, #0
 8019380:	2006      	movs	r0, #6
 8019382:	f7ff fed5 	bl	8019130 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 8019386:	79ba      	ldrb	r2, [r7, #6]
 8019388:	68fb      	ldr	r3, [r7, #12]
 801938a:	b2db      	uxtb	r3, r3
 801938c:	1ad3      	subs	r3, r2, r3
 801938e:	b2db      	uxtb	r3, r3
 8019390:	330e      	adds	r3, #14
 8019392:	b2db      	uxtb	r3, r3
 8019394:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -17)
 8019396:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801939a:	f113 0f11 	cmn.w	r3, #17
 801939e:	da01      	bge.n	80193a4 <SUBGRF_SetTxParams+0xa0>
        {
            power = -17;
 80193a0:	23ef      	movs	r3, #239	@ 0xef
 80193a2:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x18);   /* current max is 80 mA for the whole device*/
 80193a4:	2118      	movs	r1, #24
 80193a6:	f640 00e7 	movw	r0, #2279	@ 0x8e7
 80193aa:	f000 fa93 	bl	80198d4 <SUBGRF_WriteRegister>
 80193ae:	e067      	b.n	8019480 <SUBGRF_SetTxParams+0x17c>
    }
    else /* rfo_hp*/
    {
        /* WORKAROUND - Better Resistance of the RFO High Power Tx to Antenna Mismatch, see STM32WL Erratasheet*/
        SUBGRF_WriteRegister(REG_TX_CLAMP, SUBGRF_ReadRegister(REG_TX_CLAMP) | (0x0F << 1));
 80193b0:	f640 00d8 	movw	r0, #2264	@ 0x8d8
 80193b4:	f000 faa2 	bl	80198fc <SUBGRF_ReadRegister>
 80193b8:	4603      	mov	r3, r0
 80193ba:	f043 031e 	orr.w	r3, r3, #30
 80193be:	b2db      	uxtb	r3, r3
 80193c0:	4619      	mov	r1, r3
 80193c2:	f640 00d8 	movw	r0, #2264	@ 0x8d8
 80193c6:	f000 fa85 	bl	80198d4 <SUBGRF_WriteRegister>
        /* WORKAROUND END*/
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_HP_MAXPOWER);
 80193ca:	2001      	movs	r0, #1
 80193cc:	f7f1 f92a 	bl	800a624 <RBI_GetRFOMaxPowerConfig>
 80193d0:	60f8      	str	r0, [r7, #12]
        if (power > max_power)
 80193d2:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80193d6:	68fa      	ldr	r2, [r7, #12]
 80193d8:	429a      	cmp	r2, r3
 80193da:	da01      	bge.n	80193e0 <SUBGRF_SetTxParams+0xdc>
        {
            power = max_power;
 80193dc:	68fb      	ldr	r3, [r7, #12]
 80193de:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 20)
 80193e0:	68fb      	ldr	r3, [r7, #12]
 80193e2:	2b14      	cmp	r3, #20
 80193e4:	d10e      	bne.n	8019404 <SUBGRF_SetTxParams+0x100>
        {
            SUBGRF_SetPaConfig(0x03, 0x05, 0x00, 0x01);
 80193e6:	2301      	movs	r3, #1
 80193e8:	2200      	movs	r2, #0
 80193ea:	2105      	movs	r1, #5
 80193ec:	2003      	movs	r0, #3
 80193ee:	f7ff fe9f 	bl	8019130 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 80193f2:	79ba      	ldrb	r2, [r7, #6]
 80193f4:	68fb      	ldr	r3, [r7, #12]
 80193f6:	b2db      	uxtb	r3, r3
 80193f8:	1ad3      	subs	r3, r2, r3
 80193fa:	b2db      	uxtb	r3, r3
 80193fc:	3316      	adds	r3, #22
 80193fe:	b2db      	uxtb	r3, r3
 8019400:	71bb      	strb	r3, [r7, #6]
 8019402:	e031      	b.n	8019468 <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 17)
 8019404:	68fb      	ldr	r3, [r7, #12]
 8019406:	2b11      	cmp	r3, #17
 8019408:	d10e      	bne.n	8019428 <SUBGRF_SetTxParams+0x124>
        {
            SUBGRF_SetPaConfig(0x02, 0x03, 0x00, 0x01);
 801940a:	2301      	movs	r3, #1
 801940c:	2200      	movs	r2, #0
 801940e:	2103      	movs	r1, #3
 8019410:	2002      	movs	r0, #2
 8019412:	f7ff fe8d 	bl	8019130 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 8019416:	79ba      	ldrb	r2, [r7, #6]
 8019418:	68fb      	ldr	r3, [r7, #12]
 801941a:	b2db      	uxtb	r3, r3
 801941c:	1ad3      	subs	r3, r2, r3
 801941e:	b2db      	uxtb	r3, r3
 8019420:	3316      	adds	r3, #22
 8019422:	b2db      	uxtb	r3, r3
 8019424:	71bb      	strb	r3, [r7, #6]
 8019426:	e01f      	b.n	8019468 <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 14)
 8019428:	68fb      	ldr	r3, [r7, #12]
 801942a:	2b0e      	cmp	r3, #14
 801942c:	d10e      	bne.n	801944c <SUBGRF_SetTxParams+0x148>
        {
            SUBGRF_SetPaConfig(0x02, 0x02, 0x00, 0x01);
 801942e:	2301      	movs	r3, #1
 8019430:	2200      	movs	r2, #0
 8019432:	2102      	movs	r1, #2
 8019434:	2002      	movs	r0, #2
 8019436:	f7ff fe7b 	bl	8019130 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 801943a:	79ba      	ldrb	r2, [r7, #6]
 801943c:	68fb      	ldr	r3, [r7, #12]
 801943e:	b2db      	uxtb	r3, r3
 8019440:	1ad3      	subs	r3, r2, r3
 8019442:	b2db      	uxtb	r3, r3
 8019444:	330e      	adds	r3, #14
 8019446:	b2db      	uxtb	r3, r3
 8019448:	71bb      	strb	r3, [r7, #6]
 801944a:	e00d      	b.n	8019468 <SUBGRF_SetTxParams+0x164>
        }
        else /*22dBm*/
        {
            SUBGRF_SetPaConfig(0x04, 0x07, 0x00, 0x01);
 801944c:	2301      	movs	r3, #1
 801944e:	2200      	movs	r2, #0
 8019450:	2107      	movs	r1, #7
 8019452:	2004      	movs	r0, #4
 8019454:	f7ff fe6c 	bl	8019130 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 8019458:	79ba      	ldrb	r2, [r7, #6]
 801945a:	68fb      	ldr	r3, [r7, #12]
 801945c:	b2db      	uxtb	r3, r3
 801945e:	1ad3      	subs	r3, r2, r3
 8019460:	b2db      	uxtb	r3, r3
 8019462:	3316      	adds	r3, #22
 8019464:	b2db      	uxtb	r3, r3
 8019466:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -9)
 8019468:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801946c:	f113 0f09 	cmn.w	r3, #9
 8019470:	da01      	bge.n	8019476 <SUBGRF_SetTxParams+0x172>
        {
            power = -9;
 8019472:	23f7      	movs	r3, #247	@ 0xf7
 8019474:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x38);   /*current max 160mA for the whole device*/
 8019476:	2138      	movs	r1, #56	@ 0x38
 8019478:	f640 00e7 	movw	r0, #2279	@ 0x8e7
 801947c:	f000 fa2a 	bl	80198d4 <SUBGRF_WriteRegister>
    }
    buf[0] = power;
 8019480:	79bb      	ldrb	r3, [r7, #6]
 8019482:	723b      	strb	r3, [r7, #8]
    buf[1] = (uint8_t)rampTime;
 8019484:	797b      	ldrb	r3, [r7, #5]
 8019486:	727b      	strb	r3, [r7, #9]
    SUBGRF_WriteCommand(RADIO_SET_TXPARAMS, buf, 2);
 8019488:	f107 0308 	add.w	r3, r7, #8
 801948c:	2202      	movs	r2, #2
 801948e:	4619      	mov	r1, r3
 8019490:	208e      	movs	r0, #142	@ 0x8e
 8019492:	f000 facf 	bl	8019a34 <SUBGRF_WriteCommand>
}
 8019496:	bf00      	nop
 8019498:	3710      	adds	r7, #16
 801949a:	46bd      	mov	sp, r7
 801949c:	bd80      	pop	{r7, pc}
	...

080194a0 <SUBGRF_SetModulationParams>:

void SUBGRF_SetModulationParams( ModulationParams_t *modulationParams )
{
 80194a0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80194a4:	b086      	sub	sp, #24
 80194a6:	af00      	add	r7, sp, #0
 80194a8:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint32_t tempVal = 0;
 80194aa:	2300      	movs	r3, #0
 80194ac:	617b      	str	r3, [r7, #20]
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 80194ae:	4a61      	ldr	r2, [pc, #388]	@ (8019634 <SUBGRF_SetModulationParams+0x194>)
 80194b0:	f107 0308 	add.w	r3, r7, #8
 80194b4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80194b8:	e883 0003 	stmia.w	r3, {r0, r1}

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != modulationParams->PacketType )
 80194bc:	687b      	ldr	r3, [r7, #4]
 80194be:	781a      	ldrb	r2, [r3, #0]
 80194c0:	4b5d      	ldr	r3, [pc, #372]	@ (8019638 <SUBGRF_SetModulationParams+0x198>)
 80194c2:	781b      	ldrb	r3, [r3, #0]
 80194c4:	429a      	cmp	r2, r3
 80194c6:	d004      	beq.n	80194d2 <SUBGRF_SetModulationParams+0x32>
    {
        SUBGRF_SetPacketType( modulationParams->PacketType );
 80194c8:	687b      	ldr	r3, [r7, #4]
 80194ca:	781b      	ldrb	r3, [r3, #0]
 80194cc:	4618      	mov	r0, r3
 80194ce:	f7ff fef3 	bl	80192b8 <SUBGRF_SetPacketType>
    }

    switch( modulationParams->PacketType )
 80194d2:	687b      	ldr	r3, [r7, #4]
 80194d4:	781b      	ldrb	r3, [r3, #0]
 80194d6:	2b03      	cmp	r3, #3
 80194d8:	f200 80a5 	bhi.w	8019626 <SUBGRF_SetModulationParams+0x186>
 80194dc:	a201      	add	r2, pc, #4	@ (adr r2, 80194e4 <SUBGRF_SetModulationParams+0x44>)
 80194de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80194e2:	bf00      	nop
 80194e4:	080194f5 	.word	0x080194f5
 80194e8:	080195b5 	.word	0x080195b5
 80194ec:	08019577 	.word	0x08019577
 80194f0:	080195e3 	.word	0x080195e3
    {
    case PACKET_TYPE_GFSK:
        n = 8;
 80194f4:	2308      	movs	r3, #8
 80194f6:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 80194f8:	687b      	ldr	r3, [r7, #4]
 80194fa:	685b      	ldr	r3, [r3, #4]
 80194fc:	4a4f      	ldr	r2, [pc, #316]	@ (801963c <SUBGRF_SetModulationParams+0x19c>)
 80194fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8019502:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8019504:	697b      	ldr	r3, [r7, #20]
 8019506:	0c1b      	lsrs	r3, r3, #16
 8019508:	b2db      	uxtb	r3, r3
 801950a:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 801950c:	697b      	ldr	r3, [r7, #20]
 801950e:	0a1b      	lsrs	r3, r3, #8
 8019510:	b2db      	uxtb	r3, r3
 8019512:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 8019514:	697b      	ldr	r3, [r7, #20]
 8019516:	b2db      	uxtb	r3, r3
 8019518:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 801951a:	687b      	ldr	r3, [r7, #4]
 801951c:	7b1b      	ldrb	r3, [r3, #12]
 801951e:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 8019520:	687b      	ldr	r3, [r7, #4]
 8019522:	7b5b      	ldrb	r3, [r3, #13]
 8019524:	733b      	strb	r3, [r7, #12]
        /* ST_WORKAROUND_BEGIN: Simplified frequency calculation */
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 8019526:	687b      	ldr	r3, [r7, #4]
 8019528:	689b      	ldr	r3, [r3, #8]
 801952a:	2200      	movs	r2, #0
 801952c:	461c      	mov	r4, r3
 801952e:	4615      	mov	r5, r2
 8019530:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 8019534:	ea4f 6844 	mov.w	r8, r4, lsl #25
 8019538:	4a41      	ldr	r2, [pc, #260]	@ (8019640 <SUBGRF_SetModulationParams+0x1a0>)
 801953a:	f04f 0300 	mov.w	r3, #0
 801953e:	4640      	mov	r0, r8
 8019540:	4649      	mov	r1, r9
 8019542:	f7e7 fb31 	bl	8000ba8 <__aeabi_uldivmod>
 8019546:	4602      	mov	r2, r0
 8019548:	460b      	mov	r3, r1
 801954a:	4613      	mov	r3, r2
 801954c:	617b      	str	r3, [r7, #20]
        /* ST_WORKAROUND_END */
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 801954e:	697b      	ldr	r3, [r7, #20]
 8019550:	0c1b      	lsrs	r3, r3, #16
 8019552:	b2db      	uxtb	r3, r3
 8019554:	737b      	strb	r3, [r7, #13]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 8019556:	697b      	ldr	r3, [r7, #20]
 8019558:	0a1b      	lsrs	r3, r3, #8
 801955a:	b2db      	uxtb	r3, r3
 801955c:	73bb      	strb	r3, [r7, #14]
        buf[7] = ( tempVal& 0xFF );
 801955e:	697b      	ldr	r3, [r7, #20]
 8019560:	b2db      	uxtb	r3, r3
 8019562:	73fb      	strb	r3, [r7, #15]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8019564:	7cfb      	ldrb	r3, [r7, #19]
 8019566:	b29a      	uxth	r2, r3
 8019568:	f107 0308 	add.w	r3, r7, #8
 801956c:	4619      	mov	r1, r3
 801956e:	208b      	movs	r0, #139	@ 0x8b
 8019570:	f000 fa60 	bl	8019a34 <SUBGRF_WriteCommand>
        break;
 8019574:	e058      	b.n	8019628 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_BPSK:
        n = 4;
 8019576:	2304      	movs	r3, #4
 8019578:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 801957a:	687b      	ldr	r3, [r7, #4]
 801957c:	691b      	ldr	r3, [r3, #16]
 801957e:	4a2f      	ldr	r2, [pc, #188]	@ (801963c <SUBGRF_SetModulationParams+0x19c>)
 8019580:	fbb2 f3f3 	udiv	r3, r2, r3
 8019584:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8019586:	697b      	ldr	r3, [r7, #20]
 8019588:	0c1b      	lsrs	r3, r3, #16
 801958a:	b2db      	uxtb	r3, r3
 801958c:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 801958e:	697b      	ldr	r3, [r7, #20]
 8019590:	0a1b      	lsrs	r3, r3, #8
 8019592:	b2db      	uxtb	r3, r3
 8019594:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 8019596:	697b      	ldr	r3, [r7, #20]
 8019598:	b2db      	uxtb	r3, r3
 801959a:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 801959c:	687b      	ldr	r3, [r7, #4]
 801959e:	7d1b      	ldrb	r3, [r3, #20]
 80195a0:	72fb      	strb	r3, [r7, #11]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 80195a2:	7cfb      	ldrb	r3, [r7, #19]
 80195a4:	b29a      	uxth	r2, r3
 80195a6:	f107 0308 	add.w	r3, r7, #8
 80195aa:	4619      	mov	r1, r3
 80195ac:	208b      	movs	r0, #139	@ 0x8b
 80195ae:	f000 fa41 	bl	8019a34 <SUBGRF_WriteCommand>
        break;
 80195b2:	e039      	b.n	8019628 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_LORA:
        n = 4;
 80195b4:	2304      	movs	r3, #4
 80195b6:	74fb      	strb	r3, [r7, #19]
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 80195b8:	687b      	ldr	r3, [r7, #4]
 80195ba:	7e1b      	ldrb	r3, [r3, #24]
 80195bc:	723b      	strb	r3, [r7, #8]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 80195be:	687b      	ldr	r3, [r7, #4]
 80195c0:	7e5b      	ldrb	r3, [r3, #25]
 80195c2:	727b      	strb	r3, [r7, #9]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 80195c4:	687b      	ldr	r3, [r7, #4]
 80195c6:	7e9b      	ldrb	r3, [r3, #26]
 80195c8:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 80195ca:	687b      	ldr	r3, [r7, #4]
 80195cc:	7edb      	ldrb	r3, [r3, #27]
 80195ce:	72fb      	strb	r3, [r7, #11]

        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 80195d0:	7cfb      	ldrb	r3, [r7, #19]
 80195d2:	b29a      	uxth	r2, r3
 80195d4:	f107 0308 	add.w	r3, r7, #8
 80195d8:	4619      	mov	r1, r3
 80195da:	208b      	movs	r0, #139	@ 0x8b
 80195dc:	f000 fa2a 	bl	8019a34 <SUBGRF_WriteCommand>

        break;
 80195e0:	e022      	b.n	8019628 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_GMSK:
        n = 5;
 80195e2:	2305      	movs	r3, #5
 80195e4:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 80195e6:	687b      	ldr	r3, [r7, #4]
 80195e8:	685b      	ldr	r3, [r3, #4]
 80195ea:	4a14      	ldr	r2, [pc, #80]	@ (801963c <SUBGRF_SetModulationParams+0x19c>)
 80195ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80195f0:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 80195f2:	697b      	ldr	r3, [r7, #20]
 80195f4:	0c1b      	lsrs	r3, r3, #16
 80195f6:	b2db      	uxtb	r3, r3
 80195f8:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 80195fa:	697b      	ldr	r3, [r7, #20]
 80195fc:	0a1b      	lsrs	r3, r3, #8
 80195fe:	b2db      	uxtb	r3, r3
 8019600:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 8019602:	697b      	ldr	r3, [r7, #20]
 8019604:	b2db      	uxtb	r3, r3
 8019606:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 8019608:	687b      	ldr	r3, [r7, #4]
 801960a:	7b1b      	ldrb	r3, [r3, #12]
 801960c:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 801960e:	687b      	ldr	r3, [r7, #4]
 8019610:	7b5b      	ldrb	r3, [r3, #13]
 8019612:	733b      	strb	r3, [r7, #12]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8019614:	7cfb      	ldrb	r3, [r7, #19]
 8019616:	b29a      	uxth	r2, r3
 8019618:	f107 0308 	add.w	r3, r7, #8
 801961c:	4619      	mov	r1, r3
 801961e:	208b      	movs	r0, #139	@ 0x8b
 8019620:	f000 fa08 	bl	8019a34 <SUBGRF_WriteCommand>
        break;
 8019624:	e000      	b.n	8019628 <SUBGRF_SetModulationParams+0x188>
    default:
    case PACKET_TYPE_NONE:
      break;
 8019626:	bf00      	nop
    }
}
 8019628:	bf00      	nop
 801962a:	3718      	adds	r7, #24
 801962c:	46bd      	mov	sp, r7
 801962e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8019632:	bf00      	nop
 8019634:	0801c010 	.word	0x0801c010
 8019638:	20001afd 	.word	0x20001afd
 801963c:	3d090000 	.word	0x3d090000
 8019640:	01e84800 	.word	0x01e84800

08019644 <SUBGRF_SetPacketParams>:

void SUBGRF_SetPacketParams( PacketParams_t *packetParams )
{
 8019644:	b580      	push	{r7, lr}
 8019646:	b086      	sub	sp, #24
 8019648:	af00      	add	r7, sp, #0
 801964a:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint8_t crcVal = 0;
 801964c:	2300      	movs	r3, #0
 801964e:	75bb      	strb	r3, [r7, #22]
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8019650:	4a48      	ldr	r2, [pc, #288]	@ (8019774 <SUBGRF_SetPacketParams+0x130>)
 8019652:	f107 030c 	add.w	r3, r7, #12
 8019656:	ca07      	ldmia	r2, {r0, r1, r2}
 8019658:	c303      	stmia	r3!, {r0, r1}
 801965a:	701a      	strb	r2, [r3, #0]

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != packetParams->PacketType )
 801965c:	687b      	ldr	r3, [r7, #4]
 801965e:	781a      	ldrb	r2, [r3, #0]
 8019660:	4b45      	ldr	r3, [pc, #276]	@ (8019778 <SUBGRF_SetPacketParams+0x134>)
 8019662:	781b      	ldrb	r3, [r3, #0]
 8019664:	429a      	cmp	r2, r3
 8019666:	d004      	beq.n	8019672 <SUBGRF_SetPacketParams+0x2e>
    {
        SUBGRF_SetPacketType( packetParams->PacketType );
 8019668:	687b      	ldr	r3, [r7, #4]
 801966a:	781b      	ldrb	r3, [r3, #0]
 801966c:	4618      	mov	r0, r3
 801966e:	f7ff fe23 	bl	80192b8 <SUBGRF_SetPacketType>
    }

    switch( packetParams->PacketType )
 8019672:	687b      	ldr	r3, [r7, #4]
 8019674:	781b      	ldrb	r3, [r3, #0]
 8019676:	2b03      	cmp	r3, #3
 8019678:	d878      	bhi.n	801976c <SUBGRF_SetPacketParams+0x128>
 801967a:	a201      	add	r2, pc, #4	@ (adr r2, 8019680 <SUBGRF_SetPacketParams+0x3c>)
 801967c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019680:	08019691 	.word	0x08019691
 8019684:	08019721 	.word	0x08019721
 8019688:	08019715 	.word	0x08019715
 801968c:	08019691 	.word	0x08019691
    {
    case PACKET_TYPE_GMSK:
    case PACKET_TYPE_GFSK:
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 8019690:	687b      	ldr	r3, [r7, #4]
 8019692:	7a5b      	ldrb	r3, [r3, #9]
 8019694:	2bf1      	cmp	r3, #241	@ 0xf1
 8019696:	d10a      	bne.n	80196ae <SUBGRF_SetPacketParams+0x6a>
        {
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 8019698:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 801969c:	f7ff faae 	bl	8018bfc <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 80196a0:	f248 0005 	movw	r0, #32773	@ 0x8005
 80196a4:	f7ff faca 	bl	8018c3c <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 80196a8:	2302      	movs	r3, #2
 80196aa:	75bb      	strb	r3, [r7, #22]
 80196ac:	e011      	b.n	80196d2 <SUBGRF_SetPacketParams+0x8e>
        }
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 80196ae:	687b      	ldr	r3, [r7, #4]
 80196b0:	7a5b      	ldrb	r3, [r3, #9]
 80196b2:	2bf2      	cmp	r3, #242	@ 0xf2
 80196b4:	d10a      	bne.n	80196cc <SUBGRF_SetPacketParams+0x88>
        {
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 80196b6:	f641 500f 	movw	r0, #7439	@ 0x1d0f
 80196ba:	f7ff fa9f 	bl	8018bfc <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 80196be:	f241 0021 	movw	r0, #4129	@ 0x1021
 80196c2:	f7ff fabb 	bl	8018c3c <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 80196c6:	2306      	movs	r3, #6
 80196c8:	75bb      	strb	r3, [r7, #22]
 80196ca:	e002      	b.n	80196d2 <SUBGRF_SetPacketParams+0x8e>
        }
        else
        {
            crcVal = packetParams->Params.Gfsk.CrcLength;
 80196cc:	687b      	ldr	r3, [r7, #4]
 80196ce:	7a5b      	ldrb	r3, [r3, #9]
 80196d0:	75bb      	strb	r3, [r7, #22]
        }
        n = 9;
 80196d2:	2309      	movs	r3, #9
 80196d4:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 80196d6:	687b      	ldr	r3, [r7, #4]
 80196d8:	885b      	ldrh	r3, [r3, #2]
 80196da:	0a1b      	lsrs	r3, r3, #8
 80196dc:	b29b      	uxth	r3, r3
 80196de:	b2db      	uxtb	r3, r3
 80196e0:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 80196e2:	687b      	ldr	r3, [r7, #4]
 80196e4:	885b      	ldrh	r3, [r3, #2]
 80196e6:	b2db      	uxtb	r3, r3
 80196e8:	737b      	strb	r3, [r7, #13]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 80196ea:	687b      	ldr	r3, [r7, #4]
 80196ec:	791b      	ldrb	r3, [r3, #4]
 80196ee:	73bb      	strb	r3, [r7, #14]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 80196f0:	687b      	ldr	r3, [r7, #4]
 80196f2:	795b      	ldrb	r3, [r3, #5]
 80196f4:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 80196f6:	687b      	ldr	r3, [r7, #4]
 80196f8:	799b      	ldrb	r3, [r3, #6]
 80196fa:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 80196fc:	687b      	ldr	r3, [r7, #4]
 80196fe:	79db      	ldrb	r3, [r3, #7]
 8019700:	747b      	strb	r3, [r7, #17]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 8019702:	687b      	ldr	r3, [r7, #4]
 8019704:	7a1b      	ldrb	r3, [r3, #8]
 8019706:	74bb      	strb	r3, [r7, #18]
        buf[7] = crcVal;
 8019708:	7dbb      	ldrb	r3, [r7, #22]
 801970a:	74fb      	strb	r3, [r7, #19]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 801970c:	687b      	ldr	r3, [r7, #4]
 801970e:	7a9b      	ldrb	r3, [r3, #10]
 8019710:	753b      	strb	r3, [r7, #20]
        break;
 8019712:	e022      	b.n	801975a <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_BPSK:
        n = 1;
 8019714:	2301      	movs	r3, #1
 8019716:	75fb      	strb	r3, [r7, #23]
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 8019718:	687b      	ldr	r3, [r7, #4]
 801971a:	7b1b      	ldrb	r3, [r3, #12]
 801971c:	733b      	strb	r3, [r7, #12]
        break;
 801971e:	e01c      	b.n	801975a <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_LORA:
        n = 6;
 8019720:	2306      	movs	r3, #6
 8019722:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 8019724:	687b      	ldr	r3, [r7, #4]
 8019726:	89db      	ldrh	r3, [r3, #14]
 8019728:	0a1b      	lsrs	r3, r3, #8
 801972a:	b29b      	uxth	r3, r3
 801972c:	b2db      	uxtb	r3, r3
 801972e:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 8019730:	687b      	ldr	r3, [r7, #4]
 8019732:	89db      	ldrh	r3, [r3, #14]
 8019734:	b2db      	uxtb	r3, r3
 8019736:	737b      	strb	r3, [r7, #13]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 8019738:	687b      	ldr	r3, [r7, #4]
 801973a:	7c1a      	ldrb	r2, [r3, #16]
 801973c:	4b0f      	ldr	r3, [pc, #60]	@ (801977c <SUBGRF_SetPacketParams+0x138>)
 801973e:	4611      	mov	r1, r2
 8019740:	7019      	strb	r1, [r3, #0]
 8019742:	4613      	mov	r3, r2
 8019744:	73bb      	strb	r3, [r7, #14]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 8019746:	687b      	ldr	r3, [r7, #4]
 8019748:	7c5b      	ldrb	r3, [r3, #17]
 801974a:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 801974c:	687b      	ldr	r3, [r7, #4]
 801974e:	7c9b      	ldrb	r3, [r3, #18]
 8019750:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 8019752:	687b      	ldr	r3, [r7, #4]
 8019754:	7cdb      	ldrb	r3, [r3, #19]
 8019756:	747b      	strb	r3, [r7, #17]
        break;
 8019758:	bf00      	nop
    default:
    case PACKET_TYPE_NONE:
        return;
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 801975a:	7dfb      	ldrb	r3, [r7, #23]
 801975c:	b29a      	uxth	r2, r3
 801975e:	f107 030c 	add.w	r3, r7, #12
 8019762:	4619      	mov	r1, r3
 8019764:	208c      	movs	r0, #140	@ 0x8c
 8019766:	f000 f965 	bl	8019a34 <SUBGRF_WriteCommand>
 801976a:	e000      	b.n	801976e <SUBGRF_SetPacketParams+0x12a>
        return;
 801976c:	bf00      	nop
}
 801976e:	3718      	adds	r7, #24
 8019770:	46bd      	mov	sp, r7
 8019772:	bd80      	pop	{r7, pc}
 8019774:	0801c018 	.word	0x0801c018
 8019778:	20001afd 	.word	0x20001afd
 801977c:	20001afe 	.word	0x20001afe

08019780 <SUBGRF_SetBufferBaseAddress>:
    SUBGRF_WriteCommand( RADIO_SET_CADPARAMS, buf, 7 );
    OperatingMode = MODE_CAD;
}

void SUBGRF_SetBufferBaseAddress( uint8_t txBaseAddress, uint8_t rxBaseAddress )
{
 8019780:	b580      	push	{r7, lr}
 8019782:	b084      	sub	sp, #16
 8019784:	af00      	add	r7, sp, #0
 8019786:	4603      	mov	r3, r0
 8019788:	460a      	mov	r2, r1
 801978a:	71fb      	strb	r3, [r7, #7]
 801978c:	4613      	mov	r3, r2
 801978e:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = txBaseAddress;
 8019790:	79fb      	ldrb	r3, [r7, #7]
 8019792:	733b      	strb	r3, [r7, #12]
    buf[1] = rxBaseAddress;
 8019794:	79bb      	ldrb	r3, [r7, #6]
 8019796:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 8019798:	f107 030c 	add.w	r3, r7, #12
 801979c:	2202      	movs	r2, #2
 801979e:	4619      	mov	r1, r3
 80197a0:	208f      	movs	r0, #143	@ 0x8f
 80197a2:	f000 f947 	bl	8019a34 <SUBGRF_WriteCommand>
}
 80197a6:	bf00      	nop
 80197a8:	3710      	adds	r7, #16
 80197aa:	46bd      	mov	sp, r7
 80197ac:	bd80      	pop	{r7, pc}

080197ae <SUBGRF_GetRssiInst>:
    status.Fields.ChipMode = ( stat & ( 0x07 << 4 ) ) >> 4;
    return status;
}

int8_t SUBGRF_GetRssiInst( void )
{
 80197ae:	b580      	push	{r7, lr}
 80197b0:	b082      	sub	sp, #8
 80197b2:	af00      	add	r7, sp, #0
    uint8_t buf[1];
    int8_t rssi = 0;
 80197b4:	2300      	movs	r3, #0
 80197b6:	71fb      	strb	r3, [r7, #7]

    SUBGRF_ReadCommand( RADIO_GET_RSSIINST, buf, 1 );
 80197b8:	1d3b      	adds	r3, r7, #4
 80197ba:	2201      	movs	r2, #1
 80197bc:	4619      	mov	r1, r3
 80197be:	2015      	movs	r0, #21
 80197c0:	f000 f95a 	bl	8019a78 <SUBGRF_ReadCommand>
    rssi = -buf[0] >> 1;
 80197c4:	793b      	ldrb	r3, [r7, #4]
 80197c6:	425b      	negs	r3, r3
 80197c8:	105b      	asrs	r3, r3, #1
 80197ca:	71fb      	strb	r3, [r7, #7]
    return rssi;
 80197cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 80197d0:	4618      	mov	r0, r3
 80197d2:	3708      	adds	r7, #8
 80197d4:	46bd      	mov	sp, r7
 80197d6:	bd80      	pop	{r7, pc}

080197d8 <SUBGRF_GetRxBufferStatus>:

void SUBGRF_GetRxBufferStatus( uint8_t *payloadLength, uint8_t *rxStartBufferPointer )
{
 80197d8:	b580      	push	{r7, lr}
 80197da:	b084      	sub	sp, #16
 80197dc:	af00      	add	r7, sp, #0
 80197de:	6078      	str	r0, [r7, #4]
 80197e0:	6039      	str	r1, [r7, #0]
    uint8_t status[2];

    SUBGRF_ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 80197e2:	f107 030c 	add.w	r3, r7, #12
 80197e6:	2202      	movs	r2, #2
 80197e8:	4619      	mov	r1, r3
 80197ea:	2013      	movs	r0, #19
 80197ec:	f000 f944 	bl	8019a78 <SUBGRF_ReadCommand>

    // In case of LORA fixed header, the payloadLength is obtained by reading
    // the register REG_LR_PAYLOADLENGTH
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 80197f0:	f7ff fd7e 	bl	80192f0 <SUBGRF_GetPacketType>
 80197f4:	4603      	mov	r3, r0
 80197f6:	2b01      	cmp	r3, #1
 80197f8:	d10d      	bne.n	8019816 <SUBGRF_GetRxBufferStatus+0x3e>
 80197fa:	4b0c      	ldr	r3, [pc, #48]	@ (801982c <SUBGRF_GetRxBufferStatus+0x54>)
 80197fc:	781b      	ldrb	r3, [r3, #0]
 80197fe:	b2db      	uxtb	r3, r3
 8019800:	2b01      	cmp	r3, #1
 8019802:	d108      	bne.n	8019816 <SUBGRF_GetRxBufferStatus+0x3e>
    {
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 8019804:	f240 7002 	movw	r0, #1794	@ 0x702
 8019808:	f000 f878 	bl	80198fc <SUBGRF_ReadRegister>
 801980c:	4603      	mov	r3, r0
 801980e:	461a      	mov	r2, r3
 8019810:	687b      	ldr	r3, [r7, #4]
 8019812:	701a      	strb	r2, [r3, #0]
 8019814:	e002      	b.n	801981c <SUBGRF_GetRxBufferStatus+0x44>
    }
    else
    {
        *payloadLength = status[0];
 8019816:	7b3a      	ldrb	r2, [r7, #12]
 8019818:	687b      	ldr	r3, [r7, #4]
 801981a:	701a      	strb	r2, [r3, #0]
    }
    *rxStartBufferPointer = status[1];
 801981c:	7b7a      	ldrb	r2, [r7, #13]
 801981e:	683b      	ldr	r3, [r7, #0]
 8019820:	701a      	strb	r2, [r3, #0]
}
 8019822:	bf00      	nop
 8019824:	3710      	adds	r7, #16
 8019826:	46bd      	mov	sp, r7
 8019828:	bd80      	pop	{r7, pc}
 801982a:	bf00      	nop
 801982c:	20001afe 	.word	0x20001afe

08019830 <SUBGRF_GetPacketStatus>:

void SUBGRF_GetPacketStatus( PacketStatus_t *pktStatus )
{
 8019830:	b580      	push	{r7, lr}
 8019832:	b084      	sub	sp, #16
 8019834:	af00      	add	r7, sp, #0
 8019836:	6078      	str	r0, [r7, #4]
    uint8_t status[3];

    SUBGRF_ReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 8019838:	f107 030c 	add.w	r3, r7, #12
 801983c:	2203      	movs	r2, #3
 801983e:	4619      	mov	r1, r3
 8019840:	2014      	movs	r0, #20
 8019842:	f000 f919 	bl	8019a78 <SUBGRF_ReadCommand>

    pktStatus->packetType = SUBGRF_GetPacketType( );
 8019846:	f7ff fd53 	bl	80192f0 <SUBGRF_GetPacketType>
 801984a:	4603      	mov	r3, r0
 801984c:	461a      	mov	r2, r3
 801984e:	687b      	ldr	r3, [r7, #4]
 8019850:	701a      	strb	r2, [r3, #0]
    switch( pktStatus->packetType )
 8019852:	687b      	ldr	r3, [r7, #4]
 8019854:	781b      	ldrb	r3, [r3, #0]
 8019856:	2b00      	cmp	r3, #0
 8019858:	d002      	beq.n	8019860 <SUBGRF_GetPacketStatus+0x30>
 801985a:	2b01      	cmp	r3, #1
 801985c:	d013      	beq.n	8019886 <SUBGRF_GetPacketStatus+0x56>
 801985e:	e02a      	b.n	80198b6 <SUBGRF_GetPacketStatus+0x86>
    {
        case PACKET_TYPE_GFSK:
            pktStatus->Params.Gfsk.RxStatus = status[0];
 8019860:	7b3a      	ldrb	r2, [r7, #12]
 8019862:	687b      	ldr	r3, [r7, #4]
 8019864:	711a      	strb	r2, [r3, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 8019866:	7b7b      	ldrb	r3, [r7, #13]
 8019868:	425b      	negs	r3, r3
 801986a:	105b      	asrs	r3, r3, #1
 801986c:	b25a      	sxtb	r2, r3
 801986e:	687b      	ldr	r3, [r7, #4]
 8019870:	719a      	strb	r2, [r3, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 8019872:	7bbb      	ldrb	r3, [r7, #14]
 8019874:	425b      	negs	r3, r3
 8019876:	105b      	asrs	r3, r3, #1
 8019878:	b25a      	sxtb	r2, r3
 801987a:	687b      	ldr	r3, [r7, #4]
 801987c:	715a      	strb	r2, [r3, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 801987e:	687b      	ldr	r3, [r7, #4]
 8019880:	2200      	movs	r2, #0
 8019882:	609a      	str	r2, [r3, #8]
            break;
 8019884:	e020      	b.n	80198c8 <SUBGRF_GetPacketStatus+0x98>

        case PACKET_TYPE_LORA:
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 8019886:	7b3b      	ldrb	r3, [r7, #12]
 8019888:	425b      	negs	r3, r3
 801988a:	105b      	asrs	r3, r3, #1
 801988c:	b25a      	sxtb	r2, r3
 801988e:	687b      	ldr	r3, [r7, #4]
 8019890:	731a      	strb	r2, [r3, #12]
            // Returns SNR value [dB] rounded to the nearest integer value
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 8019892:	7b7b      	ldrb	r3, [r7, #13]
 8019894:	b25b      	sxtb	r3, r3
 8019896:	3302      	adds	r3, #2
 8019898:	109b      	asrs	r3, r3, #2
 801989a:	b25a      	sxtb	r2, r3
 801989c:	687b      	ldr	r3, [r7, #4]
 801989e:	735a      	strb	r2, [r3, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 80198a0:	7bbb      	ldrb	r3, [r7, #14]
 80198a2:	425b      	negs	r3, r3
 80198a4:	105b      	asrs	r3, r3, #1
 80198a6:	b25a      	sxtb	r2, r3
 80198a8:	687b      	ldr	r3, [r7, #4]
 80198aa:	739a      	strb	r2, [r3, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 80198ac:	4b08      	ldr	r3, [pc, #32]	@ (80198d0 <SUBGRF_GetPacketStatus+0xa0>)
 80198ae:	681a      	ldr	r2, [r3, #0]
 80198b0:	687b      	ldr	r3, [r7, #4]
 80198b2:	611a      	str	r2, [r3, #16]
            break;
 80198b4:	e008      	b.n	80198c8 <SUBGRF_GetPacketStatus+0x98>

        default:
        case PACKET_TYPE_NONE:
            // In that specific case, we set everything in the pktStatus to zeros
            // and reset the packet type accordingly
            RADIO_MEMSET8( pktStatus, 0, sizeof( PacketStatus_t ) );
 80198b6:	2214      	movs	r2, #20
 80198b8:	2100      	movs	r1, #0
 80198ba:	6878      	ldr	r0, [r7, #4]
 80198bc:	f000 fbf3 	bl	801a0a6 <UTIL_MEM_set_8>
            pktStatus->packetType = PACKET_TYPE_NONE;
 80198c0:	687b      	ldr	r3, [r7, #4]
 80198c2:	220f      	movs	r2, #15
 80198c4:	701a      	strb	r2, [r3, #0]
            break;
 80198c6:	bf00      	nop
    }
}
 80198c8:	bf00      	nop
 80198ca:	3710      	adds	r7, #16
 80198cc:	46bd      	mov	sp, r7
 80198ce:	bd80      	pop	{r7, pc}
 80198d0:	20001b00 	.word	0x20001b00

080198d4 <SUBGRF_WriteRegister>:
    buf[1] = ( uint8_t )( ( uint16_t )irq & 0x00FF );
    SUBGRF_WriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
}

void SUBGRF_WriteRegister( uint16_t addr, uint8_t data )
{
 80198d4:	b580      	push	{r7, lr}
 80198d6:	b082      	sub	sp, #8
 80198d8:	af00      	add	r7, sp, #0
 80198da:	4603      	mov	r3, r0
 80198dc:	460a      	mov	r2, r1
 80198de:	80fb      	strh	r3, [r7, #6]
 80198e0:	4613      	mov	r3, r2
 80198e2:	717b      	strb	r3, [r7, #5]
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 80198e4:	1d7a      	adds	r2, r7, #5
 80198e6:	88f9      	ldrh	r1, [r7, #6]
 80198e8:	2301      	movs	r3, #1
 80198ea:	4803      	ldr	r0, [pc, #12]	@ (80198f8 <SUBGRF_WriteRegister+0x24>)
 80198ec:	f7ed fafe 	bl	8006eec <HAL_SUBGHZ_WriteRegisters>
}
 80198f0:	bf00      	nop
 80198f2:	3708      	adds	r7, #8
 80198f4:	46bd      	mov	sp, r7
 80198f6:	bd80      	pop	{r7, pc}
 80198f8:	20000210 	.word	0x20000210

080198fc <SUBGRF_ReadRegister>:

uint8_t SUBGRF_ReadRegister( uint16_t addr )
{
 80198fc:	b580      	push	{r7, lr}
 80198fe:	b084      	sub	sp, #16
 8019900:	af00      	add	r7, sp, #0
 8019902:	4603      	mov	r3, r0
 8019904:	80fb      	strh	r3, [r7, #6]
    uint8_t data;
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 8019906:	f107 020f 	add.w	r2, r7, #15
 801990a:	88f9      	ldrh	r1, [r7, #6]
 801990c:	2301      	movs	r3, #1
 801990e:	4804      	ldr	r0, [pc, #16]	@ (8019920 <SUBGRF_ReadRegister+0x24>)
 8019910:	f7ed fb4b 	bl	8006faa <HAL_SUBGHZ_ReadRegisters>
    return data;
 8019914:	7bfb      	ldrb	r3, [r7, #15]
}
 8019916:	4618      	mov	r0, r3
 8019918:	3710      	adds	r7, #16
 801991a:	46bd      	mov	sp, r7
 801991c:	bd80      	pop	{r7, pc}
 801991e:	bf00      	nop
 8019920:	20000210 	.word	0x20000210

08019924 <SUBGRF_WriteRegisters>:

void SUBGRF_WriteRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 8019924:	b580      	push	{r7, lr}
 8019926:	b086      	sub	sp, #24
 8019928:	af00      	add	r7, sp, #0
 801992a:	4603      	mov	r3, r0
 801992c:	6039      	str	r1, [r7, #0]
 801992e:	80fb      	strh	r3, [r7, #6]
 8019930:	4613      	mov	r3, r2
 8019932:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019934:	f3ef 8310 	mrs	r3, PRIMASK
 8019938:	60fb      	str	r3, [r7, #12]
  return(result);
 801993a:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801993c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801993e:	b672      	cpsid	i
}
 8019940:	bf00      	nop
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 8019942:	88bb      	ldrh	r3, [r7, #4]
 8019944:	88f9      	ldrh	r1, [r7, #6]
 8019946:	683a      	ldr	r2, [r7, #0]
 8019948:	4806      	ldr	r0, [pc, #24]	@ (8019964 <SUBGRF_WriteRegisters+0x40>)
 801994a:	f7ed facf 	bl	8006eec <HAL_SUBGHZ_WriteRegisters>
 801994e:	697b      	ldr	r3, [r7, #20]
 8019950:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019952:	693b      	ldr	r3, [r7, #16]
 8019954:	f383 8810 	msr	PRIMASK, r3
}
 8019958:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801995a:	bf00      	nop
 801995c:	3718      	adds	r7, #24
 801995e:	46bd      	mov	sp, r7
 8019960:	bd80      	pop	{r7, pc}
 8019962:	bf00      	nop
 8019964:	20000210 	.word	0x20000210

08019968 <SUBGRF_ReadRegisters>:

void SUBGRF_ReadRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 8019968:	b580      	push	{r7, lr}
 801996a:	b086      	sub	sp, #24
 801996c:	af00      	add	r7, sp, #0
 801996e:	4603      	mov	r3, r0
 8019970:	6039      	str	r1, [r7, #0]
 8019972:	80fb      	strh	r3, [r7, #6]
 8019974:	4613      	mov	r3, r2
 8019976:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019978:	f3ef 8310 	mrs	r3, PRIMASK
 801997c:	60fb      	str	r3, [r7, #12]
  return(result);
 801997e:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8019980:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8019982:	b672      	cpsid	i
}
 8019984:	bf00      	nop
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
 8019986:	88bb      	ldrh	r3, [r7, #4]
 8019988:	88f9      	ldrh	r1, [r7, #6]
 801998a:	683a      	ldr	r2, [r7, #0]
 801998c:	4806      	ldr	r0, [pc, #24]	@ (80199a8 <SUBGRF_ReadRegisters+0x40>)
 801998e:	f7ed fb0c 	bl	8006faa <HAL_SUBGHZ_ReadRegisters>
 8019992:	697b      	ldr	r3, [r7, #20]
 8019994:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019996:	693b      	ldr	r3, [r7, #16]
 8019998:	f383 8810 	msr	PRIMASK, r3
}
 801999c:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801999e:	bf00      	nop
 80199a0:	3718      	adds	r7, #24
 80199a2:	46bd      	mov	sp, r7
 80199a4:	bd80      	pop	{r7, pc}
 80199a6:	bf00      	nop
 80199a8:	20000210 	.word	0x20000210

080199ac <SUBGRF_WriteBuffer>:

void SUBGRF_WriteBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 80199ac:	b580      	push	{r7, lr}
 80199ae:	b086      	sub	sp, #24
 80199b0:	af00      	add	r7, sp, #0
 80199b2:	4603      	mov	r3, r0
 80199b4:	6039      	str	r1, [r7, #0]
 80199b6:	71fb      	strb	r3, [r7, #7]
 80199b8:	4613      	mov	r3, r2
 80199ba:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80199bc:	f3ef 8310 	mrs	r3, PRIMASK
 80199c0:	60fb      	str	r3, [r7, #12]
  return(result);
 80199c2:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 80199c4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80199c6:	b672      	cpsid	i
}
 80199c8:	bf00      	nop
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 80199ca:	79bb      	ldrb	r3, [r7, #6]
 80199cc:	b29b      	uxth	r3, r3
 80199ce:	79f9      	ldrb	r1, [r7, #7]
 80199d0:	683a      	ldr	r2, [r7, #0]
 80199d2:	4806      	ldr	r0, [pc, #24]	@ (80199ec <SUBGRF_WriteBuffer+0x40>)
 80199d4:	f7ed fbfd 	bl	80071d2 <HAL_SUBGHZ_WriteBuffer>
 80199d8:	697b      	ldr	r3, [r7, #20]
 80199da:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80199dc:	693b      	ldr	r3, [r7, #16]
 80199de:	f383 8810 	msr	PRIMASK, r3
}
 80199e2:	bf00      	nop
    CRITICAL_SECTION_END();
}
 80199e4:	bf00      	nop
 80199e6:	3718      	adds	r7, #24
 80199e8:	46bd      	mov	sp, r7
 80199ea:	bd80      	pop	{r7, pc}
 80199ec:	20000210 	.word	0x20000210

080199f0 <SUBGRF_ReadBuffer>:

void SUBGRF_ReadBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 80199f0:	b580      	push	{r7, lr}
 80199f2:	b086      	sub	sp, #24
 80199f4:	af00      	add	r7, sp, #0
 80199f6:	4603      	mov	r3, r0
 80199f8:	6039      	str	r1, [r7, #0]
 80199fa:	71fb      	strb	r3, [r7, #7]
 80199fc:	4613      	mov	r3, r2
 80199fe:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019a00:	f3ef 8310 	mrs	r3, PRIMASK
 8019a04:	60fb      	str	r3, [r7, #12]
  return(result);
 8019a06:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8019a08:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8019a0a:	b672      	cpsid	i
}
 8019a0c:	bf00      	nop
    HAL_SUBGHZ_ReadBuffer( &hsubghz, offset, buffer, size );
 8019a0e:	79bb      	ldrb	r3, [r7, #6]
 8019a10:	b29b      	uxth	r3, r3
 8019a12:	79f9      	ldrb	r1, [r7, #7]
 8019a14:	683a      	ldr	r2, [r7, #0]
 8019a16:	4806      	ldr	r0, [pc, #24]	@ (8019a30 <SUBGRF_ReadBuffer+0x40>)
 8019a18:	f7ed fc2e 	bl	8007278 <HAL_SUBGHZ_ReadBuffer>
 8019a1c:	697b      	ldr	r3, [r7, #20]
 8019a1e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019a20:	693b      	ldr	r3, [r7, #16]
 8019a22:	f383 8810 	msr	PRIMASK, r3
}
 8019a26:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8019a28:	bf00      	nop
 8019a2a:	3718      	adds	r7, #24
 8019a2c:	46bd      	mov	sp, r7
 8019a2e:	bd80      	pop	{r7, pc}
 8019a30:	20000210 	.word	0x20000210

08019a34 <SUBGRF_WriteCommand>:

void SUBGRF_WriteCommand( SUBGHZ_RadioSetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 8019a34:	b580      	push	{r7, lr}
 8019a36:	b086      	sub	sp, #24
 8019a38:	af00      	add	r7, sp, #0
 8019a3a:	4603      	mov	r3, r0
 8019a3c:	6039      	str	r1, [r7, #0]
 8019a3e:	71fb      	strb	r3, [r7, #7]
 8019a40:	4613      	mov	r3, r2
 8019a42:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019a44:	f3ef 8310 	mrs	r3, PRIMASK
 8019a48:	60fb      	str	r3, [r7, #12]
  return(result);
 8019a4a:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8019a4c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8019a4e:	b672      	cpsid	i
}
 8019a50:	bf00      	nop
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 8019a52:	88bb      	ldrh	r3, [r7, #4]
 8019a54:	79f9      	ldrb	r1, [r7, #7]
 8019a56:	683a      	ldr	r2, [r7, #0]
 8019a58:	4806      	ldr	r0, [pc, #24]	@ (8019a74 <SUBGRF_WriteCommand+0x40>)
 8019a5a:	f7ed fb07 	bl	800706c <HAL_SUBGHZ_ExecSetCmd>
 8019a5e:	697b      	ldr	r3, [r7, #20]
 8019a60:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019a62:	693b      	ldr	r3, [r7, #16]
 8019a64:	f383 8810 	msr	PRIMASK, r3
}
 8019a68:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8019a6a:	bf00      	nop
 8019a6c:	3718      	adds	r7, #24
 8019a6e:	46bd      	mov	sp, r7
 8019a70:	bd80      	pop	{r7, pc}
 8019a72:	bf00      	nop
 8019a74:	20000210 	.word	0x20000210

08019a78 <SUBGRF_ReadCommand>:

void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 8019a78:	b580      	push	{r7, lr}
 8019a7a:	b086      	sub	sp, #24
 8019a7c:	af00      	add	r7, sp, #0
 8019a7e:	4603      	mov	r3, r0
 8019a80:	6039      	str	r1, [r7, #0]
 8019a82:	71fb      	strb	r3, [r7, #7]
 8019a84:	4613      	mov	r3, r2
 8019a86:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019a88:	f3ef 8310 	mrs	r3, PRIMASK
 8019a8c:	60fb      	str	r3, [r7, #12]
  return(result);
 8019a8e:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8019a90:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8019a92:	b672      	cpsid	i
}
 8019a94:	bf00      	nop
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
 8019a96:	88bb      	ldrh	r3, [r7, #4]
 8019a98:	79f9      	ldrb	r1, [r7, #7]
 8019a9a:	683a      	ldr	r2, [r7, #0]
 8019a9c:	4806      	ldr	r0, [pc, #24]	@ (8019ab8 <SUBGRF_ReadCommand+0x40>)
 8019a9e:	f7ed fb44 	bl	800712a <HAL_SUBGHZ_ExecGetCmd>
 8019aa2:	697b      	ldr	r3, [r7, #20]
 8019aa4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019aa6:	693b      	ldr	r3, [r7, #16]
 8019aa8:	f383 8810 	msr	PRIMASK, r3
}
 8019aac:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8019aae:	bf00      	nop
 8019ab0:	3718      	adds	r7, #24
 8019ab2:	46bd      	mov	sp, r7
 8019ab4:	bd80      	pop	{r7, pc}
 8019ab6:	bf00      	nop
 8019ab8:	20000210 	.word	0x20000210

08019abc <SUBGRF_SetSwitch>:

void SUBGRF_SetSwitch( uint8_t paSelect, RFState_t rxtx )
{
 8019abc:	b580      	push	{r7, lr}
 8019abe:	b084      	sub	sp, #16
 8019ac0:	af00      	add	r7, sp, #0
 8019ac2:	4603      	mov	r3, r0
 8019ac4:	460a      	mov	r2, r1
 8019ac6:	71fb      	strb	r3, [r7, #7]
 8019ac8:	4613      	mov	r3, r2
 8019aca:	71bb      	strb	r3, [r7, #6]
    RBI_Switch_TypeDef state = RBI_SWITCH_RX;
 8019acc:	2301      	movs	r3, #1
 8019ace:	73fb      	strb	r3, [r7, #15]

    if (rxtx == RFSWITCH_TX)
 8019ad0:	79bb      	ldrb	r3, [r7, #6]
 8019ad2:	2b01      	cmp	r3, #1
 8019ad4:	d10d      	bne.n	8019af2 <SUBGRF_SetSwitch+0x36>
    {
        if (paSelect == RFO_LP)
 8019ad6:	79fb      	ldrb	r3, [r7, #7]
 8019ad8:	2b01      	cmp	r3, #1
 8019ada:	d104      	bne.n	8019ae6 <SUBGRF_SetSwitch+0x2a>
        {
            state = RBI_SWITCH_RFO_LP;
 8019adc:	2302      	movs	r3, #2
 8019ade:	73fb      	strb	r3, [r7, #15]
            Radio_SMPS_Set(SMPS_DRIVE_SETTING_MAX);
 8019ae0:	2004      	movs	r0, #4
 8019ae2:	f000 f8df 	bl	8019ca4 <Radio_SMPS_Set>
        }
        if (paSelect == RFO_HP)
 8019ae6:	79fb      	ldrb	r3, [r7, #7]
 8019ae8:	2b02      	cmp	r3, #2
 8019aea:	d107      	bne.n	8019afc <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RFO_HP;
 8019aec:	2303      	movs	r3, #3
 8019aee:	73fb      	strb	r3, [r7, #15]
 8019af0:	e004      	b.n	8019afc <SUBGRF_SetSwitch+0x40>
        }
    }
    else
    {
        if (rxtx == RFSWITCH_RX)
 8019af2:	79bb      	ldrb	r3, [r7, #6]
 8019af4:	2b00      	cmp	r3, #0
 8019af6:	d101      	bne.n	8019afc <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RX;
 8019af8:	2301      	movs	r3, #1
 8019afa:	73fb      	strb	r3, [r7, #15]
        }
    }
    RBI_ConfigRFSwitch(state);
 8019afc:	7bfb      	ldrb	r3, [r7, #15]
 8019afe:	4618      	mov	r0, r3
 8019b00:	f7f0 fd6d 	bl	800a5de <RBI_ConfigRFSwitch>
}
 8019b04:	bf00      	nop
 8019b06:	3710      	adds	r7, #16
 8019b08:	46bd      	mov	sp, r7
 8019b0a:	bd80      	pop	{r7, pc}

08019b0c <SUBGRF_SetRfTxPower>:

uint8_t SUBGRF_SetRfTxPower( int8_t power )
{
 8019b0c:	b580      	push	{r7, lr}
 8019b0e:	b084      	sub	sp, #16
 8019b10:	af00      	add	r7, sp, #0
 8019b12:	4603      	mov	r3, r0
 8019b14:	71fb      	strb	r3, [r7, #7]
    uint8_t paSelect= RFO_LP;
 8019b16:	2301      	movs	r3, #1
 8019b18:	73fb      	strb	r3, [r7, #15]

    int32_t TxConfig = RBI_GetTxConfig();
 8019b1a:	f7f0 fd6e 	bl	800a5fa <RBI_GetTxConfig>
 8019b1e:	60b8      	str	r0, [r7, #8]

    switch (TxConfig)
 8019b20:	68bb      	ldr	r3, [r7, #8]
 8019b22:	2b02      	cmp	r3, #2
 8019b24:	d016      	beq.n	8019b54 <SUBGRF_SetRfTxPower+0x48>
 8019b26:	68bb      	ldr	r3, [r7, #8]
 8019b28:	2b02      	cmp	r3, #2
 8019b2a:	dc16      	bgt.n	8019b5a <SUBGRF_SetRfTxPower+0x4e>
 8019b2c:	68bb      	ldr	r3, [r7, #8]
 8019b2e:	2b00      	cmp	r3, #0
 8019b30:	d003      	beq.n	8019b3a <SUBGRF_SetRfTxPower+0x2e>
 8019b32:	68bb      	ldr	r3, [r7, #8]
 8019b34:	2b01      	cmp	r3, #1
 8019b36:	d00a      	beq.n	8019b4e <SUBGRF_SetRfTxPower+0x42>
        {
            paSelect = RFO_HP;
            break;
        }
        default:
            break;
 8019b38:	e00f      	b.n	8019b5a <SUBGRF_SetRfTxPower+0x4e>
            if (power > 15)
 8019b3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8019b3e:	2b0f      	cmp	r3, #15
 8019b40:	dd02      	ble.n	8019b48 <SUBGRF_SetRfTxPower+0x3c>
                paSelect = RFO_HP;
 8019b42:	2302      	movs	r3, #2
 8019b44:	73fb      	strb	r3, [r7, #15]
            break;
 8019b46:	e009      	b.n	8019b5c <SUBGRF_SetRfTxPower+0x50>
                paSelect = RFO_LP;
 8019b48:	2301      	movs	r3, #1
 8019b4a:	73fb      	strb	r3, [r7, #15]
            break;
 8019b4c:	e006      	b.n	8019b5c <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_LP;
 8019b4e:	2301      	movs	r3, #1
 8019b50:	73fb      	strb	r3, [r7, #15]
            break;
 8019b52:	e003      	b.n	8019b5c <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_HP;
 8019b54:	2302      	movs	r3, #2
 8019b56:	73fb      	strb	r3, [r7, #15]
            break;
 8019b58:	e000      	b.n	8019b5c <SUBGRF_SetRfTxPower+0x50>
            break;
 8019b5a:	bf00      	nop
    }

    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 8019b5c:	f997 1007 	ldrsb.w	r1, [r7, #7]
 8019b60:	7bfb      	ldrb	r3, [r7, #15]
 8019b62:	2202      	movs	r2, #2
 8019b64:	4618      	mov	r0, r3
 8019b66:	f7ff fbcd 	bl	8019304 <SUBGRF_SetTxParams>

    return paSelect;
 8019b6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8019b6c:	4618      	mov	r0, r3
 8019b6e:	3710      	adds	r7, #16
 8019b70:	46bd      	mov	sp, r7
 8019b72:	bd80      	pop	{r7, pc}

08019b74 <SUBGRF_GetRadioWakeUpTime>:

uint32_t SUBGRF_GetRadioWakeUpTime( void )
{
 8019b74:	b480      	push	{r7}
 8019b76:	af00      	add	r7, sp, #0
    return RF_WAKEUP_TIME;
 8019b78:	2301      	movs	r3, #1
}
 8019b7a:	4618      	mov	r0, r3
 8019b7c:	46bd      	mov	sp, r7
 8019b7e:	bc80      	pop	{r7}
 8019b80:	4770      	bx	lr
	...

08019b84 <HAL_SUBGHZ_TxCpltCallback>:

/* HAL_SUBGHz Callbacks definitions */
void HAL_SUBGHZ_TxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8019b84:	b580      	push	{r7, lr}
 8019b86:	b082      	sub	sp, #8
 8019b88:	af00      	add	r7, sp, #0
 8019b8a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_TX_DONE );
 8019b8c:	4b03      	ldr	r3, [pc, #12]	@ (8019b9c <HAL_SUBGHZ_TxCpltCallback+0x18>)
 8019b8e:	681b      	ldr	r3, [r3, #0]
 8019b90:	2001      	movs	r0, #1
 8019b92:	4798      	blx	r3
}
 8019b94:	bf00      	nop
 8019b96:	3708      	adds	r7, #8
 8019b98:	46bd      	mov	sp, r7
 8019b9a:	bd80      	pop	{r7, pc}
 8019b9c:	20001b08 	.word	0x20001b08

08019ba0 <HAL_SUBGHZ_RxCpltCallback>:

void HAL_SUBGHZ_RxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8019ba0:	b580      	push	{r7, lr}
 8019ba2:	b082      	sub	sp, #8
 8019ba4:	af00      	add	r7, sp, #0
 8019ba6:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_DONE );
 8019ba8:	4b03      	ldr	r3, [pc, #12]	@ (8019bb8 <HAL_SUBGHZ_RxCpltCallback+0x18>)
 8019baa:	681b      	ldr	r3, [r3, #0]
 8019bac:	2002      	movs	r0, #2
 8019bae:	4798      	blx	r3
}
 8019bb0:	bf00      	nop
 8019bb2:	3708      	adds	r7, #8
 8019bb4:	46bd      	mov	sp, r7
 8019bb6:	bd80      	pop	{r7, pc}
 8019bb8:	20001b08 	.word	0x20001b08

08019bbc <HAL_SUBGHZ_CRCErrorCallback>:

void HAL_SUBGHZ_CRCErrorCallback (SUBGHZ_HandleTypeDef *hsubghz)
{
 8019bbc:	b580      	push	{r7, lr}
 8019bbe:	b082      	sub	sp, #8
 8019bc0:	af00      	add	r7, sp, #0
 8019bc2:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 8019bc4:	4b03      	ldr	r3, [pc, #12]	@ (8019bd4 <HAL_SUBGHZ_CRCErrorCallback+0x18>)
 8019bc6:	681b      	ldr	r3, [r3, #0]
 8019bc8:	2040      	movs	r0, #64	@ 0x40
 8019bca:	4798      	blx	r3
}
 8019bcc:	bf00      	nop
 8019bce:	3708      	adds	r7, #8
 8019bd0:	46bd      	mov	sp, r7
 8019bd2:	bd80      	pop	{r7, pc}
 8019bd4:	20001b08 	.word	0x20001b08

08019bd8 <HAL_SUBGHZ_CADStatusCallback>:

void HAL_SUBGHZ_CADStatusCallback(SUBGHZ_HandleTypeDef *hsubghz, HAL_SUBGHZ_CadStatusTypeDef cadstatus)
{
 8019bd8:	b580      	push	{r7, lr}
 8019bda:	b082      	sub	sp, #8
 8019bdc:	af00      	add	r7, sp, #0
 8019bde:	6078      	str	r0, [r7, #4]
 8019be0:	460b      	mov	r3, r1
 8019be2:	70fb      	strb	r3, [r7, #3]
    switch (cadstatus)
 8019be4:	78fb      	ldrb	r3, [r7, #3]
 8019be6:	2b00      	cmp	r3, #0
 8019be8:	d002      	beq.n	8019bf0 <HAL_SUBGHZ_CADStatusCallback+0x18>
 8019bea:	2b01      	cmp	r3, #1
 8019bec:	d005      	beq.n	8019bfa <HAL_SUBGHZ_CADStatusCallback+0x22>
            break;
        case HAL_SUBGHZ_CAD_DETECTED:
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
            break;
        default:
            break;
 8019bee:	e00a      	b.n	8019c06 <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 8019bf0:	4b07      	ldr	r3, [pc, #28]	@ (8019c10 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 8019bf2:	681b      	ldr	r3, [r3, #0]
 8019bf4:	2080      	movs	r0, #128	@ 0x80
 8019bf6:	4798      	blx	r3
            break;
 8019bf8:	e005      	b.n	8019c06 <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 8019bfa:	4b05      	ldr	r3, [pc, #20]	@ (8019c10 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 8019bfc:	681b      	ldr	r3, [r3, #0]
 8019bfe:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8019c02:	4798      	blx	r3
            break;
 8019c04:	bf00      	nop
    }
}
 8019c06:	bf00      	nop
 8019c08:	3708      	adds	r7, #8
 8019c0a:	46bd      	mov	sp, r7
 8019c0c:	bd80      	pop	{r7, pc}
 8019c0e:	bf00      	nop
 8019c10:	20001b08 	.word	0x20001b08

08019c14 <HAL_SUBGHZ_RxTxTimeoutCallback>:

void HAL_SUBGHZ_RxTxTimeoutCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8019c14:	b580      	push	{r7, lr}
 8019c16:	b082      	sub	sp, #8
 8019c18:	af00      	add	r7, sp, #0
 8019c1a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 8019c1c:	4b04      	ldr	r3, [pc, #16]	@ (8019c30 <HAL_SUBGHZ_RxTxTimeoutCallback+0x1c>)
 8019c1e:	681b      	ldr	r3, [r3, #0]
 8019c20:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8019c24:	4798      	blx	r3
}
 8019c26:	bf00      	nop
 8019c28:	3708      	adds	r7, #8
 8019c2a:	46bd      	mov	sp, r7
 8019c2c:	bd80      	pop	{r7, pc}
 8019c2e:	bf00      	nop
 8019c30:	20001b08 	.word	0x20001b08

08019c34 <HAL_SUBGHZ_HeaderErrorCallback>:

void HAL_SUBGHZ_HeaderErrorCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8019c34:	b580      	push	{r7, lr}
 8019c36:	b082      	sub	sp, #8
 8019c38:	af00      	add	r7, sp, #0
 8019c3a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 8019c3c:	4b03      	ldr	r3, [pc, #12]	@ (8019c4c <HAL_SUBGHZ_HeaderErrorCallback+0x18>)
 8019c3e:	681b      	ldr	r3, [r3, #0]
 8019c40:	2020      	movs	r0, #32
 8019c42:	4798      	blx	r3
}
 8019c44:	bf00      	nop
 8019c46:	3708      	adds	r7, #8
 8019c48:	46bd      	mov	sp, r7
 8019c4a:	bd80      	pop	{r7, pc}
 8019c4c:	20001b08 	.word	0x20001b08

08019c50 <HAL_SUBGHZ_PreambleDetectedCallback>:

void HAL_SUBGHZ_PreambleDetectedCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8019c50:	b580      	push	{r7, lr}
 8019c52:	b082      	sub	sp, #8
 8019c54:	af00      	add	r7, sp, #0
 8019c56:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 8019c58:	4b03      	ldr	r3, [pc, #12]	@ (8019c68 <HAL_SUBGHZ_PreambleDetectedCallback+0x18>)
 8019c5a:	681b      	ldr	r3, [r3, #0]
 8019c5c:	2004      	movs	r0, #4
 8019c5e:	4798      	blx	r3
}
 8019c60:	bf00      	nop
 8019c62:	3708      	adds	r7, #8
 8019c64:	46bd      	mov	sp, r7
 8019c66:	bd80      	pop	{r7, pc}
 8019c68:	20001b08 	.word	0x20001b08

08019c6c <HAL_SUBGHZ_SyncWordValidCallback>:

void HAL_SUBGHZ_SyncWordValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8019c6c:	b580      	push	{r7, lr}
 8019c6e:	b082      	sub	sp, #8
 8019c70:	af00      	add	r7, sp, #0
 8019c72:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 8019c74:	4b03      	ldr	r3, [pc, #12]	@ (8019c84 <HAL_SUBGHZ_SyncWordValidCallback+0x18>)
 8019c76:	681b      	ldr	r3, [r3, #0]
 8019c78:	2008      	movs	r0, #8
 8019c7a:	4798      	blx	r3
}
 8019c7c:	bf00      	nop
 8019c7e:	3708      	adds	r7, #8
 8019c80:	46bd      	mov	sp, r7
 8019c82:	bd80      	pop	{r7, pc}
 8019c84:	20001b08 	.word	0x20001b08

08019c88 <HAL_SUBGHZ_HeaderValidCallback>:

void HAL_SUBGHZ_HeaderValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8019c88:	b580      	push	{r7, lr}
 8019c8a:	b082      	sub	sp, #8
 8019c8c:	af00      	add	r7, sp, #0
 8019c8e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 8019c90:	4b03      	ldr	r3, [pc, #12]	@ (8019ca0 <HAL_SUBGHZ_HeaderValidCallback+0x18>)
 8019c92:	681b      	ldr	r3, [r3, #0]
 8019c94:	2010      	movs	r0, #16
 8019c96:	4798      	blx	r3
}
 8019c98:	bf00      	nop
 8019c9a:	3708      	adds	r7, #8
 8019c9c:	46bd      	mov	sp, r7
 8019c9e:	bd80      	pop	{r7, pc}
 8019ca0:	20001b08 	.word	0x20001b08

08019ca4 <Radio_SMPS_Set>:

static void Radio_SMPS_Set(uint8_t level)
{
 8019ca4:	b580      	push	{r7, lr}
 8019ca6:	b084      	sub	sp, #16
 8019ca8:	af00      	add	r7, sp, #0
 8019caa:	4603      	mov	r3, r0
 8019cac:	71fb      	strb	r3, [r7, #7]
  if ( 1U == RBI_IsDCDC() )
 8019cae:	f7f0 fcb2 	bl	800a616 <RBI_IsDCDC>
 8019cb2:	4603      	mov	r3, r0
 8019cb4:	2b01      	cmp	r3, #1
 8019cb6:	d112      	bne.n	8019cde <Radio_SMPS_Set+0x3a>
  {
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 8019cb8:	f640 1023 	movw	r0, #2339	@ 0x923
 8019cbc:	f7ff fe1e 	bl	80198fc <SUBGRF_ReadRegister>
 8019cc0:	4603      	mov	r3, r0
 8019cc2:	73fb      	strb	r3, [r7, #15]
    modReg&= (~SMPS_DRV_MASK);
 8019cc4:	7bfb      	ldrb	r3, [r7, #15]
 8019cc6:	f023 0306 	bic.w	r3, r3, #6
 8019cca:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 8019ccc:	7bfa      	ldrb	r2, [r7, #15]
 8019cce:	79fb      	ldrb	r3, [r7, #7]
 8019cd0:	4313      	orrs	r3, r2
 8019cd2:	b2db      	uxtb	r3, r3
 8019cd4:	4619      	mov	r1, r3
 8019cd6:	f640 1023 	movw	r0, #2339	@ 0x923
 8019cda:	f7ff fdfb 	bl	80198d4 <SUBGRF_WriteRegister>
  }
}
 8019cde:	bf00      	nop
 8019ce0:	3710      	adds	r7, #16
 8019ce2:	46bd      	mov	sp, r7
 8019ce4:	bd80      	pop	{r7, pc}
	...

08019ce8 <SUBGRF_GetFskBandwidthRegValue>:

uint8_t SUBGRF_GetFskBandwidthRegValue( uint32_t bandwidth )
{
 8019ce8:	b480      	push	{r7}
 8019cea:	b085      	sub	sp, #20
 8019cec:	af00      	add	r7, sp, #0
 8019cee:	6078      	str	r0, [r7, #4]
    uint8_t i;

    if( bandwidth == 0 )
 8019cf0:	687b      	ldr	r3, [r7, #4]
 8019cf2:	2b00      	cmp	r3, #0
 8019cf4:	d101      	bne.n	8019cfa <SUBGRF_GetFskBandwidthRegValue+0x12>
    {
        return( 0x1F );
 8019cf6:	231f      	movs	r3, #31
 8019cf8:	e017      	b.n	8019d2a <SUBGRF_GetFskBandwidthRegValue+0x42>
    }

    /* ST_WORKAROUND_BEGIN: Simplified loop */
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 8019cfa:	2300      	movs	r3, #0
 8019cfc:	73fb      	strb	r3, [r7, #15]
 8019cfe:	e00f      	b.n	8019d20 <SUBGRF_GetFskBandwidthRegValue+0x38>
    {
        if ( bandwidth < FskBandwidths[i].bandwidth )
 8019d00:	7bfb      	ldrb	r3, [r7, #15]
 8019d02:	4a0c      	ldr	r2, [pc, #48]	@ (8019d34 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 8019d04:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8019d08:	687a      	ldr	r2, [r7, #4]
 8019d0a:	429a      	cmp	r2, r3
 8019d0c:	d205      	bcs.n	8019d1a <SUBGRF_GetFskBandwidthRegValue+0x32>
        {
            return FskBandwidths[i].RegValue;
 8019d0e:	7bfb      	ldrb	r3, [r7, #15]
 8019d10:	4a08      	ldr	r2, [pc, #32]	@ (8019d34 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 8019d12:	00db      	lsls	r3, r3, #3
 8019d14:	4413      	add	r3, r2
 8019d16:	791b      	ldrb	r3, [r3, #4]
 8019d18:	e007      	b.n	8019d2a <SUBGRF_GetFskBandwidthRegValue+0x42>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 8019d1a:	7bfb      	ldrb	r3, [r7, #15]
 8019d1c:	3301      	adds	r3, #1
 8019d1e:	73fb      	strb	r3, [r7, #15]
 8019d20:	7bfb      	ldrb	r3, [r7, #15]
 8019d22:	2b15      	cmp	r3, #21
 8019d24:	d9ec      	bls.n	8019d00 <SUBGRF_GetFskBandwidthRegValue+0x18>
        }
    }
    /* ST_WORKAROUND_END */
    // ERROR: Value not found
    while( 1 );
 8019d26:	bf00      	nop
 8019d28:	e7fd      	b.n	8019d26 <SUBGRF_GetFskBandwidthRegValue+0x3e>
}
 8019d2a:	4618      	mov	r0, r3
 8019d2c:	3714      	adds	r7, #20
 8019d2e:	46bd      	mov	sp, r7
 8019d30:	bc80      	pop	{r7}
 8019d32:	4770      	bx	lr
 8019d34:	0801c604 	.word	0x0801c604

08019d38 <SUBGRF_GetCFO>:
void SUBGRF_GetCFO( uint32_t bitRate, int32_t *cfo)
{
 8019d38:	b580      	push	{r7, lr}
 8019d3a:	b08a      	sub	sp, #40	@ 0x28
 8019d3c:	af00      	add	r7, sp, #0
 8019d3e:	6078      	str	r0, [r7, #4]
 8019d40:	6039      	str	r1, [r7, #0]
  uint8_t BwMant[] = {4, 8, 10, 12};
 8019d42:	4b35      	ldr	r3, [pc, #212]	@ (8019e18 <SUBGRF_GetCFO+0xe0>)
 8019d44:	60fb      	str	r3, [r7, #12]
  /* read demod bandwidth: mant bit4:3, exp bits 2:0 */
  uint8_t reg = (SUBGRF_ReadRegister( SUBGHZ_BWSELR ));
 8019d46:	f640 0007 	movw	r0, #2055	@ 0x807
 8019d4a:	f7ff fdd7 	bl	80198fc <SUBGRF_ReadRegister>
 8019d4e:	4603      	mov	r3, r0
 8019d50:	77fb      	strb	r3, [r7, #31]
  uint8_t bandwidth_mant = BwMant[( reg >> 3 ) & 0x3];
 8019d52:	7ffb      	ldrb	r3, [r7, #31]
 8019d54:	08db      	lsrs	r3, r3, #3
 8019d56:	b2db      	uxtb	r3, r3
 8019d58:	f003 0303 	and.w	r3, r3, #3
 8019d5c:	3328      	adds	r3, #40	@ 0x28
 8019d5e:	443b      	add	r3, r7
 8019d60:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8019d64:	77bb      	strb	r3, [r7, #30]
  uint8_t bandwidth_exp = reg & 0x7;
 8019d66:	7ffb      	ldrb	r3, [r7, #31]
 8019d68:	f003 0307 	and.w	r3, r3, #7
 8019d6c:	777b      	strb	r3, [r7, #29]
  uint32_t cf_fs = XTAL_FREQ / ( bandwidth_mant * ( 1 << ( bandwidth_exp - 1 )));
 8019d6e:	7fba      	ldrb	r2, [r7, #30]
 8019d70:	7f7b      	ldrb	r3, [r7, #29]
 8019d72:	3b01      	subs	r3, #1
 8019d74:	fa02 f303 	lsl.w	r3, r2, r3
 8019d78:	461a      	mov	r2, r3
 8019d7a:	4b28      	ldr	r3, [pc, #160]	@ (8019e1c <SUBGRF_GetCFO+0xe4>)
 8019d7c:	fbb3 f3f2 	udiv	r3, r3, r2
 8019d80:	61bb      	str	r3, [r7, #24]
  uint32_t cf_osr = cf_fs / bitRate;
 8019d82:	69ba      	ldr	r2, [r7, #24]
 8019d84:	687b      	ldr	r3, [r7, #4]
 8019d86:	fbb2 f3f3 	udiv	r3, r2, r3
 8019d8a:	617b      	str	r3, [r7, #20]
  uint8_t interp = 1;
 8019d8c:	2301      	movs	r3, #1
 8019d8e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  /* calculate demod interpolation factor */
  if (cf_osr * interp < 8)
 8019d92:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8019d96:	697a      	ldr	r2, [r7, #20]
 8019d98:	fb02 f303 	mul.w	r3, r2, r3
 8019d9c:	2b07      	cmp	r3, #7
 8019d9e:	d802      	bhi.n	8019da6 <SUBGRF_GetCFO+0x6e>
  {
    interp = 2;
 8019da0:	2302      	movs	r3, #2
 8019da2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }
  if (cf_osr * interp < 4)
 8019da6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8019daa:	697a      	ldr	r2, [r7, #20]
 8019dac:	fb02 f303 	mul.w	r3, r2, r3
 8019db0:	2b03      	cmp	r3, #3
 8019db2:	d802      	bhi.n	8019dba <SUBGRF_GetCFO+0x82>
  {
    interp = 4;
 8019db4:	2304      	movs	r3, #4
 8019db6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }
  /* calculate demod sampling frequency */
  uint32_t fs = cf_fs* interp;
 8019dba:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8019dbe:	69bb      	ldr	r3, [r7, #24]
 8019dc0:	fb02 f303 	mul.w	r3, r2, r3
 8019dc4:	613b      	str	r3, [r7, #16]
  /* get the cfo registers */
  int32_t cfo_bin = ( SUBGRF_ReadRegister( SUBGHZ_GCFORH ) & 0xF ) << 8;
 8019dc6:	f44f 60d6 	mov.w	r0, #1712	@ 0x6b0
 8019dca:	f7ff fd97 	bl	80198fc <SUBGRF_ReadRegister>
 8019dce:	4603      	mov	r3, r0
 8019dd0:	021b      	lsls	r3, r3, #8
 8019dd2:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8019dd6:	623b      	str	r3, [r7, #32]
  cfo_bin |= SUBGRF_ReadRegister( SUBGHZ_GCFORL );
 8019dd8:	f240 60b1 	movw	r0, #1713	@ 0x6b1
 8019ddc:	f7ff fd8e 	bl	80198fc <SUBGRF_ReadRegister>
 8019de0:	4603      	mov	r3, r0
 8019de2:	461a      	mov	r2, r3
 8019de4:	6a3b      	ldr	r3, [r7, #32]
 8019de6:	4313      	orrs	r3, r2
 8019de8:	623b      	str	r3, [r7, #32]
  /* negate if 12 bits sign bit is 1 */
  if (( cfo_bin & 0x800 ) == 0x800 )
 8019dea:	6a3b      	ldr	r3, [r7, #32]
 8019dec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8019df0:	2b00      	cmp	r3, #0
 8019df2:	d005      	beq.n	8019e00 <SUBGRF_GetCFO+0xc8>
  {
    cfo_bin |= 0xFFFFF000;
 8019df4:	6a3b      	ldr	r3, [r7, #32]
 8019df6:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 8019dfa:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 8019dfe:	623b      	str	r3, [r7, #32]
  }
  /* calculate cfo in Hz */
  /* shift by 5 first to not saturate, cfo_bin on 12bits */
  *cfo = ((int32_t)( cfo_bin * ( fs >> 5 ))) >> ( 12 - 5 );
 8019e00:	693b      	ldr	r3, [r7, #16]
 8019e02:	095b      	lsrs	r3, r3, #5
 8019e04:	6a3a      	ldr	r2, [r7, #32]
 8019e06:	fb02 f303 	mul.w	r3, r2, r3
 8019e0a:	11da      	asrs	r2, r3, #7
 8019e0c:	683b      	ldr	r3, [r7, #0]
 8019e0e:	601a      	str	r2, [r3, #0]
}
 8019e10:	bf00      	nop
 8019e12:	3728      	adds	r7, #40	@ 0x28
 8019e14:	46bd      	mov	sp, r7
 8019e16:	bd80      	pop	{r7, pc}
 8019e18:	0c0a0804 	.word	0x0c0a0804
 8019e1c:	01e84800 	.word	0x01e84800

08019e20 <RFW_TransmitLongPacket>:
static void RFW_GetPayload( uint8_t Offset, uint8_t Length );
#endif

/* Exported functions --------------------------------------------------------*/
int32_t RFW_TransmitLongPacket( uint16_t payload_size, uint32_t timeout, void (*TxLongPacketGetNextChunkCb) (uint8_t** buffer, uint8_t buffer_size) )
{
 8019e20:	b480      	push	{r7}
 8019e22:	b087      	sub	sp, #28
 8019e24:	af00      	add	r7, sp, #0
 8019e26:	4603      	mov	r3, r0
 8019e28:	60b9      	str	r1, [r7, #8]
 8019e2a:	607a      	str	r2, [r7, #4]
 8019e2c:	81fb      	strh	r3, [r7, #14]
  int32_t status=0;
 8019e2e:	2300      	movs	r3, #0
 8019e30:	617b      	str	r3, [r7, #20]
        default:
            break;
    }
  }
#else
  status= -1;
 8019e32:	f04f 33ff 	mov.w	r3, #4294967295
 8019e36:	617b      	str	r3, [r7, #20]
#endif
  return status;
 8019e38:	697b      	ldr	r3, [r7, #20]
}
 8019e3a:	4618      	mov	r0, r3
 8019e3c:	371c      	adds	r7, #28
 8019e3e:	46bd      	mov	sp, r7
 8019e40:	bc80      	pop	{r7}
 8019e42:	4770      	bx	lr

08019e44 <RFW_ReceiveLongPacket>:

int32_t RFW_ReceiveLongPacket( uint8_t boosted_mode, uint32_t timeout, void (*RxLongPacketStoreChunkCb) (uint8_t* buffer, uint8_t chunk_size) )
{
 8019e44:	b480      	push	{r7}
 8019e46:	b087      	sub	sp, #28
 8019e48:	af00      	add	r7, sp, #0
 8019e4a:	4603      	mov	r3, r0
 8019e4c:	60b9      	str	r1, [r7, #8]
 8019e4e:	607a      	str	r2, [r7, #4]
 8019e50:	73fb      	strb	r3, [r7, #15]
  int32_t status=0;
 8019e52:	2300      	movs	r3, #0
 8019e54:	617b      	str	r3, [r7, #20]
    {
      SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
    }
  }
#else
  status= -1;
 8019e56:	f04f 33ff 	mov.w	r3, #4294967295
 8019e5a:	617b      	str	r3, [r7, #20]
#endif
  return status;
 8019e5c:	697b      	ldr	r3, [r7, #20]
}
 8019e5e:	4618      	mov	r0, r3
 8019e60:	371c      	adds	r7, #28
 8019e62:	46bd      	mov	sp, r7
 8019e64:	bc80      	pop	{r7}
 8019e66:	4770      	bx	lr

08019e68 <RFW_Init>:

int32_t RFW_Init( ConfigGeneric_t* config, RadioEvents_t* RadioEvents, TimerEvent_t* TimeoutTimerEvent)
{
 8019e68:	b480      	push	{r7}
 8019e6a:	b085      	sub	sp, #20
 8019e6c:	af00      	add	r7, sp, #0
 8019e6e:	60f8      	str	r0, [r7, #12]
 8019e70:	60b9      	str	r1, [r7, #8]
 8019e72:	607a      	str	r2, [r7, #4]
  RFWPacket.Init.Enable=1;
  /* Initialize Timer for end of fixed packet, started at sync*/
  TimerInit( &RFWPacket.Timer, RFW_GetPayloadTimerEvent );
  return 0;
#else
  return -1;
 8019e74:	f04f 33ff 	mov.w	r3, #4294967295
#endif
}
 8019e78:	4618      	mov	r0, r3
 8019e7a:	3714      	adds	r7, #20
 8019e7c:	46bd      	mov	sp, r7
 8019e7e:	bc80      	pop	{r7}
 8019e80:	4770      	bx	lr

08019e82 <RFW_DeInit>:

void RFW_DeInit( void)
{
 8019e82:	b480      	push	{r7}
 8019e84:	af00      	add	r7, sp, #0
#if (RFW_ENABLE ==1 )
  RFWPacket.Init.Enable=0; /*Disable the RFWPacket decoding*/
#endif
}
 8019e86:	bf00      	nop
 8019e88:	46bd      	mov	sp, r7
 8019e8a:	bc80      	pop	{r7}
 8019e8c:	4770      	bx	lr

08019e8e <RFW_Is_Init>:

uint8_t RFW_Is_Init( void)
{
 8019e8e:	b480      	push	{r7}
 8019e90:	af00      	add	r7, sp, #0
#if (RFW_ENABLE ==1 )
  return RFWPacket.Init.Enable;
#else
  return 0;
 8019e92:	2300      	movs	r3, #0
#endif
}
 8019e94:	4618      	mov	r0, r3
 8019e96:	46bd      	mov	sp, r7
 8019e98:	bc80      	pop	{r7}
 8019e9a:	4770      	bx	lr

08019e9c <RFW_Is_LongPacketModeEnabled>:

uint8_t RFW_Is_LongPacketModeEnabled( void)
{
 8019e9c:	b480      	push	{r7}
 8019e9e:	af00      	add	r7, sp, #0
#if (RFW_ENABLE ==1 )
  return RFWPacket.LongPacketModeEnable;
#else
  return 0;
 8019ea0:	2300      	movs	r3, #0
#endif
}
 8019ea2:	4618      	mov	r0, r3
 8019ea4:	46bd      	mov	sp, r7
 8019ea6:	bc80      	pop	{r7}
 8019ea8:	4770      	bx	lr

08019eaa <RFW_SetAntSwitch>:

void RFW_SetAntSwitch( uint8_t AntSwitch)
{
 8019eaa:	b480      	push	{r7}
 8019eac:	b083      	sub	sp, #12
 8019eae:	af00      	add	r7, sp, #0
 8019eb0:	4603      	mov	r3, r0
 8019eb2:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE ==1 )
  RFWPacket.AntSwitchPaSelect=AntSwitch;
#endif
}
 8019eb4:	bf00      	nop
 8019eb6:	370c      	adds	r7, #12
 8019eb8:	46bd      	mov	sp, r7
 8019eba:	bc80      	pop	{r7}
 8019ebc:	4770      	bx	lr

08019ebe <RFW_TransmitInit>:

int32_t RFW_TransmitInit(uint8_t* inOutBuffer, uint8_t size, uint8_t* outSize)
{
 8019ebe:	b480      	push	{r7}
 8019ec0:	b087      	sub	sp, #28
 8019ec2:	af00      	add	r7, sp, #0
 8019ec4:	60f8      	str	r0, [r7, #12]
 8019ec6:	460b      	mov	r3, r1
 8019ec8:	607a      	str	r2, [r7, #4]
 8019eca:	72fb      	strb	r3, [r7, #11]
  int32_t status=-1;
 8019ecc:	f04f 33ff 	mov.w	r3, #4294967295
 8019ed0:	617b      	str	r3, [r7, #20]
    RFWPacket.LongPacketModeEnable=0;

    status= 0;
  }
#endif
  return status;
 8019ed2:	697b      	ldr	r3, [r7, #20]
}
 8019ed4:	4618      	mov	r0, r3
 8019ed6:	371c      	adds	r7, #28
 8019ed8:	46bd      	mov	sp, r7
 8019eda:	bc80      	pop	{r7}
 8019edc:	4770      	bx	lr

08019ede <RFW_ReceiveInit>:

int32_t RFW_ReceiveInit( void )
{
 8019ede:	b480      	push	{r7}
 8019ee0:	af00      	add	r7, sp, #0
  RFWPacket.RxPayloadOffset=0;

  RFWPacket.LongPacketModeEnable=0;
  return 0;
#else
  return -1;
 8019ee2:	f04f 33ff 	mov.w	r3, #4294967295
#endif
}
 8019ee6:	4618      	mov	r0, r3
 8019ee8:	46bd      	mov	sp, r7
 8019eea:	bc80      	pop	{r7}
 8019eec:	4770      	bx	lr

08019eee <RFW_DeInit_TxLongPacket>:

void RFW_DeInit_TxLongPacket(void)
{
 8019eee:	b480      	push	{r7}
 8019ef0:	af00      	add	r7, sp, #0
  /*long packet WA*/
  uint8_t reg = SUBGRF_ReadRegister(SUBGHZ_GPKTCTL1AR);
  SUBGRF_WriteRegister(SUBGHZ_GPKTCTL1AR, reg & ~0x02);//clear infinite_sequence bit
  SUBGRF_WriteRegister(SUBGHZ_GRTXPLDLEN, 0xFF); //RxTxPldLen: reset to 0xFF
#endif
}
 8019ef2:	bf00      	nop
 8019ef4:	46bd      	mov	sp, r7
 8019ef6:	bc80      	pop	{r7}
 8019ef8:	4770      	bx	lr

08019efa <RFW_ReceivePayload>:

void RFW_ReceivePayload( void )
{
 8019efa:	b480      	push	{r7}
 8019efc:	af00      	add	r7, sp, #0
    /*timeout*/
    SUBGRF_SetStandby( STDBY_RC );
    RFWPacket.Init.RadioEvents->RxTimeout( );
  }
#endif
}
 8019efe:	bf00      	nop
 8019f00:	46bd      	mov	sp, r7
 8019f02:	bc80      	pop	{r7}
 8019f04:	4770      	bx	lr

08019f06 <RFW_SetRadioModem>:

void RFW_SetRadioModem(RadioModems_t Modem)
{
 8019f06:	b480      	push	{r7}
 8019f08:	b083      	sub	sp, #12
 8019f0a:	af00      	add	r7, sp, #0
 8019f0c:	4603      	mov	r3, r0
 8019f0e:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE ==1 )
  RFWPacket.Init.Modem= Modem;
#endif
}
 8019f10:	bf00      	nop
 8019f12:	370c      	adds	r7, #12
 8019f14:	46bd      	mov	sp, r7
 8019f16:	bc80      	pop	{r7}
 8019f18:	4770      	bx	lr
	...

08019f1c <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 8019f1c:	b480      	push	{r7}
 8019f1e:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 8019f20:	4b04      	ldr	r3, [pc, #16]	@ (8019f34 <UTIL_LPM_Init+0x18>)
 8019f22:	2200      	movs	r2, #0
 8019f24:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 8019f26:	4b04      	ldr	r3, [pc, #16]	@ (8019f38 <UTIL_LPM_Init+0x1c>)
 8019f28:	2200      	movs	r2, #0
 8019f2a:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 8019f2c:	bf00      	nop
 8019f2e:	46bd      	mov	sp, r7
 8019f30:	bc80      	pop	{r7}
 8019f32:	4770      	bx	lr
 8019f34:	20001b0c 	.word	0x20001b0c
 8019f38:	20001b10 	.word	0x20001b10

08019f3c <UTIL_LPM_SetStopMode>:
void UTIL_LPM_DeInit( void )
{
}

void UTIL_LPM_SetStopMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 8019f3c:	b480      	push	{r7}
 8019f3e:	b087      	sub	sp, #28
 8019f40:	af00      	add	r7, sp, #0
 8019f42:	6078      	str	r0, [r7, #4]
 8019f44:	460b      	mov	r3, r1
 8019f46:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019f48:	f3ef 8310 	mrs	r3, PRIMASK
 8019f4c:	613b      	str	r3, [r7, #16]
  return(result);
 8019f4e:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 8019f50:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8019f52:	b672      	cpsid	i
}
 8019f54:	bf00      	nop
  
  switch( state )
 8019f56:	78fb      	ldrb	r3, [r7, #3]
 8019f58:	2b00      	cmp	r3, #0
 8019f5a:	d008      	beq.n	8019f6e <UTIL_LPM_SetStopMode+0x32>
 8019f5c:	2b01      	cmp	r3, #1
 8019f5e:	d10e      	bne.n	8019f7e <UTIL_LPM_SetStopMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      StopModeDisable |= lpm_id_bm;
 8019f60:	4b0d      	ldr	r3, [pc, #52]	@ (8019f98 <UTIL_LPM_SetStopMode+0x5c>)
 8019f62:	681a      	ldr	r2, [r3, #0]
 8019f64:	687b      	ldr	r3, [r7, #4]
 8019f66:	4313      	orrs	r3, r2
 8019f68:	4a0b      	ldr	r2, [pc, #44]	@ (8019f98 <UTIL_LPM_SetStopMode+0x5c>)
 8019f6a:	6013      	str	r3, [r2, #0]
      break;
 8019f6c:	e008      	b.n	8019f80 <UTIL_LPM_SetStopMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      StopModeDisable &= ( ~lpm_id_bm );
 8019f6e:	687b      	ldr	r3, [r7, #4]
 8019f70:	43da      	mvns	r2, r3
 8019f72:	4b09      	ldr	r3, [pc, #36]	@ (8019f98 <UTIL_LPM_SetStopMode+0x5c>)
 8019f74:	681b      	ldr	r3, [r3, #0]
 8019f76:	4013      	ands	r3, r2
 8019f78:	4a07      	ldr	r2, [pc, #28]	@ (8019f98 <UTIL_LPM_SetStopMode+0x5c>)
 8019f7a:	6013      	str	r3, [r2, #0]
      break;
 8019f7c:	e000      	b.n	8019f80 <UTIL_LPM_SetStopMode+0x44>
    }
  default :
    {
      break;
 8019f7e:	bf00      	nop
 8019f80:	697b      	ldr	r3, [r7, #20]
 8019f82:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019f84:	68fb      	ldr	r3, [r7, #12]
 8019f86:	f383 8810 	msr	PRIMASK, r3
}
 8019f8a:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8019f8c:	bf00      	nop
 8019f8e:	371c      	adds	r7, #28
 8019f90:	46bd      	mov	sp, r7
 8019f92:	bc80      	pop	{r7}
 8019f94:	4770      	bx	lr
 8019f96:	bf00      	nop
 8019f98:	20001b0c 	.word	0x20001b0c

08019f9c <UTIL_LPM_SetOffMode>:

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 8019f9c:	b480      	push	{r7}
 8019f9e:	b087      	sub	sp, #28
 8019fa0:	af00      	add	r7, sp, #0
 8019fa2:	6078      	str	r0, [r7, #4]
 8019fa4:	460b      	mov	r3, r1
 8019fa6:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019fa8:	f3ef 8310 	mrs	r3, PRIMASK
 8019fac:	613b      	str	r3, [r7, #16]
  return(result);
 8019fae:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 8019fb0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8019fb2:	b672      	cpsid	i
}
 8019fb4:	bf00      	nop
  
  switch(state)
 8019fb6:	78fb      	ldrb	r3, [r7, #3]
 8019fb8:	2b00      	cmp	r3, #0
 8019fba:	d008      	beq.n	8019fce <UTIL_LPM_SetOffMode+0x32>
 8019fbc:	2b01      	cmp	r3, #1
 8019fbe:	d10e      	bne.n	8019fde <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 8019fc0:	4b0d      	ldr	r3, [pc, #52]	@ (8019ff8 <UTIL_LPM_SetOffMode+0x5c>)
 8019fc2:	681a      	ldr	r2, [r3, #0]
 8019fc4:	687b      	ldr	r3, [r7, #4]
 8019fc6:	4313      	orrs	r3, r2
 8019fc8:	4a0b      	ldr	r2, [pc, #44]	@ (8019ff8 <UTIL_LPM_SetOffMode+0x5c>)
 8019fca:	6013      	str	r3, [r2, #0]
      break;
 8019fcc:	e008      	b.n	8019fe0 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 8019fce:	687b      	ldr	r3, [r7, #4]
 8019fd0:	43da      	mvns	r2, r3
 8019fd2:	4b09      	ldr	r3, [pc, #36]	@ (8019ff8 <UTIL_LPM_SetOffMode+0x5c>)
 8019fd4:	681b      	ldr	r3, [r3, #0]
 8019fd6:	4013      	ands	r3, r2
 8019fd8:	4a07      	ldr	r2, [pc, #28]	@ (8019ff8 <UTIL_LPM_SetOffMode+0x5c>)
 8019fda:	6013      	str	r3, [r2, #0]
      break;
 8019fdc:	e000      	b.n	8019fe0 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 8019fde:	bf00      	nop
 8019fe0:	697b      	ldr	r3, [r7, #20]
 8019fe2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019fe4:	68fb      	ldr	r3, [r7, #12]
 8019fe6:	f383 8810 	msr	PRIMASK, r3
}
 8019fea:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8019fec:	bf00      	nop
 8019fee:	371c      	adds	r7, #28
 8019ff0:	46bd      	mov	sp, r7
 8019ff2:	bc80      	pop	{r7}
 8019ff4:	4770      	bx	lr
 8019ff6:	bf00      	nop
 8019ff8:	20001b10 	.word	0x20001b10

08019ffc <UTIL_LPM_EnterLowPower>:

  return mode_selected;
}

void UTIL_LPM_EnterLowPower( void )
{
 8019ffc:	b580      	push	{r7, lr}
 8019ffe:	b084      	sub	sp, #16
 801a000:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a002:	f3ef 8310 	mrs	r3, PRIMASK
 801a006:	60bb      	str	r3, [r7, #8]
  return(result);
 801a008:	68bb      	ldr	r3, [r7, #8]
  UTIL_LPM_ENTER_CRITICAL_SECTION_ELP( );
 801a00a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801a00c:	b672      	cpsid	i
}
 801a00e:	bf00      	nop

  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 801a010:	4b12      	ldr	r3, [pc, #72]	@ (801a05c <UTIL_LPM_EnterLowPower+0x60>)
 801a012:	681b      	ldr	r3, [r3, #0]
 801a014:	2b00      	cmp	r3, #0
 801a016:	d006      	beq.n	801a026 <UTIL_LPM_EnterLowPower+0x2a>
  {
    /**
     * At least one user disallows Stop Mode
     * SLEEP mode is required
     */
      UTIL_PowerDriver.EnterSleepMode( );
 801a018:	4b11      	ldr	r3, [pc, #68]	@ (801a060 <UTIL_LPM_EnterLowPower+0x64>)
 801a01a:	681b      	ldr	r3, [r3, #0]
 801a01c:	4798      	blx	r3
      UTIL_PowerDriver.ExitSleepMode( );
 801a01e:	4b10      	ldr	r3, [pc, #64]	@ (801a060 <UTIL_LPM_EnterLowPower+0x64>)
 801a020:	685b      	ldr	r3, [r3, #4]
 801a022:	4798      	blx	r3
 801a024:	e010      	b.n	801a048 <UTIL_LPM_EnterLowPower+0x4c>
  }
  else
  { 
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 801a026:	4b0f      	ldr	r3, [pc, #60]	@ (801a064 <UTIL_LPM_EnterLowPower+0x68>)
 801a028:	681b      	ldr	r3, [r3, #0]
 801a02a:	2b00      	cmp	r3, #0
 801a02c:	d006      	beq.n	801a03c <UTIL_LPM_EnterLowPower+0x40>
    {
      /**
       * At least one user disallows Off Mode
       * STOP mode is required
       */
        UTIL_PowerDriver.EnterStopMode( );
 801a02e:	4b0c      	ldr	r3, [pc, #48]	@ (801a060 <UTIL_LPM_EnterLowPower+0x64>)
 801a030:	689b      	ldr	r3, [r3, #8]
 801a032:	4798      	blx	r3
        UTIL_PowerDriver.ExitStopMode( );
 801a034:	4b0a      	ldr	r3, [pc, #40]	@ (801a060 <UTIL_LPM_EnterLowPower+0x64>)
 801a036:	68db      	ldr	r3, [r3, #12]
 801a038:	4798      	blx	r3
 801a03a:	e005      	b.n	801a048 <UTIL_LPM_EnterLowPower+0x4c>
    else
    {
      /**
       * OFF mode is required
       */
      UTIL_PowerDriver.EnterOffMode( );
 801a03c:	4b08      	ldr	r3, [pc, #32]	@ (801a060 <UTIL_LPM_EnterLowPower+0x64>)
 801a03e:	691b      	ldr	r3, [r3, #16]
 801a040:	4798      	blx	r3
      UTIL_PowerDriver.ExitOffMode( );
 801a042:	4b07      	ldr	r3, [pc, #28]	@ (801a060 <UTIL_LPM_EnterLowPower+0x64>)
 801a044:	695b      	ldr	r3, [r3, #20]
 801a046:	4798      	blx	r3
 801a048:	68fb      	ldr	r3, [r7, #12]
 801a04a:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a04c:	687b      	ldr	r3, [r7, #4]
 801a04e:	f383 8810 	msr	PRIMASK, r3
}
 801a052:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION_ELP( );
}
 801a054:	bf00      	nop
 801a056:	3710      	adds	r7, #16
 801a058:	46bd      	mov	sp, r7
 801a05a:	bd80      	pop	{r7, pc}
 801a05c:	20001b0c 	.word	0x20001b0c
 801a060:	0801c07c 	.word	0x0801c07c
 801a064:	20001b10 	.word	0x20001b10

0801a068 <UTIL_MEM_cpy_8>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

void UTIL_MEM_cpy_8( void *dst, const void *src, uint16_t size )
{
 801a068:	b480      	push	{r7}
 801a06a:	b087      	sub	sp, #28
 801a06c:	af00      	add	r7, sp, #0
 801a06e:	60f8      	str	r0, [r7, #12]
 801a070:	60b9      	str	r1, [r7, #8]
 801a072:	4613      	mov	r3, r2
 801a074:	80fb      	strh	r3, [r7, #6]
  uint8_t* dst8= (uint8_t *) dst;
 801a076:	68fb      	ldr	r3, [r7, #12]
 801a078:	617b      	str	r3, [r7, #20]
  uint8_t* src8= (uint8_t *) src;
 801a07a:	68bb      	ldr	r3, [r7, #8]
 801a07c:	613b      	str	r3, [r7, #16]

  while( size-- )
 801a07e:	e007      	b.n	801a090 <UTIL_MEM_cpy_8+0x28>
    {
        *dst8++ = *src8++;
 801a080:	693a      	ldr	r2, [r7, #16]
 801a082:	1c53      	adds	r3, r2, #1
 801a084:	613b      	str	r3, [r7, #16]
 801a086:	697b      	ldr	r3, [r7, #20]
 801a088:	1c59      	adds	r1, r3, #1
 801a08a:	6179      	str	r1, [r7, #20]
 801a08c:	7812      	ldrb	r2, [r2, #0]
 801a08e:	701a      	strb	r2, [r3, #0]
  while( size-- )
 801a090:	88fb      	ldrh	r3, [r7, #6]
 801a092:	1e5a      	subs	r2, r3, #1
 801a094:	80fa      	strh	r2, [r7, #6]
 801a096:	2b00      	cmp	r3, #0
 801a098:	d1f2      	bne.n	801a080 <UTIL_MEM_cpy_8+0x18>
    }
}
 801a09a:	bf00      	nop
 801a09c:	bf00      	nop
 801a09e:	371c      	adds	r7, #28
 801a0a0:	46bd      	mov	sp, r7
 801a0a2:	bc80      	pop	{r7}
 801a0a4:	4770      	bx	lr

0801a0a6 <UTIL_MEM_set_8>:
        *dst8-- = *src8++;
    }
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
 801a0a6:	b480      	push	{r7}
 801a0a8:	b085      	sub	sp, #20
 801a0aa:	af00      	add	r7, sp, #0
 801a0ac:	6078      	str	r0, [r7, #4]
 801a0ae:	460b      	mov	r3, r1
 801a0b0:	70fb      	strb	r3, [r7, #3]
 801a0b2:	4613      	mov	r3, r2
 801a0b4:	803b      	strh	r3, [r7, #0]
  uint8_t* dst8= (uint8_t *) dst;
 801a0b6:	687b      	ldr	r3, [r7, #4]
 801a0b8:	60fb      	str	r3, [r7, #12]
  while( size-- )
 801a0ba:	e004      	b.n	801a0c6 <UTIL_MEM_set_8+0x20>
  {
    *dst8++ = value;
 801a0bc:	68fb      	ldr	r3, [r7, #12]
 801a0be:	1c5a      	adds	r2, r3, #1
 801a0c0:	60fa      	str	r2, [r7, #12]
 801a0c2:	78fa      	ldrb	r2, [r7, #3]
 801a0c4:	701a      	strb	r2, [r3, #0]
  while( size-- )
 801a0c6:	883b      	ldrh	r3, [r7, #0]
 801a0c8:	1e5a      	subs	r2, r3, #1
 801a0ca:	803a      	strh	r2, [r7, #0]
 801a0cc:	2b00      	cmp	r3, #0
 801a0ce:	d1f5      	bne.n	801a0bc <UTIL_MEM_set_8+0x16>
  }
}
 801a0d0:	bf00      	nop
 801a0d2:	bf00      	nop
 801a0d4:	3714      	adds	r7, #20
 801a0d6:	46bd      	mov	sp, r7
 801a0d8:	bc80      	pop	{r7}
 801a0da:	4770      	bx	lr

0801a0dc <SysTimeAdd>:
  * @addtogroup SYSTIME_exported_function
  *  @{
  */

SysTime_t SysTimeAdd( SysTime_t a, SysTime_t b )
{
 801a0dc:	b082      	sub	sp, #8
 801a0de:	b480      	push	{r7}
 801a0e0:	b087      	sub	sp, #28
 801a0e2:	af00      	add	r7, sp, #0
 801a0e4:	60f8      	str	r0, [r7, #12]
 801a0e6:	1d38      	adds	r0, r7, #4
 801a0e8:	e880 0006 	stmia.w	r0, {r1, r2}
 801a0ec:	627b      	str	r3, [r7, #36]	@ 0x24
  SysTime_t c =  { .Seconds = 0, .SubSeconds = 0 };
 801a0ee:	2300      	movs	r3, #0
 801a0f0:	613b      	str	r3, [r7, #16]
 801a0f2:	2300      	movs	r3, #0
 801a0f4:	82bb      	strh	r3, [r7, #20]

  c.Seconds = a.Seconds + b.Seconds;
 801a0f6:	687a      	ldr	r2, [r7, #4]
 801a0f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a0fa:	4413      	add	r3, r2
 801a0fc:	613b      	str	r3, [r7, #16]
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 801a0fe:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 801a102:	b29a      	uxth	r2, r3
 801a104:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 801a108:	b29b      	uxth	r3, r3
 801a10a:	4413      	add	r3, r2
 801a10c:	b29b      	uxth	r3, r3
 801a10e:	b21b      	sxth	r3, r3
 801a110:	82bb      	strh	r3, [r7, #20]
  if( c.SubSeconds >= 1000 )
 801a112:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801a116:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 801a11a:	db0a      	blt.n	801a132 <SysTimeAdd+0x56>
  {
    c.Seconds++;
 801a11c:	693b      	ldr	r3, [r7, #16]
 801a11e:	3301      	adds	r3, #1
 801a120:	613b      	str	r3, [r7, #16]
    c.SubSeconds -= 1000;
 801a122:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801a126:	b29b      	uxth	r3, r3
 801a128:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 801a12c:	b29b      	uxth	r3, r3
 801a12e:	b21b      	sxth	r3, r3
 801a130:	82bb      	strh	r3, [r7, #20]
  }
  return c;
 801a132:	68fb      	ldr	r3, [r7, #12]
 801a134:	461a      	mov	r2, r3
 801a136:	f107 0310 	add.w	r3, r7, #16
 801a13a:	e893 0003 	ldmia.w	r3, {r0, r1}
 801a13e:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801a142:	68f8      	ldr	r0, [r7, #12]
 801a144:	371c      	adds	r7, #28
 801a146:	46bd      	mov	sp, r7
 801a148:	bc80      	pop	{r7}
 801a14a:	b002      	add	sp, #8
 801a14c:	4770      	bx	lr

0801a14e <SysTimeSub>:

SysTime_t SysTimeSub( SysTime_t a, SysTime_t b )
{
 801a14e:	b082      	sub	sp, #8
 801a150:	b480      	push	{r7}
 801a152:	b087      	sub	sp, #28
 801a154:	af00      	add	r7, sp, #0
 801a156:	60f8      	str	r0, [r7, #12]
 801a158:	1d38      	adds	r0, r7, #4
 801a15a:	e880 0006 	stmia.w	r0, {r1, r2}
 801a15e:	627b      	str	r3, [r7, #36]	@ 0x24
  SysTime_t c = { .Seconds = 0, .SubSeconds = 0 };
 801a160:	2300      	movs	r3, #0
 801a162:	613b      	str	r3, [r7, #16]
 801a164:	2300      	movs	r3, #0
 801a166:	82bb      	strh	r3, [r7, #20]

  c.Seconds = a.Seconds - b.Seconds;
 801a168:	687a      	ldr	r2, [r7, #4]
 801a16a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a16c:	1ad3      	subs	r3, r2, r3
 801a16e:	613b      	str	r3, [r7, #16]
  c.SubSeconds = a.SubSeconds - b.SubSeconds;
 801a170:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 801a174:	b29a      	uxth	r2, r3
 801a176:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 801a17a:	b29b      	uxth	r3, r3
 801a17c:	1ad3      	subs	r3, r2, r3
 801a17e:	b29b      	uxth	r3, r3
 801a180:	b21b      	sxth	r3, r3
 801a182:	82bb      	strh	r3, [r7, #20]
  if( c.SubSeconds < 0 )
 801a184:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801a188:	2b00      	cmp	r3, #0
 801a18a:	da0a      	bge.n	801a1a2 <SysTimeSub+0x54>
  {
    c.Seconds--;
 801a18c:	693b      	ldr	r3, [r7, #16]
 801a18e:	3b01      	subs	r3, #1
 801a190:	613b      	str	r3, [r7, #16]
    c.SubSeconds += 1000;
 801a192:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801a196:	b29b      	uxth	r3, r3
 801a198:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 801a19c:	b29b      	uxth	r3, r3
 801a19e:	b21b      	sxth	r3, r3
 801a1a0:	82bb      	strh	r3, [r7, #20]
  }
  return c;
 801a1a2:	68fb      	ldr	r3, [r7, #12]
 801a1a4:	461a      	mov	r2, r3
 801a1a6:	f107 0310 	add.w	r3, r7, #16
 801a1aa:	e893 0003 	ldmia.w	r3, {r0, r1}
 801a1ae:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801a1b2:	68f8      	ldr	r0, [r7, #12]
 801a1b4:	371c      	adds	r7, #28
 801a1b6:	46bd      	mov	sp, r7
 801a1b8:	bc80      	pop	{r7}
 801a1ba:	b002      	add	sp, #8
 801a1bc:	4770      	bx	lr
	...

0801a1c0 <SysTimeSet>:

void SysTimeSet( SysTime_t sysTime )
{
 801a1c0:	b580      	push	{r7, lr}
 801a1c2:	b088      	sub	sp, #32
 801a1c4:	af02      	add	r7, sp, #8
 801a1c6:	463b      	mov	r3, r7
 801a1c8:	e883 0003 	stmia.w	r3, {r0, r1}
  SysTime_t DeltaTime;

  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801a1cc:	2300      	movs	r3, #0
 801a1ce:	60bb      	str	r3, [r7, #8]
 801a1d0:	2300      	movs	r3, #0
 801a1d2:	81bb      	strh	r3, [r7, #12]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801a1d4:	4b10      	ldr	r3, [pc, #64]	@ (801a218 <SysTimeSet+0x58>)
 801a1d6:	691b      	ldr	r3, [r3, #16]
 801a1d8:	f107 0208 	add.w	r2, r7, #8
 801a1dc:	3204      	adds	r2, #4
 801a1de:	4610      	mov	r0, r2
 801a1e0:	4798      	blx	r3
 801a1e2:	4603      	mov	r3, r0
 801a1e4:	60bb      	str	r3, [r7, #8]

  // sysTime is UNIX epoch
  DeltaTime = SysTimeSub( sysTime, calendarTime );
 801a1e6:	f107 0010 	add.w	r0, r7, #16
 801a1ea:	68fb      	ldr	r3, [r7, #12]
 801a1ec:	9300      	str	r3, [sp, #0]
 801a1ee:	68bb      	ldr	r3, [r7, #8]
 801a1f0:	463a      	mov	r2, r7
 801a1f2:	ca06      	ldmia	r2, {r1, r2}
 801a1f4:	f7ff ffab 	bl	801a14e <SysTimeSub>

  UTIL_SYSTIMDriver.BKUPWrite_Seconds( DeltaTime.Seconds );
 801a1f8:	4b07      	ldr	r3, [pc, #28]	@ (801a218 <SysTimeSet+0x58>)
 801a1fa:	681b      	ldr	r3, [r3, #0]
 801a1fc:	693a      	ldr	r2, [r7, #16]
 801a1fe:	4610      	mov	r0, r2
 801a200:	4798      	blx	r3
  UTIL_SYSTIMDriver.BKUPWrite_SubSeconds( ( uint32_t ) DeltaTime.SubSeconds );
 801a202:	4b05      	ldr	r3, [pc, #20]	@ (801a218 <SysTimeSet+0x58>)
 801a204:	689b      	ldr	r3, [r3, #8]
 801a206:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 801a20a:	4610      	mov	r0, r2
 801a20c:	4798      	blx	r3
}
 801a20e:	bf00      	nop
 801a210:	3718      	adds	r7, #24
 801a212:	46bd      	mov	sp, r7
 801a214:	bd80      	pop	{r7, pc}
 801a216:	bf00      	nop
 801a218:	0801c160 	.word	0x0801c160

0801a21c <SysTimeGet>:

SysTime_t SysTimeGet( void )
{
 801a21c:	b580      	push	{r7, lr}
 801a21e:	b08a      	sub	sp, #40	@ 0x28
 801a220:	af02      	add	r7, sp, #8
 801a222:	6078      	str	r0, [r7, #4]
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801a224:	2300      	movs	r3, #0
 801a226:	61bb      	str	r3, [r7, #24]
 801a228:	2300      	movs	r3, #0
 801a22a:	83bb      	strh	r3, [r7, #28]
  SysTime_t sysTime = { .Seconds = 0, .SubSeconds = 0 };
 801a22c:	2300      	movs	r3, #0
 801a22e:	613b      	str	r3, [r7, #16]
 801a230:	2300      	movs	r3, #0
 801a232:	82bb      	strh	r3, [r7, #20]
  SysTime_t DeltaTime;

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801a234:	4b14      	ldr	r3, [pc, #80]	@ (801a288 <SysTimeGet+0x6c>)
 801a236:	691b      	ldr	r3, [r3, #16]
 801a238:	f107 0218 	add.w	r2, r7, #24
 801a23c:	3204      	adds	r2, #4
 801a23e:	4610      	mov	r0, r2
 801a240:	4798      	blx	r3
 801a242:	4603      	mov	r3, r0
 801a244:	61bb      	str	r3, [r7, #24]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 801a246:	4b10      	ldr	r3, [pc, #64]	@ (801a288 <SysTimeGet+0x6c>)
 801a248:	68db      	ldr	r3, [r3, #12]
 801a24a:	4798      	blx	r3
 801a24c:	4603      	mov	r3, r0
 801a24e:	b21b      	sxth	r3, r3
 801a250:	81bb      	strh	r3, [r7, #12]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 801a252:	4b0d      	ldr	r3, [pc, #52]	@ (801a288 <SysTimeGet+0x6c>)
 801a254:	685b      	ldr	r3, [r3, #4]
 801a256:	4798      	blx	r3
 801a258:	4603      	mov	r3, r0
 801a25a:	60bb      	str	r3, [r7, #8]

  sysTime = SysTimeAdd( DeltaTime, calendarTime );
 801a25c:	f107 0010 	add.w	r0, r7, #16
 801a260:	69fb      	ldr	r3, [r7, #28]
 801a262:	9300      	str	r3, [sp, #0]
 801a264:	69bb      	ldr	r3, [r7, #24]
 801a266:	f107 0208 	add.w	r2, r7, #8
 801a26a:	ca06      	ldmia	r2, {r1, r2}
 801a26c:	f7ff ff36 	bl	801a0dc <SysTimeAdd>

  return sysTime;
 801a270:	687b      	ldr	r3, [r7, #4]
 801a272:	461a      	mov	r2, r3
 801a274:	f107 0310 	add.w	r3, r7, #16
 801a278:	e893 0003 	ldmia.w	r3, {r0, r1}
 801a27c:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801a280:	6878      	ldr	r0, [r7, #4]
 801a282:	3720      	adds	r7, #32
 801a284:	46bd      	mov	sp, r7
 801a286:	bd80      	pop	{r7, pc}
 801a288:	0801c160 	.word	0x0801c160

0801a28c <SysTimeGetMcuTime>:


SysTime_t SysTimeGetMcuTime( void )
{
 801a28c:	b580      	push	{r7, lr}
 801a28e:	b084      	sub	sp, #16
 801a290:	af00      	add	r7, sp, #0
 801a292:	6078      	str	r0, [r7, #4]
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801a294:	2300      	movs	r3, #0
 801a296:	60bb      	str	r3, [r7, #8]
 801a298:	2300      	movs	r3, #0
 801a29a:	81bb      	strh	r3, [r7, #12]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801a29c:	4b0a      	ldr	r3, [pc, #40]	@ (801a2c8 <SysTimeGetMcuTime+0x3c>)
 801a29e:	691b      	ldr	r3, [r3, #16]
 801a2a0:	f107 0208 	add.w	r2, r7, #8
 801a2a4:	3204      	adds	r2, #4
 801a2a6:	4610      	mov	r0, r2
 801a2a8:	4798      	blx	r3
 801a2aa:	4603      	mov	r3, r0
 801a2ac:	60bb      	str	r3, [r7, #8]

  return calendarTime;
 801a2ae:	687b      	ldr	r3, [r7, #4]
 801a2b0:	461a      	mov	r2, r3
 801a2b2:	f107 0308 	add.w	r3, r7, #8
 801a2b6:	e893 0003 	ldmia.w	r3, {r0, r1}
 801a2ba:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801a2be:	6878      	ldr	r0, [r7, #4]
 801a2c0:	3710      	adds	r7, #16
 801a2c2:	46bd      	mov	sp, r7
 801a2c4:	bd80      	pop	{r7, pc}
 801a2c6:	bf00      	nop
 801a2c8:	0801c160 	.word	0x0801c160

0801a2cc <SysTimeToMs>:

uint32_t SysTimeToMs( SysTime_t sysTime )
{
 801a2cc:	b580      	push	{r7, lr}
 801a2ce:	b088      	sub	sp, #32
 801a2d0:	af02      	add	r7, sp, #8
 801a2d2:	463b      	mov	r3, r7
 801a2d4:	e883 0003 	stmia.w	r3, {r0, r1}
  SysTime_t DeltaTime;
  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 801a2d8:	4b0f      	ldr	r3, [pc, #60]	@ (801a318 <SysTimeToMs+0x4c>)
 801a2da:	68db      	ldr	r3, [r3, #12]
 801a2dc:	4798      	blx	r3
 801a2de:	4603      	mov	r3, r0
 801a2e0:	b21b      	sxth	r3, r3
 801a2e2:	82bb      	strh	r3, [r7, #20]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 801a2e4:	4b0c      	ldr	r3, [pc, #48]	@ (801a318 <SysTimeToMs+0x4c>)
 801a2e6:	685b      	ldr	r3, [r3, #4]
 801a2e8:	4798      	blx	r3
 801a2ea:	4603      	mov	r3, r0
 801a2ec:	613b      	str	r3, [r7, #16]

  SysTime_t calendarTime = SysTimeSub( sysTime, DeltaTime );
 801a2ee:	f107 0008 	add.w	r0, r7, #8
 801a2f2:	697b      	ldr	r3, [r7, #20]
 801a2f4:	9300      	str	r3, [sp, #0]
 801a2f6:	693b      	ldr	r3, [r7, #16]
 801a2f8:	463a      	mov	r2, r7
 801a2fa:	ca06      	ldmia	r2, {r1, r2}
 801a2fc:	f7ff ff27 	bl	801a14e <SysTimeSub>
  return calendarTime.Seconds * 1000 + calendarTime.SubSeconds;
 801a300:	68bb      	ldr	r3, [r7, #8]
 801a302:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 801a306:	fb02 f303 	mul.w	r3, r2, r3
 801a30a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 801a30e:	4413      	add	r3, r2
}
 801a310:	4618      	mov	r0, r3
 801a312:	3718      	adds	r7, #24
 801a314:	46bd      	mov	sp, r7
 801a316:	bd80      	pop	{r7, pc}
 801a318:	0801c160 	.word	0x0801c160

0801a31c <SysTimeFromMs>:

SysTime_t SysTimeFromMs( uint32_t timeMs )
{
 801a31c:	b580      	push	{r7, lr}
 801a31e:	b08a      	sub	sp, #40	@ 0x28
 801a320:	af02      	add	r7, sp, #8
 801a322:	6078      	str	r0, [r7, #4]
 801a324:	6039      	str	r1, [r7, #0]
  uint32_t seconds = timeMs / 1000;
 801a326:	683b      	ldr	r3, [r7, #0]
 801a328:	4a19      	ldr	r2, [pc, #100]	@ (801a390 <SysTimeFromMs+0x74>)
 801a32a:	fba2 2303 	umull	r2, r3, r2, r3
 801a32e:	099b      	lsrs	r3, r3, #6
 801a330:	61fb      	str	r3, [r7, #28]
  SysTime_t sysTime = { .Seconds = seconds, .SubSeconds =  timeMs - seconds * 1000 };
 801a332:	69fb      	ldr	r3, [r7, #28]
 801a334:	617b      	str	r3, [r7, #20]
 801a336:	683b      	ldr	r3, [r7, #0]
 801a338:	b29a      	uxth	r2, r3
 801a33a:	69fb      	ldr	r3, [r7, #28]
 801a33c:	b29b      	uxth	r3, r3
 801a33e:	4619      	mov	r1, r3
 801a340:	0149      	lsls	r1, r1, #5
 801a342:	1ac9      	subs	r1, r1, r3
 801a344:	0089      	lsls	r1, r1, #2
 801a346:	440b      	add	r3, r1
 801a348:	00db      	lsls	r3, r3, #3
 801a34a:	b29b      	uxth	r3, r3
 801a34c:	1ad3      	subs	r3, r2, r3
 801a34e:	b29b      	uxth	r3, r3
 801a350:	b21b      	sxth	r3, r3
 801a352:	833b      	strh	r3, [r7, #24]
  SysTime_t DeltaTime = { 0 };
 801a354:	f107 030c 	add.w	r3, r7, #12
 801a358:	2200      	movs	r2, #0
 801a35a:	601a      	str	r2, [r3, #0]
 801a35c:	605a      	str	r2, [r3, #4]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 801a35e:	4b0d      	ldr	r3, [pc, #52]	@ (801a394 <SysTimeFromMs+0x78>)
 801a360:	68db      	ldr	r3, [r3, #12]
 801a362:	4798      	blx	r3
 801a364:	4603      	mov	r3, r0
 801a366:	b21b      	sxth	r3, r3
 801a368:	823b      	strh	r3, [r7, #16]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 801a36a:	4b0a      	ldr	r3, [pc, #40]	@ (801a394 <SysTimeFromMs+0x78>)
 801a36c:	685b      	ldr	r3, [r3, #4]
 801a36e:	4798      	blx	r3
 801a370:	4603      	mov	r3, r0
 801a372:	60fb      	str	r3, [r7, #12]
  return SysTimeAdd( sysTime, DeltaTime );
 801a374:	6878      	ldr	r0, [r7, #4]
 801a376:	693b      	ldr	r3, [r7, #16]
 801a378:	9300      	str	r3, [sp, #0]
 801a37a:	68fb      	ldr	r3, [r7, #12]
 801a37c:	f107 0214 	add.w	r2, r7, #20
 801a380:	ca06      	ldmia	r2, {r1, r2}
 801a382:	f7ff feab 	bl	801a0dc <SysTimeAdd>
}
 801a386:	6878      	ldr	r0, [r7, #4]
 801a388:	3720      	adds	r7, #32
 801a38a:	46bd      	mov	sp, r7
 801a38c:	bd80      	pop	{r7, pc}
 801a38e:	bf00      	nop
 801a390:	10624dd3 	.word	0x10624dd3
 801a394:	0801c160 	.word	0x0801c160

0801a398 <ee_skip_atoi>:
  return sc - s;
}
#endif

static int ee_skip_atoi(const char **s)
{
 801a398:	b480      	push	{r7}
 801a39a:	b085      	sub	sp, #20
 801a39c:	af00      	add	r7, sp, #0
 801a39e:	6078      	str	r0, [r7, #4]
  int i = 0;
 801a3a0:	2300      	movs	r3, #0
 801a3a2:	60fb      	str	r3, [r7, #12]
  while (is_digit(**s)) i = i*10 + *((*s)++) - '0';
 801a3a4:	e00e      	b.n	801a3c4 <ee_skip_atoi+0x2c>
 801a3a6:	68fa      	ldr	r2, [r7, #12]
 801a3a8:	4613      	mov	r3, r2
 801a3aa:	009b      	lsls	r3, r3, #2
 801a3ac:	4413      	add	r3, r2
 801a3ae:	005b      	lsls	r3, r3, #1
 801a3b0:	4618      	mov	r0, r3
 801a3b2:	687b      	ldr	r3, [r7, #4]
 801a3b4:	681b      	ldr	r3, [r3, #0]
 801a3b6:	1c59      	adds	r1, r3, #1
 801a3b8:	687a      	ldr	r2, [r7, #4]
 801a3ba:	6011      	str	r1, [r2, #0]
 801a3bc:	781b      	ldrb	r3, [r3, #0]
 801a3be:	4403      	add	r3, r0
 801a3c0:	3b30      	subs	r3, #48	@ 0x30
 801a3c2:	60fb      	str	r3, [r7, #12]
 801a3c4:	687b      	ldr	r3, [r7, #4]
 801a3c6:	681b      	ldr	r3, [r3, #0]
 801a3c8:	781b      	ldrb	r3, [r3, #0]
 801a3ca:	2b2f      	cmp	r3, #47	@ 0x2f
 801a3cc:	d904      	bls.n	801a3d8 <ee_skip_atoi+0x40>
 801a3ce:	687b      	ldr	r3, [r7, #4]
 801a3d0:	681b      	ldr	r3, [r3, #0]
 801a3d2:	781b      	ldrb	r3, [r3, #0]
 801a3d4:	2b39      	cmp	r3, #57	@ 0x39
 801a3d6:	d9e6      	bls.n	801a3a6 <ee_skip_atoi+0xe>
  return i;
 801a3d8:	68fb      	ldr	r3, [r7, #12]
}
 801a3da:	4618      	mov	r0, r3
 801a3dc:	3714      	adds	r7, #20
 801a3de:	46bd      	mov	sp, r7
 801a3e0:	bc80      	pop	{r7}
 801a3e2:	4770      	bx	lr

0801a3e4 <ee_number>:

#define ASSIGN_STR(_c)  do { *str++ = (_c); max_size--; if (max_size == 0) return str; } while (0)

static char *ee_number(char *str, int max_size, long num, int base, int size, int precision, int type)
{
 801a3e4:	b480      	push	{r7}
 801a3e6:	b099      	sub	sp, #100	@ 0x64
 801a3e8:	af00      	add	r7, sp, #0
 801a3ea:	60f8      	str	r0, [r7, #12]
 801a3ec:	60b9      	str	r1, [r7, #8]
 801a3ee:	607a      	str	r2, [r7, #4]
 801a3f0:	603b      	str	r3, [r7, #0]
  char c;
  char sign, tmp[66];
  char *dig = lower_digits;
 801a3f2:	4b71      	ldr	r3, [pc, #452]	@ (801a5b8 <ee_number+0x1d4>)
 801a3f4:	681b      	ldr	r3, [r3, #0]
 801a3f6:	65bb      	str	r3, [r7, #88]	@ 0x58
  int i;

  if (type & UPPERCASE)  dig = upper_digits;
 801a3f8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801a3fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801a3fe:	2b00      	cmp	r3, #0
 801a400:	d002      	beq.n	801a408 <ee_number+0x24>
 801a402:	4b6e      	ldr	r3, [pc, #440]	@ (801a5bc <ee_number+0x1d8>)
 801a404:	681b      	ldr	r3, [r3, #0]
 801a406:	65bb      	str	r3, [r7, #88]	@ 0x58
#ifdef TINY_PRINTF
#else
  if (type & LEFT) type &= ~ZEROPAD;
#endif
  if (base < 2 || base > 36) return 0;
 801a408:	683b      	ldr	r3, [r7, #0]
 801a40a:	2b01      	cmp	r3, #1
 801a40c:	dd02      	ble.n	801a414 <ee_number+0x30>
 801a40e:	683b      	ldr	r3, [r7, #0]
 801a410:	2b24      	cmp	r3, #36	@ 0x24
 801a412:	dd01      	ble.n	801a418 <ee_number+0x34>
 801a414:	2300      	movs	r3, #0
 801a416:	e0ca      	b.n	801a5ae <ee_number+0x1ca>

  c = (type & ZEROPAD) ? '0' : ' ';
 801a418:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801a41a:	f003 0301 	and.w	r3, r3, #1
 801a41e:	2b00      	cmp	r3, #0
 801a420:	d001      	beq.n	801a426 <ee_number+0x42>
 801a422:	2330      	movs	r3, #48	@ 0x30
 801a424:	e000      	b.n	801a428 <ee_number+0x44>
 801a426:	2320      	movs	r3, #32
 801a428:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  sign = 0;
 801a42c:	2300      	movs	r3, #0
 801a42e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
  if (type & SIGN)
 801a432:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801a434:	f003 0302 	and.w	r3, r3, #2
 801a438:	2b00      	cmp	r3, #0
 801a43a:	d00b      	beq.n	801a454 <ee_number+0x70>
  {
    if (num < 0)
 801a43c:	687b      	ldr	r3, [r7, #4]
 801a43e:	2b00      	cmp	r3, #0
 801a440:	da08      	bge.n	801a454 <ee_number+0x70>
    {
      sign = '-';
 801a442:	232d      	movs	r3, #45	@ 0x2d
 801a444:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
      num = -num;
 801a448:	687b      	ldr	r3, [r7, #4]
 801a44a:	425b      	negs	r3, r3
 801a44c:	607b      	str	r3, [r7, #4]
      size--;
 801a44e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801a450:	3b01      	subs	r3, #1
 801a452:	66bb      	str	r3, [r7, #104]	@ 0x68
    else if (base == 8)
      size--;
  }
#endif

  i = 0;
 801a454:	2300      	movs	r3, #0
 801a456:	657b      	str	r3, [r7, #84]	@ 0x54

  if (num == 0)
 801a458:	687b      	ldr	r3, [r7, #4]
 801a45a:	2b00      	cmp	r3, #0
 801a45c:	d11e      	bne.n	801a49c <ee_number+0xb8>
    tmp[i++] = '0';
 801a45e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a460:	1c5a      	adds	r2, r3, #1
 801a462:	657a      	str	r2, [r7, #84]	@ 0x54
 801a464:	3360      	adds	r3, #96	@ 0x60
 801a466:	443b      	add	r3, r7
 801a468:	2230      	movs	r2, #48	@ 0x30
 801a46a:	f803 2c50 	strb.w	r2, [r3, #-80]
 801a46e:	e018      	b.n	801a4a2 <ee_number+0xbe>
  else
  {
    while (num != 0)
    {
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 801a470:	687b      	ldr	r3, [r7, #4]
 801a472:	683a      	ldr	r2, [r7, #0]
 801a474:	fbb3 f1f2 	udiv	r1, r3, r2
 801a478:	fb01 f202 	mul.w	r2, r1, r2
 801a47c:	1a9b      	subs	r3, r3, r2
 801a47e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801a480:	441a      	add	r2, r3
 801a482:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a484:	1c59      	adds	r1, r3, #1
 801a486:	6579      	str	r1, [r7, #84]	@ 0x54
 801a488:	7812      	ldrb	r2, [r2, #0]
 801a48a:	3360      	adds	r3, #96	@ 0x60
 801a48c:	443b      	add	r3, r7
 801a48e:	f803 2c50 	strb.w	r2, [r3, #-80]
      num = ((unsigned long) num) / (unsigned) base;
 801a492:	687a      	ldr	r2, [r7, #4]
 801a494:	683b      	ldr	r3, [r7, #0]
 801a496:	fbb2 f3f3 	udiv	r3, r2, r3
 801a49a:	607b      	str	r3, [r7, #4]
    while (num != 0)
 801a49c:	687b      	ldr	r3, [r7, #4]
 801a49e:	2b00      	cmp	r3, #0
 801a4a0:	d1e6      	bne.n	801a470 <ee_number+0x8c>
    }
  }

  if (i > precision) precision = i;
 801a4a2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801a4a4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801a4a6:	429a      	cmp	r2, r3
 801a4a8:	dd01      	ble.n	801a4ae <ee_number+0xca>
 801a4aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a4ac:	66fb      	str	r3, [r7, #108]	@ 0x6c
  size -= precision;
 801a4ae:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 801a4b0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801a4b2:	1ad3      	subs	r3, r2, r3
 801a4b4:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 801a4b6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801a4b8:	f003 0301 	and.w	r3, r3, #1
 801a4bc:	2b00      	cmp	r3, #0
 801a4be:	d112      	bne.n	801a4e6 <ee_number+0x102>
 801a4c0:	e00c      	b.n	801a4dc <ee_number+0xf8>
 801a4c2:	68fb      	ldr	r3, [r7, #12]
 801a4c4:	1c5a      	adds	r2, r3, #1
 801a4c6:	60fa      	str	r2, [r7, #12]
 801a4c8:	2220      	movs	r2, #32
 801a4ca:	701a      	strb	r2, [r3, #0]
 801a4cc:	68bb      	ldr	r3, [r7, #8]
 801a4ce:	3b01      	subs	r3, #1
 801a4d0:	60bb      	str	r3, [r7, #8]
 801a4d2:	68bb      	ldr	r3, [r7, #8]
 801a4d4:	2b00      	cmp	r3, #0
 801a4d6:	d101      	bne.n	801a4dc <ee_number+0xf8>
 801a4d8:	68fb      	ldr	r3, [r7, #12]
 801a4da:	e068      	b.n	801a5ae <ee_number+0x1ca>
 801a4dc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801a4de:	1e5a      	subs	r2, r3, #1
 801a4e0:	66ba      	str	r2, [r7, #104]	@ 0x68
 801a4e2:	2b00      	cmp	r3, #0
 801a4e4:	dced      	bgt.n	801a4c2 <ee_number+0xde>
  if (sign) ASSIGN_STR(sign);
 801a4e6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801a4ea:	2b00      	cmp	r3, #0
 801a4ec:	d01b      	beq.n	801a526 <ee_number+0x142>
 801a4ee:	68fb      	ldr	r3, [r7, #12]
 801a4f0:	1c5a      	adds	r2, r3, #1
 801a4f2:	60fa      	str	r2, [r7, #12]
 801a4f4:	f897 205f 	ldrb.w	r2, [r7, #95]	@ 0x5f
 801a4f8:	701a      	strb	r2, [r3, #0]
 801a4fa:	68bb      	ldr	r3, [r7, #8]
 801a4fc:	3b01      	subs	r3, #1
 801a4fe:	60bb      	str	r3, [r7, #8]
 801a500:	68bb      	ldr	r3, [r7, #8]
 801a502:	2b00      	cmp	r3, #0
 801a504:	d10f      	bne.n	801a526 <ee_number+0x142>
 801a506:	68fb      	ldr	r3, [r7, #12]
 801a508:	e051      	b.n	801a5ae <ee_number+0x1ca>
    }
  }
#endif

#ifdef TINY_PRINTF
  while (size-- > 0) ASSIGN_STR(c);
 801a50a:	68fb      	ldr	r3, [r7, #12]
 801a50c:	1c5a      	adds	r2, r3, #1
 801a50e:	60fa      	str	r2, [r7, #12]
 801a510:	f897 2053 	ldrb.w	r2, [r7, #83]	@ 0x53
 801a514:	701a      	strb	r2, [r3, #0]
 801a516:	68bb      	ldr	r3, [r7, #8]
 801a518:	3b01      	subs	r3, #1
 801a51a:	60bb      	str	r3, [r7, #8]
 801a51c:	68bb      	ldr	r3, [r7, #8]
 801a51e:	2b00      	cmp	r3, #0
 801a520:	d101      	bne.n	801a526 <ee_number+0x142>
 801a522:	68fb      	ldr	r3, [r7, #12]
 801a524:	e043      	b.n	801a5ae <ee_number+0x1ca>
 801a526:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801a528:	1e5a      	subs	r2, r3, #1
 801a52a:	66ba      	str	r2, [r7, #104]	@ 0x68
 801a52c:	2b00      	cmp	r3, #0
 801a52e:	dcec      	bgt.n	801a50a <ee_number+0x126>
#else
  if (!(type & LEFT)) while (size-- > 0) ASSIGN_STR(c);
#endif
  while (i < precision--) ASSIGN_STR('0');
 801a530:	e00c      	b.n	801a54c <ee_number+0x168>
 801a532:	68fb      	ldr	r3, [r7, #12]
 801a534:	1c5a      	adds	r2, r3, #1
 801a536:	60fa      	str	r2, [r7, #12]
 801a538:	2230      	movs	r2, #48	@ 0x30
 801a53a:	701a      	strb	r2, [r3, #0]
 801a53c:	68bb      	ldr	r3, [r7, #8]
 801a53e:	3b01      	subs	r3, #1
 801a540:	60bb      	str	r3, [r7, #8]
 801a542:	68bb      	ldr	r3, [r7, #8]
 801a544:	2b00      	cmp	r3, #0
 801a546:	d101      	bne.n	801a54c <ee_number+0x168>
 801a548:	68fb      	ldr	r3, [r7, #12]
 801a54a:	e030      	b.n	801a5ae <ee_number+0x1ca>
 801a54c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801a54e:	1e5a      	subs	r2, r3, #1
 801a550:	66fa      	str	r2, [r7, #108]	@ 0x6c
 801a552:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801a554:	429a      	cmp	r2, r3
 801a556:	dbec      	blt.n	801a532 <ee_number+0x14e>
  while (i-- > 0) ASSIGN_STR(tmp[i]);
 801a558:	e010      	b.n	801a57c <ee_number+0x198>
 801a55a:	68fb      	ldr	r3, [r7, #12]
 801a55c:	1c5a      	adds	r2, r3, #1
 801a55e:	60fa      	str	r2, [r7, #12]
 801a560:	f107 0110 	add.w	r1, r7, #16
 801a564:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801a566:	440a      	add	r2, r1
 801a568:	7812      	ldrb	r2, [r2, #0]
 801a56a:	701a      	strb	r2, [r3, #0]
 801a56c:	68bb      	ldr	r3, [r7, #8]
 801a56e:	3b01      	subs	r3, #1
 801a570:	60bb      	str	r3, [r7, #8]
 801a572:	68bb      	ldr	r3, [r7, #8]
 801a574:	2b00      	cmp	r3, #0
 801a576:	d101      	bne.n	801a57c <ee_number+0x198>
 801a578:	68fb      	ldr	r3, [r7, #12]
 801a57a:	e018      	b.n	801a5ae <ee_number+0x1ca>
 801a57c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a57e:	1e5a      	subs	r2, r3, #1
 801a580:	657a      	str	r2, [r7, #84]	@ 0x54
 801a582:	2b00      	cmp	r3, #0
 801a584:	dce9      	bgt.n	801a55a <ee_number+0x176>
  while (size-- > 0) ASSIGN_STR(' ');
 801a586:	e00c      	b.n	801a5a2 <ee_number+0x1be>
 801a588:	68fb      	ldr	r3, [r7, #12]
 801a58a:	1c5a      	adds	r2, r3, #1
 801a58c:	60fa      	str	r2, [r7, #12]
 801a58e:	2220      	movs	r2, #32
 801a590:	701a      	strb	r2, [r3, #0]
 801a592:	68bb      	ldr	r3, [r7, #8]
 801a594:	3b01      	subs	r3, #1
 801a596:	60bb      	str	r3, [r7, #8]
 801a598:	68bb      	ldr	r3, [r7, #8]
 801a59a:	2b00      	cmp	r3, #0
 801a59c:	d101      	bne.n	801a5a2 <ee_number+0x1be>
 801a59e:	68fb      	ldr	r3, [r7, #12]
 801a5a0:	e005      	b.n	801a5ae <ee_number+0x1ca>
 801a5a2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801a5a4:	1e5a      	subs	r2, r3, #1
 801a5a6:	66ba      	str	r2, [r7, #104]	@ 0x68
 801a5a8:	2b00      	cmp	r3, #0
 801a5aa:	dced      	bgt.n	801a588 <ee_number+0x1a4>

  return str;
 801a5ac:	68fb      	ldr	r3, [r7, #12]
}
 801a5ae:	4618      	mov	r0, r3
 801a5b0:	3764      	adds	r7, #100	@ 0x64
 801a5b2:	46bd      	mov	sp, r7
 801a5b4:	bc80      	pop	{r7}
 801a5b6:	4770      	bx	lr
 801a5b8:	20000148 	.word	0x20000148
 801a5bc:	2000014c 	.word	0x2000014c

0801a5c0 <tiny_vsnprintf_like>:

#define CHECK_STR_SIZE(_buf, _str, _size) \
  if ((((_str) - (_buf)) >= ((_size)-1))) { break; }

int tiny_vsnprintf_like(char *buf, const int size, const char *fmt, va_list args)
{
 801a5c0:	b580      	push	{r7, lr}
 801a5c2:	b092      	sub	sp, #72	@ 0x48
 801a5c4:	af04      	add	r7, sp, #16
 801a5c6:	60f8      	str	r0, [r7, #12]
 801a5c8:	60b9      	str	r1, [r7, #8]
 801a5ca:	607a      	str	r2, [r7, #4]
 801a5cc:	603b      	str	r3, [r7, #0]

  int field_width;      // Width of output field
  int precision;        // Min. # of digits for integers; max number of chars for from string
  int qualifier;        // 'h', 'l', or 'L' for integer fields

  if (size <= 0)
 801a5ce:	68bb      	ldr	r3, [r7, #8]
 801a5d0:	2b00      	cmp	r3, #0
 801a5d2:	dc01      	bgt.n	801a5d8 <tiny_vsnprintf_like+0x18>
  {
    return 0;
 801a5d4:	2300      	movs	r3, #0
 801a5d6:	e13e      	b.n	801a856 <tiny_vsnprintf_like+0x296>
  }

  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 801a5d8:	68fb      	ldr	r3, [r7, #12]
 801a5da:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801a5dc:	e128      	b.n	801a830 <tiny_vsnprintf_like+0x270>
  {
    CHECK_STR_SIZE(buf, str, size);
 801a5de:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801a5e0:	68fb      	ldr	r3, [r7, #12]
 801a5e2:	1ad2      	subs	r2, r2, r3
 801a5e4:	68bb      	ldr	r3, [r7, #8]
 801a5e6:	3b01      	subs	r3, #1
 801a5e8:	429a      	cmp	r2, r3
 801a5ea:	f280 812e 	bge.w	801a84a <tiny_vsnprintf_like+0x28a>

    if (*fmt != '%')
 801a5ee:	687b      	ldr	r3, [r7, #4]
 801a5f0:	781b      	ldrb	r3, [r3, #0]
 801a5f2:	2b25      	cmp	r3, #37	@ 0x25
 801a5f4:	d006      	beq.n	801a604 <tiny_vsnprintf_like+0x44>
    {
      *str++ = *fmt;
 801a5f6:	687a      	ldr	r2, [r7, #4]
 801a5f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a5fa:	1c59      	adds	r1, r3, #1
 801a5fc:	62f9      	str	r1, [r7, #44]	@ 0x2c
 801a5fe:	7812      	ldrb	r2, [r2, #0]
 801a600:	701a      	strb	r2, [r3, #0]
      continue;
 801a602:	e112      	b.n	801a82a <tiny_vsnprintf_like+0x26a>
    }

    // Process flags
    flags = 0;
 801a604:	2300      	movs	r3, #0
 801a606:	623b      	str	r3, [r7, #32]
#ifdef TINY_PRINTF
    /* Support %0, but not %-, %+, %space and %# */
    fmt++;
 801a608:	687b      	ldr	r3, [r7, #4]
 801a60a:	3301      	adds	r3, #1
 801a60c:	607b      	str	r3, [r7, #4]
    if (*fmt == '0')
 801a60e:	687b      	ldr	r3, [r7, #4]
 801a610:	781b      	ldrb	r3, [r3, #0]
 801a612:	2b30      	cmp	r3, #48	@ 0x30
 801a614:	d103      	bne.n	801a61e <tiny_vsnprintf_like+0x5e>
    {
      flags |= ZEROPAD;
 801a616:	6a3b      	ldr	r3, [r7, #32]
 801a618:	f043 0301 	orr.w	r3, r3, #1
 801a61c:	623b      	str	r3, [r7, #32]
      case '0': flags |= ZEROPAD; goto repeat;
    }
#endif

    // Get field width
    field_width = -1;
 801a61e:	f04f 33ff 	mov.w	r3, #4294967295
 801a622:	61fb      	str	r3, [r7, #28]
    if (is_digit(*fmt))
 801a624:	687b      	ldr	r3, [r7, #4]
 801a626:	781b      	ldrb	r3, [r3, #0]
 801a628:	2b2f      	cmp	r3, #47	@ 0x2f
 801a62a:	d908      	bls.n	801a63e <tiny_vsnprintf_like+0x7e>
 801a62c:	687b      	ldr	r3, [r7, #4]
 801a62e:	781b      	ldrb	r3, [r3, #0]
 801a630:	2b39      	cmp	r3, #57	@ 0x39
 801a632:	d804      	bhi.n	801a63e <tiny_vsnprintf_like+0x7e>
      field_width = ee_skip_atoi(&fmt);
 801a634:	1d3b      	adds	r3, r7, #4
 801a636:	4618      	mov	r0, r3
 801a638:	f7ff feae 	bl	801a398 <ee_skip_atoi>
 801a63c:	61f8      	str	r0, [r7, #28]
      }
    }
#endif

    // Get the precision
    precision = -1;
 801a63e:	f04f 33ff 	mov.w	r3, #4294967295
 801a642:	61bb      	str	r3, [r7, #24]
      if (precision < 0) precision = 0;
    }
#endif

    // Get the conversion qualifier
    qualifier = -1;
 801a644:	f04f 33ff 	mov.w	r3, #4294967295
 801a648:	617b      	str	r3, [r7, #20]
      fmt++;
    }
#endif

    // Default base
    base = 10;
 801a64a:	230a      	movs	r3, #10
 801a64c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (*fmt)
 801a64e:	687b      	ldr	r3, [r7, #4]
 801a650:	781b      	ldrb	r3, [r3, #0]
 801a652:	3b58      	subs	r3, #88	@ 0x58
 801a654:	2b20      	cmp	r3, #32
 801a656:	f200 8094 	bhi.w	801a782 <tiny_vsnprintf_like+0x1c2>
 801a65a:	a201      	add	r2, pc, #4	@ (adr r2, 801a660 <tiny_vsnprintf_like+0xa0>)
 801a65c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a660:	0801a76b 	.word	0x0801a76b
 801a664:	0801a783 	.word	0x0801a783
 801a668:	0801a783 	.word	0x0801a783
 801a66c:	0801a783 	.word	0x0801a783
 801a670:	0801a783 	.word	0x0801a783
 801a674:	0801a783 	.word	0x0801a783
 801a678:	0801a783 	.word	0x0801a783
 801a67c:	0801a783 	.word	0x0801a783
 801a680:	0801a783 	.word	0x0801a783
 801a684:	0801a783 	.word	0x0801a783
 801a688:	0801a783 	.word	0x0801a783
 801a68c:	0801a6ef 	.word	0x0801a6ef
 801a690:	0801a779 	.word	0x0801a779
 801a694:	0801a783 	.word	0x0801a783
 801a698:	0801a783 	.word	0x0801a783
 801a69c:	0801a783 	.word	0x0801a783
 801a6a0:	0801a783 	.word	0x0801a783
 801a6a4:	0801a779 	.word	0x0801a779
 801a6a8:	0801a783 	.word	0x0801a783
 801a6ac:	0801a783 	.word	0x0801a783
 801a6b0:	0801a783 	.word	0x0801a783
 801a6b4:	0801a783 	.word	0x0801a783
 801a6b8:	0801a783 	.word	0x0801a783
 801a6bc:	0801a783 	.word	0x0801a783
 801a6c0:	0801a783 	.word	0x0801a783
 801a6c4:	0801a783 	.word	0x0801a783
 801a6c8:	0801a783 	.word	0x0801a783
 801a6cc:	0801a70f 	.word	0x0801a70f
 801a6d0:	0801a783 	.word	0x0801a783
 801a6d4:	0801a7cf 	.word	0x0801a7cf
 801a6d8:	0801a783 	.word	0x0801a783
 801a6dc:	0801a783 	.word	0x0801a783
 801a6e0:	0801a773 	.word	0x0801a773
      case 'c':
#ifdef TINY_PRINTF
#else
        if (!(flags & LEFT))
#endif
          while (--field_width > 0) *str++ = ' ';
 801a6e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a6e6:	1c5a      	adds	r2, r3, #1
 801a6e8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801a6ea:	2220      	movs	r2, #32
 801a6ec:	701a      	strb	r2, [r3, #0]
 801a6ee:	69fb      	ldr	r3, [r7, #28]
 801a6f0:	3b01      	subs	r3, #1
 801a6f2:	61fb      	str	r3, [r7, #28]
 801a6f4:	69fb      	ldr	r3, [r7, #28]
 801a6f6:	2b00      	cmp	r3, #0
 801a6f8:	dcf4      	bgt.n	801a6e4 <tiny_vsnprintf_like+0x124>
        *str++ = (unsigned char) va_arg(args, int);
 801a6fa:	683b      	ldr	r3, [r7, #0]
 801a6fc:	1d1a      	adds	r2, r3, #4
 801a6fe:	603a      	str	r2, [r7, #0]
 801a700:	6819      	ldr	r1, [r3, #0]
 801a702:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a704:	1c5a      	adds	r2, r3, #1
 801a706:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801a708:	b2ca      	uxtb	r2, r1
 801a70a:	701a      	strb	r2, [r3, #0]
#ifdef TINY_PRINTF
#else
        while (--field_width > 0) *str++ = ' ';
#endif
        continue;
 801a70c:	e08d      	b.n	801a82a <tiny_vsnprintf_like+0x26a>

      case 's':
        s = va_arg(args, char *);
 801a70e:	683b      	ldr	r3, [r7, #0]
 801a710:	1d1a      	adds	r2, r3, #4
 801a712:	603a      	str	r2, [r7, #0]
 801a714:	681b      	ldr	r3, [r3, #0]
 801a716:	627b      	str	r3, [r7, #36]	@ 0x24
        if (!s) s = "<NULL>";
 801a718:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a71a:	2b00      	cmp	r3, #0
 801a71c:	d101      	bne.n	801a722 <tiny_vsnprintf_like+0x162>
 801a71e:	4b50      	ldr	r3, [pc, #320]	@ (801a860 <tiny_vsnprintf_like+0x2a0>)
 801a720:	627b      	str	r3, [r7, #36]	@ 0x24
#ifdef TINY_PRINTF
        len = strlen(s);
 801a722:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801a724:	f7e5 fd28 	bl	8000178 <strlen>
 801a728:	4603      	mov	r3, r0
 801a72a:	613b      	str	r3, [r7, #16]
#else
        len = strnlen(s, precision);
        if (!(flags & LEFT))
#endif
          while (len < field_width--) *str++ = ' ';
 801a72c:	e004      	b.n	801a738 <tiny_vsnprintf_like+0x178>
 801a72e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a730:	1c5a      	adds	r2, r3, #1
 801a732:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801a734:	2220      	movs	r2, #32
 801a736:	701a      	strb	r2, [r3, #0]
 801a738:	69fb      	ldr	r3, [r7, #28]
 801a73a:	1e5a      	subs	r2, r3, #1
 801a73c:	61fa      	str	r2, [r7, #28]
 801a73e:	693a      	ldr	r2, [r7, #16]
 801a740:	429a      	cmp	r2, r3
 801a742:	dbf4      	blt.n	801a72e <tiny_vsnprintf_like+0x16e>
        for (i = 0; i < len; ++i) *str++ = *s++;
 801a744:	2300      	movs	r3, #0
 801a746:	62bb      	str	r3, [r7, #40]	@ 0x28
 801a748:	e00a      	b.n	801a760 <tiny_vsnprintf_like+0x1a0>
 801a74a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801a74c:	1c53      	adds	r3, r2, #1
 801a74e:	627b      	str	r3, [r7, #36]	@ 0x24
 801a750:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a752:	1c59      	adds	r1, r3, #1
 801a754:	62f9      	str	r1, [r7, #44]	@ 0x2c
 801a756:	7812      	ldrb	r2, [r2, #0]
 801a758:	701a      	strb	r2, [r3, #0]
 801a75a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a75c:	3301      	adds	r3, #1
 801a75e:	62bb      	str	r3, [r7, #40]	@ 0x28
 801a760:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801a762:	693b      	ldr	r3, [r7, #16]
 801a764:	429a      	cmp	r2, r3
 801a766:	dbf0      	blt.n	801a74a <tiny_vsnprintf_like+0x18a>
#ifdef TINY_PRINTF
#else
        while (len < field_width--) *str++ = ' ';
#endif
        continue;
 801a768:	e05f      	b.n	801a82a <tiny_vsnprintf_like+0x26a>
        base = 8;
        break;
#endif

      case 'X':
        flags |= UPPERCASE;
 801a76a:	6a3b      	ldr	r3, [r7, #32]
 801a76c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801a770:	623b      	str	r3, [r7, #32]

      case 'x':
        base = 16;
 801a772:	2310      	movs	r3, #16
 801a774:	633b      	str	r3, [r7, #48]	@ 0x30
        break;
 801a776:	e02b      	b.n	801a7d0 <tiny_vsnprintf_like+0x210>

      case 'd':
      case 'i':
        flags |= SIGN;
 801a778:	6a3b      	ldr	r3, [r7, #32]
 801a77a:	f043 0302 	orr.w	r3, r3, #2
 801a77e:	623b      	str	r3, [r7, #32]

      case 'u':
        break;
 801a780:	e025      	b.n	801a7ce <tiny_vsnprintf_like+0x20e>
        continue;

#endif

      default:
        if (*fmt != '%') *str++ = '%';
 801a782:	687b      	ldr	r3, [r7, #4]
 801a784:	781b      	ldrb	r3, [r3, #0]
 801a786:	2b25      	cmp	r3, #37	@ 0x25
 801a788:	d004      	beq.n	801a794 <tiny_vsnprintf_like+0x1d4>
 801a78a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a78c:	1c5a      	adds	r2, r3, #1
 801a78e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801a790:	2225      	movs	r2, #37	@ 0x25
 801a792:	701a      	strb	r2, [r3, #0]
        CHECK_STR_SIZE(buf, str, size);
 801a794:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801a796:	68fb      	ldr	r3, [r7, #12]
 801a798:	1ad2      	subs	r2, r2, r3
 801a79a:	68bb      	ldr	r3, [r7, #8]
 801a79c:	3b01      	subs	r3, #1
 801a79e:	429a      	cmp	r2, r3
 801a7a0:	da16      	bge.n	801a7d0 <tiny_vsnprintf_like+0x210>
        if (*fmt)
 801a7a2:	687b      	ldr	r3, [r7, #4]
 801a7a4:	781b      	ldrb	r3, [r3, #0]
 801a7a6:	2b00      	cmp	r3, #0
 801a7a8:	d006      	beq.n	801a7b8 <tiny_vsnprintf_like+0x1f8>
          *str++ = *fmt;
 801a7aa:	687a      	ldr	r2, [r7, #4]
 801a7ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a7ae:	1c59      	adds	r1, r3, #1
 801a7b0:	62f9      	str	r1, [r7, #44]	@ 0x2c
 801a7b2:	7812      	ldrb	r2, [r2, #0]
 801a7b4:	701a      	strb	r2, [r3, #0]
 801a7b6:	e002      	b.n	801a7be <tiny_vsnprintf_like+0x1fe>
        else
          --fmt;
 801a7b8:	687b      	ldr	r3, [r7, #4]
 801a7ba:	3b01      	subs	r3, #1
 801a7bc:	607b      	str	r3, [r7, #4]
        CHECK_STR_SIZE(buf, str, size);
 801a7be:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801a7c0:	68fb      	ldr	r3, [r7, #12]
 801a7c2:	1ad2      	subs	r2, r2, r3
 801a7c4:	68bb      	ldr	r3, [r7, #8]
 801a7c6:	3b01      	subs	r3, #1
 801a7c8:	429a      	cmp	r2, r3
 801a7ca:	db2d      	blt.n	801a828 <tiny_vsnprintf_like+0x268>
 801a7cc:	e000      	b.n	801a7d0 <tiny_vsnprintf_like+0x210>
        break;
 801a7ce:	bf00      	nop
        continue;
    }

    if (qualifier == 'l')
 801a7d0:	697b      	ldr	r3, [r7, #20]
 801a7d2:	2b6c      	cmp	r3, #108	@ 0x6c
 801a7d4:	d105      	bne.n	801a7e2 <tiny_vsnprintf_like+0x222>
      num = va_arg(args, unsigned long);
 801a7d6:	683b      	ldr	r3, [r7, #0]
 801a7d8:	1d1a      	adds	r2, r3, #4
 801a7da:	603a      	str	r2, [r7, #0]
 801a7dc:	681b      	ldr	r3, [r3, #0]
 801a7de:	637b      	str	r3, [r7, #52]	@ 0x34
 801a7e0:	e00f      	b.n	801a802 <tiny_vsnprintf_like+0x242>
    else if (flags & SIGN)
 801a7e2:	6a3b      	ldr	r3, [r7, #32]
 801a7e4:	f003 0302 	and.w	r3, r3, #2
 801a7e8:	2b00      	cmp	r3, #0
 801a7ea:	d005      	beq.n	801a7f8 <tiny_vsnprintf_like+0x238>
      num = va_arg(args, int);
 801a7ec:	683b      	ldr	r3, [r7, #0]
 801a7ee:	1d1a      	adds	r2, r3, #4
 801a7f0:	603a      	str	r2, [r7, #0]
 801a7f2:	681b      	ldr	r3, [r3, #0]
 801a7f4:	637b      	str	r3, [r7, #52]	@ 0x34
 801a7f6:	e004      	b.n	801a802 <tiny_vsnprintf_like+0x242>
    else
      num = va_arg(args, unsigned int);
 801a7f8:	683b      	ldr	r3, [r7, #0]
 801a7fa:	1d1a      	adds	r2, r3, #4
 801a7fc:	603a      	str	r2, [r7, #0]
 801a7fe:	681b      	ldr	r3, [r3, #0]
 801a800:	637b      	str	r3, [r7, #52]	@ 0x34

    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 801a802:	68bb      	ldr	r3, [r7, #8]
 801a804:	1e5a      	subs	r2, r3, #1
 801a806:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801a808:	68fb      	ldr	r3, [r7, #12]
 801a80a:	1acb      	subs	r3, r1, r3
 801a80c:	1ad1      	subs	r1, r2, r3
 801a80e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801a810:	6a3b      	ldr	r3, [r7, #32]
 801a812:	9302      	str	r3, [sp, #8]
 801a814:	69bb      	ldr	r3, [r7, #24]
 801a816:	9301      	str	r3, [sp, #4]
 801a818:	69fb      	ldr	r3, [r7, #28]
 801a81a:	9300      	str	r3, [sp, #0]
 801a81c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a81e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801a820:	f7ff fde0 	bl	801a3e4 <ee_number>
 801a824:	62f8      	str	r0, [r7, #44]	@ 0x2c
 801a826:	e000      	b.n	801a82a <tiny_vsnprintf_like+0x26a>
        continue;
 801a828:	bf00      	nop
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 801a82a:	687b      	ldr	r3, [r7, #4]
 801a82c:	3301      	adds	r3, #1
 801a82e:	607b      	str	r3, [r7, #4]
 801a830:	687b      	ldr	r3, [r7, #4]
 801a832:	781b      	ldrb	r3, [r3, #0]
 801a834:	2b00      	cmp	r3, #0
 801a836:	f47f aed2 	bne.w	801a5de <tiny_vsnprintf_like+0x1e>
 801a83a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801a83c:	68fb      	ldr	r3, [r7, #12]
 801a83e:	1ad2      	subs	r2, r2, r3
 801a840:	68bb      	ldr	r3, [r7, #8]
 801a842:	3b01      	subs	r3, #1
 801a844:	429a      	cmp	r2, r3
 801a846:	f6bf aeca 	bge.w	801a5de <tiny_vsnprintf_like+0x1e>
  }

  *str = '\0';
 801a84a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a84c:	2200      	movs	r2, #0
 801a84e:	701a      	strb	r2, [r3, #0]
  return str - buf;
 801a850:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801a852:	68fb      	ldr	r3, [r7, #12]
 801a854:	1ad3      	subs	r3, r2, r3
}
 801a856:	4618      	mov	r0, r3
 801a858:	3738      	adds	r7, #56	@ 0x38
 801a85a:	46bd      	mov	sp, r7
 801a85c:	bd80      	pop	{r7, pc}
 801a85e:	bf00      	nop
 801a860:	0801c074 	.word	0x0801c074

0801a864 <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 801a864:	b580      	push	{r7, lr}
 801a866:	b090      	sub	sp, #64	@ 0x40
 801a868:	af00      	add	r7, sp, #0
 801a86a:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 801a86c:	4b73      	ldr	r3, [pc, #460]	@ (801aa3c <UTIL_SEQ_Run+0x1d8>)
 801a86e:	681b      	ldr	r3, [r3, #0]
 801a870:	62bb      	str	r3, [r7, #40]	@ 0x28
  SuperMask &= Mask_bm;
 801a872:	4b72      	ldr	r3, [pc, #456]	@ (801aa3c <UTIL_SEQ_Run+0x1d8>)
 801a874:	681a      	ldr	r2, [r3, #0]
 801a876:	687b      	ldr	r3, [r7, #4]
 801a878:	4013      	ands	r3, r2
 801a87a:	4a70      	ldr	r2, [pc, #448]	@ (801aa3c <UTIL_SEQ_Run+0x1d8>)
 801a87c:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 801a87e:	4b70      	ldr	r3, [pc, #448]	@ (801aa40 <UTIL_SEQ_Run+0x1dc>)
 801a880:	681b      	ldr	r3, [r3, #0]
 801a882:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 801a884:	4b6f      	ldr	r3, [pc, #444]	@ (801aa44 <UTIL_SEQ_Run+0x1e0>)
 801a886:	681b      	ldr	r3, [r3, #0]
 801a888:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 801a88a:	4b6f      	ldr	r3, [pc, #444]	@ (801aa48 <UTIL_SEQ_Run+0x1e4>)
 801a88c:	681b      	ldr	r3, [r3, #0]
 801a88e:	633b      	str	r3, [r7, #48]	@ 0x30
  local_evtwaited =  EvtWaited;
 801a890:	4b6e      	ldr	r3, [pc, #440]	@ (801aa4c <UTIL_SEQ_Run+0x1e8>)
 801a892:	681b      	ldr	r3, [r3, #0]
 801a894:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 801a896:	e08d      	b.n	801a9b4 <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 801a898:	2300      	movs	r3, #0
 801a89a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 801a89c:	e002      	b.n	801a8a4 <UTIL_SEQ_Run+0x40>
    {
      counter++;
 801a89e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801a8a0:	3301      	adds	r3, #1
 801a8a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 801a8a4:	4a6a      	ldr	r2, [pc, #424]	@ (801aa50 <UTIL_SEQ_Run+0x1ec>)
 801a8a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801a8a8:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801a8ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a8ae:	401a      	ands	r2, r3
 801a8b0:	4b62      	ldr	r3, [pc, #392]	@ (801aa3c <UTIL_SEQ_Run+0x1d8>)
 801a8b2:	681b      	ldr	r3, [r3, #0]
 801a8b4:	4013      	ands	r3, r2
 801a8b6:	2b00      	cmp	r3, #0
 801a8b8:	d0f1      	beq.n	801a89e <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 801a8ba:	4a65      	ldr	r2, [pc, #404]	@ (801aa50 <UTIL_SEQ_Run+0x1ec>)
 801a8bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801a8be:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801a8c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a8c4:	401a      	ands	r2, r3
 801a8c6:	4b5d      	ldr	r3, [pc, #372]	@ (801aa3c <UTIL_SEQ_Run+0x1d8>)
 801a8c8:	681b      	ldr	r3, [r3, #0]
 801a8ca:	4013      	ands	r3, r2
 801a8cc:	627b      	str	r3, [r7, #36]	@ 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 801a8ce:	4a60      	ldr	r2, [pc, #384]	@ (801aa50 <UTIL_SEQ_Run+0x1ec>)
 801a8d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801a8d2:	00db      	lsls	r3, r3, #3
 801a8d4:	4413      	add	r3, r2
 801a8d6:	685a      	ldr	r2, [r3, #4]
 801a8d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a8da:	4013      	ands	r3, r2
 801a8dc:	2b00      	cmp	r3, #0
 801a8de:	d106      	bne.n	801a8ee <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 801a8e0:	4a5b      	ldr	r2, [pc, #364]	@ (801aa50 <UTIL_SEQ_Run+0x1ec>)
 801a8e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801a8e4:	00db      	lsls	r3, r3, #3
 801a8e6:	4413      	add	r3, r2
 801a8e8:	f04f 32ff 	mov.w	r2, #4294967295
 801a8ec:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 801a8ee:	4a58      	ldr	r2, [pc, #352]	@ (801aa50 <UTIL_SEQ_Run+0x1ec>)
 801a8f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801a8f2:	00db      	lsls	r3, r3, #3
 801a8f4:	4413      	add	r3, r2
 801a8f6:	685a      	ldr	r2, [r3, #4]
 801a8f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a8fa:	4013      	ands	r3, r2
 801a8fc:	4618      	mov	r0, r3
 801a8fe:	f000 f907 	bl	801ab10 <SEQ_BitPosition>
 801a902:	4603      	mov	r3, r0
 801a904:	461a      	mov	r2, r3
 801a906:	4b53      	ldr	r3, [pc, #332]	@ (801aa54 <UTIL_SEQ_Run+0x1f0>)
 801a908:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 801a90a:	4a51      	ldr	r2, [pc, #324]	@ (801aa50 <UTIL_SEQ_Run+0x1ec>)
 801a90c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801a90e:	00db      	lsls	r3, r3, #3
 801a910:	4413      	add	r3, r2
 801a912:	685a      	ldr	r2, [r3, #4]
 801a914:	4b4f      	ldr	r3, [pc, #316]	@ (801aa54 <UTIL_SEQ_Run+0x1f0>)
 801a916:	681b      	ldr	r3, [r3, #0]
 801a918:	2101      	movs	r1, #1
 801a91a:	fa01 f303 	lsl.w	r3, r1, r3
 801a91e:	43db      	mvns	r3, r3
 801a920:	401a      	ands	r2, r3
 801a922:	494b      	ldr	r1, [pc, #300]	@ (801aa50 <UTIL_SEQ_Run+0x1ec>)
 801a924:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801a926:	00db      	lsls	r3, r3, #3
 801a928:	440b      	add	r3, r1
 801a92a:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a92c:	f3ef 8310 	mrs	r3, PRIMASK
 801a930:	61bb      	str	r3, [r7, #24]
  return(result);
 801a932:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801a934:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 801a936:	b672      	cpsid	i
}
 801a938:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 801a93a:	4b46      	ldr	r3, [pc, #280]	@ (801aa54 <UTIL_SEQ_Run+0x1f0>)
 801a93c:	681b      	ldr	r3, [r3, #0]
 801a93e:	2201      	movs	r2, #1
 801a940:	fa02 f303 	lsl.w	r3, r2, r3
 801a944:	43da      	mvns	r2, r3
 801a946:	4b3e      	ldr	r3, [pc, #248]	@ (801aa40 <UTIL_SEQ_Run+0x1dc>)
 801a948:	681b      	ldr	r3, [r3, #0]
 801a94a:	4013      	ands	r3, r2
 801a94c:	4a3c      	ldr	r2, [pc, #240]	@ (801aa40 <UTIL_SEQ_Run+0x1dc>)
 801a94e:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 801a950:	2301      	movs	r3, #1
 801a952:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801a954:	e013      	b.n	801a97e <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 801a956:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801a958:	3b01      	subs	r3, #1
 801a95a:	4a3d      	ldr	r2, [pc, #244]	@ (801aa50 <UTIL_SEQ_Run+0x1ec>)
 801a95c:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 801a960:	4b3c      	ldr	r3, [pc, #240]	@ (801aa54 <UTIL_SEQ_Run+0x1f0>)
 801a962:	681b      	ldr	r3, [r3, #0]
 801a964:	2201      	movs	r2, #1
 801a966:	fa02 f303 	lsl.w	r3, r2, r3
 801a96a:	43da      	mvns	r2, r3
 801a96c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801a96e:	3b01      	subs	r3, #1
 801a970:	400a      	ands	r2, r1
 801a972:	4937      	ldr	r1, [pc, #220]	@ (801aa50 <UTIL_SEQ_Run+0x1ec>)
 801a974:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 801a978:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801a97a:	3b01      	subs	r3, #1
 801a97c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801a97e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801a980:	2b00      	cmp	r3, #0
 801a982:	d1e8      	bne.n	801a956 <UTIL_SEQ_Run+0xf2>
 801a984:	6a3b      	ldr	r3, [r7, #32]
 801a986:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a988:	697b      	ldr	r3, [r7, #20]
 801a98a:	f383 8810 	msr	PRIMASK, r3
}
 801a98e:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 801a990:	4b30      	ldr	r3, [pc, #192]	@ (801aa54 <UTIL_SEQ_Run+0x1f0>)
 801a992:	681b      	ldr	r3, [r3, #0]
 801a994:	4a30      	ldr	r2, [pc, #192]	@ (801aa58 <UTIL_SEQ_Run+0x1f4>)
 801a996:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801a99a:	4798      	blx	r3

    local_taskset = TaskSet;
 801a99c:	4b28      	ldr	r3, [pc, #160]	@ (801aa40 <UTIL_SEQ_Run+0x1dc>)
 801a99e:	681b      	ldr	r3, [r3, #0]
 801a9a0:	63bb      	str	r3, [r7, #56]	@ 0x38
    local_evtset = EvtSet;
 801a9a2:	4b28      	ldr	r3, [pc, #160]	@ (801aa44 <UTIL_SEQ_Run+0x1e0>)
 801a9a4:	681b      	ldr	r3, [r3, #0]
 801a9a6:	637b      	str	r3, [r7, #52]	@ 0x34
    local_taskmask = TaskMask;
 801a9a8:	4b27      	ldr	r3, [pc, #156]	@ (801aa48 <UTIL_SEQ_Run+0x1e4>)
 801a9aa:	681b      	ldr	r3, [r3, #0]
 801a9ac:	633b      	str	r3, [r7, #48]	@ 0x30
    local_evtwaited = EvtWaited;
 801a9ae:	4b27      	ldr	r3, [pc, #156]	@ (801aa4c <UTIL_SEQ_Run+0x1e8>)
 801a9b0:	681b      	ldr	r3, [r3, #0]
 801a9b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 801a9b4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801a9b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a9b8:	401a      	ands	r2, r3
 801a9ba:	4b20      	ldr	r3, [pc, #128]	@ (801aa3c <UTIL_SEQ_Run+0x1d8>)
 801a9bc:	681b      	ldr	r3, [r3, #0]
 801a9be:	4013      	ands	r3, r2
 801a9c0:	2b00      	cmp	r3, #0
 801a9c2:	d005      	beq.n	801a9d0 <UTIL_SEQ_Run+0x16c>
 801a9c4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801a9c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a9c8:	4013      	ands	r3, r2
 801a9ca:	2b00      	cmp	r3, #0
 801a9cc:	f43f af64 	beq.w	801a898 <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 801a9d0:	4b20      	ldr	r3, [pc, #128]	@ (801aa54 <UTIL_SEQ_Run+0x1f0>)
 801a9d2:	f04f 32ff 	mov.w	r2, #4294967295
 801a9d6:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 801a9d8:	f000 f88e 	bl	801aaf8 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a9dc:	f3ef 8310 	mrs	r3, PRIMASK
 801a9e0:	613b      	str	r3, [r7, #16]
  return(result);
 801a9e2:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 801a9e4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801a9e6:	b672      	cpsid	i
}
 801a9e8:	bf00      	nop
  local_taskset = TaskSet;
 801a9ea:	4b15      	ldr	r3, [pc, #84]	@ (801aa40 <UTIL_SEQ_Run+0x1dc>)
 801a9ec:	681b      	ldr	r3, [r3, #0]
 801a9ee:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 801a9f0:	4b14      	ldr	r3, [pc, #80]	@ (801aa44 <UTIL_SEQ_Run+0x1e0>)
 801a9f2:	681b      	ldr	r3, [r3, #0]
 801a9f4:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 801a9f6:	4b14      	ldr	r3, [pc, #80]	@ (801aa48 <UTIL_SEQ_Run+0x1e4>)
 801a9f8:	681b      	ldr	r3, [r3, #0]
 801a9fa:	633b      	str	r3, [r7, #48]	@ 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 801a9fc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801a9fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801aa00:	401a      	ands	r2, r3
 801aa02:	4b0e      	ldr	r3, [pc, #56]	@ (801aa3c <UTIL_SEQ_Run+0x1d8>)
 801aa04:	681b      	ldr	r3, [r3, #0]
 801aa06:	4013      	ands	r3, r2
 801aa08:	2b00      	cmp	r3, #0
 801aa0a:	d107      	bne.n	801aa1c <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 801aa0c:	4b0f      	ldr	r3, [pc, #60]	@ (801aa4c <UTIL_SEQ_Run+0x1e8>)
 801aa0e:	681a      	ldr	r2, [r3, #0]
 801aa10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801aa12:	4013      	ands	r3, r2
 801aa14:	2b00      	cmp	r3, #0
 801aa16:	d101      	bne.n	801aa1c <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 801aa18:	f7e7 f834 	bl	8001a84 <UTIL_SEQ_Idle>
 801aa1c:	69fb      	ldr	r3, [r7, #28]
 801aa1e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801aa20:	68fb      	ldr	r3, [r7, #12]
 801aa22:	f383 8810 	msr	PRIMASK, r3
}
 801aa26:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 801aa28:	f000 f86c 	bl	801ab04 <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 801aa2c:	4a03      	ldr	r2, [pc, #12]	@ (801aa3c <UTIL_SEQ_Run+0x1d8>)
 801aa2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801aa30:	6013      	str	r3, [r2, #0]

  return;
 801aa32:	bf00      	nop
}
 801aa34:	3740      	adds	r7, #64	@ 0x40
 801aa36:	46bd      	mov	sp, r7
 801aa38:	bd80      	pop	{r7, pc}
 801aa3a:	bf00      	nop
 801aa3c:	20000154 	.word	0x20000154
 801aa40:	20001b14 	.word	0x20001b14
 801aa44:	20001b18 	.word	0x20001b18
 801aa48:	20000150 	.word	0x20000150
 801aa4c:	20001b1c 	.word	0x20001b1c
 801aa50:	20001b34 	.word	0x20001b34
 801aa54:	20001b20 	.word	0x20001b20
 801aa58:	20001b24 	.word	0x20001b24

0801aa5c <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 801aa5c:	b580      	push	{r7, lr}
 801aa5e:	b088      	sub	sp, #32
 801aa60:	af00      	add	r7, sp, #0
 801aa62:	60f8      	str	r0, [r7, #12]
 801aa64:	60b9      	str	r1, [r7, #8]
 801aa66:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801aa68:	f3ef 8310 	mrs	r3, PRIMASK
 801aa6c:	617b      	str	r3, [r7, #20]
  return(result);
 801aa6e:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 801aa70:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801aa72:	b672      	cpsid	i
}
 801aa74:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 801aa76:	68f8      	ldr	r0, [r7, #12]
 801aa78:	f000 f84a 	bl	801ab10 <SEQ_BitPosition>
 801aa7c:	4603      	mov	r3, r0
 801aa7e:	4619      	mov	r1, r3
 801aa80:	4a06      	ldr	r2, [pc, #24]	@ (801aa9c <UTIL_SEQ_RegTask+0x40>)
 801aa82:	687b      	ldr	r3, [r7, #4]
 801aa84:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 801aa88:	69fb      	ldr	r3, [r7, #28]
 801aa8a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801aa8c:	69bb      	ldr	r3, [r7, #24]
 801aa8e:	f383 8810 	msr	PRIMASK, r3
}
 801aa92:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 801aa94:	bf00      	nop
}
 801aa96:	3720      	adds	r7, #32
 801aa98:	46bd      	mov	sp, r7
 801aa9a:	bd80      	pop	{r7, pc}
 801aa9c:	20001b24 	.word	0x20001b24

0801aaa0 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 801aaa0:	b480      	push	{r7}
 801aaa2:	b087      	sub	sp, #28
 801aaa4:	af00      	add	r7, sp, #0
 801aaa6:	6078      	str	r0, [r7, #4]
 801aaa8:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801aaaa:	f3ef 8310 	mrs	r3, PRIMASK
 801aaae:	60fb      	str	r3, [r7, #12]
  return(result);
 801aab0:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801aab2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801aab4:	b672      	cpsid	i
}
 801aab6:	bf00      	nop

  TaskSet |= TaskId_bm;
 801aab8:	4b0d      	ldr	r3, [pc, #52]	@ (801aaf0 <UTIL_SEQ_SetTask+0x50>)
 801aaba:	681a      	ldr	r2, [r3, #0]
 801aabc:	687b      	ldr	r3, [r7, #4]
 801aabe:	4313      	orrs	r3, r2
 801aac0:	4a0b      	ldr	r2, [pc, #44]	@ (801aaf0 <UTIL_SEQ_SetTask+0x50>)
 801aac2:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 801aac4:	4a0b      	ldr	r2, [pc, #44]	@ (801aaf4 <UTIL_SEQ_SetTask+0x54>)
 801aac6:	683b      	ldr	r3, [r7, #0]
 801aac8:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801aacc:	687b      	ldr	r3, [r7, #4]
 801aace:	431a      	orrs	r2, r3
 801aad0:	4908      	ldr	r1, [pc, #32]	@ (801aaf4 <UTIL_SEQ_SetTask+0x54>)
 801aad2:	683b      	ldr	r3, [r7, #0]
 801aad4:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 801aad8:	697b      	ldr	r3, [r7, #20]
 801aada:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801aadc:	693b      	ldr	r3, [r7, #16]
 801aade:	f383 8810 	msr	PRIMASK, r3
}
 801aae2:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 801aae4:	bf00      	nop
}
 801aae6:	371c      	adds	r7, #28
 801aae8:	46bd      	mov	sp, r7
 801aaea:	bc80      	pop	{r7}
 801aaec:	4770      	bx	lr
 801aaee:	bf00      	nop
 801aaf0:	20001b14 	.word	0x20001b14
 801aaf4:	20001b34 	.word	0x20001b34

0801aaf8 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 801aaf8:	b480      	push	{r7}
 801aafa:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 801aafc:	bf00      	nop
}
 801aafe:	46bd      	mov	sp, r7
 801ab00:	bc80      	pop	{r7}
 801ab02:	4770      	bx	lr

0801ab04 <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 801ab04:	b480      	push	{r7}
 801ab06:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 801ab08:	bf00      	nop
}
 801ab0a:	46bd      	mov	sp, r7
 801ab0c:	bc80      	pop	{r7}
 801ab0e:	4770      	bx	lr

0801ab10 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 801ab10:	b480      	push	{r7}
 801ab12:	b085      	sub	sp, #20
 801ab14:	af00      	add	r7, sp, #0
 801ab16:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 801ab18:	2300      	movs	r3, #0
 801ab1a:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 801ab1c:	687b      	ldr	r3, [r7, #4]
 801ab1e:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 801ab20:	68bb      	ldr	r3, [r7, #8]
 801ab22:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801ab26:	d204      	bcs.n	801ab32 <SEQ_BitPosition+0x22>
 801ab28:	2310      	movs	r3, #16
 801ab2a:	73fb      	strb	r3, [r7, #15]
 801ab2c:	68bb      	ldr	r3, [r7, #8]
 801ab2e:	041b      	lsls	r3, r3, #16
 801ab30:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 801ab32:	68bb      	ldr	r3, [r7, #8]
 801ab34:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801ab38:	d205      	bcs.n	801ab46 <SEQ_BitPosition+0x36>
 801ab3a:	7bfb      	ldrb	r3, [r7, #15]
 801ab3c:	3308      	adds	r3, #8
 801ab3e:	73fb      	strb	r3, [r7, #15]
 801ab40:	68bb      	ldr	r3, [r7, #8]
 801ab42:	021b      	lsls	r3, r3, #8
 801ab44:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 801ab46:	68bb      	ldr	r3, [r7, #8]
 801ab48:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801ab4c:	d205      	bcs.n	801ab5a <SEQ_BitPosition+0x4a>
 801ab4e:	7bfb      	ldrb	r3, [r7, #15]
 801ab50:	3304      	adds	r3, #4
 801ab52:	73fb      	strb	r3, [r7, #15]
 801ab54:	68bb      	ldr	r3, [r7, #8]
 801ab56:	011b      	lsls	r3, r3, #4
 801ab58:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 801ab5a:	68bb      	ldr	r3, [r7, #8]
 801ab5c:	0f1b      	lsrs	r3, r3, #28
 801ab5e:	4a07      	ldr	r2, [pc, #28]	@ (801ab7c <SEQ_BitPosition+0x6c>)
 801ab60:	5cd2      	ldrb	r2, [r2, r3]
 801ab62:	7bfb      	ldrb	r3, [r7, #15]
 801ab64:	4413      	add	r3, r2
 801ab66:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 801ab68:	7bfb      	ldrb	r3, [r7, #15]
 801ab6a:	f1c3 031f 	rsb	r3, r3, #31
 801ab6e:	b2db      	uxtb	r3, r3
}
 801ab70:	4618      	mov	r0, r3
 801ab72:	3714      	adds	r7, #20
 801ab74:	46bd      	mov	sp, r7
 801ab76:	bc80      	pop	{r7}
 801ab78:	4770      	bx	lr
 801ab7a:	bf00      	nop
 801ab7c:	0801c6b4 	.word	0x0801c6b4

0801ab80 <UTIL_TIMER_Init>:
  * @addtogroup TIMER_SERVER_exported_function
  *  @{
  */

UTIL_TIMER_Status_t UTIL_TIMER_Init(void)
{
 801ab80:	b580      	push	{r7, lr}
 801ab82:	af00      	add	r7, sp, #0
  UTIL_TIMER_INIT_CRITICAL_SECTION();
  TimerListHead = NULL;
 801ab84:	4b04      	ldr	r3, [pc, #16]	@ (801ab98 <UTIL_TIMER_Init+0x18>)
 801ab86:	2200      	movs	r2, #0
 801ab88:	601a      	str	r2, [r3, #0]
  return UTIL_TimerDriver.InitTimer();
 801ab8a:	4b04      	ldr	r3, [pc, #16]	@ (801ab9c <UTIL_TIMER_Init+0x1c>)
 801ab8c:	681b      	ldr	r3, [r3, #0]
 801ab8e:	4798      	blx	r3
 801ab90:	4603      	mov	r3, r0
}
 801ab92:	4618      	mov	r0, r3
 801ab94:	bd80      	pop	{r7, pc}
 801ab96:	bf00      	nop
 801ab98:	20001b3c 	.word	0x20001b3c
 801ab9c:	0801c134 	.word	0x0801c134

0801aba0 <UTIL_TIMER_Create>:
{
  return UTIL_TimerDriver.DeInitTimer();
}

UTIL_TIMER_Status_t UTIL_TIMER_Create( UTIL_TIMER_Object_t *TimerObject, uint32_t PeriodValue, UTIL_TIMER_Mode_t Mode, void ( *Callback )( void *), void *Argument)
{
 801aba0:	b580      	push	{r7, lr}
 801aba2:	b084      	sub	sp, #16
 801aba4:	af00      	add	r7, sp, #0
 801aba6:	60f8      	str	r0, [r7, #12]
 801aba8:	60b9      	str	r1, [r7, #8]
 801abaa:	603b      	str	r3, [r7, #0]
 801abac:	4613      	mov	r3, r2
 801abae:	71fb      	strb	r3, [r7, #7]
  if((TimerObject != NULL) && (Callback != NULL))
 801abb0:	68fb      	ldr	r3, [r7, #12]
 801abb2:	2b00      	cmp	r3, #0
 801abb4:	d023      	beq.n	801abfe <UTIL_TIMER_Create+0x5e>
 801abb6:	683b      	ldr	r3, [r7, #0]
 801abb8:	2b00      	cmp	r3, #0
 801abba:	d020      	beq.n	801abfe <UTIL_TIMER_Create+0x5e>
  {
    TimerObject->Timestamp = 0U;
 801abbc:	68fb      	ldr	r3, [r7, #12]
 801abbe:	2200      	movs	r2, #0
 801abc0:	601a      	str	r2, [r3, #0]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 801abc2:	4b11      	ldr	r3, [pc, #68]	@ (801ac08 <UTIL_TIMER_Create+0x68>)
 801abc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801abc6:	68b8      	ldr	r0, [r7, #8]
 801abc8:	4798      	blx	r3
 801abca:	4602      	mov	r2, r0
 801abcc:	68fb      	ldr	r3, [r7, #12]
 801abce:	605a      	str	r2, [r3, #4]
    TimerObject->IsPending = 0U;
 801abd0:	68fb      	ldr	r3, [r7, #12]
 801abd2:	2200      	movs	r2, #0
 801abd4:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 0U;
 801abd6:	68fb      	ldr	r3, [r7, #12]
 801abd8:	2200      	movs	r2, #0
 801abda:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 801abdc:	68fb      	ldr	r3, [r7, #12]
 801abde:	2200      	movs	r2, #0
 801abe0:	729a      	strb	r2, [r3, #10]
    TimerObject->Callback = Callback;
 801abe2:	68fb      	ldr	r3, [r7, #12]
 801abe4:	683a      	ldr	r2, [r7, #0]
 801abe6:	60da      	str	r2, [r3, #12]
    TimerObject->argument = Argument;
 801abe8:	68fb      	ldr	r3, [r7, #12]
 801abea:	69ba      	ldr	r2, [r7, #24]
 801abec:	611a      	str	r2, [r3, #16]
    TimerObject->Mode = Mode;
 801abee:	68fb      	ldr	r3, [r7, #12]
 801abf0:	79fa      	ldrb	r2, [r7, #7]
 801abf2:	72da      	strb	r2, [r3, #11]
    TimerObject->Next = NULL;
 801abf4:	68fb      	ldr	r3, [r7, #12]
 801abf6:	2200      	movs	r2, #0
 801abf8:	615a      	str	r2, [r3, #20]
    return UTIL_TIMER_OK;
 801abfa:	2300      	movs	r3, #0
 801abfc:	e000      	b.n	801ac00 <UTIL_TIMER_Create+0x60>
  }
  else
  {
    return UTIL_TIMER_INVALID_PARAM;
 801abfe:	2301      	movs	r3, #1
  }
}
 801ac00:	4618      	mov	r0, r3
 801ac02:	3710      	adds	r7, #16
 801ac04:	46bd      	mov	sp, r7
 801ac06:	bd80      	pop	{r7, pc}
 801ac08:	0801c134 	.word	0x0801c134

0801ac0c <UTIL_TIMER_Start>:

UTIL_TIMER_Status_t UTIL_TIMER_Start( UTIL_TIMER_Object_t *TimerObject)
{
 801ac0c:	b580      	push	{r7, lr}
 801ac0e:	b08a      	sub	sp, #40	@ 0x28
 801ac10:	af00      	add	r7, sp, #0
 801ac12:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801ac14:	2300      	movs	r3, #0
 801ac16:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t elapsedTime;
  uint32_t minValue;
  uint32_t ticks;
    
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 801ac1a:	687b      	ldr	r3, [r7, #4]
 801ac1c:	2b00      	cmp	r3, #0
 801ac1e:	d056      	beq.n	801acce <UTIL_TIMER_Start+0xc2>
 801ac20:	6878      	ldr	r0, [r7, #4]
 801ac22:	f000 f9a9 	bl	801af78 <TimerExists>
 801ac26:	4603      	mov	r3, r0
 801ac28:	f083 0301 	eor.w	r3, r3, #1
 801ac2c:	b2db      	uxtb	r3, r3
 801ac2e:	2b00      	cmp	r3, #0
 801ac30:	d04d      	beq.n	801acce <UTIL_TIMER_Start+0xc2>
 801ac32:	687b      	ldr	r3, [r7, #4]
 801ac34:	7a5b      	ldrb	r3, [r3, #9]
 801ac36:	2b00      	cmp	r3, #0
 801ac38:	d149      	bne.n	801acce <UTIL_TIMER_Start+0xc2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ac3a:	f3ef 8310 	mrs	r3, PRIMASK
 801ac3e:	613b      	str	r3, [r7, #16]
  return(result);
 801ac40:	693b      	ldr	r3, [r7, #16]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801ac42:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801ac44:	b672      	cpsid	i
}
 801ac46:	bf00      	nop
    ticks = TimerObject->ReloadValue;
 801ac48:	687b      	ldr	r3, [r7, #4]
 801ac4a:	685b      	ldr	r3, [r3, #4]
 801ac4c:	623b      	str	r3, [r7, #32]
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 801ac4e:	4b24      	ldr	r3, [pc, #144]	@ (801ace0 <UTIL_TIMER_Start+0xd4>)
 801ac50:	6a1b      	ldr	r3, [r3, #32]
 801ac52:	4798      	blx	r3
 801ac54:	61b8      	str	r0, [r7, #24]
    
    if( ticks < minValue )
 801ac56:	6a3a      	ldr	r2, [r7, #32]
 801ac58:	69bb      	ldr	r3, [r7, #24]
 801ac5a:	429a      	cmp	r2, r3
 801ac5c:	d201      	bcs.n	801ac62 <UTIL_TIMER_Start+0x56>
    {
      ticks = minValue;
 801ac5e:	69bb      	ldr	r3, [r7, #24]
 801ac60:	623b      	str	r3, [r7, #32]
    }
    
    TimerObject->Timestamp = ticks;
 801ac62:	687b      	ldr	r3, [r7, #4]
 801ac64:	6a3a      	ldr	r2, [r7, #32]
 801ac66:	601a      	str	r2, [r3, #0]
    TimerObject->IsPending = 0U;
 801ac68:	687b      	ldr	r3, [r7, #4]
 801ac6a:	2200      	movs	r2, #0
 801ac6c:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 1U;
 801ac6e:	687b      	ldr	r3, [r7, #4]
 801ac70:	2201      	movs	r2, #1
 801ac72:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 801ac74:	687b      	ldr	r3, [r7, #4]
 801ac76:	2200      	movs	r2, #0
 801ac78:	729a      	strb	r2, [r3, #10]
    if( TimerListHead == NULL )
 801ac7a:	4b1a      	ldr	r3, [pc, #104]	@ (801ace4 <UTIL_TIMER_Start+0xd8>)
 801ac7c:	681b      	ldr	r3, [r3, #0]
 801ac7e:	2b00      	cmp	r3, #0
 801ac80:	d106      	bne.n	801ac90 <UTIL_TIMER_Start+0x84>
    {
      UTIL_TimerDriver.SetTimerContext();
 801ac82:	4b17      	ldr	r3, [pc, #92]	@ (801ace0 <UTIL_TIMER_Start+0xd4>)
 801ac84:	691b      	ldr	r3, [r3, #16]
 801ac86:	4798      	blx	r3
      TimerInsertNewHeadTimer( TimerObject ); /* insert a timeout at now+obj->Timestamp */
 801ac88:	6878      	ldr	r0, [r7, #4]
 801ac8a:	f000 f9eb 	bl	801b064 <TimerInsertNewHeadTimer>
 801ac8e:	e017      	b.n	801acc0 <UTIL_TIMER_Start+0xb4>
    }
    else 
    {
      elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime( );
 801ac90:	4b13      	ldr	r3, [pc, #76]	@ (801ace0 <UTIL_TIMER_Start+0xd4>)
 801ac92:	699b      	ldr	r3, [r3, #24]
 801ac94:	4798      	blx	r3
 801ac96:	6178      	str	r0, [r7, #20]
      TimerObject->Timestamp += elapsedTime;
 801ac98:	687b      	ldr	r3, [r7, #4]
 801ac9a:	681a      	ldr	r2, [r3, #0]
 801ac9c:	697b      	ldr	r3, [r7, #20]
 801ac9e:	441a      	add	r2, r3
 801aca0:	687b      	ldr	r3, [r7, #4]
 801aca2:	601a      	str	r2, [r3, #0]
      
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 801aca4:	687b      	ldr	r3, [r7, #4]
 801aca6:	681a      	ldr	r2, [r3, #0]
 801aca8:	4b0e      	ldr	r3, [pc, #56]	@ (801ace4 <UTIL_TIMER_Start+0xd8>)
 801acaa:	681b      	ldr	r3, [r3, #0]
 801acac:	681b      	ldr	r3, [r3, #0]
 801acae:	429a      	cmp	r2, r3
 801acb0:	d203      	bcs.n	801acba <UTIL_TIMER_Start+0xae>
      {
        TimerInsertNewHeadTimer( TimerObject);
 801acb2:	6878      	ldr	r0, [r7, #4]
 801acb4:	f000 f9d6 	bl	801b064 <TimerInsertNewHeadTimer>
 801acb8:	e002      	b.n	801acc0 <UTIL_TIMER_Start+0xb4>
      }
      else
      {
        TimerInsertTimer( TimerObject);
 801acba:	6878      	ldr	r0, [r7, #4]
 801acbc:	f000 f9a2 	bl	801b004 <TimerInsertTimer>
 801acc0:	69fb      	ldr	r3, [r7, #28]
 801acc2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801acc4:	68fb      	ldr	r3, [r7, #12]
 801acc6:	f383 8810 	msr	PRIMASK, r3
}
 801acca:	bf00      	nop
  {
 801accc:	e002      	b.n	801acd4 <UTIL_TIMER_Start+0xc8>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret =  UTIL_TIMER_INVALID_PARAM;
 801acce:	2301      	movs	r3, #1
 801acd0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }
  return ret;
 801acd4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 801acd8:	4618      	mov	r0, r3
 801acda:	3728      	adds	r7, #40	@ 0x28
 801acdc:	46bd      	mov	sp, r7
 801acde:	bd80      	pop	{r7, pc}
 801ace0:	0801c134 	.word	0x0801c134
 801ace4:	20001b3c 	.word	0x20001b3c

0801ace8 <UTIL_TIMER_Stop>:
  }
  return ret;
}

UTIL_TIMER_Status_t UTIL_TIMER_Stop( UTIL_TIMER_Object_t *TimerObject )
{
 801ace8:	b580      	push	{r7, lr}
 801acea:	b088      	sub	sp, #32
 801acec:	af00      	add	r7, sp, #0
 801acee:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801acf0:	2300      	movs	r3, #0
 801acf2:	77fb      	strb	r3, [r7, #31]

  if (NULL != TimerObject)
 801acf4:	687b      	ldr	r3, [r7, #4]
 801acf6:	2b00      	cmp	r3, #0
 801acf8:	d05b      	beq.n	801adb2 <UTIL_TIMER_Stop+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801acfa:	f3ef 8310 	mrs	r3, PRIMASK
 801acfe:	60fb      	str	r3, [r7, #12]
  return(result);
 801ad00:	68fb      	ldr	r3, [r7, #12]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801ad02:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 801ad04:	b672      	cpsid	i
}
 801ad06:	bf00      	nop
    UTIL_TIMER_Object_t* prev = TimerListHead;
 801ad08:	4b2d      	ldr	r3, [pc, #180]	@ (801adc0 <UTIL_TIMER_Stop+0xd8>)
 801ad0a:	681b      	ldr	r3, [r3, #0]
 801ad0c:	61bb      	str	r3, [r7, #24]
    UTIL_TIMER_Object_t* cur = TimerListHead;
 801ad0e:	4b2c      	ldr	r3, [pc, #176]	@ (801adc0 <UTIL_TIMER_Stop+0xd8>)
 801ad10:	681b      	ldr	r3, [r3, #0]
 801ad12:	617b      	str	r3, [r7, #20]
    TimerObject->IsReloadStopped = 1U;
 801ad14:	687b      	ldr	r3, [r7, #4]
 801ad16:	2201      	movs	r2, #1
 801ad18:	729a      	strb	r2, [r3, #10]
    
    /* List is empty or the Obj to stop does not exist  */
    if(NULL != TimerListHead)
 801ad1a:	4b29      	ldr	r3, [pc, #164]	@ (801adc0 <UTIL_TIMER_Stop+0xd8>)
 801ad1c:	681b      	ldr	r3, [r3, #0]
 801ad1e:	2b00      	cmp	r3, #0
 801ad20:	d041      	beq.n	801ada6 <UTIL_TIMER_Stop+0xbe>
    {
      TimerObject->IsRunning = 0U;
 801ad22:	687b      	ldr	r3, [r7, #4]
 801ad24:	2200      	movs	r2, #0
 801ad26:	725a      	strb	r2, [r3, #9]
      
      if( TimerListHead == TimerObject ) /* Stop the Head */
 801ad28:	4b25      	ldr	r3, [pc, #148]	@ (801adc0 <UTIL_TIMER_Stop+0xd8>)
 801ad2a:	681b      	ldr	r3, [r3, #0]
 801ad2c:	687a      	ldr	r2, [r7, #4]
 801ad2e:	429a      	cmp	r2, r3
 801ad30:	d134      	bne.n	801ad9c <UTIL_TIMER_Stop+0xb4>
      {
          TimerListHead->IsPending = 0;
 801ad32:	4b23      	ldr	r3, [pc, #140]	@ (801adc0 <UTIL_TIMER_Stop+0xd8>)
 801ad34:	681b      	ldr	r3, [r3, #0]
 801ad36:	2200      	movs	r2, #0
 801ad38:	721a      	strb	r2, [r3, #8]
          if( TimerListHead->Next != NULL )
 801ad3a:	4b21      	ldr	r3, [pc, #132]	@ (801adc0 <UTIL_TIMER_Stop+0xd8>)
 801ad3c:	681b      	ldr	r3, [r3, #0]
 801ad3e:	695b      	ldr	r3, [r3, #20]
 801ad40:	2b00      	cmp	r3, #0
 801ad42:	d00a      	beq.n	801ad5a <UTIL_TIMER_Stop+0x72>
          {
            TimerListHead = TimerListHead->Next;
 801ad44:	4b1e      	ldr	r3, [pc, #120]	@ (801adc0 <UTIL_TIMER_Stop+0xd8>)
 801ad46:	681b      	ldr	r3, [r3, #0]
 801ad48:	695b      	ldr	r3, [r3, #20]
 801ad4a:	4a1d      	ldr	r2, [pc, #116]	@ (801adc0 <UTIL_TIMER_Stop+0xd8>)
 801ad4c:	6013      	str	r3, [r2, #0]
            TimerSetTimeout( TimerListHead );
 801ad4e:	4b1c      	ldr	r3, [pc, #112]	@ (801adc0 <UTIL_TIMER_Stop+0xd8>)
 801ad50:	681b      	ldr	r3, [r3, #0]
 801ad52:	4618      	mov	r0, r3
 801ad54:	f000 f92c 	bl	801afb0 <TimerSetTimeout>
 801ad58:	e023      	b.n	801ada2 <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            UTIL_TimerDriver.StopTimerEvt( );
 801ad5a:	4b1a      	ldr	r3, [pc, #104]	@ (801adc4 <UTIL_TIMER_Stop+0xdc>)
 801ad5c:	68db      	ldr	r3, [r3, #12]
 801ad5e:	4798      	blx	r3
            TimerListHead = NULL;
 801ad60:	4b17      	ldr	r3, [pc, #92]	@ (801adc0 <UTIL_TIMER_Stop+0xd8>)
 801ad62:	2200      	movs	r2, #0
 801ad64:	601a      	str	r2, [r3, #0]
 801ad66:	e01c      	b.n	801ada2 <UTIL_TIMER_Stop+0xba>
      }
      else /* Stop an object within the list */
      {      
        while( cur != NULL )
        {
          if( cur == TimerObject )
 801ad68:	697a      	ldr	r2, [r7, #20]
 801ad6a:	687b      	ldr	r3, [r7, #4]
 801ad6c:	429a      	cmp	r2, r3
 801ad6e:	d110      	bne.n	801ad92 <UTIL_TIMER_Stop+0xaa>
          {
            if( cur->Next != NULL )
 801ad70:	697b      	ldr	r3, [r7, #20]
 801ad72:	695b      	ldr	r3, [r3, #20]
 801ad74:	2b00      	cmp	r3, #0
 801ad76:	d006      	beq.n	801ad86 <UTIL_TIMER_Stop+0x9e>
            {
              cur = cur->Next;
 801ad78:	697b      	ldr	r3, [r7, #20]
 801ad7a:	695b      	ldr	r3, [r3, #20]
 801ad7c:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 801ad7e:	69bb      	ldr	r3, [r7, #24]
 801ad80:	697a      	ldr	r2, [r7, #20]
 801ad82:	615a      	str	r2, [r3, #20]
            else
            {
              cur = NULL;
              prev->Next = cur;
            }
            break;
 801ad84:	e00d      	b.n	801ada2 <UTIL_TIMER_Stop+0xba>
              cur = NULL;
 801ad86:	2300      	movs	r3, #0
 801ad88:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 801ad8a:	69bb      	ldr	r3, [r7, #24]
 801ad8c:	697a      	ldr	r2, [r7, #20]
 801ad8e:	615a      	str	r2, [r3, #20]
            break;
 801ad90:	e007      	b.n	801ada2 <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            prev = cur;
 801ad92:	697b      	ldr	r3, [r7, #20]
 801ad94:	61bb      	str	r3, [r7, #24]
            cur = cur->Next;
 801ad96:	697b      	ldr	r3, [r7, #20]
 801ad98:	695b      	ldr	r3, [r3, #20]
 801ad9a:	617b      	str	r3, [r7, #20]
        while( cur != NULL )
 801ad9c:	697b      	ldr	r3, [r7, #20]
 801ad9e:	2b00      	cmp	r3, #0
 801ada0:	d1e2      	bne.n	801ad68 <UTIL_TIMER_Stop+0x80>
          }
        }   
      }
      ret = UTIL_TIMER_OK;
 801ada2:	2300      	movs	r3, #0
 801ada4:	77fb      	strb	r3, [r7, #31]
 801ada6:	693b      	ldr	r3, [r7, #16]
 801ada8:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801adaa:	68bb      	ldr	r3, [r7, #8]
 801adac:	f383 8810 	msr	PRIMASK, r3
}
 801adb0:	e001      	b.n	801adb6 <UTIL_TIMER_Stop+0xce>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret = UTIL_TIMER_INVALID_PARAM;
 801adb2:	2301      	movs	r3, #1
 801adb4:	77fb      	strb	r3, [r7, #31]
  }
  return ret;
 801adb6:	7ffb      	ldrb	r3, [r7, #31]
}
 801adb8:	4618      	mov	r0, r3
 801adba:	3720      	adds	r7, #32
 801adbc:	46bd      	mov	sp, r7
 801adbe:	bd80      	pop	{r7, pc}
 801adc0:	20001b3c 	.word	0x20001b3c
 801adc4:	0801c134 	.word	0x0801c134

0801adc8 <UTIL_TIMER_SetPeriod>:

UTIL_TIMER_Status_t UTIL_TIMER_SetPeriod(UTIL_TIMER_Object_t *TimerObject, uint32_t NewPeriodValue)
{
 801adc8:	b580      	push	{r7, lr}
 801adca:	b084      	sub	sp, #16
 801adcc:	af00      	add	r7, sp, #0
 801adce:	6078      	str	r0, [r7, #4]
 801add0:	6039      	str	r1, [r7, #0]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801add2:	2300      	movs	r3, #0
 801add4:	73fb      	strb	r3, [r7, #15]
  
  if(NULL == TimerObject)
 801add6:	687b      	ldr	r3, [r7, #4]
 801add8:	2b00      	cmp	r3, #0
 801adda:	d102      	bne.n	801ade2 <UTIL_TIMER_SetPeriod+0x1a>
  {
	  ret = UTIL_TIMER_INVALID_PARAM;
 801addc:	2301      	movs	r3, #1
 801adde:	73fb      	strb	r3, [r7, #15]
 801ade0:	e014      	b.n	801ae0c <UTIL_TIMER_SetPeriod+0x44>
  }
  else
  {
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 801ade2:	4b0d      	ldr	r3, [pc, #52]	@ (801ae18 <UTIL_TIMER_SetPeriod+0x50>)
 801ade4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801ade6:	6838      	ldr	r0, [r7, #0]
 801ade8:	4798      	blx	r3
 801adea:	4602      	mov	r2, r0
 801adec:	687b      	ldr	r3, [r7, #4]
 801adee:	605a      	str	r2, [r3, #4]
    if(TimerExists(TimerObject))
 801adf0:	6878      	ldr	r0, [r7, #4]
 801adf2:	f000 f8c1 	bl	801af78 <TimerExists>
 801adf6:	4603      	mov	r3, r0
 801adf8:	2b00      	cmp	r3, #0
 801adfa:	d007      	beq.n	801ae0c <UTIL_TIMER_SetPeriod+0x44>
    {
      (void)UTIL_TIMER_Stop(TimerObject);
 801adfc:	6878      	ldr	r0, [r7, #4]
 801adfe:	f7ff ff73 	bl	801ace8 <UTIL_TIMER_Stop>
      ret = UTIL_TIMER_Start(TimerObject);
 801ae02:	6878      	ldr	r0, [r7, #4]
 801ae04:	f7ff ff02 	bl	801ac0c <UTIL_TIMER_Start>
 801ae08:	4603      	mov	r3, r0
 801ae0a:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret;
 801ae0c:	7bfb      	ldrb	r3, [r7, #15]
}
 801ae0e:	4618      	mov	r0, r3
 801ae10:	3710      	adds	r7, #16
 801ae12:	46bd      	mov	sp, r7
 801ae14:	bd80      	pop	{r7, pc}
 801ae16:	bf00      	nop
 801ae18:	0801c134 	.word	0x0801c134

0801ae1c <UTIL_TIMER_IRQ_Handler>:
	}
	return NextTimer;
}

void UTIL_TIMER_IRQ_Handler( void )
{
 801ae1c:	b590      	push	{r4, r7, lr}
 801ae1e:	b089      	sub	sp, #36	@ 0x24
 801ae20:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ae22:	f3ef 8310 	mrs	r3, PRIMASK
 801ae26:	60bb      	str	r3, [r7, #8]
  return(result);
 801ae28:	68bb      	ldr	r3, [r7, #8]
  UTIL_TIMER_Object_t* cur;
  uint32_t old, now, DeltaContext;

  UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801ae2a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 801ae2c:	b672      	cpsid	i
}
 801ae2e:	bf00      	nop

  old  =  UTIL_TimerDriver.GetTimerContext( );
 801ae30:	4b38      	ldr	r3, [pc, #224]	@ (801af14 <UTIL_TIMER_IRQ_Handler+0xf8>)
 801ae32:	695b      	ldr	r3, [r3, #20]
 801ae34:	4798      	blx	r3
 801ae36:	6178      	str	r0, [r7, #20]
  now  =  UTIL_TimerDriver.SetTimerContext( );
 801ae38:	4b36      	ldr	r3, [pc, #216]	@ (801af14 <UTIL_TIMER_IRQ_Handler+0xf8>)
 801ae3a:	691b      	ldr	r3, [r3, #16]
 801ae3c:	4798      	blx	r3
 801ae3e:	6138      	str	r0, [r7, #16]

  DeltaContext = now  - old; /*intentional wrap around */
 801ae40:	693a      	ldr	r2, [r7, #16]
 801ae42:	697b      	ldr	r3, [r7, #20]
 801ae44:	1ad3      	subs	r3, r2, r3
 801ae46:	60fb      	str	r3, [r7, #12]
  
  /* update timeStamp based upon new Time Reference*/
  /* because delta context should never exceed 2^32*/
  if ( TimerListHead != NULL )
 801ae48:	4b33      	ldr	r3, [pc, #204]	@ (801af18 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801ae4a:	681b      	ldr	r3, [r3, #0]
 801ae4c:	2b00      	cmp	r3, #0
 801ae4e:	d037      	beq.n	801aec0 <UTIL_TIMER_IRQ_Handler+0xa4>
  {
    cur = TimerListHead;
 801ae50:	4b31      	ldr	r3, [pc, #196]	@ (801af18 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801ae52:	681b      	ldr	r3, [r3, #0]
 801ae54:	61fb      	str	r3, [r7, #28]
	do {
      if (cur->Timestamp > DeltaContext)
 801ae56:	69fb      	ldr	r3, [r7, #28]
 801ae58:	681b      	ldr	r3, [r3, #0]
 801ae5a:	68fa      	ldr	r2, [r7, #12]
 801ae5c:	429a      	cmp	r2, r3
 801ae5e:	d206      	bcs.n	801ae6e <UTIL_TIMER_IRQ_Handler+0x52>
      {
        cur->Timestamp -= DeltaContext;
 801ae60:	69fb      	ldr	r3, [r7, #28]
 801ae62:	681a      	ldr	r2, [r3, #0]
 801ae64:	68fb      	ldr	r3, [r7, #12]
 801ae66:	1ad2      	subs	r2, r2, r3
 801ae68:	69fb      	ldr	r3, [r7, #28]
 801ae6a:	601a      	str	r2, [r3, #0]
 801ae6c:	e002      	b.n	801ae74 <UTIL_TIMER_IRQ_Handler+0x58>
      }
      else
      {
        cur->Timestamp = 0;
 801ae6e:	69fb      	ldr	r3, [r7, #28]
 801ae70:	2200      	movs	r2, #0
 801ae72:	601a      	str	r2, [r3, #0]
      }
      cur = cur->Next;
 801ae74:	69fb      	ldr	r3, [r7, #28]
 801ae76:	695b      	ldr	r3, [r3, #20]
 801ae78:	61fb      	str	r3, [r7, #28]
    } while(cur != NULL);
 801ae7a:	69fb      	ldr	r3, [r7, #28]
 801ae7c:	2b00      	cmp	r3, #0
 801ae7e:	d1ea      	bne.n	801ae56 <UTIL_TIMER_IRQ_Handler+0x3a>
  }

  /* Execute expired timer and update the list */
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 801ae80:	e01e      	b.n	801aec0 <UTIL_TIMER_IRQ_Handler+0xa4>
  {
      cur = TimerListHead;
 801ae82:	4b25      	ldr	r3, [pc, #148]	@ (801af18 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801ae84:	681b      	ldr	r3, [r3, #0]
 801ae86:	61fb      	str	r3, [r7, #28]
      TimerListHead = TimerListHead->Next;
 801ae88:	4b23      	ldr	r3, [pc, #140]	@ (801af18 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801ae8a:	681b      	ldr	r3, [r3, #0]
 801ae8c:	695b      	ldr	r3, [r3, #20]
 801ae8e:	4a22      	ldr	r2, [pc, #136]	@ (801af18 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801ae90:	6013      	str	r3, [r2, #0]
      cur->IsPending = 0;
 801ae92:	69fb      	ldr	r3, [r7, #28]
 801ae94:	2200      	movs	r2, #0
 801ae96:	721a      	strb	r2, [r3, #8]
      cur->IsRunning = 0;
 801ae98:	69fb      	ldr	r3, [r7, #28]
 801ae9a:	2200      	movs	r2, #0
 801ae9c:	725a      	strb	r2, [r3, #9]
      cur->Callback(cur->argument);
 801ae9e:	69fb      	ldr	r3, [r7, #28]
 801aea0:	68db      	ldr	r3, [r3, #12]
 801aea2:	69fa      	ldr	r2, [r7, #28]
 801aea4:	6912      	ldr	r2, [r2, #16]
 801aea6:	4610      	mov	r0, r2
 801aea8:	4798      	blx	r3
      if(( cur->Mode == UTIL_TIMER_PERIODIC) && (cur->IsReloadStopped == 0U))
 801aeaa:	69fb      	ldr	r3, [r7, #28]
 801aeac:	7adb      	ldrb	r3, [r3, #11]
 801aeae:	2b01      	cmp	r3, #1
 801aeb0:	d106      	bne.n	801aec0 <UTIL_TIMER_IRQ_Handler+0xa4>
 801aeb2:	69fb      	ldr	r3, [r7, #28]
 801aeb4:	7a9b      	ldrb	r3, [r3, #10]
 801aeb6:	2b00      	cmp	r3, #0
 801aeb8:	d102      	bne.n	801aec0 <UTIL_TIMER_IRQ_Handler+0xa4>
      {
        (void)UTIL_TIMER_Start(cur);
 801aeba:	69f8      	ldr	r0, [r7, #28]
 801aebc:	f7ff fea6 	bl	801ac0c <UTIL_TIMER_Start>
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 801aec0:	4b15      	ldr	r3, [pc, #84]	@ (801af18 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801aec2:	681b      	ldr	r3, [r3, #0]
 801aec4:	2b00      	cmp	r3, #0
 801aec6:	d00d      	beq.n	801aee4 <UTIL_TIMER_IRQ_Handler+0xc8>
 801aec8:	4b13      	ldr	r3, [pc, #76]	@ (801af18 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801aeca:	681b      	ldr	r3, [r3, #0]
 801aecc:	681b      	ldr	r3, [r3, #0]
 801aece:	2b00      	cmp	r3, #0
 801aed0:	d0d7      	beq.n	801ae82 <UTIL_TIMER_IRQ_Handler+0x66>
 801aed2:	4b11      	ldr	r3, [pc, #68]	@ (801af18 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801aed4:	681b      	ldr	r3, [r3, #0]
 801aed6:	681c      	ldr	r4, [r3, #0]
 801aed8:	4b0e      	ldr	r3, [pc, #56]	@ (801af14 <UTIL_TIMER_IRQ_Handler+0xf8>)
 801aeda:	699b      	ldr	r3, [r3, #24]
 801aedc:	4798      	blx	r3
 801aede:	4603      	mov	r3, r0
 801aee0:	429c      	cmp	r4, r3
 801aee2:	d3ce      	bcc.n	801ae82 <UTIL_TIMER_IRQ_Handler+0x66>
      }
  }

  /* start the next TimerListHead if it exists and it is not pending*/
  if(( TimerListHead != NULL ) && (TimerListHead->IsPending == 0U))
 801aee4:	4b0c      	ldr	r3, [pc, #48]	@ (801af18 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801aee6:	681b      	ldr	r3, [r3, #0]
 801aee8:	2b00      	cmp	r3, #0
 801aeea:	d009      	beq.n	801af00 <UTIL_TIMER_IRQ_Handler+0xe4>
 801aeec:	4b0a      	ldr	r3, [pc, #40]	@ (801af18 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801aeee:	681b      	ldr	r3, [r3, #0]
 801aef0:	7a1b      	ldrb	r3, [r3, #8]
 801aef2:	2b00      	cmp	r3, #0
 801aef4:	d104      	bne.n	801af00 <UTIL_TIMER_IRQ_Handler+0xe4>
  {
    TimerSetTimeout( TimerListHead );
 801aef6:	4b08      	ldr	r3, [pc, #32]	@ (801af18 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801aef8:	681b      	ldr	r3, [r3, #0]
 801aefa:	4618      	mov	r0, r3
 801aefc:	f000 f858 	bl	801afb0 <TimerSetTimeout>
 801af00:	69bb      	ldr	r3, [r7, #24]
 801af02:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801af04:	687b      	ldr	r3, [r7, #4]
 801af06:	f383 8810 	msr	PRIMASK, r3
}
 801af0a:	bf00      	nop
  }
  UTIL_TIMER_EXIT_CRITICAL_SECTION();
}
 801af0c:	bf00      	nop
 801af0e:	3724      	adds	r7, #36	@ 0x24
 801af10:	46bd      	mov	sp, r7
 801af12:	bd90      	pop	{r4, r7, pc}
 801af14:	0801c134 	.word	0x0801c134
 801af18:	20001b3c 	.word	0x20001b3c

0801af1c <UTIL_TIMER_GetCurrentTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetCurrentTime(void)
{
 801af1c:	b580      	push	{r7, lr}
 801af1e:	b082      	sub	sp, #8
 801af20:	af00      	add	r7, sp, #0
  uint32_t now = UTIL_TimerDriver.GetTimerValue( );
 801af22:	4b06      	ldr	r3, [pc, #24]	@ (801af3c <UTIL_TIMER_GetCurrentTime+0x20>)
 801af24:	69db      	ldr	r3, [r3, #28]
 801af26:	4798      	blx	r3
 801af28:	6078      	str	r0, [r7, #4]
  return  UTIL_TimerDriver.Tick2ms(now);
 801af2a:	4b04      	ldr	r3, [pc, #16]	@ (801af3c <UTIL_TIMER_GetCurrentTime+0x20>)
 801af2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801af2e:	6878      	ldr	r0, [r7, #4]
 801af30:	4798      	blx	r3
 801af32:	4603      	mov	r3, r0
}
 801af34:	4618      	mov	r0, r3
 801af36:	3708      	adds	r7, #8
 801af38:	46bd      	mov	sp, r7
 801af3a:	bd80      	pop	{r7, pc}
 801af3c:	0801c134 	.word	0x0801c134

0801af40 <UTIL_TIMER_GetElapsedTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetElapsedTime(UTIL_TIMER_Time_t past )
{
 801af40:	b580      	push	{r7, lr}
 801af42:	b084      	sub	sp, #16
 801af44:	af00      	add	r7, sp, #0
 801af46:	6078      	str	r0, [r7, #4]
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 801af48:	4b0a      	ldr	r3, [pc, #40]	@ (801af74 <UTIL_TIMER_GetElapsedTime+0x34>)
 801af4a:	69db      	ldr	r3, [r3, #28]
 801af4c:	4798      	blx	r3
 801af4e:	60f8      	str	r0, [r7, #12]
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 801af50:	4b08      	ldr	r3, [pc, #32]	@ (801af74 <UTIL_TIMER_GetElapsedTime+0x34>)
 801af52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801af54:	6878      	ldr	r0, [r7, #4]
 801af56:	4798      	blx	r3
 801af58:	60b8      	str	r0, [r7, #8]
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return UTIL_TimerDriver.Tick2ms( nowInTicks- pastInTicks );
 801af5a:	4b06      	ldr	r3, [pc, #24]	@ (801af74 <UTIL_TIMER_GetElapsedTime+0x34>)
 801af5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801af5e:	68f9      	ldr	r1, [r7, #12]
 801af60:	68ba      	ldr	r2, [r7, #8]
 801af62:	1a8a      	subs	r2, r1, r2
 801af64:	4610      	mov	r0, r2
 801af66:	4798      	blx	r3
 801af68:	4603      	mov	r3, r0
}
 801af6a:	4618      	mov	r0, r3
 801af6c:	3710      	adds	r7, #16
 801af6e:	46bd      	mov	sp, r7
 801af70:	bd80      	pop	{r7, pc}
 801af72:	bf00      	nop
 801af74:	0801c134 	.word	0x0801c134

0801af78 <TimerExists>:
 *
 * @param TimerObject Structure containing the timer object parameters
 * @retval 1 (the object is already in the list) or 0
 */
bool TimerExists( UTIL_TIMER_Object_t *TimerObject )
{
 801af78:	b480      	push	{r7}
 801af7a:	b085      	sub	sp, #20
 801af7c:	af00      	add	r7, sp, #0
 801af7e:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801af80:	4b0a      	ldr	r3, [pc, #40]	@ (801afac <TimerExists+0x34>)
 801af82:	681b      	ldr	r3, [r3, #0]
 801af84:	60fb      	str	r3, [r7, #12]

  while( cur != NULL )
 801af86:	e008      	b.n	801af9a <TimerExists+0x22>
  {
    if( cur == TimerObject )
 801af88:	68fa      	ldr	r2, [r7, #12]
 801af8a:	687b      	ldr	r3, [r7, #4]
 801af8c:	429a      	cmp	r2, r3
 801af8e:	d101      	bne.n	801af94 <TimerExists+0x1c>
    {
      return true;
 801af90:	2301      	movs	r3, #1
 801af92:	e006      	b.n	801afa2 <TimerExists+0x2a>
    }
    cur = cur->Next;
 801af94:	68fb      	ldr	r3, [r7, #12]
 801af96:	695b      	ldr	r3, [r3, #20]
 801af98:	60fb      	str	r3, [r7, #12]
  while( cur != NULL )
 801af9a:	68fb      	ldr	r3, [r7, #12]
 801af9c:	2b00      	cmp	r3, #0
 801af9e:	d1f3      	bne.n	801af88 <TimerExists+0x10>
  }
  return false;
 801afa0:	2300      	movs	r3, #0
}
 801afa2:	4618      	mov	r0, r3
 801afa4:	3714      	adds	r7, #20
 801afa6:	46bd      	mov	sp, r7
 801afa8:	bc80      	pop	{r7}
 801afaa:	4770      	bx	lr
 801afac:	20001b3c 	.word	0x20001b3c

0801afb0 <TimerSetTimeout>:
 * @brief Sets a timeout with the duration "timestamp"
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout( UTIL_TIMER_Object_t *TimerObject )
{
 801afb0:	b590      	push	{r4, r7, lr}
 801afb2:	b085      	sub	sp, #20
 801afb4:	af00      	add	r7, sp, #0
 801afb6:	6078      	str	r0, [r7, #4]
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 801afb8:	4b11      	ldr	r3, [pc, #68]	@ (801b000 <TimerSetTimeout+0x50>)
 801afba:	6a1b      	ldr	r3, [r3, #32]
 801afbc:	4798      	blx	r3
 801afbe:	60f8      	str	r0, [r7, #12]
  TimerObject->IsPending = 1;
 801afc0:	687b      	ldr	r3, [r7, #4]
 801afc2:	2201      	movs	r2, #1
 801afc4:	721a      	strb	r2, [r3, #8]

  /* In case deadline too soon */
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 801afc6:	687b      	ldr	r3, [r7, #4]
 801afc8:	681c      	ldr	r4, [r3, #0]
 801afca:	4b0d      	ldr	r3, [pc, #52]	@ (801b000 <TimerSetTimeout+0x50>)
 801afcc:	699b      	ldr	r3, [r3, #24]
 801afce:	4798      	blx	r3
 801afd0:	4602      	mov	r2, r0
 801afd2:	68fb      	ldr	r3, [r7, #12]
 801afd4:	4413      	add	r3, r2
 801afd6:	429c      	cmp	r4, r3
 801afd8:	d207      	bcs.n	801afea <TimerSetTimeout+0x3a>
  {
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 801afda:	4b09      	ldr	r3, [pc, #36]	@ (801b000 <TimerSetTimeout+0x50>)
 801afdc:	699b      	ldr	r3, [r3, #24]
 801afde:	4798      	blx	r3
 801afe0:	4602      	mov	r2, r0
 801afe2:	68fb      	ldr	r3, [r7, #12]
 801afe4:	441a      	add	r2, r3
 801afe6:	687b      	ldr	r3, [r7, #4]
 801afe8:	601a      	str	r2, [r3, #0]
  }
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 801afea:	4b05      	ldr	r3, [pc, #20]	@ (801b000 <TimerSetTimeout+0x50>)
 801afec:	689b      	ldr	r3, [r3, #8]
 801afee:	687a      	ldr	r2, [r7, #4]
 801aff0:	6812      	ldr	r2, [r2, #0]
 801aff2:	4610      	mov	r0, r2
 801aff4:	4798      	blx	r3
}
 801aff6:	bf00      	nop
 801aff8:	3714      	adds	r7, #20
 801affa:	46bd      	mov	sp, r7
 801affc:	bd90      	pop	{r4, r7, pc}
 801affe:	bf00      	nop
 801b000:	0801c134 	.word	0x0801c134

0801b004 <TimerInsertTimer>:
 *     next timer to expire.
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer( UTIL_TIMER_Object_t *TimerObject)
{
 801b004:	b480      	push	{r7}
 801b006:	b085      	sub	sp, #20
 801b008:	af00      	add	r7, sp, #0
 801b00a:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801b00c:	4b14      	ldr	r3, [pc, #80]	@ (801b060 <TimerInsertTimer+0x5c>)
 801b00e:	681b      	ldr	r3, [r3, #0]
 801b010:	60fb      	str	r3, [r7, #12]
  UTIL_TIMER_Object_t* next = TimerListHead->Next;
 801b012:	4b13      	ldr	r3, [pc, #76]	@ (801b060 <TimerInsertTimer+0x5c>)
 801b014:	681b      	ldr	r3, [r3, #0]
 801b016:	695b      	ldr	r3, [r3, #20]
 801b018:	60bb      	str	r3, [r7, #8]

  while (cur->Next != NULL )
 801b01a:	e012      	b.n	801b042 <TimerInsertTimer+0x3e>
  {  
    if( TimerObject->Timestamp  > next->Timestamp )
 801b01c:	687b      	ldr	r3, [r7, #4]
 801b01e:	681a      	ldr	r2, [r3, #0]
 801b020:	68bb      	ldr	r3, [r7, #8]
 801b022:	681b      	ldr	r3, [r3, #0]
 801b024:	429a      	cmp	r2, r3
 801b026:	d905      	bls.n	801b034 <TimerInsertTimer+0x30>
    {
        cur = next;
 801b028:	68bb      	ldr	r3, [r7, #8]
 801b02a:	60fb      	str	r3, [r7, #12]
        next = next->Next;
 801b02c:	68bb      	ldr	r3, [r7, #8]
 801b02e:	695b      	ldr	r3, [r3, #20]
 801b030:	60bb      	str	r3, [r7, #8]
 801b032:	e006      	b.n	801b042 <TimerInsertTimer+0x3e>
    }
    else
    {
        cur->Next = TimerObject;
 801b034:	68fb      	ldr	r3, [r7, #12]
 801b036:	687a      	ldr	r2, [r7, #4]
 801b038:	615a      	str	r2, [r3, #20]
        TimerObject->Next = next;
 801b03a:	687b      	ldr	r3, [r7, #4]
 801b03c:	68ba      	ldr	r2, [r7, #8]
 801b03e:	615a      	str	r2, [r3, #20]
        return;
 801b040:	e009      	b.n	801b056 <TimerInsertTimer+0x52>
  while (cur->Next != NULL )
 801b042:	68fb      	ldr	r3, [r7, #12]
 801b044:	695b      	ldr	r3, [r3, #20]
 801b046:	2b00      	cmp	r3, #0
 801b048:	d1e8      	bne.n	801b01c <TimerInsertTimer+0x18>

    }
  }
  cur->Next = TimerObject;
 801b04a:	68fb      	ldr	r3, [r7, #12]
 801b04c:	687a      	ldr	r2, [r7, #4]
 801b04e:	615a      	str	r2, [r3, #20]
  TimerObject->Next = NULL;
 801b050:	687b      	ldr	r3, [r7, #4]
 801b052:	2200      	movs	r2, #0
 801b054:	615a      	str	r2, [r3, #20]
}
 801b056:	3714      	adds	r7, #20
 801b058:	46bd      	mov	sp, r7
 801b05a:	bc80      	pop	{r7}
 801b05c:	4770      	bx	lr
 801b05e:	bf00      	nop
 801b060:	20001b3c 	.word	0x20001b3c

0801b064 <TimerInsertNewHeadTimer>:
 *
 * @remark The list is automatically sorted. The list head always contains the
 *         next timer to expire.
 */
void TimerInsertNewHeadTimer( UTIL_TIMER_Object_t *TimerObject )
{
 801b064:	b580      	push	{r7, lr}
 801b066:	b084      	sub	sp, #16
 801b068:	af00      	add	r7, sp, #0
 801b06a:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801b06c:	4b0b      	ldr	r3, [pc, #44]	@ (801b09c <TimerInsertNewHeadTimer+0x38>)
 801b06e:	681b      	ldr	r3, [r3, #0]
 801b070:	60fb      	str	r3, [r7, #12]

  if( cur != NULL )
 801b072:	68fb      	ldr	r3, [r7, #12]
 801b074:	2b00      	cmp	r3, #0
 801b076:	d002      	beq.n	801b07e <TimerInsertNewHeadTimer+0x1a>
  {
    cur->IsPending = 0;
 801b078:	68fb      	ldr	r3, [r7, #12]
 801b07a:	2200      	movs	r2, #0
 801b07c:	721a      	strb	r2, [r3, #8]
  }

  TimerObject->Next = cur;
 801b07e:	687b      	ldr	r3, [r7, #4]
 801b080:	68fa      	ldr	r2, [r7, #12]
 801b082:	615a      	str	r2, [r3, #20]
  TimerListHead = TimerObject;
 801b084:	4a05      	ldr	r2, [pc, #20]	@ (801b09c <TimerInsertNewHeadTimer+0x38>)
 801b086:	687b      	ldr	r3, [r7, #4]
 801b088:	6013      	str	r3, [r2, #0]
  TimerSetTimeout( TimerListHead );
 801b08a:	4b04      	ldr	r3, [pc, #16]	@ (801b09c <TimerInsertNewHeadTimer+0x38>)
 801b08c:	681b      	ldr	r3, [r3, #0]
 801b08e:	4618      	mov	r0, r3
 801b090:	f7ff ff8e 	bl	801afb0 <TimerSetTimeout>
}
 801b094:	bf00      	nop
 801b096:	3710      	adds	r7, #16
 801b098:	46bd      	mov	sp, r7
 801b09a:	bd80      	pop	{r7, pc}
 801b09c:	20001b3c 	.word	0x20001b3c

0801b0a0 <UTIL_ADV_TRACE_Init>:

/** @addtogroup ADV_TRACE_exported_function
 *  @{
 */
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_Init(void)
{
 801b0a0:	b580      	push	{r7, lr}
 801b0a2:	af00      	add	r7, sp, #0
  /* initialize the Ptr for Read/Write */
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Ctx, 0x0, sizeof(ADV_TRACE_Context));
 801b0a4:	2218      	movs	r2, #24
 801b0a6:	2100      	movs	r1, #0
 801b0a8:	4807      	ldr	r0, [pc, #28]	@ (801b0c8 <UTIL_ADV_TRACE_Init+0x28>)
 801b0aa:	f7fe fffc 	bl	801a0a6 <UTIL_MEM_set_8>
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Buffer, 0x0, sizeof(ADV_TRACE_Buffer));
 801b0ae:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 801b0b2:	2100      	movs	r1, #0
 801b0b4:	4805      	ldr	r0, [pc, #20]	@ (801b0cc <UTIL_ADV_TRACE_Init+0x2c>)
 801b0b6:	f7fe fff6 	bl	801a0a6 <UTIL_MEM_set_8>
#endif
  /* Allocate Lock resource */
  UTIL_ADV_TRACE_INIT_CRITICAL_SECTION();

  /* Initialize the Low Level interface */
  return UTIL_TraceDriver.Init(TRACE_TxCpltCallback);
 801b0ba:	4b05      	ldr	r3, [pc, #20]	@ (801b0d0 <UTIL_ADV_TRACE_Init+0x30>)
 801b0bc:	681b      	ldr	r3, [r3, #0]
 801b0be:	4805      	ldr	r0, [pc, #20]	@ (801b0d4 <UTIL_ADV_TRACE_Init+0x34>)
 801b0c0:	4798      	blx	r3
 801b0c2:	4603      	mov	r3, r0
}
 801b0c4:	4618      	mov	r0, r3
 801b0c6:	bd80      	pop	{r7, pc}
 801b0c8:	20001b40 	.word	0x20001b40
 801b0cc:	20001b58 	.word	0x20001b58
 801b0d0:	0801c174 	.word	0x0801c174
 801b0d4:	0801b341 	.word	0x0801b341

0801b0d8 <UTIL_ADV_TRACE_IsBufferEmpty>:
  /* Un-initialize the Low Level interface */
  return UTIL_TraceDriver.DeInit();
}

uint8_t UTIL_ADV_TRACE_IsBufferEmpty(void)
{
 801b0d8:	b480      	push	{r7}
 801b0da:	af00      	add	r7, sp, #0
  /* check of the buffer is empty */
  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 801b0dc:	4b06      	ldr	r3, [pc, #24]	@ (801b0f8 <UTIL_ADV_TRACE_IsBufferEmpty+0x20>)
 801b0de:	8a5a      	ldrh	r2, [r3, #18]
 801b0e0:	4b05      	ldr	r3, [pc, #20]	@ (801b0f8 <UTIL_ADV_TRACE_IsBufferEmpty+0x20>)
 801b0e2:	8a1b      	ldrh	r3, [r3, #16]
 801b0e4:	429a      	cmp	r2, r3
 801b0e6:	d101      	bne.n	801b0ec <UTIL_ADV_TRACE_IsBufferEmpty+0x14>
    return 1;
 801b0e8:	2301      	movs	r3, #1
 801b0ea:	e000      	b.n	801b0ee <UTIL_ADV_TRACE_IsBufferEmpty+0x16>
  return 0;
 801b0ec:	2300      	movs	r3, #0
}
 801b0ee:	4618      	mov	r0, r3
 801b0f0:	46bd      	mov	sp, r7
 801b0f2:	bc80      	pop	{r7}
 801b0f4:	4770      	bx	lr
 801b0f6:	bf00      	nop
 801b0f8:	20001b40 	.word	0x20001b40

0801b0fc <UTIL_ADV_TRACE_COND_FSend>:
  return UTIL_TraceDriver.StartRx(UserCallback);
}

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_COND_FSend(uint32_t VerboseLevel, uint32_t Region, uint32_t TimeStampState, const char *strFormat, ...)
{
 801b0fc:	b408      	push	{r3}
 801b0fe:	b580      	push	{r7, lr}
 801b100:	b08d      	sub	sp, #52	@ 0x34
 801b102:	af00      	add	r7, sp, #0
 801b104:	60f8      	str	r0, [r7, #12]
 801b106:	60b9      	str	r1, [r7, #8]
 801b108:	607a      	str	r2, [r7, #4]
  va_list vaArgs;
#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  uint8_t buf[UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
  uint16_t timestamp_size = 0u;
 801b10a:	2300      	movs	r3, #0
 801b10c:	82fb      	strh	r3, [r7, #22]
  uint16_t writepos;
  uint16_t idx;
#else
  uint8_t buf[UTIL_ADV_TRACE_TMP_BUF_SIZE+UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
#endif
  uint16_t buff_size = 0u;
 801b10e:	2300      	movs	r3, #0
 801b110:	85bb      	strh	r3, [r7, #44]	@ 0x2c

  /* check verbose level */
  if(!(ADV_TRACE_Ctx.CurrentVerboseLevel >= VerboseLevel))
 801b112:	4b37      	ldr	r3, [pc, #220]	@ (801b1f0 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801b114:	7a1b      	ldrb	r3, [r3, #8]
 801b116:	461a      	mov	r2, r3
 801b118:	68fb      	ldr	r3, [r7, #12]
 801b11a:	4293      	cmp	r3, r2
 801b11c:	d902      	bls.n	801b124 <UTIL_ADV_TRACE_COND_FSend+0x28>
  {
    return UTIL_ADV_TRACE_GIVEUP;
 801b11e:	f06f 0304 	mvn.w	r3, #4
 801b122:	e05e      	b.n	801b1e2 <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

  if((Region & ADV_TRACE_Ctx.RegionMask) != Region)
 801b124:	4b32      	ldr	r3, [pc, #200]	@ (801b1f0 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801b126:	68da      	ldr	r2, [r3, #12]
 801b128:	68bb      	ldr	r3, [r7, #8]
 801b12a:	4013      	ands	r3, r2
 801b12c:	68ba      	ldr	r2, [r7, #8]
 801b12e:	429a      	cmp	r2, r3
 801b130:	d002      	beq.n	801b138 <UTIL_ADV_TRACE_COND_FSend+0x3c>
  {
    return UTIL_ADV_TRACE_REGIONMASKED;
 801b132:	f06f 0305 	mvn.w	r3, #5
 801b136:	e054      	b.n	801b1e2 <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if((ADV_TRACE_Ctx.timestamp_func != NULL) && (TimeStampState != 0u))
 801b138:	4b2d      	ldr	r3, [pc, #180]	@ (801b1f0 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801b13a:	685b      	ldr	r3, [r3, #4]
 801b13c:	2b00      	cmp	r3, #0
 801b13e:	d00a      	beq.n	801b156 <UTIL_ADV_TRACE_COND_FSend+0x5a>
 801b140:	687b      	ldr	r3, [r7, #4]
 801b142:	2b00      	cmp	r3, #0
 801b144:	d007      	beq.n	801b156 <UTIL_ADV_TRACE_COND_FSend+0x5a>
  {
    ADV_TRACE_Ctx.timestamp_func(buf,&timestamp_size);
 801b146:	4b2a      	ldr	r3, [pc, #168]	@ (801b1f0 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801b148:	685b      	ldr	r3, [r3, #4]
 801b14a:	f107 0116 	add.w	r1, r7, #22
 801b14e:	f107 0218 	add.w	r2, r7, #24
 801b152:	4610      	mov	r0, r2
 801b154:	4798      	blx	r3
  }

  va_start( vaArgs, strFormat);
 801b156:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 801b15a:	62bb      	str	r3, [r7, #40]	@ 0x28
  buff_size =(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)sztmp,UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 801b15c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b15e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801b160:	f44f 7100 	mov.w	r1, #512	@ 0x200
 801b164:	4823      	ldr	r0, [pc, #140]	@ (801b1f4 <UTIL_ADV_TRACE_COND_FSend+0xf8>)
 801b166:	f7ff fa2b 	bl	801a5c0 <tiny_vsnprintf_like>
 801b16a:	4603      	mov	r3, r0
 801b16c:	85bb      	strh	r3, [r7, #44]	@ 0x2c

  TRACE_Lock();
 801b16e:	f000 f9f1 	bl	801b554 <TRACE_Lock>

  /* if allocation is ok, write data into the buffer */
  if (TRACE_AllocateBufer((buff_size+timestamp_size),&writepos) != -1)
 801b172:	8afa      	ldrh	r2, [r7, #22]
 801b174:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 801b176:	4413      	add	r3, r2
 801b178:	b29b      	uxth	r3, r3
 801b17a:	f107 0214 	add.w	r2, r7, #20
 801b17e:	4611      	mov	r1, r2
 801b180:	4618      	mov	r0, r3
 801b182:	f000 f969 	bl	801b458 <TRACE_AllocateBufer>
 801b186:	4603      	mov	r3, r0
 801b188:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b18c:	d025      	beq.n	801b1da <UTIL_ADV_TRACE_COND_FSend+0xde>
    }
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

    /* copy the timestamp */
    for (idx = 0u; idx < timestamp_size; idx++)
 801b18e:	2300      	movs	r3, #0
 801b190:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 801b192:	e00e      	b.n	801b1b2 <UTIL_ADV_TRACE_COND_FSend+0xb6>
    {
      ADV_TRACE_Buffer[writepos] = buf[idx];
 801b194:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801b196:	8aba      	ldrh	r2, [r7, #20]
 801b198:	3330      	adds	r3, #48	@ 0x30
 801b19a:	443b      	add	r3, r7
 801b19c:	f813 1c18 	ldrb.w	r1, [r3, #-24]
 801b1a0:	4b15      	ldr	r3, [pc, #84]	@ (801b1f8 <UTIL_ADV_TRACE_COND_FSend+0xfc>)
 801b1a2:	5499      	strb	r1, [r3, r2]
      writepos = writepos + 1u;
 801b1a4:	8abb      	ldrh	r3, [r7, #20]
 801b1a6:	3301      	adds	r3, #1
 801b1a8:	b29b      	uxth	r3, r3
 801b1aa:	82bb      	strh	r3, [r7, #20]
    for (idx = 0u; idx < timestamp_size; idx++)
 801b1ac:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801b1ae:	3301      	adds	r3, #1
 801b1b0:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 801b1b2:	8afb      	ldrh	r3, [r7, #22]
 801b1b4:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 801b1b6:	429a      	cmp	r2, r3
 801b1b8:	d3ec      	bcc.n	801b194 <UTIL_ADV_TRACE_COND_FSend+0x98>
    }

    /* copy the data */
    (void)UTIL_ADV_TRACE_VSNPRINTF((char *)(&ADV_TRACE_Buffer[writepos]), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 801b1ba:	8abb      	ldrh	r3, [r7, #20]
 801b1bc:	461a      	mov	r2, r3
 801b1be:	4b0e      	ldr	r3, [pc, #56]	@ (801b1f8 <UTIL_ADV_TRACE_COND_FSend+0xfc>)
 801b1c0:	18d0      	adds	r0, r2, r3
 801b1c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b1c4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801b1c6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 801b1ca:	f7ff f9f9 	bl	801a5c0 <tiny_vsnprintf_like>
    va_end(vaArgs);

    TRACE_UnLock();
 801b1ce:	f000 f9df 	bl	801b590 <TRACE_UnLock>

    return TRACE_Send();
 801b1d2:	f000 f831 	bl	801b238 <TRACE_Send>
 801b1d6:	4603      	mov	r3, r0
 801b1d8:	e003      	b.n	801b1e2 <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

  va_end(vaArgs);
  TRACE_UnLock();
 801b1da:	f000 f9d9 	bl	801b590 <TRACE_UnLock>
    ADV_TRACE_Ctx.OverRunStatus = TRACE_OVERRUN_INDICATION;
  }
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

  return UTIL_ADV_TRACE_MEM_FULL;
 801b1de:	f06f 0302 	mvn.w	r3, #2
  buff_size += (uint16_t) UTIL_ADV_TRACE_VSNPRINTF((char* )(buf + buff_size), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
  va_end(vaArgs);

  return UTIL_ADV_TRACE_Send(buf, buff_size);
#endif
}
 801b1e2:	4618      	mov	r0, r3
 801b1e4:	3734      	adds	r7, #52	@ 0x34
 801b1e6:	46bd      	mov	sp, r7
 801b1e8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801b1ec:	b001      	add	sp, #4
 801b1ee:	4770      	bx	lr
 801b1f0:	20001b40 	.word	0x20001b40
 801b1f4:	20001f58 	.word	0x20001f58
 801b1f8:	20001b58 	.word	0x20001b58

0801b1fc <UTIL_ADV_TRACE_RegisterTimeStampFunction>:
}
#endif

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
void UTIL_ADV_TRACE_RegisterTimeStampFunction(cb_timestamp *cb)
{
 801b1fc:	b480      	push	{r7}
 801b1fe:	b083      	sub	sp, #12
 801b200:	af00      	add	r7, sp, #0
 801b202:	6078      	str	r0, [r7, #4]
  ADV_TRACE_Ctx.timestamp_func = *cb;
 801b204:	4a03      	ldr	r2, [pc, #12]	@ (801b214 <UTIL_ADV_TRACE_RegisterTimeStampFunction+0x18>)
 801b206:	687b      	ldr	r3, [r7, #4]
 801b208:	6053      	str	r3, [r2, #4]
}
 801b20a:	bf00      	nop
 801b20c:	370c      	adds	r7, #12
 801b20e:	46bd      	mov	sp, r7
 801b210:	bc80      	pop	{r7}
 801b212:	4770      	bx	lr
 801b214:	20001b40 	.word	0x20001b40

0801b218 <UTIL_ADV_TRACE_SetVerboseLevel>:

void UTIL_ADV_TRACE_SetVerboseLevel(uint8_t Level)
{
 801b218:	b480      	push	{r7}
 801b21a:	b083      	sub	sp, #12
 801b21c:	af00      	add	r7, sp, #0
 801b21e:	4603      	mov	r3, r0
 801b220:	71fb      	strb	r3, [r7, #7]
  ADV_TRACE_Ctx.CurrentVerboseLevel = Level;
 801b222:	4a04      	ldr	r2, [pc, #16]	@ (801b234 <UTIL_ADV_TRACE_SetVerboseLevel+0x1c>)
 801b224:	79fb      	ldrb	r3, [r7, #7]
 801b226:	7213      	strb	r3, [r2, #8]
}
 801b228:	bf00      	nop
 801b22a:	370c      	adds	r7, #12
 801b22c:	46bd      	mov	sp, r7
 801b22e:	bc80      	pop	{r7}
 801b230:	4770      	bx	lr
 801b232:	bf00      	nop
 801b234:	20001b40 	.word	0x20001b40

0801b238 <TRACE_Send>:
/**
 * @brief send the data of the trace to low layer
 * @retval Status based on @ref UTIL_ADV_TRACE_Status_t
 */
static UTIL_ADV_TRACE_Status_t TRACE_Send(void)
{
 801b238:	b580      	push	{r7, lr}
 801b23a:	b088      	sub	sp, #32
 801b23c:	af00      	add	r7, sp, #0
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;
 801b23e:	2300      	movs	r3, #0
 801b240:	77fb      	strb	r3, [r7, #31]
  uint8_t *ptr = NULL;
 801b242:	2300      	movs	r3, #0
 801b244:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b246:	f3ef 8310 	mrs	r3, PRIMASK
 801b24a:	613b      	str	r3, [r7, #16]
  return(result);
 801b24c:	693b      	ldr	r3, [r7, #16]

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801b24e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801b250:	b672      	cpsid	i
}
 801b252:	bf00      	nop

  if(TRACE_IsLocked() == 0u)
 801b254:	f000 f9ba 	bl	801b5cc <TRACE_IsLocked>
 801b258:	4603      	mov	r3, r0
 801b25a:	2b00      	cmp	r3, #0
 801b25c:	d15d      	bne.n	801b31a <TRACE_Send+0xe2>
  {
    TRACE_Lock();
 801b25e:	f000 f979 	bl	801b554 <TRACE_Lock>

    if(ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr)
 801b262:	4b34      	ldr	r3, [pc, #208]	@ (801b334 <TRACE_Send+0xfc>)
 801b264:	8a1a      	ldrh	r2, [r3, #16]
 801b266:	4b33      	ldr	r3, [pc, #204]	@ (801b334 <TRACE_Send+0xfc>)
 801b268:	8a5b      	ldrh	r3, [r3, #18]
 801b26a:	429a      	cmp	r2, r3
 801b26c:	d04d      	beq.n	801b30a <TRACE_Send+0xd2>
    {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
      if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 801b26e:	4b31      	ldr	r3, [pc, #196]	@ (801b334 <TRACE_Send+0xfc>)
 801b270:	789b      	ldrb	r3, [r3, #2]
 801b272:	2b01      	cmp	r3, #1
 801b274:	d117      	bne.n	801b2a6 <TRACE_Send+0x6e>
      {
        ADV_TRACE_Ctx.TraceSentSize = (uint16_t) (ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr);
 801b276:	4b2f      	ldr	r3, [pc, #188]	@ (801b334 <TRACE_Send+0xfc>)
 801b278:	881a      	ldrh	r2, [r3, #0]
 801b27a:	4b2e      	ldr	r3, [pc, #184]	@ (801b334 <TRACE_Send+0xfc>)
 801b27c:	8a1b      	ldrh	r3, [r3, #16]
 801b27e:	1ad3      	subs	r3, r2, r3
 801b280:	b29a      	uxth	r2, r3
 801b282:	4b2c      	ldr	r3, [pc, #176]	@ (801b334 <TRACE_Send+0xfc>)
 801b284:	829a      	strh	r2, [r3, #20]
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 801b286:	4b2b      	ldr	r3, [pc, #172]	@ (801b334 <TRACE_Send+0xfc>)
 801b288:	2202      	movs	r2, #2
 801b28a:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = 0;
 801b28c:	4b29      	ldr	r3, [pc, #164]	@ (801b334 <TRACE_Send+0xfc>)
 801b28e:	2200      	movs	r2, #0
 801b290:	801a      	strh	r2, [r3, #0]

        UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n", ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);

        if(0u == ADV_TRACE_Ctx.TraceSentSize)
 801b292:	4b28      	ldr	r3, [pc, #160]	@ (801b334 <TRACE_Send+0xfc>)
 801b294:	8a9b      	ldrh	r3, [r3, #20]
 801b296:	2b00      	cmp	r3, #0
 801b298:	d105      	bne.n	801b2a6 <TRACE_Send+0x6e>
        {
          ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801b29a:	4b26      	ldr	r3, [pc, #152]	@ (801b334 <TRACE_Send+0xfc>)
 801b29c:	2200      	movs	r2, #0
 801b29e:	709a      	strb	r2, [r3, #2]
          ADV_TRACE_Ctx.TraceRdPtr = 0;
 801b2a0:	4b24      	ldr	r3, [pc, #144]	@ (801b334 <TRACE_Send+0xfc>)
 801b2a2:	2200      	movs	r2, #0
 801b2a4:	821a      	strh	r2, [r3, #16]
        }
      }

      if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 801b2a6:	4b23      	ldr	r3, [pc, #140]	@ (801b334 <TRACE_Send+0xfc>)
 801b2a8:	789b      	ldrb	r3, [r3, #2]
 801b2aa:	2b00      	cmp	r3, #0
 801b2ac:	d115      	bne.n	801b2da <TRACE_Send+0xa2>
      {
#endif
        if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801b2ae:	4b21      	ldr	r3, [pc, #132]	@ (801b334 <TRACE_Send+0xfc>)
 801b2b0:	8a5a      	ldrh	r2, [r3, #18]
 801b2b2:	4b20      	ldr	r3, [pc, #128]	@ (801b334 <TRACE_Send+0xfc>)
 801b2b4:	8a1b      	ldrh	r3, [r3, #16]
 801b2b6:	429a      	cmp	r2, r3
 801b2b8:	d908      	bls.n	801b2cc <TRACE_Send+0x94>
        {
          ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 801b2ba:	4b1e      	ldr	r3, [pc, #120]	@ (801b334 <TRACE_Send+0xfc>)
 801b2bc:	8a5a      	ldrh	r2, [r3, #18]
 801b2be:	4b1d      	ldr	r3, [pc, #116]	@ (801b334 <TRACE_Send+0xfc>)
 801b2c0:	8a1b      	ldrh	r3, [r3, #16]
 801b2c2:	1ad3      	subs	r3, r2, r3
 801b2c4:	b29a      	uxth	r2, r3
 801b2c6:	4b1b      	ldr	r3, [pc, #108]	@ (801b334 <TRACE_Send+0xfc>)
 801b2c8:	829a      	strh	r2, [r3, #20]
 801b2ca:	e006      	b.n	801b2da <TRACE_Send+0xa2>
        }
        else /* TraceRdPtr > TraceWrPtr */
        {
          ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 801b2cc:	4b19      	ldr	r3, [pc, #100]	@ (801b334 <TRACE_Send+0xfc>)
 801b2ce:	8a1b      	ldrh	r3, [r3, #16]
 801b2d0:	f5c3 6380 	rsb	r3, r3, #1024	@ 0x400
 801b2d4:	b29a      	uxth	r2, r3
 801b2d6:	4b17      	ldr	r3, [pc, #92]	@ (801b334 <TRACE_Send+0xfc>)
 801b2d8:	829a      	strh	r2, [r3, #20]

        }
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
      }
#endif
      ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 801b2da:	4b16      	ldr	r3, [pc, #88]	@ (801b334 <TRACE_Send+0xfc>)
 801b2dc:	8a1b      	ldrh	r3, [r3, #16]
 801b2de:	461a      	mov	r2, r3
 801b2e0:	4b15      	ldr	r3, [pc, #84]	@ (801b338 <TRACE_Send+0x100>)
 801b2e2:	4413      	add	r3, r2
 801b2e4:	61bb      	str	r3, [r7, #24]
 801b2e6:	697b      	ldr	r3, [r7, #20]
 801b2e8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b2ea:	68fb      	ldr	r3, [r7, #12]
 801b2ec:	f383 8810 	msr	PRIMASK, r3
}
 801b2f0:	bf00      	nop

      UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
      UTIL_ADV_TRACE_PreSendHook();
 801b2f2:	f7e6 fcc9 	bl	8001c88 <UTIL_ADV_TRACE_PreSendHook>

      UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n", ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
      ret = UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 801b2f6:	4b11      	ldr	r3, [pc, #68]	@ (801b33c <TRACE_Send+0x104>)
 801b2f8:	68db      	ldr	r3, [r3, #12]
 801b2fa:	4a0e      	ldr	r2, [pc, #56]	@ (801b334 <TRACE_Send+0xfc>)
 801b2fc:	8a92      	ldrh	r2, [r2, #20]
 801b2fe:	4611      	mov	r1, r2
 801b300:	69b8      	ldr	r0, [r7, #24]
 801b302:	4798      	blx	r3
 801b304:	4603      	mov	r3, r0
 801b306:	77fb      	strb	r3, [r7, #31]
 801b308:	e00d      	b.n	801b326 <TRACE_Send+0xee>
    }
    else
    {
      TRACE_UnLock();
 801b30a:	f000 f941 	bl	801b590 <TRACE_UnLock>
 801b30e:	697b      	ldr	r3, [r7, #20]
 801b310:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b312:	68bb      	ldr	r3, [r7, #8]
 801b314:	f383 8810 	msr	PRIMASK, r3
}
 801b318:	e005      	b.n	801b326 <TRACE_Send+0xee>
 801b31a:	697b      	ldr	r3, [r7, #20]
 801b31c:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b31e:	687b      	ldr	r3, [r7, #4]
 801b320:	f383 8810 	msr	PRIMASK, r3
}
 801b324:	bf00      	nop
  else
  {
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  }

  return ret;
 801b326:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801b32a:	4618      	mov	r0, r3
 801b32c:	3720      	adds	r7, #32
 801b32e:	46bd      	mov	sp, r7
 801b330:	bd80      	pop	{r7, pc}
 801b332:	bf00      	nop
 801b334:	20001b40 	.word	0x20001b40
 801b338:	20001b58 	.word	0x20001b58
 801b33c:	0801c174 	.word	0x0801c174

0801b340 <TRACE_TxCpltCallback>:
 * @brief Tx callback called by the low layer level to inform a transfer complete
 * @param Ptr pointer not used only for HAL compatibility
 * @retval none
 */
static void TRACE_TxCpltCallback(void *Ptr)
{
 801b340:	b580      	push	{r7, lr}
 801b342:	b088      	sub	sp, #32
 801b344:	af00      	add	r7, sp, #0
 801b346:	6078      	str	r0, [r7, #4]
  uint8_t *ptr = NULL;
 801b348:	2300      	movs	r3, #0
 801b34a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b34c:	f3ef 8310 	mrs	r3, PRIMASK
 801b350:	617b      	str	r3, [r7, #20]
  return(result);
 801b352:	697b      	ldr	r3, [r7, #20]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801b354:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 801b356:	b672      	cpsid	i
}
 801b358:	bf00      	nop
    ADV_TRACE_Ctx.TraceSentSize = 0u;
  }
#endif

#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if(TRACE_UNCHUNK_TRANSFER == ADV_TRACE_Ctx.unchunk_status)
 801b35a:	4b3c      	ldr	r3, [pc, #240]	@ (801b44c <TRACE_TxCpltCallback+0x10c>)
 801b35c:	789b      	ldrb	r3, [r3, #2]
 801b35e:	2b02      	cmp	r3, #2
 801b360:	d106      	bne.n	801b370 <TRACE_TxCpltCallback+0x30>
  {
    ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801b362:	4b3a      	ldr	r3, [pc, #232]	@ (801b44c <TRACE_TxCpltCallback+0x10c>)
 801b364:	2200      	movs	r2, #0
 801b366:	709a      	strb	r2, [r3, #2]
    ADV_TRACE_Ctx.TraceRdPtr = 0;
 801b368:	4b38      	ldr	r3, [pc, #224]	@ (801b44c <TRACE_TxCpltCallback+0x10c>)
 801b36a:	2200      	movs	r2, #0
 801b36c:	821a      	strh	r2, [r3, #16]
 801b36e:	e00a      	b.n	801b386 <TRACE_TxCpltCallback+0x46>
    UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk complete\n");
  }
  else
  {
    ADV_TRACE_Ctx.TraceRdPtr = (ADV_TRACE_Ctx.TraceRdPtr + ADV_TRACE_Ctx.TraceSentSize) % UTIL_ADV_TRACE_FIFO_SIZE;
 801b370:	4b36      	ldr	r3, [pc, #216]	@ (801b44c <TRACE_TxCpltCallback+0x10c>)
 801b372:	8a1a      	ldrh	r2, [r3, #16]
 801b374:	4b35      	ldr	r3, [pc, #212]	@ (801b44c <TRACE_TxCpltCallback+0x10c>)
 801b376:	8a9b      	ldrh	r3, [r3, #20]
 801b378:	4413      	add	r3, r2
 801b37a:	b29b      	uxth	r3, r3
 801b37c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801b380:	b29a      	uxth	r2, r3
 801b382:	4b32      	ldr	r3, [pc, #200]	@ (801b44c <TRACE_TxCpltCallback+0x10c>)
 801b384:	821a      	strh	r2, [r3, #16]
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
    return;
  }
#endif

  if((ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr) && (1u == ADV_TRACE_Ctx.TraceLock))
 801b386:	4b31      	ldr	r3, [pc, #196]	@ (801b44c <TRACE_TxCpltCallback+0x10c>)
 801b388:	8a1a      	ldrh	r2, [r3, #16]
 801b38a:	4b30      	ldr	r3, [pc, #192]	@ (801b44c <TRACE_TxCpltCallback+0x10c>)
 801b38c:	8a5b      	ldrh	r3, [r3, #18]
 801b38e:	429a      	cmp	r2, r3
 801b390:	d04d      	beq.n	801b42e <TRACE_TxCpltCallback+0xee>
 801b392:	4b2e      	ldr	r3, [pc, #184]	@ (801b44c <TRACE_TxCpltCallback+0x10c>)
 801b394:	8adb      	ldrh	r3, [r3, #22]
 801b396:	2b01      	cmp	r3, #1
 801b398:	d149      	bne.n	801b42e <TRACE_TxCpltCallback+0xee>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 801b39a:	4b2c      	ldr	r3, [pc, #176]	@ (801b44c <TRACE_TxCpltCallback+0x10c>)
 801b39c:	789b      	ldrb	r3, [r3, #2]
 801b39e:	2b01      	cmp	r3, #1
 801b3a0:	d117      	bne.n	801b3d2 <TRACE_TxCpltCallback+0x92>
    {
      ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr;
 801b3a2:	4b2a      	ldr	r3, [pc, #168]	@ (801b44c <TRACE_TxCpltCallback+0x10c>)
 801b3a4:	881a      	ldrh	r2, [r3, #0]
 801b3a6:	4b29      	ldr	r3, [pc, #164]	@ (801b44c <TRACE_TxCpltCallback+0x10c>)
 801b3a8:	8a1b      	ldrh	r3, [r3, #16]
 801b3aa:	1ad3      	subs	r3, r2, r3
 801b3ac:	b29a      	uxth	r2, r3
 801b3ae:	4b27      	ldr	r3, [pc, #156]	@ (801b44c <TRACE_TxCpltCallback+0x10c>)
 801b3b0:	829a      	strh	r2, [r3, #20]
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 801b3b2:	4b26      	ldr	r3, [pc, #152]	@ (801b44c <TRACE_TxCpltCallback+0x10c>)
 801b3b4:	2202      	movs	r2, #2
 801b3b6:	709a      	strb	r2, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = 0;
 801b3b8:	4b24      	ldr	r3, [pc, #144]	@ (801b44c <TRACE_TxCpltCallback+0x10c>)
 801b3ba:	2200      	movs	r2, #0
 801b3bc:	801a      	strh	r2, [r3, #0]

      UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n", ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);

      if(0u == ADV_TRACE_Ctx.TraceSentSize)
 801b3be:	4b23      	ldr	r3, [pc, #140]	@ (801b44c <TRACE_TxCpltCallback+0x10c>)
 801b3c0:	8a9b      	ldrh	r3, [r3, #20]
 801b3c2:	2b00      	cmp	r3, #0
 801b3c4:	d105      	bne.n	801b3d2 <TRACE_TxCpltCallback+0x92>
      {
        /* this case occurs when an ongoing write aligned the Rd position with chunk position */
        /* in that case the unchunk is forgot */
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801b3c6:	4b21      	ldr	r3, [pc, #132]	@ (801b44c <TRACE_TxCpltCallback+0x10c>)
 801b3c8:	2200      	movs	r2, #0
 801b3ca:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.TraceRdPtr = 0;
 801b3cc:	4b1f      	ldr	r3, [pc, #124]	@ (801b44c <TRACE_TxCpltCallback+0x10c>)
 801b3ce:	2200      	movs	r2, #0
 801b3d0:	821a      	strh	r2, [r3, #16]
      }
    }

    if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 801b3d2:	4b1e      	ldr	r3, [pc, #120]	@ (801b44c <TRACE_TxCpltCallback+0x10c>)
 801b3d4:	789b      	ldrb	r3, [r3, #2]
 801b3d6:	2b00      	cmp	r3, #0
 801b3d8:	d115      	bne.n	801b406 <TRACE_TxCpltCallback+0xc6>
    {
#endif
      if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801b3da:	4b1c      	ldr	r3, [pc, #112]	@ (801b44c <TRACE_TxCpltCallback+0x10c>)
 801b3dc:	8a5a      	ldrh	r2, [r3, #18]
 801b3de:	4b1b      	ldr	r3, [pc, #108]	@ (801b44c <TRACE_TxCpltCallback+0x10c>)
 801b3e0:	8a1b      	ldrh	r3, [r3, #16]
 801b3e2:	429a      	cmp	r2, r3
 801b3e4:	d908      	bls.n	801b3f8 <TRACE_TxCpltCallback+0xb8>
      {
        ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 801b3e6:	4b19      	ldr	r3, [pc, #100]	@ (801b44c <TRACE_TxCpltCallback+0x10c>)
 801b3e8:	8a5a      	ldrh	r2, [r3, #18]
 801b3ea:	4b18      	ldr	r3, [pc, #96]	@ (801b44c <TRACE_TxCpltCallback+0x10c>)
 801b3ec:	8a1b      	ldrh	r3, [r3, #16]
 801b3ee:	1ad3      	subs	r3, r2, r3
 801b3f0:	b29a      	uxth	r2, r3
 801b3f2:	4b16      	ldr	r3, [pc, #88]	@ (801b44c <TRACE_TxCpltCallback+0x10c>)
 801b3f4:	829a      	strh	r2, [r3, #20]
 801b3f6:	e006      	b.n	801b406 <TRACE_TxCpltCallback+0xc6>
      }
      else /* TraceRdPtr > TraceWrPtr */
      {
        ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 801b3f8:	4b14      	ldr	r3, [pc, #80]	@ (801b44c <TRACE_TxCpltCallback+0x10c>)
 801b3fa:	8a1b      	ldrh	r3, [r3, #16]
 801b3fc:	f5c3 6380 	rsb	r3, r3, #1024	@ 0x400
 801b400:	b29a      	uxth	r2, r3
 801b402:	4b12      	ldr	r3, [pc, #72]	@ (801b44c <TRACE_TxCpltCallback+0x10c>)
 801b404:	829a      	strh	r2, [r3, #20]
      }
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    }
#endif
    ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 801b406:	4b11      	ldr	r3, [pc, #68]	@ (801b44c <TRACE_TxCpltCallback+0x10c>)
 801b408:	8a1b      	ldrh	r3, [r3, #16]
 801b40a:	461a      	mov	r2, r3
 801b40c:	4b10      	ldr	r3, [pc, #64]	@ (801b450 <TRACE_TxCpltCallback+0x110>)
 801b40e:	4413      	add	r3, r2
 801b410:	61fb      	str	r3, [r7, #28]
 801b412:	69bb      	ldr	r3, [r7, #24]
 801b414:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b416:	693b      	ldr	r3, [r7, #16]
 801b418:	f383 8810 	msr	PRIMASK, r3
}
 801b41c:	bf00      	nop
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
    UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n", ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 801b41e:	4b0d      	ldr	r3, [pc, #52]	@ (801b454 <TRACE_TxCpltCallback+0x114>)
 801b420:	68db      	ldr	r3, [r3, #12]
 801b422:	4a0a      	ldr	r2, [pc, #40]	@ (801b44c <TRACE_TxCpltCallback+0x10c>)
 801b424:	8a92      	ldrh	r2, [r2, #20]
 801b426:	4611      	mov	r1, r2
 801b428:	69f8      	ldr	r0, [r7, #28]
 801b42a:	4798      	blx	r3
 801b42c:	e00a      	b.n	801b444 <TRACE_TxCpltCallback+0x104>
 801b42e:	69bb      	ldr	r3, [r7, #24]
 801b430:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b432:	68fb      	ldr	r3, [r7, #12]
 801b434:	f383 8810 	msr	PRIMASK, r3
}
 801b438:	bf00      	nop
  }
  else
  {
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
    UTIL_ADV_TRACE_PostSendHook();
 801b43a:	f7e6 fc2d 	bl	8001c98 <UTIL_ADV_TRACE_PostSendHook>
    TRACE_UnLock();
 801b43e:	f000 f8a7 	bl	801b590 <TRACE_UnLock>
  }
}
 801b442:	bf00      	nop
 801b444:	bf00      	nop
 801b446:	3720      	adds	r7, #32
 801b448:	46bd      	mov	sp, r7
 801b44a:	bd80      	pop	{r7, pc}
 801b44c:	20001b40 	.word	0x20001b40
 801b450:	20001b58 	.word	0x20001b58
 801b454:	0801c174 	.word	0x0801c174

0801b458 <TRACE_AllocateBufer>:
 * @param  Size to allocate within fifo
 * @param  Pos position within the fifo
 * @retval write position inside the buffer is -1 no space available.
 */
static int16_t TRACE_AllocateBufer(uint16_t Size, uint16_t *Pos)
{
 801b458:	b480      	push	{r7}
 801b45a:	b087      	sub	sp, #28
 801b45c:	af00      	add	r7, sp, #0
 801b45e:	4603      	mov	r3, r0
 801b460:	6039      	str	r1, [r7, #0]
 801b462:	80fb      	strh	r3, [r7, #6]
  uint16_t freesize;
  int16_t ret = -1;
 801b464:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801b468:	82bb      	strh	r3, [r7, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b46a:	f3ef 8310 	mrs	r3, PRIMASK
 801b46e:	60fb      	str	r3, [r7, #12]
  return(result);
 801b470:	68fb      	ldr	r3, [r7, #12]

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801b472:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 801b474:	b672      	cpsid	i
}
 801b476:	bf00      	nop

  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 801b478:	4b35      	ldr	r3, [pc, #212]	@ (801b550 <TRACE_AllocateBufer+0xf8>)
 801b47a:	8a5a      	ldrh	r2, [r3, #18]
 801b47c:	4b34      	ldr	r3, [pc, #208]	@ (801b550 <TRACE_AllocateBufer+0xf8>)
 801b47e:	8a1b      	ldrh	r3, [r3, #16]
 801b480:	429a      	cmp	r2, r3
 801b482:	d11b      	bne.n	801b4bc <TRACE_AllocateBufer+0x64>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 801b484:	4b32      	ldr	r3, [pc, #200]	@ (801b550 <TRACE_AllocateBufer+0xf8>)
 801b486:	8a5b      	ldrh	r3, [r3, #18]
 801b488:	f5c3 6380 	rsb	r3, r3, #1024	@ 0x400
 801b48c:	82fb      	strh	r3, [r7, #22]
    if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size))
 801b48e:	88fa      	ldrh	r2, [r7, #6]
 801b490:	8afb      	ldrh	r3, [r7, #22]
 801b492:	429a      	cmp	r2, r3
 801b494:	d33a      	bcc.n	801b50c <TRACE_AllocateBufer+0xb4>
 801b496:	4b2e      	ldr	r3, [pc, #184]	@ (801b550 <TRACE_AllocateBufer+0xf8>)
 801b498:	8a1b      	ldrh	r3, [r3, #16]
 801b49a:	88fa      	ldrh	r2, [r7, #6]
 801b49c:	429a      	cmp	r2, r3
 801b49e:	d235      	bcs.n	801b50c <TRACE_AllocateBufer+0xb4>
    {
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 801b4a0:	4b2b      	ldr	r3, [pc, #172]	@ (801b550 <TRACE_AllocateBufer+0xf8>)
 801b4a2:	2201      	movs	r2, #1
 801b4a4:	709a      	strb	r2, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 801b4a6:	4b2a      	ldr	r3, [pc, #168]	@ (801b550 <TRACE_AllocateBufer+0xf8>)
 801b4a8:	8a5a      	ldrh	r2, [r3, #18]
 801b4aa:	4b29      	ldr	r3, [pc, #164]	@ (801b550 <TRACE_AllocateBufer+0xf8>)
 801b4ac:	801a      	strh	r2, [r3, #0]
      freesize = ADV_TRACE_Ctx.TraceRdPtr;
 801b4ae:	4b28      	ldr	r3, [pc, #160]	@ (801b550 <TRACE_AllocateBufer+0xf8>)
 801b4b0:	8a1b      	ldrh	r3, [r3, #16]
 801b4b2:	82fb      	strh	r3, [r7, #22]
      ADV_TRACE_Ctx.TraceWrPtr = 0;
 801b4b4:	4b26      	ldr	r3, [pc, #152]	@ (801b550 <TRACE_AllocateBufer+0xf8>)
 801b4b6:	2200      	movs	r2, #0
 801b4b8:	825a      	strh	r2, [r3, #18]
 801b4ba:	e027      	b.n	801b50c <TRACE_AllocateBufer+0xb4>
#endif
  }
  else
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801b4bc:	4b24      	ldr	r3, [pc, #144]	@ (801b550 <TRACE_AllocateBufer+0xf8>)
 801b4be:	8a5a      	ldrh	r2, [r3, #18]
 801b4c0:	4b23      	ldr	r3, [pc, #140]	@ (801b550 <TRACE_AllocateBufer+0xf8>)
 801b4c2:	8a1b      	ldrh	r3, [r3, #16]
 801b4c4:	429a      	cmp	r2, r3
 801b4c6:	d91b      	bls.n	801b500 <TRACE_AllocateBufer+0xa8>
    {
      freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 801b4c8:	4b21      	ldr	r3, [pc, #132]	@ (801b550 <TRACE_AllocateBufer+0xf8>)
 801b4ca:	8a5b      	ldrh	r3, [r3, #18]
 801b4cc:	f5c3 6380 	rsb	r3, r3, #1024	@ 0x400
 801b4d0:	82fb      	strh	r3, [r7, #22]
      if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size)) 
 801b4d2:	88fa      	ldrh	r2, [r7, #6]
 801b4d4:	8afb      	ldrh	r3, [r7, #22]
 801b4d6:	429a      	cmp	r2, r3
 801b4d8:	d318      	bcc.n	801b50c <TRACE_AllocateBufer+0xb4>
 801b4da:	4b1d      	ldr	r3, [pc, #116]	@ (801b550 <TRACE_AllocateBufer+0xf8>)
 801b4dc:	8a1b      	ldrh	r3, [r3, #16]
 801b4de:	88fa      	ldrh	r2, [r7, #6]
 801b4e0:	429a      	cmp	r2, r3
 801b4e2:	d213      	bcs.n	801b50c <TRACE_AllocateBufer+0xb4>
      {
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 801b4e4:	4b1a      	ldr	r3, [pc, #104]	@ (801b550 <TRACE_AllocateBufer+0xf8>)
 801b4e6:	2201      	movs	r2, #1
 801b4e8:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 801b4ea:	4b19      	ldr	r3, [pc, #100]	@ (801b550 <TRACE_AllocateBufer+0xf8>)
 801b4ec:	8a5a      	ldrh	r2, [r3, #18]
 801b4ee:	4b18      	ldr	r3, [pc, #96]	@ (801b550 <TRACE_AllocateBufer+0xf8>)
 801b4f0:	801a      	strh	r2, [r3, #0]
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
 801b4f2:	4b17      	ldr	r3, [pc, #92]	@ (801b550 <TRACE_AllocateBufer+0xf8>)
 801b4f4:	8a1b      	ldrh	r3, [r3, #16]
 801b4f6:	82fb      	strh	r3, [r7, #22]
        ADV_TRACE_Ctx.TraceWrPtr = 0;
 801b4f8:	4b15      	ldr	r3, [pc, #84]	@ (801b550 <TRACE_AllocateBufer+0xf8>)
 801b4fa:	2200      	movs	r2, #0
 801b4fc:	825a      	strh	r2, [r3, #18]
 801b4fe:	e005      	b.n	801b50c <TRACE_AllocateBufer+0xb4>
      }
    }
    else
    {
      freesize = (uint16_t)(ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr);
 801b500:	4b13      	ldr	r3, [pc, #76]	@ (801b550 <TRACE_AllocateBufer+0xf8>)
 801b502:	8a1a      	ldrh	r2, [r3, #16]
 801b504:	4b12      	ldr	r3, [pc, #72]	@ (801b550 <TRACE_AllocateBufer+0xf8>)
 801b506:	8a5b      	ldrh	r3, [r3, #18]
 801b508:	1ad3      	subs	r3, r2, r3
 801b50a:	82fb      	strh	r3, [r7, #22]
      freesize = ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr;
    }
#endif
  }

  if(freesize > Size)
 801b50c:	8afa      	ldrh	r2, [r7, #22]
 801b50e:	88fb      	ldrh	r3, [r7, #6]
 801b510:	429a      	cmp	r2, r3
 801b512:	d90f      	bls.n	801b534 <TRACE_AllocateBufer+0xdc>
  {
    *Pos = ADV_TRACE_Ctx.TraceWrPtr;
 801b514:	4b0e      	ldr	r3, [pc, #56]	@ (801b550 <TRACE_AllocateBufer+0xf8>)
 801b516:	8a5a      	ldrh	r2, [r3, #18]
 801b518:	683b      	ldr	r3, [r7, #0]
 801b51a:	801a      	strh	r2, [r3, #0]
    ADV_TRACE_Ctx.TraceWrPtr = (ADV_TRACE_Ctx.TraceWrPtr + Size) % UTIL_ADV_TRACE_FIFO_SIZE;
 801b51c:	4b0c      	ldr	r3, [pc, #48]	@ (801b550 <TRACE_AllocateBufer+0xf8>)
 801b51e:	8a5a      	ldrh	r2, [r3, #18]
 801b520:	88fb      	ldrh	r3, [r7, #6]
 801b522:	4413      	add	r3, r2
 801b524:	b29b      	uxth	r3, r3
 801b526:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801b52a:	b29a      	uxth	r2, r3
 801b52c:	4b08      	ldr	r3, [pc, #32]	@ (801b550 <TRACE_AllocateBufer+0xf8>)
 801b52e:	825a      	strh	r2, [r3, #18]
    ret = 0;
 801b530:	2300      	movs	r3, #0
 801b532:	82bb      	strh	r3, [r7, #20]
 801b534:	693b      	ldr	r3, [r7, #16]
 801b536:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b538:	68bb      	ldr	r3, [r7, #8]
 801b53a:	f383 8810 	msr	PRIMASK, r3
}
 801b53e:	bf00      	nop
    }
  }
#endif

  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  return ret;
 801b540:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
}
 801b544:	4618      	mov	r0, r3
 801b546:	371c      	adds	r7, #28
 801b548:	46bd      	mov	sp, r7
 801b54a:	bc80      	pop	{r7}
 801b54c:	4770      	bx	lr
 801b54e:	bf00      	nop
 801b550:	20001b40 	.word	0x20001b40

0801b554 <TRACE_Lock>:
/**
 * @brief  Lock the trace buffer.
 * @retval None.
 */
static void TRACE_Lock(void)
{
 801b554:	b480      	push	{r7}
 801b556:	b085      	sub	sp, #20
 801b558:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b55a:	f3ef 8310 	mrs	r3, PRIMASK
 801b55e:	607b      	str	r3, [r7, #4]
  return(result);
 801b560:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801b562:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801b564:	b672      	cpsid	i
}
 801b566:	bf00      	nop
  ADV_TRACE_Ctx.TraceLock++;
 801b568:	4b08      	ldr	r3, [pc, #32]	@ (801b58c <TRACE_Lock+0x38>)
 801b56a:	8adb      	ldrh	r3, [r3, #22]
 801b56c:	3301      	adds	r3, #1
 801b56e:	b29a      	uxth	r2, r3
 801b570:	4b06      	ldr	r3, [pc, #24]	@ (801b58c <TRACE_Lock+0x38>)
 801b572:	82da      	strh	r2, [r3, #22]
 801b574:	68fb      	ldr	r3, [r7, #12]
 801b576:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b578:	68bb      	ldr	r3, [r7, #8]
 801b57a:	f383 8810 	msr	PRIMASK, r3
}
 801b57e:	bf00      	nop
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 801b580:	bf00      	nop
 801b582:	3714      	adds	r7, #20
 801b584:	46bd      	mov	sp, r7
 801b586:	bc80      	pop	{r7}
 801b588:	4770      	bx	lr
 801b58a:	bf00      	nop
 801b58c:	20001b40 	.word	0x20001b40

0801b590 <TRACE_UnLock>:
/**
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static void TRACE_UnLock(void)
{
 801b590:	b480      	push	{r7}
 801b592:	b085      	sub	sp, #20
 801b594:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b596:	f3ef 8310 	mrs	r3, PRIMASK
 801b59a:	607b      	str	r3, [r7, #4]
  return(result);
 801b59c:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801b59e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801b5a0:	b672      	cpsid	i
}
 801b5a2:	bf00      	nop
  ADV_TRACE_Ctx.TraceLock--;
 801b5a4:	4b08      	ldr	r3, [pc, #32]	@ (801b5c8 <TRACE_UnLock+0x38>)
 801b5a6:	8adb      	ldrh	r3, [r3, #22]
 801b5a8:	3b01      	subs	r3, #1
 801b5aa:	b29a      	uxth	r2, r3
 801b5ac:	4b06      	ldr	r3, [pc, #24]	@ (801b5c8 <TRACE_UnLock+0x38>)
 801b5ae:	82da      	strh	r2, [r3, #22]
 801b5b0:	68fb      	ldr	r3, [r7, #12]
 801b5b2:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b5b4:	68bb      	ldr	r3, [r7, #8]
 801b5b6:	f383 8810 	msr	PRIMASK, r3
}
 801b5ba:	bf00      	nop
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 801b5bc:	bf00      	nop
 801b5be:	3714      	adds	r7, #20
 801b5c0:	46bd      	mov	sp, r7
 801b5c2:	bc80      	pop	{r7}
 801b5c4:	4770      	bx	lr
 801b5c6:	bf00      	nop
 801b5c8:	20001b40 	.word	0x20001b40

0801b5cc <TRACE_IsLocked>:
/**
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static uint32_t TRACE_IsLocked(void)
{
 801b5cc:	b480      	push	{r7}
 801b5ce:	af00      	add	r7, sp, #0
  return (ADV_TRACE_Ctx.TraceLock == 0u? 0u: 1u);
 801b5d0:	4b05      	ldr	r3, [pc, #20]	@ (801b5e8 <TRACE_IsLocked+0x1c>)
 801b5d2:	8adb      	ldrh	r3, [r3, #22]
 801b5d4:	2b00      	cmp	r3, #0
 801b5d6:	bf14      	ite	ne
 801b5d8:	2301      	movne	r3, #1
 801b5da:	2300      	moveq	r3, #0
 801b5dc:	b2db      	uxtb	r3, r3
}
 801b5de:	4618      	mov	r0, r3
 801b5e0:	46bd      	mov	sp, r7
 801b5e2:	bc80      	pop	{r7}
 801b5e4:	4770      	bx	lr
 801b5e6:	bf00      	nop
 801b5e8:	20001b40 	.word	0x20001b40

0801b5ec <memset>:
 801b5ec:	4402      	add	r2, r0
 801b5ee:	4603      	mov	r3, r0
 801b5f0:	4293      	cmp	r3, r2
 801b5f2:	d100      	bne.n	801b5f6 <memset+0xa>
 801b5f4:	4770      	bx	lr
 801b5f6:	f803 1b01 	strb.w	r1, [r3], #1
 801b5fa:	e7f9      	b.n	801b5f0 <memset+0x4>

0801b5fc <__libc_init_array>:
 801b5fc:	b570      	push	{r4, r5, r6, lr}
 801b5fe:	4d0d      	ldr	r5, [pc, #52]	@ (801b634 <__libc_init_array+0x38>)
 801b600:	4c0d      	ldr	r4, [pc, #52]	@ (801b638 <__libc_init_array+0x3c>)
 801b602:	1b64      	subs	r4, r4, r5
 801b604:	10a4      	asrs	r4, r4, #2
 801b606:	2600      	movs	r6, #0
 801b608:	42a6      	cmp	r6, r4
 801b60a:	d109      	bne.n	801b620 <__libc_init_array+0x24>
 801b60c:	4d0b      	ldr	r5, [pc, #44]	@ (801b63c <__libc_init_array+0x40>)
 801b60e:	4c0c      	ldr	r4, [pc, #48]	@ (801b640 <__libc_init_array+0x44>)
 801b610:	f000 f89a 	bl	801b748 <_init>
 801b614:	1b64      	subs	r4, r4, r5
 801b616:	10a4      	asrs	r4, r4, #2
 801b618:	2600      	movs	r6, #0
 801b61a:	42a6      	cmp	r6, r4
 801b61c:	d105      	bne.n	801b62a <__libc_init_array+0x2e>
 801b61e:	bd70      	pop	{r4, r5, r6, pc}
 801b620:	f855 3b04 	ldr.w	r3, [r5], #4
 801b624:	4798      	blx	r3
 801b626:	3601      	adds	r6, #1
 801b628:	e7ee      	b.n	801b608 <__libc_init_array+0xc>
 801b62a:	f855 3b04 	ldr.w	r3, [r5], #4
 801b62e:	4798      	blx	r3
 801b630:	3601      	adds	r6, #1
 801b632:	e7f2      	b.n	801b61a <__libc_init_array+0x1e>
 801b634:	0801c78c 	.word	0x0801c78c
 801b638:	0801c78c 	.word	0x0801c78c
 801b63c:	0801c78c 	.word	0x0801c78c
 801b640:	0801c790 	.word	0x0801c790
 801b644:	00000000 	.word	0x00000000

0801b648 <floor>:
 801b648:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b64c:	f3c1 570a 	ubfx	r7, r1, #20, #11
 801b650:	f2a7 36ff 	subw	r6, r7, #1023	@ 0x3ff
 801b654:	2e13      	cmp	r6, #19
 801b656:	4602      	mov	r2, r0
 801b658:	460b      	mov	r3, r1
 801b65a:	460c      	mov	r4, r1
 801b65c:	4605      	mov	r5, r0
 801b65e:	4680      	mov	r8, r0
 801b660:	dc35      	bgt.n	801b6ce <floor+0x86>
 801b662:	2e00      	cmp	r6, #0
 801b664:	da17      	bge.n	801b696 <floor+0x4e>
 801b666:	a334      	add	r3, pc, #208	@ (adr r3, 801b738 <floor+0xf0>)
 801b668:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b66c:	f7e4 fd92 	bl	8000194 <__adddf3>
 801b670:	2200      	movs	r2, #0
 801b672:	2300      	movs	r3, #0
 801b674:	f7e4 ffc2 	bl	80005fc <__aeabi_dcmpgt>
 801b678:	b150      	cbz	r0, 801b690 <floor+0x48>
 801b67a:	2c00      	cmp	r4, #0
 801b67c:	da57      	bge.n	801b72e <floor+0xe6>
 801b67e:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 801b682:	432c      	orrs	r4, r5
 801b684:	2500      	movs	r5, #0
 801b686:	42ac      	cmp	r4, r5
 801b688:	4c2d      	ldr	r4, [pc, #180]	@ (801b740 <floor+0xf8>)
 801b68a:	bf08      	it	eq
 801b68c:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 801b690:	4623      	mov	r3, r4
 801b692:	462a      	mov	r2, r5
 801b694:	e024      	b.n	801b6e0 <floor+0x98>
 801b696:	4f2b      	ldr	r7, [pc, #172]	@ (801b744 <floor+0xfc>)
 801b698:	4137      	asrs	r7, r6
 801b69a:	ea01 0c07 	and.w	ip, r1, r7
 801b69e:	ea5c 0c00 	orrs.w	ip, ip, r0
 801b6a2:	d01d      	beq.n	801b6e0 <floor+0x98>
 801b6a4:	a324      	add	r3, pc, #144	@ (adr r3, 801b738 <floor+0xf0>)
 801b6a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b6aa:	f7e4 fd73 	bl	8000194 <__adddf3>
 801b6ae:	2200      	movs	r2, #0
 801b6b0:	2300      	movs	r3, #0
 801b6b2:	f7e4 ffa3 	bl	80005fc <__aeabi_dcmpgt>
 801b6b6:	2800      	cmp	r0, #0
 801b6b8:	d0ea      	beq.n	801b690 <floor+0x48>
 801b6ba:	2c00      	cmp	r4, #0
 801b6bc:	bfbe      	ittt	lt
 801b6be:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 801b6c2:	4133      	asrlt	r3, r6
 801b6c4:	18e4      	addlt	r4, r4, r3
 801b6c6:	ea24 0407 	bic.w	r4, r4, r7
 801b6ca:	2500      	movs	r5, #0
 801b6cc:	e7e0      	b.n	801b690 <floor+0x48>
 801b6ce:	2e33      	cmp	r6, #51	@ 0x33
 801b6d0:	dd0a      	ble.n	801b6e8 <floor+0xa0>
 801b6d2:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 801b6d6:	d103      	bne.n	801b6e0 <floor+0x98>
 801b6d8:	f7e4 fd5c 	bl	8000194 <__adddf3>
 801b6dc:	4602      	mov	r2, r0
 801b6de:	460b      	mov	r3, r1
 801b6e0:	4610      	mov	r0, r2
 801b6e2:	4619      	mov	r1, r3
 801b6e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b6e8:	f2a7 4713 	subw	r7, r7, #1043	@ 0x413
 801b6ec:	f04f 3cff 	mov.w	ip, #4294967295
 801b6f0:	fa2c f707 	lsr.w	r7, ip, r7
 801b6f4:	4207      	tst	r7, r0
 801b6f6:	d0f3      	beq.n	801b6e0 <floor+0x98>
 801b6f8:	a30f      	add	r3, pc, #60	@ (adr r3, 801b738 <floor+0xf0>)
 801b6fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b6fe:	f7e4 fd49 	bl	8000194 <__adddf3>
 801b702:	2200      	movs	r2, #0
 801b704:	2300      	movs	r3, #0
 801b706:	f7e4 ff79 	bl	80005fc <__aeabi_dcmpgt>
 801b70a:	2800      	cmp	r0, #0
 801b70c:	d0c0      	beq.n	801b690 <floor+0x48>
 801b70e:	2c00      	cmp	r4, #0
 801b710:	da0a      	bge.n	801b728 <floor+0xe0>
 801b712:	2e14      	cmp	r6, #20
 801b714:	d101      	bne.n	801b71a <floor+0xd2>
 801b716:	3401      	adds	r4, #1
 801b718:	e006      	b.n	801b728 <floor+0xe0>
 801b71a:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 801b71e:	2301      	movs	r3, #1
 801b720:	40b3      	lsls	r3, r6
 801b722:	441d      	add	r5, r3
 801b724:	4545      	cmp	r5, r8
 801b726:	d3f6      	bcc.n	801b716 <floor+0xce>
 801b728:	ea25 0507 	bic.w	r5, r5, r7
 801b72c:	e7b0      	b.n	801b690 <floor+0x48>
 801b72e:	2500      	movs	r5, #0
 801b730:	462c      	mov	r4, r5
 801b732:	e7ad      	b.n	801b690 <floor+0x48>
 801b734:	f3af 8000 	nop.w
 801b738:	8800759c 	.word	0x8800759c
 801b73c:	7e37e43c 	.word	0x7e37e43c
 801b740:	bff00000 	.word	0xbff00000
 801b744:	000fffff 	.word	0x000fffff

0801b748 <_init>:
 801b748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b74a:	bf00      	nop
 801b74c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b74e:	bc08      	pop	{r3}
 801b750:	469e      	mov	lr, r3
 801b752:	4770      	bx	lr

0801b754 <_fini>:
 801b754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b756:	bf00      	nop
 801b758:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b75a:	bc08      	pop	{r3}
 801b75c:	469e      	mov	lr, r3
 801b75e:	4770      	bx	lr
