
Seeed-LoRa-E5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001e8a0  08000140  08000140  00001140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001350  0801e9e0  0801e9e0  0001f9e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .USER_embedded_Keys 000000c0  0801fd30  0801fd30  00020d30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  0801fdf0  0801fdf0  00021320  2**0
                  CONTENTS
  5 .ARM          00000008  0801fdf0  0801fdf0  00020df0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  0801fdf8  0801fdf8  00021320  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  0801fdf8  0801fdf8  00020df8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  0801fdfc  0801fdfc  00020dfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         00000320  20000000  0801fe00  00021000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          000021e4  20000320  08020120  00021320  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20002504  08020120  00021504  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00021320  2**0
                  CONTENTS, READONLY
 13 .debug_info   0003f4fd  00000000  00000000  0002134a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000a360  00000000  00000000  00060847  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000032e0  00000000  00000000  0006aba8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000026a3  00000000  00000000  0006de88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000287af  00000000  00000000  0007052b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0003eb15  00000000  00000000  00098cda  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cb48e  00000000  00000000  000d77ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001a2c7d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000def0  00000000  00000000  001a2cc0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000064  00000000  00000000  001b0bb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000320 	.word	0x20000320
 800015c:	00000000 	.word	0x00000000
 8000160:	0801e9c8 	.word	0x0801e9c8

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000324 	.word	0x20000324
 800017c:	0801e9c8 	.word	0x0801e9c8

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	@ 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__gedf2>:
 80009cc:	f04f 3cff 	mov.w	ip, #4294967295
 80009d0:	e006      	b.n	80009e0 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__ledf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	e002      	b.n	80009e0 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__cmpdf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009f6:	d01b      	beq.n	8000a30 <__cmpdf2+0x54>
 80009f8:	b001      	add	sp, #4
 80009fa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009fe:	bf0c      	ite	eq
 8000a00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a04:	ea91 0f03 	teqne	r1, r3
 8000a08:	bf02      	ittt	eq
 8000a0a:	ea90 0f02 	teqeq	r0, r2
 8000a0e:	2000      	moveq	r0, #0
 8000a10:	4770      	bxeq	lr
 8000a12:	f110 0f00 	cmn.w	r0, #0
 8000a16:	ea91 0f03 	teq	r1, r3
 8000a1a:	bf58      	it	pl
 8000a1c:	4299      	cmppl	r1, r3
 8000a1e:	bf08      	it	eq
 8000a20:	4290      	cmpeq	r0, r2
 8000a22:	bf2c      	ite	cs
 8000a24:	17d8      	asrcs	r0, r3, #31
 8000a26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a2a:	f040 0001 	orr.w	r0, r0, #1
 8000a2e:	4770      	bx	lr
 8000a30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__cmpdf2+0x64>
 8000a3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3e:	d107      	bne.n	8000a50 <__cmpdf2+0x74>
 8000a40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d1d6      	bne.n	80009f8 <__cmpdf2+0x1c>
 8000a4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4e:	d0d3      	beq.n	80009f8 <__cmpdf2+0x1c>
 8000a50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdrcmple>:
 8000a58:	4684      	mov	ip, r0
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4662      	mov	r2, ip
 8000a5e:	468c      	mov	ip, r1
 8000a60:	4619      	mov	r1, r3
 8000a62:	4663      	mov	r3, ip
 8000a64:	e000      	b.n	8000a68 <__aeabi_cdcmpeq>
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdcmpeq>:
 8000a68:	b501      	push	{r0, lr}
 8000a6a:	f7ff ffb7 	bl	80009dc <__cmpdf2>
 8000a6e:	2800      	cmp	r0, #0
 8000a70:	bf48      	it	mi
 8000a72:	f110 0f00 	cmnmi.w	r0, #0
 8000a76:	bd01      	pop	{r0, pc}

08000a78 <__aeabi_dcmpeq>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff fff4 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a80:	bf0c      	ite	eq
 8000a82:	2001      	moveq	r0, #1
 8000a84:	2000      	movne	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmplt>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffea 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a94:	bf34      	ite	cc
 8000a96:	2001      	movcc	r0, #1
 8000a98:	2000      	movcs	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmple>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffe0 	bl	8000a68 <__aeabi_cdcmpeq>
 8000aa8:	bf94      	ite	ls
 8000aaa:	2001      	movls	r0, #1
 8000aac:	2000      	movhi	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpge>:
 8000ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab8:	f7ff ffce 	bl	8000a58 <__aeabi_cdrcmple>
 8000abc:	bf94      	ite	ls
 8000abe:	2001      	movls	r0, #1
 8000ac0:	2000      	movhi	r0, #0
 8000ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_dcmpgt>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff ffc4 	bl	8000a58 <__aeabi_cdrcmple>
 8000ad0:	bf34      	ite	cc
 8000ad2:	2001      	movcc	r0, #1
 8000ad4:	2000      	movcs	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmpun>:
 8000adc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x10>
 8000ae6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aea:	d10a      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x20>
 8000af6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afa:	d102      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	f04f 0001 	mov.w	r0, #1
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_d2iz>:
 8000b08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b0c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b10:	d215      	bcs.n	8000b3e <__aeabi_d2iz+0x36>
 8000b12:	d511      	bpl.n	8000b38 <__aeabi_d2iz+0x30>
 8000b14:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b1c:	d912      	bls.n	8000b44 <__aeabi_d2iz+0x3c>
 8000b1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b22:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b2a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b32:	bf18      	it	ne
 8000b34:	4240      	negne	r0, r0
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b42:	d105      	bne.n	8000b50 <__aeabi_d2iz+0x48>
 8000b44:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b48:	bf08      	it	eq
 8000b4a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b4e:	4770      	bx	lr
 8000b50:	f04f 0000 	mov.w	r0, #0
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_frsub>:
 8000b58:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b5c:	e002      	b.n	8000b64 <__addsf3>
 8000b5e:	bf00      	nop

08000b60 <__aeabi_fsub>:
 8000b60:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b64 <__addsf3>:
 8000b64:	0042      	lsls	r2, r0, #1
 8000b66:	bf1f      	itttt	ne
 8000b68:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b6c:	ea92 0f03 	teqne	r2, r3
 8000b70:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b74:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b78:	d06a      	beq.n	8000c50 <__addsf3+0xec>
 8000b7a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b7e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b82:	bfc1      	itttt	gt
 8000b84:	18d2      	addgt	r2, r2, r3
 8000b86:	4041      	eorgt	r1, r0
 8000b88:	4048      	eorgt	r0, r1
 8000b8a:	4041      	eorgt	r1, r0
 8000b8c:	bfb8      	it	lt
 8000b8e:	425b      	neglt	r3, r3
 8000b90:	2b19      	cmp	r3, #25
 8000b92:	bf88      	it	hi
 8000b94:	4770      	bxhi	lr
 8000b96:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b9a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b9e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000baa:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000bae:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4249      	negne	r1, r1
 8000bb6:	ea92 0f03 	teq	r2, r3
 8000bba:	d03f      	beq.n	8000c3c <__addsf3+0xd8>
 8000bbc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bc0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bc4:	eb10 000c 	adds.w	r0, r0, ip
 8000bc8:	f1c3 0320 	rsb	r3, r3, #32
 8000bcc:	fa01 f103 	lsl.w	r1, r1, r3
 8000bd0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000bd4:	d502      	bpl.n	8000bdc <__addsf3+0x78>
 8000bd6:	4249      	negs	r1, r1
 8000bd8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bdc:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000be0:	d313      	bcc.n	8000c0a <__addsf3+0xa6>
 8000be2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000be6:	d306      	bcc.n	8000bf6 <__addsf3+0x92>
 8000be8:	0840      	lsrs	r0, r0, #1
 8000bea:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bee:	f102 0201 	add.w	r2, r2, #1
 8000bf2:	2afe      	cmp	r2, #254	@ 0xfe
 8000bf4:	d251      	bcs.n	8000c9a <__addsf3+0x136>
 8000bf6:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000bfa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bfe:	bf08      	it	eq
 8000c00:	f020 0001 	biceq.w	r0, r0, #1
 8000c04:	ea40 0003 	orr.w	r0, r0, r3
 8000c08:	4770      	bx	lr
 8000c0a:	0049      	lsls	r1, r1, #1
 8000c0c:	eb40 0000 	adc.w	r0, r0, r0
 8000c10:	3a01      	subs	r2, #1
 8000c12:	bf28      	it	cs
 8000c14:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c18:	d2ed      	bcs.n	8000bf6 <__addsf3+0x92>
 8000c1a:	fab0 fc80 	clz	ip, r0
 8000c1e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c22:	ebb2 020c 	subs.w	r2, r2, ip
 8000c26:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c2a:	bfaa      	itet	ge
 8000c2c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c30:	4252      	neglt	r2, r2
 8000c32:	4318      	orrge	r0, r3
 8000c34:	bfbc      	itt	lt
 8000c36:	40d0      	lsrlt	r0, r2
 8000c38:	4318      	orrlt	r0, r3
 8000c3a:	4770      	bx	lr
 8000c3c:	f092 0f00 	teq	r2, #0
 8000c40:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c44:	bf06      	itte	eq
 8000c46:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c4a:	3201      	addeq	r2, #1
 8000c4c:	3b01      	subne	r3, #1
 8000c4e:	e7b5      	b.n	8000bbc <__addsf3+0x58>
 8000c50:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c54:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c58:	bf18      	it	ne
 8000c5a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c5e:	d021      	beq.n	8000ca4 <__addsf3+0x140>
 8000c60:	ea92 0f03 	teq	r2, r3
 8000c64:	d004      	beq.n	8000c70 <__addsf3+0x10c>
 8000c66:	f092 0f00 	teq	r2, #0
 8000c6a:	bf08      	it	eq
 8000c6c:	4608      	moveq	r0, r1
 8000c6e:	4770      	bx	lr
 8000c70:	ea90 0f01 	teq	r0, r1
 8000c74:	bf1c      	itt	ne
 8000c76:	2000      	movne	r0, #0
 8000c78:	4770      	bxne	lr
 8000c7a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c7e:	d104      	bne.n	8000c8a <__addsf3+0x126>
 8000c80:	0040      	lsls	r0, r0, #1
 8000c82:	bf28      	it	cs
 8000c84:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c88:	4770      	bx	lr
 8000c8a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c8e:	bf3c      	itt	cc
 8000c90:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bxcc	lr
 8000c96:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c9a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000c9e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ca2:	4770      	bx	lr
 8000ca4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ca8:	bf16      	itet	ne
 8000caa:	4608      	movne	r0, r1
 8000cac:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cb0:	4601      	movne	r1, r0
 8000cb2:	0242      	lsls	r2, r0, #9
 8000cb4:	bf06      	itte	eq
 8000cb6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cba:	ea90 0f01 	teqeq	r0, r1
 8000cbe:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000cc2:	4770      	bx	lr

08000cc4 <__aeabi_ui2f>:
 8000cc4:	f04f 0300 	mov.w	r3, #0
 8000cc8:	e004      	b.n	8000cd4 <__aeabi_i2f+0x8>
 8000cca:	bf00      	nop

08000ccc <__aeabi_i2f>:
 8000ccc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000cd0:	bf48      	it	mi
 8000cd2:	4240      	negmi	r0, r0
 8000cd4:	ea5f 0c00 	movs.w	ip, r0
 8000cd8:	bf08      	it	eq
 8000cda:	4770      	bxeq	lr
 8000cdc:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000ce0:	4601      	mov	r1, r0
 8000ce2:	f04f 0000 	mov.w	r0, #0
 8000ce6:	e01c      	b.n	8000d22 <__aeabi_l2f+0x2a>

08000ce8 <__aeabi_ul2f>:
 8000ce8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cec:	bf08      	it	eq
 8000cee:	4770      	bxeq	lr
 8000cf0:	f04f 0300 	mov.w	r3, #0
 8000cf4:	e00a      	b.n	8000d0c <__aeabi_l2f+0x14>
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_l2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d04:	d502      	bpl.n	8000d0c <__aeabi_l2f+0x14>
 8000d06:	4240      	negs	r0, r0
 8000d08:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d0c:	ea5f 0c01 	movs.w	ip, r1
 8000d10:	bf02      	ittt	eq
 8000d12:	4684      	moveq	ip, r0
 8000d14:	4601      	moveq	r1, r0
 8000d16:	2000      	moveq	r0, #0
 8000d18:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d1c:	bf08      	it	eq
 8000d1e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d22:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d26:	fabc f28c 	clz	r2, ip
 8000d2a:	3a08      	subs	r2, #8
 8000d2c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d30:	db10      	blt.n	8000d54 <__aeabi_l2f+0x5c>
 8000d32:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d36:	4463      	add	r3, ip
 8000d38:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d3c:	f1c2 0220 	rsb	r2, r2, #32
 8000d40:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d44:	fa20 f202 	lsr.w	r2, r0, r2
 8000d48:	eb43 0002 	adc.w	r0, r3, r2
 8000d4c:	bf08      	it	eq
 8000d4e:	f020 0001 	biceq.w	r0, r0, #1
 8000d52:	4770      	bx	lr
 8000d54:	f102 0220 	add.w	r2, r2, #32
 8000d58:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d5c:	f1c2 0220 	rsb	r2, r2, #32
 8000d60:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d64:	fa21 f202 	lsr.w	r2, r1, r2
 8000d68:	eb43 0002 	adc.w	r0, r3, r2
 8000d6c:	bf08      	it	eq
 8000d6e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d72:	4770      	bx	lr

08000d74 <__aeabi_fmul>:
 8000d74:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d78:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d7c:	bf1e      	ittt	ne
 8000d7e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d82:	ea92 0f0c 	teqne	r2, ip
 8000d86:	ea93 0f0c 	teqne	r3, ip
 8000d8a:	d06f      	beq.n	8000e6c <__aeabi_fmul+0xf8>
 8000d8c:	441a      	add	r2, r3
 8000d8e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d92:	0240      	lsls	r0, r0, #9
 8000d94:	bf18      	it	ne
 8000d96:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d9a:	d01e      	beq.n	8000dda <__aeabi_fmul+0x66>
 8000d9c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000da0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000da4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000da8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dac:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000db0:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000db4:	bf3e      	ittt	cc
 8000db6:	0049      	lslcc	r1, r1, #1
 8000db8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dbc:	005b      	lslcc	r3, r3, #1
 8000dbe:	ea40 0001 	orr.w	r0, r0, r1
 8000dc2:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000dc6:	2afd      	cmp	r2, #253	@ 0xfd
 8000dc8:	d81d      	bhi.n	8000e06 <__aeabi_fmul+0x92>
 8000dca:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000dce:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000dd2:	bf08      	it	eq
 8000dd4:	f020 0001 	biceq.w	r0, r0, #1
 8000dd8:	4770      	bx	lr
 8000dda:	f090 0f00 	teq	r0, #0
 8000dde:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000de2:	bf08      	it	eq
 8000de4:	0249      	lsleq	r1, r1, #9
 8000de6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dea:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dee:	3a7f      	subs	r2, #127	@ 0x7f
 8000df0:	bfc2      	ittt	gt
 8000df2:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000df6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dfa:	4770      	bxgt	lr
 8000dfc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e00:	f04f 0300 	mov.w	r3, #0
 8000e04:	3a01      	subs	r2, #1
 8000e06:	dc5d      	bgt.n	8000ec4 <__aeabi_fmul+0x150>
 8000e08:	f112 0f19 	cmn.w	r2, #25
 8000e0c:	bfdc      	itt	le
 8000e0e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000e12:	4770      	bxle	lr
 8000e14:	f1c2 0200 	rsb	r2, r2, #0
 8000e18:	0041      	lsls	r1, r0, #1
 8000e1a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e1e:	f1c2 0220 	rsb	r2, r2, #32
 8000e22:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e26:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e2a:	f140 0000 	adc.w	r0, r0, #0
 8000e2e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e32:	bf08      	it	eq
 8000e34:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e38:	4770      	bx	lr
 8000e3a:	f092 0f00 	teq	r2, #0
 8000e3e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e42:	bf02      	ittt	eq
 8000e44:	0040      	lsleq	r0, r0, #1
 8000e46:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e4a:	3a01      	subeq	r2, #1
 8000e4c:	d0f9      	beq.n	8000e42 <__aeabi_fmul+0xce>
 8000e4e:	ea40 000c 	orr.w	r0, r0, ip
 8000e52:	f093 0f00 	teq	r3, #0
 8000e56:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e5a:	bf02      	ittt	eq
 8000e5c:	0049      	lsleq	r1, r1, #1
 8000e5e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e62:	3b01      	subeq	r3, #1
 8000e64:	d0f9      	beq.n	8000e5a <__aeabi_fmul+0xe6>
 8000e66:	ea41 010c 	orr.w	r1, r1, ip
 8000e6a:	e78f      	b.n	8000d8c <__aeabi_fmul+0x18>
 8000e6c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e70:	ea92 0f0c 	teq	r2, ip
 8000e74:	bf18      	it	ne
 8000e76:	ea93 0f0c 	teqne	r3, ip
 8000e7a:	d00a      	beq.n	8000e92 <__aeabi_fmul+0x11e>
 8000e7c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e80:	bf18      	it	ne
 8000e82:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e86:	d1d8      	bne.n	8000e3a <__aeabi_fmul+0xc6>
 8000e88:	ea80 0001 	eor.w	r0, r0, r1
 8000e8c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e90:	4770      	bx	lr
 8000e92:	f090 0f00 	teq	r0, #0
 8000e96:	bf17      	itett	ne
 8000e98:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000e9c:	4608      	moveq	r0, r1
 8000e9e:	f091 0f00 	teqne	r1, #0
 8000ea2:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000ea6:	d014      	beq.n	8000ed2 <__aeabi_fmul+0x15e>
 8000ea8:	ea92 0f0c 	teq	r2, ip
 8000eac:	d101      	bne.n	8000eb2 <__aeabi_fmul+0x13e>
 8000eae:	0242      	lsls	r2, r0, #9
 8000eb0:	d10f      	bne.n	8000ed2 <__aeabi_fmul+0x15e>
 8000eb2:	ea93 0f0c 	teq	r3, ip
 8000eb6:	d103      	bne.n	8000ec0 <__aeabi_fmul+0x14c>
 8000eb8:	024b      	lsls	r3, r1, #9
 8000eba:	bf18      	it	ne
 8000ebc:	4608      	movne	r0, r1
 8000ebe:	d108      	bne.n	8000ed2 <__aeabi_fmul+0x15e>
 8000ec0:	ea80 0001 	eor.w	r0, r0, r1
 8000ec4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ec8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ecc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ed0:	4770      	bx	lr
 8000ed2:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ed6:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000eda:	4770      	bx	lr

08000edc <__aeabi_fdiv>:
 8000edc:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ee0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ee4:	bf1e      	ittt	ne
 8000ee6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eea:	ea92 0f0c 	teqne	r2, ip
 8000eee:	ea93 0f0c 	teqne	r3, ip
 8000ef2:	d069      	beq.n	8000fc8 <__aeabi_fdiv+0xec>
 8000ef4:	eba2 0203 	sub.w	r2, r2, r3
 8000ef8:	ea80 0c01 	eor.w	ip, r0, r1
 8000efc:	0249      	lsls	r1, r1, #9
 8000efe:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f02:	d037      	beq.n	8000f74 <__aeabi_fdiv+0x98>
 8000f04:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000f08:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f0c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f10:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000f14:	428b      	cmp	r3, r1
 8000f16:	bf38      	it	cc
 8000f18:	005b      	lslcc	r3, r3, #1
 8000f1a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000f1e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000f22:	428b      	cmp	r3, r1
 8000f24:	bf24      	itt	cs
 8000f26:	1a5b      	subcs	r3, r3, r1
 8000f28:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f2c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f30:	bf24      	itt	cs
 8000f32:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f36:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f3a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f3e:	bf24      	itt	cs
 8000f40:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f44:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f48:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f4c:	bf24      	itt	cs
 8000f4e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f52:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f56:	011b      	lsls	r3, r3, #4
 8000f58:	bf18      	it	ne
 8000f5a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f5e:	d1e0      	bne.n	8000f22 <__aeabi_fdiv+0x46>
 8000f60:	2afd      	cmp	r2, #253	@ 0xfd
 8000f62:	f63f af50 	bhi.w	8000e06 <__aeabi_fmul+0x92>
 8000f66:	428b      	cmp	r3, r1
 8000f68:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f6c:	bf08      	it	eq
 8000f6e:	f020 0001 	biceq.w	r0, r0, #1
 8000f72:	4770      	bx	lr
 8000f74:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f78:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f7c:	327f      	adds	r2, #127	@ 0x7f
 8000f7e:	bfc2      	ittt	gt
 8000f80:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f84:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f88:	4770      	bxgt	lr
 8000f8a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f8e:	f04f 0300 	mov.w	r3, #0
 8000f92:	3a01      	subs	r2, #1
 8000f94:	e737      	b.n	8000e06 <__aeabi_fmul+0x92>
 8000f96:	f092 0f00 	teq	r2, #0
 8000f9a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000f9e:	bf02      	ittt	eq
 8000fa0:	0040      	lsleq	r0, r0, #1
 8000fa2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000fa6:	3a01      	subeq	r2, #1
 8000fa8:	d0f9      	beq.n	8000f9e <__aeabi_fdiv+0xc2>
 8000faa:	ea40 000c 	orr.w	r0, r0, ip
 8000fae:	f093 0f00 	teq	r3, #0
 8000fb2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000fb6:	bf02      	ittt	eq
 8000fb8:	0049      	lsleq	r1, r1, #1
 8000fba:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000fbe:	3b01      	subeq	r3, #1
 8000fc0:	d0f9      	beq.n	8000fb6 <__aeabi_fdiv+0xda>
 8000fc2:	ea41 010c 	orr.w	r1, r1, ip
 8000fc6:	e795      	b.n	8000ef4 <__aeabi_fdiv+0x18>
 8000fc8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fcc:	ea92 0f0c 	teq	r2, ip
 8000fd0:	d108      	bne.n	8000fe4 <__aeabi_fdiv+0x108>
 8000fd2:	0242      	lsls	r2, r0, #9
 8000fd4:	f47f af7d 	bne.w	8000ed2 <__aeabi_fmul+0x15e>
 8000fd8:	ea93 0f0c 	teq	r3, ip
 8000fdc:	f47f af70 	bne.w	8000ec0 <__aeabi_fmul+0x14c>
 8000fe0:	4608      	mov	r0, r1
 8000fe2:	e776      	b.n	8000ed2 <__aeabi_fmul+0x15e>
 8000fe4:	ea93 0f0c 	teq	r3, ip
 8000fe8:	d104      	bne.n	8000ff4 <__aeabi_fdiv+0x118>
 8000fea:	024b      	lsls	r3, r1, #9
 8000fec:	f43f af4c 	beq.w	8000e88 <__aeabi_fmul+0x114>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e76e      	b.n	8000ed2 <__aeabi_fmul+0x15e>
 8000ff4:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000ff8:	bf18      	it	ne
 8000ffa:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000ffe:	d1ca      	bne.n	8000f96 <__aeabi_fdiv+0xba>
 8001000:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8001004:	f47f af5c 	bne.w	8000ec0 <__aeabi_fmul+0x14c>
 8001008:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 800100c:	f47f af3c 	bne.w	8000e88 <__aeabi_fmul+0x114>
 8001010:	e75f      	b.n	8000ed2 <__aeabi_fmul+0x15e>
 8001012:	bf00      	nop

08001014 <__aeabi_f2iz>:
 8001014:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001018:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 800101c:	d30f      	bcc.n	800103e <__aeabi_f2iz+0x2a>
 800101e:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8001022:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001026:	d90d      	bls.n	8001044 <__aeabi_f2iz+0x30>
 8001028:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800102c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001030:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8001034:	fa23 f002 	lsr.w	r0, r3, r2
 8001038:	bf18      	it	ne
 800103a:	4240      	negne	r0, r0
 800103c:	4770      	bx	lr
 800103e:	f04f 0000 	mov.w	r0, #0
 8001042:	4770      	bx	lr
 8001044:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8001048:	d101      	bne.n	800104e <__aeabi_f2iz+0x3a>
 800104a:	0242      	lsls	r2, r0, #9
 800104c:	d105      	bne.n	800105a <__aeabi_f2iz+0x46>
 800104e:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 8001052:	bf08      	it	eq
 8001054:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8001058:	4770      	bx	lr
 800105a:	f04f 0000 	mov.w	r0, #0
 800105e:	4770      	bx	lr

08001060 <__aeabi_f2uiz>:
 8001060:	0042      	lsls	r2, r0, #1
 8001062:	d20e      	bcs.n	8001082 <__aeabi_f2uiz+0x22>
 8001064:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8001068:	d30b      	bcc.n	8001082 <__aeabi_f2uiz+0x22>
 800106a:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 800106e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001072:	d409      	bmi.n	8001088 <__aeabi_f2uiz+0x28>
 8001074:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001078:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800107c:	fa23 f002 	lsr.w	r0, r3, r2
 8001080:	4770      	bx	lr
 8001082:	f04f 0000 	mov.w	r0, #0
 8001086:	4770      	bx	lr
 8001088:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 800108c:	d101      	bne.n	8001092 <__aeabi_f2uiz+0x32>
 800108e:	0242      	lsls	r2, r0, #9
 8001090:	d102      	bne.n	8001098 <__aeabi_f2uiz+0x38>
 8001092:	f04f 30ff 	mov.w	r0, #4294967295
 8001096:	4770      	bx	lr
 8001098:	f04f 0000 	mov.w	r0, #0
 800109c:	4770      	bx	lr
 800109e:	bf00      	nop

080010a0 <__aeabi_uldivmod>:
 80010a0:	b953      	cbnz	r3, 80010b8 <__aeabi_uldivmod+0x18>
 80010a2:	b94a      	cbnz	r2, 80010b8 <__aeabi_uldivmod+0x18>
 80010a4:	2900      	cmp	r1, #0
 80010a6:	bf08      	it	eq
 80010a8:	2800      	cmpeq	r0, #0
 80010aa:	bf1c      	itt	ne
 80010ac:	f04f 31ff 	movne.w	r1, #4294967295
 80010b0:	f04f 30ff 	movne.w	r0, #4294967295
 80010b4:	f000 b96a 	b.w	800138c <__aeabi_idiv0>
 80010b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80010bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80010c0:	f000 f806 	bl	80010d0 <__udivmoddi4>
 80010c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80010c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80010cc:	b004      	add	sp, #16
 80010ce:	4770      	bx	lr

080010d0 <__udivmoddi4>:
 80010d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80010d4:	9d08      	ldr	r5, [sp, #32]
 80010d6:	460c      	mov	r4, r1
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d14e      	bne.n	800117a <__udivmoddi4+0xaa>
 80010dc:	4694      	mov	ip, r2
 80010de:	458c      	cmp	ip, r1
 80010e0:	4686      	mov	lr, r0
 80010e2:	fab2 f282 	clz	r2, r2
 80010e6:	d962      	bls.n	80011ae <__udivmoddi4+0xde>
 80010e8:	b14a      	cbz	r2, 80010fe <__udivmoddi4+0x2e>
 80010ea:	f1c2 0320 	rsb	r3, r2, #32
 80010ee:	4091      	lsls	r1, r2
 80010f0:	fa20 f303 	lsr.w	r3, r0, r3
 80010f4:	fa0c fc02 	lsl.w	ip, ip, r2
 80010f8:	4319      	orrs	r1, r3
 80010fa:	fa00 fe02 	lsl.w	lr, r0, r2
 80010fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001102:	fa1f f68c 	uxth.w	r6, ip
 8001106:	fbb1 f4f7 	udiv	r4, r1, r7
 800110a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800110e:	fb07 1114 	mls	r1, r7, r4, r1
 8001112:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001116:	fb04 f106 	mul.w	r1, r4, r6
 800111a:	4299      	cmp	r1, r3
 800111c:	d90a      	bls.n	8001134 <__udivmoddi4+0x64>
 800111e:	eb1c 0303 	adds.w	r3, ip, r3
 8001122:	f104 30ff 	add.w	r0, r4, #4294967295
 8001126:	f080 8112 	bcs.w	800134e <__udivmoddi4+0x27e>
 800112a:	4299      	cmp	r1, r3
 800112c:	f240 810f 	bls.w	800134e <__udivmoddi4+0x27e>
 8001130:	3c02      	subs	r4, #2
 8001132:	4463      	add	r3, ip
 8001134:	1a59      	subs	r1, r3, r1
 8001136:	fa1f f38e 	uxth.w	r3, lr
 800113a:	fbb1 f0f7 	udiv	r0, r1, r7
 800113e:	fb07 1110 	mls	r1, r7, r0, r1
 8001142:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001146:	fb00 f606 	mul.w	r6, r0, r6
 800114a:	429e      	cmp	r6, r3
 800114c:	d90a      	bls.n	8001164 <__udivmoddi4+0x94>
 800114e:	eb1c 0303 	adds.w	r3, ip, r3
 8001152:	f100 31ff 	add.w	r1, r0, #4294967295
 8001156:	f080 80fc 	bcs.w	8001352 <__udivmoddi4+0x282>
 800115a:	429e      	cmp	r6, r3
 800115c:	f240 80f9 	bls.w	8001352 <__udivmoddi4+0x282>
 8001160:	4463      	add	r3, ip
 8001162:	3802      	subs	r0, #2
 8001164:	1b9b      	subs	r3, r3, r6
 8001166:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800116a:	2100      	movs	r1, #0
 800116c:	b11d      	cbz	r5, 8001176 <__udivmoddi4+0xa6>
 800116e:	40d3      	lsrs	r3, r2
 8001170:	2200      	movs	r2, #0
 8001172:	e9c5 3200 	strd	r3, r2, [r5]
 8001176:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800117a:	428b      	cmp	r3, r1
 800117c:	d905      	bls.n	800118a <__udivmoddi4+0xba>
 800117e:	b10d      	cbz	r5, 8001184 <__udivmoddi4+0xb4>
 8001180:	e9c5 0100 	strd	r0, r1, [r5]
 8001184:	2100      	movs	r1, #0
 8001186:	4608      	mov	r0, r1
 8001188:	e7f5      	b.n	8001176 <__udivmoddi4+0xa6>
 800118a:	fab3 f183 	clz	r1, r3
 800118e:	2900      	cmp	r1, #0
 8001190:	d146      	bne.n	8001220 <__udivmoddi4+0x150>
 8001192:	42a3      	cmp	r3, r4
 8001194:	d302      	bcc.n	800119c <__udivmoddi4+0xcc>
 8001196:	4290      	cmp	r0, r2
 8001198:	f0c0 80f0 	bcc.w	800137c <__udivmoddi4+0x2ac>
 800119c:	1a86      	subs	r6, r0, r2
 800119e:	eb64 0303 	sbc.w	r3, r4, r3
 80011a2:	2001      	movs	r0, #1
 80011a4:	2d00      	cmp	r5, #0
 80011a6:	d0e6      	beq.n	8001176 <__udivmoddi4+0xa6>
 80011a8:	e9c5 6300 	strd	r6, r3, [r5]
 80011ac:	e7e3      	b.n	8001176 <__udivmoddi4+0xa6>
 80011ae:	2a00      	cmp	r2, #0
 80011b0:	f040 8090 	bne.w	80012d4 <__udivmoddi4+0x204>
 80011b4:	eba1 040c 	sub.w	r4, r1, ip
 80011b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80011bc:	fa1f f78c 	uxth.w	r7, ip
 80011c0:	2101      	movs	r1, #1
 80011c2:	fbb4 f6f8 	udiv	r6, r4, r8
 80011c6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80011ca:	fb08 4416 	mls	r4, r8, r6, r4
 80011ce:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80011d2:	fb07 f006 	mul.w	r0, r7, r6
 80011d6:	4298      	cmp	r0, r3
 80011d8:	d908      	bls.n	80011ec <__udivmoddi4+0x11c>
 80011da:	eb1c 0303 	adds.w	r3, ip, r3
 80011de:	f106 34ff 	add.w	r4, r6, #4294967295
 80011e2:	d202      	bcs.n	80011ea <__udivmoddi4+0x11a>
 80011e4:	4298      	cmp	r0, r3
 80011e6:	f200 80cd 	bhi.w	8001384 <__udivmoddi4+0x2b4>
 80011ea:	4626      	mov	r6, r4
 80011ec:	1a1c      	subs	r4, r3, r0
 80011ee:	fa1f f38e 	uxth.w	r3, lr
 80011f2:	fbb4 f0f8 	udiv	r0, r4, r8
 80011f6:	fb08 4410 	mls	r4, r8, r0, r4
 80011fa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80011fe:	fb00 f707 	mul.w	r7, r0, r7
 8001202:	429f      	cmp	r7, r3
 8001204:	d908      	bls.n	8001218 <__udivmoddi4+0x148>
 8001206:	eb1c 0303 	adds.w	r3, ip, r3
 800120a:	f100 34ff 	add.w	r4, r0, #4294967295
 800120e:	d202      	bcs.n	8001216 <__udivmoddi4+0x146>
 8001210:	429f      	cmp	r7, r3
 8001212:	f200 80b0 	bhi.w	8001376 <__udivmoddi4+0x2a6>
 8001216:	4620      	mov	r0, r4
 8001218:	1bdb      	subs	r3, r3, r7
 800121a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800121e:	e7a5      	b.n	800116c <__udivmoddi4+0x9c>
 8001220:	f1c1 0620 	rsb	r6, r1, #32
 8001224:	408b      	lsls	r3, r1
 8001226:	fa22 f706 	lsr.w	r7, r2, r6
 800122a:	431f      	orrs	r7, r3
 800122c:	fa20 fc06 	lsr.w	ip, r0, r6
 8001230:	fa04 f301 	lsl.w	r3, r4, r1
 8001234:	ea43 030c 	orr.w	r3, r3, ip
 8001238:	40f4      	lsrs	r4, r6
 800123a:	fa00 f801 	lsl.w	r8, r0, r1
 800123e:	0c38      	lsrs	r0, r7, #16
 8001240:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8001244:	fbb4 fef0 	udiv	lr, r4, r0
 8001248:	fa1f fc87 	uxth.w	ip, r7
 800124c:	fb00 441e 	mls	r4, r0, lr, r4
 8001250:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8001254:	fb0e f90c 	mul.w	r9, lr, ip
 8001258:	45a1      	cmp	r9, r4
 800125a:	fa02 f201 	lsl.w	r2, r2, r1
 800125e:	d90a      	bls.n	8001276 <__udivmoddi4+0x1a6>
 8001260:	193c      	adds	r4, r7, r4
 8001262:	f10e 3aff 	add.w	sl, lr, #4294967295
 8001266:	f080 8084 	bcs.w	8001372 <__udivmoddi4+0x2a2>
 800126a:	45a1      	cmp	r9, r4
 800126c:	f240 8081 	bls.w	8001372 <__udivmoddi4+0x2a2>
 8001270:	f1ae 0e02 	sub.w	lr, lr, #2
 8001274:	443c      	add	r4, r7
 8001276:	eba4 0409 	sub.w	r4, r4, r9
 800127a:	fa1f f983 	uxth.w	r9, r3
 800127e:	fbb4 f3f0 	udiv	r3, r4, r0
 8001282:	fb00 4413 	mls	r4, r0, r3, r4
 8001286:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800128a:	fb03 fc0c 	mul.w	ip, r3, ip
 800128e:	45a4      	cmp	ip, r4
 8001290:	d907      	bls.n	80012a2 <__udivmoddi4+0x1d2>
 8001292:	193c      	adds	r4, r7, r4
 8001294:	f103 30ff 	add.w	r0, r3, #4294967295
 8001298:	d267      	bcs.n	800136a <__udivmoddi4+0x29a>
 800129a:	45a4      	cmp	ip, r4
 800129c:	d965      	bls.n	800136a <__udivmoddi4+0x29a>
 800129e:	3b02      	subs	r3, #2
 80012a0:	443c      	add	r4, r7
 80012a2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80012a6:	fba0 9302 	umull	r9, r3, r0, r2
 80012aa:	eba4 040c 	sub.w	r4, r4, ip
 80012ae:	429c      	cmp	r4, r3
 80012b0:	46ce      	mov	lr, r9
 80012b2:	469c      	mov	ip, r3
 80012b4:	d351      	bcc.n	800135a <__udivmoddi4+0x28a>
 80012b6:	d04e      	beq.n	8001356 <__udivmoddi4+0x286>
 80012b8:	b155      	cbz	r5, 80012d0 <__udivmoddi4+0x200>
 80012ba:	ebb8 030e 	subs.w	r3, r8, lr
 80012be:	eb64 040c 	sbc.w	r4, r4, ip
 80012c2:	fa04 f606 	lsl.w	r6, r4, r6
 80012c6:	40cb      	lsrs	r3, r1
 80012c8:	431e      	orrs	r6, r3
 80012ca:	40cc      	lsrs	r4, r1
 80012cc:	e9c5 6400 	strd	r6, r4, [r5]
 80012d0:	2100      	movs	r1, #0
 80012d2:	e750      	b.n	8001176 <__udivmoddi4+0xa6>
 80012d4:	f1c2 0320 	rsb	r3, r2, #32
 80012d8:	fa20 f103 	lsr.w	r1, r0, r3
 80012dc:	fa0c fc02 	lsl.w	ip, ip, r2
 80012e0:	fa24 f303 	lsr.w	r3, r4, r3
 80012e4:	4094      	lsls	r4, r2
 80012e6:	430c      	orrs	r4, r1
 80012e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80012ec:	fa00 fe02 	lsl.w	lr, r0, r2
 80012f0:	fa1f f78c 	uxth.w	r7, ip
 80012f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80012f8:	fb08 3110 	mls	r1, r8, r0, r3
 80012fc:	0c23      	lsrs	r3, r4, #16
 80012fe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001302:	fb00 f107 	mul.w	r1, r0, r7
 8001306:	4299      	cmp	r1, r3
 8001308:	d908      	bls.n	800131c <__udivmoddi4+0x24c>
 800130a:	eb1c 0303 	adds.w	r3, ip, r3
 800130e:	f100 36ff 	add.w	r6, r0, #4294967295
 8001312:	d22c      	bcs.n	800136e <__udivmoddi4+0x29e>
 8001314:	4299      	cmp	r1, r3
 8001316:	d92a      	bls.n	800136e <__udivmoddi4+0x29e>
 8001318:	3802      	subs	r0, #2
 800131a:	4463      	add	r3, ip
 800131c:	1a5b      	subs	r3, r3, r1
 800131e:	b2a4      	uxth	r4, r4
 8001320:	fbb3 f1f8 	udiv	r1, r3, r8
 8001324:	fb08 3311 	mls	r3, r8, r1, r3
 8001328:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800132c:	fb01 f307 	mul.w	r3, r1, r7
 8001330:	42a3      	cmp	r3, r4
 8001332:	d908      	bls.n	8001346 <__udivmoddi4+0x276>
 8001334:	eb1c 0404 	adds.w	r4, ip, r4
 8001338:	f101 36ff 	add.w	r6, r1, #4294967295
 800133c:	d213      	bcs.n	8001366 <__udivmoddi4+0x296>
 800133e:	42a3      	cmp	r3, r4
 8001340:	d911      	bls.n	8001366 <__udivmoddi4+0x296>
 8001342:	3902      	subs	r1, #2
 8001344:	4464      	add	r4, ip
 8001346:	1ae4      	subs	r4, r4, r3
 8001348:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800134c:	e739      	b.n	80011c2 <__udivmoddi4+0xf2>
 800134e:	4604      	mov	r4, r0
 8001350:	e6f0      	b.n	8001134 <__udivmoddi4+0x64>
 8001352:	4608      	mov	r0, r1
 8001354:	e706      	b.n	8001164 <__udivmoddi4+0x94>
 8001356:	45c8      	cmp	r8, r9
 8001358:	d2ae      	bcs.n	80012b8 <__udivmoddi4+0x1e8>
 800135a:	ebb9 0e02 	subs.w	lr, r9, r2
 800135e:	eb63 0c07 	sbc.w	ip, r3, r7
 8001362:	3801      	subs	r0, #1
 8001364:	e7a8      	b.n	80012b8 <__udivmoddi4+0x1e8>
 8001366:	4631      	mov	r1, r6
 8001368:	e7ed      	b.n	8001346 <__udivmoddi4+0x276>
 800136a:	4603      	mov	r3, r0
 800136c:	e799      	b.n	80012a2 <__udivmoddi4+0x1d2>
 800136e:	4630      	mov	r0, r6
 8001370:	e7d4      	b.n	800131c <__udivmoddi4+0x24c>
 8001372:	46d6      	mov	lr, sl
 8001374:	e77f      	b.n	8001276 <__udivmoddi4+0x1a6>
 8001376:	4463      	add	r3, ip
 8001378:	3802      	subs	r0, #2
 800137a:	e74d      	b.n	8001218 <__udivmoddi4+0x148>
 800137c:	4606      	mov	r6, r0
 800137e:	4623      	mov	r3, r4
 8001380:	4608      	mov	r0, r1
 8001382:	e70f      	b.n	80011a4 <__udivmoddi4+0xd4>
 8001384:	3e02      	subs	r6, #2
 8001386:	4463      	add	r3, ip
 8001388:	e730      	b.n	80011ec <__udivmoddi4+0x11c>
 800138a:	bf00      	nop

0800138c <__aeabi_idiv0>:
 800138c:	4770      	bx	lr
 800138e:	bf00      	nop

08001390 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001390:	b480      	push	{r7}
 8001392:	b085      	sub	sp, #20
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001398:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800139c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800139e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	4313      	orrs	r3, r2
 80013a6:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80013a8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80013ac:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	4013      	ands	r3, r2
 80013b2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80013b4:	68fb      	ldr	r3, [r7, #12]
}
 80013b6:	bf00      	nop
 80013b8:	3714      	adds	r7, #20
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bc80      	pop	{r7}
 80013be:	4770      	bx	lr

080013c0 <LL_APB2_GRP1_DisableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_DisableClock(uint32_t Periphs)
{
 80013c0:	b480      	push	{r7}
 80013c2:	b083      	sub	sp, #12
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 80013c8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80013cc:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	43db      	mvns	r3, r3
 80013d2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80013d6:	4013      	ands	r3, r2
 80013d8:	660b      	str	r3, [r1, #96]	@ 0x60
}
 80013da:	bf00      	nop
 80013dc:	370c      	adds	r7, #12
 80013de:	46bd      	mov	sp, r7
 80013e0:	bc80      	pop	{r7}
 80013e2:	4770      	bx	lr

080013e4 <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	af00      	add	r7, sp, #0

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC;
 80013e8:	4b23      	ldr	r3, [pc, #140]	@ (8001478 <MX_ADC_Init+0x94>)
 80013ea:	4a24      	ldr	r2, [pc, #144]	@ (800147c <MX_ADC_Init+0x98>)
 80013ec:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80013ee:	4b22      	ldr	r3, [pc, #136]	@ (8001478 <MX_ADC_Init+0x94>)
 80013f0:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80013f4:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80013f6:	4b20      	ldr	r3, [pc, #128]	@ (8001478 <MX_ADC_Init+0x94>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80013fc:	4b1e      	ldr	r3, [pc, #120]	@ (8001478 <MX_ADC_Init+0x94>)
 80013fe:	2200      	movs	r2, #0
 8001400:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001402:	4b1d      	ldr	r3, [pc, #116]	@ (8001478 <MX_ADC_Init+0x94>)
 8001404:	2200      	movs	r2, #0
 8001406:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001408:	4b1b      	ldr	r3, [pc, #108]	@ (8001478 <MX_ADC_Init+0x94>)
 800140a:	2204      	movs	r2, #4
 800140c:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 800140e:	4b1a      	ldr	r3, [pc, #104]	@ (8001478 <MX_ADC_Init+0x94>)
 8001410:	2200      	movs	r2, #0
 8001412:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8001414:	4b18      	ldr	r3, [pc, #96]	@ (8001478 <MX_ADC_Init+0x94>)
 8001416:	2200      	movs	r2, #0
 8001418:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 800141a:	4b17      	ldr	r3, [pc, #92]	@ (8001478 <MX_ADC_Init+0x94>)
 800141c:	2200      	movs	r2, #0
 800141e:	769a      	strb	r2, [r3, #26]
  hadc.Init.NbrOfConversion = 1;
 8001420:	4b15      	ldr	r3, [pc, #84]	@ (8001478 <MX_ADC_Init+0x94>)
 8001422:	2201      	movs	r2, #1
 8001424:	61da      	str	r2, [r3, #28]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8001426:	4b14      	ldr	r3, [pc, #80]	@ (8001478 <MX_ADC_Init+0x94>)
 8001428:	2200      	movs	r2, #0
 800142a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800142e:	4b12      	ldr	r3, [pc, #72]	@ (8001478 <MX_ADC_Init+0x94>)
 8001430:	2200      	movs	r2, #0
 8001432:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001434:	4b10      	ldr	r3, [pc, #64]	@ (8001478 <MX_ADC_Init+0x94>)
 8001436:	2200      	movs	r2, #0
 8001438:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc.Init.DMAContinuousRequests = DISABLE;
 800143a:	4b0f      	ldr	r3, [pc, #60]	@ (8001478 <MX_ADC_Init+0x94>)
 800143c:	2200      	movs	r2, #0
 800143e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  hadc.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001442:	4b0d      	ldr	r3, [pc, #52]	@ (8001478 <MX_ADC_Init+0x94>)
 8001444:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001448:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_160CYCLES_5;
 800144a:	4b0b      	ldr	r3, [pc, #44]	@ (8001478 <MX_ADC_Init+0x94>)
 800144c:	2207      	movs	r2, #7
 800144e:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_160CYCLES_5;
 8001450:	4b09      	ldr	r3, [pc, #36]	@ (8001478 <MX_ADC_Init+0x94>)
 8001452:	2207      	movs	r2, #7
 8001454:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc.Init.OversamplingMode = DISABLE;
 8001456:	4b08      	ldr	r3, [pc, #32]	@ (8001478 <MX_ADC_Init+0x94>)
 8001458:	2200      	movs	r2, #0
 800145a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  hadc.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 800145e:	4b06      	ldr	r3, [pc, #24]	@ (8001478 <MX_ADC_Init+0x94>)
 8001460:	2200      	movs	r2, #0
 8001462:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8001464:	4804      	ldr	r0, [pc, #16]	@ (8001478 <MX_ADC_Init+0x94>)
 8001466:	f002 f875 	bl	8003554 <HAL_ADC_Init>
 800146a:	4603      	mov	r3, r0
 800146c:	2b00      	cmp	r3, #0
 800146e:	d001      	beq.n	8001474 <MX_ADC_Init+0x90>
  {
    Error_Handler();
 8001470:	f000 fb82 	bl	8001b78 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8001474:	bf00      	nop
 8001476:	bd80      	pop	{r7, pc}
 8001478:	2000033c 	.word	0x2000033c
 800147c:	40012400 	.word	0x40012400

08001480 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b082      	sub	sp, #8
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	4a05      	ldr	r2, [pc, #20]	@ (80014a4 <HAL_ADC_MspInit+0x24>)
 800148e:	4293      	cmp	r3, r2
 8001490:	d103      	bne.n	800149a <HAL_ADC_MspInit+0x1a>
  {
  /* USER CODE BEGIN ADC_MspInit 0 */

  /* USER CODE END ADC_MspInit 0 */
    /* ADC clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001492:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001496:	f7ff ff7b 	bl	8001390 <LL_APB2_GRP1_EnableClock>
  /* USER CODE BEGIN ADC_MspInit 1 */

  /* USER CODE END ADC_MspInit 1 */
  }
}
 800149a:	bf00      	nop
 800149c:	3708      	adds	r7, #8
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	40012400 	.word	0x40012400

080014a8 <HAL_ADC_MspDeInit>:

void HAL_ADC_MspDeInit(ADC_HandleTypeDef* adcHandle)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b082      	sub	sp, #8
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	4a05      	ldr	r2, [pc, #20]	@ (80014cc <HAL_ADC_MspDeInit+0x24>)
 80014b6:	4293      	cmp	r3, r2
 80014b8:	d103      	bne.n	80014c2 <HAL_ADC_MspDeInit+0x1a>
  {
  /* USER CODE BEGIN ADC_MspDeInit 0 */

  /* USER CODE END ADC_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_ADC_CLK_DISABLE();
 80014ba:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80014be:	f7ff ff7f 	bl	80013c0 <LL_APB2_GRP1_DisableClock>
  /* USER CODE BEGIN ADC_MspDeInit 1 */

  /* USER CODE END ADC_MspDeInit 1 */
  }
}
 80014c2:	bf00      	nop
 80014c4:	3708      	adds	r7, #8
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	40012400 	.word	0x40012400

080014d0 <SYS_InitMeasurement>:
/* USER CODE BEGIN EF */

/* USER CODE END EF */

void SYS_InitMeasurement(void)
{
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SYS_InitMeasurement_1 */

  /* USER CODE END SYS_InitMeasurement_1 */
  hadc.Instance = ADC;
 80014d4:	4b03      	ldr	r3, [pc, #12]	@ (80014e4 <SYS_InitMeasurement+0x14>)
 80014d6:	4a04      	ldr	r2, [pc, #16]	@ (80014e8 <SYS_InitMeasurement+0x18>)
 80014d8:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN SYS_InitMeasurement_2 */

  /* USER CODE END SYS_InitMeasurement_2 */
}
 80014da:	bf00      	nop
 80014dc:	46bd      	mov	sp, r7
 80014de:	bc80      	pop	{r7}
 80014e0:	4770      	bx	lr
 80014e2:	bf00      	nop
 80014e4:	2000033c 	.word	0x2000033c
 80014e8:	40012400 	.word	0x40012400

080014ec <SYS_GetBatteryLevel>:

  /* USER CODE END SYS_GetTemperatureLevel_2 */
}

uint16_t SYS_GetBatteryLevel(void)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b082      	sub	sp, #8
 80014f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SYS_GetBatteryLevel_1 */

  /* USER CODE END SYS_GetBatteryLevel_1 */
  uint16_t batteryLevelmV = 0;
 80014f2:	2300      	movs	r3, #0
 80014f4:	80fb      	strh	r3, [r7, #6]
  uint32_t measuredLevel = 0;
 80014f6:	2300      	movs	r3, #0
 80014f8:	603b      	str	r3, [r7, #0]

  measuredLevel = ADC_ReadChannels(ADC_CHANNEL_VREFINT);
 80014fa:	4813      	ldr	r0, [pc, #76]	@ (8001548 <SYS_GetBatteryLevel+0x5c>)
 80014fc:	f000 f82a 	bl	8001554 <ADC_ReadChannels>
 8001500:	6038      	str	r0, [r7, #0]

  if (measuredLevel == 0)
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	2b00      	cmp	r3, #0
 8001506:	d102      	bne.n	800150e <SYS_GetBatteryLevel+0x22>
  {
    batteryLevelmV = 0;
 8001508:	2300      	movs	r3, #0
 800150a:	80fb      	strh	r3, [r7, #6]
 800150c:	e016      	b.n	800153c <SYS_GetBatteryLevel+0x50>
  }
  else
  {
    if ((uint32_t)*VREFINT_CAL_ADDR != (uint32_t)0xFFFFU)
 800150e:	4b0f      	ldr	r3, [pc, #60]	@ (800154c <SYS_GetBatteryLevel+0x60>)
 8001510:	881b      	ldrh	r3, [r3, #0]
 8001512:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001516:	4293      	cmp	r3, r2
 8001518:	d00b      	beq.n	8001532 <SYS_GetBatteryLevel+0x46>
    {
      /* Device with Reference voltage calibrated in production:
         use device optimized parameters */
      batteryLevelmV = __LL_ADC_CALC_VREFANALOG_VOLTAGE(measuredLevel,
 800151a:	4b0c      	ldr	r3, [pc, #48]	@ (800154c <SYS_GetBatteryLevel+0x60>)
 800151c:	881b      	ldrh	r3, [r3, #0]
 800151e:	461a      	mov	r2, r3
 8001520:	f640 43e4 	movw	r3, #3300	@ 0xce4
 8001524:	fb03 f202 	mul.w	r2, r3, r2
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	fbb2 f3f3 	udiv	r3, r2, r3
 800152e:	80fb      	strh	r3, [r7, #6]
 8001530:	e004      	b.n	800153c <SYS_GetBatteryLevel+0x50>
    }
    else
    {
      /* Device with Reference voltage not calibrated in production:
         use generic parameters */
      batteryLevelmV = (VREFINT_CAL_VREF * 1510) / measuredLevel;
 8001532:	4a07      	ldr	r2, [pc, #28]	@ (8001550 <SYS_GetBatteryLevel+0x64>)
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	fbb2 f3f3 	udiv	r3, r2, r3
 800153a:	80fb      	strh	r3, [r7, #6]
    }
  }

  return batteryLevelmV;
 800153c:	88fb      	ldrh	r3, [r7, #6]
  /* USER CODE BEGIN SYS_GetBatteryLevel_2 */

  /* USER CODE END SYS_GetBatteryLevel_2 */
}
 800153e:	4618      	mov	r0, r3
 8001540:	3708      	adds	r7, #8
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	b4002000 	.word	0xb4002000
 800154c:	1fff75aa 	.word	0x1fff75aa
 8001550:	004c08d8 	.word	0x004c08d8

08001554 <ADC_ReadChannels>:
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

static uint32_t ADC_ReadChannels(uint32_t channel)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b086      	sub	sp, #24
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ADC_ReadChannels_1 */

  /* USER CODE END ADC_ReadChannels_1 */
  uint32_t ADCxConvertedValues = 0;
 800155c:	2300      	movs	r3, #0
 800155e:	617b      	str	r3, [r7, #20]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001560:	f107 0308 	add.w	r3, r7, #8
 8001564:	2200      	movs	r2, #0
 8001566:	601a      	str	r2, [r3, #0]
 8001568:	605a      	str	r2, [r3, #4]
 800156a:	609a      	str	r2, [r3, #8]

  MX_ADC_Init();
 800156c:	f7ff ff3a 	bl	80013e4 <MX_ADC_Init>

  /* Start Calibration */
  if (HAL_ADCEx_Calibration_Start(&hadc) != HAL_OK)
 8001570:	481a      	ldr	r0, [pc, #104]	@ (80015dc <ADC_ReadChannels+0x88>)
 8001572:	f002 fe1e 	bl	80041b2 <HAL_ADCEx_Calibration_Start>
 8001576:	4603      	mov	r3, r0
 8001578:	2b00      	cmp	r3, #0
 800157a:	d001      	beq.n	8001580 <ADC_ReadChannels+0x2c>
  {
    Error_Handler();
 800157c:	f000 fafc 	bl	8001b78 <Error_Handler>
  }

  /* Configure Regular Channel */
  sConfig.Channel = channel;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	60bb      	str	r3, [r7, #8]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001584:	2300      	movs	r3, #0
 8001586:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8001588:	2300      	movs	r3, #0
 800158a:	613b      	str	r3, [r7, #16]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800158c:	f107 0308 	add.w	r3, r7, #8
 8001590:	4619      	mov	r1, r3
 8001592:	4812      	ldr	r0, [pc, #72]	@ (80015dc <ADC_ReadChannels+0x88>)
 8001594:	f002 fb2a 	bl	8003bec <HAL_ADC_ConfigChannel>
 8001598:	4603      	mov	r3, r0
 800159a:	2b00      	cmp	r3, #0
 800159c:	d001      	beq.n	80015a2 <ADC_ReadChannels+0x4e>
  {
    Error_Handler();
 800159e:	f000 faeb 	bl	8001b78 <Error_Handler>
  }

  if (HAL_ADC_Start(&hadc) != HAL_OK)
 80015a2:	480e      	ldr	r0, [pc, #56]	@ (80015dc <ADC_ReadChannels+0x88>)
 80015a4:	f002 fa06 	bl	80039b4 <HAL_ADC_Start>
 80015a8:	4603      	mov	r3, r0
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d001      	beq.n	80015b2 <ADC_ReadChannels+0x5e>
  {
    /* Start Error */
    Error_Handler();
 80015ae:	f000 fae3 	bl	8001b78 <Error_Handler>
  }
  /** Wait for end of conversion */
  HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 80015b2:	f04f 31ff 	mov.w	r1, #4294967295
 80015b6:	4809      	ldr	r0, [pc, #36]	@ (80015dc <ADC_ReadChannels+0x88>)
 80015b8:	f002 fa74 	bl	8003aa4 <HAL_ADC_PollForConversion>

  /** Wait for end of conversion */
  HAL_ADC_Stop(&hadc);   /* it calls also ADC_Disable() */
 80015bc:	4807      	ldr	r0, [pc, #28]	@ (80015dc <ADC_ReadChannels+0x88>)
 80015be:	f002 fa3f 	bl	8003a40 <HAL_ADC_Stop>

  ADCxConvertedValues = HAL_ADC_GetValue(&hadc);
 80015c2:	4806      	ldr	r0, [pc, #24]	@ (80015dc <ADC_ReadChannels+0x88>)
 80015c4:	f002 fb05 	bl	8003bd2 <HAL_ADC_GetValue>
 80015c8:	6178      	str	r0, [r7, #20]

  HAL_ADC_DeInit(&hadc);
 80015ca:	4804      	ldr	r0, [pc, #16]	@ (80015dc <ADC_ReadChannels+0x88>)
 80015cc:	f002 f976 	bl	80038bc <HAL_ADC_DeInit>

  return ADCxConvertedValues;
 80015d0:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN ADC_ReadChannels_2 */

  /* USER CODE END ADC_ReadChannels_2 */
}
 80015d2:	4618      	mov	r0, r3
 80015d4:	3718      	adds	r7, #24
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	2000033c 	.word	0x2000033c

080015e0 <LL_AHB1_GRP1_EnableClock>:
{
 80015e0:	b480      	push	{r7}
 80015e2:	b085      	sub	sp, #20
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80015e8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80015ec:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80015ee:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	4313      	orrs	r3, r2
 80015f6:	648b      	str	r3, [r1, #72]	@ 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80015f8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80015fc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	4013      	ands	r3, r2
 8001602:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001604:	68fb      	ldr	r3, [r7, #12]
}
 8001606:	bf00      	nop
 8001608:	3714      	adds	r7, #20
 800160a:	46bd      	mov	sp, r7
 800160c:	bc80      	pop	{r7}
 800160e:	4770      	bx	lr

08001610 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001614:	2004      	movs	r0, #4
 8001616:	f7ff ffe3 	bl	80015e0 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 800161a:	2001      	movs	r0, #1
 800161c:	f7ff ffe0 	bl	80015e0 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 2, 0);
 8001620:	2200      	movs	r2, #0
 8001622:	2102      	movs	r1, #2
 8001624:	200b      	movs	r0, #11
 8001626:	f002 ff6a 	bl	80044fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800162a:	200b      	movs	r0, #11
 800162c:	f002 ff81 	bl	8004532 <HAL_NVIC_EnableIRQ>

}
 8001630:	bf00      	nop
 8001632:	bd80      	pop	{r7, pc}

08001634 <LL_FLASH_IsActiveFlag_OperationSuspended>:
  * @rmtoll FLASH_SR      PESD         LL_FLASH_IsActiveFlag_OperationSuspended
  * @rmtoll FLASH_C2SR    PESD         LL_FLASH_IsActiveFlag_OperationSuspended
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_FLASH_IsActiveFlag_OperationSuspended(void)
{
 8001634:	b480      	push	{r7}
 8001636:	af00      	add	r7, sp, #0
#if defined(CORE_CM0PLUS)
  return ((READ_BIT(FLASH->C2SR, FLASH_C2SR_PESD) == (FLASH_C2SR_PESD)) ? 1UL : 0UL);
#else
  return ((READ_BIT(FLASH->SR, FLASH_SR_PESD) == (FLASH_SR_PESD)) ? 1UL : 0UL);
 8001638:	4b06      	ldr	r3, [pc, #24]	@ (8001654 <LL_FLASH_IsActiveFlag_OperationSuspended+0x20>)
 800163a:	691b      	ldr	r3, [r3, #16]
 800163c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001640:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8001644:	d101      	bne.n	800164a <LL_FLASH_IsActiveFlag_OperationSuspended+0x16>
 8001646:	2301      	movs	r3, #1
 8001648:	e000      	b.n	800164c <LL_FLASH_IsActiveFlag_OperationSuspended+0x18>
 800164a:	2300      	movs	r3, #0
#endif
}
 800164c:	4618      	mov	r0, r3
 800164e:	46bd      	mov	sp, r7
 8001650:	bc80      	pop	{r7}
 8001652:	4770      	bx	lr
 8001654:	58004000 	.word	0x58004000

08001658 <FLASH_IF_Write>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t FLASH_IF_Write(uint32_t address, uint8_t *data, uint32_t size, uint8_t *dataTempPage)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b08c      	sub	sp, #48	@ 0x30
 800165c:	af00      	add	r7, sp, #0
 800165e:	60f8      	str	r0, [r7, #12]
 8001660:	60b9      	str	r1, [r7, #8]
 8001662:	607a      	str	r2, [r7, #4]
 8001664:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN FLASH_IF_Write_1 */

  /* USER CODE END FLASH_IF_Write_1 */
  int32_t status = FLASH_OK;
 8001666:	2300      	movs	r3, #0
 8001668:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t page_start_index = PAGE(address);
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	f103 4278 	add.w	r2, r3, #4160749568	@ 0xf8000000
 8001670:	4b56      	ldr	r3, [pc, #344]	@ (80017cc <FLASH_IF_Write+0x174>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	0299      	lsls	r1, r3, #10
 8001676:	4b56      	ldr	r3, [pc, #344]	@ (80017d0 <FLASH_IF_Write+0x178>)
 8001678:	400b      	ands	r3, r1
 800167a:	fbb2 f1f3 	udiv	r1, r2, r3
 800167e:	fb01 f303 	mul.w	r3, r1, r3
 8001682:	1ad3      	subs	r3, r2, r3
 8001684:	0adb      	lsrs	r3, r3, #11
 8001686:	61bb      	str	r3, [r7, #24]
  uint32_t page_end_index = PAGE(address + size - 1);
 8001688:	68fa      	ldr	r2, [r7, #12]
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	4413      	add	r3, r2
 800168e:	f103 4378 	add.w	r3, r3, #4160749568	@ 0xf8000000
 8001692:	3b01      	subs	r3, #1
 8001694:	4a4d      	ldr	r2, [pc, #308]	@ (80017cc <FLASH_IF_Write+0x174>)
 8001696:	6812      	ldr	r2, [r2, #0]
 8001698:	0291      	lsls	r1, r2, #10
 800169a:	4a4d      	ldr	r2, [pc, #308]	@ (80017d0 <FLASH_IF_Write+0x178>)
 800169c:	400a      	ands	r2, r1
 800169e:	fbb3 f1f2 	udiv	r1, r3, r2
 80016a2:	fb01 f202 	mul.w	r2, r1, r2
 80016a6:	1a9b      	subs	r3, r3, r2
 80016a8:	0adb      	lsrs	r3, r3, #11
 80016aa:	617b      	str	r3, [r7, #20]
  uint32_t curr_size = size;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t curr_dest_addr = address;
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t curr_src_addr = (uint32_t)data;
 80016b4:	68bb      	ldr	r3, [r7, #8]
 80016b6:	623b      	str	r3, [r7, #32]

  if ((data == NULL) || ((size % sizeof(uint64_t)) != 0) || ((address % sizeof(uint64_t)) != 0))
 80016b8:	68bb      	ldr	r3, [r7, #8]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d009      	beq.n	80016d2 <FLASH_IF_Write+0x7a>
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	f003 0307 	and.w	r3, r3, #7
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d104      	bne.n	80016d2 <FLASH_IF_Write+0x7a>
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	f003 0307 	and.w	r3, r3, #7
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d002      	beq.n	80016d8 <FLASH_IF_Write+0x80>
  {
    return FLASH_PARAM_ERROR;
 80016d2:	f06f 0304 	mvn.w	r3, #4
 80016d6:	e074      	b.n	80017c2 <FLASH_IF_Write+0x16a>
  }

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 80016d8:	4b3e      	ldr	r3, [pc, #248]	@ (80017d4 <FLASH_IF_Write+0x17c>)
 80016da:	695b      	ldr	r3, [r3, #20]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	da02      	bge.n	80016e6 <FLASH_IF_Write+0x8e>
  {
    return FLASH_LOCK_ERROR;
 80016e0:	f06f 0303 	mvn.w	r3, #3
 80016e4:	e06d      	b.n	80017c2 <FLASH_IF_Write+0x16a>
  }

  if (page_start_index != page_end_index)
 80016e6:	69ba      	ldr	r2, [r7, #24]
 80016e8:	697b      	ldr	r3, [r7, #20]
 80016ea:	429a      	cmp	r2, r3
 80016ec:	d005      	beq.n	80016fa <FLASH_IF_Write+0xa2>
  {
    curr_size = FLASH_PAGE_SIZE - (address % FLASH_PAGE_SIZE);
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80016f4:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 80016f8:	62bb      	str	r3, [r7, #40]	@ 0x28
  }

  for (uint32_t idx = page_start_index; idx <= page_end_index; idx++)
 80016fa:	69bb      	ldr	r3, [r7, #24]
 80016fc:	61fb      	str	r3, [r7, #28]
 80016fe:	e05b      	b.n	80017b8 <FLASH_IF_Write+0x160>
  {
    if (FLASH_IF_IsEmpty((uint8_t *)curr_dest_addr, curr_size) != FLASH_EMPTY)
 8001700:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001702:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001704:	4618      	mov	r0, r3
 8001706:	f000 f8f8 	bl	80018fa <FLASH_IF_IsEmpty>
 800170a:	4603      	mov	r3, r0
 800170c:	2b00      	cmp	r3, #0
 800170e:	d037      	beq.n	8001780 <FLASH_IF_Write+0x128>
    {
      if (dataTempPage == NULL)
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d102      	bne.n	800171c <FLASH_IF_Write+0xc4>
      {
        return FLASH_PARAM_ERROR;
 8001716:	f06f 0304 	mvn.w	r3, #4
 800171a:	e052      	b.n	80017c2 <FLASH_IF_Write+0x16a>
      }
      /* backup initial Flash page data in RAM area */
      UTIL_MEM_cpy_8(dataTempPage, (uint8_t *)(idx * FLASH_PAGE_SIZE + FLASH_BASE), FLASH_PAGE_SIZE);
 800171c:	69fb      	ldr	r3, [r7, #28]
 800171e:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8001722:	02db      	lsls	r3, r3, #11
 8001724:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001728:	4619      	mov	r1, r3
 800172a:	6838      	ldr	r0, [r7, #0]
 800172c:	f019 f98c 	bl	801aa48 <UTIL_MEM_cpy_8>
      /* copy fragment into RAM area */
      UTIL_MEM_cpy_8(&dataTempPage[((uint32_t)curr_dest_addr) % FLASH_PAGE_SIZE], (uint8_t *)curr_src_addr, curr_size);
 8001730:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001732:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001736:	683a      	ldr	r2, [r7, #0]
 8001738:	4413      	add	r3, r2
 800173a:	6a39      	ldr	r1, [r7, #32]
 800173c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800173e:	b292      	uxth	r2, r2
 8001740:	4618      	mov	r0, r3
 8001742:	f019 f981 	bl	801aa48 <UTIL_MEM_cpy_8>

      /*  erase the Flash sector, to avoid writing twice in RAM */
      if (FLASH_IF_EraseByPages(idx, 1, 0) != FLASH_OK)
 8001746:	2200      	movs	r2, #0
 8001748:	2101      	movs	r1, #1
 800174a:	69f8      	ldr	r0, [r7, #28]
 800174c:	f000 f865 	bl	800181a <FLASH_IF_EraseByPages>
 8001750:	4603      	mov	r3, r0
 8001752:	2b00      	cmp	r3, #0
 8001754:	d003      	beq.n	800175e <FLASH_IF_Write+0x106>
      {
        status = FLASH_ERASE_ERROR;
 8001756:	f06f 0301 	mvn.w	r3, #1
 800175a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break; /* exit for loop */
 800175c:	e030      	b.n	80017c0 <FLASH_IF_Write+0x168>
      }
      else
      {
        /* copy the whole flash sector including fragment from RAM to Flash*/
        if (FLASH_IF_Write_Buffer(idx * FLASH_PAGE_SIZE + FLASH_BASE, dataTempPage, FLASH_PAGE_SIZE) != FLASH_OK)
 800175e:	69fb      	ldr	r3, [r7, #28]
 8001760:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8001764:	02db      	lsls	r3, r3, #11
 8001766:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800176a:	6839      	ldr	r1, [r7, #0]
 800176c:	4618      	mov	r0, r3
 800176e:	f000 f88a 	bl	8001886 <FLASH_IF_Write_Buffer>
 8001772:	4603      	mov	r3, r0
 8001774:	2b00      	cmp	r3, #0
 8001776:	d010      	beq.n	800179a <FLASH_IF_Write+0x142>
        {
          status = FLASH_WRITE_ERROR;
 8001778:	f06f 0302 	mvn.w	r3, #2
 800177c:	62fb      	str	r3, [r7, #44]	@ 0x2c
          break; /* exit for loop */
 800177e:	e01f      	b.n	80017c0 <FLASH_IF_Write+0x168>
        }
      }
    }
    else
    {
      if (FLASH_IF_Write_Buffer(curr_dest_addr, (uint8_t *)curr_src_addr, curr_size) != FLASH_OK)
 8001780:	6a3b      	ldr	r3, [r7, #32]
 8001782:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001784:	4619      	mov	r1, r3
 8001786:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001788:	f000 f87d 	bl	8001886 <FLASH_IF_Write_Buffer>
 800178c:	4603      	mov	r3, r0
 800178e:	2b00      	cmp	r3, #0
 8001790:	d003      	beq.n	800179a <FLASH_IF_Write+0x142>
      {
        status = FLASH_WRITE_ERROR;
 8001792:	f06f 0302 	mvn.w	r3, #2
 8001796:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break; /* exit for loop */
 8001798:	e012      	b.n	80017c0 <FLASH_IF_Write+0x168>
      }
    }

    /* 2nd part of memory overlapped on 2nd flash sector */
    curr_dest_addr += curr_size;
 800179a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800179c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800179e:	4413      	add	r3, r2
 80017a0:	627b      	str	r3, [r7, #36]	@ 0x24
    curr_src_addr += curr_size;
 80017a2:	6a3a      	ldr	r2, [r7, #32]
 80017a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80017a6:	4413      	add	r3, r2
 80017a8:	623b      	str	r3, [r7, #32]
    curr_size = size - curr_size;
 80017aa:	687a      	ldr	r2, [r7, #4]
 80017ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80017ae:	1ad3      	subs	r3, r2, r3
 80017b0:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (uint32_t idx = page_start_index; idx <= page_end_index; idx++)
 80017b2:	69fb      	ldr	r3, [r7, #28]
 80017b4:	3301      	adds	r3, #1
 80017b6:	61fb      	str	r3, [r7, #28]
 80017b8:	69fa      	ldr	r2, [r7, #28]
 80017ba:	697b      	ldr	r3, [r7, #20]
 80017bc:	429a      	cmp	r2, r3
 80017be:	d99f      	bls.n	8001700 <FLASH_IF_Write+0xa8>
  }

  return status;
 80017c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
  /* USER CODE BEGIN FLASH_IF_Write_2 */

  /* USER CODE END FLASH_IF_Write_2 */
}
 80017c2:	4618      	mov	r0, r3
 80017c4:	3730      	adds	r7, #48	@ 0x30
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	1fff75e0 	.word	0x1fff75e0
 80017d0:	03fffc00 	.word	0x03fffc00
 80017d4:	58004000 	.word	0x58004000

080017d8 <FLASH_IF_Write64>:

int32_t FLASH_IF_Write64(uint32_t address, uint64_t data)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b084      	sub	sp, #16
 80017dc:	af00      	add	r7, sp, #0
 80017de:	60f8      	str	r0, [r7, #12]
 80017e0:	e9c7 2300 	strd	r2, r3, [r7]
  /* USER CODE BEGIN FLASH_IF_Write64_1 */

  /* USER CODE END FLASH_IF_Write64_1 */
  while (*(uint64_t *)address != data)
 80017e4:	e00b      	b.n	80017fe <FLASH_IF_Write64+0x26>
  {
    while (LL_FLASH_IsActiveFlag_OperationSuspended());
 80017e6:	bf00      	nop
 80017e8:	f7ff ff24 	bl	8001634 <LL_FLASH_IsActiveFlag_OperationSuspended>
 80017ec:	4603      	mov	r3, r0
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d1fa      	bne.n	80017e8 <FLASH_IF_Write64+0x10>
    HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, address, data);
 80017f2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80017f6:	68f9      	ldr	r1, [r7, #12]
 80017f8:	2001      	movs	r0, #1
 80017fa:	f003 faa1 	bl	8004d40 <HAL_FLASH_Program>
  while (*(uint64_t *)address != data)
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001804:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001808:	4299      	cmp	r1, r3
 800180a:	bf08      	it	eq
 800180c:	4290      	cmpeq	r0, r2
 800180e:	d1ea      	bne.n	80017e6 <FLASH_IF_Write64+0xe>
  }

  return FLASH_OK;
 8001810:	2300      	movs	r3, #0
  /* USER CODE BEGIN FLASH_IF_Write64_2 */

  /* USER CODE END FLASH_IF_Write64_2 */
}
 8001812:	4618      	mov	r0, r3
 8001814:	3710      	adds	r7, #16
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}

0800181a <FLASH_IF_EraseByPages>:

int32_t FLASH_IF_EraseByPages(uint32_t page, uint16_t n, int32_t interrupt)
{
 800181a:	b580      	push	{r7, lr}
 800181c:	b08a      	sub	sp, #40	@ 0x28
 800181e:	af00      	add	r7, sp, #0
 8001820:	60f8      	str	r0, [r7, #12]
 8001822:	460b      	mov	r3, r1
 8001824:	607a      	str	r2, [r7, #4]
 8001826:	817b      	strh	r3, [r7, #10]
  /* USER CODE END FLASH_IF_EraseByPages_1 */
  HAL_StatusTypeDef hal_status;
  FLASH_EraseInitTypeDef erase_str;
  uint32_t page_error;

  erase_str.TypeErase = FLASH_TYPEERASE_PAGES;
 8001828:	2302      	movs	r3, #2
 800182a:	61bb      	str	r3, [r7, #24]
  erase_str.Page = page;
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	61fb      	str	r3, [r7, #28]
  erase_str.NbPages = n;
 8001830:	897b      	ldrh	r3, [r7, #10]
 8001832:	623b      	str	r3, [r7, #32]

  /* Erase the Page */
  if (interrupt)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d008      	beq.n	800184c <FLASH_IF_EraseByPages+0x32>
  {
    hal_status = HAL_FLASHEx_Erase_IT(&erase_str);
 800183a:	f107 0318 	add.w	r3, r7, #24
 800183e:	4618      	mov	r0, r3
 8001840:	f003 fc1c 	bl	800507c <HAL_FLASHEx_Erase_IT>
 8001844:	4603      	mov	r3, r0
 8001846:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800184a:	e00a      	b.n	8001862 <FLASH_IF_EraseByPages+0x48>
  }
  else
  {
    hal_status = HAL_FLASHEx_Erase(&erase_str, &page_error);
 800184c:	f107 0214 	add.w	r2, r7, #20
 8001850:	f107 0318 	add.w	r3, r7, #24
 8001854:	4611      	mov	r1, r2
 8001856:	4618      	mov	r0, r3
 8001858:	f003 fbb8 	bl	8004fcc <HAL_FLASHEx_Erase>
 800185c:	4603      	mov	r3, r0
 800185e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  return ((hal_status == HAL_OK) ? FLASH_OK : ((hal_status == HAL_BUSY) ? FLASH_BUSY : FLASH_ERASE_ERROR));
 8001862:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001866:	2b00      	cmp	r3, #0
 8001868:	d008      	beq.n	800187c <FLASH_IF_EraseByPages+0x62>
 800186a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800186e:	2b02      	cmp	r3, #2
 8001870:	d101      	bne.n	8001876 <FLASH_IF_EraseByPages+0x5c>
 8001872:	2301      	movs	r3, #1
 8001874:	e003      	b.n	800187e <FLASH_IF_EraseByPages+0x64>
 8001876:	f06f 0301 	mvn.w	r3, #1
 800187a:	e000      	b.n	800187e <FLASH_IF_EraseByPages+0x64>
 800187c:	2300      	movs	r3, #0
  /* USER CODE BEGIN FLASH_IF_EraseByPages_2 */

  /* USER CODE END FLASH_IF_EraseByPages_2 */
}
 800187e:	4618      	mov	r0, r3
 8001880:	3728      	adds	r7, #40	@ 0x28
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}

08001886 <FLASH_IF_Write_Buffer>:

/* USER CODE END EF */

/* Private Functions Definition -----------------------------------------------*/
static int32_t FLASH_IF_Write_Buffer(uint32_t pDestination, uint8_t *pSource, uint32_t uLength)
{
 8001886:	b580      	push	{r7, lr}
 8001888:	b08a      	sub	sp, #40	@ 0x28
 800188a:	af00      	add	r7, sp, #0
 800188c:	60f8      	str	r0, [r7, #12]
 800188e:	60b9      	str	r1, [r7, #8]
 8001890:	607a      	str	r2, [r7, #4]
  /* USER CODE BEGIN FLASH_IF_Write_Buffer_1 */

  /* USER CODE END FLASH_IF_Write_Buffer_1 */
  uint8_t *pSrc = pSource;
 8001892:	68bb      	ldr	r3, [r7, #8]
 8001894:	627b      	str	r3, [r7, #36]	@ 0x24
  uint64_t src_value;
  int32_t status = FLASH_OK;
 8001896:	2300      	movs	r3, #0
 8001898:	623b      	str	r3, [r7, #32]

  for (uint32_t i = 0; i < (uLength / sizeof(uint64_t)); i++)
 800189a:	2300      	movs	r3, #0
 800189c:	61fb      	str	r3, [r7, #28]
 800189e:	e020      	b.n	80018e2 <FLASH_IF_Write_Buffer+0x5c>
  {
    UTIL_MEM_cpy_8(&src_value, pSrc, sizeof(uint64_t));
 80018a0:	f107 0310 	add.w	r3, r7, #16
 80018a4:	2208      	movs	r2, #8
 80018a6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80018a8:	4618      	mov	r0, r3
 80018aa:	f019 f8cd 	bl	801aa48 <UTIL_MEM_cpy_8>

    /* Avoid writing 0xFFFFFFFFFFFFFFFFLL on erased Flash */
    if (src_value != UINT64_MAX)
 80018ae:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80018b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018b6:	bf08      	it	eq
 80018b8:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 80018bc:	d005      	beq.n	80018ca <FLASH_IF_Write_Buffer+0x44>
    {
      status = FLASH_IF_Write64(pDestination, src_value);
 80018be:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80018c2:	68f8      	ldr	r0, [r7, #12]
 80018c4:	f7ff ff88 	bl	80017d8 <FLASH_IF_Write64>
 80018c8:	6238      	str	r0, [r7, #32]
    }

    pDestination += sizeof(uint64_t);
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	3308      	adds	r3, #8
 80018ce:	60fb      	str	r3, [r7, #12]
    pSrc += sizeof(uint64_t);
 80018d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018d2:	3308      	adds	r3, #8
 80018d4:	627b      	str	r3, [r7, #36]	@ 0x24

    if (status != FLASH_OK)
 80018d6:	6a3b      	ldr	r3, [r7, #32]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d108      	bne.n	80018ee <FLASH_IF_Write_Buffer+0x68>
  for (uint32_t i = 0; i < (uLength / sizeof(uint64_t)); i++)
 80018dc:	69fb      	ldr	r3, [r7, #28]
 80018de:	3301      	adds	r3, #1
 80018e0:	61fb      	str	r3, [r7, #28]
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	08db      	lsrs	r3, r3, #3
 80018e6:	69fa      	ldr	r2, [r7, #28]
 80018e8:	429a      	cmp	r2, r3
 80018ea:	d3d9      	bcc.n	80018a0 <FLASH_IF_Write_Buffer+0x1a>
 80018ec:	e000      	b.n	80018f0 <FLASH_IF_Write_Buffer+0x6a>
    {
      /* exit the for loop*/
      break;
 80018ee:	bf00      	nop
    }
  }

  return status;
 80018f0:	6a3b      	ldr	r3, [r7, #32]
  /* USER CODE BEGIN FLASH_IF_Write_Buffer_2 */

  /* USER CODE END FLASH_IF_Write_Buffer_2 */
}
 80018f2:	4618      	mov	r0, r3
 80018f4:	3728      	adds	r7, #40	@ 0x28
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}

080018fa <FLASH_IF_IsEmpty>:

static int32_t FLASH_IF_IsEmpty(uint8_t *addr, uint32_t size)
{
 80018fa:	b480      	push	{r7}
 80018fc:	b085      	sub	sp, #20
 80018fe:	af00      	add	r7, sp, #0
 8001900:	6078      	str	r0, [r7, #4]
 8001902:	6039      	str	r1, [r7, #0]
  /* USER CODE END FLASH_IF_IsEmpty_1 */
  uint64_t *addr64;
  uint32_t i;

  /* start memory NOT 64bits aligned */
  while ((((uint32_t)addr) % sizeof(uint64_t)) != 0)
 8001904:	e00a      	b.n	800191c <FLASH_IF_IsEmpty+0x22>
  {
    if (*addr++ != UINT8_MAX)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	1c5a      	adds	r2, r3, #1
 800190a:	607a      	str	r2, [r7, #4]
 800190c:	781b      	ldrb	r3, [r3, #0]
 800190e:	2bff      	cmp	r3, #255	@ 0xff
 8001910:	d001      	beq.n	8001916 <FLASH_IF_IsEmpty+0x1c>
    {
      return FLASH_NOT_EMPTY;
 8001912:	2301      	movs	r3, #1
 8001914:	e039      	b.n	800198a <FLASH_IF_IsEmpty+0x90>
    }
    size--;
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	3b01      	subs	r3, #1
 800191a:	603b      	str	r3, [r7, #0]
  while ((((uint32_t)addr) % sizeof(uint64_t)) != 0)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	f003 0307 	and.w	r3, r3, #7
 8001922:	2b00      	cmp	r3, #0
 8001924:	d1ef      	bne.n	8001906 <FLASH_IF_IsEmpty+0xc>
  }

  /* addr64 is 64 bits aligned */
  addr64 = (uint64_t *)addr;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	60fb      	str	r3, [r7, #12]
  for (i = 0; i < (size / sizeof(uint64_t)); i++)
 800192a:	2300      	movs	r3, #0
 800192c:	60bb      	str	r3, [r7, #8]
 800192e:	e010      	b.n	8001952 <FLASH_IF_IsEmpty+0x58>
  {
    if (*addr64++ != UINT64_MAX)
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	f103 0208 	add.w	r2, r3, #8
 8001936:	60fa      	str	r2, [r7, #12]
 8001938:	e9d3 2300 	ldrd	r2, r3, [r3]
 800193c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001940:	bf08      	it	eq
 8001942:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 8001946:	d001      	beq.n	800194c <FLASH_IF_IsEmpty+0x52>
    {
      return FLASH_NOT_EMPTY;
 8001948:	2301      	movs	r3, #1
 800194a:	e01e      	b.n	800198a <FLASH_IF_IsEmpty+0x90>
  for (i = 0; i < (size / sizeof(uint64_t)); i++)
 800194c:	68bb      	ldr	r3, [r7, #8]
 800194e:	3301      	adds	r3, #1
 8001950:	60bb      	str	r3, [r7, #8]
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	08db      	lsrs	r3, r3, #3
 8001956:	68ba      	ldr	r2, [r7, #8]
 8001958:	429a      	cmp	r2, r3
 800195a:	d3e9      	bcc.n	8001930 <FLASH_IF_IsEmpty+0x36>
    }
  }
  size -= sizeof(uint64_t) * i;
 800195c:	68bb      	ldr	r3, [r7, #8]
 800195e:	00db      	lsls	r3, r3, #3
 8001960:	683a      	ldr	r2, [r7, #0]
 8001962:	1ad3      	subs	r3, r2, r3
 8001964:	603b      	str	r3, [r7, #0]

  /* end memory NOT 64 bits aligned */
  addr = (uint8_t *)addr64;
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	607b      	str	r3, [r7, #4]
  while (size != 0)
 800196a:	e00a      	b.n	8001982 <FLASH_IF_IsEmpty+0x88>
  {
    if (*addr++ != UINT8_MAX)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	1c5a      	adds	r2, r3, #1
 8001970:	607a      	str	r2, [r7, #4]
 8001972:	781b      	ldrb	r3, [r3, #0]
 8001974:	2bff      	cmp	r3, #255	@ 0xff
 8001976:	d001      	beq.n	800197c <FLASH_IF_IsEmpty+0x82>
    {
      return FLASH_NOT_EMPTY;
 8001978:	2301      	movs	r3, #1
 800197a:	e006      	b.n	800198a <FLASH_IF_IsEmpty+0x90>
    }
    size--;
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	3b01      	subs	r3, #1
 8001980:	603b      	str	r3, [r7, #0]
  while (size != 0)
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	2b00      	cmp	r3, #0
 8001986:	d1f1      	bne.n	800196c <FLASH_IF_IsEmpty+0x72>
  }
  return FLASH_EMPTY;
 8001988:	2300      	movs	r3, #0
  /* USER CODE BEGIN FLASH_IF_IsEmpty_2 */

  /* USER CODE END FLASH_IF_IsEmpty_2 */
}
 800198a:	4618      	mov	r0, r3
 800198c:	3714      	adds	r7, #20
 800198e:	46bd      	mov	sp, r7
 8001990:	bc80      	pop	{r7}
 8001992:	4770      	bx	lr

08001994 <LL_AHB2_GRP1_EnableClock>:
{
 8001994:	b480      	push	{r7}
 8001996:	b085      	sub	sp, #20
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800199c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80019a0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80019a2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	4313      	orrs	r3, r2
 80019aa:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80019ac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80019b0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	4013      	ands	r3, r2
 80019b6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80019b8:	68fb      	ldr	r3, [r7, #12]
}
 80019ba:	bf00      	nop
 80019bc:	3714      	adds	r7, #20
 80019be:	46bd      	mov	sp, r7
 80019c0:	bc80      	pop	{r7}
 80019c2:	4770      	bx	lr

080019c4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b086      	sub	sp, #24
 80019c8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019ca:	1d3b      	adds	r3, r7, #4
 80019cc:	2200      	movs	r2, #0
 80019ce:	601a      	str	r2, [r3, #0]
 80019d0:	605a      	str	r2, [r3, #4]
 80019d2:	609a      	str	r2, [r3, #8]
 80019d4:	60da      	str	r2, [r3, #12]
 80019d6:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019d8:	2004      	movs	r0, #4
 80019da:	f7ff ffdb 	bl	8001994 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019de:	2002      	movs	r0, #2
 80019e0:	f7ff ffd8 	bl	8001994 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019e4:	2001      	movs	r0, #1
 80019e6:	f7ff ffd5 	bl	8001994 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DBG3_Pin|DBG4_Pin|DBG2_Pin, GPIO_PIN_RESET);
 80019ea:	2200      	movs	r2, #0
 80019ec:	f44f 6183 	mov.w	r1, #1048	@ 0x418
 80019f0:	4821      	ldr	r0, [pc, #132]	@ (8001a78 <MX_GPIO_Init+0xb4>)
 80019f2:	f003 fe35 	bl	8005660 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 80019f6:	2201      	movs	r2, #1
 80019f8:	2120      	movs	r1, #32
 80019fa:	481f      	ldr	r0, [pc, #124]	@ (8001a78 <MX_GPIO_Init+0xb4>)
 80019fc:	f003 fe30 	bl	8005660 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DBG1_Pin|RF_CTRL1_Pin|RF_CTRL2_Pin, GPIO_PIN_RESET);
 8001a00:	2200      	movs	r2, #0
 8001a02:	2131      	movs	r1, #49	@ 0x31
 8001a04:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a08:	f003 fe2a 	bl	8005660 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = DBG3_Pin|DBG4_Pin|LED2_Pin|DBG2_Pin;
 8001a0c:	f44f 6387 	mov.w	r3, #1080	@ 0x438
 8001a10:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a12:	2301      	movs	r3, #1
 8001a14:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a16:	2300      	movs	r3, #0
 8001a18:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a1a:	2303      	movs	r3, #3
 8001a1c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a1e:	1d3b      	adds	r3, r7, #4
 8001a20:	4619      	mov	r1, r3
 8001a22:	4815      	ldr	r0, [pc, #84]	@ (8001a78 <MX_GPIO_Init+0xb4>)
 8001a24:	f003 fbee 	bl	8005204 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = DBG1_Pin|RF_CTRL1_Pin|RF_CTRL2_Pin;
 8001a28:	2331      	movs	r3, #49	@ 0x31
 8001a2a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a30:	2300      	movs	r3, #0
 8001a32:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a34:	2303      	movs	r3, #3
 8001a36:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a38:	1d3b      	adds	r3, r7, #4
 8001a3a:	4619      	mov	r1, r3
 8001a3c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a40:	f003 fbe0 	bl	8005204 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUT1_Pin;
 8001a44:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001a48:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001a4a:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001a4e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a50:	2301      	movs	r3, #1
 8001a52:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(BUT1_GPIO_Port, &GPIO_InitStruct);
 8001a54:	1d3b      	adds	r3, r7, #4
 8001a56:	4619      	mov	r1, r3
 8001a58:	4807      	ldr	r0, [pc, #28]	@ (8001a78 <MX_GPIO_Init+0xb4>)
 8001a5a:	f003 fbd3 	bl	8005204 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001a5e:	2200      	movs	r2, #0
 8001a60:	2100      	movs	r1, #0
 8001a62:	2029      	movs	r0, #41	@ 0x29
 8001a64:	f002 fd4b 	bl	80044fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001a68:	2029      	movs	r0, #41	@ 0x29
 8001a6a:	f002 fd62 	bl	8004532 <HAL_NVIC_EnableIRQ>

}
 8001a6e:	bf00      	nop
 8001a70:	3718      	adds	r7, #24
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}
 8001a76:	bf00      	nop
 8001a78:	48000400 	.word	0x48000400

08001a7c <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	b083      	sub	sp, #12
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8001a84:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a88:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a8c:	f023 0218 	bic.w	r2, r3, #24
 8001a90:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	4313      	orrs	r3, r2
 8001a98:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8001a9c:	bf00      	nop
 8001a9e:	370c      	adds	r7, #12
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bc80      	pop	{r7}
 8001aa4:	4770      	bx	lr

08001aa6 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001aa6:	b580      	push	{r7, lr}
 8001aa8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001aaa:	f001 fb65 	bl	8003178 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001aae:	f000 f809 	bl	8001ac4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001ab2:	f7ff ff87 	bl	80019c4 <MX_GPIO_Init>
  MX_LoRaWAN_Init();
 8001ab6:	f008 fb9b 	bl	800a1f0 <MX_LoRaWAN_Init>
  MX_USART2_UART_Init();
 8001aba:	f001 f823 	bl	8002b04 <MX_USART2_UART_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_LoRaWAN_Process();
 8001abe:	f008 fb9f 	bl	800a200 <MX_LoRaWAN_Process>
 8001ac2:	e7fc      	b.n	8001abe <main+0x18>

08001ac4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b09a      	sub	sp, #104	@ 0x68
 8001ac8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001aca:	f107 0320 	add.w	r3, r7, #32
 8001ace:	2248      	movs	r2, #72	@ 0x48
 8001ad0:	2100      	movs	r1, #0
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f01b f86c 	bl	801cbb0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ad8:	f107 0308 	add.w	r3, r7, #8
 8001adc:	2200      	movs	r2, #0
 8001ade:	601a      	str	r2, [r3, #0]
 8001ae0:	605a      	str	r2, [r3, #4]
 8001ae2:	609a      	str	r2, [r3, #8]
 8001ae4:	60da      	str	r2, [r3, #12]
 8001ae6:	611a      	str	r2, [r3, #16]
 8001ae8:	615a      	str	r2, [r3, #20]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001aea:	f003 fde9 	bl	80056c0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001aee:	2000      	movs	r0, #0
 8001af0:	f7ff ffc4 	bl	8001a7c <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001af4:	4b1f      	ldr	r3, [pc, #124]	@ (8001b74 <SystemClock_Config+0xb0>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001afc:	4a1d      	ldr	r2, [pc, #116]	@ (8001b74 <SystemClock_Config+0xb0>)
 8001afe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001b02:	6013      	str	r3, [r2, #0]
 8001b04:	4b1b      	ldr	r3, [pc, #108]	@ (8001b74 <SystemClock_Config+0xb0>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001b0c:	607b      	str	r3, [r7, #4]
 8001b0e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001b10:	2324      	movs	r3, #36	@ 0x24
 8001b12:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001b14:	2381      	movs	r3, #129	@ 0x81
 8001b16:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001b18:	2301      	movs	r3, #1
 8001b1a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 8001b20:	23b0      	movs	r3, #176	@ 0xb0
 8001b22:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001b24:	2300      	movs	r3, #0
 8001b26:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b28:	f107 0320 	add.w	r3, r7, #32
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	f004 f913 	bl	8005d58 <HAL_RCC_OscConfig>
 8001b32:	4603      	mov	r3, r0
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d001      	beq.n	8001b3c <SystemClock_Config+0x78>
  {
    Error_Handler();
 8001b38:	f000 f81e 	bl	8001b78 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 8001b3c:	234f      	movs	r3, #79	@ 0x4f
 8001b3e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001b40:	2300      	movs	r3, #0
 8001b42:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b44:	2300      	movs	r3, #0
 8001b46:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 8001b50:	2300      	movs	r3, #0
 8001b52:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001b54:	f107 0308 	add.w	r3, r7, #8
 8001b58:	2102      	movs	r1, #2
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f004 fc98 	bl	8006490 <HAL_RCC_ClockConfig>
 8001b60:	4603      	mov	r3, r0
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d001      	beq.n	8001b6a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001b66:	f000 f807 	bl	8001b78 <Error_Handler>
  }
}
 8001b6a:	bf00      	nop
 8001b6c:	3768      	adds	r7, #104	@ 0x68
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}
 8001b72:	bf00      	nop
 8001b74:	58000400 	.word	0x58000400

08001b78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b7c:	b672      	cpsid	i
}
 8001b7e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b80:	bf00      	nop
 8001b82:	e7fd      	b.n	8001b80 <Error_Handler+0x8>

08001b84 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8001b84:	b480      	push	{r7}
 8001b86:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8001b88:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001b90:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001b94:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001b98:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8001b9c:	bf00      	nop
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bc80      	pop	{r7}
 8001ba2:	4770      	bx	lr

08001ba4 <LL_APB1_GRP1_EnableClock>:
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	b085      	sub	sp, #20
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001bac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001bb0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001bb2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	4313      	orrs	r3, r2
 8001bba:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001bbc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001bc0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	4013      	ands	r3, r2
 8001bc6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001bc8:	68fb      	ldr	r3, [r7, #12]
}
 8001bca:	bf00      	nop
 8001bcc:	3714      	adds	r7, #20
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bc80      	pop	{r7}
 8001bd2:	4770      	bx	lr

08001bd4 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b08c      	sub	sp, #48	@ 0x30
 8001bd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_AlarmTypeDef sAlarm = {0};
 8001bda:	1d3b      	adds	r3, r7, #4
 8001bdc:	222c      	movs	r2, #44	@ 0x2c
 8001bde:	2100      	movs	r1, #0
 8001be0:	4618      	mov	r0, r3
 8001be2:	f01a ffe5 	bl	801cbb0 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001be6:	4b22      	ldr	r3, [pc, #136]	@ (8001c70 <MX_RTC_Init+0x9c>)
 8001be8:	4a22      	ldr	r2, [pc, #136]	@ (8001c74 <MX_RTC_Init+0xa0>)
 8001bea:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_PREDIV_A;
 8001bec:	4b20      	ldr	r3, [pc, #128]	@ (8001c70 <MX_RTC_Init+0x9c>)
 8001bee:	221f      	movs	r2, #31
 8001bf0:	609a      	str	r2, [r3, #8]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001bf2:	4b1f      	ldr	r3, [pc, #124]	@ (8001c70 <MX_RTC_Init+0x9c>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001bf8:	4b1d      	ldr	r3, [pc, #116]	@ (8001c70 <MX_RTC_Init+0x9c>)
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001bfe:	4b1c      	ldr	r3, [pc, #112]	@ (8001c70 <MX_RTC_Init+0x9c>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001c04:	4b1a      	ldr	r3, [pc, #104]	@ (8001c70 <MX_RTC_Init+0x9c>)
 8001c06:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001c0a:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8001c0c:	4b18      	ldr	r3, [pc, #96]	@ (8001c70 <MX_RTC_Init+0x9c>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_ONLY;
 8001c12:	4b17      	ldr	r3, [pc, #92]	@ (8001c70 <MX_RTC_Init+0x9c>)
 8001c14:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001c18:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001c1a:	4815      	ldr	r0, [pc, #84]	@ (8001c70 <MX_RTC_Init+0x9c>)
 8001c1c:	f005 f8f4 	bl	8006e08 <HAL_RTC_Init>
 8001c20:	4603      	mov	r3, r0
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d001      	beq.n	8001c2a <MX_RTC_Init+0x56>
  {
    Error_Handler();
 8001c26:	f7ff ffa7 	bl	8001b78 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  if (HAL_RTCEx_SetSSRU_IT(&hrtc) != HAL_OK)
 8001c2a:	4811      	ldr	r0, [pc, #68]	@ (8001c70 <MX_RTC_Init+0x9c>)
 8001c2c:	f005 fbe2 	bl	80073f4 <HAL_RTCEx_SetSSRU_IT>
 8001c30:	4603      	mov	r3, r0
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d001      	beq.n	8001c3a <MX_RTC_Init+0x66>
  {
    Error_Handler();
 8001c36:	f7ff ff9f 	bl	8001b78 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001c42:	2300      	movs	r3, #0
 8001c44:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 8001c46:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001c4a:	61fb      	str	r3, [r7, #28]
  sAlarm.Alarm = RTC_ALARM_A;
 8001c4c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001c50:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, 0) != HAL_OK)
 8001c52:	1d3b      	adds	r3, r7, #4
 8001c54:	2200      	movs	r2, #0
 8001c56:	4619      	mov	r1, r3
 8001c58:	4805      	ldr	r0, [pc, #20]	@ (8001c70 <MX_RTC_Init+0x9c>)
 8001c5a:	f005 f94f 	bl	8006efc <HAL_RTC_SetAlarm_IT>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d001      	beq.n	8001c68 <MX_RTC_Init+0x94>
  {
    Error_Handler();
 8001c64:	f7ff ff88 	bl	8001b78 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001c68:	bf00      	nop
 8001c6a:	3730      	adds	r7, #48	@ 0x30
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bd80      	pop	{r7, pc}
 8001c70:	200003a0 	.word	0x200003a0
 8001c74:	40002800 	.word	0x40002800

08001c78 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b090      	sub	sp, #64	@ 0x40
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c80:	f107 0308 	add.w	r3, r7, #8
 8001c84:	2238      	movs	r2, #56	@ 0x38
 8001c86:	2100      	movs	r1, #0
 8001c88:	4618      	mov	r0, r3
 8001c8a:	f01a ff91 	bl	801cbb0 <memset>
  if(rtcHandle->Instance==RTC)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4a16      	ldr	r2, [pc, #88]	@ (8001cec <HAL_RTC_MspInit+0x74>)
 8001c94:	4293      	cmp	r3, r2
 8001c96:	d125      	bne.n	8001ce4 <HAL_RTC_MspInit+0x6c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001c98:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001c9c:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001c9e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001ca2:	63fb      	str	r3, [r7, #60]	@ 0x3c

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ca4:	f107 0308 	add.w	r3, r7, #8
 8001ca8:	4618      	mov	r0, r3
 8001caa:	f004 ff93 	bl	8006bd4 <HAL_RCCEx_PeriphCLKConfig>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d001      	beq.n	8001cb8 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8001cb4:	f7ff ff60 	bl	8001b78 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001cb8:	f7ff ff64 	bl	8001b84 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8001cbc:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8001cc0:	f7ff ff70 	bl	8001ba4 <LL_APB1_GRP1_EnableClock>

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(TAMP_STAMP_LSECSS_SSRU_IRQn, 0, 0);
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	2100      	movs	r1, #0
 8001cc8:	2002      	movs	r0, #2
 8001cca:	f002 fc18 	bl	80044fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TAMP_STAMP_LSECSS_SSRU_IRQn);
 8001cce:	2002      	movs	r0, #2
 8001cd0:	f002 fc2f 	bl	8004532 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	2100      	movs	r1, #0
 8001cd8:	202a      	movs	r0, #42	@ 0x2a
 8001cda:	f002 fc10 	bl	80044fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8001cde:	202a      	movs	r0, #42	@ 0x2a
 8001ce0:	f002 fc27 	bl	8004532 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001ce4:	bf00      	nop
 8001ce6:	3740      	adds	r7, #64	@ 0x40
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd80      	pop	{r7, pc}
 8001cec:	40002800 	.word	0x40002800

08001cf0 <LL_PWR_ClearFlag_C1STOP_C1STB>:
  * @brief  Clear standby and stop flags for CPU1
  * @rmtoll EXTSCR       C1CSSF        LL_PWR_ClearFlag_C1STOP_C1STB
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_C1STOP_C1STB(void)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->EXTSCR, PWR_EXTSCR_C1CSSF);
 8001cf4:	4b03      	ldr	r3, [pc, #12]	@ (8001d04 <LL_PWR_ClearFlag_C1STOP_C1STB+0x14>)
 8001cf6:	2201      	movs	r2, #1
 8001cf8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8001cfc:	bf00      	nop
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bc80      	pop	{r7}
 8001d02:	4770      	bx	lr
 8001d04:	58000400 	.word	0x58000400

08001d08 <PWR_EnterOffMode>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void PWR_EnterOffMode(void)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterOffMode_1 */

  /* USER CODE END EnterOffMode_1 */
}
 8001d0c:	bf00      	nop
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bc80      	pop	{r7}
 8001d12:	4770      	bx	lr

08001d14 <PWR_ExitOffMode>:

void PWR_ExitOffMode(void)
{
 8001d14:	b480      	push	{r7}
 8001d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitOffMode_1 */

  /* USER CODE END ExitOffMode_1 */
}
 8001d18:	bf00      	nop
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bc80      	pop	{r7}
 8001d1e:	4770      	bx	lr

08001d20 <PWR_EnterStopMode>:

void PWR_EnterStopMode(void)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterStopMode_1 */

  /* USER CODE END EnterStopMode_1 */
  HAL_SuspendTick();
 8001d24:	f001 fa48 	bl	80031b8 <HAL_SuspendTick>
  /* Clear Status Flag before entering STOP/STANDBY Mode */
  LL_PWR_ClearFlag_C1STOP_C1STB();
 8001d28:	f7ff ffe2 	bl	8001cf0 <LL_PWR_ClearFlag_C1STOP_C1STB>

  /* USER CODE BEGIN EnterStopMode_2 */

  /* USER CODE END EnterStopMode_2 */
  HAL_PWREx_EnterSTOP2Mode(PWR_STOPENTRY_WFI);
 8001d2c:	2001      	movs	r0, #1
 8001d2e:	f003 fd59 	bl	80057e4 <HAL_PWREx_EnterSTOP2Mode>
  /* USER CODE BEGIN EnterStopMode_3 */

  /* USER CODE END EnterStopMode_3 */
}
 8001d32:	bf00      	nop
 8001d34:	bd80      	pop	{r7, pc}

08001d36 <PWR_ExitStopMode>:

void PWR_ExitStopMode(void)
{
 8001d36:	b580      	push	{r7, lr}
 8001d38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitStopMode_1 */

  /* USER CODE END ExitStopMode_1 */
  /* Resume sysTick : work around for debugger problem in dual core */
  HAL_ResumeTick();
 8001d3a:	f001 fa4b 	bl	80031d4 <HAL_ResumeTick>
    ADC interface
    DAC interface USARTx, TIMx, i2Cx, SPIx
    SRAM ctrls, DMAx, DMAMux, AES, RNG, HSEM  */

  /* Resume not retained USARTx and DMA */
  vcom_Resume();
 8001d3e:	f001 f8cb 	bl	8002ed8 <vcom_Resume>
  /* USER CODE BEGIN ExitStopMode_2 */

  /* USER CODE END ExitStopMode_2 */
}
 8001d42:	bf00      	nop
 8001d44:	bd80      	pop	{r7, pc}

08001d46 <PWR_EnterSleepMode>:

void PWR_EnterSleepMode(void)
{
 8001d46:	b580      	push	{r7, lr}
 8001d48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterSleepMode_1 */

  /* USER CODE END EnterSleepMode_1 */
  /* Suspend sysTick */
  HAL_SuspendTick();
 8001d4a:	f001 fa35 	bl	80031b8 <HAL_SuspendTick>
  /* USER CODE BEGIN EnterSleepMode_2 */

  /* USER CODE END EnterSleepMode_2 */
  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8001d4e:	2101      	movs	r1, #1
 8001d50:	2000      	movs	r0, #0
 8001d52:	f003 fcc3 	bl	80056dc <HAL_PWR_EnterSLEEPMode>
  /* USER CODE BEGIN EnterSleepMode_3 */

  /* USER CODE END EnterSleepMode_3 */
}
 8001d56:	bf00      	nop
 8001d58:	bd80      	pop	{r7, pc}

08001d5a <PWR_ExitSleepMode>:

void PWR_ExitSleepMode(void)
{
 8001d5a:	b580      	push	{r7, lr}
 8001d5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitSleepMode_1 */

  /* USER CODE END ExitSleepMode_1 */
  /* Resume sysTick */
  HAL_ResumeTick();
 8001d5e:	f001 fa39 	bl	80031d4 <HAL_ResumeTick>

  /* USER CODE BEGIN ExitSleepMode_2 */

  /* USER CODE END ExitSleepMode_2 */
}
 8001d62:	bf00      	nop
 8001d64:	bd80      	pop	{r7, pc}

08001d66 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d66:	b480      	push	{r7}
 8001d68:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d6a:	bf00      	nop
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bc80      	pop	{r7}
 8001d70:	4770      	bx	lr

08001d72 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d72:	b480      	push	{r7}
 8001d74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d76:	bf00      	nop
 8001d78:	e7fd      	b.n	8001d76 <NMI_Handler+0x4>

08001d7a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d7a:	b480      	push	{r7}
 8001d7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d7e:	bf00      	nop
 8001d80:	e7fd      	b.n	8001d7e <HardFault_Handler+0x4>

08001d82 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d82:	b480      	push	{r7}
 8001d84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d86:	bf00      	nop
 8001d88:	e7fd      	b.n	8001d86 <MemManage_Handler+0x4>

08001d8a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d8a:	b480      	push	{r7}
 8001d8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d8e:	bf00      	nop
 8001d90:	e7fd      	b.n	8001d8e <BusFault_Handler+0x4>

08001d92 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d92:	b480      	push	{r7}
 8001d94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d96:	bf00      	nop
 8001d98:	e7fd      	b.n	8001d96 <UsageFault_Handler+0x4>

08001d9a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d9a:	b480      	push	{r7}
 8001d9c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d9e:	bf00      	nop
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bc80      	pop	{r7}
 8001da4:	4770      	bx	lr

08001da6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001da6:	b480      	push	{r7}
 8001da8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001daa:	bf00      	nop
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bc80      	pop	{r7}
 8001db0:	4770      	bx	lr

08001db2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001db2:	b480      	push	{r7}
 8001db4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001db6:	bf00      	nop
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bc80      	pop	{r7}
 8001dbc:	4770      	bx	lr

08001dbe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001dbe:	b480      	push	{r7}
 8001dc0:	af00      	add	r7, sp, #0

  /* USER CODE END SysTick_IRQn 0 */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001dc2:	bf00      	nop
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bc80      	pop	{r7}
 8001dc8:	4770      	bx	lr
	...

08001dcc <TAMP_STAMP_LSECSS_SSRU_IRQHandler>:

/**
  * @brief This function handles RTC Tamper, RTC TimeStamp, LSECSS and RTC SSRU Interrupts.
  */
void TAMP_STAMP_LSECSS_SSRU_IRQHandler(void)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 0 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 0 */
  HAL_RTCEx_SSRUIRQHandler(&hrtc);
 8001dd0:	4802      	ldr	r0, [pc, #8]	@ (8001ddc <TAMP_STAMP_LSECSS_SSRU_IRQHandler+0x10>)
 8001dd2:	f005 fb4b 	bl	800746c <HAL_RTCEx_SSRUIRQHandler>
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 1 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 1 */
}
 8001dd6:	bf00      	nop
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	bf00      	nop
 8001ddc:	200003a0 	.word	0x200003a0

08001de0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 1 Interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001de4:	4802      	ldr	r0, [pc, #8]	@ (8001df0 <DMA1_Channel1_IRQHandler+0x10>)
 8001de6:	f002 fe3b 	bl	8004a60 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001dea:	bf00      	nop
 8001dec:	bd80      	pop	{r7, pc}
 8001dee:	bf00      	nop
 8001df0:	20000514 	.word	0x20000514

08001df4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 Interrupt.
  */
void USART1_IRQHandler(void)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001df8:	4802      	ldr	r0, [pc, #8]	@ (8001e04 <USART1_IRQHandler+0x10>)
 8001dfa:	f006 f98f 	bl	800811c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001dfe:	bf00      	nop
 8001e00:	bd80      	pop	{r7, pc}
 8001e02:	bf00      	nop
 8001e04:	200003f4 	.word	0x200003f4

08001e08 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 Interrupt.
  */
void USART2_IRQHandler(void)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001e0c:	4802      	ldr	r0, [pc, #8]	@ (8001e18 <USART2_IRQHandler+0x10>)
 8001e0e:	f006 f985 	bl	800811c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001e12:	bf00      	nop
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	bf00      	nop
 8001e18:	20000484 	.word	0x20000484

08001e1c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI Lines [15:10] Interrupt.
  */
void EXTI15_10_IRQHandler(void)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUT1_Pin);
 8001e20:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001e24:	f003 fc34 	bl	8005690 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001e28:	bf00      	nop
 8001e2a:	bd80      	pop	{r7, pc}

08001e2c <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC Alarms (A and B) Interrupt.
  */
void RTC_Alarm_IRQHandler(void)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8001e30:	4802      	ldr	r0, [pc, #8]	@ (8001e3c <RTC_Alarm_IRQHandler+0x10>)
 8001e32:	f005 f9cb 	bl	80071cc <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8001e36:	bf00      	nop
 8001e38:	bd80      	pop	{r7, pc}
 8001e3a:	bf00      	nop
 8001e3c:	200003a0 	.word	0x200003a0

08001e40 <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */
  HAL_SUBGHZ_IRQHandler(&hsubghz);
 8001e44:	4802      	ldr	r0, [pc, #8]	@ (8001e50 <SUBGHZ_Radio_IRQHandler+0x10>)
 8001e46:	f005 fe79 	bl	8007b3c <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 8001e4a:	bf00      	nop
 8001e4c:	bd80      	pop	{r7, pc}
 8001e4e:	bf00      	nop
 8001e50:	200003d8 	.word	0x200003d8

08001e54 <LL_APB3_GRP1_EnableClock>:
  * @param  Periphs This parameter can be a combination of the following values:
  *         @arg @ref LL_APB3_GRP1_PERIPH_SUBGHZSPI
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
 8001e54:	b480      	push	{r7}
 8001e56:	b085      	sub	sp, #20
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 8001e5c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001e60:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8001e62:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	4313      	orrs	r3, r2
 8001e6a:	664b      	str	r3, [r1, #100]	@ 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 8001e6c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001e70:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	4013      	ands	r3, r2
 8001e76:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001e78:	68fb      	ldr	r3, [r7, #12]
}
 8001e7a:	bf00      	nop
 8001e7c:	3714      	adds	r7, #20
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bc80      	pop	{r7}
 8001e82:	4770      	bx	lr

08001e84 <MX_SUBGHZ_Init>:

SUBGHZ_HandleTypeDef hsubghz;

/* SUBGHZ init function */
void MX_SUBGHZ_Init(void)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	af00      	add	r7, sp, #0
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */

  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_4;
 8001e88:	4b06      	ldr	r3, [pc, #24]	@ (8001ea4 <MX_SUBGHZ_Init+0x20>)
 8001e8a:	2208      	movs	r2, #8
 8001e8c:	601a      	str	r2, [r3, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 8001e8e:	4805      	ldr	r0, [pc, #20]	@ (8001ea4 <MX_SUBGHZ_Init+0x20>)
 8001e90:	f005 fbd8 	bl	8007644 <HAL_SUBGHZ_Init>
 8001e94:	4603      	mov	r3, r0
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d001      	beq.n	8001e9e <MX_SUBGHZ_Init+0x1a>
  {
    Error_Handler();
 8001e9a:	f7ff fe6d 	bl	8001b78 <Error_Handler>
  }
  /* USER CODE BEGIN SUBGHZ_Init 2 */

  /* USER CODE END SUBGHZ_Init 2 */

}
 8001e9e:	bf00      	nop
 8001ea0:	bd80      	pop	{r7, pc}
 8001ea2:	bf00      	nop
 8001ea4:	200003d8 	.word	0x200003d8

08001ea8 <HAL_SUBGHZ_MspInit>:

void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* subghzHandle)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b082      	sub	sp, #8
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN SUBGHZ_MspInit 0 */

  /* USER CODE END SUBGHZ_MspInit 0 */
    /* SUBGHZ clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();
 8001eb0:	2001      	movs	r0, #1
 8001eb2:	f7ff ffcf 	bl	8001e54 <LL_APB3_GRP1_EnableClock>

    /* SUBGHZ interrupt Init */
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 0, 0);
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	2100      	movs	r1, #0
 8001eba:	2032      	movs	r0, #50	@ 0x32
 8001ebc:	f002 fb1f 	bl	80044fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 8001ec0:	2032      	movs	r0, #50	@ 0x32
 8001ec2:	f002 fb36 	bl	8004532 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */
}
 8001ec6:	bf00      	nop
 8001ec8:	3708      	adds	r7, #8
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}

08001ece <LL_RCC_SetClkAfterWakeFromStop>:
{
 8001ece:	b480      	push	{r7}
 8001ed0:	b083      	sub	sp, #12
 8001ed2:	af00      	add	r7, sp, #0
 8001ed4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8001ed6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001eda:	689b      	ldr	r3, [r3, #8]
 8001edc:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8001ee0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	4313      	orrs	r3, r2
 8001ee8:	608b      	str	r3, [r1, #8]
}
 8001eea:	bf00      	nop
 8001eec:	370c      	adds	r7, #12
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bc80      	pop	{r7}
 8001ef2:	4770      	bx	lr

08001ef4 <LL_FLASH_GetUDN>:
/**
  * @brief  Return the Unique Device Number
  * @retval Values between Min_Data=0x00000000 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID64_BASE)));
 8001ef8:	4b02      	ldr	r3, [pc, #8]	@ (8001f04 <LL_FLASH_GetUDN+0x10>)
 8001efa:	681b      	ldr	r3, [r3, #0]
}
 8001efc:	4618      	mov	r0, r3
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bc80      	pop	{r7}
 8001f02:	4770      	bx	lr
 8001f04:	1fff7580 	.word	0x1fff7580

08001f08 <LL_FLASH_GetDeviceID>:
  * @brief  Return the Device ID
  *         For STM32WLxxxx devices, the device ID is 0x15
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x15)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	af00      	add	r7, sp, #0
  return ((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 8001f0c:	4b03      	ldr	r3, [pc, #12]	@ (8001f1c <LL_FLASH_GetDeviceID+0x14>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	b2db      	uxtb	r3, r3
}
 8001f12:	4618      	mov	r0, r3
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bc80      	pop	{r7}
 8001f18:	4770      	bx	lr
 8001f1a:	bf00      	nop
 8001f1c:	1fff7584 	.word	0x1fff7584

08001f20 <LL_FLASH_GetSTCompanyID>:
  * @brief  Return the ST Company ID
  * @note   For STM32WLxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 8001f20:	b480      	push	{r7}
 8001f22:	af00      	add	r7, sp, #0
  return (((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 8001f24:	4b03      	ldr	r3, [pc, #12]	@ (8001f34 <LL_FLASH_GetSTCompanyID+0x14>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	0a1b      	lsrs	r3, r3, #8
}
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bc80      	pop	{r7}
 8001f30:	4770      	bx	lr
 8001f32:	bf00      	nop
 8001f34:	1fff7584 	.word	0x1fff7584

08001f38 <SystemApp_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
void SystemApp_Init(void)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SystemApp_Init_1 */

  /* USER CODE END SystemApp_Init_1 */

  /* Ensure that MSI is wake-up system clock */
  __HAL_RCC_WAKEUPSTOP_CLK_CONFIG(RCC_STOP_WAKEUPCLOCK_MSI);
 8001f3c:	2000      	movs	r0, #0
 8001f3e:	f7ff ffc6 	bl	8001ece <LL_RCC_SetClkAfterWakeFromStop>

  /*Initialize timer and RTC*/
  UTIL_TIMER_Init();
 8001f42:	f019 fb0d 	bl	801b560 <UTIL_TIMER_Init>
  SYS_TimerInitialisedFlag = 1;
 8001f46:	4b10      	ldr	r3, [pc, #64]	@ (8001f88 <SystemApp_Init+0x50>)
 8001f48:	2201      	movs	r2, #1
 8001f4a:	701a      	strb	r2, [r3, #0]
  /* Initializes the SW probes pins and the monitor RF pins via Alternate Function */
  DBG_Init();
 8001f4c:	f000 f98c 	bl	8002268 <DBG_Init>

  /*Initialize the terminal */
  UTIL_ADV_TRACE_Init();
 8001f50:	f019 fd96 	bl	801ba80 <UTIL_ADV_TRACE_Init>
  UTIL_ADV_TRACE_RegisterTimeStampFunction(TimestampNow);
 8001f54:	480d      	ldr	r0, [pc, #52]	@ (8001f8c <SystemApp_Init+0x54>)
 8001f56:	f019 fe41 	bl	801bbdc <UTIL_ADV_TRACE_RegisterTimeStampFunction>

  /* #warning "should be removed when proper obl is done" */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8001f5a:	4b0d      	ldr	r3, [pc, #52]	@ (8001f90 <SystemApp_Init+0x58>)
 8001f5c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001f60:	611a      	str	r2, [r3, #16]

  /*Set verbose LEVEL*/
  UTIL_ADV_TRACE_SetVerboseLevel(VERBOSE_LEVEL);
 8001f62:	2002      	movs	r0, #2
 8001f64:	f019 fe48 	bl	801bbf8 <UTIL_ADV_TRACE_SetVerboseLevel>

  /*Initialize the temperature and Battery measurement services */
  SYS_InitMeasurement();
 8001f68:	f7ff fab2 	bl	80014d0 <SYS_InitMeasurement>

  /*Initialize the Sensors */
  EnvSensors_Init();
 8001f6c:	f000 fa02 	bl	8002374 <EnvSensors_Init>

  /*Init low power manager*/
  UTIL_LPM_Init();
 8001f70:	f018 fcc4 	bl	801a8fc <UTIL_LPM_Init>
  /* Disable Stand-by mode */
  UTIL_LPM_SetOffMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 8001f74:	2101      	movs	r1, #1
 8001f76:	2001      	movs	r0, #1
 8001f78:	f018 fd00 	bl	801a97c <UTIL_LPM_SetOffMode>

#if defined (LOW_POWER_DISABLE) && (LOW_POWER_DISABLE == 1)
  /* Disable Stop Mode */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 8001f7c:	2101      	movs	r1, #1
 8001f7e:	2001      	movs	r0, #1
 8001f80:	f018 fccc 	bl	801a91c <UTIL_LPM_SetStopMode>
#endif /* LOW_POWER_DISABLE */

  /* USER CODE BEGIN SystemApp_Init_2 */

  /* USER CODE END SystemApp_Init_2 */
}
 8001f84:	bf00      	nop
 8001f86:	bd80      	pop	{r7, pc}
 8001f88:	200003e4 	.word	0x200003e4
 8001f8c:	08002159 	.word	0x08002159
 8001f90:	58004000 	.word	0x58004000

08001f94 <UTIL_SEQ_Idle>:

/**
  * @brief redefines __weak function in stm32_seq.c such to enter low power
  */
void UTIL_SEQ_Idle(void)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_SEQ_Idle_1 */

  /* USER CODE END UTIL_SEQ_Idle_1 */
  UTIL_LPM_EnterLowPower();
 8001f98:	f018 fd20 	bl	801a9dc <UTIL_LPM_EnterLowPower>
  /* USER CODE BEGIN UTIL_SEQ_Idle_2 */

  /* USER CODE END UTIL_SEQ_Idle_2 */
}
 8001f9c:	bf00      	nop
 8001f9e:	bd80      	pop	{r7, pc}

08001fa0 <GetBatteryLevel>:

uint8_t GetBatteryLevel(void)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b082      	sub	sp, #8
 8001fa4:	af00      	add	r7, sp, #0
  uint8_t batteryLevel = 0;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN GetBatteryLevel_0 */

  /* USER CODE END GetBatteryLevel_0 */

  batteryLevelmV = (uint16_t) SYS_GetBatteryLevel();
 8001faa:	f7ff fa9f 	bl	80014ec <SYS_GetBatteryLevel>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	80bb      	strh	r3, [r7, #4]

  /* Convert battery level from mV to linear scale: 1 (very low) to 254 (fully charged) */
  if (batteryLevelmV > VDD_BAT)
 8001fb2:	88bb      	ldrh	r3, [r7, #4]
 8001fb4:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8001fb8:	4293      	cmp	r3, r2
 8001fba:	d902      	bls.n	8001fc2 <GetBatteryLevel+0x22>
  {
    batteryLevel = LORAWAN_MAX_BAT;
 8001fbc:	23fe      	movs	r3, #254	@ 0xfe
 8001fbe:	71fb      	strb	r3, [r7, #7]
 8001fc0:	e014      	b.n	8001fec <GetBatteryLevel+0x4c>
  }
  else if (batteryLevelmV < VDD_MIN)
 8001fc2:	88bb      	ldrh	r3, [r7, #4]
 8001fc4:	f5b3 6fe1 	cmp.w	r3, #1800	@ 0x708
 8001fc8:	d202      	bcs.n	8001fd0 <GetBatteryLevel+0x30>
  {
    batteryLevel = 0;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	71fb      	strb	r3, [r7, #7]
 8001fce:	e00d      	b.n	8001fec <GetBatteryLevel+0x4c>
  }
  else
  {
    batteryLevel = (((uint32_t)(batteryLevelmV - VDD_MIN) * LORAWAN_MAX_BAT) / (VDD_BAT - VDD_MIN));
 8001fd0:	88bb      	ldrh	r3, [r7, #4]
 8001fd2:	f5a3 63e1 	sub.w	r3, r3, #1800	@ 0x708
 8001fd6:	461a      	mov	r2, r3
 8001fd8:	4613      	mov	r3, r2
 8001fda:	01db      	lsls	r3, r3, #7
 8001fdc:	1a9b      	subs	r3, r3, r2
 8001fde:	005b      	lsls	r3, r3, #1
 8001fe0:	461a      	mov	r2, r3
 8001fe2:	4b05      	ldr	r3, [pc, #20]	@ (8001ff8 <GetBatteryLevel+0x58>)
 8001fe4:	fba3 2302 	umull	r2, r3, r3, r2
 8001fe8:	09db      	lsrs	r3, r3, #7
 8001fea:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN GetBatteryLevel_2 */

  /* USER CODE END GetBatteryLevel_2 */

  return batteryLevel;  /* 1 (very low) to 254 (fully charged) */
 8001fec:	79fb      	ldrb	r3, [r7, #7]
}
 8001fee:	4618      	mov	r0, r3
 8001ff0:	3708      	adds	r7, #8
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	bf00      	nop
 8001ff8:	1b4e81b5 	.word	0x1b4e81b5

08001ffc <GetTemperatureLevel>:

int16_t GetTemperatureLevel(void)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b088      	sub	sp, #32
 8002000:	af00      	add	r7, sp, #0
  int16_t temperatureLevel = 0;
 8002002:	2300      	movs	r3, #0
 8002004:	83fb      	strh	r3, [r7, #30]

  sensor_t sensor_data;

  EnvSensors_Read(&sensor_data);
 8002006:	1d3b      	adds	r3, r7, #4
 8002008:	4618      	mov	r0, r3
 800200a:	f000 f989 	bl	8002320 <EnvSensors_Read>
  temperatureLevel = (int16_t)(sensor_data.temperature);
 800200e:	68bb      	ldr	r3, [r7, #8]
 8002010:	4618      	mov	r0, r3
 8002012:	f7fe ffff 	bl	8001014 <__aeabi_f2iz>
 8002016:	4603      	mov	r3, r0
 8002018:	83fb      	strh	r3, [r7, #30]
  /* USER CODE BEGIN GetTemperatureLevel */

  /* USER CODE END GetTemperatureLevel */
  return temperatureLevel;
 800201a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
}
 800201e:	4618      	mov	r0, r3
 8002020:	3720      	adds	r7, #32
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}

08002026 <GetUniqueId>:

void GetUniqueId(uint8_t *id)
{
 8002026:	b590      	push	{r4, r7, lr}
 8002028:	b087      	sub	sp, #28
 800202a:	af00      	add	r7, sp, #0
 800202c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GetUniqueId_1 */

  /* USER CODE END GetUniqueId_1 */
  uint32_t val = 0;
 800202e:	2300      	movs	r3, #0
 8002030:	617b      	str	r3, [r7, #20]
  val = LL_FLASH_GetUDN();
 8002032:	f7ff ff5f 	bl	8001ef4 <LL_FLASH_GetUDN>
 8002036:	6178      	str	r0, [r7, #20]
  if (val == 0xFFFFFFFF)  /* Normally this should not happen */
 8002038:	697b      	ldr	r3, [r7, #20]
 800203a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800203e:	d138      	bne.n	80020b2 <GetUniqueId+0x8c>
  {
    uint32_t ID_1_3_val = HAL_GetUIDw0() + HAL_GetUIDw2();
 8002040:	f001 f8d6 	bl	80031f0 <HAL_GetUIDw0>
 8002044:	4604      	mov	r4, r0
 8002046:	f001 f8e7 	bl	8003218 <HAL_GetUIDw2>
 800204a:	4603      	mov	r3, r0
 800204c:	4423      	add	r3, r4
 800204e:	613b      	str	r3, [r7, #16]
    uint32_t ID_2_val = HAL_GetUIDw1();
 8002050:	f001 f8d8 	bl	8003204 <HAL_GetUIDw1>
 8002054:	60f8      	str	r0, [r7, #12]

    id[7] = (ID_1_3_val) >> 24;
 8002056:	693b      	ldr	r3, [r7, #16]
 8002058:	0e1a      	lsrs	r2, r3, #24
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	3307      	adds	r3, #7
 800205e:	b2d2      	uxtb	r2, r2
 8002060:	701a      	strb	r2, [r3, #0]
    id[6] = (ID_1_3_val) >> 16;
 8002062:	693b      	ldr	r3, [r7, #16]
 8002064:	0c1a      	lsrs	r2, r3, #16
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	3306      	adds	r3, #6
 800206a:	b2d2      	uxtb	r2, r2
 800206c:	701a      	strb	r2, [r3, #0]
    id[5] = (ID_1_3_val) >> 8;
 800206e:	693b      	ldr	r3, [r7, #16]
 8002070:	0a1a      	lsrs	r2, r3, #8
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	3305      	adds	r3, #5
 8002076:	b2d2      	uxtb	r2, r2
 8002078:	701a      	strb	r2, [r3, #0]
    id[4] = (ID_1_3_val);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	3304      	adds	r3, #4
 800207e:	693a      	ldr	r2, [r7, #16]
 8002080:	b2d2      	uxtb	r2, r2
 8002082:	701a      	strb	r2, [r3, #0]
    id[3] = (ID_2_val) >> 24;
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	0e1a      	lsrs	r2, r3, #24
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	3303      	adds	r3, #3
 800208c:	b2d2      	uxtb	r2, r2
 800208e:	701a      	strb	r2, [r3, #0]
    id[2] = (ID_2_val) >> 16;
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	0c1a      	lsrs	r2, r3, #16
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	3302      	adds	r3, #2
 8002098:	b2d2      	uxtb	r2, r2
 800209a:	701a      	strb	r2, [r3, #0]
    id[1] = (ID_2_val) >> 8;
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	0a1a      	lsrs	r2, r3, #8
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	3301      	adds	r3, #1
 80020a4:	b2d2      	uxtb	r2, r2
 80020a6:	701a      	strb	r2, [r3, #0]
    id[0] = (ID_2_val);
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	b2da      	uxtb	r2, r3
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	701a      	strb	r2, [r3, #0]
  }

  /* USER CODE BEGIN GetUniqueId_2 */

  /* USER CODE END GetUniqueId_2 */
}
 80020b0:	e031      	b.n	8002116 <GetUniqueId+0xf0>
    id[7] = val & 0xFF;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	3307      	adds	r3, #7
 80020b6:	697a      	ldr	r2, [r7, #20]
 80020b8:	b2d2      	uxtb	r2, r2
 80020ba:	701a      	strb	r2, [r3, #0]
    id[6] = (val >> 8) & 0xFF;
 80020bc:	697b      	ldr	r3, [r7, #20]
 80020be:	0a1a      	lsrs	r2, r3, #8
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	3306      	adds	r3, #6
 80020c4:	b2d2      	uxtb	r2, r2
 80020c6:	701a      	strb	r2, [r3, #0]
    id[5] = (val >> 16) & 0xFF;
 80020c8:	697b      	ldr	r3, [r7, #20]
 80020ca:	0c1a      	lsrs	r2, r3, #16
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	3305      	adds	r3, #5
 80020d0:	b2d2      	uxtb	r2, r2
 80020d2:	701a      	strb	r2, [r3, #0]
    id[4] = (val >> 24) & 0xFF;
 80020d4:	697b      	ldr	r3, [r7, #20]
 80020d6:	0e1a      	lsrs	r2, r3, #24
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	3304      	adds	r3, #4
 80020dc:	b2d2      	uxtb	r2, r2
 80020de:	701a      	strb	r2, [r3, #0]
    val = LL_FLASH_GetDeviceID();
 80020e0:	f7ff ff12 	bl	8001f08 <LL_FLASH_GetDeviceID>
 80020e4:	6178      	str	r0, [r7, #20]
    id[3] = val & 0xFF;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	3303      	adds	r3, #3
 80020ea:	697a      	ldr	r2, [r7, #20]
 80020ec:	b2d2      	uxtb	r2, r2
 80020ee:	701a      	strb	r2, [r3, #0]
    val = LL_FLASH_GetSTCompanyID();
 80020f0:	f7ff ff16 	bl	8001f20 <LL_FLASH_GetSTCompanyID>
 80020f4:	6178      	str	r0, [r7, #20]
    id[2] = val & 0xFF;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	3302      	adds	r3, #2
 80020fa:	697a      	ldr	r2, [r7, #20]
 80020fc:	b2d2      	uxtb	r2, r2
 80020fe:	701a      	strb	r2, [r3, #0]
    id[1] = (val >> 8) & 0xFF;
 8002100:	697b      	ldr	r3, [r7, #20]
 8002102:	0a1a      	lsrs	r2, r3, #8
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	3301      	adds	r3, #1
 8002108:	b2d2      	uxtb	r2, r2
 800210a:	701a      	strb	r2, [r3, #0]
    id[0] = (val >> 16) & 0xFF;
 800210c:	697b      	ldr	r3, [r7, #20]
 800210e:	0c1b      	lsrs	r3, r3, #16
 8002110:	b2da      	uxtb	r2, r3
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	701a      	strb	r2, [r3, #0]
}
 8002116:	bf00      	nop
 8002118:	371c      	adds	r7, #28
 800211a:	46bd      	mov	sp, r7
 800211c:	bd90      	pop	{r4, r7, pc}

0800211e <GetDevAddr>:

uint32_t GetDevAddr(void)
{
 800211e:	b590      	push	{r4, r7, lr}
 8002120:	b083      	sub	sp, #12
 8002122:	af00      	add	r7, sp, #0
  uint32_t val = 0;
 8002124:	2300      	movs	r3, #0
 8002126:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN GetDevAddr_1 */

  /* USER CODE END GetDevAddr_1 */

  val = LL_FLASH_GetUDN();
 8002128:	f7ff fee4 	bl	8001ef4 <LL_FLASH_GetUDN>
 800212c:	6078      	str	r0, [r7, #4]
  if (val == 0xFFFFFFFF)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002134:	d10b      	bne.n	800214e <GetDevAddr+0x30>
  {
    val = ((HAL_GetUIDw0()) ^ (HAL_GetUIDw1()) ^ (HAL_GetUIDw2()));
 8002136:	f001 f85b 	bl	80031f0 <HAL_GetUIDw0>
 800213a:	4604      	mov	r4, r0
 800213c:	f001 f862 	bl	8003204 <HAL_GetUIDw1>
 8002140:	4603      	mov	r3, r0
 8002142:	405c      	eors	r4, r3
 8002144:	f001 f868 	bl	8003218 <HAL_GetUIDw2>
 8002148:	4603      	mov	r3, r0
 800214a:	4063      	eors	r3, r4
 800214c:	607b      	str	r3, [r7, #4]
  }

  /* USER CODE BEGIN GetDevAddr_2 */

  /* USER CODE END GetDevAddr_2 */
  return val;
 800214e:	687b      	ldr	r3, [r7, #4]

}
 8002150:	4618      	mov	r0, r3
 8002152:	370c      	adds	r7, #12
 8002154:	46bd      	mov	sp, r7
 8002156:	bd90      	pop	{r4, r7, pc}

08002158 <TimestampNow>:
/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/

static void TimestampNow(uint8_t *buff, uint16_t *size)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b086      	sub	sp, #24
 800215c:	af02      	add	r7, sp, #8
 800215e:	6078      	str	r0, [r7, #4]
 8002160:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN TimestampNow_1 */

  /* USER CODE END TimestampNow_1 */
  SysTime_t curtime = SysTimeGet();
 8002162:	f107 0308 	add.w	r3, r7, #8
 8002166:	4618      	mov	r0, r3
 8002168:	f018 fd48 	bl	801abfc <SysTimeGet>
  tiny_snprintf_like((char *)buff, MAX_TS_SIZE, "%ds%03d:", curtime.Seconds, curtime.SubSeconds);
 800216c:	68bb      	ldr	r3, [r7, #8]
 800216e:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8002172:	9200      	str	r2, [sp, #0]
 8002174:	4a07      	ldr	r2, [pc, #28]	@ (8002194 <TimestampNow+0x3c>)
 8002176:	2110      	movs	r1, #16
 8002178:	6878      	ldr	r0, [r7, #4]
 800217a:	f000 f81d 	bl	80021b8 <tiny_snprintf_like>
  *size = strlen((char *)buff);
 800217e:	6878      	ldr	r0, [r7, #4]
 8002180:	f7fe f84e 	bl	8000220 <strlen>
 8002184:	4603      	mov	r3, r0
 8002186:	b29a      	uxth	r2, r3
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN TimestampNow_2 */

  /* USER CODE END TimestampNow_2 */
}
 800218c:	bf00      	nop
 800218e:	3710      	adds	r7, #16
 8002190:	46bd      	mov	sp, r7
 8002192:	bd80      	pop	{r7, pc}
 8002194:	0801e9e0 	.word	0x0801e9e0

08002198 <UTIL_ADV_TRACE_PreSendHook>:

/* Disable StopMode when traces need to be printed */
void UTIL_ADV_TRACE_PreSendHook(void)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_1 */

  /* USER CODE END UTIL_ADV_TRACE_PreSendHook_1 */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_DISABLE);
 800219c:	2101      	movs	r1, #1
 800219e:	2002      	movs	r0, #2
 80021a0:	f018 fbbc 	bl	801a91c <UTIL_LPM_SetStopMode>
  /* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_2 */

  /* USER CODE END UTIL_ADV_TRACE_PreSendHook_2 */
}
 80021a4:	bf00      	nop
 80021a6:	bd80      	pop	{r7, pc}

080021a8 <UTIL_ADV_TRACE_PostSendHook>:
/* Re-enable StopMode when traces have been printed */
void UTIL_ADV_TRACE_PostSendHook(void)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_1 */

  /* USER CODE END UTIL_LPM_SetStopMode_1 */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_ENABLE);
 80021ac:	2100      	movs	r1, #0
 80021ae:	2002      	movs	r0, #2
 80021b0:	f018 fbb4 	bl	801a91c <UTIL_LPM_SetStopMode>
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_2 */

  /* USER CODE END UTIL_LPM_SetStopMode_2 */
}
 80021b4:	bf00      	nop
 80021b6:	bd80      	pop	{r7, pc}

080021b8 <tiny_snprintf_like>:

static void tiny_snprintf_like(char *buf, uint32_t maxsize, const char *strFormat, ...)
{
 80021b8:	b40c      	push	{r2, r3}
 80021ba:	b580      	push	{r7, lr}
 80021bc:	b084      	sub	sp, #16
 80021be:	af00      	add	r7, sp, #0
 80021c0:	6078      	str	r0, [r7, #4]
 80021c2:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN tiny_snprintf_like_1 */

  /* USER CODE END tiny_snprintf_like_1 */
  va_list vaArgs;
  va_start(vaArgs, strFormat);
 80021c4:	f107 031c 	add.w	r3, r7, #28
 80021c8:	60fb      	str	r3, [r7, #12]
  UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 80021ca:	6839      	ldr	r1, [r7, #0]
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	69ba      	ldr	r2, [r7, #24]
 80021d0:	6878      	ldr	r0, [r7, #4]
 80021d2:	f018 fee5 	bl	801afa0 <tiny_vsnprintf_like>
  va_end(vaArgs);
  /* USER CODE BEGIN tiny_snprintf_like_2 */

  /* USER CODE END tiny_snprintf_like_2 */
}
 80021d6:	bf00      	nop
 80021d8:	3710      	adds	r7, #16
 80021da:	46bd      	mov	sp, r7
 80021dc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80021e0:	b002      	add	sp, #8
 80021e2:	4770      	bx	lr

080021e4 <HAL_InitTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021e4:	b480      	push	{r7}
 80021e6:	b083      	sub	sp, #12
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  /*Don't enable SysTick if TIMER_IF is based on other counters (e.g. RTC) */
  /* USER CODE BEGIN HAL_InitTick_1 */

  /* USER CODE END HAL_InitTick_1 */
  return HAL_OK;
 80021ec:	2300      	movs	r3, #0
  /* USER CODE BEGIN HAL_InitTick_2 */

  /* USER CODE END HAL_InitTick_2 */
}
 80021ee:	4618      	mov	r0, r3
 80021f0:	370c      	adds	r7, #12
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bc80      	pop	{r7}
 80021f6:	4770      	bx	lr

080021f8 <HAL_GetTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
uint32_t HAL_GetTick(void)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b082      	sub	sp, #8
 80021fc:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 80021fe:	2300      	movs	r3, #0
 8002200:	607b      	str	r3, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_GetTick_1 */

  /* USER CODE END HAL_GetTick_1 */
  if (SYS_TimerInitialisedFlag == 0)
 8002202:	4b06      	ldr	r3, [pc, #24]	@ (800221c <HAL_GetTick+0x24>)
 8002204:	781b      	ldrb	r3, [r3, #0]
 8002206:	2b00      	cmp	r3, #0
 8002208:	d002      	beq.n	8002210 <HAL_GetTick+0x18>

    /* USER CODE END HAL_GetTick_EarlyCall */
  }
  else
  {
    ret = TIMER_IF_GetTimerValue();
 800220a:	f000 fa41 	bl	8002690 <TIMER_IF_GetTimerValue>
 800220e:	6078      	str	r0, [r7, #4]
  }
  /* USER CODE BEGIN HAL_GetTick_2 */

  /* USER CODE END HAL_GetTick_2 */
  return ret;
 8002210:	687b      	ldr	r3, [r7, #4]
}
 8002212:	4618      	mov	r0, r3
 8002214:	3708      	adds	r7, #8
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}
 800221a:	bf00      	nop
 800221c:	200003e4 	.word	0x200003e4

08002220 <HAL_Delay>:

/**
  * @note This function overwrites the __weak one from HAL
  */
void HAL_Delay(__IO uint32_t Delay)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b082      	sub	sp, #8
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_Delay_1 */

  /* USER CODE END HAL_Delay_1 */
  TIMER_IF_DelayMs(Delay);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	4618      	mov	r0, r3
 800222c:	f000 fab7 	bl	800279e <TIMER_IF_DelayMs>
  /* USER CODE BEGIN HAL_Delay_2 */

  /* USER CODE END HAL_Delay_2 */
}
 8002230:	bf00      	nop
 8002232:	3708      	adds	r7, #8
 8002234:	46bd      	mov	sp, r7
 8002236:	bd80      	pop	{r7, pc}

08002238 <LL_AHB2_GRP1_EnableClock>:
{
 8002238:	b480      	push	{r7}
 800223a:	b085      	sub	sp, #20
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002240:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002244:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002246:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	4313      	orrs	r3, r2
 800224e:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002250:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002254:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	4013      	ands	r3, r2
 800225a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800225c:	68fb      	ldr	r3, [r7, #12]
}
 800225e:	bf00      	nop
 8002260:	3714      	adds	r7, #20
 8002262:	46bd      	mov	sp, r7
 8002264:	bc80      	pop	{r7}
 8002266:	4770      	bx	lr

08002268 <DBG_Init>:

/**
  * @brief Initializes the SW probes pins and the monitor RF pins via Alternate Function
  */
void DBG_Init(void)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b086      	sub	sp, #24
 800226c:	af00      	add	r7, sp, #0

  /* USER CODE END DBG_Init_1 */

  /* SW probes */
#if defined (DEBUGGER_ENABLED) && ( DEBUGGER_ENABLED == 0 )
  HAL_DBGMCU_DisableDBGSleepMode();
 800226e:	f000 ffdd 	bl	800322c <HAL_DBGMCU_DisableDBGSleepMode>
  HAL_DBGMCU_DisableDBGStopMode();
 8002272:	f000 ffe1 	bl	8003238 <HAL_DBGMCU_DisableDBGStopMode>
  HAL_DBGMCU_DisableDBGStandbyMode();
 8002276:	f000 ffe5 	bl	8003244 <HAL_DBGMCU_DisableDBGStandbyMode>
  HAL_DBGMCU_EnableDBGStandbyMode();
#elif !defined (DEBUGGER_ENABLED)
#error "DEBUGGER_ENABLED not defined or out of range <0,1>"
#endif /* DEBUGGER_OFF */

  GPIO_InitTypeDef  GPIO_InitStruct = {0};
 800227a:	1d3b      	adds	r3, r7, #4
 800227c:	2200      	movs	r2, #0
 800227e:	601a      	str	r2, [r3, #0]
 8002280:	605a      	str	r2, [r3, #4]
 8002282:	609a      	str	r2, [r3, #8]
 8002284:	60da      	str	r2, [r3, #12]
 8002286:	611a      	str	r2, [r3, #16]

  /* Configure the GPIO pin */
  GPIO_InitStruct.Mode   = GPIO_MODE_OUTPUT_PP;
 8002288:	2301      	movs	r3, #1
 800228a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull   = GPIO_NOPULL;
 800228c:	2300      	movs	r3, #0
 800228e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed  = GPIO_SPEED_FREQ_VERY_HIGH;
 8002290:	2303      	movs	r3, #3
 8002292:	613b      	str	r3, [r7, #16]

  /* Enable the GPIO Clock */
  PROBE_LINE1_CLK_ENABLE();
 8002294:	2001      	movs	r0, #1
 8002296:	f7ff ffcf 	bl	8002238 <LL_AHB2_GRP1_EnableClock>
  PROBE_LINE2_CLK_ENABLE();
 800229a:	2002      	movs	r0, #2
 800229c:	f7ff ffcc 	bl	8002238 <LL_AHB2_GRP1_EnableClock>
  PROBE_LINE3_CLK_ENABLE();
 80022a0:	2002      	movs	r0, #2
 80022a2:	f7ff ffc9 	bl	8002238 <LL_AHB2_GRP1_EnableClock>
  PROBE_LINE4_CLK_ENABLE();
 80022a6:	2002      	movs	r0, #2
 80022a8:	f7ff ffc6 	bl	8002238 <LL_AHB2_GRP1_EnableClock>

  GPIO_InitStruct.Pin    = PROBE_LINE1_PIN;
 80022ac:	2301      	movs	r3, #1
 80022ae:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(PROBE_LINE1_PORT, &GPIO_InitStruct);
 80022b0:	1d3b      	adds	r3, r7, #4
 80022b2:	4619      	mov	r1, r3
 80022b4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80022b8:	f002 ffa4 	bl	8005204 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin    = PROBE_LINE2_PIN;
 80022bc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80022c0:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(PROBE_LINE2_PORT, &GPIO_InitStruct);
 80022c2:	1d3b      	adds	r3, r7, #4
 80022c4:	4619      	mov	r1, r3
 80022c6:	4815      	ldr	r0, [pc, #84]	@ (800231c <DBG_Init+0xb4>)
 80022c8:	f002 ff9c 	bl	8005204 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin    = PROBE_LINE3_PIN;
 80022cc:	2308      	movs	r3, #8
 80022ce:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(PROBE_LINE3_PORT, &GPIO_InitStruct);
 80022d0:	1d3b      	adds	r3, r7, #4
 80022d2:	4619      	mov	r1, r3
 80022d4:	4811      	ldr	r0, [pc, #68]	@ (800231c <DBG_Init+0xb4>)
 80022d6:	f002 ff95 	bl	8005204 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin    = PROBE_LINE4_PIN;
 80022da:	2310      	movs	r3, #16
 80022dc:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(PROBE_LINE4_PORT, &GPIO_InitStruct);
 80022de:	1d3b      	adds	r3, r7, #4
 80022e0:	4619      	mov	r1, r3
 80022e2:	480e      	ldr	r0, [pc, #56]	@ (800231c <DBG_Init+0xb4>)
 80022e4:	f002 ff8e 	bl	8005204 <HAL_GPIO_Init>

  /* Reset probe Pins */
  HAL_GPIO_WritePin(PROBE_LINE1_PORT, PROBE_LINE1_PIN, GPIO_PIN_RESET);
 80022e8:	2200      	movs	r2, #0
 80022ea:	2101      	movs	r1, #1
 80022ec:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80022f0:	f003 f9b6 	bl	8005660 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PROBE_LINE2_PORT, PROBE_LINE2_PIN, GPIO_PIN_RESET);
 80022f4:	2200      	movs	r2, #0
 80022f6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80022fa:	4808      	ldr	r0, [pc, #32]	@ (800231c <DBG_Init+0xb4>)
 80022fc:	f003 f9b0 	bl	8005660 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PROBE_LINE3_PORT, PROBE_LINE3_PIN, GPIO_PIN_RESET);
 8002300:	2200      	movs	r2, #0
 8002302:	2108      	movs	r1, #8
 8002304:	4805      	ldr	r0, [pc, #20]	@ (800231c <DBG_Init+0xb4>)
 8002306:	f003 f9ab 	bl	8005660 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PROBE_LINE4_PORT, PROBE_LINE4_PIN, GPIO_PIN_RESET);
 800230a:	2200      	movs	r2, #0
 800230c:	2110      	movs	r1, #16
 800230e:	4803      	ldr	r0, [pc, #12]	@ (800231c <DBG_Init+0xb4>)
 8002310:	f003 f9a6 	bl	8005660 <HAL_GPIO_WritePin>
#endif /* DEBUG_RF_BUSY_ENABLED */

  /* USER CODE BEGIN DBG_Init_3 */

  /* USER CODE END DBG_Init_3 */
}
 8002314:	bf00      	nop
 8002316:	3718      	adds	r7, #24
 8002318:	46bd      	mov	sp, r7
 800231a:	bd80      	pop	{r7, pc}
 800231c:	48000400 	.word	0x48000400

08002320 <EnvSensors_Read>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t EnvSensors_Read(sensor_t *sensor_data)
{
 8002320:	b480      	push	{r7}
 8002322:	b087      	sub	sp, #28
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN EnvSensors_Read */
  float HUMIDITY_Value = HUMIDITY_DEFAULT_VAL;
 8002328:	4b0d      	ldr	r3, [pc, #52]	@ (8002360 <EnvSensors_Read+0x40>)
 800232a:	617b      	str	r3, [r7, #20]
  float TEMPERATURE_Value = TEMPERATURE_DEFAULT_VAL;
 800232c:	4b0d      	ldr	r3, [pc, #52]	@ (8002364 <EnvSensors_Read+0x44>)
 800232e:	613b      	str	r3, [r7, #16]
  float PRESSURE_Value = PRESSURE_DEFAULT_VAL;
 8002330:	4b0d      	ldr	r3, [pc, #52]	@ (8002368 <EnvSensors_Read+0x48>)
 8002332:	60fb      	str	r3, [r7, #12]
#endif /* USE_IKS01A3_ENV_SENSOR_LPS22HH_0 */
#elif !defined (SENSOR_ENABLED)
#error SENSOR_ENABLED not defined
#endif  /* SENSOR_ENABLED */

  sensor_data->humidity    = HUMIDITY_Value;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	697a      	ldr	r2, [r7, #20]
 8002338:	609a      	str	r2, [r3, #8]
  sensor_data->temperature = TEMPERATURE_Value;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	693a      	ldr	r2, [r7, #16]
 800233e:	605a      	str	r2, [r3, #4]
  sensor_data->pressure    = PRESSURE_Value;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	68fa      	ldr	r2, [r7, #12]
 8002344:	601a      	str	r2, [r3, #0]

  sensor_data->latitude  = (int32_t)((STSOP_LATTITUDE  * MAX_GPS_POS) / 90);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	4a08      	ldr	r2, [pc, #32]	@ (800236c <EnvSensors_Read+0x4c>)
 800234a:	60da      	str	r2, [r3, #12]
  sensor_data->longitude = (int32_t)((STSOP_LONGITUDE  * MAX_GPS_POS) / 180);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	4a08      	ldr	r2, [pc, #32]	@ (8002370 <EnvSensors_Read+0x50>)
 8002350:	611a      	str	r2, [r3, #16]

  return 0;
 8002352:	2300      	movs	r3, #0
  /* USER CODE END EnvSensors_Read */
}
 8002354:	4618      	mov	r0, r3
 8002356:	371c      	adds	r7, #28
 8002358:	46bd      	mov	sp, r7
 800235a:	bc80      	pop	{r7}
 800235c:	4770      	bx	lr
 800235e:	bf00      	nop
 8002360:	42480000 	.word	0x42480000
 8002364:	41900000 	.word	0x41900000
 8002368:	447a0000 	.word	0x447a0000
 800236c:	003e090d 	.word	0x003e090d
 8002370:	000503ab 	.word	0x000503ab

08002374 <EnvSensors_Init>:

int32_t EnvSensors_Init(void)
{
 8002374:	b480      	push	{r7}
 8002376:	b083      	sub	sp, #12
 8002378:	af00      	add	r7, sp, #0
#if defined( USE_IKS01A2_ENV_SENSOR_HTS221_0 ) || defined( USE_IKS01A2_ENV_SENSOR_LPS22HB_0 ) || \
    defined( USE_IKS01A3_ENV_SENSOR_HTS221_0 ) || defined( USE_IKS01A3_ENV_SENSOR_LPS22HH_0 ) || \
    defined( USE_BSP_DRIVER )
  int32_t ret = BSP_ERROR_NONE;
 800237a:	2300      	movs	r3, #0
 800237c:	607b      	str	r3, [r7, #4]
#endif /* USE_IKS01A3_ENV_SENSOR_LPS22HH_0 */

#elif !defined (SENSOR_ENABLED)
#error SENSOR_ENABLED not defined
#endif /* SENSOR_ENABLED  */
  return 0;
 800237e:	2300      	movs	r3, #0
  /* USER CODE END EnvSensors_Init */
  return ret;
}
 8002380:	4618      	mov	r0, r3
 8002382:	370c      	adds	r7, #12
 8002384:	46bd      	mov	sp, r7
 8002386:	bc80      	pop	{r7}
 8002388:	4770      	bx	lr

0800238a <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800238a:	b480      	push	{r7}
 800238c:	af00      	add	r7, sp, #0
	return 1;
 800238e:	2301      	movs	r3, #1
}
 8002390:	4618      	mov	r0, r3
 8002392:	46bd      	mov	sp, r7
 8002394:	bc80      	pop	{r7}
 8002396:	4770      	bx	lr

08002398 <_kill>:

int _kill(int pid, int sig)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b082      	sub	sp, #8
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
 80023a0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80023a2:	f01a fc57 	bl	801cc54 <__errno>
 80023a6:	4603      	mov	r3, r0
 80023a8:	2216      	movs	r2, #22
 80023aa:	601a      	str	r2, [r3, #0]
	return -1;
 80023ac:	f04f 33ff 	mov.w	r3, #4294967295
}
 80023b0:	4618      	mov	r0, r3
 80023b2:	3708      	adds	r7, #8
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bd80      	pop	{r7, pc}

080023b8 <_exit>:

void _exit (int status)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b082      	sub	sp, #8
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80023c0:	f04f 31ff 	mov.w	r1, #4294967295
 80023c4:	6878      	ldr	r0, [r7, #4]
 80023c6:	f7ff ffe7 	bl	8002398 <_kill>
	while (1) {}		/* Make sure we hang here */
 80023ca:	bf00      	nop
 80023cc:	e7fd      	b.n	80023ca <_exit+0x12>

080023ce <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80023ce:	b580      	push	{r7, lr}
 80023d0:	b086      	sub	sp, #24
 80023d2:	af00      	add	r7, sp, #0
 80023d4:	60f8      	str	r0, [r7, #12]
 80023d6:	60b9      	str	r1, [r7, #8]
 80023d8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023da:	2300      	movs	r3, #0
 80023dc:	617b      	str	r3, [r7, #20]
 80023de:	e00a      	b.n	80023f6 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80023e0:	f3af 8000 	nop.w
 80023e4:	4601      	mov	r1, r0
 80023e6:	68bb      	ldr	r3, [r7, #8]
 80023e8:	1c5a      	adds	r2, r3, #1
 80023ea:	60ba      	str	r2, [r7, #8]
 80023ec:	b2ca      	uxtb	r2, r1
 80023ee:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023f0:	697b      	ldr	r3, [r7, #20]
 80023f2:	3301      	adds	r3, #1
 80023f4:	617b      	str	r3, [r7, #20]
 80023f6:	697a      	ldr	r2, [r7, #20]
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	429a      	cmp	r2, r3
 80023fc:	dbf0      	blt.n	80023e0 <_read+0x12>
	}

return len;
 80023fe:	687b      	ldr	r3, [r7, #4]
}
 8002400:	4618      	mov	r0, r3
 8002402:	3718      	adds	r7, #24
 8002404:	46bd      	mov	sp, r7
 8002406:	bd80      	pop	{r7, pc}

08002408 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b086      	sub	sp, #24
 800240c:	af00      	add	r7, sp, #0
 800240e:	60f8      	str	r0, [r7, #12]
 8002410:	60b9      	str	r1, [r7, #8]
 8002412:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002414:	2300      	movs	r3, #0
 8002416:	617b      	str	r3, [r7, #20]
 8002418:	e009      	b.n	800242e <_write+0x26>
	{
		__io_putchar(*ptr++);
 800241a:	68bb      	ldr	r3, [r7, #8]
 800241c:	1c5a      	adds	r2, r3, #1
 800241e:	60ba      	str	r2, [r7, #8]
 8002420:	781b      	ldrb	r3, [r3, #0]
 8002422:	4618      	mov	r0, r3
 8002424:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002428:	697b      	ldr	r3, [r7, #20]
 800242a:	3301      	adds	r3, #1
 800242c:	617b      	str	r3, [r7, #20]
 800242e:	697a      	ldr	r2, [r7, #20]
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	429a      	cmp	r2, r3
 8002434:	dbf1      	blt.n	800241a <_write+0x12>
	}
	return len;
 8002436:	687b      	ldr	r3, [r7, #4]
}
 8002438:	4618      	mov	r0, r3
 800243a:	3718      	adds	r7, #24
 800243c:	46bd      	mov	sp, r7
 800243e:	bd80      	pop	{r7, pc}

08002440 <_close>:

int _close(int file)
{
 8002440:	b480      	push	{r7}
 8002442:	b083      	sub	sp, #12
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
	return -1;
 8002448:	f04f 33ff 	mov.w	r3, #4294967295
}
 800244c:	4618      	mov	r0, r3
 800244e:	370c      	adds	r7, #12
 8002450:	46bd      	mov	sp, r7
 8002452:	bc80      	pop	{r7}
 8002454:	4770      	bx	lr

08002456 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002456:	b480      	push	{r7}
 8002458:	b083      	sub	sp, #12
 800245a:	af00      	add	r7, sp, #0
 800245c:	6078      	str	r0, [r7, #4]
 800245e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002466:	605a      	str	r2, [r3, #4]
	return 0;
 8002468:	2300      	movs	r3, #0
}
 800246a:	4618      	mov	r0, r3
 800246c:	370c      	adds	r7, #12
 800246e:	46bd      	mov	sp, r7
 8002470:	bc80      	pop	{r7}
 8002472:	4770      	bx	lr

08002474 <_isatty>:

int _isatty(int file)
{
 8002474:	b480      	push	{r7}
 8002476:	b083      	sub	sp, #12
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
	return 1;
 800247c:	2301      	movs	r3, #1
}
 800247e:	4618      	mov	r0, r3
 8002480:	370c      	adds	r7, #12
 8002482:	46bd      	mov	sp, r7
 8002484:	bc80      	pop	{r7}
 8002486:	4770      	bx	lr

08002488 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002488:	b480      	push	{r7}
 800248a:	b085      	sub	sp, #20
 800248c:	af00      	add	r7, sp, #0
 800248e:	60f8      	str	r0, [r7, #12]
 8002490:	60b9      	str	r1, [r7, #8]
 8002492:	607a      	str	r2, [r7, #4]
	return 0;
 8002494:	2300      	movs	r3, #0
}
 8002496:	4618      	mov	r0, r3
 8002498:	3714      	adds	r7, #20
 800249a:	46bd      	mov	sp, r7
 800249c:	bc80      	pop	{r7}
 800249e:	4770      	bx	lr

080024a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b086      	sub	sp, #24
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80024a8:	4a14      	ldr	r2, [pc, #80]	@ (80024fc <_sbrk+0x5c>)
 80024aa:	4b15      	ldr	r3, [pc, #84]	@ (8002500 <_sbrk+0x60>)
 80024ac:	1ad3      	subs	r3, r2, r3
 80024ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80024b0:	697b      	ldr	r3, [r7, #20]
 80024b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80024b4:	4b13      	ldr	r3, [pc, #76]	@ (8002504 <_sbrk+0x64>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d102      	bne.n	80024c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80024bc:	4b11      	ldr	r3, [pc, #68]	@ (8002504 <_sbrk+0x64>)
 80024be:	4a12      	ldr	r2, [pc, #72]	@ (8002508 <_sbrk+0x68>)
 80024c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80024c2:	4b10      	ldr	r3, [pc, #64]	@ (8002504 <_sbrk+0x64>)
 80024c4:	681a      	ldr	r2, [r3, #0]
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	4413      	add	r3, r2
 80024ca:	693a      	ldr	r2, [r7, #16]
 80024cc:	429a      	cmp	r2, r3
 80024ce:	d207      	bcs.n	80024e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80024d0:	f01a fbc0 	bl	801cc54 <__errno>
 80024d4:	4603      	mov	r3, r0
 80024d6:	220c      	movs	r2, #12
 80024d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80024da:	f04f 33ff 	mov.w	r3, #4294967295
 80024de:	e009      	b.n	80024f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80024e0:	4b08      	ldr	r3, [pc, #32]	@ (8002504 <_sbrk+0x64>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80024e6:	4b07      	ldr	r3, [pc, #28]	@ (8002504 <_sbrk+0x64>)
 80024e8:	681a      	ldr	r2, [r3, #0]
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	4413      	add	r3, r2
 80024ee:	4a05      	ldr	r2, [pc, #20]	@ (8002504 <_sbrk+0x64>)
 80024f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80024f2:	68fb      	ldr	r3, [r7, #12]
}
 80024f4:	4618      	mov	r0, r3
 80024f6:	3718      	adds	r7, #24
 80024f8:	46bd      	mov	sp, r7
 80024fa:	bd80      	pop	{r7, pc}
 80024fc:	20010000 	.word	0x20010000
 8002500:	00000400 	.word	0x00000400
 8002504:	200003e8 	.word	0x200003e8
 8002508:	20002508 	.word	0x20002508

0800250c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800250c:	b480      	push	{r7}
 800250e:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8002510:	bf00      	nop
 8002512:	46bd      	mov	sp, r7
 8002514:	bc80      	pop	{r7}
 8002516:	4770      	bx	lr

08002518 <LL_RTC_TIME_GetSubSecond>:
  * @param  RTCx RTC Instance
  * @retval If binary mode is none, Value between Min_Data=0x0 and Max_Data=0x7FFF
  *         else Value between Min_Data=0x0 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_RTC_TIME_GetSubSecond(RTC_TypeDef *RTCx)
{
 8002518:	b480      	push	{r7}
 800251a:	b083      	sub	sp, #12
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RTCx->SSR, RTC_SSR_SS));
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	689b      	ldr	r3, [r3, #8]
}
 8002524:	4618      	mov	r0, r3
 8002526:	370c      	adds	r7, #12
 8002528:	46bd      	mov	sp, r7
 800252a:	bc80      	pop	{r7}
 800252c:	4770      	bx	lr
	...

08002530 <TIMER_IF_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
UTIL_TIMER_Status_t TIMER_IF_Init(void)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b082      	sub	sp, #8
 8002534:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8002536:	2300      	movs	r3, #0
 8002538:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_Init */

  /* USER CODE END TIMER_IF_Init */
  if (RTC_Initialized == false)
 800253a:	4b14      	ldr	r3, [pc, #80]	@ (800258c <TIMER_IF_Init+0x5c>)
 800253c:	781b      	ldrb	r3, [r3, #0]
 800253e:	f083 0301 	eor.w	r3, r3, #1
 8002542:	b2db      	uxtb	r3, r3
 8002544:	2b00      	cmp	r3, #0
 8002546:	d01b      	beq.n	8002580 <TIMER_IF_Init+0x50>
  {
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8002548:	4b11      	ldr	r3, [pc, #68]	@ (8002590 <TIMER_IF_Init+0x60>)
 800254a:	f04f 32ff 	mov.w	r2, #4294967295
 800254e:	631a      	str	r2, [r3, #48]	@ 0x30
    /*Init RTC*/
    MX_RTC_Init();
 8002550:	f7ff fb40 	bl	8001bd4 <MX_RTC_Init>
    /*Stop Timer */
    TIMER_IF_StopTimer();
 8002554:	f000 f856 	bl	8002604 <TIMER_IF_StopTimer>
    /** DeActivate the Alarm A enabled by STM32CubeMX during MX_RTC_Init() */
    HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8002558:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800255c:	480c      	ldr	r0, [pc, #48]	@ (8002590 <TIMER_IF_Init+0x60>)
 800255e:	f004 fdd9 	bl	8007114 <HAL_RTC_DeactivateAlarm>
    /*overload RTC feature enable*/
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8002562:	4b0b      	ldr	r3, [pc, #44]	@ (8002590 <TIMER_IF_Init+0x60>)
 8002564:	f04f 32ff 	mov.w	r2, #4294967295
 8002568:	631a      	str	r2, [r3, #48]	@ 0x30

    /*Enable Direct Read of the calendar registers (not through Shadow) */
    HAL_RTCEx_EnableBypassShadow(&hrtc);
 800256a:	4809      	ldr	r0, [pc, #36]	@ (8002590 <TIMER_IF_Init+0x60>)
 800256c:	f004 ff10 	bl	8007390 <HAL_RTCEx_EnableBypassShadow>
    /*Initialize MSB ticks*/
    TIMER_IF_BkUp_Write_MSBticks(0);
 8002570:	2000      	movs	r0, #0
 8002572:	f000 f9d3 	bl	800291c <TIMER_IF_BkUp_Write_MSBticks>

    TIMER_IF_SetTimerContext();
 8002576:	f000 f85f 	bl	8002638 <TIMER_IF_SetTimerContext>

    /* Register a task to associate to UTIL_TIMER_Irq() interrupt */
    UTIL_TIMER_IRQ_MAP_INIT();

    RTC_Initialized = true;
 800257a:	4b04      	ldr	r3, [pc, #16]	@ (800258c <TIMER_IF_Init+0x5c>)
 800257c:	2201      	movs	r2, #1
 800257e:	701a      	strb	r2, [r3, #0]
  }

  /* USER CODE BEGIN TIMER_IF_Init_Last */

  /* USER CODE END TIMER_IF_Init_Last */
  return ret;
 8002580:	79fb      	ldrb	r3, [r7, #7]
}
 8002582:	4618      	mov	r0, r3
 8002584:	3708      	adds	r7, #8
 8002586:	46bd      	mov	sp, r7
 8002588:	bd80      	pop	{r7, pc}
 800258a:	bf00      	nop
 800258c:	200003ec 	.word	0x200003ec
 8002590:	200003a0 	.word	0x200003a0

08002594 <TIMER_IF_StartTimer>:

UTIL_TIMER_Status_t TIMER_IF_StartTimer(uint32_t timeout)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b08e      	sub	sp, #56	@ 0x38
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 800259c:	2300      	movs	r3, #0
 800259e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  /* USER CODE BEGIN TIMER_IF_StartTimer */

  /* USER CODE END TIMER_IF_StartTimer */
  RTC_AlarmTypeDef sAlarm = {0};
 80025a2:	f107 0308 	add.w	r3, r7, #8
 80025a6:	222c      	movs	r2, #44	@ 0x2c
 80025a8:	2100      	movs	r1, #0
 80025aa:	4618      	mov	r0, r3
 80025ac:	f01a fb00 	bl	801cbb0 <memset>
  /*Stop timer if one is already started*/
  TIMER_IF_StopTimer();
 80025b0:	f000 f828 	bl	8002604 <TIMER_IF_StopTimer>
  timeout += RtcTimerContext;
 80025b4:	4b11      	ldr	r3, [pc, #68]	@ (80025fc <TIMER_IF_StartTimer+0x68>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	687a      	ldr	r2, [r7, #4]
 80025ba:	4413      	add	r3, r2
 80025bc:	607b      	str	r3, [r7, #4]

  TIMER_IF_DBG_PRINTF("Start timer: time=%d, alarm=%d\n\r",  GetTimerTicks(), timeout);
  /* starts timer*/
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 80025be:	2300      	movs	r3, #0
 80025c0:	627b      	str	r3, [r7, #36]	@ 0x24
  sAlarm.AlarmTime.SubSeconds = UINT32_MAX - timeout;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	43db      	mvns	r3, r3
 80025c6:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80025c8:	2300      	movs	r3, #0
 80025ca:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 80025cc:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80025d0:	623b      	str	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 80025d2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80025d6:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80025d8:	f107 0308 	add.w	r3, r7, #8
 80025dc:	2201      	movs	r2, #1
 80025de:	4619      	mov	r1, r3
 80025e0:	4807      	ldr	r0, [pc, #28]	@ (8002600 <TIMER_IF_StartTimer+0x6c>)
 80025e2:	f004 fc8b 	bl	8006efc <HAL_RTC_SetAlarm_IT>
 80025e6:	4603      	mov	r3, r0
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d001      	beq.n	80025f0 <TIMER_IF_StartTimer+0x5c>
  {
    Error_Handler();
 80025ec:	f7ff fac4 	bl	8001b78 <Error_Handler>
  }
  /* USER CODE BEGIN TIMER_IF_StartTimer_Last */

  /* USER CODE END TIMER_IF_StartTimer_Last */
  return ret;
 80025f0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}
 80025f4:	4618      	mov	r0, r3
 80025f6:	3738      	adds	r7, #56	@ 0x38
 80025f8:	46bd      	mov	sp, r7
 80025fa:	bd80      	pop	{r7, pc}
 80025fc:	200003f0 	.word	0x200003f0
 8002600:	200003a0 	.word	0x200003a0

08002604 <TIMER_IF_StopTimer>:

UTIL_TIMER_Status_t TIMER_IF_StopTimer(void)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b082      	sub	sp, #8
 8002608:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 800260a:	2300      	movs	r3, #0
 800260c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_StopTimer */

  /* USER CODE END TIMER_IF_StopTimer */
  /* Clear RTC Alarm Flag */
  __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 800260e:	4b08      	ldr	r3, [pc, #32]	@ (8002630 <TIMER_IF_StopTimer+0x2c>)
 8002610:	2201      	movs	r2, #1
 8002612:	65da      	str	r2, [r3, #92]	@ 0x5c
  /* Disable the Alarm A interrupt */
  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8002614:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002618:	4806      	ldr	r0, [pc, #24]	@ (8002634 <TIMER_IF_StopTimer+0x30>)
 800261a:	f004 fd7b 	bl	8007114 <HAL_RTC_DeactivateAlarm>
  /*overload RTC feature enable*/
  hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 800261e:	4b05      	ldr	r3, [pc, #20]	@ (8002634 <TIMER_IF_StopTimer+0x30>)
 8002620:	f04f 32ff 	mov.w	r2, #4294967295
 8002624:	631a      	str	r2, [r3, #48]	@ 0x30
  /* USER CODE BEGIN TIMER_IF_StopTimer_Last */

  /* USER CODE END TIMER_IF_StopTimer_Last */
  return ret;
 8002626:	79fb      	ldrb	r3, [r7, #7]
}
 8002628:	4618      	mov	r0, r3
 800262a:	3708      	adds	r7, #8
 800262c:	46bd      	mov	sp, r7
 800262e:	bd80      	pop	{r7, pc}
 8002630:	40002800 	.word	0x40002800
 8002634:	200003a0 	.word	0x200003a0

08002638 <TIMER_IF_SetTimerContext>:

uint32_t TIMER_IF_SetTimerContext(void)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	af00      	add	r7, sp, #0
  /*store time context*/
  RtcTimerContext = GetTimerTicks();
 800263c:	f000 f98e 	bl	800295c <GetTimerTicks>
 8002640:	4603      	mov	r3, r0
 8002642:	4a03      	ldr	r2, [pc, #12]	@ (8002650 <TIMER_IF_SetTimerContext+0x18>)
 8002644:	6013      	str	r3, [r2, #0]

  /* USER CODE END TIMER_IF_SetTimerContext */

  TIMER_IF_DBG_PRINTF("TIMER_IF_SetTimerContext=%d\n\r", RtcTimerContext);
  /*return time context*/
  return RtcTimerContext;
 8002646:	4b02      	ldr	r3, [pc, #8]	@ (8002650 <TIMER_IF_SetTimerContext+0x18>)
 8002648:	681b      	ldr	r3, [r3, #0]
}
 800264a:	4618      	mov	r0, r3
 800264c:	bd80      	pop	{r7, pc}
 800264e:	bf00      	nop
 8002650:	200003f0 	.word	0x200003f0

08002654 <TIMER_IF_GetTimerContext>:

uint32_t TIMER_IF_GetTimerContext(void)
{
 8002654:	b480      	push	{r7}
 8002656:	af00      	add	r7, sp, #0

  /* USER CODE END TIMER_IF_GetTimerContext */

  TIMER_IF_DBG_PRINTF("TIMER_IF_GetTimerContext=%d\n\r", RtcTimerContext);
  /*return time context*/
  return RtcTimerContext;
 8002658:	4b02      	ldr	r3, [pc, #8]	@ (8002664 <TIMER_IF_GetTimerContext+0x10>)
 800265a:	681b      	ldr	r3, [r3, #0]
}
 800265c:	4618      	mov	r0, r3
 800265e:	46bd      	mov	sp, r7
 8002660:	bc80      	pop	{r7}
 8002662:	4770      	bx	lr
 8002664:	200003f0 	.word	0x200003f0

08002668 <TIMER_IF_GetTimerElapsedTime>:

uint32_t TIMER_IF_GetTimerElapsedTime(void)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b082      	sub	sp, #8
 800266c:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 800266e:	2300      	movs	r3, #0
 8002670:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime */
  ret = ((uint32_t)(GetTimerTicks() - RtcTimerContext));
 8002672:	f000 f973 	bl	800295c <GetTimerTicks>
 8002676:	4602      	mov	r2, r0
 8002678:	4b04      	ldr	r3, [pc, #16]	@ (800268c <TIMER_IF_GetTimerElapsedTime+0x24>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	1ad3      	subs	r3, r2, r3
 800267e:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime_Last */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime_Last */
  return ret;
 8002680:	687b      	ldr	r3, [r7, #4]
}
 8002682:	4618      	mov	r0, r3
 8002684:	3708      	adds	r7, #8
 8002686:	46bd      	mov	sp, r7
 8002688:	bd80      	pop	{r7, pc}
 800268a:	bf00      	nop
 800268c:	200003f0 	.word	0x200003f0

08002690 <TIMER_IF_GetTimerValue>:

uint32_t TIMER_IF_GetTimerValue(void)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b082      	sub	sp, #8
 8002694:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8002696:	2300      	movs	r3, #0
 8002698:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerValue */

  /* USER CODE END TIMER_IF_GetTimerValue */
  if (RTC_Initialized == true)
 800269a:	4b06      	ldr	r3, [pc, #24]	@ (80026b4 <TIMER_IF_GetTimerValue+0x24>)
 800269c:	781b      	ldrb	r3, [r3, #0]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d002      	beq.n	80026a8 <TIMER_IF_GetTimerValue+0x18>
  {
    ret = GetTimerTicks();
 80026a2:	f000 f95b 	bl	800295c <GetTimerTicks>
 80026a6:	6078      	str	r0, [r7, #4]
  }
  /* USER CODE BEGIN TIMER_IF_GetTimerValue_Last */

  /* USER CODE END TIMER_IF_GetTimerValue_Last */
  return ret;
 80026a8:	687b      	ldr	r3, [r7, #4]
}
 80026aa:	4618      	mov	r0, r3
 80026ac:	3708      	adds	r7, #8
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bd80      	pop	{r7, pc}
 80026b2:	bf00      	nop
 80026b4:	200003ec 	.word	0x200003ec

080026b8 <TIMER_IF_GetMinimumTimeout>:

uint32_t TIMER_IF_GetMinimumTimeout(void)
{
 80026b8:	b480      	push	{r7}
 80026ba:	b083      	sub	sp, #12
 80026bc:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 80026be:	2300      	movs	r3, #0
 80026c0:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout */

  /* USER CODE END TIMER_IF_GetMinimumTimeout */
  ret = (MIN_ALARM_DELAY);
 80026c2:	2303      	movs	r3, #3
 80026c4:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout_Last */

  /* USER CODE END TIMER_IF_GetMinimumTimeout_Last */
  return ret;
 80026c6:	687b      	ldr	r3, [r7, #4]
}
 80026c8:	4618      	mov	r0, r3
 80026ca:	370c      	adds	r7, #12
 80026cc:	46bd      	mov	sp, r7
 80026ce:	bc80      	pop	{r7}
 80026d0:	4770      	bx	lr

080026d2 <TIMER_IF_Convert_ms2Tick>:

uint32_t TIMER_IF_Convert_ms2Tick(uint32_t timeMilliSec)
{
 80026d2:	b5b0      	push	{r4, r5, r7, lr}
 80026d4:	b084      	sub	sp, #16
 80026d6:	af00      	add	r7, sp, #0
 80026d8:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 80026da:	2100      	movs	r1, #0
 80026dc:	60f9      	str	r1, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick */

  /* USER CODE END TIMER_IF_Convert_ms2Tick */
  ret = ((uint32_t)((((uint64_t) timeMilliSec) << RTC_N_PREDIV_S) / 1000));
 80026de:	6879      	ldr	r1, [r7, #4]
 80026e0:	2000      	movs	r0, #0
 80026e2:	460a      	mov	r2, r1
 80026e4:	4603      	mov	r3, r0
 80026e6:	0d95      	lsrs	r5, r2, #22
 80026e8:	0294      	lsls	r4, r2, #10
 80026ea:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80026ee:	f04f 0300 	mov.w	r3, #0
 80026f2:	4620      	mov	r0, r4
 80026f4:	4629      	mov	r1, r5
 80026f6:	f7fe fcd3 	bl	80010a0 <__aeabi_uldivmod>
 80026fa:	4602      	mov	r2, r0
 80026fc:	460b      	mov	r3, r1
 80026fe:	4613      	mov	r3, r2
 8002700:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick_Last */

  /* USER CODE END TIMER_IF_Convert_ms2Tick_Last */
  return ret;
 8002702:	68fb      	ldr	r3, [r7, #12]
}
 8002704:	4618      	mov	r0, r3
 8002706:	3710      	adds	r7, #16
 8002708:	46bd      	mov	sp, r7
 800270a:	bdb0      	pop	{r4, r5, r7, pc}

0800270c <TIMER_IF_Convert_Tick2ms>:

uint32_t TIMER_IF_Convert_Tick2ms(uint32_t tick)
{
 800270c:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002710:	b085      	sub	sp, #20
 8002712:	af00      	add	r7, sp, #0
 8002714:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 8002716:	2100      	movs	r1, #0
 8002718:	60f9      	str	r1, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms */

  /* USER CODE END TIMER_IF_Convert_Tick2ms */
  ret = ((uint32_t)((((uint64_t)(tick)) * 1000) >> RTC_N_PREDIV_S));
 800271a:	6879      	ldr	r1, [r7, #4]
 800271c:	2000      	movs	r0, #0
 800271e:	460c      	mov	r4, r1
 8002720:	4605      	mov	r5, r0
 8002722:	4620      	mov	r0, r4
 8002724:	4629      	mov	r1, r5
 8002726:	f04f 0a00 	mov.w	sl, #0
 800272a:	f04f 0b00 	mov.w	fp, #0
 800272e:	ea4f 1b41 	mov.w	fp, r1, lsl #5
 8002732:	ea4b 6bd0 	orr.w	fp, fp, r0, lsr #27
 8002736:	ea4f 1a40 	mov.w	sl, r0, lsl #5
 800273a:	4650      	mov	r0, sl
 800273c:	4659      	mov	r1, fp
 800273e:	1b02      	subs	r2, r0, r4
 8002740:	eb61 0305 	sbc.w	r3, r1, r5
 8002744:	f04f 0000 	mov.w	r0, #0
 8002748:	f04f 0100 	mov.w	r1, #0
 800274c:	0099      	lsls	r1, r3, #2
 800274e:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8002752:	0090      	lsls	r0, r2, #2
 8002754:	4602      	mov	r2, r0
 8002756:	460b      	mov	r3, r1
 8002758:	eb12 0804 	adds.w	r8, r2, r4
 800275c:	eb43 0905 	adc.w	r9, r3, r5
 8002760:	f04f 0200 	mov.w	r2, #0
 8002764:	f04f 0300 	mov.w	r3, #0
 8002768:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800276c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002770:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002774:	4690      	mov	r8, r2
 8002776:	4699      	mov	r9, r3
 8002778:	4640      	mov	r0, r8
 800277a:	4649      	mov	r1, r9
 800277c:	f04f 0200 	mov.w	r2, #0
 8002780:	f04f 0300 	mov.w	r3, #0
 8002784:	0a82      	lsrs	r2, r0, #10
 8002786:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 800278a:	0a8b      	lsrs	r3, r1, #10
 800278c:	4613      	mov	r3, r2
 800278e:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms_Last */

  /* USER CODE END TIMER_IF_Convert_Tick2ms_Last */
  return ret;
 8002790:	68fb      	ldr	r3, [r7, #12]
}
 8002792:	4618      	mov	r0, r3
 8002794:	3714      	adds	r7, #20
 8002796:	46bd      	mov	sp, r7
 8002798:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800279c:	4770      	bx	lr

0800279e <TIMER_IF_DelayMs>:

void TIMER_IF_DelayMs(uint32_t delay)
{
 800279e:	b580      	push	{r7, lr}
 80027a0:	b084      	sub	sp, #16
 80027a2:	af00      	add	r7, sp, #0
 80027a4:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_DelayMs */

  /* USER CODE END TIMER_IF_DelayMs */
  uint32_t delayTicks = TIMER_IF_Convert_ms2Tick(delay);
 80027a6:	6878      	ldr	r0, [r7, #4]
 80027a8:	f7ff ff93 	bl	80026d2 <TIMER_IF_Convert_ms2Tick>
 80027ac:	60f8      	str	r0, [r7, #12]
  uint32_t timeout = GetTimerTicks();
 80027ae:	f000 f8d5 	bl	800295c <GetTimerTicks>
 80027b2:	60b8      	str	r0, [r7, #8]

  /* Wait delay ms */
  while (((GetTimerTicks() - timeout)) < delayTicks)
 80027b4:	e000      	b.n	80027b8 <TIMER_IF_DelayMs+0x1a>
  {
    __NOP();
 80027b6:	bf00      	nop
  while (((GetTimerTicks() - timeout)) < delayTicks)
 80027b8:	f000 f8d0 	bl	800295c <GetTimerTicks>
 80027bc:	4602      	mov	r2, r0
 80027be:	68bb      	ldr	r3, [r7, #8]
 80027c0:	1ad3      	subs	r3, r2, r3
 80027c2:	68fa      	ldr	r2, [r7, #12]
 80027c4:	429a      	cmp	r2, r3
 80027c6:	d8f6      	bhi.n	80027b6 <TIMER_IF_DelayMs+0x18>
  }
  /* USER CODE BEGIN TIMER_IF_DelayMs_Last */

  /* USER CODE END TIMER_IF_DelayMs_Last */
}
 80027c8:	bf00      	nop
 80027ca:	bf00      	nop
 80027cc:	3710      	adds	r7, #16
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bd80      	pop	{r7, pc}

080027d2 <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 80027d2:	b580      	push	{r7, lr}
 80027d4:	b082      	sub	sp, #8
 80027d6:	af00      	add	r7, sp, #0
 80027d8:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_RTC_AlarmAEventCallback */

  /* USER CODE END HAL_RTC_AlarmAEventCallback */
  UTIL_TIMER_IRQ_MAP_PROCESS();
 80027da:	f019 f80f 	bl	801b7fc <UTIL_TIMER_IRQ_Handler>
  /* USER CODE BEGIN HAL_RTC_AlarmAEventCallback_Last */

  /* USER CODE END HAL_RTC_AlarmAEventCallback_Last */
}
 80027de:	bf00      	nop
 80027e0:	3708      	adds	r7, #8
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd80      	pop	{r7, pc}

080027e6 <HAL_RTCEx_SSRUEventCallback>:

void HAL_RTCEx_SSRUEventCallback(RTC_HandleTypeDef *hrtc)
{
 80027e6:	b580      	push	{r7, lr}
 80027e8:	b084      	sub	sp, #16
 80027ea:	af00      	add	r7, sp, #0
 80027ec:	6078      	str	r0, [r7, #4]

  /* USER CODE END HAL_RTCEx_SSRUEventCallback */
  /*called every 48 days with 1024 ticks per seconds*/
  TIMER_IF_DBG_PRINTF(">>Handler SSRUnderflow at %d\n\r", GetTimerTicks());
  /*Increment MSBticks*/
  uint32_t MSB_ticks = TIMER_IF_BkUp_Read_MSBticks();
 80027ee:	f000 f8a5 	bl	800293c <TIMER_IF_BkUp_Read_MSBticks>
 80027f2:	60f8      	str	r0, [r7, #12]
  TIMER_IF_BkUp_Write_MSBticks(MSB_ticks + 1);
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	3301      	adds	r3, #1
 80027f8:	4618      	mov	r0, r3
 80027fa:	f000 f88f 	bl	800291c <TIMER_IF_BkUp_Write_MSBticks>
  /* USER CODE BEGIN HAL_RTCEx_SSRUEventCallback_Last */

  /* USER CODE END HAL_RTCEx_SSRUEventCallback_Last */
}
 80027fe:	bf00      	nop
 8002800:	3710      	adds	r7, #16
 8002802:	46bd      	mov	sp, r7
 8002804:	bd80      	pop	{r7, pc}

08002806 <TIMER_IF_GetTime>:

uint32_t TIMER_IF_GetTime(uint16_t *mSeconds)
{
 8002806:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800280a:	b08c      	sub	sp, #48	@ 0x30
 800280c:	af00      	add	r7, sp, #0
 800280e:	6178      	str	r0, [r7, #20]
  uint32_t seconds = 0;
 8002810:	2300      	movs	r3, #0
 8002812:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* USER CODE BEGIN TIMER_IF_GetTime */

  /* USER CODE END TIMER_IF_GetTime */
  uint64_t ticks;
  uint32_t timerValueLsb = GetTimerTicks();
 8002814:	f000 f8a2 	bl	800295c <GetTimerTicks>
 8002818:	62b8      	str	r0, [r7, #40]	@ 0x28
  uint32_t timerValueMSB = TIMER_IF_BkUp_Read_MSBticks();
 800281a:	f000 f88f 	bl	800293c <TIMER_IF_BkUp_Read_MSBticks>
 800281e:	6278      	str	r0, [r7, #36]	@ 0x24

  ticks = (((uint64_t) timerValueMSB) << 32) + timerValueLsb;
 8002820:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002822:	2200      	movs	r2, #0
 8002824:	60bb      	str	r3, [r7, #8]
 8002826:	60fa      	str	r2, [r7, #12]
 8002828:	f04f 0200 	mov.w	r2, #0
 800282c:	f04f 0300 	mov.w	r3, #0
 8002830:	68b9      	ldr	r1, [r7, #8]
 8002832:	000b      	movs	r3, r1
 8002834:	2200      	movs	r2, #0
 8002836:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002838:	2000      	movs	r0, #0
 800283a:	460c      	mov	r4, r1
 800283c:	4605      	mov	r5, r0
 800283e:	eb12 0804 	adds.w	r8, r2, r4
 8002842:	eb43 0905 	adc.w	r9, r3, r5
 8002846:	e9c7 8906 	strd	r8, r9, [r7, #24]

  seconds = (uint32_t)(ticks >> RTC_N_PREDIV_S);
 800284a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800284e:	f04f 0200 	mov.w	r2, #0
 8002852:	f04f 0300 	mov.w	r3, #0
 8002856:	0a82      	lsrs	r2, r0, #10
 8002858:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 800285c:	0a8b      	lsrs	r3, r1, #10
 800285e:	4613      	mov	r3, r2
 8002860:	62fb      	str	r3, [r7, #44]	@ 0x2c

  ticks = (uint32_t) ticks & RTC_PREDIV_S;
 8002862:	69bb      	ldr	r3, [r7, #24]
 8002864:	2200      	movs	r2, #0
 8002866:	603b      	str	r3, [r7, #0]
 8002868:	607a      	str	r2, [r7, #4]
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	f3c3 0a09 	ubfx	sl, r3, #0, #10
 8002870:	f04f 0b00 	mov.w	fp, #0
 8002874:	e9c7 ab06 	strd	sl, fp, [r7, #24]

  *mSeconds = TIMER_IF_Convert_Tick2ms(ticks);
 8002878:	69bb      	ldr	r3, [r7, #24]
 800287a:	4618      	mov	r0, r3
 800287c:	f7ff ff46 	bl	800270c <TIMER_IF_Convert_Tick2ms>
 8002880:	4603      	mov	r3, r0
 8002882:	b29a      	uxth	r2, r3
 8002884:	697b      	ldr	r3, [r7, #20]
 8002886:	801a      	strh	r2, [r3, #0]

  /* USER CODE BEGIN TIMER_IF_GetTime_Last */

  /* USER CODE END TIMER_IF_GetTime_Last */
  return seconds;
 8002888:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800288a:	4618      	mov	r0, r3
 800288c:	3730      	adds	r7, #48	@ 0x30
 800288e:	46bd      	mov	sp, r7
 8002890:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08002894 <TIMER_IF_BkUp_Write_Seconds>:

void TIMER_IF_BkUp_Write_Seconds(uint32_t Seconds)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b082      	sub	sp, #8
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_Seconds */

  /* USER CODE END TIMER_IF_BkUp_Write_Seconds */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SECONDS, Seconds);
 800289c:	687a      	ldr	r2, [r7, #4]
 800289e:	2100      	movs	r1, #0
 80028a0:	4803      	ldr	r0, [pc, #12]	@ (80028b0 <TIMER_IF_BkUp_Write_Seconds+0x1c>)
 80028a2:	f004 fe07 	bl	80074b4 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_Seconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_Seconds_Last */
}
 80028a6:	bf00      	nop
 80028a8:	3708      	adds	r7, #8
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bd80      	pop	{r7, pc}
 80028ae:	bf00      	nop
 80028b0:	200003a0 	.word	0x200003a0

080028b4 <TIMER_IF_BkUp_Write_SubSeconds>:

void TIMER_IF_BkUp_Write_SubSeconds(uint32_t SubSeconds)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b082      	sub	sp, #8
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_SubSeconds */

  /* USER CODE END TIMER_IF_BkUp_Write_SubSeconds */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SUBSECONDS, SubSeconds);
 80028bc:	687a      	ldr	r2, [r7, #4]
 80028be:	2101      	movs	r1, #1
 80028c0:	4803      	ldr	r0, [pc, #12]	@ (80028d0 <TIMER_IF_BkUp_Write_SubSeconds+0x1c>)
 80028c2:	f004 fdf7 	bl	80074b4 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_SubSeconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_SubSeconds_Last */
}
 80028c6:	bf00      	nop
 80028c8:	3708      	adds	r7, #8
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bd80      	pop	{r7, pc}
 80028ce:	bf00      	nop
 80028d0:	200003a0 	.word	0x200003a0

080028d4 <TIMER_IF_BkUp_Read_Seconds>:

uint32_t TIMER_IF_BkUp_Read_Seconds(void)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b082      	sub	sp, #8
 80028d8:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 80028da:	2300      	movs	r3, #0
 80028dc:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_Seconds */

  /* USER CODE END TIMER_IF_BkUp_Read_Seconds */
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SECONDS);
 80028de:	2100      	movs	r1, #0
 80028e0:	4804      	ldr	r0, [pc, #16]	@ (80028f4 <TIMER_IF_BkUp_Read_Seconds+0x20>)
 80028e2:	f004 fdff 	bl	80074e4 <HAL_RTCEx_BKUPRead>
 80028e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_Seconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_Seconds_Last */
  return ret;
 80028e8:	687b      	ldr	r3, [r7, #4]
}
 80028ea:	4618      	mov	r0, r3
 80028ec:	3708      	adds	r7, #8
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bd80      	pop	{r7, pc}
 80028f2:	bf00      	nop
 80028f4:	200003a0 	.word	0x200003a0

080028f8 <TIMER_IF_BkUp_Read_SubSeconds>:

uint32_t TIMER_IF_BkUp_Read_SubSeconds(void)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b082      	sub	sp, #8
 80028fc:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 80028fe:	2300      	movs	r3, #0
 8002900:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_SubSeconds */

  /* USER CODE END TIMER_IF_BkUp_Read_SubSeconds */
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SUBSECONDS);
 8002902:	2101      	movs	r1, #1
 8002904:	4804      	ldr	r0, [pc, #16]	@ (8002918 <TIMER_IF_BkUp_Read_SubSeconds+0x20>)
 8002906:	f004 fded 	bl	80074e4 <HAL_RTCEx_BKUPRead>
 800290a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_SubSeconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_SubSeconds_Last */
  return ret;
 800290c:	687b      	ldr	r3, [r7, #4]
}
 800290e:	4618      	mov	r0, r3
 8002910:	3708      	adds	r7, #8
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}
 8002916:	bf00      	nop
 8002918:	200003a0 	.word	0x200003a0

0800291c <TIMER_IF_BkUp_Write_MSBticks>:

/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/
static void TIMER_IF_BkUp_Write_MSBticks(uint32_t MSBticks)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b082      	sub	sp, #8
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_MSBticks */

  /* USER CODE END TIMER_IF_BkUp_Write_MSBticks */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_MSBTICKS, MSBticks);
 8002924:	687a      	ldr	r2, [r7, #4]
 8002926:	2102      	movs	r1, #2
 8002928:	4803      	ldr	r0, [pc, #12]	@ (8002938 <TIMER_IF_BkUp_Write_MSBticks+0x1c>)
 800292a:	f004 fdc3 	bl	80074b4 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_MSBticks_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_MSBticks_Last */
}
 800292e:	bf00      	nop
 8002930:	3708      	adds	r7, #8
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}
 8002936:	bf00      	nop
 8002938:	200003a0 	.word	0x200003a0

0800293c <TIMER_IF_BkUp_Read_MSBticks>:

static uint32_t TIMER_IF_BkUp_Read_MSBticks(void)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b082      	sub	sp, #8
 8002940:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_MSBticks */

  /* USER CODE END TIMER_IF_BkUp_Read_MSBticks */
  uint32_t MSBticks;
  MSBticks = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_MSBTICKS);
 8002942:	2102      	movs	r1, #2
 8002944:	4804      	ldr	r0, [pc, #16]	@ (8002958 <TIMER_IF_BkUp_Read_MSBticks+0x1c>)
 8002946:	f004 fdcd 	bl	80074e4 <HAL_RTCEx_BKUPRead>
 800294a:	6078      	str	r0, [r7, #4]
  return MSBticks;
 800294c:	687b      	ldr	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_MSBticks_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_MSBticks_Last */
}
 800294e:	4618      	mov	r0, r3
 8002950:	3708      	adds	r7, #8
 8002952:	46bd      	mov	sp, r7
 8002954:	bd80      	pop	{r7, pc}
 8002956:	bf00      	nop
 8002958:	200003a0 	.word	0x200003a0

0800295c <GetTimerTicks>:

static inline uint32_t GetTimerTicks(void)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b082      	sub	sp, #8
 8002960:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GetTimerTicks */

  /* USER CODE END GetTimerTicks */
  uint32_t ssr = LL_RTC_TIME_GetSubSecond(RTC);
 8002962:	480b      	ldr	r0, [pc, #44]	@ (8002990 <GetTimerTicks+0x34>)
 8002964:	f7ff fdd8 	bl	8002518 <LL_RTC_TIME_GetSubSecond>
 8002968:	6078      	str	r0, [r7, #4]
  /* read twice to make sure value it valid*/
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 800296a:	e003      	b.n	8002974 <GetTimerTicks+0x18>
  {
    ssr = LL_RTC_TIME_GetSubSecond(RTC);
 800296c:	4808      	ldr	r0, [pc, #32]	@ (8002990 <GetTimerTicks+0x34>)
 800296e:	f7ff fdd3 	bl	8002518 <LL_RTC_TIME_GetSubSecond>
 8002972:	6078      	str	r0, [r7, #4]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8002974:	4806      	ldr	r0, [pc, #24]	@ (8002990 <GetTimerTicks+0x34>)
 8002976:	f7ff fdcf 	bl	8002518 <LL_RTC_TIME_GetSubSecond>
 800297a:	4602      	mov	r2, r0
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	4293      	cmp	r3, r2
 8002980:	d1f4      	bne.n	800296c <GetTimerTicks+0x10>
  }
  return UINT32_MAX - ssr;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	43db      	mvns	r3, r3
  /* USER CODE BEGIN GetTimerTicks_Last */

  /* USER CODE END GetTimerTicks_Last */
}
 8002986:	4618      	mov	r0, r3
 8002988:	3708      	adds	r7, #8
 800298a:	46bd      	mov	sp, r7
 800298c:	bd80      	pop	{r7, pc}
 800298e:	bf00      	nop
 8002990:	40002800 	.word	0x40002800

08002994 <LL_AHB2_GRP1_EnableClock>:
{
 8002994:	b480      	push	{r7}
 8002996:	b085      	sub	sp, #20
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800299c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80029a0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80029a2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	4313      	orrs	r3, r2
 80029aa:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80029ac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80029b0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	4013      	ands	r3, r2
 80029b6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80029b8:	68fb      	ldr	r3, [r7, #12]
}
 80029ba:	bf00      	nop
 80029bc:	3714      	adds	r7, #20
 80029be:	46bd      	mov	sp, r7
 80029c0:	bc80      	pop	{r7}
 80029c2:	4770      	bx	lr

080029c4 <LL_APB1_GRP1_EnableClock>:
{
 80029c4:	b480      	push	{r7}
 80029c6:	b085      	sub	sp, #20
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 80029cc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80029d0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80029d2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	4313      	orrs	r3, r2
 80029da:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80029dc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80029e0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	4013      	ands	r3, r2
 80029e6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80029e8:	68fb      	ldr	r3, [r7, #12]
}
 80029ea:	bf00      	nop
 80029ec:	3714      	adds	r7, #20
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bc80      	pop	{r7}
 80029f2:	4770      	bx	lr

080029f4 <LL_APB1_GRP1_DisableClock>:
{
 80029f4:	b480      	push	{r7}
 80029f6:	b083      	sub	sp, #12
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 80029fc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a00:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	43db      	mvns	r3, r3
 8002a06:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002a0a:	4013      	ands	r3, r2
 8002a0c:	658b      	str	r3, [r1, #88]	@ 0x58
}
 8002a0e:	bf00      	nop
 8002a10:	370c      	adds	r7, #12
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bc80      	pop	{r7}
 8002a16:	4770      	bx	lr

08002a18 <LL_APB2_GRP1_EnableClock>:
{
 8002a18:	b480      	push	{r7}
 8002a1a:	b085      	sub	sp, #20
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8002a20:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a24:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002a26:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	4313      	orrs	r3, r2
 8002a2e:	660b      	str	r3, [r1, #96]	@ 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002a30:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a34:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	4013      	ands	r3, r2
 8002a3a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
}
 8002a3e:	bf00      	nop
 8002a40:	3714      	adds	r7, #20
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bc80      	pop	{r7}
 8002a46:	4770      	bx	lr

08002a48 <LL_APB2_GRP1_DisableClock>:
{
 8002a48:	b480      	push	{r7}
 8002a4a:	b083      	sub	sp, #12
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 8002a50:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a54:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	43db      	mvns	r3, r3
 8002a5a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002a5e:	4013      	ands	r3, r2
 8002a60:	660b      	str	r3, [r1, #96]	@ 0x60
}
 8002a62:	bf00      	nop
 8002a64:	370c      	adds	r7, #12
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bc80      	pop	{r7}
 8002a6a:	4770      	bx	lr

08002a6c <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002a70:	4b22      	ldr	r3, [pc, #136]	@ (8002afc <MX_USART1_UART_Init+0x90>)
 8002a72:	4a23      	ldr	r2, [pc, #140]	@ (8002b00 <MX_USART1_UART_Init+0x94>)
 8002a74:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002a76:	4b21      	ldr	r3, [pc, #132]	@ (8002afc <MX_USART1_UART_Init+0x90>)
 8002a78:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002a7c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002a7e:	4b1f      	ldr	r3, [pc, #124]	@ (8002afc <MX_USART1_UART_Init+0x90>)
 8002a80:	2200      	movs	r2, #0
 8002a82:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002a84:	4b1d      	ldr	r3, [pc, #116]	@ (8002afc <MX_USART1_UART_Init+0x90>)
 8002a86:	2200      	movs	r2, #0
 8002a88:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002a8a:	4b1c      	ldr	r3, [pc, #112]	@ (8002afc <MX_USART1_UART_Init+0x90>)
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002a90:	4b1a      	ldr	r3, [pc, #104]	@ (8002afc <MX_USART1_UART_Init+0x90>)
 8002a92:	220c      	movs	r2, #12
 8002a94:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a96:	4b19      	ldr	r3, [pc, #100]	@ (8002afc <MX_USART1_UART_Init+0x90>)
 8002a98:	2200      	movs	r2, #0
 8002a9a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002a9c:	4b17      	ldr	r3, [pc, #92]	@ (8002afc <MX_USART1_UART_Init+0x90>)
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002aa2:	4b16      	ldr	r3, [pc, #88]	@ (8002afc <MX_USART1_UART_Init+0x90>)
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002aa8:	4b14      	ldr	r3, [pc, #80]	@ (8002afc <MX_USART1_UART_Init+0x90>)
 8002aaa:	2200      	movs	r2, #0
 8002aac:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002aae:	4b13      	ldr	r3, [pc, #76]	@ (8002afc <MX_USART1_UART_Init+0x90>)
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002ab4:	4811      	ldr	r0, [pc, #68]	@ (8002afc <MX_USART1_UART_Init+0x90>)
 8002ab6:	f005 f9f8 	bl	8007eaa <HAL_UART_Init>
 8002aba:	4603      	mov	r3, r0
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d001      	beq.n	8002ac4 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8002ac0:	f7ff f85a 	bl	8001b78 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002ac4:	2100      	movs	r1, #0
 8002ac6:	480d      	ldr	r0, [pc, #52]	@ (8002afc <MX_USART1_UART_Init+0x90>)
 8002ac8:	f007 faa7 	bl	800a01a <HAL_UARTEx_SetTxFifoThreshold>
 8002acc:	4603      	mov	r3, r0
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d001      	beq.n	8002ad6 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8002ad2:	f7ff f851 	bl	8001b78 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002ad6:	2100      	movs	r1, #0
 8002ad8:	4808      	ldr	r0, [pc, #32]	@ (8002afc <MX_USART1_UART_Init+0x90>)
 8002ada:	f007 fadc 	bl	800a096 <HAL_UARTEx_SetRxFifoThreshold>
 8002ade:	4603      	mov	r3, r0
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d001      	beq.n	8002ae8 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002ae4:	f7ff f848 	bl	8001b78 <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart1) != HAL_OK)
 8002ae8:	4804      	ldr	r0, [pc, #16]	@ (8002afc <MX_USART1_UART_Init+0x90>)
 8002aea:	f007 fa23 	bl	8009f34 <HAL_UARTEx_EnableFifoMode>
 8002aee:	4603      	mov	r3, r0
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d001      	beq.n	8002af8 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002af4:	f7ff f840 	bl	8001b78 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002af8:	bf00      	nop
 8002afa:	bd80      	pop	{r7, pc}
 8002afc:	200003f4 	.word	0x200003f4
 8002b00:	40013800 	.word	0x40013800

08002b04 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002b08:	4b22      	ldr	r3, [pc, #136]	@ (8002b94 <MX_USART2_UART_Init+0x90>)
 8002b0a:	4a23      	ldr	r2, [pc, #140]	@ (8002b98 <MX_USART2_UART_Init+0x94>)
 8002b0c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8002b0e:	4b21      	ldr	r3, [pc, #132]	@ (8002b94 <MX_USART2_UART_Init+0x90>)
 8002b10:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8002b14:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002b16:	4b1f      	ldr	r3, [pc, #124]	@ (8002b94 <MX_USART2_UART_Init+0x90>)
 8002b18:	2200      	movs	r2, #0
 8002b1a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002b1c:	4b1d      	ldr	r3, [pc, #116]	@ (8002b94 <MX_USART2_UART_Init+0x90>)
 8002b1e:	2200      	movs	r2, #0
 8002b20:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002b22:	4b1c      	ldr	r3, [pc, #112]	@ (8002b94 <MX_USART2_UART_Init+0x90>)
 8002b24:	2200      	movs	r2, #0
 8002b26:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002b28:	4b1a      	ldr	r3, [pc, #104]	@ (8002b94 <MX_USART2_UART_Init+0x90>)
 8002b2a:	220c      	movs	r2, #12
 8002b2c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002b2e:	4b19      	ldr	r3, [pc, #100]	@ (8002b94 <MX_USART2_UART_Init+0x90>)
 8002b30:	2200      	movs	r2, #0
 8002b32:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002b34:	4b17      	ldr	r3, [pc, #92]	@ (8002b94 <MX_USART2_UART_Init+0x90>)
 8002b36:	2200      	movs	r2, #0
 8002b38:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002b3a:	4b16      	ldr	r3, [pc, #88]	@ (8002b94 <MX_USART2_UART_Init+0x90>)
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002b40:	4b14      	ldr	r3, [pc, #80]	@ (8002b94 <MX_USART2_UART_Init+0x90>)
 8002b42:	2200      	movs	r2, #0
 8002b44:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002b46:	4b13      	ldr	r3, [pc, #76]	@ (8002b94 <MX_USART2_UART_Init+0x90>)
 8002b48:	2200      	movs	r2, #0
 8002b4a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002b4c:	4811      	ldr	r0, [pc, #68]	@ (8002b94 <MX_USART2_UART_Init+0x90>)
 8002b4e:	f005 f9ac 	bl	8007eaa <HAL_UART_Init>
 8002b52:	4603      	mov	r3, r0
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d001      	beq.n	8002b5c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8002b58:	f7ff f80e 	bl	8001b78 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002b5c:	2100      	movs	r1, #0
 8002b5e:	480d      	ldr	r0, [pc, #52]	@ (8002b94 <MX_USART2_UART_Init+0x90>)
 8002b60:	f007 fa5b 	bl	800a01a <HAL_UARTEx_SetTxFifoThreshold>
 8002b64:	4603      	mov	r3, r0
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d001      	beq.n	8002b6e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8002b6a:	f7ff f805 	bl	8001b78 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002b6e:	2100      	movs	r1, #0
 8002b70:	4808      	ldr	r0, [pc, #32]	@ (8002b94 <MX_USART2_UART_Init+0x90>)
 8002b72:	f007 fa90 	bl	800a096 <HAL_UARTEx_SetRxFifoThreshold>
 8002b76:	4603      	mov	r3, r0
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d001      	beq.n	8002b80 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8002b7c:	f7fe fffc 	bl	8001b78 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8002b80:	4804      	ldr	r0, [pc, #16]	@ (8002b94 <MX_USART2_UART_Init+0x90>)
 8002b82:	f007 fa12 	bl	8009faa <HAL_UARTEx_DisableFifoMode>
 8002b86:	4603      	mov	r3, r0
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d001      	beq.n	8002b90 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8002b8c:	f7fe fff4 	bl	8001b78 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002b90:	bf00      	nop
 8002b92:	bd80      	pop	{r7, pc}
 8002b94:	20000484 	.word	0x20000484
 8002b98:	40004400 	.word	0x40004400

08002b9c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b096      	sub	sp, #88	@ 0x58
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ba4:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8002ba8:	2200      	movs	r2, #0
 8002baa:	601a      	str	r2, [r3, #0]
 8002bac:	605a      	str	r2, [r3, #4]
 8002bae:	609a      	str	r2, [r3, #8]
 8002bb0:	60da      	str	r2, [r3, #12]
 8002bb2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002bb4:	f107 030c 	add.w	r3, r7, #12
 8002bb8:	2238      	movs	r2, #56	@ 0x38
 8002bba:	2100      	movs	r1, #0
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	f019 fff7 	bl	801cbb0 <memset>
  if(uartHandle->Instance==USART1)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4a49      	ldr	r2, [pc, #292]	@ (8002cec <HAL_UART_MspInit+0x150>)
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d157      	bne.n	8002c7c <HAL_UART_MspInit+0xe0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002bcc:	2301      	movs	r3, #1
 8002bce:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002bd0:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 8002bd4:	613b      	str	r3, [r7, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002bd6:	f107 030c 	add.w	r3, r7, #12
 8002bda:	4618      	mov	r0, r3
 8002bdc:	f003 fffa 	bl	8006bd4 <HAL_RCCEx_PeriphCLKConfig>
 8002be0:	4603      	mov	r3, r0
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d001      	beq.n	8002bea <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002be6:	f7fe ffc7 	bl	8001b78 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002bea:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8002bee:	f7ff ff13 	bl	8002a18 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bf2:	2002      	movs	r0, #2
 8002bf4:	f7ff fece 	bl	8002994 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = USARTx_RX_Pin|USARTx_TX_Pin;
 8002bf8:	23c0      	movs	r3, #192	@ 0xc0
 8002bfa:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bfc:	2302      	movs	r3, #2
 8002bfe:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c00:	2300      	movs	r3, #0
 8002c02:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c04:	2303      	movs	r3, #3
 8002c06:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002c08:	2307      	movs	r3, #7
 8002c0a:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c0c:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8002c10:	4619      	mov	r1, r3
 8002c12:	4837      	ldr	r0, [pc, #220]	@ (8002cf0 <HAL_UART_MspInit+0x154>)
 8002c14:	f002 faf6 	bl	8005204 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel1;
 8002c18:	4b36      	ldr	r3, [pc, #216]	@ (8002cf4 <HAL_UART_MspInit+0x158>)
 8002c1a:	4a37      	ldr	r2, [pc, #220]	@ (8002cf8 <HAL_UART_MspInit+0x15c>)
 8002c1c:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8002c1e:	4b35      	ldr	r3, [pc, #212]	@ (8002cf4 <HAL_UART_MspInit+0x158>)
 8002c20:	2212      	movs	r2, #18
 8002c22:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002c24:	4b33      	ldr	r3, [pc, #204]	@ (8002cf4 <HAL_UART_MspInit+0x158>)
 8002c26:	2210      	movs	r2, #16
 8002c28:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002c2a:	4b32      	ldr	r3, [pc, #200]	@ (8002cf4 <HAL_UART_MspInit+0x158>)
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002c30:	4b30      	ldr	r3, [pc, #192]	@ (8002cf4 <HAL_UART_MspInit+0x158>)
 8002c32:	2280      	movs	r2, #128	@ 0x80
 8002c34:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002c36:	4b2f      	ldr	r3, [pc, #188]	@ (8002cf4 <HAL_UART_MspInit+0x158>)
 8002c38:	2200      	movs	r2, #0
 8002c3a:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002c3c:	4b2d      	ldr	r3, [pc, #180]	@ (8002cf4 <HAL_UART_MspInit+0x158>)
 8002c3e:	2200      	movs	r2, #0
 8002c40:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002c42:	4b2c      	ldr	r3, [pc, #176]	@ (8002cf4 <HAL_UART_MspInit+0x158>)
 8002c44:	2200      	movs	r2, #0
 8002c46:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002c48:	4b2a      	ldr	r3, [pc, #168]	@ (8002cf4 <HAL_UART_MspInit+0x158>)
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002c4e:	4829      	ldr	r0, [pc, #164]	@ (8002cf4 <HAL_UART_MspInit+0x158>)
 8002c50:	f001 fc8c 	bl	800456c <HAL_DMA_Init>
 8002c54:	4603      	mov	r3, r0
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d001      	beq.n	8002c5e <HAL_UART_MspInit+0xc2>
    {
      Error_Handler();
 8002c5a:	f7fe ff8d 	bl	8001b78 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	4a24      	ldr	r2, [pc, #144]	@ (8002cf4 <HAL_UART_MspInit+0x158>)
 8002c62:	679a      	str	r2, [r3, #120]	@ 0x78
 8002c64:	4a23      	ldr	r2, [pc, #140]	@ (8002cf4 <HAL_UART_MspInit+0x158>)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 2, 0);
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	2102      	movs	r1, #2
 8002c6e:	2024      	movs	r0, #36	@ 0x24
 8002c70:	f001 fc45 	bl	80044fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002c74:	2024      	movs	r0, #36	@ 0x24
 8002c76:	f001 fc5c 	bl	8004532 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002c7a:	e033      	b.n	8002ce4 <HAL_UART_MspInit+0x148>
  else if(uartHandle->Instance==USART2)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4a1e      	ldr	r2, [pc, #120]	@ (8002cfc <HAL_UART_MspInit+0x160>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d12e      	bne.n	8002ce4 <HAL_UART_MspInit+0x148>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002c86:	2302      	movs	r3, #2
 8002c88:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002c8a:	f44f 2340 	mov.w	r3, #786432	@ 0xc0000
 8002c8e:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002c90:	f107 030c 	add.w	r3, r7, #12
 8002c94:	4618      	mov	r0, r3
 8002c96:	f003 ff9d 	bl	8006bd4 <HAL_RCCEx_PeriphCLKConfig>
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d001      	beq.n	8002ca4 <HAL_UART_MspInit+0x108>
      Error_Handler();
 8002ca0:	f7fe ff6a 	bl	8001b78 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002ca4:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8002ca8:	f7ff fe8c 	bl	80029c4 <LL_APB1_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cac:	2001      	movs	r0, #1
 8002cae:	f7ff fe71 	bl	8002994 <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_2;
 8002cb2:	230c      	movs	r3, #12
 8002cb4:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cb6:	2302      	movs	r3, #2
 8002cb8:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cba:	2300      	movs	r3, #0
 8002cbc:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002cc2:	2307      	movs	r3, #7
 8002cc4:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cc6:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8002cca:	4619      	mov	r1, r3
 8002ccc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002cd0:	f002 fa98 	bl	8005204 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	2100      	movs	r1, #0
 8002cd8:	2025      	movs	r0, #37	@ 0x25
 8002cda:	f001 fc10 	bl	80044fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002cde:	2025      	movs	r0, #37	@ 0x25
 8002ce0:	f001 fc27 	bl	8004532 <HAL_NVIC_EnableIRQ>
}
 8002ce4:	bf00      	nop
 8002ce6:	3758      	adds	r7, #88	@ 0x58
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bd80      	pop	{r7, pc}
 8002cec:	40013800 	.word	0x40013800
 8002cf0:	48000400 	.word	0x48000400
 8002cf4:	20000514 	.word	0x20000514
 8002cf8:	40020008 	.word	0x40020008
 8002cfc:	40004400 	.word	0x40004400

08002d00 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b082      	sub	sp, #8
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART1)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a14      	ldr	r2, [pc, #80]	@ (8002d60 <HAL_UART_MspDeInit+0x60>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d110      	bne.n	8002d34 <HAL_UART_MspDeInit+0x34>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8002d12:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8002d16:	f7ff fe97 	bl	8002a48 <LL_APB2_GRP1_DisableClock>

    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    HAL_GPIO_DeInit(GPIOB, USARTx_RX_Pin|USARTx_TX_Pin);
 8002d1a:	21c0      	movs	r1, #192	@ 0xc0
 8002d1c:	4811      	ldr	r0, [pc, #68]	@ (8002d64 <HAL_UART_MspDeInit+0x64>)
 8002d1e:	f002 fbd1 	bl	80054c4 <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmatx);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002d26:	4618      	mov	r0, r3
 8002d28:	f001 fcc8 	bl	80046bc <HAL_DMA_DeInit>

    /* USART1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8002d2c:	2024      	movs	r0, #36	@ 0x24
 8002d2e:	f001 fc0e 	bl	800454e <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }
}
 8002d32:	e010      	b.n	8002d56 <HAL_UART_MspDeInit+0x56>
  else if(uartHandle->Instance==USART2)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4a0b      	ldr	r2, [pc, #44]	@ (8002d68 <HAL_UART_MspDeInit+0x68>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d10b      	bne.n	8002d56 <HAL_UART_MspDeInit+0x56>
    __HAL_RCC_USART2_CLK_DISABLE();
 8002d3e:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8002d42:	f7ff fe57 	bl	80029f4 <LL_APB1_GRP1_DisableClock>
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_3|GPIO_PIN_2);
 8002d46:	210c      	movs	r1, #12
 8002d48:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002d4c:	f002 fbba 	bl	80054c4 <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 8002d50:	2025      	movs	r0, #37	@ 0x25
 8002d52:	f001 fbfc 	bl	800454e <HAL_NVIC_DisableIRQ>
}
 8002d56:	bf00      	nop
 8002d58:	3708      	adds	r7, #8
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bd80      	pop	{r7, pc}
 8002d5e:	bf00      	nop
 8002d60:	40013800 	.word	0x40013800
 8002d64:	48000400 	.word	0x48000400
 8002d68:	40004400 	.word	0x40004400

08002d6c <LL_APB2_GRP1_ForceReset>:
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	b083      	sub	sp, #12
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2RSTR, Periphs);
 8002d74:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d78:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002d7a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	4313      	orrs	r3, r2
 8002d82:	640b      	str	r3, [r1, #64]	@ 0x40
}
 8002d84:	bf00      	nop
 8002d86:	370c      	adds	r7, #12
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	bc80      	pop	{r7}
 8002d8c:	4770      	bx	lr

08002d8e <LL_APB2_GRP1_ReleaseReset>:
{
 8002d8e:	b480      	push	{r7}
 8002d90:	b083      	sub	sp, #12
 8002d92:	af00      	add	r7, sp, #0
 8002d94:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2RSTR, Periphs);
 8002d96:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d9a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	43db      	mvns	r3, r3
 8002da0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002da4:	4013      	ands	r3, r2
 8002da6:	640b      	str	r3, [r1, #64]	@ 0x40
}
 8002da8:	bf00      	nop
 8002daa:	370c      	adds	r7, #12
 8002dac:	46bd      	mov	sp, r7
 8002dae:	bc80      	pop	{r7}
 8002db0:	4770      	bx	lr
	...

08002db4 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8002db4:	b480      	push	{r7}
 8002db6:	b083      	sub	sp, #12
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8002dbc:	4b06      	ldr	r3, [pc, #24]	@ (8002dd8 <LL_EXTI_EnableIT_0_31+0x24>)
 8002dbe:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8002dc2:	4905      	ldr	r1, [pc, #20]	@ (8002dd8 <LL_EXTI_EnableIT_0_31+0x24>)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 8002dcc:	bf00      	nop
 8002dce:	370c      	adds	r7, #12
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	bc80      	pop	{r7}
 8002dd4:	4770      	bx	lr
 8002dd6:	bf00      	nop
 8002dd8:	58000800 	.word	0x58000800

08002ddc <vcom_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

UTIL_ADV_TRACE_Status_t vcom_Init(void (*cb)(void *))
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b082      	sub	sp, #8
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vcom_Init_1 */

  /* USER CODE END vcom_Init_1 */
  TxCpltCallback = cb;
 8002de4:	4a07      	ldr	r2, [pc, #28]	@ (8002e04 <vcom_Init+0x28>)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6013      	str	r3, [r2, #0]
  MX_DMA_Init();
 8002dea:	f7fe fc11 	bl	8001610 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8002dee:	f7ff fe3d 	bl	8002a6c <MX_USART1_UART_Init>
  LL_EXTI_EnableIT_0_31(LL_EXTI_LINE_26);
 8002df2:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 8002df6:	f7ff ffdd 	bl	8002db4 <LL_EXTI_EnableIT_0_31>
  return UTIL_ADV_TRACE_OK;
 8002dfa:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Init_2 */

  /* USER CODE END vcom_Init_2 */
}
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	3708      	adds	r7, #8
 8002e00:	46bd      	mov	sp, r7
 8002e02:	bd80      	pop	{r7, pc}
 8002e04:	20000578 	.word	0x20000578

08002e08 <vcom_DeInit>:

UTIL_ADV_TRACE_Status_t vcom_DeInit(void)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN vcom_DeInit_1 */

  /* USER CODE END vcom_DeInit_1 */
  /* ##-1- Reset peripherals ################################################## */
  __HAL_RCC_USART1_FORCE_RESET();
 8002e0c:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8002e10:	f7ff ffac 	bl	8002d6c <LL_APB2_GRP1_ForceReset>
  __HAL_RCC_USART1_RELEASE_RESET();
 8002e14:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8002e18:	f7ff ffb9 	bl	8002d8e <LL_APB2_GRP1_ReleaseReset>

  /* ##-2- MspDeInit ################################################## */
  HAL_UART_MspDeInit(&huart1);
 8002e1c:	4804      	ldr	r0, [pc, #16]	@ (8002e30 <vcom_DeInit+0x28>)
 8002e1e:	f7ff ff6f 	bl	8002d00 <HAL_UART_MspDeInit>

  /* ##-3- Disable the NVIC for DMA ########################################### */
  /* USER CODE BEGIN 1 */
  HAL_NVIC_DisableIRQ(DMA1_Channel5_IRQn);
 8002e22:	200f      	movs	r0, #15
 8002e24:	f001 fb93 	bl	800454e <HAL_NVIC_DisableIRQ>

  return UTIL_ADV_TRACE_OK;
 8002e28:	2300      	movs	r3, #0
  /* USER CODE END 1 */
  /* USER CODE BEGIN vcom_DeInit_2 */

  /* USER CODE END vcom_DeInit_2 */
}
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	bd80      	pop	{r7, pc}
 8002e2e:	bf00      	nop
 8002e30:	200003f4 	.word	0x200003f4

08002e34 <vcom_Trace_DMA>:

  /* USER CODE END vcom_Trace_2 */
}

UTIL_ADV_TRACE_Status_t vcom_Trace_DMA(uint8_t *p_data, uint16_t size)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b082      	sub	sp, #8
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
 8002e3c:	460b      	mov	r3, r1
 8002e3e:	807b      	strh	r3, [r7, #2]
  /* USER CODE BEGIN vcom_Trace_DMA_1 */

  /* USER CODE END vcom_Trace_DMA_1 */
  HAL_UART_Transmit_DMA(&huart1, p_data, size);
 8002e40:	887b      	ldrh	r3, [r7, #2]
 8002e42:	461a      	mov	r2, r3
 8002e44:	6879      	ldr	r1, [r7, #4]
 8002e46:	4804      	ldr	r0, [pc, #16]	@ (8002e58 <vcom_Trace_DMA+0x24>)
 8002e48:	f005 f8d6 	bl	8007ff8 <HAL_UART_Transmit_DMA>
  return UTIL_ADV_TRACE_OK;
 8002e4c:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Trace_DMA_2 */

  /* USER CODE END vcom_Trace_DMA_2 */
}
 8002e4e:	4618      	mov	r0, r3
 8002e50:	3708      	adds	r7, #8
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bd80      	pop	{r7, pc}
 8002e56:	bf00      	nop
 8002e58:	200003f4 	.word	0x200003f4

08002e5c <vcom_ReceiveInit>:

UTIL_ADV_TRACE_Status_t vcom_ReceiveInit(void (*RxCb)(uint8_t *rxChar, uint16_t size, uint8_t error))
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b084      	sub	sp, #16
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]

  /* USER CODE END vcom_ReceiveInit_1 */
  UART_WakeUpTypeDef WakeUpSelection;

  /*record call back*/
  RxCpltCallback = RxCb;
 8002e64:	4a19      	ldr	r2, [pc, #100]	@ (8002ecc <vcom_ReceiveInit+0x70>)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6013      	str	r3, [r2, #0]

  /*Set wakeUp event on start bit*/
  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_STARTBIT;
 8002e6a:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002e6e:	60bb      	str	r3, [r7, #8]

  HAL_UARTEx_StopModeWakeUpSourceConfig(&huart1, WakeUpSelection);
 8002e70:	f107 0308 	add.w	r3, r7, #8
 8002e74:	e893 0006 	ldmia.w	r3, {r1, r2}
 8002e78:	4815      	ldr	r0, [pc, #84]	@ (8002ed0 <vcom_ReceiveInit+0x74>)
 8002e7a:	f006 ffce 	bl	8009e1a <HAL_UARTEx_StopModeWakeUpSourceConfig>

  /* Make sure that no UART transfer is on-going */
  while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_BUSY) == SET);
 8002e7e:	bf00      	nop
 8002e80:	4b13      	ldr	r3, [pc, #76]	@ (8002ed0 <vcom_ReceiveInit+0x74>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	69db      	ldr	r3, [r3, #28]
 8002e86:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e8a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e8e:	d0f7      	beq.n	8002e80 <vcom_ReceiveInit+0x24>

  /* Make sure that UART is ready to receive)   */
  while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_REACK) == RESET);
 8002e90:	bf00      	nop
 8002e92:	4b0f      	ldr	r3, [pc, #60]	@ (8002ed0 <vcom_ReceiveInit+0x74>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	69db      	ldr	r3, [r3, #28]
 8002e98:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e9c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002ea0:	d1f7      	bne.n	8002e92 <vcom_ReceiveInit+0x36>

  /* Enable USART interrupt */
  __HAL_UART_ENABLE_IT(&huart1, UART_IT_WUF);
 8002ea2:	4b0b      	ldr	r3, [pc, #44]	@ (8002ed0 <vcom_ReceiveInit+0x74>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	689a      	ldr	r2, [r3, #8]
 8002ea8:	4b09      	ldr	r3, [pc, #36]	@ (8002ed0 <vcom_ReceiveInit+0x74>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 8002eb0:	609a      	str	r2, [r3, #8]

  /*Enable wakeup from stop mode*/
  HAL_UARTEx_EnableStopMode(&huart1);
 8002eb2:	4807      	ldr	r0, [pc, #28]	@ (8002ed0 <vcom_ReceiveInit+0x74>)
 8002eb4:	f007 f80c 	bl	8009ed0 <HAL_UARTEx_EnableStopMode>

  /*Start LPUART receive on IT*/
  HAL_UART_Receive_IT(&huart1, &charRx, 1);
 8002eb8:	2201      	movs	r2, #1
 8002eba:	4906      	ldr	r1, [pc, #24]	@ (8002ed4 <vcom_ReceiveInit+0x78>)
 8002ebc:	4804      	ldr	r0, [pc, #16]	@ (8002ed0 <vcom_ReceiveInit+0x74>)
 8002ebe:	f005 f845 	bl	8007f4c <HAL_UART_Receive_IT>

  return UTIL_ADV_TRACE_OK;
 8002ec2:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_ReceiveInit_2 */

  /* USER CODE END vcom_ReceiveInit_2 */
}
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	3710      	adds	r7, #16
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	bd80      	pop	{r7, pc}
 8002ecc:	2000057c 	.word	0x2000057c
 8002ed0:	200003f4 	.word	0x200003f4
 8002ed4:	20000574 	.word	0x20000574

08002ed8 <vcom_Resume>:

void vcom_Resume(void)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN vcom_Resume_1 */

  /* USER CODE END vcom_Resume_1 */
  /*to re-enable lost UART settings*/
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002edc:	4808      	ldr	r0, [pc, #32]	@ (8002f00 <vcom_Resume+0x28>)
 8002ede:	f004 ffe4 	bl	8007eaa <HAL_UART_Init>
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d001      	beq.n	8002eec <vcom_Resume+0x14>
  {
    Error_Handler();
 8002ee8:	f7fe fe46 	bl	8001b78 <Error_Handler>
  }

  /*to re-enable lost DMA settings*/
  if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002eec:	4805      	ldr	r0, [pc, #20]	@ (8002f04 <vcom_Resume+0x2c>)
 8002eee:	f001 fb3d 	bl	800456c <HAL_DMA_Init>
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d001      	beq.n	8002efc <vcom_Resume+0x24>
  {
    Error_Handler();
 8002ef8:	f7fe fe3e 	bl	8001b78 <Error_Handler>
  }
  /* USER CODE BEGIN vcom_Resume_2 */

  /* USER CODE END vcom_Resume_2 */
}
 8002efc:	bf00      	nop
 8002efe:	bd80      	pop	{r7, pc}
 8002f00:	200003f4 	.word	0x200003f4
 8002f04:	20000514 	.word	0x20000514

08002f08 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b082      	sub	sp, #8
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_1 */

  /* USER CODE END HAL_UART_TxCpltCallback_1 */
  /* buffer transmission complete*/
  if (huart->Instance == USART1)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a05      	ldr	r2, [pc, #20]	@ (8002f2c <HAL_UART_TxCpltCallback+0x24>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d103      	bne.n	8002f22 <HAL_UART_TxCpltCallback+0x1a>
  {
    TxCpltCallback(NULL);
 8002f1a:	4b05      	ldr	r3, [pc, #20]	@ (8002f30 <HAL_UART_TxCpltCallback+0x28>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	2000      	movs	r0, #0
 8002f20:	4798      	blx	r3
  }
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_2 */

  /* USER CODE END HAL_UART_TxCpltCallback_2 */
}
 8002f22:	bf00      	nop
 8002f24:	3708      	adds	r7, #8
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bd80      	pop	{r7, pc}
 8002f2a:	bf00      	nop
 8002f2c:	40013800 	.word	0x40013800
 8002f30:	20000578 	.word	0x20000578

08002f34 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b082      	sub	sp, #8
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_1 */

  /* USER CODE END HAL_UART_RxCpltCallback_1 */
  if (huart->Instance == USART1)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4a0d      	ldr	r2, [pc, #52]	@ (8002f78 <HAL_UART_RxCpltCallback+0x44>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d113      	bne.n	8002f6e <HAL_UART_RxCpltCallback+0x3a>
  {
    if ((NULL != RxCpltCallback) && (HAL_UART_ERROR_NONE == huart->ErrorCode))
 8002f46:	4b0d      	ldr	r3, [pc, #52]	@ (8002f7c <HAL_UART_RxCpltCallback+0x48>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d00a      	beq.n	8002f64 <HAL_UART_RxCpltCallback+0x30>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d105      	bne.n	8002f64 <HAL_UART_RxCpltCallback+0x30>
    {
      RxCpltCallback(&charRx, 1, 0);
 8002f58:	4b08      	ldr	r3, [pc, #32]	@ (8002f7c <HAL_UART_RxCpltCallback+0x48>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	2101      	movs	r1, #1
 8002f60:	4807      	ldr	r0, [pc, #28]	@ (8002f80 <HAL_UART_RxCpltCallback+0x4c>)
 8002f62:	4798      	blx	r3
    }
    HAL_UART_Receive_IT(huart, &charRx, 1);
 8002f64:	2201      	movs	r2, #1
 8002f66:	4906      	ldr	r1, [pc, #24]	@ (8002f80 <HAL_UART_RxCpltCallback+0x4c>)
 8002f68:	6878      	ldr	r0, [r7, #4]
 8002f6a:	f004 ffef 	bl	8007f4c <HAL_UART_Receive_IT>
  }
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_2 */

  /* USER CODE END HAL_UART_RxCpltCallback_2 */
}
 8002f6e:	bf00      	nop
 8002f70:	3708      	adds	r7, #8
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bd80      	pop	{r7, pc}
 8002f76:	bf00      	nop
 8002f78:	40013800 	.word	0x40013800
 8002f7c:	2000057c 	.word	0x2000057c
 8002f80:	20000574 	.word	0x20000574

08002f84 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002f84:	480d      	ldr	r0, [pc, #52]	@ (8002fbc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002f86:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002f88:	f7ff fac0 	bl	800250c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002f8c:	480c      	ldr	r0, [pc, #48]	@ (8002fc0 <LoopForever+0x6>)
  ldr r1, =_edata
 8002f8e:	490d      	ldr	r1, [pc, #52]	@ (8002fc4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002f90:	4a0d      	ldr	r2, [pc, #52]	@ (8002fc8 <LoopForever+0xe>)
  movs r3, #0
 8002f92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002f94:	e002      	b.n	8002f9c <LoopCopyDataInit>

08002f96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002f96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002f98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002f9a:	3304      	adds	r3, #4

08002f9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002f9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002f9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002fa0:	d3f9      	bcc.n	8002f96 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002fa2:	4a0a      	ldr	r2, [pc, #40]	@ (8002fcc <LoopForever+0x12>)
  ldr r4, =_ebss
 8002fa4:	4c0a      	ldr	r4, [pc, #40]	@ (8002fd0 <LoopForever+0x16>)
  movs r3, #0
 8002fa6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002fa8:	e001      	b.n	8002fae <LoopFillZerobss>

08002faa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002faa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002fac:	3204      	adds	r2, #4

08002fae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002fae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002fb0:	d3fb      	bcc.n	8002faa <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002fb2:	f019 fe55 	bl	801cc60 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002fb6:	f7fe fd76 	bl	8001aa6 <main>

08002fba <LoopForever>:

LoopForever:
    b LoopForever
 8002fba:	e7fe      	b.n	8002fba <LoopForever>
  ldr   r0, =_estack
 8002fbc:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002fc0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002fc4:	20000320 	.word	0x20000320
  ldr r2, =_sidata
 8002fc8:	0801fe00 	.word	0x0801fe00
  ldr r2, =_sbss
 8002fcc:	20000320 	.word	0x20000320
  ldr r4, =_ebss
 8002fd0:	20002504 	.word	0x20002504

08002fd4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002fd4:	e7fe      	b.n	8002fd4 <ADC_IRQHandler>

08002fd6 <BSP_RADIO_Init>:
/**
  * @brief  Init Radio Switch 
  * @retval BSP status
  */
int32_t BSP_RADIO_Init(void)
{
 8002fd6:	b580      	push	{r7, lr}
 8002fd8:	b086      	sub	sp, #24
 8002fda:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  gpio_init_structure = {0};
 8002fdc:	1d3b      	adds	r3, r7, #4
 8002fde:	2200      	movs	r2, #0
 8002fe0:	601a      	str	r2, [r3, #0]
 8002fe2:	605a      	str	r2, [r3, #4]
 8002fe4:	609a      	str	r2, [r3, #8]
 8002fe6:	60da      	str	r2, [r3, #12]
 8002fe8:	611a      	str	r2, [r3, #16]
  
  /* Configure the Radio Switch pin */
  gpio_init_structure.Pin   = RF_SW_CTRL1_PIN;
 8002fea:	2310      	movs	r3, #16
 8002fec:	607b      	str	r3, [r7, #4]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	60bb      	str	r3, [r7, #8]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ff6:	2303      	movs	r3, #3
 8002ff8:	613b      	str	r3, [r7, #16]
  
  HAL_GPIO_Init(RF_SW_CTRL1_GPIO_PORT, &gpio_init_structure);
 8002ffa:	1d3b      	adds	r3, r7, #4
 8002ffc:	4619      	mov	r1, r3
 8002ffe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003002:	f002 f8ff 	bl	8005204 <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL2_PIN;
 8003006:	2320      	movs	r3, #32
 8003008:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(RF_SW_CTRL2_GPIO_PORT, &gpio_init_structure);
 800300a:	1d3b      	adds	r3, r7, #4
 800300c:	4619      	mov	r1, r3
 800300e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003012:	f002 f8f7 	bl	8005204 <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 8003016:	2200      	movs	r2, #0
 8003018:	2120      	movs	r1, #32
 800301a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800301e:	f002 fb1f 	bl	8005660 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 8003022:	2200      	movs	r2, #0
 8003024:	2110      	movs	r1, #16
 8003026:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800302a:	f002 fb19 	bl	8005660 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 800302e:	2300      	movs	r3, #0
}
 8003030:	4618      	mov	r0, r3
 8003032:	3718      	adds	r7, #24
 8003034:	46bd      	mov	sp, r7
 8003036:	bd80      	pop	{r7, pc}

08003038 <BSP_RADIO_ConfigRFSwitch>:
  *           @arg RADIO_SWITCH_RFO_LP
  *           @arg RADIO_SWITCH_RFO_HP
  * @retval BSP status
  */
int32_t BSP_RADIO_ConfigRFSwitch(BSP_RADIO_Switch_TypeDef Config)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b082      	sub	sp, #8
 800303c:	af00      	add	r7, sp, #0
 800303e:	4603      	mov	r3, r0
 8003040:	71fb      	strb	r3, [r7, #7]
  switch (Config)
 8003042:	79fb      	ldrb	r3, [r7, #7]
 8003044:	2b03      	cmp	r3, #3
 8003046:	d83f      	bhi.n	80030c8 <BSP_RADIO_ConfigRFSwitch+0x90>
 8003048:	a201      	add	r2, pc, #4	@ (adr r2, 8003050 <BSP_RADIO_ConfigRFSwitch+0x18>)
 800304a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800304e:	bf00      	nop
 8003050:	08003061 	.word	0x08003061
 8003054:	0800307b 	.word	0x0800307b
 8003058:	08003095 	.word	0x08003095
 800305c:	080030af 	.word	0x080030af
  {
    case RADIO_SWITCH_OFF:
    {
      /* Turn off switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET);
 8003060:	2200      	movs	r2, #0
 8003062:	2110      	movs	r1, #16
 8003064:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003068:	f002 fafa 	bl	8005660 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET);
 800306c:	2200      	movs	r2, #0
 800306e:	2120      	movs	r1, #32
 8003070:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003074:	f002 faf4 	bl	8005660 <HAL_GPIO_WritePin>
      break;      
 8003078:	e027      	b.n	80030ca <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RX:
    {
      /*Turns On in Rx Mode the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 800307a:	2201      	movs	r2, #1
 800307c:	2110      	movs	r1, #16
 800307e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003082:	f002 faed 	bl	8005660 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 8003086:	2200      	movs	r2, #0
 8003088:	2120      	movs	r1, #32
 800308a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800308e:	f002 fae7 	bl	8005660 <HAL_GPIO_WritePin>
      break;
 8003092:	e01a      	b.n	80030ca <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RFO_LP:
    {
      /*Turns On in Tx Low Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 8003094:	2201      	movs	r2, #1
 8003096:	2110      	movs	r1, #16
 8003098:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800309c:	f002 fae0 	bl	8005660 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 80030a0:	2201      	movs	r2, #1
 80030a2:	2120      	movs	r1, #32
 80030a4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80030a8:	f002 fada 	bl	8005660 <HAL_GPIO_WritePin>
      break;
 80030ac:	e00d      	b.n	80030ca <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RFO_HP:
    {
      /*Turns On in Tx High Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 80030ae:	2200      	movs	r2, #0
 80030b0:	2110      	movs	r1, #16
 80030b2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80030b6:	f002 fad3 	bl	8005660 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 80030ba:	2201      	movs	r2, #1
 80030bc:	2120      	movs	r1, #32
 80030be:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80030c2:	f002 facd 	bl	8005660 <HAL_GPIO_WritePin>
      break;
 80030c6:	e000      	b.n	80030ca <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    default:
      break;    
 80030c8:	bf00      	nop
  }  

  return BSP_ERROR_NONE;
 80030ca:	2300      	movs	r3, #0
}
 80030cc:	4618      	mov	r0, r3
 80030ce:	3708      	adds	r7, #8
 80030d0:	46bd      	mov	sp, r7
 80030d2:	bd80      	pop	{r7, pc}

080030d4 <BSP_RADIO_GetTxConfig>:
  *  RADIO_CONF_RFO_LP_HP
  *  RADIO_CONF_RFO_LP
  *  RADIO_CONF_RFO_HP
  */
int32_t BSP_RADIO_GetTxConfig(void)
{
 80030d4:	b480      	push	{r7}
 80030d6:	af00      	add	r7, sp, #0
  return RADIO_CONF_RFO_HP;
 80030d8:	2302      	movs	r3, #2
}
 80030da:	4618      	mov	r0, r3
 80030dc:	46bd      	mov	sp, r7
 80030de:	bc80      	pop	{r7}
 80030e0:	4770      	bx	lr

080030e2 <BSP_RADIO_IsTCXO>:
  * @retval
  *  RADIO_CONF_TCXO_NOT_SUPPORTED
  *  RADIO_CONF_TCXO_SUPPORTED
  */
int32_t BSP_RADIO_IsTCXO(void)
{
 80030e2:	b480      	push	{r7}
 80030e4:	af00      	add	r7, sp, #0
  return RADIO_CONF_TCXO_SUPPORTED;
 80030e6:	2301      	movs	r3, #1
}
 80030e8:	4618      	mov	r0, r3
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bc80      	pop	{r7}
 80030ee:	4770      	bx	lr

080030f0 <BSP_RADIO_IsDCDC>:
  * @retval
  *  RADIO_CONF_DCDC_NOT_SUPPORTED
  *  RADIO_CONF_DCDC_SUPPORTED  
  */
int32_t BSP_RADIO_IsDCDC(void)
{
 80030f0:	b480      	push	{r7}
 80030f2:	af00      	add	r7, sp, #0
  return RADIO_CONF_DCDC_SUPPORTED;
 80030f4:	2301      	movs	r3, #1
}
 80030f6:	4618      	mov	r0, r3
 80030f8:	46bd      	mov	sp, r7
 80030fa:	bc80      	pop	{r7}
 80030fc:	4770      	bx	lr

080030fe <BSP_RADIO_GetRFOMaxPowerConfig>:
  * @retval
  *    RADIO_CONF_RFO_LP_MAX_15_dBm for LP mode
  *    RADIO_CONF_RFO_HP_MAX_22_dBm for HP mode
  */
int32_t BSP_RADIO_GetRFOMaxPowerConfig(BSP_RADIO_RFOMaxPowerConfig_TypeDef Config)
{
 80030fe:	b480      	push	{r7}
 8003100:	b085      	sub	sp, #20
 8003102:	af00      	add	r7, sp, #0
 8003104:	4603      	mov	r3, r0
 8003106:	71fb      	strb	r3, [r7, #7]
  int32_t ret;

  if(Config == RADIO_RFO_LP_MAXPOWER)
 8003108:	79fb      	ldrb	r3, [r7, #7]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d102      	bne.n	8003114 <BSP_RADIO_GetRFOMaxPowerConfig+0x16>
  {
    ret = RADIO_CONF_RFO_LP_MAX_15_dBm;
 800310e:	230f      	movs	r3, #15
 8003110:	60fb      	str	r3, [r7, #12]
 8003112:	e001      	b.n	8003118 <BSP_RADIO_GetRFOMaxPowerConfig+0x1a>
  }
  else
  {
    ret = RADIO_CONF_RFO_HP_MAX_22_dBm;
 8003114:	2316      	movs	r3, #22
 8003116:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8003118:	68fb      	ldr	r3, [r7, #12]
}
 800311a:	4618      	mov	r0, r3
 800311c:	3714      	adds	r7, #20
 800311e:	46bd      	mov	sp, r7
 8003120:	bc80      	pop	{r7}
 8003122:	4770      	bx	lr

08003124 <LL_DBGMCU_DisableDBGSleepMode>:
{
 8003124:	b480      	push	{r7}
 8003126:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8003128:	4b04      	ldr	r3, [pc, #16]	@ (800313c <LL_DBGMCU_DisableDBGSleepMode+0x18>)
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	4a03      	ldr	r2, [pc, #12]	@ (800313c <LL_DBGMCU_DisableDBGSleepMode+0x18>)
 800312e:	f023 0301 	bic.w	r3, r3, #1
 8003132:	6053      	str	r3, [r2, #4]
}
 8003134:	bf00      	nop
 8003136:	46bd      	mov	sp, r7
 8003138:	bc80      	pop	{r7}
 800313a:	4770      	bx	lr
 800313c:	e0042000 	.word	0xe0042000

08003140 <LL_DBGMCU_DisableDBGStopMode>:
{
 8003140:	b480      	push	{r7}
 8003142:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8003144:	4b04      	ldr	r3, [pc, #16]	@ (8003158 <LL_DBGMCU_DisableDBGStopMode+0x18>)
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	4a03      	ldr	r2, [pc, #12]	@ (8003158 <LL_DBGMCU_DisableDBGStopMode+0x18>)
 800314a:	f023 0302 	bic.w	r3, r3, #2
 800314e:	6053      	str	r3, [r2, #4]
}
 8003150:	bf00      	nop
 8003152:	46bd      	mov	sp, r7
 8003154:	bc80      	pop	{r7}
 8003156:	4770      	bx	lr
 8003158:	e0042000 	.word	0xe0042000

0800315c <LL_DBGMCU_DisableDBGStandbyMode>:
{
 800315c:	b480      	push	{r7}
 800315e:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 8003160:	4b04      	ldr	r3, [pc, #16]	@ (8003174 <LL_DBGMCU_DisableDBGStandbyMode+0x18>)
 8003162:	685b      	ldr	r3, [r3, #4]
 8003164:	4a03      	ldr	r2, [pc, #12]	@ (8003174 <LL_DBGMCU_DisableDBGStandbyMode+0x18>)
 8003166:	f023 0304 	bic.w	r3, r3, #4
 800316a:	6053      	str	r3, [r2, #4]
}
 800316c:	bf00      	nop
 800316e:	46bd      	mov	sp, r7
 8003170:	bc80      	pop	{r7}
 8003172:	4770      	bx	lr
 8003174:	e0042000 	.word	0xe0042000

08003178 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b082      	sub	sp, #8
 800317c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800317e:	2300      	movs	r3, #0
 8003180:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003182:	2003      	movs	r0, #3
 8003184:	f001 f9b0 	bl	80044e8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003188:	f003 fb46 	bl	8006818 <HAL_RCC_GetHCLKFreq>
 800318c:	4603      	mov	r3, r0
 800318e:	4a09      	ldr	r2, [pc, #36]	@ (80031b4 <HAL_Init+0x3c>)
 8003190:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003192:	200f      	movs	r0, #15
 8003194:	f7ff f826 	bl	80021e4 <HAL_InitTick>
 8003198:	4603      	mov	r3, r0
 800319a:	2b00      	cmp	r3, #0
 800319c:	d002      	beq.n	80031a4 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 800319e:	2301      	movs	r3, #1
 80031a0:	71fb      	strb	r3, [r7, #7]
 80031a2:	e001      	b.n	80031a8 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80031a4:	f7fe fddf 	bl	8001d66 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80031a8:	79fb      	ldrb	r3, [r7, #7]
}
 80031aa:	4618      	mov	r0, r3
 80031ac:	3708      	adds	r7, #8
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bd80      	pop	{r7, pc}
 80031b2:	bf00      	nop
 80031b4:	20000000 	.word	0x20000000

080031b8 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 80031b8:	b480      	push	{r7}
 80031ba:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 80031bc:	4b04      	ldr	r3, [pc, #16]	@ (80031d0 <HAL_SuspendTick+0x18>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4a03      	ldr	r2, [pc, #12]	@ (80031d0 <HAL_SuspendTick+0x18>)
 80031c2:	f023 0302 	bic.w	r3, r3, #2
 80031c6:	6013      	str	r3, [r2, #0]
}
 80031c8:	bf00      	nop
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bc80      	pop	{r7}
 80031ce:	4770      	bx	lr
 80031d0:	e000e010 	.word	0xe000e010

080031d4 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 80031d4:	b480      	push	{r7}
 80031d6:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 80031d8:	4b04      	ldr	r3, [pc, #16]	@ (80031ec <HAL_ResumeTick+0x18>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4a03      	ldr	r2, [pc, #12]	@ (80031ec <HAL_ResumeTick+0x18>)
 80031de:	f043 0302 	orr.w	r3, r3, #2
 80031e2:	6013      	str	r3, [r2, #0]
}
 80031e4:	bf00      	nop
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bc80      	pop	{r7}
 80031ea:	4770      	bx	lr
 80031ec:	e000e010 	.word	0xe000e010

080031f0 <HAL_GetUIDw0>:
/**
  * @brief  Return the first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 80031f0:	b480      	push	{r7}
 80031f2:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID_BASE)));
 80031f4:	4b02      	ldr	r3, [pc, #8]	@ (8003200 <HAL_GetUIDw0+0x10>)
 80031f6:	681b      	ldr	r3, [r3, #0]
}
 80031f8:	4618      	mov	r0, r3
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bc80      	pop	{r7}
 80031fe:	4770      	bx	lr
 8003200:	1fff7590 	.word	0x1fff7590

08003204 <HAL_GetUIDw1>:
/**
  * @brief  Return the second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 8003204:	b480      	push	{r7}
 8003206:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 8003208:	4b02      	ldr	r3, [pc, #8]	@ (8003214 <HAL_GetUIDw1+0x10>)
 800320a:	681b      	ldr	r3, [r3, #0]
}
 800320c:	4618      	mov	r0, r3
 800320e:	46bd      	mov	sp, r7
 8003210:	bc80      	pop	{r7}
 8003212:	4770      	bx	lr
 8003214:	1fff7594 	.word	0x1fff7594

08003218 <HAL_GetUIDw2>:
/**
  * @brief  Return the third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 8003218:	b480      	push	{r7}
 800321a:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 800321c:	4b02      	ldr	r3, [pc, #8]	@ (8003228 <HAL_GetUIDw2+0x10>)
 800321e:	681b      	ldr	r3, [r3, #0]
}
 8003220:	4618      	mov	r0, r3
 8003222:	46bd      	mov	sp, r7
 8003224:	bc80      	pop	{r7}
 8003226:	4770      	bx	lr
 8003228:	1fff7598 	.word	0x1fff7598

0800322c <HAL_DBGMCU_DisableDBGSleepMode>:
/**
  * @brief  Disable the CPU1 Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGSleepMode(void)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	af00      	add	r7, sp, #0
  LL_DBGMCU_DisableDBGSleepMode();
 8003230:	f7ff ff78 	bl	8003124 <LL_DBGMCU_DisableDBGSleepMode>
}
 8003234:	bf00      	nop
 8003236:	bd80      	pop	{r7, pc}

08003238 <HAL_DBGMCU_DisableDBGStopMode>:
/**
  * @brief  Disable the CPU1 Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStopMode(void)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	af00      	add	r7, sp, #0
  LL_DBGMCU_DisableDBGStopMode();
 800323c:	f7ff ff80 	bl	8003140 <LL_DBGMCU_DisableDBGStopMode>
}
 8003240:	bf00      	nop
 8003242:	bd80      	pop	{r7, pc}

08003244 <HAL_DBGMCU_DisableDBGStandbyMode>:
/**
  * @brief  Disable the CPU1 Debug Module during STANDBY mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStandbyMode(void)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	af00      	add	r7, sp, #0
  LL_DBGMCU_DisableDBGStandbyMode();
 8003248:	f7ff ff88 	bl	800315c <LL_DBGMCU_DisableDBGStandbyMode>
}
 800324c:	bf00      	nop
 800324e:	bd80      	pop	{r7, pc}

08003250 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003250:	b480      	push	{r7}
 8003252:	b083      	sub	sp, #12
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
 8003258:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	431a      	orrs	r2, r3
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	601a      	str	r2, [r3, #0]
}
 800326a:	bf00      	nop
 800326c:	370c      	adds	r7, #12
 800326e:	46bd      	mov	sp, r7
 8003270:	bc80      	pop	{r7}
 8003272:	4770      	bx	lr

08003274 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003274:	b480      	push	{r7}
 8003276:	b083      	sub	sp, #12
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8003284:	4618      	mov	r0, r3
 8003286:	370c      	adds	r7, #12
 8003288:	46bd      	mov	sp, r7
 800328a:	bc80      	pop	{r7}
 800328c:	4770      	bx	lr

0800328e <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 800328e:	b480      	push	{r7}
 8003290:	b085      	sub	sp, #20
 8003292:	af00      	add	r7, sp, #0
 8003294:	60f8      	str	r0, [r7, #12]
 8003296:	60b9      	str	r1, [r7, #8]
 8003298:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	695a      	ldr	r2, [r3, #20]
 800329e:	68bb      	ldr	r3, [r7, #8]
 80032a0:	f003 0304 	and.w	r3, r3, #4
 80032a4:	2107      	movs	r1, #7
 80032a6:	fa01 f303 	lsl.w	r3, r1, r3
 80032aa:	43db      	mvns	r3, r3
 80032ac:	401a      	ands	r2, r3
 80032ae:	68bb      	ldr	r3, [r7, #8]
 80032b0:	f003 0304 	and.w	r3, r3, #4
 80032b4:	6879      	ldr	r1, [r7, #4]
 80032b6:	fa01 f303 	lsl.w	r3, r1, r3
 80032ba:	431a      	orrs	r2, r3
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 80032c0:	bf00      	nop
 80032c2:	3714      	adds	r7, #20
 80032c4:	46bd      	mov	sp, r7
 80032c6:	bc80      	pop	{r7}
 80032c8:	4770      	bx	lr

080032ca <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 80032ca:	b480      	push	{r7}
 80032cc:	b083      	sub	sp, #12
 80032ce:	af00      	add	r7, sp, #0
 80032d0:	6078      	str	r0, [r7, #4]
 80032d2:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	695a      	ldr	r2, [r3, #20]
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	f003 0304 	and.w	r3, r3, #4
 80032de:	2107      	movs	r1, #7
 80032e0:	fa01 f303 	lsl.w	r3, r1, r3
 80032e4:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	f003 0304 	and.w	r3, r3, #4
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80032ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032f0:	4618      	mov	r0, r3
 80032f2:	370c      	adds	r7, #12
 80032f4:	46bd      	mov	sp, r7
 80032f6:	bc80      	pop	{r7}
 80032f8:	4770      	bx	lr

080032fa <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80032fa:	b480      	push	{r7}
 80032fc:	b083      	sub	sp, #12
 80032fe:	af00      	add	r7, sp, #0
 8003300:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	68db      	ldr	r3, [r3, #12]
 8003306:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800330a:	2b00      	cmp	r3, #0
 800330c:	d101      	bne.n	8003312 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800330e:	2301      	movs	r3, #1
 8003310:	e000      	b.n	8003314 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003312:	2300      	movs	r3, #0
}
 8003314:	4618      	mov	r0, r3
 8003316:	370c      	adds	r7, #12
 8003318:	46bd      	mov	sp, r7
 800331a:	bc80      	pop	{r7}
 800331c:	4770      	bx	lr

0800331e <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800331e:	b480      	push	{r7}
 8003320:	b085      	sub	sp, #20
 8003322:	af00      	add	r7, sp, #0
 8003324:	60f8      	str	r0, [r7, #12]
 8003326:	60b9      	str	r1, [r7, #8]
 8003328:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800332e:	68bb      	ldr	r3, [r7, #8]
 8003330:	f003 031f 	and.w	r3, r3, #31
 8003334:	210f      	movs	r1, #15
 8003336:	fa01 f303 	lsl.w	r3, r1, r3
 800333a:	43db      	mvns	r3, r3
 800333c:	401a      	ands	r2, r3
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	0e9b      	lsrs	r3, r3, #26
 8003342:	f003 010f 	and.w	r1, r3, #15
 8003346:	68bb      	ldr	r3, [r7, #8]
 8003348:	f003 031f 	and.w	r3, r3, #31
 800334c:	fa01 f303 	lsl.w	r3, r1, r3
 8003350:	431a      	orrs	r2, r3
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003356:	bf00      	nop
 8003358:	3714      	adds	r7, #20
 800335a:	46bd      	mov	sp, r7
 800335c:	bc80      	pop	{r7}
 800335e:	4770      	bx	lr

08003360 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8003360:	b480      	push	{r7}
 8003362:	b083      	sub	sp, #12
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
 8003368:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8003374:	431a      	orrs	r2, r3
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800337a:	bf00      	nop
 800337c:	370c      	adds	r7, #12
 800337e:	46bd      	mov	sp, r7
 8003380:	bc80      	pop	{r7}
 8003382:	4770      	bx	lr

08003384 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8003384:	b480      	push	{r7}
 8003386:	b083      	sub	sp, #12
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
 800338c:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8003398:	43db      	mvns	r3, r3
 800339a:	401a      	ands	r2, r3
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80033a0:	bf00      	nop
 80033a2:	370c      	adds	r7, #12
 80033a4:	46bd      	mov	sp, r7
 80033a6:	bc80      	pop	{r7}
 80033a8:	4770      	bx	lr

080033aa <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 80033aa:	b480      	push	{r7}
 80033ac:	b085      	sub	sp, #20
 80033ae:	af00      	add	r7, sp, #0
 80033b0:	60f8      	str	r0, [r7, #12]
 80033b2:	60b9      	str	r1, [r7, #8]
 80033b4:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	695a      	ldr	r2, [r3, #20]
 80033ba:	68bb      	ldr	r3, [r7, #8]
 80033bc:	021b      	lsls	r3, r3, #8
 80033be:	43db      	mvns	r3, r3
 80033c0:	401a      	ands	r2, r3
 80033c2:	68bb      	ldr	r3, [r7, #8]
 80033c4:	0219      	lsls	r1, r3, #8
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	400b      	ands	r3, r1
 80033ca:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 80033ce:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80033d2:	431a      	orrs	r2, r3
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 80033d8:	bf00      	nop
 80033da:	3714      	adds	r7, #20
 80033dc:	46bd      	mov	sp, r7
 80033de:	bc80      	pop	{r7}
 80033e0:	4770      	bx	lr

080033e2 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80033e2:	b480      	push	{r7}
 80033e4:	b083      	sub	sp, #12
 80033e6:	af00      	add	r7, sp, #0
 80033e8:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	689b      	ldr	r3, [r3, #8]
 80033ee:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80033f2:	f023 0317 	bic.w	r3, r3, #23
 80033f6:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80033fe:	bf00      	nop
 8003400:	370c      	adds	r7, #12
 8003402:	46bd      	mov	sp, r7
 8003404:	bc80      	pop	{r7}
 8003406:	4770      	bx	lr

08003408 <LL_ADC_DisableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_DisableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003408:	b480      	push	{r7}
 800340a:	b083      	sub	sp, #12
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->CR, (ADC_CR_ADVREGEN | ADC_CR_BITS_PROPERTY_RS));
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	689b      	ldr	r3, [r3, #8]
 8003414:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8003418:	f023 0317 	bic.w	r3, r3, #23
 800341c:	687a      	ldr	r2, [r7, #4]
 800341e:	6093      	str	r3, [r2, #8]
}
 8003420:	bf00      	nop
 8003422:	370c      	adds	r7, #12
 8003424:	46bd      	mov	sp, r7
 8003426:	bc80      	pop	{r7}
 8003428:	4770      	bx	lr

0800342a <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800342a:	b480      	push	{r7}
 800342c:	b083      	sub	sp, #12
 800342e:	af00      	add	r7, sp, #0
 8003430:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	689b      	ldr	r3, [r3, #8]
 8003436:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800343a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800343e:	d101      	bne.n	8003444 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003440:	2301      	movs	r3, #1
 8003442:	e000      	b.n	8003446 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003444:	2300      	movs	r3, #0
}
 8003446:	4618      	mov	r0, r3
 8003448:	370c      	adds	r7, #12
 800344a:	46bd      	mov	sp, r7
 800344c:	bc80      	pop	{r7}
 800344e:	4770      	bx	lr

08003450 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003450:	b480      	push	{r7}
 8003452:	b083      	sub	sp, #12
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	689b      	ldr	r3, [r3, #8]
 800345c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003460:	f023 0317 	bic.w	r3, r3, #23
 8003464:	f043 0201 	orr.w	r2, r3, #1
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800346c:	bf00      	nop
 800346e:	370c      	adds	r7, #12
 8003470:	46bd      	mov	sp, r7
 8003472:	bc80      	pop	{r7}
 8003474:	4770      	bx	lr

08003476 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8003476:	b480      	push	{r7}
 8003478:	b083      	sub	sp, #12
 800347a:	af00      	add	r7, sp, #0
 800347c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	689b      	ldr	r3, [r3, #8]
 8003482:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003486:	f023 0317 	bic.w	r3, r3, #23
 800348a:	f043 0202 	orr.w	r2, r3, #2
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8003492:	bf00      	nop
 8003494:	370c      	adds	r7, #12
 8003496:	46bd      	mov	sp, r7
 8003498:	bc80      	pop	{r7}
 800349a:	4770      	bx	lr

0800349c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800349c:	b480      	push	{r7}
 800349e:	b083      	sub	sp, #12
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	689b      	ldr	r3, [r3, #8]
 80034a8:	f003 0301 	and.w	r3, r3, #1
 80034ac:	2b01      	cmp	r3, #1
 80034ae:	d101      	bne.n	80034b4 <LL_ADC_IsEnabled+0x18>
 80034b0:	2301      	movs	r3, #1
 80034b2:	e000      	b.n	80034b6 <LL_ADC_IsEnabled+0x1a>
 80034b4:	2300      	movs	r3, #0
}
 80034b6:	4618      	mov	r0, r3
 80034b8:	370c      	adds	r7, #12
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bc80      	pop	{r7}
 80034be:	4770      	bx	lr

080034c0 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 80034c0:	b480      	push	{r7}
 80034c2:	b083      	sub	sp, #12
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	689b      	ldr	r3, [r3, #8]
 80034cc:	f003 0302 	and.w	r3, r3, #2
 80034d0:	2b02      	cmp	r3, #2
 80034d2:	d101      	bne.n	80034d8 <LL_ADC_IsDisableOngoing+0x18>
 80034d4:	2301      	movs	r3, #1
 80034d6:	e000      	b.n	80034da <LL_ADC_IsDisableOngoing+0x1a>
 80034d8:	2300      	movs	r3, #0
}
 80034da:	4618      	mov	r0, r3
 80034dc:	370c      	adds	r7, #12
 80034de:	46bd      	mov	sp, r7
 80034e0:	bc80      	pop	{r7}
 80034e2:	4770      	bx	lr

080034e4 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80034e4:	b480      	push	{r7}
 80034e6:	b083      	sub	sp, #12
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	689b      	ldr	r3, [r3, #8]
 80034f0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80034f4:	f023 0317 	bic.w	r3, r3, #23
 80034f8:	f043 0204 	orr.w	r2, r3, #4
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003500:	bf00      	nop
 8003502:	370c      	adds	r7, #12
 8003504:	46bd      	mov	sp, r7
 8003506:	bc80      	pop	{r7}
 8003508:	4770      	bx	lr

0800350a <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 800350a:	b480      	push	{r7}
 800350c:	b083      	sub	sp, #12
 800350e:	af00      	add	r7, sp, #0
 8003510:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	689b      	ldr	r3, [r3, #8]
 8003516:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800351a:	f023 0317 	bic.w	r3, r3, #23
 800351e:	f043 0210 	orr.w	r2, r3, #16
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8003526:	bf00      	nop
 8003528:	370c      	adds	r7, #12
 800352a:	46bd      	mov	sp, r7
 800352c:	bc80      	pop	{r7}
 800352e:	4770      	bx	lr

08003530 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003530:	b480      	push	{r7}
 8003532:	b083      	sub	sp, #12
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	689b      	ldr	r3, [r3, #8]
 800353c:	f003 0304 	and.w	r3, r3, #4
 8003540:	2b04      	cmp	r3, #4
 8003542:	d101      	bne.n	8003548 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003544:	2301      	movs	r3, #1
 8003546:	e000      	b.n	800354a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003548:	2300      	movs	r3, #0
}
 800354a:	4618      	mov	r0, r3
 800354c:	370c      	adds	r7, #12
 800354e:	46bd      	mov	sp, r7
 8003550:	bc80      	pop	{r7}
 8003552:	4770      	bx	lr

08003554 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b088      	sub	sp, #32
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800355c:	2300      	movs	r3, #0
 800355e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR1 = 0UL;
 8003560:	2300      	movs	r3, #0
 8003562:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8003564:	2300      	movs	r3, #0
 8003566:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003568:	2300      	movs	r3, #0
 800356a:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if (hadc == NULL)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2b00      	cmp	r3, #0
 8003570:	d101      	bne.n	8003576 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8003572:	2301      	movs	r3, #1
 8003574:	e19e      	b.n	80038b4 <HAL_ADC_Init+0x360>
    assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
    assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
  }
  assert_param(IS_ADC_TRIGGER_FREQ(hadc->Init.TriggerFrequencyMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	691b      	ldr	r3, [r3, #16]
 800357a:	2b00      	cmp	r3, #0
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003580:	2b00      	cmp	r3, #0
 8003582:	d109      	bne.n	8003598 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003584:	6878      	ldr	r0, [r7, #4]
 8003586:	f7fd ff7b 	bl	8001480 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2200      	movs	r2, #0
 800358e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2200      	movs	r2, #0
 8003594:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4618      	mov	r0, r3
 800359e:	f7ff ff44 	bl	800342a <LL_ADC_IsInternalRegulatorEnabled>
 80035a2:	4603      	mov	r3, r0
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d115      	bne.n	80035d4 <HAL_ADC_Init+0x80>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4618      	mov	r0, r3
 80035ae:	f7ff ff18 	bl	80033e2 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80035b2:	4b99      	ldr	r3, [pc, #612]	@ (8003818 <HAL_ADC_Init+0x2c4>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	099b      	lsrs	r3, r3, #6
 80035b8:	4a98      	ldr	r2, [pc, #608]	@ (800381c <HAL_ADC_Init+0x2c8>)
 80035ba:	fba2 2303 	umull	r2, r3, r2, r3
 80035be:	099b      	lsrs	r3, r3, #6
 80035c0:	3301      	adds	r3, #1
 80035c2:	005b      	lsls	r3, r3, #1
 80035c4:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80035c6:	e002      	b.n	80035ce <HAL_ADC_Init+0x7a>
    {
      wait_loop_index--;
 80035c8:	68bb      	ldr	r3, [r7, #8]
 80035ca:	3b01      	subs	r3, #1
 80035cc:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80035ce:	68bb      	ldr	r3, [r7, #8]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d1f9      	bne.n	80035c8 <HAL_ADC_Init+0x74>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4618      	mov	r0, r3
 80035da:	f7ff ff26 	bl	800342a <LL_ADC_IsInternalRegulatorEnabled>
 80035de:	4603      	mov	r3, r0
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d10d      	bne.n	8003600 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035e8:	f043 0210 	orr.w	r2, r3, #16
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035f4:	f043 0201 	orr.w	r2, r3, #1
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80035fc:	2301      	movs	r3, #1
 80035fe:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4618      	mov	r0, r3
 8003606:	f7ff ff93 	bl	8003530 <LL_ADC_REG_IsConversionOngoing>
 800360a:	60f8      	str	r0, [r7, #12]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003610:	f003 0310 	and.w	r3, r3, #16
 8003614:	2b00      	cmp	r3, #0
 8003616:	f040 8144 	bne.w	80038a2 <HAL_ADC_Init+0x34e>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	2b00      	cmp	r3, #0
 800361e:	f040 8140 	bne.w	80038a2 <HAL_ADC_Init+0x34e>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003626:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800362a:	f043 0202 	orr.w	r2, r3, #2
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4618      	mov	r0, r3
 8003638:	f7ff ff30 	bl	800349c <LL_ADC_IsEnabled>
 800363c:	4603      	mov	r3, r0
 800363e:	2b00      	cmp	r3, #0
 8003640:	f040 80a7 	bne.w	8003792 <HAL_ADC_Init+0x23e>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	7e1b      	ldrb	r3, [r3, #24]
 800364c:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 800364e:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	7e5b      	ldrb	r3, [r3, #25]
 8003654:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8003656:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	7e9b      	ldrb	r3, [r3, #26]
 800365c:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800365e:	4313      	orrs	r3, r2
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8003660:	687a      	ldr	r2, [r7, #4]
 8003662:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003664:	2a00      	cmp	r2, #0
 8003666:	d002      	beq.n	800366e <HAL_ADC_Init+0x11a>
 8003668:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800366c:	e000      	b.n	8003670 <HAL_ADC_Init+0x11c>
 800366e:	2200      	movs	r2, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8003670:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8003676:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	691b      	ldr	r3, [r3, #16]
 800367c:	2b00      	cmp	r3, #0
 800367e:	da04      	bge.n	800368a <HAL_ADC_Init+0x136>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	691b      	ldr	r3, [r3, #16]
 8003684:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003688:	e001      	b.n	800368e <HAL_ADC_Init+0x13a>
 800368a:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
                   hadc->Init.DataAlign                                           |
 800368e:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8003696:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8003698:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 800369a:	69ba      	ldr	r2, [r7, #24]
 800369c:	4313      	orrs	r3, r2
 800369e:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80036a6:	2b01      	cmp	r3, #1
 80036a8:	d114      	bne.n	80036d4 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	7e9b      	ldrb	r3, [r3, #26]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d104      	bne.n	80036bc <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80036b2:	69bb      	ldr	r3, [r7, #24]
 80036b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80036b8:	61bb      	str	r3, [r7, #24]
 80036ba:	e00b      	b.n	80036d4 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036c0:	f043 0220 	orr.w	r2, r3, #32
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036cc:	f043 0201 	orr.w	r2, r3, #1
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d009      	beq.n	80036f0 <HAL_ADC_Init+0x19c>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036e0:	f403 72e0 	and.w	r2, r3, #448	@ 0x1c0
                     hadc->Init.ExternalTrigConvEdge);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80036e8:	4313      	orrs	r3, r2
 80036ea:	69ba      	ldr	r2, [r7, #24]
 80036ec:	4313      	orrs	r3, r2
 80036ee:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	68db      	ldr	r3, [r3, #12]
 80036f6:	f423 33fe 	bic.w	r3, r3, #130048	@ 0x1fc00
 80036fa:	f423 73ff 	bic.w	r3, r3, #510	@ 0x1fe
 80036fe:	687a      	ldr	r2, [r7, #4]
 8003700:	6812      	ldr	r2, [r2, #0]
 8003702:	69b9      	ldr	r1, [r7, #24]
 8003704:	430b      	orrs	r3, r1
 8003706:	60d3      	str	r3, [r2, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	685b      	ldr	r3, [r3, #4]
 800370c:	f003 4240 	and.w	r2, r3, #3221225472	@ 0xc0000000
                   hadc->Init.TriggerFrequencyMode
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003714:	4313      	orrs	r3, r2
 8003716:	697a      	ldr	r2, [r7, #20]
 8003718:	4313      	orrs	r3, r2
 800371a:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003722:	2b01      	cmp	r3, #1
 8003724:	d111      	bne.n	800374a <HAL_ADC_Init+0x1f6>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	f003 4240 	and.w	r2, r3, #3221225472	@ 0xc0000000
                     hadc->Init.Oversampling.Ratio         |
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003732:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                     hadc->Init.Oversampling.Ratio         |
 8003738:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                     hadc->Init.Oversampling.RightBitShift |
 800373e:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8003740:	697b      	ldr	r3, [r7, #20]
 8003742:	4313      	orrs	r3, r2
 8003744:	f043 0301 	orr.w	r3, r3, #1
 8003748:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	691a      	ldr	r2, [r3, #16]
 8003750:	4b33      	ldr	r3, [pc, #204]	@ (8003820 <HAL_ADC_Init+0x2cc>)
 8003752:	4013      	ands	r3, r2
 8003754:	687a      	ldr	r2, [r7, #4]
 8003756:	6812      	ldr	r2, [r2, #0]
 8003758:	6979      	ldr	r1, [r7, #20]
 800375a:	430b      	orrs	r3, r1
 800375c:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	685b      	ldr	r3, [r3, #4]
 8003762:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8003766:	d014      	beq.n	8003792 <HAL_ADC_Init+0x23e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	685b      	ldr	r3, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 800376c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003770:	d00f      	beq.n	8003792 <HAL_ADC_Init+0x23e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	685b      	ldr	r3, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8003776:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800377a:	d00a      	beq.n	8003792 <HAL_ADC_Init+0x23e>
      {
        MODIFY_REG(ADC_COMMON->CCR,
 800377c:	4b29      	ldr	r3, [pc, #164]	@ (8003824 <HAL_ADC_Init+0x2d0>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f423 1270 	bic.w	r2, r3, #3932160	@ 0x3c0000
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 800378c:	4925      	ldr	r1, [pc, #148]	@ (8003824 <HAL_ADC_Init+0x2d0>)
 800378e:	4313      	orrs	r3, r2
 8003790:	600b      	str	r3, [r1, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6818      	ldr	r0, [r3, #0]
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800379a:	461a      	mov	r2, r3
 800379c:	2100      	movs	r1, #0
 800379e:	f7ff fd76 	bl	800328e <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6818      	ldr	r0, [r3, #0]
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037aa:	461a      	mov	r2, r3
 80037ac:	491e      	ldr	r1, [pc, #120]	@ (8003828 <HAL_ADC_Init+0x2d4>)
 80037ae:	f7ff fd6e 	bl	800328e <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	691b      	ldr	r3, [r3, #16]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d108      	bne.n	80037cc <HAL_ADC_Init+0x278>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f062 020f 	orn	r2, r2, #15
 80037c8:	629a      	str	r2, [r3, #40]	@ 0x28
 80037ca:	e042      	b.n	8003852 <HAL_ADC_Init+0x2fe>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	691b      	ldr	r3, [r3, #16]
 80037d0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80037d4:	d13d      	bne.n	8003852 <HAL_ADC_Init+0x2fe>
    {
      /* Count number of ranks available in HAL ADC handle variable */
      uint32_t ADCGroupRegularSequencerRanksCount;

      /* Parse all ranks from 1 to 8 */
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 80037d6:	2300      	movs	r3, #0
 80037d8:	613b      	str	r3, [r7, #16]
 80037da:	e00c      	b.n	80037f6 <HAL_ADC_Init+0x2a2>
      {
        /* Check each sequencer rank until value of end of sequence */
        if (((hadc->ADCGroupRegularSequencerRanks >> (ADCGroupRegularSequencerRanksCount * 4UL)) & ADC_CHSELR_SQ1) ==
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80037e0:	693b      	ldr	r3, [r7, #16]
 80037e2:	009b      	lsls	r3, r3, #2
 80037e4:	fa22 f303 	lsr.w	r3, r2, r3
 80037e8:	f003 030f 	and.w	r3, r3, #15
 80037ec:	2b0f      	cmp	r3, #15
 80037ee:	d006      	beq.n	80037fe <HAL_ADC_Init+0x2aa>
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 80037f0:	693b      	ldr	r3, [r7, #16]
 80037f2:	3301      	adds	r3, #1
 80037f4:	613b      	str	r3, [r7, #16]
 80037f6:	693b      	ldr	r3, [r7, #16]
 80037f8:	2b07      	cmp	r3, #7
 80037fa:	d9ef      	bls.n	80037dc <HAL_ADC_Init+0x288>
 80037fc:	e000      	b.n	8003800 <HAL_ADC_Init+0x2ac>
            ADC_CHSELR_SQ1)
        {
          break;
 80037fe:	bf00      	nop
        }
      }

      if (ADCGroupRegularSequencerRanksCount == 1UL)
 8003800:	693b      	ldr	r3, [r7, #16]
 8003802:	2b01      	cmp	r3, #1
 8003804:	d112      	bne.n	800382c <HAL_ADC_Init+0x2d8>
      {
        /* Set ADC group regular sequencer:                                   */
        /* Set sequencer scan length by clearing ranks above rank 1           */
        /* and do not modify rank 1 value.                                    */
        SET_BIT(hadc->Instance->CHSELR,
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f062 020f 	orn	r2, r2, #15
 8003814:	629a      	str	r2, [r3, #40]	@ 0x28
 8003816:	e01c      	b.n	8003852 <HAL_ADC_Init+0x2fe>
 8003818:	20000000 	.word	0x20000000
 800381c:	053e2d63 	.word	0x053e2d63
 8003820:	1ffffc02 	.word	0x1ffffc02
 8003824:	40012708 	.word	0x40012708
 8003828:	03ffff04 	.word	0x03ffff04
        /*          therefore after the first call of "HAL_ADC_Init()",       */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	69db      	ldr	r3, [r3, #28]
 8003836:	3b01      	subs	r3, #1
 8003838:	009b      	lsls	r3, r3, #2
 800383a:	f003 031c 	and.w	r3, r3, #28
 800383e:	f06f 020f 	mvn.w	r2, #15
 8003842:	fa02 f103 	lsl.w	r1, r2, r3
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	430a      	orrs	r2, r1
 8003850:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	2100      	movs	r1, #0
 8003858:	4618      	mov	r0, r3
 800385a:	f7ff fd36 	bl	80032ca <LL_ADC_GetSamplingTimeCommonChannels>
 800385e:	4602      	mov	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8003864:	429a      	cmp	r2, r3
 8003866:	d10b      	bne.n	8003880 <HAL_ADC_Init+0x32c>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2200      	movs	r2, #0
 800386c:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003872:	f023 0303 	bic.w	r3, r3, #3
 8003876:	f043 0201 	orr.w	r2, r3, #1
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	659a      	str	r2, [r3, #88]	@ 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800387e:	e018      	b.n	80038b2 <HAL_ADC_Init+0x35e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003884:	f023 0312 	bic.w	r3, r3, #18
 8003888:	f043 0210 	orr.w	r2, r3, #16
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003894:	f043 0201 	orr.w	r2, r3, #1
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 800389c:	2301      	movs	r3, #1
 800389e:	77fb      	strb	r3, [r7, #31]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80038a0:	e007      	b.n	80038b2 <HAL_ADC_Init+0x35e>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038a6:	f043 0210 	orr.w	r2, r3, #16
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80038ae:	2301      	movs	r3, #1
 80038b0:	77fb      	strb	r3, [r7, #31]
  }

  return tmp_hal_status;
 80038b2:	7ffb      	ldrb	r3, [r7, #31]
}
 80038b4:	4618      	mov	r0, r3
 80038b6:	3720      	adds	r7, #32
 80038b8:	46bd      	mov	sp, r7
 80038ba:	bd80      	pop	{r7, pc}

080038bc <HAL_ADC_DeInit>:
  *         common group is still running.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef *hadc)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b084      	sub	sp, #16
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check ADC handle */
  if (hadc == NULL)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d101      	bne.n	80038ce <HAL_ADC_DeInit+0x12>
  {
    return HAL_ERROR;
 80038ca:	2301      	movs	r3, #1
 80038cc:	e06a      	b.n	80039a4 <HAL_ADC_DeInit+0xe8>

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038d2:	f043 0202 	orr.w	r2, r3, #2
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Stop potential conversion on going, on regular group */
  tmp_hal_status = ADC_ConversionStop(hadc);
 80038da:	6878      	ldr	r0, [r7, #4]
 80038dc:	f000 fabe 	bl	8003e5c <ADC_ConversionStop>
 80038e0:	4603      	mov	r3, r0
 80038e2:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80038e4:	7bfb      	ldrb	r3, [r7, #15]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d10f      	bne.n	800390a <HAL_ADC_DeInit+0x4e>
  {
    /* Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80038ea:	6878      	ldr	r0, [r7, #4]
 80038ec:	f000 fb82 	bl	8003ff4 <ADC_Disable>
 80038f0:	4603      	mov	r3, r0
 80038f2:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80038f4:	7bfb      	ldrb	r3, [r7, #15]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d102      	bne.n	8003900 <HAL_ADC_DeInit+0x44>
    {
      /* Change ADC state */
      hadc->State = HAL_ADC_STATE_READY;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2201      	movs	r2, #1
 80038fe:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Disable ADC internal voltage regulator */
    LL_ADC_DisableInternalRegulator(hadc->Instance);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4618      	mov	r0, r3
 8003906:	f7ff fd7f 	bl	8003408 <LL_ADC_DisableInternalRegulator>
  /*       in HAL_ADC_MspDeInit() to reset the ADC peripheral using           */
  /*       system RCC hard reset.                                             */

  /* ========== Reset ADC registers ========== */
  /* Reset register IER */
  __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD3  | ADC_IT_AWD2 |
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	685b      	ldr	r3, [r3, #4]
 8003910:	687a      	ldr	r2, [r7, #4]
 8003912:	6812      	ldr	r2, [r2, #0]
 8003914:	f423 7367 	bic.w	r3, r3, #924	@ 0x39c
 8003918:	f023 0303 	bic.w	r3, r3, #3
 800391c:	6053      	str	r3, [r2, #4]
                              ADC_IT_AWD1  | ADC_IT_OVR  |
                              ADC_IT_EOS   | ADC_IT_EOC  |
                              ADC_IT_EOSMP | ADC_IT_RDY));

  /* Reset register ISR */
  __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD3  | ADC_FLAG_AWD2 |
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f240 329f 	movw	r2, #927	@ 0x39f
 8003926:	601a      	str	r2, [r3, #0]
  /* Reset register CR */
  /* Bits ADC_CR_ADCAL, ADC_CR_ADSTP, ADC_CR_ADSTART are in access mode     */
  /* "read-set": no direct reset applicable.                                */

  /* Reset register CFGR1 */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_AWD1CH   | ADC_CFGR1_AWD1EN  | ADC_CFGR1_AWD1SGL | ADC_CFGR1_DISCEN |
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	68d9      	ldr	r1, [r3, #12]
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681a      	ldr	r2, [r3, #0]
 8003932:	4b1e      	ldr	r3, [pc, #120]	@ (80039ac <HAL_ADC_DeInit+0xf0>)
 8003934:	400b      	ands	r3, r1
 8003936:	60d3      	str	r3, [r2, #12]
                             ADC_CFGR1_SCANDIR | ADC_CFGR1_DMACFG | ADC_CFGR1_DMAEN);

  /* Reset register CFGR2 */
  /* Note: Update of ADC clock mode is conditioned to ADC state disabled:   */
  /*       already done above.                                              */
  hadc->Instance->CFGR2 &= ~ADC_CFGR2_CKMODE;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	691a      	ldr	r2, [r3, #16]
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f022 4240 	bic.w	r2, r2, #3221225472	@ 0xc0000000
 8003946:	611a      	str	r2, [r3, #16]

  /* Reset register SMPR */
  hadc->Instance->SMPR &= ~ADC_SMPR_SMP1;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	695a      	ldr	r2, [r3, #20]
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f022 0207 	bic.w	r2, r2, #7
 8003956:	615a      	str	r2, [r3, #20]

  /* Reset register TR1 */
  hadc->Instance->TR1 &= ~(ADC_TR1_HT1 | ADC_TR1_LT1);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	6a1a      	ldr	r2, [r3, #32]
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f002 22f0 	and.w	r2, r2, #4026593280	@ 0xf000f000
 8003966:	621a      	str	r2, [r3, #32]

  /* Reset register CHSELR */
  hadc->Instance->CHSELR &= ~(ADC_CHSELR_SQ_ALL);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	2200      	movs	r2, #0
 8003974:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset register DR */
  /* bits in access mode read only, no direct reset applicable */

  /* Reset register CCR */
  ADC_COMMON->CCR &= ~(ADC_CCR_VBATEN | ADC_CCR_TSEN | ADC_CCR_VREFEN | ADC_CCR_PRESC);
 8003976:	4b0e      	ldr	r3, [pc, #56]	@ (80039b0 <HAL_ADC_DeInit+0xf4>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	4a0d      	ldr	r2, [pc, #52]	@ (80039b0 <HAL_ADC_DeInit+0xf4>)
 800397c:	f023 73fe 	bic.w	r3, r3, #33292288	@ 0x1fc0000
 8003980:	6013      	str	r3, [r2, #0]

  /* DeInit the low level hardware */
  hadc->MspDeInitCallback(hadc);
#else
  /* DeInit the low level hardware */
  HAL_ADC_MspDeInit(hadc);
 8003982:	6878      	ldr	r0, [r7, #4]
 8003984:	f7fd fd90 	bl	80014a8 <HAL_ADC_MspDeInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

  /* Reset HAL ADC handle variable */
  hadc->ADCGroupRegularSequencerRanks = 0x00000000UL;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2200      	movs	r2, #0
 800398c:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Set ADC error code to none */
  ADC_CLEAR_ERRORCODE(hadc);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2200      	movs	r2, #0
 8003992:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC state */
  hadc->State = HAL_ADC_STATE_RESET;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2200      	movs	r2, #0
 8003998:	659a      	str	r2, [r3, #88]	@ 0x58

  __HAL_UNLOCK(hadc);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2200      	movs	r2, #0
 800399e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return tmp_hal_status;
 80039a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80039a4:	4618      	mov	r0, r3
 80039a6:	3710      	adds	r7, #16
 80039a8:	46bd      	mov	sp, r7
 80039aa:	bd80      	pop	{r7, pc}
 80039ac:	833e0200 	.word	0x833e0200
 80039b0:	40012708 	.word	0x40012708

080039b4 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b084      	sub	sp, #16
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	4618      	mov	r0, r3
 80039c2:	f7ff fdb5 	bl	8003530 <LL_ADC_REG_IsConversionOngoing>
 80039c6:	4603      	mov	r3, r0
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d132      	bne.n	8003a32 <HAL_ADC_Start+0x7e>
  {
    __HAL_LOCK(hadc);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80039d2:	2b01      	cmp	r3, #1
 80039d4:	d101      	bne.n	80039da <HAL_ADC_Start+0x26>
 80039d6:	2302      	movs	r3, #2
 80039d8:	e02e      	b.n	8003a38 <HAL_ADC_Start+0x84>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2201      	movs	r2, #1
 80039de:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80039e2:	6878      	ldr	r0, [r7, #4]
 80039e4:	f000 fa80 	bl	8003ee8 <ADC_Enable>
 80039e8:	4603      	mov	r3, r0
 80039ea:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80039ec:	7bfb      	ldrb	r3, [r7, #15]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d11a      	bne.n	8003a28 <HAL_ADC_Start+0x74>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039f6:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80039fa:	f023 0301 	bic.w	r3, r3, #1
 80039fe:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2200      	movs	r2, #0
 8003a0a:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	221c      	movs	r2, #28
 8003a12:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2200      	movs	r2, #0
 8003a18:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4618      	mov	r0, r3
 8003a22:	f7ff fd5f 	bl	80034e4 <LL_ADC_REG_StartConversion>
 8003a26:	e006      	b.n	8003a36 <HAL_ADC_Start+0x82>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
 8003a30:	e001      	b.n	8003a36 <HAL_ADC_Start+0x82>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003a32:	2302      	movs	r3, #2
 8003a34:	73fb      	strb	r3, [r7, #15]
  }

  return tmp_hal_status;
 8003a36:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a38:	4618      	mov	r0, r3
 8003a3a:	3710      	adds	r7, #16
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	bd80      	pop	{r7, pc}

08003a40 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b084      	sub	sp, #16
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003a4e:	2b01      	cmp	r3, #1
 8003a50:	d101      	bne.n	8003a56 <HAL_ADC_Stop+0x16>
 8003a52:	2302      	movs	r3, #2
 8003a54:	e022      	b.n	8003a9c <HAL_ADC_Stop+0x5c>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2201      	movs	r2, #1
 8003a5a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 8003a5e:	6878      	ldr	r0, [r7, #4]
 8003a60:	f000 f9fc 	bl	8003e5c <ADC_ConversionStop>
 8003a64:	4603      	mov	r3, r0
 8003a66:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8003a68:	7bfb      	ldrb	r3, [r7, #15]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d111      	bne.n	8003a92 <HAL_ADC_Stop+0x52>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8003a6e:	6878      	ldr	r0, [r7, #4]
 8003a70:	f000 fac0 	bl	8003ff4 <ADC_Disable>
 8003a74:	4603      	mov	r3, r0
 8003a76:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8003a78:	7bfb      	ldrb	r3, [r7, #15]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d109      	bne.n	8003a92 <HAL_ADC_Stop+0x52>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a82:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003a86:	f023 0301 	bic.w	r3, r3, #1
 8003a8a:	f043 0201 	orr.w	r2, r3, #1
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_REG_BUSY,
                        HAL_ADC_STATE_READY);
    }
  }

  __HAL_UNLOCK(hadc);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2200      	movs	r2, #0
 8003a96:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return tmp_hal_status;
 8003a9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	3710      	adds	r7, #16
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	bd80      	pop	{r7, pc}

08003aa4 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b084      	sub	sp, #16
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
 8003aac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	695b      	ldr	r3, [r3, #20]
 8003ab2:	2b08      	cmp	r3, #8
 8003ab4:	d102      	bne.n	8003abc <HAL_ADC_PollForConversion+0x18>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 8003ab6:	2308      	movs	r3, #8
 8003ab8:	60fb      	str	r3, [r7, #12]
 8003aba:	e010      	b.n	8003ade <HAL_ADC_PollForConversion+0x3a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	68db      	ldr	r3, [r3, #12]
 8003ac2:	f003 0301 	and.w	r3, r3, #1
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d007      	beq.n	8003ada <HAL_ADC_PollForConversion+0x36>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ace:	f043 0220 	orr.w	r2, r3, #32
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	e077      	b.n	8003bca <HAL_ADC_PollForConversion+0x126>
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 8003ada:	2304      	movs	r3, #4
 8003adc:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8003ade:	f7fe fb8b 	bl	80021f8 <HAL_GetTick>
 8003ae2:	60b8      	str	r0, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8003ae4:	e021      	b.n	8003b2a <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003aec:	d01d      	beq.n	8003b2a <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8003aee:	f7fe fb83 	bl	80021f8 <HAL_GetTick>
 8003af2:	4602      	mov	r2, r0
 8003af4:	68bb      	ldr	r3, [r7, #8]
 8003af6:	1ad3      	subs	r3, r2, r3
 8003af8:	683a      	ldr	r2, [r7, #0]
 8003afa:	429a      	cmp	r2, r3
 8003afc:	d302      	bcc.n	8003b04 <HAL_ADC_PollForConversion+0x60>
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d112      	bne.n	8003b2a <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	681a      	ldr	r2, [r3, #0]
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	4013      	ands	r3, r2
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d10b      	bne.n	8003b2a <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b16:	f043 0204 	orr.w	r2, r3, #4
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	659a      	str	r2, [r3, #88]	@ 0x58

          __HAL_UNLOCK(hadc);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2200      	movs	r2, #0
 8003b22:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

          return HAL_TIMEOUT;
 8003b26:	2303      	movs	r3, #3
 8003b28:	e04f      	b.n	8003bca <HAL_ADC_PollForConversion+0x126>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	681a      	ldr	r2, [r3, #0]
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	4013      	ands	r3, r2
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d0d6      	beq.n	8003ae6 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b3c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	4618      	mov	r0, r3
 8003b4a:	f7ff fbd6 	bl	80032fa <LL_ADC_REG_IsTriggerSourceSWStart>
 8003b4e:	4603      	mov	r3, r0
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d031      	beq.n	8003bb8 <HAL_ADC_PollForConversion+0x114>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	7e9b      	ldrb	r3, [r3, #26]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d12d      	bne.n	8003bb8 <HAL_ADC_PollForConversion+0x114>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f003 0308 	and.w	r3, r3, #8
 8003b66:	2b08      	cmp	r3, #8
 8003b68:	d126      	bne.n	8003bb8 <HAL_ADC_PollForConversion+0x114>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	4618      	mov	r0, r3
 8003b70:	f7ff fcde 	bl	8003530 <LL_ADC_REG_IsConversionOngoing>
 8003b74:	4603      	mov	r3, r0
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d112      	bne.n	8003ba0 <HAL_ADC_PollForConversion+0xfc>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	685a      	ldr	r2, [r3, #4]
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f022 020c 	bic.w	r2, r2, #12
 8003b88:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b8e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003b92:	f023 0301 	bic.w	r3, r3, #1
 8003b96:	f043 0201 	orr.w	r2, r3, #1
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	659a      	str	r2, [r3, #88]	@ 0x58
 8003b9e:	e00b      	b.n	8003bb8 <HAL_ADC_PollForConversion+0x114>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ba4:	f043 0220 	orr.w	r2, r3, #32
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bb0:	f043 0201 	orr.w	r2, r3, #1
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	7e1b      	ldrb	r3, [r3, #24]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d103      	bne.n	8003bc8 <HAL_ADC_PollForConversion+0x124>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	220c      	movs	r2, #12
 8003bc6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003bc8:	2300      	movs	r3, #0
}
 8003bca:	4618      	mov	r0, r3
 8003bcc:	3710      	adds	r7, #16
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	bd80      	pop	{r7, pc}

08003bd2 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8003bd2:	b480      	push	{r7}
 8003bd4:	b083      	sub	sp, #12
 8003bd6:	af00      	add	r7, sp, #0
 8003bd8:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8003be0:	4618      	mov	r0, r3
 8003be2:	370c      	adds	r7, #12
 8003be4:	46bd      	mov	sp, r7
 8003be6:	bc80      	pop	{r7}
 8003be8:	4770      	bx	lr
	...

08003bec <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b088      	sub	sp, #32
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
 8003bf4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(pConfig->Channel));
  assert_param(IS_ADC_SAMPLING_TIME_COMMON(pConfig->SamplingTime));

  if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	691b      	ldr	r3, [r3, #16]
 8003c02:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003c0c:	2b01      	cmp	r3, #1
 8003c0e:	d101      	bne.n	8003c14 <HAL_ADC_ConfigChannel+0x28>
 8003c10:	2302      	movs	r3, #2
 8003c12:	e110      	b.n	8003e36 <HAL_ADC_ConfigChannel+0x24a>
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2201      	movs	r2, #1
 8003c18:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4618      	mov	r0, r3
 8003c22:	f7ff fc85 	bl	8003530 <LL_ADC_REG_IsConversionOngoing>
 8003c26:	4603      	mov	r3, r0
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	f040 80f7 	bne.w	8003e1c <HAL_ADC_ConfigChannel+0x230>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	685b      	ldr	r3, [r3, #4]
 8003c32:	2b02      	cmp	r3, #2
 8003c34:	f000 80b1 	beq.w	8003d9a <HAL_ADC_ConfigChannel+0x1ae>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	691b      	ldr	r3, [r3, #16]
 8003c3c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003c40:	d004      	beq.n	8003c4c <HAL_ADC_ConfigChannel+0x60>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003c46:	4a7e      	ldr	r2, [pc, #504]	@ (8003e40 <HAL_ADC_ConfigChannel+0x254>)
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	d108      	bne.n	8003c5e <HAL_ADC_ConfigChannel+0x72>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681a      	ldr	r2, [r3, #0]
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	4619      	mov	r1, r3
 8003c56:	4610      	mov	r0, r2
 8003c58:	f7ff fb82 	bl	8003360 <LL_ADC_REG_SetSequencerChAdd>
 8003c5c:	e041      	b.n	8003ce2 <HAL_ADC_ConfigChannel+0xf6>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	685b      	ldr	r3, [r3, #4]
 8003c66:	f003 031f 	and.w	r3, r3, #31
 8003c6a:	210f      	movs	r1, #15
 8003c6c:	fa01 f303 	lsl.w	r3, r1, r3
 8003c70:	43db      	mvns	r3, r3
 8003c72:	401a      	ands	r2, r3
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d105      	bne.n	8003c8c <HAL_ADC_ConfigChannel+0xa0>
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	0e9b      	lsrs	r3, r3, #26
 8003c86:	f003 031f 	and.w	r3, r3, #31
 8003c8a:	e011      	b.n	8003cb0 <HAL_ADC_ConfigChannel+0xc4>
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c92:	693b      	ldr	r3, [r7, #16]
 8003c94:	fa93 f3a3 	rbit	r3, r3
 8003c98:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003c9e:	697b      	ldr	r3, [r7, #20]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d101      	bne.n	8003ca8 <HAL_ADC_ConfigChannel+0xbc>
  {
    return 32U;
 8003ca4:	2320      	movs	r3, #32
 8003ca6:	e003      	b.n	8003cb0 <HAL_ADC_ConfigChannel+0xc4>
  }
  return __builtin_clz(value);
 8003ca8:	697b      	ldr	r3, [r7, #20]
 8003caa:	fab3 f383 	clz	r3, r3
 8003cae:	b2db      	uxtb	r3, r3
 8003cb0:	6839      	ldr	r1, [r7, #0]
 8003cb2:	6849      	ldr	r1, [r1, #4]
 8003cb4:	f001 011f 	and.w	r1, r1, #31
 8003cb8:	408b      	lsls	r3, r1
 8003cba:	431a      	orrs	r2, r3
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	685b      	ldr	r3, [r3, #4]
 8003cc4:	089b      	lsrs	r3, r3, #2
 8003cc6:	1c5a      	adds	r2, r3, #1
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	69db      	ldr	r3, [r3, #28]
 8003ccc:	429a      	cmp	r2, r3
 8003cce:	d808      	bhi.n	8003ce2 <HAL_ADC_ConfigChannel+0xf6>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6818      	ldr	r0, [r3, #0]
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	6859      	ldr	r1, [r3, #4]
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	461a      	mov	r2, r3
 8003cde:	f7ff fb1e 	bl	800331e <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6818      	ldr	r0, [r3, #0]
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	6819      	ldr	r1, [r3, #0]
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	689b      	ldr	r3, [r3, #8]
 8003cee:	461a      	mov	r2, r3
 8003cf0:	f7ff fb5b 	bl	80033aa <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	f280 8097 	bge.w	8003e2c <HAL_ADC_ConfigChannel+0x240>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003cfe:	4851      	ldr	r0, [pc, #324]	@ (8003e44 <HAL_ADC_ConfigChannel+0x258>)
 8003d00:	f7ff fab8 	bl	8003274 <LL_ADC_GetCommonPathInternalCh>
 8003d04:	61b8      	str	r0, [r7, #24]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	4a4f      	ldr	r2, [pc, #316]	@ (8003e48 <HAL_ADC_ConfigChannel+0x25c>)
 8003d0c:	4293      	cmp	r3, r2
 8003d0e:	d120      	bne.n	8003d52 <HAL_ADC_ConfigChannel+0x166>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003d10:	69bb      	ldr	r3, [r7, #24]
 8003d12:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d11b      	bne.n	8003d52 <HAL_ADC_ConfigChannel+0x166>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003d1a:	69bb      	ldr	r3, [r7, #24]
 8003d1c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003d20:	4619      	mov	r1, r3
 8003d22:	4848      	ldr	r0, [pc, #288]	@ (8003e44 <HAL_ADC_ConfigChannel+0x258>)
 8003d24:	f7ff fa94 	bl	8003250 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003d28:	4b48      	ldr	r3, [pc, #288]	@ (8003e4c <HAL_ADC_ConfigChannel+0x260>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	099b      	lsrs	r3, r3, #6
 8003d2e:	4a48      	ldr	r2, [pc, #288]	@ (8003e50 <HAL_ADC_ConfigChannel+0x264>)
 8003d30:	fba2 2303 	umull	r2, r3, r2, r3
 8003d34:	099b      	lsrs	r3, r3, #6
 8003d36:	1c5a      	adds	r2, r3, #1
 8003d38:	4613      	mov	r3, r2
 8003d3a:	005b      	lsls	r3, r3, #1
 8003d3c:	4413      	add	r3, r2
 8003d3e:	009b      	lsls	r3, r3, #2
 8003d40:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003d42:	e002      	b.n	8003d4a <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 8003d44:	68bb      	ldr	r3, [r7, #8]
 8003d46:	3b01      	subs	r3, #1
 8003d48:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003d4a:	68bb      	ldr	r3, [r7, #8]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d1f9      	bne.n	8003d44 <HAL_ADC_ConfigChannel+0x158>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003d50:	e06c      	b.n	8003e2c <HAL_ADC_ConfigChannel+0x240>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	4a3f      	ldr	r2, [pc, #252]	@ (8003e54 <HAL_ADC_ConfigChannel+0x268>)
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d10c      	bne.n	8003d76 <HAL_ADC_ConfigChannel+0x18a>
 8003d5c:	69bb      	ldr	r3, [r7, #24]
 8003d5e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d107      	bne.n	8003d76 <HAL_ADC_ConfigChannel+0x18a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003d66:	69bb      	ldr	r3, [r7, #24]
 8003d68:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003d6c:	4619      	mov	r1, r3
 8003d6e:	4835      	ldr	r0, [pc, #212]	@ (8003e44 <HAL_ADC_ConfigChannel+0x258>)
 8003d70:	f7ff fa6e 	bl	8003250 <LL_ADC_SetCommonPathInternalCh>
 8003d74:	e05a      	b.n	8003e2c <HAL_ADC_ConfigChannel+0x240>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	4a37      	ldr	r2, [pc, #220]	@ (8003e58 <HAL_ADC_ConfigChannel+0x26c>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d155      	bne.n	8003e2c <HAL_ADC_ConfigChannel+0x240>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003d80:	69bb      	ldr	r3, [r7, #24]
 8003d82:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d150      	bne.n	8003e2c <HAL_ADC_ConfigChannel+0x240>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003d8a:	69bb      	ldr	r3, [r7, #24]
 8003d8c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003d90:	4619      	mov	r1, r3
 8003d92:	482c      	ldr	r0, [pc, #176]	@ (8003e44 <HAL_ADC_ConfigChannel+0x258>)
 8003d94:	f7ff fa5c 	bl	8003250 <LL_ADC_SetCommonPathInternalCh>
 8003d98:	e048      	b.n	8003e2c <HAL_ADC_ConfigChannel+0x240>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	691b      	ldr	r3, [r3, #16]
 8003d9e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003da2:	d004      	beq.n	8003dae <HAL_ADC_ConfigChannel+0x1c2>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003da8:	4a25      	ldr	r2, [pc, #148]	@ (8003e40 <HAL_ADC_ConfigChannel+0x254>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d107      	bne.n	8003dbe <HAL_ADC_ConfigChannel+0x1d2>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681a      	ldr	r2, [r3, #0]
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	4619      	mov	r1, r3
 8003db8:	4610      	mov	r0, r2
 8003dba:	f7ff fae3 	bl	8003384 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	da32      	bge.n	8003e2c <HAL_ADC_ConfigChannel+0x240>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003dc6:	481f      	ldr	r0, [pc, #124]	@ (8003e44 <HAL_ADC_ConfigChannel+0x258>)
 8003dc8:	f7ff fa54 	bl	8003274 <LL_ADC_GetCommonPathInternalCh>
 8003dcc:	61b8      	str	r0, [r7, #24]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	4a1d      	ldr	r2, [pc, #116]	@ (8003e48 <HAL_ADC_ConfigChannel+0x25c>)
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d107      	bne.n	8003de8 <HAL_ADC_ConfigChannel+0x1fc>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003dd8:	69bb      	ldr	r3, [r7, #24]
 8003dda:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8003dde:	4619      	mov	r1, r3
 8003de0:	4818      	ldr	r0, [pc, #96]	@ (8003e44 <HAL_ADC_ConfigChannel+0x258>)
 8003de2:	f7ff fa35 	bl	8003250 <LL_ADC_SetCommonPathInternalCh>
 8003de6:	e021      	b.n	8003e2c <HAL_ADC_ConfigChannel+0x240>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4a19      	ldr	r2, [pc, #100]	@ (8003e54 <HAL_ADC_ConfigChannel+0x268>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d107      	bne.n	8003e02 <HAL_ADC_ConfigChannel+0x216>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003df2:	69bb      	ldr	r3, [r7, #24]
 8003df4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003df8:	4619      	mov	r1, r3
 8003dfa:	4812      	ldr	r0, [pc, #72]	@ (8003e44 <HAL_ADC_ConfigChannel+0x258>)
 8003dfc:	f7ff fa28 	bl	8003250 <LL_ADC_SetCommonPathInternalCh>
 8003e00:	e014      	b.n	8003e2c <HAL_ADC_ConfigChannel+0x240>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	4a14      	ldr	r2, [pc, #80]	@ (8003e58 <HAL_ADC_ConfigChannel+0x26c>)
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	d10f      	bne.n	8003e2c <HAL_ADC_ConfigChannel+0x240>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003e0c:	69bb      	ldr	r3, [r7, #24]
 8003e0e:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8003e12:	4619      	mov	r1, r3
 8003e14:	480b      	ldr	r0, [pc, #44]	@ (8003e44 <HAL_ADC_ConfigChannel+0x258>)
 8003e16:	f7ff fa1b 	bl	8003250 <LL_ADC_SetCommonPathInternalCh>
 8003e1a:	e007      	b.n	8003e2c <HAL_ADC_ConfigChannel+0x240>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e20:	f043 0220 	orr.w	r2, r3, #32
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8003e28:	2301      	movs	r3, #1
 8003e2a:	77fb      	strb	r3, [r7, #31]
  }

  __HAL_UNLOCK(hadc);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2200      	movs	r2, #0
 8003e30:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return tmp_hal_status;
 8003e34:	7ffb      	ldrb	r3, [r7, #31]
}
 8003e36:	4618      	mov	r0, r3
 8003e38:	3720      	adds	r7, #32
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	bd80      	pop	{r7, pc}
 8003e3e:	bf00      	nop
 8003e40:	80000004 	.word	0x80000004
 8003e44:	40012708 	.word	0x40012708
 8003e48:	b0001000 	.word	0xb0001000
 8003e4c:	20000000 	.word	0x20000000
 8003e50:	053e2d63 	.word	0x053e2d63
 8003e54:	b8004000 	.word	0xb8004000
 8003e58:	b4002000 	.word	0xb4002000

08003e5c <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b084      	sub	sp, #16
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4618      	mov	r0, r3
 8003e6a:	f7ff fb61 	bl	8003530 <LL_ADC_REG_IsConversionOngoing>
 8003e6e:	4603      	mov	r3, r0
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d033      	beq.n	8003edc <ADC_ConversionStop+0x80>
  {
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4618      	mov	r0, r3
 8003e7a:	f7ff fb21 	bl	80034c0 <LL_ADC_IsDisableOngoing>
 8003e7e:	4603      	mov	r3, r0
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d104      	bne.n	8003e8e <ADC_ConversionStop+0x32>
    {
      /* Stop ADC group regular conversion */
      LL_ADC_REG_StopConversion(hadc->Instance);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4618      	mov	r0, r3
 8003e8a:	f7ff fb3e 	bl	800350a <LL_ADC_REG_StopConversion>
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003e8e:	f7fe f9b3 	bl	80021f8 <HAL_GetTick>
 8003e92:	60f8      	str	r0, [r7, #12]

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8003e94:	e01b      	b.n	8003ece <ADC_ConversionStop+0x72>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8003e96:	f7fe f9af 	bl	80021f8 <HAL_GetTick>
 8003e9a:	4602      	mov	r2, r0
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	1ad3      	subs	r3, r2, r3
 8003ea0:	2b02      	cmp	r3, #2
 8003ea2:	d914      	bls.n	8003ece <ADC_ConversionStop+0x72>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	689b      	ldr	r3, [r3, #8]
 8003eaa:	f003 0304 	and.w	r3, r3, #4
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d00d      	beq.n	8003ece <ADC_ConversionStop+0x72>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003eb6:	f043 0210 	orr.w	r2, r3, #16
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ec2:	f043 0201 	orr.w	r2, r3, #1
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8003eca:	2301      	movs	r3, #1
 8003ecc:	e007      	b.n	8003ede <ADC_ConversionStop+0x82>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	689b      	ldr	r3, [r3, #8]
 8003ed4:	f003 0304 	and.w	r3, r3, #4
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d1dc      	bne.n	8003e96 <ADC_ConversionStop+0x3a>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8003edc:	2300      	movs	r3, #0
}
 8003ede:	4618      	mov	r0, r3
 8003ee0:	3710      	adds	r7, #16
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	bd80      	pop	{r7, pc}
	...

08003ee8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b084      	sub	sp, #16
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4618      	mov	r0, r3
 8003efa:	f7ff facf 	bl	800349c <LL_ADC_IsEnabled>
 8003efe:	4603      	mov	r3, r0
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d169      	bne.n	8003fd8 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	689a      	ldr	r2, [r3, #8]
 8003f0a:	4b36      	ldr	r3, [pc, #216]	@ (8003fe4 <ADC_Enable+0xfc>)
 8003f0c:	4013      	ands	r3, r2
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d00d      	beq.n	8003f2e <ADC_Enable+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f16:	f043 0210 	orr.w	r2, r3, #16
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f22:	f043 0201 	orr.w	r2, r3, #1
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	e055      	b.n	8003fda <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4618      	mov	r0, r3
 8003f34:	f7ff fa8c 	bl	8003450 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003f38:	482b      	ldr	r0, [pc, #172]	@ (8003fe8 <ADC_Enable+0x100>)
 8003f3a:	f7ff f99b 	bl	8003274 <LL_ADC_GetCommonPathInternalCh>
 8003f3e:	4603      	mov	r3, r0
 8003f40:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d00f      	beq.n	8003f68 <ADC_Enable+0x80>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003f48:	4b28      	ldr	r3, [pc, #160]	@ (8003fec <ADC_Enable+0x104>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	099b      	lsrs	r3, r3, #6
 8003f4e:	4a28      	ldr	r2, [pc, #160]	@ (8003ff0 <ADC_Enable+0x108>)
 8003f50:	fba2 2303 	umull	r2, r3, r2, r3
 8003f54:	099b      	lsrs	r3, r3, #6
 8003f56:	3301      	adds	r3, #1
 8003f58:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003f5a:	e002      	b.n	8003f62 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8003f5c:	68bb      	ldr	r3, [r7, #8]
 8003f5e:	3b01      	subs	r3, #1
 8003f60:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003f62:	68bb      	ldr	r3, [r7, #8]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d1f9      	bne.n	8003f5c <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	7e5b      	ldrb	r3, [r3, #25]
 8003f6c:	2b01      	cmp	r3, #1
 8003f6e:	d033      	beq.n	8003fd8 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8003f70:	f7fe f942 	bl	80021f8 <HAL_GetTick>
 8003f74:	60f8      	str	r0, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003f76:	e028      	b.n	8003fca <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	f7ff fa8d 	bl	800349c <LL_ADC_IsEnabled>
 8003f82:	4603      	mov	r3, r0
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d104      	bne.n	8003f92 <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	f7ff fa5f 	bl	8003450 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003f92:	f7fe f931 	bl	80021f8 <HAL_GetTick>
 8003f96:	4602      	mov	r2, r0
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	1ad3      	subs	r3, r2, r3
 8003f9c:	2b02      	cmp	r3, #2
 8003f9e:	d914      	bls.n	8003fca <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f003 0301 	and.w	r3, r3, #1
 8003faa:	2b01      	cmp	r3, #1
 8003fac:	d00d      	beq.n	8003fca <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fb2:	f043 0210 	orr.w	r2, r3, #16
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	659a      	str	r2, [r3, #88]	@ 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003fbe:	f043 0201 	orr.w	r2, r3, #1
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	65da      	str	r2, [r3, #92]	@ 0x5c

            return HAL_ERROR;
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	e007      	b.n	8003fda <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f003 0301 	and.w	r3, r3, #1
 8003fd4:	2b01      	cmp	r3, #1
 8003fd6:	d1cf      	bne.n	8003f78 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003fd8:	2300      	movs	r3, #0
}
 8003fda:	4618      	mov	r0, r3
 8003fdc:	3710      	adds	r7, #16
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	bd80      	pop	{r7, pc}
 8003fe2:	bf00      	nop
 8003fe4:	80000017 	.word	0x80000017
 8003fe8:	40012708 	.word	0x40012708
 8003fec:	20000000 	.word	0x20000000
 8003ff0:	053e2d63 	.word	0x053e2d63

08003ff4 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b084      	sub	sp, #16
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4618      	mov	r0, r3
 8004002:	f7ff fa5d 	bl	80034c0 <LL_ADC_IsDisableOngoing>
 8004006:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4618      	mov	r0, r3
 800400e:	f7ff fa45 	bl	800349c <LL_ADC_IsEnabled>
 8004012:	4603      	mov	r3, r0
 8004014:	2b00      	cmp	r3, #0
 8004016:	d047      	beq.n	80040a8 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d144      	bne.n	80040a8 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	689b      	ldr	r3, [r3, #8]
 8004024:	f003 0305 	and.w	r3, r3, #5
 8004028:	2b01      	cmp	r3, #1
 800402a:	d10c      	bne.n	8004046 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	4618      	mov	r0, r3
 8004032:	f7ff fa20 	bl	8003476 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	2203      	movs	r2, #3
 800403c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800403e:	f7fe f8db 	bl	80021f8 <HAL_GetTick>
 8004042:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004044:	e029      	b.n	800409a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800404a:	f043 0210 	orr.w	r2, r3, #16
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	659a      	str	r2, [r3, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004056:	f043 0201 	orr.w	r2, r3, #1
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 800405e:	2301      	movs	r3, #1
 8004060:	e023      	b.n	80040aa <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004062:	f7fe f8c9 	bl	80021f8 <HAL_GetTick>
 8004066:	4602      	mov	r2, r0
 8004068:	68bb      	ldr	r3, [r7, #8]
 800406a:	1ad3      	subs	r3, r2, r3
 800406c:	2b02      	cmp	r3, #2
 800406e:	d914      	bls.n	800409a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	689b      	ldr	r3, [r3, #8]
 8004076:	f003 0301 	and.w	r3, r3, #1
 800407a:	2b00      	cmp	r3, #0
 800407c:	d00d      	beq.n	800409a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004082:	f043 0210 	orr.w	r2, r3, #16
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800408e:	f043 0201 	orr.w	r2, r3, #1
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8004096:	2301      	movs	r3, #1
 8004098:	e007      	b.n	80040aa <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	689b      	ldr	r3, [r3, #8]
 80040a0:	f003 0301 	and.w	r3, r3, #1
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d1dc      	bne.n	8004062 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80040a8:	2300      	movs	r3, #0
}
 80040aa:	4618      	mov	r0, r3
 80040ac:	3710      	adds	r7, #16
 80040ae:	46bd      	mov	sp, r7
 80040b0:	bd80      	pop	{r7, pc}

080040b2 <LL_ADC_SetCalibrationFactor>:
{
 80040b2:	b480      	push	{r7}
 80040b4:	b083      	sub	sp, #12
 80040b6:	af00      	add	r7, sp, #0
 80040b8:	6078      	str	r0, [r7, #4]
 80040ba:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CALFACT,
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80040c2:	f023 027f 	bic.w	r2, r3, #127	@ 0x7f
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	431a      	orrs	r2, r3
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
}
 80040d0:	bf00      	nop
 80040d2:	370c      	adds	r7, #12
 80040d4:	46bd      	mov	sp, r7
 80040d6:	bc80      	pop	{r7}
 80040d8:	4770      	bx	lr

080040da <LL_ADC_GetCalibrationFactor>:
{
 80040da:	b480      	push	{r7}
 80040dc:	b083      	sub	sp, #12
 80040de:	af00      	add	r7, sp, #0
 80040e0:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80040e8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 80040ec:	4618      	mov	r0, r3
 80040ee:	370c      	adds	r7, #12
 80040f0:	46bd      	mov	sp, r7
 80040f2:	bc80      	pop	{r7}
 80040f4:	4770      	bx	lr

080040f6 <LL_ADC_Enable>:
{
 80040f6:	b480      	push	{r7}
 80040f8:	b083      	sub	sp, #12
 80040fa:	af00      	add	r7, sp, #0
 80040fc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	689b      	ldr	r3, [r3, #8]
 8004102:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004106:	f023 0317 	bic.w	r3, r3, #23
 800410a:	f043 0201 	orr.w	r2, r3, #1
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	609a      	str	r2, [r3, #8]
}
 8004112:	bf00      	nop
 8004114:	370c      	adds	r7, #12
 8004116:	46bd      	mov	sp, r7
 8004118:	bc80      	pop	{r7}
 800411a:	4770      	bx	lr

0800411c <LL_ADC_Disable>:
{
 800411c:	b480      	push	{r7}
 800411e:	b083      	sub	sp, #12
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	689b      	ldr	r3, [r3, #8]
 8004128:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800412c:	f023 0317 	bic.w	r3, r3, #23
 8004130:	f043 0202 	orr.w	r2, r3, #2
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	609a      	str	r2, [r3, #8]
}
 8004138:	bf00      	nop
 800413a:	370c      	adds	r7, #12
 800413c:	46bd      	mov	sp, r7
 800413e:	bc80      	pop	{r7}
 8004140:	4770      	bx	lr

08004142 <LL_ADC_IsEnabled>:
{
 8004142:	b480      	push	{r7}
 8004144:	b083      	sub	sp, #12
 8004146:	af00      	add	r7, sp, #0
 8004148:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	689b      	ldr	r3, [r3, #8]
 800414e:	f003 0301 	and.w	r3, r3, #1
 8004152:	2b01      	cmp	r3, #1
 8004154:	d101      	bne.n	800415a <LL_ADC_IsEnabled+0x18>
 8004156:	2301      	movs	r3, #1
 8004158:	e000      	b.n	800415c <LL_ADC_IsEnabled+0x1a>
 800415a:	2300      	movs	r3, #0
}
 800415c:	4618      	mov	r0, r3
 800415e:	370c      	adds	r7, #12
 8004160:	46bd      	mov	sp, r7
 8004162:	bc80      	pop	{r7}
 8004164:	4770      	bx	lr

08004166 <LL_ADC_StartCalibration>:
{
 8004166:	b480      	push	{r7}
 8004168:	b083      	sub	sp, #12
 800416a:	af00      	add	r7, sp, #0
 800416c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	689b      	ldr	r3, [r3, #8]
 8004172:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004176:	f023 0317 	bic.w	r3, r3, #23
 800417a:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	609a      	str	r2, [r3, #8]
}
 8004182:	bf00      	nop
 8004184:	370c      	adds	r7, #12
 8004186:	46bd      	mov	sp, r7
 8004188:	bc80      	pop	{r7}
 800418a:	4770      	bx	lr

0800418c <LL_ADC_IsCalibrationOnGoing>:
{
 800418c:	b480      	push	{r7}
 800418e:	b083      	sub	sp, #12
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	689b      	ldr	r3, [r3, #8]
 8004198:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800419c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80041a0:	d101      	bne.n	80041a6 <LL_ADC_IsCalibrationOnGoing+0x1a>
 80041a2:	2301      	movs	r3, #1
 80041a4:	e000      	b.n	80041a8 <LL_ADC_IsCalibrationOnGoing+0x1c>
 80041a6:	2300      	movs	r3, #0
}
 80041a8:	4618      	mov	r0, r3
 80041aa:	370c      	adds	r7, #12
 80041ac:	46bd      	mov	sp, r7
 80041ae:	bc80      	pop	{r7}
 80041b0:	4770      	bx	lr

080041b2 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 80041b2:	b580      	push	{r7, lr}
 80041b4:	b088      	sub	sp, #32
 80041b6:	af00      	add	r7, sp, #0
 80041b8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80041ba:	2300      	movs	r3, #0
 80041bc:	60bb      	str	r3, [r7, #8]
  uint32_t backup_setting_cfgr1;
  uint32_t calibration_index;
  uint32_t calibration_factor_accumulated = 0;
 80041be:	2300      	movs	r3, #0
 80041c0:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80041c8:	2b01      	cmp	r3, #1
 80041ca:	d101      	bne.n	80041d0 <HAL_ADCEx_Calibration_Start+0x1e>
 80041cc:	2302      	movs	r3, #2
 80041ce:	e0b9      	b.n	8004344 <HAL_ADCEx_Calibration_Start+0x192>
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2201      	movs	r2, #1
 80041d4:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80041d8:	6878      	ldr	r0, [r7, #4]
 80041da:	f7ff ff0b 	bl	8003ff4 <ADC_Disable>
 80041de:	4603      	mov	r3, r0
 80041e0:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	4618      	mov	r0, r3
 80041e8:	f7ff ffab 	bl	8004142 <LL_ADC_IsEnabled>
 80041ec:	4603      	mov	r3, r0
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	f040 809d 	bne.w	800432e <HAL_ADCEx_Calibration_Start+0x17c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041f8:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80041fc:	f043 0202 	orr.w	r2, r3, #2
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Note: Specificity of this STM32 series: Calibration factor is          */
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	68da      	ldr	r2, [r3, #12]
 800420a:	f248 0303 	movw	r3, #32771	@ 0x8003
 800420e:	4013      	ands	r3, r2
 8004210:	613b      	str	r3, [r7, #16]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	68db      	ldr	r3, [r3, #12]
 8004218:	687a      	ldr	r2, [r7, #4]
 800421a:	6812      	ldr	r2, [r2, #0]
 800421c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004220:	f023 0303 	bic.w	r3, r3, #3
 8004224:	60d3      	str	r3, [r2, #12]

    /* ADC calibration procedure */
    /* Note: Perform an averaging of 8 calibrations for optimized accuracy */
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8004226:	2300      	movs	r3, #0
 8004228:	61fb      	str	r3, [r7, #28]
 800422a:	e02e      	b.n	800428a <HAL_ADCEx_Calibration_Start+0xd8>
    {
      /* Start ADC calibration */
      LL_ADC_StartCalibration(hadc->Instance);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4618      	mov	r0, r3
 8004232:	f7ff ff98 	bl	8004166 <LL_ADC_StartCalibration>

      /* Wait for calibration completion */
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004236:	e014      	b.n	8004262 <HAL_ADCEx_Calibration_Start+0xb0>
      {
        wait_loop_index++;
 8004238:	68bb      	ldr	r3, [r7, #8]
 800423a:	3301      	adds	r3, #1
 800423c:	60bb      	str	r3, [r7, #8]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800423e:	68bb      	ldr	r3, [r7, #8]
 8004240:	f5b3 3f2e 	cmp.w	r3, #178176	@ 0x2b800
 8004244:	d30d      	bcc.n	8004262 <HAL_ADCEx_Calibration_Start+0xb0>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800424a:	f023 0312 	bic.w	r3, r3, #18
 800424e:	f043 0210 	orr.w	r2, r3, #16
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	659a      	str	r2, [r3, #88]	@ 0x58
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          __HAL_UNLOCK(hadc);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2200      	movs	r2, #0
 800425a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

          return HAL_ERROR;
 800425e:	2301      	movs	r3, #1
 8004260:	e070      	b.n	8004344 <HAL_ADCEx_Calibration_Start+0x192>
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4618      	mov	r0, r3
 8004268:	f7ff ff90 	bl	800418c <LL_ADC_IsCalibrationOnGoing>
 800426c:	4603      	mov	r3, r0
 800426e:	2b00      	cmp	r3, #0
 8004270:	d1e2      	bne.n	8004238 <HAL_ADCEx_Calibration_Start+0x86>
        }
      }

      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	4618      	mov	r0, r3
 8004278:	f7ff ff2f 	bl	80040da <LL_ADC_GetCalibrationFactor>
 800427c:	4602      	mov	r2, r0
 800427e:	69bb      	ldr	r3, [r7, #24]
 8004280:	4413      	add	r3, r2
 8004282:	61bb      	str	r3, [r7, #24]
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8004284:	69fb      	ldr	r3, [r7, #28]
 8004286:	3301      	adds	r3, #1
 8004288:	61fb      	str	r3, [r7, #28]
 800428a:	69fb      	ldr	r3, [r7, #28]
 800428c:	2b07      	cmp	r3, #7
 800428e:	d9cd      	bls.n	800422c <HAL_ADCEx_Calibration_Start+0x7a>
    }
    /* Compute average */
    calibration_factor_accumulated /= calibration_index;
 8004290:	69ba      	ldr	r2, [r7, #24]
 8004292:	69fb      	ldr	r3, [r7, #28]
 8004294:	fbb2 f3f3 	udiv	r3, r2, r3
 8004298:	61bb      	str	r3, [r7, #24]
    /* Apply calibration factor */
    LL_ADC_Enable(hadc->Instance);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	4618      	mov	r0, r3
 80042a0:	f7ff ff29 	bl	80040f6 <LL_ADC_Enable>
    LL_ADC_SetCalibrationFactor(hadc->Instance, calibration_factor_accumulated);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	69b9      	ldr	r1, [r7, #24]
 80042aa:	4618      	mov	r0, r3
 80042ac:	f7ff ff01 	bl	80040b2 <LL_ADC_SetCalibrationFactor>
    LL_ADC_Disable(hadc->Instance);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	4618      	mov	r0, r3
 80042b6:	f7ff ff31 	bl	800411c <LL_ADC_Disable>

    /* Wait for ADC effectively disabled before changing configuration */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80042ba:	f7fd ff9d 	bl	80021f8 <HAL_GetTick>
 80042be:	60f8      	str	r0, [r7, #12]

    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80042c0:	e01c      	b.n	80042fc <HAL_ADCEx_Calibration_Start+0x14a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80042c2:	f7fd ff99 	bl	80021f8 <HAL_GetTick>
 80042c6:	4602      	mov	r2, r0
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	1ad3      	subs	r3, r2, r3
 80042cc:	2b02      	cmp	r3, #2
 80042ce:	d915      	bls.n	80042fc <HAL_ADCEx_Calibration_Start+0x14a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	4618      	mov	r0, r3
 80042d6:	f7ff ff34 	bl	8004142 <LL_ADC_IsEnabled>
 80042da:	4603      	mov	r3, r0
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d00d      	beq.n	80042fc <HAL_ADCEx_Calibration_Start+0x14a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042e4:	f043 0210 	orr.w	r2, r3, #16
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042f0:	f043 0201 	orr.w	r2, r3, #1
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 80042f8:	2301      	movs	r3, #1
 80042fa:	e023      	b.n	8004344 <HAL_ADCEx_Calibration_Start+0x192>
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4618      	mov	r0, r3
 8004302:	f7ff ff1e 	bl	8004142 <LL_ADC_IsEnabled>
 8004306:	4603      	mov	r3, r0
 8004308:	2b00      	cmp	r3, #0
 800430a:	d1da      	bne.n	80042c2 <HAL_ADCEx_Calibration_Start+0x110>
        }
      }
    }

    /* Restore configuration after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	68d9      	ldr	r1, [r3, #12]
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	693a      	ldr	r2, [r7, #16]
 8004318:	430a      	orrs	r2, r1
 800431a:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004320:	f023 0303 	bic.w	r3, r3, #3
 8004324:	f043 0201 	orr.w	r2, r3, #1
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	659a      	str	r2, [r3, #88]	@ 0x58
 800432c:	e005      	b.n	800433a <HAL_ADCEx_Calibration_Start+0x188>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004332:	f043 0210 	orr.w	r2, r3, #16
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2200      	movs	r2, #0
 800433e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return tmp_hal_status;
 8004342:	7dfb      	ldrb	r3, [r7, #23]
}
 8004344:	4618      	mov	r0, r3
 8004346:	3720      	adds	r7, #32
 8004348:	46bd      	mov	sp, r7
 800434a:	bd80      	pop	{r7, pc}

0800434c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800434c:	b480      	push	{r7}
 800434e:	b085      	sub	sp, #20
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	f003 0307 	and.w	r3, r3, #7
 800435a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800435c:	4b0c      	ldr	r3, [pc, #48]	@ (8004390 <__NVIC_SetPriorityGrouping+0x44>)
 800435e:	68db      	ldr	r3, [r3, #12]
 8004360:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004362:	68ba      	ldr	r2, [r7, #8]
 8004364:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004368:	4013      	ands	r3, r2
 800436a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004370:	68bb      	ldr	r3, [r7, #8]
 8004372:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004374:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004378:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800437c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800437e:	4a04      	ldr	r2, [pc, #16]	@ (8004390 <__NVIC_SetPriorityGrouping+0x44>)
 8004380:	68bb      	ldr	r3, [r7, #8]
 8004382:	60d3      	str	r3, [r2, #12]
}
 8004384:	bf00      	nop
 8004386:	3714      	adds	r7, #20
 8004388:	46bd      	mov	sp, r7
 800438a:	bc80      	pop	{r7}
 800438c:	4770      	bx	lr
 800438e:	bf00      	nop
 8004390:	e000ed00 	.word	0xe000ed00

08004394 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004394:	b480      	push	{r7}
 8004396:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004398:	4b04      	ldr	r3, [pc, #16]	@ (80043ac <__NVIC_GetPriorityGrouping+0x18>)
 800439a:	68db      	ldr	r3, [r3, #12]
 800439c:	0a1b      	lsrs	r3, r3, #8
 800439e:	f003 0307 	and.w	r3, r3, #7
}
 80043a2:	4618      	mov	r0, r3
 80043a4:	46bd      	mov	sp, r7
 80043a6:	bc80      	pop	{r7}
 80043a8:	4770      	bx	lr
 80043aa:	bf00      	nop
 80043ac:	e000ed00 	.word	0xe000ed00

080043b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80043b0:	b480      	push	{r7}
 80043b2:	b083      	sub	sp, #12
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	4603      	mov	r3, r0
 80043b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80043ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	db0b      	blt.n	80043da <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80043c2:	79fb      	ldrb	r3, [r7, #7]
 80043c4:	f003 021f 	and.w	r2, r3, #31
 80043c8:	4906      	ldr	r1, [pc, #24]	@ (80043e4 <__NVIC_EnableIRQ+0x34>)
 80043ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043ce:	095b      	lsrs	r3, r3, #5
 80043d0:	2001      	movs	r0, #1
 80043d2:	fa00 f202 	lsl.w	r2, r0, r2
 80043d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80043da:	bf00      	nop
 80043dc:	370c      	adds	r7, #12
 80043de:	46bd      	mov	sp, r7
 80043e0:	bc80      	pop	{r7}
 80043e2:	4770      	bx	lr
 80043e4:	e000e100 	.word	0xe000e100

080043e8 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80043e8:	b480      	push	{r7}
 80043ea:	b083      	sub	sp, #12
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	4603      	mov	r3, r0
 80043f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80043f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	db12      	blt.n	8004420 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80043fa:	79fb      	ldrb	r3, [r7, #7]
 80043fc:	f003 021f 	and.w	r2, r3, #31
 8004400:	490a      	ldr	r1, [pc, #40]	@ (800442c <__NVIC_DisableIRQ+0x44>)
 8004402:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004406:	095b      	lsrs	r3, r3, #5
 8004408:	2001      	movs	r0, #1
 800440a:	fa00 f202 	lsl.w	r2, r0, r2
 800440e:	3320      	adds	r3, #32
 8004410:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8004414:	f3bf 8f4f 	dsb	sy
}
 8004418:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800441a:	f3bf 8f6f 	isb	sy
}
 800441e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8004420:	bf00      	nop
 8004422:	370c      	adds	r7, #12
 8004424:	46bd      	mov	sp, r7
 8004426:	bc80      	pop	{r7}
 8004428:	4770      	bx	lr
 800442a:	bf00      	nop
 800442c:	e000e100 	.word	0xe000e100

08004430 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004430:	b480      	push	{r7}
 8004432:	b083      	sub	sp, #12
 8004434:	af00      	add	r7, sp, #0
 8004436:	4603      	mov	r3, r0
 8004438:	6039      	str	r1, [r7, #0]
 800443a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800443c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004440:	2b00      	cmp	r3, #0
 8004442:	db0a      	blt.n	800445a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	b2da      	uxtb	r2, r3
 8004448:	490c      	ldr	r1, [pc, #48]	@ (800447c <__NVIC_SetPriority+0x4c>)
 800444a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800444e:	0112      	lsls	r2, r2, #4
 8004450:	b2d2      	uxtb	r2, r2
 8004452:	440b      	add	r3, r1
 8004454:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004458:	e00a      	b.n	8004470 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	b2da      	uxtb	r2, r3
 800445e:	4908      	ldr	r1, [pc, #32]	@ (8004480 <__NVIC_SetPriority+0x50>)
 8004460:	79fb      	ldrb	r3, [r7, #7]
 8004462:	f003 030f 	and.w	r3, r3, #15
 8004466:	3b04      	subs	r3, #4
 8004468:	0112      	lsls	r2, r2, #4
 800446a:	b2d2      	uxtb	r2, r2
 800446c:	440b      	add	r3, r1
 800446e:	761a      	strb	r2, [r3, #24]
}
 8004470:	bf00      	nop
 8004472:	370c      	adds	r7, #12
 8004474:	46bd      	mov	sp, r7
 8004476:	bc80      	pop	{r7}
 8004478:	4770      	bx	lr
 800447a:	bf00      	nop
 800447c:	e000e100 	.word	0xe000e100
 8004480:	e000ed00 	.word	0xe000ed00

08004484 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004484:	b480      	push	{r7}
 8004486:	b089      	sub	sp, #36	@ 0x24
 8004488:	af00      	add	r7, sp, #0
 800448a:	60f8      	str	r0, [r7, #12]
 800448c:	60b9      	str	r1, [r7, #8]
 800448e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	f003 0307 	and.w	r3, r3, #7
 8004496:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004498:	69fb      	ldr	r3, [r7, #28]
 800449a:	f1c3 0307 	rsb	r3, r3, #7
 800449e:	2b04      	cmp	r3, #4
 80044a0:	bf28      	it	cs
 80044a2:	2304      	movcs	r3, #4
 80044a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80044a6:	69fb      	ldr	r3, [r7, #28]
 80044a8:	3304      	adds	r3, #4
 80044aa:	2b06      	cmp	r3, #6
 80044ac:	d902      	bls.n	80044b4 <NVIC_EncodePriority+0x30>
 80044ae:	69fb      	ldr	r3, [r7, #28]
 80044b0:	3b03      	subs	r3, #3
 80044b2:	e000      	b.n	80044b6 <NVIC_EncodePriority+0x32>
 80044b4:	2300      	movs	r3, #0
 80044b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80044b8:	f04f 32ff 	mov.w	r2, #4294967295
 80044bc:	69bb      	ldr	r3, [r7, #24]
 80044be:	fa02 f303 	lsl.w	r3, r2, r3
 80044c2:	43da      	mvns	r2, r3
 80044c4:	68bb      	ldr	r3, [r7, #8]
 80044c6:	401a      	ands	r2, r3
 80044c8:	697b      	ldr	r3, [r7, #20]
 80044ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80044cc:	f04f 31ff 	mov.w	r1, #4294967295
 80044d0:	697b      	ldr	r3, [r7, #20]
 80044d2:	fa01 f303 	lsl.w	r3, r1, r3
 80044d6:	43d9      	mvns	r1, r3
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80044dc:	4313      	orrs	r3, r2
         );
}
 80044de:	4618      	mov	r0, r3
 80044e0:	3724      	adds	r7, #36	@ 0x24
 80044e2:	46bd      	mov	sp, r7
 80044e4:	bc80      	pop	{r7}
 80044e6:	4770      	bx	lr

080044e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b082      	sub	sp, #8
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80044f0:	6878      	ldr	r0, [r7, #4]
 80044f2:	f7ff ff2b 	bl	800434c <__NVIC_SetPriorityGrouping>
}
 80044f6:	bf00      	nop
 80044f8:	3708      	adds	r7, #8
 80044fa:	46bd      	mov	sp, r7
 80044fc:	bd80      	pop	{r7, pc}

080044fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80044fe:	b580      	push	{r7, lr}
 8004500:	b086      	sub	sp, #24
 8004502:	af00      	add	r7, sp, #0
 8004504:	4603      	mov	r3, r0
 8004506:	60b9      	str	r1, [r7, #8]
 8004508:	607a      	str	r2, [r7, #4]
 800450a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800450c:	f7ff ff42 	bl	8004394 <__NVIC_GetPriorityGrouping>
 8004510:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004512:	687a      	ldr	r2, [r7, #4]
 8004514:	68b9      	ldr	r1, [r7, #8]
 8004516:	6978      	ldr	r0, [r7, #20]
 8004518:	f7ff ffb4 	bl	8004484 <NVIC_EncodePriority>
 800451c:	4602      	mov	r2, r0
 800451e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004522:	4611      	mov	r1, r2
 8004524:	4618      	mov	r0, r3
 8004526:	f7ff ff83 	bl	8004430 <__NVIC_SetPriority>
}
 800452a:	bf00      	nop
 800452c:	3718      	adds	r7, #24
 800452e:	46bd      	mov	sp, r7
 8004530:	bd80      	pop	{r7, pc}

08004532 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004532:	b580      	push	{r7, lr}
 8004534:	b082      	sub	sp, #8
 8004536:	af00      	add	r7, sp, #0
 8004538:	4603      	mov	r3, r0
 800453a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800453c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004540:	4618      	mov	r0, r3
 8004542:	f7ff ff35 	bl	80043b0 <__NVIC_EnableIRQ>
}
 8004546:	bf00      	nop
 8004548:	3708      	adds	r7, #8
 800454a:	46bd      	mov	sp, r7
 800454c:	bd80      	pop	{r7, pc}

0800454e <HAL_NVIC_DisableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800454e:	b580      	push	{r7, lr}
 8004550:	b082      	sub	sp, #8
 8004552:	af00      	add	r7, sp, #0
 8004554:	4603      	mov	r3, r0
 8004556:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8004558:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800455c:	4618      	mov	r0, r3
 800455e:	f7ff ff43 	bl	80043e8 <__NVIC_DisableIRQ>
}
 8004562:	bf00      	nop
 8004564:	3708      	adds	r7, #8
 8004566:	46bd      	mov	sp, r7
 8004568:	bd80      	pop	{r7, pc}
	...

0800456c <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800456c:	b580      	push	{r7, lr}
 800456e:	b082      	sub	sp, #8
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d101      	bne.n	800457e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800457a:	2301      	movs	r3, #1
 800457c:	e08e      	b.n	800469c <HAL_DMA_Init+0x130>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	461a      	mov	r2, r3
 8004584:	4b47      	ldr	r3, [pc, #284]	@ (80046a4 <HAL_DMA_Init+0x138>)
 8004586:	429a      	cmp	r2, r3
 8004588:	d80f      	bhi.n	80045aa <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	461a      	mov	r2, r3
 8004590:	4b45      	ldr	r3, [pc, #276]	@ (80046a8 <HAL_DMA_Init+0x13c>)
 8004592:	4413      	add	r3, r2
 8004594:	4a45      	ldr	r2, [pc, #276]	@ (80046ac <HAL_DMA_Init+0x140>)
 8004596:	fba2 2303 	umull	r2, r3, r2, r3
 800459a:	091b      	lsrs	r3, r3, #4
 800459c:	009a      	lsls	r2, r3, #2
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	4a42      	ldr	r2, [pc, #264]	@ (80046b0 <HAL_DMA_Init+0x144>)
 80045a6:	641a      	str	r2, [r3, #64]	@ 0x40
 80045a8:	e00e      	b.n	80045c8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	461a      	mov	r2, r3
 80045b0:	4b40      	ldr	r3, [pc, #256]	@ (80046b4 <HAL_DMA_Init+0x148>)
 80045b2:	4413      	add	r3, r2
 80045b4:	4a3d      	ldr	r2, [pc, #244]	@ (80046ac <HAL_DMA_Init+0x140>)
 80045b6:	fba2 2303 	umull	r2, r3, r2, r3
 80045ba:	091b      	lsrs	r3, r3, #4
 80045bc:	009a      	lsls	r2, r3, #2
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	4a3c      	ldr	r2, [pc, #240]	@ (80046b8 <HAL_DMA_Init+0x14c>)
 80045c6:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2202      	movs	r2, #2
 80045cc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	687a      	ldr	r2, [r7, #4]
 80045d8:	6812      	ldr	r2, [r2, #0]
 80045da:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80045de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80045e2:	6013      	str	r3, [r2, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	6819      	ldr	r1, [r3, #0]
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	689a      	ldr	r2, [r3, #8]
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	68db      	ldr	r3, [r3, #12]
 80045f2:	431a      	orrs	r2, r3
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	691b      	ldr	r3, [r3, #16]
 80045f8:	431a      	orrs	r2, r3
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	695b      	ldr	r3, [r3, #20]
 80045fe:	431a      	orrs	r2, r3
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	699b      	ldr	r3, [r3, #24]
 8004604:	431a      	orrs	r2, r3
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	69db      	ldr	r3, [r3, #28]
 800460a:	431a      	orrs	r2, r3
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6a1b      	ldr	r3, [r3, #32]
 8004610:	431a      	orrs	r2, r3
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	430a      	orrs	r2, r1
 8004618:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800461a:	6878      	ldr	r0, [r7, #4]
 800461c:	f000 fb24 	bl	8004c68 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	689b      	ldr	r3, [r3, #8]
 8004624:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004628:	d102      	bne.n	8004630 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	2200      	movs	r2, #0
 800462e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	685a      	ldr	r2, [r3, #4]
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004638:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800463c:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004642:	687a      	ldr	r2, [r7, #4]
 8004644:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004646:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	685b      	ldr	r3, [r3, #4]
 800464c:	2b00      	cmp	r3, #0
 800464e:	d010      	beq.n	8004672 <HAL_DMA_Init+0x106>
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	685b      	ldr	r3, [r3, #4]
 8004654:	2b04      	cmp	r3, #4
 8004656:	d80c      	bhi.n	8004672 <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004658:	6878      	ldr	r0, [r7, #4]
 800465a:	f000 fb4d 	bl	8004cf8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004662:	2200      	movs	r2, #0
 8004664:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800466a:	687a      	ldr	r2, [r7, #4]
 800466c:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800466e:	605a      	str	r2, [r3, #4]
 8004670:	e008      	b.n	8004684 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2200      	movs	r2, #0
 8004676:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2200      	movs	r2, #0
 800467c:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2200      	movs	r2, #0
 8004682:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2200      	movs	r2, #0
 8004688:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2201      	movs	r2, #1
 800468e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2200      	movs	r2, #0
 8004696:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800469a:	2300      	movs	r3, #0
}
 800469c:	4618      	mov	r0, r3
 800469e:	3708      	adds	r7, #8
 80046a0:	46bd      	mov	sp, r7
 80046a2:	bd80      	pop	{r7, pc}
 80046a4:	40020407 	.word	0x40020407
 80046a8:	bffdfff8 	.word	0xbffdfff8
 80046ac:	cccccccd 	.word	0xcccccccd
 80046b0:	40020000 	.word	0x40020000
 80046b4:	bffdfbf8 	.word	0xbffdfbf8
 80046b8:	40020400 	.word	0x40020400

080046bc <HAL_DMA_DeInit>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	b082      	sub	sp, #8
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (NULL == hdma)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d101      	bne.n	80046ce <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80046ca:	2301      	movs	r3, #1
 80046cc:	e07b      	b.n	80047c6 <HAL_DMA_DeInit+0x10a>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	681a      	ldr	r2, [r3, #0]
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f022 0201 	bic.w	r2, r2, #1
 80046dc:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	461a      	mov	r2, r3
 80046e4:	4b3a      	ldr	r3, [pc, #232]	@ (80047d0 <HAL_DMA_DeInit+0x114>)
 80046e6:	429a      	cmp	r2, r3
 80046e8:	d80f      	bhi.n	800470a <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	461a      	mov	r2, r3
 80046f0:	4b38      	ldr	r3, [pc, #224]	@ (80047d4 <HAL_DMA_DeInit+0x118>)
 80046f2:	4413      	add	r3, r2
 80046f4:	4a38      	ldr	r2, [pc, #224]	@ (80047d8 <HAL_DMA_DeInit+0x11c>)
 80046f6:	fba2 2303 	umull	r2, r3, r2, r3
 80046fa:	091b      	lsrs	r3, r3, #4
 80046fc:	009a      	lsls	r2, r3, #2
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	4a35      	ldr	r2, [pc, #212]	@ (80047dc <HAL_DMA_DeInit+0x120>)
 8004706:	641a      	str	r2, [r3, #64]	@ 0x40
 8004708:	e00e      	b.n	8004728 <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	461a      	mov	r2, r3
 8004710:	4b33      	ldr	r3, [pc, #204]	@ (80047e0 <HAL_DMA_DeInit+0x124>)
 8004712:	4413      	add	r3, r2
 8004714:	4a30      	ldr	r2, [pc, #192]	@ (80047d8 <HAL_DMA_DeInit+0x11c>)
 8004716:	fba2 2303 	umull	r2, r3, r2, r3
 800471a:	091b      	lsrs	r3, r3, #4
 800471c:	009a      	lsls	r2, r3, #2
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	4a2f      	ldr	r2, [pc, #188]	@ (80047e4 <HAL_DMA_DeInit+0x128>)
 8004726:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Reset DMA Channel control register */
  hdma->Instance->CCR = 0U;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	2200      	movs	r2, #0
 800472e:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004734:	f003 021c 	and.w	r2, r3, #28
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800473c:	2101      	movs	r1, #1
 800473e:	fa01 f202 	lsl.w	r2, r1, r2
 8004742:	605a      	str	r2, [r3, #4]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */

  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004744:	6878      	ldr	r0, [r7, #4]
 8004746:	f000 fa8f 	bl	8004c68 <DMA_CalcDMAMUXChannelBaseAndMask>

  /* Reset the DMAMUX channel that corresponds to the DMA channel */
  hdma->DMAmuxChannel->CCR = 0U;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800474e:	2200      	movs	r2, #0
 8004750:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004756:	687a      	ldr	r2, [r7, #4]
 8004758:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800475a:	605a      	str	r2, [r3, #4]

  /* Reset Request generator parameters if any */
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	685b      	ldr	r3, [r3, #4]
 8004760:	2b00      	cmp	r3, #0
 8004762:	d00f      	beq.n	8004784 <HAL_DMA_DeInit+0xc8>
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	685b      	ldr	r3, [r3, #4]
 8004768:	2b04      	cmp	r3, #4
 800476a:	d80b      	bhi.n	8004784 <HAL_DMA_DeInit+0xc8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800476c:	6878      	ldr	r0, [r7, #4]
 800476e:	f000 fac3 	bl	8004cf8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004776:	2200      	movs	r2, #0
 8004778:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800477e:	687a      	ldr	r2, [r7, #4]
 8004780:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004782:	605a      	str	r2, [r3, #4]
  }

  hdma->DMAmuxRequestGen = 0U;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2200      	movs	r2, #0
 8004788:	655a      	str	r2, [r3, #84]	@ 0x54
  hdma->DMAmuxRequestGenStatus = 0U;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2200      	movs	r2, #0
 800478e:	659a      	str	r2, [r3, #88]	@ 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2200      	movs	r2, #0
 8004794:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2200      	movs	r2, #0
 800479a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma->XferHalfCpltCallback = NULL;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2200      	movs	r2, #0
 80047a0:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma->XferErrorCallback = NULL;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2200      	movs	r2, #0
 80047a6:	635a      	str	r2, [r3, #52]	@ 0x34
  hdma->XferAbortCallback = NULL;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2200      	movs	r2, #0
 80047ac:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	2200      	movs	r2, #0
 80047b2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2200      	movs	r2, #0
 80047b8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2200      	movs	r2, #0
 80047c0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80047c4:	2300      	movs	r3, #0
}
 80047c6:	4618      	mov	r0, r3
 80047c8:	3708      	adds	r7, #8
 80047ca:	46bd      	mov	sp, r7
 80047cc:	bd80      	pop	{r7, pc}
 80047ce:	bf00      	nop
 80047d0:	40020407 	.word	0x40020407
 80047d4:	bffdfff8 	.word	0xbffdfff8
 80047d8:	cccccccd 	.word	0xcccccccd
 80047dc:	40020000 	.word	0x40020000
 80047e0:	bffdfbf8 	.word	0xbffdfbf8
 80047e4:	40020400 	.word	0x40020400

080047e8 <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b086      	sub	sp, #24
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	60f8      	str	r0, [r7, #12]
 80047f0:	60b9      	str	r1, [r7, #8]
 80047f2:	607a      	str	r2, [r7, #4]
 80047f4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80047f6:	2300      	movs	r3, #0
 80047f8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004800:	2b01      	cmp	r3, #1
 8004802:	d101      	bne.n	8004808 <HAL_DMA_Start_IT+0x20>
 8004804:	2302      	movs	r3, #2
 8004806:	e069      	b.n	80048dc <HAL_DMA_Start_IT+0xf4>
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	2201      	movs	r2, #1
 800480c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (hdma->State == HAL_DMA_STATE_READY)
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004816:	b2db      	uxtb	r3, r3
 8004818:	2b01      	cmp	r3, #1
 800481a:	d155      	bne.n	80048c8 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	2202      	movs	r2, #2
 8004820:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	2200      	movs	r2, #0
 8004828:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	681a      	ldr	r2, [r3, #0]
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f022 0201 	bic.w	r2, r2, #1
 8004838:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	687a      	ldr	r2, [r7, #4]
 800483e:	68b9      	ldr	r1, [r7, #8]
 8004840:	68f8      	ldr	r0, [r7, #12]
 8004842:	f000 f9d3 	bl	8004bec <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800484a:	2b00      	cmp	r3, #0
 800484c:	d008      	beq.n	8004860 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	681a      	ldr	r2, [r3, #0]
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f042 020e 	orr.w	r2, r2, #14
 800485c:	601a      	str	r2, [r3, #0]
 800485e:	e00f      	b.n	8004880 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	681a      	ldr	r2, [r3, #0]
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f022 0204 	bic.w	r2, r2, #4
 800486e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	681a      	ldr	r2, [r3, #0]
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f042 020a 	orr.w	r2, r2, #10
 800487e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800488a:	2b00      	cmp	r3, #0
 800488c:	d007      	beq.n	800489e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004892:	681a      	ldr	r2, [r3, #0]
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004898:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800489c:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d007      	beq.n	80048b6 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048aa:	681a      	ldr	r2, [r3, #0]
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048b0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80048b4:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	681a      	ldr	r2, [r3, #0]
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f042 0201 	orr.w	r2, r2, #1
 80048c4:	601a      	str	r2, [r3, #0]
 80048c6:	e008      	b.n	80048da <HAL_DMA_Start_IT+0xf2>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	2280      	movs	r2, #128	@ 0x80
 80048cc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	2200      	movs	r2, #0
 80048d2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Return error status */
    status = HAL_ERROR;
 80048d6:	2301      	movs	r3, #1
 80048d8:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80048da:	7dfb      	ldrb	r3, [r7, #23]
}
 80048dc:	4618      	mov	r0, r3
 80048de:	3718      	adds	r7, #24
 80048e0:	46bd      	mov	sp, r7
 80048e2:	bd80      	pop	{r7, pc}

080048e4 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80048e4:	b480      	push	{r7}
 80048e6:	b083      	sub	sp, #12
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d101      	bne.n	80048f6 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 80048f2:	2301      	movs	r3, #1
 80048f4:	e04f      	b.n	8004996 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80048fc:	b2db      	uxtb	r3, r3
 80048fe:	2b02      	cmp	r3, #2
 8004900:	d008      	beq.n	8004914 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2204      	movs	r2, #4
 8004906:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2200      	movs	r2, #0
 800490c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8004910:	2301      	movs	r3, #1
 8004912:	e040      	b.n	8004996 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	681a      	ldr	r2, [r3, #0]
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f022 020e 	bic.w	r2, r2, #14
 8004922:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004928:	681a      	ldr	r2, [r3, #0]
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800492e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004932:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	681a      	ldr	r2, [r3, #0]
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f022 0201 	bic.w	r2, r2, #1
 8004942:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004948:	f003 021c 	and.w	r2, r3, #28
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004950:	2101      	movs	r1, #1
 8004952:	fa01 f202 	lsl.w	r2, r1, r2
 8004956:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800495c:	687a      	ldr	r2, [r7, #4]
 800495e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004960:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004966:	2b00      	cmp	r3, #0
 8004968:	d00c      	beq.n	8004984 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800496e:	681a      	ldr	r2, [r3, #0]
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004974:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004978:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800497e:	687a      	ldr	r2, [r7, #4]
 8004980:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004982:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2201      	movs	r2, #1
 8004988:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2200      	movs	r2, #0
 8004990:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }

  return HAL_OK;
 8004994:	2300      	movs	r3, #0
}
 8004996:	4618      	mov	r0, r3
 8004998:	370c      	adds	r7, #12
 800499a:	46bd      	mov	sp, r7
 800499c:	bc80      	pop	{r7}
 800499e:	4770      	bx	lr

080049a0 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b084      	sub	sp, #16
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80049a8:	2300      	movs	r3, #0
 80049aa:	73fb      	strb	r3, [r7, #15]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80049b2:	b2db      	uxtb	r3, r3
 80049b4:	2b02      	cmp	r3, #2
 80049b6:	d005      	beq.n	80049c4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2204      	movs	r2, #4
 80049bc:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80049be:	2301      	movs	r3, #1
 80049c0:	73fb      	strb	r3, [r7, #15]
 80049c2:	e047      	b.n	8004a54 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	681a      	ldr	r2, [r3, #0]
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f022 020e 	bic.w	r2, r2, #14
 80049d2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	681a      	ldr	r2, [r3, #0]
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f022 0201 	bic.w	r2, r2, #1
 80049e2:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80049e8:	681a      	ldr	r2, [r3, #0]
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80049ee:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80049f2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049f8:	f003 021c 	and.w	r2, r3, #28
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a00:	2101      	movs	r1, #1
 8004a02:	fa01 f202 	lsl.w	r2, r1, r2
 8004a06:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a0c:	687a      	ldr	r2, [r7, #4]
 8004a0e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004a10:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d00c      	beq.n	8004a34 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a1e:	681a      	ldr	r2, [r3, #0]
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a24:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004a28:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a2e:	687a      	ldr	r2, [r7, #4]
 8004a30:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004a32:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2201      	movs	r2, #1
 8004a38:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2200      	movs	r2, #0
 8004a40:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d003      	beq.n	8004a54 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a50:	6878      	ldr	r0, [r7, #4]
 8004a52:	4798      	blx	r3
    }
  }
  return status;
 8004a54:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a56:	4618      	mov	r0, r3
 8004a58:	3710      	adds	r7, #16
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	bd80      	pop	{r7, pc}
	...

08004a60 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b084      	sub	sp, #16
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a7c:	f003 031c 	and.w	r3, r3, #28
 8004a80:	2204      	movs	r2, #4
 8004a82:	409a      	lsls	r2, r3
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	4013      	ands	r3, r2
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d027      	beq.n	8004adc <HAL_DMA_IRQHandler+0x7c>
 8004a8c:	68bb      	ldr	r3, [r7, #8]
 8004a8e:	f003 0304 	and.w	r3, r3, #4
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d022      	beq.n	8004adc <HAL_DMA_IRQHandler+0x7c>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f003 0320 	and.w	r3, r3, #32
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d107      	bne.n	8004ab4 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	681a      	ldr	r2, [r3, #0]
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f022 0204 	bic.w	r2, r2, #4
 8004ab2:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ab8:	f003 021c 	and.w	r2, r3, #28
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ac0:	2104      	movs	r1, #4
 8004ac2:	fa01 f202 	lsl.w	r2, r1, r2
 8004ac6:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	f000 8081 	beq.w	8004bd4 <HAL_DMA_IRQHandler+0x174>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ad6:	6878      	ldr	r0, [r7, #4]
 8004ad8:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8004ada:	e07b      	b.n	8004bd4 <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ae0:	f003 031c 	and.w	r3, r3, #28
 8004ae4:	2202      	movs	r2, #2
 8004ae6:	409a      	lsls	r2, r3
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	4013      	ands	r3, r2
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d03d      	beq.n	8004b6c <HAL_DMA_IRQHandler+0x10c>
 8004af0:	68bb      	ldr	r3, [r7, #8]
 8004af2:	f003 0302 	and.w	r3, r3, #2
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d038      	beq.n	8004b6c <HAL_DMA_IRQHandler+0x10c>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f003 0320 	and.w	r3, r3, #32
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d10b      	bne.n	8004b20 <HAL_DMA_IRQHandler+0xc0>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	681a      	ldr	r2, [r3, #0]
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f022 020a 	bic.w	r2, r2, #10
 8004b16:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2201      	movs	r2, #1
 8004b1c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	461a      	mov	r2, r3
 8004b26:	4b2e      	ldr	r3, [pc, #184]	@ (8004be0 <HAL_DMA_IRQHandler+0x180>)
 8004b28:	429a      	cmp	r2, r3
 8004b2a:	d909      	bls.n	8004b40 <HAL_DMA_IRQHandler+0xe0>
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b30:	f003 031c 	and.w	r3, r3, #28
 8004b34:	4a2b      	ldr	r2, [pc, #172]	@ (8004be4 <HAL_DMA_IRQHandler+0x184>)
 8004b36:	2102      	movs	r1, #2
 8004b38:	fa01 f303 	lsl.w	r3, r1, r3
 8004b3c:	6053      	str	r3, [r2, #4]
 8004b3e:	e008      	b.n	8004b52 <HAL_DMA_IRQHandler+0xf2>
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b44:	f003 031c 	and.w	r3, r3, #28
 8004b48:	4a27      	ldr	r2, [pc, #156]	@ (8004be8 <HAL_DMA_IRQHandler+0x188>)
 8004b4a:	2102      	movs	r1, #2
 8004b4c:	fa01 f303 	lsl.w	r3, r1, r3
 8004b50:	6053      	str	r3, [r2, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	2200      	movs	r2, #0
 8004b56:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

      if (hdma->XferCpltCallback != NULL)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d038      	beq.n	8004bd4 <HAL_DMA_IRQHandler+0x174>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b66:	6878      	ldr	r0, [r7, #4]
 8004b68:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8004b6a:	e033      	b.n	8004bd4 <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b70:	f003 031c 	and.w	r3, r3, #28
 8004b74:	2208      	movs	r2, #8
 8004b76:	409a      	lsls	r2, r3
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	4013      	ands	r3, r2
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d02a      	beq.n	8004bd6 <HAL_DMA_IRQHandler+0x176>
 8004b80:	68bb      	ldr	r3, [r7, #8]
 8004b82:	f003 0308 	and.w	r3, r3, #8
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d025      	beq.n	8004bd6 <HAL_DMA_IRQHandler+0x176>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	681a      	ldr	r2, [r3, #0]
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f022 020e 	bic.w	r2, r2, #14
 8004b98:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b9e:	f003 021c 	and.w	r2, r3, #28
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ba6:	2101      	movs	r1, #1
 8004ba8:	fa01 f202 	lsl.w	r2, r1, r2
 8004bac:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	2201      	movs	r2, #1
 8004bb2:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2201      	movs	r2, #1
 8004bb8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d004      	beq.n	8004bd6 <HAL_DMA_IRQHandler+0x176>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004bd0:	6878      	ldr	r0, [r7, #4]
 8004bd2:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004bd4:	bf00      	nop
 8004bd6:	bf00      	nop
}
 8004bd8:	3710      	adds	r7, #16
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	bd80      	pop	{r7, pc}
 8004bde:	bf00      	nop
 8004be0:	40020080 	.word	0x40020080
 8004be4:	40020400 	.word	0x40020400
 8004be8:	40020000 	.word	0x40020000

08004bec <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004bec:	b480      	push	{r7}
 8004bee:	b085      	sub	sp, #20
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	60f8      	str	r0, [r7, #12]
 8004bf4:	60b9      	str	r1, [r7, #8]
 8004bf6:	607a      	str	r2, [r7, #4]
 8004bf8:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004bfe:	68fa      	ldr	r2, [r7, #12]
 8004c00:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004c02:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d004      	beq.n	8004c16 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c10:	68fa      	ldr	r2, [r7, #12]
 8004c12:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004c14:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c1a:	f003 021c 	and.w	r2, r3, #28
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c22:	2101      	movs	r1, #1
 8004c24:	fa01 f202 	lsl.w	r2, r1, r2
 8004c28:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	683a      	ldr	r2, [r7, #0]
 8004c30:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	689b      	ldr	r3, [r3, #8]
 8004c36:	2b10      	cmp	r3, #16
 8004c38:	d108      	bne.n	8004c4c <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	687a      	ldr	r2, [r7, #4]
 8004c40:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	68ba      	ldr	r2, [r7, #8]
 8004c48:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004c4a:	e007      	b.n	8004c5c <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	68ba      	ldr	r2, [r7, #8]
 8004c52:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	687a      	ldr	r2, [r7, #4]
 8004c5a:	60da      	str	r2, [r3, #12]
}
 8004c5c:	bf00      	nop
 8004c5e:	3714      	adds	r7, #20
 8004c60:	46bd      	mov	sp, r7
 8004c62:	bc80      	pop	{r7}
 8004c64:	4770      	bx	lr
	...

08004c68 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004c68:	b480      	push	{r7}
 8004c6a:	b085      	sub	sp, #20
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	461a      	mov	r2, r3
 8004c76:	4b1c      	ldr	r3, [pc, #112]	@ (8004ce8 <DMA_CalcDMAMUXChannelBaseAndMask+0x80>)
 8004c78:	429a      	cmp	r2, r3
 8004c7a:	d813      	bhi.n	8004ca4 <DMA_CalcDMAMUXChannelBaseAndMask+0x3c>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c80:	089b      	lsrs	r3, r3, #2
 8004c82:	009b      	lsls	r3, r3, #2
 8004c84:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004c88:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 8004c8c:	687a      	ldr	r2, [r7, #4]
 8004c8e:	6493      	str	r3, [r2, #72]	@ 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	b2db      	uxtb	r3, r3
 8004c96:	3b08      	subs	r3, #8
 8004c98:	4a14      	ldr	r2, [pc, #80]	@ (8004cec <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 8004c9a:	fba2 2303 	umull	r2, r3, r2, r3
 8004c9e:	091b      	lsrs	r3, r3, #4
 8004ca0:	60fb      	str	r3, [r7, #12]
 8004ca2:	e011      	b.n	8004cc8 <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
  }
  else
  {
    /* DMA2 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ca8:	089b      	lsrs	r3, r3, #2
 8004caa:	009a      	lsls	r2, r3, #2
 8004cac:	4b10      	ldr	r3, [pc, #64]	@ (8004cf0 <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
 8004cae:	4413      	add	r3, r2
 8004cb0:	687a      	ldr	r2, [r7, #4]
 8004cb2:	6493      	str	r3, [r2, #72]	@ 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	b2db      	uxtb	r3, r3
 8004cba:	3b08      	subs	r3, #8
 8004cbc:	4a0b      	ldr	r2, [pc, #44]	@ (8004cec <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 8004cbe:	fba2 2303 	umull	r2, r3, r2, r3
 8004cc2:	091b      	lsrs	r3, r3, #4
 8004cc4:	3307      	adds	r3, #7
 8004cc6:	60fb      	str	r3, [r7, #12]
  }

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	4a0a      	ldr	r2, [pc, #40]	@ (8004cf4 <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 8004ccc:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	f003 031f 	and.w	r3, r3, #31
 8004cd4:	2201      	movs	r2, #1
 8004cd6:	409a      	lsls	r2, r3
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8004cdc:	bf00      	nop
 8004cde:	3714      	adds	r7, #20
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	bc80      	pop	{r7}
 8004ce4:	4770      	bx	lr
 8004ce6:	bf00      	nop
 8004ce8:	40020407 	.word	0x40020407
 8004cec:	cccccccd 	.word	0xcccccccd
 8004cf0:	4002081c 	.word	0x4002081c
 8004cf4:	40020880 	.word	0x40020880

08004cf8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004cf8:	b480      	push	{r7}
 8004cfa:	b085      	sub	sp, #20
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	685b      	ldr	r3, [r3, #4]
 8004d04:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004d08:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004d0a:	68fa      	ldr	r2, [r7, #12]
 8004d0c:	4b0a      	ldr	r3, [pc, #40]	@ (8004d38 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8004d0e:	4413      	add	r3, r2
 8004d10:	009b      	lsls	r3, r3, #2
 8004d12:	461a      	mov	r2, r3
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	4a08      	ldr	r2, [pc, #32]	@ (8004d3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8004d1c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	3b01      	subs	r3, #1
 8004d22:	f003 0303 	and.w	r3, r3, #3
 8004d26:	2201      	movs	r2, #1
 8004d28:	409a      	lsls	r2, r3
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8004d2e:	bf00      	nop
 8004d30:	3714      	adds	r7, #20
 8004d32:	46bd      	mov	sp, r7
 8004d34:	bc80      	pop	{r7}
 8004d36:	4770      	bx	lr
 8004d38:	1000823f 	.word	0x1000823f
 8004d3c:	40020940 	.word	0x40020940

08004d40 <HAL_FLASH_Program>:
  *                are stored the data for the row fast program.
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8004d40:	b580      	push	{r7, lr}
 8004d42:	b086      	sub	sp, #24
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	60f8      	str	r0, [r7, #12]
 8004d48:	60b9      	str	r1, [r7, #8]
 8004d4a:	e9c7 2300 	strd	r2, r3, [r7]
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_ADDR_ALIGNED_64BITS(Address));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8004d4e:	4b1c      	ldr	r3, [pc, #112]	@ (8004dc0 <HAL_FLASH_Program+0x80>)
 8004d50:	781b      	ldrb	r3, [r3, #0]
 8004d52:	2b01      	cmp	r3, #1
 8004d54:	d101      	bne.n	8004d5a <HAL_FLASH_Program+0x1a>
 8004d56:	2302      	movs	r3, #2
 8004d58:	e02d      	b.n	8004db6 <HAL_FLASH_Program+0x76>
 8004d5a:	4b19      	ldr	r3, [pc, #100]	@ (8004dc0 <HAL_FLASH_Program+0x80>)
 8004d5c:	2201      	movs	r2, #1
 8004d5e:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004d60:	4b17      	ldr	r3, [pc, #92]	@ (8004dc0 <HAL_FLASH_Program+0x80>)
 8004d62:	2200      	movs	r2, #0
 8004d64:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004d66:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8004d6a:	f000 f869 	bl	8004e40 <FLASH_WaitForLastOperation>
 8004d6e:	4603      	mov	r3, r0
 8004d70:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 8004d72:	7dfb      	ldrb	r3, [r7, #23]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d11a      	bne.n	8004dae <HAL_FLASH_Program+0x6e>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	2b01      	cmp	r3, #1
 8004d7c:	d105      	bne.n	8004d8a <HAL_FLASH_Program+0x4a>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 8004d7e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004d82:	68b8      	ldr	r0, [r7, #8]
 8004d84:	f000 f8be 	bl	8004f04 <FLASH_Program_DoubleWord>
 8004d88:	e004      	b.n	8004d94 <HAL_FLASH_Program+0x54>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_FAST_PROGRAM_ADDRESS(Address));

      /* Fast program a 32 double-word (64-bit) row at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	4619      	mov	r1, r3
 8004d8e:	68b8      	ldr	r0, [r7, #8]
 8004d90:	f000 f8de 	bl	8004f50 <FLASH_Program_Fast>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004d94:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8004d98:	f000 f852 	bl	8004e40 <FLASH_WaitForLastOperation>
 8004d9c:	4603      	mov	r3, r0
 8004d9e:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
#ifdef CORE_CM0PLUS
    CLEAR_BIT(FLASH->C2CR, TypeProgram);
#else
    CLEAR_BIT(FLASH->CR, TypeProgram);
 8004da0:	4b08      	ldr	r3, [pc, #32]	@ (8004dc4 <HAL_FLASH_Program+0x84>)
 8004da2:	695a      	ldr	r2, [r3, #20]
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	43db      	mvns	r3, r3
 8004da8:	4906      	ldr	r1, [pc, #24]	@ (8004dc4 <HAL_FLASH_Program+0x84>)
 8004daa:	4013      	ands	r3, r2
 8004dac:	614b      	str	r3, [r1, #20]
#endif
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8004dae:	4b04      	ldr	r3, [pc, #16]	@ (8004dc0 <HAL_FLASH_Program+0x80>)
 8004db0:	2200      	movs	r2, #0
 8004db2:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 8004db4:	7dfb      	ldrb	r3, [r7, #23]
}
 8004db6:	4618      	mov	r0, r3
 8004db8:	3718      	adds	r7, #24
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	bd80      	pop	{r7, pc}
 8004dbe:	bf00      	nop
 8004dc0:	20000580 	.word	0x20000580
 8004dc4:	58004000 	.word	0x58004000

08004dc8 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8004dc8:	b480      	push	{r7}
 8004dca:	b083      	sub	sp, #12
 8004dcc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8004dce:	2300      	movs	r3, #0
 8004dd0:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8004dd2:	4b0b      	ldr	r3, [pc, #44]	@ (8004e00 <HAL_FLASH_Unlock+0x38>)
 8004dd4:	695b      	ldr	r3, [r3, #20]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	da0b      	bge.n	8004df2 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8004dda:	4b09      	ldr	r3, [pc, #36]	@ (8004e00 <HAL_FLASH_Unlock+0x38>)
 8004ddc:	4a09      	ldr	r2, [pc, #36]	@ (8004e04 <HAL_FLASH_Unlock+0x3c>)
 8004dde:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8004de0:	4b07      	ldr	r3, [pc, #28]	@ (8004e00 <HAL_FLASH_Unlock+0x38>)
 8004de2:	4a09      	ldr	r2, [pc, #36]	@ (8004e08 <HAL_FLASH_Unlock+0x40>)
 8004de4:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlock */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8004de6:	4b06      	ldr	r3, [pc, #24]	@ (8004e00 <HAL_FLASH_Unlock+0x38>)
 8004de8:	695b      	ldr	r3, [r3, #20]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	da01      	bge.n	8004df2 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8004dee:	2301      	movs	r3, #1
 8004df0:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8004df2:	79fb      	ldrb	r3, [r7, #7]
}
 8004df4:	4618      	mov	r0, r3
 8004df6:	370c      	adds	r7, #12
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	bc80      	pop	{r7}
 8004dfc:	4770      	bx	lr
 8004dfe:	bf00      	nop
 8004e00:	58004000 	.word	0x58004000
 8004e04:	45670123 	.word	0x45670123
 8004e08:	cdef89ab 	.word	0xcdef89ab

08004e0c <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8004e0c:	b480      	push	{r7}
 8004e0e:	b083      	sub	sp, #12
 8004e10:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8004e12:	2300      	movs	r3, #0
 8004e14:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  /* @Note  The lock and unlock procedure is done only using CR registers even from CPU2 */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8004e16:	4b09      	ldr	r3, [pc, #36]	@ (8004e3c <HAL_FLASH_Lock+0x30>)
 8004e18:	695b      	ldr	r3, [r3, #20]
 8004e1a:	4a08      	ldr	r2, [pc, #32]	@ (8004e3c <HAL_FLASH_Lock+0x30>)
 8004e1c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004e20:	6153      	str	r3, [r2, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) == 0U)
 8004e22:	4b06      	ldr	r3, [pc, #24]	@ (8004e3c <HAL_FLASH_Lock+0x30>)
 8004e24:	695b      	ldr	r3, [r3, #20]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	db01      	blt.n	8004e2e <HAL_FLASH_Lock+0x22>
  {
    status = HAL_ERROR;
 8004e2a:	2301      	movs	r3, #1
 8004e2c:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8004e2e:	79fb      	ldrb	r3, [r7, #7]
}
 8004e30:	4618      	mov	r0, r3
 8004e32:	370c      	adds	r7, #12
 8004e34:	46bd      	mov	sp, r7
 8004e36:	bc80      	pop	{r7}
 8004e38:	4770      	bx	lr
 8004e3a:	bf00      	nop
 8004e3c:	58004000 	.word	0x58004000

08004e40 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout Maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b084      	sub	sp, #16
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
  uint32_t error;
  uint32_t tickstart = HAL_GetTick();
 8004e48:	f7fd f9d6 	bl	80021f8 <HAL_GetTick>
 8004e4c:	60f8      	str	r0, [r7, #12]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8004e4e:	e009      	b.n	8004e64 <FLASH_WaitForLastOperation+0x24>
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 8004e50:	f7fd f9d2 	bl	80021f8 <HAL_GetTick>
 8004e54:	4602      	mov	r2, r0
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	1ad3      	subs	r3, r2, r3
 8004e5a:	687a      	ldr	r2, [r7, #4]
 8004e5c:	429a      	cmp	r2, r3
 8004e5e:	d801      	bhi.n	8004e64 <FLASH_WaitForLastOperation+0x24>
    {
      return HAL_TIMEOUT;
 8004e60:	2303      	movs	r3, #3
 8004e62:	e046      	b.n	8004ef2 <FLASH_WaitForLastOperation+0xb2>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8004e64:	4b25      	ldr	r3, [pc, #148]	@ (8004efc <FLASH_WaitForLastOperation+0xbc>)
 8004e66:	691b      	ldr	r3, [r3, #16]
 8004e68:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004e6c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004e70:	d0ee      	beq.n	8004e50 <FLASH_WaitForLastOperation+0x10>
  /* check flash errors. Only ECC correction can be checked here as ECCD
      generates NMI */
#ifdef CORE_CM0PLUS
  error = FLASH->C2SR;
#else
  error = FLASH->SR;
 8004e72:	4b22      	ldr	r3, [pc, #136]	@ (8004efc <FLASH_WaitForLastOperation+0xbc>)
 8004e74:	691b      	ldr	r3, [r3, #16]
 8004e76:	60bb      	str	r3, [r7, #8]
#endif

  /* Check FLASH End of Operation flag */
  if ((error & FLASH_FLAG_EOP) != 0U)
 8004e78:	68bb      	ldr	r3, [r7, #8]
 8004e7a:	f003 0301 	and.w	r3, r3, #1
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d002      	beq.n	8004e88 <FLASH_WaitForLastOperation+0x48>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8004e82:	4b1e      	ldr	r3, [pc, #120]	@ (8004efc <FLASH_WaitForLastOperation+0xbc>)
 8004e84:	2201      	movs	r2, #1
 8004e86:	611a      	str	r2, [r3, #16]
  }

  /* Now update error variable to only error value */
  error &= FLASH_FLAG_SR_ERRORS;
 8004e88:	68ba      	ldr	r2, [r7, #8]
 8004e8a:	f24c 33fa 	movw	r3, #50170	@ 0xc3fa
 8004e8e:	4013      	ands	r3, r2
 8004e90:	60bb      	str	r3, [r7, #8]

  /* clear error flags */
  __HAL_FLASH_CLEAR_FLAG(error);
 8004e92:	68bb      	ldr	r3, [r7, #8]
 8004e94:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e98:	d307      	bcc.n	8004eaa <FLASH_WaitForLastOperation+0x6a>
 8004e9a:	4b18      	ldr	r3, [pc, #96]	@ (8004efc <FLASH_WaitForLastOperation+0xbc>)
 8004e9c:	699a      	ldr	r2, [r3, #24]
 8004e9e:	68bb      	ldr	r3, [r7, #8]
 8004ea0:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8004ea4:	4915      	ldr	r1, [pc, #84]	@ (8004efc <FLASH_WaitForLastOperation+0xbc>)
 8004ea6:	4313      	orrs	r3, r2
 8004ea8:	618b      	str	r3, [r1, #24]
 8004eaa:	68bb      	ldr	r3, [r7, #8]
 8004eac:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d004      	beq.n	8004ebe <FLASH_WaitForLastOperation+0x7e>
 8004eb4:	4a11      	ldr	r2, [pc, #68]	@ (8004efc <FLASH_WaitForLastOperation+0xbc>)
 8004eb6:	68bb      	ldr	r3, [r7, #8]
 8004eb8:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8004ebc:	6113      	str	r3, [r2, #16]

  if (error != 0U)
 8004ebe:	68bb      	ldr	r3, [r7, #8]
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d00e      	beq.n	8004ee2 <FLASH_WaitForLastOperation+0xa2>
  {
    /*Save the error code*/
    pFlash.ErrorCode = error;
 8004ec4:	4a0e      	ldr	r2, [pc, #56]	@ (8004f00 <FLASH_WaitForLastOperation+0xc0>)
 8004ec6:	68bb      	ldr	r3, [r7, #8]
 8004ec8:	6053      	str	r3, [r2, #4]

    return HAL_ERROR;
 8004eca:	2301      	movs	r3, #1
 8004ecc:	e011      	b.n	8004ef2 <FLASH_WaitForLastOperation+0xb2>
  }

  /* Wait for control register to be written */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 8004ece:	f7fd f993 	bl	80021f8 <HAL_GetTick>
 8004ed2:	4602      	mov	r2, r0
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	1ad3      	subs	r3, r2, r3
 8004ed8:	687a      	ldr	r2, [r7, #4]
 8004eda:	429a      	cmp	r2, r3
 8004edc:	d801      	bhi.n	8004ee2 <FLASH_WaitForLastOperation+0xa2>
    {
      return HAL_TIMEOUT;
 8004ede:	2303      	movs	r3, #3
 8004ee0:	e007      	b.n	8004ef2 <FLASH_WaitForLastOperation+0xb2>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
 8004ee2:	4b06      	ldr	r3, [pc, #24]	@ (8004efc <FLASH_WaitForLastOperation+0xbc>)
 8004ee4:	691b      	ldr	r3, [r3, #16]
 8004ee6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004eea:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004eee:	d0ee      	beq.n	8004ece <FLASH_WaitForLastOperation+0x8e>
    }
  }

  return HAL_OK;
 8004ef0:	2300      	movs	r3, #0
}
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	3710      	adds	r7, #16
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	bd80      	pop	{r7, pc}
 8004efa:	bf00      	nop
 8004efc:	58004000 	.word	0x58004000
 8004f00:	20000580 	.word	0x20000580

08004f04 <FLASH_Program_DoubleWord>:
  * @param  Address Specifies the address to be programmed.
  * @param  Data Specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8004f04:	b480      	push	{r7}
 8004f06:	b085      	sub	sp, #20
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	60f8      	str	r0, [r7, #12]
 8004f0c:	e9c7 2300 	strd	r2, r3, [r7]
#ifdef CORE_CM0PLUS
  /* Set PG bit */
  SET_BIT(FLASH->C2CR, FLASH_CR_PG);
#else
  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8004f10:	4b0e      	ldr	r3, [pc, #56]	@ (8004f4c <FLASH_Program_DoubleWord+0x48>)
 8004f12:	695b      	ldr	r3, [r3, #20]
 8004f14:	4a0d      	ldr	r2, [pc, #52]	@ (8004f4c <FLASH_Program_DoubleWord+0x48>)
 8004f16:	f043 0301 	orr.w	r3, r3, #1
 8004f1a:	6153      	str	r3, [r2, #20]
#endif

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	683a      	ldr	r2, [r7, #0]
 8004f20:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8004f22:	f3bf 8f6f 	isb	sy
}
 8004f26:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 8004f28:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004f2c:	f04f 0200 	mov.w	r2, #0
 8004f30:	f04f 0300 	mov.w	r3, #0
 8004f34:	000a      	movs	r2, r1
 8004f36:	2300      	movs	r3, #0
 8004f38:	68f9      	ldr	r1, [r7, #12]
 8004f3a:	3104      	adds	r1, #4
 8004f3c:	4613      	mov	r3, r2
 8004f3e:	600b      	str	r3, [r1, #0]
}
 8004f40:	bf00      	nop
 8004f42:	3714      	adds	r7, #20
 8004f44:	46bd      	mov	sp, r7
 8004f46:	bc80      	pop	{r7}
 8004f48:	4770      	bx	lr
 8004f4a:	bf00      	nop
 8004f4c:	58004000 	.word	0x58004000

08004f50 <FLASH_Program_Fast>:
#ifdef CORE_CM0PLUS
static __RAM_FUNC void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
#else
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
#endif
{
 8004f50:	b480      	push	{r7}
 8004f52:	b089      	sub	sp, #36	@ 0x24
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
 8004f58:	6039      	str	r1, [r7, #0]
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
 8004f5a:	2340      	movs	r3, #64	@ 0x40
 8004f5c:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t *)Address;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t *)DataAddress;
 8004f62:	683b      	ldr	r3, [r7, #0]
 8004f64:	617b      	str	r3, [r7, #20]

  /* Set FSTPG bit */
#ifdef CORE_CM0PLUS
  SET_BIT(FLASH->C2CR, FLASH_CR_FSTPG);
#else
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8004f66:	4b18      	ldr	r3, [pc, #96]	@ (8004fc8 <FLASH_Program_Fast+0x78>)
 8004f68:	695b      	ldr	r3, [r3, #20]
 8004f6a:	4a17      	ldr	r2, [pc, #92]	@ (8004fc8 <FLASH_Program_Fast+0x78>)
 8004f6c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004f70:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f72:	f3ef 8310 	mrs	r3, PRIMASK
 8004f76:	60fb      	str	r3, [r7, #12]
  return(result);
 8004f78:	68fb      	ldr	r3, [r7, #12]
#endif

  /* Enter critical section: row programming should not be longer than 7 ms */
  primask_bit = __get_PRIMASK();
 8004f7a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8004f7c:	b672      	cpsid	i
}
 8004f7e:	bf00      	nop
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 8004f80:	697b      	ldr	r3, [r7, #20]
 8004f82:	681a      	ldr	r2, [r3, #0]
 8004f84:	69bb      	ldr	r3, [r7, #24]
 8004f86:	601a      	str	r2, [r3, #0]
    dest_addr++;
 8004f88:	69bb      	ldr	r3, [r7, #24]
 8004f8a:	3304      	adds	r3, #4
 8004f8c:	61bb      	str	r3, [r7, #24]
    src_addr++;
 8004f8e:	697b      	ldr	r3, [r7, #20]
 8004f90:	3304      	adds	r3, #4
 8004f92:	617b      	str	r3, [r7, #20]
    row_index--;
 8004f94:	7ffb      	ldrb	r3, [r7, #31]
 8004f96:	3b01      	subs	r3, #1
 8004f98:	77fb      	strb	r3, [r7, #31]
  }
  while (row_index != 0U);
 8004f9a:	7ffb      	ldrb	r3, [r7, #31]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d1ef      	bne.n	8004f80 <FLASH_Program_Fast+0x30>

  /* wait for BSY in order to be sure that flash operation is ended before
     allowing prefetch in flash. Timeout does not return status, as it will
     be anyway done later */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != 0U)
 8004fa0:	bf00      	nop
 8004fa2:	4b09      	ldr	r3, [pc, #36]	@ (8004fc8 <FLASH_Program_Fast+0x78>)
 8004fa4:	691b      	ldr	r3, [r3, #16]
 8004fa6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004faa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004fae:	d0f8      	beq.n	8004fa2 <FLASH_Program_Fast+0x52>
 8004fb0:	693b      	ldr	r3, [r7, #16]
 8004fb2:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004fb4:	68bb      	ldr	r3, [r7, #8]
 8004fb6:	f383 8810 	msr	PRIMASK, r3
}
 8004fba:	bf00      	nop
  {
  }

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 8004fbc:	bf00      	nop
 8004fbe:	3724      	adds	r7, #36	@ 0x24
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	bc80      	pop	{r7}
 8004fc4:	4770      	bx	lr
 8004fc6:	bf00      	nop
 8004fc8:	58004000 	.word	0x58004000

08004fcc <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased)
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b084      	sub	sp, #16
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
 8004fd4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8004fd6:	4b28      	ldr	r3, [pc, #160]	@ (8005078 <HAL_FLASHEx_Erase+0xac>)
 8004fd8:	781b      	ldrb	r3, [r3, #0]
 8004fda:	2b01      	cmp	r3, #1
 8004fdc:	d101      	bne.n	8004fe2 <HAL_FLASHEx_Erase+0x16>
 8004fde:	2302      	movs	r3, #2
 8004fe0:	e046      	b.n	8005070 <HAL_FLASHEx_Erase+0xa4>
 8004fe2:	4b25      	ldr	r3, [pc, #148]	@ (8005078 <HAL_FLASHEx_Erase+0xac>)
 8004fe4:	2201      	movs	r2, #1
 8004fe6:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004fe8:	4b23      	ldr	r3, [pc, #140]	@ (8005078 <HAL_FLASHEx_Erase+0xac>)
 8004fea:	2200      	movs	r2, #0
 8004fec:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004fee:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8004ff2:	f7ff ff25 	bl	8004e40 <FLASH_WaitForLastOperation>
 8004ff6:	4603      	mov	r3, r0
 8004ff8:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8004ffa:	7bfb      	ldrb	r3, [r7, #15]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d133      	bne.n	8005068 <HAL_FLASHEx_Erase+0x9c>
  {
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	2b04      	cmp	r3, #4
 8005006:	d108      	bne.n	800501a <HAL_FLASHEx_Erase+0x4e>
    {
      /* Mass erase to be done */
      FLASH_MassErase();
 8005008:	f000 f880 	bl	800510c <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800500c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8005010:	f7ff ff16 	bl	8004e40 <FLASH_WaitForLastOperation>
 8005014:	4603      	mov	r3, r0
 8005016:	73fb      	strb	r3, [r7, #15]
 8005018:	e024      	b.n	8005064 <HAL_FLASHEx_Erase+0x98>
      /* If operation is completed or interrupted, no need to clear the Mass Erase Bit */
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	f04f 32ff 	mov.w	r2, #4294967295
 8005020:	601a      	str	r2, [r3, #0]

      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	685b      	ldr	r3, [r3, #4]
 8005026:	60bb      	str	r3, [r7, #8]
 8005028:	e012      	b.n	8005050 <HAL_FLASHEx_Erase+0x84>
      {
        /* Start erase page */
        FLASH_PageErase(index);
 800502a:	68b8      	ldr	r0, [r7, #8]
 800502c:	f000 f87e 	bl	800512c <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8005030:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8005034:	f7ff ff04 	bl	8004e40 <FLASH_WaitForLastOperation>
 8005038:	4603      	mov	r3, r0
 800503a:	73fb      	strb	r3, [r7, #15]

        if (status != HAL_OK)
 800503c:	7bfb      	ldrb	r3, [r7, #15]
 800503e:	2b00      	cmp	r3, #0
 8005040:	d003      	beq.n	800504a <HAL_FLASHEx_Erase+0x7e>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = index;
 8005042:	683b      	ldr	r3, [r7, #0]
 8005044:	68ba      	ldr	r2, [r7, #8]
 8005046:	601a      	str	r2, [r3, #0]
          break;
 8005048:	e00a      	b.n	8005060 <HAL_FLASHEx_Erase+0x94>
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 800504a:	68bb      	ldr	r3, [r7, #8]
 800504c:	3301      	adds	r3, #1
 800504e:	60bb      	str	r3, [r7, #8]
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	685a      	ldr	r2, [r3, #4]
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	689b      	ldr	r3, [r3, #8]
 8005058:	4413      	add	r3, r2
 800505a:	68ba      	ldr	r2, [r7, #8]
 800505c:	429a      	cmp	r2, r3
 800505e:	d3e4      	bcc.n	800502a <HAL_FLASHEx_Erase+0x5e>
        }
      }

      /* If operation is completed or interrupted, disable the Page Erase Bit */
      FLASH_AcknowledgePageErase();
 8005060:	f000 f8c0 	bl	80051e4 <FLASH_AcknowledgePageErase>
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8005064:	f000 f87a 	bl	800515c <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8005068:	4b03      	ldr	r3, [pc, #12]	@ (8005078 <HAL_FLASHEx_Erase+0xac>)
 800506a:	2200      	movs	r2, #0
 800506c:	701a      	strb	r2, [r3, #0]

  return status;
 800506e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005070:	4618      	mov	r0, r3
 8005072:	3710      	adds	r7, #16
 8005074:	46bd      	mov	sp, r7
 8005076:	bd80      	pop	{r7, pc}
 8005078:	20000580 	.word	0x20000580

0800507c <HAL_FLASHEx_Erase_IT>:
  * @param  pEraseInit Pointer to an @ref FLASH_EraseInitTypeDef structure that
  *         contains the configuration information for the erasing.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase_IT(FLASH_EraseInitTypeDef *pEraseInit)
{
 800507c:	b580      	push	{r7, lr}
 800507e:	b084      	sub	sp, #16
 8005080:	af00      	add	r7, sp, #0
 8005082:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8005084:	4b1f      	ldr	r3, [pc, #124]	@ (8005104 <HAL_FLASHEx_Erase_IT+0x88>)
 8005086:	781b      	ldrb	r3, [r3, #0]
 8005088:	2b01      	cmp	r3, #1
 800508a:	d101      	bne.n	8005090 <HAL_FLASHEx_Erase_IT+0x14>
 800508c:	2302      	movs	r3, #2
 800508e:	e034      	b.n	80050fa <HAL_FLASHEx_Erase_IT+0x7e>
 8005090:	4b1c      	ldr	r3, [pc, #112]	@ (8005104 <HAL_FLASHEx_Erase_IT+0x88>)
 8005092:	2201      	movs	r2, #1
 8005094:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005096:	4b1b      	ldr	r3, [pc, #108]	@ (8005104 <HAL_FLASHEx_Erase_IT+0x88>)
 8005098:	2200      	movs	r2, #0
 800509a:	605a      	str	r2, [r3, #4]

  /* save procedure for interrupt treatment */
  pFlash.ProcedureOnGoing = pEraseInit->TypeErase;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	4a18      	ldr	r2, [pc, #96]	@ (8005104 <HAL_FLASHEx_Erase_IT+0x88>)
 80050a2:	6093      	str	r3, [r2, #8]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80050a4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80050a8:	f7ff feca 	bl	8004e40 <FLASH_WaitForLastOperation>
 80050ac:	4603      	mov	r3, r0
 80050ae:	73fb      	strb	r3, [r7, #15]

  if (status != HAL_OK)
 80050b0:	7bfb      	ldrb	r3, [r7, #15]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d003      	beq.n	80050be <HAL_FLASHEx_Erase_IT+0x42>
  {
    /* Process Unlocked */
    __HAL_UNLOCK(&pFlash);
 80050b6:	4b13      	ldr	r3, [pc, #76]	@ (8005104 <HAL_FLASHEx_Erase_IT+0x88>)
 80050b8:	2200      	movs	r2, #0
 80050ba:	701a      	strb	r2, [r3, #0]
 80050bc:	e01c      	b.n	80050f8 <HAL_FLASHEx_Erase_IT+0x7c>
  }
  else
  {
    /* Enable End of Operation and Error interrupts */
    __HAL_FLASH_ENABLE_IT(FLASH_IT_EOP | FLASH_IT_OPERR);
 80050be:	4b12      	ldr	r3, [pc, #72]	@ (8005108 <HAL_FLASHEx_Erase_IT+0x8c>)
 80050c0:	695b      	ldr	r3, [r3, #20]
 80050c2:	4a11      	ldr	r2, [pc, #68]	@ (8005108 <HAL_FLASHEx_Erase_IT+0x8c>)
 80050c4:	f043 7340 	orr.w	r3, r3, #50331648	@ 0x3000000
 80050c8:	6153      	str	r3, [r2, #20]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	2b04      	cmp	r3, #4
 80050d0:	d105      	bne.n	80050de <HAL_FLASHEx_Erase_IT+0x62>
    {
      /* Set Page to 0 for Interrupt callback management */
      pFlash.Page = 0;
 80050d2:	4b0c      	ldr	r3, [pc, #48]	@ (8005104 <HAL_FLASHEx_Erase_IT+0x88>)
 80050d4:	2200      	movs	r2, #0
 80050d6:	611a      	str	r2, [r3, #16]

      /* Proceed to Mass Erase */
      FLASH_MassErase();
 80050d8:	f000 f818 	bl	800510c <FLASH_MassErase>
 80050dc:	e00c      	b.n	80050f8 <HAL_FLASHEx_Erase_IT+0x7c>
    }
    else
    {
      /* Erase by page to be done */
      pFlash.NbPagesToErase = pEraseInit->NbPages;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	689b      	ldr	r3, [r3, #8]
 80050e2:	4a08      	ldr	r2, [pc, #32]	@ (8005104 <HAL_FLASHEx_Erase_IT+0x88>)
 80050e4:	6153      	str	r3, [r2, #20]
      pFlash.Page = pEraseInit->Page;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	685b      	ldr	r3, [r3, #4]
 80050ea:	4a06      	ldr	r2, [pc, #24]	@ (8005104 <HAL_FLASHEx_Erase_IT+0x88>)
 80050ec:	6113      	str	r3, [r2, #16]

      /*Erase 1st page and wait for IT */
      FLASH_PageErase(pEraseInit->Page);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	685b      	ldr	r3, [r3, #4]
 80050f2:	4618      	mov	r0, r3
 80050f4:	f000 f81a 	bl	800512c <FLASH_PageErase>
    }
  }

  /* return status */
  return status;
 80050f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80050fa:	4618      	mov	r0, r3
 80050fc:	3710      	adds	r7, #16
 80050fe:	46bd      	mov	sp, r7
 8005100:	bd80      	pop	{r7, pc}
 8005102:	bf00      	nop
 8005104:	20000580 	.word	0x20000580
 8005108:	58004000 	.word	0x58004000

0800510c <FLASH_MassErase>:
/**
  * @brief  Mass erase of FLASH memory.
  * @retval None
  */
static void FLASH_MassErase(void)
{
 800510c:	b480      	push	{r7}
 800510e:	af00      	add	r7, sp, #0
  /* Set the Mass Erase Bit and start bit */
#ifdef CORE_CM0PLUS
  SET_BIT(FLASH->C2CR, (FLASH_CR_MER | FLASH_CR_STRT));
#else
  SET_BIT(FLASH->CR, (FLASH_CR_MER | FLASH_CR_STRT));
 8005110:	4b05      	ldr	r3, [pc, #20]	@ (8005128 <FLASH_MassErase+0x1c>)
 8005112:	695b      	ldr	r3, [r3, #20]
 8005114:	4a04      	ldr	r2, [pc, #16]	@ (8005128 <FLASH_MassErase+0x1c>)
 8005116:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800511a:	f043 0304 	orr.w	r3, r3, #4
 800511e:	6153      	str	r3, [r2, #20]
#endif
}
 8005120:	bf00      	nop
 8005122:	46bd      	mov	sp, r7
 8005124:	bc80      	pop	{r7}
 8005126:	4770      	bx	lr
 8005128:	58004000 	.word	0x58004000

0800512c <FLASH_PageErase>:
  * @param  Page FLASH page to erase
  *         This parameter must be a value between 0 and (max number of pages in Flash - 1)
  * @retval None
  */
void FLASH_PageErase(uint32_t Page)
{
 800512c:	b480      	push	{r7}
 800512e:	b083      	sub	sp, #12
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]

  /* Proceed to erase the page */
#ifdef CORE_CM0PLUS
  MODIFY_REG(FLASH->C2CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
#else
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
 8005134:	4b08      	ldr	r3, [pc, #32]	@ (8005158 <FLASH_PageErase+0x2c>)
 8005136:	695b      	ldr	r3, [r3, #20]
 8005138:	f423 727e 	bic.w	r2, r3, #1016	@ 0x3f8
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	00db      	lsls	r3, r3, #3
 8005140:	4313      	orrs	r3, r2
 8005142:	4a05      	ldr	r2, [pc, #20]	@ (8005158 <FLASH_PageErase+0x2c>)
 8005144:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005148:	f043 0302 	orr.w	r3, r3, #2
 800514c:	6153      	str	r3, [r2, #20]
#endif
}
 800514e:	bf00      	nop
 8005150:	370c      	adds	r7, #12
 8005152:	46bd      	mov	sp, r7
 8005154:	bc80      	pop	{r7}
 8005156:	4770      	bx	lr
 8005158:	58004000 	.word	0x58004000

0800515c <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 800515c:	b480      	push	{r7}
 800515e:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) == 1U)
 8005160:	4b1f      	ldr	r3, [pc, #124]	@ (80051e0 <FLASH_FlushCaches+0x84>)
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005168:	2b01      	cmp	r3, #1
 800516a:	d117      	bne.n	800519c <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 800516c:	4b1c      	ldr	r3, [pc, #112]	@ (80051e0 <FLASH_FlushCaches+0x84>)
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	4a1b      	ldr	r2, [pc, #108]	@ (80051e0 <FLASH_FlushCaches+0x84>)
 8005172:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005176:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8005178:	4b19      	ldr	r3, [pc, #100]	@ (80051e0 <FLASH_FlushCaches+0x84>)
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	4a18      	ldr	r2, [pc, #96]	@ (80051e0 <FLASH_FlushCaches+0x84>)
 800517e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8005182:	6013      	str	r3, [r2, #0]
 8005184:	4b16      	ldr	r3, [pc, #88]	@ (80051e0 <FLASH_FlushCaches+0x84>)
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	4a15      	ldr	r2, [pc, #84]	@ (80051e0 <FLASH_FlushCaches+0x84>)
 800518a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800518e:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005190:	4b13      	ldr	r3, [pc, #76]	@ (80051e0 <FLASH_FlushCaches+0x84>)
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	4a12      	ldr	r2, [pc, #72]	@ (80051e0 <FLASH_FlushCaches+0x84>)
 8005196:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800519a:	6013      	str	r3, [r2, #0]
  }

#ifdef CORE_CM0PLUS
#else
  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) == 1U)
 800519c:	4b10      	ldr	r3, [pc, #64]	@ (80051e0 <FLASH_FlushCaches+0x84>)
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80051a4:	2b01      	cmp	r3, #1
 80051a6:	d117      	bne.n	80051d8 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 80051a8:	4b0d      	ldr	r3, [pc, #52]	@ (80051e0 <FLASH_FlushCaches+0x84>)
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	4a0c      	ldr	r2, [pc, #48]	@ (80051e0 <FLASH_FlushCaches+0x84>)
 80051ae:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80051b2:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 80051b4:	4b0a      	ldr	r3, [pc, #40]	@ (80051e0 <FLASH_FlushCaches+0x84>)
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	4a09      	ldr	r2, [pc, #36]	@ (80051e0 <FLASH_FlushCaches+0x84>)
 80051ba:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80051be:	6013      	str	r3, [r2, #0]
 80051c0:	4b07      	ldr	r3, [pc, #28]	@ (80051e0 <FLASH_FlushCaches+0x84>)
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	4a06      	ldr	r2, [pc, #24]	@ (80051e0 <FLASH_FlushCaches+0x84>)
 80051c6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80051ca:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80051cc:	4b04      	ldr	r3, [pc, #16]	@ (80051e0 <FLASH_FlushCaches+0x84>)
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	4a03      	ldr	r2, [pc, #12]	@ (80051e0 <FLASH_FlushCaches+0x84>)
 80051d2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80051d6:	6013      	str	r3, [r2, #0]
  }
#endif
}
 80051d8:	bf00      	nop
 80051da:	46bd      	mov	sp, r7
 80051dc:	bc80      	pop	{r7}
 80051de:	4770      	bx	lr
 80051e0:	58004000 	.word	0x58004000

080051e4 <FLASH_AcknowledgePageErase>:
/**
  * @brief  Acknlowldge the page erase operation.
  * @retval None
  */
static void FLASH_AcknowledgePageErase(void)
{
 80051e4:	b480      	push	{r7}
 80051e6:	af00      	add	r7, sp, #0
#ifdef CORE_CM0PLUS
  CLEAR_BIT(FLASH->C2CR, (FLASH_CR_PER | FLASH_CR_PNB));
#else
  CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 80051e8:	4b05      	ldr	r3, [pc, #20]	@ (8005200 <FLASH_AcknowledgePageErase+0x1c>)
 80051ea:	695b      	ldr	r3, [r3, #20]
 80051ec:	4a04      	ldr	r2, [pc, #16]	@ (8005200 <FLASH_AcknowledgePageErase+0x1c>)
 80051ee:	f423 737e 	bic.w	r3, r3, #1016	@ 0x3f8
 80051f2:	f023 0302 	bic.w	r3, r3, #2
 80051f6:	6153      	str	r3, [r2, #20]
#endif
}
 80051f8:	bf00      	nop
 80051fa:	46bd      	mov	sp, r7
 80051fc:	bc80      	pop	{r7}
 80051fe:	4770      	bx	lr
 8005200:	58004000 	.word	0x58004000

08005204 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005204:	b480      	push	{r7}
 8005206:	b087      	sub	sp, #28
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
 800520c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800520e:	2300      	movs	r3, #0
 8005210:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005212:	e140      	b.n	8005496 <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	681a      	ldr	r2, [r3, #0]
 8005218:	2101      	movs	r1, #1
 800521a:	697b      	ldr	r3, [r7, #20]
 800521c:	fa01 f303 	lsl.w	r3, r1, r3
 8005220:	4013      	ands	r3, r2
 8005222:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	2b00      	cmp	r3, #0
 8005228:	f000 8132 	beq.w	8005490 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	685b      	ldr	r3, [r3, #4]
 8005230:	f003 0303 	and.w	r3, r3, #3
 8005234:	2b01      	cmp	r3, #1
 8005236:	d005      	beq.n	8005244 <HAL_GPIO_Init+0x40>
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	685b      	ldr	r3, [r3, #4]
 800523c:	f003 0303 	and.w	r3, r3, #3
 8005240:	2b02      	cmp	r3, #2
 8005242:	d130      	bne.n	80052a6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	689b      	ldr	r3, [r3, #8]
 8005248:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800524a:	697b      	ldr	r3, [r7, #20]
 800524c:	005b      	lsls	r3, r3, #1
 800524e:	2203      	movs	r2, #3
 8005250:	fa02 f303 	lsl.w	r3, r2, r3
 8005254:	43db      	mvns	r3, r3
 8005256:	693a      	ldr	r2, [r7, #16]
 8005258:	4013      	ands	r3, r2
 800525a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	68da      	ldr	r2, [r3, #12]
 8005260:	697b      	ldr	r3, [r7, #20]
 8005262:	005b      	lsls	r3, r3, #1
 8005264:	fa02 f303 	lsl.w	r3, r2, r3
 8005268:	693a      	ldr	r2, [r7, #16]
 800526a:	4313      	orrs	r3, r2
 800526c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	693a      	ldr	r2, [r7, #16]
 8005272:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	685b      	ldr	r3, [r3, #4]
 8005278:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800527a:	2201      	movs	r2, #1
 800527c:	697b      	ldr	r3, [r7, #20]
 800527e:	fa02 f303 	lsl.w	r3, r2, r3
 8005282:	43db      	mvns	r3, r3
 8005284:	693a      	ldr	r2, [r7, #16]
 8005286:	4013      	ands	r3, r2
 8005288:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	685b      	ldr	r3, [r3, #4]
 800528e:	091b      	lsrs	r3, r3, #4
 8005290:	f003 0201 	and.w	r2, r3, #1
 8005294:	697b      	ldr	r3, [r7, #20]
 8005296:	fa02 f303 	lsl.w	r3, r2, r3
 800529a:	693a      	ldr	r2, [r7, #16]
 800529c:	4313      	orrs	r3, r2
 800529e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	693a      	ldr	r2, [r7, #16]
 80052a4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	685b      	ldr	r3, [r3, #4]
 80052aa:	f003 0303 	and.w	r3, r3, #3
 80052ae:	2b03      	cmp	r3, #3
 80052b0:	d017      	beq.n	80052e2 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	68db      	ldr	r3, [r3, #12]
 80052b6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80052b8:	697b      	ldr	r3, [r7, #20]
 80052ba:	005b      	lsls	r3, r3, #1
 80052bc:	2203      	movs	r2, #3
 80052be:	fa02 f303 	lsl.w	r3, r2, r3
 80052c2:	43db      	mvns	r3, r3
 80052c4:	693a      	ldr	r2, [r7, #16]
 80052c6:	4013      	ands	r3, r2
 80052c8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	689a      	ldr	r2, [r3, #8]
 80052ce:	697b      	ldr	r3, [r7, #20]
 80052d0:	005b      	lsls	r3, r3, #1
 80052d2:	fa02 f303 	lsl.w	r3, r2, r3
 80052d6:	693a      	ldr	r2, [r7, #16]
 80052d8:	4313      	orrs	r3, r2
 80052da:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	693a      	ldr	r2, [r7, #16]
 80052e0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	685b      	ldr	r3, [r3, #4]
 80052e6:	f003 0303 	and.w	r3, r3, #3
 80052ea:	2b02      	cmp	r3, #2
 80052ec:	d123      	bne.n	8005336 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80052ee:	697b      	ldr	r3, [r7, #20]
 80052f0:	08da      	lsrs	r2, r3, #3
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	3208      	adds	r2, #8
 80052f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80052fa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80052fc:	697b      	ldr	r3, [r7, #20]
 80052fe:	f003 0307 	and.w	r3, r3, #7
 8005302:	009b      	lsls	r3, r3, #2
 8005304:	220f      	movs	r2, #15
 8005306:	fa02 f303 	lsl.w	r3, r2, r3
 800530a:	43db      	mvns	r3, r3
 800530c:	693a      	ldr	r2, [r7, #16]
 800530e:	4013      	ands	r3, r2
 8005310:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	691a      	ldr	r2, [r3, #16]
 8005316:	697b      	ldr	r3, [r7, #20]
 8005318:	f003 0307 	and.w	r3, r3, #7
 800531c:	009b      	lsls	r3, r3, #2
 800531e:	fa02 f303 	lsl.w	r3, r2, r3
 8005322:	693a      	ldr	r2, [r7, #16]
 8005324:	4313      	orrs	r3, r2
 8005326:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005328:	697b      	ldr	r3, [r7, #20]
 800532a:	08da      	lsrs	r2, r3, #3
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	3208      	adds	r2, #8
 8005330:	6939      	ldr	r1, [r7, #16]
 8005332:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800533c:	697b      	ldr	r3, [r7, #20]
 800533e:	005b      	lsls	r3, r3, #1
 8005340:	2203      	movs	r2, #3
 8005342:	fa02 f303 	lsl.w	r3, r2, r3
 8005346:	43db      	mvns	r3, r3
 8005348:	693a      	ldr	r2, [r7, #16]
 800534a:	4013      	ands	r3, r2
 800534c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800534e:	683b      	ldr	r3, [r7, #0]
 8005350:	685b      	ldr	r3, [r3, #4]
 8005352:	f003 0203 	and.w	r2, r3, #3
 8005356:	697b      	ldr	r3, [r7, #20]
 8005358:	005b      	lsls	r3, r3, #1
 800535a:	fa02 f303 	lsl.w	r3, r2, r3
 800535e:	693a      	ldr	r2, [r7, #16]
 8005360:	4313      	orrs	r3, r2
 8005362:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	693a      	ldr	r2, [r7, #16]
 8005368:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	685b      	ldr	r3, [r3, #4]
 800536e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005372:	2b00      	cmp	r3, #0
 8005374:	f000 808c 	beq.w	8005490 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8005378:	4a4e      	ldr	r2, [pc, #312]	@ (80054b4 <HAL_GPIO_Init+0x2b0>)
 800537a:	697b      	ldr	r3, [r7, #20]
 800537c:	089b      	lsrs	r3, r3, #2
 800537e:	3302      	adds	r3, #2
 8005380:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005384:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8005386:	697b      	ldr	r3, [r7, #20]
 8005388:	f003 0303 	and.w	r3, r3, #3
 800538c:	009b      	lsls	r3, r3, #2
 800538e:	2207      	movs	r2, #7
 8005390:	fa02 f303 	lsl.w	r3, r2, r3
 8005394:	43db      	mvns	r3, r3
 8005396:	693a      	ldr	r2, [r7, #16]
 8005398:	4013      	ands	r3, r2
 800539a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80053a2:	d00d      	beq.n	80053c0 <HAL_GPIO_Init+0x1bc>
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	4a44      	ldr	r2, [pc, #272]	@ (80054b8 <HAL_GPIO_Init+0x2b4>)
 80053a8:	4293      	cmp	r3, r2
 80053aa:	d007      	beq.n	80053bc <HAL_GPIO_Init+0x1b8>
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	4a43      	ldr	r2, [pc, #268]	@ (80054bc <HAL_GPIO_Init+0x2b8>)
 80053b0:	4293      	cmp	r3, r2
 80053b2:	d101      	bne.n	80053b8 <HAL_GPIO_Init+0x1b4>
 80053b4:	2302      	movs	r3, #2
 80053b6:	e004      	b.n	80053c2 <HAL_GPIO_Init+0x1be>
 80053b8:	2307      	movs	r3, #7
 80053ba:	e002      	b.n	80053c2 <HAL_GPIO_Init+0x1be>
 80053bc:	2301      	movs	r3, #1
 80053be:	e000      	b.n	80053c2 <HAL_GPIO_Init+0x1be>
 80053c0:	2300      	movs	r3, #0
 80053c2:	697a      	ldr	r2, [r7, #20]
 80053c4:	f002 0203 	and.w	r2, r2, #3
 80053c8:	0092      	lsls	r2, r2, #2
 80053ca:	4093      	lsls	r3, r2
 80053cc:	693a      	ldr	r2, [r7, #16]
 80053ce:	4313      	orrs	r3, r2
 80053d0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80053d2:	4938      	ldr	r1, [pc, #224]	@ (80054b4 <HAL_GPIO_Init+0x2b0>)
 80053d4:	697b      	ldr	r3, [r7, #20]
 80053d6:	089b      	lsrs	r3, r3, #2
 80053d8:	3302      	adds	r3, #2
 80053da:	693a      	ldr	r2, [r7, #16]
 80053dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80053e0:	4b37      	ldr	r3, [pc, #220]	@ (80054c0 <HAL_GPIO_Init+0x2bc>)
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	43db      	mvns	r3, r3
 80053ea:	693a      	ldr	r2, [r7, #16]
 80053ec:	4013      	ands	r3, r2
 80053ee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	685b      	ldr	r3, [r3, #4]
 80053f4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d003      	beq.n	8005404 <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 80053fc:	693a      	ldr	r2, [r7, #16]
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	4313      	orrs	r3, r2
 8005402:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005404:	4a2e      	ldr	r2, [pc, #184]	@ (80054c0 <HAL_GPIO_Init+0x2bc>)
 8005406:	693b      	ldr	r3, [r7, #16]
 8005408:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800540a:	4b2d      	ldr	r3, [pc, #180]	@ (80054c0 <HAL_GPIO_Init+0x2bc>)
 800540c:	685b      	ldr	r3, [r3, #4]
 800540e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	43db      	mvns	r3, r3
 8005414:	693a      	ldr	r2, [r7, #16]
 8005416:	4013      	ands	r3, r2
 8005418:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	685b      	ldr	r3, [r3, #4]
 800541e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005422:	2b00      	cmp	r3, #0
 8005424:	d003      	beq.n	800542e <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 8005426:	693a      	ldr	r2, [r7, #16]
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	4313      	orrs	r3, r2
 800542c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800542e:	4a24      	ldr	r2, [pc, #144]	@ (80054c0 <HAL_GPIO_Init+0x2bc>)
 8005430:	693b      	ldr	r3, [r7, #16]
 8005432:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8005434:	4b22      	ldr	r3, [pc, #136]	@ (80054c0 <HAL_GPIO_Init+0x2bc>)
 8005436:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800543a:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	43db      	mvns	r3, r3
 8005440:	693a      	ldr	r2, [r7, #16]
 8005442:	4013      	ands	r3, r2
 8005444:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	685b      	ldr	r3, [r3, #4]
 800544a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800544e:	2b00      	cmp	r3, #0
 8005450:	d003      	beq.n	800545a <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 8005452:	693a      	ldr	r2, [r7, #16]
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	4313      	orrs	r3, r2
 8005458:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 800545a:	4a19      	ldr	r2, [pc, #100]	@ (80054c0 <HAL_GPIO_Init+0x2bc>)
 800545c:	693b      	ldr	r3, [r7, #16]
 800545e:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 8005462:	4b17      	ldr	r3, [pc, #92]	@ (80054c0 <HAL_GPIO_Init+0x2bc>)
 8005464:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005468:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	43db      	mvns	r3, r3
 800546e:	693a      	ldr	r2, [r7, #16]
 8005470:	4013      	ands	r3, r2
 8005472:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	685b      	ldr	r3, [r3, #4]
 8005478:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800547c:	2b00      	cmp	r3, #0
 800547e:	d003      	beq.n	8005488 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8005480:	693a      	ldr	r2, [r7, #16]
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	4313      	orrs	r3, r2
 8005486:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8005488:	4a0d      	ldr	r2, [pc, #52]	@ (80054c0 <HAL_GPIO_Init+0x2bc>)
 800548a:	693b      	ldr	r3, [r7, #16]
 800548c:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 8005490:	697b      	ldr	r3, [r7, #20]
 8005492:	3301      	adds	r3, #1
 8005494:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	681a      	ldr	r2, [r3, #0]
 800549a:	697b      	ldr	r3, [r7, #20]
 800549c:	fa22 f303 	lsr.w	r3, r2, r3
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	f47f aeb7 	bne.w	8005214 <HAL_GPIO_Init+0x10>
  }
}
 80054a6:	bf00      	nop
 80054a8:	bf00      	nop
 80054aa:	371c      	adds	r7, #28
 80054ac:	46bd      	mov	sp, r7
 80054ae:	bc80      	pop	{r7}
 80054b0:	4770      	bx	lr
 80054b2:	bf00      	nop
 80054b4:	40010000 	.word	0x40010000
 80054b8:	48000400 	.word	0x48000400
 80054bc:	48000800 	.word	0x48000800
 80054c0:	58000800 	.word	0x58000800

080054c4 <HAL_GPIO_DeInit>:
  * @param GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80054c4:	b480      	push	{r7}
 80054c6:	b087      	sub	sp, #28
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
 80054cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80054ce:	2300      	movs	r3, #0
 80054d0:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80054d2:	e0af      	b.n	8005634 <HAL_GPIO_DeInit+0x170>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80054d4:	2201      	movs	r2, #1
 80054d6:	697b      	ldr	r3, [r7, #20]
 80054d8:	fa02 f303 	lsl.w	r3, r2, r3
 80054dc:	683a      	ldr	r2, [r7, #0]
 80054de:	4013      	ands	r3, r2
 80054e0:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80054e2:	693b      	ldr	r3, [r7, #16]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	f000 80a2 	beq.w	800562e <HAL_GPIO_DeInit+0x16a>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 80054ea:	4a59      	ldr	r2, [pc, #356]	@ (8005650 <HAL_GPIO_DeInit+0x18c>)
 80054ec:	697b      	ldr	r3, [r7, #20]
 80054ee:	089b      	lsrs	r3, r3, #2
 80054f0:	3302      	adds	r3, #2
 80054f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80054f6:	60fb      	str	r3, [r7, #12]
      tmp &= (0x07uL << (4U * (position & 0x03U)));
 80054f8:	697b      	ldr	r3, [r7, #20]
 80054fa:	f003 0303 	and.w	r3, r3, #3
 80054fe:	009b      	lsls	r3, r3, #2
 8005500:	2207      	movs	r2, #7
 8005502:	fa02 f303 	lsl.w	r3, r2, r3
 8005506:	68fa      	ldr	r2, [r7, #12]
 8005508:	4013      	ands	r3, r2
 800550a:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8005512:	d00d      	beq.n	8005530 <HAL_GPIO_DeInit+0x6c>
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	4a4f      	ldr	r2, [pc, #316]	@ (8005654 <HAL_GPIO_DeInit+0x190>)
 8005518:	4293      	cmp	r3, r2
 800551a:	d007      	beq.n	800552c <HAL_GPIO_DeInit+0x68>
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	4a4e      	ldr	r2, [pc, #312]	@ (8005658 <HAL_GPIO_DeInit+0x194>)
 8005520:	4293      	cmp	r3, r2
 8005522:	d101      	bne.n	8005528 <HAL_GPIO_DeInit+0x64>
 8005524:	2302      	movs	r3, #2
 8005526:	e004      	b.n	8005532 <HAL_GPIO_DeInit+0x6e>
 8005528:	2307      	movs	r3, #7
 800552a:	e002      	b.n	8005532 <HAL_GPIO_DeInit+0x6e>
 800552c:	2301      	movs	r3, #1
 800552e:	e000      	b.n	8005532 <HAL_GPIO_DeInit+0x6e>
 8005530:	2300      	movs	r3, #0
 8005532:	697a      	ldr	r2, [r7, #20]
 8005534:	f002 0203 	and.w	r2, r2, #3
 8005538:	0092      	lsls	r2, r2, #2
 800553a:	4093      	lsls	r3, r2
 800553c:	68fa      	ldr	r2, [r7, #12]
 800553e:	429a      	cmp	r2, r3
 8005540:	d136      	bne.n	80055b0 <HAL_GPIO_DeInit+0xec>
        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 &= ~(iocurrent);
        EXTI->C2EMR1 &= ~(iocurrent);
#else
        EXTI->IMR1 &= ~(iocurrent);
 8005542:	4b46      	ldr	r3, [pc, #280]	@ (800565c <HAL_GPIO_DeInit+0x198>)
 8005544:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8005548:	693b      	ldr	r3, [r7, #16]
 800554a:	43db      	mvns	r3, r3
 800554c:	4943      	ldr	r1, [pc, #268]	@ (800565c <HAL_GPIO_DeInit+0x198>)
 800554e:	4013      	ands	r3, r2
 8005550:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
        EXTI->EMR1 &= ~(iocurrent);
 8005554:	4b41      	ldr	r3, [pc, #260]	@ (800565c <HAL_GPIO_DeInit+0x198>)
 8005556:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 800555a:	693b      	ldr	r3, [r7, #16]
 800555c:	43db      	mvns	r3, r3
 800555e:	493f      	ldr	r1, [pc, #252]	@ (800565c <HAL_GPIO_DeInit+0x198>)
 8005560:	4013      	ands	r3, r2
 8005562:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* CORE_CM0PLUS */

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8005566:	4b3d      	ldr	r3, [pc, #244]	@ (800565c <HAL_GPIO_DeInit+0x198>)
 8005568:	681a      	ldr	r2, [r3, #0]
 800556a:	693b      	ldr	r3, [r7, #16]
 800556c:	43db      	mvns	r3, r3
 800556e:	493b      	ldr	r1, [pc, #236]	@ (800565c <HAL_GPIO_DeInit+0x198>)
 8005570:	4013      	ands	r3, r2
 8005572:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 8005574:	4b39      	ldr	r3, [pc, #228]	@ (800565c <HAL_GPIO_DeInit+0x198>)
 8005576:	685a      	ldr	r2, [r3, #4]
 8005578:	693b      	ldr	r3, [r7, #16]
 800557a:	43db      	mvns	r3, r3
 800557c:	4937      	ldr	r1, [pc, #220]	@ (800565c <HAL_GPIO_DeInit+0x198>)
 800557e:	4013      	ands	r3, r2
 8005580:	604b      	str	r3, [r1, #4]

        /* Clear EXTICR configuration */
        tmp = 0x07uL << (4u * (position & 0x03U));
 8005582:	697b      	ldr	r3, [r7, #20]
 8005584:	f003 0303 	and.w	r3, r3, #3
 8005588:	009b      	lsls	r3, r3, #2
 800558a:	2207      	movs	r2, #7
 800558c:	fa02 f303 	lsl.w	r3, r2, r3
 8005590:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8005592:	4a2f      	ldr	r2, [pc, #188]	@ (8005650 <HAL_GPIO_DeInit+0x18c>)
 8005594:	697b      	ldr	r3, [r7, #20]
 8005596:	089b      	lsrs	r3, r3, #2
 8005598:	3302      	adds	r3, #2
 800559a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	43da      	mvns	r2, r3
 80055a2:	482b      	ldr	r0, [pc, #172]	@ (8005650 <HAL_GPIO_DeInit+0x18c>)
 80055a4:	697b      	ldr	r3, [r7, #20]
 80055a6:	089b      	lsrs	r3, r3, #2
 80055a8:	400a      	ands	r2, r1
 80055aa:	3302      	adds	r3, #2
 80055ac:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681a      	ldr	r2, [r3, #0]
 80055b4:	697b      	ldr	r3, [r7, #20]
 80055b6:	005b      	lsls	r3, r3, #1
 80055b8:	2103      	movs	r1, #3
 80055ba:	fa01 f303 	lsl.w	r3, r1, r3
 80055be:	431a      	orrs	r2, r3
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 80055c4:	697b      	ldr	r3, [r7, #20]
 80055c6:	08da      	lsrs	r2, r3, #3
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	3208      	adds	r2, #8
 80055cc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80055d0:	697b      	ldr	r3, [r7, #20]
 80055d2:	f003 0307 	and.w	r3, r3, #7
 80055d6:	009b      	lsls	r3, r3, #2
 80055d8:	220f      	movs	r2, #15
 80055da:	fa02 f303 	lsl.w	r3, r2, r3
 80055de:	43db      	mvns	r3, r3
 80055e0:	697a      	ldr	r2, [r7, #20]
 80055e2:	08d2      	lsrs	r2, r2, #3
 80055e4:	4019      	ands	r1, r3
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	3208      	adds	r2, #8
 80055ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	689a      	ldr	r2, [r3, #8]
 80055f2:	697b      	ldr	r3, [r7, #20]
 80055f4:	005b      	lsls	r3, r3, #1
 80055f6:	2103      	movs	r1, #3
 80055f8:	fa01 f303 	lsl.w	r3, r1, r3
 80055fc:	43db      	mvns	r3, r3
 80055fe:	401a      	ands	r2, r3
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	685a      	ldr	r2, [r3, #4]
 8005608:	2101      	movs	r1, #1
 800560a:	697b      	ldr	r3, [r7, #20]
 800560c:	fa01 f303 	lsl.w	r3, r1, r3
 8005610:	43db      	mvns	r3, r3
 8005612:	401a      	ands	r2, r3
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	68da      	ldr	r2, [r3, #12]
 800561c:	697b      	ldr	r3, [r7, #20]
 800561e:	005b      	lsls	r3, r3, #1
 8005620:	2103      	movs	r1, #3
 8005622:	fa01 f303 	lsl.w	r3, r1, r3
 8005626:	43db      	mvns	r3, r3
 8005628:	401a      	ands	r2, r3
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	60da      	str	r2, [r3, #12]
    }

    position++;
 800562e:	697b      	ldr	r3, [r7, #20]
 8005630:	3301      	adds	r3, #1
 8005632:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8005634:	683a      	ldr	r2, [r7, #0]
 8005636:	697b      	ldr	r3, [r7, #20]
 8005638:	fa22 f303 	lsr.w	r3, r2, r3
 800563c:	2b00      	cmp	r3, #0
 800563e:	f47f af49 	bne.w	80054d4 <HAL_GPIO_DeInit+0x10>
  }
}
 8005642:	bf00      	nop
 8005644:	bf00      	nop
 8005646:	371c      	adds	r7, #28
 8005648:	46bd      	mov	sp, r7
 800564a:	bc80      	pop	{r7}
 800564c:	4770      	bx	lr
 800564e:	bf00      	nop
 8005650:	40010000 	.word	0x40010000
 8005654:	48000400 	.word	0x48000400
 8005658:	48000800 	.word	0x48000800
 800565c:	58000800 	.word	0x58000800

08005660 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005660:	b480      	push	{r7}
 8005662:	b083      	sub	sp, #12
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
 8005668:	460b      	mov	r3, r1
 800566a:	807b      	strh	r3, [r7, #2]
 800566c:	4613      	mov	r3, r2
 800566e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005670:	787b      	ldrb	r3, [r7, #1]
 8005672:	2b00      	cmp	r3, #0
 8005674:	d003      	beq.n	800567e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005676:	887a      	ldrh	r2, [r7, #2]
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800567c:	e002      	b.n	8005684 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800567e:	887a      	ldrh	r2, [r7, #2]
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005684:	bf00      	nop
 8005686:	370c      	adds	r7, #12
 8005688:	46bd      	mov	sp, r7
 800568a:	bc80      	pop	{r7}
 800568c:	4770      	bx	lr
	...

08005690 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005690:	b580      	push	{r7, lr}
 8005692:	b082      	sub	sp, #8
 8005694:	af00      	add	r7, sp, #0
 8005696:	4603      	mov	r3, r0
 8005698:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800569a:	4b08      	ldr	r3, [pc, #32]	@ (80056bc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800569c:	68da      	ldr	r2, [r3, #12]
 800569e:	88fb      	ldrh	r3, [r7, #6]
 80056a0:	4013      	ands	r3, r2
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d006      	beq.n	80056b4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80056a6:	4a05      	ldr	r2, [pc, #20]	@ (80056bc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80056a8:	88fb      	ldrh	r3, [r7, #6]
 80056aa:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80056ac:	88fb      	ldrh	r3, [r7, #6]
 80056ae:	4618      	mov	r0, r3
 80056b0:	f004 feb6 	bl	800a420 <HAL_GPIO_EXTI_Callback>
  }
}
 80056b4:	bf00      	nop
 80056b6:	3708      	adds	r7, #8
 80056b8:	46bd      	mov	sp, r7
 80056ba:	bd80      	pop	{r7, pc}
 80056bc:	58000800 	.word	0x58000800

080056c0 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80056c0:	b480      	push	{r7}
 80056c2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80056c4:	4b04      	ldr	r3, [pc, #16]	@ (80056d8 <HAL_PWR_EnableBkUpAccess+0x18>)
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	4a03      	ldr	r2, [pc, #12]	@ (80056d8 <HAL_PWR_EnableBkUpAccess+0x18>)
 80056ca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80056ce:	6013      	str	r3, [r2, #0]
}
 80056d0:	bf00      	nop
 80056d2:	46bd      	mov	sp, r7
 80056d4:	bc80      	pop	{r7}
 80056d6:	4770      	bx	lr
 80056d8:	58000400 	.word	0x58000400

080056dc <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 80056dc:	b580      	push	{r7, lr}
 80056de:	b082      	sub	sp, #8
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
 80056e4:	460b      	mov	r3, r1
 80056e6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d10c      	bne.n	8005708 <HAL_PWR_EnterSLEEPMode+0x2c>
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 80056ee:	4b13      	ldr	r3, [pc, #76]	@ (800573c <HAL_PWR_EnterSLEEPMode+0x60>)
 80056f0:	695b      	ldr	r3, [r3, #20]
 80056f2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80056f6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80056fa:	d10d      	bne.n	8005718 <HAL_PWR_EnterSLEEPMode+0x3c>
    {
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 80056fc:	f000 f83c 	bl	8005778 <HAL_PWREx_DisableLowPowerRunMode>
 8005700:	4603      	mov	r3, r0
 8005702:	2b00      	cmp	r3, #0
 8005704:	d008      	beq.n	8005718 <HAL_PWR_EnterSLEEPMode+0x3c>
      {
        return ;
 8005706:	e015      	b.n	8005734 <HAL_PWR_EnterSLEEPMode+0x58>
  }
  else
  {
    /* If in run mode, first move to low-power run mode.
       The system clock frequency must be below 2 MHz at this point. */
    if (HAL_IS_BIT_CLR(PWR->SR2, (PWR_SR2_REGLPF)))
 8005708:	4b0c      	ldr	r3, [pc, #48]	@ (800573c <HAL_PWR_EnterSLEEPMode+0x60>)
 800570a:	695b      	ldr	r3, [r3, #20]
 800570c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005710:	2b00      	cmp	r3, #0
 8005712:	d101      	bne.n	8005718 <HAL_PWR_EnterSLEEPMode+0x3c>
    {
      HAL_PWREx_EnableLowPowerRunMode();
 8005714:	f000 f822 	bl	800575c <HAL_PWREx_EnableLowPowerRunMode>
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8005718:	4b09      	ldr	r3, [pc, #36]	@ (8005740 <HAL_PWR_EnterSLEEPMode+0x64>)
 800571a:	691b      	ldr	r3, [r3, #16]
 800571c:	4a08      	ldr	r2, [pc, #32]	@ (8005740 <HAL_PWR_EnterSLEEPMode+0x64>)
 800571e:	f023 0304 	bic.w	r3, r3, #4
 8005722:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if (SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8005724:	78fb      	ldrb	r3, [r7, #3]
 8005726:	2b01      	cmp	r3, #1
 8005728:	d101      	bne.n	800572e <HAL_PWR_EnterSLEEPMode+0x52>
  {
    /* Request Wait For Interrupt */
    __WFI();
 800572a:	bf30      	wfi
 800572c:	e002      	b.n	8005734 <HAL_PWR_EnterSLEEPMode+0x58>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 800572e:	bf40      	sev
    __WFE();
 8005730:	bf20      	wfe
    __WFE();
 8005732:	bf20      	wfe
  }
}
 8005734:	3708      	adds	r7, #8
 8005736:	46bd      	mov	sp, r7
 8005738:	bd80      	pop	{r7, pc}
 800573a:	bf00      	nop
 800573c:	58000400 	.word	0x58000400
 8005740:	e000ed00 	.word	0xe000ed00

08005744 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005744:	b480      	push	{r7}
 8005746:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8005748:	4b03      	ldr	r3, [pc, #12]	@ (8005758 <HAL_PWREx_GetVoltageRange+0x14>)
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 8005750:	4618      	mov	r0, r3
 8005752:	46bd      	mov	sp, r7
 8005754:	bc80      	pop	{r7}
 8005756:	4770      	bx	lr
 8005758:	58000400 	.word	0x58000400

0800575c <HAL_PWREx_EnableLowPowerRunMode>:
  * @note  In Low-power Run mode, all I/O pins keep the same state as in Run mode.
  * @note  Clock frequency must be reduced below 2 MHz.
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
 800575c:	b480      	push	{r7}
 800575e:	af00      	add	r7, sp, #0
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 8005760:	4b04      	ldr	r3, [pc, #16]	@ (8005774 <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	4a03      	ldr	r2, [pc, #12]	@ (8005774 <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 8005766:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800576a:	6013      	str	r3, [r2, #0]
}
 800576c:	bf00      	nop
 800576e:	46bd      	mov	sp, r7
 8005770:	bc80      	pop	{r7}
 8005772:	4770      	bx	lr
 8005774:	58000400 	.word	0x58000400

08005778 <HAL_PWREx_DisableLowPowerRunMode>:
  *        returns HAL_TIMEOUT status). The system clock frequency can then be
  *        increased above 2 MHz.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
 8005778:	b480      	push	{r7}
 800577a:	b083      	sub	sp, #12
 800577c:	af00      	add	r7, sp, #0
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 800577e:	4b16      	ldr	r3, [pc, #88]	@ (80057d8 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	4a15      	ldr	r2, [pc, #84]	@ (80057d8 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8005784:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005788:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000UL);
 800578a:	4b14      	ldr	r3, [pc, #80]	@ (80057dc <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	2232      	movs	r2, #50	@ 0x32
 8005790:	fb02 f303 	mul.w	r3, r2, r3
 8005794:	4a12      	ldr	r2, [pc, #72]	@ (80057e0 <HAL_PWREx_DisableLowPowerRunMode+0x68>)
 8005796:	fba2 2303 	umull	r2, r3, r2, r3
 800579a:	0c9b      	lsrs	r3, r3, #18
 800579c:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 800579e:	e002      	b.n	80057a6 <HAL_PWREx_DisableLowPowerRunMode+0x2e>
  {
    wait_loop_index--;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	3b01      	subs	r3, #1
 80057a4:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 80057a6:	4b0c      	ldr	r3, [pc, #48]	@ (80057d8 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 80057a8:	695b      	ldr	r3, [r3, #20]
 80057aa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80057ae:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80057b2:	d102      	bne.n	80057ba <HAL_PWREx_DisableLowPowerRunMode+0x42>
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d1f2      	bne.n	80057a0 <HAL_PWREx_DisableLowPowerRunMode+0x28>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 80057ba:	4b07      	ldr	r3, [pc, #28]	@ (80057d8 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 80057bc:	695b      	ldr	r3, [r3, #20]
 80057be:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80057c2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80057c6:	d101      	bne.n	80057cc <HAL_PWREx_DisableLowPowerRunMode+0x54>
  {
    return HAL_TIMEOUT;
 80057c8:	2303      	movs	r3, #3
 80057ca:	e000      	b.n	80057ce <HAL_PWREx_DisableLowPowerRunMode+0x56>
  }

  return HAL_OK;
 80057cc:	2300      	movs	r3, #0
}
 80057ce:	4618      	mov	r0, r3
 80057d0:	370c      	adds	r7, #12
 80057d2:	46bd      	mov	sp, r7
 80057d4:	bc80      	pop	{r7}
 80057d6:	4770      	bx	lr
 80057d8:	58000400 	.word	0x58000400
 80057dc:	20000000 	.word	0x20000000
 80057e0:	431bde83 	.word	0x431bde83

080057e4 <HAL_PWREx_EnterSTOP2Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP2Mode(uint8_t STOPEntry)
{
 80057e4:	b480      	push	{r7}
 80057e6:	b083      	sub	sp, #12
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	4603      	mov	r3, r0
 80057ec:	71fb      	strb	r3, [r7, #7]
#ifdef CORE_CM0PLUS
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
#else
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
 80057ee:	4b10      	ldr	r3, [pc, #64]	@ (8005830 <HAL_PWREx_EnterSTOP2Mode+0x4c>)
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f023 0307 	bic.w	r3, r3, #7
 80057f6:	4a0e      	ldr	r2, [pc, #56]	@ (8005830 <HAL_PWREx_EnterSTOP2Mode+0x4c>)
 80057f8:	f043 0302 	orr.w	r3, r3, #2
 80057fc:	6013      	str	r3, [r2, #0]
#endif

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80057fe:	4b0d      	ldr	r3, [pc, #52]	@ (8005834 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8005800:	691b      	ldr	r3, [r3, #16]
 8005802:	4a0c      	ldr	r2, [pc, #48]	@ (8005834 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8005804:	f043 0304 	orr.w	r3, r3, #4
 8005808:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if (STOPEntry == PWR_STOPENTRY_WFI)
 800580a:	79fb      	ldrb	r3, [r7, #7]
 800580c:	2b01      	cmp	r3, #1
 800580e:	d101      	bne.n	8005814 <HAL_PWREx_EnterSTOP2Mode+0x30>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8005810:	bf30      	wfi
 8005812:	e002      	b.n	800581a <HAL_PWREx_EnterSTOP2Mode+0x36>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8005814:	bf40      	sev
    __WFE();
 8005816:	bf20      	wfe
    __WFE();
 8005818:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800581a:	4b06      	ldr	r3, [pc, #24]	@ (8005834 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 800581c:	691b      	ldr	r3, [r3, #16]
 800581e:	4a05      	ldr	r2, [pc, #20]	@ (8005834 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8005820:	f023 0304 	bic.w	r3, r3, #4
 8005824:	6113      	str	r3, [r2, #16]
}
 8005826:	bf00      	nop
 8005828:	370c      	adds	r7, #12
 800582a:	46bd      	mov	sp, r7
 800582c:	bc80      	pop	{r7}
 800582e:	4770      	bx	lr
 8005830:	58000400 	.word	0x58000400
 8005834:	e000ed00 	.word	0xe000ed00

08005838 <LL_PWR_IsEnabledBkUpAccess>:
{
 8005838:	b480      	push	{r7}
 800583a:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 800583c:	4b06      	ldr	r3, [pc, #24]	@ (8005858 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005844:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005848:	d101      	bne.n	800584e <LL_PWR_IsEnabledBkUpAccess+0x16>
 800584a:	2301      	movs	r3, #1
 800584c:	e000      	b.n	8005850 <LL_PWR_IsEnabledBkUpAccess+0x18>
 800584e:	2300      	movs	r3, #0
}
 8005850:	4618      	mov	r0, r3
 8005852:	46bd      	mov	sp, r7
 8005854:	bc80      	pop	{r7}
 8005856:	4770      	bx	lr
 8005858:	58000400 	.word	0x58000400

0800585c <LL_RCC_HSE_EnableTcxo>:
{
 800585c:	b480      	push	{r7}
 800585e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8005860:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800586a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800586e:	6013      	str	r3, [r2, #0]
}
 8005870:	bf00      	nop
 8005872:	46bd      	mov	sp, r7
 8005874:	bc80      	pop	{r7}
 8005876:	4770      	bx	lr

08005878 <LL_RCC_HSE_DisableTcxo>:
{
 8005878:	b480      	push	{r7}
 800587a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 800587c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005886:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800588a:	6013      	str	r3, [r2, #0]
}
 800588c:	bf00      	nop
 800588e:	46bd      	mov	sp, r7
 8005890:	bc80      	pop	{r7}
 8005892:	4770      	bx	lr

08005894 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8005894:	b480      	push	{r7}
 8005896:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8005898:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80058a2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80058a6:	d101      	bne.n	80058ac <LL_RCC_HSE_IsEnabledDiv2+0x18>
 80058a8:	2301      	movs	r3, #1
 80058aa:	e000      	b.n	80058ae <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 80058ac:	2300      	movs	r3, #0
}
 80058ae:	4618      	mov	r0, r3
 80058b0:	46bd      	mov	sp, r7
 80058b2:	bc80      	pop	{r7}
 80058b4:	4770      	bx	lr

080058b6 <LL_RCC_HSE_Enable>:
{
 80058b6:	b480      	push	{r7}
 80058b8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80058ba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80058c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80058c8:	6013      	str	r3, [r2, #0]
}
 80058ca:	bf00      	nop
 80058cc:	46bd      	mov	sp, r7
 80058ce:	bc80      	pop	{r7}
 80058d0:	4770      	bx	lr

080058d2 <LL_RCC_HSE_Disable>:
{
 80058d2:	b480      	push	{r7}
 80058d4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80058d6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80058e0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80058e4:	6013      	str	r3, [r2, #0]
}
 80058e6:	bf00      	nop
 80058e8:	46bd      	mov	sp, r7
 80058ea:	bc80      	pop	{r7}
 80058ec:	4770      	bx	lr

080058ee <LL_RCC_HSE_IsReady>:
{
 80058ee:	b480      	push	{r7}
 80058f0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80058f2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80058fc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005900:	d101      	bne.n	8005906 <LL_RCC_HSE_IsReady+0x18>
 8005902:	2301      	movs	r3, #1
 8005904:	e000      	b.n	8005908 <LL_RCC_HSE_IsReady+0x1a>
 8005906:	2300      	movs	r3, #0
}
 8005908:	4618      	mov	r0, r3
 800590a:	46bd      	mov	sp, r7
 800590c:	bc80      	pop	{r7}
 800590e:	4770      	bx	lr

08005910 <LL_RCC_HSI_Enable>:
{
 8005910:	b480      	push	{r7}
 8005912:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8005914:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800591e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005922:	6013      	str	r3, [r2, #0]
}
 8005924:	bf00      	nop
 8005926:	46bd      	mov	sp, r7
 8005928:	bc80      	pop	{r7}
 800592a:	4770      	bx	lr

0800592c <LL_RCC_HSI_Disable>:
{
 800592c:	b480      	push	{r7}
 800592e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8005930:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800593a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800593e:	6013      	str	r3, [r2, #0]
}
 8005940:	bf00      	nop
 8005942:	46bd      	mov	sp, r7
 8005944:	bc80      	pop	{r7}
 8005946:	4770      	bx	lr

08005948 <LL_RCC_HSI_IsReady>:
{
 8005948:	b480      	push	{r7}
 800594a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800594c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005956:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800595a:	d101      	bne.n	8005960 <LL_RCC_HSI_IsReady+0x18>
 800595c:	2301      	movs	r3, #1
 800595e:	e000      	b.n	8005962 <LL_RCC_HSI_IsReady+0x1a>
 8005960:	2300      	movs	r3, #0
}
 8005962:	4618      	mov	r0, r3
 8005964:	46bd      	mov	sp, r7
 8005966:	bc80      	pop	{r7}
 8005968:	4770      	bx	lr

0800596a <LL_RCC_HSI_SetCalibTrimming>:
{
 800596a:	b480      	push	{r7}
 800596c:	b083      	sub	sp, #12
 800596e:	af00      	add	r7, sp, #0
 8005970:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8005972:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005976:	685b      	ldr	r3, [r3, #4]
 8005978:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	061b      	lsls	r3, r3, #24
 8005980:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005984:	4313      	orrs	r3, r2
 8005986:	604b      	str	r3, [r1, #4]
}
 8005988:	bf00      	nop
 800598a:	370c      	adds	r7, #12
 800598c:	46bd      	mov	sp, r7
 800598e:	bc80      	pop	{r7}
 8005990:	4770      	bx	lr

08005992 <LL_RCC_LSE_IsReady>:
{
 8005992:	b480      	push	{r7}
 8005994:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8005996:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800599a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800599e:	f003 0302 	and.w	r3, r3, #2
 80059a2:	2b02      	cmp	r3, #2
 80059a4:	d101      	bne.n	80059aa <LL_RCC_LSE_IsReady+0x18>
 80059a6:	2301      	movs	r3, #1
 80059a8:	e000      	b.n	80059ac <LL_RCC_LSE_IsReady+0x1a>
 80059aa:	2300      	movs	r3, #0
}
 80059ac:	4618      	mov	r0, r3
 80059ae:	46bd      	mov	sp, r7
 80059b0:	bc80      	pop	{r7}
 80059b2:	4770      	bx	lr

080059b4 <LL_RCC_LSI_Enable>:
{
 80059b4:	b480      	push	{r7}
 80059b6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 80059b8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80059bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80059c0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80059c4:	f043 0301 	orr.w	r3, r3, #1
 80059c8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 80059cc:	bf00      	nop
 80059ce:	46bd      	mov	sp, r7
 80059d0:	bc80      	pop	{r7}
 80059d2:	4770      	bx	lr

080059d4 <LL_RCC_LSI_Disable>:
{
 80059d4:	b480      	push	{r7}
 80059d6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 80059d8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80059dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80059e0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80059e4:	f023 0301 	bic.w	r3, r3, #1
 80059e8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 80059ec:	bf00      	nop
 80059ee:	46bd      	mov	sp, r7
 80059f0:	bc80      	pop	{r7}
 80059f2:	4770      	bx	lr

080059f4 <LL_RCC_LSI_IsReady>:
{
 80059f4:	b480      	push	{r7}
 80059f6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 80059f8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80059fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005a00:	f003 0302 	and.w	r3, r3, #2
 8005a04:	2b02      	cmp	r3, #2
 8005a06:	d101      	bne.n	8005a0c <LL_RCC_LSI_IsReady+0x18>
 8005a08:	2301      	movs	r3, #1
 8005a0a:	e000      	b.n	8005a0e <LL_RCC_LSI_IsReady+0x1a>
 8005a0c:	2300      	movs	r3, #0
}
 8005a0e:	4618      	mov	r0, r3
 8005a10:	46bd      	mov	sp, r7
 8005a12:	bc80      	pop	{r7}
 8005a14:	4770      	bx	lr

08005a16 <LL_RCC_MSI_Enable>:
{
 8005a16:	b480      	push	{r7}
 8005a18:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8005a1a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005a24:	f043 0301 	orr.w	r3, r3, #1
 8005a28:	6013      	str	r3, [r2, #0]
}
 8005a2a:	bf00      	nop
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	bc80      	pop	{r7}
 8005a30:	4770      	bx	lr

08005a32 <LL_RCC_MSI_Disable>:
{
 8005a32:	b480      	push	{r7}
 8005a34:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8005a36:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005a40:	f023 0301 	bic.w	r3, r3, #1
 8005a44:	6013      	str	r3, [r2, #0]
}
 8005a46:	bf00      	nop
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	bc80      	pop	{r7}
 8005a4c:	4770      	bx	lr

08005a4e <LL_RCC_MSI_IsReady>:
{
 8005a4e:	b480      	push	{r7}
 8005a50:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8005a52:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f003 0302 	and.w	r3, r3, #2
 8005a5c:	2b02      	cmp	r3, #2
 8005a5e:	d101      	bne.n	8005a64 <LL_RCC_MSI_IsReady+0x16>
 8005a60:	2301      	movs	r3, #1
 8005a62:	e000      	b.n	8005a66 <LL_RCC_MSI_IsReady+0x18>
 8005a64:	2300      	movs	r3, #0
}
 8005a66:	4618      	mov	r0, r3
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	bc80      	pop	{r7}
 8005a6c:	4770      	bx	lr

08005a6e <LL_RCC_MSI_IsEnabledRangeSelect>:
{
 8005a6e:	b480      	push	{r7}
 8005a70:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8005a72:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f003 0308 	and.w	r3, r3, #8
 8005a7c:	2b08      	cmp	r3, #8
 8005a7e:	d101      	bne.n	8005a84 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8005a80:	2301      	movs	r3, #1
 8005a82:	e000      	b.n	8005a86 <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8005a84:	2300      	movs	r3, #0
}
 8005a86:	4618      	mov	r0, r3
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	bc80      	pop	{r7}
 8005a8c:	4770      	bx	lr

08005a8e <LL_RCC_MSI_GetRange>:
{
 8005a8e:	b480      	push	{r7}
 8005a90:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8005a92:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	bc80      	pop	{r7}
 8005aa2:	4770      	bx	lr

08005aa4 <LL_RCC_MSI_GetRangeAfterStandby>:
{
 8005aa4:	b480      	push	{r7}
 8005aa6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8005aa8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005aac:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005ab0:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
}
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	bc80      	pop	{r7}
 8005aba:	4770      	bx	lr

08005abc <LL_RCC_MSI_SetCalibTrimming>:
{
 8005abc:	b480      	push	{r7}
 8005abe:	b083      	sub	sp, #12
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8005ac4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005ac8:	685b      	ldr	r3, [r3, #4]
 8005aca:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	021b      	lsls	r3, r3, #8
 8005ad2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005ad6:	4313      	orrs	r3, r2
 8005ad8:	604b      	str	r3, [r1, #4]
}
 8005ada:	bf00      	nop
 8005adc:	370c      	adds	r7, #12
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	bc80      	pop	{r7}
 8005ae2:	4770      	bx	lr

08005ae4 <LL_RCC_SetSysClkSource>:
{
 8005ae4:	b480      	push	{r7}
 8005ae6:	b083      	sub	sp, #12
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8005aec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005af0:	689b      	ldr	r3, [r3, #8]
 8005af2:	f023 0203 	bic.w	r2, r3, #3
 8005af6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	4313      	orrs	r3, r2
 8005afe:	608b      	str	r3, [r1, #8]
}
 8005b00:	bf00      	nop
 8005b02:	370c      	adds	r7, #12
 8005b04:	46bd      	mov	sp, r7
 8005b06:	bc80      	pop	{r7}
 8005b08:	4770      	bx	lr

08005b0a <LL_RCC_GetSysClkSource>:
{
 8005b0a:	b480      	push	{r7}
 8005b0c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8005b0e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005b12:	689b      	ldr	r3, [r3, #8]
 8005b14:	f003 030c 	and.w	r3, r3, #12
}
 8005b18:	4618      	mov	r0, r3
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	bc80      	pop	{r7}
 8005b1e:	4770      	bx	lr

08005b20 <LL_RCC_SetAHBPrescaler>:
{
 8005b20:	b480      	push	{r7}
 8005b22:	b083      	sub	sp, #12
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8005b28:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005b2c:	689b      	ldr	r3, [r3, #8]
 8005b2e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005b32:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	4313      	orrs	r3, r2
 8005b3a:	608b      	str	r3, [r1, #8]
}
 8005b3c:	bf00      	nop
 8005b3e:	370c      	adds	r7, #12
 8005b40:	46bd      	mov	sp, r7
 8005b42:	bc80      	pop	{r7}
 8005b44:	4770      	bx	lr

08005b46 <LL_RCC_SetAHB3Prescaler>:
{
 8005b46:	b480      	push	{r7}
 8005b48:	b083      	sub	sp, #12
 8005b4a:	af00      	add	r7, sp, #0
 8005b4c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8005b4e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005b52:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8005b56:	f023 020f 	bic.w	r2, r3, #15
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	091b      	lsrs	r3, r3, #4
 8005b5e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005b62:	4313      	orrs	r3, r2
 8005b64:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8005b68:	bf00      	nop
 8005b6a:	370c      	adds	r7, #12
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	bc80      	pop	{r7}
 8005b70:	4770      	bx	lr

08005b72 <LL_RCC_SetAPB1Prescaler>:
{
 8005b72:	b480      	push	{r7}
 8005b74:	b083      	sub	sp, #12
 8005b76:	af00      	add	r7, sp, #0
 8005b78:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8005b7a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005b7e:	689b      	ldr	r3, [r3, #8]
 8005b80:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005b84:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	4313      	orrs	r3, r2
 8005b8c:	608b      	str	r3, [r1, #8]
}
 8005b8e:	bf00      	nop
 8005b90:	370c      	adds	r7, #12
 8005b92:	46bd      	mov	sp, r7
 8005b94:	bc80      	pop	{r7}
 8005b96:	4770      	bx	lr

08005b98 <LL_RCC_SetAPB2Prescaler>:
{
 8005b98:	b480      	push	{r7}
 8005b9a:	b083      	sub	sp, #12
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8005ba0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005ba4:	689b      	ldr	r3, [r3, #8]
 8005ba6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005baa:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	4313      	orrs	r3, r2
 8005bb2:	608b      	str	r3, [r1, #8]
}
 8005bb4:	bf00      	nop
 8005bb6:	370c      	adds	r7, #12
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	bc80      	pop	{r7}
 8005bbc:	4770      	bx	lr

08005bbe <LL_RCC_GetAHBPrescaler>:
{
 8005bbe:	b480      	push	{r7}
 8005bc0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8005bc2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005bc6:	689b      	ldr	r3, [r3, #8]
 8005bc8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8005bcc:	4618      	mov	r0, r3
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	bc80      	pop	{r7}
 8005bd2:	4770      	bx	lr

08005bd4 <LL_RCC_GetAHB3Prescaler>:
{
 8005bd4:	b480      	push	{r7}
 8005bd6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8005bd8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005bdc:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8005be0:	011b      	lsls	r3, r3, #4
 8005be2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8005be6:	4618      	mov	r0, r3
 8005be8:	46bd      	mov	sp, r7
 8005bea:	bc80      	pop	{r7}
 8005bec:	4770      	bx	lr

08005bee <LL_RCC_GetAPB1Prescaler>:
{
 8005bee:	b480      	push	{r7}
 8005bf0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8005bf2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005bf6:	689b      	ldr	r3, [r3, #8]
 8005bf8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	bc80      	pop	{r7}
 8005c02:	4770      	bx	lr

08005c04 <LL_RCC_GetAPB2Prescaler>:
{
 8005c04:	b480      	push	{r7}
 8005c06:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8005c08:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005c0c:	689b      	ldr	r3, [r3, #8]
 8005c0e:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 8005c12:	4618      	mov	r0, r3
 8005c14:	46bd      	mov	sp, r7
 8005c16:	bc80      	pop	{r7}
 8005c18:	4770      	bx	lr

08005c1a <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8005c1a:	b480      	push	{r7}
 8005c1c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8005c1e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005c28:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005c2c:	6013      	str	r3, [r2, #0]
}
 8005c2e:	bf00      	nop
 8005c30:	46bd      	mov	sp, r7
 8005c32:	bc80      	pop	{r7}
 8005c34:	4770      	bx	lr

08005c36 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8005c36:	b480      	push	{r7}
 8005c38:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8005c3a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005c44:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005c48:	6013      	str	r3, [r2, #0]
}
 8005c4a:	bf00      	nop
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	bc80      	pop	{r7}
 8005c50:	4770      	bx	lr

08005c52 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8005c52:	b480      	push	{r7}
 8005c54:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8005c56:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005c60:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005c64:	d101      	bne.n	8005c6a <LL_RCC_PLL_IsReady+0x18>
 8005c66:	2301      	movs	r3, #1
 8005c68:	e000      	b.n	8005c6c <LL_RCC_PLL_IsReady+0x1a>
 8005c6a:	2300      	movs	r3, #0
}
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	bc80      	pop	{r7}
 8005c72:	4770      	bx	lr

08005c74 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8005c74:	b480      	push	{r7}
 8005c76:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8005c78:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005c7c:	68db      	ldr	r3, [r3, #12]
 8005c7e:	0a1b      	lsrs	r3, r3, #8
 8005c80:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 8005c84:	4618      	mov	r0, r3
 8005c86:	46bd      	mov	sp, r7
 8005c88:	bc80      	pop	{r7}
 8005c8a:	4770      	bx	lr

08005c8c <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8005c8c:	b480      	push	{r7}
 8005c8e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8005c90:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005c94:	68db      	ldr	r3, [r3, #12]
 8005c96:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	bc80      	pop	{r7}
 8005ca0:	4770      	bx	lr

08005ca2 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8005ca2:	b480      	push	{r7}
 8005ca4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8005ca6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005caa:	68db      	ldr	r3, [r3, #12]
 8005cac:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	bc80      	pop	{r7}
 8005cb6:	4770      	bx	lr

08005cb8 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8005cb8:	b480      	push	{r7}
 8005cba:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8005cbc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005cc0:	68db      	ldr	r3, [r3, #12]
 8005cc2:	f003 0303 	and.w	r3, r3, #3
}
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	bc80      	pop	{r7}
 8005ccc:	4770      	bx	lr

08005cce <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8005cce:	b480      	push	{r7}
 8005cd0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8005cd2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005cd6:	689b      	ldr	r3, [r3, #8]
 8005cd8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005cdc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005ce0:	d101      	bne.n	8005ce6 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8005ce2:	2301      	movs	r3, #1
 8005ce4:	e000      	b.n	8005ce8 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8005ce6:	2300      	movs	r3, #0
}
 8005ce8:	4618      	mov	r0, r3
 8005cea:	46bd      	mov	sp, r7
 8005cec:	bc80      	pop	{r7}
 8005cee:	4770      	bx	lr

08005cf0 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8005cf0:	b480      	push	{r7}
 8005cf2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8005cf4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005cf8:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8005cfc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005d00:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005d04:	d101      	bne.n	8005d0a <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8005d06:	2301      	movs	r3, #1
 8005d08:	e000      	b.n	8005d0c <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8005d0a:	2300      	movs	r3, #0
}
 8005d0c:	4618      	mov	r0, r3
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	bc80      	pop	{r7}
 8005d12:	4770      	bx	lr

08005d14 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8005d14:	b480      	push	{r7}
 8005d16:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8005d18:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005d1c:	689b      	ldr	r3, [r3, #8]
 8005d1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d22:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005d26:	d101      	bne.n	8005d2c <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8005d28:	2301      	movs	r3, #1
 8005d2a:	e000      	b.n	8005d2e <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8005d2c:	2300      	movs	r3, #0
}
 8005d2e:	4618      	mov	r0, r3
 8005d30:	46bd      	mov	sp, r7
 8005d32:	bc80      	pop	{r7}
 8005d34:	4770      	bx	lr

08005d36 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8005d36:	b480      	push	{r7}
 8005d38:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8005d3a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005d3e:	689b      	ldr	r3, [r3, #8]
 8005d40:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005d44:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005d48:	d101      	bne.n	8005d4e <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8005d4a:	2301      	movs	r3, #1
 8005d4c:	e000      	b.n	8005d50 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8005d4e:	2300      	movs	r3, #0
}
 8005d50:	4618      	mov	r0, r3
 8005d52:	46bd      	mov	sp, r7
 8005d54:	bc80      	pop	{r7}
 8005d56:	4770      	bx	lr

08005d58 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005d58:	b580      	push	{r7, lr}
 8005d5a:	b088      	sub	sp, #32
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d101      	bne.n	8005d6a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005d66:	2301      	movs	r3, #1
 8005d68:	e38b      	b.n	8006482 <HAL_RCC_OscConfig+0x72a>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005d6a:	f7ff fece 	bl	8005b0a <LL_RCC_GetSysClkSource>
 8005d6e:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005d70:	f7ff ffa2 	bl	8005cb8 <LL_RCC_PLL_GetMainSource>
 8005d74:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	f003 0320 	and.w	r3, r3, #32
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	f000 80c9 	beq.w	8005f16 <HAL_RCC_OscConfig+0x1be>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8005d84:	69fb      	ldr	r3, [r7, #28]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d005      	beq.n	8005d96 <HAL_RCC_OscConfig+0x3e>
 8005d8a:	69fb      	ldr	r3, [r7, #28]
 8005d8c:	2b0c      	cmp	r3, #12
 8005d8e:	d17b      	bne.n	8005e88 <HAL_RCC_OscConfig+0x130>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005d90:	69bb      	ldr	r3, [r7, #24]
 8005d92:	2b01      	cmp	r3, #1
 8005d94:	d178      	bne.n	8005e88 <HAL_RCC_OscConfig+0x130>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005d96:	f7ff fe5a 	bl	8005a4e <LL_RCC_MSI_IsReady>
 8005d9a:	4603      	mov	r3, r0
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d005      	beq.n	8005dac <HAL_RCC_OscConfig+0x54>
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	6a1b      	ldr	r3, [r3, #32]
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d101      	bne.n	8005dac <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8005da8:	2301      	movs	r3, #1
 8005daa:	e36a      	b.n	8006482 <HAL_RCC_OscConfig+0x72a>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005db0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f003 0308 	and.w	r3, r3, #8
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d005      	beq.n	8005dca <HAL_RCC_OscConfig+0x72>
 8005dbe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005dc8:	e006      	b.n	8005dd8 <HAL_RCC_OscConfig+0x80>
 8005dca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005dce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005dd2:	091b      	lsrs	r3, r3, #4
 8005dd4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005dd8:	4293      	cmp	r3, r2
 8005dda:	d222      	bcs.n	8005e22 <HAL_RCC_OscConfig+0xca>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005de0:	4618      	mov	r0, r3
 8005de2:	f000 fd51 	bl	8006888 <RCC_SetFlashLatencyFromMSIRange>
 8005de6:	4603      	mov	r3, r0
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d001      	beq.n	8005df0 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_ERROR;
 8005dec:	2301      	movs	r3, #1
 8005dee:	e348      	b.n	8006482 <HAL_RCC_OscConfig+0x72a>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005df0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005dfa:	f043 0308 	orr.w	r3, r3, #8
 8005dfe:	6013      	str	r3, [r2, #0]
 8005e00:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e0e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005e12:	4313      	orrs	r3, r2
 8005e14:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	f7ff fe4e 	bl	8005abc <LL_RCC_MSI_SetCalibTrimming>
 8005e20:	e021      	b.n	8005e66 <HAL_RCC_OscConfig+0x10e>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005e22:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005e2c:	f043 0308 	orr.w	r3, r3, #8
 8005e30:	6013      	str	r3, [r2, #0]
 8005e32:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e40:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005e44:	4313      	orrs	r3, r2
 8005e46:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e4c:	4618      	mov	r0, r3
 8005e4e:	f7ff fe35 	bl	8005abc <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e56:	4618      	mov	r0, r3
 8005e58:	f000 fd16 	bl	8006888 <RCC_SetFlashLatencyFromMSIRange>
 8005e5c:	4603      	mov	r3, r0
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d001      	beq.n	8005e66 <HAL_RCC_OscConfig+0x10e>
          {
            return HAL_ERROR;
 8005e62:	2301      	movs	r3, #1
 8005e64:	e30d      	b.n	8006482 <HAL_RCC_OscConfig+0x72a>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8005e66:	f000 fcd7 	bl	8006818 <HAL_RCC_GetHCLKFreq>
 8005e6a:	4603      	mov	r3, r0
 8005e6c:	4aa1      	ldr	r2, [pc, #644]	@ (80060f4 <HAL_RCC_OscConfig+0x39c>)
 8005e6e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005e70:	4ba1      	ldr	r3, [pc, #644]	@ (80060f8 <HAL_RCC_OscConfig+0x3a0>)
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	4618      	mov	r0, r3
 8005e76:	f7fc f9b5 	bl	80021e4 <HAL_InitTick>
 8005e7a:	4603      	mov	r3, r0
 8005e7c:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8005e7e:	7cfb      	ldrb	r3, [r7, #19]
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d047      	beq.n	8005f14 <HAL_RCC_OscConfig+0x1bc>
        {
          return status;
 8005e84:	7cfb      	ldrb	r3, [r7, #19]
 8005e86:	e2fc      	b.n	8006482 <HAL_RCC_OscConfig+0x72a>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	6a1b      	ldr	r3, [r3, #32]
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d02c      	beq.n	8005eea <HAL_RCC_OscConfig+0x192>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005e90:	f7ff fdc1 	bl	8005a16 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005e94:	f7fc f9b0 	bl	80021f8 <HAL_GetTick>
 8005e98:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8005e9a:	e008      	b.n	8005eae <HAL_RCC_OscConfig+0x156>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005e9c:	f7fc f9ac 	bl	80021f8 <HAL_GetTick>
 8005ea0:	4602      	mov	r2, r0
 8005ea2:	697b      	ldr	r3, [r7, #20]
 8005ea4:	1ad3      	subs	r3, r2, r3
 8005ea6:	2b02      	cmp	r3, #2
 8005ea8:	d901      	bls.n	8005eae <HAL_RCC_OscConfig+0x156>
          {
            return HAL_TIMEOUT;
 8005eaa:	2303      	movs	r3, #3
 8005eac:	e2e9      	b.n	8006482 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_MSI_IsReady() == 0U)
 8005eae:	f7ff fdce 	bl	8005a4e <LL_RCC_MSI_IsReady>
 8005eb2:	4603      	mov	r3, r0
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d0f1      	beq.n	8005e9c <HAL_RCC_OscConfig+0x144>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005eb8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005ec2:	f043 0308 	orr.w	r3, r3, #8
 8005ec6:	6013      	str	r3, [r2, #0]
 8005ec8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ed6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005eda:	4313      	orrs	r3, r2
 8005edc:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	f7ff fdea 	bl	8005abc <LL_RCC_MSI_SetCalibTrimming>
 8005ee8:	e015      	b.n	8005f16 <HAL_RCC_OscConfig+0x1be>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005eea:	f7ff fda2 	bl	8005a32 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005eee:	f7fc f983 	bl	80021f8 <HAL_GetTick>
 8005ef2:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8005ef4:	e008      	b.n	8005f08 <HAL_RCC_OscConfig+0x1b0>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005ef6:	f7fc f97f 	bl	80021f8 <HAL_GetTick>
 8005efa:	4602      	mov	r2, r0
 8005efc:	697b      	ldr	r3, [r7, #20]
 8005efe:	1ad3      	subs	r3, r2, r3
 8005f00:	2b02      	cmp	r3, #2
 8005f02:	d901      	bls.n	8005f08 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8005f04:	2303      	movs	r3, #3
 8005f06:	e2bc      	b.n	8006482 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_MSI_IsReady() != 0U)
 8005f08:	f7ff fda1 	bl	8005a4e <LL_RCC_MSI_IsReady>
 8005f0c:	4603      	mov	r3, r0
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d1f1      	bne.n	8005ef6 <HAL_RCC_OscConfig+0x19e>
 8005f12:	e000      	b.n	8005f16 <HAL_RCC_OscConfig+0x1be>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005f14:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	f003 0301 	and.w	r3, r3, #1
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d05f      	beq.n	8005fe2 <HAL_RCC_OscConfig+0x28a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8005f22:	69fb      	ldr	r3, [r7, #28]
 8005f24:	2b08      	cmp	r3, #8
 8005f26:	d005      	beq.n	8005f34 <HAL_RCC_OscConfig+0x1dc>
 8005f28:	69fb      	ldr	r3, [r7, #28]
 8005f2a:	2b0c      	cmp	r3, #12
 8005f2c:	d10d      	bne.n	8005f4a <HAL_RCC_OscConfig+0x1f2>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005f2e:	69bb      	ldr	r3, [r7, #24]
 8005f30:	2b03      	cmp	r3, #3
 8005f32:	d10a      	bne.n	8005f4a <HAL_RCC_OscConfig+0x1f2>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005f34:	f7ff fcdb 	bl	80058ee <LL_RCC_HSE_IsReady>
 8005f38:	4603      	mov	r3, r0
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d050      	beq.n	8005fe0 <HAL_RCC_OscConfig+0x288>
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	685b      	ldr	r3, [r3, #4]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d14c      	bne.n	8005fe0 <HAL_RCC_OscConfig+0x288>
      {
        return HAL_ERROR;
 8005f46:	2301      	movs	r3, #1
 8005f48:	e29b      	b.n	8006482 <HAL_RCC_OscConfig+0x72a>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 8005f4a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	689b      	ldr	r3, [r3, #8]
 8005f58:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005f5c:	4313      	orrs	r3, r2
 8005f5e:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	685b      	ldr	r3, [r3, #4]
 8005f64:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005f68:	d102      	bne.n	8005f70 <HAL_RCC_OscConfig+0x218>
 8005f6a:	f7ff fca4 	bl	80058b6 <LL_RCC_HSE_Enable>
 8005f6e:	e00d      	b.n	8005f8c <HAL_RCC_OscConfig+0x234>
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	685b      	ldr	r3, [r3, #4]
 8005f74:	f5b3 1f04 	cmp.w	r3, #2162688	@ 0x210000
 8005f78:	d104      	bne.n	8005f84 <HAL_RCC_OscConfig+0x22c>
 8005f7a:	f7ff fc6f 	bl	800585c <LL_RCC_HSE_EnableTcxo>
 8005f7e:	f7ff fc9a 	bl	80058b6 <LL_RCC_HSE_Enable>
 8005f82:	e003      	b.n	8005f8c <HAL_RCC_OscConfig+0x234>
 8005f84:	f7ff fca5 	bl	80058d2 <LL_RCC_HSE_Disable>
 8005f88:	f7ff fc76 	bl	8005878 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	685b      	ldr	r3, [r3, #4]
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d012      	beq.n	8005fba <HAL_RCC_OscConfig+0x262>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f94:	f7fc f930 	bl	80021f8 <HAL_GetTick>
 8005f98:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8005f9a:	e008      	b.n	8005fae <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005f9c:	f7fc f92c 	bl	80021f8 <HAL_GetTick>
 8005fa0:	4602      	mov	r2, r0
 8005fa2:	697b      	ldr	r3, [r7, #20]
 8005fa4:	1ad3      	subs	r3, r2, r3
 8005fa6:	2b64      	cmp	r3, #100	@ 0x64
 8005fa8:	d901      	bls.n	8005fae <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 8005faa:	2303      	movs	r3, #3
 8005fac:	e269      	b.n	8006482 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSE_IsReady() == 0U)
 8005fae:	f7ff fc9e 	bl	80058ee <LL_RCC_HSE_IsReady>
 8005fb2:	4603      	mov	r3, r0
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d0f1      	beq.n	8005f9c <HAL_RCC_OscConfig+0x244>
 8005fb8:	e013      	b.n	8005fe2 <HAL_RCC_OscConfig+0x28a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fba:	f7fc f91d 	bl	80021f8 <HAL_GetTick>
 8005fbe:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8005fc0:	e008      	b.n	8005fd4 <HAL_RCC_OscConfig+0x27c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005fc2:	f7fc f919 	bl	80021f8 <HAL_GetTick>
 8005fc6:	4602      	mov	r2, r0
 8005fc8:	697b      	ldr	r3, [r7, #20]
 8005fca:	1ad3      	subs	r3, r2, r3
 8005fcc:	2b64      	cmp	r3, #100	@ 0x64
 8005fce:	d901      	bls.n	8005fd4 <HAL_RCC_OscConfig+0x27c>
          {
            return HAL_TIMEOUT;
 8005fd0:	2303      	movs	r3, #3
 8005fd2:	e256      	b.n	8006482 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSE_IsReady() != 0U)
 8005fd4:	f7ff fc8b 	bl	80058ee <LL_RCC_HSE_IsReady>
 8005fd8:	4603      	mov	r3, r0
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d1f1      	bne.n	8005fc2 <HAL_RCC_OscConfig+0x26a>
 8005fde:	e000      	b.n	8005fe2 <HAL_RCC_OscConfig+0x28a>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005fe0:	bf00      	nop
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f003 0302 	and.w	r3, r3, #2
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d04b      	beq.n	8006086 <HAL_RCC_OscConfig+0x32e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8005fee:	69fb      	ldr	r3, [r7, #28]
 8005ff0:	2b04      	cmp	r3, #4
 8005ff2:	d005      	beq.n	8006000 <HAL_RCC_OscConfig+0x2a8>
 8005ff4:	69fb      	ldr	r3, [r7, #28]
 8005ff6:	2b0c      	cmp	r3, #12
 8005ff8:	d113      	bne.n	8006022 <HAL_RCC_OscConfig+0x2ca>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005ffa:	69bb      	ldr	r3, [r7, #24]
 8005ffc:	2b02      	cmp	r3, #2
 8005ffe:	d110      	bne.n	8006022 <HAL_RCC_OscConfig+0x2ca>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006000:	f7ff fca2 	bl	8005948 <LL_RCC_HSI_IsReady>
 8006004:	4603      	mov	r3, r0
 8006006:	2b00      	cmp	r3, #0
 8006008:	d005      	beq.n	8006016 <HAL_RCC_OscConfig+0x2be>
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	691b      	ldr	r3, [r3, #16]
 800600e:	2b00      	cmp	r3, #0
 8006010:	d101      	bne.n	8006016 <HAL_RCC_OscConfig+0x2be>
      {
        return HAL_ERROR;
 8006012:	2301      	movs	r3, #1
 8006014:	e235      	b.n	8006482 <HAL_RCC_OscConfig+0x72a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	695b      	ldr	r3, [r3, #20]
 800601a:	4618      	mov	r0, r3
 800601c:	f7ff fca5 	bl	800596a <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006020:	e031      	b.n	8006086 <HAL_RCC_OscConfig+0x32e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	691b      	ldr	r3, [r3, #16]
 8006026:	2b00      	cmp	r3, #0
 8006028:	d019      	beq.n	800605e <HAL_RCC_OscConfig+0x306>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800602a:	f7ff fc71 	bl	8005910 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800602e:	f7fc f8e3 	bl	80021f8 <HAL_GetTick>
 8006032:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8006034:	e008      	b.n	8006048 <HAL_RCC_OscConfig+0x2f0>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006036:	f7fc f8df 	bl	80021f8 <HAL_GetTick>
 800603a:	4602      	mov	r2, r0
 800603c:	697b      	ldr	r3, [r7, #20]
 800603e:	1ad3      	subs	r3, r2, r3
 8006040:	2b02      	cmp	r3, #2
 8006042:	d901      	bls.n	8006048 <HAL_RCC_OscConfig+0x2f0>
          {
            return HAL_TIMEOUT;
 8006044:	2303      	movs	r3, #3
 8006046:	e21c      	b.n	8006482 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSI_IsReady() == 0U)
 8006048:	f7ff fc7e 	bl	8005948 <LL_RCC_HSI_IsReady>
 800604c:	4603      	mov	r3, r0
 800604e:	2b00      	cmp	r3, #0
 8006050:	d0f1      	beq.n	8006036 <HAL_RCC_OscConfig+0x2de>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	695b      	ldr	r3, [r3, #20]
 8006056:	4618      	mov	r0, r3
 8006058:	f7ff fc87 	bl	800596a <LL_RCC_HSI_SetCalibTrimming>
 800605c:	e013      	b.n	8006086 <HAL_RCC_OscConfig+0x32e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800605e:	f7ff fc65 	bl	800592c <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006062:	f7fc f8c9 	bl	80021f8 <HAL_GetTick>
 8006066:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8006068:	e008      	b.n	800607c <HAL_RCC_OscConfig+0x324>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800606a:	f7fc f8c5 	bl	80021f8 <HAL_GetTick>
 800606e:	4602      	mov	r2, r0
 8006070:	697b      	ldr	r3, [r7, #20]
 8006072:	1ad3      	subs	r3, r2, r3
 8006074:	2b02      	cmp	r3, #2
 8006076:	d901      	bls.n	800607c <HAL_RCC_OscConfig+0x324>
          {
            return HAL_TIMEOUT;
 8006078:	2303      	movs	r3, #3
 800607a:	e202      	b.n	8006482 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSI_IsReady() != 0U)
 800607c:	f7ff fc64 	bl	8005948 <LL_RCC_HSI_IsReady>
 8006080:	4603      	mov	r3, r0
 8006082:	2b00      	cmp	r3, #0
 8006084:	d1f1      	bne.n	800606a <HAL_RCC_OscConfig+0x312>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	f003 0308 	and.w	r3, r3, #8
 800608e:	2b00      	cmp	r3, #0
 8006090:	d06f      	beq.n	8006172 <HAL_RCC_OscConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	699b      	ldr	r3, [r3, #24]
 8006096:	2b00      	cmp	r3, #0
 8006098:	d057      	beq.n	800614a <HAL_RCC_OscConfig+0x3f2>
    {
      uint32_t csr_temp = RCC->CSR;
 800609a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800609e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80060a2:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	69da      	ldr	r2, [r3, #28]
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	f003 0310 	and.w	r3, r3, #16
 80060ae:	429a      	cmp	r2, r3
 80060b0:	d036      	beq.n	8006120 <HAL_RCC_OscConfig+0x3c8>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	f003 0302 	and.w	r3, r3, #2
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d006      	beq.n	80060ca <HAL_RCC_OscConfig+0x372>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d101      	bne.n	80060ca <HAL_RCC_OscConfig+0x372>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated  */
          return HAL_ERROR;
 80060c6:	2301      	movs	r3, #1
 80060c8:	e1db      	b.n	8006482 <HAL_RCC_OscConfig+0x72a>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	f003 0301 	and.w	r3, r3, #1
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d018      	beq.n	8006106 <HAL_RCC_OscConfig+0x3ae>
        {
          __HAL_RCC_LSI_DISABLE();
 80060d4:	f7ff fc7e 	bl	80059d4 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80060d8:	f7fc f88e 	bl	80021f8 <HAL_GetTick>
 80060dc:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 80060de:	e00d      	b.n	80060fc <HAL_RCC_OscConfig+0x3a4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80060e0:	f7fc f88a 	bl	80021f8 <HAL_GetTick>
 80060e4:	4602      	mov	r2, r0
 80060e6:	697b      	ldr	r3, [r7, #20]
 80060e8:	1ad3      	subs	r3, r2, r3
 80060ea:	2b11      	cmp	r3, #17
 80060ec:	d906      	bls.n	80060fc <HAL_RCC_OscConfig+0x3a4>
            {
              return HAL_TIMEOUT;
 80060ee:	2303      	movs	r3, #3
 80060f0:	e1c7      	b.n	8006482 <HAL_RCC_OscConfig+0x72a>
 80060f2:	bf00      	nop
 80060f4:	20000000 	.word	0x20000000
 80060f8:	20000004 	.word	0x20000004
          while (LL_RCC_LSI_IsReady() != 0U)
 80060fc:	f7ff fc7a 	bl	80059f4 <LL_RCC_LSI_IsReady>
 8006100:	4603      	mov	r3, r0
 8006102:	2b00      	cmp	r3, #0
 8006104:	d1ec      	bne.n	80060e0 <HAL_RCC_OscConfig+0x388>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 8006106:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800610a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800610e:	f023 0210 	bic.w	r2, r3, #16
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	69db      	ldr	r3, [r3, #28]
 8006116:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800611a:	4313      	orrs	r3, r2
 800611c:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006120:	f7ff fc48 	bl	80059b4 <LL_RCC_LSI_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006124:	f7fc f868 	bl	80021f8 <HAL_GetTick>
 8006128:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 800612a:	e008      	b.n	800613e <HAL_RCC_OscConfig+0x3e6>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800612c:	f7fc f864 	bl	80021f8 <HAL_GetTick>
 8006130:	4602      	mov	r2, r0
 8006132:	697b      	ldr	r3, [r7, #20]
 8006134:	1ad3      	subs	r3, r2, r3
 8006136:	2b11      	cmp	r3, #17
 8006138:	d901      	bls.n	800613e <HAL_RCC_OscConfig+0x3e6>
        {
          return HAL_TIMEOUT;
 800613a:	2303      	movs	r3, #3
 800613c:	e1a1      	b.n	8006482 <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSI_IsReady() == 0U)
 800613e:	f7ff fc59 	bl	80059f4 <LL_RCC_LSI_IsReady>
 8006142:	4603      	mov	r3, r0
 8006144:	2b00      	cmp	r3, #0
 8006146:	d0f1      	beq.n	800612c <HAL_RCC_OscConfig+0x3d4>
 8006148:	e013      	b.n	8006172 <HAL_RCC_OscConfig+0x41a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800614a:	f7ff fc43 	bl	80059d4 <LL_RCC_LSI_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800614e:	f7fc f853 	bl	80021f8 <HAL_GetTick>
 8006152:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 8006154:	e008      	b.n	8006168 <HAL_RCC_OscConfig+0x410>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006156:	f7fc f84f 	bl	80021f8 <HAL_GetTick>
 800615a:	4602      	mov	r2, r0
 800615c:	697b      	ldr	r3, [r7, #20]
 800615e:	1ad3      	subs	r3, r2, r3
 8006160:	2b11      	cmp	r3, #17
 8006162:	d901      	bls.n	8006168 <HAL_RCC_OscConfig+0x410>
        {
          return HAL_TIMEOUT;
 8006164:	2303      	movs	r3, #3
 8006166:	e18c      	b.n	8006482 <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSI_IsReady() != 0U)
 8006168:	f7ff fc44 	bl	80059f4 <LL_RCC_LSI_IsReady>
 800616c:	4603      	mov	r3, r0
 800616e:	2b00      	cmp	r3, #0
 8006170:	d1f1      	bne.n	8006156 <HAL_RCC_OscConfig+0x3fe>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	f003 0304 	and.w	r3, r3, #4
 800617a:	2b00      	cmp	r3, #0
 800617c:	f000 80d8 	beq.w	8006330 <HAL_RCC_OscConfig+0x5d8>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8006180:	f7ff fb5a 	bl	8005838 <LL_PWR_IsEnabledBkUpAccess>
 8006184:	4603      	mov	r3, r0
 8006186:	2b00      	cmp	r3, #0
 8006188:	d113      	bne.n	80061b2 <HAL_RCC_OscConfig+0x45a>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800618a:	f7ff fa99 	bl	80056c0 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800618e:	f7fc f833 	bl	80021f8 <HAL_GetTick>
 8006192:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8006194:	e008      	b.n	80061a8 <HAL_RCC_OscConfig+0x450>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006196:	f7fc f82f 	bl	80021f8 <HAL_GetTick>
 800619a:	4602      	mov	r2, r0
 800619c:	697b      	ldr	r3, [r7, #20]
 800619e:	1ad3      	subs	r3, r2, r3
 80061a0:	2b02      	cmp	r3, #2
 80061a2:	d901      	bls.n	80061a8 <HAL_RCC_OscConfig+0x450>
        {
          return HAL_TIMEOUT;
 80061a4:	2303      	movs	r3, #3
 80061a6:	e16c      	b.n	8006482 <HAL_RCC_OscConfig+0x72a>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 80061a8:	f7ff fb46 	bl	8005838 <LL_PWR_IsEnabledBkUpAccess>
 80061ac:	4603      	mov	r3, r0
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d0f1      	beq.n	8006196 <HAL_RCC_OscConfig+0x43e>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	68db      	ldr	r3, [r3, #12]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d07b      	beq.n	80062b2 <HAL_RCC_OscConfig+0x55a>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	68db      	ldr	r3, [r3, #12]
 80061be:	2b85      	cmp	r3, #133	@ 0x85
 80061c0:	d003      	beq.n	80061ca <HAL_RCC_OscConfig+0x472>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	68db      	ldr	r3, [r3, #12]
 80061c6:	2b05      	cmp	r3, #5
 80061c8:	d109      	bne.n	80061de <HAL_RCC_OscConfig+0x486>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80061ca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80061ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80061d2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80061d6:	f043 0304 	orr.w	r3, r3, #4
 80061da:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80061de:	f7fc f80b 	bl	80021f8 <HAL_GetTick>
 80061e2:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80061e4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80061e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80061ec:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80061f0:	f043 0301 	orr.w	r3, r3, #1
 80061f4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80061f8:	e00a      	b.n	8006210 <HAL_RCC_OscConfig+0x4b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80061fa:	f7fb fffd 	bl	80021f8 <HAL_GetTick>
 80061fe:	4602      	mov	r2, r0
 8006200:	697b      	ldr	r3, [r7, #20]
 8006202:	1ad3      	subs	r3, r2, r3
 8006204:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006208:	4293      	cmp	r3, r2
 800620a:	d901      	bls.n	8006210 <HAL_RCC_OscConfig+0x4b8>
        {
          return HAL_TIMEOUT;
 800620c:	2303      	movs	r3, #3
 800620e:	e138      	b.n	8006482 <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSE_IsReady() == 0U)
 8006210:	f7ff fbbf 	bl	8005992 <LL_RCC_LSE_IsReady>
 8006214:	4603      	mov	r3, r0
 8006216:	2b00      	cmp	r3, #0
 8006218:	d0ef      	beq.n	80061fa <HAL_RCC_OscConfig+0x4a2>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	68db      	ldr	r3, [r3, #12]
 800621e:	2b81      	cmp	r3, #129	@ 0x81
 8006220:	d003      	beq.n	800622a <HAL_RCC_OscConfig+0x4d2>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	68db      	ldr	r3, [r3, #12]
 8006226:	2b85      	cmp	r3, #133	@ 0x85
 8006228:	d121      	bne.n	800626e <HAL_RCC_OscConfig+0x516>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800622a:	f7fb ffe5 	bl	80021f8 <HAL_GetTick>
 800622e:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8006230:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006234:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006238:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800623c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006240:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8006244:	e00a      	b.n	800625c <HAL_RCC_OscConfig+0x504>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006246:	f7fb ffd7 	bl	80021f8 <HAL_GetTick>
 800624a:	4602      	mov	r2, r0
 800624c:	697b      	ldr	r3, [r7, #20]
 800624e:	1ad3      	subs	r3, r2, r3
 8006250:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006254:	4293      	cmp	r3, r2
 8006256:	d901      	bls.n	800625c <HAL_RCC_OscConfig+0x504>
          {
            return HAL_TIMEOUT;
 8006258:	2303      	movs	r3, #3
 800625a:	e112      	b.n	8006482 <HAL_RCC_OscConfig+0x72a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800625c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006260:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006264:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006268:	2b00      	cmp	r3, #0
 800626a:	d0ec      	beq.n	8006246 <HAL_RCC_OscConfig+0x4ee>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 800626c:	e060      	b.n	8006330 <HAL_RCC_OscConfig+0x5d8>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800626e:	f7fb ffc3 	bl	80021f8 <HAL_GetTick>
 8006272:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8006274:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006278:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800627c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006280:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006284:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8006288:	e00a      	b.n	80062a0 <HAL_RCC_OscConfig+0x548>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800628a:	f7fb ffb5 	bl	80021f8 <HAL_GetTick>
 800628e:	4602      	mov	r2, r0
 8006290:	697b      	ldr	r3, [r7, #20]
 8006292:	1ad3      	subs	r3, r2, r3
 8006294:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006298:	4293      	cmp	r3, r2
 800629a:	d901      	bls.n	80062a0 <HAL_RCC_OscConfig+0x548>
          {
            return HAL_TIMEOUT;
 800629c:	2303      	movs	r3, #3
 800629e:	e0f0      	b.n	8006482 <HAL_RCC_OscConfig+0x72a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80062a0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80062a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80062a8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d1ec      	bne.n	800628a <HAL_RCC_OscConfig+0x532>
 80062b0:	e03e      	b.n	8006330 <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80062b2:	f7fb ffa1 	bl	80021f8 <HAL_GetTick>
 80062b6:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80062b8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80062bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80062c0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80062c4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80062c8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80062cc:	e00a      	b.n	80062e4 <HAL_RCC_OscConfig+0x58c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80062ce:	f7fb ff93 	bl	80021f8 <HAL_GetTick>
 80062d2:	4602      	mov	r2, r0
 80062d4:	697b      	ldr	r3, [r7, #20]
 80062d6:	1ad3      	subs	r3, r2, r3
 80062d8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80062dc:	4293      	cmp	r3, r2
 80062de:	d901      	bls.n	80062e4 <HAL_RCC_OscConfig+0x58c>
        {
          return HAL_TIMEOUT;
 80062e0:	2303      	movs	r3, #3
 80062e2:	e0ce      	b.n	8006482 <HAL_RCC_OscConfig+0x72a>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80062e4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80062e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80062ec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d1ec      	bne.n	80062ce <HAL_RCC_OscConfig+0x576>
        }
      }

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80062f4:	f7fb ff80 	bl	80021f8 <HAL_GetTick>
 80062f8:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80062fa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80062fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006302:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006306:	f023 0301 	bic.w	r3, r3, #1
 800630a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800630e:	e00a      	b.n	8006326 <HAL_RCC_OscConfig+0x5ce>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006310:	f7fb ff72 	bl	80021f8 <HAL_GetTick>
 8006314:	4602      	mov	r2, r0
 8006316:	697b      	ldr	r3, [r7, #20]
 8006318:	1ad3      	subs	r3, r2, r3
 800631a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800631e:	4293      	cmp	r3, r2
 8006320:	d901      	bls.n	8006326 <HAL_RCC_OscConfig+0x5ce>
        {
          return HAL_TIMEOUT;
 8006322:	2303      	movs	r3, #3
 8006324:	e0ad      	b.n	8006482 <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSE_IsReady() != 0U)
 8006326:	f7ff fb34 	bl	8005992 <LL_RCC_LSE_IsReady>
 800632a:	4603      	mov	r3, r0
 800632c:	2b00      	cmp	r3, #0
 800632e:	d1ef      	bne.n	8006310 <HAL_RCC_OscConfig+0x5b8>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006334:	2b00      	cmp	r3, #0
 8006336:	f000 80a3 	beq.w	8006480 <HAL_RCC_OscConfig+0x728>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800633a:	69fb      	ldr	r3, [r7, #28]
 800633c:	2b0c      	cmp	r3, #12
 800633e:	d076      	beq.n	800642e <HAL_RCC_OscConfig+0x6d6>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006344:	2b02      	cmp	r3, #2
 8006346:	d14b      	bne.n	80063e0 <HAL_RCC_OscConfig+0x688>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006348:	f7ff fc75 	bl	8005c36 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800634c:	f7fb ff54 	bl	80021f8 <HAL_GetTick>
 8006350:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 8006352:	e008      	b.n	8006366 <HAL_RCC_OscConfig+0x60e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006354:	f7fb ff50 	bl	80021f8 <HAL_GetTick>
 8006358:	4602      	mov	r2, r0
 800635a:	697b      	ldr	r3, [r7, #20]
 800635c:	1ad3      	subs	r3, r2, r3
 800635e:	2b0a      	cmp	r3, #10
 8006360:	d901      	bls.n	8006366 <HAL_RCC_OscConfig+0x60e>
          {
            return HAL_TIMEOUT;
 8006362:	2303      	movs	r3, #3
 8006364:	e08d      	b.n	8006482 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_PLL_IsReady() != 0U)
 8006366:	f7ff fc74 	bl	8005c52 <LL_RCC_PLL_IsReady>
 800636a:	4603      	mov	r3, r0
 800636c:	2b00      	cmp	r3, #0
 800636e:	d1f1      	bne.n	8006354 <HAL_RCC_OscConfig+0x5fc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006370:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006374:	68da      	ldr	r2, [r3, #12]
 8006376:	4b45      	ldr	r3, [pc, #276]	@ (800648c <HAL_RCC_OscConfig+0x734>)
 8006378:	4013      	ands	r3, r2
 800637a:	687a      	ldr	r2, [r7, #4]
 800637c:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 800637e:	687a      	ldr	r2, [r7, #4]
 8006380:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8006382:	4311      	orrs	r1, r2
 8006384:	687a      	ldr	r2, [r7, #4]
 8006386:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8006388:	0212      	lsls	r2, r2, #8
 800638a:	4311      	orrs	r1, r2
 800638c:	687a      	ldr	r2, [r7, #4]
 800638e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006390:	4311      	orrs	r1, r2
 8006392:	687a      	ldr	r2, [r7, #4]
 8006394:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8006396:	4311      	orrs	r1, r2
 8006398:	687a      	ldr	r2, [r7, #4]
 800639a:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800639c:	430a      	orrs	r2, r1
 800639e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80063a2:	4313      	orrs	r3, r2
 80063a4:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80063a6:	f7ff fc38 	bl	8005c1a <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80063aa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80063ae:	68db      	ldr	r3, [r3, #12]
 80063b0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80063b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80063b8:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063ba:	f7fb ff1d 	bl	80021f8 <HAL_GetTick>
 80063be:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 80063c0:	e008      	b.n	80063d4 <HAL_RCC_OscConfig+0x67c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80063c2:	f7fb ff19 	bl	80021f8 <HAL_GetTick>
 80063c6:	4602      	mov	r2, r0
 80063c8:	697b      	ldr	r3, [r7, #20]
 80063ca:	1ad3      	subs	r3, r2, r3
 80063cc:	2b0a      	cmp	r3, #10
 80063ce:	d901      	bls.n	80063d4 <HAL_RCC_OscConfig+0x67c>
          {
            return HAL_TIMEOUT;
 80063d0:	2303      	movs	r3, #3
 80063d2:	e056      	b.n	8006482 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_PLL_IsReady() == 0U)
 80063d4:	f7ff fc3d 	bl	8005c52 <LL_RCC_PLL_IsReady>
 80063d8:	4603      	mov	r3, r0
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d0f1      	beq.n	80063c2 <HAL_RCC_OscConfig+0x66a>
 80063de:	e04f      	b.n	8006480 <HAL_RCC_OscConfig+0x728>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80063e0:	f7ff fc29 	bl	8005c36 <LL_RCC_PLL_Disable>

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 80063e4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80063e8:	68db      	ldr	r3, [r3, #12]
 80063ea:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80063ee:	f023 0303 	bic.w	r3, r3, #3
 80063f2:	60d3      	str	r3, [r2, #12]

        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_RNGCLK | RCC_PLL_ADCCLK);
 80063f4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80063f8:	68db      	ldr	r3, [r3, #12]
 80063fa:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80063fe:	f023 5388 	bic.w	r3, r3, #285212672	@ 0x11000000
 8006402:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006406:	60d3      	str	r3, [r2, #12]


        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006408:	f7fb fef6 	bl	80021f8 <HAL_GetTick>
 800640c:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 800640e:	e008      	b.n	8006422 <HAL_RCC_OscConfig+0x6ca>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006410:	f7fb fef2 	bl	80021f8 <HAL_GetTick>
 8006414:	4602      	mov	r2, r0
 8006416:	697b      	ldr	r3, [r7, #20]
 8006418:	1ad3      	subs	r3, r2, r3
 800641a:	2b0a      	cmp	r3, #10
 800641c:	d901      	bls.n	8006422 <HAL_RCC_OscConfig+0x6ca>
          {
            return HAL_TIMEOUT;
 800641e:	2303      	movs	r3, #3
 8006420:	e02f      	b.n	8006482 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_PLL_IsReady() != 0U)
 8006422:	f7ff fc16 	bl	8005c52 <LL_RCC_PLL_IsReady>
 8006426:	4603      	mov	r3, r0
 8006428:	2b00      	cmp	r3, #0
 800642a:	d1f1      	bne.n	8006410 <HAL_RCC_OscConfig+0x6b8>
 800642c:	e028      	b.n	8006480 <HAL_RCC_OscConfig+0x728>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006432:	2b01      	cmp	r3, #1
 8006434:	d101      	bne.n	800643a <HAL_RCC_OscConfig+0x6e2>
      {
        return HAL_ERROR;
 8006436:	2301      	movs	r3, #1
 8006438:	e023      	b.n	8006482 <HAL_RCC_OscConfig+0x72a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800643a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800643e:	68db      	ldr	r3, [r3, #12]
 8006440:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 8006442:	69bb      	ldr	r3, [r7, #24]
 8006444:	f003 0203 	and.w	r2, r3, #3
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800644c:	429a      	cmp	r2, r3
 800644e:	d115      	bne.n	800647c <HAL_RCC_OscConfig+0x724>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8006450:	69bb      	ldr	r3, [r7, #24]
 8006452:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800645a:	429a      	cmp	r2, r3
 800645c:	d10e      	bne.n	800647c <HAL_RCC_OscConfig+0x724>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 800645e:	69bb      	ldr	r3, [r7, #24]
 8006460:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006468:	021b      	lsls	r3, r3, #8
 800646a:	429a      	cmp	r2, r3
 800646c:	d106      	bne.n	800647c <HAL_RCC_OscConfig+0x724>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 800646e:	69bb      	ldr	r3, [r7, #24]
 8006470:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006478:	429a      	cmp	r2, r3
 800647a:	d001      	beq.n	8006480 <HAL_RCC_OscConfig+0x728>
        {
          return HAL_ERROR;
 800647c:	2301      	movs	r3, #1
 800647e:	e000      	b.n	8006482 <HAL_RCC_OscConfig+0x72a>
        }
      }
    }
  }
  return HAL_OK;
 8006480:	2300      	movs	r3, #0
}
 8006482:	4618      	mov	r0, r3
 8006484:	3720      	adds	r7, #32
 8006486:	46bd      	mov	sp, r7
 8006488:	bd80      	pop	{r7, pc}
 800648a:	bf00      	nop
 800648c:	11c1808c 	.word	0x11c1808c

08006490 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006490:	b580      	push	{r7, lr}
 8006492:	b084      	sub	sp, #16
 8006494:	af00      	add	r7, sp, #0
 8006496:	6078      	str	r0, [r7, #4]
 8006498:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	2b00      	cmp	r3, #0
 800649e:	d101      	bne.n	80064a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80064a0:	2301      	movs	r3, #1
 80064a2:	e10f      	b.n	80066c4 <HAL_RCC_ClockConfig+0x234>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80064a4:	4b89      	ldr	r3, [pc, #548]	@ (80066cc <HAL_RCC_ClockConfig+0x23c>)
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	f003 0307 	and.w	r3, r3, #7
 80064ac:	683a      	ldr	r2, [r7, #0]
 80064ae:	429a      	cmp	r2, r3
 80064b0:	d91b      	bls.n	80064ea <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80064b2:	4b86      	ldr	r3, [pc, #536]	@ (80066cc <HAL_RCC_ClockConfig+0x23c>)
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	f023 0207 	bic.w	r2, r3, #7
 80064ba:	4984      	ldr	r1, [pc, #528]	@ (80066cc <HAL_RCC_ClockConfig+0x23c>)
 80064bc:	683b      	ldr	r3, [r7, #0]
 80064be:	4313      	orrs	r3, r2
 80064c0:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80064c2:	f7fb fe99 	bl	80021f8 <HAL_GetTick>
 80064c6:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80064c8:	e008      	b.n	80064dc <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80064ca:	f7fb fe95 	bl	80021f8 <HAL_GetTick>
 80064ce:	4602      	mov	r2, r0
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	1ad3      	subs	r3, r2, r3
 80064d4:	2b02      	cmp	r3, #2
 80064d6:	d901      	bls.n	80064dc <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80064d8:	2303      	movs	r3, #3
 80064da:	e0f3      	b.n	80066c4 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80064dc:	4b7b      	ldr	r3, [pc, #492]	@ (80066cc <HAL_RCC_ClockConfig+0x23c>)
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	f003 0307 	and.w	r3, r3, #7
 80064e4:	683a      	ldr	r2, [r7, #0]
 80064e6:	429a      	cmp	r2, r3
 80064e8:	d1ef      	bne.n	80064ca <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	f003 0302 	and.w	r3, r3, #2
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d016      	beq.n	8006524 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	689b      	ldr	r3, [r3, #8]
 80064fa:	4618      	mov	r0, r3
 80064fc:	f7ff fb10 	bl	8005b20 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006500:	f7fb fe7a 	bl	80021f8 <HAL_GetTick>
 8006504:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8006506:	e008      	b.n	800651a <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006508:	f7fb fe76 	bl	80021f8 <HAL_GetTick>
 800650c:	4602      	mov	r2, r0
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	1ad3      	subs	r3, r2, r3
 8006512:	2b02      	cmp	r3, #2
 8006514:	d901      	bls.n	800651a <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8006516:	2303      	movs	r3, #3
 8006518:	e0d4      	b.n	80066c4 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800651a:	f7ff fbd8 	bl	8005cce <LL_RCC_IsActiveFlag_HPRE>
 800651e:	4603      	mov	r3, r0
 8006520:	2b00      	cmp	r3, #0
 8006522:	d0f1      	beq.n	8006508 <HAL_RCC_ClockConfig+0x78>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800652c:	2b00      	cmp	r3, #0
 800652e:	d016      	beq.n	800655e <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	695b      	ldr	r3, [r3, #20]
 8006534:	4618      	mov	r0, r3
 8006536:	f7ff fb06 	bl	8005b46 <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800653a:	f7fb fe5d 	bl	80021f8 <HAL_GetTick>
 800653e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8006540:	e008      	b.n	8006554 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006542:	f7fb fe59 	bl	80021f8 <HAL_GetTick>
 8006546:	4602      	mov	r2, r0
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	1ad3      	subs	r3, r2, r3
 800654c:	2b02      	cmp	r3, #2
 800654e:	d901      	bls.n	8006554 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8006550:	2303      	movs	r3, #3
 8006552:	e0b7      	b.n	80066c4 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8006554:	f7ff fbcc 	bl	8005cf0 <LL_RCC_IsActiveFlag_SHDHPRE>
 8006558:	4603      	mov	r3, r0
 800655a:	2b00      	cmp	r3, #0
 800655c:	d0f1      	beq.n	8006542 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	f003 0304 	and.w	r3, r3, #4
 8006566:	2b00      	cmp	r3, #0
 8006568:	d016      	beq.n	8006598 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	68db      	ldr	r3, [r3, #12]
 800656e:	4618      	mov	r0, r3
 8006570:	f7ff faff 	bl	8005b72 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006574:	f7fb fe40 	bl	80021f8 <HAL_GetTick>
 8006578:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800657a:	e008      	b.n	800658e <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800657c:	f7fb fe3c 	bl	80021f8 <HAL_GetTick>
 8006580:	4602      	mov	r2, r0
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	1ad3      	subs	r3, r2, r3
 8006586:	2b02      	cmp	r3, #2
 8006588:	d901      	bls.n	800658e <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800658a:	2303      	movs	r3, #3
 800658c:	e09a      	b.n	80066c4 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800658e:	f7ff fbc1 	bl	8005d14 <LL_RCC_IsActiveFlag_PPRE1>
 8006592:	4603      	mov	r3, r0
 8006594:	2b00      	cmp	r3, #0
 8006596:	d0f1      	beq.n	800657c <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	f003 0308 	and.w	r3, r3, #8
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d017      	beq.n	80065d4 <HAL_RCC_ClockConfig+0x144>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	691b      	ldr	r3, [r3, #16]
 80065a8:	00db      	lsls	r3, r3, #3
 80065aa:	4618      	mov	r0, r3
 80065ac:	f7ff faf4 	bl	8005b98 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80065b0:	f7fb fe22 	bl	80021f8 <HAL_GetTick>
 80065b4:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80065b6:	e008      	b.n	80065ca <HAL_RCC_ClockConfig+0x13a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80065b8:	f7fb fe1e 	bl	80021f8 <HAL_GetTick>
 80065bc:	4602      	mov	r2, r0
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	1ad3      	subs	r3, r2, r3
 80065c2:	2b02      	cmp	r3, #2
 80065c4:	d901      	bls.n	80065ca <HAL_RCC_ClockConfig+0x13a>
      {
        return HAL_TIMEOUT;
 80065c6:	2303      	movs	r3, #3
 80065c8:	e07c      	b.n	80066c4 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80065ca:	f7ff fbb4 	bl	8005d36 <LL_RCC_IsActiveFlag_PPRE2>
 80065ce:	4603      	mov	r3, r0
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d0f1      	beq.n	80065b8 <HAL_RCC_ClockConfig+0x128>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	f003 0301 	and.w	r3, r3, #1
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d043      	beq.n	8006668 <HAL_RCC_ClockConfig+0x1d8>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	685b      	ldr	r3, [r3, #4]
 80065e4:	2b02      	cmp	r3, #2
 80065e6:	d106      	bne.n	80065f6 <HAL_RCC_ClockConfig+0x166>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 80065e8:	f7ff f981 	bl	80058ee <LL_RCC_HSE_IsReady>
 80065ec:	4603      	mov	r3, r0
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d11e      	bne.n	8006630 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80065f2:	2301      	movs	r3, #1
 80065f4:	e066      	b.n	80066c4 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	685b      	ldr	r3, [r3, #4]
 80065fa:	2b03      	cmp	r3, #3
 80065fc:	d106      	bne.n	800660c <HAL_RCC_ClockConfig+0x17c>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 80065fe:	f7ff fb28 	bl	8005c52 <LL_RCC_PLL_IsReady>
 8006602:	4603      	mov	r3, r0
 8006604:	2b00      	cmp	r3, #0
 8006606:	d113      	bne.n	8006630 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006608:	2301      	movs	r3, #1
 800660a:	e05b      	b.n	80066c4 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	685b      	ldr	r3, [r3, #4]
 8006610:	2b00      	cmp	r3, #0
 8006612:	d106      	bne.n	8006622 <HAL_RCC_ClockConfig+0x192>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8006614:	f7ff fa1b 	bl	8005a4e <LL_RCC_MSI_IsReady>
 8006618:	4603      	mov	r3, r0
 800661a:	2b00      	cmp	r3, #0
 800661c:	d108      	bne.n	8006630 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800661e:	2301      	movs	r3, #1
 8006620:	e050      	b.n	80066c4 <HAL_RCC_ClockConfig+0x234>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8006622:	f7ff f991 	bl	8005948 <LL_RCC_HSI_IsReady>
 8006626:	4603      	mov	r3, r0
 8006628:	2b00      	cmp	r3, #0
 800662a:	d101      	bne.n	8006630 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800662c:	2301      	movs	r3, #1
 800662e:	e049      	b.n	80066c4 <HAL_RCC_ClockConfig+0x234>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	685b      	ldr	r3, [r3, #4]
 8006634:	4618      	mov	r0, r3
 8006636:	f7ff fa55 	bl	8005ae4 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800663a:	f7fb fddd 	bl	80021f8 <HAL_GetTick>
 800663e:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006640:	e00a      	b.n	8006658 <HAL_RCC_ClockConfig+0x1c8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006642:	f7fb fdd9 	bl	80021f8 <HAL_GetTick>
 8006646:	4602      	mov	r2, r0
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	1ad3      	subs	r3, r2, r3
 800664c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006650:	4293      	cmp	r3, r2
 8006652:	d901      	bls.n	8006658 <HAL_RCC_ClockConfig+0x1c8>
      {
        return HAL_TIMEOUT;
 8006654:	2303      	movs	r3, #3
 8006656:	e035      	b.n	80066c4 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006658:	f7ff fa57 	bl	8005b0a <LL_RCC_GetSysClkSource>
 800665c:	4602      	mov	r2, r0
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	685b      	ldr	r3, [r3, #4]
 8006662:	009b      	lsls	r3, r3, #2
 8006664:	429a      	cmp	r2, r3
 8006666:	d1ec      	bne.n	8006642 <HAL_RCC_ClockConfig+0x1b2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006668:	4b18      	ldr	r3, [pc, #96]	@ (80066cc <HAL_RCC_ClockConfig+0x23c>)
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	f003 0307 	and.w	r3, r3, #7
 8006670:	683a      	ldr	r2, [r7, #0]
 8006672:	429a      	cmp	r2, r3
 8006674:	d21b      	bcs.n	80066ae <HAL_RCC_ClockConfig+0x21e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006676:	4b15      	ldr	r3, [pc, #84]	@ (80066cc <HAL_RCC_ClockConfig+0x23c>)
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	f023 0207 	bic.w	r2, r3, #7
 800667e:	4913      	ldr	r1, [pc, #76]	@ (80066cc <HAL_RCC_ClockConfig+0x23c>)
 8006680:	683b      	ldr	r3, [r7, #0]
 8006682:	4313      	orrs	r3, r2
 8006684:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006686:	f7fb fdb7 	bl	80021f8 <HAL_GetTick>
 800668a:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800668c:	e008      	b.n	80066a0 <HAL_RCC_ClockConfig+0x210>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800668e:	f7fb fdb3 	bl	80021f8 <HAL_GetTick>
 8006692:	4602      	mov	r2, r0
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	1ad3      	subs	r3, r2, r3
 8006698:	2b02      	cmp	r3, #2
 800669a:	d901      	bls.n	80066a0 <HAL_RCC_ClockConfig+0x210>
      {
        return HAL_TIMEOUT;
 800669c:	2303      	movs	r3, #3
 800669e:	e011      	b.n	80066c4 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80066a0:	4b0a      	ldr	r3, [pc, #40]	@ (80066cc <HAL_RCC_ClockConfig+0x23c>)
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	f003 0307 	and.w	r3, r3, #7
 80066a8:	683a      	ldr	r2, [r7, #0]
 80066aa:	429a      	cmp	r2, r3
 80066ac:	d1ef      	bne.n	800668e <HAL_RCC_ClockConfig+0x1fe>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80066ae:	f000 f8b3 	bl	8006818 <HAL_RCC_GetHCLKFreq>
 80066b2:	4603      	mov	r3, r0
 80066b4:	4a06      	ldr	r2, [pc, #24]	@ (80066d0 <HAL_RCC_ClockConfig+0x240>)
 80066b6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80066b8:	4b06      	ldr	r3, [pc, #24]	@ (80066d4 <HAL_RCC_ClockConfig+0x244>)
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	4618      	mov	r0, r3
 80066be:	f7fb fd91 	bl	80021e4 <HAL_InitTick>
 80066c2:	4603      	mov	r3, r0
}
 80066c4:	4618      	mov	r0, r3
 80066c6:	3710      	adds	r7, #16
 80066c8:	46bd      	mov	sp, r7
 80066ca:	bd80      	pop	{r7, pc}
 80066cc:	58004000 	.word	0x58004000
 80066d0:	20000000 	.word	0x20000000
 80066d4:	20000004 	.word	0x20000004

080066d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80066d8:	b590      	push	{r4, r7, lr}
 80066da:	b087      	sub	sp, #28
 80066dc:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 80066de:	2300      	movs	r3, #0
 80066e0:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 80066e2:	2300      	movs	r3, #0
 80066e4:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80066e6:	f7ff fa10 	bl	8005b0a <LL_RCC_GetSysClkSource>
 80066ea:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80066ec:	f7ff fae4 	bl	8005cb8 <LL_RCC_PLL_GetMainSource>
 80066f0:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80066f2:	68bb      	ldr	r3, [r7, #8]
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d005      	beq.n	8006704 <HAL_RCC_GetSysClockFreq+0x2c>
 80066f8:	68bb      	ldr	r3, [r7, #8]
 80066fa:	2b0c      	cmp	r3, #12
 80066fc:	d139      	bne.n	8006772 <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	2b01      	cmp	r3, #1
 8006702:	d136      	bne.n	8006772 <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /*Retrieve MSI frequency range in HZ*/
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8006704:	f7ff f9b3 	bl	8005a6e <LL_RCC_MSI_IsEnabledRangeSelect>
 8006708:	4603      	mov	r3, r0
 800670a:	2b00      	cmp	r3, #0
 800670c:	d115      	bne.n	800673a <HAL_RCC_GetSysClockFreq+0x62>
 800670e:	f7ff f9ae 	bl	8005a6e <LL_RCC_MSI_IsEnabledRangeSelect>
 8006712:	4603      	mov	r3, r0
 8006714:	2b01      	cmp	r3, #1
 8006716:	d106      	bne.n	8006726 <HAL_RCC_GetSysClockFreq+0x4e>
 8006718:	f7ff f9b9 	bl	8005a8e <LL_RCC_MSI_GetRange>
 800671c:	4603      	mov	r3, r0
 800671e:	0a1b      	lsrs	r3, r3, #8
 8006720:	f003 030f 	and.w	r3, r3, #15
 8006724:	e005      	b.n	8006732 <HAL_RCC_GetSysClockFreq+0x5a>
 8006726:	f7ff f9bd 	bl	8005aa4 <LL_RCC_MSI_GetRangeAfterStandby>
 800672a:	4603      	mov	r3, r0
 800672c:	0a1b      	lsrs	r3, r3, #8
 800672e:	f003 030f 	and.w	r3, r3, #15
 8006732:	4a36      	ldr	r2, [pc, #216]	@ (800680c <HAL_RCC_GetSysClockFreq+0x134>)
 8006734:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006738:	e014      	b.n	8006764 <HAL_RCC_GetSysClockFreq+0x8c>
 800673a:	f7ff f998 	bl	8005a6e <LL_RCC_MSI_IsEnabledRangeSelect>
 800673e:	4603      	mov	r3, r0
 8006740:	2b01      	cmp	r3, #1
 8006742:	d106      	bne.n	8006752 <HAL_RCC_GetSysClockFreq+0x7a>
 8006744:	f7ff f9a3 	bl	8005a8e <LL_RCC_MSI_GetRange>
 8006748:	4603      	mov	r3, r0
 800674a:	091b      	lsrs	r3, r3, #4
 800674c:	f003 030f 	and.w	r3, r3, #15
 8006750:	e005      	b.n	800675e <HAL_RCC_GetSysClockFreq+0x86>
 8006752:	f7ff f9a7 	bl	8005aa4 <LL_RCC_MSI_GetRangeAfterStandby>
 8006756:	4603      	mov	r3, r0
 8006758:	091b      	lsrs	r3, r3, #4
 800675a:	f003 030f 	and.w	r3, r3, #15
 800675e:	4a2b      	ldr	r2, [pc, #172]	@ (800680c <HAL_RCC_GetSysClockFreq+0x134>)
 8006760:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006764:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8006766:	68bb      	ldr	r3, [r7, #8]
 8006768:	2b00      	cmp	r3, #0
 800676a:	d115      	bne.n	8006798 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 800676c:	693b      	ldr	r3, [r7, #16]
 800676e:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8006770:	e012      	b.n	8006798 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006772:	68bb      	ldr	r3, [r7, #8]
 8006774:	2b04      	cmp	r3, #4
 8006776:	d102      	bne.n	800677e <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006778:	4b25      	ldr	r3, [pc, #148]	@ (8006810 <HAL_RCC_GetSysClockFreq+0x138>)
 800677a:	617b      	str	r3, [r7, #20]
 800677c:	e00c      	b.n	8006798 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800677e:	68bb      	ldr	r3, [r7, #8]
 8006780:	2b08      	cmp	r3, #8
 8006782:	d109      	bne.n	8006798 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8006784:	f7ff f886 	bl	8005894 <LL_RCC_HSE_IsEnabledDiv2>
 8006788:	4603      	mov	r3, r0
 800678a:	2b01      	cmp	r3, #1
 800678c:	d102      	bne.n	8006794 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 800678e:	4b20      	ldr	r3, [pc, #128]	@ (8006810 <HAL_RCC_GetSysClockFreq+0x138>)
 8006790:	617b      	str	r3, [r7, #20]
 8006792:	e001      	b.n	8006798 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8006794:	4b1f      	ldr	r3, [pc, #124]	@ (8006814 <HAL_RCC_GetSysClockFreq+0x13c>)
 8006796:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006798:	f7ff f9b7 	bl	8005b0a <LL_RCC_GetSysClkSource>
 800679c:	4603      	mov	r3, r0
 800679e:	2b0c      	cmp	r3, #12
 80067a0:	d12f      	bne.n	8006802 <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 80067a2:	f7ff fa89 	bl	8005cb8 <LL_RCC_PLL_GetMainSource>
 80067a6:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	2b02      	cmp	r3, #2
 80067ac:	d003      	beq.n	80067b6 <HAL_RCC_GetSysClockFreq+0xde>
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	2b03      	cmp	r3, #3
 80067b2:	d003      	beq.n	80067bc <HAL_RCC_GetSysClockFreq+0xe4>
 80067b4:	e00d      	b.n	80067d2 <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 80067b6:	4b16      	ldr	r3, [pc, #88]	@ (8006810 <HAL_RCC_GetSysClockFreq+0x138>)
 80067b8:	60fb      	str	r3, [r7, #12]
        break;
 80067ba:	e00d      	b.n	80067d8 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80067bc:	f7ff f86a 	bl	8005894 <LL_RCC_HSE_IsEnabledDiv2>
 80067c0:	4603      	mov	r3, r0
 80067c2:	2b01      	cmp	r3, #1
 80067c4:	d102      	bne.n	80067cc <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 80067c6:	4b12      	ldr	r3, [pc, #72]	@ (8006810 <HAL_RCC_GetSysClockFreq+0x138>)
 80067c8:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 80067ca:	e005      	b.n	80067d8 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 80067cc:	4b11      	ldr	r3, [pc, #68]	@ (8006814 <HAL_RCC_GetSysClockFreq+0x13c>)
 80067ce:	60fb      	str	r3, [r7, #12]
        break;
 80067d0:	e002      	b.n	80067d8 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 80067d2:	693b      	ldr	r3, [r7, #16]
 80067d4:	60fb      	str	r3, [r7, #12]
        break;
 80067d6:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80067d8:	f7ff fa4c 	bl	8005c74 <LL_RCC_PLL_GetN>
 80067dc:	4602      	mov	r2, r0
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	fb03 f402 	mul.w	r4, r3, r2
 80067e4:	f7ff fa5d 	bl	8005ca2 <LL_RCC_PLL_GetDivider>
 80067e8:	4603      	mov	r3, r0
 80067ea:	091b      	lsrs	r3, r3, #4
 80067ec:	3301      	adds	r3, #1
 80067ee:	fbb4 f4f3 	udiv	r4, r4, r3
 80067f2:	f7ff fa4b 	bl	8005c8c <LL_RCC_PLL_GetR>
 80067f6:	4603      	mov	r3, r0
 80067f8:	0f5b      	lsrs	r3, r3, #29
 80067fa:	3301      	adds	r3, #1
 80067fc:	fbb4 f3f3 	udiv	r3, r4, r3
 8006800:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8006802:	697b      	ldr	r3, [r7, #20]
}
 8006804:	4618      	mov	r0, r3
 8006806:	371c      	adds	r7, #28
 8006808:	46bd      	mov	sp, r7
 800680a:	bd90      	pop	{r4, r7, pc}
 800680c:	0801f3ec 	.word	0x0801f3ec
 8006810:	00f42400 	.word	0x00f42400
 8006814:	01e84800 	.word	0x01e84800

08006818 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006818:	b598      	push	{r3, r4, r7, lr}
 800681a:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 800681c:	f7ff ff5c 	bl	80066d8 <HAL_RCC_GetSysClockFreq>
 8006820:	4604      	mov	r4, r0
 8006822:	f7ff f9cc 	bl	8005bbe <LL_RCC_GetAHBPrescaler>
 8006826:	4603      	mov	r3, r0
 8006828:	091b      	lsrs	r3, r3, #4
 800682a:	f003 030f 	and.w	r3, r3, #15
 800682e:	4a03      	ldr	r2, [pc, #12]	@ (800683c <HAL_RCC_GetHCLKFreq+0x24>)
 8006830:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006834:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8006838:	4618      	mov	r0, r3
 800683a:	bd98      	pop	{r3, r4, r7, pc}
 800683c:	0801f38c 	.word	0x0801f38c

08006840 <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006840:	b598      	push	{r3, r4, r7, lr}
 8006842:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8006844:	f7ff ffe8 	bl	8006818 <HAL_RCC_GetHCLKFreq>
 8006848:	4604      	mov	r4, r0
 800684a:	f7ff f9d0 	bl	8005bee <LL_RCC_GetAPB1Prescaler>
 800684e:	4603      	mov	r3, r0
 8006850:	0a1b      	lsrs	r3, r3, #8
 8006852:	4a03      	ldr	r2, [pc, #12]	@ (8006860 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006854:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006858:	fa24 f303 	lsr.w	r3, r4, r3
}
 800685c:	4618      	mov	r0, r3
 800685e:	bd98      	pop	{r3, r4, r7, pc}
 8006860:	0801f3cc 	.word	0x0801f3cc

08006864 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006864:	b598      	push	{r3, r4, r7, lr}
 8006866:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8006868:	f7ff ffd6 	bl	8006818 <HAL_RCC_GetHCLKFreq>
 800686c:	4604      	mov	r4, r0
 800686e:	f7ff f9c9 	bl	8005c04 <LL_RCC_GetAPB2Prescaler>
 8006872:	4603      	mov	r3, r0
 8006874:	0adb      	lsrs	r3, r3, #11
 8006876:	4a03      	ldr	r2, [pc, #12]	@ (8006884 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006878:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800687c:	fa24 f303 	lsr.w	r3, r4, r3
}
 8006880:	4618      	mov	r0, r3
 8006882:	bd98      	pop	{r3, r4, r7, pc}
 8006884:	0801f3cc 	.word	0x0801f3cc

08006888 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8006888:	b590      	push	{r4, r7, lr}
 800688a:	b085      	sub	sp, #20
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	091b      	lsrs	r3, r3, #4
 8006894:	f003 030f 	and.w	r3, r3, #15
 8006898:	4a10      	ldr	r2, [pc, #64]	@ (80068dc <RCC_SetFlashLatencyFromMSIRange+0x54>)
 800689a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800689e:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 80068a0:	f7ff f998 	bl	8005bd4 <LL_RCC_GetAHB3Prescaler>
 80068a4:	4603      	mov	r3, r0
 80068a6:	091b      	lsrs	r3, r3, #4
 80068a8:	f003 030f 	and.w	r3, r3, #15
 80068ac:	4a0c      	ldr	r2, [pc, #48]	@ (80068e0 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 80068ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80068b2:	68fa      	ldr	r2, [r7, #12]
 80068b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80068b8:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 80068ba:	68bb      	ldr	r3, [r7, #8]
 80068bc:	4a09      	ldr	r2, [pc, #36]	@ (80068e4 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 80068be:	fba2 2303 	umull	r2, r3, r2, r3
 80068c2:	0c9c      	lsrs	r4, r3, #18
 80068c4:	f7fe ff3e 	bl	8005744 <HAL_PWREx_GetVoltageRange>
 80068c8:	4603      	mov	r3, r0
 80068ca:	4619      	mov	r1, r3
 80068cc:	4620      	mov	r0, r4
 80068ce:	f000 f80b 	bl	80068e8 <RCC_SetFlashLatency>
 80068d2:	4603      	mov	r3, r0
}
 80068d4:	4618      	mov	r0, r3
 80068d6:	3714      	adds	r7, #20
 80068d8:	46bd      	mov	sp, r7
 80068da:	bd90      	pop	{r4, r7, pc}
 80068dc:	0801f3ec 	.word	0x0801f3ec
 80068e0:	0801f38c 	.word	0x0801f38c
 80068e4:	431bde83 	.word	0x431bde83

080068e8 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 80068e8:	b580      	push	{r7, lr}
 80068ea:	b08e      	sub	sp, #56	@ 0x38
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	6078      	str	r0, [r7, #4]
 80068f0:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 80068f2:	4a3a      	ldr	r2, [pc, #232]	@ (80069dc <RCC_SetFlashLatency+0xf4>)
 80068f4:	f107 0320 	add.w	r3, r7, #32
 80068f8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80068fc:	6018      	str	r0, [r3, #0]
 80068fe:	3304      	adds	r3, #4
 8006900:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 8006902:	4a37      	ldr	r2, [pc, #220]	@ (80069e0 <RCC_SetFlashLatency+0xf8>)
 8006904:	f107 0318 	add.w	r3, r7, #24
 8006908:	e892 0003 	ldmia.w	r2, {r0, r1}
 800690c:	6018      	str	r0, [r3, #0]
 800690e:	3304      	adds	r3, #4
 8006910:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 8006912:	4a34      	ldr	r2, [pc, #208]	@ (80069e4 <RCC_SetFlashLatency+0xfc>)
 8006914:	f107 030c 	add.w	r3, r7, #12
 8006918:	ca07      	ldmia	r2, {r0, r1, r2}
 800691a:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800691e:	2300      	movs	r3, #0
 8006920:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006922:	683b      	ldr	r3, [r7, #0]
 8006924:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006928:	d11b      	bne.n	8006962 <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800692a:	2300      	movs	r3, #0
 800692c:	633b      	str	r3, [r7, #48]	@ 0x30
 800692e:	e014      	b.n	800695a <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8006930:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006932:	005b      	lsls	r3, r3, #1
 8006934:	3338      	adds	r3, #56	@ 0x38
 8006936:	443b      	add	r3, r7
 8006938:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 800693c:	461a      	mov	r2, r3
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	4293      	cmp	r3, r2
 8006942:	d807      	bhi.n	8006954 <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8006944:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006946:	009b      	lsls	r3, r3, #2
 8006948:	3338      	adds	r3, #56	@ 0x38
 800694a:	443b      	add	r3, r7
 800694c:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8006950:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006952:	e021      	b.n	8006998 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8006954:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006956:	3301      	adds	r3, #1
 8006958:	633b      	str	r3, [r7, #48]	@ 0x30
 800695a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800695c:	2b02      	cmp	r3, #2
 800695e:	d9e7      	bls.n	8006930 <RCC_SetFlashLatency+0x48>
 8006960:	e01a      	b.n	8006998 <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8006962:	2300      	movs	r3, #0
 8006964:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006966:	e014      	b.n	8006992 <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8006968:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800696a:	005b      	lsls	r3, r3, #1
 800696c:	3338      	adds	r3, #56	@ 0x38
 800696e:	443b      	add	r3, r7
 8006970:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8006974:	461a      	mov	r2, r3
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	4293      	cmp	r3, r2
 800697a:	d807      	bhi.n	800698c <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800697c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800697e:	009b      	lsls	r3, r3, #2
 8006980:	3338      	adds	r3, #56	@ 0x38
 8006982:	443b      	add	r3, r7
 8006984:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8006988:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800698a:	e005      	b.n	8006998 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800698c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800698e:	3301      	adds	r3, #1
 8006990:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006992:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006994:	2b02      	cmp	r3, #2
 8006996:	d9e7      	bls.n	8006968 <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006998:	4b13      	ldr	r3, [pc, #76]	@ (80069e8 <RCC_SetFlashLatency+0x100>)
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	f023 0207 	bic.w	r2, r3, #7
 80069a0:	4911      	ldr	r1, [pc, #68]	@ (80069e8 <RCC_SetFlashLatency+0x100>)
 80069a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80069a4:	4313      	orrs	r3, r2
 80069a6:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80069a8:	f7fb fc26 	bl	80021f8 <HAL_GetTick>
 80069ac:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80069ae:	e008      	b.n	80069c2 <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80069b0:	f7fb fc22 	bl	80021f8 <HAL_GetTick>
 80069b4:	4602      	mov	r2, r0
 80069b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069b8:	1ad3      	subs	r3, r2, r3
 80069ba:	2b02      	cmp	r3, #2
 80069bc:	d901      	bls.n	80069c2 <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 80069be:	2303      	movs	r3, #3
 80069c0:	e007      	b.n	80069d2 <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80069c2:	4b09      	ldr	r3, [pc, #36]	@ (80069e8 <RCC_SetFlashLatency+0x100>)
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	f003 0307 	and.w	r3, r3, #7
 80069ca:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80069cc:	429a      	cmp	r2, r3
 80069ce:	d1ef      	bne.n	80069b0 <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 80069d0:	2300      	movs	r3, #0
}
 80069d2:	4618      	mov	r0, r3
 80069d4:	3738      	adds	r7, #56	@ 0x38
 80069d6:	46bd      	mov	sp, r7
 80069d8:	bd80      	pop	{r7, pc}
 80069da:	bf00      	nop
 80069dc:	0801e9ec 	.word	0x0801e9ec
 80069e0:	0801e9f4 	.word	0x0801e9f4
 80069e4:	0801e9fc 	.word	0x0801e9fc
 80069e8:	58004000 	.word	0x58004000

080069ec <LL_RCC_LSE_IsReady>:
{
 80069ec:	b480      	push	{r7}
 80069ee:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80069f0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80069f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80069f8:	f003 0302 	and.w	r3, r3, #2
 80069fc:	2b02      	cmp	r3, #2
 80069fe:	d101      	bne.n	8006a04 <LL_RCC_LSE_IsReady+0x18>
 8006a00:	2301      	movs	r3, #1
 8006a02:	e000      	b.n	8006a06 <LL_RCC_LSE_IsReady+0x1a>
 8006a04:	2300      	movs	r3, #0
}
 8006a06:	4618      	mov	r0, r3
 8006a08:	46bd      	mov	sp, r7
 8006a0a:	bc80      	pop	{r7}
 8006a0c:	4770      	bx	lr

08006a0e <LL_RCC_SetUSARTClockSource>:
{
 8006a0e:	b480      	push	{r7}
 8006a10:	b083      	sub	sp, #12
 8006a12:	af00      	add	r7, sp, #0
 8006a14:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 8006a16:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006a1a:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	0c1b      	lsrs	r3, r3, #16
 8006a22:	43db      	mvns	r3, r3
 8006a24:	401a      	ands	r2, r3
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	b29b      	uxth	r3, r3
 8006a2a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006a2e:	4313      	orrs	r3, r2
 8006a30:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8006a34:	bf00      	nop
 8006a36:	370c      	adds	r7, #12
 8006a38:	46bd      	mov	sp, r7
 8006a3a:	bc80      	pop	{r7}
 8006a3c:	4770      	bx	lr

08006a3e <LL_RCC_SetI2SClockSource>:
{
 8006a3e:	b480      	push	{r7}
 8006a40:	b083      	sub	sp, #12
 8006a42:	af00      	add	r7, sp, #0
 8006a44:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 8006a46:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006a4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a4e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006a52:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	4313      	orrs	r3, r2
 8006a5a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8006a5e:	bf00      	nop
 8006a60:	370c      	adds	r7, #12
 8006a62:	46bd      	mov	sp, r7
 8006a64:	bc80      	pop	{r7}
 8006a66:	4770      	bx	lr

08006a68 <LL_RCC_SetLPUARTClockSource>:
{
 8006a68:	b480      	push	{r7}
 8006a6a:	b083      	sub	sp, #12
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8006a70:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006a74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a78:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006a7c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	4313      	orrs	r3, r2
 8006a84:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8006a88:	bf00      	nop
 8006a8a:	370c      	adds	r7, #12
 8006a8c:	46bd      	mov	sp, r7
 8006a8e:	bc80      	pop	{r7}
 8006a90:	4770      	bx	lr

08006a92 <LL_RCC_SetI2CClockSource>:
{
 8006a92:	b480      	push	{r7}
 8006a94:	b083      	sub	sp, #12
 8006a96:	af00      	add	r7, sp, #0
 8006a98:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8006a9a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006a9e:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	091b      	lsrs	r3, r3, #4
 8006aa6:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8006aaa:	43db      	mvns	r3, r3
 8006aac:	401a      	ands	r2, r3
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	011b      	lsls	r3, r3, #4
 8006ab2:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8006ab6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006aba:	4313      	orrs	r3, r2
 8006abc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8006ac0:	bf00      	nop
 8006ac2:	370c      	adds	r7, #12
 8006ac4:	46bd      	mov	sp, r7
 8006ac6:	bc80      	pop	{r7}
 8006ac8:	4770      	bx	lr

08006aca <LL_RCC_SetLPTIMClockSource>:
{
 8006aca:	b480      	push	{r7}
 8006acc:	b083      	sub	sp, #12
 8006ace:	af00      	add	r7, sp, #0
 8006ad0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8006ad2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006ad6:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	0c1b      	lsrs	r3, r3, #16
 8006ade:	041b      	lsls	r3, r3, #16
 8006ae0:	43db      	mvns	r3, r3
 8006ae2:	401a      	ands	r2, r3
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	041b      	lsls	r3, r3, #16
 8006ae8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006aec:	4313      	orrs	r3, r2
 8006aee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8006af2:	bf00      	nop
 8006af4:	370c      	adds	r7, #12
 8006af6:	46bd      	mov	sp, r7
 8006af8:	bc80      	pop	{r7}
 8006afa:	4770      	bx	lr

08006afc <LL_RCC_SetRNGClockSource>:
{
 8006afc:	b480      	push	{r7}
 8006afe:	b083      	sub	sp, #12
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8006b04:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006b08:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b0c:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8006b10:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	4313      	orrs	r3, r2
 8006b18:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8006b1c:	bf00      	nop
 8006b1e:	370c      	adds	r7, #12
 8006b20:	46bd      	mov	sp, r7
 8006b22:	bc80      	pop	{r7}
 8006b24:	4770      	bx	lr

08006b26 <LL_RCC_SetADCClockSource>:
{
 8006b26:	b480      	push	{r7}
 8006b28:	b083      	sub	sp, #12
 8006b2a:	af00      	add	r7, sp, #0
 8006b2c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8006b2e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006b32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b36:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8006b3a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	4313      	orrs	r3, r2
 8006b42:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8006b46:	bf00      	nop
 8006b48:	370c      	adds	r7, #12
 8006b4a:	46bd      	mov	sp, r7
 8006b4c:	bc80      	pop	{r7}
 8006b4e:	4770      	bx	lr

08006b50 <LL_RCC_SetRTCClockSource>:
{
 8006b50:	b480      	push	{r7}
 8006b52:	b083      	sub	sp, #12
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8006b58:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006b5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006b60:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006b64:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	4313      	orrs	r3, r2
 8006b6c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8006b70:	bf00      	nop
 8006b72:	370c      	adds	r7, #12
 8006b74:	46bd      	mov	sp, r7
 8006b76:	bc80      	pop	{r7}
 8006b78:	4770      	bx	lr

08006b7a <LL_RCC_GetRTCClockSource>:
{
 8006b7a:	b480      	push	{r7}
 8006b7c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8006b7e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006b82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006b86:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 8006b8a:	4618      	mov	r0, r3
 8006b8c:	46bd      	mov	sp, r7
 8006b8e:	bc80      	pop	{r7}
 8006b90:	4770      	bx	lr

08006b92 <LL_RCC_ForceBackupDomainReset>:
{
 8006b92:	b480      	push	{r7}
 8006b94:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8006b96:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006b9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006b9e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006ba2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006ba6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8006baa:	bf00      	nop
 8006bac:	46bd      	mov	sp, r7
 8006bae:	bc80      	pop	{r7}
 8006bb0:	4770      	bx	lr

08006bb2 <LL_RCC_ReleaseBackupDomainReset>:
{
 8006bb2:	b480      	push	{r7}
 8006bb4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8006bb6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006bba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006bbe:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006bc2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006bc6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8006bca:	bf00      	nop
 8006bcc:	46bd      	mov	sp, r7
 8006bce:	bc80      	pop	{r7}
 8006bd0:	4770      	bx	lr
	...

08006bd4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006bd4:	b580      	push	{r7, lr}
 8006bd6:	b086      	sub	sp, #24
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 8006bdc:	2300      	movs	r3, #0
 8006bde:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 8006be0:	2300      	movs	r3, #0
 8006be2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8006be4:	2300      	movs	r3, #0
 8006be6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d058      	beq.n	8006ca6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 8006bf4:	f7fe fd64 	bl	80056c0 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006bf8:	f7fb fafe 	bl	80021f8 <HAL_GetTick>
 8006bfc:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8006bfe:	e009      	b.n	8006c14 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006c00:	f7fb fafa 	bl	80021f8 <HAL_GetTick>
 8006c04:	4602      	mov	r2, r0
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	1ad3      	subs	r3, r2, r3
 8006c0a:	2b02      	cmp	r3, #2
 8006c0c:	d902      	bls.n	8006c14 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 8006c0e:	2303      	movs	r3, #3
 8006c10:	74fb      	strb	r3, [r7, #19]
        break;
 8006c12:	e006      	b.n	8006c22 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8006c14:	4b7b      	ldr	r3, [pc, #492]	@ (8006e04 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006c1c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006c20:	d1ee      	bne.n	8006c00 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 8006c22:	7cfb      	ldrb	r3, [r7, #19]
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d13c      	bne.n	8006ca2 <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8006c28:	f7ff ffa7 	bl	8006b7a <LL_RCC_GetRTCClockSource>
 8006c2c:	4602      	mov	r2, r0
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006c32:	429a      	cmp	r2, r3
 8006c34:	d00f      	beq.n	8006c56 <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006c36:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006c3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006c3e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006c42:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006c44:	f7ff ffa5 	bl	8006b92 <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006c48:	f7ff ffb3 	bl	8006bb2 <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006c4c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006c50:	697b      	ldr	r3, [r7, #20]
 8006c52:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 8006c56:	697b      	ldr	r3, [r7, #20]
 8006c58:	f003 0302 	and.w	r3, r3, #2
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d014      	beq.n	8006c8a <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c60:	f7fb faca 	bl	80021f8 <HAL_GetTick>
 8006c64:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 8006c66:	e00b      	b.n	8006c80 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006c68:	f7fb fac6 	bl	80021f8 <HAL_GetTick>
 8006c6c:	4602      	mov	r2, r0
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	1ad3      	subs	r3, r2, r3
 8006c72:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006c76:	4293      	cmp	r3, r2
 8006c78:	d902      	bls.n	8006c80 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 8006c7a:	2303      	movs	r3, #3
 8006c7c:	74fb      	strb	r3, [r7, #19]
            break;
 8006c7e:	e004      	b.n	8006c8a <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 8006c80:	f7ff feb4 	bl	80069ec <LL_RCC_LSE_IsReady>
 8006c84:	4603      	mov	r3, r0
 8006c86:	2b01      	cmp	r3, #1
 8006c88:	d1ee      	bne.n	8006c68 <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 8006c8a:	7cfb      	ldrb	r3, [r7, #19]
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d105      	bne.n	8006c9c <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006c94:	4618      	mov	r0, r3
 8006c96:	f7ff ff5b 	bl	8006b50 <LL_RCC_SetRTCClockSource>
 8006c9a:	e004      	b.n	8006ca6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006c9c:	7cfb      	ldrb	r3, [r7, #19]
 8006c9e:	74bb      	strb	r3, [r7, #18]
 8006ca0:	e001      	b.n	8006ca6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ca2:	7cfb      	ldrb	r3, [r7, #19]
 8006ca4:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	f003 0301 	and.w	r3, r3, #1
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d004      	beq.n	8006cbc <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	685b      	ldr	r3, [r3, #4]
 8006cb6:	4618      	mov	r0, r3
 8006cb8:	f7ff fea9 	bl	8006a0e <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	f003 0302 	and.w	r3, r3, #2
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d004      	beq.n	8006cd2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	689b      	ldr	r3, [r3, #8]
 8006ccc:	4618      	mov	r0, r3
 8006cce:	f7ff fe9e 	bl	8006a0e <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	f003 0320 	and.w	r3, r3, #32
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d004      	beq.n	8006ce8 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	691b      	ldr	r3, [r3, #16]
 8006ce2:	4618      	mov	r0, r3
 8006ce4:	f7ff fec0 	bl	8006a68 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d004      	beq.n	8006cfe <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	6a1b      	ldr	r3, [r3, #32]
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	f7ff fee6 	bl	8006aca <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d004      	beq.n	8006d14 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d0e:	4618      	mov	r0, r3
 8006d10:	f7ff fedb 	bl	8006aca <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d004      	beq.n	8006d2a <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d24:	4618      	mov	r0, r3
 8006d26:	f7ff fed0 	bl	8006aca <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d004      	beq.n	8006d40 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	695b      	ldr	r3, [r3, #20]
 8006d3a:	4618      	mov	r0, r3
 8006d3c:	f7ff fea9 	bl	8006a92 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d004      	beq.n	8006d56 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	699b      	ldr	r3, [r3, #24]
 8006d50:	4618      	mov	r0, r3
 8006d52:	f7ff fe9e 	bl	8006a92 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d004      	beq.n	8006d6c <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	69db      	ldr	r3, [r3, #28]
 8006d66:	4618      	mov	r0, r3
 8006d68:	f7ff fe93 	bl	8006a92 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	f003 0310 	and.w	r3, r3, #16
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d011      	beq.n	8006d9c <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	68db      	ldr	r3, [r3, #12]
 8006d7c:	4618      	mov	r0, r3
 8006d7e:	f7ff fe5e 	bl	8006a3e <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	68db      	ldr	r3, [r3, #12]
 8006d86:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006d8a:	d107      	bne.n	8006d9c <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8006d8c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006d90:	68db      	ldr	r3, [r3, #12]
 8006d92:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006d96:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006d9a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d010      	beq.n	8006dca <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006dac:	4618      	mov	r0, r3
 8006dae:	f7ff fea5 	bl	8006afc <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d107      	bne.n	8006dca <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8006dba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006dbe:	68db      	ldr	r3, [r3, #12]
 8006dc0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006dc4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006dc8:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d011      	beq.n	8006dfa <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006dda:	4618      	mov	r0, r3
 8006ddc:	f7ff fea3 	bl	8006b26 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006de4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006de8:	d107      	bne.n	8006dfa <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006dea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006dee:	68db      	ldr	r3, [r3, #12]
 8006df0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006df4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006df8:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8006dfa:	7cbb      	ldrb	r3, [r7, #18]
}
 8006dfc:	4618      	mov	r0, r3
 8006dfe:	3718      	adds	r7, #24
 8006e00:	46bd      	mov	sp, r7
 8006e02:	bd80      	pop	{r7, pc}
 8006e04:	58000400 	.word	0x58000400

08006e08 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006e08:	b580      	push	{r7, lr}
 8006e0a:	b084      	sub	sp, #16
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8006e10:	2301      	movs	r3, #1
 8006e12:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d068      	beq.n	8006eec <HAL_RTC_Init+0xe4>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8006e20:	b2db      	uxtb	r3, r3
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d106      	bne.n	8006e34 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	2200      	movs	r2, #0
 8006e2a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8006e2e:	6878      	ldr	r0, [r7, #4]
 8006e30:	f7fa ff22 	bl	8001c78 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	2202      	movs	r2, #2
 8006e38:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006e3c:	4b2e      	ldr	r3, [pc, #184]	@ (8006ef8 <HAL_RTC_Init+0xf0>)
 8006e3e:	22ca      	movs	r2, #202	@ 0xca
 8006e40:	625a      	str	r2, [r3, #36]	@ 0x24
 8006e42:	4b2d      	ldr	r3, [pc, #180]	@ (8006ef8 <HAL_RTC_Init+0xf0>)
 8006e44:	2253      	movs	r2, #83	@ 0x53
 8006e46:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8006e48:	6878      	ldr	r0, [r7, #4]
 8006e4a:	f000 fa0f 	bl	800726c <RTC_EnterInitMode>
 8006e4e:	4603      	mov	r3, r0
 8006e50:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK)
 8006e52:	7bfb      	ldrb	r3, [r7, #15]
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d13f      	bne.n	8006ed8 <HAL_RTC_Init+0xd0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8006e58:	4b27      	ldr	r3, [pc, #156]	@ (8006ef8 <HAL_RTC_Init+0xf0>)
 8006e5a:	699b      	ldr	r3, [r3, #24]
 8006e5c:	4a26      	ldr	r2, [pc, #152]	@ (8006ef8 <HAL_RTC_Init+0xf0>)
 8006e5e:	f023 638e 	bic.w	r3, r3, #74448896	@ 0x4700000
 8006e62:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006e66:	6193      	str	r3, [r2, #24]
      /* Set RTC_CR register */
      SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8006e68:	4b23      	ldr	r3, [pc, #140]	@ (8006ef8 <HAL_RTC_Init+0xf0>)
 8006e6a:	699a      	ldr	r2, [r3, #24]
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	6859      	ldr	r1, [r3, #4]
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	691b      	ldr	r3, [r3, #16]
 8006e74:	4319      	orrs	r1, r3
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	699b      	ldr	r3, [r3, #24]
 8006e7a:	430b      	orrs	r3, r1
 8006e7c:	491e      	ldr	r1, [pc, #120]	@ (8006ef8 <HAL_RTC_Init+0xf0>)
 8006e7e:	4313      	orrs	r3, r2
 8006e80:	618b      	str	r3, [r1, #24]

      /* Configure the RTC PRER */
      WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	68da      	ldr	r2, [r3, #12]
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	689b      	ldr	r3, [r3, #8]
 8006e8a:	041b      	lsls	r3, r3, #16
 8006e8c:	491a      	ldr	r1, [pc, #104]	@ (8006ef8 <HAL_RTC_Init+0xf0>)
 8006e8e:	4313      	orrs	r3, r2
 8006e90:	610b      	str	r3, [r1, #16]

      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 8006e92:	4b19      	ldr	r3, [pc, #100]	@ (8006ef8 <HAL_RTC_Init+0xf0>)
 8006e94:	68db      	ldr	r3, [r3, #12]
 8006e96:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ea2:	430b      	orrs	r3, r1
 8006ea4:	4914      	ldr	r1, [pc, #80]	@ (8006ef8 <HAL_RTC_Init+0xf0>)
 8006ea6:	4313      	orrs	r3, r2
 8006ea8:	60cb      	str	r3, [r1, #12]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8006eaa:	6878      	ldr	r0, [r7, #4]
 8006eac:	f000 fa12 	bl	80072d4 <RTC_ExitInitMode>
 8006eb0:	4603      	mov	r3, r0
 8006eb2:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 8006eb4:	7bfb      	ldrb	r3, [r7, #15]
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d10e      	bne.n	8006ed8 <HAL_RTC_Init+0xd0>
      {
        MODIFY_REG(RTC->CR, \
 8006eba:	4b0f      	ldr	r3, [pc, #60]	@ (8006ef8 <HAL_RTC_Init+0xf0>)
 8006ebc:	699b      	ldr	r3, [r3, #24]
 8006ebe:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	6a19      	ldr	r1, [r3, #32]
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	69db      	ldr	r3, [r3, #28]
 8006eca:	4319      	orrs	r1, r3
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	695b      	ldr	r3, [r3, #20]
 8006ed0:	430b      	orrs	r3, r1
 8006ed2:	4909      	ldr	r1, [pc, #36]	@ (8006ef8 <HAL_RTC_Init+0xf0>)
 8006ed4:	4313      	orrs	r3, r2
 8006ed6:	618b      	str	r3, [r1, #24]
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006ed8:	4b07      	ldr	r3, [pc, #28]	@ (8006ef8 <HAL_RTC_Init+0xf0>)
 8006eda:	22ff      	movs	r2, #255	@ 0xff
 8006edc:	625a      	str	r2, [r3, #36]	@ 0x24

    if (status == HAL_OK)
 8006ede:	7bfb      	ldrb	r3, [r7, #15]
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d103      	bne.n	8006eec <HAL_RTC_Init+0xe4>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	2201      	movs	r2, #1
 8006ee8:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    }
  }

  return status;
 8006eec:	7bfb      	ldrb	r3, [r7, #15]
}
 8006eee:	4618      	mov	r0, r3
 8006ef0:	3710      	adds	r7, #16
 8006ef2:	46bd      	mov	sp, r7
 8006ef4:	bd80      	pop	{r7, pc}
 8006ef6:	bf00      	nop
 8006ef8:	40002800 	.word	0x40002800

08006efc <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8006efc:	b590      	push	{r4, r7, lr}
 8006efe:	b087      	sub	sp, #28
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	60f8      	str	r0, [r7, #12]
 8006f04:	60b9      	str	r1, [r7, #8]
 8006f06:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8006f08:	2300      	movs	r3, #0
 8006f0a:	617b      	str	r3, [r7, #20]
  uint32_t binaryMode;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8006f12:	2b01      	cmp	r3, #1
 8006f14:	d101      	bne.n	8006f1a <HAL_RTC_SetAlarm_IT+0x1e>
 8006f16:	2302      	movs	r3, #2
 8006f18:	e0f3      	b.n	8007102 <HAL_RTC_SetAlarm_IT+0x206>
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	2201      	movs	r2, #1
 8006f1e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	2202      	movs	r2, #2
 8006f26:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    assert_param((sAlarm->AlarmSubSecondMask >> RTC_ALRMASSR_MASKSS_Pos) <= (8U + (READ_BIT(RTC->ICSR, RTC_ICSR_BCDU) >> RTC_ICSR_BCDU_Pos)));
  }
#endif

  /* Get Binary mode (32-bit free-running counter configuration) */
  binaryMode = READ_BIT(RTC->ICSR, RTC_ICSR_BIN);
 8006f2a:	4b78      	ldr	r3, [pc, #480]	@ (800710c <HAL_RTC_SetAlarm_IT+0x210>)
 8006f2c:	68db      	ldr	r3, [r3, #12]
 8006f2e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006f32:	613b      	str	r3, [r7, #16]

  if (binaryMode != RTC_BINARY_ONLY)
 8006f34:	693b      	ldr	r3, [r7, #16]
 8006f36:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006f3a:	d06a      	beq.n	8007012 <HAL_RTC_SetAlarm_IT+0x116>
  {
    if (Format == RTC_FORMAT_BIN)
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d13a      	bne.n	8006fb8 <HAL_RTC_SetAlarm_IT+0xbc>
    {
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8006f42:	4b72      	ldr	r3, [pc, #456]	@ (800710c <HAL_RTC_SetAlarm_IT+0x210>)
 8006f44:	699b      	ldr	r3, [r3, #24]
 8006f46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d102      	bne.n	8006f54 <HAL_RTC_SetAlarm_IT+0x58>
        assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
        assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
      }
      else
      {
        sAlarm->AlarmTime.TimeFormat = 0x00U;
 8006f4e:	68bb      	ldr	r3, [r7, #8]
 8006f50:	2200      	movs	r2, #0
 8006f52:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
      }
      assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
      assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));

      if( sAlarm->AlarmMask != RTC_ALARMMASK_DATEWEEKDAY )
 8006f54:	68bb      	ldr	r3, [r7, #8]
 8006f56:	695b      	ldr	r3, [r3, #20]
 8006f58:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
        }
      }

      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006f5c:	68bb      	ldr	r3, [r7, #8]
 8006f5e:	781b      	ldrb	r3, [r3, #0]
 8006f60:	4618      	mov	r0, r3
 8006f62:	f000 f9f5 	bl	8007350 <RTC_ByteToBcd2>
 8006f66:	4603      	mov	r3, r0
 8006f68:	041c      	lsls	r4, r3, #16
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006f6a:	68bb      	ldr	r3, [r7, #8]
 8006f6c:	785b      	ldrb	r3, [r3, #1]
 8006f6e:	4618      	mov	r0, r3
 8006f70:	f000 f9ee 	bl	8007350 <RTC_ByteToBcd2>
 8006f74:	4603      	mov	r3, r0
 8006f76:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006f78:	431c      	orrs	r4, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8006f7a:	68bb      	ldr	r3, [r7, #8]
 8006f7c:	789b      	ldrb	r3, [r3, #2]
 8006f7e:	4618      	mov	r0, r3
 8006f80:	f000 f9e6 	bl	8007350 <RTC_ByteToBcd2>
 8006f84:	4603      	mov	r3, r0
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006f86:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8006f8a:	68bb      	ldr	r3, [r7, #8]
 8006f8c:	78db      	ldrb	r3, [r3, #3]
 8006f8e:	059b      	lsls	r3, r3, #22
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8006f90:	ea42 0403 	orr.w	r4, r2, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8006f94:	68bb      	ldr	r3, [r7, #8]
 8006f96:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006f9a:	4618      	mov	r0, r3
 8006f9c:	f000 f9d8 	bl	8007350 <RTC_ByteToBcd2>
 8006fa0:	4603      	mov	r3, r0
 8006fa2:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8006fa4:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8006fa8:	68bb      	ldr	r3, [r7, #8]
 8006faa:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8006fac:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 8006fae:	68bb      	ldr	r3, [r7, #8]
 8006fb0:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006fb2:	4313      	orrs	r3, r2
 8006fb4:	617b      	str	r3, [r7, #20]
 8006fb6:	e02c      	b.n	8007012 <HAL_RTC_SetAlarm_IT+0x116>
    }
    else /* Format BCD */
    {
      if( sAlarm->AlarmMask != RTC_ALARMMASK_ALL )
 8006fb8:	68bb      	ldr	r3, [r7, #8]
 8006fba:	695b      	ldr	r3, [r3, #20]
 8006fbc:	f1b3 3f80 	cmp.w	r3, #2155905152	@ 0x80808080
 8006fc0:	d00d      	beq.n	8006fde <HAL_RTC_SetAlarm_IT+0xe2>
      {
        if( sAlarm->AlarmMask != RTC_ALARMMASK_HOURS )
 8006fc2:	68bb      	ldr	r3, [r7, #8]
 8006fc4:	695b      	ldr	r3, [r3, #20]
 8006fc6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006fca:	d008      	beq.n	8006fde <HAL_RTC_SetAlarm_IT+0xe2>
        {
          if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8006fcc:	4b4f      	ldr	r3, [pc, #316]	@ (800710c <HAL_RTC_SetAlarm_IT+0x210>)
 8006fce:	699b      	ldr	r3, [r3, #24]
 8006fd0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d102      	bne.n	8006fde <HAL_RTC_SetAlarm_IT+0xe2>
            assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
            assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
          }
          else
          {
            sAlarm->AlarmTime.TimeFormat = 0x00U;
 8006fd8:	68bb      	ldr	r3, [r7, #8]
 8006fda:	2200      	movs	r2, #0
 8006fdc:	70da      	strb	r2, [r3, #3]
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
        }
      }
#endif /* USE_FULL_ASSERT */
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006fde:	68bb      	ldr	r3, [r7, #8]
 8006fe0:	781b      	ldrb	r3, [r3, #0]
 8006fe2:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006fe4:	68bb      	ldr	r3, [r7, #8]
 8006fe6:	785b      	ldrb	r3, [r3, #1]
 8006fe8:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006fea:	4313      	orrs	r3, r2
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8006fec:	68ba      	ldr	r2, [r7, #8]
 8006fee:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006ff0:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8006ff2:	68bb      	ldr	r3, [r7, #8]
 8006ff4:	78db      	ldrb	r3, [r3, #3]
 8006ff6:	059b      	lsls	r3, r3, #22
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8006ff8:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8006ffa:	68bb      	ldr	r3, [r7, #8]
 8006ffc:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8007000:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8007002:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8007004:	68bb      	ldr	r3, [r7, #8]
 8007006:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8007008:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 800700a:	68bb      	ldr	r3, [r7, #8]
 800700c:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800700e:	4313      	orrs	r3, r2
 8007010:	617b      	str	r3, [r7, #20]

    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007012:	4b3e      	ldr	r3, [pc, #248]	@ (800710c <HAL_RTC_SetAlarm_IT+0x210>)
 8007014:	22ca      	movs	r2, #202	@ 0xca
 8007016:	625a      	str	r2, [r3, #36]	@ 0x24
 8007018:	4b3c      	ldr	r3, [pc, #240]	@ (800710c <HAL_RTC_SetAlarm_IT+0x210>)
 800701a:	2253      	movs	r2, #83	@ 0x53
 800701c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 800701e:	68bb      	ldr	r3, [r7, #8]
 8007020:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007022:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007026:	d12c      	bne.n	8007082 <HAL_RTC_SetAlarm_IT+0x186>
  {
    /* Disable the Alarm A interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8007028:	4b38      	ldr	r3, [pc, #224]	@ (800710c <HAL_RTC_SetAlarm_IT+0x210>)
 800702a:	699b      	ldr	r3, [r3, #24]
 800702c:	4a37      	ldr	r2, [pc, #220]	@ (800710c <HAL_RTC_SetAlarm_IT+0x210>)
 800702e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8007032:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm A */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8007034:	4b35      	ldr	r3, [pc, #212]	@ (800710c <HAL_RTC_SetAlarm_IT+0x210>)
 8007036:	2201      	movs	r2, #1
 8007038:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 800703a:	693b      	ldr	r3, [r7, #16]
 800703c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007040:	d107      	bne.n	8007052 <HAL_RTC_SetAlarm_IT+0x156>
    {
      RTC->ALRMASSR = sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr;
 8007042:	68bb      	ldr	r3, [r7, #8]
 8007044:	699a      	ldr	r2, [r3, #24]
 8007046:	68bb      	ldr	r3, [r7, #8]
 8007048:	69db      	ldr	r3, [r3, #28]
 800704a:	4930      	ldr	r1, [pc, #192]	@ (800710c <HAL_RTC_SetAlarm_IT+0x210>)
 800704c:	4313      	orrs	r3, r2
 800704e:	644b      	str	r3, [r1, #68]	@ 0x44
 8007050:	e006      	b.n	8007060 <HAL_RTC_SetAlarm_IT+0x164>
    }
    else
    {
      WRITE_REG(RTC->ALRMAR, tmpreg);
 8007052:	4a2e      	ldr	r2, [pc, #184]	@ (800710c <HAL_RTC_SetAlarm_IT+0x210>)
 8007054:	697b      	ldr	r3, [r7, #20]
 8007056:	6413      	str	r3, [r2, #64]	@ 0x40
      WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask);
 8007058:	4a2c      	ldr	r2, [pc, #176]	@ (800710c <HAL_RTC_SetAlarm_IT+0x210>)
 800705a:	68bb      	ldr	r3, [r7, #8]
 800705c:	699b      	ldr	r3, [r3, #24]
 800705e:	6453      	str	r3, [r2, #68]	@ 0x44
    }

    WRITE_REG(RTC->ALRABINR, sAlarm->AlarmTime.SubSeconds);
 8007060:	4a2a      	ldr	r2, [pc, #168]	@ (800710c <HAL_RTC_SetAlarm_IT+0x210>)
 8007062:	68bb      	ldr	r3, [r7, #8]
 8007064:	685b      	ldr	r3, [r3, #4]
 8007066:	6713      	str	r3, [r2, #112]	@ 0x70

    /* Store in the handle the Alarm A enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800706c:	f043 0201 	orr.w	r2, r3, #1
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8007074:	4b25      	ldr	r3, [pc, #148]	@ (800710c <HAL_RTC_SetAlarm_IT+0x210>)
 8007076:	699b      	ldr	r3, [r3, #24]
 8007078:	4a24      	ldr	r2, [pc, #144]	@ (800710c <HAL_RTC_SetAlarm_IT+0x210>)
 800707a:	f443 5388 	orr.w	r3, r3, #4352	@ 0x1100
 800707e:	6193      	str	r3, [r2, #24]
 8007080:	e02b      	b.n	80070da <HAL_RTC_SetAlarm_IT+0x1de>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8007082:	4b22      	ldr	r3, [pc, #136]	@ (800710c <HAL_RTC_SetAlarm_IT+0x210>)
 8007084:	699b      	ldr	r3, [r3, #24]
 8007086:	4a21      	ldr	r2, [pc, #132]	@ (800710c <HAL_RTC_SetAlarm_IT+0x210>)
 8007088:	f423 5308 	bic.w	r3, r3, #8704	@ 0x2200
 800708c:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm B */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 800708e:	4b1f      	ldr	r3, [pc, #124]	@ (800710c <HAL_RTC_SetAlarm_IT+0x210>)
 8007090:	2202      	movs	r2, #2
 8007092:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 8007094:	693b      	ldr	r3, [r7, #16]
 8007096:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800709a:	d107      	bne.n	80070ac <HAL_RTC_SetAlarm_IT+0x1b0>
    {
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
 800709c:	68bb      	ldr	r3, [r7, #8]
 800709e:	699a      	ldr	r2, [r3, #24]
 80070a0:	68bb      	ldr	r3, [r7, #8]
 80070a2:	69db      	ldr	r3, [r3, #28]
 80070a4:	4919      	ldr	r1, [pc, #100]	@ (800710c <HAL_RTC_SetAlarm_IT+0x210>)
 80070a6:	4313      	orrs	r3, r2
 80070a8:	64cb      	str	r3, [r1, #76]	@ 0x4c
 80070aa:	e006      	b.n	80070ba <HAL_RTC_SetAlarm_IT+0x1be>
    }
    else
    {
      WRITE_REG(RTC->ALRMBR, tmpreg);
 80070ac:	4a17      	ldr	r2, [pc, #92]	@ (800710c <HAL_RTC_SetAlarm_IT+0x210>)
 80070ae:	697b      	ldr	r3, [r7, #20]
 80070b0:	6493      	str	r3, [r2, #72]	@ 0x48
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask);
 80070b2:	4a16      	ldr	r2, [pc, #88]	@ (800710c <HAL_RTC_SetAlarm_IT+0x210>)
 80070b4:	68bb      	ldr	r3, [r7, #8]
 80070b6:	699b      	ldr	r3, [r3, #24]
 80070b8:	64d3      	str	r3, [r2, #76]	@ 0x4c
    }

    WRITE_REG(RTC->ALRBBINR, sAlarm->AlarmTime.SubSeconds);
 80070ba:	4a14      	ldr	r2, [pc, #80]	@ (800710c <HAL_RTC_SetAlarm_IT+0x210>)
 80070bc:	68bb      	ldr	r3, [r7, #8]
 80070be:	685b      	ldr	r3, [r3, #4]
 80070c0:	6753      	str	r3, [r2, #116]	@ 0x74

    /* Store in the handle the Alarm B enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070c6:	f043 0202 	orr.w	r2, r3, #2
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 80070ce:	4b0f      	ldr	r3, [pc, #60]	@ (800710c <HAL_RTC_SetAlarm_IT+0x210>)
 80070d0:	699b      	ldr	r3, [r3, #24]
 80070d2:	4a0e      	ldr	r2, [pc, #56]	@ (800710c <HAL_RTC_SetAlarm_IT+0x210>)
 80070d4:	f443 5308 	orr.w	r3, r3, #8704	@ 0x2200
 80070d8:	6193      	str	r3, [r2, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 80070da:	4b0d      	ldr	r3, [pc, #52]	@ (8007110 <HAL_RTC_SetAlarm_IT+0x214>)
 80070dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80070e0:	4a0b      	ldr	r2, [pc, #44]	@ (8007110 <HAL_RTC_SetAlarm_IT+0x214>)
 80070e2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80070e6:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80070ea:	4b08      	ldr	r3, [pc, #32]	@ (800710c <HAL_RTC_SetAlarm_IT+0x210>)
 80070ec:	22ff      	movs	r2, #255	@ 0xff
 80070ee:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	2201      	movs	r2, #1
 80070f4:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	2200      	movs	r2, #0
 80070fc:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8007100:	2300      	movs	r3, #0
}
 8007102:	4618      	mov	r0, r3
 8007104:	371c      	adds	r7, #28
 8007106:	46bd      	mov	sp, r7
 8007108:	bd90      	pop	{r4, r7, pc}
 800710a:	bf00      	nop
 800710c:	40002800 	.word	0x40002800
 8007110:	58000800 	.word	0x58000800

08007114 <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 8007114:	b480      	push	{r7}
 8007116:	b083      	sub	sp, #12
 8007118:	af00      	add	r7, sp, #0
 800711a:	6078      	str	r0, [r7, #4]
 800711c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8007124:	2b01      	cmp	r3, #1
 8007126:	d101      	bne.n	800712c <HAL_RTC_DeactivateAlarm+0x18>
 8007128:	2302      	movs	r3, #2
 800712a:	e048      	b.n	80071be <HAL_RTC_DeactivateAlarm+0xaa>
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	2201      	movs	r2, #1
 8007130:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	2202      	movs	r2, #2
 8007138:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800713c:	4b22      	ldr	r3, [pc, #136]	@ (80071c8 <HAL_RTC_DeactivateAlarm+0xb4>)
 800713e:	22ca      	movs	r2, #202	@ 0xca
 8007140:	625a      	str	r2, [r3, #36]	@ 0x24
 8007142:	4b21      	ldr	r3, [pc, #132]	@ (80071c8 <HAL_RTC_DeactivateAlarm+0xb4>)
 8007144:	2253      	movs	r2, #83	@ 0x53
 8007146:	625a      	str	r2, [r3, #36]	@ 0x24

  if (Alarm == RTC_ALARM_A)
 8007148:	683b      	ldr	r3, [r7, #0]
 800714a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800714e:	d115      	bne.n	800717c <HAL_RTC_DeactivateAlarm+0x68>
  {
    /* AlarmA, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8007150:	4b1d      	ldr	r3, [pc, #116]	@ (80071c8 <HAL_RTC_DeactivateAlarm+0xb4>)
 8007152:	699b      	ldr	r3, [r3, #24]
 8007154:	4a1c      	ldr	r2, [pc, #112]	@ (80071c8 <HAL_RTC_DeactivateAlarm+0xb4>)
 8007156:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800715a:	6193      	str	r3, [r2, #24]

    /* AlarmA, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMASSR, RTC_ALRMASSR_SSCLR);
 800715c:	4b1a      	ldr	r3, [pc, #104]	@ (80071c8 <HAL_RTC_DeactivateAlarm+0xb4>)
 800715e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007160:	4a19      	ldr	r2, [pc, #100]	@ (80071c8 <HAL_RTC_DeactivateAlarm+0xb4>)
 8007162:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007166:	6453      	str	r3, [r2, #68]	@ 0x44

    /* Store in the handle the Alarm A disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800716c:	f023 0201 	bic.w	r2, r3, #1
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Clear AlarmA flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8007174:	4b14      	ldr	r3, [pc, #80]	@ (80071c8 <HAL_RTC_DeactivateAlarm+0xb4>)
 8007176:	2201      	movs	r2, #1
 8007178:	65da      	str	r2, [r3, #92]	@ 0x5c
 800717a:	e014      	b.n	80071a6 <HAL_RTC_DeactivateAlarm+0x92>
  }
  else
  {
    /* AlarmB, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 800717c:	4b12      	ldr	r3, [pc, #72]	@ (80071c8 <HAL_RTC_DeactivateAlarm+0xb4>)
 800717e:	699b      	ldr	r3, [r3, #24]
 8007180:	4a11      	ldr	r2, [pc, #68]	@ (80071c8 <HAL_RTC_DeactivateAlarm+0xb4>)
 8007182:	f423 5308 	bic.w	r3, r3, #8704	@ 0x2200
 8007186:	6193      	str	r3, [r2, #24]

    /* AlarmB, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMBSSR, RTC_ALRMBSSR_SSCLR);
 8007188:	4b0f      	ldr	r3, [pc, #60]	@ (80071c8 <HAL_RTC_DeactivateAlarm+0xb4>)
 800718a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800718c:	4a0e      	ldr	r2, [pc, #56]	@ (80071c8 <HAL_RTC_DeactivateAlarm+0xb4>)
 800718e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007192:	64d3      	str	r3, [r2, #76]	@ 0x4c

    /* Store in the handle the Alarm B disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007198:	f023 0202 	bic.w	r2, r3, #2
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Clear AlarmB flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 80071a0:	4b09      	ldr	r3, [pc, #36]	@ (80071c8 <HAL_RTC_DeactivateAlarm+0xb4>)
 80071a2:	2202      	movs	r2, #2
 80071a4:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80071a6:	4b08      	ldr	r3, [pc, #32]	@ (80071c8 <HAL_RTC_DeactivateAlarm+0xb4>)
 80071a8:	22ff      	movs	r2, #255	@ 0xff
 80071aa:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	2201      	movs	r2, #1
 80071b0:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2200      	movs	r2, #0
 80071b8:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 80071bc:	2300      	movs	r3, #0
}
 80071be:	4618      	mov	r0, r3
 80071c0:	370c      	adds	r7, #12
 80071c2:	46bd      	mov	sp, r7
 80071c4:	bc80      	pop	{r7}
 80071c6:	4770      	bx	lr
 80071c8:	40002800 	.word	0x40002800

080071cc <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80071cc:	b580      	push	{r7, lr}
 80071ce:	b084      	sub	sp, #16
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = READ_REG(RTC->MISR) & READ_REG(hrtc->IsEnabled.RtcFeatures);
 80071d4:	4b11      	ldr	r3, [pc, #68]	@ (800721c <HAL_RTC_AlarmIRQHandler+0x50>)
 80071d6:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80071dc:	4013      	ands	r3, r2
 80071de:	60fb      	str	r3, [r7, #12]

  if ((tmp & RTC_MISR_ALRAMF) != 0U)
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	f003 0301 	and.w	r3, r3, #1
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d005      	beq.n	80071f6 <HAL_RTC_AlarmIRQHandler+0x2a>
  {
    /* Clear the AlarmA interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 80071ea:	4b0c      	ldr	r3, [pc, #48]	@ (800721c <HAL_RTC_AlarmIRQHandler+0x50>)
 80071ec:	2201      	movs	r2, #1
 80071ee:	65da      	str	r2, [r3, #92]	@ 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmAEventCallback(hrtc);
#else
    HAL_RTC_AlarmAEventCallback(hrtc);
 80071f0:	6878      	ldr	r0, [r7, #4]
 80071f2:	f7fb faee 	bl	80027d2 <HAL_RTC_AlarmAEventCallback>
#endif
  }

  if ((tmp & RTC_MISR_ALRBMF) != 0U)
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	f003 0302 	and.w	r3, r3, #2
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d005      	beq.n	800720c <HAL_RTC_AlarmIRQHandler+0x40>
  {
    /* Clear the AlarmB interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8007200:	4b06      	ldr	r3, [pc, #24]	@ (800721c <HAL_RTC_AlarmIRQHandler+0x50>)
 8007202:	2202      	movs	r2, #2
 8007204:	65da      	str	r2, [r3, #92]	@ 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmBEventCallback(hrtc);
#else
    HAL_RTCEx_AlarmBEventCallback(hrtc);
 8007206:	6878      	ldr	r0, [r7, #4]
 8007208:	f000 f94a 	bl	80074a0 <HAL_RTCEx_AlarmBEventCallback>
#endif
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	2201      	movs	r2, #1
 8007210:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
}
 8007214:	bf00      	nop
 8007216:	3710      	adds	r7, #16
 8007218:	46bd      	mov	sp, r7
 800721a:	bd80      	pop	{r7, pc}
 800721c:	40002800 	.word	0x40002800

08007220 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8007220:	b580      	push	{r7, lr}
 8007222:	b084      	sub	sp, #16
 8007224:	af00      	add	r7, sp, #0
 8007226:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 8007228:	4b0f      	ldr	r3, [pc, #60]	@ (8007268 <HAL_RTC_WaitForSynchro+0x48>)
 800722a:	68db      	ldr	r3, [r3, #12]
 800722c:	4a0e      	ldr	r2, [pc, #56]	@ (8007268 <HAL_RTC_WaitForSynchro+0x48>)
 800722e:	f023 0320 	bic.w	r3, r3, #32
 8007232:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8007234:	f7fa ffe0 	bl	80021f8 <HAL_GetTick>
 8007238:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800723a:	e009      	b.n	8007250 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800723c:	f7fa ffdc 	bl	80021f8 <HAL_GetTick>
 8007240:	4602      	mov	r2, r0
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	1ad3      	subs	r3, r2, r3
 8007246:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800724a:	d901      	bls.n	8007250 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 800724c:	2303      	movs	r3, #3
 800724e:	e006      	b.n	800725e <HAL_RTC_WaitForSynchro+0x3e>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8007250:	4b05      	ldr	r3, [pc, #20]	@ (8007268 <HAL_RTC_WaitForSynchro+0x48>)
 8007252:	68db      	ldr	r3, [r3, #12]
 8007254:	f003 0320 	and.w	r3, r3, #32
 8007258:	2b00      	cmp	r3, #0
 800725a:	d0ef      	beq.n	800723c <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 800725c:	2300      	movs	r3, #0
}
 800725e:	4618      	mov	r0, r3
 8007260:	3710      	adds	r7, #16
 8007262:	46bd      	mov	sp, r7
 8007264:	bd80      	pop	{r7, pc}
 8007266:	bf00      	nop
 8007268:	40002800 	.word	0x40002800

0800726c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800726c:	b580      	push	{r7, lr}
 800726e:	b084      	sub	sp, #16
 8007270:	af00      	add	r7, sp, #0
 8007272:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007274:	2300      	movs	r3, #0
 8007276:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8007278:	4b15      	ldr	r3, [pc, #84]	@ (80072d0 <RTC_EnterInitMode+0x64>)
 800727a:	68db      	ldr	r3, [r3, #12]
 800727c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007280:	2b00      	cmp	r3, #0
 8007282:	d120      	bne.n	80072c6 <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8007284:	4b12      	ldr	r3, [pc, #72]	@ (80072d0 <RTC_EnterInitMode+0x64>)
 8007286:	68db      	ldr	r3, [r3, #12]
 8007288:	4a11      	ldr	r2, [pc, #68]	@ (80072d0 <RTC_EnterInitMode+0x64>)
 800728a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800728e:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 8007290:	f7fa ffb2 	bl	80021f8 <HAL_GetTick>
 8007294:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8007296:	e00d      	b.n	80072b4 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8007298:	f7fa ffae 	bl	80021f8 <HAL_GetTick>
 800729c:	4602      	mov	r2, r0
 800729e:	68bb      	ldr	r3, [r7, #8]
 80072a0:	1ad3      	subs	r3, r2, r3
 80072a2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80072a6:	d905      	bls.n	80072b4 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 80072a8:	2303      	movs	r3, #3
 80072aa:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	2203      	movs	r2, #3
 80072b0:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80072b4:	4b06      	ldr	r3, [pc, #24]	@ (80072d0 <RTC_EnterInitMode+0x64>)
 80072b6:	68db      	ldr	r3, [r3, #12]
 80072b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d102      	bne.n	80072c6 <RTC_EnterInitMode+0x5a>
 80072c0:	7bfb      	ldrb	r3, [r7, #15]
 80072c2:	2b03      	cmp	r3, #3
 80072c4:	d1e8      	bne.n	8007298 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 80072c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80072c8:	4618      	mov	r0, r3
 80072ca:	3710      	adds	r7, #16
 80072cc:	46bd      	mov	sp, r7
 80072ce:	bd80      	pop	{r7, pc}
 80072d0:	40002800 	.word	0x40002800

080072d4 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80072d4:	b580      	push	{r7, lr}
 80072d6:	b084      	sub	sp, #16
 80072d8:	af00      	add	r7, sp, #0
 80072da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80072dc:	2300      	movs	r3, #0
 80072de:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 80072e0:	4b1a      	ldr	r3, [pc, #104]	@ (800734c <RTC_ExitInitMode+0x78>)
 80072e2:	68db      	ldr	r3, [r3, #12]
 80072e4:	4a19      	ldr	r2, [pc, #100]	@ (800734c <RTC_ExitInitMode+0x78>)
 80072e6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80072ea:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80072ec:	4b17      	ldr	r3, [pc, #92]	@ (800734c <RTC_ExitInitMode+0x78>)
 80072ee:	699b      	ldr	r3, [r3, #24]
 80072f0:	f003 0320 	and.w	r3, r3, #32
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d10c      	bne.n	8007312 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80072f8:	6878      	ldr	r0, [r7, #4]
 80072fa:	f7ff ff91 	bl	8007220 <HAL_RTC_WaitForSynchro>
 80072fe:	4603      	mov	r3, r0
 8007300:	2b00      	cmp	r3, #0
 8007302:	d01e      	beq.n	8007342 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	2203      	movs	r2, #3
 8007308:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 800730c:	2303      	movs	r3, #3
 800730e:	73fb      	strb	r3, [r7, #15]
 8007310:	e017      	b.n	8007342 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8007312:	4b0e      	ldr	r3, [pc, #56]	@ (800734c <RTC_ExitInitMode+0x78>)
 8007314:	699b      	ldr	r3, [r3, #24]
 8007316:	4a0d      	ldr	r2, [pc, #52]	@ (800734c <RTC_ExitInitMode+0x78>)
 8007318:	f023 0320 	bic.w	r3, r3, #32
 800731c:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800731e:	6878      	ldr	r0, [r7, #4]
 8007320:	f7ff ff7e 	bl	8007220 <HAL_RTC_WaitForSynchro>
 8007324:	4603      	mov	r3, r0
 8007326:	2b00      	cmp	r3, #0
 8007328:	d005      	beq.n	8007336 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	2203      	movs	r2, #3
 800732e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 8007332:	2303      	movs	r3, #3
 8007334:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8007336:	4b05      	ldr	r3, [pc, #20]	@ (800734c <RTC_ExitInitMode+0x78>)
 8007338:	699b      	ldr	r3, [r3, #24]
 800733a:	4a04      	ldr	r2, [pc, #16]	@ (800734c <RTC_ExitInitMode+0x78>)
 800733c:	f043 0320 	orr.w	r3, r3, #32
 8007340:	6193      	str	r3, [r2, #24]
  }

  return status;
 8007342:	7bfb      	ldrb	r3, [r7, #15]
}
 8007344:	4618      	mov	r0, r3
 8007346:	3710      	adds	r7, #16
 8007348:	46bd      	mov	sp, r7
 800734a:	bd80      	pop	{r7, pc}
 800734c:	40002800 	.word	0x40002800

08007350 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8007350:	b480      	push	{r7}
 8007352:	b085      	sub	sp, #20
 8007354:	af00      	add	r7, sp, #0
 8007356:	4603      	mov	r3, r0
 8007358:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800735a:	2300      	movs	r3, #0
 800735c:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 800735e:	79fb      	ldrb	r3, [r7, #7]
 8007360:	72fb      	strb	r3, [r7, #11]

  while (tmp_Value >= 10U)
 8007362:	e005      	b.n	8007370 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	3301      	adds	r3, #1
 8007368:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 800736a:	7afb      	ldrb	r3, [r7, #11]
 800736c:	3b0a      	subs	r3, #10
 800736e:	72fb      	strb	r3, [r7, #11]
  while (tmp_Value >= 10U)
 8007370:	7afb      	ldrb	r3, [r7, #11]
 8007372:	2b09      	cmp	r3, #9
 8007374:	d8f6      	bhi.n	8007364 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	b2db      	uxtb	r3, r3
 800737a:	011b      	lsls	r3, r3, #4
 800737c:	b2da      	uxtb	r2, r3
 800737e:	7afb      	ldrb	r3, [r7, #11]
 8007380:	4313      	orrs	r3, r2
 8007382:	b2db      	uxtb	r3, r3
}
 8007384:	4618      	mov	r0, r3
 8007386:	3714      	adds	r7, #20
 8007388:	46bd      	mov	sp, r7
 800738a:	bc80      	pop	{r7}
 800738c:	4770      	bx	lr
	...

08007390 <HAL_RTCEx_EnableBypassShadow>:
  *         directly from the Calendar counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
 8007390:	b480      	push	{r7}
 8007392:	b083      	sub	sp, #12
 8007394:	af00      	add	r7, sp, #0
 8007396:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800739e:	2b01      	cmp	r3, #1
 80073a0:	d101      	bne.n	80073a6 <HAL_RTCEx_EnableBypassShadow+0x16>
 80073a2:	2302      	movs	r3, #2
 80073a4:	e01f      	b.n	80073e6 <HAL_RTCEx_EnableBypassShadow+0x56>
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	2201      	movs	r2, #1
 80073aa:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	2202      	movs	r2, #2
 80073b2:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80073b6:	4b0e      	ldr	r3, [pc, #56]	@ (80073f0 <HAL_RTCEx_EnableBypassShadow+0x60>)
 80073b8:	22ca      	movs	r2, #202	@ 0xca
 80073ba:	625a      	str	r2, [r3, #36]	@ 0x24
 80073bc:	4b0c      	ldr	r3, [pc, #48]	@ (80073f0 <HAL_RTCEx_EnableBypassShadow+0x60>)
 80073be:	2253      	movs	r2, #83	@ 0x53
 80073c0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the BYPSHAD bit */
  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80073c2:	4b0b      	ldr	r3, [pc, #44]	@ (80073f0 <HAL_RTCEx_EnableBypassShadow+0x60>)
 80073c4:	699b      	ldr	r3, [r3, #24]
 80073c6:	4a0a      	ldr	r2, [pc, #40]	@ (80073f0 <HAL_RTCEx_EnableBypassShadow+0x60>)
 80073c8:	f043 0320 	orr.w	r3, r3, #32
 80073cc:	6193      	str	r3, [r2, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80073ce:	4b08      	ldr	r3, [pc, #32]	@ (80073f0 <HAL_RTCEx_EnableBypassShadow+0x60>)
 80073d0:	22ff      	movs	r2, #255	@ 0xff
 80073d2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	2201      	movs	r2, #1
 80073d8:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	2200      	movs	r2, #0
 80073e0:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 80073e4:	2300      	movs	r3, #0
}
 80073e6:	4618      	mov	r0, r3
 80073e8:	370c      	adds	r7, #12
 80073ea:	46bd      	mov	sp, r7
 80073ec:	bc80      	pop	{r7}
 80073ee:	4770      	bx	lr
 80073f0:	40002800 	.word	0x40002800

080073f4 <HAL_RTCEx_SetSSRU_IT>:
  * @brief  Set SSR Underflow detection with Interrupt.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetSSRU_IT(RTC_HandleTypeDef *hrtc)
{
 80073f4:	b480      	push	{r7}
 80073f6:	b083      	sub	sp, #12
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8007402:	2b01      	cmp	r3, #1
 8007404:	d101      	bne.n	800740a <HAL_RTCEx_SetSSRU_IT+0x16>
 8007406:	2302      	movs	r3, #2
 8007408:	e027      	b.n	800745a <HAL_RTCEx_SetSSRU_IT+0x66>
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	2201      	movs	r2, #1
 800740e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	2202      	movs	r2, #2
 8007416:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800741a:	4b12      	ldr	r3, [pc, #72]	@ (8007464 <HAL_RTCEx_SetSSRU_IT+0x70>)
 800741c:	22ca      	movs	r2, #202	@ 0xca
 800741e:	625a      	str	r2, [r3, #36]	@ 0x24
 8007420:	4b10      	ldr	r3, [pc, #64]	@ (8007464 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8007422:	2253      	movs	r2, #83	@ 0x53
 8007424:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enable IT SSRU */
  __HAL_RTC_SSRU_ENABLE_IT(hrtc, RTC_IT_SSRU);
 8007426:	4b0f      	ldr	r3, [pc, #60]	@ (8007464 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8007428:	699b      	ldr	r3, [r3, #24]
 800742a:	4a0e      	ldr	r2, [pc, #56]	@ (8007464 <HAL_RTCEx_SetSSRU_IT+0x70>)
 800742c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007430:	6193      	str	r3, [r2, #24]

  /* RTC SSRU Interrupt Configuration: EXTI configuration */
  __HAL_RTC_SSRU_EXTI_ENABLE_IT();
 8007432:	4b0d      	ldr	r3, [pc, #52]	@ (8007468 <HAL_RTCEx_SetSSRU_IT+0x74>)
 8007434:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007438:	4a0b      	ldr	r2, [pc, #44]	@ (8007468 <HAL_RTCEx_SetSSRU_IT+0x74>)
 800743a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800743e:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007442:	4b08      	ldr	r3, [pc, #32]	@ (8007464 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8007444:	22ff      	movs	r2, #255	@ 0xff
 8007446:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	2201      	movs	r2, #1
 800744c:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	2200      	movs	r2, #0
 8007454:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8007458:	2300      	movs	r3, #0
}
 800745a:	4618      	mov	r0, r3
 800745c:	370c      	adds	r7, #12
 800745e:	46bd      	mov	sp, r7
 8007460:	bc80      	pop	{r7}
 8007462:	4770      	bx	lr
 8007464:	40002800 	.word	0x40002800
 8007468:	58000800 	.word	0x58000800

0800746c <HAL_RTCEx_SSRUIRQHandler>:
  * @brief  Handle SSR underflow interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_SSRUIRQHandler(RTC_HandleTypeDef *hrtc)
{
 800746c:	b580      	push	{r7, lr}
 800746e:	b082      	sub	sp, #8
 8007470:	af00      	add	r7, sp, #0
 8007472:	6078      	str	r0, [r7, #4]
  if ((RTC->MISR & RTC_MISR_SSRUMF) != 0u)
 8007474:	4b09      	ldr	r3, [pc, #36]	@ (800749c <HAL_RTCEx_SSRUIRQHandler+0x30>)
 8007476:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007478:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800747c:	2b00      	cmp	r3, #0
 800747e:	d005      	beq.n	800748c <HAL_RTCEx_SSRUIRQHandler+0x20>
  {
    /* Immediately clear flags */
    RTC->SCR = RTC_SCR_CSSRUF;
 8007480:	4b06      	ldr	r3, [pc, #24]	@ (800749c <HAL_RTCEx_SSRUIRQHandler+0x30>)
 8007482:	2240      	movs	r2, #64	@ 0x40
 8007484:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* SSRU callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call SSRUEvent registered Callback */
    hrtc->SSRUEventCallback(hrtc);
#else
    HAL_RTCEx_SSRUEventCallback(hrtc);
 8007486:	6878      	ldr	r0, [r7, #4]
 8007488:	f7fb f9ad 	bl	80027e6 <HAL_RTCEx_SSRUEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	2201      	movs	r2, #1
 8007490:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
}
 8007494:	bf00      	nop
 8007496:	3708      	adds	r7, #8
 8007498:	46bd      	mov	sp, r7
 800749a:	bd80      	pop	{r7, pc}
 800749c:	40002800 	.word	0x40002800

080074a0 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 80074a0:	b480      	push	{r7}
 80074a2:	b083      	sub	sp, #12
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 80074a8:	bf00      	nop
 80074aa:	370c      	adds	r7, #12
 80074ac:	46bd      	mov	sp, r7
 80074ae:	bc80      	pop	{r7}
 80074b0:	4770      	bx	lr
	...

080074b4 <HAL_RTCEx_BKUPWrite>:
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @param  Data Data to be written in the specified Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 80074b4:	b480      	push	{r7}
 80074b6:	b087      	sub	sp, #28
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	60f8      	str	r0, [r7, #12]
 80074bc:	60b9      	str	r1, [r7, #8]
 80074be:	607a      	str	r2, [r7, #4]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
 80074c0:	4b07      	ldr	r3, [pc, #28]	@ (80074e0 <HAL_RTCEx_BKUPWrite+0x2c>)
 80074c2:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 80074c4:	68bb      	ldr	r3, [r7, #8]
 80074c6:	009b      	lsls	r3, r3, #2
 80074c8:	697a      	ldr	r2, [r7, #20]
 80074ca:	4413      	add	r3, r2
 80074cc:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 80074ce:	697b      	ldr	r3, [r7, #20]
 80074d0:	687a      	ldr	r2, [r7, #4]
 80074d2:	601a      	str	r2, [r3, #0]
}
 80074d4:	bf00      	nop
 80074d6:	371c      	adds	r7, #28
 80074d8:	46bd      	mov	sp, r7
 80074da:	bc80      	pop	{r7}
 80074dc:	4770      	bx	lr
 80074de:	bf00      	nop
 80074e0:	4000b100 	.word	0x4000b100

080074e4 <HAL_RTCEx_BKUPRead>:
  * @param  BackupRegister RTC Backup data Register number.
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 80074e4:	b480      	push	{r7}
 80074e6:	b085      	sub	sp, #20
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	6078      	str	r0, [r7, #4]
 80074ec:	6039      	str	r1, [r7, #0]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
 80074ee:	4b07      	ldr	r3, [pc, #28]	@ (800750c <HAL_RTCEx_BKUPRead+0x28>)
 80074f0:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 80074f2:	683b      	ldr	r3, [r7, #0]
 80074f4:	009b      	lsls	r3, r3, #2
 80074f6:	68fa      	ldr	r2, [r7, #12]
 80074f8:	4413      	add	r3, r2
 80074fa:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	681b      	ldr	r3, [r3, #0]
}
 8007500:	4618      	mov	r0, r3
 8007502:	3714      	adds	r7, #20
 8007504:	46bd      	mov	sp, r7
 8007506:	bc80      	pop	{r7}
 8007508:	4770      	bx	lr
 800750a:	bf00      	nop
 800750c:	4000b100 	.word	0x4000b100

08007510 <LL_PWR_SetRadioBusyTrigger>:
{
 8007510:	b480      	push	{r7}
 8007512:	b083      	sub	sp, #12
 8007514:	af00      	add	r7, sp, #0
 8007516:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 8007518:	4b06      	ldr	r3, [pc, #24]	@ (8007534 <LL_PWR_SetRadioBusyTrigger+0x24>)
 800751a:	689b      	ldr	r3, [r3, #8]
 800751c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8007520:	4904      	ldr	r1, [pc, #16]	@ (8007534 <LL_PWR_SetRadioBusyTrigger+0x24>)
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	4313      	orrs	r3, r2
 8007526:	608b      	str	r3, [r1, #8]
}
 8007528:	bf00      	nop
 800752a:	370c      	adds	r7, #12
 800752c:	46bd      	mov	sp, r7
 800752e:	bc80      	pop	{r7}
 8007530:	4770      	bx	lr
 8007532:	bf00      	nop
 8007534:	58000400 	.word	0x58000400

08007538 <LL_PWR_UnselectSUBGHZSPI_NSS>:
{
 8007538:	b480      	push	{r7}
 800753a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 800753c:	4b05      	ldr	r3, [pc, #20]	@ (8007554 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 800753e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007542:	4a04      	ldr	r2, [pc, #16]	@ (8007554 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8007544:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007548:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800754c:	bf00      	nop
 800754e:	46bd      	mov	sp, r7
 8007550:	bc80      	pop	{r7}
 8007552:	4770      	bx	lr
 8007554:	58000400 	.word	0x58000400

08007558 <LL_PWR_SelectSUBGHZSPI_NSS>:
{
 8007558:	b480      	push	{r7}
 800755a:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 800755c:	4b05      	ldr	r3, [pc, #20]	@ (8007574 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 800755e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007562:	4a04      	ldr	r2, [pc, #16]	@ (8007574 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8007564:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007568:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800756c:	bf00      	nop
 800756e:	46bd      	mov	sp, r7
 8007570:	bc80      	pop	{r7}
 8007572:	4770      	bx	lr
 8007574:	58000400 	.word	0x58000400

08007578 <LL_PWR_ClearFlag_RFBUSY>:
{
 8007578:	b480      	push	{r7}
 800757a:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 800757c:	4b03      	ldr	r3, [pc, #12]	@ (800758c <LL_PWR_ClearFlag_RFBUSY+0x14>)
 800757e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007582:	619a      	str	r2, [r3, #24]
}
 8007584:	bf00      	nop
 8007586:	46bd      	mov	sp, r7
 8007588:	bc80      	pop	{r7}
 800758a:	4770      	bx	lr
 800758c:	58000400 	.word	0x58000400

08007590 <LL_PWR_IsActiveFlag_RFBUSYS>:
{
 8007590:	b480      	push	{r7}
 8007592:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 8007594:	4b06      	ldr	r3, [pc, #24]	@ (80075b0 <LL_PWR_IsActiveFlag_RFBUSYS+0x20>)
 8007596:	695b      	ldr	r3, [r3, #20]
 8007598:	f003 0302 	and.w	r3, r3, #2
 800759c:	2b02      	cmp	r3, #2
 800759e:	d101      	bne.n	80075a4 <LL_PWR_IsActiveFlag_RFBUSYS+0x14>
 80075a0:	2301      	movs	r3, #1
 80075a2:	e000      	b.n	80075a6 <LL_PWR_IsActiveFlag_RFBUSYS+0x16>
 80075a4:	2300      	movs	r3, #0
}
 80075a6:	4618      	mov	r0, r3
 80075a8:	46bd      	mov	sp, r7
 80075aa:	bc80      	pop	{r7}
 80075ac:	4770      	bx	lr
 80075ae:	bf00      	nop
 80075b0:	58000400 	.word	0x58000400

080075b4 <LL_PWR_IsActiveFlag_RFBUSYMS>:
{
 80075b4:	b480      	push	{r7}
 80075b6:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 80075b8:	4b06      	ldr	r3, [pc, #24]	@ (80075d4 <LL_PWR_IsActiveFlag_RFBUSYMS+0x20>)
 80075ba:	695b      	ldr	r3, [r3, #20]
 80075bc:	f003 0304 	and.w	r3, r3, #4
 80075c0:	2b04      	cmp	r3, #4
 80075c2:	d101      	bne.n	80075c8 <LL_PWR_IsActiveFlag_RFBUSYMS+0x14>
 80075c4:	2301      	movs	r3, #1
 80075c6:	e000      	b.n	80075ca <LL_PWR_IsActiveFlag_RFBUSYMS+0x16>
 80075c8:	2300      	movs	r3, #0
}
 80075ca:	4618      	mov	r0, r3
 80075cc:	46bd      	mov	sp, r7
 80075ce:	bc80      	pop	{r7}
 80075d0:	4770      	bx	lr
 80075d2:	bf00      	nop
 80075d4:	58000400 	.word	0x58000400

080075d8 <LL_RCC_RF_DisableReset>:
{
 80075d8:	b480      	push	{r7}
 80075da:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 80075dc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80075e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80075e4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80075e8:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80075ec:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 80075f0:	bf00      	nop
 80075f2:	46bd      	mov	sp, r7
 80075f4:	bc80      	pop	{r7}
 80075f6:	4770      	bx	lr

080075f8 <LL_RCC_IsRFUnderReset>:
{
 80075f8:	b480      	push	{r7}
 80075fa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 80075fc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007600:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007604:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007608:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800760c:	d101      	bne.n	8007612 <LL_RCC_IsRFUnderReset+0x1a>
 800760e:	2301      	movs	r3, #1
 8007610:	e000      	b.n	8007614 <LL_RCC_IsRFUnderReset+0x1c>
 8007612:	2300      	movs	r3, #0
}
 8007614:	4618      	mov	r0, r3
 8007616:	46bd      	mov	sp, r7
 8007618:	bc80      	pop	{r7}
 800761a:	4770      	bx	lr

0800761c <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 800761c:	b480      	push	{r7}
 800761e:	b083      	sub	sp, #12
 8007620:	af00      	add	r7, sp, #0
 8007622:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8007624:	4b06      	ldr	r3, [pc, #24]	@ (8007640 <LL_EXTI_EnableIT_32_63+0x24>)
 8007626:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 800762a:	4905      	ldr	r1, [pc, #20]	@ (8007640 <LL_EXTI_EnableIT_32_63+0x24>)
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	4313      	orrs	r3, r2
 8007630:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8007634:	bf00      	nop
 8007636:	370c      	adds	r7, #12
 8007638:	46bd      	mov	sp, r7
 800763a:	bc80      	pop	{r7}
 800763c:	4770      	bx	lr
 800763e:	bf00      	nop
 8007640:	58000800 	.word	0x58000800

08007644 <HAL_SUBGHZ_Init>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SUBGHZ_Init(SUBGHZ_HandleTypeDef *hsubghz)
{
 8007644:	b580      	push	{r7, lr}
 8007646:	b084      	sub	sp, #16
 8007648:	af00      	add	r7, sp, #0
 800764a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;

  /* Check the hsubghz handle allocation */
  if (hsubghz == NULL)
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	2b00      	cmp	r3, #0
 8007650:	d103      	bne.n	800765a <HAL_SUBGHZ_Init+0x16>
  {
    status = HAL_ERROR;
 8007652:	2301      	movs	r3, #1
 8007654:	73fb      	strb	r3, [r7, #15]
    return status;
 8007656:	7bfb      	ldrb	r3, [r7, #15]
 8007658:	e04b      	b.n	80076f2 <HAL_SUBGHZ_Init+0xae>
  }
  else
  {
    status = HAL_OK;
 800765a:	2300      	movs	r3, #0
 800765c:	73fb      	strb	r3, [r7, #15]
  }

  assert_param(IS_SUBGHZSPI_BAUDRATE_PRESCALER(hsubghz->Init.BaudratePrescaler));

  if (hsubghz->State == HAL_SUBGHZ_STATE_RESET)
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	799b      	ldrb	r3, [r3, #6]
 8007662:	b2db      	uxtb	r3, r3
 8007664:	2b00      	cmp	r3, #0
 8007666:	d105      	bne.n	8007674 <HAL_SUBGHZ_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsubghz->Lock = HAL_UNLOCKED;
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	2200      	movs	r2, #0
 800766c:	715a      	strb	r2, [r3, #5]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hsubghz->MspInitCallback(hsubghz);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SUBGHZ_MspInit(hsubghz);
 800766e:	6878      	ldr	r0, [r7, #4]
 8007670:	f7fa fc1a 	bl	8001ea8 <HAL_SUBGHZ_MspInit>
#endif /* USE_HAL_ SUBGHZ_REGISTER_CALLBACKS */
  }

  hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	2202      	movs	r2, #2
 8007678:	719a      	strb	r2, [r3, #6]

  /* De-asserts the reset signal of the Radio peripheral */
  LL_RCC_RF_DisableReset();
 800767a:	f7ff ffad 	bl	80075d8 <LL_RCC_RF_DisableReset>

  /* Verify that Radio in reset status flag is set */
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800767e:	4b1f      	ldr	r3, [pc, #124]	@ (80076fc <HAL_SUBGHZ_Init+0xb8>)
 8007680:	681a      	ldr	r2, [r3, #0]
 8007682:	4613      	mov	r3, r2
 8007684:	00db      	lsls	r3, r3, #3
 8007686:	1a9b      	subs	r3, r3, r2
 8007688:	009b      	lsls	r3, r3, #2
 800768a:	0cdb      	lsrs	r3, r3, #19
 800768c:	2264      	movs	r2, #100	@ 0x64
 800768e:	fb02 f303 	mul.w	r3, r2, r3
 8007692:	60bb      	str	r3, [r7, #8]

  do
  {
    if (count == 0U)
 8007694:	68bb      	ldr	r3, [r7, #8]
 8007696:	2b00      	cmp	r3, #0
 8007698:	d105      	bne.n	80076a6 <HAL_SUBGHZ_Init+0x62>
    {
      status  = HAL_ERROR;
 800769a:	2301      	movs	r3, #1
 800769c:	73fb      	strb	r3, [r7, #15]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	2201      	movs	r2, #1
 80076a2:	609a      	str	r2, [r3, #8]
      break;
 80076a4:	e007      	b.n	80076b6 <HAL_SUBGHZ_Init+0x72>
    }
    count--;
 80076a6:	68bb      	ldr	r3, [r7, #8]
 80076a8:	3b01      	subs	r3, #1
 80076aa:	60bb      	str	r3, [r7, #8]
  } while (LL_RCC_IsRFUnderReset() != 0UL);
 80076ac:	f7ff ffa4 	bl	80075f8 <LL_RCC_IsRFUnderReset>
 80076b0:	4603      	mov	r3, r0
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d1ee      	bne.n	8007694 <HAL_SUBGHZ_Init+0x50>

  /* Asserts the reset signal of the Radio peripheral */
  LL_PWR_UnselectSUBGHZSPI_NSS();
 80076b6:	f7ff ff3f 	bl	8007538 <LL_PWR_UnselectSUBGHZSPI_NSS>

  /* Enable wakeup signal of the Radio peripheral */
  LL_C2_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
#else
  /* Enable EXTI 44 : Radio IRQ ITs for CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
 80076ba:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 80076be:	f7ff ffad 	bl	800761c <LL_EXTI_EnableIT_32_63>

  /* Enable wakeup signal of the Radio peripheral */
  LL_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
 80076c2:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 80076c6:	f7ff ff23 	bl	8007510 <LL_PWR_SetRadioBusyTrigger>
#endif /* CM0PLUS */

  /* Clear Pending Flag */
  LL_PWR_ClearFlag_RFBUSY();
 80076ca:	f7ff ff55 	bl	8007578 <LL_PWR_ClearFlag_RFBUSY>

  if (status == HAL_OK)
 80076ce:	7bfb      	ldrb	r3, [r7, #15]
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d10a      	bne.n	80076ea <HAL_SUBGHZ_Init+0xa6>
  {
    /* Initialize SUBGHZSPI Peripheral */
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	4618      	mov	r0, r3
 80076da:	f000 faa5 	bl	8007c28 <SUBGHZSPI_Init>

    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	2201      	movs	r2, #1
 80076e2:	711a      	strb	r2, [r3, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	2200      	movs	r2, #0
 80076e8:	609a      	str	r2, [r3, #8]
  }
  hsubghz->State     = HAL_SUBGHZ_STATE_READY;
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	2201      	movs	r2, #1
 80076ee:	719a      	strb	r2, [r3, #6]

  return status;
 80076f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80076f2:	4618      	mov	r0, r3
 80076f4:	3710      	adds	r7, #16
 80076f6:	46bd      	mov	sp, r7
 80076f8:	bd80      	pop	{r7, pc}
 80076fa:	bf00      	nop
 80076fc:	20000000 	.word	0x20000000

08007700 <HAL_SUBGHZ_WriteRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                            uint16_t Address,
                                            uint8_t *pBuffer,
                                            uint16_t Size)
{
 8007700:	b580      	push	{r7, lr}
 8007702:	b086      	sub	sp, #24
 8007704:	af00      	add	r7, sp, #0
 8007706:	60f8      	str	r0, [r7, #12]
 8007708:	607a      	str	r2, [r7, #4]
 800770a:	461a      	mov	r2, r3
 800770c:	460b      	mov	r3, r1
 800770e:	817b      	strh	r3, [r7, #10]
 8007710:	4613      	mov	r3, r2
 8007712:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	799b      	ldrb	r3, [r3, #6]
 8007718:	b2db      	uxtb	r3, r3
 800771a:	2b01      	cmp	r3, #1
 800771c:	d14a      	bne.n	80077b4 <HAL_SUBGHZ_WriteRegisters+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	795b      	ldrb	r3, [r3, #5]
 8007722:	2b01      	cmp	r3, #1
 8007724:	d101      	bne.n	800772a <HAL_SUBGHZ_WriteRegisters+0x2a>
 8007726:	2302      	movs	r3, #2
 8007728:	e045      	b.n	80077b6 <HAL_SUBGHZ_WriteRegisters+0xb6>
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	2201      	movs	r2, #1
 800772e:	715a      	strb	r2, [r3, #5]

    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	2202      	movs	r2, #2
 8007734:	719a      	strb	r2, [r3, #6]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8007736:	68f8      	ldr	r0, [r7, #12]
 8007738:	f000 fb44 	bl	8007dc4 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 800773c:	f7ff ff0c 	bl	8007558 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 8007740:	210d      	movs	r1, #13
 8007742:	68f8      	ldr	r0, [r7, #12]
 8007744:	f000 fa90 	bl	8007c68 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8007748:	897b      	ldrh	r3, [r7, #10]
 800774a:	0a1b      	lsrs	r3, r3, #8
 800774c:	b29b      	uxth	r3, r3
 800774e:	b2db      	uxtb	r3, r3
 8007750:	4619      	mov	r1, r3
 8007752:	68f8      	ldr	r0, [r7, #12]
 8007754:	f000 fa88 	bl	8007c68 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8007758:	897b      	ldrh	r3, [r7, #10]
 800775a:	b2db      	uxtb	r3, r3
 800775c:	4619      	mov	r1, r3
 800775e:	68f8      	ldr	r0, [r7, #12]
 8007760:	f000 fa82 	bl	8007c68 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8007764:	2300      	movs	r3, #0
 8007766:	82bb      	strh	r3, [r7, #20]
 8007768:	e00a      	b.n	8007780 <HAL_SUBGHZ_WriteRegisters+0x80>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 800776a:	8abb      	ldrh	r3, [r7, #20]
 800776c:	687a      	ldr	r2, [r7, #4]
 800776e:	4413      	add	r3, r2
 8007770:	781b      	ldrb	r3, [r3, #0]
 8007772:	4619      	mov	r1, r3
 8007774:	68f8      	ldr	r0, [r7, #12]
 8007776:	f000 fa77 	bl	8007c68 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 800777a:	8abb      	ldrh	r3, [r7, #20]
 800777c:	3301      	adds	r3, #1
 800777e:	82bb      	strh	r3, [r7, #20]
 8007780:	8aba      	ldrh	r2, [r7, #20]
 8007782:	893b      	ldrh	r3, [r7, #8]
 8007784:	429a      	cmp	r2, r3
 8007786:	d3f0      	bcc.n	800776a <HAL_SUBGHZ_WriteRegisters+0x6a>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8007788:	f7ff fed6 	bl	8007538 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 800778c:	68f8      	ldr	r0, [r7, #12]
 800778e:	f000 fb3d 	bl	8007e0c <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	689b      	ldr	r3, [r3, #8]
 8007796:	2b00      	cmp	r3, #0
 8007798:	d002      	beq.n	80077a0 <HAL_SUBGHZ_WriteRegisters+0xa0>
    {
      status = HAL_ERROR;
 800779a:	2301      	movs	r3, #1
 800779c:	75fb      	strb	r3, [r7, #23]
 800779e:	e001      	b.n	80077a4 <HAL_SUBGHZ_WriteRegisters+0xa4>
    }
    else
    {
      status = HAL_OK;
 80077a0:	2300      	movs	r3, #0
 80077a2:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	2201      	movs	r2, #1
 80077a8:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	2200      	movs	r2, #0
 80077ae:	715a      	strb	r2, [r3, #5]

    return status;
 80077b0:	7dfb      	ldrb	r3, [r7, #23]
 80077b2:	e000      	b.n	80077b6 <HAL_SUBGHZ_WriteRegisters+0xb6>
  }
  else
  {
    return HAL_BUSY;
 80077b4:	2302      	movs	r3, #2
  }
}
 80077b6:	4618      	mov	r0, r3
 80077b8:	3718      	adds	r7, #24
 80077ba:	46bd      	mov	sp, r7
 80077bc:	bd80      	pop	{r7, pc}

080077be <HAL_SUBGHZ_ReadRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                           uint16_t Address,
                                           uint8_t *pBuffer,
                                           uint16_t Size)
{
 80077be:	b580      	push	{r7, lr}
 80077c0:	b088      	sub	sp, #32
 80077c2:	af00      	add	r7, sp, #0
 80077c4:	60f8      	str	r0, [r7, #12]
 80077c6:	607a      	str	r2, [r7, #4]
 80077c8:	461a      	mov	r2, r3
 80077ca:	460b      	mov	r3, r1
 80077cc:	817b      	strh	r3, [r7, #10]
 80077ce:	4613      	mov	r3, r2
 80077d0:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	799b      	ldrb	r3, [r3, #6]
 80077da:	b2db      	uxtb	r3, r3
 80077dc:	2b01      	cmp	r3, #1
 80077de:	d14a      	bne.n	8007876 <HAL_SUBGHZ_ReadRegisters+0xb8>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	795b      	ldrb	r3, [r3, #5]
 80077e4:	2b01      	cmp	r3, #1
 80077e6:	d101      	bne.n	80077ec <HAL_SUBGHZ_ReadRegisters+0x2e>
 80077e8:	2302      	movs	r3, #2
 80077ea:	e045      	b.n	8007878 <HAL_SUBGHZ_ReadRegisters+0xba>
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	2201      	movs	r2, #1
 80077f0:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80077f2:	68f8      	ldr	r0, [r7, #12]
 80077f4:	f000 fae6 	bl	8007dc4 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80077f8:	f7ff feae 	bl	8007558 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 80077fc:	211d      	movs	r1, #29
 80077fe:	68f8      	ldr	r0, [r7, #12]
 8007800:	f000 fa32 	bl	8007c68 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8007804:	897b      	ldrh	r3, [r7, #10]
 8007806:	0a1b      	lsrs	r3, r3, #8
 8007808:	b29b      	uxth	r3, r3
 800780a:	b2db      	uxtb	r3, r3
 800780c:	4619      	mov	r1, r3
 800780e:	68f8      	ldr	r0, [r7, #12]
 8007810:	f000 fa2a 	bl	8007c68 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8007814:	897b      	ldrh	r3, [r7, #10]
 8007816:	b2db      	uxtb	r3, r3
 8007818:	4619      	mov	r1, r3
 800781a:	68f8      	ldr	r0, [r7, #12]
 800781c:	f000 fa24 	bl	8007c68 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 8007820:	2100      	movs	r1, #0
 8007822:	68f8      	ldr	r0, [r7, #12]
 8007824:	f000 fa20 	bl	8007c68 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8007828:	2300      	movs	r3, #0
 800782a:	82fb      	strh	r3, [r7, #22]
 800782c:	e009      	b.n	8007842 <HAL_SUBGHZ_ReadRegisters+0x84>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 800782e:	69b9      	ldr	r1, [r7, #24]
 8007830:	68f8      	ldr	r0, [r7, #12]
 8007832:	f000 fa6f 	bl	8007d14 <SUBGHZSPI_Receive>
      pData++;
 8007836:	69bb      	ldr	r3, [r7, #24]
 8007838:	3301      	adds	r3, #1
 800783a:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 800783c:	8afb      	ldrh	r3, [r7, #22]
 800783e:	3301      	adds	r3, #1
 8007840:	82fb      	strh	r3, [r7, #22]
 8007842:	8afa      	ldrh	r2, [r7, #22]
 8007844:	893b      	ldrh	r3, [r7, #8]
 8007846:	429a      	cmp	r2, r3
 8007848:	d3f1      	bcc.n	800782e <HAL_SUBGHZ_ReadRegisters+0x70>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800784a:	f7ff fe75 	bl	8007538 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 800784e:	68f8      	ldr	r0, [r7, #12]
 8007850:	f000 fadc 	bl	8007e0c <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	689b      	ldr	r3, [r3, #8]
 8007858:	2b00      	cmp	r3, #0
 800785a:	d002      	beq.n	8007862 <HAL_SUBGHZ_ReadRegisters+0xa4>
    {
      status = HAL_ERROR;
 800785c:	2301      	movs	r3, #1
 800785e:	77fb      	strb	r3, [r7, #31]
 8007860:	e001      	b.n	8007866 <HAL_SUBGHZ_ReadRegisters+0xa8>
    }
    else
    {
      status = HAL_OK;
 8007862:	2300      	movs	r3, #0
 8007864:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	2201      	movs	r2, #1
 800786a:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	2200      	movs	r2, #0
 8007870:	715a      	strb	r2, [r3, #5]

    return status;
 8007872:	7ffb      	ldrb	r3, [r7, #31]
 8007874:	e000      	b.n	8007878 <HAL_SUBGHZ_ReadRegisters+0xba>
  }
  else
  {
    return HAL_BUSY;
 8007876:	2302      	movs	r3, #2
  }
}
 8007878:	4618      	mov	r0, r3
 800787a:	3720      	adds	r7, #32
 800787c:	46bd      	mov	sp, r7
 800787e:	bd80      	pop	{r7, pc}

08007880 <HAL_SUBGHZ_ExecSetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecSetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioSetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8007880:	b580      	push	{r7, lr}
 8007882:	b086      	sub	sp, #24
 8007884:	af00      	add	r7, sp, #0
 8007886:	60f8      	str	r0, [r7, #12]
 8007888:	607a      	str	r2, [r7, #4]
 800788a:	461a      	mov	r2, r3
 800788c:	460b      	mov	r3, r1
 800788e:	72fb      	strb	r3, [r7, #11]
 8007890:	4613      	mov	r3, r2
 8007892:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  /* LORA Modulation not available on STM32WLx4xx devices */
  assert_param(IS_SUBGHZ_MODULATION_SUPPORTED(Command, pBuffer[0U]));

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	799b      	ldrb	r3, [r3, #6]
 8007898:	b2db      	uxtb	r3, r3
 800789a:	2b01      	cmp	r3, #1
 800789c:	d14a      	bne.n	8007934 <HAL_SUBGHZ_ExecSetCmd+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	795b      	ldrb	r3, [r3, #5]
 80078a2:	2b01      	cmp	r3, #1
 80078a4:	d101      	bne.n	80078aa <HAL_SUBGHZ_ExecSetCmd+0x2a>
 80078a6:	2302      	movs	r3, #2
 80078a8:	e045      	b.n	8007936 <HAL_SUBGHZ_ExecSetCmd+0xb6>
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	2201      	movs	r2, #1
 80078ae:	715a      	strb	r2, [r3, #5]

    /* Need to wakeup Radio if already in Sleep at startup */
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80078b0:	68f8      	ldr	r0, [r7, #12]
 80078b2:	f000 fa87 	bl	8007dc4 <SUBGHZ_CheckDeviceReady>

    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 80078b6:	7afb      	ldrb	r3, [r7, #11]
 80078b8:	2b84      	cmp	r3, #132	@ 0x84
 80078ba:	d002      	beq.n	80078c2 <HAL_SUBGHZ_ExecSetCmd+0x42>
 80078bc:	7afb      	ldrb	r3, [r7, #11]
 80078be:	2b94      	cmp	r3, #148	@ 0x94
 80078c0:	d103      	bne.n	80078ca <HAL_SUBGHZ_ExecSetCmd+0x4a>
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	2201      	movs	r2, #1
 80078c6:	711a      	strb	r2, [r3, #4]
 80078c8:	e002      	b.n	80078d0 <HAL_SUBGHZ_ExecSetCmd+0x50>
    }
    else
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	2200      	movs	r2, #0
 80078ce:	711a      	strb	r2, [r3, #4]
    }

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80078d0:	f7ff fe42 	bl	8007558 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 80078d4:	7afb      	ldrb	r3, [r7, #11]
 80078d6:	4619      	mov	r1, r3
 80078d8:	68f8      	ldr	r0, [r7, #12]
 80078da:	f000 f9c5 	bl	8007c68 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 80078de:	2300      	movs	r3, #0
 80078e0:	82bb      	strh	r3, [r7, #20]
 80078e2:	e00a      	b.n	80078fa <HAL_SUBGHZ_ExecSetCmd+0x7a>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 80078e4:	8abb      	ldrh	r3, [r7, #20]
 80078e6:	687a      	ldr	r2, [r7, #4]
 80078e8:	4413      	add	r3, r2
 80078ea:	781b      	ldrb	r3, [r3, #0]
 80078ec:	4619      	mov	r1, r3
 80078ee:	68f8      	ldr	r0, [r7, #12]
 80078f0:	f000 f9ba 	bl	8007c68 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 80078f4:	8abb      	ldrh	r3, [r7, #20]
 80078f6:	3301      	adds	r3, #1
 80078f8:	82bb      	strh	r3, [r7, #20]
 80078fa:	8aba      	ldrh	r2, [r7, #20]
 80078fc:	893b      	ldrh	r3, [r7, #8]
 80078fe:	429a      	cmp	r2, r3
 8007900:	d3f0      	bcc.n	80078e4 <HAL_SUBGHZ_ExecSetCmd+0x64>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8007902:	f7ff fe19 	bl	8007538 <LL_PWR_UnselectSUBGHZSPI_NSS>

    if (Command != RADIO_SET_SLEEP)
 8007906:	7afb      	ldrb	r3, [r7, #11]
 8007908:	2b84      	cmp	r3, #132	@ 0x84
 800790a:	d002      	beq.n	8007912 <HAL_SUBGHZ_ExecSetCmd+0x92>
    {
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 800790c:	68f8      	ldr	r0, [r7, #12]
 800790e:	f000 fa7d 	bl	8007e0c <SUBGHZ_WaitOnBusy>
    }

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	689b      	ldr	r3, [r3, #8]
 8007916:	2b00      	cmp	r3, #0
 8007918:	d002      	beq.n	8007920 <HAL_SUBGHZ_ExecSetCmd+0xa0>
    {
      status = HAL_ERROR;
 800791a:	2301      	movs	r3, #1
 800791c:	75fb      	strb	r3, [r7, #23]
 800791e:	e001      	b.n	8007924 <HAL_SUBGHZ_ExecSetCmd+0xa4>
    }
    else
    {
      status = HAL_OK;
 8007920:	2300      	movs	r3, #0
 8007922:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	2201      	movs	r2, #1
 8007928:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	2200      	movs	r2, #0
 800792e:	715a      	strb	r2, [r3, #5]

    return status;
 8007930:	7dfb      	ldrb	r3, [r7, #23]
 8007932:	e000      	b.n	8007936 <HAL_SUBGHZ_ExecSetCmd+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8007934:	2302      	movs	r3, #2
  }
}
 8007936:	4618      	mov	r0, r3
 8007938:	3718      	adds	r7, #24
 800793a:	46bd      	mov	sp, r7
 800793c:	bd80      	pop	{r7, pc}

0800793e <HAL_SUBGHZ_ExecGetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecGetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioGetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 800793e:	b580      	push	{r7, lr}
 8007940:	b088      	sub	sp, #32
 8007942:	af00      	add	r7, sp, #0
 8007944:	60f8      	str	r0, [r7, #12]
 8007946:	607a      	str	r2, [r7, #4]
 8007948:	461a      	mov	r2, r3
 800794a:	460b      	mov	r3, r1
 800794c:	72fb      	strb	r3, [r7, #11]
 800794e:	4613      	mov	r3, r2
 8007950:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	799b      	ldrb	r3, [r3, #6]
 800795a:	b2db      	uxtb	r3, r3
 800795c:	2b01      	cmp	r3, #1
 800795e:	d13d      	bne.n	80079dc <HAL_SUBGHZ_ExecGetCmd+0x9e>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	795b      	ldrb	r3, [r3, #5]
 8007964:	2b01      	cmp	r3, #1
 8007966:	d101      	bne.n	800796c <HAL_SUBGHZ_ExecGetCmd+0x2e>
 8007968:	2302      	movs	r3, #2
 800796a:	e038      	b.n	80079de <HAL_SUBGHZ_ExecGetCmd+0xa0>
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	2201      	movs	r2, #1
 8007970:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8007972:	68f8      	ldr	r0, [r7, #12]
 8007974:	f000 fa26 	bl	8007dc4 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8007978:	f7ff fdee 	bl	8007558 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 800797c:	7afb      	ldrb	r3, [r7, #11]
 800797e:	4619      	mov	r1, r3
 8007980:	68f8      	ldr	r0, [r7, #12]
 8007982:	f000 f971 	bl	8007c68 <SUBGHZSPI_Transmit>

    /* Use to flush the Status (First byte) receive from SUBGHZ as not use */
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8007986:	2100      	movs	r1, #0
 8007988:	68f8      	ldr	r0, [r7, #12]
 800798a:	f000 f96d 	bl	8007c68 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 800798e:	2300      	movs	r3, #0
 8007990:	82fb      	strh	r3, [r7, #22]
 8007992:	e009      	b.n	80079a8 <HAL_SUBGHZ_ExecGetCmd+0x6a>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8007994:	69b9      	ldr	r1, [r7, #24]
 8007996:	68f8      	ldr	r0, [r7, #12]
 8007998:	f000 f9bc 	bl	8007d14 <SUBGHZSPI_Receive>
      pData++;
 800799c:	69bb      	ldr	r3, [r7, #24]
 800799e:	3301      	adds	r3, #1
 80079a0:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 80079a2:	8afb      	ldrh	r3, [r7, #22]
 80079a4:	3301      	adds	r3, #1
 80079a6:	82fb      	strh	r3, [r7, #22]
 80079a8:	8afa      	ldrh	r2, [r7, #22]
 80079aa:	893b      	ldrh	r3, [r7, #8]
 80079ac:	429a      	cmp	r2, r3
 80079ae:	d3f1      	bcc.n	8007994 <HAL_SUBGHZ_ExecGetCmd+0x56>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80079b0:	f7ff fdc2 	bl	8007538 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80079b4:	68f8      	ldr	r0, [r7, #12]
 80079b6:	f000 fa29 	bl	8007e0c <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	689b      	ldr	r3, [r3, #8]
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d002      	beq.n	80079c8 <HAL_SUBGHZ_ExecGetCmd+0x8a>
    {
      status = HAL_ERROR;
 80079c2:	2301      	movs	r3, #1
 80079c4:	77fb      	strb	r3, [r7, #31]
 80079c6:	e001      	b.n	80079cc <HAL_SUBGHZ_ExecGetCmd+0x8e>
    }
    else
    {
      status = HAL_OK;
 80079c8:	2300      	movs	r3, #0
 80079ca:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	2201      	movs	r2, #1
 80079d0:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	2200      	movs	r2, #0
 80079d6:	715a      	strb	r2, [r3, #5]

    return status;
 80079d8:	7ffb      	ldrb	r3, [r7, #31]
 80079da:	e000      	b.n	80079de <HAL_SUBGHZ_ExecGetCmd+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80079dc:	2302      	movs	r3, #2
  }
}
 80079de:	4618      	mov	r0, r3
 80079e0:	3720      	adds	r7, #32
 80079e2:	46bd      	mov	sp, r7
 80079e4:	bd80      	pop	{r7, pc}

080079e6 <HAL_SUBGHZ_WriteBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                         uint8_t Offset,
                                         uint8_t *pBuffer,
                                         uint16_t Size)
{
 80079e6:	b580      	push	{r7, lr}
 80079e8:	b086      	sub	sp, #24
 80079ea:	af00      	add	r7, sp, #0
 80079ec:	60f8      	str	r0, [r7, #12]
 80079ee:	607a      	str	r2, [r7, #4]
 80079f0:	461a      	mov	r2, r3
 80079f2:	460b      	mov	r3, r1
 80079f4:	72fb      	strb	r3, [r7, #11]
 80079f6:	4613      	mov	r3, r2
 80079f8:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	799b      	ldrb	r3, [r3, #6]
 80079fe:	b2db      	uxtb	r3, r3
 8007a00:	2b01      	cmp	r3, #1
 8007a02:	d13e      	bne.n	8007a82 <HAL_SUBGHZ_WriteBuffer+0x9c>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	795b      	ldrb	r3, [r3, #5]
 8007a08:	2b01      	cmp	r3, #1
 8007a0a:	d101      	bne.n	8007a10 <HAL_SUBGHZ_WriteBuffer+0x2a>
 8007a0c:	2302      	movs	r3, #2
 8007a0e:	e039      	b.n	8007a84 <HAL_SUBGHZ_WriteBuffer+0x9e>
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	2201      	movs	r2, #1
 8007a14:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8007a16:	68f8      	ldr	r0, [r7, #12]
 8007a18:	f000 f9d4 	bl	8007dc4 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8007a1c:	f7ff fd9c 	bl	8007558 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 8007a20:	210e      	movs	r1, #14
 8007a22:	68f8      	ldr	r0, [r7, #12]
 8007a24:	f000 f920 	bl	8007c68 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8007a28:	7afb      	ldrb	r3, [r7, #11]
 8007a2a:	4619      	mov	r1, r3
 8007a2c:	68f8      	ldr	r0, [r7, #12]
 8007a2e:	f000 f91b 	bl	8007c68 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8007a32:	2300      	movs	r3, #0
 8007a34:	82bb      	strh	r3, [r7, #20]
 8007a36:	e00a      	b.n	8007a4e <HAL_SUBGHZ_WriteBuffer+0x68>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8007a38:	8abb      	ldrh	r3, [r7, #20]
 8007a3a:	687a      	ldr	r2, [r7, #4]
 8007a3c:	4413      	add	r3, r2
 8007a3e:	781b      	ldrb	r3, [r3, #0]
 8007a40:	4619      	mov	r1, r3
 8007a42:	68f8      	ldr	r0, [r7, #12]
 8007a44:	f000 f910 	bl	8007c68 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8007a48:	8abb      	ldrh	r3, [r7, #20]
 8007a4a:	3301      	adds	r3, #1
 8007a4c:	82bb      	strh	r3, [r7, #20]
 8007a4e:	8aba      	ldrh	r2, [r7, #20]
 8007a50:	893b      	ldrh	r3, [r7, #8]
 8007a52:	429a      	cmp	r2, r3
 8007a54:	d3f0      	bcc.n	8007a38 <HAL_SUBGHZ_WriteBuffer+0x52>
    }
    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8007a56:	f7ff fd6f 	bl	8007538 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8007a5a:	68f8      	ldr	r0, [r7, #12]
 8007a5c:	f000 f9d6 	bl	8007e0c <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	689b      	ldr	r3, [r3, #8]
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d002      	beq.n	8007a6e <HAL_SUBGHZ_WriteBuffer+0x88>
    {
      status = HAL_ERROR;
 8007a68:	2301      	movs	r3, #1
 8007a6a:	75fb      	strb	r3, [r7, #23]
 8007a6c:	e001      	b.n	8007a72 <HAL_SUBGHZ_WriteBuffer+0x8c>
    }
    else
    {
      status = HAL_OK;
 8007a6e:	2300      	movs	r3, #0
 8007a70:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	2201      	movs	r2, #1
 8007a76:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	2200      	movs	r2, #0
 8007a7c:	715a      	strb	r2, [r3, #5]

    return status;
 8007a7e:	7dfb      	ldrb	r3, [r7, #23]
 8007a80:	e000      	b.n	8007a84 <HAL_SUBGHZ_WriteBuffer+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8007a82:	2302      	movs	r3, #2
  }
}
 8007a84:	4618      	mov	r0, r3
 8007a86:	3718      	adds	r7, #24
 8007a88:	46bd      	mov	sp, r7
 8007a8a:	bd80      	pop	{r7, pc}

08007a8c <HAL_SUBGHZ_ReadBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                        uint8_t Offset,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8007a8c:	b580      	push	{r7, lr}
 8007a8e:	b088      	sub	sp, #32
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	60f8      	str	r0, [r7, #12]
 8007a94:	607a      	str	r2, [r7, #4]
 8007a96:	461a      	mov	r2, r3
 8007a98:	460b      	mov	r3, r1
 8007a9a:	72fb      	strb	r3, [r7, #11]
 8007a9c:	4613      	mov	r3, r2
 8007a9e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	799b      	ldrb	r3, [r3, #6]
 8007aa8:	b2db      	uxtb	r3, r3
 8007aaa:	2b01      	cmp	r3, #1
 8007aac:	d141      	bne.n	8007b32 <HAL_SUBGHZ_ReadBuffer+0xa6>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	795b      	ldrb	r3, [r3, #5]
 8007ab2:	2b01      	cmp	r3, #1
 8007ab4:	d101      	bne.n	8007aba <HAL_SUBGHZ_ReadBuffer+0x2e>
 8007ab6:	2302      	movs	r3, #2
 8007ab8:	e03c      	b.n	8007b34 <HAL_SUBGHZ_ReadBuffer+0xa8>
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	2201      	movs	r2, #1
 8007abe:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8007ac0:	68f8      	ldr	r0, [r7, #12]
 8007ac2:	f000 f97f 	bl	8007dc4 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8007ac6:	f7ff fd47 	bl	8007558 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 8007aca:	211e      	movs	r1, #30
 8007acc:	68f8      	ldr	r0, [r7, #12]
 8007ace:	f000 f8cb 	bl	8007c68 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8007ad2:	7afb      	ldrb	r3, [r7, #11]
 8007ad4:	4619      	mov	r1, r3
 8007ad6:	68f8      	ldr	r0, [r7, #12]
 8007ad8:	f000 f8c6 	bl	8007c68 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8007adc:	2100      	movs	r1, #0
 8007ade:	68f8      	ldr	r0, [r7, #12]
 8007ae0:	f000 f8c2 	bl	8007c68 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8007ae4:	2300      	movs	r3, #0
 8007ae6:	82fb      	strh	r3, [r7, #22]
 8007ae8:	e009      	b.n	8007afe <HAL_SUBGHZ_ReadBuffer+0x72>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8007aea:	69b9      	ldr	r1, [r7, #24]
 8007aec:	68f8      	ldr	r0, [r7, #12]
 8007aee:	f000 f911 	bl	8007d14 <SUBGHZSPI_Receive>
      pData++;
 8007af2:	69bb      	ldr	r3, [r7, #24]
 8007af4:	3301      	adds	r3, #1
 8007af6:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8007af8:	8afb      	ldrh	r3, [r7, #22]
 8007afa:	3301      	adds	r3, #1
 8007afc:	82fb      	strh	r3, [r7, #22]
 8007afe:	8afa      	ldrh	r2, [r7, #22]
 8007b00:	893b      	ldrh	r3, [r7, #8]
 8007b02:	429a      	cmp	r2, r3
 8007b04:	d3f1      	bcc.n	8007aea <HAL_SUBGHZ_ReadBuffer+0x5e>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8007b06:	f7ff fd17 	bl	8007538 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8007b0a:	68f8      	ldr	r0, [r7, #12]
 8007b0c:	f000 f97e 	bl	8007e0c <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	689b      	ldr	r3, [r3, #8]
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d002      	beq.n	8007b1e <HAL_SUBGHZ_ReadBuffer+0x92>
    {
      status = HAL_ERROR;
 8007b18:	2301      	movs	r3, #1
 8007b1a:	77fb      	strb	r3, [r7, #31]
 8007b1c:	e001      	b.n	8007b22 <HAL_SUBGHZ_ReadBuffer+0x96>
    }
    else
    {
      status = HAL_OK;
 8007b1e:	2300      	movs	r3, #0
 8007b20:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	2201      	movs	r2, #1
 8007b26:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	2200      	movs	r2, #0
 8007b2c:	715a      	strb	r2, [r3, #5]

    return status;
 8007b2e:	7ffb      	ldrb	r3, [r7, #31]
 8007b30:	e000      	b.n	8007b34 <HAL_SUBGHZ_ReadBuffer+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8007b32:	2302      	movs	r3, #2
  }
}
 8007b34:	4618      	mov	r0, r3
 8007b36:	3720      	adds	r7, #32
 8007b38:	46bd      	mov	sp, r7
 8007b3a:	bd80      	pop	{r7, pc}

08007b3c <HAL_SUBGHZ_IRQHandler>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *               the configuration information for the specified SUBGHZ module.
  * @retval None
  */
void HAL_SUBGHZ_IRQHandler(SUBGHZ_HandleTypeDef *hsubghz)
{
 8007b3c:	b580      	push	{r7, lr}
 8007b3e:	b084      	sub	sp, #16
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	6078      	str	r0, [r7, #4]
  uint8_t tmpisr[2U] = {0U};
 8007b44:	2300      	movs	r3, #0
 8007b46:	81bb      	strh	r3, [r7, #12]
  uint16_t itsource;

  /* Retrieve Interrupts from SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2U);
 8007b48:	f107 020c 	add.w	r2, r7, #12
 8007b4c:	2302      	movs	r3, #2
 8007b4e:	2112      	movs	r1, #18
 8007b50:	6878      	ldr	r0, [r7, #4]
 8007b52:	f7ff fef4 	bl	800793e <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0U];
 8007b56:	7b3b      	ldrb	r3, [r7, #12]
 8007b58:	81fb      	strh	r3, [r7, #14]
  itsource = (itsource << 8U) | tmpisr[1U];
 8007b5a:	89fb      	ldrh	r3, [r7, #14]
 8007b5c:	021b      	lsls	r3, r3, #8
 8007b5e:	b21a      	sxth	r2, r3
 8007b60:	7b7b      	ldrb	r3, [r7, #13]
 8007b62:	b21b      	sxth	r3, r3
 8007b64:	4313      	orrs	r3, r2
 8007b66:	b21b      	sxth	r3, r3
 8007b68:	81fb      	strh	r3, [r7, #14]

  /* Packet transmission completed Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 8007b6a:	89fb      	ldrh	r3, [r7, #14]
 8007b6c:	f003 0301 	and.w	r3, r3, #1
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d002      	beq.n	8007b7a <HAL_SUBGHZ_IRQHandler+0x3e>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->TxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 8007b74:	6878      	ldr	r0, [r7, #4]
 8007b76:	f012 fcf5 	bl	801a564 <HAL_SUBGHZ_TxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Packet received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET)
 8007b7a:	89fb      	ldrh	r3, [r7, #14]
 8007b7c:	f003 0302 	and.w	r3, r3, #2
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d002      	beq.n	8007b8a <HAL_SUBGHZ_IRQHandler+0x4e>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 8007b84:	6878      	ldr	r0, [r7, #4]
 8007b86:	f012 fcfb 	bl	801a580 <HAL_SUBGHZ_RxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Preamble Detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 8007b8a:	89fb      	ldrh	r3, [r7, #14]
 8007b8c:	f003 0304 	and.w	r3, r3, #4
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d002      	beq.n	8007b9a <HAL_SUBGHZ_IRQHandler+0x5e>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->PreambleDetectedCallback(hsubghz);
#else
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 8007b94:	6878      	ldr	r0, [r7, #4]
 8007b96:	f012 fd4b 	bl	801a630 <HAL_SUBGHZ_PreambleDetectedCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /*  Valid sync word detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 8007b9a:	89fb      	ldrh	r3, [r7, #14]
 8007b9c:	f003 0308 	and.w	r3, r3, #8
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d002      	beq.n	8007baa <HAL_SUBGHZ_IRQHandler+0x6e>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->SyncWordValidCallback(hsubghz);
#else
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 8007ba4:	6878      	ldr	r0, [r7, #4]
 8007ba6:	f012 fd51 	bl	801a64c <HAL_SUBGHZ_SyncWordValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Valid LoRa header received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 8007baa:	89fb      	ldrh	r3, [r7, #14]
 8007bac:	f003 0310 	and.w	r3, r3, #16
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d002      	beq.n	8007bba <HAL_SUBGHZ_IRQHandler+0x7e>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderValidCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 8007bb4:	6878      	ldr	r0, [r7, #4]
 8007bb6:	f012 fd57 	bl	801a668 <HAL_SUBGHZ_HeaderValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LoRa header CRC error Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 8007bba:	89fb      	ldrh	r3, [r7, #14]
 8007bbc:	f003 0320 	and.w	r3, r3, #32
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d002      	beq.n	8007bca <HAL_SUBGHZ_IRQHandler+0x8e>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 8007bc4:	6878      	ldr	r0, [r7, #4]
 8007bc6:	f012 fd25 	bl	801a614 <HAL_SUBGHZ_HeaderErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Wrong CRC received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 8007bca:	89fb      	ldrh	r3, [r7, #14]
 8007bcc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d002      	beq.n	8007bda <HAL_SUBGHZ_IRQHandler+0x9e>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->CRCErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 8007bd4:	6878      	ldr	r0, [r7, #4]
 8007bd6:	f012 fce1 	bl	801a59c <HAL_SUBGHZ_CRCErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Channel activity detection finished Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 8007bda:	89fb      	ldrh	r3, [r7, #14]
 8007bdc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d00d      	beq.n	8007c00 <HAL_SUBGHZ_IRQHandler+0xc4>
    {
      hsubghz->CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
    }
#else
    /* Channel activity Detected Interrupt */
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 8007be4:	89fb      	ldrh	r3, [r7, #14]
 8007be6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d004      	beq.n	8007bf8 <HAL_SUBGHZ_IRQHandler+0xbc>
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 8007bee:	2101      	movs	r1, #1
 8007bf0:	6878      	ldr	r0, [r7, #4]
 8007bf2:	f012 fce1 	bl	801a5b8 <HAL_SUBGHZ_CADStatusCallback>
 8007bf6:	e003      	b.n	8007c00 <HAL_SUBGHZ_IRQHandler+0xc4>
    }
    else
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 8007bf8:	2100      	movs	r1, #0
 8007bfa:	6878      	ldr	r0, [r7, #4]
 8007bfc:	f012 fcdc 	bl	801a5b8 <HAL_SUBGHZ_CADStatusCallback>
    }
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Rx or Tx Timeout Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 8007c00:	89fb      	ldrh	r3, [r7, #14]
 8007c02:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d002      	beq.n	8007c10 <HAL_SUBGHZ_IRQHandler+0xd4>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxTxTimeoutCallback(hsubghz);
#else
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 8007c0a:	6878      	ldr	r0, [r7, #4]
 8007c0c:	f012 fcf2 	bl	801a5f4 <HAL_SUBGHZ_RxTxTimeoutCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Clear SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2);
 8007c10:	f107 020c 	add.w	r2, r7, #12
 8007c14:	2302      	movs	r3, #2
 8007c16:	2102      	movs	r1, #2
 8007c18:	6878      	ldr	r0, [r7, #4]
 8007c1a:	f7ff fe31 	bl	8007880 <HAL_SUBGHZ_ExecSetCmd>
}
 8007c1e:	bf00      	nop
 8007c20:	3710      	adds	r7, #16
 8007c22:	46bd      	mov	sp, r7
 8007c24:	bd80      	pop	{r7, pc}
	...

08007c28 <SUBGHZSPI_Init>:
  * @brief  Initializes the SUBGHZSPI peripheral
  * @param  BaudratePrescaler SPI Baudrate prescaler
  * @retval None
  */
void SUBGHZSPI_Init(uint32_t BaudratePrescaler)
{
 8007c28:	b480      	push	{r7}
 8007c2a:	b083      	sub	sp, #12
 8007c2c:	af00      	add	r7, sp, #0
 8007c2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8007c30:	4b0c      	ldr	r3, [pc, #48]	@ (8007c64 <SUBGHZSPI_Init+0x3c>)
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	4a0b      	ldr	r2, [pc, #44]	@ (8007c64 <SUBGHZSPI_Init+0x3c>)
 8007c36:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007c3a:	6013      	str	r3, [r2, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 8007c3c:	4a09      	ldr	r2, [pc, #36]	@ (8007c64 <SUBGHZSPI_Init+0x3c>)
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	f443 7341 	orr.w	r3, r3, #772	@ 0x304
 8007c44:	6013      	str	r3, [r2, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 8007c46:	4b07      	ldr	r3, [pc, #28]	@ (8007c64 <SUBGHZSPI_Init+0x3c>)
 8007c48:	f44f 52b8 	mov.w	r2, #5888	@ 0x1700
 8007c4c:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8007c4e:	4b05      	ldr	r3, [pc, #20]	@ (8007c64 <SUBGHZSPI_Init+0x3c>)
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	4a04      	ldr	r2, [pc, #16]	@ (8007c64 <SUBGHZSPI_Init+0x3c>)
 8007c54:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007c58:	6013      	str	r3, [r2, #0]
}
 8007c5a:	bf00      	nop
 8007c5c:	370c      	adds	r7, #12
 8007c5e:	46bd      	mov	sp, r7
 8007c60:	bc80      	pop	{r7}
 8007c62:	4770      	bx	lr
 8007c64:	58010000 	.word	0x58010000

08007c68 <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 8007c68:	b480      	push	{r7}
 8007c6a:	b087      	sub	sp, #28
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	6078      	str	r0, [r7, #4]
 8007c70:	460b      	mov	r3, r1
 8007c72:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8007c74:	2300      	movs	r3, #0
 8007c76:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8007c78:	4b23      	ldr	r3, [pc, #140]	@ (8007d08 <SUBGHZSPI_Transmit+0xa0>)
 8007c7a:	681a      	ldr	r2, [r3, #0]
 8007c7c:	4613      	mov	r3, r2
 8007c7e:	00db      	lsls	r3, r3, #3
 8007c80:	1a9b      	subs	r3, r3, r2
 8007c82:	009b      	lsls	r3, r3, #2
 8007c84:	0cdb      	lsrs	r3, r3, #19
 8007c86:	2264      	movs	r2, #100	@ 0x64
 8007c88:	fb02 f303 	mul.w	r3, r2, r3
 8007c8c:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d105      	bne.n	8007ca0 <SUBGHZSPI_Transmit+0x38>
    {
      status = HAL_ERROR;
 8007c94:	2301      	movs	r3, #1
 8007c96:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	2201      	movs	r2, #1
 8007c9c:	609a      	str	r2, [r3, #8]
      break;
 8007c9e:	e008      	b.n	8007cb2 <SUBGHZSPI_Transmit+0x4a>
    }
    count--;
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	3b01      	subs	r3, #1
 8007ca4:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8007ca6:	4b19      	ldr	r3, [pc, #100]	@ (8007d0c <SUBGHZSPI_Transmit+0xa4>)
 8007ca8:	689b      	ldr	r3, [r3, #8]
 8007caa:	f003 0302 	and.w	r3, r3, #2
 8007cae:	2b02      	cmp	r3, #2
 8007cb0:	d1ed      	bne.n	8007c8e <SUBGHZSPI_Transmit+0x26>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8007cb2:	4b17      	ldr	r3, [pc, #92]	@ (8007d10 <SUBGHZSPI_Transmit+0xa8>)
 8007cb4:	613b      	str	r3, [r7, #16]
  *spidr = Data;
 8007cb6:	693b      	ldr	r3, [r7, #16]
 8007cb8:	78fa      	ldrb	r2, [r7, #3]
 8007cba:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8007cbc:	4b12      	ldr	r3, [pc, #72]	@ (8007d08 <SUBGHZSPI_Transmit+0xa0>)
 8007cbe:	681a      	ldr	r2, [r3, #0]
 8007cc0:	4613      	mov	r3, r2
 8007cc2:	00db      	lsls	r3, r3, #3
 8007cc4:	1a9b      	subs	r3, r3, r2
 8007cc6:	009b      	lsls	r3, r3, #2
 8007cc8:	0cdb      	lsrs	r3, r3, #19
 8007cca:	2264      	movs	r2, #100	@ 0x64
 8007ccc:	fb02 f303 	mul.w	r3, r2, r3
 8007cd0:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d105      	bne.n	8007ce4 <SUBGHZSPI_Transmit+0x7c>
    {
      status = HAL_ERROR;
 8007cd8:	2301      	movs	r3, #1
 8007cda:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	2201      	movs	r2, #1
 8007ce0:	609a      	str	r2, [r3, #8]
      break;
 8007ce2:	e008      	b.n	8007cf6 <SUBGHZSPI_Transmit+0x8e>
    }
    count--;
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	3b01      	subs	r3, #1
 8007ce8:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8007cea:	4b08      	ldr	r3, [pc, #32]	@ (8007d0c <SUBGHZSPI_Transmit+0xa4>)
 8007cec:	689b      	ldr	r3, [r3, #8]
 8007cee:	f003 0301 	and.w	r3, r3, #1
 8007cf2:	2b01      	cmp	r3, #1
 8007cf4:	d1ed      	bne.n	8007cd2 <SUBGHZSPI_Transmit+0x6a>

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 8007cf6:	4b05      	ldr	r3, [pc, #20]	@ (8007d0c <SUBGHZSPI_Transmit+0xa4>)
 8007cf8:	68db      	ldr	r3, [r3, #12]

  return status;
 8007cfa:	7dfb      	ldrb	r3, [r7, #23]
}
 8007cfc:	4618      	mov	r0, r3
 8007cfe:	371c      	adds	r7, #28
 8007d00:	46bd      	mov	sp, r7
 8007d02:	bc80      	pop	{r7}
 8007d04:	4770      	bx	lr
 8007d06:	bf00      	nop
 8007d08:	20000000 	.word	0x20000000
 8007d0c:	58010000 	.word	0x58010000
 8007d10:	5801000c 	.word	0x5801000c

08007d14 <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 8007d14:	b480      	push	{r7}
 8007d16:	b087      	sub	sp, #28
 8007d18:	af00      	add	r7, sp, #0
 8007d1a:	6078      	str	r0, [r7, #4]
 8007d1c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007d1e:	2300      	movs	r3, #0
 8007d20:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8007d22:	4b25      	ldr	r3, [pc, #148]	@ (8007db8 <SUBGHZSPI_Receive+0xa4>)
 8007d24:	681a      	ldr	r2, [r3, #0]
 8007d26:	4613      	mov	r3, r2
 8007d28:	00db      	lsls	r3, r3, #3
 8007d2a:	1a9b      	subs	r3, r3, r2
 8007d2c:	009b      	lsls	r3, r3, #2
 8007d2e:	0cdb      	lsrs	r3, r3, #19
 8007d30:	2264      	movs	r2, #100	@ 0x64
 8007d32:	fb02 f303 	mul.w	r3, r2, r3
 8007d36:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d105      	bne.n	8007d4a <SUBGHZSPI_Receive+0x36>
    {
      status = HAL_ERROR;
 8007d3e:	2301      	movs	r3, #1
 8007d40:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	2201      	movs	r2, #1
 8007d46:	609a      	str	r2, [r3, #8]
      break;
 8007d48:	e008      	b.n	8007d5c <SUBGHZSPI_Receive+0x48>
    }
    count--;
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	3b01      	subs	r3, #1
 8007d4e:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8007d50:	4b1a      	ldr	r3, [pc, #104]	@ (8007dbc <SUBGHZSPI_Receive+0xa8>)
 8007d52:	689b      	ldr	r3, [r3, #8]
 8007d54:	f003 0302 	and.w	r3, r3, #2
 8007d58:	2b02      	cmp	r3, #2
 8007d5a:	d1ed      	bne.n	8007d38 <SUBGHZSPI_Receive+0x24>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8007d5c:	4b18      	ldr	r3, [pc, #96]	@ (8007dc0 <SUBGHZSPI_Receive+0xac>)
 8007d5e:	613b      	str	r3, [r7, #16]
  *spidr = SUBGHZ_DUMMY_DATA;
 8007d60:	693b      	ldr	r3, [r7, #16]
 8007d62:	22ff      	movs	r2, #255	@ 0xff
 8007d64:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8007d66:	4b14      	ldr	r3, [pc, #80]	@ (8007db8 <SUBGHZSPI_Receive+0xa4>)
 8007d68:	681a      	ldr	r2, [r3, #0]
 8007d6a:	4613      	mov	r3, r2
 8007d6c:	00db      	lsls	r3, r3, #3
 8007d6e:	1a9b      	subs	r3, r3, r2
 8007d70:	009b      	lsls	r3, r3, #2
 8007d72:	0cdb      	lsrs	r3, r3, #19
 8007d74:	2264      	movs	r2, #100	@ 0x64
 8007d76:	fb02 f303 	mul.w	r3, r2, r3
 8007d7a:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d105      	bne.n	8007d8e <SUBGHZSPI_Receive+0x7a>
    {
      status = HAL_ERROR;
 8007d82:	2301      	movs	r3, #1
 8007d84:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	2201      	movs	r2, #1
 8007d8a:	609a      	str	r2, [r3, #8]
      break;
 8007d8c:	e008      	b.n	8007da0 <SUBGHZSPI_Receive+0x8c>
    }
    count--;
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	3b01      	subs	r3, #1
 8007d92:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8007d94:	4b09      	ldr	r3, [pc, #36]	@ (8007dbc <SUBGHZSPI_Receive+0xa8>)
 8007d96:	689b      	ldr	r3, [r3, #8]
 8007d98:	f003 0301 	and.w	r3, r3, #1
 8007d9c:	2b01      	cmp	r3, #1
 8007d9e:	d1ed      	bne.n	8007d7c <SUBGHZSPI_Receive+0x68>

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 8007da0:	4b06      	ldr	r3, [pc, #24]	@ (8007dbc <SUBGHZSPI_Receive+0xa8>)
 8007da2:	68db      	ldr	r3, [r3, #12]
 8007da4:	b2da      	uxtb	r2, r3
 8007da6:	683b      	ldr	r3, [r7, #0]
 8007da8:	701a      	strb	r2, [r3, #0]

  return status;
 8007daa:	7dfb      	ldrb	r3, [r7, #23]
}
 8007dac:	4618      	mov	r0, r3
 8007dae:	371c      	adds	r7, #28
 8007db0:	46bd      	mov	sp, r7
 8007db2:	bc80      	pop	{r7}
 8007db4:	4770      	bx	lr
 8007db6:	bf00      	nop
 8007db8:	20000000 	.word	0x20000000
 8007dbc:	58010000 	.word	0x58010000
 8007dc0:	5801000c 	.word	0x5801000c

08007dc4 <SUBGHZ_CheckDeviceReady>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_CheckDeviceReady(SUBGHZ_HandleTypeDef *hsubghz)
{
 8007dc4:	b580      	push	{r7, lr}
 8007dc6:	b084      	sub	sp, #16
 8007dc8:	af00      	add	r7, sp, #0
 8007dca:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  /* Wakeup radio in case of sleep mode: Select-Unselect radio */
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	791b      	ldrb	r3, [r3, #4]
 8007dd0:	2b01      	cmp	r3, #1
 8007dd2:	d111      	bne.n	8007df8 <SUBGHZ_CheckDeviceReady+0x34>
  {
    /* Initialize NSS switch Delay */
    count  = SUBGHZ_NSS_LOOP_TIME;
 8007dd4:	4b0c      	ldr	r3, [pc, #48]	@ (8007e08 <SUBGHZ_CheckDeviceReady+0x44>)
 8007dd6:	681a      	ldr	r2, [r3, #0]
 8007dd8:	4613      	mov	r3, r2
 8007dda:	005b      	lsls	r3, r3, #1
 8007ddc:	4413      	add	r3, r2
 8007dde:	00db      	lsls	r3, r3, #3
 8007de0:	0c1b      	lsrs	r3, r3, #16
 8007de2:	60fb      	str	r3, [r7, #12]

    /* NSS = 0; */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8007de4:	f7ff fbb8 	bl	8007558 <LL_PWR_SelectSUBGHZSPI_NSS>

    /* Wait Radio wakeup */
    do
    {
      count--;
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	3b01      	subs	r3, #1
 8007dec:	60fb      	str	r3, [r7, #12]
    } while (count != 0UL);
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d1f9      	bne.n	8007de8 <SUBGHZ_CheckDeviceReady+0x24>

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8007df4:	f7ff fba0 	bl	8007538 <LL_PWR_UnselectSUBGHZSPI_NSS>
  }
  return (SUBGHZ_WaitOnBusy(hsubghz));
 8007df8:	6878      	ldr	r0, [r7, #4]
 8007dfa:	f000 f807 	bl	8007e0c <SUBGHZ_WaitOnBusy>
 8007dfe:	4603      	mov	r3, r0
}
 8007e00:	4618      	mov	r0, r3
 8007e02:	3710      	adds	r7, #16
 8007e04:	46bd      	mov	sp, r7
 8007e06:	bd80      	pop	{r7, pc}
 8007e08:	20000000 	.word	0x20000000

08007e0c <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 8007e0c:	b580      	push	{r7, lr}
 8007e0e:	b086      	sub	sp, #24
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
 8007e14:	2300      	movs	r3, #0
 8007e16:	75fb      	strb	r3, [r7, #23]
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 8007e18:	4b12      	ldr	r3, [pc, #72]	@ (8007e64 <SUBGHZ_WaitOnBusy+0x58>)
 8007e1a:	681a      	ldr	r2, [r3, #0]
 8007e1c:	4613      	mov	r3, r2
 8007e1e:	005b      	lsls	r3, r3, #1
 8007e20:	4413      	add	r3, r2
 8007e22:	00db      	lsls	r3, r3, #3
 8007e24:	0d1b      	lsrs	r3, r3, #20
 8007e26:	2264      	movs	r2, #100	@ 0x64
 8007e28:	fb02 f303 	mul.w	r3, r2, r3
 8007e2c:	60fb      	str	r3, [r7, #12]

  /* Wait until Busy signal is set */
  do
  {
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();
 8007e2e:	f7ff fbc1 	bl	80075b4 <LL_PWR_IsActiveFlag_RFBUSYMS>
 8007e32:	6138      	str	r0, [r7, #16]

    if (count == 0U)
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d105      	bne.n	8007e46 <SUBGHZ_WaitOnBusy+0x3a>
    {
      status  = HAL_ERROR;
 8007e3a:	2301      	movs	r3, #1
 8007e3c:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	2202      	movs	r2, #2
 8007e42:	609a      	str	r2, [r3, #8]
      break;
 8007e44:	e009      	b.n	8007e5a <SUBGHZ_WaitOnBusy+0x4e>
    }
    count--;
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	3b01      	subs	r3, #1
 8007e4a:	60fb      	str	r3, [r7, #12]
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 8007e4c:	f7ff fba0 	bl	8007590 <LL_PWR_IsActiveFlag_RFBUSYS>
 8007e50:	4602      	mov	r2, r0
 8007e52:	693b      	ldr	r3, [r7, #16]
 8007e54:	4013      	ands	r3, r2
 8007e56:	2b01      	cmp	r3, #1
 8007e58:	d0e9      	beq.n	8007e2e <SUBGHZ_WaitOnBusy+0x22>

  return status;
 8007e5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e5c:	4618      	mov	r0, r3
 8007e5e:	3718      	adds	r7, #24
 8007e60:	46bd      	mov	sp, r7
 8007e62:	bd80      	pop	{r7, pc}
 8007e64:	20000000 	.word	0x20000000

08007e68 <LL_RCC_GetUSARTClockSource>:
{
 8007e68:	b480      	push	{r7}
 8007e6a:	b083      	sub	sp, #12
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 8007e70:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007e74:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	401a      	ands	r2, r3
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	041b      	lsls	r3, r3, #16
 8007e80:	4313      	orrs	r3, r2
}
 8007e82:	4618      	mov	r0, r3
 8007e84:	370c      	adds	r7, #12
 8007e86:	46bd      	mov	sp, r7
 8007e88:	bc80      	pop	{r7}
 8007e8a:	4770      	bx	lr

08007e8c <LL_RCC_GetLPUARTClockSource>:
{
 8007e8c:	b480      	push	{r7}
 8007e8e:	b083      	sub	sp, #12
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8007e94:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007e98:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	4013      	ands	r3, r2
}
 8007ea0:	4618      	mov	r0, r3
 8007ea2:	370c      	adds	r7, #12
 8007ea4:	46bd      	mov	sp, r7
 8007ea6:	bc80      	pop	{r7}
 8007ea8:	4770      	bx	lr

08007eaa <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007eaa:	b580      	push	{r7, lr}
 8007eac:	b082      	sub	sp, #8
 8007eae:	af00      	add	r7, sp, #0
 8007eb0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d101      	bne.n	8007ebc <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007eb8:	2301      	movs	r3, #1
 8007eba:	e042      	b.n	8007f42 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d106      	bne.n	8007ed4 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	2200      	movs	r2, #0
 8007eca:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007ece:	6878      	ldr	r0, [r7, #4]
 8007ed0:	f7fa fe64 	bl	8002b9c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	2224      	movs	r2, #36	@ 0x24
 8007ed8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  __HAL_UART_DISABLE(huart);
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	681a      	ldr	r2, [r3, #0]
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	f022 0201 	bic.w	r2, r2, #1
 8007eea:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007eec:	6878      	ldr	r0, [r7, #4]
 8007eee:	f000 fc4b 	bl	8008788 <UART_SetConfig>
 8007ef2:	4603      	mov	r3, r0
 8007ef4:	2b01      	cmp	r3, #1
 8007ef6:	d101      	bne.n	8007efc <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007ef8:	2301      	movs	r3, #1
 8007efa:	e022      	b.n	8007f42 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d002      	beq.n	8007f0a <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8007f04:	6878      	ldr	r0, [r7, #4]
 8007f06:	f000 feb3 	bl	8008c70 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	685a      	ldr	r2, [r3, #4]
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007f18:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	689a      	ldr	r2, [r3, #8]
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007f28:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	681a      	ldr	r2, [r3, #0]
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	f042 0201 	orr.w	r2, r2, #1
 8007f38:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007f3a:	6878      	ldr	r0, [r7, #4]
 8007f3c:	f000 ff39 	bl	8008db2 <UART_CheckIdleState>
 8007f40:	4603      	mov	r3, r0
}
 8007f42:	4618      	mov	r0, r3
 8007f44:	3708      	adds	r7, #8
 8007f46:	46bd      	mov	sp, r7
 8007f48:	bd80      	pop	{r7, pc}
	...

08007f4c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007f4c:	b580      	push	{r7, lr}
 8007f4e:	b08a      	sub	sp, #40	@ 0x28
 8007f50:	af00      	add	r7, sp, #0
 8007f52:	60f8      	str	r0, [r7, #12]
 8007f54:	60b9      	str	r1, [r7, #8]
 8007f56:	4613      	mov	r3, r2
 8007f58:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007f60:	2b20      	cmp	r3, #32
 8007f62:	d142      	bne.n	8007fea <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8007f64:	68bb      	ldr	r3, [r7, #8]
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d002      	beq.n	8007f70 <HAL_UART_Receive_IT+0x24>
 8007f6a:	88fb      	ldrh	r3, [r7, #6]
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d101      	bne.n	8007f74 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8007f70:	2301      	movs	r3, #1
 8007f72:	e03b      	b.n	8007fec <HAL_UART_Receive_IT+0xa0>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    __HAL_LOCK(huart);
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8007f7a:	2b01      	cmp	r3, #1
 8007f7c:	d101      	bne.n	8007f82 <HAL_UART_Receive_IT+0x36>
 8007f7e:	2302      	movs	r3, #2
 8007f80:	e034      	b.n	8007fec <HAL_UART_Receive_IT+0xa0>
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	2201      	movs	r2, #1
 8007f86:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	2200      	movs	r2, #0
 8007f8e:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	4a17      	ldr	r2, [pc, #92]	@ (8007ff4 <HAL_UART_Receive_IT+0xa8>)
 8007f96:	4293      	cmp	r3, r2
 8007f98:	d01f      	beq.n	8007fda <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	685b      	ldr	r3, [r3, #4]
 8007fa0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d018      	beq.n	8007fda <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fae:	697b      	ldr	r3, [r7, #20]
 8007fb0:	e853 3f00 	ldrex	r3, [r3]
 8007fb4:	613b      	str	r3, [r7, #16]
   return(result);
 8007fb6:	693b      	ldr	r3, [r7, #16]
 8007fb8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007fbc:	627b      	str	r3, [r7, #36]	@ 0x24
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	461a      	mov	r2, r3
 8007fc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fc6:	623b      	str	r3, [r7, #32]
 8007fc8:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fca:	69f9      	ldr	r1, [r7, #28]
 8007fcc:	6a3a      	ldr	r2, [r7, #32]
 8007fce:	e841 2300 	strex	r3, r2, [r1]
 8007fd2:	61bb      	str	r3, [r7, #24]
   return(result);
 8007fd4:	69bb      	ldr	r3, [r7, #24]
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d1e6      	bne.n	8007fa8 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return(UART_Start_Receive_IT(huart, pData, Size));
 8007fda:	88fb      	ldrh	r3, [r7, #6]
 8007fdc:	461a      	mov	r2, r3
 8007fde:	68b9      	ldr	r1, [r7, #8]
 8007fe0:	68f8      	ldr	r0, [r7, #12]
 8007fe2:	f000 fff9 	bl	8008fd8 <UART_Start_Receive_IT>
 8007fe6:	4603      	mov	r3, r0
 8007fe8:	e000      	b.n	8007fec <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8007fea:	2302      	movs	r3, #2
  }
}
 8007fec:	4618      	mov	r0, r3
 8007fee:	3728      	adds	r7, #40	@ 0x28
 8007ff0:	46bd      	mov	sp, r7
 8007ff2:	bd80      	pop	{r7, pc}
 8007ff4:	40008000 	.word	0x40008000

08007ff8 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8007ff8:	b580      	push	{r7, lr}
 8007ffa:	b08a      	sub	sp, #40	@ 0x28
 8007ffc:	af00      	add	r7, sp, #0
 8007ffe:	60f8      	str	r0, [r7, #12]
 8008000:	60b9      	str	r1, [r7, #8]
 8008002:	4613      	mov	r3, r2
 8008004:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800800c:	2b20      	cmp	r3, #32
 800800e:	d17a      	bne.n	8008106 <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 8008010:	68bb      	ldr	r3, [r7, #8]
 8008012:	2b00      	cmp	r3, #0
 8008014:	d002      	beq.n	800801c <HAL_UART_Transmit_DMA+0x24>
 8008016:	88fb      	ldrh	r3, [r7, #6]
 8008018:	2b00      	cmp	r3, #0
 800801a:	d101      	bne.n	8008020 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800801c:	2301      	movs	r3, #1
 800801e:	e073      	b.n	8008108 <HAL_UART_Transmit_DMA+0x110>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    __HAL_LOCK(huart);
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8008026:	2b01      	cmp	r3, #1
 8008028:	d101      	bne.n	800802e <HAL_UART_Transmit_DMA+0x36>
 800802a:	2302      	movs	r3, #2
 800802c:	e06c      	b.n	8008108 <HAL_UART_Transmit_DMA+0x110>
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	2201      	movs	r2, #1
 8008032:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    huart->pTxBuffPtr  = pData;
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	68ba      	ldr	r2, [r7, #8]
 800803a:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	88fa      	ldrh	r2, [r7, #6]
 8008040:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	88fa      	ldrh	r2, [r7, #6]
 8008048:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	2200      	movs	r2, #0
 8008050:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	2221      	movs	r2, #33	@ 0x21
 8008058:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    if (huart->hdmatx != NULL)
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008060:	2b00      	cmp	r3, #0
 8008062:	d02c      	beq.n	80080be <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008068:	4a29      	ldr	r2, [pc, #164]	@ (8008110 <HAL_UART_Transmit_DMA+0x118>)
 800806a:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008070:	4a28      	ldr	r2, [pc, #160]	@ (8008114 <HAL_UART_Transmit_DMA+0x11c>)
 8008072:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008078:	4a27      	ldr	r2, [pc, #156]	@ (8008118 <HAL_UART_Transmit_DMA+0x120>)
 800807a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008080:	2200      	movs	r2, #0
 8008082:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	6f98      	ldr	r0, [r3, #120]	@ 0x78
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800808c:	4619      	mov	r1, r3
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	3328      	adds	r3, #40	@ 0x28
 8008094:	461a      	mov	r2, r3
 8008096:	88fb      	ldrh	r3, [r7, #6]
 8008098:	f7fc fba6 	bl	80047e8 <HAL_DMA_Start_IT>
 800809c:	4603      	mov	r3, r0
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d00d      	beq.n	80080be <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	2210      	movs	r2, #16
 80080a6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        __HAL_UNLOCK(huart);
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	2200      	movs	r2, #0
 80080ae:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	2220      	movs	r2, #32
 80080b6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

        return HAL_ERROR;
 80080ba:	2301      	movs	r3, #1
 80080bc:	e024      	b.n	8008108 <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	2240      	movs	r2, #64	@ 0x40
 80080c4:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	2200      	movs	r2, #0
 80080ca:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	3308      	adds	r3, #8
 80080d4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080d6:	697b      	ldr	r3, [r7, #20]
 80080d8:	e853 3f00 	ldrex	r3, [r3]
 80080dc:	613b      	str	r3, [r7, #16]
   return(result);
 80080de:	693b      	ldr	r3, [r7, #16]
 80080e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80080e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	3308      	adds	r3, #8
 80080ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80080ee:	623a      	str	r2, [r7, #32]
 80080f0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080f2:	69f9      	ldr	r1, [r7, #28]
 80080f4:	6a3a      	ldr	r2, [r7, #32]
 80080f6:	e841 2300 	strex	r3, r2, [r1]
 80080fa:	61bb      	str	r3, [r7, #24]
   return(result);
 80080fc:	69bb      	ldr	r3, [r7, #24]
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d1e5      	bne.n	80080ce <HAL_UART_Transmit_DMA+0xd6>

    return HAL_OK;
 8008102:	2300      	movs	r3, #0
 8008104:	e000      	b.n	8008108 <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 8008106:	2302      	movs	r3, #2
  }
}
 8008108:	4618      	mov	r0, r3
 800810a:	3728      	adds	r7, #40	@ 0x28
 800810c:	46bd      	mov	sp, r7
 800810e:	bd80      	pop	{r7, pc}
 8008110:	08009373 	.word	0x08009373
 8008114:	0800940d 	.word	0x0800940d
 8008118:	08009429 	.word	0x08009429

0800811c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800811c:	b580      	push	{r7, lr}
 800811e:	b0ba      	sub	sp, #232	@ 0xe8
 8008120:	af00      	add	r7, sp, #0
 8008122:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	69db      	ldr	r3, [r3, #28]
 800812a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	689b      	ldr	r3, [r3, #8]
 800813e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008142:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8008146:	f640 030f 	movw	r3, #2063	@ 0x80f
 800814a:	4013      	ands	r3, r2
 800814c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8008150:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008154:	2b00      	cmp	r3, #0
 8008156:	d11b      	bne.n	8008190 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008158:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800815c:	f003 0320 	and.w	r3, r3, #32
 8008160:	2b00      	cmp	r3, #0
 8008162:	d015      	beq.n	8008190 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008164:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008168:	f003 0320 	and.w	r3, r3, #32
 800816c:	2b00      	cmp	r3, #0
 800816e:	d105      	bne.n	800817c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008170:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008174:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008178:	2b00      	cmp	r3, #0
 800817a:	d009      	beq.n	8008190 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008180:	2b00      	cmp	r3, #0
 8008182:	f000 82d6 	beq.w	8008732 <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800818a:	6878      	ldr	r0, [r7, #4]
 800818c:	4798      	blx	r3
      }
      return;
 800818e:	e2d0      	b.n	8008732 <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008190:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008194:	2b00      	cmp	r3, #0
 8008196:	f000 811f 	beq.w	80083d8 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800819a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800819e:	4b8b      	ldr	r3, [pc, #556]	@ (80083cc <HAL_UART_IRQHandler+0x2b0>)
 80081a0:	4013      	ands	r3, r2
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d106      	bne.n	80081b4 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80081a6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80081aa:	4b89      	ldr	r3, [pc, #548]	@ (80083d0 <HAL_UART_IRQHandler+0x2b4>)
 80081ac:	4013      	ands	r3, r2
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	f000 8112 	beq.w	80083d8 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80081b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80081b8:	f003 0301 	and.w	r3, r3, #1
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d011      	beq.n	80081e4 <HAL_UART_IRQHandler+0xc8>
 80081c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80081c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d00b      	beq.n	80081e4 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	2201      	movs	r2, #1
 80081d2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80081da:	f043 0201 	orr.w	r2, r3, #1
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80081e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80081e8:	f003 0302 	and.w	r3, r3, #2
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d011      	beq.n	8008214 <HAL_UART_IRQHandler+0xf8>
 80081f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80081f4:	f003 0301 	and.w	r3, r3, #1
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d00b      	beq.n	8008214 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	2202      	movs	r2, #2
 8008202:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800820a:	f043 0204 	orr.w	r2, r3, #4
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008214:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008218:	f003 0304 	and.w	r3, r3, #4
 800821c:	2b00      	cmp	r3, #0
 800821e:	d011      	beq.n	8008244 <HAL_UART_IRQHandler+0x128>
 8008220:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008224:	f003 0301 	and.w	r3, r3, #1
 8008228:	2b00      	cmp	r3, #0
 800822a:	d00b      	beq.n	8008244 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	2204      	movs	r2, #4
 8008232:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800823a:	f043 0202 	orr.w	r2, r3, #2
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008244:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008248:	f003 0308 	and.w	r3, r3, #8
 800824c:	2b00      	cmp	r3, #0
 800824e:	d017      	beq.n	8008280 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008250:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008254:	f003 0320 	and.w	r3, r3, #32
 8008258:	2b00      	cmp	r3, #0
 800825a:	d105      	bne.n	8008268 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800825c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8008260:	4b5a      	ldr	r3, [pc, #360]	@ (80083cc <HAL_UART_IRQHandler+0x2b0>)
 8008262:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008264:	2b00      	cmp	r3, #0
 8008266:	d00b      	beq.n	8008280 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	2208      	movs	r2, #8
 800826e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008276:	f043 0208 	orr.w	r2, r3, #8
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008280:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008284:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008288:	2b00      	cmp	r3, #0
 800828a:	d012      	beq.n	80082b2 <HAL_UART_IRQHandler+0x196>
 800828c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008290:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8008294:	2b00      	cmp	r3, #0
 8008296:	d00c      	beq.n	80082b2 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80082a0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80082a8:	f043 0220 	orr.w	r2, r3, #32
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	f000 823c 	beq.w	8008736 <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80082be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80082c2:	f003 0320 	and.w	r3, r3, #32
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d013      	beq.n	80082f2 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80082ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80082ce:	f003 0320 	and.w	r3, r3, #32
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d105      	bne.n	80082e2 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80082d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80082da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d007      	beq.n	80082f2 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d003      	beq.n	80082f2 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80082ee:	6878      	ldr	r0, [r7, #4]
 80082f0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80082f8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	689b      	ldr	r3, [r3, #8]
 8008302:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008306:	2b40      	cmp	r3, #64	@ 0x40
 8008308:	d005      	beq.n	8008316 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800830a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800830e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008312:	2b00      	cmp	r3, #0
 8008314:	d04f      	beq.n	80083b6 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008316:	6878      	ldr	r0, [r7, #4]
 8008318:	f000 ffc6 	bl	80092a8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	689b      	ldr	r3, [r3, #8]
 8008322:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008326:	2b40      	cmp	r3, #64	@ 0x40
 8008328:	d141      	bne.n	80083ae <HAL_UART_IRQHandler+0x292>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	3308      	adds	r3, #8
 8008330:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008334:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008338:	e853 3f00 	ldrex	r3, [r3]
 800833c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8008340:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008344:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008348:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	3308      	adds	r3, #8
 8008352:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8008356:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800835a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800835e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8008362:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8008366:	e841 2300 	strex	r3, r2, [r1]
 800836a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800836e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008372:	2b00      	cmp	r3, #0
 8008374:	d1d9      	bne.n	800832a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800837a:	2b00      	cmp	r3, #0
 800837c:	d013      	beq.n	80083a6 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008382:	4a14      	ldr	r2, [pc, #80]	@ (80083d4 <HAL_UART_IRQHandler+0x2b8>)
 8008384:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800838a:	4618      	mov	r0, r3
 800838c:	f7fc fb08 	bl	80049a0 <HAL_DMA_Abort_IT>
 8008390:	4603      	mov	r3, r0
 8008392:	2b00      	cmp	r3, #0
 8008394:	d017      	beq.n	80083c6 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800839a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800839c:	687a      	ldr	r2, [r7, #4]
 800839e:	6fd2      	ldr	r2, [r2, #124]	@ 0x7c
 80083a0:	4610      	mov	r0, r2
 80083a2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80083a4:	e00f      	b.n	80083c6 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80083a6:	6878      	ldr	r0, [r7, #4]
 80083a8:	f000 f9d9 	bl	800875e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80083ac:	e00b      	b.n	80083c6 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80083ae:	6878      	ldr	r0, [r7, #4]
 80083b0:	f000 f9d5 	bl	800875e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80083b4:	e007      	b.n	80083c6 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80083b6:	6878      	ldr	r0, [r7, #4]
 80083b8:	f000 f9d1 	bl	800875e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	2200      	movs	r2, #0
 80083c0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      }
    }
    return;
 80083c4:	e1b7      	b.n	8008736 <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80083c6:	bf00      	nop
    return;
 80083c8:	e1b5      	b.n	8008736 <HAL_UART_IRQHandler+0x61a>
 80083ca:	bf00      	nop
 80083cc:	10000001 	.word	0x10000001
 80083d0:	04000120 	.word	0x04000120
 80083d4:	080094a9 	.word	0x080094a9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80083dc:	2b01      	cmp	r3, #1
 80083de:	f040 814a 	bne.w	8008676 <HAL_UART_IRQHandler+0x55a>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 80083e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80083e6:	f003 0310 	and.w	r3, r3, #16
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	f000 8143 	beq.w	8008676 <HAL_UART_IRQHandler+0x55a>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 80083f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80083f4:	f003 0310 	and.w	r3, r3, #16
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	f000 813c 	beq.w	8008676 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	2210      	movs	r2, #16
 8008404:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	689b      	ldr	r3, [r3, #8]
 800840c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008410:	2b40      	cmp	r3, #64	@ 0x40
 8008412:	f040 80b5 	bne.w	8008580 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	685b      	ldr	r3, [r3, #4]
 800841e:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if (  (nb_remaining_rx_data > 0U)
 8008422:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8008426:	2b00      	cmp	r3, #0
 8008428:	f000 8187 	beq.w	800873a <HAL_UART_IRQHandler+0x61e>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008432:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008436:	429a      	cmp	r2, r3
 8008438:	f080 817f 	bcs.w	800873a <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008442:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	f003 0320 	and.w	r3, r3, #32
 8008452:	2b00      	cmp	r3, #0
 8008454:	f040 8086 	bne.w	8008564 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008460:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008464:	e853 3f00 	ldrex	r3, [r3]
 8008468:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800846c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008470:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008474:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	461a      	mov	r2, r3
 800847e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008482:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008486:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800848a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800848e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8008492:	e841 2300 	strex	r3, r2, [r1]
 8008496:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800849a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d1da      	bne.n	8008458 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	3308      	adds	r3, #8
 80084a8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084aa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80084ac:	e853 3f00 	ldrex	r3, [r3]
 80084b0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80084b2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80084b4:	f023 0301 	bic.w	r3, r3, #1
 80084b8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	3308      	adds	r3, #8
 80084c2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80084c6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80084ca:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084cc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80084ce:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80084d2:	e841 2300 	strex	r3, r2, [r1]
 80084d6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80084d8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d1e1      	bne.n	80084a2 <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	3308      	adds	r3, #8
 80084e4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084e6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80084e8:	e853 3f00 	ldrex	r3, [r3]
 80084ec:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80084ee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80084f0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80084f4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	3308      	adds	r3, #8
 80084fe:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8008502:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008504:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008506:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008508:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800850a:	e841 2300 	strex	r3, r2, [r1]
 800850e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008510:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008512:	2b00      	cmp	r3, #0
 8008514:	d1e3      	bne.n	80084de <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	2220      	movs	r2, #32
 800851a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	2200      	movs	r2, #0
 8008522:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800852a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800852c:	e853 3f00 	ldrex	r3, [r3]
 8008530:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008532:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008534:	f023 0310 	bic.w	r3, r3, #16
 8008538:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	461a      	mov	r2, r3
 8008542:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008546:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008548:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800854a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800854c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800854e:	e841 2300 	strex	r3, r2, [r1]
 8008552:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008554:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008556:	2b00      	cmp	r3, #0
 8008558:	d1e4      	bne.n	8008524 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800855e:	4618      	mov	r0, r3
 8008560:	f7fc f9c0 	bl	80048e4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008570:	b29b      	uxth	r3, r3
 8008572:	1ad3      	subs	r3, r2, r3
 8008574:	b29b      	uxth	r3, r3
 8008576:	4619      	mov	r1, r3
 8008578:	6878      	ldr	r0, [r7, #4]
 800857a:	f000 f8f9 	bl	8008770 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800857e:	e0dc      	b.n	800873a <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800858c:	b29b      	uxth	r3, r3
 800858e:	1ad3      	subs	r3, r2, r3
 8008590:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if (  (huart->RxXferCount > 0U)
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800859a:	b29b      	uxth	r3, r3
 800859c:	2b00      	cmp	r3, #0
 800859e:	f000 80ce 	beq.w	800873e <HAL_UART_IRQHandler+0x622>
          &&(nb_rx_data > 0U) )
 80085a2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	f000 80c9 	beq.w	800873e <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085b4:	e853 3f00 	ldrex	r3, [r3]
 80085b8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80085ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80085bc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80085c0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	461a      	mov	r2, r3
 80085ca:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80085ce:	647b      	str	r3, [r7, #68]	@ 0x44
 80085d0:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085d2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80085d4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80085d6:	e841 2300 	strex	r3, r2, [r1]
 80085da:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80085dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d1e4      	bne.n	80085ac <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	3308      	adds	r3, #8
 80085e8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085ec:	e853 3f00 	ldrex	r3, [r3]
 80085f0:	623b      	str	r3, [r7, #32]
   return(result);
 80085f2:	6a3b      	ldr	r3, [r7, #32]
 80085f4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80085f8:	f023 0301 	bic.w	r3, r3, #1
 80085fc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	3308      	adds	r3, #8
 8008606:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800860a:	633a      	str	r2, [r7, #48]	@ 0x30
 800860c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800860e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008610:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008612:	e841 2300 	strex	r3, r2, [r1]
 8008616:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008618:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800861a:	2b00      	cmp	r3, #0
 800861c:	d1e1      	bne.n	80085e2 <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	2220      	movs	r2, #32
 8008622:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	2200      	movs	r2, #0
 800862a:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	2200      	movs	r2, #0
 8008630:	671a      	str	r2, [r3, #112]	@ 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008638:	693b      	ldr	r3, [r7, #16]
 800863a:	e853 3f00 	ldrex	r3, [r3]
 800863e:	60fb      	str	r3, [r7, #12]
   return(result);
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	f023 0310 	bic.w	r3, r3, #16
 8008646:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	461a      	mov	r2, r3
 8008650:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8008654:	61fb      	str	r3, [r7, #28]
 8008656:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008658:	69b9      	ldr	r1, [r7, #24]
 800865a:	69fa      	ldr	r2, [r7, #28]
 800865c:	e841 2300 	strex	r3, r2, [r1]
 8008660:	617b      	str	r3, [r7, #20]
   return(result);
 8008662:	697b      	ldr	r3, [r7, #20]
 8008664:	2b00      	cmp	r3, #0
 8008666:	d1e4      	bne.n	8008632 <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008668:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800866c:	4619      	mov	r1, r3
 800866e:	6878      	ldr	r0, [r7, #4]
 8008670:	f000 f87e 	bl	8008770 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8008674:	e063      	b.n	800873e <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008676:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800867a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800867e:	2b00      	cmp	r3, #0
 8008680:	d00e      	beq.n	80086a0 <HAL_UART_IRQHandler+0x584>
 8008682:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008686:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800868a:	2b00      	cmp	r3, #0
 800868c:	d008      	beq.n	80086a0 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8008696:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008698:	6878      	ldr	r0, [r7, #4]
 800869a:	f001 fba3 	bl	8009de4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800869e:	e051      	b.n	8008744 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80086a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80086a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d014      	beq.n	80086d6 <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80086ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80086b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d105      	bne.n	80086c4 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80086b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80086bc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d008      	beq.n	80086d6 <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d03a      	beq.n	8008742 <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80086d0:	6878      	ldr	r0, [r7, #4]
 80086d2:	4798      	blx	r3
    }
    return;
 80086d4:	e035      	b.n	8008742 <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80086d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80086da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d009      	beq.n	80086f6 <HAL_UART_IRQHandler+0x5da>
 80086e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80086e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d003      	beq.n	80086f6 <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 80086ee:	6878      	ldr	r0, [r7, #4]
 80086f0:	f000 fef0 	bl	80094d4 <UART_EndTransmit_IT>
    return;
 80086f4:	e026      	b.n	8008744 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80086f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80086fa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d009      	beq.n	8008716 <HAL_UART_IRQHandler+0x5fa>
 8008702:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008706:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800870a:	2b00      	cmp	r3, #0
 800870c:	d003      	beq.n	8008716 <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800870e:	6878      	ldr	r0, [r7, #4]
 8008710:	f001 fb7a 	bl	8009e08 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008714:	e016      	b.n	8008744 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8008716:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800871a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800871e:	2b00      	cmp	r3, #0
 8008720:	d010      	beq.n	8008744 <HAL_UART_IRQHandler+0x628>
 8008722:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008726:	2b00      	cmp	r3, #0
 8008728:	da0c      	bge.n	8008744 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800872a:	6878      	ldr	r0, [r7, #4]
 800872c:	f001 fb63 	bl	8009df6 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008730:	e008      	b.n	8008744 <HAL_UART_IRQHandler+0x628>
      return;
 8008732:	bf00      	nop
 8008734:	e006      	b.n	8008744 <HAL_UART_IRQHandler+0x628>
    return;
 8008736:	bf00      	nop
 8008738:	e004      	b.n	8008744 <HAL_UART_IRQHandler+0x628>
      return;
 800873a:	bf00      	nop
 800873c:	e002      	b.n	8008744 <HAL_UART_IRQHandler+0x628>
      return;
 800873e:	bf00      	nop
 8008740:	e000      	b.n	8008744 <HAL_UART_IRQHandler+0x628>
    return;
 8008742:	bf00      	nop
  }
}
 8008744:	37e8      	adds	r7, #232	@ 0xe8
 8008746:	46bd      	mov	sp, r7
 8008748:	bd80      	pop	{r7, pc}
 800874a:	bf00      	nop

0800874c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800874c:	b480      	push	{r7}
 800874e:	b083      	sub	sp, #12
 8008750:	af00      	add	r7, sp, #0
 8008752:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8008754:	bf00      	nop
 8008756:	370c      	adds	r7, #12
 8008758:	46bd      	mov	sp, r7
 800875a:	bc80      	pop	{r7}
 800875c:	4770      	bx	lr

0800875e <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800875e:	b480      	push	{r7}
 8008760:	b083      	sub	sp, #12
 8008762:	af00      	add	r7, sp, #0
 8008764:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008766:	bf00      	nop
 8008768:	370c      	adds	r7, #12
 800876a:	46bd      	mov	sp, r7
 800876c:	bc80      	pop	{r7}
 800876e:	4770      	bx	lr

08008770 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008770:	b480      	push	{r7}
 8008772:	b083      	sub	sp, #12
 8008774:	af00      	add	r7, sp, #0
 8008776:	6078      	str	r0, [r7, #4]
 8008778:	460b      	mov	r3, r1
 800877a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800877c:	bf00      	nop
 800877e:	370c      	adds	r7, #12
 8008780:	46bd      	mov	sp, r7
 8008782:	bc80      	pop	{r7}
 8008784:	4770      	bx	lr
	...

08008788 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008788:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800878c:	b08c      	sub	sp, #48	@ 0x30
 800878e:	af00      	add	r7, sp, #0
 8008790:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008792:	2300      	movs	r3, #0
 8008794:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008798:	697b      	ldr	r3, [r7, #20]
 800879a:	689a      	ldr	r2, [r3, #8]
 800879c:	697b      	ldr	r3, [r7, #20]
 800879e:	691b      	ldr	r3, [r3, #16]
 80087a0:	431a      	orrs	r2, r3
 80087a2:	697b      	ldr	r3, [r7, #20]
 80087a4:	695b      	ldr	r3, [r3, #20]
 80087a6:	431a      	orrs	r2, r3
 80087a8:	697b      	ldr	r3, [r7, #20]
 80087aa:	69db      	ldr	r3, [r3, #28]
 80087ac:	4313      	orrs	r3, r2
 80087ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80087b0:	697b      	ldr	r3, [r7, #20]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	681a      	ldr	r2, [r3, #0]
 80087b6:	4b94      	ldr	r3, [pc, #592]	@ (8008a08 <UART_SetConfig+0x280>)
 80087b8:	4013      	ands	r3, r2
 80087ba:	697a      	ldr	r2, [r7, #20]
 80087bc:	6812      	ldr	r2, [r2, #0]
 80087be:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80087c0:	430b      	orrs	r3, r1
 80087c2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80087c4:	697b      	ldr	r3, [r7, #20]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	685b      	ldr	r3, [r3, #4]
 80087ca:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80087ce:	697b      	ldr	r3, [r7, #20]
 80087d0:	68da      	ldr	r2, [r3, #12]
 80087d2:	697b      	ldr	r3, [r7, #20]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	430a      	orrs	r2, r1
 80087d8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80087da:	697b      	ldr	r3, [r7, #20]
 80087dc:	699b      	ldr	r3, [r3, #24]
 80087de:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80087e0:	697b      	ldr	r3, [r7, #20]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	4a89      	ldr	r2, [pc, #548]	@ (8008a0c <UART_SetConfig+0x284>)
 80087e6:	4293      	cmp	r3, r2
 80087e8:	d004      	beq.n	80087f4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80087ea:	697b      	ldr	r3, [r7, #20]
 80087ec:	6a1b      	ldr	r3, [r3, #32]
 80087ee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80087f0:	4313      	orrs	r3, r2
 80087f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80087f4:	697b      	ldr	r3, [r7, #20]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	689b      	ldr	r3, [r3, #8]
 80087fa:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80087fe:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8008802:	697a      	ldr	r2, [r7, #20]
 8008804:	6812      	ldr	r2, [r2, #0]
 8008806:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008808:	430b      	orrs	r3, r1
 800880a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800880c:	697b      	ldr	r3, [r7, #20]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008812:	f023 010f 	bic.w	r1, r3, #15
 8008816:	697b      	ldr	r3, [r7, #20]
 8008818:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800881a:	697b      	ldr	r3, [r7, #20]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	430a      	orrs	r2, r1
 8008820:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008822:	697b      	ldr	r3, [r7, #20]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	4a7a      	ldr	r2, [pc, #488]	@ (8008a10 <UART_SetConfig+0x288>)
 8008828:	4293      	cmp	r3, r2
 800882a:	d127      	bne.n	800887c <UART_SetConfig+0xf4>
 800882c:	2003      	movs	r0, #3
 800882e:	f7ff fb1b 	bl	8007e68 <LL_RCC_GetUSARTClockSource>
 8008832:	4603      	mov	r3, r0
 8008834:	f5a3 3340 	sub.w	r3, r3, #196608	@ 0x30000
 8008838:	2b03      	cmp	r3, #3
 800883a:	d81b      	bhi.n	8008874 <UART_SetConfig+0xec>
 800883c:	a201      	add	r2, pc, #4	@ (adr r2, 8008844 <UART_SetConfig+0xbc>)
 800883e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008842:	bf00      	nop
 8008844:	08008855 	.word	0x08008855
 8008848:	08008865 	.word	0x08008865
 800884c:	0800885d 	.word	0x0800885d
 8008850:	0800886d 	.word	0x0800886d
 8008854:	2301      	movs	r3, #1
 8008856:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800885a:	e080      	b.n	800895e <UART_SetConfig+0x1d6>
 800885c:	2302      	movs	r3, #2
 800885e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008862:	e07c      	b.n	800895e <UART_SetConfig+0x1d6>
 8008864:	2304      	movs	r3, #4
 8008866:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800886a:	e078      	b.n	800895e <UART_SetConfig+0x1d6>
 800886c:	2308      	movs	r3, #8
 800886e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008872:	e074      	b.n	800895e <UART_SetConfig+0x1d6>
 8008874:	2310      	movs	r3, #16
 8008876:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800887a:	e070      	b.n	800895e <UART_SetConfig+0x1d6>
 800887c:	697b      	ldr	r3, [r7, #20]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	4a64      	ldr	r2, [pc, #400]	@ (8008a14 <UART_SetConfig+0x28c>)
 8008882:	4293      	cmp	r3, r2
 8008884:	d138      	bne.n	80088f8 <UART_SetConfig+0x170>
 8008886:	200c      	movs	r0, #12
 8008888:	f7ff faee 	bl	8007e68 <LL_RCC_GetUSARTClockSource>
 800888c:	4603      	mov	r3, r0
 800888e:	f5a3 2340 	sub.w	r3, r3, #786432	@ 0xc0000
 8008892:	2b0c      	cmp	r3, #12
 8008894:	d82c      	bhi.n	80088f0 <UART_SetConfig+0x168>
 8008896:	a201      	add	r2, pc, #4	@ (adr r2, 800889c <UART_SetConfig+0x114>)
 8008898:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800889c:	080088d1 	.word	0x080088d1
 80088a0:	080088f1 	.word	0x080088f1
 80088a4:	080088f1 	.word	0x080088f1
 80088a8:	080088f1 	.word	0x080088f1
 80088ac:	080088e1 	.word	0x080088e1
 80088b0:	080088f1 	.word	0x080088f1
 80088b4:	080088f1 	.word	0x080088f1
 80088b8:	080088f1 	.word	0x080088f1
 80088bc:	080088d9 	.word	0x080088d9
 80088c0:	080088f1 	.word	0x080088f1
 80088c4:	080088f1 	.word	0x080088f1
 80088c8:	080088f1 	.word	0x080088f1
 80088cc:	080088e9 	.word	0x080088e9
 80088d0:	2300      	movs	r3, #0
 80088d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80088d6:	e042      	b.n	800895e <UART_SetConfig+0x1d6>
 80088d8:	2302      	movs	r3, #2
 80088da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80088de:	e03e      	b.n	800895e <UART_SetConfig+0x1d6>
 80088e0:	2304      	movs	r3, #4
 80088e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80088e6:	e03a      	b.n	800895e <UART_SetConfig+0x1d6>
 80088e8:	2308      	movs	r3, #8
 80088ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80088ee:	e036      	b.n	800895e <UART_SetConfig+0x1d6>
 80088f0:	2310      	movs	r3, #16
 80088f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80088f6:	e032      	b.n	800895e <UART_SetConfig+0x1d6>
 80088f8:	697b      	ldr	r3, [r7, #20]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	4a43      	ldr	r2, [pc, #268]	@ (8008a0c <UART_SetConfig+0x284>)
 80088fe:	4293      	cmp	r3, r2
 8008900:	d12a      	bne.n	8008958 <UART_SetConfig+0x1d0>
 8008902:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 8008906:	f7ff fac1 	bl	8007e8c <LL_RCC_GetLPUARTClockSource>
 800890a:	4603      	mov	r3, r0
 800890c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008910:	d01a      	beq.n	8008948 <UART_SetConfig+0x1c0>
 8008912:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008916:	d81b      	bhi.n	8008950 <UART_SetConfig+0x1c8>
 8008918:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800891c:	d00c      	beq.n	8008938 <UART_SetConfig+0x1b0>
 800891e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008922:	d815      	bhi.n	8008950 <UART_SetConfig+0x1c8>
 8008924:	2b00      	cmp	r3, #0
 8008926:	d003      	beq.n	8008930 <UART_SetConfig+0x1a8>
 8008928:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800892c:	d008      	beq.n	8008940 <UART_SetConfig+0x1b8>
 800892e:	e00f      	b.n	8008950 <UART_SetConfig+0x1c8>
 8008930:	2300      	movs	r3, #0
 8008932:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008936:	e012      	b.n	800895e <UART_SetConfig+0x1d6>
 8008938:	2302      	movs	r3, #2
 800893a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800893e:	e00e      	b.n	800895e <UART_SetConfig+0x1d6>
 8008940:	2304      	movs	r3, #4
 8008942:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008946:	e00a      	b.n	800895e <UART_SetConfig+0x1d6>
 8008948:	2308      	movs	r3, #8
 800894a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800894e:	e006      	b.n	800895e <UART_SetConfig+0x1d6>
 8008950:	2310      	movs	r3, #16
 8008952:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008956:	e002      	b.n	800895e <UART_SetConfig+0x1d6>
 8008958:	2310      	movs	r3, #16
 800895a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800895e:	697b      	ldr	r3, [r7, #20]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	4a2a      	ldr	r2, [pc, #168]	@ (8008a0c <UART_SetConfig+0x284>)
 8008964:	4293      	cmp	r3, r2
 8008966:	f040 80a4 	bne.w	8008ab2 <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800896a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800896e:	2b08      	cmp	r3, #8
 8008970:	d823      	bhi.n	80089ba <UART_SetConfig+0x232>
 8008972:	a201      	add	r2, pc, #4	@ (adr r2, 8008978 <UART_SetConfig+0x1f0>)
 8008974:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008978:	0800899d 	.word	0x0800899d
 800897c:	080089bb 	.word	0x080089bb
 8008980:	080089a5 	.word	0x080089a5
 8008984:	080089bb 	.word	0x080089bb
 8008988:	080089ab 	.word	0x080089ab
 800898c:	080089bb 	.word	0x080089bb
 8008990:	080089bb 	.word	0x080089bb
 8008994:	080089bb 	.word	0x080089bb
 8008998:	080089b3 	.word	0x080089b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800899c:	f7fd ff50 	bl	8006840 <HAL_RCC_GetPCLK1Freq>
 80089a0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80089a2:	e010      	b.n	80089c6 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80089a4:	4b1c      	ldr	r3, [pc, #112]	@ (8008a18 <UART_SetConfig+0x290>)
 80089a6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80089a8:	e00d      	b.n	80089c6 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80089aa:	f7fd fe95 	bl	80066d8 <HAL_RCC_GetSysClockFreq>
 80089ae:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80089b0:	e009      	b.n	80089c6 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80089b2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80089b6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80089b8:	e005      	b.n	80089c6 <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 80089ba:	2300      	movs	r3, #0
 80089bc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80089be:	2301      	movs	r3, #1
 80089c0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80089c4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80089c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	f000 8137 	beq.w	8008c3c <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80089ce:	697b      	ldr	r3, [r7, #20]
 80089d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80089d2:	4a12      	ldr	r2, [pc, #72]	@ (8008a1c <UART_SetConfig+0x294>)
 80089d4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80089d8:	461a      	mov	r2, r3
 80089da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089dc:	fbb3 f3f2 	udiv	r3, r3, r2
 80089e0:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80089e2:	697b      	ldr	r3, [r7, #20]
 80089e4:	685a      	ldr	r2, [r3, #4]
 80089e6:	4613      	mov	r3, r2
 80089e8:	005b      	lsls	r3, r3, #1
 80089ea:	4413      	add	r3, r2
 80089ec:	69ba      	ldr	r2, [r7, #24]
 80089ee:	429a      	cmp	r2, r3
 80089f0:	d305      	bcc.n	80089fe <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80089f2:	697b      	ldr	r3, [r7, #20]
 80089f4:	685b      	ldr	r3, [r3, #4]
 80089f6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80089f8:	69ba      	ldr	r2, [r7, #24]
 80089fa:	429a      	cmp	r2, r3
 80089fc:	d910      	bls.n	8008a20 <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 80089fe:	2301      	movs	r3, #1
 8008a00:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008a04:	e11a      	b.n	8008c3c <UART_SetConfig+0x4b4>
 8008a06:	bf00      	nop
 8008a08:	cfff69f3 	.word	0xcfff69f3
 8008a0c:	40008000 	.word	0x40008000
 8008a10:	40013800 	.word	0x40013800
 8008a14:	40004400 	.word	0x40004400
 8008a18:	00f42400 	.word	0x00f42400
 8008a1c:	0801f47c 	.word	0x0801f47c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008a20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a22:	2200      	movs	r2, #0
 8008a24:	60bb      	str	r3, [r7, #8]
 8008a26:	60fa      	str	r2, [r7, #12]
 8008a28:	697b      	ldr	r3, [r7, #20]
 8008a2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a2c:	4a8e      	ldr	r2, [pc, #568]	@ (8008c68 <UART_SetConfig+0x4e0>)
 8008a2e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008a32:	b29b      	uxth	r3, r3
 8008a34:	2200      	movs	r2, #0
 8008a36:	603b      	str	r3, [r7, #0]
 8008a38:	607a      	str	r2, [r7, #4]
 8008a3a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008a3e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008a42:	f7f8 fb2d 	bl	80010a0 <__aeabi_uldivmod>
 8008a46:	4602      	mov	r2, r0
 8008a48:	460b      	mov	r3, r1
 8008a4a:	4610      	mov	r0, r2
 8008a4c:	4619      	mov	r1, r3
 8008a4e:	f04f 0200 	mov.w	r2, #0
 8008a52:	f04f 0300 	mov.w	r3, #0
 8008a56:	020b      	lsls	r3, r1, #8
 8008a58:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008a5c:	0202      	lsls	r2, r0, #8
 8008a5e:	6979      	ldr	r1, [r7, #20]
 8008a60:	6849      	ldr	r1, [r1, #4]
 8008a62:	0849      	lsrs	r1, r1, #1
 8008a64:	2000      	movs	r0, #0
 8008a66:	460c      	mov	r4, r1
 8008a68:	4605      	mov	r5, r0
 8008a6a:	eb12 0804 	adds.w	r8, r2, r4
 8008a6e:	eb43 0905 	adc.w	r9, r3, r5
 8008a72:	697b      	ldr	r3, [r7, #20]
 8008a74:	685b      	ldr	r3, [r3, #4]
 8008a76:	2200      	movs	r2, #0
 8008a78:	469a      	mov	sl, r3
 8008a7a:	4693      	mov	fp, r2
 8008a7c:	4652      	mov	r2, sl
 8008a7e:	465b      	mov	r3, fp
 8008a80:	4640      	mov	r0, r8
 8008a82:	4649      	mov	r1, r9
 8008a84:	f7f8 fb0c 	bl	80010a0 <__aeabi_uldivmod>
 8008a88:	4602      	mov	r2, r0
 8008a8a:	460b      	mov	r3, r1
 8008a8c:	4613      	mov	r3, r2
 8008a8e:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008a90:	6a3b      	ldr	r3, [r7, #32]
 8008a92:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008a96:	d308      	bcc.n	8008aaa <UART_SetConfig+0x322>
 8008a98:	6a3b      	ldr	r3, [r7, #32]
 8008a9a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008a9e:	d204      	bcs.n	8008aaa <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 8008aa0:	697b      	ldr	r3, [r7, #20]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	6a3a      	ldr	r2, [r7, #32]
 8008aa6:	60da      	str	r2, [r3, #12]
 8008aa8:	e0c8      	b.n	8008c3c <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 8008aaa:	2301      	movs	r3, #1
 8008aac:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008ab0:	e0c4      	b.n	8008c3c <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008ab2:	697b      	ldr	r3, [r7, #20]
 8008ab4:	69db      	ldr	r3, [r3, #28]
 8008ab6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008aba:	d168      	bne.n	8008b8e <UART_SetConfig+0x406>
  {
    switch (clocksource)
 8008abc:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008ac0:	2b08      	cmp	r3, #8
 8008ac2:	d828      	bhi.n	8008b16 <UART_SetConfig+0x38e>
 8008ac4:	a201      	add	r2, pc, #4	@ (adr r2, 8008acc <UART_SetConfig+0x344>)
 8008ac6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008aca:	bf00      	nop
 8008acc:	08008af1 	.word	0x08008af1
 8008ad0:	08008af9 	.word	0x08008af9
 8008ad4:	08008b01 	.word	0x08008b01
 8008ad8:	08008b17 	.word	0x08008b17
 8008adc:	08008b07 	.word	0x08008b07
 8008ae0:	08008b17 	.word	0x08008b17
 8008ae4:	08008b17 	.word	0x08008b17
 8008ae8:	08008b17 	.word	0x08008b17
 8008aec:	08008b0f 	.word	0x08008b0f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008af0:	f7fd fea6 	bl	8006840 <HAL_RCC_GetPCLK1Freq>
 8008af4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008af6:	e014      	b.n	8008b22 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008af8:	f7fd feb4 	bl	8006864 <HAL_RCC_GetPCLK2Freq>
 8008afc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008afe:	e010      	b.n	8008b22 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008b00:	4b5a      	ldr	r3, [pc, #360]	@ (8008c6c <UART_SetConfig+0x4e4>)
 8008b02:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008b04:	e00d      	b.n	8008b22 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008b06:	f7fd fde7 	bl	80066d8 <HAL_RCC_GetSysClockFreq>
 8008b0a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008b0c:	e009      	b.n	8008b22 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008b0e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008b12:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008b14:	e005      	b.n	8008b22 <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 8008b16:	2300      	movs	r3, #0
 8008b18:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8008b1a:	2301      	movs	r3, #1
 8008b1c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008b20:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008b22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	f000 8089 	beq.w	8008c3c <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008b2a:	697b      	ldr	r3, [r7, #20]
 8008b2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b2e:	4a4e      	ldr	r2, [pc, #312]	@ (8008c68 <UART_SetConfig+0x4e0>)
 8008b30:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008b34:	461a      	mov	r2, r3
 8008b36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b38:	fbb3 f3f2 	udiv	r3, r3, r2
 8008b3c:	005a      	lsls	r2, r3, #1
 8008b3e:	697b      	ldr	r3, [r7, #20]
 8008b40:	685b      	ldr	r3, [r3, #4]
 8008b42:	085b      	lsrs	r3, r3, #1
 8008b44:	441a      	add	r2, r3
 8008b46:	697b      	ldr	r3, [r7, #20]
 8008b48:	685b      	ldr	r3, [r3, #4]
 8008b4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b4e:	b29b      	uxth	r3, r3
 8008b50:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008b52:	6a3b      	ldr	r3, [r7, #32]
 8008b54:	2b0f      	cmp	r3, #15
 8008b56:	d916      	bls.n	8008b86 <UART_SetConfig+0x3fe>
 8008b58:	6a3b      	ldr	r3, [r7, #32]
 8008b5a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008b5e:	d212      	bcs.n	8008b86 <UART_SetConfig+0x3fe>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008b60:	6a3b      	ldr	r3, [r7, #32]
 8008b62:	b29b      	uxth	r3, r3
 8008b64:	f023 030f 	bic.w	r3, r3, #15
 8008b68:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008b6a:	6a3b      	ldr	r3, [r7, #32]
 8008b6c:	085b      	lsrs	r3, r3, #1
 8008b6e:	b29b      	uxth	r3, r3
 8008b70:	f003 0307 	and.w	r3, r3, #7
 8008b74:	b29a      	uxth	r2, r3
 8008b76:	8bfb      	ldrh	r3, [r7, #30]
 8008b78:	4313      	orrs	r3, r2
 8008b7a:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8008b7c:	697b      	ldr	r3, [r7, #20]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	8bfa      	ldrh	r2, [r7, #30]
 8008b82:	60da      	str	r2, [r3, #12]
 8008b84:	e05a      	b.n	8008c3c <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8008b86:	2301      	movs	r3, #1
 8008b88:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008b8c:	e056      	b.n	8008c3c <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008b8e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008b92:	2b08      	cmp	r3, #8
 8008b94:	d827      	bhi.n	8008be6 <UART_SetConfig+0x45e>
 8008b96:	a201      	add	r2, pc, #4	@ (adr r2, 8008b9c <UART_SetConfig+0x414>)
 8008b98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b9c:	08008bc1 	.word	0x08008bc1
 8008ba0:	08008bc9 	.word	0x08008bc9
 8008ba4:	08008bd1 	.word	0x08008bd1
 8008ba8:	08008be7 	.word	0x08008be7
 8008bac:	08008bd7 	.word	0x08008bd7
 8008bb0:	08008be7 	.word	0x08008be7
 8008bb4:	08008be7 	.word	0x08008be7
 8008bb8:	08008be7 	.word	0x08008be7
 8008bbc:	08008bdf 	.word	0x08008bdf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008bc0:	f7fd fe3e 	bl	8006840 <HAL_RCC_GetPCLK1Freq>
 8008bc4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008bc6:	e014      	b.n	8008bf2 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008bc8:	f7fd fe4c 	bl	8006864 <HAL_RCC_GetPCLK2Freq>
 8008bcc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008bce:	e010      	b.n	8008bf2 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008bd0:	4b26      	ldr	r3, [pc, #152]	@ (8008c6c <UART_SetConfig+0x4e4>)
 8008bd2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008bd4:	e00d      	b.n	8008bf2 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008bd6:	f7fd fd7f 	bl	80066d8 <HAL_RCC_GetSysClockFreq>
 8008bda:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008bdc:	e009      	b.n	8008bf2 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008bde:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008be2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008be4:	e005      	b.n	8008bf2 <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 8008be6:	2300      	movs	r3, #0
 8008be8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8008bea:	2301      	movs	r3, #1
 8008bec:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008bf0:	bf00      	nop
    }

    if (pclk != 0U)
 8008bf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d021      	beq.n	8008c3c <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008bf8:	697b      	ldr	r3, [r7, #20]
 8008bfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008bfc:	4a1a      	ldr	r2, [pc, #104]	@ (8008c68 <UART_SetConfig+0x4e0>)
 8008bfe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008c02:	461a      	mov	r2, r3
 8008c04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c06:	fbb3 f2f2 	udiv	r2, r3, r2
 8008c0a:	697b      	ldr	r3, [r7, #20]
 8008c0c:	685b      	ldr	r3, [r3, #4]
 8008c0e:	085b      	lsrs	r3, r3, #1
 8008c10:	441a      	add	r2, r3
 8008c12:	697b      	ldr	r3, [r7, #20]
 8008c14:	685b      	ldr	r3, [r3, #4]
 8008c16:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c1a:	b29b      	uxth	r3, r3
 8008c1c:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008c1e:	6a3b      	ldr	r3, [r7, #32]
 8008c20:	2b0f      	cmp	r3, #15
 8008c22:	d908      	bls.n	8008c36 <UART_SetConfig+0x4ae>
 8008c24:	6a3b      	ldr	r3, [r7, #32]
 8008c26:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008c2a:	d204      	bcs.n	8008c36 <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = usartdiv;
 8008c2c:	697b      	ldr	r3, [r7, #20]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	6a3a      	ldr	r2, [r7, #32]
 8008c32:	60da      	str	r2, [r3, #12]
 8008c34:	e002      	b.n	8008c3c <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8008c36:	2301      	movs	r3, #1
 8008c38:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008c3c:	697b      	ldr	r3, [r7, #20]
 8008c3e:	2201      	movs	r2, #1
 8008c40:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8008c44:	697b      	ldr	r3, [r7, #20]
 8008c46:	2201      	movs	r2, #1
 8008c48:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008c4c:	697b      	ldr	r3, [r7, #20]
 8008c4e:	2200      	movs	r2, #0
 8008c50:	671a      	str	r2, [r3, #112]	@ 0x70
  huart->TxISR = NULL;
 8008c52:	697b      	ldr	r3, [r7, #20]
 8008c54:	2200      	movs	r2, #0
 8008c56:	675a      	str	r2, [r3, #116]	@ 0x74

  return ret;
 8008c58:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8008c5c:	4618      	mov	r0, r3
 8008c5e:	3730      	adds	r7, #48	@ 0x30
 8008c60:	46bd      	mov	sp, r7
 8008c62:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008c66:	bf00      	nop
 8008c68:	0801f47c 	.word	0x0801f47c
 8008c6c:	00f42400 	.word	0x00f42400

08008c70 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008c70:	b480      	push	{r7}
 8008c72:	b083      	sub	sp, #12
 8008c74:	af00      	add	r7, sp, #0
 8008c76:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c7c:	f003 0301 	and.w	r3, r3, #1
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d00a      	beq.n	8008c9a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	685b      	ldr	r3, [r3, #4]
 8008c8a:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	430a      	orrs	r2, r1
 8008c98:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c9e:	f003 0302 	and.w	r3, r3, #2
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d00a      	beq.n	8008cbc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	685b      	ldr	r3, [r3, #4]
 8008cac:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	430a      	orrs	r2, r1
 8008cba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008cc0:	f003 0304 	and.w	r3, r3, #4
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d00a      	beq.n	8008cde <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	685b      	ldr	r3, [r3, #4]
 8008cce:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	430a      	orrs	r2, r1
 8008cdc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ce2:	f003 0308 	and.w	r3, r3, #8
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d00a      	beq.n	8008d00 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	685b      	ldr	r3, [r3, #4]
 8008cf0:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	430a      	orrs	r2, r1
 8008cfe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d04:	f003 0310 	and.w	r3, r3, #16
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d00a      	beq.n	8008d22 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	689b      	ldr	r3, [r3, #8]
 8008d12:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	430a      	orrs	r2, r1
 8008d20:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d26:	f003 0320 	and.w	r3, r3, #32
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d00a      	beq.n	8008d44 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	689b      	ldr	r3, [r3, #8]
 8008d34:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	430a      	orrs	r2, r1
 8008d42:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d01a      	beq.n	8008d86 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	685b      	ldr	r3, [r3, #4]
 8008d56:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	430a      	orrs	r2, r1
 8008d64:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008d6a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008d6e:	d10a      	bne.n	8008d86 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	685b      	ldr	r3, [r3, #4]
 8008d76:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	430a      	orrs	r2, r1
 8008d84:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d00a      	beq.n	8008da8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	685b      	ldr	r3, [r3, #4]
 8008d98:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	430a      	orrs	r2, r1
 8008da6:	605a      	str	r2, [r3, #4]
  }
}
 8008da8:	bf00      	nop
 8008daa:	370c      	adds	r7, #12
 8008dac:	46bd      	mov	sp, r7
 8008dae:	bc80      	pop	{r7}
 8008db0:	4770      	bx	lr

08008db2 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008db2:	b580      	push	{r7, lr}
 8008db4:	b086      	sub	sp, #24
 8008db6:	af02      	add	r7, sp, #8
 8008db8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	2200      	movs	r2, #0
 8008dbe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008dc2:	f7f9 fa19 	bl	80021f8 <HAL_GetTick>
 8008dc6:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	f003 0308 	and.w	r3, r3, #8
 8008dd2:	2b08      	cmp	r3, #8
 8008dd4:	d10e      	bne.n	8008df4 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008dd6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008dda:	9300      	str	r3, [sp, #0]
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	2200      	movs	r2, #0
 8008de0:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8008de4:	6878      	ldr	r0, [r7, #4]
 8008de6:	f000 f82f 	bl	8008e48 <UART_WaitOnFlagUntilTimeout>
 8008dea:	4603      	mov	r3, r0
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d001      	beq.n	8008df4 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008df0:	2303      	movs	r3, #3
 8008df2:	e025      	b.n	8008e40 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	f003 0304 	and.w	r3, r3, #4
 8008dfe:	2b04      	cmp	r3, #4
 8008e00:	d10e      	bne.n	8008e20 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008e02:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008e06:	9300      	str	r3, [sp, #0]
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	2200      	movs	r2, #0
 8008e0c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008e10:	6878      	ldr	r0, [r7, #4]
 8008e12:	f000 f819 	bl	8008e48 <UART_WaitOnFlagUntilTimeout>
 8008e16:	4603      	mov	r3, r0
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d001      	beq.n	8008e20 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008e1c:	2303      	movs	r3, #3
 8008e1e:	e00f      	b.n	8008e40 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	2220      	movs	r2, #32
 8008e24:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	2220      	movs	r2, #32
 8008e2c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	2200      	movs	r2, #0
 8008e34:	66da      	str	r2, [r3, #108]	@ 0x6c

  __HAL_UNLOCK(huart);
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	2200      	movs	r2, #0
 8008e3a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8008e3e:	2300      	movs	r3, #0
}
 8008e40:	4618      	mov	r0, r3
 8008e42:	3710      	adds	r7, #16
 8008e44:	46bd      	mov	sp, r7
 8008e46:	bd80      	pop	{r7, pc}

08008e48 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008e48:	b580      	push	{r7, lr}
 8008e4a:	b09c      	sub	sp, #112	@ 0x70
 8008e4c:	af00      	add	r7, sp, #0
 8008e4e:	60f8      	str	r0, [r7, #12]
 8008e50:	60b9      	str	r1, [r7, #8]
 8008e52:	603b      	str	r3, [r7, #0]
 8008e54:	4613      	mov	r3, r2
 8008e56:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008e58:	e0a9      	b.n	8008fae <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008e5a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008e5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e60:	f000 80a5 	beq.w	8008fae <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008e64:	f7f9 f9c8 	bl	80021f8 <HAL_GetTick>
 8008e68:	4602      	mov	r2, r0
 8008e6a:	683b      	ldr	r3, [r7, #0]
 8008e6c:	1ad3      	subs	r3, r2, r3
 8008e6e:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8008e70:	429a      	cmp	r2, r3
 8008e72:	d302      	bcc.n	8008e7a <UART_WaitOnFlagUntilTimeout+0x32>
 8008e74:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d140      	bne.n	8008efc <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e80:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008e82:	e853 3f00 	ldrex	r3, [r3]
 8008e86:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8008e88:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008e8a:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8008e8e:	667b      	str	r3, [r7, #100]	@ 0x64
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	461a      	mov	r2, r3
 8008e96:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008e98:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008e9a:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e9c:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8008e9e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8008ea0:	e841 2300 	strex	r3, r2, [r1]
 8008ea4:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8008ea6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d1e6      	bne.n	8008e7a <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	3308      	adds	r3, #8
 8008eb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008eb4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008eb6:	e853 3f00 	ldrex	r3, [r3]
 8008eba:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008ebc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ebe:	f023 0301 	bic.w	r3, r3, #1
 8008ec2:	663b      	str	r3, [r7, #96]	@ 0x60
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	3308      	adds	r3, #8
 8008eca:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8008ecc:	64ba      	str	r2, [r7, #72]	@ 0x48
 8008ece:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ed0:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008ed2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008ed4:	e841 2300 	strex	r3, r2, [r1]
 8008ed8:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8008eda:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d1e5      	bne.n	8008eac <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	2220      	movs	r2, #32
 8008ee4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	2220      	movs	r2, #32
 8008eec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        __HAL_UNLOCK(huart);
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	2200      	movs	r2, #0
 8008ef4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 8008ef8:	2303      	movs	r3, #3
 8008efa:	e069      	b.n	8008fd0 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	f003 0304 	and.w	r3, r3, #4
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d051      	beq.n	8008fae <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	69db      	ldr	r3, [r3, #28]
 8008f10:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008f14:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008f18:	d149      	bne.n	8008fae <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008f22:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f2c:	e853 3f00 	ldrex	r3, [r3]
 8008f30:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008f32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f34:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8008f38:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	461a      	mov	r2, r3
 8008f40:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008f42:	637b      	str	r3, [r7, #52]	@ 0x34
 8008f44:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f46:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008f48:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008f4a:	e841 2300 	strex	r3, r2, [r1]
 8008f4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8008f50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d1e6      	bne.n	8008f24 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	3308      	adds	r3, #8
 8008f5c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f5e:	697b      	ldr	r3, [r7, #20]
 8008f60:	e853 3f00 	ldrex	r3, [r3]
 8008f64:	613b      	str	r3, [r7, #16]
   return(result);
 8008f66:	693b      	ldr	r3, [r7, #16]
 8008f68:	f023 0301 	bic.w	r3, r3, #1
 8008f6c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	3308      	adds	r3, #8
 8008f74:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8008f76:	623a      	str	r2, [r7, #32]
 8008f78:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f7a:	69f9      	ldr	r1, [r7, #28]
 8008f7c:	6a3a      	ldr	r2, [r7, #32]
 8008f7e:	e841 2300 	strex	r3, r2, [r1]
 8008f82:	61bb      	str	r3, [r7, #24]
   return(result);
 8008f84:	69bb      	ldr	r3, [r7, #24]
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d1e5      	bne.n	8008f56 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	2220      	movs	r2, #32
 8008f8e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	2220      	movs	r2, #32
 8008f96:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	2220      	movs	r2, #32
 8008f9e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	2200      	movs	r2, #0
 8008fa6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8008faa:	2303      	movs	r3, #3
 8008fac:	e010      	b.n	8008fd0 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	69da      	ldr	r2, [r3, #28]
 8008fb4:	68bb      	ldr	r3, [r7, #8]
 8008fb6:	4013      	ands	r3, r2
 8008fb8:	68ba      	ldr	r2, [r7, #8]
 8008fba:	429a      	cmp	r2, r3
 8008fbc:	bf0c      	ite	eq
 8008fbe:	2301      	moveq	r3, #1
 8008fc0:	2300      	movne	r3, #0
 8008fc2:	b2db      	uxtb	r3, r3
 8008fc4:	461a      	mov	r2, r3
 8008fc6:	79fb      	ldrb	r3, [r7, #7]
 8008fc8:	429a      	cmp	r2, r3
 8008fca:	f43f af46 	beq.w	8008e5a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008fce:	2300      	movs	r3, #0
}
 8008fd0:	4618      	mov	r0, r3
 8008fd2:	3770      	adds	r7, #112	@ 0x70
 8008fd4:	46bd      	mov	sp, r7
 8008fd6:	bd80      	pop	{r7, pc}

08008fd8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008fd8:	b480      	push	{r7}
 8008fda:	b0a3      	sub	sp, #140	@ 0x8c
 8008fdc:	af00      	add	r7, sp, #0
 8008fde:	60f8      	str	r0, [r7, #12]
 8008fe0:	60b9      	str	r1, [r7, #8]
 8008fe2:	4613      	mov	r3, r2
 8008fe4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	68ba      	ldr	r2, [r7, #8]
 8008fea:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	88fa      	ldrh	r2, [r7, #6]
 8008ff0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	88fa      	ldrh	r2, [r7, #6]
 8008ff8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	2200      	movs	r2, #0
 8009000:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	689b      	ldr	r3, [r3, #8]
 8009006:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800900a:	d10e      	bne.n	800902a <UART_Start_Receive_IT+0x52>
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	691b      	ldr	r3, [r3, #16]
 8009010:	2b00      	cmp	r3, #0
 8009012:	d105      	bne.n	8009020 <UART_Start_Receive_IT+0x48>
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800901a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800901e:	e02d      	b.n	800907c <UART_Start_Receive_IT+0xa4>
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	22ff      	movs	r2, #255	@ 0xff
 8009024:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8009028:	e028      	b.n	800907c <UART_Start_Receive_IT+0xa4>
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	689b      	ldr	r3, [r3, #8]
 800902e:	2b00      	cmp	r3, #0
 8009030:	d10d      	bne.n	800904e <UART_Start_Receive_IT+0x76>
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	691b      	ldr	r3, [r3, #16]
 8009036:	2b00      	cmp	r3, #0
 8009038:	d104      	bne.n	8009044 <UART_Start_Receive_IT+0x6c>
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	22ff      	movs	r2, #255	@ 0xff
 800903e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8009042:	e01b      	b.n	800907c <UART_Start_Receive_IT+0xa4>
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	227f      	movs	r2, #127	@ 0x7f
 8009048:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800904c:	e016      	b.n	800907c <UART_Start_Receive_IT+0xa4>
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	689b      	ldr	r3, [r3, #8]
 8009052:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009056:	d10d      	bne.n	8009074 <UART_Start_Receive_IT+0x9c>
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	691b      	ldr	r3, [r3, #16]
 800905c:	2b00      	cmp	r3, #0
 800905e:	d104      	bne.n	800906a <UART_Start_Receive_IT+0x92>
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	227f      	movs	r2, #127	@ 0x7f
 8009064:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8009068:	e008      	b.n	800907c <UART_Start_Receive_IT+0xa4>
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	223f      	movs	r2, #63	@ 0x3f
 800906e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8009072:	e003      	b.n	800907c <UART_Start_Receive_IT+0xa4>
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	2200      	movs	r2, #0
 8009078:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	2200      	movs	r2, #0
 8009080:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	2222      	movs	r2, #34	@ 0x22
 8009088:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	3308      	adds	r3, #8
 8009092:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009094:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009096:	e853 3f00 	ldrex	r3, [r3]
 800909a:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800909c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800909e:	f043 0301 	orr.w	r3, r3, #1
 80090a2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	3308      	adds	r3, #8
 80090ac:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80090b0:	673a      	str	r2, [r7, #112]	@ 0x70
 80090b2:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090b4:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 80090b6:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80090b8:	e841 2300 	strex	r3, r2, [r1]
 80090bc:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 80090be:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d1e3      	bne.n	800908c <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80090c8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80090cc:	d153      	bne.n	8009176 <UART_Start_Receive_IT+0x19e>
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80090d4:	88fa      	ldrh	r2, [r7, #6]
 80090d6:	429a      	cmp	r2, r3
 80090d8:	d34d      	bcc.n	8009176 <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	689b      	ldr	r3, [r3, #8]
 80090de:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80090e2:	d107      	bne.n	80090f4 <UART_Start_Receive_IT+0x11c>
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	691b      	ldr	r3, [r3, #16]
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d103      	bne.n	80090f4 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	4a4a      	ldr	r2, [pc, #296]	@ (8009218 <UART_Start_Receive_IT+0x240>)
 80090f0:	671a      	str	r2, [r3, #112]	@ 0x70
 80090f2:	e002      	b.n	80090fa <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	4a49      	ldr	r2, [pc, #292]	@ (800921c <UART_Start_Receive_IT+0x244>)
 80090f8:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    __HAL_UNLOCK(huart);
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	2200      	movs	r2, #0
 80090fe:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	691b      	ldr	r3, [r3, #16]
 8009106:	2b00      	cmp	r3, #0
 8009108:	d01a      	beq.n	8009140 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009110:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009112:	e853 3f00 	ldrex	r3, [r3]
 8009116:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8009118:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800911a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800911e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	461a      	mov	r2, r3
 8009128:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800912c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800912e:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009130:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8009132:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8009134:	e841 2300 	strex	r3, r2, [r1]
 8009138:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800913a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800913c:	2b00      	cmp	r3, #0
 800913e:	d1e4      	bne.n	800910a <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	3308      	adds	r3, #8
 8009146:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009148:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800914a:	e853 3f00 	ldrex	r3, [r3]
 800914e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009150:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009152:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009156:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	3308      	adds	r3, #8
 800915e:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8009160:	64ba      	str	r2, [r7, #72]	@ 0x48
 8009162:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009164:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009166:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009168:	e841 2300 	strex	r3, r2, [r1]
 800916c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800916e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009170:	2b00      	cmp	r3, #0
 8009172:	d1e5      	bne.n	8009140 <UART_Start_Receive_IT+0x168>
 8009174:	e04a      	b.n	800920c <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	689b      	ldr	r3, [r3, #8]
 800917a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800917e:	d107      	bne.n	8009190 <UART_Start_Receive_IT+0x1b8>
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	691b      	ldr	r3, [r3, #16]
 8009184:	2b00      	cmp	r3, #0
 8009186:	d103      	bne.n	8009190 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	4a25      	ldr	r2, [pc, #148]	@ (8009220 <UART_Start_Receive_IT+0x248>)
 800918c:	671a      	str	r2, [r3, #112]	@ 0x70
 800918e:	e002      	b.n	8009196 <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	4a24      	ldr	r2, [pc, #144]	@ (8009224 <UART_Start_Receive_IT+0x24c>)
 8009194:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    __HAL_UNLOCK(huart);
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	2200      	movs	r2, #0
 800919a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	691b      	ldr	r3, [r3, #16]
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d019      	beq.n	80091da <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091ae:	e853 3f00 	ldrex	r3, [r3]
 80091b2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80091b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091b6:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 80091ba:	677b      	str	r3, [r7, #116]	@ 0x74
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	461a      	mov	r2, r3
 80091c2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80091c4:	637b      	str	r3, [r7, #52]	@ 0x34
 80091c6:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091c8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80091ca:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80091cc:	e841 2300 	strex	r3, r2, [r1]
 80091d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80091d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d1e6      	bne.n	80091a6 <UART_Start_Receive_IT+0x1ce>
 80091d8:	e018      	b.n	800920c <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091e0:	697b      	ldr	r3, [r7, #20]
 80091e2:	e853 3f00 	ldrex	r3, [r3]
 80091e6:	613b      	str	r3, [r7, #16]
   return(result);
 80091e8:	693b      	ldr	r3, [r7, #16]
 80091ea:	f043 0320 	orr.w	r3, r3, #32
 80091ee:	67bb      	str	r3, [r7, #120]	@ 0x78
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	461a      	mov	r2, r3
 80091f6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80091f8:	623b      	str	r3, [r7, #32]
 80091fa:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091fc:	69f9      	ldr	r1, [r7, #28]
 80091fe:	6a3a      	ldr	r2, [r7, #32]
 8009200:	e841 2300 	strex	r3, r2, [r1]
 8009204:	61bb      	str	r3, [r7, #24]
   return(result);
 8009206:	69bb      	ldr	r3, [r7, #24]
 8009208:	2b00      	cmp	r3, #0
 800920a:	d1e6      	bne.n	80091da <UART_Start_Receive_IT+0x202>
    }  
  }
  return HAL_OK;
 800920c:	2300      	movs	r3, #0
}
 800920e:	4618      	mov	r0, r3
 8009210:	378c      	adds	r7, #140	@ 0x8c
 8009212:	46bd      	mov	sp, r7
 8009214:	bc80      	pop	{r7}
 8009216:	4770      	bx	lr
 8009218:	08009ae5 	.word	0x08009ae5
 800921c:	080097ed 	.word	0x080097ed
 8009220:	0800968b 	.word	0x0800968b
 8009224:	0800952b 	.word	0x0800952b

08009228 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009228:	b480      	push	{r7}
 800922a:	b08f      	sub	sp, #60	@ 0x3c
 800922c:	af00      	add	r7, sp, #0
 800922e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009236:	6a3b      	ldr	r3, [r7, #32]
 8009238:	e853 3f00 	ldrex	r3, [r3]
 800923c:	61fb      	str	r3, [r7, #28]
   return(result);
 800923e:	69fb      	ldr	r3, [r7, #28]
 8009240:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8009244:	637b      	str	r3, [r7, #52]	@ 0x34
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	461a      	mov	r2, r3
 800924c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800924e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009250:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009252:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009254:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009256:	e841 2300 	strex	r3, r2, [r1]
 800925a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800925c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800925e:	2b00      	cmp	r3, #0
 8009260:	d1e6      	bne.n	8009230 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	3308      	adds	r3, #8
 8009268:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	e853 3f00 	ldrex	r3, [r3]
 8009270:	60bb      	str	r3, [r7, #8]
   return(result);
 8009272:	68bb      	ldr	r3, [r7, #8]
 8009274:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8009278:	633b      	str	r3, [r7, #48]	@ 0x30
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	3308      	adds	r3, #8
 8009280:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009282:	61ba      	str	r2, [r7, #24]
 8009284:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009286:	6979      	ldr	r1, [r7, #20]
 8009288:	69ba      	ldr	r2, [r7, #24]
 800928a:	e841 2300 	strex	r3, r2, [r1]
 800928e:	613b      	str	r3, [r7, #16]
   return(result);
 8009290:	693b      	ldr	r3, [r7, #16]
 8009292:	2b00      	cmp	r3, #0
 8009294:	d1e5      	bne.n	8009262 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	2220      	movs	r2, #32
 800929a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
}
 800929e:	bf00      	nop
 80092a0:	373c      	adds	r7, #60	@ 0x3c
 80092a2:	46bd      	mov	sp, r7
 80092a4:	bc80      	pop	{r7}
 80092a6:	4770      	bx	lr

080092a8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80092a8:	b480      	push	{r7}
 80092aa:	b095      	sub	sp, #84	@ 0x54
 80092ac:	af00      	add	r7, sp, #0
 80092ae:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80092b8:	e853 3f00 	ldrex	r3, [r3]
 80092bc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80092be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092c0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80092c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	461a      	mov	r2, r3
 80092cc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80092ce:	643b      	str	r3, [r7, #64]	@ 0x40
 80092d0:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092d2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80092d4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80092d6:	e841 2300 	strex	r3, r2, [r1]
 80092da:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80092dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d1e6      	bne.n	80092b0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	3308      	adds	r3, #8
 80092e8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092ea:	6a3b      	ldr	r3, [r7, #32]
 80092ec:	e853 3f00 	ldrex	r3, [r3]
 80092f0:	61fb      	str	r3, [r7, #28]
   return(result);
 80092f2:	69fb      	ldr	r3, [r7, #28]
 80092f4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80092f8:	f023 0301 	bic.w	r3, r3, #1
 80092fc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	3308      	adds	r3, #8
 8009304:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009306:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009308:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800930a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800930c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800930e:	e841 2300 	strex	r3, r2, [r1]
 8009312:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009314:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009316:	2b00      	cmp	r3, #0
 8009318:	d1e3      	bne.n	80092e2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800931e:	2b01      	cmp	r3, #1
 8009320:	d118      	bne.n	8009354 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	e853 3f00 	ldrex	r3, [r3]
 800932e:	60bb      	str	r3, [r7, #8]
   return(result);
 8009330:	68bb      	ldr	r3, [r7, #8]
 8009332:	f023 0310 	bic.w	r3, r3, #16
 8009336:	647b      	str	r3, [r7, #68]	@ 0x44
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	461a      	mov	r2, r3
 800933e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009340:	61bb      	str	r3, [r7, #24]
 8009342:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009344:	6979      	ldr	r1, [r7, #20]
 8009346:	69ba      	ldr	r2, [r7, #24]
 8009348:	e841 2300 	strex	r3, r2, [r1]
 800934c:	613b      	str	r3, [r7, #16]
   return(result);
 800934e:	693b      	ldr	r3, [r7, #16]
 8009350:	2b00      	cmp	r3, #0
 8009352:	d1e6      	bne.n	8009322 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	2220      	movs	r2, #32
 8009358:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	2200      	movs	r2, #0
 8009360:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	2200      	movs	r2, #0
 8009366:	671a      	str	r2, [r3, #112]	@ 0x70
}
 8009368:	bf00      	nop
 800936a:	3754      	adds	r7, #84	@ 0x54
 800936c:	46bd      	mov	sp, r7
 800936e:	bc80      	pop	{r7}
 8009370:	4770      	bx	lr

08009372 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009372:	b580      	push	{r7, lr}
 8009374:	b090      	sub	sp, #64	@ 0x40
 8009376:	af00      	add	r7, sp, #0
 8009378:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800937e:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	f003 0320 	and.w	r3, r3, #32
 800938a:	2b00      	cmp	r3, #0
 800938c:	d137      	bne.n	80093fe <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800938e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009390:	2200      	movs	r2, #0
 8009392:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009396:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	3308      	adds	r3, #8
 800939c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800939e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093a0:	e853 3f00 	ldrex	r3, [r3]
 80093a4:	623b      	str	r3, [r7, #32]
   return(result);
 80093a6:	6a3b      	ldr	r3, [r7, #32]
 80093a8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80093ac:	63bb      	str	r3, [r7, #56]	@ 0x38
 80093ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	3308      	adds	r3, #8
 80093b4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80093b6:	633a      	str	r2, [r7, #48]	@ 0x30
 80093b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093ba:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80093bc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80093be:	e841 2300 	strex	r3, r2, [r1]
 80093c2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80093c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d1e5      	bne.n	8009396 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80093ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093d0:	693b      	ldr	r3, [r7, #16]
 80093d2:	e853 3f00 	ldrex	r3, [r3]
 80093d6:	60fb      	str	r3, [r7, #12]
   return(result);
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80093de:	637b      	str	r3, [r7, #52]	@ 0x34
 80093e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	461a      	mov	r2, r3
 80093e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80093e8:	61fb      	str	r3, [r7, #28]
 80093ea:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093ec:	69b9      	ldr	r1, [r7, #24]
 80093ee:	69fa      	ldr	r2, [r7, #28]
 80093f0:	e841 2300 	strex	r3, r2, [r1]
 80093f4:	617b      	str	r3, [r7, #20]
   return(result);
 80093f6:	697b      	ldr	r3, [r7, #20]
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d1e6      	bne.n	80093ca <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80093fc:	e002      	b.n	8009404 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80093fe:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8009400:	f7f9 fd82 	bl	8002f08 <HAL_UART_TxCpltCallback>
}
 8009404:	bf00      	nop
 8009406:	3740      	adds	r7, #64	@ 0x40
 8009408:	46bd      	mov	sp, r7
 800940a:	bd80      	pop	{r7, pc}

0800940c <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800940c:	b580      	push	{r7, lr}
 800940e:	b084      	sub	sp, #16
 8009410:	af00      	add	r7, sp, #0
 8009412:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009418:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800941a:	68f8      	ldr	r0, [r7, #12]
 800941c:	f7ff f996 	bl	800874c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009420:	bf00      	nop
 8009422:	3710      	adds	r7, #16
 8009424:	46bd      	mov	sp, r7
 8009426:	bd80      	pop	{r7, pc}

08009428 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009428:	b580      	push	{r7, lr}
 800942a:	b086      	sub	sp, #24
 800942c:	af00      	add	r7, sp, #0
 800942e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009434:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8009436:	697b      	ldr	r3, [r7, #20]
 8009438:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800943c:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800943e:	697b      	ldr	r3, [r7, #20]
 8009440:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009444:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8009446:	697b      	ldr	r3, [r7, #20]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	689b      	ldr	r3, [r3, #8]
 800944c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009450:	2b80      	cmp	r3, #128	@ 0x80
 8009452:	d109      	bne.n	8009468 <UART_DMAError+0x40>
 8009454:	693b      	ldr	r3, [r7, #16]
 8009456:	2b21      	cmp	r3, #33	@ 0x21
 8009458:	d106      	bne.n	8009468 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800945a:	697b      	ldr	r3, [r7, #20]
 800945c:	2200      	movs	r2, #0
 800945e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 8009462:	6978      	ldr	r0, [r7, #20]
 8009464:	f7ff fee0 	bl	8009228 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8009468:	697b      	ldr	r3, [r7, #20]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	689b      	ldr	r3, [r3, #8]
 800946e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009472:	2b40      	cmp	r3, #64	@ 0x40
 8009474:	d109      	bne.n	800948a <UART_DMAError+0x62>
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	2b22      	cmp	r3, #34	@ 0x22
 800947a:	d106      	bne.n	800948a <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800947c:	697b      	ldr	r3, [r7, #20]
 800947e:	2200      	movs	r2, #0
 8009480:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 8009484:	6978      	ldr	r0, [r7, #20]
 8009486:	f7ff ff0f 	bl	80092a8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800948a:	697b      	ldr	r3, [r7, #20]
 800948c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009490:	f043 0210 	orr.w	r2, r3, #16
 8009494:	697b      	ldr	r3, [r7, #20]
 8009496:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800949a:	6978      	ldr	r0, [r7, #20]
 800949c:	f7ff f95f 	bl	800875e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80094a0:	bf00      	nop
 80094a2:	3718      	adds	r7, #24
 80094a4:	46bd      	mov	sp, r7
 80094a6:	bd80      	pop	{r7, pc}

080094a8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80094a8:	b580      	push	{r7, lr}
 80094aa:	b084      	sub	sp, #16
 80094ac:	af00      	add	r7, sp, #0
 80094ae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80094b4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	2200      	movs	r2, #0
 80094ba:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	2200      	movs	r2, #0
 80094c2:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80094c6:	68f8      	ldr	r0, [r7, #12]
 80094c8:	f7ff f949 	bl	800875e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80094cc:	bf00      	nop
 80094ce:	3710      	adds	r7, #16
 80094d0:	46bd      	mov	sp, r7
 80094d2:	bd80      	pop	{r7, pc}

080094d4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80094d4:	b580      	push	{r7, lr}
 80094d6:	b088      	sub	sp, #32
 80094d8:	af00      	add	r7, sp, #0
 80094da:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	e853 3f00 	ldrex	r3, [r3]
 80094e8:	60bb      	str	r3, [r7, #8]
   return(result);
 80094ea:	68bb      	ldr	r3, [r7, #8]
 80094ec:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80094f0:	61fb      	str	r3, [r7, #28]
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	461a      	mov	r2, r3
 80094f8:	69fb      	ldr	r3, [r7, #28]
 80094fa:	61bb      	str	r3, [r7, #24]
 80094fc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094fe:	6979      	ldr	r1, [r7, #20]
 8009500:	69ba      	ldr	r2, [r7, #24]
 8009502:	e841 2300 	strex	r3, r2, [r1]
 8009506:	613b      	str	r3, [r7, #16]
   return(result);
 8009508:	693b      	ldr	r3, [r7, #16]
 800950a:	2b00      	cmp	r3, #0
 800950c:	d1e6      	bne.n	80094dc <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	2220      	movs	r2, #32
 8009512:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	2200      	movs	r2, #0
 800951a:	675a      	str	r2, [r3, #116]	@ 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800951c:	6878      	ldr	r0, [r7, #4]
 800951e:	f7f9 fcf3 	bl	8002f08 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009522:	bf00      	nop
 8009524:	3720      	adds	r7, #32
 8009526:	46bd      	mov	sp, r7
 8009528:	bd80      	pop	{r7, pc}

0800952a <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800952a:	b580      	push	{r7, lr}
 800952c:	b096      	sub	sp, #88	@ 0x58
 800952e:	af00      	add	r7, sp, #0
 8009530:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8009538:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009542:	2b22      	cmp	r3, #34	@ 0x22
 8009544:	f040 8095 	bne.w	8009672 <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800954e:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009552:	f8b7 3054 	ldrh.w	r3, [r7, #84]	@ 0x54
 8009556:	b2d9      	uxtb	r1, r3
 8009558:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800955c:	b2da      	uxtb	r2, r3
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009562:	400a      	ands	r2, r1
 8009564:	b2d2      	uxtb	r2, r2
 8009566:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800956c:	1c5a      	adds	r2, r3, #1
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009578:	b29b      	uxth	r3, r3
 800957a:	3b01      	subs	r3, #1
 800957c:	b29a      	uxth	r2, r3
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800958a:	b29b      	uxth	r3, r3
 800958c:	2b00      	cmp	r3, #0
 800958e:	d178      	bne.n	8009682 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009596:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009598:	e853 3f00 	ldrex	r3, [r3]
 800959c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800959e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80095a0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80095a4:	653b      	str	r3, [r7, #80]	@ 0x50
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	461a      	mov	r2, r3
 80095ac:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80095ae:	647b      	str	r3, [r7, #68]	@ 0x44
 80095b0:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095b2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80095b4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80095b6:	e841 2300 	strex	r3, r2, [r1]
 80095ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80095bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d1e6      	bne.n	8009590 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	3308      	adds	r3, #8
 80095c8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095cc:	e853 3f00 	ldrex	r3, [r3]
 80095d0:	623b      	str	r3, [r7, #32]
   return(result);
 80095d2:	6a3b      	ldr	r3, [r7, #32]
 80095d4:	f023 0301 	bic.w	r3, r3, #1
 80095d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	3308      	adds	r3, #8
 80095e0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80095e2:	633a      	str	r2, [r7, #48]	@ 0x30
 80095e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095e6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80095e8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80095ea:	e841 2300 	strex	r3, r2, [r1]
 80095ee:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80095f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d1e5      	bne.n	80095c2 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	2220      	movs	r2, #32
 80095fa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	2200      	movs	r2, #0
 8009602:	671a      	str	r2, [r3, #112]	@ 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009608:	2b01      	cmp	r3, #1
 800960a:	d12e      	bne.n	800966a <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	2200      	movs	r2, #0
 8009610:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009618:	693b      	ldr	r3, [r7, #16]
 800961a:	e853 3f00 	ldrex	r3, [r3]
 800961e:	60fb      	str	r3, [r7, #12]
   return(result);
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	f023 0310 	bic.w	r3, r3, #16
 8009626:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	461a      	mov	r2, r3
 800962e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009630:	61fb      	str	r3, [r7, #28]
 8009632:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009634:	69b9      	ldr	r1, [r7, #24]
 8009636:	69fa      	ldr	r2, [r7, #28]
 8009638:	e841 2300 	strex	r3, r2, [r1]
 800963c:	617b      	str	r3, [r7, #20]
   return(result);
 800963e:	697b      	ldr	r3, [r7, #20]
 8009640:	2b00      	cmp	r3, #0
 8009642:	d1e6      	bne.n	8009612 <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	69db      	ldr	r3, [r3, #28]
 800964a:	f003 0310 	and.w	r3, r3, #16
 800964e:	2b10      	cmp	r3, #16
 8009650:	d103      	bne.n	800965a <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	2210      	movs	r2, #16
 8009658:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009660:	4619      	mov	r1, r3
 8009662:	6878      	ldr	r0, [r7, #4]
 8009664:	f7ff f884 	bl	8008770 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009668:	e00b      	b.n	8009682 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800966a:	6878      	ldr	r0, [r7, #4]
 800966c:	f7f9 fc62 	bl	8002f34 <HAL_UART_RxCpltCallback>
}
 8009670:	e007      	b.n	8009682 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	699a      	ldr	r2, [r3, #24]
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	f042 0208 	orr.w	r2, r2, #8
 8009680:	619a      	str	r2, [r3, #24]
}
 8009682:	bf00      	nop
 8009684:	3758      	adds	r7, #88	@ 0x58
 8009686:	46bd      	mov	sp, r7
 8009688:	bd80      	pop	{r7, pc}

0800968a <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800968a:	b580      	push	{r7, lr}
 800968c:	b096      	sub	sp, #88	@ 0x58
 800968e:	af00      	add	r7, sp, #0
 8009690:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8009698:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80096a2:	2b22      	cmp	r3, #34	@ 0x22
 80096a4:	f040 8095 	bne.w	80097d2 <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80096ae:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80096b6:	653b      	str	r3, [r7, #80]	@ 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 80096b8:	f8b7 2054 	ldrh.w	r2, [r7, #84]	@ 0x54
 80096bc:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 80096c0:	4013      	ands	r3, r2
 80096c2:	b29a      	uxth	r2, r3
 80096c4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80096c6:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80096cc:	1c9a      	adds	r2, r3, #2
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80096d8:	b29b      	uxth	r3, r3
 80096da:	3b01      	subs	r3, #1
 80096dc:	b29a      	uxth	r2, r3
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80096ea:	b29b      	uxth	r3, r3
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d178      	bne.n	80097e2 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80096f8:	e853 3f00 	ldrex	r3, [r3]
 80096fc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80096fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009700:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009704:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	461a      	mov	r2, r3
 800970c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800970e:	643b      	str	r3, [r7, #64]	@ 0x40
 8009710:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009712:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009714:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009716:	e841 2300 	strex	r3, r2, [r1]
 800971a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800971c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800971e:	2b00      	cmp	r3, #0
 8009720:	d1e6      	bne.n	80096f0 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	3308      	adds	r3, #8
 8009728:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800972a:	6a3b      	ldr	r3, [r7, #32]
 800972c:	e853 3f00 	ldrex	r3, [r3]
 8009730:	61fb      	str	r3, [r7, #28]
   return(result);
 8009732:	69fb      	ldr	r3, [r7, #28]
 8009734:	f023 0301 	bic.w	r3, r3, #1
 8009738:	64bb      	str	r3, [r7, #72]	@ 0x48
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	3308      	adds	r3, #8
 8009740:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009742:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009744:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009746:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009748:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800974a:	e841 2300 	strex	r3, r2, [r1]
 800974e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009750:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009752:	2b00      	cmp	r3, #0
 8009754:	d1e5      	bne.n	8009722 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	2220      	movs	r2, #32
 800975a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	2200      	movs	r2, #0
 8009762:	671a      	str	r2, [r3, #112]	@ 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009768:	2b01      	cmp	r3, #1
 800976a:	d12e      	bne.n	80097ca <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	2200      	movs	r2, #0
 8009770:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	e853 3f00 	ldrex	r3, [r3]
 800977e:	60bb      	str	r3, [r7, #8]
   return(result);
 8009780:	68bb      	ldr	r3, [r7, #8]
 8009782:	f023 0310 	bic.w	r3, r3, #16
 8009786:	647b      	str	r3, [r7, #68]	@ 0x44
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	461a      	mov	r2, r3
 800978e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009790:	61bb      	str	r3, [r7, #24]
 8009792:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009794:	6979      	ldr	r1, [r7, #20]
 8009796:	69ba      	ldr	r2, [r7, #24]
 8009798:	e841 2300 	strex	r3, r2, [r1]
 800979c:	613b      	str	r3, [r7, #16]
   return(result);
 800979e:	693b      	ldr	r3, [r7, #16]
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d1e6      	bne.n	8009772 <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	69db      	ldr	r3, [r3, #28]
 80097aa:	f003 0310 	and.w	r3, r3, #16
 80097ae:	2b10      	cmp	r3, #16
 80097b0:	d103      	bne.n	80097ba <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	2210      	movs	r2, #16
 80097b8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80097c0:	4619      	mov	r1, r3
 80097c2:	6878      	ldr	r0, [r7, #4]
 80097c4:	f7fe ffd4 	bl	8008770 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80097c8:	e00b      	b.n	80097e2 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 80097ca:	6878      	ldr	r0, [r7, #4]
 80097cc:	f7f9 fbb2 	bl	8002f34 <HAL_UART_RxCpltCallback>
}
 80097d0:	e007      	b.n	80097e2 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	699a      	ldr	r2, [r3, #24]
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	f042 0208 	orr.w	r2, r2, #8
 80097e0:	619a      	str	r2, [r3, #24]
}
 80097e2:	bf00      	nop
 80097e4:	3758      	adds	r7, #88	@ 0x58
 80097e6:	46bd      	mov	sp, r7
 80097e8:	bd80      	pop	{r7, pc}
	...

080097ec <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80097ec:	b580      	push	{r7, lr}
 80097ee:	b0a6      	sub	sp, #152	@ 0x98
 80097f0:	af00      	add	r7, sp, #0
 80097f2:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80097fa:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	69db      	ldr	r3, [r3, #28]
 8009804:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	689b      	ldr	r3, [r3, #8]
 8009818:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009822:	2b22      	cmp	r3, #34	@ 0x22
 8009824:	f040 814f 	bne.w	8009ac6 <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800982e:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009832:	e0f6      	b.n	8009a22 <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800983a:	f8a7 3084 	strh.w	r3, [r7, #132]	@ 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800983e:	f8b7 3084 	ldrh.w	r3, [r7, #132]	@ 0x84
 8009842:	b2d9      	uxtb	r1, r3
 8009844:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8009848:	b2da      	uxtb	r2, r3
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800984e:	400a      	ands	r2, r1
 8009850:	b2d2      	uxtb	r2, r2
 8009852:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009858:	1c5a      	adds	r2, r3, #1
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009864:	b29b      	uxth	r3, r3
 8009866:	3b01      	subs	r3, #1
 8009868:	b29a      	uxth	r2, r3
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	69db      	ldr	r3, [r3, #28]
 8009876:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800987a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800987e:	f003 0307 	and.w	r3, r3, #7
 8009882:	2b00      	cmp	r3, #0
 8009884:	d053      	beq.n	800992e <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009886:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800988a:	f003 0301 	and.w	r3, r3, #1
 800988e:	2b00      	cmp	r3, #0
 8009890:	d011      	beq.n	80098b6 <UART_RxISR_8BIT_FIFOEN+0xca>
 8009892:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009896:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800989a:	2b00      	cmp	r3, #0
 800989c:	d00b      	beq.n	80098b6 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	2201      	movs	r2, #1
 80098a4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80098ac:	f043 0201 	orr.w	r2, r3, #1
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80098b6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80098ba:	f003 0302 	and.w	r3, r3, #2
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d011      	beq.n	80098e6 <UART_RxISR_8BIT_FIFOEN+0xfa>
 80098c2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80098c6:	f003 0301 	and.w	r3, r3, #1
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d00b      	beq.n	80098e6 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	2202      	movs	r2, #2
 80098d4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80098dc:	f043 0204 	orr.w	r2, r3, #4
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80098e6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80098ea:	f003 0304 	and.w	r3, r3, #4
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d011      	beq.n	8009916 <UART_RxISR_8BIT_FIFOEN+0x12a>
 80098f2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80098f6:	f003 0301 	and.w	r3, r3, #1
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d00b      	beq.n	8009916 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	2204      	movs	r2, #4
 8009904:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800990c:	f043 0202 	orr.w	r2, r3, #2
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800991c:	2b00      	cmp	r3, #0
 800991e:	d006      	beq.n	800992e <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009920:	6878      	ldr	r0, [r7, #4]
 8009922:	f7fe ff1c 	bl	800875e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	2200      	movs	r2, #0
 800992a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009934:	b29b      	uxth	r3, r3
 8009936:	2b00      	cmp	r3, #0
 8009938:	d173      	bne.n	8009a22 <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009940:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009942:	e853 3f00 	ldrex	r3, [r3]
 8009946:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 8009948:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800994a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800994e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	461a      	mov	r2, r3
 8009958:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800995c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800995e:	667a      	str	r2, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009960:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8009962:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8009964:	e841 2300 	strex	r3, r2, [r1]
 8009968:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800996a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800996c:	2b00      	cmp	r3, #0
 800996e:	d1e4      	bne.n	800993a <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	3308      	adds	r3, #8
 8009976:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009978:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800997a:	e853 3f00 	ldrex	r3, [r3]
 800997e:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8009980:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009982:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009986:	f023 0301 	bic.w	r3, r3, #1
 800998a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	3308      	adds	r3, #8
 8009992:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8009994:	657a      	str	r2, [r7, #84]	@ 0x54
 8009996:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009998:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800999a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800999c:	e841 2300 	strex	r3, r2, [r1]
 80099a0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80099a2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d1e3      	bne.n	8009970 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	2220      	movs	r2, #32
 80099ac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	2200      	movs	r2, #0
 80099b4:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80099ba:	2b01      	cmp	r3, #1
 80099bc:	d12e      	bne.n	8009a1c <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	2200      	movs	r2, #0
 80099c2:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80099cc:	e853 3f00 	ldrex	r3, [r3]
 80099d0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80099d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099d4:	f023 0310 	bic.w	r3, r3, #16
 80099d8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	461a      	mov	r2, r3
 80099e0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80099e2:	643b      	str	r3, [r7, #64]	@ 0x40
 80099e4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099e6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80099e8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80099ea:	e841 2300 	strex	r3, r2, [r1]
 80099ee:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80099f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d1e6      	bne.n	80099c4 <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	69db      	ldr	r3, [r3, #28]
 80099fc:	f003 0310 	and.w	r3, r3, #16
 8009a00:	2b10      	cmp	r3, #16
 8009a02:	d103      	bne.n	8009a0c <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	2210      	movs	r2, #16
 8009a0a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009a12:	4619      	mov	r1, r3
 8009a14:	6878      	ldr	r0, [r7, #4]
 8009a16:	f7fe feab 	bl	8008770 <HAL_UARTEx_RxEventCallback>
 8009a1a:	e002      	b.n	8009a22 <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8009a1c:	6878      	ldr	r0, [r7, #4]
 8009a1e:	f7f9 fa89 	bl	8002f34 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009a22:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d006      	beq.n	8009a38 <UART_RxISR_8BIT_FIFOEN+0x24c>
 8009a2a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8009a2e:	f003 0320 	and.w	r3, r3, #32
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	f47f aefe 	bne.w	8009834 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009a3e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009a42:	f8b7 3076 	ldrh.w	r3, [r7, #118]	@ 0x76
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d045      	beq.n	8009ad6 <UART_RxISR_8BIT_FIFOEN+0x2ea>
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009a50:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8009a54:	429a      	cmp	r2, r3
 8009a56:	d23e      	bcs.n	8009ad6 <UART_RxISR_8BIT_FIFOEN+0x2ea>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	3308      	adds	r3, #8
 8009a5e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a60:	6a3b      	ldr	r3, [r7, #32]
 8009a62:	e853 3f00 	ldrex	r3, [r3]
 8009a66:	61fb      	str	r3, [r7, #28]
   return(result);
 8009a68:	69fb      	ldr	r3, [r7, #28]
 8009a6a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009a6e:	673b      	str	r3, [r7, #112]	@ 0x70
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	3308      	adds	r3, #8
 8009a76:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8009a78:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009a7a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a7c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009a7e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009a80:	e841 2300 	strex	r3, r2, [r1]
 8009a84:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009a86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d1e5      	bne.n	8009a58 <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	4a14      	ldr	r2, [pc, #80]	@ (8009ae0 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 8009a90:	671a      	str	r2, [r3, #112]	@ 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	e853 3f00 	ldrex	r3, [r3]
 8009a9e:	60bb      	str	r3, [r7, #8]
   return(result);
 8009aa0:	68bb      	ldr	r3, [r7, #8]
 8009aa2:	f043 0320 	orr.w	r3, r3, #32
 8009aa6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	461a      	mov	r2, r3
 8009aae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009ab0:	61bb      	str	r3, [r7, #24]
 8009ab2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ab4:	6979      	ldr	r1, [r7, #20]
 8009ab6:	69ba      	ldr	r2, [r7, #24]
 8009ab8:	e841 2300 	strex	r3, r2, [r1]
 8009abc:	613b      	str	r3, [r7, #16]
   return(result);
 8009abe:	693b      	ldr	r3, [r7, #16]
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d1e6      	bne.n	8009a92 <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009ac4:	e007      	b.n	8009ad6 <UART_RxISR_8BIT_FIFOEN+0x2ea>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	699a      	ldr	r2, [r3, #24]
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	f042 0208 	orr.w	r2, r2, #8
 8009ad4:	619a      	str	r2, [r3, #24]
}
 8009ad6:	bf00      	nop
 8009ad8:	3798      	adds	r7, #152	@ 0x98
 8009ada:	46bd      	mov	sp, r7
 8009adc:	bd80      	pop	{r7, pc}
 8009ade:	bf00      	nop
 8009ae0:	0800952b 	.word	0x0800952b

08009ae4 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009ae4:	b580      	push	{r7, lr}
 8009ae6:	b0a8      	sub	sp, #160	@ 0xa0
 8009ae8:	af00      	add	r7, sp, #0
 8009aea:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8009af2:	f8a7 309a 	strh.w	r3, [r7, #154]	@ 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	69db      	ldr	r3, [r3, #28]
 8009afc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	689b      	ldr	r3, [r3, #8]
 8009b10:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009b1a:	2b22      	cmp	r3, #34	@ 0x22
 8009b1c:	f040 8153 	bne.w	8009dc6 <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009b26:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009b2a:	e0fa      	b.n	8009d22 <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b32:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009b3a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 8009b3e:	f8b7 208c 	ldrh.w	r2, [r7, #140]	@ 0x8c
 8009b42:	f8b7 309a 	ldrh.w	r3, [r7, #154]	@ 0x9a
 8009b46:	4013      	ands	r3, r2
 8009b48:	b29a      	uxth	r2, r3
 8009b4a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009b4e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009b54:	1c9a      	adds	r2, r3, #2
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009b60:	b29b      	uxth	r3, r3
 8009b62:	3b01      	subs	r3, #1
 8009b64:	b29a      	uxth	r2, r3
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	69db      	ldr	r3, [r3, #28]
 8009b72:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8009b76:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009b7a:	f003 0307 	and.w	r3, r3, #7
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d053      	beq.n	8009c2a <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009b82:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009b86:	f003 0301 	and.w	r3, r3, #1
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d011      	beq.n	8009bb2 <UART_RxISR_16BIT_FIFOEN+0xce>
 8009b8e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8009b92:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d00b      	beq.n	8009bb2 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	2201      	movs	r2, #1
 8009ba0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009ba8:	f043 0201 	orr.w	r2, r3, #1
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009bb2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009bb6:	f003 0302 	and.w	r3, r3, #2
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d011      	beq.n	8009be2 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8009bbe:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009bc2:	f003 0301 	and.w	r3, r3, #1
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d00b      	beq.n	8009be2 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	2202      	movs	r2, #2
 8009bd0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009bd8:	f043 0204 	orr.w	r2, r3, #4
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009be2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009be6:	f003 0304 	and.w	r3, r3, #4
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d011      	beq.n	8009c12 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8009bee:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009bf2:	f003 0301 	and.w	r3, r3, #1
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d00b      	beq.n	8009c12 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	2204      	movs	r2, #4
 8009c00:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009c08:	f043 0202 	orr.w	r2, r3, #2
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d006      	beq.n	8009c2a <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009c1c:	6878      	ldr	r0, [r7, #4]
 8009c1e:	f7fe fd9e 	bl	800875e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	2200      	movs	r2, #0
 8009c26:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009c30:	b29b      	uxth	r3, r3
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d175      	bne.n	8009d22 <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c3c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009c3e:	e853 3f00 	ldrex	r3, [r3]
 8009c42:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8009c44:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009c46:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009c4a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	461a      	mov	r2, r3
 8009c54:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009c58:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009c5a:	66ba      	str	r2, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c5c:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009c5e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009c60:	e841 2300 	strex	r3, r2, [r1]
 8009c64:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009c66:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d1e4      	bne.n	8009c36 <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	3308      	adds	r3, #8
 8009c72:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c74:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009c76:	e853 3f00 	ldrex	r3, [r3]
 8009c7a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009c7c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009c7e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009c82:	f023 0301 	bic.w	r3, r3, #1
 8009c86:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	3308      	adds	r3, #8
 8009c90:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009c94:	65ba      	str	r2, [r7, #88]	@ 0x58
 8009c96:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c98:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009c9a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009c9c:	e841 2300 	strex	r3, r2, [r1]
 8009ca0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009ca2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d1e1      	bne.n	8009c6c <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	2220      	movs	r2, #32
 8009cac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	2200      	movs	r2, #0
 8009cb4:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009cba:	2b01      	cmp	r3, #1
 8009cbc:	d12e      	bne.n	8009d1c <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	2200      	movs	r2, #0
 8009cc2:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ccc:	e853 3f00 	ldrex	r3, [r3]
 8009cd0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009cd2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009cd4:	f023 0310 	bic.w	r3, r3, #16
 8009cd8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	461a      	mov	r2, r3
 8009ce0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8009ce2:	647b      	str	r3, [r7, #68]	@ 0x44
 8009ce4:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ce6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009ce8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009cea:	e841 2300 	strex	r3, r2, [r1]
 8009cee:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009cf0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d1e6      	bne.n	8009cc4 <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	69db      	ldr	r3, [r3, #28]
 8009cfc:	f003 0310 	and.w	r3, r3, #16
 8009d00:	2b10      	cmp	r3, #16
 8009d02:	d103      	bne.n	8009d0c <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	2210      	movs	r2, #16
 8009d0a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009d12:	4619      	mov	r1, r3
 8009d14:	6878      	ldr	r0, [r7, #4]
 8009d16:	f7fe fd2b 	bl	8008770 <HAL_UARTEx_RxEventCallback>
 8009d1a:	e002      	b.n	8009d22 <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8009d1c:	6878      	ldr	r0, [r7, #4]
 8009d1e:	f7f9 f909 	bl	8002f34 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009d22:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d006      	beq.n	8009d38 <UART_RxISR_16BIT_FIFOEN+0x254>
 8009d2a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009d2e:	f003 0320 	and.w	r3, r3, #32
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	f47f aefa 	bne.w	8009b2c <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009d3e:	f8a7 307a 	strh.w	r3, [r7, #122]	@ 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009d42:	f8b7 307a 	ldrh.w	r3, [r7, #122]	@ 0x7a
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d045      	beq.n	8009dd6 <UART_RxISR_16BIT_FIFOEN+0x2f2>
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009d50:	f8b7 207a 	ldrh.w	r2, [r7, #122]	@ 0x7a
 8009d54:	429a      	cmp	r2, r3
 8009d56:	d23e      	bcs.n	8009dd6 <UART_RxISR_16BIT_FIFOEN+0x2f2>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	3308      	adds	r3, #8
 8009d5e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d62:	e853 3f00 	ldrex	r3, [r3]
 8009d66:	623b      	str	r3, [r7, #32]
   return(result);
 8009d68:	6a3b      	ldr	r3, [r7, #32]
 8009d6a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009d6e:	677b      	str	r3, [r7, #116]	@ 0x74
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	3308      	adds	r3, #8
 8009d76:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8009d78:	633a      	str	r2, [r7, #48]	@ 0x30
 8009d7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d7c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009d7e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009d80:	e841 2300 	strex	r3, r2, [r1]
 8009d84:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009d86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d1e5      	bne.n	8009d58 <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	4a14      	ldr	r2, [pc, #80]	@ (8009de0 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 8009d90:	671a      	str	r2, [r3, #112]	@ 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d98:	693b      	ldr	r3, [r7, #16]
 8009d9a:	e853 3f00 	ldrex	r3, [r3]
 8009d9e:	60fb      	str	r3, [r7, #12]
   return(result);
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	f043 0320 	orr.w	r3, r3, #32
 8009da6:	673b      	str	r3, [r7, #112]	@ 0x70
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	461a      	mov	r2, r3
 8009dae:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009db0:	61fb      	str	r3, [r7, #28]
 8009db2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009db4:	69b9      	ldr	r1, [r7, #24]
 8009db6:	69fa      	ldr	r2, [r7, #28]
 8009db8:	e841 2300 	strex	r3, r2, [r1]
 8009dbc:	617b      	str	r3, [r7, #20]
   return(result);
 8009dbe:	697b      	ldr	r3, [r7, #20]
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d1e6      	bne.n	8009d92 <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009dc4:	e007      	b.n	8009dd6 <UART_RxISR_16BIT_FIFOEN+0x2f2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	699a      	ldr	r2, [r3, #24]
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	f042 0208 	orr.w	r2, r2, #8
 8009dd4:	619a      	str	r2, [r3, #24]
}
 8009dd6:	bf00      	nop
 8009dd8:	37a0      	adds	r7, #160	@ 0xa0
 8009dda:	46bd      	mov	sp, r7
 8009ddc:	bd80      	pop	{r7, pc}
 8009dde:	bf00      	nop
 8009de0:	0800968b 	.word	0x0800968b

08009de4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009de4:	b480      	push	{r7}
 8009de6:	b083      	sub	sp, #12
 8009de8:	af00      	add	r7, sp, #0
 8009dea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009dec:	bf00      	nop
 8009dee:	370c      	adds	r7, #12
 8009df0:	46bd      	mov	sp, r7
 8009df2:	bc80      	pop	{r7}
 8009df4:	4770      	bx	lr

08009df6 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8009df6:	b480      	push	{r7}
 8009df8:	b083      	sub	sp, #12
 8009dfa:	af00      	add	r7, sp, #0
 8009dfc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009dfe:	bf00      	nop
 8009e00:	370c      	adds	r7, #12
 8009e02:	46bd      	mov	sp, r7
 8009e04:	bc80      	pop	{r7}
 8009e06:	4770      	bx	lr

08009e08 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8009e08:	b480      	push	{r7}
 8009e0a:	b083      	sub	sp, #12
 8009e0c:	af00      	add	r7, sp, #0
 8009e0e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009e10:	bf00      	nop
 8009e12:	370c      	adds	r7, #12
 8009e14:	46bd      	mov	sp, r7
 8009e16:	bc80      	pop	{r7}
 8009e18:	4770      	bx	lr

08009e1a <HAL_UARTEx_StopModeWakeUpSourceConfig>:
  *          @arg @ref UART_WAKEUP_ON_STARTBIT
  *          @arg @ref UART_WAKEUP_ON_READDATA_NONEMPTY
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_StopModeWakeUpSourceConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 8009e1a:	b580      	push	{r7, lr}
 8009e1c:	b088      	sub	sp, #32
 8009e1e:	af02      	add	r7, sp, #8
 8009e20:	60f8      	str	r0, [r7, #12]
 8009e22:	1d3b      	adds	r3, r7, #4
 8009e24:	e883 0006 	stmia.w	r3, {r1, r2}
  HAL_StatusTypeDef status = HAL_OK;
 8009e28:	2300      	movs	r3, #0
 8009e2a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance));
  /* check the wake-up selection parameter */
  assert_param(IS_UART_WAKEUP_SELECTION(WakeUpSelection.WakeUpEvent));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8009e32:	2b01      	cmp	r3, #1
 8009e34:	d101      	bne.n	8009e3a <HAL_UARTEx_StopModeWakeUpSourceConfig+0x20>
 8009e36:	2302      	movs	r3, #2
 8009e38:	e046      	b.n	8009ec8 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xae>
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	2201      	movs	r2, #1
 8009e3e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	2224      	movs	r2, #36	@ 0x24
 8009e46:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	681a      	ldr	r2, [r3, #0]
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	f022 0201 	bic.w	r2, r2, #1
 8009e58:	601a      	str	r2, [r3, #0]

  /* Set the wake-up selection scheme */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	689b      	ldr	r3, [r3, #8]
 8009e60:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8009e64:	687a      	ldr	r2, [r7, #4]
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	430a      	orrs	r2, r1
 8009e6c:	609a      	str	r2, [r3, #8]

  if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d105      	bne.n	8009e80 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x66>
  {
    UARTEx_Wakeup_AddressConfig(huart, WakeUpSelection);
 8009e74:	1d3b      	adds	r3, r7, #4
 8009e76:	e893 0006 	ldmia.w	r3, {r1, r2}
 8009e7a:	68f8      	ldr	r0, [r7, #12]
 8009e7c:	f000 f949 	bl	800a112 <UARTEx_Wakeup_AddressConfig>
  }

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	681a      	ldr	r2, [r3, #0]
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	f042 0201 	orr.w	r2, r2, #1
 8009e8e:	601a      	str	r2, [r3, #0]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009e90:	f7f8 f9b2 	bl	80021f8 <HAL_GetTick>
 8009e94:	6138      	str	r0, [r7, #16]

  /* Wait until REACK flag is set */
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009e96:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009e9a:	9300      	str	r3, [sp, #0]
 8009e9c:	693b      	ldr	r3, [r7, #16]
 8009e9e:	2200      	movs	r2, #0
 8009ea0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8009ea4:	68f8      	ldr	r0, [r7, #12]
 8009ea6:	f7fe ffcf 	bl	8008e48 <UART_WaitOnFlagUntilTimeout>
 8009eaa:	4603      	mov	r3, r0
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d002      	beq.n	8009eb6 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x9c>
  {
    status = HAL_TIMEOUT;
 8009eb0:	2303      	movs	r3, #3
 8009eb2:	75fb      	strb	r3, [r7, #23]
 8009eb4:	e003      	b.n	8009ebe <HAL_UARTEx_StopModeWakeUpSourceConfig+0xa4>
  }
  else
  {
    /* Initialize the UART State */
    huart->gState = HAL_UART_STATE_READY;
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	2220      	movs	r2, #32
 8009eba:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	2200      	movs	r2, #0
 8009ec2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return status;
 8009ec6:	7dfb      	ldrb	r3, [r7, #23]
}
 8009ec8:	4618      	mov	r0, r3
 8009eca:	3718      	adds	r7, #24
 8009ecc:	46bd      	mov	sp, r7
 8009ece:	bd80      	pop	{r7, pc}

08009ed0 <HAL_UARTEx_EnableStopMode>:
  * @note The UART is able to wake up the MCU from Stop 1 mode as long as UART clock is HSI or LSE.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableStopMode(UART_HandleTypeDef *huart)
{
 8009ed0:	b480      	push	{r7}
 8009ed2:	b089      	sub	sp, #36	@ 0x24
 8009ed4:	af00      	add	r7, sp, #0
 8009ed6:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8009ede:	2b01      	cmp	r3, #1
 8009ee0:	d101      	bne.n	8009ee6 <HAL_UARTEx_EnableStopMode+0x16>
 8009ee2:	2302      	movs	r3, #2
 8009ee4:	e021      	b.n	8009f2a <HAL_UARTEx_EnableStopMode+0x5a>
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	2201      	movs	r2, #1
 8009eea:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set UESM bit */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	e853 3f00 	ldrex	r3, [r3]
 8009efa:	60bb      	str	r3, [r7, #8]
   return(result);
 8009efc:	68bb      	ldr	r3, [r7, #8]
 8009efe:	f043 0302 	orr.w	r3, r3, #2
 8009f02:	61fb      	str	r3, [r7, #28]
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	461a      	mov	r2, r3
 8009f0a:	69fb      	ldr	r3, [r7, #28]
 8009f0c:	61bb      	str	r3, [r7, #24]
 8009f0e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f10:	6979      	ldr	r1, [r7, #20]
 8009f12:	69ba      	ldr	r2, [r7, #24]
 8009f14:	e841 2300 	strex	r3, r2, [r1]
 8009f18:	613b      	str	r3, [r7, #16]
   return(result);
 8009f1a:	693b      	ldr	r3, [r7, #16]
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d1e6      	bne.n	8009eee <HAL_UARTEx_EnableStopMode+0x1e>

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	2200      	movs	r2, #0
 8009f24:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8009f28:	2300      	movs	r3, #0
}
 8009f2a:	4618      	mov	r0, r3
 8009f2c:	3724      	adds	r7, #36	@ 0x24
 8009f2e:	46bd      	mov	sp, r7
 8009f30:	bc80      	pop	{r7}
 8009f32:	4770      	bx	lr

08009f34 <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 8009f34:	b580      	push	{r7, lr}
 8009f36:	b084      	sub	sp, #16
 8009f38:	af00      	add	r7, sp, #0
 8009f3a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8009f42:	2b01      	cmp	r3, #1
 8009f44:	d101      	bne.n	8009f4a <HAL_UARTEx_EnableFifoMode+0x16>
 8009f46:	2302      	movs	r3, #2
 8009f48:	e02b      	b.n	8009fa2 <HAL_UARTEx_EnableFifoMode+0x6e>
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	2201      	movs	r2, #1
 8009f4e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	2224      	movs	r2, #36	@ 0x24
 8009f56:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	681a      	ldr	r2, [r3, #0]
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	f022 0201 	bic.w	r2, r2, #1
 8009f70:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8009f78:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8009f80:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	68fa      	ldr	r2, [r7, #12]
 8009f88:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009f8a:	6878      	ldr	r0, [r7, #4]
 8009f8c:	f000 f8e4 	bl	800a158 <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	2220      	movs	r2, #32
 8009f94:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	2200      	movs	r2, #0
 8009f9c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8009fa0:	2300      	movs	r3, #0
}
 8009fa2:	4618      	mov	r0, r3
 8009fa4:	3710      	adds	r7, #16
 8009fa6:	46bd      	mov	sp, r7
 8009fa8:	bd80      	pop	{r7, pc}

08009faa <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009faa:	b480      	push	{r7}
 8009fac:	b085      	sub	sp, #20
 8009fae:	af00      	add	r7, sp, #0
 8009fb0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8009fb8:	2b01      	cmp	r3, #1
 8009fba:	d101      	bne.n	8009fc0 <HAL_UARTEx_DisableFifoMode+0x16>
 8009fbc:	2302      	movs	r3, #2
 8009fbe:	e027      	b.n	800a010 <HAL_UARTEx_DisableFifoMode+0x66>
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	2201      	movs	r2, #1
 8009fc4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	2224      	movs	r2, #36	@ 0x24
 8009fcc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	681a      	ldr	r2, [r3, #0]
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	f022 0201 	bic.w	r2, r2, #1
 8009fe6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8009fee:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	2200      	movs	r2, #0
 8009ff4:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	68fa      	ldr	r2, [r7, #12]
 8009ffc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	2220      	movs	r2, #32
 800a002:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	2200      	movs	r2, #0
 800a00a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800a00e:	2300      	movs	r3, #0
}
 800a010:	4618      	mov	r0, r3
 800a012:	3714      	adds	r7, #20
 800a014:	46bd      	mov	sp, r7
 800a016:	bc80      	pop	{r7}
 800a018:	4770      	bx	lr

0800a01a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a01a:	b580      	push	{r7, lr}
 800a01c:	b084      	sub	sp, #16
 800a01e:	af00      	add	r7, sp, #0
 800a020:	6078      	str	r0, [r7, #4]
 800a022:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800a02a:	2b01      	cmp	r3, #1
 800a02c:	d101      	bne.n	800a032 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a02e:	2302      	movs	r3, #2
 800a030:	e02d      	b.n	800a08e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	2201      	movs	r2, #1
 800a036:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	2224      	movs	r2, #36	@ 0x24
 800a03e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	681a      	ldr	r2, [r3, #0]
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	f022 0201 	bic.w	r2, r2, #1
 800a058:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	689b      	ldr	r3, [r3, #8]
 800a060:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	683a      	ldr	r2, [r7, #0]
 800a06a:	430a      	orrs	r2, r1
 800a06c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a06e:	6878      	ldr	r0, [r7, #4]
 800a070:	f000 f872 	bl	800a158 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	68fa      	ldr	r2, [r7, #12]
 800a07a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	2220      	movs	r2, #32
 800a080:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	2200      	movs	r2, #0
 800a088:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800a08c:	2300      	movs	r3, #0
}
 800a08e:	4618      	mov	r0, r3
 800a090:	3710      	adds	r7, #16
 800a092:	46bd      	mov	sp, r7
 800a094:	bd80      	pop	{r7, pc}

0800a096 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a096:	b580      	push	{r7, lr}
 800a098:	b084      	sub	sp, #16
 800a09a:	af00      	add	r7, sp, #0
 800a09c:	6078      	str	r0, [r7, #4]
 800a09e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800a0a6:	2b01      	cmp	r3, #1
 800a0a8:	d101      	bne.n	800a0ae <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a0aa:	2302      	movs	r3, #2
 800a0ac:	e02d      	b.n	800a10a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	2201      	movs	r2, #1
 800a0b2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	2224      	movs	r2, #36	@ 0x24
 800a0ba:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	681a      	ldr	r2, [r3, #0]
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	f022 0201 	bic.w	r2, r2, #1
 800a0d4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	689b      	ldr	r3, [r3, #8]
 800a0dc:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	683a      	ldr	r2, [r7, #0]
 800a0e6:	430a      	orrs	r2, r1
 800a0e8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a0ea:	6878      	ldr	r0, [r7, #4]
 800a0ec:	f000 f834 	bl	800a158 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	68fa      	ldr	r2, [r7, #12]
 800a0f6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	2220      	movs	r2, #32
 800a0fc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	2200      	movs	r2, #0
 800a104:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800a108:	2300      	movs	r3, #0
}
 800a10a:	4618      	mov	r0, r3
 800a10c:	3710      	adds	r7, #16
 800a10e:	46bd      	mov	sp, r7
 800a110:	bd80      	pop	{r7, pc}

0800a112 <UARTEx_Wakeup_AddressConfig>:
  * @param huart           UART handle.
  * @param WakeUpSelection UART wake up from stop mode parameters.
  * @retval None
  */
static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 800a112:	b480      	push	{r7}
 800a114:	b085      	sub	sp, #20
 800a116:	af00      	add	r7, sp, #0
 800a118:	60f8      	str	r0, [r7, #12]
 800a11a:	1d3b      	adds	r3, r7, #4
 800a11c:	e883 0006 	stmia.w	r3, {r1, r2}
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(WakeUpSelection.AddressLength));

  /* Set the USART address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	685b      	ldr	r3, [r3, #4]
 800a126:	f023 0210 	bic.w	r2, r3, #16
 800a12a:	893b      	ldrh	r3, [r7, #8]
 800a12c:	4619      	mov	r1, r3
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	430a      	orrs	r2, r1
 800a134:	605a      	str	r2, [r3, #4]

  /* Set the USART address node */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	685b      	ldr	r3, [r3, #4]
 800a13c:	f023 417f 	bic.w	r1, r3, #4278190080	@ 0xff000000
 800a140:	7abb      	ldrb	r3, [r7, #10]
 800a142:	061a      	lsls	r2, r3, #24
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	430a      	orrs	r2, r1
 800a14a:	605a      	str	r2, [r3, #4]
}
 800a14c:	bf00      	nop
 800a14e:	3714      	adds	r7, #20
 800a150:	46bd      	mov	sp, r7
 800a152:	bc80      	pop	{r7}
 800a154:	4770      	bx	lr
	...

0800a158 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a158:	b480      	push	{r7}
 800a15a:	b085      	sub	sp, #20
 800a15c:	af00      	add	r7, sp, #0
 800a15e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a164:	2b00      	cmp	r3, #0
 800a166:	d108      	bne.n	800a17a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	2201      	movs	r2, #1
 800a16c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	2201      	movs	r2, #1
 800a174:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a178:	e031      	b.n	800a1de <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a17a:	2308      	movs	r3, #8
 800a17c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a17e:	2308      	movs	r3, #8
 800a180:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	689b      	ldr	r3, [r3, #8]
 800a188:	0e5b      	lsrs	r3, r3, #25
 800a18a:	b2db      	uxtb	r3, r3
 800a18c:	f003 0307 	and.w	r3, r3, #7
 800a190:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	689b      	ldr	r3, [r3, #8]
 800a198:	0f5b      	lsrs	r3, r3, #29
 800a19a:	b2db      	uxtb	r3, r3
 800a19c:	f003 0307 	and.w	r3, r3, #7
 800a1a0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a1a2:	7bbb      	ldrb	r3, [r7, #14]
 800a1a4:	7b3a      	ldrb	r2, [r7, #12]
 800a1a6:	4910      	ldr	r1, [pc, #64]	@ (800a1e8 <UARTEx_SetNbDataToProcess+0x90>)
 800a1a8:	5c8a      	ldrb	r2, [r1, r2]
 800a1aa:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a1ae:	7b3a      	ldrb	r2, [r7, #12]
 800a1b0:	490e      	ldr	r1, [pc, #56]	@ (800a1ec <UARTEx_SetNbDataToProcess+0x94>)
 800a1b2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a1b4:	fb93 f3f2 	sdiv	r3, r3, r2
 800a1b8:	b29a      	uxth	r2, r3
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a1c0:	7bfb      	ldrb	r3, [r7, #15]
 800a1c2:	7b7a      	ldrb	r2, [r7, #13]
 800a1c4:	4908      	ldr	r1, [pc, #32]	@ (800a1e8 <UARTEx_SetNbDataToProcess+0x90>)
 800a1c6:	5c8a      	ldrb	r2, [r1, r2]
 800a1c8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a1cc:	7b7a      	ldrb	r2, [r7, #13]
 800a1ce:	4907      	ldr	r1, [pc, #28]	@ (800a1ec <UARTEx_SetNbDataToProcess+0x94>)
 800a1d0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a1d2:	fb93 f3f2 	sdiv	r3, r3, r2
 800a1d6:	b29a      	uxth	r2, r3
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800a1de:	bf00      	nop
 800a1e0:	3714      	adds	r7, #20
 800a1e2:	46bd      	mov	sp, r7
 800a1e4:	bc80      	pop	{r7}
 800a1e6:	4770      	bx	lr
 800a1e8:	0801f494 	.word	0x0801f494
 800a1ec:	0801f49c 	.word	0x0801f49c

0800a1f0 <MX_LoRaWAN_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void MX_LoRaWAN_Init(void)
{
 800a1f0:	b580      	push	{r7, lr}
 800a1f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_LoRaWAN_Init_1 */

  /* USER CODE END MX_LoRaWAN_Init_1 */
  SystemApp_Init();
 800a1f4:	f7f7 fea0 	bl	8001f38 <SystemApp_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_2 */

  /* USER CODE END MX_LoRaWAN_Init_2 */
  LoRaWAN_Init();
 800a1f8:	f000 f820 	bl	800a23c <LoRaWAN_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_3 */

  /* USER CODE END MX_LoRaWAN_Init_3 */
}
 800a1fc:	bf00      	nop
 800a1fe:	bd80      	pop	{r7, pc}

0800a200 <MX_LoRaWAN_Process>:

void MX_LoRaWAN_Process(void)
{
 800a200:	b580      	push	{r7, lr}
 800a202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_LoRaWAN_Process_1 */

  /* USER CODE END MX_LoRaWAN_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 800a204:	f04f 30ff 	mov.w	r0, #4294967295
 800a208:	f011 f81c 	bl	801b244 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_LoRaWAN_Process_2 */

  /* USER CODE END MX_LoRaWAN_Process_2 */
}
 800a20c:	bf00      	nop
 800a20e:	bd80      	pop	{r7, pc}

0800a210 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800a210:	b480      	push	{r7}
 800a212:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 800a214:	f3bf 8f4f 	dsb	sy
}
 800a218:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800a21a:	4b06      	ldr	r3, [pc, #24]	@ (800a234 <__NVIC_SystemReset+0x24>)
 800a21c:	68db      	ldr	r3, [r3, #12]
 800a21e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800a222:	4904      	ldr	r1, [pc, #16]	@ (800a234 <__NVIC_SystemReset+0x24>)
 800a224:	4b04      	ldr	r3, [pc, #16]	@ (800a238 <__NVIC_SystemReset+0x28>)
 800a226:	4313      	orrs	r3, r2
 800a228:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800a22a:	f3bf 8f4f 	dsb	sy
}
 800a22e:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800a230:	bf00      	nop
 800a232:	e7fd      	b.n	800a230 <__NVIC_SystemReset+0x20>
 800a234:	e000ed00 	.word	0xe000ed00
 800a238:	05fa0004 	.word	0x05fa0004

0800a23c <LoRaWAN_Init>:
/* USER CODE BEGIN EF */

/* USER CODE END EF */

void LoRaWAN_Init(void)
{
 800a23c:	b580      	push	{r7, lr}
 800a23e:	b086      	sub	sp, #24
 800a240:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN LoRaWAN_Init_LV */
  uint32_t feature_version = 0UL;
 800a242:	2300      	movs	r3, #0
 800a244:	607b      	str	r3, [r7, #4]
  /* USER CODE END LoRaWAN_Init_LV */

  /* USER CODE BEGIN LoRaWAN_Init_1 */

  /* Get LoRaWAN APP version*/
  APP_LOG(TS_OFF, VLEVEL_M, "APPLICATION_VERSION: V%X.%X.%X\r\n",
 800a246:	2300      	movs	r3, #0
 800a248:	9302      	str	r3, [sp, #8]
 800a24a:	2302      	movs	r3, #2
 800a24c:	9301      	str	r3, [sp, #4]
 800a24e:	2301      	movs	r3, #1
 800a250:	9300      	str	r3, [sp, #0]
 800a252:	4b5a      	ldr	r3, [pc, #360]	@ (800a3bc <LoRaWAN_Init+0x180>)
 800a254:	2200      	movs	r2, #0
 800a256:	2100      	movs	r1, #0
 800a258:	2002      	movs	r0, #2
 800a25a:	f011 fc3f 	bl	801badc <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(APP_VERSION_MAIN),
          (uint8_t)(APP_VERSION_SUB1),
          (uint8_t)(APP_VERSION_SUB2));

  /* Get MW LoRaWAN info */
  APP_LOG(TS_OFF, VLEVEL_M, "MW_LORAWAN_VERSION:  V%X.%X.%X\r\n",
 800a25e:	2300      	movs	r3, #0
 800a260:	9302      	str	r3, [sp, #8]
 800a262:	2304      	movs	r3, #4
 800a264:	9301      	str	r3, [sp, #4]
 800a266:	2302      	movs	r3, #2
 800a268:	9300      	str	r3, [sp, #0]
 800a26a:	4b55      	ldr	r3, [pc, #340]	@ (800a3c0 <LoRaWAN_Init+0x184>)
 800a26c:	2200      	movs	r2, #0
 800a26e:	2100      	movs	r1, #0
 800a270:	2002      	movs	r0, #2
 800a272:	f011 fc33 	bl	801badc <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(LORAWAN_VERSION_MAIN),
          (uint8_t)(LORAWAN_VERSION_SUB1),
          (uint8_t)(LORAWAN_VERSION_SUB2));

  /* Get MW SubGhz_Phy info */
  APP_LOG(TS_OFF, VLEVEL_M, "MW_RADIO_VERSION:    V%X.%X.%X\r\n",
 800a276:	2300      	movs	r3, #0
 800a278:	9302      	str	r3, [sp, #8]
 800a27a:	2302      	movs	r3, #2
 800a27c:	9301      	str	r3, [sp, #4]
 800a27e:	2301      	movs	r3, #1
 800a280:	9300      	str	r3, [sp, #0]
 800a282:	4b50      	ldr	r3, [pc, #320]	@ (800a3c4 <LoRaWAN_Init+0x188>)
 800a284:	2200      	movs	r2, #0
 800a286:	2100      	movs	r1, #0
 800a288:	2002      	movs	r0, #2
 800a28a:	f011 fc27 	bl	801badc <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(SUBGHZ_PHY_VERSION_MAIN),
          (uint8_t)(SUBGHZ_PHY_VERSION_SUB1),
          (uint8_t)(SUBGHZ_PHY_VERSION_SUB2));

  /* Get LoRaWAN Link Layer info */
  LmHandlerGetVersion(LORAMAC_HANDLER_L2_VERSION, &feature_version);
 800a28e:	1d3b      	adds	r3, r7, #4
 800a290:	4619      	mov	r1, r3
 800a292:	2000      	movs	r0, #0
 800a294:	f003 fa24 	bl	800d6e0 <LmHandlerGetVersion>
  APP_LOG(TS_OFF, VLEVEL_M, "L2_SPEC_VERSION:     V%X.%X.%X\r\n",
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	0e1b      	lsrs	r3, r3, #24
 800a29c:	b2db      	uxtb	r3, r3
 800a29e:	461a      	mov	r2, r3
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	0c1b      	lsrs	r3, r3, #16
 800a2a4:	b2db      	uxtb	r3, r3
 800a2a6:	4619      	mov	r1, r3
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	0a1b      	lsrs	r3, r3, #8
 800a2ac:	b2db      	uxtb	r3, r3
 800a2ae:	9302      	str	r3, [sp, #8]
 800a2b0:	9101      	str	r1, [sp, #4]
 800a2b2:	9200      	str	r2, [sp, #0]
 800a2b4:	4b44      	ldr	r3, [pc, #272]	@ (800a3c8 <LoRaWAN_Init+0x18c>)
 800a2b6:	2200      	movs	r2, #0
 800a2b8:	2100      	movs	r1, #0
 800a2ba:	2002      	movs	r0, #2
 800a2bc:	f011 fc0e 	bl	801badc <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(feature_version >> 24),
          (uint8_t)(feature_version >> 16),
          (uint8_t)(feature_version >> 8));

  /* Get LoRaWAN Regional Parameters info */
  LmHandlerGetVersion(LORAMAC_HANDLER_REGION_VERSION, &feature_version);
 800a2c0:	1d3b      	adds	r3, r7, #4
 800a2c2:	4619      	mov	r1, r3
 800a2c4:	2001      	movs	r0, #1
 800a2c6:	f003 fa0b 	bl	800d6e0 <LmHandlerGetVersion>
  APP_LOG(TS_OFF, VLEVEL_M, "RP_SPEC_VERSION:     V%X-%X.%X.%X\r\n",
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	0e1b      	lsrs	r3, r3, #24
 800a2ce:	b2db      	uxtb	r3, r3
 800a2d0:	461a      	mov	r2, r3
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	0c1b      	lsrs	r3, r3, #16
 800a2d6:	b2db      	uxtb	r3, r3
 800a2d8:	4619      	mov	r1, r3
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	0a1b      	lsrs	r3, r3, #8
 800a2de:	b2db      	uxtb	r3, r3
 800a2e0:	6878      	ldr	r0, [r7, #4]
 800a2e2:	b2c0      	uxtb	r0, r0
 800a2e4:	9003      	str	r0, [sp, #12]
 800a2e6:	9302      	str	r3, [sp, #8]
 800a2e8:	9101      	str	r1, [sp, #4]
 800a2ea:	9200      	str	r2, [sp, #0]
 800a2ec:	4b37      	ldr	r3, [pc, #220]	@ (800a3cc <LoRaWAN_Init+0x190>)
 800a2ee:	2200      	movs	r2, #0
 800a2f0:	2100      	movs	r1, #0
 800a2f2:	2002      	movs	r0, #2
 800a2f4:	f011 fbf2 	bl	801badc <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(feature_version >> 24),
          (uint8_t)(feature_version >> 16),
          (uint8_t)(feature_version >> 8),
          (uint8_t)(feature_version));

  UTIL_TIMER_Create(&TxLedTimer, LED_PERIOD_TIME, UTIL_TIMER_ONESHOT, OnTxTimerLedEvent, NULL);
 800a2f8:	2300      	movs	r3, #0
 800a2fa:	9300      	str	r3, [sp, #0]
 800a2fc:	4b34      	ldr	r3, [pc, #208]	@ (800a3d0 <LoRaWAN_Init+0x194>)
 800a2fe:	2200      	movs	r2, #0
 800a300:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 800a304:	4833      	ldr	r0, [pc, #204]	@ (800a3d4 <LoRaWAN_Init+0x198>)
 800a306:	f011 f93b 	bl	801b580 <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&RxLedTimer, LED_PERIOD_TIME, UTIL_TIMER_ONESHOT, OnRxTimerLedEvent, NULL);
 800a30a:	2300      	movs	r3, #0
 800a30c:	9300      	str	r3, [sp, #0]
 800a30e:	4b32      	ldr	r3, [pc, #200]	@ (800a3d8 <LoRaWAN_Init+0x19c>)
 800a310:	2200      	movs	r2, #0
 800a312:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 800a316:	4831      	ldr	r0, [pc, #196]	@ (800a3dc <LoRaWAN_Init+0x1a0>)
 800a318:	f011 f932 	bl	801b580 <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&JoinLedTimer, LED_PERIOD_TIME, UTIL_TIMER_PERIODIC, OnJoinTimerLedEvent, NULL);
 800a31c:	2300      	movs	r3, #0
 800a31e:	9300      	str	r3, [sp, #0]
 800a320:	4b2f      	ldr	r3, [pc, #188]	@ (800a3e0 <LoRaWAN_Init+0x1a4>)
 800a322:	2201      	movs	r2, #1
 800a324:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 800a328:	482e      	ldr	r0, [pc, #184]	@ (800a3e4 <LoRaWAN_Init+0x1a8>)
 800a32a:	f011 f929 	bl	801b580 <UTIL_TIMER_Create>

  /* USER CODE END LoRaWAN_Init_1 */

  UTIL_TIMER_Create(&StopJoinTimer, JOIN_TIME, UTIL_TIMER_ONESHOT, OnStopJoinTimerEvent, NULL);
 800a32e:	2300      	movs	r3, #0
 800a330:	9300      	str	r3, [sp, #0]
 800a332:	4b2d      	ldr	r3, [pc, #180]	@ (800a3e8 <LoRaWAN_Init+0x1ac>)
 800a334:	2200      	movs	r2, #0
 800a336:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 800a33a:	482c      	ldr	r0, [pc, #176]	@ (800a3ec <LoRaWAN_Init+0x1b0>)
 800a33c:	f011 f920 	bl	801b580 <UTIL_TIMER_Create>

  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LmHandlerProcess), UTIL_SEQ_RFU, LmHandlerProcess);
 800a340:	4a2b      	ldr	r2, [pc, #172]	@ (800a3f0 <LoRaWAN_Init+0x1b4>)
 800a342:	2100      	movs	r1, #0
 800a344:	2001      	movs	r0, #1
 800a346:	f011 f879 	bl	801b43c <UTIL_SEQ_RegTask>

  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), UTIL_SEQ_RFU, SendTxData);
 800a34a:	4a2a      	ldr	r2, [pc, #168]	@ (800a3f4 <LoRaWAN_Init+0x1b8>)
 800a34c:	2100      	movs	r1, #0
 800a34e:	2002      	movs	r0, #2
 800a350:	f011 f874 	bl	801b43c <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaStoreContextEvent), UTIL_SEQ_RFU, StoreContext);
 800a354:	4a28      	ldr	r2, [pc, #160]	@ (800a3f8 <LoRaWAN_Init+0x1bc>)
 800a356:	2100      	movs	r1, #0
 800a358:	2004      	movs	r0, #4
 800a35a:	f011 f86f 	bl	801b43c <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaStopJoinEvent), UTIL_SEQ_RFU, StopJoin);
 800a35e:	4a27      	ldr	r2, [pc, #156]	@ (800a3fc <LoRaWAN_Init+0x1c0>)
 800a360:	2100      	movs	r1, #0
 800a362:	2008      	movs	r0, #8
 800a364:	f011 f86a 	bl	801b43c <UTIL_SEQ_RegTask>

  /* Init Info table used by LmHandler*/
  LoraInfo_Init();
 800a368:	f000 fde6 	bl	800af38 <LoraInfo_Init>

  /* Init the Lora Stack*/
  LmHandlerInit(&LmHandlerCallbacks, APP_VERSION);
 800a36c:	f04f 7181 	mov.w	r1, #16908288	@ 0x1020000
 800a370:	4823      	ldr	r0, [pc, #140]	@ (800a400 <LoRaWAN_Init+0x1c4>)
 800a372:	f002 fa9b 	bl	800c8ac <LmHandlerInit>

  LmHandlerConfigure(&LmHandlerParams);
 800a376:	4823      	ldr	r0, [pc, #140]	@ (800a404 <LoRaWAN_Init+0x1c8>)
 800a378:	f002 faf6 	bl	800c968 <LmHandlerConfigure>

  /* USER CODE BEGIN LoRaWAN_Init_2 */
  UTIL_TIMER_Start(&JoinLedTimer);
 800a37c:	4819      	ldr	r0, [pc, #100]	@ (800a3e4 <LoRaWAN_Init+0x1a8>)
 800a37e:	f011 f935 	bl	801b5ec <UTIL_TIMER_Start>

  /* USER CODE END LoRaWAN_Init_2 */

  LmHandlerJoin(ActivationType, ForceRejoin);
 800a382:	4b21      	ldr	r3, [pc, #132]	@ (800a408 <LoRaWAN_Init+0x1cc>)
 800a384:	781b      	ldrb	r3, [r3, #0]
 800a386:	4a21      	ldr	r2, [pc, #132]	@ (800a40c <LoRaWAN_Init+0x1d0>)
 800a388:	7812      	ldrb	r2, [r2, #0]
 800a38a:	4611      	mov	r1, r2
 800a38c:	4618      	mov	r0, r3
 800a38e:	f002 fc67 	bl	800cc60 <LmHandlerJoin>

  if (EventType == TX_ON_TIMER)
 800a392:	4b1f      	ldr	r3, [pc, #124]	@ (800a410 <LoRaWAN_Init+0x1d4>)
 800a394:	781b      	ldrb	r3, [r3, #0]
 800a396:	2b00      	cmp	r3, #0
 800a398:	d10b      	bne.n	800a3b2 <LoRaWAN_Init+0x176>
  {
    /* send every time timer elapses */
    UTIL_TIMER_Create(&TxTimer, TxPeriodicity, UTIL_TIMER_ONESHOT, OnTxTimerEvent, NULL);
 800a39a:	4b1e      	ldr	r3, [pc, #120]	@ (800a414 <LoRaWAN_Init+0x1d8>)
 800a39c:	6819      	ldr	r1, [r3, #0]
 800a39e:	2300      	movs	r3, #0
 800a3a0:	9300      	str	r3, [sp, #0]
 800a3a2:	4b1d      	ldr	r3, [pc, #116]	@ (800a418 <LoRaWAN_Init+0x1dc>)
 800a3a4:	2200      	movs	r2, #0
 800a3a6:	481d      	ldr	r0, [pc, #116]	@ (800a41c <LoRaWAN_Init+0x1e0>)
 800a3a8:	f011 f8ea 	bl	801b580 <UTIL_TIMER_Create>
    UTIL_TIMER_Start(&TxTimer);
 800a3ac:	481b      	ldr	r0, [pc, #108]	@ (800a41c <LoRaWAN_Init+0x1e0>)
 800a3ae:	f011 f91d 	bl	801b5ec <UTIL_TIMER_Start>
  }

  /* USER CODE BEGIN LoRaWAN_Init_Last */

  /* USER CODE END LoRaWAN_Init_Last */
}
 800a3b2:	bf00      	nop
 800a3b4:	3708      	adds	r7, #8
 800a3b6:	46bd      	mov	sp, r7
 800a3b8:	bd80      	pop	{r7, pc}
 800a3ba:	bf00      	nop
 800a3bc:	0801ea28 	.word	0x0801ea28
 800a3c0:	0801ea4c 	.word	0x0801ea4c
 800a3c4:	0801ea70 	.word	0x0801ea70
 800a3c8:	0801ea94 	.word	0x0801ea94
 800a3cc:	0801eab8 	.word	0x0801eab8
 800a3d0:	0800aa01 	.word	0x0800aa01
 800a3d4:	200006c0 	.word	0x200006c0
 800a3d8:	0800aa13 	.word	0x0800aa13
 800a3dc:	200006d8 	.word	0x200006d8
 800a3e0:	0800aa25 	.word	0x0800aa25
 800a3e4:	200006f0 	.word	0x200006f0
 800a3e8:	0800ae01 	.word	0x0800ae01
 800a3ec:	200005b4 	.word	0x200005b4
 800a3f0:	0800cbf5 	.word	0x0800cbf5
 800a3f4:	0800a6c1 	.word	0x0800a6c1
 800a3f8:	0800ae25 	.word	0x0800ae25
 800a3fc:	0800ad81 	.word	0x0800ad81
 800a400:	20000024 	.word	0x20000024
 800a404:	20000070 	.word	0x20000070
 800a408:	20000020 	.word	0x20000020
 800a40c:	20000021 	.word	0x20000021
 800a410:	20000598 	.word	0x20000598
 800a414:	20000084 	.word	0x20000084
 800a418:	0800a9dd 	.word	0x0800a9dd
 800a41c:	2000059c 	.word	0x2000059c

0800a420 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN PB_Callbacks */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800a420:	b580      	push	{r7, lr}
 800a422:	b082      	sub	sp, #8
 800a424:	af00      	add	r7, sp, #0
 800a426:	4603      	mov	r3, r0
 800a428:	80fb      	strh	r3, [r7, #6]
  switch (GPIO_Pin)
 800a42a:	88fb      	ldrh	r3, [r7, #6]
 800a42c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a430:	d104      	bne.n	800a43c <HAL_GPIO_EXTI_Callback+0x1c>
  {
    case  BUT1_Pin:
    	// XXX: always initialized
      if (EventType == TX_ON_EVENT || 1)
      {
        UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), CFG_SEQ_Prio_0);
 800a432:	2100      	movs	r1, #0
 800a434:	2002      	movs	r0, #2
 800a436:	f011 f823 	bl	801b480 <UTIL_SEQ_SetTask>
      }
      break;
 800a43a:	e000      	b.n	800a43e <HAL_GPIO_EXTI_Callback+0x1e>
    default:
      break;
 800a43c:	bf00      	nop
  }
}
 800a43e:	bf00      	nop
 800a440:	3708      	adds	r7, #8
 800a442:	46bd      	mov	sp, r7
 800a444:	bd80      	pop	{r7, pc}
	...

0800a448 <OnRxData>:
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

static void OnRxData(LmHandlerAppData_t *appData, LmHandlerRxParams_t *params)
{
 800a448:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a44c:	b08d      	sub	sp, #52	@ 0x34
 800a44e:	af06      	add	r7, sp, #24
 800a450:	6078      	str	r0, [r7, #4]
 800a452:	6039      	str	r1, [r7, #0]
  uint8_t RxPort = 0;
 800a454:	2300      	movs	r3, #0
 800a456:	753b      	strb	r3, [r7, #20]

  if (params != NULL && appData != NULL && appData->Buffer != NULL)
 800a458:	683b      	ldr	r3, [r7, #0]
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	f000 8113 	beq.w	800a686 <OnRxData+0x23e>
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	2b00      	cmp	r3, #0
 800a464:	f000 810f 	beq.w	800a686 <OnRxData+0x23e>
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	685b      	ldr	r3, [r3, #4]
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	f000 810a 	beq.w	800a686 <OnRxData+0x23e>
  {
    UTIL_TIMER_Start(&RxLedTimer);
 800a472:	4887      	ldr	r0, [pc, #540]	@ (800a690 <OnRxData+0x248>)
 800a474:	f011 f8ba 	bl	801b5ec <UTIL_TIMER_Start>

    // ✅ แสดงว่าได้รับข้อมูลและขนาดของ buffer
    APP_LOG(TS_OFF, VLEVEL_M, ">>> LoRa RX: Received %d bytes on Port %d\r\n", appData->BufferSize, appData->Port);
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	785b      	ldrb	r3, [r3, #1]
 800a47c:	461a      	mov	r2, r3
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	781b      	ldrb	r3, [r3, #0]
 800a482:	9301      	str	r3, [sp, #4]
 800a484:	9200      	str	r2, [sp, #0]
 800a486:	4b83      	ldr	r3, [pc, #524]	@ (800a694 <OnRxData+0x24c>)
 800a488:	2200      	movs	r2, #0
 800a48a:	2100      	movs	r1, #0
 800a48c:	2002      	movs	r0, #2
 800a48e:	f011 fb25 	bl	801badc <UTIL_ADV_TRACE_COND_FSend>

    // ✅ แสดงข้อมูลที่ได้รับในรูปแบบ HEX
    for (uint8_t i = 0; i < appData->BufferSize; i++)
 800a492:	2300      	movs	r3, #0
 800a494:	75fb      	strb	r3, [r7, #23]
 800a496:	e00e      	b.n	800a4b6 <OnRxData+0x6e>
    {
      APP_LOG(TS_OFF, VLEVEL_M, "0x%02X ", appData->Buffer[i]);
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	685a      	ldr	r2, [r3, #4]
 800a49c:	7dfb      	ldrb	r3, [r7, #23]
 800a49e:	4413      	add	r3, r2
 800a4a0:	781b      	ldrb	r3, [r3, #0]
 800a4a2:	9300      	str	r3, [sp, #0]
 800a4a4:	4b7c      	ldr	r3, [pc, #496]	@ (800a698 <OnRxData+0x250>)
 800a4a6:	2200      	movs	r2, #0
 800a4a8:	2100      	movs	r1, #0
 800a4aa:	2002      	movs	r0, #2
 800a4ac:	f011 fb16 	bl	801badc <UTIL_ADV_TRACE_COND_FSend>
    for (uint8_t i = 0; i < appData->BufferSize; i++)
 800a4b0:	7dfb      	ldrb	r3, [r7, #23]
 800a4b2:	3301      	adds	r3, #1
 800a4b4:	75fb      	strb	r3, [r7, #23]
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	785b      	ldrb	r3, [r3, #1]
 800a4ba:	7dfa      	ldrb	r2, [r7, #23]
 800a4bc:	429a      	cmp	r2, r3
 800a4be:	d3eb      	bcc.n	800a498 <OnRxData+0x50>
    }
    APP_LOG(TS_OFF, VLEVEL_M, "\r\n");
 800a4c0:	4b76      	ldr	r3, [pc, #472]	@ (800a69c <OnRxData+0x254>)
 800a4c2:	2200      	movs	r2, #0
 800a4c4:	2100      	movs	r1, #0
 800a4c6:	2002      	movs	r0, #2
 800a4c8:	f011 fb08 	bl	801badc <UTIL_ADV_TRACE_COND_FSend>

    // ✅ (ทางเลือก) แสดงข้อมูลเป็น ASCII string ถ้าเป็นข้อความ
    bool isAscii = true;
 800a4cc:	2301      	movs	r3, #1
 800a4ce:	75bb      	strb	r3, [r7, #22]
    for (uint8_t i = 0; i < appData->BufferSize; i++) {
 800a4d0:	2300      	movs	r3, #0
 800a4d2:	757b      	strb	r3, [r7, #21]
 800a4d4:	e013      	b.n	800a4fe <OnRxData+0xb6>
      if (appData->Buffer[i] < 32 || appData->Buffer[i] > 126) {
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	685a      	ldr	r2, [r3, #4]
 800a4da:	7d7b      	ldrb	r3, [r7, #21]
 800a4dc:	4413      	add	r3, r2
 800a4de:	781b      	ldrb	r3, [r3, #0]
 800a4e0:	2b1f      	cmp	r3, #31
 800a4e2:	d906      	bls.n	800a4f2 <OnRxData+0xaa>
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	685a      	ldr	r2, [r3, #4]
 800a4e8:	7d7b      	ldrb	r3, [r7, #21]
 800a4ea:	4413      	add	r3, r2
 800a4ec:	781b      	ldrb	r3, [r3, #0]
 800a4ee:	2b7e      	cmp	r3, #126	@ 0x7e
 800a4f0:	d902      	bls.n	800a4f8 <OnRxData+0xb0>
        isAscii = false;
 800a4f2:	2300      	movs	r3, #0
 800a4f4:	75bb      	strb	r3, [r7, #22]
        break;
 800a4f6:	e007      	b.n	800a508 <OnRxData+0xc0>
    for (uint8_t i = 0; i < appData->BufferSize; i++) {
 800a4f8:	7d7b      	ldrb	r3, [r7, #21]
 800a4fa:	3301      	adds	r3, #1
 800a4fc:	757b      	strb	r3, [r7, #21]
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	785b      	ldrb	r3, [r3, #1]
 800a502:	7d7a      	ldrb	r2, [r7, #21]
 800a504:	429a      	cmp	r2, r3
 800a506:	d3e6      	bcc.n	800a4d6 <OnRxData+0x8e>
      }
    }
    if (isAscii)
 800a508:	7dbb      	ldrb	r3, [r7, #22]
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d040      	beq.n	800a590 <OnRxData+0x148>
    {
 800a50e:	466b      	mov	r3, sp
 800a510:	461e      	mov	r6, r3
      char msg[appData->BufferSize + 1];
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	785b      	ldrb	r3, [r3, #1]
 800a516:	1c59      	adds	r1, r3, #1
 800a518:	1e4b      	subs	r3, r1, #1
 800a51a:	613b      	str	r3, [r7, #16]
 800a51c:	460a      	mov	r2, r1
 800a51e:	2300      	movs	r3, #0
 800a520:	4690      	mov	r8, r2
 800a522:	4699      	mov	r9, r3
 800a524:	f04f 0200 	mov.w	r2, #0
 800a528:	f04f 0300 	mov.w	r3, #0
 800a52c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800a530:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800a534:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800a538:	460a      	mov	r2, r1
 800a53a:	2300      	movs	r3, #0
 800a53c:	4614      	mov	r4, r2
 800a53e:	461d      	mov	r5, r3
 800a540:	f04f 0200 	mov.w	r2, #0
 800a544:	f04f 0300 	mov.w	r3, #0
 800a548:	00eb      	lsls	r3, r5, #3
 800a54a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a54e:	00e2      	lsls	r2, r4, #3
 800a550:	460b      	mov	r3, r1
 800a552:	3307      	adds	r3, #7
 800a554:	08db      	lsrs	r3, r3, #3
 800a556:	00db      	lsls	r3, r3, #3
 800a558:	ebad 0d03 	sub.w	sp, sp, r3
 800a55c:	ab06      	add	r3, sp, #24
 800a55e:	3300      	adds	r3, #0
 800a560:	60fb      	str	r3, [r7, #12]
      memcpy(msg, appData->Buffer, appData->BufferSize);
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	6859      	ldr	r1, [r3, #4]
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	785b      	ldrb	r3, [r3, #1]
 800a56a:	461a      	mov	r2, r3
 800a56c:	68f8      	ldr	r0, [r7, #12]
 800a56e:	f012 fb9e 	bl	801ccae <memcpy>
      msg[appData->BufferSize] = '\0';
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	785b      	ldrb	r3, [r3, #1]
 800a576:	461a      	mov	r2, r3
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	2100      	movs	r1, #0
 800a57c:	5499      	strb	r1, [r3, r2]
      APP_LOG(TS_OFF, VLEVEL_M, ">>> ASCII: %s\r\n", msg);
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	9300      	str	r3, [sp, #0]
 800a582:	4b47      	ldr	r3, [pc, #284]	@ (800a6a0 <OnRxData+0x258>)
 800a584:	2200      	movs	r2, #0
 800a586:	2100      	movs	r1, #0
 800a588:	2002      	movs	r0, #2
 800a58a:	f011 faa7 	bl	801badc <UTIL_ADV_TRACE_COND_FSend>
 800a58e:	46b5      	mov	sp, r6
    }

    // ✅ เก็บค่า Port ไว้แสดง D/L log ท้ายฟังก์ชัน
    RxPort = appData->Port;
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	781b      	ldrb	r3, [r3, #0]
 800a594:	753b      	strb	r3, [r7, #20]

    // 🔁 รันโค้ดการประมวลผลเดิมตาม port
    if (params->IsMcpsIndication)
 800a596:	683b      	ldr	r3, [r7, #0]
 800a598:	781b      	ldrb	r3, [r3, #0]
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d04f      	beq.n	800a63e <OnRxData+0x1f6>
    {
      switch (appData->Port)
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	781b      	ldrb	r3, [r3, #0]
 800a5a2:	2b02      	cmp	r3, #2
 800a5a4:	d01f      	beq.n	800a5e6 <OnRxData+0x19e>
 800a5a6:	2b03      	cmp	r3, #3
 800a5a8:	d144      	bne.n	800a634 <OnRxData+0x1ec>
      {
        case LORAWAN_SWITCH_CLASS_PORT:
          if (appData->BufferSize == 1)
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	785b      	ldrb	r3, [r3, #1]
 800a5ae:	2b01      	cmp	r3, #1
 800a5b0:	d142      	bne.n	800a638 <OnRxData+0x1f0>
          {
            switch (appData->Buffer[0])
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	685b      	ldr	r3, [r3, #4]
 800a5b6:	781b      	ldrb	r3, [r3, #0]
 800a5b8:	2b02      	cmp	r3, #2
 800a5ba:	d00e      	beq.n	800a5da <OnRxData+0x192>
 800a5bc:	2b02      	cmp	r3, #2
 800a5be:	dc10      	bgt.n	800a5e2 <OnRxData+0x19a>
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	d002      	beq.n	800a5ca <OnRxData+0x182>
 800a5c4:	2b01      	cmp	r3, #1
 800a5c6:	d004      	beq.n	800a5d2 <OnRxData+0x18a>
            {
              case 0: LmHandlerRequestClass(CLASS_A); break;
              case 1: LmHandlerRequestClass(CLASS_B); break;
              case 2: LmHandlerRequestClass(CLASS_C); break;
              default: break;
 800a5c8:	e00b      	b.n	800a5e2 <OnRxData+0x19a>
              case 0: LmHandlerRequestClass(CLASS_A); break;
 800a5ca:	2000      	movs	r0, #0
 800a5cc:	f002 fcd4 	bl	800cf78 <LmHandlerRequestClass>
 800a5d0:	e008      	b.n	800a5e4 <OnRxData+0x19c>
              case 1: LmHandlerRequestClass(CLASS_B); break;
 800a5d2:	2001      	movs	r0, #1
 800a5d4:	f002 fcd0 	bl	800cf78 <LmHandlerRequestClass>
 800a5d8:	e004      	b.n	800a5e4 <OnRxData+0x19c>
              case 2: LmHandlerRequestClass(CLASS_C); break;
 800a5da:	2002      	movs	r0, #2
 800a5dc:	f002 fccc 	bl	800cf78 <LmHandlerRequestClass>
 800a5e0:	e000      	b.n	800a5e4 <OnRxData+0x19c>
              default: break;
 800a5e2:	bf00      	nop
            }
          }
          break;
 800a5e4:	e028      	b.n	800a638 <OnRxData+0x1f0>

        case LORAWAN_USER_APP_PORT:
          if (appData->BufferSize == 1)
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	785b      	ldrb	r3, [r3, #1]
 800a5ea:	2b01      	cmp	r3, #1
 800a5ec:	d126      	bne.n	800a63c <OnRxData+0x1f4>
          {
            AppLedStateOn = appData->Buffer[0] & 0x01;
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	685b      	ldr	r3, [r3, #4]
 800a5f2:	781b      	ldrb	r3, [r3, #0]
 800a5f4:	f003 0301 	and.w	r3, r3, #1
 800a5f8:	b2da      	uxtb	r2, r3
 800a5fa:	4b2a      	ldr	r3, [pc, #168]	@ (800a6a4 <OnRxData+0x25c>)
 800a5fc:	701a      	strb	r2, [r3, #0]
            HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin,
 800a5fe:	4b29      	ldr	r3, [pc, #164]	@ (800a6a4 <OnRxData+0x25c>)
 800a600:	781b      	ldrb	r3, [r3, #0]
 800a602:	2b00      	cmp	r3, #0
 800a604:	bf0c      	ite	eq
 800a606:	2301      	moveq	r3, #1
 800a608:	2300      	movne	r3, #0
 800a60a:	b2db      	uxtb	r3, r3
 800a60c:	461a      	mov	r2, r3
 800a60e:	2120      	movs	r1, #32
 800a610:	4825      	ldr	r0, [pc, #148]	@ (800a6a8 <OnRxData+0x260>)
 800a612:	f7fb f825 	bl	8005660 <HAL_GPIO_WritePin>
                              (AppLedStateOn == RESET) ? GPIO_PIN_SET : GPIO_PIN_RESET);
            APP_LOG(TS_OFF, VLEVEL_H, "LED %s\r\n", AppLedStateOn == RESET ? "OFF" : "ON");
 800a616:	4b23      	ldr	r3, [pc, #140]	@ (800a6a4 <OnRxData+0x25c>)
 800a618:	781b      	ldrb	r3, [r3, #0]
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	d101      	bne.n	800a622 <OnRxData+0x1da>
 800a61e:	4b23      	ldr	r3, [pc, #140]	@ (800a6ac <OnRxData+0x264>)
 800a620:	e000      	b.n	800a624 <OnRxData+0x1dc>
 800a622:	4b23      	ldr	r3, [pc, #140]	@ (800a6b0 <OnRxData+0x268>)
 800a624:	9300      	str	r3, [sp, #0]
 800a626:	4b23      	ldr	r3, [pc, #140]	@ (800a6b4 <OnRxData+0x26c>)
 800a628:	2200      	movs	r2, #0
 800a62a:	2100      	movs	r1, #0
 800a62c:	2003      	movs	r0, #3
 800a62e:	f011 fa55 	bl	801badc <UTIL_ADV_TRACE_COND_FSend>
          }
          break;
 800a632:	e003      	b.n	800a63c <OnRxData+0x1f4>

        default:
          break;
 800a634:	bf00      	nop
 800a636:	e002      	b.n	800a63e <OnRxData+0x1f6>
          break;
 800a638:	bf00      	nop
 800a63a:	e000      	b.n	800a63e <OnRxData+0x1f6>
          break;
 800a63c:	bf00      	nop
      }
    }

    // ✅ แสดงรายละเอียด D/L log
    if (params->RxSlot < RX_SLOT_NONE)
 800a63e:	683b      	ldr	r3, [r7, #0]
 800a640:	7c1b      	ldrb	r3, [r3, #16]
 800a642:	2b05      	cmp	r3, #5
 800a644:	d81f      	bhi.n	800a686 <OnRxData+0x23e>
    {
      APP_LOG(TS_OFF, VLEVEL_H, "###### D/L FRAME:%04d | PORT:%d | DR:%d | SLOT:%s | RSSI:%d | SNR:%d\r\n",
 800a646:	683b      	ldr	r3, [r7, #0]
 800a648:	68db      	ldr	r3, [r3, #12]
 800a64a:	7d3a      	ldrb	r2, [r7, #20]
 800a64c:	6839      	ldr	r1, [r7, #0]
 800a64e:	f991 1008 	ldrsb.w	r1, [r1, #8]
 800a652:	460c      	mov	r4, r1
 800a654:	6839      	ldr	r1, [r7, #0]
 800a656:	7c09      	ldrb	r1, [r1, #16]
 800a658:	4608      	mov	r0, r1
 800a65a:	4917      	ldr	r1, [pc, #92]	@ (800a6b8 <OnRxData+0x270>)
 800a65c:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800a660:	6838      	ldr	r0, [r7, #0]
 800a662:	f990 0009 	ldrsb.w	r0, [r0, #9]
 800a666:	4605      	mov	r5, r0
 800a668:	6838      	ldr	r0, [r7, #0]
 800a66a:	f990 000a 	ldrsb.w	r0, [r0, #10]
 800a66e:	9005      	str	r0, [sp, #20]
 800a670:	9504      	str	r5, [sp, #16]
 800a672:	9103      	str	r1, [sp, #12]
 800a674:	9402      	str	r4, [sp, #8]
 800a676:	9201      	str	r2, [sp, #4]
 800a678:	9300      	str	r3, [sp, #0]
 800a67a:	4b10      	ldr	r3, [pc, #64]	@ (800a6bc <OnRxData+0x274>)
 800a67c:	2200      	movs	r2, #0
 800a67e:	2100      	movs	r1, #0
 800a680:	2003      	movs	r0, #3
 800a682:	f011 fa2b 	bl	801badc <UTIL_ADV_TRACE_COND_FSend>
              params->DownlinkCounter, RxPort, params->Datarate, slotStrings[params->RxSlot], params->Rssi, params->Snr);
    }
  }
}
 800a686:	bf00      	nop
 800a688:	371c      	adds	r7, #28
 800a68a:	46bd      	mov	sp, r7
 800a68c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a690:	200006d8 	.word	0x200006d8
 800a694:	0801eadc 	.word	0x0801eadc
 800a698:	0801eb08 	.word	0x0801eb08
 800a69c:	0801eb10 	.word	0x0801eb10
 800a6a0:	0801eb14 	.word	0x0801eb14
 800a6a4:	200006be 	.word	0x200006be
 800a6a8:	48000400 	.word	0x48000400
 800a6ac:	0801eb24 	.word	0x0801eb24
 800a6b0:	0801eb28 	.word	0x0801eb28
 800a6b4:	0801eb2c 	.word	0x0801eb2c
 800a6b8:	20000008 	.word	0x20000008
 800a6bc:	0801eb38 	.word	0x0801eb38

0800a6c0 <SendTxData>:


static void SendTxData(void)
{
 800a6c0:	b590      	push	{r4, r7, lr}
 800a6c2:	b091      	sub	sp, #68	@ 0x44
 800a6c4:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN SendTxData_1 */
  LmHandlerErrorStatus_t status = LORAMAC_HANDLER_ERROR;
 800a6c6:	23ff      	movs	r3, #255	@ 0xff
 800a6c8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  uint8_t batteryLevel = GetBatteryLevel();
 800a6cc:	f7f7 fc68 	bl	8001fa0 <GetBatteryLevel>
 800a6d0:	4603      	mov	r3, r0
 800a6d2:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
  sensor_t sensor_data;
  UTIL_TIMER_Time_t nextTxIn = 0;
 800a6d6:	2300      	movs	r3, #0
 800a6d8:	637b      	str	r3, [r7, #52]	@ 0x34

#ifdef CAYENNE_LPP
  uint8_t channel = 0;
#else
  uint16_t pressure = 0;
 800a6da:	2300      	movs	r3, #0
 800a6dc:	85bb      	strh	r3, [r7, #44]	@ 0x2c
  int16_t temperature = 0;
 800a6de:	2300      	movs	r3, #0
 800a6e0:	857b      	strh	r3, [r7, #42]	@ 0x2a
  uint16_t humidity = 0;
 800a6e2:	2300      	movs	r3, #0
 800a6e4:	853b      	strh	r3, [r7, #40]	@ 0x28
  uint32_t i = 0;
 800a6e6:	2300      	movs	r3, #0
 800a6e8:	633b      	str	r3, [r7, #48]	@ 0x30
  int32_t latitude = 0;
 800a6ea:	2300      	movs	r3, #0
 800a6ec:	627b      	str	r3, [r7, #36]	@ 0x24
  int32_t longitude = 0;
 800a6ee:	2300      	movs	r3, #0
 800a6f0:	623b      	str	r3, [r7, #32]
  uint16_t altitudeGps = 0;
 800a6f2:	2300      	movs	r3, #0
 800a6f4:	83fb      	strh	r3, [r7, #30]
#endif /* CAYENNE_LPP */

  EnvSensors_Read(&sensor_data);
 800a6f6:	1d3b      	adds	r3, r7, #4
 800a6f8:	4618      	mov	r0, r3
 800a6fa:	f7f7 fe11 	bl	8002320 <EnvSensors_Read>

  APP_LOG(TS_ON, VLEVEL_M, "VDDA: %d\r\n", batteryLevel);
 800a6fe:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800a702:	9300      	str	r3, [sp, #0]
 800a704:	4b8f      	ldr	r3, [pc, #572]	@ (800a944 <SendTxData+0x284>)
 800a706:	2201      	movs	r2, #1
 800a708:	2100      	movs	r1, #0
 800a70a:	2002      	movs	r0, #2
 800a70c:	f011 f9e6 	bl	801badc <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_ON, VLEVEL_M, "temp: %d\r\n", (int16_t)(sensor_data.temperature));
 800a710:	68bb      	ldr	r3, [r7, #8]
 800a712:	4618      	mov	r0, r3
 800a714:	f7f6 fc7e 	bl	8001014 <__aeabi_f2iz>
 800a718:	4603      	mov	r3, r0
 800a71a:	b21b      	sxth	r3, r3
 800a71c:	9300      	str	r3, [sp, #0]
 800a71e:	4b8a      	ldr	r3, [pc, #552]	@ (800a948 <SendTxData+0x288>)
 800a720:	2201      	movs	r2, #1
 800a722:	2100      	movs	r1, #0
 800a724:	2002      	movs	r0, #2
 800a726:	f011 f9d9 	bl	801badc <UTIL_ADV_TRACE_COND_FSend>

  AppData.Port = LORAWAN_USER_APP_PORT;
 800a72a:	4b88      	ldr	r3, [pc, #544]	@ (800a94c <SendTxData+0x28c>)
 800a72c:	2202      	movs	r2, #2
 800a72e:	701a      	strb	r2, [r3, #0]
  }

  CayenneLppCopy(AppData.Buffer);
  AppData.BufferSize = CayenneLppGetSize();
#else  /* not CAYENNE_LPP */
  humidity    = (uint16_t)(sensor_data.humidity * 10);            /* in %*10     */
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	4987      	ldr	r1, [pc, #540]	@ (800a950 <SendTxData+0x290>)
 800a734:	4618      	mov	r0, r3
 800a736:	f7f6 fb1d 	bl	8000d74 <__aeabi_fmul>
 800a73a:	4603      	mov	r3, r0
 800a73c:	4618      	mov	r0, r3
 800a73e:	f7f6 fc8f 	bl	8001060 <__aeabi_f2uiz>
 800a742:	4603      	mov	r3, r0
 800a744:	853b      	strh	r3, [r7, #40]	@ 0x28
  temperature = (int16_t)(sensor_data.temperature);
 800a746:	68bb      	ldr	r3, [r7, #8]
 800a748:	4618      	mov	r0, r3
 800a74a:	f7f6 fc63 	bl	8001014 <__aeabi_f2iz>
 800a74e:	4603      	mov	r3, r0
 800a750:	857b      	strh	r3, [r7, #42]	@ 0x2a
  pressure = (uint16_t)(sensor_data.pressure * 100 / 10); /* in hPa / 10 */
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	497f      	ldr	r1, [pc, #508]	@ (800a954 <SendTxData+0x294>)
 800a756:	4618      	mov	r0, r3
 800a758:	f7f6 fb0c 	bl	8000d74 <__aeabi_fmul>
 800a75c:	4603      	mov	r3, r0
 800a75e:	497c      	ldr	r1, [pc, #496]	@ (800a950 <SendTxData+0x290>)
 800a760:	4618      	mov	r0, r3
 800a762:	f7f6 fbbb 	bl	8000edc <__aeabi_fdiv>
 800a766:	4603      	mov	r3, r0
 800a768:	4618      	mov	r0, r3
 800a76a:	f7f6 fc79 	bl	8001060 <__aeabi_f2uiz>
 800a76e:	4603      	mov	r3, r0
 800a770:	85bb      	strh	r3, [r7, #44]	@ 0x2c

  AppData.Buffer[i++] = AppLedStateOn;
 800a772:	4b76      	ldr	r3, [pc, #472]	@ (800a94c <SendTxData+0x28c>)
 800a774:	685a      	ldr	r2, [r3, #4]
 800a776:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a778:	1c59      	adds	r1, r3, #1
 800a77a:	6339      	str	r1, [r7, #48]	@ 0x30
 800a77c:	4413      	add	r3, r2
 800a77e:	4a76      	ldr	r2, [pc, #472]	@ (800a958 <SendTxData+0x298>)
 800a780:	7812      	ldrb	r2, [r2, #0]
 800a782:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (uint8_t)((pressure >> 8) & 0xFF);
 800a784:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800a786:	0a1b      	lsrs	r3, r3, #8
 800a788:	b298      	uxth	r0, r3
 800a78a:	4b70      	ldr	r3, [pc, #448]	@ (800a94c <SendTxData+0x28c>)
 800a78c:	685a      	ldr	r2, [r3, #4]
 800a78e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a790:	1c59      	adds	r1, r3, #1
 800a792:	6339      	str	r1, [r7, #48]	@ 0x30
 800a794:	4413      	add	r3, r2
 800a796:	b2c2      	uxtb	r2, r0
 800a798:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (uint8_t)(pressure & 0xFF);
 800a79a:	4b6c      	ldr	r3, [pc, #432]	@ (800a94c <SendTxData+0x28c>)
 800a79c:	685a      	ldr	r2, [r3, #4]
 800a79e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7a0:	1c59      	adds	r1, r3, #1
 800a7a2:	6339      	str	r1, [r7, #48]	@ 0x30
 800a7a4:	4413      	add	r3, r2
 800a7a6:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 800a7a8:	b2d2      	uxtb	r2, r2
 800a7aa:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (uint8_t)(temperature & 0xFF);
 800a7ac:	4b67      	ldr	r3, [pc, #412]	@ (800a94c <SendTxData+0x28c>)
 800a7ae:	685a      	ldr	r2, [r3, #4]
 800a7b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7b2:	1c59      	adds	r1, r3, #1
 800a7b4:	6339      	str	r1, [r7, #48]	@ 0x30
 800a7b6:	4413      	add	r3, r2
 800a7b8:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 800a7ba:	b2d2      	uxtb	r2, r2
 800a7bc:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (uint8_t)((humidity >> 8) & 0xFF);
 800a7be:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800a7c0:	0a1b      	lsrs	r3, r3, #8
 800a7c2:	b298      	uxth	r0, r3
 800a7c4:	4b61      	ldr	r3, [pc, #388]	@ (800a94c <SendTxData+0x28c>)
 800a7c6:	685a      	ldr	r2, [r3, #4]
 800a7c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7ca:	1c59      	adds	r1, r3, #1
 800a7cc:	6339      	str	r1, [r7, #48]	@ 0x30
 800a7ce:	4413      	add	r3, r2
 800a7d0:	b2c2      	uxtb	r2, r0
 800a7d2:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (uint8_t)(humidity & 0xFF);
 800a7d4:	4b5d      	ldr	r3, [pc, #372]	@ (800a94c <SendTxData+0x28c>)
 800a7d6:	685a      	ldr	r2, [r3, #4]
 800a7d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7da:	1c59      	adds	r1, r3, #1
 800a7dc:	6339      	str	r1, [r7, #48]	@ 0x30
 800a7de:	4413      	add	r3, r2
 800a7e0:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800a7e2:	b2d2      	uxtb	r2, r2
 800a7e4:	701a      	strb	r2, [r3, #0]

  if ((LmHandlerParams.ActiveRegion == LORAMAC_REGION_US915) || (LmHandlerParams.ActiveRegion == LORAMAC_REGION_AU915)
 800a7e6:	4b5d      	ldr	r3, [pc, #372]	@ (800a95c <SendTxData+0x29c>)
 800a7e8:	781b      	ldrb	r3, [r3, #0]
 800a7ea:	2b08      	cmp	r3, #8
 800a7ec:	d007      	beq.n	800a7fe <SendTxData+0x13e>
 800a7ee:	4b5b      	ldr	r3, [pc, #364]	@ (800a95c <SendTxData+0x29c>)
 800a7f0:	781b      	ldrb	r3, [r3, #0]
 800a7f2:	2b01      	cmp	r3, #1
 800a7f4:	d003      	beq.n	800a7fe <SendTxData+0x13e>
      || (LmHandlerParams.ActiveRegion == LORAMAC_REGION_AS923))
 800a7f6:	4b59      	ldr	r3, [pc, #356]	@ (800a95c <SendTxData+0x29c>)
 800a7f8:	781b      	ldrb	r3, [r3, #0]
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d120      	bne.n	800a840 <SendTxData+0x180>
  {
    AppData.Buffer[i++] = 0;
 800a7fe:	4b53      	ldr	r3, [pc, #332]	@ (800a94c <SendTxData+0x28c>)
 800a800:	685a      	ldr	r2, [r3, #4]
 800a802:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a804:	1c59      	adds	r1, r3, #1
 800a806:	6339      	str	r1, [r7, #48]	@ 0x30
 800a808:	4413      	add	r3, r2
 800a80a:	2200      	movs	r2, #0
 800a80c:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = 0;
 800a80e:	4b4f      	ldr	r3, [pc, #316]	@ (800a94c <SendTxData+0x28c>)
 800a810:	685a      	ldr	r2, [r3, #4]
 800a812:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a814:	1c59      	adds	r1, r3, #1
 800a816:	6339      	str	r1, [r7, #48]	@ 0x30
 800a818:	4413      	add	r3, r2
 800a81a:	2200      	movs	r2, #0
 800a81c:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = 0;
 800a81e:	4b4b      	ldr	r3, [pc, #300]	@ (800a94c <SendTxData+0x28c>)
 800a820:	685a      	ldr	r2, [r3, #4]
 800a822:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a824:	1c59      	adds	r1, r3, #1
 800a826:	6339      	str	r1, [r7, #48]	@ 0x30
 800a828:	4413      	add	r3, r2
 800a82a:	2200      	movs	r2, #0
 800a82c:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = 0;
 800a82e:	4b47      	ldr	r3, [pc, #284]	@ (800a94c <SendTxData+0x28c>)
 800a830:	685a      	ldr	r2, [r3, #4]
 800a832:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a834:	1c59      	adds	r1, r3, #1
 800a836:	6339      	str	r1, [r7, #48]	@ 0x30
 800a838:	4413      	add	r3, r2
 800a83a:	2200      	movs	r2, #0
 800a83c:	701a      	strb	r2, [r3, #0]
 800a83e:	e05b      	b.n	800a8f8 <SendTxData+0x238>
  }
  else
  {
    latitude = sensor_data.latitude;
 800a840:	693b      	ldr	r3, [r7, #16]
 800a842:	627b      	str	r3, [r7, #36]	@ 0x24
    longitude = sensor_data.longitude;
 800a844:	697b      	ldr	r3, [r7, #20]
 800a846:	623b      	str	r3, [r7, #32]

    AppData.Buffer[i++] = GetBatteryLevel();        /* 1 (very low) to 254 (fully charged) */
 800a848:	4b40      	ldr	r3, [pc, #256]	@ (800a94c <SendTxData+0x28c>)
 800a84a:	685a      	ldr	r2, [r3, #4]
 800a84c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a84e:	1c59      	adds	r1, r3, #1
 800a850:	6339      	str	r1, [r7, #48]	@ 0x30
 800a852:	18d4      	adds	r4, r2, r3
 800a854:	f7f7 fba4 	bl	8001fa0 <GetBatteryLevel>
 800a858:	4603      	mov	r3, r0
 800a85a:	7023      	strb	r3, [r4, #0]
    AppData.Buffer[i++] = (uint8_t)((latitude >> 16) & 0xFF);
 800a85c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a85e:	1418      	asrs	r0, r3, #16
 800a860:	4b3a      	ldr	r3, [pc, #232]	@ (800a94c <SendTxData+0x28c>)
 800a862:	685a      	ldr	r2, [r3, #4]
 800a864:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a866:	1c59      	adds	r1, r3, #1
 800a868:	6339      	str	r1, [r7, #48]	@ 0x30
 800a86a:	4413      	add	r3, r2
 800a86c:	b2c2      	uxtb	r2, r0
 800a86e:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)((latitude >> 8) & 0xFF);
 800a870:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a872:	1218      	asrs	r0, r3, #8
 800a874:	4b35      	ldr	r3, [pc, #212]	@ (800a94c <SendTxData+0x28c>)
 800a876:	685a      	ldr	r2, [r3, #4]
 800a878:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a87a:	1c59      	adds	r1, r3, #1
 800a87c:	6339      	str	r1, [r7, #48]	@ 0x30
 800a87e:	4413      	add	r3, r2
 800a880:	b2c2      	uxtb	r2, r0
 800a882:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)(latitude & 0xFF);
 800a884:	4b31      	ldr	r3, [pc, #196]	@ (800a94c <SendTxData+0x28c>)
 800a886:	685a      	ldr	r2, [r3, #4]
 800a888:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a88a:	1c59      	adds	r1, r3, #1
 800a88c:	6339      	str	r1, [r7, #48]	@ 0x30
 800a88e:	4413      	add	r3, r2
 800a890:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a892:	b2d2      	uxtb	r2, r2
 800a894:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)((longitude >> 16) & 0xFF);
 800a896:	6a3b      	ldr	r3, [r7, #32]
 800a898:	1418      	asrs	r0, r3, #16
 800a89a:	4b2c      	ldr	r3, [pc, #176]	@ (800a94c <SendTxData+0x28c>)
 800a89c:	685a      	ldr	r2, [r3, #4]
 800a89e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8a0:	1c59      	adds	r1, r3, #1
 800a8a2:	6339      	str	r1, [r7, #48]	@ 0x30
 800a8a4:	4413      	add	r3, r2
 800a8a6:	b2c2      	uxtb	r2, r0
 800a8a8:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)((longitude >> 8) & 0xFF);
 800a8aa:	6a3b      	ldr	r3, [r7, #32]
 800a8ac:	1218      	asrs	r0, r3, #8
 800a8ae:	4b27      	ldr	r3, [pc, #156]	@ (800a94c <SendTxData+0x28c>)
 800a8b0:	685a      	ldr	r2, [r3, #4]
 800a8b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8b4:	1c59      	adds	r1, r3, #1
 800a8b6:	6339      	str	r1, [r7, #48]	@ 0x30
 800a8b8:	4413      	add	r3, r2
 800a8ba:	b2c2      	uxtb	r2, r0
 800a8bc:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)(longitude & 0xFF);
 800a8be:	4b23      	ldr	r3, [pc, #140]	@ (800a94c <SendTxData+0x28c>)
 800a8c0:	685a      	ldr	r2, [r3, #4]
 800a8c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8c4:	1c59      	adds	r1, r3, #1
 800a8c6:	6339      	str	r1, [r7, #48]	@ 0x30
 800a8c8:	4413      	add	r3, r2
 800a8ca:	6a3a      	ldr	r2, [r7, #32]
 800a8cc:	b2d2      	uxtb	r2, r2
 800a8ce:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)((altitudeGps >> 8) & 0xFF);
 800a8d0:	8bfb      	ldrh	r3, [r7, #30]
 800a8d2:	0a1b      	lsrs	r3, r3, #8
 800a8d4:	b298      	uxth	r0, r3
 800a8d6:	4b1d      	ldr	r3, [pc, #116]	@ (800a94c <SendTxData+0x28c>)
 800a8d8:	685a      	ldr	r2, [r3, #4]
 800a8da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8dc:	1c59      	adds	r1, r3, #1
 800a8de:	6339      	str	r1, [r7, #48]	@ 0x30
 800a8e0:	4413      	add	r3, r2
 800a8e2:	b2c2      	uxtb	r2, r0
 800a8e4:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)(altitudeGps & 0xFF);
 800a8e6:	4b19      	ldr	r3, [pc, #100]	@ (800a94c <SendTxData+0x28c>)
 800a8e8:	685a      	ldr	r2, [r3, #4]
 800a8ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8ec:	1c59      	adds	r1, r3, #1
 800a8ee:	6339      	str	r1, [r7, #48]	@ 0x30
 800a8f0:	4413      	add	r3, r2
 800a8f2:	8bfa      	ldrh	r2, [r7, #30]
 800a8f4:	b2d2      	uxtb	r2, r2
 800a8f6:	701a      	strb	r2, [r3, #0]
  }

  AppData.BufferSize = i;
 800a8f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8fa:	b2da      	uxtb	r2, r3
 800a8fc:	4b13      	ldr	r3, [pc, #76]	@ (800a94c <SendTxData+0x28c>)
 800a8fe:	705a      	strb	r2, [r3, #1]
#endif /* CAYENNE_LPP */

  if ((JoinLedTimer.IsRunning) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 800a900:	4b17      	ldr	r3, [pc, #92]	@ (800a960 <SendTxData+0x2a0>)
 800a902:	7a5b      	ldrb	r3, [r3, #9]
 800a904:	2b00      	cmp	r3, #0
 800a906:	d007      	beq.n	800a918 <SendTxData+0x258>
 800a908:	f002 fa2c 	bl	800cd64 <LmHandlerJoinStatus>
 800a90c:	4603      	mov	r3, r0
 800a90e:	2b01      	cmp	r3, #1
 800a910:	d102      	bne.n	800a918 <SendTxData+0x258>
  {
    UTIL_TIMER_Stop(&JoinLedTimer);
 800a912:	4813      	ldr	r0, [pc, #76]	@ (800a960 <SendTxData+0x2a0>)
 800a914:	f010 fed8 	bl	801b6c8 <UTIL_TIMER_Stop>
#if 0   // XXX:
    HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_RED */
#endif
  }

  status = LmHandlerSend(&AppData, LmHandlerParams.IsTxConfirmed, false);
 800a918:	4b10      	ldr	r3, [pc, #64]	@ (800a95c <SendTxData+0x29c>)
 800a91a:	78db      	ldrb	r3, [r3, #3]
 800a91c:	2200      	movs	r2, #0
 800a91e:	4619      	mov	r1, r3
 800a920:	480a      	ldr	r0, [pc, #40]	@ (800a94c <SendTxData+0x28c>)
 800a922:	f002 fa3b 	bl	800cd9c <LmHandlerSend>
 800a926:	4603      	mov	r3, r0
 800a928:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (LORAMAC_HANDLER_SUCCESS == status)
 800a92c:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800a930:	2b00      	cmp	r3, #0
 800a932:	d119      	bne.n	800a968 <SendTxData+0x2a8>
  {
    APP_LOG(TS_ON, VLEVEL_L, "SEND REQUEST\r\n");
 800a934:	4b0b      	ldr	r3, [pc, #44]	@ (800a964 <SendTxData+0x2a4>)
 800a936:	2201      	movs	r2, #1
 800a938:	2100      	movs	r1, #0
 800a93a:	2001      	movs	r0, #1
 800a93c:	f011 f8ce 	bl	801badc <UTIL_ADV_TRACE_COND_FSend>
 800a940:	e029      	b.n	800a996 <SendTxData+0x2d6>
 800a942:	bf00      	nop
 800a944:	0801eb80 	.word	0x0801eb80
 800a948:	0801eb8c 	.word	0x0801eb8c
 800a94c:	20000088 	.word	0x20000088
 800a950:	41200000 	.word	0x41200000
 800a954:	42c80000 	.word	0x42c80000
 800a958:	200006be 	.word	0x200006be
 800a95c:	20000070 	.word	0x20000070
 800a960:	200006f0 	.word	0x200006f0
 800a964:	0801eb98 	.word	0x0801eb98
  }
  else if (LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED == status)
 800a968:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800a96c:	f113 0f06 	cmn.w	r3, #6
 800a970:	d111      	bne.n	800a996 <SendTxData+0x2d6>
  {
    nextTxIn = LmHandlerGetDutyCycleWaitTime();
 800a972:	f002 f96b 	bl	800cc4c <LmHandlerGetDutyCycleWaitTime>
 800a976:	6378      	str	r0, [r7, #52]	@ 0x34
    if (nextTxIn > 0)
 800a978:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d00b      	beq.n	800a996 <SendTxData+0x2d6>
    {
      APP_LOG(TS_ON, VLEVEL_L, "Next Tx in  : ~%d second(s)\r\n", (nextTxIn / 1000));
 800a97e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a980:	4a11      	ldr	r2, [pc, #68]	@ (800a9c8 <SendTxData+0x308>)
 800a982:	fba2 2303 	umull	r2, r3, r2, r3
 800a986:	099b      	lsrs	r3, r3, #6
 800a988:	9300      	str	r3, [sp, #0]
 800a98a:	4b10      	ldr	r3, [pc, #64]	@ (800a9cc <SendTxData+0x30c>)
 800a98c:	2201      	movs	r2, #1
 800a98e:	2100      	movs	r1, #0
 800a990:	2001      	movs	r0, #1
 800a992:	f011 f8a3 	bl	801badc <UTIL_ADV_TRACE_COND_FSend>
    }
  }

  if (EventType == TX_ON_TIMER)
 800a996:	4b0e      	ldr	r3, [pc, #56]	@ (800a9d0 <SendTxData+0x310>)
 800a998:	781b      	ldrb	r3, [r3, #0]
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d10f      	bne.n	800a9be <SendTxData+0x2fe>
  {
    UTIL_TIMER_Stop(&TxTimer);
 800a99e:	480d      	ldr	r0, [pc, #52]	@ (800a9d4 <SendTxData+0x314>)
 800a9a0:	f010 fe92 	bl	801b6c8 <UTIL_TIMER_Stop>
    UTIL_TIMER_SetPeriod(&TxTimer, MAX(nextTxIn, TxPeriodicity));
 800a9a4:	4b0c      	ldr	r3, [pc, #48]	@ (800a9d8 <SendTxData+0x318>)
 800a9a6:	681a      	ldr	r2, [r3, #0]
 800a9a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a9aa:	4293      	cmp	r3, r2
 800a9ac:	bf38      	it	cc
 800a9ae:	4613      	movcc	r3, r2
 800a9b0:	4619      	mov	r1, r3
 800a9b2:	4808      	ldr	r0, [pc, #32]	@ (800a9d4 <SendTxData+0x314>)
 800a9b4:	f010 fef8 	bl	801b7a8 <UTIL_TIMER_SetPeriod>
    UTIL_TIMER_Start(&TxTimer);
 800a9b8:	4806      	ldr	r0, [pc, #24]	@ (800a9d4 <SendTxData+0x314>)
 800a9ba:	f010 fe17 	bl	801b5ec <UTIL_TIMER_Start>
  }

  /* USER CODE END SendTxData_1 */
}
 800a9be:	bf00      	nop
 800a9c0:	373c      	adds	r7, #60	@ 0x3c
 800a9c2:	46bd      	mov	sp, r7
 800a9c4:	bd90      	pop	{r4, r7, pc}
 800a9c6:	bf00      	nop
 800a9c8:	10624dd3 	.word	0x10624dd3
 800a9cc:	0801eba8 	.word	0x0801eba8
 800a9d0:	20000598 	.word	0x20000598
 800a9d4:	2000059c 	.word	0x2000059c
 800a9d8:	20000084 	.word	0x20000084

0800a9dc <OnTxTimerEvent>:

static void OnTxTimerEvent(void *context)
{
 800a9dc:	b580      	push	{r7, lr}
 800a9de:	b082      	sub	sp, #8
 800a9e0:	af00      	add	r7, sp, #0
 800a9e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxTimerEvent_1 */

  /* USER CODE END OnTxTimerEvent_1 */
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), CFG_SEQ_Prio_0);
 800a9e4:	2100      	movs	r1, #0
 800a9e6:	2002      	movs	r0, #2
 800a9e8:	f010 fd4a 	bl	801b480 <UTIL_SEQ_SetTask>

  /*Wait for next tx slot*/
  UTIL_TIMER_Start(&TxTimer);
 800a9ec:	4803      	ldr	r0, [pc, #12]	@ (800a9fc <OnTxTimerEvent+0x20>)
 800a9ee:	f010 fdfd 	bl	801b5ec <UTIL_TIMER_Start>
  /* USER CODE BEGIN OnTxTimerEvent_2 */

  /* USER CODE END OnTxTimerEvent_2 */
}
 800a9f2:	bf00      	nop
 800a9f4:	3708      	adds	r7, #8
 800a9f6:	46bd      	mov	sp, r7
 800a9f8:	bd80      	pop	{r7, pc}
 800a9fa:	bf00      	nop
 800a9fc:	2000059c 	.word	0x2000059c

0800aa00 <OnTxTimerLedEvent>:

/* USER CODE BEGIN PrFD_LedEvents */
static void OnTxTimerLedEvent(void *context)
{
 800aa00:	b480      	push	{r7}
 800aa02:	b083      	sub	sp, #12
 800aa04:	af00      	add	r7, sp, #0
 800aa06:	6078      	str	r0, [r7, #4]
#if 0	// XXX: No LED available
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_GREEN */
#endif
}
 800aa08:	bf00      	nop
 800aa0a:	370c      	adds	r7, #12
 800aa0c:	46bd      	mov	sp, r7
 800aa0e:	bc80      	pop	{r7}
 800aa10:	4770      	bx	lr

0800aa12 <OnRxTimerLedEvent>:

static void OnRxTimerLedEvent(void *context)
{
 800aa12:	b480      	push	{r7}
 800aa14:	b083      	sub	sp, #12
 800aa16:	af00      	add	r7, sp, #0
 800aa18:	6078      	str	r0, [r7, #4]
#if 0   // XXX: No LED available
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET); /* LED_BLUE */
#endif
}
 800aa1a:	bf00      	nop
 800aa1c:	370c      	adds	r7, #12
 800aa1e:	46bd      	mov	sp, r7
 800aa20:	bc80      	pop	{r7}
 800aa22:	4770      	bx	lr

0800aa24 <OnJoinTimerLedEvent>:

static void OnJoinTimerLedEvent(void *context)
{
 800aa24:	b480      	push	{r7}
 800aa26:	b083      	sub	sp, #12
 800aa28:	af00      	add	r7, sp, #0
 800aa2a:	6078      	str	r0, [r7, #4]
#if 0   // XXX: No LED available
  HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin); /* LED_RED */
#endif
}
 800aa2c:	bf00      	nop
 800aa2e:	370c      	adds	r7, #12
 800aa30:	46bd      	mov	sp, r7
 800aa32:	bc80      	pop	{r7}
 800aa34:	4770      	bx	lr
	...

0800aa38 <OnTxData>:

/* USER CODE END PrFD_LedEvents */

static void OnTxData(LmHandlerTxParams_t *params)
{
 800aa38:	b580      	push	{r7, lr}
 800aa3a:	b086      	sub	sp, #24
 800aa3c:	af04      	add	r7, sp, #16
 800aa3e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxData_1 */
  if ((params != NULL))
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	d041      	beq.n	800aaca <OnTxData+0x92>
  {
    /* Process Tx event only if its a mcps response to prevent some internal events (mlme) */
    if (params->IsMcpsConfirm != 0)
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	781b      	ldrb	r3, [r3, #0]
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d03d      	beq.n	800aaca <OnTxData+0x92>
    {
#if 0	// XXX: No LED available
      HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET); /* LED_GREEN */
#endif
      UTIL_TIMER_Start(&TxLedTimer);
 800aa4e:	4821      	ldr	r0, [pc, #132]	@ (800aad4 <OnTxData+0x9c>)
 800aa50:	f010 fdcc 	bl	801b5ec <UTIL_TIMER_Start>

      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### ========== MCPS-Confirm =============\r\n");
 800aa54:	4b20      	ldr	r3, [pc, #128]	@ (800aad8 <OnTxData+0xa0>)
 800aa56:	2200      	movs	r2, #0
 800aa58:	2100      	movs	r1, #0
 800aa5a:	2002      	movs	r0, #2
 800aa5c:	f011 f83e 	bl	801badc <UTIL_ADV_TRACE_COND_FSend>
      APP_LOG(TS_OFF, VLEVEL_H, "###### U/L FRAME:%04d | PORT:%d | DR:%d | PWR:%d", params->UplinkCounter,
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	68db      	ldr	r3, [r3, #12]
 800aa64:	687a      	ldr	r2, [r7, #4]
 800aa66:	7c12      	ldrb	r2, [r2, #16]
 800aa68:	4611      	mov	r1, r2
 800aa6a:	687a      	ldr	r2, [r7, #4]
 800aa6c:	f992 200a 	ldrsb.w	r2, [r2, #10]
 800aa70:	4610      	mov	r0, r2
 800aa72:	687a      	ldr	r2, [r7, #4]
 800aa74:	f992 2018 	ldrsb.w	r2, [r2, #24]
 800aa78:	9203      	str	r2, [sp, #12]
 800aa7a:	9002      	str	r0, [sp, #8]
 800aa7c:	9101      	str	r1, [sp, #4]
 800aa7e:	9300      	str	r3, [sp, #0]
 800aa80:	4b16      	ldr	r3, [pc, #88]	@ (800aadc <OnTxData+0xa4>)
 800aa82:	2200      	movs	r2, #0
 800aa84:	2100      	movs	r1, #0
 800aa86:	2003      	movs	r0, #3
 800aa88:	f011 f828 	bl	801badc <UTIL_ADV_TRACE_COND_FSend>
              params->AppData.Port, params->Datarate, params->TxPower);

      APP_LOG(TS_OFF, VLEVEL_H, " | MSG TYPE:");
 800aa8c:	4b14      	ldr	r3, [pc, #80]	@ (800aae0 <OnTxData+0xa8>)
 800aa8e:	2200      	movs	r2, #0
 800aa90:	2100      	movs	r1, #0
 800aa92:	2003      	movs	r0, #3
 800aa94:	f011 f822 	bl	801badc <UTIL_ADV_TRACE_COND_FSend>
      if (params->MsgType == LORAMAC_HANDLER_CONFIRMED_MSG)
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	7a1b      	ldrb	r3, [r3, #8]
 800aa9c:	2b01      	cmp	r3, #1
 800aa9e:	d10e      	bne.n	800aabe <OnTxData+0x86>
      {
        APP_LOG(TS_OFF, VLEVEL_H, "CONFIRMED [%s]\r\n", (params->AckReceived != 0) ? "ACK" : "NACK");
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	7a5b      	ldrb	r3, [r3, #9]
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d001      	beq.n	800aaac <OnTxData+0x74>
 800aaa8:	4b0e      	ldr	r3, [pc, #56]	@ (800aae4 <OnTxData+0xac>)
 800aaaa:	e000      	b.n	800aaae <OnTxData+0x76>
 800aaac:	4b0e      	ldr	r3, [pc, #56]	@ (800aae8 <OnTxData+0xb0>)
 800aaae:	9300      	str	r3, [sp, #0]
 800aab0:	4b0e      	ldr	r3, [pc, #56]	@ (800aaec <OnTxData+0xb4>)
 800aab2:	2200      	movs	r2, #0
 800aab4:	2100      	movs	r1, #0
 800aab6:	2003      	movs	r0, #3
 800aab8:	f011 f810 	bl	801badc <UTIL_ADV_TRACE_COND_FSend>
        APP_LOG(TS_OFF, VLEVEL_H, "UNCONFIRMED\r\n");
      }
    }
  }
  /* USER CODE END OnTxData_1 */
}
 800aabc:	e005      	b.n	800aaca <OnTxData+0x92>
        APP_LOG(TS_OFF, VLEVEL_H, "UNCONFIRMED\r\n");
 800aabe:	4b0c      	ldr	r3, [pc, #48]	@ (800aaf0 <OnTxData+0xb8>)
 800aac0:	2200      	movs	r2, #0
 800aac2:	2100      	movs	r1, #0
 800aac4:	2003      	movs	r0, #3
 800aac6:	f011 f809 	bl	801badc <UTIL_ADV_TRACE_COND_FSend>
}
 800aaca:	bf00      	nop
 800aacc:	3708      	adds	r7, #8
 800aace:	46bd      	mov	sp, r7
 800aad0:	bd80      	pop	{r7, pc}
 800aad2:	bf00      	nop
 800aad4:	200006c0 	.word	0x200006c0
 800aad8:	0801ebc8 	.word	0x0801ebc8
 800aadc:	0801ebfc 	.word	0x0801ebfc
 800aae0:	0801ec30 	.word	0x0801ec30
 800aae4:	0801ec40 	.word	0x0801ec40
 800aae8:	0801ec44 	.word	0x0801ec44
 800aaec:	0801ec4c 	.word	0x0801ec4c
 800aaf0:	0801ec60 	.word	0x0801ec60

0800aaf4 <OnJoinRequest>:

static void OnJoinRequest(LmHandlerJoinParams_t *joinParams)
{
 800aaf4:	b580      	push	{r7, lr}
 800aaf6:	b082      	sub	sp, #8
 800aaf8:	af00      	add	r7, sp, #0
 800aafa:	6078      	str	r0, [r7, #4]
  if (joinParams != NULL)
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d04c      	beq.n	800ab9c <OnJoinRequest+0xa8>
  {
    if (joinParams->Status == LORAMAC_HANDLER_SUCCESS)
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	f993 3005 	ldrsb.w	r3, [r3, #5]
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d131      	bne.n	800ab70 <OnJoinRequest+0x7c>
    {
      UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaStoreContextEvent), CFG_SEQ_Prio_0);
 800ab0c:	2100      	movs	r1, #0
 800ab0e:	2004      	movs	r0, #4
 800ab10:	f010 fcb6 	bl	801b480 <UTIL_SEQ_SetTask>

      UTIL_TIMER_Stop(&JoinLedTimer);
 800ab14:	4823      	ldr	r0, [pc, #140]	@ (800aba4 <OnJoinRequest+0xb0>)
 800ab16:	f010 fdd7 	bl	801b6c8 <UTIL_TIMER_Stop>
#if 0   // XXX: ถ้ามี LED
      HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_RED */
#endif

      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOINED = ");
 800ab1a:	4b23      	ldr	r3, [pc, #140]	@ (800aba8 <OnJoinRequest+0xb4>)
 800ab1c:	2200      	movs	r2, #0
 800ab1e:	2100      	movs	r1, #0
 800ab20:	2002      	movs	r0, #2
 800ab22:	f010 ffdb 	bl	801badc <UTIL_ADV_TRACE_COND_FSend>
      if (joinParams->Mode == ACTIVATION_TYPE_ABP)
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	799b      	ldrb	r3, [r3, #6]
 800ab2a:	2b01      	cmp	r3, #1
 800ab2c:	d106      	bne.n	800ab3c <OnJoinRequest+0x48>
      {
        APP_LOG(TS_OFF, VLEVEL_M, "ABP ======================\r\n");
 800ab2e:	4b1f      	ldr	r3, [pc, #124]	@ (800abac <OnJoinRequest+0xb8>)
 800ab30:	2200      	movs	r2, #0
 800ab32:	2100      	movs	r1, #0
 800ab34:	2002      	movs	r0, #2
 800ab36:	f010 ffd1 	bl	801badc <UTIL_ADV_TRACE_COND_FSend>
 800ab3a:	e005      	b.n	800ab48 <OnJoinRequest+0x54>
      }
      else
      {
        APP_LOG(TS_OFF, VLEVEL_M, "OTAA =====================\r\n");
 800ab3c:	4b1c      	ldr	r3, [pc, #112]	@ (800abb0 <OnJoinRequest+0xbc>)
 800ab3e:	2200      	movs	r2, #0
 800ab40:	2100      	movs	r1, #0
 800ab42:	2002      	movs	r0, #2
 800ab44:	f010 ffca 	bl	801badc <UTIL_ADV_TRACE_COND_FSend>
      }

      // ✅ เปลี่ยนไปใช้ Class C ทันทีหลังจาก join สำเร็จ
      if (LmHandlerRequestClass(CLASS_C) == LORAMAC_HANDLER_SUCCESS)
 800ab48:	2002      	movs	r0, #2
 800ab4a:	f002 fa15 	bl	800cf78 <LmHandlerRequestClass>
 800ab4e:	4603      	mov	r3, r0
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d106      	bne.n	800ab62 <OnJoinRequest+0x6e>
      {
        APP_LOG(TS_OFF, VLEVEL_M, "CLASS C ACTIVATED\r\n");
 800ab54:	4b17      	ldr	r3, [pc, #92]	@ (800abb4 <OnJoinRequest+0xc0>)
 800ab56:	2200      	movs	r2, #0
 800ab58:	2100      	movs	r1, #0
 800ab5a:	2002      	movs	r0, #2
 800ab5c:	f010 ffbe 	bl	801badc <UTIL_ADV_TRACE_COND_FSend>
        APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = RE-TRYING OTAA JOIN\r\n");
        LmHandlerJoin(ActivationType, LORAWAN_FORCE_REJOIN_AT_BOOT);
      }
    }
  }
}
 800ab60:	e01c      	b.n	800ab9c <OnJoinRequest+0xa8>
        APP_LOG(TS_OFF, VLEVEL_M, "FAILED TO SWITCH TO CLASS C\r\n");
 800ab62:	4b15      	ldr	r3, [pc, #84]	@ (800abb8 <OnJoinRequest+0xc4>)
 800ab64:	2200      	movs	r2, #0
 800ab66:	2100      	movs	r1, #0
 800ab68:	2002      	movs	r0, #2
 800ab6a:	f010 ffb7 	bl	801badc <UTIL_ADV_TRACE_COND_FSend>
}
 800ab6e:	e015      	b.n	800ab9c <OnJoinRequest+0xa8>
      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOIN FAILED\r\n");
 800ab70:	4b12      	ldr	r3, [pc, #72]	@ (800abbc <OnJoinRequest+0xc8>)
 800ab72:	2200      	movs	r2, #0
 800ab74:	2100      	movs	r1, #0
 800ab76:	2002      	movs	r0, #2
 800ab78:	f010 ffb0 	bl	801badc <UTIL_ADV_TRACE_COND_FSend>
      if (joinParams->Mode == ACTIVATION_TYPE_OTAA)
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	799b      	ldrb	r3, [r3, #6]
 800ab80:	2b02      	cmp	r3, #2
 800ab82:	d10b      	bne.n	800ab9c <OnJoinRequest+0xa8>
        APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = RE-TRYING OTAA JOIN\r\n");
 800ab84:	4b0e      	ldr	r3, [pc, #56]	@ (800abc0 <OnJoinRequest+0xcc>)
 800ab86:	2200      	movs	r2, #0
 800ab88:	2100      	movs	r1, #0
 800ab8a:	2002      	movs	r0, #2
 800ab8c:	f010 ffa6 	bl	801badc <UTIL_ADV_TRACE_COND_FSend>
        LmHandlerJoin(ActivationType, LORAWAN_FORCE_REJOIN_AT_BOOT);
 800ab90:	4b0c      	ldr	r3, [pc, #48]	@ (800abc4 <OnJoinRequest+0xd0>)
 800ab92:	781b      	ldrb	r3, [r3, #0]
 800ab94:	2101      	movs	r1, #1
 800ab96:	4618      	mov	r0, r3
 800ab98:	f002 f862 	bl	800cc60 <LmHandlerJoin>
}
 800ab9c:	bf00      	nop
 800ab9e:	3708      	adds	r7, #8
 800aba0:	46bd      	mov	sp, r7
 800aba2:	bd80      	pop	{r7, pc}
 800aba4:	200006f0 	.word	0x200006f0
 800aba8:	0801ec70 	.word	0x0801ec70
 800abac:	0801ec88 	.word	0x0801ec88
 800abb0:	0801eca8 	.word	0x0801eca8
 800abb4:	0801ecc8 	.word	0x0801ecc8
 800abb8:	0801ecdc 	.word	0x0801ecdc
 800abbc:	0801ecfc 	.word	0x0801ecfc
 800abc0:	0801ed18 	.word	0x0801ed18
 800abc4:	20000020 	.word	0x20000020

0800abc8 <OnBeaconStatusChange>:


static void OnBeaconStatusChange(LmHandlerBeaconParams_t *params)
{
 800abc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800abca:	b093      	sub	sp, #76	@ 0x4c
 800abcc:	af0c      	add	r7, sp, #48	@ 0x30
 800abce:	6178      	str	r0, [r7, #20]
  /* USER CODE BEGIN OnBeaconStatusChange_1 */
  if (params != NULL)
 800abd0:	697b      	ldr	r3, [r7, #20]
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d056      	beq.n	800ac84 <OnBeaconStatusChange+0xbc>
  {
    switch (params->State)
 800abd6:	697b      	ldr	r3, [r7, #20]
 800abd8:	785b      	ldrb	r3, [r3, #1]
 800abda:	2b02      	cmp	r3, #2
 800abdc:	d008      	beq.n	800abf0 <OnBeaconStatusChange+0x28>
 800abde:	2b03      	cmp	r3, #3
 800abe0:	d049      	beq.n	800ac76 <OnBeaconStatusChange+0xae>
    {
      default:
      case LORAMAC_HANDLER_BEACON_LOST:
      {
        APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### BEACON LOST\r\n");
 800abe2:	4b2a      	ldr	r3, [pc, #168]	@ (800ac8c <OnBeaconStatusChange+0xc4>)
 800abe4:	2200      	movs	r2, #0
 800abe6:	2100      	movs	r1, #0
 800abe8:	2002      	movs	r0, #2
 800abea:	f010 ff77 	bl	801badc <UTIL_ADV_TRACE_COND_FSend>
        break;
 800abee:	e049      	b.n	800ac84 <OnBeaconStatusChange+0xbc>
      }
      case LORAMAC_HANDLER_BEACON_RX:
      {
        APP_LOG(TS_OFF, VLEVEL_M,
 800abf0:	697b      	ldr	r3, [r7, #20]
 800abf2:	7c1b      	ldrb	r3, [r3, #16]
 800abf4:	4618      	mov	r0, r3
 800abf6:	697b      	ldr	r3, [r7, #20]
 800abf8:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800abfc:	461c      	mov	r4, r3
 800abfe:	697b      	ldr	r3, [r7, #20]
 800ac00:	f993 3014 	ldrsb.w	r3, [r3, #20]
 800ac04:	461d      	mov	r5, r3
 800ac06:	697b      	ldr	r3, [r7, #20]
 800ac08:	68db      	ldr	r3, [r3, #12]
 800ac0a:	697a      	ldr	r2, [r7, #20]
 800ac0c:	6852      	ldr	r2, [r2, #4]
 800ac0e:	6979      	ldr	r1, [r7, #20]
 800ac10:	7d89      	ldrb	r1, [r1, #22]
 800ac12:	460e      	mov	r6, r1
 800ac14:	6979      	ldr	r1, [r7, #20]
 800ac16:	7dc9      	ldrb	r1, [r1, #23]
 800ac18:	6139      	str	r1, [r7, #16]
 800ac1a:	6979      	ldr	r1, [r7, #20]
 800ac1c:	7e09      	ldrb	r1, [r1, #24]
 800ac1e:	60f9      	str	r1, [r7, #12]
 800ac20:	6979      	ldr	r1, [r7, #20]
 800ac22:	7e49      	ldrb	r1, [r1, #25]
 800ac24:	60b9      	str	r1, [r7, #8]
 800ac26:	6979      	ldr	r1, [r7, #20]
 800ac28:	7e89      	ldrb	r1, [r1, #26]
 800ac2a:	6079      	str	r1, [r7, #4]
 800ac2c:	6979      	ldr	r1, [r7, #20]
 800ac2e:	7ec9      	ldrb	r1, [r1, #27]
 800ac30:	6039      	str	r1, [r7, #0]
 800ac32:	6979      	ldr	r1, [r7, #20]
 800ac34:	7f09      	ldrb	r1, [r1, #28]
 800ac36:	910b      	str	r1, [sp, #44]	@ 0x2c
 800ac38:	f8d7 c000 	ldr.w	ip, [r7]
 800ac3c:	f8cd c028 	str.w	ip, [sp, #40]	@ 0x28
 800ac40:	f8d7 c004 	ldr.w	ip, [r7, #4]
 800ac44:	f8cd c024 	str.w	ip, [sp, #36]	@ 0x24
 800ac48:	f8d7 c008 	ldr.w	ip, [r7, #8]
 800ac4c:	f8cd c020 	str.w	ip, [sp, #32]
 800ac50:	f8d7 c00c 	ldr.w	ip, [r7, #12]
 800ac54:	f8cd c01c 	str.w	ip, [sp, #28]
 800ac58:	6939      	ldr	r1, [r7, #16]
 800ac5a:	9106      	str	r1, [sp, #24]
 800ac5c:	9605      	str	r6, [sp, #20]
 800ac5e:	9204      	str	r2, [sp, #16]
 800ac60:	9303      	str	r3, [sp, #12]
 800ac62:	9502      	str	r5, [sp, #8]
 800ac64:	9401      	str	r4, [sp, #4]
 800ac66:	9000      	str	r0, [sp, #0]
 800ac68:	4b09      	ldr	r3, [pc, #36]	@ (800ac90 <OnBeaconStatusChange+0xc8>)
 800ac6a:	2200      	movs	r2, #0
 800ac6c:	2100      	movs	r1, #0
 800ac6e:	2002      	movs	r0, #2
 800ac70:	f010 ff34 	bl	801badc <UTIL_ADV_TRACE_COND_FSend>
                params->Info.Datarate, params->Info.Rssi, params->Info.Snr, params->Info.Frequency,
                params->Info.Time.Seconds, params->Info.GwSpecific.InfoDesc,
                params->Info.GwSpecific.Info[0], params->Info.GwSpecific.Info[1],
                params->Info.GwSpecific.Info[2], params->Info.GwSpecific.Info[3],
                params->Info.GwSpecific.Info[4], params->Info.GwSpecific.Info[5]);
        break;
 800ac74:	e006      	b.n	800ac84 <OnBeaconStatusChange+0xbc>
      }
      case LORAMAC_HANDLER_BEACON_NRX:
      {
        APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### BEACON NOT RECEIVED\r\n");
 800ac76:	4b07      	ldr	r3, [pc, #28]	@ (800ac94 <OnBeaconStatusChange+0xcc>)
 800ac78:	2200      	movs	r2, #0
 800ac7a:	2100      	movs	r1, #0
 800ac7c:	2002      	movs	r0, #2
 800ac7e:	f010 ff2d 	bl	801badc <UTIL_ADV_TRACE_COND_FSend>
        break;
 800ac82:	bf00      	nop
      }
    }
  }
  /* USER CODE END OnBeaconStatusChange_1 */
}
 800ac84:	bf00      	nop
 800ac86:	371c      	adds	r7, #28
 800ac88:	46bd      	mov	sp, r7
 800ac8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ac8c:	0801ed3c 	.word	0x0801ed3c
 800ac90:	0801ed54 	.word	0x0801ed54
 800ac94:	0801edc8 	.word	0x0801edc8

0800ac98 <OnClassChange>:

static void OnClassChange(DeviceClass_t deviceClass)
{
 800ac98:	b580      	push	{r7, lr}
 800ac9a:	b084      	sub	sp, #16
 800ac9c:	af02      	add	r7, sp, #8
 800ac9e:	4603      	mov	r3, r0
 800aca0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnClassChange_1 */
  APP_LOG(TS_OFF, VLEVEL_M, "Switch to Class %c done\r\n", "ABC"[deviceClass]);
 800aca2:	79fb      	ldrb	r3, [r7, #7]
 800aca4:	4a06      	ldr	r2, [pc, #24]	@ (800acc0 <OnClassChange+0x28>)
 800aca6:	5cd3      	ldrb	r3, [r2, r3]
 800aca8:	9300      	str	r3, [sp, #0]
 800acaa:	4b06      	ldr	r3, [pc, #24]	@ (800acc4 <OnClassChange+0x2c>)
 800acac:	2200      	movs	r2, #0
 800acae:	2100      	movs	r1, #0
 800acb0:	2002      	movs	r0, #2
 800acb2:	f010 ff13 	bl	801badc <UTIL_ADV_TRACE_COND_FSend>
  /* USER CODE END OnClassChange_1 */
}
 800acb6:	bf00      	nop
 800acb8:	3708      	adds	r7, #8
 800acba:	46bd      	mov	sp, r7
 800acbc:	bd80      	pop	{r7, pc}
 800acbe:	bf00      	nop
 800acc0:	0801ee04 	.word	0x0801ee04
 800acc4:	0801ede8 	.word	0x0801ede8

0800acc8 <OnMacProcessNotify>:

static void OnMacProcessNotify(void)
{
 800acc8:	b580      	push	{r7, lr}
 800acca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnMacProcessNotify_1 */

  /* USER CODE END OnMacProcessNotify_1 */
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LmHandlerProcess), CFG_SEQ_Prio_0);
 800accc:	2100      	movs	r1, #0
 800acce:	2001      	movs	r0, #1
 800acd0:	f010 fbd6 	bl	801b480 <UTIL_SEQ_SetTask>

  /* USER CODE BEGIN OnMacProcessNotify_2 */

  /* USER CODE END OnMacProcessNotify_2 */
}
 800acd4:	bf00      	nop
 800acd6:	bd80      	pop	{r7, pc}

0800acd8 <OnTxPeriodicityChanged>:

static void OnTxPeriodicityChanged(uint32_t periodicity)
{
 800acd8:	b580      	push	{r7, lr}
 800acda:	b082      	sub	sp, #8
 800acdc:	af00      	add	r7, sp, #0
 800acde:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxPeriodicityChanged_1 */

  /* USER CODE END OnTxPeriodicityChanged_1 */
  TxPeriodicity = periodicity;
 800ace0:	4a0d      	ldr	r2, [pc, #52]	@ (800ad18 <OnTxPeriodicityChanged+0x40>)
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	6013      	str	r3, [r2, #0]

  if (TxPeriodicity == 0)
 800ace6:	4b0c      	ldr	r3, [pc, #48]	@ (800ad18 <OnTxPeriodicityChanged+0x40>)
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	2b00      	cmp	r3, #0
 800acec:	d103      	bne.n	800acf6 <OnTxPeriodicityChanged+0x1e>
  {
    /* Revert to application default periodicity */
    TxPeriodicity = APP_TX_DUTYCYCLE;
 800acee:	4b0a      	ldr	r3, [pc, #40]	@ (800ad18 <OnTxPeriodicityChanged+0x40>)
 800acf0:	f242 7210 	movw	r2, #10000	@ 0x2710
 800acf4:	601a      	str	r2, [r3, #0]
  }

  /* Update timer periodicity */
  UTIL_TIMER_Stop(&TxTimer);
 800acf6:	4809      	ldr	r0, [pc, #36]	@ (800ad1c <OnTxPeriodicityChanged+0x44>)
 800acf8:	f010 fce6 	bl	801b6c8 <UTIL_TIMER_Stop>
  UTIL_TIMER_SetPeriod(&TxTimer, TxPeriodicity);
 800acfc:	4b06      	ldr	r3, [pc, #24]	@ (800ad18 <OnTxPeriodicityChanged+0x40>)
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	4619      	mov	r1, r3
 800ad02:	4806      	ldr	r0, [pc, #24]	@ (800ad1c <OnTxPeriodicityChanged+0x44>)
 800ad04:	f010 fd50 	bl	801b7a8 <UTIL_TIMER_SetPeriod>
  UTIL_TIMER_Start(&TxTimer);
 800ad08:	4804      	ldr	r0, [pc, #16]	@ (800ad1c <OnTxPeriodicityChanged+0x44>)
 800ad0a:	f010 fc6f 	bl	801b5ec <UTIL_TIMER_Start>
  /* USER CODE BEGIN OnTxPeriodicityChanged_2 */

  /* USER CODE END OnTxPeriodicityChanged_2 */
}
 800ad0e:	bf00      	nop
 800ad10:	3708      	adds	r7, #8
 800ad12:	46bd      	mov	sp, r7
 800ad14:	bd80      	pop	{r7, pc}
 800ad16:	bf00      	nop
 800ad18:	20000084 	.word	0x20000084
 800ad1c:	2000059c 	.word	0x2000059c

0800ad20 <OnTxFrameCtrlChanged>:

static void OnTxFrameCtrlChanged(LmHandlerMsgTypes_t isTxConfirmed)
{
 800ad20:	b480      	push	{r7}
 800ad22:	b083      	sub	sp, #12
 800ad24:	af00      	add	r7, sp, #0
 800ad26:	4603      	mov	r3, r0
 800ad28:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnTxFrameCtrlChanged_1 */

  /* USER CODE END OnTxFrameCtrlChanged_1 */
  LmHandlerParams.IsTxConfirmed = isTxConfirmed;
 800ad2a:	4a04      	ldr	r2, [pc, #16]	@ (800ad3c <OnTxFrameCtrlChanged+0x1c>)
 800ad2c:	79fb      	ldrb	r3, [r7, #7]
 800ad2e:	70d3      	strb	r3, [r2, #3]
  /* USER CODE BEGIN OnTxFrameCtrlChanged_2 */

  /* USER CODE END OnTxFrameCtrlChanged_2 */
}
 800ad30:	bf00      	nop
 800ad32:	370c      	adds	r7, #12
 800ad34:	46bd      	mov	sp, r7
 800ad36:	bc80      	pop	{r7}
 800ad38:	4770      	bx	lr
 800ad3a:	bf00      	nop
 800ad3c:	20000070 	.word	0x20000070

0800ad40 <OnPingSlotPeriodicityChanged>:

static void OnPingSlotPeriodicityChanged(uint8_t pingSlotPeriodicity)
{
 800ad40:	b480      	push	{r7}
 800ad42:	b083      	sub	sp, #12
 800ad44:	af00      	add	r7, sp, #0
 800ad46:	4603      	mov	r3, r0
 800ad48:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnPingSlotPeriodicityChanged_1 */

  /* USER CODE END OnPingSlotPeriodicityChanged_1 */
  LmHandlerParams.PingSlotPeriodicity = pingSlotPeriodicity;
 800ad4a:	4a04      	ldr	r2, [pc, #16]	@ (800ad5c <OnPingSlotPeriodicityChanged+0x1c>)
 800ad4c:	79fb      	ldrb	r3, [r7, #7]
 800ad4e:	7313      	strb	r3, [r2, #12]
  /* USER CODE BEGIN OnPingSlotPeriodicityChanged_2 */

  /* USER CODE END OnPingSlotPeriodicityChanged_2 */
}
 800ad50:	bf00      	nop
 800ad52:	370c      	adds	r7, #12
 800ad54:	46bd      	mov	sp, r7
 800ad56:	bc80      	pop	{r7}
 800ad58:	4770      	bx	lr
 800ad5a:	bf00      	nop
 800ad5c:	20000070 	.word	0x20000070

0800ad60 <OnSystemReset>:

static void OnSystemReset(void)
{
 800ad60:	b580      	push	{r7, lr}
 800ad62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnSystemReset_1 */

  /* USER CODE END OnSystemReset_1 */
  if ((LORAMAC_HANDLER_SUCCESS == LmHandlerHalt()) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 800ad64:	f002 fced 	bl	800d742 <LmHandlerHalt>
 800ad68:	4603      	mov	r3, r0
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	d106      	bne.n	800ad7c <OnSystemReset+0x1c>
 800ad6e:	f001 fff9 	bl	800cd64 <LmHandlerJoinStatus>
 800ad72:	4603      	mov	r3, r0
 800ad74:	2b01      	cmp	r3, #1
 800ad76:	d101      	bne.n	800ad7c <OnSystemReset+0x1c>
  {
    NVIC_SystemReset();
 800ad78:	f7ff fa4a 	bl	800a210 <__NVIC_SystemReset>
  }
  /* USER CODE BEGIN OnSystemReset_Last */

  /* USER CODE END OnSystemReset_Last */
}
 800ad7c:	bf00      	nop
 800ad7e:	bd80      	pop	{r7, pc}

0800ad80 <StopJoin>:

static void StopJoin(void)
{
 800ad80:	b580      	push	{r7, lr}
 800ad82:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET); /* LED_GREEN */
#endif

  /* USER CODE END StopJoin_1 */

  UTIL_TIMER_Stop(&TxTimer);
 800ad84:	4817      	ldr	r0, [pc, #92]	@ (800ade4 <StopJoin+0x64>)
 800ad86:	f010 fc9f 	bl	801b6c8 <UTIL_TIMER_Stop>

  if (LORAMAC_HANDLER_SUCCESS != LmHandlerStop())
 800ad8a:	f002 fccd 	bl	800d728 <LmHandlerStop>
 800ad8e:	4603      	mov	r3, r0
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	d006      	beq.n	800ada2 <StopJoin+0x22>
  {
    APP_LOG(TS_OFF, VLEVEL_M, "LmHandler Stop on going ...\r\n");
 800ad94:	4b14      	ldr	r3, [pc, #80]	@ (800ade8 <StopJoin+0x68>)
 800ad96:	2200      	movs	r2, #0
 800ad98:	2100      	movs	r1, #0
 800ad9a:	2002      	movs	r0, #2
 800ad9c:	f010 fe9e 	bl	801badc <UTIL_ADV_TRACE_COND_FSend>
 800ada0:	e01a      	b.n	800add8 <StopJoin+0x58>
  }
  else
  {
    APP_LOG(TS_OFF, VLEVEL_M, "LmHandler Stopped\r\n");
 800ada2:	4b12      	ldr	r3, [pc, #72]	@ (800adec <StopJoin+0x6c>)
 800ada4:	2200      	movs	r2, #0
 800ada6:	2100      	movs	r1, #0
 800ada8:	2002      	movs	r0, #2
 800adaa:	f010 fe97 	bl	801badc <UTIL_ADV_TRACE_COND_FSend>
      ActivationType = ACTIVATION_TYPE_OTAA;
      APP_LOG(TS_OFF, VLEVEL_M, "LmHandler switch to OTAA mode\r\n");
    }
    else
    {
      ActivationType = ACTIVATION_TYPE_ABP;
 800adae:	4b10      	ldr	r3, [pc, #64]	@ (800adf0 <StopJoin+0x70>)
 800adb0:	2201      	movs	r2, #1
 800adb2:	701a      	strb	r2, [r3, #0]
      APP_LOG(TS_OFF, VLEVEL_M, "LmHandler switch to ABP mode\r\n");
 800adb4:	4b0f      	ldr	r3, [pc, #60]	@ (800adf4 <StopJoin+0x74>)
 800adb6:	2200      	movs	r2, #0
 800adb8:	2100      	movs	r1, #0
 800adba:	2002      	movs	r0, #2
 800adbc:	f010 fe8e 	bl	801badc <UTIL_ADV_TRACE_COND_FSend>
    }
    LmHandlerConfigure(&LmHandlerParams);
 800adc0:	480d      	ldr	r0, [pc, #52]	@ (800adf8 <StopJoin+0x78>)
 800adc2:	f001 fdd1 	bl	800c968 <LmHandlerConfigure>
    LmHandlerJoin(ActivationType, true);
 800adc6:	4b0a      	ldr	r3, [pc, #40]	@ (800adf0 <StopJoin+0x70>)
 800adc8:	781b      	ldrb	r3, [r3, #0]
 800adca:	2101      	movs	r1, #1
 800adcc:	4618      	mov	r0, r3
 800adce:	f001 ff47 	bl	800cc60 <LmHandlerJoin>
    UTIL_TIMER_Start(&TxTimer);
 800add2:	4804      	ldr	r0, [pc, #16]	@ (800ade4 <StopJoin+0x64>)
 800add4:	f010 fc0a 	bl	801b5ec <UTIL_TIMER_Start>
  }
  UTIL_TIMER_Start(&StopJoinTimer);
 800add8:	4808      	ldr	r0, [pc, #32]	@ (800adfc <StopJoin+0x7c>)
 800adda:	f010 fc07 	bl	801b5ec <UTIL_TIMER_Start>
  /* USER CODE BEGIN StopJoin_Last */

  /* USER CODE END StopJoin_Last */
}
 800adde:	bf00      	nop
 800ade0:	bd80      	pop	{r7, pc}
 800ade2:	bf00      	nop
 800ade4:	2000059c 	.word	0x2000059c
 800ade8:	0801ee08 	.word	0x0801ee08
 800adec:	0801ee28 	.word	0x0801ee28
 800adf0:	20000020 	.word	0x20000020
 800adf4:	0801ee3c 	.word	0x0801ee3c
 800adf8:	20000070 	.word	0x20000070
 800adfc:	200005b4 	.word	0x200005b4

0800ae00 <OnStopJoinTimerEvent>:

static void OnStopJoinTimerEvent(void *context)
{
 800ae00:	b580      	push	{r7, lr}
 800ae02:	b082      	sub	sp, #8
 800ae04:	af00      	add	r7, sp, #0
 800ae06:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnStopJoinTimerEvent_1 */

  /* USER CODE END OnStopJoinTimerEvent_1 */
  if (ActivationType == LORAWAN_DEFAULT_ACTIVATION_TYPE)
 800ae08:	4b05      	ldr	r3, [pc, #20]	@ (800ae20 <OnStopJoinTimerEvent+0x20>)
 800ae0a:	781b      	ldrb	r3, [r3, #0]
 800ae0c:	2b02      	cmp	r3, #2
 800ae0e:	d103      	bne.n	800ae18 <OnStopJoinTimerEvent+0x18>
  {
    UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaStopJoinEvent), CFG_SEQ_Prio_0);
 800ae10:	2100      	movs	r1, #0
 800ae12:	2008      	movs	r0, #8
 800ae14:	f010 fb34 	bl	801b480 <UTIL_SEQ_SetTask>
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET); /* LED_BLUE */
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_RED */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_GREEN */
#endif
  /* USER CODE END OnStopJoinTimerEvent_Last */
}
 800ae18:	bf00      	nop
 800ae1a:	3708      	adds	r7, #8
 800ae1c:	46bd      	mov	sp, r7
 800ae1e:	bd80      	pop	{r7, pc}
 800ae20:	20000020 	.word	0x20000020

0800ae24 <StoreContext>:

static void StoreContext(void)
{
 800ae24:	b580      	push	{r7, lr}
 800ae26:	b082      	sub	sp, #8
 800ae28:	af00      	add	r7, sp, #0
  LmHandlerErrorStatus_t status = LORAMAC_HANDLER_ERROR;
 800ae2a:	23ff      	movs	r3, #255	@ 0xff
 800ae2c:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN StoreContext_1 */

  /* USER CODE END StoreContext_1 */
  status = LmHandlerNvmDataStore();
 800ae2e:	f002 fc95 	bl	800d75c <LmHandlerNvmDataStore>
 800ae32:	4603      	mov	r3, r0
 800ae34:	71fb      	strb	r3, [r7, #7]

  if (status == LORAMAC_HANDLER_NVM_DATA_UP_TO_DATE)
 800ae36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ae3a:	f113 0f08 	cmn.w	r3, #8
 800ae3e:	d106      	bne.n	800ae4e <StoreContext+0x2a>
  {
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA UP TO DATE\r\n");
 800ae40:	4b0a      	ldr	r3, [pc, #40]	@ (800ae6c <StoreContext+0x48>)
 800ae42:	2200      	movs	r2, #0
 800ae44:	2100      	movs	r1, #0
 800ae46:	2002      	movs	r0, #2
 800ae48:	f010 fe48 	bl	801badc <UTIL_ADV_TRACE_COND_FSend>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORE FAILED\r\n");
  }
  /* USER CODE BEGIN StoreContext_Last */

  /* USER CODE END StoreContext_Last */
}
 800ae4c:	e00a      	b.n	800ae64 <StoreContext+0x40>
  else if (status == LORAMAC_HANDLER_ERROR)
 800ae4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ae52:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae56:	d105      	bne.n	800ae64 <StoreContext+0x40>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORE FAILED\r\n");
 800ae58:	4b05      	ldr	r3, [pc, #20]	@ (800ae70 <StoreContext+0x4c>)
 800ae5a:	2200      	movs	r2, #0
 800ae5c:	2100      	movs	r1, #0
 800ae5e:	2002      	movs	r0, #2
 800ae60:	f010 fe3c 	bl	801badc <UTIL_ADV_TRACE_COND_FSend>
}
 800ae64:	bf00      	nop
 800ae66:	3708      	adds	r7, #8
 800ae68:	46bd      	mov	sp, r7
 800ae6a:	bd80      	pop	{r7, pc}
 800ae6c:	0801ee5c 	.word	0x0801ee5c
 800ae70:	0801ee74 	.word	0x0801ee74

0800ae74 <OnNvmDataChange>:

static void OnNvmDataChange(LmHandlerNvmContextStates_t state)
{
 800ae74:	b580      	push	{r7, lr}
 800ae76:	b082      	sub	sp, #8
 800ae78:	af00      	add	r7, sp, #0
 800ae7a:	4603      	mov	r3, r0
 800ae7c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnNvmDataChange_1 */

  /* USER CODE END OnNvmDataChange_1 */
  if (state == LORAMAC_HANDLER_NVM_STORE)
 800ae7e:	79fb      	ldrb	r3, [r7, #7]
 800ae80:	2b01      	cmp	r3, #1
 800ae82:	d106      	bne.n	800ae92 <OnNvmDataChange+0x1e>
  {
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORED\r\n");
 800ae84:	4b08      	ldr	r3, [pc, #32]	@ (800aea8 <OnNvmDataChange+0x34>)
 800ae86:	2200      	movs	r2, #0
 800ae88:	2100      	movs	r1, #0
 800ae8a:	2002      	movs	r0, #2
 800ae8c:	f010 fe26 	bl	801badc <UTIL_ADV_TRACE_COND_FSend>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA RESTORED\r\n");
  }
  /* USER CODE BEGIN OnNvmDataChange_Last */

  /* USER CODE END OnNvmDataChange_Last */
}
 800ae90:	e005      	b.n	800ae9e <OnNvmDataChange+0x2a>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA RESTORED\r\n");
 800ae92:	4b06      	ldr	r3, [pc, #24]	@ (800aeac <OnNvmDataChange+0x38>)
 800ae94:	2200      	movs	r2, #0
 800ae96:	2100      	movs	r1, #0
 800ae98:	2002      	movs	r0, #2
 800ae9a:	f010 fe1f 	bl	801badc <UTIL_ADV_TRACE_COND_FSend>
}
 800ae9e:	bf00      	nop
 800aea0:	3708      	adds	r7, #8
 800aea2:	46bd      	mov	sp, r7
 800aea4:	bd80      	pop	{r7, pc}
 800aea6:	bf00      	nop
 800aea8:	0801ee8c 	.word	0x0801ee8c
 800aeac:	0801eea0 	.word	0x0801eea0

0800aeb0 <OnStoreContextRequest>:

static void OnStoreContextRequest(void *nvm, uint32_t nvm_size)
{
 800aeb0:	b580      	push	{r7, lr}
 800aeb2:	b082      	sub	sp, #8
 800aeb4:	af00      	add	r7, sp, #0
 800aeb6:	6078      	str	r0, [r7, #4]
 800aeb8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN OnStoreContextRequest_1 */

  /* USER CODE END OnStoreContextRequest_1 */
  /* store nvm in flash */
  if (HAL_FLASH_Unlock() == HAL_OK)
 800aeba:	f7f9 ff85 	bl	8004dc8 <HAL_FLASH_Unlock>
 800aebe:	4603      	mov	r3, r0
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	d11c      	bne.n	800aefe <OnStoreContextRequest+0x4e>
  {
    if (FLASH_IF_EraseByPages(PAGE(LORAWAN_NVM_BASE_ADDRESS), 1, 0U) == FLASH_OK)
 800aec4:	4b10      	ldr	r3, [pc, #64]	@ (800af08 <OnStoreContextRequest+0x58>)
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	029a      	lsls	r2, r3, #10
 800aeca:	4b10      	ldr	r3, [pc, #64]	@ (800af0c <OnStoreContextRequest+0x5c>)
 800aecc:	4013      	ands	r3, r2
 800aece:	f44f 327c 	mov.w	r2, #258048	@ 0x3f000
 800aed2:	fbb2 f1f3 	udiv	r1, r2, r3
 800aed6:	fb01 f303 	mul.w	r3, r1, r3
 800aeda:	1ad3      	subs	r3, r2, r3
 800aedc:	0adb      	lsrs	r3, r3, #11
 800aede:	2200      	movs	r2, #0
 800aee0:	2101      	movs	r1, #1
 800aee2:	4618      	mov	r0, r3
 800aee4:	f7f6 fc99 	bl	800181a <FLASH_IF_EraseByPages>
 800aee8:	4603      	mov	r3, r0
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	d105      	bne.n	800aefa <OnStoreContextRequest+0x4a>
    {
      FLASH_IF_Write(LORAWAN_NVM_BASE_ADDRESS, (uint8_t *)nvm, nvm_size, NULL);
 800aeee:	2300      	movs	r3, #0
 800aef0:	683a      	ldr	r2, [r7, #0]
 800aef2:	6879      	ldr	r1, [r7, #4]
 800aef4:	4806      	ldr	r0, [pc, #24]	@ (800af10 <OnStoreContextRequest+0x60>)
 800aef6:	f7f6 fbaf 	bl	8001658 <FLASH_IF_Write>
    }
    HAL_FLASH_Lock();
 800aefa:	f7f9 ff87 	bl	8004e0c <HAL_FLASH_Lock>
  }
  /* USER CODE BEGIN OnStoreContextRequest_Last */

  /* USER CODE END OnStoreContextRequest_Last */
}
 800aefe:	bf00      	nop
 800af00:	3708      	adds	r7, #8
 800af02:	46bd      	mov	sp, r7
 800af04:	bd80      	pop	{r7, pc}
 800af06:	bf00      	nop
 800af08:	1fff75e0 	.word	0x1fff75e0
 800af0c:	03fffc00 	.word	0x03fffc00
 800af10:	0803f000 	.word	0x0803f000

0800af14 <OnRestoreContextRequest>:

static void OnRestoreContextRequest(void *nvm, uint32_t nvm_size)
{
 800af14:	b580      	push	{r7, lr}
 800af16:	b082      	sub	sp, #8
 800af18:	af00      	add	r7, sp, #0
 800af1a:	6078      	str	r0, [r7, #4]
 800af1c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN OnRestoreContextRequest_1 */

  /* USER CODE END OnRestoreContextRequest_1 */
  UTIL_MEM_cpy_8(nvm, (void *)LORAWAN_NVM_BASE_ADDRESS, nvm_size);
 800af1e:	683b      	ldr	r3, [r7, #0]
 800af20:	b29b      	uxth	r3, r3
 800af22:	461a      	mov	r2, r3
 800af24:	4903      	ldr	r1, [pc, #12]	@ (800af34 <OnRestoreContextRequest+0x20>)
 800af26:	6878      	ldr	r0, [r7, #4]
 800af28:	f00f fd8e 	bl	801aa48 <UTIL_MEM_cpy_8>
  /* USER CODE BEGIN OnRestoreContextRequest_Last */

  /* USER CODE END OnRestoreContextRequest_Last */
}
 800af2c:	bf00      	nop
 800af2e:	3708      	adds	r7, #8
 800af30:	46bd      	mov	sp, r7
 800af32:	bd80      	pop	{r7, pc}
 800af34:	0803f000 	.word	0x0803f000

0800af38 <LoraInfo_Init>:

/* USER CODE END EV */

/* Exported functions --------------------------------------------------------*/
void LoraInfo_Init(void)
{
 800af38:	b580      	push	{r7, lr}
 800af3a:	af00      	add	r7, sp, #0
  loraInfo.ActivationMode = 0;
 800af3c:	4b15      	ldr	r3, [pc, #84]	@ (800af94 <LoraInfo_Init+0x5c>)
 800af3e:	2200      	movs	r2, #0
 800af40:	601a      	str	r2, [r3, #0]
  loraInfo.Region = 0;
 800af42:	4b14      	ldr	r3, [pc, #80]	@ (800af94 <LoraInfo_Init+0x5c>)
 800af44:	2200      	movs	r2, #0
 800af46:	605a      	str	r2, [r3, #4]
  loraInfo.ClassB = 0;
 800af48:	4b12      	ldr	r3, [pc, #72]	@ (800af94 <LoraInfo_Init+0x5c>)
 800af4a:	2200      	movs	r2, #0
 800af4c:	609a      	str	r2, [r3, #8]
  loraInfo.Kms = 0;
 800af4e:	4b11      	ldr	r3, [pc, #68]	@ (800af94 <LoraInfo_Init+0x5c>)
 800af50:	2200      	movs	r2, #0
 800af52:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN LoraInfo_Init_1 */

  /* USER CODE END LoraInfo_Init_1 */

#ifdef  REGION_AS923
  loraInfo.Region |= (1 << LORAMAC_REGION_AS923);
 800af54:	4b0f      	ldr	r3, [pc, #60]	@ (800af94 <LoraInfo_Init+0x5c>)
 800af56:	685b      	ldr	r3, [r3, #4]
 800af58:	f043 0301 	orr.w	r3, r3, #1
 800af5c:	4a0d      	ldr	r2, [pc, #52]	@ (800af94 <LoraInfo_Init+0x5c>)
 800af5e:	6053      	str	r3, [r2, #4]
#endif /* REGION_US915 */
#ifdef  REGION_RU864
  loraInfo.Region |= (1 << LORAMAC_REGION_RU864);
#endif /* REGION_RU864 */

  if (loraInfo.Region == 0)
 800af60:	4b0c      	ldr	r3, [pc, #48]	@ (800af94 <LoraInfo_Init+0x5c>)
 800af62:	685b      	ldr	r3, [r3, #4]
 800af64:	2b00      	cmp	r3, #0
 800af66:	d10d      	bne.n	800af84 <LoraInfo_Init+0x4c>
  {
    APP_PRINTF("error: At least one region shall be defined in the MW: check lorawan_conf.h \r\n");
 800af68:	4b0b      	ldr	r3, [pc, #44]	@ (800af98 <LoraInfo_Init+0x60>)
 800af6a:	2200      	movs	r2, #0
 800af6c:	2100      	movs	r1, #0
 800af6e:	2000      	movs	r0, #0
 800af70:	f010 fdb4 	bl	801badc <UTIL_ADV_TRACE_COND_FSend>
    while (1 != UTIL_ADV_TRACE_IsBufferEmpty())
 800af74:	bf00      	nop
 800af76:	f010 fd9f 	bl	801bab8 <UTIL_ADV_TRACE_IsBufferEmpty>
 800af7a:	4603      	mov	r3, r0
 800af7c:	2b01      	cmp	r3, #1
 800af7e:	d1fa      	bne.n	800af76 <LoraInfo_Init+0x3e>
    {
      /* Wait that all printfs are completed*/
    }
    while (1) {} /* At least one region shall be defined */
 800af80:	bf00      	nop
 800af82:	e7fd      	b.n	800af80 <LoraInfo_Init+0x48>
#elif !defined (LORAMAC_CLASSB_ENABLED)
#error LORAMAC_CLASSB_ENABLED not defined ( shall be <0 or 1> )
#endif /* LORAMAC_CLASSB_ENABLED */

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
  loraInfo.Kms = 0;
 800af84:	4b03      	ldr	r3, [pc, #12]	@ (800af94 <LoraInfo_Init+0x5c>)
 800af86:	2200      	movs	r2, #0
 800af88:	60da      	str	r2, [r3, #12]
  loraInfo.ActivationMode = 3;
 800af8a:	4b02      	ldr	r3, [pc, #8]	@ (800af94 <LoraInfo_Init+0x5c>)
 800af8c:	2203      	movs	r2, #3
 800af8e:	601a      	str	r2, [r3, #0]
  loraInfo.ActivationMode = ACTIVATION_BY_PERSONALIZATION + (OVER_THE_AIR_ACTIVATION << 1);
#endif /* LORAWAN_KMS */
  /* USER CODE BEGIN LoraInfo_Init_2 */

  /* USER CODE END LoraInfo_Init_2 */
}
 800af90:	bf00      	nop
 800af92:	bd80      	pop	{r7, pc}
 800af94:	20000708 	.word	0x20000708
 800af98:	0801eeb4 	.word	0x0801eeb4

0800af9c <LoraInfo_GetPtr>:

LoraInfo_t *LoraInfo_GetPtr(void)
{
 800af9c:	b480      	push	{r7}
 800af9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LoraInfo_GetPtr */

  /* USER CODE END LoraInfo_GetPtr */
  return &loraInfo;
 800afa0:	4b02      	ldr	r3, [pc, #8]	@ (800afac <LoraInfo_GetPtr+0x10>)
}
 800afa2:	4618      	mov	r0, r3
 800afa4:	46bd      	mov	sp, r7
 800afa6:	bc80      	pop	{r7}
 800afa8:	4770      	bx	lr
 800afaa:	bf00      	nop
 800afac:	20000708 	.word	0x20000708

0800afb0 <RBI_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t RBI_Init(void)
{
 800afb0:	b580      	push	{r7, lr}
 800afb2:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_Init();
 800afb4:	f7f8 f80f 	bl	8002fd6 <BSP_RADIO_Init>
 800afb8:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_Init_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_Init_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800afba:	4618      	mov	r0, r3
 800afbc:	bd80      	pop	{r7, pc}

0800afbe <RBI_ConfigRFSwitch>:
  return retcode;
#endif  /* USE_BSP_DRIVER */
}

int32_t RBI_ConfigRFSwitch(RBI_Switch_TypeDef Config)
{
 800afbe:	b580      	push	{r7, lr}
 800afc0:	b082      	sub	sp, #8
 800afc2:	af00      	add	r7, sp, #0
 800afc4:	4603      	mov	r3, r0
 800afc6:	71fb      	strb	r3, [r7, #7]
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_ConfigRFSwitch((BSP_RADIO_Switch_TypeDef) Config);
 800afc8:	79fb      	ldrb	r3, [r7, #7]
 800afca:	4618      	mov	r0, r3
 800afcc:	f7f8 f834 	bl	8003038 <BSP_RADIO_ConfigRFSwitch>
 800afd0:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_ConfigRFSwitch_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_ConfigRFSwitch_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 800afd2:	4618      	mov	r0, r3
 800afd4:	3708      	adds	r7, #8
 800afd6:	46bd      	mov	sp, r7
 800afd8:	bd80      	pop	{r7, pc}

0800afda <RBI_GetTxConfig>:

int32_t RBI_GetTxConfig(void)
{
 800afda:	b580      	push	{r7, lr}
 800afdc:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetTxConfig();
 800afde:	f7f8 f879 	bl	80030d4 <BSP_RADIO_GetTxConfig>
 800afe2:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_GetTxConfig_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_GetTxConfig_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 800afe4:	4618      	mov	r0, r3
 800afe6:	bd80      	pop	{r7, pc}

0800afe8 <RBI_IsTCXO>:

int32_t RBI_IsTCXO(void)
{
 800afe8:	b580      	push	{r7, lr}
 800afea:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsTCXO();
 800afec:	f7f8 f879 	bl	80030e2 <BSP_RADIO_IsTCXO>
 800aff0:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsTCXO_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsTCXO_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800aff2:	4618      	mov	r0, r3
 800aff4:	bd80      	pop	{r7, pc}

0800aff6 <RBI_IsDCDC>:

int32_t RBI_IsDCDC(void)
{
 800aff6:	b580      	push	{r7, lr}
 800aff8:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsDCDC();
 800affa:	f7f8 f879 	bl	80030f0 <BSP_RADIO_IsDCDC>
 800affe:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsDCDC_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsDCDC_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800b000:	4618      	mov	r0, r3
 800b002:	bd80      	pop	{r7, pc}

0800b004 <RBI_GetRFOMaxPowerConfig>:

int32_t RBI_GetRFOMaxPowerConfig(RBI_RFOMaxPowerConfig_TypeDef Config)
{
 800b004:	b580      	push	{r7, lr}
 800b006:	b082      	sub	sp, #8
 800b008:	af00      	add	r7, sp, #0
 800b00a:	4603      	mov	r3, r0
 800b00c:	71fb      	strb	r3, [r7, #7]
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetRFOMaxPowerConfig((BSP_RADIO_RFOMaxPowerConfig_TypeDef) Config);
 800b00e:	79fb      	ldrb	r3, [r7, #7]
 800b010:	4618      	mov	r0, r3
 800b012:	f7f8 f874 	bl	80030fe <BSP_RADIO_GetRFOMaxPowerConfig>
 800b016:	4603      	mov	r3, r0
    ret = 22; /*dBm*/
  }
  /* USER CODE END RBI_GetRFOMaxPowerConfig_2 */
  return ret;
#endif  /* USE_BSP_DRIVER  */
}
 800b018:	4618      	mov	r0, r3
 800b01a:	3708      	adds	r7, #8
 800b01c:	46bd      	mov	sp, r7
 800b01e:	bd80      	pop	{r7, pc}

0800b020 <AES_CMAC_Init>:
            ( r )[i] = ( r )[i] ^ ( v )[i]; \
        }                                   \
    } while( 0 )

void AES_CMAC_Init( AES_CMAC_CTX* ctx )
{
 800b020:	b580      	push	{r7, lr}
 800b022:	b082      	sub	sp, #8
 800b024:	af00      	add	r7, sp, #0
 800b026:	6078      	str	r0, [r7, #4]
    memset1( ctx->X, 0, sizeof ctx->X );
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	33f1      	adds	r3, #241	@ 0xf1
 800b02c:	2210      	movs	r2, #16
 800b02e:	2100      	movs	r1, #0
 800b030:	4618      	mov	r0, r3
 800b032:	f00c fa3f 	bl	80174b4 <memset1>
    ctx->M_n = 0;
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	2200      	movs	r2, #0
 800b03a:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
    memset1( ctx->rijndael.ksch, '\0', 240 );
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	22f0      	movs	r2, #240	@ 0xf0
 800b042:	2100      	movs	r1, #0
 800b044:	4618      	mov	r0, r3
 800b046:	f00c fa35 	bl	80174b4 <memset1>
}
 800b04a:	bf00      	nop
 800b04c:	3708      	adds	r7, #8
 800b04e:	46bd      	mov	sp, r7
 800b050:	bd80      	pop	{r7, pc}

0800b052 <AES_CMAC_SetKey>:

void AES_CMAC_SetKey( AES_CMAC_CTX* ctx, const uint8_t key[AES_CMAC_KEY_LENGTH] )
{
 800b052:	b580      	push	{r7, lr}
 800b054:	b082      	sub	sp, #8
 800b056:	af00      	add	r7, sp, #0
 800b058:	6078      	str	r0, [r7, #4]
 800b05a:	6039      	str	r1, [r7, #0]
    lorawan_aes_set_key( key, AES_CMAC_KEY_LENGTH, &ctx->rijndael );
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	461a      	mov	r2, r3
 800b060:	2110      	movs	r1, #16
 800b062:	6838      	ldr	r0, [r7, #0]
 800b064:	f000 fe5c 	bl	800bd20 <lorawan_aes_set_key>
}
 800b068:	bf00      	nop
 800b06a:	3708      	adds	r7, #8
 800b06c:	46bd      	mov	sp, r7
 800b06e:	bd80      	pop	{r7, pc}

0800b070 <AES_CMAC_Update>:

void AES_CMAC_Update( AES_CMAC_CTX* ctx, const uint8_t* data, uint32_t len )
{
 800b070:	b580      	push	{r7, lr}
 800b072:	b08c      	sub	sp, #48	@ 0x30
 800b074:	af00      	add	r7, sp, #0
 800b076:	60f8      	str	r0, [r7, #12]
 800b078:	60b9      	str	r1, [r7, #8]
 800b07a:	607a      	str	r2, [r7, #4]
    uint32_t mlen;
    uint8_t  in[16];

    if( ctx->M_n > 0 )
 800b07c:	68fb      	ldr	r3, [r7, #12]
 800b07e:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800b082:	2b00      	cmp	r3, #0
 800b084:	f000 80a1 	beq.w	800b1ca <AES_CMAC_Update+0x15a>
    {
        mlen = MIN( 16 - ctx->M_n, len );
 800b088:	68fb      	ldr	r3, [r7, #12]
 800b08a:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800b08e:	f1c3 0310 	rsb	r3, r3, #16
 800b092:	687a      	ldr	r2, [r7, #4]
 800b094:	4293      	cmp	r3, r2
 800b096:	bf28      	it	cs
 800b098:	4613      	movcs	r3, r2
 800b09a:	627b      	str	r3, [r7, #36]	@ 0x24
        memcpy1( ctx->M_last + ctx->M_n, data, mlen );
 800b09c:	68fb      	ldr	r3, [r7, #12]
 800b09e:	f203 1201 	addw	r2, r3, #257	@ 0x101
 800b0a2:	68fb      	ldr	r3, [r7, #12]
 800b0a4:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800b0a8:	4413      	add	r3, r2
 800b0aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b0ac:	b292      	uxth	r2, r2
 800b0ae:	68b9      	ldr	r1, [r7, #8]
 800b0b0:	4618      	mov	r0, r3
 800b0b2:	f00c f9c4 	bl	801743e <memcpy1>
        ctx->M_n += mlen;
 800b0b6:	68fb      	ldr	r3, [r7, #12]
 800b0b8:	f8d3 2114 	ldr.w	r2, [r3, #276]	@ 0x114
 800b0bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0be:	441a      	add	r2, r3
 800b0c0:	68fb      	ldr	r3, [r7, #12]
 800b0c2:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
        if( ctx->M_n < 16 || len == mlen )
 800b0c6:	68fb      	ldr	r3, [r7, #12]
 800b0c8:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800b0cc:	2b0f      	cmp	r3, #15
 800b0ce:	f240 808d 	bls.w	800b1ec <AES_CMAC_Update+0x17c>
 800b0d2:	687a      	ldr	r2, [r7, #4]
 800b0d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0d6:	429a      	cmp	r2, r3
 800b0d8:	f000 8088 	beq.w	800b1ec <AES_CMAC_Update+0x17c>
            return;
        XOR( ctx->M_last, ctx->X );
 800b0dc:	2300      	movs	r3, #0
 800b0de:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b0e0:	e015      	b.n	800b10e <AES_CMAC_Update+0x9e>
 800b0e2:	68fa      	ldr	r2, [r7, #12]
 800b0e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b0e6:	4413      	add	r3, r2
 800b0e8:	33f1      	adds	r3, #241	@ 0xf1
 800b0ea:	781a      	ldrb	r2, [r3, #0]
 800b0ec:	68f9      	ldr	r1, [r7, #12]
 800b0ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b0f0:	440b      	add	r3, r1
 800b0f2:	f203 1301 	addw	r3, r3, #257	@ 0x101
 800b0f6:	781b      	ldrb	r3, [r3, #0]
 800b0f8:	4053      	eors	r3, r2
 800b0fa:	b2d9      	uxtb	r1, r3
 800b0fc:	68fa      	ldr	r2, [r7, #12]
 800b0fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b100:	4413      	add	r3, r2
 800b102:	33f1      	adds	r3, #241	@ 0xf1
 800b104:	460a      	mov	r2, r1
 800b106:	701a      	strb	r2, [r3, #0]
 800b108:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b10a:	3301      	adds	r3, #1
 800b10c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b10e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b110:	2b0f      	cmp	r3, #15
 800b112:	dde6      	ble.n	800b0e2 <AES_CMAC_Update+0x72>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800b114:	68fb      	ldr	r3, [r7, #12]
 800b116:	f103 01f1 	add.w	r1, r3, #241	@ 0xf1
 800b11a:	f107 0314 	add.w	r3, r7, #20
 800b11e:	2210      	movs	r2, #16
 800b120:	4618      	mov	r0, r3
 800b122:	f00c f98c 	bl	801743e <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 800b126:	68fa      	ldr	r2, [r7, #12]
 800b128:	f107 0114 	add.w	r1, r7, #20
 800b12c:	f107 0314 	add.w	r3, r7, #20
 800b130:	4618      	mov	r0, r3
 800b132:	f000 fed3 	bl	800bedc <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 800b136:	68fb      	ldr	r3, [r7, #12]
 800b138:	33f1      	adds	r3, #241	@ 0xf1
 800b13a:	f107 0114 	add.w	r1, r7, #20
 800b13e:	2210      	movs	r2, #16
 800b140:	4618      	mov	r0, r3
 800b142:	f00c f97c 	bl	801743e <memcpy1>

        data += mlen;
 800b146:	68ba      	ldr	r2, [r7, #8]
 800b148:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b14a:	4413      	add	r3, r2
 800b14c:	60bb      	str	r3, [r7, #8]
        len -= mlen;
 800b14e:	687a      	ldr	r2, [r7, #4]
 800b150:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b152:	1ad3      	subs	r3, r2, r3
 800b154:	607b      	str	r3, [r7, #4]
    }
    while( len > 16 )
 800b156:	e038      	b.n	800b1ca <AES_CMAC_Update+0x15a>
    { /* not last block */

        XOR( data, ctx->X );
 800b158:	2300      	movs	r3, #0
 800b15a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b15c:	e013      	b.n	800b186 <AES_CMAC_Update+0x116>
 800b15e:	68fa      	ldr	r2, [r7, #12]
 800b160:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b162:	4413      	add	r3, r2
 800b164:	33f1      	adds	r3, #241	@ 0xf1
 800b166:	781a      	ldrb	r2, [r3, #0]
 800b168:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b16a:	68b9      	ldr	r1, [r7, #8]
 800b16c:	440b      	add	r3, r1
 800b16e:	781b      	ldrb	r3, [r3, #0]
 800b170:	4053      	eors	r3, r2
 800b172:	b2d9      	uxtb	r1, r3
 800b174:	68fa      	ldr	r2, [r7, #12]
 800b176:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b178:	4413      	add	r3, r2
 800b17a:	33f1      	adds	r3, #241	@ 0xf1
 800b17c:	460a      	mov	r2, r1
 800b17e:	701a      	strb	r2, [r3, #0]
 800b180:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b182:	3301      	adds	r3, #1
 800b184:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b186:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b188:	2b0f      	cmp	r3, #15
 800b18a:	dde8      	ble.n	800b15e <AES_CMAC_Update+0xee>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800b18c:	68fb      	ldr	r3, [r7, #12]
 800b18e:	f103 01f1 	add.w	r1, r3, #241	@ 0xf1
 800b192:	f107 0314 	add.w	r3, r7, #20
 800b196:	2210      	movs	r2, #16
 800b198:	4618      	mov	r0, r3
 800b19a:	f00c f950 	bl	801743e <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 800b19e:	68fa      	ldr	r2, [r7, #12]
 800b1a0:	f107 0114 	add.w	r1, r7, #20
 800b1a4:	f107 0314 	add.w	r3, r7, #20
 800b1a8:	4618      	mov	r0, r3
 800b1aa:	f000 fe97 	bl	800bedc <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 800b1ae:	68fb      	ldr	r3, [r7, #12]
 800b1b0:	33f1      	adds	r3, #241	@ 0xf1
 800b1b2:	f107 0114 	add.w	r1, r7, #20
 800b1b6:	2210      	movs	r2, #16
 800b1b8:	4618      	mov	r0, r3
 800b1ba:	f00c f940 	bl	801743e <memcpy1>

        data += 16;
 800b1be:	68bb      	ldr	r3, [r7, #8]
 800b1c0:	3310      	adds	r3, #16
 800b1c2:	60bb      	str	r3, [r7, #8]
        len -= 16;
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	3b10      	subs	r3, #16
 800b1c8:	607b      	str	r3, [r7, #4]
    while( len > 16 )
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	2b10      	cmp	r3, #16
 800b1ce:	d8c3      	bhi.n	800b158 <AES_CMAC_Update+0xe8>
    }
    /* potential last block, save it */
    memcpy1( ctx->M_last, data, len );
 800b1d0:	68fb      	ldr	r3, [r7, #12]
 800b1d2:	f203 1301 	addw	r3, r3, #257	@ 0x101
 800b1d6:	687a      	ldr	r2, [r7, #4]
 800b1d8:	b292      	uxth	r2, r2
 800b1da:	68b9      	ldr	r1, [r7, #8]
 800b1dc:	4618      	mov	r0, r3
 800b1de:	f00c f92e 	bl	801743e <memcpy1>
    ctx->M_n = len;
 800b1e2:	68fb      	ldr	r3, [r7, #12]
 800b1e4:	687a      	ldr	r2, [r7, #4]
 800b1e6:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
 800b1ea:	e000      	b.n	800b1ee <AES_CMAC_Update+0x17e>
            return;
 800b1ec:	bf00      	nop
}
 800b1ee:	3730      	adds	r7, #48	@ 0x30
 800b1f0:	46bd      	mov	sp, r7
 800b1f2:	bd80      	pop	{r7, pc}

0800b1f4 <AES_CMAC_Final>:

void AES_CMAC_Final( uint8_t digest[AES_CMAC_DIGEST_LENGTH], AES_CMAC_CTX* ctx )
{
 800b1f4:	b580      	push	{r7, lr}
 800b1f6:	b092      	sub	sp, #72	@ 0x48
 800b1f8:	af00      	add	r7, sp, #0
 800b1fa:	6078      	str	r0, [r7, #4]
 800b1fc:	6039      	str	r1, [r7, #0]
    uint8_t K[16];
    uint8_t in[16];
    /* generate subkey K1 */
    memset1( K, '\0', 16 );
 800b1fe:	f107 031c 	add.w	r3, r7, #28
 800b202:	2210      	movs	r2, #16
 800b204:	2100      	movs	r1, #0
 800b206:	4618      	mov	r0, r3
 800b208:	f00c f954 	bl	80174b4 <memset1>

    lorawan_aes_encrypt( K, K, &ctx->rijndael );
 800b20c:	683a      	ldr	r2, [r7, #0]
 800b20e:	f107 011c 	add.w	r1, r7, #28
 800b212:	f107 031c 	add.w	r3, r7, #28
 800b216:	4618      	mov	r0, r3
 800b218:	f000 fe60 	bl	800bedc <lorawan_aes_encrypt>

    if( K[0] & 0x80 )
 800b21c:	7f3b      	ldrb	r3, [r7, #28]
 800b21e:	b25b      	sxtb	r3, r3
 800b220:	2b00      	cmp	r3, #0
 800b222:	da30      	bge.n	800b286 <AES_CMAC_Final+0x92>
    {
        LSHIFT( K, K );
 800b224:	2300      	movs	r3, #0
 800b226:	647b      	str	r3, [r7, #68]	@ 0x44
 800b228:	e01b      	b.n	800b262 <AES_CMAC_Final+0x6e>
 800b22a:	f107 021c 	add.w	r2, r7, #28
 800b22e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b230:	4413      	add	r3, r2
 800b232:	781b      	ldrb	r3, [r3, #0]
 800b234:	005b      	lsls	r3, r3, #1
 800b236:	b25a      	sxtb	r2, r3
 800b238:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b23a:	3301      	adds	r3, #1
 800b23c:	3348      	adds	r3, #72	@ 0x48
 800b23e:	443b      	add	r3, r7
 800b240:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800b244:	09db      	lsrs	r3, r3, #7
 800b246:	b2db      	uxtb	r3, r3
 800b248:	b25b      	sxtb	r3, r3
 800b24a:	4313      	orrs	r3, r2
 800b24c:	b25b      	sxtb	r3, r3
 800b24e:	b2d9      	uxtb	r1, r3
 800b250:	f107 021c 	add.w	r2, r7, #28
 800b254:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b256:	4413      	add	r3, r2
 800b258:	460a      	mov	r2, r1
 800b25a:	701a      	strb	r2, [r3, #0]
 800b25c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b25e:	3301      	adds	r3, #1
 800b260:	647b      	str	r3, [r7, #68]	@ 0x44
 800b262:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b264:	2b0e      	cmp	r3, #14
 800b266:	dde0      	ble.n	800b22a <AES_CMAC_Final+0x36>
 800b268:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b26c:	005b      	lsls	r3, r3, #1
 800b26e:	b2db      	uxtb	r3, r3
 800b270:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        K[15] ^= 0x87;
 800b274:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b278:	f083 0378 	eor.w	r3, r3, #120	@ 0x78
 800b27c:	43db      	mvns	r3, r3
 800b27e:	b2db      	uxtb	r3, r3
 800b280:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b284:	e027      	b.n	800b2d6 <AES_CMAC_Final+0xe2>
    }
    else
        LSHIFT( K, K );
 800b286:	2300      	movs	r3, #0
 800b288:	643b      	str	r3, [r7, #64]	@ 0x40
 800b28a:	e01b      	b.n	800b2c4 <AES_CMAC_Final+0xd0>
 800b28c:	f107 021c 	add.w	r2, r7, #28
 800b290:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b292:	4413      	add	r3, r2
 800b294:	781b      	ldrb	r3, [r3, #0]
 800b296:	005b      	lsls	r3, r3, #1
 800b298:	b25a      	sxtb	r2, r3
 800b29a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b29c:	3301      	adds	r3, #1
 800b29e:	3348      	adds	r3, #72	@ 0x48
 800b2a0:	443b      	add	r3, r7
 800b2a2:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800b2a6:	09db      	lsrs	r3, r3, #7
 800b2a8:	b2db      	uxtb	r3, r3
 800b2aa:	b25b      	sxtb	r3, r3
 800b2ac:	4313      	orrs	r3, r2
 800b2ae:	b25b      	sxtb	r3, r3
 800b2b0:	b2d9      	uxtb	r1, r3
 800b2b2:	f107 021c 	add.w	r2, r7, #28
 800b2b6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b2b8:	4413      	add	r3, r2
 800b2ba:	460a      	mov	r2, r1
 800b2bc:	701a      	strb	r2, [r3, #0]
 800b2be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b2c0:	3301      	adds	r3, #1
 800b2c2:	643b      	str	r3, [r7, #64]	@ 0x40
 800b2c4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b2c6:	2b0e      	cmp	r3, #14
 800b2c8:	dde0      	ble.n	800b28c <AES_CMAC_Final+0x98>
 800b2ca:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b2ce:	005b      	lsls	r3, r3, #1
 800b2d0:	b2db      	uxtb	r3, r3
 800b2d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

    if( ctx->M_n == 16 )
 800b2d6:	683b      	ldr	r3, [r7, #0]
 800b2d8:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800b2dc:	2b10      	cmp	r3, #16
 800b2de:	d11d      	bne.n	800b31c <AES_CMAC_Final+0x128>
    {
        /* last block was a complete block */
        XOR( K, ctx->M_last );
 800b2e0:	2300      	movs	r3, #0
 800b2e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b2e4:	e016      	b.n	800b314 <AES_CMAC_Final+0x120>
 800b2e6:	683a      	ldr	r2, [r7, #0]
 800b2e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b2ea:	4413      	add	r3, r2
 800b2ec:	f203 1301 	addw	r3, r3, #257	@ 0x101
 800b2f0:	781a      	ldrb	r2, [r3, #0]
 800b2f2:	f107 011c 	add.w	r1, r7, #28
 800b2f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b2f8:	440b      	add	r3, r1
 800b2fa:	781b      	ldrb	r3, [r3, #0]
 800b2fc:	4053      	eors	r3, r2
 800b2fe:	b2d9      	uxtb	r1, r3
 800b300:	683a      	ldr	r2, [r7, #0]
 800b302:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b304:	4413      	add	r3, r2
 800b306:	f203 1301 	addw	r3, r3, #257	@ 0x101
 800b30a:	460a      	mov	r2, r1
 800b30c:	701a      	strb	r2, [r3, #0]
 800b30e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b310:	3301      	adds	r3, #1
 800b312:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b314:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b316:	2b0f      	cmp	r3, #15
 800b318:	dde5      	ble.n	800b2e6 <AES_CMAC_Final+0xf2>
 800b31a:	e096      	b.n	800b44a <AES_CMAC_Final+0x256>
    }
    else
    {
        /* generate subkey K2 */
        if( K[0] & 0x80 )
 800b31c:	7f3b      	ldrb	r3, [r7, #28]
 800b31e:	b25b      	sxtb	r3, r3
 800b320:	2b00      	cmp	r3, #0
 800b322:	da30      	bge.n	800b386 <AES_CMAC_Final+0x192>
        {
            LSHIFT( K, K );
 800b324:	2300      	movs	r3, #0
 800b326:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b328:	e01b      	b.n	800b362 <AES_CMAC_Final+0x16e>
 800b32a:	f107 021c 	add.w	r2, r7, #28
 800b32e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b330:	4413      	add	r3, r2
 800b332:	781b      	ldrb	r3, [r3, #0]
 800b334:	005b      	lsls	r3, r3, #1
 800b336:	b25a      	sxtb	r2, r3
 800b338:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b33a:	3301      	adds	r3, #1
 800b33c:	3348      	adds	r3, #72	@ 0x48
 800b33e:	443b      	add	r3, r7
 800b340:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800b344:	09db      	lsrs	r3, r3, #7
 800b346:	b2db      	uxtb	r3, r3
 800b348:	b25b      	sxtb	r3, r3
 800b34a:	4313      	orrs	r3, r2
 800b34c:	b25b      	sxtb	r3, r3
 800b34e:	b2d9      	uxtb	r1, r3
 800b350:	f107 021c 	add.w	r2, r7, #28
 800b354:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b356:	4413      	add	r3, r2
 800b358:	460a      	mov	r2, r1
 800b35a:	701a      	strb	r2, [r3, #0]
 800b35c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b35e:	3301      	adds	r3, #1
 800b360:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b362:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b364:	2b0e      	cmp	r3, #14
 800b366:	dde0      	ble.n	800b32a <AES_CMAC_Final+0x136>
 800b368:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b36c:	005b      	lsls	r3, r3, #1
 800b36e:	b2db      	uxtb	r3, r3
 800b370:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
            K[15] ^= 0x87;
 800b374:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b378:	f083 0378 	eor.w	r3, r3, #120	@ 0x78
 800b37c:	43db      	mvns	r3, r3
 800b37e:	b2db      	uxtb	r3, r3
 800b380:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b384:	e027      	b.n	800b3d6 <AES_CMAC_Final+0x1e2>
        }
        else
            LSHIFT( K, K );
 800b386:	2300      	movs	r3, #0
 800b388:	637b      	str	r3, [r7, #52]	@ 0x34
 800b38a:	e01b      	b.n	800b3c4 <AES_CMAC_Final+0x1d0>
 800b38c:	f107 021c 	add.w	r2, r7, #28
 800b390:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b392:	4413      	add	r3, r2
 800b394:	781b      	ldrb	r3, [r3, #0]
 800b396:	005b      	lsls	r3, r3, #1
 800b398:	b25a      	sxtb	r2, r3
 800b39a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b39c:	3301      	adds	r3, #1
 800b39e:	3348      	adds	r3, #72	@ 0x48
 800b3a0:	443b      	add	r3, r7
 800b3a2:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800b3a6:	09db      	lsrs	r3, r3, #7
 800b3a8:	b2db      	uxtb	r3, r3
 800b3aa:	b25b      	sxtb	r3, r3
 800b3ac:	4313      	orrs	r3, r2
 800b3ae:	b25b      	sxtb	r3, r3
 800b3b0:	b2d9      	uxtb	r1, r3
 800b3b2:	f107 021c 	add.w	r2, r7, #28
 800b3b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b3b8:	4413      	add	r3, r2
 800b3ba:	460a      	mov	r2, r1
 800b3bc:	701a      	strb	r2, [r3, #0]
 800b3be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b3c0:	3301      	adds	r3, #1
 800b3c2:	637b      	str	r3, [r7, #52]	@ 0x34
 800b3c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b3c6:	2b0e      	cmp	r3, #14
 800b3c8:	dde0      	ble.n	800b38c <AES_CMAC_Final+0x198>
 800b3ca:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b3ce:	005b      	lsls	r3, r3, #1
 800b3d0:	b2db      	uxtb	r3, r3
 800b3d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

        /* padding(M_last) */
        ctx->M_last[ctx->M_n] = 0x80;
 800b3d6:	683b      	ldr	r3, [r7, #0]
 800b3d8:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800b3dc:	683a      	ldr	r2, [r7, #0]
 800b3de:	4413      	add	r3, r2
 800b3e0:	2280      	movs	r2, #128	@ 0x80
 800b3e2:	f883 2101 	strb.w	r2, [r3, #257]	@ 0x101
        while( ++ctx->M_n < 16 )
 800b3e6:	e007      	b.n	800b3f8 <AES_CMAC_Final+0x204>
            ctx->M_last[ctx->M_n] = 0;
 800b3e8:	683b      	ldr	r3, [r7, #0]
 800b3ea:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800b3ee:	683a      	ldr	r2, [r7, #0]
 800b3f0:	4413      	add	r3, r2
 800b3f2:	2200      	movs	r2, #0
 800b3f4:	f883 2101 	strb.w	r2, [r3, #257]	@ 0x101
        while( ++ctx->M_n < 16 )
 800b3f8:	683b      	ldr	r3, [r7, #0]
 800b3fa:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800b3fe:	1c5a      	adds	r2, r3, #1
 800b400:	683b      	ldr	r3, [r7, #0]
 800b402:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
 800b406:	683b      	ldr	r3, [r7, #0]
 800b408:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800b40c:	2b0f      	cmp	r3, #15
 800b40e:	d9eb      	bls.n	800b3e8 <AES_CMAC_Final+0x1f4>

        XOR( K, ctx->M_last );
 800b410:	2300      	movs	r3, #0
 800b412:	633b      	str	r3, [r7, #48]	@ 0x30
 800b414:	e016      	b.n	800b444 <AES_CMAC_Final+0x250>
 800b416:	683a      	ldr	r2, [r7, #0]
 800b418:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b41a:	4413      	add	r3, r2
 800b41c:	f203 1301 	addw	r3, r3, #257	@ 0x101
 800b420:	781a      	ldrb	r2, [r3, #0]
 800b422:	f107 011c 	add.w	r1, r7, #28
 800b426:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b428:	440b      	add	r3, r1
 800b42a:	781b      	ldrb	r3, [r3, #0]
 800b42c:	4053      	eors	r3, r2
 800b42e:	b2d9      	uxtb	r1, r3
 800b430:	683a      	ldr	r2, [r7, #0]
 800b432:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b434:	4413      	add	r3, r2
 800b436:	f203 1301 	addw	r3, r3, #257	@ 0x101
 800b43a:	460a      	mov	r2, r1
 800b43c:	701a      	strb	r2, [r3, #0]
 800b43e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b440:	3301      	adds	r3, #1
 800b442:	633b      	str	r3, [r7, #48]	@ 0x30
 800b444:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b446:	2b0f      	cmp	r3, #15
 800b448:	dde5      	ble.n	800b416 <AES_CMAC_Final+0x222>
    }
    XOR( ctx->M_last, ctx->X );
 800b44a:	2300      	movs	r3, #0
 800b44c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b44e:	e015      	b.n	800b47c <AES_CMAC_Final+0x288>
 800b450:	683a      	ldr	r2, [r7, #0]
 800b452:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b454:	4413      	add	r3, r2
 800b456:	33f1      	adds	r3, #241	@ 0xf1
 800b458:	781a      	ldrb	r2, [r3, #0]
 800b45a:	6839      	ldr	r1, [r7, #0]
 800b45c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b45e:	440b      	add	r3, r1
 800b460:	f203 1301 	addw	r3, r3, #257	@ 0x101
 800b464:	781b      	ldrb	r3, [r3, #0]
 800b466:	4053      	eors	r3, r2
 800b468:	b2d9      	uxtb	r1, r3
 800b46a:	683a      	ldr	r2, [r7, #0]
 800b46c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b46e:	4413      	add	r3, r2
 800b470:	33f1      	adds	r3, #241	@ 0xf1
 800b472:	460a      	mov	r2, r1
 800b474:	701a      	strb	r2, [r3, #0]
 800b476:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b478:	3301      	adds	r3, #1
 800b47a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b47c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b47e:	2b0f      	cmp	r3, #15
 800b480:	dde6      	ble.n	800b450 <AES_CMAC_Final+0x25c>

    memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800b482:	683b      	ldr	r3, [r7, #0]
 800b484:	f103 01f1 	add.w	r1, r3, #241	@ 0xf1
 800b488:	f107 030c 	add.w	r3, r7, #12
 800b48c:	2210      	movs	r2, #16
 800b48e:	4618      	mov	r0, r3
 800b490:	f00b ffd5 	bl	801743e <memcpy1>
    lorawan_aes_encrypt( in, digest, &ctx->rijndael );
 800b494:	683a      	ldr	r2, [r7, #0]
 800b496:	f107 030c 	add.w	r3, r7, #12
 800b49a:	6879      	ldr	r1, [r7, #4]
 800b49c:	4618      	mov	r0, r3
 800b49e:	f000 fd1d 	bl	800bedc <lorawan_aes_encrypt>
    memset1( K, 0, sizeof K );
 800b4a2:	f107 031c 	add.w	r3, r7, #28
 800b4a6:	2210      	movs	r2, #16
 800b4a8:	2100      	movs	r1, #0
 800b4aa:	4618      	mov	r0, r3
 800b4ac:	f00c f802 	bl	80174b4 <memset1>
}
 800b4b0:	bf00      	nop
 800b4b2:	3748      	adds	r7, #72	@ 0x48
 800b4b4:	46bd      	mov	sp, r7
 800b4b6:	bd80      	pop	{r7, pc}

0800b4b8 <copy_block>:
#  define block_copy_nn(d, s, l)    copy_block_nn(d, s, l)
#  define block_copy(d, s)          copy_block(d, s)
#endif

static void copy_block( void *d, const void *s )
{
 800b4b8:	b480      	push	{r7}
 800b4ba:	b083      	sub	sp, #12
 800b4bc:	af00      	add	r7, sp, #0
 800b4be:	6078      	str	r0, [r7, #4]
 800b4c0:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0];
 800b4c2:	683b      	ldr	r3, [r7, #0]
 800b4c4:	781a      	ldrb	r2, [r3, #0]
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1];
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	3301      	adds	r3, #1
 800b4ce:	683a      	ldr	r2, [r7, #0]
 800b4d0:	7852      	ldrb	r2, [r2, #1]
 800b4d2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2];
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	3302      	adds	r3, #2
 800b4d8:	683a      	ldr	r2, [r7, #0]
 800b4da:	7892      	ldrb	r2, [r2, #2]
 800b4dc:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3];
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	3303      	adds	r3, #3
 800b4e2:	683a      	ldr	r2, [r7, #0]
 800b4e4:	78d2      	ldrb	r2, [r2, #3]
 800b4e6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4];
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	3304      	adds	r3, #4
 800b4ec:	683a      	ldr	r2, [r7, #0]
 800b4ee:	7912      	ldrb	r2, [r2, #4]
 800b4f0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5];
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	3305      	adds	r3, #5
 800b4f6:	683a      	ldr	r2, [r7, #0]
 800b4f8:	7952      	ldrb	r2, [r2, #5]
 800b4fa:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6];
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	3306      	adds	r3, #6
 800b500:	683a      	ldr	r2, [r7, #0]
 800b502:	7992      	ldrb	r2, [r2, #6]
 800b504:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7];
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	3307      	adds	r3, #7
 800b50a:	683a      	ldr	r2, [r7, #0]
 800b50c:	79d2      	ldrb	r2, [r2, #7]
 800b50e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8];
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	3308      	adds	r3, #8
 800b514:	683a      	ldr	r2, [r7, #0]
 800b516:	7a12      	ldrb	r2, [r2, #8]
 800b518:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9];
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	3309      	adds	r3, #9
 800b51e:	683a      	ldr	r2, [r7, #0]
 800b520:	7a52      	ldrb	r2, [r2, #9]
 800b522:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10];
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	330a      	adds	r3, #10
 800b528:	683a      	ldr	r2, [r7, #0]
 800b52a:	7a92      	ldrb	r2, [r2, #10]
 800b52c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11];
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	330b      	adds	r3, #11
 800b532:	683a      	ldr	r2, [r7, #0]
 800b534:	7ad2      	ldrb	r2, [r2, #11]
 800b536:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12];
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	330c      	adds	r3, #12
 800b53c:	683a      	ldr	r2, [r7, #0]
 800b53e:	7b12      	ldrb	r2, [r2, #12]
 800b540:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13];
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	330d      	adds	r3, #13
 800b546:	683a      	ldr	r2, [r7, #0]
 800b548:	7b52      	ldrb	r2, [r2, #13]
 800b54a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14];
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	330e      	adds	r3, #14
 800b550:	683a      	ldr	r2, [r7, #0]
 800b552:	7b92      	ldrb	r2, [r2, #14]
 800b554:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15];
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	330f      	adds	r3, #15
 800b55a:	683a      	ldr	r2, [r7, #0]
 800b55c:	7bd2      	ldrb	r2, [r2, #15]
 800b55e:	701a      	strb	r2, [r3, #0]
#endif
}
 800b560:	bf00      	nop
 800b562:	370c      	adds	r7, #12
 800b564:	46bd      	mov	sp, r7
 800b566:	bc80      	pop	{r7}
 800b568:	4770      	bx	lr

0800b56a <copy_block_nn>:

static void copy_block_nn( uint8_t * d, const uint8_t *s, uint8_t nn )
{
 800b56a:	b480      	push	{r7}
 800b56c:	b085      	sub	sp, #20
 800b56e:	af00      	add	r7, sp, #0
 800b570:	60f8      	str	r0, [r7, #12]
 800b572:	60b9      	str	r1, [r7, #8]
 800b574:	4613      	mov	r3, r2
 800b576:	71fb      	strb	r3, [r7, #7]
    while( nn-- )
 800b578:	e007      	b.n	800b58a <copy_block_nn+0x20>
        //*((uint8_t*)d)++ = *((uint8_t*)s)++;
        *d++ = *s++;
 800b57a:	68ba      	ldr	r2, [r7, #8]
 800b57c:	1c53      	adds	r3, r2, #1
 800b57e:	60bb      	str	r3, [r7, #8]
 800b580:	68fb      	ldr	r3, [r7, #12]
 800b582:	1c59      	adds	r1, r3, #1
 800b584:	60f9      	str	r1, [r7, #12]
 800b586:	7812      	ldrb	r2, [r2, #0]
 800b588:	701a      	strb	r2, [r3, #0]
    while( nn-- )
 800b58a:	79fb      	ldrb	r3, [r7, #7]
 800b58c:	1e5a      	subs	r2, r3, #1
 800b58e:	71fa      	strb	r2, [r7, #7]
 800b590:	2b00      	cmp	r3, #0
 800b592:	d1f2      	bne.n	800b57a <copy_block_nn+0x10>
}
 800b594:	bf00      	nop
 800b596:	bf00      	nop
 800b598:	3714      	adds	r7, #20
 800b59a:	46bd      	mov	sp, r7
 800b59c:	bc80      	pop	{r7}
 800b59e:	4770      	bx	lr

0800b5a0 <xor_block>:

static void xor_block( void *d, const void *s )
{
 800b5a0:	b480      	push	{r7}
 800b5a2:	b083      	sub	sp, #12
 800b5a4:	af00      	add	r7, sp, #0
 800b5a6:	6078      	str	r0, [r7, #4]
 800b5a8:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] ^= ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] ^= ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] ^= ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] ^= ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] ^= ((uint8_t*)s)[ 0];
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	781a      	ldrb	r2, [r3, #0]
 800b5ae:	683b      	ldr	r3, [r7, #0]
 800b5b0:	781b      	ldrb	r3, [r3, #0]
 800b5b2:	4053      	eors	r3, r2
 800b5b4:	b2da      	uxtb	r2, r3
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] ^= ((uint8_t*)s)[ 1];
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	3301      	adds	r3, #1
 800b5be:	7819      	ldrb	r1, [r3, #0]
 800b5c0:	683b      	ldr	r3, [r7, #0]
 800b5c2:	3301      	adds	r3, #1
 800b5c4:	781a      	ldrb	r2, [r3, #0]
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	3301      	adds	r3, #1
 800b5ca:	404a      	eors	r2, r1
 800b5cc:	b2d2      	uxtb	r2, r2
 800b5ce:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] ^= ((uint8_t*)s)[ 2];
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	3302      	adds	r3, #2
 800b5d4:	7819      	ldrb	r1, [r3, #0]
 800b5d6:	683b      	ldr	r3, [r7, #0]
 800b5d8:	3302      	adds	r3, #2
 800b5da:	781a      	ldrb	r2, [r3, #0]
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	3302      	adds	r3, #2
 800b5e0:	404a      	eors	r2, r1
 800b5e2:	b2d2      	uxtb	r2, r2
 800b5e4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] ^= ((uint8_t*)s)[ 3];
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	3303      	adds	r3, #3
 800b5ea:	7819      	ldrb	r1, [r3, #0]
 800b5ec:	683b      	ldr	r3, [r7, #0]
 800b5ee:	3303      	adds	r3, #3
 800b5f0:	781a      	ldrb	r2, [r3, #0]
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	3303      	adds	r3, #3
 800b5f6:	404a      	eors	r2, r1
 800b5f8:	b2d2      	uxtb	r2, r2
 800b5fa:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] ^= ((uint8_t*)s)[ 4];
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	3304      	adds	r3, #4
 800b600:	7819      	ldrb	r1, [r3, #0]
 800b602:	683b      	ldr	r3, [r7, #0]
 800b604:	3304      	adds	r3, #4
 800b606:	781a      	ldrb	r2, [r3, #0]
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	3304      	adds	r3, #4
 800b60c:	404a      	eors	r2, r1
 800b60e:	b2d2      	uxtb	r2, r2
 800b610:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] ^= ((uint8_t*)s)[ 5];
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	3305      	adds	r3, #5
 800b616:	7819      	ldrb	r1, [r3, #0]
 800b618:	683b      	ldr	r3, [r7, #0]
 800b61a:	3305      	adds	r3, #5
 800b61c:	781a      	ldrb	r2, [r3, #0]
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	3305      	adds	r3, #5
 800b622:	404a      	eors	r2, r1
 800b624:	b2d2      	uxtb	r2, r2
 800b626:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] ^= ((uint8_t*)s)[ 6];
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	3306      	adds	r3, #6
 800b62c:	7819      	ldrb	r1, [r3, #0]
 800b62e:	683b      	ldr	r3, [r7, #0]
 800b630:	3306      	adds	r3, #6
 800b632:	781a      	ldrb	r2, [r3, #0]
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	3306      	adds	r3, #6
 800b638:	404a      	eors	r2, r1
 800b63a:	b2d2      	uxtb	r2, r2
 800b63c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] ^= ((uint8_t*)s)[ 7];
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	3307      	adds	r3, #7
 800b642:	7819      	ldrb	r1, [r3, #0]
 800b644:	683b      	ldr	r3, [r7, #0]
 800b646:	3307      	adds	r3, #7
 800b648:	781a      	ldrb	r2, [r3, #0]
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	3307      	adds	r3, #7
 800b64e:	404a      	eors	r2, r1
 800b650:	b2d2      	uxtb	r2, r2
 800b652:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] ^= ((uint8_t*)s)[ 8];
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	3308      	adds	r3, #8
 800b658:	7819      	ldrb	r1, [r3, #0]
 800b65a:	683b      	ldr	r3, [r7, #0]
 800b65c:	3308      	adds	r3, #8
 800b65e:	781a      	ldrb	r2, [r3, #0]
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	3308      	adds	r3, #8
 800b664:	404a      	eors	r2, r1
 800b666:	b2d2      	uxtb	r2, r2
 800b668:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] ^= ((uint8_t*)s)[ 9];
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	3309      	adds	r3, #9
 800b66e:	7819      	ldrb	r1, [r3, #0]
 800b670:	683b      	ldr	r3, [r7, #0]
 800b672:	3309      	adds	r3, #9
 800b674:	781a      	ldrb	r2, [r3, #0]
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	3309      	adds	r3, #9
 800b67a:	404a      	eors	r2, r1
 800b67c:	b2d2      	uxtb	r2, r2
 800b67e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] ^= ((uint8_t*)s)[10];
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	330a      	adds	r3, #10
 800b684:	7819      	ldrb	r1, [r3, #0]
 800b686:	683b      	ldr	r3, [r7, #0]
 800b688:	330a      	adds	r3, #10
 800b68a:	781a      	ldrb	r2, [r3, #0]
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	330a      	adds	r3, #10
 800b690:	404a      	eors	r2, r1
 800b692:	b2d2      	uxtb	r2, r2
 800b694:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] ^= ((uint8_t*)s)[11];
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	330b      	adds	r3, #11
 800b69a:	7819      	ldrb	r1, [r3, #0]
 800b69c:	683b      	ldr	r3, [r7, #0]
 800b69e:	330b      	adds	r3, #11
 800b6a0:	781a      	ldrb	r2, [r3, #0]
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	330b      	adds	r3, #11
 800b6a6:	404a      	eors	r2, r1
 800b6a8:	b2d2      	uxtb	r2, r2
 800b6aa:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] ^= ((uint8_t*)s)[12];
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	330c      	adds	r3, #12
 800b6b0:	7819      	ldrb	r1, [r3, #0]
 800b6b2:	683b      	ldr	r3, [r7, #0]
 800b6b4:	330c      	adds	r3, #12
 800b6b6:	781a      	ldrb	r2, [r3, #0]
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	330c      	adds	r3, #12
 800b6bc:	404a      	eors	r2, r1
 800b6be:	b2d2      	uxtb	r2, r2
 800b6c0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] ^= ((uint8_t*)s)[13];
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	330d      	adds	r3, #13
 800b6c6:	7819      	ldrb	r1, [r3, #0]
 800b6c8:	683b      	ldr	r3, [r7, #0]
 800b6ca:	330d      	adds	r3, #13
 800b6cc:	781a      	ldrb	r2, [r3, #0]
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	330d      	adds	r3, #13
 800b6d2:	404a      	eors	r2, r1
 800b6d4:	b2d2      	uxtb	r2, r2
 800b6d6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] ^= ((uint8_t*)s)[14];
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	330e      	adds	r3, #14
 800b6dc:	7819      	ldrb	r1, [r3, #0]
 800b6de:	683b      	ldr	r3, [r7, #0]
 800b6e0:	330e      	adds	r3, #14
 800b6e2:	781a      	ldrb	r2, [r3, #0]
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	330e      	adds	r3, #14
 800b6e8:	404a      	eors	r2, r1
 800b6ea:	b2d2      	uxtb	r2, r2
 800b6ec:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] ^= ((uint8_t*)s)[15];
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	330f      	adds	r3, #15
 800b6f2:	7819      	ldrb	r1, [r3, #0]
 800b6f4:	683b      	ldr	r3, [r7, #0]
 800b6f6:	330f      	adds	r3, #15
 800b6f8:	781a      	ldrb	r2, [r3, #0]
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	330f      	adds	r3, #15
 800b6fe:	404a      	eors	r2, r1
 800b700:	b2d2      	uxtb	r2, r2
 800b702:	701a      	strb	r2, [r3, #0]
#endif
}
 800b704:	bf00      	nop
 800b706:	370c      	adds	r7, #12
 800b708:	46bd      	mov	sp, r7
 800b70a:	bc80      	pop	{r7}
 800b70c:	4770      	bx	lr

0800b70e <copy_and_key>:

static void copy_and_key( void *d, const void *s, const void *k )
{
 800b70e:	b480      	push	{r7}
 800b710:	b085      	sub	sp, #20
 800b712:	af00      	add	r7, sp, #0
 800b714:	60f8      	str	r0, [r7, #12]
 800b716:	60b9      	str	r1, [r7, #8]
 800b718:	607a      	str	r2, [r7, #4]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0] ^ ((uint32_t*)k)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1] ^ ((uint32_t*)k)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2] ^ ((uint32_t*)k)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3] ^ ((uint32_t*)k)[ 3];
#elif 1
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0] ^ ((uint8_t*)k)[ 0];
 800b71a:	68bb      	ldr	r3, [r7, #8]
 800b71c:	781a      	ldrb	r2, [r3, #0]
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	781b      	ldrb	r3, [r3, #0]
 800b722:	4053      	eors	r3, r2
 800b724:	b2da      	uxtb	r2, r3
 800b726:	68fb      	ldr	r3, [r7, #12]
 800b728:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1] ^ ((uint8_t*)k)[ 1];
 800b72a:	68bb      	ldr	r3, [r7, #8]
 800b72c:	3301      	adds	r3, #1
 800b72e:	7819      	ldrb	r1, [r3, #0]
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	3301      	adds	r3, #1
 800b734:	781a      	ldrb	r2, [r3, #0]
 800b736:	68fb      	ldr	r3, [r7, #12]
 800b738:	3301      	adds	r3, #1
 800b73a:	404a      	eors	r2, r1
 800b73c:	b2d2      	uxtb	r2, r2
 800b73e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2] ^ ((uint8_t*)k)[ 2];
 800b740:	68bb      	ldr	r3, [r7, #8]
 800b742:	3302      	adds	r3, #2
 800b744:	7819      	ldrb	r1, [r3, #0]
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	3302      	adds	r3, #2
 800b74a:	781a      	ldrb	r2, [r3, #0]
 800b74c:	68fb      	ldr	r3, [r7, #12]
 800b74e:	3302      	adds	r3, #2
 800b750:	404a      	eors	r2, r1
 800b752:	b2d2      	uxtb	r2, r2
 800b754:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3] ^ ((uint8_t*)k)[ 3];
 800b756:	68bb      	ldr	r3, [r7, #8]
 800b758:	3303      	adds	r3, #3
 800b75a:	7819      	ldrb	r1, [r3, #0]
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	3303      	adds	r3, #3
 800b760:	781a      	ldrb	r2, [r3, #0]
 800b762:	68fb      	ldr	r3, [r7, #12]
 800b764:	3303      	adds	r3, #3
 800b766:	404a      	eors	r2, r1
 800b768:	b2d2      	uxtb	r2, r2
 800b76a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4] ^ ((uint8_t*)k)[ 4];
 800b76c:	68bb      	ldr	r3, [r7, #8]
 800b76e:	3304      	adds	r3, #4
 800b770:	7819      	ldrb	r1, [r3, #0]
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	3304      	adds	r3, #4
 800b776:	781a      	ldrb	r2, [r3, #0]
 800b778:	68fb      	ldr	r3, [r7, #12]
 800b77a:	3304      	adds	r3, #4
 800b77c:	404a      	eors	r2, r1
 800b77e:	b2d2      	uxtb	r2, r2
 800b780:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5] ^ ((uint8_t*)k)[ 5];
 800b782:	68bb      	ldr	r3, [r7, #8]
 800b784:	3305      	adds	r3, #5
 800b786:	7819      	ldrb	r1, [r3, #0]
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	3305      	adds	r3, #5
 800b78c:	781a      	ldrb	r2, [r3, #0]
 800b78e:	68fb      	ldr	r3, [r7, #12]
 800b790:	3305      	adds	r3, #5
 800b792:	404a      	eors	r2, r1
 800b794:	b2d2      	uxtb	r2, r2
 800b796:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6] ^ ((uint8_t*)k)[ 6];
 800b798:	68bb      	ldr	r3, [r7, #8]
 800b79a:	3306      	adds	r3, #6
 800b79c:	7819      	ldrb	r1, [r3, #0]
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	3306      	adds	r3, #6
 800b7a2:	781a      	ldrb	r2, [r3, #0]
 800b7a4:	68fb      	ldr	r3, [r7, #12]
 800b7a6:	3306      	adds	r3, #6
 800b7a8:	404a      	eors	r2, r1
 800b7aa:	b2d2      	uxtb	r2, r2
 800b7ac:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7] ^ ((uint8_t*)k)[ 7];
 800b7ae:	68bb      	ldr	r3, [r7, #8]
 800b7b0:	3307      	adds	r3, #7
 800b7b2:	7819      	ldrb	r1, [r3, #0]
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	3307      	adds	r3, #7
 800b7b8:	781a      	ldrb	r2, [r3, #0]
 800b7ba:	68fb      	ldr	r3, [r7, #12]
 800b7bc:	3307      	adds	r3, #7
 800b7be:	404a      	eors	r2, r1
 800b7c0:	b2d2      	uxtb	r2, r2
 800b7c2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8] ^ ((uint8_t*)k)[ 8];
 800b7c4:	68bb      	ldr	r3, [r7, #8]
 800b7c6:	3308      	adds	r3, #8
 800b7c8:	7819      	ldrb	r1, [r3, #0]
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	3308      	adds	r3, #8
 800b7ce:	781a      	ldrb	r2, [r3, #0]
 800b7d0:	68fb      	ldr	r3, [r7, #12]
 800b7d2:	3308      	adds	r3, #8
 800b7d4:	404a      	eors	r2, r1
 800b7d6:	b2d2      	uxtb	r2, r2
 800b7d8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9] ^ ((uint8_t*)k)[ 9];
 800b7da:	68bb      	ldr	r3, [r7, #8]
 800b7dc:	3309      	adds	r3, #9
 800b7de:	7819      	ldrb	r1, [r3, #0]
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	3309      	adds	r3, #9
 800b7e4:	781a      	ldrb	r2, [r3, #0]
 800b7e6:	68fb      	ldr	r3, [r7, #12]
 800b7e8:	3309      	adds	r3, #9
 800b7ea:	404a      	eors	r2, r1
 800b7ec:	b2d2      	uxtb	r2, r2
 800b7ee:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10] ^ ((uint8_t*)k)[10];
 800b7f0:	68bb      	ldr	r3, [r7, #8]
 800b7f2:	330a      	adds	r3, #10
 800b7f4:	7819      	ldrb	r1, [r3, #0]
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	330a      	adds	r3, #10
 800b7fa:	781a      	ldrb	r2, [r3, #0]
 800b7fc:	68fb      	ldr	r3, [r7, #12]
 800b7fe:	330a      	adds	r3, #10
 800b800:	404a      	eors	r2, r1
 800b802:	b2d2      	uxtb	r2, r2
 800b804:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11] ^ ((uint8_t*)k)[11];
 800b806:	68bb      	ldr	r3, [r7, #8]
 800b808:	330b      	adds	r3, #11
 800b80a:	7819      	ldrb	r1, [r3, #0]
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	330b      	adds	r3, #11
 800b810:	781a      	ldrb	r2, [r3, #0]
 800b812:	68fb      	ldr	r3, [r7, #12]
 800b814:	330b      	adds	r3, #11
 800b816:	404a      	eors	r2, r1
 800b818:	b2d2      	uxtb	r2, r2
 800b81a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12] ^ ((uint8_t*)k)[12];
 800b81c:	68bb      	ldr	r3, [r7, #8]
 800b81e:	330c      	adds	r3, #12
 800b820:	7819      	ldrb	r1, [r3, #0]
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	330c      	adds	r3, #12
 800b826:	781a      	ldrb	r2, [r3, #0]
 800b828:	68fb      	ldr	r3, [r7, #12]
 800b82a:	330c      	adds	r3, #12
 800b82c:	404a      	eors	r2, r1
 800b82e:	b2d2      	uxtb	r2, r2
 800b830:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13] ^ ((uint8_t*)k)[13];
 800b832:	68bb      	ldr	r3, [r7, #8]
 800b834:	330d      	adds	r3, #13
 800b836:	7819      	ldrb	r1, [r3, #0]
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	330d      	adds	r3, #13
 800b83c:	781a      	ldrb	r2, [r3, #0]
 800b83e:	68fb      	ldr	r3, [r7, #12]
 800b840:	330d      	adds	r3, #13
 800b842:	404a      	eors	r2, r1
 800b844:	b2d2      	uxtb	r2, r2
 800b846:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14] ^ ((uint8_t*)k)[14];
 800b848:	68bb      	ldr	r3, [r7, #8]
 800b84a:	330e      	adds	r3, #14
 800b84c:	7819      	ldrb	r1, [r3, #0]
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	330e      	adds	r3, #14
 800b852:	781a      	ldrb	r2, [r3, #0]
 800b854:	68fb      	ldr	r3, [r7, #12]
 800b856:	330e      	adds	r3, #14
 800b858:	404a      	eors	r2, r1
 800b85a:	b2d2      	uxtb	r2, r2
 800b85c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15] ^ ((uint8_t*)k)[15];
 800b85e:	68bb      	ldr	r3, [r7, #8]
 800b860:	330f      	adds	r3, #15
 800b862:	7819      	ldrb	r1, [r3, #0]
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	330f      	adds	r3, #15
 800b868:	781a      	ldrb	r2, [r3, #0]
 800b86a:	68fb      	ldr	r3, [r7, #12]
 800b86c:	330f      	adds	r3, #15
 800b86e:	404a      	eors	r2, r1
 800b870:	b2d2      	uxtb	r2, r2
 800b872:	701a      	strb	r2, [r3, #0]
#else
    block_copy(d, s);
    xor_block(d, k);
#endif
}
 800b874:	bf00      	nop
 800b876:	3714      	adds	r7, #20
 800b878:	46bd      	mov	sp, r7
 800b87a:	bc80      	pop	{r7}
 800b87c:	4770      	bx	lr

0800b87e <add_round_key>:

static void add_round_key( uint8_t d[N_BLOCK], const uint8_t k[N_BLOCK] )
{
 800b87e:	b580      	push	{r7, lr}
 800b880:	b082      	sub	sp, #8
 800b882:	af00      	add	r7, sp, #0
 800b884:	6078      	str	r0, [r7, #4]
 800b886:	6039      	str	r1, [r7, #0]
    xor_block(d, k);
 800b888:	6839      	ldr	r1, [r7, #0]
 800b88a:	6878      	ldr	r0, [r7, #4]
 800b88c:	f7ff fe88 	bl	800b5a0 <xor_block>
}
 800b890:	bf00      	nop
 800b892:	3708      	adds	r7, #8
 800b894:	46bd      	mov	sp, r7
 800b896:	bd80      	pop	{r7, pc}

0800b898 <shift_sub_rows>:

static void shift_sub_rows( uint8_t st[N_BLOCK] )
{   uint8_t tt;
 800b898:	b480      	push	{r7}
 800b89a:	b085      	sub	sp, #20
 800b89c:	af00      	add	r7, sp, #0
 800b89e:	6078      	str	r0, [r7, #4]

    st[ 0] = s_box(st[ 0]); st[ 4] = s_box(st[ 4]);
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	781b      	ldrb	r3, [r3, #0]
 800b8a4:	461a      	mov	r2, r3
 800b8a6:	4b48      	ldr	r3, [pc, #288]	@ (800b9c8 <shift_sub_rows+0x130>)
 800b8a8:	5c9a      	ldrb	r2, [r3, r2]
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	701a      	strb	r2, [r3, #0]
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	3304      	adds	r3, #4
 800b8b2:	781b      	ldrb	r3, [r3, #0]
 800b8b4:	4619      	mov	r1, r3
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	3304      	adds	r3, #4
 800b8ba:	4a43      	ldr	r2, [pc, #268]	@ (800b9c8 <shift_sub_rows+0x130>)
 800b8bc:	5c52      	ldrb	r2, [r2, r1]
 800b8be:	701a      	strb	r2, [r3, #0]
    st[ 8] = s_box(st[ 8]); st[12] = s_box(st[12]);
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	3308      	adds	r3, #8
 800b8c4:	781b      	ldrb	r3, [r3, #0]
 800b8c6:	4619      	mov	r1, r3
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	3308      	adds	r3, #8
 800b8cc:	4a3e      	ldr	r2, [pc, #248]	@ (800b9c8 <shift_sub_rows+0x130>)
 800b8ce:	5c52      	ldrb	r2, [r2, r1]
 800b8d0:	701a      	strb	r2, [r3, #0]
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	330c      	adds	r3, #12
 800b8d6:	781b      	ldrb	r3, [r3, #0]
 800b8d8:	4619      	mov	r1, r3
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	330c      	adds	r3, #12
 800b8de:	4a3a      	ldr	r2, [pc, #232]	@ (800b9c8 <shift_sub_rows+0x130>)
 800b8e0:	5c52      	ldrb	r2, [r2, r1]
 800b8e2:	701a      	strb	r2, [r3, #0]

    tt = st[1]; st[ 1] = s_box(st[ 5]); st[ 5] = s_box(st[ 9]);
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	785b      	ldrb	r3, [r3, #1]
 800b8e8:	73fb      	strb	r3, [r7, #15]
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	3305      	adds	r3, #5
 800b8ee:	781b      	ldrb	r3, [r3, #0]
 800b8f0:	4619      	mov	r1, r3
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	3301      	adds	r3, #1
 800b8f6:	4a34      	ldr	r2, [pc, #208]	@ (800b9c8 <shift_sub_rows+0x130>)
 800b8f8:	5c52      	ldrb	r2, [r2, r1]
 800b8fa:	701a      	strb	r2, [r3, #0]
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	3309      	adds	r3, #9
 800b900:	781b      	ldrb	r3, [r3, #0]
 800b902:	4619      	mov	r1, r3
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	3305      	adds	r3, #5
 800b908:	4a2f      	ldr	r2, [pc, #188]	@ (800b9c8 <shift_sub_rows+0x130>)
 800b90a:	5c52      	ldrb	r2, [r2, r1]
 800b90c:	701a      	strb	r2, [r3, #0]
    st[ 9] = s_box(st[13]); st[13] = s_box( tt );
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	330d      	adds	r3, #13
 800b912:	781b      	ldrb	r3, [r3, #0]
 800b914:	4619      	mov	r1, r3
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	3309      	adds	r3, #9
 800b91a:	4a2b      	ldr	r2, [pc, #172]	@ (800b9c8 <shift_sub_rows+0x130>)
 800b91c:	5c52      	ldrb	r2, [r2, r1]
 800b91e:	701a      	strb	r2, [r3, #0]
 800b920:	7bfa      	ldrb	r2, [r7, #15]
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	330d      	adds	r3, #13
 800b926:	4928      	ldr	r1, [pc, #160]	@ (800b9c8 <shift_sub_rows+0x130>)
 800b928:	5c8a      	ldrb	r2, [r1, r2]
 800b92a:	701a      	strb	r2, [r3, #0]

    tt = st[2]; st[ 2] = s_box(st[10]); st[10] = s_box( tt );
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	789b      	ldrb	r3, [r3, #2]
 800b930:	73fb      	strb	r3, [r7, #15]
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	330a      	adds	r3, #10
 800b936:	781b      	ldrb	r3, [r3, #0]
 800b938:	4619      	mov	r1, r3
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	3302      	adds	r3, #2
 800b93e:	4a22      	ldr	r2, [pc, #136]	@ (800b9c8 <shift_sub_rows+0x130>)
 800b940:	5c52      	ldrb	r2, [r2, r1]
 800b942:	701a      	strb	r2, [r3, #0]
 800b944:	7bfa      	ldrb	r2, [r7, #15]
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	330a      	adds	r3, #10
 800b94a:	491f      	ldr	r1, [pc, #124]	@ (800b9c8 <shift_sub_rows+0x130>)
 800b94c:	5c8a      	ldrb	r2, [r1, r2]
 800b94e:	701a      	strb	r2, [r3, #0]
    tt = st[6]; st[ 6] = s_box(st[14]); st[14] = s_box( tt );
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	799b      	ldrb	r3, [r3, #6]
 800b954:	73fb      	strb	r3, [r7, #15]
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	330e      	adds	r3, #14
 800b95a:	781b      	ldrb	r3, [r3, #0]
 800b95c:	4619      	mov	r1, r3
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	3306      	adds	r3, #6
 800b962:	4a19      	ldr	r2, [pc, #100]	@ (800b9c8 <shift_sub_rows+0x130>)
 800b964:	5c52      	ldrb	r2, [r2, r1]
 800b966:	701a      	strb	r2, [r3, #0]
 800b968:	7bfa      	ldrb	r2, [r7, #15]
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	330e      	adds	r3, #14
 800b96e:	4916      	ldr	r1, [pc, #88]	@ (800b9c8 <shift_sub_rows+0x130>)
 800b970:	5c8a      	ldrb	r2, [r1, r2]
 800b972:	701a      	strb	r2, [r3, #0]

    tt = st[15]; st[15] = s_box(st[11]); st[11] = s_box(st[ 7]);
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	7bdb      	ldrb	r3, [r3, #15]
 800b978:	73fb      	strb	r3, [r7, #15]
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	330b      	adds	r3, #11
 800b97e:	781b      	ldrb	r3, [r3, #0]
 800b980:	4619      	mov	r1, r3
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	330f      	adds	r3, #15
 800b986:	4a10      	ldr	r2, [pc, #64]	@ (800b9c8 <shift_sub_rows+0x130>)
 800b988:	5c52      	ldrb	r2, [r2, r1]
 800b98a:	701a      	strb	r2, [r3, #0]
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	3307      	adds	r3, #7
 800b990:	781b      	ldrb	r3, [r3, #0]
 800b992:	4619      	mov	r1, r3
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	330b      	adds	r3, #11
 800b998:	4a0b      	ldr	r2, [pc, #44]	@ (800b9c8 <shift_sub_rows+0x130>)
 800b99a:	5c52      	ldrb	r2, [r2, r1]
 800b99c:	701a      	strb	r2, [r3, #0]
    st[ 7] = s_box(st[ 3]); st[ 3] = s_box( tt );
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	3303      	adds	r3, #3
 800b9a2:	781b      	ldrb	r3, [r3, #0]
 800b9a4:	4619      	mov	r1, r3
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	3307      	adds	r3, #7
 800b9aa:	4a07      	ldr	r2, [pc, #28]	@ (800b9c8 <shift_sub_rows+0x130>)
 800b9ac:	5c52      	ldrb	r2, [r2, r1]
 800b9ae:	701a      	strb	r2, [r3, #0]
 800b9b0:	7bfa      	ldrb	r2, [r7, #15]
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	3303      	adds	r3, #3
 800b9b6:	4904      	ldr	r1, [pc, #16]	@ (800b9c8 <shift_sub_rows+0x130>)
 800b9b8:	5c8a      	ldrb	r2, [r1, r2]
 800b9ba:	701a      	strb	r2, [r3, #0]
}
 800b9bc:	bf00      	nop
 800b9be:	3714      	adds	r7, #20
 800b9c0:	46bd      	mov	sp, r7
 800b9c2:	bc80      	pop	{r7}
 800b9c4:	4770      	bx	lr
 800b9c6:	bf00      	nop
 800b9c8:	0801f4a4 	.word	0x0801f4a4

0800b9cc <mix_sub_columns>:

#endif

#if defined( VERSION_1 )
  static void mix_sub_columns( uint8_t dt[N_BLOCK] )
  { uint8_t st[N_BLOCK];
 800b9cc:	b580      	push	{r7, lr}
 800b9ce:	b086      	sub	sp, #24
 800b9d0:	af00      	add	r7, sp, #0
 800b9d2:	6078      	str	r0, [r7, #4]
    block_copy(st, dt);
 800b9d4:	f107 0308 	add.w	r3, r7, #8
 800b9d8:	6879      	ldr	r1, [r7, #4]
 800b9da:	4618      	mov	r0, r3
 800b9dc:	f7ff fd6c 	bl	800b4b8 <copy_block>
#else
  static void mix_sub_columns( uint8_t dt[N_BLOCK], uint8_t st[N_BLOCK] )
  {
#endif
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 800b9e0:	7a3b      	ldrb	r3, [r7, #8]
 800b9e2:	461a      	mov	r2, r3
 800b9e4:	4b9a      	ldr	r3, [pc, #616]	@ (800bc50 <mix_sub_columns+0x284>)
 800b9e6:	5c9a      	ldrb	r2, [r3, r2]
 800b9e8:	7b7b      	ldrb	r3, [r7, #13]
 800b9ea:	4619      	mov	r1, r3
 800b9ec:	4b99      	ldr	r3, [pc, #612]	@ (800bc54 <mix_sub_columns+0x288>)
 800b9ee:	5c5b      	ldrb	r3, [r3, r1]
 800b9f0:	4053      	eors	r3, r2
 800b9f2:	b2da      	uxtb	r2, r3
 800b9f4:	7cbb      	ldrb	r3, [r7, #18]
 800b9f6:	4619      	mov	r1, r3
 800b9f8:	4b97      	ldr	r3, [pc, #604]	@ (800bc58 <mix_sub_columns+0x28c>)
 800b9fa:	5c5b      	ldrb	r3, [r3, r1]
 800b9fc:	4053      	eors	r3, r2
 800b9fe:	b2da      	uxtb	r2, r3
 800ba00:	7dfb      	ldrb	r3, [r7, #23]
 800ba02:	4619      	mov	r1, r3
 800ba04:	4b94      	ldr	r3, [pc, #592]	@ (800bc58 <mix_sub_columns+0x28c>)
 800ba06:	5c5b      	ldrb	r3, [r3, r1]
 800ba08:	4053      	eors	r3, r2
 800ba0a:	b2da      	uxtb	r2, r3
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	701a      	strb	r2, [r3, #0]
    dt[ 1] = s_box(st[0]) ^ gfm2_sb(st[5]) ^ gfm3_sb(st[10]) ^ s_box(st[15]);
 800ba10:	7a3b      	ldrb	r3, [r7, #8]
 800ba12:	461a      	mov	r2, r3
 800ba14:	4b90      	ldr	r3, [pc, #576]	@ (800bc58 <mix_sub_columns+0x28c>)
 800ba16:	5c9a      	ldrb	r2, [r3, r2]
 800ba18:	7b7b      	ldrb	r3, [r7, #13]
 800ba1a:	4619      	mov	r1, r3
 800ba1c:	4b8c      	ldr	r3, [pc, #560]	@ (800bc50 <mix_sub_columns+0x284>)
 800ba1e:	5c5b      	ldrb	r3, [r3, r1]
 800ba20:	4053      	eors	r3, r2
 800ba22:	b2da      	uxtb	r2, r3
 800ba24:	7cbb      	ldrb	r3, [r7, #18]
 800ba26:	4619      	mov	r1, r3
 800ba28:	4b8a      	ldr	r3, [pc, #552]	@ (800bc54 <mix_sub_columns+0x288>)
 800ba2a:	5c5b      	ldrb	r3, [r3, r1]
 800ba2c:	4053      	eors	r3, r2
 800ba2e:	b2d9      	uxtb	r1, r3
 800ba30:	7dfb      	ldrb	r3, [r7, #23]
 800ba32:	461a      	mov	r2, r3
 800ba34:	4b88      	ldr	r3, [pc, #544]	@ (800bc58 <mix_sub_columns+0x28c>)
 800ba36:	5c9a      	ldrb	r2, [r3, r2]
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	3301      	adds	r3, #1
 800ba3c:	404a      	eors	r2, r1
 800ba3e:	b2d2      	uxtb	r2, r2
 800ba40:	701a      	strb	r2, [r3, #0]
    dt[ 2] = s_box(st[0]) ^ s_box(st[5]) ^ gfm2_sb(st[10]) ^ gfm3_sb(st[15]);
 800ba42:	7a3b      	ldrb	r3, [r7, #8]
 800ba44:	461a      	mov	r2, r3
 800ba46:	4b84      	ldr	r3, [pc, #528]	@ (800bc58 <mix_sub_columns+0x28c>)
 800ba48:	5c9a      	ldrb	r2, [r3, r2]
 800ba4a:	7b7b      	ldrb	r3, [r7, #13]
 800ba4c:	4619      	mov	r1, r3
 800ba4e:	4b82      	ldr	r3, [pc, #520]	@ (800bc58 <mix_sub_columns+0x28c>)
 800ba50:	5c5b      	ldrb	r3, [r3, r1]
 800ba52:	4053      	eors	r3, r2
 800ba54:	b2da      	uxtb	r2, r3
 800ba56:	7cbb      	ldrb	r3, [r7, #18]
 800ba58:	4619      	mov	r1, r3
 800ba5a:	4b7d      	ldr	r3, [pc, #500]	@ (800bc50 <mix_sub_columns+0x284>)
 800ba5c:	5c5b      	ldrb	r3, [r3, r1]
 800ba5e:	4053      	eors	r3, r2
 800ba60:	b2d9      	uxtb	r1, r3
 800ba62:	7dfb      	ldrb	r3, [r7, #23]
 800ba64:	461a      	mov	r2, r3
 800ba66:	4b7b      	ldr	r3, [pc, #492]	@ (800bc54 <mix_sub_columns+0x288>)
 800ba68:	5c9a      	ldrb	r2, [r3, r2]
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	3302      	adds	r3, #2
 800ba6e:	404a      	eors	r2, r1
 800ba70:	b2d2      	uxtb	r2, r2
 800ba72:	701a      	strb	r2, [r3, #0]
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
 800ba74:	7a3b      	ldrb	r3, [r7, #8]
 800ba76:	461a      	mov	r2, r3
 800ba78:	4b76      	ldr	r3, [pc, #472]	@ (800bc54 <mix_sub_columns+0x288>)
 800ba7a:	5c9a      	ldrb	r2, [r3, r2]
 800ba7c:	7b7b      	ldrb	r3, [r7, #13]
 800ba7e:	4619      	mov	r1, r3
 800ba80:	4b75      	ldr	r3, [pc, #468]	@ (800bc58 <mix_sub_columns+0x28c>)
 800ba82:	5c5b      	ldrb	r3, [r3, r1]
 800ba84:	4053      	eors	r3, r2
 800ba86:	b2da      	uxtb	r2, r3
 800ba88:	7cbb      	ldrb	r3, [r7, #18]
 800ba8a:	4619      	mov	r1, r3
 800ba8c:	4b72      	ldr	r3, [pc, #456]	@ (800bc58 <mix_sub_columns+0x28c>)
 800ba8e:	5c5b      	ldrb	r3, [r3, r1]
 800ba90:	4053      	eors	r3, r2
 800ba92:	b2d9      	uxtb	r1, r3
 800ba94:	7dfb      	ldrb	r3, [r7, #23]
 800ba96:	461a      	mov	r2, r3
 800ba98:	4b6d      	ldr	r3, [pc, #436]	@ (800bc50 <mix_sub_columns+0x284>)
 800ba9a:	5c9a      	ldrb	r2, [r3, r2]
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	3303      	adds	r3, #3
 800baa0:	404a      	eors	r2, r1
 800baa2:	b2d2      	uxtb	r2, r2
 800baa4:	701a      	strb	r2, [r3, #0]

    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 800baa6:	7b3b      	ldrb	r3, [r7, #12]
 800baa8:	461a      	mov	r2, r3
 800baaa:	4b69      	ldr	r3, [pc, #420]	@ (800bc50 <mix_sub_columns+0x284>)
 800baac:	5c9a      	ldrb	r2, [r3, r2]
 800baae:	7c7b      	ldrb	r3, [r7, #17]
 800bab0:	4619      	mov	r1, r3
 800bab2:	4b68      	ldr	r3, [pc, #416]	@ (800bc54 <mix_sub_columns+0x288>)
 800bab4:	5c5b      	ldrb	r3, [r3, r1]
 800bab6:	4053      	eors	r3, r2
 800bab8:	b2da      	uxtb	r2, r3
 800baba:	7dbb      	ldrb	r3, [r7, #22]
 800babc:	4619      	mov	r1, r3
 800babe:	4b66      	ldr	r3, [pc, #408]	@ (800bc58 <mix_sub_columns+0x28c>)
 800bac0:	5c5b      	ldrb	r3, [r3, r1]
 800bac2:	4053      	eors	r3, r2
 800bac4:	b2d9      	uxtb	r1, r3
 800bac6:	7afb      	ldrb	r3, [r7, #11]
 800bac8:	461a      	mov	r2, r3
 800baca:	4b63      	ldr	r3, [pc, #396]	@ (800bc58 <mix_sub_columns+0x28c>)
 800bacc:	5c9a      	ldrb	r2, [r3, r2]
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	3304      	adds	r3, #4
 800bad2:	404a      	eors	r2, r1
 800bad4:	b2d2      	uxtb	r2, r2
 800bad6:	701a      	strb	r2, [r3, #0]
    dt[ 5] = s_box(st[4]) ^ gfm2_sb(st[9]) ^ gfm3_sb(st[14]) ^ s_box(st[3]);
 800bad8:	7b3b      	ldrb	r3, [r7, #12]
 800bada:	461a      	mov	r2, r3
 800badc:	4b5e      	ldr	r3, [pc, #376]	@ (800bc58 <mix_sub_columns+0x28c>)
 800bade:	5c9a      	ldrb	r2, [r3, r2]
 800bae0:	7c7b      	ldrb	r3, [r7, #17]
 800bae2:	4619      	mov	r1, r3
 800bae4:	4b5a      	ldr	r3, [pc, #360]	@ (800bc50 <mix_sub_columns+0x284>)
 800bae6:	5c5b      	ldrb	r3, [r3, r1]
 800bae8:	4053      	eors	r3, r2
 800baea:	b2da      	uxtb	r2, r3
 800baec:	7dbb      	ldrb	r3, [r7, #22]
 800baee:	4619      	mov	r1, r3
 800baf0:	4b58      	ldr	r3, [pc, #352]	@ (800bc54 <mix_sub_columns+0x288>)
 800baf2:	5c5b      	ldrb	r3, [r3, r1]
 800baf4:	4053      	eors	r3, r2
 800baf6:	b2d9      	uxtb	r1, r3
 800baf8:	7afb      	ldrb	r3, [r7, #11]
 800bafa:	461a      	mov	r2, r3
 800bafc:	4b56      	ldr	r3, [pc, #344]	@ (800bc58 <mix_sub_columns+0x28c>)
 800bafe:	5c9a      	ldrb	r2, [r3, r2]
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	3305      	adds	r3, #5
 800bb04:	404a      	eors	r2, r1
 800bb06:	b2d2      	uxtb	r2, r2
 800bb08:	701a      	strb	r2, [r3, #0]
    dt[ 6] = s_box(st[4]) ^ s_box(st[9]) ^ gfm2_sb(st[14]) ^ gfm3_sb(st[3]);
 800bb0a:	7b3b      	ldrb	r3, [r7, #12]
 800bb0c:	461a      	mov	r2, r3
 800bb0e:	4b52      	ldr	r3, [pc, #328]	@ (800bc58 <mix_sub_columns+0x28c>)
 800bb10:	5c9a      	ldrb	r2, [r3, r2]
 800bb12:	7c7b      	ldrb	r3, [r7, #17]
 800bb14:	4619      	mov	r1, r3
 800bb16:	4b50      	ldr	r3, [pc, #320]	@ (800bc58 <mix_sub_columns+0x28c>)
 800bb18:	5c5b      	ldrb	r3, [r3, r1]
 800bb1a:	4053      	eors	r3, r2
 800bb1c:	b2da      	uxtb	r2, r3
 800bb1e:	7dbb      	ldrb	r3, [r7, #22]
 800bb20:	4619      	mov	r1, r3
 800bb22:	4b4b      	ldr	r3, [pc, #300]	@ (800bc50 <mix_sub_columns+0x284>)
 800bb24:	5c5b      	ldrb	r3, [r3, r1]
 800bb26:	4053      	eors	r3, r2
 800bb28:	b2d9      	uxtb	r1, r3
 800bb2a:	7afb      	ldrb	r3, [r7, #11]
 800bb2c:	461a      	mov	r2, r3
 800bb2e:	4b49      	ldr	r3, [pc, #292]	@ (800bc54 <mix_sub_columns+0x288>)
 800bb30:	5c9a      	ldrb	r2, [r3, r2]
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	3306      	adds	r3, #6
 800bb36:	404a      	eors	r2, r1
 800bb38:	b2d2      	uxtb	r2, r2
 800bb3a:	701a      	strb	r2, [r3, #0]
    dt[ 7] = gfm3_sb(st[4]) ^ s_box(st[9]) ^ s_box(st[14]) ^ gfm2_sb(st[3]);
 800bb3c:	7b3b      	ldrb	r3, [r7, #12]
 800bb3e:	461a      	mov	r2, r3
 800bb40:	4b44      	ldr	r3, [pc, #272]	@ (800bc54 <mix_sub_columns+0x288>)
 800bb42:	5c9a      	ldrb	r2, [r3, r2]
 800bb44:	7c7b      	ldrb	r3, [r7, #17]
 800bb46:	4619      	mov	r1, r3
 800bb48:	4b43      	ldr	r3, [pc, #268]	@ (800bc58 <mix_sub_columns+0x28c>)
 800bb4a:	5c5b      	ldrb	r3, [r3, r1]
 800bb4c:	4053      	eors	r3, r2
 800bb4e:	b2da      	uxtb	r2, r3
 800bb50:	7dbb      	ldrb	r3, [r7, #22]
 800bb52:	4619      	mov	r1, r3
 800bb54:	4b40      	ldr	r3, [pc, #256]	@ (800bc58 <mix_sub_columns+0x28c>)
 800bb56:	5c5b      	ldrb	r3, [r3, r1]
 800bb58:	4053      	eors	r3, r2
 800bb5a:	b2d9      	uxtb	r1, r3
 800bb5c:	7afb      	ldrb	r3, [r7, #11]
 800bb5e:	461a      	mov	r2, r3
 800bb60:	4b3b      	ldr	r3, [pc, #236]	@ (800bc50 <mix_sub_columns+0x284>)
 800bb62:	5c9a      	ldrb	r2, [r3, r2]
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	3307      	adds	r3, #7
 800bb68:	404a      	eors	r2, r1
 800bb6a:	b2d2      	uxtb	r2, r2
 800bb6c:	701a      	strb	r2, [r3, #0]

    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
 800bb6e:	7c3b      	ldrb	r3, [r7, #16]
 800bb70:	461a      	mov	r2, r3
 800bb72:	4b37      	ldr	r3, [pc, #220]	@ (800bc50 <mix_sub_columns+0x284>)
 800bb74:	5c9a      	ldrb	r2, [r3, r2]
 800bb76:	7d7b      	ldrb	r3, [r7, #21]
 800bb78:	4619      	mov	r1, r3
 800bb7a:	4b36      	ldr	r3, [pc, #216]	@ (800bc54 <mix_sub_columns+0x288>)
 800bb7c:	5c5b      	ldrb	r3, [r3, r1]
 800bb7e:	4053      	eors	r3, r2
 800bb80:	b2da      	uxtb	r2, r3
 800bb82:	7abb      	ldrb	r3, [r7, #10]
 800bb84:	4619      	mov	r1, r3
 800bb86:	4b34      	ldr	r3, [pc, #208]	@ (800bc58 <mix_sub_columns+0x28c>)
 800bb88:	5c5b      	ldrb	r3, [r3, r1]
 800bb8a:	4053      	eors	r3, r2
 800bb8c:	b2d9      	uxtb	r1, r3
 800bb8e:	7bfb      	ldrb	r3, [r7, #15]
 800bb90:	461a      	mov	r2, r3
 800bb92:	4b31      	ldr	r3, [pc, #196]	@ (800bc58 <mix_sub_columns+0x28c>)
 800bb94:	5c9a      	ldrb	r2, [r3, r2]
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	3308      	adds	r3, #8
 800bb9a:	404a      	eors	r2, r1
 800bb9c:	b2d2      	uxtb	r2, r2
 800bb9e:	701a      	strb	r2, [r3, #0]
    dt[ 9] = s_box(st[8]) ^ gfm2_sb(st[13]) ^ gfm3_sb(st[2]) ^ s_box(st[7]);
 800bba0:	7c3b      	ldrb	r3, [r7, #16]
 800bba2:	461a      	mov	r2, r3
 800bba4:	4b2c      	ldr	r3, [pc, #176]	@ (800bc58 <mix_sub_columns+0x28c>)
 800bba6:	5c9a      	ldrb	r2, [r3, r2]
 800bba8:	7d7b      	ldrb	r3, [r7, #21]
 800bbaa:	4619      	mov	r1, r3
 800bbac:	4b28      	ldr	r3, [pc, #160]	@ (800bc50 <mix_sub_columns+0x284>)
 800bbae:	5c5b      	ldrb	r3, [r3, r1]
 800bbb0:	4053      	eors	r3, r2
 800bbb2:	b2da      	uxtb	r2, r3
 800bbb4:	7abb      	ldrb	r3, [r7, #10]
 800bbb6:	4619      	mov	r1, r3
 800bbb8:	4b26      	ldr	r3, [pc, #152]	@ (800bc54 <mix_sub_columns+0x288>)
 800bbba:	5c5b      	ldrb	r3, [r3, r1]
 800bbbc:	4053      	eors	r3, r2
 800bbbe:	b2d9      	uxtb	r1, r3
 800bbc0:	7bfb      	ldrb	r3, [r7, #15]
 800bbc2:	461a      	mov	r2, r3
 800bbc4:	4b24      	ldr	r3, [pc, #144]	@ (800bc58 <mix_sub_columns+0x28c>)
 800bbc6:	5c9a      	ldrb	r2, [r3, r2]
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	3309      	adds	r3, #9
 800bbcc:	404a      	eors	r2, r1
 800bbce:	b2d2      	uxtb	r2, r2
 800bbd0:	701a      	strb	r2, [r3, #0]
    dt[10] = s_box(st[8]) ^ s_box(st[13]) ^ gfm2_sb(st[2]) ^ gfm3_sb(st[7]);
 800bbd2:	7c3b      	ldrb	r3, [r7, #16]
 800bbd4:	461a      	mov	r2, r3
 800bbd6:	4b20      	ldr	r3, [pc, #128]	@ (800bc58 <mix_sub_columns+0x28c>)
 800bbd8:	5c9a      	ldrb	r2, [r3, r2]
 800bbda:	7d7b      	ldrb	r3, [r7, #21]
 800bbdc:	4619      	mov	r1, r3
 800bbde:	4b1e      	ldr	r3, [pc, #120]	@ (800bc58 <mix_sub_columns+0x28c>)
 800bbe0:	5c5b      	ldrb	r3, [r3, r1]
 800bbe2:	4053      	eors	r3, r2
 800bbe4:	b2da      	uxtb	r2, r3
 800bbe6:	7abb      	ldrb	r3, [r7, #10]
 800bbe8:	4619      	mov	r1, r3
 800bbea:	4b19      	ldr	r3, [pc, #100]	@ (800bc50 <mix_sub_columns+0x284>)
 800bbec:	5c5b      	ldrb	r3, [r3, r1]
 800bbee:	4053      	eors	r3, r2
 800bbf0:	b2d9      	uxtb	r1, r3
 800bbf2:	7bfb      	ldrb	r3, [r7, #15]
 800bbf4:	461a      	mov	r2, r3
 800bbf6:	4b17      	ldr	r3, [pc, #92]	@ (800bc54 <mix_sub_columns+0x288>)
 800bbf8:	5c9a      	ldrb	r2, [r3, r2]
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	330a      	adds	r3, #10
 800bbfe:	404a      	eors	r2, r1
 800bc00:	b2d2      	uxtb	r2, r2
 800bc02:	701a      	strb	r2, [r3, #0]
    dt[11] = gfm3_sb(st[8]) ^ s_box(st[13]) ^ s_box(st[2]) ^ gfm2_sb(st[7]);
 800bc04:	7c3b      	ldrb	r3, [r7, #16]
 800bc06:	461a      	mov	r2, r3
 800bc08:	4b12      	ldr	r3, [pc, #72]	@ (800bc54 <mix_sub_columns+0x288>)
 800bc0a:	5c9a      	ldrb	r2, [r3, r2]
 800bc0c:	7d7b      	ldrb	r3, [r7, #21]
 800bc0e:	4619      	mov	r1, r3
 800bc10:	4b11      	ldr	r3, [pc, #68]	@ (800bc58 <mix_sub_columns+0x28c>)
 800bc12:	5c5b      	ldrb	r3, [r3, r1]
 800bc14:	4053      	eors	r3, r2
 800bc16:	b2da      	uxtb	r2, r3
 800bc18:	7abb      	ldrb	r3, [r7, #10]
 800bc1a:	4619      	mov	r1, r3
 800bc1c:	4b0e      	ldr	r3, [pc, #56]	@ (800bc58 <mix_sub_columns+0x28c>)
 800bc1e:	5c5b      	ldrb	r3, [r3, r1]
 800bc20:	4053      	eors	r3, r2
 800bc22:	b2d9      	uxtb	r1, r3
 800bc24:	7bfb      	ldrb	r3, [r7, #15]
 800bc26:	461a      	mov	r2, r3
 800bc28:	4b09      	ldr	r3, [pc, #36]	@ (800bc50 <mix_sub_columns+0x284>)
 800bc2a:	5c9a      	ldrb	r2, [r3, r2]
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	330b      	adds	r3, #11
 800bc30:	404a      	eors	r2, r1
 800bc32:	b2d2      	uxtb	r2, r2
 800bc34:	701a      	strb	r2, [r3, #0]

    dt[12] = gfm2_sb(st[12]) ^ gfm3_sb(st[1]) ^ s_box(st[6]) ^ s_box(st[11]);
 800bc36:	7d3b      	ldrb	r3, [r7, #20]
 800bc38:	461a      	mov	r2, r3
 800bc3a:	4b05      	ldr	r3, [pc, #20]	@ (800bc50 <mix_sub_columns+0x284>)
 800bc3c:	5c9a      	ldrb	r2, [r3, r2]
 800bc3e:	7a7b      	ldrb	r3, [r7, #9]
 800bc40:	4619      	mov	r1, r3
 800bc42:	4b04      	ldr	r3, [pc, #16]	@ (800bc54 <mix_sub_columns+0x288>)
 800bc44:	5c5b      	ldrb	r3, [r3, r1]
 800bc46:	4053      	eors	r3, r2
 800bc48:	b2da      	uxtb	r2, r3
 800bc4a:	7bbb      	ldrb	r3, [r7, #14]
 800bc4c:	4619      	mov	r1, r3
 800bc4e:	e005      	b.n	800bc5c <mix_sub_columns+0x290>
 800bc50:	0801f5a4 	.word	0x0801f5a4
 800bc54:	0801f6a4 	.word	0x0801f6a4
 800bc58:	0801f4a4 	.word	0x0801f4a4
 800bc5c:	4b2d      	ldr	r3, [pc, #180]	@ (800bd14 <mix_sub_columns+0x348>)
 800bc5e:	5c5b      	ldrb	r3, [r3, r1]
 800bc60:	4053      	eors	r3, r2
 800bc62:	b2d9      	uxtb	r1, r3
 800bc64:	7cfb      	ldrb	r3, [r7, #19]
 800bc66:	461a      	mov	r2, r3
 800bc68:	4b2a      	ldr	r3, [pc, #168]	@ (800bd14 <mix_sub_columns+0x348>)
 800bc6a:	5c9a      	ldrb	r2, [r3, r2]
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	330c      	adds	r3, #12
 800bc70:	404a      	eors	r2, r1
 800bc72:	b2d2      	uxtb	r2, r2
 800bc74:	701a      	strb	r2, [r3, #0]
    dt[13] = s_box(st[12]) ^ gfm2_sb(st[1]) ^ gfm3_sb(st[6]) ^ s_box(st[11]);
 800bc76:	7d3b      	ldrb	r3, [r7, #20]
 800bc78:	461a      	mov	r2, r3
 800bc7a:	4b26      	ldr	r3, [pc, #152]	@ (800bd14 <mix_sub_columns+0x348>)
 800bc7c:	5c9a      	ldrb	r2, [r3, r2]
 800bc7e:	7a7b      	ldrb	r3, [r7, #9]
 800bc80:	4619      	mov	r1, r3
 800bc82:	4b25      	ldr	r3, [pc, #148]	@ (800bd18 <mix_sub_columns+0x34c>)
 800bc84:	5c5b      	ldrb	r3, [r3, r1]
 800bc86:	4053      	eors	r3, r2
 800bc88:	b2da      	uxtb	r2, r3
 800bc8a:	7bbb      	ldrb	r3, [r7, #14]
 800bc8c:	4619      	mov	r1, r3
 800bc8e:	4b23      	ldr	r3, [pc, #140]	@ (800bd1c <mix_sub_columns+0x350>)
 800bc90:	5c5b      	ldrb	r3, [r3, r1]
 800bc92:	4053      	eors	r3, r2
 800bc94:	b2d9      	uxtb	r1, r3
 800bc96:	7cfb      	ldrb	r3, [r7, #19]
 800bc98:	461a      	mov	r2, r3
 800bc9a:	4b1e      	ldr	r3, [pc, #120]	@ (800bd14 <mix_sub_columns+0x348>)
 800bc9c:	5c9a      	ldrb	r2, [r3, r2]
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	330d      	adds	r3, #13
 800bca2:	404a      	eors	r2, r1
 800bca4:	b2d2      	uxtb	r2, r2
 800bca6:	701a      	strb	r2, [r3, #0]
    dt[14] = s_box(st[12]) ^ s_box(st[1]) ^ gfm2_sb(st[6]) ^ gfm3_sb(st[11]);
 800bca8:	7d3b      	ldrb	r3, [r7, #20]
 800bcaa:	461a      	mov	r2, r3
 800bcac:	4b19      	ldr	r3, [pc, #100]	@ (800bd14 <mix_sub_columns+0x348>)
 800bcae:	5c9a      	ldrb	r2, [r3, r2]
 800bcb0:	7a7b      	ldrb	r3, [r7, #9]
 800bcb2:	4619      	mov	r1, r3
 800bcb4:	4b17      	ldr	r3, [pc, #92]	@ (800bd14 <mix_sub_columns+0x348>)
 800bcb6:	5c5b      	ldrb	r3, [r3, r1]
 800bcb8:	4053      	eors	r3, r2
 800bcba:	b2da      	uxtb	r2, r3
 800bcbc:	7bbb      	ldrb	r3, [r7, #14]
 800bcbe:	4619      	mov	r1, r3
 800bcc0:	4b15      	ldr	r3, [pc, #84]	@ (800bd18 <mix_sub_columns+0x34c>)
 800bcc2:	5c5b      	ldrb	r3, [r3, r1]
 800bcc4:	4053      	eors	r3, r2
 800bcc6:	b2d9      	uxtb	r1, r3
 800bcc8:	7cfb      	ldrb	r3, [r7, #19]
 800bcca:	461a      	mov	r2, r3
 800bccc:	4b13      	ldr	r3, [pc, #76]	@ (800bd1c <mix_sub_columns+0x350>)
 800bcce:	5c9a      	ldrb	r2, [r3, r2]
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	330e      	adds	r3, #14
 800bcd4:	404a      	eors	r2, r1
 800bcd6:	b2d2      	uxtb	r2, r2
 800bcd8:	701a      	strb	r2, [r3, #0]
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 800bcda:	7d3b      	ldrb	r3, [r7, #20]
 800bcdc:	461a      	mov	r2, r3
 800bcde:	4b0f      	ldr	r3, [pc, #60]	@ (800bd1c <mix_sub_columns+0x350>)
 800bce0:	5c9a      	ldrb	r2, [r3, r2]
 800bce2:	7a7b      	ldrb	r3, [r7, #9]
 800bce4:	4619      	mov	r1, r3
 800bce6:	4b0b      	ldr	r3, [pc, #44]	@ (800bd14 <mix_sub_columns+0x348>)
 800bce8:	5c5b      	ldrb	r3, [r3, r1]
 800bcea:	4053      	eors	r3, r2
 800bcec:	b2da      	uxtb	r2, r3
 800bcee:	7bbb      	ldrb	r3, [r7, #14]
 800bcf0:	4619      	mov	r1, r3
 800bcf2:	4b08      	ldr	r3, [pc, #32]	@ (800bd14 <mix_sub_columns+0x348>)
 800bcf4:	5c5b      	ldrb	r3, [r3, r1]
 800bcf6:	4053      	eors	r3, r2
 800bcf8:	b2d9      	uxtb	r1, r3
 800bcfa:	7cfb      	ldrb	r3, [r7, #19]
 800bcfc:	461a      	mov	r2, r3
 800bcfe:	4b06      	ldr	r3, [pc, #24]	@ (800bd18 <mix_sub_columns+0x34c>)
 800bd00:	5c9a      	ldrb	r2, [r3, r2]
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	330f      	adds	r3, #15
 800bd06:	404a      	eors	r2, r1
 800bd08:	b2d2      	uxtb	r2, r2
 800bd0a:	701a      	strb	r2, [r3, #0]
  }
 800bd0c:	bf00      	nop
 800bd0e:	3718      	adds	r7, #24
 800bd10:	46bd      	mov	sp, r7
 800bd12:	bd80      	pop	{r7, pc}
 800bd14:	0801f4a4 	.word	0x0801f4a4
 800bd18:	0801f5a4 	.word	0x0801f5a4
 800bd1c:	0801f6a4 	.word	0x0801f6a4

0800bd20 <lorawan_aes_set_key>:
#if defined( AES_ENC_PREKEYED ) || defined( AES_DEC_PREKEYED )

/*  Set the cipher key for the pre-keyed version */

return_type lorawan_aes_set_key( const uint8_t key[], length_type keylen, lorawan_aes_context ctx[1] )
{
 800bd20:	b580      	push	{r7, lr}
 800bd22:	b086      	sub	sp, #24
 800bd24:	af00      	add	r7, sp, #0
 800bd26:	60f8      	str	r0, [r7, #12]
 800bd28:	460b      	mov	r3, r1
 800bd2a:	607a      	str	r2, [r7, #4]
 800bd2c:	72fb      	strb	r3, [r7, #11]
    uint8_t cc, rc, hi;

    switch( keylen )
 800bd2e:	7afb      	ldrb	r3, [r7, #11]
 800bd30:	3b10      	subs	r3, #16
 800bd32:	2b10      	cmp	r3, #16
 800bd34:	bf8c      	ite	hi
 800bd36:	2201      	movhi	r2, #1
 800bd38:	2200      	movls	r2, #0
 800bd3a:	b2d2      	uxtb	r2, r2
 800bd3c:	2a00      	cmp	r2, #0
 800bd3e:	d10b      	bne.n	800bd58 <lorawan_aes_set_key+0x38>
 800bd40:	4a64      	ldr	r2, [pc, #400]	@ (800bed4 <lorawan_aes_set_key+0x1b4>)
 800bd42:	fa22 f303 	lsr.w	r3, r2, r3
 800bd46:	f003 0301 	and.w	r3, r3, #1
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	bf14      	ite	ne
 800bd4e:	2301      	movne	r3, #1
 800bd50:	2300      	moveq	r3, #0
 800bd52:	b2db      	uxtb	r3, r3
 800bd54:	2b00      	cmp	r3, #0
 800bd56:	d105      	bne.n	800bd64 <lorawan_aes_set_key+0x44>
    case 16:
    case 24:
    case 32:
        break;
    default:
        ctx->rnd = 0;
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	2200      	movs	r2, #0
 800bd5c:	f883 20f0 	strb.w	r2, [r3, #240]	@ 0xf0
        return ( uint8_t )-1;
 800bd60:	23ff      	movs	r3, #255	@ 0xff
 800bd62:	e0b2      	b.n	800beca <lorawan_aes_set_key+0x1aa>
        break;
 800bd64:	bf00      	nop
    }
    block_copy_nn(ctx->ksch, key, keylen);
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	7afa      	ldrb	r2, [r7, #11]
 800bd6a:	68f9      	ldr	r1, [r7, #12]
 800bd6c:	4618      	mov	r0, r3
 800bd6e:	f7ff fbfc 	bl	800b56a <copy_block_nn>
    hi = (keylen + 28) << 2;
 800bd72:	7afb      	ldrb	r3, [r7, #11]
 800bd74:	331c      	adds	r3, #28
 800bd76:	b2db      	uxtb	r3, r3
 800bd78:	009b      	lsls	r3, r3, #2
 800bd7a:	747b      	strb	r3, [r7, #17]
    ctx->rnd = (hi >> 4) - 1;
 800bd7c:	7c7b      	ldrb	r3, [r7, #17]
 800bd7e:	091b      	lsrs	r3, r3, #4
 800bd80:	b2db      	uxtb	r3, r3
 800bd82:	3b01      	subs	r3, #1
 800bd84:	b2da      	uxtb	r2, r3
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	f883 20f0 	strb.w	r2, [r3, #240]	@ 0xf0
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800bd8c:	7afb      	ldrb	r3, [r7, #11]
 800bd8e:	75fb      	strb	r3, [r7, #23]
 800bd90:	2301      	movs	r3, #1
 800bd92:	75bb      	strb	r3, [r7, #22]
 800bd94:	e093      	b.n	800bebe <lorawan_aes_set_key+0x19e>
    {   uint8_t tt, t0, t1, t2, t3;

        t0 = ctx->ksch[cc - 4];
 800bd96:	7dfb      	ldrb	r3, [r7, #23]
 800bd98:	3b04      	subs	r3, #4
 800bd9a:	687a      	ldr	r2, [r7, #4]
 800bd9c:	5cd3      	ldrb	r3, [r2, r3]
 800bd9e:	757b      	strb	r3, [r7, #21]
        t1 = ctx->ksch[cc - 3];
 800bda0:	7dfb      	ldrb	r3, [r7, #23]
 800bda2:	3b03      	subs	r3, #3
 800bda4:	687a      	ldr	r2, [r7, #4]
 800bda6:	5cd3      	ldrb	r3, [r2, r3]
 800bda8:	753b      	strb	r3, [r7, #20]
        t2 = ctx->ksch[cc - 2];
 800bdaa:	7dfb      	ldrb	r3, [r7, #23]
 800bdac:	3b02      	subs	r3, #2
 800bdae:	687a      	ldr	r2, [r7, #4]
 800bdb0:	5cd3      	ldrb	r3, [r2, r3]
 800bdb2:	74fb      	strb	r3, [r7, #19]
        t3 = ctx->ksch[cc - 1];
 800bdb4:	7dfb      	ldrb	r3, [r7, #23]
 800bdb6:	3b01      	subs	r3, #1
 800bdb8:	687a      	ldr	r2, [r7, #4]
 800bdba:	5cd3      	ldrb	r3, [r2, r3]
 800bdbc:	74bb      	strb	r3, [r7, #18]
        if( cc % keylen == 0 )
 800bdbe:	7dfb      	ldrb	r3, [r7, #23]
 800bdc0:	7afa      	ldrb	r2, [r7, #11]
 800bdc2:	fbb3 f1f2 	udiv	r1, r3, r2
 800bdc6:	fb01 f202 	mul.w	r2, r1, r2
 800bdca:	1a9b      	subs	r3, r3, r2
 800bdcc:	b2db      	uxtb	r3, r3
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	d127      	bne.n	800be22 <lorawan_aes_set_key+0x102>
        {
            tt = t0;
 800bdd2:	7d7b      	ldrb	r3, [r7, #21]
 800bdd4:	743b      	strb	r3, [r7, #16]
            t0 = s_box(t1) ^ rc;
 800bdd6:	7d3b      	ldrb	r3, [r7, #20]
 800bdd8:	4a3f      	ldr	r2, [pc, #252]	@ (800bed8 <lorawan_aes_set_key+0x1b8>)
 800bdda:	5cd2      	ldrb	r2, [r2, r3]
 800bddc:	7dbb      	ldrb	r3, [r7, #22]
 800bdde:	4053      	eors	r3, r2
 800bde0:	757b      	strb	r3, [r7, #21]
            t1 = s_box(t2);
 800bde2:	7cfb      	ldrb	r3, [r7, #19]
 800bde4:	4a3c      	ldr	r2, [pc, #240]	@ (800bed8 <lorawan_aes_set_key+0x1b8>)
 800bde6:	5cd3      	ldrb	r3, [r2, r3]
 800bde8:	753b      	strb	r3, [r7, #20]
            t2 = s_box(t3);
 800bdea:	7cbb      	ldrb	r3, [r7, #18]
 800bdec:	4a3a      	ldr	r2, [pc, #232]	@ (800bed8 <lorawan_aes_set_key+0x1b8>)
 800bdee:	5cd3      	ldrb	r3, [r2, r3]
 800bdf0:	74fb      	strb	r3, [r7, #19]
            t3 = s_box(tt);
 800bdf2:	7c3b      	ldrb	r3, [r7, #16]
 800bdf4:	4a38      	ldr	r2, [pc, #224]	@ (800bed8 <lorawan_aes_set_key+0x1b8>)
 800bdf6:	5cd3      	ldrb	r3, [r2, r3]
 800bdf8:	74bb      	strb	r3, [r7, #18]
            rc = f2(rc);
 800bdfa:	7dbb      	ldrb	r3, [r7, #22]
 800bdfc:	005b      	lsls	r3, r3, #1
 800bdfe:	b25a      	sxtb	r2, r3
 800be00:	7dbb      	ldrb	r3, [r7, #22]
 800be02:	09db      	lsrs	r3, r3, #7
 800be04:	b2db      	uxtb	r3, r3
 800be06:	4619      	mov	r1, r3
 800be08:	0049      	lsls	r1, r1, #1
 800be0a:	440b      	add	r3, r1
 800be0c:	4619      	mov	r1, r3
 800be0e:	00c8      	lsls	r0, r1, #3
 800be10:	4619      	mov	r1, r3
 800be12:	4603      	mov	r3, r0
 800be14:	440b      	add	r3, r1
 800be16:	b2db      	uxtb	r3, r3
 800be18:	b25b      	sxtb	r3, r3
 800be1a:	4053      	eors	r3, r2
 800be1c:	b25b      	sxtb	r3, r3
 800be1e:	75bb      	strb	r3, [r7, #22]
 800be20:	e01c      	b.n	800be5c <lorawan_aes_set_key+0x13c>
        }
        else if( keylen > 24 && cc % keylen == 16 )
 800be22:	7afb      	ldrb	r3, [r7, #11]
 800be24:	2b18      	cmp	r3, #24
 800be26:	d919      	bls.n	800be5c <lorawan_aes_set_key+0x13c>
 800be28:	7dfb      	ldrb	r3, [r7, #23]
 800be2a:	7afa      	ldrb	r2, [r7, #11]
 800be2c:	fbb3 f1f2 	udiv	r1, r3, r2
 800be30:	fb01 f202 	mul.w	r2, r1, r2
 800be34:	1a9b      	subs	r3, r3, r2
 800be36:	b2db      	uxtb	r3, r3
 800be38:	2b10      	cmp	r3, #16
 800be3a:	d10f      	bne.n	800be5c <lorawan_aes_set_key+0x13c>
        {
            t0 = s_box(t0);
 800be3c:	7d7b      	ldrb	r3, [r7, #21]
 800be3e:	4a26      	ldr	r2, [pc, #152]	@ (800bed8 <lorawan_aes_set_key+0x1b8>)
 800be40:	5cd3      	ldrb	r3, [r2, r3]
 800be42:	757b      	strb	r3, [r7, #21]
            t1 = s_box(t1);
 800be44:	7d3b      	ldrb	r3, [r7, #20]
 800be46:	4a24      	ldr	r2, [pc, #144]	@ (800bed8 <lorawan_aes_set_key+0x1b8>)
 800be48:	5cd3      	ldrb	r3, [r2, r3]
 800be4a:	753b      	strb	r3, [r7, #20]
            t2 = s_box(t2);
 800be4c:	7cfb      	ldrb	r3, [r7, #19]
 800be4e:	4a22      	ldr	r2, [pc, #136]	@ (800bed8 <lorawan_aes_set_key+0x1b8>)
 800be50:	5cd3      	ldrb	r3, [r2, r3]
 800be52:	74fb      	strb	r3, [r7, #19]
            t3 = s_box(t3);
 800be54:	7cbb      	ldrb	r3, [r7, #18]
 800be56:	4a20      	ldr	r2, [pc, #128]	@ (800bed8 <lorawan_aes_set_key+0x1b8>)
 800be58:	5cd3      	ldrb	r3, [r2, r3]
 800be5a:	74bb      	strb	r3, [r7, #18]
        }
        tt = cc - keylen;
 800be5c:	7dfa      	ldrb	r2, [r7, #23]
 800be5e:	7afb      	ldrb	r3, [r7, #11]
 800be60:	1ad3      	subs	r3, r2, r3
 800be62:	743b      	strb	r3, [r7, #16]
        ctx->ksch[cc + 0] = ctx->ksch[tt + 0] ^ t0;
 800be64:	7c3b      	ldrb	r3, [r7, #16]
 800be66:	687a      	ldr	r2, [r7, #4]
 800be68:	5cd1      	ldrb	r1, [r2, r3]
 800be6a:	7dfb      	ldrb	r3, [r7, #23]
 800be6c:	7d7a      	ldrb	r2, [r7, #21]
 800be6e:	404a      	eors	r2, r1
 800be70:	b2d1      	uxtb	r1, r2
 800be72:	687a      	ldr	r2, [r7, #4]
 800be74:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
 800be76:	7c3b      	ldrb	r3, [r7, #16]
 800be78:	3301      	adds	r3, #1
 800be7a:	687a      	ldr	r2, [r7, #4]
 800be7c:	5cd1      	ldrb	r1, [r2, r3]
 800be7e:	7dfb      	ldrb	r3, [r7, #23]
 800be80:	3301      	adds	r3, #1
 800be82:	7d3a      	ldrb	r2, [r7, #20]
 800be84:	404a      	eors	r2, r1
 800be86:	b2d1      	uxtb	r1, r2
 800be88:	687a      	ldr	r2, [r7, #4]
 800be8a:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
 800be8c:	7c3b      	ldrb	r3, [r7, #16]
 800be8e:	3302      	adds	r3, #2
 800be90:	687a      	ldr	r2, [r7, #4]
 800be92:	5cd1      	ldrb	r1, [r2, r3]
 800be94:	7dfb      	ldrb	r3, [r7, #23]
 800be96:	3302      	adds	r3, #2
 800be98:	7cfa      	ldrb	r2, [r7, #19]
 800be9a:	404a      	eors	r2, r1
 800be9c:	b2d1      	uxtb	r1, r2
 800be9e:	687a      	ldr	r2, [r7, #4]
 800bea0:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 800bea2:	7c3b      	ldrb	r3, [r7, #16]
 800bea4:	3303      	adds	r3, #3
 800bea6:	687a      	ldr	r2, [r7, #4]
 800bea8:	5cd1      	ldrb	r1, [r2, r3]
 800beaa:	7dfb      	ldrb	r3, [r7, #23]
 800beac:	3303      	adds	r3, #3
 800beae:	7cba      	ldrb	r2, [r7, #18]
 800beb0:	404a      	eors	r2, r1
 800beb2:	b2d1      	uxtb	r1, r2
 800beb4:	687a      	ldr	r2, [r7, #4]
 800beb6:	54d1      	strb	r1, [r2, r3]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800beb8:	7dfb      	ldrb	r3, [r7, #23]
 800beba:	3304      	adds	r3, #4
 800bebc:	75fb      	strb	r3, [r7, #23]
 800bebe:	7dfa      	ldrb	r2, [r7, #23]
 800bec0:	7c7b      	ldrb	r3, [r7, #17]
 800bec2:	429a      	cmp	r2, r3
 800bec4:	f4ff af67 	bcc.w	800bd96 <lorawan_aes_set_key+0x76>
    }
    return 0;
 800bec8:	2300      	movs	r3, #0
}
 800beca:	4618      	mov	r0, r3
 800becc:	3718      	adds	r7, #24
 800bece:	46bd      	mov	sp, r7
 800bed0:	bd80      	pop	{r7, pc}
 800bed2:	bf00      	nop
 800bed4:	00010101 	.word	0x00010101
 800bed8:	0801f4a4 	.word	0x0801f4a4

0800bedc <lorawan_aes_encrypt>:
#if defined( AES_ENC_PREKEYED )

/*  Encrypt a single block of 16 bytes */

return_type lorawan_aes_encrypt( const uint8_t in[N_BLOCK], uint8_t  out[N_BLOCK], const lorawan_aes_context ctx[1] )
{
 800bedc:	b580      	push	{r7, lr}
 800bede:	b08a      	sub	sp, #40	@ 0x28
 800bee0:	af00      	add	r7, sp, #0
 800bee2:	60f8      	str	r0, [r7, #12]
 800bee4:	60b9      	str	r1, [r7, #8]
 800bee6:	607a      	str	r2, [r7, #4]
    if( ctx->rnd )
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800beee:	2b00      	cmp	r3, #0
 800bef0:	d038      	beq.n	800bf64 <lorawan_aes_encrypt+0x88>
    {
        uint8_t s1[N_BLOCK], r;
        copy_and_key( s1, in, ctx->ksch );
 800bef2:	687a      	ldr	r2, [r7, #4]
 800bef4:	f107 0314 	add.w	r3, r7, #20
 800bef8:	68f9      	ldr	r1, [r7, #12]
 800befa:	4618      	mov	r0, r3
 800befc:	f7ff fc07 	bl	800b70e <copy_and_key>

        for( r = 1 ; r < ctx->rnd ; ++r )
 800bf00:	2301      	movs	r3, #1
 800bf02:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800bf06:	e014      	b.n	800bf32 <lorawan_aes_encrypt+0x56>
#if defined( VERSION_1 )
        {
            mix_sub_columns( s1 );
 800bf08:	f107 0314 	add.w	r3, r7, #20
 800bf0c:	4618      	mov	r0, r3
 800bf0e:	f7ff fd5d 	bl	800b9cc <mix_sub_columns>
            add_round_key( s1, ctx->ksch + r * N_BLOCK);
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800bf18:	0112      	lsls	r2, r2, #4
 800bf1a:	441a      	add	r2, r3
 800bf1c:	f107 0314 	add.w	r3, r7, #20
 800bf20:	4611      	mov	r1, r2
 800bf22:	4618      	mov	r0, r3
 800bf24:	f7ff fcab 	bl	800b87e <add_round_key>
        for( r = 1 ; r < ctx->rnd ; ++r )
 800bf28:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bf2c:	3301      	adds	r3, #1
 800bf2e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800bf38:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800bf3c:	429a      	cmp	r2, r3
 800bf3e:	d3e3      	bcc.n	800bf08 <lorawan_aes_encrypt+0x2c>
        {   uint8_t s2[N_BLOCK];
            mix_sub_columns( s2, s1 );
            copy_and_key( s1, s2, ctx->ksch + r * N_BLOCK);
        }
#endif
        shift_sub_rows( s1 );
 800bf40:	f107 0314 	add.w	r3, r7, #20
 800bf44:	4618      	mov	r0, r3
 800bf46:	f7ff fca7 	bl	800b898 <shift_sub_rows>
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800bf50:	0112      	lsls	r2, r2, #4
 800bf52:	441a      	add	r2, r3
 800bf54:	f107 0314 	add.w	r3, r7, #20
 800bf58:	4619      	mov	r1, r3
 800bf5a:	68b8      	ldr	r0, [r7, #8]
 800bf5c:	f7ff fbd7 	bl	800b70e <copy_and_key>
    }
    else
        return ( uint8_t )-1;
    return 0;
 800bf60:	2300      	movs	r3, #0
 800bf62:	e000      	b.n	800bf66 <lorawan_aes_encrypt+0x8a>
        return ( uint8_t )-1;
 800bf64:	23ff      	movs	r3, #255	@ 0xff
}
 800bf66:	4618      	mov	r0, r3
 800bf68:	3728      	adds	r7, #40	@ 0x28
 800bf6a:	46bd      	mov	sp, r7
 800bf6c:	bd80      	pop	{r7, pc}
	...

0800bf70 <PrintKey>:
static SecureElementStatus_t ComputeCmac(uint8_t *micBxBuffer, uint8_t *buffer, uint16_t size, KeyIdentifier_t keyID,
                                         uint32_t *cmac);

/* Private functions ---------------------------------------------------------*/
static void PrintKey( KeyIdentifier_t key )
{
 800bf70:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bf72:	b09d      	sub	sp, #116	@ 0x74
 800bf74:	af10      	add	r7, sp, #64	@ 0x40
 800bf76:	4603      	mov	r3, r0
 800bf78:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
#if (defined (KEY_EXTRACTABLE) && (KEY_EXTRACTABLE == 1))
    SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 800bf7c:	2306      	movs	r3, #6
 800bf7e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    Key_t *keyItem;
    retval = SecureElementGetKeyByID(key, &keyItem);
 800bf82:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 800bf86:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bf8a:	4611      	mov	r1, r2
 800bf8c:	4618      	mov	r0, r3
 800bf8e:	f000 f9a7 	bl	800c2e0 <SecureElementGetKeyByID>
 800bf92:	4603      	mov	r3, r0
 800bf94:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
#else
    uint8_t extractable_key[16] = {0};
    retval = SecureElementGetKeyByID(key, (uint8_t*)extractable_key);
#endif /* LORAWAN_KMS */
    if (retval == SECURE_ELEMENT_SUCCESS)
 800bf98:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800bf9c:	2b00      	cmp	r3, #0
 800bf9e:	f040 80b0 	bne.w	800c102 <PrintKey+0x192>
    {
        if (key == APP_KEY)
 800bfa2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bfa6:	2b00      	cmp	r3, #0
 800bfa8:	d106      	bne.n	800bfb8 <PrintKey+0x48>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### AppKey:      ");
 800bfaa:	4b58      	ldr	r3, [pc, #352]	@ (800c10c <PrintKey+0x19c>)
 800bfac:	2200      	movs	r2, #0
 800bfae:	2100      	movs	r1, #0
 800bfb0:	2002      	movs	r0, #2
 800bfb2:	f00f fd93 	bl	801badc <UTIL_ADV_TRACE_COND_FSend>
 800bfb6:	e056      	b.n	800c066 <PrintKey+0xf6>
        }
        else if (key == NWK_KEY)
 800bfb8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bfbc:	2b01      	cmp	r3, #1
 800bfbe:	d106      	bne.n	800bfce <PrintKey+0x5e>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### NwkKey:      ");
 800bfc0:	4b53      	ldr	r3, [pc, #332]	@ (800c110 <PrintKey+0x1a0>)
 800bfc2:	2200      	movs	r2, #0
 800bfc4:	2100      	movs	r1, #0
 800bfc6:	2002      	movs	r0, #2
 800bfc8:	f00f fd88 	bl	801badc <UTIL_ADV_TRACE_COND_FSend>
 800bfcc:	e04b      	b.n	800c066 <PrintKey+0xf6>
        }
        else if (key == APP_S_KEY)
 800bfce:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bfd2:	2b03      	cmp	r3, #3
 800bfd4:	d106      	bne.n	800bfe4 <PrintKey+0x74>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### AppSKey:     ");
 800bfd6:	4b4f      	ldr	r3, [pc, #316]	@ (800c114 <PrintKey+0x1a4>)
 800bfd8:	2200      	movs	r2, #0
 800bfda:	2100      	movs	r1, #0
 800bfdc:	2002      	movs	r0, #2
 800bfde:	f00f fd7d 	bl	801badc <UTIL_ADV_TRACE_COND_FSend>
 800bfe2:	e040      	b.n	800c066 <PrintKey+0xf6>
        }
        else if (key == NWK_S_KEY)
 800bfe4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bfe8:	2b02      	cmp	r3, #2
 800bfea:	d106      	bne.n	800bffa <PrintKey+0x8a>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### NwkSKey:     ");
 800bfec:	4b4a      	ldr	r3, [pc, #296]	@ (800c118 <PrintKey+0x1a8>)
 800bfee:	2200      	movs	r2, #0
 800bff0:	2100      	movs	r1, #0
 800bff2:	2002      	movs	r0, #2
 800bff4:	f00f fd72 	bl	801badc <UTIL_ADV_TRACE_COND_FSend>
 800bff8:	e035      	b.n	800c066 <PrintKey+0xf6>
        }
        else if (key == MC_ROOT_KEY)
 800bffa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bffe:	2b04      	cmp	r3, #4
 800c000:	d106      	bne.n	800c010 <PrintKey+0xa0>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCRootKey:   ");
 800c002:	4b46      	ldr	r3, [pc, #280]	@ (800c11c <PrintKey+0x1ac>)
 800c004:	2200      	movs	r2, #0
 800c006:	2100      	movs	r1, #0
 800c008:	2002      	movs	r0, #2
 800c00a:	f00f fd67 	bl	801badc <UTIL_ADV_TRACE_COND_FSend>
 800c00e:	e02a      	b.n	800c066 <PrintKey+0xf6>
        }
        else if (key == MC_KE_KEY)
 800c010:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c014:	2b7f      	cmp	r3, #127	@ 0x7f
 800c016:	d106      	bne.n	800c026 <PrintKey+0xb6>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCKEKey:     ");
 800c018:	4b41      	ldr	r3, [pc, #260]	@ (800c120 <PrintKey+0x1b0>)
 800c01a:	2200      	movs	r2, #0
 800c01c:	2100      	movs	r1, #0
 800c01e:	2002      	movs	r0, #2
 800c020:	f00f fd5c 	bl	801badc <UTIL_ADV_TRACE_COND_FSend>
 800c024:	e01f      	b.n	800c066 <PrintKey+0xf6>
        }
        else if (key == MC_KEY_0)
 800c026:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c02a:	2b80      	cmp	r3, #128	@ 0x80
 800c02c:	d106      	bne.n	800c03c <PrintKey+0xcc>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCKey_0:     ");
 800c02e:	4b3d      	ldr	r3, [pc, #244]	@ (800c124 <PrintKey+0x1b4>)
 800c030:	2200      	movs	r2, #0
 800c032:	2100      	movs	r1, #0
 800c034:	2002      	movs	r0, #2
 800c036:	f00f fd51 	bl	801badc <UTIL_ADV_TRACE_COND_FSend>
 800c03a:	e014      	b.n	800c066 <PrintKey+0xf6>
        }
        else if (key == MC_APP_S_KEY_0)
 800c03c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c040:	2b81      	cmp	r3, #129	@ 0x81
 800c042:	d106      	bne.n	800c052 <PrintKey+0xe2>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCAppSKey_0: ");
 800c044:	4b38      	ldr	r3, [pc, #224]	@ (800c128 <PrintKey+0x1b8>)
 800c046:	2200      	movs	r2, #0
 800c048:	2100      	movs	r1, #0
 800c04a:	2002      	movs	r0, #2
 800c04c:	f00f fd46 	bl	801badc <UTIL_ADV_TRACE_COND_FSend>
 800c050:	e009      	b.n	800c066 <PrintKey+0xf6>
        }
        else if (key == MC_NWK_S_KEY_0)
 800c052:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c056:	2b82      	cmp	r3, #130	@ 0x82
 800c058:	d105      	bne.n	800c066 <PrintKey+0xf6>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCNwkSKey_0: ");
 800c05a:	4b34      	ldr	r3, [pc, #208]	@ (800c12c <PrintKey+0x1bc>)
 800c05c:	2200      	movs	r2, #0
 800c05e:	2100      	movs	r1, #0
 800c060:	2002      	movs	r0, #2
 800c062:	f00f fd3b 	bl	801badc <UTIL_ADV_TRACE_COND_FSend>
        }
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
        MW_LOG(TS_OFF, VLEVEL_M, "%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800c066:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c068:	785b      	ldrb	r3, [r3, #1]
 800c06a:	4618      	mov	r0, r3
 800c06c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c06e:	789b      	ldrb	r3, [r3, #2]
 800c070:	461c      	mov	r4, r3
 800c072:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c074:	78db      	ldrb	r3, [r3, #3]
 800c076:	461d      	mov	r5, r3
 800c078:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c07a:	791b      	ldrb	r3, [r3, #4]
 800c07c:	461e      	mov	r6, r3
 800c07e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c080:	795b      	ldrb	r3, [r3, #5]
 800c082:	623b      	str	r3, [r7, #32]
 800c084:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c086:	799b      	ldrb	r3, [r3, #6]
 800c088:	61fb      	str	r3, [r7, #28]
 800c08a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c08c:	79db      	ldrb	r3, [r3, #7]
 800c08e:	61bb      	str	r3, [r7, #24]
 800c090:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c092:	7a1b      	ldrb	r3, [r3, #8]
 800c094:	617b      	str	r3, [r7, #20]
 800c096:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c098:	7a5b      	ldrb	r3, [r3, #9]
 800c09a:	613b      	str	r3, [r7, #16]
 800c09c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c09e:	7a9b      	ldrb	r3, [r3, #10]
 800c0a0:	60fb      	str	r3, [r7, #12]
 800c0a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c0a4:	7adb      	ldrb	r3, [r3, #11]
 800c0a6:	60bb      	str	r3, [r7, #8]
 800c0a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c0aa:	7b1b      	ldrb	r3, [r3, #12]
 800c0ac:	607b      	str	r3, [r7, #4]
 800c0ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c0b0:	7b5b      	ldrb	r3, [r3, #13]
 800c0b2:	603b      	str	r3, [r7, #0]
 800c0b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c0b6:	7b9b      	ldrb	r3, [r3, #14]
 800c0b8:	4619      	mov	r1, r3
 800c0ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c0bc:	7bdb      	ldrb	r3, [r3, #15]
 800c0be:	461a      	mov	r2, r3
 800c0c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c0c2:	7c1b      	ldrb	r3, [r3, #16]
 800c0c4:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c0c6:	920e      	str	r2, [sp, #56]	@ 0x38
 800c0c8:	910d      	str	r1, [sp, #52]	@ 0x34
 800c0ca:	683a      	ldr	r2, [r7, #0]
 800c0cc:	920c      	str	r2, [sp, #48]	@ 0x30
 800c0ce:	687a      	ldr	r2, [r7, #4]
 800c0d0:	920b      	str	r2, [sp, #44]	@ 0x2c
 800c0d2:	68ba      	ldr	r2, [r7, #8]
 800c0d4:	920a      	str	r2, [sp, #40]	@ 0x28
 800c0d6:	68fa      	ldr	r2, [r7, #12]
 800c0d8:	9209      	str	r2, [sp, #36]	@ 0x24
 800c0da:	693a      	ldr	r2, [r7, #16]
 800c0dc:	9208      	str	r2, [sp, #32]
 800c0de:	697a      	ldr	r2, [r7, #20]
 800c0e0:	9207      	str	r2, [sp, #28]
 800c0e2:	69ba      	ldr	r2, [r7, #24]
 800c0e4:	9206      	str	r2, [sp, #24]
 800c0e6:	69fa      	ldr	r2, [r7, #28]
 800c0e8:	9205      	str	r2, [sp, #20]
 800c0ea:	6a3b      	ldr	r3, [r7, #32]
 800c0ec:	9304      	str	r3, [sp, #16]
 800c0ee:	9603      	str	r6, [sp, #12]
 800c0f0:	9502      	str	r5, [sp, #8]
 800c0f2:	9401      	str	r4, [sp, #4]
 800c0f4:	9000      	str	r0, [sp, #0]
 800c0f6:	4b0e      	ldr	r3, [pc, #56]	@ (800c130 <PrintKey+0x1c0>)
 800c0f8:	2200      	movs	r2, #0
 800c0fa:	2100      	movs	r1, #0
 800c0fc:	2002      	movs	r0, #2
 800c0fe:	f00f fced 	bl	801badc <UTIL_ADV_TRACE_COND_FSend>
        MW_LOG(TS_OFF, VLEVEL_M, "%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
               HEX16(extractable_key));
#endif /* LORAWAN_KMS */
    }
#endif /* KEY_EXTRACTABLE */
}
 800c102:	bf00      	nop
 800c104:	3734      	adds	r7, #52	@ 0x34
 800c106:	46bd      	mov	sp, r7
 800c108:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c10a:	bf00      	nop
 800c10c:	0801ef04 	.word	0x0801ef04
 800c110:	0801ef1c 	.word	0x0801ef1c
 800c114:	0801ef34 	.word	0x0801ef34
 800c118:	0801ef4c 	.word	0x0801ef4c
 800c11c:	0801ef64 	.word	0x0801ef64
 800c120:	0801ef7c 	.word	0x0801ef7c
 800c124:	0801ef94 	.word	0x0801ef94
 800c128:	0801efac 	.word	0x0801efac
 800c12c:	0801efc4 	.word	0x0801efc4
 800c130:	0801efdc 	.word	0x0801efdc

0800c134 <GetKeyByID>:
 * \param [in] keyID          - Key identifier
 * \param [out] keyItem       - Key item reference
 * \retval                    - Status of the operation
 */
static SecureElementStatus_t GetKeyByID( KeyIdentifier_t keyID, Key_t** keyItem )
{
 800c134:	b480      	push	{r7}
 800c136:	b085      	sub	sp, #20
 800c138:	af00      	add	r7, sp, #0
 800c13a:	4603      	mov	r3, r0
 800c13c:	6039      	str	r1, [r7, #0]
 800c13e:	71fb      	strb	r3, [r7, #7]
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800c140:	2300      	movs	r3, #0
 800c142:	73fb      	strb	r3, [r7, #15]
 800c144:	e01a      	b.n	800c17c <GetKeyByID+0x48>
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 800c146:	4b12      	ldr	r3, [pc, #72]	@ (800c190 <GetKeyByID+0x5c>)
 800c148:	6819      	ldr	r1, [r3, #0]
 800c14a:	7bfa      	ldrb	r2, [r7, #15]
 800c14c:	4613      	mov	r3, r2
 800c14e:	011b      	lsls	r3, r3, #4
 800c150:	4413      	add	r3, r2
 800c152:	440b      	add	r3, r1
 800c154:	3310      	adds	r3, #16
 800c156:	781b      	ldrb	r3, [r3, #0]
 800c158:	79fa      	ldrb	r2, [r7, #7]
 800c15a:	429a      	cmp	r2, r3
 800c15c:	d10b      	bne.n	800c176 <GetKeyByID+0x42>
        {
            *keyItem = &( SeNvm->KeyList[i] );
 800c15e:	4b0c      	ldr	r3, [pc, #48]	@ (800c190 <GetKeyByID+0x5c>)
 800c160:	6819      	ldr	r1, [r3, #0]
 800c162:	7bfa      	ldrb	r2, [r7, #15]
 800c164:	4613      	mov	r3, r2
 800c166:	011b      	lsls	r3, r3, #4
 800c168:	4413      	add	r3, r2
 800c16a:	3310      	adds	r3, #16
 800c16c:	18ca      	adds	r2, r1, r3
 800c16e:	683b      	ldr	r3, [r7, #0]
 800c170:	601a      	str	r2, [r3, #0]
            return SECURE_ELEMENT_SUCCESS;
 800c172:	2300      	movs	r3, #0
 800c174:	e006      	b.n	800c184 <GetKeyByID+0x50>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800c176:	7bfb      	ldrb	r3, [r7, #15]
 800c178:	3301      	adds	r3, #1
 800c17a:	73fb      	strb	r3, [r7, #15]
 800c17c:	7bfb      	ldrb	r3, [r7, #15]
 800c17e:	2b09      	cmp	r3, #9
 800c180:	d9e1      	bls.n	800c146 <GetKeyByID+0x12>
        }
    }
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800c182:	2303      	movs	r3, #3
}
 800c184:	4618      	mov	r0, r3
 800c186:	3714      	adds	r7, #20
 800c188:	46bd      	mov	sp, r7
 800c18a:	bc80      	pop	{r7}
 800c18c:	4770      	bx	lr
 800c18e:	bf00      	nop
 800c190:	20000718 	.word	0x20000718

0800c194 <ComputeCmac>:
 * \param [out] cmac          - Computed cmac
 * \retval                    - Status of the operation
 */
static SecureElementStatus_t ComputeCmac( uint8_t* micBxBuffer, uint8_t* buffer, uint16_t size, KeyIdentifier_t keyID,
                                          uint32_t* cmac )
{
 800c194:	b590      	push	{r4, r7, lr}
 800c196:	b0d1      	sub	sp, #324	@ 0x144
 800c198:	af00      	add	r7, sp, #0
 800c19a:	f507 74a0 	add.w	r4, r7, #320	@ 0x140
 800c19e:	f5a4 749a 	sub.w	r4, r4, #308	@ 0x134
 800c1a2:	6020      	str	r0, [r4, #0]
 800c1a4:	f507 70a0 	add.w	r0, r7, #320	@ 0x140
 800c1a8:	f5a0 709c 	sub.w	r0, r0, #312	@ 0x138
 800c1ac:	6001      	str	r1, [r0, #0]
 800c1ae:	4619      	mov	r1, r3
 800c1b0:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800c1b4:	f5a3 739d 	sub.w	r3, r3, #314	@ 0x13a
 800c1b8:	801a      	strh	r2, [r3, #0]
 800c1ba:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800c1be:	f2a3 133b 	subw	r3, r3, #315	@ 0x13b
 800c1c2:	460a      	mov	r2, r1
 800c1c4:	701a      	strb	r2, [r3, #0]
    if( ( buffer == NULL ) || ( cmac == NULL ) )
 800c1c6:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800c1ca:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800c1ce:	681b      	ldr	r3, [r3, #0]
 800c1d0:	2b00      	cmp	r3, #0
 800c1d2:	d003      	beq.n	800c1dc <ComputeCmac+0x48>
 800c1d4:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 800c1d8:	2b00      	cmp	r3, #0
 800c1da:	d101      	bne.n	800c1e0 <ComputeCmac+0x4c>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800c1dc:	2302      	movs	r3, #2
 800c1de:	e05c      	b.n	800c29a <ComputeCmac+0x106>

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    uint8_t Cmac[16];
    AES_CMAC_CTX aesCmacCtx[1];

    AES_CMAC_Init( aesCmacCtx );
 800c1e0:	f107 0314 	add.w	r3, r7, #20
 800c1e4:	4618      	mov	r0, r3
 800c1e6:	f7fe ff1b 	bl	800b020 <AES_CMAC_Init>

    Key_t*                keyItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &keyItem );
 800c1ea:	f107 0210 	add.w	r2, r7, #16
 800c1ee:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800c1f2:	f2a3 133b 	subw	r3, r3, #315	@ 0x13b
 800c1f6:	781b      	ldrb	r3, [r3, #0]
 800c1f8:	4611      	mov	r1, r2
 800c1fa:	4618      	mov	r0, r3
 800c1fc:	f7ff ff9a 	bl	800c134 <GetKeyByID>
 800c200:	4603      	mov	r3, r0
 800c202:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f

    if( retval == SECURE_ELEMENT_SUCCESS )
 800c206:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
 800c20a:	2b00      	cmp	r3, #0
 800c20c:	d143      	bne.n	800c296 <ComputeCmac+0x102>
    {
        AES_CMAC_SetKey( aesCmacCtx, keyItem->KeyValue );
 800c20e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800c212:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800c216:	681b      	ldr	r3, [r3, #0]
 800c218:	1c5a      	adds	r2, r3, #1
 800c21a:	f107 0314 	add.w	r3, r7, #20
 800c21e:	4611      	mov	r1, r2
 800c220:	4618      	mov	r0, r3
 800c222:	f7fe ff16 	bl	800b052 <AES_CMAC_SetKey>

        if( micBxBuffer != NULL )
 800c226:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800c22a:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800c22e:	681b      	ldr	r3, [r3, #0]
 800c230:	2b00      	cmp	r3, #0
 800c232:	d009      	beq.n	800c248 <ComputeCmac+0xb4>
        {
            AES_CMAC_Update( aesCmacCtx, micBxBuffer, 16 );
 800c234:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800c238:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800c23c:	f107 0014 	add.w	r0, r7, #20
 800c240:	2210      	movs	r2, #16
 800c242:	6819      	ldr	r1, [r3, #0]
 800c244:	f7fe ff14 	bl	800b070 <AES_CMAC_Update>
        }

        AES_CMAC_Update( aesCmacCtx, buffer, size );
 800c248:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800c24c:	f5a3 739d 	sub.w	r3, r3, #314	@ 0x13a
 800c250:	881a      	ldrh	r2, [r3, #0]
 800c252:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800c256:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800c25a:	f107 0014 	add.w	r0, r7, #20
 800c25e:	6819      	ldr	r1, [r3, #0]
 800c260:	f7fe ff06 	bl	800b070 <AES_CMAC_Update>

        AES_CMAC_Final( Cmac, aesCmacCtx );
 800c264:	f107 0214 	add.w	r2, r7, #20
 800c268:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 800c26c:	4611      	mov	r1, r2
 800c26e:	4618      	mov	r0, r3
 800c270:	f7fe ffc0 	bl	800b1f4 <AES_CMAC_Final>

        // Bring into the required format
        *cmac = ( uint32_t )( ( uint32_t ) Cmac[3] << 24 | ( uint32_t ) Cmac[2] << 16 | ( uint32_t ) Cmac[1] << 8 |
 800c274:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800c278:	061a      	lsls	r2, r3, #24
 800c27a:	f897 312e 	ldrb.w	r3, [r7, #302]	@ 0x12e
 800c27e:	041b      	lsls	r3, r3, #16
 800c280:	431a      	orrs	r2, r3
 800c282:	f897 312d 	ldrb.w	r3, [r7, #301]	@ 0x12d
 800c286:	021b      	lsls	r3, r3, #8
 800c288:	4313      	orrs	r3, r2
                              ( uint32_t ) Cmac[0] );
 800c28a:	f897 212c 	ldrb.w	r2, [r7, #300]	@ 0x12c
        *cmac = ( uint32_t )( ( uint32_t ) Cmac[3] << 24 | ( uint32_t ) Cmac[2] << 16 | ( uint32_t ) Cmac[1] << 8 |
 800c28e:	431a      	orrs	r2, r3
 800c290:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 800c294:	601a      	str	r2, [r3, #0]
    if (rv != CKR_OK)
    {
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */
    return retval;
 800c296:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
}
 800c29a:	4618      	mov	r0, r3
 800c29c:	f507 77a2 	add.w	r7, r7, #324	@ 0x144
 800c2a0:	46bd      	mov	sp, r7
 800c2a2:	bd90      	pop	{r4, r7, pc}

0800c2a4 <SecureElementInit>:
/*
 * API functions
 */
/* ST_WORKAROUND: Add unique ID callback as input parameter */
SecureElementStatus_t SecureElementInit( SecureElementNvmData_t *nvm, SecureElementGetUniqueId seGetUniqueId )
{
 800c2a4:	b580      	push	{r7, lr}
 800c2a6:	b082      	sub	sp, #8
 800c2a8:	af00      	add	r7, sp, #0
 800c2aa:	6078      	str	r0, [r7, #4]
 800c2ac:	6039      	str	r1, [r7, #0]
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    if( nvm == NULL )
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	2b00      	cmp	r3, #0
 800c2b2:	d101      	bne.n	800c2b8 <SecureElementInit+0x14>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800c2b4:	2302      	movs	r3, #2
 800c2b6:	e00a      	b.n	800c2ce <SecureElementInit+0x2a>
    }

    // Initialize nvm pointer
    SeNvm = nvm;
 800c2b8:	4a07      	ldr	r2, [pc, #28]	@ (800c2d8 <SecureElementInit+0x34>)
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	6013      	str	r3, [r2, #0]

    // Initialize data
    memcpy1( ( uint8_t* )SeNvm, ( uint8_t* )&seNvmInit, sizeof( seNvmInit ) );
 800c2be:	4b06      	ldr	r3, [pc, #24]	@ (800c2d8 <SecureElementInit+0x34>)
 800c2c0:	681b      	ldr	r3, [r3, #0]
 800c2c2:	22c0      	movs	r2, #192	@ 0xc0
 800c2c4:	4905      	ldr	r1, [pc, #20]	@ (800c2dc <SecureElementInit+0x38>)
 800c2c6:	4618      	mov	r0, r3
 800c2c8:	f00b f8b9 	bl	801743e <memcpy1>
        // Get a DevEUI from MCU unique ID
        seGetUniqueId(SeNvm->DevEui);
    }
#endif /* STATIC_DEVICE_EUI */
#endif /* !SECURE_ELEMENT_PRE_PROVISIONED */
    return SECURE_ELEMENT_SUCCESS;
 800c2cc:	2300      	movs	r3, #0
}
 800c2ce:	4618      	mov	r0, r3
 800c2d0:	3708      	adds	r7, #8
 800c2d2:	46bd      	mov	sp, r7
 800c2d4:	bd80      	pop	{r7, pc}
 800c2d6:	bf00      	nop
 800c2d8:	20000718 	.word	0x20000718
 800c2dc:	0801fd30 	.word	0x0801fd30

0800c2e0 <SecureElementGetKeyByID>:
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
SecureElementStatus_t SecureElementGetKeyByID( KeyIdentifier_t keyID, Key_t **keyItem)
#else
SecureElementStatus_t SecureElementGetKeyByID( KeyIdentifier_t keyID, uint8_t* extractable_key )
#endif /* LORAWAN_KMS */
{
 800c2e0:	b480      	push	{r7}
 800c2e2:	b085      	sub	sp, #20
 800c2e4:	af00      	add	r7, sp, #0
 800c2e6:	4603      	mov	r3, r0
 800c2e8:	6039      	str	r1, [r7, #0]
 800c2ea:	71fb      	strb	r3, [r7, #7]
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
#if (defined (KEY_EXTRACTABLE) && (KEY_EXTRACTABLE == 1))
    for (uint8_t i = 0; i < NUM_OF_KEYS; i++)
 800c2ec:	2300      	movs	r3, #0
 800c2ee:	73fb      	strb	r3, [r7, #15]
 800c2f0:	e01a      	b.n	800c328 <SecureElementGetKeyByID+0x48>
    {
        if (SeNvm->KeyList[i].KeyID == keyID)
 800c2f2:	4b12      	ldr	r3, [pc, #72]	@ (800c33c <SecureElementGetKeyByID+0x5c>)
 800c2f4:	6819      	ldr	r1, [r3, #0]
 800c2f6:	7bfa      	ldrb	r2, [r7, #15]
 800c2f8:	4613      	mov	r3, r2
 800c2fa:	011b      	lsls	r3, r3, #4
 800c2fc:	4413      	add	r3, r2
 800c2fe:	440b      	add	r3, r1
 800c300:	3310      	adds	r3, #16
 800c302:	781b      	ldrb	r3, [r3, #0]
 800c304:	79fa      	ldrb	r2, [r7, #7]
 800c306:	429a      	cmp	r2, r3
 800c308:	d10b      	bne.n	800c322 <SecureElementGetKeyByID+0x42>
        {
            *keyItem = &(SeNvm->KeyList[i]);
 800c30a:	4b0c      	ldr	r3, [pc, #48]	@ (800c33c <SecureElementGetKeyByID+0x5c>)
 800c30c:	6819      	ldr	r1, [r3, #0]
 800c30e:	7bfa      	ldrb	r2, [r7, #15]
 800c310:	4613      	mov	r3, r2
 800c312:	011b      	lsls	r3, r3, #4
 800c314:	4413      	add	r3, r2
 800c316:	3310      	adds	r3, #16
 800c318:	18ca      	adds	r2, r1, r3
 800c31a:	683b      	ldr	r3, [r7, #0]
 800c31c:	601a      	str	r2, [r3, #0]
            return SECURE_ELEMENT_SUCCESS;
 800c31e:	2300      	movs	r3, #0
 800c320:	e006      	b.n	800c330 <SecureElementGetKeyByID+0x50>
    for (uint8_t i = 0; i < NUM_OF_KEYS; i++)
 800c322:	7bfb      	ldrb	r3, [r7, #15]
 800c324:	3301      	adds	r3, #1
 800c326:	73fb      	strb	r3, [r7, #15]
 800c328:	7bfb      	ldrb	r3, [r7, #15]
 800c32a:	2b09      	cmp	r3, #9
 800c32c:	d9e1      	bls.n	800c2f2 <SecureElementGetKeyByID+0x12>
        }
    }
#endif /* KEY_EXTRACTABLE */
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800c32e:	2303      	movs	r3, #3
        return SECURE_ELEMENT_ERROR;
    }
    return SECURE_ELEMENT_SUCCESS;

#endif /* LORAWAN_KMS == 1 */
}
 800c330:	4618      	mov	r0, r3
 800c332:	3714      	adds	r7, #20
 800c334:	46bd      	mov	sp, r7
 800c336:	bc80      	pop	{r7}
 800c338:	4770      	bx	lr
 800c33a:	bf00      	nop
 800c33c:	20000718 	.word	0x20000718

0800c340 <SecureElementPrintKeys>:

SecureElementStatus_t SecureElementPrintKeys( void )
{
 800c340:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c342:	b08b      	sub	sp, #44	@ 0x2c
 800c344:	af08      	add	r7, sp, #32
#if (defined (KEY_EXTRACTABLE) && (KEY_EXTRACTABLE == 1))
    MW_LOG(TS_OFF, VLEVEL_M, "###### OTAA ######\r\n");
 800c346:	4b3f      	ldr	r3, [pc, #252]	@ (800c444 <SecureElementPrintKeys+0x104>)
 800c348:	2200      	movs	r2, #0
 800c34a:	2100      	movs	r1, #0
 800c34c:	2002      	movs	r0, #2
 800c34e:	f00f fbc5 	bl	801badc <UTIL_ADV_TRACE_COND_FSend>
    PrintKey(APP_KEY);
 800c352:	2000      	movs	r0, #0
 800c354:	f7ff fe0c 	bl	800bf70 <PrintKey>
    PrintKey(NWK_KEY);
 800c358:	2001      	movs	r0, #1
 800c35a:	f7ff fe09 	bl	800bf70 <PrintKey>
    MW_LOG(TS_OFF, VLEVEL_M, "###### ABP  ######\r\n");
 800c35e:	4b3a      	ldr	r3, [pc, #232]	@ (800c448 <SecureElementPrintKeys+0x108>)
 800c360:	2200      	movs	r2, #0
 800c362:	2100      	movs	r1, #0
 800c364:	2002      	movs	r0, #2
 800c366:	f00f fbb9 	bl	801badc <UTIL_ADV_TRACE_COND_FSend>
    PrintKey(APP_S_KEY);
 800c36a:	2003      	movs	r0, #3
 800c36c:	f7ff fe00 	bl	800bf70 <PrintKey>
    PrintKey(NWK_S_KEY);
 800c370:	2002      	movs	r0, #2
 800c372:	f7ff fdfd 	bl	800bf70 <PrintKey>
#endif /* KEY_EXTRACTABLE */
    MW_LOG(TS_OFF, VLEVEL_M, "###### IDs  ######\r\n");
 800c376:	4b35      	ldr	r3, [pc, #212]	@ (800c44c <SecureElementPrintKeys+0x10c>)
 800c378:	2200      	movs	r2, #0
 800c37a:	2100      	movs	r1, #0
 800c37c:	2002      	movs	r0, #2
 800c37e:	f00f fbad 	bl	801badc <UTIL_ADV_TRACE_COND_FSend>
    MW_LOG(TS_OFF, VLEVEL_M, "###### DevEui:      %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800c382:	4b33      	ldr	r3, [pc, #204]	@ (800c450 <SecureElementPrintKeys+0x110>)
 800c384:	681b      	ldr	r3, [r3, #0]
 800c386:	781b      	ldrb	r3, [r3, #0]
 800c388:	461a      	mov	r2, r3
 800c38a:	4b31      	ldr	r3, [pc, #196]	@ (800c450 <SecureElementPrintKeys+0x110>)
 800c38c:	681b      	ldr	r3, [r3, #0]
 800c38e:	785b      	ldrb	r3, [r3, #1]
 800c390:	4619      	mov	r1, r3
 800c392:	4b2f      	ldr	r3, [pc, #188]	@ (800c450 <SecureElementPrintKeys+0x110>)
 800c394:	681b      	ldr	r3, [r3, #0]
 800c396:	789b      	ldrb	r3, [r3, #2]
 800c398:	4618      	mov	r0, r3
 800c39a:	4b2d      	ldr	r3, [pc, #180]	@ (800c450 <SecureElementPrintKeys+0x110>)
 800c39c:	681b      	ldr	r3, [r3, #0]
 800c39e:	78db      	ldrb	r3, [r3, #3]
 800c3a0:	461c      	mov	r4, r3
 800c3a2:	4b2b      	ldr	r3, [pc, #172]	@ (800c450 <SecureElementPrintKeys+0x110>)
 800c3a4:	681b      	ldr	r3, [r3, #0]
 800c3a6:	791b      	ldrb	r3, [r3, #4]
 800c3a8:	461d      	mov	r5, r3
 800c3aa:	4b29      	ldr	r3, [pc, #164]	@ (800c450 <SecureElementPrintKeys+0x110>)
 800c3ac:	681b      	ldr	r3, [r3, #0]
 800c3ae:	795b      	ldrb	r3, [r3, #5]
 800c3b0:	461e      	mov	r6, r3
 800c3b2:	4b27      	ldr	r3, [pc, #156]	@ (800c450 <SecureElementPrintKeys+0x110>)
 800c3b4:	681b      	ldr	r3, [r3, #0]
 800c3b6:	799b      	ldrb	r3, [r3, #6]
 800c3b8:	607b      	str	r3, [r7, #4]
 800c3ba:	4b25      	ldr	r3, [pc, #148]	@ (800c450 <SecureElementPrintKeys+0x110>)
 800c3bc:	681b      	ldr	r3, [r3, #0]
 800c3be:	79db      	ldrb	r3, [r3, #7]
 800c3c0:	9307      	str	r3, [sp, #28]
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	9306      	str	r3, [sp, #24]
 800c3c6:	9605      	str	r6, [sp, #20]
 800c3c8:	9504      	str	r5, [sp, #16]
 800c3ca:	9403      	str	r4, [sp, #12]
 800c3cc:	9002      	str	r0, [sp, #8]
 800c3ce:	9101      	str	r1, [sp, #4]
 800c3d0:	9200      	str	r2, [sp, #0]
 800c3d2:	4b20      	ldr	r3, [pc, #128]	@ (800c454 <SecureElementPrintKeys+0x114>)
 800c3d4:	2200      	movs	r2, #0
 800c3d6:	2100      	movs	r1, #0
 800c3d8:	2002      	movs	r0, #2
 800c3da:	f00f fb7f 	bl	801badc <UTIL_ADV_TRACE_COND_FSend>
           HEX8(SeNvm->DevEui));
    MW_LOG(TS_OFF, VLEVEL_M, "###### AppEui:      %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800c3de:	4b1c      	ldr	r3, [pc, #112]	@ (800c450 <SecureElementPrintKeys+0x110>)
 800c3e0:	681b      	ldr	r3, [r3, #0]
 800c3e2:	7a1b      	ldrb	r3, [r3, #8]
 800c3e4:	461a      	mov	r2, r3
 800c3e6:	4b1a      	ldr	r3, [pc, #104]	@ (800c450 <SecureElementPrintKeys+0x110>)
 800c3e8:	681b      	ldr	r3, [r3, #0]
 800c3ea:	7a5b      	ldrb	r3, [r3, #9]
 800c3ec:	4619      	mov	r1, r3
 800c3ee:	4b18      	ldr	r3, [pc, #96]	@ (800c450 <SecureElementPrintKeys+0x110>)
 800c3f0:	681b      	ldr	r3, [r3, #0]
 800c3f2:	7a9b      	ldrb	r3, [r3, #10]
 800c3f4:	4618      	mov	r0, r3
 800c3f6:	4b16      	ldr	r3, [pc, #88]	@ (800c450 <SecureElementPrintKeys+0x110>)
 800c3f8:	681b      	ldr	r3, [r3, #0]
 800c3fa:	7adb      	ldrb	r3, [r3, #11]
 800c3fc:	461c      	mov	r4, r3
 800c3fe:	4b14      	ldr	r3, [pc, #80]	@ (800c450 <SecureElementPrintKeys+0x110>)
 800c400:	681b      	ldr	r3, [r3, #0]
 800c402:	7b1b      	ldrb	r3, [r3, #12]
 800c404:	461d      	mov	r5, r3
 800c406:	4b12      	ldr	r3, [pc, #72]	@ (800c450 <SecureElementPrintKeys+0x110>)
 800c408:	681b      	ldr	r3, [r3, #0]
 800c40a:	7b5b      	ldrb	r3, [r3, #13]
 800c40c:	461e      	mov	r6, r3
 800c40e:	4b10      	ldr	r3, [pc, #64]	@ (800c450 <SecureElementPrintKeys+0x110>)
 800c410:	681b      	ldr	r3, [r3, #0]
 800c412:	7b9b      	ldrb	r3, [r3, #14]
 800c414:	607b      	str	r3, [r7, #4]
 800c416:	4b0e      	ldr	r3, [pc, #56]	@ (800c450 <SecureElementPrintKeys+0x110>)
 800c418:	681b      	ldr	r3, [r3, #0]
 800c41a:	7bdb      	ldrb	r3, [r3, #15]
 800c41c:	9307      	str	r3, [sp, #28]
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	9306      	str	r3, [sp, #24]
 800c422:	9605      	str	r6, [sp, #20]
 800c424:	9504      	str	r5, [sp, #16]
 800c426:	9403      	str	r4, [sp, #12]
 800c428:	9002      	str	r0, [sp, #8]
 800c42a:	9101      	str	r1, [sp, #4]
 800c42c:	9200      	str	r2, [sp, #0]
 800c42e:	4b0a      	ldr	r3, [pc, #40]	@ (800c458 <SecureElementPrintKeys+0x118>)
 800c430:	2200      	movs	r2, #0
 800c432:	2100      	movs	r1, #0
 800c434:	2002      	movs	r0, #2
 800c436:	f00f fb51 	bl	801badc <UTIL_ADV_TRACE_COND_FSend>
           HEX8(SeNvm->JoinEui));
    return SECURE_ELEMENT_SUCCESS;
 800c43a:	2300      	movs	r3, #0
}
 800c43c:	4618      	mov	r0, r3
 800c43e:	370c      	adds	r7, #12
 800c440:	46bd      	mov	sp, r7
 800c442:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c444:	0801f030 	.word	0x0801f030
 800c448:	0801f048 	.word	0x0801f048
 800c44c:	0801f060 	.word	0x0801f060
 800c450:	20000718 	.word	0x20000718
 800c454:	0801f078 	.word	0x0801f078
 800c458:	0801f0b8 	.word	0x0801f0b8

0800c45c <SecureElementPrintSessionKeys>:
    
SecureElementStatus_t SecureElementPrintSessionKeys( void )
{
 800c45c:	b580      	push	{r7, lr}
 800c45e:	af00      	add	r7, sp, #0
#if (defined (KEY_EXTRACTABLE) && (KEY_EXTRACTABLE == 1))
    PrintKey(MC_ROOT_KEY);
 800c460:	2004      	movs	r0, #4
 800c462:	f7ff fd85 	bl	800bf70 <PrintKey>
    PrintKey(MC_KE_KEY);
 800c466:	207f      	movs	r0, #127	@ 0x7f
 800c468:	f7ff fd82 	bl	800bf70 <PrintKey>
#if( USE_LRWAN_1_1_X_CRYPTO == 1 )
    PrintKey(F_NWK_S_INT_KEY);
    PrintKey(S_NWK_S_INT_KEY);
    PrintKey(NWK_S_ENC_KEY);
#else
    PrintKey(NWK_S_KEY);
 800c46c:	2002      	movs	r0, #2
 800c46e:	f7ff fd7f 	bl	800bf70 <PrintKey>
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */
    PrintKey(APP_S_KEY);
 800c472:	2003      	movs	r0, #3
 800c474:	f7ff fd7c 	bl	800bf70 <PrintKey>
#endif /* KEY_EXTRACTABLE */
    return SECURE_ELEMENT_SUCCESS;
 800c478:	2300      	movs	r3, #0
}
 800c47a:	4618      	mov	r0, r3
 800c47c:	bd80      	pop	{r7, pc}
	...

0800c480 <SecureElementSetKey>:
#endif /* LORAWAN_KMS */
}
/* ST_WORKAROUND_END */

SecureElementStatus_t SecureElementSetKey( KeyIdentifier_t keyID, uint8_t* key )
{
 800c480:	b580      	push	{r7, lr}
 800c482:	b088      	sub	sp, #32
 800c484:	af00      	add	r7, sp, #0
 800c486:	4603      	mov	r3, r0
 800c488:	6039      	str	r1, [r7, #0]
 800c48a:	71fb      	strb	r3, [r7, #7]
    if( key == NULL )
 800c48c:	683b      	ldr	r3, [r7, #0]
 800c48e:	2b00      	cmp	r3, #0
 800c490:	d101      	bne.n	800c496 <SecureElementSetKey+0x16>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800c492:	2302      	movs	r3, #2
 800c494:	e04c      	b.n	800c530 <SecureElementSetKey+0xb0>
    }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800c496:	2300      	movs	r3, #0
 800c498:	77fb      	strb	r3, [r7, #31]
 800c49a:	e045      	b.n	800c528 <SecureElementSetKey+0xa8>
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 800c49c:	4b26      	ldr	r3, [pc, #152]	@ (800c538 <SecureElementSetKey+0xb8>)
 800c49e:	6819      	ldr	r1, [r3, #0]
 800c4a0:	7ffa      	ldrb	r2, [r7, #31]
 800c4a2:	4613      	mov	r3, r2
 800c4a4:	011b      	lsls	r3, r3, #4
 800c4a6:	4413      	add	r3, r2
 800c4a8:	440b      	add	r3, r1
 800c4aa:	3310      	adds	r3, #16
 800c4ac:	781b      	ldrb	r3, [r3, #0]
 800c4ae:	79fa      	ldrb	r2, [r7, #7]
 800c4b0:	429a      	cmp	r2, r3
 800c4b2:	d136      	bne.n	800c522 <SecureElementSetKey+0xa2>
        {
            /* ST_WORKAROUND_BEGIN: reduced LORAMAC_MAX_MC_CTX */
#if ( LORAMAC_MAX_MC_CTX == 1 )
            if ( keyID == MC_KEY_0 )
 800c4b4:	79fb      	ldrb	r3, [r7, #7]
 800c4b6:	2b80      	cmp	r3, #128	@ 0x80
 800c4b8:	d123      	bne.n	800c502 <SecureElementSetKey+0x82>
#else /* LORAMAC_MAX_MC_CTX > 1 */
            if( ( keyID == MC_KEY_0 ) || ( keyID == MC_KEY_1 ) || ( keyID == MC_KEY_2 ) || ( keyID == MC_KEY_3 ) )
#endif /* LORAMAC_MAX_MC_CTX */
            /* ST_WORKAROUND_END */
            {  // Decrypt the key if its a Mckey
                SecureElementStatus_t retval           = SECURE_ELEMENT_ERROR;
 800c4ba:	2306      	movs	r3, #6
 800c4bc:	77bb      	strb	r3, [r7, #30]
                uint8_t               decryptedKey[16] = { 0 };
 800c4be:	2300      	movs	r3, #0
 800c4c0:	60fb      	str	r3, [r7, #12]
 800c4c2:	f107 0310 	add.w	r3, r7, #16
 800c4c6:	2200      	movs	r2, #0
 800c4c8:	601a      	str	r2, [r3, #0]
 800c4ca:	605a      	str	r2, [r3, #4]
 800c4cc:	609a      	str	r2, [r3, #8]

                retval = SecureElementAesEncrypt( key, 16, MC_KE_KEY, decryptedKey );
 800c4ce:	f107 030c 	add.w	r3, r7, #12
 800c4d2:	227f      	movs	r2, #127	@ 0x7f
 800c4d4:	2110      	movs	r1, #16
 800c4d6:	6838      	ldr	r0, [r7, #0]
 800c4d8:	f000 f87d 	bl	800c5d6 <SecureElementAesEncrypt>
 800c4dc:	4603      	mov	r3, r0
 800c4de:	77bb      	strb	r3, [r7, #30]

                memcpy1( SeNvm->KeyList[i].KeyValue, decryptedKey, SE_KEY_SIZE );
 800c4e0:	4b15      	ldr	r3, [pc, #84]	@ (800c538 <SecureElementSetKey+0xb8>)
 800c4e2:	6819      	ldr	r1, [r3, #0]
 800c4e4:	7ffa      	ldrb	r2, [r7, #31]
 800c4e6:	4613      	mov	r3, r2
 800c4e8:	011b      	lsls	r3, r3, #4
 800c4ea:	4413      	add	r3, r2
 800c4ec:	3310      	adds	r3, #16
 800c4ee:	440b      	add	r3, r1
 800c4f0:	3301      	adds	r3, #1
 800c4f2:	f107 010c 	add.w	r1, r7, #12
 800c4f6:	2210      	movs	r2, #16
 800c4f8:	4618      	mov	r0, r3
 800c4fa:	f00a ffa0 	bl	801743e <memcpy1>
                return retval;
 800c4fe:	7fbb      	ldrb	r3, [r7, #30]
 800c500:	e016      	b.n	800c530 <SecureElementSetKey+0xb0>
            }
            else
            {
                memcpy1( SeNvm->KeyList[i].KeyValue, key, SE_KEY_SIZE );
 800c502:	4b0d      	ldr	r3, [pc, #52]	@ (800c538 <SecureElementSetKey+0xb8>)
 800c504:	6819      	ldr	r1, [r3, #0]
 800c506:	7ffa      	ldrb	r2, [r7, #31]
 800c508:	4613      	mov	r3, r2
 800c50a:	011b      	lsls	r3, r3, #4
 800c50c:	4413      	add	r3, r2
 800c50e:	3310      	adds	r3, #16
 800c510:	440b      	add	r3, r1
 800c512:	3301      	adds	r3, #1
 800c514:	2210      	movs	r2, #16
 800c516:	6839      	ldr	r1, [r7, #0]
 800c518:	4618      	mov	r0, r3
 800c51a:	f00a ff90 	bl	801743e <memcpy1>
                return SECURE_ELEMENT_SUCCESS;
 800c51e:	2300      	movs	r3, #0
 800c520:	e006      	b.n	800c530 <SecureElementSetKey+0xb0>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800c522:	7ffb      	ldrb	r3, [r7, #31]
 800c524:	3301      	adds	r3, #1
 800c526:	77fb      	strb	r3, [r7, #31]
 800c528:	7ffb      	ldrb	r3, [r7, #31]
 800c52a:	2b09      	cmp	r3, #9
 800c52c:	d9b6      	bls.n	800c49c <SecureElementSetKey+0x1c>
            }
        }
    }

    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800c52e:	2303      	movs	r3, #3
    {
        retval = SECURE_ELEMENT_ERROR;
    }
    return retval;
#endif /* LORAWAN_KMS */
}
 800c530:	4618      	mov	r0, r3
 800c532:	3720      	adds	r7, #32
 800c534:	46bd      	mov	sp, r7
 800c536:	bd80      	pop	{r7, pc}
 800c538:	20000718 	.word	0x20000718

0800c53c <SecureElementComputeAesCmac>:

SecureElementStatus_t SecureElementComputeAesCmac( uint8_t* micBxBuffer, uint8_t* buffer, uint16_t size,
                                                   KeyIdentifier_t keyID, uint32_t* cmac )
{
 800c53c:	b580      	push	{r7, lr}
 800c53e:	b086      	sub	sp, #24
 800c540:	af02      	add	r7, sp, #8
 800c542:	60f8      	str	r0, [r7, #12]
 800c544:	60b9      	str	r1, [r7, #8]
 800c546:	4611      	mov	r1, r2
 800c548:	461a      	mov	r2, r3
 800c54a:	460b      	mov	r3, r1
 800c54c:	80fb      	strh	r3, [r7, #6]
 800c54e:	4613      	mov	r3, r2
 800c550:	717b      	strb	r3, [r7, #5]
    if( keyID >= LORAMAC_CRYPTO_MULTICAST_KEYS )
 800c552:	797b      	ldrb	r3, [r7, #5]
 800c554:	2b7e      	cmp	r3, #126	@ 0x7e
 800c556:	d901      	bls.n	800c55c <SecureElementComputeAesCmac+0x20>
    {
        // Never accept multicast key identifier for cmac computation
        return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800c558:	2303      	movs	r3, #3
 800c55a:	e009      	b.n	800c570 <SecureElementComputeAesCmac+0x34>
    }

    return ComputeCmac( micBxBuffer, buffer, size, keyID, cmac );
 800c55c:	7979      	ldrb	r1, [r7, #5]
 800c55e:	88fa      	ldrh	r2, [r7, #6]
 800c560:	69bb      	ldr	r3, [r7, #24]
 800c562:	9300      	str	r3, [sp, #0]
 800c564:	460b      	mov	r3, r1
 800c566:	68b9      	ldr	r1, [r7, #8]
 800c568:	68f8      	ldr	r0, [r7, #12]
 800c56a:	f7ff fe13 	bl	800c194 <ComputeCmac>
 800c56e:	4603      	mov	r3, r0
}
 800c570:	4618      	mov	r0, r3
 800c572:	3710      	adds	r7, #16
 800c574:	46bd      	mov	sp, r7
 800c576:	bd80      	pop	{r7, pc}

0800c578 <SecureElementVerifyAesCmac>:

SecureElementStatus_t SecureElementVerifyAesCmac( uint8_t* buffer, uint16_t size, uint32_t expectedCmac,
                                                  KeyIdentifier_t keyID )
{
 800c578:	b580      	push	{r7, lr}
 800c57a:	b088      	sub	sp, #32
 800c57c:	af02      	add	r7, sp, #8
 800c57e:	60f8      	str	r0, [r7, #12]
 800c580:	607a      	str	r2, [r7, #4]
 800c582:	461a      	mov	r2, r3
 800c584:	460b      	mov	r3, r1
 800c586:	817b      	strh	r3, [r7, #10]
 800c588:	4613      	mov	r3, r2
 800c58a:	727b      	strb	r3, [r7, #9]
    if( buffer == NULL )
 800c58c:	68fb      	ldr	r3, [r7, #12]
 800c58e:	2b00      	cmp	r3, #0
 800c590:	d101      	bne.n	800c596 <SecureElementVerifyAesCmac+0x1e>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800c592:	2302      	movs	r3, #2
 800c594:	e01b      	b.n	800c5ce <SecureElementVerifyAesCmac+0x56>
    }

    SecureElementStatus_t retval   = SECURE_ELEMENT_ERROR;
 800c596:	2306      	movs	r3, #6
 800c598:	75fb      	strb	r3, [r7, #23]
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    uint32_t              compCmac = 0;
 800c59a:	2300      	movs	r3, #0
 800c59c:	613b      	str	r3, [r7, #16]
    retval                         = ComputeCmac( NULL, buffer, size, keyID, &compCmac );
 800c59e:	7a79      	ldrb	r1, [r7, #9]
 800c5a0:	897a      	ldrh	r2, [r7, #10]
 800c5a2:	f107 0310 	add.w	r3, r7, #16
 800c5a6:	9300      	str	r3, [sp, #0]
 800c5a8:	460b      	mov	r3, r1
 800c5aa:	68f9      	ldr	r1, [r7, #12]
 800c5ac:	2000      	movs	r0, #0
 800c5ae:	f7ff fdf1 	bl	800c194 <ComputeCmac>
 800c5b2:	4603      	mov	r3, r0
 800c5b4:	75fb      	strb	r3, [r7, #23]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800c5b6:	7dfb      	ldrb	r3, [r7, #23]
 800c5b8:	2b00      	cmp	r3, #0
 800c5ba:	d001      	beq.n	800c5c0 <SecureElementVerifyAesCmac+0x48>
    {
        return retval;
 800c5bc:	7dfb      	ldrb	r3, [r7, #23]
 800c5be:	e006      	b.n	800c5ce <SecureElementVerifyAesCmac+0x56>
    }

    if( expectedCmac != compCmac )
 800c5c0:	693b      	ldr	r3, [r7, #16]
 800c5c2:	687a      	ldr	r2, [r7, #4]
 800c5c4:	429a      	cmp	r2, r3
 800c5c6:	d001      	beq.n	800c5cc <SecureElementVerifyAesCmac+0x54>
    {
        retval = SECURE_ELEMENT_FAIL_CMAC;
 800c5c8:	2301      	movs	r3, #1
 800c5ca:	75fb      	strb	r3, [r7, #23]
        retval = SECURE_ELEMENT_ERROR;
    }

#endif /* LORAWAN_KMS */

    return retval;
 800c5cc:	7dfb      	ldrb	r3, [r7, #23]
}
 800c5ce:	4618      	mov	r0, r3
 800c5d0:	3718      	adds	r7, #24
 800c5d2:	46bd      	mov	sp, r7
 800c5d4:	bd80      	pop	{r7, pc}

0800c5d6 <SecureElementAesEncrypt>:

SecureElementStatus_t SecureElementAesEncrypt( uint8_t* buffer, uint16_t size, KeyIdentifier_t keyID,
                                               uint8_t* encBuffer )
{
 800c5d6:	b580      	push	{r7, lr}
 800c5d8:	b0c2      	sub	sp, #264	@ 0x108
 800c5da:	af00      	add	r7, sp, #0
 800c5dc:	60f8      	str	r0, [r7, #12]
 800c5de:	4608      	mov	r0, r1
 800c5e0:	4611      	mov	r1, r2
 800c5e2:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 800c5e6:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 800c5ea:	6013      	str	r3, [r2, #0]
 800c5ec:	4603      	mov	r3, r0
 800c5ee:	817b      	strh	r3, [r7, #10]
 800c5f0:	460b      	mov	r3, r1
 800c5f2:	727b      	strb	r3, [r7, #9]
    if( buffer == NULL || encBuffer == NULL )
 800c5f4:	68fb      	ldr	r3, [r7, #12]
 800c5f6:	2b00      	cmp	r3, #0
 800c5f8:	d006      	beq.n	800c608 <SecureElementAesEncrypt+0x32>
 800c5fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c5fe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c602:	681b      	ldr	r3, [r3, #0]
 800c604:	2b00      	cmp	r3, #0
 800c606:	d101      	bne.n	800c60c <SecureElementAesEncrypt+0x36>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800c608:	2302      	movs	r3, #2
 800c60a:	e046      	b.n	800c69a <SecureElementAesEncrypt+0xc4>
    }

    // Check if the size is divisible by 16,
    if( ( size % 16 ) != 0 )
 800c60c:	897b      	ldrh	r3, [r7, #10]
 800c60e:	f003 030f 	and.w	r3, r3, #15
 800c612:	b29b      	uxth	r3, r3
 800c614:	2b00      	cmp	r3, #0
 800c616:	d001      	beq.n	800c61c <SecureElementAesEncrypt+0x46>
    {
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 800c618:	2305      	movs	r3, #5
 800c61a:	e03e      	b.n	800c69a <SecureElementAesEncrypt+0xc4>
    }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    lorawan_aes_context aesContext;
    memset1( aesContext.ksch, '\0', 240 );
 800c61c:	f107 0314 	add.w	r3, r7, #20
 800c620:	22f0      	movs	r2, #240	@ 0xf0
 800c622:	2100      	movs	r1, #0
 800c624:	4618      	mov	r0, r3
 800c626:	f00a ff45 	bl	80174b4 <memset1>

    Key_t*                pItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &pItem );
 800c62a:	f107 0210 	add.w	r2, r7, #16
 800c62e:	7a7b      	ldrb	r3, [r7, #9]
 800c630:	4611      	mov	r1, r2
 800c632:	4618      	mov	r0, r3
 800c634:	f7ff fd7e 	bl	800c134 <GetKeyByID>
 800c638:	4603      	mov	r3, r0
 800c63a:	f887 3106 	strb.w	r3, [r7, #262]	@ 0x106

    if( retval == SECURE_ELEMENT_SUCCESS )
 800c63e:	f897 3106 	ldrb.w	r3, [r7, #262]	@ 0x106
 800c642:	2b00      	cmp	r3, #0
 800c644:	d127      	bne.n	800c696 <SecureElementAesEncrypt+0xc0>
    {
        lorawan_aes_set_key(pItem->KeyValue, 16, &aesContext);
 800c646:	693b      	ldr	r3, [r7, #16]
 800c648:	3301      	adds	r3, #1
 800c64a:	f107 0214 	add.w	r2, r7, #20
 800c64e:	2110      	movs	r1, #16
 800c650:	4618      	mov	r0, r3
 800c652:	f7ff fb65 	bl	800bd20 <lorawan_aes_set_key>

        uint8_t block = 0;
 800c656:	2300      	movs	r3, #0
 800c658:	f887 3107 	strb.w	r3, [r7, #263]	@ 0x107

        while( size != 0 )
 800c65c:	e018      	b.n	800c690 <SecureElementAesEncrypt+0xba>
        {
            lorawan_aes_encrypt(&buffer[block], &encBuffer[block], &aesContext);
 800c65e:	f897 3107 	ldrb.w	r3, [r7, #263]	@ 0x107
 800c662:	68fa      	ldr	r2, [r7, #12]
 800c664:	18d0      	adds	r0, r2, r3
 800c666:	f897 3107 	ldrb.w	r3, [r7, #263]	@ 0x107
 800c66a:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 800c66e:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 800c672:	6812      	ldr	r2, [r2, #0]
 800c674:	4413      	add	r3, r2
 800c676:	f107 0214 	add.w	r2, r7, #20
 800c67a:	4619      	mov	r1, r3
 800c67c:	f7ff fc2e 	bl	800bedc <lorawan_aes_encrypt>
            block = block + 16;
 800c680:	f897 3107 	ldrb.w	r3, [r7, #263]	@ 0x107
 800c684:	3310      	adds	r3, #16
 800c686:	f887 3107 	strb.w	r3, [r7, #263]	@ 0x107
            size  = size - 16;
 800c68a:	897b      	ldrh	r3, [r7, #10]
 800c68c:	3b10      	subs	r3, #16
 800c68e:	817b      	strh	r3, [r7, #10]
        while( size != 0 )
 800c690:	897b      	ldrh	r3, [r7, #10]
 800c692:	2b00      	cmp	r3, #0
 800c694:	d1e3      	bne.n	800c65e <SecureElementAesEncrypt+0x88>
    {
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */

    return retval;
 800c696:	f897 3106 	ldrb.w	r3, [r7, #262]	@ 0x106
}
 800c69a:	4618      	mov	r0, r3
 800c69c:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 800c6a0:	46bd      	mov	sp, r7
 800c6a2:	bd80      	pop	{r7, pc}

0800c6a4 <SecureElementDeriveAndStoreKey>:

SecureElementStatus_t SecureElementDeriveAndStoreKey( uint8_t* input, KeyIdentifier_t rootKeyID,
                                                      KeyIdentifier_t targetKeyID )
{
 800c6a4:	b580      	push	{r7, lr}
 800c6a6:	b088      	sub	sp, #32
 800c6a8:	af00      	add	r7, sp, #0
 800c6aa:	6078      	str	r0, [r7, #4]
 800c6ac:	460b      	mov	r3, r1
 800c6ae:	70fb      	strb	r3, [r7, #3]
 800c6b0:	4613      	mov	r3, r2
 800c6b2:	70bb      	strb	r3, [r7, #2]
    if( input == NULL )
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	2b00      	cmp	r3, #0
 800c6b8:	d101      	bne.n	800c6be <SecureElementDeriveAndStoreKey+0x1a>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800c6ba:	2302      	movs	r3, #2
 800c6bc:	e02e      	b.n	800c71c <SecureElementDeriveAndStoreKey+0x78>
    }

    SecureElementStatus_t retval  = SECURE_ELEMENT_ERROR;
 800c6be:	2306      	movs	r3, #6
 800c6c0:	77fb      	strb	r3, [r7, #31]

    // In case of MC_KE_KEY, only McRootKey can be used as root key
    if( targetKeyID == MC_KE_KEY )
 800c6c2:	78bb      	ldrb	r3, [r7, #2]
 800c6c4:	2b7f      	cmp	r3, #127	@ 0x7f
 800c6c6:	d104      	bne.n	800c6d2 <SecureElementDeriveAndStoreKey+0x2e>
    {
        if( rootKeyID != MC_ROOT_KEY )
 800c6c8:	78fb      	ldrb	r3, [r7, #3]
 800c6ca:	2b04      	cmp	r3, #4
 800c6cc:	d001      	beq.n	800c6d2 <SecureElementDeriveAndStoreKey+0x2e>
        {
            return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800c6ce:	2303      	movs	r3, #3
 800c6d0:	e024      	b.n	800c71c <SecureElementDeriveAndStoreKey+0x78>
        }
    }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    uint8_t key[16] = { 0 };
 800c6d2:	2300      	movs	r3, #0
 800c6d4:	60fb      	str	r3, [r7, #12]
 800c6d6:	f107 0310 	add.w	r3, r7, #16
 800c6da:	2200      	movs	r2, #0
 800c6dc:	601a      	str	r2, [r3, #0]
 800c6de:	605a      	str	r2, [r3, #4]
 800c6e0:	609a      	str	r2, [r3, #8]
    // Derive key
    retval = SecureElementAesEncrypt( input, 16, rootKeyID, key );
 800c6e2:	f107 030c 	add.w	r3, r7, #12
 800c6e6:	78fa      	ldrb	r2, [r7, #3]
 800c6e8:	2110      	movs	r1, #16
 800c6ea:	6878      	ldr	r0, [r7, #4]
 800c6ec:	f7ff ff73 	bl	800c5d6 <SecureElementAesEncrypt>
 800c6f0:	4603      	mov	r3, r0
 800c6f2:	77fb      	strb	r3, [r7, #31]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800c6f4:	7ffb      	ldrb	r3, [r7, #31]
 800c6f6:	2b00      	cmp	r3, #0
 800c6f8:	d001      	beq.n	800c6fe <SecureElementDeriveAndStoreKey+0x5a>
    {
        return retval;
 800c6fa:	7ffb      	ldrb	r3, [r7, #31]
 800c6fc:	e00e      	b.n	800c71c <SecureElementDeriveAndStoreKey+0x78>
    }

    // Store key
    retval = SecureElementSetKey( targetKeyID, key );
 800c6fe:	f107 020c 	add.w	r2, r7, #12
 800c702:	78bb      	ldrb	r3, [r7, #2]
 800c704:	4611      	mov	r1, r2
 800c706:	4618      	mov	r0, r3
 800c708:	f7ff feba 	bl	800c480 <SecureElementSetKey>
 800c70c:	4603      	mov	r3, r0
 800c70e:	77fb      	strb	r3, [r7, #31]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800c710:	7ffb      	ldrb	r3, [r7, #31]
 800c712:	2b00      	cmp	r3, #0
 800c714:	d001      	beq.n	800c71a <SecureElementDeriveAndStoreKey+0x76>
    {
        return retval;
 800c716:	7ffb      	ldrb	r3, [r7, #31]
 800c718:	e000      	b.n	800c71c <SecureElementDeriveAndStoreKey+0x78>
    }

    return SECURE_ELEMENT_SUCCESS;
 800c71a:	2300      	movs	r3, #0
    {
        retval = SECURE_ELEMENT_ERROR;
    }
    return retval;
#endif /* LORAWAN_KMS */
}
 800c71c:	4618      	mov	r0, r3
 800c71e:	3720      	adds	r7, #32
 800c720:	46bd      	mov	sp, r7
 800c722:	bd80      	pop	{r7, pc}

0800c724 <SecureElementProcessJoinAccept>:

SecureElementStatus_t SecureElementProcessJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t* joinEui,
                                                      uint16_t devNonce, uint8_t* encJoinAccept,
                                                      uint8_t encJoinAcceptSize, uint8_t* decJoinAccept,
                                                      uint8_t* versionMinor )
{
 800c724:	b580      	push	{r7, lr}
 800c726:	b086      	sub	sp, #24
 800c728:	af00      	add	r7, sp, #0
 800c72a:	60b9      	str	r1, [r7, #8]
 800c72c:	607b      	str	r3, [r7, #4]
 800c72e:	4603      	mov	r3, r0
 800c730:	73fb      	strb	r3, [r7, #15]
 800c732:	4613      	mov	r3, r2
 800c734:	81bb      	strh	r3, [r7, #12]
    if( ( encJoinAccept == NULL ) || ( decJoinAccept == NULL ) || ( versionMinor == NULL ) )
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	2b00      	cmp	r3, #0
 800c73a:	d005      	beq.n	800c748 <SecureElementProcessJoinAccept+0x24>
 800c73c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c73e:	2b00      	cmp	r3, #0
 800c740:	d002      	beq.n	800c748 <SecureElementProcessJoinAccept+0x24>
 800c742:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c744:	2b00      	cmp	r3, #0
 800c746:	d101      	bne.n	800c74c <SecureElementProcessJoinAccept+0x28>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800c748:	2302      	movs	r3, #2
 800c74a:	e064      	b.n	800c816 <SecureElementProcessJoinAccept+0xf2>
    }

    // Check that frame size isn't bigger than a JoinAccept with CFList size
    if( encJoinAcceptSize > LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE )
 800c74c:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c750:	2b21      	cmp	r3, #33	@ 0x21
 800c752:	d901      	bls.n	800c758 <SecureElementProcessJoinAccept+0x34>
    {
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 800c754:	2305      	movs	r3, #5
 800c756:	e05e      	b.n	800c816 <SecureElementProcessJoinAccept+0xf2>
    }

    // Determine decryption key
    KeyIdentifier_t encKeyID = NWK_KEY;
 800c758:	2301      	movs	r3, #1
 800c75a:	75fb      	strb	r3, [r7, #23]
    {
        encKeyID = J_S_ENC_KEY;
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

    memcpy1( decJoinAccept, encJoinAccept, encJoinAcceptSize );
 800c75c:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c760:	b29b      	uxth	r3, r3
 800c762:	461a      	mov	r2, r3
 800c764:	6879      	ldr	r1, [r7, #4]
 800c766:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800c768:	f00a fe69 	bl	801743e <memcpy1>

    // Decrypt JoinAccept, skip MHDR
    if( SecureElementAesEncrypt( encJoinAccept + LORAMAC_MHDR_FIELD_SIZE, encJoinAcceptSize - LORAMAC_MHDR_FIELD_SIZE,
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	1c58      	adds	r0, r3, #1
 800c770:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c774:	b29b      	uxth	r3, r3
 800c776:	3b01      	subs	r3, #1
 800c778:	b299      	uxth	r1, r3
 800c77a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c77c:	3301      	adds	r3, #1
 800c77e:	7dfa      	ldrb	r2, [r7, #23]
 800c780:	f7ff ff29 	bl	800c5d6 <SecureElementAesEncrypt>
 800c784:	4603      	mov	r3, r0
 800c786:	2b00      	cmp	r3, #0
 800c788:	d001      	beq.n	800c78e <SecureElementProcessJoinAccept+0x6a>
                                 encKeyID, decJoinAccept + LORAMAC_MHDR_FIELD_SIZE ) != SECURE_ELEMENT_SUCCESS )
    {
        return SECURE_ELEMENT_FAIL_ENCRYPT;
 800c78a:	2307      	movs	r3, #7
 800c78c:	e043      	b.n	800c816 <SecureElementProcessJoinAccept+0xf2>
    }

    *versionMinor = ( ( decJoinAccept[11] & 0x80 ) == 0x80 ) ? 1 : 0;
 800c78e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c790:	330b      	adds	r3, #11
 800c792:	781b      	ldrb	r3, [r3, #0]
 800c794:	09db      	lsrs	r3, r3, #7
 800c796:	b2da      	uxtb	r2, r3
 800c798:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c79a:	701a      	strb	r2, [r3, #0]

    uint32_t mic = 0;
 800c79c:	2300      	movs	r3, #0
 800c79e:	613b      	str	r3, [r7, #16]

    mic = ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE] << 0 );
 800c7a0:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c7a4:	3b04      	subs	r3, #4
 800c7a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c7a8:	4413      	add	r3, r2
 800c7aa:	781b      	ldrb	r3, [r3, #0]
 800c7ac:	613b      	str	r3, [r7, #16]
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 1] << 8 );
 800c7ae:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c7b2:	3b03      	subs	r3, #3
 800c7b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c7b6:	4413      	add	r3, r2
 800c7b8:	781b      	ldrb	r3, [r3, #0]
 800c7ba:	021b      	lsls	r3, r3, #8
 800c7bc:	693a      	ldr	r2, [r7, #16]
 800c7be:	4313      	orrs	r3, r2
 800c7c0:	613b      	str	r3, [r7, #16]
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 2] << 16 );
 800c7c2:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c7c6:	3b02      	subs	r3, #2
 800c7c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c7ca:	4413      	add	r3, r2
 800c7cc:	781b      	ldrb	r3, [r3, #0]
 800c7ce:	041b      	lsls	r3, r3, #16
 800c7d0:	693a      	ldr	r2, [r7, #16]
 800c7d2:	4313      	orrs	r3, r2
 800c7d4:	613b      	str	r3, [r7, #16]
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 3] << 24 );
 800c7d6:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c7da:	3b01      	subs	r3, #1
 800c7dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c7de:	4413      	add	r3, r2
 800c7e0:	781b      	ldrb	r3, [r3, #0]
 800c7e2:	061b      	lsls	r3, r3, #24
 800c7e4:	693a      	ldr	r2, [r7, #16]
 800c7e6:	4313      	orrs	r3, r2
 800c7e8:	613b      	str	r3, [r7, #16]
    //  - Header buffer to be used for MIC computation
    //        - LoRaWAN 1.0.x : micHeader = [MHDR(1)]
    //        - LoRaWAN 1.1.x : micHeader = [JoinReqType(1), JoinEUI(8), DevNonce(2), MHDR(1)]

    // Verify mic
    if( *versionMinor == 0 )
 800c7ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c7ec:	781b      	ldrb	r3, [r3, #0]
 800c7ee:	2b00      	cmp	r3, #0
 800c7f0:	d10e      	bne.n	800c810 <SecureElementProcessJoinAccept+0xec>
    {
        // For LoRaWAN 1.0.x
        //   cmac = aes128_cmac(NwkKey, MHDR |  JoinNonce | NetID | DevAddr | DLSettings | RxDelay | CFList |
        //   CFListType)
        if( SecureElementVerifyAesCmac( decJoinAccept, ( encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE ), mic, NWK_KEY ) !=
 800c7f2:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c7f6:	b29b      	uxth	r3, r3
 800c7f8:	3b04      	subs	r3, #4
 800c7fa:	b299      	uxth	r1, r3
 800c7fc:	2301      	movs	r3, #1
 800c7fe:	693a      	ldr	r2, [r7, #16]
 800c800:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800c802:	f7ff feb9 	bl	800c578 <SecureElementVerifyAesCmac>
 800c806:	4603      	mov	r3, r0
 800c808:	2b00      	cmp	r3, #0
 800c80a:	d003      	beq.n	800c814 <SecureElementProcessJoinAccept+0xf0>
            SECURE_ELEMENT_SUCCESS )
        {
            return SECURE_ELEMENT_FAIL_CMAC;
 800c80c:	2301      	movs	r3, #1
 800c80e:	e002      	b.n	800c816 <SecureElementProcessJoinAccept+0xf2>
        }
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */
    else
    {
        return SECURE_ELEMENT_ERROR_INVALID_LORAWAM_SPEC_VERSION;
 800c810:	2304      	movs	r3, #4
 800c812:	e000      	b.n	800c816 <SecureElementProcessJoinAccept+0xf2>
    }

    return SECURE_ELEMENT_SUCCESS;
 800c814:	2300      	movs	r3, #0
}
 800c816:	4618      	mov	r0, r3
 800c818:	3718      	adds	r7, #24
 800c81a:	46bd      	mov	sp, r7
 800c81c:	bd80      	pop	{r7, pc}
	...

0800c820 <SecureElementSetDevEui>:
    return SECURE_ELEMENT_SUCCESS;
}
#endif /* LORAMAC_VERSION */

SecureElementStatus_t SecureElementSetDevEui( uint8_t* devEui )
{
 800c820:	b580      	push	{r7, lr}
 800c822:	b082      	sub	sp, #8
 800c824:	af00      	add	r7, sp, #0
 800c826:	6078      	str	r0, [r7, #4]
    if( devEui == NULL )
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	2b00      	cmp	r3, #0
 800c82c:	d101      	bne.n	800c832 <SecureElementSetDevEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800c82e:	2302      	movs	r3, #2
 800c830:	e007      	b.n	800c842 <SecureElementSetDevEui+0x22>
    }
    memcpy1( SeNvm->DevEui, devEui, SE_EUI_SIZE );
 800c832:	4b06      	ldr	r3, [pc, #24]	@ (800c84c <SecureElementSetDevEui+0x2c>)
 800c834:	681b      	ldr	r3, [r3, #0]
 800c836:	2208      	movs	r2, #8
 800c838:	6879      	ldr	r1, [r7, #4]
 800c83a:	4618      	mov	r0, r3
 800c83c:	f00a fdff 	bl	801743e <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800c840:	2300      	movs	r3, #0
}
 800c842:	4618      	mov	r0, r3
 800c844:	3708      	adds	r7, #8
 800c846:	46bd      	mov	sp, r7
 800c848:	bd80      	pop	{r7, pc}
 800c84a:	bf00      	nop
 800c84c:	20000718 	.word	0x20000718

0800c850 <SecureElementGetDevEui>:

uint8_t* SecureElementGetDevEui( void )
{
 800c850:	b480      	push	{r7}
 800c852:	af00      	add	r7, sp, #0
    return SeNvm->DevEui;
 800c854:	4b02      	ldr	r3, [pc, #8]	@ (800c860 <SecureElementGetDevEui+0x10>)
 800c856:	681b      	ldr	r3, [r3, #0]
}
 800c858:	4618      	mov	r0, r3
 800c85a:	46bd      	mov	sp, r7
 800c85c:	bc80      	pop	{r7}
 800c85e:	4770      	bx	lr
 800c860:	20000718 	.word	0x20000718

0800c864 <SecureElementSetJoinEui>:

SecureElementStatus_t SecureElementSetJoinEui( uint8_t* joinEui )
{
 800c864:	b580      	push	{r7, lr}
 800c866:	b082      	sub	sp, #8
 800c868:	af00      	add	r7, sp, #0
 800c86a:	6078      	str	r0, [r7, #4]
    if( joinEui == NULL )
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	2b00      	cmp	r3, #0
 800c870:	d101      	bne.n	800c876 <SecureElementSetJoinEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800c872:	2302      	movs	r3, #2
 800c874:	e008      	b.n	800c888 <SecureElementSetJoinEui+0x24>
    }
    memcpy1( SeNvm->JoinEui, joinEui, SE_EUI_SIZE );
 800c876:	4b06      	ldr	r3, [pc, #24]	@ (800c890 <SecureElementSetJoinEui+0x2c>)
 800c878:	681b      	ldr	r3, [r3, #0]
 800c87a:	3308      	adds	r3, #8
 800c87c:	2208      	movs	r2, #8
 800c87e:	6879      	ldr	r1, [r7, #4]
 800c880:	4618      	mov	r0, r3
 800c882:	f00a fddc 	bl	801743e <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800c886:	2300      	movs	r3, #0
}
 800c888:	4618      	mov	r0, r3
 800c88a:	3708      	adds	r7, #8
 800c88c:	46bd      	mov	sp, r7
 800c88e:	bd80      	pop	{r7, pc}
 800c890:	20000718 	.word	0x20000718

0800c894 <SecureElementGetJoinEui>:

uint8_t* SecureElementGetJoinEui( void )
{
 800c894:	b480      	push	{r7}
 800c896:	af00      	add	r7, sp, #0
    return SeNvm->JoinEui;
 800c898:	4b03      	ldr	r3, [pc, #12]	@ (800c8a8 <SecureElementGetJoinEui+0x14>)
 800c89a:	681b      	ldr	r3, [r3, #0]
 800c89c:	3308      	adds	r3, #8
}
 800c89e:	4618      	mov	r0, r3
 800c8a0:	46bd      	mov	sp, r7
 800c8a2:	bc80      	pop	{r7}
 800c8a4:	4770      	bx	lr
 800c8a6:	bf00      	nop
 800c8a8:	20000718 	.word	0x20000718

0800c8ac <LmHandlerInit>:
 */
static bool LmHandlerPackageIsInitialized(uint8_t id);

/* Exported functions ---------------------------------------------------------*/
LmHandlerErrorStatus_t LmHandlerInit( LmHandlerCallbacks_t *handlerCallbacks, uint32_t fwVersion )
{
 800c8ac:	b580      	push	{r7, lr}
 800c8ae:	b082      	sub	sp, #8
 800c8b0:	af00      	add	r7, sp, #0
 800c8b2:	6078      	str	r0, [r7, #4]
 800c8b4:	6039      	str	r1, [r7, #0]
    LmHandlerCallbacks = handlerCallbacks;
 800c8b6:	4a23      	ldr	r2, [pc, #140]	@ (800c944 <LmHandlerInit+0x98>)
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	6013      	str	r3, [r2, #0]

    LoRaMacPrimitives.MacMcpsConfirm = McpsConfirm;
 800c8bc:	4b22      	ldr	r3, [pc, #136]	@ (800c948 <LmHandlerInit+0x9c>)
 800c8be:	4a23      	ldr	r2, [pc, #140]	@ (800c94c <LmHandlerInit+0xa0>)
 800c8c0:	601a      	str	r2, [r3, #0]
    LoRaMacPrimitives.MacMcpsIndication = McpsIndication;
 800c8c2:	4b21      	ldr	r3, [pc, #132]	@ (800c948 <LmHandlerInit+0x9c>)
 800c8c4:	4a22      	ldr	r2, [pc, #136]	@ (800c950 <LmHandlerInit+0xa4>)
 800c8c6:	605a      	str	r2, [r3, #4]
    LoRaMacPrimitives.MacMlmeConfirm = MlmeConfirm;
 800c8c8:	4b1f      	ldr	r3, [pc, #124]	@ (800c948 <LmHandlerInit+0x9c>)
 800c8ca:	4a22      	ldr	r2, [pc, #136]	@ (800c954 <LmHandlerInit+0xa8>)
 800c8cc:	609a      	str	r2, [r3, #8]
    LoRaMacPrimitives.MacMlmeIndication = MlmeIndication;
 800c8ce:	4b1e      	ldr	r3, [pc, #120]	@ (800c948 <LmHandlerInit+0x9c>)
 800c8d0:	4a21      	ldr	r2, [pc, #132]	@ (800c958 <LmHandlerInit+0xac>)
 800c8d2:	60da      	str	r2, [r3, #12]
    LoRaMacCallbacks.GetBatteryLevel = LmHandlerCallbacks->GetBatteryLevel;
 800c8d4:	4b1b      	ldr	r3, [pc, #108]	@ (800c944 <LmHandlerInit+0x98>)
 800c8d6:	681b      	ldr	r3, [r3, #0]
 800c8d8:	681b      	ldr	r3, [r3, #0]
 800c8da:	4a20      	ldr	r2, [pc, #128]	@ (800c95c <LmHandlerInit+0xb0>)
 800c8dc:	6013      	str	r3, [r2, #0]
    LoRaMacCallbacks.GetTemperatureLevel = LmHandlerCallbacks->GetTemperature;
 800c8de:	4b19      	ldr	r3, [pc, #100]	@ (800c944 <LmHandlerInit+0x98>)
 800c8e0:	681b      	ldr	r3, [r3, #0]
 800c8e2:	685b      	ldr	r3, [r3, #4]
 800c8e4:	4a1d      	ldr	r2, [pc, #116]	@ (800c95c <LmHandlerInit+0xb0>)
 800c8e6:	6053      	str	r3, [r2, #4]
    LoRaMacCallbacks.GetUniqueId = LmHandlerCallbacks->GetUniqueId;
 800c8e8:	4b16      	ldr	r3, [pc, #88]	@ (800c944 <LmHandlerInit+0x98>)
 800c8ea:	681b      	ldr	r3, [r3, #0]
 800c8ec:	689b      	ldr	r3, [r3, #8]
 800c8ee:	4a1b      	ldr	r2, [pc, #108]	@ (800c95c <LmHandlerInit+0xb0>)
 800c8f0:	6093      	str	r3, [r2, #8]
    LoRaMacCallbacks.NvmDataChange  = NvmDataMgmtEvent;
 800c8f2:	4b1a      	ldr	r3, [pc, #104]	@ (800c95c <LmHandlerInit+0xb0>)
 800c8f4:	4a1a      	ldr	r2, [pc, #104]	@ (800c960 <LmHandlerInit+0xb4>)
 800c8f6:	60da      	str	r2, [r3, #12]
    LoRaMacCallbacks.MacProcessNotify = LmHandlerCallbacks->OnMacProcess;
 800c8f8:	4b12      	ldr	r3, [pc, #72]	@ (800c944 <LmHandlerInit+0x98>)
 800c8fa:	681b      	ldr	r3, [r3, #0]
 800c8fc:	699b      	ldr	r3, [r3, #24]
 800c8fe:	4a17      	ldr	r2, [pc, #92]	@ (800c95c <LmHandlerInit+0xb0>)
 800c900:	6113      	str	r3, [r2, #16]

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    LmhpComplianceParams.FwVersion.Value = fwVersion;
 800c902:	4a18      	ldr	r2, [pc, #96]	@ (800c964 <LmHandlerInit+0xb8>)
 800c904:	683b      	ldr	r3, [r7, #0]
 800c906:	6013      	str	r3, [r2, #0]
    LmhpComplianceParams.OnTxPeriodicityChanged = LmHandlerCallbacks->OnTxPeriodicityChanged;
 800c908:	4b0e      	ldr	r3, [pc, #56]	@ (800c944 <LmHandlerInit+0x98>)
 800c90a:	681b      	ldr	r3, [r3, #0]
 800c90c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c90e:	4a15      	ldr	r2, [pc, #84]	@ (800c964 <LmHandlerInit+0xb8>)
 800c910:	6053      	str	r3, [r2, #4]
    LmhpComplianceParams.OnTxFrameCtrlChanged = LmHandlerCallbacks->OnTxFrameCtrlChanged;
 800c912:	4b0c      	ldr	r3, [pc, #48]	@ (800c944 <LmHandlerInit+0x98>)
 800c914:	681b      	ldr	r3, [r3, #0]
 800c916:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c918:	4a12      	ldr	r2, [pc, #72]	@ (800c964 <LmHandlerInit+0xb8>)
 800c91a:	6093      	str	r3, [r2, #8]
    LmhpComplianceParams.OnPingSlotPeriodicityChanged = LmHandlerCallbacks->OnPingSlotPeriodicityChanged;
 800c91c:	4b09      	ldr	r3, [pc, #36]	@ (800c944 <LmHandlerInit+0x98>)
 800c91e:	681b      	ldr	r3, [r3, #0]
 800c920:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c922:	4a10      	ldr	r2, [pc, #64]	@ (800c964 <LmHandlerInit+0xb8>)
 800c924:	60d3      	str	r3, [r2, #12]
#endif /* LORAMAC_VERSION */

    /*The LoRa-Alliance Compliance protocol package should always be initialized and activated.*/
    if (LmHandlerPackageRegister(PACKAGE_ID_COMPLIANCE, &LmhpComplianceParams) != LORAMAC_HANDLER_SUCCESS)
 800c926:	490f      	ldr	r1, [pc, #60]	@ (800c964 <LmHandlerInit+0xb8>)
 800c928:	2000      	movs	r0, #0
 800c92a:	f000 fd87 	bl	800d43c <LmHandlerPackageRegister>
 800c92e:	4603      	mov	r3, r0
 800c930:	2b00      	cmp	r3, #0
 800c932:	d002      	beq.n	800c93a <LmHandlerInit+0x8e>
    {
        return LORAMAC_HANDLER_ERROR;
 800c934:	f04f 33ff 	mov.w	r3, #4294967295
 800c938:	e000      	b.n	800c93c <LmHandlerInit+0x90>
    if (LmhpPackagesRegistrationInit() != LORAMAC_HANDLER_SUCCESS)
    {
        return LORAMAC_HANDLER_ERROR;
    }
#endif /*LORAWAN_DATA_DISTRIB_MGT*/
    return LORAMAC_HANDLER_SUCCESS;
 800c93a:	2300      	movs	r3, #0
}
 800c93c:	4618      	mov	r0, r3
 800c93e:	3708      	adds	r7, #8
 800c940:	46bd      	mov	sp, r7
 800c942:	bd80      	pop	{r7, pc}
 800c944:	20000754 	.word	0x20000754
 800c948:	20000758 	.word	0x20000758
 800c94c:	0800d149 	.word	0x0800d149
 800c950:	0800d1b1 	.word	0x0800d1b1
 800c954:	0800d27d 	.word	0x0800d27d
 800c958:	0800d395 	.word	0x0800d395
 800c95c:	20000768 	.word	0x20000768
 800c960:	0800d80d 	.word	0x0800d80d
 800c964:	2000071c 	.word	0x2000071c

0800c968 <LmHandlerConfigure>:
        return LORAMAC_HANDLER_BUSY_ERROR;
    }
}

LmHandlerErrorStatus_t LmHandlerConfigure( LmHandlerParams_t *handlerParams )
{
 800c968:	b580      	push	{r7, lr}
 800c96a:	b094      	sub	sp, #80	@ 0x50
 800c96c:	af04      	add	r7, sp, #16
 800c96e:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
    LoraInfo_t *loraInfo;

    UTIL_MEM_cpy_8((void *)&LmHandlerParams, (const void *)handlerParams, sizeof(LmHandlerParams_t));
 800c970:	2214      	movs	r2, #20
 800c972:	6879      	ldr	r1, [r7, #4]
 800c974:	4891      	ldr	r0, [pc, #580]	@ (800cbbc <LmHandlerConfigure+0x254>)
 800c976:	f00e f867 	bl	801aa48 <UTIL_MEM_cpy_8>

#if ( LORAMAC_CLASSB_ENABLED == 1 )
    IsClassBSwitchPending = false;
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    IsUplinkTxPending = false;
 800c97a:	4b91      	ldr	r3, [pc, #580]	@ (800cbc0 <LmHandlerConfigure+0x258>)
 800c97c:	2200      	movs	r2, #0
 800c97e:	701a      	strb	r2, [r3, #0]
#endif /* LORAMAC_VERSION */

    loraInfo = LoraInfo_GetPtr();
 800c980:	f7fe fb0c 	bl	800af9c <LoraInfo_GetPtr>
 800c984:	63f8      	str	r0, [r7, #60]	@ 0x3c

    if (0U == ((1 << (LmHandlerParams.ActiveRegion)) & (loraInfo->Region)))
 800c986:	4b8d      	ldr	r3, [pc, #564]	@ (800cbbc <LmHandlerConfigure+0x254>)
 800c988:	781b      	ldrb	r3, [r3, #0]
 800c98a:	461a      	mov	r2, r3
 800c98c:	2301      	movs	r3, #1
 800c98e:	4093      	lsls	r3, r2
 800c990:	461a      	mov	r2, r3
 800c992:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c994:	685b      	ldr	r3, [r3, #4]
 800c996:	4013      	ands	r3, r2
 800c998:	2b00      	cmp	r3, #0
 800c99a:	d107      	bne.n	800c9ac <LmHandlerConfigure+0x44>
    {
        MW_LOG(TS_ON, VLEVEL_ALWAYS, "error: Region is not defined in the MW: set lorawan_conf.h accordingly\r\n");
 800c99c:	4b89      	ldr	r3, [pc, #548]	@ (800cbc4 <LmHandlerConfigure+0x25c>)
 800c99e:	2201      	movs	r2, #1
 800c9a0:	2100      	movs	r1, #0
 800c9a2:	2000      	movs	r0, #0
 800c9a4:	f00f f89a 	bl	801badc <UTIL_ADV_TRACE_COND_FSend>
        while (1) {}  /* error: Region is not defined in the MW */
 800c9a8:	bf00      	nop
 800c9aa:	e7fd      	b.n	800c9a8 <LmHandlerConfigure+0x40>
    }

    if (LoRaMacInitialization(&LoRaMacPrimitives, &LoRaMacCallbacks, LmHandlerParams.ActiveRegion) != LORAMAC_STATUS_OK)
 800c9ac:	4b83      	ldr	r3, [pc, #524]	@ (800cbbc <LmHandlerConfigure+0x254>)
 800c9ae:	781b      	ldrb	r3, [r3, #0]
 800c9b0:	461a      	mov	r2, r3
 800c9b2:	4985      	ldr	r1, [pc, #532]	@ (800cbc8 <LmHandlerConfigure+0x260>)
 800c9b4:	4885      	ldr	r0, [pc, #532]	@ (800cbcc <LmHandlerConfigure+0x264>)
 800c9b6:	f004 fe95 	bl	80116e4 <LoRaMacInitialization>
 800c9ba:	4603      	mov	r3, r0
 800c9bc:	2b00      	cmp	r3, #0
 800c9be:	d002      	beq.n	800c9c6 <LmHandlerConfigure+0x5e>
    {
        return LORAMAC_HANDLER_ERROR;
 800c9c0:	f04f 33ff 	mov.w	r3, #4294967295
 800c9c4:	e0f5      	b.n	800cbb2 <LmHandlerConfigure+0x24a>
    }

    // Try the restore context from the Backup RAM structure if data retention is available
    mibReq.Type = MIB_NVM_CTXS;
 800c9c6:	2327      	movs	r3, #39	@ 0x27
 800c9c8:	763b      	strb	r3, [r7, #24]
    if (LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK)
 800c9ca:	f107 0318 	add.w	r3, r7, #24
 800c9ce:	4618      	mov	r0, r3
 800c9d0:	f005 fbd8 	bl	8012184 <LoRaMacMibSetRequestConfirm>
 800c9d4:	4603      	mov	r3, r0
 800c9d6:	2b00      	cmp	r3, #0
 800c9d8:	d103      	bne.n	800c9e2 <LmHandlerConfigure+0x7a>
    {
        CtxRestoreDone = true;
 800c9da:	4b7d      	ldr	r3, [pc, #500]	@ (800cbd0 <LmHandlerConfigure+0x268>)
 800c9dc:	2201      	movs	r2, #1
 800c9de:	701a      	strb	r2, [r3, #0]
 800c9e0:	e02a      	b.n	800ca38 <LmHandlerConfigure+0xd0>
    }
    else
    {
        // Restore context data backup from user callback (stored in FLASH)
        mibReq.Type = MIB_NVM_BKP_CTXS;
 800c9e2:	2328      	movs	r3, #40	@ 0x28
 800c9e4:	763b      	strb	r3, [r7, #24]
        if (LmHandlerCallbacks->OnRestoreContextRequest != NULL)
 800c9e6:	4b7b      	ldr	r3, [pc, #492]	@ (800cbd4 <LmHandlerConfigure+0x26c>)
 800c9e8:	681b      	ldr	r3, [r3, #0]
 800c9ea:	691b      	ldr	r3, [r3, #16]
 800c9ec:	2b00      	cmp	r3, #0
 800c9ee:	d00c      	beq.n	800ca0a <LmHandlerConfigure+0xa2>
        {
            LoRaMacMibGetRequestConfirm( &mibReq );
 800c9f0:	f107 0318 	add.w	r3, r7, #24
 800c9f4:	4618      	mov	r0, r3
 800c9f6:	f005 fa1f 	bl	8011e38 <LoRaMacMibGetRequestConfirm>
            LmHandlerCallbacks->OnRestoreContextRequest(mibReq.Param.BackupContexts, sizeof(LoRaMacNvmData_t));
 800c9fa:	4b76      	ldr	r3, [pc, #472]	@ (800cbd4 <LmHandlerConfigure+0x26c>)
 800c9fc:	681b      	ldr	r3, [r3, #0]
 800c9fe:	691b      	ldr	r3, [r3, #16]
 800ca00:	69fa      	ldr	r2, [r7, #28]
 800ca02:	f240 517c 	movw	r1, #1404	@ 0x57c
 800ca06:	4610      	mov	r0, r2
 800ca08:	4798      	blx	r3
        }
        // Restore context data from backup to main nvm structure
        mibReq.Type = MIB_NVM_CTXS;
 800ca0a:	2327      	movs	r3, #39	@ 0x27
 800ca0c:	763b      	strb	r3, [r7, #24]
        if (LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK)
 800ca0e:	f107 0318 	add.w	r3, r7, #24
 800ca12:	4618      	mov	r0, r3
 800ca14:	f005 fbb6 	bl	8012184 <LoRaMacMibSetRequestConfirm>
 800ca18:	4603      	mov	r3, r0
 800ca1a:	2b00      	cmp	r3, #0
 800ca1c:	d10c      	bne.n	800ca38 <LmHandlerConfigure+0xd0>
        {
            mibReq.Type = MIB_NETWORK_ACTIVATION;
 800ca1e:	2301      	movs	r3, #1
 800ca20:	763b      	strb	r3, [r7, #24]
            LoRaMacMibGetRequestConfirm( &mibReq );
 800ca22:	f107 0318 	add.w	r3, r7, #24
 800ca26:	4618      	mov	r0, r3
 800ca28:	f005 fa06 	bl	8011e38 <LoRaMacMibGetRequestConfirm>
            if (mibReq.Param.NetworkActivation != ACTIVATION_TYPE_NONE)
 800ca2c:	7f3b      	ldrb	r3, [r7, #28]
 800ca2e:	2b00      	cmp	r3, #0
 800ca30:	d002      	beq.n	800ca38 <LmHandlerConfigure+0xd0>
            {
                CtxRestoreDone = true;
 800ca32:	4b67      	ldr	r3, [pc, #412]	@ (800cbd0 <LmHandlerConfigure+0x268>)
 800ca34:	2201      	movs	r2, #1
 800ca36:	701a      	strb	r2, [r3, #0]
            }
        }
    }

    if (CtxRestoreDone == true)
 800ca38:	4b65      	ldr	r3, [pc, #404]	@ (800cbd0 <LmHandlerConfigure+0x268>)
 800ca3a:	781b      	ldrb	r3, [r3, #0]
 800ca3c:	2b00      	cmp	r3, #0
 800ca3e:	d02a      	beq.n	800ca96 <LmHandlerConfigure+0x12e>
    {
        if ( LmHandlerCallbacks->OnNvmDataChange != NULL )
 800ca40:	4b64      	ldr	r3, [pc, #400]	@ (800cbd4 <LmHandlerConfigure+0x26c>)
 800ca42:	681b      	ldr	r3, [r3, #0]
 800ca44:	69db      	ldr	r3, [r3, #28]
 800ca46:	2b00      	cmp	r3, #0
 800ca48:	d004      	beq.n	800ca54 <LmHandlerConfigure+0xec>
        {
            LmHandlerCallbacks->OnNvmDataChange( LORAMAC_HANDLER_NVM_RESTORE );
 800ca4a:	4b62      	ldr	r3, [pc, #392]	@ (800cbd4 <LmHandlerConfigure+0x26c>)
 800ca4c:	681b      	ldr	r3, [r3, #0]
 800ca4e:	69db      	ldr	r3, [r3, #28]
 800ca50:	2000      	movs	r0, #0
 800ca52:	4798      	blx	r3
        }

        mibReq.Type = MIB_DEV_ADDR;
 800ca54:	2306      	movs	r3, #6
 800ca56:	763b      	strb	r3, [r7, #24]
        LoRaMacMibGetRequestConfirm( &mibReq );
 800ca58:	f107 0318 	add.w	r3, r7, #24
 800ca5c:	4618      	mov	r0, r3
 800ca5e:	f005 f9eb 	bl	8011e38 <LoRaMacMibGetRequestConfirm>
        CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 800ca62:	69fb      	ldr	r3, [r7, #28]
 800ca64:	4a5c      	ldr	r2, [pc, #368]	@ (800cbd8 <LmHandlerConfigure+0x270>)
 800ca66:	6153      	str	r3, [r2, #20]

        mibReq.Type = MIB_NVM_CTXS;
 800ca68:	2327      	movs	r3, #39	@ 0x27
 800ca6a:	763b      	strb	r3, [r7, #24]
        LoRaMacMibGetRequestConfirm( &mibReq );
 800ca6c:	f107 0318 	add.w	r3, r7, #24
 800ca70:	4618      	mov	r0, r3
 800ca72:	f005 f9e1 	bl	8011e38 <LoRaMacMibGetRequestConfirm>

        LmHandlerParams.ActiveRegion = mibReq.Param.Contexts->MacGroup2.Region;
 800ca76:	69fb      	ldr	r3, [r7, #28]
 800ca78:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 800ca7c:	4b4f      	ldr	r3, [pc, #316]	@ (800cbbc <LmHandlerConfigure+0x254>)
 800ca7e:	701a      	strb	r2, [r3, #0]
        LmHandlerParams.DefaultClass = mibReq.Param.Contexts->MacGroup2.DeviceClass;
 800ca80:	69fb      	ldr	r3, [r7, #28]
 800ca82:	f893 2104 	ldrb.w	r2, [r3, #260]	@ 0x104
 800ca86:	4b4d      	ldr	r3, [pc, #308]	@ (800cbbc <LmHandlerConfigure+0x254>)
 800ca88:	705a      	strb	r2, [r3, #1]
        LmHandlerParams.AdrEnable = mibReq.Param.Contexts->MacGroup2.AdrCtrlOn;
 800ca8a:	69fb      	ldr	r3, [r7, #28]
 800ca8c:	f893 2106 	ldrb.w	r2, [r3, #262]	@ 0x106
 800ca90:	4b4a      	ldr	r3, [pc, #296]	@ (800cbbc <LmHandlerConfigure+0x254>)
 800ca92:	709a      	strb	r2, [r3, #2]
 800ca94:	e019      	b.n	800caca <LmHandlerConfigure+0x162>
    }
    else
    {
        mibReq.Type = MIB_NET_ID;
 800ca96:	2305      	movs	r3, #5
 800ca98:	763b      	strb	r3, [r7, #24]
        mibReq.Param.NetID = LORAWAN_NETWORK_ID;
 800ca9a:	2300      	movs	r3, #0
 800ca9c:	61fb      	str	r3, [r7, #28]
        LoRaMacMibSetRequestConfirm(&mibReq);
 800ca9e:	f107 0318 	add.w	r3, r7, #24
 800caa2:	4618      	mov	r0, r3
 800caa4:	f005 fb6e 	bl	8012184 <LoRaMacMibSetRequestConfirm>

#if ( STATIC_DEVICE_ADDRESS != 1 )
        CommissioningParams.DevAddr = LmHandlerCallbacks->GetDevAddr();
 800caa8:	4b4a      	ldr	r3, [pc, #296]	@ (800cbd4 <LmHandlerConfigure+0x26c>)
 800caaa:	681b      	ldr	r3, [r3, #0]
 800caac:	68db      	ldr	r3, [r3, #12]
 800caae:	4798      	blx	r3
 800cab0:	4603      	mov	r3, r0
 800cab2:	4a49      	ldr	r2, [pc, #292]	@ (800cbd8 <LmHandlerConfigure+0x270>)
 800cab4:	6153      	str	r3, [r2, #20]
#endif /* STATIC_DEVICE_ADDRESS != 1 */

        mibReq.Type = MIB_DEV_ADDR;
 800cab6:	2306      	movs	r3, #6
 800cab8:	763b      	strb	r3, [r7, #24]
        mibReq.Param.DevAddr = CommissioningParams.DevAddr;
 800caba:	4b47      	ldr	r3, [pc, #284]	@ (800cbd8 <LmHandlerConfigure+0x270>)
 800cabc:	695b      	ldr	r3, [r3, #20]
 800cabe:	61fb      	str	r3, [r7, #28]
        LoRaMacMibSetRequestConfirm(&mibReq);
 800cac0:	f107 0318 	add.w	r3, r7, #24
 800cac4:	4618      	mov	r0, r3
 800cac6:	f005 fb5d 	bl	8012184 <LoRaMacMibSetRequestConfirm>
    }
    // Read secure-element DEV_EUI and JOIN_EUI values.
    mibReq.Type = MIB_DEV_EUI;
 800caca:	2302      	movs	r3, #2
 800cacc:	763b      	strb	r3, [r7, #24]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800cace:	f107 0318 	add.w	r3, r7, #24
 800cad2:	4618      	mov	r0, r3
 800cad4:	f005 f9b0 	bl	8011e38 <LoRaMacMibGetRequestConfirm>
    memcpy1( CommissioningParams.DevEui, mibReq.Param.DevEui, 8 );
 800cad8:	69fb      	ldr	r3, [r7, #28]
 800cada:	2208      	movs	r2, #8
 800cadc:	4619      	mov	r1, r3
 800cade:	483e      	ldr	r0, [pc, #248]	@ (800cbd8 <LmHandlerConfigure+0x270>)
 800cae0:	f00a fcad 	bl	801743e <memcpy1>

    mibReq.Type = MIB_JOIN_EUI;
 800cae4:	2303      	movs	r3, #3
 800cae6:	763b      	strb	r3, [r7, #24]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800cae8:	f107 0318 	add.w	r3, r7, #24
 800caec:	4618      	mov	r0, r3
 800caee:	f005 f9a3 	bl	8011e38 <LoRaMacMibGetRequestConfirm>
    memcpy1( CommissioningParams.JoinEui, mibReq.Param.JoinEui, 8 );
 800caf2:	69fb      	ldr	r3, [r7, #28]
 800caf4:	2208      	movs	r2, #8
 800caf6:	4619      	mov	r1, r3
 800caf8:	4838      	ldr	r0, [pc, #224]	@ (800cbdc <LmHandlerConfigure+0x274>)
 800cafa:	f00a fca0 	bl	801743e <memcpy1>

    SecureElementPrintKeys();
 800cafe:	f7ff fc1f 	bl	800c340 <SecureElementPrintKeys>
    MW_LOG(TS_OFF, VLEVEL_M, "###### DevAddr:     %02X:%02X:%02X:%02X\r\n",
 800cb02:	4b37      	ldr	r3, [pc, #220]	@ (800cbe0 <LmHandlerConfigure+0x278>)
 800cb04:	781b      	ldrb	r3, [r3, #0]
 800cb06:	461a      	mov	r2, r3
 800cb08:	4b36      	ldr	r3, [pc, #216]	@ (800cbe4 <LmHandlerConfigure+0x27c>)
 800cb0a:	781b      	ldrb	r3, [r3, #0]
 800cb0c:	4619      	mov	r1, r3
 800cb0e:	4b36      	ldr	r3, [pc, #216]	@ (800cbe8 <LmHandlerConfigure+0x280>)
 800cb10:	781b      	ldrb	r3, [r3, #0]
 800cb12:	4618      	mov	r0, r3
 800cb14:	4b35      	ldr	r3, [pc, #212]	@ (800cbec <LmHandlerConfigure+0x284>)
 800cb16:	781b      	ldrb	r3, [r3, #0]
 800cb18:	9303      	str	r3, [sp, #12]
 800cb1a:	9002      	str	r0, [sp, #8]
 800cb1c:	9101      	str	r1, [sp, #4]
 800cb1e:	9200      	str	r2, [sp, #0]
 800cb20:	4b33      	ldr	r3, [pc, #204]	@ (800cbf0 <LmHandlerConfigure+0x288>)
 800cb22:	2200      	movs	r2, #0
 800cb24:	2100      	movs	r1, #0
 800cb26:	2002      	movs	r0, #2
 800cb28:	f00e ffd8 	bl	801badc <UTIL_ADV_TRACE_COND_FSend>

#if (defined (LORAWAN_KMS) && (LORAWAN_KMS == 1))
    MW_LOG(TS_OFF, VLEVEL_L, "###### KMS ENABLED \r\n");
#endif /* LORAWAN_KMS == 1 */

    mibReq.Type = MIB_PUBLIC_NETWORK;
 800cb2c:	230f      	movs	r3, #15
 800cb2e:	763b      	strb	r3, [r7, #24]
    mibReq.Param.EnablePublicNetwork = LORAWAN_PUBLIC_NETWORK;
 800cb30:	2301      	movs	r3, #1
 800cb32:	773b      	strb	r3, [r7, #28]
    LoRaMacMibSetRequestConfirm(&mibReq);
 800cb34:	f107 0318 	add.w	r3, r7, #24
 800cb38:	4618      	mov	r0, r3
 800cb3a:	f005 fb23 	bl	8012184 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_REPEATER_SUPPORT;
 800cb3e:	2310      	movs	r3, #16
 800cb40:	763b      	strb	r3, [r7, #24]
    mibReq.Param.EnableRepeaterSupport = LORAWAN_REPEATER_SUPPORT;
 800cb42:	2300      	movs	r3, #0
 800cb44:	773b      	strb	r3, [r7, #28]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800cb46:	f107 0318 	add.w	r3, r7, #24
 800cb4a:	4618      	mov	r0, r3
 800cb4c:	f005 fb1a 	bl	8012184 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_ADR;
 800cb50:	2304      	movs	r3, #4
 800cb52:	763b      	strb	r3, [r7, #24]
    mibReq.Param.AdrEnable = LmHandlerParams.AdrEnable;
 800cb54:	4b19      	ldr	r3, [pc, #100]	@ (800cbbc <LmHandlerConfigure+0x254>)
 800cb56:	789b      	ldrb	r3, [r3, #2]
 800cb58:	773b      	strb	r3, [r7, #28]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800cb5a:	f107 0318 	add.w	r3, r7, #24
 800cb5e:	4618      	mov	r0, r3
 800cb60:	f005 fb10 	bl	8012184 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_RXB_C_TIMEOUT;
 800cb64:	2338      	movs	r3, #56	@ 0x38
 800cb66:	763b      	strb	r3, [r7, #24]
    mibReq.Param.RxBCTimeout = LmHandlerParams.RxBCTimeout;
 800cb68:	4b14      	ldr	r3, [pc, #80]	@ (800cbbc <LmHandlerConfigure+0x254>)
 800cb6a:	691b      	ldr	r3, [r3, #16]
 800cb6c:	61fb      	str	r3, [r7, #28]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800cb6e:	f107 0318 	add.w	r3, r7, #24
 800cb72:	4618      	mov	r0, r3
 800cb74:	f005 fb06 	bl	8012184 <LoRaMacMibSetRequestConfirm>

    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    getPhy.Attribute = PHY_DUTY_CYCLE;
 800cb78:	230f      	movs	r3, #15
 800cb7a:	743b      	strb	r3, [r7, #16]
    phyParam = RegionGetPhyParam( LmHandlerParams.ActiveRegion, &getPhy );
 800cb7c:	4b0f      	ldr	r3, [pc, #60]	@ (800cbbc <LmHandlerConfigure+0x254>)
 800cb7e:	781b      	ldrb	r3, [r3, #0]
 800cb80:	f107 0210 	add.w	r2, r7, #16
 800cb84:	4611      	mov	r1, r2
 800cb86:	4618      	mov	r0, r3
 800cb88:	f008 f9b8 	bl	8014efc <RegionGetPhyParam>
 800cb8c:	4603      	mov	r3, r0
 800cb8e:	60fb      	str	r3, [r7, #12]
    LmHandlerParams.DutyCycleEnabled = (bool) phyParam.Value;
 800cb90:	68fb      	ldr	r3, [r7, #12]
 800cb92:	2b00      	cmp	r3, #0
 800cb94:	bf14      	ite	ne
 800cb96:	2301      	movne	r3, #1
 800cb98:	2300      	moveq	r3, #0
 800cb9a:	b2da      	uxtb	r2, r3
 800cb9c:	4b07      	ldr	r3, [pc, #28]	@ (800cbbc <LmHandlerConfigure+0x254>)
 800cb9e:	719a      	strb	r2, [r3, #6]

    // Set system maximum tolerated rx error in milliseconds
    LmHandlerSetSystemMaxRxError( 20 );
 800cba0:	2014      	movs	r0, #20
 800cba2:	f000 fab9 	bl	800d118 <LmHandlerSetSystemMaxRxError>

    /* override previous value if reconfigure new region */
    LoRaMacTestSetDutyCycleOn( LmHandlerParams.DutyCycleEnabled );
 800cba6:	4b05      	ldr	r3, [pc, #20]	@ (800cbbc <LmHandlerConfigure+0x254>)
 800cba8:	799b      	ldrb	r3, [r3, #6]
 800cbaa:	4618      	mov	r0, r3
 800cbac:	f006 f918 	bl	8012de0 <LoRaMacTestSetDutyCycleOn>

    return LORAMAC_HANDLER_SUCCESS;
 800cbb0:	2300      	movs	r3, #0
}
 800cbb2:	4618      	mov	r0, r3
 800cbb4:	3740      	adds	r7, #64	@ 0x40
 800cbb6:	46bd      	mov	sp, r7
 800cbb8:	bd80      	pop	{r7, pc}
 800cbba:	bf00      	nop
 800cbbc:	20000740 	.word	0x20000740
 800cbc0:	20000780 	.word	0x20000780
 800cbc4:	0801f0f8 	.word	0x0801f0f8
 800cbc8:	20000768 	.word	0x20000768
 800cbcc:	20000758 	.word	0x20000758
 800cbd0:	20000876 	.word	0x20000876
 800cbd4:	20000754 	.word	0x20000754
 800cbd8:	20000090 	.word	0x20000090
 800cbdc:	20000098 	.word	0x20000098
 800cbe0:	200000a7 	.word	0x200000a7
 800cbe4:	200000a6 	.word	0x200000a6
 800cbe8:	200000a5 	.word	0x200000a5
 800cbec:	200000a4 	.word	0x200000a4
 800cbf0:	0801f144 	.word	0x0801f144

0800cbf4 <LmHandlerProcess>:

    return false;
}

void LmHandlerProcess( void )
{
 800cbf4:	b580      	push	{r7, lr}
 800cbf6:	b082      	sub	sp, #8
 800cbf8:	af00      	add	r7, sp, #0
    /* Call at first the LoRaMAC process before to run all package process features */
    // Processes the LoRaMac events
    LoRaMacProcess( );
 800cbfa:	f002 fd45 	bl	800f688 <LoRaMacProcess>

    // Call all packages process functions
    LmHandlerPackagesProcess( );
 800cbfe:	f000 fd3b 	bl	800d678 <LmHandlerPackagesProcess>

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    // Check if a package transmission is pending.
    // If it is the case exit function earlier
    if( LmHandlerPackageIsTxPending( ) == true )
 800cc02:	f000 fd0f 	bl	800d624 <LmHandlerPackageIsTxPending>
 800cc06:	4603      	mov	r3, r0
 800cc08:	2b00      	cmp	r3, #0
 800cc0a:	d117      	bne.n	800cc3c <LmHandlerProcess+0x48>
    {
        return;
    }

    // If a MAC layer scheduled uplink is still pending try to send it.
    if( IsUplinkTxPending == true )
 800cc0c:	4b0d      	ldr	r3, [pc, #52]	@ (800cc44 <LmHandlerProcess+0x50>)
 800cc0e:	781b      	ldrb	r3, [r3, #0]
 800cc10:	2b00      	cmp	r3, #0
 800cc12:	d014      	beq.n	800cc3e <LmHandlerProcess+0x4a>
    {
        // Send an empty message
        LmHandlerAppData_t appData =
 800cc14:	2300      	movs	r3, #0
 800cc16:	703b      	strb	r3, [r7, #0]
 800cc18:	2300      	movs	r3, #0
 800cc1a:	707b      	strb	r3, [r7, #1]
 800cc1c:	2300      	movs	r3, #0
 800cc1e:	607b      	str	r3, [r7, #4]
            .Buffer = NULL,
            .BufferSize = 0,
            .Port = 0,
        };

        if( LmHandlerSend( &appData, LmHandlerParams.IsTxConfirmed, false ) == LORAMAC_HANDLER_SUCCESS )
 800cc20:	4b09      	ldr	r3, [pc, #36]	@ (800cc48 <LmHandlerProcess+0x54>)
 800cc22:	78d9      	ldrb	r1, [r3, #3]
 800cc24:	463b      	mov	r3, r7
 800cc26:	2200      	movs	r2, #0
 800cc28:	4618      	mov	r0, r3
 800cc2a:	f000 f8b7 	bl	800cd9c <LmHandlerSend>
 800cc2e:	4603      	mov	r3, r0
 800cc30:	2b00      	cmp	r3, #0
 800cc32:	d104      	bne.n	800cc3e <LmHandlerProcess+0x4a>
        {
            IsUplinkTxPending = false;
 800cc34:	4b03      	ldr	r3, [pc, #12]	@ (800cc44 <LmHandlerProcess+0x50>)
 800cc36:	2200      	movs	r2, #0
 800cc38:	701a      	strb	r2, [r3, #0]
 800cc3a:	e000      	b.n	800cc3e <LmHandlerProcess+0x4a>
        return;
 800cc3c:	bf00      	nop
        }
    }
#endif /* LORAMAC_VERSION */
}
 800cc3e:	3708      	adds	r7, #8
 800cc40:	46bd      	mov	sp, r7
 800cc42:	bd80      	pop	{r7, pc}
 800cc44:	20000780 	.word	0x20000780
 800cc48:	20000740 	.word	0x20000740

0800cc4c <LmHandlerGetDutyCycleWaitTime>:

TimerTime_t LmHandlerGetDutyCycleWaitTime( void )
{
 800cc4c:	b480      	push	{r7}
 800cc4e:	af00      	add	r7, sp, #0
    return DutyCycleWaitTime;
 800cc50:	4b02      	ldr	r3, [pc, #8]	@ (800cc5c <LmHandlerGetDutyCycleWaitTime+0x10>)
 800cc52:	681b      	ldr	r3, [r3, #0]
}
 800cc54:	4618      	mov	r0, r3
 800cc56:	46bd      	mov	sp, r7
 800cc58:	bc80      	pop	{r7}
 800cc5a:	4770      	bx	lr
 800cc5c:	2000077c 	.word	0x2000077c

0800cc60 <LmHandlerJoin>:

void LmHandlerJoin( ActivationType_t mode, bool forceRejoin )
{
 800cc60:	b580      	push	{r7, lr}
 800cc62:	b090      	sub	sp, #64	@ 0x40
 800cc64:	af00      	add	r7, sp, #0
 800cc66:	4603      	mov	r3, r0
 800cc68:	460a      	mov	r2, r1
 800cc6a:	71fb      	strb	r3, [r7, #7]
 800cc6c:	4613      	mov	r3, r2
 800cc6e:	71bb      	strb	r3, [r7, #6]
#endif /* ACTIVATION_BY_PERSONALIZATION */
#endif /* LORAWAN_KMS */

    MlmeReq_t mlmeReq;

    mlmeReq.Type = MLME_JOIN;
 800cc70:	2301      	movs	r3, #1
 800cc72:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    mlmeReq.Req.Join.Datarate = LmHandlerParams.TxDatarate;
 800cc76:	4b36      	ldr	r3, [pc, #216]	@ (800cd50 <LmHandlerJoin+0xf0>)
 800cc78:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800cc7c:	b2db      	uxtb	r3, r3
 800cc7e:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31

    if ( mode == ACTIVATION_TYPE_OTAA )
 800cc82:	79fb      	ldrb	r3, [r7, #7]
 800cc84:	2b02      	cmp	r3, #2
 800cc86:	d10b      	bne.n	800cca0 <LmHandlerJoin+0x40>
    {
        mlmeReq.Req.Join.NetworkActivation = ACTIVATION_TYPE_OTAA;
 800cc88:	2302      	movs	r3, #2
 800cc8a:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
        JoinParams.Mode = ACTIVATION_TYPE_OTAA;
 800cc8e:	4b31      	ldr	r3, [pc, #196]	@ (800cd54 <LmHandlerJoin+0xf4>)
 800cc90:	2202      	movs	r2, #2
 800cc92:	719a      	strb	r2, [r3, #6]
        JoinParams.forceRejoin = forceRejoin;
 800cc94:	4a2f      	ldr	r2, [pc, #188]	@ (800cd54 <LmHandlerJoin+0xf4>)
 800cc96:	79bb      	ldrb	r3, [r7, #6]
 800cc98:	71d3      	strb	r3, [r2, #7]
        LoRaMacStart();
 800cc9a:	f004 ffdb 	bl	8011c54 <LoRaMacStart>
 800cc9e:	e041      	b.n	800cd24 <LmHandlerJoin+0xc4>
    }
    else
    {
        MibRequestConfirm_t mibReq;

        mlmeReq.Req.Join.NetworkActivation = ACTIVATION_TYPE_ABP;
 800cca0:	2301      	movs	r3, #1
 800cca2:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
        JoinParams.Mode = ACTIVATION_TYPE_ABP;
 800cca6:	4b2b      	ldr	r3, [pc, #172]	@ (800cd54 <LmHandlerJoin+0xf4>)
 800cca8:	2201      	movs	r2, #1
 800ccaa:	719a      	strb	r2, [r3, #6]
        JoinParams.Datarate = LmHandlerParams.TxDatarate;
 800ccac:	4b28      	ldr	r3, [pc, #160]	@ (800cd50 <LmHandlerJoin+0xf0>)
 800ccae:	f993 2004 	ldrsb.w	r2, [r3, #4]
 800ccb2:	4b28      	ldr	r3, [pc, #160]	@ (800cd54 <LmHandlerJoin+0xf4>)
 800ccb4:	711a      	strb	r2, [r3, #4]
        JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 800ccb6:	4b27      	ldr	r3, [pc, #156]	@ (800cd54 <LmHandlerJoin+0xf4>)
 800ccb8:	2200      	movs	r2, #0
 800ccba:	715a      	strb	r2, [r3, #5]
        JoinParams.forceRejoin = forceRejoin;
 800ccbc:	4a25      	ldr	r2, [pc, #148]	@ (800cd54 <LmHandlerJoin+0xf4>)
 800ccbe:	79bb      	ldrb	r3, [r7, #6]
 800ccc0:	71d3      	strb	r3, [r2, #7]

        if (CtxRestoreDone == false)
 800ccc2:	4b25      	ldr	r3, [pc, #148]	@ (800cd58 <LmHandlerJoin+0xf8>)
 800ccc4:	781b      	ldrb	r3, [r3, #0]
 800ccc6:	f083 0301 	eor.w	r3, r3, #1
 800ccca:	b2db      	uxtb	r3, r3
 800cccc:	2b00      	cmp	r3, #0
 800ccce:	d01e      	beq.n	800cd0e <LmHandlerJoin+0xae>
        {
            // Configure the default datarate
            mibReq.Type = MIB_CHANNELS_DEFAULT_DATARATE;
 800ccd0:	231f      	movs	r3, #31
 800ccd2:	723b      	strb	r3, [r7, #8]
            mibReq.Param.ChannelsDefaultDatarate = LmHandlerParams.TxDatarate;
 800ccd4:	4b1e      	ldr	r3, [pc, #120]	@ (800cd50 <LmHandlerJoin+0xf0>)
 800ccd6:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800ccda:	733b      	strb	r3, [r7, #12]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800ccdc:	f107 0308 	add.w	r3, r7, #8
 800cce0:	4618      	mov	r0, r3
 800cce2:	f005 fa4f 	bl	8012184 <LoRaMacMibSetRequestConfirm>

            mibReq.Type = MIB_CHANNELS_DATARATE;
 800cce6:	2320      	movs	r3, #32
 800cce8:	723b      	strb	r3, [r7, #8]
            mibReq.Param.ChannelsDatarate = LmHandlerParams.TxDatarate;
 800ccea:	4b19      	ldr	r3, [pc, #100]	@ (800cd50 <LmHandlerJoin+0xf0>)
 800ccec:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800ccf0:	733b      	strb	r3, [r7, #12]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800ccf2:	f107 0308 	add.w	r3, r7, #8
 800ccf6:	4618      	mov	r0, r3
 800ccf8:	f005 fa44 	bl	8012184 <LoRaMacMibSetRequestConfirm>

            /* Tell the MAC layer which network server version are we connecting too. */
            mibReq.Type = MIB_ABP_LORAWAN_VERSION;
 800ccfc:	2329      	movs	r3, #41	@ 0x29
 800ccfe:	723b      	strb	r3, [r7, #8]
            mibReq.Param.AbpLrWanVersion.Value = ABP_ACTIVATION_LRWAN_VERSION;
 800cd00:	4b16      	ldr	r3, [pc, #88]	@ (800cd5c <LmHandlerJoin+0xfc>)
 800cd02:	60fb      	str	r3, [r7, #12]
            LoRaMacMibSetRequestConfirm(&mibReq);
 800cd04:	f107 0308 	add.w	r3, r7, #8
 800cd08:	4618      	mov	r0, r3
 800cd0a:	f005 fa3b 	bl	8012184 <LoRaMacMibSetRequestConfirm>
#endif /* USE_LRWAN_1_1_X_CRYPTO */
            SecureElementSetObjHandler(APP_S_KEY, KMS_APP_S_KEY_OBJECT_HANDLE);
#endif  /* LORAWAN_KMS == 1 */
        }

        LoRaMacStart();
 800cd0e:	f004 ffa1 	bl	8011c54 <LoRaMacStart>
        mibReq.Type = MIB_NETWORK_ACTIVATION;
 800cd12:	2301      	movs	r3, #1
 800cd14:	723b      	strb	r3, [r7, #8]
        mibReq.Param.NetworkActivation = ACTIVATION_TYPE_ABP;
 800cd16:	2301      	movs	r3, #1
 800cd18:	733b      	strb	r3, [r7, #12]
        LoRaMacMibSetRequestConfirm( &mibReq );
 800cd1a:	f107 0308 	add.w	r3, r7, #8
 800cd1e:	4618      	mov	r0, r3
 800cd20:	f005 fa30 	bl	8012184 <LoRaMacMibSetRequestConfirm>
        LmHandlerRequestClass(LmHandlerParams.DefaultClass);
#endif
    }

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    if ((CtxRestoreDone == false) || (forceRejoin == true))
 800cd24:	4b0c      	ldr	r3, [pc, #48]	@ (800cd58 <LmHandlerJoin+0xf8>)
 800cd26:	781b      	ldrb	r3, [r3, #0]
 800cd28:	f083 0301 	eor.w	r3, r3, #1
 800cd2c:	b2db      	uxtb	r3, r3
 800cd2e:	2b00      	cmp	r3, #0
 800cd30:	d102      	bne.n	800cd38 <LmHandlerJoin+0xd8>
 800cd32:	79bb      	ldrb	r3, [r7, #6]
 800cd34:	2b00      	cmp	r3, #0
 800cd36:	d004      	beq.n	800cd42 <LmHandlerJoin+0xe2>
    {
        // Starts the join procedure
        LoRaMacMlmeRequest( &mlmeReq );
 800cd38:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800cd3c:	4618      	mov	r0, r3
 800cd3e:	f005 fd91 	bl	8012864 <LoRaMacMlmeRequest>
    }
    DutyCycleWaitTime = mlmeReq.ReqReturn.DutyCycleWaitTime;
 800cd42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cd44:	4a06      	ldr	r2, [pc, #24]	@ (800cd60 <LmHandlerJoin+0x100>)
 800cd46:	6013      	str	r3, [r2, #0]
#endif /* LORAMAC_VERSION */
}
 800cd48:	bf00      	nop
 800cd4a:	3740      	adds	r7, #64	@ 0x40
 800cd4c:	46bd      	mov	sp, r7
 800cd4e:	bd80      	pop	{r7, pc}
 800cd50:	20000740 	.word	0x20000740
 800cd54:	200000a8 	.word	0x200000a8
 800cd58:	20000876 	.word	0x20000876
 800cd5c:	01000400 	.word	0x01000400
 800cd60:	2000077c 	.word	0x2000077c

0800cd64 <LmHandlerJoinStatus>:

LmHandlerFlagStatus_t LmHandlerJoinStatus( void )
{
 800cd64:	b580      	push	{r7, lr}
 800cd66:	b08a      	sub	sp, #40	@ 0x28
 800cd68:	af00      	add	r7, sp, #0
    MibRequestConfirm_t mibReq;
    LoRaMacStatus_t status;

    mibReq.Type = MIB_NETWORK_ACTIVATION;
 800cd6a:	2301      	movs	r3, #1
 800cd6c:	703b      	strb	r3, [r7, #0]
    status = LoRaMacMibGetRequestConfirm( &mibReq );
 800cd6e:	463b      	mov	r3, r7
 800cd70:	4618      	mov	r0, r3
 800cd72:	f005 f861 	bl	8011e38 <LoRaMacMibGetRequestConfirm>
 800cd76:	4603      	mov	r3, r0
 800cd78:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    if( status == LORAMAC_STATUS_OK )
 800cd7c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800cd80:	2b00      	cmp	r3, #0
 800cd82:	d106      	bne.n	800cd92 <LmHandlerJoinStatus+0x2e>
    {
        if( mibReq.Param.NetworkActivation == ACTIVATION_TYPE_NONE )
 800cd84:	793b      	ldrb	r3, [r7, #4]
 800cd86:	2b00      	cmp	r3, #0
 800cd88:	d101      	bne.n	800cd8e <LmHandlerJoinStatus+0x2a>
        {
            return LORAMAC_HANDLER_RESET;
 800cd8a:	2300      	movs	r3, #0
 800cd8c:	e002      	b.n	800cd94 <LmHandlerJoinStatus+0x30>
        }
        else
        {
            return LORAMAC_HANDLER_SET;
 800cd8e:	2301      	movs	r3, #1
 800cd90:	e000      	b.n	800cd94 <LmHandlerJoinStatus+0x30>
        }
    }
    else
    {
        return LORAMAC_HANDLER_RESET;
 800cd92:	2300      	movs	r3, #0
    }
}
 800cd94:	4618      	mov	r0, r3
 800cd96:	3728      	adds	r7, #40	@ 0x28
 800cd98:	46bd      	mov	sp, r7
 800cd9a:	bd80      	pop	{r7, pc}

0800cd9c <LmHandlerSend>:

LmHandlerErrorStatus_t LmHandlerSend( LmHandlerAppData_t *appData, LmHandlerMsgTypes_t isTxConfirmed, bool allowDelayedTx )
{
 800cd9c:	b580      	push	{r7, lr}
 800cd9e:	b08a      	sub	sp, #40	@ 0x28
 800cda0:	af00      	add	r7, sp, #0
 800cda2:	6078      	str	r0, [r7, #4]
 800cda4:	460b      	mov	r3, r1
 800cda6:	70fb      	strb	r3, [r7, #3]
 800cda8:	4613      	mov	r3, r2
 800cdaa:	70bb      	strb	r3, [r7, #2]
    LoRaMacStatus_t status;
    LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_ERROR;
 800cdac:	23ff      	movs	r3, #255	@ 0xff
 800cdae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    McpsReq_t mcpsReq;
    LoRaMacTxInfo_t txInfo;

    if (LoRaMacIsBusy() == true)
 800cdb2:	f002 f9c9 	bl	800f148 <LoRaMacIsBusy>
 800cdb6:	4603      	mov	r3, r0
 800cdb8:	2b00      	cmp	r3, #0
 800cdba:	d002      	beq.n	800cdc2 <LmHandlerSend+0x26>
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800cdbc:	f06f 0301 	mvn.w	r3, #1
 800cdc0:	e0a3      	b.n	800cf0a <LmHandlerSend+0x16e>
    }

    if( LmHandlerJoinStatus( ) != LORAMAC_HANDLER_SET )
 800cdc2:	f7ff ffcf 	bl	800cd64 <LmHandlerJoinStatus>
 800cdc6:	4603      	mov	r3, r0
 800cdc8:	2b01      	cmp	r3, #1
 800cdca:	d00a      	beq.n	800cde2 <LmHandlerSend+0x46>
    {
        // The network isn't joined, try again.
        LmHandlerJoin( JoinParams.Mode, JoinParams.forceRejoin );
 800cdcc:	4b51      	ldr	r3, [pc, #324]	@ (800cf14 <LmHandlerSend+0x178>)
 800cdce:	799b      	ldrb	r3, [r3, #6]
 800cdd0:	4a50      	ldr	r2, [pc, #320]	@ (800cf14 <LmHandlerSend+0x178>)
 800cdd2:	79d2      	ldrb	r2, [r2, #7]
 800cdd4:	4611      	mov	r1, r2
 800cdd6:	4618      	mov	r0, r3
 800cdd8:	f7ff ff42 	bl	800cc60 <LmHandlerJoin>
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800cddc:	f06f 0302 	mvn.w	r3, #2
 800cde0:	e093      	b.n	800cf0a <LmHandlerSend+0x16e>
    {
        return LORAMAC_HANDLER_COMPLIANCE_RUNNING;
    }
#endif /* LORAMAC_VERSION */

    TxParams.MsgType = isTxConfirmed;
 800cde2:	4a4d      	ldr	r2, [pc, #308]	@ (800cf18 <LmHandlerSend+0x17c>)
 800cde4:	78fb      	ldrb	r3, [r7, #3]
 800cde6:	7213      	strb	r3, [r2, #8]
    mcpsReq.Type = ( isTxConfirmed == LORAMAC_HANDLER_UNCONFIRMED_MSG ) ? MCPS_UNCONFIRMED : MCPS_CONFIRMED;
 800cde8:	78fb      	ldrb	r3, [r7, #3]
 800cdea:	2b00      	cmp	r3, #0
 800cdec:	bf14      	ite	ne
 800cdee:	2301      	movne	r3, #1
 800cdf0:	2300      	moveq	r3, #0
 800cdf2:	b2db      	uxtb	r3, r3
 800cdf4:	743b      	strb	r3, [r7, #16]
    mcpsReq.Req.Unconfirmed.Datarate = LmHandlerParams.TxDatarate;
 800cdf6:	4b49      	ldr	r3, [pc, #292]	@ (800cf1c <LmHandlerSend+0x180>)
 800cdf8:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800cdfc:	77bb      	strb	r3, [r7, #30]
    if( LoRaMacQueryTxPossible( appData->BufferSize, &txInfo ) != LORAMAC_STATUS_OK )
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	785b      	ldrb	r3, [r3, #1]
 800ce02:	f107 020c 	add.w	r2, r7, #12
 800ce06:	4611      	mov	r1, r2
 800ce08:	4618      	mov	r0, r3
 800ce0a:	f004 ff85 	bl	8011d18 <LoRaMacQueryTxPossible>
 800ce0e:	4603      	mov	r3, r0
 800ce10:	2b00      	cmp	r3, #0
 800ce12:	d009      	beq.n	800ce28 <LmHandlerSend+0x8c>
    {
        // Send empty frame in order to flush MAC commands
        mcpsReq.Type = MCPS_UNCONFIRMED;
 800ce14:	2300      	movs	r3, #0
 800ce16:	743b      	strb	r3, [r7, #16]
        mcpsReq.Req.Unconfirmed.fBuffer = NULL;
 800ce18:	2300      	movs	r3, #0
 800ce1a:	61bb      	str	r3, [r7, #24]
        mcpsReq.Req.Unconfirmed.fBufferSize = 0;
 800ce1c:	2300      	movs	r3, #0
 800ce1e:	83bb      	strh	r3, [r7, #28]
        lmhStatus = LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED;
 800ce20:	23f9      	movs	r3, #249	@ 0xf9
 800ce22:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800ce26:	e008      	b.n	800ce3a <LmHandlerSend+0x9e>
    }
    else
    {
        mcpsReq.Req.Unconfirmed.fPort = appData->Port;
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	781b      	ldrb	r3, [r3, #0]
 800ce2c:	753b      	strb	r3, [r7, #20]
        mcpsReq.Req.Unconfirmed.fBufferSize = appData->BufferSize;
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	785b      	ldrb	r3, [r3, #1]
 800ce32:	83bb      	strh	r3, [r7, #28]
        mcpsReq.Req.Unconfirmed.fBuffer = appData->Buffer;
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	685b      	ldr	r3, [r3, #4]
 800ce38:	61bb      	str	r3, [r7, #24]
    }

    TxParams.AppData = *appData;
 800ce3a:	4b37      	ldr	r3, [pc, #220]	@ (800cf18 <LmHandlerSend+0x17c>)
 800ce3c:	687a      	ldr	r2, [r7, #4]
 800ce3e:	3310      	adds	r3, #16
 800ce40:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ce44:	e883 0003 	stmia.w	r3, {r0, r1}
    TxParams.Datarate = LmHandlerParams.TxDatarate;
 800ce48:	4b34      	ldr	r3, [pc, #208]	@ (800cf1c <LmHandlerSend+0x180>)
 800ce4a:	f993 2004 	ldrsb.w	r2, [r3, #4]
 800ce4e:	4b32      	ldr	r3, [pc, #200]	@ (800cf18 <LmHandlerSend+0x17c>)
 800ce50:	729a      	strb	r2, [r3, #10]

    status = LoRaMacMcpsRequest(&mcpsReq, allowDelayedTx);
 800ce52:	78ba      	ldrb	r2, [r7, #2]
 800ce54:	f107 0310 	add.w	r3, r7, #16
 800ce58:	4611      	mov	r1, r2
 800ce5a:	4618      	mov	r0, r3
 800ce5c:	f005 fe88 	bl	8012b70 <LoRaMacMcpsRequest>
 800ce60:	4603      	mov	r3, r0
 800ce62:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    DutyCycleWaitTime = mcpsReq.ReqReturn.DutyCycleWaitTime;
 800ce66:	6a3b      	ldr	r3, [r7, #32]
 800ce68:	4a2d      	ldr	r2, [pc, #180]	@ (800cf20 <LmHandlerSend+0x184>)
 800ce6a:	6013      	str	r3, [r2, #0]

    switch (status)
 800ce6c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800ce70:	2b11      	cmp	r3, #17
 800ce72:	d843      	bhi.n	800cefc <LmHandlerSend+0x160>
 800ce74:	a201      	add	r2, pc, #4	@ (adr r2, 800ce7c <LmHandlerSend+0xe0>)
 800ce76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce7a:	bf00      	nop
 800ce7c:	0800cec5 	.word	0x0800cec5
 800ce80:	0800cedd 	.word	0x0800cedd
 800ce84:	0800cefd 	.word	0x0800cefd
 800ce88:	0800cefd 	.word	0x0800cefd
 800ce8c:	0800cefd 	.word	0x0800cefd
 800ce90:	0800cefd 	.word	0x0800cefd
 800ce94:	0800cefd 	.word	0x0800cefd
 800ce98:	0800cee5 	.word	0x0800cee5
 800ce9c:	0800cefd 	.word	0x0800cefd
 800cea0:	0800cefd 	.word	0x0800cefd
 800cea4:	0800cefd 	.word	0x0800cefd
 800cea8:	0800cef5 	.word	0x0800cef5
 800ceac:	0800cefd 	.word	0x0800cefd
 800ceb0:	0800cefd 	.word	0x0800cefd
 800ceb4:	0800cedd 	.word	0x0800cedd
 800ceb8:	0800cedd 	.word	0x0800cedd
 800cebc:	0800cedd 	.word	0x0800cedd
 800cec0:	0800ceed 	.word	0x0800ceed
    {
        case LORAMAC_STATUS_OK:
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
            IsUplinkTxPending = false;
 800cec4:	4b17      	ldr	r3, [pc, #92]	@ (800cf24 <LmHandlerSend+0x188>)
 800cec6:	2200      	movs	r2, #0
 800cec8:	701a      	strb	r2, [r3, #0]
#endif /* LORAMAC_VERSION */
            if (lmhStatus != LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED)
 800ceca:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800cece:	f113 0f07 	cmn.w	r3, #7
 800ced2:	d017      	beq.n	800cf04 <LmHandlerSend+0x168>
            {
                lmhStatus = LORAMAC_HANDLER_SUCCESS;
 800ced4:	2300      	movs	r3, #0
 800ced6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            }
            break;
 800ceda:	e013      	b.n	800cf04 <LmHandlerSend+0x168>
        case LORAMAC_STATUS_BUSY:
        case LORAMAC_STATUS_BUSY_UPLINK_COLLISION:
        case LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME:
        case LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME:
            lmhStatus = LORAMAC_HANDLER_BUSY_ERROR;
 800cedc:	23fe      	movs	r3, #254	@ 0xfe
 800cede:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 800cee2:	e010      	b.n	800cf06 <LmHandlerSend+0x16a>
        case LORAMAC_STATUS_NO_NETWORK_JOINED:
            lmhStatus = LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800cee4:	23fd      	movs	r3, #253	@ 0xfd
 800cee6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 800ceea:	e00c      	b.n	800cf06 <LmHandlerSend+0x16a>
        case LORAMAC_STATUS_CRYPTO_ERROR:
            lmhStatus = LORAMAC_HANDLER_CRYPTO_ERROR;
 800ceec:	23fb      	movs	r3, #251	@ 0xfb
 800ceee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 800cef2:	e008      	b.n	800cf06 <LmHandlerSend+0x16a>
        case LORAMAC_STATUS_DUTYCYCLE_RESTRICTED:
            lmhStatus = LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED;
 800cef4:	23fa      	movs	r3, #250	@ 0xfa
 800cef6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 800cefa:	e004      	b.n	800cf06 <LmHandlerSend+0x16a>
        case LORAMAC_STATUS_REGION_NOT_SUPPORTED:
        case LORAMAC_STATUS_NO_FREE_CHANNEL_FOUND:
        case LORAMAC_STATUS_NO_CHANNEL_FOUND:
        case LORAMAC_STATUS_LENGTH_ERROR:
        default:
            lmhStatus = LORAMAC_HANDLER_ERROR;
 800cefc:	23ff      	movs	r3, #255	@ 0xff
 800cefe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 800cf02:	e000      	b.n	800cf06 <LmHandlerSend+0x16a>
            break;
 800cf04:	bf00      	nop
    }

    return lmhStatus;
 800cf06:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 800cf0a:	4618      	mov	r0, r3
 800cf0c:	3728      	adds	r7, #40	@ 0x28
 800cf0e:	46bd      	mov	sp, r7
 800cf10:	bd80      	pop	{r7, pc}
 800cf12:	bf00      	nop
 800cf14:	200000a8 	.word	0x200000a8
 800cf18:	200000b0 	.word	0x200000b0
 800cf1c:	20000740 	.word	0x20000740
 800cf20:	2000077c 	.word	0x2000077c
 800cf24:	20000780 	.word	0x20000780

0800cf28 <LmHandlerDeviceTimeReq>:

LmHandlerErrorStatus_t LmHandlerDeviceTimeReq( void )
{
 800cf28:	b580      	push	{r7, lr}
 800cf2a:	b086      	sub	sp, #24
 800cf2c:	af00      	add	r7, sp, #0
    LoRaMacStatus_t status;
    MlmeReq_t mlmeReq;

    mlmeReq.Type = MLME_DEVICE_TIME;
 800cf2e:	2309      	movs	r3, #9
 800cf30:	703b      	strb	r3, [r7, #0]

    status = LoRaMacMlmeRequest( &mlmeReq );
 800cf32:	463b      	mov	r3, r7
 800cf34:	4618      	mov	r0, r3
 800cf36:	f005 fc95 	bl	8012864 <LoRaMacMlmeRequest>
 800cf3a:	4603      	mov	r3, r0
 800cf3c:	75fb      	strb	r3, [r7, #23]
    DutyCycleWaitTime = mlmeReq.ReqReturn.DutyCycleWaitTime;
 800cf3e:	693b      	ldr	r3, [r7, #16]
 800cf40:	4a06      	ldr	r2, [pc, #24]	@ (800cf5c <LmHandlerDeviceTimeReq+0x34>)
 800cf42:	6013      	str	r3, [r2, #0]

    if( status == LORAMAC_STATUS_OK )
 800cf44:	7dfb      	ldrb	r3, [r7, #23]
 800cf46:	2b00      	cmp	r3, #0
 800cf48:	d101      	bne.n	800cf4e <LmHandlerDeviceTimeReq+0x26>
    {
        return LORAMAC_HANDLER_SUCCESS;
 800cf4a:	2300      	movs	r3, #0
 800cf4c:	e001      	b.n	800cf52 <LmHandlerDeviceTimeReq+0x2a>
    }
    else
    {
        return LORAMAC_HANDLER_ERROR;
 800cf4e:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 800cf52:	4618      	mov	r0, r3
 800cf54:	3718      	adds	r7, #24
 800cf56:	46bd      	mov	sp, r7
 800cf58:	bd80      	pop	{r7, pc}
 800cf5a:	bf00      	nop
 800cf5c:	2000077c 	.word	0x2000077c

0800cf60 <LmHandlerPingSlotReq>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED == 1 */

LmHandlerErrorStatus_t LmHandlerPingSlotReq( uint8_t periodicity )
{
 800cf60:	b480      	push	{r7}
 800cf62:	b083      	sub	sp, #12
 800cf64:	af00      	add	r7, sp, #0
 800cf66:	4603      	mov	r3, r0
 800cf68:	71fb      	strb	r3, [r7, #7]
        return LmHandlerSend( &appData, LmHandlerParams.IsTxConfirmed, false );
    }
    else
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
    {
        return LORAMAC_HANDLER_ERROR;
 800cf6a:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 800cf6e:	4618      	mov	r0, r3
 800cf70:	370c      	adds	r7, #12
 800cf72:	46bd      	mov	sp, r7
 800cf74:	bc80      	pop	{r7}
 800cf76:	4770      	bx	lr

0800cf78 <LmHandlerRequestClass>:

LmHandlerErrorStatus_t LmHandlerRequestClass( DeviceClass_t newClass )
{
 800cf78:	b580      	push	{r7, lr}
 800cf7a:	b08c      	sub	sp, #48	@ 0x30
 800cf7c:	af00      	add	r7, sp, #0
 800cf7e:	4603      	mov	r3, r0
 800cf80:	71fb      	strb	r3, [r7, #7]
    MibRequestConfirm_t mibReq;
    DeviceClass_t currentClass;
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 800cf82:	2300      	movs	r3, #0
 800cf84:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    if (LoRaMacIsBusy() == true)
 800cf88:	f002 f8de 	bl	800f148 <LoRaMacIsBusy>
 800cf8c:	4603      	mov	r3, r0
 800cf8e:	2b00      	cmp	r3, #0
 800cf90:	d002      	beq.n	800cf98 <LmHandlerRequestClass+0x20>
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800cf92:	f06f 0301 	mvn.w	r3, #1
 800cf96:	e071      	b.n	800d07c <LmHandlerRequestClass+0x104>
    }

    if (LmHandlerJoinStatus() != LORAMAC_HANDLER_SET)
 800cf98:	f7ff fee4 	bl	800cd64 <LmHandlerJoinStatus>
 800cf9c:	4603      	mov	r3, r0
 800cf9e:	2b01      	cmp	r3, #1
 800cfa0:	d002      	beq.n	800cfa8 <LmHandlerRequestClass+0x30>
    {
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800cfa2:	f06f 0302 	mvn.w	r3, #2
 800cfa6:	e069      	b.n	800d07c <LmHandlerRequestClass+0x104>
    }

    mibReq.Type = MIB_DEVICE_CLASS;
 800cfa8:	2300      	movs	r3, #0
 800cfaa:	723b      	strb	r3, [r7, #8]
    if ( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800cfac:	f107 0308 	add.w	r3, r7, #8
 800cfb0:	4618      	mov	r0, r3
 800cfb2:	f004 ff41 	bl	8011e38 <LoRaMacMibGetRequestConfirm>
 800cfb6:	4603      	mov	r3, r0
 800cfb8:	2b00      	cmp	r3, #0
 800cfba:	d002      	beq.n	800cfc2 <LmHandlerRequestClass+0x4a>
    {
        return LORAMAC_HANDLER_ERROR;
 800cfbc:	f04f 33ff 	mov.w	r3, #4294967295
 800cfc0:	e05c      	b.n	800d07c <LmHandlerRequestClass+0x104>
    }
    currentClass = mibReq.Param.Class;
 800cfc2:	7b3b      	ldrb	r3, [r7, #12]
 800cfc4:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e

    // Attempt to switch only if class update
    if( currentClass != newClass )
 800cfc8:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 800cfcc:	79fb      	ldrb	r3, [r7, #7]
 800cfce:	429a      	cmp	r2, r3
 800cfd0:	d052      	beq.n	800d078 <LmHandlerRequestClass+0x100>
    {
        switch( newClass )
 800cfd2:	79fb      	ldrb	r3, [r7, #7]
 800cfd4:	2b02      	cmp	r3, #2
 800cfd6:	d028      	beq.n	800d02a <LmHandlerRequestClass+0xb2>
 800cfd8:	2b02      	cmp	r3, #2
 800cfda:	dc48      	bgt.n	800d06e <LmHandlerRequestClass+0xf6>
 800cfdc:	2b00      	cmp	r3, #0
 800cfde:	d002      	beq.n	800cfe6 <LmHandlerRequestClass+0x6e>
 800cfe0:	2b01      	cmp	r3, #1
 800cfe2:	d01e      	beq.n	800d022 <LmHandlerRequestClass+0xaa>
                    }
                }
            }
            break;
        default:
            break;
 800cfe4:	e043      	b.n	800d06e <LmHandlerRequestClass+0xf6>
                if( currentClass != CLASS_A )
 800cfe6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800cfea:	2b00      	cmp	r3, #0
 800cfec:	d041      	beq.n	800d072 <LmHandlerRequestClass+0xfa>
                    mibReq.Param.Class = newClass;
 800cfee:	79fb      	ldrb	r3, [r7, #7]
 800cff0:	733b      	strb	r3, [r7, #12]
                    if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 800cff2:	f107 0308 	add.w	r3, r7, #8
 800cff6:	4618      	mov	r0, r3
 800cff8:	f005 f8c4 	bl	8012184 <LoRaMacMibSetRequestConfirm>
 800cffc:	4603      	mov	r3, r0
 800cffe:	2b00      	cmp	r3, #0
 800d000:	d10b      	bne.n	800d01a <LmHandlerRequestClass+0xa2>
                        if (LmHandlerCallbacks->OnClassChange != NULL)
 800d002:	4b20      	ldr	r3, [pc, #128]	@ (800d084 <LmHandlerRequestClass+0x10c>)
 800d004:	681b      	ldr	r3, [r3, #0]
 800d006:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d008:	2b00      	cmp	r3, #0
 800d00a:	d032      	beq.n	800d072 <LmHandlerRequestClass+0xfa>
                            LmHandlerCallbacks->OnClassChange( newClass );
 800d00c:	4b1d      	ldr	r3, [pc, #116]	@ (800d084 <LmHandlerRequestClass+0x10c>)
 800d00e:	681b      	ldr	r3, [r3, #0]
 800d010:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d012:	79fa      	ldrb	r2, [r7, #7]
 800d014:	4610      	mov	r0, r2
 800d016:	4798      	blx	r3
            break;
 800d018:	e02b      	b.n	800d072 <LmHandlerRequestClass+0xfa>
                        errorStatus = LORAMAC_HANDLER_ERROR;
 800d01a:	23ff      	movs	r3, #255	@ 0xff
 800d01c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            break;
 800d020:	e027      	b.n	800d072 <LmHandlerRequestClass+0xfa>
                errorStatus = LORAMAC_HANDLER_ERROR;
 800d022:	23ff      	movs	r3, #255	@ 0xff
 800d024:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            break;
 800d028:	e026      	b.n	800d078 <LmHandlerRequestClass+0x100>
                if( currentClass != CLASS_A )
 800d02a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800d02e:	2b00      	cmp	r3, #0
 800d030:	d003      	beq.n	800d03a <LmHandlerRequestClass+0xc2>
                    errorStatus = LORAMAC_HANDLER_ERROR;
 800d032:	23ff      	movs	r3, #255	@ 0xff
 800d034:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            break;
 800d038:	e01d      	b.n	800d076 <LmHandlerRequestClass+0xfe>
                    mibReq.Param.Class = newClass;
 800d03a:	79fb      	ldrb	r3, [r7, #7]
 800d03c:	733b      	strb	r3, [r7, #12]
                    if (LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK)
 800d03e:	f107 0308 	add.w	r3, r7, #8
 800d042:	4618      	mov	r0, r3
 800d044:	f005 f89e 	bl	8012184 <LoRaMacMibSetRequestConfirm>
 800d048:	4603      	mov	r3, r0
 800d04a:	2b00      	cmp	r3, #0
 800d04c:	d10b      	bne.n	800d066 <LmHandlerRequestClass+0xee>
                        if (LmHandlerCallbacks->OnClassChange != NULL)
 800d04e:	4b0d      	ldr	r3, [pc, #52]	@ (800d084 <LmHandlerRequestClass+0x10c>)
 800d050:	681b      	ldr	r3, [r3, #0]
 800d052:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d054:	2b00      	cmp	r3, #0
 800d056:	d00e      	beq.n	800d076 <LmHandlerRequestClass+0xfe>
                            LmHandlerCallbacks->OnClassChange( newClass );
 800d058:	4b0a      	ldr	r3, [pc, #40]	@ (800d084 <LmHandlerRequestClass+0x10c>)
 800d05a:	681b      	ldr	r3, [r3, #0]
 800d05c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d05e:	79fa      	ldrb	r2, [r7, #7]
 800d060:	4610      	mov	r0, r2
 800d062:	4798      	blx	r3
            break;
 800d064:	e007      	b.n	800d076 <LmHandlerRequestClass+0xfe>
                        errorStatus = LORAMAC_HANDLER_ERROR;
 800d066:	23ff      	movs	r3, #255	@ 0xff
 800d068:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            break;
 800d06c:	e003      	b.n	800d076 <LmHandlerRequestClass+0xfe>
            break;
 800d06e:	bf00      	nop
 800d070:	e002      	b.n	800d078 <LmHandlerRequestClass+0x100>
            break;
 800d072:	bf00      	nop
 800d074:	e000      	b.n	800d078 <LmHandlerRequestClass+0x100>
            break;
 800d076:	bf00      	nop
        }
    }
    return errorStatus;
 800d078:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 800d07c:	4618      	mov	r0, r3
 800d07e:	3730      	adds	r7, #48	@ 0x30
 800d080:	46bd      	mov	sp, r7
 800d082:	bd80      	pop	{r7, pc}
 800d084:	20000754 	.word	0x20000754

0800d088 <LmHandlerGetCurrentClass>:

LmHandlerErrorStatus_t LmHandlerGetCurrentClass( DeviceClass_t *deviceClass )
{
 800d088:	b580      	push	{r7, lr}
 800d08a:	b08c      	sub	sp, #48	@ 0x30
 800d08c:	af00      	add	r7, sp, #0
 800d08e:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
    if (deviceClass == NULL)
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	2b00      	cmp	r3, #0
 800d094:	d102      	bne.n	800d09c <LmHandlerGetCurrentClass+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 800d096:	f04f 33ff 	mov.w	r3, #4294967295
 800d09a:	e010      	b.n	800d0be <LmHandlerGetCurrentClass+0x36>
    }

    mibReq.Type = MIB_DEVICE_CLASS;
 800d09c:	2300      	movs	r3, #0
 800d09e:	733b      	strb	r3, [r7, #12]
    if (LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK)
 800d0a0:	f107 030c 	add.w	r3, r7, #12
 800d0a4:	4618      	mov	r0, r3
 800d0a6:	f004 fec7 	bl	8011e38 <LoRaMacMibGetRequestConfirm>
 800d0aa:	4603      	mov	r3, r0
 800d0ac:	2b00      	cmp	r3, #0
 800d0ae:	d002      	beq.n	800d0b6 <LmHandlerGetCurrentClass+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 800d0b0:	f04f 33ff 	mov.w	r3, #4294967295
 800d0b4:	e003      	b.n	800d0be <LmHandlerGetCurrentClass+0x36>
    }

    *deviceClass = mibReq.Param.Class;
 800d0b6:	7c3a      	ldrb	r2, [r7, #16]
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	701a      	strb	r2, [r3, #0]
    return LORAMAC_HANDLER_SUCCESS;
 800d0bc:	2300      	movs	r3, #0
}
 800d0be:	4618      	mov	r0, r3
 800d0c0:	3730      	adds	r7, #48	@ 0x30
 800d0c2:	46bd      	mov	sp, r7
 800d0c4:	bd80      	pop	{r7, pc}
	...

0800d0c8 <LmHandlerGetTxDatarate>:

LmHandlerErrorStatus_t LmHandlerGetTxDatarate( int8_t *txDatarate )
{
 800d0c8:	b580      	push	{r7, lr}
 800d0ca:	b08c      	sub	sp, #48	@ 0x30
 800d0cc:	af00      	add	r7, sp, #0
 800d0ce:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibGet;
    if (txDatarate == NULL)
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	2b00      	cmp	r3, #0
 800d0d4:	d102      	bne.n	800d0dc <LmHandlerGetTxDatarate+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 800d0d6:	f04f 33ff 	mov.w	r3, #4294967295
 800d0da:	e016      	b.n	800d10a <LmHandlerGetTxDatarate+0x42>
    }

    mibGet.Type = MIB_CHANNELS_DATARATE;
 800d0dc:	2320      	movs	r3, #32
 800d0de:	733b      	strb	r3, [r7, #12]
    if (LoRaMacMibGetRequestConfirm( &mibGet ) != LORAMAC_STATUS_OK)
 800d0e0:	f107 030c 	add.w	r3, r7, #12
 800d0e4:	4618      	mov	r0, r3
 800d0e6:	f004 fea7 	bl	8011e38 <LoRaMacMibGetRequestConfirm>
 800d0ea:	4603      	mov	r3, r0
 800d0ec:	2b00      	cmp	r3, #0
 800d0ee:	d002      	beq.n	800d0f6 <LmHandlerGetTxDatarate+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 800d0f0:	f04f 33ff 	mov.w	r3, #4294967295
 800d0f4:	e009      	b.n	800d10a <LmHandlerGetTxDatarate+0x42>
    }

    *txDatarate = mibGet.Param.ChannelsDatarate;
 800d0f6:	f997 2010 	ldrsb.w	r2, [r7, #16]
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	701a      	strb	r2, [r3, #0]
    LmHandlerParams.TxDatarate = *txDatarate;
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	f993 2000 	ldrsb.w	r2, [r3]
 800d104:	4b03      	ldr	r3, [pc, #12]	@ (800d114 <LmHandlerGetTxDatarate+0x4c>)
 800d106:	711a      	strb	r2, [r3, #4]
    return LORAMAC_HANDLER_SUCCESS;
 800d108:	2300      	movs	r3, #0
}
 800d10a:	4618      	mov	r0, r3
 800d10c:	3730      	adds	r7, #48	@ 0x30
 800d10e:	46bd      	mov	sp, r7
 800d110:	bd80      	pop	{r7, pc}
 800d112:	bf00      	nop
 800d114:	20000740 	.word	0x20000740

0800d118 <LmHandlerSetSystemMaxRxError>:
    *region = LmHandlerParams.ActiveRegion;
    return LORAMAC_HANDLER_SUCCESS;
}

LmHandlerErrorStatus_t LmHandlerSetSystemMaxRxError( uint32_t maxErrorInMs )
{
 800d118:	b580      	push	{r7, lr}
 800d11a:	b08c      	sub	sp, #48	@ 0x30
 800d11c:	af00      	add	r7, sp, #0
 800d11e:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;

    mibReq.Type = MIB_SYSTEM_MAX_RX_ERROR;
 800d120:	2323      	movs	r3, #35	@ 0x23
 800d122:	733b      	strb	r3, [r7, #12]
    mibReq.Param.SystemMaxRxError = maxErrorInMs;
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	613b      	str	r3, [r7, #16]
    if( LoRaMacMibSetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800d128:	f107 030c 	add.w	r3, r7, #12
 800d12c:	4618      	mov	r0, r3
 800d12e:	f005 f829 	bl	8012184 <LoRaMacMibSetRequestConfirm>
 800d132:	4603      	mov	r3, r0
 800d134:	2b00      	cmp	r3, #0
 800d136:	d002      	beq.n	800d13e <LmHandlerSetSystemMaxRxError+0x26>
    {
        return LORAMAC_HANDLER_ERROR;
 800d138:	f04f 33ff 	mov.w	r3, #4294967295
 800d13c:	e000      	b.n	800d140 <LmHandlerSetSystemMaxRxError+0x28>
    }
    return LORAMAC_HANDLER_SUCCESS;
 800d13e:	2300      	movs	r3, #0
}
 800d140:	4618      	mov	r0, r3
 800d142:	3730      	adds	r7, #48	@ 0x30
 800d144:	46bd      	mov	sp, r7
 800d146:	bd80      	pop	{r7, pc}

0800d148 <McpsConfirm>:
 * LORAMAC NOTIFICATIONS HANDLING
 *=============================================================================
 */

static void McpsConfirm( McpsConfirm_t *mcpsConfirm )
{
 800d148:	b580      	push	{r7, lr}
 800d14a:	b082      	sub	sp, #8
 800d14c:	af00      	add	r7, sp, #0
 800d14e:	6078      	str	r0, [r7, #4]
    TxParams.IsMcpsConfirm = 1;
 800d150:	4b15      	ldr	r3, [pc, #84]	@ (800d1a8 <McpsConfirm+0x60>)
 800d152:	2201      	movs	r2, #1
 800d154:	701a      	strb	r2, [r3, #0]
    TxParams.Status = mcpsConfirm->Status;
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	785a      	ldrb	r2, [r3, #1]
 800d15a:	4b13      	ldr	r3, [pc, #76]	@ (800d1a8 <McpsConfirm+0x60>)
 800d15c:	705a      	strb	r2, [r3, #1]
    TxParams.Datarate = mcpsConfirm->Datarate;
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	789b      	ldrb	r3, [r3, #2]
 800d162:	b25a      	sxtb	r2, r3
 800d164:	4b10      	ldr	r3, [pc, #64]	@ (800d1a8 <McpsConfirm+0x60>)
 800d166:	729a      	strb	r2, [r3, #10]
    TxParams.UplinkCounter = mcpsConfirm->UpLinkCounter;
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	68db      	ldr	r3, [r3, #12]
 800d16c:	4a0e      	ldr	r2, [pc, #56]	@ (800d1a8 <McpsConfirm+0x60>)
 800d16e:	60d3      	str	r3, [r2, #12]
    TxParams.TxPower = mcpsConfirm->TxPower;
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	f993 2003 	ldrsb.w	r2, [r3, #3]
 800d176:	4b0c      	ldr	r3, [pc, #48]	@ (800d1a8 <McpsConfirm+0x60>)
 800d178:	761a      	strb	r2, [r3, #24]
    TxParams.Channel = mcpsConfirm->Channel;
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	691b      	ldr	r3, [r3, #16]
 800d17e:	b2da      	uxtb	r2, r3
 800d180:	4b09      	ldr	r3, [pc, #36]	@ (800d1a8 <McpsConfirm+0x60>)
 800d182:	765a      	strb	r2, [r3, #25]
    TxParams.AckReceived = mcpsConfirm->AckReceived;
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	791b      	ldrb	r3, [r3, #4]
 800d188:	461a      	mov	r2, r3
 800d18a:	4b07      	ldr	r3, [pc, #28]	@ (800d1a8 <McpsConfirm+0x60>)
 800d18c:	725a      	strb	r2, [r3, #9]

    LmHandlerCallbacks->OnTxData( &TxParams );
 800d18e:	4b07      	ldr	r3, [pc, #28]	@ (800d1ac <McpsConfirm+0x64>)
 800d190:	681b      	ldr	r3, [r3, #0]
 800d192:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d194:	4804      	ldr	r0, [pc, #16]	@ (800d1a8 <McpsConfirm+0x60>)
 800d196:	4798      	blx	r3

    LmHandlerPackagesNotify( PACKAGE_MCPS_CONFIRM, mcpsConfirm );
 800d198:	6879      	ldr	r1, [r7, #4]
 800d19a:	2000      	movs	r0, #0
 800d19c:	f000 f9c6 	bl	800d52c <LmHandlerPackagesNotify>
}
 800d1a0:	bf00      	nop
 800d1a2:	3708      	adds	r7, #8
 800d1a4:	46bd      	mov	sp, r7
 800d1a6:	bd80      	pop	{r7, pc}
 800d1a8:	200000b0 	.word	0x200000b0
 800d1ac:	20000754 	.word	0x20000754

0800d1b0 <McpsIndication>:

static void McpsIndication( McpsIndication_t *mcpsIndication, LoRaMacRxStatus_t *rxStatus )
{
 800d1b0:	b580      	push	{r7, lr}
 800d1b2:	b086      	sub	sp, #24
 800d1b4:	af00      	add	r7, sp, #0
 800d1b6:	6078      	str	r0, [r7, #4]
 800d1b8:	6039      	str	r1, [r7, #0]
    LmHandlerAppData_t appData;
    DeviceClass_t deviceClass = CLASS_A;
 800d1ba:	2300      	movs	r3, #0
 800d1bc:	73fb      	strb	r3, [r7, #15]
    RxParams.IsMcpsIndication = 1;
 800d1be:	4b2c      	ldr	r3, [pc, #176]	@ (800d270 <McpsIndication+0xc0>)
 800d1c0:	2201      	movs	r2, #1
 800d1c2:	701a      	strb	r2, [r3, #0]
    RxParams.Status = mcpsIndication->Status;
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	785a      	ldrb	r2, [r3, #1]
 800d1c8:	4b29      	ldr	r3, [pc, #164]	@ (800d270 <McpsIndication+0xc0>)
 800d1ca:	705a      	strb	r2, [r3, #1]

    if( RxParams.Status != LORAMAC_EVENT_INFO_STATUS_OK )
 800d1cc:	4b28      	ldr	r3, [pc, #160]	@ (800d270 <McpsIndication+0xc0>)
 800d1ce:	785b      	ldrb	r3, [r3, #1]
 800d1d0:	2b00      	cmp	r3, #0
 800d1d2:	d149      	bne.n	800d268 <McpsIndication+0xb8>
    {
        return;
    }

    RxParams.Datarate = mcpsIndication->RxDatarate;
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	791b      	ldrb	r3, [r3, #4]
 800d1d8:	b25a      	sxtb	r2, r3
 800d1da:	4b25      	ldr	r3, [pc, #148]	@ (800d270 <McpsIndication+0xc0>)
 800d1dc:	721a      	strb	r2, [r3, #8]
    RxParams.Rssi = rxStatus->Rssi;
 800d1de:	683b      	ldr	r3, [r7, #0]
 800d1e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d1e4:	b25a      	sxtb	r2, r3
 800d1e6:	4b22      	ldr	r3, [pc, #136]	@ (800d270 <McpsIndication+0xc0>)
 800d1e8:	725a      	strb	r2, [r3, #9]
    RxParams.Snr = rxStatus->Snr;
 800d1ea:	683b      	ldr	r3, [r7, #0]
 800d1ec:	f993 2002 	ldrsb.w	r2, [r3, #2]
 800d1f0:	4b1f      	ldr	r3, [pc, #124]	@ (800d270 <McpsIndication+0xc0>)
 800d1f2:	729a      	strb	r2, [r3, #10]
    RxParams.RxSlot = rxStatus->RxSlot;
 800d1f4:	683b      	ldr	r3, [r7, #0]
 800d1f6:	78da      	ldrb	r2, [r3, #3]
 800d1f8:	4b1d      	ldr	r3, [pc, #116]	@ (800d270 <McpsIndication+0xc0>)
 800d1fa:	741a      	strb	r2, [r3, #16]
    RxParams.DownlinkCounter = mcpsIndication->DownLinkCounter;
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	691b      	ldr	r3, [r3, #16]
 800d200:	4a1b      	ldr	r2, [pc, #108]	@ (800d270 <McpsIndication+0xc0>)
 800d202:	60d3      	str	r3, [r2, #12]

    appData.Port = mcpsIndication->Port;
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	78db      	ldrb	r3, [r3, #3]
 800d208:	743b      	strb	r3, [r7, #16]
    appData.BufferSize = mcpsIndication->BufferSize;
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	7b1b      	ldrb	r3, [r3, #12]
 800d20e:	747b      	strb	r3, [r7, #17]
    appData.Buffer = mcpsIndication->Buffer;
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	689b      	ldr	r3, [r3, #8]
 800d214:	617b      	str	r3, [r7, #20]

    LmHandlerCallbacks->OnRxData( &appData, &RxParams );
 800d216:	4b17      	ldr	r3, [pc, #92]	@ (800d274 <McpsIndication+0xc4>)
 800d218:	681b      	ldr	r3, [r3, #0]
 800d21a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d21c:	f107 0210 	add.w	r2, r7, #16
 800d220:	4913      	ldr	r1, [pc, #76]	@ (800d270 <McpsIndication+0xc0>)
 800d222:	4610      	mov	r0, r2
 800d224:	4798      	blx	r3

    if ((LmHandlerCallbacks->OnSysTimeUpdate != NULL) && (mcpsIndication->DeviceTimeAnsReceived == true))
 800d226:	4b13      	ldr	r3, [pc, #76]	@ (800d274 <McpsIndication+0xc4>)
 800d228:	681b      	ldr	r3, [r3, #0]
 800d22a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d22c:	2b00      	cmp	r3, #0
 800d22e:	d007      	beq.n	800d240 <McpsIndication+0x90>
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	7e1b      	ldrb	r3, [r3, #24]
 800d234:	2b00      	cmp	r3, #0
 800d236:	d003      	beq.n	800d240 <McpsIndication+0x90>
    {
        LmHandlerCallbacks->OnSysTimeUpdate( );
 800d238:	4b0e      	ldr	r3, [pc, #56]	@ (800d274 <McpsIndication+0xc4>)
 800d23a:	681b      	ldr	r3, [r3, #0]
 800d23c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d23e:	4798      	blx	r3
    }
    // Call packages RxProcess function
    LmHandlerPackagesNotify( PACKAGE_MCPS_INDICATION, mcpsIndication );
 800d240:	6879      	ldr	r1, [r7, #4]
 800d242:	2001      	movs	r0, #1
 800d244:	f000 f972 	bl	800d52c <LmHandlerPackagesNotify>

    LmHandlerGetCurrentClass( &deviceClass );
 800d248:	f107 030f 	add.w	r3, r7, #15
 800d24c:	4618      	mov	r0, r3
 800d24e:	f7ff ff1b 	bl	800d088 <LmHandlerGetCurrentClass>
            .Port = 0
        };
        LmHandlerSend(&appData, LORAMAC_HANDLER_UNCONFIRMED_MSG, true);
    }
#elif (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    if ( ( mcpsIndication->FramePending == true ) && ( deviceClass == CLASS_A ) )
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	795b      	ldrb	r3, [r3, #5]
 800d256:	2b01      	cmp	r3, #1
 800d258:	d107      	bne.n	800d26a <McpsIndication+0xba>
 800d25a:	7bfb      	ldrb	r3, [r7, #15]
 800d25c:	2b00      	cmp	r3, #0
 800d25e:	d104      	bne.n	800d26a <McpsIndication+0xba>
    {
        // The server signals that it has pending data to be sent.
        // We schedule an uplink as soon as possible to flush the server.
        IsUplinkTxPending = true;
 800d260:	4b05      	ldr	r3, [pc, #20]	@ (800d278 <McpsIndication+0xc8>)
 800d262:	2201      	movs	r2, #1
 800d264:	701a      	strb	r2, [r3, #0]
 800d266:	e000      	b.n	800d26a <McpsIndication+0xba>
        return;
 800d268:	bf00      	nop
    }
#endif /* LORAMAC_VERSION */
}
 800d26a:	3718      	adds	r7, #24
 800d26c:	46bd      	mov	sp, r7
 800d26e:	bd80      	pop	{r7, pc}
 800d270:	200000cc 	.word	0x200000cc
 800d274:	20000754 	.word	0x20000754
 800d278:	20000780 	.word	0x20000780

0800d27c <MlmeConfirm>:

static void MlmeConfirm( MlmeConfirm_t *mlmeConfirm )
{
 800d27c:	b580      	push	{r7, lr}
 800d27e:	b08c      	sub	sp, #48	@ 0x30
 800d280:	af00      	add	r7, sp, #0
 800d282:	6078      	str	r0, [r7, #4]
    TxParams.IsMcpsConfirm = 0;
 800d284:	4b3c      	ldr	r3, [pc, #240]	@ (800d378 <MlmeConfirm+0xfc>)
 800d286:	2200      	movs	r2, #0
 800d288:	701a      	strb	r2, [r3, #0]
    TxParams.Status = mlmeConfirm->Status;
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	785a      	ldrb	r2, [r3, #1]
 800d28e:	4b3a      	ldr	r3, [pc, #232]	@ (800d378 <MlmeConfirm+0xfc>)
 800d290:	705a      	strb	r2, [r3, #1]
    LmHandlerCallbacks->OnTxData( &TxParams );
 800d292:	4b3a      	ldr	r3, [pc, #232]	@ (800d37c <MlmeConfirm+0x100>)
 800d294:	681b      	ldr	r3, [r3, #0]
 800d296:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d298:	4837      	ldr	r0, [pc, #220]	@ (800d378 <MlmeConfirm+0xfc>)
 800d29a:	4798      	blx	r3

    LmHandlerPackagesNotify( PACKAGE_MLME_CONFIRM, mlmeConfirm );
 800d29c:	6879      	ldr	r1, [r7, #4]
 800d29e:	2002      	movs	r0, #2
 800d2a0:	f000 f944 	bl	800d52c <LmHandlerPackagesNotify>

    switch( mlmeConfirm->MlmeRequest )
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	781b      	ldrb	r3, [r3, #0]
 800d2a8:	3b01      	subs	r3, #1
 800d2aa:	2b0b      	cmp	r3, #11
 800d2ac:	d85c      	bhi.n	800d368 <MlmeConfirm+0xec>
 800d2ae:	a201      	add	r2, pc, #4	@ (adr r2, 800d2b4 <MlmeConfirm+0x38>)
 800d2b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d2b4:	0800d2e5 	.word	0x0800d2e5
 800d2b8:	0800d369 	.word	0x0800d369
 800d2bc:	0800d369 	.word	0x0800d369
 800d2c0:	0800d337 	.word	0x0800d337
 800d2c4:	0800d369 	.word	0x0800d369
 800d2c8:	0800d369 	.word	0x0800d369
 800d2cc:	0800d369 	.word	0x0800d369
 800d2d0:	0800d369 	.word	0x0800d369
 800d2d4:	0800d369 	.word	0x0800d369
 800d2d8:	0800d369 	.word	0x0800d369
 800d2dc:	0800d34f 	.word	0x0800d34f
 800d2e0:	0800d369 	.word	0x0800d369
    {
    case MLME_JOIN:
        {
            MibRequestConfirm_t mibReq;
            mibReq.Type = MIB_DEV_ADDR;
 800d2e4:	2306      	movs	r3, #6
 800d2e6:	733b      	strb	r3, [r7, #12]
            LoRaMacMibGetRequestConfirm( &mibReq );
 800d2e8:	f107 030c 	add.w	r3, r7, #12
 800d2ec:	4618      	mov	r0, r3
 800d2ee:	f004 fda3 	bl	8011e38 <LoRaMacMibGetRequestConfirm>
            CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 800d2f2:	693b      	ldr	r3, [r7, #16]
 800d2f4:	4a22      	ldr	r2, [pc, #136]	@ (800d380 <MlmeConfirm+0x104>)
 800d2f6:	6153      	str	r3, [r2, #20]
            LmHandlerGetTxDatarate( &JoinParams.Datarate );
 800d2f8:	4822      	ldr	r0, [pc, #136]	@ (800d384 <MlmeConfirm+0x108>)
 800d2fa:	f7ff fee5 	bl	800d0c8 <LmHandlerGetTxDatarate>

            if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	785b      	ldrb	r3, [r3, #1]
 800d302:	2b00      	cmp	r3, #0
 800d304:	d108      	bne.n	800d318 <MlmeConfirm+0x9c>
            {
                // Status is OK, node has joined the network
                JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 800d306:	4b20      	ldr	r3, [pc, #128]	@ (800d388 <MlmeConfirm+0x10c>)
 800d308:	2200      	movs	r2, #0
 800d30a:	715a      	strb	r2, [r3, #5]
                LmHandlerRequestClass(LmHandlerParams.DefaultClass);
 800d30c:	4b1f      	ldr	r3, [pc, #124]	@ (800d38c <MlmeConfirm+0x110>)
 800d30e:	785b      	ldrb	r3, [r3, #1]
 800d310:	4618      	mov	r0, r3
 800d312:	f7ff fe31 	bl	800cf78 <LmHandlerRequestClass>
 800d316:	e002      	b.n	800d31e <MlmeConfirm+0xa2>
            }
            else
            {
                // Join was not successful. Try to join again
                JoinParams.Status = LORAMAC_HANDLER_ERROR;
 800d318:	4b1b      	ldr	r3, [pc, #108]	@ (800d388 <MlmeConfirm+0x10c>)
 800d31a:	22ff      	movs	r2, #255	@ 0xff
 800d31c:	715a      	strb	r2, [r3, #5]
            }
            // Notify upper layer
            LmHandlerCallbacks->OnJoinRequest( &JoinParams );
 800d31e:	4b17      	ldr	r3, [pc, #92]	@ (800d37c <MlmeConfirm+0x100>)
 800d320:	681b      	ldr	r3, [r3, #0]
 800d322:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d324:	4818      	ldr	r0, [pc, #96]	@ (800d388 <MlmeConfirm+0x10c>)
 800d326:	4798      	blx	r3
            if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	785b      	ldrb	r3, [r3, #1]
 800d32c:	2b00      	cmp	r3, #0
 800d32e:	d11d      	bne.n	800d36c <MlmeConfirm+0xf0>
            {
                SecureElementPrintSessionKeys();
 800d330:	f7ff f894 	bl	800c45c <SecureElementPrintSessionKeys>
            }
        }
        break;
 800d334:	e01a      	b.n	800d36c <MlmeConfirm+0xf0>
    case MLME_LINK_CHECK:
        {
            RxParams.LinkCheck = true;
 800d336:	4b16      	ldr	r3, [pc, #88]	@ (800d390 <MlmeConfirm+0x114>)
 800d338:	2201      	movs	r2, #1
 800d33a:	745a      	strb	r2, [r3, #17]
            RxParams.DemodMargin = mlmeConfirm->DemodMargin;
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	7a1a      	ldrb	r2, [r3, #8]
 800d340:	4b13      	ldr	r3, [pc, #76]	@ (800d390 <MlmeConfirm+0x114>)
 800d342:	749a      	strb	r2, [r3, #18]
            RxParams.NbGateways = mlmeConfirm->NbGateways;
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	7a5a      	ldrb	r2, [r3, #9]
 800d348:	4b11      	ldr	r3, [pc, #68]	@ (800d390 <MlmeConfirm+0x114>)
 800d34a:	74da      	strb	r2, [r3, #19]
        }
        break;
 800d34c:	e00f      	b.n	800d36e <MlmeConfirm+0xf2>
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
        }
        break;
    case MLME_BEACON_ACQUISITION:
        {
            if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	785b      	ldrb	r3, [r3, #1]
 800d352:	2b00      	cmp	r3, #0
 800d354:	d105      	bne.n	800d362 <MlmeConfirm+0xe6>
            {
                // Beacon has been acquired
                // Request server for ping slot
                LmHandlerPingSlotReq( LmHandlerParams.PingSlotPeriodicity );
 800d356:	4b0d      	ldr	r3, [pc, #52]	@ (800d38c <MlmeConfirm+0x110>)
 800d358:	7b1b      	ldrb	r3, [r3, #12]
 800d35a:	4618      	mov	r0, r3
 800d35c:	f7ff fe00 	bl	800cf60 <LmHandlerPingSlotReq>
                // Beacon not acquired
                // Request Device Time again.
                LmHandlerDeviceTimeReq( );
            }
        }
        break;
 800d360:	e005      	b.n	800d36e <MlmeConfirm+0xf2>
                LmHandlerDeviceTimeReq( );
 800d362:	f7ff fde1 	bl	800cf28 <LmHandlerDeviceTimeReq>
        break;
 800d366:	e002      	b.n	800d36e <MlmeConfirm+0xf2>
            }
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
        }
        break;
    default:
        break;
 800d368:	bf00      	nop
 800d36a:	e000      	b.n	800d36e <MlmeConfirm+0xf2>
        break;
 800d36c:	bf00      	nop
    }
}
 800d36e:	bf00      	nop
 800d370:	3730      	adds	r7, #48	@ 0x30
 800d372:	46bd      	mov	sp, r7
 800d374:	bd80      	pop	{r7, pc}
 800d376:	bf00      	nop
 800d378:	200000b0 	.word	0x200000b0
 800d37c:	20000754 	.word	0x20000754
 800d380:	20000090 	.word	0x20000090
 800d384:	200000ac 	.word	0x200000ac
 800d388:	200000a8 	.word	0x200000a8
 800d38c:	20000740 	.word	0x20000740
 800d390:	200000cc 	.word	0x200000cc

0800d394 <MlmeIndication>:

static void MlmeIndication( MlmeIndication_t *mlmeIndication, LoRaMacRxStatus_t *rxStatus )
{
 800d394:	b580      	push	{r7, lr}
 800d396:	b082      	sub	sp, #8
 800d398:	af00      	add	r7, sp, #0
 800d39a:	6078      	str	r0, [r7, #4]
 800d39c:	6039      	str	r1, [r7, #0]
    RxParams.IsMcpsIndication = 0;
 800d39e:	4b24      	ldr	r3, [pc, #144]	@ (800d430 <MlmeIndication+0x9c>)
 800d3a0:	2200      	movs	r2, #0
 800d3a2:	701a      	strb	r2, [r3, #0]
    RxParams.Status = mlmeIndication->Status;
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	785a      	ldrb	r2, [r3, #1]
 800d3a8:	4b21      	ldr	r3, [pc, #132]	@ (800d430 <MlmeIndication+0x9c>)
 800d3aa:	705a      	strb	r2, [r3, #1]
    RxParams.Datarate = mlmeIndication->RxDatarate;
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	789b      	ldrb	r3, [r3, #2]
 800d3b0:	b25a      	sxtb	r2, r3
 800d3b2:	4b1f      	ldr	r3, [pc, #124]	@ (800d430 <MlmeIndication+0x9c>)
 800d3b4:	721a      	strb	r2, [r3, #8]
    RxParams.Rssi = rxStatus->Rssi;
 800d3b6:	683b      	ldr	r3, [r7, #0]
 800d3b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d3bc:	b25a      	sxtb	r2, r3
 800d3be:	4b1c      	ldr	r3, [pc, #112]	@ (800d430 <MlmeIndication+0x9c>)
 800d3c0:	725a      	strb	r2, [r3, #9]
    RxParams.Snr = rxStatus->Snr;
 800d3c2:	683b      	ldr	r3, [r7, #0]
 800d3c4:	f993 2002 	ldrsb.w	r2, [r3, #2]
 800d3c8:	4b19      	ldr	r3, [pc, #100]	@ (800d430 <MlmeIndication+0x9c>)
 800d3ca:	729a      	strb	r2, [r3, #10]
    RxParams.RxSlot = rxStatus->RxSlot;
 800d3cc:	683b      	ldr	r3, [r7, #0]
 800d3ce:	78da      	ldrb	r2, [r3, #3]
 800d3d0:	4b17      	ldr	r3, [pc, #92]	@ (800d430 <MlmeIndication+0x9c>)
 800d3d2:	741a      	strb	r2, [r3, #16]
    RxParams.DownlinkCounter = mlmeIndication->DownLinkCounter;
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	685b      	ldr	r3, [r3, #4]
 800d3d8:	4a15      	ldr	r2, [pc, #84]	@ (800d430 <MlmeIndication+0x9c>)
 800d3da:	60d3      	str	r3, [r2, #12]
    if ((mlmeIndication->MlmeIndication != MLME_BEACON) && (mlmeIndication->MlmeIndication != MLME_BEACON_LOST))
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	781b      	ldrb	r3, [r3, #0]
 800d3e0:	2b0a      	cmp	r3, #10
 800d3e2:	d009      	beq.n	800d3f8 <MlmeIndication+0x64>
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	781b      	ldrb	r3, [r3, #0]
 800d3e8:	2b0e      	cmp	r3, #14
 800d3ea:	d005      	beq.n	800d3f8 <MlmeIndication+0x64>
    {
        LmHandlerCallbacks->OnRxData( NULL, &RxParams );
 800d3ec:	4b11      	ldr	r3, [pc, #68]	@ (800d434 <MlmeIndication+0xa0>)
 800d3ee:	681b      	ldr	r3, [r3, #0]
 800d3f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d3f2:	490f      	ldr	r1, [pc, #60]	@ (800d430 <MlmeIndication+0x9c>)
 800d3f4:	2000      	movs	r0, #0
 800d3f6:	4798      	blx	r3
    }

    // Call packages RxProcess function
    LmHandlerPackagesNotify( PACKAGE_MLME_INDICATION, mlmeIndication );
 800d3f8:	6879      	ldr	r1, [r7, #4]
 800d3fa:	2003      	movs	r0, #3
 800d3fc:	f000 f896 	bl	800d52c <LmHandlerPackagesNotify>

    switch( mlmeIndication->MlmeIndication )
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	781b      	ldrb	r3, [r3, #0]
 800d404:	2b0e      	cmp	r3, #14
 800d406:	d00a      	beq.n	800d41e <MlmeIndication+0x8a>
 800d408:	2b0e      	cmp	r3, #14
 800d40a:	dc0a      	bgt.n	800d422 <MlmeIndication+0x8e>
 800d40c:	2b06      	cmp	r3, #6
 800d40e:	d002      	beq.n	800d416 <MlmeIndication+0x82>
 800d410:	2b0a      	cmp	r3, #10
 800d412:	d008      	beq.n	800d426 <MlmeIndication+0x92>
            }
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
        }
        break;
    default:
        break;
 800d414:	e005      	b.n	800d422 <MlmeIndication+0x8e>
            IsUplinkTxPending = true;
 800d416:	4b08      	ldr	r3, [pc, #32]	@ (800d438 <MlmeIndication+0xa4>)
 800d418:	2201      	movs	r2, #1
 800d41a:	701a      	strb	r2, [r3, #0]
        break;
 800d41c:	e004      	b.n	800d428 <MlmeIndication+0x94>
        break;
 800d41e:	bf00      	nop
 800d420:	e002      	b.n	800d428 <MlmeIndication+0x94>
        break;
 800d422:	bf00      	nop
 800d424:	e000      	b.n	800d428 <MlmeIndication+0x94>
        break;
 800d426:	bf00      	nop
    }
}
 800d428:	bf00      	nop
 800d42a:	3708      	adds	r7, #8
 800d42c:	46bd      	mov	sp, r7
 800d42e:	bd80      	pop	{r7, pc}
 800d430:	200000cc 	.word	0x200000cc
 800d434:	20000754 	.word	0x20000754
 800d438:	20000780 	.word	0x20000780

0800d43c <LmHandlerPackageRegister>:
 * PACKAGES HANDLING
 *=============================================================================
 */

LmHandlerErrorStatus_t LmHandlerPackageRegister( uint8_t id, void *params )
{
 800d43c:	b580      	push	{r7, lr}
 800d43e:	b084      	sub	sp, #16
 800d440:	af00      	add	r7, sp, #0
 800d442:	4603      	mov	r3, r0
 800d444:	6039      	str	r1, [r7, #0]
 800d446:	71fb      	strb	r3, [r7, #7]
    LmhPackage_t *package = NULL;
 800d448:	2300      	movs	r3, #0
 800d44a:	60fb      	str	r3, [r7, #12]
    switch( id )
 800d44c:	79fb      	ldrb	r3, [r7, #7]
 800d44e:	2b00      	cmp	r3, #0
 800d450:	d103      	bne.n	800d45a <LmHandlerPackageRegister+0x1e>
    {
        case PACKAGE_ID_COMPLIANCE:
        {
            package = LmhpCompliancePackageFactory( );
 800d452:	f000 fa1d 	bl	800d890 <LmhpCompliancePackageFactory>
 800d456:	60f8      	str	r0, [r7, #12]
            break;
 800d458:	e000      	b.n	800d45c <LmHandlerPackageRegister+0x20>
        {
#if (!defined (LORAWAN_DATA_DISTRIB_MGT) || (LORAWAN_DATA_DISTRIB_MGT == 0))
#else /*LORAWAN_DATA_DISTRIB_MGT == 1*/
            LmhpPackagesRegister( id, &package );
#endif /*LORAWAN_DATA_DISTRIB_MGT*/
            break;
 800d45a:	bf00      	nop
        }
    }
    if( package != NULL )
 800d45c:	68fb      	ldr	r3, [r7, #12]
 800d45e:	2b00      	cmp	r3, #0
 800d460:	d035      	beq.n	800d4ce <LmHandlerPackageRegister+0x92>
    {
        LmHandlerPackages[id] = package;
 800d462:	79fb      	ldrb	r3, [r7, #7]
 800d464:	491d      	ldr	r1, [pc, #116]	@ (800d4dc <LmHandlerPackageRegister+0xa0>)
 800d466:	68fa      	ldr	r2, [r7, #12]
 800d468:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        LmHandlerPackages[id]->OnJoinRequest = LmHandlerJoin;
 800d46c:	79fb      	ldrb	r3, [r7, #7]
 800d46e:	4a1b      	ldr	r2, [pc, #108]	@ (800d4dc <LmHandlerPackageRegister+0xa0>)
 800d470:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d474:	4a1a      	ldr	r2, [pc, #104]	@ (800d4e0 <LmHandlerPackageRegister+0xa4>)
 800d476:	629a      	str	r2, [r3, #40]	@ 0x28
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        LmHandlerPackages[id]->OnSendRequest = LmHandlerSend;
#elif (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
        LmHandlerPackages[id]->OnSysTimeUpdate = LmHandlerCallbacks->OnSysTimeUpdate;
 800d478:	4b1a      	ldr	r3, [pc, #104]	@ (800d4e4 <LmHandlerPackageRegister+0xa8>)
 800d47a:	681a      	ldr	r2, [r3, #0]
 800d47c:	79fb      	ldrb	r3, [r7, #7]
 800d47e:	4917      	ldr	r1, [pc, #92]	@ (800d4dc <LmHandlerPackageRegister+0xa0>)
 800d480:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800d484:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800d486:	631a      	str	r2, [r3, #48]	@ 0x30
        LmHandlerPackages[id]->OnSystemReset = LmHandlerCallbacks->OnSystemReset;
 800d488:	4b16      	ldr	r3, [pc, #88]	@ (800d4e4 <LmHandlerPackageRegister+0xa8>)
 800d48a:	681a      	ldr	r2, [r3, #0]
 800d48c:	79fb      	ldrb	r3, [r7, #7]
 800d48e:	4913      	ldr	r1, [pc, #76]	@ (800d4dc <LmHandlerPackageRegister+0xa0>)
 800d490:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800d494:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800d496:	635a      	str	r2, [r3, #52]	@ 0x34
#endif /* LORAMAC_VERSION */
        LmHandlerPackages[id]->OnDeviceTimeRequest = LmHandlerDeviceTimeReq;
 800d498:	79fb      	ldrb	r3, [r7, #7]
 800d49a:	4a10      	ldr	r2, [pc, #64]	@ (800d4dc <LmHandlerPackageRegister+0xa0>)
 800d49c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d4a0:	4a11      	ldr	r2, [pc, #68]	@ (800d4e8 <LmHandlerPackageRegister+0xac>)
 800d4a2:	62da      	str	r2, [r3, #44]	@ 0x2c
        LmHandlerPackages[id]->OnPackageProcessEvent = LmHandlerCallbacks->OnMacProcess;
 800d4a4:	4b0f      	ldr	r3, [pc, #60]	@ (800d4e4 <LmHandlerPackageRegister+0xa8>)
 800d4a6:	681a      	ldr	r2, [r3, #0]
 800d4a8:	79fb      	ldrb	r3, [r7, #7]
 800d4aa:	490c      	ldr	r1, [pc, #48]	@ (800d4dc <LmHandlerPackageRegister+0xa0>)
 800d4ac:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800d4b0:	6992      	ldr	r2, [r2, #24]
 800d4b2:	615a      	str	r2, [r3, #20]
        LmHandlerPackages[id]->Init( params, AppData.Buffer, AppData.BufferSize );
 800d4b4:	79fb      	ldrb	r3, [r7, #7]
 800d4b6:	4a09      	ldr	r2, [pc, #36]	@ (800d4dc <LmHandlerPackageRegister+0xa0>)
 800d4b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d4bc:	685b      	ldr	r3, [r3, #4]
 800d4be:	4a0b      	ldr	r2, [pc, #44]	@ (800d4ec <LmHandlerPackageRegister+0xb0>)
 800d4c0:	6851      	ldr	r1, [r2, #4]
 800d4c2:	4a0a      	ldr	r2, [pc, #40]	@ (800d4ec <LmHandlerPackageRegister+0xb0>)
 800d4c4:	7852      	ldrb	r2, [r2, #1]
 800d4c6:	6838      	ldr	r0, [r7, #0]
 800d4c8:	4798      	blx	r3

        return LORAMAC_HANDLER_SUCCESS;
 800d4ca:	2300      	movs	r3, #0
 800d4cc:	e001      	b.n	800d4d2 <LmHandlerPackageRegister+0x96>
    }
    else
    {
        return LORAMAC_HANDLER_ERROR;
 800d4ce:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 800d4d2:	4618      	mov	r0, r3
 800d4d4:	3710      	adds	r7, #16
 800d4d6:	46bd      	mov	sp, r7
 800d4d8:	bd80      	pop	{r7, pc}
 800d4da:	bf00      	nop
 800d4dc:	2000072c 	.word	0x2000072c
 800d4e0:	0800cc61 	.word	0x0800cc61
 800d4e4:	20000754 	.word	0x20000754
 800d4e8:	0800cf29 	.word	0x0800cf29
 800d4ec:	200000e0 	.word	0x200000e0

0800d4f0 <LmHandlerPackageIsInitialized>:

static bool LmHandlerPackageIsInitialized( uint8_t id )
{
 800d4f0:	b580      	push	{r7, lr}
 800d4f2:	b082      	sub	sp, #8
 800d4f4:	af00      	add	r7, sp, #0
 800d4f6:	4603      	mov	r3, r0
 800d4f8:	71fb      	strb	r3, [r7, #7]
    if( ( id < PKG_MAX_NUMBER ) && ( LmHandlerPackages[id]->IsInitialized != NULL ) )
 800d4fa:	79fb      	ldrb	r3, [r7, #7]
 800d4fc:	2b04      	cmp	r3, #4
 800d4fe:	d80e      	bhi.n	800d51e <LmHandlerPackageIsInitialized+0x2e>
 800d500:	79fb      	ldrb	r3, [r7, #7]
 800d502:	4a09      	ldr	r2, [pc, #36]	@ (800d528 <LmHandlerPackageIsInitialized+0x38>)
 800d504:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d508:	689b      	ldr	r3, [r3, #8]
 800d50a:	2b00      	cmp	r3, #0
 800d50c:	d007      	beq.n	800d51e <LmHandlerPackageIsInitialized+0x2e>
    {
        return LmHandlerPackages[id]->IsInitialized( );
 800d50e:	79fb      	ldrb	r3, [r7, #7]
 800d510:	4a05      	ldr	r2, [pc, #20]	@ (800d528 <LmHandlerPackageIsInitialized+0x38>)
 800d512:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d516:	689b      	ldr	r3, [r3, #8]
 800d518:	4798      	blx	r3
 800d51a:	4603      	mov	r3, r0
 800d51c:	e000      	b.n	800d520 <LmHandlerPackageIsInitialized+0x30>
    }
    else
    {
        return false;
 800d51e:	2300      	movs	r3, #0
    }
}
 800d520:	4618      	mov	r0, r3
 800d522:	3708      	adds	r7, #8
 800d524:	46bd      	mov	sp, r7
 800d526:	bd80      	pop	{r7, pc}
 800d528:	2000072c 	.word	0x2000072c

0800d52c <LmHandlerPackagesNotify>:

static void LmHandlerPackagesNotify( PackageNotifyTypes_t notifyType, void *params )
{
 800d52c:	b580      	push	{r7, lr}
 800d52e:	b084      	sub	sp, #16
 800d530:	af00      	add	r7, sp, #0
 800d532:	4603      	mov	r3, r0
 800d534:	6039      	str	r1, [r7, #0]
 800d536:	71fb      	strb	r3, [r7, #7]
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800d538:	2300      	movs	r3, #0
 800d53a:	73fb      	strb	r3, [r7, #15]
 800d53c:	e067      	b.n	800d60e <LmHandlerPackagesNotify+0xe2>
    {
        if( LmHandlerPackages[i] != NULL )
 800d53e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d542:	4a37      	ldr	r2, [pc, #220]	@ (800d620 <LmHandlerPackagesNotify+0xf4>)
 800d544:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d548:	2b00      	cmp	r3, #0
 800d54a:	d05a      	beq.n	800d602 <LmHandlerPackagesNotify+0xd6>
        {
            switch( notifyType )
 800d54c:	79fb      	ldrb	r3, [r7, #7]
 800d54e:	2b03      	cmp	r3, #3
 800d550:	d84e      	bhi.n	800d5f0 <LmHandlerPackagesNotify+0xc4>
 800d552:	a201      	add	r2, pc, #4	@ (adr r2, 800d558 <LmHandlerPackagesNotify+0x2c>)
 800d554:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d558:	0800d569 	.word	0x0800d569
 800d55c:	0800d58b 	.word	0x0800d58b
 800d560:	0800d5ad 	.word	0x0800d5ad
 800d564:	0800d5cf 	.word	0x0800d5cf
            {
                case PACKAGE_MCPS_CONFIRM:
                {
                    if( LmHandlerPackages[i]->OnMcpsConfirmProcess != NULL )
 800d568:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d56c:	4a2c      	ldr	r2, [pc, #176]	@ (800d620 <LmHandlerPackagesNotify+0xf4>)
 800d56e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d572:	699b      	ldr	r3, [r3, #24]
 800d574:	2b00      	cmp	r3, #0
 800d576:	d03d      	beq.n	800d5f4 <LmHandlerPackagesNotify+0xc8>
                    {
                        LmHandlerPackages[i]->OnMcpsConfirmProcess( ( McpsConfirm_t* ) params );
 800d578:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d57c:	4a28      	ldr	r2, [pc, #160]	@ (800d620 <LmHandlerPackagesNotify+0xf4>)
 800d57e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d582:	699b      	ldr	r3, [r3, #24]
 800d584:	6838      	ldr	r0, [r7, #0]
 800d586:	4798      	blx	r3
                    }
                    break;
 800d588:	e034      	b.n	800d5f4 <LmHandlerPackagesNotify+0xc8>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
                    if( ( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL ) &&
                        ( ( LmHandlerPackages[i]->Port == ((McpsIndication_t* )params)->Port ) ||
                          ( ( i == PACKAGE_ID_COMPLIANCE ) && ( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning() ))))
#elif (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
                    if( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL )
 800d58a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d58e:	4a24      	ldr	r2, [pc, #144]	@ (800d620 <LmHandlerPackagesNotify+0xf4>)
 800d590:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d594:	69db      	ldr	r3, [r3, #28]
 800d596:	2b00      	cmp	r3, #0
 800d598:	d02e      	beq.n	800d5f8 <LmHandlerPackagesNotify+0xcc>
#endif /* LORAMAC_VERSION */
                    {
                        LmHandlerPackages[i]->OnMcpsIndicationProcess( ( McpsIndication_t* )params );
 800d59a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d59e:	4a20      	ldr	r2, [pc, #128]	@ (800d620 <LmHandlerPackagesNotify+0xf4>)
 800d5a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d5a4:	69db      	ldr	r3, [r3, #28]
 800d5a6:	6838      	ldr	r0, [r7, #0]
 800d5a8:	4798      	blx	r3
                    }
                    break;
 800d5aa:	e025      	b.n	800d5f8 <LmHandlerPackagesNotify+0xcc>
                }
                case PACKAGE_MLME_CONFIRM:
                {
                    if( LmHandlerPackages[i]->OnMlmeConfirmProcess != NULL )
 800d5ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d5b0:	4a1b      	ldr	r2, [pc, #108]	@ (800d620 <LmHandlerPackagesNotify+0xf4>)
 800d5b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d5b6:	6a1b      	ldr	r3, [r3, #32]
 800d5b8:	2b00      	cmp	r3, #0
 800d5ba:	d01f      	beq.n	800d5fc <LmHandlerPackagesNotify+0xd0>
                    {
                        LmHandlerPackages[i]->OnMlmeConfirmProcess( ( MlmeConfirm_t* )params );
 800d5bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d5c0:	4a17      	ldr	r2, [pc, #92]	@ (800d620 <LmHandlerPackagesNotify+0xf4>)
 800d5c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d5c6:	6a1b      	ldr	r3, [r3, #32]
 800d5c8:	6838      	ldr	r0, [r7, #0]
 800d5ca:	4798      	blx	r3
                    }
                    break;
 800d5cc:	e016      	b.n	800d5fc <LmHandlerPackagesNotify+0xd0>
                }
                case PACKAGE_MLME_INDICATION:
                {
                    if( LmHandlerPackages[i]->OnMlmeIndicationProcess != NULL )
 800d5ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d5d2:	4a13      	ldr	r2, [pc, #76]	@ (800d620 <LmHandlerPackagesNotify+0xf4>)
 800d5d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d5d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d5da:	2b00      	cmp	r3, #0
 800d5dc:	d010      	beq.n	800d600 <LmHandlerPackagesNotify+0xd4>
                    {
                        LmHandlerPackages[i]->OnMlmeIndicationProcess( params );
 800d5de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d5e2:	4a0f      	ldr	r2, [pc, #60]	@ (800d620 <LmHandlerPackagesNotify+0xf4>)
 800d5e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d5e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d5ea:	6838      	ldr	r0, [r7, #0]
 800d5ec:	4798      	blx	r3
                    }
                    break;
 800d5ee:	e007      	b.n	800d600 <LmHandlerPackagesNotify+0xd4>
                }
                default:
                {
                    break;
 800d5f0:	bf00      	nop
 800d5f2:	e006      	b.n	800d602 <LmHandlerPackagesNotify+0xd6>
                    break;
 800d5f4:	bf00      	nop
 800d5f6:	e004      	b.n	800d602 <LmHandlerPackagesNotify+0xd6>
                    break;
 800d5f8:	bf00      	nop
 800d5fa:	e002      	b.n	800d602 <LmHandlerPackagesNotify+0xd6>
                    break;
 800d5fc:	bf00      	nop
 800d5fe:	e000      	b.n	800d602 <LmHandlerPackagesNotify+0xd6>
                    break;
 800d600:	bf00      	nop
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800d602:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d606:	b2db      	uxtb	r3, r3
 800d608:	3301      	adds	r3, #1
 800d60a:	b2db      	uxtb	r3, r3
 800d60c:	73fb      	strb	r3, [r7, #15]
 800d60e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d612:	2b04      	cmp	r3, #4
 800d614:	dd93      	ble.n	800d53e <LmHandlerPackagesNotify+0x12>
                }
            }
        }
    }
}
 800d616:	bf00      	nop
 800d618:	bf00      	nop
 800d61a:	3710      	adds	r7, #16
 800d61c:	46bd      	mov	sp, r7
 800d61e:	bd80      	pop	{r7, pc}
 800d620:	2000072c 	.word	0x2000072c

0800d624 <LmHandlerPackageIsTxPending>:

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
static bool LmHandlerPackageIsTxPending( void )
{
 800d624:	b580      	push	{r7, lr}
 800d626:	b082      	sub	sp, #8
 800d628:	af00      	add	r7, sp, #0
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800d62a:	2300      	movs	r3, #0
 800d62c:	71fb      	strb	r3, [r7, #7]
 800d62e:	e018      	b.n	800d662 <LmHandlerPackageIsTxPending+0x3e>
    {
        if( LmHandlerPackages[i] != NULL )
 800d630:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d634:	4a0f      	ldr	r2, [pc, #60]	@ (800d674 <LmHandlerPackageIsTxPending+0x50>)
 800d636:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d63a:	2b00      	cmp	r3, #0
 800d63c:	d00b      	beq.n	800d656 <LmHandlerPackageIsTxPending+0x32>
        {
            if( LmHandlerPackages[i]->IsTxPending( ) == true )
 800d63e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d642:	4a0c      	ldr	r2, [pc, #48]	@ (800d674 <LmHandlerPackageIsTxPending+0x50>)
 800d644:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d648:	68db      	ldr	r3, [r3, #12]
 800d64a:	4798      	blx	r3
 800d64c:	4603      	mov	r3, r0
 800d64e:	2b00      	cmp	r3, #0
 800d650:	d001      	beq.n	800d656 <LmHandlerPackageIsTxPending+0x32>
            {
                return true;
 800d652:	2301      	movs	r3, #1
 800d654:	e00a      	b.n	800d66c <LmHandlerPackageIsTxPending+0x48>
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800d656:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d65a:	b2db      	uxtb	r3, r3
 800d65c:	3301      	adds	r3, #1
 800d65e:	b2db      	uxtb	r3, r3
 800d660:	71fb      	strb	r3, [r7, #7]
 800d662:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d666:	2b04      	cmp	r3, #4
 800d668:	dde2      	ble.n	800d630 <LmHandlerPackageIsTxPending+0xc>
            }
        }
    }
    return false;
 800d66a:	2300      	movs	r3, #0
}
 800d66c:	4618      	mov	r0, r3
 800d66e:	3708      	adds	r7, #8
 800d670:	46bd      	mov	sp, r7
 800d672:	bd80      	pop	{r7, pc}
 800d674:	2000072c 	.word	0x2000072c

0800d678 <LmHandlerPackagesProcess>:
#endif /* LORAMAC_VERSION */

static void LmHandlerPackagesProcess( void )
{
 800d678:	b580      	push	{r7, lr}
 800d67a:	b082      	sub	sp, #8
 800d67c:	af00      	add	r7, sp, #0
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800d67e:	2300      	movs	r3, #0
 800d680:	71fb      	strb	r3, [r7, #7]
 800d682:	e022      	b.n	800d6ca <LmHandlerPackagesProcess+0x52>
    {
        if( ( LmHandlerPackages[i] != NULL ) &&
 800d684:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d688:	4a14      	ldr	r2, [pc, #80]	@ (800d6dc <LmHandlerPackagesProcess+0x64>)
 800d68a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d68e:	2b00      	cmp	r3, #0
 800d690:	d015      	beq.n	800d6be <LmHandlerPackagesProcess+0x46>
            ( LmHandlerPackages[i]->Process != NULL ) &&
 800d692:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d696:	4a11      	ldr	r2, [pc, #68]	@ (800d6dc <LmHandlerPackagesProcess+0x64>)
 800d698:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d69c:	691b      	ldr	r3, [r3, #16]
        if( ( LmHandlerPackages[i] != NULL ) &&
 800d69e:	2b00      	cmp	r3, #0
 800d6a0:	d00d      	beq.n	800d6be <LmHandlerPackagesProcess+0x46>
            ( LmHandlerPackageIsInitialized( i ) != false ) )
 800d6a2:	79fb      	ldrb	r3, [r7, #7]
 800d6a4:	4618      	mov	r0, r3
 800d6a6:	f7ff ff23 	bl	800d4f0 <LmHandlerPackageIsInitialized>
 800d6aa:	4603      	mov	r3, r0
            ( LmHandlerPackages[i]->Process != NULL ) &&
 800d6ac:	2b00      	cmp	r3, #0
 800d6ae:	d006      	beq.n	800d6be <LmHandlerPackagesProcess+0x46>
        {
            LmHandlerPackages[i]->Process( );
 800d6b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d6b4:	4a09      	ldr	r2, [pc, #36]	@ (800d6dc <LmHandlerPackagesProcess+0x64>)
 800d6b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d6ba:	691b      	ldr	r3, [r3, #16]
 800d6bc:	4798      	blx	r3
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800d6be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d6c2:	b2db      	uxtb	r3, r3
 800d6c4:	3301      	adds	r3, #1
 800d6c6:	b2db      	uxtb	r3, r3
 800d6c8:	71fb      	strb	r3, [r7, #7]
 800d6ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d6ce:	2b04      	cmp	r3, #4
 800d6d0:	ddd8      	ble.n	800d684 <LmHandlerPackagesProcess+0xc>
        }
    }
}
 800d6d2:	bf00      	nop
 800d6d4:	bf00      	nop
 800d6d6:	3708      	adds	r7, #8
 800d6d8:	46bd      	mov	sp, r7
 800d6da:	bd80      	pop	{r7, pc}
 800d6dc:	2000072c 	.word	0x2000072c

0800d6e0 <LmHandlerGetVersion>:
 * ST ADDITIONAL FUNCTIONS
 *=============================================================================
 */

LmHandlerErrorStatus_t LmHandlerGetVersion(LmHandlerVersionType_t lmhType, uint32_t *featureVersion)
{
 800d6e0:	b480      	push	{r7}
 800d6e2:	b083      	sub	sp, #12
 800d6e4:	af00      	add	r7, sp, #0
 800d6e6:	4603      	mov	r3, r0
 800d6e8:	6039      	str	r1, [r7, #0]
 800d6ea:	71fb      	strb	r3, [r7, #7]
    if (featureVersion == NULL)
 800d6ec:	683b      	ldr	r3, [r7, #0]
 800d6ee:	2b00      	cmp	r3, #0
 800d6f0:	d102      	bne.n	800d6f8 <LmHandlerGetVersion+0x18>
    {
        return LORAMAC_HANDLER_ERROR;
 800d6f2:	f04f 33ff 	mov.w	r3, #4294967295
 800d6f6:	e00e      	b.n	800d716 <LmHandlerGetVersion+0x36>
    }

    switch(lmhType)
 800d6f8:	79fb      	ldrb	r3, [r7, #7]
 800d6fa:	2b00      	cmp	r3, #0
 800d6fc:	d002      	beq.n	800d704 <LmHandlerGetVersion+0x24>
 800d6fe:	2b01      	cmp	r3, #1
 800d700:	d004      	beq.n	800d70c <LmHandlerGetVersion+0x2c>
            break;
        case LORAMAC_HANDLER_REGION_VERSION:
            *featureVersion = REGION_VERSION;
            break;
        default:
          break;
 800d702:	e007      	b.n	800d714 <LmHandlerGetVersion+0x34>
            *featureVersion = LORAMAC_VERSION;
 800d704:	683b      	ldr	r3, [r7, #0]
 800d706:	4a06      	ldr	r2, [pc, #24]	@ (800d720 <LmHandlerGetVersion+0x40>)
 800d708:	601a      	str	r2, [r3, #0]
            break;
 800d70a:	e003      	b.n	800d714 <LmHandlerGetVersion+0x34>
            *featureVersion = REGION_VERSION;
 800d70c:	683b      	ldr	r3, [r7, #0]
 800d70e:	4a05      	ldr	r2, [pc, #20]	@ (800d724 <LmHandlerGetVersion+0x44>)
 800d710:	601a      	str	r2, [r3, #0]
            break;
 800d712:	bf00      	nop
    }

    return LORAMAC_HANDLER_SUCCESS;
 800d714:	2300      	movs	r3, #0
}
 800d716:	4618      	mov	r0, r3
 800d718:	370c      	adds	r7, #12
 800d71a:	46bd      	mov	sp, r7
 800d71c:	bc80      	pop	{r7}
 800d71e:	4770      	bx	lr
 800d720:	01000400 	.word	0x01000400
 800d724:	02010001 	.word	0x02010001

0800d728 <LmHandlerStop>:

LmHandlerErrorStatus_t LmHandlerStop(void)
{
 800d728:	b580      	push	{r7, lr}
 800d72a:	af00      	add	r7, sp, #0
    if (LoRaMacDeInitialization() == LORAMAC_STATUS_OK)
 800d72c:	f005 fb76 	bl	8012e1c <LoRaMacDeInitialization>
 800d730:	4603      	mov	r3, r0
 800d732:	2b00      	cmp	r3, #0
 800d734:	d101      	bne.n	800d73a <LmHandlerStop+0x12>
    {
        return LORAMAC_HANDLER_SUCCESS;
 800d736:	2300      	movs	r3, #0
 800d738:	e001      	b.n	800d73e <LmHandlerStop+0x16>
    }
    else
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800d73a:	f06f 0301 	mvn.w	r3, #1
    }
}
 800d73e:	4618      	mov	r0, r3
 800d740:	bd80      	pop	{r7, pc}

0800d742 <LmHandlerHalt>:

LmHandlerErrorStatus_t LmHandlerHalt(void)
{
 800d742:	b580      	push	{r7, lr}
 800d744:	af00      	add	r7, sp, #0
    if (LoRaMacHalt() == LORAMAC_STATUS_OK)
 800d746:	f004 faaf 	bl	8011ca8 <LoRaMacHalt>
 800d74a:	4603      	mov	r3, r0
 800d74c:	2b00      	cmp	r3, #0
 800d74e:	d101      	bne.n	800d754 <LmHandlerHalt+0x12>
    {
        return LORAMAC_HANDLER_SUCCESS;
 800d750:	2300      	movs	r3, #0
 800d752:	e001      	b.n	800d758 <LmHandlerHalt+0x16>
    }
    else
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800d754:	f06f 0301 	mvn.w	r3, #1
    }
}
 800d758:	4618      	mov	r0, r3
 800d75a:	bd80      	pop	{r7, pc}

0800d75c <LmHandlerNvmDataStore>:
        return LORAMAC_HANDLER_ERROR;
    }
}

LmHandlerErrorStatus_t LmHandlerNvmDataStore( void )
{
 800d75c:	b580      	push	{r7, lr}
 800d75e:	b08e      	sub	sp, #56	@ 0x38
 800d760:	af00      	add	r7, sp, #0
    LoRaMacNvmData_t *nvm;
    uint32_t nvm_size;
    LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_SUCCESS;
 800d762:	2300      	movs	r3, #0
 800d764:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    int32_t status = NVM_DATA_OK;
 800d768:	2300      	movs	r3, #0
 800d76a:	633b      	str	r3, [r7, #48]	@ 0x30

    lmhStatus = LmHandlerHalt();
 800d76c:	f7ff ffe9 	bl	800d742 <LmHandlerHalt>
 800d770:	4603      	mov	r3, r0
 800d772:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

    if (lmhStatus == LORAMAC_HANDLER_SUCCESS)
 800d776:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 800d77a:	2b00      	cmp	r3, #0
 800d77c:	d12f      	bne.n	800d7de <LmHandlerNvmDataStore+0x82>
    {
        status = NvmDataMgmtStoreBegin();
 800d77e:	f000 f859 	bl	800d834 <NvmDataMgmtStoreBegin>
 800d782:	6338      	str	r0, [r7, #48]	@ 0x30

        if (status == NVM_DATA_NO_UPDATED_DATA)
 800d784:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d786:	f113 0f02 	cmn.w	r3, #2
 800d78a:	d103      	bne.n	800d794 <LmHandlerNvmDataStore+0x38>
        {
            lmhStatus = LORAMAC_HANDLER_NVM_DATA_UP_TO_DATE;
 800d78c:	23f8      	movs	r3, #248	@ 0xf8
 800d78e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800d792:	e01c      	b.n	800d7ce <LmHandlerNvmDataStore+0x72>
        }
        else if (( status != NVM_DATA_OK ) || (LmHandlerCallbacks->OnStoreContextRequest == NULL))
 800d794:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d796:	2b00      	cmp	r3, #0
 800d798:	d104      	bne.n	800d7a4 <LmHandlerNvmDataStore+0x48>
 800d79a:	4b1b      	ldr	r3, [pc, #108]	@ (800d808 <LmHandlerNvmDataStore+0xac>)
 800d79c:	681b      	ldr	r3, [r3, #0]
 800d79e:	695b      	ldr	r3, [r3, #20]
 800d7a0:	2b00      	cmp	r3, #0
 800d7a2:	d103      	bne.n	800d7ac <LmHandlerNvmDataStore+0x50>
        {
            lmhStatus = LORAMAC_HANDLER_ERROR;
 800d7a4:	23ff      	movs	r3, #255	@ 0xff
 800d7a6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800d7aa:	e010      	b.n	800d7ce <LmHandlerNvmDataStore+0x72>
        }
        else
        {
          MibRequestConfirm_t mibReq;
          mibReq.Type = MIB_NVM_CTXS;
 800d7ac:	2327      	movs	r3, #39	@ 0x27
 800d7ae:	713b      	strb	r3, [r7, #4]
          LoRaMacMibGetRequestConfirm( &mibReq );
 800d7b0:	1d3b      	adds	r3, r7, #4
 800d7b2:	4618      	mov	r0, r3
 800d7b4:	f004 fb40 	bl	8011e38 <LoRaMacMibGetRequestConfirm>
          nvm = mibReq.Param.Contexts;
 800d7b8:	68bb      	ldr	r3, [r7, #8]
 800d7ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
          nvm_size = ((sizeof(LoRaMacNvmData_t) + 7) & ~0x07);
 800d7bc:	f44f 63b0 	mov.w	r3, #1408	@ 0x580
 800d7c0:	62bb      	str	r3, [r7, #40]	@ 0x28
          LmHandlerCallbacks->OnStoreContextRequest(nvm, nvm_size);
 800d7c2:	4b11      	ldr	r3, [pc, #68]	@ (800d808 <LmHandlerNvmDataStore+0xac>)
 800d7c4:	681b      	ldr	r3, [r3, #0]
 800d7c6:	695b      	ldr	r3, [r3, #20]
 800d7c8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d7ca:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d7cc:	4798      	blx	r3
        }

        if ( NvmDataMgmtStoreEnd() != NVM_DATA_OK )
 800d7ce:	f000 f847 	bl	800d860 <NvmDataMgmtStoreEnd>
 800d7d2:	4603      	mov	r3, r0
 800d7d4:	2b00      	cmp	r3, #0
 800d7d6:	d002      	beq.n	800d7de <LmHandlerNvmDataStore+0x82>
        {
            lmhStatus = LORAMAC_HANDLER_ERROR;
 800d7d8:	23ff      	movs	r3, #255	@ 0xff
 800d7da:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
    }

    if ((lmhStatus == LORAMAC_HANDLER_SUCCESS) && (LmHandlerCallbacks->OnNvmDataChange != NULL ))
 800d7de:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 800d7e2:	2b00      	cmp	r3, #0
 800d7e4:	d109      	bne.n	800d7fa <LmHandlerNvmDataStore+0x9e>
 800d7e6:	4b08      	ldr	r3, [pc, #32]	@ (800d808 <LmHandlerNvmDataStore+0xac>)
 800d7e8:	681b      	ldr	r3, [r3, #0]
 800d7ea:	69db      	ldr	r3, [r3, #28]
 800d7ec:	2b00      	cmp	r3, #0
 800d7ee:	d004      	beq.n	800d7fa <LmHandlerNvmDataStore+0x9e>
    {
        LmHandlerCallbacks->OnNvmDataChange( LORAMAC_HANDLER_NVM_STORE );
 800d7f0:	4b05      	ldr	r3, [pc, #20]	@ (800d808 <LmHandlerNvmDataStore+0xac>)
 800d7f2:	681b      	ldr	r3, [r3, #0]
 800d7f4:	69db      	ldr	r3, [r3, #28]
 800d7f6:	2001      	movs	r0, #1
 800d7f8:	4798      	blx	r3
    }

    return lmhStatus;
 800d7fa:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 800d7fe:	4618      	mov	r0, r3
 800d800:	3738      	adds	r7, #56	@ 0x38
 800d802:	46bd      	mov	sp, r7
 800d804:	bd80      	pop	{r7, pc}
 800d806:	bf00      	nop
 800d808:	20000754 	.word	0x20000754

0800d80c <NvmDataMgmtEvent>:
static uint16_t NvmNotifyFlags = 0;

#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */

void NvmDataMgmtEvent( uint16_t notifyFlags )
{
 800d80c:	b480      	push	{r7}
 800d80e:	b083      	sub	sp, #12
 800d810:	af00      	add	r7, sp, #0
 800d812:	4603      	mov	r3, r0
 800d814:	80fb      	strh	r3, [r7, #6]
#if( CONTEXT_MANAGEMENT_ENABLED == 1 )
    NvmNotifyFlags |= notifyFlags;
 800d816:	4b06      	ldr	r3, [pc, #24]	@ (800d830 <NvmDataMgmtEvent+0x24>)
 800d818:	881a      	ldrh	r2, [r3, #0]
 800d81a:	88fb      	ldrh	r3, [r7, #6]
 800d81c:	4313      	orrs	r3, r2
 800d81e:	b29a      	uxth	r2, r3
 800d820:	4b03      	ldr	r3, [pc, #12]	@ (800d830 <NvmDataMgmtEvent+0x24>)
 800d822:	801a      	strh	r2, [r3, #0]
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */
}
 800d824:	bf00      	nop
 800d826:	370c      	adds	r7, #12
 800d828:	46bd      	mov	sp, r7
 800d82a:	bc80      	pop	{r7}
 800d82c:	4770      	bx	lr
 800d82e:	bf00      	nop
 800d830:	20000878 	.word	0x20000878

0800d834 <NvmDataMgmtStoreBegin>:

int32_t NvmDataMgmtStoreBegin( void )
{
 800d834:	b580      	push	{r7, lr}
 800d836:	af00      	add	r7, sp, #0
#if( CONTEXT_MANAGEMENT_ENABLED == 1 )
    // Input checks
    if( NvmNotifyFlags == LORAMAC_NVM_NOTIFY_FLAG_NONE )
 800d838:	4b08      	ldr	r3, [pc, #32]	@ (800d85c <NvmDataMgmtStoreBegin+0x28>)
 800d83a:	881b      	ldrh	r3, [r3, #0]
 800d83c:	2b00      	cmp	r3, #0
 800d83e:	d102      	bne.n	800d846 <NvmDataMgmtStoreBegin+0x12>
    {
        // There was no update.
        return NVM_DATA_NO_UPDATED_DATA;
 800d840:	f06f 0301 	mvn.w	r3, #1
 800d844:	e008      	b.n	800d858 <NvmDataMgmtStoreBegin+0x24>
    }
    if( LoRaMacStop( ) != LORAMAC_STATUS_OK )
 800d846:	f004 fa13 	bl	8011c70 <LoRaMacStop>
 800d84a:	4603      	mov	r3, r0
 800d84c:	2b00      	cmp	r3, #0
 800d84e:	d002      	beq.n	800d856 <NvmDataMgmtStoreBegin+0x22>
    {
        return NVM_DATA_NOT_AVAILABLE;
 800d850:	f06f 0302 	mvn.w	r3, #2
 800d854:	e000      	b.n	800d858 <NvmDataMgmtStoreBegin+0x24>
    }
    return NVM_DATA_OK;
 800d856:	2300      	movs	r3, #0
#else
    return NVM_DATA_DISABLED;
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 800d858:	4618      	mov	r0, r3
 800d85a:	bd80      	pop	{r7, pc}
 800d85c:	20000878 	.word	0x20000878

0800d860 <NvmDataMgmtStoreEnd>:

int32_t NvmDataMgmtStoreEnd( void )
{
 800d860:	b580      	push	{r7, lr}
 800d862:	af00      	add	r7, sp, #0
#if( CONTEXT_MANAGEMENT_ENABLED == 1 )
    // Reset notification flags
    NvmNotifyFlags = LORAMAC_NVM_NOTIFY_FLAG_NONE;
 800d864:	4b03      	ldr	r3, [pc, #12]	@ (800d874 <NvmDataMgmtStoreEnd+0x14>)
 800d866:	2200      	movs	r2, #0
 800d868:	801a      	strh	r2, [r3, #0]

    // Resume LoRaMac
    LoRaMacStart( );
 800d86a:	f004 f9f3 	bl	8011c54 <LoRaMacStart>
    return NVM_DATA_OK;
 800d86e:	2300      	movs	r3, #0
#else
    return NVM_DATA_DISABLED;
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 800d870:	4618      	mov	r0, r3
 800d872:	bd80      	pop	{r7, pc}
 800d874:	20000878 	.word	0x20000878

0800d878 <ClassBStatusReset>:

/*!
 * Reset Beacon status structure
 */
static inline void ClassBStatusReset( void )
{
 800d878:	b580      	push	{r7, lr}
 800d87a:	af00      	add	r7, sp, #0
    memset1( ( uint8_t* ) &ComplianceTestState.ClassBStatus, 0, sizeof( ClassBStatus_t ) / sizeof( uint8_t ) );
 800d87c:	2220      	movs	r2, #32
 800d87e:	2100      	movs	r1, #0
 800d880:	4802      	ldr	r0, [pc, #8]	@ (800d88c <ClassBStatusReset+0x14>)
 800d882:	f009 fe17 	bl	80174b4 <memset1>
}
 800d886:	bf00      	nop
 800d888:	bd80      	pop	{r7, pc}
 800d88a:	bf00      	nop
 800d88c:	20000890 	.word	0x20000890

0800d890 <LmhpCompliancePackageFactory>:
    .OnSysTimeUpdate         = NULL,  // To be initialized by LmHandler
    .OnSystemReset           = NULL,  // To be initialized by LmHandler
};

LmhPackage_t *LmhpCompliancePackageFactory( void )
{
 800d890:	b480      	push	{r7}
 800d892:	af00      	add	r7, sp, #0
    return &CompliancePackage;
 800d894:	4b02      	ldr	r3, [pc, #8]	@ (800d8a0 <LmhpCompliancePackageFactory+0x10>)
}
 800d896:	4618      	mov	r0, r3
 800d898:	46bd      	mov	sp, r7
 800d89a:	bc80      	pop	{r7}
 800d89c:	4770      	bx	lr
 800d89e:	bf00      	nop
 800d8a0:	200000e8 	.word	0x200000e8

0800d8a4 <LmhpComplianceInit>:

static void LmhpComplianceInit( void* params, uint8_t* dataBuffer, uint8_t dataBufferMaxSize )
{
 800d8a4:	b580      	push	{r7, lr}
 800d8a6:	b086      	sub	sp, #24
 800d8a8:	af02      	add	r7, sp, #8
 800d8aa:	60f8      	str	r0, [r7, #12]
 800d8ac:	60b9      	str	r1, [r7, #8]
 800d8ae:	4613      	mov	r3, r2
 800d8b0:	71fb      	strb	r3, [r7, #7]
    if( ( params != NULL ) && ( dataBuffer != NULL ) )
 800d8b2:	68fb      	ldr	r3, [r7, #12]
 800d8b4:	2b00      	cmp	r3, #0
 800d8b6:	d018      	beq.n	800d8ea <LmhpComplianceInit+0x46>
 800d8b8:	68bb      	ldr	r3, [r7, #8]
 800d8ba:	2b00      	cmp	r3, #0
 800d8bc:	d015      	beq.n	800d8ea <LmhpComplianceInit+0x46>
    {
        ComplianceParams                      = ( LmhpComplianceParams_t* ) params;
 800d8be:	4a19      	ldr	r2, [pc, #100]	@ (800d924 <LmhpComplianceInit+0x80>)
 800d8c0:	68fb      	ldr	r3, [r7, #12]
 800d8c2:	6013      	str	r3, [r2, #0]
        ComplianceTestState.DataBuffer        = dataBuffer;
 800d8c4:	4a18      	ldr	r2, [pc, #96]	@ (800d928 <LmhpComplianceInit+0x84>)
 800d8c6:	68bb      	ldr	r3, [r7, #8]
 800d8c8:	60d3      	str	r3, [r2, #12]
        ComplianceTestState.DataBufferMaxSize = dataBufferMaxSize;
 800d8ca:	4a17      	ldr	r2, [pc, #92]	@ (800d928 <LmhpComplianceInit+0x84>)
 800d8cc:	79fb      	ldrb	r3, [r7, #7]
 800d8ce:	7253      	strb	r3, [r2, #9]
        ComplianceTestState.Initialized       = true;
 800d8d0:	4b15      	ldr	r3, [pc, #84]	@ (800d928 <LmhpComplianceInit+0x84>)
 800d8d2:	2201      	movs	r2, #1
 800d8d4:	701a      	strb	r2, [r3, #0]
        TimerInit( &ProcessTimer, OnProcessTimer );
 800d8d6:	2300      	movs	r3, #0
 800d8d8:	9300      	str	r3, [sp, #0]
 800d8da:	4b14      	ldr	r3, [pc, #80]	@ (800d92c <LmhpComplianceInit+0x88>)
 800d8dc:	2200      	movs	r2, #0
 800d8de:	f04f 31ff 	mov.w	r1, #4294967295
 800d8e2:	4813      	ldr	r0, [pc, #76]	@ (800d930 <LmhpComplianceInit+0x8c>)
 800d8e4:	f00d fe4c 	bl	801b580 <UTIL_TIMER_Create>
 800d8e8:	e005      	b.n	800d8f6 <LmhpComplianceInit+0x52>
    }
    else
    {
        ComplianceParams                = NULL;
 800d8ea:	4b0e      	ldr	r3, [pc, #56]	@ (800d924 <LmhpComplianceInit+0x80>)
 800d8ec:	2200      	movs	r2, #0
 800d8ee:	601a      	str	r2, [r3, #0]
        ComplianceTestState.Initialized = false;
 800d8f0:	4b0d      	ldr	r3, [pc, #52]	@ (800d928 <LmhpComplianceInit+0x84>)
 800d8f2:	2200      	movs	r2, #0
 800d8f4:	701a      	strb	r2, [r3, #0]
    }
    ComplianceTestState.RxAppCnt = 0;
 800d8f6:	4b0c      	ldr	r3, [pc, #48]	@ (800d928 <LmhpComplianceInit+0x84>)
 800d8f8:	2200      	movs	r2, #0
 800d8fa:	821a      	strh	r2, [r3, #16]
    ClassBStatusReset( );
 800d8fc:	f7ff ffbc 	bl	800d878 <ClassBStatusReset>
    ComplianceTestState.IsTxPending = false;
 800d900:	4b09      	ldr	r3, [pc, #36]	@ (800d928 <LmhpComplianceInit+0x84>)
 800d902:	2200      	movs	r2, #0
 800d904:	705a      	strb	r2, [r3, #1]
    ComplianceTestState.IsBeaconRxStatusIndOn = false;
 800d906:	4b08      	ldr	r3, [pc, #32]	@ (800d928 <LmhpComplianceInit+0x84>)
 800d908:	2200      	movs	r2, #0
 800d90a:	749a      	strb	r2, [r3, #18]
    ComplianceTestState.IsResetCmdPending = false;
 800d90c:	4b06      	ldr	r3, [pc, #24]	@ (800d928 <LmhpComplianceInit+0x84>)
 800d90e:	2200      	movs	r2, #0
 800d910:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    ComplianceTestState.IsClassReqCmdPending = false;
 800d914:	4b04      	ldr	r3, [pc, #16]	@ (800d928 <LmhpComplianceInit+0x84>)
 800d916:	2200      	movs	r2, #0
 800d918:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
}
 800d91c:	bf00      	nop
 800d91e:	3710      	adds	r7, #16
 800d920:	46bd      	mov	sp, r7
 800d922:	bd80      	pop	{r7, pc}
 800d924:	200008b4 	.word	0x200008b4
 800d928:	2000087c 	.word	0x2000087c
 800d92c:	0800e219 	.word	0x0800e219
 800d930:	200008b8 	.word	0x200008b8

0800d934 <LmhpComplianceIsInitialized>:

static bool LmhpComplianceIsInitialized( void )
{
 800d934:	b480      	push	{r7}
 800d936:	af00      	add	r7, sp, #0
    return ComplianceTestState.Initialized;
 800d938:	4b02      	ldr	r3, [pc, #8]	@ (800d944 <LmhpComplianceIsInitialized+0x10>)
 800d93a:	781b      	ldrb	r3, [r3, #0]
}
 800d93c:	4618      	mov	r0, r3
 800d93e:	46bd      	mov	sp, r7
 800d940:	bc80      	pop	{r7}
 800d942:	4770      	bx	lr
 800d944:	2000087c 	.word	0x2000087c

0800d948 <LmhpComplianceIsTxPending>:

static bool LmhpComplianceIsTxPending( void )
{
 800d948:	b480      	push	{r7}
 800d94a:	af00      	add	r7, sp, #0
    return ComplianceTestState.IsTxPending;
 800d94c:	4b02      	ldr	r3, [pc, #8]	@ (800d958 <LmhpComplianceIsTxPending+0x10>)
 800d94e:	785b      	ldrb	r3, [r3, #1]
}
 800d950:	4618      	mov	r0, r3
 800d952:	46bd      	mov	sp, r7
 800d954:	bc80      	pop	{r7}
 800d956:	4770      	bx	lr
 800d958:	2000087c 	.word	0x2000087c

0800d95c <LmhpComplianceProcess>:

static void LmhpComplianceProcess( void )
{
 800d95c:	b590      	push	{r4, r7, lr}
 800d95e:	b085      	sub	sp, #20
 800d960:	af00      	add	r7, sp, #0
    if( ComplianceTestState.IsTxPending == true )
 800d962:	4b33      	ldr	r3, [pc, #204]	@ (800da30 <LmhpComplianceProcess+0xd4>)
 800d964:	785b      	ldrb	r3, [r3, #1]
 800d966:	2b00      	cmp	r3, #0
 800d968:	d03f      	beq.n	800d9ea <LmhpComplianceProcess+0x8e>
    {
        TimerTime_t now = TimerGetCurrentTime( );
 800d96a:	f00d ffc7 	bl	801b8fc <UTIL_TIMER_GetCurrentTime>
 800d96e:	60f8      	str	r0, [r7, #12]
        if( now > ( ComplianceTestState.TxPendingTimestamp + LmHandlerGetDutyCycleWaitTime( ) ) )
 800d970:	4b2f      	ldr	r3, [pc, #188]	@ (800da30 <LmhpComplianceProcess+0xd4>)
 800d972:	685c      	ldr	r4, [r3, #4]
 800d974:	f7ff f96a 	bl	800cc4c <LmHandlerGetDutyCycleWaitTime>
 800d978:	4603      	mov	r3, r0
 800d97a:	4423      	add	r3, r4
 800d97c:	68fa      	ldr	r2, [r7, #12]
 800d97e:	429a      	cmp	r2, r3
 800d980:	d942      	bls.n	800da08 <LmhpComplianceProcess+0xac>
        {
            if( ComplianceTestState.DataBufferSize != 0 )
 800d982:	4b2b      	ldr	r3, [pc, #172]	@ (800da30 <LmhpComplianceProcess+0xd4>)
 800d984:	7a9b      	ldrb	r3, [r3, #10]
 800d986:	2b00      	cmp	r3, #0
 800d988:	d03e      	beq.n	800da08 <LmhpComplianceProcess+0xac>
            {
                // Answer commands
                LmHandlerAppData_t appData = {
 800d98a:	23e0      	movs	r3, #224	@ 0xe0
 800d98c:	703b      	strb	r3, [r7, #0]
                    .Buffer     = ComplianceTestState.DataBuffer,
                    .BufferSize = ComplianceTestState.DataBufferSize,
 800d98e:	4b28      	ldr	r3, [pc, #160]	@ (800da30 <LmhpComplianceProcess+0xd4>)
 800d990:	7a9b      	ldrb	r3, [r3, #10]
                LmHandlerAppData_t appData = {
 800d992:	707b      	strb	r3, [r7, #1]
                    .Buffer     = ComplianceTestState.DataBuffer,
 800d994:	4b26      	ldr	r3, [pc, #152]	@ (800da30 <LmhpComplianceProcess+0xd4>)
 800d996:	68db      	ldr	r3, [r3, #12]
                LmHandlerAppData_t appData = {
 800d998:	607b      	str	r3, [r7, #4]
                    .Port       = COMPLIANCE_PORT,
                };
                LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_ERROR;
 800d99a:	23ff      	movs	r3, #255	@ 0xff
 800d99c:	72fb      	strb	r3, [r7, #11]
                lmhStatus = LmHandlerSend( &appData, ComplianceTestState.IsTxConfirmed, true );
 800d99e:	4b24      	ldr	r3, [pc, #144]	@ (800da30 <LmhpComplianceProcess+0xd4>)
 800d9a0:	7a19      	ldrb	r1, [r3, #8]
 800d9a2:	463b      	mov	r3, r7
 800d9a4:	2201      	movs	r2, #1
 800d9a6:	4618      	mov	r0, r3
 800d9a8:	f7ff f9f8 	bl	800cd9c <LmHandlerSend>
 800d9ac:	4603      	mov	r3, r0
 800d9ae:	72fb      	strb	r3, [r7, #11]
                if ((lmhStatus == LORAMAC_HANDLER_BUSY_ERROR) || (lmhStatus == LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED))
 800d9b0:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800d9b4:	f113 0f02 	cmn.w	r3, #2
 800d9b8:	d004      	beq.n	800d9c4 <LmhpComplianceProcess+0x68>
 800d9ba:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800d9be:	f113 0f06 	cmn.w	r3, #6
 800d9c2:	d108      	bne.n	800d9d6 <LmhpComplianceProcess+0x7a>
                {
                    // try to send the message again
                    TimerSetValue( &ProcessTimer, 1000 );
 800d9c4:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800d9c8:	481a      	ldr	r0, [pc, #104]	@ (800da34 <LmhpComplianceProcess+0xd8>)
 800d9ca:	f00d feed 	bl	801b7a8 <UTIL_TIMER_SetPeriod>
                    TimerStart(&ProcessTimer);
 800d9ce:	4819      	ldr	r0, [pc, #100]	@ (800da34 <LmhpComplianceProcess+0xd8>)
 800d9d0:	f00d fe0c 	bl	801b5ec <UTIL_TIMER_Start>
 800d9d4:	e005      	b.n	800d9e2 <LmhpComplianceProcess+0x86>
                }
                else
                {
                    ComplianceTestState.IsTxPending = false;
 800d9d6:	4b16      	ldr	r3, [pc, #88]	@ (800da30 <LmhpComplianceProcess+0xd4>)
 800d9d8:	2200      	movs	r2, #0
 800d9da:	705a      	strb	r2, [r3, #1]
                    ComplianceTestState.DataBufferSize = 0;
 800d9dc:	4b14      	ldr	r3, [pc, #80]	@ (800da30 <LmhpComplianceProcess+0xd4>)
 800d9de:	2200      	movs	r2, #0
 800d9e0:	729a      	strb	r2, [r3, #10]
                }
                ComplianceTestState.TxPendingTimestamp = now;
 800d9e2:	4a13      	ldr	r2, [pc, #76]	@ (800da30 <LmhpComplianceProcess+0xd4>)
 800d9e4:	68fb      	ldr	r3, [r7, #12]
 800d9e6:	6053      	str	r3, [r2, #4]
 800d9e8:	e00e      	b.n	800da08 <LmhpComplianceProcess+0xac>
            }
        }
    }
    else
    { // If no Tx is pending process other commands
        if( ComplianceTestState.IsClassReqCmdPending == true )
 800d9ea:	4b11      	ldr	r3, [pc, #68]	@ (800da30 <LmhpComplianceProcess+0xd4>)
 800d9ec:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800d9f0:	2b00      	cmp	r3, #0
 800d9f2:	d009      	beq.n	800da08 <LmhpComplianceProcess+0xac>
        {
            ComplianceTestState.IsClassReqCmdPending = false;
 800d9f4:	4b0e      	ldr	r3, [pc, #56]	@ (800da30 <LmhpComplianceProcess+0xd4>)
 800d9f6:	2200      	movs	r2, #0
 800d9f8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
            LmHandlerRequestClass( ComplianceTestState.NewClass );
 800d9fc:	4b0c      	ldr	r3, [pc, #48]	@ (800da30 <LmhpComplianceProcess+0xd4>)
 800d9fe:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 800da02:	4618      	mov	r0, r3
 800da04:	f7ff fab8 	bl	800cf78 <LmHandlerRequestClass>
        }
    }

    if( ComplianceTestState.IsResetCmdPending == true )
 800da08:	4b09      	ldr	r3, [pc, #36]	@ (800da30 <LmhpComplianceProcess+0xd4>)
 800da0a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800da0e:	2b00      	cmp	r3, #0
 800da10:	d00a      	beq.n	800da28 <LmhpComplianceProcess+0xcc>
    {
        ComplianceTestState.IsResetCmdPending = false;
 800da12:	4b07      	ldr	r3, [pc, #28]	@ (800da30 <LmhpComplianceProcess+0xd4>)
 800da14:	2200      	movs	r2, #0
 800da16:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        // Call platform MCU reset API
        if (CompliancePackage.OnSystemReset != NULL)
 800da1a:	4b07      	ldr	r3, [pc, #28]	@ (800da38 <LmhpComplianceProcess+0xdc>)
 800da1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800da1e:	2b00      	cmp	r3, #0
 800da20:	d002      	beq.n	800da28 <LmhpComplianceProcess+0xcc>
        {
            CompliancePackage.OnSystemReset( );
 800da22:	4b05      	ldr	r3, [pc, #20]	@ (800da38 <LmhpComplianceProcess+0xdc>)
 800da24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800da26:	4798      	blx	r3
        }
    }
}
 800da28:	bf00      	nop
 800da2a:	3714      	adds	r7, #20
 800da2c:	46bd      	mov	sp, r7
 800da2e:	bd90      	pop	{r4, r7, pc}
 800da30:	2000087c 	.word	0x2000087c
 800da34:	200008b8 	.word	0x200008b8
 800da38:	200000e8 	.word	0x200000e8

0800da3c <LmhpComplianceOnMcpsIndication>:

static void LmhpComplianceOnMcpsIndication( McpsIndication_t* mcpsIndication )
{
 800da3c:	b5b0      	push	{r4, r5, r7, lr}
 800da3e:	b0a4      	sub	sp, #144	@ 0x90
 800da40:	af00      	add	r7, sp, #0
 800da42:	6078      	str	r0, [r7, #4]
    uint8_t cmdIndex        = 0;
 800da44:	2300      	movs	r3, #0
 800da46:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
    MibRequestConfirm_t mibReq;

    if( ComplianceTestState.Initialized == false )
 800da4a:	4bce      	ldr	r3, [pc, #824]	@ (800dd84 <LmhpComplianceOnMcpsIndication+0x348>)
 800da4c:	781b      	ldrb	r3, [r3, #0]
 800da4e:	f083 0301 	eor.w	r3, r3, #1
 800da52:	b2db      	uxtb	r3, r3
 800da54:	2b00      	cmp	r3, #0
 800da56:	f040 83b5 	bne.w	800e1c4 <LmhpComplianceOnMcpsIndication+0x788>
        return;
    }

    // Increment the compliance certification protocol downlink counter
    // Not counting downlinks on FPort 0
    if( ( mcpsIndication->Port > 0 ) || ( mcpsIndication->AckReceived == true ) )
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	78db      	ldrb	r3, [r3, #3]
 800da5e:	2b00      	cmp	r3, #0
 800da60:	d103      	bne.n	800da6a <LmhpComplianceOnMcpsIndication+0x2e>
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	7b9b      	ldrb	r3, [r3, #14]
 800da66:	2b00      	cmp	r3, #0
 800da68:	d005      	beq.n	800da76 <LmhpComplianceOnMcpsIndication+0x3a>
    {
        ComplianceTestState.RxAppCnt++;
 800da6a:	4bc6      	ldr	r3, [pc, #792]	@ (800dd84 <LmhpComplianceOnMcpsIndication+0x348>)
 800da6c:	8a1b      	ldrh	r3, [r3, #16]
 800da6e:	3301      	adds	r3, #1
 800da70:	b29a      	uxth	r2, r3
 800da72:	4bc4      	ldr	r3, [pc, #784]	@ (800dd84 <LmhpComplianceOnMcpsIndication+0x348>)
 800da74:	821a      	strh	r2, [r3, #16]
    }

    if( mcpsIndication->RxData == false )
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	7b5b      	ldrb	r3, [r3, #13]
 800da7a:	f083 0301 	eor.w	r3, r3, #1
 800da7e:	b2db      	uxtb	r3, r3
 800da80:	2b00      	cmp	r3, #0
 800da82:	f040 83a1 	bne.w	800e1c8 <LmhpComplianceOnMcpsIndication+0x78c>
    {
        return;
    }

    if( mcpsIndication->Port != COMPLIANCE_PORT )
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	78db      	ldrb	r3, [r3, #3]
 800da8a:	2be0      	cmp	r3, #224	@ 0xe0
 800da8c:	f040 839e 	bne.w	800e1cc <LmhpComplianceOnMcpsIndication+0x790>
    {
        return;
    }

    ComplianceTestState.DataBufferSize = 0;
 800da90:	4bbc      	ldr	r3, [pc, #752]	@ (800dd84 <LmhpComplianceOnMcpsIndication+0x348>)
 800da92:	2200      	movs	r2, #0
 800da94:	729a      	strb	r2, [r3, #10]

    switch( mcpsIndication->Buffer[cmdIndex++] )
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	689a      	ldr	r2, [r3, #8]
 800da9a:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800da9e:	1c59      	adds	r1, r3, #1
 800daa0:	f887 108f 	strb.w	r1, [r7, #143]	@ 0x8f
 800daa4:	4413      	add	r3, r2
 800daa6:	781b      	ldrb	r3, [r3, #0]
 800daa8:	2b7f      	cmp	r3, #127	@ 0x7f
 800daaa:	f200 836e 	bhi.w	800e18a <LmhpComplianceOnMcpsIndication+0x74e>
 800daae:	a201      	add	r2, pc, #4	@ (adr r2, 800dab4 <LmhpComplianceOnMcpsIndication+0x78>)
 800dab0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dab4:	0800dcb5 	.word	0x0800dcb5
 800dab8:	0800dcf9 	.word	0x0800dcf9
 800dabc:	0800dd03 	.word	0x0800dd03
 800dac0:	0800dd0f 	.word	0x0800dd0f
 800dac4:	0800dd31 	.word	0x0800dd31
 800dac8:	0800dd5f 	.word	0x0800dd5f
 800dacc:	0800dd8d 	.word	0x0800dd8d
 800dad0:	0800ddeb 	.word	0x0800ddeb
 800dad4:	0800de43 	.word	0x0800de43
 800dad8:	0800deaf 	.word	0x0800deaf
 800dadc:	0800deff 	.word	0x0800deff
 800dae0:	0800e18b 	.word	0x0800e18b
 800dae4:	0800e18b 	.word	0x0800e18b
 800dae8:	0800e18b 	.word	0x0800e18b
 800daec:	0800e18b 	.word	0x0800e18b
 800daf0:	0800e18b 	.word	0x0800e18b
 800daf4:	0800e18b 	.word	0x0800e18b
 800daf8:	0800e18b 	.word	0x0800e18b
 800dafc:	0800e18b 	.word	0x0800e18b
 800db00:	0800e18b 	.word	0x0800e18b
 800db04:	0800e18b 	.word	0x0800e18b
 800db08:	0800e18b 	.word	0x0800e18b
 800db0c:	0800e18b 	.word	0x0800e18b
 800db10:	0800e18b 	.word	0x0800e18b
 800db14:	0800e18b 	.word	0x0800e18b
 800db18:	0800e18b 	.word	0x0800e18b
 800db1c:	0800e18b 	.word	0x0800e18b
 800db20:	0800e18b 	.word	0x0800e18b
 800db24:	0800e18b 	.word	0x0800e18b
 800db28:	0800e18b 	.word	0x0800e18b
 800db2c:	0800e18b 	.word	0x0800e18b
 800db30:	0800e18b 	.word	0x0800e18b
 800db34:	0800df07 	.word	0x0800df07
 800db38:	0800df19 	.word	0x0800df19
 800db3c:	0800df21 	.word	0x0800df21
 800db40:	0800e18b 	.word	0x0800e18b
 800db44:	0800e18b 	.word	0x0800e18b
 800db48:	0800e18b 	.word	0x0800e18b
 800db4c:	0800e18b 	.word	0x0800e18b
 800db50:	0800e18b 	.word	0x0800e18b
 800db54:	0800e18b 	.word	0x0800e18b
 800db58:	0800e18b 	.word	0x0800e18b
 800db5c:	0800e18b 	.word	0x0800e18b
 800db60:	0800e18b 	.word	0x0800e18b
 800db64:	0800e18b 	.word	0x0800e18b
 800db68:	0800e18b 	.word	0x0800e18b
 800db6c:	0800e18b 	.word	0x0800e18b
 800db70:	0800e18b 	.word	0x0800e18b
 800db74:	0800e18b 	.word	0x0800e18b
 800db78:	0800e18b 	.word	0x0800e18b
 800db7c:	0800e18b 	.word	0x0800e18b
 800db80:	0800e18b 	.word	0x0800e18b
 800db84:	0800e18b 	.word	0x0800e18b
 800db88:	0800e18b 	.word	0x0800e18b
 800db8c:	0800e18b 	.word	0x0800e18b
 800db90:	0800e18b 	.word	0x0800e18b
 800db94:	0800e18b 	.word	0x0800e18b
 800db98:	0800e18b 	.word	0x0800e18b
 800db9c:	0800e18b 	.word	0x0800e18b
 800dba0:	0800e18b 	.word	0x0800e18b
 800dba4:	0800e18b 	.word	0x0800e18b
 800dba8:	0800e18b 	.word	0x0800e18b
 800dbac:	0800e18b 	.word	0x0800e18b
 800dbb0:	0800e18b 	.word	0x0800e18b
 800dbb4:	0800e18b 	.word	0x0800e18b
 800dbb8:	0800e18b 	.word	0x0800e18b
 800dbbc:	0800e18b 	.word	0x0800e18b
 800dbc0:	0800e18b 	.word	0x0800e18b
 800dbc4:	0800e18b 	.word	0x0800e18b
 800dbc8:	0800e18b 	.word	0x0800e18b
 800dbcc:	0800e18b 	.word	0x0800e18b
 800dbd0:	0800e18b 	.word	0x0800e18b
 800dbd4:	0800e18b 	.word	0x0800e18b
 800dbd8:	0800e18b 	.word	0x0800e18b
 800dbdc:	0800e18b 	.word	0x0800e18b
 800dbe0:	0800e18b 	.word	0x0800e18b
 800dbe4:	0800e18b 	.word	0x0800e18b
 800dbe8:	0800e18b 	.word	0x0800e18b
 800dbec:	0800e18b 	.word	0x0800e18b
 800dbf0:	0800e18b 	.word	0x0800e18b
 800dbf4:	0800e18b 	.word	0x0800e18b
 800dbf8:	0800e18b 	.word	0x0800e18b
 800dbfc:	0800e18b 	.word	0x0800e18b
 800dc00:	0800e18b 	.word	0x0800e18b
 800dc04:	0800e18b 	.word	0x0800e18b
 800dc08:	0800e18b 	.word	0x0800e18b
 800dc0c:	0800e18b 	.word	0x0800e18b
 800dc10:	0800e18b 	.word	0x0800e18b
 800dc14:	0800e18b 	.word	0x0800e18b
 800dc18:	0800e18b 	.word	0x0800e18b
 800dc1c:	0800e18b 	.word	0x0800e18b
 800dc20:	0800e18b 	.word	0x0800e18b
 800dc24:	0800e18b 	.word	0x0800e18b
 800dc28:	0800e18b 	.word	0x0800e18b
 800dc2c:	0800e18b 	.word	0x0800e18b
 800dc30:	0800e18b 	.word	0x0800e18b
 800dc34:	0800e18b 	.word	0x0800e18b
 800dc38:	0800e18b 	.word	0x0800e18b
 800dc3c:	0800e18b 	.word	0x0800e18b
 800dc40:	0800e18b 	.word	0x0800e18b
 800dc44:	0800e18b 	.word	0x0800e18b
 800dc48:	0800e18b 	.word	0x0800e18b
 800dc4c:	0800e18b 	.word	0x0800e18b
 800dc50:	0800e18b 	.word	0x0800e18b
 800dc54:	0800e18b 	.word	0x0800e18b
 800dc58:	0800e18b 	.word	0x0800e18b
 800dc5c:	0800e18b 	.word	0x0800e18b
 800dc60:	0800e18b 	.word	0x0800e18b
 800dc64:	0800e18b 	.word	0x0800e18b
 800dc68:	0800e18b 	.word	0x0800e18b
 800dc6c:	0800e18b 	.word	0x0800e18b
 800dc70:	0800e18b 	.word	0x0800e18b
 800dc74:	0800e18b 	.word	0x0800e18b
 800dc78:	0800e18b 	.word	0x0800e18b
 800dc7c:	0800e18b 	.word	0x0800e18b
 800dc80:	0800e18b 	.word	0x0800e18b
 800dc84:	0800e18b 	.word	0x0800e18b
 800dc88:	0800e18b 	.word	0x0800e18b
 800dc8c:	0800e18b 	.word	0x0800e18b
 800dc90:	0800e18b 	.word	0x0800e18b
 800dc94:	0800e18b 	.word	0x0800e18b
 800dc98:	0800e18b 	.word	0x0800e18b
 800dc9c:	0800e18b 	.word	0x0800e18b
 800dca0:	0800e18b 	.word	0x0800e18b
 800dca4:	0800e18b 	.word	0x0800e18b
 800dca8:	0800df53 	.word	0x0800df53
 800dcac:	0800e003 	.word	0x0800e003
 800dcb0:	0800e035 	.word	0x0800e035
    {
    case COMPLIANCE_PKG_VERSION_REQ:
    {
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_PKG_VERSION_ANS;
 800dcb4:	4b33      	ldr	r3, [pc, #204]	@ (800dd84 <LmhpComplianceOnMcpsIndication+0x348>)
 800dcb6:	68da      	ldr	r2, [r3, #12]
 800dcb8:	4b32      	ldr	r3, [pc, #200]	@ (800dd84 <LmhpComplianceOnMcpsIndication+0x348>)
 800dcba:	7a9b      	ldrb	r3, [r3, #10]
 800dcbc:	1c59      	adds	r1, r3, #1
 800dcbe:	b2c8      	uxtb	r0, r1
 800dcc0:	4930      	ldr	r1, [pc, #192]	@ (800dd84 <LmhpComplianceOnMcpsIndication+0x348>)
 800dcc2:	7288      	strb	r0, [r1, #10]
 800dcc4:	4413      	add	r3, r2
 800dcc6:	2200      	movs	r2, #0
 800dcc8:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_ID;
 800dcca:	4b2e      	ldr	r3, [pc, #184]	@ (800dd84 <LmhpComplianceOnMcpsIndication+0x348>)
 800dccc:	68da      	ldr	r2, [r3, #12]
 800dcce:	4b2d      	ldr	r3, [pc, #180]	@ (800dd84 <LmhpComplianceOnMcpsIndication+0x348>)
 800dcd0:	7a9b      	ldrb	r3, [r3, #10]
 800dcd2:	1c59      	adds	r1, r3, #1
 800dcd4:	b2c8      	uxtb	r0, r1
 800dcd6:	492b      	ldr	r1, [pc, #172]	@ (800dd84 <LmhpComplianceOnMcpsIndication+0x348>)
 800dcd8:	7288      	strb	r0, [r1, #10]
 800dcda:	4413      	add	r3, r2
 800dcdc:	2206      	movs	r2, #6
 800dcde:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_VERSION;
 800dce0:	4b28      	ldr	r3, [pc, #160]	@ (800dd84 <LmhpComplianceOnMcpsIndication+0x348>)
 800dce2:	68da      	ldr	r2, [r3, #12]
 800dce4:	4b27      	ldr	r3, [pc, #156]	@ (800dd84 <LmhpComplianceOnMcpsIndication+0x348>)
 800dce6:	7a9b      	ldrb	r3, [r3, #10]
 800dce8:	1c59      	adds	r1, r3, #1
 800dcea:	b2c8      	uxtb	r0, r1
 800dcec:	4925      	ldr	r1, [pc, #148]	@ (800dd84 <LmhpComplianceOnMcpsIndication+0x348>)
 800dcee:	7288      	strb	r0, [r1, #10]
 800dcf0:	4413      	add	r3, r2
 800dcf2:	2201      	movs	r2, #1
 800dcf4:	701a      	strb	r2, [r3, #0]
        break;
 800dcf6:	e251      	b.n	800e19c <LmhpComplianceOnMcpsIndication+0x760>
    }
    case COMPLIANCE_DUT_RESET_REQ:
    {
        ComplianceTestState.IsResetCmdPending = true;
 800dcf8:	4b22      	ldr	r3, [pc, #136]	@ (800dd84 <LmhpComplianceOnMcpsIndication+0x348>)
 800dcfa:	2201      	movs	r2, #1
 800dcfc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        break;
 800dd00:	e24c      	b.n	800e19c <LmhpComplianceOnMcpsIndication+0x760>
    }
    case COMPLIANCE_DUT_JOIN_REQ:
    {
        CompliancePackage.OnJoinRequest( ACTIVATION_TYPE_OTAA, true );
 800dd02:	4b21      	ldr	r3, [pc, #132]	@ (800dd88 <LmhpComplianceOnMcpsIndication+0x34c>)
 800dd04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dd06:	2101      	movs	r1, #1
 800dd08:	2002      	movs	r0, #2
 800dd0a:	4798      	blx	r3
        break;
 800dd0c:	e246      	b.n	800e19c <LmhpComplianceOnMcpsIndication+0x760>
    }
    case COMPLIANCE_SWITCH_CLASS_REQ:
    {
        // CLASS_A = 0, CLASS_B = 1, CLASS_C = 2
        ComplianceTestState.NewClass = ( DeviceClass_t ) mcpsIndication->Buffer[cmdIndex++];
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	689a      	ldr	r2, [r3, #8]
 800dd12:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800dd16:	1c59      	adds	r1, r3, #1
 800dd18:	f887 108f 	strb.w	r1, [r7, #143]	@ 0x8f
 800dd1c:	4413      	add	r3, r2
 800dd1e:	781a      	ldrb	r2, [r3, #0]
 800dd20:	4b18      	ldr	r3, [pc, #96]	@ (800dd84 <LmhpComplianceOnMcpsIndication+0x348>)
 800dd22:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
        ComplianceTestState.IsClassReqCmdPending = true;
 800dd26:	4b17      	ldr	r3, [pc, #92]	@ (800dd84 <LmhpComplianceOnMcpsIndication+0x348>)
 800dd28:	2201      	movs	r2, #1
 800dd2a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        break;
 800dd2e:	e235      	b.n	800e19c <LmhpComplianceOnMcpsIndication+0x760>
    }
    case COMPLIANCE_ADR_BIT_CHANGE_REQ:
    {
        MibRequestConfirm_t mibReq;
        mibReq.Type            = MIB_ADR;
 800dd30:	2304      	movs	r3, #4
 800dd32:	733b      	strb	r3, [r7, #12]
        mibReq.Param.AdrEnable = mcpsIndication->Buffer[cmdIndex++];
 800dd34:	687b      	ldr	r3, [r7, #4]
 800dd36:	689a      	ldr	r2, [r3, #8]
 800dd38:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800dd3c:	1c59      	adds	r1, r3, #1
 800dd3e:	f887 108f 	strb.w	r1, [r7, #143]	@ 0x8f
 800dd42:	4413      	add	r3, r2
 800dd44:	781b      	ldrb	r3, [r3, #0]
 800dd46:	2b00      	cmp	r3, #0
 800dd48:	bf14      	ite	ne
 800dd4a:	2301      	movne	r3, #1
 800dd4c:	2300      	moveq	r3, #0
 800dd4e:	b2db      	uxtb	r3, r3
 800dd50:	743b      	strb	r3, [r7, #16]

        LoRaMacMibSetRequestConfirm( &mibReq );
 800dd52:	f107 030c 	add.w	r3, r7, #12
 800dd56:	4618      	mov	r0, r3
 800dd58:	f004 fa14 	bl	8012184 <LoRaMacMibSetRequestConfirm>
        break;
 800dd5c:	e21e      	b.n	800e19c <LmhpComplianceOnMcpsIndication+0x760>
    }
    case COMPLIANCE_REGIONAL_DUTY_CYCLE_CTRL_REQ:
    {
        LoRaMacTestSetDutyCycleOn( mcpsIndication->Buffer[cmdIndex++] );
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	689a      	ldr	r2, [r3, #8]
 800dd62:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800dd66:	1c59      	adds	r1, r3, #1
 800dd68:	f887 108f 	strb.w	r1, [r7, #143]	@ 0x8f
 800dd6c:	4413      	add	r3, r2
 800dd6e:	781b      	ldrb	r3, [r3, #0]
 800dd70:	2b00      	cmp	r3, #0
 800dd72:	bf14      	ite	ne
 800dd74:	2301      	movne	r3, #1
 800dd76:	2300      	moveq	r3, #0
 800dd78:	b2db      	uxtb	r3, r3
 800dd7a:	4618      	mov	r0, r3
 800dd7c:	f005 f830 	bl	8012de0 <LoRaMacTestSetDutyCycleOn>
        break;
 800dd80:	e20c      	b.n	800e19c <LmhpComplianceOnMcpsIndication+0x760>
 800dd82:	bf00      	nop
 800dd84:	2000087c 	.word	0x2000087c
 800dd88:	200000e8 	.word	0x200000e8
    }
    case COMPLIANCE_TX_PERIODICITY_CHANGE_REQ:
    {
        // Periodicity in milli-seconds
        uint32_t periodicity[] = { 0, 5000, 10000, 20000, 30000, 40000, 50000, 60000, 120000, 240000, 480000 };
 800dd8c:	4ba5      	ldr	r3, [pc, #660]	@ (800e024 <LmhpComplianceOnMcpsIndication+0x5e8>)
 800dd8e:	f107 040c 	add.w	r4, r7, #12
 800dd92:	461d      	mov	r5, r3
 800dd94:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800dd96:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800dd98:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800dd9a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800dd9c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800dda0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        uint8_t  index         = mcpsIndication->Buffer[cmdIndex++];
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	689a      	ldr	r2, [r3, #8]
 800dda8:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800ddac:	1c59      	adds	r1, r3, #1
 800ddae:	f887 108f 	strb.w	r1, [r7, #143]	@ 0x8f
 800ddb2:	4413      	add	r3, r2
 800ddb4:	781b      	ldrb	r3, [r3, #0]
 800ddb6:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c

        if( index < ( sizeof( periodicity ) / sizeof( uint32_t ) ) )
 800ddba:	f897 308c 	ldrb.w	r3, [r7, #140]	@ 0x8c
 800ddbe:	2b0a      	cmp	r3, #10
 800ddc0:	f200 81e5 	bhi.w	800e18e <LmhpComplianceOnMcpsIndication+0x752>
        {
            if( ComplianceParams->OnTxPeriodicityChanged != NULL )
 800ddc4:	4b98      	ldr	r3, [pc, #608]	@ (800e028 <LmhpComplianceOnMcpsIndication+0x5ec>)
 800ddc6:	681b      	ldr	r3, [r3, #0]
 800ddc8:	685b      	ldr	r3, [r3, #4]
 800ddca:	2b00      	cmp	r3, #0
 800ddcc:	f000 81df 	beq.w	800e18e <LmhpComplianceOnMcpsIndication+0x752>
            {
                ComplianceParams->OnTxPeriodicityChanged( periodicity[index] );
 800ddd0:	4b95      	ldr	r3, [pc, #596]	@ (800e028 <LmhpComplianceOnMcpsIndication+0x5ec>)
 800ddd2:	681b      	ldr	r3, [r3, #0]
 800ddd4:	685a      	ldr	r2, [r3, #4]
 800ddd6:	f897 308c 	ldrb.w	r3, [r7, #140]	@ 0x8c
 800ddda:	009b      	lsls	r3, r3, #2
 800dddc:	3390      	adds	r3, #144	@ 0x90
 800ddde:	443b      	add	r3, r7
 800dde0:	f853 3c84 	ldr.w	r3, [r3, #-132]
 800dde4:	4618      	mov	r0, r3
 800dde6:	4790      	blx	r2
            }
        }
        break;
 800dde8:	e1d1      	b.n	800e18e <LmhpComplianceOnMcpsIndication+0x752>
    }
    case COMPLIANCE_TX_FRAMES_CTRL_REQ:
    {
        uint8_t frameType = mcpsIndication->Buffer[cmdIndex++];
 800ddea:	687b      	ldr	r3, [r7, #4]
 800ddec:	689a      	ldr	r2, [r3, #8]
 800ddee:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800ddf2:	1c59      	adds	r1, r3, #1
 800ddf4:	f887 108f 	strb.w	r1, [r7, #143]	@ 0x8f
 800ddf8:	4413      	add	r3, r2
 800ddfa:	781b      	ldrb	r3, [r3, #0]
 800ddfc:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d

        if( ( frameType == 1 ) || ( frameType == 2 ) )
 800de00:	f897 308d 	ldrb.w	r3, [r7, #141]	@ 0x8d
 800de04:	2b01      	cmp	r3, #1
 800de06:	d004      	beq.n	800de12 <LmhpComplianceOnMcpsIndication+0x3d6>
 800de08:	f897 308d 	ldrb.w	r3, [r7, #141]	@ 0x8d
 800de0c:	2b02      	cmp	r3, #2
 800de0e:	f040 81c0 	bne.w	800e192 <LmhpComplianceOnMcpsIndication+0x756>
        {
            ComplianceTestState.IsTxConfirmed = ( frameType != 1 ) ? LORAMAC_HANDLER_CONFIRMED_MSG : LORAMAC_HANDLER_UNCONFIRMED_MSG;
 800de12:	f897 308d 	ldrb.w	r3, [r7, #141]	@ 0x8d
 800de16:	2b01      	cmp	r3, #1
 800de18:	bf14      	ite	ne
 800de1a:	2301      	movne	r3, #1
 800de1c:	2300      	moveq	r3, #0
 800de1e:	b2db      	uxtb	r3, r3
 800de20:	461a      	mov	r2, r3
 800de22:	4b82      	ldr	r3, [pc, #520]	@ (800e02c <LmhpComplianceOnMcpsIndication+0x5f0>)
 800de24:	721a      	strb	r2, [r3, #8]

            if( ComplianceParams->OnTxFrameCtrlChanged != NULL )
 800de26:	4b80      	ldr	r3, [pc, #512]	@ (800e028 <LmhpComplianceOnMcpsIndication+0x5ec>)
 800de28:	681b      	ldr	r3, [r3, #0]
 800de2a:	689b      	ldr	r3, [r3, #8]
 800de2c:	2b00      	cmp	r3, #0
 800de2e:	f000 81b0 	beq.w	800e192 <LmhpComplianceOnMcpsIndication+0x756>
            {
                ComplianceParams->OnTxFrameCtrlChanged( ComplianceTestState.IsTxConfirmed );
 800de32:	4b7d      	ldr	r3, [pc, #500]	@ (800e028 <LmhpComplianceOnMcpsIndication+0x5ec>)
 800de34:	681b      	ldr	r3, [r3, #0]
 800de36:	689b      	ldr	r3, [r3, #8]
 800de38:	4a7c      	ldr	r2, [pc, #496]	@ (800e02c <LmhpComplianceOnMcpsIndication+0x5f0>)
 800de3a:	7a12      	ldrb	r2, [r2, #8]
 800de3c:	4610      	mov	r0, r2
 800de3e:	4798      	blx	r3
            }
        }
        break;
 800de40:	e1a7      	b.n	800e192 <LmhpComplianceOnMcpsIndication+0x756>
    }
    case COMPLIANCE_ECHO_PAYLOAD_REQ:
    {
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_ECHO_PAYLOAD_ANS;
 800de42:	4b7a      	ldr	r3, [pc, #488]	@ (800e02c <LmhpComplianceOnMcpsIndication+0x5f0>)
 800de44:	68da      	ldr	r2, [r3, #12]
 800de46:	4b79      	ldr	r3, [pc, #484]	@ (800e02c <LmhpComplianceOnMcpsIndication+0x5f0>)
 800de48:	7a9b      	ldrb	r3, [r3, #10]
 800de4a:	1c59      	adds	r1, r3, #1
 800de4c:	b2c8      	uxtb	r0, r1
 800de4e:	4977      	ldr	r1, [pc, #476]	@ (800e02c <LmhpComplianceOnMcpsIndication+0x5f0>)
 800de50:	7288      	strb	r0, [r1, #10]
 800de52:	4413      	add	r3, r2
 800de54:	2208      	movs	r2, #8
 800de56:	701a      	strb	r2, [r3, #0]

        for( uint8_t i = 1; i < MIN( mcpsIndication->BufferSize, ComplianceTestState.DataBufferMaxSize );
 800de58:	2301      	movs	r3, #1
 800de5a:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
 800de5e:	e019      	b.n	800de94 <LmhpComplianceOnMcpsIndication+0x458>
             i++ )
        {
            ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = mcpsIndication->Buffer[cmdIndex++] + 1;
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	689a      	ldr	r2, [r3, #8]
 800de64:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800de68:	1c59      	adds	r1, r3, #1
 800de6a:	f887 108f 	strb.w	r1, [r7, #143]	@ 0x8f
 800de6e:	4413      	add	r3, r2
 800de70:	781a      	ldrb	r2, [r3, #0]
 800de72:	4b6e      	ldr	r3, [pc, #440]	@ (800e02c <LmhpComplianceOnMcpsIndication+0x5f0>)
 800de74:	68d9      	ldr	r1, [r3, #12]
 800de76:	4b6d      	ldr	r3, [pc, #436]	@ (800e02c <LmhpComplianceOnMcpsIndication+0x5f0>)
 800de78:	7a9b      	ldrb	r3, [r3, #10]
 800de7a:	1c58      	adds	r0, r3, #1
 800de7c:	b2c4      	uxtb	r4, r0
 800de7e:	486b      	ldr	r0, [pc, #428]	@ (800e02c <LmhpComplianceOnMcpsIndication+0x5f0>)
 800de80:	7284      	strb	r4, [r0, #10]
 800de82:	440b      	add	r3, r1
 800de84:	3201      	adds	r2, #1
 800de86:	b2d2      	uxtb	r2, r2
 800de88:	701a      	strb	r2, [r3, #0]
             i++ )
 800de8a:	f897 308e 	ldrb.w	r3, [r7, #142]	@ 0x8e
 800de8e:	3301      	adds	r3, #1
 800de90:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
        for( uint8_t i = 1; i < MIN( mcpsIndication->BufferSize, ComplianceTestState.DataBufferMaxSize );
 800de94:	4b65      	ldr	r3, [pc, #404]	@ (800e02c <LmhpComplianceOnMcpsIndication+0x5f0>)
 800de96:	7a5a      	ldrb	r2, [r3, #9]
 800de98:	687b      	ldr	r3, [r7, #4]
 800de9a:	7b1b      	ldrb	r3, [r3, #12]
 800de9c:	4293      	cmp	r3, r2
 800de9e:	bf28      	it	cs
 800dea0:	4613      	movcs	r3, r2
 800dea2:	b2db      	uxtb	r3, r3
 800dea4:	f897 208e 	ldrb.w	r2, [r7, #142]	@ 0x8e
 800dea8:	429a      	cmp	r2, r3
 800deaa:	d3d9      	bcc.n	800de60 <LmhpComplianceOnMcpsIndication+0x424>
        }
        break;
 800deac:	e176      	b.n	800e19c <LmhpComplianceOnMcpsIndication+0x760>
    }
    case COMPLIANCE_RX_APP_CNT_REQ:
    {
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_RX_APP_CNT_ANS;
 800deae:	4b5f      	ldr	r3, [pc, #380]	@ (800e02c <LmhpComplianceOnMcpsIndication+0x5f0>)
 800deb0:	68da      	ldr	r2, [r3, #12]
 800deb2:	4b5e      	ldr	r3, [pc, #376]	@ (800e02c <LmhpComplianceOnMcpsIndication+0x5f0>)
 800deb4:	7a9b      	ldrb	r3, [r3, #10]
 800deb6:	1c59      	adds	r1, r3, #1
 800deb8:	b2c8      	uxtb	r0, r1
 800deba:	495c      	ldr	r1, [pc, #368]	@ (800e02c <LmhpComplianceOnMcpsIndication+0x5f0>)
 800debc:	7288      	strb	r0, [r1, #10]
 800debe:	4413      	add	r3, r2
 800dec0:	2209      	movs	r2, #9
 800dec2:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceTestState.RxAppCnt;
 800dec4:	4b59      	ldr	r3, [pc, #356]	@ (800e02c <LmhpComplianceOnMcpsIndication+0x5f0>)
 800dec6:	8a18      	ldrh	r0, [r3, #16]
 800dec8:	4b58      	ldr	r3, [pc, #352]	@ (800e02c <LmhpComplianceOnMcpsIndication+0x5f0>)
 800deca:	68da      	ldr	r2, [r3, #12]
 800decc:	4b57      	ldr	r3, [pc, #348]	@ (800e02c <LmhpComplianceOnMcpsIndication+0x5f0>)
 800dece:	7a9b      	ldrb	r3, [r3, #10]
 800ded0:	1c59      	adds	r1, r3, #1
 800ded2:	b2cc      	uxtb	r4, r1
 800ded4:	4955      	ldr	r1, [pc, #340]	@ (800e02c <LmhpComplianceOnMcpsIndication+0x5f0>)
 800ded6:	728c      	strb	r4, [r1, #10]
 800ded8:	4413      	add	r3, r2
 800deda:	b2c2      	uxtb	r2, r0
 800dedc:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceTestState.RxAppCnt >> 8;
 800dede:	4b53      	ldr	r3, [pc, #332]	@ (800e02c <LmhpComplianceOnMcpsIndication+0x5f0>)
 800dee0:	8a1b      	ldrh	r3, [r3, #16]
 800dee2:	0a1b      	lsrs	r3, r3, #8
 800dee4:	b298      	uxth	r0, r3
 800dee6:	4b51      	ldr	r3, [pc, #324]	@ (800e02c <LmhpComplianceOnMcpsIndication+0x5f0>)
 800dee8:	68da      	ldr	r2, [r3, #12]
 800deea:	4b50      	ldr	r3, [pc, #320]	@ (800e02c <LmhpComplianceOnMcpsIndication+0x5f0>)
 800deec:	7a9b      	ldrb	r3, [r3, #10]
 800deee:	1c59      	adds	r1, r3, #1
 800def0:	b2cc      	uxtb	r4, r1
 800def2:	494e      	ldr	r1, [pc, #312]	@ (800e02c <LmhpComplianceOnMcpsIndication+0x5f0>)
 800def4:	728c      	strb	r4, [r1, #10]
 800def6:	4413      	add	r3, r2
 800def8:	b2c2      	uxtb	r2, r0
 800defa:	701a      	strb	r2, [r3, #0]
        break;
 800defc:	e14e      	b.n	800e19c <LmhpComplianceOnMcpsIndication+0x760>
    }
    case COMPLIANCE_RX_APP_CNT_RESET_REQ:
    {
        ComplianceTestState.RxAppCnt = 0;
 800defe:	4b4b      	ldr	r3, [pc, #300]	@ (800e02c <LmhpComplianceOnMcpsIndication+0x5f0>)
 800df00:	2200      	movs	r2, #0
 800df02:	821a      	strh	r2, [r3, #16]
        break;
 800df04:	e14a      	b.n	800e19c <LmhpComplianceOnMcpsIndication+0x760>
    }
    case COMPLIANCE_LINK_CHECK_REQ:
    {
        MlmeReq_t mlmeReq;
        mlmeReq.Type = MLME_LINK_CHECK;
 800df06:	2304      	movs	r3, #4
 800df08:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54

        LoRaMacMlmeRequest( &mlmeReq );
 800df0c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800df10:	4618      	mov	r0, r3
 800df12:	f004 fca7 	bl	8012864 <LoRaMacMlmeRequest>
        break;
 800df16:	e141      	b.n	800e19c <LmhpComplianceOnMcpsIndication+0x760>
    }
    case COMPLIANCE_DEVICE_TIME_REQ:
    {
        CompliancePackage.OnDeviceTimeRequest( );
 800df18:	4b45      	ldr	r3, [pc, #276]	@ (800e030 <LmhpComplianceOnMcpsIndication+0x5f4>)
 800df1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800df1c:	4798      	blx	r3
        break;
 800df1e:	e13d      	b.n	800e19c <LmhpComplianceOnMcpsIndication+0x760>
    }
    case COMPLIANCE_PING_SLOT_INFO_REQ:
    {
        ComplianceTestState.ClassBStatus.PingSlotPeriodicity = mcpsIndication->Buffer[cmdIndex++];
 800df20:	687b      	ldr	r3, [r7, #4]
 800df22:	689a      	ldr	r2, [r3, #8]
 800df24:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800df28:	1c59      	adds	r1, r3, #1
 800df2a:	f887 108f 	strb.w	r1, [r7, #143]	@ 0x8f
 800df2e:	4413      	add	r3, r2
 800df30:	781a      	ldrb	r2, [r3, #0]
 800df32:	4b3e      	ldr	r3, [pc, #248]	@ (800e02c <LmhpComplianceOnMcpsIndication+0x5f0>)
 800df34:	755a      	strb	r2, [r3, #21]
        if( ComplianceParams->OnPingSlotPeriodicityChanged != NULL )
 800df36:	4b3c      	ldr	r3, [pc, #240]	@ (800e028 <LmhpComplianceOnMcpsIndication+0x5ec>)
 800df38:	681b      	ldr	r3, [r3, #0]
 800df3a:	68db      	ldr	r3, [r3, #12]
 800df3c:	2b00      	cmp	r3, #0
 800df3e:	f000 812a 	beq.w	800e196 <LmhpComplianceOnMcpsIndication+0x75a>
        {
        ComplianceParams->OnPingSlotPeriodicityChanged( ComplianceTestState.ClassBStatus.PingSlotPeriodicity );
 800df42:	4b39      	ldr	r3, [pc, #228]	@ (800e028 <LmhpComplianceOnMcpsIndication+0x5ec>)
 800df44:	681b      	ldr	r3, [r3, #0]
 800df46:	68db      	ldr	r3, [r3, #12]
 800df48:	4a38      	ldr	r2, [pc, #224]	@ (800e02c <LmhpComplianceOnMcpsIndication+0x5f0>)
 800df4a:	7d52      	ldrb	r2, [r2, #21]
 800df4c:	4610      	mov	r0, r2
 800df4e:	4798      	blx	r3
        }
        break;
 800df50:	e121      	b.n	800e196 <LmhpComplianceOnMcpsIndication+0x75a>
#endif
    /* ST_WORKAROUND_END */
    case COMPLIANCE_TX_CW_REQ:
    {
        MlmeReq_t mlmeReq;
        if( mcpsIndication->BufferSize == 7 )
 800df52:	687b      	ldr	r3, [r7, #4]
 800df54:	7b1b      	ldrb	r3, [r3, #12]
 800df56:	2b07      	cmp	r3, #7
 800df58:	f040 811f 	bne.w	800e19a <LmhpComplianceOnMcpsIndication+0x75e>
        {
            mlmeReq.Type = MLME_TXCW;
 800df5c:	2305      	movs	r3, #5
 800df5e:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
            mlmeReq.Req.TxCw.Timeout =
                ( uint16_t )( mcpsIndication->Buffer[cmdIndex] | ( mcpsIndication->Buffer[cmdIndex + 1] << 8 ) );
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	689a      	ldr	r2, [r3, #8]
 800df66:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800df6a:	4413      	add	r3, r2
 800df6c:	781b      	ldrb	r3, [r3, #0]
 800df6e:	b21a      	sxth	r2, r3
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	6899      	ldr	r1, [r3, #8]
 800df74:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800df78:	3301      	adds	r3, #1
 800df7a:	440b      	add	r3, r1
 800df7c:	781b      	ldrb	r3, [r3, #0]
 800df7e:	021b      	lsls	r3, r3, #8
 800df80:	b21b      	sxth	r3, r3
 800df82:	4313      	orrs	r3, r2
 800df84:	b21b      	sxth	r3, r3
 800df86:	b29b      	uxth	r3, r3
            mlmeReq.Req.TxCw.Timeout =
 800df88:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
            cmdIndex += 2;
 800df8c:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800df90:	3302      	adds	r3, #2
 800df92:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
            mlmeReq.Req.TxCw.Frequency =
                ( uint32_t )( mcpsIndication->Buffer[cmdIndex] | ( mcpsIndication->Buffer[cmdIndex + 1] << 8 ) |
 800df96:	687b      	ldr	r3, [r7, #4]
 800df98:	689a      	ldr	r2, [r3, #8]
 800df9a:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800df9e:	4413      	add	r3, r2
 800dfa0:	781b      	ldrb	r3, [r3, #0]
 800dfa2:	4619      	mov	r1, r3
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	689a      	ldr	r2, [r3, #8]
 800dfa8:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800dfac:	3301      	adds	r3, #1
 800dfae:	4413      	add	r3, r2
 800dfb0:	781b      	ldrb	r3, [r3, #0]
 800dfb2:	021b      	lsls	r3, r3, #8
 800dfb4:	ea41 0203 	orr.w	r2, r1, r3
                               ( mcpsIndication->Buffer[cmdIndex + 2] << 16 ) ) *
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	6899      	ldr	r1, [r3, #8]
 800dfbc:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800dfc0:	3302      	adds	r3, #2
 800dfc2:	440b      	add	r3, r1
 800dfc4:	781b      	ldrb	r3, [r3, #0]
 800dfc6:	041b      	lsls	r3, r3, #16
                ( uint32_t )( mcpsIndication->Buffer[cmdIndex] | ( mcpsIndication->Buffer[cmdIndex + 1] << 8 ) |
 800dfc8:	4313      	orrs	r3, r2
 800dfca:	461a      	mov	r2, r3
                               ( mcpsIndication->Buffer[cmdIndex + 2] << 16 ) ) *
 800dfcc:	2364      	movs	r3, #100	@ 0x64
 800dfce:	fb02 f303 	mul.w	r3, r2, r3
            mlmeReq.Req.TxCw.Frequency =
 800dfd2:	64bb      	str	r3, [r7, #72]	@ 0x48
                100;
            cmdIndex += 3;
 800dfd4:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800dfd8:	3303      	adds	r3, #3
 800dfda:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
            mlmeReq.Req.TxCw.Power = mcpsIndication->Buffer[cmdIndex++];
 800dfde:	687b      	ldr	r3, [r7, #4]
 800dfe0:	689a      	ldr	r2, [r3, #8]
 800dfe2:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800dfe6:	1c59      	adds	r1, r3, #1
 800dfe8:	f887 108f 	strb.w	r1, [r7, #143]	@ 0x8f
 800dfec:	4413      	add	r3, r2
 800dfee:	781b      	ldrb	r3, [r3, #0]
 800dff0:	b25b      	sxtb	r3, r3
 800dff2:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c

            LoRaMacMlmeRequest( &mlmeReq );
 800dff6:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800dffa:	4618      	mov	r0, r3
 800dffc:	f004 fc32 	bl	8012864 <LoRaMacMlmeRequest>
        }
        break;
 800e000:	e0cb      	b.n	800e19a <LmhpComplianceOnMcpsIndication+0x75e>
    }
    case COMPLIANCE_DUT_FPORT_224_DISABLE_REQ:
    {
        mibReq.Type = MIB_IS_CERT_FPORT_ON;
 800e002:	2339      	movs	r3, #57	@ 0x39
 800e004:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
        mibReq.Param.IsCertPortOn = false;
 800e008:	2300      	movs	r3, #0
 800e00a:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
        LoRaMacMibSetRequestConfirm( &mibReq );
 800e00e:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800e012:	4618      	mov	r0, r3
 800e014:	f004 f8b6 	bl	8012184 <LoRaMacMibSetRequestConfirm>

        ComplianceTestState.IsResetCmdPending = true;
 800e018:	4b04      	ldr	r3, [pc, #16]	@ (800e02c <LmhpComplianceOnMcpsIndication+0x5f0>)
 800e01a:	2201      	movs	r2, #1
 800e01c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        break;
 800e020:	e0bc      	b.n	800e19c <LmhpComplianceOnMcpsIndication+0x760>
 800e022:	bf00      	nop
 800e024:	0801f170 	.word	0x0801f170
 800e028:	200008b4 	.word	0x200008b4
 800e02c:	2000087c 	.word	0x2000087c
 800e030:	200000e8 	.word	0x200000e8
    {
        Version_t           lrwanVersion;
        Version_t           lrwanRpVersion;
        MibRequestConfirm_t mibReq;

        mibReq.Type = MIB_LORAWAN_VERSION;
 800e034:	232a      	movs	r3, #42	@ 0x2a
 800e036:	733b      	strb	r3, [r7, #12]

        LoRaMacMibGetRequestConfirm( &mibReq );
 800e038:	f107 030c 	add.w	r3, r7, #12
 800e03c:	4618      	mov	r0, r3
 800e03e:	f003 fefb 	bl	8011e38 <LoRaMacMibGetRequestConfirm>
        lrwanVersion   = mibReq.Param.LrWanVersion.LoRaWan;
 800e042:	693b      	ldr	r3, [r7, #16]
 800e044:	63fb      	str	r3, [r7, #60]	@ 0x3c
        lrwanRpVersion = mibReq.Param.LrWanVersion.LoRaWanRegion;
 800e046:	697b      	ldr	r3, [r7, #20]
 800e048:	63bb      	str	r3, [r7, #56]	@ 0x38

        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_DUT_VERSION_ANS;
 800e04a:	4b62      	ldr	r3, [pc, #392]	@ (800e1d4 <LmhpComplianceOnMcpsIndication+0x798>)
 800e04c:	68da      	ldr	r2, [r3, #12]
 800e04e:	4b61      	ldr	r3, [pc, #388]	@ (800e1d4 <LmhpComplianceOnMcpsIndication+0x798>)
 800e050:	7a9b      	ldrb	r3, [r3, #10]
 800e052:	1c59      	adds	r1, r3, #1
 800e054:	b2c8      	uxtb	r0, r1
 800e056:	495f      	ldr	r1, [pc, #380]	@ (800e1d4 <LmhpComplianceOnMcpsIndication+0x798>)
 800e058:	7288      	strb	r0, [r1, #10]
 800e05a:	4413      	add	r3, r2
 800e05c:	227f      	movs	r2, #127	@ 0x7f
 800e05e:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Major;
 800e060:	4b5d      	ldr	r3, [pc, #372]	@ (800e1d8 <LmhpComplianceOnMcpsIndication+0x79c>)
 800e062:	681a      	ldr	r2, [r3, #0]
 800e064:	4b5b      	ldr	r3, [pc, #364]	@ (800e1d4 <LmhpComplianceOnMcpsIndication+0x798>)
 800e066:	68d9      	ldr	r1, [r3, #12]
 800e068:	4b5a      	ldr	r3, [pc, #360]	@ (800e1d4 <LmhpComplianceOnMcpsIndication+0x798>)
 800e06a:	7a9b      	ldrb	r3, [r3, #10]
 800e06c:	1c58      	adds	r0, r3, #1
 800e06e:	b2c4      	uxtb	r4, r0
 800e070:	4858      	ldr	r0, [pc, #352]	@ (800e1d4 <LmhpComplianceOnMcpsIndication+0x798>)
 800e072:	7284      	strb	r4, [r0, #10]
 800e074:	440b      	add	r3, r1
 800e076:	78d2      	ldrb	r2, [r2, #3]
 800e078:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Minor;
 800e07a:	4b57      	ldr	r3, [pc, #348]	@ (800e1d8 <LmhpComplianceOnMcpsIndication+0x79c>)
 800e07c:	681a      	ldr	r2, [r3, #0]
 800e07e:	4b55      	ldr	r3, [pc, #340]	@ (800e1d4 <LmhpComplianceOnMcpsIndication+0x798>)
 800e080:	68d9      	ldr	r1, [r3, #12]
 800e082:	4b54      	ldr	r3, [pc, #336]	@ (800e1d4 <LmhpComplianceOnMcpsIndication+0x798>)
 800e084:	7a9b      	ldrb	r3, [r3, #10]
 800e086:	1c58      	adds	r0, r3, #1
 800e088:	b2c4      	uxtb	r4, r0
 800e08a:	4852      	ldr	r0, [pc, #328]	@ (800e1d4 <LmhpComplianceOnMcpsIndication+0x798>)
 800e08c:	7284      	strb	r4, [r0, #10]
 800e08e:	440b      	add	r3, r1
 800e090:	7892      	ldrb	r2, [r2, #2]
 800e092:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Patch;
 800e094:	4b50      	ldr	r3, [pc, #320]	@ (800e1d8 <LmhpComplianceOnMcpsIndication+0x79c>)
 800e096:	681a      	ldr	r2, [r3, #0]
 800e098:	4b4e      	ldr	r3, [pc, #312]	@ (800e1d4 <LmhpComplianceOnMcpsIndication+0x798>)
 800e09a:	68d9      	ldr	r1, [r3, #12]
 800e09c:	4b4d      	ldr	r3, [pc, #308]	@ (800e1d4 <LmhpComplianceOnMcpsIndication+0x798>)
 800e09e:	7a9b      	ldrb	r3, [r3, #10]
 800e0a0:	1c58      	adds	r0, r3, #1
 800e0a2:	b2c4      	uxtb	r4, r0
 800e0a4:	484b      	ldr	r0, [pc, #300]	@ (800e1d4 <LmhpComplianceOnMcpsIndication+0x798>)
 800e0a6:	7284      	strb	r4, [r0, #10]
 800e0a8:	440b      	add	r3, r1
 800e0aa:	7852      	ldrb	r2, [r2, #1]
 800e0ac:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Revision;
 800e0ae:	4b4a      	ldr	r3, [pc, #296]	@ (800e1d8 <LmhpComplianceOnMcpsIndication+0x79c>)
 800e0b0:	681a      	ldr	r2, [r3, #0]
 800e0b2:	4b48      	ldr	r3, [pc, #288]	@ (800e1d4 <LmhpComplianceOnMcpsIndication+0x798>)
 800e0b4:	68d9      	ldr	r1, [r3, #12]
 800e0b6:	4b47      	ldr	r3, [pc, #284]	@ (800e1d4 <LmhpComplianceOnMcpsIndication+0x798>)
 800e0b8:	7a9b      	ldrb	r3, [r3, #10]
 800e0ba:	1c58      	adds	r0, r3, #1
 800e0bc:	b2c4      	uxtb	r4, r0
 800e0be:	4845      	ldr	r0, [pc, #276]	@ (800e1d4 <LmhpComplianceOnMcpsIndication+0x798>)
 800e0c0:	7284      	strb	r4, [r0, #10]
 800e0c2:	440b      	add	r3, r1
 800e0c4:	7812      	ldrb	r2, [r2, #0]
 800e0c6:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Major;
 800e0c8:	4b42      	ldr	r3, [pc, #264]	@ (800e1d4 <LmhpComplianceOnMcpsIndication+0x798>)
 800e0ca:	68da      	ldr	r2, [r3, #12]
 800e0cc:	4b41      	ldr	r3, [pc, #260]	@ (800e1d4 <LmhpComplianceOnMcpsIndication+0x798>)
 800e0ce:	7a9b      	ldrb	r3, [r3, #10]
 800e0d0:	1c59      	adds	r1, r3, #1
 800e0d2:	b2c8      	uxtb	r0, r1
 800e0d4:	493f      	ldr	r1, [pc, #252]	@ (800e1d4 <LmhpComplianceOnMcpsIndication+0x798>)
 800e0d6:	7288      	strb	r0, [r1, #10]
 800e0d8:	4413      	add	r3, r2
 800e0da:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 800e0de:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Minor;
 800e0e0:	4b3c      	ldr	r3, [pc, #240]	@ (800e1d4 <LmhpComplianceOnMcpsIndication+0x798>)
 800e0e2:	68da      	ldr	r2, [r3, #12]
 800e0e4:	4b3b      	ldr	r3, [pc, #236]	@ (800e1d4 <LmhpComplianceOnMcpsIndication+0x798>)
 800e0e6:	7a9b      	ldrb	r3, [r3, #10]
 800e0e8:	1c59      	adds	r1, r3, #1
 800e0ea:	b2c8      	uxtb	r0, r1
 800e0ec:	4939      	ldr	r1, [pc, #228]	@ (800e1d4 <LmhpComplianceOnMcpsIndication+0x798>)
 800e0ee:	7288      	strb	r0, [r1, #10]
 800e0f0:	4413      	add	r3, r2
 800e0f2:	f897 203e 	ldrb.w	r2, [r7, #62]	@ 0x3e
 800e0f6:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Patch;
 800e0f8:	4b36      	ldr	r3, [pc, #216]	@ (800e1d4 <LmhpComplianceOnMcpsIndication+0x798>)
 800e0fa:	68da      	ldr	r2, [r3, #12]
 800e0fc:	4b35      	ldr	r3, [pc, #212]	@ (800e1d4 <LmhpComplianceOnMcpsIndication+0x798>)
 800e0fe:	7a9b      	ldrb	r3, [r3, #10]
 800e100:	1c59      	adds	r1, r3, #1
 800e102:	b2c8      	uxtb	r0, r1
 800e104:	4933      	ldr	r1, [pc, #204]	@ (800e1d4 <LmhpComplianceOnMcpsIndication+0x798>)
 800e106:	7288      	strb	r0, [r1, #10]
 800e108:	4413      	add	r3, r2
 800e10a:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 800e10e:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Revision;
 800e110:	4b30      	ldr	r3, [pc, #192]	@ (800e1d4 <LmhpComplianceOnMcpsIndication+0x798>)
 800e112:	68da      	ldr	r2, [r3, #12]
 800e114:	4b2f      	ldr	r3, [pc, #188]	@ (800e1d4 <LmhpComplianceOnMcpsIndication+0x798>)
 800e116:	7a9b      	ldrb	r3, [r3, #10]
 800e118:	1c59      	adds	r1, r3, #1
 800e11a:	b2c8      	uxtb	r0, r1
 800e11c:	492d      	ldr	r1, [pc, #180]	@ (800e1d4 <LmhpComplianceOnMcpsIndication+0x798>)
 800e11e:	7288      	strb	r0, [r1, #10]
 800e120:	4413      	add	r3, r2
 800e122:	f897 203c 	ldrb.w	r2, [r7, #60]	@ 0x3c
 800e126:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Major;
 800e128:	4b2a      	ldr	r3, [pc, #168]	@ (800e1d4 <LmhpComplianceOnMcpsIndication+0x798>)
 800e12a:	68da      	ldr	r2, [r3, #12]
 800e12c:	4b29      	ldr	r3, [pc, #164]	@ (800e1d4 <LmhpComplianceOnMcpsIndication+0x798>)
 800e12e:	7a9b      	ldrb	r3, [r3, #10]
 800e130:	1c59      	adds	r1, r3, #1
 800e132:	b2c8      	uxtb	r0, r1
 800e134:	4927      	ldr	r1, [pc, #156]	@ (800e1d4 <LmhpComplianceOnMcpsIndication+0x798>)
 800e136:	7288      	strb	r0, [r1, #10]
 800e138:	4413      	add	r3, r2
 800e13a:	f897 203b 	ldrb.w	r2, [r7, #59]	@ 0x3b
 800e13e:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Minor;
 800e140:	4b24      	ldr	r3, [pc, #144]	@ (800e1d4 <LmhpComplianceOnMcpsIndication+0x798>)
 800e142:	68da      	ldr	r2, [r3, #12]
 800e144:	4b23      	ldr	r3, [pc, #140]	@ (800e1d4 <LmhpComplianceOnMcpsIndication+0x798>)
 800e146:	7a9b      	ldrb	r3, [r3, #10]
 800e148:	1c59      	adds	r1, r3, #1
 800e14a:	b2c8      	uxtb	r0, r1
 800e14c:	4921      	ldr	r1, [pc, #132]	@ (800e1d4 <LmhpComplianceOnMcpsIndication+0x798>)
 800e14e:	7288      	strb	r0, [r1, #10]
 800e150:	4413      	add	r3, r2
 800e152:	f897 203a 	ldrb.w	r2, [r7, #58]	@ 0x3a
 800e156:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Patch;
 800e158:	4b1e      	ldr	r3, [pc, #120]	@ (800e1d4 <LmhpComplianceOnMcpsIndication+0x798>)
 800e15a:	68da      	ldr	r2, [r3, #12]
 800e15c:	4b1d      	ldr	r3, [pc, #116]	@ (800e1d4 <LmhpComplianceOnMcpsIndication+0x798>)
 800e15e:	7a9b      	ldrb	r3, [r3, #10]
 800e160:	1c59      	adds	r1, r3, #1
 800e162:	b2c8      	uxtb	r0, r1
 800e164:	491b      	ldr	r1, [pc, #108]	@ (800e1d4 <LmhpComplianceOnMcpsIndication+0x798>)
 800e166:	7288      	strb	r0, [r1, #10]
 800e168:	4413      	add	r3, r2
 800e16a:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 800e16e:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Revision;
 800e170:	4b18      	ldr	r3, [pc, #96]	@ (800e1d4 <LmhpComplianceOnMcpsIndication+0x798>)
 800e172:	68da      	ldr	r2, [r3, #12]
 800e174:	4b17      	ldr	r3, [pc, #92]	@ (800e1d4 <LmhpComplianceOnMcpsIndication+0x798>)
 800e176:	7a9b      	ldrb	r3, [r3, #10]
 800e178:	1c59      	adds	r1, r3, #1
 800e17a:	b2c8      	uxtb	r0, r1
 800e17c:	4915      	ldr	r1, [pc, #84]	@ (800e1d4 <LmhpComplianceOnMcpsIndication+0x798>)
 800e17e:	7288      	strb	r0, [r1, #10]
 800e180:	4413      	add	r3, r2
 800e182:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800e186:	701a      	strb	r2, [r3, #0]
        break;
 800e188:	e008      	b.n	800e19c <LmhpComplianceOnMcpsIndication+0x760>
    }
    default:
    {
        break;
 800e18a:	bf00      	nop
 800e18c:	e006      	b.n	800e19c <LmhpComplianceOnMcpsIndication+0x760>
        break;
 800e18e:	bf00      	nop
 800e190:	e004      	b.n	800e19c <LmhpComplianceOnMcpsIndication+0x760>
        break;
 800e192:	bf00      	nop
 800e194:	e002      	b.n	800e19c <LmhpComplianceOnMcpsIndication+0x760>
        break;
 800e196:	bf00      	nop
 800e198:	e000      	b.n	800e19c <LmhpComplianceOnMcpsIndication+0x760>
        break;
 800e19a:	bf00      	nop
    }
    }

    if( ComplianceTestState.DataBufferSize != 0 )
 800e19c:	4b0d      	ldr	r3, [pc, #52]	@ (800e1d4 <LmhpComplianceOnMcpsIndication+0x798>)
 800e19e:	7a9b      	ldrb	r3, [r3, #10]
 800e1a0:	2b00      	cmp	r3, #0
 800e1a2:	d008      	beq.n	800e1b6 <LmhpComplianceOnMcpsIndication+0x77a>
    {
        TimerSetValue( &ProcessTimer, 1000 );
 800e1a4:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800e1a8:	480c      	ldr	r0, [pc, #48]	@ (800e1dc <LmhpComplianceOnMcpsIndication+0x7a0>)
 800e1aa:	f00d fafd 	bl	801b7a8 <UTIL_TIMER_SetPeriod>
        TimerStart(&ProcessTimer);
 800e1ae:	480b      	ldr	r0, [pc, #44]	@ (800e1dc <LmhpComplianceOnMcpsIndication+0x7a0>)
 800e1b0:	f00d fa1c 	bl	801b5ec <UTIL_TIMER_Start>
 800e1b4:	e00b      	b.n	800e1ce <LmhpComplianceOnMcpsIndication+0x792>
    }
    else
    {
        // Abort any pending Tx as a new command has been processed
        TimerStop(&ProcessTimer);
 800e1b6:	4809      	ldr	r0, [pc, #36]	@ (800e1dc <LmhpComplianceOnMcpsIndication+0x7a0>)
 800e1b8:	f00d fa86 	bl	801b6c8 <UTIL_TIMER_Stop>
        ComplianceTestState.IsTxPending = false;
 800e1bc:	4b05      	ldr	r3, [pc, #20]	@ (800e1d4 <LmhpComplianceOnMcpsIndication+0x798>)
 800e1be:	2200      	movs	r2, #0
 800e1c0:	705a      	strb	r2, [r3, #1]
 800e1c2:	e004      	b.n	800e1ce <LmhpComplianceOnMcpsIndication+0x792>
        return;
 800e1c4:	bf00      	nop
 800e1c6:	e002      	b.n	800e1ce <LmhpComplianceOnMcpsIndication+0x792>
        return;
 800e1c8:	bf00      	nop
 800e1ca:	e000      	b.n	800e1ce <LmhpComplianceOnMcpsIndication+0x792>
        return;
 800e1cc:	bf00      	nop
    }
}
 800e1ce:	3790      	adds	r7, #144	@ 0x90
 800e1d0:	46bd      	mov	sp, r7
 800e1d2:	bdb0      	pop	{r4, r5, r7, pc}
 800e1d4:	2000087c 	.word	0x2000087c
 800e1d8:	200008b4 	.word	0x200008b4
 800e1dc:	200008b8 	.word	0x200008b8

0800e1e0 <LmhpComplianceOnMlmeConfirm>:

static void LmhpComplianceOnMlmeConfirm( MlmeConfirm_t *mlmeConfirm )
{
 800e1e0:	b480      	push	{r7}
 800e1e2:	b083      	sub	sp, #12
 800e1e4:	af00      	add	r7, sp, #0
 800e1e6:	6078      	str	r0, [r7, #4]
        break;
    }
#endif
    /* ST_WORKAROUND_END */
    default:
        break;
 800e1e8:	bf00      	nop
    }
}
 800e1ea:	bf00      	nop
 800e1ec:	370c      	adds	r7, #12
 800e1ee:	46bd      	mov	sp, r7
 800e1f0:	bc80      	pop	{r7}
 800e1f2:	4770      	bx	lr

0800e1f4 <LmhpComplianceOnMlmeIndication>:

static void LmhpComplianceOnMlmeIndication( MlmeIndication_t* mlmeIndication )
{
 800e1f4:	b480      	push	{r7}
 800e1f6:	b083      	sub	sp, #12
 800e1f8:	af00      	add	r7, sp, #0
 800e1fa:	6078      	str	r0, [r7, #4]
    if( ComplianceTestState.Initialized == false )
 800e1fc:	4b05      	ldr	r3, [pc, #20]	@ (800e214 <LmhpComplianceOnMlmeIndication+0x20>)
 800e1fe:	781b      	ldrb	r3, [r3, #0]
 800e200:	f083 0301 	eor.w	r3, r3, #1
 800e204:	b2db      	uxtb	r3, r3
 800e206:	2b00      	cmp	r3, #0
    {
        return;
 800e208:	bf00      	nop
#endif
    /* ST_WORKAROUND_END */
    default:
        break;
    }
}
 800e20a:	370c      	adds	r7, #12
 800e20c:	46bd      	mov	sp, r7
 800e20e:	bc80      	pop	{r7}
 800e210:	4770      	bx	lr
 800e212:	bf00      	nop
 800e214:	2000087c 	.word	0x2000087c

0800e218 <OnProcessTimer>:
}
#endif
/* ST_WORKAROUND_END */

static void OnProcessTimer( void *context )
{
 800e218:	b580      	push	{r7, lr}
 800e21a:	b082      	sub	sp, #8
 800e21c:	af00      	add	r7, sp, #0
 800e21e:	6078      	str	r0, [r7, #4]
    ComplianceTestState.IsTxPending = true;
 800e220:	4b04      	ldr	r3, [pc, #16]	@ (800e234 <OnProcessTimer+0x1c>)
 800e222:	2201      	movs	r2, #1
 800e224:	705a      	strb	r2, [r3, #1]
    CompliancePackage.OnPackageProcessEvent();
 800e226:	4b04      	ldr	r3, [pc, #16]	@ (800e238 <OnProcessTimer+0x20>)
 800e228:	695b      	ldr	r3, [r3, #20]
 800e22a:	4798      	blx	r3
}
 800e22c:	bf00      	nop
 800e22e:	3708      	adds	r7, #8
 800e230:	46bd      	mov	sp, r7
 800e232:	bd80      	pop	{r7, pc}
 800e234:	2000087c 	.word	0x2000087c
 800e238:	200000e8 	.word	0x200000e8

0800e23c <OnRadioTxDone>:
    int16_t Rssi;
    int8_t Snr;
}RxDoneParams;

static void OnRadioTxDone( void )
{
 800e23c:	b590      	push	{r4, r7, lr}
 800e23e:	b083      	sub	sp, #12
 800e240:	af00      	add	r7, sp, #0
    TxDoneParams.CurTime = TimerGetCurrentTime( );
 800e242:	f00d fb5b 	bl	801b8fc <UTIL_TIMER_GetCurrentTime>
 800e246:	4603      	mov	r3, r0
 800e248:	4a16      	ldr	r2, [pc, #88]	@ (800e2a4 <OnRadioTxDone+0x68>)
 800e24a:	6013      	str	r3, [r2, #0]
    MacCtx.LastTxSysTime = SysTimeGet( );
 800e24c:	4c16      	ldr	r4, [pc, #88]	@ (800e2a8 <OnRadioTxDone+0x6c>)
 800e24e:	463b      	mov	r3, r7
 800e250:	4618      	mov	r0, r3
 800e252:	f00c fcd3 	bl	801abfc <SysTimeGet>
 800e256:	f504 734e 	add.w	r3, r4, #824	@ 0x338
 800e25a:	463a      	mov	r2, r7
 800e25c:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e260:	e883 0003 	stmia.w	r3, {r0, r1}

    LoRaMacRadioEvents.Events.TxDone = 1;
 800e264:	4a11      	ldr	r2, [pc, #68]	@ (800e2ac <OnRadioTxDone+0x70>)
 800e266:	7813      	ldrb	r3, [r2, #0]
 800e268:	f043 0320 	orr.w	r3, r3, #32
 800e26c:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800e26e:	4b0e      	ldr	r3, [pc, #56]	@ (800e2a8 <OnRadioTxDone+0x6c>)
 800e270:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800e274:	2b00      	cmp	r3, #0
 800e276:	d00a      	beq.n	800e28e <OnRadioTxDone+0x52>
 800e278:	4b0b      	ldr	r3, [pc, #44]	@ (800e2a8 <OnRadioTxDone+0x6c>)
 800e27a:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800e27e:	691b      	ldr	r3, [r3, #16]
 800e280:	2b00      	cmp	r3, #0
 800e282:	d004      	beq.n	800e28e <OnRadioTxDone+0x52>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800e284:	4b08      	ldr	r3, [pc, #32]	@ (800e2a8 <OnRadioTxDone+0x6c>)
 800e286:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800e28a:	691b      	ldr	r3, [r3, #16]
 800e28c:	4798      	blx	r3
    }
    MW_LOG(TS_ON, VLEVEL_M, "MAC txDone\r\n" );
 800e28e:	4b08      	ldr	r3, [pc, #32]	@ (800e2b0 <OnRadioTxDone+0x74>)
 800e290:	2201      	movs	r2, #1
 800e292:	2100      	movs	r1, #0
 800e294:	2002      	movs	r0, #2
 800e296:	f00d fc21 	bl	801badc <UTIL_ADV_TRACE_COND_FSend>
}
 800e29a:	bf00      	nop
 800e29c:	370c      	adds	r7, #12
 800e29e:	46bd      	mov	sp, r7
 800e2a0:	bd90      	pop	{r4, r7, pc}
 800e2a2:	bf00      	nop
 800e2a4:	2000197c 	.word	0x2000197c
 800e2a8:	200008d0 	.word	0x200008d0
 800e2ac:	20001978 	.word	0x20001978
 800e2b0:	0801f19c 	.word	0x0801f19c

0800e2b4 <OnRadioRxDone>:

static void OnRadioRxDone( uint8_t *payload, uint16_t size, int16_t rssi, int8_t snr )
{
 800e2b4:	b580      	push	{r7, lr}
 800e2b6:	b084      	sub	sp, #16
 800e2b8:	af00      	add	r7, sp, #0
 800e2ba:	60f8      	str	r0, [r7, #12]
 800e2bc:	4608      	mov	r0, r1
 800e2be:	4611      	mov	r1, r2
 800e2c0:	461a      	mov	r2, r3
 800e2c2:	4603      	mov	r3, r0
 800e2c4:	817b      	strh	r3, [r7, #10]
 800e2c6:	460b      	mov	r3, r1
 800e2c8:	813b      	strh	r3, [r7, #8]
 800e2ca:	4613      	mov	r3, r2
 800e2cc:	71fb      	strb	r3, [r7, #7]
    RxDoneParams.LastRxDone = TimerGetCurrentTime( );
 800e2ce:	f00d fb15 	bl	801b8fc <UTIL_TIMER_GetCurrentTime>
 800e2d2:	4603      	mov	r3, r0
 800e2d4:	4a18      	ldr	r2, [pc, #96]	@ (800e338 <OnRadioRxDone+0x84>)
 800e2d6:	6013      	str	r3, [r2, #0]
    RxDoneParams.Payload = payload;
 800e2d8:	4a17      	ldr	r2, [pc, #92]	@ (800e338 <OnRadioRxDone+0x84>)
 800e2da:	68fb      	ldr	r3, [r7, #12]
 800e2dc:	6053      	str	r3, [r2, #4]
    RxDoneParams.Size = size;
 800e2de:	4a16      	ldr	r2, [pc, #88]	@ (800e338 <OnRadioRxDone+0x84>)
 800e2e0:	897b      	ldrh	r3, [r7, #10]
 800e2e2:	8113      	strh	r3, [r2, #8]
    RxDoneParams.Rssi = rssi;
 800e2e4:	4a14      	ldr	r2, [pc, #80]	@ (800e338 <OnRadioRxDone+0x84>)
 800e2e6:	893b      	ldrh	r3, [r7, #8]
 800e2e8:	8153      	strh	r3, [r2, #10]
    RxDoneParams.Snr = snr;
 800e2ea:	4a13      	ldr	r2, [pc, #76]	@ (800e338 <OnRadioRxDone+0x84>)
 800e2ec:	79fb      	ldrb	r3, [r7, #7]
 800e2ee:	7313      	strb	r3, [r2, #12]

    LoRaMacRadioEvents.Events.RxDone = 1;
 800e2f0:	4a12      	ldr	r2, [pc, #72]	@ (800e33c <OnRadioRxDone+0x88>)
 800e2f2:	7813      	ldrb	r3, [r2, #0]
 800e2f4:	f043 0310 	orr.w	r3, r3, #16
 800e2f8:	7013      	strb	r3, [r2, #0]
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    LoRaMacRadioEvents.Events.RxProcessPending = 1;
 800e2fa:	4a10      	ldr	r2, [pc, #64]	@ (800e33c <OnRadioRxDone+0x88>)
 800e2fc:	7813      	ldrb	r3, [r2, #0]
 800e2fe:	f043 0301 	orr.w	r3, r3, #1
 800e302:	7013      	strb	r3, [r2, #0]
#endif /* LORAMAC_VERSION */

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800e304:	4b0e      	ldr	r3, [pc, #56]	@ (800e340 <OnRadioRxDone+0x8c>)
 800e306:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800e30a:	2b00      	cmp	r3, #0
 800e30c:	d00a      	beq.n	800e324 <OnRadioRxDone+0x70>
 800e30e:	4b0c      	ldr	r3, [pc, #48]	@ (800e340 <OnRadioRxDone+0x8c>)
 800e310:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800e314:	691b      	ldr	r3, [r3, #16]
 800e316:	2b00      	cmp	r3, #0
 800e318:	d004      	beq.n	800e324 <OnRadioRxDone+0x70>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800e31a:	4b09      	ldr	r3, [pc, #36]	@ (800e340 <OnRadioRxDone+0x8c>)
 800e31c:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800e320:	691b      	ldr	r3, [r3, #16]
 800e322:	4798      	blx	r3
    }
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxDone\r\n" );
 800e324:	4b07      	ldr	r3, [pc, #28]	@ (800e344 <OnRadioRxDone+0x90>)
 800e326:	2201      	movs	r2, #1
 800e328:	2100      	movs	r1, #0
 800e32a:	2002      	movs	r0, #2
 800e32c:	f00d fbd6 	bl	801badc <UTIL_ADV_TRACE_COND_FSend>
}
 800e330:	bf00      	nop
 800e332:	3710      	adds	r7, #16
 800e334:	46bd      	mov	sp, r7
 800e336:	bd80      	pop	{r7, pc}
 800e338:	20001980 	.word	0x20001980
 800e33c:	20001978 	.word	0x20001978
 800e340:	200008d0 	.word	0x200008d0
 800e344:	0801f1ac 	.word	0x0801f1ac

0800e348 <OnRadioTxTimeout>:

static void OnRadioTxTimeout( void )
{
 800e348:	b580      	push	{r7, lr}
 800e34a:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.TxTimeout = 1;
 800e34c:	4a0e      	ldr	r2, [pc, #56]	@ (800e388 <OnRadioTxTimeout+0x40>)
 800e34e:	7813      	ldrb	r3, [r2, #0]
 800e350:	f043 0308 	orr.w	r3, r3, #8
 800e354:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800e356:	4b0d      	ldr	r3, [pc, #52]	@ (800e38c <OnRadioTxTimeout+0x44>)
 800e358:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800e35c:	2b00      	cmp	r3, #0
 800e35e:	d00a      	beq.n	800e376 <OnRadioTxTimeout+0x2e>
 800e360:	4b0a      	ldr	r3, [pc, #40]	@ (800e38c <OnRadioTxTimeout+0x44>)
 800e362:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800e366:	691b      	ldr	r3, [r3, #16]
 800e368:	2b00      	cmp	r3, #0
 800e36a:	d004      	beq.n	800e376 <OnRadioTxTimeout+0x2e>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800e36c:	4b07      	ldr	r3, [pc, #28]	@ (800e38c <OnRadioTxTimeout+0x44>)
 800e36e:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800e372:	691b      	ldr	r3, [r3, #16]
 800e374:	4798      	blx	r3
    }
    MW_LOG(TS_ON, VLEVEL_M, "MAC txTimeOut\r\n" );
 800e376:	4b06      	ldr	r3, [pc, #24]	@ (800e390 <OnRadioTxTimeout+0x48>)
 800e378:	2201      	movs	r2, #1
 800e37a:	2100      	movs	r1, #0
 800e37c:	2002      	movs	r0, #2
 800e37e:	f00d fbad 	bl	801badc <UTIL_ADV_TRACE_COND_FSend>
}
 800e382:	bf00      	nop
 800e384:	bd80      	pop	{r7, pc}
 800e386:	bf00      	nop
 800e388:	20001978 	.word	0x20001978
 800e38c:	200008d0 	.word	0x200008d0
 800e390:	0801f1bc 	.word	0x0801f1bc

0800e394 <OnRadioRxError>:

static void OnRadioRxError( void )
{
 800e394:	b580      	push	{r7, lr}
 800e396:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.RxError = 1;
 800e398:	4a0b      	ldr	r2, [pc, #44]	@ (800e3c8 <OnRadioRxError+0x34>)
 800e39a:	7813      	ldrb	r3, [r2, #0]
 800e39c:	f043 0304 	orr.w	r3, r3, #4
 800e3a0:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800e3a2:	4b0a      	ldr	r3, [pc, #40]	@ (800e3cc <OnRadioRxError+0x38>)
 800e3a4:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800e3a8:	2b00      	cmp	r3, #0
 800e3aa:	d00a      	beq.n	800e3c2 <OnRadioRxError+0x2e>
 800e3ac:	4b07      	ldr	r3, [pc, #28]	@ (800e3cc <OnRadioRxError+0x38>)
 800e3ae:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800e3b2:	691b      	ldr	r3, [r3, #16]
 800e3b4:	2b00      	cmp	r3, #0
 800e3b6:	d004      	beq.n	800e3c2 <OnRadioRxError+0x2e>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800e3b8:	4b04      	ldr	r3, [pc, #16]	@ (800e3cc <OnRadioRxError+0x38>)
 800e3ba:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800e3be:	691b      	ldr	r3, [r3, #16]
 800e3c0:	4798      	blx	r3
    }
}
 800e3c2:	bf00      	nop
 800e3c4:	bd80      	pop	{r7, pc}
 800e3c6:	bf00      	nop
 800e3c8:	20001978 	.word	0x20001978
 800e3cc:	200008d0 	.word	0x200008d0

0800e3d0 <OnRadioRxTimeout>:

static void OnRadioRxTimeout( void )
{
 800e3d0:	b580      	push	{r7, lr}
 800e3d2:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.RxTimeout = 1;
 800e3d4:	4a0e      	ldr	r2, [pc, #56]	@ (800e410 <OnRadioRxTimeout+0x40>)
 800e3d6:	7813      	ldrb	r3, [r2, #0]
 800e3d8:	f043 0302 	orr.w	r3, r3, #2
 800e3dc:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800e3de:	4b0d      	ldr	r3, [pc, #52]	@ (800e414 <OnRadioRxTimeout+0x44>)
 800e3e0:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800e3e4:	2b00      	cmp	r3, #0
 800e3e6:	d00a      	beq.n	800e3fe <OnRadioRxTimeout+0x2e>
 800e3e8:	4b0a      	ldr	r3, [pc, #40]	@ (800e414 <OnRadioRxTimeout+0x44>)
 800e3ea:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800e3ee:	691b      	ldr	r3, [r3, #16]
 800e3f0:	2b00      	cmp	r3, #0
 800e3f2:	d004      	beq.n	800e3fe <OnRadioRxTimeout+0x2e>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800e3f4:	4b07      	ldr	r3, [pc, #28]	@ (800e414 <OnRadioRxTimeout+0x44>)
 800e3f6:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800e3fa:	691b      	ldr	r3, [r3, #16]
 800e3fc:	4798      	blx	r3
    }
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxTimeOut\r\n" );
 800e3fe:	4b06      	ldr	r3, [pc, #24]	@ (800e418 <OnRadioRxTimeout+0x48>)
 800e400:	2201      	movs	r2, #1
 800e402:	2100      	movs	r1, #0
 800e404:	2002      	movs	r0, #2
 800e406:	f00d fb69 	bl	801badc <UTIL_ADV_TRACE_COND_FSend>
}
 800e40a:	bf00      	nop
 800e40c:	bd80      	pop	{r7, pc}
 800e40e:	bf00      	nop
 800e410:	20001978 	.word	0x20001978
 800e414:	200008d0 	.word	0x200008d0
 800e418:	0801f1cc 	.word	0x0801f1cc

0800e41c <UpdateRxSlotIdleState>:

static void UpdateRxSlotIdleState( void )
{
 800e41c:	b480      	push	{r7}
 800e41e:	af00      	add	r7, sp, #0
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800e420:	4b08      	ldr	r3, [pc, #32]	@ (800e444 <UpdateRxSlotIdleState+0x28>)
 800e422:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 800e426:	2b02      	cmp	r3, #2
 800e428:	d004      	beq.n	800e434 <UpdateRxSlotIdleState+0x18>
    {
        MacCtx.RxSlot = RX_SLOT_NONE;
 800e42a:	4b07      	ldr	r3, [pc, #28]	@ (800e448 <UpdateRxSlotIdleState+0x2c>)
 800e42c:	2206      	movs	r2, #6
 800e42e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
    }
    else
    {
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
    }
}
 800e432:	e003      	b.n	800e43c <UpdateRxSlotIdleState+0x20>
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
 800e434:	4b04      	ldr	r3, [pc, #16]	@ (800e448 <UpdateRxSlotIdleState+0x2c>)
 800e436:	2202      	movs	r2, #2
 800e438:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
}
 800e43c:	bf00      	nop
 800e43e:	46bd      	mov	sp, r7
 800e440:	bc80      	pop	{r7}
 800e442:	4770      	bx	lr
 800e444:	20000df0 	.word	0x20000df0
 800e448:	200008d0 	.word	0x200008d0

0800e44c <ProcessRadioTxDone>:

static void ProcessRadioTxDone( void )
{
 800e44c:	b580      	push	{r7, lr}
 800e44e:	b08e      	sub	sp, #56	@ 0x38
 800e450:	af02      	add	r7, sp, #8
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    SetBandTxDoneParams_t txDone;

    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800e452:	4b3e      	ldr	r3, [pc, #248]	@ (800e54c <ProcessRadioTxDone+0x100>)
 800e454:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 800e458:	2b02      	cmp	r3, #2
 800e45a:	d002      	beq.n	800e462 <ProcessRadioTxDone+0x16>
    {
        Radio.Sleep( );
 800e45c:	4b3c      	ldr	r3, [pc, #240]	@ (800e550 <ProcessRadioTxDone+0x104>)
 800e45e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e460:	4798      	blx	r3
    }
#if ( !defined(DISABLE_LORAWAN_RX_WINDOW) || (DISABLE_LORAWAN_RX_WINDOW == 0) )
    // Setup timers
    TimerSetValue( &MacCtx.RxWindowTimer1, MacCtx.RxWindow1Delay );
 800e462:	4b3c      	ldr	r3, [pc, #240]	@ (800e554 <ProcessRadioTxDone+0x108>)
 800e464:	f8d3 33b0 	ldr.w	r3, [r3, #944]	@ 0x3b0
 800e468:	4619      	mov	r1, r3
 800e46a:	483b      	ldr	r0, [pc, #236]	@ (800e558 <ProcessRadioTxDone+0x10c>)
 800e46c:	f00d f99c 	bl	801b7a8 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer1 );
 800e470:	4839      	ldr	r0, [pc, #228]	@ (800e558 <ProcessRadioTxDone+0x10c>)
 800e472:	f00d f8bb 	bl	801b5ec <UTIL_TIMER_Start>
    TimerSetValue( &MacCtx.RxWindowTimer2, MacCtx.RxWindow2Delay );
 800e476:	4b37      	ldr	r3, [pc, #220]	@ (800e554 <ProcessRadioTxDone+0x108>)
 800e478:	f8d3 33b4 	ldr.w	r3, [r3, #948]	@ 0x3b4
 800e47c:	4619      	mov	r1, r3
 800e47e:	4837      	ldr	r0, [pc, #220]	@ (800e55c <ProcessRadioTxDone+0x110>)
 800e480:	f00d f992 	bl	801b7a8 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer2 );
 800e484:	4835      	ldr	r0, [pc, #212]	@ (800e55c <ProcessRadioTxDone+0x110>)
 800e486:	f00d f8b1 	bl	801b5ec <UTIL_TIMER_Start>
        phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
        TimerSetValue( &MacCtx.AckTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
        TimerStart( &MacCtx.AckTimeoutTimer );
    }
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    if( MacCtx.NodeAckRequested == true )
 800e48a:	4b32      	ldr	r3, [pc, #200]	@ (800e554 <ProcessRadioTxDone+0x108>)
 800e48c:	f893 341e 	ldrb.w	r3, [r3, #1054]	@ 0x41e
 800e490:	2b00      	cmp	r3, #0
 800e492:	d01a      	beq.n	800e4ca <ProcessRadioTxDone+0x7e>
    {
        getPhy.Attribute = PHY_RETRANSMIT_TIMEOUT;
 800e494:	2315      	movs	r3, #21
 800e496:	f887 3020 	strb.w	r3, [r7, #32]
        phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800e49a:	4b2c      	ldr	r3, [pc, #176]	@ (800e54c <ProcessRadioTxDone+0x100>)
 800e49c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800e4a0:	f107 0220 	add.w	r2, r7, #32
 800e4a4:	4611      	mov	r1, r2
 800e4a6:	4618      	mov	r0, r3
 800e4a8:	f006 fd28 	bl	8014efc <RegionGetPhyParam>
 800e4ac:	4603      	mov	r3, r0
 800e4ae:	61fb      	str	r3, [r7, #28]
        TimerSetValue( &MacCtx.RetransmitTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
 800e4b0:	4b28      	ldr	r3, [pc, #160]	@ (800e554 <ProcessRadioTxDone+0x108>)
 800e4b2:	f8d3 23b4 	ldr.w	r2, [r3, #948]	@ 0x3b4
 800e4b6:	69fb      	ldr	r3, [r7, #28]
 800e4b8:	4413      	add	r3, r2
 800e4ba:	4619      	mov	r1, r3
 800e4bc:	4828      	ldr	r0, [pc, #160]	@ (800e560 <ProcessRadioTxDone+0x114>)
 800e4be:	f00d f973 	bl	801b7a8 <UTIL_TIMER_SetPeriod>
        TimerStart( &MacCtx.RetransmitTimeoutTimer );
 800e4c2:	4827      	ldr	r0, [pc, #156]	@ (800e560 <ProcessRadioTxDone+0x114>)
 800e4c4:	f00d f892 	bl	801b5ec <UTIL_TIMER_Start>
 800e4c8:	e003      	b.n	800e4d2 <ProcessRadioTxDone+0x86>
    }
    else
    {
        // Transmission successful, setup status directly
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800e4ca:	4b22      	ldr	r3, [pc, #136]	@ (800e554 <ProcessRadioTxDone+0x108>)
 800e4cc:	2200      	movs	r2, #0
 800e4ce:	f883 2445 	strb.w	r2, [r3, #1093]	@ 0x445
    }
#endif /* LORAMAC_VERSION */

    // Update Aggregated last tx done time
    Nvm.MacGroup1.LastTxDoneTime = TxDoneParams.CurTime;
 800e4d2:	4b24      	ldr	r3, [pc, #144]	@ (800e564 <ProcessRadioTxDone+0x118>)
 800e4d4:	681b      	ldr	r3, [r3, #0]
 800e4d6:	4a1d      	ldr	r2, [pc, #116]	@ (800e54c <ProcessRadioTxDone+0x100>)
 800e4d8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    // Update last tx done time for the current channel
    txDone.Channel = MacCtx.Channel;
 800e4da:	4b1e      	ldr	r3, [pc, #120]	@ (800e554 <ProcessRadioTxDone+0x108>)
 800e4dc:	f893 341f 	ldrb.w	r3, [r3, #1055]	@ 0x41f
 800e4e0:	723b      	strb	r3, [r7, #8]
    txDone.LastTxDoneTime = TxDoneParams.CurTime;
 800e4e2:	4b20      	ldr	r3, [pc, #128]	@ (800e564 <ProcessRadioTxDone+0x118>)
 800e4e4:	681b      	ldr	r3, [r3, #0]
 800e4e6:	60fb      	str	r3, [r7, #12]
    txDone.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 800e4e8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800e4ec:	4618      	mov	r0, r3
 800e4ee:	f00c fbbd 	bl	801ac6c <SysTimeGetMcuTime>
 800e4f2:	4638      	mov	r0, r7
 800e4f4:	4b15      	ldr	r3, [pc, #84]	@ (800e54c <ProcessRadioTxDone+0x100>)
 800e4f6:	f8d3 2114 	ldr.w	r2, [r3, #276]	@ 0x114
 800e4fa:	9200      	str	r2, [sp, #0]
 800e4fc:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 800e500:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 800e504:	ca06      	ldmia	r2, {r1, r2}
 800e506:	f00c fb12 	bl	801ab2e <SysTimeSub>
 800e50a:	f107 0314 	add.w	r3, r7, #20
 800e50e:	463a      	mov	r2, r7
 800e510:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e514:	e883 0003 	stmia.w	r3, {r0, r1}
    txDone.LastTxAirTime = MacCtx.TxTimeOnAir;
 800e518:	4b0e      	ldr	r3, [pc, #56]	@ (800e554 <ProcessRadioTxDone+0x108>)
 800e51a:	f8d3 3420 	ldr.w	r3, [r3, #1056]	@ 0x420
 800e51e:	613b      	str	r3, [r7, #16]
    txDone.Joined  = true;
 800e520:	2301      	movs	r3, #1
 800e522:	727b      	strb	r3, [r7, #9]
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800e524:	4b09      	ldr	r3, [pc, #36]	@ (800e54c <ProcessRadioTxDone+0x100>)
 800e526:	f893 311c 	ldrb.w	r3, [r3, #284]	@ 0x11c
 800e52a:	2b00      	cmp	r3, #0
 800e52c:	d101      	bne.n	800e532 <ProcessRadioTxDone+0xe6>
    {
        txDone.Joined  = false;
 800e52e:	2300      	movs	r3, #0
 800e530:	727b      	strb	r3, [r7, #9]
    }

    RegionSetBandTxDone( Nvm.MacGroup2.Region, &txDone );
 800e532:	4b06      	ldr	r3, [pc, #24]	@ (800e54c <ProcessRadioTxDone+0x100>)
 800e534:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800e538:	f107 0208 	add.w	r2, r7, #8
 800e53c:	4611      	mov	r1, r2
 800e53e:	4618      	mov	r0, r3
 800e540:	f006 fcf4 	bl	8014f2c <RegionSetBandTxDone>
    if( MacCtx.NodeAckRequested == false )
    {
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
    }
#endif /* LORAMAC_VERSION */
}
 800e544:	bf00      	nop
 800e546:	3730      	adds	r7, #48	@ 0x30
 800e548:	46bd      	mov	sp, r7
 800e54a:	bd80      	pop	{r7, pc}
 800e54c:	20000df0 	.word	0x20000df0
 800e550:	0801f874 	.word	0x0801f874
 800e554:	200008d0 	.word	0x200008d0
 800e558:	20000c50 	.word	0x20000c50
 800e55c:	20000c68 	.word	0x20000c68
 800e560:	20000cd4 	.word	0x20000cd4
 800e564:	2000197c 	.word	0x2000197c

0800e568 <PrepareRxDoneAbort>:

static void PrepareRxDoneAbort( void )
{
 800e568:	b580      	push	{r7, lr}
 800e56a:	af00      	add	r7, sp, #0
    MacCtx.MacState |= LORAMAC_RX_ABORT;
 800e56c:	4b10      	ldr	r3, [pc, #64]	@ (800e5b0 <PrepareRxDoneAbort+0x48>)
 800e56e:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800e572:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e576:	4a0e      	ldr	r2, [pc, #56]	@ (800e5b0 <PrepareRxDoneAbort+0x48>)
 800e578:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340

    if( MacCtx.NodeAckRequested == true )
 800e57c:	4b0c      	ldr	r3, [pc, #48]	@ (800e5b0 <PrepareRxDoneAbort+0x48>)
 800e57e:	f893 341e 	ldrb.w	r3, [r3, #1054]	@ 0x41e
 800e582:	2b00      	cmp	r3, #0
 800e584:	d002      	beq.n	800e58c <PrepareRxDoneAbort+0x24>
    {
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        OnAckTimeoutTimerEvent( NULL );
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
        OnRetransmitTimeoutTimerEvent( NULL );
 800e586:	2000      	movs	r0, #0
 800e588:	f001 f99c 	bl	800f8c4 <OnRetransmitTimeoutTimerEvent>
#endif /* LORAMAC_VERSION */
    }

    MacCtx.MacFlags.Bits.McpsInd = 1;
 800e58c:	4a08      	ldr	r2, [pc, #32]	@ (800e5b0 <PrepareRxDoneAbort+0x48>)
 800e58e:	f892 3495 	ldrb.w	r3, [r2, #1173]	@ 0x495
 800e592:	f043 0302 	orr.w	r3, r3, #2
 800e596:	f882 3495 	strb.w	r3, [r2, #1173]	@ 0x495
    MacCtx.MacFlags.Bits.MacDone = 1;
 800e59a:	4a05      	ldr	r2, [pc, #20]	@ (800e5b0 <PrepareRxDoneAbort+0x48>)
 800e59c:	f892 3495 	ldrb.w	r3, [r2, #1173]	@ 0x495
 800e5a0:	f043 0320 	orr.w	r3, r3, #32
 800e5a4:	f882 3495 	strb.w	r3, [r2, #1173]	@ 0x495

    UpdateRxSlotIdleState( );
 800e5a8:	f7ff ff38 	bl	800e41c <UpdateRxSlotIdleState>
}
 800e5ac:	bf00      	nop
 800e5ae:	bd80      	pop	{r7, pc}
 800e5b0:	200008d0 	.word	0x200008d0

0800e5b4 <ProcessRadioRxDone>:

static void ProcessRadioRxDone( void )
{
 800e5b4:	b590      	push	{r4, r7, lr}
 800e5b6:	b0a7      	sub	sp, #156	@ 0x9c
 800e5b8:	af02      	add	r7, sp, #8
    LoRaMacHeader_t macHdr;
    ApplyCFListParams_t applyCFList;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacCryptoStatus_t macCryptoStatus = LORAMAC_CRYPTO_ERROR;
 800e5ba:	2312      	movs	r3, #18
 800e5bc:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88

    LoRaMacMessageData_t macMsgData;
    LoRaMacMessageJoinAccept_t macMsgJoinAccept;
    uint8_t *payload = RxDoneParams.Payload;
 800e5c0:	4bbd      	ldr	r3, [pc, #756]	@ (800e8b8 <ProcessRadioRxDone+0x304>)
 800e5c2:	685b      	ldr	r3, [r3, #4]
 800e5c4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    uint16_t size = RxDoneParams.Size;
 800e5c8:	4bbb      	ldr	r3, [pc, #748]	@ (800e8b8 <ProcessRadioRxDone+0x304>)
 800e5ca:	891b      	ldrh	r3, [r3, #8]
 800e5cc:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
    int16_t rssi = RxDoneParams.Rssi;
 800e5d0:	4bb9      	ldr	r3, [pc, #740]	@ (800e8b8 <ProcessRadioRxDone+0x304>)
 800e5d2:	895b      	ldrh	r3, [r3, #10]
 800e5d4:	f8a7 3080 	strh.w	r3, [r7, #128]	@ 0x80
    int8_t snr = RxDoneParams.Snr;
 800e5d8:	4bb7      	ldr	r3, [pc, #732]	@ (800e8b8 <ProcessRadioRxDone+0x304>)
 800e5da:	7b1b      	ldrb	r3, [r3, #12]
 800e5dc:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f

    uint8_t pktHeaderLen = 0;
 800e5e0:	2300      	movs	r3, #0
 800e5e2:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e

    uint32_t downLinkCounter = 0;
 800e5e6:	2300      	movs	r3, #0
 800e5e8:	60bb      	str	r3, [r7, #8]
    uint32_t address = Nvm.MacGroup2.DevAddr;
 800e5ea:	4bb4      	ldr	r3, [pc, #720]	@ (800e8bc <ProcessRadioRxDone+0x308>)
 800e5ec:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800e5f0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    uint8_t multicast = 0;
 800e5f4:	2300      	movs	r3, #0
 800e5f6:	f887 308b 	strb.w	r3, [r7, #139]	@ 0x8b
    AddressIdentifier_t addrID = UNICAST_DEV_ADDR;
 800e5fa:	2301      	movs	r3, #1
 800e5fc:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
    FCntIdentifier_t fCntID;

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    LoRaMacRadioEvents.Events.RxProcessPending = 0;
 800e600:	4aaf      	ldr	r2, [pc, #700]	@ (800e8c0 <ProcessRadioRxDone+0x30c>)
 800e602:	7813      	ldrb	r3, [r2, #0]
 800e604:	f36f 0300 	bfc	r3, #0, #1
 800e608:	7013      	strb	r3, [r2, #0]
#endif /* LORAMAC_VERSION */

    MacCtx.McpsConfirm.AckReceived = false;
 800e60a:	4bae      	ldr	r3, [pc, #696]	@ (800e8c4 <ProcessRadioRxDone+0x310>)
 800e60c:	2200      	movs	r2, #0
 800e60e:	f883 2448 	strb.w	r2, [r3, #1096]	@ 0x448
    MacCtx.RxStatus.Rssi = rssi;
 800e612:	4aac      	ldr	r2, [pc, #688]	@ (800e8c4 <ProcessRadioRxDone+0x310>)
 800e614:	f8b7 3080 	ldrh.w	r3, [r7, #128]	@ 0x80
 800e618:	f8a2 3490 	strh.w	r3, [r2, #1168]	@ 0x490
    MacCtx.RxStatus.Snr = snr;
 800e61c:	4aa9      	ldr	r2, [pc, #676]	@ (800e8c4 <ProcessRadioRxDone+0x310>)
 800e61e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800e622:	f882 3492 	strb.w	r3, [r2, #1170]	@ 0x492
    MacCtx.RxStatus.RxSlot = MacCtx.RxSlot;
 800e626:	4ba7      	ldr	r3, [pc, #668]	@ (800e8c4 <ProcessRadioRxDone+0x310>)
 800e628:	f893 2494 	ldrb.w	r2, [r3, #1172]	@ 0x494
 800e62c:	4ba5      	ldr	r3, [pc, #660]	@ (800e8c4 <ProcessRadioRxDone+0x310>)
 800e62e:	f883 2493 	strb.w	r2, [r3, #1171]	@ 0x493
    MacCtx.McpsIndication.Port = 0;
 800e632:	4ba4      	ldr	r3, [pc, #656]	@ (800e8c4 <ProcessRadioRxDone+0x310>)
 800e634:	2200      	movs	r2, #0
 800e636:	f883 2427 	strb.w	r2, [r3, #1063]	@ 0x427
    MacCtx.McpsIndication.Multicast = 0;
 800e63a:	4ba2      	ldr	r3, [pc, #648]	@ (800e8c4 <ProcessRadioRxDone+0x310>)
 800e63c:	2200      	movs	r2, #0
 800e63e:	f883 2426 	strb.w	r2, [r3, #1062]	@ 0x426
    MacCtx.McpsIndication.FramePending = 0;
 800e642:	4ba0      	ldr	r3, [pc, #640]	@ (800e8c4 <ProcessRadioRxDone+0x310>)
 800e644:	2200      	movs	r2, #0
 800e646:	f883 2429 	strb.w	r2, [r3, #1065]	@ 0x429
    MacCtx.McpsIndication.Buffer = NULL;
 800e64a:	4b9e      	ldr	r3, [pc, #632]	@ (800e8c4 <ProcessRadioRxDone+0x310>)
 800e64c:	2200      	movs	r2, #0
 800e64e:	f8c3 242c 	str.w	r2, [r3, #1068]	@ 0x42c
    MacCtx.McpsIndication.BufferSize = 0;
 800e652:	4b9c      	ldr	r3, [pc, #624]	@ (800e8c4 <ProcessRadioRxDone+0x310>)
 800e654:	2200      	movs	r2, #0
 800e656:	f883 2430 	strb.w	r2, [r3, #1072]	@ 0x430
    MacCtx.McpsIndication.RxData = false;
 800e65a:	4b9a      	ldr	r3, [pc, #616]	@ (800e8c4 <ProcessRadioRxDone+0x310>)
 800e65c:	2200      	movs	r2, #0
 800e65e:	f883 2431 	strb.w	r2, [r3, #1073]	@ 0x431
    MacCtx.McpsIndication.AckReceived = false;
 800e662:	4b98      	ldr	r3, [pc, #608]	@ (800e8c4 <ProcessRadioRxDone+0x310>)
 800e664:	2200      	movs	r2, #0
 800e666:	f883 2432 	strb.w	r2, [r3, #1074]	@ 0x432
    MacCtx.McpsIndication.DownLinkCounter = 0;
 800e66a:	4b96      	ldr	r3, [pc, #600]	@ (800e8c4 <ProcessRadioRxDone+0x310>)
 800e66c:	2200      	movs	r2, #0
 800e66e:	f8c3 2434 	str.w	r2, [r3, #1076]	@ 0x434
    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 800e672:	4b94      	ldr	r3, [pc, #592]	@ (800e8c4 <ProcessRadioRxDone+0x310>)
 800e674:	2200      	movs	r2, #0
 800e676:	f883 2424 	strb.w	r2, [r3, #1060]	@ 0x424
    MacCtx.McpsIndication.DevAddress = 0;
 800e67a:	4b92      	ldr	r3, [pc, #584]	@ (800e8c4 <ProcessRadioRxDone+0x310>)
 800e67c:	2200      	movs	r2, #0
 800e67e:	f8c3 2438 	str.w	r2, [r3, #1080]	@ 0x438
    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 800e682:	4b90      	ldr	r3, [pc, #576]	@ (800e8c4 <ProcessRadioRxDone+0x310>)
 800e684:	2200      	movs	r2, #0
 800e686:	f883 243c 	strb.w	r2, [r3, #1084]	@ 0x43c
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    MacCtx.McpsIndication.ResponseTimeout = 0;
 800e68a:	4b8e      	ldr	r3, [pc, #568]	@ (800e8c4 <ProcessRadioRxDone+0x310>)
 800e68c:	2200      	movs	r2, #0
 800e68e:	f8c3 2440 	str.w	r2, [r3, #1088]	@ 0x440
#endif /* LORAMAC_VERSION */

    Radio.Sleep( );
 800e692:	4b8d      	ldr	r3, [pc, #564]	@ (800e8c8 <ProcessRadioRxDone+0x314>)
 800e694:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e696:	4798      	blx	r3

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerStop( &MacCtx.RxWindowTimer2 );
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    if( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 )
 800e698:	4b8a      	ldr	r3, [pc, #552]	@ (800e8c4 <ProcessRadioRxDone+0x310>)
 800e69a:	f893 3493 	ldrb.w	r3, [r3, #1171]	@ 0x493
 800e69e:	2b00      	cmp	r3, #0
 800e6a0:	d102      	bne.n	800e6a8 <ProcessRadioRxDone+0xf4>
    {
        TimerStop( &MacCtx.RxWindowTimer2 );
 800e6a2:	488a      	ldr	r0, [pc, #552]	@ (800e8cc <ProcessRadioRxDone+0x318>)
 800e6a4:	f00d f810 	bl	801b6c8 <UTIL_TIMER_Stop>
    }
#endif /* LORAMAC_VERSION */

    // This function must be called even if we are not in class b mode yet.
    if( LoRaMacClassBRxBeacon( payload, size ) == true )
 800e6a8:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 800e6ac:	4619      	mov	r1, r3
 800e6ae:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 800e6b2:	f004 fcdb 	bl	801306c <LoRaMacClassBRxBeacon>
 800e6b6:	4603      	mov	r3, r0
 800e6b8:	2b00      	cmp	r3, #0
 800e6ba:	d00b      	beq.n	800e6d4 <ProcessRadioRxDone+0x120>
    {
        MacCtx.MlmeIndication.BeaconInfo.Rssi = rssi;
 800e6bc:	4a81      	ldr	r2, [pc, #516]	@ (800e8c4 <ProcessRadioRxDone+0x310>)
 800e6be:	f8b7 3080 	ldrh.w	r3, [r7, #128]	@ 0x80
 800e6c2:	f8a2 3482 	strh.w	r3, [r2, #1154]	@ 0x482
        MacCtx.MlmeIndication.BeaconInfo.Snr = snr;
 800e6c6:	4a7f      	ldr	r2, [pc, #508]	@ (800e8c4 <ProcessRadioRxDone+0x310>)
 800e6c8:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800e6cc:	f882 3484 	strb.w	r3, [r2, #1156]	@ 0x484
        return;
 800e6d0:	f000 bc22 	b.w	800ef18 <ProcessRadioRxDone+0x964>
    }
    // Check if we expect a ping or a multicast slot.
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800e6d4:	4b79      	ldr	r3, [pc, #484]	@ (800e8bc <ProcessRadioRxDone+0x308>)
 800e6d6:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 800e6da:	2b01      	cmp	r3, #1
 800e6dc:	d11e      	bne.n	800e71c <ProcessRadioRxDone+0x168>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 800e6de:	f004 fcd8 	bl	8013092 <LoRaMacClassBIsPingExpected>
 800e6e2:	4603      	mov	r3, r0
 800e6e4:	2b00      	cmp	r3, #0
 800e6e6:	d00a      	beq.n	800e6fe <ProcessRadioRxDone+0x14a>
        {
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800e6e8:	2000      	movs	r0, #0
 800e6ea:	f004 fc89 	bl	8013000 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 800e6ee:	2000      	movs	r0, #0
 800e6f0:	f004 fcaa 	bl	8013048 <LoRaMacClassBPingSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 800e6f4:	4b73      	ldr	r3, [pc, #460]	@ (800e8c4 <ProcessRadioRxDone+0x310>)
 800e6f6:	2204      	movs	r2, #4
 800e6f8:	f883 2493 	strb.w	r2, [r3, #1171]	@ 0x493
 800e6fc:	e00e      	b.n	800e71c <ProcessRadioRxDone+0x168>
        }
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 800e6fe:	f004 fccf 	bl	80130a0 <LoRaMacClassBIsMulticastExpected>
 800e702:	4603      	mov	r3, r0
 800e704:	2b00      	cmp	r3, #0
 800e706:	d009      	beq.n	800e71c <ProcessRadioRxDone+0x168>
        {
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800e708:	2000      	movs	r0, #0
 800e70a:	f004 fc83 	bl	8013014 <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800e70e:	2000      	movs	r0, #0
 800e710:	f004 fca3 	bl	801305a <LoRaMacClassBMulticastSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 800e714:	4b6b      	ldr	r3, [pc, #428]	@ (800e8c4 <ProcessRadioRxDone+0x310>)
 800e716:	2205      	movs	r2, #5
 800e718:	f883 2493 	strb.w	r2, [r3, #1171]	@ 0x493
        }
    }

    macHdr.Value = payload[pktHeaderLen++];
 800e71c:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 800e720:	1c5a      	adds	r2, r3, #1
 800e722:	f887 207e 	strb.w	r2, [r7, #126]	@ 0x7e
 800e726:	461a      	mov	r2, r3
 800e728:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800e72c:	4413      	add	r3, r2
 800e72e:	781b      	ldrb	r3, [r3, #0]
 800e730:	f887 307c 	strb.w	r3, [r7, #124]	@ 0x7c

    switch( macHdr.Bits.MType )
 800e734:	f897 307c 	ldrb.w	r3, [r7, #124]	@ 0x7c
 800e738:	f3c3 1342 	ubfx	r3, r3, #5, #3
 800e73c:	b2db      	uxtb	r3, r3
 800e73e:	3b01      	subs	r3, #1
 800e740:	2b06      	cmp	r3, #6
 800e742:	f200 83bd 	bhi.w	800eec0 <ProcessRadioRxDone+0x90c>
 800e746:	a201      	add	r2, pc, #4	@ (adr r2, 800e74c <ProcessRadioRxDone+0x198>)
 800e748:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e74c:	0800e769 	.word	0x0800e769
 800e750:	0800eec1 	.word	0x0800eec1
 800e754:	0800e8fd 	.word	0x0800e8fd
 800e758:	0800eec1 	.word	0x0800eec1
 800e75c:	0800e8f5 	.word	0x0800e8f5
 800e760:	0800eec1 	.word	0x0800eec1
 800e764:	0800ee53 	.word	0x0800ee53
    {
        case FRAME_TYPE_JOIN_ACCEPT:
            // Check if the received frame size is valid
            if( size < LORAMAC_JOIN_ACCEPT_FRAME_MIN_SIZE )
 800e768:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 800e76c:	2b10      	cmp	r3, #16
 800e76e:	d806      	bhi.n	800e77e <ProcessRadioRxDone+0x1ca>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800e770:	4b54      	ldr	r3, [pc, #336]	@ (800e8c4 <ProcessRadioRxDone+0x310>)
 800e772:	2201      	movs	r2, #1
 800e774:	f883 2425 	strb.w	r2, [r3, #1061]	@ 0x425
                PrepareRxDoneAbort( );
 800e778:	f7ff fef6 	bl	800e568 <PrepareRxDoneAbort>
                return;
 800e77c:	e3cc      	b.n	800ef18 <ProcessRadioRxDone+0x964>
            }
            macMsgJoinAccept.Buffer = payload;
 800e77e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800e782:	60fb      	str	r3, [r7, #12]
            macMsgJoinAccept.BufSize = size;
 800e784:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 800e788:	b2db      	uxtb	r3, r3
 800e78a:	743b      	strb	r3, [r7, #16]

            // Abort in case if the device isn't joined yet and no rejoin request is ongoing.
            if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 800e78c:	4b4b      	ldr	r3, [pc, #300]	@ (800e8bc <ProcessRadioRxDone+0x308>)
 800e78e:	f893 311c 	ldrb.w	r3, [r3, #284]	@ 0x11c
 800e792:	2b00      	cmp	r3, #0
 800e794:	d006      	beq.n	800e7a4 <ProcessRadioRxDone+0x1f0>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800e796:	4b4b      	ldr	r3, [pc, #300]	@ (800e8c4 <ProcessRadioRxDone+0x310>)
 800e798:	2201      	movs	r2, #1
 800e79a:	f883 2425 	strb.w	r2, [r3, #1061]	@ 0x425
                PrepareRxDoneAbort( );
 800e79e:	f7ff fee3 	bl	800e568 <PrepareRxDoneAbort>
                return;
 800e7a2:	e3b9      	b.n	800ef18 <ProcessRadioRxDone+0x964>
            }
            macCryptoStatus = LoRaMacCryptoHandleJoinAccept( JOIN_REQ, SecureElementGetJoinEui( ), &macMsgJoinAccept );
 800e7a4:	f7fe f876 	bl	800c894 <SecureElementGetJoinEui>
 800e7a8:	4601      	mov	r1, r0
 800e7aa:	f107 030c 	add.w	r3, r7, #12
 800e7ae:	461a      	mov	r2, r3
 800e7b0:	20ff      	movs	r0, #255	@ 0xff
 800e7b2:	f005 fe2d 	bl	8014410 <LoRaMacCryptoHandleJoinAccept>
 800e7b6:	4603      	mov	r3, r0
 800e7b8:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88

            if( LORAMAC_CRYPTO_SUCCESS == macCryptoStatus )
 800e7bc:	f897 3088 	ldrb.w	r3, [r7, #136]	@ 0x88
 800e7c0:	2b00      	cmp	r3, #0
 800e7c2:	f040 8085 	bne.w	800e8d0 <ProcessRadioRxDone+0x31c>
            {
                // Network ID
                Nvm.MacGroup2.NetID = ( uint32_t ) macMsgJoinAccept.NetID[0];
 800e7c6:	7d7b      	ldrb	r3, [r7, #21]
 800e7c8:	461a      	mov	r2, r3
 800e7ca:	4b3c      	ldr	r3, [pc, #240]	@ (800e8bc <ProcessRadioRxDone+0x308>)
 800e7cc:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[1] << 8 );
 800e7d0:	4b3a      	ldr	r3, [pc, #232]	@ (800e8bc <ProcessRadioRxDone+0x308>)
 800e7d2:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 800e7d6:	7dbb      	ldrb	r3, [r7, #22]
 800e7d8:	021b      	lsls	r3, r3, #8
 800e7da:	4313      	orrs	r3, r2
 800e7dc:	4a37      	ldr	r2, [pc, #220]	@ (800e8bc <ProcessRadioRxDone+0x308>)
 800e7de:	f8c2 30d0 	str.w	r3, [r2, #208]	@ 0xd0
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 800e7e2:	4b36      	ldr	r3, [pc, #216]	@ (800e8bc <ProcessRadioRxDone+0x308>)
 800e7e4:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 800e7e8:	7dfb      	ldrb	r3, [r7, #23]
 800e7ea:	041b      	lsls	r3, r3, #16
 800e7ec:	4313      	orrs	r3, r2
 800e7ee:	4a33      	ldr	r2, [pc, #204]	@ (800e8bc <ProcessRadioRxDone+0x308>)
 800e7f0:	f8c2 30d0 	str.w	r3, [r2, #208]	@ 0xd0

                // Device Address
                Nvm.MacGroup2.DevAddr = macMsgJoinAccept.DevAddr;
 800e7f4:	69bb      	ldr	r3, [r7, #24]
 800e7f6:	4a31      	ldr	r2, [pc, #196]	@ (800e8bc <ProcessRadioRxDone+0x308>)
 800e7f8:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4

                // DLSettings
                Nvm.MacGroup2.MacParams.Rx1DrOffset = macMsgJoinAccept.DLSettings.Bits.RX1DRoffset;
 800e7fc:	7f3b      	ldrb	r3, [r7, #28]
 800e7fe:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800e802:	b2db      	uxtb	r3, r3
 800e804:	461a      	mov	r2, r3
 800e806:	4b2d      	ldr	r3, [pc, #180]	@ (800e8bc <ProcessRadioRxDone+0x308>)
 800e808:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
                Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800e80c:	7f3b      	ldrb	r3, [r7, #28]
 800e80e:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800e812:	b2db      	uxtb	r3, r3
 800e814:	461a      	mov	r2, r3
 800e816:	4b29      	ldr	r3, [pc, #164]	@ (800e8bc <ProcessRadioRxDone+0x308>)
 800e818:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
                Nvm.MacGroup2.MacParams.RxCChannel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800e81c:	7f3b      	ldrb	r3, [r7, #28]
 800e81e:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800e822:	b2db      	uxtb	r3, r3
 800e824:	461a      	mov	r2, r3
 800e826:	4b25      	ldr	r3, [pc, #148]	@ (800e8bc <ProcessRadioRxDone+0x308>)
 800e828:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70

                // RxDelay
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = macMsgJoinAccept.RxDelay;
 800e82c:	7f7b      	ldrb	r3, [r7, #29]
 800e82e:	461a      	mov	r2, r3
 800e830:	4b22      	ldr	r3, [pc, #136]	@ (800e8bc <ProcessRadioRxDone+0x308>)
 800e832:	651a      	str	r2, [r3, #80]	@ 0x50
                if( Nvm.MacGroup2.MacParams.ReceiveDelay1 == 0 )
 800e834:	4b21      	ldr	r3, [pc, #132]	@ (800e8bc <ProcessRadioRxDone+0x308>)
 800e836:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e838:	2b00      	cmp	r3, #0
 800e83a:	d102      	bne.n	800e842 <ProcessRadioRxDone+0x28e>
                {
                    Nvm.MacGroup2.MacParams.ReceiveDelay1 = 1;
 800e83c:	4b1f      	ldr	r3, [pc, #124]	@ (800e8bc <ProcessRadioRxDone+0x308>)
 800e83e:	2201      	movs	r2, #1
 800e840:	651a      	str	r2, [r3, #80]	@ 0x50
                }
                Nvm.MacGroup2.MacParams.ReceiveDelay1 *= 1000;
 800e842:	4b1e      	ldr	r3, [pc, #120]	@ (800e8bc <ProcessRadioRxDone+0x308>)
 800e844:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e846:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800e84a:	fb02 f303 	mul.w	r3, r2, r3
 800e84e:	4a1b      	ldr	r2, [pc, #108]	@ (800e8bc <ProcessRadioRxDone+0x308>)
 800e850:	6513      	str	r3, [r2, #80]	@ 0x50
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 800e852:	4b1a      	ldr	r3, [pc, #104]	@ (800e8bc <ProcessRadioRxDone+0x308>)
 800e854:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e856:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800e85a:	4a18      	ldr	r2, [pc, #96]	@ (800e8bc <ProcessRadioRxDone+0x308>)
 800e85c:	6553      	str	r3, [r2, #84]	@ 0x54

                Nvm.MacGroup2.Version.Fields.Minor = 0;
 800e85e:	4b17      	ldr	r3, [pc, #92]	@ (800e8bc <ProcessRadioRxDone+0x308>)
 800e860:	2200      	movs	r2, #0
 800e862:	f883 211a 	strb.w	r2, [r3, #282]	@ 0x11a

                // Apply CF list
                applyCFList.Payload = macMsgJoinAccept.CFList;
 800e866:	f107 030c 	add.w	r3, r7, #12
 800e86a:	3312      	adds	r3, #18
 800e86c:	677b      	str	r3, [r7, #116]	@ 0x74
                // Size of the regular payload is 12. Plus 1 byte MHDR and 4 bytes MIC
                applyCFList.Size = size - 17;
 800e86e:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 800e872:	b2db      	uxtb	r3, r3
 800e874:	3b11      	subs	r3, #17
 800e876:	b2db      	uxtb	r3, r3
 800e878:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
                // Apply the last tx channel
                applyCFList.JoinChannel = MacCtx.Channel;
 800e87c:	4b11      	ldr	r3, [pc, #68]	@ (800e8c4 <ProcessRadioRxDone+0x310>)
 800e87e:	f893 341f 	ldrb.w	r3, [r3, #1055]	@ 0x41f
 800e882:	f887 3070 	strb.w	r3, [r7, #112]	@ 0x70
#endif /* LORAMAC_VERSION */

                RegionApplyCFList( Nvm.MacGroup2.Region, &applyCFList );
 800e886:	4b0d      	ldr	r3, [pc, #52]	@ (800e8bc <ProcessRadioRxDone+0x308>)
 800e888:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800e88c:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 800e890:	4611      	mov	r1, r2
 800e892:	4618      	mov	r0, r3
 800e894:	f006 fb84 	bl	8014fa0 <RegionApplyCFList>

                Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_OTAA;
 800e898:	4b08      	ldr	r3, [pc, #32]	@ (800e8bc <ProcessRadioRxDone+0x308>)
 800e89a:	2202      	movs	r2, #2
 800e89c:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c

                // MLME handling
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800e8a0:	2001      	movs	r0, #1
 800e8a2:	f005 f8dd 	bl	8013a60 <LoRaMacConfirmQueueIsCmdActive>
 800e8a6:	4603      	mov	r3, r0
 800e8a8:	2b00      	cmp	r3, #0
 800e8aa:	d01b      	beq.n	800e8e4 <ProcessRadioRxDone+0x330>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_JOIN );
 800e8ac:	2101      	movs	r1, #1
 800e8ae:	2000      	movs	r0, #0
 800e8b0:	f005 f84a 	bl	8013948 <LoRaMacConfirmQueueSetStatus>
 800e8b4:	e016      	b.n	800e8e4 <ProcessRadioRxDone+0x330>
 800e8b6:	bf00      	nop
 800e8b8:	20001980 	.word	0x20001980
 800e8bc:	20000df0 	.word	0x20000df0
 800e8c0:	20001978 	.word	0x20001978
 800e8c4:	200008d0 	.word	0x200008d0
 800e8c8:	0801f874 	.word	0x0801f874
 800e8cc:	20000c68 	.word	0x20000c68
                }
            }
            else
            {
                // MLME handling
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800e8d0:	2001      	movs	r0, #1
 800e8d2:	f005 f8c5 	bl	8013a60 <LoRaMacConfirmQueueIsCmdActive>
 800e8d6:	4603      	mov	r3, r0
 800e8d8:	2b00      	cmp	r3, #0
 800e8da:	d003      	beq.n	800e8e4 <ProcessRadioRxDone+0x330>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
 800e8dc:	2101      	movs	r1, #1
 800e8de:	2007      	movs	r0, #7
 800e8e0:	f005 f832 	bl	8013948 <LoRaMacConfirmQueueSetStatus>
                }
            }
            MacCtx.MacFlags.Bits.MlmeInd = 1;
 800e8e4:	4ab9      	ldr	r2, [pc, #740]	@ (800ebcc <ProcessRadioRxDone+0x618>)
 800e8e6:	f892 3495 	ldrb.w	r3, [r2, #1173]	@ 0x495
 800e8ea:	f043 0308 	orr.w	r3, r3, #8
 800e8ee:	f882 3495 	strb.w	r3, [r2, #1173]	@ 0x495
            break;
 800e8f2:	e2ec      	b.n	800eece <ProcessRadioRxDone+0x91a>
        case FRAME_TYPE_DATA_CONFIRMED_DOWN:
            MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 800e8f4:	4bb5      	ldr	r3, [pc, #724]	@ (800ebcc <ProcessRadioRxDone+0x618>)
 800e8f6:	2201      	movs	r2, #1
 800e8f8:	f883 2424 	strb.w	r2, [r3, #1060]	@ 0x424
            // Intentional fall through
        case FRAME_TYPE_DATA_UNCONFIRMED_DOWN:
            // Check if the received payload size is valid
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800e8fc:	4bb4      	ldr	r3, [pc, #720]	@ (800ebd0 <ProcessRadioRxDone+0x61c>)
 800e8fe:	f893 3075 	ldrb.w	r3, [r3, #117]	@ 0x75
 800e902:	f887 306a 	strb.w	r3, [r7, #106]	@ 0x6a
            getPhy.Datarate = MacCtx.McpsIndication.RxDatarate;
 800e906:	4bb1      	ldr	r3, [pc, #708]	@ (800ebcc <ProcessRadioRxDone+0x618>)
 800e908:	f893 3428 	ldrb.w	r3, [r3, #1064]	@ 0x428
 800e90c:	b25b      	sxtb	r3, r3
 800e90e:	f887 3069 	strb.w	r3, [r7, #105]	@ 0x69
            getPhy.Attribute = PHY_MAX_PAYLOAD;
 800e912:	230d      	movs	r3, #13
 800e914:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68

            /* ST_WORKAROUND_BEGIN: Keep repeater feature */
            // Get the maximum payload length
            if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 800e918:	4bad      	ldr	r3, [pc, #692]	@ (800ebd0 <ProcessRadioRxDone+0x61c>)
 800e91a:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800e91e:	2b00      	cmp	r3, #0
 800e920:	d002      	beq.n	800e928 <ProcessRadioRxDone+0x374>
            {
                getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 800e922:	230e      	movs	r3, #14
 800e924:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
            }
            /* ST_WORKAROUND_END */

            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800e928:	4ba9      	ldr	r3, [pc, #676]	@ (800ebd0 <ProcessRadioRxDone+0x61c>)
 800e92a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800e92e:	f107 0268 	add.w	r2, r7, #104	@ 0x68
 800e932:	4611      	mov	r1, r2
 800e934:	4618      	mov	r0, r3
 800e936:	f006 fae1 	bl	8014efc <RegionGetPhyParam>
 800e93a:	4603      	mov	r3, r0
 800e93c:	667b      	str	r3, [r7, #100]	@ 0x64
            if( ( MAX( 0, ( int16_t )( ( int16_t ) size - ( int16_t ) LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE ) ) > ( int16_t )phyParam.Value ) ||
 800e93e:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 800e942:	3b0d      	subs	r3, #13
 800e944:	b29b      	uxth	r3, r3
 800e946:	b21b      	sxth	r3, r3
 800e948:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800e94c:	b21a      	sxth	r2, r3
 800e94e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e950:	b21b      	sxth	r3, r3
 800e952:	429a      	cmp	r2, r3
 800e954:	dc03      	bgt.n	800e95e <ProcessRadioRxDone+0x3aa>
 800e956:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 800e95a:	2b0b      	cmp	r3, #11
 800e95c:	d806      	bhi.n	800e96c <ProcessRadioRxDone+0x3b8>
                ( size < LORAMAC_FRAME_PAYLOAD_MIN_SIZE ) )
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800e95e:	4b9b      	ldr	r3, [pc, #620]	@ (800ebcc <ProcessRadioRxDone+0x618>)
 800e960:	2201      	movs	r2, #1
 800e962:	f883 2425 	strb.w	r2, [r3, #1061]	@ 0x425
                PrepareRxDoneAbort( );
 800e966:	f7ff fdff 	bl	800e568 <PrepareRxDoneAbort>
                return;
 800e96a:	e2d5      	b.n	800ef18 <ProcessRadioRxDone+0x964>
            }
            macMsgData.Buffer = payload;
 800e96c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800e970:	637b      	str	r3, [r7, #52]	@ 0x34
            macMsgData.BufSize = size;
 800e972:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 800e976:	b2db      	uxtb	r3, r3
 800e978:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
            macMsgData.FRMPayload = MacCtx.RxPayload;
 800e97c:	4b95      	ldr	r3, [pc, #596]	@ (800ebd4 <ProcessRadioRxDone+0x620>)
 800e97e:	65bb      	str	r3, [r7, #88]	@ 0x58
            macMsgData.FRMPayloadSize = LORAMAC_PHY_MAXPAYLOAD;
 800e980:	23ff      	movs	r3, #255	@ 0xff
 800e982:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c

            if( LORAMAC_PARSER_SUCCESS != LoRaMacParserData( &macMsgData ) )
 800e986:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800e98a:	4618      	mov	r0, r3
 800e98c:	f006 f83d 	bl	8014a0a <LoRaMacParserData>
 800e990:	4603      	mov	r3, r0
 800e992:	2b00      	cmp	r3, #0
 800e994:	d006      	beq.n	800e9a4 <ProcessRadioRxDone+0x3f0>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800e996:	4b8d      	ldr	r3, [pc, #564]	@ (800ebcc <ProcessRadioRxDone+0x618>)
 800e998:	2201      	movs	r2, #1
 800e99a:	f883 2425 	strb.w	r2, [r3, #1061]	@ 0x425
                PrepareRxDoneAbort( );
 800e99e:	f7ff fde3 	bl	800e568 <PrepareRxDoneAbort>
                return;
 800e9a2:	e2b9      	b.n	800ef18 <ProcessRadioRxDone+0x964>
            }

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
            // Handle Class B
            // Check if we expect a ping or a multicast slot.
            if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800e9a4:	4b8a      	ldr	r3, [pc, #552]	@ (800ebd0 <ProcessRadioRxDone+0x61c>)
 800e9a6:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 800e9aa:	2b01      	cmp	r3, #1
 800e9ac:	d132      	bne.n	800ea14 <ProcessRadioRxDone+0x460>
            {
                if( LoRaMacClassBIsPingExpected( ) == true )
 800e9ae:	f004 fb70 	bl	8013092 <LoRaMacClassBIsPingExpected>
 800e9b2:	4603      	mov	r3, r0
 800e9b4:	2b00      	cmp	r3, #0
 800e9b6:	d014      	beq.n	800e9e2 <ProcessRadioRxDone+0x42e>
                {
                    LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800e9b8:	2000      	movs	r0, #0
 800e9ba:	f004 fb21 	bl	8013000 <LoRaMacClassBSetPingSlotState>
                    LoRaMacClassBPingSlotTimerEvent( NULL );
 800e9be:	2000      	movs	r0, #0
 800e9c0:	f004 fb42 	bl	8013048 <LoRaMacClassBPingSlotTimerEvent>
                    MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 800e9c4:	4b81      	ldr	r3, [pc, #516]	@ (800ebcc <ProcessRadioRxDone+0x618>)
 800e9c6:	2204      	movs	r2, #4
 800e9c8:	f883 2493 	strb.w	r2, [r3, #1171]	@ 0x493
                    LoRaMacClassBSetFPendingBit( macMsgData.FHDR.DevAddr, ( uint8_t ) macMsgData.FHDR.FCtrl.Bits.FPending );
 800e9cc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800e9ce:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800e9d2:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800e9d6:	b2db      	uxtb	r3, r3
 800e9d8:	4619      	mov	r1, r3
 800e9da:	4610      	mov	r0, r2
 800e9dc:	f004 fbe2 	bl	80131a4 <LoRaMacClassBSetFPendingBit>
 800e9e0:	e018      	b.n	800ea14 <ProcessRadioRxDone+0x460>
                }
                else if( LoRaMacClassBIsMulticastExpected( ) == true )
 800e9e2:	f004 fb5d 	bl	80130a0 <LoRaMacClassBIsMulticastExpected>
 800e9e6:	4603      	mov	r3, r0
 800e9e8:	2b00      	cmp	r3, #0
 800e9ea:	d013      	beq.n	800ea14 <ProcessRadioRxDone+0x460>
                {
                    LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800e9ec:	2000      	movs	r0, #0
 800e9ee:	f004 fb11 	bl	8013014 <LoRaMacClassBSetMulticastSlotState>
                    LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800e9f2:	2000      	movs	r0, #0
 800e9f4:	f004 fb31 	bl	801305a <LoRaMacClassBMulticastSlotTimerEvent>
                    MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 800e9f8:	4b74      	ldr	r3, [pc, #464]	@ (800ebcc <ProcessRadioRxDone+0x618>)
 800e9fa:	2205      	movs	r2, #5
 800e9fc:	f883 2493 	strb.w	r2, [r3, #1171]	@ 0x493
                    LoRaMacClassBSetFPendingBit( macMsgData.FHDR.DevAddr, ( uint8_t ) macMsgData.FHDR.FCtrl.Bits.FPending );
 800ea00:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800ea02:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800ea06:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800ea0a:	b2db      	uxtb	r3, r3
 800ea0c:	4619      	mov	r1, r3
 800ea0e:	4610      	mov	r0, r2
 800ea10:	f004 fbc8 	bl	80131a4 <LoRaMacClassBSetFPendingBit>
                }
            }
#endif /* LORAMAC_VERSION */

            // Store device address
            MacCtx.McpsIndication.DevAddress = macMsgData.FHDR.DevAddr;
 800ea14:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ea16:	4a6d      	ldr	r2, [pc, #436]	@ (800ebcc <ProcessRadioRxDone+0x618>)
 800ea18:	f8c2 3438 	str.w	r3, [r2, #1080]	@ 0x438

            FType_t fType;
            if( LORAMAC_STATUS_OK != DetermineFrameType( &macMsgData, &fType ) )
 800ea1c:	1dba      	adds	r2, r7, #6
 800ea1e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800ea22:	4611      	mov	r1, r2
 800ea24:	4618      	mov	r0, r3
 800ea26:	f002 fd1f 	bl	8011468 <DetermineFrameType>
 800ea2a:	4603      	mov	r3, r0
 800ea2c:	2b00      	cmp	r3, #0
 800ea2e:	d006      	beq.n	800ea3e <ProcessRadioRxDone+0x48a>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800ea30:	4b66      	ldr	r3, [pc, #408]	@ (800ebcc <ProcessRadioRxDone+0x618>)
 800ea32:	2201      	movs	r2, #1
 800ea34:	f883 2425 	strb.w	r2, [r3, #1061]	@ 0x425
                PrepareRxDoneAbort( );
 800ea38:	f7ff fd96 	bl	800e568 <PrepareRxDoneAbort>
                return;
 800ea3c:	e26c      	b.n	800ef18 <ProcessRadioRxDone+0x964>
            }

            //Check if it is a multicast message
            multicast = 0;
 800ea3e:	2300      	movs	r3, #0
 800ea40:	f887 308b 	strb.w	r3, [r7, #139]	@ 0x8b
            downLinkCounter = 0;
 800ea44:	2300      	movs	r3, #0
 800ea46:	60bb      	str	r3, [r7, #8]
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800ea48:	2300      	movs	r3, #0
 800ea4a:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89
 800ea4e:	e049      	b.n	800eae4 <ProcessRadioRxDone+0x530>
            {
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 800ea50:	f897 3089 	ldrb.w	r3, [r7, #137]	@ 0x89
 800ea54:	4a5e      	ldr	r2, [pc, #376]	@ (800ebd0 <ProcessRadioRxDone+0x61c>)
 800ea56:	212c      	movs	r1, #44	@ 0x2c
 800ea58:	fb01 f303 	mul.w	r3, r1, r3
 800ea5c:	4413      	add	r3, r2
 800ea5e:	33dc      	adds	r3, #220	@ 0xdc
 800ea60:	681a      	ldr	r2, [r3, #0]
 800ea62:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ea64:	429a      	cmp	r2, r3
 800ea66:	d138      	bne.n	800eada <ProcessRadioRxDone+0x526>
                    ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) )
 800ea68:	f897 3089 	ldrb.w	r3, [r7, #137]	@ 0x89
 800ea6c:	4a58      	ldr	r2, [pc, #352]	@ (800ebd0 <ProcessRadioRxDone+0x61c>)
 800ea6e:	212c      	movs	r1, #44	@ 0x2c
 800ea70:	fb01 f303 	mul.w	r3, r1, r3
 800ea74:	4413      	add	r3, r2
 800ea76:	33da      	adds	r3, #218	@ 0xda
 800ea78:	781b      	ldrb	r3, [r3, #0]
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 800ea7a:	2b00      	cmp	r3, #0
 800ea7c:	d02d      	beq.n	800eada <ProcessRadioRxDone+0x526>
                {
                    multicast = 1;
 800ea7e:	2301      	movs	r3, #1
 800ea80:	f887 308b 	strb.w	r3, [r7, #139]	@ 0x8b
                    addrID = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.GroupID;
 800ea84:	f897 3089 	ldrb.w	r3, [r7, #137]	@ 0x89
 800ea88:	4a51      	ldr	r2, [pc, #324]	@ (800ebd0 <ProcessRadioRxDone+0x61c>)
 800ea8a:	212c      	movs	r1, #44	@ 0x2c
 800ea8c:	fb01 f303 	mul.w	r3, r1, r3
 800ea90:	4413      	add	r3, r2
 800ea92:	33db      	adds	r3, #219	@ 0xdb
 800ea94:	781b      	ldrb	r3, [r3, #0]
 800ea96:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
                    downLinkCounter = *( Nvm.MacGroup2.MulticastChannelList[i].DownLinkCounter );
 800ea9a:	f897 3089 	ldrb.w	r3, [r7, #137]	@ 0x89
 800ea9e:	4a4c      	ldr	r2, [pc, #304]	@ (800ebd0 <ProcessRadioRxDone+0x61c>)
 800eaa0:	212c      	movs	r1, #44	@ 0x2c
 800eaa2:	fb01 f303 	mul.w	r3, r1, r3
 800eaa6:	4413      	add	r3, r2
 800eaa8:	33f8      	adds	r3, #248	@ 0xf8
 800eaaa:	681b      	ldr	r3, [r3, #0]
 800eaac:	681b      	ldr	r3, [r3, #0]
 800eaae:	60bb      	str	r3, [r7, #8]
                    address = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address;
 800eab0:	f897 3089 	ldrb.w	r3, [r7, #137]	@ 0x89
 800eab4:	4a46      	ldr	r2, [pc, #280]	@ (800ebd0 <ProcessRadioRxDone+0x61c>)
 800eab6:	212c      	movs	r1, #44	@ 0x2c
 800eab8:	fb01 f303 	mul.w	r3, r1, r3
 800eabc:	4413      	add	r3, r2
 800eabe:	33dc      	adds	r3, #220	@ 0xdc
 800eac0:	681b      	ldr	r3, [r3, #0]
 800eac2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
                    if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 800eac6:	4b42      	ldr	r3, [pc, #264]	@ (800ebd0 <ProcessRadioRxDone+0x61c>)
 800eac8:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 800eacc:	2b02      	cmp	r3, #2
 800eace:	d10e      	bne.n	800eaee <ProcessRadioRxDone+0x53a>
                    {
                        MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 800ead0:	4b3e      	ldr	r3, [pc, #248]	@ (800ebcc <ProcessRadioRxDone+0x618>)
 800ead2:	2203      	movs	r2, #3
 800ead4:	f883 2493 	strb.w	r2, [r3, #1171]	@ 0x493
                    }
                    break;
 800ead8:	e009      	b.n	800eaee <ProcessRadioRxDone+0x53a>
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800eada:	f897 3089 	ldrb.w	r3, [r7, #137]	@ 0x89
 800eade:	3301      	adds	r3, #1
 800eae0:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89
 800eae4:	f897 3089 	ldrb.w	r3, [r7, #137]	@ 0x89
 800eae8:	2b00      	cmp	r3, #0
 800eaea:	d0b1      	beq.n	800ea50 <ProcessRadioRxDone+0x49c>
 800eaec:	e000      	b.n	800eaf0 <ProcessRadioRxDone+0x53c>
                    break;
 800eaee:	bf00      	nop
                }
            }

            // Filter messages according to multicast downlink exceptions
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 800eaf0:	f897 308b 	ldrb.w	r3, [r7, #139]	@ 0x8b
 800eaf4:	2b01      	cmp	r3, #1
 800eaf6:	d117      	bne.n	800eb28 <ProcessRadioRxDone+0x574>
 800eaf8:	79bb      	ldrb	r3, [r7, #6]
 800eafa:	2b03      	cmp	r3, #3
 800eafc:	d10d      	bne.n	800eb1a <ProcessRadioRxDone+0x566>
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 800eafe:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800eb02:	f003 0320 	and.w	r3, r3, #32
 800eb06:	b2db      	uxtb	r3, r3
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 800eb08:	2b00      	cmp	r3, #0
 800eb0a:	d106      	bne.n	800eb1a <ProcessRadioRxDone+0x566>
                                        ( macMsgData.FHDR.FCtrl.Bits.AdrAckReq != 0 ) ) )
 800eb0c:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800eb10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800eb14:	b2db      	uxtb	r3, r3
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 800eb16:	2b00      	cmp	r3, #0
 800eb18:	d006      	beq.n	800eb28 <ProcessRadioRxDone+0x574>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800eb1a:	4b2c      	ldr	r3, [pc, #176]	@ (800ebcc <ProcessRadioRxDone+0x618>)
 800eb1c:	2201      	movs	r2, #1
 800eb1e:	f883 2425 	strb.w	r2, [r3, #1061]	@ 0x425
                PrepareRxDoneAbort( );
 800eb22:	f7ff fd21 	bl	800e568 <PrepareRxDoneAbort>
                return;
 800eb26:	e1f7      	b.n	800ef18 <ProcessRadioRxDone+0x964>
                PrepareRxDoneAbort( );
                return;
            }
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
            // Get downlink frame counter value
            macCryptoStatus = GetFCntDown( addrID, fType, &macMsgData, Nvm.MacGroup2.Version, &fCntID, &downLinkCounter );
 800eb28:	79b9      	ldrb	r1, [r7, #6]
 800eb2a:	4c29      	ldr	r4, [pc, #164]	@ (800ebd0 <ProcessRadioRxDone+0x61c>)
 800eb2c:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 800eb30:	f897 008a 	ldrb.w	r0, [r7, #138]	@ 0x8a
 800eb34:	f107 0308 	add.w	r3, r7, #8
 800eb38:	9301      	str	r3, [sp, #4]
 800eb3a:	1dfb      	adds	r3, r7, #7
 800eb3c:	9300      	str	r3, [sp, #0]
 800eb3e:	f8d4 3118 	ldr.w	r3, [r4, #280]	@ 0x118
 800eb42:	f000 fee7 	bl	800f914 <GetFCntDown>
 800eb46:	4603      	mov	r3, r0
 800eb48:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800eb4c:	f897 3088 	ldrb.w	r3, [r7, #136]	@ 0x88
 800eb50:	2b00      	cmp	r3, #0
 800eb52:	d017      	beq.n	800eb84 <ProcessRadioRxDone+0x5d0>
            {
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED )
 800eb54:	f897 3088 	ldrb.w	r3, [r7, #136]	@ 0x88
 800eb58:	2b07      	cmp	r3, #7
 800eb5a:	d104      	bne.n	800eb66 <ProcessRadioRxDone+0x5b2>
                {
                    // Catch the case of repeated downlink frame counter
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_REPEATED;
 800eb5c:	4b1b      	ldr	r3, [pc, #108]	@ (800ebcc <ProcessRadioRxDone+0x618>)
 800eb5e:	2208      	movs	r2, #8
 800eb60:	f883 2425 	strb.w	r2, [r3, #1061]	@ 0x425
 800eb64:	e003      	b.n	800eb6e <ProcessRadioRxDone+0x5ba>
                }
                else
                {
                    // Other errors
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800eb66:	4b19      	ldr	r3, [pc, #100]	@ (800ebcc <ProcessRadioRxDone+0x618>)
 800eb68:	2201      	movs	r2, #1
 800eb6a:	f883 2425 	strb.w	r2, [r3, #1061]	@ 0x425
                }
                MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 800eb6e:	68bb      	ldr	r3, [r7, #8]
 800eb70:	4a16      	ldr	r2, [pc, #88]	@ (800ebcc <ProcessRadioRxDone+0x618>)
 800eb72:	f8c2 3434 	str.w	r3, [r2, #1076]	@ 0x434
                MacCtx.MlmeIndication.DownLinkCounter = downLinkCounter;
 800eb76:	68bb      	ldr	r3, [r7, #8]
 800eb78:	4a14      	ldr	r2, [pc, #80]	@ (800ebcc <ProcessRadioRxDone+0x618>)
 800eb7a:	f8c2 3470 	str.w	r3, [r2, #1136]	@ 0x470
                PrepareRxDoneAbort( );
 800eb7e:	f7ff fcf3 	bl	800e568 <PrepareRxDoneAbort>
                return;
 800eb82:	e1c9      	b.n	800ef18 <ProcessRadioRxDone+0x964>
            }

            macCryptoStatus = LoRaMacCryptoUnsecureMessage( addrID, address, fCntID, downLinkCounter, &macMsgData );
 800eb84:	79fa      	ldrb	r2, [r7, #7]
 800eb86:	68b9      	ldr	r1, [r7, #8]
 800eb88:	f897 008a 	ldrb.w	r0, [r7, #138]	@ 0x8a
 800eb8c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800eb90:	9300      	str	r3, [sp, #0]
 800eb92:	460b      	mov	r3, r1
 800eb94:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 800eb98:	f005 fd86 	bl	80146a8 <LoRaMacCryptoUnsecureMessage>
 800eb9c:	4603      	mov	r3, r0
 800eb9e:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800eba2:	f897 3088 	ldrb.w	r3, [r7, #136]	@ 0x88
 800eba6:	2b00      	cmp	r3, #0
 800eba8:	d016      	beq.n	800ebd8 <ProcessRadioRxDone+0x624>
            {
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_ADDRESS )
 800ebaa:	f897 3088 	ldrb.w	r3, [r7, #136]	@ 0x88
 800ebae:	2b02      	cmp	r3, #2
 800ebb0:	d104      	bne.n	800ebbc <ProcessRadioRxDone+0x608>
                {
                    // We are not the destination of this frame.
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ADDRESS_FAIL;
 800ebb2:	4b06      	ldr	r3, [pc, #24]	@ (800ebcc <ProcessRadioRxDone+0x618>)
 800ebb4:	220a      	movs	r2, #10
 800ebb6:	f883 2425 	strb.w	r2, [r3, #1061]	@ 0x425
 800ebba:	e003      	b.n	800ebc4 <ProcessRadioRxDone+0x610>
                }
                else
                {
                    // MIC calculation fail
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_MIC_FAIL;
 800ebbc:	4b03      	ldr	r3, [pc, #12]	@ (800ebcc <ProcessRadioRxDone+0x618>)
 800ebbe:	220b      	movs	r2, #11
 800ebc0:	f883 2425 	strb.w	r2, [r3, #1061]	@ 0x425
                }
                PrepareRxDoneAbort( );
 800ebc4:	f7ff fcd0 	bl	800e568 <PrepareRxDoneAbort>
                return;
 800ebc8:	e1a6      	b.n	800ef18 <ProcessRadioRxDone+0x964>
 800ebca:	bf00      	nop
 800ebcc:	200008d0 	.word	0x200008d0
 800ebd0:	20000df0 	.word	0x20000df0
 800ebd4:	20000b08 	.word	0x20000b08
            }
#endif /* LORAMAC_VERSION */

            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800ebd8:	4bb5      	ldr	r3, [pc, #724]	@ (800eeb0 <ProcessRadioRxDone+0x8fc>)
 800ebda:	2200      	movs	r2, #0
 800ebdc:	f883 2425 	strb.w	r2, [r3, #1061]	@ 0x425
            MacCtx.McpsIndication.Multicast = multicast;
 800ebe0:	4ab3      	ldr	r2, [pc, #716]	@ (800eeb0 <ProcessRadioRxDone+0x8fc>)
 800ebe2:	f897 308b 	ldrb.w	r3, [r7, #139]	@ 0x8b
 800ebe6:	f882 3426 	strb.w	r3, [r2, #1062]	@ 0x426
            MacCtx.McpsIndication.FramePending = macMsgData.FHDR.FCtrl.Bits.FPending;
 800ebea:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800ebee:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800ebf2:	b2db      	uxtb	r3, r3
 800ebf4:	461a      	mov	r2, r3
 800ebf6:	4bae      	ldr	r3, [pc, #696]	@ (800eeb0 <ProcessRadioRxDone+0x8fc>)
 800ebf8:	f883 2429 	strb.w	r2, [r3, #1065]	@ 0x429
            MacCtx.McpsIndication.Buffer = NULL;
 800ebfc:	4bac      	ldr	r3, [pc, #688]	@ (800eeb0 <ProcessRadioRxDone+0x8fc>)
 800ebfe:	2200      	movs	r2, #0
 800ec00:	f8c3 242c 	str.w	r2, [r3, #1068]	@ 0x42c
            MacCtx.McpsIndication.BufferSize = 0;
 800ec04:	4baa      	ldr	r3, [pc, #680]	@ (800eeb0 <ProcessRadioRxDone+0x8fc>)
 800ec06:	2200      	movs	r2, #0
 800ec08:	f883 2430 	strb.w	r2, [r3, #1072]	@ 0x430
            MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 800ec0c:	68bb      	ldr	r3, [r7, #8]
 800ec0e:	4aa8      	ldr	r2, [pc, #672]	@ (800eeb0 <ProcessRadioRxDone+0x8fc>)
 800ec10:	f8c2 3434 	str.w	r3, [r2, #1076]	@ 0x434
            MacCtx.MlmeIndication.DownLinkCounter = downLinkCounter;
 800ec14:	68bb      	ldr	r3, [r7, #8]
 800ec16:	4aa6      	ldr	r2, [pc, #664]	@ (800eeb0 <ProcessRadioRxDone+0x8fc>)
 800ec18:	f8c2 3470 	str.w	r3, [r2, #1136]	@ 0x470
            MacCtx.McpsIndication.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 800ec1c:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800ec20:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800ec24:	b2db      	uxtb	r3, r3
 800ec26:	2b00      	cmp	r3, #0
 800ec28:	bf14      	ite	ne
 800ec2a:	2301      	movne	r3, #1
 800ec2c:	2300      	moveq	r3, #0
 800ec2e:	b2da      	uxtb	r2, r3
 800ec30:	4b9f      	ldr	r3, [pc, #636]	@ (800eeb0 <ProcessRadioRxDone+0x8fc>)
 800ec32:	f883 2432 	strb.w	r2, [r3, #1074]	@ 0x432

            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800ec36:	4b9e      	ldr	r3, [pc, #632]	@ (800eeb0 <ProcessRadioRxDone+0x8fc>)
 800ec38:	2200      	movs	r2, #0
 800ec3a:	f883 2445 	strb.w	r2, [r3, #1093]	@ 0x445
            MacCtx.McpsConfirm.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 800ec3e:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800ec42:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800ec46:	b2db      	uxtb	r3, r3
 800ec48:	2b00      	cmp	r3, #0
 800ec4a:	bf14      	ite	ne
 800ec4c:	2301      	movne	r3, #1
 800ec4e:	2300      	moveq	r3, #0
 800ec50:	b2da      	uxtb	r2, r3
 800ec52:	4b97      	ldr	r3, [pc, #604]	@ (800eeb0 <ProcessRadioRxDone+0x8fc>)
 800ec54:	f883 2448 	strb.w	r2, [r3, #1096]	@ 0x448

            // Reset ADR ACK Counter only, when RX1 or RX2 slot
            if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 800ec58:	4b95      	ldr	r3, [pc, #596]	@ (800eeb0 <ProcessRadioRxDone+0x8fc>)
 800ec5a:	f893 3493 	ldrb.w	r3, [r3, #1171]	@ 0x493
 800ec5e:	2b00      	cmp	r3, #0
 800ec60:	d004      	beq.n	800ec6c <ProcessRadioRxDone+0x6b8>
                ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_2 ) )
 800ec62:	4b93      	ldr	r3, [pc, #588]	@ (800eeb0 <ProcessRadioRxDone+0x8fc>)
 800ec64:	f893 3493 	ldrb.w	r3, [r3, #1171]	@ 0x493
            if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 800ec68:	2b01      	cmp	r3, #1
 800ec6a:	d106      	bne.n	800ec7a <ProcessRadioRxDone+0x6c6>
            {
                Nvm.MacGroup1.AdrAckCounter = 0;
 800ec6c:	4b91      	ldr	r3, [pc, #580]	@ (800eeb4 <ProcessRadioRxDone+0x900>)
 800ec6e:	2200      	movs	r2, #0
 800ec70:	629a      	str	r2, [r3, #40]	@ 0x28
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
                Nvm.MacGroup2.DownlinkReceived = true;
 800ec72:	4b90      	ldr	r3, [pc, #576]	@ (800eeb4 <ProcessRadioRxDone+0x900>)
 800ec74:	2201      	movs	r2, #1
 800ec76:	f883 210a 	strb.w	r2, [r3, #266]	@ 0x10a
#endif /* LORAMAC_VERSION */
            }

            // MCPS Indication and ack requested handling
            if( multicast == 1 )
 800ec7a:	f897 308b 	ldrb.w	r3, [r7, #139]	@ 0x8b
 800ec7e:	2b01      	cmp	r3, #1
 800ec80:	d104      	bne.n	800ec8c <ProcessRadioRxDone+0x6d8>
            {
                MacCtx.McpsIndication.McpsIndication = MCPS_MULTICAST;
 800ec82:	4b8b      	ldr	r3, [pc, #556]	@ (800eeb0 <ProcessRadioRxDone+0x8fc>)
 800ec84:	2202      	movs	r2, #2
 800ec86:	f883 2424 	strb.w	r2, [r3, #1060]	@ 0x424
 800ec8a:	e034      	b.n	800ecf6 <ProcessRadioRxDone+0x742>
            }
            else
            {
                if( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN )
 800ec8c:	f897 307c 	ldrb.w	r3, [r7, #124]	@ 0x7c
 800ec90:	f023 031f 	bic.w	r3, r3, #31
 800ec94:	b2db      	uxtb	r3, r3
 800ec96:	2ba0      	cmp	r3, #160	@ 0xa0
 800ec98:	d125      	bne.n	800ece6 <ProcessRadioRxDone+0x732>
                {
                    Nvm.MacGroup1.SrvAckRequested = true;
 800ec9a:	4b86      	ldr	r3, [pc, #536]	@ (800eeb4 <ProcessRadioRxDone+0x900>)
 800ec9c:	2201      	movs	r2, #1
 800ec9e:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
                    if( Nvm.MacGroup2.Version.Fields.Minor == 0 )
 800eca2:	4b84      	ldr	r3, [pc, #528]	@ (800eeb4 <ProcessRadioRxDone+0x900>)
 800eca4:	f893 311a 	ldrb.w	r3, [r3, #282]	@ 0x11a
 800eca8:	2b00      	cmp	r3, #0
 800ecaa:	d102      	bne.n	800ecb2 <ProcessRadioRxDone+0x6fe>
                    {
                        Nvm.MacGroup1.LastRxMic = macMsgData.MIC;
 800ecac:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ecae:	4a81      	ldr	r2, [pc, #516]	@ (800eeb4 <ProcessRadioRxDone+0x900>)
 800ecb0:	6353      	str	r3, [r2, #52]	@ 0x34
                    }
                    MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 800ecb2:	4b7f      	ldr	r3, [pc, #508]	@ (800eeb0 <ProcessRadioRxDone+0x8fc>)
 800ecb4:	2201      	movs	r2, #1
 800ecb6:	f883 2424 	strb.w	r2, [r3, #1060]	@ 0x424

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
                    // Handle response timeout for class c and class b downlinks
                    if( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 800ecba:	4b7d      	ldr	r3, [pc, #500]	@ (800eeb0 <ProcessRadioRxDone+0x8fc>)
 800ecbc:	f893 3493 	ldrb.w	r3, [r3, #1171]	@ 0x493
 800ecc0:	2b00      	cmp	r3, #0
 800ecc2:	d018      	beq.n	800ecf6 <ProcessRadioRxDone+0x742>
                        ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_2 ) )
 800ecc4:	4b7a      	ldr	r3, [pc, #488]	@ (800eeb0 <ProcessRadioRxDone+0x8fc>)
 800ecc6:	f893 3493 	ldrb.w	r3, [r3, #1171]	@ 0x493
                    if( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 800ecca:	2b01      	cmp	r3, #1
 800eccc:	d013      	beq.n	800ecf6 <ProcessRadioRxDone+0x742>
                    {
                        // Calculate timeout
                        MacCtx.McpsIndication.ResponseTimeout = Nvm.MacGroup2.MacParams.RxBCTimeout;
 800ecce:	4b79      	ldr	r3, [pc, #484]	@ (800eeb4 <ProcessRadioRxDone+0x900>)
 800ecd0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ecd4:	4a76      	ldr	r2, [pc, #472]	@ (800eeb0 <ProcessRadioRxDone+0x8fc>)
 800ecd6:	f8c2 3440 	str.w	r3, [r2, #1088]	@ 0x440
                        MacCtx.ResponseTimeoutStartTime = RxDoneParams.LastRxDone;
 800ecda:	4b77      	ldr	r3, [pc, #476]	@ (800eeb8 <ProcessRadioRxDone+0x904>)
 800ecdc:	681b      	ldr	r3, [r3, #0]
 800ecde:	4a74      	ldr	r2, [pc, #464]	@ (800eeb0 <ProcessRadioRxDone+0x8fc>)
 800ece0:	f8c2 349c 	str.w	r3, [r2, #1180]	@ 0x49c
 800ece4:	e007      	b.n	800ecf6 <ProcessRadioRxDone+0x742>
                    }
#endif /* LORAMAC_VERSION */
                }
                else
                {
                    Nvm.MacGroup1.SrvAckRequested = false;
 800ece6:	4b73      	ldr	r3, [pc, #460]	@ (800eeb4 <ProcessRadioRxDone+0x900>)
 800ece8:	2200      	movs	r2, #0
 800ecea:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
                    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 800ecee:	4b70      	ldr	r3, [pc, #448]	@ (800eeb0 <ProcessRadioRxDone+0x8fc>)
 800ecf0:	2200      	movs	r2, #0
 800ecf2:	f883 2424 	strb.w	r2, [r3, #1060]	@ 0x424
                }
            }

            RemoveMacCommands( MacCtx.RxStatus.RxSlot, macMsgData.FHDR.FCtrl, MacCtx.McpsConfirm.McpsRequest );
 800ecf6:	4b6e      	ldr	r3, [pc, #440]	@ (800eeb0 <ProcessRadioRxDone+0x8fc>)
 800ecf8:	f893 3493 	ldrb.w	r3, [r3, #1171]	@ 0x493
 800ecfc:	4a6c      	ldr	r2, [pc, #432]	@ (800eeb0 <ProcessRadioRxDone+0x8fc>)
 800ecfe:	f892 2444 	ldrb.w	r2, [r2, #1092]	@ 0x444
 800ed02:	f897 1040 	ldrb.w	r1, [r7, #64]	@ 0x40
 800ed06:	4618      	mov	r0, r3
 800ed08:	f001 ff96 	bl	8010c38 <RemoveMacCommands>

            switch( fType )
 800ed0c:	79bb      	ldrb	r3, [r7, #6]
 800ed0e:	2b03      	cmp	r3, #3
 800ed10:	d873      	bhi.n	800edfa <ProcessRadioRxDone+0x846>
 800ed12:	a201      	add	r2, pc, #4	@ (adr r2, 800ed18 <ProcessRadioRxDone+0x764>)
 800ed14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ed18:	0800ed29 	.word	0x0800ed29
 800ed1c:	0800ed79 	.word	0x0800ed79
 800ed20:	0800edaf 	.word	0x0800edaf
 800ed24:	0800edd5 	.word	0x0800edd5
                    * |    > 0   |   X  |  > 0  |       X      |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FOpts field
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 800ed28:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800ed2c:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800ed30:	b2db      	uxtb	r3, r3
 800ed32:	461c      	mov	r4, r3
 800ed34:	4b5e      	ldr	r3, [pc, #376]	@ (800eeb0 <ProcessRadioRxDone+0x8fc>)
 800ed36:	f893 3493 	ldrb.w	r3, [r3, #1171]	@ 0x493
 800ed3a:	f997 107f 	ldrsb.w	r1, [r7, #127]	@ 0x7f
 800ed3e:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 800ed42:	f102 0010 	add.w	r0, r2, #16
 800ed46:	9300      	str	r3, [sp, #0]
 800ed48:	460b      	mov	r3, r1
 800ed4a:	4622      	mov	r2, r4
 800ed4c:	2100      	movs	r1, #0
 800ed4e:	f000 ff45 	bl	800fbdc <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800ed52:	f897 2054 	ldrb.w	r2, [r7, #84]	@ 0x54
 800ed56:	4b56      	ldr	r3, [pc, #344]	@ (800eeb0 <ProcessRadioRxDone+0x8fc>)
 800ed58:	f883 2427 	strb.w	r2, [r3, #1063]	@ 0x427
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 800ed5c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ed5e:	4a54      	ldr	r2, [pc, #336]	@ (800eeb0 <ProcessRadioRxDone+0x8fc>)
 800ed60:	f8c2 342c 	str.w	r3, [r2, #1068]	@ 0x42c
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 800ed64:	f897 205c 	ldrb.w	r2, [r7, #92]	@ 0x5c
 800ed68:	4b51      	ldr	r3, [pc, #324]	@ (800eeb0 <ProcessRadioRxDone+0x8fc>)
 800ed6a:	f883 2430 	strb.w	r2, [r3, #1072]	@ 0x430
                    MacCtx.McpsIndication.RxData = true;
 800ed6e:	4b50      	ldr	r3, [pc, #320]	@ (800eeb0 <ProcessRadioRxDone+0x8fc>)
 800ed70:	2201      	movs	r2, #1
 800ed72:	f883 2431 	strb.w	r2, [r3, #1073]	@ 0x431
                    break;
 800ed76:	e047      	b.n	800ee08 <ProcessRadioRxDone+0x854>
                    * |    > 0   |   X  |   -   |       -      |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FOpts field
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 800ed78:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800ed7c:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800ed80:	b2db      	uxtb	r3, r3
 800ed82:	461c      	mov	r4, r3
 800ed84:	4b4a      	ldr	r3, [pc, #296]	@ (800eeb0 <ProcessRadioRxDone+0x8fc>)
 800ed86:	f893 3493 	ldrb.w	r3, [r3, #1171]	@ 0x493
 800ed8a:	f997 107f 	ldrsb.w	r1, [r7, #127]	@ 0x7f
 800ed8e:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 800ed92:	f102 0010 	add.w	r0, r2, #16
 800ed96:	9300      	str	r3, [sp, #0]
 800ed98:	460b      	mov	r3, r1
 800ed9a:	4622      	mov	r2, r4
 800ed9c:	2100      	movs	r1, #0
 800ed9e:	f000 ff1d 	bl	800fbdc <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800eda2:	f897 2054 	ldrb.w	r2, [r7, #84]	@ 0x54
 800eda6:	4b42      	ldr	r3, [pc, #264]	@ (800eeb0 <ProcessRadioRxDone+0x8fc>)
 800eda8:	f883 2427 	strb.w	r2, [r3, #1063]	@ 0x427
                    break;
 800edac:	e02c      	b.n	800ee08 <ProcessRadioRxDone+0x854>
                    * |    = 0   |   -  |  = 0  | MAC commands |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FRMPayload
                    ProcessMacCommands( macMsgData.FRMPayload, 0, macMsgData.FRMPayloadSize, snr, MacCtx.RxStatus.RxSlot );
 800edae:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800edb0:	f897 205c 	ldrb.w	r2, [r7, #92]	@ 0x5c
 800edb4:	4b3e      	ldr	r3, [pc, #248]	@ (800eeb0 <ProcessRadioRxDone+0x8fc>)
 800edb6:	f893 3493 	ldrb.w	r3, [r3, #1171]	@ 0x493
 800edba:	f997 107f 	ldrsb.w	r1, [r7, #127]	@ 0x7f
 800edbe:	9300      	str	r3, [sp, #0]
 800edc0:	460b      	mov	r3, r1
 800edc2:	2100      	movs	r1, #0
 800edc4:	f000 ff0a 	bl	800fbdc <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800edc8:	f897 2054 	ldrb.w	r2, [r7, #84]	@ 0x54
 800edcc:	4b38      	ldr	r3, [pc, #224]	@ (800eeb0 <ProcessRadioRxDone+0x8fc>)
 800edce:	f883 2427 	strb.w	r2, [r3, #1063]	@ 0x427
                    break;
 800edd2:	e019      	b.n	800ee08 <ProcessRadioRxDone+0x854>
                    * |    = 0   |   -  |  > 0  |       X      |
                    * +----------+------+-------+--------------+
                    */

                    // No MAC commands just application payload
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800edd4:	f897 2054 	ldrb.w	r2, [r7, #84]	@ 0x54
 800edd8:	4b35      	ldr	r3, [pc, #212]	@ (800eeb0 <ProcessRadioRxDone+0x8fc>)
 800edda:	f883 2427 	strb.w	r2, [r3, #1063]	@ 0x427
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 800edde:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ede0:	4a33      	ldr	r2, [pc, #204]	@ (800eeb0 <ProcessRadioRxDone+0x8fc>)
 800ede2:	f8c2 342c 	str.w	r3, [r2, #1068]	@ 0x42c
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 800ede6:	f897 205c 	ldrb.w	r2, [r7, #92]	@ 0x5c
 800edea:	4b31      	ldr	r3, [pc, #196]	@ (800eeb0 <ProcessRadioRxDone+0x8fc>)
 800edec:	f883 2430 	strb.w	r2, [r3, #1072]	@ 0x430
                    MacCtx.McpsIndication.RxData = true;
 800edf0:	4b2f      	ldr	r3, [pc, #188]	@ (800eeb0 <ProcessRadioRxDone+0x8fc>)
 800edf2:	2201      	movs	r2, #1
 800edf4:	f883 2431 	strb.w	r2, [r3, #1073]	@ 0x431
                    break;
 800edf8:	e006      	b.n	800ee08 <ProcessRadioRxDone+0x854>
                }
                default:
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800edfa:	4b2d      	ldr	r3, [pc, #180]	@ (800eeb0 <ProcessRadioRxDone+0x8fc>)
 800edfc:	2201      	movs	r2, #1
 800edfe:	f883 2425 	strb.w	r2, [r3, #1061]	@ 0x425
                    PrepareRxDoneAbort( );
 800ee02:	f7ff fbb1 	bl	800e568 <PrepareRxDoneAbort>
                    break;
 800ee06:	bf00      	nop
            }

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
            if( ( macMsgData.FPort == LORAMAC_CERT_FPORT ) && ( Nvm.MacGroup2.IsCertPortOn == false ) )
 800ee08:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 800ee0c:	2be0      	cmp	r3, #224	@ 0xe0
 800ee0e:	d118      	bne.n	800ee42 <ProcessRadioRxDone+0x88e>
 800ee10:	4b28      	ldr	r3, [pc, #160]	@ (800eeb4 <ProcessRadioRxDone+0x900>)
 800ee12:	f893 310b 	ldrb.w	r3, [r3, #267]	@ 0x10b
 800ee16:	f083 0301 	eor.w	r3, r3, #1
 800ee1a:	b2db      	uxtb	r3, r3
 800ee1c:	2b00      	cmp	r3, #0
 800ee1e:	d010      	beq.n	800ee42 <ProcessRadioRxDone+0x88e>
            { // Do not notify the upper layer of data reception on FPort LORAMAC_CERT_FPORT if the port
              // handling is disabled.
                MacCtx.McpsIndication.Port = macMsgData.FPort;
 800ee20:	f897 2054 	ldrb.w	r2, [r7, #84]	@ 0x54
 800ee24:	4b22      	ldr	r3, [pc, #136]	@ (800eeb0 <ProcessRadioRxDone+0x8fc>)
 800ee26:	f883 2427 	strb.w	r2, [r3, #1063]	@ 0x427
                MacCtx.McpsIndication.Buffer = NULL;
 800ee2a:	4b21      	ldr	r3, [pc, #132]	@ (800eeb0 <ProcessRadioRxDone+0x8fc>)
 800ee2c:	2200      	movs	r2, #0
 800ee2e:	f8c3 242c 	str.w	r2, [r3, #1068]	@ 0x42c
                MacCtx.McpsIndication.BufferSize = 0;
 800ee32:	4b1f      	ldr	r3, [pc, #124]	@ (800eeb0 <ProcessRadioRxDone+0x8fc>)
 800ee34:	2200      	movs	r2, #0
 800ee36:	f883 2430 	strb.w	r2, [r3, #1072]	@ 0x430
                MacCtx.McpsIndication.RxData = false;
 800ee3a:	4b1d      	ldr	r3, [pc, #116]	@ (800eeb0 <ProcessRadioRxDone+0x8fc>)
 800ee3c:	2200      	movs	r2, #0
 800ee3e:	f883 2431 	strb.w	r2, [r3, #1073]	@ 0x431
            }
#endif /* LORAMAC_VERSION */

            // Provide always an indication, skip the callback to the user application,
            // in case of a confirmed downlink retransmission.
            MacCtx.MacFlags.Bits.McpsInd = 1;
 800ee42:	4a1b      	ldr	r2, [pc, #108]	@ (800eeb0 <ProcessRadioRxDone+0x8fc>)
 800ee44:	f892 3495 	ldrb.w	r3, [r2, #1173]	@ 0x495
 800ee48:	f043 0302 	orr.w	r3, r3, #2
 800ee4c:	f882 3495 	strb.w	r3, [r2, #1173]	@ 0x495

            break;
 800ee50:	e03d      	b.n	800eece <ProcessRadioRxDone+0x91a>
        case FRAME_TYPE_PROPRIETARY:
            memcpy1( MacCtx.RxPayload, &payload[pktHeaderLen], size - pktHeaderLen );
 800ee52:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 800ee56:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800ee5a:	18d1      	adds	r1, r2, r3
 800ee5c:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 800ee60:	b29b      	uxth	r3, r3
 800ee62:	f8b7 2082 	ldrh.w	r2, [r7, #130]	@ 0x82
 800ee66:	1ad3      	subs	r3, r2, r3
 800ee68:	b29b      	uxth	r3, r3
 800ee6a:	461a      	mov	r2, r3
 800ee6c:	4813      	ldr	r0, [pc, #76]	@ (800eebc <ProcessRadioRxDone+0x908>)
 800ee6e:	f008 fae6 	bl	801743e <memcpy1>

            MacCtx.McpsIndication.McpsIndication = MCPS_PROPRIETARY;
 800ee72:	4b0f      	ldr	r3, [pc, #60]	@ (800eeb0 <ProcessRadioRxDone+0x8fc>)
 800ee74:	2203      	movs	r2, #3
 800ee76:	f883 2424 	strb.w	r2, [r3, #1060]	@ 0x424
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800ee7a:	4b0d      	ldr	r3, [pc, #52]	@ (800eeb0 <ProcessRadioRxDone+0x8fc>)
 800ee7c:	2200      	movs	r2, #0
 800ee7e:	f883 2425 	strb.w	r2, [r3, #1061]	@ 0x425
            MacCtx.McpsIndication.Buffer = MacCtx.RxPayload;
 800ee82:	4b0b      	ldr	r3, [pc, #44]	@ (800eeb0 <ProcessRadioRxDone+0x8fc>)
 800ee84:	4a0d      	ldr	r2, [pc, #52]	@ (800eebc <ProcessRadioRxDone+0x908>)
 800ee86:	f8c3 242c 	str.w	r2, [r3, #1068]	@ 0x42c
            MacCtx.McpsIndication.BufferSize = size - pktHeaderLen;
 800ee8a:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 800ee8e:	b2da      	uxtb	r2, r3
 800ee90:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 800ee94:	1ad3      	subs	r3, r2, r3
 800ee96:	b2da      	uxtb	r2, r3
 800ee98:	4b05      	ldr	r3, [pc, #20]	@ (800eeb0 <ProcessRadioRxDone+0x8fc>)
 800ee9a:	f883 2430 	strb.w	r2, [r3, #1072]	@ 0x430

            MacCtx.MacFlags.Bits.McpsInd = 1;
 800ee9e:	4a04      	ldr	r2, [pc, #16]	@ (800eeb0 <ProcessRadioRxDone+0x8fc>)
 800eea0:	f892 3495 	ldrb.w	r3, [r2, #1173]	@ 0x495
 800eea4:	f043 0302 	orr.w	r3, r3, #2
 800eea8:	f882 3495 	strb.w	r3, [r2, #1173]	@ 0x495
            break;
 800eeac:	e00f      	b.n	800eece <ProcessRadioRxDone+0x91a>
 800eeae:	bf00      	nop
 800eeb0:	200008d0 	.word	0x200008d0
 800eeb4:	20000df0 	.word	0x20000df0
 800eeb8:	20001980 	.word	0x20001980
 800eebc:	20000b08 	.word	0x20000b08
        default:
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800eec0:	4b17      	ldr	r3, [pc, #92]	@ (800ef20 <ProcessRadioRxDone+0x96c>)
 800eec2:	2201      	movs	r2, #1
 800eec4:	f883 2425 	strb.w	r2, [r3, #1061]	@ 0x425
            PrepareRxDoneAbort( );
 800eec8:	f7ff fb4e 	bl	800e568 <PrepareRxDoneAbort>
            break;
 800eecc:	bf00      	nop
    }
    MacCtx.MacFlags.Bits.MacDone = 1;
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    // Verify if we need to disable the RetransmitTimeoutTimer
    // Only aplies if downlink is received on Rx1 or Rx2 windows.
    if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 800eece:	4b14      	ldr	r3, [pc, #80]	@ (800ef20 <ProcessRadioRxDone+0x96c>)
 800eed0:	f893 3493 	ldrb.w	r3, [r3, #1171]	@ 0x493
 800eed4:	2b00      	cmp	r3, #0
 800eed6:	d004      	beq.n	800eee2 <ProcessRadioRxDone+0x92e>
        ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_2 ) )
 800eed8:	4b11      	ldr	r3, [pc, #68]	@ (800ef20 <ProcessRadioRxDone+0x96c>)
 800eeda:	f893 3493 	ldrb.w	r3, [r3, #1171]	@ 0x493
    if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 800eede:	2b01      	cmp	r3, #1
 800eee0:	d10c      	bne.n	800eefc <ProcessRadioRxDone+0x948>
    {
        if( MacCtx.NodeAckRequested == true )
 800eee2:	4b0f      	ldr	r3, [pc, #60]	@ (800ef20 <ProcessRadioRxDone+0x96c>)
 800eee4:	f893 341e 	ldrb.w	r3, [r3, #1054]	@ 0x41e
 800eee8:	2b00      	cmp	r3, #0
 800eeea:	d007      	beq.n	800eefc <ProcessRadioRxDone+0x948>
        {
            if( MacCtx.McpsConfirm.AckReceived == true )
 800eeec:	4b0c      	ldr	r3, [pc, #48]	@ (800ef20 <ProcessRadioRxDone+0x96c>)
 800eeee:	f893 3448 	ldrb.w	r3, [r3, #1096]	@ 0x448
 800eef2:	2b00      	cmp	r3, #0
 800eef4:	d002      	beq.n	800eefc <ProcessRadioRxDone+0x948>
            {
                OnRetransmitTimeoutTimerEvent( NULL );
 800eef6:	2000      	movs	r0, #0
 800eef8:	f000 fce4 	bl	800f8c4 <OnRetransmitTimeoutTimerEvent>
            }
        }
    }

    if( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_CLASS_C )
 800eefc:	4b08      	ldr	r3, [pc, #32]	@ (800ef20 <ProcessRadioRxDone+0x96c>)
 800eefe:	f893 3493 	ldrb.w	r3, [r3, #1171]	@ 0x493
 800ef02:	2b02      	cmp	r3, #2
 800ef04:	d006      	beq.n	800ef14 <ProcessRadioRxDone+0x960>
    {
        MacCtx.MacFlags.Bits.MacDone = 1;
 800ef06:	4a06      	ldr	r2, [pc, #24]	@ (800ef20 <ProcessRadioRxDone+0x96c>)
 800ef08:	f892 3495 	ldrb.w	r3, [r2, #1173]	@ 0x495
 800ef0c:	f043 0320 	orr.w	r3, r3, #32
 800ef10:	f882 3495 	strb.w	r3, [r2, #1173]	@ 0x495
    }
#endif /* LORAMAC_VERSION */

    UpdateRxSlotIdleState( );
 800ef14:	f7ff fa82 	bl	800e41c <UpdateRxSlotIdleState>
}
 800ef18:	3794      	adds	r7, #148	@ 0x94
 800ef1a:	46bd      	mov	sp, r7
 800ef1c:	bd90      	pop	{r4, r7, pc}
 800ef1e:	bf00      	nop
 800ef20:	200008d0 	.word	0x200008d0

0800ef24 <ProcessRadioTxTimeout>:

static void ProcessRadioTxTimeout( void )
{
 800ef24:	b580      	push	{r7, lr}
 800ef26:	af00      	add	r7, sp, #0
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800ef28:	4b11      	ldr	r3, [pc, #68]	@ (800ef70 <ProcessRadioTxTimeout+0x4c>)
 800ef2a:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 800ef2e:	2b02      	cmp	r3, #2
 800ef30:	d002      	beq.n	800ef38 <ProcessRadioTxTimeout+0x14>
    {
        Radio.Sleep( );
 800ef32:	4b10      	ldr	r3, [pc, #64]	@ (800ef74 <ProcessRadioTxTimeout+0x50>)
 800ef34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ef36:	4798      	blx	r3
    }
    UpdateRxSlotIdleState( );
 800ef38:	f7ff fa70 	bl	800e41c <UpdateRxSlotIdleState>

    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT;
 800ef3c:	4b0e      	ldr	r3, [pc, #56]	@ (800ef78 <ProcessRadioTxTimeout+0x54>)
 800ef3e:	2202      	movs	r2, #2
 800ef40:	f883 2445 	strb.w	r2, [r3, #1093]	@ 0x445
    LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT );
 800ef44:	2002      	movs	r0, #2
 800ef46:	f004 fd57 	bl	80139f8 <LoRaMacConfirmQueueSetStatusCmn>
    if( MacCtx.NodeAckRequested == true )
 800ef4a:	4b0b      	ldr	r3, [pc, #44]	@ (800ef78 <ProcessRadioTxTimeout+0x54>)
 800ef4c:	f893 341e 	ldrb.w	r3, [r3, #1054]	@ 0x41e
 800ef50:	2b00      	cmp	r3, #0
 800ef52:	d003      	beq.n	800ef5c <ProcessRadioTxTimeout+0x38>
    {
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        MacCtx.AckTimeoutRetry = true;
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
        MacCtx.RetransmitTimeoutRetry = true;
 800ef54:	4b08      	ldr	r3, [pc, #32]	@ (800ef78 <ProcessRadioTxTimeout+0x54>)
 800ef56:	2201      	movs	r2, #1
 800ef58:	f883 241d 	strb.w	r2, [r3, #1053]	@ 0x41d
#endif /* LORAMAC_VERSION */
    }
    MacCtx.MacFlags.Bits.MacDone = 1;
 800ef5c:	4a06      	ldr	r2, [pc, #24]	@ (800ef78 <ProcessRadioTxTimeout+0x54>)
 800ef5e:	f892 3495 	ldrb.w	r3, [r2, #1173]	@ 0x495
 800ef62:	f043 0320 	orr.w	r3, r3, #32
 800ef66:	f882 3495 	strb.w	r3, [r2, #1173]	@ 0x495
}
 800ef6a:	bf00      	nop
 800ef6c:	bd80      	pop	{r7, pc}
 800ef6e:	bf00      	nop
 800ef70:	20000df0 	.word	0x20000df0
 800ef74:	0801f874 	.word	0x0801f874
 800ef78:	200008d0 	.word	0x200008d0

0800ef7c <HandleRadioRxErrorTimeout>:

static void HandleRadioRxErrorTimeout( LoRaMacEventInfoStatus_t rx1EventInfoStatus, LoRaMacEventInfoStatus_t rx2EventInfoStatus )
{
 800ef7c:	b580      	push	{r7, lr}
 800ef7e:	b084      	sub	sp, #16
 800ef80:	af00      	add	r7, sp, #0
 800ef82:	4603      	mov	r3, r0
 800ef84:	460a      	mov	r2, r1
 800ef86:	71fb      	strb	r3, [r7, #7]
 800ef88:	4613      	mov	r3, r2
 800ef8a:	71bb      	strb	r3, [r7, #6]
    bool classBRx = false;
 800ef8c:	2300      	movs	r3, #0
 800ef8e:	73fb      	strb	r3, [r7, #15]

    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800ef90:	4b3d      	ldr	r3, [pc, #244]	@ (800f088 <HandleRadioRxErrorTimeout+0x10c>)
 800ef92:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 800ef96:	2b02      	cmp	r3, #2
 800ef98:	d002      	beq.n	800efa0 <HandleRadioRxErrorTimeout+0x24>
    {
        Radio.Sleep( );
 800ef9a:	4b3c      	ldr	r3, [pc, #240]	@ (800f08c <HandleRadioRxErrorTimeout+0x110>)
 800ef9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ef9e:	4798      	blx	r3
    }

    if( LoRaMacClassBIsBeaconExpected( ) == true )
 800efa0:	f004 f870 	bl	8013084 <LoRaMacClassBIsBeaconExpected>
 800efa4:	4603      	mov	r3, r0
 800efa6:	2b00      	cmp	r3, #0
 800efa8:	d007      	beq.n	800efba <HandleRadioRxErrorTimeout+0x3e>
    {
        LoRaMacClassBSetBeaconState( BEACON_STATE_TIMEOUT );
 800efaa:	2002      	movs	r0, #2
 800efac:	f004 f81e 	bl	8012fec <LoRaMacClassBSetBeaconState>
        LoRaMacClassBBeaconTimerEvent( NULL );
 800efb0:	2000      	movs	r0, #0
 800efb2:	f004 f840 	bl	8013036 <LoRaMacClassBBeaconTimerEvent>
        classBRx = true;
 800efb6:	2301      	movs	r3, #1
 800efb8:	73fb      	strb	r3, [r7, #15]
    }
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800efba:	4b33      	ldr	r3, [pc, #204]	@ (800f088 <HandleRadioRxErrorTimeout+0x10c>)
 800efbc:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 800efc0:	2b01      	cmp	r3, #1
 800efc2:	d119      	bne.n	800eff8 <HandleRadioRxErrorTimeout+0x7c>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 800efc4:	f004 f865 	bl	8013092 <LoRaMacClassBIsPingExpected>
 800efc8:	4603      	mov	r3, r0
 800efca:	2b00      	cmp	r3, #0
 800efcc:	d007      	beq.n	800efde <HandleRadioRxErrorTimeout+0x62>
        {
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800efce:	2000      	movs	r0, #0
 800efd0:	f004 f816 	bl	8013000 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 800efd4:	2000      	movs	r0, #0
 800efd6:	f004 f837 	bl	8013048 <LoRaMacClassBPingSlotTimerEvent>
            classBRx = true;
 800efda:	2301      	movs	r3, #1
 800efdc:	73fb      	strb	r3, [r7, #15]
        }
        if( LoRaMacClassBIsMulticastExpected( ) == true )
 800efde:	f004 f85f 	bl	80130a0 <LoRaMacClassBIsMulticastExpected>
 800efe2:	4603      	mov	r3, r0
 800efe4:	2b00      	cmp	r3, #0
 800efe6:	d007      	beq.n	800eff8 <HandleRadioRxErrorTimeout+0x7c>
        {
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800efe8:	2000      	movs	r0, #0
 800efea:	f004 f813 	bl	8013014 <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800efee:	2000      	movs	r0, #0
 800eff0:	f004 f833 	bl	801305a <LoRaMacClassBMulticastSlotTimerEvent>
            classBRx = true;
 800eff4:	2301      	movs	r3, #1
 800eff6:	73fb      	strb	r3, [r7, #15]
        }
    }

    if( classBRx == false )
 800eff8:	7bfb      	ldrb	r3, [r7, #15]
 800effa:	f083 0301 	eor.w	r3, r3, #1
 800effe:	b2db      	uxtb	r3, r3
 800f000:	2b00      	cmp	r3, #0
 800f002:	d03b      	beq.n	800f07c <HandleRadioRxErrorTimeout+0x100>
    {
        if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 800f004:	4b22      	ldr	r3, [pc, #136]	@ (800f090 <HandleRadioRxErrorTimeout+0x114>)
 800f006:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800f00a:	2b00      	cmp	r3, #0
 800f00c:	d122      	bne.n	800f054 <HandleRadioRxErrorTimeout+0xd8>
        {
            if( MacCtx.NodeAckRequested == true )
 800f00e:	4b20      	ldr	r3, [pc, #128]	@ (800f090 <HandleRadioRxErrorTimeout+0x114>)
 800f010:	f893 341e 	ldrb.w	r3, [r3, #1054]	@ 0x41e
 800f014:	2b00      	cmp	r3, #0
 800f016:	d003      	beq.n	800f020 <HandleRadioRxErrorTimeout+0xa4>
            {
                MacCtx.McpsConfirm.Status = rx1EventInfoStatus;
 800f018:	4a1d      	ldr	r2, [pc, #116]	@ (800f090 <HandleRadioRxErrorTimeout+0x114>)
 800f01a:	79fb      	ldrb	r3, [r7, #7]
 800f01c:	f882 3445 	strb.w	r3, [r2, #1093]	@ 0x445
            }
            LoRaMacConfirmQueueSetStatusCmn( rx1EventInfoStatus );
 800f020:	79fb      	ldrb	r3, [r7, #7]
 800f022:	4618      	mov	r0, r3
 800f024:	f004 fce8 	bl	80139f8 <LoRaMacConfirmQueueSetStatusCmn>

            if( TimerGetElapsedTime( Nvm.MacGroup1.LastTxDoneTime ) >= MacCtx.RxWindow2Delay )
 800f028:	4b17      	ldr	r3, [pc, #92]	@ (800f088 <HandleRadioRxErrorTimeout+0x10c>)
 800f02a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f02c:	4618      	mov	r0, r3
 800f02e:	f00c fc77 	bl	801b920 <UTIL_TIMER_GetElapsedTime>
 800f032:	4602      	mov	r2, r0
 800f034:	4b16      	ldr	r3, [pc, #88]	@ (800f090 <HandleRadioRxErrorTimeout+0x114>)
 800f036:	f8d3 33b4 	ldr.w	r3, [r3, #948]	@ 0x3b4
 800f03a:	429a      	cmp	r2, r3
 800f03c:	d31e      	bcc.n	800f07c <HandleRadioRxErrorTimeout+0x100>
            {
                TimerStop( &MacCtx.RxWindowTimer2 );
 800f03e:	4815      	ldr	r0, [pc, #84]	@ (800f094 <HandleRadioRxErrorTimeout+0x118>)
 800f040:	f00c fb42 	bl	801b6c8 <UTIL_TIMER_Stop>
                MacCtx.MacFlags.Bits.MacDone = 1;
 800f044:	4a12      	ldr	r2, [pc, #72]	@ (800f090 <HandleRadioRxErrorTimeout+0x114>)
 800f046:	f892 3495 	ldrb.w	r3, [r2, #1173]	@ 0x495
 800f04a:	f043 0320 	orr.w	r3, r3, #32
 800f04e:	f882 3495 	strb.w	r3, [r2, #1173]	@ 0x495
 800f052:	e013      	b.n	800f07c <HandleRadioRxErrorTimeout+0x100>
            }
        }
        else
        {
            if( MacCtx.NodeAckRequested == true )
 800f054:	4b0e      	ldr	r3, [pc, #56]	@ (800f090 <HandleRadioRxErrorTimeout+0x114>)
 800f056:	f893 341e 	ldrb.w	r3, [r3, #1054]	@ 0x41e
 800f05a:	2b00      	cmp	r3, #0
 800f05c:	d003      	beq.n	800f066 <HandleRadioRxErrorTimeout+0xea>
            {
                MacCtx.McpsConfirm.Status = rx2EventInfoStatus;
 800f05e:	4a0c      	ldr	r2, [pc, #48]	@ (800f090 <HandleRadioRxErrorTimeout+0x114>)
 800f060:	79bb      	ldrb	r3, [r7, #6]
 800f062:	f882 3445 	strb.w	r3, [r2, #1093]	@ 0x445
            }
            LoRaMacConfirmQueueSetStatusCmn( rx2EventInfoStatus );
 800f066:	79bb      	ldrb	r3, [r7, #6]
 800f068:	4618      	mov	r0, r3
 800f06a:	f004 fcc5 	bl	80139f8 <LoRaMacConfirmQueueSetStatusCmn>
            if( Nvm.MacGroup2.DeviceClass != CLASS_C )
            {
                MacCtx.MacFlags.Bits.MacDone = 1;
            }
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
            MacCtx.MacFlags.Bits.MacDone = 1;
 800f06e:	4a08      	ldr	r2, [pc, #32]	@ (800f090 <HandleRadioRxErrorTimeout+0x114>)
 800f070:	f892 3495 	ldrb.w	r3, [r2, #1173]	@ 0x495
 800f074:	f043 0320 	orr.w	r3, r3, #32
 800f078:	f882 3495 	strb.w	r3, [r2, #1173]	@ 0x495
#endif /* LORAMAC_VERSION */
        }
    }

    UpdateRxSlotIdleState( );
 800f07c:	f7ff f9ce 	bl	800e41c <UpdateRxSlotIdleState>
}
 800f080:	bf00      	nop
 800f082:	3710      	adds	r7, #16
 800f084:	46bd      	mov	sp, r7
 800f086:	bd80      	pop	{r7, pc}
 800f088:	20000df0 	.word	0x20000df0
 800f08c:	0801f874 	.word	0x0801f874
 800f090:	200008d0 	.word	0x200008d0
 800f094:	20000c68 	.word	0x20000c68

0800f098 <ProcessRadioRxError>:

static void ProcessRadioRxError( void )
{
 800f098:	b580      	push	{r7, lr}
 800f09a:	af00      	add	r7, sp, #0
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_ERROR, LORAMAC_EVENT_INFO_STATUS_RX2_ERROR );
 800f09c:	2106      	movs	r1, #6
 800f09e:	2005      	movs	r0, #5
 800f0a0:	f7ff ff6c 	bl	800ef7c <HandleRadioRxErrorTimeout>
}
 800f0a4:	bf00      	nop
 800f0a6:	bd80      	pop	{r7, pc}

0800f0a8 <ProcessRadioRxTimeout>:

static void ProcessRadioRxTimeout( void )
{
 800f0a8:	b580      	push	{r7, lr}
 800f0aa:	af00      	add	r7, sp, #0
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_TIMEOUT, LORAMAC_EVENT_INFO_STATUS_RX2_TIMEOUT );
 800f0ac:	2104      	movs	r1, #4
 800f0ae:	2003      	movs	r0, #3
 800f0b0:	f7ff ff64 	bl	800ef7c <HandleRadioRxErrorTimeout>
}
 800f0b4:	bf00      	nop
 800f0b6:	bd80      	pop	{r7, pc}

0800f0b8 <LoRaMacHandleIrqEvents>:

static void LoRaMacHandleIrqEvents( void )
{
 800f0b8:	b580      	push	{r7, lr}
 800f0ba:	b084      	sub	sp, #16
 800f0bc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f0be:	f3ef 8310 	mrs	r3, PRIMASK
 800f0c2:	607b      	str	r3, [r7, #4]
  return(result);
 800f0c4:	687b      	ldr	r3, [r7, #4]
    LoRaMacRadioEvents_t events;

    CRITICAL_SECTION_BEGIN( );
 800f0c6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800f0c8:	b672      	cpsid	i
}
 800f0ca:	bf00      	nop
    events = LoRaMacRadioEvents;
 800f0cc:	4b1d      	ldr	r3, [pc, #116]	@ (800f144 <LoRaMacHandleIrqEvents+0x8c>)
 800f0ce:	681b      	ldr	r3, [r3, #0]
 800f0d0:	603b      	str	r3, [r7, #0]
    LoRaMacRadioEvents.Value = 0;
 800f0d2:	4b1c      	ldr	r3, [pc, #112]	@ (800f144 <LoRaMacHandleIrqEvents+0x8c>)
 800f0d4:	2200      	movs	r2, #0
 800f0d6:	601a      	str	r2, [r3, #0]
 800f0d8:	68fb      	ldr	r3, [r7, #12]
 800f0da:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f0dc:	68bb      	ldr	r3, [r7, #8]
 800f0de:	f383 8810 	msr	PRIMASK, r3
}
 800f0e2:	bf00      	nop
    CRITICAL_SECTION_END( );

    if( events.Value != 0 )
 800f0e4:	683b      	ldr	r3, [r7, #0]
 800f0e6:	2b00      	cmp	r3, #0
 800f0e8:	d027      	beq.n	800f13a <LoRaMacHandleIrqEvents+0x82>
    {
        if( events.Events.TxDone == 1 )
 800f0ea:	783b      	ldrb	r3, [r7, #0]
 800f0ec:	f003 0320 	and.w	r3, r3, #32
 800f0f0:	b2db      	uxtb	r3, r3
 800f0f2:	2b00      	cmp	r3, #0
 800f0f4:	d001      	beq.n	800f0fa <LoRaMacHandleIrqEvents+0x42>
        {
            ProcessRadioTxDone( );
 800f0f6:	f7ff f9a9 	bl	800e44c <ProcessRadioTxDone>
        }
        if( events.Events.RxDone == 1 )
 800f0fa:	783b      	ldrb	r3, [r7, #0]
 800f0fc:	f003 0310 	and.w	r3, r3, #16
 800f100:	b2db      	uxtb	r3, r3
 800f102:	2b00      	cmp	r3, #0
 800f104:	d001      	beq.n	800f10a <LoRaMacHandleIrqEvents+0x52>
        {
            ProcessRadioRxDone( );
 800f106:	f7ff fa55 	bl	800e5b4 <ProcessRadioRxDone>
        }
        if( events.Events.TxTimeout == 1 )
 800f10a:	783b      	ldrb	r3, [r7, #0]
 800f10c:	f003 0308 	and.w	r3, r3, #8
 800f110:	b2db      	uxtb	r3, r3
 800f112:	2b00      	cmp	r3, #0
 800f114:	d001      	beq.n	800f11a <LoRaMacHandleIrqEvents+0x62>
        {
            ProcessRadioTxTimeout( );
 800f116:	f7ff ff05 	bl	800ef24 <ProcessRadioTxTimeout>
        }
        if( events.Events.RxError == 1 )
 800f11a:	783b      	ldrb	r3, [r7, #0]
 800f11c:	f003 0304 	and.w	r3, r3, #4
 800f120:	b2db      	uxtb	r3, r3
 800f122:	2b00      	cmp	r3, #0
 800f124:	d001      	beq.n	800f12a <LoRaMacHandleIrqEvents+0x72>
        {
            ProcessRadioRxError( );
 800f126:	f7ff ffb7 	bl	800f098 <ProcessRadioRxError>
        }
        if( events.Events.RxTimeout == 1 )
 800f12a:	783b      	ldrb	r3, [r7, #0]
 800f12c:	f003 0302 	and.w	r3, r3, #2
 800f130:	b2db      	uxtb	r3, r3
 800f132:	2b00      	cmp	r3, #0
 800f134:	d001      	beq.n	800f13a <LoRaMacHandleIrqEvents+0x82>
        {
            ProcessRadioRxTimeout( );
 800f136:	f7ff ffb7 	bl	800f0a8 <ProcessRadioRxTimeout>
        }
    }
}
 800f13a:	bf00      	nop
 800f13c:	3710      	adds	r7, #16
 800f13e:	46bd      	mov	sp, r7
 800f140:	bd80      	pop	{r7, pc}
 800f142:	bf00      	nop
 800f144:	20001978 	.word	0x20001978

0800f148 <LoRaMacIsBusy>:

bool LoRaMacIsBusy( void )
{
 800f148:	b480      	push	{r7}
 800f14a:	af00      	add	r7, sp, #0
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    if( LoRaMacRadioEvents.Events.RxProcessPending == 1 )
 800f14c:	4b0c      	ldr	r3, [pc, #48]	@ (800f180 <LoRaMacIsBusy+0x38>)
 800f14e:	781b      	ldrb	r3, [r3, #0]
 800f150:	f003 0301 	and.w	r3, r3, #1
 800f154:	b2db      	uxtb	r3, r3
 800f156:	2b00      	cmp	r3, #0
 800f158:	d001      	beq.n	800f15e <LoRaMacIsBusy+0x16>
    {
        return true;
 800f15a:	2301      	movs	r3, #1
 800f15c:	e00c      	b.n	800f178 <LoRaMacIsBusy+0x30>
    }
#endif /* LORAMAC_VERSION */

    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 800f15e:	4b09      	ldr	r3, [pc, #36]	@ (800f184 <LoRaMacIsBusy+0x3c>)
 800f160:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800f164:	2b00      	cmp	r3, #0
 800f166:	d106      	bne.n	800f176 <LoRaMacIsBusy+0x2e>
        ( MacCtx.AllowRequests == LORAMAC_REQUEST_HANDLING_ON ) )
 800f168:	4b06      	ldr	r3, [pc, #24]	@ (800f184 <LoRaMacIsBusy+0x3c>)
 800f16a:	f893 3496 	ldrb.w	r3, [r3, #1174]	@ 0x496
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 800f16e:	2b01      	cmp	r3, #1
 800f170:	d101      	bne.n	800f176 <LoRaMacIsBusy+0x2e>
    {
        return false;
 800f172:	2300      	movs	r3, #0
 800f174:	e000      	b.n	800f178 <LoRaMacIsBusy+0x30>
    }
    return true;
 800f176:	2301      	movs	r3, #1
}
 800f178:	4618      	mov	r0, r3
 800f17a:	46bd      	mov	sp, r7
 800f17c:	bc80      	pop	{r7}
 800f17e:	4770      	bx	lr
 800f180:	20001978 	.word	0x20001978
 800f184:	200008d0 	.word	0x200008d0

0800f188 <LoRaMacEnableRequests>:

static void LoRaMacEnableRequests( LoRaMacRequestHandling_t requestState )
{
 800f188:	b480      	push	{r7}
 800f18a:	b083      	sub	sp, #12
 800f18c:	af00      	add	r7, sp, #0
 800f18e:	4603      	mov	r3, r0
 800f190:	71fb      	strb	r3, [r7, #7]
    MacCtx.AllowRequests = requestState;
 800f192:	4a04      	ldr	r2, [pc, #16]	@ (800f1a4 <LoRaMacEnableRequests+0x1c>)
 800f194:	79fb      	ldrb	r3, [r7, #7]
 800f196:	f882 3496 	strb.w	r3, [r2, #1174]	@ 0x496
}
 800f19a:	bf00      	nop
 800f19c:	370c      	adds	r7, #12
 800f19e:	46bd      	mov	sp, r7
 800f1a0:	bc80      	pop	{r7}
 800f1a2:	4770      	bx	lr
 800f1a4:	200008d0 	.word	0x200008d0

0800f1a8 <LoRaMacHandleRequestEvents>:

static void LoRaMacHandleRequestEvents( void )
{
 800f1a8:	b580      	push	{r7, lr}
 800f1aa:	b082      	sub	sp, #8
 800f1ac:	af00      	add	r7, sp, #0
    // Handle events
    LoRaMacFlags_t reqEvents = MacCtx.MacFlags;
 800f1ae:	4b2c      	ldr	r3, [pc, #176]	@ (800f260 <LoRaMacHandleRequestEvents+0xb8>)
 800f1b0:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800f1b4:	713b      	strb	r3, [r7, #4]

    if( MacCtx.MacState == LORAMAC_IDLE )
 800f1b6:	4b2a      	ldr	r3, [pc, #168]	@ (800f260 <LoRaMacHandleRequestEvents+0xb8>)
 800f1b8:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800f1bc:	2b00      	cmp	r3, #0
 800f1be:	d14a      	bne.n	800f256 <LoRaMacHandleRequestEvents+0xae>
    {
        // Update event bits
        if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 800f1c0:	4b27      	ldr	r3, [pc, #156]	@ (800f260 <LoRaMacHandleRequestEvents+0xb8>)
 800f1c2:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800f1c6:	f003 0301 	and.w	r3, r3, #1
 800f1ca:	b2db      	uxtb	r3, r3
 800f1cc:	2b00      	cmp	r3, #0
 800f1ce:	d006      	beq.n	800f1de <LoRaMacHandleRequestEvents+0x36>
        {
            MacCtx.MacFlags.Bits.McpsReq = 0;
 800f1d0:	4a23      	ldr	r2, [pc, #140]	@ (800f260 <LoRaMacHandleRequestEvents+0xb8>)
 800f1d2:	f892 3495 	ldrb.w	r3, [r2, #1173]	@ 0x495
 800f1d6:	f36f 0300 	bfc	r3, #0, #1
 800f1da:	f882 3495 	strb.w	r3, [r2, #1173]	@ 0x495
        }

        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800f1de:	4b20      	ldr	r3, [pc, #128]	@ (800f260 <LoRaMacHandleRequestEvents+0xb8>)
 800f1e0:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800f1e4:	f003 0304 	and.w	r3, r3, #4
 800f1e8:	b2db      	uxtb	r3, r3
 800f1ea:	2b00      	cmp	r3, #0
 800f1ec:	d006      	beq.n	800f1fc <LoRaMacHandleRequestEvents+0x54>
        {
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 800f1ee:	4a1c      	ldr	r2, [pc, #112]	@ (800f260 <LoRaMacHandleRequestEvents+0xb8>)
 800f1f0:	f892 3495 	ldrb.w	r3, [r2, #1173]	@ 0x495
 800f1f4:	f36f 0382 	bfc	r3, #2, #1
 800f1f8:	f882 3495 	strb.w	r3, [r2, #1173]	@ 0x495
        }

        // Allow requests again
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 800f1fc:	2001      	movs	r0, #1
 800f1fe:	f7ff ffc3 	bl	800f188 <LoRaMacEnableRequests>

        // Handle callbacks
        if( reqEvents.Bits.McpsReq == 1 )
 800f202:	793b      	ldrb	r3, [r7, #4]
 800f204:	f003 0301 	and.w	r3, r3, #1
 800f208:	b2db      	uxtb	r3, r3
 800f20a:	2b00      	cmp	r3, #0
 800f20c:	d005      	beq.n	800f21a <LoRaMacHandleRequestEvents+0x72>
        {
            MacCtx.MacPrimitives->MacMcpsConfirm( &MacCtx.McpsConfirm );
 800f20e:	4b14      	ldr	r3, [pc, #80]	@ (800f260 <LoRaMacHandleRequestEvents+0xb8>)
 800f210:	f8d3 3344 	ldr.w	r3, [r3, #836]	@ 0x344
 800f214:	681b      	ldr	r3, [r3, #0]
 800f216:	4813      	ldr	r0, [pc, #76]	@ (800f264 <LoRaMacHandleRequestEvents+0xbc>)
 800f218:	4798      	blx	r3
        }

        if( reqEvents.Bits.MlmeReq == 1 )
 800f21a:	793b      	ldrb	r3, [r7, #4]
 800f21c:	f003 0304 	and.w	r3, r3, #4
 800f220:	b2db      	uxtb	r3, r3
 800f222:	2b00      	cmp	r3, #0
 800f224:	d00e      	beq.n	800f244 <LoRaMacHandleRequestEvents+0x9c>
        {
            LoRaMacConfirmQueueHandleCb( &MacCtx.MlmeConfirm );
 800f226:	4810      	ldr	r0, [pc, #64]	@ (800f268 <LoRaMacHandleRequestEvents+0xc0>)
 800f228:	f004 fc34 	bl	8013a94 <LoRaMacConfirmQueueHandleCb>
            if( LoRaMacConfirmQueueGetCnt( ) > 0 )
 800f22c:	f004 fc7e 	bl	8013b2c <LoRaMacConfirmQueueGetCnt>
 800f230:	4603      	mov	r3, r0
 800f232:	2b00      	cmp	r3, #0
 800f234:	d006      	beq.n	800f244 <LoRaMacHandleRequestEvents+0x9c>
            {
                MacCtx.MacFlags.Bits.MlmeReq = 1;
 800f236:	4a0a      	ldr	r2, [pc, #40]	@ (800f260 <LoRaMacHandleRequestEvents+0xb8>)
 800f238:	f892 3495 	ldrb.w	r3, [r2, #1173]	@ 0x495
 800f23c:	f043 0304 	orr.w	r3, r3, #4
 800f240:	f882 3495 	strb.w	r3, [r2, #1173]	@ 0x495
            }
        }

        // Start beaconing again
        LoRaMacClassBResumeBeaconing( );
 800f244:	f003 ff4a 	bl	80130dc <LoRaMacClassBResumeBeaconing>

        // Procedure done. Reset variables.
        MacCtx.MacFlags.Bits.MacDone = 0;
 800f248:	4a05      	ldr	r2, [pc, #20]	@ (800f260 <LoRaMacHandleRequestEvents+0xb8>)
 800f24a:	f892 3495 	ldrb.w	r3, [r2, #1173]	@ 0x495
 800f24e:	f36f 1345 	bfc	r3, #5, #1
 800f252:	f882 3495 	strb.w	r3, [r2, #1173]	@ 0x495
    }
}
 800f256:	bf00      	nop
 800f258:	3708      	adds	r7, #8
 800f25a:	46bd      	mov	sp, r7
 800f25c:	bd80      	pop	{r7, pc}
 800f25e:	bf00      	nop
 800f260:	200008d0 	.word	0x200008d0
 800f264:	20000d14 	.word	0x20000d14
 800f268:	20000d28 	.word	0x20000d28

0800f26c <LoRaMacHandleScheduleUplinkEvent>:

static void LoRaMacHandleScheduleUplinkEvent( void )
{
 800f26c:	b580      	push	{r7, lr}
 800f26e:	b082      	sub	sp, #8
 800f270:	af00      	add	r7, sp, #0
    // Handle events
    if( MacCtx.MacState == LORAMAC_IDLE )
 800f272:	4b07      	ldr	r3, [pc, #28]	@ (800f290 <LoRaMacHandleScheduleUplinkEvent+0x24>)
 800f274:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800f278:	2b00      	cmp	r3, #0
 800f27a:	d105      	bne.n	800f288 <LoRaMacHandleScheduleUplinkEvent+0x1c>
    {
        // Verify if sticky MAC commands are pending or not
        bool isStickyMacCommandPending = false;
 800f27c:	2300      	movs	r3, #0
 800f27e:	71fb      	strb	r3, [r7, #7]
        LoRaMacCommandsStickyCmdsPending( &isStickyMacCommandPending );
 800f280:	1dfb      	adds	r3, r7, #7
 800f282:	4618      	mov	r0, r3
 800f284:	f004 f9ec 	bl	8013660 <LoRaMacCommandsStickyCmdsPending>
        {// Setup MLME indication
            /* ST_WORKAROUND: remove unnecessary mlme operation to prevent uplinks burst */
            //SetMlmeScheduleUplinkIndication( );
        }
    }
}
 800f288:	bf00      	nop
 800f28a:	3708      	adds	r7, #8
 800f28c:	46bd      	mov	sp, r7
 800f28e:	bd80      	pop	{r7, pc}
 800f290:	200008d0 	.word	0x200008d0

0800f294 <LoRaMacHandleIndicationEvents>:

static void LoRaMacHandleIndicationEvents( void )
{
 800f294:	b580      	push	{r7, lr}
 800f296:	af00      	add	r7, sp, #0
    // Handle MLME indication
    if( MacCtx.MacFlags.Bits.MlmeInd == 1 )
 800f298:	4b16      	ldr	r3, [pc, #88]	@ (800f2f4 <LoRaMacHandleIndicationEvents+0x60>)
 800f29a:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800f29e:	f003 0308 	and.w	r3, r3, #8
 800f2a2:	b2db      	uxtb	r3, r3
 800f2a4:	2b00      	cmp	r3, #0
 800f2a6:	d00d      	beq.n	800f2c4 <LoRaMacHandleIndicationEvents+0x30>
    {
        MacCtx.MacFlags.Bits.MlmeInd = 0;
 800f2a8:	4a12      	ldr	r2, [pc, #72]	@ (800f2f4 <LoRaMacHandleIndicationEvents+0x60>)
 800f2aa:	f892 3495 	ldrb.w	r3, [r2, #1173]	@ 0x495
 800f2ae:	f36f 03c3 	bfc	r3, #3, #1
 800f2b2:	f882 3495 	strb.w	r3, [r2, #1173]	@ 0x495
        MacCtx.MacPrimitives->MacMlmeIndication( &MacCtx.MlmeIndication, &MacCtx.RxStatus );
 800f2b6:	4b0f      	ldr	r3, [pc, #60]	@ (800f2f4 <LoRaMacHandleIndicationEvents+0x60>)
 800f2b8:	f8d3 3344 	ldr.w	r3, [r3, #836]	@ 0x344
 800f2bc:	68db      	ldr	r3, [r3, #12]
 800f2be:	490e      	ldr	r1, [pc, #56]	@ (800f2f8 <LoRaMacHandleIndicationEvents+0x64>)
 800f2c0:	480e      	ldr	r0, [pc, #56]	@ (800f2fc <LoRaMacHandleIndicationEvents+0x68>)
 800f2c2:	4798      	blx	r3
    }
    */
    /*ST_WORKAROUND_END */

    // Handle MCPS indication
    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 800f2c4:	4b0b      	ldr	r3, [pc, #44]	@ (800f2f4 <LoRaMacHandleIndicationEvents+0x60>)
 800f2c6:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800f2ca:	f003 0302 	and.w	r3, r3, #2
 800f2ce:	b2db      	uxtb	r3, r3
 800f2d0:	2b00      	cmp	r3, #0
 800f2d2:	d00d      	beq.n	800f2f0 <LoRaMacHandleIndicationEvents+0x5c>
    {
        MacCtx.MacFlags.Bits.McpsInd = 0;
 800f2d4:	4a07      	ldr	r2, [pc, #28]	@ (800f2f4 <LoRaMacHandleIndicationEvents+0x60>)
 800f2d6:	f892 3495 	ldrb.w	r3, [r2, #1173]	@ 0x495
 800f2da:	f36f 0341 	bfc	r3, #1, #1
 800f2de:	f882 3495 	strb.w	r3, [r2, #1173]	@ 0x495
        MacCtx.MacPrimitives->MacMcpsIndication( &MacCtx.McpsIndication, &MacCtx.RxStatus );
 800f2e2:	4b04      	ldr	r3, [pc, #16]	@ (800f2f4 <LoRaMacHandleIndicationEvents+0x60>)
 800f2e4:	f8d3 3344 	ldr.w	r3, [r3, #836]	@ 0x344
 800f2e8:	685b      	ldr	r3, [r3, #4]
 800f2ea:	4903      	ldr	r1, [pc, #12]	@ (800f2f8 <LoRaMacHandleIndicationEvents+0x64>)
 800f2ec:	4804      	ldr	r0, [pc, #16]	@ (800f300 <LoRaMacHandleIndicationEvents+0x6c>)
 800f2ee:	4798      	blx	r3
    }
}
 800f2f0:	bf00      	nop
 800f2f2:	bd80      	pop	{r7, pc}
 800f2f4:	200008d0 	.word	0x200008d0
 800f2f8:	20000d60 	.word	0x20000d60
 800f2fc:	20000d3c 	.word	0x20000d3c
 800f300:	20000cf4 	.word	0x20000cf4

0800f304 <LoRaMacHandleMcpsRequest>:

static void LoRaMacHandleMcpsRequest( void )
{
 800f304:	b580      	push	{r7, lr}
 800f306:	b082      	sub	sp, #8
 800f308:	af00      	add	r7, sp, #0
    // Handle MCPS uplinks
    if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 800f30a:	4b2a      	ldr	r3, [pc, #168]	@ (800f3b4 <LoRaMacHandleMcpsRequest+0xb0>)
 800f30c:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800f310:	f003 0301 	and.w	r3, r3, #1
 800f314:	b2db      	uxtb	r3, r3
 800f316:	2b00      	cmp	r3, #0
 800f318:	d048      	beq.n	800f3ac <LoRaMacHandleMcpsRequest+0xa8>
    {
        bool stopRetransmission = false;
 800f31a:	2300      	movs	r3, #0
 800f31c:	71fb      	strb	r3, [r7, #7]
        bool waitForRetransmission = false;
 800f31e:	2300      	movs	r3, #0
 800f320:	71bb      	strb	r3, [r7, #6]

        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 800f322:	4b24      	ldr	r3, [pc, #144]	@ (800f3b4 <LoRaMacHandleMcpsRequest+0xb0>)
 800f324:	f893 3444 	ldrb.w	r3, [r3, #1092]	@ 0x444
 800f328:	2b00      	cmp	r3, #0
 800f32a:	d004      	beq.n	800f336 <LoRaMacHandleMcpsRequest+0x32>
            ( MacCtx.McpsConfirm.McpsRequest == MCPS_PROPRIETARY ) )
 800f32c:	4b21      	ldr	r3, [pc, #132]	@ (800f3b4 <LoRaMacHandleMcpsRequest+0xb0>)
 800f32e:	f893 3444 	ldrb.w	r3, [r3, #1092]	@ 0x444
        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 800f332:	2b03      	cmp	r3, #3
 800f334:	d104      	bne.n	800f340 <LoRaMacHandleMcpsRequest+0x3c>
        {
            stopRetransmission = CheckRetransUnconfirmedUplink( );
 800f336:	f002 f8f9 	bl	801152c <CheckRetransUnconfirmedUplink>
 800f33a:	4603      	mov	r3, r0
 800f33c:	71fb      	strb	r3, [r7, #7]
 800f33e:	e010      	b.n	800f362 <LoRaMacHandleMcpsRequest+0x5e>
        }
        else if( MacCtx.McpsConfirm.McpsRequest == MCPS_CONFIRMED )
 800f340:	4b1c      	ldr	r3, [pc, #112]	@ (800f3b4 <LoRaMacHandleMcpsRequest+0xb0>)
 800f342:	f893 3444 	ldrb.w	r3, [r3, #1092]	@ 0x444
 800f346:	2b01      	cmp	r3, #1
 800f348:	d10b      	bne.n	800f362 <LoRaMacHandleMcpsRequest+0x5e>
            else
            {
                waitForRetransmission = true;
            }
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
            if( MacCtx.RetransmitTimeoutRetry == true )
 800f34a:	4b1a      	ldr	r3, [pc, #104]	@ (800f3b4 <LoRaMacHandleMcpsRequest+0xb0>)
 800f34c:	f893 341d 	ldrb.w	r3, [r3, #1053]	@ 0x41d
 800f350:	2b00      	cmp	r3, #0
 800f352:	d004      	beq.n	800f35e <LoRaMacHandleMcpsRequest+0x5a>
            {
                stopRetransmission = CheckRetransConfirmedUplink( );
 800f354:	f002 f916 	bl	8011584 <CheckRetransConfirmedUplink>
 800f358:	4603      	mov	r3, r0
 800f35a:	71fb      	strb	r3, [r7, #7]
 800f35c:	e001      	b.n	800f362 <LoRaMacHandleMcpsRequest+0x5e>
            }
            else
            {
                waitForRetransmission = true;
 800f35e:	2301      	movs	r3, #1
 800f360:	71bb      	strb	r3, [r7, #6]
            }
#endif /* LORAMAC_VERSION */
        }

        if( stopRetransmission == true )
 800f362:	79fb      	ldrb	r3, [r7, #7]
 800f364:	2b00      	cmp	r3, #0
 800f366:	d00d      	beq.n	800f384 <LoRaMacHandleMcpsRequest+0x80>
        {// Stop retransmission
            TimerStop( &MacCtx.TxDelayedTimer );
 800f368:	4813      	ldr	r0, [pc, #76]	@ (800f3b8 <LoRaMacHandleMcpsRequest+0xb4>)
 800f36a:	f00c f9ad 	bl	801b6c8 <UTIL_TIMER_Stop>
            MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 800f36e:	4b11      	ldr	r3, [pc, #68]	@ (800f3b4 <LoRaMacHandleMcpsRequest+0xb0>)
 800f370:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800f374:	f023 0320 	bic.w	r3, r3, #32
 800f378:	4a0e      	ldr	r2, [pc, #56]	@ (800f3b4 <LoRaMacHandleMcpsRequest+0xb0>)
 800f37a:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
            StopRetransmission( );
 800f37e:	f002 f93b 	bl	80115f8 <StopRetransmission>
#endif /* LORAMAC_VERSION */
            // Sends the same frame again
            OnTxDelayedTimerEvent( NULL );
        }
    }
}
 800f382:	e013      	b.n	800f3ac <LoRaMacHandleMcpsRequest+0xa8>
        else if( waitForRetransmission == false )
 800f384:	79bb      	ldrb	r3, [r7, #6]
 800f386:	f083 0301 	eor.w	r3, r3, #1
 800f38a:	b2db      	uxtb	r3, r3
 800f38c:	2b00      	cmp	r3, #0
 800f38e:	d00d      	beq.n	800f3ac <LoRaMacHandleMcpsRequest+0xa8>
            MacCtx.MacFlags.Bits.MacDone = 0;
 800f390:	4a08      	ldr	r2, [pc, #32]	@ (800f3b4 <LoRaMacHandleMcpsRequest+0xb0>)
 800f392:	f892 3495 	ldrb.w	r3, [r2, #1173]	@ 0x495
 800f396:	f36f 1345 	bfc	r3, #5, #1
 800f39a:	f882 3495 	strb.w	r3, [r2, #1173]	@ 0x495
            MacCtx.RetransmitTimeoutRetry = false;
 800f39e:	4b05      	ldr	r3, [pc, #20]	@ (800f3b4 <LoRaMacHandleMcpsRequest+0xb0>)
 800f3a0:	2200      	movs	r2, #0
 800f3a2:	f883 241d 	strb.w	r2, [r3, #1053]	@ 0x41d
            OnTxDelayedTimerEvent( NULL );
 800f3a6:	2000      	movs	r0, #0
 800f3a8:	f000 f9c8 	bl	800f73c <OnTxDelayedTimerEvent>
}
 800f3ac:	bf00      	nop
 800f3ae:	3708      	adds	r7, #8
 800f3b0:	46bd      	mov	sp, r7
 800f3b2:	bd80      	pop	{r7, pc}
 800f3b4:	200008d0 	.word	0x200008d0
 800f3b8:	20000c38 	.word	0x20000c38

0800f3bc <LoRaMacHandleMlmeRequest>:

static void LoRaMacHandleMlmeRequest( void )
{
 800f3bc:	b580      	push	{r7, lr}
 800f3be:	af00      	add	r7, sp, #0
    // Handle join request
    if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800f3c0:	4b18      	ldr	r3, [pc, #96]	@ (800f424 <LoRaMacHandleMlmeRequest+0x68>)
 800f3c2:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800f3c6:	f003 0304 	and.w	r3, r3, #4
 800f3ca:	b2db      	uxtb	r3, r3
 800f3cc:	2b00      	cmp	r3, #0
 800f3ce:	d026      	beq.n	800f41e <LoRaMacHandleMlmeRequest+0x62>
    {
        if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800f3d0:	2001      	movs	r0, #1
 800f3d2:	f004 fb45 	bl	8013a60 <LoRaMacConfirmQueueIsCmdActive>
 800f3d6:	4603      	mov	r3, r0
 800f3d8:	2b00      	cmp	r3, #0
 800f3da:	d012      	beq.n	800f402 <LoRaMacHandleMlmeRequest+0x46>
        {
            if( LoRaMacConfirmQueueGetStatus( MLME_JOIN ) == LORAMAC_EVENT_INFO_STATUS_OK )
 800f3dc:	2001      	movs	r0, #1
 800f3de:	f004 fae1 	bl	80139a4 <LoRaMacConfirmQueueGetStatus>
 800f3e2:	4603      	mov	r3, r0
 800f3e4:	2b00      	cmp	r3, #0
 800f3e6:	d103      	bne.n	800f3f0 <LoRaMacHandleMlmeRequest+0x34>
            {// Node joined successfully
                MacCtx.ChannelsNbTransCounter = 0;
 800f3e8:	4b0e      	ldr	r3, [pc, #56]	@ (800f424 <LoRaMacHandleMlmeRequest+0x68>)
 800f3ea:	2200      	movs	r2, #0
 800f3ec:	f883 241c 	strb.w	r2, [r3, #1052]	@ 0x41c
            }
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800f3f0:	4b0c      	ldr	r3, [pc, #48]	@ (800f424 <LoRaMacHandleMlmeRequest+0x68>)
 800f3f2:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800f3f6:	f023 0302 	bic.w	r3, r3, #2
 800f3fa:	4a0a      	ldr	r2, [pc, #40]	@ (800f424 <LoRaMacHandleMlmeRequest+0x68>)
 800f3fc:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
        {
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
        }
#endif /* LORAMAC_VERSION */
    }
}
 800f400:	e00d      	b.n	800f41e <LoRaMacHandleMlmeRequest+0x62>
        else if( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true )
 800f402:	2005      	movs	r0, #5
 800f404:	f004 fb2c 	bl	8013a60 <LoRaMacConfirmQueueIsCmdActive>
 800f408:	4603      	mov	r3, r0
 800f40a:	2b00      	cmp	r3, #0
 800f40c:	d007      	beq.n	800f41e <LoRaMacHandleMlmeRequest+0x62>
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800f40e:	4b05      	ldr	r3, [pc, #20]	@ (800f424 <LoRaMacHandleMlmeRequest+0x68>)
 800f410:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800f414:	f023 0302 	bic.w	r3, r3, #2
 800f418:	4a02      	ldr	r2, [pc, #8]	@ (800f424 <LoRaMacHandleMlmeRequest+0x68>)
 800f41a:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
}
 800f41e:	bf00      	nop
 800f420:	bd80      	pop	{r7, pc}
 800f422:	bf00      	nop
 800f424:	200008d0 	.word	0x200008d0

0800f428 <LoRaMacCheckForBeaconAcquisition>:

static uint8_t LoRaMacCheckForBeaconAcquisition( void )
{
 800f428:	b580      	push	{r7, lr}
 800f42a:	af00      	add	r7, sp, #0
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 800f42c:	200b      	movs	r0, #11
 800f42e:	f004 fb17 	bl	8013a60 <LoRaMacConfirmQueueIsCmdActive>
 800f432:	4603      	mov	r3, r0
 800f434:	2b00      	cmp	r3, #0
 800f436:	d019      	beq.n	800f46c <LoRaMacCheckForBeaconAcquisition+0x44>
        ( MacCtx.MacFlags.Bits.McpsReq == 0 ) )
 800f438:	4b0e      	ldr	r3, [pc, #56]	@ (800f474 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 800f43a:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800f43e:	f003 0301 	and.w	r3, r3, #1
 800f442:	b2db      	uxtb	r3, r3
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 800f444:	2b00      	cmp	r3, #0
 800f446:	d111      	bne.n	800f46c <LoRaMacCheckForBeaconAcquisition+0x44>
    {
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800f448:	4b0a      	ldr	r3, [pc, #40]	@ (800f474 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 800f44a:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800f44e:	f003 0304 	and.w	r3, r3, #4
 800f452:	b2db      	uxtb	r3, r3
 800f454:	2b00      	cmp	r3, #0
 800f456:	d009      	beq.n	800f46c <LoRaMacCheckForBeaconAcquisition+0x44>
        {
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800f458:	4b06      	ldr	r3, [pc, #24]	@ (800f474 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 800f45a:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800f45e:	f023 0302 	bic.w	r3, r3, #2
 800f462:	4a04      	ldr	r2, [pc, #16]	@ (800f474 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 800f464:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
            return 0x01;
 800f468:	2301      	movs	r3, #1
 800f46a:	e000      	b.n	800f46e <LoRaMacCheckForBeaconAcquisition+0x46>
        }
    }
    return 0x00;
 800f46c:	2300      	movs	r3, #0
}
 800f46e:	4618      	mov	r0, r3
 800f470:	bd80      	pop	{r7, pc}
 800f472:	bf00      	nop
 800f474:	200008d0 	.word	0x200008d0

0800f478 <CheckForMinimumAbpDatarate>:

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
static bool CheckForMinimumAbpDatarate( bool adr, ActivationType_t activation, bool datarateChanged )
{
 800f478:	b480      	push	{r7}
 800f47a:	b083      	sub	sp, #12
 800f47c:	af00      	add	r7, sp, #0
 800f47e:	4603      	mov	r3, r0
 800f480:	71fb      	strb	r3, [r7, #7]
 800f482:	460b      	mov	r3, r1
 800f484:	71bb      	strb	r3, [r7, #6]
 800f486:	4613      	mov	r3, r2
 800f488:	717b      	strb	r3, [r7, #5]
    if( ( adr == true ) &&
 800f48a:	79fb      	ldrb	r3, [r7, #7]
 800f48c:	2b00      	cmp	r3, #0
 800f48e:	d00a      	beq.n	800f4a6 <CheckForMinimumAbpDatarate+0x2e>
 800f490:	79bb      	ldrb	r3, [r7, #6]
 800f492:	2b01      	cmp	r3, #1
 800f494:	d107      	bne.n	800f4a6 <CheckForMinimumAbpDatarate+0x2e>
        ( activation == ACTIVATION_TYPE_ABP ) &&
        ( datarateChanged == false ) )
 800f496:	797b      	ldrb	r3, [r7, #5]
 800f498:	f083 0301 	eor.w	r3, r3, #1
 800f49c:	b2db      	uxtb	r3, r3
        ( activation == ACTIVATION_TYPE_ABP ) &&
 800f49e:	2b00      	cmp	r3, #0
 800f4a0:	d001      	beq.n	800f4a6 <CheckForMinimumAbpDatarate+0x2e>
    {
        return true;
 800f4a2:	2301      	movs	r3, #1
 800f4a4:	e000      	b.n	800f4a8 <CheckForMinimumAbpDatarate+0x30>
    }
    return false;
 800f4a6:	2300      	movs	r3, #0
}
 800f4a8:	4618      	mov	r0, r3
 800f4aa:	370c      	adds	r7, #12
 800f4ac:	46bd      	mov	sp, r7
 800f4ae:	bc80      	pop	{r7}
 800f4b0:	4770      	bx	lr
	...

0800f4b4 <LoRaMacCheckForRxAbort>:
#endif /* LORAMAC_VERSION */

static void LoRaMacCheckForRxAbort( void )
{
 800f4b4:	b480      	push	{r7}
 800f4b6:	af00      	add	r7, sp, #0
    // A error occurs during receiving
    if( ( MacCtx.MacState & LORAMAC_RX_ABORT ) == LORAMAC_RX_ABORT )
 800f4b8:	4b0d      	ldr	r3, [pc, #52]	@ (800f4f0 <LoRaMacCheckForRxAbort+0x3c>)
 800f4ba:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800f4be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f4c2:	2b00      	cmp	r3, #0
 800f4c4:	d00f      	beq.n	800f4e6 <LoRaMacCheckForRxAbort+0x32>
    {
        MacCtx.MacState &= ~LORAMAC_RX_ABORT;
 800f4c6:	4b0a      	ldr	r3, [pc, #40]	@ (800f4f0 <LoRaMacCheckForRxAbort+0x3c>)
 800f4c8:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800f4cc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800f4d0:	4a07      	ldr	r2, [pc, #28]	@ (800f4f0 <LoRaMacCheckForRxAbort+0x3c>)
 800f4d2:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
        MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800f4d6:	4b06      	ldr	r3, [pc, #24]	@ (800f4f0 <LoRaMacCheckForRxAbort+0x3c>)
 800f4d8:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800f4dc:	f023 0302 	bic.w	r3, r3, #2
 800f4e0:	4a03      	ldr	r2, [pc, #12]	@ (800f4f0 <LoRaMacCheckForRxAbort+0x3c>)
 800f4e2:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
    }
}
 800f4e6:	bf00      	nop
 800f4e8:	46bd      	mov	sp, r7
 800f4ea:	bc80      	pop	{r7}
 800f4ec:	4770      	bx	lr
 800f4ee:	bf00      	nop
 800f4f0:	200008d0 	.word	0x200008d0

0800f4f4 <LoRaMacHandleNvm>:

static void LoRaMacHandleNvm( LoRaMacNvmData_t* nvmData )
{
 800f4f4:	b580      	push	{r7, lr}
 800f4f6:	b084      	sub	sp, #16
 800f4f8:	af00      	add	r7, sp, #0
 800f4fa:	6078      	str	r0, [r7, #4]
    uint32_t crc = 0;
 800f4fc:	2300      	movs	r3, #0
 800f4fe:	60bb      	str	r3, [r7, #8]
    uint16_t notifyFlags = LORAMAC_NVM_NOTIFY_FLAG_NONE;
 800f500:	2300      	movs	r3, #0
 800f502:	81fb      	strh	r3, [r7, #14]

    if( MacCtx.MacState != LORAMAC_IDLE )
 800f504:	4b50      	ldr	r3, [pc, #320]	@ (800f648 <LoRaMacHandleNvm+0x154>)
 800f506:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800f50a:	2b00      	cmp	r3, #0
 800f50c:	f040 8098 	bne.w	800f640 <LoRaMacHandleNvm+0x14c>
    {
        return;
    }

    // Crypto
    crc = Crc32( ( uint8_t* ) &nvmData->Crypto, sizeof( nvmData->Crypto ) -
 800f510:	687b      	ldr	r3, [r7, #4]
 800f512:	2124      	movs	r1, #36	@ 0x24
 800f514:	4618      	mov	r0, r3
 800f516:	f007 ffe7 	bl	80174e8 <Crc32>
 800f51a:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->Crypto.Crc32 ) );
    if( crc != nvmData->Crypto.Crc32 )
 800f51c:	687b      	ldr	r3, [r7, #4]
 800f51e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f520:	68ba      	ldr	r2, [r7, #8]
 800f522:	429a      	cmp	r2, r3
 800f524:	d006      	beq.n	800f534 <LoRaMacHandleNvm+0x40>
    {
        nvmData->Crypto.Crc32 = crc;
 800f526:	687b      	ldr	r3, [r7, #4]
 800f528:	68ba      	ldr	r2, [r7, #8]
 800f52a:	625a      	str	r2, [r3, #36]	@ 0x24
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CRYPTO;
 800f52c:	89fb      	ldrh	r3, [r7, #14]
 800f52e:	f043 0301 	orr.w	r3, r3, #1
 800f532:	81fb      	strh	r3, [r7, #14]
    }

    // MacGroup1
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup1, sizeof( nvmData->MacGroup1 ) -
 800f534:	687b      	ldr	r3, [r7, #4]
 800f536:	3328      	adds	r3, #40	@ 0x28
 800f538:	2114      	movs	r1, #20
 800f53a:	4618      	mov	r0, r3
 800f53c:	f007 ffd4 	bl	80174e8 <Crc32>
 800f540:	60b8      	str	r0, [r7, #8]
                                                   sizeof( nvmData->MacGroup1.Crc32 ) );
    if( crc != nvmData->MacGroup1.Crc32 )
 800f542:	687b      	ldr	r3, [r7, #4]
 800f544:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f546:	68ba      	ldr	r2, [r7, #8]
 800f548:	429a      	cmp	r2, r3
 800f54a:	d006      	beq.n	800f55a <LoRaMacHandleNvm+0x66>
    {
        nvmData->MacGroup1.Crc32 = crc;
 800f54c:	687b      	ldr	r3, [r7, #4]
 800f54e:	68ba      	ldr	r2, [r7, #8]
 800f550:	63da      	str	r2, [r3, #60]	@ 0x3c
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP1;
 800f552:	89fb      	ldrh	r3, [r7, #14]
 800f554:	f043 0302 	orr.w	r3, r3, #2
 800f558:	81fb      	strh	r3, [r7, #14]
    }

    // MacGroup2
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup2, sizeof( nvmData->MacGroup2 ) -
 800f55a:	687b      	ldr	r3, [r7, #4]
 800f55c:	3340      	adds	r3, #64	@ 0x40
 800f55e:	21e0      	movs	r1, #224	@ 0xe0
 800f560:	4618      	mov	r0, r3
 800f562:	f007 ffc1 	bl	80174e8 <Crc32>
 800f566:	60b8      	str	r0, [r7, #8]
                                                   sizeof( nvmData->MacGroup2.Crc32 ) );
    if( crc != nvmData->MacGroup2.Crc32 )
 800f568:	687b      	ldr	r3, [r7, #4]
 800f56a:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 800f56e:	68ba      	ldr	r2, [r7, #8]
 800f570:	429a      	cmp	r2, r3
 800f572:	d007      	beq.n	800f584 <LoRaMacHandleNvm+0x90>
    {
        nvmData->MacGroup2.Crc32 = crc;
 800f574:	687b      	ldr	r3, [r7, #4]
 800f576:	68ba      	ldr	r2, [r7, #8]
 800f578:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP2;
 800f57c:	89fb      	ldrh	r3, [r7, #14]
 800f57e:	f043 0304 	orr.w	r3, r3, #4
 800f582:	81fb      	strh	r3, [r7, #14]
    }

    // Secure Element
    crc = Crc32( ( uint8_t* ) &nvmData->SecureElement, sizeof( nvmData->SecureElement ) -
 800f584:	687b      	ldr	r3, [r7, #4]
 800f586:	f503 7392 	add.w	r3, r3, #292	@ 0x124
 800f58a:	21bc      	movs	r1, #188	@ 0xbc
 800f58c:	4618      	mov	r0, r3
 800f58e:	f007 ffab 	bl	80174e8 <Crc32>
 800f592:	60b8      	str	r0, [r7, #8]
                                                       sizeof( nvmData->SecureElement.Crc32 ) );
    if( crc != nvmData->SecureElement.Crc32 )
 800f594:	687b      	ldr	r3, [r7, #4]
 800f596:	f8d3 31e0 	ldr.w	r3, [r3, #480]	@ 0x1e0
 800f59a:	68ba      	ldr	r2, [r7, #8]
 800f59c:	429a      	cmp	r2, r3
 800f59e:	d007      	beq.n	800f5b0 <LoRaMacHandleNvm+0xbc>
    {
        nvmData->SecureElement.Crc32 = crc;
 800f5a0:	687b      	ldr	r3, [r7, #4]
 800f5a2:	68ba      	ldr	r2, [r7, #8]
 800f5a4:	f8c3 21e0 	str.w	r2, [r3, #480]	@ 0x1e0
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_SECURE_ELEMENT;
 800f5a8:	89fb      	ldrh	r3, [r7, #14]
 800f5aa:	f043 0308 	orr.w	r3, r3, #8
 800f5ae:	81fb      	strh	r3, [r7, #14]
    }

    // Region
    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup1, sizeof( nvmData->RegionGroup1 ) -
 800f5b0:	687b      	ldr	r3, [r7, #4]
 800f5b2:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800f5b6:	2100      	movs	r1, #0
 800f5b8:	4618      	mov	r0, r3
 800f5ba:	f007 ff95 	bl	80174e8 <Crc32>
 800f5be:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->RegionGroup1.Crc32 ) );
    if( crc != nvmData->RegionGroup1.Crc32 )
 800f5c0:	687b      	ldr	r3, [r7, #4]
 800f5c2:	f8d3 31e4 	ldr.w	r3, [r3, #484]	@ 0x1e4
 800f5c6:	68ba      	ldr	r2, [r7, #8]
 800f5c8:	429a      	cmp	r2, r3
 800f5ca:	d007      	beq.n	800f5dc <LoRaMacHandleNvm+0xe8>
    {
        nvmData->RegionGroup1.Crc32 = crc;
 800f5cc:	687b      	ldr	r3, [r7, #4]
 800f5ce:	68ba      	ldr	r2, [r7, #8]
 800f5d0:	f8c3 21e4 	str.w	r2, [r3, #484]	@ 0x1e4
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP1;
 800f5d4:	89fb      	ldrh	r3, [r7, #14]
 800f5d6:	f043 0310 	orr.w	r3, r3, #16
 800f5da:	81fb      	strh	r3, [r7, #14]
    }

    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup2, sizeof( nvmData->RegionGroup2 ) -
 800f5dc:	687b      	ldr	r3, [r7, #4]
 800f5de:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800f5e2:	f44f 715e 	mov.w	r1, #888	@ 0x378
 800f5e6:	4618      	mov	r0, r3
 800f5e8:	f007 ff7e 	bl	80174e8 <Crc32>
 800f5ec:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->RegionGroup2.Crc32 ) );
    if( crc != nvmData->RegionGroup2.Crc32 )
 800f5ee:	687b      	ldr	r3, [r7, #4]
 800f5f0:	f8d3 3560 	ldr.w	r3, [r3, #1376]	@ 0x560
 800f5f4:	68ba      	ldr	r2, [r7, #8]
 800f5f6:	429a      	cmp	r2, r3
 800f5f8:	d007      	beq.n	800f60a <LoRaMacHandleNvm+0x116>
    {
        nvmData->RegionGroup2.Crc32 = crc;
 800f5fa:	687b      	ldr	r3, [r7, #4]
 800f5fc:	68ba      	ldr	r2, [r7, #8]
 800f5fe:	f8c3 2560 	str.w	r2, [r3, #1376]	@ 0x560
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP2;
 800f602:	89fb      	ldrh	r3, [r7, #14]
 800f604:	f043 0320 	orr.w	r3, r3, #32
 800f608:	81fb      	strh	r3, [r7, #14]
    }

    // ClassB
    crc = Crc32( ( uint8_t* ) &nvmData->ClassB, sizeof( nvmData->ClassB ) -
 800f60a:	687b      	ldr	r3, [r7, #4]
 800f60c:	f203 5364 	addw	r3, r3, #1380	@ 0x564
 800f610:	2114      	movs	r1, #20
 800f612:	4618      	mov	r0, r3
 800f614:	f007 ff68 	bl	80174e8 <Crc32>
 800f618:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->ClassB.Crc32 ) );
    if( crc != nvmData->ClassB.Crc32 )
 800f61a:	687b      	ldr	r3, [r7, #4]
 800f61c:	f8d3 3578 	ldr.w	r3, [r3, #1400]	@ 0x578
 800f620:	68ba      	ldr	r2, [r7, #8]
 800f622:	429a      	cmp	r2, r3
 800f624:	d007      	beq.n	800f636 <LoRaMacHandleNvm+0x142>
    {
        nvmData->ClassB.Crc32 = crc;
 800f626:	687b      	ldr	r3, [r7, #4]
 800f628:	68ba      	ldr	r2, [r7, #8]
 800f62a:	f8c3 2578 	str.w	r2, [r3, #1400]	@ 0x578
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CLASS_B;
 800f62e:	89fb      	ldrh	r3, [r7, #14]
 800f630:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f634:	81fb      	strh	r3, [r7, #14]
    }

    CallNvmDataChangeCallback( notifyFlags );
 800f636:	89fb      	ldrh	r3, [r7, #14]
 800f638:	4618      	mov	r0, r3
 800f63a:	f002 f819 	bl	8011670 <CallNvmDataChangeCallback>
 800f63e:	e000      	b.n	800f642 <LoRaMacHandleNvm+0x14e>
        return;
 800f640:	bf00      	nop
}
 800f642:	3710      	adds	r7, #16
 800f644:	46bd      	mov	sp, r7
 800f646:	bd80      	pop	{r7, pc}
 800f648:	200008d0 	.word	0x200008d0

0800f64c <LoRaMacHandleResponseTimeout>:

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
static bool LoRaMacHandleResponseTimeout( TimerTime_t timeoutInMs, TimerTime_t startTimeInMs )
{
 800f64c:	b580      	push	{r7, lr}
 800f64e:	b084      	sub	sp, #16
 800f650:	af00      	add	r7, sp, #0
 800f652:	6078      	str	r0, [r7, #4]
 800f654:	6039      	str	r1, [r7, #0]
    if( startTimeInMs != 0 )
 800f656:	683b      	ldr	r3, [r7, #0]
 800f658:	2b00      	cmp	r3, #0
 800f65a:	d00d      	beq.n	800f678 <LoRaMacHandleResponseTimeout+0x2c>
    {
        TimerTime_t elapsedTime = TimerGetElapsedTime( startTimeInMs );
 800f65c:	6838      	ldr	r0, [r7, #0]
 800f65e:	f00c f95f 	bl	801b920 <UTIL_TIMER_GetElapsedTime>
 800f662:	60f8      	str	r0, [r7, #12]
        if( elapsedTime > timeoutInMs )
 800f664:	68fa      	ldr	r2, [r7, #12]
 800f666:	687b      	ldr	r3, [r7, #4]
 800f668:	429a      	cmp	r2, r3
 800f66a:	d905      	bls.n	800f678 <LoRaMacHandleResponseTimeout+0x2c>
        {
            Nvm.MacGroup1.SrvAckRequested = false;
 800f66c:	4b05      	ldr	r3, [pc, #20]	@ (800f684 <LoRaMacHandleResponseTimeout+0x38>)
 800f66e:	2200      	movs	r2, #0
 800f670:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
            return true;
 800f674:	2301      	movs	r3, #1
 800f676:	e000      	b.n	800f67a <LoRaMacHandleResponseTimeout+0x2e>
        }
    }
    return false;
 800f678:	2300      	movs	r3, #0
}
 800f67a:	4618      	mov	r0, r3
 800f67c:	3710      	adds	r7, #16
 800f67e:	46bd      	mov	sp, r7
 800f680:	bd80      	pop	{r7, pc}
 800f682:	bf00      	nop
 800f684:	20000df0 	.word	0x20000df0

0800f688 <LoRaMacProcess>:
#endif /* LORAMAC_VERSION */

void LoRaMacProcess( void )
{
 800f688:	b580      	push	{r7, lr}
 800f68a:	b082      	sub	sp, #8
 800f68c:	af00      	add	r7, sp, #0
    uint8_t noTx = false;
 800f68e:	2300      	movs	r3, #0
 800f690:	71fb      	strb	r3, [r7, #7]

    LoRaMacHandleIrqEvents( );
 800f692:	f7ff fd11 	bl	800f0b8 <LoRaMacHandleIrqEvents>
    LoRaMacClassBProcess( );
 800f696:	f003 fd90 	bl	80131ba <LoRaMacClassBProcess>

    // MAC proceeded a state and is ready to check
    if( MacCtx.MacFlags.Bits.MacDone == 1 )
 800f69a:	4b26      	ldr	r3, [pc, #152]	@ (800f734 <LoRaMacProcess+0xac>)
 800f69c:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800f6a0:	f003 0320 	and.w	r3, r3, #32
 800f6a4:	b2db      	uxtb	r3, r3
 800f6a6:	2b00      	cmp	r3, #0
 800f6a8:	d025      	beq.n	800f6f6 <LoRaMacProcess+0x6e>
    {
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_OFF );
 800f6aa:	2000      	movs	r0, #0
 800f6ac:	f7ff fd6c 	bl	800f188 <LoRaMacEnableRequests>
        LoRaMacCheckForRxAbort( );
 800f6b0:	f7ff ff00 	bl	800f4b4 <LoRaMacCheckForRxAbort>

        // An error occurs during transmitting
        if( IsRequestPending( ) > 0 )
 800f6b4:	f001 fffa 	bl	80116ac <IsRequestPending>
 800f6b8:	4603      	mov	r3, r0
 800f6ba:	2b00      	cmp	r3, #0
 800f6bc:	d006      	beq.n	800f6cc <LoRaMacProcess+0x44>
        {
            noTx |= LoRaMacCheckForBeaconAcquisition( );
 800f6be:	f7ff feb3 	bl	800f428 <LoRaMacCheckForBeaconAcquisition>
 800f6c2:	4603      	mov	r3, r0
 800f6c4:	461a      	mov	r2, r3
 800f6c6:	79fb      	ldrb	r3, [r7, #7]
 800f6c8:	4313      	orrs	r3, r2
 800f6ca:	71fb      	strb	r3, [r7, #7]
        }

        if( noTx == 0x00 )
 800f6cc:	79fb      	ldrb	r3, [r7, #7]
 800f6ce:	2b00      	cmp	r3, #0
 800f6d0:	d103      	bne.n	800f6da <LoRaMacProcess+0x52>
        {
            LoRaMacHandleMlmeRequest( );
 800f6d2:	f7ff fe73 	bl	800f3bc <LoRaMacHandleMlmeRequest>
            LoRaMacHandleMcpsRequest( );
 800f6d6:	f7ff fe15 	bl	800f304 <LoRaMacHandleMcpsRequest>
        }
        LoRaMacHandleRequestEvents( );
 800f6da:	f7ff fd65 	bl	800f1a8 <LoRaMacHandleRequestEvents>
        LoRaMacHandleScheduleUplinkEvent( );
 800f6de:	f7ff fdc5 	bl	800f26c <LoRaMacHandleScheduleUplinkEvent>
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 800f6e2:	2001      	movs	r0, #1
 800f6e4:	f7ff fd50 	bl	800f188 <LoRaMacEnableRequests>
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 800f6e8:	4a12      	ldr	r2, [pc, #72]	@ (800f734 <LoRaMacProcess+0xac>)
 800f6ea:	f892 3495 	ldrb.w	r3, [r2, #1173]	@ 0x495
 800f6ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f6f2:	f882 3495 	strb.w	r3, [r2, #1173]	@ 0x495
    }
    LoRaMacHandleIndicationEvents( );
 800f6f6:	f7ff fdcd 	bl	800f294 <LoRaMacHandleIndicationEvents>
    if( MacCtx.RxSlot == RX_SLOT_WIN_CLASS_C )
 800f6fa:	4b0e      	ldr	r3, [pc, #56]	@ (800f734 <LoRaMacProcess+0xac>)
 800f6fc:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800f700:	2b02      	cmp	r3, #2
 800f702:	d101      	bne.n	800f708 <LoRaMacProcess+0x80>
    {
        OpenContinuousRxCWindow( );
 800f704:	f001 fbee 	bl	8010ee4 <OpenContinuousRxCWindow>
    }
    if( MacCtx.MacFlags.Bits.NvmHandle == 1 )
 800f708:	4b0a      	ldr	r3, [pc, #40]	@ (800f734 <LoRaMacProcess+0xac>)
 800f70a:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800f70e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f712:	b2db      	uxtb	r3, r3
 800f714:	2b00      	cmp	r3, #0
 800f716:	d009      	beq.n	800f72c <LoRaMacProcess+0xa4>
    {
        MacCtx.MacFlags.Bits.NvmHandle = 0;
 800f718:	4a06      	ldr	r2, [pc, #24]	@ (800f734 <LoRaMacProcess+0xac>)
 800f71a:	f892 3495 	ldrb.w	r3, [r2, #1173]	@ 0x495
 800f71e:	f36f 1386 	bfc	r3, #6, #1
 800f722:	f882 3495 	strb.w	r3, [r2, #1173]	@ 0x495
        LoRaMacHandleNvm( &Nvm );
 800f726:	4804      	ldr	r0, [pc, #16]	@ (800f738 <LoRaMacProcess+0xb0>)
 800f728:	f7ff fee4 	bl	800f4f4 <LoRaMacHandleNvm>
    }
}
 800f72c:	bf00      	nop
 800f72e:	3708      	adds	r7, #8
 800f730:	46bd      	mov	sp, r7
 800f732:	bd80      	pop	{r7, pc}
 800f734:	200008d0 	.word	0x200008d0
 800f738:	20000df0 	.word	0x20000df0

0800f73c <OnTxDelayedTimerEvent>:

static void OnTxDelayedTimerEvent( void* context )
{
 800f73c:	b580      	push	{r7, lr}
 800f73e:	b082      	sub	sp, #8
 800f740:	af00      	add	r7, sp, #0
 800f742:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.TxDelayedTimer );
 800f744:	481e      	ldr	r0, [pc, #120]	@ (800f7c0 <OnTxDelayedTimerEvent+0x84>)
 800f746:	f00b ffbf 	bl	801b6c8 <UTIL_TIMER_Stop>
    MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 800f74a:	4b1e      	ldr	r3, [pc, #120]	@ (800f7c4 <OnTxDelayedTimerEvent+0x88>)
 800f74c:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800f750:	f023 0320 	bic.w	r3, r3, #32
 800f754:	4a1b      	ldr	r2, [pc, #108]	@ (800f7c4 <OnTxDelayedTimerEvent+0x88>)
 800f756:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    if( LoRaMacHandleResponseTimeout( Nvm.MacGroup2.MacParams.RxBCTimeout,
 800f75a:	4b1b      	ldr	r3, [pc, #108]	@ (800f7c8 <OnTxDelayedTimerEvent+0x8c>)
 800f75c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f760:	4a18      	ldr	r2, [pc, #96]	@ (800f7c4 <OnTxDelayedTimerEvent+0x88>)
 800f762:	f8d2 249c 	ldr.w	r2, [r2, #1180]	@ 0x49c
 800f766:	4611      	mov	r1, r2
 800f768:	4618      	mov	r0, r3
 800f76a:	f7ff ff6f 	bl	800f64c <LoRaMacHandleResponseTimeout>
 800f76e:	4603      	mov	r3, r0
 800f770:	2b00      	cmp	r3, #0
 800f772:	d11e      	bne.n	800f7b2 <OnTxDelayedTimerEvent+0x76>
        return;
    }
#endif /* LORAMAC_VERSION */

    // Schedule frame, allow delayed frame transmissions
    switch( ScheduleTx( true ) )
 800f774:	2001      	movs	r0, #1
 800f776:	f001 f93b 	bl	80109f0 <ScheduleTx>
 800f77a:	4603      	mov	r3, r0
 800f77c:	2b00      	cmp	r3, #0
 800f77e:	d01a      	beq.n	800f7b6 <OnTxDelayedTimerEvent+0x7a>
 800f780:	2b0b      	cmp	r3, #11
 800f782:	d018      	beq.n	800f7b6 <OnTxDelayedTimerEvent+0x7a>
            break;
        }
        default:
        {
            // Stop retransmission attempt
            MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800f784:	4b10      	ldr	r3, [pc, #64]	@ (800f7c8 <OnTxDelayedTimerEvent+0x8c>)
 800f786:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 800f78a:	b2da      	uxtb	r2, r3
 800f78c:	4b0d      	ldr	r3, [pc, #52]	@ (800f7c4 <OnTxDelayedTimerEvent+0x88>)
 800f78e:	f883 2446 	strb.w	r2, [r3, #1094]	@ 0x446
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
            MacCtx.McpsConfirm.NbTrans = MacCtx.ChannelsNbTransCounter;
 800f792:	4b0c      	ldr	r3, [pc, #48]	@ (800f7c4 <OnTxDelayedTimerEvent+0x88>)
 800f794:	f893 241c 	ldrb.w	r2, [r3, #1052]	@ 0x41c
 800f798:	4b0a      	ldr	r3, [pc, #40]	@ (800f7c4 <OnTxDelayedTimerEvent+0x88>)
 800f79a:	f883 2449 	strb.w	r2, [r3, #1097]	@ 0x449
#endif /* LORAMAC_VERSION */
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR;
 800f79e:	4b09      	ldr	r3, [pc, #36]	@ (800f7c4 <OnTxDelayedTimerEvent+0x88>)
 800f7a0:	2209      	movs	r2, #9
 800f7a2:	f883 2445 	strb.w	r2, [r3, #1093]	@ 0x445
            LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR );
 800f7a6:	2009      	movs	r0, #9
 800f7a8:	f004 f926 	bl	80139f8 <LoRaMacConfirmQueueSetStatusCmn>
            StopRetransmission( );
 800f7ac:	f001 ff24 	bl	80115f8 <StopRetransmission>
            break;
 800f7b0:	e002      	b.n	800f7b8 <OnTxDelayedTimerEvent+0x7c>
        return;
 800f7b2:	bf00      	nop
 800f7b4:	e000      	b.n	800f7b8 <OnTxDelayedTimerEvent+0x7c>
            break;
 800f7b6:	bf00      	nop
        }
    }
}
 800f7b8:	3708      	adds	r7, #8
 800f7ba:	46bd      	mov	sp, r7
 800f7bc:	bd80      	pop	{r7, pc}
 800f7be:	bf00      	nop
 800f7c0:	20000c38 	.word	0x20000c38
 800f7c4:	200008d0 	.word	0x200008d0
 800f7c8:	20000df0 	.word	0x20000df0

0800f7cc <OnRxWindow1TimerEvent>:

static void OnRxWindow1TimerEvent( void* context )
{
 800f7cc:	b580      	push	{r7, lr}
 800f7ce:	b082      	sub	sp, #8
 800f7d0:	af00      	add	r7, sp, #0
 800f7d2:	6078      	str	r0, [r7, #4]
    MacCtx.RxWindow1Config.Channel = MacCtx.Channel;
 800f7d4:	4b17      	ldr	r3, [pc, #92]	@ (800f834 <OnRxWindow1TimerEvent+0x68>)
 800f7d6:	f893 241f 	ldrb.w	r2, [r3, #1055]	@ 0x41f
 800f7da:	4b16      	ldr	r3, [pc, #88]	@ (800f834 <OnRxWindow1TimerEvent+0x68>)
 800f7dc:	f883 23b8 	strb.w	r2, [r3, #952]	@ 0x3b8
    MacCtx.RxWindow1Config.DrOffset = Nvm.MacGroup2.MacParams.Rx1DrOffset;
 800f7e0:	4b15      	ldr	r3, [pc, #84]	@ (800f838 <OnRxWindow1TimerEvent+0x6c>)
 800f7e2:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 800f7e6:	b25a      	sxtb	r2, r3
 800f7e8:	4b12      	ldr	r3, [pc, #72]	@ (800f834 <OnRxWindow1TimerEvent+0x68>)
 800f7ea:	f883 23bb 	strb.w	r2, [r3, #955]	@ 0x3bb
    MacCtx.RxWindow1Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800f7ee:	4b12      	ldr	r3, [pc, #72]	@ (800f838 <OnRxWindow1TimerEvent+0x6c>)
 800f7f0:	f893 2075 	ldrb.w	r2, [r3, #117]	@ 0x75
 800f7f4:	4b0f      	ldr	r3, [pc, #60]	@ (800f834 <OnRxWindow1TimerEvent+0x68>)
 800f7f6:	f883 23c8 	strb.w	r2, [r3, #968]	@ 0x3c8
    MacCtx.RxWindow1Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 800f7fa:	4b0f      	ldr	r3, [pc, #60]	@ (800f838 <OnRxWindow1TimerEvent+0x6c>)
 800f7fc:	f893 2080 	ldrb.w	r2, [r3, #128]	@ 0x80
 800f800:	4b0c      	ldr	r3, [pc, #48]	@ (800f834 <OnRxWindow1TimerEvent+0x68>)
 800f802:	f883 23c9 	strb.w	r2, [r3, #969]	@ 0x3c9
    MacCtx.RxWindow1Config.RxContinuous = false;
 800f806:	4b0b      	ldr	r3, [pc, #44]	@ (800f834 <OnRxWindow1TimerEvent+0x68>)
 800f808:	2200      	movs	r2, #0
 800f80a:	f883 23ca 	strb.w	r2, [r3, #970]	@ 0x3ca
    MacCtx.RxWindow1Config.RxSlot = RX_SLOT_WIN_1;
 800f80e:	4b09      	ldr	r3, [pc, #36]	@ (800f834 <OnRxWindow1TimerEvent+0x68>)
 800f810:	2200      	movs	r2, #0
 800f812:	f883 23cb 	strb.w	r2, [r3, #971]	@ 0x3cb
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    MacCtx.RxWindow1Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 800f816:	4b08      	ldr	r3, [pc, #32]	@ (800f838 <OnRxWindow1TimerEvent+0x6c>)
 800f818:	f893 211c 	ldrb.w	r2, [r3, #284]	@ 0x11c
 800f81c:	4b05      	ldr	r3, [pc, #20]	@ (800f834 <OnRxWindow1TimerEvent+0x68>)
 800f81e:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc
#endif /* LORAMAC_VERSION */

    RxWindowSetup( &MacCtx.RxWindowTimer1, &MacCtx.RxWindow1Config );
 800f822:	4906      	ldr	r1, [pc, #24]	@ (800f83c <OnRxWindow1TimerEvent+0x70>)
 800f824:	4806      	ldr	r0, [pc, #24]	@ (800f840 <OnRxWindow1TimerEvent+0x74>)
 800f826:	f001 fb29 	bl	8010e7c <RxWindowSetup>
}
 800f82a:	bf00      	nop
 800f82c:	3708      	adds	r7, #8
 800f82e:	46bd      	mov	sp, r7
 800f830:	bd80      	pop	{r7, pc}
 800f832:	bf00      	nop
 800f834:	200008d0 	.word	0x200008d0
 800f838:	20000df0 	.word	0x20000df0
 800f83c:	20000c88 	.word	0x20000c88
 800f840:	20000c50 	.word	0x20000c50

0800f844 <OnRxWindow2TimerEvent>:

static void OnRxWindow2TimerEvent( void* context )
{
 800f844:	b580      	push	{r7, lr}
 800f846:	b082      	sub	sp, #8
 800f848:	af00      	add	r7, sp, #0
 800f84a:	6078      	str	r0, [r7, #4]
    // Check if we are processing Rx1 window.
    // If yes, we don't setup the Rx2 window.
    if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 800f84c:	4b19      	ldr	r3, [pc, #100]	@ (800f8b4 <OnRxWindow2TimerEvent+0x70>)
 800f84e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800f852:	2b00      	cmp	r3, #0
 800f854:	d029      	beq.n	800f8aa <OnRxWindow2TimerEvent+0x66>
    {
        return;
    }
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 800f856:	4b17      	ldr	r3, [pc, #92]	@ (800f8b4 <OnRxWindow2TimerEvent+0x70>)
 800f858:	f893 241f 	ldrb.w	r2, [r3, #1055]	@ 0x41f
 800f85c:	4b15      	ldr	r3, [pc, #84]	@ (800f8b4 <OnRxWindow2TimerEvent+0x70>)
 800f85e:	f883 23d0 	strb.w	r2, [r3, #976]	@ 0x3d0
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 800f862:	4b15      	ldr	r3, [pc, #84]	@ (800f8b8 <OnRxWindow2TimerEvent+0x74>)
 800f864:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800f866:	4a13      	ldr	r2, [pc, #76]	@ (800f8b4 <OnRxWindow2TimerEvent+0x70>)
 800f868:	f8c2 33d4 	str.w	r3, [r2, #980]	@ 0x3d4
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800f86c:	4b12      	ldr	r3, [pc, #72]	@ (800f8b8 <OnRxWindow2TimerEvent+0x74>)
 800f86e:	f893 2075 	ldrb.w	r2, [r3, #117]	@ 0x75
 800f872:	4b10      	ldr	r3, [pc, #64]	@ (800f8b4 <OnRxWindow2TimerEvent+0x70>)
 800f874:	f883 23e0 	strb.w	r2, [r3, #992]	@ 0x3e0
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 800f878:	4b0f      	ldr	r3, [pc, #60]	@ (800f8b8 <OnRxWindow2TimerEvent+0x74>)
 800f87a:	f893 2080 	ldrb.w	r2, [r3, #128]	@ 0x80
 800f87e:	4b0d      	ldr	r3, [pc, #52]	@ (800f8b4 <OnRxWindow2TimerEvent+0x70>)
 800f880:	f883 23e1 	strb.w	r2, [r3, #993]	@ 0x3e1
    MacCtx.RxWindow2Config.RxContinuous = false;
 800f884:	4b0b      	ldr	r3, [pc, #44]	@ (800f8b4 <OnRxWindow2TimerEvent+0x70>)
 800f886:	2200      	movs	r2, #0
 800f888:	f883 23e2 	strb.w	r2, [r3, #994]	@ 0x3e2
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 800f88c:	4b09      	ldr	r3, [pc, #36]	@ (800f8b4 <OnRxWindow2TimerEvent+0x70>)
 800f88e:	2201      	movs	r2, #1
 800f890:	f883 23e3 	strb.w	r2, [r3, #995]	@ 0x3e3
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    MacCtx.RxWindow2Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 800f894:	4b08      	ldr	r3, [pc, #32]	@ (800f8b8 <OnRxWindow2TimerEvent+0x74>)
 800f896:	f893 211c 	ldrb.w	r2, [r3, #284]	@ 0x11c
 800f89a:	4b06      	ldr	r3, [pc, #24]	@ (800f8b4 <OnRxWindow2TimerEvent+0x70>)
 800f89c:	f883 23e4 	strb.w	r2, [r3, #996]	@ 0x3e4
#endif /* LORAMAC_VERSION */

    RxWindowSetup( &MacCtx.RxWindowTimer2, &MacCtx.RxWindow2Config );
 800f8a0:	4906      	ldr	r1, [pc, #24]	@ (800f8bc <OnRxWindow2TimerEvent+0x78>)
 800f8a2:	4807      	ldr	r0, [pc, #28]	@ (800f8c0 <OnRxWindow2TimerEvent+0x7c>)
 800f8a4:	f001 faea 	bl	8010e7c <RxWindowSetup>
 800f8a8:	e000      	b.n	800f8ac <OnRxWindow2TimerEvent+0x68>
        return;
 800f8aa:	bf00      	nop
}
 800f8ac:	3708      	adds	r7, #8
 800f8ae:	46bd      	mov	sp, r7
 800f8b0:	bd80      	pop	{r7, pc}
 800f8b2:	bf00      	nop
 800f8b4:	200008d0 	.word	0x200008d0
 800f8b8:	20000df0 	.word	0x20000df0
 800f8bc:	20000ca0 	.word	0x20000ca0
 800f8c0:	20000c68 	.word	0x20000c68

0800f8c4 <OnRetransmitTimeoutTimerEvent>:

    return LoRaMacCryptoGetFCntDown( *fCntID, maxFCntGap, macMsg->FHDR.FCnt, currentDown );
}
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
static void OnRetransmitTimeoutTimerEvent( void* context )
{
 800f8c4:	b580      	push	{r7, lr}
 800f8c6:	b082      	sub	sp, #8
 800f8c8:	af00      	add	r7, sp, #0
 800f8ca:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.RetransmitTimeoutTimer );
 800f8cc:	480f      	ldr	r0, [pc, #60]	@ (800f90c <OnRetransmitTimeoutTimerEvent+0x48>)
 800f8ce:	f00b fefb 	bl	801b6c8 <UTIL_TIMER_Stop>

    if( MacCtx.NodeAckRequested == true )
 800f8d2:	4b0f      	ldr	r3, [pc, #60]	@ (800f910 <OnRetransmitTimeoutTimerEvent+0x4c>)
 800f8d4:	f893 341e 	ldrb.w	r3, [r3, #1054]	@ 0x41e
 800f8d8:	2b00      	cmp	r3, #0
 800f8da:	d003      	beq.n	800f8e4 <OnRetransmitTimeoutTimerEvent+0x20>
    {
        MacCtx.RetransmitTimeoutRetry = true;
 800f8dc:	4b0c      	ldr	r3, [pc, #48]	@ (800f910 <OnRetransmitTimeoutTimerEvent+0x4c>)
 800f8de:	2201      	movs	r2, #1
 800f8e0:	f883 241d 	strb.w	r2, [r3, #1053]	@ 0x41d
    }
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800f8e4:	4b0a      	ldr	r3, [pc, #40]	@ (800f910 <OnRetransmitTimeoutTimerEvent+0x4c>)
 800f8e6:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800f8ea:	2b00      	cmp	r3, #0
 800f8ec:	d00a      	beq.n	800f904 <OnRetransmitTimeoutTimerEvent+0x40>
 800f8ee:	4b08      	ldr	r3, [pc, #32]	@ (800f910 <OnRetransmitTimeoutTimerEvent+0x4c>)
 800f8f0:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800f8f4:	691b      	ldr	r3, [r3, #16]
 800f8f6:	2b00      	cmp	r3, #0
 800f8f8:	d004      	beq.n	800f904 <OnRetransmitTimeoutTimerEvent+0x40>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800f8fa:	4b05      	ldr	r3, [pc, #20]	@ (800f910 <OnRetransmitTimeoutTimerEvent+0x4c>)
 800f8fc:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800f900:	691b      	ldr	r3, [r3, #16]
 800f902:	4798      	blx	r3
    }
}
 800f904:	bf00      	nop
 800f906:	3708      	adds	r7, #8
 800f908:	46bd      	mov	sp, r7
 800f90a:	bd80      	pop	{r7, pc}
 800f90c:	20000cd4 	.word	0x20000cd4
 800f910:	200008d0 	.word	0x200008d0

0800f914 <GetFCntDown>:

static LoRaMacCryptoStatus_t GetFCntDown( AddressIdentifier_t addrID, FType_t fType, LoRaMacMessageData_t* macMsg, Version_t lrWanVersion,
                                          FCntIdentifier_t* fCntID, uint32_t* currentDown )
{
 800f914:	b580      	push	{r7, lr}
 800f916:	b084      	sub	sp, #16
 800f918:	af00      	add	r7, sp, #0
 800f91a:	60ba      	str	r2, [r7, #8]
 800f91c:	607b      	str	r3, [r7, #4]
 800f91e:	4603      	mov	r3, r0
 800f920:	73fb      	strb	r3, [r7, #15]
 800f922:	460b      	mov	r3, r1
 800f924:	73bb      	strb	r3, [r7, #14]
    if( ( macMsg == NULL ) || ( fCntID == NULL ) ||
 800f926:	68bb      	ldr	r3, [r7, #8]
 800f928:	2b00      	cmp	r3, #0
 800f92a:	d005      	beq.n	800f938 <GetFCntDown+0x24>
 800f92c:	69bb      	ldr	r3, [r7, #24]
 800f92e:	2b00      	cmp	r3, #0
 800f930:	d002      	beq.n	800f938 <GetFCntDown+0x24>
 800f932:	69fb      	ldr	r3, [r7, #28]
 800f934:	2b00      	cmp	r3, #0
 800f936:	d101      	bne.n	800f93c <GetFCntDown+0x28>
        ( currentDown == NULL ) )
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 800f938:	2309      	movs	r3, #9
 800f93a:	e028      	b.n	800f98e <GetFCntDown+0x7a>
    }

    // Determine the frame counter identifier and choose counter from FCntList
    switch( addrID )
 800f93c:	7bfb      	ldrb	r3, [r7, #15]
 800f93e:	2b00      	cmp	r3, #0
 800f940:	d016      	beq.n	800f970 <GetFCntDown+0x5c>
 800f942:	2b01      	cmp	r3, #1
 800f944:	d118      	bne.n	800f978 <GetFCntDown+0x64>
    {
        case UNICAST_DEV_ADDR:
            if( lrWanVersion.Fields.Minor == 1 )
 800f946:	79bb      	ldrb	r3, [r7, #6]
 800f948:	2b01      	cmp	r3, #1
 800f94a:	d10d      	bne.n	800f968 <GetFCntDown+0x54>
            {
                if( ( fType == FRAME_TYPE_A ) || ( fType == FRAME_TYPE_D ) )
 800f94c:	7bbb      	ldrb	r3, [r7, #14]
 800f94e:	2b00      	cmp	r3, #0
 800f950:	d002      	beq.n	800f958 <GetFCntDown+0x44>
 800f952:	7bbb      	ldrb	r3, [r7, #14]
 800f954:	2b03      	cmp	r3, #3
 800f956:	d103      	bne.n	800f960 <GetFCntDown+0x4c>
                {
                    *fCntID = A_FCNT_DOWN;
 800f958:	69bb      	ldr	r3, [r7, #24]
 800f95a:	2202      	movs	r2, #2
 800f95c:	701a      	strb	r2, [r3, #0]
            }
            else
            { // For LoRaWAN 1.0.X
                *fCntID = FCNT_DOWN;
            }
            break;
 800f95e:	e00d      	b.n	800f97c <GetFCntDown+0x68>
                    *fCntID = N_FCNT_DOWN;
 800f960:	69bb      	ldr	r3, [r7, #24]
 800f962:	2201      	movs	r2, #1
 800f964:	701a      	strb	r2, [r3, #0]
            break;
 800f966:	e009      	b.n	800f97c <GetFCntDown+0x68>
                *fCntID = FCNT_DOWN;
 800f968:	69bb      	ldr	r3, [r7, #24]
 800f96a:	2203      	movs	r2, #3
 800f96c:	701a      	strb	r2, [r3, #0]
            break;
 800f96e:	e005      	b.n	800f97c <GetFCntDown+0x68>
        /* ST_WORKAROUND_BEGIN: reduced LORAMAC_MAX_MC_CTX */
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MULTICAST_0_ADDR:
            *fCntID = MC_FCNT_DOWN_0;
 800f970:	69bb      	ldr	r3, [r7, #24]
 800f972:	2204      	movs	r2, #4
 800f974:	701a      	strb	r2, [r3, #0]
            break;
 800f976:	e001      	b.n	800f97c <GetFCntDown+0x68>
            *fCntID = MC_FCNT_DOWN_3;
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        /* ST_WORKAROUND_END */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
 800f978:	2305      	movs	r3, #5
 800f97a:	e008      	b.n	800f98e <GetFCntDown+0x7a>
    }

    return LoRaMacCryptoGetFCntDown( *fCntID, macMsg->FHDR.FCnt, currentDown );
 800f97c:	69bb      	ldr	r3, [r7, #24]
 800f97e:	7818      	ldrb	r0, [r3, #0]
 800f980:	68bb      	ldr	r3, [r7, #8]
 800f982:	89db      	ldrh	r3, [r3, #14]
 800f984:	69fa      	ldr	r2, [r7, #28]
 800f986:	4619      	mov	r1, r3
 800f988:	f004 fc60 	bl	801424c <LoRaMacCryptoGetFCntDown>
 800f98c:	4603      	mov	r3, r0
}
 800f98e:	4618      	mov	r0, r3
 800f990:	3710      	adds	r7, #16
 800f992:	46bd      	mov	sp, r7
 800f994:	bd80      	pop	{r7, pc}
	...

0800f998 <SwitchClass>:
#endif /* LORAMAC_VERSION */

static LoRaMacStatus_t SwitchClass( DeviceClass_t deviceClass )
{
 800f998:	b5b0      	push	{r4, r5, r7, lr}
 800f99a:	b084      	sub	sp, #16
 800f99c:	af00      	add	r7, sp, #0
 800f99e:	4603      	mov	r3, r0
 800f9a0:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 800f9a2:	2303      	movs	r3, #3
 800f9a4:	73fb      	strb	r3, [r7, #15]

    switch( Nvm.MacGroup2.DeviceClass )
 800f9a6:	4b62      	ldr	r3, [pc, #392]	@ (800fb30 <SwitchClass+0x198>)
 800f9a8:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 800f9ac:	2b02      	cmp	r3, #2
 800f9ae:	f000 80a7 	beq.w	800fb00 <SwitchClass+0x168>
 800f9b2:	2b02      	cmp	r3, #2
 800f9b4:	f300 80b6 	bgt.w	800fb24 <SwitchClass+0x18c>
 800f9b8:	2b00      	cmp	r3, #0
 800f9ba:	d003      	beq.n	800f9c4 <SwitchClass+0x2c>
 800f9bc:	2b01      	cmp	r3, #1
 800f9be:	f000 8091 	beq.w	800fae4 <SwitchClass+0x14c>
 800f9c2:	e0af      	b.n	800fb24 <SwitchClass+0x18c>
    {
        case CLASS_A:
        {
            if( deviceClass == CLASS_A )
 800f9c4:	79fb      	ldrb	r3, [r7, #7]
 800f9c6:	2b00      	cmp	r3, #0
 800f9c8:	d107      	bne.n	800f9da <SwitchClass+0x42>
            {
                // Revert back RxC parameters
                Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParams.Rx2Channel;
 800f9ca:	4b59      	ldr	r3, [pc, #356]	@ (800fb30 <SwitchClass+0x198>)
 800f9cc:	4a58      	ldr	r2, [pc, #352]	@ (800fb30 <SwitchClass+0x198>)
 800f9ce:	336c      	adds	r3, #108	@ 0x6c
 800f9d0:	3264      	adds	r2, #100	@ 0x64
 800f9d2:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f9d6:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            if( deviceClass == CLASS_B )
 800f9da:	79fb      	ldrb	r3, [r7, #7]
 800f9dc:	2b01      	cmp	r3, #1
 800f9de:	d10c      	bne.n	800f9fa <SwitchClass+0x62>
            {
                status = LoRaMacClassBSwitchClass( deviceClass );
 800f9e0:	79fb      	ldrb	r3, [r7, #7]
 800f9e2:	4618      	mov	r0, r3
 800f9e4:	f003 fb80 	bl	80130e8 <LoRaMacClassBSwitchClass>
 800f9e8:	4603      	mov	r3, r0
 800f9ea:	73fb      	strb	r3, [r7, #15]
                if( status == LORAMAC_STATUS_OK )
 800f9ec:	7bfb      	ldrb	r3, [r7, #15]
 800f9ee:	2b00      	cmp	r3, #0
 800f9f0:	d103      	bne.n	800f9fa <SwitchClass+0x62>
                {
                    Nvm.MacGroup2.DeviceClass = deviceClass;
 800f9f2:	4a4f      	ldr	r2, [pc, #316]	@ (800fb30 <SwitchClass+0x198>)
 800f9f4:	79fb      	ldrb	r3, [r7, #7]
 800f9f6:	f882 3104 	strb.w	r3, [r2, #260]	@ 0x104
                }
            }

            if( deviceClass == CLASS_C )
 800f9fa:	79fb      	ldrb	r3, [r7, #7]
 800f9fc:	2b02      	cmp	r3, #2
 800f9fe:	f040 808c 	bne.w	800fb1a <SwitchClass+0x182>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 800fa02:	4a4b      	ldr	r2, [pc, #300]	@ (800fb30 <SwitchClass+0x198>)
 800fa04:	79fb      	ldrb	r3, [r7, #7]
 800fa06:	f882 3104 	strb.w	r3, [r2, #260]	@ 0x104

                MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 800fa0a:	4a4a      	ldr	r2, [pc, #296]	@ (800fb34 <SwitchClass+0x19c>)
 800fa0c:	4b49      	ldr	r3, [pc, #292]	@ (800fb34 <SwitchClass+0x19c>)
 800fa0e:	f502 747a 	add.w	r4, r2, #1000	@ 0x3e8
 800fa12:	f503 7574 	add.w	r5, r3, #976	@ 0x3d0
 800fa16:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fa18:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fa1a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800fa1e:	e884 0003 	stmia.w	r4, {r0, r1}
                MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 800fa22:	4b44      	ldr	r3, [pc, #272]	@ (800fb34 <SwitchClass+0x19c>)
 800fa24:	2202      	movs	r2, #2
 800fa26:	f883 23fb 	strb.w	r2, [r3, #1019]	@ 0x3fb

                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800fa2a:	2300      	movs	r3, #0
 800fa2c:	73bb      	strb	r3, [r7, #14]
 800fa2e:	e049      	b.n	800fac4 <SwitchClass+0x12c>
                {
                    if( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true )
 800fa30:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800fa34:	4a3e      	ldr	r2, [pc, #248]	@ (800fb30 <SwitchClass+0x198>)
 800fa36:	212c      	movs	r1, #44	@ 0x2c
 800fa38:	fb01 f303 	mul.w	r3, r1, r3
 800fa3c:	4413      	add	r3, r2
 800fa3e:	33da      	adds	r3, #218	@ 0xda
 800fa40:	781b      	ldrb	r3, [r3, #0]
 800fa42:	2b00      	cmp	r3, #0
 800fa44:	d038      	beq.n	800fab8 <SwitchClass+0x120>
                    {
                        Nvm.MacGroup2.MacParams.RxCChannel.Frequency = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.ClassC.Frequency;
 800fa46:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800fa4a:	4a39      	ldr	r2, [pc, #228]	@ (800fb30 <SwitchClass+0x198>)
 800fa4c:	212c      	movs	r1, #44	@ 0x2c
 800fa4e:	fb01 f303 	mul.w	r3, r1, r3
 800fa52:	4413      	add	r3, r2
 800fa54:	33f0      	adds	r3, #240	@ 0xf0
 800fa56:	681b      	ldr	r3, [r3, #0]
 800fa58:	4a35      	ldr	r2, [pc, #212]	@ (800fb30 <SwitchClass+0x198>)
 800fa5a:	66d3      	str	r3, [r2, #108]	@ 0x6c
                        Nvm.MacGroup2.MacParams.RxCChannel.Datarate = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.ClassC.Datarate;
 800fa5c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800fa60:	4a33      	ldr	r2, [pc, #204]	@ (800fb30 <SwitchClass+0x198>)
 800fa62:	212c      	movs	r1, #44	@ 0x2c
 800fa64:	fb01 f303 	mul.w	r3, r1, r3
 800fa68:	4413      	add	r3, r2
 800fa6a:	33f4      	adds	r3, #244	@ 0xf4
 800fa6c:	f993 3000 	ldrsb.w	r3, [r3]
 800fa70:	b2da      	uxtb	r2, r3
 800fa72:	4b2f      	ldr	r3, [pc, #188]	@ (800fb30 <SwitchClass+0x198>)
 800fa74:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70

                        MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 800fa78:	4b2e      	ldr	r3, [pc, #184]	@ (800fb34 <SwitchClass+0x19c>)
 800fa7a:	f893 241f 	ldrb.w	r2, [r3, #1055]	@ 0x41f
 800fa7e:	4b2d      	ldr	r3, [pc, #180]	@ (800fb34 <SwitchClass+0x19c>)
 800fa80:	f883 23e8 	strb.w	r2, [r3, #1000]	@ 0x3e8
                        MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 800fa84:	4b2a      	ldr	r3, [pc, #168]	@ (800fb30 <SwitchClass+0x198>)
 800fa86:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800fa88:	4a2a      	ldr	r2, [pc, #168]	@ (800fb34 <SwitchClass+0x19c>)
 800fa8a:	f8c2 33ec 	str.w	r3, [r2, #1004]	@ 0x3ec
                        MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800fa8e:	4b28      	ldr	r3, [pc, #160]	@ (800fb30 <SwitchClass+0x198>)
 800fa90:	f893 2075 	ldrb.w	r2, [r3, #117]	@ 0x75
 800fa94:	4b27      	ldr	r3, [pc, #156]	@ (800fb34 <SwitchClass+0x19c>)
 800fa96:	f883 23f8 	strb.w	r2, [r3, #1016]	@ 0x3f8
                        MacCtx.RxWindowCConfig.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 800fa9a:	4b25      	ldr	r3, [pc, #148]	@ (800fb30 <SwitchClass+0x198>)
 800fa9c:	f893 2080 	ldrb.w	r2, [r3, #128]	@ 0x80
 800faa0:	4b24      	ldr	r3, [pc, #144]	@ (800fb34 <SwitchClass+0x19c>)
 800faa2:	f883 23f9 	strb.w	r2, [r3, #1017]	@ 0x3f9
                        MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 800faa6:	4b23      	ldr	r3, [pc, #140]	@ (800fb34 <SwitchClass+0x19c>)
 800faa8:	2203      	movs	r2, #3
 800faaa:	f883 23fb 	strb.w	r2, [r3, #1019]	@ 0x3fb
                        MacCtx.RxWindowCConfig.RxContinuous = true;
 800faae:	4b21      	ldr	r3, [pc, #132]	@ (800fb34 <SwitchClass+0x19c>)
 800fab0:	2201      	movs	r2, #1
 800fab2:	f883 23fa 	strb.w	r2, [r3, #1018]	@ 0x3fa
                        break;
 800fab6:	e009      	b.n	800facc <SwitchClass+0x134>
                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800fab8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800fabc:	b2db      	uxtb	r3, r3
 800fabe:	3301      	adds	r3, #1
 800fac0:	b2db      	uxtb	r3, r3
 800fac2:	73bb      	strb	r3, [r7, #14]
 800fac4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800fac8:	2b00      	cmp	r3, #0
 800faca:	ddb1      	ble.n	800fa30 <SwitchClass+0x98>
                    }
                }

                // Set the NodeAckRequested indicator to default
                MacCtx.NodeAckRequested = false;
 800facc:	4b19      	ldr	r3, [pc, #100]	@ (800fb34 <SwitchClass+0x19c>)
 800face:	2200      	movs	r2, #0
 800fad0:	f883 241e 	strb.w	r2, [r3, #1054]	@ 0x41e
                // Set the radio into sleep mode in case we are still in RX mode
                Radio.Sleep( );
 800fad4:	4b18      	ldr	r3, [pc, #96]	@ (800fb38 <SwitchClass+0x1a0>)
 800fad6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fad8:	4798      	blx	r3

                OpenContinuousRxCWindow( );
 800fada:	f001 fa03 	bl	8010ee4 <OpenContinuousRxCWindow>

                status = LORAMAC_STATUS_OK;
 800fade:	2300      	movs	r3, #0
 800fae0:	73fb      	strb	r3, [r7, #15]
            }
            break;
 800fae2:	e01a      	b.n	800fb1a <SwitchClass+0x182>
        }
        case CLASS_B:
        {
            status = LoRaMacClassBSwitchClass( deviceClass );
 800fae4:	79fb      	ldrb	r3, [r7, #7]
 800fae6:	4618      	mov	r0, r3
 800fae8:	f003 fafe 	bl	80130e8 <LoRaMacClassBSwitchClass>
 800faec:	4603      	mov	r3, r0
 800faee:	73fb      	strb	r3, [r7, #15]
            if( status == LORAMAC_STATUS_OK )
 800faf0:	7bfb      	ldrb	r3, [r7, #15]
 800faf2:	2b00      	cmp	r3, #0
 800faf4:	d113      	bne.n	800fb1e <SwitchClass+0x186>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 800faf6:	4a0e      	ldr	r2, [pc, #56]	@ (800fb30 <SwitchClass+0x198>)
 800faf8:	79fb      	ldrb	r3, [r7, #7]
 800fafa:	f882 3104 	strb.w	r3, [r2, #260]	@ 0x104
            }
            break;
 800fafe:	e00e      	b.n	800fb1e <SwitchClass+0x186>
        }
        case CLASS_C:
        {
            if( deviceClass == CLASS_A )
 800fb00:	79fb      	ldrb	r3, [r7, #7]
 800fb02:	2b00      	cmp	r3, #0
 800fb04:	d10d      	bne.n	800fb22 <SwitchClass+0x18a>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 800fb06:	4a0a      	ldr	r2, [pc, #40]	@ (800fb30 <SwitchClass+0x198>)
 800fb08:	79fb      	ldrb	r3, [r7, #7]
 800fb0a:	f882 3104 	strb.w	r3, [r2, #260]	@ 0x104

                // Set the radio into sleep to setup a defined state
                Radio.Sleep( );
 800fb0e:	4b0a      	ldr	r3, [pc, #40]	@ (800fb38 <SwitchClass+0x1a0>)
 800fb10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fb12:	4798      	blx	r3

                status = LORAMAC_STATUS_OK;
 800fb14:	2300      	movs	r3, #0
 800fb16:	73fb      	strb	r3, [r7, #15]
            }
            break;
 800fb18:	e003      	b.n	800fb22 <SwitchClass+0x18a>
            break;
 800fb1a:	bf00      	nop
 800fb1c:	e002      	b.n	800fb24 <SwitchClass+0x18c>
            break;
 800fb1e:	bf00      	nop
 800fb20:	e000      	b.n	800fb24 <SwitchClass+0x18c>
            break;
 800fb22:	bf00      	nop
        }
    }

    return status;
 800fb24:	7bfb      	ldrb	r3, [r7, #15]
}
 800fb26:	4618      	mov	r0, r3
 800fb28:	3710      	adds	r7, #16
 800fb2a:	46bd      	mov	sp, r7
 800fb2c:	bdb0      	pop	{r4, r5, r7, pc}
 800fb2e:	bf00      	nop
 800fb30:	20000df0 	.word	0x20000df0
 800fb34:	200008d0 	.word	0x200008d0
 800fb38:	0801f874 	.word	0x0801f874

0800fb3c <GetMaxAppPayloadWithoutFOptsLength>:

static uint8_t GetMaxAppPayloadWithoutFOptsLength( int8_t datarate )
{
 800fb3c:	b580      	push	{r7, lr}
 800fb3e:	b086      	sub	sp, #24
 800fb40:	af00      	add	r7, sp, #0
 800fb42:	4603      	mov	r3, r0
 800fb44:	71fb      	strb	r3, [r7, #7]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Setup PHY request
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800fb46:	4b10      	ldr	r3, [pc, #64]	@ (800fb88 <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 800fb48:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 800fb4c:	74bb      	strb	r3, [r7, #18]
    getPhy.Datarate = datarate;
 800fb4e:	79fb      	ldrb	r3, [r7, #7]
 800fb50:	747b      	strb	r3, [r7, #17]
    getPhy.Attribute = PHY_MAX_PAYLOAD;
 800fb52:	230d      	movs	r3, #13
 800fb54:	743b      	strb	r3, [r7, #16]
    /* ST_WORKAROUND_BEGIN: Keep repeater feature */
    // Get the maximum payload length
    if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 800fb56:	4b0c      	ldr	r3, [pc, #48]	@ (800fb88 <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 800fb58:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800fb5c:	2b00      	cmp	r3, #0
 800fb5e:	d001      	beq.n	800fb64 <GetMaxAppPayloadWithoutFOptsLength+0x28>
    {
        getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 800fb60:	230e      	movs	r3, #14
 800fb62:	743b      	strb	r3, [r7, #16]
    }
    /* ST_WORKAROUND_END */
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800fb64:	4b08      	ldr	r3, [pc, #32]	@ (800fb88 <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 800fb66:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800fb6a:	f107 0210 	add.w	r2, r7, #16
 800fb6e:	4611      	mov	r1, r2
 800fb70:	4618      	mov	r0, r3
 800fb72:	f005 f9c3 	bl	8014efc <RegionGetPhyParam>
 800fb76:	4603      	mov	r3, r0
 800fb78:	60fb      	str	r3, [r7, #12]

    return phyParam.Value;
 800fb7a:	68fb      	ldr	r3, [r7, #12]
 800fb7c:	b2db      	uxtb	r3, r3
}
 800fb7e:	4618      	mov	r0, r3
 800fb80:	3718      	adds	r7, #24
 800fb82:	46bd      	mov	sp, r7
 800fb84:	bd80      	pop	{r7, pc}
 800fb86:	bf00      	nop
 800fb88:	20000df0 	.word	0x20000df0

0800fb8c <ValidatePayloadLength>:

static bool ValidatePayloadLength( uint8_t lenN, int8_t datarate, uint8_t fOptsLen )
{
 800fb8c:	b580      	push	{r7, lr}
 800fb8e:	b084      	sub	sp, #16
 800fb90:	af00      	add	r7, sp, #0
 800fb92:	4603      	mov	r3, r0
 800fb94:	71fb      	strb	r3, [r7, #7]
 800fb96:	460b      	mov	r3, r1
 800fb98:	71bb      	strb	r3, [r7, #6]
 800fb9a:	4613      	mov	r3, r2
 800fb9c:	717b      	strb	r3, [r7, #5]
    uint16_t maxN = 0;
 800fb9e:	2300      	movs	r3, #0
 800fba0:	81fb      	strh	r3, [r7, #14]
    uint16_t payloadSize = 0;
 800fba2:	2300      	movs	r3, #0
 800fba4:	81bb      	strh	r3, [r7, #12]

    maxN = GetMaxAppPayloadWithoutFOptsLength( datarate );
 800fba6:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800fbaa:	4618      	mov	r0, r3
 800fbac:	f7ff ffc6 	bl	800fb3c <GetMaxAppPayloadWithoutFOptsLength>
 800fbb0:	4603      	mov	r3, r0
 800fbb2:	81fb      	strh	r3, [r7, #14]

    // Calculate the resulting payload size
    payloadSize = ( lenN + fOptsLen );
 800fbb4:	79fb      	ldrb	r3, [r7, #7]
 800fbb6:	b29a      	uxth	r2, r3
 800fbb8:	797b      	ldrb	r3, [r7, #5]
 800fbba:	b29b      	uxth	r3, r3
 800fbbc:	4413      	add	r3, r2
 800fbbe:	81bb      	strh	r3, [r7, #12]

    // Validation of the application payload size
    if( ( payloadSize <= maxN ) && ( payloadSize <= LORAMAC_PHY_MAXPAYLOAD ) )
 800fbc0:	89ba      	ldrh	r2, [r7, #12]
 800fbc2:	89fb      	ldrh	r3, [r7, #14]
 800fbc4:	429a      	cmp	r2, r3
 800fbc6:	d804      	bhi.n	800fbd2 <ValidatePayloadLength+0x46>
 800fbc8:	89bb      	ldrh	r3, [r7, #12]
 800fbca:	2bff      	cmp	r3, #255	@ 0xff
 800fbcc:	d801      	bhi.n	800fbd2 <ValidatePayloadLength+0x46>
    {
        return true;
 800fbce:	2301      	movs	r3, #1
 800fbd0:	e000      	b.n	800fbd4 <ValidatePayloadLength+0x48>
    }
    return false;
 800fbd2:	2300      	movs	r3, #0
}
 800fbd4:	4618      	mov	r0, r3
 800fbd6:	3710      	adds	r7, #16
 800fbd8:	46bd      	mov	sp, r7
 800fbda:	bd80      	pop	{r7, pc}

0800fbdc <ProcessMacCommands>:
}
*/
/*ST_WORKAROUND_END */

static void ProcessMacCommands( uint8_t *payload, uint8_t macIndex, uint8_t commandsSize, int8_t snr, LoRaMacRxSlot_t rxSlot )
{
 800fbdc:	b590      	push	{r4, r7, lr}
 800fbde:	b0a5      	sub	sp, #148	@ 0x94
 800fbe0:	af02      	add	r7, sp, #8
 800fbe2:	6078      	str	r0, [r7, #4]
 800fbe4:	4608      	mov	r0, r1
 800fbe6:	4611      	mov	r1, r2
 800fbe8:	461a      	mov	r2, r3
 800fbea:	4603      	mov	r3, r0
 800fbec:	70fb      	strb	r3, [r7, #3]
 800fbee:	460b      	mov	r3, r1
 800fbf0:	70bb      	strb	r3, [r7, #2]
 800fbf2:	4613      	mov	r3, r2
 800fbf4:	707b      	strb	r3, [r7, #1]
    uint8_t status = 0;
 800fbf6:	2300      	movs	r3, #0
 800fbf8:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
    bool adrBlockFound = false;
 800fbfc:	2300      	movs	r3, #0
 800fbfe:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 800fc02:	2300      	movs	r3, #0
 800fc04:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    if( ( rxSlot != RX_SLOT_WIN_1 ) && ( rxSlot != RX_SLOT_WIN_2 ) )
 800fc08:	f897 3098 	ldrb.w	r3, [r7, #152]	@ 0x98
 800fc0c:	2b00      	cmp	r3, #0
 800fc0e:	f000 84b9 	beq.w	8010584 <ProcessMacCommands+0x9a8>
 800fc12:	f897 3098 	ldrb.w	r3, [r7, #152]	@ 0x98
 800fc16:	2b01      	cmp	r3, #1
 800fc18:	f040 84ba 	bne.w	8010590 <ProcessMacCommands+0x9b4>
        // Do only parse MAC commands for Class A RX windows
        return;
    }
#endif /* LORAMAC_VERSION */

    while( macIndex < commandsSize )
 800fc1c:	f000 bcb2 	b.w	8010584 <ProcessMacCommands+0x9a8>
    {
        // Make sure to parse only complete MAC commands
        if( ( LoRaMacCommandsGetCmdSize( payload[macIndex] ) + macIndex ) > commandsSize )
 800fc20:	78fb      	ldrb	r3, [r7, #3]
 800fc22:	687a      	ldr	r2, [r7, #4]
 800fc24:	4413      	add	r3, r2
 800fc26:	781b      	ldrb	r3, [r3, #0]
 800fc28:	4618      	mov	r0, r3
 800fc2a:	f003 fd41 	bl	80136b0 <LoRaMacCommandsGetCmdSize>
 800fc2e:	4603      	mov	r3, r0
 800fc30:	461a      	mov	r2, r3
 800fc32:	78fb      	ldrb	r3, [r7, #3]
 800fc34:	441a      	add	r2, r3
 800fc36:	78bb      	ldrb	r3, [r7, #2]
 800fc38:	429a      	cmp	r2, r3
 800fc3a:	f300 84ab 	bgt.w	8010594 <ProcessMacCommands+0x9b8>
        {
            return;
        }

        // Decode Frame MAC commands
        switch( payload[macIndex++] )
 800fc3e:	78fb      	ldrb	r3, [r7, #3]
 800fc40:	1c5a      	adds	r2, r3, #1
 800fc42:	70fa      	strb	r2, [r7, #3]
 800fc44:	461a      	mov	r2, r3
 800fc46:	687b      	ldr	r3, [r7, #4]
 800fc48:	4413      	add	r3, r2
 800fc4a:	781b      	ldrb	r3, [r3, #0]
 800fc4c:	3b02      	subs	r3, #2
 800fc4e:	2b11      	cmp	r3, #17
 800fc50:	f200 84a2 	bhi.w	8010598 <ProcessMacCommands+0x9bc>
 800fc54:	a201      	add	r2, pc, #4	@ (adr r2, 800fc5c <ProcessMacCommands+0x80>)
 800fc56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fc5a:	bf00      	nop
 800fc5c:	0800fca5 	.word	0x0800fca5
 800fc60:	0800fce7 	.word	0x0800fce7
 800fc64:	0800fe63 	.word	0x0800fe63
 800fc68:	0800fea1 	.word	0x0800fea1
 800fc6c:	0800ff99 	.word	0x0800ff99
 800fc70:	0800ffe9 	.word	0x0800ffe9
 800fc74:	080100a5 	.word	0x080100a5
 800fc78:	080100fb 	.word	0x080100fb
 800fc7c:	080101df 	.word	0x080101df
 800fc80:	08010599 	.word	0x08010599
 800fc84:	08010599 	.word	0x08010599
 800fc88:	08010289 	.word	0x08010289
 800fc8c:	08010599 	.word	0x08010599
 800fc90:	08010599 	.word	0x08010599
 800fc94:	080103a9 	.word	0x080103a9
 800fc98:	080103dd 	.word	0x080103dd
 800fc9c:	0801046d 	.word	0x0801046d
 800fca0:	080104e5 	.word	0x080104e5
        {
            case SRV_MAC_LINK_CHECK_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_LINK_CHECK ) == true )
 800fca4:	2004      	movs	r0, #4
 800fca6:	f003 fedb 	bl	8013a60 <LoRaMacConfirmQueueIsCmdActive>
 800fcaa:	4603      	mov	r3, r0
 800fcac:	2b00      	cmp	r3, #0
 800fcae:	f000 845c 	beq.w	801056a <ProcessMacCommands+0x98e>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_LINK_CHECK );
 800fcb2:	2104      	movs	r1, #4
 800fcb4:	2000      	movs	r0, #0
 800fcb6:	f003 fe47 	bl	8013948 <LoRaMacConfirmQueueSetStatus>
                    MacCtx.MlmeConfirm.DemodMargin = payload[macIndex++];
 800fcba:	78fb      	ldrb	r3, [r7, #3]
 800fcbc:	1c5a      	adds	r2, r3, #1
 800fcbe:	70fa      	strb	r2, [r7, #3]
 800fcc0:	461a      	mov	r2, r3
 800fcc2:	687b      	ldr	r3, [r7, #4]
 800fcc4:	4413      	add	r3, r2
 800fcc6:	781a      	ldrb	r2, [r3, #0]
 800fcc8:	4bb0      	ldr	r3, [pc, #704]	@ (800ff8c <ProcessMacCommands+0x3b0>)
 800fcca:	f883 2460 	strb.w	r2, [r3, #1120]	@ 0x460
                    MacCtx.MlmeConfirm.NbGateways = payload[macIndex++];
 800fcce:	78fb      	ldrb	r3, [r7, #3]
 800fcd0:	1c5a      	adds	r2, r3, #1
 800fcd2:	70fa      	strb	r2, [r7, #3]
 800fcd4:	461a      	mov	r2, r3
 800fcd6:	687b      	ldr	r3, [r7, #4]
 800fcd8:	4413      	add	r3, r2
 800fcda:	781a      	ldrb	r2, [r3, #0]
 800fcdc:	4bab      	ldr	r3, [pc, #684]	@ (800ff8c <ProcessMacCommands+0x3b0>)
 800fcde:	f883 2461 	strb.w	r2, [r3, #1121]	@ 0x461
                }
                break;
 800fce2:	f000 bc42 	b.w	801056a <ProcessMacCommands+0x98e>
            }
            case SRV_MAC_LINK_ADR_REQ:
            {
                LinkAdrReqParams_t linkAdrReq;
                int8_t linkAdrDatarate = DR_0;
 800fce6:	2300      	movs	r3, #0
 800fce8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
                int8_t linkAdrTxPower = TX_POWER_0;
 800fcec:	2300      	movs	r3, #0
 800fcee:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
                uint8_t linkAdrNbRep = 0;
 800fcf2:	2300      	movs	r3, #0
 800fcf4:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
                uint8_t linkAdrNbBytesParsed = 0;
 800fcf8:	2300      	movs	r3, #0
 800fcfa:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
                    }
                    // Update MAC index
                    macIndex += linkAdrNbBytesParsed - 1;
                }
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
                if( adrBlockFound == false )
 800fcfe:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 800fd02:	f083 0301 	eor.w	r3, r3, #1
 800fd06:	b2db      	uxtb	r3, r3
 800fd08:	2b00      	cmp	r3, #0
 800fd0a:	f000 80a6 	beq.w	800fe5a <ProcessMacCommands+0x27e>
                {
                    adrBlockFound = true;
 800fd0e:	2301      	movs	r3, #1
 800fd10:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87

                    do
                    {
                        // Fill parameter structure
                        linkAdrReq.Payload = &payload[macIndex - 1];
 800fd14:	78fb      	ldrb	r3, [r7, #3]
 800fd16:	3b01      	subs	r3, #1
 800fd18:	687a      	ldr	r2, [r7, #4]
 800fd1a:	4413      	add	r3, r2
 800fd1c:	65fb      	str	r3, [r7, #92]	@ 0x5c
                        linkAdrReq.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 800fd1e:	4b9c      	ldr	r3, [pc, #624]	@ (800ff90 <ProcessMacCommands+0x3b4>)
 800fd20:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 800fd24:	f887 3062 	strb.w	r3, [r7, #98]	@ 0x62
                        linkAdrReq.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800fd28:	4b99      	ldr	r3, [pc, #612]	@ (800ff90 <ProcessMacCommands+0x3b4>)
 800fd2a:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 800fd2e:	f887 3061 	strb.w	r3, [r7, #97]	@ 0x61
                        linkAdrReq.CurrentDatarate = Nvm.MacGroup1.ChannelsDatarate;
 800fd32:	4b97      	ldr	r3, [pc, #604]	@ (800ff90 <ProcessMacCommands+0x3b4>)
 800fd34:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 800fd38:	f887 3063 	strb.w	r3, [r7, #99]	@ 0x63
                        linkAdrReq.CurrentTxPower = Nvm.MacGroup1.ChannelsTxPower;
 800fd3c:	4b94      	ldr	r3, [pc, #592]	@ (800ff90 <ProcessMacCommands+0x3b4>)
 800fd3e:	f993 3038 	ldrsb.w	r3, [r3, #56]	@ 0x38
 800fd42:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
                        linkAdrReq.CurrentNbRep = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 800fd46:	4b92      	ldr	r3, [pc, #584]	@ (800ff90 <ProcessMacCommands+0x3b4>)
 800fd48:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
 800fd4c:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
                        linkAdrReq.Version = Nvm.MacGroup2.Version;
 800fd50:	4b8f      	ldr	r3, [pc, #572]	@ (800ff90 <ProcessMacCommands+0x3b4>)
 800fd52:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 800fd56:	65bb      	str	r3, [r7, #88]	@ 0x58

                        // There is a fundamental difference in reporting the status
                        // of the LinkAdrRequests when ADR is on or off. When ADR is on, every
                        // LinkAdrAns contains the same value. This does not hold when ADR is off,
                        // where every LinkAdrAns requires an individual status.
                        if( Nvm.MacGroup2.AdrCtrlOn == true )
 800fd58:	4b8d      	ldr	r3, [pc, #564]	@ (800ff90 <ProcessMacCommands+0x3b4>)
 800fd5a:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 800fd5e:	2b00      	cmp	r3, #0
 800fd60:	d008      	beq.n	800fd74 <ProcessMacCommands+0x198>
                        {
                            // When ADR is on, the function RegionLinkAdrReq will take care
                            // about the parsing and interpretation of the LinkAdrRequest block and
                            // it provides one status which shall be applied to every LinkAdrAns
                            linkAdrReq.PayloadSize = commandsSize - ( macIndex - 1 );
 800fd62:	78ba      	ldrb	r2, [r7, #2]
 800fd64:	78fb      	ldrb	r3, [r7, #3]
 800fd66:	1ad3      	subs	r3, r2, r3
 800fd68:	b2db      	uxtb	r3, r3
 800fd6a:	3301      	adds	r3, #1
 800fd6c:	b2db      	uxtb	r3, r3
 800fd6e:	f887 3060 	strb.w	r3, [r7, #96]	@ 0x60
 800fd72:	e002      	b.n	800fd7a <ProcessMacCommands+0x19e>
                            // When ADR is off, this function will loop over the individual LinkAdrRequests
                            // and will call RegionLinkAdrReq for each individually, as every request
                            // requires an individual answer.
                            // When ADR is off, the function RegionLinkAdrReq ignores the new values for
                            // ChannelsDatarate, ChannelsTxPower and ChannelsNbTrans.
                            linkAdrReq.PayloadSize = 5;
 800fd74:	2305      	movs	r3, #5
 800fd76:	f887 3060 	strb.w	r3, [r7, #96]	@ 0x60
                        }

                        // Process the ADR requests
                        status = RegionLinkAdrReq( Nvm.MacGroup2.Region, &linkAdrReq, &linkAdrDatarate,
 800fd7a:	4b85      	ldr	r3, [pc, #532]	@ (800ff90 <ProcessMacCommands+0x3b4>)
 800fd7c:	f893 0040 	ldrb.w	r0, [r3, #64]	@ 0x40
 800fd80:	f107 0456 	add.w	r4, r7, #86	@ 0x56
 800fd84:	f107 0257 	add.w	r2, r7, #87	@ 0x57
 800fd88:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 800fd8c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800fd90:	9301      	str	r3, [sp, #4]
 800fd92:	f107 0355 	add.w	r3, r7, #85	@ 0x55
 800fd96:	9300      	str	r3, [sp, #0]
 800fd98:	4623      	mov	r3, r4
 800fd9a:	f005 f96c 	bl	8015076 <RegionLinkAdrReq>
 800fd9e:	4603      	mov	r3, r0
 800fda0:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
                                                &linkAdrTxPower, &linkAdrNbRep, &linkAdrNbBytesParsed );

                        if( ( status & 0x07 ) == 0x07 )
 800fda4:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 800fda8:	f003 0307 	and.w	r3, r3, #7
 800fdac:	2b07      	cmp	r3, #7
 800fdae:	d119      	bne.n	800fde4 <ProcessMacCommands+0x208>
                        {
                            // Set the status that the datarate has been increased
                            if( linkAdrDatarate > Nvm.MacGroup1.ChannelsDatarate )
 800fdb0:	4b77      	ldr	r3, [pc, #476]	@ (800ff90 <ProcessMacCommands+0x3b4>)
 800fdb2:	f993 2039 	ldrsb.w	r2, [r3, #57]	@ 0x39
 800fdb6:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 800fdba:	429a      	cmp	r2, r3
 800fdbc:	da03      	bge.n	800fdc6 <ProcessMacCommands+0x1ea>
                            {
                                Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = true;
 800fdbe:	4b74      	ldr	r3, [pc, #464]	@ (800ff90 <ProcessMacCommands+0x3b4>)
 800fdc0:	2201      	movs	r2, #1
 800fdc2:	f883 2109 	strb.w	r2, [r3, #265]	@ 0x109
                            }
                            Nvm.MacGroup1.ChannelsDatarate = linkAdrDatarate;
 800fdc6:	f997 2057 	ldrsb.w	r2, [r7, #87]	@ 0x57
 800fdca:	4b71      	ldr	r3, [pc, #452]	@ (800ff90 <ProcessMacCommands+0x3b4>)
 800fdcc:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
                            Nvm.MacGroup1.ChannelsTxPower = linkAdrTxPower;
 800fdd0:	f997 2056 	ldrsb.w	r2, [r7, #86]	@ 0x56
 800fdd4:	4b6e      	ldr	r3, [pc, #440]	@ (800ff90 <ProcessMacCommands+0x3b4>)
 800fdd6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
                            Nvm.MacGroup2.MacParams.ChannelsNbTrans = linkAdrNbRep;
 800fdda:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 800fdde:	4b6c      	ldr	r3, [pc, #432]	@ (800ff90 <ProcessMacCommands+0x3b4>)
 800fde0:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
                        }

                        // Add the answers to the buffer
                        for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 800fde4:	2300      	movs	r3, #0
 800fde6:	f887 3086 	strb.w	r3, [r7, #134]	@ 0x86
 800fdea:	e00b      	b.n	800fe04 <ProcessMacCommands+0x228>
                        {
                            LoRaMacCommandsAddCmd( MOTE_MAC_LINK_ADR_ANS, &status, 1 );
 800fdec:	f107 036b 	add.w	r3, r7, #107	@ 0x6b
 800fdf0:	2201      	movs	r2, #1
 800fdf2:	4619      	mov	r1, r3
 800fdf4:	2003      	movs	r0, #3
 800fdf6:	f003 fb0b 	bl	8013410 <LoRaMacCommandsAddCmd>
                        for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 800fdfa:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
 800fdfe:	3301      	adds	r3, #1
 800fe00:	f887 3086 	strb.w	r3, [r7, #134]	@ 0x86
 800fe04:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 800fe08:	4a62      	ldr	r2, [pc, #392]	@ (800ff94 <ProcessMacCommands+0x3b8>)
 800fe0a:	fba2 2303 	umull	r2, r3, r2, r3
 800fe0e:	089b      	lsrs	r3, r3, #2
 800fe10:	b2db      	uxtb	r3, r3
 800fe12:	f897 2086 	ldrb.w	r2, [r7, #134]	@ 0x86
 800fe16:	429a      	cmp	r2, r3
 800fe18:	d3e8      	bcc.n	800fdec <ProcessMacCommands+0x210>
                        }
                        // Update MAC index
                        macIndex += linkAdrNbBytesParsed - 1;
 800fe1a:	f897 2054 	ldrb.w	r2, [r7, #84]	@ 0x54
 800fe1e:	78fb      	ldrb	r3, [r7, #3]
 800fe20:	4413      	add	r3, r2
 800fe22:	b2db      	uxtb	r3, r3
 800fe24:	3b01      	subs	r3, #1
 800fe26:	70fb      	strb	r3, [r7, #3]

                        // Check to prevent invalid access
                        if( macIndex >= commandsSize )
 800fe28:	78fa      	ldrb	r2, [r7, #3]
 800fe2a:	78bb      	ldrb	r3, [r7, #2]
 800fe2c:	429a      	cmp	r2, r3
 800fe2e:	d20a      	bcs.n	800fe46 <ProcessMacCommands+0x26a>
                            break;

                    } while( payload[macIndex++] == SRV_MAC_LINK_ADR_REQ );
 800fe30:	78fb      	ldrb	r3, [r7, #3]
 800fe32:	1c5a      	adds	r2, r3, #1
 800fe34:	70fa      	strb	r2, [r7, #3]
 800fe36:	461a      	mov	r2, r3
 800fe38:	687b      	ldr	r3, [r7, #4]
 800fe3a:	4413      	add	r3, r2
 800fe3c:	781b      	ldrb	r3, [r3, #0]
 800fe3e:	2b03      	cmp	r3, #3
 800fe40:	f43f af68 	beq.w	800fd14 <ProcessMacCommands+0x138>
 800fe44:	e000      	b.n	800fe48 <ProcessMacCommands+0x26c>
                            break;
 800fe46:	bf00      	nop

                    if( macIndex < commandsSize )
 800fe48:	78fa      	ldrb	r2, [r7, #3]
 800fe4a:	78bb      	ldrb	r3, [r7, #2]
 800fe4c:	429a      	cmp	r2, r3
 800fe4e:	f080 838e 	bcs.w	801056e <ProcessMacCommands+0x992>
                    {
                        // Decrease the index such that it points to the next MAC command
                        macIndex--;
 800fe52:	78fb      	ldrb	r3, [r7, #3]
 800fe54:	3b01      	subs	r3, #1
 800fe56:	70fb      	strb	r3, [r7, #3]
                {
                    // Increase the index by the MAC command size (without command)
                    macIndex += 4;
                }
#endif /* LORAMAC_VERSION */
                break;
 800fe58:	e389      	b.n	801056e <ProcessMacCommands+0x992>
                    macIndex += 4;
 800fe5a:	78fb      	ldrb	r3, [r7, #3]
 800fe5c:	3304      	adds	r3, #4
 800fe5e:	70fb      	strb	r3, [r7, #3]
                break;
 800fe60:	e385      	b.n	801056e <ProcessMacCommands+0x992>
            }
            case SRV_MAC_DUTY_CYCLE_REQ:
            {
                Nvm.MacGroup2.MaxDCycle = payload[macIndex++] & 0x0F;
 800fe62:	78fb      	ldrb	r3, [r7, #3]
 800fe64:	1c5a      	adds	r2, r3, #1
 800fe66:	70fa      	strb	r2, [r7, #3]
 800fe68:	461a      	mov	r2, r3
 800fe6a:	687b      	ldr	r3, [r7, #4]
 800fe6c:	4413      	add	r3, r2
 800fe6e:	781b      	ldrb	r3, [r3, #0]
 800fe70:	f003 030f 	and.w	r3, r3, #15
 800fe74:	b2da      	uxtb	r2, r3
 800fe76:	4b46      	ldr	r3, [pc, #280]	@ (800ff90 <ProcessMacCommands+0x3b4>)
 800fe78:	f883 2107 	strb.w	r2, [r3, #263]	@ 0x107
                Nvm.MacGroup2.AggregatedDCycle = 1 << Nvm.MacGroup2.MaxDCycle;
 800fe7c:	4b44      	ldr	r3, [pc, #272]	@ (800ff90 <ProcessMacCommands+0x3b4>)
 800fe7e:	f893 3107 	ldrb.w	r3, [r3, #263]	@ 0x107
 800fe82:	461a      	mov	r2, r3
 800fe84:	2301      	movs	r3, #1
 800fe86:	4093      	lsls	r3, r2
 800fe88:	b29a      	uxth	r2, r3
 800fe8a:	4b41      	ldr	r3, [pc, #260]	@ (800ff90 <ProcessMacCommands+0x3b4>)
 800fe8c:	f8a3 210c 	strh.w	r2, [r3, #268]	@ 0x10c
                LoRaMacCommandsAddCmd( MOTE_MAC_DUTY_CYCLE_ANS, macCmdPayload, 0 );
 800fe90:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800fe94:	2200      	movs	r2, #0
 800fe96:	4619      	mov	r1, r3
 800fe98:	2004      	movs	r0, #4
 800fe9a:	f003 fab9 	bl	8013410 <LoRaMacCommandsAddCmd>
                break;
 800fe9e:	e371      	b.n	8010584 <ProcessMacCommands+0x9a8>
            }
            case SRV_MAC_RX_PARAM_SETUP_REQ:
            {
                RxParamSetupReqParams_t rxParamSetupReq;
                status = 0x07;
 800fea0:	2307      	movs	r3, #7
 800fea2:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b

                rxParamSetupReq.DrOffset = ( payload[macIndex] >> 4 ) & 0x07;
 800fea6:	78fb      	ldrb	r3, [r7, #3]
 800fea8:	687a      	ldr	r2, [r7, #4]
 800feaa:	4413      	add	r3, r2
 800feac:	781b      	ldrb	r3, [r3, #0]
 800feae:	091b      	lsrs	r3, r3, #4
 800feb0:	b2db      	uxtb	r3, r3
 800feb2:	b25b      	sxtb	r3, r3
 800feb4:	f003 0307 	and.w	r3, r3, #7
 800feb8:	b25b      	sxtb	r3, r3
 800feba:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
                rxParamSetupReq.Datarate = payload[macIndex] & 0x0F;
 800febe:	78fb      	ldrb	r3, [r7, #3]
 800fec0:	687a      	ldr	r2, [r7, #4]
 800fec2:	4413      	add	r3, r2
 800fec4:	781b      	ldrb	r3, [r3, #0]
 800fec6:	b25b      	sxtb	r3, r3
 800fec8:	f003 030f 	and.w	r3, r3, #15
 800fecc:	b25b      	sxtb	r3, r3
 800fece:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
                macIndex++;
 800fed2:	78fb      	ldrb	r3, [r7, #3]
 800fed4:	3301      	adds	r3, #1
 800fed6:	70fb      	strb	r3, [r7, #3]

                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
 800fed8:	78fb      	ldrb	r3, [r7, #3]
 800feda:	1c5a      	adds	r2, r3, #1
 800fedc:	70fa      	strb	r2, [r7, #3]
 800fede:	461a      	mov	r2, r3
 800fee0:	687b      	ldr	r3, [r7, #4]
 800fee2:	4413      	add	r3, r2
 800fee4:	781b      	ldrb	r3, [r3, #0]
 800fee6:	653b      	str	r3, [r7, #80]	@ 0x50
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800fee8:	78fb      	ldrb	r3, [r7, #3]
 800feea:	1c5a      	adds	r2, r3, #1
 800feec:	70fa      	strb	r2, [r7, #3]
 800feee:	461a      	mov	r2, r3
 800fef0:	687b      	ldr	r3, [r7, #4]
 800fef2:	4413      	add	r3, r2
 800fef4:	781b      	ldrb	r3, [r3, #0]
 800fef6:	021a      	lsls	r2, r3, #8
 800fef8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800fefa:	4313      	orrs	r3, r2
 800fefc:	653b      	str	r3, [r7, #80]	@ 0x50
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800fefe:	78fb      	ldrb	r3, [r7, #3]
 800ff00:	1c5a      	adds	r2, r3, #1
 800ff02:	70fa      	strb	r2, [r7, #3]
 800ff04:	461a      	mov	r2, r3
 800ff06:	687b      	ldr	r3, [r7, #4]
 800ff08:	4413      	add	r3, r2
 800ff0a:	781b      	ldrb	r3, [r3, #0]
 800ff0c:	041a      	lsls	r2, r3, #16
 800ff0e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ff10:	4313      	orrs	r3, r2
 800ff12:	653b      	str	r3, [r7, #80]	@ 0x50
                rxParamSetupReq.Frequency *= 100;
 800ff14:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ff16:	2264      	movs	r2, #100	@ 0x64
 800ff18:	fb02 f303 	mul.w	r3, r2, r3
 800ff1c:	653b      	str	r3, [r7, #80]	@ 0x50

                // Perform request on region
                status = RegionRxParamSetupReq( Nvm.MacGroup2.Region, &rxParamSetupReq );
 800ff1e:	4b1c      	ldr	r3, [pc, #112]	@ (800ff90 <ProcessMacCommands+0x3b4>)
 800ff20:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800ff24:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 800ff28:	4611      	mov	r1, r2
 800ff2a:	4618      	mov	r0, r3
 800ff2c:	f005 f8bd 	bl	80150aa <RegionRxParamSetupReq>
 800ff30:	4603      	mov	r3, r0
 800ff32:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b

                if( ( status & 0x07 ) == 0x07 )
 800ff36:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 800ff3a:	f003 0307 	and.w	r3, r3, #7
 800ff3e:	2b07      	cmp	r3, #7
 800ff40:	d117      	bne.n	800ff72 <ProcessMacCommands+0x396>
                {
                    Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = rxParamSetupReq.Datarate;
 800ff42:	f997 304c 	ldrsb.w	r3, [r7, #76]	@ 0x4c
 800ff46:	b2da      	uxtb	r2, r3
 800ff48:	4b11      	ldr	r3, [pc, #68]	@ (800ff90 <ProcessMacCommands+0x3b4>)
 800ff4a:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
                    Nvm.MacGroup2.MacParams.RxCChannel.Datarate = rxParamSetupReq.Datarate;
 800ff4e:	f997 304c 	ldrsb.w	r3, [r7, #76]	@ 0x4c
 800ff52:	b2da      	uxtb	r2, r3
 800ff54:	4b0e      	ldr	r3, [pc, #56]	@ (800ff90 <ProcessMacCommands+0x3b4>)
 800ff56:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
                    Nvm.MacGroup2.MacParams.Rx2Channel.Frequency = rxParamSetupReq.Frequency;
 800ff5a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ff5c:	4a0c      	ldr	r2, [pc, #48]	@ (800ff90 <ProcessMacCommands+0x3b4>)
 800ff5e:	6653      	str	r3, [r2, #100]	@ 0x64
                    Nvm.MacGroup2.MacParams.RxCChannel.Frequency = rxParamSetupReq.Frequency;
 800ff60:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ff62:	4a0b      	ldr	r2, [pc, #44]	@ (800ff90 <ProcessMacCommands+0x3b4>)
 800ff64:	66d3      	str	r3, [r2, #108]	@ 0x6c
                    Nvm.MacGroup2.MacParams.Rx1DrOffset = rxParamSetupReq.DrOffset;
 800ff66:	f997 304d 	ldrsb.w	r3, [r7, #77]	@ 0x4d
 800ff6a:	b2da      	uxtb	r2, r3
 800ff6c:	4b08      	ldr	r3, [pc, #32]	@ (800ff90 <ProcessMacCommands+0x3b4>)
 800ff6e:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
                }
                macCmdPayload[0] = status;
 800ff72:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 800ff76:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_PARAM_SETUP_ANS, macCmdPayload, 1 );
 800ff7a:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800ff7e:	2201      	movs	r2, #1
 800ff80:	4619      	mov	r1, r3
 800ff82:	2005      	movs	r0, #5
 800ff84:	f003 fa44 	bl	8013410 <LoRaMacCommandsAddCmd>
                /*ST_WORKAROUND_BEGIN: remove unnecessary mlme operation to prevent uplinks burst */
                // Setup indication to inform the application
                /* SetMlmeScheduleUplinkIndication( ); */
                /*ST_WORKAROUND_END */
                break;
 800ff88:	e2fc      	b.n	8010584 <ProcessMacCommands+0x9a8>
 800ff8a:	bf00      	nop
 800ff8c:	200008d0 	.word	0x200008d0
 800ff90:	20000df0 	.word	0x20000df0
 800ff94:	cccccccd 	.word	0xcccccccd
            }
            case SRV_MAC_DEV_STATUS_REQ:
            {
                uint8_t batteryLevel = BAT_LEVEL_NO_MEASURE;
 800ff98:	23ff      	movs	r3, #255	@ 0xff
 800ff9a:	f887 3085 	strb.w	r3, [r7, #133]	@ 0x85
                if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->GetBatteryLevel != NULL ) )
 800ff9e:	4bb7      	ldr	r3, [pc, #732]	@ (801027c <ProcessMacCommands+0x6a0>)
 800ffa0:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800ffa4:	2b00      	cmp	r3, #0
 800ffa6:	d00d      	beq.n	800ffc4 <ProcessMacCommands+0x3e8>
 800ffa8:	4bb4      	ldr	r3, [pc, #720]	@ (801027c <ProcessMacCommands+0x6a0>)
 800ffaa:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800ffae:	681b      	ldr	r3, [r3, #0]
 800ffb0:	2b00      	cmp	r3, #0
 800ffb2:	d007      	beq.n	800ffc4 <ProcessMacCommands+0x3e8>
                {
                    batteryLevel = MacCtx.MacCallbacks->GetBatteryLevel( );
 800ffb4:	4bb1      	ldr	r3, [pc, #708]	@ (801027c <ProcessMacCommands+0x6a0>)
 800ffb6:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800ffba:	681b      	ldr	r3, [r3, #0]
 800ffbc:	4798      	blx	r3
 800ffbe:	4603      	mov	r3, r0
 800ffc0:	f887 3085 	strb.w	r3, [r7, #133]	@ 0x85
                }
                macCmdPayload[0] = batteryLevel;
 800ffc4:	f897 3085 	ldrb.w	r3, [r7, #133]	@ 0x85
 800ffc8:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
                macCmdPayload[1] = ( uint8_t )( snr & 0x3F );
 800ffcc:	787b      	ldrb	r3, [r7, #1]
 800ffce:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ffd2:	b2db      	uxtb	r3, r3
 800ffd4:	f887 3069 	strb.w	r3, [r7, #105]	@ 0x69
                LoRaMacCommandsAddCmd( MOTE_MAC_DEV_STATUS_ANS, macCmdPayload, 2 );
 800ffd8:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800ffdc:	2202      	movs	r2, #2
 800ffde:	4619      	mov	r1, r3
 800ffe0:	2006      	movs	r0, #6
 800ffe2:	f003 fa15 	bl	8013410 <LoRaMacCommandsAddCmd>
                break;
 800ffe6:	e2cd      	b.n	8010584 <ProcessMacCommands+0x9a8>
            }
            case SRV_MAC_NEW_CHANNEL_REQ:
            {
                NewChannelReqParams_t newChannelReq;
                ChannelParams_t chParam;
                status = 0x03;
 800ffe8:	2303      	movs	r3, #3
 800ffea:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b

                newChannelReq.ChannelId = payload[macIndex++];
 800ffee:	78fb      	ldrb	r3, [r7, #3]
 800fff0:	1c5a      	adds	r2, r3, #1
 800fff2:	70fa      	strb	r2, [r7, #3]
 800fff4:	461a      	mov	r2, r3
 800fff6:	687b      	ldr	r3, [r7, #4]
 800fff8:	4413      	add	r3, r2
 800fffa:	781b      	ldrb	r3, [r3, #0]
 800fffc:	b25b      	sxtb	r3, r3
 800fffe:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
                newChannelReq.NewChannel = &chParam;
 8010002:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8010006:	647b      	str	r3, [r7, #68]	@ 0x44

                chParam.Frequency = ( uint32_t ) payload[macIndex++];
 8010008:	78fb      	ldrb	r3, [r7, #3]
 801000a:	1c5a      	adds	r2, r3, #1
 801000c:	70fa      	strb	r2, [r7, #3]
 801000e:	461a      	mov	r2, r3
 8010010:	687b      	ldr	r3, [r7, #4]
 8010012:	4413      	add	r3, r2
 8010014:	781b      	ldrb	r3, [r3, #0]
 8010016:	63bb      	str	r3, [r7, #56]	@ 0x38
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8010018:	78fb      	ldrb	r3, [r7, #3]
 801001a:	1c5a      	adds	r2, r3, #1
 801001c:	70fa      	strb	r2, [r7, #3]
 801001e:	461a      	mov	r2, r3
 8010020:	687b      	ldr	r3, [r7, #4]
 8010022:	4413      	add	r3, r2
 8010024:	781b      	ldrb	r3, [r3, #0]
 8010026:	021a      	lsls	r2, r3, #8
 8010028:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801002a:	4313      	orrs	r3, r2
 801002c:	63bb      	str	r3, [r7, #56]	@ 0x38
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 801002e:	78fb      	ldrb	r3, [r7, #3]
 8010030:	1c5a      	adds	r2, r3, #1
 8010032:	70fa      	strb	r2, [r7, #3]
 8010034:	461a      	mov	r2, r3
 8010036:	687b      	ldr	r3, [r7, #4]
 8010038:	4413      	add	r3, r2
 801003a:	781b      	ldrb	r3, [r3, #0]
 801003c:	041a      	lsls	r2, r3, #16
 801003e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010040:	4313      	orrs	r3, r2
 8010042:	63bb      	str	r3, [r7, #56]	@ 0x38
                chParam.Frequency *= 100;
 8010044:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010046:	2264      	movs	r2, #100	@ 0x64
 8010048:	fb02 f303 	mul.w	r3, r2, r3
 801004c:	63bb      	str	r3, [r7, #56]	@ 0x38
                chParam.Rx1Frequency = 0;
 801004e:	2300      	movs	r3, #0
 8010050:	63fb      	str	r3, [r7, #60]	@ 0x3c
                chParam.DrRange.Value = payload[macIndex++];
 8010052:	78fb      	ldrb	r3, [r7, #3]
 8010054:	1c5a      	adds	r2, r3, #1
 8010056:	70fa      	strb	r2, [r7, #3]
 8010058:	461a      	mov	r2, r3
 801005a:	687b      	ldr	r3, [r7, #4]
 801005c:	4413      	add	r3, r2
 801005e:	781b      	ldrb	r3, [r3, #0]
 8010060:	b25b      	sxtb	r3, r3
 8010062:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40

                status = ( uint8_t )RegionNewChannelReq( Nvm.MacGroup2.Region, &newChannelReq );
 8010066:	4b86      	ldr	r3, [pc, #536]	@ (8010280 <ProcessMacCommands+0x6a4>)
 8010068:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 801006c:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 8010070:	4611      	mov	r1, r2
 8010072:	4618      	mov	r0, r3
 8010074:	f005 f82c 	bl	80150d0 <RegionNewChannelReq>
 8010078:	4603      	mov	r3, r0
 801007a:	b2db      	uxtb	r3, r3
 801007c:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b

                if( ( int8_t )status >= 0 )
 8010080:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8010084:	b25b      	sxtb	r3, r3
 8010086:	2b00      	cmp	r3, #0
 8010088:	f2c0 8273 	blt.w	8010572 <ProcessMacCommands+0x996>
                {
                    macCmdPayload[0] = status;
 801008c:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8010090:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
                    LoRaMacCommandsAddCmd( MOTE_MAC_NEW_CHANNEL_ANS, macCmdPayload, 1 );
 8010094:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8010098:	2201      	movs	r2, #1
 801009a:	4619      	mov	r1, r3
 801009c:	2007      	movs	r0, #7
 801009e:	f003 f9b7 	bl	8013410 <LoRaMacCommandsAddCmd>
                }
                break;
 80100a2:	e266      	b.n	8010572 <ProcessMacCommands+0x996>
            }
            case SRV_MAC_RX_TIMING_SETUP_REQ:
            {
                uint8_t delay = payload[macIndex++] & 0x0F;
 80100a4:	78fb      	ldrb	r3, [r7, #3]
 80100a6:	1c5a      	adds	r2, r3, #1
 80100a8:	70fa      	strb	r2, [r7, #3]
 80100aa:	461a      	mov	r2, r3
 80100ac:	687b      	ldr	r3, [r7, #4]
 80100ae:	4413      	add	r3, r2
 80100b0:	781b      	ldrb	r3, [r3, #0]
 80100b2:	f003 030f 	and.w	r3, r3, #15
 80100b6:	f887 3084 	strb.w	r3, [r7, #132]	@ 0x84

                if( delay == 0 )
 80100ba:	f897 3084 	ldrb.w	r3, [r7, #132]	@ 0x84
 80100be:	2b00      	cmp	r3, #0
 80100c0:	d104      	bne.n	80100cc <ProcessMacCommands+0x4f0>
                {
                    delay++;
 80100c2:	f897 3084 	ldrb.w	r3, [r7, #132]	@ 0x84
 80100c6:	3301      	adds	r3, #1
 80100c8:	f887 3084 	strb.w	r3, [r7, #132]	@ 0x84
                }
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = delay * 1000;
 80100cc:	f897 3084 	ldrb.w	r3, [r7, #132]	@ 0x84
 80100d0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80100d4:	fb02 f303 	mul.w	r3, r2, r3
 80100d8:	461a      	mov	r2, r3
 80100da:	4b69      	ldr	r3, [pc, #420]	@ (8010280 <ProcessMacCommands+0x6a4>)
 80100dc:	651a      	str	r2, [r3, #80]	@ 0x50
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 80100de:	4b68      	ldr	r3, [pc, #416]	@ (8010280 <ProcessMacCommands+0x6a4>)
 80100e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80100e2:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 80100e6:	4a66      	ldr	r2, [pc, #408]	@ (8010280 <ProcessMacCommands+0x6a4>)
 80100e8:	6553      	str	r3, [r2, #84]	@ 0x54
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_TIMING_SETUP_ANS, macCmdPayload, 0 );
 80100ea:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 80100ee:	2200      	movs	r2, #0
 80100f0:	4619      	mov	r1, r3
 80100f2:	2008      	movs	r0, #8
 80100f4:	f003 f98c 	bl	8013410 <LoRaMacCommandsAddCmd>
                /*ST_WORKAROUND_BEGIN: remove unnecessary mlme operation to prevent uplinks burst */
                // Setup indication to inform the application
                /* SetMlmeScheduleUplinkIndication( ); */
                /*ST_WORKAROUND_END */
                break;
 80100f8:	e244      	b.n	8010584 <ProcessMacCommands+0x9a8>
            case SRV_MAC_TX_PARAM_SETUP_REQ:
            {
                TxParamSetupReqParams_t txParamSetupReq;
                GetPhyParams_t getPhy;
                PhyParam_t phyParam;
                uint8_t eirpDwellTime = payload[macIndex++];
 80100fa:	78fb      	ldrb	r3, [r7, #3]
 80100fc:	1c5a      	adds	r2, r3, #1
 80100fe:	70fa      	strb	r2, [r7, #3]
 8010100:	461a      	mov	r2, r3
 8010102:	687b      	ldr	r3, [r7, #4]
 8010104:	4413      	add	r3, r2
 8010106:	781b      	ldrb	r3, [r3, #0]
 8010108:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76

                txParamSetupReq.UplinkDwellTime = 0;
 801010c:	2300      	movs	r3, #0
 801010e:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
                txParamSetupReq.DownlinkDwellTime = 0;
 8010112:	2300      	movs	r3, #0
 8010114:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35

                if( ( eirpDwellTime & 0x20 ) == 0x20 )
 8010118:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 801011c:	f003 0320 	and.w	r3, r3, #32
 8010120:	2b00      	cmp	r3, #0
 8010122:	d002      	beq.n	801012a <ProcessMacCommands+0x54e>
                {
                    txParamSetupReq.DownlinkDwellTime = 1;
 8010124:	2301      	movs	r3, #1
 8010126:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
                }
                if( ( eirpDwellTime & 0x10 ) == 0x10 )
 801012a:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 801012e:	f003 0310 	and.w	r3, r3, #16
 8010132:	2b00      	cmp	r3, #0
 8010134:	d002      	beq.n	801013c <ProcessMacCommands+0x560>
                {
                    txParamSetupReq.UplinkDwellTime = 1;
 8010136:	2301      	movs	r3, #1
 8010138:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
                }
                txParamSetupReq.MaxEirp = eirpDwellTime & 0x0F;
 801013c:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 8010140:	f003 030f 	and.w	r3, r3, #15
 8010144:	b2db      	uxtb	r3, r3
 8010146:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

                // Check the status for correctness
                if( RegionTxParamSetupReq( Nvm.MacGroup2.Region, &txParamSetupReq ) != -1 )
 801014a:	4b4d      	ldr	r3, [pc, #308]	@ (8010280 <ProcessMacCommands+0x6a4>)
 801014c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8010150:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 8010154:	4611      	mov	r1, r2
 8010156:	4618      	mov	r0, r3
 8010158:	f004 ffcd 	bl	80150f6 <RegionTxParamSetupReq>
 801015c:	4603      	mov	r3, r0
 801015e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010162:	f000 8208 	beq.w	8010576 <ProcessMacCommands+0x99a>
                {
                    // Accept command
                    Nvm.MacGroup2.MacParams.UplinkDwellTime = txParamSetupReq.UplinkDwellTime;
 8010166:	f897 2034 	ldrb.w	r2, [r7, #52]	@ 0x34
 801016a:	4b45      	ldr	r3, [pc, #276]	@ (8010280 <ProcessMacCommands+0x6a4>)
 801016c:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
                    Nvm.MacGroup2.MacParams.DownlinkDwellTime = txParamSetupReq.DownlinkDwellTime;
 8010170:	f897 2035 	ldrb.w	r2, [r7, #53]	@ 0x35
 8010174:	4b42      	ldr	r3, [pc, #264]	@ (8010280 <ProcessMacCommands+0x6a4>)
 8010176:	f883 2075 	strb.w	r2, [r3, #117]	@ 0x75
                    Nvm.MacGroup2.MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
 801017a:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 801017e:	461a      	mov	r2, r3
 8010180:	4b40      	ldr	r3, [pc, #256]	@ (8010284 <ProcessMacCommands+0x6a8>)
 8010182:	5c9b      	ldrb	r3, [r3, r2]
 8010184:	4618      	mov	r0, r3
 8010186:	f7f0 fd9d 	bl	8000cc4 <__aeabi_ui2f>
 801018a:	4603      	mov	r3, r0
 801018c:	4a3c      	ldr	r2, [pc, #240]	@ (8010280 <ProcessMacCommands+0x6a4>)
 801018e:	6793      	str	r3, [r2, #120]	@ 0x78
                    // Update the datarate in case of the new configuration limits it
                    getPhy.Attribute = PHY_MIN_TX_DR;
 8010190:	2302      	movs	r3, #2
 8010192:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
                    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8010196:	4b3a      	ldr	r3, [pc, #232]	@ (8010280 <ProcessMacCommands+0x6a4>)
 8010198:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 801019c:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
                    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80101a0:	4b37      	ldr	r3, [pc, #220]	@ (8010280 <ProcessMacCommands+0x6a4>)
 80101a2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80101a6:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 80101aa:	4611      	mov	r1, r2
 80101ac:	4618      	mov	r0, r3
 80101ae:	f004 fea5 	bl	8014efc <RegionGetPhyParam>
 80101b2:	4603      	mov	r3, r0
 80101b4:	62bb      	str	r3, [r7, #40]	@ 0x28
                    Nvm.MacGroup1.ChannelsDatarate = MAX( Nvm.MacGroup1.ChannelsDatarate, ( int8_t )phyParam.Value );
 80101b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80101b8:	b25a      	sxtb	r2, r3
 80101ba:	4b31      	ldr	r3, [pc, #196]	@ (8010280 <ProcessMacCommands+0x6a4>)
 80101bc:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 80101c0:	4293      	cmp	r3, r2
 80101c2:	bfb8      	it	lt
 80101c4:	4613      	movlt	r3, r2
 80101c6:	b25a      	sxtb	r2, r3
 80101c8:	4b2d      	ldr	r3, [pc, #180]	@ (8010280 <ProcessMacCommands+0x6a4>)
 80101ca:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

                    // Add command response
                    LoRaMacCommandsAddCmd( MOTE_MAC_TX_PARAM_SETUP_ANS, macCmdPayload, 0 );
 80101ce:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 80101d2:	2200      	movs	r2, #0
 80101d4:	4619      	mov	r1, r3
 80101d6:	2009      	movs	r0, #9
 80101d8:	f003 f91a 	bl	8013410 <LoRaMacCommandsAddCmd>
                }
                break;
 80101dc:	e1cb      	b.n	8010576 <ProcessMacCommands+0x99a>
            }
            case SRV_MAC_DL_CHANNEL_REQ:
            {
                DlChannelReqParams_t dlChannelReq;
                status = 0x03;
 80101de:	2303      	movs	r3, #3
 80101e0:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b

                dlChannelReq.ChannelId = payload[macIndex++];
 80101e4:	78fb      	ldrb	r3, [r7, #3]
 80101e6:	1c5a      	adds	r2, r3, #1
 80101e8:	70fa      	strb	r2, [r7, #3]
 80101ea:	461a      	mov	r2, r3
 80101ec:	687b      	ldr	r3, [r7, #4]
 80101ee:	4413      	add	r3, r2
 80101f0:	781b      	ldrb	r3, [r3, #0]
 80101f2:	f887 3020 	strb.w	r3, [r7, #32]
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
 80101f6:	78fb      	ldrb	r3, [r7, #3]
 80101f8:	1c5a      	adds	r2, r3, #1
 80101fa:	70fa      	strb	r2, [r7, #3]
 80101fc:	461a      	mov	r2, r3
 80101fe:	687b      	ldr	r3, [r7, #4]
 8010200:	4413      	add	r3, r2
 8010202:	781b      	ldrb	r3, [r3, #0]
 8010204:	627b      	str	r3, [r7, #36]	@ 0x24
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8010206:	78fb      	ldrb	r3, [r7, #3]
 8010208:	1c5a      	adds	r2, r3, #1
 801020a:	70fa      	strb	r2, [r7, #3]
 801020c:	461a      	mov	r2, r3
 801020e:	687b      	ldr	r3, [r7, #4]
 8010210:	4413      	add	r3, r2
 8010212:	781b      	ldrb	r3, [r3, #0]
 8010214:	021a      	lsls	r2, r3, #8
 8010216:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010218:	4313      	orrs	r3, r2
 801021a:	627b      	str	r3, [r7, #36]	@ 0x24
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 801021c:	78fb      	ldrb	r3, [r7, #3]
 801021e:	1c5a      	adds	r2, r3, #1
 8010220:	70fa      	strb	r2, [r7, #3]
 8010222:	461a      	mov	r2, r3
 8010224:	687b      	ldr	r3, [r7, #4]
 8010226:	4413      	add	r3, r2
 8010228:	781b      	ldrb	r3, [r3, #0]
 801022a:	041a      	lsls	r2, r3, #16
 801022c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801022e:	4313      	orrs	r3, r2
 8010230:	627b      	str	r3, [r7, #36]	@ 0x24
                dlChannelReq.Rx1Frequency *= 100;
 8010232:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010234:	2264      	movs	r2, #100	@ 0x64
 8010236:	fb02 f303 	mul.w	r3, r2, r3
 801023a:	627b      	str	r3, [r7, #36]	@ 0x24

                status = ( uint8_t )RegionDlChannelReq( Nvm.MacGroup2.Region, &dlChannelReq );
 801023c:	4b10      	ldr	r3, [pc, #64]	@ (8010280 <ProcessMacCommands+0x6a4>)
 801023e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8010242:	f107 0220 	add.w	r2, r7, #32
 8010246:	4611      	mov	r1, r2
 8010248:	4618      	mov	r0, r3
 801024a:	f004 ff67 	bl	801511c <RegionDlChannelReq>
 801024e:	4603      	mov	r3, r0
 8010250:	b2db      	uxtb	r3, r3
 8010252:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b

                if( ( int8_t )status >= 0 )
 8010256:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 801025a:	b25b      	sxtb	r3, r3
 801025c:	2b00      	cmp	r3, #0
 801025e:	f2c0 818c 	blt.w	801057a <ProcessMacCommands+0x99e>
                {
                    macCmdPayload[0] = status;
 8010262:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8010266:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
                    LoRaMacCommandsAddCmd( MOTE_MAC_DL_CHANNEL_ANS, macCmdPayload, 1 );
 801026a:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 801026e:	2201      	movs	r2, #1
 8010270:	4619      	mov	r1, r3
 8010272:	200a      	movs	r0, #10
 8010274:	f003 f8cc 	bl	8013410 <LoRaMacCommandsAddCmd>
                    /*ST_WORKAROUND_BEGIN: remove unnecessary mlme operation to prevent uplinks burst */
                    // Setup indication to inform the application
                    /* SetMlmeScheduleUplinkIndication( ); */
                    /*ST_WORKAROUND_END */
                }
                break;
 8010278:	e17f      	b.n	801057a <ProcessMacCommands+0x99e>
 801027a:	bf00      	nop
 801027c:	200008d0 	.word	0x200008d0
 8010280:	20000df0 	.word	0x20000df0
 8010284:	0801f7a4 	.word	0x0801f7a4
            }
            case SRV_MAC_DEVICE_TIME_ANS:
            {
                // The mote time can be updated only when the time is received in classA
                // receive windows only.
                if( LoRaMacConfirmQueueIsCmdActive( MLME_DEVICE_TIME ) == true )
 8010288:	2009      	movs	r0, #9
 801028a:	f003 fbe9 	bl	8013a60 <LoRaMacConfirmQueueIsCmdActive>
 801028e:	4603      	mov	r3, r0
 8010290:	2b00      	cmp	r3, #0
 8010292:	f000 8084 	beq.w	801039e <ProcessMacCommands+0x7c2>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
 8010296:	2109      	movs	r1, #9
 8010298:	2000      	movs	r0, #0
 801029a:	f003 fb55 	bl	8013948 <LoRaMacConfirmQueueSetStatus>

                    SysTime_t gpsEpochTime = { 0 };
 801029e:	f107 0318 	add.w	r3, r7, #24
 80102a2:	2200      	movs	r2, #0
 80102a4:	601a      	str	r2, [r3, #0]
 80102a6:	605a      	str	r2, [r3, #4]
                    SysTime_t sysTime = { 0 };
 80102a8:	f107 0310 	add.w	r3, r7, #16
 80102ac:	2200      	movs	r2, #0
 80102ae:	601a      	str	r2, [r3, #0]
 80102b0:	605a      	str	r2, [r3, #4]
                    SysTime_t sysTimeCurrent = { 0 };
 80102b2:	f107 0308 	add.w	r3, r7, #8
 80102b6:	2200      	movs	r2, #0
 80102b8:	601a      	str	r2, [r3, #0]
 80102ba:	605a      	str	r2, [r3, #4]

                    gpsEpochTime.Seconds = ( uint32_t )payload[macIndex++];
 80102bc:	78fb      	ldrb	r3, [r7, #3]
 80102be:	1c5a      	adds	r2, r3, #1
 80102c0:	70fa      	strb	r2, [r7, #3]
 80102c2:	461a      	mov	r2, r3
 80102c4:	687b      	ldr	r3, [r7, #4]
 80102c6:	4413      	add	r3, r2
 80102c8:	781b      	ldrb	r3, [r3, #0]
 80102ca:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 8;
 80102cc:	78fb      	ldrb	r3, [r7, #3]
 80102ce:	1c5a      	adds	r2, r3, #1
 80102d0:	70fa      	strb	r2, [r7, #3]
 80102d2:	461a      	mov	r2, r3
 80102d4:	687b      	ldr	r3, [r7, #4]
 80102d6:	4413      	add	r3, r2
 80102d8:	781b      	ldrb	r3, [r3, #0]
 80102da:	021a      	lsls	r2, r3, #8
 80102dc:	69bb      	ldr	r3, [r7, #24]
 80102de:	4313      	orrs	r3, r2
 80102e0:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 80102e2:	78fb      	ldrb	r3, [r7, #3]
 80102e4:	1c5a      	adds	r2, r3, #1
 80102e6:	70fa      	strb	r2, [r7, #3]
 80102e8:	461a      	mov	r2, r3
 80102ea:	687b      	ldr	r3, [r7, #4]
 80102ec:	4413      	add	r3, r2
 80102ee:	781b      	ldrb	r3, [r3, #0]
 80102f0:	041a      	lsls	r2, r3, #16
 80102f2:	69bb      	ldr	r3, [r7, #24]
 80102f4:	4313      	orrs	r3, r2
 80102f6:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 80102f8:	78fb      	ldrb	r3, [r7, #3]
 80102fa:	1c5a      	adds	r2, r3, #1
 80102fc:	70fa      	strb	r2, [r7, #3]
 80102fe:	461a      	mov	r2, r3
 8010300:	687b      	ldr	r3, [r7, #4]
 8010302:	4413      	add	r3, r2
 8010304:	781b      	ldrb	r3, [r3, #0]
 8010306:	061a      	lsls	r2, r3, #24
 8010308:	69bb      	ldr	r3, [r7, #24]
 801030a:	4313      	orrs	r3, r2
 801030c:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.SubSeconds = payload[macIndex++];
 801030e:	78fb      	ldrb	r3, [r7, #3]
 8010310:	1c5a      	adds	r2, r3, #1
 8010312:	70fa      	strb	r2, [r7, #3]
 8010314:	461a      	mov	r2, r3
 8010316:	687b      	ldr	r3, [r7, #4]
 8010318:	4413      	add	r3, r2
 801031a:	781b      	ldrb	r3, [r3, #0]
 801031c:	b21b      	sxth	r3, r3
 801031e:	83bb      	strh	r3, [r7, #28]

                    // Convert the fractional second received in ms
                    // round( pow( 0.5, 8.0 ) * 1000 ) = 3.90625
                    gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 8010320:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8010324:	461a      	mov	r2, r3
 8010326:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 801032a:	fb02 f303 	mul.w	r3, r2, r3
 801032e:	121b      	asrs	r3, r3, #8
 8010330:	b21b      	sxth	r3, r3
 8010332:	83bb      	strh	r3, [r7, #28]

                    // Copy received GPS Epoch time into system time
                    sysTime = gpsEpochTime;
 8010334:	f107 0310 	add.w	r3, r7, #16
 8010338:	f107 0218 	add.w	r2, r7, #24
 801033c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010340:	e883 0003 	stmia.w	r3, {r0, r1}
                    // Add Unix to Gps epoch offset. The system time is based on Unix time.
                    sysTime.Seconds += UNIX_GPS_EPOCH_OFFSET;
 8010344:	693a      	ldr	r2, [r7, #16]
 8010346:	4b96      	ldr	r3, [pc, #600]	@ (80105a0 <ProcessMacCommands+0x9c4>)
 8010348:	4413      	add	r3, r2
 801034a:	613b      	str	r3, [r7, #16]

                    // Compensate time difference between Tx Done time and now
                    sysTimeCurrent = SysTimeGet( );
 801034c:	f107 0308 	add.w	r3, r7, #8
 8010350:	4618      	mov	r0, r3
 8010352:	f00a fc53 	bl	801abfc <SysTimeGet>
                    sysTime = SysTimeAdd( sysTimeCurrent, SysTimeSub( sysTime, MacCtx.LastTxSysTime ) );
 8010356:	f107 006c 	add.w	r0, r7, #108	@ 0x6c
 801035a:	4b92      	ldr	r3, [pc, #584]	@ (80105a4 <ProcessMacCommands+0x9c8>)
 801035c:	f8d3 233c 	ldr.w	r2, [r3, #828]	@ 0x33c
 8010360:	9200      	str	r2, [sp, #0]
 8010362:	f8d3 3338 	ldr.w	r3, [r3, #824]	@ 0x338
 8010366:	f107 0210 	add.w	r2, r7, #16
 801036a:	ca06      	ldmia	r2, {r1, r2}
 801036c:	f00a fbdf 	bl	801ab2e <SysTimeSub>
 8010370:	f107 0010 	add.w	r0, r7, #16
 8010374:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8010376:	9300      	str	r3, [sp, #0]
 8010378:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801037a:	f107 0208 	add.w	r2, r7, #8
 801037e:	ca06      	ldmia	r2, {r1, r2}
 8010380:	f00a fb9c 	bl	801aabc <SysTimeAdd>

                    // Apply the new system time.
                    SysTimeSet( sysTime );
 8010384:	f107 0310 	add.w	r3, r7, #16
 8010388:	e893 0003 	ldmia.w	r3, {r0, r1}
 801038c:	f00a fc08 	bl	801aba0 <SysTimeSet>
                    LoRaMacClassBDeviceTimeAns( );
 8010390:	f002 fee8 	bl	8013164 <LoRaMacClassBDeviceTimeAns>
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = true;
 8010394:	4b83      	ldr	r3, [pc, #524]	@ (80105a4 <ProcessMacCommands+0x9c8>)
 8010396:	2201      	movs	r2, #1
 8010398:	f883 243c 	strb.w	r2, [r3, #1084]	@ 0x43c
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
                    // In case of other receive windows the Device Time Answer is not received.
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
#endif /* LORAMAC_VERSION */
                }
                break;
 801039c:	e0f2      	b.n	8010584 <ProcessMacCommands+0x9a8>
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 801039e:	4b81      	ldr	r3, [pc, #516]	@ (80105a4 <ProcessMacCommands+0x9c8>)
 80103a0:	2200      	movs	r2, #0
 80103a2:	f883 243c 	strb.w	r2, [r3, #1084]	@ 0x43c
                break;
 80103a6:	e0ed      	b.n	8010584 <ProcessMacCommands+0x9a8>
            }
            case SRV_MAC_PING_SLOT_INFO_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_PING_SLOT_INFO ) == true )
 80103a8:	200c      	movs	r0, #12
 80103aa:	f003 fb59 	bl	8013a60 <LoRaMacConfirmQueueIsCmdActive>
 80103ae:	4603      	mov	r3, r0
 80103b0:	2b00      	cmp	r3, #0
 80103b2:	f000 80e4 	beq.w	801057e <ProcessMacCommands+0x9a2>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
 80103b6:	210c      	movs	r1, #12
 80103b8:	2000      	movs	r0, #0
 80103ba:	f003 fac5 	bl	8013948 <LoRaMacConfirmQueueSetStatus>
                    // According to the specification, it is not allowed to process this answer in
                    // a ping or multicast slot
                    if( ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_PING_SLOT ) && ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT ) )
 80103be:	4b79      	ldr	r3, [pc, #484]	@ (80105a4 <ProcessMacCommands+0x9c8>)
 80103c0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80103c4:	2b04      	cmp	r3, #4
 80103c6:	f000 80da 	beq.w	801057e <ProcessMacCommands+0x9a2>
 80103ca:	4b76      	ldr	r3, [pc, #472]	@ (80105a4 <ProcessMacCommands+0x9c8>)
 80103cc:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80103d0:	2b05      	cmp	r3, #5
 80103d2:	f000 80d4 	beq.w	801057e <ProcessMacCommands+0x9a2>
                    {
                        LoRaMacClassBPingSlotInfoAns( );
 80103d6:	f002 fea6 	bl	8013126 <LoRaMacClassBPingSlotInfoAns>
                    }
                }
                break;
 80103da:	e0d0      	b.n	801057e <ProcessMacCommands+0x9a2>
            }
            case SRV_MAC_PING_SLOT_CHANNEL_REQ:
            {
                uint8_t status = 0x03;
 80103dc:	2303      	movs	r3, #3
 80103de:	f887 307c 	strb.w	r3, [r7, #124]	@ 0x7c
                uint32_t frequency = 0;
 80103e2:	2300      	movs	r3, #0
 80103e4:	67bb      	str	r3, [r7, #120]	@ 0x78
                uint8_t datarate;

                frequency = ( uint32_t )payload[macIndex++];
 80103e6:	78fb      	ldrb	r3, [r7, #3]
 80103e8:	1c5a      	adds	r2, r3, #1
 80103ea:	70fa      	strb	r2, [r7, #3]
 80103ec:	461a      	mov	r2, r3
 80103ee:	687b      	ldr	r3, [r7, #4]
 80103f0:	4413      	add	r3, r2
 80103f2:	781b      	ldrb	r3, [r3, #0]
 80103f4:	67bb      	str	r3, [r7, #120]	@ 0x78
                frequency |= ( uint32_t )payload[macIndex++] << 8;
 80103f6:	78fb      	ldrb	r3, [r7, #3]
 80103f8:	1c5a      	adds	r2, r3, #1
 80103fa:	70fa      	strb	r2, [r7, #3]
 80103fc:	461a      	mov	r2, r3
 80103fe:	687b      	ldr	r3, [r7, #4]
 8010400:	4413      	add	r3, r2
 8010402:	781b      	ldrb	r3, [r3, #0]
 8010404:	021b      	lsls	r3, r3, #8
 8010406:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8010408:	4313      	orrs	r3, r2
 801040a:	67bb      	str	r3, [r7, #120]	@ 0x78
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 801040c:	78fb      	ldrb	r3, [r7, #3]
 801040e:	1c5a      	adds	r2, r3, #1
 8010410:	70fa      	strb	r2, [r7, #3]
 8010412:	461a      	mov	r2, r3
 8010414:	687b      	ldr	r3, [r7, #4]
 8010416:	4413      	add	r3, r2
 8010418:	781b      	ldrb	r3, [r3, #0]
 801041a:	041b      	lsls	r3, r3, #16
 801041c:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 801041e:	4313      	orrs	r3, r2
 8010420:	67bb      	str	r3, [r7, #120]	@ 0x78
                frequency *= 100;
 8010422:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8010424:	2264      	movs	r2, #100	@ 0x64
 8010426:	fb02 f303 	mul.w	r3, r2, r3
 801042a:	67bb      	str	r3, [r7, #120]	@ 0x78
                datarate = payload[macIndex++] & 0x0F;
 801042c:	78fb      	ldrb	r3, [r7, #3]
 801042e:	1c5a      	adds	r2, r3, #1
 8010430:	70fa      	strb	r2, [r7, #3]
 8010432:	461a      	mov	r2, r3
 8010434:	687b      	ldr	r3, [r7, #4]
 8010436:	4413      	add	r3, r2
 8010438:	781b      	ldrb	r3, [r3, #0]
 801043a:	f003 030f 	and.w	r3, r3, #15
 801043e:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77

                status = LoRaMacClassBPingSlotChannelReq( datarate, frequency );
 8010442:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8010446:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8010448:	4618      	mov	r0, r3
 801044a:	f002 fe72 	bl	8013132 <LoRaMacClassBPingSlotChannelReq>
 801044e:	4603      	mov	r3, r0
 8010450:	f887 307c 	strb.w	r3, [r7, #124]	@ 0x7c
                macCmdPayload[0] = status;
 8010454:	f897 307c 	ldrb.w	r3, [r7, #124]	@ 0x7c
 8010458:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_FREQ_ANS, macCmdPayload, 1 );
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_CHANNEL_ANS, macCmdPayload, 1 );
 801045c:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8010460:	2201      	movs	r2, #1
 8010462:	4619      	mov	r1, r3
 8010464:	2011      	movs	r0, #17
 8010466:	f002 ffd3 	bl	8013410 <LoRaMacCommandsAddCmd>
                /*ST_WORKAROUND_BEGIN: remove unnecessary mlme operation to prevent uplinks burst */
                // Setup indication to inform the application
                /* SetMlmeScheduleUplinkIndication( ); */
                /*ST_WORKAROUND_END */
#endif /* LORAMAC_VERSION */
                break;
 801046a:	e08b      	b.n	8010584 <ProcessMacCommands+0x9a8>
            }
            case SRV_MAC_BEACON_TIMING_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_TIMING ) == true )
 801046c:	200d      	movs	r0, #13
 801046e:	f003 faf7 	bl	8013a60 <LoRaMacConfirmQueueIsCmdActive>
 8010472:	4603      	mov	r3, r0
 8010474:	2b00      	cmp	r3, #0
 8010476:	f000 8084 	beq.w	8010582 <ProcessMacCommands+0x9a6>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_BEACON_TIMING );
 801047a:	210d      	movs	r1, #13
 801047c:	2000      	movs	r0, #0
 801047e:	f003 fa63 	bl	8013948 <LoRaMacConfirmQueueSetStatus>
                    uint16_t beaconTimingDelay = 0;
 8010482:	2300      	movs	r3, #0
 8010484:	f8a7 307e 	strh.w	r3, [r7, #126]	@ 0x7e
                    uint8_t beaconTimingChannel = 0;
 8010488:	2300      	movs	r3, #0
 801048a:	f887 307d 	strb.w	r3, [r7, #125]	@ 0x7d

                    beaconTimingDelay = ( uint16_t )payload[macIndex++];
 801048e:	78fb      	ldrb	r3, [r7, #3]
 8010490:	1c5a      	adds	r2, r3, #1
 8010492:	70fa      	strb	r2, [r7, #3]
 8010494:	461a      	mov	r2, r3
 8010496:	687b      	ldr	r3, [r7, #4]
 8010498:	4413      	add	r3, r2
 801049a:	781b      	ldrb	r3, [r3, #0]
 801049c:	f8a7 307e 	strh.w	r3, [r7, #126]	@ 0x7e
                    beaconTimingDelay |= ( uint16_t )payload[macIndex++] << 8;
 80104a0:	78fb      	ldrb	r3, [r7, #3]
 80104a2:	1c5a      	adds	r2, r3, #1
 80104a4:	70fa      	strb	r2, [r7, #3]
 80104a6:	461a      	mov	r2, r3
 80104a8:	687b      	ldr	r3, [r7, #4]
 80104aa:	4413      	add	r3, r2
 80104ac:	781b      	ldrb	r3, [r3, #0]
 80104ae:	021b      	lsls	r3, r3, #8
 80104b0:	b21a      	sxth	r2, r3
 80104b2:	f9b7 307e 	ldrsh.w	r3, [r7, #126]	@ 0x7e
 80104b6:	4313      	orrs	r3, r2
 80104b8:	b21b      	sxth	r3, r3
 80104ba:	f8a7 307e 	strh.w	r3, [r7, #126]	@ 0x7e
                    beaconTimingChannel = payload[macIndex++];
 80104be:	78fb      	ldrb	r3, [r7, #3]
 80104c0:	1c5a      	adds	r2, r3, #1
 80104c2:	70fa      	strb	r2, [r7, #3]
 80104c4:	461a      	mov	r2, r3
 80104c6:	687b      	ldr	r3, [r7, #4]
 80104c8:	4413      	add	r3, r2
 80104ca:	781b      	ldrb	r3, [r3, #0]
 80104cc:	f887 307d 	strb.w	r3, [r7, #125]	@ 0x7d

                    LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
 80104d0:	4b35      	ldr	r3, [pc, #212]	@ (80105a8 <ProcessMacCommands+0x9cc>)
 80104d2:	681a      	ldr	r2, [r3, #0]
 80104d4:	f897 107d 	ldrb.w	r1, [r7, #125]	@ 0x7d
 80104d8:	f8b7 307e 	ldrh.w	r3, [r7, #126]	@ 0x7e
 80104dc:	4618      	mov	r0, r3
 80104de:	f002 fe34 	bl	801314a <LoRaMacClassBBeaconTimingAns>
                }
                break;
 80104e2:	e04e      	b.n	8010582 <ProcessMacCommands+0x9a6>
            }
            case SRV_MAC_BEACON_FREQ_REQ:
                {
                    uint32_t frequency = 0;
 80104e4:	2300      	movs	r3, #0
 80104e6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80

                    frequency = ( uint32_t )payload[macIndex++];
 80104ea:	78fb      	ldrb	r3, [r7, #3]
 80104ec:	1c5a      	adds	r2, r3, #1
 80104ee:	70fa      	strb	r2, [r7, #3]
 80104f0:	461a      	mov	r2, r3
 80104f2:	687b      	ldr	r3, [r7, #4]
 80104f4:	4413      	add	r3, r2
 80104f6:	781b      	ldrb	r3, [r3, #0]
 80104f8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
                    frequency |= ( uint32_t )payload[macIndex++] << 8;
 80104fc:	78fb      	ldrb	r3, [r7, #3]
 80104fe:	1c5a      	adds	r2, r3, #1
 8010500:	70fa      	strb	r2, [r7, #3]
 8010502:	461a      	mov	r2, r3
 8010504:	687b      	ldr	r3, [r7, #4]
 8010506:	4413      	add	r3, r2
 8010508:	781b      	ldrb	r3, [r3, #0]
 801050a:	021b      	lsls	r3, r3, #8
 801050c:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8010510:	4313      	orrs	r3, r2
 8010512:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 8010516:	78fb      	ldrb	r3, [r7, #3]
 8010518:	1c5a      	adds	r2, r3, #1
 801051a:	70fa      	strb	r2, [r7, #3]
 801051c:	461a      	mov	r2, r3
 801051e:	687b      	ldr	r3, [r7, #4]
 8010520:	4413      	add	r3, r2
 8010522:	781b      	ldrb	r3, [r3, #0]
 8010524:	041b      	lsls	r3, r3, #16
 8010526:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 801052a:	4313      	orrs	r3, r2
 801052c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
                    frequency *= 100;
 8010530:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8010534:	2264      	movs	r2, #100	@ 0x64
 8010536:	fb02 f303 	mul.w	r3, r2, r3
 801053a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80

                    if( LoRaMacClassBBeaconFreqReq( frequency ) == true )
 801053e:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 8010542:	f002 fe15 	bl	8013170 <LoRaMacClassBBeaconFreqReq>
 8010546:	4603      	mov	r3, r0
 8010548:	2b00      	cmp	r3, #0
 801054a:	d003      	beq.n	8010554 <ProcessMacCommands+0x978>
                    {
                        macCmdPayload[0] = 1;
 801054c:	2301      	movs	r3, #1
 801054e:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
 8010552:	e002      	b.n	801055a <ProcessMacCommands+0x97e>
                    }
                    else
                    {
                        macCmdPayload[0] = 0;
 8010554:	2300      	movs	r3, #0
 8010556:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
                    }
                    LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_FREQ_ANS, macCmdPayload, 1 );
 801055a:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 801055e:	2201      	movs	r2, #1
 8010560:	4619      	mov	r1, r3
 8010562:	2013      	movs	r0, #19
 8010564:	f002 ff54 	bl	8013410 <LoRaMacCommandsAddCmd>
                }
                break;
 8010568:	e00c      	b.n	8010584 <ProcessMacCommands+0x9a8>
                break;
 801056a:	bf00      	nop
 801056c:	e00a      	b.n	8010584 <ProcessMacCommands+0x9a8>
                break;
 801056e:	bf00      	nop
 8010570:	e008      	b.n	8010584 <ProcessMacCommands+0x9a8>
                break;
 8010572:	bf00      	nop
 8010574:	e006      	b.n	8010584 <ProcessMacCommands+0x9a8>
                break;
 8010576:	bf00      	nop
 8010578:	e004      	b.n	8010584 <ProcessMacCommands+0x9a8>
                break;
 801057a:	bf00      	nop
 801057c:	e002      	b.n	8010584 <ProcessMacCommands+0x9a8>
                break;
 801057e:	bf00      	nop
 8010580:	e000      	b.n	8010584 <ProcessMacCommands+0x9a8>
                break;
 8010582:	bf00      	nop
    while( macIndex < commandsSize )
 8010584:	78fa      	ldrb	r2, [r7, #3]
 8010586:	78bb      	ldrb	r3, [r7, #2]
 8010588:	429a      	cmp	r2, r3
 801058a:	f4ff ab49 	bcc.w	800fc20 <ProcessMacCommands+0x44>
 801058e:	e004      	b.n	801059a <ProcessMacCommands+0x9be>
        return;
 8010590:	bf00      	nop
 8010592:	e002      	b.n	801059a <ProcessMacCommands+0x9be>
            return;
 8010594:	bf00      	nop
 8010596:	e000      	b.n	801059a <ProcessMacCommands+0x9be>
            default:
                // Unknown command. ABORT MAC commands processing
                return;
 8010598:	bf00      	nop
        }
    }
}
 801059a:	378c      	adds	r7, #140	@ 0x8c
 801059c:	46bd      	mov	sp, r7
 801059e:	bd90      	pop	{r4, r7, pc}
 80105a0:	12d53d80 	.word	0x12d53d80
 80105a4:	200008d0 	.word	0x200008d0
 80105a8:	20001980 	.word	0x20001980

080105ac <Send>:

/* ST_WORKAROUND: Update Send request with new input parameter to allow delayed tx */
static LoRaMacStatus_t Send( LoRaMacHeader_t* macHdr, uint8_t fPort, void* fBuffer, uint16_t fBufferSize, bool allowDelayedTx )
{
 80105ac:	b580      	push	{r7, lr}
 80105ae:	b08e      	sub	sp, #56	@ 0x38
 80105b0:	af02      	add	r7, sp, #8
 80105b2:	60f8      	str	r0, [r7, #12]
 80105b4:	607a      	str	r2, [r7, #4]
 80105b6:	461a      	mov	r2, r3
 80105b8:	460b      	mov	r3, r1
 80105ba:	72fb      	strb	r3, [r7, #11]
 80105bc:	4613      	mov	r3, r2
 80105be:	813b      	strh	r3, [r7, #8]
    LoRaMacFrameCtrl_t fCtrl;
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 80105c0:	2303      	movs	r3, #3
 80105c2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    int8_t datarate = Nvm.MacGroup1.ChannelsDatarate;
 80105c6:	4b66      	ldr	r3, [pc, #408]	@ (8010760 <Send+0x1b4>)
 80105c8:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 80105cc:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    int8_t txPower = Nvm.MacGroup1.ChannelsTxPower;
 80105d0:	4b63      	ldr	r3, [pc, #396]	@ (8010760 <Send+0x1b4>)
 80105d2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80105d6:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 80105da:	4b61      	ldr	r3, [pc, #388]	@ (8010760 <Send+0x1b4>)
 80105dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80105de:	62bb      	str	r3, [r7, #40]	@ 0x28
    CalcNextAdrParams_t adrNext;

    // Check if we are joined
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 80105e0:	4b5f      	ldr	r3, [pc, #380]	@ (8010760 <Send+0x1b4>)
 80105e2:	f893 311c 	ldrb.w	r3, [r3, #284]	@ 0x11c
 80105e6:	2b00      	cmp	r3, #0
 80105e8:	d101      	bne.n	80105ee <Send+0x42>
    {
        return LORAMAC_STATUS_NO_NETWORK_JOINED;
 80105ea:	2307      	movs	r3, #7
 80105ec:	e0b4      	b.n	8010758 <Send+0x1ac>
    }
    if( Nvm.MacGroup2.MaxDCycle == 0 )
 80105ee:	4b5c      	ldr	r3, [pc, #368]	@ (8010760 <Send+0x1b4>)
 80105f0:	f893 3107 	ldrb.w	r3, [r3, #263]	@ 0x107
 80105f4:	2b00      	cmp	r3, #0
 80105f6:	d102      	bne.n	80105fe <Send+0x52>
    {
        Nvm.MacGroup1.AggregatedTimeOff = 0;
 80105f8:	4b59      	ldr	r3, [pc, #356]	@ (8010760 <Send+0x1b4>)
 80105fa:	2200      	movs	r2, #0
 80105fc:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    fCtrl.Value = 0;
 80105fe:	2300      	movs	r3, #0
 8010600:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    fCtrl.Bits.FOptsLen      = 0;
 8010604:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8010608:	f36f 0303 	bfc	r3, #0, #4
 801060c:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    fCtrl.Bits.Adr           = Nvm.MacGroup2.AdrCtrlOn;
 8010610:	4b53      	ldr	r3, [pc, #332]	@ (8010760 <Send+0x1b4>)
 8010612:	f893 2106 	ldrb.w	r2, [r3, #262]	@ 0x106
 8010616:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 801061a:	f362 13c7 	bfi	r3, r2, #7, #1
 801061e:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c

    // Check class b
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8010622:	4b4f      	ldr	r3, [pc, #316]	@ (8010760 <Send+0x1b4>)
 8010624:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 8010628:	2b01      	cmp	r3, #1
 801062a:	d106      	bne.n	801063a <Send+0x8e>
    {
        fCtrl.Bits.FPending      = 1;
 801062c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8010630:	f043 0310 	orr.w	r3, r3, #16
 8010634:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
 8010638:	e005      	b.n	8010646 <Send+0x9a>
    }
    else
    {
        fCtrl.Bits.FPending      = 0;
 801063a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 801063e:	f36f 1304 	bfc	r3, #4, #1
 8010642:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    }

    // Check server ack
    if( Nvm.MacGroup1.SrvAckRequested == true )
 8010646:	4b46      	ldr	r3, [pc, #280]	@ (8010760 <Send+0x1b4>)
 8010648:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 801064c:	2b00      	cmp	r3, #0
 801064e:	d005      	beq.n	801065c <Send+0xb0>
    {
        fCtrl.Bits.Ack = 1;
 8010650:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8010654:	f043 0320 	orr.w	r3, r3, #32
 8010658:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    adrNext.Region = Nvm.MacGroup2.Region;

    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &Nvm.MacGroup1.ChannelsDatarate,
                                               &Nvm.MacGroup1.ChannelsTxPower, &adrAckCounter );
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    adrNext.UpdateChanMask = true;
 801065c:	2301      	movs	r3, #1
 801065e:	753b      	strb	r3, [r7, #20]
    adrNext.AdrEnabled = fCtrl.Bits.Adr;
 8010660:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8010664:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8010668:	b2db      	uxtb	r3, r3
 801066a:	2b00      	cmp	r3, #0
 801066c:	bf14      	ite	ne
 801066e:	2301      	movne	r3, #1
 8010670:	2300      	moveq	r3, #0
 8010672:	b2db      	uxtb	r3, r3
 8010674:	757b      	strb	r3, [r7, #21]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8010676:	4b3a      	ldr	r3, [pc, #232]	@ (8010760 <Send+0x1b4>)
 8010678:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801067a:	61bb      	str	r3, [r7, #24]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 801067c:	4b39      	ldr	r3, [pc, #228]	@ (8010764 <Send+0x1b8>)
 801067e:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	@ 0x400
 8010682:	83bb      	strh	r3, [r7, #28]
    adrNext.AdrAckDelay = MacCtx.AdrAckDelay;
 8010684:	4b37      	ldr	r3, [pc, #220]	@ (8010764 <Send+0x1b8>)
 8010686:	f8b3 3402 	ldrh.w	r3, [r3, #1026]	@ 0x402
 801068a:	83fb      	strh	r3, [r7, #30]
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 801068c:	4b34      	ldr	r3, [pc, #208]	@ (8010760 <Send+0x1b4>)
 801068e:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 8010692:	f887 3020 	strb.w	r3, [r7, #32]
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 8010696:	4b32      	ldr	r3, [pc, #200]	@ (8010760 <Send+0x1b4>)
 8010698:	f993 3038 	ldrsb.w	r3, [r3, #56]	@ 0x38
 801069c:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
    adrNext.NbTrans = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 80106a0:	4b2f      	ldr	r3, [pc, #188]	@ (8010760 <Send+0x1b4>)
 80106a2:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
 80106a6:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    adrNext.UplinkDwellTime =  Nvm.MacGroup2.MacParams.UplinkDwellTime;
 80106aa:	4b2d      	ldr	r3, [pc, #180]	@ (8010760 <Send+0x1b4>)
 80106ac:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 80106b0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    adrNext.Region = Nvm.MacGroup2.Region;
 80106b4:	4b2a      	ldr	r3, [pc, #168]	@ (8010760 <Send+0x1b4>)
 80106b6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80106ba:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24

    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &Nvm.MacGroup1.ChannelsDatarate,
 80106be:	f107 0014 	add.w	r0, r7, #20
 80106c2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80106c6:	9300      	str	r3, [sp, #0]
 80106c8:	4b27      	ldr	r3, [pc, #156]	@ (8010768 <Send+0x1bc>)
 80106ca:	4a28      	ldr	r2, [pc, #160]	@ (801076c <Send+0x1c0>)
 80106cc:	4928      	ldr	r1, [pc, #160]	@ (8010770 <Send+0x1c4>)
 80106ce:	f002 fbc9 	bl	8012e64 <LoRaMacAdrCalcNext>
 80106d2:	4603      	mov	r3, r0
 80106d4:	461a      	mov	r2, r3
 80106d6:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80106da:	f362 1386 	bfi	r3, r2, #6, #1
 80106de:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
                                               &Nvm.MacGroup1.ChannelsTxPower,
                                               &Nvm.MacGroup2.MacParams.ChannelsNbTrans, &adrAckCounter );
#endif /* LORAMAC_VERSION */

    // Prepare the frame
    status = PrepareFrame( macHdr, &fCtrl, fPort, fBuffer, fBufferSize );
 80106e2:	7afa      	ldrb	r2, [r7, #11]
 80106e4:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 80106e8:	893b      	ldrh	r3, [r7, #8]
 80106ea:	9300      	str	r3, [sp, #0]
 80106ec:	687b      	ldr	r3, [r7, #4]
 80106ee:	68f8      	ldr	r0, [r7, #12]
 80106f0:	f000 fc42 	bl	8010f78 <PrepareFrame>
 80106f4:	4603      	mov	r3, r0
 80106f6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    // Validate status
    if( ( status == LORAMAC_STATUS_OK ) || ( status == LORAMAC_STATUS_SKIPPED_APP_DATA ) )
 80106fa:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80106fe:	2b00      	cmp	r3, #0
 8010700:	d003      	beq.n	801070a <Send+0x15e>
 8010702:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8010706:	2b0a      	cmp	r3, #10
 8010708:	d107      	bne.n	801071a <Send+0x16e>
    {
        // Schedule frame, do not allow delayed transmissions
        status = ScheduleTx( allowDelayedTx ); /* ST_WORKAROUND: Update Send request with new input parameter to allow delayed tx */
 801070a:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 801070e:	4618      	mov	r0, r3
 8010710:	f000 f96e 	bl	80109f0 <ScheduleTx>
 8010714:	4603      	mov	r3, r0
 8010716:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

    // Post processing
    if( status != LORAMAC_STATUS_OK )
 801071a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801071e:	2b00      	cmp	r3, #0
 8010720:	d00a      	beq.n	8010738 <Send+0x18c>
    {
        // Bad case - restore
        // Store local variables
        Nvm.MacGroup1.ChannelsDatarate = datarate;
 8010722:	4a0f      	ldr	r2, [pc, #60]	@ (8010760 <Send+0x1b4>)
 8010724:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8010728:	f882 3039 	strb.w	r3, [r2, #57]	@ 0x39
        Nvm.MacGroup1.ChannelsTxPower = txPower;
 801072c:	4a0c      	ldr	r2, [pc, #48]	@ (8010760 <Send+0x1b4>)
 801072e:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8010732:	f882 3038 	strb.w	r3, [r2, #56]	@ 0x38
 8010736:	e00d      	b.n	8010754 <Send+0x1a8>
    }
    else
    {
        // Good case
        Nvm.MacGroup1.SrvAckRequested = false;
 8010738:	4b09      	ldr	r3, [pc, #36]	@ (8010760 <Send+0x1b4>)
 801073a:	2200      	movs	r2, #0
 801073c:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
        Nvm.MacGroup1.AdrAckCounter = adrAckCounter;
 8010740:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010742:	4a07      	ldr	r2, [pc, #28]	@ (8010760 <Send+0x1b4>)
 8010744:	6293      	str	r3, [r2, #40]	@ 0x28
        // Remove all none sticky MAC commands
        if( LoRaMacCommandsRemoveNoneStickyCmds( ) != LORAMAC_COMMANDS_SUCCESS )
 8010746:	f002 fedb 	bl	8013500 <LoRaMacCommandsRemoveNoneStickyCmds>
 801074a:	4603      	mov	r3, r0
 801074c:	2b00      	cmp	r3, #0
 801074e:	d001      	beq.n	8010754 <Send+0x1a8>
        {
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8010750:	2313      	movs	r3, #19
 8010752:	e001      	b.n	8010758 <Send+0x1ac>
        }
    }
    return status;
 8010754:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8010758:	4618      	mov	r0, r3
 801075a:	3730      	adds	r7, #48	@ 0x30
 801075c:	46bd      	mov	sp, r7
 801075e:	bd80      	pop	{r7, pc}
 8010760:	20000df0 	.word	0x20000df0
 8010764:	200008d0 	.word	0x200008d0
 8010768:	20000e50 	.word	0x20000e50
 801076c:	20000e28 	.word	0x20000e28
 8010770:	20000e29 	.word	0x20000e29

08010774 <SendReJoinReq>:

static LoRaMacStatus_t SendReJoinReq( JoinReqIdentifier_t joinReqType )
{
 8010774:	b580      	push	{r7, lr}
 8010776:	b084      	sub	sp, #16
 8010778:	af00      	add	r7, sp, #0
 801077a:	4603      	mov	r3, r0
 801077c:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 801077e:	2300      	movs	r3, #0
 8010780:	73bb      	strb	r3, [r7, #14]
    LoRaMacHeader_t macHdr;
    macHdr.Value = 0;
 8010782:	2300      	movs	r3, #0
 8010784:	733b      	strb	r3, [r7, #12]
    bool allowDelayedTx = true;
 8010786:	2301      	movs	r3, #1
 8010788:	73fb      	strb	r3, [r7, #15]

    // Setup join/rejoin message
    switch( joinReqType )
 801078a:	79fb      	ldrb	r3, [r7, #7]
 801078c:	2bff      	cmp	r3, #255	@ 0xff
 801078e:	d129      	bne.n	80107e4 <SendReJoinReq+0x70>
    {
        case JOIN_REQ:
        {
            SwitchClass( CLASS_A );
 8010790:	2000      	movs	r0, #0
 8010792:	f7ff f901 	bl	800f998 <SwitchClass>

            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_JOIN_REQUEST;
 8010796:	4b1a      	ldr	r3, [pc, #104]	@ (8010800 <SendReJoinReq+0x8c>)
 8010798:	2200      	movs	r2, #0
 801079a:	f883 2104 	strb.w	r2, [r3, #260]	@ 0x104
            MacCtx.TxMsg.Message.JoinReq.Buffer = MacCtx.PktBuffer;
 801079e:	4b18      	ldr	r3, [pc, #96]	@ (8010800 <SendReJoinReq+0x8c>)
 80107a0:	4a18      	ldr	r2, [pc, #96]	@ (8010804 <SendReJoinReq+0x90>)
 80107a2:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
            MacCtx.TxMsg.Message.JoinReq.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 80107a6:	4b16      	ldr	r3, [pc, #88]	@ (8010800 <SendReJoinReq+0x8c>)
 80107a8:	22ff      	movs	r2, #255	@ 0xff
 80107aa:	f883 210c 	strb.w	r2, [r3, #268]	@ 0x10c

            macHdr.Bits.MType = FRAME_TYPE_JOIN_REQ;
 80107ae:	7b3b      	ldrb	r3, [r7, #12]
 80107b0:	f36f 1347 	bfc	r3, #5, #3
 80107b4:	733b      	strb	r3, [r7, #12]
            MacCtx.TxMsg.Message.JoinReq.MHDR.Value = macHdr.Value;
 80107b6:	7b3a      	ldrb	r2, [r7, #12]
 80107b8:	4b11      	ldr	r3, [pc, #68]	@ (8010800 <SendReJoinReq+0x8c>)
 80107ba:	f883 210d 	strb.w	r2, [r3, #269]	@ 0x10d

            memcpy1( MacCtx.TxMsg.Message.JoinReq.JoinEUI, SecureElementGetJoinEui( ), LORAMAC_JOIN_EUI_FIELD_SIZE );
 80107be:	f7fc f869 	bl	800c894 <SecureElementGetJoinEui>
 80107c2:	4603      	mov	r3, r0
 80107c4:	2208      	movs	r2, #8
 80107c6:	4619      	mov	r1, r3
 80107c8:	480f      	ldr	r0, [pc, #60]	@ (8010808 <SendReJoinReq+0x94>)
 80107ca:	f006 fe38 	bl	801743e <memcpy1>
            memcpy1( MacCtx.TxMsg.Message.JoinReq.DevEUI, SecureElementGetDevEui( ), LORAMAC_DEV_EUI_FIELD_SIZE );
 80107ce:	f7fc f83f 	bl	800c850 <SecureElementGetDevEui>
 80107d2:	4603      	mov	r3, r0
 80107d4:	2208      	movs	r2, #8
 80107d6:	4619      	mov	r1, r3
 80107d8:	480c      	ldr	r0, [pc, #48]	@ (801080c <SendReJoinReq+0x98>)
 80107da:	f006 fe30 	bl	801743e <memcpy1>

            allowDelayedTx = false;
 80107de:	2300      	movs	r3, #0
 80107e0:	73fb      	strb	r3, [r7, #15]

            break;
 80107e2:	e002      	b.n	80107ea <SendReJoinReq+0x76>
        }
        default:
            status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 80107e4:	2302      	movs	r3, #2
 80107e6:	73bb      	strb	r3, [r7, #14]
            break;
 80107e8:	bf00      	nop
    }

    // Schedule frame
    status = ScheduleTx( allowDelayedTx );
 80107ea:	7bfb      	ldrb	r3, [r7, #15]
 80107ec:	4618      	mov	r0, r3
 80107ee:	f000 f8ff 	bl	80109f0 <ScheduleTx>
 80107f2:	4603      	mov	r3, r0
 80107f4:	73bb      	strb	r3, [r7, #14]
    return status;
 80107f6:	7bbb      	ldrb	r3, [r7, #14]
}
 80107f8:	4618      	mov	r0, r3
 80107fa:	3710      	adds	r7, #16
 80107fc:	46bd      	mov	sp, r7
 80107fe:	bd80      	pop	{r7, pc}
 8010800:	200008d0 	.word	0x200008d0
 8010804:	200008d2 	.word	0x200008d2
 8010808:	200009de 	.word	0x200009de
 801080c:	200009e6 	.word	0x200009e6

08010810 <CheckForClassBCollision>:

static LoRaMacStatus_t CheckForClassBCollision( void )
{
 8010810:	b580      	push	{r7, lr}
 8010812:	af00      	add	r7, sp, #0
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 8010814:	f002 fc36 	bl	8013084 <LoRaMacClassBIsBeaconExpected>
 8010818:	4603      	mov	r3, r0
 801081a:	2b00      	cmp	r3, #0
 801081c:	d001      	beq.n	8010822 <CheckForClassBCollision+0x12>
    {
        return LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME;
 801081e:	230e      	movs	r3, #14
 8010820:	e013      	b.n	801084a <CheckForClassBCollision+0x3a>
    }

    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8010822:	4b0b      	ldr	r3, [pc, #44]	@ (8010850 <CheckForClassBCollision+0x40>)
 8010824:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 8010828:	2b01      	cmp	r3, #1
 801082a:	d10d      	bne.n	8010848 <CheckForClassBCollision+0x38>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 801082c:	f002 fc31 	bl	8013092 <LoRaMacClassBIsPingExpected>
 8010830:	4603      	mov	r3, r0
 8010832:	2b00      	cmp	r3, #0
 8010834:	d001      	beq.n	801083a <CheckForClassBCollision+0x2a>
        {
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 8010836:	230f      	movs	r3, #15
 8010838:	e007      	b.n	801084a <CheckForClassBCollision+0x3a>
        }
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 801083a:	f002 fc31 	bl	80130a0 <LoRaMacClassBIsMulticastExpected>
 801083e:	4603      	mov	r3, r0
 8010840:	2b00      	cmp	r3, #0
 8010842:	d001      	beq.n	8010848 <CheckForClassBCollision+0x38>
        {
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 8010844:	230f      	movs	r3, #15
 8010846:	e000      	b.n	801084a <CheckForClassBCollision+0x3a>
        }
    }
    return LORAMAC_STATUS_OK;
 8010848:	2300      	movs	r3, #0
}
 801084a:	4618      	mov	r0, r3
 801084c:	bd80      	pop	{r7, pc}
 801084e:	bf00      	nop
 8010850:	20000df0 	.word	0x20000df0

08010854 <ComputeRxWindowParameters>:

static void ComputeRxWindowParameters( void )
{
 8010854:	b590      	push	{r4, r7, lr}
 8010856:	b083      	sub	sp, #12
 8010858:	af02      	add	r7, sp, #8
    // Compute Rx1 windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 801085a:	4b2d      	ldr	r3, [pc, #180]	@ (8010910 <ComputeRxWindowParameters+0xbc>)
 801085c:	f893 4040 	ldrb.w	r4, [r3, #64]	@ 0x40
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 8010860:	4b2b      	ldr	r3, [pc, #172]	@ (8010910 <ComputeRxWindowParameters+0xbc>)
 8010862:	f893 0040 	ldrb.w	r0, [r3, #64]	@ 0x40
 8010866:	4b2a      	ldr	r3, [pc, #168]	@ (8010910 <ComputeRxWindowParameters+0xbc>)
 8010868:	f893 1075 	ldrb.w	r1, [r3, #117]	@ 0x75
 801086c:	4b28      	ldr	r3, [pc, #160]	@ (8010910 <ComputeRxWindowParameters+0xbc>)
 801086e:	f993 2039 	ldrsb.w	r2, [r3, #57]	@ 0x39
                                                          Nvm.MacGroup2.MacParams.DownlinkDwellTime,
                                                          Nvm.MacGroup1.ChannelsDatarate,
                                                          Nvm.MacGroup2.MacParams.Rx1DrOffset ),
 8010872:	4b27      	ldr	r3, [pc, #156]	@ (8010910 <ComputeRxWindowParameters+0xbc>)
 8010874:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 8010878:	b25b      	sxtb	r3, r3
 801087a:	f004 fc94 	bl	80151a6 <RegionApplyDrOffset>
 801087e:	4603      	mov	r3, r0
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8010880:	b259      	sxtb	r1, r3
 8010882:	4b23      	ldr	r3, [pc, #140]	@ (8010910 <ComputeRxWindowParameters+0xbc>)
 8010884:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 8010888:	4b21      	ldr	r3, [pc, #132]	@ (8010910 <ComputeRxWindowParameters+0xbc>)
 801088a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801088c:	4821      	ldr	r0, [pc, #132]	@ (8010914 <ComputeRxWindowParameters+0xc0>)
 801088e:	9000      	str	r0, [sp, #0]
 8010890:	4620      	mov	r0, r4
 8010892:	f004 fbaa 	bl	8014fea <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindow1Config );
    // Compute Rx2 windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8010896:	4b1e      	ldr	r3, [pc, #120]	@ (8010910 <ComputeRxWindowParameters+0xbc>)
 8010898:	f893 0040 	ldrb.w	r0, [r3, #64]	@ 0x40
                                     Nvm.MacGroup2.MacParams.Rx2Channel.Datarate,
 801089c:	4b1c      	ldr	r3, [pc, #112]	@ (8010910 <ComputeRxWindowParameters+0xbc>)
 801089e:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 80108a2:	b259      	sxtb	r1, r3
 80108a4:	4b1a      	ldr	r3, [pc, #104]	@ (8010910 <ComputeRxWindowParameters+0xbc>)
 80108a6:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 80108aa:	4b19      	ldr	r3, [pc, #100]	@ (8010910 <ComputeRxWindowParameters+0xbc>)
 80108ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80108ae:	4c1a      	ldr	r4, [pc, #104]	@ (8010918 <ComputeRxWindowParameters+0xc4>)
 80108b0:	9400      	str	r4, [sp, #0]
 80108b2:	f004 fb9a 	bl	8014fea <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindow2Config );

    // Default setup, in case the device joined
    MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.ReceiveDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 80108b6:	4b16      	ldr	r3, [pc, #88]	@ (8010910 <ComputeRxWindowParameters+0xbc>)
 80108b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80108ba:	4a18      	ldr	r2, [pc, #96]	@ (801091c <ComputeRxWindowParameters+0xc8>)
 80108bc:	f8d2 23c4 	ldr.w	r2, [r2, #964]	@ 0x3c4
 80108c0:	4413      	add	r3, r2
 80108c2:	4a16      	ldr	r2, [pc, #88]	@ (801091c <ComputeRxWindowParameters+0xc8>)
 80108c4:	f8c2 33b0 	str.w	r3, [r2, #944]	@ 0x3b0
    MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.ReceiveDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 80108c8:	4b11      	ldr	r3, [pc, #68]	@ (8010910 <ComputeRxWindowParameters+0xbc>)
 80108ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80108cc:	4a13      	ldr	r2, [pc, #76]	@ (801091c <ComputeRxWindowParameters+0xc8>)
 80108ce:	f8d2 23dc 	ldr.w	r2, [r2, #988]	@ 0x3dc
 80108d2:	4413      	add	r3, r2
 80108d4:	4a11      	ldr	r2, [pc, #68]	@ (801091c <ComputeRxWindowParameters+0xc8>)
 80108d6:	f8c2 33b4 	str.w	r3, [r2, #948]	@ 0x3b4

    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 80108da:	4b0d      	ldr	r3, [pc, #52]	@ (8010910 <ComputeRxWindowParameters+0xbc>)
 80108dc:	f893 311c 	ldrb.w	r3, [r3, #284]	@ 0x11c
 80108e0:	2b00      	cmp	r3, #0
 80108e2:	d111      	bne.n	8010908 <ComputeRxWindowParameters+0xb4>
    {
        MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 80108e4:	4b0a      	ldr	r3, [pc, #40]	@ (8010910 <ComputeRxWindowParameters+0xbc>)
 80108e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80108e8:	4a0c      	ldr	r2, [pc, #48]	@ (801091c <ComputeRxWindowParameters+0xc8>)
 80108ea:	f8d2 23c4 	ldr.w	r2, [r2, #964]	@ 0x3c4
 80108ee:	4413      	add	r3, r2
 80108f0:	4a0a      	ldr	r2, [pc, #40]	@ (801091c <ComputeRxWindowParameters+0xc8>)
 80108f2:	f8c2 33b0 	str.w	r3, [r2, #944]	@ 0x3b0
        MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 80108f6:	4b06      	ldr	r3, [pc, #24]	@ (8010910 <ComputeRxWindowParameters+0xbc>)
 80108f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80108fa:	4a08      	ldr	r2, [pc, #32]	@ (801091c <ComputeRxWindowParameters+0xc8>)
 80108fc:	f8d2 23dc 	ldr.w	r2, [r2, #988]	@ 0x3dc
 8010900:	4413      	add	r3, r2
 8010902:	4a06      	ldr	r2, [pc, #24]	@ (801091c <ComputeRxWindowParameters+0xc8>)
 8010904:	f8c2 33b4 	str.w	r3, [r2, #948]	@ 0x3b4
    }
}
 8010908:	bf00      	nop
 801090a:	3704      	adds	r7, #4
 801090c:	46bd      	mov	sp, r7
 801090e:	bd90      	pop	{r4, r7, pc}
 8010910:	20000df0 	.word	0x20000df0
 8010914:	20000c88 	.word	0x20000c88
 8010918:	20000ca0 	.word	0x20000ca0
 801091c:	200008d0 	.word	0x200008d0

08010920 <VerifyTxFrame>:

static LoRaMacStatus_t VerifyTxFrame( void )
{
 8010920:	b580      	push	{r7, lr}
 8010922:	b082      	sub	sp, #8
 8010924:	af00      	add	r7, sp, #0
    size_t macCmdsSize = 0;
 8010926:	2300      	movs	r3, #0
 8010928:	607b      	str	r3, [r7, #4]

    if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 801092a:	4b13      	ldr	r3, [pc, #76]	@ (8010978 <VerifyTxFrame+0x58>)
 801092c:	f893 311c 	ldrb.w	r3, [r3, #284]	@ 0x11c
 8010930:	2b00      	cmp	r3, #0
 8010932:	d01b      	beq.n	801096c <VerifyTxFrame+0x4c>
    {
        if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8010934:	1d3b      	adds	r3, r7, #4
 8010936:	4618      	mov	r0, r3
 8010938:	f002 fe28 	bl	801358c <LoRaMacCommandsGetSizeSerializedCmds>
 801093c:	4603      	mov	r3, r0
 801093e:	2b00      	cmp	r3, #0
 8010940:	d001      	beq.n	8010946 <VerifyTxFrame+0x26>
        {
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8010942:	2313      	movs	r3, #19
 8010944:	e013      	b.n	801096e <VerifyTxFrame+0x4e>
        }

        if( ValidatePayloadLength( MacCtx.AppDataSize, Nvm.MacGroup1.ChannelsDatarate, macCmdsSize ) == false )
 8010946:	4b0d      	ldr	r3, [pc, #52]	@ (801097c <VerifyTxFrame+0x5c>)
 8010948:	f893 3237 	ldrb.w	r3, [r3, #567]	@ 0x237
 801094c:	4a0a      	ldr	r2, [pc, #40]	@ (8010978 <VerifyTxFrame+0x58>)
 801094e:	f992 1039 	ldrsb.w	r1, [r2, #57]	@ 0x39
 8010952:	687a      	ldr	r2, [r7, #4]
 8010954:	b2d2      	uxtb	r2, r2
 8010956:	4618      	mov	r0, r3
 8010958:	f7ff f918 	bl	800fb8c <ValidatePayloadLength>
 801095c:	4603      	mov	r3, r0
 801095e:	f083 0301 	eor.w	r3, r3, #1
 8010962:	b2db      	uxtb	r3, r3
 8010964:	2b00      	cmp	r3, #0
 8010966:	d001      	beq.n	801096c <VerifyTxFrame+0x4c>
        {
            return LORAMAC_STATUS_LENGTH_ERROR;
 8010968:	2308      	movs	r3, #8
 801096a:	e000      	b.n	801096e <VerifyTxFrame+0x4e>
        }
    }
    return LORAMAC_STATUS_OK;
 801096c:	2300      	movs	r3, #0
}
 801096e:	4618      	mov	r0, r3
 8010970:	3708      	adds	r7, #8
 8010972:	46bd      	mov	sp, r7
 8010974:	bd80      	pop	{r7, pc}
 8010976:	bf00      	nop
 8010978:	20000df0 	.word	0x20000df0
 801097c:	200008d0 	.word	0x200008d0

08010980 <SerializeTxFrame>:

static LoRaMacStatus_t SerializeTxFrame( void )
{
 8010980:	b580      	push	{r7, lr}
 8010982:	b082      	sub	sp, #8
 8010984:	af00      	add	r7, sp, #0
    LoRaMacSerializerStatus_t serializeStatus;

    switch( MacCtx.TxMsg.Type )
 8010986:	4b18      	ldr	r3, [pc, #96]	@ (80109e8 <SerializeTxFrame+0x68>)
 8010988:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 801098c:	2b00      	cmp	r3, #0
 801098e:	d002      	beq.n	8010996 <SerializeTxFrame+0x16>
 8010990:	2b04      	cmp	r3, #4
 8010992:	d011      	beq.n	80109b8 <SerializeTxFrame+0x38>
 8010994:	e021      	b.n	80109da <SerializeTxFrame+0x5a>
    {
        case LORAMAC_MSG_TYPE_JOIN_REQUEST:
            serializeStatus = LoRaMacSerializerJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 8010996:	4815      	ldr	r0, [pc, #84]	@ (80109ec <SerializeTxFrame+0x6c>)
 8010998:	f004 f929 	bl	8014bee <LoRaMacSerializerJoinRequest>
 801099c:	4603      	mov	r3, r0
 801099e:	71fb      	strb	r3, [r7, #7]
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 80109a0:	79fb      	ldrb	r3, [r7, #7]
 80109a2:	2b00      	cmp	r3, #0
 80109a4:	d001      	beq.n	80109aa <SerializeTxFrame+0x2a>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 80109a6:	2311      	movs	r3, #17
 80109a8:	e01a      	b.n	80109e0 <SerializeTxFrame+0x60>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 80109aa:	4b0f      	ldr	r3, [pc, #60]	@ (80109e8 <SerializeTxFrame+0x68>)
 80109ac:	f893 310c 	ldrb.w	r3, [r3, #268]	@ 0x10c
 80109b0:	461a      	mov	r2, r3
 80109b2:	4b0d      	ldr	r3, [pc, #52]	@ (80109e8 <SerializeTxFrame+0x68>)
 80109b4:	801a      	strh	r2, [r3, #0]
            break;
 80109b6:	e012      	b.n	80109de <SerializeTxFrame+0x5e>
        case LORAMAC_MSG_TYPE_DATA:
            serializeStatus = LoRaMacSerializerData( &MacCtx.TxMsg.Message.Data );
 80109b8:	480c      	ldr	r0, [pc, #48]	@ (80109ec <SerializeTxFrame+0x6c>)
 80109ba:	f004 f99a 	bl	8014cf2 <LoRaMacSerializerData>
 80109be:	4603      	mov	r3, r0
 80109c0:	71fb      	strb	r3, [r7, #7]
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 80109c2:	79fb      	ldrb	r3, [r7, #7]
 80109c4:	2b00      	cmp	r3, #0
 80109c6:	d001      	beq.n	80109cc <SerializeTxFrame+0x4c>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 80109c8:	2311      	movs	r3, #17
 80109ca:	e009      	b.n	80109e0 <SerializeTxFrame+0x60>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 80109cc:	4b06      	ldr	r3, [pc, #24]	@ (80109e8 <SerializeTxFrame+0x68>)
 80109ce:	f893 310c 	ldrb.w	r3, [r3, #268]	@ 0x10c
 80109d2:	461a      	mov	r2, r3
 80109d4:	4b04      	ldr	r3, [pc, #16]	@ (80109e8 <SerializeTxFrame+0x68>)
 80109d6:	801a      	strh	r2, [r3, #0]
            break;
 80109d8:	e001      	b.n	80109de <SerializeTxFrame+0x5e>
        case LORAMAC_MSG_TYPE_JOIN_ACCEPT:
        case LORAMAC_MSG_TYPE_UNDEF:
        default:
            return LORAMAC_STATUS_PARAMETER_INVALID;
 80109da:	2303      	movs	r3, #3
 80109dc:	e000      	b.n	80109e0 <SerializeTxFrame+0x60>
    }
    return LORAMAC_STATUS_OK;
 80109de:	2300      	movs	r3, #0
}
 80109e0:	4618      	mov	r0, r3
 80109e2:	3708      	adds	r7, #8
 80109e4:	46bd      	mov	sp, r7
 80109e6:	bd80      	pop	{r7, pc}
 80109e8:	200008d0 	.word	0x200008d0
 80109ec:	200009d8 	.word	0x200009d8

080109f0 <ScheduleTx>:

static LoRaMacStatus_t ScheduleTx( bool allowDelayedTx )
{
 80109f0:	b580      	push	{r7, lr}
 80109f2:	b090      	sub	sp, #64	@ 0x40
 80109f4:	af02      	add	r7, sp, #8
 80109f6:	4603      	mov	r3, r0
 80109f8:	73fb      	strb	r3, [r7, #15]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 80109fa:	2303      	movs	r3, #3
 80109fc:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    NextChanParams_t nextChan;

    // Check class b collisions
    status = CheckForClassBCollision( );
 8010a00:	f7ff ff06 	bl	8010810 <CheckForClassBCollision>
 8010a04:	4603      	mov	r3, r0
 8010a06:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    if( status != LORAMAC_STATUS_OK )
 8010a0a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8010a0e:	2b00      	cmp	r3, #0
 8010a10:	d002      	beq.n	8010a18 <ScheduleTx+0x28>
    {
        return status;
 8010a12:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8010a16:	e08f      	b.n	8010b38 <ScheduleTx+0x148>
    }

    // Update back-off
    CalculateBackOff( );
 8010a18:	f000 f8f4 	bl	8010c04 <CalculateBackOff>

    // Serialize frame
    status = SerializeTxFrame( );
 8010a1c:	f7ff ffb0 	bl	8010980 <SerializeTxFrame>
 8010a20:	4603      	mov	r3, r0
 8010a22:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    if( status != LORAMAC_STATUS_OK )
 8010a26:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8010a2a:	2b00      	cmp	r3, #0
 8010a2c:	d002      	beq.n	8010a34 <ScheduleTx+0x44>
    {
        return status;
 8010a2e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8010a32:	e081      	b.n	8010b38 <ScheduleTx+0x148>
    }

    nextChan.AggrTimeOff = Nvm.MacGroup1.AggregatedTimeOff;
 8010a34:	4b42      	ldr	r3, [pc, #264]	@ (8010b40 <ScheduleTx+0x150>)
 8010a36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010a38:	617b      	str	r3, [r7, #20]
    nextChan.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8010a3a:	4b41      	ldr	r3, [pc, #260]	@ (8010b40 <ScheduleTx+0x150>)
 8010a3c:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 8010a40:	773b      	strb	r3, [r7, #28]
    nextChan.DutyCycleEnabled = Nvm.MacGroup2.DutyCycleOn;
 8010a42:	4b3f      	ldr	r3, [pc, #252]	@ (8010b40 <ScheduleTx+0x150>)
 8010a44:	f893 3108 	ldrb.w	r3, [r3, #264]	@ 0x108
 8010a48:	77bb      	strb	r3, [r7, #30]
    nextChan.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 8010a4a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8010a4e:	4618      	mov	r0, r3
 8010a50:	f00a f90c 	bl	801ac6c <SysTimeGetMcuTime>
 8010a54:	4638      	mov	r0, r7
 8010a56:	4b3a      	ldr	r3, [pc, #232]	@ (8010b40 <ScheduleTx+0x150>)
 8010a58:	f8d3 2114 	ldr.w	r2, [r3, #276]	@ 0x114
 8010a5c:	9200      	str	r2, [sp, #0]
 8010a5e:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8010a62:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8010a66:	ca06      	ldmia	r2, {r1, r2}
 8010a68:	f00a f861 	bl	801ab2e <SysTimeSub>
 8010a6c:	f107 0320 	add.w	r3, r7, #32
 8010a70:	463a      	mov	r2, r7
 8010a72:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010a76:	e883 0003 	stmia.w	r3, {r0, r1}
    nextChan.LastAggrTx = Nvm.MacGroup1.LastTxDoneTime;
 8010a7a:	4b31      	ldr	r3, [pc, #196]	@ (8010b40 <ScheduleTx+0x150>)
 8010a7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010a7e:	61bb      	str	r3, [r7, #24]
    nextChan.LastTxIsJoinRequest = false;
 8010a80:	2300      	movs	r3, #0
 8010a82:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    nextChan.Joined = true;
 8010a86:	2301      	movs	r3, #1
 8010a88:	777b      	strb	r3, [r7, #29]
    nextChan.PktLen = MacCtx.PktBufferLen;
 8010a8a:	4b2e      	ldr	r3, [pc, #184]	@ (8010b44 <ScheduleTx+0x154>)
 8010a8c:	881b      	ldrh	r3, [r3, #0]
 8010a8e:	857b      	strh	r3, [r7, #42]	@ 0x2a

    // Setup the parameters based on the join status
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 8010a90:	4b2b      	ldr	r3, [pc, #172]	@ (8010b40 <ScheduleTx+0x150>)
 8010a92:	f893 311c 	ldrb.w	r3, [r3, #284]	@ 0x11c
 8010a96:	2b00      	cmp	r3, #0
 8010a98:	d104      	bne.n	8010aa4 <ScheduleTx+0xb4>
    {
        nextChan.LastTxIsJoinRequest = true;
 8010a9a:	2301      	movs	r3, #1
 8010a9c:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
        nextChan.Joined = false;
 8010aa0:	2300      	movs	r3, #0
 8010aa2:	777b      	strb	r3, [r7, #29]
    }

    // Select channel
    status = RegionNextChannel( Nvm.MacGroup2.Region, &nextChan, &MacCtx.Channel, &MacCtx.DutyCycleWaitTime, &Nvm.MacGroup1.AggregatedTimeOff );
 8010aa4:	4b26      	ldr	r3, [pc, #152]	@ (8010b40 <ScheduleTx+0x150>)
 8010aa6:	f893 0040 	ldrb.w	r0, [r3, #64]	@ 0x40
 8010aaa:	f107 0114 	add.w	r1, r7, #20
 8010aae:	4b26      	ldr	r3, [pc, #152]	@ (8010b48 <ScheduleTx+0x158>)
 8010ab0:	9300      	str	r3, [sp, #0]
 8010ab2:	4b26      	ldr	r3, [pc, #152]	@ (8010b4c <ScheduleTx+0x15c>)
 8010ab4:	4a26      	ldr	r2, [pc, #152]	@ (8010b50 <ScheduleTx+0x160>)
 8010ab6:	f004 fb5e 	bl	8015176 <RegionNextChannel>
 8010aba:	4603      	mov	r3, r0
 8010abc:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

    if( status != LORAMAC_STATUS_OK )
 8010ac0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8010ac4:	2b00      	cmp	r3, #0
 8010ac6:	d022      	beq.n	8010b0e <ScheduleTx+0x11e>
    {
        if( ( status == LORAMAC_STATUS_DUTYCYCLE_RESTRICTED ) &&
 8010ac8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8010acc:	2b0b      	cmp	r3, #11
 8010ace:	d11b      	bne.n	8010b08 <ScheduleTx+0x118>
 8010ad0:	7bfb      	ldrb	r3, [r7, #15]
 8010ad2:	2b00      	cmp	r3, #0
 8010ad4:	d018      	beq.n	8010b08 <ScheduleTx+0x118>
            ( allowDelayedTx == true ) )
        {
            // Allow delayed transmissions. We have to allow it in case
            // the MAC must retransmit a frame with the frame repetitions
            if( MacCtx.DutyCycleWaitTime != 0 )
 8010ad6:	4b1b      	ldr	r3, [pc, #108]	@ (8010b44 <ScheduleTx+0x154>)
 8010ad8:	f8d3 3498 	ldr.w	r3, [r3, #1176]	@ 0x498
 8010adc:	2b00      	cmp	r3, #0
 8010ade:	d011      	beq.n	8010b04 <ScheduleTx+0x114>
            {// Send later - prepare timer
                MacCtx.MacState |= LORAMAC_TX_DELAYED;
 8010ae0:	4b18      	ldr	r3, [pc, #96]	@ (8010b44 <ScheduleTx+0x154>)
 8010ae2:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 8010ae6:	f043 0320 	orr.w	r3, r3, #32
 8010aea:	4a16      	ldr	r2, [pc, #88]	@ (8010b44 <ScheduleTx+0x154>)
 8010aec:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
                TimerSetValue( &MacCtx.TxDelayedTimer, MacCtx.DutyCycleWaitTime );
 8010af0:	4b14      	ldr	r3, [pc, #80]	@ (8010b44 <ScheduleTx+0x154>)
 8010af2:	f8d3 3498 	ldr.w	r3, [r3, #1176]	@ 0x498
 8010af6:	4619      	mov	r1, r3
 8010af8:	4816      	ldr	r0, [pc, #88]	@ (8010b54 <ScheduleTx+0x164>)
 8010afa:	f00a fe55 	bl	801b7a8 <UTIL_TIMER_SetPeriod>
                TimerStart( &MacCtx.TxDelayedTimer );
 8010afe:	4815      	ldr	r0, [pc, #84]	@ (8010b54 <ScheduleTx+0x164>)
 8010b00:	f00a fd74 	bl	801b5ec <UTIL_TIMER_Start>
            }
            return LORAMAC_STATUS_OK;
 8010b04:	2300      	movs	r3, #0
 8010b06:	e017      	b.n	8010b38 <ScheduleTx+0x148>
        }
        else
        {// State where the MAC cannot send a frame
            return status;
 8010b08:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8010b0c:	e014      	b.n	8010b38 <ScheduleTx+0x148>
        }
    }

    // Compute window parameters, offsets, rx symbols, system errors etc.
    ComputeRxWindowParameters( );
 8010b0e:	f7ff fea1 	bl	8010854 <ComputeRxWindowParameters>

    // Verify TX frame
    status = VerifyTxFrame( );
 8010b12:	f7ff ff05 	bl	8010920 <VerifyTxFrame>
 8010b16:	4603      	mov	r3, r0
 8010b18:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    if( status != LORAMAC_STATUS_OK )
 8010b1c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8010b20:	2b00      	cmp	r3, #0
 8010b22:	d002      	beq.n	8010b2a <ScheduleTx+0x13a>
    {
        return status;
 8010b24:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8010b28:	e006      	b.n	8010b38 <ScheduleTx+0x148>
    }

    // Try to send now
    return SendFrameOnChannel( MacCtx.Channel );
 8010b2a:	4b06      	ldr	r3, [pc, #24]	@ (8010b44 <ScheduleTx+0x154>)
 8010b2c:	f893 341f 	ldrb.w	r3, [r3, #1055]	@ 0x41f
 8010b30:	4618      	mov	r0, r3
 8010b32:	f000 fb3b 	bl	80111ac <SendFrameOnChannel>
 8010b36:	4603      	mov	r3, r0
}
 8010b38:	4618      	mov	r0, r3
 8010b3a:	3738      	adds	r7, #56	@ 0x38
 8010b3c:	46bd      	mov	sp, r7
 8010b3e:	bd80      	pop	{r7, pc}
 8010b40:	20000df0 	.word	0x20000df0
 8010b44:	200008d0 	.word	0x200008d0
 8010b48:	20000e20 	.word	0x20000e20
 8010b4c:	20000d68 	.word	0x20000d68
 8010b50:	20000cef 	.word	0x20000cef
 8010b54:	20000c38 	.word	0x20000c38

08010b58 <SecureFrame>:

static LoRaMacStatus_t SecureFrame( uint8_t txDr, uint8_t txCh )
{
 8010b58:	b580      	push	{r7, lr}
 8010b5a:	b084      	sub	sp, #16
 8010b5c:	af00      	add	r7, sp, #0
 8010b5e:	4603      	mov	r3, r0
 8010b60:	460a      	mov	r2, r1
 8010b62:	71fb      	strb	r3, [r7, #7]
 8010b64:	4613      	mov	r3, r2
 8010b66:	71bb      	strb	r3, [r7, #6]
    LoRaMacCryptoStatus_t macCryptoStatus = LORAMAC_CRYPTO_ERROR;
 8010b68:	2312      	movs	r3, #18
 8010b6a:	73fb      	strb	r3, [r7, #15]
    uint32_t fCntUp = 0;
 8010b6c:	2300      	movs	r3, #0
 8010b6e:	60bb      	str	r3, [r7, #8]

    switch( MacCtx.TxMsg.Type )
 8010b70:	4b22      	ldr	r3, [pc, #136]	@ (8010bfc <SecureFrame+0xa4>)
 8010b72:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 8010b76:	2b00      	cmp	r3, #0
 8010b78:	d002      	beq.n	8010b80 <SecureFrame+0x28>
 8010b7a:	2b04      	cmp	r3, #4
 8010b7c:	d011      	beq.n	8010ba2 <SecureFrame+0x4a>
 8010b7e:	e036      	b.n	8010bee <SecureFrame+0x96>
    {
        case LORAMAC_MSG_TYPE_JOIN_REQUEST:
            macCryptoStatus = LoRaMacCryptoPrepareJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 8010b80:	481f      	ldr	r0, [pc, #124]	@ (8010c00 <SecureFrame+0xa8>)
 8010b82:	f003 fc07 	bl	8014394 <LoRaMacCryptoPrepareJoinRequest>
 8010b86:	4603      	mov	r3, r0
 8010b88:	73fb      	strb	r3, [r7, #15]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 8010b8a:	7bfb      	ldrb	r3, [r7, #15]
 8010b8c:	2b00      	cmp	r3, #0
 8010b8e:	d001      	beq.n	8010b94 <SecureFrame+0x3c>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 8010b90:	2311      	movs	r3, #17
 8010b92:	e02f      	b.n	8010bf4 <SecureFrame+0x9c>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 8010b94:	4b19      	ldr	r3, [pc, #100]	@ (8010bfc <SecureFrame+0xa4>)
 8010b96:	f893 310c 	ldrb.w	r3, [r3, #268]	@ 0x10c
 8010b9a:	461a      	mov	r2, r3
 8010b9c:	4b17      	ldr	r3, [pc, #92]	@ (8010bfc <SecureFrame+0xa4>)
 8010b9e:	801a      	strh	r2, [r3, #0]
            break;
 8010ba0:	e027      	b.n	8010bf2 <SecureFrame+0x9a>
        case LORAMAC_MSG_TYPE_DATA:

            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 8010ba2:	f107 0308 	add.w	r3, r7, #8
 8010ba6:	4618      	mov	r0, r3
 8010ba8:	f003 fb38 	bl	801421c <LoRaMacCryptoGetFCntUp>
 8010bac:	4603      	mov	r3, r0
 8010bae:	2b00      	cmp	r3, #0
 8010bb0:	d001      	beq.n	8010bb6 <SecureFrame+0x5e>
            {
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 8010bb2:	2312      	movs	r3, #18
 8010bb4:	e01e      	b.n	8010bf4 <SecureFrame+0x9c>
            }

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            if( ( MacCtx.ChannelsNbTransCounter >= 1 ) || ( MacCtx.AckTimeoutRetriesCounter > 1 ) )
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
            if( MacCtx.ChannelsNbTransCounter >= 1 )
 8010bb6:	4b11      	ldr	r3, [pc, #68]	@ (8010bfc <SecureFrame+0xa4>)
 8010bb8:	f893 341c 	ldrb.w	r3, [r3, #1052]	@ 0x41c
 8010bbc:	2b00      	cmp	r3, #0
 8010bbe:	d002      	beq.n	8010bc6 <SecureFrame+0x6e>
#endif /* LORAMAC_VERSION */
            {
                fCntUp -= 1;
 8010bc0:	68bb      	ldr	r3, [r7, #8]
 8010bc2:	3b01      	subs	r3, #1
 8010bc4:	60bb      	str	r3, [r7, #8]
            }

            macCryptoStatus = LoRaMacCryptoSecureMessage( fCntUp, txDr, txCh, &MacCtx.TxMsg.Message.Data );
 8010bc6:	68b8      	ldr	r0, [r7, #8]
 8010bc8:	79ba      	ldrb	r2, [r7, #6]
 8010bca:	79f9      	ldrb	r1, [r7, #7]
 8010bcc:	4b0c      	ldr	r3, [pc, #48]	@ (8010c00 <SecureFrame+0xa8>)
 8010bce:	f003 fcf3 	bl	80145b8 <LoRaMacCryptoSecureMessage>
 8010bd2:	4603      	mov	r3, r0
 8010bd4:	73fb      	strb	r3, [r7, #15]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 8010bd6:	7bfb      	ldrb	r3, [r7, #15]
 8010bd8:	2b00      	cmp	r3, #0
 8010bda:	d001      	beq.n	8010be0 <SecureFrame+0x88>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 8010bdc:	2311      	movs	r3, #17
 8010bde:	e009      	b.n	8010bf4 <SecureFrame+0x9c>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 8010be0:	4b06      	ldr	r3, [pc, #24]	@ (8010bfc <SecureFrame+0xa4>)
 8010be2:	f893 310c 	ldrb.w	r3, [r3, #268]	@ 0x10c
 8010be6:	461a      	mov	r2, r3
 8010be8:	4b04      	ldr	r3, [pc, #16]	@ (8010bfc <SecureFrame+0xa4>)
 8010bea:	801a      	strh	r2, [r3, #0]
            break;
 8010bec:	e001      	b.n	8010bf2 <SecureFrame+0x9a>
        case LORAMAC_MSG_TYPE_JOIN_ACCEPT:
        case LORAMAC_MSG_TYPE_UNDEF:
        default:
            return LORAMAC_STATUS_PARAMETER_INVALID;
 8010bee:	2303      	movs	r3, #3
 8010bf0:	e000      	b.n	8010bf4 <SecureFrame+0x9c>
    }
    return LORAMAC_STATUS_OK;
 8010bf2:	2300      	movs	r3, #0
}
 8010bf4:	4618      	mov	r0, r3
 8010bf6:	3710      	adds	r7, #16
 8010bf8:	46bd      	mov	sp, r7
 8010bfa:	bd80      	pop	{r7, pc}
 8010bfc:	200008d0 	.word	0x200008d0
 8010c00:	200009d8 	.word	0x200009d8

08010c04 <CalculateBackOff>:

static void CalculateBackOff( void )
{
 8010c04:	b480      	push	{r7}
 8010c06:	af00      	add	r7, sp, #0
    // Make sure that the calculation of the backoff time for the aggregated time off will only be done in
    // case the value is zero. It will be set to zero in the function RegionNextChannel.
    if( Nvm.MacGroup1.AggregatedTimeOff == 0 )
 8010c08:	4b09      	ldr	r3, [pc, #36]	@ (8010c30 <CalculateBackOff+0x2c>)
 8010c0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010c0c:	2b00      	cmp	r3, #0
 8010c0e:	d10a      	bne.n	8010c26 <CalculateBackOff+0x22>
    {
        // Update aggregated time-off. This must be an assignment and no incremental
        // update as we do only calculate the time-off based on the last transmission
        Nvm.MacGroup1.AggregatedTimeOff = ( MacCtx.TxTimeOnAir * Nvm.MacGroup2.AggregatedDCycle - MacCtx.TxTimeOnAir );
 8010c10:	4b07      	ldr	r3, [pc, #28]	@ (8010c30 <CalculateBackOff+0x2c>)
 8010c12:	f8b3 310c 	ldrh.w	r3, [r3, #268]	@ 0x10c
 8010c16:	3b01      	subs	r3, #1
 8010c18:	4a06      	ldr	r2, [pc, #24]	@ (8010c34 <CalculateBackOff+0x30>)
 8010c1a:	f8d2 2420 	ldr.w	r2, [r2, #1056]	@ 0x420
 8010c1e:	fb02 f303 	mul.w	r3, r2, r3
 8010c22:	4a03      	ldr	r2, [pc, #12]	@ (8010c30 <CalculateBackOff+0x2c>)
 8010c24:	6313      	str	r3, [r2, #48]	@ 0x30
    }
}
 8010c26:	bf00      	nop
 8010c28:	46bd      	mov	sp, r7
 8010c2a:	bc80      	pop	{r7}
 8010c2c:	4770      	bx	lr
 8010c2e:	bf00      	nop
 8010c30:	20000df0 	.word	0x20000df0
 8010c34:	200008d0 	.word	0x200008d0

08010c38 <RemoveMacCommands>:

static void RemoveMacCommands( LoRaMacRxSlot_t rxSlot, LoRaMacFrameCtrl_t fCtrl, Mcps_t request )
{
 8010c38:	b580      	push	{r7, lr}
 8010c3a:	b082      	sub	sp, #8
 8010c3c:	af00      	add	r7, sp, #0
 8010c3e:	4603      	mov	r3, r0
 8010c40:	7139      	strb	r1, [r7, #4]
 8010c42:	71fb      	strb	r3, [r7, #7]
 8010c44:	4613      	mov	r3, r2
 8010c46:	71bb      	strb	r3, [r7, #6]
    if( rxSlot == RX_SLOT_WIN_1 || rxSlot == RX_SLOT_WIN_2  )
 8010c48:	79fb      	ldrb	r3, [r7, #7]
 8010c4a:	2b00      	cmp	r3, #0
 8010c4c:	d002      	beq.n	8010c54 <RemoveMacCommands+0x1c>
 8010c4e:	79fb      	ldrb	r3, [r7, #7]
 8010c50:	2b01      	cmp	r3, #1
 8010c52:	d10d      	bne.n	8010c70 <RemoveMacCommands+0x38>
    {
        // Remove all sticky MAC commands answers since we can assume
        // that they have been received by the server.
        if( request == MCPS_CONFIRMED )
 8010c54:	79bb      	ldrb	r3, [r7, #6]
 8010c56:	2b01      	cmp	r3, #1
 8010c58:	d108      	bne.n	8010c6c <RemoveMacCommands+0x34>
        {
            if( fCtrl.Bits.Ack == 1 )
 8010c5a:	793b      	ldrb	r3, [r7, #4]
 8010c5c:	f003 0320 	and.w	r3, r3, #32
 8010c60:	b2db      	uxtb	r3, r3
 8010c62:	2b00      	cmp	r3, #0
 8010c64:	d004      	beq.n	8010c70 <RemoveMacCommands+0x38>
            {  // For confirmed uplinks only if we have received an ACK.
                LoRaMacCommandsRemoveStickyAnsCmds( );
 8010c66:	f002 fc6f 	bl	8013548 <LoRaMacCommandsRemoveStickyAnsCmds>
        else
        {
            LoRaMacCommandsRemoveStickyAnsCmds( );
        }
    }
}
 8010c6a:	e001      	b.n	8010c70 <RemoveMacCommands+0x38>
            LoRaMacCommandsRemoveStickyAnsCmds( );
 8010c6c:	f002 fc6c 	bl	8013548 <LoRaMacCommandsRemoveStickyAnsCmds>
}
 8010c70:	bf00      	nop
 8010c72:	3708      	adds	r7, #8
 8010c74:	46bd      	mov	sp, r7
 8010c76:	bd80      	pop	{r7, pc}

08010c78 <ResetMacParameters>:

static void ResetMacParameters( void )
{
 8010c78:	b5b0      	push	{r4, r5, r7, lr}
 8010c7a:	b090      	sub	sp, #64	@ 0x40
 8010c7c:	af00      	add	r7, sp, #0
    LoRaMacClassBCallback_t classBCallbacks;
    LoRaMacClassBParams_t classBParams;

    Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_NONE;
 8010c7e:	4b70      	ldr	r3, [pc, #448]	@ (8010e40 <ResetMacParameters+0x1c8>)
 8010c80:	2200      	movs	r2, #0
 8010c82:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c

    // ADR counter
    Nvm.MacGroup1.AdrAckCounter = 0;
 8010c86:	4b6e      	ldr	r3, [pc, #440]	@ (8010e40 <ResetMacParameters+0x1c8>)
 8010c88:	2200      	movs	r2, #0
 8010c8a:	629a      	str	r2, [r3, #40]	@ 0x28

    MacCtx.ChannelsNbTransCounter = 0;
 8010c8c:	4b6d      	ldr	r3, [pc, #436]	@ (8010e44 <ResetMacParameters+0x1cc>)
 8010c8e:	2200      	movs	r2, #0
 8010c90:	f883 241c 	strb.w	r2, [r3, #1052]	@ 0x41c
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetries = 1;
    MacCtx.AckTimeoutRetriesCounter = 1;
    MacCtx.AckTimeoutRetry = false;
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    MacCtx.RetransmitTimeoutRetry = false;
 8010c94:	4b6b      	ldr	r3, [pc, #428]	@ (8010e44 <ResetMacParameters+0x1cc>)
 8010c96:	2200      	movs	r2, #0
 8010c98:	f883 241d 	strb.w	r2, [r3, #1053]	@ 0x41d
    MacCtx.ResponseTimeoutStartTime = 0;
 8010c9c:	4b69      	ldr	r3, [pc, #420]	@ (8010e44 <ResetMacParameters+0x1cc>)
 8010c9e:	2200      	movs	r2, #0
 8010ca0:	f8c3 249c 	str.w	r2, [r3, #1180]	@ 0x49c
#endif /* LORAMAC_VERSION */

    Nvm.MacGroup2.MaxDCycle = 0;
 8010ca4:	4b66      	ldr	r3, [pc, #408]	@ (8010e40 <ResetMacParameters+0x1c8>)
 8010ca6:	2200      	movs	r2, #0
 8010ca8:	f883 2107 	strb.w	r2, [r3, #263]	@ 0x107
    Nvm.MacGroup2.AggregatedDCycle = 1;
 8010cac:	4b64      	ldr	r3, [pc, #400]	@ (8010e40 <ResetMacParameters+0x1c8>)
 8010cae:	2201      	movs	r2, #1
 8010cb0:	f8a3 210c 	strh.w	r2, [r3, #268]	@ 0x10c

    Nvm.MacGroup1.ChannelsTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 8010cb4:	4b62      	ldr	r3, [pc, #392]	@ (8010e40 <ResetMacParameters+0x1c8>)
 8010cb6:	f993 20cc 	ldrsb.w	r2, [r3, #204]	@ 0xcc
 8010cba:	4b61      	ldr	r3, [pc, #388]	@ (8010e40 <ResetMacParameters+0x1c8>)
 8010cbc:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    Nvm.MacGroup1.ChannelsDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 8010cc0:	4b5f      	ldr	r3, [pc, #380]	@ (8010e40 <ResetMacParameters+0x1c8>)
 8010cc2:	f993 20cd 	ldrsb.w	r2, [r3, #205]	@ 0xcd
 8010cc6:	4b5e      	ldr	r3, [pc, #376]	@ (8010e40 <ResetMacParameters+0x1c8>)
 8010cc8:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
    Nvm.MacGroup2.MacParams.Rx1DrOffset = Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset;
 8010ccc:	4b5c      	ldr	r3, [pc, #368]	@ (8010e40 <ResetMacParameters+0x1c8>)
 8010cce:	f893 20a5 	ldrb.w	r2, [r3, #165]	@ 0xa5
 8010cd2:	4b5b      	ldr	r3, [pc, #364]	@ (8010e40 <ResetMacParameters+0x1c8>)
 8010cd4:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
    Nvm.MacGroup2.MacParams.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 8010cd8:	4b59      	ldr	r3, [pc, #356]	@ (8010e40 <ResetMacParameters+0x1c8>)
 8010cda:	4a59      	ldr	r2, [pc, #356]	@ (8010e40 <ResetMacParameters+0x1c8>)
 8010cdc:	3364      	adds	r3, #100	@ 0x64
 8010cde:	32a8      	adds	r2, #168	@ 0xa8
 8010ce0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010ce4:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 8010ce8:	4b55      	ldr	r3, [pc, #340]	@ (8010e40 <ResetMacParameters+0x1c8>)
 8010cea:	4a55      	ldr	r2, [pc, #340]	@ (8010e40 <ResetMacParameters+0x1c8>)
 8010cec:	336c      	adds	r3, #108	@ 0x6c
 8010cee:	32b0      	adds	r2, #176	@ 0xb0
 8010cf0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010cf4:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.UplinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime;
 8010cf8:	4b51      	ldr	r3, [pc, #324]	@ (8010e40 <ResetMacParameters+0x1c8>)
 8010cfa:	f893 20b8 	ldrb.w	r2, [r3, #184]	@ 0xb8
 8010cfe:	4b50      	ldr	r3, [pc, #320]	@ (8010e40 <ResetMacParameters+0x1c8>)
 8010d00:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
    Nvm.MacGroup2.MacParams.DownlinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime;
 8010d04:	4b4e      	ldr	r3, [pc, #312]	@ (8010e40 <ResetMacParameters+0x1c8>)
 8010d06:	f893 20b9 	ldrb.w	r2, [r3, #185]	@ 0xb9
 8010d0a:	4b4d      	ldr	r3, [pc, #308]	@ (8010e40 <ResetMacParameters+0x1c8>)
 8010d0c:	f883 2075 	strb.w	r2, [r3, #117]	@ 0x75
    Nvm.MacGroup2.MacParams.MaxEirp = Nvm.MacGroup2.MacParamsDefaults.MaxEirp;
 8010d10:	4b4b      	ldr	r3, [pc, #300]	@ (8010e40 <ResetMacParameters+0x1c8>)
 8010d12:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8010d16:	4a4a      	ldr	r2, [pc, #296]	@ (8010e40 <ResetMacParameters+0x1c8>)
 8010d18:	6793      	str	r3, [r2, #120]	@ 0x78
    Nvm.MacGroup2.MacParams.AntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 8010d1a:	4b49      	ldr	r3, [pc, #292]	@ (8010e40 <ResetMacParameters+0x1c8>)
 8010d1c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8010d20:	4a47      	ldr	r2, [pc, #284]	@ (8010e40 <ResetMacParameters+0x1c8>)
 8010d22:	67d3      	str	r3, [r2, #124]	@ 0x7c

    MacCtx.NodeAckRequested = false;
 8010d24:	4b47      	ldr	r3, [pc, #284]	@ (8010e44 <ResetMacParameters+0x1cc>)
 8010d26:	2200      	movs	r2, #0
 8010d28:	f883 241e 	strb.w	r2, [r3, #1054]	@ 0x41e
    Nvm.MacGroup1.SrvAckRequested = false;
 8010d2c:	4b44      	ldr	r3, [pc, #272]	@ (8010e40 <ResetMacParameters+0x1c8>)
 8010d2e:	2200      	movs	r2, #0
 8010d30:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = false;
 8010d34:	4b42      	ldr	r3, [pc, #264]	@ (8010e40 <ResetMacParameters+0x1c8>)
 8010d36:	2200      	movs	r2, #0
 8010d38:	f883 2109 	strb.w	r2, [r3, #265]	@ 0x109
    Nvm.MacGroup2.DownlinkReceived = false;
 8010d3c:	4b40      	ldr	r3, [pc, #256]	@ (8010e40 <ResetMacParameters+0x1c8>)
 8010d3e:	2200      	movs	r2, #0
 8010d40:	f883 210a 	strb.w	r2, [r3, #266]	@ 0x10a
#endif /* LORAMAC_VERSION */

    // Reset to application defaults
    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_RESET_TO_DEFAULT_CHANNELS;
 8010d44:	2301      	movs	r3, #1
 8010d46:	743b      	strb	r3, [r7, #16]
    params.NvmGroup1 = &Nvm.RegionGroup1;
 8010d48:	4b3f      	ldr	r3, [pc, #252]	@ (8010e48 <ResetMacParameters+0x1d0>)
 8010d4a:	607b      	str	r3, [r7, #4]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 8010d4c:	4b3f      	ldr	r3, [pc, #252]	@ (8010e4c <ResetMacParameters+0x1d4>)
 8010d4e:	60bb      	str	r3, [r7, #8]
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    params.Bands = &RegionBands;
 8010d50:	4b3f      	ldr	r3, [pc, #252]	@ (8010e50 <ResetMacParameters+0x1d8>)
 8010d52:	60fb      	str	r3, [r7, #12]
#endif /* LORAMAC_VERSION */
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 8010d54:	4b3a      	ldr	r3, [pc, #232]	@ (8010e40 <ResetMacParameters+0x1c8>)
 8010d56:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8010d5a:	1d3a      	adds	r2, r7, #4
 8010d5c:	4611      	mov	r1, r2
 8010d5e:	4618      	mov	r0, r3
 8010d60:	f004 f8f5 	bl	8014f4e <RegionInitDefaults>

    // Initialize channel index.
    MacCtx.Channel = 0;
 8010d64:	4b37      	ldr	r3, [pc, #220]	@ (8010e44 <ResetMacParameters+0x1cc>)
 8010d66:	2200      	movs	r2, #0
 8010d68:	f883 241f 	strb.w	r2, [r3, #1055]	@ 0x41f

    // Initialize Rx2 config parameters.
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 8010d6c:	4b35      	ldr	r3, [pc, #212]	@ (8010e44 <ResetMacParameters+0x1cc>)
 8010d6e:	f893 241f 	ldrb.w	r2, [r3, #1055]	@ 0x41f
 8010d72:	4b34      	ldr	r3, [pc, #208]	@ (8010e44 <ResetMacParameters+0x1cc>)
 8010d74:	f883 23d0 	strb.w	r2, [r3, #976]	@ 0x3d0
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 8010d78:	4b31      	ldr	r3, [pc, #196]	@ (8010e40 <ResetMacParameters+0x1c8>)
 8010d7a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010d7c:	4a31      	ldr	r2, [pc, #196]	@ (8010e44 <ResetMacParameters+0x1cc>)
 8010d7e:	f8c2 33d4 	str.w	r3, [r2, #980]	@ 0x3d4
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8010d82:	4b2f      	ldr	r3, [pc, #188]	@ (8010e40 <ResetMacParameters+0x1c8>)
 8010d84:	f893 2075 	ldrb.w	r2, [r3, #117]	@ 0x75
 8010d88:	4b2e      	ldr	r3, [pc, #184]	@ (8010e44 <ResetMacParameters+0x1cc>)
 8010d8a:	f883 23e0 	strb.w	r2, [r3, #992]	@ 0x3e0
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 8010d8e:	4b2c      	ldr	r3, [pc, #176]	@ (8010e40 <ResetMacParameters+0x1c8>)
 8010d90:	f893 2080 	ldrb.w	r2, [r3, #128]	@ 0x80
 8010d94:	4b2b      	ldr	r3, [pc, #172]	@ (8010e44 <ResetMacParameters+0x1cc>)
 8010d96:	f883 23e1 	strb.w	r2, [r3, #993]	@ 0x3e1
    MacCtx.RxWindow2Config.RxContinuous = false;
 8010d9a:	4b2a      	ldr	r3, [pc, #168]	@ (8010e44 <ResetMacParameters+0x1cc>)
 8010d9c:	2200      	movs	r2, #0
 8010d9e:	f883 23e2 	strb.w	r2, [r3, #994]	@ 0x3e2
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 8010da2:	4b28      	ldr	r3, [pc, #160]	@ (8010e44 <ResetMacParameters+0x1cc>)
 8010da4:	2201      	movs	r2, #1
 8010da6:	f883 23e3 	strb.w	r2, [r3, #995]	@ 0x3e3
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    MacCtx.RxWindow2Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 8010daa:	4b25      	ldr	r3, [pc, #148]	@ (8010e40 <ResetMacParameters+0x1c8>)
 8010dac:	f893 211c 	ldrb.w	r2, [r3, #284]	@ 0x11c
 8010db0:	4b24      	ldr	r3, [pc, #144]	@ (8010e44 <ResetMacParameters+0x1cc>)
 8010db2:	f883 23e4 	strb.w	r2, [r3, #996]	@ 0x3e4
#endif /* LORAMAC_VERSION */

    // Initialize RxC config parameters.
    MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 8010db6:	4a23      	ldr	r2, [pc, #140]	@ (8010e44 <ResetMacParameters+0x1cc>)
 8010db8:	4b22      	ldr	r3, [pc, #136]	@ (8010e44 <ResetMacParameters+0x1cc>)
 8010dba:	f502 747a 	add.w	r4, r2, #1000	@ 0x3e8
 8010dbe:	f503 7574 	add.w	r5, r3, #976	@ 0x3d0
 8010dc2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010dc4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010dc6:	e895 0003 	ldmia.w	r5, {r0, r1}
 8010dca:	e884 0003 	stmia.w	r4, {r0, r1}
    MacCtx.RxWindowCConfig.RxContinuous = true;
 8010dce:	4b1d      	ldr	r3, [pc, #116]	@ (8010e44 <ResetMacParameters+0x1cc>)
 8010dd0:	2201      	movs	r2, #1
 8010dd2:	f883 23fa 	strb.w	r2, [r3, #1018]	@ 0x3fa
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8010dd6:	4b1b      	ldr	r3, [pc, #108]	@ (8010e44 <ResetMacParameters+0x1cc>)
 8010dd8:	2202      	movs	r2, #2
 8010dda:	f883 23fb 	strb.w	r2, [r3, #1019]	@ 0x3fb

    // Initialize class b
    // Apply callback
    classBCallbacks.GetTemperatureLevel = NULL;
 8010dde:	2300      	movs	r3, #0
 8010de0:	63bb      	str	r3, [r7, #56]	@ 0x38
    classBCallbacks.MacProcessNotify = NULL;
 8010de2:	2300      	movs	r3, #0
 8010de4:	63fb      	str	r3, [r7, #60]	@ 0x3c

    if( MacCtx.MacCallbacks != NULL )
 8010de6:	4b17      	ldr	r3, [pc, #92]	@ (8010e44 <ResetMacParameters+0x1cc>)
 8010de8:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 8010dec:	2b00      	cmp	r3, #0
 8010dee:	d009      	beq.n	8010e04 <ResetMacParameters+0x18c>
    {
        classBCallbacks.GetTemperatureLevel = MacCtx.MacCallbacks->GetTemperatureLevel;
 8010df0:	4b14      	ldr	r3, [pc, #80]	@ (8010e44 <ResetMacParameters+0x1cc>)
 8010df2:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 8010df6:	685b      	ldr	r3, [r3, #4]
 8010df8:	63bb      	str	r3, [r7, #56]	@ 0x38
        classBCallbacks.MacProcessNotify = MacCtx.MacCallbacks->MacProcessNotify;
 8010dfa:	4b12      	ldr	r3, [pc, #72]	@ (8010e44 <ResetMacParameters+0x1cc>)
 8010dfc:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 8010e00:	691b      	ldr	r3, [r3, #16]
 8010e02:	63fb      	str	r3, [r7, #60]	@ 0x3c
    }

    // Must all be static. Don't use local references.
    classBParams.MlmeIndication = &MacCtx.MlmeIndication;
 8010e04:	4b13      	ldr	r3, [pc, #76]	@ (8010e54 <ResetMacParameters+0x1dc>)
 8010e06:	617b      	str	r3, [r7, #20]
    classBParams.McpsIndication = &MacCtx.McpsIndication;
 8010e08:	4b13      	ldr	r3, [pc, #76]	@ (8010e58 <ResetMacParameters+0x1e0>)
 8010e0a:	61bb      	str	r3, [r7, #24]
    classBParams.MlmeConfirm = &MacCtx.MlmeConfirm;
 8010e0c:	4b13      	ldr	r3, [pc, #76]	@ (8010e5c <ResetMacParameters+0x1e4>)
 8010e0e:	61fb      	str	r3, [r7, #28]
    classBParams.LoRaMacFlags = &MacCtx.MacFlags;
 8010e10:	4b13      	ldr	r3, [pc, #76]	@ (8010e60 <ResetMacParameters+0x1e8>)
 8010e12:	623b      	str	r3, [r7, #32]
    classBParams.LoRaMacDevAddr = &Nvm.MacGroup2.DevAddr;
 8010e14:	4b13      	ldr	r3, [pc, #76]	@ (8010e64 <ResetMacParameters+0x1ec>)
 8010e16:	627b      	str	r3, [r7, #36]	@ 0x24
    classBParams.LoRaMacRegion = &Nvm.MacGroup2.Region;
 8010e18:	4b13      	ldr	r3, [pc, #76]	@ (8010e68 <ResetMacParameters+0x1f0>)
 8010e1a:	62bb      	str	r3, [r7, #40]	@ 0x28
    classBParams.LoRaMacParams = &Nvm.MacGroup2.MacParams;
 8010e1c:	4b13      	ldr	r3, [pc, #76]	@ (8010e6c <ResetMacParameters+0x1f4>)
 8010e1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    classBParams.MulticastChannels = &Nvm.MacGroup2.MulticastChannelList[0];
 8010e20:	4b13      	ldr	r3, [pc, #76]	@ (8010e70 <ResetMacParameters+0x1f8>)
 8010e22:	633b      	str	r3, [r7, #48]	@ 0x30
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    classBParams.NetworkActivation = &Nvm.MacGroup2.NetworkActivation;
 8010e24:	4b13      	ldr	r3, [pc, #76]	@ (8010e74 <ResetMacParameters+0x1fc>)
 8010e26:	637b      	str	r3, [r7, #52]	@ 0x34
#endif /* LORAMAC_VERSION */

    LoRaMacClassBInit( &classBParams, &classBCallbacks, &Nvm.ClassB );
 8010e28:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 8010e2c:	f107 0314 	add.w	r3, r7, #20
 8010e30:	4a11      	ldr	r2, [pc, #68]	@ (8010e78 <ResetMacParameters+0x200>)
 8010e32:	4618      	mov	r0, r3
 8010e34:	f002 f8cf 	bl	8012fd6 <LoRaMacClassBInit>
}
 8010e38:	bf00      	nop
 8010e3a:	3740      	adds	r7, #64	@ 0x40
 8010e3c:	46bd      	mov	sp, r7
 8010e3e:	bdb0      	pop	{r4, r5, r7, pc}
 8010e40:	20000df0 	.word	0x20000df0
 8010e44:	200008d0 	.word	0x200008d0
 8010e48:	20000fd4 	.word	0x20000fd4
 8010e4c:	20000fd8 	.word	0x20000fd8
 8010e50:	200018e8 	.word	0x200018e8
 8010e54:	20000d3c 	.word	0x20000d3c
 8010e58:	20000cf4 	.word	0x20000cf4
 8010e5c:	20000d28 	.word	0x20000d28
 8010e60:	20000d65 	.word	0x20000d65
 8010e64:	20000ec4 	.word	0x20000ec4
 8010e68:	20000e30 	.word	0x20000e30
 8010e6c:	20000e34 	.word	0x20000e34
 8010e70:	20000ec8 	.word	0x20000ec8
 8010e74:	20000f0c 	.word	0x20000f0c
 8010e78:	20001354 	.word	0x20001354

08010e7c <RxWindowSetup>:
 *
 * \param [in] rxTimer  Window timer to be topped.
 * \param [in] rxConfig Window parameters to be setup
 */
static void RxWindowSetup( TimerEvent_t* rxTimer, RxConfigParams_t* rxConfig )
{
 8010e7c:	b580      	push	{r7, lr}
 8010e7e:	b082      	sub	sp, #8
 8010e80:	af00      	add	r7, sp, #0
 8010e82:	6078      	str	r0, [r7, #4]
 8010e84:	6039      	str	r1, [r7, #0]
    TimerStop( rxTimer );
 8010e86:	6878      	ldr	r0, [r7, #4]
 8010e88:	f00a fc1e 	bl	801b6c8 <UTIL_TIMER_Stop>

    // Ensure the radio is Idle
    Radio.Standby( );
 8010e8c:	4b11      	ldr	r3, [pc, #68]	@ (8010ed4 <RxWindowSetup+0x58>)
 8010e8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010e90:	4798      	blx	r3

    if( RegionRxConfig( Nvm.MacGroup2.Region, rxConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 8010e92:	4b11      	ldr	r3, [pc, #68]	@ (8010ed8 <RxWindowSetup+0x5c>)
 8010e94:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8010e98:	4a10      	ldr	r2, [pc, #64]	@ (8010edc <RxWindowSetup+0x60>)
 8010e9a:	6839      	ldr	r1, [r7, #0]
 8010e9c:	4618      	mov	r0, r3
 8010e9e:	f004 f8be 	bl	801501e <RegionRxConfig>
 8010ea2:	4603      	mov	r3, r0
 8010ea4:	2b00      	cmp	r3, #0
 8010ea6:	d010      	beq.n	8010eca <RxWindowSetup+0x4e>
    {
        MacCtx.MlmeIndication.RxDatarate = MacCtx.McpsIndication.RxDatarate;
 8010ea8:	4b0d      	ldr	r3, [pc, #52]	@ (8010ee0 <RxWindowSetup+0x64>)
 8010eaa:	f893 2428 	ldrb.w	r2, [r3, #1064]	@ 0x428
 8010eae:	4b0c      	ldr	r3, [pc, #48]	@ (8010ee0 <RxWindowSetup+0x64>)
 8010eb0:	f883 246e 	strb.w	r2, [r3, #1134]	@ 0x46e
        Radio.Rx( Nvm.MacGroup2.MacParams.MaxRxWindow );
 8010eb4:	4b07      	ldr	r3, [pc, #28]	@ (8010ed4 <RxWindowSetup+0x58>)
 8010eb6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010eb8:	4a07      	ldr	r2, [pc, #28]	@ (8010ed8 <RxWindowSetup+0x5c>)
 8010eba:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8010ebc:	4610      	mov	r0, r2
 8010ebe:	4798      	blx	r3
        MacCtx.RxSlot = rxConfig->RxSlot;
 8010ec0:	683b      	ldr	r3, [r7, #0]
 8010ec2:	7cda      	ldrb	r2, [r3, #19]
 8010ec4:	4b06      	ldr	r3, [pc, #24]	@ (8010ee0 <RxWindowSetup+0x64>)
 8010ec6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
    }
}
 8010eca:	bf00      	nop
 8010ecc:	3708      	adds	r7, #8
 8010ece:	46bd      	mov	sp, r7
 8010ed0:	bd80      	pop	{r7, pc}
 8010ed2:	bf00      	nop
 8010ed4:	0801f874 	.word	0x0801f874
 8010ed8:	20000df0 	.word	0x20000df0
 8010edc:	20000cf8 	.word	0x20000cf8
 8010ee0:	200008d0 	.word	0x200008d0

08010ee4 <OpenContinuousRxCWindow>:

static void OpenContinuousRxCWindow( void )
{
 8010ee4:	b590      	push	{r4, r7, lr}
 8010ee6:	b083      	sub	sp, #12
 8010ee8:	af02      	add	r7, sp, #8
    // Compute RxC windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8010eea:	4b1e      	ldr	r3, [pc, #120]	@ (8010f64 <OpenContinuousRxCWindow+0x80>)
 8010eec:	f893 0040 	ldrb.w	r0, [r3, #64]	@ 0x40
                                     Nvm.MacGroup2.MacParams.RxCChannel.Datarate,
 8010ef0:	4b1c      	ldr	r3, [pc, #112]	@ (8010f64 <OpenContinuousRxCWindow+0x80>)
 8010ef2:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8010ef6:	b259      	sxtb	r1, r3
 8010ef8:	4b1a      	ldr	r3, [pc, #104]	@ (8010f64 <OpenContinuousRxCWindow+0x80>)
 8010efa:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 8010efe:	4b19      	ldr	r3, [pc, #100]	@ (8010f64 <OpenContinuousRxCWindow+0x80>)
 8010f00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010f02:	4c19      	ldr	r4, [pc, #100]	@ (8010f68 <OpenContinuousRxCWindow+0x84>)
 8010f04:	9400      	str	r4, [sp, #0]
 8010f06:	f004 f870 	bl	8014fea <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindowCConfig );

    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8010f0a:	4b18      	ldr	r3, [pc, #96]	@ (8010f6c <OpenContinuousRxCWindow+0x88>)
 8010f0c:	2202      	movs	r2, #2
 8010f0e:	f883 23fb 	strb.w	r2, [r3, #1019]	@ 0x3fb
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    MacCtx.RxWindowCConfig.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 8010f12:	4b14      	ldr	r3, [pc, #80]	@ (8010f64 <OpenContinuousRxCWindow+0x80>)
 8010f14:	f893 211c 	ldrb.w	r2, [r3, #284]	@ 0x11c
 8010f18:	4b14      	ldr	r3, [pc, #80]	@ (8010f6c <OpenContinuousRxCWindow+0x88>)
 8010f1a:	f883 23fc 	strb.w	r2, [r3, #1020]	@ 0x3fc
#endif /* LORAMAC_VERSION */
    // Setup continuous listening
    MacCtx.RxWindowCConfig.RxContinuous = true;
 8010f1e:	4b13      	ldr	r3, [pc, #76]	@ (8010f6c <OpenContinuousRxCWindow+0x88>)
 8010f20:	2201      	movs	r2, #1
 8010f22:	f883 23fa 	strb.w	r2, [r3, #1018]	@ 0x3fa

    // At this point the Radio should be idle.
    // Thus, there is no need to set the radio in standby mode.
    if( RegionRxConfig( Nvm.MacGroup2.Region, &MacCtx.RxWindowCConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 8010f26:	4b0f      	ldr	r3, [pc, #60]	@ (8010f64 <OpenContinuousRxCWindow+0x80>)
 8010f28:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8010f2c:	4a10      	ldr	r2, [pc, #64]	@ (8010f70 <OpenContinuousRxCWindow+0x8c>)
 8010f2e:	490e      	ldr	r1, [pc, #56]	@ (8010f68 <OpenContinuousRxCWindow+0x84>)
 8010f30:	4618      	mov	r0, r3
 8010f32:	f004 f874 	bl	801501e <RegionRxConfig>
 8010f36:	4603      	mov	r3, r0
 8010f38:	2b00      	cmp	r3, #0
 8010f3a:	d00f      	beq.n	8010f5c <OpenContinuousRxCWindow+0x78>
    {
        MacCtx.MlmeIndication.RxDatarate = MacCtx.McpsIndication.RxDatarate;
 8010f3c:	4b0b      	ldr	r3, [pc, #44]	@ (8010f6c <OpenContinuousRxCWindow+0x88>)
 8010f3e:	f893 2428 	ldrb.w	r2, [r3, #1064]	@ 0x428
 8010f42:	4b0a      	ldr	r3, [pc, #40]	@ (8010f6c <OpenContinuousRxCWindow+0x88>)
 8010f44:	f883 246e 	strb.w	r2, [r3, #1134]	@ 0x46e
        Radio.Rx( 0 ); // Continuous mode
 8010f48:	4b0a      	ldr	r3, [pc, #40]	@ (8010f74 <OpenContinuousRxCWindow+0x90>)
 8010f4a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010f4c:	2000      	movs	r0, #0
 8010f4e:	4798      	blx	r3
        MacCtx.RxSlot = MacCtx.RxWindowCConfig.RxSlot;
 8010f50:	4b06      	ldr	r3, [pc, #24]	@ (8010f6c <OpenContinuousRxCWindow+0x88>)
 8010f52:	f893 23fb 	ldrb.w	r2, [r3, #1019]	@ 0x3fb
 8010f56:	4b05      	ldr	r3, [pc, #20]	@ (8010f6c <OpenContinuousRxCWindow+0x88>)
 8010f58:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
    }
}
 8010f5c:	bf00      	nop
 8010f5e:	3704      	adds	r7, #4
 8010f60:	46bd      	mov	sp, r7
 8010f62:	bd90      	pop	{r4, r7, pc}
 8010f64:	20000df0 	.word	0x20000df0
 8010f68:	20000cb8 	.word	0x20000cb8
 8010f6c:	200008d0 	.word	0x200008d0
 8010f70:	20000cf8 	.word	0x20000cf8
 8010f74:	0801f874 	.word	0x0801f874

08010f78 <PrepareFrame>:

static LoRaMacStatus_t PrepareFrame( LoRaMacHeader_t* macHdr, LoRaMacFrameCtrl_t* fCtrl, uint8_t fPort, void* fBuffer, uint16_t fBufferSize )
{
 8010f78:	b580      	push	{r7, lr}
 8010f7a:	b088      	sub	sp, #32
 8010f7c:	af00      	add	r7, sp, #0
 8010f7e:	60f8      	str	r0, [r7, #12]
 8010f80:	60b9      	str	r1, [r7, #8]
 8010f82:	603b      	str	r3, [r7, #0]
 8010f84:	4613      	mov	r3, r2
 8010f86:	71fb      	strb	r3, [r7, #7]
    MacCtx.PktBufferLen = 0;
 8010f88:	4b81      	ldr	r3, [pc, #516]	@ (8011190 <PrepareFrame+0x218>)
 8010f8a:	2200      	movs	r2, #0
 8010f8c:	801a      	strh	r2, [r3, #0]
    MacCtx.NodeAckRequested = false;
 8010f8e:	4b80      	ldr	r3, [pc, #512]	@ (8011190 <PrepareFrame+0x218>)
 8010f90:	2200      	movs	r2, #0
 8010f92:	f883 241e 	strb.w	r2, [r3, #1054]	@ 0x41e
    uint32_t fCntUp = 0;
 8010f96:	2300      	movs	r3, #0
 8010f98:	61bb      	str	r3, [r7, #24]
    size_t macCmdsSize = 0;
 8010f9a:	2300      	movs	r3, #0
 8010f9c:	617b      	str	r3, [r7, #20]
    uint8_t availableSize = 0;
 8010f9e:	2300      	movs	r3, #0
 8010fa0:	77fb      	strb	r3, [r7, #31]

    if( fBuffer == NULL )
 8010fa2:	683b      	ldr	r3, [r7, #0]
 8010fa4:	2b00      	cmp	r3, #0
 8010fa6:	d101      	bne.n	8010fac <PrepareFrame+0x34>
    {
        fBufferSize = 0;
 8010fa8:	2300      	movs	r3, #0
 8010faa:	853b      	strh	r3, [r7, #40]	@ 0x28
    }

    memcpy1( MacCtx.AppData, ( uint8_t* ) fBuffer, fBufferSize );
 8010fac:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8010fae:	461a      	mov	r2, r3
 8010fb0:	6839      	ldr	r1, [r7, #0]
 8010fb2:	4878      	ldr	r0, [pc, #480]	@ (8011194 <PrepareFrame+0x21c>)
 8010fb4:	f006 fa43 	bl	801743e <memcpy1>
    MacCtx.AppDataSize = fBufferSize;
 8010fb8:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8010fba:	b2da      	uxtb	r2, r3
 8010fbc:	4b74      	ldr	r3, [pc, #464]	@ (8011190 <PrepareFrame+0x218>)
 8010fbe:	f883 2237 	strb.w	r2, [r3, #567]	@ 0x237
    MacCtx.PktBuffer[0] = macHdr->Value;
 8010fc2:	68fb      	ldr	r3, [r7, #12]
 8010fc4:	781a      	ldrb	r2, [r3, #0]
 8010fc6:	4b72      	ldr	r3, [pc, #456]	@ (8011190 <PrepareFrame+0x218>)
 8010fc8:	709a      	strb	r2, [r3, #2]

    switch( macHdr->Bits.MType )
 8010fca:	68fb      	ldr	r3, [r7, #12]
 8010fcc:	781b      	ldrb	r3, [r3, #0]
 8010fce:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8010fd2:	b2db      	uxtb	r3, r3
 8010fd4:	2b07      	cmp	r3, #7
 8010fd6:	f000 80b9 	beq.w	801114c <PrepareFrame+0x1d4>
 8010fda:	2b07      	cmp	r3, #7
 8010fdc:	f300 80ce 	bgt.w	801117c <PrepareFrame+0x204>
 8010fe0:	2b02      	cmp	r3, #2
 8010fe2:	d006      	beq.n	8010ff2 <PrepareFrame+0x7a>
 8010fe4:	2b04      	cmp	r3, #4
 8010fe6:	f040 80c9 	bne.w	801117c <PrepareFrame+0x204>
    {
        case FRAME_TYPE_DATA_CONFIRMED_UP:
            MacCtx.NodeAckRequested = true;
 8010fea:	4b69      	ldr	r3, [pc, #420]	@ (8011190 <PrepareFrame+0x218>)
 8010fec:	2201      	movs	r2, #1
 8010fee:	f883 241e 	strb.w	r2, [r3, #1054]	@ 0x41e
            // Intentional fall through
        case FRAME_TYPE_DATA_UNCONFIRMED_UP:
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_DATA;
 8010ff2:	4b67      	ldr	r3, [pc, #412]	@ (8011190 <PrepareFrame+0x218>)
 8010ff4:	2204      	movs	r2, #4
 8010ff6:	f883 2104 	strb.w	r2, [r3, #260]	@ 0x104
            MacCtx.TxMsg.Message.Data.Buffer = MacCtx.PktBuffer;
 8010ffa:	4b65      	ldr	r3, [pc, #404]	@ (8011190 <PrepareFrame+0x218>)
 8010ffc:	4a66      	ldr	r2, [pc, #408]	@ (8011198 <PrepareFrame+0x220>)
 8010ffe:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
            MacCtx.TxMsg.Message.Data.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 8011002:	4b63      	ldr	r3, [pc, #396]	@ (8011190 <PrepareFrame+0x218>)
 8011004:	22ff      	movs	r2, #255	@ 0xff
 8011006:	f883 210c 	strb.w	r2, [r3, #268]	@ 0x10c
            MacCtx.TxMsg.Message.Data.MHDR.Value = macHdr->Value;
 801100a:	68fb      	ldr	r3, [r7, #12]
 801100c:	781a      	ldrb	r2, [r3, #0]
 801100e:	4b60      	ldr	r3, [pc, #384]	@ (8011190 <PrepareFrame+0x218>)
 8011010:	f883 210d 	strb.w	r2, [r3, #269]	@ 0x10d
            MacCtx.TxMsg.Message.Data.FPort = fPort;
 8011014:	4a5e      	ldr	r2, [pc, #376]	@ (8011190 <PrepareFrame+0x218>)
 8011016:	79fb      	ldrb	r3, [r7, #7]
 8011018:	f882 3128 	strb.w	r3, [r2, #296]	@ 0x128
            MacCtx.TxMsg.Message.Data.FHDR.DevAddr = Nvm.MacGroup2.DevAddr;
 801101c:	4b5f      	ldr	r3, [pc, #380]	@ (801119c <PrepareFrame+0x224>)
 801101e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8011022:	4a5b      	ldr	r2, [pc, #364]	@ (8011190 <PrepareFrame+0x218>)
 8011024:	f8c2 3110 	str.w	r3, [r2, #272]	@ 0x110
            MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 8011028:	68bb      	ldr	r3, [r7, #8]
 801102a:	781a      	ldrb	r2, [r3, #0]
 801102c:	4b58      	ldr	r3, [pc, #352]	@ (8011190 <PrepareFrame+0x218>)
 801102e:	f883 2114 	strb.w	r2, [r3, #276]	@ 0x114
            MacCtx.TxMsg.Message.Data.FRMPayloadSize = MacCtx.AppDataSize;
 8011032:	4b57      	ldr	r3, [pc, #348]	@ (8011190 <PrepareFrame+0x218>)
 8011034:	f893 2237 	ldrb.w	r2, [r3, #567]	@ 0x237
 8011038:	4b55      	ldr	r3, [pc, #340]	@ (8011190 <PrepareFrame+0x218>)
 801103a:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
            MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.AppData;
 801103e:	4b54      	ldr	r3, [pc, #336]	@ (8011190 <PrepareFrame+0x218>)
 8011040:	4a54      	ldr	r2, [pc, #336]	@ (8011194 <PrepareFrame+0x21c>)
 8011042:	f8c3 212c 	str.w	r2, [r3, #300]	@ 0x12c

            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 8011046:	f107 0318 	add.w	r3, r7, #24
 801104a:	4618      	mov	r0, r3
 801104c:	f003 f8e6 	bl	801421c <LoRaMacCryptoGetFCntUp>
 8011050:	4603      	mov	r3, r0
 8011052:	2b00      	cmp	r3, #0
 8011054:	d001      	beq.n	801105a <PrepareFrame+0xe2>
            {
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 8011056:	2312      	movs	r3, #18
 8011058:	e096      	b.n	8011188 <PrepareFrame+0x210>
            }
            MacCtx.TxMsg.Message.Data.FHDR.FCnt = ( uint16_t )fCntUp;
 801105a:	69bb      	ldr	r3, [r7, #24]
 801105c:	b29a      	uxth	r2, r3
 801105e:	4b4c      	ldr	r3, [pc, #304]	@ (8011190 <PrepareFrame+0x218>)
 8011060:	f8a3 2116 	strh.w	r2, [r3, #278]	@ 0x116

            // Reset confirm parameters
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            MacCtx.McpsConfirm.NbRetries = 0;
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
            MacCtx.McpsConfirm.NbTrans = 0;
 8011064:	4b4a      	ldr	r3, [pc, #296]	@ (8011190 <PrepareFrame+0x218>)
 8011066:	2200      	movs	r2, #0
 8011068:	f883 2449 	strb.w	r2, [r3, #1097]	@ 0x449
#endif /* LORAMAC_VERSION */
            MacCtx.McpsConfirm.AckReceived = false;
 801106c:	4b48      	ldr	r3, [pc, #288]	@ (8011190 <PrepareFrame+0x218>)
 801106e:	2200      	movs	r2, #0
 8011070:	f883 2448 	strb.w	r2, [r3, #1096]	@ 0x448
            MacCtx.McpsConfirm.UpLinkCounter = fCntUp;
 8011074:	69bb      	ldr	r3, [r7, #24]
 8011076:	4a46      	ldr	r2, [pc, #280]	@ (8011190 <PrepareFrame+0x218>)
 8011078:	f8c2 3450 	str.w	r3, [r2, #1104]	@ 0x450

            // Handle the MAC commands if there are any available
            if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 801107c:	f107 0314 	add.w	r3, r7, #20
 8011080:	4618      	mov	r0, r3
 8011082:	f002 fa83 	bl	801358c <LoRaMacCommandsGetSizeSerializedCmds>
 8011086:	4603      	mov	r3, r0
 8011088:	2b00      	cmp	r3, #0
 801108a:	d001      	beq.n	8011090 <PrepareFrame+0x118>
            {
                return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 801108c:	2313      	movs	r3, #19
 801108e:	e07b      	b.n	8011188 <PrepareFrame+0x210>
            }

            if( macCmdsSize > 0 )
 8011090:	697b      	ldr	r3, [r7, #20]
 8011092:	2b00      	cmp	r3, #0
 8011094:	d074      	beq.n	8011180 <PrepareFrame+0x208>
            {
                availableSize = GetMaxAppPayloadWithoutFOptsLength( Nvm.MacGroup1.ChannelsDatarate );
 8011096:	4b41      	ldr	r3, [pc, #260]	@ (801119c <PrepareFrame+0x224>)
 8011098:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 801109c:	4618      	mov	r0, r3
 801109e:	f7fe fd4d 	bl	800fb3c <GetMaxAppPayloadWithoutFOptsLength>
 80110a2:	4603      	mov	r3, r0
 80110a4:	77fb      	strb	r3, [r7, #31]

                // There is application payload available and the MAC commands fit into FOpts field.
                if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize <= LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 80110a6:	4b3a      	ldr	r3, [pc, #232]	@ (8011190 <PrepareFrame+0x218>)
 80110a8:	f893 3237 	ldrb.w	r3, [r3, #567]	@ 0x237
 80110ac:	2b00      	cmp	r3, #0
 80110ae:	d01d      	beq.n	80110ec <PrepareFrame+0x174>
 80110b0:	697b      	ldr	r3, [r7, #20]
 80110b2:	2b0f      	cmp	r3, #15
 80110b4:	d81a      	bhi.n	80110ec <PrepareFrame+0x174>
                {
                    if( LoRaMacCommandsSerializeCmds( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH, &macCmdsSize, MacCtx.TxMsg.Message.Data.FHDR.FOpts ) != LORAMAC_COMMANDS_SUCCESS )
 80110b6:	f107 0314 	add.w	r3, r7, #20
 80110ba:	4a39      	ldr	r2, [pc, #228]	@ (80111a0 <PrepareFrame+0x228>)
 80110bc:	4619      	mov	r1, r3
 80110be:	200f      	movs	r0, #15
 80110c0:	f002 fa7a 	bl	80135b8 <LoRaMacCommandsSerializeCmds>
 80110c4:	4603      	mov	r3, r0
 80110c6:	2b00      	cmp	r3, #0
 80110c8:	d001      	beq.n	80110ce <PrepareFrame+0x156>
                    {
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80110ca:	2313      	movs	r3, #19
 80110cc:	e05c      	b.n	8011188 <PrepareFrame+0x210>
                    }
                    fCtrl->Bits.FOptsLen = macCmdsSize;
 80110ce:	697b      	ldr	r3, [r7, #20]
 80110d0:	f003 030f 	and.w	r3, r3, #15
 80110d4:	b2d9      	uxtb	r1, r3
 80110d6:	68ba      	ldr	r2, [r7, #8]
 80110d8:	7813      	ldrb	r3, [r2, #0]
 80110da:	f361 0303 	bfi	r3, r1, #0, #4
 80110de:	7013      	strb	r3, [r2, #0]
                    // Update FCtrl field with new value of FOptionsLength
                    MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 80110e0:	68bb      	ldr	r3, [r7, #8]
 80110e2:	781a      	ldrb	r2, [r3, #0]
 80110e4:	4b2a      	ldr	r3, [pc, #168]	@ (8011190 <PrepareFrame+0x218>)
 80110e6:	f883 2114 	strb.w	r2, [r3, #276]	@ 0x114
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
                }
            }

            break;
 80110ea:	e049      	b.n	8011180 <PrepareFrame+0x208>
                else if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize > LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 80110ec:	4b28      	ldr	r3, [pc, #160]	@ (8011190 <PrepareFrame+0x218>)
 80110ee:	f893 3237 	ldrb.w	r3, [r3, #567]	@ 0x237
 80110f2:	2b00      	cmp	r3, #0
 80110f4:	d010      	beq.n	8011118 <PrepareFrame+0x1a0>
 80110f6:	697b      	ldr	r3, [r7, #20]
 80110f8:	2b0f      	cmp	r3, #15
 80110fa:	d90d      	bls.n	8011118 <PrepareFrame+0x1a0>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 80110fc:	7ffb      	ldrb	r3, [r7, #31]
 80110fe:	f107 0114 	add.w	r1, r7, #20
 8011102:	4a28      	ldr	r2, [pc, #160]	@ (80111a4 <PrepareFrame+0x22c>)
 8011104:	4618      	mov	r0, r3
 8011106:	f002 fa57 	bl	80135b8 <LoRaMacCommandsSerializeCmds>
 801110a:	4603      	mov	r3, r0
 801110c:	2b00      	cmp	r3, #0
 801110e:	d001      	beq.n	8011114 <PrepareFrame+0x19c>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8011110:	2313      	movs	r3, #19
 8011112:	e039      	b.n	8011188 <PrepareFrame+0x210>
                    return LORAMAC_STATUS_SKIPPED_APP_DATA;
 8011114:	230a      	movs	r3, #10
 8011116:	e037      	b.n	8011188 <PrepareFrame+0x210>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 8011118:	7ffb      	ldrb	r3, [r7, #31]
 801111a:	f107 0114 	add.w	r1, r7, #20
 801111e:	4a21      	ldr	r2, [pc, #132]	@ (80111a4 <PrepareFrame+0x22c>)
 8011120:	4618      	mov	r0, r3
 8011122:	f002 fa49 	bl	80135b8 <LoRaMacCommandsSerializeCmds>
 8011126:	4603      	mov	r3, r0
 8011128:	2b00      	cmp	r3, #0
 801112a:	d001      	beq.n	8011130 <PrepareFrame+0x1b8>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 801112c:	2313      	movs	r3, #19
 801112e:	e02b      	b.n	8011188 <PrepareFrame+0x210>
                    MacCtx.TxMsg.Message.Data.FPort = 0;
 8011130:	4b17      	ldr	r3, [pc, #92]	@ (8011190 <PrepareFrame+0x218>)
 8011132:	2200      	movs	r2, #0
 8011134:	f883 2128 	strb.w	r2, [r3, #296]	@ 0x128
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
 8011138:	4b15      	ldr	r3, [pc, #84]	@ (8011190 <PrepareFrame+0x218>)
 801113a:	4a1a      	ldr	r2, [pc, #104]	@ (80111a4 <PrepareFrame+0x22c>)
 801113c:	f8c3 212c 	str.w	r2, [r3, #300]	@ 0x12c
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
 8011140:	697b      	ldr	r3, [r7, #20]
 8011142:	b2da      	uxtb	r2, r3
 8011144:	4b12      	ldr	r3, [pc, #72]	@ (8011190 <PrepareFrame+0x218>)
 8011146:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
            break;
 801114a:	e019      	b.n	8011180 <PrepareFrame+0x208>
        case FRAME_TYPE_PROPRIETARY:
            if( ( fBuffer != NULL ) && ( MacCtx.AppDataSize > 0 ) )
 801114c:	683b      	ldr	r3, [r7, #0]
 801114e:	2b00      	cmp	r3, #0
 8011150:	d018      	beq.n	8011184 <PrepareFrame+0x20c>
 8011152:	4b0f      	ldr	r3, [pc, #60]	@ (8011190 <PrepareFrame+0x218>)
 8011154:	f893 3237 	ldrb.w	r3, [r3, #567]	@ 0x237
 8011158:	2b00      	cmp	r3, #0
 801115a:	d013      	beq.n	8011184 <PrepareFrame+0x20c>
            {
                memcpy1( MacCtx.PktBuffer + LORAMAC_MHDR_FIELD_SIZE, ( uint8_t* ) fBuffer, MacCtx.AppDataSize );
 801115c:	4812      	ldr	r0, [pc, #72]	@ (80111a8 <PrepareFrame+0x230>)
 801115e:	4b0c      	ldr	r3, [pc, #48]	@ (8011190 <PrepareFrame+0x218>)
 8011160:	f893 3237 	ldrb.w	r3, [r3, #567]	@ 0x237
 8011164:	461a      	mov	r2, r3
 8011166:	6839      	ldr	r1, [r7, #0]
 8011168:	f006 f969 	bl	801743e <memcpy1>
                MacCtx.PktBufferLen = LORAMAC_MHDR_FIELD_SIZE + MacCtx.AppDataSize;
 801116c:	4b08      	ldr	r3, [pc, #32]	@ (8011190 <PrepareFrame+0x218>)
 801116e:	f893 3237 	ldrb.w	r3, [r3, #567]	@ 0x237
 8011172:	3301      	adds	r3, #1
 8011174:	b29a      	uxth	r2, r3
 8011176:	4b06      	ldr	r3, [pc, #24]	@ (8011190 <PrepareFrame+0x218>)
 8011178:	801a      	strh	r2, [r3, #0]
            }
            break;
 801117a:	e003      	b.n	8011184 <PrepareFrame+0x20c>
        default:
            return LORAMAC_STATUS_SERVICE_UNKNOWN;
 801117c:	2302      	movs	r3, #2
 801117e:	e003      	b.n	8011188 <PrepareFrame+0x210>
            break;
 8011180:	bf00      	nop
 8011182:	e000      	b.n	8011186 <PrepareFrame+0x20e>
            break;
 8011184:	bf00      	nop
    }

    return LORAMAC_STATUS_OK;
 8011186:	2300      	movs	r3, #0
}
 8011188:	4618      	mov	r0, r3
 801118a:	3720      	adds	r7, #32
 801118c:	46bd      	mov	sp, r7
 801118e:	bd80      	pop	{r7, pc}
 8011190:	200008d0 	.word	0x200008d0
 8011194:	20000a08 	.word	0x20000a08
 8011198:	200008d2 	.word	0x200008d2
 801119c:	20000df0 	.word	0x20000df0
 80111a0:	200009e8 	.word	0x200009e8
 80111a4:	20000d70 	.word	0x20000d70
 80111a8:	200008d3 	.word	0x200008d3

080111ac <SendFrameOnChannel>:

static LoRaMacStatus_t SendFrameOnChannel( uint8_t channel )
{
 80111ac:	b580      	push	{r7, lr}
 80111ae:	b08a      	sub	sp, #40	@ 0x28
 80111b0:	af00      	add	r7, sp, #0
 80111b2:	4603      	mov	r3, r0
 80111b4:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 80111b6:	2303      	movs	r3, #3
 80111b8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    TxConfigParams_t txConfig;
    int8_t txPower = 0;
 80111bc:	2300      	movs	r3, #0
 80111be:	73fb      	strb	r3, [r7, #15]

    txConfig.Channel = channel;
 80111c0:	79fb      	ldrb	r3, [r7, #7]
 80111c2:	743b      	strb	r3, [r7, #16]
    txConfig.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 80111c4:	4b4a      	ldr	r3, [pc, #296]	@ (80112f0 <SendFrameOnChannel+0x144>)
 80111c6:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 80111ca:	747b      	strb	r3, [r7, #17]
    txConfig.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 80111cc:	4b48      	ldr	r3, [pc, #288]	@ (80112f0 <SendFrameOnChannel+0x144>)
 80111ce:	f993 3038 	ldrsb.w	r3, [r3, #56]	@ 0x38
 80111d2:	74bb      	strb	r3, [r7, #18]
    txConfig.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
 80111d4:	4b46      	ldr	r3, [pc, #280]	@ (80112f0 <SendFrameOnChannel+0x144>)
 80111d6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80111d8:	617b      	str	r3, [r7, #20]
    txConfig.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 80111da:	4b45      	ldr	r3, [pc, #276]	@ (80112f0 <SendFrameOnChannel+0x144>)
 80111dc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80111de:	61bb      	str	r3, [r7, #24]
    txConfig.PktLen = MacCtx.PktBufferLen;
 80111e0:	4b44      	ldr	r3, [pc, #272]	@ (80112f4 <SendFrameOnChannel+0x148>)
 80111e2:	881b      	ldrh	r3, [r3, #0]
 80111e4:	83bb      	strh	r3, [r7, #28]
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    txConfig.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 80111e6:	4b42      	ldr	r3, [pc, #264]	@ (80112f0 <SendFrameOnChannel+0x144>)
 80111e8:	f893 311c 	ldrb.w	r3, [r3, #284]	@ 0x11c
 80111ec:	77bb      	strb	r3, [r7, #30]
#endif /* LORAMAC_VERSION */

    RegionTxConfig( Nvm.MacGroup2.Region, &txConfig, &txPower, &MacCtx.TxTimeOnAir );
 80111ee:	4b40      	ldr	r3, [pc, #256]	@ (80112f0 <SendFrameOnChannel+0x144>)
 80111f0:	f893 0040 	ldrb.w	r0, [r3, #64]	@ 0x40
 80111f4:	f107 020f 	add.w	r2, r7, #15
 80111f8:	f107 0110 	add.w	r1, r7, #16
 80111fc:	4b3e      	ldr	r3, [pc, #248]	@ (80112f8 <SendFrameOnChannel+0x14c>)
 80111fe:	f003 ff23 	bl	8015048 <RegionTxConfig>

    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8011202:	4b3c      	ldr	r3, [pc, #240]	@ (80112f4 <SendFrameOnChannel+0x148>)
 8011204:	2201      	movs	r2, #1
 8011206:	f883 2445 	strb.w	r2, [r3, #1093]	@ 0x445
    MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 801120a:	4b39      	ldr	r3, [pc, #228]	@ (80112f0 <SendFrameOnChannel+0x144>)
 801120c:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 8011210:	b2da      	uxtb	r2, r3
 8011212:	4b38      	ldr	r3, [pc, #224]	@ (80112f4 <SendFrameOnChannel+0x148>)
 8011214:	f883 2446 	strb.w	r2, [r3, #1094]	@ 0x446
    MacCtx.McpsConfirm.TxPower = txPower;
 8011218:	f997 200f 	ldrsb.w	r2, [r7, #15]
 801121c:	4b35      	ldr	r3, [pc, #212]	@ (80112f4 <SendFrameOnChannel+0x148>)
 801121e:	f883 2447 	strb.w	r2, [r3, #1095]	@ 0x447
    MacCtx.McpsConfirm.Channel = channel;
 8011222:	79fb      	ldrb	r3, [r7, #7]
 8011224:	4a33      	ldr	r2, [pc, #204]	@ (80112f4 <SendFrameOnChannel+0x148>)
 8011226:	f8c2 3454 	str.w	r3, [r2, #1108]	@ 0x454

    // Store the time on air
    MacCtx.McpsConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 801122a:	4b32      	ldr	r3, [pc, #200]	@ (80112f4 <SendFrameOnChannel+0x148>)
 801122c:	f8d3 3420 	ldr.w	r3, [r3, #1056]	@ 0x420
 8011230:	4a30      	ldr	r2, [pc, #192]	@ (80112f4 <SendFrameOnChannel+0x148>)
 8011232:	f8c2 344c 	str.w	r3, [r2, #1100]	@ 0x44c
    MacCtx.MlmeConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 8011236:	4b2f      	ldr	r3, [pc, #188]	@ (80112f4 <SendFrameOnChannel+0x148>)
 8011238:	f8d3 3420 	ldr.w	r3, [r3, #1056]	@ 0x420
 801123c:	4a2d      	ldr	r2, [pc, #180]	@ (80112f4 <SendFrameOnChannel+0x148>)
 801123e:	f8c2 345c 	str.w	r3, [r2, #1116]	@ 0x45c

    if( LoRaMacClassBIsBeaconModeActive( ) == true )
 8011242:	f001 ff34 	bl	80130ae <LoRaMacClassBIsBeaconModeActive>
 8011246:	4603      	mov	r3, r0
 8011248:	2b00      	cmp	r3, #0
 801124a:	d00b      	beq.n	8011264 <SendFrameOnChannel+0xb8>
    {
        // Currently, the Time-On-Air can only be computed when the radio is configured with
        // the TX configuration
        TimerTime_t collisionTime = LoRaMacClassBIsUplinkCollision( MacCtx.TxTimeOnAir );
 801124c:	4b29      	ldr	r3, [pc, #164]	@ (80112f4 <SendFrameOnChannel+0x148>)
 801124e:	f8d3 3420 	ldr.w	r3, [r3, #1056]	@ 0x420
 8011252:	4618      	mov	r0, r3
 8011254:	f001 ff96 	bl	8013184 <LoRaMacClassBIsUplinkCollision>
 8011258:	6238      	str	r0, [r7, #32]

        if( collisionTime > 0 )
 801125a:	6a3b      	ldr	r3, [r7, #32]
 801125c:	2b00      	cmp	r3, #0
 801125e:	d001      	beq.n	8011264 <SendFrameOnChannel+0xb8>
        {
            return LORAMAC_STATUS_BUSY_UPLINK_COLLISION;
 8011260:	2310      	movs	r3, #16
 8011262:	e040      	b.n	80112e6 <SendFrameOnChannel+0x13a>
        }
    }

    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8011264:	4b22      	ldr	r3, [pc, #136]	@ (80112f0 <SendFrameOnChannel+0x144>)
 8011266:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 801126a:	2b01      	cmp	r3, #1
 801126c:	d101      	bne.n	8011272 <SendFrameOnChannel+0xc6>
    {
        // Stop slots for class b
        LoRaMacClassBStopRxSlots( );
 801126e:	f001 ff93 	bl	8013198 <LoRaMacClassBStopRxSlots>
    }

    LoRaMacClassBHaltBeaconing( );
 8011272:	f001 ff2d 	bl	80130d0 <LoRaMacClassBHaltBeaconing>

    // Secure frame
    status = SecureFrame( Nvm.MacGroup1.ChannelsDatarate, MacCtx.Channel );
 8011276:	4b1e      	ldr	r3, [pc, #120]	@ (80112f0 <SendFrameOnChannel+0x144>)
 8011278:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 801127c:	b2db      	uxtb	r3, r3
 801127e:	4a1d      	ldr	r2, [pc, #116]	@ (80112f4 <SendFrameOnChannel+0x148>)
 8011280:	f892 241f 	ldrb.w	r2, [r2, #1055]	@ 0x41f
 8011284:	4611      	mov	r1, r2
 8011286:	4618      	mov	r0, r3
 8011288:	f7ff fc66 	bl	8010b58 <SecureFrame>
 801128c:	4603      	mov	r3, r0
 801128e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if( status != LORAMAC_STATUS_OK )
 8011292:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011296:	2b00      	cmp	r3, #0
 8011298:	d002      	beq.n	80112a0 <SendFrameOnChannel+0xf4>
    {
        return status;
 801129a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801129e:	e022      	b.n	80112e6 <SendFrameOnChannel+0x13a>
    }

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 80112a0:	4b14      	ldr	r3, [pc, #80]	@ (80112f4 <SendFrameOnChannel+0x148>)
 80112a2:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 80112a6:	f043 0302 	orr.w	r3, r3, #2
 80112aa:	4a12      	ldr	r2, [pc, #72]	@ (80112f4 <SendFrameOnChannel+0x148>)
 80112ac:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
    if( MacCtx.NodeAckRequested == false )
    {
        MacCtx.ChannelsNbTransCounter++;
    }
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    MacCtx.ChannelsNbTransCounter++;
 80112b0:	4b10      	ldr	r3, [pc, #64]	@ (80112f4 <SendFrameOnChannel+0x148>)
 80112b2:	f893 341c 	ldrb.w	r3, [r3, #1052]	@ 0x41c
 80112b6:	3301      	adds	r3, #1
 80112b8:	b2da      	uxtb	r2, r3
 80112ba:	4b0e      	ldr	r3, [pc, #56]	@ (80112f4 <SendFrameOnChannel+0x148>)
 80112bc:	f883 241c 	strb.w	r2, [r3, #1052]	@ 0x41c
    MacCtx.McpsConfirm.NbTrans = MacCtx.ChannelsNbTransCounter;
 80112c0:	4b0c      	ldr	r3, [pc, #48]	@ (80112f4 <SendFrameOnChannel+0x148>)
 80112c2:	f893 241c 	ldrb.w	r2, [r3, #1052]	@ 0x41c
 80112c6:	4b0b      	ldr	r3, [pc, #44]	@ (80112f4 <SendFrameOnChannel+0x148>)
 80112c8:	f883 2449 	strb.w	r2, [r3, #1097]	@ 0x449
    MacCtx.ResponseTimeoutStartTime = 0;
 80112cc:	4b09      	ldr	r3, [pc, #36]	@ (80112f4 <SendFrameOnChannel+0x148>)
 80112ce:	2200      	movs	r2, #0
 80112d0:	f8c3 249c 	str.w	r2, [r3, #1180]	@ 0x49c
#endif /* LORAMAC_VERSION */

    // Send now
    Radio.Send( MacCtx.PktBuffer, MacCtx.PktBufferLen );
 80112d4:	4b09      	ldr	r3, [pc, #36]	@ (80112fc <SendFrameOnChannel+0x150>)
 80112d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80112d8:	4a06      	ldr	r2, [pc, #24]	@ (80112f4 <SendFrameOnChannel+0x148>)
 80112da:	8812      	ldrh	r2, [r2, #0]
 80112dc:	b2d2      	uxtb	r2, r2
 80112de:	4611      	mov	r1, r2
 80112e0:	4807      	ldr	r0, [pc, #28]	@ (8011300 <SendFrameOnChannel+0x154>)
 80112e2:	4798      	blx	r3

    return LORAMAC_STATUS_OK;
 80112e4:	2300      	movs	r3, #0
}
 80112e6:	4618      	mov	r0, r3
 80112e8:	3728      	adds	r7, #40	@ 0x28
 80112ea:	46bd      	mov	sp, r7
 80112ec:	bd80      	pop	{r7, pc}
 80112ee:	bf00      	nop
 80112f0:	20000df0 	.word	0x20000df0
 80112f4:	200008d0 	.word	0x200008d0
 80112f8:	20000cf0 	.word	0x20000cf0
 80112fc:	0801f874 	.word	0x0801f874
 8011300:	200008d2 	.word	0x200008d2

08011304 <SetTxContinuousWave>:

    return LORAMAC_STATUS_OK;
}
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
static LoRaMacStatus_t SetTxContinuousWave( uint16_t timeout, uint32_t frequency, uint8_t power )
{
 8011304:	b580      	push	{r7, lr}
 8011306:	b082      	sub	sp, #8
 8011308:	af00      	add	r7, sp, #0
 801130a:	4603      	mov	r3, r0
 801130c:	6039      	str	r1, [r7, #0]
 801130e:	80fb      	strh	r3, [r7, #6]
 8011310:	4613      	mov	r3, r2
 8011312:	717b      	strb	r3, [r7, #5]
    Radio.SetTxContinuousWave( frequency, power, timeout );
 8011314:	4b09      	ldr	r3, [pc, #36]	@ (801133c <SetTxContinuousWave+0x38>)
 8011316:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011318:	f997 1005 	ldrsb.w	r1, [r7, #5]
 801131c:	88fa      	ldrh	r2, [r7, #6]
 801131e:	6838      	ldr	r0, [r7, #0]
 8011320:	4798      	blx	r3

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8011322:	4b07      	ldr	r3, [pc, #28]	@ (8011340 <SetTxContinuousWave+0x3c>)
 8011324:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 8011328:	f043 0302 	orr.w	r3, r3, #2
 801132c:	4a04      	ldr	r2, [pc, #16]	@ (8011340 <SetTxContinuousWave+0x3c>)
 801132e:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340

    return LORAMAC_STATUS_OK;
 8011332:	2300      	movs	r3, #0
}
 8011334:	4618      	mov	r0, r3
 8011336:	3708      	adds	r7, #8
 8011338:	46bd      	mov	sp, r7
 801133a:	bd80      	pop	{r7, pc}
 801133c:	0801f874 	.word	0x0801f874
 8011340:	200008d0 	.word	0x200008d0

08011344 <RestoreNvmData>:
#endif /* LORAMAC_VERSION */

static LoRaMacStatus_t RestoreNvmData( void )
{
 8011344:	b580      	push	{r7, lr}
 8011346:	b082      	sub	sp, #8
 8011348:	af00      	add	r7, sp, #0
    uint32_t crc = 0;
 801134a:	2300      	movs	r3, #0
 801134c:	607b      	str	r3, [r7, #4]

    // Status and parameter validation
    if( MacCtx.MacState != LORAMAC_STOPPED )
 801134e:	4b3e      	ldr	r3, [pc, #248]	@ (8011448 <RestoreNvmData+0x104>)
 8011350:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 8011354:	2b01      	cmp	r3, #1
 8011356:	d001      	beq.n	801135c <RestoreNvmData+0x18>
    {
        return LORAMAC_STATUS_BUSY;
 8011358:	2301      	movs	r3, #1
 801135a:	e071      	b.n	8011440 <RestoreNvmData+0xfc>
    }

    // Crypto
    crc = Crc32( ( uint8_t* ) &(NvmBackup.Crypto), sizeof( NvmBackup.Crypto ) -
 801135c:	2124      	movs	r1, #36	@ 0x24
 801135e:	483b      	ldr	r0, [pc, #236]	@ (801144c <RestoreNvmData+0x108>)
 8011360:	f006 f8c2 	bl	80174e8 <Crc32>
 8011364:	6078      	str	r0, [r7, #4]
                                            sizeof( NvmBackup.Crypto.Crc32 ) );
    if( crc != NvmBackup.Crypto.Crc32 )
 8011366:	4b39      	ldr	r3, [pc, #228]	@ (801144c <RestoreNvmData+0x108>)
 8011368:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801136a:	687a      	ldr	r2, [r7, #4]
 801136c:	429a      	cmp	r2, r3
 801136e:	d001      	beq.n	8011374 <RestoreNvmData+0x30>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8011370:	2317      	movs	r3, #23
 8011372:	e065      	b.n	8011440 <RestoreNvmData+0xfc>
    }

    // MacGroup1
    crc = Crc32( ( uint8_t* ) &(NvmBackup.MacGroup1), sizeof( NvmBackup.MacGroup1 ) -
 8011374:	2114      	movs	r1, #20
 8011376:	4836      	ldr	r0, [pc, #216]	@ (8011450 <RestoreNvmData+0x10c>)
 8011378:	f006 f8b6 	bl	80174e8 <Crc32>
 801137c:	6078      	str	r0, [r7, #4]
                                               sizeof( NvmBackup.MacGroup1.Crc32 ) );
    if( crc != NvmBackup.MacGroup1.Crc32 )
 801137e:	4b33      	ldr	r3, [pc, #204]	@ (801144c <RestoreNvmData+0x108>)
 8011380:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011382:	687a      	ldr	r2, [r7, #4]
 8011384:	429a      	cmp	r2, r3
 8011386:	d001      	beq.n	801138c <RestoreNvmData+0x48>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8011388:	2317      	movs	r3, #23
 801138a:	e059      	b.n	8011440 <RestoreNvmData+0xfc>
    }

    // MacGroup2
    crc = Crc32( ( uint8_t* ) &(NvmBackup.MacGroup2), sizeof( NvmBackup.MacGroup2 ) -
 801138c:	21e0      	movs	r1, #224	@ 0xe0
 801138e:	4831      	ldr	r0, [pc, #196]	@ (8011454 <RestoreNvmData+0x110>)
 8011390:	f006 f8aa 	bl	80174e8 <Crc32>
 8011394:	6078      	str	r0, [r7, #4]
                                               sizeof( NvmBackup.MacGroup2.Crc32 ) );
    if( crc != NvmBackup.MacGroup2.Crc32 )
 8011396:	4b2d      	ldr	r3, [pc, #180]	@ (801144c <RestoreNvmData+0x108>)
 8011398:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 801139c:	687a      	ldr	r2, [r7, #4]
 801139e:	429a      	cmp	r2, r3
 80113a0:	d001      	beq.n	80113a6 <RestoreNvmData+0x62>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 80113a2:	2317      	movs	r3, #23
 80113a4:	e04c      	b.n	8011440 <RestoreNvmData+0xfc>
    }

    // Secure Element
    crc = Crc32( ( uint8_t* ) &(NvmBackup.SecureElement), sizeof( NvmBackup.SecureElement ) -
 80113a6:	21bc      	movs	r1, #188	@ 0xbc
 80113a8:	482b      	ldr	r0, [pc, #172]	@ (8011458 <RestoreNvmData+0x114>)
 80113aa:	f006 f89d 	bl	80174e8 <Crc32>
 80113ae:	6078      	str	r0, [r7, #4]
                                                   sizeof( NvmBackup.SecureElement.Crc32 ) );
    if( crc != NvmBackup.SecureElement.Crc32 )
 80113b0:	4b26      	ldr	r3, [pc, #152]	@ (801144c <RestoreNvmData+0x108>)
 80113b2:	f8d3 31e0 	ldr.w	r3, [r3, #480]	@ 0x1e0
 80113b6:	687a      	ldr	r2, [r7, #4]
 80113b8:	429a      	cmp	r2, r3
 80113ba:	d001      	beq.n	80113c0 <RestoreNvmData+0x7c>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 80113bc:	2317      	movs	r3, #23
 80113be:	e03f      	b.n	8011440 <RestoreNvmData+0xfc>
    }

    // Region
    crc = Crc32( ( uint8_t* ) &(NvmBackup.RegionGroup1), sizeof( NvmBackup.RegionGroup1 ) -
 80113c0:	2100      	movs	r1, #0
 80113c2:	4826      	ldr	r0, [pc, #152]	@ (801145c <RestoreNvmData+0x118>)
 80113c4:	f006 f890 	bl	80174e8 <Crc32>
 80113c8:	6078      	str	r0, [r7, #4]
                                            sizeof( NvmBackup.RegionGroup1.Crc32 ) );
    if( crc != NvmBackup.RegionGroup1.Crc32 )
 80113ca:	4b20      	ldr	r3, [pc, #128]	@ (801144c <RestoreNvmData+0x108>)
 80113cc:	f8d3 31e4 	ldr.w	r3, [r3, #484]	@ 0x1e4
 80113d0:	687a      	ldr	r2, [r7, #4]
 80113d2:	429a      	cmp	r2, r3
 80113d4:	d001      	beq.n	80113da <RestoreNvmData+0x96>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 80113d6:	2317      	movs	r3, #23
 80113d8:	e032      	b.n	8011440 <RestoreNvmData+0xfc>
    }

    crc = Crc32( ( uint8_t* ) &(NvmBackup.ClassB), sizeof( NvmBackup.ClassB ) -
 80113da:	2114      	movs	r1, #20
 80113dc:	4820      	ldr	r0, [pc, #128]	@ (8011460 <RestoreNvmData+0x11c>)
 80113de:	f006 f883 	bl	80174e8 <Crc32>
 80113e2:	6078      	str	r0, [r7, #4]
                                            sizeof( NvmBackup.ClassB.Crc32 ) );
    if( crc != NvmBackup.ClassB.Crc32 )
 80113e4:	4b19      	ldr	r3, [pc, #100]	@ (801144c <RestoreNvmData+0x108>)
 80113e6:	f8d3 3578 	ldr.w	r3, [r3, #1400]	@ 0x578
 80113ea:	687a      	ldr	r2, [r7, #4]
 80113ec:	429a      	cmp	r2, r3
 80113ee:	d001      	beq.n	80113f4 <RestoreNvmData+0xb0>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 80113f0:	2317      	movs	r3, #23
 80113f2:	e025      	b.n	8011440 <RestoreNvmData+0xfc>
    }

    memcpy1( ( uint8_t* ) &Nvm, ( uint8_t* ) &NvmBackup, sizeof( LoRaMacNvmData_t ) );
 80113f4:	f240 527c 	movw	r2, #1404	@ 0x57c
 80113f8:	4914      	ldr	r1, [pc, #80]	@ (801144c <RestoreNvmData+0x108>)
 80113fa:	481a      	ldr	r0, [pc, #104]	@ (8011464 <RestoreNvmData+0x120>)
 80113fc:	f006 f81f 	bl	801743e <memcpy1>
    memset1( ( uint8_t* ) &NvmBackup, 0, sizeof( LoRaMacNvmData_t ) );
 8011400:	f240 527c 	movw	r2, #1404	@ 0x57c
 8011404:	2100      	movs	r1, #0
 8011406:	4811      	ldr	r0, [pc, #68]	@ (801144c <RestoreNvmData+0x108>)
 8011408:	f006 f854 	bl	80174b4 <memset1>

    // Initialize RxC config parameters.
    MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 801140c:	4b0e      	ldr	r3, [pc, #56]	@ (8011448 <RestoreNvmData+0x104>)
 801140e:	f893 241f 	ldrb.w	r2, [r3, #1055]	@ 0x41f
 8011412:	4b0d      	ldr	r3, [pc, #52]	@ (8011448 <RestoreNvmData+0x104>)
 8011414:	f883 23e8 	strb.w	r2, [r3, #1000]	@ 0x3e8
    MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 8011418:	4b12      	ldr	r3, [pc, #72]	@ (8011464 <RestoreNvmData+0x120>)
 801141a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801141c:	4a0a      	ldr	r2, [pc, #40]	@ (8011448 <RestoreNvmData+0x104>)
 801141e:	f8c2 33ec 	str.w	r3, [r2, #1004]	@ 0x3ec
    MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8011422:	4b10      	ldr	r3, [pc, #64]	@ (8011464 <RestoreNvmData+0x120>)
 8011424:	f893 2075 	ldrb.w	r2, [r3, #117]	@ 0x75
 8011428:	4b07      	ldr	r3, [pc, #28]	@ (8011448 <RestoreNvmData+0x104>)
 801142a:	f883 23f8 	strb.w	r2, [r3, #1016]	@ 0x3f8
    MacCtx.RxWindowCConfig.RxContinuous = true;
 801142e:	4b06      	ldr	r3, [pc, #24]	@ (8011448 <RestoreNvmData+0x104>)
 8011430:	2201      	movs	r2, #1
 8011432:	f883 23fa 	strb.w	r2, [r3, #1018]	@ 0x3fa
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8011436:	4b04      	ldr	r3, [pc, #16]	@ (8011448 <RestoreNvmData+0x104>)
 8011438:	2202      	movs	r2, #2
 801143a:	f883 23fb 	strb.w	r2, [r3, #1019]	@ 0x3fb

    return LORAMAC_STATUS_OK;
 801143e:	2300      	movs	r3, #0
}
 8011440:	4618      	mov	r0, r3
 8011442:	3708      	adds	r7, #8
 8011444:	46bd      	mov	sp, r7
 8011446:	bd80      	pop	{r7, pc}
 8011448:	200008d0 	.word	0x200008d0
 801144c:	2000136c 	.word	0x2000136c
 8011450:	20001394 	.word	0x20001394
 8011454:	200013ac 	.word	0x200013ac
 8011458:	20001490 	.word	0x20001490
 801145c:	20001550 	.word	0x20001550
 8011460:	200018d0 	.word	0x200018d0
 8011464:	20000df0 	.word	0x20000df0

08011468 <DetermineFrameType>:

static LoRaMacStatus_t DetermineFrameType( LoRaMacMessageData_t* macMsg, FType_t* fType )
{
 8011468:	b480      	push	{r7}
 801146a:	b083      	sub	sp, #12
 801146c:	af00      	add	r7, sp, #0
 801146e:	6078      	str	r0, [r7, #4]
 8011470:	6039      	str	r1, [r7, #0]
    if( ( macMsg == NULL ) || ( fType == NULL ) )
 8011472:	687b      	ldr	r3, [r7, #4]
 8011474:	2b00      	cmp	r3, #0
 8011476:	d002      	beq.n	801147e <DetermineFrameType+0x16>
 8011478:	683b      	ldr	r3, [r7, #0]
 801147a:	2b00      	cmp	r3, #0
 801147c:	d101      	bne.n	8011482 <DetermineFrameType+0x1a>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 801147e:	2303      	movs	r3, #3
 8011480:	e03b      	b.n	80114fa <DetermineFrameType+0x92>
     * +-------+  +----------+------+-------+--------------+
     * |   D   |  |    = 0   |   -  |  > 0  |       X      |
     * +-------+  +----------+------+-------+--------------+
     */

    if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen > 0 ) && ( macMsg->FPort > 0 ) )
 8011482:	687b      	ldr	r3, [r7, #4]
 8011484:	7b1b      	ldrb	r3, [r3, #12]
 8011486:	f003 030f 	and.w	r3, r3, #15
 801148a:	b2db      	uxtb	r3, r3
 801148c:	2b00      	cmp	r3, #0
 801148e:	d008      	beq.n	80114a2 <DetermineFrameType+0x3a>
 8011490:	687b      	ldr	r3, [r7, #4]
 8011492:	f893 3020 	ldrb.w	r3, [r3, #32]
 8011496:	2b00      	cmp	r3, #0
 8011498:	d003      	beq.n	80114a2 <DetermineFrameType+0x3a>
    {
        *fType = FRAME_TYPE_A;
 801149a:	683b      	ldr	r3, [r7, #0]
 801149c:	2200      	movs	r2, #0
 801149e:	701a      	strb	r2, [r3, #0]
 80114a0:	e02a      	b.n	80114f8 <DetermineFrameType+0x90>
    }
    else if( macMsg->FRMPayloadSize == 0 )
 80114a2:	687b      	ldr	r3, [r7, #4]
 80114a4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80114a8:	2b00      	cmp	r3, #0
 80114aa:	d103      	bne.n	80114b4 <DetermineFrameType+0x4c>
    {
        *fType = FRAME_TYPE_B;
 80114ac:	683b      	ldr	r3, [r7, #0]
 80114ae:	2201      	movs	r2, #1
 80114b0:	701a      	strb	r2, [r3, #0]
 80114b2:	e021      	b.n	80114f8 <DetermineFrameType+0x90>
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort == 0 ) )
 80114b4:	687b      	ldr	r3, [r7, #4]
 80114b6:	7b1b      	ldrb	r3, [r3, #12]
 80114b8:	f003 030f 	and.w	r3, r3, #15
 80114bc:	b2db      	uxtb	r3, r3
 80114be:	2b00      	cmp	r3, #0
 80114c0:	d108      	bne.n	80114d4 <DetermineFrameType+0x6c>
 80114c2:	687b      	ldr	r3, [r7, #4]
 80114c4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80114c8:	2b00      	cmp	r3, #0
 80114ca:	d103      	bne.n	80114d4 <DetermineFrameType+0x6c>
    {
        *fType = FRAME_TYPE_C;
 80114cc:	683b      	ldr	r3, [r7, #0]
 80114ce:	2202      	movs	r2, #2
 80114d0:	701a      	strb	r2, [r3, #0]
 80114d2:	e011      	b.n	80114f8 <DetermineFrameType+0x90>
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort > 0 ) )
 80114d4:	687b      	ldr	r3, [r7, #4]
 80114d6:	7b1b      	ldrb	r3, [r3, #12]
 80114d8:	f003 030f 	and.w	r3, r3, #15
 80114dc:	b2db      	uxtb	r3, r3
 80114de:	2b00      	cmp	r3, #0
 80114e0:	d108      	bne.n	80114f4 <DetermineFrameType+0x8c>
 80114e2:	687b      	ldr	r3, [r7, #4]
 80114e4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80114e8:	2b00      	cmp	r3, #0
 80114ea:	d003      	beq.n	80114f4 <DetermineFrameType+0x8c>
    {
        *fType = FRAME_TYPE_D;
 80114ec:	683b      	ldr	r3, [r7, #0]
 80114ee:	2203      	movs	r2, #3
 80114f0:	701a      	strb	r2, [r3, #0]
 80114f2:	e001      	b.n	80114f8 <DetermineFrameType+0x90>
    }
    else
    {
        // Should never happen.
        return LORAMAC_STATUS_ERROR;
 80114f4:	2318      	movs	r3, #24
 80114f6:	e000      	b.n	80114fa <DetermineFrameType+0x92>
    }

    return LORAMAC_STATUS_OK;
 80114f8:	2300      	movs	r3, #0
}
 80114fa:	4618      	mov	r0, r3
 80114fc:	370c      	adds	r7, #12
 80114fe:	46bd      	mov	sp, r7
 8011500:	bc80      	pop	{r7}
 8011502:	4770      	bx	lr

08011504 <CheckRetrans>:
    }
    return false;
}
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
static bool CheckRetrans( uint8_t counter, uint8_t limit )
{
 8011504:	b480      	push	{r7}
 8011506:	b083      	sub	sp, #12
 8011508:	af00      	add	r7, sp, #0
 801150a:	4603      	mov	r3, r0
 801150c:	460a      	mov	r2, r1
 801150e:	71fb      	strb	r3, [r7, #7]
 8011510:	4613      	mov	r3, r2
 8011512:	71bb      	strb	r3, [r7, #6]
    if( counter >= limit )
 8011514:	79fa      	ldrb	r2, [r7, #7]
 8011516:	79bb      	ldrb	r3, [r7, #6]
 8011518:	429a      	cmp	r2, r3
 801151a:	d301      	bcc.n	8011520 <CheckRetrans+0x1c>
    {
        return true;
 801151c:	2301      	movs	r3, #1
 801151e:	e000      	b.n	8011522 <CheckRetrans+0x1e>
    }
    return false;
 8011520:	2300      	movs	r3, #0
}
 8011522:	4618      	mov	r0, r3
 8011524:	370c      	adds	r7, #12
 8011526:	46bd      	mov	sp, r7
 8011528:	bc80      	pop	{r7}
 801152a:	4770      	bx	lr

0801152c <CheckRetransUnconfirmedUplink>:

static bool CheckRetransUnconfirmedUplink( void )
{
 801152c:	b580      	push	{r7, lr}
 801152e:	af00      	add	r7, sp, #0
    // Verify, if the max number of retransmissions have been reached
    if( CheckRetrans( MacCtx.ChannelsNbTransCounter,
 8011530:	4b12      	ldr	r3, [pc, #72]	@ (801157c <CheckRetransUnconfirmedUplink+0x50>)
 8011532:	f893 341c 	ldrb.w	r3, [r3, #1052]	@ 0x41c
 8011536:	4a12      	ldr	r2, [pc, #72]	@ (8011580 <CheckRetransUnconfirmedUplink+0x54>)
 8011538:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 801153c:	4611      	mov	r1, r2
 801153e:	4618      	mov	r0, r3
 8011540:	f7ff ffe0 	bl	8011504 <CheckRetrans>
 8011544:	4603      	mov	r3, r0
 8011546:	2b00      	cmp	r3, #0
 8011548:	d001      	beq.n	801154e <CheckRetransUnconfirmedUplink+0x22>
                      Nvm.MacGroup2.MacParams.ChannelsNbTrans ) == true )
    {
        return true;
 801154a:	2301      	movs	r3, #1
 801154c:	e014      	b.n	8011578 <CheckRetransUnconfirmedUplink+0x4c>
    }

    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 801154e:	4b0b      	ldr	r3, [pc, #44]	@ (801157c <CheckRetransUnconfirmedUplink+0x50>)
 8011550:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8011554:	f003 0302 	and.w	r3, r3, #2
 8011558:	b2db      	uxtb	r3, r3
 801155a:	2b00      	cmp	r3, #0
 801155c:	d00b      	beq.n	8011576 <CheckRetransUnconfirmedUplink+0x4a>
    {
        // Stop the retransmissions, if a valid downlink is received
        // a class A RX window. This holds also for class B and C.
        if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 801155e:	4b07      	ldr	r3, [pc, #28]	@ (801157c <CheckRetransUnconfirmedUplink+0x50>)
 8011560:	f893 3493 	ldrb.w	r3, [r3, #1171]	@ 0x493
 8011564:	2b00      	cmp	r3, #0
 8011566:	d004      	beq.n	8011572 <CheckRetransUnconfirmedUplink+0x46>
            ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_2 ) )
 8011568:	4b04      	ldr	r3, [pc, #16]	@ (801157c <CheckRetransUnconfirmedUplink+0x50>)
 801156a:	f893 3493 	ldrb.w	r3, [r3, #1171]	@ 0x493
        if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 801156e:	2b01      	cmp	r3, #1
 8011570:	d101      	bne.n	8011576 <CheckRetransUnconfirmedUplink+0x4a>
        {
            return true;
 8011572:	2301      	movs	r3, #1
 8011574:	e000      	b.n	8011578 <CheckRetransUnconfirmedUplink+0x4c>
        }
    }
    return false;
 8011576:	2300      	movs	r3, #0
}
 8011578:	4618      	mov	r0, r3
 801157a:	bd80      	pop	{r7, pc}
 801157c:	200008d0 	.word	0x200008d0
 8011580:	20000df0 	.word	0x20000df0

08011584 <CheckRetransConfirmedUplink>:

static bool CheckRetransConfirmedUplink( void )
{
 8011584:	b580      	push	{r7, lr}
 8011586:	af00      	add	r7, sp, #0
    // Verify, if the max number of retransmissions have been reached
    if( CheckRetrans( MacCtx.ChannelsNbTransCounter,
 8011588:	4b10      	ldr	r3, [pc, #64]	@ (80115cc <CheckRetransConfirmedUplink+0x48>)
 801158a:	f893 341c 	ldrb.w	r3, [r3, #1052]	@ 0x41c
 801158e:	4a10      	ldr	r2, [pc, #64]	@ (80115d0 <CheckRetransConfirmedUplink+0x4c>)
 8011590:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 8011594:	4611      	mov	r1, r2
 8011596:	4618      	mov	r0, r3
 8011598:	f7ff ffb4 	bl	8011504 <CheckRetrans>
 801159c:	4603      	mov	r3, r0
 801159e:	2b00      	cmp	r3, #0
 80115a0:	d001      	beq.n	80115a6 <CheckRetransConfirmedUplink+0x22>
                      Nvm.MacGroup2.MacParams.ChannelsNbTrans ) == true )
    {
        return true;
 80115a2:	2301      	movs	r3, #1
 80115a4:	e00f      	b.n	80115c6 <CheckRetransConfirmedUplink+0x42>
    }

    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 80115a6:	4b09      	ldr	r3, [pc, #36]	@ (80115cc <CheckRetransConfirmedUplink+0x48>)
 80115a8:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80115ac:	f003 0302 	and.w	r3, r3, #2
 80115b0:	b2db      	uxtb	r3, r3
 80115b2:	2b00      	cmp	r3, #0
 80115b4:	d006      	beq.n	80115c4 <CheckRetransConfirmedUplink+0x40>
    {
        if( MacCtx.McpsConfirm.AckReceived == true )
 80115b6:	4b05      	ldr	r3, [pc, #20]	@ (80115cc <CheckRetransConfirmedUplink+0x48>)
 80115b8:	f893 3448 	ldrb.w	r3, [r3, #1096]	@ 0x448
 80115bc:	2b00      	cmp	r3, #0
 80115be:	d001      	beq.n	80115c4 <CheckRetransConfirmedUplink+0x40>
        {
            return true;
 80115c0:	2301      	movs	r3, #1
 80115c2:	e000      	b.n	80115c6 <CheckRetransConfirmedUplink+0x42>
        }
    }
    return false;
 80115c4:	2300      	movs	r3, #0
}
 80115c6:	4618      	mov	r0, r3
 80115c8:	bd80      	pop	{r7, pc}
 80115ca:	bf00      	nop
 80115cc:	200008d0 	.word	0x200008d0
 80115d0:	20000df0 	.word	0x20000df0

080115d4 <IncreaseAdrAckCounter>:

static uint32_t IncreaseAdrAckCounter( uint32_t counter )
{
 80115d4:	b480      	push	{r7}
 80115d6:	b083      	sub	sp, #12
 80115d8:	af00      	add	r7, sp, #0
 80115da:	6078      	str	r0, [r7, #4]
    if( counter < ADR_ACK_COUNTER_MAX )
 80115dc:	687b      	ldr	r3, [r7, #4]
 80115de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80115e2:	d002      	beq.n	80115ea <IncreaseAdrAckCounter+0x16>
    {
        counter++;
 80115e4:	687b      	ldr	r3, [r7, #4]
 80115e6:	3301      	adds	r3, #1
 80115e8:	607b      	str	r3, [r7, #4]
    }
    return counter;
 80115ea:	687b      	ldr	r3, [r7, #4]
}
 80115ec:	4618      	mov	r0, r3
 80115ee:	370c      	adds	r7, #12
 80115f0:	46bd      	mov	sp, r7
 80115f2:	bc80      	pop	{r7}
 80115f4:	4770      	bx	lr
	...

080115f8 <StopRetransmission>:
#endif /* LORAMAC_VERSION */

static bool StopRetransmission( void )
{
 80115f8:	b580      	push	{r7, lr}
 80115fa:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 80115fc:	4b1a      	ldr	r3, [pc, #104]	@ (8011668 <StopRetransmission+0x70>)
 80115fe:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8011602:	f003 0302 	and.w	r3, r3, #2
 8011606:	b2db      	uxtb	r3, r3
 8011608:	2b00      	cmp	r3, #0
 801160a:	d009      	beq.n	8011620 <StopRetransmission+0x28>
        ( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 801160c:	4b16      	ldr	r3, [pc, #88]	@ (8011668 <StopRetransmission+0x70>)
 801160e:	f893 3493 	ldrb.w	r3, [r3, #1171]	@ 0x493
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 8011612:	2b00      	cmp	r3, #0
 8011614:	d011      	beq.n	801163a <StopRetransmission+0x42>
          ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_2 ) ) )
 8011616:	4b14      	ldr	r3, [pc, #80]	@ (8011668 <StopRetransmission+0x70>)
 8011618:	f893 3493 	ldrb.w	r3, [r3, #1171]	@ 0x493
        ( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 801161c:	2b01      	cmp	r3, #1
 801161e:	d00c      	beq.n	801163a <StopRetransmission+0x42>
    {   // Maximum repetitions without downlink. Increase ADR Ack counter.
        // Only process the case when the MAC did not receive a downlink.
        if( Nvm.MacGroup2.AdrCtrlOn == true )
 8011620:	4b12      	ldr	r3, [pc, #72]	@ (801166c <StopRetransmission+0x74>)
 8011622:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 8011626:	2b00      	cmp	r3, #0
 8011628:	d007      	beq.n	801163a <StopRetransmission+0x42>
        {
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            Nvm.MacGroup1.AdrAckCounter++;
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
            Nvm.MacGroup1.AdrAckCounter = IncreaseAdrAckCounter( Nvm.MacGroup1.AdrAckCounter );
 801162a:	4b10      	ldr	r3, [pc, #64]	@ (801166c <StopRetransmission+0x74>)
 801162c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801162e:	4618      	mov	r0, r3
 8011630:	f7ff ffd0 	bl	80115d4 <IncreaseAdrAckCounter>
 8011634:	4603      	mov	r3, r0
 8011636:	4a0d      	ldr	r2, [pc, #52]	@ (801166c <StopRetransmission+0x74>)
 8011638:	6293      	str	r3, [r2, #40]	@ 0x28
#endif /* LORAMAC_VERSION */
        }
    }

    MacCtx.ChannelsNbTransCounter = 0;
 801163a:	4b0b      	ldr	r3, [pc, #44]	@ (8011668 <StopRetransmission+0x70>)
 801163c:	2200      	movs	r2, #0
 801163e:	f883 241c 	strb.w	r2, [r3, #1052]	@ 0x41c
    MacCtx.NodeAckRequested = false;
 8011642:	4b09      	ldr	r3, [pc, #36]	@ (8011668 <StopRetransmission+0x70>)
 8011644:	2200      	movs	r2, #0
 8011646:	f883 241e 	strb.w	r2, [r3, #1054]	@ 0x41e
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetry = false;
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    MacCtx.RetransmitTimeoutRetry = false;
 801164a:	4b07      	ldr	r3, [pc, #28]	@ (8011668 <StopRetransmission+0x70>)
 801164c:	2200      	movs	r2, #0
 801164e:	f883 241d 	strb.w	r2, [r3, #1053]	@ 0x41d
#endif /* LORAMAC_VERSION */
    MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8011652:	4b05      	ldr	r3, [pc, #20]	@ (8011668 <StopRetransmission+0x70>)
 8011654:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 8011658:	f023 0302 	bic.w	r3, r3, #2
 801165c:	4a02      	ldr	r2, [pc, #8]	@ (8011668 <StopRetransmission+0x70>)
 801165e:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340

    return true;
 8011662:	2301      	movs	r3, #1
}
 8011664:	4618      	mov	r0, r3
 8011666:	bd80      	pop	{r7, pc}
 8011668:	200008d0 	.word	0x200008d0
 801166c:	20000df0 	.word	0x20000df0

08011670 <CallNvmDataChangeCallback>:

static void CallNvmDataChangeCallback( uint16_t notifyFlags )
{
 8011670:	b580      	push	{r7, lr}
 8011672:	b082      	sub	sp, #8
 8011674:	af00      	add	r7, sp, #0
 8011676:	4603      	mov	r3, r0
 8011678:	80fb      	strh	r3, [r7, #6]
    if( ( MacCtx.MacCallbacks != NULL ) &&
 801167a:	4b0b      	ldr	r3, [pc, #44]	@ (80116a8 <CallNvmDataChangeCallback+0x38>)
 801167c:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 8011680:	2b00      	cmp	r3, #0
 8011682:	d00c      	beq.n	801169e <CallNvmDataChangeCallback+0x2e>
        ( MacCtx.MacCallbacks->NvmDataChange  != NULL ) )
 8011684:	4b08      	ldr	r3, [pc, #32]	@ (80116a8 <CallNvmDataChangeCallback+0x38>)
 8011686:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 801168a:	68db      	ldr	r3, [r3, #12]
    if( ( MacCtx.MacCallbacks != NULL ) &&
 801168c:	2b00      	cmp	r3, #0
 801168e:	d006      	beq.n	801169e <CallNvmDataChangeCallback+0x2e>
    {
        MacCtx.MacCallbacks->NvmDataChange ( notifyFlags );
 8011690:	4b05      	ldr	r3, [pc, #20]	@ (80116a8 <CallNvmDataChangeCallback+0x38>)
 8011692:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 8011696:	68db      	ldr	r3, [r3, #12]
 8011698:	88fa      	ldrh	r2, [r7, #6]
 801169a:	4610      	mov	r0, r2
 801169c:	4798      	blx	r3
    }
}
 801169e:	bf00      	nop
 80116a0:	3708      	adds	r7, #8
 80116a2:	46bd      	mov	sp, r7
 80116a4:	bd80      	pop	{r7, pc}
 80116a6:	bf00      	nop
 80116a8:	200008d0 	.word	0x200008d0

080116ac <IsRequestPending>:
    MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
}
#endif /* LORAMAC_VERSION */

static uint8_t IsRequestPending( void )
{
 80116ac:	b480      	push	{r7}
 80116ae:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 80116b0:	4b0b      	ldr	r3, [pc, #44]	@ (80116e0 <IsRequestPending+0x34>)
 80116b2:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80116b6:	f003 0304 	and.w	r3, r3, #4
 80116ba:	b2db      	uxtb	r3, r3
 80116bc:	2b00      	cmp	r3, #0
 80116be:	d107      	bne.n	80116d0 <IsRequestPending+0x24>
        ( MacCtx.MacFlags.Bits.McpsReq == 1 ) )
 80116c0:	4b07      	ldr	r3, [pc, #28]	@ (80116e0 <IsRequestPending+0x34>)
 80116c2:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80116c6:	f003 0301 	and.w	r3, r3, #1
 80116ca:	b2db      	uxtb	r3, r3
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 80116cc:	2b00      	cmp	r3, #0
 80116ce:	d001      	beq.n	80116d4 <IsRequestPending+0x28>
    {
        return 1;
 80116d0:	2301      	movs	r3, #1
 80116d2:	e000      	b.n	80116d6 <IsRequestPending+0x2a>
    }
    return 0;
 80116d4:	2300      	movs	r3, #0
}
 80116d6:	4618      	mov	r0, r3
 80116d8:	46bd      	mov	sp, r7
 80116da:	bc80      	pop	{r7}
 80116dc:	4770      	bx	lr
 80116de:	bf00      	nop
 80116e0:	200008d0 	.word	0x200008d0

080116e4 <LoRaMacInitialization>:

LoRaMacStatus_t LoRaMacInitialization( LoRaMacPrimitives_t* primitives, LoRaMacCallback_t* callbacks, LoRaMacRegion_t region )
{
 80116e4:	b590      	push	{r4, r7, lr}
 80116e6:	b091      	sub	sp, #68	@ 0x44
 80116e8:	af02      	add	r7, sp, #8
 80116ea:	6178      	str	r0, [r7, #20]
 80116ec:	6139      	str	r1, [r7, #16]
 80116ee:	4613      	mov	r3, r2
 80116f0:	73fb      	strb	r3, [r7, #15]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( ( primitives == NULL ) ||
 80116f2:	697b      	ldr	r3, [r7, #20]
 80116f4:	2b00      	cmp	r3, #0
 80116f6:	d002      	beq.n	80116fe <LoRaMacInitialization+0x1a>
 80116f8:	693b      	ldr	r3, [r7, #16]
 80116fa:	2b00      	cmp	r3, #0
 80116fc:	d101      	bne.n	8011702 <LoRaMacInitialization+0x1e>
        ( callbacks == NULL ) )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80116fe:	2303      	movs	r3, #3
 8011700:	e27c      	b.n	8011bfc <LoRaMacInitialization+0x518>
    }

    if( ( primitives->MacMcpsConfirm == NULL ) ||
 8011702:	697b      	ldr	r3, [r7, #20]
 8011704:	681b      	ldr	r3, [r3, #0]
 8011706:	2b00      	cmp	r3, #0
 8011708:	d00b      	beq.n	8011722 <LoRaMacInitialization+0x3e>
        ( primitives->MacMcpsIndication == NULL ) ||
 801170a:	697b      	ldr	r3, [r7, #20]
 801170c:	685b      	ldr	r3, [r3, #4]
    if( ( primitives->MacMcpsConfirm == NULL ) ||
 801170e:	2b00      	cmp	r3, #0
 8011710:	d007      	beq.n	8011722 <LoRaMacInitialization+0x3e>
        ( primitives->MacMlmeConfirm == NULL ) ||
 8011712:	697b      	ldr	r3, [r7, #20]
 8011714:	689b      	ldr	r3, [r3, #8]
        ( primitives->MacMcpsIndication == NULL ) ||
 8011716:	2b00      	cmp	r3, #0
 8011718:	d003      	beq.n	8011722 <LoRaMacInitialization+0x3e>
        ( primitives->MacMlmeIndication == NULL ) )
 801171a:	697b      	ldr	r3, [r7, #20]
 801171c:	68db      	ldr	r3, [r3, #12]
        ( primitives->MacMlmeConfirm == NULL ) ||
 801171e:	2b00      	cmp	r3, #0
 8011720:	d101      	bne.n	8011726 <LoRaMacInitialization+0x42>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8011722:	2303      	movs	r3, #3
 8011724:	e26a      	b.n	8011bfc <LoRaMacInitialization+0x518>
    }
    // Verify if the region is supported
    if( RegionIsActive( region ) == false )
 8011726:	7bfb      	ldrb	r3, [r7, #15]
 8011728:	4618      	mov	r0, r3
 801172a:	f003 fbd7 	bl	8014edc <RegionIsActive>
 801172e:	4603      	mov	r3, r0
 8011730:	f083 0301 	eor.w	r3, r3, #1
 8011734:	b2db      	uxtb	r3, r3
 8011736:	2b00      	cmp	r3, #0
 8011738:	d001      	beq.n	801173e <LoRaMacInitialization+0x5a>
    {
        return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 801173a:	2309      	movs	r3, #9
 801173c:	e25e      	b.n	8011bfc <LoRaMacInitialization+0x518>
    }

    // Confirm queue reset
    LoRaMacConfirmQueueInit( primitives );
 801173e:	6978      	ldr	r0, [r7, #20]
 8011740:	f002 f884 	bl	801384c <LoRaMacConfirmQueueInit>

    // Initialize the module context with zeros
    memset1( ( uint8_t* ) &Nvm, 0x00, sizeof( LoRaMacNvmData_t ) );
 8011744:	f240 527c 	movw	r2, #1404	@ 0x57c
 8011748:	2100      	movs	r1, #0
 801174a:	48c7      	ldr	r0, [pc, #796]	@ (8011a68 <LoRaMacInitialization+0x384>)
 801174c:	f005 feb2 	bl	80174b4 <memset1>
    memset1( ( uint8_t* ) &MacCtx, 0x00, sizeof( LoRaMacCtx_t ) );
 8011750:	f44f 62a4 	mov.w	r2, #1312	@ 0x520
 8011754:	2100      	movs	r1, #0
 8011756:	48c5      	ldr	r0, [pc, #788]	@ (8011a6c <LoRaMacInitialization+0x388>)
 8011758:	f005 feac 	bl	80174b4 <memset1>
    // Set non zero variables to its default value
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetriesCounter = 1;
    MacCtx.AckTimeoutRetries = 1;
#endif /* LORAMAC_VERSION */
    Nvm.MacGroup2.Region = region;
 801175c:	4ac2      	ldr	r2, [pc, #776]	@ (8011a68 <LoRaMacInitialization+0x384>)
 801175e:	7bfb      	ldrb	r3, [r7, #15]
 8011760:	f882 3040 	strb.w	r3, [r2, #64]	@ 0x40
    Nvm.MacGroup2.DeviceClass = CLASS_A;
 8011764:	4bc0      	ldr	r3, [pc, #768]	@ (8011a68 <LoRaMacInitialization+0x384>)
 8011766:	2200      	movs	r2, #0
 8011768:	f883 2104 	strb.w	r2, [r3, #260]	@ 0x104
    Nvm.MacGroup2.MacParams.RepeaterSupport = false; /* ST_WORKAROUND: Keep repeater feature */
 801176c:	4bbe      	ldr	r3, [pc, #760]	@ (8011a68 <LoRaMacInitialization+0x384>)
 801176e:	2200      	movs	r2, #0
 8011770:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    // Setup version
    Nvm.MacGroup2.Version.Value = LORAMAC_VERSION;
 8011774:	4bbc      	ldr	r3, [pc, #752]	@ (8011a68 <LoRaMacInitialization+0x384>)
 8011776:	4abe      	ldr	r2, [pc, #760]	@ (8011a70 <LoRaMacInitialization+0x38c>)
 8011778:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_DEFAULTS;
 801177c:	2300      	movs	r3, #0
 801177e:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    params.NvmGroup1 = &Nvm.RegionGroup1;
 8011782:	4bbc      	ldr	r3, [pc, #752]	@ (8011a74 <LoRaMacInitialization+0x390>)
 8011784:	61fb      	str	r3, [r7, #28]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 8011786:	4bbc      	ldr	r3, [pc, #752]	@ (8011a78 <LoRaMacInitialization+0x394>)
 8011788:	623b      	str	r3, [r7, #32]
    params.Bands = &RegionBands;
 801178a:	4bbc      	ldr	r3, [pc, #752]	@ (8011a7c <LoRaMacInitialization+0x398>)
 801178c:	627b      	str	r3, [r7, #36]	@ 0x24
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 801178e:	4bb6      	ldr	r3, [pc, #728]	@ (8011a68 <LoRaMacInitialization+0x384>)
 8011790:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8011794:	f107 021c 	add.w	r2, r7, #28
 8011798:	4611      	mov	r1, r2
 801179a:	4618      	mov	r0, r3
 801179c:	f003 fbd7 	bl	8014f4e <RegionInitDefaults>
#endif /* LORAMAC_VERSION */

    // Reset to defaults
    getPhy.Attribute = PHY_DUTY_CYCLE;
 80117a0:	230f      	movs	r3, #15
 80117a2:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80117a6:	4bb0      	ldr	r3, [pc, #704]	@ (8011a68 <LoRaMacInitialization+0x384>)
 80117a8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80117ac:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 80117b0:	4611      	mov	r1, r2
 80117b2:	4618      	mov	r0, r3
 80117b4:	f003 fba2 	bl	8014efc <RegionGetPhyParam>
 80117b8:	4603      	mov	r3, r0
 80117ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.DutyCycleOn = ( bool ) phyParam.Value;
 80117bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80117be:	2b00      	cmp	r3, #0
 80117c0:	bf14      	ite	ne
 80117c2:	2301      	movne	r3, #1
 80117c4:	2300      	moveq	r3, #0
 80117c6:	b2da      	uxtb	r2, r3
 80117c8:	4ba7      	ldr	r3, [pc, #668]	@ (8011a68 <LoRaMacInitialization+0x384>)
 80117ca:	f883 2108 	strb.w	r2, [r3, #264]	@ 0x108

    getPhy.Attribute = PHY_DEF_TX_POWER;
 80117ce:	230a      	movs	r3, #10
 80117d0:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80117d4:	4ba4      	ldr	r3, [pc, #656]	@ (8011a68 <LoRaMacInitialization+0x384>)
 80117d6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80117da:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 80117de:	4611      	mov	r1, r2
 80117e0:	4618      	mov	r0, r3
 80117e2:	f003 fb8b 	bl	8014efc <RegionGetPhyParam>
 80117e6:	4603      	mov	r3, r0
 80117e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.ChannelsTxPowerDefault = phyParam.Value;
 80117ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80117ec:	b25a      	sxtb	r2, r3
 80117ee:	4b9e      	ldr	r3, [pc, #632]	@ (8011a68 <LoRaMacInitialization+0x384>)
 80117f0:	f883 20cc 	strb.w	r2, [r3, #204]	@ 0xcc

    getPhy.Attribute = PHY_DEF_TX_DR;
 80117f4:	2306      	movs	r3, #6
 80117f6:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80117fa:	4b9b      	ldr	r3, [pc, #620]	@ (8011a68 <LoRaMacInitialization+0x384>)
 80117fc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8011800:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8011804:	4611      	mov	r1, r2
 8011806:	4618      	mov	r0, r3
 8011808:	f003 fb78 	bl	8014efc <RegionGetPhyParam>
 801180c:	4603      	mov	r3, r0
 801180e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.ChannelsDatarateDefault = phyParam.Value;
 8011810:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011812:	b25a      	sxtb	r2, r3
 8011814:	4b94      	ldr	r3, [pc, #592]	@ (8011a68 <LoRaMacInitialization+0x384>)
 8011816:	f883 20cd 	strb.w	r2, [r3, #205]	@ 0xcd

    getPhy.Attribute = PHY_MAX_RX_WINDOW;
 801181a:	2310      	movs	r3, #16
 801181c:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011820:	4b91      	ldr	r3, [pc, #580]	@ (8011a68 <LoRaMacInitialization+0x384>)
 8011822:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8011826:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 801182a:	4611      	mov	r1, r2
 801182c:	4618      	mov	r0, r3
 801182e:	f003 fb65 	bl	8014efc <RegionGetPhyParam>
 8011832:	4603      	mov	r3, r0
 8011834:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow = phyParam.Value;
 8011836:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011838:	4a8b      	ldr	r2, [pc, #556]	@ (8011a68 <LoRaMacInitialization+0x384>)
 801183a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    getPhy.Attribute = PHY_RECEIVE_DELAY1;
 801183e:	2311      	movs	r3, #17
 8011840:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011844:	4b88      	ldr	r3, [pc, #544]	@ (8011a68 <LoRaMacInitialization+0x384>)
 8011846:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 801184a:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 801184e:	4611      	mov	r1, r2
 8011850:	4618      	mov	r0, r3
 8011852:	f003 fb53 	bl	8014efc <RegionGetPhyParam>
 8011856:	4603      	mov	r3, r0
 8011858:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1 = phyParam.Value;
 801185a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801185c:	4a82      	ldr	r2, [pc, #520]	@ (8011a68 <LoRaMacInitialization+0x384>)
 801185e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

    getPhy.Attribute = PHY_RECEIVE_DELAY2;
 8011862:	2312      	movs	r3, #18
 8011864:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011868:	4b7f      	ldr	r3, [pc, #508]	@ (8011a68 <LoRaMacInitialization+0x384>)
 801186a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 801186e:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8011872:	4611      	mov	r1, r2
 8011874:	4618      	mov	r0, r3
 8011876:	f003 fb41 	bl	8014efc <RegionGetPhyParam>
 801187a:	4603      	mov	r3, r0
 801187c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2 = phyParam.Value;
 801187e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011880:	4a79      	ldr	r2, [pc, #484]	@ (8011a68 <LoRaMacInitialization+0x384>)
 8011882:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY1;
 8011886:	2313      	movs	r3, #19
 8011888:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801188c:	4b76      	ldr	r3, [pc, #472]	@ (8011a68 <LoRaMacInitialization+0x384>)
 801188e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8011892:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8011896:	4611      	mov	r1, r2
 8011898:	4618      	mov	r0, r3
 801189a:	f003 fb2f 	bl	8014efc <RegionGetPhyParam>
 801189e:	4603      	mov	r3, r0
 80118a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1 = phyParam.Value;
 80118a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80118a4:	4a70      	ldr	r2, [pc, #448]	@ (8011a68 <LoRaMacInitialization+0x384>)
 80118a6:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY2;
 80118aa:	2314      	movs	r3, #20
 80118ac:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80118b0:	4b6d      	ldr	r3, [pc, #436]	@ (8011a68 <LoRaMacInitialization+0x384>)
 80118b2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80118b6:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 80118ba:	4611      	mov	r1, r2
 80118bc:	4618      	mov	r0, r3
 80118be:	f003 fb1d 	bl	8014efc <RegionGetPhyParam>
 80118c2:	4603      	mov	r3, r0
 80118c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2 = phyParam.Value;
 80118c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80118c8:	4a67      	ldr	r2, [pc, #412]	@ (8011a68 <LoRaMacInitialization+0x384>)
 80118ca:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

    getPhy.Attribute = PHY_DEF_DR1_OFFSET;
 80118ce:	2316      	movs	r3, #22
 80118d0:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80118d4:	4b64      	ldr	r3, [pc, #400]	@ (8011a68 <LoRaMacInitialization+0x384>)
 80118d6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80118da:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 80118de:	4611      	mov	r1, r2
 80118e0:	4618      	mov	r0, r3
 80118e2:	f003 fb0b 	bl	8014efc <RegionGetPhyParam>
 80118e6:	4603      	mov	r3, r0
 80118e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset = phyParam.Value;
 80118ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80118ec:	b2da      	uxtb	r2, r3
 80118ee:	4b5e      	ldr	r3, [pc, #376]	@ (8011a68 <LoRaMacInitialization+0x384>)
 80118f0:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5

    getPhy.Attribute = PHY_DEF_RX2_FREQUENCY;
 80118f4:	2317      	movs	r3, #23
 80118f6:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80118fa:	4b5b      	ldr	r3, [pc, #364]	@ (8011a68 <LoRaMacInitialization+0x384>)
 80118fc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8011900:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8011904:	4611      	mov	r1, r2
 8011906:	4618      	mov	r0, r3
 8011908:	f003 faf8 	bl	8014efc <RegionGetPhyParam>
 801190c:	4603      	mov	r3, r0
 801190e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Frequency = phyParam.Value;
 8011910:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011912:	4a55      	ldr	r2, [pc, #340]	@ (8011a68 <LoRaMacInitialization+0x384>)
 8011914:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Frequency = phyParam.Value;
 8011918:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801191a:	4a53      	ldr	r2, [pc, #332]	@ (8011a68 <LoRaMacInitialization+0x384>)
 801191c:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0

    getPhy.Attribute = PHY_DEF_RX2_DR;
 8011920:	2318      	movs	r3, #24
 8011922:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011926:	4b50      	ldr	r3, [pc, #320]	@ (8011a68 <LoRaMacInitialization+0x384>)
 8011928:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 801192c:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8011930:	4611      	mov	r1, r2
 8011932:	4618      	mov	r0, r3
 8011934:	f003 fae2 	bl	8014efc <RegionGetPhyParam>
 8011938:	4603      	mov	r3, r0
 801193a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Datarate = phyParam.Value;
 801193c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801193e:	b2da      	uxtb	r2, r3
 8011940:	4b49      	ldr	r3, [pc, #292]	@ (8011a68 <LoRaMacInitialization+0x384>)
 8011942:	f883 20ac 	strb.w	r2, [r3, #172]	@ 0xac
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Datarate = phyParam.Value;
 8011946:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011948:	b2da      	uxtb	r2, r3
 801194a:	4b47      	ldr	r3, [pc, #284]	@ (8011a68 <LoRaMacInitialization+0x384>)
 801194c:	f883 20b4 	strb.w	r2, [r3, #180]	@ 0xb4

    getPhy.Attribute = PHY_DEF_UPLINK_DWELL_TIME;
 8011950:	231d      	movs	r3, #29
 8011952:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011956:	4b44      	ldr	r3, [pc, #272]	@ (8011a68 <LoRaMacInitialization+0x384>)
 8011958:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 801195c:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8011960:	4611      	mov	r1, r2
 8011962:	4618      	mov	r0, r3
 8011964:	f003 faca 	bl	8014efc <RegionGetPhyParam>
 8011968:	4603      	mov	r3, r0
 801196a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime = phyParam.Value;
 801196c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801196e:	b2da      	uxtb	r2, r3
 8011970:	4b3d      	ldr	r3, [pc, #244]	@ (8011a68 <LoRaMacInitialization+0x384>)
 8011972:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8

    getPhy.Attribute = PHY_DEF_DOWNLINK_DWELL_TIME;
 8011976:	231e      	movs	r3, #30
 8011978:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801197c:	4b3a      	ldr	r3, [pc, #232]	@ (8011a68 <LoRaMacInitialization+0x384>)
 801197e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8011982:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8011986:	4611      	mov	r1, r2
 8011988:	4618      	mov	r0, r3
 801198a:	f003 fab7 	bl	8014efc <RegionGetPhyParam>
 801198e:	4603      	mov	r3, r0
 8011990:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime = phyParam.Value;
 8011992:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011994:	b2da      	uxtb	r2, r3
 8011996:	4b34      	ldr	r3, [pc, #208]	@ (8011a68 <LoRaMacInitialization+0x384>)
 8011998:	f883 20b9 	strb.w	r2, [r3, #185]	@ 0xb9

    getPhy.Attribute = PHY_DEF_MAX_EIRP;
 801199c:	231f      	movs	r3, #31
 801199e:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80119a2:	4b31      	ldr	r3, [pc, #196]	@ (8011a68 <LoRaMacInitialization+0x384>)
 80119a4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80119a8:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 80119ac:	4611      	mov	r1, r2
 80119ae:	4618      	mov	r0, r3
 80119b0:	f003 faa4 	bl	8014efc <RegionGetPhyParam>
 80119b4:	4603      	mov	r3, r0
 80119b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.MaxEirp = phyParam.fValue;
 80119b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80119ba:	4a2b      	ldr	r2, [pc, #172]	@ (8011a68 <LoRaMacInitialization+0x384>)
 80119bc:	f8c2 30bc 	str.w	r3, [r2, #188]	@ 0xbc

    getPhy.Attribute = PHY_DEF_ANTENNA_GAIN;
 80119c0:	2320      	movs	r3, #32
 80119c2:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80119c6:	4b28      	ldr	r3, [pc, #160]	@ (8011a68 <LoRaMacInitialization+0x384>)
 80119c8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80119cc:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 80119d0:	4611      	mov	r1, r2
 80119d2:	4618      	mov	r0, r3
 80119d4:	f003 fa92 	bl	8014efc <RegionGetPhyParam>
 80119d8:	4603      	mov	r3, r0
 80119da:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.AntennaGain = phyParam.fValue;
 80119dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80119de:	4a22      	ldr	r2, [pc, #136]	@ (8011a68 <LoRaMacInitialization+0x384>)
 80119e0:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0

    getPhy.Attribute = PHY_DEF_ADR_ACK_LIMIT;
 80119e4:	230b      	movs	r3, #11
 80119e6:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80119ea:	4b1f      	ldr	r3, [pc, #124]	@ (8011a68 <LoRaMacInitialization+0x384>)
 80119ec:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80119f0:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 80119f4:	4611      	mov	r1, r2
 80119f6:	4618      	mov	r0, r3
 80119f8:	f003 fa80 	bl	8014efc <RegionGetPhyParam>
 80119fc:	4603      	mov	r3, r0
 80119fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    MacCtx.AdrAckLimit = phyParam.Value;
 8011a00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011a02:	b29a      	uxth	r2, r3
 8011a04:	4b19      	ldr	r3, [pc, #100]	@ (8011a6c <LoRaMacInitialization+0x388>)
 8011a06:	f8a3 2400 	strh.w	r2, [r3, #1024]	@ 0x400

    getPhy.Attribute = PHY_DEF_ADR_ACK_DELAY;
 8011a0a:	230c      	movs	r3, #12
 8011a0c:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011a10:	4b15      	ldr	r3, [pc, #84]	@ (8011a68 <LoRaMacInitialization+0x384>)
 8011a12:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8011a16:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8011a1a:	4611      	mov	r1, r2
 8011a1c:	4618      	mov	r0, r3
 8011a1e:	f003 fa6d 	bl	8014efc <RegionGetPhyParam>
 8011a22:	4603      	mov	r3, r0
 8011a24:	62fb      	str	r3, [r7, #44]	@ 0x2c
    MacCtx.AdrAckDelay = phyParam.Value;
 8011a26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011a28:	b29a      	uxth	r2, r3
 8011a2a:	4b10      	ldr	r3, [pc, #64]	@ (8011a6c <LoRaMacInitialization+0x388>)
 8011a2c:	f8a3 2402 	strh.w	r2, [r3, #1026]	@ 0x402

    // Init parameters which are not set in function ResetMacParameters
    Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans = 1;
 8011a30:	4b0d      	ldr	r3, [pc, #52]	@ (8011a68 <LoRaMacInitialization+0x384>)
 8011a32:	2201      	movs	r2, #1
 8011a34:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
    Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = 10;
 8011a38:	4b0b      	ldr	r3, [pc, #44]	@ (8011a68 <LoRaMacInitialization+0x384>)
 8011a3a:	220a      	movs	r2, #10
 8011a3c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = 6;
 8011a40:	4b09      	ldr	r3, [pc, #36]	@ (8011a68 <LoRaMacInitialization+0x384>)
 8011a42:	2206      	movs	r2, #6
 8011a44:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c

    Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError;
 8011a48:	4b07      	ldr	r3, [pc, #28]	@ (8011a68 <LoRaMacInitialization+0x384>)
 8011a4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8011a4e:	4a06      	ldr	r2, [pc, #24]	@ (8011a68 <LoRaMacInitialization+0x384>)
 8011a50:	6453      	str	r3, [r2, #68]	@ 0x44
    Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols;
 8011a52:	4b05      	ldr	r3, [pc, #20]	@ (8011a68 <LoRaMacInitialization+0x384>)
 8011a54:	f893 208c 	ldrb.w	r2, [r3, #140]	@ 0x8c
 8011a58:	4b03      	ldr	r3, [pc, #12]	@ (8011a68 <LoRaMacInitialization+0x384>)
 8011a5a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
    Nvm.MacGroup2.MacParams.MaxRxWindow = Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow;
 8011a5e:	4b02      	ldr	r3, [pc, #8]	@ (8011a68 <LoRaMacInitialization+0x384>)
 8011a60:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8011a64:	e00c      	b.n	8011a80 <LoRaMacInitialization+0x39c>
 8011a66:	bf00      	nop
 8011a68:	20000df0 	.word	0x20000df0
 8011a6c:	200008d0 	.word	0x200008d0
 8011a70:	01000400 	.word	0x01000400
 8011a74:	20000fd4 	.word	0x20000fd4
 8011a78:	20000fd8 	.word	0x20000fd8
 8011a7c:	200018e8 	.word	0x200018e8
 8011a80:	4a60      	ldr	r2, [pc, #384]	@ (8011c04 <LoRaMacInitialization+0x520>)
 8011a82:	64d3      	str	r3, [r2, #76]	@ 0x4c
    Nvm.MacGroup2.MacParams.ReceiveDelay1 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1;
 8011a84:	4b5f      	ldr	r3, [pc, #380]	@ (8011c04 <LoRaMacInitialization+0x520>)
 8011a86:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8011a8a:	4a5e      	ldr	r2, [pc, #376]	@ (8011c04 <LoRaMacInitialization+0x520>)
 8011a8c:	6513      	str	r3, [r2, #80]	@ 0x50
    Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2;
 8011a8e:	4b5d      	ldr	r3, [pc, #372]	@ (8011c04 <LoRaMacInitialization+0x520>)
 8011a90:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8011a94:	4a5b      	ldr	r2, [pc, #364]	@ (8011c04 <LoRaMacInitialization+0x520>)
 8011a96:	6553      	str	r3, [r2, #84]	@ 0x54
    Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1;
 8011a98:	4b5a      	ldr	r3, [pc, #360]	@ (8011c04 <LoRaMacInitialization+0x520>)
 8011a9a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8011a9e:	4a59      	ldr	r2, [pc, #356]	@ (8011c04 <LoRaMacInitialization+0x520>)
 8011aa0:	6593      	str	r3, [r2, #88]	@ 0x58
    Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2;
 8011aa2:	4b58      	ldr	r3, [pc, #352]	@ (8011c04 <LoRaMacInitialization+0x520>)
 8011aa4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8011aa8:	4a56      	ldr	r2, [pc, #344]	@ (8011c04 <LoRaMacInitialization+0x520>)
 8011aaa:	65d3      	str	r3, [r2, #92]	@ 0x5c
    Nvm.MacGroup2.MacParams.ChannelsNbTrans = Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans;
 8011aac:	4b55      	ldr	r3, [pc, #340]	@ (8011c04 <LoRaMacInitialization+0x520>)
 8011aae:	f893 20a4 	ldrb.w	r2, [r3, #164]	@ 0xa4
 8011ab2:	4b54      	ldr	r3, [pc, #336]	@ (8011c04 <LoRaMacInitialization+0x520>)
 8011ab4:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
    params.NvmGroup1 = &Nvm.RegionGroup1;
    params.NvmGroup2 = &Nvm.RegionGroup2;
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    // FPort 224 is enabled by default.
    Nvm.MacGroup2.IsCertPortOn = true;
 8011ab8:	4b52      	ldr	r3, [pc, #328]	@ (8011c04 <LoRaMacInitialization+0x520>)
 8011aba:	2201      	movs	r2, #1
 8011abc:	f883 210b 	strb.w	r2, [r3, #267]	@ 0x10b
#endif /* LORAMAC_VERSION */

    MacCtx.MacCallbacks = callbacks;
 8011ac0:	4a51      	ldr	r2, [pc, #324]	@ (8011c08 <LoRaMacInitialization+0x524>)
 8011ac2:	693b      	ldr	r3, [r7, #16]
 8011ac4:	f8c2 3348 	str.w	r3, [r2, #840]	@ 0x348
    ResetMacParameters( );
 8011ac8:	f7ff f8d6 	bl	8010c78 <ResetMacParameters>

    Nvm.MacGroup2.PublicNetwork = true;
 8011acc:	4b4d      	ldr	r3, [pc, #308]	@ (8011c04 <LoRaMacInitialization+0x520>)
 8011ace:	2201      	movs	r2, #1
 8011ad0:	f883 2105 	strb.w	r2, [r3, #261]	@ 0x105

    MacCtx.MacPrimitives = primitives;
 8011ad4:	4a4c      	ldr	r2, [pc, #304]	@ (8011c08 <LoRaMacInitialization+0x524>)
 8011ad6:	697b      	ldr	r3, [r7, #20]
 8011ad8:	f8c2 3344 	str.w	r3, [r2, #836]	@ 0x344
    MacCtx.MacFlags.Value = 0;
 8011adc:	4b4a      	ldr	r3, [pc, #296]	@ (8011c08 <LoRaMacInitialization+0x524>)
 8011ade:	2200      	movs	r2, #0
 8011ae0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    MacCtx.MacState = LORAMAC_STOPPED;
 8011ae4:	4b48      	ldr	r3, [pc, #288]	@ (8011c08 <LoRaMacInitialization+0x524>)
 8011ae6:	2201      	movs	r2, #1
 8011ae8:	f8c3 2340 	str.w	r2, [r3, #832]	@ 0x340

    // Reset duty cycle times
    Nvm.MacGroup1.LastTxDoneTime = 0;
 8011aec:	4b45      	ldr	r3, [pc, #276]	@ (8011c04 <LoRaMacInitialization+0x520>)
 8011aee:	2200      	movs	r2, #0
 8011af0:	62da      	str	r2, [r3, #44]	@ 0x2c
    Nvm.MacGroup1.AggregatedTimeOff = 0;
 8011af2:	4b44      	ldr	r3, [pc, #272]	@ (8011c04 <LoRaMacInitialization+0x520>)
 8011af4:	2200      	movs	r2, #0
 8011af6:	631a      	str	r2, [r3, #48]	@ 0x30

    // Initialize timers
    TimerInit( &MacCtx.TxDelayedTimer, OnTxDelayedTimerEvent );
 8011af8:	2300      	movs	r3, #0
 8011afa:	9300      	str	r3, [sp, #0]
 8011afc:	4b43      	ldr	r3, [pc, #268]	@ (8011c0c <LoRaMacInitialization+0x528>)
 8011afe:	2200      	movs	r2, #0
 8011b00:	f04f 31ff 	mov.w	r1, #4294967295
 8011b04:	4842      	ldr	r0, [pc, #264]	@ (8011c10 <LoRaMacInitialization+0x52c>)
 8011b06:	f009 fd3b 	bl	801b580 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer1, OnRxWindow1TimerEvent );
 8011b0a:	2300      	movs	r3, #0
 8011b0c:	9300      	str	r3, [sp, #0]
 8011b0e:	4b41      	ldr	r3, [pc, #260]	@ (8011c14 <LoRaMacInitialization+0x530>)
 8011b10:	2200      	movs	r2, #0
 8011b12:	f04f 31ff 	mov.w	r1, #4294967295
 8011b16:	4840      	ldr	r0, [pc, #256]	@ (8011c18 <LoRaMacInitialization+0x534>)
 8011b18:	f009 fd32 	bl	801b580 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer2, OnRxWindow2TimerEvent );
 8011b1c:	2300      	movs	r3, #0
 8011b1e:	9300      	str	r3, [sp, #0]
 8011b20:	4b3e      	ldr	r3, [pc, #248]	@ (8011c1c <LoRaMacInitialization+0x538>)
 8011b22:	2200      	movs	r2, #0
 8011b24:	f04f 31ff 	mov.w	r1, #4294967295
 8011b28:	483d      	ldr	r0, [pc, #244]	@ (8011c20 <LoRaMacInitialization+0x53c>)
 8011b2a:	f009 fd29 	bl	801b580 <UTIL_TIMER_Create>
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerInit( &MacCtx.AckTimeoutTimer, OnAckTimeoutTimerEvent );
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    TimerInit( &MacCtx.RetransmitTimeoutTimer, OnRetransmitTimeoutTimerEvent );
 8011b2e:	2300      	movs	r3, #0
 8011b30:	9300      	str	r3, [sp, #0]
 8011b32:	4b3c      	ldr	r3, [pc, #240]	@ (8011c24 <LoRaMacInitialization+0x540>)
 8011b34:	2200      	movs	r2, #0
 8011b36:	f04f 31ff 	mov.w	r1, #4294967295
 8011b3a:	483b      	ldr	r0, [pc, #236]	@ (8011c28 <LoRaMacInitialization+0x544>)
 8011b3c:	f009 fd20 	bl	801b580 <UTIL_TIMER_Create>
#endif /* LORAMAC_VERSION */

    // Store the current initialization time
    Nvm.MacGroup2.InitializationTime = SysTimeGetMcuTime( );
 8011b40:	4c30      	ldr	r4, [pc, #192]	@ (8011c04 <LoRaMacInitialization+0x520>)
 8011b42:	463b      	mov	r3, r7
 8011b44:	4618      	mov	r0, r3
 8011b46:	f009 f891 	bl	801ac6c <SysTimeGetMcuTime>
 8011b4a:	f504 7388 	add.w	r3, r4, #272	@ 0x110
 8011b4e:	463a      	mov	r2, r7
 8011b50:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011b54:	e883 0003 	stmia.w	r3, {r0, r1}

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    // Initialize MAC radio events
    LoRaMacRadioEvents.Value = 0;
 8011b58:	4b34      	ldr	r3, [pc, #208]	@ (8011c2c <LoRaMacInitialization+0x548>)
 8011b5a:	2200      	movs	r2, #0
 8011b5c:	601a      	str	r2, [r3, #0]
#endif /* LORAMAC_VERSION */

    // Initialize Radio driver
    MacCtx.RadioEvents.TxDone = OnRadioTxDone;
 8011b5e:	4b2a      	ldr	r3, [pc, #168]	@ (8011c08 <LoRaMacInitialization+0x524>)
 8011b60:	4a33      	ldr	r2, [pc, #204]	@ (8011c30 <LoRaMacInitialization+0x54c>)
 8011b62:	f8c3 234c 	str.w	r2, [r3, #844]	@ 0x34c
    MacCtx.RadioEvents.RxDone = OnRadioRxDone;
 8011b66:	4b28      	ldr	r3, [pc, #160]	@ (8011c08 <LoRaMacInitialization+0x524>)
 8011b68:	4a32      	ldr	r2, [pc, #200]	@ (8011c34 <LoRaMacInitialization+0x550>)
 8011b6a:	f8c3 2354 	str.w	r2, [r3, #852]	@ 0x354
    MacCtx.RadioEvents.RxError = OnRadioRxError;
 8011b6e:	4b26      	ldr	r3, [pc, #152]	@ (8011c08 <LoRaMacInitialization+0x524>)
 8011b70:	4a31      	ldr	r2, [pc, #196]	@ (8011c38 <LoRaMacInitialization+0x554>)
 8011b72:	f8c3 235c 	str.w	r2, [r3, #860]	@ 0x35c
    MacCtx.RadioEvents.TxTimeout = OnRadioTxTimeout;
 8011b76:	4b24      	ldr	r3, [pc, #144]	@ (8011c08 <LoRaMacInitialization+0x524>)
 8011b78:	4a30      	ldr	r2, [pc, #192]	@ (8011c3c <LoRaMacInitialization+0x558>)
 8011b7a:	f8c3 2350 	str.w	r2, [r3, #848]	@ 0x350
    MacCtx.RadioEvents.RxTimeout = OnRadioRxTimeout;
 8011b7e:	4b22      	ldr	r3, [pc, #136]	@ (8011c08 <LoRaMacInitialization+0x524>)
 8011b80:	4a2f      	ldr	r2, [pc, #188]	@ (8011c40 <LoRaMacInitialization+0x55c>)
 8011b82:	f8c3 2358 	str.w	r2, [r3, #856]	@ 0x358
    Radio.Init( &MacCtx.RadioEvents );
 8011b86:	4b2f      	ldr	r3, [pc, #188]	@ (8011c44 <LoRaMacInitialization+0x560>)
 8011b88:	681b      	ldr	r3, [r3, #0]
 8011b8a:	482f      	ldr	r0, [pc, #188]	@ (8011c48 <LoRaMacInitialization+0x564>)
 8011b8c:	4798      	blx	r3

    // Initialize the Secure Element driver
    if( SecureElementInit( &Nvm.SecureElement, callbacks->GetUniqueId ) != SECURE_ELEMENT_SUCCESS ) /* ST_WORKAROUND: Add unique ID callback as input parameter */
 8011b8e:	693b      	ldr	r3, [r7, #16]
 8011b90:	689b      	ldr	r3, [r3, #8]
 8011b92:	4619      	mov	r1, r3
 8011b94:	482d      	ldr	r0, [pc, #180]	@ (8011c4c <LoRaMacInitialization+0x568>)
 8011b96:	f7fa fb85 	bl	800c2a4 <SecureElementInit>
 8011b9a:	4603      	mov	r3, r0
 8011b9c:	2b00      	cmp	r3, #0
 8011b9e:	d001      	beq.n	8011ba4 <LoRaMacInitialization+0x4c0>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 8011ba0:	2311      	movs	r3, #17
 8011ba2:	e02b      	b.n	8011bfc <LoRaMacInitialization+0x518>
    }

    // Initialize Crypto module
    if( LoRaMacCryptoInit( &Nvm.Crypto ) != LORAMAC_CRYPTO_SUCCESS )
 8011ba4:	4817      	ldr	r0, [pc, #92]	@ (8011c04 <LoRaMacInitialization+0x520>)
 8011ba6:	f002 fafd 	bl	80141a4 <LoRaMacCryptoInit>
 8011baa:	4603      	mov	r3, r0
 8011bac:	2b00      	cmp	r3, #0
 8011bae:	d001      	beq.n	8011bb4 <LoRaMacInitialization+0x4d0>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 8011bb0:	2311      	movs	r3, #17
 8011bb2:	e023      	b.n	8011bfc <LoRaMacInitialization+0x518>
    }

    // Initialize MAC commands module
    if( LoRaMacCommandsInit( ) != LORAMAC_COMMANDS_SUCCESS )
 8011bb4:	f001 fc1c 	bl	80133f0 <LoRaMacCommandsInit>
 8011bb8:	4603      	mov	r3, r0
 8011bba:	2b00      	cmp	r3, #0
 8011bbc:	d001      	beq.n	8011bc2 <LoRaMacInitialization+0x4de>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8011bbe:	2313      	movs	r3, #19
 8011bc0:	e01c      	b.n	8011bfc <LoRaMacInitialization+0x518>
    }

    // Set multicast downlink counter reference
    if( LoRaMacCryptoSetMulticastReference( Nvm.MacGroup2.MulticastChannelList ) != LORAMAC_CRYPTO_SUCCESS )
 8011bc2:	4823      	ldr	r0, [pc, #140]	@ (8011c50 <LoRaMacInitialization+0x56c>)
 8011bc4:	f002 fb8e 	bl	80142e4 <LoRaMacCryptoSetMulticastReference>
 8011bc8:	4603      	mov	r3, r0
 8011bca:	2b00      	cmp	r3, #0
 8011bcc:	d001      	beq.n	8011bd2 <LoRaMacInitialization+0x4ee>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 8011bce:	2311      	movs	r3, #17
 8011bd0:	e014      	b.n	8011bfc <LoRaMacInitialization+0x518>
    }

    // Random seed initialization
    srand1( Radio.Random( ) );
 8011bd2:	4b1c      	ldr	r3, [pc, #112]	@ (8011c44 <LoRaMacInitialization+0x560>)
 8011bd4:	695b      	ldr	r3, [r3, #20]
 8011bd6:	4798      	blx	r3
 8011bd8:	4603      	mov	r3, r0
 8011bda:	4618      	mov	r0, r3
 8011bdc:	f005 fc0a 	bl	80173f4 <srand1>

    Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 8011be0:	4b18      	ldr	r3, [pc, #96]	@ (8011c44 <LoRaMacInitialization+0x560>)
 8011be2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8011be4:	4a07      	ldr	r2, [pc, #28]	@ (8011c04 <LoRaMacInitialization+0x520>)
 8011be6:	f892 2105 	ldrb.w	r2, [r2, #261]	@ 0x105
 8011bea:	4610      	mov	r0, r2
 8011bec:	4798      	blx	r3
    Radio.Sleep( );
 8011bee:	4b15      	ldr	r3, [pc, #84]	@ (8011c44 <LoRaMacInitialization+0x560>)
 8011bf0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011bf2:	4798      	blx	r3

    LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 8011bf4:	2001      	movs	r0, #1
 8011bf6:	f7fd fac7 	bl	800f188 <LoRaMacEnableRequests>

    return LORAMAC_STATUS_OK;
 8011bfa:	2300      	movs	r3, #0
}
 8011bfc:	4618      	mov	r0, r3
 8011bfe:	373c      	adds	r7, #60	@ 0x3c
 8011c00:	46bd      	mov	sp, r7
 8011c02:	bd90      	pop	{r4, r7, pc}
 8011c04:	20000df0 	.word	0x20000df0
 8011c08:	200008d0 	.word	0x200008d0
 8011c0c:	0800f73d 	.word	0x0800f73d
 8011c10:	20000c38 	.word	0x20000c38
 8011c14:	0800f7cd 	.word	0x0800f7cd
 8011c18:	20000c50 	.word	0x20000c50
 8011c1c:	0800f845 	.word	0x0800f845
 8011c20:	20000c68 	.word	0x20000c68
 8011c24:	0800f8c5 	.word	0x0800f8c5
 8011c28:	20000cd4 	.word	0x20000cd4
 8011c2c:	20001978 	.word	0x20001978
 8011c30:	0800e23d 	.word	0x0800e23d
 8011c34:	0800e2b5 	.word	0x0800e2b5
 8011c38:	0800e395 	.word	0x0800e395
 8011c3c:	0800e349 	.word	0x0800e349
 8011c40:	0800e3d1 	.word	0x0800e3d1
 8011c44:	0801f874 	.word	0x0801f874
 8011c48:	20000c1c 	.word	0x20000c1c
 8011c4c:	20000f14 	.word	0x20000f14
 8011c50:	20000ec8 	.word	0x20000ec8

08011c54 <LoRaMacStart>:

LoRaMacStatus_t LoRaMacStart( void )
{
 8011c54:	b480      	push	{r7}
 8011c56:	af00      	add	r7, sp, #0
    MacCtx.MacState = LORAMAC_IDLE;
 8011c58:	4b04      	ldr	r3, [pc, #16]	@ (8011c6c <LoRaMacStart+0x18>)
 8011c5a:	2200      	movs	r2, #0
 8011c5c:	f8c3 2340 	str.w	r2, [r3, #832]	@ 0x340
    return LORAMAC_STATUS_OK;
 8011c60:	2300      	movs	r3, #0
}
 8011c62:	4618      	mov	r0, r3
 8011c64:	46bd      	mov	sp, r7
 8011c66:	bc80      	pop	{r7}
 8011c68:	4770      	bx	lr
 8011c6a:	bf00      	nop
 8011c6c:	200008d0 	.word	0x200008d0

08011c70 <LoRaMacStop>:

LoRaMacStatus_t LoRaMacStop( void )
{
 8011c70:	b580      	push	{r7, lr}
 8011c72:	af00      	add	r7, sp, #0
    if( LoRaMacIsBusy( ) == false )
 8011c74:	f7fd fa68 	bl	800f148 <LoRaMacIsBusy>
 8011c78:	4603      	mov	r3, r0
 8011c7a:	f083 0301 	eor.w	r3, r3, #1
 8011c7e:	b2db      	uxtb	r3, r3
 8011c80:	2b00      	cmp	r3, #0
 8011c82:	d005      	beq.n	8011c90 <LoRaMacStop+0x20>
    {
        MacCtx.MacState = LORAMAC_STOPPED;
 8011c84:	4b07      	ldr	r3, [pc, #28]	@ (8011ca4 <LoRaMacStop+0x34>)
 8011c86:	2201      	movs	r2, #1
 8011c88:	f8c3 2340 	str.w	r2, [r3, #832]	@ 0x340
        return LORAMAC_STATUS_OK;
 8011c8c:	2300      	movs	r3, #0
 8011c8e:	e007      	b.n	8011ca0 <LoRaMacStop+0x30>
    }
    else if(  MacCtx.MacState == LORAMAC_STOPPED )
 8011c90:	4b04      	ldr	r3, [pc, #16]	@ (8011ca4 <LoRaMacStop+0x34>)
 8011c92:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 8011c96:	2b01      	cmp	r3, #1
 8011c98:	d101      	bne.n	8011c9e <LoRaMacStop+0x2e>
    {
        return LORAMAC_STATUS_OK;
 8011c9a:	2300      	movs	r3, #0
 8011c9c:	e000      	b.n	8011ca0 <LoRaMacStop+0x30>
    }
    return LORAMAC_STATUS_BUSY;
 8011c9e:	2301      	movs	r3, #1
}
 8011ca0:	4618      	mov	r0, r3
 8011ca2:	bd80      	pop	{r7, pc}
 8011ca4:	200008d0 	.word	0x200008d0

08011ca8 <LoRaMacHalt>:

LoRaMacStatus_t LoRaMacHalt( void )
{
 8011ca8:	b580      	push	{r7, lr}
 8011caa:	af00      	add	r7, sp, #0
    // Stop Timers
    TimerStop( &MacCtx.TxDelayedTimer );
 8011cac:	4812      	ldr	r0, [pc, #72]	@ (8011cf8 <LoRaMacHalt+0x50>)
 8011cae:	f009 fd0b 	bl	801b6c8 <UTIL_TIMER_Stop>
    TimerStop( &MacCtx.RxWindowTimer1 );
 8011cb2:	4812      	ldr	r0, [pc, #72]	@ (8011cfc <LoRaMacHalt+0x54>)
 8011cb4:	f009 fd08 	bl	801b6c8 <UTIL_TIMER_Stop>
    TimerStop( &MacCtx.RxWindowTimer2 );
 8011cb8:	4811      	ldr	r0, [pc, #68]	@ (8011d00 <LoRaMacHalt+0x58>)
 8011cba:	f009 fd05 	bl	801b6c8 <UTIL_TIMER_Stop>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerStop( &MacCtx.AckTimeoutTimer );
#elif (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    TimerStop( &MacCtx.RetransmitTimeoutTimer );
 8011cbe:	4811      	ldr	r0, [pc, #68]	@ (8011d04 <LoRaMacHalt+0x5c>)
 8011cc0:	f009 fd02 	bl	801b6c8 <UTIL_TIMER_Stop>
#endif /* LORAMAC_VERSION */

    // Take care about class B
    LoRaMacClassBHaltBeaconing( );
 8011cc4:	f001 fa04 	bl	80130d0 <LoRaMacClassBHaltBeaconing>

    // Switch off Radio
    Radio.Sleep( );
 8011cc8:	4b0f      	ldr	r3, [pc, #60]	@ (8011d08 <LoRaMacHalt+0x60>)
 8011cca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011ccc:	4798      	blx	r3

    MacCtx.MacState = LORAMAC_IDLE;
 8011cce:	4b0f      	ldr	r3, [pc, #60]	@ (8011d0c <LoRaMacHalt+0x64>)
 8011cd0:	2200      	movs	r2, #0
 8011cd2:	f8c3 2340 	str.w	r2, [r3, #832]	@ 0x340

    LoRaMacHandleNvm( &Nvm );
 8011cd6:	480e      	ldr	r0, [pc, #56]	@ (8011d10 <LoRaMacHalt+0x68>)
 8011cd8:	f7fd fc0c 	bl	800f4f4 <LoRaMacHandleNvm>

    // Preserve the Nvm context if data retention
    memcpy1( ( uint8_t* ) &NvmBackup, ( uint8_t* ) &Nvm, sizeof( LoRaMacNvmData_t ) );
 8011cdc:	f240 527c 	movw	r2, #1404	@ 0x57c
 8011ce0:	490b      	ldr	r1, [pc, #44]	@ (8011d10 <LoRaMacHalt+0x68>)
 8011ce2:	480c      	ldr	r0, [pc, #48]	@ (8011d14 <LoRaMacHalt+0x6c>)
 8011ce4:	f005 fbab 	bl	801743e <memcpy1>

    MacCtx.MacState = LORAMAC_STOPPED;
 8011ce8:	4b08      	ldr	r3, [pc, #32]	@ (8011d0c <LoRaMacHalt+0x64>)
 8011cea:	2201      	movs	r2, #1
 8011cec:	f8c3 2340 	str.w	r2, [r3, #832]	@ 0x340

    return LORAMAC_STATUS_OK;
 8011cf0:	2300      	movs	r3, #0
}
 8011cf2:	4618      	mov	r0, r3
 8011cf4:	bd80      	pop	{r7, pc}
 8011cf6:	bf00      	nop
 8011cf8:	20000c38 	.word	0x20000c38
 8011cfc:	20000c50 	.word	0x20000c50
 8011d00:	20000c68 	.word	0x20000c68
 8011d04:	20000cd4 	.word	0x20000cd4
 8011d08:	0801f874 	.word	0x0801f874
 8011d0c:	200008d0 	.word	0x200008d0
 8011d10:	20000df0 	.word	0x20000df0
 8011d14:	2000136c 	.word	0x2000136c

08011d18 <LoRaMacQueryTxPossible>:

LoRaMacStatus_t LoRaMacQueryTxPossible( uint8_t size, LoRaMacTxInfo_t* txInfo )
{
 8011d18:	b590      	push	{r4, r7, lr}
 8011d1a:	b08d      	sub	sp, #52	@ 0x34
 8011d1c:	af02      	add	r7, sp, #8
 8011d1e:	4603      	mov	r3, r0
 8011d20:	6039      	str	r1, [r7, #0]
 8011d22:	71fb      	strb	r3, [r7, #7]
    CalcNextAdrParams_t adrNext;
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8011d24:	4b42      	ldr	r3, [pc, #264]	@ (8011e30 <LoRaMacQueryTxPossible+0x118>)
 8011d26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011d28:	613b      	str	r3, [r7, #16]
    int8_t datarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 8011d2a:	4b41      	ldr	r3, [pc, #260]	@ (8011e30 <LoRaMacQueryTxPossible+0x118>)
 8011d2c:	f993 30cd 	ldrsb.w	r3, [r3, #205]	@ 0xcd
 8011d30:	73fb      	strb	r3, [r7, #15]
    int8_t txPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 8011d32:	4b3f      	ldr	r3, [pc, #252]	@ (8011e30 <LoRaMacQueryTxPossible+0x118>)
 8011d34:	f993 30cc 	ldrsb.w	r3, [r3, #204]	@ 0xcc
 8011d38:	73bb      	strb	r3, [r7, #14]
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    uint8_t nbTrans = MacCtx.ChannelsNbTransCounter;
 8011d3a:	4b3e      	ldr	r3, [pc, #248]	@ (8011e34 <LoRaMacQueryTxPossible+0x11c>)
 8011d3c:	f893 341c 	ldrb.w	r3, [r3, #1052]	@ 0x41c
 8011d40:	737b      	strb	r3, [r7, #13]
#endif /* LORAMAC_VERSION */
    size_t macCmdsSize = 0;
 8011d42:	2300      	movs	r3, #0
 8011d44:	60bb      	str	r3, [r7, #8]

    if( txInfo == NULL )
 8011d46:	683b      	ldr	r3, [r7, #0]
 8011d48:	2b00      	cmp	r3, #0
 8011d4a:	d101      	bne.n	8011d50 <LoRaMacQueryTxPossible+0x38>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8011d4c:	2303      	movs	r3, #3
 8011d4e:	e06b      	b.n	8011e28 <LoRaMacQueryTxPossible+0x110>

    // Setup ADR request
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    adrNext.Version = Nvm.MacGroup2.Version;
#endif /* LORAMAC_VERSION */
    adrNext.UpdateChanMask = false;
 8011d50:	2300      	movs	r3, #0
 8011d52:	753b      	strb	r3, [r7, #20]
    adrNext.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 8011d54:	4b36      	ldr	r3, [pc, #216]	@ (8011e30 <LoRaMacQueryTxPossible+0x118>)
 8011d56:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 8011d5a:	757b      	strb	r3, [r7, #21]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8011d5c:	4b34      	ldr	r3, [pc, #208]	@ (8011e30 <LoRaMacQueryTxPossible+0x118>)
 8011d5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011d60:	61bb      	str	r3, [r7, #24]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 8011d62:	4b34      	ldr	r3, [pc, #208]	@ (8011e34 <LoRaMacQueryTxPossible+0x11c>)
 8011d64:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	@ 0x400
 8011d68:	83bb      	strh	r3, [r7, #28]
    adrNext.AdrAckDelay = MacCtx.AdrAckDelay;
 8011d6a:	4b32      	ldr	r3, [pc, #200]	@ (8011e34 <LoRaMacQueryTxPossible+0x11c>)
 8011d6c:	f8b3 3402 	ldrh.w	r3, [r3, #1026]	@ 0x402
 8011d70:	83fb      	strh	r3, [r7, #30]
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8011d72:	4b2f      	ldr	r3, [pc, #188]	@ (8011e30 <LoRaMacQueryTxPossible+0x118>)
 8011d74:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 8011d78:	f887 3020 	strb.w	r3, [r7, #32]
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 8011d7c:	4b2c      	ldr	r3, [pc, #176]	@ (8011e30 <LoRaMacQueryTxPossible+0x118>)
 8011d7e:	f993 3038 	ldrsb.w	r3, [r3, #56]	@ 0x38
 8011d82:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    adrNext.NbTrans = MacCtx.ChannelsNbTransCounter;
 8011d86:	4b2b      	ldr	r3, [pc, #172]	@ (8011e34 <LoRaMacQueryTxPossible+0x11c>)
 8011d88:	f893 341c 	ldrb.w	r3, [r3, #1052]	@ 0x41c
 8011d8c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
#endif /* LORAMAC_VERSION */
    adrNext.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8011d90:	4b27      	ldr	r3, [pc, #156]	@ (8011e30 <LoRaMacQueryTxPossible+0x118>)
 8011d92:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 8011d96:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    adrNext.Region = Nvm.MacGroup2.Region;
 8011d9a:	4b25      	ldr	r3, [pc, #148]	@ (8011e30 <LoRaMacQueryTxPossible+0x118>)
 8011d9c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8011da0:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
    // We call the function for information purposes only. We don't want to
    // apply the datarate, the tx power and the ADR ack counter.
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &adrAckCounter );
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &nbTrans, &adrAckCounter );
 8011da4:	f107 040d 	add.w	r4, r7, #13
 8011da8:	f107 020e 	add.w	r2, r7, #14
 8011dac:	f107 010f 	add.w	r1, r7, #15
 8011db0:	f107 0014 	add.w	r0, r7, #20
 8011db4:	f107 0310 	add.w	r3, r7, #16
 8011db8:	9300      	str	r3, [sp, #0]
 8011dba:	4623      	mov	r3, r4
 8011dbc:	f001 f852 	bl	8012e64 <LoRaMacAdrCalcNext>
#endif /* LORAMAC_VERSION */

    txInfo->CurrentPossiblePayloadSize = GetMaxAppPayloadWithoutFOptsLength( datarate );
 8011dc0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011dc4:	4618      	mov	r0, r3
 8011dc6:	f7fd feb9 	bl	800fb3c <GetMaxAppPayloadWithoutFOptsLength>
 8011dca:	4603      	mov	r3, r0
 8011dcc:	461a      	mov	r2, r3
 8011dce:	683b      	ldr	r3, [r7, #0]
 8011dd0:	705a      	strb	r2, [r3, #1]

    if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8011dd2:	f107 0308 	add.w	r3, r7, #8
 8011dd6:	4618      	mov	r0, r3
 8011dd8:	f001 fbd8 	bl	801358c <LoRaMacCommandsGetSizeSerializedCmds>
 8011ddc:	4603      	mov	r3, r0
 8011dde:	2b00      	cmp	r3, #0
 8011de0:	d001      	beq.n	8011de6 <LoRaMacQueryTxPossible+0xce>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8011de2:	2313      	movs	r3, #19
 8011de4:	e020      	b.n	8011e28 <LoRaMacQueryTxPossible+0x110>
    }

    // Verify if the MAC commands fit into the FOpts and into the maximum payload.
    if( ( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH >= macCmdsSize ) && ( txInfo->CurrentPossiblePayloadSize >= macCmdsSize ) )
 8011de6:	68bb      	ldr	r3, [r7, #8]
 8011de8:	2b0f      	cmp	r3, #15
 8011dea:	d819      	bhi.n	8011e20 <LoRaMacQueryTxPossible+0x108>
 8011dec:	683b      	ldr	r3, [r7, #0]
 8011dee:	785b      	ldrb	r3, [r3, #1]
 8011df0:	461a      	mov	r2, r3
 8011df2:	68bb      	ldr	r3, [r7, #8]
 8011df4:	429a      	cmp	r2, r3
 8011df6:	d313      	bcc.n	8011e20 <LoRaMacQueryTxPossible+0x108>
    {
        txInfo->MaxPossibleApplicationDataSize = txInfo->CurrentPossiblePayloadSize - macCmdsSize;
 8011df8:	683b      	ldr	r3, [r7, #0]
 8011dfa:	785a      	ldrb	r2, [r3, #1]
 8011dfc:	68bb      	ldr	r3, [r7, #8]
 8011dfe:	b2db      	uxtb	r3, r3
 8011e00:	1ad3      	subs	r3, r2, r3
 8011e02:	b2da      	uxtb	r2, r3
 8011e04:	683b      	ldr	r3, [r7, #0]
 8011e06:	701a      	strb	r2, [r3, #0]

        // Verify if the application data together with MAC command fit into the maximum payload.
        if( txInfo->CurrentPossiblePayloadSize >= ( macCmdsSize + size ) )
 8011e08:	683b      	ldr	r3, [r7, #0]
 8011e0a:	785b      	ldrb	r3, [r3, #1]
 8011e0c:	4619      	mov	r1, r3
 8011e0e:	79fa      	ldrb	r2, [r7, #7]
 8011e10:	68bb      	ldr	r3, [r7, #8]
 8011e12:	4413      	add	r3, r2
 8011e14:	4299      	cmp	r1, r3
 8011e16:	d301      	bcc.n	8011e1c <LoRaMacQueryTxPossible+0x104>
        {
            return LORAMAC_STATUS_OK;
 8011e18:	2300      	movs	r3, #0
 8011e1a:	e005      	b.n	8011e28 <LoRaMacQueryTxPossible+0x110>
        }
        else
        {
           return LORAMAC_STATUS_LENGTH_ERROR;
 8011e1c:	2308      	movs	r3, #8
 8011e1e:	e003      	b.n	8011e28 <LoRaMacQueryTxPossible+0x110>
        }
    }
    else
    {
        txInfo->MaxPossibleApplicationDataSize = 0;
 8011e20:	683b      	ldr	r3, [r7, #0]
 8011e22:	2200      	movs	r2, #0
 8011e24:	701a      	strb	r2, [r3, #0]
        return LORAMAC_STATUS_LENGTH_ERROR;
 8011e26:	2308      	movs	r3, #8
    }
}
 8011e28:	4618      	mov	r0, r3
 8011e2a:	372c      	adds	r7, #44	@ 0x2c
 8011e2c:	46bd      	mov	sp, r7
 8011e2e:	bd90      	pop	{r4, r7, pc}
 8011e30:	20000df0 	.word	0x20000df0
 8011e34:	200008d0 	.word	0x200008d0

08011e38 <LoRaMacMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibGetRequestConfirm( MibRequestConfirm_t* mibGet )
{
 8011e38:	b590      	push	{r4, r7, lr}
 8011e3a:	b087      	sub	sp, #28
 8011e3c:	af00      	add	r7, sp, #0
 8011e3e:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8011e40:	2300      	movs	r3, #0
 8011e42:	75fb      	strb	r3, [r7, #23]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( mibGet == NULL )
 8011e44:	687b      	ldr	r3, [r7, #4]
 8011e46:	2b00      	cmp	r3, #0
 8011e48:	d101      	bne.n	8011e4e <LoRaMacMibGetRequestConfirm+0x16>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8011e4a:	2303      	movs	r3, #3
 8011e4c:	e191      	b.n	8012172 <LoRaMacMibGetRequestConfirm+0x33a>
    }

    switch( mibGet->Type )
 8011e4e:	687b      	ldr	r3, [r7, #4]
 8011e50:	781b      	ldrb	r3, [r3, #0]
 8011e52:	2b39      	cmp	r3, #57	@ 0x39
 8011e54:	f200 8186 	bhi.w	8012164 <LoRaMacMibGetRequestConfirm+0x32c>
 8011e58:	a201      	add	r2, pc, #4	@ (adr r2, 8011e60 <LoRaMacMibGetRequestConfirm+0x28>)
 8011e5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011e5e:	bf00      	nop
 8011e60:	08011f49 	.word	0x08011f49
 8011e64:	08011f55 	.word	0x08011f55
 8011e68:	08011f61 	.word	0x08011f61
 8011e6c:	08011f6d 	.word	0x08011f6d
 8011e70:	08011f79 	.word	0x08011f79
 8011e74:	08011f85 	.word	0x08011f85
 8011e78:	08011f91 	.word	0x08011f91
 8011e7c:	08012165 	.word	0x08012165
 8011e80:	08012165 	.word	0x08012165
 8011e84:	08012165 	.word	0x08012165
 8011e88:	08012165 	.word	0x08012165
 8011e8c:	08012165 	.word	0x08012165
 8011e90:	08012165 	.word	0x08012165
 8011e94:	08012165 	.word	0x08012165
 8011e98:	08012165 	.word	0x08012165
 8011e9c:	08011f9d 	.word	0x08011f9d
 8011ea0:	08011fa9 	.word	0x08011fa9
 8011ea4:	08011fb5 	.word	0x08011fb5
 8011ea8:	08011fd7 	.word	0x08011fd7
 8011eac:	08011fe9 	.word	0x08011fe9
 8011eb0:	08011ffb 	.word	0x08011ffb
 8011eb4:	0801200d 	.word	0x0801200d
 8011eb8:	08012041 	.word	0x08012041
 8011ebc:	0801201f 	.word	0x0801201f
 8011ec0:	08012063 	.word	0x08012063
 8011ec4:	0801206f 	.word	0x0801206f
 8011ec8:	08012079 	.word	0x08012079
 8011ecc:	08012083 	.word	0x08012083
 8011ed0:	0801208d 	.word	0x0801208d
 8011ed4:	08012097 	.word	0x08012097
 8011ed8:	080120a1 	.word	0x080120a1
 8011edc:	080120cd 	.word	0x080120cd
 8011ee0:	080120d9 	.word	0x080120d9
 8011ee4:	080120f1 	.word	0x080120f1
 8011ee8:	080120e5 	.word	0x080120e5
 8011eec:	080120fd 	.word	0x080120fd
 8011ef0:	08012107 	.word	0x08012107
 8011ef4:	08012113 	.word	0x08012113
 8011ef8:	0801212d 	.word	0x0801212d
 8011efc:	0801211d 	.word	0x0801211d
 8011f00:	08012125 	.word	0x08012125
 8011f04:	08012165 	.word	0x08012165
 8011f08:	08012139 	.word	0x08012139
 8011f0c:	08012165 	.word	0x08012165
 8011f10:	08012165 	.word	0x08012165
 8011f14:	08012165 	.word	0x08012165
 8011f18:	08012165 	.word	0x08012165
 8011f1c:	08012165 	.word	0x08012165
 8011f20:	08012165 	.word	0x08012165
 8011f24:	08012165 	.word	0x08012165
 8011f28:	08012165 	.word	0x08012165
 8011f2c:	08012165 	.word	0x08012165
 8011f30:	08012165 	.word	0x08012165
 8011f34:	08012165 	.word	0x08012165
 8011f38:	08012165 	.word	0x08012165
 8011f3c:	08012165 	.word	0x08012165
 8011f40:	0801214d 	.word	0x0801214d
 8011f44:	08012159 	.word	0x08012159
    {
        case MIB_DEVICE_CLASS:
        {
            mibGet->Param.Class = Nvm.MacGroup2.DeviceClass;
 8011f48:	4b8c      	ldr	r3, [pc, #560]	@ (801217c <LoRaMacMibGetRequestConfirm+0x344>)
 8011f4a:	f893 2104 	ldrb.w	r2, [r3, #260]	@ 0x104
 8011f4e:	687b      	ldr	r3, [r7, #4]
 8011f50:	711a      	strb	r2, [r3, #4]
            break;
 8011f52:	e10d      	b.n	8012170 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            mibGet->Param.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 8011f54:	4b89      	ldr	r3, [pc, #548]	@ (801217c <LoRaMacMibGetRequestConfirm+0x344>)
 8011f56:	f893 211c 	ldrb.w	r2, [r3, #284]	@ 0x11c
 8011f5a:	687b      	ldr	r3, [r7, #4]
 8011f5c:	711a      	strb	r2, [r3, #4]
            break;
 8011f5e:	e107      	b.n	8012170 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_DEV_EUI:
        {
            mibGet->Param.DevEui = SecureElementGetDevEui( );
 8011f60:	f7fa fc76 	bl	800c850 <SecureElementGetDevEui>
 8011f64:	4602      	mov	r2, r0
 8011f66:	687b      	ldr	r3, [r7, #4]
 8011f68:	605a      	str	r2, [r3, #4]
            break;
 8011f6a:	e101      	b.n	8012170 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_JOIN_EUI:
        {
            mibGet->Param.JoinEui = SecureElementGetJoinEui( );
 8011f6c:	f7fa fc92 	bl	800c894 <SecureElementGetJoinEui>
 8011f70:	4602      	mov	r2, r0
 8011f72:	687b      	ldr	r3, [r7, #4]
 8011f74:	605a      	str	r2, [r3, #4]
            break;
 8011f76:	e0fb      	b.n	8012170 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_ADR:
        {
            mibGet->Param.AdrEnable = Nvm.MacGroup2.AdrCtrlOn;
 8011f78:	4b80      	ldr	r3, [pc, #512]	@ (801217c <LoRaMacMibGetRequestConfirm+0x344>)
 8011f7a:	f893 2106 	ldrb.w	r2, [r3, #262]	@ 0x106
 8011f7e:	687b      	ldr	r3, [r7, #4]
 8011f80:	711a      	strb	r2, [r3, #4]
            break;
 8011f82:	e0f5      	b.n	8012170 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_NET_ID:
        {
            mibGet->Param.NetID = Nvm.MacGroup2.NetID;
 8011f84:	4b7d      	ldr	r3, [pc, #500]	@ (801217c <LoRaMacMibGetRequestConfirm+0x344>)
 8011f86:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 8011f8a:	687b      	ldr	r3, [r7, #4]
 8011f8c:	605a      	str	r2, [r3, #4]
            break;
 8011f8e:	e0ef      	b.n	8012170 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_DEV_ADDR:
        {
            mibGet->Param.DevAddr = Nvm.MacGroup2.DevAddr;
 8011f90:	4b7a      	ldr	r3, [pc, #488]	@ (801217c <LoRaMacMibGetRequestConfirm+0x344>)
 8011f92:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8011f96:	687b      	ldr	r3, [r7, #4]
 8011f98:	605a      	str	r2, [r3, #4]
            break;
 8011f9a:	e0e9      	b.n	8012170 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_PUBLIC_NETWORK:
        {
            mibGet->Param.EnablePublicNetwork = Nvm.MacGroup2.PublicNetwork;
 8011f9c:	4b77      	ldr	r3, [pc, #476]	@ (801217c <LoRaMacMibGetRequestConfirm+0x344>)
 8011f9e:	f893 2105 	ldrb.w	r2, [r3, #261]	@ 0x105
 8011fa2:	687b      	ldr	r3, [r7, #4]
 8011fa4:	711a      	strb	r2, [r3, #4]
            break;
 8011fa6:	e0e3      	b.n	8012170 <LoRaMacMibGetRequestConfirm+0x338>
        }
        /* ST_WORKAROUND_BEGIN: Keep repeater feature */
        case MIB_REPEATER_SUPPORT:
        {
            mibGet->Param.EnableRepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 8011fa8:	4b74      	ldr	r3, [pc, #464]	@ (801217c <LoRaMacMibGetRequestConfirm+0x344>)
 8011faa:	f893 2080 	ldrb.w	r2, [r3, #128]	@ 0x80
 8011fae:	687b      	ldr	r3, [r7, #4]
 8011fb0:	711a      	strb	r2, [r3, #4]
            break;
 8011fb2:	e0dd      	b.n	8012170 <LoRaMacMibGetRequestConfirm+0x338>
        }
        /* ST_WORKAROUND_END */
        case MIB_CHANNELS:
        {
            getPhy.Attribute = PHY_CHANNELS;
 8011fb4:	231c      	movs	r3, #28
 8011fb6:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011fb8:	4b70      	ldr	r3, [pc, #448]	@ (801217c <LoRaMacMibGetRequestConfirm+0x344>)
 8011fba:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8011fbe:	f107 0210 	add.w	r2, r7, #16
 8011fc2:	4611      	mov	r1, r2
 8011fc4:	4618      	mov	r0, r3
 8011fc6:	f002 ff99 	bl	8014efc <RegionGetPhyParam>
 8011fca:	4603      	mov	r3, r0
 8011fcc:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelList = phyParam.Channels;
 8011fce:	68fa      	ldr	r2, [r7, #12]
 8011fd0:	687b      	ldr	r3, [r7, #4]
 8011fd2:	605a      	str	r2, [r3, #4]
            break;
 8011fd4:	e0cc      	b.n	8012170 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_RX2_CHANNEL:
        {
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParams.Rx2Channel;
 8011fd6:	687b      	ldr	r3, [r7, #4]
 8011fd8:	4a68      	ldr	r2, [pc, #416]	@ (801217c <LoRaMacMibGetRequestConfirm+0x344>)
 8011fda:	3304      	adds	r3, #4
 8011fdc:	3264      	adds	r2, #100	@ 0x64
 8011fde:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011fe2:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8011fe6:	e0c3      	b.n	8012170 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 8011fe8:	687b      	ldr	r3, [r7, #4]
 8011fea:	4a64      	ldr	r2, [pc, #400]	@ (801217c <LoRaMacMibGetRequestConfirm+0x344>)
 8011fec:	3304      	adds	r3, #4
 8011fee:	32a8      	adds	r2, #168	@ 0xa8
 8011ff0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011ff4:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8011ff8:	e0ba      	b.n	8012170 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_RXC_CHANNEL:
        {
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParams.RxCChannel;
 8011ffa:	687b      	ldr	r3, [r7, #4]
 8011ffc:	4a5f      	ldr	r2, [pc, #380]	@ (801217c <LoRaMacMibGetRequestConfirm+0x344>)
 8011ffe:	3304      	adds	r3, #4
 8012000:	326c      	adds	r2, #108	@ 0x6c
 8012002:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012006:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 801200a:	e0b1      	b.n	8012170 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 801200c:	687b      	ldr	r3, [r7, #4]
 801200e:	4a5b      	ldr	r2, [pc, #364]	@ (801217c <LoRaMacMibGetRequestConfirm+0x344>)
 8012010:	3304      	adds	r3, #4
 8012012:	32b0      	adds	r2, #176	@ 0xb0
 8012014:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012018:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 801201c:	e0a8      	b.n	8012170 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_DEFAULT_MASK;
 801201e:	231a      	movs	r3, #26
 8012020:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012022:	4b56      	ldr	r3, [pc, #344]	@ (801217c <LoRaMacMibGetRequestConfirm+0x344>)
 8012024:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8012028:	f107 0210 	add.w	r2, r7, #16
 801202c:	4611      	mov	r1, r2
 801202e:	4618      	mov	r0, r3
 8012030:	f002 ff64 	bl	8014efc <RegionGetPhyParam>
 8012034:	4603      	mov	r3, r0
 8012036:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsDefaultMask = phyParam.ChannelsMask;
 8012038:	68fa      	ldr	r2, [r7, #12]
 801203a:	687b      	ldr	r3, [r7, #4]
 801203c:	605a      	str	r2, [r3, #4]
            break;
 801203e:	e097      	b.n	8012170 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_CHANNELS_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_MASK;
 8012040:	2319      	movs	r3, #25
 8012042:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012044:	4b4d      	ldr	r3, [pc, #308]	@ (801217c <LoRaMacMibGetRequestConfirm+0x344>)
 8012046:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 801204a:	f107 0210 	add.w	r2, r7, #16
 801204e:	4611      	mov	r1, r2
 8012050:	4618      	mov	r0, r3
 8012052:	f002 ff53 	bl	8014efc <RegionGetPhyParam>
 8012056:	4603      	mov	r3, r0
 8012058:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsMask = phyParam.ChannelsMask;
 801205a:	68fa      	ldr	r2, [r7, #12]
 801205c:	687b      	ldr	r3, [r7, #4]
 801205e:	605a      	str	r2, [r3, #4]
            break;
 8012060:	e086      	b.n	8012170 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            mibGet->Param.ChannelsNbTrans = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 8012062:	4b46      	ldr	r3, [pc, #280]	@ (801217c <LoRaMacMibGetRequestConfirm+0x344>)
 8012064:	f893 2060 	ldrb.w	r2, [r3, #96]	@ 0x60
 8012068:	687b      	ldr	r3, [r7, #4]
 801206a:	711a      	strb	r2, [r3, #4]
            break;
 801206c:	e080      	b.n	8012170 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            mibGet->Param.MaxRxWindow = Nvm.MacGroup2.MacParams.MaxRxWindow;
 801206e:	4b43      	ldr	r3, [pc, #268]	@ (801217c <LoRaMacMibGetRequestConfirm+0x344>)
 8012070:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8012072:	687b      	ldr	r3, [r7, #4]
 8012074:	605a      	str	r2, [r3, #4]
            break;
 8012076:	e07b      	b.n	8012170 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            mibGet->Param.ReceiveDelay1 = Nvm.MacGroup2.MacParams.ReceiveDelay1;
 8012078:	4b40      	ldr	r3, [pc, #256]	@ (801217c <LoRaMacMibGetRequestConfirm+0x344>)
 801207a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801207c:	687b      	ldr	r3, [r7, #4]
 801207e:	605a      	str	r2, [r3, #4]
            break;
 8012080:	e076      	b.n	8012170 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            mibGet->Param.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay2;
 8012082:	4b3e      	ldr	r3, [pc, #248]	@ (801217c <LoRaMacMibGetRequestConfirm+0x344>)
 8012084:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8012086:	687b      	ldr	r3, [r7, #4]
 8012088:	605a      	str	r2, [r3, #4]
            break;
 801208a:	e071      	b.n	8012170 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            mibGet->Param.JoinAcceptDelay1 = Nvm.MacGroup2.MacParams.JoinAcceptDelay1;
 801208c:	4b3b      	ldr	r3, [pc, #236]	@ (801217c <LoRaMacMibGetRequestConfirm+0x344>)
 801208e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8012090:	687b      	ldr	r3, [r7, #4]
 8012092:	605a      	str	r2, [r3, #4]
            break;
 8012094:	e06c      	b.n	8012170 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            mibGet->Param.JoinAcceptDelay2 = Nvm.MacGroup2.MacParams.JoinAcceptDelay2;
 8012096:	4b39      	ldr	r3, [pc, #228]	@ (801217c <LoRaMacMibGetRequestConfirm+0x344>)
 8012098:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 801209a:	687b      	ldr	r3, [r7, #4]
 801209c:	605a      	str	r2, [r3, #4]
            break;
 801209e:	e067      	b.n	8012170 <LoRaMacMibGetRequestConfirm+0x338>
        }
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
        case MIB_CHANNELS_MIN_TX_DATARATE:
        {
            getPhy.Attribute = PHY_MIN_TX_DR;
 80120a0:	2302      	movs	r3, #2
 80120a2:	743b      	strb	r3, [r7, #16]
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 80120a4:	4b35      	ldr	r3, [pc, #212]	@ (801217c <LoRaMacMibGetRequestConfirm+0x344>)
 80120a6:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 80120aa:	74bb      	strb	r3, [r7, #18]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80120ac:	4b33      	ldr	r3, [pc, #204]	@ (801217c <LoRaMacMibGetRequestConfirm+0x344>)
 80120ae:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80120b2:	f107 0210 	add.w	r2, r7, #16
 80120b6:	4611      	mov	r1, r2
 80120b8:	4618      	mov	r0, r3
 80120ba:	f002 ff1f 	bl	8014efc <RegionGetPhyParam>
 80120be:	4603      	mov	r3, r0
 80120c0:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsMinTxDatarate = phyParam.Value;
 80120c2:	68fb      	ldr	r3, [r7, #12]
 80120c4:	b25a      	sxtb	r2, r3
 80120c6:	687b      	ldr	r3, [r7, #4]
 80120c8:	711a      	strb	r2, [r3, #4]
            break;
 80120ca:	e051      	b.n	8012170 <LoRaMacMibGetRequestConfirm+0x338>
        }
#endif /* LORAMAC_VERSION */
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            mibGet->Param.ChannelsDefaultDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 80120cc:	4b2b      	ldr	r3, [pc, #172]	@ (801217c <LoRaMacMibGetRequestConfirm+0x344>)
 80120ce:	f993 20cd 	ldrsb.w	r2, [r3, #205]	@ 0xcd
 80120d2:	687b      	ldr	r3, [r7, #4]
 80120d4:	711a      	strb	r2, [r3, #4]
            break;
 80120d6:	e04b      	b.n	8012170 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_CHANNELS_DATARATE:
        {
            mibGet->Param.ChannelsDatarate = Nvm.MacGroup1.ChannelsDatarate;
 80120d8:	4b28      	ldr	r3, [pc, #160]	@ (801217c <LoRaMacMibGetRequestConfirm+0x344>)
 80120da:	f993 2039 	ldrsb.w	r2, [r3, #57]	@ 0x39
 80120de:	687b      	ldr	r3, [r7, #4]
 80120e0:	711a      	strb	r2, [r3, #4]
            break;
 80120e2:	e045      	b.n	8012170 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            mibGet->Param.ChannelsDefaultTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 80120e4:	4b25      	ldr	r3, [pc, #148]	@ (801217c <LoRaMacMibGetRequestConfirm+0x344>)
 80120e6:	f993 20cc 	ldrsb.w	r2, [r3, #204]	@ 0xcc
 80120ea:	687b      	ldr	r3, [r7, #4]
 80120ec:	711a      	strb	r2, [r3, #4]
            break;
 80120ee:	e03f      	b.n	8012170 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_CHANNELS_TX_POWER:
        {
            mibGet->Param.ChannelsTxPower = Nvm.MacGroup1.ChannelsTxPower;
 80120f0:	4b22      	ldr	r3, [pc, #136]	@ (801217c <LoRaMacMibGetRequestConfirm+0x344>)
 80120f2:	f993 2038 	ldrsb.w	r2, [r3, #56]	@ 0x38
 80120f6:	687b      	ldr	r3, [r7, #4]
 80120f8:	711a      	strb	r2, [r3, #4]
            break;
 80120fa:	e039      	b.n	8012170 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            mibGet->Param.SystemMaxRxError = Nvm.MacGroup2.MacParams.SystemMaxRxError;
 80120fc:	4b1f      	ldr	r3, [pc, #124]	@ (801217c <LoRaMacMibGetRequestConfirm+0x344>)
 80120fe:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8012100:	687b      	ldr	r3, [r7, #4]
 8012102:	605a      	str	r2, [r3, #4]
            break;
 8012104:	e034      	b.n	8012170 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            mibGet->Param.MinRxSymbols = Nvm.MacGroup2.MacParams.MinRxSymbols;
 8012106:	4b1d      	ldr	r3, [pc, #116]	@ (801217c <LoRaMacMibGetRequestConfirm+0x344>)
 8012108:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 801210c:	687b      	ldr	r3, [r7, #4]
 801210e:	711a      	strb	r2, [r3, #4]
            break;
 8012110:	e02e      	b.n	8012170 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_ANTENNA_GAIN:
        {
            mibGet->Param.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 8012112:	4b1a      	ldr	r3, [pc, #104]	@ (801217c <LoRaMacMibGetRequestConfirm+0x344>)
 8012114:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8012116:	687b      	ldr	r3, [r7, #4]
 8012118:	605a      	str	r2, [r3, #4]
            break;
 801211a:	e029      	b.n	8012170 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_NVM_CTXS:
        {
            mibGet->Param.Contexts = &Nvm;
 801211c:	687b      	ldr	r3, [r7, #4]
 801211e:	4a17      	ldr	r2, [pc, #92]	@ (801217c <LoRaMacMibGetRequestConfirm+0x344>)
 8012120:	605a      	str	r2, [r3, #4]
            break;
 8012122:	e025      	b.n	8012170 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_NVM_BKP_CTXS:
        {
            mibGet->Param.BackupContexts = &NvmBackup;
 8012124:	687b      	ldr	r3, [r7, #4]
 8012126:	4a16      	ldr	r2, [pc, #88]	@ (8012180 <LoRaMacMibGetRequestConfirm+0x348>)
 8012128:	605a      	str	r2, [r3, #4]
            break;
 801212a:	e021      	b.n	8012170 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            mibGet->Param.DefaultAntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 801212c:	4b13      	ldr	r3, [pc, #76]	@ (801217c <LoRaMacMibGetRequestConfirm+0x344>)
 801212e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8012132:	687b      	ldr	r3, [r7, #4]
 8012134:	605a      	str	r2, [r3, #4]
            break;
 8012136:	e01b      	b.n	8012170 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_LORAWAN_VERSION:
        {
            mibGet->Param.LrWanVersion.LoRaWan = Nvm.MacGroup2.Version;
 8012138:	687b      	ldr	r3, [r7, #4]
 801213a:	4a10      	ldr	r2, [pc, #64]	@ (801217c <LoRaMacMibGetRequestConfirm+0x344>)
 801213c:	f8d2 2118 	ldr.w	r2, [r2, #280]	@ 0x118
 8012140:	605a      	str	r2, [r3, #4]
            mibGet->Param.LrWanVersion.LoRaWanRegion = RegionGetVersion( );
 8012142:	687c      	ldr	r4, [r7, #4]
 8012144:	f003 f850 	bl	80151e8 <RegionGetVersion>
 8012148:	60a0      	str	r0, [r4, #8]
            break;
 801214a:	e011      	b.n	8012170 <LoRaMacMibGetRequestConfirm+0x338>
        }
    case MIB_RXB_C_TIMEOUT:
        {
            mibGet->Param.RxBCTimeout = Nvm.MacGroup2.MacParams.RxBCTimeout;
 801214c:	4b0b      	ldr	r3, [pc, #44]	@ (801217c <LoRaMacMibGetRequestConfirm+0x344>)
 801214e:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8012152:	687b      	ldr	r3, [r7, #4]
 8012154:	605a      	str	r2, [r3, #4]
            break;
 8012156:	e00b      	b.n	8012170 <LoRaMacMibGetRequestConfirm+0x338>
        }
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
        case MIB_IS_CERT_FPORT_ON:
        {
            mibGet->Param.IsCertPortOn = Nvm.MacGroup2.IsCertPortOn;
 8012158:	4b08      	ldr	r3, [pc, #32]	@ (801217c <LoRaMacMibGetRequestConfirm+0x344>)
 801215a:	f893 210b 	ldrb.w	r2, [r3, #267]	@ 0x10b
 801215e:	687b      	ldr	r3, [r7, #4]
 8012160:	711a      	strb	r2, [r3, #4]
            break;
 8012162:	e005      	b.n	8012170 <LoRaMacMibGetRequestConfirm+0x338>
        }
#endif /* LORAMAC_VERSION */
        default:
        {
            status = LoRaMacClassBMibGetRequestConfirm( mibGet );
 8012164:	6878      	ldr	r0, [r7, #4]
 8012166:	f000 ffca 	bl	80130fe <LoRaMacClassBMibGetRequestConfirm>
 801216a:	4603      	mov	r3, r0
 801216c:	75fb      	strb	r3, [r7, #23]
            break;
 801216e:	bf00      	nop
        }
    }
    return status;
 8012170:	7dfb      	ldrb	r3, [r7, #23]
}
 8012172:	4618      	mov	r0, r3
 8012174:	371c      	adds	r7, #28
 8012176:	46bd      	mov	sp, r7
 8012178:	bd90      	pop	{r4, r7, pc}
 801217a:	bf00      	nop
 801217c:	20000df0 	.word	0x20000df0
 8012180:	2000136c 	.word	0x2000136c

08012184 <LoRaMacMibSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibSetRequestConfirm( MibRequestConfirm_t* mibSet )
{
 8012184:	b580      	push	{r7, lr}
 8012186:	b086      	sub	sp, #24
 8012188:	af00      	add	r7, sp, #0
 801218a:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 801218c:	2300      	movs	r3, #0
 801218e:	75fb      	strb	r3, [r7, #23]
    ChanMaskSetParams_t chanMaskSet;
    VerifyParams_t verify;

    if( mibSet == NULL )
 8012190:	687b      	ldr	r3, [r7, #4]
 8012192:	2b00      	cmp	r3, #0
 8012194:	d101      	bne.n	801219a <LoRaMacMibSetRequestConfirm+0x16>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8012196:	2303      	movs	r3, #3
 8012198:	e35c      	b.n	8012854 <LoRaMacMibSetRequestConfirm+0x6d0>
    }
    if( ( MacCtx.MacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING )
 801219a:	4bb9      	ldr	r3, [pc, #740]	@ (8012480 <LoRaMacMibSetRequestConfirm+0x2fc>)
 801219c:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 80121a0:	f003 0302 	and.w	r3, r3, #2
 80121a4:	2b00      	cmp	r3, #0
 80121a6:	d001      	beq.n	80121ac <LoRaMacMibSetRequestConfirm+0x28>
    {
        return LORAMAC_STATUS_BUSY;
 80121a8:	2301      	movs	r3, #1
 80121aa:	e353      	b.n	8012854 <LoRaMacMibSetRequestConfirm+0x6d0>
    }

    switch( mibSet->Type )
 80121ac:	687b      	ldr	r3, [r7, #4]
 80121ae:	781b      	ldrb	r3, [r3, #0]
 80121b0:	2b39      	cmp	r3, #57	@ 0x39
 80121b2:	f200 8323 	bhi.w	80127fc <LoRaMacMibSetRequestConfirm+0x678>
 80121b6:	a201      	add	r2, pc, #4	@ (adr r2, 80121bc <LoRaMacMibSetRequestConfirm+0x38>)
 80121b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80121bc:	080122a5 	.word	0x080122a5
 80121c0:	080122b5 	.word	0x080122b5
 80121c4:	080122cf 	.word	0x080122cf
 80121c8:	080122e7 	.word	0x080122e7
 80121cc:	080122ff 	.word	0x080122ff
 80121d0:	0801230b 	.word	0x0801230b
 80121d4:	08012317 	.word	0x08012317
 80121d8:	08012323 	.word	0x08012323
 80121dc:	08012349 	.word	0x08012349
 80121e0:	0801236f 	.word	0x0801236f
 80121e4:	08012395 	.word	0x08012395
 80121e8:	080123bb 	.word	0x080123bb
 80121ec:	080123e1 	.word	0x080123e1
 80121f0:	08012407 	.word	0x08012407
 80121f4:	0801242d 	.word	0x0801242d
 80121f8:	08012453 	.word	0x08012453
 80121fc:	08012473 	.word	0x08012473
 8012200:	080127fd 	.word	0x080127fd
 8012204:	0801248d 	.word	0x0801248d
 8012208:	080124fd 	.word	0x080124fd
 801220c:	0801253d 	.word	0x0801253d
 8012210:	0801259f 	.word	0x0801259f
 8012214:	0801260f 	.word	0x0801260f
 8012218:	080125df 	.word	0x080125df
 801221c:	0801263f 	.word	0x0801263f
 8012220:	08012661 	.word	0x08012661
 8012224:	0801266b 	.word	0x0801266b
 8012228:	08012675 	.word	0x08012675
 801222c:	0801267f 	.word	0x0801267f
 8012230:	08012689 	.word	0x08012689
 8012234:	080127fd 	.word	0x080127fd
 8012238:	08012693 	.word	0x08012693
 801223c:	080126c5 	.word	0x080126c5
 8012240:	08012731 	.word	0x08012731
 8012244:	080126ff 	.word	0x080126ff
 8012248:	0801276d 	.word	0x0801276d
 801224c:	08012783 	.word	0x08012783
 8012250:	0801279b 	.word	0x0801279b
 8012254:	080127a5 	.word	0x080127a5
 8012258:	080127b1 	.word	0x080127b1
 801225c:	080127fd 	.word	0x080127fd
 8012260:	080127bb 	.word	0x080127bb
 8012264:	080127fd 	.word	0x080127fd
 8012268:	080127fd 	.word	0x080127fd
 801226c:	080127fd 	.word	0x080127fd
 8012270:	080127fd 	.word	0x080127fd
 8012274:	080127fd 	.word	0x080127fd
 8012278:	080127fd 	.word	0x080127fd
 801227c:	080127fd 	.word	0x080127fd
 8012280:	080127fd 	.word	0x080127fd
 8012284:	080127fd 	.word	0x080127fd
 8012288:	080127fd 	.word	0x080127fd
 801228c:	080127fd 	.word	0x080127fd
 8012290:	080127fd 	.word	0x080127fd
 8012294:	080127fd 	.word	0x080127fd
 8012298:	080127fd 	.word	0x080127fd
 801229c:	080127e5 	.word	0x080127e5
 80122a0:	080127f1 	.word	0x080127f1
    {
        case MIB_DEVICE_CLASS:
        {
            status = SwitchClass( mibSet->Param.Class );
 80122a4:	687b      	ldr	r3, [r7, #4]
 80122a6:	791b      	ldrb	r3, [r3, #4]
 80122a8:	4618      	mov	r0, r3
 80122aa:	f7fd fb75 	bl	800f998 <SwitchClass>
 80122ae:	4603      	mov	r3, r0
 80122b0:	75fb      	strb	r3, [r7, #23]
            break;
 80122b2:	e2c4      	b.n	801283e <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            if( mibSet->Param.NetworkActivation != ACTIVATION_TYPE_OTAA  )
 80122b4:	687b      	ldr	r3, [r7, #4]
 80122b6:	791b      	ldrb	r3, [r3, #4]
 80122b8:	2b02      	cmp	r3, #2
 80122ba:	d005      	beq.n	80122c8 <LoRaMacMibSetRequestConfirm+0x144>
            {
                Nvm.MacGroup2.NetworkActivation = mibSet->Param.NetworkActivation;
 80122bc:	687b      	ldr	r3, [r7, #4]
 80122be:	791a      	ldrb	r2, [r3, #4]
 80122c0:	4b70      	ldr	r3, [pc, #448]	@ (8012484 <LoRaMacMibSetRequestConfirm+0x300>)
 80122c2:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c
            }
            else
            {   // Do not allow to set ACTIVATION_TYPE_OTAA since the MAC will set it automatically after a successful join process.
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 80122c6:	e2ba      	b.n	801283e <LoRaMacMibSetRequestConfirm+0x6ba>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80122c8:	2303      	movs	r3, #3
 80122ca:	75fb      	strb	r3, [r7, #23]
            break;
 80122cc:	e2b7      	b.n	801283e <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_DEV_EUI:
        {
            if( SecureElementSetDevEui( mibSet->Param.DevEui ) != SECURE_ELEMENT_SUCCESS )
 80122ce:	687b      	ldr	r3, [r7, #4]
 80122d0:	685b      	ldr	r3, [r3, #4]
 80122d2:	4618      	mov	r0, r3
 80122d4:	f7fa faa4 	bl	800c820 <SecureElementSetDevEui>
 80122d8:	4603      	mov	r3, r0
 80122da:	2b00      	cmp	r3, #0
 80122dc:	f000 8294 	beq.w	8012808 <LoRaMacMibSetRequestConfirm+0x684>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80122e0:	2303      	movs	r3, #3
 80122e2:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80122e4:	e290      	b.n	8012808 <LoRaMacMibSetRequestConfirm+0x684>
        }
        case MIB_JOIN_EUI:
        {
            if( SecureElementSetJoinEui( mibSet->Param.JoinEui ) != SECURE_ELEMENT_SUCCESS )
 80122e6:	687b      	ldr	r3, [r7, #4]
 80122e8:	685b      	ldr	r3, [r3, #4]
 80122ea:	4618      	mov	r0, r3
 80122ec:	f7fa faba 	bl	800c864 <SecureElementSetJoinEui>
 80122f0:	4603      	mov	r3, r0
 80122f2:	2b00      	cmp	r3, #0
 80122f4:	f000 828a 	beq.w	801280c <LoRaMacMibSetRequestConfirm+0x688>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80122f8:	2303      	movs	r3, #3
 80122fa:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80122fc:	e286      	b.n	801280c <LoRaMacMibSetRequestConfirm+0x688>
        }
        case MIB_ADR:
        {
            Nvm.MacGroup2.AdrCtrlOn = mibSet->Param.AdrEnable;
 80122fe:	687b      	ldr	r3, [r7, #4]
 8012300:	791a      	ldrb	r2, [r3, #4]
 8012302:	4b60      	ldr	r3, [pc, #384]	@ (8012484 <LoRaMacMibSetRequestConfirm+0x300>)
 8012304:	f883 2106 	strb.w	r2, [r3, #262]	@ 0x106
            break;
 8012308:	e299      	b.n	801283e <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_NET_ID:
        {
            Nvm.MacGroup2.NetID = mibSet->Param.NetID;
 801230a:	687b      	ldr	r3, [r7, #4]
 801230c:	685b      	ldr	r3, [r3, #4]
 801230e:	4a5d      	ldr	r2, [pc, #372]	@ (8012484 <LoRaMacMibSetRequestConfirm+0x300>)
 8012310:	f8c2 30d0 	str.w	r3, [r2, #208]	@ 0xd0
            break;
 8012314:	e293      	b.n	801283e <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_DEV_ADDR:
        {
            Nvm.MacGroup2.DevAddr = mibSet->Param.DevAddr;
 8012316:	687b      	ldr	r3, [r7, #4]
 8012318:	685b      	ldr	r3, [r3, #4]
 801231a:	4a5a      	ldr	r2, [pc, #360]	@ (8012484 <LoRaMacMibSetRequestConfirm+0x300>)
 801231c:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
            break;
 8012320:	e28d      	b.n	801283e <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_APP_KEY:
        {
            if( mibSet->Param.AppKey != NULL )
 8012322:	687b      	ldr	r3, [r7, #4]
 8012324:	685b      	ldr	r3, [r3, #4]
 8012326:	2b00      	cmp	r3, #0
 8012328:	d00b      	beq.n	8012342 <LoRaMacMibSetRequestConfirm+0x1be>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_KEY, mibSet->Param.AppKey ) )
 801232a:	687b      	ldr	r3, [r7, #4]
 801232c:	685b      	ldr	r3, [r3, #4]
 801232e:	4619      	mov	r1, r3
 8012330:	2000      	movs	r0, #0
 8012332:	f001 ffff 	bl	8014334 <LoRaMacCryptoSetKey>
 8012336:	4603      	mov	r3, r0
 8012338:	2b00      	cmp	r3, #0
 801233a:	f000 8269 	beq.w	8012810 <LoRaMacMibSetRequestConfirm+0x68c>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 801233e:	2311      	movs	r3, #17
 8012340:	e288      	b.n	8012854 <LoRaMacMibSetRequestConfirm+0x6d0>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012342:	2303      	movs	r3, #3
 8012344:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8012346:	e263      	b.n	8012810 <LoRaMacMibSetRequestConfirm+0x68c>
        }
        case MIB_NWK_KEY:
        {
            if( mibSet->Param.NwkKey != NULL )
 8012348:	687b      	ldr	r3, [r7, #4]
 801234a:	685b      	ldr	r3, [r3, #4]
 801234c:	2b00      	cmp	r3, #0
 801234e:	d00b      	beq.n	8012368 <LoRaMacMibSetRequestConfirm+0x1e4>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_KEY, mibSet->Param.NwkKey ) )
 8012350:	687b      	ldr	r3, [r7, #4]
 8012352:	685b      	ldr	r3, [r3, #4]
 8012354:	4619      	mov	r1, r3
 8012356:	2001      	movs	r0, #1
 8012358:	f001 ffec 	bl	8014334 <LoRaMacCryptoSetKey>
 801235c:	4603      	mov	r3, r0
 801235e:	2b00      	cmp	r3, #0
 8012360:	f000 8258 	beq.w	8012814 <LoRaMacMibSetRequestConfirm+0x690>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8012364:	2311      	movs	r3, #17
 8012366:	e275      	b.n	8012854 <LoRaMacMibSetRequestConfirm+0x6d0>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012368:	2303      	movs	r3, #3
 801236a:	75fb      	strb	r3, [r7, #23]
            }
            break;
 801236c:	e252      	b.n	8012814 <LoRaMacMibSetRequestConfirm+0x690>
            break;
        }
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        case MIB_NWK_S_KEY:
        {
            if( mibSet->Param.NwkSKey != NULL )
 801236e:	687b      	ldr	r3, [r7, #4]
 8012370:	685b      	ldr	r3, [r3, #4]
 8012372:	2b00      	cmp	r3, #0
 8012374:	d00b      	beq.n	801238e <LoRaMacMibSetRequestConfirm+0x20a>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_S_KEY, mibSet->Param.NwkSKey ) )
 8012376:	687b      	ldr	r3, [r7, #4]
 8012378:	685b      	ldr	r3, [r3, #4]
 801237a:	4619      	mov	r1, r3
 801237c:	2002      	movs	r0, #2
 801237e:	f001 ffd9 	bl	8014334 <LoRaMacCryptoSetKey>
 8012382:	4603      	mov	r3, r0
 8012384:	2b00      	cmp	r3, #0
 8012386:	f000 8247 	beq.w	8012818 <LoRaMacMibSetRequestConfirm+0x694>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 801238a:	2311      	movs	r3, #17
 801238c:	e262      	b.n	8012854 <LoRaMacMibSetRequestConfirm+0x6d0>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801238e:	2303      	movs	r3, #3
 8012390:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8012392:	e241      	b.n	8012818 <LoRaMacMibSetRequestConfirm+0x694>
        }
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        case MIB_APP_S_KEY:
        {
            if( mibSet->Param.AppSKey != NULL )
 8012394:	687b      	ldr	r3, [r7, #4]
 8012396:	685b      	ldr	r3, [r3, #4]
 8012398:	2b00      	cmp	r3, #0
 801239a:	d00b      	beq.n	80123b4 <LoRaMacMibSetRequestConfirm+0x230>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_S_KEY, mibSet->Param.AppSKey ) )
 801239c:	687b      	ldr	r3, [r7, #4]
 801239e:	685b      	ldr	r3, [r3, #4]
 80123a0:	4619      	mov	r1, r3
 80123a2:	2003      	movs	r0, #3
 80123a4:	f001 ffc6 	bl	8014334 <LoRaMacCryptoSetKey>
 80123a8:	4603      	mov	r3, r0
 80123aa:	2b00      	cmp	r3, #0
 80123ac:	f000 8236 	beq.w	801281c <LoRaMacMibSetRequestConfirm+0x698>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80123b0:	2311      	movs	r3, #17
 80123b2:	e24f      	b.n	8012854 <LoRaMacMibSetRequestConfirm+0x6d0>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80123b4:	2303      	movs	r3, #3
 80123b6:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80123b8:	e230      	b.n	801281c <LoRaMacMibSetRequestConfirm+0x698>
        }
        case MIB_MC_KE_KEY:
        {
            if( mibSet->Param.McKEKey != NULL )
 80123ba:	687b      	ldr	r3, [r7, #4]
 80123bc:	685b      	ldr	r3, [r3, #4]
 80123be:	2b00      	cmp	r3, #0
 80123c0:	d00b      	beq.n	80123da <LoRaMacMibSetRequestConfirm+0x256>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KE_KEY, mibSet->Param.McKEKey ) )
 80123c2:	687b      	ldr	r3, [r7, #4]
 80123c4:	685b      	ldr	r3, [r3, #4]
 80123c6:	4619      	mov	r1, r3
 80123c8:	207f      	movs	r0, #127	@ 0x7f
 80123ca:	f001 ffb3 	bl	8014334 <LoRaMacCryptoSetKey>
 80123ce:	4603      	mov	r3, r0
 80123d0:	2b00      	cmp	r3, #0
 80123d2:	f000 8225 	beq.w	8012820 <LoRaMacMibSetRequestConfirm+0x69c>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80123d6:	2311      	movs	r3, #17
 80123d8:	e23c      	b.n	8012854 <LoRaMacMibSetRequestConfirm+0x6d0>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80123da:	2303      	movs	r3, #3
 80123dc:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80123de:	e21f      	b.n	8012820 <LoRaMacMibSetRequestConfirm+0x69c>
        }
#if ( LORAMAC_MAX_MC_CTX > 0 ) /* ST_WORKAROUND: reduced LORAMAC_MAX_MC_CTX */
        case MIB_MC_KEY_0:
        {
            if( mibSet->Param.McKey0 != NULL )
 80123e0:	687b      	ldr	r3, [r7, #4]
 80123e2:	685b      	ldr	r3, [r3, #4]
 80123e4:	2b00      	cmp	r3, #0
 80123e6:	d00b      	beq.n	8012400 <LoRaMacMibSetRequestConfirm+0x27c>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_0, mibSet->Param.McKey0 ) )
 80123e8:	687b      	ldr	r3, [r7, #4]
 80123ea:	685b      	ldr	r3, [r3, #4]
 80123ec:	4619      	mov	r1, r3
 80123ee:	2080      	movs	r0, #128	@ 0x80
 80123f0:	f001 ffa0 	bl	8014334 <LoRaMacCryptoSetKey>
 80123f4:	4603      	mov	r3, r0
 80123f6:	2b00      	cmp	r3, #0
 80123f8:	f000 8214 	beq.w	8012824 <LoRaMacMibSetRequestConfirm+0x6a0>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80123fc:	2311      	movs	r3, #17
 80123fe:	e229      	b.n	8012854 <LoRaMacMibSetRequestConfirm+0x6d0>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012400:	2303      	movs	r3, #3
 8012402:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8012404:	e20e      	b.n	8012824 <LoRaMacMibSetRequestConfirm+0x6a0>
        }
        case MIB_MC_APP_S_KEY_0:
        {
            if( mibSet->Param.McAppSKey0 != NULL )
 8012406:	687b      	ldr	r3, [r7, #4]
 8012408:	685b      	ldr	r3, [r3, #4]
 801240a:	2b00      	cmp	r3, #0
 801240c:	d00b      	beq.n	8012426 <LoRaMacMibSetRequestConfirm+0x2a2>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_0, mibSet->Param.McAppSKey0 ) )
 801240e:	687b      	ldr	r3, [r7, #4]
 8012410:	685b      	ldr	r3, [r3, #4]
 8012412:	4619      	mov	r1, r3
 8012414:	2081      	movs	r0, #129	@ 0x81
 8012416:	f001 ff8d 	bl	8014334 <LoRaMacCryptoSetKey>
 801241a:	4603      	mov	r3, r0
 801241c:	2b00      	cmp	r3, #0
 801241e:	f000 8203 	beq.w	8012828 <LoRaMacMibSetRequestConfirm+0x6a4>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8012422:	2311      	movs	r3, #17
 8012424:	e216      	b.n	8012854 <LoRaMacMibSetRequestConfirm+0x6d0>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012426:	2303      	movs	r3, #3
 8012428:	75fb      	strb	r3, [r7, #23]
            }
            break;
 801242a:	e1fd      	b.n	8012828 <LoRaMacMibSetRequestConfirm+0x6a4>
        }
        case MIB_MC_NWK_S_KEY_0:
        {
            if( mibSet->Param.McNwkSKey0 != NULL )
 801242c:	687b      	ldr	r3, [r7, #4]
 801242e:	685b      	ldr	r3, [r3, #4]
 8012430:	2b00      	cmp	r3, #0
 8012432:	d00b      	beq.n	801244c <LoRaMacMibSetRequestConfirm+0x2c8>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_0, mibSet->Param.McNwkSKey0 ) )
 8012434:	687b      	ldr	r3, [r7, #4]
 8012436:	685b      	ldr	r3, [r3, #4]
 8012438:	4619      	mov	r1, r3
 801243a:	2082      	movs	r0, #130	@ 0x82
 801243c:	f001 ff7a 	bl	8014334 <LoRaMacCryptoSetKey>
 8012440:	4603      	mov	r3, r0
 8012442:	2b00      	cmp	r3, #0
 8012444:	f000 81f2 	beq.w	801282c <LoRaMacMibSetRequestConfirm+0x6a8>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8012448:	2311      	movs	r3, #17
 801244a:	e203      	b.n	8012854 <LoRaMacMibSetRequestConfirm+0x6d0>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801244c:	2303      	movs	r3, #3
 801244e:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8012450:	e1ec      	b.n	801282c <LoRaMacMibSetRequestConfirm+0x6a8>
            break;
        }
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        case MIB_PUBLIC_NETWORK:
        {
            Nvm.MacGroup2.PublicNetwork = mibSet->Param.EnablePublicNetwork;
 8012452:	687b      	ldr	r3, [r7, #4]
 8012454:	791a      	ldrb	r2, [r3, #4]
 8012456:	4b0b      	ldr	r3, [pc, #44]	@ (8012484 <LoRaMacMibSetRequestConfirm+0x300>)
 8012458:	f883 2105 	strb.w	r2, [r3, #261]	@ 0x105
            Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 801245c:	4b0a      	ldr	r3, [pc, #40]	@ (8012488 <LoRaMacMibSetRequestConfirm+0x304>)
 801245e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012460:	4a08      	ldr	r2, [pc, #32]	@ (8012484 <LoRaMacMibSetRequestConfirm+0x300>)
 8012462:	f892 2105 	ldrb.w	r2, [r2, #261]	@ 0x105
 8012466:	4610      	mov	r0, r2
 8012468:	4798      	blx	r3
            /* ST_WORAROUND_BEGIN: Required to avoid keeping the radio active after init */
            Radio.Sleep( );
 801246a:	4b07      	ldr	r3, [pc, #28]	@ (8012488 <LoRaMacMibSetRequestConfirm+0x304>)
 801246c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801246e:	4798      	blx	r3
            /* ST_WORKAROUND_END */
            break;
 8012470:	e1e5      	b.n	801283e <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        /* ST_WORKAROUND_BEGIN: Keep repeater feature */
        case MIB_REPEATER_SUPPORT:
        {
            Nvm.MacGroup2.MacParams.RepeaterSupport = mibSet->Param.EnableRepeaterSupport;
 8012472:	687b      	ldr	r3, [r7, #4]
 8012474:	791a      	ldrb	r2, [r3, #4]
 8012476:	4b03      	ldr	r3, [pc, #12]	@ (8012484 <LoRaMacMibSetRequestConfirm+0x300>)
 8012478:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
            break;
 801247c:	e1df      	b.n	801283e <LoRaMacMibSetRequestConfirm+0x6ba>
 801247e:	bf00      	nop
 8012480:	200008d0 	.word	0x200008d0
 8012484:	20000df0 	.word	0x20000df0
 8012488:	0801f874 	.word	0x0801f874
        }
        /* ST_WORKAROUND_END */
        case MIB_RX2_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 801248c:	687b      	ldr	r3, [r7, #4]
 801248e:	7a1b      	ldrb	r3, [r3, #8]
 8012490:	b25b      	sxtb	r3, r3
 8012492:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8012494:	4bb3      	ldr	r3, [pc, #716]	@ (8012764 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8012496:	f893 3075 	ldrb.w	r3, [r3, #117]	@ 0x75
 801249a:	727b      	strb	r3, [r7, #9]
            /* ST_WORAROUND_BEGIN: Check also the Rx Frequency parameter */
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) != true )
 801249c:	4bb1      	ldr	r3, [pc, #708]	@ (8012764 <LoRaMacMibSetRequestConfirm+0x5e0>)
 801249e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80124a2:	f107 0108 	add.w	r1, r7, #8
 80124a6:	2207      	movs	r2, #7
 80124a8:	4618      	mov	r0, r3
 80124aa:	f002 fd62 	bl	8014f72 <RegionVerify>
 80124ae:	4603      	mov	r3, r0
 80124b0:	f083 0301 	eor.w	r3, r3, #1
 80124b4:	b2db      	uxtb	r3, r3
 80124b6:	2b00      	cmp	r3, #0
 80124b8:	d002      	beq.n	80124c0 <LoRaMacMibSetRequestConfirm+0x33c>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80124ba:	2303      	movs	r3, #3
 80124bc:	75fb      	strb	r3, [r7, #23]
                {
                    Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
                }
            }
            /* ST_WORKAROUND_END */
            break;
 80124be:	e1be      	b.n	801283e <LoRaMacMibSetRequestConfirm+0x6ba>
                verify.Frequency = mibSet->Param.Rx2Channel.Frequency;
 80124c0:	687b      	ldr	r3, [r7, #4]
 80124c2:	685b      	ldr	r3, [r3, #4]
 80124c4:	60bb      	str	r3, [r7, #8]
                if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_FREQUENCY ) != true )
 80124c6:	4ba7      	ldr	r3, [pc, #668]	@ (8012764 <LoRaMacMibSetRequestConfirm+0x5e0>)
 80124c8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80124cc:	f107 0108 	add.w	r1, r7, #8
 80124d0:	2200      	movs	r2, #0
 80124d2:	4618      	mov	r0, r3
 80124d4:	f002 fd4d 	bl	8014f72 <RegionVerify>
 80124d8:	4603      	mov	r3, r0
 80124da:	f083 0301 	eor.w	r3, r3, #1
 80124de:	b2db      	uxtb	r3, r3
 80124e0:	2b00      	cmp	r3, #0
 80124e2:	d002      	beq.n	80124ea <LoRaMacMibSetRequestConfirm+0x366>
                    status = LORAMAC_STATUS_PARAMETER_INVALID;
 80124e4:	2303      	movs	r3, #3
 80124e6:	75fb      	strb	r3, [r7, #23]
            break;
 80124e8:	e1a9      	b.n	801283e <LoRaMacMibSetRequestConfirm+0x6ba>
                    Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
 80124ea:	4b9e      	ldr	r3, [pc, #632]	@ (8012764 <LoRaMacMibSetRequestConfirm+0x5e0>)
 80124ec:	687a      	ldr	r2, [r7, #4]
 80124ee:	3364      	adds	r3, #100	@ 0x64
 80124f0:	3204      	adds	r2, #4
 80124f2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80124f6:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 80124fa:	e1a0      	b.n	801283e <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 80124fc:	687b      	ldr	r3, [r7, #4]
 80124fe:	7a1b      	ldrb	r3, [r3, #8]
 8012500:	b25b      	sxtb	r3, r3
 8012502:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8012504:	4b97      	ldr	r3, [pc, #604]	@ (8012764 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8012506:	f893 3075 	ldrb.w	r3, [r3, #117]	@ 0x75
 801250a:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 801250c:	4b95      	ldr	r3, [pc, #596]	@ (8012764 <LoRaMacMibSetRequestConfirm+0x5e0>)
 801250e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8012512:	f107 0108 	add.w	r1, r7, #8
 8012516:	2207      	movs	r2, #7
 8012518:	4618      	mov	r0, r3
 801251a:	f002 fd2a 	bl	8014f72 <RegionVerify>
 801251e:	4603      	mov	r3, r0
 8012520:	2b00      	cmp	r3, #0
 8012522:	d008      	beq.n	8012536 <LoRaMacMibSetRequestConfirm+0x3b2>
            {
                Nvm.MacGroup2.MacParamsDefaults.Rx2Channel = mibSet->Param.Rx2DefaultChannel;
 8012524:	4b8f      	ldr	r3, [pc, #572]	@ (8012764 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8012526:	687a      	ldr	r2, [r7, #4]
 8012528:	33a8      	adds	r3, #168	@ 0xa8
 801252a:	3204      	adds	r2, #4
 801252c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012530:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8012534:	e183      	b.n	801283e <LoRaMacMibSetRequestConfirm+0x6ba>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012536:	2303      	movs	r3, #3
 8012538:	75fb      	strb	r3, [r7, #23]
            break;
 801253a:	e180      	b.n	801283e <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_RXC_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 801253c:	687b      	ldr	r3, [r7, #4]
 801253e:	7a1b      	ldrb	r3, [r3, #8]
 8012540:	b25b      	sxtb	r3, r3
 8012542:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8012544:	4b87      	ldr	r3, [pc, #540]	@ (8012764 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8012546:	f893 3075 	ldrb.w	r3, [r3, #117]	@ 0x75
 801254a:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 801254c:	4b85      	ldr	r3, [pc, #532]	@ (8012764 <LoRaMacMibSetRequestConfirm+0x5e0>)
 801254e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8012552:	f107 0108 	add.w	r1, r7, #8
 8012556:	2207      	movs	r2, #7
 8012558:	4618      	mov	r0, r3
 801255a:	f002 fd0a 	bl	8014f72 <RegionVerify>
 801255e:	4603      	mov	r3, r0
 8012560:	2b00      	cmp	r3, #0
 8012562:	d019      	beq.n	8012598 <LoRaMacMibSetRequestConfirm+0x414>
            {
                Nvm.MacGroup2.MacParams.RxCChannel = mibSet->Param.RxCChannel;
 8012564:	4b7f      	ldr	r3, [pc, #508]	@ (8012764 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8012566:	687a      	ldr	r2, [r7, #4]
 8012568:	336c      	adds	r3, #108	@ 0x6c
 801256a:	3204      	adds	r2, #4
 801256c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012570:	e883 0003 	stmia.w	r3, {r0, r1}

                if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) && ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) )
 8012574:	4b7b      	ldr	r3, [pc, #492]	@ (8012764 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8012576:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 801257a:	2b02      	cmp	r3, #2
 801257c:	f040 8158 	bne.w	8012830 <LoRaMacMibSetRequestConfirm+0x6ac>
 8012580:	4b78      	ldr	r3, [pc, #480]	@ (8012764 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8012582:	f893 311c 	ldrb.w	r3, [r3, #284]	@ 0x11c
 8012586:	2b00      	cmp	r3, #0
 8012588:	f000 8152 	beq.w	8012830 <LoRaMacMibSetRequestConfirm+0x6ac>
                {
                    // We can only compute the RX window parameters directly, if we are already
                    // in class c mode and joined. We cannot setup an RX window in case of any other
                    // class type.
                    // Set the radio into sleep mode in case we are still in RX mode
                    Radio.Sleep( );
 801258c:	4b76      	ldr	r3, [pc, #472]	@ (8012768 <LoRaMacMibSetRequestConfirm+0x5e4>)
 801258e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012590:	4798      	blx	r3

                    OpenContinuousRxCWindow( );
 8012592:	f7fe fca7 	bl	8010ee4 <OpenContinuousRxCWindow>
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8012596:	e14b      	b.n	8012830 <LoRaMacMibSetRequestConfirm+0x6ac>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012598:	2303      	movs	r3, #3
 801259a:	75fb      	strb	r3, [r7, #23]
            break;
 801259c:	e148      	b.n	8012830 <LoRaMacMibSetRequestConfirm+0x6ac>
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 801259e:	687b      	ldr	r3, [r7, #4]
 80125a0:	7a1b      	ldrb	r3, [r3, #8]
 80125a2:	b25b      	sxtb	r3, r3
 80125a4:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 80125a6:	4b6f      	ldr	r3, [pc, #444]	@ (8012764 <LoRaMacMibSetRequestConfirm+0x5e0>)
 80125a8:	f893 3075 	ldrb.w	r3, [r3, #117]	@ 0x75
 80125ac:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 80125ae:	4b6d      	ldr	r3, [pc, #436]	@ (8012764 <LoRaMacMibSetRequestConfirm+0x5e0>)
 80125b0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80125b4:	f107 0108 	add.w	r1, r7, #8
 80125b8:	2207      	movs	r2, #7
 80125ba:	4618      	mov	r0, r3
 80125bc:	f002 fcd9 	bl	8014f72 <RegionVerify>
 80125c0:	4603      	mov	r3, r0
 80125c2:	2b00      	cmp	r3, #0
 80125c4:	d008      	beq.n	80125d8 <LoRaMacMibSetRequestConfirm+0x454>
            {
                Nvm.MacGroup2.MacParamsDefaults.RxCChannel = mibSet->Param.RxCDefaultChannel;
 80125c6:	4b67      	ldr	r3, [pc, #412]	@ (8012764 <LoRaMacMibSetRequestConfirm+0x5e0>)
 80125c8:	687a      	ldr	r2, [r7, #4]
 80125ca:	33b0      	adds	r3, #176	@ 0xb0
 80125cc:	3204      	adds	r2, #4
 80125ce:	e892 0003 	ldmia.w	r2, {r0, r1}
 80125d2:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 80125d6:	e132      	b.n	801283e <LoRaMacMibSetRequestConfirm+0x6ba>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80125d8:	2303      	movs	r3, #3
 80125da:	75fb      	strb	r3, [r7, #23]
            break;
 80125dc:	e12f      	b.n	801283e <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsDefaultMask;
 80125de:	687b      	ldr	r3, [r7, #4]
 80125e0:	685b      	ldr	r3, [r3, #4]
 80125e2:	60fb      	str	r3, [r7, #12]
            chanMaskSet.ChannelsMaskType = CHANNELS_DEFAULT_MASK;
 80125e4:	2301      	movs	r3, #1
 80125e6:	743b      	strb	r3, [r7, #16]

            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 80125e8:	4b5e      	ldr	r3, [pc, #376]	@ (8012764 <LoRaMacMibSetRequestConfirm+0x5e0>)
 80125ea:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80125ee:	f107 020c 	add.w	r2, r7, #12
 80125f2:	4611      	mov	r1, r2
 80125f4:	4618      	mov	r0, r3
 80125f6:	f002 fce5 	bl	8014fc4 <RegionChanMaskSet>
 80125fa:	4603      	mov	r3, r0
 80125fc:	f083 0301 	eor.w	r3, r3, #1
 8012600:	b2db      	uxtb	r3, r3
 8012602:	2b00      	cmp	r3, #0
 8012604:	f000 8116 	beq.w	8012834 <LoRaMacMibSetRequestConfirm+0x6b0>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012608:	2303      	movs	r3, #3
 801260a:	75fb      	strb	r3, [r7, #23]
            }
            break;
 801260c:	e112      	b.n	8012834 <LoRaMacMibSetRequestConfirm+0x6b0>
        }
        case MIB_CHANNELS_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsMask;
 801260e:	687b      	ldr	r3, [r7, #4]
 8012610:	685b      	ldr	r3, [r3, #4]
 8012612:	60fb      	str	r3, [r7, #12]
            chanMaskSet.ChannelsMaskType = CHANNELS_MASK;
 8012614:	2300      	movs	r3, #0
 8012616:	743b      	strb	r3, [r7, #16]

            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 8012618:	4b52      	ldr	r3, [pc, #328]	@ (8012764 <LoRaMacMibSetRequestConfirm+0x5e0>)
 801261a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 801261e:	f107 020c 	add.w	r2, r7, #12
 8012622:	4611      	mov	r1, r2
 8012624:	4618      	mov	r0, r3
 8012626:	f002 fccd 	bl	8014fc4 <RegionChanMaskSet>
 801262a:	4603      	mov	r3, r0
 801262c:	f083 0301 	eor.w	r3, r3, #1
 8012630:	b2db      	uxtb	r3, r3
 8012632:	2b00      	cmp	r3, #0
 8012634:	f000 8100 	beq.w	8012838 <LoRaMacMibSetRequestConfirm+0x6b4>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012638:	2303      	movs	r3, #3
 801263a:	75fb      	strb	r3, [r7, #23]
            }
            break;
 801263c:	e0fc      	b.n	8012838 <LoRaMacMibSetRequestConfirm+0x6b4>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 801263e:	687b      	ldr	r3, [r7, #4]
 8012640:	791b      	ldrb	r3, [r3, #4]
 8012642:	2b00      	cmp	r3, #0
 8012644:	d009      	beq.n	801265a <LoRaMacMibSetRequestConfirm+0x4d6>
                ( mibSet->Param.ChannelsNbTrans <= 15 ) )
 8012646:	687b      	ldr	r3, [r7, #4]
 8012648:	791b      	ldrb	r3, [r3, #4]
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 801264a:	2b0f      	cmp	r3, #15
 801264c:	d805      	bhi.n	801265a <LoRaMacMibSetRequestConfirm+0x4d6>
            {
                Nvm.MacGroup2.MacParams.ChannelsNbTrans = mibSet->Param.ChannelsNbTrans;
 801264e:	687b      	ldr	r3, [r7, #4]
 8012650:	791a      	ldrb	r2, [r3, #4]
 8012652:	4b44      	ldr	r3, [pc, #272]	@ (8012764 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8012654:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8012658:	e0f1      	b.n	801283e <LoRaMacMibSetRequestConfirm+0x6ba>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801265a:	2303      	movs	r3, #3
 801265c:	75fb      	strb	r3, [r7, #23]
            break;
 801265e:	e0ee      	b.n	801283e <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            Nvm.MacGroup2.MacParams.MaxRxWindow = mibSet->Param.MaxRxWindow;
 8012660:	687b      	ldr	r3, [r7, #4]
 8012662:	685b      	ldr	r3, [r3, #4]
 8012664:	4a3f      	ldr	r2, [pc, #252]	@ (8012764 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8012666:	64d3      	str	r3, [r2, #76]	@ 0x4c
            break;
 8012668:	e0e9      	b.n	801283e <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            Nvm.MacGroup2.MacParams.ReceiveDelay1 = mibSet->Param.ReceiveDelay1;
 801266a:	687b      	ldr	r3, [r7, #4]
 801266c:	685b      	ldr	r3, [r3, #4]
 801266e:	4a3d      	ldr	r2, [pc, #244]	@ (8012764 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8012670:	6513      	str	r3, [r2, #80]	@ 0x50
            break;
 8012672:	e0e4      	b.n	801283e <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            Nvm.MacGroup2.MacParams.ReceiveDelay2 = mibSet->Param.ReceiveDelay2;
 8012674:	687b      	ldr	r3, [r7, #4]
 8012676:	685b      	ldr	r3, [r3, #4]
 8012678:	4a3a      	ldr	r2, [pc, #232]	@ (8012764 <LoRaMacMibSetRequestConfirm+0x5e0>)
 801267a:	6553      	str	r3, [r2, #84]	@ 0x54
            break;
 801267c:	e0df      	b.n	801283e <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = mibSet->Param.JoinAcceptDelay1;
 801267e:	687b      	ldr	r3, [r7, #4]
 8012680:	685b      	ldr	r3, [r3, #4]
 8012682:	4a38      	ldr	r2, [pc, #224]	@ (8012764 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8012684:	6593      	str	r3, [r2, #88]	@ 0x58
            break;
 8012686:	e0da      	b.n	801283e <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = mibSet->Param.JoinAcceptDelay2;
 8012688:	687b      	ldr	r3, [r7, #4]
 801268a:	685b      	ldr	r3, [r3, #4]
 801268c:	4a35      	ldr	r2, [pc, #212]	@ (8012764 <LoRaMacMibSetRequestConfirm+0x5e0>)
 801268e:	65d3      	str	r3, [r2, #92]	@ 0x5c
            break;
 8012690:	e0d5      	b.n	801283e <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDefaultDatarate;
 8012692:	687b      	ldr	r3, [r7, #4]
 8012694:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8012698:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_DR ) == true )
 801269a:	4b32      	ldr	r3, [pc, #200]	@ (8012764 <LoRaMacMibSetRequestConfirm+0x5e0>)
 801269c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80126a0:	f107 0108 	add.w	r1, r7, #8
 80126a4:	2206      	movs	r2, #6
 80126a6:	4618      	mov	r0, r3
 80126a8:	f002 fc63 	bl	8014f72 <RegionVerify>
 80126ac:	4603      	mov	r3, r0
 80126ae:	2b00      	cmp	r3, #0
 80126b0:	d005      	beq.n	80126be <LoRaMacMibSetRequestConfirm+0x53a>
            {
                Nvm.MacGroup2.ChannelsDatarateDefault = verify.DatarateParams.Datarate;
 80126b2:	f997 2008 	ldrsb.w	r2, [r7, #8]
 80126b6:	4b2b      	ldr	r3, [pc, #172]	@ (8012764 <LoRaMacMibSetRequestConfirm+0x5e0>)
 80126b8:	f883 20cd 	strb.w	r2, [r3, #205]	@ 0xcd
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 80126bc:	e0bf      	b.n	801283e <LoRaMacMibSetRequestConfirm+0x6ba>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80126be:	2303      	movs	r3, #3
 80126c0:	75fb      	strb	r3, [r7, #23]
            break;
 80126c2:	e0bc      	b.n	801283e <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_CHANNELS_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDatarate;
 80126c4:	687b      	ldr	r3, [r7, #4]
 80126c6:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80126ca:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 80126cc:	4b25      	ldr	r3, [pc, #148]	@ (8012764 <LoRaMacMibSetRequestConfirm+0x5e0>)
 80126ce:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 80126d2:	72bb      	strb	r3, [r7, #10]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 80126d4:	4b23      	ldr	r3, [pc, #140]	@ (8012764 <LoRaMacMibSetRequestConfirm+0x5e0>)
 80126d6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80126da:	f107 0108 	add.w	r1, r7, #8
 80126de:	2205      	movs	r2, #5
 80126e0:	4618      	mov	r0, r3
 80126e2:	f002 fc46 	bl	8014f72 <RegionVerify>
 80126e6:	4603      	mov	r3, r0
 80126e8:	2b00      	cmp	r3, #0
 80126ea:	d005      	beq.n	80126f8 <LoRaMacMibSetRequestConfirm+0x574>
            {
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 80126ec:	f997 2008 	ldrsb.w	r2, [r7, #8]
 80126f0:	4b1c      	ldr	r3, [pc, #112]	@ (8012764 <LoRaMacMibSetRequestConfirm+0x5e0>)
 80126f2:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 80126f6:	e0a2      	b.n	801283e <LoRaMacMibSetRequestConfirm+0x6ba>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80126f8:	2303      	movs	r3, #3
 80126fa:	75fb      	strb	r3, [r7, #23]
            break;
 80126fc:	e09f      	b.n	801283e <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsDefaultTxPower;
 80126fe:	687b      	ldr	r3, [r7, #4]
 8012700:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8012704:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_POWER ) == true )
 8012706:	4b17      	ldr	r3, [pc, #92]	@ (8012764 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8012708:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 801270c:	f107 0108 	add.w	r1, r7, #8
 8012710:	220a      	movs	r2, #10
 8012712:	4618      	mov	r0, r3
 8012714:	f002 fc2d 	bl	8014f72 <RegionVerify>
 8012718:	4603      	mov	r3, r0
 801271a:	2b00      	cmp	r3, #0
 801271c:	d005      	beq.n	801272a <LoRaMacMibSetRequestConfirm+0x5a6>
            {
                Nvm.MacGroup2.ChannelsTxPowerDefault = verify.TxPower;
 801271e:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8012722:	4b10      	ldr	r3, [pc, #64]	@ (8012764 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8012724:	f883 20cc 	strb.w	r2, [r3, #204]	@ 0xcc
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8012728:	e089      	b.n	801283e <LoRaMacMibSetRequestConfirm+0x6ba>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801272a:	2303      	movs	r3, #3
 801272c:	75fb      	strb	r3, [r7, #23]
            break;
 801272e:	e086      	b.n	801283e <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_CHANNELS_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsTxPower;
 8012730:	687b      	ldr	r3, [r7, #4]
 8012732:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8012736:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_POWER ) == true )
 8012738:	4b0a      	ldr	r3, [pc, #40]	@ (8012764 <LoRaMacMibSetRequestConfirm+0x5e0>)
 801273a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 801273e:	f107 0108 	add.w	r1, r7, #8
 8012742:	2209      	movs	r2, #9
 8012744:	4618      	mov	r0, r3
 8012746:	f002 fc14 	bl	8014f72 <RegionVerify>
 801274a:	4603      	mov	r3, r0
 801274c:	2b00      	cmp	r3, #0
 801274e:	d005      	beq.n	801275c <LoRaMacMibSetRequestConfirm+0x5d8>
            {
                Nvm.MacGroup1.ChannelsTxPower = verify.TxPower;
 8012750:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8012754:	4b03      	ldr	r3, [pc, #12]	@ (8012764 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8012756:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 801275a:	e070      	b.n	801283e <LoRaMacMibSetRequestConfirm+0x6ba>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801275c:	2303      	movs	r3, #3
 801275e:	75fb      	strb	r3, [r7, #23]
            break;
 8012760:	e06d      	b.n	801283e <LoRaMacMibSetRequestConfirm+0x6ba>
 8012762:	bf00      	nop
 8012764:	20000df0 	.word	0x20000df0
 8012768:	0801f874 	.word	0x0801f874
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = mibSet->Param.SystemMaxRxError;
 801276c:	687b      	ldr	r3, [r7, #4]
 801276e:	685b      	ldr	r3, [r3, #4]
 8012770:	4a3a      	ldr	r2, [pc, #232]	@ (801285c <LoRaMacMibSetRequestConfirm+0x6d8>)
 8012772:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 8012776:	4b39      	ldr	r3, [pc, #228]	@ (801285c <LoRaMacMibSetRequestConfirm+0x6d8>)
 8012778:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801277c:	4a37      	ldr	r2, [pc, #220]	@ (801285c <LoRaMacMibSetRequestConfirm+0x6d8>)
 801277e:	6453      	str	r3, [r2, #68]	@ 0x44
            break;
 8012780:	e05d      	b.n	801283e <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = mibSet->Param.MinRxSymbols;
 8012782:	687b      	ldr	r3, [r7, #4]
 8012784:	791a      	ldrb	r2, [r3, #4]
 8012786:	4b35      	ldr	r3, [pc, #212]	@ (801285c <LoRaMacMibSetRequestConfirm+0x6d8>)
 8012788:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c
 801278c:	4b33      	ldr	r3, [pc, #204]	@ (801285c <LoRaMacMibSetRequestConfirm+0x6d8>)
 801278e:	f893 208c 	ldrb.w	r2, [r3, #140]	@ 0x8c
 8012792:	4b32      	ldr	r3, [pc, #200]	@ (801285c <LoRaMacMibSetRequestConfirm+0x6d8>)
 8012794:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
            break;
 8012798:	e051      	b.n	801283e <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_ANTENNA_GAIN:
        {
            Nvm.MacGroup2.MacParams.AntennaGain = mibSet->Param.AntennaGain;
 801279a:	687b      	ldr	r3, [r7, #4]
 801279c:	685b      	ldr	r3, [r3, #4]
 801279e:	4a2f      	ldr	r2, [pc, #188]	@ (801285c <LoRaMacMibSetRequestConfirm+0x6d8>)
 80127a0:	67d3      	str	r3, [r2, #124]	@ 0x7c
            break;
 80127a2:	e04c      	b.n	801283e <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            Nvm.MacGroup2.MacParamsDefaults.AntennaGain = mibSet->Param.DefaultAntennaGain;
 80127a4:	687b      	ldr	r3, [r7, #4]
 80127a6:	685b      	ldr	r3, [r3, #4]
 80127a8:	4a2c      	ldr	r2, [pc, #176]	@ (801285c <LoRaMacMibSetRequestConfirm+0x6d8>)
 80127aa:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
            break;
 80127ae:	e046      	b.n	801283e <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_NVM_CTXS:
        {
            status = RestoreNvmData( );
 80127b0:	f7fe fdc8 	bl	8011344 <RestoreNvmData>
 80127b4:	4603      	mov	r3, r0
 80127b6:	75fb      	strb	r3, [r7, #23]
            break;
 80127b8:	e041      	b.n	801283e <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_ABP_LORAWAN_VERSION:
        {
            if( mibSet->Param.AbpLrWanVersion.Fields.Minor <= 1 )
 80127ba:	687b      	ldr	r3, [r7, #4]
 80127bc:	799b      	ldrb	r3, [r3, #6]
 80127be:	2b01      	cmp	r3, #1
 80127c0:	d80d      	bhi.n	80127de <LoRaMacMibSetRequestConfirm+0x65a>
            {
                Nvm.MacGroup2.Version = mibSet->Param.AbpLrWanVersion;
 80127c2:	4a26      	ldr	r2, [pc, #152]	@ (801285c <LoRaMacMibSetRequestConfirm+0x6d8>)
 80127c4:	687b      	ldr	r3, [r7, #4]
 80127c6:	685b      	ldr	r3, [r3, #4]
 80127c8:	f8c2 3118 	str.w	r3, [r2, #280]	@ 0x118

                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetLrWanVersion( mibSet->Param.AbpLrWanVersion ) )
 80127cc:	687b      	ldr	r3, [r7, #4]
 80127ce:	6858      	ldr	r0, [r3, #4]
 80127d0:	f001 fd14 	bl	80141fc <LoRaMacCryptoSetLrWanVersion>
 80127d4:	4603      	mov	r3, r0
 80127d6:	2b00      	cmp	r3, #0
 80127d8:	d030      	beq.n	801283c <LoRaMacMibSetRequestConfirm+0x6b8>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80127da:	2311      	movs	r3, #17
 80127dc:	e03a      	b.n	8012854 <LoRaMacMibSetRequestConfirm+0x6d0>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80127de:	2303      	movs	r3, #3
 80127e0:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80127e2:	e02b      	b.n	801283c <LoRaMacMibSetRequestConfirm+0x6b8>
        }
        case MIB_RXB_C_TIMEOUT:
        {
            Nvm.MacGroup2.MacParams.RxBCTimeout = mibSet->Param.RxBCTimeout;
 80127e4:	687b      	ldr	r3, [r7, #4]
 80127e6:	685b      	ldr	r3, [r3, #4]
 80127e8:	4a1c      	ldr	r2, [pc, #112]	@ (801285c <LoRaMacMibSetRequestConfirm+0x6d8>)
 80127ea:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
            break;
 80127ee:	e026      	b.n	801283e <LoRaMacMibSetRequestConfirm+0x6ba>
        }
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
        case MIB_IS_CERT_FPORT_ON:
        {
            Nvm.MacGroup2.IsCertPortOn = mibSet->Param.IsCertPortOn;
 80127f0:	687b      	ldr	r3, [r7, #4]
 80127f2:	791a      	ldrb	r2, [r3, #4]
 80127f4:	4b19      	ldr	r3, [pc, #100]	@ (801285c <LoRaMacMibSetRequestConfirm+0x6d8>)
 80127f6:	f883 210b 	strb.w	r2, [r3, #267]	@ 0x10b
            break;
 80127fa:	e020      	b.n	801283e <LoRaMacMibSetRequestConfirm+0x6ba>
        }
#endif /* LORAMAC_VERSION */
        default:
        {
            status = LoRaMacMibClassBSetRequestConfirm( mibSet );
 80127fc:	6878      	ldr	r0, [r7, #4]
 80127fe:	f000 fc88 	bl	8013112 <LoRaMacMibClassBSetRequestConfirm>
 8012802:	4603      	mov	r3, r0
 8012804:	75fb      	strb	r3, [r7, #23]
            break;
 8012806:	e01a      	b.n	801283e <LoRaMacMibSetRequestConfirm+0x6ba>
            break;
 8012808:	bf00      	nop
 801280a:	e018      	b.n	801283e <LoRaMacMibSetRequestConfirm+0x6ba>
            break;
 801280c:	bf00      	nop
 801280e:	e016      	b.n	801283e <LoRaMacMibSetRequestConfirm+0x6ba>
            break;
 8012810:	bf00      	nop
 8012812:	e014      	b.n	801283e <LoRaMacMibSetRequestConfirm+0x6ba>
            break;
 8012814:	bf00      	nop
 8012816:	e012      	b.n	801283e <LoRaMacMibSetRequestConfirm+0x6ba>
            break;
 8012818:	bf00      	nop
 801281a:	e010      	b.n	801283e <LoRaMacMibSetRequestConfirm+0x6ba>
            break;
 801281c:	bf00      	nop
 801281e:	e00e      	b.n	801283e <LoRaMacMibSetRequestConfirm+0x6ba>
            break;
 8012820:	bf00      	nop
 8012822:	e00c      	b.n	801283e <LoRaMacMibSetRequestConfirm+0x6ba>
            break;
 8012824:	bf00      	nop
 8012826:	e00a      	b.n	801283e <LoRaMacMibSetRequestConfirm+0x6ba>
            break;
 8012828:	bf00      	nop
 801282a:	e008      	b.n	801283e <LoRaMacMibSetRequestConfirm+0x6ba>
            break;
 801282c:	bf00      	nop
 801282e:	e006      	b.n	801283e <LoRaMacMibSetRequestConfirm+0x6ba>
            break;
 8012830:	bf00      	nop
 8012832:	e004      	b.n	801283e <LoRaMacMibSetRequestConfirm+0x6ba>
            break;
 8012834:	bf00      	nop
 8012836:	e002      	b.n	801283e <LoRaMacMibSetRequestConfirm+0x6ba>
            break;
 8012838:	bf00      	nop
 801283a:	e000      	b.n	801283e <LoRaMacMibSetRequestConfirm+0x6ba>
            break;
 801283c:	bf00      	nop
        }
    }

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    if( status == LORAMAC_STATUS_OK )
 801283e:	7dfb      	ldrb	r3, [r7, #23]
 8012840:	2b00      	cmp	r3, #0
 8012842:	d106      	bne.n	8012852 <LoRaMacMibSetRequestConfirm+0x6ce>
    {
        // Handle NVM potential changes
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 8012844:	4a06      	ldr	r2, [pc, #24]	@ (8012860 <LoRaMacMibSetRequestConfirm+0x6dc>)
 8012846:	f892 3495 	ldrb.w	r3, [r2, #1173]	@ 0x495
 801284a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801284e:	f882 3495 	strb.w	r3, [r2, #1173]	@ 0x495
    }
#endif /* LORAMAC_VERSION */
    return status;
 8012852:	7dfb      	ldrb	r3, [r7, #23]
}
 8012854:	4618      	mov	r0, r3
 8012856:	3718      	adds	r7, #24
 8012858:	46bd      	mov	sp, r7
 801285a:	bd80      	pop	{r7, pc}
 801285c:	20000df0 	.word	0x20000df0
 8012860:	200008d0 	.word	0x200008d0

08012864 <LoRaMacMlmeRequest>:
    }
    return LORAMAC_STATUS_OK;
}

LoRaMacStatus_t LoRaMacMlmeRequest( MlmeReq_t* mlmeRequest )
{
 8012864:	b580      	push	{r7, lr}
 8012866:	b08a      	sub	sp, #40	@ 0x28
 8012868:	af00      	add	r7, sp, #0
 801286a:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 801286c:	2302      	movs	r3, #2
 801286e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    MlmeConfirmQueue_t queueElement;
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 8012872:	2300      	movs	r3, #0
 8012874:	83bb      	strh	r3, [r7, #28]

    if( mlmeRequest == NULL )
 8012876:	687b      	ldr	r3, [r7, #4]
 8012878:	2b00      	cmp	r3, #0
 801287a:	d101      	bne.n	8012880 <LoRaMacMlmeRequest+0x1c>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 801287c:	2303      	movs	r3, #3
 801287e:	e16c      	b.n	8012b5a <LoRaMacMlmeRequest+0x2f6>
    }
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    // Initialize mlmeRequest->ReqReturn.DutyCycleWaitTime to 0 in order to
    // return a valid value in case the MAC is busy.
    mlmeRequest->ReqReturn.DutyCycleWaitTime = 0;
 8012880:	687b      	ldr	r3, [r7, #4]
 8012882:	2200      	movs	r2, #0
 8012884:	611a      	str	r2, [r3, #16]
#endif /* LORAMAC_VERSION */

    if( LoRaMacIsBusy( ) == true )
 8012886:	f7fc fc5f 	bl	800f148 <LoRaMacIsBusy>
 801288a:	4603      	mov	r3, r0
 801288c:	2b00      	cmp	r3, #0
 801288e:	d001      	beq.n	8012894 <LoRaMacMlmeRequest+0x30>
    {
        return LORAMAC_STATUS_BUSY;
 8012890:	2301      	movs	r3, #1
 8012892:	e162      	b.n	8012b5a <LoRaMacMlmeRequest+0x2f6>
    }
    if( LoRaMacConfirmQueueIsFull( ) == true )
 8012894:	f001 f956 	bl	8013b44 <LoRaMacConfirmQueueIsFull>
 8012898:	4603      	mov	r3, r0
 801289a:	2b00      	cmp	r3, #0
 801289c:	d001      	beq.n	80128a2 <LoRaMacMlmeRequest+0x3e>
    {
        return LORAMAC_STATUS_BUSY;
 801289e:	2301      	movs	r3, #1
 80128a0:	e15b      	b.n	8012b5a <LoRaMacMlmeRequest+0x2f6>
    }

    if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 80128a2:	f001 f943 	bl	8013b2c <LoRaMacConfirmQueueGetCnt>
 80128a6:	4603      	mov	r3, r0
 80128a8:	2b00      	cmp	r3, #0
 80128aa:	d104      	bne.n	80128b6 <LoRaMacMlmeRequest+0x52>
    {
        memset1( ( uint8_t* ) &MacCtx.MlmeConfirm, 0, sizeof( MacCtx.MlmeConfirm ) );
 80128ac:	2214      	movs	r2, #20
 80128ae:	2100      	movs	r1, #0
 80128b0:	48ac      	ldr	r0, [pc, #688]	@ (8012b64 <LoRaMacMlmeRequest+0x300>)
 80128b2:	f004 fdff 	bl	80174b4 <memset1>
    }
    MacCtx.MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80128b6:	4bac      	ldr	r3, [pc, #688]	@ (8012b68 <LoRaMacMlmeRequest+0x304>)
 80128b8:	2201      	movs	r2, #1
 80128ba:	f883 2459 	strb.w	r2, [r3, #1113]	@ 0x459

    MacCtx.MacFlags.Bits.MlmeReq = 1;
 80128be:	4aaa      	ldr	r2, [pc, #680]	@ (8012b68 <LoRaMacMlmeRequest+0x304>)
 80128c0:	f892 3495 	ldrb.w	r3, [r2, #1173]	@ 0x495
 80128c4:	f043 0304 	orr.w	r3, r3, #4
 80128c8:	f882 3495 	strb.w	r3, [r2, #1173]	@ 0x495
    queueElement.Request = mlmeRequest->Type;
 80128cc:	687b      	ldr	r3, [r7, #4]
 80128ce:	781b      	ldrb	r3, [r3, #0]
 80128d0:	f887 3020 	strb.w	r3, [r7, #32]
    queueElement.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80128d4:	2301      	movs	r3, #1
 80128d6:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
    queueElement.RestrictCommonReadyToHandle = false;
 80128da:	2300      	movs	r3, #0
 80128dc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    queueElement.ReadyToHandle = false;
 80128e0:	2300      	movs	r3, #0
 80128e2:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
#endif /* LORAMAC_VERSION */

    switch( mlmeRequest->Type )
 80128e6:	687b      	ldr	r3, [r7, #4]
 80128e8:	781b      	ldrb	r3, [r3, #0]
 80128ea:	3b01      	subs	r3, #1
 80128ec:	2b0c      	cmp	r3, #12
 80128ee:	f200 8108 	bhi.w	8012b02 <LoRaMacMlmeRequest+0x29e>
 80128f2:	a201      	add	r2, pc, #4	@ (adr r2, 80128f8 <LoRaMacMlmeRequest+0x94>)
 80128f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80128f8:	0801292d 	.word	0x0801292d
 80128fc:	08012b03 	.word	0x08012b03
 8012900:	08012b03 	.word	0x08012b03
 8012904:	08012a03 	.word	0x08012a03
 8012908:	08012a25 	.word	0x08012a25
 801290c:	08012b03 	.word	0x08012b03
 8012910:	08012b03 	.word	0x08012b03
 8012914:	08012b03 	.word	0x08012b03
 8012918:	08012a43 	.word	0x08012a43
 801291c:	08012b03 	.word	0x08012b03
 8012920:	08012ad1 	.word	0x08012ad1
 8012924:	08012a65 	.word	0x08012a65
 8012928:	08012aaf 	.word	0x08012aaf
    {
        case MLME_JOIN:
        {
            if( ( MacCtx.MacState & LORAMAC_TX_DELAYED ) == LORAMAC_TX_DELAYED )
 801292c:	4b8e      	ldr	r3, [pc, #568]	@ (8012b68 <LoRaMacMlmeRequest+0x304>)
 801292e:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 8012932:	f003 0320 	and.w	r3, r3, #32
 8012936:	2b00      	cmp	r3, #0
 8012938:	d001      	beq.n	801293e <LoRaMacMlmeRequest+0xda>
            {
                return LORAMAC_STATUS_BUSY;
 801293a:	2301      	movs	r3, #1
 801293c:	e10d      	b.n	8012b5a <LoRaMacMlmeRequest+0x2f6>
            {
                // Revert back the previous datarate ( mainly used for US915 like regions )
                Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR_RESTORE );
            }
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
            if( mlmeRequest->Req.Join.NetworkActivation == ACTIVATION_TYPE_OTAA )
 801293e:	687b      	ldr	r3, [r7, #4]
 8012940:	791b      	ldrb	r3, [r3, #4]
 8012942:	2b02      	cmp	r3, #2
 8012944:	d12e      	bne.n	80129a4 <LoRaMacMlmeRequest+0x140>
            {
                ResetMacParameters( );
 8012946:	f7fe f997 	bl	8010c78 <ResetMacParameters>

                Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR );
 801294a:	4b88      	ldr	r3, [pc, #544]	@ (8012b6c <LoRaMacMlmeRequest+0x308>)
 801294c:	f893 0040 	ldrb.w	r0, [r3, #64]	@ 0x40
 8012950:	687b      	ldr	r3, [r7, #4]
 8012952:	795b      	ldrb	r3, [r3, #5]
 8012954:	b25b      	sxtb	r3, r3
 8012956:	2200      	movs	r2, #0
 8012958:	4619      	mov	r1, r3
 801295a:	f002 fbf2 	bl	8015142 <RegionAlternateDr>
 801295e:	4603      	mov	r3, r0
 8012960:	461a      	mov	r2, r3
 8012962:	4b82      	ldr	r3, [pc, #520]	@ (8012b6c <LoRaMacMlmeRequest+0x308>)
 8012964:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

                queueElement.Status = LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL;
 8012968:	2307      	movs	r3, #7
 801296a:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21

                status = SendReJoinReq( JOIN_REQ );
 801296e:	20ff      	movs	r0, #255	@ 0xff
 8012970:	f7fd ff00 	bl	8010774 <SendReJoinReq>
 8012974:	4603      	mov	r3, r0
 8012976:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

                if( status != LORAMAC_STATUS_OK )
 801297a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801297e:	2b00      	cmp	r3, #0
 8012980:	f000 80c1 	beq.w	8012b06 <LoRaMacMlmeRequest+0x2a2>
                {
                    // Revert back the previous datarate ( mainly used for US915 like regions )
                    Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR_RESTORE );
 8012984:	4b79      	ldr	r3, [pc, #484]	@ (8012b6c <LoRaMacMlmeRequest+0x308>)
 8012986:	f893 0040 	ldrb.w	r0, [r3, #64]	@ 0x40
 801298a:	687b      	ldr	r3, [r7, #4]
 801298c:	795b      	ldrb	r3, [r3, #5]
 801298e:	b25b      	sxtb	r3, r3
 8012990:	2201      	movs	r2, #1
 8012992:	4619      	mov	r1, r3
 8012994:	f002 fbd5 	bl	8015142 <RegionAlternateDr>
 8012998:	4603      	mov	r3, r0
 801299a:	461a      	mov	r2, r3
 801299c:	4b73      	ldr	r3, [pc, #460]	@ (8012b6c <LoRaMacMlmeRequest+0x308>)
 801299e:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
                MacCtx.MacCallbacks->MacProcessNotify( );
                MacCtx.MacFlags.Bits.MacDone = 1;
                status = LORAMAC_STATUS_OK;
            }
#endif /* LORAMAC_VERSION */
            break;
 80129a2:	e0b0      	b.n	8012b06 <LoRaMacMlmeRequest+0x2a2>
            else if( mlmeRequest->Req.Join.NetworkActivation == ACTIVATION_TYPE_ABP )
 80129a4:	687b      	ldr	r3, [r7, #4]
 80129a6:	791b      	ldrb	r3, [r3, #4]
 80129a8:	2b01      	cmp	r3, #1
 80129aa:	f040 80ac 	bne.w	8012b06 <LoRaMacMlmeRequest+0x2a2>
                Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = false;
 80129ae:	4b6f      	ldr	r3, [pc, #444]	@ (8012b6c <LoRaMacMlmeRequest+0x308>)
 80129b0:	2200      	movs	r2, #0
 80129b2:	f883 2109 	strb.w	r2, [r3, #265]	@ 0x109
                params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 80129b6:	2302      	movs	r3, #2
 80129b8:	763b      	strb	r3, [r7, #24]
                RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 80129ba:	4b6c      	ldr	r3, [pc, #432]	@ (8012b6c <LoRaMacMlmeRequest+0x308>)
 80129bc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80129c0:	f107 020c 	add.w	r2, r7, #12
 80129c4:	4611      	mov	r1, r2
 80129c6:	4618      	mov	r0, r3
 80129c8:	f002 fac1 	bl	8014f4e <RegionInitDefaults>
                Nvm.MacGroup2.NetworkActivation = mlmeRequest->Req.Join.NetworkActivation;
 80129cc:	687b      	ldr	r3, [r7, #4]
 80129ce:	791a      	ldrb	r2, [r3, #4]
 80129d0:	4b66      	ldr	r3, [pc, #408]	@ (8012b6c <LoRaMacMlmeRequest+0x308>)
 80129d2:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c
                queueElement.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 80129d6:	2300      	movs	r3, #0
 80129d8:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
                queueElement.ReadyToHandle = true;
 80129dc:	2301      	movs	r3, #1
 80129de:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
                MacCtx.MacCallbacks->MacProcessNotify( );
 80129e2:	4b61      	ldr	r3, [pc, #388]	@ (8012b68 <LoRaMacMlmeRequest+0x304>)
 80129e4:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 80129e8:	691b      	ldr	r3, [r3, #16]
 80129ea:	4798      	blx	r3
                MacCtx.MacFlags.Bits.MacDone = 1;
 80129ec:	4a5e      	ldr	r2, [pc, #376]	@ (8012b68 <LoRaMacMlmeRequest+0x304>)
 80129ee:	f892 3495 	ldrb.w	r3, [r2, #1173]	@ 0x495
 80129f2:	f043 0320 	orr.w	r3, r3, #32
 80129f6:	f882 3495 	strb.w	r3, [r2, #1173]	@ 0x495
                status = LORAMAC_STATUS_OK;
 80129fa:	2300      	movs	r3, #0
 80129fc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 8012a00:	e081      	b.n	8012b06 <LoRaMacMlmeRequest+0x2a2>
        }
        case MLME_LINK_CHECK:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 8012a02:	2300      	movs	r3, #0
 8012a04:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            if( LoRaMacCommandsAddCmd( MOTE_MAC_LINK_CHECK_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8012a08:	f107 031c 	add.w	r3, r7, #28
 8012a0c:	2200      	movs	r2, #0
 8012a0e:	4619      	mov	r1, r3
 8012a10:	2002      	movs	r0, #2
 8012a12:	f000 fcfd 	bl	8013410 <LoRaMacCommandsAddCmd>
 8012a16:	4603      	mov	r3, r0
 8012a18:	2b00      	cmp	r3, #0
 8012a1a:	d076      	beq.n	8012b0a <LoRaMacMlmeRequest+0x2a6>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8012a1c:	2313      	movs	r3, #19
 8012a1e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            }
            break;
 8012a22:	e072      	b.n	8012b0a <LoRaMacMlmeRequest+0x2a6>
            break;
        }
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
        case MLME_TXCW:
        {
            status = SetTxContinuousWave( mlmeRequest->Req.TxCw.Timeout, mlmeRequest->Req.TxCw.Frequency, mlmeRequest->Req.TxCw.Power );
 8012a24:	687b      	ldr	r3, [r7, #4]
 8012a26:	8898      	ldrh	r0, [r3, #4]
 8012a28:	687b      	ldr	r3, [r7, #4]
 8012a2a:	6899      	ldr	r1, [r3, #8]
 8012a2c:	687b      	ldr	r3, [r7, #4]
 8012a2e:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8012a32:	b2db      	uxtb	r3, r3
 8012a34:	461a      	mov	r2, r3
 8012a36:	f7fe fc65 	bl	8011304 <SetTxContinuousWave>
 8012a3a:	4603      	mov	r3, r0
 8012a3c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 8012a40:	e06a      	b.n	8012b18 <LoRaMacMlmeRequest+0x2b4>
        }
#endif /* LORAMAC_VERSION */
        case MLME_DEVICE_TIME:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 8012a42:	2300      	movs	r3, #0
 8012a44:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            if( LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_TIME_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8012a48:	f107 031c 	add.w	r3, r7, #28
 8012a4c:	2200      	movs	r2, #0
 8012a4e:	4619      	mov	r1, r3
 8012a50:	200d      	movs	r0, #13
 8012a52:	f000 fcdd 	bl	8013410 <LoRaMacCommandsAddCmd>
 8012a56:	4603      	mov	r3, r0
 8012a58:	2b00      	cmp	r3, #0
 8012a5a:	d058      	beq.n	8012b0e <LoRaMacMlmeRequest+0x2aa>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8012a5c:	2313      	movs	r3, #19
 8012a5e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            }
            break;
 8012a62:	e054      	b.n	8012b0e <LoRaMacMlmeRequest+0x2aa>
        }
        case MLME_PING_SLOT_INFO:
        {
            if( Nvm.MacGroup2.DeviceClass == CLASS_A )
 8012a64:	4b41      	ldr	r3, [pc, #260]	@ (8012b6c <LoRaMacMlmeRequest+0x308>)
 8012a66:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 8012a6a:	2b00      	cmp	r3, #0
 8012a6c:	d151      	bne.n	8012b12 <LoRaMacMlmeRequest+0x2ae>
            {
                uint8_t value = mlmeRequest->Req.PingSlotInfo.PingSlot.Value;
 8012a6e:	687b      	ldr	r3, [r7, #4]
 8012a70:	791b      	ldrb	r3, [r3, #4]
 8012a72:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

                // LoRaMac will send this command piggy-pack
                LoRaMacClassBSetPingSlotInfo( mlmeRequest->Req.PingSlotInfo.PingSlot.Fields.Periodicity );
 8012a76:	687b      	ldr	r3, [r7, #4]
 8012a78:	791b      	ldrb	r3, [r3, #4]
 8012a7a:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8012a7e:	b2db      	uxtb	r3, r3
 8012a80:	4618      	mov	r0, r3
 8012a82:	f000 fb1b 	bl	80130bc <LoRaMacClassBSetPingSlotInfo>
                macCmdPayload[0] = value;
 8012a86:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8012a8a:	773b      	strb	r3, [r7, #28]
                status = LORAMAC_STATUS_OK;
 8012a8c:	2300      	movs	r3, #0
 8012a8e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                if( LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_INFO_REQ, macCmdPayload, 1 ) != LORAMAC_COMMANDS_SUCCESS )
 8012a92:	f107 031c 	add.w	r3, r7, #28
 8012a96:	2201      	movs	r2, #1
 8012a98:	4619      	mov	r1, r3
 8012a9a:	2010      	movs	r0, #16
 8012a9c:	f000 fcb8 	bl	8013410 <LoRaMacCommandsAddCmd>
 8012aa0:	4603      	mov	r3, r0
 8012aa2:	2b00      	cmp	r3, #0
 8012aa4:	d035      	beq.n	8012b12 <LoRaMacMlmeRequest+0x2ae>
                {
                    status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8012aa6:	2313      	movs	r3, #19
 8012aa8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                }
            }
            break;
 8012aac:	e031      	b.n	8012b12 <LoRaMacMlmeRequest+0x2ae>
        }
        case MLME_BEACON_TIMING:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 8012aae:	2300      	movs	r3, #0
 8012ab0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            if( LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_TIMING_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8012ab4:	f107 031c 	add.w	r3, r7, #28
 8012ab8:	2200      	movs	r2, #0
 8012aba:	4619      	mov	r1, r3
 8012abc:	2012      	movs	r0, #18
 8012abe:	f000 fca7 	bl	8013410 <LoRaMacCommandsAddCmd>
 8012ac2:	4603      	mov	r3, r0
 8012ac4:	2b00      	cmp	r3, #0
 8012ac6:	d026      	beq.n	8012b16 <LoRaMacMlmeRequest+0x2b2>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8012ac8:	2313      	movs	r3, #19
 8012aca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            }
            break;
 8012ace:	e022      	b.n	8012b16 <LoRaMacMlmeRequest+0x2b2>
        }
        case MLME_BEACON_ACQUISITION:
        {
            // Apply the request
            queueElement.RestrictCommonReadyToHandle = true;
 8012ad0:	2301      	movs	r3, #1
 8012ad2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

            if( LoRaMacClassBIsAcquisitionInProgress( ) == false )
 8012ad6:	f000 faa7 	bl	8013028 <LoRaMacClassBIsAcquisitionInProgress>
 8012ada:	4603      	mov	r3, r0
 8012adc:	f083 0301 	eor.w	r3, r3, #1
 8012ae0:	b2db      	uxtb	r3, r3
 8012ae2:	2b00      	cmp	r3, #0
 8012ae4:	d009      	beq.n	8012afa <LoRaMacMlmeRequest+0x296>
            {
                // Start class B algorithm
                LoRaMacClassBSetBeaconState( BEACON_STATE_ACQUISITION );
 8012ae6:	2000      	movs	r0, #0
 8012ae8:	f000 fa80 	bl	8012fec <LoRaMacClassBSetBeaconState>
                LoRaMacClassBBeaconTimerEvent( NULL );
 8012aec:	2000      	movs	r0, #0
 8012aee:	f000 faa2 	bl	8013036 <LoRaMacClassBBeaconTimerEvent>

                status = LORAMAC_STATUS_OK;
 8012af2:	2300      	movs	r3, #0
 8012af4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            }
            else
            {
                status = LORAMAC_STATUS_BUSY;
            }
            break;
 8012af8:	e00e      	b.n	8012b18 <LoRaMacMlmeRequest+0x2b4>
                status = LORAMAC_STATUS_BUSY;
 8012afa:	2301      	movs	r3, #1
 8012afc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 8012b00:	e00a      	b.n	8012b18 <LoRaMacMlmeRequest+0x2b4>
        }
        default:
            break;
 8012b02:	bf00      	nop
 8012b04:	e008      	b.n	8012b18 <LoRaMacMlmeRequest+0x2b4>
            break;
 8012b06:	bf00      	nop
 8012b08:	e006      	b.n	8012b18 <LoRaMacMlmeRequest+0x2b4>
            break;
 8012b0a:	bf00      	nop
 8012b0c:	e004      	b.n	8012b18 <LoRaMacMlmeRequest+0x2b4>
            break;
 8012b0e:	bf00      	nop
 8012b10:	e002      	b.n	8012b18 <LoRaMacMlmeRequest+0x2b4>
            break;
 8012b12:	bf00      	nop
 8012b14:	e000      	b.n	8012b18 <LoRaMacMlmeRequest+0x2b4>
            break;
 8012b16:	bf00      	nop
    }

    // Fill return structure
    mlmeRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 8012b18:	4b13      	ldr	r3, [pc, #76]	@ (8012b68 <LoRaMacMlmeRequest+0x304>)
 8012b1a:	f8d3 2498 	ldr.w	r2, [r3, #1176]	@ 0x498
 8012b1e:	687b      	ldr	r3, [r7, #4]
 8012b20:	611a      	str	r2, [r3, #16]

    if( status != LORAMAC_STATUS_OK )
 8012b22:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012b26:	2b00      	cmp	r3, #0
 8012b28:	d010      	beq.n	8012b4c <LoRaMacMlmeRequest+0x2e8>
    {
        if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 8012b2a:	f000 ffff 	bl	8013b2c <LoRaMacConfirmQueueGetCnt>
 8012b2e:	4603      	mov	r3, r0
 8012b30:	2b00      	cmp	r3, #0
 8012b32:	d110      	bne.n	8012b56 <LoRaMacMlmeRequest+0x2f2>
        {
            MacCtx.NodeAckRequested = false;
 8012b34:	4b0c      	ldr	r3, [pc, #48]	@ (8012b68 <LoRaMacMlmeRequest+0x304>)
 8012b36:	2200      	movs	r2, #0
 8012b38:	f883 241e 	strb.w	r2, [r3, #1054]	@ 0x41e
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 8012b3c:	4a0a      	ldr	r2, [pc, #40]	@ (8012b68 <LoRaMacMlmeRequest+0x304>)
 8012b3e:	f892 3495 	ldrb.w	r3, [r2, #1173]	@ 0x495
 8012b42:	f36f 0382 	bfc	r3, #2, #1
 8012b46:	f882 3495 	strb.w	r3, [r2, #1173]	@ 0x495
 8012b4a:	e004      	b.n	8012b56 <LoRaMacMlmeRequest+0x2f2>
        }
    }
    else
    {
        LoRaMacConfirmQueueAdd( &queueElement );
 8012b4c:	f107 0320 	add.w	r3, r7, #32
 8012b50:	4618      	mov	r0, r3
 8012b52:	f000 fe9d 	bl	8013890 <LoRaMacConfirmQueueAdd>
    }
    return status;
 8012b56:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8012b5a:	4618      	mov	r0, r3
 8012b5c:	3728      	adds	r7, #40	@ 0x28
 8012b5e:	46bd      	mov	sp, r7
 8012b60:	bd80      	pop	{r7, pc}
 8012b62:	bf00      	nop
 8012b64:	20000d28 	.word	0x20000d28
 8012b68:	200008d0 	.word	0x200008d0
 8012b6c:	20000df0 	.word	0x20000df0

08012b70 <LoRaMacMcpsRequest>:

/* ST_WORKAROUND_BEGIN: Update MCPS request with new input parameter to allow delayed tx */
LoRaMacStatus_t LoRaMacMcpsRequest( McpsReq_t* mcpsRequest, bool allowDelayedTx )
{
 8012b70:	b5b0      	push	{r4, r5, r7, lr}
 8012b72:	b092      	sub	sp, #72	@ 0x48
 8012b74:	af02      	add	r7, sp, #8
 8012b76:	6078      	str	r0, [r7, #4]
 8012b78:	460b      	mov	r3, r1
 8012b7a:	70fb      	strb	r3, [r7, #3]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 8012b7c:	2302      	movs	r3, #2
 8012b7e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    LoRaMacHeader_t macHdr;
    VerifyParams_t verify;
    uint8_t fPort = 0;
 8012b82:	2300      	movs	r3, #0
 8012b84:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
    /* ST_WORKAROUND_BEGIN: remove GCC9 warning */
    void* fBuffer = NULL;
 8012b88:	2300      	movs	r3, #0
 8012b8a:	63bb      	str	r3, [r7, #56]	@ 0x38
    /* ST_WORKAROUND_END */
    uint16_t fBufferSize;
    int8_t datarate = DR_0;
 8012b8c:	2300      	movs	r3, #0
 8012b8e:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    bool readyToSend = false;
 8012b92:	2300      	movs	r3, #0
 8012b94:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

    if( mcpsRequest == NULL )
 8012b98:	687b      	ldr	r3, [r7, #4]
 8012b9a:	2b00      	cmp	r3, #0
 8012b9c:	d101      	bne.n	8012ba2 <LoRaMacMcpsRequest+0x32>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8012b9e:	2303      	movs	r3, #3
 8012ba0:	e113      	b.n	8012dca <LoRaMacMcpsRequest+0x25a>
        }
    }
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    // Initialize mcpsRequest->ReqReturn.DutyCycleWaitTime to 0 in order to
    // return a valid value in case the MAC is busy.
    mcpsRequest->ReqReturn.DutyCycleWaitTime = 0;
 8012ba2:	687b      	ldr	r3, [r7, #4]
 8012ba4:	2200      	movs	r2, #0
 8012ba6:	611a      	str	r2, [r3, #16]

    if( LoRaMacIsBusy( ) == true )
 8012ba8:	f7fc face 	bl	800f148 <LoRaMacIsBusy>
 8012bac:	4603      	mov	r3, r0
 8012bae:	2b00      	cmp	r3, #0
 8012bb0:	d001      	beq.n	8012bb6 <LoRaMacMcpsRequest+0x46>
    {
        return LORAMAC_STATUS_BUSY;
 8012bb2:	2301      	movs	r3, #1
 8012bb4:	e109      	b.n	8012dca <LoRaMacMcpsRequest+0x25a>
    }

    McpsReq_t request = *mcpsRequest;
 8012bb6:	687b      	ldr	r3, [r7, #4]
 8012bb8:	f107 040c 	add.w	r4, r7, #12
 8012bbc:	461d      	mov	r5, r3
 8012bbe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012bc0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012bc2:	682b      	ldr	r3, [r5, #0]
 8012bc4:	6023      	str	r3, [r4, #0]

    macHdr.Value = 0;
 8012bc6:	2300      	movs	r3, #0
 8012bc8:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
    memset1( ( uint8_t* ) &MacCtx.McpsConfirm, 0, sizeof( MacCtx.McpsConfirm ) );
 8012bcc:	2214      	movs	r2, #20
 8012bce:	2100      	movs	r1, #0
 8012bd0:	4880      	ldr	r0, [pc, #512]	@ (8012dd4 <LoRaMacMcpsRequest+0x264>)
 8012bd2:	f004 fc6f 	bl	80174b4 <memset1>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8012bd6:	4b80      	ldr	r3, [pc, #512]	@ (8012dd8 <LoRaMacMcpsRequest+0x268>)
 8012bd8:	2201      	movs	r2, #1
 8012bda:	f883 2445 	strb.w	r2, [r3, #1093]	@ 0x445

    // Apply confirmed downlinks, if the device has not received a valid
    // downlink after a join accept.
    if( ( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_OTAA ) &&
 8012bde:	4b7f      	ldr	r3, [pc, #508]	@ (8012ddc <LoRaMacMcpsRequest+0x26c>)
 8012be0:	f893 311c 	ldrb.w	r3, [r3, #284]	@ 0x11c
 8012be4:	2b02      	cmp	r3, #2
 8012be6:	d111      	bne.n	8012c0c <LoRaMacMcpsRequest+0x9c>
        ( Nvm.MacGroup2.DeviceClass == CLASS_C ) &&
 8012be8:	4b7c      	ldr	r3, [pc, #496]	@ (8012ddc <LoRaMacMcpsRequest+0x26c>)
 8012bea:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
    if( ( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_OTAA ) &&
 8012bee:	2b02      	cmp	r3, #2
 8012bf0:	d10c      	bne.n	8012c0c <LoRaMacMcpsRequest+0x9c>
        ( Nvm.MacGroup2.DownlinkReceived == false ) &&
 8012bf2:	4b7a      	ldr	r3, [pc, #488]	@ (8012ddc <LoRaMacMcpsRequest+0x26c>)
 8012bf4:	f893 310a 	ldrb.w	r3, [r3, #266]	@ 0x10a
 8012bf8:	f083 0301 	eor.w	r3, r3, #1
 8012bfc:	b2db      	uxtb	r3, r3
        ( Nvm.MacGroup2.DeviceClass == CLASS_C ) &&
 8012bfe:	2b00      	cmp	r3, #0
 8012c00:	d004      	beq.n	8012c0c <LoRaMacMcpsRequest+0x9c>
        ( request.Type == MCPS_UNCONFIRMED ) )
 8012c02:	7b3b      	ldrb	r3, [r7, #12]
        ( Nvm.MacGroup2.DownlinkReceived == false ) &&
 8012c04:	2b00      	cmp	r3, #0
 8012c06:	d101      	bne.n	8012c0c <LoRaMacMcpsRequest+0x9c>
    {
        request.Type = MCPS_CONFIRMED;
 8012c08:	2301      	movs	r3, #1
 8012c0a:	733b      	strb	r3, [r7, #12]
    }

    switch( request.Type )
 8012c0c:	7b3b      	ldrb	r3, [r7, #12]
 8012c0e:	2b03      	cmp	r3, #3
 8012c10:	d030      	beq.n	8012c74 <LoRaMacMcpsRequest+0x104>
 8012c12:	2b03      	cmp	r3, #3
 8012c14:	dc3f      	bgt.n	8012c96 <LoRaMacMcpsRequest+0x126>
 8012c16:	2b00      	cmp	r3, #0
 8012c18:	d002      	beq.n	8012c20 <LoRaMacMcpsRequest+0xb0>
 8012c1a:	2b01      	cmp	r3, #1
 8012c1c:	d015      	beq.n	8012c4a <LoRaMacMcpsRequest+0xda>
            fBufferSize = request.Req.Proprietary.fBufferSize;
            datarate = request.Req.Proprietary.Datarate;
            break;
        }
        default:
            break;
 8012c1e:	e03a      	b.n	8012c96 <LoRaMacMcpsRequest+0x126>
            readyToSend = true;
 8012c20:	2301      	movs	r3, #1
 8012c22:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
            macHdr.Bits.MType = FRAME_TYPE_DATA_UNCONFIRMED_UP;
 8012c26:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8012c2a:	2202      	movs	r2, #2
 8012c2c:	f362 1347 	bfi	r3, r2, #5, #3
 8012c30:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
            fPort = request.Req.Unconfirmed.fPort;
 8012c34:	7c3b      	ldrb	r3, [r7, #16]
 8012c36:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
            fBuffer = request.Req.Unconfirmed.fBuffer;
 8012c3a:	697b      	ldr	r3, [r7, #20]
 8012c3c:	63bb      	str	r3, [r7, #56]	@ 0x38
            fBufferSize = request.Req.Unconfirmed.fBufferSize;
 8012c3e:	8b3b      	ldrh	r3, [r7, #24]
 8012c40:	86fb      	strh	r3, [r7, #54]	@ 0x36
            datarate = request.Req.Unconfirmed.Datarate;
 8012c42:	7ebb      	ldrb	r3, [r7, #26]
 8012c44:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
            break;
 8012c48:	e026      	b.n	8012c98 <LoRaMacMcpsRequest+0x128>
            readyToSend = true;
 8012c4a:	2301      	movs	r3, #1
 8012c4c:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
            macHdr.Bits.MType = FRAME_TYPE_DATA_CONFIRMED_UP;
 8012c50:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8012c54:	2204      	movs	r2, #4
 8012c56:	f362 1347 	bfi	r3, r2, #5, #3
 8012c5a:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
            fPort = request.Req.Confirmed.fPort;
 8012c5e:	7c3b      	ldrb	r3, [r7, #16]
 8012c60:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
            fBuffer = request.Req.Confirmed.fBuffer;
 8012c64:	697b      	ldr	r3, [r7, #20]
 8012c66:	63bb      	str	r3, [r7, #56]	@ 0x38
            fBufferSize = request.Req.Confirmed.fBufferSize;
 8012c68:	8b3b      	ldrh	r3, [r7, #24]
 8012c6a:	86fb      	strh	r3, [r7, #54]	@ 0x36
            datarate = request.Req.Confirmed.Datarate;
 8012c6c:	7ebb      	ldrb	r3, [r7, #26]
 8012c6e:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
            break;
 8012c72:	e011      	b.n	8012c98 <LoRaMacMcpsRequest+0x128>
            readyToSend = true;
 8012c74:	2301      	movs	r3, #1
 8012c76:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
            macHdr.Bits.MType = FRAME_TYPE_PROPRIETARY;
 8012c7a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8012c7e:	f043 03e0 	orr.w	r3, r3, #224	@ 0xe0
 8012c82:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
            fBuffer = request.Req.Proprietary.fBuffer;
 8012c86:	693b      	ldr	r3, [r7, #16]
 8012c88:	63bb      	str	r3, [r7, #56]	@ 0x38
            fBufferSize = request.Req.Proprietary.fBufferSize;
 8012c8a:	8abb      	ldrh	r3, [r7, #20]
 8012c8c:	86fb      	strh	r3, [r7, #54]	@ 0x36
            datarate = request.Req.Proprietary.Datarate;
 8012c8e:	7dbb      	ldrb	r3, [r7, #22]
 8012c90:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
            break;
 8012c94:	e000      	b.n	8012c98 <LoRaMacMcpsRequest+0x128>
            break;
 8012c96:	bf00      	nop
    }

    // Make sure that the input datarate is compliant
    // to the regional specification.
    getPhy.Attribute = PHY_MIN_TX_DR;
 8012c98:	2302      	movs	r3, #2
 8012c9a:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8012c9e:	4b4f      	ldr	r3, [pc, #316]	@ (8012ddc <LoRaMacMcpsRequest+0x26c>)
 8012ca0:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 8012ca4:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012ca8:	4b4c      	ldr	r3, [pc, #304]	@ (8012ddc <LoRaMacMcpsRequest+0x26c>)
 8012caa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8012cae:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8012cb2:	4611      	mov	r1, r2
 8012cb4:	4618      	mov	r0, r3
 8012cb6:	f002 f921 	bl	8014efc <RegionGetPhyParam>
 8012cba:	4603      	mov	r3, r0
 8012cbc:	62bb      	str	r3, [r7, #40]	@ 0x28
    // Apply the minimum possible datarate.
    // Some regions have limitations for the minimum datarate.
    datarate = MAX( datarate, ( int8_t )phyParam.Value );
 8012cbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012cc0:	b25b      	sxtb	r3, r3
 8012cc2:	f997 2035 	ldrsb.w	r2, [r7, #53]	@ 0x35
 8012cc6:	4293      	cmp	r3, r2
 8012cc8:	bfb8      	it	lt
 8012cca:	4613      	movlt	r3, r2
 8012ccc:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35

    // Apply minimum datarate in this special case.
    if( CheckForMinimumAbpDatarate( Nvm.MacGroup2.AdrCtrlOn, Nvm.MacGroup2.NetworkActivation,
 8012cd0:	4b42      	ldr	r3, [pc, #264]	@ (8012ddc <LoRaMacMcpsRequest+0x26c>)
 8012cd2:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 8012cd6:	4a41      	ldr	r2, [pc, #260]	@ (8012ddc <LoRaMacMcpsRequest+0x26c>)
 8012cd8:	f892 111c 	ldrb.w	r1, [r2, #284]	@ 0x11c
 8012cdc:	4a3f      	ldr	r2, [pc, #252]	@ (8012ddc <LoRaMacMcpsRequest+0x26c>)
 8012cde:	f892 2109 	ldrb.w	r2, [r2, #265]	@ 0x109
 8012ce2:	4618      	mov	r0, r3
 8012ce4:	f7fc fbc8 	bl	800f478 <CheckForMinimumAbpDatarate>
 8012ce8:	4603      	mov	r3, r0
 8012cea:	2b00      	cmp	r3, #0
 8012cec:	d002      	beq.n	8012cf4 <LoRaMacMcpsRequest+0x184>
                                    Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq ) == true )
    {
        datarate = ( int8_t )phyParam.Value;
 8012cee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012cf0:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    }

    if( readyToSend == true )
 8012cf4:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8012cf8:	2b00      	cmp	r3, #0
 8012cfa:	d05f      	beq.n	8012dbc <LoRaMacMcpsRequest+0x24c>
    {
        if( ( Nvm.MacGroup2.AdrCtrlOn == false ) ||
 8012cfc:	4b37      	ldr	r3, [pc, #220]	@ (8012ddc <LoRaMacMcpsRequest+0x26c>)
 8012cfe:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 8012d02:	f083 0301 	eor.w	r3, r3, #1
 8012d06:	b2db      	uxtb	r3, r3
 8012d08:	2b00      	cmp	r3, #0
 8012d0a:	d10e      	bne.n	8012d2a <LoRaMacMcpsRequest+0x1ba>
            ( CheckForMinimumAbpDatarate( Nvm.MacGroup2.AdrCtrlOn, Nvm.MacGroup2.NetworkActivation,
 8012d0c:	4b33      	ldr	r3, [pc, #204]	@ (8012ddc <LoRaMacMcpsRequest+0x26c>)
 8012d0e:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 8012d12:	4a32      	ldr	r2, [pc, #200]	@ (8012ddc <LoRaMacMcpsRequest+0x26c>)
 8012d14:	f892 111c 	ldrb.w	r1, [r2, #284]	@ 0x11c
 8012d18:	4a30      	ldr	r2, [pc, #192]	@ (8012ddc <LoRaMacMcpsRequest+0x26c>)
 8012d1a:	f892 2109 	ldrb.w	r2, [r2, #265]	@ 0x109
 8012d1e:	4618      	mov	r0, r3
 8012d20:	f7fc fbaa 	bl	800f478 <CheckForMinimumAbpDatarate>
 8012d24:	4603      	mov	r3, r0
        if( ( Nvm.MacGroup2.AdrCtrlOn == false ) ||
 8012d26:	2b00      	cmp	r3, #0
 8012d28:	d01c      	beq.n	8012d64 <LoRaMacMcpsRequest+0x1f4>
                                          Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq ) == true ) )
        {
            verify.DatarateParams.Datarate = datarate;
 8012d2a:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8012d2e:	f887 3020 	strb.w	r3, [r7, #32]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8012d32:	4b2a      	ldr	r3, [pc, #168]	@ (8012ddc <LoRaMacMcpsRequest+0x26c>)
 8012d34:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 8012d38:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 8012d3c:	4b27      	ldr	r3, [pc, #156]	@ (8012ddc <LoRaMacMcpsRequest+0x26c>)
 8012d3e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8012d42:	f107 0120 	add.w	r1, r7, #32
 8012d46:	2205      	movs	r2, #5
 8012d48:	4618      	mov	r0, r3
 8012d4a:	f002 f912 	bl	8014f72 <RegionVerify>
 8012d4e:	4603      	mov	r3, r0
 8012d50:	2b00      	cmp	r3, #0
 8012d52:	d005      	beq.n	8012d60 <LoRaMacMcpsRequest+0x1f0>
            {
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 8012d54:	f997 2020 	ldrsb.w	r2, [r7, #32]
 8012d58:	4b20      	ldr	r3, [pc, #128]	@ (8012ddc <LoRaMacMcpsRequest+0x26c>)
 8012d5a:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 8012d5e:	e001      	b.n	8012d64 <LoRaMacMcpsRequest+0x1f4>
            }
            else
            {
                return LORAMAC_STATUS_PARAMETER_INVALID;
 8012d60:	2303      	movs	r3, #3
 8012d62:	e032      	b.n	8012dca <LoRaMacMcpsRequest+0x25a>
            }
        }

        // Verification of response timeout for class b and class c
        LoRaMacHandleResponseTimeout( Nvm.MacGroup2.MacParams.RxBCTimeout,
 8012d64:	4b1d      	ldr	r3, [pc, #116]	@ (8012ddc <LoRaMacMcpsRequest+0x26c>)
 8012d66:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8012d6a:	4a1b      	ldr	r2, [pc, #108]	@ (8012dd8 <LoRaMacMcpsRequest+0x268>)
 8012d6c:	f8d2 249c 	ldr.w	r2, [r2, #1180]	@ 0x49c
 8012d70:	4611      	mov	r1, r2
 8012d72:	4618      	mov	r0, r3
 8012d74:	f7fc fc6a 	bl	800f64c <LoRaMacHandleResponseTimeout>
                                      MacCtx.ResponseTimeoutStartTime );

        status = Send( &macHdr, fPort, fBuffer, fBufferSize, allowDelayedTx ); /* ST_WORKAROUND: Update Send request with new input parameter to allow delayed tx */
 8012d78:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8012d7a:	f897 103e 	ldrb.w	r1, [r7, #62]	@ 0x3e
 8012d7e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8012d82:	78fb      	ldrb	r3, [r7, #3]
 8012d84:	9300      	str	r3, [sp, #0]
 8012d86:	4613      	mov	r3, r2
 8012d88:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8012d8a:	f7fd fc0f 	bl	80105ac <Send>
 8012d8e:	4603      	mov	r3, r0
 8012d90:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
        if( status == LORAMAC_STATUS_OK )
 8012d94:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8012d98:	2b00      	cmp	r3, #0
 8012d9a:	d10b      	bne.n	8012db4 <LoRaMacMcpsRequest+0x244>
        {
            MacCtx.McpsConfirm.McpsRequest = request.Type;
 8012d9c:	7b3a      	ldrb	r2, [r7, #12]
 8012d9e:	4b0e      	ldr	r3, [pc, #56]	@ (8012dd8 <LoRaMacMcpsRequest+0x268>)
 8012da0:	f883 2444 	strb.w	r2, [r3, #1092]	@ 0x444
            MacCtx.MacFlags.Bits.McpsReq = 1;
 8012da4:	4a0c      	ldr	r2, [pc, #48]	@ (8012dd8 <LoRaMacMcpsRequest+0x268>)
 8012da6:	f892 3495 	ldrb.w	r3, [r2, #1173]	@ 0x495
 8012daa:	f043 0301 	orr.w	r3, r3, #1
 8012dae:	f882 3495 	strb.w	r3, [r2, #1173]	@ 0x495
 8012db2:	e003      	b.n	8012dbc <LoRaMacMcpsRequest+0x24c>
        }
        else
        {
            MacCtx.NodeAckRequested = false;
 8012db4:	4b08      	ldr	r3, [pc, #32]	@ (8012dd8 <LoRaMacMcpsRequest+0x268>)
 8012db6:	2200      	movs	r2, #0
 8012db8:	f883 241e 	strb.w	r2, [r3, #1054]	@ 0x41e
        }
    }
#endif /* LORAMAC_VERSION */

    // Fill return structure
    mcpsRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 8012dbc:	4b06      	ldr	r3, [pc, #24]	@ (8012dd8 <LoRaMacMcpsRequest+0x268>)
 8012dbe:	f8d3 2498 	ldr.w	r2, [r3, #1176]	@ 0x498
 8012dc2:	687b      	ldr	r3, [r7, #4]
 8012dc4:	611a      	str	r2, [r3, #16]

    return status;
 8012dc6:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 8012dca:	4618      	mov	r0, r3
 8012dcc:	3740      	adds	r7, #64	@ 0x40
 8012dce:	46bd      	mov	sp, r7
 8012dd0:	bdb0      	pop	{r4, r5, r7, pc}
 8012dd2:	bf00      	nop
 8012dd4:	20000d14 	.word	0x20000d14
 8012dd8:	200008d0 	.word	0x200008d0
 8012ddc:	20000df0 	.word	0x20000df0

08012de0 <LoRaMacTestSetDutyCycleOn>:
/* ST_WORKAROUND_END */

void LoRaMacTestSetDutyCycleOn( bool enable )
{
 8012de0:	b580      	push	{r7, lr}
 8012de2:	b084      	sub	sp, #16
 8012de4:	af00      	add	r7, sp, #0
 8012de6:	4603      	mov	r3, r0
 8012de8:	71fb      	strb	r3, [r7, #7]
    VerifyParams_t verify;

    verify.DutyCycle = enable;
 8012dea:	79fb      	ldrb	r3, [r7, #7]
 8012dec:	733b      	strb	r3, [r7, #12]

    if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DUTY_CYCLE ) == true )
 8012dee:	4b0a      	ldr	r3, [pc, #40]	@ (8012e18 <LoRaMacTestSetDutyCycleOn+0x38>)
 8012df0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8012df4:	f107 010c 	add.w	r1, r7, #12
 8012df8:	220f      	movs	r2, #15
 8012dfa:	4618      	mov	r0, r3
 8012dfc:	f002 f8b9 	bl	8014f72 <RegionVerify>
 8012e00:	4603      	mov	r3, r0
 8012e02:	2b00      	cmp	r3, #0
 8012e04:	d003      	beq.n	8012e0e <LoRaMacTestSetDutyCycleOn+0x2e>
    {
        Nvm.MacGroup2.DutyCycleOn = enable;
 8012e06:	4a04      	ldr	r2, [pc, #16]	@ (8012e18 <LoRaMacTestSetDutyCycleOn+0x38>)
 8012e08:	79fb      	ldrb	r3, [r7, #7]
 8012e0a:	f882 3108 	strb.w	r3, [r2, #264]	@ 0x108
    }
}
 8012e0e:	bf00      	nop
 8012e10:	3710      	adds	r7, #16
 8012e12:	46bd      	mov	sp, r7
 8012e14:	bd80      	pop	{r7, pc}
 8012e16:	bf00      	nop
 8012e18:	20000df0 	.word	0x20000df0

08012e1c <LoRaMacDeInitialization>:

LoRaMacStatus_t LoRaMacDeInitialization( void )
{
 8012e1c:	b580      	push	{r7, lr}
 8012e1e:	af00      	add	r7, sp, #0
    // Check the current state of the LoRaMac
    if ( LoRaMacStop( ) == LORAMAC_STATUS_OK )
 8012e20:	f7fe ff26 	bl	8011c70 <LoRaMacStop>
 8012e24:	4603      	mov	r3, r0
 8012e26:	2b00      	cmp	r3, #0
 8012e28:	d111      	bne.n	8012e4e <LoRaMacDeInitialization+0x32>
    {
        // Stop Timers
        TimerStop( &MacCtx.TxDelayedTimer );
 8012e2a:	480a      	ldr	r0, [pc, #40]	@ (8012e54 <LoRaMacDeInitialization+0x38>)
 8012e2c:	f008 fc4c 	bl	801b6c8 <UTIL_TIMER_Stop>
        TimerStop( &MacCtx.RxWindowTimer1 );
 8012e30:	4809      	ldr	r0, [pc, #36]	@ (8012e58 <LoRaMacDeInitialization+0x3c>)
 8012e32:	f008 fc49 	bl	801b6c8 <UTIL_TIMER_Stop>
        TimerStop( &MacCtx.RxWindowTimer2 );
 8012e36:	4809      	ldr	r0, [pc, #36]	@ (8012e5c <LoRaMacDeInitialization+0x40>)
 8012e38:	f008 fc46 	bl	801b6c8 <UTIL_TIMER_Stop>
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        TimerStop( &MacCtx.AckTimeoutTimer );
#endif /* LORAMAC_VERSION */

        // Take care about class B
        LoRaMacClassBHaltBeaconing( );
 8012e3c:	f000 f948 	bl	80130d0 <LoRaMacClassBHaltBeaconing>

        // Reset Mac parameters
        ResetMacParameters( );
 8012e40:	f7fd ff1a 	bl	8010c78 <ResetMacParameters>

        // Switch off Radio
        Radio.Sleep( );
 8012e44:	4b06      	ldr	r3, [pc, #24]	@ (8012e60 <LoRaMacDeInitialization+0x44>)
 8012e46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012e48:	4798      	blx	r3

        // Return success
        return LORAMAC_STATUS_OK;
 8012e4a:	2300      	movs	r3, #0
 8012e4c:	e000      	b.n	8012e50 <LoRaMacDeInitialization+0x34>
    }
    else
    {
        return LORAMAC_STATUS_BUSY;
 8012e4e:	2301      	movs	r3, #1
    }
}
 8012e50:	4618      	mov	r0, r3
 8012e52:	bd80      	pop	{r7, pc}
 8012e54:	20000c38 	.word	0x20000c38
 8012e58:	20000c50 	.word	0x20000c50
 8012e5c:	20000c68 	.word	0x20000c68
 8012e60:	0801f874 	.word	0x0801f874

08012e64 <LoRaMacAdrCalcNext>:
    return false;
}
#elif (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
bool LoRaMacAdrCalcNext( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut,
                         uint8_t* nbTransOut, uint32_t* adrAckCounter )
{
 8012e64:	b580      	push	{r7, lr}
 8012e66:	b08c      	sub	sp, #48	@ 0x30
 8012e68:	af00      	add	r7, sp, #0
 8012e6a:	60f8      	str	r0, [r7, #12]
 8012e6c:	60b9      	str	r1, [r7, #8]
 8012e6e:	607a      	str	r2, [r7, #4]
 8012e70:	603b      	str	r3, [r7, #0]
    bool adrAckReq = false;
 8012e72:	2300      	movs	r3, #0
 8012e74:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    int8_t datarate = adrNext->Datarate;
 8012e78:	68fb      	ldr	r3, [r7, #12]
 8012e7a:	7b1b      	ldrb	r3, [r3, #12]
 8012e7c:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    int8_t txPower = adrNext->TxPower;
 8012e80:	68fb      	ldr	r3, [r7, #12]
 8012e82:	7b5b      	ldrb	r3, [r3, #13]
 8012e84:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
    uint8_t nbTrans = adrNext->NbTrans;
 8012e88:	68fb      	ldr	r3, [r7, #12]
 8012e8a:	7b9b      	ldrb	r3, [r3, #14]
 8012e8c:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    int8_t minTxDatarate;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Report back the adr ack counter
    *adrAckCounter = adrNext->AdrAckCounter;
 8012e90:	68fb      	ldr	r3, [r7, #12]
 8012e92:	685a      	ldr	r2, [r3, #4]
 8012e94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012e96:	601a      	str	r2, [r3, #0]

    if( adrNext->AdrEnabled == true )
 8012e98:	68fb      	ldr	r3, [r7, #12]
 8012e9a:	785b      	ldrb	r3, [r3, #1]
 8012e9c:	2b00      	cmp	r3, #0
 8012e9e:	f000 8088 	beq.w	8012fb2 <LoRaMacAdrCalcNext+0x14e>
    {
        // Query minimum TX Datarate
        getPhy.Attribute = PHY_MIN_TX_DR;
 8012ea2:	2302      	movs	r3, #2
 8012ea4:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
        getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 8012ea8:	68fb      	ldr	r3, [r7, #12]
 8012eaa:	7bdb      	ldrb	r3, [r3, #15]
 8012eac:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 8012eb0:	68fb      	ldr	r3, [r7, #12]
 8012eb2:	7c1b      	ldrb	r3, [r3, #16]
 8012eb4:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8012eb8:	4611      	mov	r1, r2
 8012eba:	4618      	mov	r0, r3
 8012ebc:	f002 f81e 	bl	8014efc <RegionGetPhyParam>
 8012ec0:	4603      	mov	r3, r0
 8012ec2:	623b      	str	r3, [r7, #32]
        minTxDatarate = phyParam.Value;
 8012ec4:	6a3b      	ldr	r3, [r7, #32]
 8012ec6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        datarate = MAX( datarate, minTxDatarate );
 8012eca:	f997 202b 	ldrsb.w	r2, [r7, #43]	@ 0x2b
 8012ece:	f997 302e 	ldrsb.w	r3, [r7, #46]	@ 0x2e
 8012ed2:	4293      	cmp	r3, r2
 8012ed4:	bfb8      	it	lt
 8012ed6:	4613      	movlt	r3, r2
 8012ed8:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e

        // Verify if ADR ack req bit needs to be set.
        if( adrNext->AdrAckCounter >= adrNext->AdrAckLimit )
 8012edc:	68fb      	ldr	r3, [r7, #12]
 8012ede:	685b      	ldr	r3, [r3, #4]
 8012ee0:	68fa      	ldr	r2, [r7, #12]
 8012ee2:	8912      	ldrh	r2, [r2, #8]
 8012ee4:	4293      	cmp	r3, r2
 8012ee6:	d302      	bcc.n	8012eee <LoRaMacAdrCalcNext+0x8a>
        {
            adrAckReq = true;
 8012ee8:	2301      	movs	r3, #1
 8012eea:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        }

        // Verify, if we need to set the TX power to default
        if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
 8012eee:	68fb      	ldr	r3, [r7, #12]
 8012ef0:	685b      	ldr	r3, [r3, #4]
 8012ef2:	68fa      	ldr	r2, [r7, #12]
 8012ef4:	8912      	ldrh	r2, [r2, #8]
 8012ef6:	4611      	mov	r1, r2
 8012ef8:	68fa      	ldr	r2, [r7, #12]
 8012efa:	8952      	ldrh	r2, [r2, #10]
 8012efc:	440a      	add	r2, r1
 8012efe:	4293      	cmp	r3, r2
 8012f00:	d30f      	bcc.n	8012f22 <LoRaMacAdrCalcNext+0xbe>
        {
            // Set TX Power to default
            getPhy.Attribute = PHY_DEF_TX_POWER;
 8012f02:	230a      	movs	r3, #10
 8012f04:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
            phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 8012f08:	68fb      	ldr	r3, [r7, #12]
 8012f0a:	7c1b      	ldrb	r3, [r3, #16]
 8012f0c:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8012f10:	4611      	mov	r1, r2
 8012f12:	4618      	mov	r0, r3
 8012f14:	f001 fff2 	bl	8014efc <RegionGetPhyParam>
 8012f18:	4603      	mov	r3, r0
 8012f1a:	623b      	str	r3, [r7, #32]
            txPower = phyParam.Value;
 8012f1c:	6a3b      	ldr	r3, [r7, #32]
 8012f1e:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
        }

        // Verify, if we need to decrease the data rate
        if( adrNext->AdrAckCounter >= ( uint32_t )( adrNext->AdrAckLimit + ( adrNext->AdrAckDelay << 1 ) ) )
 8012f22:	68fb      	ldr	r3, [r7, #12]
 8012f24:	685b      	ldr	r3, [r3, #4]
 8012f26:	68fa      	ldr	r2, [r7, #12]
 8012f28:	8912      	ldrh	r2, [r2, #8]
 8012f2a:	4611      	mov	r1, r2
 8012f2c:	68fa      	ldr	r2, [r7, #12]
 8012f2e:	8952      	ldrh	r2, [r2, #10]
 8012f30:	0052      	lsls	r2, r2, #1
 8012f32:	440a      	add	r2, r1
 8012f34:	4293      	cmp	r3, r2
 8012f36:	d33c      	bcc.n	8012fb2 <LoRaMacAdrCalcNext+0x14e>
        {
            // Perform actions with every adrNext->AdrAckDelay only
            if( ( ( adrNext->AdrAckCounter - adrNext->AdrAckLimit ) % adrNext->AdrAckDelay ) == 0 )
 8012f38:	68fb      	ldr	r3, [r7, #12]
 8012f3a:	685b      	ldr	r3, [r3, #4]
 8012f3c:	68fa      	ldr	r2, [r7, #12]
 8012f3e:	8912      	ldrh	r2, [r2, #8]
 8012f40:	1a9b      	subs	r3, r3, r2
 8012f42:	68fa      	ldr	r2, [r7, #12]
 8012f44:	8952      	ldrh	r2, [r2, #10]
 8012f46:	fbb3 f1f2 	udiv	r1, r3, r2
 8012f4a:	fb01 f202 	mul.w	r2, r1, r2
 8012f4e:	1a9b      	subs	r3, r3, r2
 8012f50:	2b00      	cmp	r3, #0
 8012f52:	d12e      	bne.n	8012fb2 <LoRaMacAdrCalcNext+0x14e>
            {
                if( datarate == minTxDatarate )
 8012f54:	f997 202e 	ldrsb.w	r2, [r7, #46]	@ 0x2e
 8012f58:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 8012f5c:	429a      	cmp	r2, r3
 8012f5e:	d110      	bne.n	8012f82 <LoRaMacAdrCalcNext+0x11e>
                {
                    // Restore the channel mask
                    if( adrNext->UpdateChanMask == true )
 8012f60:	68fb      	ldr	r3, [r7, #12]
 8012f62:	781b      	ldrb	r3, [r3, #0]
 8012f64:	2b00      	cmp	r3, #0
 8012f66:	d009      	beq.n	8012f7c <LoRaMacAdrCalcNext+0x118>
                    {
                        InitDefaultsParams_t params;
                        params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 8012f68:	2302      	movs	r3, #2
 8012f6a:	773b      	strb	r3, [r7, #28]
                        RegionInitDefaults( adrNext->Region, &params );
 8012f6c:	68fb      	ldr	r3, [r7, #12]
 8012f6e:	7c1b      	ldrb	r3, [r3, #16]
 8012f70:	f107 0210 	add.w	r2, r7, #16
 8012f74:	4611      	mov	r1, r2
 8012f76:	4618      	mov	r0, r3
 8012f78:	f001 ffe9 	bl	8014f4e <RegionInitDefaults>
                    }

                    // Restore NbTrans
                    nbTrans = 1;
 8012f7c:	2301      	movs	r3, #1
 8012f7e:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
                }

                // Decrease the datarate
                getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 8012f82:	2321      	movs	r3, #33	@ 0x21
 8012f84:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
                getPhy.Datarate = datarate;
 8012f88:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8012f8c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
                getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 8012f90:	68fb      	ldr	r3, [r7, #12]
 8012f92:	7bdb      	ldrb	r3, [r3, #15]
 8012f94:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
                phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 8012f98:	68fb      	ldr	r3, [r7, #12]
 8012f9a:	7c1b      	ldrb	r3, [r3, #16]
 8012f9c:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8012fa0:	4611      	mov	r1, r2
 8012fa2:	4618      	mov	r0, r3
 8012fa4:	f001 ffaa 	bl	8014efc <RegionGetPhyParam>
 8012fa8:	4603      	mov	r3, r0
 8012faa:	623b      	str	r3, [r7, #32]
                datarate = phyParam.Value;
 8012fac:	6a3b      	ldr	r3, [r7, #32]
 8012fae:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
            }
        }
    }

    *drOut = datarate;
 8012fb2:	68bb      	ldr	r3, [r7, #8]
 8012fb4:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 8012fb8:	701a      	strb	r2, [r3, #0]
    *txPowOut = txPower;
 8012fba:	687b      	ldr	r3, [r7, #4]
 8012fbc:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 8012fc0:	701a      	strb	r2, [r3, #0]
    *nbTransOut = nbTrans;
 8012fc2:	683b      	ldr	r3, [r7, #0]
 8012fc4:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8012fc8:	701a      	strb	r2, [r3, #0]
    return adrAckReq;
 8012fca:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8012fce:	4618      	mov	r0, r3
 8012fd0:	3730      	adds	r7, #48	@ 0x30
 8012fd2:	46bd      	mov	sp, r7
 8012fd4:	bd80      	pop	{r7, pc}

08012fd6 <LoRaMacClassBInit>:
#endif /* LORAMAC_VERSION */

#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBInit( LoRaMacClassBParams_t *classBParams, LoRaMacClassBCallback_t *callbacks, LoRaMacClassBNvmData_t* nvm )
{
 8012fd6:	b480      	push	{r7}
 8012fd8:	b085      	sub	sp, #20
 8012fda:	af00      	add	r7, sp, #0
 8012fdc:	60f8      	str	r0, [r7, #12]
 8012fde:	60b9      	str	r1, [r7, #8]
 8012fe0:	607a      	str	r2, [r7, #4]
    TimerInit( &Ctx.PingSlotTimer, LoRaMacClassBPingSlotTimerEvent );
    TimerInit( &Ctx.MulticastSlotTimer, LoRaMacClassBMulticastSlotTimerEvent );

    InitClassB( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012fe2:	bf00      	nop
 8012fe4:	3714      	adds	r7, #20
 8012fe6:	46bd      	mov	sp, r7
 8012fe8:	bc80      	pop	{r7}
 8012fea:	4770      	bx	lr

08012fec <LoRaMacClassBSetBeaconState>:

void LoRaMacClassBSetBeaconState( BeaconState_t beaconState )
{
 8012fec:	b480      	push	{r7}
 8012fee:	b083      	sub	sp, #12
 8012ff0:	af00      	add	r7, sp, #0
 8012ff2:	4603      	mov	r3, r0
 8012ff4:	71fb      	strb	r3, [r7, #7]
        {
            Ctx.BeaconState = beaconState;
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012ff6:	bf00      	nop
 8012ff8:	370c      	adds	r7, #12
 8012ffa:	46bd      	mov	sp, r7
 8012ffc:	bc80      	pop	{r7}
 8012ffe:	4770      	bx	lr

08013000 <LoRaMacClassBSetPingSlotState>:

void LoRaMacClassBSetPingSlotState( PingSlotState_t pingSlotState )
{
 8013000:	b480      	push	{r7}
 8013002:	b083      	sub	sp, #12
 8013004:	af00      	add	r7, sp, #0
 8013006:	4603      	mov	r3, r0
 8013008:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.PingSlotState = pingSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801300a:	bf00      	nop
 801300c:	370c      	adds	r7, #12
 801300e:	46bd      	mov	sp, r7
 8013010:	bc80      	pop	{r7}
 8013012:	4770      	bx	lr

08013014 <LoRaMacClassBSetMulticastSlotState>:

void LoRaMacClassBSetMulticastSlotState( PingSlotState_t multicastSlotState )
{
 8013014:	b480      	push	{r7}
 8013016:	b083      	sub	sp, #12
 8013018:	af00      	add	r7, sp, #0
 801301a:	4603      	mov	r3, r0
 801301c:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.MulticastSlotState = multicastSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801301e:	bf00      	nop
 8013020:	370c      	adds	r7, #12
 8013022:	46bd      	mov	sp, r7
 8013024:	bc80      	pop	{r7}
 8013026:	4770      	bx	lr

08013028 <LoRaMacClassBIsAcquisitionInProgress>:

bool LoRaMacClassBIsAcquisitionInProgress( void )
{
 8013028:	b480      	push	{r7}
 801302a:	af00      	add	r7, sp, #0
        // searches for a beacon.
        return true;
    }
    return false;
#else
    return false;
 801302c:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801302e:	4618      	mov	r0, r3
 8013030:	46bd      	mov	sp, r7
 8013032:	bc80      	pop	{r7}
 8013034:	4770      	bx	lr

08013036 <LoRaMacClassBBeaconTimerEvent>:

void LoRaMacClassBBeaconTimerEvent( void* context )
{
 8013036:	b480      	push	{r7}
 8013038:	b083      	sub	sp, #12
 801303a:	af00      	add	r7, sp, #0
 801303c:	6078      	str	r0, [r7, #4]
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801303e:	bf00      	nop
 8013040:	370c      	adds	r7, #12
 8013042:	46bd      	mov	sp, r7
 8013044:	bc80      	pop	{r7}
 8013046:	4770      	bx	lr

08013048 <LoRaMacClassBPingSlotTimerEvent>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBPingSlotTimerEvent( void* context )
{
 8013048:	b480      	push	{r7}
 801304a:	b083      	sub	sp, #12
 801304c:	af00      	add	r7, sp, #0
 801304e:	6078      	str	r0, [r7, #4]
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013050:	bf00      	nop
 8013052:	370c      	adds	r7, #12
 8013054:	46bd      	mov	sp, r7
 8013056:	bc80      	pop	{r7}
 8013058:	4770      	bx	lr

0801305a <LoRaMacClassBMulticastSlotTimerEvent>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBMulticastSlotTimerEvent( void* context )
{
 801305a:	b480      	push	{r7}
 801305c:	b083      	sub	sp, #12
 801305e:	af00      	add	r7, sp, #0
 8013060:	6078      	str	r0, [r7, #4]
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013062:	bf00      	nop
 8013064:	370c      	adds	r7, #12
 8013066:	46bd      	mov	sp, r7
 8013068:	bc80      	pop	{r7}
 801306a:	4770      	bx	lr

0801306c <LoRaMacClassBRxBeacon>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

bool LoRaMacClassBRxBeacon( uint8_t *payload, uint16_t size )
{
 801306c:	b480      	push	{r7}
 801306e:	b083      	sub	sp, #12
 8013070:	af00      	add	r7, sp, #0
 8013072:	6078      	str	r0, [r7, #4]
 8013074:	460b      	mov	r3, r1
 8013076:	807b      	strh	r3, [r7, #2]
        // valid beacon has been received.
        beaconProcessed = true;
    }
    return beaconProcessed;
#else
    return false;
 8013078:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801307a:	4618      	mov	r0, r3
 801307c:	370c      	adds	r7, #12
 801307e:	46bd      	mov	sp, r7
 8013080:	bc80      	pop	{r7}
 8013082:	4770      	bx	lr

08013084 <LoRaMacClassBIsBeaconExpected>:

bool LoRaMacClassBIsBeaconExpected( void )
{
 8013084:	b480      	push	{r7}
 8013086:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 8013088:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801308a:	4618      	mov	r0, r3
 801308c:	46bd      	mov	sp, r7
 801308e:	bc80      	pop	{r7}
 8013090:	4770      	bx	lr

08013092 <LoRaMacClassBIsPingExpected>:

bool LoRaMacClassBIsPingExpected( void )
{
 8013092:	b480      	push	{r7}
 8013094:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 8013096:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013098:	4618      	mov	r0, r3
 801309a:	46bd      	mov	sp, r7
 801309c:	bc80      	pop	{r7}
 801309e:	4770      	bx	lr

080130a0 <LoRaMacClassBIsMulticastExpected>:

bool LoRaMacClassBIsMulticastExpected( void )
{
 80130a0:	b480      	push	{r7}
 80130a2:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 80130a4:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80130a6:	4618      	mov	r0, r3
 80130a8:	46bd      	mov	sp, r7
 80130aa:	bc80      	pop	{r7}
 80130ac:	4770      	bx	lr

080130ae <LoRaMacClassBIsBeaconModeActive>:
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}

bool LoRaMacClassBIsBeaconModeActive( void )
{
 80130ae:	b480      	push	{r7}
 80130b0:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 80130b2:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80130b4:	4618      	mov	r0, r3
 80130b6:	46bd      	mov	sp, r7
 80130b8:	bc80      	pop	{r7}
 80130ba:	4770      	bx	lr

080130bc <LoRaMacClassBSetPingSlotInfo>:

void LoRaMacClassBSetPingSlotInfo( uint8_t periodicity )
{
 80130bc:	b480      	push	{r7}
 80130be:	b083      	sub	sp, #12
 80130c0:	af00      	add	r7, sp, #0
 80130c2:	4603      	mov	r3, r0
 80130c4:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    ClassBNvm->PingSlotCtx.PingNb = CalcPingNb( periodicity );
    ClassBNvm->PingSlotCtx.PingPeriod = CalcPingPeriod( ClassBNvm->PingSlotCtx.PingNb );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80130c6:	bf00      	nop
 80130c8:	370c      	adds	r7, #12
 80130ca:	46bd      	mov	sp, r7
 80130cc:	bc80      	pop	{r7}
 80130ce:	4770      	bx	lr

080130d0 <LoRaMacClassBHaltBeaconing>:

void LoRaMacClassBHaltBeaconing( void )
{
 80130d0:	b480      	push	{r7}
 80130d2:	af00      	add	r7, sp, #0

        // Halt ping and multicast slot state machines
        LoRaMacClassBStopRxSlots( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80130d4:	bf00      	nop
 80130d6:	46bd      	mov	sp, r7
 80130d8:	bc80      	pop	{r7}
 80130da:	4770      	bx	lr

080130dc <LoRaMacClassBResumeBeaconing>:

void LoRaMacClassBResumeBeaconing( void )
{
 80130dc:	b480      	push	{r7}
 80130de:	af00      	add	r7, sp, #0
        }

        LoRaMacClassBBeaconTimerEvent( NULL );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80130e0:	bf00      	nop
 80130e2:	46bd      	mov	sp, r7
 80130e4:	bc80      	pop	{r7}
 80130e6:	4770      	bx	lr

080130e8 <LoRaMacClassBSwitchClass>:

LoRaMacStatus_t LoRaMacClassBSwitchClass( DeviceClass_t nextClass )
{
 80130e8:	b480      	push	{r7}
 80130ea:	b083      	sub	sp, #12
 80130ec:	af00      	add	r7, sp, #0
 80130ee:	4603      	mov	r3, r0
 80130f0:	71fb      	strb	r3, [r7, #7]

        return LORAMAC_STATUS_OK;
    }
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 80130f2:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80130f4:	4618      	mov	r0, r3
 80130f6:	370c      	adds	r7, #12
 80130f8:	46bd      	mov	sp, r7
 80130fa:	bc80      	pop	{r7}
 80130fc:	4770      	bx	lr

080130fe <LoRaMacClassBMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacClassBMibGetRequestConfirm( MibRequestConfirm_t *mibGet )
{
 80130fe:	b480      	push	{r7}
 8013100:	b083      	sub	sp, #12
 8013102:	af00      	add	r7, sp, #0
 8013104:	6078      	str	r0, [r7, #4]
            break;
        }
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8013106:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013108:	4618      	mov	r0, r3
 801310a:	370c      	adds	r7, #12
 801310c:	46bd      	mov	sp, r7
 801310e:	bc80      	pop	{r7}
 8013110:	4770      	bx	lr

08013112 <LoRaMacMibClassBSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibClassBSetRequestConfirm( MibRequestConfirm_t *mibSet )
{
 8013112:	b480      	push	{r7}
 8013114:	b083      	sub	sp, #12
 8013116:	af00      	add	r7, sp, #0
 8013118:	6078      	str	r0, [r7, #4]
            break;
        }
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 801311a:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801311c:	4618      	mov	r0, r3
 801311e:	370c      	adds	r7, #12
 8013120:	46bd      	mov	sp, r7
 8013122:	bc80      	pop	{r7}
 8013124:	4770      	bx	lr

08013126 <LoRaMacClassBPingSlotInfoAns>:

void LoRaMacClassBPingSlotInfoAns( void )
{
 8013126:	b480      	push	{r7}
 8013128:	af00      	add	r7, sp, #0
    {
        LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
        ClassBNvm->PingSlotCtx.Ctrl.Assigned = 1;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801312a:	bf00      	nop
 801312c:	46bd      	mov	sp, r7
 801312e:	bc80      	pop	{r7}
 8013130:	4770      	bx	lr

08013132 <LoRaMacClassBPingSlotChannelReq>:

uint8_t LoRaMacClassBPingSlotChannelReq( uint8_t datarate, uint32_t frequency )
{
 8013132:	b480      	push	{r7}
 8013134:	b083      	sub	sp, #12
 8013136:	af00      	add	r7, sp, #0
 8013138:	4603      	mov	r3, r0
 801313a:	6039      	str	r1, [r7, #0]
 801313c:	71fb      	strb	r3, [r7, #7]
        ClassBNvm->PingSlotCtx.Datarate = datarate;
    }

    return status;
#else
    return 0;
 801313e:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013140:	4618      	mov	r0, r3
 8013142:	370c      	adds	r7, #12
 8013144:	46bd      	mov	sp, r7
 8013146:	bc80      	pop	{r7}
 8013148:	4770      	bx	lr

0801314a <LoRaMacClassBBeaconTimingAns>:

void LoRaMacClassBBeaconTimingAns( uint16_t beaconTimingDelay, uint8_t beaconTimingChannel, TimerTime_t lastRxDone )
{
 801314a:	b480      	push	{r7}
 801314c:	b083      	sub	sp, #12
 801314e:	af00      	add	r7, sp, #0
 8013150:	4603      	mov	r3, r0
 8013152:	603a      	str	r2, [r7, #0]
 8013154:	80fb      	strh	r3, [r7, #6]
 8013156:	460b      	mov	r3, r1
 8013158:	717b      	strb	r3, [r7, #5]

        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingDelay = Ctx.BeaconCtx.BeaconTimingDelay;
        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingChannel = Ctx.BeaconCtx.BeaconTimingChannel;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801315a:	bf00      	nop
 801315c:	370c      	adds	r7, #12
 801315e:	46bd      	mov	sp, r7
 8013160:	bc80      	pop	{r7}
 8013162:	4770      	bx	lr

08013164 <LoRaMacClassBDeviceTimeAns>:

void LoRaMacClassBDeviceTimeAns( void )
{
 8013164:	b480      	push	{r7}
 8013166:	af00      	add	r7, sp, #0
            Ctx.BeaconCtx.BeaconTime.SubSeconds = 0;
            LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013168:	bf00      	nop
 801316a:	46bd      	mov	sp, r7
 801316c:	bc80      	pop	{r7}
 801316e:	4770      	bx	lr

08013170 <LoRaMacClassBBeaconFreqReq>:

bool LoRaMacClassBBeaconFreqReq( uint32_t frequency )
{
 8013170:	b480      	push	{r7}
 8013172:	b083      	sub	sp, #12
 8013174:	af00      	add	r7, sp, #0
 8013176:	6078      	str	r0, [r7, #4]
        ClassBNvm->BeaconCtx.Ctrl.CustomFreq = 0;
        return true;
    }
    return false;
#else
    return false;
 8013178:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801317a:	4618      	mov	r0, r3
 801317c:	370c      	adds	r7, #12
 801317e:	46bd      	mov	sp, r7
 8013180:	bc80      	pop	{r7}
 8013182:	4770      	bx	lr

08013184 <LoRaMacClassBIsUplinkCollision>:

TimerTime_t LoRaMacClassBIsUplinkCollision( TimerTime_t txTimeOnAir )
{
 8013184:	b480      	push	{r7}
 8013186:	b083      	sub	sp, #12
 8013188:	af00      	add	r7, sp, #0
 801318a:	6078      	str	r0, [r7, #4]
    {// Next beacon will be sent during the next uplink.
        return CLASSB_BEACON_RESERVED;
    }
    return 0;
#else
    return 0;
 801318c:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801318e:	4618      	mov	r0, r3
 8013190:	370c      	adds	r7, #12
 8013192:	46bd      	mov	sp, r7
 8013194:	bc80      	pop	{r7}
 8013196:	4770      	bx	lr

08013198 <LoRaMacClassBStopRxSlots>:

void LoRaMacClassBStopRxSlots( void )
{
 8013198:	b480      	push	{r7}
 801319a:	af00      	add	r7, sp, #0
    CRITICAL_SECTION_BEGIN( );
    LoRaMacClassBEvents.Events.PingSlot = 0;
    LoRaMacClassBEvents.Events.MulticastSlot = 0;
    CRITICAL_SECTION_END( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801319c:	bf00      	nop
 801319e:	46bd      	mov	sp, r7
 80131a0:	bc80      	pop	{r7}
 80131a2:	4770      	bx	lr

080131a4 <LoRaMacClassBSetFPendingBit>:
#endif /* LORAMAC_CLASSB_ENABLED */
}

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
void LoRaMacClassBSetFPendingBit( uint32_t address, uint8_t fPendingSet )
{
 80131a4:	b480      	push	{r7}
 80131a6:	b083      	sub	sp, #12
 80131a8:	af00      	add	r7, sp, #0
 80131aa:	6078      	str	r0, [r7, #4]
 80131ac:	460b      	mov	r3, r1
 80131ae:	70fb      	strb	r3, [r7, #3]
            }
            cur++;
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80131b0:	bf00      	nop
 80131b2:	370c      	adds	r7, #12
 80131b4:	46bd      	mov	sp, r7
 80131b6:	bc80      	pop	{r7}
 80131b8:	4770      	bx	lr

080131ba <LoRaMacClassBProcess>:
#endif /* LORAMAC_VERSION */

void LoRaMacClassBProcess( void )
{
 80131ba:	b480      	push	{r7}
 80131bc:	af00      	add	r7, sp, #0
        {
            LoRaMacClassBProcessMulticastSlot( );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80131be:	bf00      	nop
 80131c0:	46bd      	mov	sp, r7
 80131c2:	bc80      	pop	{r7}
 80131c4:	4770      	bx	lr

080131c6 <IsSlotFree>:
 *
 * \param [in]    slot           - Slot to check
 * \retval                       - Status of the operation
 */
static bool IsSlotFree( const MacCommand_t* slot )
{
 80131c6:	b480      	push	{r7}
 80131c8:	b085      	sub	sp, #20
 80131ca:	af00      	add	r7, sp, #0
 80131cc:	6078      	str	r0, [r7, #4]
    uint8_t* mem = ( uint8_t* )slot;
 80131ce:	687b      	ldr	r3, [r7, #4]
 80131d0:	60bb      	str	r3, [r7, #8]

    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 80131d2:	2300      	movs	r3, #0
 80131d4:	81fb      	strh	r3, [r7, #14]
 80131d6:	e00a      	b.n	80131ee <IsSlotFree+0x28>
    {
        if( mem[size] != 0x00 )
 80131d8:	89fb      	ldrh	r3, [r7, #14]
 80131da:	68ba      	ldr	r2, [r7, #8]
 80131dc:	4413      	add	r3, r2
 80131de:	781b      	ldrb	r3, [r3, #0]
 80131e0:	2b00      	cmp	r3, #0
 80131e2:	d001      	beq.n	80131e8 <IsSlotFree+0x22>
        {
            return false;
 80131e4:	2300      	movs	r3, #0
 80131e6:	e006      	b.n	80131f6 <IsSlotFree+0x30>
    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 80131e8:	89fb      	ldrh	r3, [r7, #14]
 80131ea:	3301      	adds	r3, #1
 80131ec:	81fb      	strh	r3, [r7, #14]
 80131ee:	89fb      	ldrh	r3, [r7, #14]
 80131f0:	2b0f      	cmp	r3, #15
 80131f2:	d9f1      	bls.n	80131d8 <IsSlotFree+0x12>
        }
    }
    return true;
 80131f4:	2301      	movs	r3, #1
}
 80131f6:	4618      	mov	r0, r3
 80131f8:	3714      	adds	r7, #20
 80131fa:	46bd      	mov	sp, r7
 80131fc:	bc80      	pop	{r7}
 80131fe:	4770      	bx	lr

08013200 <MallocNewMacCommandSlot>:
 * \brief Allocates a new MAC command memory slot
 *
 * \retval                       - Pointer to slot
 */
static MacCommand_t* MallocNewMacCommandSlot( void )
{
 8013200:	b580      	push	{r7, lr}
 8013202:	b082      	sub	sp, #8
 8013204:	af00      	add	r7, sp, #0
    uint8_t itr = 0;
 8013206:	2300      	movs	r3, #0
 8013208:	71fb      	strb	r3, [r7, #7]

    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 801320a:	e007      	b.n	801321c <MallocNewMacCommandSlot+0x1c>
    {
        itr++;
 801320c:	79fb      	ldrb	r3, [r7, #7]
 801320e:	3301      	adds	r3, #1
 8013210:	71fb      	strb	r3, [r7, #7]
        if( itr == NUM_OF_MAC_COMMANDS )
 8013212:	79fb      	ldrb	r3, [r7, #7]
 8013214:	2b20      	cmp	r3, #32
 8013216:	d101      	bne.n	801321c <MallocNewMacCommandSlot+0x1c>
        {
            return NULL;
 8013218:	2300      	movs	r3, #0
 801321a:	e012      	b.n	8013242 <MallocNewMacCommandSlot+0x42>
    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 801321c:	79fb      	ldrb	r3, [r7, #7]
 801321e:	011b      	lsls	r3, r3, #4
 8013220:	3308      	adds	r3, #8
 8013222:	4a0a      	ldr	r2, [pc, #40]	@ (801324c <MallocNewMacCommandSlot+0x4c>)
 8013224:	4413      	add	r3, r2
 8013226:	4618      	mov	r0, r3
 8013228:	f7ff ffcd 	bl	80131c6 <IsSlotFree>
 801322c:	4603      	mov	r3, r0
 801322e:	f083 0301 	eor.w	r3, r3, #1
 8013232:	b2db      	uxtb	r3, r3
 8013234:	2b00      	cmp	r3, #0
 8013236:	d1e9      	bne.n	801320c <MallocNewMacCommandSlot+0xc>
        }
    }

    return &CommandsCtx.MacCommandSlots[itr];
 8013238:	79fb      	ldrb	r3, [r7, #7]
 801323a:	011b      	lsls	r3, r3, #4
 801323c:	3308      	adds	r3, #8
 801323e:	4a03      	ldr	r2, [pc, #12]	@ (801324c <MallocNewMacCommandSlot+0x4c>)
 8013240:	4413      	add	r3, r2
}
 8013242:	4618      	mov	r0, r3
 8013244:	3708      	adds	r7, #8
 8013246:	46bd      	mov	sp, r7
 8013248:	bd80      	pop	{r7, pc}
 801324a:	bf00      	nop
 801324c:	20001990 	.word	0x20001990

08013250 <FreeMacCommandSlot>:
 * \param [in]    slot           - Slot to free
 *
 * \retval                       - Status of the operation
 */
static bool FreeMacCommandSlot( MacCommand_t* slot )
{
 8013250:	b580      	push	{r7, lr}
 8013252:	b082      	sub	sp, #8
 8013254:	af00      	add	r7, sp, #0
 8013256:	6078      	str	r0, [r7, #4]
    if( slot == NULL )
 8013258:	687b      	ldr	r3, [r7, #4]
 801325a:	2b00      	cmp	r3, #0
 801325c:	d101      	bne.n	8013262 <FreeMacCommandSlot+0x12>
    {
        return false;
 801325e:	2300      	movs	r3, #0
 8013260:	e005      	b.n	801326e <FreeMacCommandSlot+0x1e>
    }

    memset1( ( uint8_t* )slot, 0x00, sizeof( MacCommand_t ) );
 8013262:	2210      	movs	r2, #16
 8013264:	2100      	movs	r1, #0
 8013266:	6878      	ldr	r0, [r7, #4]
 8013268:	f004 f924 	bl	80174b4 <memset1>

    return true;
 801326c:	2301      	movs	r3, #1
}
 801326e:	4618      	mov	r0, r3
 8013270:	3708      	adds	r7, #8
 8013272:	46bd      	mov	sp, r7
 8013274:	bd80      	pop	{r7, pc}

08013276 <LinkedListInit>:
 *
 * \param [in]    list           - List that shall be initialized
 * \retval                       - Status of the operation
 */
static bool LinkedListInit( MacCommandsList_t* list )
{
 8013276:	b480      	push	{r7}
 8013278:	b083      	sub	sp, #12
 801327a:	af00      	add	r7, sp, #0
 801327c:	6078      	str	r0, [r7, #4]
    if( list == NULL )
 801327e:	687b      	ldr	r3, [r7, #4]
 8013280:	2b00      	cmp	r3, #0
 8013282:	d101      	bne.n	8013288 <LinkedListInit+0x12>
    {
        return false;
 8013284:	2300      	movs	r3, #0
 8013286:	e006      	b.n	8013296 <LinkedListInit+0x20>
    }

    list->First = NULL;
 8013288:	687b      	ldr	r3, [r7, #4]
 801328a:	2200      	movs	r2, #0
 801328c:	601a      	str	r2, [r3, #0]
    list->Last = NULL;
 801328e:	687b      	ldr	r3, [r7, #4]
 8013290:	2200      	movs	r2, #0
 8013292:	605a      	str	r2, [r3, #4]

    return true;
 8013294:	2301      	movs	r3, #1
}
 8013296:	4618      	mov	r0, r3
 8013298:	370c      	adds	r7, #12
 801329a:	46bd      	mov	sp, r7
 801329c:	bc80      	pop	{r7}
 801329e:	4770      	bx	lr

080132a0 <LinkedListAdd>:
 * \param [in]    list           - List where the element shall be added.
 * \param [in]    element        - Element to add
 * \retval                       - Status of the operation
 */
static bool LinkedListAdd( MacCommandsList_t* list, MacCommand_t* element )
{
 80132a0:	b480      	push	{r7}
 80132a2:	b083      	sub	sp, #12
 80132a4:	af00      	add	r7, sp, #0
 80132a6:	6078      	str	r0, [r7, #4]
 80132a8:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 80132aa:	687b      	ldr	r3, [r7, #4]
 80132ac:	2b00      	cmp	r3, #0
 80132ae:	d002      	beq.n	80132b6 <LinkedListAdd+0x16>
 80132b0:	683b      	ldr	r3, [r7, #0]
 80132b2:	2b00      	cmp	r3, #0
 80132b4:	d101      	bne.n	80132ba <LinkedListAdd+0x1a>
    {
        return false;
 80132b6:	2300      	movs	r3, #0
 80132b8:	e015      	b.n	80132e6 <LinkedListAdd+0x46>
    }

    // Check if this is the first entry to enter the list.
    if( list->First == NULL )
 80132ba:	687b      	ldr	r3, [r7, #4]
 80132bc:	681b      	ldr	r3, [r3, #0]
 80132be:	2b00      	cmp	r3, #0
 80132c0:	d102      	bne.n	80132c8 <LinkedListAdd+0x28>
    {
        list->First = element;
 80132c2:	687b      	ldr	r3, [r7, #4]
 80132c4:	683a      	ldr	r2, [r7, #0]
 80132c6:	601a      	str	r2, [r3, #0]
    }

    // Check if the last entry exists and update its next point.
    if( list->Last )
 80132c8:	687b      	ldr	r3, [r7, #4]
 80132ca:	685b      	ldr	r3, [r3, #4]
 80132cc:	2b00      	cmp	r3, #0
 80132ce:	d003      	beq.n	80132d8 <LinkedListAdd+0x38>
    {
        list->Last->Next = element;
 80132d0:	687b      	ldr	r3, [r7, #4]
 80132d2:	685b      	ldr	r3, [r3, #4]
 80132d4:	683a      	ldr	r2, [r7, #0]
 80132d6:	601a      	str	r2, [r3, #0]
    }

    // Update the next point of this entry.
    element->Next = NULL;
 80132d8:	683b      	ldr	r3, [r7, #0]
 80132da:	2200      	movs	r2, #0
 80132dc:	601a      	str	r2, [r3, #0]

    // Update the last entry of the list.
    list->Last = element;
 80132de:	687b      	ldr	r3, [r7, #4]
 80132e0:	683a      	ldr	r2, [r7, #0]
 80132e2:	605a      	str	r2, [r3, #4]

    return true;
 80132e4:	2301      	movs	r3, #1
}
 80132e6:	4618      	mov	r0, r3
 80132e8:	370c      	adds	r7, #12
 80132ea:	46bd      	mov	sp, r7
 80132ec:	bc80      	pop	{r7}
 80132ee:	4770      	bx	lr

080132f0 <LinkedListGetPrevious>:
 * \param [in]    list           - List
 * \param [in]    element        - Element where the previous element shall be searched
 * \retval                       - Status of the operation
 */
static MacCommand_t* LinkedListGetPrevious( MacCommandsList_t* list, MacCommand_t* element )
{
 80132f0:	b480      	push	{r7}
 80132f2:	b085      	sub	sp, #20
 80132f4:	af00      	add	r7, sp, #0
 80132f6:	6078      	str	r0, [r7, #4]
 80132f8:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 80132fa:	687b      	ldr	r3, [r7, #4]
 80132fc:	2b00      	cmp	r3, #0
 80132fe:	d002      	beq.n	8013306 <LinkedListGetPrevious+0x16>
 8013300:	683b      	ldr	r3, [r7, #0]
 8013302:	2b00      	cmp	r3, #0
 8013304:	d101      	bne.n	801330a <LinkedListGetPrevious+0x1a>
    {
        return NULL;
 8013306:	2300      	movs	r3, #0
 8013308:	e016      	b.n	8013338 <LinkedListGetPrevious+0x48>
    }

    MacCommand_t* curElement;

    // Start at the head of the list
    curElement = list->First;
 801330a:	687b      	ldr	r3, [r7, #4]
 801330c:	681b      	ldr	r3, [r3, #0]
 801330e:	60fb      	str	r3, [r7, #12]

    // When current element is the first of the list, there's no previous element so we can return NULL immediately.
    if( element != curElement )
 8013310:	683a      	ldr	r2, [r7, #0]
 8013312:	68fb      	ldr	r3, [r7, #12]
 8013314:	429a      	cmp	r2, r3
 8013316:	d00c      	beq.n	8013332 <LinkedListGetPrevious+0x42>
    {
        // Loop through all elements until the end is reached or the next of current is the current element.
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 8013318:	e002      	b.n	8013320 <LinkedListGetPrevious+0x30>
        {
            curElement = curElement->Next;
 801331a:	68fb      	ldr	r3, [r7, #12]
 801331c:	681b      	ldr	r3, [r3, #0]
 801331e:	60fb      	str	r3, [r7, #12]
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 8013320:	68fb      	ldr	r3, [r7, #12]
 8013322:	2b00      	cmp	r3, #0
 8013324:	d007      	beq.n	8013336 <LinkedListGetPrevious+0x46>
 8013326:	68fb      	ldr	r3, [r7, #12]
 8013328:	681b      	ldr	r3, [r3, #0]
 801332a:	683a      	ldr	r2, [r7, #0]
 801332c:	429a      	cmp	r2, r3
 801332e:	d1f4      	bne.n	801331a <LinkedListGetPrevious+0x2a>
 8013330:	e001      	b.n	8013336 <LinkedListGetPrevious+0x46>
        }
    }
    else
    {
        curElement = NULL;
 8013332:	2300      	movs	r3, #0
 8013334:	60fb      	str	r3, [r7, #12]
    }

    return curElement;
 8013336:	68fb      	ldr	r3, [r7, #12]
}
 8013338:	4618      	mov	r0, r3
 801333a:	3714      	adds	r7, #20
 801333c:	46bd      	mov	sp, r7
 801333e:	bc80      	pop	{r7}
 8013340:	4770      	bx	lr

08013342 <LinkedListRemove>:
 * \param [in]    list           - List where the element shall be removed from.
 * \param [in]    element        - Element to remove
 * \retval                       - Status of the operation
 */
static bool LinkedListRemove( MacCommandsList_t* list, MacCommand_t* element )
{
 8013342:	b580      	push	{r7, lr}
 8013344:	b084      	sub	sp, #16
 8013346:	af00      	add	r7, sp, #0
 8013348:	6078      	str	r0, [r7, #4]
 801334a:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 801334c:	687b      	ldr	r3, [r7, #4]
 801334e:	2b00      	cmp	r3, #0
 8013350:	d002      	beq.n	8013358 <LinkedListRemove+0x16>
 8013352:	683b      	ldr	r3, [r7, #0]
 8013354:	2b00      	cmp	r3, #0
 8013356:	d101      	bne.n	801335c <LinkedListRemove+0x1a>
    {
        return false;
 8013358:	2300      	movs	r3, #0
 801335a:	e020      	b.n	801339e <LinkedListRemove+0x5c>
    }

    MacCommand_t* PrevElement = LinkedListGetPrevious( list, element );
 801335c:	6839      	ldr	r1, [r7, #0]
 801335e:	6878      	ldr	r0, [r7, #4]
 8013360:	f7ff ffc6 	bl	80132f0 <LinkedListGetPrevious>
 8013364:	60f8      	str	r0, [r7, #12]

    if( list->First == element )
 8013366:	687b      	ldr	r3, [r7, #4]
 8013368:	681b      	ldr	r3, [r3, #0]
 801336a:	683a      	ldr	r2, [r7, #0]
 801336c:	429a      	cmp	r2, r3
 801336e:	d103      	bne.n	8013378 <LinkedListRemove+0x36>
    {
        list->First = element->Next;
 8013370:	683b      	ldr	r3, [r7, #0]
 8013372:	681a      	ldr	r2, [r3, #0]
 8013374:	687b      	ldr	r3, [r7, #4]
 8013376:	601a      	str	r2, [r3, #0]
    }

    if( list->Last == element )
 8013378:	687b      	ldr	r3, [r7, #4]
 801337a:	685b      	ldr	r3, [r3, #4]
 801337c:	683a      	ldr	r2, [r7, #0]
 801337e:	429a      	cmp	r2, r3
 8013380:	d102      	bne.n	8013388 <LinkedListRemove+0x46>
    {
        list->Last = PrevElement;
 8013382:	687b      	ldr	r3, [r7, #4]
 8013384:	68fa      	ldr	r2, [r7, #12]
 8013386:	605a      	str	r2, [r3, #4]
    }

    if( PrevElement != NULL )
 8013388:	68fb      	ldr	r3, [r7, #12]
 801338a:	2b00      	cmp	r3, #0
 801338c:	d003      	beq.n	8013396 <LinkedListRemove+0x54>
    {
        PrevElement->Next = element->Next;
 801338e:	683b      	ldr	r3, [r7, #0]
 8013390:	681a      	ldr	r2, [r3, #0]
 8013392:	68fb      	ldr	r3, [r7, #12]
 8013394:	601a      	str	r2, [r3, #0]
    }

    element->Next = NULL;
 8013396:	683b      	ldr	r3, [r7, #0]
 8013398:	2200      	movs	r2, #0
 801339a:	601a      	str	r2, [r3, #0]

    return true;
 801339c:	2301      	movs	r3, #1
}
 801339e:	4618      	mov	r0, r3
 80133a0:	3710      	adds	r7, #16
 80133a2:	46bd      	mov	sp, r7
 80133a4:	bd80      	pop	{r7, pc}
	...

080133a8 <IsSticky>:
 * \param [in]  cid                - MAC command identifier
 *
 * \retval                     - Status of the operation
 */
static bool IsSticky( uint8_t cid )
{
 80133a8:	b480      	push	{r7}
 80133aa:	b083      	sub	sp, #12
 80133ac:	af00      	add	r7, sp, #0
 80133ae:	4603      	mov	r3, r0
 80133b0:	71fb      	strb	r3, [r7, #7]
    switch( cid )
 80133b2:	79fb      	ldrb	r3, [r7, #7]
 80133b4:	2b11      	cmp	r3, #17
 80133b6:	bf8c      	ite	hi
 80133b8:	2201      	movhi	r2, #1
 80133ba:	2200      	movls	r2, #0
 80133bc:	b2d2      	uxtb	r2, r2
 80133be:	2a00      	cmp	r2, #0
 80133c0:	d10d      	bne.n	80133de <IsSticky+0x36>
 80133c2:	4a0a      	ldr	r2, [pc, #40]	@ (80133ec <IsSticky+0x44>)
 80133c4:	fa22 f303 	lsr.w	r3, r2, r3
 80133c8:	f003 0301 	and.w	r3, r3, #1
 80133cc:	2b00      	cmp	r3, #0
 80133ce:	bf14      	ite	ne
 80133d0:	2301      	movne	r3, #1
 80133d2:	2300      	moveq	r3, #0
 80133d4:	b2db      	uxtb	r3, r3
 80133d6:	2b00      	cmp	r3, #0
 80133d8:	d001      	beq.n	80133de <IsSticky+0x36>
        case MOTE_MAC_RX_TIMING_SETUP_ANS:
        case MOTE_MAC_TX_PARAM_SETUP_ANS:
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
        case MOTE_MAC_PING_SLOT_CHANNEL_ANS:
#endif /* LORAMAC_VERSION */
            return true;
 80133da:	2301      	movs	r3, #1
 80133dc:	e000      	b.n	80133e0 <IsSticky+0x38>
        default:
            return false;
 80133de:	2300      	movs	r3, #0
    }
}
 80133e0:	4618      	mov	r0, r3
 80133e2:	370c      	adds	r7, #12
 80133e4:	46bd      	mov	sp, r7
 80133e6:	bc80      	pop	{r7}
 80133e8:	4770      	bx	lr
 80133ea:	bf00      	nop
 80133ec:	00020720 	.word	0x00020720

080133f0 <LoRaMacCommandsInit>:

LoRaMacCommandStatus_t LoRaMacCommandsInit( void )
{
 80133f0:	b580      	push	{r7, lr}
 80133f2:	af00      	add	r7, sp, #0
    // Initialize with default
    memset1( ( uint8_t* )&CommandsCtx, 0, sizeof( CommandsCtx ) );
 80133f4:	f44f 7203 	mov.w	r2, #524	@ 0x20c
 80133f8:	2100      	movs	r1, #0
 80133fa:	4804      	ldr	r0, [pc, #16]	@ (801340c <LoRaMacCommandsInit+0x1c>)
 80133fc:	f004 f85a 	bl	80174b4 <memset1>

    LinkedListInit( &CommandsCtx.MacCommandList );
 8013400:	4802      	ldr	r0, [pc, #8]	@ (801340c <LoRaMacCommandsInit+0x1c>)
 8013402:	f7ff ff38 	bl	8013276 <LinkedListInit>

    return LORAMAC_COMMANDS_SUCCESS;
 8013406:	2300      	movs	r3, #0
}
 8013408:	4618      	mov	r0, r3
 801340a:	bd80      	pop	{r7, pc}
 801340c:	20001990 	.word	0x20001990

08013410 <LoRaMacCommandsAddCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsAddCmd( uint8_t cid, uint8_t* payload, size_t payloadSize )
{
 8013410:	b580      	push	{r7, lr}
 8013412:	b086      	sub	sp, #24
 8013414:	af00      	add	r7, sp, #0
 8013416:	4603      	mov	r3, r0
 8013418:	60b9      	str	r1, [r7, #8]
 801341a:	607a      	str	r2, [r7, #4]
 801341c:	73fb      	strb	r3, [r7, #15]
    if( payload == NULL )
 801341e:	68bb      	ldr	r3, [r7, #8]
 8013420:	2b00      	cmp	r3, #0
 8013422:	d101      	bne.n	8013428 <LoRaMacCommandsAddCmd+0x18>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8013424:	2301      	movs	r3, #1
 8013426:	e033      	b.n	8013490 <LoRaMacCommandsAddCmd+0x80>
    }
    MacCommand_t* newCmd;

    // Allocate a memory slot
    newCmd = MallocNewMacCommandSlot( );
 8013428:	f7ff feea 	bl	8013200 <MallocNewMacCommandSlot>
 801342c:	6178      	str	r0, [r7, #20]

    if( newCmd == NULL )
 801342e:	697b      	ldr	r3, [r7, #20]
 8013430:	2b00      	cmp	r3, #0
 8013432:	d101      	bne.n	8013438 <LoRaMacCommandsAddCmd+0x28>
    {
        return LORAMAC_COMMANDS_ERROR_MEMORY;
 8013434:	2302      	movs	r3, #2
 8013436:	e02b      	b.n	8013490 <LoRaMacCommandsAddCmd+0x80>
    }

    // Add it to the list of Mac commands
    if( LinkedListAdd( &CommandsCtx.MacCommandList, newCmd ) == false )
 8013438:	6979      	ldr	r1, [r7, #20]
 801343a:	4817      	ldr	r0, [pc, #92]	@ (8013498 <LoRaMacCommandsAddCmd+0x88>)
 801343c:	f7ff ff30 	bl	80132a0 <LinkedListAdd>
 8013440:	4603      	mov	r3, r0
 8013442:	f083 0301 	eor.w	r3, r3, #1
 8013446:	b2db      	uxtb	r3, r3
 8013448:	2b00      	cmp	r3, #0
 801344a:	d001      	beq.n	8013450 <LoRaMacCommandsAddCmd+0x40>
    {
        return LORAMAC_COMMANDS_ERROR;
 801344c:	2305      	movs	r3, #5
 801344e:	e01f      	b.n	8013490 <LoRaMacCommandsAddCmd+0x80>
    }

    // Set Values
    newCmd->CID = cid;
 8013450:	697b      	ldr	r3, [r7, #20]
 8013452:	7bfa      	ldrb	r2, [r7, #15]
 8013454:	711a      	strb	r2, [r3, #4]
    newCmd->PayloadSize = payloadSize;
 8013456:	697b      	ldr	r3, [r7, #20]
 8013458:	687a      	ldr	r2, [r7, #4]
 801345a:	609a      	str	r2, [r3, #8]
    memcpy1( ( uint8_t* )newCmd->Payload, payload, payloadSize );
 801345c:	697b      	ldr	r3, [r7, #20]
 801345e:	3305      	adds	r3, #5
 8013460:	687a      	ldr	r2, [r7, #4]
 8013462:	b292      	uxth	r2, r2
 8013464:	68b9      	ldr	r1, [r7, #8]
 8013466:	4618      	mov	r0, r3
 8013468:	f003 ffe9 	bl	801743e <memcpy1>
    newCmd->IsSticky = IsSticky( cid );
 801346c:	7bfb      	ldrb	r3, [r7, #15]
 801346e:	4618      	mov	r0, r3
 8013470:	f7ff ff9a 	bl	80133a8 <IsSticky>
 8013474:	4603      	mov	r3, r0
 8013476:	461a      	mov	r2, r3
 8013478:	697b      	ldr	r3, [r7, #20]
 801347a:	731a      	strb	r2, [r3, #12]

    CommandsCtx.SerializedCmdsSize += ( CID_FIELD_SIZE + payloadSize );
 801347c:	4b06      	ldr	r3, [pc, #24]	@ (8013498 <LoRaMacCommandsAddCmd+0x88>)
 801347e:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8013482:	687b      	ldr	r3, [r7, #4]
 8013484:	4413      	add	r3, r2
 8013486:	3301      	adds	r3, #1
 8013488:	4a03      	ldr	r2, [pc, #12]	@ (8013498 <LoRaMacCommandsAddCmd+0x88>)
 801348a:	f8c2 3208 	str.w	r3, [r2, #520]	@ 0x208

    return LORAMAC_COMMANDS_SUCCESS;
 801348e:	2300      	movs	r3, #0
}
 8013490:	4618      	mov	r0, r3
 8013492:	3718      	adds	r7, #24
 8013494:	46bd      	mov	sp, r7
 8013496:	bd80      	pop	{r7, pc}
 8013498:	20001990 	.word	0x20001990

0801349c <LoRaMacCommandsRemoveCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveCmd( MacCommand_t* macCmd )
{
 801349c:	b580      	push	{r7, lr}
 801349e:	b082      	sub	sp, #8
 80134a0:	af00      	add	r7, sp, #0
 80134a2:	6078      	str	r0, [r7, #4]
    if( macCmd == NULL )
 80134a4:	687b      	ldr	r3, [r7, #4]
 80134a6:	2b00      	cmp	r3, #0
 80134a8:	d101      	bne.n	80134ae <LoRaMacCommandsRemoveCmd+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 80134aa:	2301      	movs	r3, #1
 80134ac:	e021      	b.n	80134f2 <LoRaMacCommandsRemoveCmd+0x56>
    }

    // Remove the Mac command element from MacCommandList
    if( LinkedListRemove( &CommandsCtx.MacCommandList, macCmd ) == false )
 80134ae:	6879      	ldr	r1, [r7, #4]
 80134b0:	4812      	ldr	r0, [pc, #72]	@ (80134fc <LoRaMacCommandsRemoveCmd+0x60>)
 80134b2:	f7ff ff46 	bl	8013342 <LinkedListRemove>
 80134b6:	4603      	mov	r3, r0
 80134b8:	f083 0301 	eor.w	r3, r3, #1
 80134bc:	b2db      	uxtb	r3, r3
 80134be:	2b00      	cmp	r3, #0
 80134c0:	d001      	beq.n	80134c6 <LoRaMacCommandsRemoveCmd+0x2a>
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
 80134c2:	2303      	movs	r3, #3
 80134c4:	e015      	b.n	80134f2 <LoRaMacCommandsRemoveCmd+0x56>
    }

    CommandsCtx.SerializedCmdsSize -= ( CID_FIELD_SIZE + macCmd->PayloadSize );
 80134c6:	4b0d      	ldr	r3, [pc, #52]	@ (80134fc <LoRaMacCommandsRemoveCmd+0x60>)
 80134c8:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 80134cc:	687b      	ldr	r3, [r7, #4]
 80134ce:	689b      	ldr	r3, [r3, #8]
 80134d0:	1ad3      	subs	r3, r2, r3
 80134d2:	3b01      	subs	r3, #1
 80134d4:	4a09      	ldr	r2, [pc, #36]	@ (80134fc <LoRaMacCommandsRemoveCmd+0x60>)
 80134d6:	f8c2 3208 	str.w	r3, [r2, #520]	@ 0x208

    // Free the MacCommand Slot
    if( FreeMacCommandSlot( macCmd ) == false )
 80134da:	6878      	ldr	r0, [r7, #4]
 80134dc:	f7ff feb8 	bl	8013250 <FreeMacCommandSlot>
 80134e0:	4603      	mov	r3, r0
 80134e2:	f083 0301 	eor.w	r3, r3, #1
 80134e6:	b2db      	uxtb	r3, r3
 80134e8:	2b00      	cmp	r3, #0
 80134ea:	d001      	beq.n	80134f0 <LoRaMacCommandsRemoveCmd+0x54>
    {
        return LORAMAC_COMMANDS_ERROR;
 80134ec:	2305      	movs	r3, #5
 80134ee:	e000      	b.n	80134f2 <LoRaMacCommandsRemoveCmd+0x56>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 80134f0:	2300      	movs	r3, #0
}
 80134f2:	4618      	mov	r0, r3
 80134f4:	3708      	adds	r7, #8
 80134f6:	46bd      	mov	sp, r7
 80134f8:	bd80      	pop	{r7, pc}
 80134fa:	bf00      	nop
 80134fc:	20001990 	.word	0x20001990

08013500 <LoRaMacCommandsRemoveNoneStickyCmds>:
    }
    return LORAMAC_COMMANDS_SUCCESS;
}

LoRaMacCommandStatus_t LoRaMacCommandsRemoveNoneStickyCmds( void )
{
 8013500:	b580      	push	{r7, lr}
 8013502:	b082      	sub	sp, #8
 8013504:	af00      	add	r7, sp, #0
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 8013506:	4b0f      	ldr	r3, [pc, #60]	@ (8013544 <LoRaMacCommandsRemoveNoneStickyCmds+0x44>)
 8013508:	681b      	ldr	r3, [r3, #0]
 801350a:	607b      	str	r3, [r7, #4]

    // Loop through all elements
    while( curElement != NULL )
 801350c:	e012      	b.n	8013534 <LoRaMacCommandsRemoveNoneStickyCmds+0x34>
    {
        if( curElement->IsSticky == false )
 801350e:	687b      	ldr	r3, [r7, #4]
 8013510:	7b1b      	ldrb	r3, [r3, #12]
 8013512:	f083 0301 	eor.w	r3, r3, #1
 8013516:	b2db      	uxtb	r3, r3
 8013518:	2b00      	cmp	r3, #0
 801351a:	d008      	beq.n	801352e <LoRaMacCommandsRemoveNoneStickyCmds+0x2e>
        {
            nexElement = curElement->Next;
 801351c:	687b      	ldr	r3, [r7, #4]
 801351e:	681b      	ldr	r3, [r3, #0]
 8013520:	603b      	str	r3, [r7, #0]
            LoRaMacCommandsRemoveCmd( curElement );
 8013522:	6878      	ldr	r0, [r7, #4]
 8013524:	f7ff ffba 	bl	801349c <LoRaMacCommandsRemoveCmd>
            curElement = nexElement;
 8013528:	683b      	ldr	r3, [r7, #0]
 801352a:	607b      	str	r3, [r7, #4]
 801352c:	e002      	b.n	8013534 <LoRaMacCommandsRemoveNoneStickyCmds+0x34>
        }
        else
        {
            curElement = curElement->Next;
 801352e:	687b      	ldr	r3, [r7, #4]
 8013530:	681b      	ldr	r3, [r3, #0]
 8013532:	607b      	str	r3, [r7, #4]
    while( curElement != NULL )
 8013534:	687b      	ldr	r3, [r7, #4]
 8013536:	2b00      	cmp	r3, #0
 8013538:	d1e9      	bne.n	801350e <LoRaMacCommandsRemoveNoneStickyCmds+0xe>
        }
    }

    return LORAMAC_COMMANDS_SUCCESS;
 801353a:	2300      	movs	r3, #0
}
 801353c:	4618      	mov	r0, r3
 801353e:	3708      	adds	r7, #8
 8013540:	46bd      	mov	sp, r7
 8013542:	bd80      	pop	{r7, pc}
 8013544:	20001990 	.word	0x20001990

08013548 <LoRaMacCommandsRemoveStickyAnsCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveStickyAnsCmds( void )
{
 8013548:	b580      	push	{r7, lr}
 801354a:	b082      	sub	sp, #8
 801354c:	af00      	add	r7, sp, #0
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 801354e:	4b0e      	ldr	r3, [pc, #56]	@ (8013588 <LoRaMacCommandsRemoveStickyAnsCmds+0x40>)
 8013550:	681b      	ldr	r3, [r3, #0]
 8013552:	607b      	str	r3, [r7, #4]

    // Loop through all elements
    while( curElement != NULL )
 8013554:	e00f      	b.n	8013576 <LoRaMacCommandsRemoveStickyAnsCmds+0x2e>
    {
        nexElement = curElement->Next;
 8013556:	687b      	ldr	r3, [r7, #4]
 8013558:	681b      	ldr	r3, [r3, #0]
 801355a:	603b      	str	r3, [r7, #0]
        if( IsSticky( curElement->CID ) == true )
 801355c:	687b      	ldr	r3, [r7, #4]
 801355e:	791b      	ldrb	r3, [r3, #4]
 8013560:	4618      	mov	r0, r3
 8013562:	f7ff ff21 	bl	80133a8 <IsSticky>
 8013566:	4603      	mov	r3, r0
 8013568:	2b00      	cmp	r3, #0
 801356a:	d002      	beq.n	8013572 <LoRaMacCommandsRemoveStickyAnsCmds+0x2a>
        {
            LoRaMacCommandsRemoveCmd( curElement );
 801356c:	6878      	ldr	r0, [r7, #4]
 801356e:	f7ff ff95 	bl	801349c <LoRaMacCommandsRemoveCmd>
        }
        curElement = nexElement;
 8013572:	683b      	ldr	r3, [r7, #0]
 8013574:	607b      	str	r3, [r7, #4]
    while( curElement != NULL )
 8013576:	687b      	ldr	r3, [r7, #4]
 8013578:	2b00      	cmp	r3, #0
 801357a:	d1ec      	bne.n	8013556 <LoRaMacCommandsRemoveStickyAnsCmds+0xe>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 801357c:	2300      	movs	r3, #0
}
 801357e:	4618      	mov	r0, r3
 8013580:	3708      	adds	r7, #8
 8013582:	46bd      	mov	sp, r7
 8013584:	bd80      	pop	{r7, pc}
 8013586:	bf00      	nop
 8013588:	20001990 	.word	0x20001990

0801358c <LoRaMacCommandsGetSizeSerializedCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsGetSizeSerializedCmds( size_t* size )
{
 801358c:	b480      	push	{r7}
 801358e:	b083      	sub	sp, #12
 8013590:	af00      	add	r7, sp, #0
 8013592:	6078      	str	r0, [r7, #4]
    if( size == NULL )
 8013594:	687b      	ldr	r3, [r7, #4]
 8013596:	2b00      	cmp	r3, #0
 8013598:	d101      	bne.n	801359e <LoRaMacCommandsGetSizeSerializedCmds+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 801359a:	2301      	movs	r3, #1
 801359c:	e005      	b.n	80135aa <LoRaMacCommandsGetSizeSerializedCmds+0x1e>
    }
    *size = CommandsCtx.SerializedCmdsSize;
 801359e:	4b05      	ldr	r3, [pc, #20]	@ (80135b4 <LoRaMacCommandsGetSizeSerializedCmds+0x28>)
 80135a0:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 80135a4:	687b      	ldr	r3, [r7, #4]
 80135a6:	601a      	str	r2, [r3, #0]
    return LORAMAC_COMMANDS_SUCCESS;
 80135a8:	2300      	movs	r3, #0
}
 80135aa:	4618      	mov	r0, r3
 80135ac:	370c      	adds	r7, #12
 80135ae:	46bd      	mov	sp, r7
 80135b0:	bc80      	pop	{r7}
 80135b2:	4770      	bx	lr
 80135b4:	20001990 	.word	0x20001990

080135b8 <LoRaMacCommandsSerializeCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsSerializeCmds( size_t availableSize, size_t* effectiveSize, uint8_t* buffer )
{
 80135b8:	b580      	push	{r7, lr}
 80135ba:	b088      	sub	sp, #32
 80135bc:	af00      	add	r7, sp, #0
 80135be:	60f8      	str	r0, [r7, #12]
 80135c0:	60b9      	str	r1, [r7, #8]
 80135c2:	607a      	str	r2, [r7, #4]
    MacCommand_t* curElement = CommandsCtx.MacCommandList.First;
 80135c4:	4b25      	ldr	r3, [pc, #148]	@ (801365c <LoRaMacCommandsSerializeCmds+0xa4>)
 80135c6:	681b      	ldr	r3, [r3, #0]
 80135c8:	61fb      	str	r3, [r7, #28]
    MacCommand_t* nextElement;
    uint8_t itr = 0;
 80135ca:	2300      	movs	r3, #0
 80135cc:	76fb      	strb	r3, [r7, #27]

    if( ( buffer == NULL ) || ( effectiveSize == NULL ) )
 80135ce:	687b      	ldr	r3, [r7, #4]
 80135d0:	2b00      	cmp	r3, #0
 80135d2:	d002      	beq.n	80135da <LoRaMacCommandsSerializeCmds+0x22>
 80135d4:	68bb      	ldr	r3, [r7, #8]
 80135d6:	2b00      	cmp	r3, #0
 80135d8:	d126      	bne.n	8013628 <LoRaMacCommandsSerializeCmds+0x70>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 80135da:	2301      	movs	r3, #1
 80135dc:	e039      	b.n	8013652 <LoRaMacCommandsSerializeCmds+0x9a>

    // Loop through all elements which fits into the buffer
    while( curElement != NULL )
    {
        // If the next MAC command still fits into the buffer, add it.
        if( ( availableSize - itr ) >= ( CID_FIELD_SIZE + curElement->PayloadSize ) )
 80135de:	7efb      	ldrb	r3, [r7, #27]
 80135e0:	68fa      	ldr	r2, [r7, #12]
 80135e2:	1ad2      	subs	r2, r2, r3
 80135e4:	69fb      	ldr	r3, [r7, #28]
 80135e6:	689b      	ldr	r3, [r3, #8]
 80135e8:	3301      	adds	r3, #1
 80135ea:	429a      	cmp	r2, r3
 80135ec:	d320      	bcc.n	8013630 <LoRaMacCommandsSerializeCmds+0x78>
        {
            buffer[itr++] = curElement->CID;
 80135ee:	7efb      	ldrb	r3, [r7, #27]
 80135f0:	1c5a      	adds	r2, r3, #1
 80135f2:	76fa      	strb	r2, [r7, #27]
 80135f4:	461a      	mov	r2, r3
 80135f6:	687b      	ldr	r3, [r7, #4]
 80135f8:	4413      	add	r3, r2
 80135fa:	69fa      	ldr	r2, [r7, #28]
 80135fc:	7912      	ldrb	r2, [r2, #4]
 80135fe:	701a      	strb	r2, [r3, #0]
            memcpy1( &buffer[itr], curElement->Payload, curElement->PayloadSize );
 8013600:	7efb      	ldrb	r3, [r7, #27]
 8013602:	687a      	ldr	r2, [r7, #4]
 8013604:	18d0      	adds	r0, r2, r3
 8013606:	69fb      	ldr	r3, [r7, #28]
 8013608:	1d59      	adds	r1, r3, #5
 801360a:	69fb      	ldr	r3, [r7, #28]
 801360c:	689b      	ldr	r3, [r3, #8]
 801360e:	b29b      	uxth	r3, r3
 8013610:	461a      	mov	r2, r3
 8013612:	f003 ff14 	bl	801743e <memcpy1>
            itr += curElement->PayloadSize;
 8013616:	69fb      	ldr	r3, [r7, #28]
 8013618:	689b      	ldr	r3, [r3, #8]
 801361a:	b2da      	uxtb	r2, r3
 801361c:	7efb      	ldrb	r3, [r7, #27]
 801361e:	4413      	add	r3, r2
 8013620:	76fb      	strb	r3, [r7, #27]
        }
        else
        {
            break;
        }
        curElement = curElement->Next;
 8013622:	69fb      	ldr	r3, [r7, #28]
 8013624:	681b      	ldr	r3, [r3, #0]
 8013626:	61fb      	str	r3, [r7, #28]
    while( curElement != NULL )
 8013628:	69fb      	ldr	r3, [r7, #28]
 801362a:	2b00      	cmp	r3, #0
 801362c:	d1d7      	bne.n	80135de <LoRaMacCommandsSerializeCmds+0x26>
 801362e:	e009      	b.n	8013644 <LoRaMacCommandsSerializeCmds+0x8c>
            break;
 8013630:	bf00      	nop
    }

    // Remove all commands which do not fit into the buffer
    while( curElement != NULL )
 8013632:	e007      	b.n	8013644 <LoRaMacCommandsSerializeCmds+0x8c>
    {
        // Store the next element before removing the current one
        nextElement = curElement->Next;
 8013634:	69fb      	ldr	r3, [r7, #28]
 8013636:	681b      	ldr	r3, [r3, #0]
 8013638:	617b      	str	r3, [r7, #20]
        LoRaMacCommandsRemoveCmd( curElement );
 801363a:	69f8      	ldr	r0, [r7, #28]
 801363c:	f7ff ff2e 	bl	801349c <LoRaMacCommandsRemoveCmd>
        curElement = nextElement;
 8013640:	697b      	ldr	r3, [r7, #20]
 8013642:	61fb      	str	r3, [r7, #28]
    while( curElement != NULL )
 8013644:	69fb      	ldr	r3, [r7, #28]
 8013646:	2b00      	cmp	r3, #0
 8013648:	d1f4      	bne.n	8013634 <LoRaMacCommandsSerializeCmds+0x7c>
    }

    // Fetch the effective size of the mac commands
    LoRaMacCommandsGetSizeSerializedCmds( effectiveSize );
 801364a:	68b8      	ldr	r0, [r7, #8]
 801364c:	f7ff ff9e 	bl	801358c <LoRaMacCommandsGetSizeSerializedCmds>

    return LORAMAC_COMMANDS_SUCCESS;
 8013650:	2300      	movs	r3, #0
}
 8013652:	4618      	mov	r0, r3
 8013654:	3720      	adds	r7, #32
 8013656:	46bd      	mov	sp, r7
 8013658:	bd80      	pop	{r7, pc}
 801365a:	bf00      	nop
 801365c:	20001990 	.word	0x20001990

08013660 <LoRaMacCommandsStickyCmdsPending>:

LoRaMacCommandStatus_t LoRaMacCommandsStickyCmdsPending( bool* cmdsPending )
{
 8013660:	b480      	push	{r7}
 8013662:	b085      	sub	sp, #20
 8013664:	af00      	add	r7, sp, #0
 8013666:	6078      	str	r0, [r7, #4]
    if( cmdsPending == NULL )
 8013668:	687b      	ldr	r3, [r7, #4]
 801366a:	2b00      	cmp	r3, #0
 801366c:	d101      	bne.n	8013672 <LoRaMacCommandsStickyCmdsPending+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 801366e:	2301      	movs	r3, #1
 8013670:	e016      	b.n	80136a0 <LoRaMacCommandsStickyCmdsPending+0x40>
    }
    MacCommand_t* curElement;
    curElement = CommandsCtx.MacCommandList.First;
 8013672:	4b0e      	ldr	r3, [pc, #56]	@ (80136ac <LoRaMacCommandsStickyCmdsPending+0x4c>)
 8013674:	681b      	ldr	r3, [r3, #0]
 8013676:	60fb      	str	r3, [r7, #12]

    *cmdsPending = false;
 8013678:	687b      	ldr	r3, [r7, #4]
 801367a:	2200      	movs	r2, #0
 801367c:	701a      	strb	r2, [r3, #0]

    // Loop through all elements
    while( curElement != NULL )
 801367e:	e00b      	b.n	8013698 <LoRaMacCommandsStickyCmdsPending+0x38>
    {
        if( curElement->IsSticky == true )
 8013680:	68fb      	ldr	r3, [r7, #12]
 8013682:	7b1b      	ldrb	r3, [r3, #12]
 8013684:	2b00      	cmp	r3, #0
 8013686:	d004      	beq.n	8013692 <LoRaMacCommandsStickyCmdsPending+0x32>
        {
            // Found one sticky MAC command
            *cmdsPending = true;
 8013688:	687b      	ldr	r3, [r7, #4]
 801368a:	2201      	movs	r2, #1
 801368c:	701a      	strb	r2, [r3, #0]
            return LORAMAC_COMMANDS_SUCCESS;
 801368e:	2300      	movs	r3, #0
 8013690:	e006      	b.n	80136a0 <LoRaMacCommandsStickyCmdsPending+0x40>
        }
        curElement = curElement->Next;
 8013692:	68fb      	ldr	r3, [r7, #12]
 8013694:	681b      	ldr	r3, [r3, #0]
 8013696:	60fb      	str	r3, [r7, #12]
    while( curElement != NULL )
 8013698:	68fb      	ldr	r3, [r7, #12]
 801369a:	2b00      	cmp	r3, #0
 801369c:	d1f0      	bne.n	8013680 <LoRaMacCommandsStickyCmdsPending+0x20>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 801369e:	2300      	movs	r3, #0
}
 80136a0:	4618      	mov	r0, r3
 80136a2:	3714      	adds	r7, #20
 80136a4:	46bd      	mov	sp, r7
 80136a6:	bc80      	pop	{r7}
 80136a8:	4770      	bx	lr
 80136aa:	bf00      	nop
 80136ac:	20001990 	.word	0x20001990

080136b0 <LoRaMacCommandsGetCmdSize>:

uint8_t LoRaMacCommandsGetCmdSize( uint8_t cid )
{
 80136b0:	b480      	push	{r7}
 80136b2:	b085      	sub	sp, #20
 80136b4:	af00      	add	r7, sp, #0
 80136b6:	4603      	mov	r3, r0
 80136b8:	71fb      	strb	r3, [r7, #7]
    uint8_t cidSize = 0;
 80136ba:	2300      	movs	r3, #0
 80136bc:	73fb      	strb	r3, [r7, #15]

    // Decode Frame MAC commands
    switch( cid )
 80136be:	79fb      	ldrb	r3, [r7, #7]
 80136c0:	3b02      	subs	r3, #2
 80136c2:	2b11      	cmp	r3, #17
 80136c4:	d850      	bhi.n	8013768 <LoRaMacCommandsGetCmdSize+0xb8>
 80136c6:	a201      	add	r2, pc, #4	@ (adr r2, 80136cc <LoRaMacCommandsGetCmdSize+0x1c>)
 80136c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80136cc:	08013715 	.word	0x08013715
 80136d0:	0801371b 	.word	0x0801371b
 80136d4:	08013721 	.word	0x08013721
 80136d8:	08013727 	.word	0x08013727
 80136dc:	0801372d 	.word	0x0801372d
 80136e0:	08013733 	.word	0x08013733
 80136e4:	08013739 	.word	0x08013739
 80136e8:	0801373f 	.word	0x0801373f
 80136ec:	08013745 	.word	0x08013745
 80136f0:	08013769 	.word	0x08013769
 80136f4:	08013769 	.word	0x08013769
 80136f8:	0801374b 	.word	0x0801374b
 80136fc:	08013769 	.word	0x08013769
 8013700:	08013769 	.word	0x08013769
 8013704:	08013751 	.word	0x08013751
 8013708:	08013757 	.word	0x08013757
 801370c:	0801375d 	.word	0x0801375d
 8013710:	08013763 	.word	0x08013763
    {
        case SRV_MAC_LINK_CHECK_ANS:
        {
            // cid + Margin + GwCnt
            cidSize = 3;
 8013714:	2303      	movs	r3, #3
 8013716:	73fb      	strb	r3, [r7, #15]
            break;
 8013718:	e027      	b.n	801376a <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_LINK_ADR_REQ:
        {
            // cid + DataRate_TXPower + ChMask (2) + Redundancy
            cidSize = 5;
 801371a:	2305      	movs	r3, #5
 801371c:	73fb      	strb	r3, [r7, #15]
            break;
 801371e:	e024      	b.n	801376a <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DUTY_CYCLE_REQ:
        {
            // cid + DutyCyclePL
            cidSize = 2;
 8013720:	2302      	movs	r3, #2
 8013722:	73fb      	strb	r3, [r7, #15]
            break;
 8013724:	e021      	b.n	801376a <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_RX_PARAM_SETUP_REQ:
        {
            // cid + DLsettings + Frequency (3)
            cidSize = 5;
 8013726:	2305      	movs	r3, #5
 8013728:	73fb      	strb	r3, [r7, #15]
            break;
 801372a:	e01e      	b.n	801376a <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DEV_STATUS_REQ:
        {
            // cid
            cidSize = 1;
 801372c:	2301      	movs	r3, #1
 801372e:	73fb      	strb	r3, [r7, #15]
            break;
 8013730:	e01b      	b.n	801376a <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_NEW_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3) + DrRange
            cidSize = 6;
 8013732:	2306      	movs	r3, #6
 8013734:	73fb      	strb	r3, [r7, #15]
            break;
 8013736:	e018      	b.n	801376a <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_RX_TIMING_SETUP_REQ:
        {
            // cid + Settings
            cidSize = 2;
 8013738:	2302      	movs	r3, #2
 801373a:	73fb      	strb	r3, [r7, #15]
            break;
 801373c:	e015      	b.n	801376a <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_TX_PARAM_SETUP_REQ:
        {
            // cid + EIRP_DwellTime
            cidSize = 2;
 801373e:	2302      	movs	r3, #2
 8013740:	73fb      	strb	r3, [r7, #15]
            break;
 8013742:	e012      	b.n	801376a <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DL_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3)
            cidSize = 5;
 8013744:	2305      	movs	r3, #5
 8013746:	73fb      	strb	r3, [r7, #15]
            break;
 8013748:	e00f      	b.n	801376a <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DEVICE_TIME_ANS:
        {
            // cid + Seconds (4) + Fractional seconds (1)
            cidSize = 6;
 801374a:	2306      	movs	r3, #6
 801374c:	73fb      	strb	r3, [r7, #15]
            break;
 801374e:	e00c      	b.n	801376a <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_PING_SLOT_INFO_ANS:
        {
            // cid
            cidSize = 1;
 8013750:	2301      	movs	r3, #1
 8013752:	73fb      	strb	r3, [r7, #15]
            break;
 8013754:	e009      	b.n	801376a <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_PING_SLOT_CHANNEL_REQ:
        {
            // cid + Frequency (3) + DR
            cidSize = 5;
 8013756:	2305      	movs	r3, #5
 8013758:	73fb      	strb	r3, [r7, #15]
            break;
 801375a:	e006      	b.n	801376a <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_BEACON_TIMING_ANS:
        {
            // cid + TimingDelay (2) + Channel
            cidSize = 4;
 801375c:	2304      	movs	r3, #4
 801375e:	73fb      	strb	r3, [r7, #15]
            break;
 8013760:	e003      	b.n	801376a <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_BEACON_FREQ_REQ:
        {
            // cid + Frequency (3)
            cidSize = 4;
 8013762:	2304      	movs	r3, #4
 8013764:	73fb      	strb	r3, [r7, #15]
            break;
 8013766:	e000      	b.n	801376a <LoRaMacCommandsGetCmdSize+0xba>
        }
        default:
        {
            // Unknown command. ABORT MAC commands processing
            break;
 8013768:	bf00      	nop
        }
    }
    return cidSize;
 801376a:	7bfb      	ldrb	r3, [r7, #15]
}
 801376c:	4618      	mov	r0, r3
 801376e:	3714      	adds	r7, #20
 8013770:	46bd      	mov	sp, r7
 8013772:	bc80      	pop	{r7}
 8013774:	4770      	bx	lr
 8013776:	bf00      	nop

08013778 <IncreaseBufferPointer>:
 * Module context.
 */
static LoRaMacConfirmQueueCtx_t ConfirmQueueCtx;

static MlmeConfirmQueue_t* IncreaseBufferPointer( MlmeConfirmQueue_t* bufferPointer )
{
 8013778:	b480      	push	{r7}
 801377a:	b083      	sub	sp, #12
 801377c:	af00      	add	r7, sp, #0
 801377e:	6078      	str	r0, [r7, #4]
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 8013780:	687b      	ldr	r3, [r7, #4]
 8013782:	4a07      	ldr	r2, [pc, #28]	@ (80137a0 <IncreaseBufferPointer+0x28>)
 8013784:	4293      	cmp	r3, r2
 8013786:	d102      	bne.n	801378e <IncreaseBufferPointer+0x16>
    {
        // Reset to the first element
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 8013788:	4b06      	ldr	r3, [pc, #24]	@ (80137a4 <IncreaseBufferPointer+0x2c>)
 801378a:	607b      	str	r3, [r7, #4]
 801378c:	e002      	b.n	8013794 <IncreaseBufferPointer+0x1c>
    }
    else
    {
        // Increase
        bufferPointer++;
 801378e:	687b      	ldr	r3, [r7, #4]
 8013790:	3304      	adds	r3, #4
 8013792:	607b      	str	r3, [r7, #4]
    }
    return bufferPointer;
 8013794:	687b      	ldr	r3, [r7, #4]
}
 8013796:	4618      	mov	r0, r3
 8013798:	370c      	adds	r7, #12
 801379a:	46bd      	mov	sp, r7
 801379c:	bc80      	pop	{r7}
 801379e:	4770      	bx	lr
 80137a0:	20001bb8 	.word	0x20001bb8
 80137a4:	20001ba8 	.word	0x20001ba8

080137a8 <IsListEmpty>:
    }
    return bufferPointer;
}

static bool IsListEmpty( uint8_t count )
{
 80137a8:	b480      	push	{r7}
 80137aa:	b083      	sub	sp, #12
 80137ac:	af00      	add	r7, sp, #0
 80137ae:	4603      	mov	r3, r0
 80137b0:	71fb      	strb	r3, [r7, #7]
    if( count == 0 )
 80137b2:	79fb      	ldrb	r3, [r7, #7]
 80137b4:	2b00      	cmp	r3, #0
 80137b6:	d101      	bne.n	80137bc <IsListEmpty+0x14>
    {
        return true;
 80137b8:	2301      	movs	r3, #1
 80137ba:	e000      	b.n	80137be <IsListEmpty+0x16>
    }
    return false;
 80137bc:	2300      	movs	r3, #0
}
 80137be:	4618      	mov	r0, r3
 80137c0:	370c      	adds	r7, #12
 80137c2:	46bd      	mov	sp, r7
 80137c4:	bc80      	pop	{r7}
 80137c6:	4770      	bx	lr

080137c8 <IsListFull>:

static bool IsListFull( uint8_t count )
{
 80137c8:	b480      	push	{r7}
 80137ca:	b083      	sub	sp, #12
 80137cc:	af00      	add	r7, sp, #0
 80137ce:	4603      	mov	r3, r0
 80137d0:	71fb      	strb	r3, [r7, #7]
    if( count >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
 80137d2:	79fb      	ldrb	r3, [r7, #7]
 80137d4:	2b04      	cmp	r3, #4
 80137d6:	d901      	bls.n	80137dc <IsListFull+0x14>
    {
        return true;
 80137d8:	2301      	movs	r3, #1
 80137da:	e000      	b.n	80137de <IsListFull+0x16>
    }
    return false;
 80137dc:	2300      	movs	r3, #0
}
 80137de:	4618      	mov	r0, r3
 80137e0:	370c      	adds	r7, #12
 80137e2:	46bd      	mov	sp, r7
 80137e4:	bc80      	pop	{r7}
 80137e6:	4770      	bx	lr

080137e8 <GetElement>:

static MlmeConfirmQueue_t* GetElement( Mlme_t request, MlmeConfirmQueue_t* bufferStart, MlmeConfirmQueue_t* bufferEnd )
{
 80137e8:	b580      	push	{r7, lr}
 80137ea:	b086      	sub	sp, #24
 80137ec:	af00      	add	r7, sp, #0
 80137ee:	4603      	mov	r3, r0
 80137f0:	60b9      	str	r1, [r7, #8]
 80137f2:	607a      	str	r2, [r7, #4]
 80137f4:	73fb      	strb	r3, [r7, #15]
    MlmeConfirmQueue_t* element = bufferStart;
 80137f6:	68bb      	ldr	r3, [r7, #8]
 80137f8:	617b      	str	r3, [r7, #20]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 80137fa:	4b13      	ldr	r3, [pc, #76]	@ (8013848 <GetElement+0x60>)
 80137fc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013800:	4618      	mov	r0, r3
 8013802:	f7ff ffd1 	bl	80137a8 <IsListEmpty>
 8013806:	4603      	mov	r3, r0
 8013808:	2b00      	cmp	r3, #0
 801380a:	d001      	beq.n	8013810 <GetElement+0x28>
    {
        return NULL;
 801380c:	2300      	movs	r3, #0
 801380e:	e017      	b.n	8013840 <GetElement+0x58>
    }

    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 8013810:	2300      	movs	r3, #0
 8013812:	74fb      	strb	r3, [r7, #19]
 8013814:	e00d      	b.n	8013832 <GetElement+0x4a>
    {
        if( element->Request == request )
 8013816:	697b      	ldr	r3, [r7, #20]
 8013818:	781b      	ldrb	r3, [r3, #0]
 801381a:	7bfa      	ldrb	r2, [r7, #15]
 801381c:	429a      	cmp	r2, r3
 801381e:	d101      	bne.n	8013824 <GetElement+0x3c>
        {
            // We have found the element
            return element;
 8013820:	697b      	ldr	r3, [r7, #20]
 8013822:	e00d      	b.n	8013840 <GetElement+0x58>
        }
        element = IncreaseBufferPointer( element );
 8013824:	6978      	ldr	r0, [r7, #20]
 8013826:	f7ff ffa7 	bl	8013778 <IncreaseBufferPointer>
 801382a:	6178      	str	r0, [r7, #20]
    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 801382c:	7cfb      	ldrb	r3, [r7, #19]
 801382e:	3301      	adds	r3, #1
 8013830:	74fb      	strb	r3, [r7, #19]
 8013832:	4b05      	ldr	r3, [pc, #20]	@ (8013848 <GetElement+0x60>)
 8013834:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013838:	7cfa      	ldrb	r2, [r7, #19]
 801383a:	429a      	cmp	r2, r3
 801383c:	d3eb      	bcc.n	8013816 <GetElement+0x2e>
    }

    return NULL;
 801383e:	2300      	movs	r3, #0
}
 8013840:	4618      	mov	r0, r3
 8013842:	3718      	adds	r7, #24
 8013844:	46bd      	mov	sp, r7
 8013846:	bd80      	pop	{r7, pc}
 8013848:	20001b9c 	.word	0x20001b9c

0801384c <LoRaMacConfirmQueueInit>:

void LoRaMacConfirmQueueInit( LoRaMacPrimitives_t* primitives )
{
 801384c:	b580      	push	{r7, lr}
 801384e:	b082      	sub	sp, #8
 8013850:	af00      	add	r7, sp, #0
 8013852:	6078      	str	r0, [r7, #4]
    ConfirmQueueCtx.Primitives = primitives;
 8013854:	4a0c      	ldr	r2, [pc, #48]	@ (8013888 <LoRaMacConfirmQueueInit+0x3c>)
 8013856:	687b      	ldr	r3, [r7, #4]
 8013858:	6013      	str	r3, [r2, #0]

    // Init counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt = 0;
 801385a:	4b0b      	ldr	r3, [pc, #44]	@ (8013888 <LoRaMacConfirmQueueInit+0x3c>)
 801385c:	2200      	movs	r2, #0
 801385e:	f883 2020 	strb.w	r2, [r3, #32]

    // Init buffer
    ConfirmQueueCtx.BufferStart = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 8013862:	4b09      	ldr	r3, [pc, #36]	@ (8013888 <LoRaMacConfirmQueueInit+0x3c>)
 8013864:	4a09      	ldr	r2, [pc, #36]	@ (801388c <LoRaMacConfirmQueueInit+0x40>)
 8013866:	605a      	str	r2, [r3, #4]
    ConfirmQueueCtx.BufferEnd = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 8013868:	4b07      	ldr	r3, [pc, #28]	@ (8013888 <LoRaMacConfirmQueueInit+0x3c>)
 801386a:	4a08      	ldr	r2, [pc, #32]	@ (801388c <LoRaMacConfirmQueueInit+0x40>)
 801386c:	609a      	str	r2, [r3, #8]

    memset1( ( uint8_t* )ConfirmQueueCtx.Nvm.MlmeConfirmQueue, 0xFF, sizeof( ConfirmQueueCtx.Nvm.MlmeConfirmQueue ) );
 801386e:	2214      	movs	r2, #20
 8013870:	21ff      	movs	r1, #255	@ 0xff
 8013872:	4806      	ldr	r0, [pc, #24]	@ (801388c <LoRaMacConfirmQueueInit+0x40>)
 8013874:	f003 fe1e 	bl	80174b4 <memset1>

    // Common status
    ConfirmQueueCtx.Nvm.CommonStatus = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8013878:	4b03      	ldr	r3, [pc, #12]	@ (8013888 <LoRaMacConfirmQueueInit+0x3c>)
 801387a:	2201      	movs	r2, #1
 801387c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
}
 8013880:	bf00      	nop
 8013882:	3708      	adds	r7, #8
 8013884:	46bd      	mov	sp, r7
 8013886:	bd80      	pop	{r7, pc}
 8013888:	20001b9c 	.word	0x20001b9c
 801388c:	20001ba8 	.word	0x20001ba8

08013890 <LoRaMacConfirmQueueAdd>:

bool LoRaMacConfirmQueueAdd( MlmeConfirmQueue_t* mlmeConfirm )
{
 8013890:	b580      	push	{r7, lr}
 8013892:	b082      	sub	sp, #8
 8013894:	af00      	add	r7, sp, #0
 8013896:	6078      	str	r0, [r7, #4]
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8013898:	4b19      	ldr	r3, [pc, #100]	@ (8013900 <LoRaMacConfirmQueueAdd+0x70>)
 801389a:	f893 3020 	ldrb.w	r3, [r3, #32]
 801389e:	4618      	mov	r0, r3
 80138a0:	f7ff ff92 	bl	80137c8 <IsListFull>
 80138a4:	4603      	mov	r3, r0
 80138a6:	2b00      	cmp	r3, #0
 80138a8:	d001      	beq.n	80138ae <LoRaMacConfirmQueueAdd+0x1e>
    {
        // Protect the buffer against overwrites
        return false;
 80138aa:	2300      	movs	r3, #0
 80138ac:	e024      	b.n	80138f8 <LoRaMacConfirmQueueAdd+0x68>
    }

    // Add the element to the ring buffer
    ConfirmQueueCtx.BufferEnd->Request = mlmeConfirm->Request;
 80138ae:	4b14      	ldr	r3, [pc, #80]	@ (8013900 <LoRaMacConfirmQueueAdd+0x70>)
 80138b0:	689b      	ldr	r3, [r3, #8]
 80138b2:	687a      	ldr	r2, [r7, #4]
 80138b4:	7812      	ldrb	r2, [r2, #0]
 80138b6:	701a      	strb	r2, [r3, #0]
    ConfirmQueueCtx.BufferEnd->Status = mlmeConfirm->Status;
 80138b8:	4b11      	ldr	r3, [pc, #68]	@ (8013900 <LoRaMacConfirmQueueAdd+0x70>)
 80138ba:	689b      	ldr	r3, [r3, #8]
 80138bc:	687a      	ldr	r2, [r7, #4]
 80138be:	7852      	ldrb	r2, [r2, #1]
 80138c0:	705a      	strb	r2, [r3, #1]
    ConfirmQueueCtx.BufferEnd->RestrictCommonReadyToHandle = mlmeConfirm->RestrictCommonReadyToHandle;
 80138c2:	4b0f      	ldr	r3, [pc, #60]	@ (8013900 <LoRaMacConfirmQueueAdd+0x70>)
 80138c4:	689b      	ldr	r3, [r3, #8]
 80138c6:	687a      	ldr	r2, [r7, #4]
 80138c8:	78d2      	ldrb	r2, [r2, #3]
 80138ca:	70da      	strb	r2, [r3, #3]
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = false;
#elif (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = mlmeConfirm->ReadyToHandle;
 80138cc:	4b0c      	ldr	r3, [pc, #48]	@ (8013900 <LoRaMacConfirmQueueAdd+0x70>)
 80138ce:	689b      	ldr	r3, [r3, #8]
 80138d0:	687a      	ldr	r2, [r7, #4]
 80138d2:	7892      	ldrb	r2, [r2, #2]
 80138d4:	709a      	strb	r2, [r3, #2]
#endif /* LORAMAC_VERSION */
    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt++;
 80138d6:	4b0a      	ldr	r3, [pc, #40]	@ (8013900 <LoRaMacConfirmQueueAdd+0x70>)
 80138d8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80138dc:	3301      	adds	r3, #1
 80138de:	b2da      	uxtb	r2, r3
 80138e0:	4b07      	ldr	r3, [pc, #28]	@ (8013900 <LoRaMacConfirmQueueAdd+0x70>)
 80138e2:	f883 2020 	strb.w	r2, [r3, #32]
    // Update end pointer
    ConfirmQueueCtx.BufferEnd = IncreaseBufferPointer( ConfirmQueueCtx.BufferEnd );
 80138e6:	4b06      	ldr	r3, [pc, #24]	@ (8013900 <LoRaMacConfirmQueueAdd+0x70>)
 80138e8:	689b      	ldr	r3, [r3, #8]
 80138ea:	4618      	mov	r0, r3
 80138ec:	f7ff ff44 	bl	8013778 <IncreaseBufferPointer>
 80138f0:	4603      	mov	r3, r0
 80138f2:	4a03      	ldr	r2, [pc, #12]	@ (8013900 <LoRaMacConfirmQueueAdd+0x70>)
 80138f4:	6093      	str	r3, [r2, #8]

    return true;
 80138f6:	2301      	movs	r3, #1
}
 80138f8:	4618      	mov	r0, r3
 80138fa:	3708      	adds	r7, #8
 80138fc:	46bd      	mov	sp, r7
 80138fe:	bd80      	pop	{r7, pc}
 8013900:	20001b9c 	.word	0x20001b9c

08013904 <LoRaMacConfirmQueueRemoveFirst>:

    return true;
}

bool LoRaMacConfirmQueueRemoveFirst( void )
{
 8013904:	b580      	push	{r7, lr}
 8013906:	af00      	add	r7, sp, #0
    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8013908:	4b0e      	ldr	r3, [pc, #56]	@ (8013944 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 801390a:	f893 3020 	ldrb.w	r3, [r3, #32]
 801390e:	4618      	mov	r0, r3
 8013910:	f7ff ff4a 	bl	80137a8 <IsListEmpty>
 8013914:	4603      	mov	r3, r0
 8013916:	2b00      	cmp	r3, #0
 8013918:	d001      	beq.n	801391e <LoRaMacConfirmQueueRemoveFirst+0x1a>
    {
        return false;
 801391a:	2300      	movs	r3, #0
 801391c:	e010      	b.n	8013940 <LoRaMacConfirmQueueRemoveFirst+0x3c>
    }

    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt--;
 801391e:	4b09      	ldr	r3, [pc, #36]	@ (8013944 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8013920:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013924:	3b01      	subs	r3, #1
 8013926:	b2da      	uxtb	r2, r3
 8013928:	4b06      	ldr	r3, [pc, #24]	@ (8013944 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 801392a:	f883 2020 	strb.w	r2, [r3, #32]
    // Update start pointer
    ConfirmQueueCtx.BufferStart = IncreaseBufferPointer( ConfirmQueueCtx.BufferStart );
 801392e:	4b05      	ldr	r3, [pc, #20]	@ (8013944 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8013930:	685b      	ldr	r3, [r3, #4]
 8013932:	4618      	mov	r0, r3
 8013934:	f7ff ff20 	bl	8013778 <IncreaseBufferPointer>
 8013938:	4603      	mov	r3, r0
 801393a:	4a02      	ldr	r2, [pc, #8]	@ (8013944 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 801393c:	6053      	str	r3, [r2, #4]

    return true;
 801393e:	2301      	movs	r3, #1
}
 8013940:	4618      	mov	r0, r3
 8013942:	bd80      	pop	{r7, pc}
 8013944:	20001b9c 	.word	0x20001b9c

08013948 <LoRaMacConfirmQueueSetStatus>:

void LoRaMacConfirmQueueSetStatus( LoRaMacEventInfoStatus_t status, Mlme_t request )
{
 8013948:	b580      	push	{r7, lr}
 801394a:	b084      	sub	sp, #16
 801394c:	af00      	add	r7, sp, #0
 801394e:	4603      	mov	r3, r0
 8013950:	460a      	mov	r2, r1
 8013952:	71fb      	strb	r3, [r7, #7]
 8013954:	4613      	mov	r3, r2
 8013956:	71bb      	strb	r3, [r7, #6]
    MlmeConfirmQueue_t* element = NULL;
 8013958:	2300      	movs	r3, #0
 801395a:	60fb      	str	r3, [r7, #12]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 801395c:	4b10      	ldr	r3, [pc, #64]	@ (80139a0 <LoRaMacConfirmQueueSetStatus+0x58>)
 801395e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013962:	4618      	mov	r0, r3
 8013964:	f7ff ff20 	bl	80137a8 <IsListEmpty>
 8013968:	4603      	mov	r3, r0
 801396a:	f083 0301 	eor.w	r3, r3, #1
 801396e:	b2db      	uxtb	r3, r3
 8013970:	2b00      	cmp	r3, #0
 8013972:	d011      	beq.n	8013998 <LoRaMacConfirmQueueSetStatus+0x50>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 8013974:	4b0a      	ldr	r3, [pc, #40]	@ (80139a0 <LoRaMacConfirmQueueSetStatus+0x58>)
 8013976:	6859      	ldr	r1, [r3, #4]
 8013978:	4b09      	ldr	r3, [pc, #36]	@ (80139a0 <LoRaMacConfirmQueueSetStatus+0x58>)
 801397a:	689a      	ldr	r2, [r3, #8]
 801397c:	79bb      	ldrb	r3, [r7, #6]
 801397e:	4618      	mov	r0, r3
 8013980:	f7ff ff32 	bl	80137e8 <GetElement>
 8013984:	60f8      	str	r0, [r7, #12]
        if( element != NULL )
 8013986:	68fb      	ldr	r3, [r7, #12]
 8013988:	2b00      	cmp	r3, #0
 801398a:	d005      	beq.n	8013998 <LoRaMacConfirmQueueSetStatus+0x50>
        {
            element->Status = status;
 801398c:	68fb      	ldr	r3, [r7, #12]
 801398e:	79fa      	ldrb	r2, [r7, #7]
 8013990:	705a      	strb	r2, [r3, #1]
            element->ReadyToHandle = true;
 8013992:	68fb      	ldr	r3, [r7, #12]
 8013994:	2201      	movs	r2, #1
 8013996:	709a      	strb	r2, [r3, #2]
        }
    }
}
 8013998:	bf00      	nop
 801399a:	3710      	adds	r7, #16
 801399c:	46bd      	mov	sp, r7
 801399e:	bd80      	pop	{r7, pc}
 80139a0:	20001b9c 	.word	0x20001b9c

080139a4 <LoRaMacConfirmQueueGetStatus>:

LoRaMacEventInfoStatus_t LoRaMacConfirmQueueGetStatus( Mlme_t request )
{
 80139a4:	b580      	push	{r7, lr}
 80139a6:	b084      	sub	sp, #16
 80139a8:	af00      	add	r7, sp, #0
 80139aa:	4603      	mov	r3, r0
 80139ac:	71fb      	strb	r3, [r7, #7]
    MlmeConfirmQueue_t* element = NULL;
 80139ae:	2300      	movs	r3, #0
 80139b0:	60fb      	str	r3, [r7, #12]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 80139b2:	4b10      	ldr	r3, [pc, #64]	@ (80139f4 <LoRaMacConfirmQueueGetStatus+0x50>)
 80139b4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80139b8:	4618      	mov	r0, r3
 80139ba:	f7ff fef5 	bl	80137a8 <IsListEmpty>
 80139be:	4603      	mov	r3, r0
 80139c0:	f083 0301 	eor.w	r3, r3, #1
 80139c4:	b2db      	uxtb	r3, r3
 80139c6:	2b00      	cmp	r3, #0
 80139c8:	d00e      	beq.n	80139e8 <LoRaMacConfirmQueueGetStatus+0x44>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 80139ca:	4b0a      	ldr	r3, [pc, #40]	@ (80139f4 <LoRaMacConfirmQueueGetStatus+0x50>)
 80139cc:	6859      	ldr	r1, [r3, #4]
 80139ce:	4b09      	ldr	r3, [pc, #36]	@ (80139f4 <LoRaMacConfirmQueueGetStatus+0x50>)
 80139d0:	689a      	ldr	r2, [r3, #8]
 80139d2:	79fb      	ldrb	r3, [r7, #7]
 80139d4:	4618      	mov	r0, r3
 80139d6:	f7ff ff07 	bl	80137e8 <GetElement>
 80139da:	60f8      	str	r0, [r7, #12]
        if( element != NULL )
 80139dc:	68fb      	ldr	r3, [r7, #12]
 80139de:	2b00      	cmp	r3, #0
 80139e0:	d002      	beq.n	80139e8 <LoRaMacConfirmQueueGetStatus+0x44>
        {
            return element->Status;
 80139e2:	68fb      	ldr	r3, [r7, #12]
 80139e4:	785b      	ldrb	r3, [r3, #1]
 80139e6:	e000      	b.n	80139ea <LoRaMacConfirmQueueGetStatus+0x46>
        }
    }
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 80139e8:	2301      	movs	r3, #1
}
 80139ea:	4618      	mov	r0, r3
 80139ec:	3710      	adds	r7, #16
 80139ee:	46bd      	mov	sp, r7
 80139f0:	bd80      	pop	{r7, pc}
 80139f2:	bf00      	nop
 80139f4:	20001b9c 	.word	0x20001b9c

080139f8 <LoRaMacConfirmQueueSetStatusCmn>:

void LoRaMacConfirmQueueSetStatusCmn( LoRaMacEventInfoStatus_t status )
{
 80139f8:	b580      	push	{r7, lr}
 80139fa:	b084      	sub	sp, #16
 80139fc:	af00      	add	r7, sp, #0
 80139fe:	4603      	mov	r3, r0
 8013a00:	71fb      	strb	r3, [r7, #7]
    MlmeConfirmQueue_t* element = ConfirmQueueCtx.BufferStart;
 8013a02:	4b16      	ldr	r3, [pc, #88]	@ (8013a5c <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8013a04:	685b      	ldr	r3, [r3, #4]
 8013a06:	60fb      	str	r3, [r7, #12]

    ConfirmQueueCtx.Nvm.CommonStatus = status;
 8013a08:	4a14      	ldr	r2, [pc, #80]	@ (8013a5c <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8013a0a:	79fb      	ldrb	r3, [r7, #7]
 8013a0c:	f882 3021 	strb.w	r3, [r2, #33]	@ 0x21

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 8013a10:	4b12      	ldr	r3, [pc, #72]	@ (8013a5c <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8013a12:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013a16:	4618      	mov	r0, r3
 8013a18:	f7ff fec6 	bl	80137a8 <IsListEmpty>
 8013a1c:	4603      	mov	r3, r0
 8013a1e:	f083 0301 	eor.w	r3, r3, #1
 8013a22:	b2db      	uxtb	r3, r3
 8013a24:	2b00      	cmp	r3, #0
 8013a26:	d015      	beq.n	8013a54 <LoRaMacConfirmQueueSetStatusCmn+0x5c>
    {
        do
        {
            element->Status = status;
 8013a28:	68fb      	ldr	r3, [r7, #12]
 8013a2a:	79fa      	ldrb	r2, [r7, #7]
 8013a2c:	705a      	strb	r2, [r3, #1]
            // Set the status if it is allowed to set it with a call to
            // LoRaMacConfirmQueueSetStatusCmn.
            if( element->RestrictCommonReadyToHandle == false )
 8013a2e:	68fb      	ldr	r3, [r7, #12]
 8013a30:	78db      	ldrb	r3, [r3, #3]
 8013a32:	f083 0301 	eor.w	r3, r3, #1
 8013a36:	b2db      	uxtb	r3, r3
 8013a38:	2b00      	cmp	r3, #0
 8013a3a:	d002      	beq.n	8013a42 <LoRaMacConfirmQueueSetStatusCmn+0x4a>
            {
                element->ReadyToHandle = true;
 8013a3c:	68fb      	ldr	r3, [r7, #12]
 8013a3e:	2201      	movs	r2, #1
 8013a40:	709a      	strb	r2, [r3, #2]
            }
            element = IncreaseBufferPointer( element );
 8013a42:	68f8      	ldr	r0, [r7, #12]
 8013a44:	f7ff fe98 	bl	8013778 <IncreaseBufferPointer>
 8013a48:	60f8      	str	r0, [r7, #12]
        }while( element != ConfirmQueueCtx.BufferEnd );
 8013a4a:	4b04      	ldr	r3, [pc, #16]	@ (8013a5c <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8013a4c:	689b      	ldr	r3, [r3, #8]
 8013a4e:	68fa      	ldr	r2, [r7, #12]
 8013a50:	429a      	cmp	r2, r3
 8013a52:	d1e9      	bne.n	8013a28 <LoRaMacConfirmQueueSetStatusCmn+0x30>
    }
}
 8013a54:	bf00      	nop
 8013a56:	3710      	adds	r7, #16
 8013a58:	46bd      	mov	sp, r7
 8013a5a:	bd80      	pop	{r7, pc}
 8013a5c:	20001b9c 	.word	0x20001b9c

08013a60 <LoRaMacConfirmQueueIsCmdActive>:
{
    return ConfirmQueueCtx.Nvm.CommonStatus;
}

bool LoRaMacConfirmQueueIsCmdActive( Mlme_t request )
{
 8013a60:	b580      	push	{r7, lr}
 8013a62:	b082      	sub	sp, #8
 8013a64:	af00      	add	r7, sp, #0
 8013a66:	4603      	mov	r3, r0
 8013a68:	71fb      	strb	r3, [r7, #7]
    if( GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd ) != NULL )
 8013a6a:	4b09      	ldr	r3, [pc, #36]	@ (8013a90 <LoRaMacConfirmQueueIsCmdActive+0x30>)
 8013a6c:	6859      	ldr	r1, [r3, #4]
 8013a6e:	4b08      	ldr	r3, [pc, #32]	@ (8013a90 <LoRaMacConfirmQueueIsCmdActive+0x30>)
 8013a70:	689a      	ldr	r2, [r3, #8]
 8013a72:	79fb      	ldrb	r3, [r7, #7]
 8013a74:	4618      	mov	r0, r3
 8013a76:	f7ff feb7 	bl	80137e8 <GetElement>
 8013a7a:	4603      	mov	r3, r0
 8013a7c:	2b00      	cmp	r3, #0
 8013a7e:	d001      	beq.n	8013a84 <LoRaMacConfirmQueueIsCmdActive+0x24>
    {
        return true;
 8013a80:	2301      	movs	r3, #1
 8013a82:	e000      	b.n	8013a86 <LoRaMacConfirmQueueIsCmdActive+0x26>
    }
    return false;
 8013a84:	2300      	movs	r3, #0
}
 8013a86:	4618      	mov	r0, r3
 8013a88:	3708      	adds	r7, #8
 8013a8a:	46bd      	mov	sp, r7
 8013a8c:	bd80      	pop	{r7, pc}
 8013a8e:	bf00      	nop
 8013a90:	20001b9c 	.word	0x20001b9c

08013a94 <LoRaMacConfirmQueueHandleCb>:

void LoRaMacConfirmQueueHandleCb( MlmeConfirm_t* mlmeConfirm )
{
 8013a94:	b580      	push	{r7, lr}
 8013a96:	b084      	sub	sp, #16
 8013a98:	af00      	add	r7, sp, #0
 8013a9a:	6078      	str	r0, [r7, #4]
    uint8_t nbElements = ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 8013a9c:	4b22      	ldr	r3, [pc, #136]	@ (8013b28 <LoRaMacConfirmQueueHandleCb+0x94>)
 8013a9e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013aa2:	73bb      	strb	r3, [r7, #14]
    bool readyToHandle = false;
 8013aa4:	2300      	movs	r3, #0
 8013aa6:	737b      	strb	r3, [r7, #13]
    MlmeConfirmQueue_t mlmeConfirmToStore;

    for( uint8_t i = 0; i < nbElements; i++ )
 8013aa8:	2300      	movs	r3, #0
 8013aaa:	73fb      	strb	r3, [r7, #15]
 8013aac:	e032      	b.n	8013b14 <LoRaMacConfirmQueueHandleCb+0x80>
    {
        mlmeConfirm->MlmeRequest = ConfirmQueueCtx.BufferStart->Request;
 8013aae:	4b1e      	ldr	r3, [pc, #120]	@ (8013b28 <LoRaMacConfirmQueueHandleCb+0x94>)
 8013ab0:	685b      	ldr	r3, [r3, #4]
 8013ab2:	781a      	ldrb	r2, [r3, #0]
 8013ab4:	687b      	ldr	r3, [r7, #4]
 8013ab6:	701a      	strb	r2, [r3, #0]
        mlmeConfirm->Status = ConfirmQueueCtx.BufferStart->Status;
 8013ab8:	4b1b      	ldr	r3, [pc, #108]	@ (8013b28 <LoRaMacConfirmQueueHandleCb+0x94>)
 8013aba:	685b      	ldr	r3, [r3, #4]
 8013abc:	785a      	ldrb	r2, [r3, #1]
 8013abe:	687b      	ldr	r3, [r7, #4]
 8013ac0:	705a      	strb	r2, [r3, #1]
        readyToHandle = ConfirmQueueCtx.BufferStart->ReadyToHandle;
 8013ac2:	4b19      	ldr	r3, [pc, #100]	@ (8013b28 <LoRaMacConfirmQueueHandleCb+0x94>)
 8013ac4:	685b      	ldr	r3, [r3, #4]
 8013ac6:	789b      	ldrb	r3, [r3, #2]
 8013ac8:	737b      	strb	r3, [r7, #13]

        if( readyToHandle == true )
 8013aca:	7b7b      	ldrb	r3, [r7, #13]
 8013acc:	2b00      	cmp	r3, #0
 8013ace:	d005      	beq.n	8013adc <LoRaMacConfirmQueueHandleCb+0x48>
        {
            ConfirmQueueCtx.Primitives->MacMlmeConfirm( mlmeConfirm );
 8013ad0:	4b15      	ldr	r3, [pc, #84]	@ (8013b28 <LoRaMacConfirmQueueHandleCb+0x94>)
 8013ad2:	681b      	ldr	r3, [r3, #0]
 8013ad4:	689b      	ldr	r3, [r3, #8]
 8013ad6:	6878      	ldr	r0, [r7, #4]
 8013ad8:	4798      	blx	r3
 8013ada:	e00b      	b.n	8013af4 <LoRaMacConfirmQueueHandleCb+0x60>
        }
        else
        {
            // The request is not processed yet. Store the state.
            mlmeConfirmToStore.Request = ConfirmQueueCtx.BufferStart->Request;
 8013adc:	4b12      	ldr	r3, [pc, #72]	@ (8013b28 <LoRaMacConfirmQueueHandleCb+0x94>)
 8013ade:	685b      	ldr	r3, [r3, #4]
 8013ae0:	781b      	ldrb	r3, [r3, #0]
 8013ae2:	723b      	strb	r3, [r7, #8]
            mlmeConfirmToStore.Status = ConfirmQueueCtx.BufferStart->Status;
 8013ae4:	4b10      	ldr	r3, [pc, #64]	@ (8013b28 <LoRaMacConfirmQueueHandleCb+0x94>)
 8013ae6:	685b      	ldr	r3, [r3, #4]
 8013ae8:	785b      	ldrb	r3, [r3, #1]
 8013aea:	727b      	strb	r3, [r7, #9]
            mlmeConfirmToStore.RestrictCommonReadyToHandle = ConfirmQueueCtx.BufferStart->RestrictCommonReadyToHandle;
 8013aec:	4b0e      	ldr	r3, [pc, #56]	@ (8013b28 <LoRaMacConfirmQueueHandleCb+0x94>)
 8013aee:	685b      	ldr	r3, [r3, #4]
 8013af0:	78db      	ldrb	r3, [r3, #3]
 8013af2:	72fb      	strb	r3, [r7, #11]
        }

        // Increase the pointer afterwards to prevent overwrites
        LoRaMacConfirmQueueRemoveFirst( );
 8013af4:	f7ff ff06 	bl	8013904 <LoRaMacConfirmQueueRemoveFirst>

        if( readyToHandle == false )
 8013af8:	7b7b      	ldrb	r3, [r7, #13]
 8013afa:	f083 0301 	eor.w	r3, r3, #1
 8013afe:	b2db      	uxtb	r3, r3
 8013b00:	2b00      	cmp	r3, #0
 8013b02:	d004      	beq.n	8013b0e <LoRaMacConfirmQueueHandleCb+0x7a>
        {
            // Add a request which has not been finished again to the queue
            LoRaMacConfirmQueueAdd( &mlmeConfirmToStore );
 8013b04:	f107 0308 	add.w	r3, r7, #8
 8013b08:	4618      	mov	r0, r3
 8013b0a:	f7ff fec1 	bl	8013890 <LoRaMacConfirmQueueAdd>
    for( uint8_t i = 0; i < nbElements; i++ )
 8013b0e:	7bfb      	ldrb	r3, [r7, #15]
 8013b10:	3301      	adds	r3, #1
 8013b12:	73fb      	strb	r3, [r7, #15]
 8013b14:	7bfa      	ldrb	r2, [r7, #15]
 8013b16:	7bbb      	ldrb	r3, [r7, #14]
 8013b18:	429a      	cmp	r2, r3
 8013b1a:	d3c8      	bcc.n	8013aae <LoRaMacConfirmQueueHandleCb+0x1a>
        }
    }
}
 8013b1c:	bf00      	nop
 8013b1e:	bf00      	nop
 8013b20:	3710      	adds	r7, #16
 8013b22:	46bd      	mov	sp, r7
 8013b24:	bd80      	pop	{r7, pc}
 8013b26:	bf00      	nop
 8013b28:	20001b9c 	.word	0x20001b9c

08013b2c <LoRaMacConfirmQueueGetCnt>:

uint8_t LoRaMacConfirmQueueGetCnt( void )
{
 8013b2c:	b480      	push	{r7}
 8013b2e:	af00      	add	r7, sp, #0
    return ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 8013b30:	4b03      	ldr	r3, [pc, #12]	@ (8013b40 <LoRaMacConfirmQueueGetCnt+0x14>)
 8013b32:	f893 3020 	ldrb.w	r3, [r3, #32]
}
 8013b36:	4618      	mov	r0, r3
 8013b38:	46bd      	mov	sp, r7
 8013b3a:	bc80      	pop	{r7}
 8013b3c:	4770      	bx	lr
 8013b3e:	bf00      	nop
 8013b40:	20001b9c 	.word	0x20001b9c

08013b44 <LoRaMacConfirmQueueIsFull>:

bool LoRaMacConfirmQueueIsFull( void )
{
 8013b44:	b580      	push	{r7, lr}
 8013b46:	af00      	add	r7, sp, #0
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8013b48:	4b06      	ldr	r3, [pc, #24]	@ (8013b64 <LoRaMacConfirmQueueIsFull+0x20>)
 8013b4a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013b4e:	4618      	mov	r0, r3
 8013b50:	f7ff fe3a 	bl	80137c8 <IsListFull>
 8013b54:	4603      	mov	r3, r0
 8013b56:	2b00      	cmp	r3, #0
 8013b58:	d001      	beq.n	8013b5e <LoRaMacConfirmQueueIsFull+0x1a>
    {
        return true;
 8013b5a:	2301      	movs	r3, #1
 8013b5c:	e000      	b.n	8013b60 <LoRaMacConfirmQueueIsFull+0x1c>
    }
    else
    {
        return false;
 8013b5e:	2300      	movs	r3, #0
    }
}
 8013b60:	4618      	mov	r0, r3
 8013b62:	bd80      	pop	{r7, pc}
 8013b64:	20001b9c 	.word	0x20001b9c

08013b68 <PayloadEncrypt>:
 * \param [in] size             - Size of data
 * \param [in,out] buffer       - Data buffer
 * \retval                      - Status of the operation
 */
static LoRaMacCryptoStatus_t PayloadEncrypt( uint8_t* buffer, int16_t size, KeyIdentifier_t keyID, uint32_t address, uint8_t dir, uint32_t frameCounter )
{
 8013b68:	b580      	push	{r7, lr}
 8013b6a:	b08e      	sub	sp, #56	@ 0x38
 8013b6c:	af00      	add	r7, sp, #0
 8013b6e:	60f8      	str	r0, [r7, #12]
 8013b70:	607b      	str	r3, [r7, #4]
 8013b72:	460b      	mov	r3, r1
 8013b74:	817b      	strh	r3, [r7, #10]
 8013b76:	4613      	mov	r3, r2
 8013b78:	727b      	strb	r3, [r7, #9]
    if( buffer == 0 )
 8013b7a:	68fb      	ldr	r3, [r7, #12]
 8013b7c:	2b00      	cmp	r3, #0
 8013b7e:	d101      	bne.n	8013b84 <PayloadEncrypt+0x1c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8013b80:	2309      	movs	r3, #9
 8013b82:	e086      	b.n	8013c92 <PayloadEncrypt+0x12a>
    }

    uint8_t bufferIndex = 0;
 8013b84:	2300      	movs	r3, #0
 8013b86:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    uint16_t ctr = 1;
 8013b8a:	2301      	movs	r3, #1
 8013b8c:	86bb      	strh	r3, [r7, #52]	@ 0x34
    uint8_t sBlock[16] = { 0 };
 8013b8e:	2300      	movs	r3, #0
 8013b90:	623b      	str	r3, [r7, #32]
 8013b92:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8013b96:	2200      	movs	r2, #0
 8013b98:	601a      	str	r2, [r3, #0]
 8013b9a:	605a      	str	r2, [r3, #4]
 8013b9c:	609a      	str	r2, [r3, #8]
    uint8_t aBlock[16] = { 0 };
 8013b9e:	2300      	movs	r3, #0
 8013ba0:	613b      	str	r3, [r7, #16]
 8013ba2:	f107 0314 	add.w	r3, r7, #20
 8013ba6:	2200      	movs	r2, #0
 8013ba8:	601a      	str	r2, [r3, #0]
 8013baa:	605a      	str	r2, [r3, #4]
 8013bac:	609a      	str	r2, [r3, #8]

    aBlock[0] = 0x01;
 8013bae:	2301      	movs	r3, #1
 8013bb0:	743b      	strb	r3, [r7, #16]

    aBlock[5] = dir;
 8013bb2:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8013bb6:	757b      	strb	r3, [r7, #21]

    aBlock[6] = address & 0xFF;
 8013bb8:	687b      	ldr	r3, [r7, #4]
 8013bba:	b2db      	uxtb	r3, r3
 8013bbc:	75bb      	strb	r3, [r7, #22]
    aBlock[7] = ( address >> 8 ) & 0xFF;
 8013bbe:	687b      	ldr	r3, [r7, #4]
 8013bc0:	0a1b      	lsrs	r3, r3, #8
 8013bc2:	b2db      	uxtb	r3, r3
 8013bc4:	75fb      	strb	r3, [r7, #23]
    aBlock[8] = ( address >> 16 ) & 0xFF;
 8013bc6:	687b      	ldr	r3, [r7, #4]
 8013bc8:	0c1b      	lsrs	r3, r3, #16
 8013bca:	b2db      	uxtb	r3, r3
 8013bcc:	763b      	strb	r3, [r7, #24]
    aBlock[9] = ( address >> 24 ) & 0xFF;
 8013bce:	687b      	ldr	r3, [r7, #4]
 8013bd0:	0e1b      	lsrs	r3, r3, #24
 8013bd2:	b2db      	uxtb	r3, r3
 8013bd4:	767b      	strb	r3, [r7, #25]

    aBlock[10] = frameCounter & 0xFF;
 8013bd6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013bd8:	b2db      	uxtb	r3, r3
 8013bda:	76bb      	strb	r3, [r7, #26]
    aBlock[11] = ( frameCounter >> 8 ) & 0xFF;
 8013bdc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013bde:	0a1b      	lsrs	r3, r3, #8
 8013be0:	b2db      	uxtb	r3, r3
 8013be2:	76fb      	strb	r3, [r7, #27]
    aBlock[12] = ( frameCounter >> 16 ) & 0xFF;
 8013be4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013be6:	0c1b      	lsrs	r3, r3, #16
 8013be8:	b2db      	uxtb	r3, r3
 8013bea:	773b      	strb	r3, [r7, #28]
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
 8013bec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013bee:	0e1b      	lsrs	r3, r3, #24
 8013bf0:	b2db      	uxtb	r3, r3
 8013bf2:	777b      	strb	r3, [r7, #29]

    while( size > 0 )
 8013bf4:	e048      	b.n	8013c88 <PayloadEncrypt+0x120>
    {
        aBlock[15] = ctr & 0xFF;
 8013bf6:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8013bf8:	b2db      	uxtb	r3, r3
 8013bfa:	77fb      	strb	r3, [r7, #31]
        ctr++;
 8013bfc:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8013bfe:	3301      	adds	r3, #1
 8013c00:	86bb      	strh	r3, [r7, #52]	@ 0x34
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 8013c02:	f107 0320 	add.w	r3, r7, #32
 8013c06:	7a7a      	ldrb	r2, [r7, #9]
 8013c08:	f107 0010 	add.w	r0, r7, #16
 8013c0c:	2110      	movs	r1, #16
 8013c0e:	f7f8 fce2 	bl	800c5d6 <SecureElementAesEncrypt>
 8013c12:	4603      	mov	r3, r0
 8013c14:	2b00      	cmp	r3, #0
 8013c16:	d001      	beq.n	8013c1c <PayloadEncrypt+0xb4>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8013c18:	230e      	movs	r3, #14
 8013c1a:	e03a      	b.n	8013c92 <PayloadEncrypt+0x12a>
        }

        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 8013c1c:	2300      	movs	r3, #0
 8013c1e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 8013c22:	e01e      	b.n	8013c62 <PayloadEncrypt+0xfa>
        {
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 8013c24:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8013c28:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8013c2c:	4413      	add	r3, r2
 8013c2e:	461a      	mov	r2, r3
 8013c30:	68fb      	ldr	r3, [r7, #12]
 8013c32:	4413      	add	r3, r2
 8013c34:	7819      	ldrb	r1, [r3, #0]
 8013c36:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8013c3a:	3338      	adds	r3, #56	@ 0x38
 8013c3c:	443b      	add	r3, r7
 8013c3e:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 8013c42:	f897 0037 	ldrb.w	r0, [r7, #55]	@ 0x37
 8013c46:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8013c4a:	4403      	add	r3, r0
 8013c4c:	4618      	mov	r0, r3
 8013c4e:	68fb      	ldr	r3, [r7, #12]
 8013c50:	4403      	add	r3, r0
 8013c52:	404a      	eors	r2, r1
 8013c54:	b2d2      	uxtb	r2, r2
 8013c56:	701a      	strb	r2, [r3, #0]
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 8013c58:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8013c5c:	3301      	adds	r3, #1
 8013c5e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 8013c62:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8013c66:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8013c6a:	2a10      	cmp	r2, #16
 8013c6c:	bfa8      	it	ge
 8013c6e:	2210      	movge	r2, #16
 8013c70:	b212      	sxth	r2, r2
 8013c72:	4293      	cmp	r3, r2
 8013c74:	dbd6      	blt.n	8013c24 <PayloadEncrypt+0xbc>
        }
        size -= 16;
 8013c76:	897b      	ldrh	r3, [r7, #10]
 8013c78:	3b10      	subs	r3, #16
 8013c7a:	b29b      	uxth	r3, r3
 8013c7c:	817b      	strh	r3, [r7, #10]
        bufferIndex += 16;
 8013c7e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8013c82:	3310      	adds	r3, #16
 8013c84:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    while( size > 0 )
 8013c88:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8013c8c:	2b00      	cmp	r3, #0
 8013c8e:	dcb2      	bgt.n	8013bf6 <PayloadEncrypt+0x8e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8013c90:	2300      	movs	r3, #0
}
 8013c92:	4618      	mov	r0, r3
 8013c94:	3738      	adds	r7, #56	@ 0x38
 8013c96:	46bd      	mov	sp, r7
 8013c98:	bd80      	pop	{r7, pc}

08013c9a <PrepareB0>:
 * \param [in] fCnt           - Frame counter
 * \param [in,out] b0         - B0 block
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t PrepareB0( uint16_t msgLen, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint8_t* b0 )
{
 8013c9a:	b490      	push	{r4, r7}
 8013c9c:	b082      	sub	sp, #8
 8013c9e:	af00      	add	r7, sp, #0
 8013ca0:	4604      	mov	r4, r0
 8013ca2:	4608      	mov	r0, r1
 8013ca4:	4611      	mov	r1, r2
 8013ca6:	461a      	mov	r2, r3
 8013ca8:	4623      	mov	r3, r4
 8013caa:	80fb      	strh	r3, [r7, #6]
 8013cac:	4603      	mov	r3, r0
 8013cae:	717b      	strb	r3, [r7, #5]
 8013cb0:	460b      	mov	r3, r1
 8013cb2:	713b      	strb	r3, [r7, #4]
 8013cb4:	4613      	mov	r3, r2
 8013cb6:	70fb      	strb	r3, [r7, #3]
    if( b0 == 0 )
 8013cb8:	69bb      	ldr	r3, [r7, #24]
 8013cba:	2b00      	cmp	r3, #0
 8013cbc:	d101      	bne.n	8013cc2 <PrepareB0+0x28>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8013cbe:	2309      	movs	r3, #9
 8013cc0:	e04e      	b.n	8013d60 <PrepareB0+0xc6>
    }

    b0[0] = 0x49;
 8013cc2:	69bb      	ldr	r3, [r7, #24]
 8013cc4:	2249      	movs	r2, #73	@ 0x49
 8013cc6:	701a      	strb	r2, [r3, #0]
    }
    else
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */
    /* ST_WORAROUND_END */
    {
        b0[1] = 0x00;
 8013cc8:	69bb      	ldr	r3, [r7, #24]
 8013cca:	3301      	adds	r3, #1
 8013ccc:	2200      	movs	r2, #0
 8013cce:	701a      	strb	r2, [r3, #0]
        b0[2] = 0x00;
 8013cd0:	69bb      	ldr	r3, [r7, #24]
 8013cd2:	3302      	adds	r3, #2
 8013cd4:	2200      	movs	r2, #0
 8013cd6:	701a      	strb	r2, [r3, #0]
    }

    b0[3] = 0x00;
 8013cd8:	69bb      	ldr	r3, [r7, #24]
 8013cda:	3303      	adds	r3, #3
 8013cdc:	2200      	movs	r2, #0
 8013cde:	701a      	strb	r2, [r3, #0]
    b0[4] = 0x00;
 8013ce0:	69bb      	ldr	r3, [r7, #24]
 8013ce2:	3304      	adds	r3, #4
 8013ce4:	2200      	movs	r2, #0
 8013ce6:	701a      	strb	r2, [r3, #0]

    b0[5] = dir;
 8013ce8:	69bb      	ldr	r3, [r7, #24]
 8013cea:	3305      	adds	r3, #5
 8013cec:	78fa      	ldrb	r2, [r7, #3]
 8013cee:	701a      	strb	r2, [r3, #0]

    b0[6] = devAddr & 0xFF;
 8013cf0:	69bb      	ldr	r3, [r7, #24]
 8013cf2:	3306      	adds	r3, #6
 8013cf4:	693a      	ldr	r2, [r7, #16]
 8013cf6:	b2d2      	uxtb	r2, r2
 8013cf8:	701a      	strb	r2, [r3, #0]
    b0[7] = ( devAddr >> 8 ) & 0xFF;
 8013cfa:	693b      	ldr	r3, [r7, #16]
 8013cfc:	0a1a      	lsrs	r2, r3, #8
 8013cfe:	69bb      	ldr	r3, [r7, #24]
 8013d00:	3307      	adds	r3, #7
 8013d02:	b2d2      	uxtb	r2, r2
 8013d04:	701a      	strb	r2, [r3, #0]
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 8013d06:	693b      	ldr	r3, [r7, #16]
 8013d08:	0c1a      	lsrs	r2, r3, #16
 8013d0a:	69bb      	ldr	r3, [r7, #24]
 8013d0c:	3308      	adds	r3, #8
 8013d0e:	b2d2      	uxtb	r2, r2
 8013d10:	701a      	strb	r2, [r3, #0]
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 8013d12:	693b      	ldr	r3, [r7, #16]
 8013d14:	0e1a      	lsrs	r2, r3, #24
 8013d16:	69bb      	ldr	r3, [r7, #24]
 8013d18:	3309      	adds	r3, #9
 8013d1a:	b2d2      	uxtb	r2, r2
 8013d1c:	701a      	strb	r2, [r3, #0]

    b0[10] = fCnt & 0xFF;
 8013d1e:	69bb      	ldr	r3, [r7, #24]
 8013d20:	330a      	adds	r3, #10
 8013d22:	697a      	ldr	r2, [r7, #20]
 8013d24:	b2d2      	uxtb	r2, r2
 8013d26:	701a      	strb	r2, [r3, #0]
    b0[11] = ( fCnt >> 8 ) & 0xFF;
 8013d28:	697b      	ldr	r3, [r7, #20]
 8013d2a:	0a1a      	lsrs	r2, r3, #8
 8013d2c:	69bb      	ldr	r3, [r7, #24]
 8013d2e:	330b      	adds	r3, #11
 8013d30:	b2d2      	uxtb	r2, r2
 8013d32:	701a      	strb	r2, [r3, #0]
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 8013d34:	697b      	ldr	r3, [r7, #20]
 8013d36:	0c1a      	lsrs	r2, r3, #16
 8013d38:	69bb      	ldr	r3, [r7, #24]
 8013d3a:	330c      	adds	r3, #12
 8013d3c:	b2d2      	uxtb	r2, r2
 8013d3e:	701a      	strb	r2, [r3, #0]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 8013d40:	697b      	ldr	r3, [r7, #20]
 8013d42:	0e1a      	lsrs	r2, r3, #24
 8013d44:	69bb      	ldr	r3, [r7, #24]
 8013d46:	330d      	adds	r3, #13
 8013d48:	b2d2      	uxtb	r2, r2
 8013d4a:	701a      	strb	r2, [r3, #0]

    b0[14] = 0x00;
 8013d4c:	69bb      	ldr	r3, [r7, #24]
 8013d4e:	330e      	adds	r3, #14
 8013d50:	2200      	movs	r2, #0
 8013d52:	701a      	strb	r2, [r3, #0]

    b0[15] = msgLen & 0xFF;
 8013d54:	69bb      	ldr	r3, [r7, #24]
 8013d56:	330f      	adds	r3, #15
 8013d58:	88fa      	ldrh	r2, [r7, #6]
 8013d5a:	b2d2      	uxtb	r2, r2
 8013d5c:	701a      	strb	r2, [r3, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 8013d5e:	2300      	movs	r3, #0
}
 8013d60:	4618      	mov	r0, r3
 8013d62:	3708      	adds	r7, #8
 8013d64:	46bd      	mov	sp, r7
 8013d66:	bc90      	pop	{r4, r7}
 8013d68:	4770      	bx	lr

08013d6a <ComputeCmacB0>:
 * \param [in] fCnt           - Frame counter
 * \param [out] cmac          - Computed cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t ComputeCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t* cmac )
{
 8013d6a:	b590      	push	{r4, r7, lr}
 8013d6c:	b08b      	sub	sp, #44	@ 0x2c
 8013d6e:	af04      	add	r7, sp, #16
 8013d70:	6078      	str	r0, [r7, #4]
 8013d72:	4608      	mov	r0, r1
 8013d74:	4611      	mov	r1, r2
 8013d76:	461a      	mov	r2, r3
 8013d78:	4603      	mov	r3, r0
 8013d7a:	807b      	strh	r3, [r7, #2]
 8013d7c:	460b      	mov	r3, r1
 8013d7e:	707b      	strb	r3, [r7, #1]
 8013d80:	4613      	mov	r3, r2
 8013d82:	703b      	strb	r3, [r7, #0]
    if( ( msg == 0 ) || ( cmac == 0 ) )
 8013d84:	687b      	ldr	r3, [r7, #4]
 8013d86:	2b00      	cmp	r3, #0
 8013d88:	d002      	beq.n	8013d90 <ComputeCmacB0+0x26>
 8013d8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013d8c:	2b00      	cmp	r3, #0
 8013d8e:	d101      	bne.n	8013d94 <ComputeCmacB0+0x2a>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8013d90:	2309      	movs	r3, #9
 8013d92:	e024      	b.n	8013dde <ComputeCmacB0+0x74>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 8013d94:	887b      	ldrh	r3, [r7, #2]
 8013d96:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8013d9a:	d901      	bls.n	8013da0 <ComputeCmacB0+0x36>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 8013d9c:	230d      	movs	r3, #13
 8013d9e:	e01e      	b.n	8013dde <ComputeCmacB0+0x74>
    }

    uint8_t micBuff[MIC_BLOCK_BX_SIZE];

    // Initialize the first Block
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 8013da0:	f897 4028 	ldrb.w	r4, [r7, #40]	@ 0x28
 8013da4:	783a      	ldrb	r2, [r7, #0]
 8013da6:	7879      	ldrb	r1, [r7, #1]
 8013da8:	8878      	ldrh	r0, [r7, #2]
 8013daa:	f107 0308 	add.w	r3, r7, #8
 8013dae:	9302      	str	r3, [sp, #8]
 8013db0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013db2:	9301      	str	r3, [sp, #4]
 8013db4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013db6:	9300      	str	r3, [sp, #0]
 8013db8:	4623      	mov	r3, r4
 8013dba:	f7ff ff6e 	bl	8013c9a <PrepareB0>

    if( SecureElementComputeAesCmac( micBuff, msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
 8013dbe:	7879      	ldrb	r1, [r7, #1]
 8013dc0:	887a      	ldrh	r2, [r7, #2]
 8013dc2:	f107 0008 	add.w	r0, r7, #8
 8013dc6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013dc8:	9300      	str	r3, [sp, #0]
 8013dca:	460b      	mov	r3, r1
 8013dcc:	6879      	ldr	r1, [r7, #4]
 8013dce:	f7f8 fbb5 	bl	800c53c <SecureElementComputeAesCmac>
 8013dd2:	4603      	mov	r3, r0
 8013dd4:	2b00      	cmp	r3, #0
 8013dd6:	d001      	beq.n	8013ddc <ComputeCmacB0+0x72>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8013dd8:	230e      	movs	r3, #14
 8013dda:	e000      	b.n	8013dde <ComputeCmacB0+0x74>
    }
    return LORAMAC_CRYPTO_SUCCESS;
 8013ddc:	2300      	movs	r3, #0
}
 8013dde:	4618      	mov	r0, r3
 8013de0:	371c      	adds	r7, #28
 8013de2:	46bd      	mov	sp, r7
 8013de4:	bd90      	pop	{r4, r7, pc}

08013de6 <VerifyCmacB0>:
 * \param [in] fCnt           - Frame counter
 * \param [in] expectedCmac   - Expected cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t VerifyCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t expectedCmac )
{
 8013de6:	b590      	push	{r4, r7, lr}
 8013de8:	b0cd      	sub	sp, #308	@ 0x134
 8013dea:	af04      	add	r7, sp, #16
 8013dec:	f507 7490 	add.w	r4, r7, #288	@ 0x120
 8013df0:	f5a4 748e 	sub.w	r4, r4, #284	@ 0x11c
 8013df4:	6020      	str	r0, [r4, #0]
 8013df6:	460c      	mov	r4, r1
 8013df8:	4610      	mov	r0, r2
 8013dfa:	4619      	mov	r1, r3
 8013dfc:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8013e00:	f5a3 738f 	sub.w	r3, r3, #286	@ 0x11e
 8013e04:	4622      	mov	r2, r4
 8013e06:	801a      	strh	r2, [r3, #0]
 8013e08:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8013e0c:	f2a3 131f 	subw	r3, r3, #287	@ 0x11f
 8013e10:	4602      	mov	r2, r0
 8013e12:	701a      	strb	r2, [r3, #0]
 8013e14:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8013e18:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8013e1c:	460a      	mov	r2, r1
 8013e1e:	701a      	strb	r2, [r3, #0]
    if( msg == 0 )
 8013e20:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8013e24:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8013e28:	681b      	ldr	r3, [r3, #0]
 8013e2a:	2b00      	cmp	r3, #0
 8013e2c:	d101      	bne.n	8013e32 <VerifyCmacB0+0x4c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8013e2e:	2309      	movs	r3, #9
 8013e30:	e063      	b.n	8013efa <VerifyCmacB0+0x114>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 8013e32:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8013e36:	f5a3 738f 	sub.w	r3, r3, #286	@ 0x11e
 8013e3a:	881b      	ldrh	r3, [r3, #0]
 8013e3c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8013e40:	d901      	bls.n	8013e46 <VerifyCmacB0+0x60>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 8013e42:	230d      	movs	r3, #13
 8013e44:	e059      	b.n	8013efa <VerifyCmacB0+0x114>
    }

    uint8_t micBuff[CRYPTO_BUFFER_SIZE];
    memset1( micBuff, 0, CRYPTO_BUFFER_SIZE );
 8013e46:	f107 030c 	add.w	r3, r7, #12
 8013e4a:	f44f 7288 	mov.w	r2, #272	@ 0x110
 8013e4e:	2100      	movs	r1, #0
 8013e50:	4618      	mov	r0, r3
 8013e52:	f003 fb2f 	bl	80174b4 <memset1>

    // Initialize the first Block
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 8013e56:	f897 4130 	ldrb.w	r4, [r7, #304]	@ 0x130
 8013e5a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8013e5e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8013e62:	781a      	ldrb	r2, [r3, #0]
 8013e64:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8013e68:	f2a3 131f 	subw	r3, r3, #287	@ 0x11f
 8013e6c:	7819      	ldrb	r1, [r3, #0]
 8013e6e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8013e72:	f5a3 738f 	sub.w	r3, r3, #286	@ 0x11e
 8013e76:	8818      	ldrh	r0, [r3, #0]
 8013e78:	f107 030c 	add.w	r3, r7, #12
 8013e7c:	9302      	str	r3, [sp, #8]
 8013e7e:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8013e82:	9301      	str	r3, [sp, #4]
 8013e84:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8013e88:	9300      	str	r3, [sp, #0]
 8013e8a:	4623      	mov	r3, r4
 8013e8c:	f7ff ff05 	bl	8013c9a <PrepareB0>

    // Copy the given data to the mic computation buffer
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
 8013e90:	f107 030c 	add.w	r3, r7, #12
 8013e94:	3310      	adds	r3, #16
 8013e96:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8013e9a:	f5a2 728f 	sub.w	r2, r2, #286	@ 0x11e
 8013e9e:	8812      	ldrh	r2, [r2, #0]
 8013ea0:	f507 7190 	add.w	r1, r7, #288	@ 0x120
 8013ea4:	f5a1 718e 	sub.w	r1, r1, #284	@ 0x11c
 8013ea8:	6809      	ldr	r1, [r1, #0]
 8013eaa:	4618      	mov	r0, r3
 8013eac:	f003 fac7 	bl	801743e <memcpy1>

    SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 8013eb0:	2306      	movs	r3, #6
 8013eb2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    retval = SecureElementVerifyAesCmac( micBuff, ( len + MIC_BLOCK_BX_SIZE ), expectedCmac, keyID );
 8013eb6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8013eba:	f5a3 738f 	sub.w	r3, r3, #286	@ 0x11e
 8013ebe:	881b      	ldrh	r3, [r3, #0]
 8013ec0:	3310      	adds	r3, #16
 8013ec2:	b299      	uxth	r1, r3
 8013ec4:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8013ec8:	f2a3 131f 	subw	r3, r3, #287	@ 0x11f
 8013ecc:	781b      	ldrb	r3, [r3, #0]
 8013ece:	f107 000c 	add.w	r0, r7, #12
 8013ed2:	f8d7 213c 	ldr.w	r2, [r7, #316]	@ 0x13c
 8013ed6:	f7f8 fb4f 	bl	800c578 <SecureElementVerifyAesCmac>
 8013eda:	4603      	mov	r3, r0
 8013edc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

    if( retval == SECURE_ELEMENT_SUCCESS )
 8013ee0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8013ee4:	2b00      	cmp	r3, #0
 8013ee6:	d101      	bne.n	8013eec <VerifyCmacB0+0x106>
    {
        return LORAMAC_CRYPTO_SUCCESS;
 8013ee8:	2300      	movs	r3, #0
 8013eea:	e006      	b.n	8013efa <VerifyCmacB0+0x114>
    }
    else if( retval == SECURE_ELEMENT_FAIL_CMAC )
 8013eec:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8013ef0:	2b01      	cmp	r3, #1
 8013ef2:	d101      	bne.n	8013ef8 <VerifyCmacB0+0x112>
    {
        return LORAMAC_CRYPTO_FAIL_MIC;
 8013ef4:	2301      	movs	r3, #1
 8013ef6:	e000      	b.n	8013efa <VerifyCmacB0+0x114>
    }

    return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8013ef8:	230e      	movs	r3, #14
}
 8013efa:	4618      	mov	r0, r3
 8013efc:	f507 7792 	add.w	r7, r7, #292	@ 0x124
 8013f00:	46bd      	mov	sp, r7
 8013f02:	bd90      	pop	{r4, r7, pc}

08013f04 <GetKeyAddrItem>:
 * \param [in] addrID         - Address identifier
 * \param [out] keyItem       - Key item reference
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t GetKeyAddrItem( AddressIdentifier_t addrID, KeyAddr_t** item )
{
 8013f04:	b480      	push	{r7}
 8013f06:	b085      	sub	sp, #20
 8013f08:	af00      	add	r7, sp, #0
 8013f0a:	4603      	mov	r3, r0
 8013f0c:	6039      	str	r1, [r7, #0]
 8013f0e:	71fb      	strb	r3, [r7, #7]
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 8013f10:	2300      	movs	r3, #0
 8013f12:	73fb      	strb	r3, [r7, #15]
 8013f14:	e011      	b.n	8013f3a <GetKeyAddrItem+0x36>
    {
        if( KeyAddrList[i].AddrID == addrID )
 8013f16:	7bfb      	ldrb	r3, [r7, #15]
 8013f18:	4a0c      	ldr	r2, [pc, #48]	@ (8013f4c <GetKeyAddrItem+0x48>)
 8013f1a:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 8013f1e:	79fa      	ldrb	r2, [r7, #7]
 8013f20:	429a      	cmp	r2, r3
 8013f22:	d107      	bne.n	8013f34 <GetKeyAddrItem+0x30>
        {
            *item = &( KeyAddrList[i] );
 8013f24:	7bfb      	ldrb	r3, [r7, #15]
 8013f26:	009b      	lsls	r3, r3, #2
 8013f28:	4a08      	ldr	r2, [pc, #32]	@ (8013f4c <GetKeyAddrItem+0x48>)
 8013f2a:	441a      	add	r2, r3
 8013f2c:	683b      	ldr	r3, [r7, #0]
 8013f2e:	601a      	str	r2, [r3, #0]
            return LORAMAC_CRYPTO_SUCCESS;
 8013f30:	2300      	movs	r3, #0
 8013f32:	e006      	b.n	8013f42 <GetKeyAddrItem+0x3e>
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 8013f34:	7bfb      	ldrb	r3, [r7, #15]
 8013f36:	3301      	adds	r3, #1
 8013f38:	73fb      	strb	r3, [r7, #15]
 8013f3a:	7bfb      	ldrb	r3, [r7, #15]
 8013f3c:	2b01      	cmp	r3, #1
 8013f3e:	d9ea      	bls.n	8013f16 <GetKeyAddrItem+0x12>
        }
    }
    return LORAMAC_CRYPTO_ERROR_INVALID_ADDR_ID;
 8013f40:	230b      	movs	r3, #11
}
 8013f42:	4618      	mov	r0, r3
 8013f44:	3714      	adds	r7, #20
 8013f46:	46bd      	mov	sp, r7
 8013f48:	bc80      	pop	{r7}
 8013f4a:	4770      	bx	lr
 8013f4c:	20000120 	.word	0x20000120

08013f50 <DeriveSessionKey10x>:
 * \param [in] netID          - Network Identifier
 * \param [in] deviceNonce    - Device nonce
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t DeriveSessionKey10x( KeyIdentifier_t keyID, uint32_t joinNonce, uint32_t netID, uint16_t devNonce )
{
 8013f50:	b580      	push	{r7, lr}
 8013f52:	b088      	sub	sp, #32
 8013f54:	af00      	add	r7, sp, #0
 8013f56:	60b9      	str	r1, [r7, #8]
 8013f58:	607a      	str	r2, [r7, #4]
 8013f5a:	461a      	mov	r2, r3
 8013f5c:	4603      	mov	r3, r0
 8013f5e:	73fb      	strb	r3, [r7, #15]
 8013f60:	4613      	mov	r3, r2
 8013f62:	81bb      	strh	r3, [r7, #12]
    uint8_t compBase[16] = { 0 };
 8013f64:	2300      	movs	r3, #0
 8013f66:	613b      	str	r3, [r7, #16]
 8013f68:	f107 0314 	add.w	r3, r7, #20
 8013f6c:	2200      	movs	r2, #0
 8013f6e:	601a      	str	r2, [r3, #0]
 8013f70:	605a      	str	r2, [r3, #4]
 8013f72:	609a      	str	r2, [r3, #8]

    /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
    switch( keyID )
 8013f74:	7bfb      	ldrb	r3, [r7, #15]
 8013f76:	2b02      	cmp	r3, #2
 8013f78:	d002      	beq.n	8013f80 <DeriveSessionKey10x+0x30>
 8013f7a:	2b03      	cmp	r3, #3
 8013f7c:	d003      	beq.n	8013f86 <DeriveSessionKey10x+0x36>
 8013f7e:	e005      	b.n	8013f8c <DeriveSessionKey10x+0x3c>
        case S_NWK_S_INT_KEY:
        case NWK_S_ENC_KEY:
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        case NWK_S_KEY:
#endif /* USE_LRWAN_1_1_X_CRYPTO */
            compBase[0] = 0x01;
 8013f80:	2301      	movs	r3, #1
 8013f82:	743b      	strb	r3, [r7, #16]
            break;
 8013f84:	e004      	b.n	8013f90 <DeriveSessionKey10x+0x40>
        case APP_S_KEY:
            compBase[0] = 0x02;
 8013f86:	2302      	movs	r3, #2
 8013f88:	743b      	strb	r3, [r7, #16]
            break;
 8013f8a:	e001      	b.n	8013f90 <DeriveSessionKey10x+0x40>
        default:
            return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 8013f8c:	230a      	movs	r3, #10
 8013f8e:	e02a      	b.n	8013fe6 <DeriveSessionKey10x+0x96>
    }
   /* ST_WORKAROUND_END */

    compBase[1] = ( uint8_t )( ( joinNonce >> 0 ) & 0xFF );
 8013f90:	68bb      	ldr	r3, [r7, #8]
 8013f92:	b2db      	uxtb	r3, r3
 8013f94:	747b      	strb	r3, [r7, #17]
    compBase[2] = ( uint8_t )( ( joinNonce >> 8 ) & 0xFF );
 8013f96:	68bb      	ldr	r3, [r7, #8]
 8013f98:	0a1b      	lsrs	r3, r3, #8
 8013f9a:	b2db      	uxtb	r3, r3
 8013f9c:	74bb      	strb	r3, [r7, #18]
    compBase[3] = ( uint8_t )( ( joinNonce >> 16 ) & 0xFF );
 8013f9e:	68bb      	ldr	r3, [r7, #8]
 8013fa0:	0c1b      	lsrs	r3, r3, #16
 8013fa2:	b2db      	uxtb	r3, r3
 8013fa4:	74fb      	strb	r3, [r7, #19]

    compBase[4] = ( uint8_t )( ( netID >> 0 ) & 0xFF );
 8013fa6:	687b      	ldr	r3, [r7, #4]
 8013fa8:	b2db      	uxtb	r3, r3
 8013faa:	753b      	strb	r3, [r7, #20]
    compBase[5] = ( uint8_t )( ( netID >> 8 ) & 0xFF );
 8013fac:	687b      	ldr	r3, [r7, #4]
 8013fae:	0a1b      	lsrs	r3, r3, #8
 8013fb0:	b2db      	uxtb	r3, r3
 8013fb2:	757b      	strb	r3, [r7, #21]
    compBase[6] = ( uint8_t )( ( netID >> 16 ) & 0xFF );
 8013fb4:	687b      	ldr	r3, [r7, #4]
 8013fb6:	0c1b      	lsrs	r3, r3, #16
 8013fb8:	b2db      	uxtb	r3, r3
 8013fba:	75bb      	strb	r3, [r7, #22]

    compBase[7] = ( uint8_t )( ( devNonce >> 0 ) & 0xFF );
 8013fbc:	89bb      	ldrh	r3, [r7, #12]
 8013fbe:	b2db      	uxtb	r3, r3
 8013fc0:	75fb      	strb	r3, [r7, #23]
    compBase[8] = ( uint8_t )( ( devNonce >> 8 ) & 0xFF );
 8013fc2:	89bb      	ldrh	r3, [r7, #12]
 8013fc4:	0a1b      	lsrs	r3, r3, #8
 8013fc6:	b29b      	uxth	r3, r3
 8013fc8:	b2db      	uxtb	r3, r3
 8013fca:	763b      	strb	r3, [r7, #24]

    if( SecureElementDeriveAndStoreKey( compBase, NWK_KEY, keyID ) != SECURE_ELEMENT_SUCCESS )
 8013fcc:	7bfa      	ldrb	r2, [r7, #15]
 8013fce:	f107 0310 	add.w	r3, r7, #16
 8013fd2:	2101      	movs	r1, #1
 8013fd4:	4618      	mov	r0, r3
 8013fd6:	f7f8 fb65 	bl	800c6a4 <SecureElementDeriveAndStoreKey>
 8013fda:	4603      	mov	r3, r0
 8013fdc:	2b00      	cmp	r3, #0
 8013fde:	d001      	beq.n	8013fe4 <DeriveSessionKey10x+0x94>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8013fe0:	230e      	movs	r3, #14
 8013fe2:	e000      	b.n	8013fe6 <DeriveSessionKey10x+0x96>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8013fe4:	2300      	movs	r3, #0
}
 8013fe6:	4618      	mov	r0, r3
 8013fe8:	3720      	adds	r7, #32
 8013fea:	46bd      	mov	sp, r7
 8013fec:	bd80      	pop	{r7, pc}
	...

08013ff0 <GetLastFcntDown>:
 * \param [in]    lastDown     - Last downlink counter value
 *
 * \retval                     - Status of the operation
 */
static LoRaMacCryptoStatus_t GetLastFcntDown( FCntIdentifier_t fCntID, uint32_t* lastDown )
{
 8013ff0:	b480      	push	{r7}
 8013ff2:	b083      	sub	sp, #12
 8013ff4:	af00      	add	r7, sp, #0
 8013ff6:	4603      	mov	r3, r0
 8013ff8:	6039      	str	r1, [r7, #0]
 8013ffa:	71fb      	strb	r3, [r7, #7]
    if( lastDown == NULL )
 8013ffc:	683b      	ldr	r3, [r7, #0]
 8013ffe:	2b00      	cmp	r3, #0
 8014000:	d101      	bne.n	8014006 <GetLastFcntDown+0x16>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8014002:	2309      	movs	r3, #9
 8014004:	e03b      	b.n	801407e <GetLastFcntDown+0x8e>
    }
    switch( fCntID )
 8014006:	79fb      	ldrb	r3, [r7, #7]
 8014008:	3b01      	subs	r3, #1
 801400a:	2b03      	cmp	r3, #3
 801400c:	d834      	bhi.n	8014078 <GetLastFcntDown+0x88>
 801400e:	a201      	add	r2, pc, #4	@ (adr r2, 8014014 <GetLastFcntDown+0x24>)
 8014010:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014014:	08014025 	.word	0x08014025
 8014018:	0801403d 	.word	0x0801403d
 801401c:	08014055 	.word	0x08014055
 8014020:	0801406d 	.word	0x0801406d
    {
        case N_FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.NFCntDown;
 8014024:	4b18      	ldr	r3, [pc, #96]	@ (8014088 <GetLastFcntDown+0x98>)
 8014026:	681b      	ldr	r3, [r3, #0]
 8014028:	691a      	ldr	r2, [r3, #16]
 801402a:	683b      	ldr	r3, [r7, #0]
 801402c:	601a      	str	r2, [r3, #0]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.NFCntDown;
 801402e:	4b16      	ldr	r3, [pc, #88]	@ (8014088 <GetLastFcntDown+0x98>)
 8014030:	681a      	ldr	r2, [r3, #0]
 8014032:	4b15      	ldr	r3, [pc, #84]	@ (8014088 <GetLastFcntDown+0x98>)
 8014034:	681b      	ldr	r3, [r3, #0]
 8014036:	6912      	ldr	r2, [r2, #16]
 8014038:	621a      	str	r2, [r3, #32]
            break;
 801403a:	e01f      	b.n	801407c <GetLastFcntDown+0x8c>
        case A_FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.AFCntDown;
 801403c:	4b12      	ldr	r3, [pc, #72]	@ (8014088 <GetLastFcntDown+0x98>)
 801403e:	681b      	ldr	r3, [r3, #0]
 8014040:	695a      	ldr	r2, [r3, #20]
 8014042:	683b      	ldr	r3, [r7, #0]
 8014044:	601a      	str	r2, [r3, #0]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.AFCntDown;
 8014046:	4b10      	ldr	r3, [pc, #64]	@ (8014088 <GetLastFcntDown+0x98>)
 8014048:	681a      	ldr	r2, [r3, #0]
 801404a:	4b0f      	ldr	r3, [pc, #60]	@ (8014088 <GetLastFcntDown+0x98>)
 801404c:	681b      	ldr	r3, [r3, #0]
 801404e:	6952      	ldr	r2, [r2, #20]
 8014050:	621a      	str	r2, [r3, #32]
            break;
 8014052:	e013      	b.n	801407c <GetLastFcntDown+0x8c>
        case FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.FCntDown;
 8014054:	4b0c      	ldr	r3, [pc, #48]	@ (8014088 <GetLastFcntDown+0x98>)
 8014056:	681b      	ldr	r3, [r3, #0]
 8014058:	699a      	ldr	r2, [r3, #24]
 801405a:	683b      	ldr	r3, [r7, #0]
 801405c:	601a      	str	r2, [r3, #0]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.FCntDown;
 801405e:	4b0a      	ldr	r3, [pc, #40]	@ (8014088 <GetLastFcntDown+0x98>)
 8014060:	681a      	ldr	r2, [r3, #0]
 8014062:	4b09      	ldr	r3, [pc, #36]	@ (8014088 <GetLastFcntDown+0x98>)
 8014064:	681b      	ldr	r3, [r3, #0]
 8014066:	6992      	ldr	r2, [r2, #24]
 8014068:	621a      	str	r2, [r3, #32]
            break;
 801406a:	e007      	b.n	801407c <GetLastFcntDown+0x8c>
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MC_FCNT_DOWN_0:
            *lastDown = CryptoNvm->FCntList.McFCntDown[0];
 801406c:	4b06      	ldr	r3, [pc, #24]	@ (8014088 <GetLastFcntDown+0x98>)
 801406e:	681b      	ldr	r3, [r3, #0]
 8014070:	69da      	ldr	r2, [r3, #28]
 8014072:	683b      	ldr	r3, [r7, #0]
 8014074:	601a      	str	r2, [r3, #0]
            break;
 8014076:	e001      	b.n	801407c <GetLastFcntDown+0x8c>
        case MC_FCNT_DOWN_3:
            *lastDown = CryptoNvm->FCntList.McFCntDown[3];
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
 8014078:	2305      	movs	r3, #5
 801407a:	e000      	b.n	801407e <GetLastFcntDown+0x8e>
    }
    return LORAMAC_CRYPTO_SUCCESS;
 801407c:	2300      	movs	r3, #0
}
 801407e:	4618      	mov	r0, r3
 8014080:	370c      	adds	r7, #12
 8014082:	46bd      	mov	sp, r7
 8014084:	bc80      	pop	{r7}
 8014086:	4770      	bx	lr
 8014088:	20001bc0 	.word	0x20001bc0

0801408c <CheckFCntDown>:
 * \param [in]    currentDown  - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static bool CheckFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 801408c:	b580      	push	{r7, lr}
 801408e:	b084      	sub	sp, #16
 8014090:	af00      	add	r7, sp, #0
 8014092:	4603      	mov	r3, r0
 8014094:	6039      	str	r1, [r7, #0]
 8014096:	71fb      	strb	r3, [r7, #7]
    uint32_t lastDown = 0;
 8014098:	2300      	movs	r3, #0
 801409a:	60fb      	str	r3, [r7, #12]
    if( GetLastFcntDown( fCntID, &lastDown ) != LORAMAC_CRYPTO_SUCCESS )
 801409c:	f107 020c 	add.w	r2, r7, #12
 80140a0:	79fb      	ldrb	r3, [r7, #7]
 80140a2:	4611      	mov	r1, r2
 80140a4:	4618      	mov	r0, r3
 80140a6:	f7ff ffa3 	bl	8013ff0 <GetLastFcntDown>
 80140aa:	4603      	mov	r3, r0
 80140ac:	2b00      	cmp	r3, #0
 80140ae:	d001      	beq.n	80140b4 <CheckFCntDown+0x28>
    {
        return false;
 80140b0:	2300      	movs	r3, #0
 80140b2:	e00a      	b.n	80140ca <CheckFCntDown+0x3e>
    }
    if( ( currentDown > lastDown ) ||
 80140b4:	68fb      	ldr	r3, [r7, #12]
 80140b6:	683a      	ldr	r2, [r7, #0]
 80140b8:	429a      	cmp	r2, r3
 80140ba:	d803      	bhi.n	80140c4 <CheckFCntDown+0x38>
        // For LoRaWAN 1.0.X only. Allow downlink frames of 0
        ( lastDown == FCNT_DOWN_INITAL_VALUE ) )
 80140bc:	68fb      	ldr	r3, [r7, #12]
    if( ( currentDown > lastDown ) ||
 80140be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80140c2:	d101      	bne.n	80140c8 <CheckFCntDown+0x3c>
    {
        return true;
 80140c4:	2301      	movs	r3, #1
 80140c6:	e000      	b.n	80140ca <CheckFCntDown+0x3e>
    }
    else
    {
        return false;
 80140c8:	2300      	movs	r3, #0
    }
}
 80140ca:	4618      	mov	r0, r3
 80140cc:	3710      	adds	r7, #16
 80140ce:	46bd      	mov	sp, r7
 80140d0:	bd80      	pop	{r7, pc}
	...

080140d4 <UpdateFCntDown>:
 * \param [in]    currentDown   - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static void UpdateFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 80140d4:	b480      	push	{r7}
 80140d6:	b083      	sub	sp, #12
 80140d8:	af00      	add	r7, sp, #0
 80140da:	4603      	mov	r3, r0
 80140dc:	6039      	str	r1, [r7, #0]
 80140de:	71fb      	strb	r3, [r7, #7]
    switch( fCntID )
 80140e0:	79fb      	ldrb	r3, [r7, #7]
 80140e2:	3b01      	subs	r3, #1
 80140e4:	2b03      	cmp	r3, #3
 80140e6:	d81f      	bhi.n	8014128 <UpdateFCntDown+0x54>
 80140e8:	a201      	add	r2, pc, #4	@ (adr r2, 80140f0 <UpdateFCntDown+0x1c>)
 80140ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80140ee:	bf00      	nop
 80140f0:	08014101 	.word	0x08014101
 80140f4:	0801410b 	.word	0x0801410b
 80140f8:	08014115 	.word	0x08014115
 80140fc:	0801411f 	.word	0x0801411f
    {
        case N_FCNT_DOWN:
            CryptoNvm->FCntList.NFCntDown = currentDown;
 8014100:	4b0c      	ldr	r3, [pc, #48]	@ (8014134 <UpdateFCntDown+0x60>)
 8014102:	681b      	ldr	r3, [r3, #0]
 8014104:	683a      	ldr	r2, [r7, #0]
 8014106:	611a      	str	r2, [r3, #16]
            break;
 8014108:	e00f      	b.n	801412a <UpdateFCntDown+0x56>
        case A_FCNT_DOWN:
            CryptoNvm->FCntList.AFCntDown = currentDown;
 801410a:	4b0a      	ldr	r3, [pc, #40]	@ (8014134 <UpdateFCntDown+0x60>)
 801410c:	681b      	ldr	r3, [r3, #0]
 801410e:	683a      	ldr	r2, [r7, #0]
 8014110:	615a      	str	r2, [r3, #20]
            break;
 8014112:	e00a      	b.n	801412a <UpdateFCntDown+0x56>
        case FCNT_DOWN:
            CryptoNvm->FCntList.FCntDown = currentDown;
 8014114:	4b07      	ldr	r3, [pc, #28]	@ (8014134 <UpdateFCntDown+0x60>)
 8014116:	681b      	ldr	r3, [r3, #0]
 8014118:	683a      	ldr	r2, [r7, #0]
 801411a:	619a      	str	r2, [r3, #24]
            break;
 801411c:	e005      	b.n	801412a <UpdateFCntDown+0x56>
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MC_FCNT_DOWN_0:
            CryptoNvm->FCntList.McFCntDown[0] = currentDown;
 801411e:	4b05      	ldr	r3, [pc, #20]	@ (8014134 <UpdateFCntDown+0x60>)
 8014120:	681b      	ldr	r3, [r3, #0]
 8014122:	683a      	ldr	r2, [r7, #0]
 8014124:	61da      	str	r2, [r3, #28]
            break;
 8014126:	e000      	b.n	801412a <UpdateFCntDown+0x56>
        case MC_FCNT_DOWN_3:
            CryptoNvm->FCntList.McFCntDown[3] = currentDown;
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            break;
 8014128:	bf00      	nop
    }
}
 801412a:	bf00      	nop
 801412c:	370c      	adds	r7, #12
 801412e:	46bd      	mov	sp, r7
 8014130:	bc80      	pop	{r7}
 8014132:	4770      	bx	lr
 8014134:	20001bc0 	.word	0x20001bc0

08014138 <ResetFCnts>:

/*!
 * Resets the frame counters
 */
static void ResetFCnts( void )
{
 8014138:	b480      	push	{r7}
 801413a:	b083      	sub	sp, #12
 801413c:	af00      	add	r7, sp, #0
    CryptoNvm->FCntList.FCntUp = 0;
 801413e:	4b18      	ldr	r3, [pc, #96]	@ (80141a0 <ResetFCnts+0x68>)
 8014140:	681b      	ldr	r3, [r3, #0]
 8014142:	2200      	movs	r2, #0
 8014144:	60da      	str	r2, [r3, #12]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 8014146:	4b16      	ldr	r3, [pc, #88]	@ (80141a0 <ResetFCnts+0x68>)
 8014148:	681b      	ldr	r3, [r3, #0]
 801414a:	f04f 32ff 	mov.w	r2, #4294967295
 801414e:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITAL_VALUE;
 8014150:	4b13      	ldr	r3, [pc, #76]	@ (80141a0 <ResetFCnts+0x68>)
 8014152:	681b      	ldr	r3, [r3, #0]
 8014154:	f04f 32ff 	mov.w	r2, #4294967295
 8014158:	615a      	str	r2, [r3, #20]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 801415a:	4b11      	ldr	r3, [pc, #68]	@ (80141a0 <ResetFCnts+0x68>)
 801415c:	681b      	ldr	r3, [r3, #0]
 801415e:	f04f 32ff 	mov.w	r2, #4294967295
 8014162:	619a      	str	r2, [r3, #24]
    CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.FCntDown;
 8014164:	4b0e      	ldr	r3, [pc, #56]	@ (80141a0 <ResetFCnts+0x68>)
 8014166:	681a      	ldr	r2, [r3, #0]
 8014168:	4b0d      	ldr	r3, [pc, #52]	@ (80141a0 <ResetFCnts+0x68>)
 801416a:	681b      	ldr	r3, [r3, #0]
 801416c:	6992      	ldr	r2, [r2, #24]
 801416e:	621a      	str	r2, [r3, #32]

    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8014170:	2300      	movs	r3, #0
 8014172:	607b      	str	r3, [r7, #4]
 8014174:	e00b      	b.n	801418e <ResetFCnts+0x56>
    {
        CryptoNvm->FCntList.McFCntDown[i] = FCNT_DOWN_INITAL_VALUE;
 8014176:	4b0a      	ldr	r3, [pc, #40]	@ (80141a0 <ResetFCnts+0x68>)
 8014178:	681a      	ldr	r2, [r3, #0]
 801417a:	687b      	ldr	r3, [r7, #4]
 801417c:	3306      	adds	r3, #6
 801417e:	009b      	lsls	r3, r3, #2
 8014180:	4413      	add	r3, r2
 8014182:	f04f 32ff 	mov.w	r2, #4294967295
 8014186:	605a      	str	r2, [r3, #4]
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8014188:	687b      	ldr	r3, [r7, #4]
 801418a:	3301      	adds	r3, #1
 801418c:	607b      	str	r3, [r7, #4]
 801418e:	687b      	ldr	r3, [r7, #4]
 8014190:	2b00      	cmp	r3, #0
 8014192:	ddf0      	ble.n	8014176 <ResetFCnts+0x3e>
    }
}
 8014194:	bf00      	nop
 8014196:	bf00      	nop
 8014198:	370c      	adds	r7, #12
 801419a:	46bd      	mov	sp, r7
 801419c:	bc80      	pop	{r7}
 801419e:	4770      	bx	lr
 80141a0:	20001bc0 	.word	0x20001bc0

080141a4 <LoRaMacCryptoInit>:

/*
 *  API functions
 */
LoRaMacCryptoStatus_t LoRaMacCryptoInit( LoRaMacCryptoNvmData_t* nvm )
{
 80141a4:	b580      	push	{r7, lr}
 80141a6:	b082      	sub	sp, #8
 80141a8:	af00      	add	r7, sp, #0
 80141aa:	6078      	str	r0, [r7, #4]
    if( nvm == NULL )
 80141ac:	687b      	ldr	r3, [r7, #4]
 80141ae:	2b00      	cmp	r3, #0
 80141b0:	d101      	bne.n	80141b6 <LoRaMacCryptoInit+0x12>
    {
        return LORAMAC_CRYPTO_FAIL_PARAM;
 80141b2:	2308      	movs	r3, #8
 80141b4:	e01c      	b.n	80141f0 <LoRaMacCryptoInit+0x4c>
    }

    // Assign non volatile context
    CryptoNvm = nvm;
 80141b6:	4a10      	ldr	r2, [pc, #64]	@ (80141f8 <LoRaMacCryptoInit+0x54>)
 80141b8:	687b      	ldr	r3, [r7, #4]
 80141ba:	6013      	str	r3, [r2, #0]

    // Initialize with default
    memset1( ( uint8_t* )CryptoNvm, 0, sizeof( LoRaMacCryptoNvmData_t ) );
 80141bc:	4b0e      	ldr	r3, [pc, #56]	@ (80141f8 <LoRaMacCryptoInit+0x54>)
 80141be:	681b      	ldr	r3, [r3, #0]
 80141c0:	2228      	movs	r2, #40	@ 0x28
 80141c2:	2100      	movs	r1, #0
 80141c4:	4618      	mov	r0, r3
 80141c6:	f003 f975 	bl	80174b4 <memset1>

    // Set default LoRaWAN version
    CryptoNvm->LrWanVersion.Fields.Major = 1;
 80141ca:	4b0b      	ldr	r3, [pc, #44]	@ (80141f8 <LoRaMacCryptoInit+0x54>)
 80141cc:	681b      	ldr	r3, [r3, #0]
 80141ce:	2201      	movs	r2, #1
 80141d0:	70da      	strb	r2, [r3, #3]
    CryptoNvm->LrWanVersion.Fields.Minor = 1;
 80141d2:	4b09      	ldr	r3, [pc, #36]	@ (80141f8 <LoRaMacCryptoInit+0x54>)
 80141d4:	681b      	ldr	r3, [r3, #0]
 80141d6:	2201      	movs	r2, #1
 80141d8:	709a      	strb	r2, [r3, #2]
    CryptoNvm->LrWanVersion.Fields.Patch = 1;
 80141da:	4b07      	ldr	r3, [pc, #28]	@ (80141f8 <LoRaMacCryptoInit+0x54>)
 80141dc:	681b      	ldr	r3, [r3, #0]
 80141de:	2201      	movs	r2, #1
 80141e0:	705a      	strb	r2, [r3, #1]
    CryptoNvm->LrWanVersion.Fields.Revision = 0;
 80141e2:	4b05      	ldr	r3, [pc, #20]	@ (80141f8 <LoRaMacCryptoInit+0x54>)
 80141e4:	681b      	ldr	r3, [r3, #0]
 80141e6:	2200      	movs	r2, #0
 80141e8:	701a      	strb	r2, [r3, #0]

    // Reset frame counters
    ResetFCnts( );
 80141ea:	f7ff ffa5 	bl	8014138 <ResetFCnts>

    return LORAMAC_CRYPTO_SUCCESS;
 80141ee:	2300      	movs	r3, #0
}
 80141f0:	4618      	mov	r0, r3
 80141f2:	3708      	adds	r7, #8
 80141f4:	46bd      	mov	sp, r7
 80141f6:	bd80      	pop	{r7, pc}
 80141f8:	20001bc0 	.word	0x20001bc0

080141fc <LoRaMacCryptoSetLrWanVersion>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetLrWanVersion( Version_t version )
{
 80141fc:	b480      	push	{r7}
 80141fe:	b083      	sub	sp, #12
 8014200:	af00      	add	r7, sp, #0
 8014202:	6078      	str	r0, [r7, #4]
    CryptoNvm->LrWanVersion = version;
 8014204:	4b04      	ldr	r3, [pc, #16]	@ (8014218 <LoRaMacCryptoSetLrWanVersion+0x1c>)
 8014206:	681b      	ldr	r3, [r3, #0]
 8014208:	687a      	ldr	r2, [r7, #4]
 801420a:	601a      	str	r2, [r3, #0]
    return LORAMAC_CRYPTO_SUCCESS;
 801420c:	2300      	movs	r3, #0
}
 801420e:	4618      	mov	r0, r3
 8014210:	370c      	adds	r7, #12
 8014212:	46bd      	mov	sp, r7
 8014214:	bc80      	pop	{r7}
 8014216:	4770      	bx	lr
 8014218:	20001bc0 	.word	0x20001bc0

0801421c <LoRaMacCryptoGetFCntUp>:

LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntUp( uint32_t* currentUp )
{
 801421c:	b480      	push	{r7}
 801421e:	b083      	sub	sp, #12
 8014220:	af00      	add	r7, sp, #0
 8014222:	6078      	str	r0, [r7, #4]
    if( currentUp == NULL )
 8014224:	687b      	ldr	r3, [r7, #4]
 8014226:	2b00      	cmp	r3, #0
 8014228:	d101      	bne.n	801422e <LoRaMacCryptoGetFCntUp+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 801422a:	2309      	movs	r3, #9
 801422c:	e006      	b.n	801423c <LoRaMacCryptoGetFCntUp+0x20>
    }

    *currentUp = CryptoNvm->FCntList.FCntUp + 1;
 801422e:	4b06      	ldr	r3, [pc, #24]	@ (8014248 <LoRaMacCryptoGetFCntUp+0x2c>)
 8014230:	681b      	ldr	r3, [r3, #0]
 8014232:	68db      	ldr	r3, [r3, #12]
 8014234:	1c5a      	adds	r2, r3, #1
 8014236:	687b      	ldr	r3, [r7, #4]
 8014238:	601a      	str	r2, [r3, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 801423a:	2300      	movs	r3, #0
}
 801423c:	4618      	mov	r0, r3
 801423e:	370c      	adds	r7, #12
 8014240:	46bd      	mov	sp, r7
 8014242:	bc80      	pop	{r7}
 8014244:	4770      	bx	lr
 8014246:	bf00      	nop
 8014248:	20001bc0 	.word	0x20001bc0

0801424c <LoRaMacCryptoGetFCntDown>:

    return LORAMAC_CRYPTO_SUCCESS;
}
#elif (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntDown( FCntIdentifier_t fCntID, uint32_t frameFcnt, uint32_t* currentDown )
{
 801424c:	b580      	push	{r7, lr}
 801424e:	b088      	sub	sp, #32
 8014250:	af00      	add	r7, sp, #0
 8014252:	4603      	mov	r3, r0
 8014254:	60b9      	str	r1, [r7, #8]
 8014256:	607a      	str	r2, [r7, #4]
 8014258:	73fb      	strb	r3, [r7, #15]
    uint32_t lastDown = 0;
 801425a:	2300      	movs	r3, #0
 801425c:	617b      	str	r3, [r7, #20]
    int32_t fCntDiff = 0;
 801425e:	2300      	movs	r3, #0
 8014260:	61fb      	str	r3, [r7, #28]
    LoRaMacCryptoStatus_t cryptoStatus = LORAMAC_CRYPTO_ERROR;
 8014262:	2312      	movs	r3, #18
 8014264:	76fb      	strb	r3, [r7, #27]

    if( currentDown == NULL )
 8014266:	687b      	ldr	r3, [r7, #4]
 8014268:	2b00      	cmp	r3, #0
 801426a:	d101      	bne.n	8014270 <LoRaMacCryptoGetFCntDown+0x24>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 801426c:	2309      	movs	r3, #9
 801426e:	e035      	b.n	80142dc <LoRaMacCryptoGetFCntDown+0x90>
    }

    cryptoStatus = GetLastFcntDown( fCntID, &lastDown );
 8014270:	f107 0214 	add.w	r2, r7, #20
 8014274:	7bfb      	ldrb	r3, [r7, #15]
 8014276:	4611      	mov	r1, r2
 8014278:	4618      	mov	r0, r3
 801427a:	f7ff feb9 	bl	8013ff0 <GetLastFcntDown>
 801427e:	4603      	mov	r3, r0
 8014280:	76fb      	strb	r3, [r7, #27]
    if( cryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 8014282:	7efb      	ldrb	r3, [r7, #27]
 8014284:	2b00      	cmp	r3, #0
 8014286:	d001      	beq.n	801428c <LoRaMacCryptoGetFCntDown+0x40>
    {
        return cryptoStatus;
 8014288:	7efb      	ldrb	r3, [r7, #27]
 801428a:	e027      	b.n	80142dc <LoRaMacCryptoGetFCntDown+0x90>
    }

    // For LoRaWAN 1.0.X only, allow downlink frames of 0
    if( lastDown == FCNT_DOWN_INITAL_VALUE )
 801428c:	697b      	ldr	r3, [r7, #20]
 801428e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014292:	d103      	bne.n	801429c <LoRaMacCryptoGetFCntDown+0x50>
    {
        *currentDown = frameFcnt;
 8014294:	687b      	ldr	r3, [r7, #4]
 8014296:	68ba      	ldr	r2, [r7, #8]
 8014298:	601a      	str	r2, [r3, #0]
 801429a:	e01e      	b.n	80142da <LoRaMacCryptoGetFCntDown+0x8e>
    }
    else
    {
        // Add difference, consider roll-over
        fCntDiff = ( int32_t )( ( int64_t )frameFcnt - ( int64_t )( lastDown & 0x0000FFFF ) );
 801429c:	697b      	ldr	r3, [r7, #20]
 801429e:	b29b      	uxth	r3, r3
 80142a0:	68ba      	ldr	r2, [r7, #8]
 80142a2:	1ad3      	subs	r3, r2, r3
 80142a4:	61fb      	str	r3, [r7, #28]

        if( fCntDiff > 0 )
 80142a6:	69fb      	ldr	r3, [r7, #28]
 80142a8:	2b00      	cmp	r3, #0
 80142aa:	dd05      	ble.n	80142b8 <LoRaMacCryptoGetFCntDown+0x6c>
        {  // Positive difference
            *currentDown = lastDown + fCntDiff;
 80142ac:	697a      	ldr	r2, [r7, #20]
 80142ae:	69fb      	ldr	r3, [r7, #28]
 80142b0:	441a      	add	r2, r3
 80142b2:	687b      	ldr	r3, [r7, #4]
 80142b4:	601a      	str	r2, [r3, #0]
 80142b6:	e010      	b.n	80142da <LoRaMacCryptoGetFCntDown+0x8e>
        }
        else if( fCntDiff == 0 )
 80142b8:	69fb      	ldr	r3, [r7, #28]
 80142ba:	2b00      	cmp	r3, #0
 80142bc:	d104      	bne.n	80142c8 <LoRaMacCryptoGetFCntDown+0x7c>
        {  // Duplicate FCnt value, keep the current value.
            *currentDown = lastDown;
 80142be:	697a      	ldr	r2, [r7, #20]
 80142c0:	687b      	ldr	r3, [r7, #4]
 80142c2:	601a      	str	r2, [r3, #0]
            return LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED;
 80142c4:	2307      	movs	r3, #7
 80142c6:	e009      	b.n	80142dc <LoRaMacCryptoGetFCntDown+0x90>
        }
        else
        {  // Negative difference, assume a roll-over of one uint16_t
            *currentDown = ( lastDown & 0xFFFF0000 ) + 0x10000 + frameFcnt;
 80142c8:	697b      	ldr	r3, [r7, #20]
 80142ca:	0c1b      	lsrs	r3, r3, #16
 80142cc:	041b      	lsls	r3, r3, #16
 80142ce:	68ba      	ldr	r2, [r7, #8]
 80142d0:	4413      	add	r3, r2
 80142d2:	f503 3280 	add.w	r2, r3, #65536	@ 0x10000
 80142d6:	687b      	ldr	r3, [r7, #4]
 80142d8:	601a      	str	r2, [r3, #0]
        }
    }

    return LORAMAC_CRYPTO_SUCCESS;
 80142da:	2300      	movs	r3, #0
}
 80142dc:	4618      	mov	r0, r3
 80142de:	3720      	adds	r7, #32
 80142e0:	46bd      	mov	sp, r7
 80142e2:	bd80      	pop	{r7, pc}

080142e4 <LoRaMacCryptoSetMulticastReference>:
    return LORAMAC_CRYPTO_SUCCESS;
}
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

LoRaMacCryptoStatus_t LoRaMacCryptoSetMulticastReference( MulticastCtx_t* multicastList )
{
 80142e4:	b480      	push	{r7}
 80142e6:	b085      	sub	sp, #20
 80142e8:	af00      	add	r7, sp, #0
 80142ea:	6078      	str	r0, [r7, #4]
    if( multicastList == NULL )
 80142ec:	687b      	ldr	r3, [r7, #4]
 80142ee:	2b00      	cmp	r3, #0
 80142f0:	d101      	bne.n	80142f6 <LoRaMacCryptoSetMulticastReference+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80142f2:	2309      	movs	r3, #9
 80142f4:	e017      	b.n	8014326 <LoRaMacCryptoSetMulticastReference+0x42>
    }

    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 80142f6:	2300      	movs	r3, #0
 80142f8:	60fb      	str	r3, [r7, #12]
 80142fa:	e010      	b.n	801431e <LoRaMacCryptoSetMulticastReference+0x3a>
    {
        multicastList[i].DownLinkCounter = &CryptoNvm->FCntList.McFCntDown[i];
 80142fc:	4b0c      	ldr	r3, [pc, #48]	@ (8014330 <LoRaMacCryptoSetMulticastReference+0x4c>)
 80142fe:	6819      	ldr	r1, [r3, #0]
 8014300:	68fb      	ldr	r3, [r7, #12]
 8014302:	222c      	movs	r2, #44	@ 0x2c
 8014304:	fb02 f303 	mul.w	r3, r2, r3
 8014308:	687a      	ldr	r2, [r7, #4]
 801430a:	4413      	add	r3, r2
 801430c:	68fa      	ldr	r2, [r7, #12]
 801430e:	3206      	adds	r2, #6
 8014310:	0092      	lsls	r2, r2, #2
 8014312:	440a      	add	r2, r1
 8014314:	3204      	adds	r2, #4
 8014316:	621a      	str	r2, [r3, #32]
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8014318:	68fb      	ldr	r3, [r7, #12]
 801431a:	3301      	adds	r3, #1
 801431c:	60fb      	str	r3, [r7, #12]
 801431e:	68fb      	ldr	r3, [r7, #12]
 8014320:	2b00      	cmp	r3, #0
 8014322:	ddeb      	ble.n	80142fc <LoRaMacCryptoSetMulticastReference+0x18>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8014324:	2300      	movs	r3, #0
}
 8014326:	4618      	mov	r0, r3
 8014328:	3714      	adds	r7, #20
 801432a:	46bd      	mov	sp, r7
 801432c:	bc80      	pop	{r7}
 801432e:	4770      	bx	lr
 8014330:	20001bc0 	.word	0x20001bc0

08014334 <LoRaMacCryptoSetKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetKey( KeyIdentifier_t keyID, uint8_t* key )
{
 8014334:	b580      	push	{r7, lr}
 8014336:	b082      	sub	sp, #8
 8014338:	af00      	add	r7, sp, #0
 801433a:	4603      	mov	r3, r0
 801433c:	6039      	str	r1, [r7, #0]
 801433e:	71fb      	strb	r3, [r7, #7]
    if( SecureElementSetKey( keyID, key ) != SECURE_ELEMENT_SUCCESS )
 8014340:	79fb      	ldrb	r3, [r7, #7]
 8014342:	6839      	ldr	r1, [r7, #0]
 8014344:	4618      	mov	r0, r3
 8014346:	f7f8 f89b 	bl	800c480 <SecureElementSetKey>
 801434a:	4603      	mov	r3, r0
 801434c:	2b00      	cmp	r3, #0
 801434e:	d001      	beq.n	8014354 <LoRaMacCryptoSetKey+0x20>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8014350:	230e      	movs	r3, #14
 8014352:	e018      	b.n	8014386 <LoRaMacCryptoSetKey+0x52>
    }
    if( keyID == APP_KEY )
 8014354:	79fb      	ldrb	r3, [r7, #7]
 8014356:	2b00      	cmp	r3, #0
 8014358:	d114      	bne.n	8014384 <LoRaMacCryptoSetKey+0x50>
    {
        // Derive lifetime keys
        if( LoRaMacCryptoDeriveMcRootKey( CryptoNvm->LrWanVersion.Fields.Minor, keyID ) != LORAMAC_CRYPTO_SUCCESS )
 801435a:	4b0d      	ldr	r3, [pc, #52]	@ (8014390 <LoRaMacCryptoSetKey+0x5c>)
 801435c:	681b      	ldr	r3, [r3, #0]
 801435e:	789b      	ldrb	r3, [r3, #2]
 8014360:	79fa      	ldrb	r2, [r7, #7]
 8014362:	4611      	mov	r1, r2
 8014364:	4618      	mov	r0, r3
 8014366:	f000 fa37 	bl	80147d8 <LoRaMacCryptoDeriveMcRootKey>
 801436a:	4603      	mov	r3, r0
 801436c:	2b00      	cmp	r3, #0
 801436e:	d001      	beq.n	8014374 <LoRaMacCryptoSetKey+0x40>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8014370:	230e      	movs	r3, #14
 8014372:	e008      	b.n	8014386 <LoRaMacCryptoSetKey+0x52>
        }
        if( LoRaMacCryptoDeriveMcKEKey( MC_ROOT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 8014374:	2004      	movs	r0, #4
 8014376:	f000 fa5a 	bl	801482e <LoRaMacCryptoDeriveMcKEKey>
 801437a:	4603      	mov	r3, r0
 801437c:	2b00      	cmp	r3, #0
 801437e:	d001      	beq.n	8014384 <LoRaMacCryptoSetKey+0x50>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8014380:	230e      	movs	r3, #14
 8014382:	e000      	b.n	8014386 <LoRaMacCryptoSetKey+0x52>
        }
    }
    return LORAMAC_CRYPTO_SUCCESS;
 8014384:	2300      	movs	r3, #0
}
 8014386:	4618      	mov	r0, r3
 8014388:	3708      	adds	r7, #8
 801438a:	46bd      	mov	sp, r7
 801438c:	bd80      	pop	{r7, pc}
 801438e:	bf00      	nop
 8014390:	20001bc0 	.word	0x20001bc0

08014394 <LoRaMacCryptoPrepareJoinRequest>:

LoRaMacCryptoStatus_t LoRaMacCryptoPrepareJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 8014394:	b580      	push	{r7, lr}
 8014396:	b086      	sub	sp, #24
 8014398:	af02      	add	r7, sp, #8
 801439a:	6078      	str	r0, [r7, #4]
    if( macMsg == 0 )
 801439c:	687b      	ldr	r3, [r7, #4]
 801439e:	2b00      	cmp	r3, #0
 80143a0:	d101      	bne.n	80143a6 <LoRaMacCryptoPrepareJoinRequest+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80143a2:	2309      	movs	r3, #9
 80143a4:	e02d      	b.n	8014402 <LoRaMacCryptoPrepareJoinRequest+0x6e>
    }
    KeyIdentifier_t micComputationKeyID = NWK_KEY;
 80143a6:	2301      	movs	r3, #1
 80143a8:	73fb      	strb	r3, [r7, #15]
#if ( USE_RANDOM_DEV_NONCE == 1 )
    uint32_t devNonce = 0;
    SecureElementRandomNumber( &devNonce );
    CryptoNvm->DevNonce = devNonce;
#else
    CryptoNvm->DevNonce++;
 80143aa:	4b18      	ldr	r3, [pc, #96]	@ (801440c <LoRaMacCryptoPrepareJoinRequest+0x78>)
 80143ac:	681b      	ldr	r3, [r3, #0]
 80143ae:	889a      	ldrh	r2, [r3, #4]
 80143b0:	3201      	adds	r2, #1
 80143b2:	b292      	uxth	r2, r2
 80143b4:	809a      	strh	r2, [r3, #4]
#endif /* USE_RANDOM_DEV_NONCE */
    macMsg->DevNonce = CryptoNvm->DevNonce;
 80143b6:	4b15      	ldr	r3, [pc, #84]	@ (801440c <LoRaMacCryptoPrepareJoinRequest+0x78>)
 80143b8:	681b      	ldr	r3, [r3, #0]
 80143ba:	889a      	ldrh	r2, [r3, #4]
 80143bc:	687b      	ldr	r3, [r7, #4]
 80143be:	82da      	strh	r2, [r3, #22]
        return LORAMAC_CRYPTO_ERROR;
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

    // Serialize message
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 80143c0:	6878      	ldr	r0, [r7, #4]
 80143c2:	f000 fc14 	bl	8014bee <LoRaMacSerializerJoinRequest>
 80143c6:	4603      	mov	r3, r0
 80143c8:	2b00      	cmp	r3, #0
 80143ca:	d001      	beq.n	80143d0 <LoRaMacCryptoPrepareJoinRequest+0x3c>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 80143cc:	2310      	movs	r3, #16
 80143ce:	e018      	b.n	8014402 <LoRaMacCryptoPrepareJoinRequest+0x6e>
    }

    // Compute mic
    if( SecureElementComputeAesCmac( NULL, macMsg->Buffer, ( LORAMAC_JOIN_REQ_MSG_SIZE - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, &macMsg->MIC ) != SECURE_ELEMENT_SUCCESS )
 80143d0:	687b      	ldr	r3, [r7, #4]
 80143d2:	6819      	ldr	r1, [r3, #0]
 80143d4:	687b      	ldr	r3, [r7, #4]
 80143d6:	3318      	adds	r3, #24
 80143d8:	7bfa      	ldrb	r2, [r7, #15]
 80143da:	9300      	str	r3, [sp, #0]
 80143dc:	4613      	mov	r3, r2
 80143de:	2213      	movs	r2, #19
 80143e0:	2000      	movs	r0, #0
 80143e2:	f7f8 f8ab 	bl	800c53c <SecureElementComputeAesCmac>
 80143e6:	4603      	mov	r3, r0
 80143e8:	2b00      	cmp	r3, #0
 80143ea:	d001      	beq.n	80143f0 <LoRaMacCryptoPrepareJoinRequest+0x5c>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80143ec:	230e      	movs	r3, #14
 80143ee:	e008      	b.n	8014402 <LoRaMacCryptoPrepareJoinRequest+0x6e>
    }

    // Reserialize message to add the MIC
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 80143f0:	6878      	ldr	r0, [r7, #4]
 80143f2:	f000 fbfc 	bl	8014bee <LoRaMacSerializerJoinRequest>
 80143f6:	4603      	mov	r3, r0
 80143f8:	2b00      	cmp	r3, #0
 80143fa:	d001      	beq.n	8014400 <LoRaMacCryptoPrepareJoinRequest+0x6c>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 80143fc:	2310      	movs	r3, #16
 80143fe:	e000      	b.n	8014402 <LoRaMacCryptoPrepareJoinRequest+0x6e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8014400:	2300      	movs	r3, #0
}
 8014402:	4618      	mov	r0, r3
 8014404:	3710      	adds	r7, #16
 8014406:	46bd      	mov	sp, r7
 8014408:	bd80      	pop	{r7, pc}
 801440a:	bf00      	nop
 801440c:	20001bc0 	.word	0x20001bc0

08014410 <LoRaMacCryptoHandleJoinAccept>:
    return LORAMAC_CRYPTO_SUCCESS;
}
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

LoRaMacCryptoStatus_t LoRaMacCryptoHandleJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t* joinEUI, LoRaMacMessageJoinAccept_t* macMsg )
{
 8014410:	b590      	push	{r4, r7, lr}
 8014412:	b097      	sub	sp, #92	@ 0x5c
 8014414:	af04      	add	r7, sp, #16
 8014416:	4603      	mov	r3, r0
 8014418:	60b9      	str	r1, [r7, #8]
 801441a:	607a      	str	r2, [r7, #4]
 801441c:	73fb      	strb	r3, [r7, #15]
    if( ( macMsg == 0 ) || ( joinEUI == 0 ) )
 801441e:	687b      	ldr	r3, [r7, #4]
 8014420:	2b00      	cmp	r3, #0
 8014422:	d002      	beq.n	801442a <LoRaMacCryptoHandleJoinAccept+0x1a>
 8014424:	68bb      	ldr	r3, [r7, #8]
 8014426:	2b00      	cmp	r3, #0
 8014428:	d101      	bne.n	801442e <LoRaMacCryptoHandleJoinAccept+0x1e>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 801442a:	2309      	movs	r3, #9
 801442c:	e0bd      	b.n	80145aa <LoRaMacCryptoHandleJoinAccept+0x19a>
    }

    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 801442e:	2312      	movs	r3, #18
 8014430:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    uint8_t decJoinAccept[LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE] = { 0 };
 8014434:	2300      	movs	r3, #0
 8014436:	61bb      	str	r3, [r7, #24]
 8014438:	f107 031c 	add.w	r3, r7, #28
 801443c:	221d      	movs	r2, #29
 801443e:	2100      	movs	r1, #0
 8014440:	4618      	mov	r0, r3
 8014442:	f008 fbb5 	bl	801cbb0 <memset>
    uint8_t versionMinor         = 0;
 8014446:	2300      	movs	r3, #0
 8014448:	75fb      	strb	r3, [r7, #23]
    uint16_t nonce               = CryptoNvm->DevNonce;
 801444a:	4b5a      	ldr	r3, [pc, #360]	@ (80145b4 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 801444c:	681b      	ldr	r3, [r3, #0]
 801444e:	889b      	ldrh	r3, [r3, #4]
 8014450:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
            nonce = CryptoNvm->FCntList.RJcount1;
        }
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

    if( SecureElementProcessJoinAccept( joinReqType, joinEUI, nonce, macMsg->Buffer,
 8014454:	687b      	ldr	r3, [r7, #4]
 8014456:	681c      	ldr	r4, [r3, #0]
 8014458:	687b      	ldr	r3, [r7, #4]
 801445a:	791b      	ldrb	r3, [r3, #4]
 801445c:	f8b7 1044 	ldrh.w	r1, [r7, #68]	@ 0x44
 8014460:	7bf8      	ldrb	r0, [r7, #15]
 8014462:	f107 0217 	add.w	r2, r7, #23
 8014466:	9202      	str	r2, [sp, #8]
 8014468:	f107 0218 	add.w	r2, r7, #24
 801446c:	9201      	str	r2, [sp, #4]
 801446e:	9300      	str	r3, [sp, #0]
 8014470:	4623      	mov	r3, r4
 8014472:	460a      	mov	r2, r1
 8014474:	68b9      	ldr	r1, [r7, #8]
 8014476:	f7f8 f955 	bl	800c724 <SecureElementProcessJoinAccept>
 801447a:	4603      	mov	r3, r0
 801447c:	2b00      	cmp	r3, #0
 801447e:	d001      	beq.n	8014484 <LoRaMacCryptoHandleJoinAccept+0x74>
                                        macMsg->BufSize, decJoinAccept,
                                        &versionMinor ) != SECURE_ELEMENT_SUCCESS )
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8014480:	230e      	movs	r3, #14
 8014482:	e092      	b.n	80145aa <LoRaMacCryptoHandleJoinAccept+0x19a>
    }

    memcpy1( macMsg->Buffer, decJoinAccept, macMsg->BufSize );
 8014484:	687b      	ldr	r3, [r7, #4]
 8014486:	6818      	ldr	r0, [r3, #0]
 8014488:	687b      	ldr	r3, [r7, #4]
 801448a:	791b      	ldrb	r3, [r3, #4]
 801448c:	461a      	mov	r2, r3
 801448e:	f107 0318 	add.w	r3, r7, #24
 8014492:	4619      	mov	r1, r3
 8014494:	f002 ffd3 	bl	801743e <memcpy1>

    // Parse the message
    if( LoRaMacParserJoinAccept( macMsg ) != LORAMAC_PARSER_SUCCESS )
 8014498:	6878      	ldr	r0, [r7, #4]
 801449a:	f000 f9eb 	bl	8014874 <LoRaMacParserJoinAccept>
 801449e:	4603      	mov	r3, r0
 80144a0:	2b00      	cmp	r3, #0
 80144a2:	d001      	beq.n	80144a8 <LoRaMacCryptoHandleJoinAccept+0x98>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
 80144a4:	230f      	movs	r3, #15
 80144a6:	e080      	b.n	80145aa <LoRaMacCryptoHandleJoinAccept+0x19a>
    }

    uint32_t currentJoinNonce;

    currentJoinNonce = ( uint32_t )macMsg->JoinNonce[0];
 80144a8:	687b      	ldr	r3, [r7, #4]
 80144aa:	799b      	ldrb	r3, [r3, #6]
 80144ac:	643b      	str	r3, [r7, #64]	@ 0x40
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[1] << 8 );
 80144ae:	687b      	ldr	r3, [r7, #4]
 80144b0:	79db      	ldrb	r3, [r3, #7]
 80144b2:	021b      	lsls	r3, r3, #8
 80144b4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80144b6:	4313      	orrs	r3, r2
 80144b8:	643b      	str	r3, [r7, #64]	@ 0x40
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[2] << 16 );
 80144ba:	687b      	ldr	r3, [r7, #4]
 80144bc:	7a1b      	ldrb	r3, [r3, #8]
 80144be:	041b      	lsls	r3, r3, #16
 80144c0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80144c2:	4313      	orrs	r3, r2
 80144c4:	643b      	str	r3, [r7, #64]	@ 0x40
#if( USE_JOIN_NONCE_COUNTER_CHECK == 1 )
    // Check if the JoinNonce is greater as the previous one
    if( currentJoinNonce > CryptoNvm->JoinNonce )
#else
    // Check if the JoinNonce is different from the previous one
    if( currentJoinNonce != CryptoNvm->JoinNonce )
 80144c6:	4b3b      	ldr	r3, [pc, #236]	@ (80145b4 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 80144c8:	681b      	ldr	r3, [r3, #0]
 80144ca:	689b      	ldr	r3, [r3, #8]
 80144cc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80144ce:	429a      	cmp	r2, r3
 80144d0:	d010      	beq.n	80144f4 <LoRaMacCryptoHandleJoinAccept+0xe4>
#endif /* USE_JOIN_NONCE_COUNTER_CHECK */
    {
        CryptoNvm->JoinNonce = currentJoinNonce;
 80144d2:	4b38      	ldr	r3, [pc, #224]	@ (80145b4 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 80144d4:	681b      	ldr	r3, [r3, #0]
 80144d6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80144d8:	609a      	str	r2, [r3, #8]
    {
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
    }

    // Derive lifetime keys
    retval = LoRaMacCryptoDeriveMcRootKey( versionMinor, APP_KEY );
 80144da:	7dfb      	ldrb	r3, [r7, #23]
 80144dc:	2100      	movs	r1, #0
 80144de:	4618      	mov	r0, r3
 80144e0:	f000 f97a 	bl	80147d8 <LoRaMacCryptoDeriveMcRootKey>
 80144e4:	4603      	mov	r3, r0
 80144e6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 80144ea:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80144ee:	2b00      	cmp	r3, #0
 80144f0:	d005      	beq.n	80144fe <LoRaMacCryptoHandleJoinAccept+0xee>
 80144f2:	e001      	b.n	80144f8 <LoRaMacCryptoHandleJoinAccept+0xe8>
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
 80144f4:	2303      	movs	r3, #3
 80144f6:	e058      	b.n	80145aa <LoRaMacCryptoHandleJoinAccept+0x19a>
    {
        return retval;
 80144f8:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80144fc:	e055      	b.n	80145aa <LoRaMacCryptoHandleJoinAccept+0x19a>
    }

    retval = LoRaMacCryptoDeriveMcKEKey( MC_ROOT_KEY );
 80144fe:	2004      	movs	r0, #4
 8014500:	f000 f995 	bl	801482e <LoRaMacCryptoDeriveMcKEKey>
 8014504:	4603      	mov	r3, r0
 8014506:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 801450a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 801450e:	2b00      	cmp	r3, #0
 8014510:	d002      	beq.n	8014518 <LoRaMacCryptoHandleJoinAccept+0x108>
    {
        return retval;
 8014512:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8014516:	e048      	b.n	80145aa <LoRaMacCryptoHandleJoinAccept+0x19a>
    {
        // Operating in LoRaWAN 1.0.x mode

        uint32_t netID;

        netID = ( uint32_t )macMsg->NetID[0];
 8014518:	687b      	ldr	r3, [r7, #4]
 801451a:	7a5b      	ldrb	r3, [r3, #9]
 801451c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        netID |= ( ( uint32_t )macMsg->NetID[1] << 8 );
 801451e:	687b      	ldr	r3, [r7, #4]
 8014520:	7a9b      	ldrb	r3, [r3, #10]
 8014522:	021b      	lsls	r3, r3, #8
 8014524:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8014526:	4313      	orrs	r3, r2
 8014528:	63fb      	str	r3, [r7, #60]	@ 0x3c
        netID |= ( ( uint32_t )macMsg->NetID[2] << 16 );
 801452a:	687b      	ldr	r3, [r7, #4]
 801452c:	7adb      	ldrb	r3, [r3, #11]
 801452e:	041b      	lsls	r3, r3, #16
 8014530:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8014532:	4313      	orrs	r3, r2
 8014534:	63fb      	str	r3, [r7, #60]	@ 0x3c

        retval = DeriveSessionKey10x( APP_S_KEY, currentJoinNonce, netID, nonce );
 8014536:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 801453a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801453c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801453e:	2003      	movs	r0, #3
 8014540:	f7ff fd06 	bl	8013f50 <DeriveSessionKey10x>
 8014544:	4603      	mov	r3, r0
 8014546:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 801454a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 801454e:	2b00      	cmp	r3, #0
 8014550:	d002      	beq.n	8014558 <LoRaMacCryptoHandleJoinAccept+0x148>
        {
            return retval;
 8014552:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8014556:	e028      	b.n	80145aa <LoRaMacCryptoHandleJoinAccept+0x19a>
            return retval;
        }

        retval = DeriveSessionKey10x( S_NWK_S_INT_KEY, currentJoinNonce, netID, nonce );
#else
        retval = DeriveSessionKey10x( NWK_S_KEY, currentJoinNonce, netID, nonce );
 8014558:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 801455c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801455e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8014560:	2002      	movs	r0, #2
 8014562:	f7ff fcf5 	bl	8013f50 <DeriveSessionKey10x>
 8014566:	4603      	mov	r3, r0
 8014568:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 801456c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8014570:	2b00      	cmp	r3, #0
 8014572:	d002      	beq.n	801457a <LoRaMacCryptoHandleJoinAccept+0x16a>
        {
            return retval;
 8014574:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8014578:	e017      	b.n	80145aa <LoRaMacCryptoHandleJoinAccept+0x19a>
        }
    }

    // Join-Accept is successfully processed
    // Save LoRaWAN specification version
    CryptoNvm->LrWanVersion.Fields.Minor = versionMinor;
 801457a:	4b0e      	ldr	r3, [pc, #56]	@ (80145b4 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 801457c:	681b      	ldr	r3, [r3, #0]
 801457e:	7dfa      	ldrb	r2, [r7, #23]
 8014580:	709a      	strb	r2, [r3, #2]

    // Reset frame counters
#if( USE_LRWAN_1_1_X_CRYPTO == 1 )
    RJcount0 = 0;
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */
    CryptoNvm->FCntList.FCntUp = 0;
 8014582:	4b0c      	ldr	r3, [pc, #48]	@ (80145b4 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 8014584:	681b      	ldr	r3, [r3, #0]
 8014586:	2200      	movs	r2, #0
 8014588:	60da      	str	r2, [r3, #12]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 801458a:	4b0a      	ldr	r3, [pc, #40]	@ (80145b4 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 801458c:	681b      	ldr	r3, [r3, #0]
 801458e:	f04f 32ff 	mov.w	r2, #4294967295
 8014592:	619a      	str	r2, [r3, #24]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 8014594:	4b07      	ldr	r3, [pc, #28]	@ (80145b4 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 8014596:	681b      	ldr	r3, [r3, #0]
 8014598:	f04f 32ff 	mov.w	r2, #4294967295
 801459c:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITAL_VALUE;
 801459e:	4b05      	ldr	r3, [pc, #20]	@ (80145b4 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 80145a0:	681b      	ldr	r3, [r3, #0]
 80145a2:	f04f 32ff 	mov.w	r2, #4294967295
 80145a6:	615a      	str	r2, [r3, #20]

    return LORAMAC_CRYPTO_SUCCESS;
 80145a8:	2300      	movs	r3, #0
}
 80145aa:	4618      	mov	r0, r3
 80145ac:	374c      	adds	r7, #76	@ 0x4c
 80145ae:	46bd      	mov	sp, r7
 80145b0:	bd90      	pop	{r4, r7, pc}
 80145b2:	bf00      	nop
 80145b4:	20001bc0 	.word	0x20001bc0

080145b8 <LoRaMacCryptoSecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoSecureMessage( uint32_t fCntUp, uint8_t txDr, uint8_t txCh, LoRaMacMessageData_t* macMsg )
{
 80145b8:	b590      	push	{r4, r7, lr}
 80145ba:	b08b      	sub	sp, #44	@ 0x2c
 80145bc:	af04      	add	r7, sp, #16
 80145be:	60f8      	str	r0, [r7, #12]
 80145c0:	607b      	str	r3, [r7, #4]
 80145c2:	460b      	mov	r3, r1
 80145c4:	72fb      	strb	r3, [r7, #11]
 80145c6:	4613      	mov	r3, r2
 80145c8:	72bb      	strb	r3, [r7, #10]
    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 80145ca:	2312      	movs	r3, #18
 80145cc:	75bb      	strb	r3, [r7, #22]
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 80145ce:	2303      	movs	r3, #3
 80145d0:	75fb      	strb	r3, [r7, #23]

    if( macMsg == NULL )
 80145d2:	687b      	ldr	r3, [r7, #4]
 80145d4:	2b00      	cmp	r3, #0
 80145d6:	d101      	bne.n	80145dc <LoRaMacCryptoSecureMessage+0x24>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80145d8:	2309      	movs	r3, #9
 80145da:	e05e      	b.n	801469a <LoRaMacCryptoSecureMessage+0xe2>
    }

    if( fCntUp < CryptoNvm->FCntList.FCntUp )
 80145dc:	4b31      	ldr	r3, [pc, #196]	@ (80146a4 <LoRaMacCryptoSecureMessage+0xec>)
 80145de:	681b      	ldr	r3, [r3, #0]
 80145e0:	68db      	ldr	r3, [r3, #12]
 80145e2:	68fa      	ldr	r2, [r7, #12]
 80145e4:	429a      	cmp	r2, r3
 80145e6:	d201      	bcs.n	80145ec <LoRaMacCryptoSecureMessage+0x34>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 80145e8:	2306      	movs	r3, #6
 80145ea:	e056      	b.n	801469a <LoRaMacCryptoSecureMessage+0xe2>
    }

    // Encrypt payload
    if( macMsg->FPort == 0 )
 80145ec:	687b      	ldr	r3, [r7, #4]
 80145ee:	f893 3020 	ldrb.w	r3, [r3, #32]
 80145f2:	2b00      	cmp	r3, #0
 80145f4:	d101      	bne.n	80145fa <LoRaMacCryptoSecureMessage+0x42>
        // Use network session key
        /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        payloadDecryptionKeyID = NWK_S_KEY;
 80145f6:	2302      	movs	r3, #2
 80145f8:	75fb      	strb	r3, [r7, #23]
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
    }

    if( fCntUp > CryptoNvm->FCntList.FCntUp )
 80145fa:	4b2a      	ldr	r3, [pc, #168]	@ (80146a4 <LoRaMacCryptoSecureMessage+0xec>)
 80145fc:	681b      	ldr	r3, [r3, #0]
 80145fe:	68db      	ldr	r3, [r3, #12]
 8014600:	68fa      	ldr	r2, [r7, #12]
 8014602:	429a      	cmp	r2, r3
 8014604:	d916      	bls.n	8014634 <LoRaMacCryptoSecureMessage+0x7c>
    {
        retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, macMsg->FHDR.DevAddr, UPLINK, fCntUp );
 8014606:	687b      	ldr	r3, [r7, #4]
 8014608:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 801460a:	687b      	ldr	r3, [r7, #4]
 801460c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8014610:	b219      	sxth	r1, r3
 8014612:	687b      	ldr	r3, [r7, #4]
 8014614:	689c      	ldr	r4, [r3, #8]
 8014616:	7dfa      	ldrb	r2, [r7, #23]
 8014618:	68fb      	ldr	r3, [r7, #12]
 801461a:	9301      	str	r3, [sp, #4]
 801461c:	2300      	movs	r3, #0
 801461e:	9300      	str	r3, [sp, #0]
 8014620:	4623      	mov	r3, r4
 8014622:	f7ff faa1 	bl	8013b68 <PayloadEncrypt>
 8014626:	4603      	mov	r3, r0
 8014628:	75bb      	strb	r3, [r7, #22]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 801462a:	7dbb      	ldrb	r3, [r7, #22]
 801462c:	2b00      	cmp	r3, #0
 801462e:	d001      	beq.n	8014634 <LoRaMacCryptoSecureMessage+0x7c>
        {
            return retval;
 8014630:	7dbb      	ldrb	r3, [r7, #22]
 8014632:	e032      	b.n	801469a <LoRaMacCryptoSecureMessage+0xe2>
        }
#endif /* USE_LRWAN_1_1_X_CRYPTO */
    }

    // Serialize message
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8014634:	6878      	ldr	r0, [r7, #4]
 8014636:	f000 fb5c 	bl	8014cf2 <LoRaMacSerializerData>
 801463a:	4603      	mov	r3, r0
 801463c:	2b00      	cmp	r3, #0
 801463e:	d001      	beq.n	8014644 <LoRaMacCryptoSecureMessage+0x8c>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8014640:	2310      	movs	r3, #16
 8014642:	e02a      	b.n	801469a <LoRaMacCryptoSecureMessage+0xe2>
        // Use network session key
        /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        payloadDecryptionKeyID = NWK_S_KEY;
 8014644:	2302      	movs	r3, #2
 8014646:	75fb      	strb	r3, [r7, #23]
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
        // MIC = cmacF[0..3]
        // The IsAck parameter is every time false since the ConfFCnt field is not used in legacy mode.
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), payloadDecryptionKeyID, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 8014648:	687b      	ldr	r3, [r7, #4]
 801464a:	6818      	ldr	r0, [r3, #0]
 801464c:	687b      	ldr	r3, [r7, #4]
 801464e:	791b      	ldrb	r3, [r3, #4]
 8014650:	3b04      	subs	r3, #4
 8014652:	b299      	uxth	r1, r3
 8014654:	687b      	ldr	r3, [r7, #4]
 8014656:	689b      	ldr	r3, [r3, #8]
 8014658:	687a      	ldr	r2, [r7, #4]
 801465a:	322c      	adds	r2, #44	@ 0x2c
 801465c:	7dfc      	ldrb	r4, [r7, #23]
 801465e:	9203      	str	r2, [sp, #12]
 8014660:	68fa      	ldr	r2, [r7, #12]
 8014662:	9202      	str	r2, [sp, #8]
 8014664:	9301      	str	r3, [sp, #4]
 8014666:	2300      	movs	r3, #0
 8014668:	9300      	str	r3, [sp, #0]
 801466a:	2300      	movs	r3, #0
 801466c:	4622      	mov	r2, r4
 801466e:	f7ff fb7c 	bl	8013d6a <ComputeCmacB0>
 8014672:	4603      	mov	r3, r0
 8014674:	75bb      	strb	r3, [r7, #22]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8014676:	7dbb      	ldrb	r3, [r7, #22]
 8014678:	2b00      	cmp	r3, #0
 801467a:	d001      	beq.n	8014680 <LoRaMacCryptoSecureMessage+0xc8>
        {
            return retval;
 801467c:	7dbb      	ldrb	r3, [r7, #22]
 801467e:	e00c      	b.n	801469a <LoRaMacCryptoSecureMessage+0xe2>
        }
    }

    // Re-serialize message to add the MIC
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8014680:	6878      	ldr	r0, [r7, #4]
 8014682:	f000 fb36 	bl	8014cf2 <LoRaMacSerializerData>
 8014686:	4603      	mov	r3, r0
 8014688:	2b00      	cmp	r3, #0
 801468a:	d001      	beq.n	8014690 <LoRaMacCryptoSecureMessage+0xd8>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 801468c:	2310      	movs	r3, #16
 801468e:	e004      	b.n	801469a <LoRaMacCryptoSecureMessage+0xe2>
    }

    CryptoNvm->FCntList.FCntUp = fCntUp;
 8014690:	4b04      	ldr	r3, [pc, #16]	@ (80146a4 <LoRaMacCryptoSecureMessage+0xec>)
 8014692:	681b      	ldr	r3, [r3, #0]
 8014694:	68fa      	ldr	r2, [r7, #12]
 8014696:	60da      	str	r2, [r3, #12]

    return LORAMAC_CRYPTO_SUCCESS;
 8014698:	2300      	movs	r3, #0
}
 801469a:	4618      	mov	r0, r3
 801469c:	371c      	adds	r7, #28
 801469e:	46bd      	mov	sp, r7
 80146a0:	bd90      	pop	{r4, r7, pc}
 80146a2:	bf00      	nop
 80146a4:	20001bc0 	.word	0x20001bc0

080146a8 <LoRaMacCryptoUnsecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoUnsecureMessage( AddressIdentifier_t addrID, uint32_t address, FCntIdentifier_t fCntID, uint32_t fCntDown, LoRaMacMessageData_t* macMsg )
{
 80146a8:	b590      	push	{r4, r7, lr}
 80146aa:	b08b      	sub	sp, #44	@ 0x2c
 80146ac:	af04      	add	r7, sp, #16
 80146ae:	60b9      	str	r1, [r7, #8]
 80146b0:	607b      	str	r3, [r7, #4]
 80146b2:	4603      	mov	r3, r0
 80146b4:	73fb      	strb	r3, [r7, #15]
 80146b6:	4613      	mov	r3, r2
 80146b8:	73bb      	strb	r3, [r7, #14]
    if( macMsg == 0 )
 80146ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80146bc:	2b00      	cmp	r3, #0
 80146be:	d101      	bne.n	80146c4 <LoRaMacCryptoUnsecureMessage+0x1c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80146c0:	2309      	movs	r3, #9
 80146c2:	e083      	b.n	80147cc <LoRaMacCryptoUnsecureMessage+0x124>
    }

    if( CheckFCntDown( fCntID, fCntDown ) == false )
 80146c4:	7bbb      	ldrb	r3, [r7, #14]
 80146c6:	6879      	ldr	r1, [r7, #4]
 80146c8:	4618      	mov	r0, r3
 80146ca:	f7ff fcdf 	bl	801408c <CheckFCntDown>
 80146ce:	4603      	mov	r3, r0
 80146d0:	f083 0301 	eor.w	r3, r3, #1
 80146d4:	b2db      	uxtb	r3, r3
 80146d6:	2b00      	cmp	r3, #0
 80146d8:	d001      	beq.n	80146de <LoRaMacCryptoUnsecureMessage+0x36>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 80146da:	2306      	movs	r3, #6
 80146dc:	e076      	b.n	80147cc <LoRaMacCryptoUnsecureMessage+0x124>
    }

    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 80146de:	2312      	movs	r3, #18
 80146e0:	757b      	strb	r3, [r7, #21]
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 80146e2:	2303      	movs	r3, #3
 80146e4:	75fb      	strb	r3, [r7, #23]
    /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
    KeyIdentifier_t micComputationKeyID = S_NWK_S_INT_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
    KeyIdentifier_t micComputationKeyID = NWK_S_KEY;
 80146e6:	2302      	movs	r3, #2
 80146e8:	753b      	strb	r3, [r7, #20]
#endif /* USE_LRWAN_1_1_X_CRYPTO */
    /* ST_WORKAROUND_END */
    KeyAddr_t* curItem;

    // Parse the message
    if( LoRaMacParserData( macMsg ) != LORAMAC_PARSER_SUCCESS )
 80146ea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80146ec:	f000 f98d 	bl	8014a0a <LoRaMacParserData>
 80146f0:	4603      	mov	r3, r0
 80146f2:	2b00      	cmp	r3, #0
 80146f4:	d001      	beq.n	80146fa <LoRaMacCryptoUnsecureMessage+0x52>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
 80146f6:	230f      	movs	r3, #15
 80146f8:	e068      	b.n	80147cc <LoRaMacCryptoUnsecureMessage+0x124>
    }

    // Determine current security context
    retval = GetKeyAddrItem( addrID, &curItem );
 80146fa:	f107 0210 	add.w	r2, r7, #16
 80146fe:	7bfb      	ldrb	r3, [r7, #15]
 8014700:	4611      	mov	r1, r2
 8014702:	4618      	mov	r0, r3
 8014704:	f7ff fbfe 	bl	8013f04 <GetKeyAddrItem>
 8014708:	4603      	mov	r3, r0
 801470a:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 801470c:	7d7b      	ldrb	r3, [r7, #21]
 801470e:	2b00      	cmp	r3, #0
 8014710:	d001      	beq.n	8014716 <LoRaMacCryptoUnsecureMessage+0x6e>
    {
        return retval;
 8014712:	7d7b      	ldrb	r3, [r7, #21]
 8014714:	e05a      	b.n	80147cc <LoRaMacCryptoUnsecureMessage+0x124>
    }

    payloadDecryptionKeyID = curItem->AppSkey;
 8014716:	693b      	ldr	r3, [r7, #16]
 8014718:	785b      	ldrb	r3, [r3, #1]
 801471a:	75fb      	strb	r3, [r7, #23]
    micComputationKeyID = curItem->NwkSkey;
 801471c:	693b      	ldr	r3, [r7, #16]
 801471e:	789b      	ldrb	r3, [r3, #2]
 8014720:	753b      	strb	r3, [r7, #20]

    // Check if it is our address
    if( address != macMsg->FHDR.DevAddr )
 8014722:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014724:	689b      	ldr	r3, [r3, #8]
 8014726:	68ba      	ldr	r2, [r7, #8]
 8014728:	429a      	cmp	r2, r3
 801472a:	d001      	beq.n	8014730 <LoRaMacCryptoUnsecureMessage+0x88>
    {
        return LORAMAC_CRYPTO_FAIL_ADDRESS;
 801472c:	2302      	movs	r3, #2
 801472e:	e04d      	b.n	80147cc <LoRaMacCryptoUnsecureMessage+0x124>
    }

    // Compute mic
    bool isAck = macMsg->FHDR.FCtrl.Bits.Ack;
 8014730:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014732:	7b1b      	ldrb	r3, [r3, #12]
 8014734:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8014738:	b2db      	uxtb	r3, r3
 801473a:	2b00      	cmp	r3, #0
 801473c:	bf14      	ite	ne
 801473e:	2301      	movne	r3, #1
 8014740:	2300      	moveq	r3, #0
 8014742:	75bb      	strb	r3, [r7, #22]
    if( CryptoNvm->LrWanVersion.Fields.Minor == 0 )
 8014744:	4b23      	ldr	r3, [pc, #140]	@ (80147d4 <LoRaMacCryptoUnsecureMessage+0x12c>)
 8014746:	681b      	ldr	r3, [r3, #0]
 8014748:	789b      	ldrb	r3, [r3, #2]
 801474a:	2b00      	cmp	r3, #0
 801474c:	d101      	bne.n	8014752 <LoRaMacCryptoUnsecureMessage+0xaa>
    {
        // In legacy mode the IsAck parameter is forced to be false since the ConfFCnt field is not used.
        isAck = false;
 801474e:	2300      	movs	r3, #0
 8014750:	75bb      	strb	r3, [r7, #22]
    }

    // Verify mic
    retval = VerifyCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, isAck, DOWNLINK, address, fCntDown, macMsg->MIC );
 8014752:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014754:	6818      	ldr	r0, [r3, #0]
 8014756:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014758:	791b      	ldrb	r3, [r3, #4]
 801475a:	3b04      	subs	r3, #4
 801475c:	b299      	uxth	r1, r3
 801475e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014760:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014762:	7dbc      	ldrb	r4, [r7, #22]
 8014764:	7d3a      	ldrb	r2, [r7, #20]
 8014766:	9303      	str	r3, [sp, #12]
 8014768:	687b      	ldr	r3, [r7, #4]
 801476a:	9302      	str	r3, [sp, #8]
 801476c:	68bb      	ldr	r3, [r7, #8]
 801476e:	9301      	str	r3, [sp, #4]
 8014770:	2301      	movs	r3, #1
 8014772:	9300      	str	r3, [sp, #0]
 8014774:	4623      	mov	r3, r4
 8014776:	f7ff fb36 	bl	8013de6 <VerifyCmacB0>
 801477a:	4603      	mov	r3, r0
 801477c:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 801477e:	7d7b      	ldrb	r3, [r7, #21]
 8014780:	2b00      	cmp	r3, #0
 8014782:	d001      	beq.n	8014788 <LoRaMacCryptoUnsecureMessage+0xe0>
    {
        return retval;
 8014784:	7d7b      	ldrb	r3, [r7, #21]
 8014786:	e021      	b.n	80147cc <LoRaMacCryptoUnsecureMessage+0x124>
    }

    // Decrypt payload
    if( macMsg->FPort == 0 )
 8014788:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801478a:	f893 3020 	ldrb.w	r3, [r3, #32]
 801478e:	2b00      	cmp	r3, #0
 8014790:	d101      	bne.n	8014796 <LoRaMacCryptoUnsecureMessage+0xee>
        // Use network session encryption key
        /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        payloadDecryptionKeyID = NWK_S_KEY;
 8014792:	2302      	movs	r3, #2
 8014794:	75fb      	strb	r3, [r7, #23]
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
    }
    retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, address, DOWNLINK, fCntDown );
 8014796:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014798:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 801479a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801479c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80147a0:	b219      	sxth	r1, r3
 80147a2:	7dfa      	ldrb	r2, [r7, #23]
 80147a4:	687b      	ldr	r3, [r7, #4]
 80147a6:	9301      	str	r3, [sp, #4]
 80147a8:	2301      	movs	r3, #1
 80147aa:	9300      	str	r3, [sp, #0]
 80147ac:	68bb      	ldr	r3, [r7, #8]
 80147ae:	f7ff f9db 	bl	8013b68 <PayloadEncrypt>
 80147b2:	4603      	mov	r3, r0
 80147b4:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 80147b6:	7d7b      	ldrb	r3, [r7, #21]
 80147b8:	2b00      	cmp	r3, #0
 80147ba:	d001      	beq.n	80147c0 <LoRaMacCryptoUnsecureMessage+0x118>
    {
        return retval;
 80147bc:	7d7b      	ldrb	r3, [r7, #21]
 80147be:	e005      	b.n	80147cc <LoRaMacCryptoUnsecureMessage+0x124>
            }
        }
    }
#endif

    UpdateFCntDown( fCntID, fCntDown );
 80147c0:	7bbb      	ldrb	r3, [r7, #14]
 80147c2:	6879      	ldr	r1, [r7, #4]
 80147c4:	4618      	mov	r0, r3
 80147c6:	f7ff fc85 	bl	80140d4 <UpdateFCntDown>

    return LORAMAC_CRYPTO_SUCCESS;
 80147ca:	2300      	movs	r3, #0
}
 80147cc:	4618      	mov	r0, r3
 80147ce:	371c      	adds	r7, #28
 80147d0:	46bd      	mov	sp, r7
 80147d2:	bd90      	pop	{r4, r7, pc}
 80147d4:	20001bc0 	.word	0x20001bc0

080147d8 <LoRaMacCryptoDeriveMcRootKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveMcRootKey( uint8_t versionMinor, KeyIdentifier_t keyID )
{
 80147d8:	b580      	push	{r7, lr}
 80147da:	b086      	sub	sp, #24
 80147dc:	af00      	add	r7, sp, #0
 80147de:	4603      	mov	r3, r0
 80147e0:	460a      	mov	r2, r1
 80147e2:	71fb      	strb	r3, [r7, #7]
 80147e4:	4613      	mov	r3, r2
 80147e6:	71bb      	strb	r3, [r7, #6]
    // Prevent other keys than AppKey
    if( keyID != APP_KEY )
 80147e8:	79bb      	ldrb	r3, [r7, #6]
 80147ea:	2b00      	cmp	r3, #0
 80147ec:	d001      	beq.n	80147f2 <LoRaMacCryptoDeriveMcRootKey+0x1a>
    {
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 80147ee:	230a      	movs	r3, #10
 80147f0:	e019      	b.n	8014826 <LoRaMacCryptoDeriveMcRootKey+0x4e>
    }
    uint8_t compBase[16] = { 0 };
 80147f2:	2300      	movs	r3, #0
 80147f4:	60bb      	str	r3, [r7, #8]
 80147f6:	f107 030c 	add.w	r3, r7, #12
 80147fa:	2200      	movs	r2, #0
 80147fc:	601a      	str	r2, [r3, #0]
 80147fe:	605a      	str	r2, [r3, #4]
 8014800:	609a      	str	r2, [r3, #8]

    if( versionMinor == 1 )
 8014802:	79fb      	ldrb	r3, [r7, #7]
 8014804:	2b01      	cmp	r3, #1
 8014806:	d101      	bne.n	801480c <LoRaMacCryptoDeriveMcRootKey+0x34>
    {
        compBase[0] = 0x20;
 8014808:	2320      	movs	r3, #32
 801480a:	723b      	strb	r3, [r7, #8]
    }
    if( SecureElementDeriveAndStoreKey( compBase, keyID, MC_ROOT_KEY ) != SECURE_ELEMENT_SUCCESS )
 801480c:	79b9      	ldrb	r1, [r7, #6]
 801480e:	f107 0308 	add.w	r3, r7, #8
 8014812:	2204      	movs	r2, #4
 8014814:	4618      	mov	r0, r3
 8014816:	f7f7 ff45 	bl	800c6a4 <SecureElementDeriveAndStoreKey>
 801481a:	4603      	mov	r3, r0
 801481c:	2b00      	cmp	r3, #0
 801481e:	d001      	beq.n	8014824 <LoRaMacCryptoDeriveMcRootKey+0x4c>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8014820:	230e      	movs	r3, #14
 8014822:	e000      	b.n	8014826 <LoRaMacCryptoDeriveMcRootKey+0x4e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8014824:	2300      	movs	r3, #0
}
 8014826:	4618      	mov	r0, r3
 8014828:	3718      	adds	r7, #24
 801482a:	46bd      	mov	sp, r7
 801482c:	bd80      	pop	{r7, pc}

0801482e <LoRaMacCryptoDeriveMcKEKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveMcKEKey( KeyIdentifier_t keyID )
{
 801482e:	b580      	push	{r7, lr}
 8014830:	b086      	sub	sp, #24
 8014832:	af00      	add	r7, sp, #0
 8014834:	4603      	mov	r3, r0
 8014836:	71fb      	strb	r3, [r7, #7]
    // Prevent other keys than McRootKey
    if( keyID != MC_ROOT_KEY )
 8014838:	79fb      	ldrb	r3, [r7, #7]
 801483a:	2b04      	cmp	r3, #4
 801483c:	d001      	beq.n	8014842 <LoRaMacCryptoDeriveMcKEKey+0x14>
    {
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 801483e:	230a      	movs	r3, #10
 8014840:	e014      	b.n	801486c <LoRaMacCryptoDeriveMcKEKey+0x3e>
    }
    uint8_t compBase[16] = { 0 };
 8014842:	2300      	movs	r3, #0
 8014844:	60bb      	str	r3, [r7, #8]
 8014846:	f107 030c 	add.w	r3, r7, #12
 801484a:	2200      	movs	r2, #0
 801484c:	601a      	str	r2, [r3, #0]
 801484e:	605a      	str	r2, [r3, #4]
 8014850:	609a      	str	r2, [r3, #8]

    if( SecureElementDeriveAndStoreKey( compBase, keyID, MC_KE_KEY ) != SECURE_ELEMENT_SUCCESS )
 8014852:	79f9      	ldrb	r1, [r7, #7]
 8014854:	f107 0308 	add.w	r3, r7, #8
 8014858:	227f      	movs	r2, #127	@ 0x7f
 801485a:	4618      	mov	r0, r3
 801485c:	f7f7 ff22 	bl	800c6a4 <SecureElementDeriveAndStoreKey>
 8014860:	4603      	mov	r3, r0
 8014862:	2b00      	cmp	r3, #0
 8014864:	d001      	beq.n	801486a <LoRaMacCryptoDeriveMcKEKey+0x3c>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8014866:	230e      	movs	r3, #14
 8014868:	e000      	b.n	801486c <LoRaMacCryptoDeriveMcKEKey+0x3e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 801486a:	2300      	movs	r3, #0
}
 801486c:	4618      	mov	r0, r3
 801486e:	3718      	adds	r7, #24
 8014870:	46bd      	mov	sp, r7
 8014872:	bd80      	pop	{r7, pc}

08014874 <LoRaMacParserJoinAccept>:
 */
#include "LoRaMacParser.h"
#include "utilities.h"

LoRaMacParserStatus_t LoRaMacParserJoinAccept( LoRaMacMessageJoinAccept_t* macMsg )
{
 8014874:	b580      	push	{r7, lr}
 8014876:	b084      	sub	sp, #16
 8014878:	af00      	add	r7, sp, #0
 801487a:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 801487c:	687b      	ldr	r3, [r7, #4]
 801487e:	2b00      	cmp	r3, #0
 8014880:	d003      	beq.n	801488a <LoRaMacParserJoinAccept+0x16>
 8014882:	687b      	ldr	r3, [r7, #4]
 8014884:	681b      	ldr	r3, [r3, #0]
 8014886:	2b00      	cmp	r3, #0
 8014888:	d101      	bne.n	801488e <LoRaMacParserJoinAccept+0x1a>
    {
        return LORAMAC_PARSER_ERROR_NPE;
 801488a:	2302      	movs	r3, #2
 801488c:	e0b9      	b.n	8014a02 <LoRaMacParserJoinAccept+0x18e>
    }

    uint16_t bufItr = 0;
 801488e:	2300      	movs	r3, #0
 8014890:	81fb      	strh	r3, [r7, #14]

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 8014892:	687b      	ldr	r3, [r7, #4]
 8014894:	681a      	ldr	r2, [r3, #0]
 8014896:	89fb      	ldrh	r3, [r7, #14]
 8014898:	1c59      	adds	r1, r3, #1
 801489a:	81f9      	strh	r1, [r7, #14]
 801489c:	4413      	add	r3, r2
 801489e:	781a      	ldrb	r2, [r3, #0]
 80148a0:	687b      	ldr	r3, [r7, #4]
 80148a2:	715a      	strb	r2, [r3, #5]

    memcpy1( macMsg->JoinNonce, &macMsg->Buffer[bufItr], 3 );
 80148a4:	687b      	ldr	r3, [r7, #4]
 80148a6:	1d98      	adds	r0, r3, #6
 80148a8:	687b      	ldr	r3, [r7, #4]
 80148aa:	681a      	ldr	r2, [r3, #0]
 80148ac:	89fb      	ldrh	r3, [r7, #14]
 80148ae:	4413      	add	r3, r2
 80148b0:	2203      	movs	r2, #3
 80148b2:	4619      	mov	r1, r3
 80148b4:	f002 fdc3 	bl	801743e <memcpy1>
    bufItr = bufItr + 3;
 80148b8:	89fb      	ldrh	r3, [r7, #14]
 80148ba:	3303      	adds	r3, #3
 80148bc:	81fb      	strh	r3, [r7, #14]

    memcpy1( macMsg->NetID, &macMsg->Buffer[bufItr], 3 );
 80148be:	687b      	ldr	r3, [r7, #4]
 80148c0:	f103 0009 	add.w	r0, r3, #9
 80148c4:	687b      	ldr	r3, [r7, #4]
 80148c6:	681a      	ldr	r2, [r3, #0]
 80148c8:	89fb      	ldrh	r3, [r7, #14]
 80148ca:	4413      	add	r3, r2
 80148cc:	2203      	movs	r2, #3
 80148ce:	4619      	mov	r1, r3
 80148d0:	f002 fdb5 	bl	801743e <memcpy1>
    bufItr = bufItr + 3;
 80148d4:	89fb      	ldrh	r3, [r7, #14]
 80148d6:	3303      	adds	r3, #3
 80148d8:	81fb      	strh	r3, [r7, #14]

    macMsg->DevAddr = ( uint32_t ) macMsg->Buffer[bufItr++];
 80148da:	687b      	ldr	r3, [r7, #4]
 80148dc:	681a      	ldr	r2, [r3, #0]
 80148de:	89fb      	ldrh	r3, [r7, #14]
 80148e0:	1c59      	adds	r1, r3, #1
 80148e2:	81f9      	strh	r1, [r7, #14]
 80148e4:	4413      	add	r3, r2
 80148e6:	781b      	ldrb	r3, [r3, #0]
 80148e8:	461a      	mov	r2, r3
 80148ea:	687b      	ldr	r3, [r7, #4]
 80148ec:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 80148ee:	687b      	ldr	r3, [r7, #4]
 80148f0:	681a      	ldr	r2, [r3, #0]
 80148f2:	89fb      	ldrh	r3, [r7, #14]
 80148f4:	1c59      	adds	r1, r3, #1
 80148f6:	81f9      	strh	r1, [r7, #14]
 80148f8:	4413      	add	r3, r2
 80148fa:	781b      	ldrb	r3, [r3, #0]
 80148fc:	021a      	lsls	r2, r3, #8
 80148fe:	687b      	ldr	r3, [r7, #4]
 8014900:	68db      	ldr	r3, [r3, #12]
 8014902:	431a      	orrs	r2, r3
 8014904:	687b      	ldr	r3, [r7, #4]
 8014906:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8014908:	687b      	ldr	r3, [r7, #4]
 801490a:	681a      	ldr	r2, [r3, #0]
 801490c:	89fb      	ldrh	r3, [r7, #14]
 801490e:	1c59      	adds	r1, r3, #1
 8014910:	81f9      	strh	r1, [r7, #14]
 8014912:	4413      	add	r3, r2
 8014914:	781b      	ldrb	r3, [r3, #0]
 8014916:	041a      	lsls	r2, r3, #16
 8014918:	687b      	ldr	r3, [r7, #4]
 801491a:	68db      	ldr	r3, [r3, #12]
 801491c:	431a      	orrs	r2, r3
 801491e:	687b      	ldr	r3, [r7, #4]
 8014920:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 8014922:	687b      	ldr	r3, [r7, #4]
 8014924:	681a      	ldr	r2, [r3, #0]
 8014926:	89fb      	ldrh	r3, [r7, #14]
 8014928:	1c59      	adds	r1, r3, #1
 801492a:	81f9      	strh	r1, [r7, #14]
 801492c:	4413      	add	r3, r2
 801492e:	781b      	ldrb	r3, [r3, #0]
 8014930:	061a      	lsls	r2, r3, #24
 8014932:	687b      	ldr	r3, [r7, #4]
 8014934:	68db      	ldr	r3, [r3, #12]
 8014936:	431a      	orrs	r2, r3
 8014938:	687b      	ldr	r3, [r7, #4]
 801493a:	60da      	str	r2, [r3, #12]

    macMsg->DLSettings.Value = macMsg->Buffer[bufItr++];
 801493c:	687b      	ldr	r3, [r7, #4]
 801493e:	681a      	ldr	r2, [r3, #0]
 8014940:	89fb      	ldrh	r3, [r7, #14]
 8014942:	1c59      	adds	r1, r3, #1
 8014944:	81f9      	strh	r1, [r7, #14]
 8014946:	4413      	add	r3, r2
 8014948:	781a      	ldrb	r2, [r3, #0]
 801494a:	687b      	ldr	r3, [r7, #4]
 801494c:	741a      	strb	r2, [r3, #16]

    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 801494e:	687b      	ldr	r3, [r7, #4]
 8014950:	681a      	ldr	r2, [r3, #0]
 8014952:	89fb      	ldrh	r3, [r7, #14]
 8014954:	1c59      	adds	r1, r3, #1
 8014956:	81f9      	strh	r1, [r7, #14]
 8014958:	4413      	add	r3, r2
 801495a:	781a      	ldrb	r2, [r3, #0]
 801495c:	687b      	ldr	r3, [r7, #4]
 801495e:	745a      	strb	r2, [r3, #17]

    if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) == LORAMAC_CF_LIST_FIELD_SIZE )
 8014960:	687b      	ldr	r3, [r7, #4]
 8014962:	791b      	ldrb	r3, [r3, #4]
 8014964:	1f1a      	subs	r2, r3, #4
 8014966:	89fb      	ldrh	r3, [r7, #14]
 8014968:	1ad3      	subs	r3, r2, r3
 801496a:	2b10      	cmp	r3, #16
 801496c:	d10e      	bne.n	801498c <LoRaMacParserJoinAccept+0x118>
    {
        memcpy1( macMsg->CFList, &macMsg->Buffer[bufItr], LORAMAC_CF_LIST_FIELD_SIZE );
 801496e:	687b      	ldr	r3, [r7, #4]
 8014970:	f103 0012 	add.w	r0, r3, #18
 8014974:	687b      	ldr	r3, [r7, #4]
 8014976:	681a      	ldr	r2, [r3, #0]
 8014978:	89fb      	ldrh	r3, [r7, #14]
 801497a:	4413      	add	r3, r2
 801497c:	2210      	movs	r2, #16
 801497e:	4619      	mov	r1, r3
 8014980:	f002 fd5d 	bl	801743e <memcpy1>
        bufItr = bufItr + LORAMAC_CF_LIST_FIELD_SIZE;
 8014984:	89fb      	ldrh	r3, [r7, #14]
 8014986:	3310      	adds	r3, #16
 8014988:	81fb      	strh	r3, [r7, #14]
 801498a:	e008      	b.n	801499e <LoRaMacParserJoinAccept+0x12a>
    }
    else if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) > 0 )
 801498c:	687b      	ldr	r3, [r7, #4]
 801498e:	791b      	ldrb	r3, [r3, #4]
 8014990:	1f1a      	subs	r2, r3, #4
 8014992:	89fb      	ldrh	r3, [r7, #14]
 8014994:	1ad3      	subs	r3, r2, r3
 8014996:	2b00      	cmp	r3, #0
 8014998:	dd01      	ble.n	801499e <LoRaMacParserJoinAccept+0x12a>
    {
        return LORAMAC_PARSER_FAIL;
 801499a:	2301      	movs	r3, #1
 801499c:	e031      	b.n	8014a02 <LoRaMacParserJoinAccept+0x18e>
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[bufItr++];
 801499e:	687b      	ldr	r3, [r7, #4]
 80149a0:	681a      	ldr	r2, [r3, #0]
 80149a2:	89fb      	ldrh	r3, [r7, #14]
 80149a4:	1c59      	adds	r1, r3, #1
 80149a6:	81f9      	strh	r1, [r7, #14]
 80149a8:	4413      	add	r3, r2
 80149aa:	781b      	ldrb	r3, [r3, #0]
 80149ac:	461a      	mov	r2, r3
 80149ae:	687b      	ldr	r3, [r7, #4]
 80149b0:	625a      	str	r2, [r3, #36]	@ 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 80149b2:	687b      	ldr	r3, [r7, #4]
 80149b4:	681a      	ldr	r2, [r3, #0]
 80149b6:	89fb      	ldrh	r3, [r7, #14]
 80149b8:	1c59      	adds	r1, r3, #1
 80149ba:	81f9      	strh	r1, [r7, #14]
 80149bc:	4413      	add	r3, r2
 80149be:	781b      	ldrb	r3, [r3, #0]
 80149c0:	021a      	lsls	r2, r3, #8
 80149c2:	687b      	ldr	r3, [r7, #4]
 80149c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80149c6:	431a      	orrs	r2, r3
 80149c8:	687b      	ldr	r3, [r7, #4]
 80149ca:	625a      	str	r2, [r3, #36]	@ 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 80149cc:	687b      	ldr	r3, [r7, #4]
 80149ce:	681a      	ldr	r2, [r3, #0]
 80149d0:	89fb      	ldrh	r3, [r7, #14]
 80149d2:	1c59      	adds	r1, r3, #1
 80149d4:	81f9      	strh	r1, [r7, #14]
 80149d6:	4413      	add	r3, r2
 80149d8:	781b      	ldrb	r3, [r3, #0]
 80149da:	041a      	lsls	r2, r3, #16
 80149dc:	687b      	ldr	r3, [r7, #4]
 80149de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80149e0:	431a      	orrs	r2, r3
 80149e2:	687b      	ldr	r3, [r7, #4]
 80149e4:	625a      	str	r2, [r3, #36]	@ 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 80149e6:	687b      	ldr	r3, [r7, #4]
 80149e8:	681a      	ldr	r2, [r3, #0]
 80149ea:	89fb      	ldrh	r3, [r7, #14]
 80149ec:	1c59      	adds	r1, r3, #1
 80149ee:	81f9      	strh	r1, [r7, #14]
 80149f0:	4413      	add	r3, r2
 80149f2:	781b      	ldrb	r3, [r3, #0]
 80149f4:	061a      	lsls	r2, r3, #24
 80149f6:	687b      	ldr	r3, [r7, #4]
 80149f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80149fa:	431a      	orrs	r2, r3
 80149fc:	687b      	ldr	r3, [r7, #4]
 80149fe:	625a      	str	r2, [r3, #36]	@ 0x24

    return LORAMAC_PARSER_SUCCESS;
 8014a00:	2300      	movs	r3, #0
}
 8014a02:	4618      	mov	r0, r3
 8014a04:	3710      	adds	r7, #16
 8014a06:	46bd      	mov	sp, r7
 8014a08:	bd80      	pop	{r7, pc}

08014a0a <LoRaMacParserData>:

LoRaMacParserStatus_t LoRaMacParserData( LoRaMacMessageData_t* macMsg )
{
 8014a0a:	b580      	push	{r7, lr}
 8014a0c:	b084      	sub	sp, #16
 8014a0e:	af00      	add	r7, sp, #0
 8014a10:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8014a12:	687b      	ldr	r3, [r7, #4]
 8014a14:	2b00      	cmp	r3, #0
 8014a16:	d003      	beq.n	8014a20 <LoRaMacParserData+0x16>
 8014a18:	687b      	ldr	r3, [r7, #4]
 8014a1a:	681b      	ldr	r3, [r3, #0]
 8014a1c:	2b00      	cmp	r3, #0
 8014a1e:	d101      	bne.n	8014a24 <LoRaMacParserData+0x1a>
    {
        return LORAMAC_PARSER_ERROR_NPE;
 8014a20:	2302      	movs	r3, #2
 8014a22:	e0e0      	b.n	8014be6 <LoRaMacParserData+0x1dc>
    }

    uint16_t bufItr = 0;
 8014a24:	2300      	movs	r3, #0
 8014a26:	81fb      	strh	r3, [r7, #14]

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 8014a28:	687b      	ldr	r3, [r7, #4]
 8014a2a:	681a      	ldr	r2, [r3, #0]
 8014a2c:	89fb      	ldrh	r3, [r7, #14]
 8014a2e:	1c59      	adds	r1, r3, #1
 8014a30:	81f9      	strh	r1, [r7, #14]
 8014a32:	4413      	add	r3, r2
 8014a34:	781a      	ldrb	r2, [r3, #0]
 8014a36:	687b      	ldr	r3, [r7, #4]
 8014a38:	715a      	strb	r2, [r3, #5]

    macMsg->FHDR.DevAddr = macMsg->Buffer[bufItr++];
 8014a3a:	687b      	ldr	r3, [r7, #4]
 8014a3c:	681a      	ldr	r2, [r3, #0]
 8014a3e:	89fb      	ldrh	r3, [r7, #14]
 8014a40:	1c59      	adds	r1, r3, #1
 8014a42:	81f9      	strh	r1, [r7, #14]
 8014a44:	4413      	add	r3, r2
 8014a46:	781b      	ldrb	r3, [r3, #0]
 8014a48:	461a      	mov	r2, r3
 8014a4a:	687b      	ldr	r3, [r7, #4]
 8014a4c:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8014a4e:	687b      	ldr	r3, [r7, #4]
 8014a50:	681a      	ldr	r2, [r3, #0]
 8014a52:	89fb      	ldrh	r3, [r7, #14]
 8014a54:	1c59      	adds	r1, r3, #1
 8014a56:	81f9      	strh	r1, [r7, #14]
 8014a58:	4413      	add	r3, r2
 8014a5a:	781b      	ldrb	r3, [r3, #0]
 8014a5c:	021a      	lsls	r2, r3, #8
 8014a5e:	687b      	ldr	r3, [r7, #4]
 8014a60:	689b      	ldr	r3, [r3, #8]
 8014a62:	431a      	orrs	r2, r3
 8014a64:	687b      	ldr	r3, [r7, #4]
 8014a66:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8014a68:	687b      	ldr	r3, [r7, #4]
 8014a6a:	681a      	ldr	r2, [r3, #0]
 8014a6c:	89fb      	ldrh	r3, [r7, #14]
 8014a6e:	1c59      	adds	r1, r3, #1
 8014a70:	81f9      	strh	r1, [r7, #14]
 8014a72:	4413      	add	r3, r2
 8014a74:	781b      	ldrb	r3, [r3, #0]
 8014a76:	041a      	lsls	r2, r3, #16
 8014a78:	687b      	ldr	r3, [r7, #4]
 8014a7a:	689b      	ldr	r3, [r3, #8]
 8014a7c:	431a      	orrs	r2, r3
 8014a7e:	687b      	ldr	r3, [r7, #4]
 8014a80:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 8014a82:	687b      	ldr	r3, [r7, #4]
 8014a84:	681a      	ldr	r2, [r3, #0]
 8014a86:	89fb      	ldrh	r3, [r7, #14]
 8014a88:	1c59      	adds	r1, r3, #1
 8014a8a:	81f9      	strh	r1, [r7, #14]
 8014a8c:	4413      	add	r3, r2
 8014a8e:	781b      	ldrb	r3, [r3, #0]
 8014a90:	061a      	lsls	r2, r3, #24
 8014a92:	687b      	ldr	r3, [r7, #4]
 8014a94:	689b      	ldr	r3, [r3, #8]
 8014a96:	431a      	orrs	r2, r3
 8014a98:	687b      	ldr	r3, [r7, #4]
 8014a9a:	609a      	str	r2, [r3, #8]

    macMsg->FHDR.FCtrl.Value = macMsg->Buffer[bufItr++];
 8014a9c:	687b      	ldr	r3, [r7, #4]
 8014a9e:	681a      	ldr	r2, [r3, #0]
 8014aa0:	89fb      	ldrh	r3, [r7, #14]
 8014aa2:	1c59      	adds	r1, r3, #1
 8014aa4:	81f9      	strh	r1, [r7, #14]
 8014aa6:	4413      	add	r3, r2
 8014aa8:	781a      	ldrb	r2, [r3, #0]
 8014aaa:	687b      	ldr	r3, [r7, #4]
 8014aac:	731a      	strb	r2, [r3, #12]

    macMsg->FHDR.FCnt = macMsg->Buffer[bufItr++];
 8014aae:	687b      	ldr	r3, [r7, #4]
 8014ab0:	681a      	ldr	r2, [r3, #0]
 8014ab2:	89fb      	ldrh	r3, [r7, #14]
 8014ab4:	1c59      	adds	r1, r3, #1
 8014ab6:	81f9      	strh	r1, [r7, #14]
 8014ab8:	4413      	add	r3, r2
 8014aba:	781b      	ldrb	r3, [r3, #0]
 8014abc:	461a      	mov	r2, r3
 8014abe:	687b      	ldr	r3, [r7, #4]
 8014ac0:	81da      	strh	r2, [r3, #14]
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;
 8014ac2:	687b      	ldr	r3, [r7, #4]
 8014ac4:	681a      	ldr	r2, [r3, #0]
 8014ac6:	89fb      	ldrh	r3, [r7, #14]
 8014ac8:	1c59      	adds	r1, r3, #1
 8014aca:	81f9      	strh	r1, [r7, #14]
 8014acc:	4413      	add	r3, r2
 8014ace:	781b      	ldrb	r3, [r3, #0]
 8014ad0:	0219      	lsls	r1, r3, #8
 8014ad2:	687b      	ldr	r3, [r7, #4]
 8014ad4:	89db      	ldrh	r3, [r3, #14]
 8014ad6:	b21a      	sxth	r2, r3
 8014ad8:	b20b      	sxth	r3, r1
 8014ada:	4313      	orrs	r3, r2
 8014adc:	b21b      	sxth	r3, r3
 8014ade:	b29a      	uxth	r2, r3
 8014ae0:	687b      	ldr	r3, [r7, #4]
 8014ae2:	81da      	strh	r2, [r3, #14]

    if( macMsg->FHDR.FCtrl.Bits.FOptsLen <= 15 )
    {
        memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 8014ae4:	687b      	ldr	r3, [r7, #4]
 8014ae6:	f103 0010 	add.w	r0, r3, #16
 8014aea:	687b      	ldr	r3, [r7, #4]
 8014aec:	681a      	ldr	r2, [r3, #0]
 8014aee:	89fb      	ldrh	r3, [r7, #14]
 8014af0:	18d1      	adds	r1, r2, r3
 8014af2:	687b      	ldr	r3, [r7, #4]
 8014af4:	7b1b      	ldrb	r3, [r3, #12]
 8014af6:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8014afa:	b2db      	uxtb	r3, r3
 8014afc:	461a      	mov	r2, r3
 8014afe:	f002 fc9e 	bl	801743e <memcpy1>
        bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8014b02:	687b      	ldr	r3, [r7, #4]
 8014b04:	7b1b      	ldrb	r3, [r3, #12]
 8014b06:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8014b0a:	b2db      	uxtb	r3, r3
 8014b0c:	461a      	mov	r2, r3
 8014b0e:	89fb      	ldrh	r3, [r7, #14]
 8014b10:	4413      	add	r3, r2
 8014b12:	81fb      	strh	r3, [r7, #14]
    {
        return LORAMAC_PARSER_FAIL;
    }

    // Initialize anyway with zero.
    macMsg->FPort = 0;
 8014b14:	687b      	ldr	r3, [r7, #4]
 8014b16:	2200      	movs	r2, #0
 8014b18:	f883 2020 	strb.w	r2, [r3, #32]
    macMsg->FRMPayloadSize = 0;
 8014b1c:	687b      	ldr	r3, [r7, #4]
 8014b1e:	2200      	movs	r2, #0
 8014b20:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

    if( ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE ) > 0 )
 8014b24:	687b      	ldr	r3, [r7, #4]
 8014b26:	791b      	ldrb	r3, [r3, #4]
 8014b28:	461a      	mov	r2, r3
 8014b2a:	89fb      	ldrh	r3, [r7, #14]
 8014b2c:	1ad3      	subs	r3, r2, r3
 8014b2e:	2b04      	cmp	r3, #4
 8014b30:	dd27      	ble.n	8014b82 <LoRaMacParserData+0x178>
    {
        macMsg->FPort = macMsg->Buffer[bufItr++];
 8014b32:	687b      	ldr	r3, [r7, #4]
 8014b34:	681a      	ldr	r2, [r3, #0]
 8014b36:	89fb      	ldrh	r3, [r7, #14]
 8014b38:	1c59      	adds	r1, r3, #1
 8014b3a:	81f9      	strh	r1, [r7, #14]
 8014b3c:	4413      	add	r3, r2
 8014b3e:	781a      	ldrb	r2, [r3, #0]
 8014b40:	687b      	ldr	r3, [r7, #4]
 8014b42:	f883 2020 	strb.w	r2, [r3, #32]

        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
 8014b46:	687b      	ldr	r3, [r7, #4]
 8014b48:	791a      	ldrb	r2, [r3, #4]
 8014b4a:	89fb      	ldrh	r3, [r7, #14]
 8014b4c:	b2db      	uxtb	r3, r3
 8014b4e:	1ad3      	subs	r3, r2, r3
 8014b50:	b2db      	uxtb	r3, r3
 8014b52:	3b04      	subs	r3, #4
 8014b54:	b2da      	uxtb	r2, r3
 8014b56:	687b      	ldr	r3, [r7, #4]
 8014b58:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        memcpy1( macMsg->FRMPayload, &macMsg->Buffer[bufItr], macMsg->FRMPayloadSize );
 8014b5c:	687b      	ldr	r3, [r7, #4]
 8014b5e:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8014b60:	687b      	ldr	r3, [r7, #4]
 8014b62:	681a      	ldr	r2, [r3, #0]
 8014b64:	89fb      	ldrh	r3, [r7, #14]
 8014b66:	18d1      	adds	r1, r2, r3
 8014b68:	687b      	ldr	r3, [r7, #4]
 8014b6a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8014b6e:	461a      	mov	r2, r3
 8014b70:	f002 fc65 	bl	801743e <memcpy1>
        bufItr = bufItr + macMsg->FRMPayloadSize;
 8014b74:	687b      	ldr	r3, [r7, #4]
 8014b76:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8014b7a:	461a      	mov	r2, r3
 8014b7c:	89fb      	ldrh	r3, [r7, #14]
 8014b7e:	4413      	add	r3, r2
 8014b80:	81fb      	strh	r3, [r7, #14]
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE )];
 8014b82:	687b      	ldr	r3, [r7, #4]
 8014b84:	681a      	ldr	r2, [r3, #0]
 8014b86:	687b      	ldr	r3, [r7, #4]
 8014b88:	791b      	ldrb	r3, [r3, #4]
 8014b8a:	3b04      	subs	r3, #4
 8014b8c:	4413      	add	r3, r2
 8014b8e:	781b      	ldrb	r3, [r3, #0]
 8014b90:	461a      	mov	r2, r3
 8014b92:	687b      	ldr	r3, [r7, #4]
 8014b94:	62da      	str	r2, [r3, #44]	@ 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 1] << 8 );
 8014b96:	687b      	ldr	r3, [r7, #4]
 8014b98:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014b9a:	687b      	ldr	r3, [r7, #4]
 8014b9c:	6819      	ldr	r1, [r3, #0]
 8014b9e:	687b      	ldr	r3, [r7, #4]
 8014ba0:	791b      	ldrb	r3, [r3, #4]
 8014ba2:	3b03      	subs	r3, #3
 8014ba4:	440b      	add	r3, r1
 8014ba6:	781b      	ldrb	r3, [r3, #0]
 8014ba8:	021b      	lsls	r3, r3, #8
 8014baa:	431a      	orrs	r2, r3
 8014bac:	687b      	ldr	r3, [r7, #4]
 8014bae:	62da      	str	r2, [r3, #44]	@ 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 2] << 16 );
 8014bb0:	687b      	ldr	r3, [r7, #4]
 8014bb2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014bb4:	687b      	ldr	r3, [r7, #4]
 8014bb6:	6819      	ldr	r1, [r3, #0]
 8014bb8:	687b      	ldr	r3, [r7, #4]
 8014bba:	791b      	ldrb	r3, [r3, #4]
 8014bbc:	3b02      	subs	r3, #2
 8014bbe:	440b      	add	r3, r1
 8014bc0:	781b      	ldrb	r3, [r3, #0]
 8014bc2:	041b      	lsls	r3, r3, #16
 8014bc4:	431a      	orrs	r2, r3
 8014bc6:	687b      	ldr	r3, [r7, #4]
 8014bc8:	62da      	str	r2, [r3, #44]	@ 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 3] << 24 );
 8014bca:	687b      	ldr	r3, [r7, #4]
 8014bcc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014bce:	687b      	ldr	r3, [r7, #4]
 8014bd0:	6819      	ldr	r1, [r3, #0]
 8014bd2:	687b      	ldr	r3, [r7, #4]
 8014bd4:	791b      	ldrb	r3, [r3, #4]
 8014bd6:	3b01      	subs	r3, #1
 8014bd8:	440b      	add	r3, r1
 8014bda:	781b      	ldrb	r3, [r3, #0]
 8014bdc:	061b      	lsls	r3, r3, #24
 8014bde:	431a      	orrs	r2, r3
 8014be0:	687b      	ldr	r3, [r7, #4]
 8014be2:	62da      	str	r2, [r3, #44]	@ 0x2c

    return LORAMAC_PARSER_SUCCESS;
 8014be4:	2300      	movs	r3, #0
}
 8014be6:	4618      	mov	r0, r3
 8014be8:	3710      	adds	r7, #16
 8014bea:	46bd      	mov	sp, r7
 8014bec:	bd80      	pop	{r7, pc}

08014bee <LoRaMacSerializerJoinRequest>:
 */
#include "LoRaMacSerializer.h"
#include "utilities.h"

LoRaMacSerializerStatus_t LoRaMacSerializerJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 8014bee:	b580      	push	{r7, lr}
 8014bf0:	b084      	sub	sp, #16
 8014bf2:	af00      	add	r7, sp, #0
 8014bf4:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8014bf6:	687b      	ldr	r3, [r7, #4]
 8014bf8:	2b00      	cmp	r3, #0
 8014bfa:	d003      	beq.n	8014c04 <LoRaMacSerializerJoinRequest+0x16>
 8014bfc:	687b      	ldr	r3, [r7, #4]
 8014bfe:	681b      	ldr	r3, [r3, #0]
 8014c00:	2b00      	cmp	r3, #0
 8014c02:	d101      	bne.n	8014c08 <LoRaMacSerializerJoinRequest+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 8014c04:	2301      	movs	r3, #1
 8014c06:	e070      	b.n	8014cea <LoRaMacSerializerJoinRequest+0xfc>
    }

    uint16_t bufItr = 0;
 8014c08:	2300      	movs	r3, #0
 8014c0a:	81fb      	strh	r3, [r7, #14]

    // Check macMsg->BufSize
    if( macMsg->BufSize < LORAMAC_JOIN_REQ_MSG_SIZE )
 8014c0c:	687b      	ldr	r3, [r7, #4]
 8014c0e:	791b      	ldrb	r3, [r3, #4]
 8014c10:	2b16      	cmp	r3, #22
 8014c12:	d801      	bhi.n	8014c18 <LoRaMacSerializerJoinRequest+0x2a>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 8014c14:	2302      	movs	r3, #2
 8014c16:	e068      	b.n	8014cea <LoRaMacSerializerJoinRequest+0xfc>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 8014c18:	687b      	ldr	r3, [r7, #4]
 8014c1a:	681a      	ldr	r2, [r3, #0]
 8014c1c:	89fb      	ldrh	r3, [r7, #14]
 8014c1e:	1c59      	adds	r1, r3, #1
 8014c20:	81f9      	strh	r1, [r7, #14]
 8014c22:	4413      	add	r3, r2
 8014c24:	687a      	ldr	r2, [r7, #4]
 8014c26:	7952      	ldrb	r2, [r2, #5]
 8014c28:	701a      	strb	r2, [r3, #0]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->JoinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
 8014c2a:	687b      	ldr	r3, [r7, #4]
 8014c2c:	681a      	ldr	r2, [r3, #0]
 8014c2e:	89fb      	ldrh	r3, [r7, #14]
 8014c30:	18d0      	adds	r0, r2, r3
 8014c32:	687b      	ldr	r3, [r7, #4]
 8014c34:	3306      	adds	r3, #6
 8014c36:	2208      	movs	r2, #8
 8014c38:	4619      	mov	r1, r3
 8014c3a:	f002 fc1b 	bl	8017474 <memcpyr>
    bufItr += LORAMAC_JOIN_EUI_FIELD_SIZE;
 8014c3e:	89fb      	ldrh	r3, [r7, #14]
 8014c40:	3308      	adds	r3, #8
 8014c42:	81fb      	strh	r3, [r7, #14]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->DevEUI, LORAMAC_DEV_EUI_FIELD_SIZE );
 8014c44:	687b      	ldr	r3, [r7, #4]
 8014c46:	681a      	ldr	r2, [r3, #0]
 8014c48:	89fb      	ldrh	r3, [r7, #14]
 8014c4a:	18d0      	adds	r0, r2, r3
 8014c4c:	687b      	ldr	r3, [r7, #4]
 8014c4e:	330e      	adds	r3, #14
 8014c50:	2208      	movs	r2, #8
 8014c52:	4619      	mov	r1, r3
 8014c54:	f002 fc0e 	bl	8017474 <memcpyr>
    bufItr += LORAMAC_DEV_EUI_FIELD_SIZE;
 8014c58:	89fb      	ldrh	r3, [r7, #14]
 8014c5a:	3308      	adds	r3, #8
 8014c5c:	81fb      	strh	r3, [r7, #14]

    macMsg->Buffer[bufItr++] = macMsg->DevNonce & 0xFF;
 8014c5e:	687b      	ldr	r3, [r7, #4]
 8014c60:	8ad9      	ldrh	r1, [r3, #22]
 8014c62:	687b      	ldr	r3, [r7, #4]
 8014c64:	681a      	ldr	r2, [r3, #0]
 8014c66:	89fb      	ldrh	r3, [r7, #14]
 8014c68:	1c58      	adds	r0, r3, #1
 8014c6a:	81f8      	strh	r0, [r7, #14]
 8014c6c:	4413      	add	r3, r2
 8014c6e:	b2ca      	uxtb	r2, r1
 8014c70:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->DevNonce >> 8 ) & 0xFF;
 8014c72:	687b      	ldr	r3, [r7, #4]
 8014c74:	8adb      	ldrh	r3, [r3, #22]
 8014c76:	0a1b      	lsrs	r3, r3, #8
 8014c78:	b299      	uxth	r1, r3
 8014c7a:	687b      	ldr	r3, [r7, #4]
 8014c7c:	681a      	ldr	r2, [r3, #0]
 8014c7e:	89fb      	ldrh	r3, [r7, #14]
 8014c80:	1c58      	adds	r0, r3, #1
 8014c82:	81f8      	strh	r0, [r7, #14]
 8014c84:	4413      	add	r3, r2
 8014c86:	b2ca      	uxtb	r2, r1
 8014c88:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 8014c8a:	687b      	ldr	r3, [r7, #4]
 8014c8c:	6999      	ldr	r1, [r3, #24]
 8014c8e:	687b      	ldr	r3, [r7, #4]
 8014c90:	681a      	ldr	r2, [r3, #0]
 8014c92:	89fb      	ldrh	r3, [r7, #14]
 8014c94:	1c58      	adds	r0, r3, #1
 8014c96:	81f8      	strh	r0, [r7, #14]
 8014c98:	4413      	add	r3, r2
 8014c9a:	b2ca      	uxtb	r2, r1
 8014c9c:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 8014c9e:	687b      	ldr	r3, [r7, #4]
 8014ca0:	699b      	ldr	r3, [r3, #24]
 8014ca2:	0a19      	lsrs	r1, r3, #8
 8014ca4:	687b      	ldr	r3, [r7, #4]
 8014ca6:	681a      	ldr	r2, [r3, #0]
 8014ca8:	89fb      	ldrh	r3, [r7, #14]
 8014caa:	1c58      	adds	r0, r3, #1
 8014cac:	81f8      	strh	r0, [r7, #14]
 8014cae:	4413      	add	r3, r2
 8014cb0:	b2ca      	uxtb	r2, r1
 8014cb2:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 8014cb4:	687b      	ldr	r3, [r7, #4]
 8014cb6:	699b      	ldr	r3, [r3, #24]
 8014cb8:	0c19      	lsrs	r1, r3, #16
 8014cba:	687b      	ldr	r3, [r7, #4]
 8014cbc:	681a      	ldr	r2, [r3, #0]
 8014cbe:	89fb      	ldrh	r3, [r7, #14]
 8014cc0:	1c58      	adds	r0, r3, #1
 8014cc2:	81f8      	strh	r0, [r7, #14]
 8014cc4:	4413      	add	r3, r2
 8014cc6:	b2ca      	uxtb	r2, r1
 8014cc8:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 8014cca:	687b      	ldr	r3, [r7, #4]
 8014ccc:	699b      	ldr	r3, [r3, #24]
 8014cce:	0e19      	lsrs	r1, r3, #24
 8014cd0:	687b      	ldr	r3, [r7, #4]
 8014cd2:	681a      	ldr	r2, [r3, #0]
 8014cd4:	89fb      	ldrh	r3, [r7, #14]
 8014cd6:	1c58      	adds	r0, r3, #1
 8014cd8:	81f8      	strh	r0, [r7, #14]
 8014cda:	4413      	add	r3, r2
 8014cdc:	b2ca      	uxtb	r2, r1
 8014cde:	701a      	strb	r2, [r3, #0]

    macMsg->BufSize = bufItr;
 8014ce0:	89fb      	ldrh	r3, [r7, #14]
 8014ce2:	b2da      	uxtb	r2, r3
 8014ce4:	687b      	ldr	r3, [r7, #4]
 8014ce6:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 8014ce8:	2300      	movs	r3, #0
}
 8014cea:	4618      	mov	r0, r3
 8014cec:	3710      	adds	r7, #16
 8014cee:	46bd      	mov	sp, r7
 8014cf0:	bd80      	pop	{r7, pc}

08014cf2 <LoRaMacSerializerData>:

    return LORAMAC_SERIALIZER_SUCCESS;
}

LoRaMacSerializerStatus_t LoRaMacSerializerData( LoRaMacMessageData_t* macMsg )
{
 8014cf2:	b580      	push	{r7, lr}
 8014cf4:	b084      	sub	sp, #16
 8014cf6:	af00      	add	r7, sp, #0
 8014cf8:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8014cfa:	687b      	ldr	r3, [r7, #4]
 8014cfc:	2b00      	cmp	r3, #0
 8014cfe:	d003      	beq.n	8014d08 <LoRaMacSerializerData+0x16>
 8014d00:	687b      	ldr	r3, [r7, #4]
 8014d02:	681b      	ldr	r3, [r3, #0]
 8014d04:	2b00      	cmp	r3, #0
 8014d06:	d101      	bne.n	8014d0c <LoRaMacSerializerData+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 8014d08:	2301      	movs	r3, #1
 8014d0a:	e0e3      	b.n	8014ed4 <LoRaMacSerializerData+0x1e2>
    }

    uint16_t bufItr = 0;
 8014d0c:	2300      	movs	r3, #0
 8014d0e:	81fb      	strh	r3, [r7, #14]

    // Check macMsg->BufSize
    uint16_t computedBufSize =   LORAMAC_MHDR_FIELD_SIZE
 8014d10:	2308      	movs	r3, #8
 8014d12:	81bb      	strh	r3, [r7, #12]
                               + LORAMAC_FHDR_DEV_ADDR_FIELD_SIZE
                               + LORAMAC_FHDR_F_CTRL_FIELD_SIZE
                               + LORAMAC_FHDR_F_CNT_FIELD_SIZE;

    computedBufSize += macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8014d14:	687b      	ldr	r3, [r7, #4]
 8014d16:	7b1b      	ldrb	r3, [r3, #12]
 8014d18:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8014d1c:	b2db      	uxtb	r3, r3
 8014d1e:	461a      	mov	r2, r3
 8014d20:	89bb      	ldrh	r3, [r7, #12]
 8014d22:	4413      	add	r3, r2
 8014d24:	81bb      	strh	r3, [r7, #12]

    if( macMsg->FRMPayloadSize > 0 )
 8014d26:	687b      	ldr	r3, [r7, #4]
 8014d28:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8014d2c:	2b00      	cmp	r3, #0
 8014d2e:	d002      	beq.n	8014d36 <LoRaMacSerializerData+0x44>
    {
        computedBufSize += LORAMAC_F_PORT_FIELD_SIZE;
 8014d30:	89bb      	ldrh	r3, [r7, #12]
 8014d32:	3301      	adds	r3, #1
 8014d34:	81bb      	strh	r3, [r7, #12]
    }

    computedBufSize += macMsg->FRMPayloadSize;
 8014d36:	687b      	ldr	r3, [r7, #4]
 8014d38:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8014d3c:	461a      	mov	r2, r3
 8014d3e:	89bb      	ldrh	r3, [r7, #12]
 8014d40:	4413      	add	r3, r2
 8014d42:	81bb      	strh	r3, [r7, #12]
    computedBufSize += LORAMAC_MIC_FIELD_SIZE;
 8014d44:	89bb      	ldrh	r3, [r7, #12]
 8014d46:	3304      	adds	r3, #4
 8014d48:	81bb      	strh	r3, [r7, #12]

    if( macMsg->BufSize < computedBufSize )
 8014d4a:	687b      	ldr	r3, [r7, #4]
 8014d4c:	791b      	ldrb	r3, [r3, #4]
 8014d4e:	461a      	mov	r2, r3
 8014d50:	89bb      	ldrh	r3, [r7, #12]
 8014d52:	4293      	cmp	r3, r2
 8014d54:	d901      	bls.n	8014d5a <LoRaMacSerializerData+0x68>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 8014d56:	2302      	movs	r3, #2
 8014d58:	e0bc      	b.n	8014ed4 <LoRaMacSerializerData+0x1e2>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 8014d5a:	687b      	ldr	r3, [r7, #4]
 8014d5c:	681a      	ldr	r2, [r3, #0]
 8014d5e:	89fb      	ldrh	r3, [r7, #14]
 8014d60:	1c59      	adds	r1, r3, #1
 8014d62:	81f9      	strh	r1, [r7, #14]
 8014d64:	4413      	add	r3, r2
 8014d66:	687a      	ldr	r2, [r7, #4]
 8014d68:	7952      	ldrb	r2, [r2, #5]
 8014d6a:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr ) & 0xFF;
 8014d6c:	687b      	ldr	r3, [r7, #4]
 8014d6e:	6899      	ldr	r1, [r3, #8]
 8014d70:	687b      	ldr	r3, [r7, #4]
 8014d72:	681a      	ldr	r2, [r3, #0]
 8014d74:	89fb      	ldrh	r3, [r7, #14]
 8014d76:	1c58      	adds	r0, r3, #1
 8014d78:	81f8      	strh	r0, [r7, #14]
 8014d7a:	4413      	add	r3, r2
 8014d7c:	b2ca      	uxtb	r2, r1
 8014d7e:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 8 ) & 0xFF;
 8014d80:	687b      	ldr	r3, [r7, #4]
 8014d82:	689b      	ldr	r3, [r3, #8]
 8014d84:	0a19      	lsrs	r1, r3, #8
 8014d86:	687b      	ldr	r3, [r7, #4]
 8014d88:	681a      	ldr	r2, [r3, #0]
 8014d8a:	89fb      	ldrh	r3, [r7, #14]
 8014d8c:	1c58      	adds	r0, r3, #1
 8014d8e:	81f8      	strh	r0, [r7, #14]
 8014d90:	4413      	add	r3, r2
 8014d92:	b2ca      	uxtb	r2, r1
 8014d94:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 16 ) & 0xFF;
 8014d96:	687b      	ldr	r3, [r7, #4]
 8014d98:	689b      	ldr	r3, [r3, #8]
 8014d9a:	0c19      	lsrs	r1, r3, #16
 8014d9c:	687b      	ldr	r3, [r7, #4]
 8014d9e:	681a      	ldr	r2, [r3, #0]
 8014da0:	89fb      	ldrh	r3, [r7, #14]
 8014da2:	1c58      	adds	r0, r3, #1
 8014da4:	81f8      	strh	r0, [r7, #14]
 8014da6:	4413      	add	r3, r2
 8014da8:	b2ca      	uxtb	r2, r1
 8014daa:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 24 ) & 0xFF;
 8014dac:	687b      	ldr	r3, [r7, #4]
 8014dae:	689b      	ldr	r3, [r3, #8]
 8014db0:	0e19      	lsrs	r1, r3, #24
 8014db2:	687b      	ldr	r3, [r7, #4]
 8014db4:	681a      	ldr	r2, [r3, #0]
 8014db6:	89fb      	ldrh	r3, [r7, #14]
 8014db8:	1c58      	adds	r0, r3, #1
 8014dba:	81f8      	strh	r0, [r7, #14]
 8014dbc:	4413      	add	r3, r2
 8014dbe:	b2ca      	uxtb	r2, r1
 8014dc0:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCtrl.Value;
 8014dc2:	687b      	ldr	r3, [r7, #4]
 8014dc4:	681a      	ldr	r2, [r3, #0]
 8014dc6:	89fb      	ldrh	r3, [r7, #14]
 8014dc8:	1c59      	adds	r1, r3, #1
 8014dca:	81f9      	strh	r1, [r7, #14]
 8014dcc:	4413      	add	r3, r2
 8014dce:	687a      	ldr	r2, [r7, #4]
 8014dd0:	7b12      	ldrb	r2, [r2, #12]
 8014dd2:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCnt & 0xFF;
 8014dd4:	687b      	ldr	r3, [r7, #4]
 8014dd6:	89d9      	ldrh	r1, [r3, #14]
 8014dd8:	687b      	ldr	r3, [r7, #4]
 8014dda:	681a      	ldr	r2, [r3, #0]
 8014ddc:	89fb      	ldrh	r3, [r7, #14]
 8014dde:	1c58      	adds	r0, r3, #1
 8014de0:	81f8      	strh	r0, [r7, #14]
 8014de2:	4413      	add	r3, r2
 8014de4:	b2ca      	uxtb	r2, r1
 8014de6:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.FCnt >> 8 ) & 0xFF;
 8014de8:	687b      	ldr	r3, [r7, #4]
 8014dea:	89db      	ldrh	r3, [r3, #14]
 8014dec:	0a1b      	lsrs	r3, r3, #8
 8014dee:	b299      	uxth	r1, r3
 8014df0:	687b      	ldr	r3, [r7, #4]
 8014df2:	681a      	ldr	r2, [r3, #0]
 8014df4:	89fb      	ldrh	r3, [r7, #14]
 8014df6:	1c58      	adds	r0, r3, #1
 8014df8:	81f8      	strh	r0, [r7, #14]
 8014dfa:	4413      	add	r3, r2
 8014dfc:	b2ca      	uxtb	r2, r1
 8014dfe:	701a      	strb	r2, [r3, #0]

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FHDR.FOpts, macMsg->FHDR.FCtrl.Bits.FOptsLen );
 8014e00:	687b      	ldr	r3, [r7, #4]
 8014e02:	681a      	ldr	r2, [r3, #0]
 8014e04:	89fb      	ldrh	r3, [r7, #14]
 8014e06:	18d0      	adds	r0, r2, r3
 8014e08:	687b      	ldr	r3, [r7, #4]
 8014e0a:	f103 0110 	add.w	r1, r3, #16
 8014e0e:	687b      	ldr	r3, [r7, #4]
 8014e10:	7b1b      	ldrb	r3, [r3, #12]
 8014e12:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8014e16:	b2db      	uxtb	r3, r3
 8014e18:	461a      	mov	r2, r3
 8014e1a:	f002 fb10 	bl	801743e <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8014e1e:	687b      	ldr	r3, [r7, #4]
 8014e20:	7b1b      	ldrb	r3, [r3, #12]
 8014e22:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8014e26:	b2db      	uxtb	r3, r3
 8014e28:	461a      	mov	r2, r3
 8014e2a:	89fb      	ldrh	r3, [r7, #14]
 8014e2c:	4413      	add	r3, r2
 8014e2e:	81fb      	strh	r3, [r7, #14]

    if( macMsg->FRMPayloadSize > 0 )
 8014e30:	687b      	ldr	r3, [r7, #4]
 8014e32:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8014e36:	2b00      	cmp	r3, #0
 8014e38:	d009      	beq.n	8014e4e <LoRaMacSerializerData+0x15c>
    {
        macMsg->Buffer[bufItr++] = macMsg->FPort;
 8014e3a:	687b      	ldr	r3, [r7, #4]
 8014e3c:	681a      	ldr	r2, [r3, #0]
 8014e3e:	89fb      	ldrh	r3, [r7, #14]
 8014e40:	1c59      	adds	r1, r3, #1
 8014e42:	81f9      	strh	r1, [r7, #14]
 8014e44:	4413      	add	r3, r2
 8014e46:	687a      	ldr	r2, [r7, #4]
 8014e48:	f892 2020 	ldrb.w	r2, [r2, #32]
 8014e4c:	701a      	strb	r2, [r3, #0]
    }

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FRMPayload, macMsg->FRMPayloadSize );
 8014e4e:	687b      	ldr	r3, [r7, #4]
 8014e50:	681a      	ldr	r2, [r3, #0]
 8014e52:	89fb      	ldrh	r3, [r7, #14]
 8014e54:	18d0      	adds	r0, r2, r3
 8014e56:	687b      	ldr	r3, [r7, #4]
 8014e58:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8014e5a:	687b      	ldr	r3, [r7, #4]
 8014e5c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8014e60:	461a      	mov	r2, r3
 8014e62:	f002 faec 	bl	801743e <memcpy1>
    bufItr = bufItr + macMsg->FRMPayloadSize;
 8014e66:	687b      	ldr	r3, [r7, #4]
 8014e68:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8014e6c:	461a      	mov	r2, r3
 8014e6e:	89fb      	ldrh	r3, [r7, #14]
 8014e70:	4413      	add	r3, r2
 8014e72:	81fb      	strh	r3, [r7, #14]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 8014e74:	687b      	ldr	r3, [r7, #4]
 8014e76:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8014e78:	687b      	ldr	r3, [r7, #4]
 8014e7a:	681a      	ldr	r2, [r3, #0]
 8014e7c:	89fb      	ldrh	r3, [r7, #14]
 8014e7e:	1c58      	adds	r0, r3, #1
 8014e80:	81f8      	strh	r0, [r7, #14]
 8014e82:	4413      	add	r3, r2
 8014e84:	b2ca      	uxtb	r2, r1
 8014e86:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 8014e88:	687b      	ldr	r3, [r7, #4]
 8014e8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014e8c:	0a19      	lsrs	r1, r3, #8
 8014e8e:	687b      	ldr	r3, [r7, #4]
 8014e90:	681a      	ldr	r2, [r3, #0]
 8014e92:	89fb      	ldrh	r3, [r7, #14]
 8014e94:	1c58      	adds	r0, r3, #1
 8014e96:	81f8      	strh	r0, [r7, #14]
 8014e98:	4413      	add	r3, r2
 8014e9a:	b2ca      	uxtb	r2, r1
 8014e9c:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 8014e9e:	687b      	ldr	r3, [r7, #4]
 8014ea0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014ea2:	0c19      	lsrs	r1, r3, #16
 8014ea4:	687b      	ldr	r3, [r7, #4]
 8014ea6:	681a      	ldr	r2, [r3, #0]
 8014ea8:	89fb      	ldrh	r3, [r7, #14]
 8014eaa:	1c58      	adds	r0, r3, #1
 8014eac:	81f8      	strh	r0, [r7, #14]
 8014eae:	4413      	add	r3, r2
 8014eb0:	b2ca      	uxtb	r2, r1
 8014eb2:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 8014eb4:	687b      	ldr	r3, [r7, #4]
 8014eb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014eb8:	0e19      	lsrs	r1, r3, #24
 8014eba:	687b      	ldr	r3, [r7, #4]
 8014ebc:	681a      	ldr	r2, [r3, #0]
 8014ebe:	89fb      	ldrh	r3, [r7, #14]
 8014ec0:	1c58      	adds	r0, r3, #1
 8014ec2:	81f8      	strh	r0, [r7, #14]
 8014ec4:	4413      	add	r3, r2
 8014ec6:	b2ca      	uxtb	r2, r1
 8014ec8:	701a      	strb	r2, [r3, #0]

    macMsg->BufSize = bufItr;
 8014eca:	89fb      	ldrh	r3, [r7, #14]
 8014ecc:	b2da      	uxtb	r2, r3
 8014ece:	687b      	ldr	r3, [r7, #4]
 8014ed0:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 8014ed2:	2300      	movs	r3, #0
}
 8014ed4:	4618      	mov	r0, r3
 8014ed6:	3710      	adds	r7, #16
 8014ed8:	46bd      	mov	sp, r7
 8014eda:	bd80      	pop	{r7, pc}

08014edc <RegionIsActive>:
#define RU864_APPLY_DR_OFFSET( )
#define RU864_RX_BEACON_SETUP( )
#endif

bool RegionIsActive( LoRaMacRegion_t region )
{
 8014edc:	b480      	push	{r7}
 8014ede:	b083      	sub	sp, #12
 8014ee0:	af00      	add	r7, sp, #0
 8014ee2:	4603      	mov	r3, r0
 8014ee4:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8014ee6:	79fb      	ldrb	r3, [r7, #7]
 8014ee8:	2b00      	cmp	r3, #0
 8014eea:	d101      	bne.n	8014ef0 <RegionIsActive+0x14>
    {
        AS923_IS_ACTIVE( );
 8014eec:	2301      	movs	r3, #1
 8014eee:	e000      	b.n	8014ef2 <RegionIsActive+0x16>
        IN865_IS_ACTIVE( );
        US915_IS_ACTIVE( );
        RU864_IS_ACTIVE( );
        default:
        {
            return false;
 8014ef0:	2300      	movs	r3, #0
        }
    }
}
 8014ef2:	4618      	mov	r0, r3
 8014ef4:	370c      	adds	r7, #12
 8014ef6:	46bd      	mov	sp, r7
 8014ef8:	bc80      	pop	{r7}
 8014efa:	4770      	bx	lr

08014efc <RegionGetPhyParam>:

PhyParam_t RegionGetPhyParam( LoRaMacRegion_t region, GetPhyParams_t* getPhy )
{
 8014efc:	b580      	push	{r7, lr}
 8014efe:	b084      	sub	sp, #16
 8014f00:	af00      	add	r7, sp, #0
 8014f02:	4603      	mov	r3, r0
 8014f04:	6039      	str	r1, [r7, #0]
 8014f06:	71fb      	strb	r3, [r7, #7]
    PhyParam_t phyParam = { 0 };
 8014f08:	2300      	movs	r3, #0
 8014f0a:	60bb      	str	r3, [r7, #8]
    switch( region )
 8014f0c:	79fb      	ldrb	r3, [r7, #7]
 8014f0e:	2b00      	cmp	r3, #0
 8014f10:	d105      	bne.n	8014f1e <RegionGetPhyParam+0x22>
    {
        AS923_GET_PHY_PARAM( );
 8014f12:	6838      	ldr	r0, [r7, #0]
 8014f14:	f000 f9ec 	bl	80152f0 <RegionAS923GetPhyParam>
 8014f18:	4603      	mov	r3, r0
 8014f1a:	60fb      	str	r3, [r7, #12]
 8014f1c:	e001      	b.n	8014f22 <RegionGetPhyParam+0x26>
        IN865_GET_PHY_PARAM( );
        US915_GET_PHY_PARAM( );
        RU864_GET_PHY_PARAM( );
        default:
        {
            return phyParam;
 8014f1e:	68bb      	ldr	r3, [r7, #8]
 8014f20:	60fb      	str	r3, [r7, #12]
        }
    }
}
 8014f22:	68fb      	ldr	r3, [r7, #12]
 8014f24:	4618      	mov	r0, r3
 8014f26:	3710      	adds	r7, #16
 8014f28:	46bd      	mov	sp, r7
 8014f2a:	bd80      	pop	{r7, pc}

08014f2c <RegionSetBandTxDone>:

void RegionSetBandTxDone( LoRaMacRegion_t region, SetBandTxDoneParams_t* txDone )
{
 8014f2c:	b580      	push	{r7, lr}
 8014f2e:	b082      	sub	sp, #8
 8014f30:	af00      	add	r7, sp, #0
 8014f32:	4603      	mov	r3, r0
 8014f34:	6039      	str	r1, [r7, #0]
 8014f36:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8014f38:	79fb      	ldrb	r3, [r7, #7]
 8014f3a:	2b00      	cmp	r3, #0
 8014f3c:	d103      	bne.n	8014f46 <RegionSetBandTxDone+0x1a>
    {
        AS923_SET_BAND_TX_DONE( );
 8014f3e:	6838      	ldr	r0, [r7, #0]
 8014f40:	f000 fb4c 	bl	80155dc <RegionAS923SetBandTxDone>
 8014f44:	e000      	b.n	8014f48 <RegionSetBandTxDone+0x1c>
        IN865_SET_BAND_TX_DONE( );
        US915_SET_BAND_TX_DONE( );
        RU864_SET_BAND_TX_DONE( );
        default:
        {
            return;
 8014f46:	bf00      	nop
        }
    }
}
 8014f48:	3708      	adds	r7, #8
 8014f4a:	46bd      	mov	sp, r7
 8014f4c:	bd80      	pop	{r7, pc}

08014f4e <RegionInitDefaults>:

void RegionInitDefaults( LoRaMacRegion_t region, InitDefaultsParams_t* params )
{
 8014f4e:	b580      	push	{r7, lr}
 8014f50:	b082      	sub	sp, #8
 8014f52:	af00      	add	r7, sp, #0
 8014f54:	4603      	mov	r3, r0
 8014f56:	6039      	str	r1, [r7, #0]
 8014f58:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8014f5a:	79fb      	ldrb	r3, [r7, #7]
 8014f5c:	2b00      	cmp	r3, #0
 8014f5e:	d103      	bne.n	8014f68 <RegionInitDefaults+0x1a>
    {
        AS923_INIT_DEFAULTS( );
 8014f60:	6838      	ldr	r0, [r7, #0]
 8014f62:	f000 fb67 	bl	8015634 <RegionAS923InitDefaults>
 8014f66:	e000      	b.n	8014f6a <RegionInitDefaults+0x1c>
        IN865_INIT_DEFAULTS( );
        US915_INIT_DEFAULTS( );
        RU864_INIT_DEFAULTS( );
        default:
        {
            break;
 8014f68:	bf00      	nop
        }
    }
}
 8014f6a:	bf00      	nop
 8014f6c:	3708      	adds	r7, #8
 8014f6e:	46bd      	mov	sp, r7
 8014f70:	bd80      	pop	{r7, pc}

08014f72 <RegionVerify>:

bool RegionVerify( LoRaMacRegion_t region, VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 8014f72:	b580      	push	{r7, lr}
 8014f74:	b082      	sub	sp, #8
 8014f76:	af00      	add	r7, sp, #0
 8014f78:	4603      	mov	r3, r0
 8014f7a:	6039      	str	r1, [r7, #0]
 8014f7c:	71fb      	strb	r3, [r7, #7]
 8014f7e:	4613      	mov	r3, r2
 8014f80:	71bb      	strb	r3, [r7, #6]
    switch( region )
 8014f82:	79fb      	ldrb	r3, [r7, #7]
 8014f84:	2b00      	cmp	r3, #0
 8014f86:	d106      	bne.n	8014f96 <RegionVerify+0x24>
    {
        AS923_VERIFY( );
 8014f88:	79bb      	ldrb	r3, [r7, #6]
 8014f8a:	4619      	mov	r1, r3
 8014f8c:	6838      	ldr	r0, [r7, #0]
 8014f8e:	f000 fbe3 	bl	8015758 <RegionAS923Verify>
 8014f92:	4603      	mov	r3, r0
 8014f94:	e000      	b.n	8014f98 <RegionVerify+0x26>
        IN865_VERIFY( );
        US915_VERIFY( );
        RU864_VERIFY( );
        default:
        {
            return false;
 8014f96:	2300      	movs	r3, #0
        }
    }
}
 8014f98:	4618      	mov	r0, r3
 8014f9a:	3708      	adds	r7, #8
 8014f9c:	46bd      	mov	sp, r7
 8014f9e:	bd80      	pop	{r7, pc}

08014fa0 <RegionApplyCFList>:

void RegionApplyCFList( LoRaMacRegion_t region, ApplyCFListParams_t* applyCFList )
{
 8014fa0:	b580      	push	{r7, lr}
 8014fa2:	b082      	sub	sp, #8
 8014fa4:	af00      	add	r7, sp, #0
 8014fa6:	4603      	mov	r3, r0
 8014fa8:	6039      	str	r1, [r7, #0]
 8014faa:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8014fac:	79fb      	ldrb	r3, [r7, #7]
 8014fae:	2b00      	cmp	r3, #0
 8014fb0:	d103      	bne.n	8014fba <RegionApplyCFList+0x1a>
    {
        AS923_APPLY_CF_LIST( );
 8014fb2:	6838      	ldr	r0, [r7, #0]
 8014fb4:	f000 fc6e 	bl	8015894 <RegionAS923ApplyCFList>
 8014fb8:	e000      	b.n	8014fbc <RegionApplyCFList+0x1c>
        IN865_APPLY_CF_LIST( );
        US915_APPLY_CF_LIST( );
        RU864_APPLY_CF_LIST( );
        default:
        {
            break;
 8014fba:	bf00      	nop
        }
    }
}
 8014fbc:	bf00      	nop
 8014fbe:	3708      	adds	r7, #8
 8014fc0:	46bd      	mov	sp, r7
 8014fc2:	bd80      	pop	{r7, pc}

08014fc4 <RegionChanMaskSet>:

bool RegionChanMaskSet( LoRaMacRegion_t region, ChanMaskSetParams_t* chanMaskSet )
{
 8014fc4:	b580      	push	{r7, lr}
 8014fc6:	b082      	sub	sp, #8
 8014fc8:	af00      	add	r7, sp, #0
 8014fca:	4603      	mov	r3, r0
 8014fcc:	6039      	str	r1, [r7, #0]
 8014fce:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8014fd0:	79fb      	ldrb	r3, [r7, #7]
 8014fd2:	2b00      	cmp	r3, #0
 8014fd4:	d104      	bne.n	8014fe0 <RegionChanMaskSet+0x1c>
    {
        AS923_CHAN_MASK_SET( );
 8014fd6:	6838      	ldr	r0, [r7, #0]
 8014fd8:	f000 fcd0 	bl	801597c <RegionAS923ChanMaskSet>
 8014fdc:	4603      	mov	r3, r0
 8014fde:	e000      	b.n	8014fe2 <RegionChanMaskSet+0x1e>
        IN865_CHAN_MASK_SET( );
        US915_CHAN_MASK_SET( );
        RU864_CHAN_MASK_SET( );
        default:
        {
            return false;
 8014fe0:	2300      	movs	r3, #0
        }
    }
}
 8014fe2:	4618      	mov	r0, r3
 8014fe4:	3708      	adds	r7, #8
 8014fe6:	46bd      	mov	sp, r7
 8014fe8:	bd80      	pop	{r7, pc}

08014fea <RegionComputeRxWindowParameters>:

void RegionComputeRxWindowParameters( LoRaMacRegion_t region, int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 8014fea:	b580      	push	{r7, lr}
 8014fec:	b082      	sub	sp, #8
 8014fee:	af00      	add	r7, sp, #0
 8014ff0:	603b      	str	r3, [r7, #0]
 8014ff2:	4603      	mov	r3, r0
 8014ff4:	71fb      	strb	r3, [r7, #7]
 8014ff6:	460b      	mov	r3, r1
 8014ff8:	71bb      	strb	r3, [r7, #6]
 8014ffa:	4613      	mov	r3, r2
 8014ffc:	717b      	strb	r3, [r7, #5]
    switch( region )
 8014ffe:	79fb      	ldrb	r3, [r7, #7]
 8015000:	2b00      	cmp	r3, #0
 8015002:	d107      	bne.n	8015014 <RegionComputeRxWindowParameters+0x2a>
    {
        AS923_COMPUTE_RX_WINDOW_PARAMETERS( );
 8015004:	7979      	ldrb	r1, [r7, #5]
 8015006:	f997 0006 	ldrsb.w	r0, [r7, #6]
 801500a:	693b      	ldr	r3, [r7, #16]
 801500c:	683a      	ldr	r2, [r7, #0]
 801500e:	f000 fcdf 	bl	80159d0 <RegionAS923ComputeRxWindowParameters>
 8015012:	e000      	b.n	8015016 <RegionComputeRxWindowParameters+0x2c>
        IN865_COMPUTE_RX_WINDOW_PARAMETERS( );
        US915_COMPUTE_RX_WINDOW_PARAMETERS( );
        RU864_COMPUTE_RX_WINDOW_PARAMETERS( );
        default:
        {
            break;
 8015014:	bf00      	nop
        }
    }
}
 8015016:	bf00      	nop
 8015018:	3708      	adds	r7, #8
 801501a:	46bd      	mov	sp, r7
 801501c:	bd80      	pop	{r7, pc}

0801501e <RegionRxConfig>:

bool RegionRxConfig( LoRaMacRegion_t region, RxConfigParams_t* rxConfig, int8_t* datarate )
{
 801501e:	b580      	push	{r7, lr}
 8015020:	b084      	sub	sp, #16
 8015022:	af00      	add	r7, sp, #0
 8015024:	4603      	mov	r3, r0
 8015026:	60b9      	str	r1, [r7, #8]
 8015028:	607a      	str	r2, [r7, #4]
 801502a:	73fb      	strb	r3, [r7, #15]
    switch( region )
 801502c:	7bfb      	ldrb	r3, [r7, #15]
 801502e:	2b00      	cmp	r3, #0
 8015030:	d105      	bne.n	801503e <RegionRxConfig+0x20>
    {
        AS923_RX_CONFIG( );
 8015032:	6879      	ldr	r1, [r7, #4]
 8015034:	68b8      	ldr	r0, [r7, #8]
 8015036:	f000 fd25 	bl	8015a84 <RegionAS923RxConfig>
 801503a:	4603      	mov	r3, r0
 801503c:	e000      	b.n	8015040 <RegionRxConfig+0x22>
        IN865_RX_CONFIG( );
        US915_RX_CONFIG( );
        RU864_RX_CONFIG( );
        default:
        {
            return false;
 801503e:	2300      	movs	r3, #0
        }
    }
}
 8015040:	4618      	mov	r0, r3
 8015042:	3710      	adds	r7, #16
 8015044:	46bd      	mov	sp, r7
 8015046:	bd80      	pop	{r7, pc}

08015048 <RegionTxConfig>:

bool RegionTxConfig( LoRaMacRegion_t region, TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 8015048:	b580      	push	{r7, lr}
 801504a:	b084      	sub	sp, #16
 801504c:	af00      	add	r7, sp, #0
 801504e:	60b9      	str	r1, [r7, #8]
 8015050:	607a      	str	r2, [r7, #4]
 8015052:	603b      	str	r3, [r7, #0]
 8015054:	4603      	mov	r3, r0
 8015056:	73fb      	strb	r3, [r7, #15]
    switch( region )
 8015058:	7bfb      	ldrb	r3, [r7, #15]
 801505a:	2b00      	cmp	r3, #0
 801505c:	d106      	bne.n	801506c <RegionTxConfig+0x24>
    {
        AS923_TX_CONFIG( );
 801505e:	683a      	ldr	r2, [r7, #0]
 8015060:	6879      	ldr	r1, [r7, #4]
 8015062:	68b8      	ldr	r0, [r7, #8]
 8015064:	f000 fdde 	bl	8015c24 <RegionAS923TxConfig>
 8015068:	4603      	mov	r3, r0
 801506a:	e000      	b.n	801506e <RegionTxConfig+0x26>
        IN865_TX_CONFIG( );
        US915_TX_CONFIG( );
        RU864_TX_CONFIG( );
        default:
        {
            return false;
 801506c:	2300      	movs	r3, #0
        }
    }
}
 801506e:	4618      	mov	r0, r3
 8015070:	3710      	adds	r7, #16
 8015072:	46bd      	mov	sp, r7
 8015074:	bd80      	pop	{r7, pc}

08015076 <RegionLinkAdrReq>:

uint8_t RegionLinkAdrReq( LoRaMacRegion_t region, LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 8015076:	b580      	push	{r7, lr}
 8015078:	b086      	sub	sp, #24
 801507a:	af02      	add	r7, sp, #8
 801507c:	60b9      	str	r1, [r7, #8]
 801507e:	607a      	str	r2, [r7, #4]
 8015080:	603b      	str	r3, [r7, #0]
 8015082:	4603      	mov	r3, r0
 8015084:	73fb      	strb	r3, [r7, #15]
    switch( region )
 8015086:	7bfb      	ldrb	r3, [r7, #15]
 8015088:	2b00      	cmp	r3, #0
 801508a:	d109      	bne.n	80150a0 <RegionLinkAdrReq+0x2a>
    {
        AS923_LINK_ADR_REQ( );
 801508c:	69fb      	ldr	r3, [r7, #28]
 801508e:	9300      	str	r3, [sp, #0]
 8015090:	69bb      	ldr	r3, [r7, #24]
 8015092:	683a      	ldr	r2, [r7, #0]
 8015094:	6879      	ldr	r1, [r7, #4]
 8015096:	68b8      	ldr	r0, [r7, #8]
 8015098:	f000 fe94 	bl	8015dc4 <RegionAS923LinkAdrReq>
 801509c:	4603      	mov	r3, r0
 801509e:	e000      	b.n	80150a2 <RegionLinkAdrReq+0x2c>
        IN865_LINK_ADR_REQ( );
        US915_LINK_ADR_REQ( );
        RU864_LINK_ADR_REQ( );
        default:
        {
            return 0;
 80150a0:	2300      	movs	r3, #0
        }
    }
}
 80150a2:	4618      	mov	r0, r3
 80150a4:	3710      	adds	r7, #16
 80150a6:	46bd      	mov	sp, r7
 80150a8:	bd80      	pop	{r7, pc}

080150aa <RegionRxParamSetupReq>:

uint8_t RegionRxParamSetupReq( LoRaMacRegion_t region, RxParamSetupReqParams_t* rxParamSetupReq )
{
 80150aa:	b580      	push	{r7, lr}
 80150ac:	b082      	sub	sp, #8
 80150ae:	af00      	add	r7, sp, #0
 80150b0:	4603      	mov	r3, r0
 80150b2:	6039      	str	r1, [r7, #0]
 80150b4:	71fb      	strb	r3, [r7, #7]
    switch( region )
 80150b6:	79fb      	ldrb	r3, [r7, #7]
 80150b8:	2b00      	cmp	r3, #0
 80150ba:	d104      	bne.n	80150c6 <RegionRxParamSetupReq+0x1c>
    {
        AS923_RX_PARAM_SETUP_REQ( );
 80150bc:	6838      	ldr	r0, [r7, #0]
 80150be:	f000 ffa3 	bl	8016008 <RegionAS923RxParamSetupReq>
 80150c2:	4603      	mov	r3, r0
 80150c4:	e000      	b.n	80150c8 <RegionRxParamSetupReq+0x1e>
        IN865_RX_PARAM_SETUP_REQ( );
        US915_RX_PARAM_SETUP_REQ( );
        RU864_RX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 80150c6:	2300      	movs	r3, #0
        }
    }
}
 80150c8:	4618      	mov	r0, r3
 80150ca:	3708      	adds	r7, #8
 80150cc:	46bd      	mov	sp, r7
 80150ce:	bd80      	pop	{r7, pc}

080150d0 <RegionNewChannelReq>:

int8_t RegionNewChannelReq( LoRaMacRegion_t region, NewChannelReqParams_t* newChannelReq )
{
 80150d0:	b580      	push	{r7, lr}
 80150d2:	b082      	sub	sp, #8
 80150d4:	af00      	add	r7, sp, #0
 80150d6:	4603      	mov	r3, r0
 80150d8:	6039      	str	r1, [r7, #0]
 80150da:	71fb      	strb	r3, [r7, #7]
    switch( region )
 80150dc:	79fb      	ldrb	r3, [r7, #7]
 80150de:	2b00      	cmp	r3, #0
 80150e0:	d104      	bne.n	80150ec <RegionNewChannelReq+0x1c>
    {
        AS923_NEW_CHANNEL_REQ( );
 80150e2:	6838      	ldr	r0, [r7, #0]
 80150e4:	f000 ffc8 	bl	8016078 <RegionAS923NewChannelReq>
 80150e8:	4603      	mov	r3, r0
 80150ea:	e000      	b.n	80150ee <RegionNewChannelReq+0x1e>
        IN865_NEW_CHANNEL_REQ( );
        US915_NEW_CHANNEL_REQ( );
        RU864_NEW_CHANNEL_REQ( );
        default:
        {
            return 0;
 80150ec:	2300      	movs	r3, #0
        }
    }
}
 80150ee:	4618      	mov	r0, r3
 80150f0:	3708      	adds	r7, #8
 80150f2:	46bd      	mov	sp, r7
 80150f4:	bd80      	pop	{r7, pc}

080150f6 <RegionTxParamSetupReq>:

int8_t RegionTxParamSetupReq( LoRaMacRegion_t region, TxParamSetupReqParams_t* txParamSetupReq )
{
 80150f6:	b580      	push	{r7, lr}
 80150f8:	b082      	sub	sp, #8
 80150fa:	af00      	add	r7, sp, #0
 80150fc:	4603      	mov	r3, r0
 80150fe:	6039      	str	r1, [r7, #0]
 8015100:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8015102:	79fb      	ldrb	r3, [r7, #7]
 8015104:	2b00      	cmp	r3, #0
 8015106:	d104      	bne.n	8015112 <RegionTxParamSetupReq+0x1c>
    {
        AS923_TX_PARAM_SETUP_REQ( );
 8015108:	6838      	ldr	r0, [r7, #0]
 801510a:	f001 f813 	bl	8016134 <RegionAS923TxParamSetupReq>
 801510e:	4603      	mov	r3, r0
 8015110:	e000      	b.n	8015114 <RegionTxParamSetupReq+0x1e>
        IN865_TX_PARAM_SETUP_REQ( );
        US915_TX_PARAM_SETUP_REQ( );
        RU864_TX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 8015112:	2300      	movs	r3, #0
        }
    }
}
 8015114:	4618      	mov	r0, r3
 8015116:	3708      	adds	r7, #8
 8015118:	46bd      	mov	sp, r7
 801511a:	bd80      	pop	{r7, pc}

0801511c <RegionDlChannelReq>:

int8_t RegionDlChannelReq( LoRaMacRegion_t region, DlChannelReqParams_t* dlChannelReq )
{
 801511c:	b580      	push	{r7, lr}
 801511e:	b082      	sub	sp, #8
 8015120:	af00      	add	r7, sp, #0
 8015122:	4603      	mov	r3, r0
 8015124:	6039      	str	r1, [r7, #0]
 8015126:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8015128:	79fb      	ldrb	r3, [r7, #7]
 801512a:	2b00      	cmp	r3, #0
 801512c:	d104      	bne.n	8015138 <RegionDlChannelReq+0x1c>
    {
        AS923_DL_CHANNEL_REQ( );
 801512e:	6838      	ldr	r0, [r7, #0]
 8015130:	f001 f80a 	bl	8016148 <RegionAS923DlChannelReq>
 8015134:	4603      	mov	r3, r0
 8015136:	e000      	b.n	801513a <RegionDlChannelReq+0x1e>
        IN865_DL_CHANNEL_REQ( );
        US915_DL_CHANNEL_REQ( );
        RU864_DL_CHANNEL_REQ( );
        default:
        {
            return 0;
 8015138:	2300      	movs	r3, #0
        }
    }
}
 801513a:	4618      	mov	r0, r3
 801513c:	3708      	adds	r7, #8
 801513e:	46bd      	mov	sp, r7
 8015140:	bd80      	pop	{r7, pc}

08015142 <RegionAlternateDr>:

int8_t RegionAlternateDr( LoRaMacRegion_t region, int8_t currentDr, AlternateDrType_t type )
{
 8015142:	b580      	push	{r7, lr}
 8015144:	b082      	sub	sp, #8
 8015146:	af00      	add	r7, sp, #0
 8015148:	4603      	mov	r3, r0
 801514a:	71fb      	strb	r3, [r7, #7]
 801514c:	460b      	mov	r3, r1
 801514e:	71bb      	strb	r3, [r7, #6]
 8015150:	4613      	mov	r3, r2
 8015152:	717b      	strb	r3, [r7, #5]
    switch( region )
 8015154:	79fb      	ldrb	r3, [r7, #7]
 8015156:	2b00      	cmp	r3, #0
 8015158:	d108      	bne.n	801516c <RegionAlternateDr+0x2a>
    {
        AS923_ALTERNATE_DR( );
 801515a:	797a      	ldrb	r2, [r7, #5]
 801515c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8015160:	4611      	mov	r1, r2
 8015162:	4618      	mov	r0, r3
 8015164:	f001 f830 	bl	80161c8 <RegionAS923AlternateDr>
 8015168:	4603      	mov	r3, r0
 801516a:	e000      	b.n	801516e <RegionAlternateDr+0x2c>
        IN865_ALTERNATE_DR( );
        US915_ALTERNATE_DR( );
        RU864_ALTERNATE_DR( );
        default:
        {
            return 0;
 801516c:	2300      	movs	r3, #0
        }
    }
}
 801516e:	4618      	mov	r0, r3
 8015170:	3708      	adds	r7, #8
 8015172:	46bd      	mov	sp, r7
 8015174:	bd80      	pop	{r7, pc}

08015176 <RegionNextChannel>:

LoRaMacStatus_t RegionNextChannel( LoRaMacRegion_t region, NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 8015176:	b580      	push	{r7, lr}
 8015178:	b084      	sub	sp, #16
 801517a:	af00      	add	r7, sp, #0
 801517c:	60b9      	str	r1, [r7, #8]
 801517e:	607a      	str	r2, [r7, #4]
 8015180:	603b      	str	r3, [r7, #0]
 8015182:	4603      	mov	r3, r0
 8015184:	73fb      	strb	r3, [r7, #15]
    switch( region )
 8015186:	7bfb      	ldrb	r3, [r7, #15]
 8015188:	2b00      	cmp	r3, #0
 801518a:	d107      	bne.n	801519c <RegionNextChannel+0x26>
    {
        AS923_NEXT_CHANNEL( );
 801518c:	69bb      	ldr	r3, [r7, #24]
 801518e:	683a      	ldr	r2, [r7, #0]
 8015190:	6879      	ldr	r1, [r7, #4]
 8015192:	68b8      	ldr	r0, [r7, #8]
 8015194:	f001 f826 	bl	80161e4 <RegionAS923NextChannel>
 8015198:	4603      	mov	r3, r0
 801519a:	e000      	b.n	801519e <RegionNextChannel+0x28>
        IN865_NEXT_CHANNEL( );
        US915_NEXT_CHANNEL( );
        RU864_NEXT_CHANNEL( );
        default:
        {
            return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 801519c:	2309      	movs	r3, #9
        }
    }
}
 801519e:	4618      	mov	r0, r3
 80151a0:	3710      	adds	r7, #16
 80151a2:	46bd      	mov	sp, r7
 80151a4:	bd80      	pop	{r7, pc}

080151a6 <RegionApplyDrOffset>:
    }
}
#endif /* REGION_VERSION */

uint8_t RegionApplyDrOffset( LoRaMacRegion_t region, uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 80151a6:	b590      	push	{r4, r7, lr}
 80151a8:	b083      	sub	sp, #12
 80151aa:	af00      	add	r7, sp, #0
 80151ac:	4604      	mov	r4, r0
 80151ae:	4608      	mov	r0, r1
 80151b0:	4611      	mov	r1, r2
 80151b2:	461a      	mov	r2, r3
 80151b4:	4623      	mov	r3, r4
 80151b6:	71fb      	strb	r3, [r7, #7]
 80151b8:	4603      	mov	r3, r0
 80151ba:	71bb      	strb	r3, [r7, #6]
 80151bc:	460b      	mov	r3, r1
 80151be:	717b      	strb	r3, [r7, #5]
 80151c0:	4613      	mov	r3, r2
 80151c2:	713b      	strb	r3, [r7, #4]
    switch( region )
 80151c4:	79fb      	ldrb	r3, [r7, #7]
 80151c6:	2b00      	cmp	r3, #0
 80151c8:	d109      	bne.n	80151de <RegionApplyDrOffset+0x38>
    {
        AS923_APPLY_DR_OFFSET( );
 80151ca:	f997 2004 	ldrsb.w	r2, [r7, #4]
 80151ce:	f997 1005 	ldrsb.w	r1, [r7, #5]
 80151d2:	79bb      	ldrb	r3, [r7, #6]
 80151d4:	4618      	mov	r0, r3
 80151d6:	f001 f979 	bl	80164cc <RegionAS923ApplyDrOffset>
 80151da:	4603      	mov	r3, r0
 80151dc:	e000      	b.n	80151e0 <RegionApplyDrOffset+0x3a>
        IN865_APPLY_DR_OFFSET( );
        US915_APPLY_DR_OFFSET( );
        RU864_APPLY_DR_OFFSET( );
        default:
        {
            return dr;
 80151de:	797b      	ldrb	r3, [r7, #5]
        }
    }
}
 80151e0:	4618      	mov	r0, r3
 80151e2:	370c      	adds	r7, #12
 80151e4:	46bd      	mov	sp, r7
 80151e6:	bd90      	pop	{r4, r7, pc}

080151e8 <RegionGetVersion>:
        }
    }
}

Version_t RegionGetVersion( void )
{
 80151e8:	b480      	push	{r7}
 80151ea:	b083      	sub	sp, #12
 80151ec:	af00      	add	r7, sp, #0
    Version_t version;

    version.Value = REGION_VERSION;
 80151ee:	4b04      	ldr	r3, [pc, #16]	@ (8015200 <RegionGetVersion+0x18>)
 80151f0:	607b      	str	r3, [r7, #4]

    return version;
 80151f2:	687b      	ldr	r3, [r7, #4]
}
 80151f4:	4618      	mov	r0, r3
 80151f6:	370c      	adds	r7, #12
 80151f8:	46bd      	mov	sp, r7
 80151fa:	bc80      	pop	{r7}
 80151fc:	4770      	bx	lr
 80151fe:	bf00      	nop
 8015200:	02010001 	.word	0x02010001

08015204 <VerifyRfFreq>:
static Band_t* RegionBands;
#endif /* REGION_VERSION */

// Static functions
static bool VerifyRfFreq( uint32_t freq )
{
 8015204:	b580      	push	{r7, lr}
 8015206:	b082      	sub	sp, #8
 8015208:	af00      	add	r7, sp, #0
 801520a:	6078      	str	r0, [r7, #4]
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 801520c:	4b0d      	ldr	r3, [pc, #52]	@ (8015244 <VerifyRfFreq+0x40>)
 801520e:	6a1b      	ldr	r3, [r3, #32]
 8015210:	6878      	ldr	r0, [r7, #4]
 8015212:	4798      	blx	r3
 8015214:	4603      	mov	r3, r0
 8015216:	f083 0301 	eor.w	r3, r3, #1
 801521a:	b2db      	uxtb	r3, r3
 801521c:	2b00      	cmp	r3, #0
 801521e:	d001      	beq.n	8015224 <VerifyRfFreq+0x20>
    {
        return false;
 8015220:	2300      	movs	r3, #0
 8015222:	e00a      	b.n	801523a <VerifyRfFreq+0x36>
    }

    if( ( freq < AS923_MIN_RF_FREQUENCY ) || ( freq > AS923_MAX_RF_FREQUENCY ) )
 8015224:	687b      	ldr	r3, [r7, #4]
 8015226:	4a08      	ldr	r2, [pc, #32]	@ (8015248 <VerifyRfFreq+0x44>)
 8015228:	4293      	cmp	r3, r2
 801522a:	d903      	bls.n	8015234 <VerifyRfFreq+0x30>
 801522c:	687b      	ldr	r3, [r7, #4]
 801522e:	4a07      	ldr	r2, [pc, #28]	@ (801524c <VerifyRfFreq+0x48>)
 8015230:	4293      	cmp	r3, r2
 8015232:	d901      	bls.n	8015238 <VerifyRfFreq+0x34>
    {
        return false;
 8015234:	2300      	movs	r3, #0
 8015236:	e000      	b.n	801523a <VerifyRfFreq+0x36>
    }
    return true;
 8015238:	2301      	movs	r3, #1
}
 801523a:	4618      	mov	r0, r3
 801523c:	3708      	adds	r7, #8
 801523e:	46bd      	mov	sp, r7
 8015240:	bd80      	pop	{r7, pc}
 8015242:	bf00      	nop
 8015244:	0801f874 	.word	0x0801f874
 8015248:	3689cabf 	.word	0x3689cabf
 801524c:	37502800 	.word	0x37502800

08015250 <GetTimeOnAir>:

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 8015250:	b590      	push	{r4, r7, lr}
 8015252:	b08b      	sub	sp, #44	@ 0x2c
 8015254:	af04      	add	r7, sp, #16
 8015256:	4603      	mov	r3, r0
 8015258:	460a      	mov	r2, r1
 801525a:	71fb      	strb	r3, [r7, #7]
 801525c:	4613      	mov	r3, r2
 801525e:	80bb      	strh	r3, [r7, #4]
    int8_t phyDr = DataratesAS923[datarate];
 8015260:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015264:	4a1f      	ldr	r2, [pc, #124]	@ (80152e4 <GetTimeOnAir+0x94>)
 8015266:	5cd3      	ldrb	r3, [r2, r3]
 8015268:	74fb      	strb	r3, [r7, #19]
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsAS923 );
 801526a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801526e:	491e      	ldr	r1, [pc, #120]	@ (80152e8 <GetTimeOnAir+0x98>)
 8015270:	4618      	mov	r0, r3
 8015272:	f002 f835 	bl	80172e0 <RegionCommonGetBandwidth>
 8015276:	60f8      	str	r0, [r7, #12]
    TimerTime_t timeOnAir = 0;
 8015278:	2300      	movs	r3, #0
 801527a:	617b      	str	r3, [r7, #20]

    if( datarate == DR_7 )
 801527c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015280:	2b07      	cmp	r3, #7
 8015282:	d118      	bne.n	80152b6 <GetTimeOnAir+0x66>
    { // High Speed FSK channel
        timeOnAir = Radio.TimeOnAir( MODEM_FSK, bandwidth, phyDr * 1000, 0, 5, false, pktLen, true );
 8015284:	4b19      	ldr	r3, [pc, #100]	@ (80152ec <GetTimeOnAir+0x9c>)
 8015286:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8015288:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801528c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8015290:	fb02 f303 	mul.w	r3, r2, r3
 8015294:	4619      	mov	r1, r3
 8015296:	88bb      	ldrh	r3, [r7, #4]
 8015298:	b2db      	uxtb	r3, r3
 801529a:	2201      	movs	r2, #1
 801529c:	9203      	str	r2, [sp, #12]
 801529e:	9302      	str	r3, [sp, #8]
 80152a0:	2300      	movs	r3, #0
 80152a2:	9301      	str	r3, [sp, #4]
 80152a4:	2305      	movs	r3, #5
 80152a6:	9300      	str	r3, [sp, #0]
 80152a8:	2300      	movs	r3, #0
 80152aa:	460a      	mov	r2, r1
 80152ac:	68f9      	ldr	r1, [r7, #12]
 80152ae:	2000      	movs	r0, #0
 80152b0:	47a0      	blx	r4
 80152b2:	6178      	str	r0, [r7, #20]
 80152b4:	e011      	b.n	80152da <GetTimeOnAir+0x8a>
    }
    else
    {
        timeOnAir = Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 80152b6:	4b0d      	ldr	r3, [pc, #52]	@ (80152ec <GetTimeOnAir+0x9c>)
 80152b8:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 80152ba:	f997 2013 	ldrsb.w	r2, [r7, #19]
 80152be:	88bb      	ldrh	r3, [r7, #4]
 80152c0:	b2db      	uxtb	r3, r3
 80152c2:	2101      	movs	r1, #1
 80152c4:	9103      	str	r1, [sp, #12]
 80152c6:	9302      	str	r3, [sp, #8]
 80152c8:	2300      	movs	r3, #0
 80152ca:	9301      	str	r3, [sp, #4]
 80152cc:	2308      	movs	r3, #8
 80152ce:	9300      	str	r3, [sp, #0]
 80152d0:	2301      	movs	r3, #1
 80152d2:	68f9      	ldr	r1, [r7, #12]
 80152d4:	2001      	movs	r0, #1
 80152d6:	47a0      	blx	r4
 80152d8:	6178      	str	r0, [r7, #20]
    }
    return timeOnAir;
 80152da:	697b      	ldr	r3, [r7, #20]
}
 80152dc:	4618      	mov	r0, r3
 80152de:	371c      	adds	r7, #28
 80152e0:	46bd      	mov	sp, r7
 80152e2:	bd90      	pop	{r4, r7, pc}
 80152e4:	0801f7b4 	.word	0x0801f7b4
 80152e8:	0801f7bc 	.word	0x0801f7bc
 80152ec:	0801f874 	.word	0x0801f874

080152f0 <RegionAS923GetPhyParam>:
#endif /* REGION_AS923 */

PhyParam_t RegionAS923GetPhyParam( GetPhyParams_t* getPhy )
{
 80152f0:	b580      	push	{r7, lr}
 80152f2:	b088      	sub	sp, #32
 80152f4:	af00      	add	r7, sp, #0
 80152f6:	6078      	str	r0, [r7, #4]
    PhyParam_t phyParam = { 0 };
 80152f8:	2300      	movs	r3, #0
 80152fa:	61bb      	str	r3, [r7, #24]

#if defined( REGION_AS923 )
    switch( getPhy->Attribute )
 80152fc:	687b      	ldr	r3, [r7, #4]
 80152fe:	781b      	ldrb	r3, [r3, #0]
 8015300:	3b01      	subs	r3, #1
 8015302:	2b37      	cmp	r3, #55	@ 0x37
 8015304:	f200 814e 	bhi.w	80155a4 <RegionAS923GetPhyParam+0x2b4>
 8015308:	a201      	add	r2, pc, #4	@ (adr r2, 8015310 <RegionAS923GetPhyParam+0x20>)
 801530a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801530e:	bf00      	nop
 8015310:	080153f1 	.word	0x080153f1
 8015314:	08015405 	.word	0x08015405
 8015318:	080155a5 	.word	0x080155a5
 801531c:	080155a5 	.word	0x080155a5
 8015320:	080155a5 	.word	0x080155a5
 8015324:	08015419 	.word	0x08015419
 8015328:	080155a5 	.word	0x080155a5
 801532c:	0801545f 	.word	0x0801545f
 8015330:	080155a5 	.word	0x080155a5
 8015334:	08015465 	.word	0x08015465
 8015338:	0801546b 	.word	0x0801546b
 801533c:	08015471 	.word	0x08015471
 8015340:	08015477 	.word	0x08015477
 8015344:	0801549f 	.word	0x0801549f
 8015348:	080154c7 	.word	0x080154c7
 801534c:	080154cd 	.word	0x080154cd
 8015350:	080154d5 	.word	0x080154d5
 8015354:	080154dd 	.word	0x080154dd
 8015358:	080154e5 	.word	0x080154e5
 801535c:	080154ed 	.word	0x080154ed
 8015360:	080154f5 	.word	0x080154f5
 8015364:	08015509 	.word	0x08015509
 8015368:	0801550f 	.word	0x0801550f
 801536c:	08015515 	.word	0x08015515
 8015370:	0801551b 	.word	0x0801551b
 8015374:	08015527 	.word	0x08015527
 8015378:	08015533 	.word	0x08015533
 801537c:	08015539 	.word	0x08015539
 8015380:	08015541 	.word	0x08015541
 8015384:	08015547 	.word	0x08015547
 8015388:	0801554d 	.word	0x0801554d
 801538c:	08015555 	.word	0x08015555
 8015390:	0801541f 	.word	0x0801541f
 8015394:	080155a5 	.word	0x080155a5
 8015398:	080155a5 	.word	0x080155a5
 801539c:	080155a5 	.word	0x080155a5
 80153a0:	080155a5 	.word	0x080155a5
 80153a4:	080155a5 	.word	0x080155a5
 80153a8:	080155a5 	.word	0x080155a5
 80153ac:	080155a5 	.word	0x080155a5
 80153b0:	080155a5 	.word	0x080155a5
 80153b4:	080155a5 	.word	0x080155a5
 80153b8:	080155a5 	.word	0x080155a5
 80153bc:	080155a5 	.word	0x080155a5
 80153c0:	080155a5 	.word	0x080155a5
 80153c4:	080155a5 	.word	0x080155a5
 80153c8:	0801555b 	.word	0x0801555b
 80153cc:	08015561 	.word	0x08015561
 80153d0:	0801556f 	.word	0x0801556f
 80153d4:	080155a5 	.word	0x080155a5
 80153d8:	080155a5 	.word	0x080155a5
 80153dc:	08015575 	.word	0x08015575
 80153e0:	0801557b 	.word	0x0801557b
 80153e4:	080155a5 	.word	0x080155a5
 80153e8:	08015581 	.word	0x08015581
 80153ec:	08015591 	.word	0x08015591
    {
        case PHY_MIN_RX_DR:
        {
            if( getPhy->DownlinkDwellTime == 0 )
 80153f0:	687b      	ldr	r3, [r7, #4]
 80153f2:	78db      	ldrb	r3, [r3, #3]
 80153f4:	2b00      	cmp	r3, #0
 80153f6:	d102      	bne.n	80153fe <RegionAS923GetPhyParam+0x10e>
            {
                phyParam.Value = AS923_RX_MIN_DATARATE;
 80153f8:	2300      	movs	r3, #0
 80153fa:	61bb      	str	r3, [r7, #24]
            }
            else
            {
                phyParam.Value = AS923_DWELL_LIMIT_DATARATE;
            }
            break;
 80153fc:	e0d3      	b.n	80155a6 <RegionAS923GetPhyParam+0x2b6>
                phyParam.Value = AS923_DWELL_LIMIT_DATARATE;
 80153fe:	2302      	movs	r3, #2
 8015400:	61bb      	str	r3, [r7, #24]
            break;
 8015402:	e0d0      	b.n	80155a6 <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_MIN_TX_DR:
        {
            if( getPhy->UplinkDwellTime == 0 )
 8015404:	687b      	ldr	r3, [r7, #4]
 8015406:	789b      	ldrb	r3, [r3, #2]
 8015408:	2b00      	cmp	r3, #0
 801540a:	d102      	bne.n	8015412 <RegionAS923GetPhyParam+0x122>
            {
                phyParam.Value = AS923_TX_MIN_DATARATE;
 801540c:	2300      	movs	r3, #0
 801540e:	61bb      	str	r3, [r7, #24]
            }
            else
            {
                phyParam.Value = AS923_DWELL_LIMIT_DATARATE;
            }
            break;
 8015410:	e0c9      	b.n	80155a6 <RegionAS923GetPhyParam+0x2b6>
                phyParam.Value = AS923_DWELL_LIMIT_DATARATE;
 8015412:	2302      	movs	r3, #2
 8015414:	61bb      	str	r3, [r7, #24]
            break;
 8015416:	e0c6      	b.n	80155a6 <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_DEF_TX_DR:
        {
            phyParam.Value = AS923_DEFAULT_DATARATE;
 8015418:	2302      	movs	r3, #2
 801541a:	61bb      	str	r3, [r7, #24]
            break;
 801541c:	e0c3      	b.n	80155a6 <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_NEXT_LOWER_TX_DR:
        {
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
            {
                .CurrentDr = getPhy->Datarate,
 801541e:	687b      	ldr	r3, [r7, #4]
 8015420:	f993 3001 	ldrsb.w	r3, [r3, #1]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8015424:	733b      	strb	r3, [r7, #12]
 8015426:	2307      	movs	r3, #7
 8015428:	737b      	strb	r3, [r7, #13]
                .MaxDr = ( int8_t )AS923_TX_MAX_DATARATE,
                .MinDr = ( int8_t )( ( getPhy->UplinkDwellTime == 0 ) ? AS923_TX_MIN_DATARATE : AS923_DWELL_LIMIT_DATARATE ),
 801542a:	687b      	ldr	r3, [r7, #4]
 801542c:	789b      	ldrb	r3, [r3, #2]
 801542e:	2b00      	cmp	r3, #0
 8015430:	d101      	bne.n	8015436 <RegionAS923GetPhyParam+0x146>
 8015432:	2300      	movs	r3, #0
 8015434:	e000      	b.n	8015438 <RegionAS923GetPhyParam+0x148>
 8015436:	2302      	movs	r3, #2
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8015438:	73bb      	strb	r3, [r7, #14]
 801543a:	2310      	movs	r3, #16
 801543c:	73fb      	strb	r3, [r7, #15]
                .NbChannels = AS923_MAX_NB_CHANNELS,
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
 801543e:	4b5d      	ldr	r3, [pc, #372]	@ (80155b4 <RegionAS923GetPhyParam+0x2c4>)
 8015440:	681b      	ldr	r3, [r3, #0]
 8015442:	f503 7358 	add.w	r3, r3, #864	@ 0x360
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8015446:	613b      	str	r3, [r7, #16]
                .Channels = RegionNvmGroup2->Channels,
 8015448:	4b5a      	ldr	r3, [pc, #360]	@ (80155b4 <RegionAS923GetPhyParam+0x2c4>)
 801544a:	681b      	ldr	r3, [r3, #0]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 801544c:	617b      	str	r3, [r7, #20]
            };
            phyParam.Value = RegionCommonGetNextLowerTxDr( &nextLowerTxDrParams );
 801544e:	f107 030c 	add.w	r3, r7, #12
 8015452:	4618      	mov	r0, r3
 8015454:	f001 fef1 	bl	801723a <RegionCommonGetNextLowerTxDr>
 8015458:	4603      	mov	r3, r0
 801545a:	61bb      	str	r3, [r7, #24]
            break;
 801545c:	e0a3      	b.n	80155a6 <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_MAX_TX_POWER:
        {
            phyParam.Value = AS923_MAX_TX_POWER;
 801545e:	2300      	movs	r3, #0
 8015460:	61bb      	str	r3, [r7, #24]
            break;
 8015462:	e0a0      	b.n	80155a6 <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_DEF_TX_POWER:
        {
            phyParam.Value = AS923_DEFAULT_TX_POWER;
 8015464:	2300      	movs	r3, #0
 8015466:	61bb      	str	r3, [r7, #24]
            break;
 8015468:	e09d      	b.n	80155a6 <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_DEF_ADR_ACK_LIMIT:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_LIMIT;
 801546a:	2340      	movs	r3, #64	@ 0x40
 801546c:	61bb      	str	r3, [r7, #24]
            break;
 801546e:	e09a      	b.n	80155a6 <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_DEF_ADR_ACK_DELAY:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_DELAY;
 8015470:	2320      	movs	r3, #32
 8015472:	61bb      	str	r3, [r7, #24]
            break;
 8015474:	e097      	b.n	80155a6 <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_MAX_PAYLOAD:
        {
            if( getPhy->UplinkDwellTime == 0 )
 8015476:	687b      	ldr	r3, [r7, #4]
 8015478:	789b      	ldrb	r3, [r3, #2]
 801547a:	2b00      	cmp	r3, #0
 801547c:	d107      	bne.n	801548e <RegionAS923GetPhyParam+0x19e>
            {
                phyParam.Value = MaxPayloadOfDatarateDwell0AS923[getPhy->Datarate];
 801547e:	687b      	ldr	r3, [r7, #4]
 8015480:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015484:	461a      	mov	r2, r3
 8015486:	4b4c      	ldr	r3, [pc, #304]	@ (80155b8 <RegionAS923GetPhyParam+0x2c8>)
 8015488:	5c9b      	ldrb	r3, [r3, r2]
 801548a:	61bb      	str	r3, [r7, #24]
            }
            else
            {
                phyParam.Value = MaxPayloadOfDatarateDwell1AS923[getPhy->Datarate];
            }
            break;
 801548c:	e08b      	b.n	80155a6 <RegionAS923GetPhyParam+0x2b6>
                phyParam.Value = MaxPayloadOfDatarateDwell1AS923[getPhy->Datarate];
 801548e:	687b      	ldr	r3, [r7, #4]
 8015490:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015494:	461a      	mov	r2, r3
 8015496:	4b49      	ldr	r3, [pc, #292]	@ (80155bc <RegionAS923GetPhyParam+0x2cc>)
 8015498:	5c9b      	ldrb	r3, [r3, r2]
 801549a:	61bb      	str	r3, [r7, #24]
            break;
 801549c:	e083      	b.n	80155a6 <RegionAS923GetPhyParam+0x2b6>
        }
        /* ST_WORKAROUND_BEGIN: Keep repeater feature */
        case PHY_MAX_PAYLOAD_REPEATER:
        {
            if( getPhy->UplinkDwellTime == 0 )
 801549e:	687b      	ldr	r3, [r7, #4]
 80154a0:	789b      	ldrb	r3, [r3, #2]
 80154a2:	2b00      	cmp	r3, #0
 80154a4:	d107      	bne.n	80154b6 <RegionAS923GetPhyParam+0x1c6>
            {
                phyParam.Value = MaxPayloadOfDatarateRepeaterDwell0AS923[getPhy->Datarate];
 80154a6:	687b      	ldr	r3, [r7, #4]
 80154a8:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80154ac:	461a      	mov	r2, r3
 80154ae:	4b44      	ldr	r3, [pc, #272]	@ (80155c0 <RegionAS923GetPhyParam+0x2d0>)
 80154b0:	5c9b      	ldrb	r3, [r3, r2]
 80154b2:	61bb      	str	r3, [r7, #24]
            }
            else
            {
                phyParam.Value = MaxPayloadOfDatarateDwell1AS923[getPhy->Datarate];
            }
            break;
 80154b4:	e077      	b.n	80155a6 <RegionAS923GetPhyParam+0x2b6>
                phyParam.Value = MaxPayloadOfDatarateDwell1AS923[getPhy->Datarate];
 80154b6:	687b      	ldr	r3, [r7, #4]
 80154b8:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80154bc:	461a      	mov	r2, r3
 80154be:	4b3f      	ldr	r3, [pc, #252]	@ (80155bc <RegionAS923GetPhyParam+0x2cc>)
 80154c0:	5c9b      	ldrb	r3, [r3, r2]
 80154c2:	61bb      	str	r3, [r7, #24]
            break;
 80154c4:	e06f      	b.n	80155a6 <RegionAS923GetPhyParam+0x2b6>
        }
        /* ST_WORKAROUND_END */
        case PHY_DUTY_CYCLE:
        {
            phyParam.Value = AS923_DUTY_CYCLE_ENABLED;
 80154c6:	2300      	movs	r3, #0
 80154c8:	61bb      	str	r3, [r7, #24]
            break;
 80154ca:	e06c      	b.n	80155a6 <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_MAX_RX_WINDOW:
        {
            phyParam.Value = AS923_MAX_RX_WINDOW;
 80154cc:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 80154d0:	61bb      	str	r3, [r7, #24]
            break;
 80154d2:	e068      	b.n	80155a6 <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_RECEIVE_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY1;
 80154d4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80154d8:	61bb      	str	r3, [r7, #24]
            break;
 80154da:	e064      	b.n	80155a6 <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_RECEIVE_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY2;
 80154dc:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80154e0:	61bb      	str	r3, [r7, #24]
            break;
 80154e2:	e060      	b.n	80155a6 <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_JOIN_ACCEPT_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY1;
 80154e4:	f241 3388 	movw	r3, #5000	@ 0x1388
 80154e8:	61bb      	str	r3, [r7, #24]
            break;
 80154ea:	e05c      	b.n	80155a6 <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_JOIN_ACCEPT_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY2;
 80154ec:	f241 7370 	movw	r3, #6000	@ 0x1770
 80154f0:	61bb      	str	r3, [r7, #24]
            break;
 80154f2:	e058      	b.n	80155a6 <RegionAS923GetPhyParam+0x2b6>
            break;
        }
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
        case PHY_RETRANSMIT_TIMEOUT:
        {
            phyParam.Value = ( REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT + randr( -REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT_RND, REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT_RND ) );
 80154f4:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80154f8:	4832      	ldr	r0, [pc, #200]	@ (80155c4 <RegionAS923GetPhyParam+0x2d4>)
 80154fa:	f001 ff89 	bl	8017410 <randr>
 80154fe:	4603      	mov	r3, r0
 8015500:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 8015504:	61bb      	str	r3, [r7, #24]
            break;
 8015506:	e04e      	b.n	80155a6 <RegionAS923GetPhyParam+0x2b6>
        }
#endif /* REGION_VERSION */
        case PHY_DEF_DR1_OFFSET:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RX1_DR_OFFSET;
 8015508:	2300      	movs	r3, #0
 801550a:	61bb      	str	r3, [r7, #24]
            break;
 801550c:	e04b      	b.n	80155a6 <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_DEF_RX2_FREQUENCY:
        {
            phyParam.Value = AS923_RX_WND_2_FREQ - REGION_AS923_FREQ_OFFSET;
 801550e:	4b2e      	ldr	r3, [pc, #184]	@ (80155c8 <RegionAS923GetPhyParam+0x2d8>)
 8015510:	61bb      	str	r3, [r7, #24]
            break;
 8015512:	e048      	b.n	80155a6 <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_DEF_RX2_DR:
        {
            phyParam.Value = AS923_RX_WND_2_DR;
 8015514:	2302      	movs	r3, #2
 8015516:	61bb      	str	r3, [r7, #24]
            break;
 8015518:	e045      	b.n	80155a6 <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_CHANNELS_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 801551a:	4b26      	ldr	r3, [pc, #152]	@ (80155b4 <RegionAS923GetPhyParam+0x2c4>)
 801551c:	681b      	ldr	r3, [r3, #0]
 801551e:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8015522:	61bb      	str	r3, [r7, #24]
            break;
 8015524:	e03f      	b.n	80155a6 <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_CHANNELS_DEFAULT_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsDefaultMask;
 8015526:	4b23      	ldr	r3, [pc, #140]	@ (80155b4 <RegionAS923GetPhyParam+0x2c4>)
 8015528:	681b      	ldr	r3, [r3, #0]
 801552a:	f503 735b 	add.w	r3, r3, #876	@ 0x36c
 801552e:	61bb      	str	r3, [r7, #24]
            break;
 8015530:	e039      	b.n	80155a6 <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_MAX_NB_CHANNELS:
        {
            phyParam.Value = AS923_MAX_NB_CHANNELS;
 8015532:	2310      	movs	r3, #16
 8015534:	61bb      	str	r3, [r7, #24]
            break;
 8015536:	e036      	b.n	80155a6 <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_CHANNELS:
        {
            phyParam.Channels = RegionNvmGroup2->Channels;
 8015538:	4b1e      	ldr	r3, [pc, #120]	@ (80155b4 <RegionAS923GetPhyParam+0x2c4>)
 801553a:	681b      	ldr	r3, [r3, #0]
 801553c:	61bb      	str	r3, [r7, #24]
            break;
 801553e:	e032      	b.n	80155a6 <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_DEF_UPLINK_DWELL_TIME:
        {
            phyParam.Value = AS923_DEFAULT_UPLINK_DWELL_TIME;
 8015540:	2301      	movs	r3, #1
 8015542:	61bb      	str	r3, [r7, #24]
            break;
 8015544:	e02f      	b.n	80155a6 <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_DEF_DOWNLINK_DWELL_TIME:
        {
            phyParam.Value = AS923_DEFAULT_DOWNLINK_DWELL_TIME;
 8015546:	2300      	movs	r3, #0
 8015548:	61bb      	str	r3, [r7, #24]
            break;
 801554a:	e02c      	b.n	80155a6 <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_DEF_MAX_EIRP:
        {
            phyParam.fValue = AS923_DEFAULT_MAX_EIRP;
 801554c:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 8015550:	61bb      	str	r3, [r7, #24]
            break;
 8015552:	e028      	b.n	80155a6 <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_DEF_ANTENNA_GAIN:
        {
            phyParam.fValue = AS923_DEFAULT_ANTENNA_GAIN;
 8015554:	4b1d      	ldr	r3, [pc, #116]	@ (80155cc <RegionAS923GetPhyParam+0x2dc>)
 8015556:	61bb      	str	r3, [r7, #24]
            break;
 8015558:	e025      	b.n	80155a6 <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_BEACON_CHANNEL_FREQ:
        {
            phyParam.Value = AS923_BEACON_CHANNEL_FREQ - REGION_AS923_FREQ_OFFSET;
 801555a:	4b1d      	ldr	r3, [pc, #116]	@ (80155d0 <RegionAS923GetPhyParam+0x2e0>)
 801555c:	61bb      	str	r3, [r7, #24]
            break;
 801555e:	e022      	b.n	80155a6 <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_BEACON_FORMAT:
        {
            phyParam.BeaconFormat.BeaconSize = AS923_BEACON_SIZE;
 8015560:	2311      	movs	r3, #17
 8015562:	763b      	strb	r3, [r7, #24]
            phyParam.BeaconFormat.Rfu1Size = AS923_RFU1_SIZE;
 8015564:	2301      	movs	r3, #1
 8015566:	767b      	strb	r3, [r7, #25]
            phyParam.BeaconFormat.Rfu2Size = AS923_RFU2_SIZE;
 8015568:	2300      	movs	r3, #0
 801556a:	76bb      	strb	r3, [r7, #26]
            break;
 801556c:	e01b      	b.n	80155a6 <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_BEACON_CHANNEL_DR:
        {
            phyParam.Value = AS923_BEACON_CHANNEL_DR;
 801556e:	2303      	movs	r3, #3
 8015570:	61bb      	str	r3, [r7, #24]
            break;
 8015572:	e018      	b.n	80155a6 <RegionAS923GetPhyParam+0x2b6>
        case PHY_PING_SLOT_CHANNEL_FREQ:
        {
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
            phyParam.Value = AS923_PING_SLOT_CHANNEL_FREQ;
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
            phyParam.Value = AS923_PING_SLOT_CHANNEL_FREQ - REGION_AS923_FREQ_OFFSET;
 8015574:	4b16      	ldr	r3, [pc, #88]	@ (80155d0 <RegionAS923GetPhyParam+0x2e0>)
 8015576:	61bb      	str	r3, [r7, #24]
#endif /* REGION_VERSION */
            break;
 8015578:	e015      	b.n	80155a6 <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_PING_SLOT_CHANNEL_DR:
        {
            phyParam.Value = AS923_PING_SLOT_CHANNEL_DR;
 801557a:	2303      	movs	r3, #3
 801557c:	61bb      	str	r3, [r7, #24]
            break;
 801557e:	e012      	b.n	80155a6 <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_SF_FROM_DR:
        {
            phyParam.Value = DataratesAS923[getPhy->Datarate];
 8015580:	687b      	ldr	r3, [r7, #4]
 8015582:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015586:	461a      	mov	r2, r3
 8015588:	4b12      	ldr	r3, [pc, #72]	@ (80155d4 <RegionAS923GetPhyParam+0x2e4>)
 801558a:	5c9b      	ldrb	r3, [r3, r2]
 801558c:	61bb      	str	r3, [r7, #24]
            break;
 801558e:	e00a      	b.n	80155a6 <RegionAS923GetPhyParam+0x2b6>
        }
        case PHY_BW_FROM_DR:
        {
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsAS923 );
 8015590:	687b      	ldr	r3, [r7, #4]
 8015592:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015596:	4910      	ldr	r1, [pc, #64]	@ (80155d8 <RegionAS923GetPhyParam+0x2e8>)
 8015598:	4618      	mov	r0, r3
 801559a:	f001 fea1 	bl	80172e0 <RegionCommonGetBandwidth>
 801559e:	4603      	mov	r3, r0
 80155a0:	61bb      	str	r3, [r7, #24]
            break;
 80155a2:	e000      	b.n	80155a6 <RegionAS923GetPhyParam+0x2b6>
        }
        default:
        {
            break;
 80155a4:	bf00      	nop
        }
    }

#endif /* REGION_AS923 */
    return phyParam;
 80155a6:	69bb      	ldr	r3, [r7, #24]
 80155a8:	61fb      	str	r3, [r7, #28]
 80155aa:	69fb      	ldr	r3, [r7, #28]
}
 80155ac:	4618      	mov	r0, r3
 80155ae:	3720      	adds	r7, #32
 80155b0:	46bd      	mov	sp, r7
 80155b2:	bd80      	pop	{r7, pc}
 80155b4:	20001bc4 	.word	0x20001bc4
 80155b8:	0801f7dc 	.word	0x0801f7dc
 80155bc:	0801f7ec 	.word	0x0801f7ec
 80155c0:	0801f7e4 	.word	0x0801f7e4
 80155c4:	fffffc18 	.word	0xfffffc18
 80155c8:	3706ea00 	.word	0x3706ea00
 80155cc:	4009999a 	.word	0x4009999a
 80155d0:	3709f740 	.word	0x3709f740
 80155d4:	0801f7b4 	.word	0x0801f7b4
 80155d8:	0801f7bc 	.word	0x0801f7bc

080155dc <RegionAS923SetBandTxDone>:

void RegionAS923SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 80155dc:	b590      	push	{r4, r7, lr}
 80155de:	b085      	sub	sp, #20
 80155e0:	af02      	add	r7, sp, #8
 80155e2:	6078      	str	r0, [r7, #4]
#if defined( REGION_AS923 )
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    RegionCommonSetBandTxDone( &RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txDone->Channel].Band],
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    RegionCommonSetBandTxDone( &RegionBands[RegionNvmGroup2->Channels[txDone->Channel].Band],
 80155e4:	4b11      	ldr	r3, [pc, #68]	@ (801562c <RegionAS923SetBandTxDone+0x50>)
 80155e6:	681a      	ldr	r2, [r3, #0]
 80155e8:	4b11      	ldr	r3, [pc, #68]	@ (8015630 <RegionAS923SetBandTxDone+0x54>)
 80155ea:	6819      	ldr	r1, [r3, #0]
 80155ec:	687b      	ldr	r3, [r7, #4]
 80155ee:	781b      	ldrb	r3, [r3, #0]
 80155f0:	4618      	mov	r0, r3
 80155f2:	4603      	mov	r3, r0
 80155f4:	005b      	lsls	r3, r3, #1
 80155f6:	4403      	add	r3, r0
 80155f8:	009b      	lsls	r3, r3, #2
 80155fa:	440b      	add	r3, r1
 80155fc:	3309      	adds	r3, #9
 80155fe:	781b      	ldrb	r3, [r3, #0]
 8015600:	4619      	mov	r1, r3
 8015602:	460b      	mov	r3, r1
 8015604:	005b      	lsls	r3, r3, #1
 8015606:	440b      	add	r3, r1
 8015608:	00db      	lsls	r3, r3, #3
 801560a:	18d0      	adds	r0, r2, r3
 801560c:	687b      	ldr	r3, [r7, #4]
 801560e:	6899      	ldr	r1, [r3, #8]
 8015610:	687b      	ldr	r3, [r7, #4]
 8015612:	785c      	ldrb	r4, [r3, #1]
 8015614:	687b      	ldr	r3, [r7, #4]
 8015616:	691a      	ldr	r2, [r3, #16]
 8015618:	9200      	str	r2, [sp, #0]
 801561a:	68db      	ldr	r3, [r3, #12]
 801561c:	4622      	mov	r2, r4
 801561e:	f001 f9e5 	bl	80169ec <RegionCommonSetBandTxDone>
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#endif /* REGION_VERSION */
#endif /* REGION_AS923 */
}
 8015622:	bf00      	nop
 8015624:	370c      	adds	r7, #12
 8015626:	46bd      	mov	sp, r7
 8015628:	bd90      	pop	{r4, r7, pc}
 801562a:	bf00      	nop
 801562c:	20001bc8 	.word	0x20001bc8
 8015630:	20001bc4 	.word	0x20001bc4

08015634 <RegionAS923InitDefaults>:

void RegionAS923InitDefaults( InitDefaultsParams_t* params )
{
 8015634:	b580      	push	{r7, lr}
 8015636:	b08e      	sub	sp, #56	@ 0x38
 8015638:	af00      	add	r7, sp, #0
 801563a:	6078      	str	r0, [r7, #4]
#if defined( REGION_AS923 )
    Band_t bands[AS923_MAX_NB_BANDS] =
 801563c:	2364      	movs	r3, #100	@ 0x64
 801563e:	843b      	strh	r3, [r7, #32]
 8015640:	2300      	movs	r3, #0
 8015642:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8015646:	2300      	movs	r3, #0
 8015648:	627b      	str	r3, [r7, #36]	@ 0x24
 801564a:	2300      	movs	r3, #0
 801564c:	62bb      	str	r3, [r7, #40]	@ 0x28
 801564e:	2300      	movs	r3, #0
 8015650:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8015652:	2300      	movs	r3, #0
 8015654:	633b      	str	r3, [r7, #48]	@ 0x30
 8015656:	2300      	movs	r3, #0
 8015658:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
    {
        AS923_BAND0
    };

    switch( params->Type )
 801565c:	687b      	ldr	r3, [r7, #4]
 801565e:	7b1b      	ldrb	r3, [r3, #12]
 8015660:	2b02      	cmp	r3, #2
 8015662:	d05e      	beq.n	8015722 <RegionAS923InitDefaults+0xee>
 8015664:	2b02      	cmp	r3, #2
 8015666:	dc6b      	bgt.n	8015740 <RegionAS923InitDefaults+0x10c>
 8015668:	2b00      	cmp	r3, #0
 801566a:	d002      	beq.n	8015672 <RegionAS923InitDefaults+0x3e>
 801566c:	2b01      	cmp	r3, #1
 801566e:	d043      	beq.n	80156f8 <RegionAS923InitDefaults+0xc4>
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
            break;
        }
        default:
        {
            break;
 8015670:	e066      	b.n	8015740 <RegionAS923InitDefaults+0x10c>
            if( ( params->NvmGroup1 == NULL ) || ( params->NvmGroup2 == NULL ) )
 8015672:	687b      	ldr	r3, [r7, #4]
 8015674:	681b      	ldr	r3, [r3, #0]
 8015676:	2b00      	cmp	r3, #0
 8015678:	d063      	beq.n	8015742 <RegionAS923InitDefaults+0x10e>
 801567a:	687b      	ldr	r3, [r7, #4]
 801567c:	685b      	ldr	r3, [r3, #4]
 801567e:	2b00      	cmp	r3, #0
 8015680:	d05f      	beq.n	8015742 <RegionAS923InitDefaults+0x10e>
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
 8015682:	687b      	ldr	r3, [r7, #4]
 8015684:	685b      	ldr	r3, [r3, #4]
 8015686:	4a30      	ldr	r2, [pc, #192]	@ (8015748 <RegionAS923InitDefaults+0x114>)
 8015688:	6013      	str	r3, [r2, #0]
            RegionBands = (Band_t*) params->Bands;
 801568a:	687b      	ldr	r3, [r7, #4]
 801568c:	689b      	ldr	r3, [r3, #8]
 801568e:	4a2f      	ldr	r2, [pc, #188]	@ (801574c <RegionAS923InitDefaults+0x118>)
 8015690:	6013      	str	r3, [r2, #0]
            memcpy1( ( uint8_t* )RegionBands, ( uint8_t* )bands, sizeof( Band_t ) * AS923_MAX_NB_BANDS );
 8015692:	4b2e      	ldr	r3, [pc, #184]	@ (801574c <RegionAS923InitDefaults+0x118>)
 8015694:	681b      	ldr	r3, [r3, #0]
 8015696:	f107 0120 	add.w	r1, r7, #32
 801569a:	2218      	movs	r2, #24
 801569c:	4618      	mov	r0, r3
 801569e:	f001 fece 	bl	801743e <memcpy1>
            RegionNvmGroup2->Channels[0] = ( ChannelParams_t ) AS923_LC1;
 80156a2:	4b29      	ldr	r3, [pc, #164]	@ (8015748 <RegionAS923InitDefaults+0x114>)
 80156a4:	681b      	ldr	r3, [r3, #0]
 80156a6:	4a2a      	ldr	r2, [pc, #168]	@ (8015750 <RegionAS923InitDefaults+0x11c>)
 80156a8:	ca07      	ldmia	r2, {r0, r1, r2}
 80156aa:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->Channels[1] = ( ChannelParams_t ) AS923_LC2;
 80156ae:	4b26      	ldr	r3, [pc, #152]	@ (8015748 <RegionAS923InitDefaults+0x114>)
 80156b0:	681b      	ldr	r3, [r3, #0]
 80156b2:	4a28      	ldr	r2, [pc, #160]	@ (8015754 <RegionAS923InitDefaults+0x120>)
 80156b4:	330c      	adds	r3, #12
 80156b6:	ca07      	ldmia	r2, {r0, r1, r2}
 80156b8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->Channels[0].Frequency -= REGION_AS923_FREQ_OFFSET;
 80156bc:	4b22      	ldr	r3, [pc, #136]	@ (8015748 <RegionAS923InitDefaults+0x114>)
 80156be:	681a      	ldr	r2, [r3, #0]
 80156c0:	4b21      	ldr	r3, [pc, #132]	@ (8015748 <RegionAS923InitDefaults+0x114>)
 80156c2:	681b      	ldr	r3, [r3, #0]
 80156c4:	6812      	ldr	r2, [r2, #0]
 80156c6:	601a      	str	r2, [r3, #0]
            RegionNvmGroup2->Channels[1].Frequency -= REGION_AS923_FREQ_OFFSET;
 80156c8:	4b1f      	ldr	r3, [pc, #124]	@ (8015748 <RegionAS923InitDefaults+0x114>)
 80156ca:	681a      	ldr	r2, [r3, #0]
 80156cc:	4b1e      	ldr	r3, [pc, #120]	@ (8015748 <RegionAS923InitDefaults+0x114>)
 80156ce:	681b      	ldr	r3, [r3, #0]
 80156d0:	68d2      	ldr	r2, [r2, #12]
 80156d2:	60da      	str	r2, [r3, #12]
            RegionNvmGroup2->ChannelsDefaultMask[0] = LC( 1 ) + LC( 2 );
 80156d4:	4b1c      	ldr	r3, [pc, #112]	@ (8015748 <RegionAS923InitDefaults+0x114>)
 80156d6:	681b      	ldr	r3, [r3, #0]
 80156d8:	2203      	movs	r2, #3
 80156da:	f8a3 236c 	strh.w	r2, [r3, #876]	@ 0x36c
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 80156de:	4b1a      	ldr	r3, [pc, #104]	@ (8015748 <RegionAS923InitDefaults+0x114>)
 80156e0:	681b      	ldr	r3, [r3, #0]
 80156e2:	f503 7058 	add.w	r0, r3, #864	@ 0x360
 80156e6:	4b18      	ldr	r3, [pc, #96]	@ (8015748 <RegionAS923InitDefaults+0x114>)
 80156e8:	681b      	ldr	r3, [r3, #0]
 80156ea:	f503 735b 	add.w	r3, r3, #876	@ 0x36c
 80156ee:	2201      	movs	r2, #1
 80156f0:	4619      	mov	r1, r3
 80156f2:	f001 f955 	bl	80169a0 <RegionCommonChanMaskCopy>
 80156f6:	e024      	b.n	8015742 <RegionAS923InitDefaults+0x10e>
            RegionNvmGroup2->Channels[0].Rx1Frequency = 0;
 80156f8:	4b13      	ldr	r3, [pc, #76]	@ (8015748 <RegionAS923InitDefaults+0x114>)
 80156fa:	681b      	ldr	r3, [r3, #0]
 80156fc:	2200      	movs	r2, #0
 80156fe:	605a      	str	r2, [r3, #4]
            RegionNvmGroup2->Channels[1].Rx1Frequency = 0;
 8015700:	4b11      	ldr	r3, [pc, #68]	@ (8015748 <RegionAS923InitDefaults+0x114>)
 8015702:	681b      	ldr	r3, [r3, #0]
 8015704:	2200      	movs	r2, #0
 8015706:	611a      	str	r2, [r3, #16]
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 8015708:	4b0f      	ldr	r3, [pc, #60]	@ (8015748 <RegionAS923InitDefaults+0x114>)
 801570a:	681b      	ldr	r3, [r3, #0]
 801570c:	f503 7058 	add.w	r0, r3, #864	@ 0x360
 8015710:	4b0d      	ldr	r3, [pc, #52]	@ (8015748 <RegionAS923InitDefaults+0x114>)
 8015712:	681b      	ldr	r3, [r3, #0]
 8015714:	f503 735b 	add.w	r3, r3, #876	@ 0x36c
 8015718:	2201      	movs	r2, #1
 801571a:	4619      	mov	r1, r3
 801571c:	f001 f940 	bl	80169a0 <RegionCommonChanMaskCopy>
            break;
 8015720:	e00f      	b.n	8015742 <RegionAS923InitDefaults+0x10e>
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
 8015722:	4b09      	ldr	r3, [pc, #36]	@ (8015748 <RegionAS923InitDefaults+0x114>)
 8015724:	681b      	ldr	r3, [r3, #0]
 8015726:	f8b3 1360 	ldrh.w	r1, [r3, #864]	@ 0x360
 801572a:	4b07      	ldr	r3, [pc, #28]	@ (8015748 <RegionAS923InitDefaults+0x114>)
 801572c:	681b      	ldr	r3, [r3, #0]
 801572e:	f8b3 236c 	ldrh.w	r2, [r3, #876]	@ 0x36c
 8015732:	4b05      	ldr	r3, [pc, #20]	@ (8015748 <RegionAS923InitDefaults+0x114>)
 8015734:	681b      	ldr	r3, [r3, #0]
 8015736:	430a      	orrs	r2, r1
 8015738:	b292      	uxth	r2, r2
 801573a:	f8a3 2360 	strh.w	r2, [r3, #864]	@ 0x360
            break;
 801573e:	e000      	b.n	8015742 <RegionAS923InitDefaults+0x10e>
            break;
 8015740:	bf00      	nop
        }
    }
#endif /* REGION_AS923 */
}
 8015742:	3738      	adds	r7, #56	@ 0x38
 8015744:	46bd      	mov	sp, r7
 8015746:	bd80      	pop	{r7, pc}
 8015748:	20001bc4 	.word	0x20001bc4
 801574c:	20001bc8 	.word	0x20001bc8
 8015750:	0801f1dc 	.word	0x0801f1dc
 8015754:	0801f1e8 	.word	0x0801f1e8

08015758 <RegionAS923Verify>:

bool RegionAS923Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 8015758:	b580      	push	{r7, lr}
 801575a:	b082      	sub	sp, #8
 801575c:	af00      	add	r7, sp, #0
 801575e:	6078      	str	r0, [r7, #4]
 8015760:	460b      	mov	r3, r1
 8015762:	70fb      	strb	r3, [r7, #3]
#if defined( REGION_AS923 )
    switch( phyAttribute )
 8015764:	78fb      	ldrb	r3, [r7, #3]
 8015766:	2b0f      	cmp	r3, #15
 8015768:	f200 808f 	bhi.w	801588a <RegionAS923Verify+0x132>
 801576c:	a201      	add	r2, pc, #4	@ (adr r2, 8015774 <RegionAS923Verify+0x1c>)
 801576e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015772:	bf00      	nop
 8015774:	080157b5 	.word	0x080157b5
 8015778:	0801588b 	.word	0x0801588b
 801577c:	0801588b 	.word	0x0801588b
 8015780:	0801588b 	.word	0x0801588b
 8015784:	0801588b 	.word	0x0801588b
 8015788:	080157c3 	.word	0x080157c3
 801578c:	08015807 	.word	0x08015807
 8015790:	08015825 	.word	0x08015825
 8015794:	0801588b 	.word	0x0801588b
 8015798:	08015869 	.word	0x08015869
 801579c:	08015869 	.word	0x08015869
 80157a0:	0801588b 	.word	0x0801588b
 80157a4:	0801588b 	.word	0x0801588b
 80157a8:	0801588b 	.word	0x0801588b
 80157ac:	0801588b 	.word	0x0801588b
 80157b0:	08015887 	.word	0x08015887
    {
        case PHY_FREQUENCY:
        {
            return VerifyRfFreq( verify->Frequency );
 80157b4:	687b      	ldr	r3, [r7, #4]
 80157b6:	681b      	ldr	r3, [r3, #0]
 80157b8:	4618      	mov	r0, r3
 80157ba:	f7ff fd23 	bl	8015204 <VerifyRfFreq>
 80157be:	4603      	mov	r3, r0
 80157c0:	e064      	b.n	801588c <RegionAS923Verify+0x134>
        }
        case PHY_TX_DR:
        {
            if( verify->DatarateParams.UplinkDwellTime == 0 )
 80157c2:	687b      	ldr	r3, [r7, #4]
 80157c4:	789b      	ldrb	r3, [r3, #2]
 80157c6:	2b00      	cmp	r3, #0
 80157c8:	d10e      	bne.n	80157e8 <RegionAS923Verify+0x90>
            {
                return RegionCommonValueInRange( verify->DatarateParams.Datarate, AS923_TX_MIN_DATARATE, AS923_TX_MAX_DATARATE );
 80157ca:	687b      	ldr	r3, [r7, #4]
 80157cc:	f993 3000 	ldrsb.w	r3, [r3]
 80157d0:	2207      	movs	r2, #7
 80157d2:	2100      	movs	r1, #0
 80157d4:	4618      	mov	r0, r3
 80157d6:	f001 f866 	bl	80168a6 <RegionCommonValueInRange>
 80157da:	4603      	mov	r3, r0
 80157dc:	2b00      	cmp	r3, #0
 80157de:	bf14      	ite	ne
 80157e0:	2301      	movne	r3, #1
 80157e2:	2300      	moveq	r3, #0
 80157e4:	b2db      	uxtb	r3, r3
 80157e6:	e051      	b.n	801588c <RegionAS923Verify+0x134>
            }
            else
            {
                return RegionCommonValueInRange( verify->DatarateParams.Datarate, AS923_DWELL_LIMIT_DATARATE, AS923_TX_MAX_DATARATE );
 80157e8:	687b      	ldr	r3, [r7, #4]
 80157ea:	f993 3000 	ldrsb.w	r3, [r3]
 80157ee:	2207      	movs	r2, #7
 80157f0:	2102      	movs	r1, #2
 80157f2:	4618      	mov	r0, r3
 80157f4:	f001 f857 	bl	80168a6 <RegionCommonValueInRange>
 80157f8:	4603      	mov	r3, r0
 80157fa:	2b00      	cmp	r3, #0
 80157fc:	bf14      	ite	ne
 80157fe:	2301      	movne	r3, #1
 8015800:	2300      	moveq	r3, #0
 8015802:	b2db      	uxtb	r3, r3
 8015804:	e042      	b.n	801588c <RegionAS923Verify+0x134>
            }
        }
        case PHY_DEF_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
 8015806:	687b      	ldr	r3, [r7, #4]
 8015808:	f993 3000 	ldrsb.w	r3, [r3]
 801580c:	2205      	movs	r2, #5
 801580e:	2100      	movs	r1, #0
 8015810:	4618      	mov	r0, r3
 8015812:	f001 f848 	bl	80168a6 <RegionCommonValueInRange>
 8015816:	4603      	mov	r3, r0
 8015818:	2b00      	cmp	r3, #0
 801581a:	bf14      	ite	ne
 801581c:	2301      	movne	r3, #1
 801581e:	2300      	moveq	r3, #0
 8015820:	b2db      	uxtb	r3, r3
 8015822:	e033      	b.n	801588c <RegionAS923Verify+0x134>
        }
        case PHY_RX_DR:
        {
            if( verify->DatarateParams.DownlinkDwellTime == 0 )
 8015824:	687b      	ldr	r3, [r7, #4]
 8015826:	785b      	ldrb	r3, [r3, #1]
 8015828:	2b00      	cmp	r3, #0
 801582a:	d10e      	bne.n	801584a <RegionAS923Verify+0xf2>
            {
                return RegionCommonValueInRange( verify->DatarateParams.Datarate, AS923_RX_MIN_DATARATE, AS923_RX_MAX_DATARATE );
 801582c:	687b      	ldr	r3, [r7, #4]
 801582e:	f993 3000 	ldrsb.w	r3, [r3]
 8015832:	2207      	movs	r2, #7
 8015834:	2100      	movs	r1, #0
 8015836:	4618      	mov	r0, r3
 8015838:	f001 f835 	bl	80168a6 <RegionCommonValueInRange>
 801583c:	4603      	mov	r3, r0
 801583e:	2b00      	cmp	r3, #0
 8015840:	bf14      	ite	ne
 8015842:	2301      	movne	r3, #1
 8015844:	2300      	moveq	r3, #0
 8015846:	b2db      	uxtb	r3, r3
 8015848:	e020      	b.n	801588c <RegionAS923Verify+0x134>
            }
            else
            {
                return RegionCommonValueInRange( verify->DatarateParams.Datarate, AS923_DWELL_LIMIT_DATARATE, AS923_RX_MAX_DATARATE );
 801584a:	687b      	ldr	r3, [r7, #4]
 801584c:	f993 3000 	ldrsb.w	r3, [r3]
 8015850:	2207      	movs	r2, #7
 8015852:	2102      	movs	r1, #2
 8015854:	4618      	mov	r0, r3
 8015856:	f001 f826 	bl	80168a6 <RegionCommonValueInRange>
 801585a:	4603      	mov	r3, r0
 801585c:	2b00      	cmp	r3, #0
 801585e:	bf14      	ite	ne
 8015860:	2301      	movne	r3, #1
 8015862:	2300      	moveq	r3, #0
 8015864:	b2db      	uxtb	r3, r3
 8015866:	e011      	b.n	801588c <RegionAS923Verify+0x134>
        }
        case PHY_DEF_TX_POWER:
        case PHY_TX_POWER:
        {
            // Remark: switched min and max!
            return RegionCommonValueInRange( verify->TxPower, AS923_MAX_TX_POWER, AS923_MIN_TX_POWER );
 8015868:	687b      	ldr	r3, [r7, #4]
 801586a:	f993 3000 	ldrsb.w	r3, [r3]
 801586e:	2207      	movs	r2, #7
 8015870:	2100      	movs	r1, #0
 8015872:	4618      	mov	r0, r3
 8015874:	f001 f817 	bl	80168a6 <RegionCommonValueInRange>
 8015878:	4603      	mov	r3, r0
 801587a:	2b00      	cmp	r3, #0
 801587c:	bf14      	ite	ne
 801587e:	2301      	movne	r3, #1
 8015880:	2300      	moveq	r3, #0
 8015882:	b2db      	uxtb	r3, r3
 8015884:	e002      	b.n	801588c <RegionAS923Verify+0x134>
        }
        case PHY_DUTY_CYCLE:
        {
            return AS923_DUTY_CYCLE_ENABLED;
 8015886:	2300      	movs	r3, #0
 8015888:	e000      	b.n	801588c <RegionAS923Verify+0x134>
        }
        default:
            return false;
 801588a:	2300      	movs	r3, #0
    }
#else
    return false;
#endif /* REGION_AS923 */
}
 801588c:	4618      	mov	r0, r3
 801588e:	3708      	adds	r7, #8
 8015890:	46bd      	mov	sp, r7
 8015892:	bd80      	pop	{r7, pc}

08015894 <RegionAS923ApplyCFList>:

void RegionAS923ApplyCFList( ApplyCFListParams_t* applyCFList )
{
 8015894:	b580      	push	{r7, lr}
 8015896:	b08a      	sub	sp, #40	@ 0x28
 8015898:	af00      	add	r7, sp, #0
 801589a:	6078      	str	r0, [r7, #4]
    ChannelParams_t newChannel;
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    // Setup default datarate range
    newChannel.DrRange.Value = ( DR_5 << 4 ) | DR_0;
 801589c:	2350      	movs	r3, #80	@ 0x50
 801589e:	f887 3020 	strb.w	r3, [r7, #32]

    // Size of the optional CF list
    if( applyCFList->Size != 16 )
 80158a2:	687b      	ldr	r3, [r7, #4]
 80158a4:	7a1b      	ldrb	r3, [r3, #8]
 80158a6:	2b10      	cmp	r3, #16
 80158a8:	d162      	bne.n	8015970 <RegionAS923ApplyCFList+0xdc>
    {
        return;
    }

    // Last byte CFListType must be 0 to indicate the CFList contains a list of frequencies
    if( applyCFList->Payload[15] != 0 )
 80158aa:	687b      	ldr	r3, [r7, #4]
 80158ac:	685b      	ldr	r3, [r3, #4]
 80158ae:	330f      	adds	r3, #15
 80158b0:	781b      	ldrb	r3, [r3, #0]
 80158b2:	2b00      	cmp	r3, #0
 80158b4:	d15e      	bne.n	8015974 <RegionAS923ApplyCFList+0xe0>
    {
        return;
    }

    // Last byte is RFU, don't take it into account
    for( uint8_t i = 0, chanIdx = AS923_NUMB_DEFAULT_CHANNELS; chanIdx < AS923_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 80158b6:	2300      	movs	r3, #0
 80158b8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80158bc:	2302      	movs	r3, #2
 80158be:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80158c2:	e050      	b.n	8015966 <RegionAS923ApplyCFList+0xd2>
    {
        if( chanIdx < ( AS923_NUMB_CHANNELS_CF_LIST + AS923_NUMB_DEFAULT_CHANNELS ) )
 80158c4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80158c8:	2b06      	cmp	r3, #6
 80158ca:	d824      	bhi.n	8015916 <RegionAS923ApplyCFList+0x82>
        {
            // Channel frequency
            newChannel.Frequency = (uint32_t) applyCFList->Payload[i];
 80158cc:	687b      	ldr	r3, [r7, #4]
 80158ce:	685a      	ldr	r2, [r3, #4]
 80158d0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80158d4:	4413      	add	r3, r2
 80158d6:	781b      	ldrb	r3, [r3, #0]
 80158d8:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 1] << 8 );
 80158da:	69ba      	ldr	r2, [r7, #24]
 80158dc:	687b      	ldr	r3, [r7, #4]
 80158de:	6859      	ldr	r1, [r3, #4]
 80158e0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80158e4:	3301      	adds	r3, #1
 80158e6:	440b      	add	r3, r1
 80158e8:	781b      	ldrb	r3, [r3, #0]
 80158ea:	021b      	lsls	r3, r3, #8
 80158ec:	4313      	orrs	r3, r2
 80158ee:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 2] << 16 );
 80158f0:	69ba      	ldr	r2, [r7, #24]
 80158f2:	687b      	ldr	r3, [r7, #4]
 80158f4:	6859      	ldr	r1, [r3, #4]
 80158f6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80158fa:	3302      	adds	r3, #2
 80158fc:	440b      	add	r3, r1
 80158fe:	781b      	ldrb	r3, [r3, #0]
 8015900:	041b      	lsls	r3, r3, #16
 8015902:	4313      	orrs	r3, r2
 8015904:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency *= 100;
 8015906:	69bb      	ldr	r3, [r7, #24]
 8015908:	2264      	movs	r2, #100	@ 0x64
 801590a:	fb02 f303 	mul.w	r3, r2, r3
 801590e:	61bb      	str	r3, [r7, #24]

            // Initialize alternative frequency to 0
            newChannel.Rx1Frequency = 0;
 8015910:	2300      	movs	r3, #0
 8015912:	61fb      	str	r3, [r7, #28]
 8015914:	e006      	b.n	8015924 <RegionAS923ApplyCFList+0x90>
        }
        else
        {
            newChannel.Frequency = 0;
 8015916:	2300      	movs	r3, #0
 8015918:	61bb      	str	r3, [r7, #24]
            newChannel.DrRange.Value = 0;
 801591a:	2300      	movs	r3, #0
 801591c:	f887 3020 	strb.w	r3, [r7, #32]
            newChannel.Rx1Frequency = 0;
 8015920:	2300      	movs	r3, #0
 8015922:	61fb      	str	r3, [r7, #28]
        }

        if( newChannel.Frequency != 0 )
 8015924:	69bb      	ldr	r3, [r7, #24]
 8015926:	2b00      	cmp	r3, #0
 8015928:	d00b      	beq.n	8015942 <RegionAS923ApplyCFList+0xae>
        {
            channelAdd.NewChannel = &newChannel;
 801592a:	f107 0318 	add.w	r3, r7, #24
 801592e:	613b      	str	r3, [r7, #16]
            channelAdd.ChannelId = chanIdx;
 8015930:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8015934:	753b      	strb	r3, [r7, #20]

            // Try to add all channels
            RegionAS923ChannelAdd( &channelAdd );
 8015936:	f107 0310 	add.w	r3, r7, #16
 801593a:	4618      	mov	r0, r3
 801593c:	f000 fd00 	bl	8016340 <RegionAS923ChannelAdd>
 8015940:	e007      	b.n	8015952 <RegionAS923ApplyCFList+0xbe>
        }
        else
        {
            channelRemove.ChannelId = chanIdx;
 8015942:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8015946:	733b      	strb	r3, [r7, #12]

            RegionAS923ChannelsRemove( &channelRemove );
 8015948:	f107 030c 	add.w	r3, r7, #12
 801594c:	4618      	mov	r0, r3
 801594e:	f000 fd93 	bl	8016478 <RegionAS923ChannelsRemove>
    for( uint8_t i = 0, chanIdx = AS923_NUMB_DEFAULT_CHANNELS; chanIdx < AS923_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 8015952:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8015956:	3303      	adds	r3, #3
 8015958:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801595c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8015960:	3301      	adds	r3, #1
 8015962:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8015966:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801596a:	2b0f      	cmp	r3, #15
 801596c:	d9aa      	bls.n	80158c4 <RegionAS923ApplyCFList+0x30>
 801596e:	e002      	b.n	8015976 <RegionAS923ApplyCFList+0xe2>
        return;
 8015970:	bf00      	nop
 8015972:	e000      	b.n	8015976 <RegionAS923ApplyCFList+0xe2>
        return;
 8015974:	bf00      	nop
        }
    }
#endif /* REGION_AS923 */
}
 8015976:	3728      	adds	r7, #40	@ 0x28
 8015978:	46bd      	mov	sp, r7
 801597a:	bd80      	pop	{r7, pc}

0801597c <RegionAS923ChanMaskSet>:

bool RegionAS923ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 801597c:	b580      	push	{r7, lr}
 801597e:	b082      	sub	sp, #8
 8015980:	af00      	add	r7, sp, #0
 8015982:	6078      	str	r0, [r7, #4]
#if defined( REGION_AS923 )
    switch( chanMaskSet->ChannelsMaskType )
 8015984:	687b      	ldr	r3, [r7, #4]
 8015986:	791b      	ldrb	r3, [r3, #4]
 8015988:	2b00      	cmp	r3, #0
 801598a:	d002      	beq.n	8015992 <RegionAS923ChanMaskSet+0x16>
 801598c:	2b01      	cmp	r3, #1
 801598e:	d00b      	beq.n	80159a8 <RegionAS923ChanMaskSet+0x2c>
 8015990:	e015      	b.n	80159be <RegionAS923ChanMaskSet+0x42>
    {
        case CHANNELS_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, chanMaskSet->ChannelsMaskIn, 1 );
 8015992:	4b0e      	ldr	r3, [pc, #56]	@ (80159cc <RegionAS923ChanMaskSet+0x50>)
 8015994:	681b      	ldr	r3, [r3, #0]
 8015996:	f503 7058 	add.w	r0, r3, #864	@ 0x360
 801599a:	687b      	ldr	r3, [r7, #4]
 801599c:	681b      	ldr	r3, [r3, #0]
 801599e:	2201      	movs	r2, #1
 80159a0:	4619      	mov	r1, r3
 80159a2:	f000 fffd 	bl	80169a0 <RegionCommonChanMaskCopy>
            break;
 80159a6:	e00c      	b.n	80159c2 <RegionAS923ChanMaskSet+0x46>
        }
        case CHANNELS_DEFAULT_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, 1 );
 80159a8:	4b08      	ldr	r3, [pc, #32]	@ (80159cc <RegionAS923ChanMaskSet+0x50>)
 80159aa:	681b      	ldr	r3, [r3, #0]
 80159ac:	f503 705b 	add.w	r0, r3, #876	@ 0x36c
 80159b0:	687b      	ldr	r3, [r7, #4]
 80159b2:	681b      	ldr	r3, [r3, #0]
 80159b4:	2201      	movs	r2, #1
 80159b6:	4619      	mov	r1, r3
 80159b8:	f000 fff2 	bl	80169a0 <RegionCommonChanMaskCopy>
            break;
 80159bc:	e001      	b.n	80159c2 <RegionAS923ChanMaskSet+0x46>
        }
        default:
            return false;
 80159be:	2300      	movs	r3, #0
 80159c0:	e000      	b.n	80159c4 <RegionAS923ChanMaskSet+0x48>
    }
    return true;
 80159c2:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_AS923 */
}
 80159c4:	4618      	mov	r0, r3
 80159c6:	3708      	adds	r7, #8
 80159c8:	46bd      	mov	sp, r7
 80159ca:	bd80      	pop	{r7, pc}
 80159cc:	20001bc4 	.word	0x20001bc4

080159d0 <RegionAS923ComputeRxWindowParameters>:

void RegionAS923ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 80159d0:	b580      	push	{r7, lr}
 80159d2:	b088      	sub	sp, #32
 80159d4:	af02      	add	r7, sp, #8
 80159d6:	60ba      	str	r2, [r7, #8]
 80159d8:	607b      	str	r3, [r7, #4]
 80159da:	4603      	mov	r3, r0
 80159dc:	73fb      	strb	r3, [r7, #15]
 80159de:	460b      	mov	r3, r1
 80159e0:	73bb      	strb	r3, [r7, #14]
#if defined( REGION_AS923 )
    uint32_t tSymbolInUs = 0;
 80159e2:	2300      	movs	r3, #0
 80159e4:	617b      	str	r3, [r7, #20]

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, AS923_RX_MAX_DATARATE );
 80159e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80159ea:	2b07      	cmp	r3, #7
 80159ec:	bfa8      	it	ge
 80159ee:	2307      	movge	r3, #7
 80159f0:	b25a      	sxtb	r2, r3
 80159f2:	687b      	ldr	r3, [r7, #4]
 80159f4:	705a      	strb	r2, [r3, #1]
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsAS923 );
 80159f6:	687b      	ldr	r3, [r7, #4]
 80159f8:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80159fc:	491e      	ldr	r1, [pc, #120]	@ (8015a78 <RegionAS923ComputeRxWindowParameters+0xa8>)
 80159fe:	4618      	mov	r0, r3
 8015a00:	f001 fc6e 	bl	80172e0 <RegionCommonGetBandwidth>
 8015a04:	4603      	mov	r3, r0
 8015a06:	b2da      	uxtb	r2, r3
 8015a08:	687b      	ldr	r3, [r7, #4]
 8015a0a:	709a      	strb	r2, [r3, #2]

    if( rxConfigParams->Datarate == DR_7 )
 8015a0c:	687b      	ldr	r3, [r7, #4]
 8015a0e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015a12:	2b07      	cmp	r3, #7
 8015a14:	d10a      	bne.n	8015a2c <RegionAS923ComputeRxWindowParameters+0x5c>
    { // FSK
        tSymbolInUs = RegionCommonComputeSymbolTimeFsk( DataratesAS923[rxConfigParams->Datarate] );
 8015a16:	687b      	ldr	r3, [r7, #4]
 8015a18:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015a1c:	461a      	mov	r2, r3
 8015a1e:	4b17      	ldr	r3, [pc, #92]	@ (8015a7c <RegionAS923ComputeRxWindowParameters+0xac>)
 8015a20:	5c9b      	ldrb	r3, [r3, r2]
 8015a22:	4618      	mov	r0, r3
 8015a24:	f001 f9f0 	bl	8016e08 <RegionCommonComputeSymbolTimeFsk>
 8015a28:	6178      	str	r0, [r7, #20]
 8015a2a:	e011      	b.n	8015a50 <RegionAS923ComputeRxWindowParameters+0x80>
    }
    else
    { // LoRa
        tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesAS923[rxConfigParams->Datarate], BandwidthsAS923[rxConfigParams->Datarate] );
 8015a2c:	687b      	ldr	r3, [r7, #4]
 8015a2e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015a32:	461a      	mov	r2, r3
 8015a34:	4b11      	ldr	r3, [pc, #68]	@ (8015a7c <RegionAS923ComputeRxWindowParameters+0xac>)
 8015a36:	5c9a      	ldrb	r2, [r3, r2]
 8015a38:	687b      	ldr	r3, [r7, #4]
 8015a3a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015a3e:	4619      	mov	r1, r3
 8015a40:	4b0d      	ldr	r3, [pc, #52]	@ (8015a78 <RegionAS923ComputeRxWindowParameters+0xa8>)
 8015a42:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8015a46:	4619      	mov	r1, r3
 8015a48:	4610      	mov	r0, r2
 8015a4a:	f001 f9c7 	bl	8016ddc <RegionCommonComputeSymbolTimeLoRa>
 8015a4e:	6178      	str	r0, [r7, #20]
    }

    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 8015a50:	4b0b      	ldr	r3, [pc, #44]	@ (8015a80 <RegionAS923ComputeRxWindowParameters+0xb0>)
 8015a52:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8015a54:	4798      	blx	r3
 8015a56:	687b      	ldr	r3, [r7, #4]
 8015a58:	3308      	adds	r3, #8
 8015a5a:	687a      	ldr	r2, [r7, #4]
 8015a5c:	320c      	adds	r2, #12
 8015a5e:	7bb9      	ldrb	r1, [r7, #14]
 8015a60:	9201      	str	r2, [sp, #4]
 8015a62:	9300      	str	r3, [sp, #0]
 8015a64:	4603      	mov	r3, r0
 8015a66:	68ba      	ldr	r2, [r7, #8]
 8015a68:	6978      	ldr	r0, [r7, #20]
 8015a6a:	f001 f9dd 	bl	8016e28 <RegionCommonComputeRxWindowParameters>
#endif /* REGION_AS923 */
}
 8015a6e:	bf00      	nop
 8015a70:	3718      	adds	r7, #24
 8015a72:	46bd      	mov	sp, r7
 8015a74:	bd80      	pop	{r7, pc}
 8015a76:	bf00      	nop
 8015a78:	0801f7bc 	.word	0x0801f7bc
 8015a7c:	0801f7b4 	.word	0x0801f7b4
 8015a80:	0801f874 	.word	0x0801f874

08015a84 <RegionAS923RxConfig>:

bool RegionAS923RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 8015a84:	b5b0      	push	{r4, r5, r7, lr}
 8015a86:	b090      	sub	sp, #64	@ 0x40
 8015a88:	af0a      	add	r7, sp, #40	@ 0x28
 8015a8a:	6078      	str	r0, [r7, #4]
 8015a8c:	6039      	str	r1, [r7, #0]
#if defined( REGION_AS923 )
    RadioModems_t modem;
    int8_t dr = rxConfig->Datarate;
 8015a8e:	687b      	ldr	r3, [r7, #4]
 8015a90:	785b      	ldrb	r3, [r3, #1]
 8015a92:	73fb      	strb	r3, [r7, #15]
    uint8_t maxPayload = 0;
 8015a94:	2300      	movs	r3, #0
 8015a96:	75bb      	strb	r3, [r7, #22]
    int8_t phyDr = 0;
 8015a98:	2300      	movs	r3, #0
 8015a9a:	73bb      	strb	r3, [r7, #14]
    uint32_t frequency = rxConfig->Frequency;
 8015a9c:	687b      	ldr	r3, [r7, #4]
 8015a9e:	685b      	ldr	r3, [r3, #4]
 8015aa0:	613b      	str	r3, [r7, #16]

    if( Radio.GetStatus( ) != RF_IDLE )
 8015aa2:	4b5a      	ldr	r3, [pc, #360]	@ (8015c0c <RegionAS923RxConfig+0x188>)
 8015aa4:	685b      	ldr	r3, [r3, #4]
 8015aa6:	4798      	blx	r3
 8015aa8:	4603      	mov	r3, r0
 8015aaa:	2b00      	cmp	r3, #0
 8015aac:	d001      	beq.n	8015ab2 <RegionAS923RxConfig+0x2e>
    {
        return false;
 8015aae:	2300      	movs	r3, #0
 8015ab0:	e0a8      	b.n	8015c04 <RegionAS923RxConfig+0x180>
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 8015ab2:	687b      	ldr	r3, [r7, #4]
 8015ab4:	7cdb      	ldrb	r3, [r3, #19]
 8015ab6:	2b00      	cmp	r3, #0
 8015ab8:	d126      	bne.n	8015b08 <RegionAS923RxConfig+0x84>
    {
        // Apply window 1 frequency
        frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Frequency;
 8015aba:	4b55      	ldr	r3, [pc, #340]	@ (8015c10 <RegionAS923RxConfig+0x18c>)
 8015abc:	681a      	ldr	r2, [r3, #0]
 8015abe:	687b      	ldr	r3, [r7, #4]
 8015ac0:	781b      	ldrb	r3, [r3, #0]
 8015ac2:	4619      	mov	r1, r3
 8015ac4:	460b      	mov	r3, r1
 8015ac6:	005b      	lsls	r3, r3, #1
 8015ac8:	440b      	add	r3, r1
 8015aca:	009b      	lsls	r3, r3, #2
 8015acc:	4413      	add	r3, r2
 8015ace:	681b      	ldr	r3, [r3, #0]
 8015ad0:	613b      	str	r3, [r7, #16]
        // Apply the alternative RX 1 window frequency, if it is available
        if( RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency != 0 )
 8015ad2:	4b4f      	ldr	r3, [pc, #316]	@ (8015c10 <RegionAS923RxConfig+0x18c>)
 8015ad4:	681a      	ldr	r2, [r3, #0]
 8015ad6:	687b      	ldr	r3, [r7, #4]
 8015ad8:	781b      	ldrb	r3, [r3, #0]
 8015ada:	4619      	mov	r1, r3
 8015adc:	460b      	mov	r3, r1
 8015ade:	005b      	lsls	r3, r3, #1
 8015ae0:	440b      	add	r3, r1
 8015ae2:	009b      	lsls	r3, r3, #2
 8015ae4:	4413      	add	r3, r2
 8015ae6:	3304      	adds	r3, #4
 8015ae8:	681b      	ldr	r3, [r3, #0]
 8015aea:	2b00      	cmp	r3, #0
 8015aec:	d00c      	beq.n	8015b08 <RegionAS923RxConfig+0x84>
        {
            frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency;
 8015aee:	4b48      	ldr	r3, [pc, #288]	@ (8015c10 <RegionAS923RxConfig+0x18c>)
 8015af0:	681a      	ldr	r2, [r3, #0]
 8015af2:	687b      	ldr	r3, [r7, #4]
 8015af4:	781b      	ldrb	r3, [r3, #0]
 8015af6:	4619      	mov	r1, r3
 8015af8:	460b      	mov	r3, r1
 8015afa:	005b      	lsls	r3, r3, #1
 8015afc:	440b      	add	r3, r1
 8015afe:	009b      	lsls	r3, r3, #2
 8015b00:	4413      	add	r3, r2
 8015b02:	3304      	adds	r3, #4
 8015b04:	681b      	ldr	r3, [r3, #0]
 8015b06:	613b      	str	r3, [r7, #16]
        }
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesAS923[dr];
 8015b08:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015b0c:	4a41      	ldr	r2, [pc, #260]	@ (8015c14 <RegionAS923RxConfig+0x190>)
 8015b0e:	5cd3      	ldrb	r3, [r2, r3]
 8015b10:	73bb      	strb	r3, [r7, #14]

    Radio.SetChannel( frequency );
 8015b12:	4b3e      	ldr	r3, [pc, #248]	@ (8015c0c <RegionAS923RxConfig+0x188>)
 8015b14:	68db      	ldr	r3, [r3, #12]
 8015b16:	6938      	ldr	r0, [r7, #16]
 8015b18:	4798      	blx	r3

    // Radio configuration
    if( dr == DR_7 )
 8015b1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015b1e:	2b07      	cmp	r3, #7
 8015b20:	d128      	bne.n	8015b74 <RegionAS923RxConfig+0xf0>
    {
        modem = MODEM_FSK;
 8015b22:	2300      	movs	r3, #0
 8015b24:	75fb      	strb	r3, [r7, #23]
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
 8015b26:	4b39      	ldr	r3, [pc, #228]	@ (8015c0c <RegionAS923RxConfig+0x188>)
 8015b28:	699c      	ldr	r4, [r3, #24]
 8015b2a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8015b2e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8015b32:	fb02 f303 	mul.w	r3, r2, r3
 8015b36:	4619      	mov	r1, r3
 8015b38:	687b      	ldr	r3, [r7, #4]
 8015b3a:	689b      	ldr	r3, [r3, #8]
 8015b3c:	b29b      	uxth	r3, r3
 8015b3e:	687a      	ldr	r2, [r7, #4]
 8015b40:	7c92      	ldrb	r2, [r2, #18]
 8015b42:	7df8      	ldrb	r0, [r7, #23]
 8015b44:	9209      	str	r2, [sp, #36]	@ 0x24
 8015b46:	2200      	movs	r2, #0
 8015b48:	9208      	str	r2, [sp, #32]
 8015b4a:	2200      	movs	r2, #0
 8015b4c:	9207      	str	r2, [sp, #28]
 8015b4e:	2200      	movs	r2, #0
 8015b50:	9206      	str	r2, [sp, #24]
 8015b52:	2201      	movs	r2, #1
 8015b54:	9205      	str	r2, [sp, #20]
 8015b56:	2200      	movs	r2, #0
 8015b58:	9204      	str	r2, [sp, #16]
 8015b5a:	2200      	movs	r2, #0
 8015b5c:	9203      	str	r2, [sp, #12]
 8015b5e:	9302      	str	r3, [sp, #8]
 8015b60:	2305      	movs	r3, #5
 8015b62:	9301      	str	r3, [sp, #4]
 8015b64:	4b2c      	ldr	r3, [pc, #176]	@ (8015c18 <RegionAS923RxConfig+0x194>)
 8015b66:	9300      	str	r3, [sp, #0]
 8015b68:	2300      	movs	r3, #0
 8015b6a:	460a      	mov	r2, r1
 8015b6c:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8015b70:	47a0      	blx	r4
 8015b72:	e024      	b.n	8015bbe <RegionAS923RxConfig+0x13a>
    }
    else
    {
        modem = MODEM_LORA;
 8015b74:	2301      	movs	r3, #1
 8015b76:	75fb      	strb	r3, [r7, #23]
        Radio.SetRxConfig( modem, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 8015b78:	4b24      	ldr	r3, [pc, #144]	@ (8015c0c <RegionAS923RxConfig+0x188>)
 8015b7a:	699c      	ldr	r4, [r3, #24]
 8015b7c:	687b      	ldr	r3, [r7, #4]
 8015b7e:	789b      	ldrb	r3, [r3, #2]
 8015b80:	461d      	mov	r5, r3
 8015b82:	f997 100e 	ldrsb.w	r1, [r7, #14]
 8015b86:	687b      	ldr	r3, [r7, #4]
 8015b88:	689b      	ldr	r3, [r3, #8]
 8015b8a:	b29b      	uxth	r3, r3
 8015b8c:	687a      	ldr	r2, [r7, #4]
 8015b8e:	7c92      	ldrb	r2, [r2, #18]
 8015b90:	7df8      	ldrb	r0, [r7, #23]
 8015b92:	9209      	str	r2, [sp, #36]	@ 0x24
 8015b94:	2201      	movs	r2, #1
 8015b96:	9208      	str	r2, [sp, #32]
 8015b98:	2200      	movs	r2, #0
 8015b9a:	9207      	str	r2, [sp, #28]
 8015b9c:	2200      	movs	r2, #0
 8015b9e:	9206      	str	r2, [sp, #24]
 8015ba0:	2200      	movs	r2, #0
 8015ba2:	9205      	str	r2, [sp, #20]
 8015ba4:	2200      	movs	r2, #0
 8015ba6:	9204      	str	r2, [sp, #16]
 8015ba8:	2200      	movs	r2, #0
 8015baa:	9203      	str	r2, [sp, #12]
 8015bac:	9302      	str	r3, [sp, #8]
 8015bae:	2308      	movs	r3, #8
 8015bb0:	9301      	str	r3, [sp, #4]
 8015bb2:	2300      	movs	r3, #0
 8015bb4:	9300      	str	r3, [sp, #0]
 8015bb6:	2301      	movs	r3, #1
 8015bb8:	460a      	mov	r2, r1
 8015bba:	4629      	mov	r1, r5
 8015bbc:	47a0      	blx	r4
    }

    /* ST_WORKAROUND_BEGIN: Keep repeater feature */
    if( rxConfig->RepeaterSupport == true )
 8015bbe:	687b      	ldr	r3, [r7, #4]
 8015bc0:	7c5b      	ldrb	r3, [r3, #17]
 8015bc2:	2b00      	cmp	r3, #0
 8015bc4:	d005      	beq.n	8015bd2 <RegionAS923RxConfig+0x14e>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterDwell0AS923[dr];
 8015bc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015bca:	4a14      	ldr	r2, [pc, #80]	@ (8015c1c <RegionAS923RxConfig+0x198>)
 8015bcc:	5cd3      	ldrb	r3, [r2, r3]
 8015bce:	75bb      	strb	r3, [r7, #22]
 8015bd0:	e004      	b.n	8015bdc <RegionAS923RxConfig+0x158>
    }
    else
    {
        maxPayload = MaxPayloadOfDatarateDwell0AS923[dr];
 8015bd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015bd6:	4a12      	ldr	r2, [pc, #72]	@ (8015c20 <RegionAS923RxConfig+0x19c>)
 8015bd8:	5cd3      	ldrb	r3, [r2, r3]
 8015bda:	75bb      	strb	r3, [r7, #22]
    }

    Radio.SetMaxPayloadLength( modem, maxPayload + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 8015bdc:	4b0b      	ldr	r3, [pc, #44]	@ (8015c0c <RegionAS923RxConfig+0x188>)
 8015bde:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8015be0:	7dba      	ldrb	r2, [r7, #22]
 8015be2:	320d      	adds	r2, #13
 8015be4:	b2d1      	uxtb	r1, r2
 8015be6:	7dfa      	ldrb	r2, [r7, #23]
 8015be8:	4610      	mov	r0, r2
 8015bea:	4798      	blx	r3
    /* ST_WORKAROUND_END */

    /* ST_WORKAROUND_BEGIN: Print Rx config */
    RegionCommonRxConfigPrint(rxConfig->RxSlot, frequency, dr);
 8015bec:	687b      	ldr	r3, [r7, #4]
 8015bee:	7cdb      	ldrb	r3, [r3, #19]
 8015bf0:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8015bf4:	6939      	ldr	r1, [r7, #16]
 8015bf6:	4618      	mov	r0, r3
 8015bf8:	f001 fb90 	bl	801731c <RegionCommonRxConfigPrint>
    /* ST_WORKAROUND_END */

    *datarate = (uint8_t) dr;
 8015bfc:	683b      	ldr	r3, [r7, #0]
 8015bfe:	7bfa      	ldrb	r2, [r7, #15]
 8015c00:	701a      	strb	r2, [r3, #0]
    return true;
 8015c02:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_AS923 */
}
 8015c04:	4618      	mov	r0, r3
 8015c06:	3718      	adds	r7, #24
 8015c08:	46bd      	mov	sp, r7
 8015c0a:	bdb0      	pop	{r4, r5, r7, pc}
 8015c0c:	0801f874 	.word	0x0801f874
 8015c10:	20001bc4 	.word	0x20001bc4
 8015c14:	0801f7b4 	.word	0x0801f7b4
 8015c18:	00014585 	.word	0x00014585
 8015c1c:	0801f7e4 	.word	0x0801f7e4
 8015c20:	0801f7dc 	.word	0x0801f7dc

08015c24 <RegionAS923TxConfig>:

bool RegionAS923TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 8015c24:	b590      	push	{r4, r7, lr}
 8015c26:	b093      	sub	sp, #76	@ 0x4c
 8015c28:	af0a      	add	r7, sp, #40	@ 0x28
 8015c2a:	60f8      	str	r0, [r7, #12]
 8015c2c:	60b9      	str	r1, [r7, #8]
 8015c2e:	607a      	str	r2, [r7, #4]
#if defined( REGION_AS923 )
    RadioModems_t modem;
    int8_t phyDr = DataratesAS923[txConfig->Datarate];
 8015c30:	68fb      	ldr	r3, [r7, #12]
 8015c32:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015c36:	461a      	mov	r2, r3
 8015c38:	4b5d      	ldr	r3, [pc, #372]	@ (8015db0 <RegionAS923TxConfig+0x18c>)
 8015c3a:	5c9b      	ldrb	r3, [r3, r2]
 8015c3c:	77bb      	strb	r3, [r7, #30]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionBands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
 8015c3e:	68fb      	ldr	r3, [r7, #12]
 8015c40:	f993 0002 	ldrsb.w	r0, [r3, #2]
 8015c44:	4b5b      	ldr	r3, [pc, #364]	@ (8015db4 <RegionAS923TxConfig+0x190>)
 8015c46:	681a      	ldr	r2, [r3, #0]
 8015c48:	4b5b      	ldr	r3, [pc, #364]	@ (8015db8 <RegionAS923TxConfig+0x194>)
 8015c4a:	6819      	ldr	r1, [r3, #0]
 8015c4c:	68fb      	ldr	r3, [r7, #12]
 8015c4e:	781b      	ldrb	r3, [r3, #0]
 8015c50:	461c      	mov	r4, r3
 8015c52:	4623      	mov	r3, r4
 8015c54:	005b      	lsls	r3, r3, #1
 8015c56:	4423      	add	r3, r4
 8015c58:	009b      	lsls	r3, r3, #2
 8015c5a:	440b      	add	r3, r1
 8015c5c:	3309      	adds	r3, #9
 8015c5e:	781b      	ldrb	r3, [r3, #0]
 8015c60:	4619      	mov	r1, r3
 8015c62:	460b      	mov	r3, r1
 8015c64:	005b      	lsls	r3, r3, #1
 8015c66:	440b      	add	r3, r1
 8015c68:	00db      	lsls	r3, r3, #3
 8015c6a:	4413      	add	r3, r2
 8015c6c:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8015c70:	4619      	mov	r1, r3
 8015c72:	f001 fb20 	bl	80172b6 <RegionCommonLimitTxPower>
 8015c76:	4603      	mov	r3, r0
 8015c78:	777b      	strb	r3, [r7, #29]
#endif /* REGION_VERSION */
    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsAS923 );
 8015c7a:	68fb      	ldr	r3, [r7, #12]
 8015c7c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015c80:	494e      	ldr	r1, [pc, #312]	@ (8015dbc <RegionAS923TxConfig+0x198>)
 8015c82:	4618      	mov	r0, r3
 8015c84:	f001 fb2c 	bl	80172e0 <RegionCommonGetBandwidth>
 8015c88:	61b8      	str	r0, [r7, #24]
    int8_t phyTxPower = 0;
 8015c8a:	2300      	movs	r3, #0
 8015c8c:	75fb      	strb	r3, [r7, #23]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 8015c8e:	68fb      	ldr	r3, [r7, #12]
 8015c90:	6859      	ldr	r1, [r3, #4]
 8015c92:	68fb      	ldr	r3, [r7, #12]
 8015c94:	689a      	ldr	r2, [r3, #8]
 8015c96:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8015c9a:	4618      	mov	r0, r3
 8015c9c:	f001 f97c 	bl	8016f98 <RegionCommonComputeTxPower>
 8015ca0:	4603      	mov	r3, r0
 8015ca2:	75fb      	strb	r3, [r7, #23]

    // Setup the radio frequency
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 8015ca4:	4b46      	ldr	r3, [pc, #280]	@ (8015dc0 <RegionAS923TxConfig+0x19c>)
 8015ca6:	68da      	ldr	r2, [r3, #12]
 8015ca8:	4b43      	ldr	r3, [pc, #268]	@ (8015db8 <RegionAS923TxConfig+0x194>)
 8015caa:	6819      	ldr	r1, [r3, #0]
 8015cac:	68fb      	ldr	r3, [r7, #12]
 8015cae:	781b      	ldrb	r3, [r3, #0]
 8015cb0:	4618      	mov	r0, r3
 8015cb2:	4603      	mov	r3, r0
 8015cb4:	005b      	lsls	r3, r3, #1
 8015cb6:	4403      	add	r3, r0
 8015cb8:	009b      	lsls	r3, r3, #2
 8015cba:	440b      	add	r3, r1
 8015cbc:	681b      	ldr	r3, [r3, #0]
 8015cbe:	4618      	mov	r0, r3
 8015cc0:	4790      	blx	r2

    if( txConfig->Datarate == DR_7 )
 8015cc2:	68fb      	ldr	r3, [r7, #12]
 8015cc4:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015cc8:	2b07      	cmp	r3, #7
 8015cca:	d124      	bne.n	8015d16 <RegionAS923TxConfig+0xf2>
    { // High Speed FSK channel
        modem = MODEM_FSK;
 8015ccc:	2300      	movs	r3, #0
 8015cce:	77fb      	strb	r3, [r7, #31]
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
 8015cd0:	4b3b      	ldr	r3, [pc, #236]	@ (8015dc0 <RegionAS923TxConfig+0x19c>)
 8015cd2:	69dc      	ldr	r4, [r3, #28]
 8015cd4:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8015cd8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8015cdc:	fb02 f303 	mul.w	r3, r2, r3
 8015ce0:	461a      	mov	r2, r3
 8015ce2:	f997 1017 	ldrsb.w	r1, [r7, #23]
 8015ce6:	7ff8      	ldrb	r0, [r7, #31]
 8015ce8:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 8015cec:	9308      	str	r3, [sp, #32]
 8015cee:	2300      	movs	r3, #0
 8015cf0:	9307      	str	r3, [sp, #28]
 8015cf2:	2300      	movs	r3, #0
 8015cf4:	9306      	str	r3, [sp, #24]
 8015cf6:	2300      	movs	r3, #0
 8015cf8:	9305      	str	r3, [sp, #20]
 8015cfa:	2301      	movs	r3, #1
 8015cfc:	9304      	str	r3, [sp, #16]
 8015cfe:	2300      	movs	r3, #0
 8015d00:	9303      	str	r3, [sp, #12]
 8015d02:	2305      	movs	r3, #5
 8015d04:	9302      	str	r3, [sp, #8]
 8015d06:	2300      	movs	r3, #0
 8015d08:	9301      	str	r3, [sp, #4]
 8015d0a:	9200      	str	r2, [sp, #0]
 8015d0c:	69bb      	ldr	r3, [r7, #24]
 8015d0e:	f246 12a8 	movw	r2, #25000	@ 0x61a8
 8015d12:	47a0      	blx	r4
 8015d14:	e01d      	b.n	8015d52 <RegionAS923TxConfig+0x12e>
    }
    else
    {
        modem = MODEM_LORA;
 8015d16:	2301      	movs	r3, #1
 8015d18:	77fb      	strb	r3, [r7, #31]
        Radio.SetTxConfig( modem, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 8015d1a:	4b29      	ldr	r3, [pc, #164]	@ (8015dc0 <RegionAS923TxConfig+0x19c>)
 8015d1c:	69dc      	ldr	r4, [r3, #28]
 8015d1e:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8015d22:	f997 1017 	ldrsb.w	r1, [r7, #23]
 8015d26:	7ff8      	ldrb	r0, [r7, #31]
 8015d28:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 8015d2c:	9208      	str	r2, [sp, #32]
 8015d2e:	2200      	movs	r2, #0
 8015d30:	9207      	str	r2, [sp, #28]
 8015d32:	2200      	movs	r2, #0
 8015d34:	9206      	str	r2, [sp, #24]
 8015d36:	2200      	movs	r2, #0
 8015d38:	9205      	str	r2, [sp, #20]
 8015d3a:	2201      	movs	r2, #1
 8015d3c:	9204      	str	r2, [sp, #16]
 8015d3e:	2200      	movs	r2, #0
 8015d40:	9203      	str	r2, [sp, #12]
 8015d42:	2208      	movs	r2, #8
 8015d44:	9202      	str	r2, [sp, #8]
 8015d46:	2201      	movs	r2, #1
 8015d48:	9201      	str	r2, [sp, #4]
 8015d4a:	9300      	str	r3, [sp, #0]
 8015d4c:	69bb      	ldr	r3, [r7, #24]
 8015d4e:	2200      	movs	r2, #0
 8015d50:	47a0      	blx	r4
    }
    /* ST_WORKAROUND_BEGIN: Print Tx config */
    RegionCommonTxConfigPrint(RegionNvmGroup2->Channels[txConfig->Channel].Frequency, txConfig->Datarate);
 8015d52:	4b19      	ldr	r3, [pc, #100]	@ (8015db8 <RegionAS923TxConfig+0x194>)
 8015d54:	681a      	ldr	r2, [r3, #0]
 8015d56:	68fb      	ldr	r3, [r7, #12]
 8015d58:	781b      	ldrb	r3, [r3, #0]
 8015d5a:	4619      	mov	r1, r3
 8015d5c:	460b      	mov	r3, r1
 8015d5e:	005b      	lsls	r3, r3, #1
 8015d60:	440b      	add	r3, r1
 8015d62:	009b      	lsls	r3, r3, #2
 8015d64:	4413      	add	r3, r2
 8015d66:	681a      	ldr	r2, [r3, #0]
 8015d68:	68fb      	ldr	r3, [r7, #12]
 8015d6a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015d6e:	4619      	mov	r1, r3
 8015d70:	4610      	mov	r0, r2
 8015d72:	f001 fb05 	bl	8017380 <RegionCommonTxConfigPrint>
    /* ST_WORKAROUND_END */

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 8015d76:	68fb      	ldr	r3, [r7, #12]
 8015d78:	f993 2001 	ldrsb.w	r2, [r3, #1]
 8015d7c:	68fb      	ldr	r3, [r7, #12]
 8015d7e:	899b      	ldrh	r3, [r3, #12]
 8015d80:	4619      	mov	r1, r3
 8015d82:	4610      	mov	r0, r2
 8015d84:	f7ff fa64 	bl	8015250 <GetTimeOnAir>
 8015d88:	4602      	mov	r2, r0
 8015d8a:	687b      	ldr	r3, [r7, #4]
 8015d8c:	601a      	str	r2, [r3, #0]

    // Setup maximum payload length of the radio driver
    Radio.SetMaxPayloadLength( modem, txConfig->PktLen );
 8015d8e:	4b0c      	ldr	r3, [pc, #48]	@ (8015dc0 <RegionAS923TxConfig+0x19c>)
 8015d90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8015d92:	68fa      	ldr	r2, [r7, #12]
 8015d94:	8992      	ldrh	r2, [r2, #12]
 8015d96:	b2d1      	uxtb	r1, r2
 8015d98:	7ffa      	ldrb	r2, [r7, #31]
 8015d9a:	4610      	mov	r0, r2
 8015d9c:	4798      	blx	r3

    *txPower = txPowerLimited;
 8015d9e:	68bb      	ldr	r3, [r7, #8]
 8015da0:	7f7a      	ldrb	r2, [r7, #29]
 8015da2:	701a      	strb	r2, [r3, #0]
    return true;
 8015da4:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_AS923 */
}
 8015da6:	4618      	mov	r0, r3
 8015da8:	3724      	adds	r7, #36	@ 0x24
 8015daa:	46bd      	mov	sp, r7
 8015dac:	bd90      	pop	{r4, r7, pc}
 8015dae:	bf00      	nop
 8015db0:	0801f7b4 	.word	0x0801f7b4
 8015db4:	20001bc8 	.word	0x20001bc8
 8015db8:	20001bc4 	.word	0x20001bc4
 8015dbc:	0801f7bc 	.word	0x0801f7bc
 8015dc0:	0801f874 	.word	0x0801f874

08015dc4 <RegionAS923LinkAdrReq>:

uint8_t RegionAS923LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 8015dc4:	b590      	push	{r4, r7, lr}
 8015dc6:	b093      	sub	sp, #76	@ 0x4c
 8015dc8:	af00      	add	r7, sp, #0
 8015dca:	60f8      	str	r0, [r7, #12]
 8015dcc:	60b9      	str	r1, [r7, #8]
 8015dce:	607a      	str	r2, [r7, #4]
 8015dd0:	603b      	str	r3, [r7, #0]
    uint8_t status = 0x07;
 8015dd2:	2307      	movs	r3, #7
 8015dd4:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
#if defined( REGION_AS923 )
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 8015dd8:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8015ddc:	2200      	movs	r2, #0
 8015dde:	601a      	str	r2, [r3, #0]
 8015de0:	809a      	strh	r2, [r3, #4]
    uint8_t nextIndex = 0;
 8015de2:	2300      	movs	r3, #0
 8015de4:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
    uint8_t bytesProcessed = 0;
 8015de8:	2300      	movs	r3, #0
 8015dea:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    uint16_t chMask = 0;
 8015dee:	2300      	movs	r3, #0
 8015df0:	877b      	strh	r3, [r7, #58]	@ 0x3a
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    while( bytesProcessed < linkAdrReq->PayloadSize )
 8015df2:	e085      	b.n	8015f00 <RegionAS923LinkAdrReq+0x13c>
    {
        // Get ADR request parameters
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 8015df4:	68fb      	ldr	r3, [r7, #12]
 8015df6:	685a      	ldr	r2, [r3, #4]
 8015df8:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8015dfc:	4413      	add	r3, r2
 8015dfe:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 8015e02:	4611      	mov	r1, r2
 8015e04:	4618      	mov	r0, r3
 8015e06:	f000 ff0f 	bl	8016c28 <RegionCommonParseLinkAdrReq>
 8015e0a:	4603      	mov	r3, r0
 8015e0c:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44

        if( nextIndex == 0 )
 8015e10:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8015e14:	2b00      	cmp	r3, #0
 8015e16:	d07b      	beq.n	8015f10 <RegionAS923LinkAdrReq+0x14c>
            break; // break loop, since no more request has been found

        // Update bytes processed
        bytesProcessed += nextIndex;
 8015e18:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 8015e1c:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8015e20:	4413      	add	r3, r2
 8015e22:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46

        // Revert status, as we only check the last ADR request for the channel mask KO
        status = 0x07;
 8015e26:	2307      	movs	r3, #7
 8015e28:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47

        // Setup temporary channels mask
        chMask = linkAdrParams.ChMask;
 8015e2c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8015e30:	877b      	strh	r3, [r7, #58]	@ 0x3a

        // Verify channels mask
        if( ( linkAdrParams.ChMaskCtrl == 0 ) && ( chMask == 0 ) )
 8015e32:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8015e36:	2b00      	cmp	r3, #0
 8015e38:	d109      	bne.n	8015e4e <RegionAS923LinkAdrReq+0x8a>
 8015e3a:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8015e3c:	2b00      	cmp	r3, #0
 8015e3e:	d106      	bne.n	8015e4e <RegionAS923LinkAdrReq+0x8a>
        {
            status &= 0xFE; // Channel mask KO
 8015e40:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8015e44:	f023 0301 	bic.w	r3, r3, #1
 8015e48:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8015e4c:	e058      	b.n	8015f00 <RegionAS923LinkAdrReq+0x13c>
        }
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 8015e4e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8015e52:	2b00      	cmp	r3, #0
 8015e54:	d003      	beq.n	8015e5e <RegionAS923LinkAdrReq+0x9a>
 8015e56:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8015e5a:	2b05      	cmp	r3, #5
 8015e5c:	d903      	bls.n	8015e66 <RegionAS923LinkAdrReq+0xa2>
                ( linkAdrParams.ChMaskCtrl >= 7 ) )
 8015e5e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 8015e62:	2b06      	cmp	r3, #6
 8015e64:	d906      	bls.n	8015e74 <RegionAS923LinkAdrReq+0xb0>
        {
            // RFU
            status &= 0xFE; // Channel mask KO
 8015e66:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8015e6a:	f023 0301 	bic.w	r3, r3, #1
 8015e6e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8015e72:	e045      	b.n	8015f00 <RegionAS923LinkAdrReq+0x13c>
        }
        else
        {
            for( uint8_t i = 0; i < AS923_MAX_NB_CHANNELS; i++ )
 8015e74:	2300      	movs	r3, #0
 8015e76:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
 8015e7a:	e03d      	b.n	8015ef8 <RegionAS923LinkAdrReq+0x134>
            {
                if( linkAdrParams.ChMaskCtrl == 6 )
 8015e7c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8015e80:	2b06      	cmp	r3, #6
 8015e82:	d118      	bne.n	8015eb6 <RegionAS923LinkAdrReq+0xf2>
                {
                    if( RegionNvmGroup2->Channels[i].Frequency != 0 )
 8015e84:	4b5f      	ldr	r3, [pc, #380]	@ (8016004 <RegionAS923LinkAdrReq+0x240>)
 8015e86:	6819      	ldr	r1, [r3, #0]
 8015e88:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8015e8c:	4613      	mov	r3, r2
 8015e8e:	005b      	lsls	r3, r3, #1
 8015e90:	4413      	add	r3, r2
 8015e92:	009b      	lsls	r3, r3, #2
 8015e94:	440b      	add	r3, r1
 8015e96:	681b      	ldr	r3, [r3, #0]
 8015e98:	2b00      	cmp	r3, #0
 8015e9a:	d028      	beq.n	8015eee <RegionAS923LinkAdrReq+0x12a>
                    {
                        chMask |= 1 << i;
 8015e9c:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8015ea0:	2201      	movs	r2, #1
 8015ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8015ea6:	b21a      	sxth	r2, r3
 8015ea8:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8015eaa:	b21b      	sxth	r3, r3
 8015eac:	4313      	orrs	r3, r2
 8015eae:	b21b      	sxth	r3, r3
 8015eb0:	b29b      	uxth	r3, r3
 8015eb2:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8015eb4:	e01b      	b.n	8015eee <RegionAS923LinkAdrReq+0x12a>
                    }
                }
                else
                {
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 8015eb6:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8015eb8:	461a      	mov	r2, r3
 8015eba:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8015ebe:	fa42 f303 	asr.w	r3, r2, r3
 8015ec2:	f003 0301 	and.w	r3, r3, #1
 8015ec6:	2b00      	cmp	r3, #0
 8015ec8:	d011      	beq.n	8015eee <RegionAS923LinkAdrReq+0x12a>
                        ( RegionNvmGroup2->Channels[i].Frequency == 0 ) )
 8015eca:	4b4e      	ldr	r3, [pc, #312]	@ (8016004 <RegionAS923LinkAdrReq+0x240>)
 8015ecc:	6819      	ldr	r1, [r3, #0]
 8015ece:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8015ed2:	4613      	mov	r3, r2
 8015ed4:	005b      	lsls	r3, r3, #1
 8015ed6:	4413      	add	r3, r2
 8015ed8:	009b      	lsls	r3, r3, #2
 8015eda:	440b      	add	r3, r1
 8015edc:	681b      	ldr	r3, [r3, #0]
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 8015ede:	2b00      	cmp	r3, #0
 8015ee0:	d105      	bne.n	8015eee <RegionAS923LinkAdrReq+0x12a>
                    {// Trying to enable an undefined channel
                        status &= 0xFE; // Channel mask KO
 8015ee2:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8015ee6:	f023 0301 	bic.w	r3, r3, #1
 8015eea:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
            for( uint8_t i = 0; i < AS923_MAX_NB_CHANNELS; i++ )
 8015eee:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8015ef2:	3301      	adds	r3, #1
 8015ef4:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
 8015ef8:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8015efc:	2b0f      	cmp	r3, #15
 8015efe:	d9bd      	bls.n	8015e7c <RegionAS923LinkAdrReq+0xb8>
    while( bytesProcessed < linkAdrReq->PayloadSize )
 8015f00:	68fb      	ldr	r3, [r7, #12]
 8015f02:	7a1b      	ldrb	r3, [r3, #8]
 8015f04:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 8015f08:	429a      	cmp	r2, r3
 8015f0a:	f4ff af73 	bcc.w	8015df4 <RegionAS923LinkAdrReq+0x30>
 8015f0e:	e000      	b.n	8015f12 <RegionAS923LinkAdrReq+0x14e>
            break; // break loop, since no more request has been found
 8015f10:	bf00      	nop
            }
        }
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 8015f12:	2302      	movs	r3, #2
 8015f14:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 8015f18:	68fb      	ldr	r3, [r7, #12]
 8015f1a:	7a5b      	ldrb	r3, [r3, #9]
 8015f1c:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    phyParam = RegionAS923GetPhyParam( &getPhy );
 8015f20:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8015f24:	4618      	mov	r0, r3
 8015f26:	f7ff f9e3 	bl	80152f0 <RegionAS923GetPhyParam>
 8015f2a:	4603      	mov	r3, r0
 8015f2c:	633b      	str	r3, [r7, #48]	@ 0x30

    linkAdrVerifyParams.Status = status;
 8015f2e:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8015f32:	753b      	strb	r3, [r7, #20]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 8015f34:	68fb      	ldr	r3, [r7, #12]
 8015f36:	7a9b      	ldrb	r3, [r3, #10]
 8015f38:	757b      	strb	r3, [r7, #21]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 8015f3a:	f997 303d 	ldrsb.w	r3, [r7, #61]	@ 0x3d
 8015f3e:	75bb      	strb	r3, [r7, #22]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 8015f40:	f997 303e 	ldrsb.w	r3, [r7, #62]	@ 0x3e
 8015f44:	75fb      	strb	r3, [r7, #23]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 8015f46:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8015f4a:	763b      	strb	r3, [r7, #24]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 8015f4c:	68fb      	ldr	r3, [r7, #12]
 8015f4e:	f993 300b 	ldrsb.w	r3, [r3, #11]
 8015f52:	767b      	strb	r3, [r7, #25]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 8015f54:	68fb      	ldr	r3, [r7, #12]
 8015f56:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8015f5a:	76bb      	strb	r3, [r7, #26]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 8015f5c:	68fb      	ldr	r3, [r7, #12]
 8015f5e:	7b5b      	ldrb	r3, [r3, #13]
 8015f60:	b25b      	sxtb	r3, r3
 8015f62:	76fb      	strb	r3, [r7, #27]
    linkAdrVerifyParams.NbChannels = AS923_MAX_NB_CHANNELS;
 8015f64:	2310      	movs	r3, #16
 8015f66:	773b      	strb	r3, [r7, #28]
    linkAdrVerifyParams.ChannelsMask = &chMask;
 8015f68:	f107 033a 	add.w	r3, r7, #58	@ 0x3a
 8015f6c:	623b      	str	r3, [r7, #32]
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 8015f6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015f70:	b25b      	sxtb	r3, r3
 8015f72:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
    linkAdrVerifyParams.MaxDatarate = AS923_TX_MAX_DATARATE;
 8015f76:	2307      	movs	r3, #7
 8015f78:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
    linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
 8015f7c:	4b21      	ldr	r3, [pc, #132]	@ (8016004 <RegionAS923LinkAdrReq+0x240>)
 8015f7e:	681b      	ldr	r3, [r3, #0]
 8015f80:	62bb      	str	r3, [r7, #40]	@ 0x28
    linkAdrVerifyParams.MinTxPower = AS923_MIN_TX_POWER;
 8015f82:	2307      	movs	r3, #7
 8015f84:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    linkAdrVerifyParams.MaxTxPower = AS923_MAX_TX_POWER;
 8015f88:	2300      	movs	r3, #0
 8015f8a:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 8015f8e:	68fb      	ldr	r3, [r7, #12]
 8015f90:	681b      	ldr	r3, [r3, #0]
 8015f92:	613b      	str	r3, [r7, #16]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 8015f94:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 8015f98:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8015f9c:	1c9a      	adds	r2, r3, #2
 8015f9e:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8015fa2:	1c59      	adds	r1, r3, #1
 8015fa4:	f107 0010 	add.w	r0, r7, #16
 8015fa8:	4623      	mov	r3, r4
 8015faa:	f000 fe8e 	bl	8016cca <RegionCommonLinkAdrReqVerifyParams>
 8015fae:	4603      	mov	r3, r0
 8015fb0:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 8015fb4:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8015fb8:	2b07      	cmp	r3, #7
 8015fba:	d10d      	bne.n	8015fd8 <RegionAS923LinkAdrReq+0x214>
    {
        // Set the channels mask to a default value
        memset1( ( uint8_t* ) RegionNvmGroup2->ChannelsMask, 0, sizeof( RegionNvmGroup2->ChannelsMask ) );
 8015fbc:	4b11      	ldr	r3, [pc, #68]	@ (8016004 <RegionAS923LinkAdrReq+0x240>)
 8015fbe:	681b      	ldr	r3, [r3, #0]
 8015fc0:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8015fc4:	220c      	movs	r2, #12
 8015fc6:	2100      	movs	r1, #0
 8015fc8:	4618      	mov	r0, r3
 8015fca:	f001 fa73 	bl	80174b4 <memset1>
        // Update the channels mask
        RegionNvmGroup2->ChannelsMask[0] = chMask;
 8015fce:	4b0d      	ldr	r3, [pc, #52]	@ (8016004 <RegionAS923LinkAdrReq+0x240>)
 8015fd0:	681b      	ldr	r3, [r3, #0]
 8015fd2:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8015fd4:	f8a3 2360 	strh.w	r2, [r3, #864]	@ 0x360
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 8015fd8:	f997 203d 	ldrsb.w	r2, [r7, #61]	@ 0x3d
 8015fdc:	68bb      	ldr	r3, [r7, #8]
 8015fde:	701a      	strb	r2, [r3, #0]
    *txPowOut = linkAdrParams.TxPower;
 8015fe0:	f997 203e 	ldrsb.w	r2, [r7, #62]	@ 0x3e
 8015fe4:	687b      	ldr	r3, [r7, #4]
 8015fe6:	701a      	strb	r2, [r3, #0]
    *nbRepOut = linkAdrParams.NbRep;
 8015fe8:	f897 203c 	ldrb.w	r2, [r7, #60]	@ 0x3c
 8015fec:	683b      	ldr	r3, [r7, #0]
 8015fee:	701a      	strb	r2, [r3, #0]
    *nbBytesParsed = bytesProcessed;
 8015ff0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8015ff2:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 8015ff6:	701a      	strb	r2, [r3, #0]

#endif /* REGION_AS923 */
    return status;
 8015ff8:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 8015ffc:	4618      	mov	r0, r3
 8015ffe:	374c      	adds	r7, #76	@ 0x4c
 8016000:	46bd      	mov	sp, r7
 8016002:	bd90      	pop	{r4, r7, pc}
 8016004:	20001bc4 	.word	0x20001bc4

08016008 <RegionAS923RxParamSetupReq>:

uint8_t RegionAS923RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 8016008:	b580      	push	{r7, lr}
 801600a:	b084      	sub	sp, #16
 801600c:	af00      	add	r7, sp, #0
 801600e:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x07;
 8016010:	2307      	movs	r3, #7
 8016012:	73fb      	strb	r3, [r7, #15]
#if defined( REGION_AS923 )

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency ) == false )
 8016014:	687b      	ldr	r3, [r7, #4]
 8016016:	685b      	ldr	r3, [r3, #4]
 8016018:	4618      	mov	r0, r3
 801601a:	f7ff f8f3 	bl	8015204 <VerifyRfFreq>
 801601e:	4603      	mov	r3, r0
 8016020:	f083 0301 	eor.w	r3, r3, #1
 8016024:	b2db      	uxtb	r3, r3
 8016026:	2b00      	cmp	r3, #0
 8016028:	d003      	beq.n	8016032 <RegionAS923RxParamSetupReq+0x2a>
    {
        status &= 0xFE; // Channel frequency KO
 801602a:	7bfb      	ldrb	r3, [r7, #15]
 801602c:	f023 0301 	bic.w	r3, r3, #1
 8016030:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, AS923_RX_MIN_DATARATE, AS923_RX_MAX_DATARATE ) == false )
 8016032:	687b      	ldr	r3, [r7, #4]
 8016034:	f993 3000 	ldrsb.w	r3, [r3]
 8016038:	2207      	movs	r2, #7
 801603a:	2100      	movs	r1, #0
 801603c:	4618      	mov	r0, r3
 801603e:	f000 fc32 	bl	80168a6 <RegionCommonValueInRange>
 8016042:	4603      	mov	r3, r0
 8016044:	2b00      	cmp	r3, #0
 8016046:	d103      	bne.n	8016050 <RegionAS923RxParamSetupReq+0x48>
    {
        status &= 0xFD; // Datarate KO
 8016048:	7bfb      	ldrb	r3, [r7, #15]
 801604a:	f023 0302 	bic.w	r3, r3, #2
 801604e:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, AS923_MIN_RX1_DR_OFFSET, AS923_MAX_RX1_DR_OFFSET ) == false )
 8016050:	687b      	ldr	r3, [r7, #4]
 8016052:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8016056:	2207      	movs	r2, #7
 8016058:	2100      	movs	r1, #0
 801605a:	4618      	mov	r0, r3
 801605c:	f000 fc23 	bl	80168a6 <RegionCommonValueInRange>
 8016060:	4603      	mov	r3, r0
 8016062:	2b00      	cmp	r3, #0
 8016064:	d103      	bne.n	801606e <RegionAS923RxParamSetupReq+0x66>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 8016066:	7bfb      	ldrb	r3, [r7, #15]
 8016068:	f023 0304 	bic.w	r3, r3, #4
 801606c:	73fb      	strb	r3, [r7, #15]
    }

#endif /* REGION_AS923 */
    return status;
 801606e:	7bfb      	ldrb	r3, [r7, #15]
}
 8016070:	4618      	mov	r0, r3
 8016072:	3710      	adds	r7, #16
 8016074:	46bd      	mov	sp, r7
 8016076:	bd80      	pop	{r7, pc}

08016078 <RegionAS923NewChannelReq>:

int8_t RegionAS923NewChannelReq( NewChannelReqParams_t* newChannelReq )
{
 8016078:	b580      	push	{r7, lr}
 801607a:	b086      	sub	sp, #24
 801607c:	af00      	add	r7, sp, #0
 801607e:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
 8016080:	2303      	movs	r3, #3
 8016082:	75fb      	strb	r3, [r7, #23]
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    if( newChannelReq->NewChannel->Frequency == 0 )
 8016084:	687b      	ldr	r3, [r7, #4]
 8016086:	681b      	ldr	r3, [r3, #0]
 8016088:	681b      	ldr	r3, [r3, #0]
 801608a:	2b00      	cmp	r3, #0
 801608c:	d114      	bne.n	80160b8 <RegionAS923NewChannelReq+0x40>
    {
        channelRemove.ChannelId = newChannelReq->ChannelId;
 801608e:	687b      	ldr	r3, [r7, #4]
 8016090:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8016094:	b2db      	uxtb	r3, r3
 8016096:	723b      	strb	r3, [r7, #8]

        // Remove
        if( RegionAS923ChannelsRemove( &channelRemove ) == false )
 8016098:	f107 0308 	add.w	r3, r7, #8
 801609c:	4618      	mov	r0, r3
 801609e:	f000 f9eb 	bl	8016478 <RegionAS923ChannelsRemove>
 80160a2:	4603      	mov	r3, r0
 80160a4:	f083 0301 	eor.w	r3, r3, #1
 80160a8:	b2db      	uxtb	r3, r3
 80160aa:	2b00      	cmp	r3, #0
 80160ac:	d03b      	beq.n	8016126 <RegionAS923NewChannelReq+0xae>
        {
            status &= 0xFC;
 80160ae:	7dfb      	ldrb	r3, [r7, #23]
 80160b0:	f023 0303 	bic.w	r3, r3, #3
 80160b4:	75fb      	strb	r3, [r7, #23]
 80160b6:	e036      	b.n	8016126 <RegionAS923NewChannelReq+0xae>
        }
    }
    else
    {
        channelAdd.NewChannel = newChannelReq->NewChannel;
 80160b8:	687b      	ldr	r3, [r7, #4]
 80160ba:	681b      	ldr	r3, [r3, #0]
 80160bc:	60fb      	str	r3, [r7, #12]
        channelAdd.ChannelId = newChannelReq->ChannelId;
 80160be:	687b      	ldr	r3, [r7, #4]
 80160c0:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80160c4:	b2db      	uxtb	r3, r3
 80160c6:	743b      	strb	r3, [r7, #16]

        switch( RegionAS923ChannelAdd( &channelAdd ) )
 80160c8:	f107 030c 	add.w	r3, r7, #12
 80160cc:	4618      	mov	r0, r3
 80160ce:	f000 f937 	bl	8016340 <RegionAS923ChannelAdd>
 80160d2:	4603      	mov	r3, r0
 80160d4:	2b06      	cmp	r3, #6
 80160d6:	d820      	bhi.n	801611a <RegionAS923NewChannelReq+0xa2>
 80160d8:	a201      	add	r2, pc, #4	@ (adr r2, 80160e0 <RegionAS923NewChannelReq+0x68>)
 80160da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80160de:	bf00      	nop
 80160e0:	08016125 	.word	0x08016125
 80160e4:	0801611b 	.word	0x0801611b
 80160e8:	0801611b 	.word	0x0801611b
 80160ec:	0801611b 	.word	0x0801611b
 80160f0:	080160fd 	.word	0x080160fd
 80160f4:	08016107 	.word	0x08016107
 80160f8:	08016111 	.word	0x08016111
            {
                break;
            }
            case LORAMAC_STATUS_FREQUENCY_INVALID:
            {
                status &= 0xFE;
 80160fc:	7dfb      	ldrb	r3, [r7, #23]
 80160fe:	f023 0301 	bic.w	r3, r3, #1
 8016102:	75fb      	strb	r3, [r7, #23]
                break;
 8016104:	e00f      	b.n	8016126 <RegionAS923NewChannelReq+0xae>
            }
            case LORAMAC_STATUS_DATARATE_INVALID:
            {
                status &= 0xFD;
 8016106:	7dfb      	ldrb	r3, [r7, #23]
 8016108:	f023 0302 	bic.w	r3, r3, #2
 801610c:	75fb      	strb	r3, [r7, #23]
                break;
 801610e:	e00a      	b.n	8016126 <RegionAS923NewChannelReq+0xae>
            }
            case LORAMAC_STATUS_FREQ_AND_DR_INVALID:
            {
                status &= 0xFC;
 8016110:	7dfb      	ldrb	r3, [r7, #23]
 8016112:	f023 0303 	bic.w	r3, r3, #3
 8016116:	75fb      	strb	r3, [r7, #23]
                break;
 8016118:	e005      	b.n	8016126 <RegionAS923NewChannelReq+0xae>
            }
            default:
            {
                status &= 0xFC;
 801611a:	7dfb      	ldrb	r3, [r7, #23]
 801611c:	f023 0303 	bic.w	r3, r3, #3
 8016120:	75fb      	strb	r3, [r7, #23]
                break;
 8016122:	e000      	b.n	8016126 <RegionAS923NewChannelReq+0xae>
                break;
 8016124:	bf00      	nop
            }
        }
    }

    return status;
 8016126:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801612a:	4618      	mov	r0, r3
 801612c:	3718      	adds	r7, #24
 801612e:	46bd      	mov	sp, r7
 8016130:	bd80      	pop	{r7, pc}
 8016132:	bf00      	nop

08016134 <RegionAS923TxParamSetupReq>:

int8_t RegionAS923TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
 8016134:	b480      	push	{r7}
 8016136:	b083      	sub	sp, #12
 8016138:	af00      	add	r7, sp, #0
 801613a:	6078      	str	r0, [r7, #4]
    // Accept the request
    return 0;
 801613c:	2300      	movs	r3, #0
}
 801613e:	4618      	mov	r0, r3
 8016140:	370c      	adds	r7, #12
 8016142:	46bd      	mov	sp, r7
 8016144:	bc80      	pop	{r7}
 8016146:	4770      	bx	lr

08016148 <RegionAS923DlChannelReq>:

int8_t RegionAS923DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
 8016148:	b580      	push	{r7, lr}
 801614a:	b084      	sub	sp, #16
 801614c:	af00      	add	r7, sp, #0
 801614e:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
 8016150:	2303      	movs	r3, #3
 8016152:	73fb      	strb	r3, [r7, #15]

#if defined( REGION_AS923 )
    // Verify if the frequency is supported
    if( VerifyRfFreq( dlChannelReq->Rx1Frequency ) == false )
 8016154:	687b      	ldr	r3, [r7, #4]
 8016156:	685b      	ldr	r3, [r3, #4]
 8016158:	4618      	mov	r0, r3
 801615a:	f7ff f853 	bl	8015204 <VerifyRfFreq>
 801615e:	4603      	mov	r3, r0
 8016160:	f083 0301 	eor.w	r3, r3, #1
 8016164:	b2db      	uxtb	r3, r3
 8016166:	2b00      	cmp	r3, #0
 8016168:	d003      	beq.n	8016172 <RegionAS923DlChannelReq+0x2a>
    {
        status &= 0xFE;
 801616a:	7bfb      	ldrb	r3, [r7, #15]
 801616c:	f023 0301 	bic.w	r3, r3, #1
 8016170:	73fb      	strb	r3, [r7, #15]
    }

    // Verify if an uplink frequency exists
    if( RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Frequency == 0 )
 8016172:	4b14      	ldr	r3, [pc, #80]	@ (80161c4 <RegionAS923DlChannelReq+0x7c>)
 8016174:	681a      	ldr	r2, [r3, #0]
 8016176:	687b      	ldr	r3, [r7, #4]
 8016178:	781b      	ldrb	r3, [r3, #0]
 801617a:	4619      	mov	r1, r3
 801617c:	460b      	mov	r3, r1
 801617e:	005b      	lsls	r3, r3, #1
 8016180:	440b      	add	r3, r1
 8016182:	009b      	lsls	r3, r3, #2
 8016184:	4413      	add	r3, r2
 8016186:	681b      	ldr	r3, [r3, #0]
 8016188:	2b00      	cmp	r3, #0
 801618a:	d103      	bne.n	8016194 <RegionAS923DlChannelReq+0x4c>
    {
        status &= 0xFD;
 801618c:	7bfb      	ldrb	r3, [r7, #15]
 801618e:	f023 0302 	bic.w	r3, r3, #2
 8016192:	73fb      	strb	r3, [r7, #15]
    }

    // Apply Rx1 frequency, if the status is OK
    if( status == 0x03 )
 8016194:	7bfb      	ldrb	r3, [r7, #15]
 8016196:	2b03      	cmp	r3, #3
 8016198:	d10d      	bne.n	80161b6 <RegionAS923DlChannelReq+0x6e>
    {
        RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
 801619a:	4b0a      	ldr	r3, [pc, #40]	@ (80161c4 <RegionAS923DlChannelReq+0x7c>)
 801619c:	6819      	ldr	r1, [r3, #0]
 801619e:	687b      	ldr	r3, [r7, #4]
 80161a0:	781b      	ldrb	r3, [r3, #0]
 80161a2:	4618      	mov	r0, r3
 80161a4:	687b      	ldr	r3, [r7, #4]
 80161a6:	685a      	ldr	r2, [r3, #4]
 80161a8:	4603      	mov	r3, r0
 80161aa:	005b      	lsls	r3, r3, #1
 80161ac:	4403      	add	r3, r0
 80161ae:	009b      	lsls	r3, r3, #2
 80161b0:	440b      	add	r3, r1
 80161b2:	3304      	adds	r3, #4
 80161b4:	601a      	str	r2, [r3, #0]
    }

#endif /* REGION_AS923 */
    return status;
 80161b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80161ba:	4618      	mov	r0, r3
 80161bc:	3710      	adds	r7, #16
 80161be:	46bd      	mov	sp, r7
 80161c0:	bd80      	pop	{r7, pc}
 80161c2:	bf00      	nop
 80161c4:	20001bc4 	.word	0x20001bc4

080161c8 <RegionAS923AlternateDr>:

int8_t RegionAS923AlternateDr( int8_t currentDr, AlternateDrType_t type )
{
 80161c8:	b480      	push	{r7}
 80161ca:	b083      	sub	sp, #12
 80161cc:	af00      	add	r7, sp, #0
 80161ce:	4603      	mov	r3, r0
 80161d0:	460a      	mov	r2, r1
 80161d2:	71fb      	strb	r3, [r7, #7]
 80161d4:	4613      	mov	r3, r2
 80161d6:	71bb      	strb	r3, [r7, #6]
#if defined( REGION_AS923 )
    // Only AS923_DWELL_LIMIT_DATARATE is supported
    return AS923_DWELL_LIMIT_DATARATE;
 80161d8:	2302      	movs	r3, #2
#else
    return -1;
#endif /* REGION_AS923 */
}
 80161da:	4618      	mov	r0, r3
 80161dc:	370c      	adds	r7, #12
 80161de:	46bd      	mov	sp, r7
 80161e0:	bc80      	pop	{r7}
 80161e2:	4770      	bx	lr

080161e4 <RegionAS923NextChannel>:

LoRaMacStatus_t RegionAS923NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 80161e4:	b580      	push	{r7, lr}
 80161e6:	b09a      	sub	sp, #104	@ 0x68
 80161e8:	af02      	add	r7, sp, #8
 80161ea:	60f8      	str	r0, [r7, #12]
 80161ec:	60b9      	str	r1, [r7, #8]
 80161ee:	607a      	str	r2, [r7, #4]
 80161f0:	603b      	str	r3, [r7, #0]
#if defined( REGION_AS923 )
    uint8_t nbEnabledChannels = 0;
 80161f2:	2300      	movs	r3, #0
 80161f4:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
    uint8_t nbRestrictedChannels = 0;
 80161f8:	2300      	movs	r3, #0
 80161fa:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
    uint8_t enabledChannels[AS923_MAX_NB_CHANNELS] = { 0 };
 80161fe:	2300      	movs	r3, #0
 8016200:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8016202:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8016206:	2200      	movs	r2, #0
 8016208:	601a      	str	r2, [r3, #0]
 801620a:	605a      	str	r2, [r3, #4]
 801620c:	609a      	str	r2, [r3, #8]
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;
 801620e:	230c      	movs	r3, #12
 8016210:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
    uint16_t joinChannels = AS923_JOIN_CHANNELS;
 8016214:	2303      	movs	r3, #3
 8016216:	827b      	strh	r3, [r7, #18]

    if( RegionCommonCountChannels( RegionNvmGroup2->ChannelsMask, 0, 1 ) == 0 )
 8016218:	4b47      	ldr	r3, [pc, #284]	@ (8016338 <RegionAS923NextChannel+0x154>)
 801621a:	681b      	ldr	r3, [r3, #0]
 801621c:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8016220:	2201      	movs	r2, #1
 8016222:	2100      	movs	r1, #0
 8016224:	4618      	mov	r0, r3
 8016226:	f000 fb8f 	bl	8016948 <RegionCommonCountChannels>
 801622a:	4603      	mov	r3, r0
 801622c:	2b00      	cmp	r3, #0
 801622e:	d10a      	bne.n	8016246 <RegionAS923NextChannel+0x62>
    { // Reactivate default channels
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 );
 8016230:	4b41      	ldr	r3, [pc, #260]	@ (8016338 <RegionAS923NextChannel+0x154>)
 8016232:	681b      	ldr	r3, [r3, #0]
 8016234:	f8b3 2360 	ldrh.w	r2, [r3, #864]	@ 0x360
 8016238:	4b3f      	ldr	r3, [pc, #252]	@ (8016338 <RegionAS923NextChannel+0x154>)
 801623a:	681b      	ldr	r3, [r3, #0]
 801623c:	f042 0203 	orr.w	r2, r2, #3
 8016240:	b292      	uxth	r2, r2
 8016242:	f8a3 2360 	strh.w	r2, [r3, #864]	@ 0x360
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
 8016246:	68fb      	ldr	r3, [r7, #12]
 8016248:	7a5b      	ldrb	r3, [r3, #9]
 801624a:	753b      	strb	r3, [r7, #20]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 801624c:	68fb      	ldr	r3, [r7, #12]
 801624e:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8016252:	b2db      	uxtb	r3, r3
 8016254:	757b      	strb	r3, [r7, #21]
    countChannelsParams.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 8016256:	4b38      	ldr	r3, [pc, #224]	@ (8016338 <RegionAS923NextChannel+0x154>)
 8016258:	681b      	ldr	r3, [r3, #0]
 801625a:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 801625e:	61bb      	str	r3, [r7, #24]
    countChannelsParams.Channels = RegionNvmGroup2->Channels;
 8016260:	4b35      	ldr	r3, [pc, #212]	@ (8016338 <RegionAS923NextChannel+0x154>)
 8016262:	681b      	ldr	r3, [r3, #0]
 8016264:	61fb      	str	r3, [r7, #28]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    countChannelsParams.Bands = RegionNvmGroup1->Bands;
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    countChannelsParams.Bands = RegionBands;
 8016266:	4b35      	ldr	r3, [pc, #212]	@ (801633c <RegionAS923NextChannel+0x158>)
 8016268:	681b      	ldr	r3, [r3, #0]
 801626a:	623b      	str	r3, [r7, #32]
#endif /* REGION_VERSION */
    countChannelsParams.MaxNbChannels = AS923_MAX_NB_CHANNELS;
 801626c:	2310      	movs	r3, #16
 801626e:	84bb      	strh	r3, [r7, #36]	@ 0x24
    countChannelsParams.JoinChannels = &joinChannels;
 8016270:	f107 0312 	add.w	r3, r7, #18
 8016274:	62bb      	str	r3, [r7, #40]	@ 0x28

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 8016276:	68fb      	ldr	r3, [r7, #12]
 8016278:	681b      	ldr	r3, [r3, #0]
 801627a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 801627c:	68fb      	ldr	r3, [r7, #12]
 801627e:	685b      	ldr	r3, [r3, #4]
 8016280:	633b      	str	r3, [r7, #48]	@ 0x30
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 8016282:	68fb      	ldr	r3, [r7, #12]
 8016284:	7a9b      	ldrb	r3, [r3, #10]
 8016286:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
    identifyChannelsParam.MaxBands = AS923_MAX_NB_BANDS;
 801628a:	2301      	movs	r3, #1
 801628c:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35

    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 8016290:	68fa      	ldr	r2, [r7, #12]
 8016292:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8016296:	320c      	adds	r2, #12
 8016298:	e892 0003 	ldmia.w	r2, {r0, r1}
 801629c:	e883 0003 	stmia.w	r3, {r0, r1}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 80162a0:	68fb      	ldr	r3, [r7, #12]
 80162a2:	7d1b      	ldrb	r3, [r3, #20]
 80162a4:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 80162a8:	68fb      	ldr	r3, [r7, #12]
 80162aa:	f993 2008 	ldrsb.w	r2, [r3, #8]
 80162ae:	68fb      	ldr	r3, [r7, #12]
 80162b0:	8adb      	ldrh	r3, [r3, #22]
 80162b2:	4619      	mov	r1, r3
 80162b4:	4610      	mov	r0, r2
 80162b6:	f7fe ffcb 	bl	8015250 <GetTimeOnAir>
 80162ba:	4603      	mov	r3, r0
 80162bc:	647b      	str	r3, [r7, #68]	@ 0x44

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 80162be:	f107 0314 	add.w	r3, r7, #20
 80162c2:	64bb      	str	r3, [r7, #72]	@ 0x48

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 80162c4:	f107 015e 	add.w	r1, r7, #94	@ 0x5e
 80162c8:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 80162cc:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 80162d0:	687b      	ldr	r3, [r7, #4]
 80162d2:	9301      	str	r3, [sp, #4]
 80162d4:	f107 035d 	add.w	r3, r7, #93	@ 0x5d
 80162d8:	9300      	str	r3, [sp, #0]
 80162da:	460b      	mov	r3, r1
 80162dc:	6839      	ldr	r1, [r7, #0]
 80162de:	f000 ff4a 	bl	8017176 <RegionCommonIdentifyChannels>
 80162e2:	4603      	mov	r3, r0
 80162e4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 80162e8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80162ec:	2b00      	cmp	r3, #0
 80162ee:	d10e      	bne.n	801630e <RegionAS923NextChannel+0x12a>
        // Even if one or more channels are available according to the channel plan, no free channel
        // was found during the LBT procedure.
        status = LORAMAC_STATUS_NO_FREE_CHANNEL_FOUND;
#else
        // We found a valid channel
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 80162f0:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 80162f4:	3b01      	subs	r3, #1
 80162f6:	4619      	mov	r1, r3
 80162f8:	2000      	movs	r0, #0
 80162fa:	f001 f889 	bl	8017410 <randr>
 80162fe:	4603      	mov	r3, r0
 8016300:	3360      	adds	r3, #96	@ 0x60
 8016302:	443b      	add	r3, r7
 8016304:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 8016308:	68bb      	ldr	r3, [r7, #8]
 801630a:	701a      	strb	r2, [r3, #0]
 801630c:	e00e      	b.n	801632c <RegionAS923NextChannel+0x148>
#endif
    }
    else if( status == LORAMAC_STATUS_NO_CHANNEL_FOUND )
 801630e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8016312:	2b0c      	cmp	r3, #12
 8016314:	d10a      	bne.n	801632c <RegionAS923NextChannel+0x148>
    {
        // Datarate not supported by any channel, restore defaults
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 );
 8016316:	4b08      	ldr	r3, [pc, #32]	@ (8016338 <RegionAS923NextChannel+0x154>)
 8016318:	681b      	ldr	r3, [r3, #0]
 801631a:	f8b3 2360 	ldrh.w	r2, [r3, #864]	@ 0x360
 801631e:	4b06      	ldr	r3, [pc, #24]	@ (8016338 <RegionAS923NextChannel+0x154>)
 8016320:	681b      	ldr	r3, [r3, #0]
 8016322:	f042 0203 	orr.w	r2, r2, #3
 8016326:	b292      	uxth	r2, r2
 8016328:	f8a3 2360 	strh.w	r2, [r3, #864]	@ 0x360
    }
    return status;
 801632c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_AS923 */
}
 8016330:	4618      	mov	r0, r3
 8016332:	3760      	adds	r7, #96	@ 0x60
 8016334:	46bd      	mov	sp, r7
 8016336:	bd80      	pop	{r7, pc}
 8016338:	20001bc4 	.word	0x20001bc4
 801633c:	20001bc8 	.word	0x20001bc8

08016340 <RegionAS923ChannelAdd>:

LoRaMacStatus_t RegionAS923ChannelAdd( ChannelAddParams_t* channelAdd )
{
 8016340:	b580      	push	{r7, lr}
 8016342:	b084      	sub	sp, #16
 8016344:	af00      	add	r7, sp, #0
 8016346:	6078      	str	r0, [r7, #4]
#if defined( REGION_AS923 )
    bool drInvalid = false;
 8016348:	2300      	movs	r3, #0
 801634a:	73fb      	strb	r3, [r7, #15]
    bool freqInvalid = false;
 801634c:	2300      	movs	r3, #0
 801634e:	73bb      	strb	r3, [r7, #14]
    uint8_t id = channelAdd->ChannelId;
 8016350:	687b      	ldr	r3, [r7, #4]
 8016352:	791b      	ldrb	r3, [r3, #4]
 8016354:	737b      	strb	r3, [r7, #13]

    if( id < AS923_NUMB_DEFAULT_CHANNELS )
 8016356:	7b7b      	ldrb	r3, [r7, #13]
 8016358:	2b01      	cmp	r3, #1
 801635a:	d801      	bhi.n	8016360 <RegionAS923ChannelAdd+0x20>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 801635c:	2306      	movs	r3, #6
 801635e:	e085      	b.n	801646c <RegionAS923ChannelAdd+0x12c>
    }

    if( id >= AS923_MAX_NB_CHANNELS )
 8016360:	7b7b      	ldrb	r3, [r7, #13]
 8016362:	2b0f      	cmp	r3, #15
 8016364:	d901      	bls.n	801636a <RegionAS923ChannelAdd+0x2a>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8016366:	2303      	movs	r3, #3
 8016368:	e080      	b.n	801646c <RegionAS923ChannelAdd+0x12c>
    }

    // Validate the datarate range
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Min, AS923_TX_MIN_DATARATE, AS923_TX_MAX_DATARATE ) == false )
 801636a:	687b      	ldr	r3, [r7, #4]
 801636c:	681b      	ldr	r3, [r3, #0]
 801636e:	7a1b      	ldrb	r3, [r3, #8]
 8016370:	f343 0303 	sbfx	r3, r3, #0, #4
 8016374:	b25b      	sxtb	r3, r3
 8016376:	2207      	movs	r2, #7
 8016378:	2100      	movs	r1, #0
 801637a:	4618      	mov	r0, r3
 801637c:	f000 fa93 	bl	80168a6 <RegionCommonValueInRange>
 8016380:	4603      	mov	r3, r0
 8016382:	2b00      	cmp	r3, #0
 8016384:	d101      	bne.n	801638a <RegionAS923ChannelAdd+0x4a>
    {
        drInvalid = true;
 8016386:	2301      	movs	r3, #1
 8016388:	73fb      	strb	r3, [r7, #15]
    }
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Max, AS923_TX_MIN_DATARATE, AS923_TX_MAX_DATARATE ) == false )
 801638a:	687b      	ldr	r3, [r7, #4]
 801638c:	681b      	ldr	r3, [r3, #0]
 801638e:	7a1b      	ldrb	r3, [r3, #8]
 8016390:	f343 1303 	sbfx	r3, r3, #4, #4
 8016394:	b25b      	sxtb	r3, r3
 8016396:	2207      	movs	r2, #7
 8016398:	2100      	movs	r1, #0
 801639a:	4618      	mov	r0, r3
 801639c:	f000 fa83 	bl	80168a6 <RegionCommonValueInRange>
 80163a0:	4603      	mov	r3, r0
 80163a2:	2b00      	cmp	r3, #0
 80163a4:	d101      	bne.n	80163aa <RegionAS923ChannelAdd+0x6a>
    {
        drInvalid = true;
 80163a6:	2301      	movs	r3, #1
 80163a8:	73fb      	strb	r3, [r7, #15]
    }
    if( channelAdd->NewChannel->DrRange.Fields.Min > channelAdd->NewChannel->DrRange.Fields.Max )
 80163aa:	687b      	ldr	r3, [r7, #4]
 80163ac:	681b      	ldr	r3, [r3, #0]
 80163ae:	7a1b      	ldrb	r3, [r3, #8]
 80163b0:	f343 0303 	sbfx	r3, r3, #0, #4
 80163b4:	b25a      	sxtb	r2, r3
 80163b6:	687b      	ldr	r3, [r7, #4]
 80163b8:	681b      	ldr	r3, [r3, #0]
 80163ba:	7a1b      	ldrb	r3, [r3, #8]
 80163bc:	f343 1303 	sbfx	r3, r3, #4, #4
 80163c0:	b25b      	sxtb	r3, r3
 80163c2:	429a      	cmp	r2, r3
 80163c4:	dd01      	ble.n	80163ca <RegionAS923ChannelAdd+0x8a>
    {
        drInvalid = true;
 80163c6:	2301      	movs	r3, #1
 80163c8:	73fb      	strb	r3, [r7, #15]
    }

    // Check frequency
    if( freqInvalid == false )
 80163ca:	7bbb      	ldrb	r3, [r7, #14]
 80163cc:	f083 0301 	eor.w	r3, r3, #1
 80163d0:	b2db      	uxtb	r3, r3
 80163d2:	2b00      	cmp	r3, #0
 80163d4:	d00d      	beq.n	80163f2 <RegionAS923ChannelAdd+0xb2>
    {
        if( VerifyRfFreq( channelAdd->NewChannel->Frequency ) == false )
 80163d6:	687b      	ldr	r3, [r7, #4]
 80163d8:	681b      	ldr	r3, [r3, #0]
 80163da:	681b      	ldr	r3, [r3, #0]
 80163dc:	4618      	mov	r0, r3
 80163de:	f7fe ff11 	bl	8015204 <VerifyRfFreq>
 80163e2:	4603      	mov	r3, r0
 80163e4:	f083 0301 	eor.w	r3, r3, #1
 80163e8:	b2db      	uxtb	r3, r3
 80163ea:	2b00      	cmp	r3, #0
 80163ec:	d001      	beq.n	80163f2 <RegionAS923ChannelAdd+0xb2>
        {
            freqInvalid = true;
 80163ee:	2301      	movs	r3, #1
 80163f0:	73bb      	strb	r3, [r7, #14]
        }
    }

    // Check status
    if( ( drInvalid == true ) && ( freqInvalid == true ) )
 80163f2:	7bfb      	ldrb	r3, [r7, #15]
 80163f4:	2b00      	cmp	r3, #0
 80163f6:	d004      	beq.n	8016402 <RegionAS923ChannelAdd+0xc2>
 80163f8:	7bbb      	ldrb	r3, [r7, #14]
 80163fa:	2b00      	cmp	r3, #0
 80163fc:	d001      	beq.n	8016402 <RegionAS923ChannelAdd+0xc2>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 80163fe:	2306      	movs	r3, #6
 8016400:	e034      	b.n	801646c <RegionAS923ChannelAdd+0x12c>
    }
    if( drInvalid == true )
 8016402:	7bfb      	ldrb	r3, [r7, #15]
 8016404:	2b00      	cmp	r3, #0
 8016406:	d001      	beq.n	801640c <RegionAS923ChannelAdd+0xcc>
    {
        return LORAMAC_STATUS_DATARATE_INVALID;
 8016408:	2305      	movs	r3, #5
 801640a:	e02f      	b.n	801646c <RegionAS923ChannelAdd+0x12c>
    }
    if( freqInvalid == true )
 801640c:	7bbb      	ldrb	r3, [r7, #14]
 801640e:	2b00      	cmp	r3, #0
 8016410:	d001      	beq.n	8016416 <RegionAS923ChannelAdd+0xd6>
    {
        return LORAMAC_STATUS_FREQUENCY_INVALID;
 8016412:	2304      	movs	r3, #4
 8016414:	e02a      	b.n	801646c <RegionAS923ChannelAdd+0x12c>
    }

    memcpy1( ( uint8_t* ) &(RegionNvmGroup2->Channels[id]), ( uint8_t* ) channelAdd->NewChannel, sizeof( RegionNvmGroup2->Channels[id] ) );
 8016416:	4b17      	ldr	r3, [pc, #92]	@ (8016474 <RegionAS923ChannelAdd+0x134>)
 8016418:	6819      	ldr	r1, [r3, #0]
 801641a:	7b7a      	ldrb	r2, [r7, #13]
 801641c:	4613      	mov	r3, r2
 801641e:	005b      	lsls	r3, r3, #1
 8016420:	4413      	add	r3, r2
 8016422:	009b      	lsls	r3, r3, #2
 8016424:	18c8      	adds	r0, r1, r3
 8016426:	687b      	ldr	r3, [r7, #4]
 8016428:	681b      	ldr	r3, [r3, #0]
 801642a:	220c      	movs	r2, #12
 801642c:	4619      	mov	r1, r3
 801642e:	f001 f806 	bl	801743e <memcpy1>
    RegionNvmGroup2->Channels[id].Band = 0;
 8016432:	4b10      	ldr	r3, [pc, #64]	@ (8016474 <RegionAS923ChannelAdd+0x134>)
 8016434:	6819      	ldr	r1, [r3, #0]
 8016436:	7b7a      	ldrb	r2, [r7, #13]
 8016438:	4613      	mov	r3, r2
 801643a:	005b      	lsls	r3, r3, #1
 801643c:	4413      	add	r3, r2
 801643e:	009b      	lsls	r3, r3, #2
 8016440:	440b      	add	r3, r1
 8016442:	3309      	adds	r3, #9
 8016444:	2200      	movs	r2, #0
 8016446:	701a      	strb	r2, [r3, #0]
    RegionNvmGroup2->ChannelsMask[0] |= ( 1 << id );
 8016448:	4b0a      	ldr	r3, [pc, #40]	@ (8016474 <RegionAS923ChannelAdd+0x134>)
 801644a:	681b      	ldr	r3, [r3, #0]
 801644c:	f8b3 3360 	ldrh.w	r3, [r3, #864]	@ 0x360
 8016450:	b21a      	sxth	r2, r3
 8016452:	7b7b      	ldrb	r3, [r7, #13]
 8016454:	2101      	movs	r1, #1
 8016456:	fa01 f303 	lsl.w	r3, r1, r3
 801645a:	b21b      	sxth	r3, r3
 801645c:	4313      	orrs	r3, r2
 801645e:	b21a      	sxth	r2, r3
 8016460:	4b04      	ldr	r3, [pc, #16]	@ (8016474 <RegionAS923ChannelAdd+0x134>)
 8016462:	681b      	ldr	r3, [r3, #0]
 8016464:	b292      	uxth	r2, r2
 8016466:	f8a3 2360 	strh.w	r2, [r3, #864]	@ 0x360
    return LORAMAC_STATUS_OK;
 801646a:	2300      	movs	r3, #0
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_AS923 */
}
 801646c:	4618      	mov	r0, r3
 801646e:	3710      	adds	r7, #16
 8016470:	46bd      	mov	sp, r7
 8016472:	bd80      	pop	{r7, pc}
 8016474:	20001bc4 	.word	0x20001bc4

08016478 <RegionAS923ChannelsRemove>:

bool RegionAS923ChannelsRemove( ChannelRemoveParams_t* channelRemove  )
{
 8016478:	b580      	push	{r7, lr}
 801647a:	b086      	sub	sp, #24
 801647c:	af00      	add	r7, sp, #0
 801647e:	6078      	str	r0, [r7, #4]
#if defined( REGION_AS923 )
    uint8_t id = channelRemove->ChannelId;
 8016480:	687b      	ldr	r3, [r7, #4]
 8016482:	781b      	ldrb	r3, [r3, #0]
 8016484:	75fb      	strb	r3, [r7, #23]

    if( id < AS923_NUMB_DEFAULT_CHANNELS )
 8016486:	7dfb      	ldrb	r3, [r7, #23]
 8016488:	2b01      	cmp	r3, #1
 801648a:	d801      	bhi.n	8016490 <RegionAS923ChannelsRemove+0x18>
    {
        return false;
 801648c:	2300      	movs	r3, #0
 801648e:	e016      	b.n	80164be <RegionAS923ChannelsRemove+0x46>
    }

    // Remove the channel from the list of channels
    RegionNvmGroup2->Channels[id] = ( ChannelParams_t ){ 0, 0, { 0 }, 0 };
 8016490:	4b0d      	ldr	r3, [pc, #52]	@ (80164c8 <RegionAS923ChannelsRemove+0x50>)
 8016492:	6819      	ldr	r1, [r3, #0]
 8016494:	7dfa      	ldrb	r2, [r7, #23]
 8016496:	4613      	mov	r3, r2
 8016498:	005b      	lsls	r3, r3, #1
 801649a:	4413      	add	r3, r2
 801649c:	009b      	lsls	r3, r3, #2
 801649e:	440b      	add	r3, r1
 80164a0:	461a      	mov	r2, r3
 80164a2:	2300      	movs	r3, #0
 80164a4:	6013      	str	r3, [r2, #0]
 80164a6:	6053      	str	r3, [r2, #4]
 80164a8:	6093      	str	r3, [r2, #8]

    return RegionCommonChanDisable( RegionNvmGroup2->ChannelsMask, id, AS923_MAX_NB_CHANNELS );
 80164aa:	4b07      	ldr	r3, [pc, #28]	@ (80164c8 <RegionAS923ChannelsRemove+0x50>)
 80164ac:	681b      	ldr	r3, [r3, #0]
 80164ae:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 80164b2:	7df9      	ldrb	r1, [r7, #23]
 80164b4:	2210      	movs	r2, #16
 80164b6:	4618      	mov	r0, r3
 80164b8:	f000 fa12 	bl	80168e0 <RegionCommonChanDisable>
 80164bc:	4603      	mov	r3, r0
#else
    return false;
#endif /* REGION_AS923 */
}
 80164be:	4618      	mov	r0, r3
 80164c0:	3718      	adds	r7, #24
 80164c2:	46bd      	mov	sp, r7
 80164c4:	bd80      	pop	{r7, pc}
 80164c6:	bf00      	nop
 80164c8:	20001bc4 	.word	0x20001bc4

080164cc <RegionAS923ApplyDrOffset>:
#endif /* REGION_AS923 */

}
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
uint8_t RegionAS923ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 80164cc:	b480      	push	{r7}
 80164ce:	b085      	sub	sp, #20
 80164d0:	af00      	add	r7, sp, #0
 80164d2:	4603      	mov	r3, r0
 80164d4:	71fb      	strb	r3, [r7, #7]
 80164d6:	460b      	mov	r3, r1
 80164d8:	71bb      	strb	r3, [r7, #6]
 80164da:	4613      	mov	r3, r2
 80164dc:	717b      	strb	r3, [r7, #5]
#if defined( REGION_AS923 )
    // Initialize minDr
    int8_t minDr;

    if( downlinkDwellTime == 0 )
 80164de:	79fb      	ldrb	r3, [r7, #7]
 80164e0:	2b00      	cmp	r3, #0
 80164e2:	d10a      	bne.n	80164fa <RegionAS923ApplyDrOffset+0x2e>
    {
        // Update the minDR for a downlink dwell time configuration of 0
        minDr = EffectiveRx1DrOffsetDownlinkDwell0AS923[dr][drOffset];
 80164e4:	f997 2006 	ldrsb.w	r2, [r7, #6]
 80164e8:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80164ec:	490b      	ldr	r1, [pc, #44]	@ (801651c <RegionAS923ApplyDrOffset+0x50>)
 80164ee:	00d2      	lsls	r2, r2, #3
 80164f0:	440a      	add	r2, r1
 80164f2:	4413      	add	r3, r2
 80164f4:	781b      	ldrb	r3, [r3, #0]
 80164f6:	73fb      	strb	r3, [r7, #15]
 80164f8:	e009      	b.n	801650e <RegionAS923ApplyDrOffset+0x42>
    }
    else
    {
        // Update the minDR for a downlink dwell time configuration of 1
        minDr = EffectiveRx1DrOffsetDownlinkDwell1AS923[dr][drOffset];
 80164fa:	f997 2006 	ldrsb.w	r2, [r7, #6]
 80164fe:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8016502:	4907      	ldr	r1, [pc, #28]	@ (8016520 <RegionAS923ApplyDrOffset+0x54>)
 8016504:	00d2      	lsls	r2, r2, #3
 8016506:	440a      	add	r2, r1
 8016508:	4413      	add	r3, r2
 801650a:	781b      	ldrb	r3, [r3, #0]
 801650c:	73fb      	strb	r3, [r7, #15]
    }

    return minDr;
 801650e:	7bfb      	ldrb	r3, [r7, #15]
#else
    return 0;
#endif /* REGION_AS923 */

}
 8016510:	4618      	mov	r0, r3
 8016512:	3714      	adds	r7, #20
 8016514:	46bd      	mov	sp, r7
 8016516:	bc80      	pop	{r7}
 8016518:	4770      	bx	lr
 801651a:	bf00      	nop
 801651c:	0801f7f4 	.word	0x0801f7f4
 8016520:	0801f834 	.word	0x0801f834

08016524 <GetDutyCycle>:
#ifdef MW_LOG_ENABLED
static const char *EventRXSlotStrings[] = { "1", "2", "C", "Multi_C", "P", "Multi_P" };
#endif

static uint16_t GetDutyCycle( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 8016524:	b480      	push	{r7}
 8016526:	b087      	sub	sp, #28
 8016528:	af00      	add	r7, sp, #0
 801652a:	60f8      	str	r0, [r7, #12]
 801652c:	4608      	mov	r0, r1
 801652e:	4639      	mov	r1, r7
 8016530:	e881 000c 	stmia.w	r1, {r2, r3}
 8016534:	4603      	mov	r3, r0
 8016536:	72fb      	strb	r3, [r7, #11]
    uint16_t dutyCycle = band->DCycle;
 8016538:	68fb      	ldr	r3, [r7, #12]
 801653a:	881b      	ldrh	r3, [r3, #0]
 801653c:	82fb      	strh	r3, [r7, #22]

    if( joined == false )
 801653e:	7afb      	ldrb	r3, [r7, #11]
 8016540:	f083 0301 	eor.w	r3, r3, #1
 8016544:	b2db      	uxtb	r3, r3
 8016546:	2b00      	cmp	r3, #0
 8016548:	d01b      	beq.n	8016582 <GetDutyCycle+0x5e>
    {
        uint16_t joinDutyCycle = BACKOFF_DC_24_HOURS;
 801654a:	f242 7310 	movw	r3, #10000	@ 0x2710
 801654e:	82bb      	strh	r3, [r7, #20]

        if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_1_HOUR_IN_S )
 8016550:	683b      	ldr	r3, [r7, #0]
 8016552:	f5b3 6f61 	cmp.w	r3, #3600	@ 0xe10
 8016556:	d202      	bcs.n	801655e <GetDutyCycle+0x3a>
        {
            joinDutyCycle = BACKOFF_DC_1_HOUR;
 8016558:	2364      	movs	r3, #100	@ 0x64
 801655a:	82bb      	strh	r3, [r7, #20]
 801655c:	e00b      	b.n	8016576 <GetDutyCycle+0x52>
        }
        else if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_10_HOURS_IN_S )
 801655e:	683b      	ldr	r3, [r7, #0]
 8016560:	f649 22af 	movw	r2, #39599	@ 0x9aaf
 8016564:	4293      	cmp	r3, r2
 8016566:	d803      	bhi.n	8016570 <GetDutyCycle+0x4c>
        {
            joinDutyCycle = BACKOFF_DC_10_HOURS;
 8016568:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 801656c:	82bb      	strh	r3, [r7, #20]
 801656e:	e002      	b.n	8016576 <GetDutyCycle+0x52>
        }
        else
        {
            joinDutyCycle = BACKOFF_DC_24_HOURS;
 8016570:	f242 7310 	movw	r3, #10000	@ 0x2710
 8016574:	82bb      	strh	r3, [r7, #20]
        }
        // Take the most restrictive duty cycle
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
 8016576:	8aba      	ldrh	r2, [r7, #20]
 8016578:	8afb      	ldrh	r3, [r7, #22]
 801657a:	4293      	cmp	r3, r2
 801657c:	bf38      	it	cc
 801657e:	4613      	movcc	r3, r2
 8016580:	82fb      	strh	r3, [r7, #22]
    }

    // Prevent value of 0
    if( dutyCycle == 0 )
 8016582:	8afb      	ldrh	r3, [r7, #22]
 8016584:	2b00      	cmp	r3, #0
 8016586:	d101      	bne.n	801658c <GetDutyCycle+0x68>
    {
        dutyCycle = 1;
 8016588:	2301      	movs	r3, #1
 801658a:	82fb      	strh	r3, [r7, #22]
    }

    return dutyCycle;
 801658c:	8afb      	ldrh	r3, [r7, #22]
}
 801658e:	4618      	mov	r0, r3
 8016590:	371c      	adds	r7, #28
 8016592:	46bd      	mov	sp, r7
 8016594:	bc80      	pop	{r7}
 8016596:	4770      	bx	lr

08016598 <SetMaxTimeCredits>:

static uint16_t SetMaxTimeCredits( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup,
                                   bool dutyCycleEnabled, bool lastTxIsJoinRequest )
{
 8016598:	b580      	push	{r7, lr}
 801659a:	b08e      	sub	sp, #56	@ 0x38
 801659c:	af02      	add	r7, sp, #8
 801659e:	60f8      	str	r0, [r7, #12]
 80165a0:	4608      	mov	r0, r1
 80165a2:	4639      	mov	r1, r7
 80165a4:	e881 000c 	stmia.w	r1, {r2, r3}
 80165a8:	4603      	mov	r3, r0
 80165aa:	72fb      	strb	r3, [r7, #11]
    uint16_t dutyCycle = band->DCycle;
 80165ac:	68fb      	ldr	r3, [r7, #12]
 80165ae:	881b      	ldrh	r3, [r3, #0]
 80165b0:	857b      	strh	r3, [r7, #42]	@ 0x2a
    TimerTime_t maxCredits = DUTY_CYCLE_TIME_PERIOD;
 80165b2:	4b4b      	ldr	r3, [pc, #300]	@ (80166e0 <SetMaxTimeCredits+0x148>)
 80165b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimerTime_t elapsedTime = SysTimeToMs( elapsedTimeSinceStartup );
 80165b6:	463b      	mov	r3, r7
 80165b8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80165bc:	f004 fb76 	bl	801acac <SysTimeToMs>
 80165c0:	6278      	str	r0, [r7, #36]	@ 0x24
    SysTime_t timeDiff = { 0 };
 80165c2:	f107 0314 	add.w	r3, r7, #20
 80165c6:	2200      	movs	r2, #0
 80165c8:	601a      	str	r2, [r3, #0]
 80165ca:	605a      	str	r2, [r3, #4]

    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 80165cc:	7af9      	ldrb	r1, [r7, #11]
 80165ce:	463b      	mov	r3, r7
 80165d0:	cb0c      	ldmia	r3, {r2, r3}
 80165d2:	68f8      	ldr	r0, [r7, #12]
 80165d4:	f7ff ffa6 	bl	8016524 <GetDutyCycle>
 80165d8:	4603      	mov	r3, r0
 80165da:	857b      	strh	r3, [r7, #42]	@ 0x2a

    if( joined == false )
 80165dc:	7afb      	ldrb	r3, [r7, #11]
 80165de:	f083 0301 	eor.w	r3, r3, #1
 80165e2:	b2db      	uxtb	r3, r3
 80165e4:	2b00      	cmp	r3, #0
 80165e6:	d062      	beq.n	80166ae <SetMaxTimeCredits+0x116>
    {
        if( dutyCycle == BACKOFF_DC_1_HOUR )
 80165e8:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80165ea:	2b64      	cmp	r3, #100	@ 0x64
 80165ec:	d105      	bne.n	80165fa <SetMaxTimeCredits+0x62>
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD;
 80165ee:	4b3c      	ldr	r3, [pc, #240]	@ (80166e0 <SetMaxTimeCredits+0x148>)
 80165f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
            band->LastMaxCreditAssignTime = elapsedTime;
 80165f2:	68fb      	ldr	r3, [r7, #12]
 80165f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80165f6:	609a      	str	r2, [r3, #8]
 80165f8:	e00b      	b.n	8016612 <SetMaxTimeCredits+0x7a>
        }
        else if( dutyCycle == BACKOFF_DC_10_HOURS )
 80165fa:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80165fc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8016600:	d105      	bne.n	801660e <SetMaxTimeCredits+0x76>
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 10;
 8016602:	4b38      	ldr	r3, [pc, #224]	@ (80166e4 <SetMaxTimeCredits+0x14c>)
 8016604:	62fb      	str	r3, [r7, #44]	@ 0x2c
            band->LastMaxCreditAssignTime = elapsedTime;
 8016606:	68fb      	ldr	r3, [r7, #12]
 8016608:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801660a:	609a      	str	r2, [r3, #8]
 801660c:	e001      	b.n	8016612 <SetMaxTimeCredits+0x7a>
        }
        else
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 24;
 801660e:	4b36      	ldr	r3, [pc, #216]	@ (80166e8 <SetMaxTimeCredits+0x150>)
 8016610:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }

        timeDiff = SysTimeSub( elapsedTimeSinceStartup, SysTimeFromMs( band->LastMaxCreditAssignTime ) );
 8016612:	68fb      	ldr	r3, [r7, #12]
 8016614:	689a      	ldr	r2, [r3, #8]
 8016616:	f107 031c 	add.w	r3, r7, #28
 801661a:	4611      	mov	r1, r2
 801661c:	4618      	mov	r0, r3
 801661e:	f004 fb6d 	bl	801acfc <SysTimeFromMs>
 8016622:	f107 0014 	add.w	r0, r7, #20
 8016626:	6a3b      	ldr	r3, [r7, #32]
 8016628:	9300      	str	r3, [sp, #0]
 801662a:	69fb      	ldr	r3, [r7, #28]
 801662c:	463a      	mov	r2, r7
 801662e:	ca06      	ldmia	r2, {r1, r2}
 8016630:	f004 fa7d 	bl	801ab2e <SysTimeSub>

        // Verify if we have to assign the maximum credits in cases
        // of the preconditions have changed.
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 8016634:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8016638:	f083 0301 	eor.w	r3, r3, #1
 801663c:	b2db      	uxtb	r3, r3
 801663e:	2b00      	cmp	r3, #0
 8016640:	d006      	beq.n	8016650 <SetMaxTimeCredits+0xb8>
 8016642:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8016646:	f083 0301 	eor.w	r3, r3, #1
 801664a:	b2db      	uxtb	r3, r3
 801664c:	2b00      	cmp	r3, #0
 801664e:	d108      	bne.n	8016662 <SetMaxTimeCredits+0xca>
            ( band->MaxTimeCredits != maxCredits ) ||
 8016650:	68fb      	ldr	r3, [r7, #12]
 8016652:	691b      	ldr	r3, [r3, #16]
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 8016654:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8016656:	429a      	cmp	r2, r3
 8016658:	d103      	bne.n	8016662 <SetMaxTimeCredits+0xca>
            ( timeDiff.Seconds >= BACKOFF_24_HOURS_IN_S ) )
 801665a:	697b      	ldr	r3, [r7, #20]
            ( band->MaxTimeCredits != maxCredits ) ||
 801665c:	4a23      	ldr	r2, [pc, #140]	@ (80166ec <SetMaxTimeCredits+0x154>)
 801665e:	4293      	cmp	r3, r2
 8016660:	d92f      	bls.n	80166c2 <SetMaxTimeCredits+0x12a>
        {
            band->TimeCredits = maxCredits;
 8016662:	68fb      	ldr	r3, [r7, #12]
 8016664:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8016666:	60da      	str	r2, [r3, #12]

            if( elapsedTimeSinceStartup.Seconds >= BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 8016668:	683b      	ldr	r3, [r7, #0]
 801666a:	4a21      	ldr	r2, [pc, #132]	@ (80166f0 <SetMaxTimeCredits+0x158>)
 801666c:	4293      	cmp	r3, r2
 801666e:	d928      	bls.n	80166c2 <SetMaxTimeCredits+0x12a>
            {
                timeDiff.Seconds = ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S;
 8016670:	683b      	ldr	r3, [r7, #0]
 8016672:	f5a3 33f6 	sub.w	r3, r3, #125952	@ 0x1ec00
 8016676:	3b30      	subs	r3, #48	@ 0x30
 8016678:	4a1e      	ldr	r2, [pc, #120]	@ (80166f4 <SetMaxTimeCredits+0x15c>)
 801667a:	fba2 2303 	umull	r2, r3, r2, r3
 801667e:	0c1b      	lsrs	r3, r3, #16
 8016680:	617b      	str	r3, [r7, #20]
                timeDiff.Seconds *= BACKOFF_24_HOURS_IN_S;
 8016682:	697b      	ldr	r3, [r7, #20]
 8016684:	4a1c      	ldr	r2, [pc, #112]	@ (80166f8 <SetMaxTimeCredits+0x160>)
 8016686:	fb02 f303 	mul.w	r3, r2, r3
 801668a:	617b      	str	r3, [r7, #20]
                timeDiff.Seconds += BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 801668c:	697b      	ldr	r3, [r7, #20]
 801668e:	f503 33f6 	add.w	r3, r3, #125952	@ 0x1ec00
 8016692:	3330      	adds	r3, #48	@ 0x30
 8016694:	617b      	str	r3, [r7, #20]
                timeDiff.SubSeconds = 0;
 8016696:	2300      	movs	r3, #0
 8016698:	833b      	strh	r3, [r7, #24]
                band->LastMaxCreditAssignTime = SysTimeToMs( timeDiff );
 801669a:	f107 0314 	add.w	r3, r7, #20
 801669e:	e893 0003 	ldmia.w	r3, {r0, r1}
 80166a2:	f004 fb03 	bl	801acac <SysTimeToMs>
 80166a6:	4602      	mov	r2, r0
 80166a8:	68fb      	ldr	r3, [r7, #12]
 80166aa:	609a      	str	r2, [r3, #8]
 80166ac:	e009      	b.n	80166c2 <SetMaxTimeCredits+0x12a>
            }
        }
    }
    else
    {
        if( dutyCycleEnabled == false )
 80166ae:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 80166b2:	f083 0301 	eor.w	r3, r3, #1
 80166b6:	b2db      	uxtb	r3, r3
 80166b8:	2b00      	cmp	r3, #0
 80166ba:	d002      	beq.n	80166c2 <SetMaxTimeCredits+0x12a>
        {
            // Assign max credits when the duty cycle is disabled.
            band->TimeCredits = maxCredits;
 80166bc:	68fb      	ldr	r3, [r7, #12]
 80166be:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80166c0:	60da      	str	r2, [r3, #12]
        }
    }

    // Assign the max credits if its the first time
    if( band->LastBandUpdateTime == 0 )
 80166c2:	68fb      	ldr	r3, [r7, #12]
 80166c4:	685b      	ldr	r3, [r3, #4]
 80166c6:	2b00      	cmp	r3, #0
 80166c8:	d102      	bne.n	80166d0 <SetMaxTimeCredits+0x138>
    {
        band->TimeCredits = maxCredits;
 80166ca:	68fb      	ldr	r3, [r7, #12]
 80166cc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80166ce:	60da      	str	r2, [r3, #12]
    }

    // Setup the maximum allowed credits. We can assign them
    // safely all the time.
    band->MaxTimeCredits = maxCredits;
 80166d0:	68fb      	ldr	r3, [r7, #12]
 80166d2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80166d4:	611a      	str	r2, [r3, #16]

    return dutyCycle;
 80166d6:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
}
 80166d8:	4618      	mov	r0, r3
 80166da:	3730      	adds	r7, #48	@ 0x30
 80166dc:	46bd      	mov	sp, r7
 80166de:	bd80      	pop	{r7, pc}
 80166e0:	001b7740 	.word	0x001b7740
 80166e4:	0112a880 	.word	0x0112a880
 80166e8:	02932e00 	.word	0x02932e00
 80166ec:	0001517f 	.word	0x0001517f
 80166f0:	0001ec2f 	.word	0x0001ec2f
 80166f4:	c22e4507 	.word	0xc22e4507
 80166f8:	00015180 	.word	0x00015180

080166fc <UpdateTimeCredits>:

static uint16_t UpdateTimeCredits( Band_t* band, bool joined, bool dutyCycleEnabled,
                                   bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                   TimerTime_t currentTime )
{
 80166fc:	b580      	push	{r7, lr}
 80166fe:	b086      	sub	sp, #24
 8016700:	af02      	add	r7, sp, #8
 8016702:	6078      	str	r0, [r7, #4]
 8016704:	4608      	mov	r0, r1
 8016706:	4611      	mov	r1, r2
 8016708:	461a      	mov	r2, r3
 801670a:	4603      	mov	r3, r0
 801670c:	70fb      	strb	r3, [r7, #3]
 801670e:	460b      	mov	r3, r1
 8016710:	70bb      	strb	r3, [r7, #2]
 8016712:	4613      	mov	r3, r2
 8016714:	707b      	strb	r3, [r7, #1]
    uint16_t dutyCycle = SetMaxTimeCredits( band, joined, elapsedTimeSinceStartup,
 8016716:	78f9      	ldrb	r1, [r7, #3]
 8016718:	787b      	ldrb	r3, [r7, #1]
 801671a:	9301      	str	r3, [sp, #4]
 801671c:	78bb      	ldrb	r3, [r7, #2]
 801671e:	9300      	str	r3, [sp, #0]
 8016720:	f107 0318 	add.w	r3, r7, #24
 8016724:	cb0c      	ldmia	r3, {r2, r3}
 8016726:	6878      	ldr	r0, [r7, #4]
 8016728:	f7ff ff36 	bl	8016598 <SetMaxTimeCredits>
 801672c:	4603      	mov	r3, r0
 801672e:	81fb      	strh	r3, [r7, #14]
                                            dutyCycleEnabled, lastTxIsJoinRequest );

    if( joined == true )
 8016730:	78fb      	ldrb	r3, [r7, #3]
 8016732:	2b00      	cmp	r3, #0
 8016734:	d00a      	beq.n	801674c <UpdateTimeCredits+0x50>
    {
        // Apply a sliding window for the duty cycle with collection and speding
        // credits.
        band->TimeCredits += TimerGetElapsedTime( band->LastBandUpdateTime );
 8016736:	687b      	ldr	r3, [r7, #4]
 8016738:	685b      	ldr	r3, [r3, #4]
 801673a:	4618      	mov	r0, r3
 801673c:	f005 f8f0 	bl	801b920 <UTIL_TIMER_GetElapsedTime>
 8016740:	4602      	mov	r2, r0
 8016742:	687b      	ldr	r3, [r7, #4]
 8016744:	68db      	ldr	r3, [r3, #12]
 8016746:	441a      	add	r2, r3
 8016748:	687b      	ldr	r3, [r7, #4]
 801674a:	60da      	str	r2, [r3, #12]
    }

    // Limit band credits to maximum
    if( band->TimeCredits > band->MaxTimeCredits )
 801674c:	687b      	ldr	r3, [r7, #4]
 801674e:	68da      	ldr	r2, [r3, #12]
 8016750:	687b      	ldr	r3, [r7, #4]
 8016752:	691b      	ldr	r3, [r3, #16]
 8016754:	429a      	cmp	r2, r3
 8016756:	d903      	bls.n	8016760 <UpdateTimeCredits+0x64>
    {
        band->TimeCredits = band->MaxTimeCredits;
 8016758:	687b      	ldr	r3, [r7, #4]
 801675a:	691a      	ldr	r2, [r3, #16]
 801675c:	687b      	ldr	r3, [r7, #4]
 801675e:	60da      	str	r2, [r3, #12]
    }

    // Synchronize update time
    band->LastBandUpdateTime = currentTime;
 8016760:	687b      	ldr	r3, [r7, #4]
 8016762:	6a3a      	ldr	r2, [r7, #32]
 8016764:	605a      	str	r2, [r3, #4]

    return dutyCycle;
 8016766:	89fb      	ldrh	r3, [r7, #14]
}
 8016768:	4618      	mov	r0, r3
 801676a:	3710      	adds	r7, #16
 801676c:	46bd      	mov	sp, r7
 801676e:	bd80      	pop	{r7, pc}

08016770 <CountChannels>:

static uint8_t CountChannels( uint16_t mask, uint8_t nbBits )
{
 8016770:	b480      	push	{r7}
 8016772:	b085      	sub	sp, #20
 8016774:	af00      	add	r7, sp, #0
 8016776:	4603      	mov	r3, r0
 8016778:	460a      	mov	r2, r1
 801677a:	80fb      	strh	r3, [r7, #6]
 801677c:	4613      	mov	r3, r2
 801677e:	717b      	strb	r3, [r7, #5]
    uint8_t nbActiveBits = 0;
 8016780:	2300      	movs	r3, #0
 8016782:	73fb      	strb	r3, [r7, #15]

    for( uint8_t j = 0; j < nbBits; j++ )
 8016784:	2300      	movs	r3, #0
 8016786:	73bb      	strb	r3, [r7, #14]
 8016788:	e011      	b.n	80167ae <CountChannels+0x3e>
    {
        if( ( mask & ( 1 << j ) ) == ( 1 << j ) )
 801678a:	88fa      	ldrh	r2, [r7, #6]
 801678c:	7bbb      	ldrb	r3, [r7, #14]
 801678e:	2101      	movs	r1, #1
 8016790:	fa01 f303 	lsl.w	r3, r1, r3
 8016794:	401a      	ands	r2, r3
 8016796:	7bbb      	ldrb	r3, [r7, #14]
 8016798:	2101      	movs	r1, #1
 801679a:	fa01 f303 	lsl.w	r3, r1, r3
 801679e:	429a      	cmp	r2, r3
 80167a0:	d102      	bne.n	80167a8 <CountChannels+0x38>
        {
            nbActiveBits++;
 80167a2:	7bfb      	ldrb	r3, [r7, #15]
 80167a4:	3301      	adds	r3, #1
 80167a6:	73fb      	strb	r3, [r7, #15]
    for( uint8_t j = 0; j < nbBits; j++ )
 80167a8:	7bbb      	ldrb	r3, [r7, #14]
 80167aa:	3301      	adds	r3, #1
 80167ac:	73bb      	strb	r3, [r7, #14]
 80167ae:	7bba      	ldrb	r2, [r7, #14]
 80167b0:	797b      	ldrb	r3, [r7, #5]
 80167b2:	429a      	cmp	r2, r3
 80167b4:	d3e9      	bcc.n	801678a <CountChannels+0x1a>
        }
    }
    return nbActiveBits;
 80167b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80167b8:	4618      	mov	r0, r3
 80167ba:	3714      	adds	r7, #20
 80167bc:	46bd      	mov	sp, r7
 80167be:	bc80      	pop	{r7}
 80167c0:	4770      	bx	lr

080167c2 <RegionCommonChanVerifyDr>:

bool RegionCommonChanVerifyDr( uint8_t nbChannels, uint16_t* channelsMask, int8_t dr, int8_t minDr, int8_t maxDr, ChannelParams_t* channels )
{
 80167c2:	b580      	push	{r7, lr}
 80167c4:	b084      	sub	sp, #16
 80167c6:	af00      	add	r7, sp, #0
 80167c8:	6039      	str	r1, [r7, #0]
 80167ca:	4611      	mov	r1, r2
 80167cc:	461a      	mov	r2, r3
 80167ce:	4603      	mov	r3, r0
 80167d0:	71fb      	strb	r3, [r7, #7]
 80167d2:	460b      	mov	r3, r1
 80167d4:	71bb      	strb	r3, [r7, #6]
 80167d6:	4613      	mov	r3, r2
 80167d8:	717b      	strb	r3, [r7, #5]
    if( RegionCommonValueInRange( dr, minDr, maxDr ) == 0 )
 80167da:	f997 2018 	ldrsb.w	r2, [r7, #24]
 80167de:	f997 1005 	ldrsb.w	r1, [r7, #5]
 80167e2:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80167e6:	4618      	mov	r0, r3
 80167e8:	f000 f85d 	bl	80168a6 <RegionCommonValueInRange>
 80167ec:	4603      	mov	r3, r0
 80167ee:	2b00      	cmp	r3, #0
 80167f0:	d101      	bne.n	80167f6 <RegionCommonChanVerifyDr+0x34>
    {
        return false;
 80167f2:	2300      	movs	r3, #0
 80167f4:	e053      	b.n	801689e <RegionCommonChanVerifyDr+0xdc>
    }

    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 80167f6:	2300      	movs	r3, #0
 80167f8:	73fb      	strb	r3, [r7, #15]
 80167fa:	2300      	movs	r3, #0
 80167fc:	73bb      	strb	r3, [r7, #14]
 80167fe:	e049      	b.n	8016894 <RegionCommonChanVerifyDr+0xd2>
    {
        for( uint8_t j = 0; j < 16; j++ )
 8016800:	2300      	movs	r3, #0
 8016802:	737b      	strb	r3, [r7, #13]
 8016804:	e03d      	b.n	8016882 <RegionCommonChanVerifyDr+0xc0>
        {
            if( ( ( channelsMask[k] & ( 1 << j ) ) != 0 ) )
 8016806:	7bbb      	ldrb	r3, [r7, #14]
 8016808:	005b      	lsls	r3, r3, #1
 801680a:	683a      	ldr	r2, [r7, #0]
 801680c:	4413      	add	r3, r2
 801680e:	881b      	ldrh	r3, [r3, #0]
 8016810:	461a      	mov	r2, r3
 8016812:	7b7b      	ldrb	r3, [r7, #13]
 8016814:	fa42 f303 	asr.w	r3, r2, r3
 8016818:	f003 0301 	and.w	r3, r3, #1
 801681c:	2b00      	cmp	r3, #0
 801681e:	d02d      	beq.n	801687c <RegionCommonChanVerifyDr+0xba>
            {// Check datarate validity for enabled channels
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 8016820:	7bfa      	ldrb	r2, [r7, #15]
 8016822:	7b7b      	ldrb	r3, [r7, #13]
 8016824:	4413      	add	r3, r2
 8016826:	461a      	mov	r2, r3
 8016828:	4613      	mov	r3, r2
 801682a:	005b      	lsls	r3, r3, #1
 801682c:	4413      	add	r3, r2
 801682e:	009b      	lsls	r3, r3, #2
 8016830:	461a      	mov	r2, r3
 8016832:	69fb      	ldr	r3, [r7, #28]
 8016834:	4413      	add	r3, r2
 8016836:	7a1b      	ldrb	r3, [r3, #8]
 8016838:	f343 0303 	sbfx	r3, r3, #0, #4
 801683c:	b25b      	sxtb	r3, r3
 801683e:	f003 030f 	and.w	r3, r3, #15
 8016842:	b259      	sxtb	r1, r3
                                                  ( channels[i + j].DrRange.Fields.Max & 0x0F ) ) == 1 )
 8016844:	7bfa      	ldrb	r2, [r7, #15]
 8016846:	7b7b      	ldrb	r3, [r7, #13]
 8016848:	4413      	add	r3, r2
 801684a:	461a      	mov	r2, r3
 801684c:	4613      	mov	r3, r2
 801684e:	005b      	lsls	r3, r3, #1
 8016850:	4413      	add	r3, r2
 8016852:	009b      	lsls	r3, r3, #2
 8016854:	461a      	mov	r2, r3
 8016856:	69fb      	ldr	r3, [r7, #28]
 8016858:	4413      	add	r3, r2
 801685a:	7a1b      	ldrb	r3, [r3, #8]
 801685c:	f343 1303 	sbfx	r3, r3, #4, #4
 8016860:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 8016862:	f003 030f 	and.w	r3, r3, #15
 8016866:	b25a      	sxtb	r2, r3
 8016868:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801686c:	4618      	mov	r0, r3
 801686e:	f000 f81a 	bl	80168a6 <RegionCommonValueInRange>
 8016872:	4603      	mov	r3, r0
 8016874:	2b01      	cmp	r3, #1
 8016876:	d101      	bne.n	801687c <RegionCommonChanVerifyDr+0xba>
                {
                    // At least 1 channel has been found we can return OK.
                    return true;
 8016878:	2301      	movs	r3, #1
 801687a:	e010      	b.n	801689e <RegionCommonChanVerifyDr+0xdc>
        for( uint8_t j = 0; j < 16; j++ )
 801687c:	7b7b      	ldrb	r3, [r7, #13]
 801687e:	3301      	adds	r3, #1
 8016880:	737b      	strb	r3, [r7, #13]
 8016882:	7b7b      	ldrb	r3, [r7, #13]
 8016884:	2b0f      	cmp	r3, #15
 8016886:	d9be      	bls.n	8016806 <RegionCommonChanVerifyDr+0x44>
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 8016888:	7bfb      	ldrb	r3, [r7, #15]
 801688a:	3310      	adds	r3, #16
 801688c:	73fb      	strb	r3, [r7, #15]
 801688e:	7bbb      	ldrb	r3, [r7, #14]
 8016890:	3301      	adds	r3, #1
 8016892:	73bb      	strb	r3, [r7, #14]
 8016894:	7bfa      	ldrb	r2, [r7, #15]
 8016896:	79fb      	ldrb	r3, [r7, #7]
 8016898:	429a      	cmp	r2, r3
 801689a:	d3b1      	bcc.n	8016800 <RegionCommonChanVerifyDr+0x3e>
                }
            }
        }
    }
    return false;
 801689c:	2300      	movs	r3, #0
}
 801689e:	4618      	mov	r0, r3
 80168a0:	3710      	adds	r7, #16
 80168a2:	46bd      	mov	sp, r7
 80168a4:	bd80      	pop	{r7, pc}

080168a6 <RegionCommonValueInRange>:

uint8_t RegionCommonValueInRange( int8_t value, int8_t min, int8_t max )
{
 80168a6:	b480      	push	{r7}
 80168a8:	b083      	sub	sp, #12
 80168aa:	af00      	add	r7, sp, #0
 80168ac:	4603      	mov	r3, r0
 80168ae:	71fb      	strb	r3, [r7, #7]
 80168b0:	460b      	mov	r3, r1
 80168b2:	71bb      	strb	r3, [r7, #6]
 80168b4:	4613      	mov	r3, r2
 80168b6:	717b      	strb	r3, [r7, #5]
    if( ( value >= min ) && ( value <= max ) )
 80168b8:	f997 2007 	ldrsb.w	r2, [r7, #7]
 80168bc:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80168c0:	429a      	cmp	r2, r3
 80168c2:	db07      	blt.n	80168d4 <RegionCommonValueInRange+0x2e>
 80168c4:	f997 2007 	ldrsb.w	r2, [r7, #7]
 80168c8:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80168cc:	429a      	cmp	r2, r3
 80168ce:	dc01      	bgt.n	80168d4 <RegionCommonValueInRange+0x2e>
    {
        return 1;
 80168d0:	2301      	movs	r3, #1
 80168d2:	e000      	b.n	80168d6 <RegionCommonValueInRange+0x30>
    }
    return 0;
 80168d4:	2300      	movs	r3, #0
}
 80168d6:	4618      	mov	r0, r3
 80168d8:	370c      	adds	r7, #12
 80168da:	46bd      	mov	sp, r7
 80168dc:	bc80      	pop	{r7}
 80168de:	4770      	bx	lr

080168e0 <RegionCommonChanDisable>:

bool RegionCommonChanDisable( uint16_t* channelsMask, uint8_t id, uint8_t maxChannels )
{
 80168e0:	b480      	push	{r7}
 80168e2:	b085      	sub	sp, #20
 80168e4:	af00      	add	r7, sp, #0
 80168e6:	6078      	str	r0, [r7, #4]
 80168e8:	460b      	mov	r3, r1
 80168ea:	70fb      	strb	r3, [r7, #3]
 80168ec:	4613      	mov	r3, r2
 80168ee:	70bb      	strb	r3, [r7, #2]
    uint8_t index = id / 16;
 80168f0:	78fb      	ldrb	r3, [r7, #3]
 80168f2:	091b      	lsrs	r3, r3, #4
 80168f4:	73fb      	strb	r3, [r7, #15]

    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
 80168f6:	78bb      	ldrb	r3, [r7, #2]
 80168f8:	091b      	lsrs	r3, r3, #4
 80168fa:	b2db      	uxtb	r3, r3
 80168fc:	7bfa      	ldrb	r2, [r7, #15]
 80168fe:	429a      	cmp	r2, r3
 8016900:	d803      	bhi.n	801690a <RegionCommonChanDisable+0x2a>
 8016902:	78fa      	ldrb	r2, [r7, #3]
 8016904:	78bb      	ldrb	r3, [r7, #2]
 8016906:	429a      	cmp	r2, r3
 8016908:	d301      	bcc.n	801690e <RegionCommonChanDisable+0x2e>
    {
        return false;
 801690a:	2300      	movs	r3, #0
 801690c:	e017      	b.n	801693e <RegionCommonChanDisable+0x5e>
    }

    // Deactivate channel
    channelsMask[index] &= ~( 1 << ( id % 16 ) );
 801690e:	7bfb      	ldrb	r3, [r7, #15]
 8016910:	005b      	lsls	r3, r3, #1
 8016912:	687a      	ldr	r2, [r7, #4]
 8016914:	4413      	add	r3, r2
 8016916:	881b      	ldrh	r3, [r3, #0]
 8016918:	b21a      	sxth	r2, r3
 801691a:	78fb      	ldrb	r3, [r7, #3]
 801691c:	f003 030f 	and.w	r3, r3, #15
 8016920:	2101      	movs	r1, #1
 8016922:	fa01 f303 	lsl.w	r3, r1, r3
 8016926:	b21b      	sxth	r3, r3
 8016928:	43db      	mvns	r3, r3
 801692a:	b21b      	sxth	r3, r3
 801692c:	4013      	ands	r3, r2
 801692e:	b219      	sxth	r1, r3
 8016930:	7bfb      	ldrb	r3, [r7, #15]
 8016932:	005b      	lsls	r3, r3, #1
 8016934:	687a      	ldr	r2, [r7, #4]
 8016936:	4413      	add	r3, r2
 8016938:	b28a      	uxth	r2, r1
 801693a:	801a      	strh	r2, [r3, #0]

    return true;
 801693c:	2301      	movs	r3, #1
}
 801693e:	4618      	mov	r0, r3
 8016940:	3714      	adds	r7, #20
 8016942:	46bd      	mov	sp, r7
 8016944:	bc80      	pop	{r7}
 8016946:	4770      	bx	lr

08016948 <RegionCommonCountChannels>:

uint8_t RegionCommonCountChannels( uint16_t* channelsMask, uint8_t startIdx, uint8_t stopIdx )
{
 8016948:	b580      	push	{r7, lr}
 801694a:	b084      	sub	sp, #16
 801694c:	af00      	add	r7, sp, #0
 801694e:	6078      	str	r0, [r7, #4]
 8016950:	460b      	mov	r3, r1
 8016952:	70fb      	strb	r3, [r7, #3]
 8016954:	4613      	mov	r3, r2
 8016956:	70bb      	strb	r3, [r7, #2]
    uint8_t nbChannels = 0;
 8016958:	2300      	movs	r3, #0
 801695a:	73fb      	strb	r3, [r7, #15]

    if( channelsMask == NULL )
 801695c:	687b      	ldr	r3, [r7, #4]
 801695e:	2b00      	cmp	r3, #0
 8016960:	d101      	bne.n	8016966 <RegionCommonCountChannels+0x1e>
    {
        return 0;
 8016962:	2300      	movs	r3, #0
 8016964:	e018      	b.n	8016998 <RegionCommonCountChannels+0x50>
    }

    for( uint8_t i = startIdx; i < stopIdx; i++ )
 8016966:	78fb      	ldrb	r3, [r7, #3]
 8016968:	73bb      	strb	r3, [r7, #14]
 801696a:	e010      	b.n	801698e <RegionCommonCountChannels+0x46>
    {
        nbChannels += CountChannels( channelsMask[i], 16 );
 801696c:	7bbb      	ldrb	r3, [r7, #14]
 801696e:	005b      	lsls	r3, r3, #1
 8016970:	687a      	ldr	r2, [r7, #4]
 8016972:	4413      	add	r3, r2
 8016974:	881b      	ldrh	r3, [r3, #0]
 8016976:	2110      	movs	r1, #16
 8016978:	4618      	mov	r0, r3
 801697a:	f7ff fef9 	bl	8016770 <CountChannels>
 801697e:	4603      	mov	r3, r0
 8016980:	461a      	mov	r2, r3
 8016982:	7bfb      	ldrb	r3, [r7, #15]
 8016984:	4413      	add	r3, r2
 8016986:	73fb      	strb	r3, [r7, #15]
    for( uint8_t i = startIdx; i < stopIdx; i++ )
 8016988:	7bbb      	ldrb	r3, [r7, #14]
 801698a:	3301      	adds	r3, #1
 801698c:	73bb      	strb	r3, [r7, #14]
 801698e:	7bba      	ldrb	r2, [r7, #14]
 8016990:	78bb      	ldrb	r3, [r7, #2]
 8016992:	429a      	cmp	r2, r3
 8016994:	d3ea      	bcc.n	801696c <RegionCommonCountChannels+0x24>
    }

    return nbChannels;
 8016996:	7bfb      	ldrb	r3, [r7, #15]
}
 8016998:	4618      	mov	r0, r3
 801699a:	3710      	adds	r7, #16
 801699c:	46bd      	mov	sp, r7
 801699e:	bd80      	pop	{r7, pc}

080169a0 <RegionCommonChanMaskCopy>:

void RegionCommonChanMaskCopy( uint16_t* channelsMaskDest, uint16_t* channelsMaskSrc, uint8_t len )
{
 80169a0:	b480      	push	{r7}
 80169a2:	b087      	sub	sp, #28
 80169a4:	af00      	add	r7, sp, #0
 80169a6:	60f8      	str	r0, [r7, #12]
 80169a8:	60b9      	str	r1, [r7, #8]
 80169aa:	4613      	mov	r3, r2
 80169ac:	71fb      	strb	r3, [r7, #7]
    if( ( channelsMaskDest != NULL ) && ( channelsMaskSrc != NULL ) )
 80169ae:	68fb      	ldr	r3, [r7, #12]
 80169b0:	2b00      	cmp	r3, #0
 80169b2:	d016      	beq.n	80169e2 <RegionCommonChanMaskCopy+0x42>
 80169b4:	68bb      	ldr	r3, [r7, #8]
 80169b6:	2b00      	cmp	r3, #0
 80169b8:	d013      	beq.n	80169e2 <RegionCommonChanMaskCopy+0x42>
    {
        for( uint8_t i = 0; i < len; i++ )
 80169ba:	2300      	movs	r3, #0
 80169bc:	75fb      	strb	r3, [r7, #23]
 80169be:	e00c      	b.n	80169da <RegionCommonChanMaskCopy+0x3a>
        {
            channelsMaskDest[i] = channelsMaskSrc[i];
 80169c0:	7dfb      	ldrb	r3, [r7, #23]
 80169c2:	005b      	lsls	r3, r3, #1
 80169c4:	68ba      	ldr	r2, [r7, #8]
 80169c6:	441a      	add	r2, r3
 80169c8:	7dfb      	ldrb	r3, [r7, #23]
 80169ca:	005b      	lsls	r3, r3, #1
 80169cc:	68f9      	ldr	r1, [r7, #12]
 80169ce:	440b      	add	r3, r1
 80169d0:	8812      	ldrh	r2, [r2, #0]
 80169d2:	801a      	strh	r2, [r3, #0]
        for( uint8_t i = 0; i < len; i++ )
 80169d4:	7dfb      	ldrb	r3, [r7, #23]
 80169d6:	3301      	adds	r3, #1
 80169d8:	75fb      	strb	r3, [r7, #23]
 80169da:	7dfa      	ldrb	r2, [r7, #23]
 80169dc:	79fb      	ldrb	r3, [r7, #7]
 80169de:	429a      	cmp	r2, r3
 80169e0:	d3ee      	bcc.n	80169c0 <RegionCommonChanMaskCopy+0x20>
        }
    }
}
 80169e2:	bf00      	nop
 80169e4:	371c      	adds	r7, #28
 80169e6:	46bd      	mov	sp, r7
 80169e8:	bc80      	pop	{r7}
 80169ea:	4770      	bx	lr

080169ec <RegionCommonSetBandTxDone>:

void RegionCommonSetBandTxDone( Band_t* band, TimerTime_t lastTxAirTime, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 80169ec:	b082      	sub	sp, #8
 80169ee:	b580      	push	{r7, lr}
 80169f0:	b086      	sub	sp, #24
 80169f2:	af00      	add	r7, sp, #0
 80169f4:	60f8      	str	r0, [r7, #12]
 80169f6:	60b9      	str	r1, [r7, #8]
 80169f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80169fa:	4613      	mov	r3, r2
 80169fc:	71fb      	strb	r3, [r7, #7]
    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    uint16_t dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 80169fe:	79f9      	ldrb	r1, [r7, #7]
 8016a00:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8016a04:	cb0c      	ldmia	r3, {r2, r3}
 8016a06:	68f8      	ldr	r0, [r7, #12]
 8016a08:	f7ff fd8c 	bl	8016524 <GetDutyCycle>
 8016a0c:	4603      	mov	r3, r0
 8016a0e:	82fb      	strh	r3, [r7, #22]

    // Reduce with transmission time
    if( band->TimeCredits > ( lastTxAirTime * dutyCycle ) )
 8016a10:	68fb      	ldr	r3, [r7, #12]
 8016a12:	68da      	ldr	r2, [r3, #12]
 8016a14:	8afb      	ldrh	r3, [r7, #22]
 8016a16:	68b9      	ldr	r1, [r7, #8]
 8016a18:	fb01 f303 	mul.w	r3, r1, r3
 8016a1c:	429a      	cmp	r2, r3
 8016a1e:	d909      	bls.n	8016a34 <RegionCommonSetBandTxDone+0x48>
    {
        // Reduce time credits by the time of air
        band->TimeCredits -= ( lastTxAirTime * dutyCycle );
 8016a20:	68fb      	ldr	r3, [r7, #12]
 8016a22:	68da      	ldr	r2, [r3, #12]
 8016a24:	8afb      	ldrh	r3, [r7, #22]
 8016a26:	68b9      	ldr	r1, [r7, #8]
 8016a28:	fb01 f303 	mul.w	r3, r1, r3
 8016a2c:	1ad2      	subs	r2, r2, r3
 8016a2e:	68fb      	ldr	r3, [r7, #12]
 8016a30:	60da      	str	r2, [r3, #12]
    }
    else
    {
        band->TimeCredits = 0;
    }
}
 8016a32:	e002      	b.n	8016a3a <RegionCommonSetBandTxDone+0x4e>
        band->TimeCredits = 0;
 8016a34:	68fb      	ldr	r3, [r7, #12]
 8016a36:	2200      	movs	r2, #0
 8016a38:	60da      	str	r2, [r3, #12]
}
 8016a3a:	bf00      	nop
 8016a3c:	3718      	adds	r7, #24
 8016a3e:	46bd      	mov	sp, r7
 8016a40:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8016a44:	b002      	add	sp, #8
 8016a46:	4770      	bx	lr

08016a48 <RegionCommonUpdateBandTimeOff>:

TimerTime_t RegionCommonUpdateBandTimeOff( bool joined, Band_t* bands,
                                           uint8_t nbBands, bool dutyCycleEnabled,
                                           bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                           TimerTime_t expectedTimeOnAir )
{
 8016a48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016a4a:	b08f      	sub	sp, #60	@ 0x3c
 8016a4c:	af04      	add	r7, sp, #16
 8016a4e:	6039      	str	r1, [r7, #0]
 8016a50:	4611      	mov	r1, r2
 8016a52:	461a      	mov	r2, r3
 8016a54:	4603      	mov	r3, r0
 8016a56:	71fb      	strb	r3, [r7, #7]
 8016a58:	460b      	mov	r3, r1
 8016a5a:	71bb      	strb	r3, [r7, #6]
 8016a5c:	4613      	mov	r3, r2
 8016a5e:	717b      	strb	r3, [r7, #5]
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
 8016a60:	f04f 33ff 	mov.w	r3, #4294967295
 8016a64:	627b      	str	r3, [r7, #36]	@ 0x24
    TimerTime_t currentTime = TimerGetCurrentTime( );
 8016a66:	f004 ff49 	bl	801b8fc <UTIL_TIMER_GetCurrentTime>
 8016a6a:	61f8      	str	r0, [r7, #28]
    TimerTime_t creditCosts = 0;
 8016a6c:	2300      	movs	r3, #0
 8016a6e:	61bb      	str	r3, [r7, #24]
    uint16_t dutyCycle = 1;
 8016a70:	2301      	movs	r3, #1
 8016a72:	82fb      	strh	r3, [r7, #22]
    uint8_t validBands = 0;
 8016a74:	2300      	movs	r3, #0
 8016a76:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

    for( uint8_t i = 0; i < nbBands; i++ )
 8016a7a:	2300      	movs	r3, #0
 8016a7c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8016a80:	e0ba      	b.n	8016bf8 <RegionCommonUpdateBandTimeOff+0x1b0>
    {
        // Synchronization of bands and credits
        dutyCycle = UpdateTimeCredits( &bands[i], joined, dutyCycleEnabled,
 8016a82:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8016a86:	4613      	mov	r3, r2
 8016a88:	005b      	lsls	r3, r3, #1
 8016a8a:	4413      	add	r3, r2
 8016a8c:	00db      	lsls	r3, r3, #3
 8016a8e:	461a      	mov	r2, r3
 8016a90:	683b      	ldr	r3, [r7, #0]
 8016a92:	189c      	adds	r4, r3, r2
 8016a94:	f897 6040 	ldrb.w	r6, [r7, #64]	@ 0x40
 8016a98:	797a      	ldrb	r2, [r7, #5]
 8016a9a:	79fd      	ldrb	r5, [r7, #7]
 8016a9c:	69fb      	ldr	r3, [r7, #28]
 8016a9e:	9302      	str	r3, [sp, #8]
 8016aa0:	46ec      	mov	ip, sp
 8016aa2:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8016aa6:	e893 0003 	ldmia.w	r3, {r0, r1}
 8016aaa:	e88c 0003 	stmia.w	ip, {r0, r1}
 8016aae:	4633      	mov	r3, r6
 8016ab0:	4629      	mov	r1, r5
 8016ab2:	4620      	mov	r0, r4
 8016ab4:	f7ff fe22 	bl	80166fc <UpdateTimeCredits>
 8016ab8:	4603      	mov	r3, r0
 8016aba:	82fb      	strh	r3, [r7, #22]
                                       lastTxIsJoinRequest, elapsedTimeSinceStartup,
                                       currentTime );

        // Calculate the credit costs for the next transmission
        // with the duty cycle and the expected time on air
        creditCosts = expectedTimeOnAir * dutyCycle;
 8016abc:	8afa      	ldrh	r2, [r7, #22]
 8016abe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8016ac0:	fb02 f303 	mul.w	r3, r2, r3
 8016ac4:	61bb      	str	r3, [r7, #24]

        // Check if the band is ready for transmission. Its ready,
        // when the duty cycle is off, or the TimeCredits of the band
        // is higher than the credit costs for the transmission.
        if( ( bands[i].TimeCredits > creditCosts ) ||
 8016ac6:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8016aca:	4613      	mov	r3, r2
 8016acc:	005b      	lsls	r3, r3, #1
 8016ace:	4413      	add	r3, r2
 8016ad0:	00db      	lsls	r3, r3, #3
 8016ad2:	461a      	mov	r2, r3
 8016ad4:	683b      	ldr	r3, [r7, #0]
 8016ad6:	4413      	add	r3, r2
 8016ad8:	68db      	ldr	r3, [r3, #12]
 8016ada:	69ba      	ldr	r2, [r7, #24]
 8016adc:	429a      	cmp	r2, r3
 8016ade:	d308      	bcc.n	8016af2 <RegionCommonUpdateBandTimeOff+0xaa>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 8016ae0:	797b      	ldrb	r3, [r7, #5]
 8016ae2:	f083 0301 	eor.w	r3, r3, #1
 8016ae6:	b2db      	uxtb	r3, r3
        if( ( bands[i].TimeCredits > creditCosts ) ||
 8016ae8:	2b00      	cmp	r3, #0
 8016aea:	d013      	beq.n	8016b14 <RegionCommonUpdateBandTimeOff+0xcc>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 8016aec:	79fb      	ldrb	r3, [r7, #7]
 8016aee:	2b00      	cmp	r3, #0
 8016af0:	d010      	beq.n	8016b14 <RegionCommonUpdateBandTimeOff+0xcc>
        {
            bands[i].ReadyForTransmission = true;
 8016af2:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8016af6:	4613      	mov	r3, r2
 8016af8:	005b      	lsls	r3, r3, #1
 8016afa:	4413      	add	r3, r2
 8016afc:	00db      	lsls	r3, r3, #3
 8016afe:	461a      	mov	r2, r3
 8016b00:	683b      	ldr	r3, [r7, #0]
 8016b02:	4413      	add	r3, r2
 8016b04:	2201      	movs	r2, #1
 8016b06:	751a      	strb	r2, [r3, #20]
            // This band is a potential candidate for an
            // upcoming transmission, so increase the counter.
            validBands++;
 8016b08:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8016b0c:	3301      	adds	r3, #1
 8016b0e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8016b12:	e06c      	b.n	8016bee <RegionCommonUpdateBandTimeOff+0x1a6>
        }
        else
        {
            // In this case, the band has not enough credits
            // for the next transmission.
            bands[i].ReadyForTransmission = false;
 8016b14:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8016b18:	4613      	mov	r3, r2
 8016b1a:	005b      	lsls	r3, r3, #1
 8016b1c:	4413      	add	r3, r2
 8016b1e:	00db      	lsls	r3, r3, #3
 8016b20:	461a      	mov	r2, r3
 8016b22:	683b      	ldr	r3, [r7, #0]
 8016b24:	4413      	add	r3, r2
 8016b26:	2200      	movs	r2, #0
 8016b28:	751a      	strb	r2, [r3, #20]

            if( bands[i].MaxTimeCredits > creditCosts )
 8016b2a:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8016b2e:	4613      	mov	r3, r2
 8016b30:	005b      	lsls	r3, r3, #1
 8016b32:	4413      	add	r3, r2
 8016b34:	00db      	lsls	r3, r3, #3
 8016b36:	461a      	mov	r2, r3
 8016b38:	683b      	ldr	r3, [r7, #0]
 8016b3a:	4413      	add	r3, r2
 8016b3c:	691b      	ldr	r3, [r3, #16]
 8016b3e:	69ba      	ldr	r2, [r7, #24]
 8016b40:	429a      	cmp	r2, r3
 8016b42:	d215      	bcs.n	8016b70 <RegionCommonUpdateBandTimeOff+0x128>
                // The band can only be taken into account, if the maximum credits
                // of the band are higher than the credit costs.
                // We calculate the minTimeToWait among the bands which are not
                // ready for transmission and which are potentially available
                // for a transmission in the future.
                minTimeToWait = MIN( minTimeToWait, ( creditCosts - bands[i].TimeCredits ) );
 8016b44:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8016b48:	4613      	mov	r3, r2
 8016b4a:	005b      	lsls	r3, r3, #1
 8016b4c:	4413      	add	r3, r2
 8016b4e:	00db      	lsls	r3, r3, #3
 8016b50:	461a      	mov	r2, r3
 8016b52:	683b      	ldr	r3, [r7, #0]
 8016b54:	4413      	add	r3, r2
 8016b56:	68db      	ldr	r3, [r3, #12]
 8016b58:	69ba      	ldr	r2, [r7, #24]
 8016b5a:	1ad3      	subs	r3, r2, r3
 8016b5c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8016b5e:	4293      	cmp	r3, r2
 8016b60:	bf28      	it	cs
 8016b62:	4613      	movcs	r3, r2
 8016b64:	627b      	str	r3, [r7, #36]	@ 0x24
                // This band is a potential candidate for an
                // upcoming transmission (even if its time credits are not enough
                // at the moment), so increase the counter.
                validBands++;
 8016b66:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8016b6a:	3301      	adds	r3, #1
 8016b6c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
            }

            // Apply a special calculation if the device is not joined.
            if( joined == false )
 8016b70:	79fb      	ldrb	r3, [r7, #7]
 8016b72:	f083 0301 	eor.w	r3, r3, #1
 8016b76:	b2db      	uxtb	r3, r3
 8016b78:	2b00      	cmp	r3, #0
 8016b7a:	d038      	beq.n	8016bee <RegionCommonUpdateBandTimeOff+0x1a6>
            {
                SysTime_t backoffTimeRange = {
 8016b7c:	2300      	movs	r3, #0
 8016b7e:	60fb      	str	r3, [r7, #12]
 8016b80:	2300      	movs	r3, #0
 8016b82:	823b      	strh	r3, [r7, #16]
                    .Seconds    = 0,
                    .SubSeconds = 0,
                };
                // Get the backoff time range based on the duty cycle definition
                if( dutyCycle == BACKOFF_DC_1_HOUR )
 8016b84:	8afb      	ldrh	r3, [r7, #22]
 8016b86:	2b64      	cmp	r3, #100	@ 0x64
 8016b88:	d103      	bne.n	8016b92 <RegionCommonUpdateBandTimeOff+0x14a>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_1_HOUR_IN_S;
 8016b8a:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 8016b8e:	60fb      	str	r3, [r7, #12]
 8016b90:	e009      	b.n	8016ba6 <RegionCommonUpdateBandTimeOff+0x15e>
                }
                else if( dutyCycle == BACKOFF_DC_10_HOURS )
 8016b92:	8afb      	ldrh	r3, [r7, #22]
 8016b94:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8016b98:	d103      	bne.n	8016ba2 <RegionCommonUpdateBandTimeOff+0x15a>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_10_HOURS_IN_S;
 8016b9a:	f649 23b0 	movw	r3, #39600	@ 0x9ab0
 8016b9e:	60fb      	str	r3, [r7, #12]
 8016ba0:	e001      	b.n	8016ba6 <RegionCommonUpdateBandTimeOff+0x15e>
                }
                else
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 8016ba2:	4b1e      	ldr	r3, [pc, #120]	@ (8016c1c <RegionCommonUpdateBandTimeOff+0x1d4>)
 8016ba4:	60fb      	str	r3, [r7, #12]
                }
                // Calculate the time to wait.
                if( elapsedTimeSinceStartup.Seconds > BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 8016ba6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8016ba8:	4a1c      	ldr	r2, [pc, #112]	@ (8016c1c <RegionCommonUpdateBandTimeOff+0x1d4>)
 8016baa:	4293      	cmp	r3, r2
 8016bac:	d90e      	bls.n	8016bcc <RegionCommonUpdateBandTimeOff+0x184>
                {
                    backoffTimeRange.Seconds += BACKOFF_24_HOURS_IN_S * ( ( ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S ) + 1 );
 8016bae:	68fa      	ldr	r2, [r7, #12]
 8016bb0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8016bb2:	f5a3 33f6 	sub.w	r3, r3, #125952	@ 0x1ec00
 8016bb6:	3b30      	subs	r3, #48	@ 0x30
 8016bb8:	4919      	ldr	r1, [pc, #100]	@ (8016c20 <RegionCommonUpdateBandTimeOff+0x1d8>)
 8016bba:	fba1 1303 	umull	r1, r3, r1, r3
 8016bbe:	0c1b      	lsrs	r3, r3, #16
 8016bc0:	3301      	adds	r3, #1
 8016bc2:	4918      	ldr	r1, [pc, #96]	@ (8016c24 <RegionCommonUpdateBandTimeOff+0x1dc>)
 8016bc4:	fb01 f303 	mul.w	r3, r1, r3
 8016bc8:	4413      	add	r3, r2
 8016bca:	60fb      	str	r3, [r7, #12]
                }
                // Calculate the time difference between now and the next range
                backoffTimeRange  = SysTimeSub( backoffTimeRange, elapsedTimeSinceStartup );
 8016bcc:	f107 000c 	add.w	r0, r7, #12
 8016bd0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8016bd2:	9300      	str	r3, [sp, #0]
 8016bd4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8016bd6:	f107 020c 	add.w	r2, r7, #12
 8016bda:	ca06      	ldmia	r2, {r1, r2}
 8016bdc:	f003 ffa7 	bl	801ab2e <SysTimeSub>
                minTimeToWait = SysTimeToMs( backoffTimeRange );
 8016be0:	f107 030c 	add.w	r3, r7, #12
 8016be4:	e893 0003 	ldmia.w	r3, {r0, r1}
 8016be8:	f004 f860 	bl	801acac <SysTimeToMs>
 8016bec:	6278      	str	r0, [r7, #36]	@ 0x24
    for( uint8_t i = 0; i < nbBands; i++ )
 8016bee:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8016bf2:	3301      	adds	r3, #1
 8016bf4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8016bf8:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8016bfc:	79bb      	ldrb	r3, [r7, #6]
 8016bfe:	429a      	cmp	r2, r3
 8016c00:	f4ff af3f 	bcc.w	8016a82 <RegionCommonUpdateBandTimeOff+0x3a>
            }
        }
    }

    if( validBands == 0 )
 8016c04:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8016c08:	2b00      	cmp	r3, #0
 8016c0a:	d102      	bne.n	8016c12 <RegionCommonUpdateBandTimeOff+0x1ca>
    {
        // There is no valid band available to handle a transmission
        // in the given DUTY_CYCLE_TIME_PERIOD.
        return TIMERTIME_T_MAX;
 8016c0c:	f04f 33ff 	mov.w	r3, #4294967295
 8016c10:	e000      	b.n	8016c14 <RegionCommonUpdateBandTimeOff+0x1cc>
    }
    return minTimeToWait;
 8016c12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8016c14:	4618      	mov	r0, r3
 8016c16:	372c      	adds	r7, #44	@ 0x2c
 8016c18:	46bd      	mov	sp, r7
 8016c1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016c1c:	0001ec30 	.word	0x0001ec30
 8016c20:	c22e4507 	.word	0xc22e4507
 8016c24:	00015180 	.word	0x00015180

08016c28 <RegionCommonParseLinkAdrReq>:

uint8_t RegionCommonParseLinkAdrReq( uint8_t* payload, RegionCommonLinkAdrParams_t* linkAdrParams )
{
 8016c28:	b480      	push	{r7}
 8016c2a:	b085      	sub	sp, #20
 8016c2c:	af00      	add	r7, sp, #0
 8016c2e:	6078      	str	r0, [r7, #4]
 8016c30:	6039      	str	r1, [r7, #0]
    uint8_t retIndex = 0;
 8016c32:	2300      	movs	r3, #0
 8016c34:	73fb      	strb	r3, [r7, #15]

    if( payload[0] == SRV_MAC_LINK_ADR_REQ )
 8016c36:	687b      	ldr	r3, [r7, #4]
 8016c38:	781b      	ldrb	r3, [r3, #0]
 8016c3a:	2b03      	cmp	r3, #3
 8016c3c:	d13f      	bne.n	8016cbe <RegionCommonParseLinkAdrReq+0x96>
    {
        // Parse datarate and tx power
        linkAdrParams->Datarate = payload[1];
 8016c3e:	687b      	ldr	r3, [r7, #4]
 8016c40:	3301      	adds	r3, #1
 8016c42:	781b      	ldrb	r3, [r3, #0]
 8016c44:	b25a      	sxtb	r2, r3
 8016c46:	683b      	ldr	r3, [r7, #0]
 8016c48:	705a      	strb	r2, [r3, #1]
        linkAdrParams->TxPower = linkAdrParams->Datarate & 0x0F;
 8016c4a:	683b      	ldr	r3, [r7, #0]
 8016c4c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8016c50:	f003 030f 	and.w	r3, r3, #15
 8016c54:	b25a      	sxtb	r2, r3
 8016c56:	683b      	ldr	r3, [r7, #0]
 8016c58:	709a      	strb	r2, [r3, #2]
        linkAdrParams->Datarate = ( linkAdrParams->Datarate >> 4 ) & 0x0F;
 8016c5a:	683b      	ldr	r3, [r7, #0]
 8016c5c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8016c60:	b2db      	uxtb	r3, r3
 8016c62:	091b      	lsrs	r3, r3, #4
 8016c64:	b2db      	uxtb	r3, r3
 8016c66:	b25a      	sxtb	r2, r3
 8016c68:	683b      	ldr	r3, [r7, #0]
 8016c6a:	705a      	strb	r2, [r3, #1]
        // Parse ChMask
        linkAdrParams->ChMask = ( uint16_t )payload[2];
 8016c6c:	687b      	ldr	r3, [r7, #4]
 8016c6e:	3302      	adds	r3, #2
 8016c70:	781b      	ldrb	r3, [r3, #0]
 8016c72:	461a      	mov	r2, r3
 8016c74:	683b      	ldr	r3, [r7, #0]
 8016c76:	809a      	strh	r2, [r3, #4]
        linkAdrParams->ChMask |= ( uint16_t )payload[3] << 8;
 8016c78:	683b      	ldr	r3, [r7, #0]
 8016c7a:	889b      	ldrh	r3, [r3, #4]
 8016c7c:	b21a      	sxth	r2, r3
 8016c7e:	687b      	ldr	r3, [r7, #4]
 8016c80:	3303      	adds	r3, #3
 8016c82:	781b      	ldrb	r3, [r3, #0]
 8016c84:	021b      	lsls	r3, r3, #8
 8016c86:	b21b      	sxth	r3, r3
 8016c88:	4313      	orrs	r3, r2
 8016c8a:	b21b      	sxth	r3, r3
 8016c8c:	b29a      	uxth	r2, r3
 8016c8e:	683b      	ldr	r3, [r7, #0]
 8016c90:	809a      	strh	r2, [r3, #4]
        // Parse ChMaskCtrl and nbRep
        linkAdrParams->NbRep = payload[4];
 8016c92:	687b      	ldr	r3, [r7, #4]
 8016c94:	791a      	ldrb	r2, [r3, #4]
 8016c96:	683b      	ldr	r3, [r7, #0]
 8016c98:	701a      	strb	r2, [r3, #0]
        linkAdrParams->ChMaskCtrl = ( linkAdrParams->NbRep >> 4 ) & 0x07;
 8016c9a:	683b      	ldr	r3, [r7, #0]
 8016c9c:	781b      	ldrb	r3, [r3, #0]
 8016c9e:	091b      	lsrs	r3, r3, #4
 8016ca0:	b2db      	uxtb	r3, r3
 8016ca2:	f003 0307 	and.w	r3, r3, #7
 8016ca6:	b2da      	uxtb	r2, r3
 8016ca8:	683b      	ldr	r3, [r7, #0]
 8016caa:	70da      	strb	r2, [r3, #3]
        linkAdrParams->NbRep &= 0x0F;
 8016cac:	683b      	ldr	r3, [r7, #0]
 8016cae:	781b      	ldrb	r3, [r3, #0]
 8016cb0:	f003 030f 	and.w	r3, r3, #15
 8016cb4:	b2da      	uxtb	r2, r3
 8016cb6:	683b      	ldr	r3, [r7, #0]
 8016cb8:	701a      	strb	r2, [r3, #0]

        // LinkAdrReq has 4 bytes length + 1 byte CMD
        retIndex = 5;
 8016cba:	2305      	movs	r3, #5
 8016cbc:	73fb      	strb	r3, [r7, #15]
    }
    return retIndex;
 8016cbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8016cc0:	4618      	mov	r0, r3
 8016cc2:	3714      	adds	r7, #20
 8016cc4:	46bd      	mov	sp, r7
 8016cc6:	bc80      	pop	{r7}
 8016cc8:	4770      	bx	lr

08016cca <RegionCommonLinkAdrReqVerifyParams>:

uint8_t RegionCommonLinkAdrReqVerifyParams( RegionCommonLinkAdrReqVerifyParams_t* verifyParams, int8_t* dr, int8_t* txPow, uint8_t* nbRep )
{
 8016cca:	b5b0      	push	{r4, r5, r7, lr}
 8016ccc:	b088      	sub	sp, #32
 8016cce:	af02      	add	r7, sp, #8
 8016cd0:	60f8      	str	r0, [r7, #12]
 8016cd2:	60b9      	str	r1, [r7, #8]
 8016cd4:	607a      	str	r2, [r7, #4]
 8016cd6:	603b      	str	r3, [r7, #0]
    uint8_t status = verifyParams->Status;
 8016cd8:	68fb      	ldr	r3, [r7, #12]
 8016cda:	791b      	ldrb	r3, [r3, #4]
 8016cdc:	75fb      	strb	r3, [r7, #23]
    int8_t datarate = verifyParams->Datarate;
 8016cde:	68fb      	ldr	r3, [r7, #12]
 8016ce0:	799b      	ldrb	r3, [r3, #6]
 8016ce2:	75bb      	strb	r3, [r7, #22]
    int8_t txPower = verifyParams->TxPower;
 8016ce4:	68fb      	ldr	r3, [r7, #12]
 8016ce6:	79db      	ldrb	r3, [r3, #7]
 8016ce8:	757b      	strb	r3, [r7, #21]
    int8_t nbRepetitions = verifyParams->NbRep;
 8016cea:	68fb      	ldr	r3, [r7, #12]
 8016cec:	7a1b      	ldrb	r3, [r3, #8]
 8016cee:	753b      	strb	r3, [r7, #20]

    // Handle the case when ADR is off.
    if( verifyParams->AdrEnabled == false )
 8016cf0:	68fb      	ldr	r3, [r7, #12]
 8016cf2:	795b      	ldrb	r3, [r3, #5]
 8016cf4:	f083 0301 	eor.w	r3, r3, #1
 8016cf8:	b2db      	uxtb	r3, r3
 8016cfa:	2b00      	cmp	r3, #0
 8016cfc:	d008      	beq.n	8016d10 <RegionCommonLinkAdrReqVerifyParams+0x46>
    {
        // When ADR is off, we are allowed to change the channels mask
        nbRepetitions = verifyParams->CurrentNbRep;
 8016cfe:	68fb      	ldr	r3, [r7, #12]
 8016d00:	7adb      	ldrb	r3, [r3, #11]
 8016d02:	753b      	strb	r3, [r7, #20]
        datarate =  verifyParams->CurrentDatarate;
 8016d04:	68fb      	ldr	r3, [r7, #12]
 8016d06:	7a5b      	ldrb	r3, [r3, #9]
 8016d08:	75bb      	strb	r3, [r7, #22]
        txPower =  verifyParams->CurrentTxPower;
 8016d0a:	68fb      	ldr	r3, [r7, #12]
 8016d0c:	7a9b      	ldrb	r3, [r3, #10]
 8016d0e:	757b      	strb	r3, [r7, #21]
    }

    if( status != 0 )
 8016d10:	7dfb      	ldrb	r3, [r7, #23]
 8016d12:	2b00      	cmp	r3, #0
 8016d14:	d04a      	beq.n	8016dac <RegionCommonLinkAdrReqVerifyParams+0xe2>
    {
        // Verify datarate. The variable phyParam. Value contains the minimum allowed datarate.
        if( datarate == 0x0F )
 8016d16:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8016d1a:	2b0f      	cmp	r3, #15
 8016d1c:	d103      	bne.n	8016d26 <RegionCommonLinkAdrReqVerifyParams+0x5c>
        { // 0xF means that the device MUST ignore that field, and keep the current parameter value.
            datarate =  verifyParams->CurrentDatarate;
 8016d1e:	68fb      	ldr	r3, [r7, #12]
 8016d20:	7a5b      	ldrb	r3, [r3, #9]
 8016d22:	75bb      	strb	r3, [r7, #22]
 8016d24:	e01d      	b.n	8016d62 <RegionCommonLinkAdrReqVerifyParams+0x98>
        }
        else if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 8016d26:	68fb      	ldr	r3, [r7, #12]
 8016d28:	7b18      	ldrb	r0, [r3, #12]
 8016d2a:	68fb      	ldr	r3, [r7, #12]
 8016d2c:	6919      	ldr	r1, [r3, #16]
 8016d2e:	68fb      	ldr	r3, [r7, #12]
 8016d30:	f993 5014 	ldrsb.w	r5, [r3, #20]
 8016d34:	68fb      	ldr	r3, [r7, #12]
 8016d36:	f993 3015 	ldrsb.w	r3, [r3, #21]
 8016d3a:	68fa      	ldr	r2, [r7, #12]
 8016d3c:	6992      	ldr	r2, [r2, #24]
 8016d3e:	f997 4016 	ldrsb.w	r4, [r7, #22]
 8016d42:	9201      	str	r2, [sp, #4]
 8016d44:	9300      	str	r3, [sp, #0]
 8016d46:	462b      	mov	r3, r5
 8016d48:	4622      	mov	r2, r4
 8016d4a:	f7ff fd3a 	bl	80167c2 <RegionCommonChanVerifyDr>
 8016d4e:	4603      	mov	r3, r0
                                      verifyParams->MinDatarate, verifyParams->MaxDatarate, verifyParams->Channels  ) == false )
 8016d50:	f083 0301 	eor.w	r3, r3, #1
 8016d54:	b2db      	uxtb	r3, r3
        else if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 8016d56:	2b00      	cmp	r3, #0
 8016d58:	d003      	beq.n	8016d62 <RegionCommonLinkAdrReqVerifyParams+0x98>
        {
            status &= 0xFD; // Datarate KO
 8016d5a:	7dfb      	ldrb	r3, [r7, #23]
 8016d5c:	f023 0302 	bic.w	r3, r3, #2
 8016d60:	75fb      	strb	r3, [r7, #23]
        }

        // Verify tx power
        if( txPower == 0x0F )
 8016d62:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8016d66:	2b0f      	cmp	r3, #15
 8016d68:	d103      	bne.n	8016d72 <RegionCommonLinkAdrReqVerifyParams+0xa8>
        { // 0xF means that the device MUST ignore that field, and keep the current parameter value.
            txPower =  verifyParams->CurrentTxPower;
 8016d6a:	68fb      	ldr	r3, [r7, #12]
 8016d6c:	7a9b      	ldrb	r3, [r3, #10]
 8016d6e:	757b      	strb	r3, [r7, #21]
 8016d70:	e01c      	b.n	8016dac <RegionCommonLinkAdrReqVerifyParams+0xe2>
        }
        else if( RegionCommonValueInRange( txPower, verifyParams->MaxTxPower, verifyParams->MinTxPower ) == 0 )
 8016d72:	68fb      	ldr	r3, [r7, #12]
 8016d74:	f993 101d 	ldrsb.w	r1, [r3, #29]
 8016d78:	68fb      	ldr	r3, [r7, #12]
 8016d7a:	f993 201c 	ldrsb.w	r2, [r3, #28]
 8016d7e:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8016d82:	4618      	mov	r0, r3
 8016d84:	f7ff fd8f 	bl	80168a6 <RegionCommonValueInRange>
 8016d88:	4603      	mov	r3, r0
 8016d8a:	2b00      	cmp	r3, #0
 8016d8c:	d10e      	bne.n	8016dac <RegionCommonLinkAdrReqVerifyParams+0xe2>
        {
            // Verify if the maximum TX power is exceeded
            if( verifyParams->MaxTxPower > txPower )
 8016d8e:	68fb      	ldr	r3, [r7, #12]
 8016d90:	f993 301d 	ldrsb.w	r3, [r3, #29]
 8016d94:	f997 2015 	ldrsb.w	r2, [r7, #21]
 8016d98:	429a      	cmp	r2, r3
 8016d9a:	da03      	bge.n	8016da4 <RegionCommonLinkAdrReqVerifyParams+0xda>
            { // Apply maximum TX power. Accept TX power.
                txPower = verifyParams->MaxTxPower;
 8016d9c:	68fb      	ldr	r3, [r7, #12]
 8016d9e:	7f5b      	ldrb	r3, [r3, #29]
 8016da0:	757b      	strb	r3, [r7, #21]
 8016da2:	e003      	b.n	8016dac <RegionCommonLinkAdrReqVerifyParams+0xe2>
            }
            else
            {
                status &= 0xFB; // TxPower KO
 8016da4:	7dfb      	ldrb	r3, [r7, #23]
 8016da6:	f023 0304 	bic.w	r3, r3, #4
 8016daa:	75fb      	strb	r3, [r7, #23]
            }
        }
    }

    // If the status is ok, verify the NbRep
    if( status == 0x07 )
 8016dac:	7dfb      	ldrb	r3, [r7, #23]
 8016dae:	2b07      	cmp	r3, #7
 8016db0:	d105      	bne.n	8016dbe <RegionCommonLinkAdrReqVerifyParams+0xf4>
    {
        if( nbRepetitions == 0 )
 8016db2:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8016db6:	2b00      	cmp	r3, #0
 8016db8:	d101      	bne.n	8016dbe <RegionCommonLinkAdrReqVerifyParams+0xf4>
        { // Set nbRep to the default value of 1.
            nbRepetitions = 1;
 8016dba:	2301      	movs	r3, #1
 8016dbc:	753b      	strb	r3, [r7, #20]
        }
    }

    // Apply changes
    *dr = datarate;
 8016dbe:	68bb      	ldr	r3, [r7, #8]
 8016dc0:	7dba      	ldrb	r2, [r7, #22]
 8016dc2:	701a      	strb	r2, [r3, #0]
    *txPow = txPower;
 8016dc4:	687b      	ldr	r3, [r7, #4]
 8016dc6:	7d7a      	ldrb	r2, [r7, #21]
 8016dc8:	701a      	strb	r2, [r3, #0]
    *nbRep = nbRepetitions;
 8016dca:	7d3a      	ldrb	r2, [r7, #20]
 8016dcc:	683b      	ldr	r3, [r7, #0]
 8016dce:	701a      	strb	r2, [r3, #0]

    return status;
 8016dd0:	7dfb      	ldrb	r3, [r7, #23]
}
 8016dd2:	4618      	mov	r0, r3
 8016dd4:	3718      	adds	r7, #24
 8016dd6:	46bd      	mov	sp, r7
 8016dd8:	bdb0      	pop	{r4, r5, r7, pc}
	...

08016ddc <RegionCommonComputeSymbolTimeLoRa>:

uint32_t RegionCommonComputeSymbolTimeLoRa( uint8_t phyDr, uint32_t bandwidthInHz )
{
 8016ddc:	b480      	push	{r7}
 8016dde:	b083      	sub	sp, #12
 8016de0:	af00      	add	r7, sp, #0
 8016de2:	4603      	mov	r3, r0
 8016de4:	6039      	str	r1, [r7, #0]
 8016de6:	71fb      	strb	r3, [r7, #7]
    return ( 1 << phyDr ) * 1000000 / bandwidthInHz;
 8016de8:	79fb      	ldrb	r3, [r7, #7]
 8016dea:	4a06      	ldr	r2, [pc, #24]	@ (8016e04 <RegionCommonComputeSymbolTimeLoRa+0x28>)
 8016dec:	fa02 f303 	lsl.w	r3, r2, r3
 8016df0:	461a      	mov	r2, r3
 8016df2:	683b      	ldr	r3, [r7, #0]
 8016df4:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8016df8:	4618      	mov	r0, r3
 8016dfa:	370c      	adds	r7, #12
 8016dfc:	46bd      	mov	sp, r7
 8016dfe:	bc80      	pop	{r7}
 8016e00:	4770      	bx	lr
 8016e02:	bf00      	nop
 8016e04:	000f4240 	.word	0x000f4240

08016e08 <RegionCommonComputeSymbolTimeFsk>:

uint32_t RegionCommonComputeSymbolTimeFsk( uint8_t phyDrInKbps )
{
 8016e08:	b480      	push	{r7}
 8016e0a:	b083      	sub	sp, #12
 8016e0c:	af00      	add	r7, sp, #0
 8016e0e:	4603      	mov	r3, r0
 8016e10:	71fb      	strb	r3, [r7, #7]
    return 8000 / ( uint32_t )phyDrInKbps; // 1 symbol equals 1 byte
 8016e12:	79fb      	ldrb	r3, [r7, #7]
 8016e14:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8016e18:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8016e1c:	4618      	mov	r0, r3
 8016e1e:	370c      	adds	r7, #12
 8016e20:	46bd      	mov	sp, r7
 8016e22:	bc80      	pop	{r7}
 8016e24:	4770      	bx	lr
	...

08016e28 <RegionCommonComputeRxWindowParameters>:

void RegionCommonComputeRxWindowParameters( uint32_t tSymbolInUs, uint8_t minRxSymbols, uint32_t rxErrorInMs, uint32_t wakeUpTimeInMs, uint32_t* windowTimeoutInSymbols, int32_t* windowOffsetInMs )
{
 8016e28:	b480      	push	{r7}
 8016e2a:	b085      	sub	sp, #20
 8016e2c:	af00      	add	r7, sp, #0
 8016e2e:	60f8      	str	r0, [r7, #12]
 8016e30:	607a      	str	r2, [r7, #4]
 8016e32:	603b      	str	r3, [r7, #0]
 8016e34:	460b      	mov	r3, r1
 8016e36:	72fb      	strb	r3, [r7, #11]
    *windowTimeoutInSymbols = MAX( DIV_CEIL( ( ( 2 * minRxSymbols - 8 ) * tSymbolInUs + 2 * ( rxErrorInMs * 1000 ) ),  tSymbolInUs ), minRxSymbols ); // Computed number of symbols
 8016e38:	7afa      	ldrb	r2, [r7, #11]
 8016e3a:	7afb      	ldrb	r3, [r7, #11]
 8016e3c:	3b04      	subs	r3, #4
 8016e3e:	4619      	mov	r1, r3
 8016e40:	68fb      	ldr	r3, [r7, #12]
 8016e42:	fb03 f101 	mul.w	r1, r3, r1
 8016e46:	687b      	ldr	r3, [r7, #4]
 8016e48:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8016e4c:	fb00 f303 	mul.w	r3, r0, r3
 8016e50:	440b      	add	r3, r1
 8016e52:	005b      	lsls	r3, r3, #1
 8016e54:	2b00      	cmp	r3, #0
 8016e56:	d013      	beq.n	8016e80 <RegionCommonComputeRxWindowParameters+0x58>
 8016e58:	7afb      	ldrb	r3, [r7, #11]
 8016e5a:	3b04      	subs	r3, #4
 8016e5c:	4619      	mov	r1, r3
 8016e5e:	68fb      	ldr	r3, [r7, #12]
 8016e60:	fb03 f101 	mul.w	r1, r3, r1
 8016e64:	687b      	ldr	r3, [r7, #4]
 8016e66:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8016e6a:	fb00 f303 	mul.w	r3, r0, r3
 8016e6e:	440b      	add	r3, r1
 8016e70:	0059      	lsls	r1, r3, #1
 8016e72:	68fb      	ldr	r3, [r7, #12]
 8016e74:	440b      	add	r3, r1
 8016e76:	1e59      	subs	r1, r3, #1
 8016e78:	68fb      	ldr	r3, [r7, #12]
 8016e7a:	fbb1 f3f3 	udiv	r3, r1, r3
 8016e7e:	e00f      	b.n	8016ea0 <RegionCommonComputeRxWindowParameters+0x78>
 8016e80:	7afb      	ldrb	r3, [r7, #11]
 8016e82:	3b04      	subs	r3, #4
 8016e84:	4619      	mov	r1, r3
 8016e86:	68fb      	ldr	r3, [r7, #12]
 8016e88:	fb03 f101 	mul.w	r1, r3, r1
 8016e8c:	687b      	ldr	r3, [r7, #4]
 8016e8e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8016e92:	fb00 f303 	mul.w	r3, r0, r3
 8016e96:	440b      	add	r3, r1
 8016e98:	0059      	lsls	r1, r3, #1
 8016e9a:	68fb      	ldr	r3, [r7, #12]
 8016e9c:	fbb1 f3f3 	udiv	r3, r1, r3
 8016ea0:	429a      	cmp	r2, r3
 8016ea2:	bf38      	it	cc
 8016ea4:	461a      	movcc	r2, r3
 8016ea6:	69bb      	ldr	r3, [r7, #24]
 8016ea8:	601a      	str	r2, [r3, #0]
    *windowOffsetInMs = ( int32_t )DIV_CEIL( ( int32_t )( 4 * tSymbolInUs ) -
 8016eaa:	68fb      	ldr	r3, [r7, #12]
 8016eac:	009b      	lsls	r3, r3, #2
 8016eae:	4619      	mov	r1, r3
 8016eb0:	69bb      	ldr	r3, [r7, #24]
 8016eb2:	681b      	ldr	r3, [r3, #0]
 8016eb4:	68fa      	ldr	r2, [r7, #12]
 8016eb6:	fb02 f303 	mul.w	r3, r2, r3
 8016eba:	2b00      	cmp	r3, #0
 8016ebc:	d007      	beq.n	8016ece <RegionCommonComputeRxWindowParameters+0xa6>
 8016ebe:	69bb      	ldr	r3, [r7, #24]
 8016ec0:	681b      	ldr	r3, [r3, #0]
 8016ec2:	68fa      	ldr	r2, [r7, #12]
 8016ec4:	fb02 f303 	mul.w	r3, r2, r3
 8016ec8:	3301      	adds	r3, #1
 8016eca:	085b      	lsrs	r3, r3, #1
 8016ecc:	e005      	b.n	8016eda <RegionCommonComputeRxWindowParameters+0xb2>
 8016ece:	69bb      	ldr	r3, [r7, #24]
 8016ed0:	681b      	ldr	r3, [r3, #0]
 8016ed2:	68fa      	ldr	r2, [r7, #12]
 8016ed4:	fb02 f303 	mul.w	r3, r2, r3
 8016ed8:	085b      	lsrs	r3, r3, #1
 8016eda:	1acb      	subs	r3, r1, r3
 8016edc:	683a      	ldr	r2, [r7, #0]
 8016ede:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8016ee2:	fb01 f202 	mul.w	r2, r1, r2
 8016ee6:	1a9b      	subs	r3, r3, r2
 8016ee8:	2b00      	cmp	r3, #0
 8016eea:	dd27      	ble.n	8016f3c <RegionCommonComputeRxWindowParameters+0x114>
 8016eec:	68fb      	ldr	r3, [r7, #12]
 8016eee:	009b      	lsls	r3, r3, #2
 8016ef0:	4619      	mov	r1, r3
 8016ef2:	69bb      	ldr	r3, [r7, #24]
 8016ef4:	681b      	ldr	r3, [r3, #0]
 8016ef6:	68fa      	ldr	r2, [r7, #12]
 8016ef8:	fb02 f303 	mul.w	r3, r2, r3
 8016efc:	2b00      	cmp	r3, #0
 8016efe:	d007      	beq.n	8016f10 <RegionCommonComputeRxWindowParameters+0xe8>
 8016f00:	69bb      	ldr	r3, [r7, #24]
 8016f02:	681b      	ldr	r3, [r3, #0]
 8016f04:	68fa      	ldr	r2, [r7, #12]
 8016f06:	fb02 f303 	mul.w	r3, r2, r3
 8016f0a:	3301      	adds	r3, #1
 8016f0c:	085b      	lsrs	r3, r3, #1
 8016f0e:	e005      	b.n	8016f1c <RegionCommonComputeRxWindowParameters+0xf4>
 8016f10:	69bb      	ldr	r3, [r7, #24]
 8016f12:	681b      	ldr	r3, [r3, #0]
 8016f14:	68fa      	ldr	r2, [r7, #12]
 8016f16:	fb02 f303 	mul.w	r3, r2, r3
 8016f1a:	085b      	lsrs	r3, r3, #1
 8016f1c:	1acb      	subs	r3, r1, r3
 8016f1e:	683a      	ldr	r2, [r7, #0]
 8016f20:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8016f24:	fb01 f202 	mul.w	r2, r1, r2
 8016f28:	1a9b      	subs	r3, r3, r2
 8016f2a:	f203 33e7 	addw	r3, r3, #999	@ 0x3e7
 8016f2e:	4a19      	ldr	r2, [pc, #100]	@ (8016f94 <RegionCommonComputeRxWindowParameters+0x16c>)
 8016f30:	fb82 1203 	smull	r1, r2, r2, r3
 8016f34:	1192      	asrs	r2, r2, #6
 8016f36:	17db      	asrs	r3, r3, #31
 8016f38:	1ad3      	subs	r3, r2, r3
 8016f3a:	e024      	b.n	8016f86 <RegionCommonComputeRxWindowParameters+0x15e>
 8016f3c:	68fb      	ldr	r3, [r7, #12]
 8016f3e:	009b      	lsls	r3, r3, #2
 8016f40:	4619      	mov	r1, r3
 8016f42:	69bb      	ldr	r3, [r7, #24]
 8016f44:	681b      	ldr	r3, [r3, #0]
 8016f46:	68fa      	ldr	r2, [r7, #12]
 8016f48:	fb02 f303 	mul.w	r3, r2, r3
 8016f4c:	2b00      	cmp	r3, #0
 8016f4e:	d007      	beq.n	8016f60 <RegionCommonComputeRxWindowParameters+0x138>
 8016f50:	69bb      	ldr	r3, [r7, #24]
 8016f52:	681b      	ldr	r3, [r3, #0]
 8016f54:	68fa      	ldr	r2, [r7, #12]
 8016f56:	fb02 f303 	mul.w	r3, r2, r3
 8016f5a:	3301      	adds	r3, #1
 8016f5c:	085b      	lsrs	r3, r3, #1
 8016f5e:	e005      	b.n	8016f6c <RegionCommonComputeRxWindowParameters+0x144>
 8016f60:	69bb      	ldr	r3, [r7, #24]
 8016f62:	681b      	ldr	r3, [r3, #0]
 8016f64:	68fa      	ldr	r2, [r7, #12]
 8016f66:	fb02 f303 	mul.w	r3, r2, r3
 8016f6a:	085b      	lsrs	r3, r3, #1
 8016f6c:	1acb      	subs	r3, r1, r3
 8016f6e:	683a      	ldr	r2, [r7, #0]
 8016f70:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8016f74:	fb01 f202 	mul.w	r2, r1, r2
 8016f78:	1a9b      	subs	r3, r3, r2
 8016f7a:	4a06      	ldr	r2, [pc, #24]	@ (8016f94 <RegionCommonComputeRxWindowParameters+0x16c>)
 8016f7c:	fb82 1203 	smull	r1, r2, r2, r3
 8016f80:	1192      	asrs	r2, r2, #6
 8016f82:	17db      	asrs	r3, r3, #31
 8016f84:	1ad3      	subs	r3, r2, r3
 8016f86:	69fa      	ldr	r2, [r7, #28]
 8016f88:	6013      	str	r3, [r2, #0]
                                               ( int32_t )DIV_CEIL( ( *windowTimeoutInSymbols * tSymbolInUs ), 2 ) -
                                               ( int32_t )( wakeUpTimeInMs * 1000 ), 1000 );
}
 8016f8a:	bf00      	nop
 8016f8c:	3714      	adds	r7, #20
 8016f8e:	46bd      	mov	sp, r7
 8016f90:	bc80      	pop	{r7}
 8016f92:	4770      	bx	lr
 8016f94:	10624dd3 	.word	0x10624dd3

08016f98 <RegionCommonComputeTxPower>:

int8_t RegionCommonComputeTxPower( int8_t txPowerIndex, float maxEirp, float antennaGain )
{
 8016f98:	b580      	push	{r7, lr}
 8016f9a:	b086      	sub	sp, #24
 8016f9c:	af00      	add	r7, sp, #0
 8016f9e:	4603      	mov	r3, r0
 8016fa0:	60b9      	str	r1, [r7, #8]
 8016fa2:	607a      	str	r2, [r7, #4]
 8016fa4:	73fb      	strb	r3, [r7, #15]
    int8_t phyTxPower = 0;
 8016fa6:	2300      	movs	r3, #0
 8016fa8:	75fb      	strb	r3, [r7, #23]

    phyTxPower = ( int8_t )floor( ( maxEirp - ( txPowerIndex * 2U ) ) - antennaGain );
 8016faa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016fae:	005b      	lsls	r3, r3, #1
 8016fb0:	4618      	mov	r0, r3
 8016fb2:	f7e9 fe87 	bl	8000cc4 <__aeabi_ui2f>
 8016fb6:	4603      	mov	r3, r0
 8016fb8:	4619      	mov	r1, r3
 8016fba:	68b8      	ldr	r0, [r7, #8]
 8016fbc:	f7e9 fdd0 	bl	8000b60 <__aeabi_fsub>
 8016fc0:	4603      	mov	r3, r0
 8016fc2:	6879      	ldr	r1, [r7, #4]
 8016fc4:	4618      	mov	r0, r3
 8016fc6:	f7e9 fdcb 	bl	8000b60 <__aeabi_fsub>
 8016fca:	4603      	mov	r3, r0
 8016fcc:	4618      	mov	r0, r3
 8016fce:	f7e9 fa93 	bl	80004f8 <__aeabi_f2d>
 8016fd2:	4602      	mov	r2, r0
 8016fd4:	460b      	mov	r3, r1
 8016fd6:	4610      	mov	r0, r2
 8016fd8:	4619      	mov	r1, r3
 8016fda:	f007 fc75 	bl	801e8c8 <floor>
 8016fde:	4602      	mov	r2, r0
 8016fe0:	460b      	mov	r3, r1
 8016fe2:	4610      	mov	r0, r2
 8016fe4:	4619      	mov	r1, r3
 8016fe6:	f7e9 fd8f 	bl	8000b08 <__aeabi_d2iz>
 8016fea:	4603      	mov	r3, r0
 8016fec:	75fb      	strb	r3, [r7, #23]

    return phyTxPower;
 8016fee:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8016ff2:	4618      	mov	r0, r3
 8016ff4:	3718      	adds	r7, #24
 8016ff6:	46bd      	mov	sp, r7
 8016ff8:	bd80      	pop	{r7, pc}

08016ffa <RegionCommonCountNbOfEnabledChannels>:
    /* ST_WORKAROUND_END */
}

void RegionCommonCountNbOfEnabledChannels( RegionCommonCountNbOfEnabledChannelsParams_t* countNbOfEnabledChannelsParams,
                                           uint8_t* enabledChannels, uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels )
{
 8016ffa:	b590      	push	{r4, r7, lr}
 8016ffc:	b087      	sub	sp, #28
 8016ffe:	af00      	add	r7, sp, #0
 8017000:	60f8      	str	r0, [r7, #12]
 8017002:	60b9      	str	r1, [r7, #8]
 8017004:	607a      	str	r2, [r7, #4]
 8017006:	603b      	str	r3, [r7, #0]
    uint8_t nbChannelCount = 0;
 8017008:	2300      	movs	r3, #0
 801700a:	75fb      	strb	r3, [r7, #23]
    uint8_t nbRestrictedChannelsCount = 0;
 801700c:	2300      	movs	r3, #0
 801700e:	75bb      	strb	r3, [r7, #22]

    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 8017010:	2300      	movs	r3, #0
 8017012:	757b      	strb	r3, [r7, #21]
 8017014:	2300      	movs	r3, #0
 8017016:	753b      	strb	r3, [r7, #20]
 8017018:	e09c      	b.n	8017154 <RegionCommonCountNbOfEnabledChannels+0x15a>
    {
        for( uint8_t j = 0; j < 16; j++ )
 801701a:	2300      	movs	r3, #0
 801701c:	74fb      	strb	r3, [r7, #19]
 801701e:	e08f      	b.n	8017140 <RegionCommonCountNbOfEnabledChannels+0x146>
        {
            if( ( countNbOfEnabledChannelsParams->ChannelsMask[k] & ( 1 << j ) ) != 0 )
 8017020:	68fb      	ldr	r3, [r7, #12]
 8017022:	685a      	ldr	r2, [r3, #4]
 8017024:	7d3b      	ldrb	r3, [r7, #20]
 8017026:	005b      	lsls	r3, r3, #1
 8017028:	4413      	add	r3, r2
 801702a:	881b      	ldrh	r3, [r3, #0]
 801702c:	461a      	mov	r2, r3
 801702e:	7cfb      	ldrb	r3, [r7, #19]
 8017030:	fa42 f303 	asr.w	r3, r2, r3
 8017034:	f003 0301 	and.w	r3, r3, #1
 8017038:	2b00      	cmp	r3, #0
 801703a:	d07e      	beq.n	801713a <RegionCommonCountNbOfEnabledChannels+0x140>
            {
                if( countNbOfEnabledChannelsParams->Channels[i + j].Frequency == 0 )
 801703c:	68fb      	ldr	r3, [r7, #12]
 801703e:	689a      	ldr	r2, [r3, #8]
 8017040:	7d79      	ldrb	r1, [r7, #21]
 8017042:	7cfb      	ldrb	r3, [r7, #19]
 8017044:	440b      	add	r3, r1
 8017046:	4619      	mov	r1, r3
 8017048:	460b      	mov	r3, r1
 801704a:	005b      	lsls	r3, r3, #1
 801704c:	440b      	add	r3, r1
 801704e:	009b      	lsls	r3, r3, #2
 8017050:	4413      	add	r3, r2
 8017052:	681b      	ldr	r3, [r3, #0]
 8017054:	2b00      	cmp	r3, #0
 8017056:	d06b      	beq.n	8017130 <RegionCommonCountNbOfEnabledChannels+0x136>
                { // Check if the channel is enabled
                    continue;
                }
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 8017058:	68fb      	ldr	r3, [r7, #12]
 801705a:	781b      	ldrb	r3, [r3, #0]
 801705c:	f083 0301 	eor.w	r3, r3, #1
 8017060:	b2db      	uxtb	r3, r3
 8017062:	2b00      	cmp	r3, #0
 8017064:	d011      	beq.n	801708a <RegionCommonCountNbOfEnabledChannels+0x90>
                    ( countNbOfEnabledChannelsParams->JoinChannels != NULL ) )
 8017066:	68fb      	ldr	r3, [r7, #12]
 8017068:	695b      	ldr	r3, [r3, #20]
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 801706a:	2b00      	cmp	r3, #0
 801706c:	d00d      	beq.n	801708a <RegionCommonCountNbOfEnabledChannels+0x90>
                {
                    if( ( countNbOfEnabledChannelsParams->JoinChannels[k] & ( 1 << j ) ) == 0 )
 801706e:	68fb      	ldr	r3, [r7, #12]
 8017070:	695a      	ldr	r2, [r3, #20]
 8017072:	7d3b      	ldrb	r3, [r7, #20]
 8017074:	005b      	lsls	r3, r3, #1
 8017076:	4413      	add	r3, r2
 8017078:	881b      	ldrh	r3, [r3, #0]
 801707a:	461a      	mov	r2, r3
 801707c:	7cfb      	ldrb	r3, [r7, #19]
 801707e:	fa42 f303 	asr.w	r3, r2, r3
 8017082:	f003 0301 	and.w	r3, r3, #1
 8017086:	2b00      	cmp	r3, #0
 8017088:	d054      	beq.n	8017134 <RegionCommonCountNbOfEnabledChannels+0x13a>
                    {
                        continue;
                    }
                }
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 801708a:	68fb      	ldr	r3, [r7, #12]
 801708c:	785b      	ldrb	r3, [r3, #1]
 801708e:	b258      	sxtb	r0, r3
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Min,
 8017090:	68fb      	ldr	r3, [r7, #12]
 8017092:	689a      	ldr	r2, [r3, #8]
 8017094:	7d79      	ldrb	r1, [r7, #21]
 8017096:	7cfb      	ldrb	r3, [r7, #19]
 8017098:	440b      	add	r3, r1
 801709a:	4619      	mov	r1, r3
 801709c:	460b      	mov	r3, r1
 801709e:	005b      	lsls	r3, r3, #1
 80170a0:	440b      	add	r3, r1
 80170a2:	009b      	lsls	r3, r3, #2
 80170a4:	4413      	add	r3, r2
 80170a6:	7a1b      	ldrb	r3, [r3, #8]
 80170a8:	f343 0303 	sbfx	r3, r3, #0, #4
 80170ac:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 80170ae:	461c      	mov	r4, r3
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Max ) == false )
 80170b0:	68fb      	ldr	r3, [r7, #12]
 80170b2:	689a      	ldr	r2, [r3, #8]
 80170b4:	7d79      	ldrb	r1, [r7, #21]
 80170b6:	7cfb      	ldrb	r3, [r7, #19]
 80170b8:	440b      	add	r3, r1
 80170ba:	4619      	mov	r1, r3
 80170bc:	460b      	mov	r3, r1
 80170be:	005b      	lsls	r3, r3, #1
 80170c0:	440b      	add	r3, r1
 80170c2:	009b      	lsls	r3, r3, #2
 80170c4:	4413      	add	r3, r2
 80170c6:	7a1b      	ldrb	r3, [r3, #8]
 80170c8:	f343 1303 	sbfx	r3, r3, #4, #4
 80170cc:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 80170ce:	461a      	mov	r2, r3
 80170d0:	4621      	mov	r1, r4
 80170d2:	f7ff fbe8 	bl	80168a6 <RegionCommonValueInRange>
 80170d6:	4603      	mov	r3, r0
 80170d8:	2b00      	cmp	r3, #0
 80170da:	d02d      	beq.n	8017138 <RegionCommonCountNbOfEnabledChannels+0x13e>
                { // Check if the current channel selection supports the given datarate
                    continue;
                }
                if( countNbOfEnabledChannelsParams->Bands[countNbOfEnabledChannelsParams->Channels[i + j].Band].ReadyForTransmission == false )
 80170dc:	68fb      	ldr	r3, [r7, #12]
 80170de:	68da      	ldr	r2, [r3, #12]
 80170e0:	68fb      	ldr	r3, [r7, #12]
 80170e2:	6899      	ldr	r1, [r3, #8]
 80170e4:	7d78      	ldrb	r0, [r7, #21]
 80170e6:	7cfb      	ldrb	r3, [r7, #19]
 80170e8:	4403      	add	r3, r0
 80170ea:	4618      	mov	r0, r3
 80170ec:	4603      	mov	r3, r0
 80170ee:	005b      	lsls	r3, r3, #1
 80170f0:	4403      	add	r3, r0
 80170f2:	009b      	lsls	r3, r3, #2
 80170f4:	440b      	add	r3, r1
 80170f6:	7a5b      	ldrb	r3, [r3, #9]
 80170f8:	4619      	mov	r1, r3
 80170fa:	460b      	mov	r3, r1
 80170fc:	005b      	lsls	r3, r3, #1
 80170fe:	440b      	add	r3, r1
 8017100:	00db      	lsls	r3, r3, #3
 8017102:	4413      	add	r3, r2
 8017104:	7d1b      	ldrb	r3, [r3, #20]
 8017106:	f083 0301 	eor.w	r3, r3, #1
 801710a:	b2db      	uxtb	r3, r3
 801710c:	2b00      	cmp	r3, #0
 801710e:	d003      	beq.n	8017118 <RegionCommonCountNbOfEnabledChannels+0x11e>
                { // Check if the band is available for transmission
                    nbRestrictedChannelsCount++;
 8017110:	7dbb      	ldrb	r3, [r7, #22]
 8017112:	3301      	adds	r3, #1
 8017114:	75bb      	strb	r3, [r7, #22]
                    continue;
 8017116:	e010      	b.n	801713a <RegionCommonCountNbOfEnabledChannels+0x140>
                }
                enabledChannels[nbChannelCount++] = i + j;
 8017118:	7dfb      	ldrb	r3, [r7, #23]
 801711a:	1c5a      	adds	r2, r3, #1
 801711c:	75fa      	strb	r2, [r7, #23]
 801711e:	461a      	mov	r2, r3
 8017120:	68bb      	ldr	r3, [r7, #8]
 8017122:	4413      	add	r3, r2
 8017124:	7d79      	ldrb	r1, [r7, #21]
 8017126:	7cfa      	ldrb	r2, [r7, #19]
 8017128:	440a      	add	r2, r1
 801712a:	b2d2      	uxtb	r2, r2
 801712c:	701a      	strb	r2, [r3, #0]
 801712e:	e004      	b.n	801713a <RegionCommonCountNbOfEnabledChannels+0x140>
                    continue;
 8017130:	bf00      	nop
 8017132:	e002      	b.n	801713a <RegionCommonCountNbOfEnabledChannels+0x140>
                        continue;
 8017134:	bf00      	nop
 8017136:	e000      	b.n	801713a <RegionCommonCountNbOfEnabledChannels+0x140>
                    continue;
 8017138:	bf00      	nop
        for( uint8_t j = 0; j < 16; j++ )
 801713a:	7cfb      	ldrb	r3, [r7, #19]
 801713c:	3301      	adds	r3, #1
 801713e:	74fb      	strb	r3, [r7, #19]
 8017140:	7cfb      	ldrb	r3, [r7, #19]
 8017142:	2b0f      	cmp	r3, #15
 8017144:	f67f af6c 	bls.w	8017020 <RegionCommonCountNbOfEnabledChannels+0x26>
    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 8017148:	7d7b      	ldrb	r3, [r7, #21]
 801714a:	3310      	adds	r3, #16
 801714c:	757b      	strb	r3, [r7, #21]
 801714e:	7d3b      	ldrb	r3, [r7, #20]
 8017150:	3301      	adds	r3, #1
 8017152:	753b      	strb	r3, [r7, #20]
 8017154:	7d7b      	ldrb	r3, [r7, #21]
 8017156:	b29a      	uxth	r2, r3
 8017158:	68fb      	ldr	r3, [r7, #12]
 801715a:	8a1b      	ldrh	r3, [r3, #16]
 801715c:	429a      	cmp	r2, r3
 801715e:	f4ff af5c 	bcc.w	801701a <RegionCommonCountNbOfEnabledChannels+0x20>
            }
        }
    }
    *nbEnabledChannels = nbChannelCount;
 8017162:	687b      	ldr	r3, [r7, #4]
 8017164:	7dfa      	ldrb	r2, [r7, #23]
 8017166:	701a      	strb	r2, [r3, #0]
    *nbRestrictedChannels = nbRestrictedChannelsCount;
 8017168:	683b      	ldr	r3, [r7, #0]
 801716a:	7dba      	ldrb	r2, [r7, #22]
 801716c:	701a      	strb	r2, [r3, #0]
}
 801716e:	bf00      	nop
 8017170:	371c      	adds	r7, #28
 8017172:	46bd      	mov	sp, r7
 8017174:	bd90      	pop	{r4, r7, pc}

08017176 <RegionCommonIdentifyChannels>:

LoRaMacStatus_t RegionCommonIdentifyChannels( RegionCommonIdentifyChannelsParam_t* identifyChannelsParam,
                                              TimerTime_t* aggregatedTimeOff, uint8_t* enabledChannels,
                                              uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels,
                                              TimerTime_t* nextTxDelay )
{
 8017176:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017178:	b08b      	sub	sp, #44	@ 0x2c
 801717a:	af04      	add	r7, sp, #16
 801717c:	60f8      	str	r0, [r7, #12]
 801717e:	60b9      	str	r1, [r7, #8]
 8017180:	607a      	str	r2, [r7, #4]
 8017182:	603b      	str	r3, [r7, #0]
    TimerTime_t elapsed = TimerGetElapsedTime( identifyChannelsParam->LastAggrTx );
 8017184:	68fb      	ldr	r3, [r7, #12]
 8017186:	685b      	ldr	r3, [r3, #4]
 8017188:	4618      	mov	r0, r3
 801718a:	f004 fbc9 	bl	801b920 <UTIL_TIMER_GetElapsedTime>
 801718e:	6178      	str	r0, [r7, #20]
    *nextTxDelay = identifyChannelsParam->AggrTimeOff - elapsed;
 8017190:	68fb      	ldr	r3, [r7, #12]
 8017192:	681a      	ldr	r2, [r3, #0]
 8017194:	697b      	ldr	r3, [r7, #20]
 8017196:	1ad2      	subs	r2, r2, r3
 8017198:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801719a:	601a      	str	r2, [r3, #0]
    *nbRestrictedChannels = 1;
 801719c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801719e:	2201      	movs	r2, #1
 80171a0:	701a      	strb	r2, [r3, #0]
    *nbEnabledChannels = 0;
 80171a2:	683b      	ldr	r3, [r7, #0]
 80171a4:	2200      	movs	r2, #0
 80171a6:	701a      	strb	r2, [r3, #0]

    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 80171a8:	68fb      	ldr	r3, [r7, #12]
 80171aa:	685b      	ldr	r3, [r3, #4]
 80171ac:	2b00      	cmp	r3, #0
 80171ae:	d004      	beq.n	80171ba <RegionCommonIdentifyChannels+0x44>
        ( identifyChannelsParam->AggrTimeOff <= elapsed ) )
 80171b0:	68fb      	ldr	r3, [r7, #12]
 80171b2:	681b      	ldr	r3, [r3, #0]
    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 80171b4:	697a      	ldr	r2, [r7, #20]
 80171b6:	429a      	cmp	r2, r3
 80171b8:	d32b      	bcc.n	8017212 <RegionCommonIdentifyChannels+0x9c>
    {
        // Reset Aggregated time off
        *aggregatedTimeOff = 0;
 80171ba:	68bb      	ldr	r3, [r7, #8]
 80171bc:	2200      	movs	r2, #0
 80171be:	601a      	str	r2, [r3, #0]

        // Update bands Time OFF
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 80171c0:	68fb      	ldr	r3, [r7, #12]
 80171c2:	69db      	ldr	r3, [r3, #28]
 80171c4:	781c      	ldrb	r4, [r3, #0]
                                                      identifyChannelsParam->CountNbOfEnabledChannelsParam->Bands,
 80171c6:	68fb      	ldr	r3, [r7, #12]
 80171c8:	69db      	ldr	r3, [r3, #28]
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 80171ca:	68dd      	ldr	r5, [r3, #12]
 80171cc:	68fb      	ldr	r3, [r7, #12]
 80171ce:	7a5e      	ldrb	r6, [r3, #9]
 80171d0:	68fb      	ldr	r3, [r7, #12]
 80171d2:	f893 c008 	ldrb.w	ip, [r3, #8]
 80171d6:	68fb      	ldr	r3, [r7, #12]
 80171d8:	7d1b      	ldrb	r3, [r3, #20]
 80171da:	68fa      	ldr	r2, [r7, #12]
 80171dc:	6992      	ldr	r2, [r2, #24]
 80171de:	9203      	str	r2, [sp, #12]
 80171e0:	68fa      	ldr	r2, [r7, #12]
 80171e2:	f10d 0e04 	add.w	lr, sp, #4
 80171e6:	320c      	adds	r2, #12
 80171e8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80171ec:	e88e 0003 	stmia.w	lr, {r0, r1}
 80171f0:	9300      	str	r3, [sp, #0]
 80171f2:	4663      	mov	r3, ip
 80171f4:	4632      	mov	r2, r6
 80171f6:	4629      	mov	r1, r5
 80171f8:	4620      	mov	r0, r4
 80171fa:	f7ff fc25 	bl	8016a48 <RegionCommonUpdateBandTimeOff>
 80171fe:	4602      	mov	r2, r0
 8017200:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017202:	601a      	str	r2, [r3, #0]
                                                      identifyChannelsParam->DutyCycleEnabled,
                                                      identifyChannelsParam->LastTxIsJoinRequest,
                                                      identifyChannelsParam->ElapsedTimeSinceStartUp,
                                                      identifyChannelsParam->ExpectedTimeOnAir );

        RegionCommonCountNbOfEnabledChannels( identifyChannelsParam->CountNbOfEnabledChannelsParam, enabledChannels,
 8017204:	68fb      	ldr	r3, [r7, #12]
 8017206:	69d8      	ldr	r0, [r3, #28]
 8017208:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801720a:	683a      	ldr	r2, [r7, #0]
 801720c:	6879      	ldr	r1, [r7, #4]
 801720e:	f7ff fef4 	bl	8016ffa <RegionCommonCountNbOfEnabledChannels>
                                              nbEnabledChannels, nbRestrictedChannels );
    }

    if( *nbEnabledChannels > 0 )
 8017212:	683b      	ldr	r3, [r7, #0]
 8017214:	781b      	ldrb	r3, [r3, #0]
 8017216:	2b00      	cmp	r3, #0
 8017218:	d004      	beq.n	8017224 <RegionCommonIdentifyChannels+0xae>
    {
        *nextTxDelay = 0;
 801721a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801721c:	2200      	movs	r2, #0
 801721e:	601a      	str	r2, [r3, #0]
        return LORAMAC_STATUS_OK;
 8017220:	2300      	movs	r3, #0
 8017222:	e006      	b.n	8017232 <RegionCommonIdentifyChannels+0xbc>
    }
    else if( *nbRestrictedChannels > 0 )
 8017224:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017226:	781b      	ldrb	r3, [r3, #0]
 8017228:	2b00      	cmp	r3, #0
 801722a:	d001      	beq.n	8017230 <RegionCommonIdentifyChannels+0xba>
    {
        return LORAMAC_STATUS_DUTYCYCLE_RESTRICTED;
 801722c:	230b      	movs	r3, #11
 801722e:	e000      	b.n	8017232 <RegionCommonIdentifyChannels+0xbc>
    }
    else
    {
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
 8017230:	230c      	movs	r3, #12
    }
}
 8017232:	4618      	mov	r0, r3
 8017234:	371c      	adds	r7, #28
 8017236:	46bd      	mov	sp, r7
 8017238:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801723a <RegionCommonGetNextLowerTxDr>:

int8_t RegionCommonGetNextLowerTxDr( RegionCommonGetNextLowerTxDrParams_t *params )
{
 801723a:	b5b0      	push	{r4, r5, r7, lr}
 801723c:	b086      	sub	sp, #24
 801723e:	af02      	add	r7, sp, #8
 8017240:	6078      	str	r0, [r7, #4]
    int8_t drLocal = params->CurrentDr;
 8017242:	687b      	ldr	r3, [r7, #4]
 8017244:	781b      	ldrb	r3, [r3, #0]
 8017246:	73fb      	strb	r3, [r7, #15]

    if( params->CurrentDr == params->MinDr )
 8017248:	687b      	ldr	r3, [r7, #4]
 801724a:	f993 2000 	ldrsb.w	r2, [r3]
 801724e:	687b      	ldr	r3, [r7, #4]
 8017250:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8017254:	429a      	cmp	r2, r3
 8017256:	d103      	bne.n	8017260 <RegionCommonGetNextLowerTxDr+0x26>
    {
        return params->MinDr;
 8017258:	687b      	ldr	r3, [r7, #4]
 801725a:	f993 3002 	ldrsb.w	r3, [r3, #2]
 801725e:	e026      	b.n	80172ae <RegionCommonGetNextLowerTxDr+0x74>
    }
    else
    {
        do
        {
            drLocal = ( drLocal - 1 );
 8017260:	7bfb      	ldrb	r3, [r7, #15]
 8017262:	3b01      	subs	r3, #1
 8017264:	b2db      	uxtb	r3, r3
 8017266:	73fb      	strb	r3, [r7, #15]
        } while( ( drLocal != params->MinDr ) &&
 8017268:	687b      	ldr	r3, [r7, #4]
 801726a:	f993 3002 	ldrsb.w	r3, [r3, #2]
 801726e:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8017272:	429a      	cmp	r2, r3
 8017274:	d019      	beq.n	80172aa <RegionCommonGetNextLowerTxDr+0x70>
                 ( RegionCommonChanVerifyDr( params->NbChannels, params->ChannelsMask, drLocal, params->MinDr, params->MaxDr, params->Channels  ) == false ) );
 8017276:	687b      	ldr	r3, [r7, #4]
 8017278:	78d8      	ldrb	r0, [r3, #3]
 801727a:	687b      	ldr	r3, [r7, #4]
 801727c:	6859      	ldr	r1, [r3, #4]
 801727e:	687b      	ldr	r3, [r7, #4]
 8017280:	f993 5002 	ldrsb.w	r5, [r3, #2]
 8017284:	687b      	ldr	r3, [r7, #4]
 8017286:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801728a:	687a      	ldr	r2, [r7, #4]
 801728c:	6892      	ldr	r2, [r2, #8]
 801728e:	f997 400f 	ldrsb.w	r4, [r7, #15]
 8017292:	9201      	str	r2, [sp, #4]
 8017294:	9300      	str	r3, [sp, #0]
 8017296:	462b      	mov	r3, r5
 8017298:	4622      	mov	r2, r4
 801729a:	f7ff fa92 	bl	80167c2 <RegionCommonChanVerifyDr>
 801729e:	4603      	mov	r3, r0
 80172a0:	f083 0301 	eor.w	r3, r3, #1
 80172a4:	b2db      	uxtb	r3, r3
        } while( ( drLocal != params->MinDr ) &&
 80172a6:	2b00      	cmp	r3, #0
 80172a8:	d1da      	bne.n	8017260 <RegionCommonGetNextLowerTxDr+0x26>

        return drLocal;
 80172aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
    }
}
 80172ae:	4618      	mov	r0, r3
 80172b0:	3710      	adds	r7, #16
 80172b2:	46bd      	mov	sp, r7
 80172b4:	bdb0      	pop	{r4, r5, r7, pc}

080172b6 <RegionCommonLimitTxPower>:

int8_t RegionCommonLimitTxPower( int8_t txPower, int8_t maxBandTxPower )
{
 80172b6:	b480      	push	{r7}
 80172b8:	b083      	sub	sp, #12
 80172ba:	af00      	add	r7, sp, #0
 80172bc:	4603      	mov	r3, r0
 80172be:	460a      	mov	r2, r1
 80172c0:	71fb      	strb	r3, [r7, #7]
 80172c2:	4613      	mov	r3, r2
 80172c4:	71bb      	strb	r3, [r7, #6]
    // Limit tx power to the band max
    return MAX( txPower, maxBandTxPower );
 80172c6:	f997 2006 	ldrsb.w	r2, [r7, #6]
 80172ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80172ce:	4293      	cmp	r3, r2
 80172d0:	bfb8      	it	lt
 80172d2:	4613      	movlt	r3, r2
 80172d4:	b25b      	sxtb	r3, r3
}
 80172d6:	4618      	mov	r0, r3
 80172d8:	370c      	adds	r7, #12
 80172da:	46bd      	mov	sp, r7
 80172dc:	bc80      	pop	{r7}
 80172de:	4770      	bx	lr

080172e0 <RegionCommonGetBandwidth>:

uint32_t RegionCommonGetBandwidth( uint32_t drIndex, const uint32_t* bandwidths )
{
 80172e0:	b480      	push	{r7}
 80172e2:	b083      	sub	sp, #12
 80172e4:	af00      	add	r7, sp, #0
 80172e6:	6078      	str	r0, [r7, #4]
 80172e8:	6039      	str	r1, [r7, #0]
    switch( bandwidths[drIndex] )
 80172ea:	687b      	ldr	r3, [r7, #4]
 80172ec:	009b      	lsls	r3, r3, #2
 80172ee:	683a      	ldr	r2, [r7, #0]
 80172f0:	4413      	add	r3, r2
 80172f2:	681b      	ldr	r3, [r3, #0]
 80172f4:	4a07      	ldr	r2, [pc, #28]	@ (8017314 <RegionCommonGetBandwidth+0x34>)
 80172f6:	4293      	cmp	r3, r2
 80172f8:	d004      	beq.n	8017304 <RegionCommonGetBandwidth+0x24>
 80172fa:	4a07      	ldr	r2, [pc, #28]	@ (8017318 <RegionCommonGetBandwidth+0x38>)
 80172fc:	4293      	cmp	r3, r2
 80172fe:	d003      	beq.n	8017308 <RegionCommonGetBandwidth+0x28>
    {
        default:
        case 125000:
            return 0;
 8017300:	2300      	movs	r3, #0
 8017302:	e002      	b.n	801730a <RegionCommonGetBandwidth+0x2a>
        case 250000:
            return 1;
 8017304:	2301      	movs	r3, #1
 8017306:	e000      	b.n	801730a <RegionCommonGetBandwidth+0x2a>
        case 500000:
            return 2;
 8017308:	2302      	movs	r3, #2
    }
}
 801730a:	4618      	mov	r0, r3
 801730c:	370c      	adds	r7, #12
 801730e:	46bd      	mov	sp, r7
 8017310:	bc80      	pop	{r7}
 8017312:	4770      	bx	lr
 8017314:	0003d090 	.word	0x0003d090
 8017318:	0007a120 	.word	0x0007a120

0801731c <RegionCommonRxConfigPrint>:

/* ST_WORKAROUND_BEGIN: Print Tx/Rx config */
void RegionCommonRxConfigPrint(LoRaMacRxSlot_t rxSlot, uint32_t frequency, int8_t dr)
{
 801731c:	b580      	push	{r7, lr}
 801731e:	b086      	sub	sp, #24
 8017320:	af04      	add	r7, sp, #16
 8017322:	4603      	mov	r3, r0
 8017324:	6039      	str	r1, [r7, #0]
 8017326:	71fb      	strb	r3, [r7, #7]
 8017328:	4613      	mov	r3, r2
 801732a:	71bb      	strb	r3, [r7, #6]
    if ( rxSlot < RX_SLOT_NONE )
 801732c:	79fb      	ldrb	r3, [r7, #7]
 801732e:	2b05      	cmp	r3, #5
 8017330:	d810      	bhi.n	8017354 <RegionCommonRxConfigPrint+0x38>
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX_%s on freq %d Hz at DR %d\r\n", EventRXSlotStrings[rxSlot], frequency, dr );
 8017332:	79fb      	ldrb	r3, [r7, #7]
 8017334:	4a0f      	ldr	r2, [pc, #60]	@ (8017374 <RegionCommonRxConfigPrint+0x58>)
 8017336:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801733a:	f997 2006 	ldrsb.w	r2, [r7, #6]
 801733e:	9202      	str	r2, [sp, #8]
 8017340:	683a      	ldr	r2, [r7, #0]
 8017342:	9201      	str	r2, [sp, #4]
 8017344:	9300      	str	r3, [sp, #0]
 8017346:	4b0c      	ldr	r3, [pc, #48]	@ (8017378 <RegionCommonRxConfigPrint+0x5c>)
 8017348:	2201      	movs	r2, #1
 801734a:	2100      	movs	r1, #0
 801734c:	2002      	movs	r0, #2
 801734e:	f004 fbc5 	bl	801badc <UTIL_ADV_TRACE_COND_FSend>
    }
    else
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
    }
}
 8017352:	e00a      	b.n	801736a <RegionCommonRxConfigPrint+0x4e>
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
 8017354:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8017358:	9301      	str	r3, [sp, #4]
 801735a:	683b      	ldr	r3, [r7, #0]
 801735c:	9300      	str	r3, [sp, #0]
 801735e:	4b07      	ldr	r3, [pc, #28]	@ (801737c <RegionCommonRxConfigPrint+0x60>)
 8017360:	2201      	movs	r2, #1
 8017362:	2100      	movs	r1, #0
 8017364:	2002      	movs	r0, #2
 8017366:	f004 fbb9 	bl	801badc <UTIL_ADV_TRACE_COND_FSend>
}
 801736a:	bf00      	nop
 801736c:	3708      	adds	r7, #8
 801736e:	46bd      	mov	sp, r7
 8017370:	bd80      	pop	{r7, pc}
 8017372:	bf00      	nop
 8017374:	20000128 	.word	0x20000128
 8017378:	0801f234 	.word	0x0801f234
 801737c:	0801f254 	.word	0x0801f254

08017380 <RegionCommonTxConfigPrint>:

void RegionCommonTxConfigPrint(uint32_t frequency, int8_t dr)
{
 8017380:	b580      	push	{r7, lr}
 8017382:	b084      	sub	sp, #16
 8017384:	af02      	add	r7, sp, #8
 8017386:	6078      	str	r0, [r7, #4]
 8017388:	460b      	mov	r3, r1
 801738a:	70fb      	strb	r3, [r7, #3]
    MW_LOG(TS_ON, VLEVEL_M,  "TX on freq %d Hz at DR %d\r\n", frequency, dr );
 801738c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8017390:	9301      	str	r3, [sp, #4]
 8017392:	687b      	ldr	r3, [r7, #4]
 8017394:	9300      	str	r3, [sp, #0]
 8017396:	4b05      	ldr	r3, [pc, #20]	@ (80173ac <RegionCommonTxConfigPrint+0x2c>)
 8017398:	2201      	movs	r2, #1
 801739a:	2100      	movs	r1, #0
 801739c:	2002      	movs	r0, #2
 801739e:	f004 fb9d 	bl	801badc <UTIL_ADV_TRACE_COND_FSend>
}
 80173a2:	bf00      	nop
 80173a4:	3708      	adds	r7, #8
 80173a6:	46bd      	mov	sp, r7
 80173a8:	bd80      	pop	{r7, pc}
 80173aa:	bf00      	nop
 80173ac:	0801f270 	.word	0x0801f270

080173b0 <rand1>:
static uint32_t next = 1;

static int32_t rand1( void );

static int32_t rand1( void )
{
 80173b0:	b480      	push	{r7}
 80173b2:	af00      	add	r7, sp, #0
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
 80173b4:	4b0d      	ldr	r3, [pc, #52]	@ (80173ec <rand1+0x3c>)
 80173b6:	681b      	ldr	r3, [r3, #0]
 80173b8:	4a0d      	ldr	r2, [pc, #52]	@ (80173f0 <rand1+0x40>)
 80173ba:	fb02 f303 	mul.w	r3, r2, r3
 80173be:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 80173c2:	3339      	adds	r3, #57	@ 0x39
 80173c4:	4a09      	ldr	r2, [pc, #36]	@ (80173ec <rand1+0x3c>)
 80173c6:	6013      	str	r3, [r2, #0]
 80173c8:	4b08      	ldr	r3, [pc, #32]	@ (80173ec <rand1+0x3c>)
 80173ca:	681a      	ldr	r2, [r3, #0]
 80173cc:	2303      	movs	r3, #3
 80173ce:	fba3 1302 	umull	r1, r3, r3, r2
 80173d2:	1ad1      	subs	r1, r2, r3
 80173d4:	0849      	lsrs	r1, r1, #1
 80173d6:	440b      	add	r3, r1
 80173d8:	0f99      	lsrs	r1, r3, #30
 80173da:	460b      	mov	r3, r1
 80173dc:	07db      	lsls	r3, r3, #31
 80173de:	1a5b      	subs	r3, r3, r1
 80173e0:	1ad1      	subs	r1, r2, r3
 80173e2:	460b      	mov	r3, r1
}
 80173e4:	4618      	mov	r0, r3
 80173e6:	46bd      	mov	sp, r7
 80173e8:	bc80      	pop	{r7}
 80173ea:	4770      	bx	lr
 80173ec:	20000140 	.word	0x20000140
 80173f0:	41c64e6d 	.word	0x41c64e6d

080173f4 <srand1>:

void srand1( uint32_t seed )
{
 80173f4:	b480      	push	{r7}
 80173f6:	b083      	sub	sp, #12
 80173f8:	af00      	add	r7, sp, #0
 80173fa:	6078      	str	r0, [r7, #4]
    next = seed;
 80173fc:	4a03      	ldr	r2, [pc, #12]	@ (801740c <srand1+0x18>)
 80173fe:	687b      	ldr	r3, [r7, #4]
 8017400:	6013      	str	r3, [r2, #0]
}
 8017402:	bf00      	nop
 8017404:	370c      	adds	r7, #12
 8017406:	46bd      	mov	sp, r7
 8017408:	bc80      	pop	{r7}
 801740a:	4770      	bx	lr
 801740c:	20000140 	.word	0x20000140

08017410 <randr>:
// Standard random functions redefinition end

int32_t randr( int32_t min, int32_t max )
{
 8017410:	b580      	push	{r7, lr}
 8017412:	b082      	sub	sp, #8
 8017414:	af00      	add	r7, sp, #0
 8017416:	6078      	str	r0, [r7, #4]
 8017418:	6039      	str	r1, [r7, #0]
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
 801741a:	f7ff ffc9 	bl	80173b0 <rand1>
 801741e:	4602      	mov	r2, r0
 8017420:	6839      	ldr	r1, [r7, #0]
 8017422:	687b      	ldr	r3, [r7, #4]
 8017424:	1acb      	subs	r3, r1, r3
 8017426:	3301      	adds	r3, #1
 8017428:	fb92 f1f3 	sdiv	r1, r2, r3
 801742c:	fb01 f303 	mul.w	r3, r1, r3
 8017430:	1ad2      	subs	r2, r2, r3
 8017432:	687b      	ldr	r3, [r7, #4]
 8017434:	4413      	add	r3, r2
}
 8017436:	4618      	mov	r0, r3
 8017438:	3708      	adds	r7, #8
 801743a:	46bd      	mov	sp, r7
 801743c:	bd80      	pop	{r7, pc}

0801743e <memcpy1>:

void memcpy1( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 801743e:	b480      	push	{r7}
 8017440:	b085      	sub	sp, #20
 8017442:	af00      	add	r7, sp, #0
 8017444:	60f8      	str	r0, [r7, #12]
 8017446:	60b9      	str	r1, [r7, #8]
 8017448:	4613      	mov	r3, r2
 801744a:	80fb      	strh	r3, [r7, #6]
    while( size-- )
 801744c:	e007      	b.n	801745e <memcpy1+0x20>
    {
        *dst++ = *src++;
 801744e:	68ba      	ldr	r2, [r7, #8]
 8017450:	1c53      	adds	r3, r2, #1
 8017452:	60bb      	str	r3, [r7, #8]
 8017454:	68fb      	ldr	r3, [r7, #12]
 8017456:	1c59      	adds	r1, r3, #1
 8017458:	60f9      	str	r1, [r7, #12]
 801745a:	7812      	ldrb	r2, [r2, #0]
 801745c:	701a      	strb	r2, [r3, #0]
    while( size-- )
 801745e:	88fb      	ldrh	r3, [r7, #6]
 8017460:	1e5a      	subs	r2, r3, #1
 8017462:	80fa      	strh	r2, [r7, #6]
 8017464:	2b00      	cmp	r3, #0
 8017466:	d1f2      	bne.n	801744e <memcpy1+0x10>
    }
}
 8017468:	bf00      	nop
 801746a:	bf00      	nop
 801746c:	3714      	adds	r7, #20
 801746e:	46bd      	mov	sp, r7
 8017470:	bc80      	pop	{r7}
 8017472:	4770      	bx	lr

08017474 <memcpyr>:

void memcpyr( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 8017474:	b480      	push	{r7}
 8017476:	b085      	sub	sp, #20
 8017478:	af00      	add	r7, sp, #0
 801747a:	60f8      	str	r0, [r7, #12]
 801747c:	60b9      	str	r1, [r7, #8]
 801747e:	4613      	mov	r3, r2
 8017480:	80fb      	strh	r3, [r7, #6]
    dst = dst + ( size - 1 );
 8017482:	88fb      	ldrh	r3, [r7, #6]
 8017484:	3b01      	subs	r3, #1
 8017486:	68fa      	ldr	r2, [r7, #12]
 8017488:	4413      	add	r3, r2
 801748a:	60fb      	str	r3, [r7, #12]
    while( size-- )
 801748c:	e007      	b.n	801749e <memcpyr+0x2a>
    {
        *dst-- = *src++;
 801748e:	68ba      	ldr	r2, [r7, #8]
 8017490:	1c53      	adds	r3, r2, #1
 8017492:	60bb      	str	r3, [r7, #8]
 8017494:	68fb      	ldr	r3, [r7, #12]
 8017496:	1e59      	subs	r1, r3, #1
 8017498:	60f9      	str	r1, [r7, #12]
 801749a:	7812      	ldrb	r2, [r2, #0]
 801749c:	701a      	strb	r2, [r3, #0]
    while( size-- )
 801749e:	88fb      	ldrh	r3, [r7, #6]
 80174a0:	1e5a      	subs	r2, r3, #1
 80174a2:	80fa      	strh	r2, [r7, #6]
 80174a4:	2b00      	cmp	r3, #0
 80174a6:	d1f2      	bne.n	801748e <memcpyr+0x1a>
    }
}
 80174a8:	bf00      	nop
 80174aa:	bf00      	nop
 80174ac:	3714      	adds	r7, #20
 80174ae:	46bd      	mov	sp, r7
 80174b0:	bc80      	pop	{r7}
 80174b2:	4770      	bx	lr

080174b4 <memset1>:

void memset1( uint8_t *dst, uint8_t value, uint16_t size )
{
 80174b4:	b480      	push	{r7}
 80174b6:	b083      	sub	sp, #12
 80174b8:	af00      	add	r7, sp, #0
 80174ba:	6078      	str	r0, [r7, #4]
 80174bc:	460b      	mov	r3, r1
 80174be:	70fb      	strb	r3, [r7, #3]
 80174c0:	4613      	mov	r3, r2
 80174c2:	803b      	strh	r3, [r7, #0]
    while( size-- )
 80174c4:	e004      	b.n	80174d0 <memset1+0x1c>
    {
        *dst++ = value;
 80174c6:	687b      	ldr	r3, [r7, #4]
 80174c8:	1c5a      	adds	r2, r3, #1
 80174ca:	607a      	str	r2, [r7, #4]
 80174cc:	78fa      	ldrb	r2, [r7, #3]
 80174ce:	701a      	strb	r2, [r3, #0]
    while( size-- )
 80174d0:	883b      	ldrh	r3, [r7, #0]
 80174d2:	1e5a      	subs	r2, r3, #1
 80174d4:	803a      	strh	r2, [r7, #0]
 80174d6:	2b00      	cmp	r3, #0
 80174d8:	d1f5      	bne.n	80174c6 <memset1+0x12>
    }
}
 80174da:	bf00      	nop
 80174dc:	bf00      	nop
 80174de:	370c      	adds	r7, #12
 80174e0:	46bd      	mov	sp, r7
 80174e2:	bc80      	pop	{r7}
 80174e4:	4770      	bx	lr
	...

080174e8 <Crc32>:
        return '?';
    }
}

uint32_t Crc32( uint8_t *buffer, uint16_t length )
{
 80174e8:	b480      	push	{r7}
 80174ea:	b085      	sub	sp, #20
 80174ec:	af00      	add	r7, sp, #0
 80174ee:	6078      	str	r0, [r7, #4]
 80174f0:	460b      	mov	r3, r1
 80174f2:	807b      	strh	r3, [r7, #2]
    // CRC initial value
    uint32_t crc = 0xFFFFFFFF;
 80174f4:	f04f 33ff 	mov.w	r3, #4294967295
 80174f8:	60fb      	str	r3, [r7, #12]

    if( buffer == NULL )
 80174fa:	687b      	ldr	r3, [r7, #4]
 80174fc:	2b00      	cmp	r3, #0
 80174fe:	d101      	bne.n	8017504 <Crc32+0x1c>
    {
        return 0;
 8017500:	2300      	movs	r3, #0
 8017502:	e026      	b.n	8017552 <Crc32+0x6a>
    }

    for( uint16_t i = 0; i < length; ++i )
 8017504:	2300      	movs	r3, #0
 8017506:	817b      	strh	r3, [r7, #10]
 8017508:	e01d      	b.n	8017546 <Crc32+0x5e>
    {
        crc ^= ( uint32_t )buffer[i];
 801750a:	897b      	ldrh	r3, [r7, #10]
 801750c:	687a      	ldr	r2, [r7, #4]
 801750e:	4413      	add	r3, r2
 8017510:	781b      	ldrb	r3, [r3, #0]
 8017512:	461a      	mov	r2, r3
 8017514:	68fb      	ldr	r3, [r7, #12]
 8017516:	4053      	eors	r3, r2
 8017518:	60fb      	str	r3, [r7, #12]
        for( uint16_t i = 0; i < 8; i++ )
 801751a:	2300      	movs	r3, #0
 801751c:	813b      	strh	r3, [r7, #8]
 801751e:	e00c      	b.n	801753a <Crc32+0x52>
        {
            crc = ( crc >> 1 ) ^ ( reversedPolynom & ~( ( crc & 0x01 ) - 1 ) );
 8017520:	68fb      	ldr	r3, [r7, #12]
 8017522:	085a      	lsrs	r2, r3, #1
 8017524:	68fb      	ldr	r3, [r7, #12]
 8017526:	f003 0301 	and.w	r3, r3, #1
 801752a:	425b      	negs	r3, r3
 801752c:	490b      	ldr	r1, [pc, #44]	@ (801755c <Crc32+0x74>)
 801752e:	400b      	ands	r3, r1
 8017530:	4053      	eors	r3, r2
 8017532:	60fb      	str	r3, [r7, #12]
        for( uint16_t i = 0; i < 8; i++ )
 8017534:	893b      	ldrh	r3, [r7, #8]
 8017536:	3301      	adds	r3, #1
 8017538:	813b      	strh	r3, [r7, #8]
 801753a:	893b      	ldrh	r3, [r7, #8]
 801753c:	2b07      	cmp	r3, #7
 801753e:	d9ef      	bls.n	8017520 <Crc32+0x38>
    for( uint16_t i = 0; i < length; ++i )
 8017540:	897b      	ldrh	r3, [r7, #10]
 8017542:	3301      	adds	r3, #1
 8017544:	817b      	strh	r3, [r7, #10]
 8017546:	897a      	ldrh	r2, [r7, #10]
 8017548:	887b      	ldrh	r3, [r7, #2]
 801754a:	429a      	cmp	r2, r3
 801754c:	d3dd      	bcc.n	801750a <Crc32+0x22>
        }
    }

    return ~crc;
 801754e:	68fb      	ldr	r3, [r7, #12]
 8017550:	43db      	mvns	r3, r3
}
 8017552:	4618      	mov	r0, r3
 8017554:	3714      	adds	r7, #20
 8017556:	46bd      	mov	sp, r7
 8017558:	bc80      	pop	{r7}
 801755a:	4770      	bx	lr
 801755c:	edb88320 	.word	0xedb88320

08017560 <RadioInit>:
TimerEvent_t RxTimeoutTimer;

/* Private  functions ---------------------------------------------------------*/

static void RadioInit( RadioEvents_t *events )
{
 8017560:	b580      	push	{r7, lr}
 8017562:	b084      	sub	sp, #16
 8017564:	af02      	add	r7, sp, #8
 8017566:	6078      	str	r0, [r7, #4]
    RadioEvents = events;
 8017568:	4a24      	ldr	r2, [pc, #144]	@ (80175fc <RadioInit+0x9c>)
 801756a:	687b      	ldr	r3, [r7, #4]
 801756c:	6013      	str	r3, [r2, #0]

    SubgRf.RxContinuous = false;
 801756e:	4b24      	ldr	r3, [pc, #144]	@ (8017600 <RadioInit+0xa0>)
 8017570:	2200      	movs	r2, #0
 8017572:	705a      	strb	r2, [r3, #1]
    SubgRf.TxTimeout = 0;
 8017574:	4b22      	ldr	r3, [pc, #136]	@ (8017600 <RadioInit+0xa0>)
 8017576:	2200      	movs	r2, #0
 8017578:	605a      	str	r2, [r3, #4]
    SubgRf.RxTimeout = 0;
 801757a:	4b21      	ldr	r3, [pc, #132]	@ (8017600 <RadioInit+0xa0>)
 801757c:	2200      	movs	r2, #0
 801757e:	609a      	str	r2, [r3, #8]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8017580:	4b1f      	ldr	r3, [pc, #124]	@ (8017600 <RadioInit+0xa0>)
 8017582:	2200      	movs	r2, #0
 8017584:	659a      	str	r2, [r3, #88]	@ 0x58

    SUBGRF_Init( RadioOnDioIrq );
 8017586:	481f      	ldr	r0, [pc, #124]	@ (8017604 <RadioInit+0xa4>)
 8017588:	f001 ff88 	bl	801949c <SUBGRF_Init>
    /*SubgRf.publicNetwork set to false*/
    SubgRf.PublicNetwork.Current = false;
 801758c:	4b1c      	ldr	r3, [pc, #112]	@ (8017600 <RadioInit+0xa0>)
 801758e:	2200      	movs	r2, #0
 8017590:	735a      	strb	r2, [r3, #13]
    SubgRf.PublicNetwork.Previous = false;
 8017592:	4b1b      	ldr	r3, [pc, #108]	@ (8017600 <RadioInit+0xa0>)
 8017594:	2200      	movs	r2, #0
 8017596:	731a      	strb	r2, [r3, #12]

    RADIO_IRQ_PROCESS_INIT();

    SUBGRF_SetRegulatorMode( );
 8017598:	f002 fa16 	bl	80199c8 <SUBGRF_SetRegulatorMode>

    SUBGRF_SetBufferBaseAddress( 0x00, 0x00 );
 801759c:	2100      	movs	r1, #0
 801759e:	2000      	movs	r0, #0
 80175a0:	f002 fdde 	bl	801a160 <SUBGRF_SetBufferBaseAddress>
    SUBGRF_SetTxParams( RFO_LP, 0, RADIO_RAMP_200_US );
 80175a4:	2204      	movs	r2, #4
 80175a6:	2100      	movs	r1, #0
 80175a8:	2001      	movs	r0, #1
 80175aa:	f002 fb9b 	bl	8019ce4 <SUBGRF_SetTxParams>
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 80175ae:	2300      	movs	r3, #0
 80175b0:	2200      	movs	r2, #0
 80175b2:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80175b6:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80175ba:	f002 facb 	bl	8019b54 <SUBGRF_SetDioIrqParams>

    /* ST_WORKAROUND_BEGIN: Sleep radio */
    RadioSleep();
 80175be:	f000 fe83 	bl	80182c8 <RadioSleep>
    /* ST_WORKAROUND_END */
    // Initialize driver timeout timers
    TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
 80175c2:	2300      	movs	r3, #0
 80175c4:	9300      	str	r3, [sp, #0]
 80175c6:	4b10      	ldr	r3, [pc, #64]	@ (8017608 <RadioInit+0xa8>)
 80175c8:	2200      	movs	r2, #0
 80175ca:	f04f 31ff 	mov.w	r1, #4294967295
 80175ce:	480f      	ldr	r0, [pc, #60]	@ (801760c <RadioInit+0xac>)
 80175d0:	f003 ffd6 	bl	801b580 <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutTimer, RadioOnRxTimeoutIrq );
 80175d4:	2300      	movs	r3, #0
 80175d6:	9300      	str	r3, [sp, #0]
 80175d8:	4b0d      	ldr	r3, [pc, #52]	@ (8017610 <RadioInit+0xb0>)
 80175da:	2200      	movs	r2, #0
 80175dc:	f04f 31ff 	mov.w	r1, #4294967295
 80175e0:	480c      	ldr	r0, [pc, #48]	@ (8017614 <RadioInit+0xb4>)
 80175e2:	f003 ffcd 	bl	801b580 <UTIL_TIMER_Create>
    TimerStop( &TxTimeoutTimer );
 80175e6:	4809      	ldr	r0, [pc, #36]	@ (801760c <RadioInit+0xac>)
 80175e8:	f004 f86e 	bl	801b6c8 <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutTimer );
 80175ec:	4809      	ldr	r0, [pc, #36]	@ (8017614 <RadioInit+0xb4>)
 80175ee:	f004 f86b 	bl	801b6c8 <UTIL_TIMER_Stop>
}
 80175f2:	bf00      	nop
 80175f4:	3708      	adds	r7, #8
 80175f6:	46bd      	mov	sp, r7
 80175f8:	bd80      	pop	{r7, pc}
 80175fa:	bf00      	nop
 80175fc:	20001ccc 	.word	0x20001ccc
 8017600:	20001cd0 	.word	0x20001cd0
 8017604:	080186b1 	.word	0x080186b1
 8017608:	08018639 	.word	0x08018639
 801760c:	20001d2c 	.word	0x20001d2c
 8017610:	0801864d 	.word	0x0801864d
 8017614:	20001d44 	.word	0x20001d44

08017618 <RadioGetStatus>:

static RadioState_t RadioGetStatus( void )
{
 8017618:	b580      	push	{r7, lr}
 801761a:	af00      	add	r7, sp, #0
    switch( SUBGRF_GetOperatingMode( ) )
 801761c:	f001 ff80 	bl	8019520 <SUBGRF_GetOperatingMode>
 8017620:	4603      	mov	r3, r0
 8017622:	2b07      	cmp	r3, #7
 8017624:	d00a      	beq.n	801763c <RadioGetStatus+0x24>
 8017626:	2b07      	cmp	r3, #7
 8017628:	dc0a      	bgt.n	8017640 <RadioGetStatus+0x28>
 801762a:	2b04      	cmp	r3, #4
 801762c:	d002      	beq.n	8017634 <RadioGetStatus+0x1c>
 801762e:	2b05      	cmp	r3, #5
 8017630:	d002      	beq.n	8017638 <RadioGetStatus+0x20>
 8017632:	e005      	b.n	8017640 <RadioGetStatus+0x28>
    {
        case MODE_TX:
            return RF_TX_RUNNING;
 8017634:	2302      	movs	r3, #2
 8017636:	e004      	b.n	8017642 <RadioGetStatus+0x2a>
        case MODE_RX:
            return RF_RX_RUNNING;
 8017638:	2301      	movs	r3, #1
 801763a:	e002      	b.n	8017642 <RadioGetStatus+0x2a>
        case MODE_CAD:
            return RF_CAD;
 801763c:	2303      	movs	r3, #3
 801763e:	e000      	b.n	8017642 <RadioGetStatus+0x2a>
        default:
            return RF_IDLE;
 8017640:	2300      	movs	r3, #0
    }
}
 8017642:	4618      	mov	r0, r3
 8017644:	bd80      	pop	{r7, pc}
	...

08017648 <RadioSetModem>:

static void RadioSetModem( RadioModems_t modem )
{
 8017648:	b580      	push	{r7, lr}
 801764a:	b082      	sub	sp, #8
 801764c:	af00      	add	r7, sp, #0
 801764e:	4603      	mov	r3, r0
 8017650:	71fb      	strb	r3, [r7, #7]
    SubgRf.Modem = modem;
 8017652:	4a2a      	ldr	r2, [pc, #168]	@ (80176fc <RadioSetModem+0xb4>)
 8017654:	79fb      	ldrb	r3, [r7, #7]
 8017656:	7013      	strb	r3, [r2, #0]
    RFW_SetRadioModem( modem );
 8017658:	79fb      	ldrb	r3, [r7, #7]
 801765a:	4618      	mov	r0, r3
 801765c:	f003 f943 	bl	801a8e6 <RFW_SetRadioModem>
    switch( modem )
 8017660:	79fb      	ldrb	r3, [r7, #7]
 8017662:	2b05      	cmp	r3, #5
 8017664:	d80e      	bhi.n	8017684 <RadioSetModem+0x3c>
 8017666:	a201      	add	r2, pc, #4	@ (adr r2, 801766c <RadioSetModem+0x24>)
 8017668:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801766c:	08017693 	.word	0x08017693
 8017670:	080176a1 	.word	0x080176a1
 8017674:	08017685 	.word	0x08017685
 8017678:	080176c7 	.word	0x080176c7
 801767c:	080176d5 	.word	0x080176d5
 8017680:	080176e3 	.word	0x080176e3
    {
    default:
    case MODEM_MSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GMSK );
 8017684:	2003      	movs	r0, #3
 8017686:	f002 fb07 	bl	8019c98 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 801768a:	4b1c      	ldr	r3, [pc, #112]	@ (80176fc <RadioSetModem+0xb4>)
 801768c:	2200      	movs	r2, #0
 801768e:	735a      	strb	r2, [r3, #13]
        break;
 8017690:	e02f      	b.n	80176f2 <RadioSetModem+0xaa>
    case MODEM_FSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 8017692:	2000      	movs	r0, #0
 8017694:	f002 fb00 	bl	8019c98 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8017698:	4b18      	ldr	r3, [pc, #96]	@ (80176fc <RadioSetModem+0xb4>)
 801769a:	2200      	movs	r2, #0
 801769c:	735a      	strb	r2, [r3, #13]
        break;
 801769e:	e028      	b.n	80176f2 <RadioSetModem+0xaa>
    case MODEM_LORA:
        SUBGRF_SetPacketType( PACKET_TYPE_LORA );
 80176a0:	2001      	movs	r0, #1
 80176a2:	f002 faf9 	bl	8019c98 <SUBGRF_SetPacketType>
        // Public/Private network register is reset when switching modems
        if( SubgRf.PublicNetwork.Current != SubgRf.PublicNetwork.Previous )
 80176a6:	4b15      	ldr	r3, [pc, #84]	@ (80176fc <RadioSetModem+0xb4>)
 80176a8:	7b5a      	ldrb	r2, [r3, #13]
 80176aa:	4b14      	ldr	r3, [pc, #80]	@ (80176fc <RadioSetModem+0xb4>)
 80176ac:	7b1b      	ldrb	r3, [r3, #12]
 80176ae:	429a      	cmp	r2, r3
 80176b0:	d01e      	beq.n	80176f0 <RadioSetModem+0xa8>
        {
            SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous;
 80176b2:	4b12      	ldr	r3, [pc, #72]	@ (80176fc <RadioSetModem+0xb4>)
 80176b4:	7b1a      	ldrb	r2, [r3, #12]
 80176b6:	4b11      	ldr	r3, [pc, #68]	@ (80176fc <RadioSetModem+0xb4>)
 80176b8:	735a      	strb	r2, [r3, #13]
            RadioSetPublicNetwork( SubgRf.PublicNetwork.Current );
 80176ba:	4b10      	ldr	r3, [pc, #64]	@ (80176fc <RadioSetModem+0xb4>)
 80176bc:	7b5b      	ldrb	r3, [r3, #13]
 80176be:	4618      	mov	r0, r3
 80176c0:	f000 ff84 	bl	80185cc <RadioSetPublicNetwork>
        }
        break;
 80176c4:	e014      	b.n	80176f0 <RadioSetModem+0xa8>
    case MODEM_BPSK:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 80176c6:	2002      	movs	r0, #2
 80176c8:	f002 fae6 	bl	8019c98 <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 80176cc:	4b0b      	ldr	r3, [pc, #44]	@ (80176fc <RadioSetModem+0xb4>)
 80176ce:	2200      	movs	r2, #0
 80176d0:	735a      	strb	r2, [r3, #13]
        break;
 80176d2:	e00e      	b.n	80176f2 <RadioSetModem+0xaa>
#if (RADIO_SIGFOX_ENABLE == 1)
    case MODEM_SIGFOX_TX:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 80176d4:	2002      	movs	r0, #2
 80176d6:	f002 fadf 	bl	8019c98 <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 80176da:	4b08      	ldr	r3, [pc, #32]	@ (80176fc <RadioSetModem+0xb4>)
 80176dc:	2200      	movs	r2, #0
 80176de:	735a      	strb	r2, [r3, #13]
        break;
 80176e0:	e007      	b.n	80176f2 <RadioSetModem+0xaa>
    case MODEM_SIGFOX_RX:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 80176e2:	2000      	movs	r0, #0
 80176e4:	f002 fad8 	bl	8019c98 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 80176e8:	4b04      	ldr	r3, [pc, #16]	@ (80176fc <RadioSetModem+0xb4>)
 80176ea:	2200      	movs	r2, #0
 80176ec:	735a      	strb	r2, [r3, #13]
        break;
 80176ee:	e000      	b.n	80176f2 <RadioSetModem+0xaa>
        break;
 80176f0:	bf00      	nop
#endif /*RADIO_SIGFOX_ENABLE == 1*/
    }
}
 80176f2:	bf00      	nop
 80176f4:	3708      	adds	r7, #8
 80176f6:	46bd      	mov	sp, r7
 80176f8:	bd80      	pop	{r7, pc}
 80176fa:	bf00      	nop
 80176fc:	20001cd0 	.word	0x20001cd0

08017700 <RadioSetChannel>:

static void RadioSetChannel( uint32_t freq )
{
 8017700:	b580      	push	{r7, lr}
 8017702:	b082      	sub	sp, #8
 8017704:	af00      	add	r7, sp, #0
 8017706:	6078      	str	r0, [r7, #4]
    SUBGRF_SetRfFrequency( freq );
 8017708:	6878      	ldr	r0, [r7, #4]
 801770a:	f002 fa7f 	bl	8019c0c <SUBGRF_SetRfFrequency>
}
 801770e:	bf00      	nop
 8017710:	3708      	adds	r7, #8
 8017712:	46bd      	mov	sp, r7
 8017714:	bd80      	pop	{r7, pc}

08017716 <RadioIsChannelFree>:

static bool RadioIsChannelFree( uint32_t freq, uint32_t rxBandwidth, int16_t rssiThresh, uint32_t maxCarrierSenseTime )
{
 8017716:	b580      	push	{r7, lr}
 8017718:	b090      	sub	sp, #64	@ 0x40
 801771a:	af0a      	add	r7, sp, #40	@ 0x28
 801771c:	60f8      	str	r0, [r7, #12]
 801771e:	60b9      	str	r1, [r7, #8]
 8017720:	603b      	str	r3, [r7, #0]
 8017722:	4613      	mov	r3, r2
 8017724:	80fb      	strh	r3, [r7, #6]
    bool status = true;
 8017726:	2301      	movs	r3, #1
 8017728:	75fb      	strb	r3, [r7, #23]
    int16_t rssi = 0;
 801772a:	2300      	movs	r3, #0
 801772c:	82bb      	strh	r3, [r7, #20]
    uint32_t carrierSenseTime = 0;
 801772e:	2300      	movs	r3, #0
 8017730:	613b      	str	r3, [r7, #16]

    RadioStandby( );  /* ST_WORKAROUND: Prevent multiple sleeps with TXCO delay */
 8017732:	f000 fddc 	bl	80182ee <RadioStandby>

    RadioSetModem( MODEM_FSK );
 8017736:	2000      	movs	r0, #0
 8017738:	f7ff ff86 	bl	8017648 <RadioSetModem>

    RadioSetChannel( freq );
 801773c:	68f8      	ldr	r0, [r7, #12]
 801773e:	f7ff ffdf 	bl	8017700 <RadioSetChannel>

    // Set Rx bandwidth. Other parameters are not used.
    RadioSetRxConfig( MODEM_FSK, rxBandwidth, 600, 0, rxBandwidth, 3, 0, false,
 8017742:	2301      	movs	r3, #1
 8017744:	9309      	str	r3, [sp, #36]	@ 0x24
 8017746:	2300      	movs	r3, #0
 8017748:	9308      	str	r3, [sp, #32]
 801774a:	2300      	movs	r3, #0
 801774c:	9307      	str	r3, [sp, #28]
 801774e:	2300      	movs	r3, #0
 8017750:	9306      	str	r3, [sp, #24]
 8017752:	2300      	movs	r3, #0
 8017754:	9305      	str	r3, [sp, #20]
 8017756:	2300      	movs	r3, #0
 8017758:	9304      	str	r3, [sp, #16]
 801775a:	2300      	movs	r3, #0
 801775c:	9303      	str	r3, [sp, #12]
 801775e:	2300      	movs	r3, #0
 8017760:	9302      	str	r3, [sp, #8]
 8017762:	2303      	movs	r3, #3
 8017764:	9301      	str	r3, [sp, #4]
 8017766:	68bb      	ldr	r3, [r7, #8]
 8017768:	9300      	str	r3, [sp, #0]
 801776a:	2300      	movs	r3, #0
 801776c:	f44f 7216 	mov.w	r2, #600	@ 0x258
 8017770:	68b9      	ldr	r1, [r7, #8]
 8017772:	2000      	movs	r0, #0
 8017774:	f000 f83c 	bl	80177f0 <RadioSetRxConfig>
                      0, false, 0, 0, false, true );
    RadioRx( 0 );
 8017778:	2000      	movs	r0, #0
 801777a:	f000 fdbf 	bl	80182fc <RadioRx>

    RADIO_DELAY_MS( RadioGetWakeupTime( ) );
 801777e:	f000 ff53 	bl	8018628 <RadioGetWakeupTime>
 8017782:	4603      	mov	r3, r0
 8017784:	4618      	mov	r0, r3
 8017786:	f7ea fd4b 	bl	8002220 <HAL_Delay>

    carrierSenseTime = TimerGetCurrentTime( );
 801778a:	f004 f8b7 	bl	801b8fc <UTIL_TIMER_GetCurrentTime>
 801778e:	6138      	str	r0, [r7, #16]

    // Perform carrier sense for maxCarrierSenseTime
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 8017790:	e00d      	b.n	80177ae <RadioIsChannelFree+0x98>
    {
        rssi = RadioRssi( MODEM_FSK );
 8017792:	2000      	movs	r0, #0
 8017794:	f000 fe9a 	bl	80184cc <RadioRssi>
 8017798:	4603      	mov	r3, r0
 801779a:	82bb      	strh	r3, [r7, #20]

        if( rssi > rssiThresh )
 801779c:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80177a0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80177a4:	429a      	cmp	r2, r3
 80177a6:	dd02      	ble.n	80177ae <RadioIsChannelFree+0x98>
        {
            status = false;
 80177a8:	2300      	movs	r3, #0
 80177aa:	75fb      	strb	r3, [r7, #23]
            break;
 80177ac:	e006      	b.n	80177bc <RadioIsChannelFree+0xa6>
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 80177ae:	6938      	ldr	r0, [r7, #16]
 80177b0:	f004 f8b6 	bl	801b920 <UTIL_TIMER_GetElapsedTime>
 80177b4:	4602      	mov	r2, r0
 80177b6:	683b      	ldr	r3, [r7, #0]
 80177b8:	4293      	cmp	r3, r2
 80177ba:	d8ea      	bhi.n	8017792 <RadioIsChannelFree+0x7c>
        }
    }
    RadioStandby( ); /* ST_WORKAROUND: Prevent multiple sleeps with TXCO delay */
 80177bc:	f000 fd97 	bl	80182ee <RadioStandby>

    return status;
 80177c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80177c2:	4618      	mov	r0, r3
 80177c4:	3718      	adds	r7, #24
 80177c6:	46bd      	mov	sp, r7
 80177c8:	bd80      	pop	{r7, pc}

080177ca <RadioRandom>:

static uint32_t RadioRandom( void )
{
 80177ca:	b580      	push	{r7, lr}
 80177cc:	b082      	sub	sp, #8
 80177ce:	af00      	add	r7, sp, #0
    uint32_t rnd = 0;
 80177d0:	2300      	movs	r3, #0
 80177d2:	607b      	str	r3, [r7, #4]

    /*
     * Radio setup for random number generation
     */
    // Disable modem interrupts
    SUBGRF_SetDioIrqParams( IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 80177d4:	2300      	movs	r3, #0
 80177d6:	2200      	movs	r2, #0
 80177d8:	2100      	movs	r1, #0
 80177da:	2000      	movs	r0, #0
 80177dc:	f002 f9ba 	bl	8019b54 <SUBGRF_SetDioIrqParams>

    rnd = SUBGRF_GetRandom();
 80177e0:	f001 ff6f 	bl	80196c2 <SUBGRF_GetRandom>
 80177e4:	6078      	str	r0, [r7, #4]

    return rnd;
 80177e6:	687b      	ldr	r3, [r7, #4]
}
 80177e8:	4618      	mov	r0, r3
 80177ea:	3708      	adds	r7, #8
 80177ec:	46bd      	mov	sp, r7
 80177ee:	bd80      	pop	{r7, pc}

080177f0 <RadioSetRxConfig>:
                              uint32_t bandwidthAfc, uint16_t preambleLen,
                              uint16_t symbTimeout, bool fixLen,
                              uint8_t payloadLen,
                              bool crcOn, bool freqHopOn, uint8_t hopPeriod,
                              bool iqInverted, bool rxContinuous )
{
 80177f0:	b580      	push	{r7, lr}
 80177f2:	b08a      	sub	sp, #40	@ 0x28
 80177f4:	af00      	add	r7, sp, #0
 80177f6:	60b9      	str	r1, [r7, #8]
 80177f8:	607a      	str	r2, [r7, #4]
 80177fa:	461a      	mov	r2, r3
 80177fc:	4603      	mov	r3, r0
 80177fe:	73fb      	strb	r3, [r7, #15]
 8017800:	4613      	mov	r3, r2
 8017802:	73bb      	strb	r3, [r7, #14]
#if (RADIO_SIGFOX_ENABLE == 1)
    uint8_t modReg;
#endif
    SubgRf.RxContinuous = rxContinuous;
 8017804:	4ab9      	ldr	r2, [pc, #740]	@ (8017aec <RadioSetRxConfig+0x2fc>)
 8017806:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 801780a:	7053      	strb	r3, [r2, #1]
    RFW_DeInit(); /* ST_WORKAROUND: Switch Off FwPacketDecoding by default */
 801780c:	f003 f829 	bl	801a862 <RFW_DeInit>
    if( rxContinuous == true )
 8017810:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8017814:	2b00      	cmp	r3, #0
 8017816:	d001      	beq.n	801781c <RadioSetRxConfig+0x2c>
    {
        symbTimeout = 0;
 8017818:	2300      	movs	r3, #0
 801781a:	873b      	strh	r3, [r7, #56]	@ 0x38
    }
    if( fixLen == true )
 801781c:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8017820:	2b00      	cmp	r3, #0
 8017822:	d004      	beq.n	801782e <RadioSetRxConfig+0x3e>
    {
        MaxPayloadLength = payloadLen;
 8017824:	4ab2      	ldr	r2, [pc, #712]	@ (8017af0 <RadioSetRxConfig+0x300>)
 8017826:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 801782a:	7013      	strb	r3, [r2, #0]
 801782c:	e002      	b.n	8017834 <RadioSetRxConfig+0x44>
    }
    else
    {
        MaxPayloadLength = 0xFF;
 801782e:	4bb0      	ldr	r3, [pc, #704]	@ (8017af0 <RadioSetRxConfig+0x300>)
 8017830:	22ff      	movs	r2, #255	@ 0xff
 8017832:	701a      	strb	r2, [r3, #0]
    }

    switch( modem )
 8017834:	7bfb      	ldrb	r3, [r7, #15]
 8017836:	2b05      	cmp	r3, #5
 8017838:	d009      	beq.n	801784e <RadioSetRxConfig+0x5e>
 801783a:	2b05      	cmp	r3, #5
 801783c:	f300 81ca 	bgt.w	8017bd4 <RadioSetRxConfig+0x3e4>
 8017840:	2b00      	cmp	r3, #0
 8017842:	f000 80bf 	beq.w	80179c4 <RadioSetRxConfig+0x1d4>
 8017846:	2b01      	cmp	r3, #1
 8017848:	f000 8124 	beq.w	8017a94 <RadioSetRxConfig+0x2a4>
            // Timeout Max, Timeout handled directly in SetRx function
            SubgRf.RxTimeout = 0xFFFF;

            break;
        default:
            break;
 801784c:	e1c2      	b.n	8017bd4 <RadioSetRxConfig+0x3e4>
            SUBGRF_SetStopRxTimerOnPreambleDetect( true );
 801784e:	2001      	movs	r0, #1
 8017850:	f002 f87c 	bl	801994c <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8017854:	4ba5      	ldr	r3, [pc, #660]	@ (8017aec <RadioSetRxConfig+0x2fc>)
 8017856:	2200      	movs	r2, #0
 8017858:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 801785c:	4aa3      	ldr	r2, [pc, #652]	@ (8017aec <RadioSetRxConfig+0x2fc>)
 801785e:	687b      	ldr	r3, [r7, #4]
 8017860:	63d3      	str	r3, [r2, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_05;
 8017862:	4ba2      	ldr	r3, [pc, #648]	@ (8017aec <RadioSetRxConfig+0x2fc>)
 8017864:	2209      	movs	r2, #9
 8017866:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            SubgRf.ModulationParams.Params.Gfsk.Fdev = 800;
 801786a:	4ba0      	ldr	r3, [pc, #640]	@ (8017aec <RadioSetRxConfig+0x2fc>)
 801786c:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8017870:	641a      	str	r2, [r3, #64]	@ 0x40
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8017872:	68b8      	ldr	r0, [r7, #8]
 8017874:	f002 ff28 	bl	801a6c8 <SUBGRF_GetFskBandwidthRegValue>
 8017878:	4603      	mov	r3, r0
 801787a:	461a      	mov	r2, r3
 801787c:	4b9b      	ldr	r3, [pc, #620]	@ (8017aec <RadioSetRxConfig+0x2fc>)
 801787e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8017882:	4b9a      	ldr	r3, [pc, #616]	@ (8017aec <RadioSetRxConfig+0x2fc>)
 8017884:	2200      	movs	r2, #0
 8017886:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8017888:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 801788a:	00db      	lsls	r3, r3, #3
 801788c:	b29a      	uxth	r2, r3
 801788e:	4b97      	ldr	r3, [pc, #604]	@ (8017aec <RadioSetRxConfig+0x2fc>)
 8017890:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_OFF;
 8017892:	4b96      	ldr	r3, [pc, #600]	@ (8017aec <RadioSetRxConfig+0x2fc>)
 8017894:	2200      	movs	r2, #0
 8017896:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 2 << 3; // convert byte into bit
 8017898:	4b94      	ldr	r3, [pc, #592]	@ (8017aec <RadioSetRxConfig+0x2fc>)
 801789a:	2210      	movs	r2, #16
 801789c:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 801789e:	4b93      	ldr	r3, [pc, #588]	@ (8017aec <RadioSetRxConfig+0x2fc>)
 80178a0:	2200      	movs	r2, #0
 80178a2:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = RADIO_PACKET_FIXED_LENGTH;
 80178a4:	4b91      	ldr	r3, [pc, #580]	@ (8017aec <RadioSetRxConfig+0x2fc>)
 80178a6:	2200      	movs	r2, #0
 80178a8:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 80178aa:	4b91      	ldr	r3, [pc, #580]	@ (8017af0 <RadioSetRxConfig+0x300>)
 80178ac:	781a      	ldrb	r2, [r3, #0]
 80178ae:	4b8f      	ldr	r3, [pc, #572]	@ (8017aec <RadioSetRxConfig+0x2fc>)
 80178b0:	759a      	strb	r2, [r3, #22]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 80178b2:	4b8e      	ldr	r3, [pc, #568]	@ (8017aec <RadioSetRxConfig+0x2fc>)
 80178b4:	2201      	movs	r2, #1
 80178b6:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREE_OFF;
 80178b8:	4b8c      	ldr	r3, [pc, #560]	@ (8017aec <RadioSetRxConfig+0x2fc>)
 80178ba:	2200      	movs	r2, #0
 80178bc:	761a      	strb	r2, [r3, #24]
            RadioSetModem( MODEM_SIGFOX_RX );
 80178be:	2005      	movs	r0, #5
 80178c0:	f7ff fec2 	bl	8017648 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80178c4:	488b      	ldr	r0, [pc, #556]	@ (8017af4 <RadioSetRxConfig+0x304>)
 80178c6:	f002 fadb 	bl	8019e80 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80178ca:	488b      	ldr	r0, [pc, #556]	@ (8017af8 <RadioSetRxConfig+0x308>)
 80178cc:	f002 fbaa 	bl	801a024 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){0xB2, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 80178d0:	4a8a      	ldr	r2, [pc, #552]	@ (8017afc <RadioSetRxConfig+0x30c>)
 80178d2:	f107 031c 	add.w	r3, r7, #28
 80178d6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80178da:	e883 0003 	stmia.w	r3, {r0, r1}
 80178de:	f107 031c 	add.w	r3, r7, #28
 80178e2:	4618      	mov	r0, r3
 80178e4:	f001 fe6b 	bl	80195be <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 80178e8:	f240 10ff 	movw	r0, #511	@ 0x1ff
 80178ec:	f001 feb6 	bl	801965c <SUBGRF_SetWhiteningSeed>
            modReg= RadioRead(SUBGHZ_AGCGFORSTCFGR);
 80178f0:	f640 00b8 	movw	r0, #2232	@ 0x8b8
 80178f4:	f000 fe08 	bl	8018508 <RadioRead>
 80178f8:	4603      	mov	r3, r0
 80178fa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            modReg&=RADIO_BIT_MASK(4);
 80178fe:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8017902:	f023 0310 	bic.w	r3, r3, #16
 8017906:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            RadioWrite(SUBGHZ_AGCGFORSTCFGR, modReg);
 801790a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801790e:	4619      	mov	r1, r3
 8017910:	f640 00b8 	movw	r0, #2232	@ 0x8b8
 8017914:	f000 fde6 	bl	80184e4 <RadioWrite>
            RadioWrite(SUBGHZ_AGCGFORSTPOWTHR, 0x4 );
 8017918:	2104      	movs	r1, #4
 801791a:	f640 00b9 	movw	r0, #2233	@ 0x8b9
 801791e:	f000 fde1 	bl	80184e4 <RadioWrite>
            modReg= RadioRead(SUBGHZ_AGCRSSICTL0R);
 8017922:	f640 009b 	movw	r0, #2203	@ 0x89b
 8017926:	f000 fdef 	bl	8018508 <RadioRead>
 801792a:	4603      	mov	r3, r0
 801792c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            modReg&=( RADIO_BIT_MASK(2) & RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 8017930:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8017934:	f023 031c 	bic.w	r3, r3, #28
 8017938:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            RadioWrite(SUBGHZ_AGCRSSICTL0R, (modReg| (0x1<<3) ) );
 801793c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8017940:	f043 0308 	orr.w	r3, r3, #8
 8017944:	b2db      	uxtb	r3, r3
 8017946:	4619      	mov	r1, r3
 8017948:	f640 009b 	movw	r0, #2203	@ 0x89b
 801794c:	f000 fdca 	bl	80184e4 <RadioWrite>
            modReg= RadioRead(SUBGHZ_GAFCR);
 8017950:	f240 60d1 	movw	r0, #1745	@ 0x6d1
 8017954:	f000 fdd8 	bl	8018508 <RadioRead>
 8017958:	4603      	mov	r3, r0
 801795a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            modReg&=( RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 801795e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8017962:	f023 0318 	bic.w	r3, r3, #24
 8017966:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            RadioWrite(SUBGHZ_GAFCR, (modReg| (0x3<<3) ));
 801796a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801796e:	f043 0318 	orr.w	r3, r3, #24
 8017972:	b2db      	uxtb	r3, r3
 8017974:	4619      	mov	r1, r3
 8017976:	f240 60d1 	movw	r0, #1745	@ 0x6d1
 801797a:	f000 fdb3 	bl	80184e4 <RadioWrite>
            modReg= RadioRead(SUBGHZ_GBSYNCR);
 801797e:	f240 60ac 	movw	r0, #1708	@ 0x6ac
 8017982:	f000 fdc1 	bl	8018508 <RadioRead>
 8017986:	4603      	mov	r3, r0
 8017988:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            modReg&=( RADIO_BIT_MASK(4) & RADIO_BIT_MASK(5) & RADIO_BIT_MASK(6) );
 801798c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8017990:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8017994:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            RadioWrite(SUBGHZ_GBSYNCR, (modReg| (0x5<<4) ));
 8017998:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801799c:	f043 0350 	orr.w	r3, r3, #80	@ 0x50
 80179a0:	b2db      	uxtb	r3, r3
 80179a2:	4619      	mov	r1, r3
 80179a4:	f240 60ac 	movw	r0, #1708	@ 0x6ac
 80179a8:	f000 fd9c 	bl	80184e4 <RadioWrite>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 80179ac:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80179ae:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 80179b2:	fb02 f303 	mul.w	r3, r2, r3
 80179b6:	461a      	mov	r2, r3
 80179b8:	687b      	ldr	r3, [r7, #4]
 80179ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80179be:	4a4b      	ldr	r2, [pc, #300]	@ (8017aec <RadioSetRxConfig+0x2fc>)
 80179c0:	6093      	str	r3, [r2, #8]
            break;
 80179c2:	e108      	b.n	8017bd6 <RadioSetRxConfig+0x3e6>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 80179c4:	2000      	movs	r0, #0
 80179c6:	f001 ffc1 	bl	801994c <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 80179ca:	4b48      	ldr	r3, [pc, #288]	@ (8017aec <RadioSetRxConfig+0x2fc>)
 80179cc:	2200      	movs	r2, #0
 80179ce:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 80179d2:	4a46      	ldr	r2, [pc, #280]	@ (8017aec <RadioSetRxConfig+0x2fc>)
 80179d4:	687b      	ldr	r3, [r7, #4]
 80179d6:	63d3      	str	r3, [r2, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 80179d8:	4b44      	ldr	r3, [pc, #272]	@ (8017aec <RadioSetRxConfig+0x2fc>)
 80179da:	220b      	movs	r2, #11
 80179dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 80179e0:	68b8      	ldr	r0, [r7, #8]
 80179e2:	f002 fe71 	bl	801a6c8 <SUBGRF_GetFskBandwidthRegValue>
 80179e6:	4603      	mov	r3, r0
 80179e8:	461a      	mov	r2, r3
 80179ea:	4b40      	ldr	r3, [pc, #256]	@ (8017aec <RadioSetRxConfig+0x2fc>)
 80179ec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 80179f0:	4b3e      	ldr	r3, [pc, #248]	@ (8017aec <RadioSetRxConfig+0x2fc>)
 80179f2:	2200      	movs	r2, #0
 80179f4:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 80179f6:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80179f8:	00db      	lsls	r3, r3, #3
 80179fa:	b29a      	uxth	r2, r3
 80179fc:	4b3b      	ldr	r3, [pc, #236]	@ (8017aec <RadioSetRxConfig+0x2fc>)
 80179fe:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 8017a00:	4b3a      	ldr	r3, [pc, #232]	@ (8017aec <RadioSetRxConfig+0x2fc>)
 8017a02:	2204      	movs	r2, #4
 8017a04:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 8017a06:	4b39      	ldr	r3, [pc, #228]	@ (8017aec <RadioSetRxConfig+0x2fc>)
 8017a08:	2218      	movs	r2, #24
 8017a0a:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8017a0c:	4b37      	ldr	r3, [pc, #220]	@ (8017aec <RadioSetRxConfig+0x2fc>)
 8017a0e:	2200      	movs	r2, #0
 8017a10:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 8017a12:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8017a16:	f083 0301 	eor.w	r3, r3, #1
 8017a1a:	b2db      	uxtb	r3, r3
 8017a1c:	461a      	mov	r2, r3
 8017a1e:	4b33      	ldr	r3, [pc, #204]	@ (8017aec <RadioSetRxConfig+0x2fc>)
 8017a20:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 8017a22:	4b33      	ldr	r3, [pc, #204]	@ (8017af0 <RadioSetRxConfig+0x300>)
 8017a24:	781a      	ldrb	r2, [r3, #0]
 8017a26:	4b31      	ldr	r3, [pc, #196]	@ (8017aec <RadioSetRxConfig+0x2fc>)
 8017a28:	759a      	strb	r2, [r3, #22]
            if( crcOn == true )
 8017a2a:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8017a2e:	2b00      	cmp	r3, #0
 8017a30:	d003      	beq.n	8017a3a <RadioSetRxConfig+0x24a>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 8017a32:	4b2e      	ldr	r3, [pc, #184]	@ (8017aec <RadioSetRxConfig+0x2fc>)
 8017a34:	22f2      	movs	r2, #242	@ 0xf2
 8017a36:	75da      	strb	r2, [r3, #23]
 8017a38:	e002      	b.n	8017a40 <RadioSetRxConfig+0x250>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8017a3a:	4b2c      	ldr	r3, [pc, #176]	@ (8017aec <RadioSetRxConfig+0x2fc>)
 8017a3c:	2201      	movs	r2, #1
 8017a3e:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8017a40:	4b2a      	ldr	r3, [pc, #168]	@ (8017aec <RadioSetRxConfig+0x2fc>)
 8017a42:	2201      	movs	r2, #1
 8017a44:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 8017a46:	f000 fc52 	bl	80182ee <RadioStandby>
            RadioSetModem( MODEM_FSK );
 8017a4a:	2000      	movs	r0, #0
 8017a4c:	f7ff fdfc 	bl	8017648 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8017a50:	4828      	ldr	r0, [pc, #160]	@ (8017af4 <RadioSetRxConfig+0x304>)
 8017a52:	f002 fa15 	bl	8019e80 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8017a56:	4828      	ldr	r0, [pc, #160]	@ (8017af8 <RadioSetRxConfig+0x308>)
 8017a58:	f002 fae4 	bl	801a024 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8017a5c:	4a28      	ldr	r2, [pc, #160]	@ (8017b00 <RadioSetRxConfig+0x310>)
 8017a5e:	f107 0314 	add.w	r3, r7, #20
 8017a62:	e892 0003 	ldmia.w	r2, {r0, r1}
 8017a66:	e883 0003 	stmia.w	r3, {r0, r1}
 8017a6a:	f107 0314 	add.w	r3, r7, #20
 8017a6e:	4618      	mov	r0, r3
 8017a70:	f001 fda5 	bl	80195be <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8017a74:	f240 10ff 	movw	r0, #511	@ 0x1ff
 8017a78:	f001 fdf0 	bl	801965c <SUBGRF_SetWhiteningSeed>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 8017a7c:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8017a7e:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8017a82:	fb02 f303 	mul.w	r3, r2, r3
 8017a86:	461a      	mov	r2, r3
 8017a88:	687b      	ldr	r3, [r7, #4]
 8017a8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8017a8e:	4a17      	ldr	r2, [pc, #92]	@ (8017aec <RadioSetRxConfig+0x2fc>)
 8017a90:	6093      	str	r3, [r2, #8]
            break;
 8017a92:	e0a0      	b.n	8017bd6 <RadioSetRxConfig+0x3e6>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 8017a94:	2000      	movs	r0, #0
 8017a96:	f001 ff59 	bl	801994c <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8017a9a:	4b14      	ldr	r3, [pc, #80]	@ (8017aec <RadioSetRxConfig+0x2fc>)
 8017a9c:	2201      	movs	r2, #1
 8017a9e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 8017aa2:	687b      	ldr	r3, [r7, #4]
 8017aa4:	b2da      	uxtb	r2, r3
 8017aa6:	4b11      	ldr	r3, [pc, #68]	@ (8017aec <RadioSetRxConfig+0x2fc>)
 8017aa8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 8017aac:	4a15      	ldr	r2, [pc, #84]	@ (8017b04 <RadioSetRxConfig+0x314>)
 8017aae:	68bb      	ldr	r3, [r7, #8]
 8017ab0:	4413      	add	r3, r2
 8017ab2:	781a      	ldrb	r2, [r3, #0]
 8017ab4:	4b0d      	ldr	r3, [pc, #52]	@ (8017aec <RadioSetRxConfig+0x2fc>)
 8017ab6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t )coderate;
 8017aba:	4a0c      	ldr	r2, [pc, #48]	@ (8017aec <RadioSetRxConfig+0x2fc>)
 8017abc:	7bbb      	ldrb	r3, [r7, #14]
 8017abe:	f882 3052 	strb.w	r3, [r2, #82]	@ 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8017ac2:	68bb      	ldr	r3, [r7, #8]
 8017ac4:	2b00      	cmp	r3, #0
 8017ac6:	d105      	bne.n	8017ad4 <RadioSetRxConfig+0x2e4>
 8017ac8:	687b      	ldr	r3, [r7, #4]
 8017aca:	2b0b      	cmp	r3, #11
 8017acc:	d008      	beq.n	8017ae0 <RadioSetRxConfig+0x2f0>
 8017ace:	687b      	ldr	r3, [r7, #4]
 8017ad0:	2b0c      	cmp	r3, #12
 8017ad2:	d005      	beq.n	8017ae0 <RadioSetRxConfig+0x2f0>
 8017ad4:	68bb      	ldr	r3, [r7, #8]
 8017ad6:	2b01      	cmp	r3, #1
 8017ad8:	d116      	bne.n	8017b08 <RadioSetRxConfig+0x318>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8017ada:	687b      	ldr	r3, [r7, #4]
 8017adc:	2b0c      	cmp	r3, #12
 8017ade:	d113      	bne.n	8017b08 <RadioSetRxConfig+0x318>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 8017ae0:	4b02      	ldr	r3, [pc, #8]	@ (8017aec <RadioSetRxConfig+0x2fc>)
 8017ae2:	2201      	movs	r2, #1
 8017ae4:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
 8017ae8:	e012      	b.n	8017b10 <RadioSetRxConfig+0x320>
 8017aea:	bf00      	nop
 8017aec:	20001cd0 	.word	0x20001cd0
 8017af0:	20000144 	.word	0x20000144
 8017af4:	20001d08 	.word	0x20001d08
 8017af8:	20001cde 	.word	0x20001cde
 8017afc:	0801f28c 	.word	0x0801f28c
 8017b00:	0801f294 	.word	0x0801f294
 8017b04:	0801f8f8 	.word	0x0801f8f8
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8017b08:	4b35      	ldr	r3, [pc, #212]	@ (8017be0 <RadioSetRxConfig+0x3f0>)
 8017b0a:	2200      	movs	r2, #0
 8017b0c:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8017b10:	4b33      	ldr	r3, [pc, #204]	@ (8017be0 <RadioSetRxConfig+0x3f0>)
 8017b12:	2201      	movs	r2, #1
 8017b14:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8017b16:	4b32      	ldr	r3, [pc, #200]	@ (8017be0 <RadioSetRxConfig+0x3f0>)
 8017b18:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8017b1c:	2b05      	cmp	r3, #5
 8017b1e:	d004      	beq.n	8017b2a <RadioSetRxConfig+0x33a>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 8017b20:	4b2f      	ldr	r3, [pc, #188]	@ (8017be0 <RadioSetRxConfig+0x3f0>)
 8017b22:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8017b26:	2b06      	cmp	r3, #6
 8017b28:	d10a      	bne.n	8017b40 <RadioSetRxConfig+0x350>
                if( preambleLen < 12 )
 8017b2a:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8017b2c:	2b0b      	cmp	r3, #11
 8017b2e:	d803      	bhi.n	8017b38 <RadioSetRxConfig+0x348>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 8017b30:	4b2b      	ldr	r3, [pc, #172]	@ (8017be0 <RadioSetRxConfig+0x3f0>)
 8017b32:	220c      	movs	r2, #12
 8017b34:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 8017b36:	e006      	b.n	8017b46 <RadioSetRxConfig+0x356>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8017b38:	4a29      	ldr	r2, [pc, #164]	@ (8017be0 <RadioSetRxConfig+0x3f0>)
 8017b3a:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8017b3c:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 8017b3e:	e002      	b.n	8017b46 <RadioSetRxConfig+0x356>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8017b40:	4a27      	ldr	r2, [pc, #156]	@ (8017be0 <RadioSetRxConfig+0x3f0>)
 8017b42:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8017b44:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 8017b46:	f897 203c 	ldrb.w	r2, [r7, #60]	@ 0x3c
 8017b4a:	4b25      	ldr	r3, [pc, #148]	@ (8017be0 <RadioSetRxConfig+0x3f0>)
 8017b4c:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8017b4e:	4b25      	ldr	r3, [pc, #148]	@ (8017be4 <RadioSetRxConfig+0x3f4>)
 8017b50:	781a      	ldrb	r2, [r3, #0]
 8017b52:	4b23      	ldr	r3, [pc, #140]	@ (8017be0 <RadioSetRxConfig+0x3f0>)
 8017b54:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 8017b56:	f897 2044 	ldrb.w	r2, [r7, #68]	@ 0x44
 8017b5a:	4b21      	ldr	r3, [pc, #132]	@ (8017be0 <RadioSetRxConfig+0x3f0>)
 8017b5c:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 8017b60:	f897 2050 	ldrb.w	r2, [r7, #80]	@ 0x50
 8017b64:	4b1e      	ldr	r3, [pc, #120]	@ (8017be0 <RadioSetRxConfig+0x3f0>)
 8017b66:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
            RadioStandby( );
 8017b6a:	f000 fbc0 	bl	80182ee <RadioStandby>
            RadioSetModem( MODEM_LORA );
 8017b6e:	2001      	movs	r0, #1
 8017b70:	f7ff fd6a 	bl	8017648 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8017b74:	481c      	ldr	r0, [pc, #112]	@ (8017be8 <RadioSetRxConfig+0x3f8>)
 8017b76:	f002 f983 	bl	8019e80 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8017b7a:	481c      	ldr	r0, [pc, #112]	@ (8017bec <RadioSetRxConfig+0x3fc>)
 8017b7c:	f002 fa52 	bl	801a024 <SUBGRF_SetPacketParams>
            SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 8017b80:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8017b82:	b2db      	uxtb	r3, r3
 8017b84:	4618      	mov	r0, r3
 8017b86:	f001 fef0 	bl	801996a <SUBGRF_SetLoRaSymbNumTimeout>
            if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 8017b8a:	4b15      	ldr	r3, [pc, #84]	@ (8017be0 <RadioSetRxConfig+0x3f0>)
 8017b8c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8017b90:	2b01      	cmp	r3, #1
 8017b92:	d10d      	bne.n	8017bb0 <RadioSetRxConfig+0x3c0>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 8017b94:	f240 7036 	movw	r0, #1846	@ 0x736
 8017b98:	f002 fba0 	bl	801a2dc <SUBGRF_ReadRegister>
 8017b9c:	4603      	mov	r3, r0
 8017b9e:	f023 0304 	bic.w	r3, r3, #4
 8017ba2:	b2db      	uxtb	r3, r3
 8017ba4:	4619      	mov	r1, r3
 8017ba6:	f240 7036 	movw	r0, #1846	@ 0x736
 8017baa:	f002 fb83 	bl	801a2b4 <SUBGRF_WriteRegister>
 8017bae:	e00c      	b.n	8017bca <RadioSetRxConfig+0x3da>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 8017bb0:	f240 7036 	movw	r0, #1846	@ 0x736
 8017bb4:	f002 fb92 	bl	801a2dc <SUBGRF_ReadRegister>
 8017bb8:	4603      	mov	r3, r0
 8017bba:	f043 0304 	orr.w	r3, r3, #4
 8017bbe:	b2db      	uxtb	r3, r3
 8017bc0:	4619      	mov	r1, r3
 8017bc2:	f240 7036 	movw	r0, #1846	@ 0x736
 8017bc6:	f002 fb75 	bl	801a2b4 <SUBGRF_WriteRegister>
            SubgRf.RxTimeout = 0xFFFF;
 8017bca:	4b05      	ldr	r3, [pc, #20]	@ (8017be0 <RadioSetRxConfig+0x3f0>)
 8017bcc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8017bd0:	609a      	str	r2, [r3, #8]
            break;
 8017bd2:	e000      	b.n	8017bd6 <RadioSetRxConfig+0x3e6>
            break;
 8017bd4:	bf00      	nop
    }
}
 8017bd6:	bf00      	nop
 8017bd8:	3728      	adds	r7, #40	@ 0x28
 8017bda:	46bd      	mov	sp, r7
 8017bdc:	bd80      	pop	{r7, pc}
 8017bde:	bf00      	nop
 8017be0:	20001cd0 	.word	0x20001cd0
 8017be4:	20000144 	.word	0x20000144
 8017be8:	20001d08 	.word	0x20001d08
 8017bec:	20001cde 	.word	0x20001cde

08017bf0 <RadioSetTxConfig>:
static void RadioSetTxConfig( RadioModems_t modem, int8_t power, uint32_t fdev,
                              uint32_t bandwidth, uint32_t datarate,
                              uint8_t coderate, uint16_t preambleLen,
                              bool fixLen, bool crcOn, bool freqHopOn,
                              uint8_t hopPeriod, bool iqInverted, uint32_t timeout )
{
 8017bf0:	b580      	push	{r7, lr}
 8017bf2:	b086      	sub	sp, #24
 8017bf4:	af00      	add	r7, sp, #0
 8017bf6:	60ba      	str	r2, [r7, #8]
 8017bf8:	607b      	str	r3, [r7, #4]
 8017bfa:	4603      	mov	r3, r0
 8017bfc:	73fb      	strb	r3, [r7, #15]
 8017bfe:	460b      	mov	r3, r1
 8017c00:	73bb      	strb	r3, [r7, #14]
    RFW_DeInit(); /* ST_WORKAROUND: Switch Off FwPacketDecoding by default */
 8017c02:	f002 fe2e 	bl	801a862 <RFW_DeInit>
    switch( modem )
 8017c06:	7bfb      	ldrb	r3, [r7, #15]
 8017c08:	2b04      	cmp	r3, #4
 8017c0a:	f000 80c7 	beq.w	8017d9c <RadioSetTxConfig+0x1ac>
 8017c0e:	2b04      	cmp	r3, #4
 8017c10:	f300 80d6 	bgt.w	8017dc0 <RadioSetTxConfig+0x1d0>
 8017c14:	2b00      	cmp	r3, #0
 8017c16:	d002      	beq.n	8017c1e <RadioSetTxConfig+0x2e>
 8017c18:	2b01      	cmp	r3, #1
 8017c1a:	d059      	beq.n	8017cd0 <RadioSetTxConfig+0xe0>
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
            break;
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 8017c1c:	e0d0      	b.n	8017dc0 <RadioSetTxConfig+0x1d0>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8017c1e:	4b74      	ldr	r3, [pc, #464]	@ (8017df0 <RadioSetTxConfig+0x200>)
 8017c20:	2200      	movs	r2, #0
 8017c22:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8017c26:	4a72      	ldr	r2, [pc, #456]	@ (8017df0 <RadioSetTxConfig+0x200>)
 8017c28:	6a3b      	ldr	r3, [r7, #32]
 8017c2a:	63d3      	str	r3, [r2, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8017c2c:	4b70      	ldr	r3, [pc, #448]	@ (8017df0 <RadioSetTxConfig+0x200>)
 8017c2e:	220b      	movs	r2, #11
 8017c30:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8017c34:	6878      	ldr	r0, [r7, #4]
 8017c36:	f002 fd47 	bl	801a6c8 <SUBGRF_GetFskBandwidthRegValue>
 8017c3a:	4603      	mov	r3, r0
 8017c3c:	461a      	mov	r2, r3
 8017c3e:	4b6c      	ldr	r3, [pc, #432]	@ (8017df0 <RadioSetTxConfig+0x200>)
 8017c40:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            SubgRf.ModulationParams.Params.Gfsk.Fdev = fdev;
 8017c44:	4a6a      	ldr	r2, [pc, #424]	@ (8017df0 <RadioSetTxConfig+0x200>)
 8017c46:	68bb      	ldr	r3, [r7, #8]
 8017c48:	6413      	str	r3, [r2, #64]	@ 0x40
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8017c4a:	4b69      	ldr	r3, [pc, #420]	@ (8017df0 <RadioSetTxConfig+0x200>)
 8017c4c:	2200      	movs	r2, #0
 8017c4e:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8017c50:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8017c52:	00db      	lsls	r3, r3, #3
 8017c54:	b29a      	uxth	r2, r3
 8017c56:	4b66      	ldr	r3, [pc, #408]	@ (8017df0 <RadioSetTxConfig+0x200>)
 8017c58:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 8017c5a:	4b65      	ldr	r3, [pc, #404]	@ (8017df0 <RadioSetTxConfig+0x200>)
 8017c5c:	2204      	movs	r2, #4
 8017c5e:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3 ; // convert byte into bit
 8017c60:	4b63      	ldr	r3, [pc, #396]	@ (8017df0 <RadioSetTxConfig+0x200>)
 8017c62:	2218      	movs	r2, #24
 8017c64:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8017c66:	4b62      	ldr	r3, [pc, #392]	@ (8017df0 <RadioSetTxConfig+0x200>)
 8017c68:	2200      	movs	r2, #0
 8017c6a:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 8017c6c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8017c70:	f083 0301 	eor.w	r3, r3, #1
 8017c74:	b2db      	uxtb	r3, r3
 8017c76:	461a      	mov	r2, r3
 8017c78:	4b5d      	ldr	r3, [pc, #372]	@ (8017df0 <RadioSetTxConfig+0x200>)
 8017c7a:	755a      	strb	r2, [r3, #21]
            if( crcOn == true )
 8017c7c:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8017c80:	2b00      	cmp	r3, #0
 8017c82:	d003      	beq.n	8017c8c <RadioSetTxConfig+0x9c>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 8017c84:	4b5a      	ldr	r3, [pc, #360]	@ (8017df0 <RadioSetTxConfig+0x200>)
 8017c86:	22f2      	movs	r2, #242	@ 0xf2
 8017c88:	75da      	strb	r2, [r3, #23]
 8017c8a:	e002      	b.n	8017c92 <RadioSetTxConfig+0xa2>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8017c8c:	4b58      	ldr	r3, [pc, #352]	@ (8017df0 <RadioSetTxConfig+0x200>)
 8017c8e:	2201      	movs	r2, #1
 8017c90:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8017c92:	4b57      	ldr	r3, [pc, #348]	@ (8017df0 <RadioSetTxConfig+0x200>)
 8017c94:	2201      	movs	r2, #1
 8017c96:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 8017c98:	f000 fb29 	bl	80182ee <RadioStandby>
            RadioSetModem(  MODEM_FSK  );
 8017c9c:	2000      	movs	r0, #0
 8017c9e:	f7ff fcd3 	bl	8017648 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8017ca2:	4854      	ldr	r0, [pc, #336]	@ (8017df4 <RadioSetTxConfig+0x204>)
 8017ca4:	f002 f8ec 	bl	8019e80 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8017ca8:	4853      	ldr	r0, [pc, #332]	@ (8017df8 <RadioSetTxConfig+0x208>)
 8017caa:	f002 f9bb 	bl	801a024 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8017cae:	4a53      	ldr	r2, [pc, #332]	@ (8017dfc <RadioSetTxConfig+0x20c>)
 8017cb0:	f107 0310 	add.w	r3, r7, #16
 8017cb4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8017cb8:	e883 0003 	stmia.w	r3, {r0, r1}
 8017cbc:	f107 0310 	add.w	r3, r7, #16
 8017cc0:	4618      	mov	r0, r3
 8017cc2:	f001 fc7c 	bl	80195be <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8017cc6:	f240 10ff 	movw	r0, #511	@ 0x1ff
 8017cca:	f001 fcc7 	bl	801965c <SUBGRF_SetWhiteningSeed>
            break;
 8017cce:	e078      	b.n	8017dc2 <RadioSetTxConfig+0x1d2>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8017cd0:	4b47      	ldr	r3, [pc, #284]	@ (8017df0 <RadioSetTxConfig+0x200>)
 8017cd2:	2201      	movs	r2, #1
 8017cd4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 8017cd8:	6a3b      	ldr	r3, [r7, #32]
 8017cda:	b2da      	uxtb	r2, r3
 8017cdc:	4b44      	ldr	r3, [pc, #272]	@ (8017df0 <RadioSetTxConfig+0x200>)
 8017cde:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 8017ce2:	4a47      	ldr	r2, [pc, #284]	@ (8017e00 <RadioSetTxConfig+0x210>)
 8017ce4:	687b      	ldr	r3, [r7, #4]
 8017ce6:	4413      	add	r3, r2
 8017ce8:	781a      	ldrb	r2, [r3, #0]
 8017cea:	4b41      	ldr	r3, [pc, #260]	@ (8017df0 <RadioSetTxConfig+0x200>)
 8017cec:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate= ( RadioLoRaCodingRates_t )coderate;
 8017cf0:	4a3f      	ldr	r2, [pc, #252]	@ (8017df0 <RadioSetTxConfig+0x200>)
 8017cf2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8017cf6:	f882 3052 	strb.w	r3, [r2, #82]	@ 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8017cfa:	687b      	ldr	r3, [r7, #4]
 8017cfc:	2b00      	cmp	r3, #0
 8017cfe:	d105      	bne.n	8017d0c <RadioSetTxConfig+0x11c>
 8017d00:	6a3b      	ldr	r3, [r7, #32]
 8017d02:	2b0b      	cmp	r3, #11
 8017d04:	d008      	beq.n	8017d18 <RadioSetTxConfig+0x128>
 8017d06:	6a3b      	ldr	r3, [r7, #32]
 8017d08:	2b0c      	cmp	r3, #12
 8017d0a:	d005      	beq.n	8017d18 <RadioSetTxConfig+0x128>
 8017d0c:	687b      	ldr	r3, [r7, #4]
 8017d0e:	2b01      	cmp	r3, #1
 8017d10:	d107      	bne.n	8017d22 <RadioSetTxConfig+0x132>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8017d12:	6a3b      	ldr	r3, [r7, #32]
 8017d14:	2b0c      	cmp	r3, #12
 8017d16:	d104      	bne.n	8017d22 <RadioSetTxConfig+0x132>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 8017d18:	4b35      	ldr	r3, [pc, #212]	@ (8017df0 <RadioSetTxConfig+0x200>)
 8017d1a:	2201      	movs	r2, #1
 8017d1c:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
 8017d20:	e003      	b.n	8017d2a <RadioSetTxConfig+0x13a>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8017d22:	4b33      	ldr	r3, [pc, #204]	@ (8017df0 <RadioSetTxConfig+0x200>)
 8017d24:	2200      	movs	r2, #0
 8017d26:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8017d2a:	4b31      	ldr	r3, [pc, #196]	@ (8017df0 <RadioSetTxConfig+0x200>)
 8017d2c:	2201      	movs	r2, #1
 8017d2e:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8017d30:	4b2f      	ldr	r3, [pc, #188]	@ (8017df0 <RadioSetTxConfig+0x200>)
 8017d32:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8017d36:	2b05      	cmp	r3, #5
 8017d38:	d004      	beq.n	8017d44 <RadioSetTxConfig+0x154>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 8017d3a:	4b2d      	ldr	r3, [pc, #180]	@ (8017df0 <RadioSetTxConfig+0x200>)
 8017d3c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8017d40:	2b06      	cmp	r3, #6
 8017d42:	d10a      	bne.n	8017d5a <RadioSetTxConfig+0x16a>
                if( preambleLen < 12 )
 8017d44:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8017d46:	2b0b      	cmp	r3, #11
 8017d48:	d803      	bhi.n	8017d52 <RadioSetTxConfig+0x162>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 8017d4a:	4b29      	ldr	r3, [pc, #164]	@ (8017df0 <RadioSetTxConfig+0x200>)
 8017d4c:	220c      	movs	r2, #12
 8017d4e:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 8017d50:	e006      	b.n	8017d60 <RadioSetTxConfig+0x170>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8017d52:	4a27      	ldr	r2, [pc, #156]	@ (8017df0 <RadioSetTxConfig+0x200>)
 8017d54:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8017d56:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 8017d58:	e002      	b.n	8017d60 <RadioSetTxConfig+0x170>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8017d5a:	4a25      	ldr	r2, [pc, #148]	@ (8017df0 <RadioSetTxConfig+0x200>)
 8017d5c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8017d5e:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 8017d60:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8017d64:	4b22      	ldr	r3, [pc, #136]	@ (8017df0 <RadioSetTxConfig+0x200>)
 8017d66:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8017d68:	4b26      	ldr	r3, [pc, #152]	@ (8017e04 <RadioSetTxConfig+0x214>)
 8017d6a:	781a      	ldrb	r2, [r3, #0]
 8017d6c:	4b20      	ldr	r3, [pc, #128]	@ (8017df0 <RadioSetTxConfig+0x200>)
 8017d6e:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 8017d70:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8017d74:	4b1e      	ldr	r3, [pc, #120]	@ (8017df0 <RadioSetTxConfig+0x200>)
 8017d76:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 8017d7a:	f897 203c 	ldrb.w	r2, [r7, #60]	@ 0x3c
 8017d7e:	4b1c      	ldr	r3, [pc, #112]	@ (8017df0 <RadioSetTxConfig+0x200>)
 8017d80:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
            RadioStandby( );
 8017d84:	f000 fab3 	bl	80182ee <RadioStandby>
            RadioSetModem( MODEM_LORA );
 8017d88:	2001      	movs	r0, #1
 8017d8a:	f7ff fc5d 	bl	8017648 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8017d8e:	4819      	ldr	r0, [pc, #100]	@ (8017df4 <RadioSetTxConfig+0x204>)
 8017d90:	f002 f876 	bl	8019e80 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8017d94:	4818      	ldr	r0, [pc, #96]	@ (8017df8 <RadioSetTxConfig+0x208>)
 8017d96:	f002 f945 	bl	801a024 <SUBGRF_SetPacketParams>
            break;
 8017d9a:	e012      	b.n	8017dc2 <RadioSetTxConfig+0x1d2>
            RadioSetModem(MODEM_SIGFOX_TX);
 8017d9c:	2004      	movs	r0, #4
 8017d9e:	f7ff fc53 	bl	8017648 <RadioSetModem>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 8017da2:	4b13      	ldr	r3, [pc, #76]	@ (8017df0 <RadioSetTxConfig+0x200>)
 8017da4:	2202      	movs	r2, #2
 8017da6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Bpsk.BitRate           = datarate;
 8017daa:	4a11      	ldr	r2, [pc, #68]	@ (8017df0 <RadioSetTxConfig+0x200>)
 8017dac:	6a3b      	ldr	r3, [r7, #32]
 8017dae:	6493      	str	r3, [r2, #72]	@ 0x48
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 8017db0:	4b0f      	ldr	r3, [pc, #60]	@ (8017df0 <RadioSetTxConfig+0x200>)
 8017db2:	2216      	movs	r2, #22
 8017db4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8017db8:	480e      	ldr	r0, [pc, #56]	@ (8017df4 <RadioSetTxConfig+0x204>)
 8017dba:	f002 f861 	bl	8019e80 <SUBGRF_SetModulationParams>
            break;
 8017dbe:	e000      	b.n	8017dc2 <RadioSetTxConfig+0x1d2>
            break;
 8017dc0:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 8017dc2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8017dc6:	4618      	mov	r0, r3
 8017dc8:	f002 fb90 	bl	801a4ec <SUBGRF_SetRfTxPower>
 8017dcc:	4603      	mov	r3, r0
 8017dce:	461a      	mov	r2, r3
 8017dd0:	4b07      	ldr	r3, [pc, #28]	@ (8017df0 <RadioSetTxConfig+0x200>)
 8017dd2:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect ); /* ST_WORKAROUND: ?????? */
 8017dd6:	4b06      	ldr	r3, [pc, #24]	@ (8017df0 <RadioSetTxConfig+0x200>)
 8017dd8:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8017ddc:	4618      	mov	r0, r3
 8017dde:	f002 fd54 	bl	801a88a <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 8017de2:	4a03      	ldr	r2, [pc, #12]	@ (8017df0 <RadioSetTxConfig+0x200>)
 8017de4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8017de6:	6053      	str	r3, [r2, #4]
}
 8017de8:	bf00      	nop
 8017dea:	3718      	adds	r7, #24
 8017dec:	46bd      	mov	sp, r7
 8017dee:	bd80      	pop	{r7, pc}
 8017df0:	20001cd0 	.word	0x20001cd0
 8017df4:	20001d08 	.word	0x20001d08
 8017df8:	20001cde 	.word	0x20001cde
 8017dfc:	0801f294 	.word	0x0801f294
 8017e00:	0801f8f8 	.word	0x0801f8f8
 8017e04:	20000144 	.word	0x20000144

08017e08 <RadioCheckRfFrequency>:

static bool RadioCheckRfFrequency( uint32_t frequency )
{
 8017e08:	b480      	push	{r7}
 8017e0a:	b083      	sub	sp, #12
 8017e0c:	af00      	add	r7, sp, #0
 8017e0e:	6078      	str	r0, [r7, #4]
    return true;
 8017e10:	2301      	movs	r3, #1
}
 8017e12:	4618      	mov	r0, r3
 8017e14:	370c      	adds	r7, #12
 8017e16:	46bd      	mov	sp, r7
 8017e18:	bc80      	pop	{r7}
 8017e1a:	4770      	bx	lr

08017e1c <RadioGetLoRaBandwidthInHz>:

static uint32_t RadioGetLoRaBandwidthInHz( RadioLoRaBandwidths_t bw )
{
 8017e1c:	b480      	push	{r7}
 8017e1e:	b085      	sub	sp, #20
 8017e20:	af00      	add	r7, sp, #0
 8017e22:	4603      	mov	r3, r0
 8017e24:	71fb      	strb	r3, [r7, #7]
    uint32_t bandwidthInHz = 0;
 8017e26:	2300      	movs	r3, #0
 8017e28:	60fb      	str	r3, [r7, #12]

    switch( bw )
 8017e2a:	79fb      	ldrb	r3, [r7, #7]
 8017e2c:	2b0a      	cmp	r3, #10
 8017e2e:	d83e      	bhi.n	8017eae <RadioGetLoRaBandwidthInHz+0x92>
 8017e30:	a201      	add	r2, pc, #4	@ (adr r2, 8017e38 <RadioGetLoRaBandwidthInHz+0x1c>)
 8017e32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017e36:	bf00      	nop
 8017e38:	08017e65 	.word	0x08017e65
 8017e3c:	08017e75 	.word	0x08017e75
 8017e40:	08017e85 	.word	0x08017e85
 8017e44:	08017e95 	.word	0x08017e95
 8017e48:	08017e9d 	.word	0x08017e9d
 8017e4c:	08017ea3 	.word	0x08017ea3
 8017e50:	08017ea9 	.word	0x08017ea9
 8017e54:	08017eaf 	.word	0x08017eaf
 8017e58:	08017e6d 	.word	0x08017e6d
 8017e5c:	08017e7d 	.word	0x08017e7d
 8017e60:	08017e8d 	.word	0x08017e8d
    {
    case LORA_BW_007:
        bandwidthInHz = 7812UL;
 8017e64:	f641 6384 	movw	r3, #7812	@ 0x1e84
 8017e68:	60fb      	str	r3, [r7, #12]
        break;
 8017e6a:	e020      	b.n	8017eae <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_010:
        bandwidthInHz = 10417UL;
 8017e6c:	f642 03b1 	movw	r3, #10417	@ 0x28b1
 8017e70:	60fb      	str	r3, [r7, #12]
        break;
 8017e72:	e01c      	b.n	8017eae <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_015:
        bandwidthInHz = 15625UL;
 8017e74:	f643 5309 	movw	r3, #15625	@ 0x3d09
 8017e78:	60fb      	str	r3, [r7, #12]
        break;
 8017e7a:	e018      	b.n	8017eae <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_020:
        bandwidthInHz = 20833UL;
 8017e7c:	f245 1361 	movw	r3, #20833	@ 0x5161
 8017e80:	60fb      	str	r3, [r7, #12]
        break;
 8017e82:	e014      	b.n	8017eae <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_031:
        bandwidthInHz = 31250UL;
 8017e84:	f647 2312 	movw	r3, #31250	@ 0x7a12
 8017e88:	60fb      	str	r3, [r7, #12]
        break;
 8017e8a:	e010      	b.n	8017eae <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_041:
        bandwidthInHz = 41667UL;
 8017e8c:	f24a 23c3 	movw	r3, #41667	@ 0xa2c3
 8017e90:	60fb      	str	r3, [r7, #12]
        break;
 8017e92:	e00c      	b.n	8017eae <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_062:
        bandwidthInHz = 62500UL;
 8017e94:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8017e98:	60fb      	str	r3, [r7, #12]
        break;
 8017e9a:	e008      	b.n	8017eae <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_125:
        bandwidthInHz = 125000UL;
 8017e9c:	4b07      	ldr	r3, [pc, #28]	@ (8017ebc <RadioGetLoRaBandwidthInHz+0xa0>)
 8017e9e:	60fb      	str	r3, [r7, #12]
        break;
 8017ea0:	e005      	b.n	8017eae <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_250:
        bandwidthInHz = 250000UL;
 8017ea2:	4b07      	ldr	r3, [pc, #28]	@ (8017ec0 <RadioGetLoRaBandwidthInHz+0xa4>)
 8017ea4:	60fb      	str	r3, [r7, #12]
        break;
 8017ea6:	e002      	b.n	8017eae <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_500:
        bandwidthInHz = 500000UL;
 8017ea8:	4b06      	ldr	r3, [pc, #24]	@ (8017ec4 <RadioGetLoRaBandwidthInHz+0xa8>)
 8017eaa:	60fb      	str	r3, [r7, #12]
        break;
 8017eac:	bf00      	nop
    }

    return bandwidthInHz;
 8017eae:	68fb      	ldr	r3, [r7, #12]
}
 8017eb0:	4618      	mov	r0, r3
 8017eb2:	3714      	adds	r7, #20
 8017eb4:	46bd      	mov	sp, r7
 8017eb6:	bc80      	pop	{r7}
 8017eb8:	4770      	bx	lr
 8017eba:	bf00      	nop
 8017ebc:	0001e848 	.word	0x0001e848
 8017ec0:	0003d090 	.word	0x0003d090
 8017ec4:	0007a120 	.word	0x0007a120

08017ec8 <RadioGetGfskTimeOnAirNumerator>:

static uint32_t RadioGetGfskTimeOnAirNumerator( uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 8017ec8:	b480      	push	{r7}
 8017eca:	b083      	sub	sp, #12
 8017ecc:	af00      	add	r7, sp, #0
 8017ece:	6078      	str	r0, [r7, #4]
 8017ed0:	4608      	mov	r0, r1
 8017ed2:	4611      	mov	r1, r2
 8017ed4:	461a      	mov	r2, r3
 8017ed6:	4603      	mov	r3, r0
 8017ed8:	70fb      	strb	r3, [r7, #3]
 8017eda:	460b      	mov	r3, r1
 8017edc:	803b      	strh	r3, [r7, #0]
 8017ede:	4613      	mov	r3, r2
 8017ee0:	70bb      	strb	r3, [r7, #2]
    /* ST_WORKAROUND_BEGIN: Simplified calculation without const values */
    return ( preambleLen << 3 ) +
 8017ee2:	883b      	ldrh	r3, [r7, #0]
 8017ee4:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8017ee6:	78ba      	ldrb	r2, [r7, #2]
 8017ee8:	f082 0201 	eor.w	r2, r2, #1
 8017eec:	b2d2      	uxtb	r2, r2
 8017eee:	2a00      	cmp	r2, #0
 8017ef0:	d001      	beq.n	8017ef6 <RadioGetGfskTimeOnAirNumerator+0x2e>
 8017ef2:	2208      	movs	r2, #8
 8017ef4:	e000      	b.n	8017ef8 <RadioGetGfskTimeOnAirNumerator+0x30>
 8017ef6:	2200      	movs	r2, #0
    return ( preambleLen << 3 ) +
 8017ef8:	4413      	add	r3, r2
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8017efa:	f103 0218 	add.w	r2, r3, #24
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 8017efe:	7c3b      	ldrb	r3, [r7, #16]
 8017f00:	7d39      	ldrb	r1, [r7, #20]
 8017f02:	2900      	cmp	r1, #0
 8017f04:	d001      	beq.n	8017f0a <RadioGetGfskTimeOnAirNumerator+0x42>
 8017f06:	2102      	movs	r1, #2
 8017f08:	e000      	b.n	8017f0c <RadioGetGfskTimeOnAirNumerator+0x44>
 8017f0a:	2100      	movs	r1, #0
 8017f0c:	440b      	add	r3, r1
 8017f0e:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8017f10:	4413      	add	r3, r2
    /* ST_WORKAROUND_END */
}
 8017f12:	4618      	mov	r0, r3
 8017f14:	370c      	adds	r7, #12
 8017f16:	46bd      	mov	sp, r7
 8017f18:	bc80      	pop	{r7}
 8017f1a:	4770      	bx	lr

08017f1c <RadioGetLoRaTimeOnAirNumerator>:

static uint32_t RadioGetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                                                uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 8017f1c:	b480      	push	{r7}
 8017f1e:	b08b      	sub	sp, #44	@ 0x2c
 8017f20:	af00      	add	r7, sp, #0
 8017f22:	60f8      	str	r0, [r7, #12]
 8017f24:	60b9      	str	r1, [r7, #8]
 8017f26:	4611      	mov	r1, r2
 8017f28:	461a      	mov	r2, r3
 8017f2a:	460b      	mov	r3, r1
 8017f2c:	71fb      	strb	r3, [r7, #7]
 8017f2e:	4613      	mov	r3, r2
 8017f30:	80bb      	strh	r3, [r7, #4]
    int32_t crDenom           = coderate + 4;
 8017f32:	79fb      	ldrb	r3, [r7, #7]
 8017f34:	3304      	adds	r3, #4
 8017f36:	617b      	str	r3, [r7, #20]
    bool    lowDatareOptimize = false;
 8017f38:	2300      	movs	r3, #0
 8017f3a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    // Ensure that the preamble length is at least 12 symbols when using SF5 or SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 8017f3e:	68bb      	ldr	r3, [r7, #8]
 8017f40:	2b05      	cmp	r3, #5
 8017f42:	d002      	beq.n	8017f4a <RadioGetLoRaTimeOnAirNumerator+0x2e>
 8017f44:	68bb      	ldr	r3, [r7, #8]
 8017f46:	2b06      	cmp	r3, #6
 8017f48:	d104      	bne.n	8017f54 <RadioGetLoRaTimeOnAirNumerator+0x38>
    {
        if( preambleLen < 12 )
 8017f4a:	88bb      	ldrh	r3, [r7, #4]
 8017f4c:	2b0b      	cmp	r3, #11
 8017f4e:	d801      	bhi.n	8017f54 <RadioGetLoRaTimeOnAirNumerator+0x38>
        {
            preambleLen = 12;
 8017f50:	230c      	movs	r3, #12
 8017f52:	80bb      	strh	r3, [r7, #4]
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8017f54:	68fb      	ldr	r3, [r7, #12]
 8017f56:	2b00      	cmp	r3, #0
 8017f58:	d105      	bne.n	8017f66 <RadioGetLoRaTimeOnAirNumerator+0x4a>
 8017f5a:	68bb      	ldr	r3, [r7, #8]
 8017f5c:	2b0b      	cmp	r3, #11
 8017f5e:	d008      	beq.n	8017f72 <RadioGetLoRaTimeOnAirNumerator+0x56>
 8017f60:	68bb      	ldr	r3, [r7, #8]
 8017f62:	2b0c      	cmp	r3, #12
 8017f64:	d005      	beq.n	8017f72 <RadioGetLoRaTimeOnAirNumerator+0x56>
 8017f66:	68fb      	ldr	r3, [r7, #12]
 8017f68:	2b01      	cmp	r3, #1
 8017f6a:	d105      	bne.n	8017f78 <RadioGetLoRaTimeOnAirNumerator+0x5c>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8017f6c:	68bb      	ldr	r3, [r7, #8]
 8017f6e:	2b0c      	cmp	r3, #12
 8017f70:	d102      	bne.n	8017f78 <RadioGetLoRaTimeOnAirNumerator+0x5c>
    {
        lowDatareOptimize = true;
 8017f72:	2301      	movs	r3, #1
 8017f74:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8017f78:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8017f7c:	00db      	lsls	r3, r3, #3
                            ( crcOn ? 16 : 0 ) -
 8017f7e:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8017f82:	2a00      	cmp	r2, #0
 8017f84:	d001      	beq.n	8017f8a <RadioGetLoRaTimeOnAirNumerator+0x6e>
 8017f86:	2210      	movs	r2, #16
 8017f88:	e000      	b.n	8017f8c <RadioGetLoRaTimeOnAirNumerator+0x70>
 8017f8a:	2200      	movs	r2, #0
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8017f8c:	4413      	add	r3, r2
 8017f8e:	461a      	mov	r2, r3
                            ( 4 * datarate ) +
 8017f90:	68bb      	ldr	r3, [r7, #8]
 8017f92:	009b      	lsls	r3, r3, #2
                            ( crcOn ? 16 : 0 ) -
 8017f94:	1ad3      	subs	r3, r2, r3
                            ( fixLen ? 0 : 20 );
 8017f96:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8017f9a:	2a00      	cmp	r2, #0
 8017f9c:	d001      	beq.n	8017fa2 <RadioGetLoRaTimeOnAirNumerator+0x86>
 8017f9e:	2200      	movs	r2, #0
 8017fa0:	e000      	b.n	8017fa4 <RadioGetLoRaTimeOnAirNumerator+0x88>
 8017fa2:	2214      	movs	r2, #20
                            ( 4 * datarate ) +
 8017fa4:	4413      	add	r3, r2
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8017fa6:	61fb      	str	r3, [r7, #28]

    if( datarate <= 6 )
 8017fa8:	68bb      	ldr	r3, [r7, #8]
 8017faa:	2b06      	cmp	r3, #6
 8017fac:	d803      	bhi.n	8017fb6 <RadioGetLoRaTimeOnAirNumerator+0x9a>
    {
        ceilDenominator = 4 * datarate;
 8017fae:	68bb      	ldr	r3, [r7, #8]
 8017fb0:	009b      	lsls	r3, r3, #2
 8017fb2:	623b      	str	r3, [r7, #32]
 8017fb4:	e00e      	b.n	8017fd4 <RadioGetLoRaTimeOnAirNumerator+0xb8>
    }
    else
    {
        ceilNumerator += 8;
 8017fb6:	69fb      	ldr	r3, [r7, #28]
 8017fb8:	3308      	adds	r3, #8
 8017fba:	61fb      	str	r3, [r7, #28]

        if( lowDatareOptimize == true )
 8017fbc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8017fc0:	2b00      	cmp	r3, #0
 8017fc2:	d004      	beq.n	8017fce <RadioGetLoRaTimeOnAirNumerator+0xb2>
        {
            ceilDenominator = 4 * ( datarate - 2 );
 8017fc4:	68bb      	ldr	r3, [r7, #8]
 8017fc6:	3b02      	subs	r3, #2
 8017fc8:	009b      	lsls	r3, r3, #2
 8017fca:	623b      	str	r3, [r7, #32]
 8017fcc:	e002      	b.n	8017fd4 <RadioGetLoRaTimeOnAirNumerator+0xb8>
        }
        else
        {
            ceilDenominator = 4 * datarate;
 8017fce:	68bb      	ldr	r3, [r7, #8]
 8017fd0:	009b      	lsls	r3, r3, #2
 8017fd2:	623b      	str	r3, [r7, #32]
        }
    }

    if( ceilNumerator < 0 )
 8017fd4:	69fb      	ldr	r3, [r7, #28]
 8017fd6:	2b00      	cmp	r3, #0
 8017fd8:	da01      	bge.n	8017fde <RadioGetLoRaTimeOnAirNumerator+0xc2>
    {
        ceilNumerator = 0;
 8017fda:	2300      	movs	r3, #0
 8017fdc:	61fb      	str	r3, [r7, #28]
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 8017fde:	69fa      	ldr	r2, [r7, #28]
 8017fe0:	6a3b      	ldr	r3, [r7, #32]
 8017fe2:	4413      	add	r3, r2
 8017fe4:	1e5a      	subs	r2, r3, #1
 8017fe6:	6a3b      	ldr	r3, [r7, #32]
 8017fe8:	fb92 f3f3 	sdiv	r3, r2, r3
 8017fec:	697a      	ldr	r2, [r7, #20]
 8017fee:	fb03 f202 	mul.w	r2, r3, r2
 8017ff2:	88bb      	ldrh	r3, [r7, #4]
 8017ff4:	4413      	add	r3, r2
    int32_t intermediate =
 8017ff6:	330c      	adds	r3, #12
 8017ff8:	61bb      	str	r3, [r7, #24]

    if( datarate <= 6 )
 8017ffa:	68bb      	ldr	r3, [r7, #8]
 8017ffc:	2b06      	cmp	r3, #6
 8017ffe:	d802      	bhi.n	8018006 <RadioGetLoRaTimeOnAirNumerator+0xea>
    {
        intermediate += 2;
 8018000:	69bb      	ldr	r3, [r7, #24]
 8018002:	3302      	adds	r3, #2
 8018004:	61bb      	str	r3, [r7, #24]
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 8018006:	69bb      	ldr	r3, [r7, #24]
 8018008:	009b      	lsls	r3, r3, #2
 801800a:	1c5a      	adds	r2, r3, #1
 801800c:	68bb      	ldr	r3, [r7, #8]
 801800e:	3b02      	subs	r3, #2
 8018010:	fa02 f303 	lsl.w	r3, r2, r3
}
 8018014:	4618      	mov	r0, r3
 8018016:	372c      	adds	r7, #44	@ 0x2c
 8018018:	46bd      	mov	sp, r7
 801801a:	bc80      	pop	{r7}
 801801c:	4770      	bx	lr
	...

08018020 <RadioTimeOnAir>:

static uint32_t RadioTimeOnAir( RadioModems_t modem, uint32_t bandwidth,
                                uint32_t datarate, uint8_t coderate,
                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                bool crcOn )
{
 8018020:	b580      	push	{r7, lr}
 8018022:	b08a      	sub	sp, #40	@ 0x28
 8018024:	af04      	add	r7, sp, #16
 8018026:	60b9      	str	r1, [r7, #8]
 8018028:	607a      	str	r2, [r7, #4]
 801802a:	461a      	mov	r2, r3
 801802c:	4603      	mov	r3, r0
 801802e:	73fb      	strb	r3, [r7, #15]
 8018030:	4613      	mov	r3, r2
 8018032:	73bb      	strb	r3, [r7, #14]
    uint32_t numerator = 0;
 8018034:	2300      	movs	r3, #0
 8018036:	617b      	str	r3, [r7, #20]
    uint32_t denominator = 1;
 8018038:	2301      	movs	r3, #1
 801803a:	613b      	str	r3, [r7, #16]

    switch( modem )
 801803c:	7bfb      	ldrb	r3, [r7, #15]
 801803e:	2b00      	cmp	r3, #0
 8018040:	d002      	beq.n	8018048 <RadioTimeOnAir+0x28>
 8018042:	2b01      	cmp	r3, #1
 8018044:	d017      	beq.n	8018076 <RadioTimeOnAir+0x56>
                                                                  fixLen, payloadLen, crcOn );
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
        }
        break;
    default:
        break;
 8018046:	e035      	b.n	80180b4 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetGfskTimeOnAirNumerator( datarate, coderate,
 8018048:	f897 0024 	ldrb.w	r0, [r7, #36]	@ 0x24
 801804c:	8c3a      	ldrh	r2, [r7, #32]
 801804e:	7bb9      	ldrb	r1, [r7, #14]
 8018050:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8018054:	9301      	str	r3, [sp, #4]
 8018056:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 801805a:	9300      	str	r3, [sp, #0]
 801805c:	4603      	mov	r3, r0
 801805e:	6878      	ldr	r0, [r7, #4]
 8018060:	f7ff ff32 	bl	8017ec8 <RadioGetGfskTimeOnAirNumerator>
 8018064:	4603      	mov	r3, r0
 8018066:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 801806a:	fb02 f303 	mul.w	r3, r2, r3
 801806e:	617b      	str	r3, [r7, #20]
            denominator = datarate;
 8018070:	687b      	ldr	r3, [r7, #4]
 8018072:	613b      	str	r3, [r7, #16]
        break;
 8018074:	e01e      	b.n	80180b4 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
 8018076:	8c39      	ldrh	r1, [r7, #32]
 8018078:	7bba      	ldrb	r2, [r7, #14]
 801807a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 801807e:	9302      	str	r3, [sp, #8]
 8018080:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8018084:	9301      	str	r3, [sp, #4]
 8018086:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 801808a:	9300      	str	r3, [sp, #0]
 801808c:	460b      	mov	r3, r1
 801808e:	6879      	ldr	r1, [r7, #4]
 8018090:	68b8      	ldr	r0, [r7, #8]
 8018092:	f7ff ff43 	bl	8017f1c <RadioGetLoRaTimeOnAirNumerator>
 8018096:	4603      	mov	r3, r0
 8018098:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 801809c:	fb02 f303 	mul.w	r3, r2, r3
 80180a0:	617b      	str	r3, [r7, #20]
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
 80180a2:	4a0a      	ldr	r2, [pc, #40]	@ (80180cc <RadioTimeOnAir+0xac>)
 80180a4:	68bb      	ldr	r3, [r7, #8]
 80180a6:	4413      	add	r3, r2
 80180a8:	781b      	ldrb	r3, [r3, #0]
 80180aa:	4618      	mov	r0, r3
 80180ac:	f7ff feb6 	bl	8017e1c <RadioGetLoRaBandwidthInHz>
 80180b0:	6138      	str	r0, [r7, #16]
        break;
 80180b2:	bf00      	nop
    }
    // Perform integral ceil()
    return DIVC( numerator, denominator ); /* ST_WORKAROUND : simplified calculation with macro usage */
 80180b4:	697a      	ldr	r2, [r7, #20]
 80180b6:	693b      	ldr	r3, [r7, #16]
 80180b8:	4413      	add	r3, r2
 80180ba:	1e5a      	subs	r2, r3, #1
 80180bc:	693b      	ldr	r3, [r7, #16]
 80180be:	fbb2 f3f3 	udiv	r3, r2, r3
}
 80180c2:	4618      	mov	r0, r3
 80180c4:	3718      	adds	r7, #24
 80180c6:	46bd      	mov	sp, r7
 80180c8:	bd80      	pop	{r7, pc}
 80180ca:	bf00      	nop
 80180cc:	0801f8f8 	.word	0x0801f8f8

080180d0 <RadioSend>:

static void RadioSend( uint8_t *buffer, uint8_t size )
{
 80180d0:	b580      	push	{r7, lr}
 80180d2:	b084      	sub	sp, #16
 80180d4:	af00      	add	r7, sp, #0
 80180d6:	6078      	str	r0, [r7, #4]
 80180d8:	460b      	mov	r3, r1
 80180da:	70fb      	strb	r3, [r7, #3]
    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_TX_DBG,
 80180dc:	2300      	movs	r3, #0
 80180de:	2200      	movs	r2, #0
 80180e0:	f240 2101 	movw	r1, #513	@ 0x201
 80180e4:	f240 2001 	movw	r0, #513	@ 0x201
 80180e8:	f001 fd34 	bl	8019b54 <SUBGRF_SetDioIrqParams>
    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    /* Set DBG pin */
    DBG_GPIO_RADIO_TX( SET );

    /* Set RF switch */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 80180ec:	4b71      	ldr	r3, [pc, #452]	@ (80182b4 <RadioSend+0x1e4>)
 80180ee:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 80180f2:	2101      	movs	r1, #1
 80180f4:	4618      	mov	r0, r3
 80180f6:	f002 f9d1 	bl	801a49c <SUBGRF_SetSwitch>
    /* WORKAROUND - Modulation Quality with 500 kHz LoRaTM Bandwidth*/
    /* RegTxModulation = @address 0x0889 */
    if( ( SubgRf.Modem == MODEM_LORA ) && ( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 ) )
 80180fa:	4b6e      	ldr	r3, [pc, #440]	@ (80182b4 <RadioSend+0x1e4>)
 80180fc:	781b      	ldrb	r3, [r3, #0]
 80180fe:	2b01      	cmp	r3, #1
 8018100:	d112      	bne.n	8018128 <RadioSend+0x58>
 8018102:	4b6c      	ldr	r3, [pc, #432]	@ (80182b4 <RadioSend+0x1e4>)
 8018104:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8018108:	2b06      	cmp	r3, #6
 801810a:	d10d      	bne.n	8018128 <RadioSend+0x58>
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 801810c:	f640 0089 	movw	r0, #2185	@ 0x889
 8018110:	f002 f8e4 	bl	801a2dc <SUBGRF_ReadRegister>
 8018114:	4603      	mov	r3, r0
 8018116:	f023 0304 	bic.w	r3, r3, #4
 801811a:	b2db      	uxtb	r3, r3
 801811c:	4619      	mov	r1, r3
 801811e:	f640 0089 	movw	r0, #2185	@ 0x889
 8018122:	f002 f8c7 	bl	801a2b4 <SUBGRF_WriteRegister>
 8018126:	e00c      	b.n	8018142 <RadioSend+0x72>
    }
    else
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 8018128:	f640 0089 	movw	r0, #2185	@ 0x889
 801812c:	f002 f8d6 	bl	801a2dc <SUBGRF_ReadRegister>
 8018130:	4603      	mov	r3, r0
 8018132:	f043 0304 	orr.w	r3, r3, #4
 8018136:	b2db      	uxtb	r3, r3
 8018138:	4619      	mov	r1, r3
 801813a:	f640 0089 	movw	r0, #2185	@ 0x889
 801813e:	f002 f8b9 	bl	801a2b4 <SUBGRF_WriteRegister>
    }
    /* WORKAROUND END */
    switch( SubgRf.Modem )
 8018142:	4b5c      	ldr	r3, [pc, #368]	@ (80182b4 <RadioSend+0x1e4>)
 8018144:	781b      	ldrb	r3, [r3, #0]
 8018146:	2b04      	cmp	r3, #4
 8018148:	f200 80a7 	bhi.w	801829a <RadioSend+0x1ca>
 801814c:	a201      	add	r2, pc, #4	@ (adr r2, 8018154 <RadioSend+0x84>)
 801814e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018152:	bf00      	nop
 8018154:	08018183 	.word	0x08018183
 8018158:	08018169 	.word	0x08018169
 801815c:	08018183 	.word	0x08018183
 8018160:	080181e3 	.word	0x080181e3
 8018164:	08018203 	.word	0x08018203
    {
        case MODEM_LORA:
        {
            SubgRf.PacketParams.Params.LoRa.PayloadLength = size;
 8018168:	4a52      	ldr	r2, [pc, #328]	@ (80182b4 <RadioSend+0x1e4>)
 801816a:	78fb      	ldrb	r3, [r7, #3]
 801816c:	77d3      	strb	r3, [r2, #31]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801816e:	4852      	ldr	r0, [pc, #328]	@ (80182b8 <RadioSend+0x1e8>)
 8018170:	f001 ff58 	bl	801a024 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 8018174:	78fb      	ldrb	r3, [r7, #3]
 8018176:	2200      	movs	r2, #0
 8018178:	4619      	mov	r1, r3
 801817a:	6878      	ldr	r0, [r7, #4]
 801817c:	f001 fa0c 	bl	8019598 <SUBGRF_SendPayload>
            break;
 8018180:	e08c      	b.n	801829c <RadioSend+0x1cc>
        }
        case MODEM_MSK:
        case MODEM_FSK:
        {
            if ( 1UL == RFW_Is_Init( ) )
 8018182:	f002 fb74 	bl	801a86e <RFW_Is_Init>
 8018186:	4603      	mov	r3, r0
 8018188:	2b01      	cmp	r3, #1
 801818a:	d11d      	bne.n	80181c8 <RadioSend+0xf8>
            {
              uint8_t outsize;
              if ( 0UL == RFW_TransmitInit( buffer,size, &outsize ) )
 801818c:	f107 020d 	add.w	r2, r7, #13
 8018190:	78fb      	ldrb	r3, [r7, #3]
 8018192:	4619      	mov	r1, r3
 8018194:	6878      	ldr	r0, [r7, #4]
 8018196:	f002 fb82 	bl	801a89e <RFW_TransmitInit>
 801819a:	4603      	mov	r3, r0
 801819c:	2b00      	cmp	r3, #0
 801819e:	d10c      	bne.n	80181ba <RadioSend+0xea>
              {
                  SubgRf.PacketParams.Params.Gfsk.PayloadLength = outsize;
 80181a0:	7b7a      	ldrb	r2, [r7, #13]
 80181a2:	4b44      	ldr	r3, [pc, #272]	@ (80182b4 <RadioSend+0x1e4>)
 80181a4:	759a      	strb	r2, [r3, #22]
                  SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80181a6:	4844      	ldr	r0, [pc, #272]	@ (80182b8 <RadioSend+0x1e8>)
 80181a8:	f001 ff3c 	bl	801a024 <SUBGRF_SetPacketParams>
                  SUBGRF_SendPayload( buffer, outsize, 0 );
 80181ac:	7b7b      	ldrb	r3, [r7, #13]
 80181ae:	2200      	movs	r2, #0
 80181b0:	4619      	mov	r1, r3
 80181b2:	6878      	ldr	r0, [r7, #4]
 80181b4:	f001 f9f0 	bl	8019598 <SUBGRF_SendPayload>
            {
              SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
              SUBGRF_SetPacketParams( &SubgRf.PacketParams );
              SUBGRF_SendPayload( buffer, size, 0 );
            }
            break;
 80181b8:	e070      	b.n	801829c <RadioSend+0x1cc>
                MW_LOG( TS_ON, VLEVEL_M, "RadioSend Oversize\r\n");
 80181ba:	4b40      	ldr	r3, [pc, #256]	@ (80182bc <RadioSend+0x1ec>)
 80181bc:	2201      	movs	r2, #1
 80181be:	2100      	movs	r1, #0
 80181c0:	2002      	movs	r0, #2
 80181c2:	f003 fc8b 	bl	801badc <UTIL_ADV_TRACE_COND_FSend>
 80181c6:	e072      	b.n	80182ae <RadioSend+0x1de>
              SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
 80181c8:	4a3a      	ldr	r2, [pc, #232]	@ (80182b4 <RadioSend+0x1e4>)
 80181ca:	78fb      	ldrb	r3, [r7, #3]
 80181cc:	7593      	strb	r3, [r2, #22]
              SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80181ce:	483a      	ldr	r0, [pc, #232]	@ (80182b8 <RadioSend+0x1e8>)
 80181d0:	f001 ff28 	bl	801a024 <SUBGRF_SetPacketParams>
              SUBGRF_SendPayload( buffer, size, 0 );
 80181d4:	78fb      	ldrb	r3, [r7, #3]
 80181d6:	2200      	movs	r2, #0
 80181d8:	4619      	mov	r1, r3
 80181da:	6878      	ldr	r0, [r7, #4]
 80181dc:	f001 f9dc 	bl	8019598 <SUBGRF_SendPayload>
            break;
 80181e0:	e05c      	b.n	801829c <RadioSend+0x1cc>
        }
        case MODEM_BPSK:
        {
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 80181e2:	4b34      	ldr	r3, [pc, #208]	@ (80182b4 <RadioSend+0x1e4>)
 80181e4:	2202      	movs	r2, #2
 80181e6:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size;
 80181e8:	4a32      	ldr	r2, [pc, #200]	@ (80182b4 <RadioSend+0x1e4>)
 80181ea:	78fb      	ldrb	r3, [r7, #3]
 80181ec:	7693      	strb	r3, [r2, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80181ee:	4832      	ldr	r0, [pc, #200]	@ (80182b8 <RadioSend+0x1e8>)
 80181f0:	f001 ff18 	bl	801a024 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 80181f4:	78fb      	ldrb	r3, [r7, #3]
 80181f6:	2200      	movs	r2, #0
 80181f8:	4619      	mov	r1, r3
 80181fa:	6878      	ldr	r0, [r7, #4]
 80181fc:	f001 f9cc 	bl	8019598 <SUBGRF_SendPayload>
            break;
 8018200:	e04c      	b.n	801829c <RadioSend+0x1cc>
        case MODEM_SIGFOX_TX:
        {
            /* from bpsk to dbpsk */
            /* first 1 bit duplicated */
            /* RadioBuffer is 1 bytes more */
            payload_integration( RadioBuffer, buffer, size );
 8018202:	78fb      	ldrb	r3, [r7, #3]
 8018204:	461a      	mov	r2, r3
 8018206:	6879      	ldr	r1, [r7, #4]
 8018208:	482d      	ldr	r0, [pc, #180]	@ (80182c0 <RadioSend+0x1f0>)
 801820a:	f000 fcbc 	bl	8018b86 <payload_integration>

            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 801820e:	4b29      	ldr	r3, [pc, #164]	@ (80182b4 <RadioSend+0x1e4>)
 8018210:	2202      	movs	r2, #2
 8018212:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size + 1;
 8018214:	78fb      	ldrb	r3, [r7, #3]
 8018216:	3301      	adds	r3, #1
 8018218:	b2da      	uxtb	r2, r3
 801821a:	4b26      	ldr	r3, [pc, #152]	@ (80182b4 <RadioSend+0x1e4>)
 801821c:	769a      	strb	r2, [r3, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801821e:	4826      	ldr	r0, [pc, #152]	@ (80182b8 <RadioSend+0x1e8>)
 8018220:	f001 ff00 	bl	801a024 <SUBGRF_SetPacketParams>

            RadioWrite( SUBGHZ_RAM_RAMPUPL, 0 ); // clean start-up LSB
 8018224:	2100      	movs	r1, #0
 8018226:	20f1      	movs	r0, #241	@ 0xf1
 8018228:	f000 f95c 	bl	80184e4 <RadioWrite>
            RadioWrite( SUBGHZ_RAM_RAMPUPH, 0 ); // clean start-up MSB
 801822c:	2100      	movs	r1, #0
 801822e:	20f0      	movs	r0, #240	@ 0xf0
 8018230:	f000 f958 	bl	80184e4 <RadioWrite>
            if( SubgRf.ModulationParams.Params.Bpsk.BitRate == 100 )
 8018234:	4b1f      	ldr	r3, [pc, #124]	@ (80182b4 <RadioSend+0x1e4>)
 8018236:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8018238:	2b64      	cmp	r3, #100	@ 0x64
 801823a:	d108      	bne.n	801824e <RadioSend+0x17e>
            {
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0x70 ); // clean end of frame LSB
 801823c:	2170      	movs	r1, #112	@ 0x70
 801823e:	20f3      	movs	r0, #243	@ 0xf3
 8018240:	f000 f950 	bl	80184e4 <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x1D ); // clean end of frame MSB
 8018244:	211d      	movs	r1, #29
 8018246:	20f2      	movs	r0, #242	@ 0xf2
 8018248:	f000 f94c 	bl	80184e4 <RadioWrite>
 801824c:	e007      	b.n	801825e <RadioSend+0x18e>
            }
            else // 600 bps
            {
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0xE1 ); // clean end of frame LSB
 801824e:	21e1      	movs	r1, #225	@ 0xe1
 8018250:	20f3      	movs	r0, #243	@ 0xf3
 8018252:	f000 f947 	bl	80184e4 <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x04 ); // clean end of frame MSB
 8018256:	2104      	movs	r1, #4
 8018258:	20f2      	movs	r0, #242	@ 0xf2
 801825a:	f000 f943 	bl	80184e4 <RadioWrite>
            }

            uint16_t bitNum = ( size * 8 ) + 2;
 801825e:	78fb      	ldrb	r3, [r7, #3]
 8018260:	b29b      	uxth	r3, r3
 8018262:	00db      	lsls	r3, r3, #3
 8018264:	b29b      	uxth	r3, r3
 8018266:	3302      	adds	r3, #2
 8018268:	81fb      	strh	r3, [r7, #14]
            RadioWrite( SUBGHZ_RAM_FRAMELIMH, ( bitNum >> 8 ) & 0x00FF );    // limit frame
 801826a:	89fb      	ldrh	r3, [r7, #14]
 801826c:	0a1b      	lsrs	r3, r3, #8
 801826e:	b29b      	uxth	r3, r3
 8018270:	b2db      	uxtb	r3, r3
 8018272:	4619      	mov	r1, r3
 8018274:	20f4      	movs	r0, #244	@ 0xf4
 8018276:	f000 f935 	bl	80184e4 <RadioWrite>
            RadioWrite( SUBGHZ_RAM_FRAMELIML, bitNum & 0x00FF );             // limit frame
 801827a:	89fb      	ldrh	r3, [r7, #14]
 801827c:	b2db      	uxtb	r3, r3
 801827e:	4619      	mov	r1, r3
 8018280:	20f5      	movs	r0, #245	@ 0xf5
 8018282:	f000 f92f 	bl	80184e4 <RadioWrite>
            SUBGRF_SendPayload( RadioBuffer, size+1 , 0xFFFFFF );
 8018286:	78fb      	ldrb	r3, [r7, #3]
 8018288:	3301      	adds	r3, #1
 801828a:	b2db      	uxtb	r3, r3
 801828c:	f06f 427f 	mvn.w	r2, #4278190080	@ 0xff000000
 8018290:	4619      	mov	r1, r3
 8018292:	480b      	ldr	r0, [pc, #44]	@ (80182c0 <RadioSend+0x1f0>)
 8018294:	f001 f980 	bl	8019598 <SUBGRF_SendPayload>
            break;
 8018298:	e000      	b.n	801829c <RadioSend+0x1cc>
        }
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 801829a:	bf00      	nop
    }

    TimerSetValue( &TxTimeoutTimer, SubgRf.TxTimeout );
 801829c:	4b05      	ldr	r3, [pc, #20]	@ (80182b4 <RadioSend+0x1e4>)
 801829e:	685b      	ldr	r3, [r3, #4]
 80182a0:	4619      	mov	r1, r3
 80182a2:	4808      	ldr	r0, [pc, #32]	@ (80182c4 <RadioSend+0x1f4>)
 80182a4:	f003 fa80 	bl	801b7a8 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 80182a8:	4806      	ldr	r0, [pc, #24]	@ (80182c4 <RadioSend+0x1f4>)
 80182aa:	f003 f99f 	bl	801b5ec <UTIL_TIMER_Start>
}
 80182ae:	3710      	adds	r7, #16
 80182b0:	46bd      	mov	sp, r7
 80182b2:	bd80      	pop	{r7, pc}
 80182b4:	20001cd0 	.word	0x20001cd0
 80182b8:	20001cde 	.word	0x20001cde
 80182bc:	0801f29c 	.word	0x0801f29c
 80182c0:	20001bcc 	.word	0x20001bcc
 80182c4:	20001d2c 	.word	0x20001d2c

080182c8 <RadioSleep>:

static void RadioSleep( void )
{
 80182c8:	b580      	push	{r7, lr}
 80182ca:	b082      	sub	sp, #8
 80182cc:	af00      	add	r7, sp, #0
    SleepParams_t params = { 0 };
 80182ce:	2300      	movs	r3, #0
 80182d0:	713b      	strb	r3, [r7, #4]

    params.Fields.WarmStart = 1;
 80182d2:	793b      	ldrb	r3, [r7, #4]
 80182d4:	f043 0304 	orr.w	r3, r3, #4
 80182d8:	713b      	strb	r3, [r7, #4]
    SUBGRF_SetSleep( params );
 80182da:	7938      	ldrb	r0, [r7, #4]
 80182dc:	f001 fa38 	bl	8019750 <SUBGRF_SetSleep>

    RADIO_DELAY_MS( 2 );
 80182e0:	2002      	movs	r0, #2
 80182e2:	f7e9 ff9d 	bl	8002220 <HAL_Delay>
}
 80182e6:	bf00      	nop
 80182e8:	3708      	adds	r7, #8
 80182ea:	46bd      	mov	sp, r7
 80182ec:	bd80      	pop	{r7, pc}

080182ee <RadioStandby>:

static void RadioStandby( void )
{
 80182ee:	b580      	push	{r7, lr}
 80182f0:	af00      	add	r7, sp, #0
    SUBGRF_SetStandby( STDBY_RC );
 80182f2:	2000      	movs	r0, #0
 80182f4:	f001 fa5e 	bl	80197b4 <SUBGRF_SetStandby>
}
 80182f8:	bf00      	nop
 80182fa:	bd80      	pop	{r7, pc}

080182fc <RadioRx>:

static void RadioRx( uint32_t timeout )
{
 80182fc:	b580      	push	{r7, lr}
 80182fe:	b082      	sub	sp, #8
 8018300:	af00      	add	r7, sp, #0
 8018302:	6078      	str	r0, [r7, #4]
    if( 1UL == RFW_Is_Init( ) )
 8018304:	f002 fab3 	bl	801a86e <RFW_Is_Init>
 8018308:	4603      	mov	r3, r0
 801830a:	2b01      	cmp	r3, #1
 801830c:	d102      	bne.n	8018314 <RadioRx+0x18>
    {
        RFW_ReceiveInit( );
 801830e:	f002 fad6 	bl	801a8be <RFW_ReceiveInit>
 8018312:	e007      	b.n	8018324 <RadioRx+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8018314:	2300      	movs	r3, #0
 8018316:	2200      	movs	r2, #0
 8018318:	f240 2162 	movw	r1, #610	@ 0x262
 801831c:	f240 2062 	movw	r0, #610	@ 0x262
 8018320:	f001 fc18 	bl	8019b54 <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }

    if( timeout != 0 )
 8018324:	687b      	ldr	r3, [r7, #4]
 8018326:	2b00      	cmp	r3, #0
 8018328:	d006      	beq.n	8018338 <RadioRx+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 801832a:	6879      	ldr	r1, [r7, #4]
 801832c:	4811      	ldr	r0, [pc, #68]	@ (8018374 <RadioRx+0x78>)
 801832e:	f003 fa3b 	bl	801b7a8 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 8018332:	4810      	ldr	r0, [pc, #64]	@ (8018374 <RadioRx+0x78>)
 8018334:	f003 f95a 	bl	801b5ec <UTIL_TIMER_Start>
    }
    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8018338:	4b0f      	ldr	r3, [pc, #60]	@ (8018378 <RadioRx+0x7c>)
 801833a:	2200      	movs	r2, #0
 801833c:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 801833e:	4b0e      	ldr	r3, [pc, #56]	@ (8018378 <RadioRx+0x7c>)
 8018340:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8018344:	2100      	movs	r1, #0
 8018346:	4618      	mov	r0, r3
 8018348:	f002 f8a8 	bl	801a49c <SUBGRF_SetSwitch>
    /* ST_WORKAROUND_END */

    if( SubgRf.RxContinuous == true )
 801834c:	4b0a      	ldr	r3, [pc, #40]	@ (8018378 <RadioRx+0x7c>)
 801834e:	785b      	ldrb	r3, [r3, #1]
 8018350:	2b00      	cmp	r3, #0
 8018352:	d004      	beq.n	801835e <RadioRx+0x62>
    {
        SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 8018354:	f06f 407f 	mvn.w	r0, #4278190080	@ 0xff000000
 8018358:	f001 fa68 	bl	801982c <SUBGRF_SetRx>
    }
    else
    {
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
    }
}
 801835c:	e005      	b.n	801836a <RadioRx+0x6e>
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
 801835e:	4b06      	ldr	r3, [pc, #24]	@ (8018378 <RadioRx+0x7c>)
 8018360:	689b      	ldr	r3, [r3, #8]
 8018362:	019b      	lsls	r3, r3, #6
 8018364:	4618      	mov	r0, r3
 8018366:	f001 fa61 	bl	801982c <SUBGRF_SetRx>
}
 801836a:	bf00      	nop
 801836c:	3708      	adds	r7, #8
 801836e:	46bd      	mov	sp, r7
 8018370:	bd80      	pop	{r7, pc}
 8018372:	bf00      	nop
 8018374:	20001d44 	.word	0x20001d44
 8018378:	20001cd0 	.word	0x20001cd0

0801837c <RadioRxBoosted>:

static void RadioRxBoosted( uint32_t timeout )
{
 801837c:	b580      	push	{r7, lr}
 801837e:	b082      	sub	sp, #8
 8018380:	af00      	add	r7, sp, #0
 8018382:	6078      	str	r0, [r7, #4]
    if( 1UL == RFW_Is_Init() )
 8018384:	f002 fa73 	bl	801a86e <RFW_Is_Init>
 8018388:	4603      	mov	r3, r0
 801838a:	2b01      	cmp	r3, #1
 801838c:	d102      	bne.n	8018394 <RadioRxBoosted+0x18>
    {
        RFW_ReceiveInit();
 801838e:	f002 fa96 	bl	801a8be <RFW_ReceiveInit>
 8018392:	e007      	b.n	80183a4 <RadioRxBoosted+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8018394:	2300      	movs	r3, #0
 8018396:	2200      	movs	r2, #0
 8018398:	f240 2162 	movw	r1, #610	@ 0x262
 801839c:	f240 2062 	movw	r0, #610	@ 0x262
 80183a0:	f001 fbd8 	bl	8019b54 <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }
    if( timeout != 0 )
 80183a4:	687b      	ldr	r3, [r7, #4]
 80183a6:	2b00      	cmp	r3, #0
 80183a8:	d006      	beq.n	80183b8 <RadioRxBoosted+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 80183aa:	6879      	ldr	r1, [r7, #4]
 80183ac:	4811      	ldr	r0, [pc, #68]	@ (80183f4 <RadioRxBoosted+0x78>)
 80183ae:	f003 f9fb 	bl	801b7a8 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 80183b2:	4810      	ldr	r0, [pc, #64]	@ (80183f4 <RadioRxBoosted+0x78>)
 80183b4:	f003 f91a 	bl	801b5ec <UTIL_TIMER_Start>
    }
    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 80183b8:	4b0f      	ldr	r3, [pc, #60]	@ (80183f8 <RadioRxBoosted+0x7c>)
 80183ba:	2200      	movs	r2, #0
 80183bc:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 80183be:	4b0e      	ldr	r3, [pc, #56]	@ (80183f8 <RadioRxBoosted+0x7c>)
 80183c0:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 80183c4:	2100      	movs	r1, #0
 80183c6:	4618      	mov	r0, r3
 80183c8:	f002 f868 	bl	801a49c <SUBGRF_SetSwitch>
    /* ST_WORKAROUND_END */

    if( SubgRf.RxContinuous == true )
 80183cc:	4b0a      	ldr	r3, [pc, #40]	@ (80183f8 <RadioRxBoosted+0x7c>)
 80183ce:	785b      	ldrb	r3, [r3, #1]
 80183d0:	2b00      	cmp	r3, #0
 80183d2:	d004      	beq.n	80183de <RadioRxBoosted+0x62>
    {
        SUBGRF_SetRxBoosted( 0xFFFFFF ); // Rx Continuous
 80183d4:	f06f 407f 	mvn.w	r0, #4278190080	@ 0xff000000
 80183d8:	f001 fa48 	bl	801986c <SUBGRF_SetRxBoosted>
    }
    else
    {
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
    }
}
 80183dc:	e005      	b.n	80183ea <RadioRxBoosted+0x6e>
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
 80183de:	4b06      	ldr	r3, [pc, #24]	@ (80183f8 <RadioRxBoosted+0x7c>)
 80183e0:	689b      	ldr	r3, [r3, #8]
 80183e2:	019b      	lsls	r3, r3, #6
 80183e4:	4618      	mov	r0, r3
 80183e6:	f001 fa41 	bl	801986c <SUBGRF_SetRxBoosted>
}
 80183ea:	bf00      	nop
 80183ec:	3708      	adds	r7, #8
 80183ee:	46bd      	mov	sp, r7
 80183f0:	bd80      	pop	{r7, pc}
 80183f2:	bf00      	nop
 80183f4:	20001d44 	.word	0x20001d44
 80183f8:	20001cd0 	.word	0x20001cd0

080183fc <RadioSetRxDutyCycle>:

static void RadioSetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 80183fc:	b580      	push	{r7, lr}
 80183fe:	b082      	sub	sp, #8
 8018400:	af00      	add	r7, sp, #0
 8018402:	6078      	str	r0, [r7, #4]
 8018404:	6039      	str	r1, [r7, #0]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 2 * rxTime + sleepTime;
 8018406:	687b      	ldr	r3, [r7, #4]
 8018408:	005a      	lsls	r2, r3, #1
 801840a:	683b      	ldr	r3, [r7, #0]
 801840c:	4413      	add	r3, r2
 801840e:	4a0c      	ldr	r2, [pc, #48]	@ (8018440 <RadioSetRxDutyCycle+0x44>)
 8018410:	6593      	str	r3, [r2, #88]	@ 0x58
    /*Enable also the IRQ_PREAMBLE_DETECTED*/
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8018412:	2300      	movs	r3, #0
 8018414:	2200      	movs	r2, #0
 8018416:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 801841a:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 801841e:	f001 fb99 	bl	8019b54 <SUBGRF_SetDioIrqParams>
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8018422:	4b07      	ldr	r3, [pc, #28]	@ (8018440 <RadioSetRxDutyCycle+0x44>)
 8018424:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8018428:	2100      	movs	r1, #0
 801842a:	4618      	mov	r0, r3
 801842c:	f002 f836 	bl	801a49c <SUBGRF_SetSwitch>
    /* Start Rx DutyCycle*/
    SUBGRF_SetRxDutyCycle( rxTime, sleepTime );
 8018430:	6839      	ldr	r1, [r7, #0]
 8018432:	6878      	ldr	r0, [r7, #4]
 8018434:	f001 fa3e 	bl	80198b4 <SUBGRF_SetRxDutyCycle>
}
 8018438:	bf00      	nop
 801843a:	3708      	adds	r7, #8
 801843c:	46bd      	mov	sp, r7
 801843e:	bd80      	pop	{r7, pc}
 8018440:	20001cd0 	.word	0x20001cd0

08018444 <RadioStartCad>:

static void RadioStartCad( void )
{
 8018444:	b580      	push	{r7, lr}
 8018446:	af00      	add	r7, sp, #0
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8018448:	4b09      	ldr	r3, [pc, #36]	@ (8018470 <RadioStartCad+0x2c>)
 801844a:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 801844e:	2100      	movs	r1, #0
 8018450:	4618      	mov	r0, r3
 8018452:	f002 f823 	bl	801a49c <SUBGRF_SetSwitch>

    SUBGRF_SetDioIrqParams( IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
 8018456:	2300      	movs	r3, #0
 8018458:	2200      	movs	r2, #0
 801845a:	f44f 71c0 	mov.w	r1, #384	@ 0x180
 801845e:	f44f 70c0 	mov.w	r0, #384	@ 0x180
 8018462:	f001 fb77 	bl	8019b54 <SUBGRF_SetDioIrqParams>
                            IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
                            IRQ_RADIO_NONE,
                            IRQ_RADIO_NONE );
    SUBGRF_SetCad( );
 8018466:	f001 fa51 	bl	801990c <SUBGRF_SetCad>
}
 801846a:	bf00      	nop
 801846c:	bd80      	pop	{r7, pc}
 801846e:	bf00      	nop
 8018470:	20001cd0 	.word	0x20001cd0

08018474 <RadioSetTxContinuousWave>:

static void RadioSetTxContinuousWave( uint32_t freq, int8_t power, uint16_t time )
{
 8018474:	b580      	push	{r7, lr}
 8018476:	b084      	sub	sp, #16
 8018478:	af00      	add	r7, sp, #0
 801847a:	6078      	str	r0, [r7, #4]
 801847c:	460b      	mov	r3, r1
 801847e:	70fb      	strb	r3, [r7, #3]
 8018480:	4613      	mov	r3, r2
 8018482:	803b      	strh	r3, [r7, #0]
    uint32_t timeout = ( uint32_t )time * 1000;
 8018484:	883b      	ldrh	r3, [r7, #0]
 8018486:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 801848a:	fb02 f303 	mul.w	r3, r2, r3
 801848e:	60fb      	str	r3, [r7, #12]
    uint8_t antswitchpow;

    SUBGRF_SetRfFrequency( freq );
 8018490:	6878      	ldr	r0, [r7, #4]
 8018492:	f001 fbbb 	bl	8019c0c <SUBGRF_SetRfFrequency>

    antswitchpow = SUBGRF_SetRfTxPower( power );
 8018496:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801849a:	4618      	mov	r0, r3
 801849c:	f002 f826 	bl	801a4ec <SUBGRF_SetRfTxPower>
 80184a0:	4603      	mov	r3, r0
 80184a2:	72fb      	strb	r3, [r7, #11]

    /* Set RF switch */
    SUBGRF_SetSwitch( antswitchpow, RFSWITCH_TX );
 80184a4:	7afb      	ldrb	r3, [r7, #11]
 80184a6:	2101      	movs	r1, #1
 80184a8:	4618      	mov	r0, r3
 80184aa:	f001 fff7 	bl	801a49c <SUBGRF_SetSwitch>

    SUBGRF_SetTxContinuousWave( );
 80184ae:	f001 fa3b 	bl	8019928 <SUBGRF_SetTxContinuousWave>

    TimerSetValue( &TxTimeoutTimer, timeout );
 80184b2:	68f9      	ldr	r1, [r7, #12]
 80184b4:	4804      	ldr	r0, [pc, #16]	@ (80184c8 <RadioSetTxContinuousWave+0x54>)
 80184b6:	f003 f977 	bl	801b7a8 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 80184ba:	4803      	ldr	r0, [pc, #12]	@ (80184c8 <RadioSetTxContinuousWave+0x54>)
 80184bc:	f003 f896 	bl	801b5ec <UTIL_TIMER_Start>
}
 80184c0:	bf00      	nop
 80184c2:	3710      	adds	r7, #16
 80184c4:	46bd      	mov	sp, r7
 80184c6:	bd80      	pop	{r7, pc}
 80184c8:	20001d2c 	.word	0x20001d2c

080184cc <RadioRssi>:

static int16_t RadioRssi( RadioModems_t modem )
{
 80184cc:	b580      	push	{r7, lr}
 80184ce:	b082      	sub	sp, #8
 80184d0:	af00      	add	r7, sp, #0
 80184d2:	4603      	mov	r3, r0
 80184d4:	71fb      	strb	r3, [r7, #7]
    return SUBGRF_GetRssiInst( );
 80184d6:	f001 fe5a 	bl	801a18e <SUBGRF_GetRssiInst>
 80184da:	4603      	mov	r3, r0
}
 80184dc:	4618      	mov	r0, r3
 80184de:	3708      	adds	r7, #8
 80184e0:	46bd      	mov	sp, r7
 80184e2:	bd80      	pop	{r7, pc}

080184e4 <RadioWrite>:

static void RadioWrite( uint16_t addr, uint8_t data )
{
 80184e4:	b580      	push	{r7, lr}
 80184e6:	b082      	sub	sp, #8
 80184e8:	af00      	add	r7, sp, #0
 80184ea:	4603      	mov	r3, r0
 80184ec:	460a      	mov	r2, r1
 80184ee:	80fb      	strh	r3, [r7, #6]
 80184f0:	4613      	mov	r3, r2
 80184f2:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegister( addr, data );
 80184f4:	797a      	ldrb	r2, [r7, #5]
 80184f6:	88fb      	ldrh	r3, [r7, #6]
 80184f8:	4611      	mov	r1, r2
 80184fa:	4618      	mov	r0, r3
 80184fc:	f001 feda 	bl	801a2b4 <SUBGRF_WriteRegister>
}
 8018500:	bf00      	nop
 8018502:	3708      	adds	r7, #8
 8018504:	46bd      	mov	sp, r7
 8018506:	bd80      	pop	{r7, pc}

08018508 <RadioRead>:

static uint8_t RadioRead( uint16_t addr )
{
 8018508:	b580      	push	{r7, lr}
 801850a:	b082      	sub	sp, #8
 801850c:	af00      	add	r7, sp, #0
 801850e:	4603      	mov	r3, r0
 8018510:	80fb      	strh	r3, [r7, #6]
    return SUBGRF_ReadRegister( addr );
 8018512:	88fb      	ldrh	r3, [r7, #6]
 8018514:	4618      	mov	r0, r3
 8018516:	f001 fee1 	bl	801a2dc <SUBGRF_ReadRegister>
 801851a:	4603      	mov	r3, r0
}
 801851c:	4618      	mov	r0, r3
 801851e:	3708      	adds	r7, #8
 8018520:	46bd      	mov	sp, r7
 8018522:	bd80      	pop	{r7, pc}

08018524 <RadioWriteRegisters>:

static void RadioWriteRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 8018524:	b580      	push	{r7, lr}
 8018526:	b082      	sub	sp, #8
 8018528:	af00      	add	r7, sp, #0
 801852a:	4603      	mov	r3, r0
 801852c:	6039      	str	r1, [r7, #0]
 801852e:	80fb      	strh	r3, [r7, #6]
 8018530:	4613      	mov	r3, r2
 8018532:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegisters( addr, buffer, size );
 8018534:	797b      	ldrb	r3, [r7, #5]
 8018536:	b29a      	uxth	r2, r3
 8018538:	88fb      	ldrh	r3, [r7, #6]
 801853a:	6839      	ldr	r1, [r7, #0]
 801853c:	4618      	mov	r0, r3
 801853e:	f001 fee1 	bl	801a304 <SUBGRF_WriteRegisters>
}
 8018542:	bf00      	nop
 8018544:	3708      	adds	r7, #8
 8018546:	46bd      	mov	sp, r7
 8018548:	bd80      	pop	{r7, pc}

0801854a <RadioReadRegisters>:

static void RadioReadRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 801854a:	b580      	push	{r7, lr}
 801854c:	b082      	sub	sp, #8
 801854e:	af00      	add	r7, sp, #0
 8018550:	4603      	mov	r3, r0
 8018552:	6039      	str	r1, [r7, #0]
 8018554:	80fb      	strh	r3, [r7, #6]
 8018556:	4613      	mov	r3, r2
 8018558:	717b      	strb	r3, [r7, #5]
    SUBGRF_ReadRegisters( addr, buffer, size );
 801855a:	797b      	ldrb	r3, [r7, #5]
 801855c:	b29a      	uxth	r2, r3
 801855e:	88fb      	ldrh	r3, [r7, #6]
 8018560:	6839      	ldr	r1, [r7, #0]
 8018562:	4618      	mov	r0, r3
 8018564:	f001 fef0 	bl	801a348 <SUBGRF_ReadRegisters>
}
 8018568:	bf00      	nop
 801856a:	3708      	adds	r7, #8
 801856c:	46bd      	mov	sp, r7
 801856e:	bd80      	pop	{r7, pc}

08018570 <RadioSetMaxPayloadLength>:

static void RadioSetMaxPayloadLength( RadioModems_t modem, uint8_t max )
{
 8018570:	b580      	push	{r7, lr}
 8018572:	b082      	sub	sp, #8
 8018574:	af00      	add	r7, sp, #0
 8018576:	4603      	mov	r3, r0
 8018578:	460a      	mov	r2, r1
 801857a:	71fb      	strb	r3, [r7, #7]
 801857c:	4613      	mov	r3, r2
 801857e:	71bb      	strb	r3, [r7, #6]
    if( modem == MODEM_LORA )
 8018580:	79fb      	ldrb	r3, [r7, #7]
 8018582:	2b01      	cmp	r3, #1
 8018584:	d10a      	bne.n	801859c <RadioSetMaxPayloadLength+0x2c>
    {
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength = max;
 8018586:	4a0e      	ldr	r2, [pc, #56]	@ (80185c0 <RadioSetMaxPayloadLength+0x50>)
 8018588:	79bb      	ldrb	r3, [r7, #6]
 801858a:	7013      	strb	r3, [r2, #0]
 801858c:	4b0c      	ldr	r3, [pc, #48]	@ (80185c0 <RadioSetMaxPayloadLength+0x50>)
 801858e:	781a      	ldrb	r2, [r3, #0]
 8018590:	4b0c      	ldr	r3, [pc, #48]	@ (80185c4 <RadioSetMaxPayloadLength+0x54>)
 8018592:	77da      	strb	r2, [r3, #31]
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8018594:	480c      	ldr	r0, [pc, #48]	@ (80185c8 <RadioSetMaxPayloadLength+0x58>)
 8018596:	f001 fd45 	bl	801a024 <SUBGRF_SetPacketParams>
        {
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
        }
    }
}
 801859a:	e00d      	b.n	80185b8 <RadioSetMaxPayloadLength+0x48>
        if( SubgRf.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_VARIABLE_LENGTH )
 801859c:	4b09      	ldr	r3, [pc, #36]	@ (80185c4 <RadioSetMaxPayloadLength+0x54>)
 801859e:	7d5b      	ldrb	r3, [r3, #21]
 80185a0:	2b01      	cmp	r3, #1
 80185a2:	d109      	bne.n	80185b8 <RadioSetMaxPayloadLength+0x48>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
 80185a4:	4a06      	ldr	r2, [pc, #24]	@ (80185c0 <RadioSetMaxPayloadLength+0x50>)
 80185a6:	79bb      	ldrb	r3, [r7, #6]
 80185a8:	7013      	strb	r3, [r2, #0]
 80185aa:	4b05      	ldr	r3, [pc, #20]	@ (80185c0 <RadioSetMaxPayloadLength+0x50>)
 80185ac:	781a      	ldrb	r2, [r3, #0]
 80185ae:	4b05      	ldr	r3, [pc, #20]	@ (80185c4 <RadioSetMaxPayloadLength+0x54>)
 80185b0:	759a      	strb	r2, [r3, #22]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80185b2:	4805      	ldr	r0, [pc, #20]	@ (80185c8 <RadioSetMaxPayloadLength+0x58>)
 80185b4:	f001 fd36 	bl	801a024 <SUBGRF_SetPacketParams>
}
 80185b8:	bf00      	nop
 80185ba:	3708      	adds	r7, #8
 80185bc:	46bd      	mov	sp, r7
 80185be:	bd80      	pop	{r7, pc}
 80185c0:	20000144 	.word	0x20000144
 80185c4:	20001cd0 	.word	0x20001cd0
 80185c8:	20001cde 	.word	0x20001cde

080185cc <RadioSetPublicNetwork>:

static void RadioSetPublicNetwork( bool enable )
{
 80185cc:	b580      	push	{r7, lr}
 80185ce:	b082      	sub	sp, #8
 80185d0:	af00      	add	r7, sp, #0
 80185d2:	4603      	mov	r3, r0
 80185d4:	71fb      	strb	r3, [r7, #7]
    SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous = enable;
 80185d6:	4a13      	ldr	r2, [pc, #76]	@ (8018624 <RadioSetPublicNetwork+0x58>)
 80185d8:	79fb      	ldrb	r3, [r7, #7]
 80185da:	7313      	strb	r3, [r2, #12]
 80185dc:	4b11      	ldr	r3, [pc, #68]	@ (8018624 <RadioSetPublicNetwork+0x58>)
 80185de:	7b1a      	ldrb	r2, [r3, #12]
 80185e0:	4b10      	ldr	r3, [pc, #64]	@ (8018624 <RadioSetPublicNetwork+0x58>)
 80185e2:	735a      	strb	r2, [r3, #13]

    RadioSetModem( MODEM_LORA );
 80185e4:	2001      	movs	r0, #1
 80185e6:	f7ff f82f 	bl	8017648 <RadioSetModem>
    if( enable == true )
 80185ea:	79fb      	ldrb	r3, [r7, #7]
 80185ec:	2b00      	cmp	r3, #0
 80185ee:	d00a      	beq.n	8018606 <RadioSetPublicNetwork+0x3a>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PUBLIC_SYNCWORD >> 8 ) & 0xFF );
 80185f0:	2134      	movs	r1, #52	@ 0x34
 80185f2:	f44f 60e8 	mov.w	r0, #1856	@ 0x740
 80185f6:	f001 fe5d 	bl	801a2b4 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF );
 80185fa:	2144      	movs	r1, #68	@ 0x44
 80185fc:	f240 7041 	movw	r0, #1857	@ 0x741
 8018600:	f001 fe58 	bl	801a2b4 <SUBGRF_WriteRegister>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
    }
}
 8018604:	e009      	b.n	801861a <RadioSetPublicNetwork+0x4e>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 8018606:	2114      	movs	r1, #20
 8018608:	f44f 60e8 	mov.w	r0, #1856	@ 0x740
 801860c:	f001 fe52 	bl	801a2b4 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 8018610:	2124      	movs	r1, #36	@ 0x24
 8018612:	f240 7041 	movw	r0, #1857	@ 0x741
 8018616:	f001 fe4d 	bl	801a2b4 <SUBGRF_WriteRegister>
}
 801861a:	bf00      	nop
 801861c:	3708      	adds	r7, #8
 801861e:	46bd      	mov	sp, r7
 8018620:	bd80      	pop	{r7, pc}
 8018622:	bf00      	nop
 8018624:	20001cd0 	.word	0x20001cd0

08018628 <RadioGetWakeupTime>:

static uint32_t RadioGetWakeupTime( void )
{
 8018628:	b580      	push	{r7, lr}
 801862a:	af00      	add	r7, sp, #0
    return SUBGRF_GetRadioWakeUpTime() + RADIO_WAKEUP_TIME;
 801862c:	f001 ff92 	bl	801a554 <SUBGRF_GetRadioWakeUpTime>
 8018630:	4603      	mov	r3, r0
 8018632:	3303      	adds	r3, #3
}
 8018634:	4618      	mov	r0, r3
 8018636:	bd80      	pop	{r7, pc}

08018638 <RadioOnTxTimeoutIrq>:

static void RadioOnTxTimeoutIrq( void *context )
{
 8018638:	b580      	push	{r7, lr}
 801863a:	b082      	sub	sp, #8
 801863c:	af00      	add	r7, sp, #0
 801863e:	6078      	str	r0, [r7, #4]
    RADIO_TX_TIMEOUT_PROCESS();
 8018640:	f000 f80e 	bl	8018660 <RadioOnTxTimeoutProcess>
}
 8018644:	bf00      	nop
 8018646:	3708      	adds	r7, #8
 8018648:	46bd      	mov	sp, r7
 801864a:	bd80      	pop	{r7, pc}

0801864c <RadioOnRxTimeoutIrq>:

static void RadioOnRxTimeoutIrq( void *context )
{
 801864c:	b580      	push	{r7, lr}
 801864e:	b082      	sub	sp, #8
 8018650:	af00      	add	r7, sp, #0
 8018652:	6078      	str	r0, [r7, #4]
    RADIO_RX_TIMEOUT_PROCESS();
 8018654:	f000 f818 	bl	8018688 <RadioOnRxTimeoutProcess>
}
 8018658:	bf00      	nop
 801865a:	3708      	adds	r7, #8
 801865c:	46bd      	mov	sp, r7
 801865e:	bd80      	pop	{r7, pc}

08018660 <RadioOnTxTimeoutProcess>:

static void RadioOnTxTimeoutProcess( void )
{
 8018660:	b580      	push	{r7, lr}
 8018662:	af00      	add	r7, sp, #0
    /* ST_WORKAROUND_BEGIN: Reset DBG pin */
    DBG_GPIO_RADIO_TX( RST );
    /* ST_WORKAROUND_END */

    if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8018664:	4b07      	ldr	r3, [pc, #28]	@ (8018684 <RadioOnTxTimeoutProcess+0x24>)
 8018666:	681b      	ldr	r3, [r3, #0]
 8018668:	2b00      	cmp	r3, #0
 801866a:	d008      	beq.n	801867e <RadioOnTxTimeoutProcess+0x1e>
 801866c:	4b05      	ldr	r3, [pc, #20]	@ (8018684 <RadioOnTxTimeoutProcess+0x24>)
 801866e:	681b      	ldr	r3, [r3, #0]
 8018670:	685b      	ldr	r3, [r3, #4]
 8018672:	2b00      	cmp	r3, #0
 8018674:	d003      	beq.n	801867e <RadioOnTxTimeoutProcess+0x1e>
    {
        RadioEvents->TxTimeout( );
 8018676:	4b03      	ldr	r3, [pc, #12]	@ (8018684 <RadioOnTxTimeoutProcess+0x24>)
 8018678:	681b      	ldr	r3, [r3, #0]
 801867a:	685b      	ldr	r3, [r3, #4]
 801867c:	4798      	blx	r3
    }
}
 801867e:	bf00      	nop
 8018680:	bd80      	pop	{r7, pc}
 8018682:	bf00      	nop
 8018684:	20001ccc 	.word	0x20001ccc

08018688 <RadioOnRxTimeoutProcess>:

static void RadioOnRxTimeoutProcess( void )
{
 8018688:	b580      	push	{r7, lr}
 801868a:	af00      	add	r7, sp, #0
    /* ST_WORKAROUND_BEGIN: Reset DBG pin */
    DBG_GPIO_RADIO_RX( RST );
    /* ST_WORKAROUND_END */

    if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 801868c:	4b07      	ldr	r3, [pc, #28]	@ (80186ac <RadioOnRxTimeoutProcess+0x24>)
 801868e:	681b      	ldr	r3, [r3, #0]
 8018690:	2b00      	cmp	r3, #0
 8018692:	d008      	beq.n	80186a6 <RadioOnRxTimeoutProcess+0x1e>
 8018694:	4b05      	ldr	r3, [pc, #20]	@ (80186ac <RadioOnRxTimeoutProcess+0x24>)
 8018696:	681b      	ldr	r3, [r3, #0]
 8018698:	68db      	ldr	r3, [r3, #12]
 801869a:	2b00      	cmp	r3, #0
 801869c:	d003      	beq.n	80186a6 <RadioOnRxTimeoutProcess+0x1e>
    {
        RadioEvents->RxTimeout( );
 801869e:	4b03      	ldr	r3, [pc, #12]	@ (80186ac <RadioOnRxTimeoutProcess+0x24>)
 80186a0:	681b      	ldr	r3, [r3, #0]
 80186a2:	68db      	ldr	r3, [r3, #12]
 80186a4:	4798      	blx	r3
    }
}
 80186a6:	bf00      	nop
 80186a8:	bd80      	pop	{r7, pc}
 80186aa:	bf00      	nop
 80186ac:	20001ccc 	.word	0x20001ccc

080186b0 <RadioOnDioIrq>:

static void RadioOnDioIrq( RadioIrqMasks_t radioIrq )
{
 80186b0:	b580      	push	{r7, lr}
 80186b2:	b082      	sub	sp, #8
 80186b4:	af00      	add	r7, sp, #0
 80186b6:	4603      	mov	r3, r0
 80186b8:	80fb      	strh	r3, [r7, #6]
    SubgRf.RadioIrq = radioIrq;
 80186ba:	4a05      	ldr	r2, [pc, #20]	@ (80186d0 <RadioOnDioIrq+0x20>)
 80186bc:	88fb      	ldrh	r3, [r7, #6]
 80186be:	f8a2 3054 	strh.w	r3, [r2, #84]	@ 0x54

    RADIO_IRQ_PROCESS();
 80186c2:	f000 f807 	bl	80186d4 <RadioIrqProcess>
}
 80186c6:	bf00      	nop
 80186c8:	3708      	adds	r7, #8
 80186ca:	46bd      	mov	sp, r7
 80186cc:	bd80      	pop	{r7, pc}
 80186ce:	bf00      	nop
 80186d0:	20001cd0 	.word	0x20001cd0

080186d4 <RadioIrqProcess>:

static void RadioIrqProcess( void )
{
 80186d4:	b5b0      	push	{r4, r5, r7, lr}
 80186d6:	b082      	sub	sp, #8
 80186d8:	af00      	add	r7, sp, #0
    uint8_t size = 0;
 80186da:	2300      	movs	r3, #0
 80186dc:	71fb      	strb	r3, [r7, #7]
    int32_t cfo = 0;
 80186de:	2300      	movs	r3, #0
 80186e0:	603b      	str	r3, [r7, #0]

    switch( SubgRf.RadioIrq )
 80186e2:	4ba8      	ldr	r3, [pc, #672]	@ (8018984 <RadioIrqProcess+0x2b0>)
 80186e4:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 80186e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80186ec:	f000 810d 	beq.w	801890a <RadioIrqProcess+0x236>
 80186f0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80186f4:	f300 81e8 	bgt.w	8018ac8 <RadioIrqProcess+0x3f4>
 80186f8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80186fc:	f000 80f1 	beq.w	80188e2 <RadioIrqProcess+0x20e>
 8018700:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8018704:	f300 81e0 	bgt.w	8018ac8 <RadioIrqProcess+0x3f4>
 8018708:	2b80      	cmp	r3, #128	@ 0x80
 801870a:	f000 80d6 	beq.w	80188ba <RadioIrqProcess+0x1e6>
 801870e:	2b80      	cmp	r3, #128	@ 0x80
 8018710:	f300 81da 	bgt.w	8018ac8 <RadioIrqProcess+0x3f4>
 8018714:	2b20      	cmp	r3, #32
 8018716:	dc49      	bgt.n	80187ac <RadioIrqProcess+0xd8>
 8018718:	2b00      	cmp	r3, #0
 801871a:	f340 81d5 	ble.w	8018ac8 <RadioIrqProcess+0x3f4>
 801871e:	3b01      	subs	r3, #1
 8018720:	2b1f      	cmp	r3, #31
 8018722:	f200 81d1 	bhi.w	8018ac8 <RadioIrqProcess+0x3f4>
 8018726:	a201      	add	r2, pc, #4	@ (adr r2, 801872c <RadioIrqProcess+0x58>)
 8018728:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801872c:	080187b5 	.word	0x080187b5
 8018730:	080187ef 	.word	0x080187ef
 8018734:	08018ac9 	.word	0x08018ac9
 8018738:	080189a5 	.word	0x080189a5
 801873c:	08018ac9 	.word	0x08018ac9
 8018740:	08018ac9 	.word	0x08018ac9
 8018744:	08018ac9 	.word	0x08018ac9
 8018748:	08018a21 	.word	0x08018a21
 801874c:	08018ac9 	.word	0x08018ac9
 8018750:	08018ac9 	.word	0x08018ac9
 8018754:	08018ac9 	.word	0x08018ac9
 8018758:	08018ac9 	.word	0x08018ac9
 801875c:	08018ac9 	.word	0x08018ac9
 8018760:	08018ac9 	.word	0x08018ac9
 8018764:	08018ac9 	.word	0x08018ac9
 8018768:	08018a3d 	.word	0x08018a3d
 801876c:	08018ac9 	.word	0x08018ac9
 8018770:	08018ac9 	.word	0x08018ac9
 8018774:	08018ac9 	.word	0x08018ac9
 8018778:	08018ac9 	.word	0x08018ac9
 801877c:	08018ac9 	.word	0x08018ac9
 8018780:	08018ac9 	.word	0x08018ac9
 8018784:	08018ac9 	.word	0x08018ac9
 8018788:	08018ac9 	.word	0x08018ac9
 801878c:	08018ac9 	.word	0x08018ac9
 8018790:	08018ac9 	.word	0x08018ac9
 8018794:	08018ac9 	.word	0x08018ac9
 8018798:	08018ac9 	.word	0x08018ac9
 801879c:	08018ac9 	.word	0x08018ac9
 80187a0:	08018ac9 	.word	0x08018ac9
 80187a4:	08018ac9 	.word	0x08018ac9
 80187a8:	08018a4b 	.word	0x08018a4b
 80187ac:	2b40      	cmp	r3, #64	@ 0x40
 80187ae:	f000 816d 	beq.w	8018a8c <RadioIrqProcess+0x3b8>
        {
            RadioEvents->RxError( );
        }
        break;
    default:
        break;
 80187b2:	e189      	b.n	8018ac8 <RadioIrqProcess+0x3f4>
        TimerStop( &TxTimeoutTimer );
 80187b4:	4874      	ldr	r0, [pc, #464]	@ (8018988 <RadioIrqProcess+0x2b4>)
 80187b6:	f002 ff87 	bl	801b6c8 <UTIL_TIMER_Stop>
        SUBGRF_SetStandby( STDBY_RC );
 80187ba:	2000      	movs	r0, #0
 80187bc:	f000 fffa 	bl	80197b4 <SUBGRF_SetStandby>
        if( RFW_Is_LongPacketModeEnabled() == 1 )
 80187c0:	f002 f85c 	bl	801a87c <RFW_Is_LongPacketModeEnabled>
 80187c4:	4603      	mov	r3, r0
 80187c6:	2b01      	cmp	r3, #1
 80187c8:	d101      	bne.n	80187ce <RadioIrqProcess+0xfa>
            RFW_DeInit_TxLongPacket( );
 80187ca:	f002 f880 	bl	801a8ce <RFW_DeInit_TxLongPacket>
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 80187ce:	4b6f      	ldr	r3, [pc, #444]	@ (801898c <RadioIrqProcess+0x2b8>)
 80187d0:	681b      	ldr	r3, [r3, #0]
 80187d2:	2b00      	cmp	r3, #0
 80187d4:	f000 817a 	beq.w	8018acc <RadioIrqProcess+0x3f8>
 80187d8:	4b6c      	ldr	r3, [pc, #432]	@ (801898c <RadioIrqProcess+0x2b8>)
 80187da:	681b      	ldr	r3, [r3, #0]
 80187dc:	681b      	ldr	r3, [r3, #0]
 80187de:	2b00      	cmp	r3, #0
 80187e0:	f000 8174 	beq.w	8018acc <RadioIrqProcess+0x3f8>
            RadioEvents->TxDone( );
 80187e4:	4b69      	ldr	r3, [pc, #420]	@ (801898c <RadioIrqProcess+0x2b8>)
 80187e6:	681b      	ldr	r3, [r3, #0]
 80187e8:	681b      	ldr	r3, [r3, #0]
 80187ea:	4798      	blx	r3
        break;
 80187ec:	e16e      	b.n	8018acc <RadioIrqProcess+0x3f8>
        TimerStop( &RxTimeoutTimer );
 80187ee:	4868      	ldr	r0, [pc, #416]	@ (8018990 <RadioIrqProcess+0x2bc>)
 80187f0:	f002 ff6a 	bl	801b6c8 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 80187f4:	4b63      	ldr	r3, [pc, #396]	@ (8018984 <RadioIrqProcess+0x2b0>)
 80187f6:	785b      	ldrb	r3, [r3, #1]
 80187f8:	f083 0301 	eor.w	r3, r3, #1
 80187fc:	b2db      	uxtb	r3, r3
 80187fe:	2b00      	cmp	r3, #0
 8018800:	d014      	beq.n	801882c <RadioIrqProcess+0x158>
            SUBGRF_SetStandby( STDBY_RC );
 8018802:	2000      	movs	r0, #0
 8018804:	f000 ffd6 	bl	80197b4 <SUBGRF_SetStandby>
            SUBGRF_WriteRegister( SUBGHZ_RTCCTLR, 0x00 );
 8018808:	2100      	movs	r1, #0
 801880a:	f640 1002 	movw	r0, #2306	@ 0x902
 801880e:	f001 fd51 	bl	801a2b4 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( SUBGHZ_EVENTMASKR, SUBGRF_ReadRegister( SUBGHZ_EVENTMASKR ) | ( 1 << 1 ) );
 8018812:	f640 1044 	movw	r0, #2372	@ 0x944
 8018816:	f001 fd61 	bl	801a2dc <SUBGRF_ReadRegister>
 801881a:	4603      	mov	r3, r0
 801881c:	f043 0302 	orr.w	r3, r3, #2
 8018820:	b2db      	uxtb	r3, r3
 8018822:	4619      	mov	r1, r3
 8018824:	f640 1044 	movw	r0, #2372	@ 0x944
 8018828:	f001 fd44 	bl	801a2b4 <SUBGRF_WriteRegister>
        SUBGRF_GetPayload( RadioBuffer, &size, 255 );
 801882c:	1dfb      	adds	r3, r7, #7
 801882e:	22ff      	movs	r2, #255	@ 0xff
 8018830:	4619      	mov	r1, r3
 8018832:	4858      	ldr	r0, [pc, #352]	@ (8018994 <RadioIrqProcess+0x2c0>)
 8018834:	f000 fe8e 	bl	8019554 <SUBGRF_GetPayload>
        SUBGRF_GetPacketStatus( &( SubgRf.PacketStatus ) );
 8018838:	4857      	ldr	r0, [pc, #348]	@ (8018998 <RadioIrqProcess+0x2c4>)
 801883a:	f001 fce9 	bl	801a210 <SUBGRF_GetPacketStatus>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 801883e:	4b53      	ldr	r3, [pc, #332]	@ (801898c <RadioIrqProcess+0x2b8>)
 8018840:	681b      	ldr	r3, [r3, #0]
 8018842:	2b00      	cmp	r3, #0
 8018844:	f000 8144 	beq.w	8018ad0 <RadioIrqProcess+0x3fc>
 8018848:	4b50      	ldr	r3, [pc, #320]	@ (801898c <RadioIrqProcess+0x2b8>)
 801884a:	681b      	ldr	r3, [r3, #0]
 801884c:	689b      	ldr	r3, [r3, #8]
 801884e:	2b00      	cmp	r3, #0
 8018850:	f000 813e 	beq.w	8018ad0 <RadioIrqProcess+0x3fc>
            switch( SubgRf.PacketStatus.packetType )
 8018854:	4b4b      	ldr	r3, [pc, #300]	@ (8018984 <RadioIrqProcess+0x2b0>)
 8018856:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 801885a:	2b01      	cmp	r3, #1
 801885c:	d10e      	bne.n	801887c <RadioIrqProcess+0x1a8>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.LoRa.RssiPkt, SubgRf.PacketStatus.Params.LoRa.SnrPkt );
 801885e:	4b4b      	ldr	r3, [pc, #300]	@ (801898c <RadioIrqProcess+0x2b8>)
 8018860:	681b      	ldr	r3, [r3, #0]
 8018862:	689c      	ldr	r4, [r3, #8]
 8018864:	79fb      	ldrb	r3, [r7, #7]
 8018866:	4619      	mov	r1, r3
 8018868:	4b46      	ldr	r3, [pc, #280]	@ (8018984 <RadioIrqProcess+0x2b0>)
 801886a:	f993 3030 	ldrsb.w	r3, [r3, #48]	@ 0x30
 801886e:	461a      	mov	r2, r3
 8018870:	4b44      	ldr	r3, [pc, #272]	@ (8018984 <RadioIrqProcess+0x2b0>)
 8018872:	f993 3031 	ldrsb.w	r3, [r3, #49]	@ 0x31
 8018876:	4847      	ldr	r0, [pc, #284]	@ (8018994 <RadioIrqProcess+0x2c0>)
 8018878:	47a0      	blx	r4
                break;
 801887a:	e01d      	b.n	80188b8 <RadioIrqProcess+0x1e4>
                SUBGRF_GetCFO( SubgRf.ModulationParams.Params.Gfsk.BitRate, &cfo );
 801887c:	4b41      	ldr	r3, [pc, #260]	@ (8018984 <RadioIrqProcess+0x2b0>)
 801887e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8018880:	463a      	mov	r2, r7
 8018882:	4611      	mov	r1, r2
 8018884:	4618      	mov	r0, r3
 8018886:	f001 ff47 	bl	801a718 <SUBGRF_GetCFO>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.Gfsk.RssiAvg, (int8_t) DIVR(cfo, 1000) );
 801888a:	4b40      	ldr	r3, [pc, #256]	@ (801898c <RadioIrqProcess+0x2b8>)
 801888c:	681b      	ldr	r3, [r3, #0]
 801888e:	689c      	ldr	r4, [r3, #8]
 8018890:	79fb      	ldrb	r3, [r7, #7]
 8018892:	4619      	mov	r1, r3
 8018894:	4b3b      	ldr	r3, [pc, #236]	@ (8018984 <RadioIrqProcess+0x2b0>)
 8018896:	f993 3029 	ldrsb.w	r3, [r3, #41]	@ 0x29
 801889a:	4618      	mov	r0, r3
 801889c:	683b      	ldr	r3, [r7, #0]
 801889e:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 80188a2:	4a3e      	ldr	r2, [pc, #248]	@ (801899c <RadioIrqProcess+0x2c8>)
 80188a4:	fb82 5203 	smull	r5, r2, r2, r3
 80188a8:	1192      	asrs	r2, r2, #6
 80188aa:	17db      	asrs	r3, r3, #31
 80188ac:	1ad3      	subs	r3, r2, r3
 80188ae:	b25b      	sxtb	r3, r3
 80188b0:	4602      	mov	r2, r0
 80188b2:	4838      	ldr	r0, [pc, #224]	@ (8018994 <RadioIrqProcess+0x2c0>)
 80188b4:	47a0      	blx	r4
                break;
 80188b6:	bf00      	nop
        break;
 80188b8:	e10a      	b.n	8018ad0 <RadioIrqProcess+0x3fc>
        SUBGRF_SetStandby( STDBY_RC );
 80188ba:	2000      	movs	r0, #0
 80188bc:	f000 ff7a 	bl	80197b4 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 80188c0:	4b32      	ldr	r3, [pc, #200]	@ (801898c <RadioIrqProcess+0x2b8>)
 80188c2:	681b      	ldr	r3, [r3, #0]
 80188c4:	2b00      	cmp	r3, #0
 80188c6:	f000 8105 	beq.w	8018ad4 <RadioIrqProcess+0x400>
 80188ca:	4b30      	ldr	r3, [pc, #192]	@ (801898c <RadioIrqProcess+0x2b8>)
 80188cc:	681b      	ldr	r3, [r3, #0]
 80188ce:	699b      	ldr	r3, [r3, #24]
 80188d0:	2b00      	cmp	r3, #0
 80188d2:	f000 80ff 	beq.w	8018ad4 <RadioIrqProcess+0x400>
            RadioEvents->CadDone( false );
 80188d6:	4b2d      	ldr	r3, [pc, #180]	@ (801898c <RadioIrqProcess+0x2b8>)
 80188d8:	681b      	ldr	r3, [r3, #0]
 80188da:	699b      	ldr	r3, [r3, #24]
 80188dc:	2000      	movs	r0, #0
 80188de:	4798      	blx	r3
        break;
 80188e0:	e0f8      	b.n	8018ad4 <RadioIrqProcess+0x400>
        SUBGRF_SetStandby( STDBY_RC );
 80188e2:	2000      	movs	r0, #0
 80188e4:	f000 ff66 	bl	80197b4 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 80188e8:	4b28      	ldr	r3, [pc, #160]	@ (801898c <RadioIrqProcess+0x2b8>)
 80188ea:	681b      	ldr	r3, [r3, #0]
 80188ec:	2b00      	cmp	r3, #0
 80188ee:	f000 80f3 	beq.w	8018ad8 <RadioIrqProcess+0x404>
 80188f2:	4b26      	ldr	r3, [pc, #152]	@ (801898c <RadioIrqProcess+0x2b8>)
 80188f4:	681b      	ldr	r3, [r3, #0]
 80188f6:	699b      	ldr	r3, [r3, #24]
 80188f8:	2b00      	cmp	r3, #0
 80188fa:	f000 80ed 	beq.w	8018ad8 <RadioIrqProcess+0x404>
            RadioEvents->CadDone( true );
 80188fe:	4b23      	ldr	r3, [pc, #140]	@ (801898c <RadioIrqProcess+0x2b8>)
 8018900:	681b      	ldr	r3, [r3, #0]
 8018902:	699b      	ldr	r3, [r3, #24]
 8018904:	2001      	movs	r0, #1
 8018906:	4798      	blx	r3
        break;
 8018908:	e0e6      	b.n	8018ad8 <RadioIrqProcess+0x404>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_RX_TX_TIMEOUT\r\n" );
 801890a:	4b25      	ldr	r3, [pc, #148]	@ (80189a0 <RadioIrqProcess+0x2cc>)
 801890c:	2201      	movs	r2, #1
 801890e:	2100      	movs	r1, #0
 8018910:	2002      	movs	r0, #2
 8018912:	f003 f8e3 	bl	801badc <UTIL_ADV_TRACE_COND_FSend>
        if( SUBGRF_GetOperatingMode( ) == MODE_TX )
 8018916:	f000 fe03 	bl	8019520 <SUBGRF_GetOperatingMode>
 801891a:	4603      	mov	r3, r0
 801891c:	2b04      	cmp	r3, #4
 801891e:	d115      	bne.n	801894c <RadioIrqProcess+0x278>
            TimerStop( &TxTimeoutTimer );
 8018920:	4819      	ldr	r0, [pc, #100]	@ (8018988 <RadioIrqProcess+0x2b4>)
 8018922:	f002 fed1 	bl	801b6c8 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 8018926:	2000      	movs	r0, #0
 8018928:	f000 ff44 	bl	80197b4 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 801892c:	4b17      	ldr	r3, [pc, #92]	@ (801898c <RadioIrqProcess+0x2b8>)
 801892e:	681b      	ldr	r3, [r3, #0]
 8018930:	2b00      	cmp	r3, #0
 8018932:	f000 80d3 	beq.w	8018adc <RadioIrqProcess+0x408>
 8018936:	4b15      	ldr	r3, [pc, #84]	@ (801898c <RadioIrqProcess+0x2b8>)
 8018938:	681b      	ldr	r3, [r3, #0]
 801893a:	685b      	ldr	r3, [r3, #4]
 801893c:	2b00      	cmp	r3, #0
 801893e:	f000 80cd 	beq.w	8018adc <RadioIrqProcess+0x408>
                RadioEvents->TxTimeout( );
 8018942:	4b12      	ldr	r3, [pc, #72]	@ (801898c <RadioIrqProcess+0x2b8>)
 8018944:	681b      	ldr	r3, [r3, #0]
 8018946:	685b      	ldr	r3, [r3, #4]
 8018948:	4798      	blx	r3
        break;
 801894a:	e0c7      	b.n	8018adc <RadioIrqProcess+0x408>
        else if( SUBGRF_GetOperatingMode( ) == MODE_RX )
 801894c:	f000 fde8 	bl	8019520 <SUBGRF_GetOperatingMode>
 8018950:	4603      	mov	r3, r0
 8018952:	2b05      	cmp	r3, #5
 8018954:	f040 80c2 	bne.w	8018adc <RadioIrqProcess+0x408>
            TimerStop( &RxTimeoutTimer );
 8018958:	480d      	ldr	r0, [pc, #52]	@ (8018990 <RadioIrqProcess+0x2bc>)
 801895a:	f002 feb5 	bl	801b6c8 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 801895e:	2000      	movs	r0, #0
 8018960:	f000 ff28 	bl	80197b4 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8018964:	4b09      	ldr	r3, [pc, #36]	@ (801898c <RadioIrqProcess+0x2b8>)
 8018966:	681b      	ldr	r3, [r3, #0]
 8018968:	2b00      	cmp	r3, #0
 801896a:	f000 80b7 	beq.w	8018adc <RadioIrqProcess+0x408>
 801896e:	4b07      	ldr	r3, [pc, #28]	@ (801898c <RadioIrqProcess+0x2b8>)
 8018970:	681b      	ldr	r3, [r3, #0]
 8018972:	68db      	ldr	r3, [r3, #12]
 8018974:	2b00      	cmp	r3, #0
 8018976:	f000 80b1 	beq.w	8018adc <RadioIrqProcess+0x408>
                RadioEvents->RxTimeout( );
 801897a:	4b04      	ldr	r3, [pc, #16]	@ (801898c <RadioIrqProcess+0x2b8>)
 801897c:	681b      	ldr	r3, [r3, #0]
 801897e:	68db      	ldr	r3, [r3, #12]
 8018980:	4798      	blx	r3
        break;
 8018982:	e0ab      	b.n	8018adc <RadioIrqProcess+0x408>
 8018984:	20001cd0 	.word	0x20001cd0
 8018988:	20001d2c 	.word	0x20001d2c
 801898c:	20001ccc 	.word	0x20001ccc
 8018990:	20001d44 	.word	0x20001d44
 8018994:	20001bcc 	.word	0x20001bcc
 8018998:	20001cf4 	.word	0x20001cf4
 801899c:	10624dd3 	.word	0x10624dd3
 80189a0:	0801f2b4 	.word	0x0801f2b4
        MW_LOG( TS_ON, VLEVEL_M,  "PRE OK\r\n" );
 80189a4:	4b54      	ldr	r3, [pc, #336]	@ (8018af8 <RadioIrqProcess+0x424>)
 80189a6:	2201      	movs	r2, #1
 80189a8:	2100      	movs	r1, #0
 80189aa:	2002      	movs	r0, #2
 80189ac:	f003 f896 	bl	801badc <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxDcPreambleDetectTimeout != 0 )
 80189b0:	4b52      	ldr	r3, [pc, #328]	@ (8018afc <RadioIrqProcess+0x428>)
 80189b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80189b4:	2b00      	cmp	r3, #0
 80189b6:	f000 8093 	beq.w	8018ae0 <RadioIrqProcess+0x40c>
          Radio.Write(SUBGHZ_RTCPRDR2, (SubgRf.RxDcPreambleDetectTimeout>>16)&0xFF); /*Update Radio RTC Period MSB*/
 80189ba:	4a51      	ldr	r2, [pc, #324]	@ (8018b00 <RadioIrqProcess+0x42c>)
 80189bc:	4b4f      	ldr	r3, [pc, #316]	@ (8018afc <RadioIrqProcess+0x428>)
 80189be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80189c0:	0c1b      	lsrs	r3, r3, #16
 80189c2:	b2db      	uxtb	r3, r3
 80189c4:	4619      	mov	r1, r3
 80189c6:	f640 1003 	movw	r0, #2307	@ 0x903
 80189ca:	4790      	blx	r2
          Radio.Write(SUBGHZ_RTCPRDR1, (SubgRf.RxDcPreambleDetectTimeout>>8)&0xFF); /*Update Radio RTC Period MidByte*/
 80189cc:	4a4c      	ldr	r2, [pc, #304]	@ (8018b00 <RadioIrqProcess+0x42c>)
 80189ce:	4b4b      	ldr	r3, [pc, #300]	@ (8018afc <RadioIrqProcess+0x428>)
 80189d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80189d2:	0a1b      	lsrs	r3, r3, #8
 80189d4:	b2db      	uxtb	r3, r3
 80189d6:	4619      	mov	r1, r3
 80189d8:	f640 1004 	movw	r0, #2308	@ 0x904
 80189dc:	4790      	blx	r2
          Radio.Write(SUBGHZ_RTCPRDR0, (SubgRf.RxDcPreambleDetectTimeout)&0xFF); /*Update Radio RTC Period lsb*/
 80189de:	4a48      	ldr	r2, [pc, #288]	@ (8018b00 <RadioIrqProcess+0x42c>)
 80189e0:	4b46      	ldr	r3, [pc, #280]	@ (8018afc <RadioIrqProcess+0x428>)
 80189e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80189e4:	b2db      	uxtb	r3, r3
 80189e6:	4619      	mov	r1, r3
 80189e8:	f640 1005 	movw	r0, #2309	@ 0x905
 80189ec:	4790      	blx	r2
          Radio.Write(SUBGHZ_RTCCTLR, Radio.Read(SUBGHZ_RTCCTLR)|0x1); /*restart Radio RTC*/
 80189ee:	4c44      	ldr	r4, [pc, #272]	@ (8018b00 <RadioIrqProcess+0x42c>)
 80189f0:	4b44      	ldr	r3, [pc, #272]	@ (8018b04 <RadioIrqProcess+0x430>)
 80189f2:	f640 1002 	movw	r0, #2306	@ 0x902
 80189f6:	4798      	blx	r3
 80189f8:	4603      	mov	r3, r0
 80189fa:	f043 0301 	orr.w	r3, r3, #1
 80189fe:	b2db      	uxtb	r3, r3
 8018a00:	4619      	mov	r1, r3
 8018a02:	f640 1002 	movw	r0, #2306	@ 0x902
 8018a06:	47a0      	blx	r4
          SubgRf.RxDcPreambleDetectTimeout = 0;
 8018a08:	4b3c      	ldr	r3, [pc, #240]	@ (8018afc <RadioIrqProcess+0x428>)
 8018a0a:	2200      	movs	r2, #0
 8018a0c:	659a      	str	r2, [r3, #88]	@ 0x58
          SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8018a0e:	2300      	movs	r3, #0
 8018a10:	2200      	movs	r2, #0
 8018a12:	f240 2162 	movw	r1, #610	@ 0x262
 8018a16:	f240 2062 	movw	r0, #610	@ 0x262
 8018a1a:	f001 f89b 	bl	8019b54 <SUBGRF_SetDioIrqParams>
        break;
 8018a1e:	e05f      	b.n	8018ae0 <RadioIrqProcess+0x40c>
        MW_LOG( TS_ON, VLEVEL_M,  "SYNC OK\r\n" );
 8018a20:	4b39      	ldr	r3, [pc, #228]	@ (8018b08 <RadioIrqProcess+0x434>)
 8018a22:	2201      	movs	r2, #1
 8018a24:	2100      	movs	r1, #0
 8018a26:	2002      	movs	r0, #2
 8018a28:	f003 f858 	bl	801badc <UTIL_ADV_TRACE_COND_FSend>
        if( 1UL == RFW_Is_Init( ) )
 8018a2c:	f001 ff1f 	bl	801a86e <RFW_Is_Init>
 8018a30:	4603      	mov	r3, r0
 8018a32:	2b01      	cmp	r3, #1
 8018a34:	d156      	bne.n	8018ae4 <RadioIrqProcess+0x410>
            RFW_ReceivePayload( );
 8018a36:	f001 ff50 	bl	801a8da <RFW_ReceivePayload>
        break;
 8018a3a:	e053      	b.n	8018ae4 <RadioIrqProcess+0x410>
        MW_LOG( TS_ON, VLEVEL_M,  "HDR OK\r\n" );
 8018a3c:	4b33      	ldr	r3, [pc, #204]	@ (8018b0c <RadioIrqProcess+0x438>)
 8018a3e:	2201      	movs	r2, #1
 8018a40:	2100      	movs	r1, #0
 8018a42:	2002      	movs	r0, #2
 8018a44:	f003 f84a 	bl	801badc <UTIL_ADV_TRACE_COND_FSend>
        break;
 8018a48:	e051      	b.n	8018aee <RadioIrqProcess+0x41a>
        TimerStop( &RxTimeoutTimer );
 8018a4a:	4831      	ldr	r0, [pc, #196]	@ (8018b10 <RadioIrqProcess+0x43c>)
 8018a4c:	f002 fe3c 	bl	801b6c8 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 8018a50:	4b2a      	ldr	r3, [pc, #168]	@ (8018afc <RadioIrqProcess+0x428>)
 8018a52:	785b      	ldrb	r3, [r3, #1]
 8018a54:	f083 0301 	eor.w	r3, r3, #1
 8018a58:	b2db      	uxtb	r3, r3
 8018a5a:	2b00      	cmp	r3, #0
 8018a5c:	d002      	beq.n	8018a64 <RadioIrqProcess+0x390>
            SUBGRF_SetStandby( STDBY_RC );
 8018a5e:	2000      	movs	r0, #0
 8018a60:	f000 fea8 	bl	80197b4 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8018a64:	4b2b      	ldr	r3, [pc, #172]	@ (8018b14 <RadioIrqProcess+0x440>)
 8018a66:	681b      	ldr	r3, [r3, #0]
 8018a68:	2b00      	cmp	r3, #0
 8018a6a:	d03d      	beq.n	8018ae8 <RadioIrqProcess+0x414>
 8018a6c:	4b29      	ldr	r3, [pc, #164]	@ (8018b14 <RadioIrqProcess+0x440>)
 8018a6e:	681b      	ldr	r3, [r3, #0]
 8018a70:	68db      	ldr	r3, [r3, #12]
 8018a72:	2b00      	cmp	r3, #0
 8018a74:	d038      	beq.n	8018ae8 <RadioIrqProcess+0x414>
            RadioEvents->RxTimeout( );
 8018a76:	4b27      	ldr	r3, [pc, #156]	@ (8018b14 <RadioIrqProcess+0x440>)
 8018a78:	681b      	ldr	r3, [r3, #0]
 8018a7a:	68db      	ldr	r3, [r3, #12]
 8018a7c:	4798      	blx	r3
            MW_LOG( TS_ON, VLEVEL_M,  "HDR KO\r\n" );
 8018a7e:	4b26      	ldr	r3, [pc, #152]	@ (8018b18 <RadioIrqProcess+0x444>)
 8018a80:	2201      	movs	r2, #1
 8018a82:	2100      	movs	r1, #0
 8018a84:	2002      	movs	r0, #2
 8018a86:	f003 f829 	bl	801badc <UTIL_ADV_TRACE_COND_FSend>
        break;
 8018a8a:	e02d      	b.n	8018ae8 <RadioIrqProcess+0x414>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_CRC_ERROR\r\n" );
 8018a8c:	4b23      	ldr	r3, [pc, #140]	@ (8018b1c <RadioIrqProcess+0x448>)
 8018a8e:	2201      	movs	r2, #1
 8018a90:	2100      	movs	r1, #0
 8018a92:	2002      	movs	r0, #2
 8018a94:	f003 f822 	bl	801badc <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxContinuous == false )
 8018a98:	4b18      	ldr	r3, [pc, #96]	@ (8018afc <RadioIrqProcess+0x428>)
 8018a9a:	785b      	ldrb	r3, [r3, #1]
 8018a9c:	f083 0301 	eor.w	r3, r3, #1
 8018aa0:	b2db      	uxtb	r3, r3
 8018aa2:	2b00      	cmp	r3, #0
 8018aa4:	d002      	beq.n	8018aac <RadioIrqProcess+0x3d8>
            SUBGRF_SetStandby( STDBY_RC );
 8018aa6:	2000      	movs	r0, #0
 8018aa8:	f000 fe84 	bl	80197b4 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError ) )
 8018aac:	4b19      	ldr	r3, [pc, #100]	@ (8018b14 <RadioIrqProcess+0x440>)
 8018aae:	681b      	ldr	r3, [r3, #0]
 8018ab0:	2b00      	cmp	r3, #0
 8018ab2:	d01b      	beq.n	8018aec <RadioIrqProcess+0x418>
 8018ab4:	4b17      	ldr	r3, [pc, #92]	@ (8018b14 <RadioIrqProcess+0x440>)
 8018ab6:	681b      	ldr	r3, [r3, #0]
 8018ab8:	691b      	ldr	r3, [r3, #16]
 8018aba:	2b00      	cmp	r3, #0
 8018abc:	d016      	beq.n	8018aec <RadioIrqProcess+0x418>
            RadioEvents->RxError( );
 8018abe:	4b15      	ldr	r3, [pc, #84]	@ (8018b14 <RadioIrqProcess+0x440>)
 8018ac0:	681b      	ldr	r3, [r3, #0]
 8018ac2:	691b      	ldr	r3, [r3, #16]
 8018ac4:	4798      	blx	r3
        break;
 8018ac6:	e011      	b.n	8018aec <RadioIrqProcess+0x418>
        break;
 8018ac8:	bf00      	nop
 8018aca:	e010      	b.n	8018aee <RadioIrqProcess+0x41a>
        break;
 8018acc:	bf00      	nop
 8018ace:	e00e      	b.n	8018aee <RadioIrqProcess+0x41a>
        break;
 8018ad0:	bf00      	nop
 8018ad2:	e00c      	b.n	8018aee <RadioIrqProcess+0x41a>
        break;
 8018ad4:	bf00      	nop
 8018ad6:	e00a      	b.n	8018aee <RadioIrqProcess+0x41a>
        break;
 8018ad8:	bf00      	nop
 8018ada:	e008      	b.n	8018aee <RadioIrqProcess+0x41a>
        break;
 8018adc:	bf00      	nop
 8018ade:	e006      	b.n	8018aee <RadioIrqProcess+0x41a>
        break;
 8018ae0:	bf00      	nop
 8018ae2:	e004      	b.n	8018aee <RadioIrqProcess+0x41a>
        break;
 8018ae4:	bf00      	nop
 8018ae6:	e002      	b.n	8018aee <RadioIrqProcess+0x41a>
        break;
 8018ae8:	bf00      	nop
 8018aea:	e000      	b.n	8018aee <RadioIrqProcess+0x41a>
        break;
 8018aec:	bf00      	nop
    }
}
 8018aee:	bf00      	nop
 8018af0:	3708      	adds	r7, #8
 8018af2:	46bd      	mov	sp, r7
 8018af4:	bdb0      	pop	{r4, r5, r7, pc}
 8018af6:	bf00      	nop
 8018af8:	0801f2c8 	.word	0x0801f2c8
 8018afc:	20001cd0 	.word	0x20001cd0
 8018b00:	080184e5 	.word	0x080184e5
 8018b04:	08018509 	.word	0x08018509
 8018b08:	0801f2d4 	.word	0x0801f2d4
 8018b0c:	0801f2e0 	.word	0x0801f2e0
 8018b10:	20001d44 	.word	0x20001d44
 8018b14:	20001ccc 	.word	0x20001ccc
 8018b18:	0801f2ec 	.word	0x0801f2ec
 8018b1c:	0801f2f8 	.word	0x0801f2f8

08018b20 <RadioTxPrbs>:

static void RadioTxPrbs( void )
{
 8018b20:	b580      	push	{r7, lr}
 8018b22:	af00      	add	r7, sp, #0
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 8018b24:	4b09      	ldr	r3, [pc, #36]	@ (8018b4c <RadioTxPrbs+0x2c>)
 8018b26:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8018b2a:	2101      	movs	r1, #1
 8018b2c:	4618      	mov	r0, r3
 8018b2e:	f001 fcb5 	bl	801a49c <SUBGRF_SetSwitch>
    Radio.Write( SUBGHZ_GPKTCTL1AR, 0x2d );  // sel mode prbs9 instead of preamble
 8018b32:	4b07      	ldr	r3, [pc, #28]	@ (8018b50 <RadioTxPrbs+0x30>)
 8018b34:	212d      	movs	r1, #45	@ 0x2d
 8018b36:	f44f 60d7 	mov.w	r0, #1720	@ 0x6b8
 8018b3a:	4798      	blx	r3
    SUBGRF_SetTxInfinitePreamble( );
 8018b3c:	f000 fefd 	bl	801993a <SUBGRF_SetTxInfinitePreamble>
    SUBGRF_SetTx( 0x0fffff );
 8018b40:	4804      	ldr	r0, [pc, #16]	@ (8018b54 <RadioTxPrbs+0x34>)
 8018b42:	f000 fe53 	bl	80197ec <SUBGRF_SetTx>
}
 8018b46:	bf00      	nop
 8018b48:	bd80      	pop	{r7, pc}
 8018b4a:	bf00      	nop
 8018b4c:	20001cd0 	.word	0x20001cd0
 8018b50:	080184e5 	.word	0x080184e5
 8018b54:	000fffff 	.word	0x000fffff

08018b58 <RadioTxCw>:

static void RadioTxCw( int8_t power )
{
 8018b58:	b580      	push	{r7, lr}
 8018b5a:	b084      	sub	sp, #16
 8018b5c:	af00      	add	r7, sp, #0
 8018b5e:	4603      	mov	r3, r0
 8018b60:	71fb      	strb	r3, [r7, #7]
    uint8_t paselect = SUBGRF_SetRfTxPower( power );
 8018b62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8018b66:	4618      	mov	r0, r3
 8018b68:	f001 fcc0 	bl	801a4ec <SUBGRF_SetRfTxPower>
 8018b6c:	4603      	mov	r3, r0
 8018b6e:	73fb      	strb	r3, [r7, #15]
    SUBGRF_SetSwitch( paselect, RFSWITCH_TX );
 8018b70:	7bfb      	ldrb	r3, [r7, #15]
 8018b72:	2101      	movs	r1, #1
 8018b74:	4618      	mov	r0, r3
 8018b76:	f001 fc91 	bl	801a49c <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 8018b7a:	f000 fed5 	bl	8019928 <SUBGRF_SetTxContinuousWave>
}
 8018b7e:	bf00      	nop
 8018b80:	3710      	adds	r7, #16
 8018b82:	46bd      	mov	sp, r7
 8018b84:	bd80      	pop	{r7, pc}

08018b86 <payload_integration>:

#if (RADIO_SIGFOX_ENABLE == 1)
static void payload_integration( uint8_t *outBuffer, uint8_t *inBuffer, uint8_t size )
{
 8018b86:	b480      	push	{r7}
 8018b88:	b089      	sub	sp, #36	@ 0x24
 8018b8a:	af00      	add	r7, sp, #0
 8018b8c:	60f8      	str	r0, [r7, #12]
 8018b8e:	60b9      	str	r1, [r7, #8]
 8018b90:	4613      	mov	r3, r2
 8018b92:	71fb      	strb	r3, [r7, #7]
    uint8_t prevInt = 0;
 8018b94:	2300      	movs	r3, #0
 8018b96:	77fb      	strb	r3, [r7, #31]
    uint8_t currBit;
    uint8_t index_bit;
    uint8_t index_byte;
    uint8_t index_bit_out;
    uint8_t index_byte_out;
    int32_t i = 0;
 8018b98:	2300      	movs	r3, #0
 8018b9a:	61bb      	str	r3, [r7, #24]

    for( i = 0; i < size; i++ )
 8018b9c:	2300      	movs	r3, #0
 8018b9e:	61bb      	str	r3, [r7, #24]
 8018ba0:	e011      	b.n	8018bc6 <payload_integration+0x40>
    {
        /* reverse all inputs */
        inBuffer[i] = ~inBuffer[i];
 8018ba2:	69bb      	ldr	r3, [r7, #24]
 8018ba4:	68ba      	ldr	r2, [r7, #8]
 8018ba6:	4413      	add	r3, r2
 8018ba8:	781a      	ldrb	r2, [r3, #0]
 8018baa:	69bb      	ldr	r3, [r7, #24]
 8018bac:	68b9      	ldr	r1, [r7, #8]
 8018bae:	440b      	add	r3, r1
 8018bb0:	43d2      	mvns	r2, r2
 8018bb2:	b2d2      	uxtb	r2, r2
 8018bb4:	701a      	strb	r2, [r3, #0]
        /* init outBuffer */
        outBuffer[i] = 0;
 8018bb6:	69bb      	ldr	r3, [r7, #24]
 8018bb8:	68fa      	ldr	r2, [r7, #12]
 8018bba:	4413      	add	r3, r2
 8018bbc:	2200      	movs	r2, #0
 8018bbe:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < size; i++ )
 8018bc0:	69bb      	ldr	r3, [r7, #24]
 8018bc2:	3301      	adds	r3, #1
 8018bc4:	61bb      	str	r3, [r7, #24]
 8018bc6:	79fb      	ldrb	r3, [r7, #7]
 8018bc8:	69ba      	ldr	r2, [r7, #24]
 8018bca:	429a      	cmp	r2, r3
 8018bcc:	dbe9      	blt.n	8018ba2 <payload_integration+0x1c>
    }

    for( i = 0; i < ( size * 8 ); i++ )
 8018bce:	2300      	movs	r3, #0
 8018bd0:	61bb      	str	r3, [r7, #24]
 8018bd2:	e049      	b.n	8018c68 <payload_integration+0xe2>
    {
        /* index to take bit in inBuffer */
        index_bit = 7 - ( i % 8 );
 8018bd4:	69bb      	ldr	r3, [r7, #24]
 8018bd6:	425a      	negs	r2, r3
 8018bd8:	f003 0307 	and.w	r3, r3, #7
 8018bdc:	f002 0207 	and.w	r2, r2, #7
 8018be0:	bf58      	it	pl
 8018be2:	4253      	negpl	r3, r2
 8018be4:	b2db      	uxtb	r3, r3
 8018be6:	f1c3 0307 	rsb	r3, r3, #7
 8018bea:	75fb      	strb	r3, [r7, #23]
        index_byte = i / 8;
 8018bec:	69bb      	ldr	r3, [r7, #24]
 8018bee:	2b00      	cmp	r3, #0
 8018bf0:	da00      	bge.n	8018bf4 <payload_integration+0x6e>
 8018bf2:	3307      	adds	r3, #7
 8018bf4:	10db      	asrs	r3, r3, #3
 8018bf6:	75bb      	strb	r3, [r7, #22]
        /* index to place bit in outBuffer is shifted 1 bit right */
        index_bit_out = 7 - ( ( i + 1 ) % 8 );
 8018bf8:	69bb      	ldr	r3, [r7, #24]
 8018bfa:	3301      	adds	r3, #1
 8018bfc:	425a      	negs	r2, r3
 8018bfe:	f003 0307 	and.w	r3, r3, #7
 8018c02:	f002 0207 	and.w	r2, r2, #7
 8018c06:	bf58      	it	pl
 8018c08:	4253      	negpl	r3, r2
 8018c0a:	b2db      	uxtb	r3, r3
 8018c0c:	f1c3 0307 	rsb	r3, r3, #7
 8018c10:	757b      	strb	r3, [r7, #21]
        index_byte_out = ( i + 1 ) / 8;
 8018c12:	69bb      	ldr	r3, [r7, #24]
 8018c14:	3301      	adds	r3, #1
 8018c16:	2b00      	cmp	r3, #0
 8018c18:	da00      	bge.n	8018c1c <payload_integration+0x96>
 8018c1a:	3307      	adds	r3, #7
 8018c1c:	10db      	asrs	r3, r3, #3
 8018c1e:	753b      	strb	r3, [r7, #20]
        /* extract current bit from input */
        currBit = ( inBuffer[index_byte] >> index_bit ) & 0x01;
 8018c20:	7dbb      	ldrb	r3, [r7, #22]
 8018c22:	68ba      	ldr	r2, [r7, #8]
 8018c24:	4413      	add	r3, r2
 8018c26:	781b      	ldrb	r3, [r3, #0]
 8018c28:	461a      	mov	r2, r3
 8018c2a:	7dfb      	ldrb	r3, [r7, #23]
 8018c2c:	fa42 f303 	asr.w	r3, r2, r3
 8018c30:	b2db      	uxtb	r3, r3
 8018c32:	f003 0301 	and.w	r3, r3, #1
 8018c36:	74fb      	strb	r3, [r7, #19]
        /* integration */
        prevInt ^= currBit;
 8018c38:	7ffa      	ldrb	r2, [r7, #31]
 8018c3a:	7cfb      	ldrb	r3, [r7, #19]
 8018c3c:	4053      	eors	r3, r2
 8018c3e:	77fb      	strb	r3, [r7, #31]
        /* write result integration in output */
        outBuffer[index_byte_out] |= ( prevInt << index_bit_out );
 8018c40:	7d3b      	ldrb	r3, [r7, #20]
 8018c42:	68fa      	ldr	r2, [r7, #12]
 8018c44:	4413      	add	r3, r2
 8018c46:	781b      	ldrb	r3, [r3, #0]
 8018c48:	b25a      	sxtb	r2, r3
 8018c4a:	7ff9      	ldrb	r1, [r7, #31]
 8018c4c:	7d7b      	ldrb	r3, [r7, #21]
 8018c4e:	fa01 f303 	lsl.w	r3, r1, r3
 8018c52:	b25b      	sxtb	r3, r3
 8018c54:	4313      	orrs	r3, r2
 8018c56:	b259      	sxtb	r1, r3
 8018c58:	7d3b      	ldrb	r3, [r7, #20]
 8018c5a:	68fa      	ldr	r2, [r7, #12]
 8018c5c:	4413      	add	r3, r2
 8018c5e:	b2ca      	uxtb	r2, r1
 8018c60:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < ( size * 8 ); i++ )
 8018c62:	69bb      	ldr	r3, [r7, #24]
 8018c64:	3301      	adds	r3, #1
 8018c66:	61bb      	str	r3, [r7, #24]
 8018c68:	79fb      	ldrb	r3, [r7, #7]
 8018c6a:	00db      	lsls	r3, r3, #3
 8018c6c:	69ba      	ldr	r2, [r7, #24]
 8018c6e:	429a      	cmp	r2, r3
 8018c70:	dbb0      	blt.n	8018bd4 <payload_integration+0x4e>
    }

    outBuffer[size] = ( prevInt << 7 ) | ( prevInt << 6 ) | ( ( ( !prevInt ) & 0x01 ) << 5 ) ;
 8018c72:	7ffb      	ldrb	r3, [r7, #31]
 8018c74:	01db      	lsls	r3, r3, #7
 8018c76:	b25a      	sxtb	r2, r3
 8018c78:	7ffb      	ldrb	r3, [r7, #31]
 8018c7a:	019b      	lsls	r3, r3, #6
 8018c7c:	b25b      	sxtb	r3, r3
 8018c7e:	4313      	orrs	r3, r2
 8018c80:	b25b      	sxtb	r3, r3
 8018c82:	7ffa      	ldrb	r2, [r7, #31]
 8018c84:	2a00      	cmp	r2, #0
 8018c86:	d101      	bne.n	8018c8c <payload_integration+0x106>
 8018c88:	2220      	movs	r2, #32
 8018c8a:	e000      	b.n	8018c8e <payload_integration+0x108>
 8018c8c:	2200      	movs	r2, #0
 8018c8e:	4313      	orrs	r3, r2
 8018c90:	b259      	sxtb	r1, r3
 8018c92:	79fb      	ldrb	r3, [r7, #7]
 8018c94:	68fa      	ldr	r2, [r7, #12]
 8018c96:	4413      	add	r3, r2
 8018c98:	b2ca      	uxtb	r2, r1
 8018c9a:	701a      	strb	r2, [r3, #0]
}
 8018c9c:	bf00      	nop
 8018c9e:	3724      	adds	r7, #36	@ 0x24
 8018ca0:	46bd      	mov	sp, r7
 8018ca2:	bc80      	pop	{r7}
 8018ca4:	4770      	bx	lr
	...

08018ca8 <RadioSetRxGenericConfig>:
#endif /*RADIO_SIGFOX_ENABLE == 1*/

static int32_t RadioSetRxGenericConfig( GenericModems_t modem, RxConfigGeneric_t* config, uint32_t rxContinuous, uint32_t symbTimeout )
{
 8018ca8:	b580      	push	{r7, lr}
 8018caa:	b08c      	sub	sp, #48	@ 0x30
 8018cac:	af00      	add	r7, sp, #0
 8018cae:	60b9      	str	r1, [r7, #8]
 8018cb0:	607a      	str	r2, [r7, #4]
 8018cb2:	603b      	str	r3, [r7, #0]
 8018cb4:	4603      	mov	r3, r0
 8018cb6:	73fb      	strb	r3, [r7, #15]
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    int32_t status = 0;
 8018cb8:	2300      	movs	r3, #0
 8018cba:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint8_t syncword[8] = {0};
 8018cbc:	2300      	movs	r3, #0
 8018cbe:	623b      	str	r3, [r7, #32]
 8018cc0:	2300      	movs	r3, #0
 8018cc2:	627b      	str	r3, [r7, #36]	@ 0x24
    uint8_t MaxPayloadLength;

    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 8018cc4:	f001 fdcd 	bl	801a862 <RFW_DeInit>

    if( rxContinuous != 0 )
 8018cc8:	687b      	ldr	r3, [r7, #4]
 8018cca:	2b00      	cmp	r3, #0
 8018ccc:	d001      	beq.n	8018cd2 <RadioSetRxGenericConfig+0x2a>
    {
        symbTimeout = 0;
 8018cce:	2300      	movs	r3, #0
 8018cd0:	603b      	str	r3, [r7, #0]
    }
    SubgRf.RxContinuous = ( rxContinuous == 0 ) ? false : true;
 8018cd2:	687b      	ldr	r3, [r7, #4]
 8018cd4:	2b00      	cmp	r3, #0
 8018cd6:	bf14      	ite	ne
 8018cd8:	2301      	movne	r3, #1
 8018cda:	2300      	moveq	r3, #0
 8018cdc:	b2da      	uxtb	r2, r3
 8018cde:	4ba3      	ldr	r3, [pc, #652]	@ (8018f6c <RadioSetRxGenericConfig+0x2c4>)
 8018ce0:	705a      	strb	r2, [r3, #1]

    switch( modem )
 8018ce2:	7bfb      	ldrb	r3, [r7, #15]
 8018ce4:	2b00      	cmp	r3, #0
 8018ce6:	d003      	beq.n	8018cf0 <RadioSetRxGenericConfig+0x48>
 8018ce8:	2b01      	cmp	r3, #1
 8018cea:	f000 80dc 	beq.w	8018ea6 <RadioSetRxGenericConfig+0x1fe>

        // Timeout Max, Timeout handled directly in SetRx function
        SubgRf.RxTimeout = 0xFFFF;
        break;
    default:
        break;
 8018cee:	e194      	b.n	801901a <RadioSetRxGenericConfig+0x372>
        if( ( config->fsk.BitRate == 0 ) || ( config->fsk.PreambleLen == 0 ) )
 8018cf0:	68bb      	ldr	r3, [r7, #8]
 8018cf2:	689b      	ldr	r3, [r3, #8]
 8018cf4:	2b00      	cmp	r3, #0
 8018cf6:	d003      	beq.n	8018d00 <RadioSetRxGenericConfig+0x58>
 8018cf8:	68bb      	ldr	r3, [r7, #8]
 8018cfa:	68db      	ldr	r3, [r3, #12]
 8018cfc:	2b00      	cmp	r3, #0
 8018cfe:	d102      	bne.n	8018d06 <RadioSetRxGenericConfig+0x5e>
            return -1;
 8018d00:	f04f 33ff 	mov.w	r3, #4294967295
 8018d04:	e18a      	b.n	801901c <RadioSetRxGenericConfig+0x374>
        if( config->fsk.SyncWordLength > 8 )
 8018d06:	68bb      	ldr	r3, [r7, #8]
 8018d08:	7f9b      	ldrb	r3, [r3, #30]
 8018d0a:	2b08      	cmp	r3, #8
 8018d0c:	d902      	bls.n	8018d14 <RadioSetRxGenericConfig+0x6c>
            return -1;
 8018d0e:	f04f 33ff 	mov.w	r3, #4294967295
 8018d12:	e183      	b.n	801901c <RadioSetRxGenericConfig+0x374>
            RADIO_MEMCPY8( syncword, config->fsk.SyncWord, config->fsk.SyncWordLength );
 8018d14:	68bb      	ldr	r3, [r7, #8]
 8018d16:	6919      	ldr	r1, [r3, #16]
 8018d18:	68bb      	ldr	r3, [r7, #8]
 8018d1a:	7f9b      	ldrb	r3, [r3, #30]
 8018d1c:	461a      	mov	r2, r3
 8018d1e:	f107 0320 	add.w	r3, r7, #32
 8018d22:	4618      	mov	r0, r3
 8018d24:	f001 fe90 	bl	801aa48 <UTIL_MEM_cpy_8>
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->fsk.StopTimerOnPreambleDetect == 0 ) ? false : true );
 8018d28:	68bb      	ldr	r3, [r7, #8]
 8018d2a:	681b      	ldr	r3, [r3, #0]
 8018d2c:	2b00      	cmp	r3, #0
 8018d2e:	bf14      	ite	ne
 8018d30:	2301      	movne	r3, #1
 8018d32:	2300      	moveq	r3, #0
 8018d34:	b2db      	uxtb	r3, r3
 8018d36:	4618      	mov	r0, r3
 8018d38:	f000 fe08 	bl	801994c <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8018d3c:	4b8b      	ldr	r3, [pc, #556]	@ (8018f6c <RadioSetRxGenericConfig+0x2c4>)
 8018d3e:	2200      	movs	r2, #0
 8018d40:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 8018d44:	68bb      	ldr	r3, [r7, #8]
 8018d46:	689b      	ldr	r3, [r3, #8]
 8018d48:	4a88      	ldr	r2, [pc, #544]	@ (8018f6c <RadioSetRxGenericConfig+0x2c4>)
 8018d4a:	63d3      	str	r3, [r2, #60]	@ 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = (RadioModShapings_t) config->fsk.ModulationShaping;
 8018d4c:	68bb      	ldr	r3, [r7, #8]
 8018d4e:	f893 2020 	ldrb.w	r2, [r3, #32]
 8018d52:	4b86      	ldr	r3, [pc, #536]	@ (8018f6c <RadioSetRxGenericConfig+0x2c4>)
 8018d54:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
        SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( config->fsk.Bandwidth );
 8018d58:	68bb      	ldr	r3, [r7, #8]
 8018d5a:	685b      	ldr	r3, [r3, #4]
 8018d5c:	4618      	mov	r0, r3
 8018d5e:	f001 fcb3 	bl	801a6c8 <SUBGRF_GetFskBandwidthRegValue>
 8018d62:	4603      	mov	r3, r0
 8018d64:	461a      	mov	r2, r3
 8018d66:	4b81      	ldr	r3, [pc, #516]	@ (8018f6c <RadioSetRxGenericConfig+0x2c4>)
 8018d68:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8018d6c:	4b7f      	ldr	r3, [pc, #508]	@ (8018f6c <RadioSetRxGenericConfig+0x2c4>)
 8018d6e:	2200      	movs	r2, #0
 8018d70:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3 ; // convert byte into bit
 8018d72:	68bb      	ldr	r3, [r7, #8]
 8018d74:	68db      	ldr	r3, [r3, #12]
 8018d76:	b29b      	uxth	r3, r3
 8018d78:	00db      	lsls	r3, r3, #3
 8018d7a:	b29a      	uxth	r2, r3
 8018d7c:	4b7b      	ldr	r3, [pc, #492]	@ (8018f6c <RadioSetRxGenericConfig+0x2c4>)
 8018d7e:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = ( RadioPreambleDetection_t ) config->fsk.PreambleMinDetect;
 8018d80:	68bb      	ldr	r3, [r7, #8]
 8018d82:	7fda      	ldrb	r2, [r3, #31]
 8018d84:	4b79      	ldr	r3, [pc, #484]	@ (8018f6c <RadioSetRxGenericConfig+0x2c4>)
 8018d86:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 8018d88:	68bb      	ldr	r3, [r7, #8]
 8018d8a:	7f9b      	ldrb	r3, [r3, #30]
 8018d8c:	00db      	lsls	r3, r3, #3
 8018d8e:	b2da      	uxtb	r2, r3
 8018d90:	4b76      	ldr	r3, [pc, #472]	@ (8018f6c <RadioSetRxGenericConfig+0x2c4>)
 8018d92:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = ( RadioAddressComp_t ) config->fsk.AddrComp;
 8018d94:	68bb      	ldr	r3, [r7, #8]
 8018d96:	f893 2021 	ldrb.w	r2, [r3, #33]	@ 0x21
 8018d9a:	4b74      	ldr	r3, [pc, #464]	@ (8018f6c <RadioSetRxGenericConfig+0x2c4>)
 8018d9c:	751a      	strb	r2, [r3, #20]
        if( config->fsk.LengthMode == RADIO_FSK_PACKET_FIXED_LENGTH )
 8018d9e:	68bb      	ldr	r3, [r7, #8]
 8018da0:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8018da4:	2b00      	cmp	r3, #0
 8018da6:	d105      	bne.n	8018db4 <RadioSetRxGenericConfig+0x10c>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = config->fsk.MaxPayloadLength;
 8018da8:	68bb      	ldr	r3, [r7, #8]
 8018daa:	695b      	ldr	r3, [r3, #20]
 8018dac:	b2da      	uxtb	r2, r3
 8018dae:	4b6f      	ldr	r3, [pc, #444]	@ (8018f6c <RadioSetRxGenericConfig+0x2c4>)
 8018db0:	759a      	strb	r2, [r3, #22]
 8018db2:	e00b      	b.n	8018dcc <RadioSetRxGenericConfig+0x124>
        else if( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH )
 8018db4:	68bb      	ldr	r3, [r7, #8]
 8018db6:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8018dba:	2b02      	cmp	r3, #2
 8018dbc:	d103      	bne.n	8018dc6 <RadioSetRxGenericConfig+0x11e>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 8018dbe:	4b6b      	ldr	r3, [pc, #428]	@ (8018f6c <RadioSetRxGenericConfig+0x2c4>)
 8018dc0:	22ff      	movs	r2, #255	@ 0xff
 8018dc2:	759a      	strb	r2, [r3, #22]
 8018dc4:	e002      	b.n	8018dcc <RadioSetRxGenericConfig+0x124>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 8018dc6:	4b69      	ldr	r3, [pc, #420]	@ (8018f6c <RadioSetRxGenericConfig+0x2c4>)
 8018dc8:	22ff      	movs	r2, #255	@ 0xff
 8018dca:	759a      	strb	r2, [r3, #22]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING ) || ( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 8018dcc:	68bb      	ldr	r3, [r7, #8]
 8018dce:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8018dd2:	2b02      	cmp	r3, #2
 8018dd4:	d004      	beq.n	8018de0 <RadioSetRxGenericConfig+0x138>
 8018dd6:	68bb      	ldr	r3, [r7, #8]
 8018dd8:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8018ddc:	2b02      	cmp	r3, #2
 8018dde:	d12d      	bne.n	8018e3c <RadioSetRxGenericConfig+0x194>
          if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 8018de0:	68bb      	ldr	r3, [r7, #8]
 8018de2:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8018de6:	2bf1      	cmp	r3, #241	@ 0xf1
 8018de8:	d00c      	beq.n	8018e04 <RadioSetRxGenericConfig+0x15c>
 8018dea:	68bb      	ldr	r3, [r7, #8]
 8018dec:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8018df0:	2bf2      	cmp	r3, #242	@ 0xf2
 8018df2:	d007      	beq.n	8018e04 <RadioSetRxGenericConfig+0x15c>
 8018df4:	68bb      	ldr	r3, [r7, #8]
 8018df6:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8018dfa:	2b01      	cmp	r3, #1
 8018dfc:	d002      	beq.n	8018e04 <RadioSetRxGenericConfig+0x15c>
            return -1;
 8018dfe:	f04f 33ff 	mov.w	r3, #4294967295
 8018e02:	e10b      	b.n	801901c <RadioSetRxGenericConfig+0x374>
          ConfigGeneric.rtx = CONFIG_RX;
 8018e04:	2300      	movs	r3, #0
 8018e06:	773b      	strb	r3, [r7, #28]
          ConfigGeneric.RxConfig = config;
 8018e08:	68bb      	ldr	r3, [r7, #8]
 8018e0a:	61bb      	str	r3, [r7, #24]
          if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &RxTimeoutTimer ) )
 8018e0c:	4b58      	ldr	r3, [pc, #352]	@ (8018f70 <RadioSetRxGenericConfig+0x2c8>)
 8018e0e:	6819      	ldr	r1, [r3, #0]
 8018e10:	f107 0314 	add.w	r3, r7, #20
 8018e14:	4a57      	ldr	r2, [pc, #348]	@ (8018f74 <RadioSetRxGenericConfig+0x2cc>)
 8018e16:	4618      	mov	r0, r3
 8018e18:	f001 fd16 	bl	801a848 <RFW_Init>
 8018e1c:	4603      	mov	r3, r0
 8018e1e:	2b00      	cmp	r3, #0
 8018e20:	d002      	beq.n	8018e28 <RadioSetRxGenericConfig+0x180>
            return -1;
 8018e22:	f04f 33ff 	mov.w	r3, #4294967295
 8018e26:	e0f9      	b.n	801901c <RadioSetRxGenericConfig+0x374>
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 8018e28:	4b50      	ldr	r3, [pc, #320]	@ (8018f6c <RadioSetRxGenericConfig+0x2c4>)
 8018e2a:	2200      	movs	r2, #0
 8018e2c:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 8018e2e:	4b4f      	ldr	r3, [pc, #316]	@ (8018f6c <RadioSetRxGenericConfig+0x2c4>)
 8018e30:	2201      	movs	r2, #1
 8018e32:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 8018e34:	4b4d      	ldr	r3, [pc, #308]	@ (8018f6c <RadioSetRxGenericConfig+0x2c4>)
 8018e36:	2200      	movs	r2, #0
 8018e38:	755a      	strb	r2, [r3, #21]
        {
 8018e3a:	e00e      	b.n	8018e5a <RadioSetRxGenericConfig+0x1b2>
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 8018e3c:	68bb      	ldr	r3, [r7, #8]
 8018e3e:	f893 2023 	ldrb.w	r2, [r3, #35]	@ 0x23
 8018e42:	4b4a      	ldr	r3, [pc, #296]	@ (8018f6c <RadioSetRxGenericConfig+0x2c4>)
 8018e44:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 8018e46:	68bb      	ldr	r3, [r7, #8]
 8018e48:	f893 2024 	ldrb.w	r2, [r3, #36]	@ 0x24
 8018e4c:	4b47      	ldr	r3, [pc, #284]	@ (8018f6c <RadioSetRxGenericConfig+0x2c4>)
 8018e4e:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.LengthMode;
 8018e50:	68bb      	ldr	r3, [r7, #8]
 8018e52:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
 8018e56:	4b45      	ldr	r3, [pc, #276]	@ (8018f6c <RadioSetRxGenericConfig+0x2c4>)
 8018e58:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 8018e5a:	f7ff fa48 	bl	80182ee <RadioStandby>
        RadioSetModem( MODEM_FSK );
 8018e5e:	2000      	movs	r0, #0
 8018e60:	f7fe fbf2 	bl	8017648 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8018e64:	4844      	ldr	r0, [pc, #272]	@ (8018f78 <RadioSetRxGenericConfig+0x2d0>)
 8018e66:	f001 f80b 	bl	8019e80 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8018e6a:	4844      	ldr	r0, [pc, #272]	@ (8018f7c <RadioSetRxGenericConfig+0x2d4>)
 8018e6c:	f001 f8da 	bl	801a024 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 8018e70:	f107 0320 	add.w	r3, r7, #32
 8018e74:	4618      	mov	r0, r3
 8018e76:	f000 fba2 	bl	80195be <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 8018e7a:	68bb      	ldr	r3, [r7, #8]
 8018e7c:	8b9b      	ldrh	r3, [r3, #28]
 8018e7e:	4618      	mov	r0, r3
 8018e80:	f000 fbec 	bl	801965c <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 8018e84:	68bb      	ldr	r3, [r7, #8]
 8018e86:	8b1b      	ldrh	r3, [r3, #24]
 8018e88:	4618      	mov	r0, r3
 8018e8a:	f000 fbc7 	bl	801961c <SUBGRF_SetCrcPolynomial>
        SubgRf.RxTimeout = ( uint32_t )( ( symbTimeout * 1000 * 8 ) / config->fsk.BitRate );
 8018e8e:	683b      	ldr	r3, [r7, #0]
 8018e90:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8018e94:	fb03 f202 	mul.w	r2, r3, r2
 8018e98:	68bb      	ldr	r3, [r7, #8]
 8018e9a:	689b      	ldr	r3, [r3, #8]
 8018e9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8018ea0:	4a32      	ldr	r2, [pc, #200]	@ (8018f6c <RadioSetRxGenericConfig+0x2c4>)
 8018ea2:	6093      	str	r3, [r2, #8]
        break;
 8018ea4:	e0b9      	b.n	801901a <RadioSetRxGenericConfig+0x372>
        if( config->lora.PreambleLen == 0 )
 8018ea6:	68bb      	ldr	r3, [r7, #8]
 8018ea8:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 8018eaa:	2b00      	cmp	r3, #0
 8018eac:	d102      	bne.n	8018eb4 <RadioSetRxGenericConfig+0x20c>
            return -1;
 8018eae:	f04f 33ff 	mov.w	r3, #4294967295
 8018eb2:	e0b3      	b.n	801901c <RadioSetRxGenericConfig+0x374>
        if( config->lora.LengthMode == RADIO_LORA_PACKET_FIXED_LENGTH )
 8018eb4:	68bb      	ldr	r3, [r7, #8]
 8018eb6:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8018eba:	2b01      	cmp	r3, #1
 8018ebc:	d104      	bne.n	8018ec8 <RadioSetRxGenericConfig+0x220>
            MaxPayloadLength = config->fsk.MaxPayloadLength;
 8018ebe:	68bb      	ldr	r3, [r7, #8]
 8018ec0:	695b      	ldr	r3, [r3, #20]
 8018ec2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8018ec6:	e002      	b.n	8018ece <RadioSetRxGenericConfig+0x226>
            MaxPayloadLength = 0xFF;
 8018ec8:	23ff      	movs	r3, #255	@ 0xff
 8018eca:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->lora.StopTimerOnPreambleDetect == 0 ) ? false : true );
 8018ece:	68bb      	ldr	r3, [r7, #8]
 8018ed0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018ed2:	2b00      	cmp	r3, #0
 8018ed4:	bf14      	ite	ne
 8018ed6:	2301      	movne	r3, #1
 8018ed8:	2300      	moveq	r3, #0
 8018eda:	b2db      	uxtb	r3, r3
 8018edc:	4618      	mov	r0, r3
 8018ede:	f000 fd35 	bl	801994c <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 8018ee2:	683b      	ldr	r3, [r7, #0]
 8018ee4:	b2db      	uxtb	r3, r3
 8018ee6:	4618      	mov	r0, r3
 8018ee8:	f000 fd3f 	bl	801996a <SUBGRF_SetLoRaSymbNumTimeout>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8018eec:	4b1f      	ldr	r3, [pc, #124]	@ (8018f6c <RadioSetRxGenericConfig+0x2c4>)
 8018eee:	2201      	movs	r2, #1
 8018ef0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 8018ef4:	68bb      	ldr	r3, [r7, #8]
 8018ef6:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 8018efa:	4b1c      	ldr	r3, [pc, #112]	@ (8018f6c <RadioSetRxGenericConfig+0x2c4>)
 8018efc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 8018f00:	68bb      	ldr	r3, [r7, #8]
 8018f02:	f893 202d 	ldrb.w	r2, [r3, #45]	@ 0x2d
 8018f06:	4b19      	ldr	r3, [pc, #100]	@ (8018f6c <RadioSetRxGenericConfig+0x2c4>)
 8018f08:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 8018f0c:	68bb      	ldr	r3, [r7, #8]
 8018f0e:	f893 202e 	ldrb.w	r2, [r3, #46]	@ 0x2e
 8018f12:	4b16      	ldr	r3, [pc, #88]	@ (8018f6c <RadioSetRxGenericConfig+0x2c4>)
 8018f14:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
        switch( config->lora.LowDatarateOptimize )
 8018f18:	68bb      	ldr	r3, [r7, #8]
 8018f1a:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8018f1e:	2b02      	cmp	r3, #2
 8018f20:	d010      	beq.n	8018f44 <RadioSetRxGenericConfig+0x29c>
 8018f22:	2b02      	cmp	r3, #2
 8018f24:	dc2c      	bgt.n	8018f80 <RadioSetRxGenericConfig+0x2d8>
 8018f26:	2b00      	cmp	r3, #0
 8018f28:	d002      	beq.n	8018f30 <RadioSetRxGenericConfig+0x288>
 8018f2a:	2b01      	cmp	r3, #1
 8018f2c:	d005      	beq.n	8018f3a <RadioSetRxGenericConfig+0x292>
            break;
 8018f2e:	e027      	b.n	8018f80 <RadioSetRxGenericConfig+0x2d8>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8018f30:	4b0e      	ldr	r3, [pc, #56]	@ (8018f6c <RadioSetRxGenericConfig+0x2c4>)
 8018f32:	2200      	movs	r2, #0
 8018f34:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 8018f38:	e023      	b.n	8018f82 <RadioSetRxGenericConfig+0x2da>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8018f3a:	4b0c      	ldr	r3, [pc, #48]	@ (8018f6c <RadioSetRxGenericConfig+0x2c4>)
 8018f3c:	2201      	movs	r2, #1
 8018f3e:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 8018f42:	e01e      	b.n	8018f82 <RadioSetRxGenericConfig+0x2da>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 8018f44:	68bb      	ldr	r3, [r7, #8]
 8018f46:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8018f4a:	2b0b      	cmp	r3, #11
 8018f4c:	d004      	beq.n	8018f58 <RadioSetRxGenericConfig+0x2b0>
 8018f4e:	68bb      	ldr	r3, [r7, #8]
 8018f50:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8018f54:	2b0c      	cmp	r3, #12
 8018f56:	d104      	bne.n	8018f62 <RadioSetRxGenericConfig+0x2ba>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8018f58:	4b04      	ldr	r3, [pc, #16]	@ (8018f6c <RadioSetRxGenericConfig+0x2c4>)
 8018f5a:	2201      	movs	r2, #1
 8018f5c:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 8018f60:	e00f      	b.n	8018f82 <RadioSetRxGenericConfig+0x2da>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8018f62:	4b02      	ldr	r3, [pc, #8]	@ (8018f6c <RadioSetRxGenericConfig+0x2c4>)
 8018f64:	2200      	movs	r2, #0
 8018f66:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 8018f6a:	e00a      	b.n	8018f82 <RadioSetRxGenericConfig+0x2da>
 8018f6c:	20001cd0 	.word	0x20001cd0
 8018f70:	20001ccc 	.word	0x20001ccc
 8018f74:	20001d44 	.word	0x20001d44
 8018f78:	20001d08 	.word	0x20001d08
 8018f7c:	20001cde 	.word	0x20001cde
            break;
 8018f80:	bf00      	nop
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8018f82:	4b28      	ldr	r3, [pc, #160]	@ (8019024 <RadioSetRxGenericConfig+0x37c>)
 8018f84:	2201      	movs	r2, #1
 8018f86:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 8018f88:	68bb      	ldr	r3, [r7, #8]
 8018f8a:	8e1a      	ldrh	r2, [r3, #48]	@ 0x30
 8018f8c:	4b25      	ldr	r3, [pc, #148]	@ (8019024 <RadioSetRxGenericConfig+0x37c>)
 8018f8e:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 8018f90:	68bb      	ldr	r3, [r7, #8]
 8018f92:	f893 2032 	ldrb.w	r2, [r3, #50]	@ 0x32
 8018f96:	4b23      	ldr	r3, [pc, #140]	@ (8019024 <RadioSetRxGenericConfig+0x37c>)
 8018f98:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8018f9a:	4a22      	ldr	r2, [pc, #136]	@ (8019024 <RadioSetRxGenericConfig+0x37c>)
 8018f9c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8018fa0:	77d3      	strb	r3, [r2, #31]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 8018fa2:	68bb      	ldr	r3, [r7, #8]
 8018fa4:	f893 2034 	ldrb.w	r2, [r3, #52]	@ 0x34
 8018fa8:	4b1e      	ldr	r3, [pc, #120]	@ (8019024 <RadioSetRxGenericConfig+0x37c>)
 8018faa:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 8018fae:	68bb      	ldr	r3, [r7, #8]
 8018fb0:	f893 2035 	ldrb.w	r2, [r3, #53]	@ 0x35
 8018fb4:	4b1b      	ldr	r3, [pc, #108]	@ (8019024 <RadioSetRxGenericConfig+0x37c>)
 8018fb6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
        RadioStandby( );
 8018fba:	f7ff f998 	bl	80182ee <RadioStandby>
        RadioSetModem( MODEM_LORA );
 8018fbe:	2001      	movs	r0, #1
 8018fc0:	f7fe fb42 	bl	8017648 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8018fc4:	4818      	ldr	r0, [pc, #96]	@ (8019028 <RadioSetRxGenericConfig+0x380>)
 8018fc6:	f000 ff5b 	bl	8019e80 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8018fca:	4818      	ldr	r0, [pc, #96]	@ (801902c <RadioSetRxGenericConfig+0x384>)
 8018fcc:	f001 f82a 	bl	801a024 <SUBGRF_SetPacketParams>
        if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 8018fd0:	4b14      	ldr	r3, [pc, #80]	@ (8019024 <RadioSetRxGenericConfig+0x37c>)
 8018fd2:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8018fd6:	2b01      	cmp	r3, #1
 8018fd8:	d10d      	bne.n	8018ff6 <RadioSetRxGenericConfig+0x34e>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 8018fda:	f240 7036 	movw	r0, #1846	@ 0x736
 8018fde:	f001 f97d 	bl	801a2dc <SUBGRF_ReadRegister>
 8018fe2:	4603      	mov	r3, r0
 8018fe4:	f023 0304 	bic.w	r3, r3, #4
 8018fe8:	b2db      	uxtb	r3, r3
 8018fea:	4619      	mov	r1, r3
 8018fec:	f240 7036 	movw	r0, #1846	@ 0x736
 8018ff0:	f001 f960 	bl	801a2b4 <SUBGRF_WriteRegister>
 8018ff4:	e00c      	b.n	8019010 <RadioSetRxGenericConfig+0x368>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 8018ff6:	f240 7036 	movw	r0, #1846	@ 0x736
 8018ffa:	f001 f96f 	bl	801a2dc <SUBGRF_ReadRegister>
 8018ffe:	4603      	mov	r3, r0
 8019000:	f043 0304 	orr.w	r3, r3, #4
 8019004:	b2db      	uxtb	r3, r3
 8019006:	4619      	mov	r1, r3
 8019008:	f240 7036 	movw	r0, #1846	@ 0x736
 801900c:	f001 f952 	bl	801a2b4 <SUBGRF_WriteRegister>
        SubgRf.RxTimeout = 0xFFFF;
 8019010:	4b04      	ldr	r3, [pc, #16]	@ (8019024 <RadioSetRxGenericConfig+0x37c>)
 8019012:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8019016:	609a      	str	r2, [r3, #8]
        break;
 8019018:	bf00      	nop
    }
    return status;
 801901a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 801901c:	4618      	mov	r0, r3
 801901e:	3730      	adds	r7, #48	@ 0x30
 8019020:	46bd      	mov	sp, r7
 8019022:	bd80      	pop	{r7, pc}
 8019024:	20001cd0 	.word	0x20001cd0
 8019028:	20001d08 	.word	0x20001d08
 801902c:	20001cde 	.word	0x20001cde

08019030 <RadioSetTxGenericConfig>:

static int32_t RadioSetTxGenericConfig( GenericModems_t modem, TxConfigGeneric_t* config, int8_t power, uint32_t timeout )
{
 8019030:	b580      	push	{r7, lr}
 8019032:	b08e      	sub	sp, #56	@ 0x38
 8019034:	af00      	add	r7, sp, #0
 8019036:	60b9      	str	r1, [r7, #8]
 8019038:	607b      	str	r3, [r7, #4]
 801903a:	4603      	mov	r3, r0
 801903c:	73fb      	strb	r3, [r7, #15]
 801903e:	4613      	mov	r3, r2
 8019040:	73bb      	strb	r3, [r7, #14]
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    uint8_t syncword[8] = {0};
 8019042:	2300      	movs	r3, #0
 8019044:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8019046:	2300      	movs	r3, #0
 8019048:	633b      	str	r3, [r7, #48]	@ 0x30
    RadioModems_t radio_modem;
    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 801904a:	f001 fc0a 	bl	801a862 <RFW_DeInit>
    switch( modem )
 801904e:	7bfb      	ldrb	r3, [r7, #15]
 8019050:	2b03      	cmp	r3, #3
 8019052:	f200 8204 	bhi.w	801945e <RadioSetTxGenericConfig+0x42e>
 8019056:	a201      	add	r2, pc, #4	@ (adr r2, 801905c <RadioSetTxGenericConfig+0x2c>)
 8019058:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801905c:	080191e1 	.word	0x080191e1
 8019060:	08019329 	.word	0x08019329
 8019064:	08019421 	.word	0x08019421
 8019068:	0801906d 	.word	0x0801906d
    {
    case GENERIC_MSK:
        if( config->msk.SyncWordLength > 8 )
 801906c:	68bb      	ldr	r3, [r7, #8]
 801906e:	7c9b      	ldrb	r3, [r3, #18]
 8019070:	2b08      	cmp	r3, #8
 8019072:	d902      	bls.n	801907a <RadioSetTxGenericConfig+0x4a>
        {
            return -1;
 8019074:	f04f 33ff 	mov.w	r3, #4294967295
 8019078:	e206      	b.n	8019488 <RadioSetTxGenericConfig+0x458>
        }
        else
        {
          RADIO_MEMCPY8(syncword, config->msk.SyncWord, config->msk.SyncWordLength);
 801907a:	68bb      	ldr	r3, [r7, #8]
 801907c:	6899      	ldr	r1, [r3, #8]
 801907e:	68bb      	ldr	r3, [r7, #8]
 8019080:	7c9b      	ldrb	r3, [r3, #18]
 8019082:	461a      	mov	r2, r3
 8019084:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8019088:	4618      	mov	r0, r3
 801908a:	f001 fcdd 	bl	801aa48 <UTIL_MEM_cpy_8>
        }
        if( ( config->msk.BitRate == 0 ) )
 801908e:	68bb      	ldr	r3, [r7, #8]
 8019090:	681b      	ldr	r3, [r3, #0]
 8019092:	2b00      	cmp	r3, #0
 8019094:	d102      	bne.n	801909c <RadioSetTxGenericConfig+0x6c>
        {
            return -1;
 8019096:	f04f 33ff 	mov.w	r3, #4294967295
 801909a:	e1f5      	b.n	8019488 <RadioSetTxGenericConfig+0x458>
        }
        else if (config->msk.BitRate<= 10000)
 801909c:	68bb      	ldr	r3, [r7, #8]
 801909e:	681b      	ldr	r3, [r3, #0]
 80190a0:	f242 7210 	movw	r2, #10000	@ 0x2710
 80190a4:	4293      	cmp	r3, r2
 80190a6:	d813      	bhi.n	80190d0 <RadioSetTxGenericConfig+0xa0>
        {
          /*max msk modulator datarate is 10kbps*/
          radio_modem= MODEM_MSK;
 80190a8:	2302      	movs	r3, #2
 80190aa:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
          SubgRf.PacketParams.PacketType = PACKET_TYPE_GMSK;
 80190ae:	4b99      	ldr	r3, [pc, #612]	@ (8019314 <RadioSetTxGenericConfig+0x2e4>)
 80190b0:	2203      	movs	r2, #3
 80190b2:	739a      	strb	r2, [r3, #14]
          SubgRf.ModulationParams.PacketType = PACKET_TYPE_GMSK;
 80190b4:	4b97      	ldr	r3, [pc, #604]	@ (8019314 <RadioSetTxGenericConfig+0x2e4>)
 80190b6:	2203      	movs	r2, #3
 80190b8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
          SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 80190bc:	68bb      	ldr	r3, [r7, #8]
 80190be:	681b      	ldr	r3, [r3, #0]
 80190c0:	4a94      	ldr	r2, [pc, #592]	@ (8019314 <RadioSetTxGenericConfig+0x2e4>)
 80190c2:	63d3      	str	r3, [r2, #60]	@ 0x3c
          SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 80190c4:	68bb      	ldr	r3, [r7, #8]
 80190c6:	7cda      	ldrb	r2, [r3, #19]
 80190c8:	4b92      	ldr	r3, [pc, #584]	@ (8019314 <RadioSetTxGenericConfig+0x2e4>)
 80190ca:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80190ce:	e017      	b.n	8019100 <RadioSetTxGenericConfig+0xd0>
        }
        else
        {
          radio_modem= MODEM_FSK;
 80190d0:	2300      	movs	r3, #0
 80190d2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
          SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 80190d6:	4b8f      	ldr	r3, [pc, #572]	@ (8019314 <RadioSetTxGenericConfig+0x2e4>)
 80190d8:	2200      	movs	r2, #0
 80190da:	739a      	strb	r2, [r3, #14]
          SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 80190dc:	4b8d      	ldr	r3, [pc, #564]	@ (8019314 <RadioSetTxGenericConfig+0x2e4>)
 80190de:	2200      	movs	r2, #0
 80190e0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
          SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 80190e4:	68bb      	ldr	r3, [r7, #8]
 80190e6:	681b      	ldr	r3, [r3, #0]
 80190e8:	4a8a      	ldr	r2, [pc, #552]	@ (8019314 <RadioSetTxGenericConfig+0x2e4>)
 80190ea:	63d3      	str	r3, [r2, #60]	@ 0x3c
          SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 80190ec:	68bb      	ldr	r3, [r7, #8]
 80190ee:	7cda      	ldrb	r2, [r3, #19]
 80190f0:	4b88      	ldr	r3, [pc, #544]	@ (8019314 <RadioSetTxGenericConfig+0x2e4>)
 80190f2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
          /*do msk with gfsk modulator*/
          SubgRf.ModulationParams.Params.Gfsk.Fdev = config->msk.BitRate/4;
 80190f6:	68bb      	ldr	r3, [r7, #8]
 80190f8:	681b      	ldr	r3, [r3, #0]
 80190fa:	089b      	lsrs	r3, r3, #2
 80190fc:	4a85      	ldr	r2, [pc, #532]	@ (8019314 <RadioSetTxGenericConfig+0x2e4>)
 80190fe:	6413      	str	r3, [r2, #64]	@ 0x40
        }

        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->msk.PreambleLen ) << 3; // convert byte into bit
 8019100:	68bb      	ldr	r3, [r7, #8]
 8019102:	685b      	ldr	r3, [r3, #4]
 8019104:	b29b      	uxth	r3, r3
 8019106:	00db      	lsls	r3, r3, #3
 8019108:	b29a      	uxth	r2, r3
 801910a:	4b82      	ldr	r3, [pc, #520]	@ (8019314 <RadioSetTxGenericConfig+0x2e4>)
 801910c:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 801910e:	4b81      	ldr	r3, [pc, #516]	@ (8019314 <RadioSetTxGenericConfig+0x2e4>)
 8019110:	2204      	movs	r2, #4
 8019112:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->msk.SyncWordLength ) << 3; // convert byte into bit
 8019114:	68bb      	ldr	r3, [r7, #8]
 8019116:	7c9b      	ldrb	r3, [r3, #18]
 8019118:	00db      	lsls	r3, r3, #3
 801911a:	b2da      	uxtb	r2, r3
 801911c:	4b7d      	ldr	r3, [pc, #500]	@ (8019314 <RadioSetTxGenericConfig+0x2e4>)
 801911e:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 8019120:	4b7c      	ldr	r3, [pc, #496]	@ (8019314 <RadioSetTxGenericConfig+0x2e4>)
 8019122:	2200      	movs	r2, #0
 8019124:	751a      	strb	r2, [r3, #20]

        if( ( config->msk.Whitening == RADIO_FSK_DC_IBM_WHITENING ) || ( config->msk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 8019126:	68bb      	ldr	r3, [r7, #8]
 8019128:	7d9b      	ldrb	r3, [r3, #22]
 801912a:	2b02      	cmp	r3, #2
 801912c:	d003      	beq.n	8019136 <RadioSetTxGenericConfig+0x106>
 801912e:	68bb      	ldr	r3, [r7, #8]
 8019130:	7d1b      	ldrb	r3, [r3, #20]
 8019132:	2b02      	cmp	r3, #2
 8019134:	d12b      	bne.n	801918e <RadioSetTxGenericConfig+0x15e>
        {
            /* Supports only RADIO_FSK_CRC_2_BYTES_IBM or RADIO_FSK_CRC_2_BYTES_CCIT */
            if( ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT ) &&( config->msk.CrcLength != RADIO_FSK_CRC_OFF ) )
 8019136:	68bb      	ldr	r3, [r7, #8]
 8019138:	7d5b      	ldrb	r3, [r3, #21]
 801913a:	2bf1      	cmp	r3, #241	@ 0xf1
 801913c:	d00a      	beq.n	8019154 <RadioSetTxGenericConfig+0x124>
 801913e:	68bb      	ldr	r3, [r7, #8]
 8019140:	7d5b      	ldrb	r3, [r3, #21]
 8019142:	2bf2      	cmp	r3, #242	@ 0xf2
 8019144:	d006      	beq.n	8019154 <RadioSetTxGenericConfig+0x124>
 8019146:	68bb      	ldr	r3, [r7, #8]
 8019148:	7d5b      	ldrb	r3, [r3, #21]
 801914a:	2b01      	cmp	r3, #1
 801914c:	d002      	beq.n	8019154 <RadioSetTxGenericConfig+0x124>
            {
                return -1;
 801914e:	f04f 33ff 	mov.w	r3, #4294967295
 8019152:	e199      	b.n	8019488 <RadioSetTxGenericConfig+0x458>
            }
            ConfigGeneric_t ConfigGeneric;
            /*msk and fsk are union, no need for copy as fsk/msk struct are on same address*/
            ConfigGeneric.TxConfig= config;
 8019154:	68bb      	ldr	r3, [r7, #8]
 8019156:	623b      	str	r3, [r7, #32]
            ConfigGeneric.rtx = CONFIG_TX;
 8019158:	2301      	movs	r3, #1
 801915a:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 801915e:	4b6e      	ldr	r3, [pc, #440]	@ (8019318 <RadioSetTxGenericConfig+0x2e8>)
 8019160:	6819      	ldr	r1, [r3, #0]
 8019162:	f107 0320 	add.w	r3, r7, #32
 8019166:	4a6d      	ldr	r2, [pc, #436]	@ (801931c <RadioSetTxGenericConfig+0x2ec>)
 8019168:	4618      	mov	r0, r3
 801916a:	f001 fb6d 	bl	801a848 <RFW_Init>
 801916e:	4603      	mov	r3, r0
 8019170:	2b00      	cmp	r3, #0
 8019172:	d002      	beq.n	801917a <RadioSetTxGenericConfig+0x14a>
            {
              return -1;
 8019174:	f04f 33ff 	mov.w	r3, #4294967295
 8019178:	e186      	b.n	8019488 <RadioSetTxGenericConfig+0x458>
            }
            /* whitening off, will be processed by FW, switch off built-in radio whitening */
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 801917a:	4b66      	ldr	r3, [pc, #408]	@ (8019314 <RadioSetTxGenericConfig+0x2e4>)
 801917c:	2200      	movs	r2, #0
 801917e:	761a      	strb	r2, [r3, #24]
            /* Crc processed by FW, switch off built-in radio Crc */
            SubgRf.PacketParams.Params.Gfsk.CrcLength = (RadioCrcTypes_t) RADIO_CRC_OFF;
 8019180:	4b64      	ldr	r3, [pc, #400]	@ (8019314 <RadioSetTxGenericConfig+0x2e4>)
 8019182:	2201      	movs	r2, #1
 8019184:	75da      	strb	r2, [r3, #23]
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 8019186:	4b63      	ldr	r3, [pc, #396]	@ (8019314 <RadioSetTxGenericConfig+0x2e4>)
 8019188:	2200      	movs	r2, #0
 801918a:	755a      	strb	r2, [r3, #21]
        {
 801918c:	e00b      	b.n	80191a6 <RadioSetTxGenericConfig+0x176>
        }
        else
        {
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->msk.CrcLength;
 801918e:	68bb      	ldr	r3, [r7, #8]
 8019190:	7d5a      	ldrb	r2, [r3, #21]
 8019192:	4b60      	ldr	r3, [pc, #384]	@ (8019314 <RadioSetTxGenericConfig+0x2e4>)
 8019194:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->msk.Whitening;
 8019196:	68bb      	ldr	r3, [r7, #8]
 8019198:	7d9a      	ldrb	r2, [r3, #22]
 801919a:	4b5e      	ldr	r3, [pc, #376]	@ (8019314 <RadioSetTxGenericConfig+0x2e4>)
 801919c:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->msk.HeaderType;
 801919e:	68bb      	ldr	r3, [r7, #8]
 80191a0:	7d1a      	ldrb	r2, [r3, #20]
 80191a2:	4b5c      	ldr	r3, [pc, #368]	@ (8019314 <RadioSetTxGenericConfig+0x2e4>)
 80191a4:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 80191a6:	f7ff f8a2 	bl	80182ee <RadioStandby>
        RadioSetModem( radio_modem );
 80191aa:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80191ae:	4618      	mov	r0, r3
 80191b0:	f7fe fa4a 	bl	8017648 <RadioSetModem>

        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80191b4:	485a      	ldr	r0, [pc, #360]	@ (8019320 <RadioSetTxGenericConfig+0x2f0>)
 80191b6:	f000 fe63 	bl	8019e80 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80191ba:	485a      	ldr	r0, [pc, #360]	@ (8019324 <RadioSetTxGenericConfig+0x2f4>)
 80191bc:	f000 ff32 	bl	801a024 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 80191c0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80191c4:	4618      	mov	r0, r3
 80191c6:	f000 f9fa 	bl	80195be <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->msk.whiteSeed );
 80191ca:	68bb      	ldr	r3, [r7, #8]
 80191cc:	8a1b      	ldrh	r3, [r3, #16]
 80191ce:	4618      	mov	r0, r3
 80191d0:	f000 fa44 	bl	801965c <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial(config->msk.CrcPolynomial );
 80191d4:	68bb      	ldr	r3, [r7, #8]
 80191d6:	899b      	ldrh	r3, [r3, #12]
 80191d8:	4618      	mov	r0, r3
 80191da:	f000 fa1f 	bl	801961c <SUBGRF_SetCrcPolynomial>
        break;
 80191de:	e13f      	b.n	8019460 <RadioSetTxGenericConfig+0x430>
    case GENERIC_FSK:
        if( config->fsk.BitRate == 0 )
 80191e0:	68bb      	ldr	r3, [r7, #8]
 80191e2:	681b      	ldr	r3, [r3, #0]
 80191e4:	2b00      	cmp	r3, #0
 80191e6:	d102      	bne.n	80191ee <RadioSetTxGenericConfig+0x1be>
        {
            return -1;
 80191e8:	f04f 33ff 	mov.w	r3, #4294967295
 80191ec:	e14c      	b.n	8019488 <RadioSetTxGenericConfig+0x458>
        }
        if( config->fsk.SyncWordLength > 8 )
 80191ee:	68bb      	ldr	r3, [r7, #8]
 80191f0:	7c9b      	ldrb	r3, [r3, #18]
 80191f2:	2b08      	cmp	r3, #8
 80191f4:	d902      	bls.n	80191fc <RadioSetTxGenericConfig+0x1cc>
        {
            return -1;
 80191f6:	f04f 33ff 	mov.w	r3, #4294967295
 80191fa:	e145      	b.n	8019488 <RadioSetTxGenericConfig+0x458>
        }
        else
        {
            RADIO_MEMCPY8(syncword, config->fsk.SyncWord, config->fsk.SyncWordLength);
 80191fc:	68bb      	ldr	r3, [r7, #8]
 80191fe:	6899      	ldr	r1, [r3, #8]
 8019200:	68bb      	ldr	r3, [r7, #8]
 8019202:	7c9b      	ldrb	r3, [r3, #18]
 8019204:	461a      	mov	r2, r3
 8019206:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 801920a:	4618      	mov	r0, r3
 801920c:	f001 fc1c 	bl	801aa48 <UTIL_MEM_cpy_8>
        }
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8019210:	4b40      	ldr	r3, [pc, #256]	@ (8019314 <RadioSetTxGenericConfig+0x2e4>)
 8019212:	2200      	movs	r2, #0
 8019214:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 8019218:	68bb      	ldr	r3, [r7, #8]
 801921a:	681b      	ldr	r3, [r3, #0]
 801921c:	4a3d      	ldr	r2, [pc, #244]	@ (8019314 <RadioSetTxGenericConfig+0x2e4>)
 801921e:	63d3      	str	r3, [r2, #60]	@ 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 8019220:	68bb      	ldr	r3, [r7, #8]
 8019222:	7cda      	ldrb	r2, [r3, #19]
 8019224:	4b3b      	ldr	r3, [pc, #236]	@ (8019314 <RadioSetTxGenericConfig+0x2e4>)
 8019226:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
        SubgRf.ModulationParams.Params.Gfsk.Fdev = config->fsk.FrequencyDeviation;
 801922a:	68bb      	ldr	r3, [r7, #8]
 801922c:	699b      	ldr	r3, [r3, #24]
 801922e:	4a39      	ldr	r2, [pc, #228]	@ (8019314 <RadioSetTxGenericConfig+0x2e4>)
 8019230:	6413      	str	r3, [r2, #64]	@ 0x40

        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8019232:	4b38      	ldr	r3, [pc, #224]	@ (8019314 <RadioSetTxGenericConfig+0x2e4>)
 8019234:	2200      	movs	r2, #0
 8019236:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3; // convert byte into bit
 8019238:	68bb      	ldr	r3, [r7, #8]
 801923a:	685b      	ldr	r3, [r3, #4]
 801923c:	b29b      	uxth	r3, r3
 801923e:	00db      	lsls	r3, r3, #3
 8019240:	b29a      	uxth	r2, r3
 8019242:	4b34      	ldr	r3, [pc, #208]	@ (8019314 <RadioSetTxGenericConfig+0x2e4>)
 8019244:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 8019246:	4b33      	ldr	r3, [pc, #204]	@ (8019314 <RadioSetTxGenericConfig+0x2e4>)
 8019248:	2204      	movs	r2, #4
 801924a:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 801924c:	68bb      	ldr	r3, [r7, #8]
 801924e:	7c9b      	ldrb	r3, [r3, #18]
 8019250:	00db      	lsls	r3, r3, #3
 8019252:	b2da      	uxtb	r2, r3
 8019254:	4b2f      	ldr	r3, [pc, #188]	@ (8019314 <RadioSetTxGenericConfig+0x2e4>)
 8019256:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 8019258:	4b2e      	ldr	r3, [pc, #184]	@ (8019314 <RadioSetTxGenericConfig+0x2e4>)
 801925a:	2200      	movs	r2, #0
 801925c:	751a      	strb	r2, [r3, #20]

        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING ) || ( config->fsk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 801925e:	68bb      	ldr	r3, [r7, #8]
 8019260:	7d9b      	ldrb	r3, [r3, #22]
 8019262:	2b02      	cmp	r3, #2
 8019264:	d003      	beq.n	801926e <RadioSetTxGenericConfig+0x23e>
 8019266:	68bb      	ldr	r3, [r7, #8]
 8019268:	7d1b      	ldrb	r3, [r3, #20]
 801926a:	2b02      	cmp	r3, #2
 801926c:	d12a      	bne.n	80192c4 <RadioSetTxGenericConfig+0x294>
        {
            /* Supports only RADIO_FSK_CRC_2_BYTES_IBM or RADIO_FSK_CRC_2_BYTES_CCIT */
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT ) &&( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 801926e:	68bb      	ldr	r3, [r7, #8]
 8019270:	7d5b      	ldrb	r3, [r3, #21]
 8019272:	2bf1      	cmp	r3, #241	@ 0xf1
 8019274:	d00a      	beq.n	801928c <RadioSetTxGenericConfig+0x25c>
 8019276:	68bb      	ldr	r3, [r7, #8]
 8019278:	7d5b      	ldrb	r3, [r3, #21]
 801927a:	2bf2      	cmp	r3, #242	@ 0xf2
 801927c:	d006      	beq.n	801928c <RadioSetTxGenericConfig+0x25c>
 801927e:	68bb      	ldr	r3, [r7, #8]
 8019280:	7d5b      	ldrb	r3, [r3, #21]
 8019282:	2b01      	cmp	r3, #1
 8019284:	d002      	beq.n	801928c <RadioSetTxGenericConfig+0x25c>
            {
                return -1;
 8019286:	f04f 33ff 	mov.w	r3, #4294967295
 801928a:	e0fd      	b.n	8019488 <RadioSetTxGenericConfig+0x458>
            }
            ConfigGeneric_t ConfigGeneric;
            ConfigGeneric.rtx = CONFIG_TX;
 801928c:	2301      	movs	r3, #1
 801928e:	773b      	strb	r3, [r7, #28]
            ConfigGeneric.TxConfig = config;
 8019290:	68bb      	ldr	r3, [r7, #8]
 8019292:	617b      	str	r3, [r7, #20]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 8019294:	4b20      	ldr	r3, [pc, #128]	@ (8019318 <RadioSetTxGenericConfig+0x2e8>)
 8019296:	6819      	ldr	r1, [r3, #0]
 8019298:	f107 0314 	add.w	r3, r7, #20
 801929c:	4a1f      	ldr	r2, [pc, #124]	@ (801931c <RadioSetTxGenericConfig+0x2ec>)
 801929e:	4618      	mov	r0, r3
 80192a0:	f001 fad2 	bl	801a848 <RFW_Init>
 80192a4:	4603      	mov	r3, r0
 80192a6:	2b00      	cmp	r3, #0
 80192a8:	d002      	beq.n	80192b0 <RadioSetTxGenericConfig+0x280>
            {
              return -1;
 80192aa:	f04f 33ff 	mov.w	r3, #4294967295
 80192ae:	e0eb      	b.n	8019488 <RadioSetTxGenericConfig+0x458>
            }
            /* whitening off, will be processed by FW, switch off built-in radio whitening */
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 80192b0:	4b18      	ldr	r3, [pc, #96]	@ (8019314 <RadioSetTxGenericConfig+0x2e4>)
 80192b2:	2200      	movs	r2, #0
 80192b4:	761a      	strb	r2, [r3, #24]
            /* Crc processed by FW, switch off built-in radio Crc */
            SubgRf.PacketParams.Params.Gfsk.CrcLength = (RadioCrcTypes_t) RADIO_CRC_OFF;
 80192b6:	4b17      	ldr	r3, [pc, #92]	@ (8019314 <RadioSetTxGenericConfig+0x2e4>)
 80192b8:	2201      	movs	r2, #1
 80192ba:	75da      	strb	r2, [r3, #23]
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 80192bc:	4b15      	ldr	r3, [pc, #84]	@ (8019314 <RadioSetTxGenericConfig+0x2e4>)
 80192be:	2200      	movs	r2, #0
 80192c0:	755a      	strb	r2, [r3, #21]
        {
 80192c2:	e00b      	b.n	80192dc <RadioSetTxGenericConfig+0x2ac>
        }
        else
        {
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 80192c4:	68bb      	ldr	r3, [r7, #8]
 80192c6:	7d5a      	ldrb	r2, [r3, #21]
 80192c8:	4b12      	ldr	r3, [pc, #72]	@ (8019314 <RadioSetTxGenericConfig+0x2e4>)
 80192ca:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 80192cc:	68bb      	ldr	r3, [r7, #8]
 80192ce:	7d9a      	ldrb	r2, [r3, #22]
 80192d0:	4b10      	ldr	r3, [pc, #64]	@ (8019314 <RadioSetTxGenericConfig+0x2e4>)
 80192d2:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.HeaderType;
 80192d4:	68bb      	ldr	r3, [r7, #8]
 80192d6:	7d1a      	ldrb	r2, [r3, #20]
 80192d8:	4b0e      	ldr	r3, [pc, #56]	@ (8019314 <RadioSetTxGenericConfig+0x2e4>)
 80192da:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 80192dc:	f7ff f807 	bl	80182ee <RadioStandby>
        RadioSetModem( MODEM_FSK );
 80192e0:	2000      	movs	r0, #0
 80192e2:	f7fe f9b1 	bl	8017648 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80192e6:	480e      	ldr	r0, [pc, #56]	@ (8019320 <RadioSetTxGenericConfig+0x2f0>)
 80192e8:	f000 fdca 	bl	8019e80 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80192ec:	480d      	ldr	r0, [pc, #52]	@ (8019324 <RadioSetTxGenericConfig+0x2f4>)
 80192ee:	f000 fe99 	bl	801a024 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 80192f2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80192f6:	4618      	mov	r0, r3
 80192f8:	f000 f961 	bl	80195be <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 80192fc:	68bb      	ldr	r3, [r7, #8]
 80192fe:	8a1b      	ldrh	r3, [r3, #16]
 8019300:	4618      	mov	r0, r3
 8019302:	f000 f9ab 	bl	801965c <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial(config->fsk.CrcPolynomial );
 8019306:	68bb      	ldr	r3, [r7, #8]
 8019308:	899b      	ldrh	r3, [r3, #12]
 801930a:	4618      	mov	r0, r3
 801930c:	f000 f986 	bl	801961c <SUBGRF_SetCrcPolynomial>
        break;
 8019310:	e0a6      	b.n	8019460 <RadioSetTxGenericConfig+0x430>
 8019312:	bf00      	nop
 8019314:	20001cd0 	.word	0x20001cd0
 8019318:	20001ccc 	.word	0x20001ccc
 801931c:	20001d2c 	.word	0x20001d2c
 8019320:	20001d08 	.word	0x20001d08
 8019324:	20001cde 	.word	0x20001cde
    case GENERIC_LORA:
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8019328:	4b59      	ldr	r3, [pc, #356]	@ (8019490 <RadioSetTxGenericConfig+0x460>)
 801932a:	2201      	movs	r2, #1
 801932c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 8019330:	68bb      	ldr	r3, [r7, #8]
 8019332:	781a      	ldrb	r2, [r3, #0]
 8019334:	4b56      	ldr	r3, [pc, #344]	@ (8019490 <RadioSetTxGenericConfig+0x460>)
 8019336:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 801933a:	68bb      	ldr	r3, [r7, #8]
 801933c:	785a      	ldrb	r2, [r3, #1]
 801933e:	4b54      	ldr	r3, [pc, #336]	@ (8019490 <RadioSetTxGenericConfig+0x460>)
 8019340:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 8019344:	68bb      	ldr	r3, [r7, #8]
 8019346:	789a      	ldrb	r2, [r3, #2]
 8019348:	4b51      	ldr	r3, [pc, #324]	@ (8019490 <RadioSetTxGenericConfig+0x460>)
 801934a:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
        switch( config->lora.LowDatarateOptimize )
 801934e:	68bb      	ldr	r3, [r7, #8]
 8019350:	78db      	ldrb	r3, [r3, #3]
 8019352:	2b02      	cmp	r3, #2
 8019354:	d010      	beq.n	8019378 <RadioSetTxGenericConfig+0x348>
 8019356:	2b02      	cmp	r3, #2
 8019358:	dc20      	bgt.n	801939c <RadioSetTxGenericConfig+0x36c>
 801935a:	2b00      	cmp	r3, #0
 801935c:	d002      	beq.n	8019364 <RadioSetTxGenericConfig+0x334>
 801935e:	2b01      	cmp	r3, #1
 8019360:	d005      	beq.n	801936e <RadioSetTxGenericConfig+0x33e>
            {
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
            }
            break;
          default:
            break;
 8019362:	e01b      	b.n	801939c <RadioSetTxGenericConfig+0x36c>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8019364:	4b4a      	ldr	r3, [pc, #296]	@ (8019490 <RadioSetTxGenericConfig+0x460>)
 8019366:	2200      	movs	r2, #0
 8019368:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 801936c:	e017      	b.n	801939e <RadioSetTxGenericConfig+0x36e>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 801936e:	4b48      	ldr	r3, [pc, #288]	@ (8019490 <RadioSetTxGenericConfig+0x460>)
 8019370:	2201      	movs	r2, #1
 8019372:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 8019376:	e012      	b.n	801939e <RadioSetTxGenericConfig+0x36e>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 8019378:	68bb      	ldr	r3, [r7, #8]
 801937a:	781b      	ldrb	r3, [r3, #0]
 801937c:	2b0b      	cmp	r3, #11
 801937e:	d003      	beq.n	8019388 <RadioSetTxGenericConfig+0x358>
 8019380:	68bb      	ldr	r3, [r7, #8]
 8019382:	781b      	ldrb	r3, [r3, #0]
 8019384:	2b0c      	cmp	r3, #12
 8019386:	d104      	bne.n	8019392 <RadioSetTxGenericConfig+0x362>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8019388:	4b41      	ldr	r3, [pc, #260]	@ (8019490 <RadioSetTxGenericConfig+0x460>)
 801938a:	2201      	movs	r2, #1
 801938c:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 8019390:	e005      	b.n	801939e <RadioSetTxGenericConfig+0x36e>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8019392:	4b3f      	ldr	r3, [pc, #252]	@ (8019490 <RadioSetTxGenericConfig+0x460>)
 8019394:	2200      	movs	r2, #0
 8019396:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 801939a:	e000      	b.n	801939e <RadioSetTxGenericConfig+0x36e>
            break;
 801939c:	bf00      	nop
        }

        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 801939e:	4b3c      	ldr	r3, [pc, #240]	@ (8019490 <RadioSetTxGenericConfig+0x460>)
 80193a0:	2201      	movs	r2, #1
 80193a2:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 80193a4:	68bb      	ldr	r3, [r7, #8]
 80193a6:	889a      	ldrh	r2, [r3, #4]
 80193a8:	4b39      	ldr	r3, [pc, #228]	@ (8019490 <RadioSetTxGenericConfig+0x460>)
 80193aa:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 80193ac:	68bb      	ldr	r3, [r7, #8]
 80193ae:	799a      	ldrb	r2, [r3, #6]
 80193b0:	4b37      	ldr	r3, [pc, #220]	@ (8019490 <RadioSetTxGenericConfig+0x460>)
 80193b2:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 80193b4:	68bb      	ldr	r3, [r7, #8]
 80193b6:	79da      	ldrb	r2, [r3, #7]
 80193b8:	4b35      	ldr	r3, [pc, #212]	@ (8019490 <RadioSetTxGenericConfig+0x460>)
 80193ba:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 80193be:	68bb      	ldr	r3, [r7, #8]
 80193c0:	7a1a      	ldrb	r2, [r3, #8]
 80193c2:	4b33      	ldr	r3, [pc, #204]	@ (8019490 <RadioSetTxGenericConfig+0x460>)
 80193c4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        RadioStandby( );
 80193c8:	f7fe ff91 	bl	80182ee <RadioStandby>
        RadioSetModem( MODEM_LORA );
 80193cc:	2001      	movs	r0, #1
 80193ce:	f7fe f93b 	bl	8017648 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80193d2:	4830      	ldr	r0, [pc, #192]	@ (8019494 <RadioSetTxGenericConfig+0x464>)
 80193d4:	f000 fd54 	bl	8019e80 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80193d8:	482f      	ldr	r0, [pc, #188]	@ (8019498 <RadioSetTxGenericConfig+0x468>)
 80193da:	f000 fe23 	bl	801a024 <SUBGRF_SetPacketParams>

        // WORKAROUND - Modulation Quality with 500 kHz LoRa Bandwidth, see STM32WL Erratasheet
        if( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 )
 80193de:	4b2c      	ldr	r3, [pc, #176]	@ (8019490 <RadioSetTxGenericConfig+0x460>)
 80193e0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80193e4:	2b06      	cmp	r3, #6
 80193e6:	d10d      	bne.n	8019404 <RadioSetTxGenericConfig+0x3d4>
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 80193e8:	f640 0089 	movw	r0, #2185	@ 0x889
 80193ec:	f000 ff76 	bl	801a2dc <SUBGRF_ReadRegister>
 80193f0:	4603      	mov	r3, r0
 80193f2:	f023 0304 	bic.w	r3, r3, #4
 80193f6:	b2db      	uxtb	r3, r3
 80193f8:	4619      	mov	r1, r3
 80193fa:	f640 0089 	movw	r0, #2185	@ 0x889
 80193fe:	f000 ff59 	bl	801a2b4 <SUBGRF_WriteRegister>
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
        }
        // WORKAROUND END
        break;
 8019402:	e02d      	b.n	8019460 <RadioSetTxGenericConfig+0x430>
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 8019404:	f640 0089 	movw	r0, #2185	@ 0x889
 8019408:	f000 ff68 	bl	801a2dc <SUBGRF_ReadRegister>
 801940c:	4603      	mov	r3, r0
 801940e:	f043 0304 	orr.w	r3, r3, #4
 8019412:	b2db      	uxtb	r3, r3
 8019414:	4619      	mov	r1, r3
 8019416:	f640 0089 	movw	r0, #2185	@ 0x889
 801941a:	f000 ff4b 	bl	801a2b4 <SUBGRF_WriteRegister>
        break;
 801941e:	e01f      	b.n	8019460 <RadioSetTxGenericConfig+0x430>
    case GENERIC_BPSK:
        if( ( config->bpsk.BitRate == 0 ) || ( config->bpsk.BitRate > 1000 ) )
 8019420:	68bb      	ldr	r3, [r7, #8]
 8019422:	681b      	ldr	r3, [r3, #0]
 8019424:	2b00      	cmp	r3, #0
 8019426:	d004      	beq.n	8019432 <RadioSetTxGenericConfig+0x402>
 8019428:	68bb      	ldr	r3, [r7, #8]
 801942a:	681b      	ldr	r3, [r3, #0]
 801942c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8019430:	d902      	bls.n	8019438 <RadioSetTxGenericConfig+0x408>
        {
            return -1;
 8019432:	f04f 33ff 	mov.w	r3, #4294967295
 8019436:	e027      	b.n	8019488 <RadioSetTxGenericConfig+0x458>
        }
        RadioSetModem( MODEM_BPSK );
 8019438:	2003      	movs	r0, #3
 801943a:	f7fe f905 	bl	8017648 <RadioSetModem>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 801943e:	4b14      	ldr	r3, [pc, #80]	@ (8019490 <RadioSetTxGenericConfig+0x460>)
 8019440:	2202      	movs	r2, #2
 8019442:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        SubgRf.ModulationParams.Params.Bpsk.BitRate = config->bpsk.BitRate;
 8019446:	68bb      	ldr	r3, [r7, #8]
 8019448:	681b      	ldr	r3, [r3, #0]
 801944a:	4a11      	ldr	r2, [pc, #68]	@ (8019490 <RadioSetTxGenericConfig+0x460>)
 801944c:	6493      	str	r3, [r2, #72]	@ 0x48
        SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 801944e:	4b10      	ldr	r3, [pc, #64]	@ (8019490 <RadioSetTxGenericConfig+0x460>)
 8019450:	2216      	movs	r2, #22
 8019452:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8019456:	480f      	ldr	r0, [pc, #60]	@ (8019494 <RadioSetTxGenericConfig+0x464>)
 8019458:	f000 fd12 	bl	8019e80 <SUBGRF_SetModulationParams>
        break;
 801945c:	e000      	b.n	8019460 <RadioSetTxGenericConfig+0x430>
    default:
        break;
 801945e:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 8019460:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8019464:	4618      	mov	r0, r3
 8019466:	f001 f841 	bl	801a4ec <SUBGRF_SetRfTxPower>
 801946a:	4603      	mov	r3, r0
 801946c:	461a      	mov	r2, r3
 801946e:	4b08      	ldr	r3, [pc, #32]	@ (8019490 <RadioSetTxGenericConfig+0x460>)
 8019470:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 8019474:	4b06      	ldr	r3, [pc, #24]	@ (8019490 <RadioSetTxGenericConfig+0x460>)
 8019476:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 801947a:	4618      	mov	r0, r3
 801947c:	f001 fa05 	bl	801a88a <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 8019480:	4a03      	ldr	r2, [pc, #12]	@ (8019490 <RadioSetTxGenericConfig+0x460>)
 8019482:	687b      	ldr	r3, [r7, #4]
 8019484:	6053      	str	r3, [r2, #4]
    return 0;
 8019486:	2300      	movs	r3, #0
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 8019488:	4618      	mov	r0, r3
 801948a:	3738      	adds	r7, #56	@ 0x38
 801948c:	46bd      	mov	sp, r7
 801948e:	bd80      	pop	{r7, pc}
 8019490:	20001cd0 	.word	0x20001cd0
 8019494:	20001d08 	.word	0x20001d08
 8019498:	20001cde 	.word	0x20001cde

0801949c <SUBGRF_Init>:
static void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size );

/* Exported functions ---------------------------------------------------------*/
void SUBGRF_Init( DioIrqHandler dioIrq )
{
 801949c:	b580      	push	{r7, lr}
 801949e:	b084      	sub	sp, #16
 80194a0:	af00      	add	r7, sp, #0
 80194a2:	6078      	str	r0, [r7, #4]
    if ( dioIrq != NULL)
 80194a4:	687b      	ldr	r3, [r7, #4]
 80194a6:	2b00      	cmp	r3, #0
 80194a8:	d002      	beq.n	80194b0 <SUBGRF_Init+0x14>
    {
        RadioOnDioIrqCb = dioIrq;
 80194aa:	4a1a      	ldr	r2, [pc, #104]	@ (8019514 <SUBGRF_Init+0x78>)
 80194ac:	687b      	ldr	r3, [r7, #4]
 80194ae:	6013      	str	r3, [r2, #0]
    }

    RADIO_INIT();
 80194b0:	f7e8 fce8 	bl	8001e84 <MX_SUBGHZ_Init>

    /* set default SMPS current drive to default*/
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 80194b4:	2002      	movs	r0, #2
 80194b6:	f001 f8e5 	bl	801a684 <Radio_SMPS_Set>

    ImageCalibrated = false;
 80194ba:	4b17      	ldr	r3, [pc, #92]	@ (8019518 <SUBGRF_Init+0x7c>)
 80194bc:	2200      	movs	r2, #0
 80194be:	701a      	strb	r2, [r3, #0]

    SUBGRF_SetStandby( STDBY_RC );
 80194c0:	2000      	movs	r0, #0
 80194c2:	f000 f977 	bl	80197b4 <SUBGRF_SetStandby>

    // Initialize TCXO control
    if (1U == RBI_IsTCXO() )
 80194c6:	f7f1 fd8f 	bl	800afe8 <RBI_IsTCXO>
 80194ca:	4603      	mov	r3, r0
 80194cc:	2b01      	cmp	r3, #1
 80194ce:	d10e      	bne.n	80194ee <SUBGRF_Init+0x52>
    {
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 80194d0:	2140      	movs	r1, #64	@ 0x40
 80194d2:	2001      	movs	r0, #1
 80194d4:	f000 fb78 	bl	8019bc8 <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 80194d8:	2100      	movs	r1, #0
 80194da:	f640 1011 	movw	r0, #2321	@ 0x911
 80194de:	f000 fee9 	bl	801a2b4 <SUBGRF_WriteRegister>

        /*enable calibration for cut1.1 and later*/
        CalibrationParams_t calibParam;
        calibParam.Value = 0x7F;
 80194e2:	237f      	movs	r3, #127	@ 0x7f
 80194e4:	733b      	strb	r3, [r7, #12]
        SUBGRF_Calibrate( calibParam );
 80194e6:	7b38      	ldrb	r0, [r7, #12]
 80194e8:	f000 fa85 	bl	80199f6 <SUBGRF_Calibrate>
 80194ec:	e009      	b.n	8019502 <SUBGRF_Init+0x66>
    }
    else
    {
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 80194ee:	2120      	movs	r1, #32
 80194f0:	f640 1011 	movw	r0, #2321	@ 0x911
 80194f4:	f000 fede 	bl	801a2b4 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 80194f8:	2120      	movs	r1, #32
 80194fa:	f640 1012 	movw	r0, #2322	@ 0x912
 80194fe:	f000 fed9 	bl	801a2b4 <SUBGRF_WriteRegister>
    }
    /* Init RF Switch */
    RBI_Init();
 8019502:	f7f1 fd55 	bl	800afb0 <RBI_Init>

    OperatingMode = MODE_STDBY_RC;
 8019506:	4b05      	ldr	r3, [pc, #20]	@ (801951c <SUBGRF_Init+0x80>)
 8019508:	2201      	movs	r2, #1
 801950a:	701a      	strb	r2, [r3, #0]
}
 801950c:	bf00      	nop
 801950e:	3710      	adds	r7, #16
 8019510:	46bd      	mov	sp, r7
 8019512:	bd80      	pop	{r7, pc}
 8019514:	20001d68 	.word	0x20001d68
 8019518:	20001d64 	.word	0x20001d64
 801951c:	20001d5c 	.word	0x20001d5c

08019520 <SUBGRF_GetOperatingMode>:

RadioOperatingModes_t SUBGRF_GetOperatingMode( void )
{
 8019520:	b480      	push	{r7}
 8019522:	af00      	add	r7, sp, #0
    return OperatingMode;
 8019524:	4b02      	ldr	r3, [pc, #8]	@ (8019530 <SUBGRF_GetOperatingMode+0x10>)
 8019526:	781b      	ldrb	r3, [r3, #0]
}
 8019528:	4618      	mov	r0, r3
 801952a:	46bd      	mov	sp, r7
 801952c:	bc80      	pop	{r7}
 801952e:	4770      	bx	lr
 8019530:	20001d5c 	.word	0x20001d5c

08019534 <SUBGRF_SetPayload>:

void SUBGRF_SetPayload( uint8_t *payload, uint8_t size )
{
 8019534:	b580      	push	{r7, lr}
 8019536:	b082      	sub	sp, #8
 8019538:	af00      	add	r7, sp, #0
 801953a:	6078      	str	r0, [r7, #4]
 801953c:	460b      	mov	r3, r1
 801953e:	70fb      	strb	r3, [r7, #3]
    SUBGRF_WriteBuffer( 0x00, payload, size );
 8019540:	78fb      	ldrb	r3, [r7, #3]
 8019542:	461a      	mov	r2, r3
 8019544:	6879      	ldr	r1, [r7, #4]
 8019546:	2000      	movs	r0, #0
 8019548:	f000 ff20 	bl	801a38c <SUBGRF_WriteBuffer>
}
 801954c:	bf00      	nop
 801954e:	3708      	adds	r7, #8
 8019550:	46bd      	mov	sp, r7
 8019552:	bd80      	pop	{r7, pc}

08019554 <SUBGRF_GetPayload>:

uint8_t SUBGRF_GetPayload( uint8_t *buffer, uint8_t *size,  uint8_t maxSize )
{
 8019554:	b580      	push	{r7, lr}
 8019556:	b086      	sub	sp, #24
 8019558:	af00      	add	r7, sp, #0
 801955a:	60f8      	str	r0, [r7, #12]
 801955c:	60b9      	str	r1, [r7, #8]
 801955e:	4613      	mov	r3, r2
 8019560:	71fb      	strb	r3, [r7, #7]
    uint8_t offset = 0;
 8019562:	2300      	movs	r3, #0
 8019564:	75fb      	strb	r3, [r7, #23]

    SUBGRF_GetRxBufferStatus( size, &offset );
 8019566:	f107 0317 	add.w	r3, r7, #23
 801956a:	4619      	mov	r1, r3
 801956c:	68b8      	ldr	r0, [r7, #8]
 801956e:	f000 fe23 	bl	801a1b8 <SUBGRF_GetRxBufferStatus>
    if( *size > maxSize )
 8019572:	68bb      	ldr	r3, [r7, #8]
 8019574:	781b      	ldrb	r3, [r3, #0]
 8019576:	79fa      	ldrb	r2, [r7, #7]
 8019578:	429a      	cmp	r2, r3
 801957a:	d201      	bcs.n	8019580 <SUBGRF_GetPayload+0x2c>
    {
        return 1;
 801957c:	2301      	movs	r3, #1
 801957e:	e007      	b.n	8019590 <SUBGRF_GetPayload+0x3c>
    }
    SUBGRF_ReadBuffer( offset, buffer, *size );
 8019580:	7df8      	ldrb	r0, [r7, #23]
 8019582:	68bb      	ldr	r3, [r7, #8]
 8019584:	781b      	ldrb	r3, [r3, #0]
 8019586:	461a      	mov	r2, r3
 8019588:	68f9      	ldr	r1, [r7, #12]
 801958a:	f000 ff21 	bl	801a3d0 <SUBGRF_ReadBuffer>

    return 0;
 801958e:	2300      	movs	r3, #0
}
 8019590:	4618      	mov	r0, r3
 8019592:	3718      	adds	r7, #24
 8019594:	46bd      	mov	sp, r7
 8019596:	bd80      	pop	{r7, pc}

08019598 <SUBGRF_SendPayload>:

void SUBGRF_SendPayload( uint8_t *payload, uint8_t size, uint32_t timeout)
{
 8019598:	b580      	push	{r7, lr}
 801959a:	b084      	sub	sp, #16
 801959c:	af00      	add	r7, sp, #0
 801959e:	60f8      	str	r0, [r7, #12]
 80195a0:	460b      	mov	r3, r1
 80195a2:	607a      	str	r2, [r7, #4]
 80195a4:	72fb      	strb	r3, [r7, #11]
    SUBGRF_SetPayload( payload, size );
 80195a6:	7afb      	ldrb	r3, [r7, #11]
 80195a8:	4619      	mov	r1, r3
 80195aa:	68f8      	ldr	r0, [r7, #12]
 80195ac:	f7ff ffc2 	bl	8019534 <SUBGRF_SetPayload>
    SUBGRF_SetTx( timeout );
 80195b0:	6878      	ldr	r0, [r7, #4]
 80195b2:	f000 f91b 	bl	80197ec <SUBGRF_SetTx>
}
 80195b6:	bf00      	nop
 80195b8:	3710      	adds	r7, #16
 80195ba:	46bd      	mov	sp, r7
 80195bc:	bd80      	pop	{r7, pc}

080195be <SUBGRF_SetSyncWord>:

uint8_t SUBGRF_SetSyncWord( uint8_t *syncWord )
{
 80195be:	b580      	push	{r7, lr}
 80195c0:	b082      	sub	sp, #8
 80195c2:	af00      	add	r7, sp, #0
 80195c4:	6078      	str	r0, [r7, #4]
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
 80195c6:	2208      	movs	r2, #8
 80195c8:	6879      	ldr	r1, [r7, #4]
 80195ca:	f44f 60d8 	mov.w	r0, #1728	@ 0x6c0
 80195ce:	f000 fe99 	bl	801a304 <SUBGRF_WriteRegisters>
    return 0;
 80195d2:	2300      	movs	r3, #0
}
 80195d4:	4618      	mov	r0, r3
 80195d6:	3708      	adds	r7, #8
 80195d8:	46bd      	mov	sp, r7
 80195da:	bd80      	pop	{r7, pc}

080195dc <SUBGRF_SetCrcSeed>:

void SUBGRF_SetCrcSeed( uint16_t seed )
{
 80195dc:	b580      	push	{r7, lr}
 80195de:	b084      	sub	sp, #16
 80195e0:	af00      	add	r7, sp, #0
 80195e2:	4603      	mov	r3, r0
 80195e4:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 80195e6:	88fb      	ldrh	r3, [r7, #6]
 80195e8:	0a1b      	lsrs	r3, r3, #8
 80195ea:	b29b      	uxth	r3, r3
 80195ec:	b2db      	uxtb	r3, r3
 80195ee:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( seed & 0xFF );
 80195f0:	88fb      	ldrh	r3, [r7, #6]
 80195f2:	b2db      	uxtb	r3, r3
 80195f4:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 80195f6:	f000 fb6b 	bl	8019cd0 <SUBGRF_GetPacketType>
 80195fa:	4603      	mov	r3, r0
 80195fc:	2b00      	cmp	r3, #0
 80195fe:	d108      	bne.n	8019612 <SUBGRF_SetCrcSeed+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 8019600:	f107 030c 	add.w	r3, r7, #12
 8019604:	2202      	movs	r2, #2
 8019606:	4619      	mov	r1, r3
 8019608:	f240 60bc 	movw	r0, #1724	@ 0x6bc
 801960c:	f000 fe7a 	bl	801a304 <SUBGRF_WriteRegisters>
            break;
 8019610:	e000      	b.n	8019614 <SUBGRF_SetCrcSeed+0x38>

        default:
            break;
 8019612:	bf00      	nop
    }
}
 8019614:	bf00      	nop
 8019616:	3710      	adds	r7, #16
 8019618:	46bd      	mov	sp, r7
 801961a:	bd80      	pop	{r7, pc}

0801961c <SUBGRF_SetCrcPolynomial>:

void SUBGRF_SetCrcPolynomial( uint16_t polynomial )
{
 801961c:	b580      	push	{r7, lr}
 801961e:	b084      	sub	sp, #16
 8019620:	af00      	add	r7, sp, #0
 8019622:	4603      	mov	r3, r0
 8019624:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 8019626:	88fb      	ldrh	r3, [r7, #6]
 8019628:	0a1b      	lsrs	r3, r3, #8
 801962a:	b29b      	uxth	r3, r3
 801962c:	b2db      	uxtb	r3, r3
 801962e:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 8019630:	88fb      	ldrh	r3, [r7, #6]
 8019632:	b2db      	uxtb	r3, r3
 8019634:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 8019636:	f000 fb4b 	bl	8019cd0 <SUBGRF_GetPacketType>
 801963a:	4603      	mov	r3, r0
 801963c:	2b00      	cmp	r3, #0
 801963e:	d108      	bne.n	8019652 <SUBGRF_SetCrcPolynomial+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 8019640:	f107 030c 	add.w	r3, r7, #12
 8019644:	2202      	movs	r2, #2
 8019646:	4619      	mov	r1, r3
 8019648:	f240 60be 	movw	r0, #1726	@ 0x6be
 801964c:	f000 fe5a 	bl	801a304 <SUBGRF_WriteRegisters>
            break;
 8019650:	e000      	b.n	8019654 <SUBGRF_SetCrcPolynomial+0x38>

        default:
            break;
 8019652:	bf00      	nop
    }
}
 8019654:	bf00      	nop
 8019656:	3710      	adds	r7, #16
 8019658:	46bd      	mov	sp, r7
 801965a:	bd80      	pop	{r7, pc}

0801965c <SUBGRF_SetWhiteningSeed>:

void SUBGRF_SetWhiteningSeed( uint16_t seed )
{
 801965c:	b580      	push	{r7, lr}
 801965e:	b084      	sub	sp, #16
 8019660:	af00      	add	r7, sp, #0
 8019662:	4603      	mov	r3, r0
 8019664:	80fb      	strh	r3, [r7, #6]
    uint8_t regValue = 0;
 8019666:	2300      	movs	r3, #0
 8019668:	73fb      	strb	r3, [r7, #15]

    switch( SUBGRF_GetPacketType( ) )
 801966a:	f000 fb31 	bl	8019cd0 <SUBGRF_GetPacketType>
 801966e:	4603      	mov	r3, r0
 8019670:	2b00      	cmp	r3, #0
 8019672:	d121      	bne.n	80196b8 <SUBGRF_SetWhiteningSeed+0x5c>
    {
        case PACKET_TYPE_GFSK:
            regValue = SUBGRF_ReadRegister( REG_LR_WHITSEEDBASEADDR_MSB ) & 0xFE;
 8019674:	f44f 60d7 	mov.w	r0, #1720	@ 0x6b8
 8019678:	f000 fe30 	bl	801a2dc <SUBGRF_ReadRegister>
 801967c:	4603      	mov	r3, r0
 801967e:	f023 0301 	bic.w	r3, r3, #1
 8019682:	73fb      	strb	r3, [r7, #15]
            regValue = ( ( seed >> 8 ) & 0x01 ) | regValue;
 8019684:	88fb      	ldrh	r3, [r7, #6]
 8019686:	0a1b      	lsrs	r3, r3, #8
 8019688:	b29b      	uxth	r3, r3
 801968a:	b25b      	sxtb	r3, r3
 801968c:	f003 0301 	and.w	r3, r3, #1
 8019690:	b25a      	sxtb	r2, r3
 8019692:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8019696:	4313      	orrs	r3, r2
 8019698:	b25b      	sxtb	r3, r3
 801969a:	73fb      	strb	r3, [r7, #15]
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_MSB, regValue ); // only 1 bit.
 801969c:	7bfb      	ldrb	r3, [r7, #15]
 801969e:	4619      	mov	r1, r3
 80196a0:	f44f 60d7 	mov.w	r0, #1720	@ 0x6b8
 80196a4:	f000 fe06 	bl	801a2b4 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_LSB, (uint8_t)seed );
 80196a8:	88fb      	ldrh	r3, [r7, #6]
 80196aa:	b2db      	uxtb	r3, r3
 80196ac:	4619      	mov	r1, r3
 80196ae:	f240 60b9 	movw	r0, #1721	@ 0x6b9
 80196b2:	f000 fdff 	bl	801a2b4 <SUBGRF_WriteRegister>
            break;
 80196b6:	e000      	b.n	80196ba <SUBGRF_SetWhiteningSeed+0x5e>

        default:
            break;
 80196b8:	bf00      	nop
    }
}
 80196ba:	bf00      	nop
 80196bc:	3710      	adds	r7, #16
 80196be:	46bd      	mov	sp, r7
 80196c0:	bd80      	pop	{r7, pc}

080196c2 <SUBGRF_GetRandom>:

uint32_t SUBGRF_GetRandom( void )
{
 80196c2:	b580      	push	{r7, lr}
 80196c4:	b082      	sub	sp, #8
 80196c6:	af00      	add	r7, sp, #0
    uint32_t number = 0;
 80196c8:	2300      	movs	r3, #0
 80196ca:	603b      	str	r3, [r7, #0]
    uint8_t regAnaLna = 0;
 80196cc:	2300      	movs	r3, #0
 80196ce:	71fb      	strb	r3, [r7, #7]
    uint8_t regAnaMixer = 0;
 80196d0:	2300      	movs	r3, #0
 80196d2:	71bb      	strb	r3, [r7, #6]

    regAnaLna = SUBGRF_ReadRegister( REG_ANA_LNA );
 80196d4:	f640 00e2 	movw	r0, #2274	@ 0x8e2
 80196d8:	f000 fe00 	bl	801a2dc <SUBGRF_ReadRegister>
 80196dc:	4603      	mov	r3, r0
 80196de:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 80196e0:	79fb      	ldrb	r3, [r7, #7]
 80196e2:	f023 0301 	bic.w	r3, r3, #1
 80196e6:	b2db      	uxtb	r3, r3
 80196e8:	4619      	mov	r1, r3
 80196ea:	f640 00e2 	movw	r0, #2274	@ 0x8e2
 80196ee:	f000 fde1 	bl	801a2b4 <SUBGRF_WriteRegister>

    regAnaMixer = SUBGRF_ReadRegister( REG_ANA_MIXER );
 80196f2:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 80196f6:	f000 fdf1 	bl	801a2dc <SUBGRF_ReadRegister>
 80196fa:	4603      	mov	r3, r0
 80196fc:	71bb      	strb	r3, [r7, #6]
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 80196fe:	79bb      	ldrb	r3, [r7, #6]
 8019700:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8019704:	b2db      	uxtb	r3, r3
 8019706:	4619      	mov	r1, r3
 8019708:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 801970c:	f000 fdd2 	bl	801a2b4 <SUBGRF_WriteRegister>

    // Set radio in continuous reception
    SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 8019710:	f06f 407f 	mvn.w	r0, #4278190080	@ 0xff000000
 8019714:	f000 f88a 	bl	801982c <SUBGRF_SetRx>

    SUBGRF_ReadRegisters( RANDOM_NUMBER_GENERATORBASEADDR, ( uint8_t* )&number, 4 );
 8019718:	463b      	mov	r3, r7
 801971a:	2204      	movs	r2, #4
 801971c:	4619      	mov	r1, r3
 801971e:	f640 0019 	movw	r0, #2073	@ 0x819
 8019722:	f000 fe11 	bl	801a348 <SUBGRF_ReadRegisters>

    SUBGRF_SetStandby( STDBY_RC );
 8019726:	2000      	movs	r0, #0
 8019728:	f000 f844 	bl	80197b4 <SUBGRF_SetStandby>

    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna );
 801972c:	79fb      	ldrb	r3, [r7, #7]
 801972e:	4619      	mov	r1, r3
 8019730:	f640 00e2 	movw	r0, #2274	@ 0x8e2
 8019734:	f000 fdbe 	bl	801a2b4 <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer );
 8019738:	79bb      	ldrb	r3, [r7, #6]
 801973a:	4619      	mov	r1, r3
 801973c:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 8019740:	f000 fdb8 	bl	801a2b4 <SUBGRF_WriteRegister>

    return number;
 8019744:	683b      	ldr	r3, [r7, #0]
}
 8019746:	4618      	mov	r0, r3
 8019748:	3708      	adds	r7, #8
 801974a:	46bd      	mov	sp, r7
 801974c:	bd80      	pop	{r7, pc}
	...

08019750 <SUBGRF_SetSleep>:

void SUBGRF_SetSleep( SleepParams_t sleepConfig )
{
 8019750:	b580      	push	{r7, lr}
 8019752:	b084      	sub	sp, #16
 8019754:	af00      	add	r7, sp, #0
 8019756:	7138      	strb	r0, [r7, #4]
    /* switch the antenna OFF by SW */
    RBI_ConfigRFSwitch(RBI_SWITCH_OFF);
 8019758:	2000      	movs	r0, #0
 801975a:	f7f1 fc30 	bl	800afbe <RBI_ConfigRFSwitch>

    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 801975e:	2002      	movs	r0, #2
 8019760:	f000 ff90 	bl	801a684 <Radio_SMPS_Set>

    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8019764:	793b      	ldrb	r3, [r7, #4]
 8019766:	f3c3 0380 	ubfx	r3, r3, #2, #1
 801976a:	b2db      	uxtb	r3, r3
 801976c:	009b      	lsls	r3, r3, #2
 801976e:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 8019770:	793b      	ldrb	r3, [r7, #4]
 8019772:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8019776:	b2db      	uxtb	r3, r3
 8019778:	005b      	lsls	r3, r3, #1
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 801977a:	b25b      	sxtb	r3, r3
 801977c:	4313      	orrs	r3, r2
 801977e:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.WakeUpRTC ) );
 8019780:	793b      	ldrb	r3, [r7, #4]
 8019782:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8019786:	b2db      	uxtb	r3, r3
 8019788:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 801978a:	4313      	orrs	r3, r2
 801978c:	b25b      	sxtb	r3, r3
 801978e:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8019790:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
 8019792:	f107 030f 	add.w	r3, r7, #15
 8019796:	2201      	movs	r2, #1
 8019798:	4619      	mov	r1, r3
 801979a:	2084      	movs	r0, #132	@ 0x84
 801979c:	f000 fe3a 	bl	801a414 <SUBGRF_WriteCommand>
    OperatingMode = MODE_SLEEP;
 80197a0:	4b03      	ldr	r3, [pc, #12]	@ (80197b0 <SUBGRF_SetSleep+0x60>)
 80197a2:	2200      	movs	r2, #0
 80197a4:	701a      	strb	r2, [r3, #0]
}
 80197a6:	bf00      	nop
 80197a8:	3710      	adds	r7, #16
 80197aa:	46bd      	mov	sp, r7
 80197ac:	bd80      	pop	{r7, pc}
 80197ae:	bf00      	nop
 80197b0:	20001d5c 	.word	0x20001d5c

080197b4 <SUBGRF_SetStandby>:

void SUBGRF_SetStandby( RadioStandbyModes_t standbyConfig )
{
 80197b4:	b580      	push	{r7, lr}
 80197b6:	b082      	sub	sp, #8
 80197b8:	af00      	add	r7, sp, #0
 80197ba:	4603      	mov	r3, r0
 80197bc:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 80197be:	1dfb      	adds	r3, r7, #7
 80197c0:	2201      	movs	r2, #1
 80197c2:	4619      	mov	r1, r3
 80197c4:	2080      	movs	r0, #128	@ 0x80
 80197c6:	f000 fe25 	bl	801a414 <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 80197ca:	79fb      	ldrb	r3, [r7, #7]
 80197cc:	2b00      	cmp	r3, #0
 80197ce:	d103      	bne.n	80197d8 <SUBGRF_SetStandby+0x24>
    {
        OperatingMode = MODE_STDBY_RC;
 80197d0:	4b05      	ldr	r3, [pc, #20]	@ (80197e8 <SUBGRF_SetStandby+0x34>)
 80197d2:	2201      	movs	r2, #1
 80197d4:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        OperatingMode = MODE_STDBY_XOSC;
    }
}
 80197d6:	e002      	b.n	80197de <SUBGRF_SetStandby+0x2a>
        OperatingMode = MODE_STDBY_XOSC;
 80197d8:	4b03      	ldr	r3, [pc, #12]	@ (80197e8 <SUBGRF_SetStandby+0x34>)
 80197da:	2202      	movs	r2, #2
 80197dc:	701a      	strb	r2, [r3, #0]
}
 80197de:	bf00      	nop
 80197e0:	3708      	adds	r7, #8
 80197e2:	46bd      	mov	sp, r7
 80197e4:	bd80      	pop	{r7, pc}
 80197e6:	bf00      	nop
 80197e8:	20001d5c 	.word	0x20001d5c

080197ec <SUBGRF_SetTx>:
    SUBGRF_WriteCommand( RADIO_SET_FS, 0, 0 );
    OperatingMode = MODE_FS;
}

void SUBGRF_SetTx( uint32_t timeout )
{
 80197ec:	b580      	push	{r7, lr}
 80197ee:	b084      	sub	sp, #16
 80197f0:	af00      	add	r7, sp, #0
 80197f2:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_TX;
 80197f4:	4b0c      	ldr	r3, [pc, #48]	@ (8019828 <SUBGRF_SetTx+0x3c>)
 80197f6:	2204      	movs	r2, #4
 80197f8:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 80197fa:	687b      	ldr	r3, [r7, #4]
 80197fc:	0c1b      	lsrs	r3, r3, #16
 80197fe:	b2db      	uxtb	r3, r3
 8019800:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8019802:	687b      	ldr	r3, [r7, #4]
 8019804:	0a1b      	lsrs	r3, r3, #8
 8019806:	b2db      	uxtb	r3, r3
 8019808:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 801980a:	687b      	ldr	r3, [r7, #4]
 801980c:	b2db      	uxtb	r3, r3
 801980e:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 8019810:	f107 030c 	add.w	r3, r7, #12
 8019814:	2203      	movs	r2, #3
 8019816:	4619      	mov	r1, r3
 8019818:	2083      	movs	r0, #131	@ 0x83
 801981a:	f000 fdfb 	bl	801a414 <SUBGRF_WriteCommand>
}
 801981e:	bf00      	nop
 8019820:	3710      	adds	r7, #16
 8019822:	46bd      	mov	sp, r7
 8019824:	bd80      	pop	{r7, pc}
 8019826:	bf00      	nop
 8019828:	20001d5c 	.word	0x20001d5c

0801982c <SUBGRF_SetRx>:

void SUBGRF_SetRx( uint32_t timeout )
{
 801982c:	b580      	push	{r7, lr}
 801982e:	b084      	sub	sp, #16
 8019830:	af00      	add	r7, sp, #0
 8019832:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 8019834:	4b0c      	ldr	r3, [pc, #48]	@ (8019868 <SUBGRF_SetRx+0x3c>)
 8019836:	2205      	movs	r2, #5
 8019838:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801983a:	687b      	ldr	r3, [r7, #4]
 801983c:	0c1b      	lsrs	r3, r3, #16
 801983e:	b2db      	uxtb	r3, r3
 8019840:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8019842:	687b      	ldr	r3, [r7, #4]
 8019844:	0a1b      	lsrs	r3, r3, #8
 8019846:	b2db      	uxtb	r3, r3
 8019848:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 801984a:	687b      	ldr	r3, [r7, #4]
 801984c:	b2db      	uxtb	r3, r3
 801984e:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 8019850:	f107 030c 	add.w	r3, r7, #12
 8019854:	2203      	movs	r2, #3
 8019856:	4619      	mov	r1, r3
 8019858:	2082      	movs	r0, #130	@ 0x82
 801985a:	f000 fddb 	bl	801a414 <SUBGRF_WriteCommand>
}
 801985e:	bf00      	nop
 8019860:	3710      	adds	r7, #16
 8019862:	46bd      	mov	sp, r7
 8019864:	bd80      	pop	{r7, pc}
 8019866:	bf00      	nop
 8019868:	20001d5c 	.word	0x20001d5c

0801986c <SUBGRF_SetRxBoosted>:

void SUBGRF_SetRxBoosted( uint32_t timeout )
{
 801986c:	b580      	push	{r7, lr}
 801986e:	b084      	sub	sp, #16
 8019870:	af00      	add	r7, sp, #0
 8019872:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 8019874:	4b0e      	ldr	r3, [pc, #56]	@ (80198b0 <SUBGRF_SetRxBoosted+0x44>)
 8019876:	2205      	movs	r2, #5
 8019878:	701a      	strb	r2, [r3, #0]

    /* ST_WORKAROUND_BEGIN: Sigfox patch > 0x96 replaced by 0x97 */
    SUBGRF_WriteRegister( REG_RX_GAIN, 0x97 ); // max LNA gain, increase current by ~2mA for around ~3dB in sensitivity
 801987a:	2197      	movs	r1, #151	@ 0x97
 801987c:	f640 00ac 	movw	r0, #2220	@ 0x8ac
 8019880:	f000 fd18 	bl	801a2b4 <SUBGRF_WriteRegister>
    /* ST_WORKAROUND_END */

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8019884:	687b      	ldr	r3, [r7, #4]
 8019886:	0c1b      	lsrs	r3, r3, #16
 8019888:	b2db      	uxtb	r3, r3
 801988a:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801988c:	687b      	ldr	r3, [r7, #4]
 801988e:	0a1b      	lsrs	r3, r3, #8
 8019890:	b2db      	uxtb	r3, r3
 8019892:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8019894:	687b      	ldr	r3, [r7, #4]
 8019896:	b2db      	uxtb	r3, r3
 8019898:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 801989a:	f107 030c 	add.w	r3, r7, #12
 801989e:	2203      	movs	r2, #3
 80198a0:	4619      	mov	r1, r3
 80198a2:	2082      	movs	r0, #130	@ 0x82
 80198a4:	f000 fdb6 	bl	801a414 <SUBGRF_WriteCommand>
}
 80198a8:	bf00      	nop
 80198aa:	3710      	adds	r7, #16
 80198ac:	46bd      	mov	sp, r7
 80198ae:	bd80      	pop	{r7, pc}
 80198b0:	20001d5c 	.word	0x20001d5c

080198b4 <SUBGRF_SetRxDutyCycle>:

void SUBGRF_SetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 80198b4:	b580      	push	{r7, lr}
 80198b6:	b084      	sub	sp, #16
 80198b8:	af00      	add	r7, sp, #0
 80198ba:	6078      	str	r0, [r7, #4]
 80198bc:	6039      	str	r1, [r7, #0]
    uint8_t buf[6];

    buf[0] = ( uint8_t )( ( rxTime >> 16 ) & 0xFF );
 80198be:	687b      	ldr	r3, [r7, #4]
 80198c0:	0c1b      	lsrs	r3, r3, #16
 80198c2:	b2db      	uxtb	r3, r3
 80198c4:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( rxTime >> 8 ) & 0xFF );
 80198c6:	687b      	ldr	r3, [r7, #4]
 80198c8:	0a1b      	lsrs	r3, r3, #8
 80198ca:	b2db      	uxtb	r3, r3
 80198cc:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( rxTime & 0xFF );
 80198ce:	687b      	ldr	r3, [r7, #4]
 80198d0:	b2db      	uxtb	r3, r3
 80198d2:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( ( sleepTime >> 16 ) & 0xFF );
 80198d4:	683b      	ldr	r3, [r7, #0]
 80198d6:	0c1b      	lsrs	r3, r3, #16
 80198d8:	b2db      	uxtb	r3, r3
 80198da:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 80198dc:	683b      	ldr	r3, [r7, #0]
 80198de:	0a1b      	lsrs	r3, r3, #8
 80198e0:	b2db      	uxtb	r3, r3
 80198e2:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( sleepTime & 0xFF );
 80198e4:	683b      	ldr	r3, [r7, #0]
 80198e6:	b2db      	uxtb	r3, r3
 80198e8:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_RXDUTYCYCLE, buf, 6 );
 80198ea:	f107 0308 	add.w	r3, r7, #8
 80198ee:	2206      	movs	r2, #6
 80198f0:	4619      	mov	r1, r3
 80198f2:	2094      	movs	r0, #148	@ 0x94
 80198f4:	f000 fd8e 	bl	801a414 <SUBGRF_WriteCommand>
    OperatingMode = MODE_RX_DC;
 80198f8:	4b03      	ldr	r3, [pc, #12]	@ (8019908 <SUBGRF_SetRxDutyCycle+0x54>)
 80198fa:	2206      	movs	r2, #6
 80198fc:	701a      	strb	r2, [r3, #0]
}
 80198fe:	bf00      	nop
 8019900:	3710      	adds	r7, #16
 8019902:	46bd      	mov	sp, r7
 8019904:	bd80      	pop	{r7, pc}
 8019906:	bf00      	nop
 8019908:	20001d5c 	.word	0x20001d5c

0801990c <SUBGRF_SetCad>:

void SUBGRF_SetCad( void )
{
 801990c:	b580      	push	{r7, lr}
 801990e:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_CAD, 0, 0 );
 8019910:	2200      	movs	r2, #0
 8019912:	2100      	movs	r1, #0
 8019914:	20c5      	movs	r0, #197	@ 0xc5
 8019916:	f000 fd7d 	bl	801a414 <SUBGRF_WriteCommand>
    OperatingMode = MODE_CAD;
 801991a:	4b02      	ldr	r3, [pc, #8]	@ (8019924 <SUBGRF_SetCad+0x18>)
 801991c:	2207      	movs	r2, #7
 801991e:	701a      	strb	r2, [r3, #0]
}
 8019920:	bf00      	nop
 8019922:	bd80      	pop	{r7, pc}
 8019924:	20001d5c 	.word	0x20001d5c

08019928 <SUBGRF_SetTxContinuousWave>:

void SUBGRF_SetTxContinuousWave( void )
{
 8019928:	b580      	push	{r7, lr}
 801992a:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSWAVE, 0, 0 );
 801992c:	2200      	movs	r2, #0
 801992e:	2100      	movs	r1, #0
 8019930:	20d1      	movs	r0, #209	@ 0xd1
 8019932:	f000 fd6f 	bl	801a414 <SUBGRF_WriteCommand>
}
 8019936:	bf00      	nop
 8019938:	bd80      	pop	{r7, pc}

0801993a <SUBGRF_SetTxInfinitePreamble>:

void SUBGRF_SetTxInfinitePreamble( void )
{
 801993a:	b580      	push	{r7, lr}
 801993c:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
 801993e:	2200      	movs	r2, #0
 8019940:	2100      	movs	r1, #0
 8019942:	20d2      	movs	r0, #210	@ 0xd2
 8019944:	f000 fd66 	bl	801a414 <SUBGRF_WriteCommand>
}
 8019948:	bf00      	nop
 801994a:	bd80      	pop	{r7, pc}

0801994c <SUBGRF_SetStopRxTimerOnPreambleDetect>:

void SUBGRF_SetStopRxTimerOnPreambleDetect( bool enable )
{
 801994c:	b580      	push	{r7, lr}
 801994e:	b082      	sub	sp, #8
 8019950:	af00      	add	r7, sp, #0
 8019952:	4603      	mov	r3, r0
 8019954:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 8019956:	1dfb      	adds	r3, r7, #7
 8019958:	2201      	movs	r2, #1
 801995a:	4619      	mov	r1, r3
 801995c:	209f      	movs	r0, #159	@ 0x9f
 801995e:	f000 fd59 	bl	801a414 <SUBGRF_WriteCommand>
}
 8019962:	bf00      	nop
 8019964:	3708      	adds	r7, #8
 8019966:	46bd      	mov	sp, r7
 8019968:	bd80      	pop	{r7, pc}

0801996a <SUBGRF_SetLoRaSymbNumTimeout>:

void SUBGRF_SetLoRaSymbNumTimeout( uint8_t symbNum )
{
 801996a:	b580      	push	{r7, lr}
 801996c:	b084      	sub	sp, #16
 801996e:	af00      	add	r7, sp, #0
 8019970:	4603      	mov	r3, r0
 8019972:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_LORASYMBTIMEOUT, &symbNum, 1 );
 8019974:	1dfb      	adds	r3, r7, #7
 8019976:	2201      	movs	r2, #1
 8019978:	4619      	mov	r1, r3
 801997a:	20a0      	movs	r0, #160	@ 0xa0
 801997c:	f000 fd4a 	bl	801a414 <SUBGRF_WriteCommand>

    if( symbNum >= 64 )
 8019980:	79fb      	ldrb	r3, [r7, #7]
 8019982:	2b3f      	cmp	r3, #63	@ 0x3f
 8019984:	d91c      	bls.n	80199c0 <SUBGRF_SetLoRaSymbNumTimeout+0x56>
    {
        uint8_t mant = symbNum >> 1;
 8019986:	79fb      	ldrb	r3, [r7, #7]
 8019988:	085b      	lsrs	r3, r3, #1
 801998a:	73fb      	strb	r3, [r7, #15]
        uint8_t exp  = 0;
 801998c:	2300      	movs	r3, #0
 801998e:	73bb      	strb	r3, [r7, #14]
        uint8_t reg  = 0;
 8019990:	2300      	movs	r3, #0
 8019992:	737b      	strb	r3, [r7, #13]

        while( mant > 31 )
 8019994:	e005      	b.n	80199a2 <SUBGRF_SetLoRaSymbNumTimeout+0x38>
        {
            mant >>= 2;
 8019996:	7bfb      	ldrb	r3, [r7, #15]
 8019998:	089b      	lsrs	r3, r3, #2
 801999a:	73fb      	strb	r3, [r7, #15]
            exp++;
 801999c:	7bbb      	ldrb	r3, [r7, #14]
 801999e:	3301      	adds	r3, #1
 80199a0:	73bb      	strb	r3, [r7, #14]
        while( mant > 31 )
 80199a2:	7bfb      	ldrb	r3, [r7, #15]
 80199a4:	2b1f      	cmp	r3, #31
 80199a6:	d8f6      	bhi.n	8019996 <SUBGRF_SetLoRaSymbNumTimeout+0x2c>
        }

        reg = exp + ( mant << 3 );
 80199a8:	7bfb      	ldrb	r3, [r7, #15]
 80199aa:	00db      	lsls	r3, r3, #3
 80199ac:	b2da      	uxtb	r2, r3
 80199ae:	7bbb      	ldrb	r3, [r7, #14]
 80199b0:	4413      	add	r3, r2
 80199b2:	737b      	strb	r3, [r7, #13]
        SUBGRF_WriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
 80199b4:	7b7b      	ldrb	r3, [r7, #13]
 80199b6:	4619      	mov	r1, r3
 80199b8:	f240 7006 	movw	r0, #1798	@ 0x706
 80199bc:	f000 fc7a 	bl	801a2b4 <SUBGRF_WriteRegister>
    }
}
 80199c0:	bf00      	nop
 80199c2:	3710      	adds	r7, #16
 80199c4:	46bd      	mov	sp, r7
 80199c6:	bd80      	pop	{r7, pc}

080199c8 <SUBGRF_SetRegulatorMode>:

void SUBGRF_SetRegulatorMode( void )
{
 80199c8:	b580      	push	{r7, lr}
 80199ca:	b082      	sub	sp, #8
 80199cc:	af00      	add	r7, sp, #0
    /* ST_WORKAROUND_BEGIN: Get RegulatorMode value from RBI */
    RadioRegulatorMode_t mode;

    if ( ( 1UL == RBI_IsDCDC() ) && ( 1UL == DCDC_ENABLE ) )
 80199ce:	f7f1 fb12 	bl	800aff6 <RBI_IsDCDC>
 80199d2:	4603      	mov	r3, r0
 80199d4:	2b01      	cmp	r3, #1
 80199d6:	d102      	bne.n	80199de <SUBGRF_SetRegulatorMode+0x16>
    {
        mode = USE_DCDC ;
 80199d8:	2301      	movs	r3, #1
 80199da:	71fb      	strb	r3, [r7, #7]
 80199dc:	e001      	b.n	80199e2 <SUBGRF_SetRegulatorMode+0x1a>
    }
    else
    {
        mode = USE_LDO ;
 80199de:	2300      	movs	r3, #0
 80199e0:	71fb      	strb	r3, [r7, #7]
    }
    /* ST_WORKAROUND_END */
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 80199e2:	1dfb      	adds	r3, r7, #7
 80199e4:	2201      	movs	r2, #1
 80199e6:	4619      	mov	r1, r3
 80199e8:	2096      	movs	r0, #150	@ 0x96
 80199ea:	f000 fd13 	bl	801a414 <SUBGRF_WriteCommand>
}
 80199ee:	bf00      	nop
 80199f0:	3708      	adds	r7, #8
 80199f2:	46bd      	mov	sp, r7
 80199f4:	bd80      	pop	{r7, pc}

080199f6 <SUBGRF_Calibrate>:

void SUBGRF_Calibrate( CalibrationParams_t calibParam )
{
 80199f6:	b580      	push	{r7, lr}
 80199f8:	b084      	sub	sp, #16
 80199fa:	af00      	add	r7, sp, #0
 80199fc:	7138      	strb	r0, [r7, #4]
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 80199fe:	793b      	ldrb	r3, [r7, #4]
 8019a00:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8019a04:	b2db      	uxtb	r3, r3
 8019a06:	019b      	lsls	r3, r3, #6
 8019a08:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 8019a0a:	793b      	ldrb	r3, [r7, #4]
 8019a0c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8019a10:	b2db      	uxtb	r3, r3
 8019a12:	015b      	lsls	r3, r3, #5
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8019a14:	b25b      	sxtb	r3, r3
 8019a16:	4313      	orrs	r3, r2
 8019a18:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 8019a1a:	793b      	ldrb	r3, [r7, #4]
 8019a1c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8019a20:	b2db      	uxtb	r3, r3
 8019a22:	011b      	lsls	r3, r3, #4
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 8019a24:	b25b      	sxtb	r3, r3
 8019a26:	4313      	orrs	r3, r2
 8019a28:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 8019a2a:	793b      	ldrb	r3, [r7, #4]
 8019a2c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8019a30:	b2db      	uxtb	r3, r3
 8019a32:	00db      	lsls	r3, r3, #3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 8019a34:	b25b      	sxtb	r3, r3
 8019a36:	4313      	orrs	r3, r2
 8019a38:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 8019a3a:	793b      	ldrb	r3, [r7, #4]
 8019a3c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8019a40:	b2db      	uxtb	r3, r3
 8019a42:	009b      	lsls	r3, r3, #2
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 8019a44:	b25b      	sxtb	r3, r3
 8019a46:	4313      	orrs	r3, r2
 8019a48:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 8019a4a:	793b      	ldrb	r3, [r7, #4]
 8019a4c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8019a50:	b2db      	uxtb	r3, r3
 8019a52:	005b      	lsls	r3, r3, #1
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 8019a54:	b25b      	sxtb	r3, r3
 8019a56:	4313      	orrs	r3, r2
 8019a58:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 8019a5a:	793b      	ldrb	r3, [r7, #4]
 8019a5c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8019a60:	b2db      	uxtb	r3, r3
 8019a62:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 8019a64:	4313      	orrs	r3, r2
 8019a66:	b25b      	sxtb	r3, r3
 8019a68:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8019a6a:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 8019a6c:	f107 030f 	add.w	r3, r7, #15
 8019a70:	2201      	movs	r2, #1
 8019a72:	4619      	mov	r1, r3
 8019a74:	2089      	movs	r0, #137	@ 0x89
 8019a76:	f000 fccd 	bl	801a414 <SUBGRF_WriteCommand>
}
 8019a7a:	bf00      	nop
 8019a7c:	3710      	adds	r7, #16
 8019a7e:	46bd      	mov	sp, r7
 8019a80:	bd80      	pop	{r7, pc}
	...

08019a84 <SUBGRF_CalibrateImage>:

void SUBGRF_CalibrateImage( uint32_t freq )
{
 8019a84:	b580      	push	{r7, lr}
 8019a86:	b084      	sub	sp, #16
 8019a88:	af00      	add	r7, sp, #0
 8019a8a:	6078      	str	r0, [r7, #4]
    uint8_t calFreq[2];

    if( freq > 900000000 )
 8019a8c:	687b      	ldr	r3, [r7, #4]
 8019a8e:	4a1b      	ldr	r2, [pc, #108]	@ (8019afc <SUBGRF_CalibrateImage+0x78>)
 8019a90:	4293      	cmp	r3, r2
 8019a92:	d904      	bls.n	8019a9e <SUBGRF_CalibrateImage+0x1a>
    {
        calFreq[0] = 0xE1;
 8019a94:	23e1      	movs	r3, #225	@ 0xe1
 8019a96:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xE9;
 8019a98:	23e9      	movs	r3, #233	@ 0xe9
 8019a9a:	737b      	strb	r3, [r7, #13]
 8019a9c:	e022      	b.n	8019ae4 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 850000000 )
 8019a9e:	687b      	ldr	r3, [r7, #4]
 8019aa0:	4a17      	ldr	r2, [pc, #92]	@ (8019b00 <SUBGRF_CalibrateImage+0x7c>)
 8019aa2:	4293      	cmp	r3, r2
 8019aa4:	d904      	bls.n	8019ab0 <SUBGRF_CalibrateImage+0x2c>
    {
        calFreq[0] = 0xD7;
 8019aa6:	23d7      	movs	r3, #215	@ 0xd7
 8019aa8:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xDB;
 8019aaa:	23db      	movs	r3, #219	@ 0xdb
 8019aac:	737b      	strb	r3, [r7, #13]
 8019aae:	e019      	b.n	8019ae4 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 770000000 )
 8019ab0:	687b      	ldr	r3, [r7, #4]
 8019ab2:	4a14      	ldr	r2, [pc, #80]	@ (8019b04 <SUBGRF_CalibrateImage+0x80>)
 8019ab4:	4293      	cmp	r3, r2
 8019ab6:	d904      	bls.n	8019ac2 <SUBGRF_CalibrateImage+0x3e>
    {
        calFreq[0] = 0xC1;
 8019ab8:	23c1      	movs	r3, #193	@ 0xc1
 8019aba:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xC5;
 8019abc:	23c5      	movs	r3, #197	@ 0xc5
 8019abe:	737b      	strb	r3, [r7, #13]
 8019ac0:	e010      	b.n	8019ae4 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 460000000 )
 8019ac2:	687b      	ldr	r3, [r7, #4]
 8019ac4:	4a10      	ldr	r2, [pc, #64]	@ (8019b08 <SUBGRF_CalibrateImage+0x84>)
 8019ac6:	4293      	cmp	r3, r2
 8019ac8:	d904      	bls.n	8019ad4 <SUBGRF_CalibrateImage+0x50>
    {
        calFreq[0] = 0x75;
 8019aca:	2375      	movs	r3, #117	@ 0x75
 8019acc:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x81;
 8019ace:	2381      	movs	r3, #129	@ 0x81
 8019ad0:	737b      	strb	r3, [r7, #13]
 8019ad2:	e007      	b.n	8019ae4 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 425000000 )
 8019ad4:	687b      	ldr	r3, [r7, #4]
 8019ad6:	4a0d      	ldr	r2, [pc, #52]	@ (8019b0c <SUBGRF_CalibrateImage+0x88>)
 8019ad8:	4293      	cmp	r3, r2
 8019ada:	d903      	bls.n	8019ae4 <SUBGRF_CalibrateImage+0x60>
    {
        calFreq[0] = 0x6B;
 8019adc:	236b      	movs	r3, #107	@ 0x6b
 8019ade:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x6F;
 8019ae0:	236f      	movs	r3, #111	@ 0x6f
 8019ae2:	737b      	strb	r3, [r7, #13]
    }
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 8019ae4:	f107 030c 	add.w	r3, r7, #12
 8019ae8:	2202      	movs	r2, #2
 8019aea:	4619      	mov	r1, r3
 8019aec:	2098      	movs	r0, #152	@ 0x98
 8019aee:	f000 fc91 	bl	801a414 <SUBGRF_WriteCommand>
}
 8019af2:	bf00      	nop
 8019af4:	3710      	adds	r7, #16
 8019af6:	46bd      	mov	sp, r7
 8019af8:	bd80      	pop	{r7, pc}
 8019afa:	bf00      	nop
 8019afc:	35a4e900 	.word	0x35a4e900
 8019b00:	32a9f880 	.word	0x32a9f880
 8019b04:	2de54480 	.word	0x2de54480
 8019b08:	1b6b0b00 	.word	0x1b6b0b00
 8019b0c:	1954fc40 	.word	0x1954fc40

08019b10 <SUBGRF_SetPaConfig>:

void SUBGRF_SetPaConfig( uint8_t paDutyCycle, uint8_t hpMax, uint8_t deviceSel, uint8_t paLut )
{
 8019b10:	b590      	push	{r4, r7, lr}
 8019b12:	b085      	sub	sp, #20
 8019b14:	af00      	add	r7, sp, #0
 8019b16:	4604      	mov	r4, r0
 8019b18:	4608      	mov	r0, r1
 8019b1a:	4611      	mov	r1, r2
 8019b1c:	461a      	mov	r2, r3
 8019b1e:	4623      	mov	r3, r4
 8019b20:	71fb      	strb	r3, [r7, #7]
 8019b22:	4603      	mov	r3, r0
 8019b24:	71bb      	strb	r3, [r7, #6]
 8019b26:	460b      	mov	r3, r1
 8019b28:	717b      	strb	r3, [r7, #5]
 8019b2a:	4613      	mov	r3, r2
 8019b2c:	713b      	strb	r3, [r7, #4]
    uint8_t buf[4];

    buf[0] = paDutyCycle;
 8019b2e:	79fb      	ldrb	r3, [r7, #7]
 8019b30:	733b      	strb	r3, [r7, #12]
    buf[1] = hpMax;
 8019b32:	79bb      	ldrb	r3, [r7, #6]
 8019b34:	737b      	strb	r3, [r7, #13]
    buf[2] = deviceSel;
 8019b36:	797b      	ldrb	r3, [r7, #5]
 8019b38:	73bb      	strb	r3, [r7, #14]
    buf[3] = paLut;
 8019b3a:	793b      	ldrb	r3, [r7, #4]
 8019b3c:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 8019b3e:	f107 030c 	add.w	r3, r7, #12
 8019b42:	2204      	movs	r2, #4
 8019b44:	4619      	mov	r1, r3
 8019b46:	2095      	movs	r0, #149	@ 0x95
 8019b48:	f000 fc64 	bl	801a414 <SUBGRF_WriteCommand>
}
 8019b4c:	bf00      	nop
 8019b4e:	3714      	adds	r7, #20
 8019b50:	46bd      	mov	sp, r7
 8019b52:	bd90      	pop	{r4, r7, pc}

08019b54 <SUBGRF_SetDioIrqParams>:
{
    SUBGRF_WriteCommand( RADIO_SET_TXFALLBACKMODE, &fallbackMode, 1 );
}

void SUBGRF_SetDioIrqParams( uint16_t irqMask, uint16_t dio1Mask, uint16_t dio2Mask, uint16_t dio3Mask )
{
 8019b54:	b590      	push	{r4, r7, lr}
 8019b56:	b085      	sub	sp, #20
 8019b58:	af00      	add	r7, sp, #0
 8019b5a:	4604      	mov	r4, r0
 8019b5c:	4608      	mov	r0, r1
 8019b5e:	4611      	mov	r1, r2
 8019b60:	461a      	mov	r2, r3
 8019b62:	4623      	mov	r3, r4
 8019b64:	80fb      	strh	r3, [r7, #6]
 8019b66:	4603      	mov	r3, r0
 8019b68:	80bb      	strh	r3, [r7, #4]
 8019b6a:	460b      	mov	r3, r1
 8019b6c:	807b      	strh	r3, [r7, #2]
 8019b6e:	4613      	mov	r3, r2
 8019b70:	803b      	strh	r3, [r7, #0]
    uint8_t buf[8];

    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 8019b72:	88fb      	ldrh	r3, [r7, #6]
 8019b74:	0a1b      	lsrs	r3, r3, #8
 8019b76:	b29b      	uxth	r3, r3
 8019b78:	b2db      	uxtb	r3, r3
 8019b7a:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 8019b7c:	88fb      	ldrh	r3, [r7, #6]
 8019b7e:	b2db      	uxtb	r3, r3
 8019b80:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 8019b82:	88bb      	ldrh	r3, [r7, #4]
 8019b84:	0a1b      	lsrs	r3, r3, #8
 8019b86:	b29b      	uxth	r3, r3
 8019b88:	b2db      	uxtb	r3, r3
 8019b8a:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 8019b8c:	88bb      	ldrh	r3, [r7, #4]
 8019b8e:	b2db      	uxtb	r3, r3
 8019b90:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 8019b92:	887b      	ldrh	r3, [r7, #2]
 8019b94:	0a1b      	lsrs	r3, r3, #8
 8019b96:	b29b      	uxth	r3, r3
 8019b98:	b2db      	uxtb	r3, r3
 8019b9a:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 8019b9c:	887b      	ldrh	r3, [r7, #2]
 8019b9e:	b2db      	uxtb	r3, r3
 8019ba0:	737b      	strb	r3, [r7, #13]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 8019ba2:	883b      	ldrh	r3, [r7, #0]
 8019ba4:	0a1b      	lsrs	r3, r3, #8
 8019ba6:	b29b      	uxth	r3, r3
 8019ba8:	b2db      	uxtb	r3, r3
 8019baa:	73bb      	strb	r3, [r7, #14]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 8019bac:	883b      	ldrh	r3, [r7, #0]
 8019bae:	b2db      	uxtb	r3, r3
 8019bb0:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 8019bb2:	f107 0308 	add.w	r3, r7, #8
 8019bb6:	2208      	movs	r2, #8
 8019bb8:	4619      	mov	r1, r3
 8019bba:	2008      	movs	r0, #8
 8019bbc:	f000 fc2a 	bl	801a414 <SUBGRF_WriteCommand>
}
 8019bc0:	bf00      	nop
 8019bc2:	3714      	adds	r7, #20
 8019bc4:	46bd      	mov	sp, r7
 8019bc6:	bd90      	pop	{r4, r7, pc}

08019bc8 <SUBGRF_SetTcxoMode>:
    SUBGRF_ReadCommand( RADIO_GET_IRQSTATUS, irqStatus, 2 );
    return ( irqStatus[0] << 8 ) | irqStatus[1];
}

void SUBGRF_SetTcxoMode (RadioTcxoCtrlVoltage_t tcxoVoltage, uint32_t timeout )
{
 8019bc8:	b580      	push	{r7, lr}
 8019bca:	b084      	sub	sp, #16
 8019bcc:	af00      	add	r7, sp, #0
 8019bce:	4603      	mov	r3, r0
 8019bd0:	6039      	str	r1, [r7, #0]
 8019bd2:	71fb      	strb	r3, [r7, #7]
    uint8_t buf[4];

    buf[0] = tcxoVoltage & 0x07;
 8019bd4:	79fb      	ldrb	r3, [r7, #7]
 8019bd6:	f003 0307 	and.w	r3, r3, #7
 8019bda:	b2db      	uxtb	r3, r3
 8019bdc:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8019bde:	683b      	ldr	r3, [r7, #0]
 8019be0:	0c1b      	lsrs	r3, r3, #16
 8019be2:	b2db      	uxtb	r3, r3
 8019be4:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8019be6:	683b      	ldr	r3, [r7, #0]
 8019be8:	0a1b      	lsrs	r3, r3, #8
 8019bea:	b2db      	uxtb	r3, r3
 8019bec:	73bb      	strb	r3, [r7, #14]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 8019bee:	683b      	ldr	r3, [r7, #0]
 8019bf0:	b2db      	uxtb	r3, r3
 8019bf2:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 8019bf4:	f107 030c 	add.w	r3, r7, #12
 8019bf8:	2204      	movs	r2, #4
 8019bfa:	4619      	mov	r1, r3
 8019bfc:	2097      	movs	r0, #151	@ 0x97
 8019bfe:	f000 fc09 	bl	801a414 <SUBGRF_WriteCommand>
}
 8019c02:	bf00      	nop
 8019c04:	3710      	adds	r7, #16
 8019c06:	46bd      	mov	sp, r7
 8019c08:	bd80      	pop	{r7, pc}
	...

08019c0c <SUBGRF_SetRfFrequency>:

void SUBGRF_SetRfFrequency( uint32_t frequency )
{
 8019c0c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8019c10:	b084      	sub	sp, #16
 8019c12:	af00      	add	r7, sp, #0
 8019c14:	6078      	str	r0, [r7, #4]
    uint8_t buf[4];
    uint32_t chan = 0;
 8019c16:	2300      	movs	r3, #0
 8019c18:	60fb      	str	r3, [r7, #12]

    if( ImageCalibrated == false )
 8019c1a:	4b1d      	ldr	r3, [pc, #116]	@ (8019c90 <SUBGRF_SetRfFrequency+0x84>)
 8019c1c:	781b      	ldrb	r3, [r3, #0]
 8019c1e:	f083 0301 	eor.w	r3, r3, #1
 8019c22:	b2db      	uxtb	r3, r3
 8019c24:	2b00      	cmp	r3, #0
 8019c26:	d005      	beq.n	8019c34 <SUBGRF_SetRfFrequency+0x28>
    {
        SUBGRF_CalibrateImage( frequency );
 8019c28:	6878      	ldr	r0, [r7, #4]
 8019c2a:	f7ff ff2b 	bl	8019a84 <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 8019c2e:	4b18      	ldr	r3, [pc, #96]	@ (8019c90 <SUBGRF_SetRfFrequency+0x84>)
 8019c30:	2201      	movs	r2, #1
 8019c32:	701a      	strb	r2, [r3, #0]
    }
    /* ST_WORKAROUND_BEGIN: Simplified frequency calculation */
    SX_FREQ_TO_CHANNEL(chan, frequency);
 8019c34:	687b      	ldr	r3, [r7, #4]
 8019c36:	2200      	movs	r2, #0
 8019c38:	461c      	mov	r4, r3
 8019c3a:	4615      	mov	r5, r2
 8019c3c:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 8019c40:	ea4f 6844 	mov.w	r8, r4, lsl #25
 8019c44:	4a13      	ldr	r2, [pc, #76]	@ (8019c94 <SUBGRF_SetRfFrequency+0x88>)
 8019c46:	f04f 0300 	mov.w	r3, #0
 8019c4a:	4640      	mov	r0, r8
 8019c4c:	4649      	mov	r1, r9
 8019c4e:	f7e7 fa27 	bl	80010a0 <__aeabi_uldivmod>
 8019c52:	4602      	mov	r2, r0
 8019c54:	460b      	mov	r3, r1
 8019c56:	4613      	mov	r3, r2
 8019c58:	60fb      	str	r3, [r7, #12]
    /* ST_WORKAROUND_END */
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 8019c5a:	68fb      	ldr	r3, [r7, #12]
 8019c5c:	0e1b      	lsrs	r3, r3, #24
 8019c5e:	b2db      	uxtb	r3, r3
 8019c60:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 8019c62:	68fb      	ldr	r3, [r7, #12]
 8019c64:	0c1b      	lsrs	r3, r3, #16
 8019c66:	b2db      	uxtb	r3, r3
 8019c68:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 8019c6a:	68fb      	ldr	r3, [r7, #12]
 8019c6c:	0a1b      	lsrs	r3, r3, #8
 8019c6e:	b2db      	uxtb	r3, r3
 8019c70:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( chan & 0xFF );
 8019c72:	68fb      	ldr	r3, [r7, #12]
 8019c74:	b2db      	uxtb	r3, r3
 8019c76:	72fb      	strb	r3, [r7, #11]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 8019c78:	f107 0308 	add.w	r3, r7, #8
 8019c7c:	2204      	movs	r2, #4
 8019c7e:	4619      	mov	r1, r3
 8019c80:	2086      	movs	r0, #134	@ 0x86
 8019c82:	f000 fbc7 	bl	801a414 <SUBGRF_WriteCommand>
}
 8019c86:	bf00      	nop
 8019c88:	3710      	adds	r7, #16
 8019c8a:	46bd      	mov	sp, r7
 8019c8c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8019c90:	20001d64 	.word	0x20001d64
 8019c94:	01e84800 	.word	0x01e84800

08019c98 <SUBGRF_SetPacketType>:

void SUBGRF_SetPacketType( RadioPacketTypes_t packetType )
{
 8019c98:	b580      	push	{r7, lr}
 8019c9a:	b082      	sub	sp, #8
 8019c9c:	af00      	add	r7, sp, #0
 8019c9e:	4603      	mov	r3, r0
 8019ca0:	71fb      	strb	r3, [r7, #7]
    // Save packet type internally to avoid questioning the radio
    PacketType = packetType;
 8019ca2:	79fa      	ldrb	r2, [r7, #7]
 8019ca4:	4b09      	ldr	r3, [pc, #36]	@ (8019ccc <SUBGRF_SetPacketType+0x34>)
 8019ca6:	701a      	strb	r2, [r3, #0]

    if( packetType == PACKET_TYPE_GFSK )
 8019ca8:	79fb      	ldrb	r3, [r7, #7]
 8019caa:	2b00      	cmp	r3, #0
 8019cac:	d104      	bne.n	8019cb8 <SUBGRF_SetPacketType+0x20>
    {
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 8019cae:	2100      	movs	r1, #0
 8019cb0:	f240 60ac 	movw	r0, #1708	@ 0x6ac
 8019cb4:	f000 fafe 	bl	801a2b4 <SUBGRF_WriteRegister>
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 8019cb8:	1dfb      	adds	r3, r7, #7
 8019cba:	2201      	movs	r2, #1
 8019cbc:	4619      	mov	r1, r3
 8019cbe:	208a      	movs	r0, #138	@ 0x8a
 8019cc0:	f000 fba8 	bl	801a414 <SUBGRF_WriteCommand>
}
 8019cc4:	bf00      	nop
 8019cc6:	3708      	adds	r7, #8
 8019cc8:	46bd      	mov	sp, r7
 8019cca:	bd80      	pop	{r7, pc}
 8019ccc:	20001d5d 	.word	0x20001d5d

08019cd0 <SUBGRF_GetPacketType>:

RadioPacketTypes_t SUBGRF_GetPacketType( void )
{
 8019cd0:	b480      	push	{r7}
 8019cd2:	af00      	add	r7, sp, #0
    return PacketType;
 8019cd4:	4b02      	ldr	r3, [pc, #8]	@ (8019ce0 <SUBGRF_GetPacketType+0x10>)
 8019cd6:	781b      	ldrb	r3, [r3, #0]
}
 8019cd8:	4618      	mov	r0, r3
 8019cda:	46bd      	mov	sp, r7
 8019cdc:	bc80      	pop	{r7}
 8019cde:	4770      	bx	lr
 8019ce0:	20001d5d 	.word	0x20001d5d

08019ce4 <SUBGRF_SetTxParams>:

void SUBGRF_SetTxParams( uint8_t paSelect, int8_t power, RadioRampTimes_t rampTime )
{
 8019ce4:	b580      	push	{r7, lr}
 8019ce6:	b084      	sub	sp, #16
 8019ce8:	af00      	add	r7, sp, #0
 8019cea:	4603      	mov	r3, r0
 8019cec:	71fb      	strb	r3, [r7, #7]
 8019cee:	460b      	mov	r3, r1
 8019cf0:	71bb      	strb	r3, [r7, #6]
 8019cf2:	4613      	mov	r3, r2
 8019cf4:	717b      	strb	r3, [r7, #5]
    uint8_t buf[2];
    int32_t max_power;

    if (paSelect == RFO_LP)
 8019cf6:	79fb      	ldrb	r3, [r7, #7]
 8019cf8:	2b01      	cmp	r3, #1
 8019cfa:	d149      	bne.n	8019d90 <SUBGRF_SetTxParams+0xac>
    {
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_LP_MAXPOWER);
 8019cfc:	2000      	movs	r0, #0
 8019cfe:	f7f1 f981 	bl	800b004 <RBI_GetRFOMaxPowerConfig>
 8019d02:	60f8      	str	r0, [r7, #12]
        if (power >  max_power)
 8019d04:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8019d08:	68fa      	ldr	r2, [r7, #12]
 8019d0a:	429a      	cmp	r2, r3
 8019d0c:	da01      	bge.n	8019d12 <SUBGRF_SetTxParams+0x2e>
        {
          power = max_power;
 8019d0e:	68fb      	ldr	r3, [r7, #12]
 8019d10:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 14)
 8019d12:	68fb      	ldr	r3, [r7, #12]
 8019d14:	2b0e      	cmp	r3, #14
 8019d16:	d10e      	bne.n	8019d36 <SUBGRF_SetTxParams+0x52>
        {
            SUBGRF_SetPaConfig(0x04, 0x00, 0x01, 0x01);
 8019d18:	2301      	movs	r3, #1
 8019d1a:	2201      	movs	r2, #1
 8019d1c:	2100      	movs	r1, #0
 8019d1e:	2004      	movs	r0, #4
 8019d20:	f7ff fef6 	bl	8019b10 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 8019d24:	79ba      	ldrb	r2, [r7, #6]
 8019d26:	68fb      	ldr	r3, [r7, #12]
 8019d28:	b2db      	uxtb	r3, r3
 8019d2a:	1ad3      	subs	r3, r2, r3
 8019d2c:	b2db      	uxtb	r3, r3
 8019d2e:	330e      	adds	r3, #14
 8019d30:	b2db      	uxtb	r3, r3
 8019d32:	71bb      	strb	r3, [r7, #6]
 8019d34:	e01f      	b.n	8019d76 <SUBGRF_SetTxParams+0x92>
        }
        else if (max_power == 10)
 8019d36:	68fb      	ldr	r3, [r7, #12]
 8019d38:	2b0a      	cmp	r3, #10
 8019d3a:	d10e      	bne.n	8019d5a <SUBGRF_SetTxParams+0x76>
        {
            SUBGRF_SetPaConfig(0x01, 0x00, 0x01, 0x01);
 8019d3c:	2301      	movs	r3, #1
 8019d3e:	2201      	movs	r2, #1
 8019d40:	2100      	movs	r1, #0
 8019d42:	2001      	movs	r0, #1
 8019d44:	f7ff fee4 	bl	8019b10 <SUBGRF_SetPaConfig>
            power = 0x0D - (max_power - power);
 8019d48:	79ba      	ldrb	r2, [r7, #6]
 8019d4a:	68fb      	ldr	r3, [r7, #12]
 8019d4c:	b2db      	uxtb	r3, r3
 8019d4e:	1ad3      	subs	r3, r2, r3
 8019d50:	b2db      	uxtb	r3, r3
 8019d52:	330d      	adds	r3, #13
 8019d54:	b2db      	uxtb	r3, r3
 8019d56:	71bb      	strb	r3, [r7, #6]
 8019d58:	e00d      	b.n	8019d76 <SUBGRF_SetTxParams+0x92>
        }
        else /*default 15dBm*/
        {
            SUBGRF_SetPaConfig(0x06, 0x00, 0x01, 0x01);
 8019d5a:	2301      	movs	r3, #1
 8019d5c:	2201      	movs	r2, #1
 8019d5e:	2100      	movs	r1, #0
 8019d60:	2006      	movs	r0, #6
 8019d62:	f7ff fed5 	bl	8019b10 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 8019d66:	79ba      	ldrb	r2, [r7, #6]
 8019d68:	68fb      	ldr	r3, [r7, #12]
 8019d6a:	b2db      	uxtb	r3, r3
 8019d6c:	1ad3      	subs	r3, r2, r3
 8019d6e:	b2db      	uxtb	r3, r3
 8019d70:	330e      	adds	r3, #14
 8019d72:	b2db      	uxtb	r3, r3
 8019d74:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -17)
 8019d76:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8019d7a:	f113 0f11 	cmn.w	r3, #17
 8019d7e:	da01      	bge.n	8019d84 <SUBGRF_SetTxParams+0xa0>
        {
            power = -17;
 8019d80:	23ef      	movs	r3, #239	@ 0xef
 8019d82:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x18);   /* current max is 80 mA for the whole device*/
 8019d84:	2118      	movs	r1, #24
 8019d86:	f640 00e7 	movw	r0, #2279	@ 0x8e7
 8019d8a:	f000 fa93 	bl	801a2b4 <SUBGRF_WriteRegister>
 8019d8e:	e067      	b.n	8019e60 <SUBGRF_SetTxParams+0x17c>
    }
    else /* rfo_hp*/
    {
        /* WORKAROUND - Better Resistance of the RFO High Power Tx to Antenna Mismatch, see STM32WL Erratasheet*/
        SUBGRF_WriteRegister(REG_TX_CLAMP, SUBGRF_ReadRegister(REG_TX_CLAMP) | (0x0F << 1));
 8019d90:	f640 00d8 	movw	r0, #2264	@ 0x8d8
 8019d94:	f000 faa2 	bl	801a2dc <SUBGRF_ReadRegister>
 8019d98:	4603      	mov	r3, r0
 8019d9a:	f043 031e 	orr.w	r3, r3, #30
 8019d9e:	b2db      	uxtb	r3, r3
 8019da0:	4619      	mov	r1, r3
 8019da2:	f640 00d8 	movw	r0, #2264	@ 0x8d8
 8019da6:	f000 fa85 	bl	801a2b4 <SUBGRF_WriteRegister>
        /* WORKAROUND END*/
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_HP_MAXPOWER);
 8019daa:	2001      	movs	r0, #1
 8019dac:	f7f1 f92a 	bl	800b004 <RBI_GetRFOMaxPowerConfig>
 8019db0:	60f8      	str	r0, [r7, #12]
        if (power > max_power)
 8019db2:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8019db6:	68fa      	ldr	r2, [r7, #12]
 8019db8:	429a      	cmp	r2, r3
 8019dba:	da01      	bge.n	8019dc0 <SUBGRF_SetTxParams+0xdc>
        {
            power = max_power;
 8019dbc:	68fb      	ldr	r3, [r7, #12]
 8019dbe:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 20)
 8019dc0:	68fb      	ldr	r3, [r7, #12]
 8019dc2:	2b14      	cmp	r3, #20
 8019dc4:	d10e      	bne.n	8019de4 <SUBGRF_SetTxParams+0x100>
        {
            SUBGRF_SetPaConfig(0x03, 0x05, 0x00, 0x01);
 8019dc6:	2301      	movs	r3, #1
 8019dc8:	2200      	movs	r2, #0
 8019dca:	2105      	movs	r1, #5
 8019dcc:	2003      	movs	r0, #3
 8019dce:	f7ff fe9f 	bl	8019b10 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 8019dd2:	79ba      	ldrb	r2, [r7, #6]
 8019dd4:	68fb      	ldr	r3, [r7, #12]
 8019dd6:	b2db      	uxtb	r3, r3
 8019dd8:	1ad3      	subs	r3, r2, r3
 8019dda:	b2db      	uxtb	r3, r3
 8019ddc:	3316      	adds	r3, #22
 8019dde:	b2db      	uxtb	r3, r3
 8019de0:	71bb      	strb	r3, [r7, #6]
 8019de2:	e031      	b.n	8019e48 <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 17)
 8019de4:	68fb      	ldr	r3, [r7, #12]
 8019de6:	2b11      	cmp	r3, #17
 8019de8:	d10e      	bne.n	8019e08 <SUBGRF_SetTxParams+0x124>
        {
            SUBGRF_SetPaConfig(0x02, 0x03, 0x00, 0x01);
 8019dea:	2301      	movs	r3, #1
 8019dec:	2200      	movs	r2, #0
 8019dee:	2103      	movs	r1, #3
 8019df0:	2002      	movs	r0, #2
 8019df2:	f7ff fe8d 	bl	8019b10 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 8019df6:	79ba      	ldrb	r2, [r7, #6]
 8019df8:	68fb      	ldr	r3, [r7, #12]
 8019dfa:	b2db      	uxtb	r3, r3
 8019dfc:	1ad3      	subs	r3, r2, r3
 8019dfe:	b2db      	uxtb	r3, r3
 8019e00:	3316      	adds	r3, #22
 8019e02:	b2db      	uxtb	r3, r3
 8019e04:	71bb      	strb	r3, [r7, #6]
 8019e06:	e01f      	b.n	8019e48 <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 14)
 8019e08:	68fb      	ldr	r3, [r7, #12]
 8019e0a:	2b0e      	cmp	r3, #14
 8019e0c:	d10e      	bne.n	8019e2c <SUBGRF_SetTxParams+0x148>
        {
            SUBGRF_SetPaConfig(0x02, 0x02, 0x00, 0x01);
 8019e0e:	2301      	movs	r3, #1
 8019e10:	2200      	movs	r2, #0
 8019e12:	2102      	movs	r1, #2
 8019e14:	2002      	movs	r0, #2
 8019e16:	f7ff fe7b 	bl	8019b10 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 8019e1a:	79ba      	ldrb	r2, [r7, #6]
 8019e1c:	68fb      	ldr	r3, [r7, #12]
 8019e1e:	b2db      	uxtb	r3, r3
 8019e20:	1ad3      	subs	r3, r2, r3
 8019e22:	b2db      	uxtb	r3, r3
 8019e24:	330e      	adds	r3, #14
 8019e26:	b2db      	uxtb	r3, r3
 8019e28:	71bb      	strb	r3, [r7, #6]
 8019e2a:	e00d      	b.n	8019e48 <SUBGRF_SetTxParams+0x164>
        }
        else /*22dBm*/
        {
            SUBGRF_SetPaConfig(0x04, 0x07, 0x00, 0x01);
 8019e2c:	2301      	movs	r3, #1
 8019e2e:	2200      	movs	r2, #0
 8019e30:	2107      	movs	r1, #7
 8019e32:	2004      	movs	r0, #4
 8019e34:	f7ff fe6c 	bl	8019b10 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 8019e38:	79ba      	ldrb	r2, [r7, #6]
 8019e3a:	68fb      	ldr	r3, [r7, #12]
 8019e3c:	b2db      	uxtb	r3, r3
 8019e3e:	1ad3      	subs	r3, r2, r3
 8019e40:	b2db      	uxtb	r3, r3
 8019e42:	3316      	adds	r3, #22
 8019e44:	b2db      	uxtb	r3, r3
 8019e46:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -9)
 8019e48:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8019e4c:	f113 0f09 	cmn.w	r3, #9
 8019e50:	da01      	bge.n	8019e56 <SUBGRF_SetTxParams+0x172>
        {
            power = -9;
 8019e52:	23f7      	movs	r3, #247	@ 0xf7
 8019e54:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x38);   /*current max 160mA for the whole device*/
 8019e56:	2138      	movs	r1, #56	@ 0x38
 8019e58:	f640 00e7 	movw	r0, #2279	@ 0x8e7
 8019e5c:	f000 fa2a 	bl	801a2b4 <SUBGRF_WriteRegister>
    }
    buf[0] = power;
 8019e60:	79bb      	ldrb	r3, [r7, #6]
 8019e62:	723b      	strb	r3, [r7, #8]
    buf[1] = (uint8_t)rampTime;
 8019e64:	797b      	ldrb	r3, [r7, #5]
 8019e66:	727b      	strb	r3, [r7, #9]
    SUBGRF_WriteCommand(RADIO_SET_TXPARAMS, buf, 2);
 8019e68:	f107 0308 	add.w	r3, r7, #8
 8019e6c:	2202      	movs	r2, #2
 8019e6e:	4619      	mov	r1, r3
 8019e70:	208e      	movs	r0, #142	@ 0x8e
 8019e72:	f000 facf 	bl	801a414 <SUBGRF_WriteCommand>
}
 8019e76:	bf00      	nop
 8019e78:	3710      	adds	r7, #16
 8019e7a:	46bd      	mov	sp, r7
 8019e7c:	bd80      	pop	{r7, pc}
	...

08019e80 <SUBGRF_SetModulationParams>:

void SUBGRF_SetModulationParams( ModulationParams_t *modulationParams )
{
 8019e80:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8019e84:	b086      	sub	sp, #24
 8019e86:	af00      	add	r7, sp, #0
 8019e88:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint32_t tempVal = 0;
 8019e8a:	2300      	movs	r3, #0
 8019e8c:	617b      	str	r3, [r7, #20]
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8019e8e:	4a61      	ldr	r2, [pc, #388]	@ (801a014 <SUBGRF_SetModulationParams+0x194>)
 8019e90:	f107 0308 	add.w	r3, r7, #8
 8019e94:	e892 0003 	ldmia.w	r2, {r0, r1}
 8019e98:	e883 0003 	stmia.w	r3, {r0, r1}

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != modulationParams->PacketType )
 8019e9c:	687b      	ldr	r3, [r7, #4]
 8019e9e:	781a      	ldrb	r2, [r3, #0]
 8019ea0:	4b5d      	ldr	r3, [pc, #372]	@ (801a018 <SUBGRF_SetModulationParams+0x198>)
 8019ea2:	781b      	ldrb	r3, [r3, #0]
 8019ea4:	429a      	cmp	r2, r3
 8019ea6:	d004      	beq.n	8019eb2 <SUBGRF_SetModulationParams+0x32>
    {
        SUBGRF_SetPacketType( modulationParams->PacketType );
 8019ea8:	687b      	ldr	r3, [r7, #4]
 8019eaa:	781b      	ldrb	r3, [r3, #0]
 8019eac:	4618      	mov	r0, r3
 8019eae:	f7ff fef3 	bl	8019c98 <SUBGRF_SetPacketType>
    }

    switch( modulationParams->PacketType )
 8019eb2:	687b      	ldr	r3, [r7, #4]
 8019eb4:	781b      	ldrb	r3, [r3, #0]
 8019eb6:	2b03      	cmp	r3, #3
 8019eb8:	f200 80a5 	bhi.w	801a006 <SUBGRF_SetModulationParams+0x186>
 8019ebc:	a201      	add	r2, pc, #4	@ (adr r2, 8019ec4 <SUBGRF_SetModulationParams+0x44>)
 8019ebe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019ec2:	bf00      	nop
 8019ec4:	08019ed5 	.word	0x08019ed5
 8019ec8:	08019f95 	.word	0x08019f95
 8019ecc:	08019f57 	.word	0x08019f57
 8019ed0:	08019fc3 	.word	0x08019fc3
    {
    case PACKET_TYPE_GFSK:
        n = 8;
 8019ed4:	2308      	movs	r3, #8
 8019ed6:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 8019ed8:	687b      	ldr	r3, [r7, #4]
 8019eda:	685b      	ldr	r3, [r3, #4]
 8019edc:	4a4f      	ldr	r2, [pc, #316]	@ (801a01c <SUBGRF_SetModulationParams+0x19c>)
 8019ede:	fbb2 f3f3 	udiv	r3, r2, r3
 8019ee2:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8019ee4:	697b      	ldr	r3, [r7, #20]
 8019ee6:	0c1b      	lsrs	r3, r3, #16
 8019ee8:	b2db      	uxtb	r3, r3
 8019eea:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8019eec:	697b      	ldr	r3, [r7, #20]
 8019eee:	0a1b      	lsrs	r3, r3, #8
 8019ef0:	b2db      	uxtb	r3, r3
 8019ef2:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 8019ef4:	697b      	ldr	r3, [r7, #20]
 8019ef6:	b2db      	uxtb	r3, r3
 8019ef8:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 8019efa:	687b      	ldr	r3, [r7, #4]
 8019efc:	7b1b      	ldrb	r3, [r3, #12]
 8019efe:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 8019f00:	687b      	ldr	r3, [r7, #4]
 8019f02:	7b5b      	ldrb	r3, [r3, #13]
 8019f04:	733b      	strb	r3, [r7, #12]
        /* ST_WORKAROUND_BEGIN: Simplified frequency calculation */
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 8019f06:	687b      	ldr	r3, [r7, #4]
 8019f08:	689b      	ldr	r3, [r3, #8]
 8019f0a:	2200      	movs	r2, #0
 8019f0c:	461c      	mov	r4, r3
 8019f0e:	4615      	mov	r5, r2
 8019f10:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 8019f14:	ea4f 6844 	mov.w	r8, r4, lsl #25
 8019f18:	4a41      	ldr	r2, [pc, #260]	@ (801a020 <SUBGRF_SetModulationParams+0x1a0>)
 8019f1a:	f04f 0300 	mov.w	r3, #0
 8019f1e:	4640      	mov	r0, r8
 8019f20:	4649      	mov	r1, r9
 8019f22:	f7e7 f8bd 	bl	80010a0 <__aeabi_uldivmod>
 8019f26:	4602      	mov	r2, r0
 8019f28:	460b      	mov	r3, r1
 8019f2a:	4613      	mov	r3, r2
 8019f2c:	617b      	str	r3, [r7, #20]
        /* ST_WORKAROUND_END */
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 8019f2e:	697b      	ldr	r3, [r7, #20]
 8019f30:	0c1b      	lsrs	r3, r3, #16
 8019f32:	b2db      	uxtb	r3, r3
 8019f34:	737b      	strb	r3, [r7, #13]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 8019f36:	697b      	ldr	r3, [r7, #20]
 8019f38:	0a1b      	lsrs	r3, r3, #8
 8019f3a:	b2db      	uxtb	r3, r3
 8019f3c:	73bb      	strb	r3, [r7, #14]
        buf[7] = ( tempVal& 0xFF );
 8019f3e:	697b      	ldr	r3, [r7, #20]
 8019f40:	b2db      	uxtb	r3, r3
 8019f42:	73fb      	strb	r3, [r7, #15]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8019f44:	7cfb      	ldrb	r3, [r7, #19]
 8019f46:	b29a      	uxth	r2, r3
 8019f48:	f107 0308 	add.w	r3, r7, #8
 8019f4c:	4619      	mov	r1, r3
 8019f4e:	208b      	movs	r0, #139	@ 0x8b
 8019f50:	f000 fa60 	bl	801a414 <SUBGRF_WriteCommand>
        break;
 8019f54:	e058      	b.n	801a008 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_BPSK:
        n = 4;
 8019f56:	2304      	movs	r3, #4
 8019f58:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 8019f5a:	687b      	ldr	r3, [r7, #4]
 8019f5c:	691b      	ldr	r3, [r3, #16]
 8019f5e:	4a2f      	ldr	r2, [pc, #188]	@ (801a01c <SUBGRF_SetModulationParams+0x19c>)
 8019f60:	fbb2 f3f3 	udiv	r3, r2, r3
 8019f64:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8019f66:	697b      	ldr	r3, [r7, #20]
 8019f68:	0c1b      	lsrs	r3, r3, #16
 8019f6a:	b2db      	uxtb	r3, r3
 8019f6c:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8019f6e:	697b      	ldr	r3, [r7, #20]
 8019f70:	0a1b      	lsrs	r3, r3, #8
 8019f72:	b2db      	uxtb	r3, r3
 8019f74:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 8019f76:	697b      	ldr	r3, [r7, #20]
 8019f78:	b2db      	uxtb	r3, r3
 8019f7a:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 8019f7c:	687b      	ldr	r3, [r7, #4]
 8019f7e:	7d1b      	ldrb	r3, [r3, #20]
 8019f80:	72fb      	strb	r3, [r7, #11]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8019f82:	7cfb      	ldrb	r3, [r7, #19]
 8019f84:	b29a      	uxth	r2, r3
 8019f86:	f107 0308 	add.w	r3, r7, #8
 8019f8a:	4619      	mov	r1, r3
 8019f8c:	208b      	movs	r0, #139	@ 0x8b
 8019f8e:	f000 fa41 	bl	801a414 <SUBGRF_WriteCommand>
        break;
 8019f92:	e039      	b.n	801a008 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_LORA:
        n = 4;
 8019f94:	2304      	movs	r3, #4
 8019f96:	74fb      	strb	r3, [r7, #19]
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 8019f98:	687b      	ldr	r3, [r7, #4]
 8019f9a:	7e1b      	ldrb	r3, [r3, #24]
 8019f9c:	723b      	strb	r3, [r7, #8]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 8019f9e:	687b      	ldr	r3, [r7, #4]
 8019fa0:	7e5b      	ldrb	r3, [r3, #25]
 8019fa2:	727b      	strb	r3, [r7, #9]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 8019fa4:	687b      	ldr	r3, [r7, #4]
 8019fa6:	7e9b      	ldrb	r3, [r3, #26]
 8019fa8:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 8019faa:	687b      	ldr	r3, [r7, #4]
 8019fac:	7edb      	ldrb	r3, [r3, #27]
 8019fae:	72fb      	strb	r3, [r7, #11]

        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8019fb0:	7cfb      	ldrb	r3, [r7, #19]
 8019fb2:	b29a      	uxth	r2, r3
 8019fb4:	f107 0308 	add.w	r3, r7, #8
 8019fb8:	4619      	mov	r1, r3
 8019fba:	208b      	movs	r0, #139	@ 0x8b
 8019fbc:	f000 fa2a 	bl	801a414 <SUBGRF_WriteCommand>

        break;
 8019fc0:	e022      	b.n	801a008 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_GMSK:
        n = 5;
 8019fc2:	2305      	movs	r3, #5
 8019fc4:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 8019fc6:	687b      	ldr	r3, [r7, #4]
 8019fc8:	685b      	ldr	r3, [r3, #4]
 8019fca:	4a14      	ldr	r2, [pc, #80]	@ (801a01c <SUBGRF_SetModulationParams+0x19c>)
 8019fcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8019fd0:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8019fd2:	697b      	ldr	r3, [r7, #20]
 8019fd4:	0c1b      	lsrs	r3, r3, #16
 8019fd6:	b2db      	uxtb	r3, r3
 8019fd8:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8019fda:	697b      	ldr	r3, [r7, #20]
 8019fdc:	0a1b      	lsrs	r3, r3, #8
 8019fde:	b2db      	uxtb	r3, r3
 8019fe0:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 8019fe2:	697b      	ldr	r3, [r7, #20]
 8019fe4:	b2db      	uxtb	r3, r3
 8019fe6:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 8019fe8:	687b      	ldr	r3, [r7, #4]
 8019fea:	7b1b      	ldrb	r3, [r3, #12]
 8019fec:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 8019fee:	687b      	ldr	r3, [r7, #4]
 8019ff0:	7b5b      	ldrb	r3, [r3, #13]
 8019ff2:	733b      	strb	r3, [r7, #12]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8019ff4:	7cfb      	ldrb	r3, [r7, #19]
 8019ff6:	b29a      	uxth	r2, r3
 8019ff8:	f107 0308 	add.w	r3, r7, #8
 8019ffc:	4619      	mov	r1, r3
 8019ffe:	208b      	movs	r0, #139	@ 0x8b
 801a000:	f000 fa08 	bl	801a414 <SUBGRF_WriteCommand>
        break;
 801a004:	e000      	b.n	801a008 <SUBGRF_SetModulationParams+0x188>
    default:
    case PACKET_TYPE_NONE:
      break;
 801a006:	bf00      	nop
    }
}
 801a008:	bf00      	nop
 801a00a:	3718      	adds	r7, #24
 801a00c:	46bd      	mov	sp, r7
 801a00e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 801a012:	bf00      	nop
 801a014:	0801f308 	.word	0x0801f308
 801a018:	20001d5d 	.word	0x20001d5d
 801a01c:	3d090000 	.word	0x3d090000
 801a020:	01e84800 	.word	0x01e84800

0801a024 <SUBGRF_SetPacketParams>:

void SUBGRF_SetPacketParams( PacketParams_t *packetParams )
{
 801a024:	b580      	push	{r7, lr}
 801a026:	b086      	sub	sp, #24
 801a028:	af00      	add	r7, sp, #0
 801a02a:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint8_t crcVal = 0;
 801a02c:	2300      	movs	r3, #0
 801a02e:	75bb      	strb	r3, [r7, #22]
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 801a030:	4a48      	ldr	r2, [pc, #288]	@ (801a154 <SUBGRF_SetPacketParams+0x130>)
 801a032:	f107 030c 	add.w	r3, r7, #12
 801a036:	ca07      	ldmia	r2, {r0, r1, r2}
 801a038:	c303      	stmia	r3!, {r0, r1}
 801a03a:	701a      	strb	r2, [r3, #0]

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != packetParams->PacketType )
 801a03c:	687b      	ldr	r3, [r7, #4]
 801a03e:	781a      	ldrb	r2, [r3, #0]
 801a040:	4b45      	ldr	r3, [pc, #276]	@ (801a158 <SUBGRF_SetPacketParams+0x134>)
 801a042:	781b      	ldrb	r3, [r3, #0]
 801a044:	429a      	cmp	r2, r3
 801a046:	d004      	beq.n	801a052 <SUBGRF_SetPacketParams+0x2e>
    {
        SUBGRF_SetPacketType( packetParams->PacketType );
 801a048:	687b      	ldr	r3, [r7, #4]
 801a04a:	781b      	ldrb	r3, [r3, #0]
 801a04c:	4618      	mov	r0, r3
 801a04e:	f7ff fe23 	bl	8019c98 <SUBGRF_SetPacketType>
    }

    switch( packetParams->PacketType )
 801a052:	687b      	ldr	r3, [r7, #4]
 801a054:	781b      	ldrb	r3, [r3, #0]
 801a056:	2b03      	cmp	r3, #3
 801a058:	d878      	bhi.n	801a14c <SUBGRF_SetPacketParams+0x128>
 801a05a:	a201      	add	r2, pc, #4	@ (adr r2, 801a060 <SUBGRF_SetPacketParams+0x3c>)
 801a05c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a060:	0801a071 	.word	0x0801a071
 801a064:	0801a101 	.word	0x0801a101
 801a068:	0801a0f5 	.word	0x0801a0f5
 801a06c:	0801a071 	.word	0x0801a071
    {
    case PACKET_TYPE_GMSK:
    case PACKET_TYPE_GFSK:
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 801a070:	687b      	ldr	r3, [r7, #4]
 801a072:	7a5b      	ldrb	r3, [r3, #9]
 801a074:	2bf1      	cmp	r3, #241	@ 0xf1
 801a076:	d10a      	bne.n	801a08e <SUBGRF_SetPacketParams+0x6a>
        {
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 801a078:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 801a07c:	f7ff faae 	bl	80195dc <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 801a080:	f248 0005 	movw	r0, #32773	@ 0x8005
 801a084:	f7ff faca 	bl	801961c <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 801a088:	2302      	movs	r3, #2
 801a08a:	75bb      	strb	r3, [r7, #22]
 801a08c:	e011      	b.n	801a0b2 <SUBGRF_SetPacketParams+0x8e>
        }
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 801a08e:	687b      	ldr	r3, [r7, #4]
 801a090:	7a5b      	ldrb	r3, [r3, #9]
 801a092:	2bf2      	cmp	r3, #242	@ 0xf2
 801a094:	d10a      	bne.n	801a0ac <SUBGRF_SetPacketParams+0x88>
        {
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 801a096:	f641 500f 	movw	r0, #7439	@ 0x1d0f
 801a09a:	f7ff fa9f 	bl	80195dc <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 801a09e:	f241 0021 	movw	r0, #4129	@ 0x1021
 801a0a2:	f7ff fabb 	bl	801961c <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 801a0a6:	2306      	movs	r3, #6
 801a0a8:	75bb      	strb	r3, [r7, #22]
 801a0aa:	e002      	b.n	801a0b2 <SUBGRF_SetPacketParams+0x8e>
        }
        else
        {
            crcVal = packetParams->Params.Gfsk.CrcLength;
 801a0ac:	687b      	ldr	r3, [r7, #4]
 801a0ae:	7a5b      	ldrb	r3, [r3, #9]
 801a0b0:	75bb      	strb	r3, [r7, #22]
        }
        n = 9;
 801a0b2:	2309      	movs	r3, #9
 801a0b4:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 801a0b6:	687b      	ldr	r3, [r7, #4]
 801a0b8:	885b      	ldrh	r3, [r3, #2]
 801a0ba:	0a1b      	lsrs	r3, r3, #8
 801a0bc:	b29b      	uxth	r3, r3
 801a0be:	b2db      	uxtb	r3, r3
 801a0c0:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 801a0c2:	687b      	ldr	r3, [r7, #4]
 801a0c4:	885b      	ldrh	r3, [r3, #2]
 801a0c6:	b2db      	uxtb	r3, r3
 801a0c8:	737b      	strb	r3, [r7, #13]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 801a0ca:	687b      	ldr	r3, [r7, #4]
 801a0cc:	791b      	ldrb	r3, [r3, #4]
 801a0ce:	73bb      	strb	r3, [r7, #14]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 801a0d0:	687b      	ldr	r3, [r7, #4]
 801a0d2:	795b      	ldrb	r3, [r3, #5]
 801a0d4:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 801a0d6:	687b      	ldr	r3, [r7, #4]
 801a0d8:	799b      	ldrb	r3, [r3, #6]
 801a0da:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 801a0dc:	687b      	ldr	r3, [r7, #4]
 801a0de:	79db      	ldrb	r3, [r3, #7]
 801a0e0:	747b      	strb	r3, [r7, #17]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 801a0e2:	687b      	ldr	r3, [r7, #4]
 801a0e4:	7a1b      	ldrb	r3, [r3, #8]
 801a0e6:	74bb      	strb	r3, [r7, #18]
        buf[7] = crcVal;
 801a0e8:	7dbb      	ldrb	r3, [r7, #22]
 801a0ea:	74fb      	strb	r3, [r7, #19]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 801a0ec:	687b      	ldr	r3, [r7, #4]
 801a0ee:	7a9b      	ldrb	r3, [r3, #10]
 801a0f0:	753b      	strb	r3, [r7, #20]
        break;
 801a0f2:	e022      	b.n	801a13a <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_BPSK:
        n = 1;
 801a0f4:	2301      	movs	r3, #1
 801a0f6:	75fb      	strb	r3, [r7, #23]
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 801a0f8:	687b      	ldr	r3, [r7, #4]
 801a0fa:	7b1b      	ldrb	r3, [r3, #12]
 801a0fc:	733b      	strb	r3, [r7, #12]
        break;
 801a0fe:	e01c      	b.n	801a13a <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_LORA:
        n = 6;
 801a100:	2306      	movs	r3, #6
 801a102:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 801a104:	687b      	ldr	r3, [r7, #4]
 801a106:	89db      	ldrh	r3, [r3, #14]
 801a108:	0a1b      	lsrs	r3, r3, #8
 801a10a:	b29b      	uxth	r3, r3
 801a10c:	b2db      	uxtb	r3, r3
 801a10e:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 801a110:	687b      	ldr	r3, [r7, #4]
 801a112:	89db      	ldrh	r3, [r3, #14]
 801a114:	b2db      	uxtb	r3, r3
 801a116:	737b      	strb	r3, [r7, #13]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 801a118:	687b      	ldr	r3, [r7, #4]
 801a11a:	7c1a      	ldrb	r2, [r3, #16]
 801a11c:	4b0f      	ldr	r3, [pc, #60]	@ (801a15c <SUBGRF_SetPacketParams+0x138>)
 801a11e:	4611      	mov	r1, r2
 801a120:	7019      	strb	r1, [r3, #0]
 801a122:	4613      	mov	r3, r2
 801a124:	73bb      	strb	r3, [r7, #14]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 801a126:	687b      	ldr	r3, [r7, #4]
 801a128:	7c5b      	ldrb	r3, [r3, #17]
 801a12a:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 801a12c:	687b      	ldr	r3, [r7, #4]
 801a12e:	7c9b      	ldrb	r3, [r3, #18]
 801a130:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 801a132:	687b      	ldr	r3, [r7, #4]
 801a134:	7cdb      	ldrb	r3, [r3, #19]
 801a136:	747b      	strb	r3, [r7, #17]
        break;
 801a138:	bf00      	nop
    default:
    case PACKET_TYPE_NONE:
        return;
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 801a13a:	7dfb      	ldrb	r3, [r7, #23]
 801a13c:	b29a      	uxth	r2, r3
 801a13e:	f107 030c 	add.w	r3, r7, #12
 801a142:	4619      	mov	r1, r3
 801a144:	208c      	movs	r0, #140	@ 0x8c
 801a146:	f000 f965 	bl	801a414 <SUBGRF_WriteCommand>
 801a14a:	e000      	b.n	801a14e <SUBGRF_SetPacketParams+0x12a>
        return;
 801a14c:	bf00      	nop
}
 801a14e:	3718      	adds	r7, #24
 801a150:	46bd      	mov	sp, r7
 801a152:	bd80      	pop	{r7, pc}
 801a154:	0801f310 	.word	0x0801f310
 801a158:	20001d5d 	.word	0x20001d5d
 801a15c:	20001d5e 	.word	0x20001d5e

0801a160 <SUBGRF_SetBufferBaseAddress>:
    SUBGRF_WriteCommand( RADIO_SET_CADPARAMS, buf, 7 );
    OperatingMode = MODE_CAD;
}

void SUBGRF_SetBufferBaseAddress( uint8_t txBaseAddress, uint8_t rxBaseAddress )
{
 801a160:	b580      	push	{r7, lr}
 801a162:	b084      	sub	sp, #16
 801a164:	af00      	add	r7, sp, #0
 801a166:	4603      	mov	r3, r0
 801a168:	460a      	mov	r2, r1
 801a16a:	71fb      	strb	r3, [r7, #7]
 801a16c:	4613      	mov	r3, r2
 801a16e:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = txBaseAddress;
 801a170:	79fb      	ldrb	r3, [r7, #7]
 801a172:	733b      	strb	r3, [r7, #12]
    buf[1] = rxBaseAddress;
 801a174:	79bb      	ldrb	r3, [r7, #6]
 801a176:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 801a178:	f107 030c 	add.w	r3, r7, #12
 801a17c:	2202      	movs	r2, #2
 801a17e:	4619      	mov	r1, r3
 801a180:	208f      	movs	r0, #143	@ 0x8f
 801a182:	f000 f947 	bl	801a414 <SUBGRF_WriteCommand>
}
 801a186:	bf00      	nop
 801a188:	3710      	adds	r7, #16
 801a18a:	46bd      	mov	sp, r7
 801a18c:	bd80      	pop	{r7, pc}

0801a18e <SUBGRF_GetRssiInst>:
    status.Fields.ChipMode = ( stat & ( 0x07 << 4 ) ) >> 4;
    return status;
}

int8_t SUBGRF_GetRssiInst( void )
{
 801a18e:	b580      	push	{r7, lr}
 801a190:	b082      	sub	sp, #8
 801a192:	af00      	add	r7, sp, #0
    uint8_t buf[1];
    int8_t rssi = 0;
 801a194:	2300      	movs	r3, #0
 801a196:	71fb      	strb	r3, [r7, #7]

    SUBGRF_ReadCommand( RADIO_GET_RSSIINST, buf, 1 );
 801a198:	1d3b      	adds	r3, r7, #4
 801a19a:	2201      	movs	r2, #1
 801a19c:	4619      	mov	r1, r3
 801a19e:	2015      	movs	r0, #21
 801a1a0:	f000 f95a 	bl	801a458 <SUBGRF_ReadCommand>
    rssi = -buf[0] >> 1;
 801a1a4:	793b      	ldrb	r3, [r7, #4]
 801a1a6:	425b      	negs	r3, r3
 801a1a8:	105b      	asrs	r3, r3, #1
 801a1aa:	71fb      	strb	r3, [r7, #7]
    return rssi;
 801a1ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 801a1b0:	4618      	mov	r0, r3
 801a1b2:	3708      	adds	r7, #8
 801a1b4:	46bd      	mov	sp, r7
 801a1b6:	bd80      	pop	{r7, pc}

0801a1b8 <SUBGRF_GetRxBufferStatus>:

void SUBGRF_GetRxBufferStatus( uint8_t *payloadLength, uint8_t *rxStartBufferPointer )
{
 801a1b8:	b580      	push	{r7, lr}
 801a1ba:	b084      	sub	sp, #16
 801a1bc:	af00      	add	r7, sp, #0
 801a1be:	6078      	str	r0, [r7, #4]
 801a1c0:	6039      	str	r1, [r7, #0]
    uint8_t status[2];

    SUBGRF_ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 801a1c2:	f107 030c 	add.w	r3, r7, #12
 801a1c6:	2202      	movs	r2, #2
 801a1c8:	4619      	mov	r1, r3
 801a1ca:	2013      	movs	r0, #19
 801a1cc:	f000 f944 	bl	801a458 <SUBGRF_ReadCommand>

    // In case of LORA fixed header, the payloadLength is obtained by reading
    // the register REG_LR_PAYLOADLENGTH
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 801a1d0:	f7ff fd7e 	bl	8019cd0 <SUBGRF_GetPacketType>
 801a1d4:	4603      	mov	r3, r0
 801a1d6:	2b01      	cmp	r3, #1
 801a1d8:	d10d      	bne.n	801a1f6 <SUBGRF_GetRxBufferStatus+0x3e>
 801a1da:	4b0c      	ldr	r3, [pc, #48]	@ (801a20c <SUBGRF_GetRxBufferStatus+0x54>)
 801a1dc:	781b      	ldrb	r3, [r3, #0]
 801a1de:	b2db      	uxtb	r3, r3
 801a1e0:	2b01      	cmp	r3, #1
 801a1e2:	d108      	bne.n	801a1f6 <SUBGRF_GetRxBufferStatus+0x3e>
    {
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 801a1e4:	f240 7002 	movw	r0, #1794	@ 0x702
 801a1e8:	f000 f878 	bl	801a2dc <SUBGRF_ReadRegister>
 801a1ec:	4603      	mov	r3, r0
 801a1ee:	461a      	mov	r2, r3
 801a1f0:	687b      	ldr	r3, [r7, #4]
 801a1f2:	701a      	strb	r2, [r3, #0]
 801a1f4:	e002      	b.n	801a1fc <SUBGRF_GetRxBufferStatus+0x44>
    }
    else
    {
        *payloadLength = status[0];
 801a1f6:	7b3a      	ldrb	r2, [r7, #12]
 801a1f8:	687b      	ldr	r3, [r7, #4]
 801a1fa:	701a      	strb	r2, [r3, #0]
    }
    *rxStartBufferPointer = status[1];
 801a1fc:	7b7a      	ldrb	r2, [r7, #13]
 801a1fe:	683b      	ldr	r3, [r7, #0]
 801a200:	701a      	strb	r2, [r3, #0]
}
 801a202:	bf00      	nop
 801a204:	3710      	adds	r7, #16
 801a206:	46bd      	mov	sp, r7
 801a208:	bd80      	pop	{r7, pc}
 801a20a:	bf00      	nop
 801a20c:	20001d5e 	.word	0x20001d5e

0801a210 <SUBGRF_GetPacketStatus>:

void SUBGRF_GetPacketStatus( PacketStatus_t *pktStatus )
{
 801a210:	b580      	push	{r7, lr}
 801a212:	b084      	sub	sp, #16
 801a214:	af00      	add	r7, sp, #0
 801a216:	6078      	str	r0, [r7, #4]
    uint8_t status[3];

    SUBGRF_ReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 801a218:	f107 030c 	add.w	r3, r7, #12
 801a21c:	2203      	movs	r2, #3
 801a21e:	4619      	mov	r1, r3
 801a220:	2014      	movs	r0, #20
 801a222:	f000 f919 	bl	801a458 <SUBGRF_ReadCommand>

    pktStatus->packetType = SUBGRF_GetPacketType( );
 801a226:	f7ff fd53 	bl	8019cd0 <SUBGRF_GetPacketType>
 801a22a:	4603      	mov	r3, r0
 801a22c:	461a      	mov	r2, r3
 801a22e:	687b      	ldr	r3, [r7, #4]
 801a230:	701a      	strb	r2, [r3, #0]
    switch( pktStatus->packetType )
 801a232:	687b      	ldr	r3, [r7, #4]
 801a234:	781b      	ldrb	r3, [r3, #0]
 801a236:	2b00      	cmp	r3, #0
 801a238:	d002      	beq.n	801a240 <SUBGRF_GetPacketStatus+0x30>
 801a23a:	2b01      	cmp	r3, #1
 801a23c:	d013      	beq.n	801a266 <SUBGRF_GetPacketStatus+0x56>
 801a23e:	e02a      	b.n	801a296 <SUBGRF_GetPacketStatus+0x86>
    {
        case PACKET_TYPE_GFSK:
            pktStatus->Params.Gfsk.RxStatus = status[0];
 801a240:	7b3a      	ldrb	r2, [r7, #12]
 801a242:	687b      	ldr	r3, [r7, #4]
 801a244:	711a      	strb	r2, [r3, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 801a246:	7b7b      	ldrb	r3, [r7, #13]
 801a248:	425b      	negs	r3, r3
 801a24a:	105b      	asrs	r3, r3, #1
 801a24c:	b25a      	sxtb	r2, r3
 801a24e:	687b      	ldr	r3, [r7, #4]
 801a250:	719a      	strb	r2, [r3, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 801a252:	7bbb      	ldrb	r3, [r7, #14]
 801a254:	425b      	negs	r3, r3
 801a256:	105b      	asrs	r3, r3, #1
 801a258:	b25a      	sxtb	r2, r3
 801a25a:	687b      	ldr	r3, [r7, #4]
 801a25c:	715a      	strb	r2, [r3, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 801a25e:	687b      	ldr	r3, [r7, #4]
 801a260:	2200      	movs	r2, #0
 801a262:	609a      	str	r2, [r3, #8]
            break;
 801a264:	e020      	b.n	801a2a8 <SUBGRF_GetPacketStatus+0x98>

        case PACKET_TYPE_LORA:
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 801a266:	7b3b      	ldrb	r3, [r7, #12]
 801a268:	425b      	negs	r3, r3
 801a26a:	105b      	asrs	r3, r3, #1
 801a26c:	b25a      	sxtb	r2, r3
 801a26e:	687b      	ldr	r3, [r7, #4]
 801a270:	731a      	strb	r2, [r3, #12]
            // Returns SNR value [dB] rounded to the nearest integer value
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 801a272:	7b7b      	ldrb	r3, [r7, #13]
 801a274:	b25b      	sxtb	r3, r3
 801a276:	3302      	adds	r3, #2
 801a278:	109b      	asrs	r3, r3, #2
 801a27a:	b25a      	sxtb	r2, r3
 801a27c:	687b      	ldr	r3, [r7, #4]
 801a27e:	735a      	strb	r2, [r3, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 801a280:	7bbb      	ldrb	r3, [r7, #14]
 801a282:	425b      	negs	r3, r3
 801a284:	105b      	asrs	r3, r3, #1
 801a286:	b25a      	sxtb	r2, r3
 801a288:	687b      	ldr	r3, [r7, #4]
 801a28a:	739a      	strb	r2, [r3, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 801a28c:	4b08      	ldr	r3, [pc, #32]	@ (801a2b0 <SUBGRF_GetPacketStatus+0xa0>)
 801a28e:	681a      	ldr	r2, [r3, #0]
 801a290:	687b      	ldr	r3, [r7, #4]
 801a292:	611a      	str	r2, [r3, #16]
            break;
 801a294:	e008      	b.n	801a2a8 <SUBGRF_GetPacketStatus+0x98>

        default:
        case PACKET_TYPE_NONE:
            // In that specific case, we set everything in the pktStatus to zeros
            // and reset the packet type accordingly
            RADIO_MEMSET8( pktStatus, 0, sizeof( PacketStatus_t ) );
 801a296:	2214      	movs	r2, #20
 801a298:	2100      	movs	r1, #0
 801a29a:	6878      	ldr	r0, [r7, #4]
 801a29c:	f000 fbf3 	bl	801aa86 <UTIL_MEM_set_8>
            pktStatus->packetType = PACKET_TYPE_NONE;
 801a2a0:	687b      	ldr	r3, [r7, #4]
 801a2a2:	220f      	movs	r2, #15
 801a2a4:	701a      	strb	r2, [r3, #0]
            break;
 801a2a6:	bf00      	nop
    }
}
 801a2a8:	bf00      	nop
 801a2aa:	3710      	adds	r7, #16
 801a2ac:	46bd      	mov	sp, r7
 801a2ae:	bd80      	pop	{r7, pc}
 801a2b0:	20001d60 	.word	0x20001d60

0801a2b4 <SUBGRF_WriteRegister>:
    buf[1] = ( uint8_t )( ( uint16_t )irq & 0x00FF );
    SUBGRF_WriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
}

void SUBGRF_WriteRegister( uint16_t addr, uint8_t data )
{
 801a2b4:	b580      	push	{r7, lr}
 801a2b6:	b082      	sub	sp, #8
 801a2b8:	af00      	add	r7, sp, #0
 801a2ba:	4603      	mov	r3, r0
 801a2bc:	460a      	mov	r2, r1
 801a2be:	80fb      	strh	r3, [r7, #6]
 801a2c0:	4613      	mov	r3, r2
 801a2c2:	717b      	strb	r3, [r7, #5]
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 801a2c4:	1d7a      	adds	r2, r7, #5
 801a2c6:	88f9      	ldrh	r1, [r7, #6]
 801a2c8:	2301      	movs	r3, #1
 801a2ca:	4803      	ldr	r0, [pc, #12]	@ (801a2d8 <SUBGRF_WriteRegister+0x24>)
 801a2cc:	f7ed fa18 	bl	8007700 <HAL_SUBGHZ_WriteRegisters>
}
 801a2d0:	bf00      	nop
 801a2d2:	3708      	adds	r7, #8
 801a2d4:	46bd      	mov	sp, r7
 801a2d6:	bd80      	pop	{r7, pc}
 801a2d8:	200003d8 	.word	0x200003d8

0801a2dc <SUBGRF_ReadRegister>:

uint8_t SUBGRF_ReadRegister( uint16_t addr )
{
 801a2dc:	b580      	push	{r7, lr}
 801a2de:	b084      	sub	sp, #16
 801a2e0:	af00      	add	r7, sp, #0
 801a2e2:	4603      	mov	r3, r0
 801a2e4:	80fb      	strh	r3, [r7, #6]
    uint8_t data;
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 801a2e6:	f107 020f 	add.w	r2, r7, #15
 801a2ea:	88f9      	ldrh	r1, [r7, #6]
 801a2ec:	2301      	movs	r3, #1
 801a2ee:	4804      	ldr	r0, [pc, #16]	@ (801a300 <SUBGRF_ReadRegister+0x24>)
 801a2f0:	f7ed fa65 	bl	80077be <HAL_SUBGHZ_ReadRegisters>
    return data;
 801a2f4:	7bfb      	ldrb	r3, [r7, #15]
}
 801a2f6:	4618      	mov	r0, r3
 801a2f8:	3710      	adds	r7, #16
 801a2fa:	46bd      	mov	sp, r7
 801a2fc:	bd80      	pop	{r7, pc}
 801a2fe:	bf00      	nop
 801a300:	200003d8 	.word	0x200003d8

0801a304 <SUBGRF_WriteRegisters>:

void SUBGRF_WriteRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 801a304:	b580      	push	{r7, lr}
 801a306:	b086      	sub	sp, #24
 801a308:	af00      	add	r7, sp, #0
 801a30a:	4603      	mov	r3, r0
 801a30c:	6039      	str	r1, [r7, #0]
 801a30e:	80fb      	strh	r3, [r7, #6]
 801a310:	4613      	mov	r3, r2
 801a312:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a314:	f3ef 8310 	mrs	r3, PRIMASK
 801a318:	60fb      	str	r3, [r7, #12]
  return(result);
 801a31a:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801a31c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801a31e:	b672      	cpsid	i
}
 801a320:	bf00      	nop
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 801a322:	88bb      	ldrh	r3, [r7, #4]
 801a324:	88f9      	ldrh	r1, [r7, #6]
 801a326:	683a      	ldr	r2, [r7, #0]
 801a328:	4806      	ldr	r0, [pc, #24]	@ (801a344 <SUBGRF_WriteRegisters+0x40>)
 801a32a:	f7ed f9e9 	bl	8007700 <HAL_SUBGHZ_WriteRegisters>
 801a32e:	697b      	ldr	r3, [r7, #20]
 801a330:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a332:	693b      	ldr	r3, [r7, #16]
 801a334:	f383 8810 	msr	PRIMASK, r3
}
 801a338:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801a33a:	bf00      	nop
 801a33c:	3718      	adds	r7, #24
 801a33e:	46bd      	mov	sp, r7
 801a340:	bd80      	pop	{r7, pc}
 801a342:	bf00      	nop
 801a344:	200003d8 	.word	0x200003d8

0801a348 <SUBGRF_ReadRegisters>:

void SUBGRF_ReadRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 801a348:	b580      	push	{r7, lr}
 801a34a:	b086      	sub	sp, #24
 801a34c:	af00      	add	r7, sp, #0
 801a34e:	4603      	mov	r3, r0
 801a350:	6039      	str	r1, [r7, #0]
 801a352:	80fb      	strh	r3, [r7, #6]
 801a354:	4613      	mov	r3, r2
 801a356:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a358:	f3ef 8310 	mrs	r3, PRIMASK
 801a35c:	60fb      	str	r3, [r7, #12]
  return(result);
 801a35e:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801a360:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801a362:	b672      	cpsid	i
}
 801a364:	bf00      	nop
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
 801a366:	88bb      	ldrh	r3, [r7, #4]
 801a368:	88f9      	ldrh	r1, [r7, #6]
 801a36a:	683a      	ldr	r2, [r7, #0]
 801a36c:	4806      	ldr	r0, [pc, #24]	@ (801a388 <SUBGRF_ReadRegisters+0x40>)
 801a36e:	f7ed fa26 	bl	80077be <HAL_SUBGHZ_ReadRegisters>
 801a372:	697b      	ldr	r3, [r7, #20]
 801a374:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a376:	693b      	ldr	r3, [r7, #16]
 801a378:	f383 8810 	msr	PRIMASK, r3
}
 801a37c:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801a37e:	bf00      	nop
 801a380:	3718      	adds	r7, #24
 801a382:	46bd      	mov	sp, r7
 801a384:	bd80      	pop	{r7, pc}
 801a386:	bf00      	nop
 801a388:	200003d8 	.word	0x200003d8

0801a38c <SUBGRF_WriteBuffer>:

void SUBGRF_WriteBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 801a38c:	b580      	push	{r7, lr}
 801a38e:	b086      	sub	sp, #24
 801a390:	af00      	add	r7, sp, #0
 801a392:	4603      	mov	r3, r0
 801a394:	6039      	str	r1, [r7, #0]
 801a396:	71fb      	strb	r3, [r7, #7]
 801a398:	4613      	mov	r3, r2
 801a39a:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a39c:	f3ef 8310 	mrs	r3, PRIMASK
 801a3a0:	60fb      	str	r3, [r7, #12]
  return(result);
 801a3a2:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801a3a4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801a3a6:	b672      	cpsid	i
}
 801a3a8:	bf00      	nop
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 801a3aa:	79bb      	ldrb	r3, [r7, #6]
 801a3ac:	b29b      	uxth	r3, r3
 801a3ae:	79f9      	ldrb	r1, [r7, #7]
 801a3b0:	683a      	ldr	r2, [r7, #0]
 801a3b2:	4806      	ldr	r0, [pc, #24]	@ (801a3cc <SUBGRF_WriteBuffer+0x40>)
 801a3b4:	f7ed fb17 	bl	80079e6 <HAL_SUBGHZ_WriteBuffer>
 801a3b8:	697b      	ldr	r3, [r7, #20]
 801a3ba:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a3bc:	693b      	ldr	r3, [r7, #16]
 801a3be:	f383 8810 	msr	PRIMASK, r3
}
 801a3c2:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801a3c4:	bf00      	nop
 801a3c6:	3718      	adds	r7, #24
 801a3c8:	46bd      	mov	sp, r7
 801a3ca:	bd80      	pop	{r7, pc}
 801a3cc:	200003d8 	.word	0x200003d8

0801a3d0 <SUBGRF_ReadBuffer>:

void SUBGRF_ReadBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 801a3d0:	b580      	push	{r7, lr}
 801a3d2:	b086      	sub	sp, #24
 801a3d4:	af00      	add	r7, sp, #0
 801a3d6:	4603      	mov	r3, r0
 801a3d8:	6039      	str	r1, [r7, #0]
 801a3da:	71fb      	strb	r3, [r7, #7]
 801a3dc:	4613      	mov	r3, r2
 801a3de:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a3e0:	f3ef 8310 	mrs	r3, PRIMASK
 801a3e4:	60fb      	str	r3, [r7, #12]
  return(result);
 801a3e6:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801a3e8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801a3ea:	b672      	cpsid	i
}
 801a3ec:	bf00      	nop
    HAL_SUBGHZ_ReadBuffer( &hsubghz, offset, buffer, size );
 801a3ee:	79bb      	ldrb	r3, [r7, #6]
 801a3f0:	b29b      	uxth	r3, r3
 801a3f2:	79f9      	ldrb	r1, [r7, #7]
 801a3f4:	683a      	ldr	r2, [r7, #0]
 801a3f6:	4806      	ldr	r0, [pc, #24]	@ (801a410 <SUBGRF_ReadBuffer+0x40>)
 801a3f8:	f7ed fb48 	bl	8007a8c <HAL_SUBGHZ_ReadBuffer>
 801a3fc:	697b      	ldr	r3, [r7, #20]
 801a3fe:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a400:	693b      	ldr	r3, [r7, #16]
 801a402:	f383 8810 	msr	PRIMASK, r3
}
 801a406:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801a408:	bf00      	nop
 801a40a:	3718      	adds	r7, #24
 801a40c:	46bd      	mov	sp, r7
 801a40e:	bd80      	pop	{r7, pc}
 801a410:	200003d8 	.word	0x200003d8

0801a414 <SUBGRF_WriteCommand>:

void SUBGRF_WriteCommand( SUBGHZ_RadioSetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 801a414:	b580      	push	{r7, lr}
 801a416:	b086      	sub	sp, #24
 801a418:	af00      	add	r7, sp, #0
 801a41a:	4603      	mov	r3, r0
 801a41c:	6039      	str	r1, [r7, #0]
 801a41e:	71fb      	strb	r3, [r7, #7]
 801a420:	4613      	mov	r3, r2
 801a422:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a424:	f3ef 8310 	mrs	r3, PRIMASK
 801a428:	60fb      	str	r3, [r7, #12]
  return(result);
 801a42a:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801a42c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801a42e:	b672      	cpsid	i
}
 801a430:	bf00      	nop
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 801a432:	88bb      	ldrh	r3, [r7, #4]
 801a434:	79f9      	ldrb	r1, [r7, #7]
 801a436:	683a      	ldr	r2, [r7, #0]
 801a438:	4806      	ldr	r0, [pc, #24]	@ (801a454 <SUBGRF_WriteCommand+0x40>)
 801a43a:	f7ed fa21 	bl	8007880 <HAL_SUBGHZ_ExecSetCmd>
 801a43e:	697b      	ldr	r3, [r7, #20]
 801a440:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a442:	693b      	ldr	r3, [r7, #16]
 801a444:	f383 8810 	msr	PRIMASK, r3
}
 801a448:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801a44a:	bf00      	nop
 801a44c:	3718      	adds	r7, #24
 801a44e:	46bd      	mov	sp, r7
 801a450:	bd80      	pop	{r7, pc}
 801a452:	bf00      	nop
 801a454:	200003d8 	.word	0x200003d8

0801a458 <SUBGRF_ReadCommand>:

void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 801a458:	b580      	push	{r7, lr}
 801a45a:	b086      	sub	sp, #24
 801a45c:	af00      	add	r7, sp, #0
 801a45e:	4603      	mov	r3, r0
 801a460:	6039      	str	r1, [r7, #0]
 801a462:	71fb      	strb	r3, [r7, #7]
 801a464:	4613      	mov	r3, r2
 801a466:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a468:	f3ef 8310 	mrs	r3, PRIMASK
 801a46c:	60fb      	str	r3, [r7, #12]
  return(result);
 801a46e:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801a470:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801a472:	b672      	cpsid	i
}
 801a474:	bf00      	nop
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
 801a476:	88bb      	ldrh	r3, [r7, #4]
 801a478:	79f9      	ldrb	r1, [r7, #7]
 801a47a:	683a      	ldr	r2, [r7, #0]
 801a47c:	4806      	ldr	r0, [pc, #24]	@ (801a498 <SUBGRF_ReadCommand+0x40>)
 801a47e:	f7ed fa5e 	bl	800793e <HAL_SUBGHZ_ExecGetCmd>
 801a482:	697b      	ldr	r3, [r7, #20]
 801a484:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a486:	693b      	ldr	r3, [r7, #16]
 801a488:	f383 8810 	msr	PRIMASK, r3
}
 801a48c:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801a48e:	bf00      	nop
 801a490:	3718      	adds	r7, #24
 801a492:	46bd      	mov	sp, r7
 801a494:	bd80      	pop	{r7, pc}
 801a496:	bf00      	nop
 801a498:	200003d8 	.word	0x200003d8

0801a49c <SUBGRF_SetSwitch>:

void SUBGRF_SetSwitch( uint8_t paSelect, RFState_t rxtx )
{
 801a49c:	b580      	push	{r7, lr}
 801a49e:	b084      	sub	sp, #16
 801a4a0:	af00      	add	r7, sp, #0
 801a4a2:	4603      	mov	r3, r0
 801a4a4:	460a      	mov	r2, r1
 801a4a6:	71fb      	strb	r3, [r7, #7]
 801a4a8:	4613      	mov	r3, r2
 801a4aa:	71bb      	strb	r3, [r7, #6]
    RBI_Switch_TypeDef state = RBI_SWITCH_RX;
 801a4ac:	2301      	movs	r3, #1
 801a4ae:	73fb      	strb	r3, [r7, #15]

    if (rxtx == RFSWITCH_TX)
 801a4b0:	79bb      	ldrb	r3, [r7, #6]
 801a4b2:	2b01      	cmp	r3, #1
 801a4b4:	d10d      	bne.n	801a4d2 <SUBGRF_SetSwitch+0x36>
    {
        if (paSelect == RFO_LP)
 801a4b6:	79fb      	ldrb	r3, [r7, #7]
 801a4b8:	2b01      	cmp	r3, #1
 801a4ba:	d104      	bne.n	801a4c6 <SUBGRF_SetSwitch+0x2a>
        {
            state = RBI_SWITCH_RFO_LP;
 801a4bc:	2302      	movs	r3, #2
 801a4be:	73fb      	strb	r3, [r7, #15]
            Radio_SMPS_Set(SMPS_DRIVE_SETTING_MAX);
 801a4c0:	2004      	movs	r0, #4
 801a4c2:	f000 f8df 	bl	801a684 <Radio_SMPS_Set>
        }
        if (paSelect == RFO_HP)
 801a4c6:	79fb      	ldrb	r3, [r7, #7]
 801a4c8:	2b02      	cmp	r3, #2
 801a4ca:	d107      	bne.n	801a4dc <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RFO_HP;
 801a4cc:	2303      	movs	r3, #3
 801a4ce:	73fb      	strb	r3, [r7, #15]
 801a4d0:	e004      	b.n	801a4dc <SUBGRF_SetSwitch+0x40>
        }
    }
    else
    {
        if (rxtx == RFSWITCH_RX)
 801a4d2:	79bb      	ldrb	r3, [r7, #6]
 801a4d4:	2b00      	cmp	r3, #0
 801a4d6:	d101      	bne.n	801a4dc <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RX;
 801a4d8:	2301      	movs	r3, #1
 801a4da:	73fb      	strb	r3, [r7, #15]
        }
    }
    RBI_ConfigRFSwitch(state);
 801a4dc:	7bfb      	ldrb	r3, [r7, #15]
 801a4de:	4618      	mov	r0, r3
 801a4e0:	f7f0 fd6d 	bl	800afbe <RBI_ConfigRFSwitch>
}
 801a4e4:	bf00      	nop
 801a4e6:	3710      	adds	r7, #16
 801a4e8:	46bd      	mov	sp, r7
 801a4ea:	bd80      	pop	{r7, pc}

0801a4ec <SUBGRF_SetRfTxPower>:

uint8_t SUBGRF_SetRfTxPower( int8_t power )
{
 801a4ec:	b580      	push	{r7, lr}
 801a4ee:	b084      	sub	sp, #16
 801a4f0:	af00      	add	r7, sp, #0
 801a4f2:	4603      	mov	r3, r0
 801a4f4:	71fb      	strb	r3, [r7, #7]
    uint8_t paSelect= RFO_LP;
 801a4f6:	2301      	movs	r3, #1
 801a4f8:	73fb      	strb	r3, [r7, #15]

    int32_t TxConfig = RBI_GetTxConfig();
 801a4fa:	f7f0 fd6e 	bl	800afda <RBI_GetTxConfig>
 801a4fe:	60b8      	str	r0, [r7, #8]

    switch (TxConfig)
 801a500:	68bb      	ldr	r3, [r7, #8]
 801a502:	2b02      	cmp	r3, #2
 801a504:	d016      	beq.n	801a534 <SUBGRF_SetRfTxPower+0x48>
 801a506:	68bb      	ldr	r3, [r7, #8]
 801a508:	2b02      	cmp	r3, #2
 801a50a:	dc16      	bgt.n	801a53a <SUBGRF_SetRfTxPower+0x4e>
 801a50c:	68bb      	ldr	r3, [r7, #8]
 801a50e:	2b00      	cmp	r3, #0
 801a510:	d003      	beq.n	801a51a <SUBGRF_SetRfTxPower+0x2e>
 801a512:	68bb      	ldr	r3, [r7, #8]
 801a514:	2b01      	cmp	r3, #1
 801a516:	d00a      	beq.n	801a52e <SUBGRF_SetRfTxPower+0x42>
        {
            paSelect = RFO_HP;
            break;
        }
        default:
            break;
 801a518:	e00f      	b.n	801a53a <SUBGRF_SetRfTxPower+0x4e>
            if (power > 15)
 801a51a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801a51e:	2b0f      	cmp	r3, #15
 801a520:	dd02      	ble.n	801a528 <SUBGRF_SetRfTxPower+0x3c>
                paSelect = RFO_HP;
 801a522:	2302      	movs	r3, #2
 801a524:	73fb      	strb	r3, [r7, #15]
            break;
 801a526:	e009      	b.n	801a53c <SUBGRF_SetRfTxPower+0x50>
                paSelect = RFO_LP;
 801a528:	2301      	movs	r3, #1
 801a52a:	73fb      	strb	r3, [r7, #15]
            break;
 801a52c:	e006      	b.n	801a53c <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_LP;
 801a52e:	2301      	movs	r3, #1
 801a530:	73fb      	strb	r3, [r7, #15]
            break;
 801a532:	e003      	b.n	801a53c <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_HP;
 801a534:	2302      	movs	r3, #2
 801a536:	73fb      	strb	r3, [r7, #15]
            break;
 801a538:	e000      	b.n	801a53c <SUBGRF_SetRfTxPower+0x50>
            break;
 801a53a:	bf00      	nop
    }

    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 801a53c:	f997 1007 	ldrsb.w	r1, [r7, #7]
 801a540:	7bfb      	ldrb	r3, [r7, #15]
 801a542:	2202      	movs	r2, #2
 801a544:	4618      	mov	r0, r3
 801a546:	f7ff fbcd 	bl	8019ce4 <SUBGRF_SetTxParams>

    return paSelect;
 801a54a:	7bfb      	ldrb	r3, [r7, #15]
}
 801a54c:	4618      	mov	r0, r3
 801a54e:	3710      	adds	r7, #16
 801a550:	46bd      	mov	sp, r7
 801a552:	bd80      	pop	{r7, pc}

0801a554 <SUBGRF_GetRadioWakeUpTime>:

uint32_t SUBGRF_GetRadioWakeUpTime( void )
{
 801a554:	b480      	push	{r7}
 801a556:	af00      	add	r7, sp, #0
    return RF_WAKEUP_TIME;
 801a558:	2301      	movs	r3, #1
}
 801a55a:	4618      	mov	r0, r3
 801a55c:	46bd      	mov	sp, r7
 801a55e:	bc80      	pop	{r7}
 801a560:	4770      	bx	lr
	...

0801a564 <HAL_SUBGHZ_TxCpltCallback>:

/* HAL_SUBGHz Callbacks definitions */
void HAL_SUBGHZ_TxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801a564:	b580      	push	{r7, lr}
 801a566:	b082      	sub	sp, #8
 801a568:	af00      	add	r7, sp, #0
 801a56a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_TX_DONE );
 801a56c:	4b03      	ldr	r3, [pc, #12]	@ (801a57c <HAL_SUBGHZ_TxCpltCallback+0x18>)
 801a56e:	681b      	ldr	r3, [r3, #0]
 801a570:	2001      	movs	r0, #1
 801a572:	4798      	blx	r3
}
 801a574:	bf00      	nop
 801a576:	3708      	adds	r7, #8
 801a578:	46bd      	mov	sp, r7
 801a57a:	bd80      	pop	{r7, pc}
 801a57c:	20001d68 	.word	0x20001d68

0801a580 <HAL_SUBGHZ_RxCpltCallback>:

void HAL_SUBGHZ_RxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801a580:	b580      	push	{r7, lr}
 801a582:	b082      	sub	sp, #8
 801a584:	af00      	add	r7, sp, #0
 801a586:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_DONE );
 801a588:	4b03      	ldr	r3, [pc, #12]	@ (801a598 <HAL_SUBGHZ_RxCpltCallback+0x18>)
 801a58a:	681b      	ldr	r3, [r3, #0]
 801a58c:	2002      	movs	r0, #2
 801a58e:	4798      	blx	r3
}
 801a590:	bf00      	nop
 801a592:	3708      	adds	r7, #8
 801a594:	46bd      	mov	sp, r7
 801a596:	bd80      	pop	{r7, pc}
 801a598:	20001d68 	.word	0x20001d68

0801a59c <HAL_SUBGHZ_CRCErrorCallback>:

void HAL_SUBGHZ_CRCErrorCallback (SUBGHZ_HandleTypeDef *hsubghz)
{
 801a59c:	b580      	push	{r7, lr}
 801a59e:	b082      	sub	sp, #8
 801a5a0:	af00      	add	r7, sp, #0
 801a5a2:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 801a5a4:	4b03      	ldr	r3, [pc, #12]	@ (801a5b4 <HAL_SUBGHZ_CRCErrorCallback+0x18>)
 801a5a6:	681b      	ldr	r3, [r3, #0]
 801a5a8:	2040      	movs	r0, #64	@ 0x40
 801a5aa:	4798      	blx	r3
}
 801a5ac:	bf00      	nop
 801a5ae:	3708      	adds	r7, #8
 801a5b0:	46bd      	mov	sp, r7
 801a5b2:	bd80      	pop	{r7, pc}
 801a5b4:	20001d68 	.word	0x20001d68

0801a5b8 <HAL_SUBGHZ_CADStatusCallback>:

void HAL_SUBGHZ_CADStatusCallback(SUBGHZ_HandleTypeDef *hsubghz, HAL_SUBGHZ_CadStatusTypeDef cadstatus)
{
 801a5b8:	b580      	push	{r7, lr}
 801a5ba:	b082      	sub	sp, #8
 801a5bc:	af00      	add	r7, sp, #0
 801a5be:	6078      	str	r0, [r7, #4]
 801a5c0:	460b      	mov	r3, r1
 801a5c2:	70fb      	strb	r3, [r7, #3]
    switch (cadstatus)
 801a5c4:	78fb      	ldrb	r3, [r7, #3]
 801a5c6:	2b00      	cmp	r3, #0
 801a5c8:	d002      	beq.n	801a5d0 <HAL_SUBGHZ_CADStatusCallback+0x18>
 801a5ca:	2b01      	cmp	r3, #1
 801a5cc:	d005      	beq.n	801a5da <HAL_SUBGHZ_CADStatusCallback+0x22>
            break;
        case HAL_SUBGHZ_CAD_DETECTED:
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
            break;
        default:
            break;
 801a5ce:	e00a      	b.n	801a5e6 <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 801a5d0:	4b07      	ldr	r3, [pc, #28]	@ (801a5f0 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 801a5d2:	681b      	ldr	r3, [r3, #0]
 801a5d4:	2080      	movs	r0, #128	@ 0x80
 801a5d6:	4798      	blx	r3
            break;
 801a5d8:	e005      	b.n	801a5e6 <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 801a5da:	4b05      	ldr	r3, [pc, #20]	@ (801a5f0 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 801a5dc:	681b      	ldr	r3, [r3, #0]
 801a5de:	f44f 7080 	mov.w	r0, #256	@ 0x100
 801a5e2:	4798      	blx	r3
            break;
 801a5e4:	bf00      	nop
    }
}
 801a5e6:	bf00      	nop
 801a5e8:	3708      	adds	r7, #8
 801a5ea:	46bd      	mov	sp, r7
 801a5ec:	bd80      	pop	{r7, pc}
 801a5ee:	bf00      	nop
 801a5f0:	20001d68 	.word	0x20001d68

0801a5f4 <HAL_SUBGHZ_RxTxTimeoutCallback>:

void HAL_SUBGHZ_RxTxTimeoutCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801a5f4:	b580      	push	{r7, lr}
 801a5f6:	b082      	sub	sp, #8
 801a5f8:	af00      	add	r7, sp, #0
 801a5fa:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 801a5fc:	4b04      	ldr	r3, [pc, #16]	@ (801a610 <HAL_SUBGHZ_RxTxTimeoutCallback+0x1c>)
 801a5fe:	681b      	ldr	r3, [r3, #0]
 801a600:	f44f 7000 	mov.w	r0, #512	@ 0x200
 801a604:	4798      	blx	r3
}
 801a606:	bf00      	nop
 801a608:	3708      	adds	r7, #8
 801a60a:	46bd      	mov	sp, r7
 801a60c:	bd80      	pop	{r7, pc}
 801a60e:	bf00      	nop
 801a610:	20001d68 	.word	0x20001d68

0801a614 <HAL_SUBGHZ_HeaderErrorCallback>:

void HAL_SUBGHZ_HeaderErrorCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801a614:	b580      	push	{r7, lr}
 801a616:	b082      	sub	sp, #8
 801a618:	af00      	add	r7, sp, #0
 801a61a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 801a61c:	4b03      	ldr	r3, [pc, #12]	@ (801a62c <HAL_SUBGHZ_HeaderErrorCallback+0x18>)
 801a61e:	681b      	ldr	r3, [r3, #0]
 801a620:	2020      	movs	r0, #32
 801a622:	4798      	blx	r3
}
 801a624:	bf00      	nop
 801a626:	3708      	adds	r7, #8
 801a628:	46bd      	mov	sp, r7
 801a62a:	bd80      	pop	{r7, pc}
 801a62c:	20001d68 	.word	0x20001d68

0801a630 <HAL_SUBGHZ_PreambleDetectedCallback>:

void HAL_SUBGHZ_PreambleDetectedCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801a630:	b580      	push	{r7, lr}
 801a632:	b082      	sub	sp, #8
 801a634:	af00      	add	r7, sp, #0
 801a636:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 801a638:	4b03      	ldr	r3, [pc, #12]	@ (801a648 <HAL_SUBGHZ_PreambleDetectedCallback+0x18>)
 801a63a:	681b      	ldr	r3, [r3, #0]
 801a63c:	2004      	movs	r0, #4
 801a63e:	4798      	blx	r3
}
 801a640:	bf00      	nop
 801a642:	3708      	adds	r7, #8
 801a644:	46bd      	mov	sp, r7
 801a646:	bd80      	pop	{r7, pc}
 801a648:	20001d68 	.word	0x20001d68

0801a64c <HAL_SUBGHZ_SyncWordValidCallback>:

void HAL_SUBGHZ_SyncWordValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801a64c:	b580      	push	{r7, lr}
 801a64e:	b082      	sub	sp, #8
 801a650:	af00      	add	r7, sp, #0
 801a652:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 801a654:	4b03      	ldr	r3, [pc, #12]	@ (801a664 <HAL_SUBGHZ_SyncWordValidCallback+0x18>)
 801a656:	681b      	ldr	r3, [r3, #0]
 801a658:	2008      	movs	r0, #8
 801a65a:	4798      	blx	r3
}
 801a65c:	bf00      	nop
 801a65e:	3708      	adds	r7, #8
 801a660:	46bd      	mov	sp, r7
 801a662:	bd80      	pop	{r7, pc}
 801a664:	20001d68 	.word	0x20001d68

0801a668 <HAL_SUBGHZ_HeaderValidCallback>:

void HAL_SUBGHZ_HeaderValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801a668:	b580      	push	{r7, lr}
 801a66a:	b082      	sub	sp, #8
 801a66c:	af00      	add	r7, sp, #0
 801a66e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 801a670:	4b03      	ldr	r3, [pc, #12]	@ (801a680 <HAL_SUBGHZ_HeaderValidCallback+0x18>)
 801a672:	681b      	ldr	r3, [r3, #0]
 801a674:	2010      	movs	r0, #16
 801a676:	4798      	blx	r3
}
 801a678:	bf00      	nop
 801a67a:	3708      	adds	r7, #8
 801a67c:	46bd      	mov	sp, r7
 801a67e:	bd80      	pop	{r7, pc}
 801a680:	20001d68 	.word	0x20001d68

0801a684 <Radio_SMPS_Set>:

static void Radio_SMPS_Set(uint8_t level)
{
 801a684:	b580      	push	{r7, lr}
 801a686:	b084      	sub	sp, #16
 801a688:	af00      	add	r7, sp, #0
 801a68a:	4603      	mov	r3, r0
 801a68c:	71fb      	strb	r3, [r7, #7]
  if ( 1U == RBI_IsDCDC() )
 801a68e:	f7f0 fcb2 	bl	800aff6 <RBI_IsDCDC>
 801a692:	4603      	mov	r3, r0
 801a694:	2b01      	cmp	r3, #1
 801a696:	d112      	bne.n	801a6be <Radio_SMPS_Set+0x3a>
  {
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 801a698:	f640 1023 	movw	r0, #2339	@ 0x923
 801a69c:	f7ff fe1e 	bl	801a2dc <SUBGRF_ReadRegister>
 801a6a0:	4603      	mov	r3, r0
 801a6a2:	73fb      	strb	r3, [r7, #15]
    modReg&= (~SMPS_DRV_MASK);
 801a6a4:	7bfb      	ldrb	r3, [r7, #15]
 801a6a6:	f023 0306 	bic.w	r3, r3, #6
 801a6aa:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 801a6ac:	7bfa      	ldrb	r2, [r7, #15]
 801a6ae:	79fb      	ldrb	r3, [r7, #7]
 801a6b0:	4313      	orrs	r3, r2
 801a6b2:	b2db      	uxtb	r3, r3
 801a6b4:	4619      	mov	r1, r3
 801a6b6:	f640 1023 	movw	r0, #2339	@ 0x923
 801a6ba:	f7ff fdfb 	bl	801a2b4 <SUBGRF_WriteRegister>
  }
}
 801a6be:	bf00      	nop
 801a6c0:	3710      	adds	r7, #16
 801a6c2:	46bd      	mov	sp, r7
 801a6c4:	bd80      	pop	{r7, pc}
	...

0801a6c8 <SUBGRF_GetFskBandwidthRegValue>:

uint8_t SUBGRF_GetFskBandwidthRegValue( uint32_t bandwidth )
{
 801a6c8:	b480      	push	{r7}
 801a6ca:	b085      	sub	sp, #20
 801a6cc:	af00      	add	r7, sp, #0
 801a6ce:	6078      	str	r0, [r7, #4]
    uint8_t i;

    if( bandwidth == 0 )
 801a6d0:	687b      	ldr	r3, [r7, #4]
 801a6d2:	2b00      	cmp	r3, #0
 801a6d4:	d101      	bne.n	801a6da <SUBGRF_GetFskBandwidthRegValue+0x12>
    {
        return( 0x1F );
 801a6d6:	231f      	movs	r3, #31
 801a6d8:	e017      	b.n	801a70a <SUBGRF_GetFskBandwidthRegValue+0x42>
    }

    /* ST_WORKAROUND_BEGIN: Simplified loop */
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 801a6da:	2300      	movs	r3, #0
 801a6dc:	73fb      	strb	r3, [r7, #15]
 801a6de:	e00f      	b.n	801a700 <SUBGRF_GetFskBandwidthRegValue+0x38>
    {
        if ( bandwidth < FskBandwidths[i].bandwidth )
 801a6e0:	7bfb      	ldrb	r3, [r7, #15]
 801a6e2:	4a0c      	ldr	r2, [pc, #48]	@ (801a714 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 801a6e4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 801a6e8:	687a      	ldr	r2, [r7, #4]
 801a6ea:	429a      	cmp	r2, r3
 801a6ec:	d205      	bcs.n	801a6fa <SUBGRF_GetFskBandwidthRegValue+0x32>
        {
            return FskBandwidths[i].RegValue;
 801a6ee:	7bfb      	ldrb	r3, [r7, #15]
 801a6f0:	4a08      	ldr	r2, [pc, #32]	@ (801a714 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 801a6f2:	00db      	lsls	r3, r3, #3
 801a6f4:	4413      	add	r3, r2
 801a6f6:	791b      	ldrb	r3, [r3, #4]
 801a6f8:	e007      	b.n	801a70a <SUBGRF_GetFskBandwidthRegValue+0x42>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 801a6fa:	7bfb      	ldrb	r3, [r7, #15]
 801a6fc:	3301      	adds	r3, #1
 801a6fe:	73fb      	strb	r3, [r7, #15]
 801a700:	7bfb      	ldrb	r3, [r7, #15]
 801a702:	2b15      	cmp	r3, #21
 801a704:	d9ec      	bls.n	801a6e0 <SUBGRF_GetFskBandwidthRegValue+0x18>
        }
    }
    /* ST_WORKAROUND_END */
    // ERROR: Value not found
    while( 1 );
 801a706:	bf00      	nop
 801a708:	e7fd      	b.n	801a706 <SUBGRF_GetFskBandwidthRegValue+0x3e>
}
 801a70a:	4618      	mov	r0, r3
 801a70c:	3714      	adds	r7, #20
 801a70e:	46bd      	mov	sp, r7
 801a710:	bc80      	pop	{r7}
 801a712:	4770      	bx	lr
 801a714:	0801f8fc 	.word	0x0801f8fc

0801a718 <SUBGRF_GetCFO>:
void SUBGRF_GetCFO( uint32_t bitRate, int32_t *cfo)
{
 801a718:	b580      	push	{r7, lr}
 801a71a:	b08a      	sub	sp, #40	@ 0x28
 801a71c:	af00      	add	r7, sp, #0
 801a71e:	6078      	str	r0, [r7, #4]
 801a720:	6039      	str	r1, [r7, #0]
  uint8_t BwMant[] = {4, 8, 10, 12};
 801a722:	4b35      	ldr	r3, [pc, #212]	@ (801a7f8 <SUBGRF_GetCFO+0xe0>)
 801a724:	60fb      	str	r3, [r7, #12]
  /* read demod bandwidth: mant bit4:3, exp bits 2:0 */
  uint8_t reg = (SUBGRF_ReadRegister( SUBGHZ_BWSELR ));
 801a726:	f640 0007 	movw	r0, #2055	@ 0x807
 801a72a:	f7ff fdd7 	bl	801a2dc <SUBGRF_ReadRegister>
 801a72e:	4603      	mov	r3, r0
 801a730:	77fb      	strb	r3, [r7, #31]
  uint8_t bandwidth_mant = BwMant[( reg >> 3 ) & 0x3];
 801a732:	7ffb      	ldrb	r3, [r7, #31]
 801a734:	08db      	lsrs	r3, r3, #3
 801a736:	b2db      	uxtb	r3, r3
 801a738:	f003 0303 	and.w	r3, r3, #3
 801a73c:	3328      	adds	r3, #40	@ 0x28
 801a73e:	443b      	add	r3, r7
 801a740:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 801a744:	77bb      	strb	r3, [r7, #30]
  uint8_t bandwidth_exp = reg & 0x7;
 801a746:	7ffb      	ldrb	r3, [r7, #31]
 801a748:	f003 0307 	and.w	r3, r3, #7
 801a74c:	777b      	strb	r3, [r7, #29]
  uint32_t cf_fs = XTAL_FREQ / ( bandwidth_mant * ( 1 << ( bandwidth_exp - 1 )));
 801a74e:	7fba      	ldrb	r2, [r7, #30]
 801a750:	7f7b      	ldrb	r3, [r7, #29]
 801a752:	3b01      	subs	r3, #1
 801a754:	fa02 f303 	lsl.w	r3, r2, r3
 801a758:	461a      	mov	r2, r3
 801a75a:	4b28      	ldr	r3, [pc, #160]	@ (801a7fc <SUBGRF_GetCFO+0xe4>)
 801a75c:	fbb3 f3f2 	udiv	r3, r3, r2
 801a760:	61bb      	str	r3, [r7, #24]
  uint32_t cf_osr = cf_fs / bitRate;
 801a762:	69ba      	ldr	r2, [r7, #24]
 801a764:	687b      	ldr	r3, [r7, #4]
 801a766:	fbb2 f3f3 	udiv	r3, r2, r3
 801a76a:	617b      	str	r3, [r7, #20]
  uint8_t interp = 1;
 801a76c:	2301      	movs	r3, #1
 801a76e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  /* calculate demod interpolation factor */
  if (cf_osr * interp < 8)
 801a772:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801a776:	697a      	ldr	r2, [r7, #20]
 801a778:	fb02 f303 	mul.w	r3, r2, r3
 801a77c:	2b07      	cmp	r3, #7
 801a77e:	d802      	bhi.n	801a786 <SUBGRF_GetCFO+0x6e>
  {
    interp = 2;
 801a780:	2302      	movs	r3, #2
 801a782:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }
  if (cf_osr * interp < 4)
 801a786:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801a78a:	697a      	ldr	r2, [r7, #20]
 801a78c:	fb02 f303 	mul.w	r3, r2, r3
 801a790:	2b03      	cmp	r3, #3
 801a792:	d802      	bhi.n	801a79a <SUBGRF_GetCFO+0x82>
  {
    interp = 4;
 801a794:	2304      	movs	r3, #4
 801a796:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }
  /* calculate demod sampling frequency */
  uint32_t fs = cf_fs* interp;
 801a79a:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 801a79e:	69bb      	ldr	r3, [r7, #24]
 801a7a0:	fb02 f303 	mul.w	r3, r2, r3
 801a7a4:	613b      	str	r3, [r7, #16]
  /* get the cfo registers */
  int32_t cfo_bin = ( SUBGRF_ReadRegister( SUBGHZ_GCFORH ) & 0xF ) << 8;
 801a7a6:	f44f 60d6 	mov.w	r0, #1712	@ 0x6b0
 801a7aa:	f7ff fd97 	bl	801a2dc <SUBGRF_ReadRegister>
 801a7ae:	4603      	mov	r3, r0
 801a7b0:	021b      	lsls	r3, r3, #8
 801a7b2:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 801a7b6:	623b      	str	r3, [r7, #32]
  cfo_bin |= SUBGRF_ReadRegister( SUBGHZ_GCFORL );
 801a7b8:	f240 60b1 	movw	r0, #1713	@ 0x6b1
 801a7bc:	f7ff fd8e 	bl	801a2dc <SUBGRF_ReadRegister>
 801a7c0:	4603      	mov	r3, r0
 801a7c2:	461a      	mov	r2, r3
 801a7c4:	6a3b      	ldr	r3, [r7, #32]
 801a7c6:	4313      	orrs	r3, r2
 801a7c8:	623b      	str	r3, [r7, #32]
  /* negate if 12 bits sign bit is 1 */
  if (( cfo_bin & 0x800 ) == 0x800 )
 801a7ca:	6a3b      	ldr	r3, [r7, #32]
 801a7cc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 801a7d0:	2b00      	cmp	r3, #0
 801a7d2:	d005      	beq.n	801a7e0 <SUBGRF_GetCFO+0xc8>
  {
    cfo_bin |= 0xFFFFF000;
 801a7d4:	6a3b      	ldr	r3, [r7, #32]
 801a7d6:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 801a7da:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 801a7de:	623b      	str	r3, [r7, #32]
  }
  /* calculate cfo in Hz */
  /* shift by 5 first to not saturate, cfo_bin on 12bits */
  *cfo = ((int32_t)( cfo_bin * ( fs >> 5 ))) >> ( 12 - 5 );
 801a7e0:	693b      	ldr	r3, [r7, #16]
 801a7e2:	095b      	lsrs	r3, r3, #5
 801a7e4:	6a3a      	ldr	r2, [r7, #32]
 801a7e6:	fb02 f303 	mul.w	r3, r2, r3
 801a7ea:	11da      	asrs	r2, r3, #7
 801a7ec:	683b      	ldr	r3, [r7, #0]
 801a7ee:	601a      	str	r2, [r3, #0]
}
 801a7f0:	bf00      	nop
 801a7f2:	3728      	adds	r7, #40	@ 0x28
 801a7f4:	46bd      	mov	sp, r7
 801a7f6:	bd80      	pop	{r7, pc}
 801a7f8:	0c0a0804 	.word	0x0c0a0804
 801a7fc:	01e84800 	.word	0x01e84800

0801a800 <RFW_TransmitLongPacket>:
static void RFW_GetPayload( uint8_t Offset, uint8_t Length );
#endif

/* Exported functions --------------------------------------------------------*/
int32_t RFW_TransmitLongPacket( uint16_t payload_size, uint32_t timeout, void (*TxLongPacketGetNextChunkCb) (uint8_t** buffer, uint8_t buffer_size) )
{
 801a800:	b480      	push	{r7}
 801a802:	b087      	sub	sp, #28
 801a804:	af00      	add	r7, sp, #0
 801a806:	4603      	mov	r3, r0
 801a808:	60b9      	str	r1, [r7, #8]
 801a80a:	607a      	str	r2, [r7, #4]
 801a80c:	81fb      	strh	r3, [r7, #14]
  int32_t status=0;
 801a80e:	2300      	movs	r3, #0
 801a810:	617b      	str	r3, [r7, #20]
        default:
            break;
    }
  }
#else
  status= -1;
 801a812:	f04f 33ff 	mov.w	r3, #4294967295
 801a816:	617b      	str	r3, [r7, #20]
#endif
  return status;
 801a818:	697b      	ldr	r3, [r7, #20]
}
 801a81a:	4618      	mov	r0, r3
 801a81c:	371c      	adds	r7, #28
 801a81e:	46bd      	mov	sp, r7
 801a820:	bc80      	pop	{r7}
 801a822:	4770      	bx	lr

0801a824 <RFW_ReceiveLongPacket>:

int32_t RFW_ReceiveLongPacket( uint8_t boosted_mode, uint32_t timeout, void (*RxLongPacketStoreChunkCb) (uint8_t* buffer, uint8_t chunk_size) )
{
 801a824:	b480      	push	{r7}
 801a826:	b087      	sub	sp, #28
 801a828:	af00      	add	r7, sp, #0
 801a82a:	4603      	mov	r3, r0
 801a82c:	60b9      	str	r1, [r7, #8]
 801a82e:	607a      	str	r2, [r7, #4]
 801a830:	73fb      	strb	r3, [r7, #15]
  int32_t status=0;
 801a832:	2300      	movs	r3, #0
 801a834:	617b      	str	r3, [r7, #20]
    {
      SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
    }
  }
#else
  status= -1;
 801a836:	f04f 33ff 	mov.w	r3, #4294967295
 801a83a:	617b      	str	r3, [r7, #20]
#endif
  return status;
 801a83c:	697b      	ldr	r3, [r7, #20]
}
 801a83e:	4618      	mov	r0, r3
 801a840:	371c      	adds	r7, #28
 801a842:	46bd      	mov	sp, r7
 801a844:	bc80      	pop	{r7}
 801a846:	4770      	bx	lr

0801a848 <RFW_Init>:

int32_t RFW_Init( ConfigGeneric_t* config, RadioEvents_t* RadioEvents, TimerEvent_t* TimeoutTimerEvent)
{
 801a848:	b480      	push	{r7}
 801a84a:	b085      	sub	sp, #20
 801a84c:	af00      	add	r7, sp, #0
 801a84e:	60f8      	str	r0, [r7, #12]
 801a850:	60b9      	str	r1, [r7, #8]
 801a852:	607a      	str	r2, [r7, #4]
  RFWPacket.Init.Enable=1;
  /* Initialize Timer for end of fixed packet, started at sync*/
  TimerInit( &RFWPacket.Timer, RFW_GetPayloadTimerEvent );
  return 0;
#else
  return -1;
 801a854:	f04f 33ff 	mov.w	r3, #4294967295
#endif
}
 801a858:	4618      	mov	r0, r3
 801a85a:	3714      	adds	r7, #20
 801a85c:	46bd      	mov	sp, r7
 801a85e:	bc80      	pop	{r7}
 801a860:	4770      	bx	lr

0801a862 <RFW_DeInit>:

void RFW_DeInit( void)
{
 801a862:	b480      	push	{r7}
 801a864:	af00      	add	r7, sp, #0
#if (RFW_ENABLE ==1 )
  RFWPacket.Init.Enable=0; /*Disable the RFWPacket decoding*/
#endif
}
 801a866:	bf00      	nop
 801a868:	46bd      	mov	sp, r7
 801a86a:	bc80      	pop	{r7}
 801a86c:	4770      	bx	lr

0801a86e <RFW_Is_Init>:

uint8_t RFW_Is_Init( void)
{
 801a86e:	b480      	push	{r7}
 801a870:	af00      	add	r7, sp, #0
#if (RFW_ENABLE ==1 )
  return RFWPacket.Init.Enable;
#else
  return 0;
 801a872:	2300      	movs	r3, #0
#endif
}
 801a874:	4618      	mov	r0, r3
 801a876:	46bd      	mov	sp, r7
 801a878:	bc80      	pop	{r7}
 801a87a:	4770      	bx	lr

0801a87c <RFW_Is_LongPacketModeEnabled>:

uint8_t RFW_Is_LongPacketModeEnabled( void)
{
 801a87c:	b480      	push	{r7}
 801a87e:	af00      	add	r7, sp, #0
#if (RFW_ENABLE ==1 )
  return RFWPacket.LongPacketModeEnable;
#else
  return 0;
 801a880:	2300      	movs	r3, #0
#endif
}
 801a882:	4618      	mov	r0, r3
 801a884:	46bd      	mov	sp, r7
 801a886:	bc80      	pop	{r7}
 801a888:	4770      	bx	lr

0801a88a <RFW_SetAntSwitch>:

void RFW_SetAntSwitch( uint8_t AntSwitch)
{
 801a88a:	b480      	push	{r7}
 801a88c:	b083      	sub	sp, #12
 801a88e:	af00      	add	r7, sp, #0
 801a890:	4603      	mov	r3, r0
 801a892:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE ==1 )
  RFWPacket.AntSwitchPaSelect=AntSwitch;
#endif
}
 801a894:	bf00      	nop
 801a896:	370c      	adds	r7, #12
 801a898:	46bd      	mov	sp, r7
 801a89a:	bc80      	pop	{r7}
 801a89c:	4770      	bx	lr

0801a89e <RFW_TransmitInit>:

int32_t RFW_TransmitInit(uint8_t* inOutBuffer, uint8_t size, uint8_t* outSize)
{
 801a89e:	b480      	push	{r7}
 801a8a0:	b087      	sub	sp, #28
 801a8a2:	af00      	add	r7, sp, #0
 801a8a4:	60f8      	str	r0, [r7, #12]
 801a8a6:	460b      	mov	r3, r1
 801a8a8:	607a      	str	r2, [r7, #4]
 801a8aa:	72fb      	strb	r3, [r7, #11]
  int32_t status=-1;
 801a8ac:	f04f 33ff 	mov.w	r3, #4294967295
 801a8b0:	617b      	str	r3, [r7, #20]
    RFWPacket.LongPacketModeEnable=0;

    status= 0;
  }
#endif
  return status;
 801a8b2:	697b      	ldr	r3, [r7, #20]
}
 801a8b4:	4618      	mov	r0, r3
 801a8b6:	371c      	adds	r7, #28
 801a8b8:	46bd      	mov	sp, r7
 801a8ba:	bc80      	pop	{r7}
 801a8bc:	4770      	bx	lr

0801a8be <RFW_ReceiveInit>:

int32_t RFW_ReceiveInit( void )
{
 801a8be:	b480      	push	{r7}
 801a8c0:	af00      	add	r7, sp, #0
  RFWPacket.RxPayloadOffset=0;

  RFWPacket.LongPacketModeEnable=0;
  return 0;
#else
  return -1;
 801a8c2:	f04f 33ff 	mov.w	r3, #4294967295
#endif
}
 801a8c6:	4618      	mov	r0, r3
 801a8c8:	46bd      	mov	sp, r7
 801a8ca:	bc80      	pop	{r7}
 801a8cc:	4770      	bx	lr

0801a8ce <RFW_DeInit_TxLongPacket>:

void RFW_DeInit_TxLongPacket(void)
{
 801a8ce:	b480      	push	{r7}
 801a8d0:	af00      	add	r7, sp, #0
  /*long packet WA*/
  uint8_t reg = SUBGRF_ReadRegister(SUBGHZ_GPKTCTL1AR);
  SUBGRF_WriteRegister(SUBGHZ_GPKTCTL1AR, reg & ~0x02);//clear infinite_sequence bit
  SUBGRF_WriteRegister(SUBGHZ_GRTXPLDLEN, 0xFF); //RxTxPldLen: reset to 0xFF
#endif
}
 801a8d2:	bf00      	nop
 801a8d4:	46bd      	mov	sp, r7
 801a8d6:	bc80      	pop	{r7}
 801a8d8:	4770      	bx	lr

0801a8da <RFW_ReceivePayload>:

void RFW_ReceivePayload( void )
{
 801a8da:	b480      	push	{r7}
 801a8dc:	af00      	add	r7, sp, #0
    /*timeout*/
    SUBGRF_SetStandby( STDBY_RC );
    RFWPacket.Init.RadioEvents->RxTimeout( );
  }
#endif
}
 801a8de:	bf00      	nop
 801a8e0:	46bd      	mov	sp, r7
 801a8e2:	bc80      	pop	{r7}
 801a8e4:	4770      	bx	lr

0801a8e6 <RFW_SetRadioModem>:

void RFW_SetRadioModem(RadioModems_t Modem)
{
 801a8e6:	b480      	push	{r7}
 801a8e8:	b083      	sub	sp, #12
 801a8ea:	af00      	add	r7, sp, #0
 801a8ec:	4603      	mov	r3, r0
 801a8ee:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE ==1 )
  RFWPacket.Init.Modem= Modem;
#endif
}
 801a8f0:	bf00      	nop
 801a8f2:	370c      	adds	r7, #12
 801a8f4:	46bd      	mov	sp, r7
 801a8f6:	bc80      	pop	{r7}
 801a8f8:	4770      	bx	lr
	...

0801a8fc <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 801a8fc:	b480      	push	{r7}
 801a8fe:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 801a900:	4b04      	ldr	r3, [pc, #16]	@ (801a914 <UTIL_LPM_Init+0x18>)
 801a902:	2200      	movs	r2, #0
 801a904:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 801a906:	4b04      	ldr	r3, [pc, #16]	@ (801a918 <UTIL_LPM_Init+0x1c>)
 801a908:	2200      	movs	r2, #0
 801a90a:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 801a90c:	bf00      	nop
 801a90e:	46bd      	mov	sp, r7
 801a910:	bc80      	pop	{r7}
 801a912:	4770      	bx	lr
 801a914:	20001d6c 	.word	0x20001d6c
 801a918:	20001d70 	.word	0x20001d70

0801a91c <UTIL_LPM_SetStopMode>:
void UTIL_LPM_DeInit( void )
{
}

void UTIL_LPM_SetStopMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 801a91c:	b480      	push	{r7}
 801a91e:	b087      	sub	sp, #28
 801a920:	af00      	add	r7, sp, #0
 801a922:	6078      	str	r0, [r7, #4]
 801a924:	460b      	mov	r3, r1
 801a926:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a928:	f3ef 8310 	mrs	r3, PRIMASK
 801a92c:	613b      	str	r3, [r7, #16]
  return(result);
 801a92e:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 801a930:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801a932:	b672      	cpsid	i
}
 801a934:	bf00      	nop
  
  switch( state )
 801a936:	78fb      	ldrb	r3, [r7, #3]
 801a938:	2b00      	cmp	r3, #0
 801a93a:	d008      	beq.n	801a94e <UTIL_LPM_SetStopMode+0x32>
 801a93c:	2b01      	cmp	r3, #1
 801a93e:	d10e      	bne.n	801a95e <UTIL_LPM_SetStopMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      StopModeDisable |= lpm_id_bm;
 801a940:	4b0d      	ldr	r3, [pc, #52]	@ (801a978 <UTIL_LPM_SetStopMode+0x5c>)
 801a942:	681a      	ldr	r2, [r3, #0]
 801a944:	687b      	ldr	r3, [r7, #4]
 801a946:	4313      	orrs	r3, r2
 801a948:	4a0b      	ldr	r2, [pc, #44]	@ (801a978 <UTIL_LPM_SetStopMode+0x5c>)
 801a94a:	6013      	str	r3, [r2, #0]
      break;
 801a94c:	e008      	b.n	801a960 <UTIL_LPM_SetStopMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      StopModeDisable &= ( ~lpm_id_bm );
 801a94e:	687b      	ldr	r3, [r7, #4]
 801a950:	43da      	mvns	r2, r3
 801a952:	4b09      	ldr	r3, [pc, #36]	@ (801a978 <UTIL_LPM_SetStopMode+0x5c>)
 801a954:	681b      	ldr	r3, [r3, #0]
 801a956:	4013      	ands	r3, r2
 801a958:	4a07      	ldr	r2, [pc, #28]	@ (801a978 <UTIL_LPM_SetStopMode+0x5c>)
 801a95a:	6013      	str	r3, [r2, #0]
      break;
 801a95c:	e000      	b.n	801a960 <UTIL_LPM_SetStopMode+0x44>
    }
  default :
    {
      break;
 801a95e:	bf00      	nop
 801a960:	697b      	ldr	r3, [r7, #20]
 801a962:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a964:	68fb      	ldr	r3, [r7, #12]
 801a966:	f383 8810 	msr	PRIMASK, r3
}
 801a96a:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 801a96c:	bf00      	nop
 801a96e:	371c      	adds	r7, #28
 801a970:	46bd      	mov	sp, r7
 801a972:	bc80      	pop	{r7}
 801a974:	4770      	bx	lr
 801a976:	bf00      	nop
 801a978:	20001d6c 	.word	0x20001d6c

0801a97c <UTIL_LPM_SetOffMode>:

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 801a97c:	b480      	push	{r7}
 801a97e:	b087      	sub	sp, #28
 801a980:	af00      	add	r7, sp, #0
 801a982:	6078      	str	r0, [r7, #4]
 801a984:	460b      	mov	r3, r1
 801a986:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a988:	f3ef 8310 	mrs	r3, PRIMASK
 801a98c:	613b      	str	r3, [r7, #16]
  return(result);
 801a98e:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 801a990:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801a992:	b672      	cpsid	i
}
 801a994:	bf00      	nop
  
  switch(state)
 801a996:	78fb      	ldrb	r3, [r7, #3]
 801a998:	2b00      	cmp	r3, #0
 801a99a:	d008      	beq.n	801a9ae <UTIL_LPM_SetOffMode+0x32>
 801a99c:	2b01      	cmp	r3, #1
 801a99e:	d10e      	bne.n	801a9be <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 801a9a0:	4b0d      	ldr	r3, [pc, #52]	@ (801a9d8 <UTIL_LPM_SetOffMode+0x5c>)
 801a9a2:	681a      	ldr	r2, [r3, #0]
 801a9a4:	687b      	ldr	r3, [r7, #4]
 801a9a6:	4313      	orrs	r3, r2
 801a9a8:	4a0b      	ldr	r2, [pc, #44]	@ (801a9d8 <UTIL_LPM_SetOffMode+0x5c>)
 801a9aa:	6013      	str	r3, [r2, #0]
      break;
 801a9ac:	e008      	b.n	801a9c0 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 801a9ae:	687b      	ldr	r3, [r7, #4]
 801a9b0:	43da      	mvns	r2, r3
 801a9b2:	4b09      	ldr	r3, [pc, #36]	@ (801a9d8 <UTIL_LPM_SetOffMode+0x5c>)
 801a9b4:	681b      	ldr	r3, [r3, #0]
 801a9b6:	4013      	ands	r3, r2
 801a9b8:	4a07      	ldr	r2, [pc, #28]	@ (801a9d8 <UTIL_LPM_SetOffMode+0x5c>)
 801a9ba:	6013      	str	r3, [r2, #0]
      break;
 801a9bc:	e000      	b.n	801a9c0 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 801a9be:	bf00      	nop
 801a9c0:	697b      	ldr	r3, [r7, #20]
 801a9c2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a9c4:	68fb      	ldr	r3, [r7, #12]
 801a9c6:	f383 8810 	msr	PRIMASK, r3
}
 801a9ca:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 801a9cc:	bf00      	nop
 801a9ce:	371c      	adds	r7, #28
 801a9d0:	46bd      	mov	sp, r7
 801a9d2:	bc80      	pop	{r7}
 801a9d4:	4770      	bx	lr
 801a9d6:	bf00      	nop
 801a9d8:	20001d70 	.word	0x20001d70

0801a9dc <UTIL_LPM_EnterLowPower>:

  return mode_selected;
}

void UTIL_LPM_EnterLowPower( void )
{
 801a9dc:	b580      	push	{r7, lr}
 801a9de:	b084      	sub	sp, #16
 801a9e0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a9e2:	f3ef 8310 	mrs	r3, PRIMASK
 801a9e6:	60bb      	str	r3, [r7, #8]
  return(result);
 801a9e8:	68bb      	ldr	r3, [r7, #8]
  UTIL_LPM_ENTER_CRITICAL_SECTION_ELP( );
 801a9ea:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801a9ec:	b672      	cpsid	i
}
 801a9ee:	bf00      	nop

  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 801a9f0:	4b12      	ldr	r3, [pc, #72]	@ (801aa3c <UTIL_LPM_EnterLowPower+0x60>)
 801a9f2:	681b      	ldr	r3, [r3, #0]
 801a9f4:	2b00      	cmp	r3, #0
 801a9f6:	d006      	beq.n	801aa06 <UTIL_LPM_EnterLowPower+0x2a>
  {
    /**
     * At least one user disallows Stop Mode
     * SLEEP mode is required
     */
      UTIL_PowerDriver.EnterSleepMode( );
 801a9f8:	4b11      	ldr	r3, [pc, #68]	@ (801aa40 <UTIL_LPM_EnterLowPower+0x64>)
 801a9fa:	681b      	ldr	r3, [r3, #0]
 801a9fc:	4798      	blx	r3
      UTIL_PowerDriver.ExitSleepMode( );
 801a9fe:	4b10      	ldr	r3, [pc, #64]	@ (801aa40 <UTIL_LPM_EnterLowPower+0x64>)
 801aa00:	685b      	ldr	r3, [r3, #4]
 801aa02:	4798      	blx	r3
 801aa04:	e010      	b.n	801aa28 <UTIL_LPM_EnterLowPower+0x4c>
  }
  else
  { 
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 801aa06:	4b0f      	ldr	r3, [pc, #60]	@ (801aa44 <UTIL_LPM_EnterLowPower+0x68>)
 801aa08:	681b      	ldr	r3, [r3, #0]
 801aa0a:	2b00      	cmp	r3, #0
 801aa0c:	d006      	beq.n	801aa1c <UTIL_LPM_EnterLowPower+0x40>
    {
      /**
       * At least one user disallows Off Mode
       * STOP mode is required
       */
        UTIL_PowerDriver.EnterStopMode( );
 801aa0e:	4b0c      	ldr	r3, [pc, #48]	@ (801aa40 <UTIL_LPM_EnterLowPower+0x64>)
 801aa10:	689b      	ldr	r3, [r3, #8]
 801aa12:	4798      	blx	r3
        UTIL_PowerDriver.ExitStopMode( );
 801aa14:	4b0a      	ldr	r3, [pc, #40]	@ (801aa40 <UTIL_LPM_EnterLowPower+0x64>)
 801aa16:	68db      	ldr	r3, [r3, #12]
 801aa18:	4798      	blx	r3
 801aa1a:	e005      	b.n	801aa28 <UTIL_LPM_EnterLowPower+0x4c>
    else
    {
      /**
       * OFF mode is required
       */
      UTIL_PowerDriver.EnterOffMode( );
 801aa1c:	4b08      	ldr	r3, [pc, #32]	@ (801aa40 <UTIL_LPM_EnterLowPower+0x64>)
 801aa1e:	691b      	ldr	r3, [r3, #16]
 801aa20:	4798      	blx	r3
      UTIL_PowerDriver.ExitOffMode( );
 801aa22:	4b07      	ldr	r3, [pc, #28]	@ (801aa40 <UTIL_LPM_EnterLowPower+0x64>)
 801aa24:	695b      	ldr	r3, [r3, #20]
 801aa26:	4798      	blx	r3
 801aa28:	68fb      	ldr	r3, [r7, #12]
 801aa2a:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801aa2c:	687b      	ldr	r3, [r7, #4]
 801aa2e:	f383 8810 	msr	PRIMASK, r3
}
 801aa32:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION_ELP( );
}
 801aa34:	bf00      	nop
 801aa36:	3710      	adds	r7, #16
 801aa38:	46bd      	mov	sp, r7
 801aa3a:	bd80      	pop	{r7, pc}
 801aa3c:	20001d6c 	.word	0x20001d6c
 801aa40:	0801f374 	.word	0x0801f374
 801aa44:	20001d70 	.word	0x20001d70

0801aa48 <UTIL_MEM_cpy_8>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

void UTIL_MEM_cpy_8( void *dst, const void *src, uint16_t size )
{
 801aa48:	b480      	push	{r7}
 801aa4a:	b087      	sub	sp, #28
 801aa4c:	af00      	add	r7, sp, #0
 801aa4e:	60f8      	str	r0, [r7, #12]
 801aa50:	60b9      	str	r1, [r7, #8]
 801aa52:	4613      	mov	r3, r2
 801aa54:	80fb      	strh	r3, [r7, #6]
  uint8_t* dst8= (uint8_t *) dst;
 801aa56:	68fb      	ldr	r3, [r7, #12]
 801aa58:	617b      	str	r3, [r7, #20]
  uint8_t* src8= (uint8_t *) src;
 801aa5a:	68bb      	ldr	r3, [r7, #8]
 801aa5c:	613b      	str	r3, [r7, #16]

  while( size-- )
 801aa5e:	e007      	b.n	801aa70 <UTIL_MEM_cpy_8+0x28>
    {
        *dst8++ = *src8++;
 801aa60:	693a      	ldr	r2, [r7, #16]
 801aa62:	1c53      	adds	r3, r2, #1
 801aa64:	613b      	str	r3, [r7, #16]
 801aa66:	697b      	ldr	r3, [r7, #20]
 801aa68:	1c59      	adds	r1, r3, #1
 801aa6a:	6179      	str	r1, [r7, #20]
 801aa6c:	7812      	ldrb	r2, [r2, #0]
 801aa6e:	701a      	strb	r2, [r3, #0]
  while( size-- )
 801aa70:	88fb      	ldrh	r3, [r7, #6]
 801aa72:	1e5a      	subs	r2, r3, #1
 801aa74:	80fa      	strh	r2, [r7, #6]
 801aa76:	2b00      	cmp	r3, #0
 801aa78:	d1f2      	bne.n	801aa60 <UTIL_MEM_cpy_8+0x18>
    }
}
 801aa7a:	bf00      	nop
 801aa7c:	bf00      	nop
 801aa7e:	371c      	adds	r7, #28
 801aa80:	46bd      	mov	sp, r7
 801aa82:	bc80      	pop	{r7}
 801aa84:	4770      	bx	lr

0801aa86 <UTIL_MEM_set_8>:
        *dst8-- = *src8++;
    }
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
 801aa86:	b480      	push	{r7}
 801aa88:	b085      	sub	sp, #20
 801aa8a:	af00      	add	r7, sp, #0
 801aa8c:	6078      	str	r0, [r7, #4]
 801aa8e:	460b      	mov	r3, r1
 801aa90:	70fb      	strb	r3, [r7, #3]
 801aa92:	4613      	mov	r3, r2
 801aa94:	803b      	strh	r3, [r7, #0]
  uint8_t* dst8= (uint8_t *) dst;
 801aa96:	687b      	ldr	r3, [r7, #4]
 801aa98:	60fb      	str	r3, [r7, #12]
  while( size-- )
 801aa9a:	e004      	b.n	801aaa6 <UTIL_MEM_set_8+0x20>
  {
    *dst8++ = value;
 801aa9c:	68fb      	ldr	r3, [r7, #12]
 801aa9e:	1c5a      	adds	r2, r3, #1
 801aaa0:	60fa      	str	r2, [r7, #12]
 801aaa2:	78fa      	ldrb	r2, [r7, #3]
 801aaa4:	701a      	strb	r2, [r3, #0]
  while( size-- )
 801aaa6:	883b      	ldrh	r3, [r7, #0]
 801aaa8:	1e5a      	subs	r2, r3, #1
 801aaaa:	803a      	strh	r2, [r7, #0]
 801aaac:	2b00      	cmp	r3, #0
 801aaae:	d1f5      	bne.n	801aa9c <UTIL_MEM_set_8+0x16>
  }
}
 801aab0:	bf00      	nop
 801aab2:	bf00      	nop
 801aab4:	3714      	adds	r7, #20
 801aab6:	46bd      	mov	sp, r7
 801aab8:	bc80      	pop	{r7}
 801aaba:	4770      	bx	lr

0801aabc <SysTimeAdd>:
  * @addtogroup SYSTIME_exported_function
  *  @{
  */

SysTime_t SysTimeAdd( SysTime_t a, SysTime_t b )
{
 801aabc:	b082      	sub	sp, #8
 801aabe:	b480      	push	{r7}
 801aac0:	b087      	sub	sp, #28
 801aac2:	af00      	add	r7, sp, #0
 801aac4:	60f8      	str	r0, [r7, #12]
 801aac6:	1d38      	adds	r0, r7, #4
 801aac8:	e880 0006 	stmia.w	r0, {r1, r2}
 801aacc:	627b      	str	r3, [r7, #36]	@ 0x24
  SysTime_t c =  { .Seconds = 0, .SubSeconds = 0 };
 801aace:	2300      	movs	r3, #0
 801aad0:	613b      	str	r3, [r7, #16]
 801aad2:	2300      	movs	r3, #0
 801aad4:	82bb      	strh	r3, [r7, #20]

  c.Seconds = a.Seconds + b.Seconds;
 801aad6:	687a      	ldr	r2, [r7, #4]
 801aad8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801aada:	4413      	add	r3, r2
 801aadc:	613b      	str	r3, [r7, #16]
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 801aade:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 801aae2:	b29a      	uxth	r2, r3
 801aae4:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 801aae8:	b29b      	uxth	r3, r3
 801aaea:	4413      	add	r3, r2
 801aaec:	b29b      	uxth	r3, r3
 801aaee:	b21b      	sxth	r3, r3
 801aaf0:	82bb      	strh	r3, [r7, #20]
  if( c.SubSeconds >= 1000 )
 801aaf2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801aaf6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 801aafa:	db0a      	blt.n	801ab12 <SysTimeAdd+0x56>
  {
    c.Seconds++;
 801aafc:	693b      	ldr	r3, [r7, #16]
 801aafe:	3301      	adds	r3, #1
 801ab00:	613b      	str	r3, [r7, #16]
    c.SubSeconds -= 1000;
 801ab02:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801ab06:	b29b      	uxth	r3, r3
 801ab08:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 801ab0c:	b29b      	uxth	r3, r3
 801ab0e:	b21b      	sxth	r3, r3
 801ab10:	82bb      	strh	r3, [r7, #20]
  }
  return c;
 801ab12:	68fb      	ldr	r3, [r7, #12]
 801ab14:	461a      	mov	r2, r3
 801ab16:	f107 0310 	add.w	r3, r7, #16
 801ab1a:	e893 0003 	ldmia.w	r3, {r0, r1}
 801ab1e:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801ab22:	68f8      	ldr	r0, [r7, #12]
 801ab24:	371c      	adds	r7, #28
 801ab26:	46bd      	mov	sp, r7
 801ab28:	bc80      	pop	{r7}
 801ab2a:	b002      	add	sp, #8
 801ab2c:	4770      	bx	lr

0801ab2e <SysTimeSub>:

SysTime_t SysTimeSub( SysTime_t a, SysTime_t b )
{
 801ab2e:	b082      	sub	sp, #8
 801ab30:	b480      	push	{r7}
 801ab32:	b087      	sub	sp, #28
 801ab34:	af00      	add	r7, sp, #0
 801ab36:	60f8      	str	r0, [r7, #12]
 801ab38:	1d38      	adds	r0, r7, #4
 801ab3a:	e880 0006 	stmia.w	r0, {r1, r2}
 801ab3e:	627b      	str	r3, [r7, #36]	@ 0x24
  SysTime_t c = { .Seconds = 0, .SubSeconds = 0 };
 801ab40:	2300      	movs	r3, #0
 801ab42:	613b      	str	r3, [r7, #16]
 801ab44:	2300      	movs	r3, #0
 801ab46:	82bb      	strh	r3, [r7, #20]

  c.Seconds = a.Seconds - b.Seconds;
 801ab48:	687a      	ldr	r2, [r7, #4]
 801ab4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ab4c:	1ad3      	subs	r3, r2, r3
 801ab4e:	613b      	str	r3, [r7, #16]
  c.SubSeconds = a.SubSeconds - b.SubSeconds;
 801ab50:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 801ab54:	b29a      	uxth	r2, r3
 801ab56:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 801ab5a:	b29b      	uxth	r3, r3
 801ab5c:	1ad3      	subs	r3, r2, r3
 801ab5e:	b29b      	uxth	r3, r3
 801ab60:	b21b      	sxth	r3, r3
 801ab62:	82bb      	strh	r3, [r7, #20]
  if( c.SubSeconds < 0 )
 801ab64:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801ab68:	2b00      	cmp	r3, #0
 801ab6a:	da0a      	bge.n	801ab82 <SysTimeSub+0x54>
  {
    c.Seconds--;
 801ab6c:	693b      	ldr	r3, [r7, #16]
 801ab6e:	3b01      	subs	r3, #1
 801ab70:	613b      	str	r3, [r7, #16]
    c.SubSeconds += 1000;
 801ab72:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801ab76:	b29b      	uxth	r3, r3
 801ab78:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 801ab7c:	b29b      	uxth	r3, r3
 801ab7e:	b21b      	sxth	r3, r3
 801ab80:	82bb      	strh	r3, [r7, #20]
  }
  return c;
 801ab82:	68fb      	ldr	r3, [r7, #12]
 801ab84:	461a      	mov	r2, r3
 801ab86:	f107 0310 	add.w	r3, r7, #16
 801ab8a:	e893 0003 	ldmia.w	r3, {r0, r1}
 801ab8e:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801ab92:	68f8      	ldr	r0, [r7, #12]
 801ab94:	371c      	adds	r7, #28
 801ab96:	46bd      	mov	sp, r7
 801ab98:	bc80      	pop	{r7}
 801ab9a:	b002      	add	sp, #8
 801ab9c:	4770      	bx	lr
	...

0801aba0 <SysTimeSet>:

void SysTimeSet( SysTime_t sysTime )
{
 801aba0:	b580      	push	{r7, lr}
 801aba2:	b088      	sub	sp, #32
 801aba4:	af02      	add	r7, sp, #8
 801aba6:	463b      	mov	r3, r7
 801aba8:	e883 0003 	stmia.w	r3, {r0, r1}
  SysTime_t DeltaTime;

  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801abac:	2300      	movs	r3, #0
 801abae:	60bb      	str	r3, [r7, #8]
 801abb0:	2300      	movs	r3, #0
 801abb2:	81bb      	strh	r3, [r7, #12]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801abb4:	4b10      	ldr	r3, [pc, #64]	@ (801abf8 <SysTimeSet+0x58>)
 801abb6:	691b      	ldr	r3, [r3, #16]
 801abb8:	f107 0208 	add.w	r2, r7, #8
 801abbc:	3204      	adds	r2, #4
 801abbe:	4610      	mov	r0, r2
 801abc0:	4798      	blx	r3
 801abc2:	4603      	mov	r3, r0
 801abc4:	60bb      	str	r3, [r7, #8]

  // sysTime is UNIX epoch
  DeltaTime = SysTimeSub( sysTime, calendarTime );
 801abc6:	f107 0010 	add.w	r0, r7, #16
 801abca:	68fb      	ldr	r3, [r7, #12]
 801abcc:	9300      	str	r3, [sp, #0]
 801abce:	68bb      	ldr	r3, [r7, #8]
 801abd0:	463a      	mov	r2, r7
 801abd2:	ca06      	ldmia	r2, {r1, r2}
 801abd4:	f7ff ffab 	bl	801ab2e <SysTimeSub>

  UTIL_SYSTIMDriver.BKUPWrite_Seconds( DeltaTime.Seconds );
 801abd8:	4b07      	ldr	r3, [pc, #28]	@ (801abf8 <SysTimeSet+0x58>)
 801abda:	681b      	ldr	r3, [r3, #0]
 801abdc:	693a      	ldr	r2, [r7, #16]
 801abde:	4610      	mov	r0, r2
 801abe0:	4798      	blx	r3
  UTIL_SYSTIMDriver.BKUPWrite_SubSeconds( ( uint32_t ) DeltaTime.SubSeconds );
 801abe2:	4b05      	ldr	r3, [pc, #20]	@ (801abf8 <SysTimeSet+0x58>)
 801abe4:	689b      	ldr	r3, [r3, #8]
 801abe6:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 801abea:	4610      	mov	r0, r2
 801abec:	4798      	blx	r3
}
 801abee:	bf00      	nop
 801abf0:	3718      	adds	r7, #24
 801abf2:	46bd      	mov	sp, r7
 801abf4:	bd80      	pop	{r7, pc}
 801abf6:	bf00      	nop
 801abf8:	0801f458 	.word	0x0801f458

0801abfc <SysTimeGet>:

SysTime_t SysTimeGet( void )
{
 801abfc:	b580      	push	{r7, lr}
 801abfe:	b08a      	sub	sp, #40	@ 0x28
 801ac00:	af02      	add	r7, sp, #8
 801ac02:	6078      	str	r0, [r7, #4]
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801ac04:	2300      	movs	r3, #0
 801ac06:	61bb      	str	r3, [r7, #24]
 801ac08:	2300      	movs	r3, #0
 801ac0a:	83bb      	strh	r3, [r7, #28]
  SysTime_t sysTime = { .Seconds = 0, .SubSeconds = 0 };
 801ac0c:	2300      	movs	r3, #0
 801ac0e:	613b      	str	r3, [r7, #16]
 801ac10:	2300      	movs	r3, #0
 801ac12:	82bb      	strh	r3, [r7, #20]
  SysTime_t DeltaTime;

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801ac14:	4b14      	ldr	r3, [pc, #80]	@ (801ac68 <SysTimeGet+0x6c>)
 801ac16:	691b      	ldr	r3, [r3, #16]
 801ac18:	f107 0218 	add.w	r2, r7, #24
 801ac1c:	3204      	adds	r2, #4
 801ac1e:	4610      	mov	r0, r2
 801ac20:	4798      	blx	r3
 801ac22:	4603      	mov	r3, r0
 801ac24:	61bb      	str	r3, [r7, #24]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 801ac26:	4b10      	ldr	r3, [pc, #64]	@ (801ac68 <SysTimeGet+0x6c>)
 801ac28:	68db      	ldr	r3, [r3, #12]
 801ac2a:	4798      	blx	r3
 801ac2c:	4603      	mov	r3, r0
 801ac2e:	b21b      	sxth	r3, r3
 801ac30:	81bb      	strh	r3, [r7, #12]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 801ac32:	4b0d      	ldr	r3, [pc, #52]	@ (801ac68 <SysTimeGet+0x6c>)
 801ac34:	685b      	ldr	r3, [r3, #4]
 801ac36:	4798      	blx	r3
 801ac38:	4603      	mov	r3, r0
 801ac3a:	60bb      	str	r3, [r7, #8]

  sysTime = SysTimeAdd( DeltaTime, calendarTime );
 801ac3c:	f107 0010 	add.w	r0, r7, #16
 801ac40:	69fb      	ldr	r3, [r7, #28]
 801ac42:	9300      	str	r3, [sp, #0]
 801ac44:	69bb      	ldr	r3, [r7, #24]
 801ac46:	f107 0208 	add.w	r2, r7, #8
 801ac4a:	ca06      	ldmia	r2, {r1, r2}
 801ac4c:	f7ff ff36 	bl	801aabc <SysTimeAdd>

  return sysTime;
 801ac50:	687b      	ldr	r3, [r7, #4]
 801ac52:	461a      	mov	r2, r3
 801ac54:	f107 0310 	add.w	r3, r7, #16
 801ac58:	e893 0003 	ldmia.w	r3, {r0, r1}
 801ac5c:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801ac60:	6878      	ldr	r0, [r7, #4]
 801ac62:	3720      	adds	r7, #32
 801ac64:	46bd      	mov	sp, r7
 801ac66:	bd80      	pop	{r7, pc}
 801ac68:	0801f458 	.word	0x0801f458

0801ac6c <SysTimeGetMcuTime>:


SysTime_t SysTimeGetMcuTime( void )
{
 801ac6c:	b580      	push	{r7, lr}
 801ac6e:	b084      	sub	sp, #16
 801ac70:	af00      	add	r7, sp, #0
 801ac72:	6078      	str	r0, [r7, #4]
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801ac74:	2300      	movs	r3, #0
 801ac76:	60bb      	str	r3, [r7, #8]
 801ac78:	2300      	movs	r3, #0
 801ac7a:	81bb      	strh	r3, [r7, #12]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801ac7c:	4b0a      	ldr	r3, [pc, #40]	@ (801aca8 <SysTimeGetMcuTime+0x3c>)
 801ac7e:	691b      	ldr	r3, [r3, #16]
 801ac80:	f107 0208 	add.w	r2, r7, #8
 801ac84:	3204      	adds	r2, #4
 801ac86:	4610      	mov	r0, r2
 801ac88:	4798      	blx	r3
 801ac8a:	4603      	mov	r3, r0
 801ac8c:	60bb      	str	r3, [r7, #8]

  return calendarTime;
 801ac8e:	687b      	ldr	r3, [r7, #4]
 801ac90:	461a      	mov	r2, r3
 801ac92:	f107 0308 	add.w	r3, r7, #8
 801ac96:	e893 0003 	ldmia.w	r3, {r0, r1}
 801ac9a:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801ac9e:	6878      	ldr	r0, [r7, #4]
 801aca0:	3710      	adds	r7, #16
 801aca2:	46bd      	mov	sp, r7
 801aca4:	bd80      	pop	{r7, pc}
 801aca6:	bf00      	nop
 801aca8:	0801f458 	.word	0x0801f458

0801acac <SysTimeToMs>:

uint32_t SysTimeToMs( SysTime_t sysTime )
{
 801acac:	b580      	push	{r7, lr}
 801acae:	b088      	sub	sp, #32
 801acb0:	af02      	add	r7, sp, #8
 801acb2:	463b      	mov	r3, r7
 801acb4:	e883 0003 	stmia.w	r3, {r0, r1}
  SysTime_t DeltaTime;
  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 801acb8:	4b0f      	ldr	r3, [pc, #60]	@ (801acf8 <SysTimeToMs+0x4c>)
 801acba:	68db      	ldr	r3, [r3, #12]
 801acbc:	4798      	blx	r3
 801acbe:	4603      	mov	r3, r0
 801acc0:	b21b      	sxth	r3, r3
 801acc2:	82bb      	strh	r3, [r7, #20]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 801acc4:	4b0c      	ldr	r3, [pc, #48]	@ (801acf8 <SysTimeToMs+0x4c>)
 801acc6:	685b      	ldr	r3, [r3, #4]
 801acc8:	4798      	blx	r3
 801acca:	4603      	mov	r3, r0
 801accc:	613b      	str	r3, [r7, #16]

  SysTime_t calendarTime = SysTimeSub( sysTime, DeltaTime );
 801acce:	f107 0008 	add.w	r0, r7, #8
 801acd2:	697b      	ldr	r3, [r7, #20]
 801acd4:	9300      	str	r3, [sp, #0]
 801acd6:	693b      	ldr	r3, [r7, #16]
 801acd8:	463a      	mov	r2, r7
 801acda:	ca06      	ldmia	r2, {r1, r2}
 801acdc:	f7ff ff27 	bl	801ab2e <SysTimeSub>
  return calendarTime.Seconds * 1000 + calendarTime.SubSeconds;
 801ace0:	68bb      	ldr	r3, [r7, #8]
 801ace2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 801ace6:	fb02 f303 	mul.w	r3, r2, r3
 801acea:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 801acee:	4413      	add	r3, r2
}
 801acf0:	4618      	mov	r0, r3
 801acf2:	3718      	adds	r7, #24
 801acf4:	46bd      	mov	sp, r7
 801acf6:	bd80      	pop	{r7, pc}
 801acf8:	0801f458 	.word	0x0801f458

0801acfc <SysTimeFromMs>:

SysTime_t SysTimeFromMs( uint32_t timeMs )
{
 801acfc:	b580      	push	{r7, lr}
 801acfe:	b08a      	sub	sp, #40	@ 0x28
 801ad00:	af02      	add	r7, sp, #8
 801ad02:	6078      	str	r0, [r7, #4]
 801ad04:	6039      	str	r1, [r7, #0]
  uint32_t seconds = timeMs / 1000;
 801ad06:	683b      	ldr	r3, [r7, #0]
 801ad08:	4a19      	ldr	r2, [pc, #100]	@ (801ad70 <SysTimeFromMs+0x74>)
 801ad0a:	fba2 2303 	umull	r2, r3, r2, r3
 801ad0e:	099b      	lsrs	r3, r3, #6
 801ad10:	61fb      	str	r3, [r7, #28]
  SysTime_t sysTime = { .Seconds = seconds, .SubSeconds =  timeMs - seconds * 1000 };
 801ad12:	69fb      	ldr	r3, [r7, #28]
 801ad14:	617b      	str	r3, [r7, #20]
 801ad16:	683b      	ldr	r3, [r7, #0]
 801ad18:	b29a      	uxth	r2, r3
 801ad1a:	69fb      	ldr	r3, [r7, #28]
 801ad1c:	b29b      	uxth	r3, r3
 801ad1e:	4619      	mov	r1, r3
 801ad20:	0149      	lsls	r1, r1, #5
 801ad22:	1ac9      	subs	r1, r1, r3
 801ad24:	0089      	lsls	r1, r1, #2
 801ad26:	440b      	add	r3, r1
 801ad28:	00db      	lsls	r3, r3, #3
 801ad2a:	b29b      	uxth	r3, r3
 801ad2c:	1ad3      	subs	r3, r2, r3
 801ad2e:	b29b      	uxth	r3, r3
 801ad30:	b21b      	sxth	r3, r3
 801ad32:	833b      	strh	r3, [r7, #24]
  SysTime_t DeltaTime = { 0 };
 801ad34:	f107 030c 	add.w	r3, r7, #12
 801ad38:	2200      	movs	r2, #0
 801ad3a:	601a      	str	r2, [r3, #0]
 801ad3c:	605a      	str	r2, [r3, #4]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 801ad3e:	4b0d      	ldr	r3, [pc, #52]	@ (801ad74 <SysTimeFromMs+0x78>)
 801ad40:	68db      	ldr	r3, [r3, #12]
 801ad42:	4798      	blx	r3
 801ad44:	4603      	mov	r3, r0
 801ad46:	b21b      	sxth	r3, r3
 801ad48:	823b      	strh	r3, [r7, #16]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 801ad4a:	4b0a      	ldr	r3, [pc, #40]	@ (801ad74 <SysTimeFromMs+0x78>)
 801ad4c:	685b      	ldr	r3, [r3, #4]
 801ad4e:	4798      	blx	r3
 801ad50:	4603      	mov	r3, r0
 801ad52:	60fb      	str	r3, [r7, #12]
  return SysTimeAdd( sysTime, DeltaTime );
 801ad54:	6878      	ldr	r0, [r7, #4]
 801ad56:	693b      	ldr	r3, [r7, #16]
 801ad58:	9300      	str	r3, [sp, #0]
 801ad5a:	68fb      	ldr	r3, [r7, #12]
 801ad5c:	f107 0214 	add.w	r2, r7, #20
 801ad60:	ca06      	ldmia	r2, {r1, r2}
 801ad62:	f7ff feab 	bl	801aabc <SysTimeAdd>
}
 801ad66:	6878      	ldr	r0, [r7, #4]
 801ad68:	3720      	adds	r7, #32
 801ad6a:	46bd      	mov	sp, r7
 801ad6c:	bd80      	pop	{r7, pc}
 801ad6e:	bf00      	nop
 801ad70:	10624dd3 	.word	0x10624dd3
 801ad74:	0801f458 	.word	0x0801f458

0801ad78 <ee_skip_atoi>:
  return sc - s;
}
#endif

static int ee_skip_atoi(const char **s)
{
 801ad78:	b480      	push	{r7}
 801ad7a:	b085      	sub	sp, #20
 801ad7c:	af00      	add	r7, sp, #0
 801ad7e:	6078      	str	r0, [r7, #4]
  int i = 0;
 801ad80:	2300      	movs	r3, #0
 801ad82:	60fb      	str	r3, [r7, #12]
  while (is_digit(**s)) i = i*10 + *((*s)++) - '0';
 801ad84:	e00e      	b.n	801ada4 <ee_skip_atoi+0x2c>
 801ad86:	68fa      	ldr	r2, [r7, #12]
 801ad88:	4613      	mov	r3, r2
 801ad8a:	009b      	lsls	r3, r3, #2
 801ad8c:	4413      	add	r3, r2
 801ad8e:	005b      	lsls	r3, r3, #1
 801ad90:	4618      	mov	r0, r3
 801ad92:	687b      	ldr	r3, [r7, #4]
 801ad94:	681b      	ldr	r3, [r3, #0]
 801ad96:	1c59      	adds	r1, r3, #1
 801ad98:	687a      	ldr	r2, [r7, #4]
 801ad9a:	6011      	str	r1, [r2, #0]
 801ad9c:	781b      	ldrb	r3, [r3, #0]
 801ad9e:	4403      	add	r3, r0
 801ada0:	3b30      	subs	r3, #48	@ 0x30
 801ada2:	60fb      	str	r3, [r7, #12]
 801ada4:	687b      	ldr	r3, [r7, #4]
 801ada6:	681b      	ldr	r3, [r3, #0]
 801ada8:	781b      	ldrb	r3, [r3, #0]
 801adaa:	2b2f      	cmp	r3, #47	@ 0x2f
 801adac:	d904      	bls.n	801adb8 <ee_skip_atoi+0x40>
 801adae:	687b      	ldr	r3, [r7, #4]
 801adb0:	681b      	ldr	r3, [r3, #0]
 801adb2:	781b      	ldrb	r3, [r3, #0]
 801adb4:	2b39      	cmp	r3, #57	@ 0x39
 801adb6:	d9e6      	bls.n	801ad86 <ee_skip_atoi+0xe>
  return i;
 801adb8:	68fb      	ldr	r3, [r7, #12]
}
 801adba:	4618      	mov	r0, r3
 801adbc:	3714      	adds	r7, #20
 801adbe:	46bd      	mov	sp, r7
 801adc0:	bc80      	pop	{r7}
 801adc2:	4770      	bx	lr

0801adc4 <ee_number>:

#define ASSIGN_STR(_c)  do { *str++ = (_c); max_size--; if (max_size == 0) return str; } while (0)

static char *ee_number(char *str, int max_size, long num, int base, int size, int precision, int type)
{
 801adc4:	b480      	push	{r7}
 801adc6:	b099      	sub	sp, #100	@ 0x64
 801adc8:	af00      	add	r7, sp, #0
 801adca:	60f8      	str	r0, [r7, #12]
 801adcc:	60b9      	str	r1, [r7, #8]
 801adce:	607a      	str	r2, [r7, #4]
 801add0:	603b      	str	r3, [r7, #0]
  char c;
  char sign, tmp[66];
  char *dig = lower_digits;
 801add2:	4b71      	ldr	r3, [pc, #452]	@ (801af98 <ee_number+0x1d4>)
 801add4:	681b      	ldr	r3, [r3, #0]
 801add6:	65bb      	str	r3, [r7, #88]	@ 0x58
  int i;

  if (type & UPPERCASE)  dig = upper_digits;
 801add8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801adda:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801adde:	2b00      	cmp	r3, #0
 801ade0:	d002      	beq.n	801ade8 <ee_number+0x24>
 801ade2:	4b6e      	ldr	r3, [pc, #440]	@ (801af9c <ee_number+0x1d8>)
 801ade4:	681b      	ldr	r3, [r3, #0]
 801ade6:	65bb      	str	r3, [r7, #88]	@ 0x58
#ifdef TINY_PRINTF
#else
  if (type & LEFT) type &= ~ZEROPAD;
#endif
  if (base < 2 || base > 36) return 0;
 801ade8:	683b      	ldr	r3, [r7, #0]
 801adea:	2b01      	cmp	r3, #1
 801adec:	dd02      	ble.n	801adf4 <ee_number+0x30>
 801adee:	683b      	ldr	r3, [r7, #0]
 801adf0:	2b24      	cmp	r3, #36	@ 0x24
 801adf2:	dd01      	ble.n	801adf8 <ee_number+0x34>
 801adf4:	2300      	movs	r3, #0
 801adf6:	e0ca      	b.n	801af8e <ee_number+0x1ca>

  c = (type & ZEROPAD) ? '0' : ' ';
 801adf8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801adfa:	f003 0301 	and.w	r3, r3, #1
 801adfe:	2b00      	cmp	r3, #0
 801ae00:	d001      	beq.n	801ae06 <ee_number+0x42>
 801ae02:	2330      	movs	r3, #48	@ 0x30
 801ae04:	e000      	b.n	801ae08 <ee_number+0x44>
 801ae06:	2320      	movs	r3, #32
 801ae08:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  sign = 0;
 801ae0c:	2300      	movs	r3, #0
 801ae0e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
  if (type & SIGN)
 801ae12:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801ae14:	f003 0302 	and.w	r3, r3, #2
 801ae18:	2b00      	cmp	r3, #0
 801ae1a:	d00b      	beq.n	801ae34 <ee_number+0x70>
  {
    if (num < 0)
 801ae1c:	687b      	ldr	r3, [r7, #4]
 801ae1e:	2b00      	cmp	r3, #0
 801ae20:	da08      	bge.n	801ae34 <ee_number+0x70>
    {
      sign = '-';
 801ae22:	232d      	movs	r3, #45	@ 0x2d
 801ae24:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
      num = -num;
 801ae28:	687b      	ldr	r3, [r7, #4]
 801ae2a:	425b      	negs	r3, r3
 801ae2c:	607b      	str	r3, [r7, #4]
      size--;
 801ae2e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801ae30:	3b01      	subs	r3, #1
 801ae32:	66bb      	str	r3, [r7, #104]	@ 0x68
    else if (base == 8)
      size--;
  }
#endif

  i = 0;
 801ae34:	2300      	movs	r3, #0
 801ae36:	657b      	str	r3, [r7, #84]	@ 0x54

  if (num == 0)
 801ae38:	687b      	ldr	r3, [r7, #4]
 801ae3a:	2b00      	cmp	r3, #0
 801ae3c:	d11e      	bne.n	801ae7c <ee_number+0xb8>
    tmp[i++] = '0';
 801ae3e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801ae40:	1c5a      	adds	r2, r3, #1
 801ae42:	657a      	str	r2, [r7, #84]	@ 0x54
 801ae44:	3360      	adds	r3, #96	@ 0x60
 801ae46:	443b      	add	r3, r7
 801ae48:	2230      	movs	r2, #48	@ 0x30
 801ae4a:	f803 2c50 	strb.w	r2, [r3, #-80]
 801ae4e:	e018      	b.n	801ae82 <ee_number+0xbe>
  else
  {
    while (num != 0)
    {
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 801ae50:	687b      	ldr	r3, [r7, #4]
 801ae52:	683a      	ldr	r2, [r7, #0]
 801ae54:	fbb3 f1f2 	udiv	r1, r3, r2
 801ae58:	fb01 f202 	mul.w	r2, r1, r2
 801ae5c:	1a9b      	subs	r3, r3, r2
 801ae5e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801ae60:	441a      	add	r2, r3
 801ae62:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801ae64:	1c59      	adds	r1, r3, #1
 801ae66:	6579      	str	r1, [r7, #84]	@ 0x54
 801ae68:	7812      	ldrb	r2, [r2, #0]
 801ae6a:	3360      	adds	r3, #96	@ 0x60
 801ae6c:	443b      	add	r3, r7
 801ae6e:	f803 2c50 	strb.w	r2, [r3, #-80]
      num = ((unsigned long) num) / (unsigned) base;
 801ae72:	687a      	ldr	r2, [r7, #4]
 801ae74:	683b      	ldr	r3, [r7, #0]
 801ae76:	fbb2 f3f3 	udiv	r3, r2, r3
 801ae7a:	607b      	str	r3, [r7, #4]
    while (num != 0)
 801ae7c:	687b      	ldr	r3, [r7, #4]
 801ae7e:	2b00      	cmp	r3, #0
 801ae80:	d1e6      	bne.n	801ae50 <ee_number+0x8c>
    }
  }

  if (i > precision) precision = i;
 801ae82:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801ae84:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801ae86:	429a      	cmp	r2, r3
 801ae88:	dd01      	ble.n	801ae8e <ee_number+0xca>
 801ae8a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801ae8c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  size -= precision;
 801ae8e:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 801ae90:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801ae92:	1ad3      	subs	r3, r2, r3
 801ae94:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 801ae96:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801ae98:	f003 0301 	and.w	r3, r3, #1
 801ae9c:	2b00      	cmp	r3, #0
 801ae9e:	d112      	bne.n	801aec6 <ee_number+0x102>
 801aea0:	e00c      	b.n	801aebc <ee_number+0xf8>
 801aea2:	68fb      	ldr	r3, [r7, #12]
 801aea4:	1c5a      	adds	r2, r3, #1
 801aea6:	60fa      	str	r2, [r7, #12]
 801aea8:	2220      	movs	r2, #32
 801aeaa:	701a      	strb	r2, [r3, #0]
 801aeac:	68bb      	ldr	r3, [r7, #8]
 801aeae:	3b01      	subs	r3, #1
 801aeb0:	60bb      	str	r3, [r7, #8]
 801aeb2:	68bb      	ldr	r3, [r7, #8]
 801aeb4:	2b00      	cmp	r3, #0
 801aeb6:	d101      	bne.n	801aebc <ee_number+0xf8>
 801aeb8:	68fb      	ldr	r3, [r7, #12]
 801aeba:	e068      	b.n	801af8e <ee_number+0x1ca>
 801aebc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801aebe:	1e5a      	subs	r2, r3, #1
 801aec0:	66ba      	str	r2, [r7, #104]	@ 0x68
 801aec2:	2b00      	cmp	r3, #0
 801aec4:	dced      	bgt.n	801aea2 <ee_number+0xde>
  if (sign) ASSIGN_STR(sign);
 801aec6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801aeca:	2b00      	cmp	r3, #0
 801aecc:	d01b      	beq.n	801af06 <ee_number+0x142>
 801aece:	68fb      	ldr	r3, [r7, #12]
 801aed0:	1c5a      	adds	r2, r3, #1
 801aed2:	60fa      	str	r2, [r7, #12]
 801aed4:	f897 205f 	ldrb.w	r2, [r7, #95]	@ 0x5f
 801aed8:	701a      	strb	r2, [r3, #0]
 801aeda:	68bb      	ldr	r3, [r7, #8]
 801aedc:	3b01      	subs	r3, #1
 801aede:	60bb      	str	r3, [r7, #8]
 801aee0:	68bb      	ldr	r3, [r7, #8]
 801aee2:	2b00      	cmp	r3, #0
 801aee4:	d10f      	bne.n	801af06 <ee_number+0x142>
 801aee6:	68fb      	ldr	r3, [r7, #12]
 801aee8:	e051      	b.n	801af8e <ee_number+0x1ca>
    }
  }
#endif

#ifdef TINY_PRINTF
  while (size-- > 0) ASSIGN_STR(c);
 801aeea:	68fb      	ldr	r3, [r7, #12]
 801aeec:	1c5a      	adds	r2, r3, #1
 801aeee:	60fa      	str	r2, [r7, #12]
 801aef0:	f897 2053 	ldrb.w	r2, [r7, #83]	@ 0x53
 801aef4:	701a      	strb	r2, [r3, #0]
 801aef6:	68bb      	ldr	r3, [r7, #8]
 801aef8:	3b01      	subs	r3, #1
 801aefa:	60bb      	str	r3, [r7, #8]
 801aefc:	68bb      	ldr	r3, [r7, #8]
 801aefe:	2b00      	cmp	r3, #0
 801af00:	d101      	bne.n	801af06 <ee_number+0x142>
 801af02:	68fb      	ldr	r3, [r7, #12]
 801af04:	e043      	b.n	801af8e <ee_number+0x1ca>
 801af06:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801af08:	1e5a      	subs	r2, r3, #1
 801af0a:	66ba      	str	r2, [r7, #104]	@ 0x68
 801af0c:	2b00      	cmp	r3, #0
 801af0e:	dcec      	bgt.n	801aeea <ee_number+0x126>
#else
  if (!(type & LEFT)) while (size-- > 0) ASSIGN_STR(c);
#endif
  while (i < precision--) ASSIGN_STR('0');
 801af10:	e00c      	b.n	801af2c <ee_number+0x168>
 801af12:	68fb      	ldr	r3, [r7, #12]
 801af14:	1c5a      	adds	r2, r3, #1
 801af16:	60fa      	str	r2, [r7, #12]
 801af18:	2230      	movs	r2, #48	@ 0x30
 801af1a:	701a      	strb	r2, [r3, #0]
 801af1c:	68bb      	ldr	r3, [r7, #8]
 801af1e:	3b01      	subs	r3, #1
 801af20:	60bb      	str	r3, [r7, #8]
 801af22:	68bb      	ldr	r3, [r7, #8]
 801af24:	2b00      	cmp	r3, #0
 801af26:	d101      	bne.n	801af2c <ee_number+0x168>
 801af28:	68fb      	ldr	r3, [r7, #12]
 801af2a:	e030      	b.n	801af8e <ee_number+0x1ca>
 801af2c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801af2e:	1e5a      	subs	r2, r3, #1
 801af30:	66fa      	str	r2, [r7, #108]	@ 0x6c
 801af32:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801af34:	429a      	cmp	r2, r3
 801af36:	dbec      	blt.n	801af12 <ee_number+0x14e>
  while (i-- > 0) ASSIGN_STR(tmp[i]);
 801af38:	e010      	b.n	801af5c <ee_number+0x198>
 801af3a:	68fb      	ldr	r3, [r7, #12]
 801af3c:	1c5a      	adds	r2, r3, #1
 801af3e:	60fa      	str	r2, [r7, #12]
 801af40:	f107 0110 	add.w	r1, r7, #16
 801af44:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801af46:	440a      	add	r2, r1
 801af48:	7812      	ldrb	r2, [r2, #0]
 801af4a:	701a      	strb	r2, [r3, #0]
 801af4c:	68bb      	ldr	r3, [r7, #8]
 801af4e:	3b01      	subs	r3, #1
 801af50:	60bb      	str	r3, [r7, #8]
 801af52:	68bb      	ldr	r3, [r7, #8]
 801af54:	2b00      	cmp	r3, #0
 801af56:	d101      	bne.n	801af5c <ee_number+0x198>
 801af58:	68fb      	ldr	r3, [r7, #12]
 801af5a:	e018      	b.n	801af8e <ee_number+0x1ca>
 801af5c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801af5e:	1e5a      	subs	r2, r3, #1
 801af60:	657a      	str	r2, [r7, #84]	@ 0x54
 801af62:	2b00      	cmp	r3, #0
 801af64:	dce9      	bgt.n	801af3a <ee_number+0x176>
  while (size-- > 0) ASSIGN_STR(' ');
 801af66:	e00c      	b.n	801af82 <ee_number+0x1be>
 801af68:	68fb      	ldr	r3, [r7, #12]
 801af6a:	1c5a      	adds	r2, r3, #1
 801af6c:	60fa      	str	r2, [r7, #12]
 801af6e:	2220      	movs	r2, #32
 801af70:	701a      	strb	r2, [r3, #0]
 801af72:	68bb      	ldr	r3, [r7, #8]
 801af74:	3b01      	subs	r3, #1
 801af76:	60bb      	str	r3, [r7, #8]
 801af78:	68bb      	ldr	r3, [r7, #8]
 801af7a:	2b00      	cmp	r3, #0
 801af7c:	d101      	bne.n	801af82 <ee_number+0x1be>
 801af7e:	68fb      	ldr	r3, [r7, #12]
 801af80:	e005      	b.n	801af8e <ee_number+0x1ca>
 801af82:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801af84:	1e5a      	subs	r2, r3, #1
 801af86:	66ba      	str	r2, [r7, #104]	@ 0x68
 801af88:	2b00      	cmp	r3, #0
 801af8a:	dced      	bgt.n	801af68 <ee_number+0x1a4>

  return str;
 801af8c:	68fb      	ldr	r3, [r7, #12]
}
 801af8e:	4618      	mov	r0, r3
 801af90:	3764      	adds	r7, #100	@ 0x64
 801af92:	46bd      	mov	sp, r7
 801af94:	bc80      	pop	{r7}
 801af96:	4770      	bx	lr
 801af98:	20000148 	.word	0x20000148
 801af9c:	2000014c 	.word	0x2000014c

0801afa0 <tiny_vsnprintf_like>:

#define CHECK_STR_SIZE(_buf, _str, _size) \
  if ((((_str) - (_buf)) >= ((_size)-1))) { break; }

int tiny_vsnprintf_like(char *buf, const int size, const char *fmt, va_list args)
{
 801afa0:	b580      	push	{r7, lr}
 801afa2:	b092      	sub	sp, #72	@ 0x48
 801afa4:	af04      	add	r7, sp, #16
 801afa6:	60f8      	str	r0, [r7, #12]
 801afa8:	60b9      	str	r1, [r7, #8]
 801afaa:	607a      	str	r2, [r7, #4]
 801afac:	603b      	str	r3, [r7, #0]

  int field_width;      // Width of output field
  int precision;        // Min. # of digits for integers; max number of chars for from string
  int qualifier;        // 'h', 'l', or 'L' for integer fields

  if (size <= 0)
 801afae:	68bb      	ldr	r3, [r7, #8]
 801afb0:	2b00      	cmp	r3, #0
 801afb2:	dc01      	bgt.n	801afb8 <tiny_vsnprintf_like+0x18>
  {
    return 0;
 801afb4:	2300      	movs	r3, #0
 801afb6:	e13e      	b.n	801b236 <tiny_vsnprintf_like+0x296>
  }

  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 801afb8:	68fb      	ldr	r3, [r7, #12]
 801afba:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801afbc:	e128      	b.n	801b210 <tiny_vsnprintf_like+0x270>
  {
    CHECK_STR_SIZE(buf, str, size);
 801afbe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801afc0:	68fb      	ldr	r3, [r7, #12]
 801afc2:	1ad2      	subs	r2, r2, r3
 801afc4:	68bb      	ldr	r3, [r7, #8]
 801afc6:	3b01      	subs	r3, #1
 801afc8:	429a      	cmp	r2, r3
 801afca:	f280 812e 	bge.w	801b22a <tiny_vsnprintf_like+0x28a>

    if (*fmt != '%')
 801afce:	687b      	ldr	r3, [r7, #4]
 801afd0:	781b      	ldrb	r3, [r3, #0]
 801afd2:	2b25      	cmp	r3, #37	@ 0x25
 801afd4:	d006      	beq.n	801afe4 <tiny_vsnprintf_like+0x44>
    {
      *str++ = *fmt;
 801afd6:	687a      	ldr	r2, [r7, #4]
 801afd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801afda:	1c59      	adds	r1, r3, #1
 801afdc:	62f9      	str	r1, [r7, #44]	@ 0x2c
 801afde:	7812      	ldrb	r2, [r2, #0]
 801afe0:	701a      	strb	r2, [r3, #0]
      continue;
 801afe2:	e112      	b.n	801b20a <tiny_vsnprintf_like+0x26a>
    }

    // Process flags
    flags = 0;
 801afe4:	2300      	movs	r3, #0
 801afe6:	623b      	str	r3, [r7, #32]
#ifdef TINY_PRINTF
    /* Support %0, but not %-, %+, %space and %# */
    fmt++;
 801afe8:	687b      	ldr	r3, [r7, #4]
 801afea:	3301      	adds	r3, #1
 801afec:	607b      	str	r3, [r7, #4]
    if (*fmt == '0')
 801afee:	687b      	ldr	r3, [r7, #4]
 801aff0:	781b      	ldrb	r3, [r3, #0]
 801aff2:	2b30      	cmp	r3, #48	@ 0x30
 801aff4:	d103      	bne.n	801affe <tiny_vsnprintf_like+0x5e>
    {
      flags |= ZEROPAD;
 801aff6:	6a3b      	ldr	r3, [r7, #32]
 801aff8:	f043 0301 	orr.w	r3, r3, #1
 801affc:	623b      	str	r3, [r7, #32]
      case '0': flags |= ZEROPAD; goto repeat;
    }
#endif

    // Get field width
    field_width = -1;
 801affe:	f04f 33ff 	mov.w	r3, #4294967295
 801b002:	61fb      	str	r3, [r7, #28]
    if (is_digit(*fmt))
 801b004:	687b      	ldr	r3, [r7, #4]
 801b006:	781b      	ldrb	r3, [r3, #0]
 801b008:	2b2f      	cmp	r3, #47	@ 0x2f
 801b00a:	d908      	bls.n	801b01e <tiny_vsnprintf_like+0x7e>
 801b00c:	687b      	ldr	r3, [r7, #4]
 801b00e:	781b      	ldrb	r3, [r3, #0]
 801b010:	2b39      	cmp	r3, #57	@ 0x39
 801b012:	d804      	bhi.n	801b01e <tiny_vsnprintf_like+0x7e>
      field_width = ee_skip_atoi(&fmt);
 801b014:	1d3b      	adds	r3, r7, #4
 801b016:	4618      	mov	r0, r3
 801b018:	f7ff feae 	bl	801ad78 <ee_skip_atoi>
 801b01c:	61f8      	str	r0, [r7, #28]
      }
    }
#endif

    // Get the precision
    precision = -1;
 801b01e:	f04f 33ff 	mov.w	r3, #4294967295
 801b022:	61bb      	str	r3, [r7, #24]
      if (precision < 0) precision = 0;
    }
#endif

    // Get the conversion qualifier
    qualifier = -1;
 801b024:	f04f 33ff 	mov.w	r3, #4294967295
 801b028:	617b      	str	r3, [r7, #20]
      fmt++;
    }
#endif

    // Default base
    base = 10;
 801b02a:	230a      	movs	r3, #10
 801b02c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (*fmt)
 801b02e:	687b      	ldr	r3, [r7, #4]
 801b030:	781b      	ldrb	r3, [r3, #0]
 801b032:	3b58      	subs	r3, #88	@ 0x58
 801b034:	2b20      	cmp	r3, #32
 801b036:	f200 8094 	bhi.w	801b162 <tiny_vsnprintf_like+0x1c2>
 801b03a:	a201      	add	r2, pc, #4	@ (adr r2, 801b040 <tiny_vsnprintf_like+0xa0>)
 801b03c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b040:	0801b14b 	.word	0x0801b14b
 801b044:	0801b163 	.word	0x0801b163
 801b048:	0801b163 	.word	0x0801b163
 801b04c:	0801b163 	.word	0x0801b163
 801b050:	0801b163 	.word	0x0801b163
 801b054:	0801b163 	.word	0x0801b163
 801b058:	0801b163 	.word	0x0801b163
 801b05c:	0801b163 	.word	0x0801b163
 801b060:	0801b163 	.word	0x0801b163
 801b064:	0801b163 	.word	0x0801b163
 801b068:	0801b163 	.word	0x0801b163
 801b06c:	0801b0cf 	.word	0x0801b0cf
 801b070:	0801b159 	.word	0x0801b159
 801b074:	0801b163 	.word	0x0801b163
 801b078:	0801b163 	.word	0x0801b163
 801b07c:	0801b163 	.word	0x0801b163
 801b080:	0801b163 	.word	0x0801b163
 801b084:	0801b159 	.word	0x0801b159
 801b088:	0801b163 	.word	0x0801b163
 801b08c:	0801b163 	.word	0x0801b163
 801b090:	0801b163 	.word	0x0801b163
 801b094:	0801b163 	.word	0x0801b163
 801b098:	0801b163 	.word	0x0801b163
 801b09c:	0801b163 	.word	0x0801b163
 801b0a0:	0801b163 	.word	0x0801b163
 801b0a4:	0801b163 	.word	0x0801b163
 801b0a8:	0801b163 	.word	0x0801b163
 801b0ac:	0801b0ef 	.word	0x0801b0ef
 801b0b0:	0801b163 	.word	0x0801b163
 801b0b4:	0801b1af 	.word	0x0801b1af
 801b0b8:	0801b163 	.word	0x0801b163
 801b0bc:	0801b163 	.word	0x0801b163
 801b0c0:	0801b153 	.word	0x0801b153
      case 'c':
#ifdef TINY_PRINTF
#else
        if (!(flags & LEFT))
#endif
          while (--field_width > 0) *str++ = ' ';
 801b0c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b0c6:	1c5a      	adds	r2, r3, #1
 801b0c8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801b0ca:	2220      	movs	r2, #32
 801b0cc:	701a      	strb	r2, [r3, #0]
 801b0ce:	69fb      	ldr	r3, [r7, #28]
 801b0d0:	3b01      	subs	r3, #1
 801b0d2:	61fb      	str	r3, [r7, #28]
 801b0d4:	69fb      	ldr	r3, [r7, #28]
 801b0d6:	2b00      	cmp	r3, #0
 801b0d8:	dcf4      	bgt.n	801b0c4 <tiny_vsnprintf_like+0x124>
        *str++ = (unsigned char) va_arg(args, int);
 801b0da:	683b      	ldr	r3, [r7, #0]
 801b0dc:	1d1a      	adds	r2, r3, #4
 801b0de:	603a      	str	r2, [r7, #0]
 801b0e0:	6819      	ldr	r1, [r3, #0]
 801b0e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b0e4:	1c5a      	adds	r2, r3, #1
 801b0e6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801b0e8:	b2ca      	uxtb	r2, r1
 801b0ea:	701a      	strb	r2, [r3, #0]
#ifdef TINY_PRINTF
#else
        while (--field_width > 0) *str++ = ' ';
#endif
        continue;
 801b0ec:	e08d      	b.n	801b20a <tiny_vsnprintf_like+0x26a>

      case 's':
        s = va_arg(args, char *);
 801b0ee:	683b      	ldr	r3, [r7, #0]
 801b0f0:	1d1a      	adds	r2, r3, #4
 801b0f2:	603a      	str	r2, [r7, #0]
 801b0f4:	681b      	ldr	r3, [r3, #0]
 801b0f6:	627b      	str	r3, [r7, #36]	@ 0x24
        if (!s) s = "<NULL>";
 801b0f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b0fa:	2b00      	cmp	r3, #0
 801b0fc:	d101      	bne.n	801b102 <tiny_vsnprintf_like+0x162>
 801b0fe:	4b50      	ldr	r3, [pc, #320]	@ (801b240 <tiny_vsnprintf_like+0x2a0>)
 801b100:	627b      	str	r3, [r7, #36]	@ 0x24
#ifdef TINY_PRINTF
        len = strlen(s);
 801b102:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801b104:	f7e5 f88c 	bl	8000220 <strlen>
 801b108:	4603      	mov	r3, r0
 801b10a:	613b      	str	r3, [r7, #16]
#else
        len = strnlen(s, precision);
        if (!(flags & LEFT))
#endif
          while (len < field_width--) *str++ = ' ';
 801b10c:	e004      	b.n	801b118 <tiny_vsnprintf_like+0x178>
 801b10e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b110:	1c5a      	adds	r2, r3, #1
 801b112:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801b114:	2220      	movs	r2, #32
 801b116:	701a      	strb	r2, [r3, #0]
 801b118:	69fb      	ldr	r3, [r7, #28]
 801b11a:	1e5a      	subs	r2, r3, #1
 801b11c:	61fa      	str	r2, [r7, #28]
 801b11e:	693a      	ldr	r2, [r7, #16]
 801b120:	429a      	cmp	r2, r3
 801b122:	dbf4      	blt.n	801b10e <tiny_vsnprintf_like+0x16e>
        for (i = 0; i < len; ++i) *str++ = *s++;
 801b124:	2300      	movs	r3, #0
 801b126:	62bb      	str	r3, [r7, #40]	@ 0x28
 801b128:	e00a      	b.n	801b140 <tiny_vsnprintf_like+0x1a0>
 801b12a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801b12c:	1c53      	adds	r3, r2, #1
 801b12e:	627b      	str	r3, [r7, #36]	@ 0x24
 801b130:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b132:	1c59      	adds	r1, r3, #1
 801b134:	62f9      	str	r1, [r7, #44]	@ 0x2c
 801b136:	7812      	ldrb	r2, [r2, #0]
 801b138:	701a      	strb	r2, [r3, #0]
 801b13a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b13c:	3301      	adds	r3, #1
 801b13e:	62bb      	str	r3, [r7, #40]	@ 0x28
 801b140:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801b142:	693b      	ldr	r3, [r7, #16]
 801b144:	429a      	cmp	r2, r3
 801b146:	dbf0      	blt.n	801b12a <tiny_vsnprintf_like+0x18a>
#ifdef TINY_PRINTF
#else
        while (len < field_width--) *str++ = ' ';
#endif
        continue;
 801b148:	e05f      	b.n	801b20a <tiny_vsnprintf_like+0x26a>
        base = 8;
        break;
#endif

      case 'X':
        flags |= UPPERCASE;
 801b14a:	6a3b      	ldr	r3, [r7, #32]
 801b14c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801b150:	623b      	str	r3, [r7, #32]

      case 'x':
        base = 16;
 801b152:	2310      	movs	r3, #16
 801b154:	633b      	str	r3, [r7, #48]	@ 0x30
        break;
 801b156:	e02b      	b.n	801b1b0 <tiny_vsnprintf_like+0x210>

      case 'd':
      case 'i':
        flags |= SIGN;
 801b158:	6a3b      	ldr	r3, [r7, #32]
 801b15a:	f043 0302 	orr.w	r3, r3, #2
 801b15e:	623b      	str	r3, [r7, #32]

      case 'u':
        break;
 801b160:	e025      	b.n	801b1ae <tiny_vsnprintf_like+0x20e>
        continue;

#endif

      default:
        if (*fmt != '%') *str++ = '%';
 801b162:	687b      	ldr	r3, [r7, #4]
 801b164:	781b      	ldrb	r3, [r3, #0]
 801b166:	2b25      	cmp	r3, #37	@ 0x25
 801b168:	d004      	beq.n	801b174 <tiny_vsnprintf_like+0x1d4>
 801b16a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b16c:	1c5a      	adds	r2, r3, #1
 801b16e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801b170:	2225      	movs	r2, #37	@ 0x25
 801b172:	701a      	strb	r2, [r3, #0]
        CHECK_STR_SIZE(buf, str, size);
 801b174:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801b176:	68fb      	ldr	r3, [r7, #12]
 801b178:	1ad2      	subs	r2, r2, r3
 801b17a:	68bb      	ldr	r3, [r7, #8]
 801b17c:	3b01      	subs	r3, #1
 801b17e:	429a      	cmp	r2, r3
 801b180:	da16      	bge.n	801b1b0 <tiny_vsnprintf_like+0x210>
        if (*fmt)
 801b182:	687b      	ldr	r3, [r7, #4]
 801b184:	781b      	ldrb	r3, [r3, #0]
 801b186:	2b00      	cmp	r3, #0
 801b188:	d006      	beq.n	801b198 <tiny_vsnprintf_like+0x1f8>
          *str++ = *fmt;
 801b18a:	687a      	ldr	r2, [r7, #4]
 801b18c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b18e:	1c59      	adds	r1, r3, #1
 801b190:	62f9      	str	r1, [r7, #44]	@ 0x2c
 801b192:	7812      	ldrb	r2, [r2, #0]
 801b194:	701a      	strb	r2, [r3, #0]
 801b196:	e002      	b.n	801b19e <tiny_vsnprintf_like+0x1fe>
        else
          --fmt;
 801b198:	687b      	ldr	r3, [r7, #4]
 801b19a:	3b01      	subs	r3, #1
 801b19c:	607b      	str	r3, [r7, #4]
        CHECK_STR_SIZE(buf, str, size);
 801b19e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801b1a0:	68fb      	ldr	r3, [r7, #12]
 801b1a2:	1ad2      	subs	r2, r2, r3
 801b1a4:	68bb      	ldr	r3, [r7, #8]
 801b1a6:	3b01      	subs	r3, #1
 801b1a8:	429a      	cmp	r2, r3
 801b1aa:	db2d      	blt.n	801b208 <tiny_vsnprintf_like+0x268>
 801b1ac:	e000      	b.n	801b1b0 <tiny_vsnprintf_like+0x210>
        break;
 801b1ae:	bf00      	nop
        continue;
    }

    if (qualifier == 'l')
 801b1b0:	697b      	ldr	r3, [r7, #20]
 801b1b2:	2b6c      	cmp	r3, #108	@ 0x6c
 801b1b4:	d105      	bne.n	801b1c2 <tiny_vsnprintf_like+0x222>
      num = va_arg(args, unsigned long);
 801b1b6:	683b      	ldr	r3, [r7, #0]
 801b1b8:	1d1a      	adds	r2, r3, #4
 801b1ba:	603a      	str	r2, [r7, #0]
 801b1bc:	681b      	ldr	r3, [r3, #0]
 801b1be:	637b      	str	r3, [r7, #52]	@ 0x34
 801b1c0:	e00f      	b.n	801b1e2 <tiny_vsnprintf_like+0x242>
    else if (flags & SIGN)
 801b1c2:	6a3b      	ldr	r3, [r7, #32]
 801b1c4:	f003 0302 	and.w	r3, r3, #2
 801b1c8:	2b00      	cmp	r3, #0
 801b1ca:	d005      	beq.n	801b1d8 <tiny_vsnprintf_like+0x238>
      num = va_arg(args, int);
 801b1cc:	683b      	ldr	r3, [r7, #0]
 801b1ce:	1d1a      	adds	r2, r3, #4
 801b1d0:	603a      	str	r2, [r7, #0]
 801b1d2:	681b      	ldr	r3, [r3, #0]
 801b1d4:	637b      	str	r3, [r7, #52]	@ 0x34
 801b1d6:	e004      	b.n	801b1e2 <tiny_vsnprintf_like+0x242>
    else
      num = va_arg(args, unsigned int);
 801b1d8:	683b      	ldr	r3, [r7, #0]
 801b1da:	1d1a      	adds	r2, r3, #4
 801b1dc:	603a      	str	r2, [r7, #0]
 801b1de:	681b      	ldr	r3, [r3, #0]
 801b1e0:	637b      	str	r3, [r7, #52]	@ 0x34

    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 801b1e2:	68bb      	ldr	r3, [r7, #8]
 801b1e4:	1e5a      	subs	r2, r3, #1
 801b1e6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801b1e8:	68fb      	ldr	r3, [r7, #12]
 801b1ea:	1acb      	subs	r3, r1, r3
 801b1ec:	1ad1      	subs	r1, r2, r3
 801b1ee:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801b1f0:	6a3b      	ldr	r3, [r7, #32]
 801b1f2:	9302      	str	r3, [sp, #8]
 801b1f4:	69bb      	ldr	r3, [r7, #24]
 801b1f6:	9301      	str	r3, [sp, #4]
 801b1f8:	69fb      	ldr	r3, [r7, #28]
 801b1fa:	9300      	str	r3, [sp, #0]
 801b1fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b1fe:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801b200:	f7ff fde0 	bl	801adc4 <ee_number>
 801b204:	62f8      	str	r0, [r7, #44]	@ 0x2c
 801b206:	e000      	b.n	801b20a <tiny_vsnprintf_like+0x26a>
        continue;
 801b208:	bf00      	nop
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 801b20a:	687b      	ldr	r3, [r7, #4]
 801b20c:	3301      	adds	r3, #1
 801b20e:	607b      	str	r3, [r7, #4]
 801b210:	687b      	ldr	r3, [r7, #4]
 801b212:	781b      	ldrb	r3, [r3, #0]
 801b214:	2b00      	cmp	r3, #0
 801b216:	f47f aed2 	bne.w	801afbe <tiny_vsnprintf_like+0x1e>
 801b21a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801b21c:	68fb      	ldr	r3, [r7, #12]
 801b21e:	1ad2      	subs	r2, r2, r3
 801b220:	68bb      	ldr	r3, [r7, #8]
 801b222:	3b01      	subs	r3, #1
 801b224:	429a      	cmp	r2, r3
 801b226:	f6bf aeca 	bge.w	801afbe <tiny_vsnprintf_like+0x1e>
  }

  *str = '\0';
 801b22a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b22c:	2200      	movs	r2, #0
 801b22e:	701a      	strb	r2, [r3, #0]
  return str - buf;
 801b230:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801b232:	68fb      	ldr	r3, [r7, #12]
 801b234:	1ad3      	subs	r3, r2, r3
}
 801b236:	4618      	mov	r0, r3
 801b238:	3738      	adds	r7, #56	@ 0x38
 801b23a:	46bd      	mov	sp, r7
 801b23c:	bd80      	pop	{r7, pc}
 801b23e:	bf00      	nop
 801b240:	0801f36c 	.word	0x0801f36c

0801b244 <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 801b244:	b580      	push	{r7, lr}
 801b246:	b090      	sub	sp, #64	@ 0x40
 801b248:	af00      	add	r7, sp, #0
 801b24a:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 801b24c:	4b73      	ldr	r3, [pc, #460]	@ (801b41c <UTIL_SEQ_Run+0x1d8>)
 801b24e:	681b      	ldr	r3, [r3, #0]
 801b250:	62bb      	str	r3, [r7, #40]	@ 0x28
  SuperMask &= Mask_bm;
 801b252:	4b72      	ldr	r3, [pc, #456]	@ (801b41c <UTIL_SEQ_Run+0x1d8>)
 801b254:	681a      	ldr	r2, [r3, #0]
 801b256:	687b      	ldr	r3, [r7, #4]
 801b258:	4013      	ands	r3, r2
 801b25a:	4a70      	ldr	r2, [pc, #448]	@ (801b41c <UTIL_SEQ_Run+0x1d8>)
 801b25c:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 801b25e:	4b70      	ldr	r3, [pc, #448]	@ (801b420 <UTIL_SEQ_Run+0x1dc>)
 801b260:	681b      	ldr	r3, [r3, #0]
 801b262:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 801b264:	4b6f      	ldr	r3, [pc, #444]	@ (801b424 <UTIL_SEQ_Run+0x1e0>)
 801b266:	681b      	ldr	r3, [r3, #0]
 801b268:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 801b26a:	4b6f      	ldr	r3, [pc, #444]	@ (801b428 <UTIL_SEQ_Run+0x1e4>)
 801b26c:	681b      	ldr	r3, [r3, #0]
 801b26e:	633b      	str	r3, [r7, #48]	@ 0x30
  local_evtwaited =  EvtWaited;
 801b270:	4b6e      	ldr	r3, [pc, #440]	@ (801b42c <UTIL_SEQ_Run+0x1e8>)
 801b272:	681b      	ldr	r3, [r3, #0]
 801b274:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 801b276:	e08d      	b.n	801b394 <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 801b278:	2300      	movs	r3, #0
 801b27a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 801b27c:	e002      	b.n	801b284 <UTIL_SEQ_Run+0x40>
    {
      counter++;
 801b27e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801b280:	3301      	adds	r3, #1
 801b282:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 801b284:	4a6a      	ldr	r2, [pc, #424]	@ (801b430 <UTIL_SEQ_Run+0x1ec>)
 801b286:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801b288:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801b28c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b28e:	401a      	ands	r2, r3
 801b290:	4b62      	ldr	r3, [pc, #392]	@ (801b41c <UTIL_SEQ_Run+0x1d8>)
 801b292:	681b      	ldr	r3, [r3, #0]
 801b294:	4013      	ands	r3, r2
 801b296:	2b00      	cmp	r3, #0
 801b298:	d0f1      	beq.n	801b27e <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 801b29a:	4a65      	ldr	r2, [pc, #404]	@ (801b430 <UTIL_SEQ_Run+0x1ec>)
 801b29c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801b29e:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801b2a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b2a4:	401a      	ands	r2, r3
 801b2a6:	4b5d      	ldr	r3, [pc, #372]	@ (801b41c <UTIL_SEQ_Run+0x1d8>)
 801b2a8:	681b      	ldr	r3, [r3, #0]
 801b2aa:	4013      	ands	r3, r2
 801b2ac:	627b      	str	r3, [r7, #36]	@ 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 801b2ae:	4a60      	ldr	r2, [pc, #384]	@ (801b430 <UTIL_SEQ_Run+0x1ec>)
 801b2b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801b2b2:	00db      	lsls	r3, r3, #3
 801b2b4:	4413      	add	r3, r2
 801b2b6:	685a      	ldr	r2, [r3, #4]
 801b2b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b2ba:	4013      	ands	r3, r2
 801b2bc:	2b00      	cmp	r3, #0
 801b2be:	d106      	bne.n	801b2ce <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 801b2c0:	4a5b      	ldr	r2, [pc, #364]	@ (801b430 <UTIL_SEQ_Run+0x1ec>)
 801b2c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801b2c4:	00db      	lsls	r3, r3, #3
 801b2c6:	4413      	add	r3, r2
 801b2c8:	f04f 32ff 	mov.w	r2, #4294967295
 801b2cc:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 801b2ce:	4a58      	ldr	r2, [pc, #352]	@ (801b430 <UTIL_SEQ_Run+0x1ec>)
 801b2d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801b2d2:	00db      	lsls	r3, r3, #3
 801b2d4:	4413      	add	r3, r2
 801b2d6:	685a      	ldr	r2, [r3, #4]
 801b2d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b2da:	4013      	ands	r3, r2
 801b2dc:	4618      	mov	r0, r3
 801b2de:	f000 f907 	bl	801b4f0 <SEQ_BitPosition>
 801b2e2:	4603      	mov	r3, r0
 801b2e4:	461a      	mov	r2, r3
 801b2e6:	4b53      	ldr	r3, [pc, #332]	@ (801b434 <UTIL_SEQ_Run+0x1f0>)
 801b2e8:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 801b2ea:	4a51      	ldr	r2, [pc, #324]	@ (801b430 <UTIL_SEQ_Run+0x1ec>)
 801b2ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801b2ee:	00db      	lsls	r3, r3, #3
 801b2f0:	4413      	add	r3, r2
 801b2f2:	685a      	ldr	r2, [r3, #4]
 801b2f4:	4b4f      	ldr	r3, [pc, #316]	@ (801b434 <UTIL_SEQ_Run+0x1f0>)
 801b2f6:	681b      	ldr	r3, [r3, #0]
 801b2f8:	2101      	movs	r1, #1
 801b2fa:	fa01 f303 	lsl.w	r3, r1, r3
 801b2fe:	43db      	mvns	r3, r3
 801b300:	401a      	ands	r2, r3
 801b302:	494b      	ldr	r1, [pc, #300]	@ (801b430 <UTIL_SEQ_Run+0x1ec>)
 801b304:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801b306:	00db      	lsls	r3, r3, #3
 801b308:	440b      	add	r3, r1
 801b30a:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b30c:	f3ef 8310 	mrs	r3, PRIMASK
 801b310:	61bb      	str	r3, [r7, #24]
  return(result);
 801b312:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801b314:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 801b316:	b672      	cpsid	i
}
 801b318:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 801b31a:	4b46      	ldr	r3, [pc, #280]	@ (801b434 <UTIL_SEQ_Run+0x1f0>)
 801b31c:	681b      	ldr	r3, [r3, #0]
 801b31e:	2201      	movs	r2, #1
 801b320:	fa02 f303 	lsl.w	r3, r2, r3
 801b324:	43da      	mvns	r2, r3
 801b326:	4b3e      	ldr	r3, [pc, #248]	@ (801b420 <UTIL_SEQ_Run+0x1dc>)
 801b328:	681b      	ldr	r3, [r3, #0]
 801b32a:	4013      	ands	r3, r2
 801b32c:	4a3c      	ldr	r2, [pc, #240]	@ (801b420 <UTIL_SEQ_Run+0x1dc>)
 801b32e:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 801b330:	2301      	movs	r3, #1
 801b332:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801b334:	e013      	b.n	801b35e <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 801b336:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801b338:	3b01      	subs	r3, #1
 801b33a:	4a3d      	ldr	r2, [pc, #244]	@ (801b430 <UTIL_SEQ_Run+0x1ec>)
 801b33c:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 801b340:	4b3c      	ldr	r3, [pc, #240]	@ (801b434 <UTIL_SEQ_Run+0x1f0>)
 801b342:	681b      	ldr	r3, [r3, #0]
 801b344:	2201      	movs	r2, #1
 801b346:	fa02 f303 	lsl.w	r3, r2, r3
 801b34a:	43da      	mvns	r2, r3
 801b34c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801b34e:	3b01      	subs	r3, #1
 801b350:	400a      	ands	r2, r1
 801b352:	4937      	ldr	r1, [pc, #220]	@ (801b430 <UTIL_SEQ_Run+0x1ec>)
 801b354:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 801b358:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801b35a:	3b01      	subs	r3, #1
 801b35c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801b35e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801b360:	2b00      	cmp	r3, #0
 801b362:	d1e8      	bne.n	801b336 <UTIL_SEQ_Run+0xf2>
 801b364:	6a3b      	ldr	r3, [r7, #32]
 801b366:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b368:	697b      	ldr	r3, [r7, #20]
 801b36a:	f383 8810 	msr	PRIMASK, r3
}
 801b36e:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 801b370:	4b30      	ldr	r3, [pc, #192]	@ (801b434 <UTIL_SEQ_Run+0x1f0>)
 801b372:	681b      	ldr	r3, [r3, #0]
 801b374:	4a30      	ldr	r2, [pc, #192]	@ (801b438 <UTIL_SEQ_Run+0x1f4>)
 801b376:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801b37a:	4798      	blx	r3

    local_taskset = TaskSet;
 801b37c:	4b28      	ldr	r3, [pc, #160]	@ (801b420 <UTIL_SEQ_Run+0x1dc>)
 801b37e:	681b      	ldr	r3, [r3, #0]
 801b380:	63bb      	str	r3, [r7, #56]	@ 0x38
    local_evtset = EvtSet;
 801b382:	4b28      	ldr	r3, [pc, #160]	@ (801b424 <UTIL_SEQ_Run+0x1e0>)
 801b384:	681b      	ldr	r3, [r3, #0]
 801b386:	637b      	str	r3, [r7, #52]	@ 0x34
    local_taskmask = TaskMask;
 801b388:	4b27      	ldr	r3, [pc, #156]	@ (801b428 <UTIL_SEQ_Run+0x1e4>)
 801b38a:	681b      	ldr	r3, [r3, #0]
 801b38c:	633b      	str	r3, [r7, #48]	@ 0x30
    local_evtwaited = EvtWaited;
 801b38e:	4b27      	ldr	r3, [pc, #156]	@ (801b42c <UTIL_SEQ_Run+0x1e8>)
 801b390:	681b      	ldr	r3, [r3, #0]
 801b392:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 801b394:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801b396:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b398:	401a      	ands	r2, r3
 801b39a:	4b20      	ldr	r3, [pc, #128]	@ (801b41c <UTIL_SEQ_Run+0x1d8>)
 801b39c:	681b      	ldr	r3, [r3, #0]
 801b39e:	4013      	ands	r3, r2
 801b3a0:	2b00      	cmp	r3, #0
 801b3a2:	d005      	beq.n	801b3b0 <UTIL_SEQ_Run+0x16c>
 801b3a4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801b3a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b3a8:	4013      	ands	r3, r2
 801b3aa:	2b00      	cmp	r3, #0
 801b3ac:	f43f af64 	beq.w	801b278 <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 801b3b0:	4b20      	ldr	r3, [pc, #128]	@ (801b434 <UTIL_SEQ_Run+0x1f0>)
 801b3b2:	f04f 32ff 	mov.w	r2, #4294967295
 801b3b6:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 801b3b8:	f000 f88e 	bl	801b4d8 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b3bc:	f3ef 8310 	mrs	r3, PRIMASK
 801b3c0:	613b      	str	r3, [r7, #16]
  return(result);
 801b3c2:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 801b3c4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801b3c6:	b672      	cpsid	i
}
 801b3c8:	bf00      	nop
  local_taskset = TaskSet;
 801b3ca:	4b15      	ldr	r3, [pc, #84]	@ (801b420 <UTIL_SEQ_Run+0x1dc>)
 801b3cc:	681b      	ldr	r3, [r3, #0]
 801b3ce:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 801b3d0:	4b14      	ldr	r3, [pc, #80]	@ (801b424 <UTIL_SEQ_Run+0x1e0>)
 801b3d2:	681b      	ldr	r3, [r3, #0]
 801b3d4:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 801b3d6:	4b14      	ldr	r3, [pc, #80]	@ (801b428 <UTIL_SEQ_Run+0x1e4>)
 801b3d8:	681b      	ldr	r3, [r3, #0]
 801b3da:	633b      	str	r3, [r7, #48]	@ 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 801b3dc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801b3de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b3e0:	401a      	ands	r2, r3
 801b3e2:	4b0e      	ldr	r3, [pc, #56]	@ (801b41c <UTIL_SEQ_Run+0x1d8>)
 801b3e4:	681b      	ldr	r3, [r3, #0]
 801b3e6:	4013      	ands	r3, r2
 801b3e8:	2b00      	cmp	r3, #0
 801b3ea:	d107      	bne.n	801b3fc <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 801b3ec:	4b0f      	ldr	r3, [pc, #60]	@ (801b42c <UTIL_SEQ_Run+0x1e8>)
 801b3ee:	681a      	ldr	r2, [r3, #0]
 801b3f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801b3f2:	4013      	ands	r3, r2
 801b3f4:	2b00      	cmp	r3, #0
 801b3f6:	d101      	bne.n	801b3fc <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 801b3f8:	f7e6 fdcc 	bl	8001f94 <UTIL_SEQ_Idle>
 801b3fc:	69fb      	ldr	r3, [r7, #28]
 801b3fe:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b400:	68fb      	ldr	r3, [r7, #12]
 801b402:	f383 8810 	msr	PRIMASK, r3
}
 801b406:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 801b408:	f000 f86c 	bl	801b4e4 <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 801b40c:	4a03      	ldr	r2, [pc, #12]	@ (801b41c <UTIL_SEQ_Run+0x1d8>)
 801b40e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b410:	6013      	str	r3, [r2, #0]

  return;
 801b412:	bf00      	nop
}
 801b414:	3740      	adds	r7, #64	@ 0x40
 801b416:	46bd      	mov	sp, r7
 801b418:	bd80      	pop	{r7, pc}
 801b41a:	bf00      	nop
 801b41c:	20000154 	.word	0x20000154
 801b420:	20001d74 	.word	0x20001d74
 801b424:	20001d78 	.word	0x20001d78
 801b428:	20000150 	.word	0x20000150
 801b42c:	20001d7c 	.word	0x20001d7c
 801b430:	20001d94 	.word	0x20001d94
 801b434:	20001d80 	.word	0x20001d80
 801b438:	20001d84 	.word	0x20001d84

0801b43c <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 801b43c:	b580      	push	{r7, lr}
 801b43e:	b088      	sub	sp, #32
 801b440:	af00      	add	r7, sp, #0
 801b442:	60f8      	str	r0, [r7, #12]
 801b444:	60b9      	str	r1, [r7, #8]
 801b446:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b448:	f3ef 8310 	mrs	r3, PRIMASK
 801b44c:	617b      	str	r3, [r7, #20]
  return(result);
 801b44e:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 801b450:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801b452:	b672      	cpsid	i
}
 801b454:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 801b456:	68f8      	ldr	r0, [r7, #12]
 801b458:	f000 f84a 	bl	801b4f0 <SEQ_BitPosition>
 801b45c:	4603      	mov	r3, r0
 801b45e:	4619      	mov	r1, r3
 801b460:	4a06      	ldr	r2, [pc, #24]	@ (801b47c <UTIL_SEQ_RegTask+0x40>)
 801b462:	687b      	ldr	r3, [r7, #4]
 801b464:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 801b468:	69fb      	ldr	r3, [r7, #28]
 801b46a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b46c:	69bb      	ldr	r3, [r7, #24]
 801b46e:	f383 8810 	msr	PRIMASK, r3
}
 801b472:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 801b474:	bf00      	nop
}
 801b476:	3720      	adds	r7, #32
 801b478:	46bd      	mov	sp, r7
 801b47a:	bd80      	pop	{r7, pc}
 801b47c:	20001d84 	.word	0x20001d84

0801b480 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 801b480:	b480      	push	{r7}
 801b482:	b087      	sub	sp, #28
 801b484:	af00      	add	r7, sp, #0
 801b486:	6078      	str	r0, [r7, #4]
 801b488:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b48a:	f3ef 8310 	mrs	r3, PRIMASK
 801b48e:	60fb      	str	r3, [r7, #12]
  return(result);
 801b490:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801b492:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801b494:	b672      	cpsid	i
}
 801b496:	bf00      	nop

  TaskSet |= TaskId_bm;
 801b498:	4b0d      	ldr	r3, [pc, #52]	@ (801b4d0 <UTIL_SEQ_SetTask+0x50>)
 801b49a:	681a      	ldr	r2, [r3, #0]
 801b49c:	687b      	ldr	r3, [r7, #4]
 801b49e:	4313      	orrs	r3, r2
 801b4a0:	4a0b      	ldr	r2, [pc, #44]	@ (801b4d0 <UTIL_SEQ_SetTask+0x50>)
 801b4a2:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 801b4a4:	4a0b      	ldr	r2, [pc, #44]	@ (801b4d4 <UTIL_SEQ_SetTask+0x54>)
 801b4a6:	683b      	ldr	r3, [r7, #0]
 801b4a8:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801b4ac:	687b      	ldr	r3, [r7, #4]
 801b4ae:	431a      	orrs	r2, r3
 801b4b0:	4908      	ldr	r1, [pc, #32]	@ (801b4d4 <UTIL_SEQ_SetTask+0x54>)
 801b4b2:	683b      	ldr	r3, [r7, #0]
 801b4b4:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 801b4b8:	697b      	ldr	r3, [r7, #20]
 801b4ba:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b4bc:	693b      	ldr	r3, [r7, #16]
 801b4be:	f383 8810 	msr	PRIMASK, r3
}
 801b4c2:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 801b4c4:	bf00      	nop
}
 801b4c6:	371c      	adds	r7, #28
 801b4c8:	46bd      	mov	sp, r7
 801b4ca:	bc80      	pop	{r7}
 801b4cc:	4770      	bx	lr
 801b4ce:	bf00      	nop
 801b4d0:	20001d74 	.word	0x20001d74
 801b4d4:	20001d94 	.word	0x20001d94

0801b4d8 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 801b4d8:	b480      	push	{r7}
 801b4da:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 801b4dc:	bf00      	nop
}
 801b4de:	46bd      	mov	sp, r7
 801b4e0:	bc80      	pop	{r7}
 801b4e2:	4770      	bx	lr

0801b4e4 <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 801b4e4:	b480      	push	{r7}
 801b4e6:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 801b4e8:	bf00      	nop
}
 801b4ea:	46bd      	mov	sp, r7
 801b4ec:	bc80      	pop	{r7}
 801b4ee:	4770      	bx	lr

0801b4f0 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 801b4f0:	b480      	push	{r7}
 801b4f2:	b085      	sub	sp, #20
 801b4f4:	af00      	add	r7, sp, #0
 801b4f6:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 801b4f8:	2300      	movs	r3, #0
 801b4fa:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 801b4fc:	687b      	ldr	r3, [r7, #4]
 801b4fe:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 801b500:	68bb      	ldr	r3, [r7, #8]
 801b502:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801b506:	d204      	bcs.n	801b512 <SEQ_BitPosition+0x22>
 801b508:	2310      	movs	r3, #16
 801b50a:	73fb      	strb	r3, [r7, #15]
 801b50c:	68bb      	ldr	r3, [r7, #8]
 801b50e:	041b      	lsls	r3, r3, #16
 801b510:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 801b512:	68bb      	ldr	r3, [r7, #8]
 801b514:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801b518:	d205      	bcs.n	801b526 <SEQ_BitPosition+0x36>
 801b51a:	7bfb      	ldrb	r3, [r7, #15]
 801b51c:	3308      	adds	r3, #8
 801b51e:	73fb      	strb	r3, [r7, #15]
 801b520:	68bb      	ldr	r3, [r7, #8]
 801b522:	021b      	lsls	r3, r3, #8
 801b524:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 801b526:	68bb      	ldr	r3, [r7, #8]
 801b528:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801b52c:	d205      	bcs.n	801b53a <SEQ_BitPosition+0x4a>
 801b52e:	7bfb      	ldrb	r3, [r7, #15]
 801b530:	3304      	adds	r3, #4
 801b532:	73fb      	strb	r3, [r7, #15]
 801b534:	68bb      	ldr	r3, [r7, #8]
 801b536:	011b      	lsls	r3, r3, #4
 801b538:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 801b53a:	68bb      	ldr	r3, [r7, #8]
 801b53c:	0f1b      	lsrs	r3, r3, #28
 801b53e:	4a07      	ldr	r2, [pc, #28]	@ (801b55c <SEQ_BitPosition+0x6c>)
 801b540:	5cd2      	ldrb	r2, [r2, r3]
 801b542:	7bfb      	ldrb	r3, [r7, #15]
 801b544:	4413      	add	r3, r2
 801b546:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 801b548:	7bfb      	ldrb	r3, [r7, #15]
 801b54a:	f1c3 031f 	rsb	r3, r3, #31
 801b54e:	b2db      	uxtb	r3, r3
}
 801b550:	4618      	mov	r0, r3
 801b552:	3714      	adds	r7, #20
 801b554:	46bd      	mov	sp, r7
 801b556:	bc80      	pop	{r7}
 801b558:	4770      	bx	lr
 801b55a:	bf00      	nop
 801b55c:	0801f9ac 	.word	0x0801f9ac

0801b560 <UTIL_TIMER_Init>:
  * @addtogroup TIMER_SERVER_exported_function
  *  @{
  */

UTIL_TIMER_Status_t UTIL_TIMER_Init(void)
{
 801b560:	b580      	push	{r7, lr}
 801b562:	af00      	add	r7, sp, #0
  UTIL_TIMER_INIT_CRITICAL_SECTION();
  TimerListHead = NULL;
 801b564:	4b04      	ldr	r3, [pc, #16]	@ (801b578 <UTIL_TIMER_Init+0x18>)
 801b566:	2200      	movs	r2, #0
 801b568:	601a      	str	r2, [r3, #0]
  return UTIL_TimerDriver.InitTimer();
 801b56a:	4b04      	ldr	r3, [pc, #16]	@ (801b57c <UTIL_TIMER_Init+0x1c>)
 801b56c:	681b      	ldr	r3, [r3, #0]
 801b56e:	4798      	blx	r3
 801b570:	4603      	mov	r3, r0
}
 801b572:	4618      	mov	r0, r3
 801b574:	bd80      	pop	{r7, pc}
 801b576:	bf00      	nop
 801b578:	20001d9c 	.word	0x20001d9c
 801b57c:	0801f42c 	.word	0x0801f42c

0801b580 <UTIL_TIMER_Create>:
{
  return UTIL_TimerDriver.DeInitTimer();
}

UTIL_TIMER_Status_t UTIL_TIMER_Create( UTIL_TIMER_Object_t *TimerObject, uint32_t PeriodValue, UTIL_TIMER_Mode_t Mode, void ( *Callback )( void *), void *Argument)
{
 801b580:	b580      	push	{r7, lr}
 801b582:	b084      	sub	sp, #16
 801b584:	af00      	add	r7, sp, #0
 801b586:	60f8      	str	r0, [r7, #12]
 801b588:	60b9      	str	r1, [r7, #8]
 801b58a:	603b      	str	r3, [r7, #0]
 801b58c:	4613      	mov	r3, r2
 801b58e:	71fb      	strb	r3, [r7, #7]
  if((TimerObject != NULL) && (Callback != NULL))
 801b590:	68fb      	ldr	r3, [r7, #12]
 801b592:	2b00      	cmp	r3, #0
 801b594:	d023      	beq.n	801b5de <UTIL_TIMER_Create+0x5e>
 801b596:	683b      	ldr	r3, [r7, #0]
 801b598:	2b00      	cmp	r3, #0
 801b59a:	d020      	beq.n	801b5de <UTIL_TIMER_Create+0x5e>
  {
    TimerObject->Timestamp = 0U;
 801b59c:	68fb      	ldr	r3, [r7, #12]
 801b59e:	2200      	movs	r2, #0
 801b5a0:	601a      	str	r2, [r3, #0]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 801b5a2:	4b11      	ldr	r3, [pc, #68]	@ (801b5e8 <UTIL_TIMER_Create+0x68>)
 801b5a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801b5a6:	68b8      	ldr	r0, [r7, #8]
 801b5a8:	4798      	blx	r3
 801b5aa:	4602      	mov	r2, r0
 801b5ac:	68fb      	ldr	r3, [r7, #12]
 801b5ae:	605a      	str	r2, [r3, #4]
    TimerObject->IsPending = 0U;
 801b5b0:	68fb      	ldr	r3, [r7, #12]
 801b5b2:	2200      	movs	r2, #0
 801b5b4:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 0U;
 801b5b6:	68fb      	ldr	r3, [r7, #12]
 801b5b8:	2200      	movs	r2, #0
 801b5ba:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 801b5bc:	68fb      	ldr	r3, [r7, #12]
 801b5be:	2200      	movs	r2, #0
 801b5c0:	729a      	strb	r2, [r3, #10]
    TimerObject->Callback = Callback;
 801b5c2:	68fb      	ldr	r3, [r7, #12]
 801b5c4:	683a      	ldr	r2, [r7, #0]
 801b5c6:	60da      	str	r2, [r3, #12]
    TimerObject->argument = Argument;
 801b5c8:	68fb      	ldr	r3, [r7, #12]
 801b5ca:	69ba      	ldr	r2, [r7, #24]
 801b5cc:	611a      	str	r2, [r3, #16]
    TimerObject->Mode = Mode;
 801b5ce:	68fb      	ldr	r3, [r7, #12]
 801b5d0:	79fa      	ldrb	r2, [r7, #7]
 801b5d2:	72da      	strb	r2, [r3, #11]
    TimerObject->Next = NULL;
 801b5d4:	68fb      	ldr	r3, [r7, #12]
 801b5d6:	2200      	movs	r2, #0
 801b5d8:	615a      	str	r2, [r3, #20]
    return UTIL_TIMER_OK;
 801b5da:	2300      	movs	r3, #0
 801b5dc:	e000      	b.n	801b5e0 <UTIL_TIMER_Create+0x60>
  }
  else
  {
    return UTIL_TIMER_INVALID_PARAM;
 801b5de:	2301      	movs	r3, #1
  }
}
 801b5e0:	4618      	mov	r0, r3
 801b5e2:	3710      	adds	r7, #16
 801b5e4:	46bd      	mov	sp, r7
 801b5e6:	bd80      	pop	{r7, pc}
 801b5e8:	0801f42c 	.word	0x0801f42c

0801b5ec <UTIL_TIMER_Start>:

UTIL_TIMER_Status_t UTIL_TIMER_Start( UTIL_TIMER_Object_t *TimerObject)
{
 801b5ec:	b580      	push	{r7, lr}
 801b5ee:	b08a      	sub	sp, #40	@ 0x28
 801b5f0:	af00      	add	r7, sp, #0
 801b5f2:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801b5f4:	2300      	movs	r3, #0
 801b5f6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t elapsedTime;
  uint32_t minValue;
  uint32_t ticks;
    
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 801b5fa:	687b      	ldr	r3, [r7, #4]
 801b5fc:	2b00      	cmp	r3, #0
 801b5fe:	d056      	beq.n	801b6ae <UTIL_TIMER_Start+0xc2>
 801b600:	6878      	ldr	r0, [r7, #4]
 801b602:	f000 f9a9 	bl	801b958 <TimerExists>
 801b606:	4603      	mov	r3, r0
 801b608:	f083 0301 	eor.w	r3, r3, #1
 801b60c:	b2db      	uxtb	r3, r3
 801b60e:	2b00      	cmp	r3, #0
 801b610:	d04d      	beq.n	801b6ae <UTIL_TIMER_Start+0xc2>
 801b612:	687b      	ldr	r3, [r7, #4]
 801b614:	7a5b      	ldrb	r3, [r3, #9]
 801b616:	2b00      	cmp	r3, #0
 801b618:	d149      	bne.n	801b6ae <UTIL_TIMER_Start+0xc2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b61a:	f3ef 8310 	mrs	r3, PRIMASK
 801b61e:	613b      	str	r3, [r7, #16]
  return(result);
 801b620:	693b      	ldr	r3, [r7, #16]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801b622:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801b624:	b672      	cpsid	i
}
 801b626:	bf00      	nop
    ticks = TimerObject->ReloadValue;
 801b628:	687b      	ldr	r3, [r7, #4]
 801b62a:	685b      	ldr	r3, [r3, #4]
 801b62c:	623b      	str	r3, [r7, #32]
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 801b62e:	4b24      	ldr	r3, [pc, #144]	@ (801b6c0 <UTIL_TIMER_Start+0xd4>)
 801b630:	6a1b      	ldr	r3, [r3, #32]
 801b632:	4798      	blx	r3
 801b634:	61b8      	str	r0, [r7, #24]
    
    if( ticks < minValue )
 801b636:	6a3a      	ldr	r2, [r7, #32]
 801b638:	69bb      	ldr	r3, [r7, #24]
 801b63a:	429a      	cmp	r2, r3
 801b63c:	d201      	bcs.n	801b642 <UTIL_TIMER_Start+0x56>
    {
      ticks = minValue;
 801b63e:	69bb      	ldr	r3, [r7, #24]
 801b640:	623b      	str	r3, [r7, #32]
    }
    
    TimerObject->Timestamp = ticks;
 801b642:	687b      	ldr	r3, [r7, #4]
 801b644:	6a3a      	ldr	r2, [r7, #32]
 801b646:	601a      	str	r2, [r3, #0]
    TimerObject->IsPending = 0U;
 801b648:	687b      	ldr	r3, [r7, #4]
 801b64a:	2200      	movs	r2, #0
 801b64c:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 1U;
 801b64e:	687b      	ldr	r3, [r7, #4]
 801b650:	2201      	movs	r2, #1
 801b652:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 801b654:	687b      	ldr	r3, [r7, #4]
 801b656:	2200      	movs	r2, #0
 801b658:	729a      	strb	r2, [r3, #10]
    if( TimerListHead == NULL )
 801b65a:	4b1a      	ldr	r3, [pc, #104]	@ (801b6c4 <UTIL_TIMER_Start+0xd8>)
 801b65c:	681b      	ldr	r3, [r3, #0]
 801b65e:	2b00      	cmp	r3, #0
 801b660:	d106      	bne.n	801b670 <UTIL_TIMER_Start+0x84>
    {
      UTIL_TimerDriver.SetTimerContext();
 801b662:	4b17      	ldr	r3, [pc, #92]	@ (801b6c0 <UTIL_TIMER_Start+0xd4>)
 801b664:	691b      	ldr	r3, [r3, #16]
 801b666:	4798      	blx	r3
      TimerInsertNewHeadTimer( TimerObject ); /* insert a timeout at now+obj->Timestamp */
 801b668:	6878      	ldr	r0, [r7, #4]
 801b66a:	f000 f9eb 	bl	801ba44 <TimerInsertNewHeadTimer>
 801b66e:	e017      	b.n	801b6a0 <UTIL_TIMER_Start+0xb4>
    }
    else 
    {
      elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime( );
 801b670:	4b13      	ldr	r3, [pc, #76]	@ (801b6c0 <UTIL_TIMER_Start+0xd4>)
 801b672:	699b      	ldr	r3, [r3, #24]
 801b674:	4798      	blx	r3
 801b676:	6178      	str	r0, [r7, #20]
      TimerObject->Timestamp += elapsedTime;
 801b678:	687b      	ldr	r3, [r7, #4]
 801b67a:	681a      	ldr	r2, [r3, #0]
 801b67c:	697b      	ldr	r3, [r7, #20]
 801b67e:	441a      	add	r2, r3
 801b680:	687b      	ldr	r3, [r7, #4]
 801b682:	601a      	str	r2, [r3, #0]
      
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 801b684:	687b      	ldr	r3, [r7, #4]
 801b686:	681a      	ldr	r2, [r3, #0]
 801b688:	4b0e      	ldr	r3, [pc, #56]	@ (801b6c4 <UTIL_TIMER_Start+0xd8>)
 801b68a:	681b      	ldr	r3, [r3, #0]
 801b68c:	681b      	ldr	r3, [r3, #0]
 801b68e:	429a      	cmp	r2, r3
 801b690:	d203      	bcs.n	801b69a <UTIL_TIMER_Start+0xae>
      {
        TimerInsertNewHeadTimer( TimerObject);
 801b692:	6878      	ldr	r0, [r7, #4]
 801b694:	f000 f9d6 	bl	801ba44 <TimerInsertNewHeadTimer>
 801b698:	e002      	b.n	801b6a0 <UTIL_TIMER_Start+0xb4>
      }
      else
      {
        TimerInsertTimer( TimerObject);
 801b69a:	6878      	ldr	r0, [r7, #4]
 801b69c:	f000 f9a2 	bl	801b9e4 <TimerInsertTimer>
 801b6a0:	69fb      	ldr	r3, [r7, #28]
 801b6a2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b6a4:	68fb      	ldr	r3, [r7, #12]
 801b6a6:	f383 8810 	msr	PRIMASK, r3
}
 801b6aa:	bf00      	nop
  {
 801b6ac:	e002      	b.n	801b6b4 <UTIL_TIMER_Start+0xc8>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret =  UTIL_TIMER_INVALID_PARAM;
 801b6ae:	2301      	movs	r3, #1
 801b6b0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }
  return ret;
 801b6b4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 801b6b8:	4618      	mov	r0, r3
 801b6ba:	3728      	adds	r7, #40	@ 0x28
 801b6bc:	46bd      	mov	sp, r7
 801b6be:	bd80      	pop	{r7, pc}
 801b6c0:	0801f42c 	.word	0x0801f42c
 801b6c4:	20001d9c 	.word	0x20001d9c

0801b6c8 <UTIL_TIMER_Stop>:
  }
  return ret;
}

UTIL_TIMER_Status_t UTIL_TIMER_Stop( UTIL_TIMER_Object_t *TimerObject )
{
 801b6c8:	b580      	push	{r7, lr}
 801b6ca:	b088      	sub	sp, #32
 801b6cc:	af00      	add	r7, sp, #0
 801b6ce:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801b6d0:	2300      	movs	r3, #0
 801b6d2:	77fb      	strb	r3, [r7, #31]

  if (NULL != TimerObject)
 801b6d4:	687b      	ldr	r3, [r7, #4]
 801b6d6:	2b00      	cmp	r3, #0
 801b6d8:	d05b      	beq.n	801b792 <UTIL_TIMER_Stop+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b6da:	f3ef 8310 	mrs	r3, PRIMASK
 801b6de:	60fb      	str	r3, [r7, #12]
  return(result);
 801b6e0:	68fb      	ldr	r3, [r7, #12]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801b6e2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 801b6e4:	b672      	cpsid	i
}
 801b6e6:	bf00      	nop
    UTIL_TIMER_Object_t* prev = TimerListHead;
 801b6e8:	4b2d      	ldr	r3, [pc, #180]	@ (801b7a0 <UTIL_TIMER_Stop+0xd8>)
 801b6ea:	681b      	ldr	r3, [r3, #0]
 801b6ec:	61bb      	str	r3, [r7, #24]
    UTIL_TIMER_Object_t* cur = TimerListHead;
 801b6ee:	4b2c      	ldr	r3, [pc, #176]	@ (801b7a0 <UTIL_TIMER_Stop+0xd8>)
 801b6f0:	681b      	ldr	r3, [r3, #0]
 801b6f2:	617b      	str	r3, [r7, #20]
    TimerObject->IsReloadStopped = 1U;
 801b6f4:	687b      	ldr	r3, [r7, #4]
 801b6f6:	2201      	movs	r2, #1
 801b6f8:	729a      	strb	r2, [r3, #10]
    
    /* List is empty or the Obj to stop does not exist  */
    if(NULL != TimerListHead)
 801b6fa:	4b29      	ldr	r3, [pc, #164]	@ (801b7a0 <UTIL_TIMER_Stop+0xd8>)
 801b6fc:	681b      	ldr	r3, [r3, #0]
 801b6fe:	2b00      	cmp	r3, #0
 801b700:	d041      	beq.n	801b786 <UTIL_TIMER_Stop+0xbe>
    {
      TimerObject->IsRunning = 0U;
 801b702:	687b      	ldr	r3, [r7, #4]
 801b704:	2200      	movs	r2, #0
 801b706:	725a      	strb	r2, [r3, #9]
      
      if( TimerListHead == TimerObject ) /* Stop the Head */
 801b708:	4b25      	ldr	r3, [pc, #148]	@ (801b7a0 <UTIL_TIMER_Stop+0xd8>)
 801b70a:	681b      	ldr	r3, [r3, #0]
 801b70c:	687a      	ldr	r2, [r7, #4]
 801b70e:	429a      	cmp	r2, r3
 801b710:	d134      	bne.n	801b77c <UTIL_TIMER_Stop+0xb4>
      {
          TimerListHead->IsPending = 0;
 801b712:	4b23      	ldr	r3, [pc, #140]	@ (801b7a0 <UTIL_TIMER_Stop+0xd8>)
 801b714:	681b      	ldr	r3, [r3, #0]
 801b716:	2200      	movs	r2, #0
 801b718:	721a      	strb	r2, [r3, #8]
          if( TimerListHead->Next != NULL )
 801b71a:	4b21      	ldr	r3, [pc, #132]	@ (801b7a0 <UTIL_TIMER_Stop+0xd8>)
 801b71c:	681b      	ldr	r3, [r3, #0]
 801b71e:	695b      	ldr	r3, [r3, #20]
 801b720:	2b00      	cmp	r3, #0
 801b722:	d00a      	beq.n	801b73a <UTIL_TIMER_Stop+0x72>
          {
            TimerListHead = TimerListHead->Next;
 801b724:	4b1e      	ldr	r3, [pc, #120]	@ (801b7a0 <UTIL_TIMER_Stop+0xd8>)
 801b726:	681b      	ldr	r3, [r3, #0]
 801b728:	695b      	ldr	r3, [r3, #20]
 801b72a:	4a1d      	ldr	r2, [pc, #116]	@ (801b7a0 <UTIL_TIMER_Stop+0xd8>)
 801b72c:	6013      	str	r3, [r2, #0]
            TimerSetTimeout( TimerListHead );
 801b72e:	4b1c      	ldr	r3, [pc, #112]	@ (801b7a0 <UTIL_TIMER_Stop+0xd8>)
 801b730:	681b      	ldr	r3, [r3, #0]
 801b732:	4618      	mov	r0, r3
 801b734:	f000 f92c 	bl	801b990 <TimerSetTimeout>
 801b738:	e023      	b.n	801b782 <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            UTIL_TimerDriver.StopTimerEvt( );
 801b73a:	4b1a      	ldr	r3, [pc, #104]	@ (801b7a4 <UTIL_TIMER_Stop+0xdc>)
 801b73c:	68db      	ldr	r3, [r3, #12]
 801b73e:	4798      	blx	r3
            TimerListHead = NULL;
 801b740:	4b17      	ldr	r3, [pc, #92]	@ (801b7a0 <UTIL_TIMER_Stop+0xd8>)
 801b742:	2200      	movs	r2, #0
 801b744:	601a      	str	r2, [r3, #0]
 801b746:	e01c      	b.n	801b782 <UTIL_TIMER_Stop+0xba>
      }
      else /* Stop an object within the list */
      {      
        while( cur != NULL )
        {
          if( cur == TimerObject )
 801b748:	697a      	ldr	r2, [r7, #20]
 801b74a:	687b      	ldr	r3, [r7, #4]
 801b74c:	429a      	cmp	r2, r3
 801b74e:	d110      	bne.n	801b772 <UTIL_TIMER_Stop+0xaa>
          {
            if( cur->Next != NULL )
 801b750:	697b      	ldr	r3, [r7, #20]
 801b752:	695b      	ldr	r3, [r3, #20]
 801b754:	2b00      	cmp	r3, #0
 801b756:	d006      	beq.n	801b766 <UTIL_TIMER_Stop+0x9e>
            {
              cur = cur->Next;
 801b758:	697b      	ldr	r3, [r7, #20]
 801b75a:	695b      	ldr	r3, [r3, #20]
 801b75c:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 801b75e:	69bb      	ldr	r3, [r7, #24]
 801b760:	697a      	ldr	r2, [r7, #20]
 801b762:	615a      	str	r2, [r3, #20]
            else
            {
              cur = NULL;
              prev->Next = cur;
            }
            break;
 801b764:	e00d      	b.n	801b782 <UTIL_TIMER_Stop+0xba>
              cur = NULL;
 801b766:	2300      	movs	r3, #0
 801b768:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 801b76a:	69bb      	ldr	r3, [r7, #24]
 801b76c:	697a      	ldr	r2, [r7, #20]
 801b76e:	615a      	str	r2, [r3, #20]
            break;
 801b770:	e007      	b.n	801b782 <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            prev = cur;
 801b772:	697b      	ldr	r3, [r7, #20]
 801b774:	61bb      	str	r3, [r7, #24]
            cur = cur->Next;
 801b776:	697b      	ldr	r3, [r7, #20]
 801b778:	695b      	ldr	r3, [r3, #20]
 801b77a:	617b      	str	r3, [r7, #20]
        while( cur != NULL )
 801b77c:	697b      	ldr	r3, [r7, #20]
 801b77e:	2b00      	cmp	r3, #0
 801b780:	d1e2      	bne.n	801b748 <UTIL_TIMER_Stop+0x80>
          }
        }   
      }
      ret = UTIL_TIMER_OK;
 801b782:	2300      	movs	r3, #0
 801b784:	77fb      	strb	r3, [r7, #31]
 801b786:	693b      	ldr	r3, [r7, #16]
 801b788:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b78a:	68bb      	ldr	r3, [r7, #8]
 801b78c:	f383 8810 	msr	PRIMASK, r3
}
 801b790:	e001      	b.n	801b796 <UTIL_TIMER_Stop+0xce>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret = UTIL_TIMER_INVALID_PARAM;
 801b792:	2301      	movs	r3, #1
 801b794:	77fb      	strb	r3, [r7, #31]
  }
  return ret;
 801b796:	7ffb      	ldrb	r3, [r7, #31]
}
 801b798:	4618      	mov	r0, r3
 801b79a:	3720      	adds	r7, #32
 801b79c:	46bd      	mov	sp, r7
 801b79e:	bd80      	pop	{r7, pc}
 801b7a0:	20001d9c 	.word	0x20001d9c
 801b7a4:	0801f42c 	.word	0x0801f42c

0801b7a8 <UTIL_TIMER_SetPeriod>:

UTIL_TIMER_Status_t UTIL_TIMER_SetPeriod(UTIL_TIMER_Object_t *TimerObject, uint32_t NewPeriodValue)
{
 801b7a8:	b580      	push	{r7, lr}
 801b7aa:	b084      	sub	sp, #16
 801b7ac:	af00      	add	r7, sp, #0
 801b7ae:	6078      	str	r0, [r7, #4]
 801b7b0:	6039      	str	r1, [r7, #0]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801b7b2:	2300      	movs	r3, #0
 801b7b4:	73fb      	strb	r3, [r7, #15]
  
  if(NULL == TimerObject)
 801b7b6:	687b      	ldr	r3, [r7, #4]
 801b7b8:	2b00      	cmp	r3, #0
 801b7ba:	d102      	bne.n	801b7c2 <UTIL_TIMER_SetPeriod+0x1a>
  {
	  ret = UTIL_TIMER_INVALID_PARAM;
 801b7bc:	2301      	movs	r3, #1
 801b7be:	73fb      	strb	r3, [r7, #15]
 801b7c0:	e014      	b.n	801b7ec <UTIL_TIMER_SetPeriod+0x44>
  }
  else
  {
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 801b7c2:	4b0d      	ldr	r3, [pc, #52]	@ (801b7f8 <UTIL_TIMER_SetPeriod+0x50>)
 801b7c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801b7c6:	6838      	ldr	r0, [r7, #0]
 801b7c8:	4798      	blx	r3
 801b7ca:	4602      	mov	r2, r0
 801b7cc:	687b      	ldr	r3, [r7, #4]
 801b7ce:	605a      	str	r2, [r3, #4]
    if(TimerExists(TimerObject))
 801b7d0:	6878      	ldr	r0, [r7, #4]
 801b7d2:	f000 f8c1 	bl	801b958 <TimerExists>
 801b7d6:	4603      	mov	r3, r0
 801b7d8:	2b00      	cmp	r3, #0
 801b7da:	d007      	beq.n	801b7ec <UTIL_TIMER_SetPeriod+0x44>
    {
      (void)UTIL_TIMER_Stop(TimerObject);
 801b7dc:	6878      	ldr	r0, [r7, #4]
 801b7de:	f7ff ff73 	bl	801b6c8 <UTIL_TIMER_Stop>
      ret = UTIL_TIMER_Start(TimerObject);
 801b7e2:	6878      	ldr	r0, [r7, #4]
 801b7e4:	f7ff ff02 	bl	801b5ec <UTIL_TIMER_Start>
 801b7e8:	4603      	mov	r3, r0
 801b7ea:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret;
 801b7ec:	7bfb      	ldrb	r3, [r7, #15]
}
 801b7ee:	4618      	mov	r0, r3
 801b7f0:	3710      	adds	r7, #16
 801b7f2:	46bd      	mov	sp, r7
 801b7f4:	bd80      	pop	{r7, pc}
 801b7f6:	bf00      	nop
 801b7f8:	0801f42c 	.word	0x0801f42c

0801b7fc <UTIL_TIMER_IRQ_Handler>:
	}
	return NextTimer;
}

void UTIL_TIMER_IRQ_Handler( void )
{
 801b7fc:	b590      	push	{r4, r7, lr}
 801b7fe:	b089      	sub	sp, #36	@ 0x24
 801b800:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b802:	f3ef 8310 	mrs	r3, PRIMASK
 801b806:	60bb      	str	r3, [r7, #8]
  return(result);
 801b808:	68bb      	ldr	r3, [r7, #8]
  UTIL_TIMER_Object_t* cur;
  uint32_t old, now, DeltaContext;

  UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801b80a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 801b80c:	b672      	cpsid	i
}
 801b80e:	bf00      	nop

  old  =  UTIL_TimerDriver.GetTimerContext( );
 801b810:	4b38      	ldr	r3, [pc, #224]	@ (801b8f4 <UTIL_TIMER_IRQ_Handler+0xf8>)
 801b812:	695b      	ldr	r3, [r3, #20]
 801b814:	4798      	blx	r3
 801b816:	6178      	str	r0, [r7, #20]
  now  =  UTIL_TimerDriver.SetTimerContext( );
 801b818:	4b36      	ldr	r3, [pc, #216]	@ (801b8f4 <UTIL_TIMER_IRQ_Handler+0xf8>)
 801b81a:	691b      	ldr	r3, [r3, #16]
 801b81c:	4798      	blx	r3
 801b81e:	6138      	str	r0, [r7, #16]

  DeltaContext = now  - old; /*intentional wrap around */
 801b820:	693a      	ldr	r2, [r7, #16]
 801b822:	697b      	ldr	r3, [r7, #20]
 801b824:	1ad3      	subs	r3, r2, r3
 801b826:	60fb      	str	r3, [r7, #12]
  
  /* update timeStamp based upon new Time Reference*/
  /* because delta context should never exceed 2^32*/
  if ( TimerListHead != NULL )
 801b828:	4b33      	ldr	r3, [pc, #204]	@ (801b8f8 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801b82a:	681b      	ldr	r3, [r3, #0]
 801b82c:	2b00      	cmp	r3, #0
 801b82e:	d037      	beq.n	801b8a0 <UTIL_TIMER_IRQ_Handler+0xa4>
  {
    cur = TimerListHead;
 801b830:	4b31      	ldr	r3, [pc, #196]	@ (801b8f8 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801b832:	681b      	ldr	r3, [r3, #0]
 801b834:	61fb      	str	r3, [r7, #28]
	do {
      if (cur->Timestamp > DeltaContext)
 801b836:	69fb      	ldr	r3, [r7, #28]
 801b838:	681b      	ldr	r3, [r3, #0]
 801b83a:	68fa      	ldr	r2, [r7, #12]
 801b83c:	429a      	cmp	r2, r3
 801b83e:	d206      	bcs.n	801b84e <UTIL_TIMER_IRQ_Handler+0x52>
      {
        cur->Timestamp -= DeltaContext;
 801b840:	69fb      	ldr	r3, [r7, #28]
 801b842:	681a      	ldr	r2, [r3, #0]
 801b844:	68fb      	ldr	r3, [r7, #12]
 801b846:	1ad2      	subs	r2, r2, r3
 801b848:	69fb      	ldr	r3, [r7, #28]
 801b84a:	601a      	str	r2, [r3, #0]
 801b84c:	e002      	b.n	801b854 <UTIL_TIMER_IRQ_Handler+0x58>
      }
      else
      {
        cur->Timestamp = 0;
 801b84e:	69fb      	ldr	r3, [r7, #28]
 801b850:	2200      	movs	r2, #0
 801b852:	601a      	str	r2, [r3, #0]
      }
      cur = cur->Next;
 801b854:	69fb      	ldr	r3, [r7, #28]
 801b856:	695b      	ldr	r3, [r3, #20]
 801b858:	61fb      	str	r3, [r7, #28]
    } while(cur != NULL);
 801b85a:	69fb      	ldr	r3, [r7, #28]
 801b85c:	2b00      	cmp	r3, #0
 801b85e:	d1ea      	bne.n	801b836 <UTIL_TIMER_IRQ_Handler+0x3a>
  }

  /* Execute expired timer and update the list */
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 801b860:	e01e      	b.n	801b8a0 <UTIL_TIMER_IRQ_Handler+0xa4>
  {
      cur = TimerListHead;
 801b862:	4b25      	ldr	r3, [pc, #148]	@ (801b8f8 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801b864:	681b      	ldr	r3, [r3, #0]
 801b866:	61fb      	str	r3, [r7, #28]
      TimerListHead = TimerListHead->Next;
 801b868:	4b23      	ldr	r3, [pc, #140]	@ (801b8f8 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801b86a:	681b      	ldr	r3, [r3, #0]
 801b86c:	695b      	ldr	r3, [r3, #20]
 801b86e:	4a22      	ldr	r2, [pc, #136]	@ (801b8f8 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801b870:	6013      	str	r3, [r2, #0]
      cur->IsPending = 0;
 801b872:	69fb      	ldr	r3, [r7, #28]
 801b874:	2200      	movs	r2, #0
 801b876:	721a      	strb	r2, [r3, #8]
      cur->IsRunning = 0;
 801b878:	69fb      	ldr	r3, [r7, #28]
 801b87a:	2200      	movs	r2, #0
 801b87c:	725a      	strb	r2, [r3, #9]
      cur->Callback(cur->argument);
 801b87e:	69fb      	ldr	r3, [r7, #28]
 801b880:	68db      	ldr	r3, [r3, #12]
 801b882:	69fa      	ldr	r2, [r7, #28]
 801b884:	6912      	ldr	r2, [r2, #16]
 801b886:	4610      	mov	r0, r2
 801b888:	4798      	blx	r3
      if(( cur->Mode == UTIL_TIMER_PERIODIC) && (cur->IsReloadStopped == 0U))
 801b88a:	69fb      	ldr	r3, [r7, #28]
 801b88c:	7adb      	ldrb	r3, [r3, #11]
 801b88e:	2b01      	cmp	r3, #1
 801b890:	d106      	bne.n	801b8a0 <UTIL_TIMER_IRQ_Handler+0xa4>
 801b892:	69fb      	ldr	r3, [r7, #28]
 801b894:	7a9b      	ldrb	r3, [r3, #10]
 801b896:	2b00      	cmp	r3, #0
 801b898:	d102      	bne.n	801b8a0 <UTIL_TIMER_IRQ_Handler+0xa4>
      {
        (void)UTIL_TIMER_Start(cur);
 801b89a:	69f8      	ldr	r0, [r7, #28]
 801b89c:	f7ff fea6 	bl	801b5ec <UTIL_TIMER_Start>
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 801b8a0:	4b15      	ldr	r3, [pc, #84]	@ (801b8f8 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801b8a2:	681b      	ldr	r3, [r3, #0]
 801b8a4:	2b00      	cmp	r3, #0
 801b8a6:	d00d      	beq.n	801b8c4 <UTIL_TIMER_IRQ_Handler+0xc8>
 801b8a8:	4b13      	ldr	r3, [pc, #76]	@ (801b8f8 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801b8aa:	681b      	ldr	r3, [r3, #0]
 801b8ac:	681b      	ldr	r3, [r3, #0]
 801b8ae:	2b00      	cmp	r3, #0
 801b8b0:	d0d7      	beq.n	801b862 <UTIL_TIMER_IRQ_Handler+0x66>
 801b8b2:	4b11      	ldr	r3, [pc, #68]	@ (801b8f8 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801b8b4:	681b      	ldr	r3, [r3, #0]
 801b8b6:	681c      	ldr	r4, [r3, #0]
 801b8b8:	4b0e      	ldr	r3, [pc, #56]	@ (801b8f4 <UTIL_TIMER_IRQ_Handler+0xf8>)
 801b8ba:	699b      	ldr	r3, [r3, #24]
 801b8bc:	4798      	blx	r3
 801b8be:	4603      	mov	r3, r0
 801b8c0:	429c      	cmp	r4, r3
 801b8c2:	d3ce      	bcc.n	801b862 <UTIL_TIMER_IRQ_Handler+0x66>
      }
  }

  /* start the next TimerListHead if it exists and it is not pending*/
  if(( TimerListHead != NULL ) && (TimerListHead->IsPending == 0U))
 801b8c4:	4b0c      	ldr	r3, [pc, #48]	@ (801b8f8 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801b8c6:	681b      	ldr	r3, [r3, #0]
 801b8c8:	2b00      	cmp	r3, #0
 801b8ca:	d009      	beq.n	801b8e0 <UTIL_TIMER_IRQ_Handler+0xe4>
 801b8cc:	4b0a      	ldr	r3, [pc, #40]	@ (801b8f8 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801b8ce:	681b      	ldr	r3, [r3, #0]
 801b8d0:	7a1b      	ldrb	r3, [r3, #8]
 801b8d2:	2b00      	cmp	r3, #0
 801b8d4:	d104      	bne.n	801b8e0 <UTIL_TIMER_IRQ_Handler+0xe4>
  {
    TimerSetTimeout( TimerListHead );
 801b8d6:	4b08      	ldr	r3, [pc, #32]	@ (801b8f8 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801b8d8:	681b      	ldr	r3, [r3, #0]
 801b8da:	4618      	mov	r0, r3
 801b8dc:	f000 f858 	bl	801b990 <TimerSetTimeout>
 801b8e0:	69bb      	ldr	r3, [r7, #24]
 801b8e2:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b8e4:	687b      	ldr	r3, [r7, #4]
 801b8e6:	f383 8810 	msr	PRIMASK, r3
}
 801b8ea:	bf00      	nop
  }
  UTIL_TIMER_EXIT_CRITICAL_SECTION();
}
 801b8ec:	bf00      	nop
 801b8ee:	3724      	adds	r7, #36	@ 0x24
 801b8f0:	46bd      	mov	sp, r7
 801b8f2:	bd90      	pop	{r4, r7, pc}
 801b8f4:	0801f42c 	.word	0x0801f42c
 801b8f8:	20001d9c 	.word	0x20001d9c

0801b8fc <UTIL_TIMER_GetCurrentTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetCurrentTime(void)
{
 801b8fc:	b580      	push	{r7, lr}
 801b8fe:	b082      	sub	sp, #8
 801b900:	af00      	add	r7, sp, #0
  uint32_t now = UTIL_TimerDriver.GetTimerValue( );
 801b902:	4b06      	ldr	r3, [pc, #24]	@ (801b91c <UTIL_TIMER_GetCurrentTime+0x20>)
 801b904:	69db      	ldr	r3, [r3, #28]
 801b906:	4798      	blx	r3
 801b908:	6078      	str	r0, [r7, #4]
  return  UTIL_TimerDriver.Tick2ms(now);
 801b90a:	4b04      	ldr	r3, [pc, #16]	@ (801b91c <UTIL_TIMER_GetCurrentTime+0x20>)
 801b90c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801b90e:	6878      	ldr	r0, [r7, #4]
 801b910:	4798      	blx	r3
 801b912:	4603      	mov	r3, r0
}
 801b914:	4618      	mov	r0, r3
 801b916:	3708      	adds	r7, #8
 801b918:	46bd      	mov	sp, r7
 801b91a:	bd80      	pop	{r7, pc}
 801b91c:	0801f42c 	.word	0x0801f42c

0801b920 <UTIL_TIMER_GetElapsedTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetElapsedTime(UTIL_TIMER_Time_t past )
{
 801b920:	b580      	push	{r7, lr}
 801b922:	b084      	sub	sp, #16
 801b924:	af00      	add	r7, sp, #0
 801b926:	6078      	str	r0, [r7, #4]
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 801b928:	4b0a      	ldr	r3, [pc, #40]	@ (801b954 <UTIL_TIMER_GetElapsedTime+0x34>)
 801b92a:	69db      	ldr	r3, [r3, #28]
 801b92c:	4798      	blx	r3
 801b92e:	60f8      	str	r0, [r7, #12]
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 801b930:	4b08      	ldr	r3, [pc, #32]	@ (801b954 <UTIL_TIMER_GetElapsedTime+0x34>)
 801b932:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801b934:	6878      	ldr	r0, [r7, #4]
 801b936:	4798      	blx	r3
 801b938:	60b8      	str	r0, [r7, #8]
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return UTIL_TimerDriver.Tick2ms( nowInTicks- pastInTicks );
 801b93a:	4b06      	ldr	r3, [pc, #24]	@ (801b954 <UTIL_TIMER_GetElapsedTime+0x34>)
 801b93c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801b93e:	68f9      	ldr	r1, [r7, #12]
 801b940:	68ba      	ldr	r2, [r7, #8]
 801b942:	1a8a      	subs	r2, r1, r2
 801b944:	4610      	mov	r0, r2
 801b946:	4798      	blx	r3
 801b948:	4603      	mov	r3, r0
}
 801b94a:	4618      	mov	r0, r3
 801b94c:	3710      	adds	r7, #16
 801b94e:	46bd      	mov	sp, r7
 801b950:	bd80      	pop	{r7, pc}
 801b952:	bf00      	nop
 801b954:	0801f42c 	.word	0x0801f42c

0801b958 <TimerExists>:
 *
 * @param TimerObject Structure containing the timer object parameters
 * @retval 1 (the object is already in the list) or 0
 */
bool TimerExists( UTIL_TIMER_Object_t *TimerObject )
{
 801b958:	b480      	push	{r7}
 801b95a:	b085      	sub	sp, #20
 801b95c:	af00      	add	r7, sp, #0
 801b95e:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801b960:	4b0a      	ldr	r3, [pc, #40]	@ (801b98c <TimerExists+0x34>)
 801b962:	681b      	ldr	r3, [r3, #0]
 801b964:	60fb      	str	r3, [r7, #12]

  while( cur != NULL )
 801b966:	e008      	b.n	801b97a <TimerExists+0x22>
  {
    if( cur == TimerObject )
 801b968:	68fa      	ldr	r2, [r7, #12]
 801b96a:	687b      	ldr	r3, [r7, #4]
 801b96c:	429a      	cmp	r2, r3
 801b96e:	d101      	bne.n	801b974 <TimerExists+0x1c>
    {
      return true;
 801b970:	2301      	movs	r3, #1
 801b972:	e006      	b.n	801b982 <TimerExists+0x2a>
    }
    cur = cur->Next;
 801b974:	68fb      	ldr	r3, [r7, #12]
 801b976:	695b      	ldr	r3, [r3, #20]
 801b978:	60fb      	str	r3, [r7, #12]
  while( cur != NULL )
 801b97a:	68fb      	ldr	r3, [r7, #12]
 801b97c:	2b00      	cmp	r3, #0
 801b97e:	d1f3      	bne.n	801b968 <TimerExists+0x10>
  }
  return false;
 801b980:	2300      	movs	r3, #0
}
 801b982:	4618      	mov	r0, r3
 801b984:	3714      	adds	r7, #20
 801b986:	46bd      	mov	sp, r7
 801b988:	bc80      	pop	{r7}
 801b98a:	4770      	bx	lr
 801b98c:	20001d9c 	.word	0x20001d9c

0801b990 <TimerSetTimeout>:
 * @brief Sets a timeout with the duration "timestamp"
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout( UTIL_TIMER_Object_t *TimerObject )
{
 801b990:	b590      	push	{r4, r7, lr}
 801b992:	b085      	sub	sp, #20
 801b994:	af00      	add	r7, sp, #0
 801b996:	6078      	str	r0, [r7, #4]
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 801b998:	4b11      	ldr	r3, [pc, #68]	@ (801b9e0 <TimerSetTimeout+0x50>)
 801b99a:	6a1b      	ldr	r3, [r3, #32]
 801b99c:	4798      	blx	r3
 801b99e:	60f8      	str	r0, [r7, #12]
  TimerObject->IsPending = 1;
 801b9a0:	687b      	ldr	r3, [r7, #4]
 801b9a2:	2201      	movs	r2, #1
 801b9a4:	721a      	strb	r2, [r3, #8]

  /* In case deadline too soon */
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 801b9a6:	687b      	ldr	r3, [r7, #4]
 801b9a8:	681c      	ldr	r4, [r3, #0]
 801b9aa:	4b0d      	ldr	r3, [pc, #52]	@ (801b9e0 <TimerSetTimeout+0x50>)
 801b9ac:	699b      	ldr	r3, [r3, #24]
 801b9ae:	4798      	blx	r3
 801b9b0:	4602      	mov	r2, r0
 801b9b2:	68fb      	ldr	r3, [r7, #12]
 801b9b4:	4413      	add	r3, r2
 801b9b6:	429c      	cmp	r4, r3
 801b9b8:	d207      	bcs.n	801b9ca <TimerSetTimeout+0x3a>
  {
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 801b9ba:	4b09      	ldr	r3, [pc, #36]	@ (801b9e0 <TimerSetTimeout+0x50>)
 801b9bc:	699b      	ldr	r3, [r3, #24]
 801b9be:	4798      	blx	r3
 801b9c0:	4602      	mov	r2, r0
 801b9c2:	68fb      	ldr	r3, [r7, #12]
 801b9c4:	441a      	add	r2, r3
 801b9c6:	687b      	ldr	r3, [r7, #4]
 801b9c8:	601a      	str	r2, [r3, #0]
  }
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 801b9ca:	4b05      	ldr	r3, [pc, #20]	@ (801b9e0 <TimerSetTimeout+0x50>)
 801b9cc:	689b      	ldr	r3, [r3, #8]
 801b9ce:	687a      	ldr	r2, [r7, #4]
 801b9d0:	6812      	ldr	r2, [r2, #0]
 801b9d2:	4610      	mov	r0, r2
 801b9d4:	4798      	blx	r3
}
 801b9d6:	bf00      	nop
 801b9d8:	3714      	adds	r7, #20
 801b9da:	46bd      	mov	sp, r7
 801b9dc:	bd90      	pop	{r4, r7, pc}
 801b9de:	bf00      	nop
 801b9e0:	0801f42c 	.word	0x0801f42c

0801b9e4 <TimerInsertTimer>:
 *     next timer to expire.
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer( UTIL_TIMER_Object_t *TimerObject)
{
 801b9e4:	b480      	push	{r7}
 801b9e6:	b085      	sub	sp, #20
 801b9e8:	af00      	add	r7, sp, #0
 801b9ea:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801b9ec:	4b14      	ldr	r3, [pc, #80]	@ (801ba40 <TimerInsertTimer+0x5c>)
 801b9ee:	681b      	ldr	r3, [r3, #0]
 801b9f0:	60fb      	str	r3, [r7, #12]
  UTIL_TIMER_Object_t* next = TimerListHead->Next;
 801b9f2:	4b13      	ldr	r3, [pc, #76]	@ (801ba40 <TimerInsertTimer+0x5c>)
 801b9f4:	681b      	ldr	r3, [r3, #0]
 801b9f6:	695b      	ldr	r3, [r3, #20]
 801b9f8:	60bb      	str	r3, [r7, #8]

  while (cur->Next != NULL )
 801b9fa:	e012      	b.n	801ba22 <TimerInsertTimer+0x3e>
  {  
    if( TimerObject->Timestamp  > next->Timestamp )
 801b9fc:	687b      	ldr	r3, [r7, #4]
 801b9fe:	681a      	ldr	r2, [r3, #0]
 801ba00:	68bb      	ldr	r3, [r7, #8]
 801ba02:	681b      	ldr	r3, [r3, #0]
 801ba04:	429a      	cmp	r2, r3
 801ba06:	d905      	bls.n	801ba14 <TimerInsertTimer+0x30>
    {
        cur = next;
 801ba08:	68bb      	ldr	r3, [r7, #8]
 801ba0a:	60fb      	str	r3, [r7, #12]
        next = next->Next;
 801ba0c:	68bb      	ldr	r3, [r7, #8]
 801ba0e:	695b      	ldr	r3, [r3, #20]
 801ba10:	60bb      	str	r3, [r7, #8]
 801ba12:	e006      	b.n	801ba22 <TimerInsertTimer+0x3e>
    }
    else
    {
        cur->Next = TimerObject;
 801ba14:	68fb      	ldr	r3, [r7, #12]
 801ba16:	687a      	ldr	r2, [r7, #4]
 801ba18:	615a      	str	r2, [r3, #20]
        TimerObject->Next = next;
 801ba1a:	687b      	ldr	r3, [r7, #4]
 801ba1c:	68ba      	ldr	r2, [r7, #8]
 801ba1e:	615a      	str	r2, [r3, #20]
        return;
 801ba20:	e009      	b.n	801ba36 <TimerInsertTimer+0x52>
  while (cur->Next != NULL )
 801ba22:	68fb      	ldr	r3, [r7, #12]
 801ba24:	695b      	ldr	r3, [r3, #20]
 801ba26:	2b00      	cmp	r3, #0
 801ba28:	d1e8      	bne.n	801b9fc <TimerInsertTimer+0x18>

    }
  }
  cur->Next = TimerObject;
 801ba2a:	68fb      	ldr	r3, [r7, #12]
 801ba2c:	687a      	ldr	r2, [r7, #4]
 801ba2e:	615a      	str	r2, [r3, #20]
  TimerObject->Next = NULL;
 801ba30:	687b      	ldr	r3, [r7, #4]
 801ba32:	2200      	movs	r2, #0
 801ba34:	615a      	str	r2, [r3, #20]
}
 801ba36:	3714      	adds	r7, #20
 801ba38:	46bd      	mov	sp, r7
 801ba3a:	bc80      	pop	{r7}
 801ba3c:	4770      	bx	lr
 801ba3e:	bf00      	nop
 801ba40:	20001d9c 	.word	0x20001d9c

0801ba44 <TimerInsertNewHeadTimer>:
 *
 * @remark The list is automatically sorted. The list head always contains the
 *         next timer to expire.
 */
void TimerInsertNewHeadTimer( UTIL_TIMER_Object_t *TimerObject )
{
 801ba44:	b580      	push	{r7, lr}
 801ba46:	b084      	sub	sp, #16
 801ba48:	af00      	add	r7, sp, #0
 801ba4a:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801ba4c:	4b0b      	ldr	r3, [pc, #44]	@ (801ba7c <TimerInsertNewHeadTimer+0x38>)
 801ba4e:	681b      	ldr	r3, [r3, #0]
 801ba50:	60fb      	str	r3, [r7, #12]

  if( cur != NULL )
 801ba52:	68fb      	ldr	r3, [r7, #12]
 801ba54:	2b00      	cmp	r3, #0
 801ba56:	d002      	beq.n	801ba5e <TimerInsertNewHeadTimer+0x1a>
  {
    cur->IsPending = 0;
 801ba58:	68fb      	ldr	r3, [r7, #12]
 801ba5a:	2200      	movs	r2, #0
 801ba5c:	721a      	strb	r2, [r3, #8]
  }

  TimerObject->Next = cur;
 801ba5e:	687b      	ldr	r3, [r7, #4]
 801ba60:	68fa      	ldr	r2, [r7, #12]
 801ba62:	615a      	str	r2, [r3, #20]
  TimerListHead = TimerObject;
 801ba64:	4a05      	ldr	r2, [pc, #20]	@ (801ba7c <TimerInsertNewHeadTimer+0x38>)
 801ba66:	687b      	ldr	r3, [r7, #4]
 801ba68:	6013      	str	r3, [r2, #0]
  TimerSetTimeout( TimerListHead );
 801ba6a:	4b04      	ldr	r3, [pc, #16]	@ (801ba7c <TimerInsertNewHeadTimer+0x38>)
 801ba6c:	681b      	ldr	r3, [r3, #0]
 801ba6e:	4618      	mov	r0, r3
 801ba70:	f7ff ff8e 	bl	801b990 <TimerSetTimeout>
}
 801ba74:	bf00      	nop
 801ba76:	3710      	adds	r7, #16
 801ba78:	46bd      	mov	sp, r7
 801ba7a:	bd80      	pop	{r7, pc}
 801ba7c:	20001d9c 	.word	0x20001d9c

0801ba80 <UTIL_ADV_TRACE_Init>:

/** @addtogroup ADV_TRACE_exported_function
 *  @{
 */
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_Init(void)
{
 801ba80:	b580      	push	{r7, lr}
 801ba82:	af00      	add	r7, sp, #0
  /* initialize the Ptr for Read/Write */
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Ctx, 0x0, sizeof(ADV_TRACE_Context));
 801ba84:	2218      	movs	r2, #24
 801ba86:	2100      	movs	r1, #0
 801ba88:	4807      	ldr	r0, [pc, #28]	@ (801baa8 <UTIL_ADV_TRACE_Init+0x28>)
 801ba8a:	f7fe fffc 	bl	801aa86 <UTIL_MEM_set_8>
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Buffer, 0x0, sizeof(ADV_TRACE_Buffer));
 801ba8e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 801ba92:	2100      	movs	r1, #0
 801ba94:	4805      	ldr	r0, [pc, #20]	@ (801baac <UTIL_ADV_TRACE_Init+0x2c>)
 801ba96:	f7fe fff6 	bl	801aa86 <UTIL_MEM_set_8>
#endif
  /* Allocate Lock resource */
  UTIL_ADV_TRACE_INIT_CRITICAL_SECTION();

  /* Initialize the Low Level interface */
  return UTIL_TraceDriver.Init(TRACE_TxCpltCallback);
 801ba9a:	4b05      	ldr	r3, [pc, #20]	@ (801bab0 <UTIL_ADV_TRACE_Init+0x30>)
 801ba9c:	681b      	ldr	r3, [r3, #0]
 801ba9e:	4805      	ldr	r0, [pc, #20]	@ (801bab4 <UTIL_ADV_TRACE_Init+0x34>)
 801baa0:	4798      	blx	r3
 801baa2:	4603      	mov	r3, r0
}
 801baa4:	4618      	mov	r0, r3
 801baa6:	bd80      	pop	{r7, pc}
 801baa8:	20001da0 	.word	0x20001da0
 801baac:	20001db8 	.word	0x20001db8
 801bab0:	0801f46c 	.word	0x0801f46c
 801bab4:	0801bd21 	.word	0x0801bd21

0801bab8 <UTIL_ADV_TRACE_IsBufferEmpty>:
  /* Un-initialize the Low Level interface */
  return UTIL_TraceDriver.DeInit();
}

uint8_t UTIL_ADV_TRACE_IsBufferEmpty(void)
{
 801bab8:	b480      	push	{r7}
 801baba:	af00      	add	r7, sp, #0
  /* check of the buffer is empty */
  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 801babc:	4b06      	ldr	r3, [pc, #24]	@ (801bad8 <UTIL_ADV_TRACE_IsBufferEmpty+0x20>)
 801babe:	8a5a      	ldrh	r2, [r3, #18]
 801bac0:	4b05      	ldr	r3, [pc, #20]	@ (801bad8 <UTIL_ADV_TRACE_IsBufferEmpty+0x20>)
 801bac2:	8a1b      	ldrh	r3, [r3, #16]
 801bac4:	429a      	cmp	r2, r3
 801bac6:	d101      	bne.n	801bacc <UTIL_ADV_TRACE_IsBufferEmpty+0x14>
    return 1;
 801bac8:	2301      	movs	r3, #1
 801baca:	e000      	b.n	801bace <UTIL_ADV_TRACE_IsBufferEmpty+0x16>
  return 0;
 801bacc:	2300      	movs	r3, #0
}
 801bace:	4618      	mov	r0, r3
 801bad0:	46bd      	mov	sp, r7
 801bad2:	bc80      	pop	{r7}
 801bad4:	4770      	bx	lr
 801bad6:	bf00      	nop
 801bad8:	20001da0 	.word	0x20001da0

0801badc <UTIL_ADV_TRACE_COND_FSend>:
  return UTIL_TraceDriver.StartRx(UserCallback);
}

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_COND_FSend(uint32_t VerboseLevel, uint32_t Region, uint32_t TimeStampState, const char *strFormat, ...)
{
 801badc:	b408      	push	{r3}
 801bade:	b580      	push	{r7, lr}
 801bae0:	b08d      	sub	sp, #52	@ 0x34
 801bae2:	af00      	add	r7, sp, #0
 801bae4:	60f8      	str	r0, [r7, #12]
 801bae6:	60b9      	str	r1, [r7, #8]
 801bae8:	607a      	str	r2, [r7, #4]
  va_list vaArgs;
#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  uint8_t buf[UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
  uint16_t timestamp_size = 0u;
 801baea:	2300      	movs	r3, #0
 801baec:	82fb      	strh	r3, [r7, #22]
  uint16_t writepos;
  uint16_t idx;
#else
  uint8_t buf[UTIL_ADV_TRACE_TMP_BUF_SIZE+UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
#endif
  uint16_t buff_size = 0u;
 801baee:	2300      	movs	r3, #0
 801baf0:	85bb      	strh	r3, [r7, #44]	@ 0x2c

  /* check verbose level */
  if(!(ADV_TRACE_Ctx.CurrentVerboseLevel >= VerboseLevel))
 801baf2:	4b37      	ldr	r3, [pc, #220]	@ (801bbd0 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801baf4:	7a1b      	ldrb	r3, [r3, #8]
 801baf6:	461a      	mov	r2, r3
 801baf8:	68fb      	ldr	r3, [r7, #12]
 801bafa:	4293      	cmp	r3, r2
 801bafc:	d902      	bls.n	801bb04 <UTIL_ADV_TRACE_COND_FSend+0x28>
  {
    return UTIL_ADV_TRACE_GIVEUP;
 801bafe:	f06f 0304 	mvn.w	r3, #4
 801bb02:	e05e      	b.n	801bbc2 <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

  if((Region & ADV_TRACE_Ctx.RegionMask) != Region)
 801bb04:	4b32      	ldr	r3, [pc, #200]	@ (801bbd0 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801bb06:	68da      	ldr	r2, [r3, #12]
 801bb08:	68bb      	ldr	r3, [r7, #8]
 801bb0a:	4013      	ands	r3, r2
 801bb0c:	68ba      	ldr	r2, [r7, #8]
 801bb0e:	429a      	cmp	r2, r3
 801bb10:	d002      	beq.n	801bb18 <UTIL_ADV_TRACE_COND_FSend+0x3c>
  {
    return UTIL_ADV_TRACE_REGIONMASKED;
 801bb12:	f06f 0305 	mvn.w	r3, #5
 801bb16:	e054      	b.n	801bbc2 <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if((ADV_TRACE_Ctx.timestamp_func != NULL) && (TimeStampState != 0u))
 801bb18:	4b2d      	ldr	r3, [pc, #180]	@ (801bbd0 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801bb1a:	685b      	ldr	r3, [r3, #4]
 801bb1c:	2b00      	cmp	r3, #0
 801bb1e:	d00a      	beq.n	801bb36 <UTIL_ADV_TRACE_COND_FSend+0x5a>
 801bb20:	687b      	ldr	r3, [r7, #4]
 801bb22:	2b00      	cmp	r3, #0
 801bb24:	d007      	beq.n	801bb36 <UTIL_ADV_TRACE_COND_FSend+0x5a>
  {
    ADV_TRACE_Ctx.timestamp_func(buf,&timestamp_size);
 801bb26:	4b2a      	ldr	r3, [pc, #168]	@ (801bbd0 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801bb28:	685b      	ldr	r3, [r3, #4]
 801bb2a:	f107 0116 	add.w	r1, r7, #22
 801bb2e:	f107 0218 	add.w	r2, r7, #24
 801bb32:	4610      	mov	r0, r2
 801bb34:	4798      	blx	r3
  }

  va_start( vaArgs, strFormat);
 801bb36:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 801bb3a:	62bb      	str	r3, [r7, #40]	@ 0x28
  buff_size =(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)sztmp,UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 801bb3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bb3e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801bb40:	f44f 7100 	mov.w	r1, #512	@ 0x200
 801bb44:	4823      	ldr	r0, [pc, #140]	@ (801bbd4 <UTIL_ADV_TRACE_COND_FSend+0xf8>)
 801bb46:	f7ff fa2b 	bl	801afa0 <tiny_vsnprintf_like>
 801bb4a:	4603      	mov	r3, r0
 801bb4c:	85bb      	strh	r3, [r7, #44]	@ 0x2c

  TRACE_Lock();
 801bb4e:	f000 f9f1 	bl	801bf34 <TRACE_Lock>

  /* if allocation is ok, write data into the buffer */
  if (TRACE_AllocateBufer((buff_size+timestamp_size),&writepos) != -1)
 801bb52:	8afa      	ldrh	r2, [r7, #22]
 801bb54:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 801bb56:	4413      	add	r3, r2
 801bb58:	b29b      	uxth	r3, r3
 801bb5a:	f107 0214 	add.w	r2, r7, #20
 801bb5e:	4611      	mov	r1, r2
 801bb60:	4618      	mov	r0, r3
 801bb62:	f000 f969 	bl	801be38 <TRACE_AllocateBufer>
 801bb66:	4603      	mov	r3, r0
 801bb68:	f1b3 3fff 	cmp.w	r3, #4294967295
 801bb6c:	d025      	beq.n	801bbba <UTIL_ADV_TRACE_COND_FSend+0xde>
    }
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

    /* copy the timestamp */
    for (idx = 0u; idx < timestamp_size; idx++)
 801bb6e:	2300      	movs	r3, #0
 801bb70:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 801bb72:	e00e      	b.n	801bb92 <UTIL_ADV_TRACE_COND_FSend+0xb6>
    {
      ADV_TRACE_Buffer[writepos] = buf[idx];
 801bb74:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801bb76:	8aba      	ldrh	r2, [r7, #20]
 801bb78:	3330      	adds	r3, #48	@ 0x30
 801bb7a:	443b      	add	r3, r7
 801bb7c:	f813 1c18 	ldrb.w	r1, [r3, #-24]
 801bb80:	4b15      	ldr	r3, [pc, #84]	@ (801bbd8 <UTIL_ADV_TRACE_COND_FSend+0xfc>)
 801bb82:	5499      	strb	r1, [r3, r2]
      writepos = writepos + 1u;
 801bb84:	8abb      	ldrh	r3, [r7, #20]
 801bb86:	3301      	adds	r3, #1
 801bb88:	b29b      	uxth	r3, r3
 801bb8a:	82bb      	strh	r3, [r7, #20]
    for (idx = 0u; idx < timestamp_size; idx++)
 801bb8c:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801bb8e:	3301      	adds	r3, #1
 801bb90:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 801bb92:	8afb      	ldrh	r3, [r7, #22]
 801bb94:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 801bb96:	429a      	cmp	r2, r3
 801bb98:	d3ec      	bcc.n	801bb74 <UTIL_ADV_TRACE_COND_FSend+0x98>
    }

    /* copy the data */
    (void)UTIL_ADV_TRACE_VSNPRINTF((char *)(&ADV_TRACE_Buffer[writepos]), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 801bb9a:	8abb      	ldrh	r3, [r7, #20]
 801bb9c:	461a      	mov	r2, r3
 801bb9e:	4b0e      	ldr	r3, [pc, #56]	@ (801bbd8 <UTIL_ADV_TRACE_COND_FSend+0xfc>)
 801bba0:	18d0      	adds	r0, r2, r3
 801bba2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bba4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801bba6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 801bbaa:	f7ff f9f9 	bl	801afa0 <tiny_vsnprintf_like>
    va_end(vaArgs);

    TRACE_UnLock();
 801bbae:	f000 f9df 	bl	801bf70 <TRACE_UnLock>

    return TRACE_Send();
 801bbb2:	f000 f831 	bl	801bc18 <TRACE_Send>
 801bbb6:	4603      	mov	r3, r0
 801bbb8:	e003      	b.n	801bbc2 <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

  va_end(vaArgs);
  TRACE_UnLock();
 801bbba:	f000 f9d9 	bl	801bf70 <TRACE_UnLock>
    ADV_TRACE_Ctx.OverRunStatus = TRACE_OVERRUN_INDICATION;
  }
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

  return UTIL_ADV_TRACE_MEM_FULL;
 801bbbe:	f06f 0302 	mvn.w	r3, #2
  buff_size += (uint16_t) UTIL_ADV_TRACE_VSNPRINTF((char* )(buf + buff_size), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
  va_end(vaArgs);

  return UTIL_ADV_TRACE_Send(buf, buff_size);
#endif
}
 801bbc2:	4618      	mov	r0, r3
 801bbc4:	3734      	adds	r7, #52	@ 0x34
 801bbc6:	46bd      	mov	sp, r7
 801bbc8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801bbcc:	b001      	add	sp, #4
 801bbce:	4770      	bx	lr
 801bbd0:	20001da0 	.word	0x20001da0
 801bbd4:	200021b8 	.word	0x200021b8
 801bbd8:	20001db8 	.word	0x20001db8

0801bbdc <UTIL_ADV_TRACE_RegisterTimeStampFunction>:
}
#endif

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
void UTIL_ADV_TRACE_RegisterTimeStampFunction(cb_timestamp *cb)
{
 801bbdc:	b480      	push	{r7}
 801bbde:	b083      	sub	sp, #12
 801bbe0:	af00      	add	r7, sp, #0
 801bbe2:	6078      	str	r0, [r7, #4]
  ADV_TRACE_Ctx.timestamp_func = *cb;
 801bbe4:	4a03      	ldr	r2, [pc, #12]	@ (801bbf4 <UTIL_ADV_TRACE_RegisterTimeStampFunction+0x18>)
 801bbe6:	687b      	ldr	r3, [r7, #4]
 801bbe8:	6053      	str	r3, [r2, #4]
}
 801bbea:	bf00      	nop
 801bbec:	370c      	adds	r7, #12
 801bbee:	46bd      	mov	sp, r7
 801bbf0:	bc80      	pop	{r7}
 801bbf2:	4770      	bx	lr
 801bbf4:	20001da0 	.word	0x20001da0

0801bbf8 <UTIL_ADV_TRACE_SetVerboseLevel>:

void UTIL_ADV_TRACE_SetVerboseLevel(uint8_t Level)
{
 801bbf8:	b480      	push	{r7}
 801bbfa:	b083      	sub	sp, #12
 801bbfc:	af00      	add	r7, sp, #0
 801bbfe:	4603      	mov	r3, r0
 801bc00:	71fb      	strb	r3, [r7, #7]
  ADV_TRACE_Ctx.CurrentVerboseLevel = Level;
 801bc02:	4a04      	ldr	r2, [pc, #16]	@ (801bc14 <UTIL_ADV_TRACE_SetVerboseLevel+0x1c>)
 801bc04:	79fb      	ldrb	r3, [r7, #7]
 801bc06:	7213      	strb	r3, [r2, #8]
}
 801bc08:	bf00      	nop
 801bc0a:	370c      	adds	r7, #12
 801bc0c:	46bd      	mov	sp, r7
 801bc0e:	bc80      	pop	{r7}
 801bc10:	4770      	bx	lr
 801bc12:	bf00      	nop
 801bc14:	20001da0 	.word	0x20001da0

0801bc18 <TRACE_Send>:
/**
 * @brief send the data of the trace to low layer
 * @retval Status based on @ref UTIL_ADV_TRACE_Status_t
 */
static UTIL_ADV_TRACE_Status_t TRACE_Send(void)
{
 801bc18:	b580      	push	{r7, lr}
 801bc1a:	b088      	sub	sp, #32
 801bc1c:	af00      	add	r7, sp, #0
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;
 801bc1e:	2300      	movs	r3, #0
 801bc20:	77fb      	strb	r3, [r7, #31]
  uint8_t *ptr = NULL;
 801bc22:	2300      	movs	r3, #0
 801bc24:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801bc26:	f3ef 8310 	mrs	r3, PRIMASK
 801bc2a:	613b      	str	r3, [r7, #16]
  return(result);
 801bc2c:	693b      	ldr	r3, [r7, #16]

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801bc2e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801bc30:	b672      	cpsid	i
}
 801bc32:	bf00      	nop

  if(TRACE_IsLocked() == 0u)
 801bc34:	f000 f9ba 	bl	801bfac <TRACE_IsLocked>
 801bc38:	4603      	mov	r3, r0
 801bc3a:	2b00      	cmp	r3, #0
 801bc3c:	d15d      	bne.n	801bcfa <TRACE_Send+0xe2>
  {
    TRACE_Lock();
 801bc3e:	f000 f979 	bl	801bf34 <TRACE_Lock>

    if(ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr)
 801bc42:	4b34      	ldr	r3, [pc, #208]	@ (801bd14 <TRACE_Send+0xfc>)
 801bc44:	8a1a      	ldrh	r2, [r3, #16]
 801bc46:	4b33      	ldr	r3, [pc, #204]	@ (801bd14 <TRACE_Send+0xfc>)
 801bc48:	8a5b      	ldrh	r3, [r3, #18]
 801bc4a:	429a      	cmp	r2, r3
 801bc4c:	d04d      	beq.n	801bcea <TRACE_Send+0xd2>
    {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
      if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 801bc4e:	4b31      	ldr	r3, [pc, #196]	@ (801bd14 <TRACE_Send+0xfc>)
 801bc50:	789b      	ldrb	r3, [r3, #2]
 801bc52:	2b01      	cmp	r3, #1
 801bc54:	d117      	bne.n	801bc86 <TRACE_Send+0x6e>
      {
        ADV_TRACE_Ctx.TraceSentSize = (uint16_t) (ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr);
 801bc56:	4b2f      	ldr	r3, [pc, #188]	@ (801bd14 <TRACE_Send+0xfc>)
 801bc58:	881a      	ldrh	r2, [r3, #0]
 801bc5a:	4b2e      	ldr	r3, [pc, #184]	@ (801bd14 <TRACE_Send+0xfc>)
 801bc5c:	8a1b      	ldrh	r3, [r3, #16]
 801bc5e:	1ad3      	subs	r3, r2, r3
 801bc60:	b29a      	uxth	r2, r3
 801bc62:	4b2c      	ldr	r3, [pc, #176]	@ (801bd14 <TRACE_Send+0xfc>)
 801bc64:	829a      	strh	r2, [r3, #20]
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 801bc66:	4b2b      	ldr	r3, [pc, #172]	@ (801bd14 <TRACE_Send+0xfc>)
 801bc68:	2202      	movs	r2, #2
 801bc6a:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = 0;
 801bc6c:	4b29      	ldr	r3, [pc, #164]	@ (801bd14 <TRACE_Send+0xfc>)
 801bc6e:	2200      	movs	r2, #0
 801bc70:	801a      	strh	r2, [r3, #0]

        UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n", ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);

        if(0u == ADV_TRACE_Ctx.TraceSentSize)
 801bc72:	4b28      	ldr	r3, [pc, #160]	@ (801bd14 <TRACE_Send+0xfc>)
 801bc74:	8a9b      	ldrh	r3, [r3, #20]
 801bc76:	2b00      	cmp	r3, #0
 801bc78:	d105      	bne.n	801bc86 <TRACE_Send+0x6e>
        {
          ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801bc7a:	4b26      	ldr	r3, [pc, #152]	@ (801bd14 <TRACE_Send+0xfc>)
 801bc7c:	2200      	movs	r2, #0
 801bc7e:	709a      	strb	r2, [r3, #2]
          ADV_TRACE_Ctx.TraceRdPtr = 0;
 801bc80:	4b24      	ldr	r3, [pc, #144]	@ (801bd14 <TRACE_Send+0xfc>)
 801bc82:	2200      	movs	r2, #0
 801bc84:	821a      	strh	r2, [r3, #16]
        }
      }

      if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 801bc86:	4b23      	ldr	r3, [pc, #140]	@ (801bd14 <TRACE_Send+0xfc>)
 801bc88:	789b      	ldrb	r3, [r3, #2]
 801bc8a:	2b00      	cmp	r3, #0
 801bc8c:	d115      	bne.n	801bcba <TRACE_Send+0xa2>
      {
#endif
        if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801bc8e:	4b21      	ldr	r3, [pc, #132]	@ (801bd14 <TRACE_Send+0xfc>)
 801bc90:	8a5a      	ldrh	r2, [r3, #18]
 801bc92:	4b20      	ldr	r3, [pc, #128]	@ (801bd14 <TRACE_Send+0xfc>)
 801bc94:	8a1b      	ldrh	r3, [r3, #16]
 801bc96:	429a      	cmp	r2, r3
 801bc98:	d908      	bls.n	801bcac <TRACE_Send+0x94>
        {
          ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 801bc9a:	4b1e      	ldr	r3, [pc, #120]	@ (801bd14 <TRACE_Send+0xfc>)
 801bc9c:	8a5a      	ldrh	r2, [r3, #18]
 801bc9e:	4b1d      	ldr	r3, [pc, #116]	@ (801bd14 <TRACE_Send+0xfc>)
 801bca0:	8a1b      	ldrh	r3, [r3, #16]
 801bca2:	1ad3      	subs	r3, r2, r3
 801bca4:	b29a      	uxth	r2, r3
 801bca6:	4b1b      	ldr	r3, [pc, #108]	@ (801bd14 <TRACE_Send+0xfc>)
 801bca8:	829a      	strh	r2, [r3, #20]
 801bcaa:	e006      	b.n	801bcba <TRACE_Send+0xa2>
        }
        else /* TraceRdPtr > TraceWrPtr */
        {
          ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 801bcac:	4b19      	ldr	r3, [pc, #100]	@ (801bd14 <TRACE_Send+0xfc>)
 801bcae:	8a1b      	ldrh	r3, [r3, #16]
 801bcb0:	f5c3 6380 	rsb	r3, r3, #1024	@ 0x400
 801bcb4:	b29a      	uxth	r2, r3
 801bcb6:	4b17      	ldr	r3, [pc, #92]	@ (801bd14 <TRACE_Send+0xfc>)
 801bcb8:	829a      	strh	r2, [r3, #20]

        }
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
      }
#endif
      ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 801bcba:	4b16      	ldr	r3, [pc, #88]	@ (801bd14 <TRACE_Send+0xfc>)
 801bcbc:	8a1b      	ldrh	r3, [r3, #16]
 801bcbe:	461a      	mov	r2, r3
 801bcc0:	4b15      	ldr	r3, [pc, #84]	@ (801bd18 <TRACE_Send+0x100>)
 801bcc2:	4413      	add	r3, r2
 801bcc4:	61bb      	str	r3, [r7, #24]
 801bcc6:	697b      	ldr	r3, [r7, #20]
 801bcc8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801bcca:	68fb      	ldr	r3, [r7, #12]
 801bccc:	f383 8810 	msr	PRIMASK, r3
}
 801bcd0:	bf00      	nop

      UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
      UTIL_ADV_TRACE_PreSendHook();
 801bcd2:	f7e6 fa61 	bl	8002198 <UTIL_ADV_TRACE_PreSendHook>

      UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n", ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
      ret = UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 801bcd6:	4b11      	ldr	r3, [pc, #68]	@ (801bd1c <TRACE_Send+0x104>)
 801bcd8:	68db      	ldr	r3, [r3, #12]
 801bcda:	4a0e      	ldr	r2, [pc, #56]	@ (801bd14 <TRACE_Send+0xfc>)
 801bcdc:	8a92      	ldrh	r2, [r2, #20]
 801bcde:	4611      	mov	r1, r2
 801bce0:	69b8      	ldr	r0, [r7, #24]
 801bce2:	4798      	blx	r3
 801bce4:	4603      	mov	r3, r0
 801bce6:	77fb      	strb	r3, [r7, #31]
 801bce8:	e00d      	b.n	801bd06 <TRACE_Send+0xee>
    }
    else
    {
      TRACE_UnLock();
 801bcea:	f000 f941 	bl	801bf70 <TRACE_UnLock>
 801bcee:	697b      	ldr	r3, [r7, #20]
 801bcf0:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801bcf2:	68bb      	ldr	r3, [r7, #8]
 801bcf4:	f383 8810 	msr	PRIMASK, r3
}
 801bcf8:	e005      	b.n	801bd06 <TRACE_Send+0xee>
 801bcfa:	697b      	ldr	r3, [r7, #20]
 801bcfc:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801bcfe:	687b      	ldr	r3, [r7, #4]
 801bd00:	f383 8810 	msr	PRIMASK, r3
}
 801bd04:	bf00      	nop
  else
  {
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  }

  return ret;
 801bd06:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801bd0a:	4618      	mov	r0, r3
 801bd0c:	3720      	adds	r7, #32
 801bd0e:	46bd      	mov	sp, r7
 801bd10:	bd80      	pop	{r7, pc}
 801bd12:	bf00      	nop
 801bd14:	20001da0 	.word	0x20001da0
 801bd18:	20001db8 	.word	0x20001db8
 801bd1c:	0801f46c 	.word	0x0801f46c

0801bd20 <TRACE_TxCpltCallback>:
 * @brief Tx callback called by the low layer level to inform a transfer complete
 * @param Ptr pointer not used only for HAL compatibility
 * @retval none
 */
static void TRACE_TxCpltCallback(void *Ptr)
{
 801bd20:	b580      	push	{r7, lr}
 801bd22:	b088      	sub	sp, #32
 801bd24:	af00      	add	r7, sp, #0
 801bd26:	6078      	str	r0, [r7, #4]
  uint8_t *ptr = NULL;
 801bd28:	2300      	movs	r3, #0
 801bd2a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801bd2c:	f3ef 8310 	mrs	r3, PRIMASK
 801bd30:	617b      	str	r3, [r7, #20]
  return(result);
 801bd32:	697b      	ldr	r3, [r7, #20]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801bd34:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 801bd36:	b672      	cpsid	i
}
 801bd38:	bf00      	nop
    ADV_TRACE_Ctx.TraceSentSize = 0u;
  }
#endif

#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if(TRACE_UNCHUNK_TRANSFER == ADV_TRACE_Ctx.unchunk_status)
 801bd3a:	4b3c      	ldr	r3, [pc, #240]	@ (801be2c <TRACE_TxCpltCallback+0x10c>)
 801bd3c:	789b      	ldrb	r3, [r3, #2]
 801bd3e:	2b02      	cmp	r3, #2
 801bd40:	d106      	bne.n	801bd50 <TRACE_TxCpltCallback+0x30>
  {
    ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801bd42:	4b3a      	ldr	r3, [pc, #232]	@ (801be2c <TRACE_TxCpltCallback+0x10c>)
 801bd44:	2200      	movs	r2, #0
 801bd46:	709a      	strb	r2, [r3, #2]
    ADV_TRACE_Ctx.TraceRdPtr = 0;
 801bd48:	4b38      	ldr	r3, [pc, #224]	@ (801be2c <TRACE_TxCpltCallback+0x10c>)
 801bd4a:	2200      	movs	r2, #0
 801bd4c:	821a      	strh	r2, [r3, #16]
 801bd4e:	e00a      	b.n	801bd66 <TRACE_TxCpltCallback+0x46>
    UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk complete\n");
  }
  else
  {
    ADV_TRACE_Ctx.TraceRdPtr = (ADV_TRACE_Ctx.TraceRdPtr + ADV_TRACE_Ctx.TraceSentSize) % UTIL_ADV_TRACE_FIFO_SIZE;
 801bd50:	4b36      	ldr	r3, [pc, #216]	@ (801be2c <TRACE_TxCpltCallback+0x10c>)
 801bd52:	8a1a      	ldrh	r2, [r3, #16]
 801bd54:	4b35      	ldr	r3, [pc, #212]	@ (801be2c <TRACE_TxCpltCallback+0x10c>)
 801bd56:	8a9b      	ldrh	r3, [r3, #20]
 801bd58:	4413      	add	r3, r2
 801bd5a:	b29b      	uxth	r3, r3
 801bd5c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801bd60:	b29a      	uxth	r2, r3
 801bd62:	4b32      	ldr	r3, [pc, #200]	@ (801be2c <TRACE_TxCpltCallback+0x10c>)
 801bd64:	821a      	strh	r2, [r3, #16]
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
    return;
  }
#endif

  if((ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr) && (1u == ADV_TRACE_Ctx.TraceLock))
 801bd66:	4b31      	ldr	r3, [pc, #196]	@ (801be2c <TRACE_TxCpltCallback+0x10c>)
 801bd68:	8a1a      	ldrh	r2, [r3, #16]
 801bd6a:	4b30      	ldr	r3, [pc, #192]	@ (801be2c <TRACE_TxCpltCallback+0x10c>)
 801bd6c:	8a5b      	ldrh	r3, [r3, #18]
 801bd6e:	429a      	cmp	r2, r3
 801bd70:	d04d      	beq.n	801be0e <TRACE_TxCpltCallback+0xee>
 801bd72:	4b2e      	ldr	r3, [pc, #184]	@ (801be2c <TRACE_TxCpltCallback+0x10c>)
 801bd74:	8adb      	ldrh	r3, [r3, #22]
 801bd76:	2b01      	cmp	r3, #1
 801bd78:	d149      	bne.n	801be0e <TRACE_TxCpltCallback+0xee>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 801bd7a:	4b2c      	ldr	r3, [pc, #176]	@ (801be2c <TRACE_TxCpltCallback+0x10c>)
 801bd7c:	789b      	ldrb	r3, [r3, #2]
 801bd7e:	2b01      	cmp	r3, #1
 801bd80:	d117      	bne.n	801bdb2 <TRACE_TxCpltCallback+0x92>
    {
      ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr;
 801bd82:	4b2a      	ldr	r3, [pc, #168]	@ (801be2c <TRACE_TxCpltCallback+0x10c>)
 801bd84:	881a      	ldrh	r2, [r3, #0]
 801bd86:	4b29      	ldr	r3, [pc, #164]	@ (801be2c <TRACE_TxCpltCallback+0x10c>)
 801bd88:	8a1b      	ldrh	r3, [r3, #16]
 801bd8a:	1ad3      	subs	r3, r2, r3
 801bd8c:	b29a      	uxth	r2, r3
 801bd8e:	4b27      	ldr	r3, [pc, #156]	@ (801be2c <TRACE_TxCpltCallback+0x10c>)
 801bd90:	829a      	strh	r2, [r3, #20]
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 801bd92:	4b26      	ldr	r3, [pc, #152]	@ (801be2c <TRACE_TxCpltCallback+0x10c>)
 801bd94:	2202      	movs	r2, #2
 801bd96:	709a      	strb	r2, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = 0;
 801bd98:	4b24      	ldr	r3, [pc, #144]	@ (801be2c <TRACE_TxCpltCallback+0x10c>)
 801bd9a:	2200      	movs	r2, #0
 801bd9c:	801a      	strh	r2, [r3, #0]

      UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n", ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);

      if(0u == ADV_TRACE_Ctx.TraceSentSize)
 801bd9e:	4b23      	ldr	r3, [pc, #140]	@ (801be2c <TRACE_TxCpltCallback+0x10c>)
 801bda0:	8a9b      	ldrh	r3, [r3, #20]
 801bda2:	2b00      	cmp	r3, #0
 801bda4:	d105      	bne.n	801bdb2 <TRACE_TxCpltCallback+0x92>
      {
        /* this case occurs when an ongoing write aligned the Rd position with chunk position */
        /* in that case the unchunk is forgot */
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801bda6:	4b21      	ldr	r3, [pc, #132]	@ (801be2c <TRACE_TxCpltCallback+0x10c>)
 801bda8:	2200      	movs	r2, #0
 801bdaa:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.TraceRdPtr = 0;
 801bdac:	4b1f      	ldr	r3, [pc, #124]	@ (801be2c <TRACE_TxCpltCallback+0x10c>)
 801bdae:	2200      	movs	r2, #0
 801bdb0:	821a      	strh	r2, [r3, #16]
      }
    }

    if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 801bdb2:	4b1e      	ldr	r3, [pc, #120]	@ (801be2c <TRACE_TxCpltCallback+0x10c>)
 801bdb4:	789b      	ldrb	r3, [r3, #2]
 801bdb6:	2b00      	cmp	r3, #0
 801bdb8:	d115      	bne.n	801bde6 <TRACE_TxCpltCallback+0xc6>
    {
#endif
      if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801bdba:	4b1c      	ldr	r3, [pc, #112]	@ (801be2c <TRACE_TxCpltCallback+0x10c>)
 801bdbc:	8a5a      	ldrh	r2, [r3, #18]
 801bdbe:	4b1b      	ldr	r3, [pc, #108]	@ (801be2c <TRACE_TxCpltCallback+0x10c>)
 801bdc0:	8a1b      	ldrh	r3, [r3, #16]
 801bdc2:	429a      	cmp	r2, r3
 801bdc4:	d908      	bls.n	801bdd8 <TRACE_TxCpltCallback+0xb8>
      {
        ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 801bdc6:	4b19      	ldr	r3, [pc, #100]	@ (801be2c <TRACE_TxCpltCallback+0x10c>)
 801bdc8:	8a5a      	ldrh	r2, [r3, #18]
 801bdca:	4b18      	ldr	r3, [pc, #96]	@ (801be2c <TRACE_TxCpltCallback+0x10c>)
 801bdcc:	8a1b      	ldrh	r3, [r3, #16]
 801bdce:	1ad3      	subs	r3, r2, r3
 801bdd0:	b29a      	uxth	r2, r3
 801bdd2:	4b16      	ldr	r3, [pc, #88]	@ (801be2c <TRACE_TxCpltCallback+0x10c>)
 801bdd4:	829a      	strh	r2, [r3, #20]
 801bdd6:	e006      	b.n	801bde6 <TRACE_TxCpltCallback+0xc6>
      }
      else /* TraceRdPtr > TraceWrPtr */
      {
        ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 801bdd8:	4b14      	ldr	r3, [pc, #80]	@ (801be2c <TRACE_TxCpltCallback+0x10c>)
 801bdda:	8a1b      	ldrh	r3, [r3, #16]
 801bddc:	f5c3 6380 	rsb	r3, r3, #1024	@ 0x400
 801bde0:	b29a      	uxth	r2, r3
 801bde2:	4b12      	ldr	r3, [pc, #72]	@ (801be2c <TRACE_TxCpltCallback+0x10c>)
 801bde4:	829a      	strh	r2, [r3, #20]
      }
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    }
#endif
    ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 801bde6:	4b11      	ldr	r3, [pc, #68]	@ (801be2c <TRACE_TxCpltCallback+0x10c>)
 801bde8:	8a1b      	ldrh	r3, [r3, #16]
 801bdea:	461a      	mov	r2, r3
 801bdec:	4b10      	ldr	r3, [pc, #64]	@ (801be30 <TRACE_TxCpltCallback+0x110>)
 801bdee:	4413      	add	r3, r2
 801bdf0:	61fb      	str	r3, [r7, #28]
 801bdf2:	69bb      	ldr	r3, [r7, #24]
 801bdf4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801bdf6:	693b      	ldr	r3, [r7, #16]
 801bdf8:	f383 8810 	msr	PRIMASK, r3
}
 801bdfc:	bf00      	nop
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
    UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n", ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 801bdfe:	4b0d      	ldr	r3, [pc, #52]	@ (801be34 <TRACE_TxCpltCallback+0x114>)
 801be00:	68db      	ldr	r3, [r3, #12]
 801be02:	4a0a      	ldr	r2, [pc, #40]	@ (801be2c <TRACE_TxCpltCallback+0x10c>)
 801be04:	8a92      	ldrh	r2, [r2, #20]
 801be06:	4611      	mov	r1, r2
 801be08:	69f8      	ldr	r0, [r7, #28]
 801be0a:	4798      	blx	r3
 801be0c:	e00a      	b.n	801be24 <TRACE_TxCpltCallback+0x104>
 801be0e:	69bb      	ldr	r3, [r7, #24]
 801be10:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801be12:	68fb      	ldr	r3, [r7, #12]
 801be14:	f383 8810 	msr	PRIMASK, r3
}
 801be18:	bf00      	nop
  }
  else
  {
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
    UTIL_ADV_TRACE_PostSendHook();
 801be1a:	f7e6 f9c5 	bl	80021a8 <UTIL_ADV_TRACE_PostSendHook>
    TRACE_UnLock();
 801be1e:	f000 f8a7 	bl	801bf70 <TRACE_UnLock>
  }
}
 801be22:	bf00      	nop
 801be24:	bf00      	nop
 801be26:	3720      	adds	r7, #32
 801be28:	46bd      	mov	sp, r7
 801be2a:	bd80      	pop	{r7, pc}
 801be2c:	20001da0 	.word	0x20001da0
 801be30:	20001db8 	.word	0x20001db8
 801be34:	0801f46c 	.word	0x0801f46c

0801be38 <TRACE_AllocateBufer>:
 * @param  Size to allocate within fifo
 * @param  Pos position within the fifo
 * @retval write position inside the buffer is -1 no space available.
 */
static int16_t TRACE_AllocateBufer(uint16_t Size, uint16_t *Pos)
{
 801be38:	b480      	push	{r7}
 801be3a:	b087      	sub	sp, #28
 801be3c:	af00      	add	r7, sp, #0
 801be3e:	4603      	mov	r3, r0
 801be40:	6039      	str	r1, [r7, #0]
 801be42:	80fb      	strh	r3, [r7, #6]
  uint16_t freesize;
  int16_t ret = -1;
 801be44:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801be48:	82bb      	strh	r3, [r7, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801be4a:	f3ef 8310 	mrs	r3, PRIMASK
 801be4e:	60fb      	str	r3, [r7, #12]
  return(result);
 801be50:	68fb      	ldr	r3, [r7, #12]

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801be52:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 801be54:	b672      	cpsid	i
}
 801be56:	bf00      	nop

  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 801be58:	4b35      	ldr	r3, [pc, #212]	@ (801bf30 <TRACE_AllocateBufer+0xf8>)
 801be5a:	8a5a      	ldrh	r2, [r3, #18]
 801be5c:	4b34      	ldr	r3, [pc, #208]	@ (801bf30 <TRACE_AllocateBufer+0xf8>)
 801be5e:	8a1b      	ldrh	r3, [r3, #16]
 801be60:	429a      	cmp	r2, r3
 801be62:	d11b      	bne.n	801be9c <TRACE_AllocateBufer+0x64>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 801be64:	4b32      	ldr	r3, [pc, #200]	@ (801bf30 <TRACE_AllocateBufer+0xf8>)
 801be66:	8a5b      	ldrh	r3, [r3, #18]
 801be68:	f5c3 6380 	rsb	r3, r3, #1024	@ 0x400
 801be6c:	82fb      	strh	r3, [r7, #22]
    if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size))
 801be6e:	88fa      	ldrh	r2, [r7, #6]
 801be70:	8afb      	ldrh	r3, [r7, #22]
 801be72:	429a      	cmp	r2, r3
 801be74:	d33a      	bcc.n	801beec <TRACE_AllocateBufer+0xb4>
 801be76:	4b2e      	ldr	r3, [pc, #184]	@ (801bf30 <TRACE_AllocateBufer+0xf8>)
 801be78:	8a1b      	ldrh	r3, [r3, #16]
 801be7a:	88fa      	ldrh	r2, [r7, #6]
 801be7c:	429a      	cmp	r2, r3
 801be7e:	d235      	bcs.n	801beec <TRACE_AllocateBufer+0xb4>
    {
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 801be80:	4b2b      	ldr	r3, [pc, #172]	@ (801bf30 <TRACE_AllocateBufer+0xf8>)
 801be82:	2201      	movs	r2, #1
 801be84:	709a      	strb	r2, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 801be86:	4b2a      	ldr	r3, [pc, #168]	@ (801bf30 <TRACE_AllocateBufer+0xf8>)
 801be88:	8a5a      	ldrh	r2, [r3, #18]
 801be8a:	4b29      	ldr	r3, [pc, #164]	@ (801bf30 <TRACE_AllocateBufer+0xf8>)
 801be8c:	801a      	strh	r2, [r3, #0]
      freesize = ADV_TRACE_Ctx.TraceRdPtr;
 801be8e:	4b28      	ldr	r3, [pc, #160]	@ (801bf30 <TRACE_AllocateBufer+0xf8>)
 801be90:	8a1b      	ldrh	r3, [r3, #16]
 801be92:	82fb      	strh	r3, [r7, #22]
      ADV_TRACE_Ctx.TraceWrPtr = 0;
 801be94:	4b26      	ldr	r3, [pc, #152]	@ (801bf30 <TRACE_AllocateBufer+0xf8>)
 801be96:	2200      	movs	r2, #0
 801be98:	825a      	strh	r2, [r3, #18]
 801be9a:	e027      	b.n	801beec <TRACE_AllocateBufer+0xb4>
#endif
  }
  else
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801be9c:	4b24      	ldr	r3, [pc, #144]	@ (801bf30 <TRACE_AllocateBufer+0xf8>)
 801be9e:	8a5a      	ldrh	r2, [r3, #18]
 801bea0:	4b23      	ldr	r3, [pc, #140]	@ (801bf30 <TRACE_AllocateBufer+0xf8>)
 801bea2:	8a1b      	ldrh	r3, [r3, #16]
 801bea4:	429a      	cmp	r2, r3
 801bea6:	d91b      	bls.n	801bee0 <TRACE_AllocateBufer+0xa8>
    {
      freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 801bea8:	4b21      	ldr	r3, [pc, #132]	@ (801bf30 <TRACE_AllocateBufer+0xf8>)
 801beaa:	8a5b      	ldrh	r3, [r3, #18]
 801beac:	f5c3 6380 	rsb	r3, r3, #1024	@ 0x400
 801beb0:	82fb      	strh	r3, [r7, #22]
      if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size)) 
 801beb2:	88fa      	ldrh	r2, [r7, #6]
 801beb4:	8afb      	ldrh	r3, [r7, #22]
 801beb6:	429a      	cmp	r2, r3
 801beb8:	d318      	bcc.n	801beec <TRACE_AllocateBufer+0xb4>
 801beba:	4b1d      	ldr	r3, [pc, #116]	@ (801bf30 <TRACE_AllocateBufer+0xf8>)
 801bebc:	8a1b      	ldrh	r3, [r3, #16]
 801bebe:	88fa      	ldrh	r2, [r7, #6]
 801bec0:	429a      	cmp	r2, r3
 801bec2:	d213      	bcs.n	801beec <TRACE_AllocateBufer+0xb4>
      {
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 801bec4:	4b1a      	ldr	r3, [pc, #104]	@ (801bf30 <TRACE_AllocateBufer+0xf8>)
 801bec6:	2201      	movs	r2, #1
 801bec8:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 801beca:	4b19      	ldr	r3, [pc, #100]	@ (801bf30 <TRACE_AllocateBufer+0xf8>)
 801becc:	8a5a      	ldrh	r2, [r3, #18]
 801bece:	4b18      	ldr	r3, [pc, #96]	@ (801bf30 <TRACE_AllocateBufer+0xf8>)
 801bed0:	801a      	strh	r2, [r3, #0]
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
 801bed2:	4b17      	ldr	r3, [pc, #92]	@ (801bf30 <TRACE_AllocateBufer+0xf8>)
 801bed4:	8a1b      	ldrh	r3, [r3, #16]
 801bed6:	82fb      	strh	r3, [r7, #22]
        ADV_TRACE_Ctx.TraceWrPtr = 0;
 801bed8:	4b15      	ldr	r3, [pc, #84]	@ (801bf30 <TRACE_AllocateBufer+0xf8>)
 801beda:	2200      	movs	r2, #0
 801bedc:	825a      	strh	r2, [r3, #18]
 801bede:	e005      	b.n	801beec <TRACE_AllocateBufer+0xb4>
      }
    }
    else
    {
      freesize = (uint16_t)(ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr);
 801bee0:	4b13      	ldr	r3, [pc, #76]	@ (801bf30 <TRACE_AllocateBufer+0xf8>)
 801bee2:	8a1a      	ldrh	r2, [r3, #16]
 801bee4:	4b12      	ldr	r3, [pc, #72]	@ (801bf30 <TRACE_AllocateBufer+0xf8>)
 801bee6:	8a5b      	ldrh	r3, [r3, #18]
 801bee8:	1ad3      	subs	r3, r2, r3
 801beea:	82fb      	strh	r3, [r7, #22]
      freesize = ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr;
    }
#endif
  }

  if(freesize > Size)
 801beec:	8afa      	ldrh	r2, [r7, #22]
 801beee:	88fb      	ldrh	r3, [r7, #6]
 801bef0:	429a      	cmp	r2, r3
 801bef2:	d90f      	bls.n	801bf14 <TRACE_AllocateBufer+0xdc>
  {
    *Pos = ADV_TRACE_Ctx.TraceWrPtr;
 801bef4:	4b0e      	ldr	r3, [pc, #56]	@ (801bf30 <TRACE_AllocateBufer+0xf8>)
 801bef6:	8a5a      	ldrh	r2, [r3, #18]
 801bef8:	683b      	ldr	r3, [r7, #0]
 801befa:	801a      	strh	r2, [r3, #0]
    ADV_TRACE_Ctx.TraceWrPtr = (ADV_TRACE_Ctx.TraceWrPtr + Size) % UTIL_ADV_TRACE_FIFO_SIZE;
 801befc:	4b0c      	ldr	r3, [pc, #48]	@ (801bf30 <TRACE_AllocateBufer+0xf8>)
 801befe:	8a5a      	ldrh	r2, [r3, #18]
 801bf00:	88fb      	ldrh	r3, [r7, #6]
 801bf02:	4413      	add	r3, r2
 801bf04:	b29b      	uxth	r3, r3
 801bf06:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801bf0a:	b29a      	uxth	r2, r3
 801bf0c:	4b08      	ldr	r3, [pc, #32]	@ (801bf30 <TRACE_AllocateBufer+0xf8>)
 801bf0e:	825a      	strh	r2, [r3, #18]
    ret = 0;
 801bf10:	2300      	movs	r3, #0
 801bf12:	82bb      	strh	r3, [r7, #20]
 801bf14:	693b      	ldr	r3, [r7, #16]
 801bf16:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801bf18:	68bb      	ldr	r3, [r7, #8]
 801bf1a:	f383 8810 	msr	PRIMASK, r3
}
 801bf1e:	bf00      	nop
    }
  }
#endif

  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  return ret;
 801bf20:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
}
 801bf24:	4618      	mov	r0, r3
 801bf26:	371c      	adds	r7, #28
 801bf28:	46bd      	mov	sp, r7
 801bf2a:	bc80      	pop	{r7}
 801bf2c:	4770      	bx	lr
 801bf2e:	bf00      	nop
 801bf30:	20001da0 	.word	0x20001da0

0801bf34 <TRACE_Lock>:
/**
 * @brief  Lock the trace buffer.
 * @retval None.
 */
static void TRACE_Lock(void)
{
 801bf34:	b480      	push	{r7}
 801bf36:	b085      	sub	sp, #20
 801bf38:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801bf3a:	f3ef 8310 	mrs	r3, PRIMASK
 801bf3e:	607b      	str	r3, [r7, #4]
  return(result);
 801bf40:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801bf42:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801bf44:	b672      	cpsid	i
}
 801bf46:	bf00      	nop
  ADV_TRACE_Ctx.TraceLock++;
 801bf48:	4b08      	ldr	r3, [pc, #32]	@ (801bf6c <TRACE_Lock+0x38>)
 801bf4a:	8adb      	ldrh	r3, [r3, #22]
 801bf4c:	3301      	adds	r3, #1
 801bf4e:	b29a      	uxth	r2, r3
 801bf50:	4b06      	ldr	r3, [pc, #24]	@ (801bf6c <TRACE_Lock+0x38>)
 801bf52:	82da      	strh	r2, [r3, #22]
 801bf54:	68fb      	ldr	r3, [r7, #12]
 801bf56:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801bf58:	68bb      	ldr	r3, [r7, #8]
 801bf5a:	f383 8810 	msr	PRIMASK, r3
}
 801bf5e:	bf00      	nop
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 801bf60:	bf00      	nop
 801bf62:	3714      	adds	r7, #20
 801bf64:	46bd      	mov	sp, r7
 801bf66:	bc80      	pop	{r7}
 801bf68:	4770      	bx	lr
 801bf6a:	bf00      	nop
 801bf6c:	20001da0 	.word	0x20001da0

0801bf70 <TRACE_UnLock>:
/**
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static void TRACE_UnLock(void)
{
 801bf70:	b480      	push	{r7}
 801bf72:	b085      	sub	sp, #20
 801bf74:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801bf76:	f3ef 8310 	mrs	r3, PRIMASK
 801bf7a:	607b      	str	r3, [r7, #4]
  return(result);
 801bf7c:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801bf7e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801bf80:	b672      	cpsid	i
}
 801bf82:	bf00      	nop
  ADV_TRACE_Ctx.TraceLock--;
 801bf84:	4b08      	ldr	r3, [pc, #32]	@ (801bfa8 <TRACE_UnLock+0x38>)
 801bf86:	8adb      	ldrh	r3, [r3, #22]
 801bf88:	3b01      	subs	r3, #1
 801bf8a:	b29a      	uxth	r2, r3
 801bf8c:	4b06      	ldr	r3, [pc, #24]	@ (801bfa8 <TRACE_UnLock+0x38>)
 801bf8e:	82da      	strh	r2, [r3, #22]
 801bf90:	68fb      	ldr	r3, [r7, #12]
 801bf92:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801bf94:	68bb      	ldr	r3, [r7, #8]
 801bf96:	f383 8810 	msr	PRIMASK, r3
}
 801bf9a:	bf00      	nop
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 801bf9c:	bf00      	nop
 801bf9e:	3714      	adds	r7, #20
 801bfa0:	46bd      	mov	sp, r7
 801bfa2:	bc80      	pop	{r7}
 801bfa4:	4770      	bx	lr
 801bfa6:	bf00      	nop
 801bfa8:	20001da0 	.word	0x20001da0

0801bfac <TRACE_IsLocked>:
/**
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static uint32_t TRACE_IsLocked(void)
{
 801bfac:	b480      	push	{r7}
 801bfae:	af00      	add	r7, sp, #0
  return (ADV_TRACE_Ctx.TraceLock == 0u? 0u: 1u);
 801bfb0:	4b05      	ldr	r3, [pc, #20]	@ (801bfc8 <TRACE_IsLocked+0x1c>)
 801bfb2:	8adb      	ldrh	r3, [r3, #22]
 801bfb4:	2b00      	cmp	r3, #0
 801bfb6:	bf14      	ite	ne
 801bfb8:	2301      	movne	r3, #1
 801bfba:	2300      	moveq	r3, #0
 801bfbc:	b2db      	uxtb	r3, r3
}
 801bfbe:	4618      	mov	r0, r3
 801bfc0:	46bd      	mov	sp, r7
 801bfc2:	bc80      	pop	{r7}
 801bfc4:	4770      	bx	lr
 801bfc6:	bf00      	nop
 801bfc8:	20001da0 	.word	0x20001da0

0801bfcc <__cvt>:
 801bfcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801bfd0:	b088      	sub	sp, #32
 801bfd2:	2b00      	cmp	r3, #0
 801bfd4:	461d      	mov	r5, r3
 801bfd6:	4614      	mov	r4, r2
 801bfd8:	bfbc      	itt	lt
 801bfda:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 801bfde:	4614      	movlt	r4, r2
 801bfe0:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801bfe2:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 801bfe4:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 801bfe8:	bfb6      	itet	lt
 801bfea:	461d      	movlt	r5, r3
 801bfec:	2300      	movge	r3, #0
 801bfee:	232d      	movlt	r3, #45	@ 0x2d
 801bff0:	7013      	strb	r3, [r2, #0]
 801bff2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801bff4:	f023 0820 	bic.w	r8, r3, #32
 801bff8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 801bffc:	d005      	beq.n	801c00a <__cvt+0x3e>
 801bffe:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 801c002:	d100      	bne.n	801c006 <__cvt+0x3a>
 801c004:	3601      	adds	r6, #1
 801c006:	2302      	movs	r3, #2
 801c008:	e000      	b.n	801c00c <__cvt+0x40>
 801c00a:	2303      	movs	r3, #3
 801c00c:	aa07      	add	r2, sp, #28
 801c00e:	9204      	str	r2, [sp, #16]
 801c010:	aa06      	add	r2, sp, #24
 801c012:	e9cd a202 	strd	sl, r2, [sp, #8]
 801c016:	e9cd 3600 	strd	r3, r6, [sp]
 801c01a:	4622      	mov	r2, r4
 801c01c:	462b      	mov	r3, r5
 801c01e:	f000 fedf 	bl	801cde0 <_dtoa_r>
 801c022:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 801c026:	4607      	mov	r7, r0
 801c028:	d119      	bne.n	801c05e <__cvt+0x92>
 801c02a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801c02c:	07db      	lsls	r3, r3, #31
 801c02e:	d50e      	bpl.n	801c04e <__cvt+0x82>
 801c030:	eb00 0906 	add.w	r9, r0, r6
 801c034:	2200      	movs	r2, #0
 801c036:	2300      	movs	r3, #0
 801c038:	4620      	mov	r0, r4
 801c03a:	4629      	mov	r1, r5
 801c03c:	f7e4 fd1c 	bl	8000a78 <__aeabi_dcmpeq>
 801c040:	b108      	cbz	r0, 801c046 <__cvt+0x7a>
 801c042:	f8cd 901c 	str.w	r9, [sp, #28]
 801c046:	2230      	movs	r2, #48	@ 0x30
 801c048:	9b07      	ldr	r3, [sp, #28]
 801c04a:	454b      	cmp	r3, r9
 801c04c:	d31e      	bcc.n	801c08c <__cvt+0xc0>
 801c04e:	9b07      	ldr	r3, [sp, #28]
 801c050:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 801c052:	1bdb      	subs	r3, r3, r7
 801c054:	4638      	mov	r0, r7
 801c056:	6013      	str	r3, [r2, #0]
 801c058:	b008      	add	sp, #32
 801c05a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c05e:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 801c062:	eb00 0906 	add.w	r9, r0, r6
 801c066:	d1e5      	bne.n	801c034 <__cvt+0x68>
 801c068:	7803      	ldrb	r3, [r0, #0]
 801c06a:	2b30      	cmp	r3, #48	@ 0x30
 801c06c:	d10a      	bne.n	801c084 <__cvt+0xb8>
 801c06e:	2200      	movs	r2, #0
 801c070:	2300      	movs	r3, #0
 801c072:	4620      	mov	r0, r4
 801c074:	4629      	mov	r1, r5
 801c076:	f7e4 fcff 	bl	8000a78 <__aeabi_dcmpeq>
 801c07a:	b918      	cbnz	r0, 801c084 <__cvt+0xb8>
 801c07c:	f1c6 0601 	rsb	r6, r6, #1
 801c080:	f8ca 6000 	str.w	r6, [sl]
 801c084:	f8da 3000 	ldr.w	r3, [sl]
 801c088:	4499      	add	r9, r3
 801c08a:	e7d3      	b.n	801c034 <__cvt+0x68>
 801c08c:	1c59      	adds	r1, r3, #1
 801c08e:	9107      	str	r1, [sp, #28]
 801c090:	701a      	strb	r2, [r3, #0]
 801c092:	e7d9      	b.n	801c048 <__cvt+0x7c>

0801c094 <__exponent>:
 801c094:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801c096:	2900      	cmp	r1, #0
 801c098:	bfba      	itte	lt
 801c09a:	4249      	neglt	r1, r1
 801c09c:	232d      	movlt	r3, #45	@ 0x2d
 801c09e:	232b      	movge	r3, #43	@ 0x2b
 801c0a0:	2909      	cmp	r1, #9
 801c0a2:	7002      	strb	r2, [r0, #0]
 801c0a4:	7043      	strb	r3, [r0, #1]
 801c0a6:	dd29      	ble.n	801c0fc <__exponent+0x68>
 801c0a8:	f10d 0307 	add.w	r3, sp, #7
 801c0ac:	461d      	mov	r5, r3
 801c0ae:	270a      	movs	r7, #10
 801c0b0:	461a      	mov	r2, r3
 801c0b2:	fbb1 f6f7 	udiv	r6, r1, r7
 801c0b6:	fb07 1416 	mls	r4, r7, r6, r1
 801c0ba:	3430      	adds	r4, #48	@ 0x30
 801c0bc:	f802 4c01 	strb.w	r4, [r2, #-1]
 801c0c0:	460c      	mov	r4, r1
 801c0c2:	2c63      	cmp	r4, #99	@ 0x63
 801c0c4:	f103 33ff 	add.w	r3, r3, #4294967295
 801c0c8:	4631      	mov	r1, r6
 801c0ca:	dcf1      	bgt.n	801c0b0 <__exponent+0x1c>
 801c0cc:	3130      	adds	r1, #48	@ 0x30
 801c0ce:	1e94      	subs	r4, r2, #2
 801c0d0:	f803 1c01 	strb.w	r1, [r3, #-1]
 801c0d4:	1c41      	adds	r1, r0, #1
 801c0d6:	4623      	mov	r3, r4
 801c0d8:	42ab      	cmp	r3, r5
 801c0da:	d30a      	bcc.n	801c0f2 <__exponent+0x5e>
 801c0dc:	f10d 0309 	add.w	r3, sp, #9
 801c0e0:	1a9b      	subs	r3, r3, r2
 801c0e2:	42ac      	cmp	r4, r5
 801c0e4:	bf88      	it	hi
 801c0e6:	2300      	movhi	r3, #0
 801c0e8:	3302      	adds	r3, #2
 801c0ea:	4403      	add	r3, r0
 801c0ec:	1a18      	subs	r0, r3, r0
 801c0ee:	b003      	add	sp, #12
 801c0f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c0f2:	f813 6b01 	ldrb.w	r6, [r3], #1
 801c0f6:	f801 6f01 	strb.w	r6, [r1, #1]!
 801c0fa:	e7ed      	b.n	801c0d8 <__exponent+0x44>
 801c0fc:	2330      	movs	r3, #48	@ 0x30
 801c0fe:	3130      	adds	r1, #48	@ 0x30
 801c100:	7083      	strb	r3, [r0, #2]
 801c102:	70c1      	strb	r1, [r0, #3]
 801c104:	1d03      	adds	r3, r0, #4
 801c106:	e7f1      	b.n	801c0ec <__exponent+0x58>

0801c108 <_printf_float>:
 801c108:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c10c:	b091      	sub	sp, #68	@ 0x44
 801c10e:	460c      	mov	r4, r1
 801c110:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 801c114:	4616      	mov	r6, r2
 801c116:	461f      	mov	r7, r3
 801c118:	4605      	mov	r5, r0
 801c11a:	f000 fd51 	bl	801cbc0 <_localeconv_r>
 801c11e:	6803      	ldr	r3, [r0, #0]
 801c120:	9308      	str	r3, [sp, #32]
 801c122:	4618      	mov	r0, r3
 801c124:	f7e4 f87c 	bl	8000220 <strlen>
 801c128:	2300      	movs	r3, #0
 801c12a:	930e      	str	r3, [sp, #56]	@ 0x38
 801c12c:	f8d8 3000 	ldr.w	r3, [r8]
 801c130:	9009      	str	r0, [sp, #36]	@ 0x24
 801c132:	3307      	adds	r3, #7
 801c134:	f023 0307 	bic.w	r3, r3, #7
 801c138:	f103 0208 	add.w	r2, r3, #8
 801c13c:	f894 a018 	ldrb.w	sl, [r4, #24]
 801c140:	f8d4 b000 	ldr.w	fp, [r4]
 801c144:	f8c8 2000 	str.w	r2, [r8]
 801c148:	e9d3 8900 	ldrd	r8, r9, [r3]
 801c14c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 801c150:	930b      	str	r3, [sp, #44]	@ 0x2c
 801c152:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 801c156:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 801c15a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 801c15e:	4b9d      	ldr	r3, [pc, #628]	@ (801c3d4 <_printf_float+0x2cc>)
 801c160:	f04f 32ff 	mov.w	r2, #4294967295
 801c164:	f7e4 fcba 	bl	8000adc <__aeabi_dcmpun>
 801c168:	bb70      	cbnz	r0, 801c1c8 <_printf_float+0xc0>
 801c16a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 801c16e:	4b99      	ldr	r3, [pc, #612]	@ (801c3d4 <_printf_float+0x2cc>)
 801c170:	f04f 32ff 	mov.w	r2, #4294967295
 801c174:	f7e4 fc94 	bl	8000aa0 <__aeabi_dcmple>
 801c178:	bb30      	cbnz	r0, 801c1c8 <_printf_float+0xc0>
 801c17a:	2200      	movs	r2, #0
 801c17c:	2300      	movs	r3, #0
 801c17e:	4640      	mov	r0, r8
 801c180:	4649      	mov	r1, r9
 801c182:	f7e4 fc83 	bl	8000a8c <__aeabi_dcmplt>
 801c186:	b110      	cbz	r0, 801c18e <_printf_float+0x86>
 801c188:	232d      	movs	r3, #45	@ 0x2d
 801c18a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801c18e:	4a92      	ldr	r2, [pc, #584]	@ (801c3d8 <_printf_float+0x2d0>)
 801c190:	4b92      	ldr	r3, [pc, #584]	@ (801c3dc <_printf_float+0x2d4>)
 801c192:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 801c196:	bf94      	ite	ls
 801c198:	4690      	movls	r8, r2
 801c19a:	4698      	movhi	r8, r3
 801c19c:	2303      	movs	r3, #3
 801c19e:	6123      	str	r3, [r4, #16]
 801c1a0:	f02b 0304 	bic.w	r3, fp, #4
 801c1a4:	6023      	str	r3, [r4, #0]
 801c1a6:	f04f 0900 	mov.w	r9, #0
 801c1aa:	9700      	str	r7, [sp, #0]
 801c1ac:	4633      	mov	r3, r6
 801c1ae:	aa0f      	add	r2, sp, #60	@ 0x3c
 801c1b0:	4621      	mov	r1, r4
 801c1b2:	4628      	mov	r0, r5
 801c1b4:	f000 f9d4 	bl	801c560 <_printf_common>
 801c1b8:	3001      	adds	r0, #1
 801c1ba:	f040 808f 	bne.w	801c2dc <_printf_float+0x1d4>
 801c1be:	f04f 30ff 	mov.w	r0, #4294967295
 801c1c2:	b011      	add	sp, #68	@ 0x44
 801c1c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c1c8:	4642      	mov	r2, r8
 801c1ca:	464b      	mov	r3, r9
 801c1cc:	4640      	mov	r0, r8
 801c1ce:	4649      	mov	r1, r9
 801c1d0:	f7e4 fc84 	bl	8000adc <__aeabi_dcmpun>
 801c1d4:	b140      	cbz	r0, 801c1e8 <_printf_float+0xe0>
 801c1d6:	464b      	mov	r3, r9
 801c1d8:	2b00      	cmp	r3, #0
 801c1da:	bfbc      	itt	lt
 801c1dc:	232d      	movlt	r3, #45	@ 0x2d
 801c1de:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 801c1e2:	4a7f      	ldr	r2, [pc, #508]	@ (801c3e0 <_printf_float+0x2d8>)
 801c1e4:	4b7f      	ldr	r3, [pc, #508]	@ (801c3e4 <_printf_float+0x2dc>)
 801c1e6:	e7d4      	b.n	801c192 <_printf_float+0x8a>
 801c1e8:	6863      	ldr	r3, [r4, #4]
 801c1ea:	1c5a      	adds	r2, r3, #1
 801c1ec:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 801c1f0:	d13f      	bne.n	801c272 <_printf_float+0x16a>
 801c1f2:	2306      	movs	r3, #6
 801c1f4:	6063      	str	r3, [r4, #4]
 801c1f6:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 801c1fa:	2200      	movs	r2, #0
 801c1fc:	6023      	str	r3, [r4, #0]
 801c1fe:	9206      	str	r2, [sp, #24]
 801c200:	aa0e      	add	r2, sp, #56	@ 0x38
 801c202:	e9cd a204 	strd	sl, r2, [sp, #16]
 801c206:	aa0d      	add	r2, sp, #52	@ 0x34
 801c208:	9203      	str	r2, [sp, #12]
 801c20a:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 801c20e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 801c212:	6863      	ldr	r3, [r4, #4]
 801c214:	9300      	str	r3, [sp, #0]
 801c216:	4642      	mov	r2, r8
 801c218:	464b      	mov	r3, r9
 801c21a:	4628      	mov	r0, r5
 801c21c:	910a      	str	r1, [sp, #40]	@ 0x28
 801c21e:	f7ff fed5 	bl	801bfcc <__cvt>
 801c222:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801c224:	2947      	cmp	r1, #71	@ 0x47
 801c226:	4680      	mov	r8, r0
 801c228:	990d      	ldr	r1, [sp, #52]	@ 0x34
 801c22a:	d128      	bne.n	801c27e <_printf_float+0x176>
 801c22c:	1cc8      	adds	r0, r1, #3
 801c22e:	db02      	blt.n	801c236 <_printf_float+0x12e>
 801c230:	6863      	ldr	r3, [r4, #4]
 801c232:	4299      	cmp	r1, r3
 801c234:	dd40      	ble.n	801c2b8 <_printf_float+0x1b0>
 801c236:	f1aa 0a02 	sub.w	sl, sl, #2
 801c23a:	fa5f fa8a 	uxtb.w	sl, sl
 801c23e:	3901      	subs	r1, #1
 801c240:	4652      	mov	r2, sl
 801c242:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 801c246:	910d      	str	r1, [sp, #52]	@ 0x34
 801c248:	f7ff ff24 	bl	801c094 <__exponent>
 801c24c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801c24e:	1813      	adds	r3, r2, r0
 801c250:	2a01      	cmp	r2, #1
 801c252:	4681      	mov	r9, r0
 801c254:	6123      	str	r3, [r4, #16]
 801c256:	dc02      	bgt.n	801c25e <_printf_float+0x156>
 801c258:	6822      	ldr	r2, [r4, #0]
 801c25a:	07d2      	lsls	r2, r2, #31
 801c25c:	d501      	bpl.n	801c262 <_printf_float+0x15a>
 801c25e:	3301      	adds	r3, #1
 801c260:	6123      	str	r3, [r4, #16]
 801c262:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 801c266:	2b00      	cmp	r3, #0
 801c268:	d09f      	beq.n	801c1aa <_printf_float+0xa2>
 801c26a:	232d      	movs	r3, #45	@ 0x2d
 801c26c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801c270:	e79b      	b.n	801c1aa <_printf_float+0xa2>
 801c272:	2947      	cmp	r1, #71	@ 0x47
 801c274:	d1bf      	bne.n	801c1f6 <_printf_float+0xee>
 801c276:	2b00      	cmp	r3, #0
 801c278:	d1bd      	bne.n	801c1f6 <_printf_float+0xee>
 801c27a:	2301      	movs	r3, #1
 801c27c:	e7ba      	b.n	801c1f4 <_printf_float+0xec>
 801c27e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 801c282:	d9dc      	bls.n	801c23e <_printf_float+0x136>
 801c284:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 801c288:	d118      	bne.n	801c2bc <_printf_float+0x1b4>
 801c28a:	2900      	cmp	r1, #0
 801c28c:	6863      	ldr	r3, [r4, #4]
 801c28e:	dd0b      	ble.n	801c2a8 <_printf_float+0x1a0>
 801c290:	6121      	str	r1, [r4, #16]
 801c292:	b913      	cbnz	r3, 801c29a <_printf_float+0x192>
 801c294:	6822      	ldr	r2, [r4, #0]
 801c296:	07d0      	lsls	r0, r2, #31
 801c298:	d502      	bpl.n	801c2a0 <_printf_float+0x198>
 801c29a:	3301      	adds	r3, #1
 801c29c:	440b      	add	r3, r1
 801c29e:	6123      	str	r3, [r4, #16]
 801c2a0:	65a1      	str	r1, [r4, #88]	@ 0x58
 801c2a2:	f04f 0900 	mov.w	r9, #0
 801c2a6:	e7dc      	b.n	801c262 <_printf_float+0x15a>
 801c2a8:	b913      	cbnz	r3, 801c2b0 <_printf_float+0x1a8>
 801c2aa:	6822      	ldr	r2, [r4, #0]
 801c2ac:	07d2      	lsls	r2, r2, #31
 801c2ae:	d501      	bpl.n	801c2b4 <_printf_float+0x1ac>
 801c2b0:	3302      	adds	r3, #2
 801c2b2:	e7f4      	b.n	801c29e <_printf_float+0x196>
 801c2b4:	2301      	movs	r3, #1
 801c2b6:	e7f2      	b.n	801c29e <_printf_float+0x196>
 801c2b8:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 801c2bc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801c2be:	4299      	cmp	r1, r3
 801c2c0:	db05      	blt.n	801c2ce <_printf_float+0x1c6>
 801c2c2:	6823      	ldr	r3, [r4, #0]
 801c2c4:	6121      	str	r1, [r4, #16]
 801c2c6:	07d8      	lsls	r0, r3, #31
 801c2c8:	d5ea      	bpl.n	801c2a0 <_printf_float+0x198>
 801c2ca:	1c4b      	adds	r3, r1, #1
 801c2cc:	e7e7      	b.n	801c29e <_printf_float+0x196>
 801c2ce:	2900      	cmp	r1, #0
 801c2d0:	bfd4      	ite	le
 801c2d2:	f1c1 0202 	rsble	r2, r1, #2
 801c2d6:	2201      	movgt	r2, #1
 801c2d8:	4413      	add	r3, r2
 801c2da:	e7e0      	b.n	801c29e <_printf_float+0x196>
 801c2dc:	6823      	ldr	r3, [r4, #0]
 801c2de:	055a      	lsls	r2, r3, #21
 801c2e0:	d407      	bmi.n	801c2f2 <_printf_float+0x1ea>
 801c2e2:	6923      	ldr	r3, [r4, #16]
 801c2e4:	4642      	mov	r2, r8
 801c2e6:	4631      	mov	r1, r6
 801c2e8:	4628      	mov	r0, r5
 801c2ea:	47b8      	blx	r7
 801c2ec:	3001      	adds	r0, #1
 801c2ee:	d12b      	bne.n	801c348 <_printf_float+0x240>
 801c2f0:	e765      	b.n	801c1be <_printf_float+0xb6>
 801c2f2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 801c2f6:	f240 80dd 	bls.w	801c4b4 <_printf_float+0x3ac>
 801c2fa:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 801c2fe:	2200      	movs	r2, #0
 801c300:	2300      	movs	r3, #0
 801c302:	f7e4 fbb9 	bl	8000a78 <__aeabi_dcmpeq>
 801c306:	2800      	cmp	r0, #0
 801c308:	d033      	beq.n	801c372 <_printf_float+0x26a>
 801c30a:	4a37      	ldr	r2, [pc, #220]	@ (801c3e8 <_printf_float+0x2e0>)
 801c30c:	2301      	movs	r3, #1
 801c30e:	4631      	mov	r1, r6
 801c310:	4628      	mov	r0, r5
 801c312:	47b8      	blx	r7
 801c314:	3001      	adds	r0, #1
 801c316:	f43f af52 	beq.w	801c1be <_printf_float+0xb6>
 801c31a:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 801c31e:	4543      	cmp	r3, r8
 801c320:	db02      	blt.n	801c328 <_printf_float+0x220>
 801c322:	6823      	ldr	r3, [r4, #0]
 801c324:	07d8      	lsls	r0, r3, #31
 801c326:	d50f      	bpl.n	801c348 <_printf_float+0x240>
 801c328:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801c32c:	4631      	mov	r1, r6
 801c32e:	4628      	mov	r0, r5
 801c330:	47b8      	blx	r7
 801c332:	3001      	adds	r0, #1
 801c334:	f43f af43 	beq.w	801c1be <_printf_float+0xb6>
 801c338:	f04f 0900 	mov.w	r9, #0
 801c33c:	f108 38ff 	add.w	r8, r8, #4294967295
 801c340:	f104 0a1a 	add.w	sl, r4, #26
 801c344:	45c8      	cmp	r8, r9
 801c346:	dc09      	bgt.n	801c35c <_printf_float+0x254>
 801c348:	6823      	ldr	r3, [r4, #0]
 801c34a:	079b      	lsls	r3, r3, #30
 801c34c:	f100 8103 	bmi.w	801c556 <_printf_float+0x44e>
 801c350:	68e0      	ldr	r0, [r4, #12]
 801c352:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801c354:	4298      	cmp	r0, r3
 801c356:	bfb8      	it	lt
 801c358:	4618      	movlt	r0, r3
 801c35a:	e732      	b.n	801c1c2 <_printf_float+0xba>
 801c35c:	2301      	movs	r3, #1
 801c35e:	4652      	mov	r2, sl
 801c360:	4631      	mov	r1, r6
 801c362:	4628      	mov	r0, r5
 801c364:	47b8      	blx	r7
 801c366:	3001      	adds	r0, #1
 801c368:	f43f af29 	beq.w	801c1be <_printf_float+0xb6>
 801c36c:	f109 0901 	add.w	r9, r9, #1
 801c370:	e7e8      	b.n	801c344 <_printf_float+0x23c>
 801c372:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801c374:	2b00      	cmp	r3, #0
 801c376:	dc39      	bgt.n	801c3ec <_printf_float+0x2e4>
 801c378:	4a1b      	ldr	r2, [pc, #108]	@ (801c3e8 <_printf_float+0x2e0>)
 801c37a:	2301      	movs	r3, #1
 801c37c:	4631      	mov	r1, r6
 801c37e:	4628      	mov	r0, r5
 801c380:	47b8      	blx	r7
 801c382:	3001      	adds	r0, #1
 801c384:	f43f af1b 	beq.w	801c1be <_printf_float+0xb6>
 801c388:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 801c38c:	ea59 0303 	orrs.w	r3, r9, r3
 801c390:	d102      	bne.n	801c398 <_printf_float+0x290>
 801c392:	6823      	ldr	r3, [r4, #0]
 801c394:	07d9      	lsls	r1, r3, #31
 801c396:	d5d7      	bpl.n	801c348 <_printf_float+0x240>
 801c398:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801c39c:	4631      	mov	r1, r6
 801c39e:	4628      	mov	r0, r5
 801c3a0:	47b8      	blx	r7
 801c3a2:	3001      	adds	r0, #1
 801c3a4:	f43f af0b 	beq.w	801c1be <_printf_float+0xb6>
 801c3a8:	f04f 0a00 	mov.w	sl, #0
 801c3ac:	f104 0b1a 	add.w	fp, r4, #26
 801c3b0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801c3b2:	425b      	negs	r3, r3
 801c3b4:	4553      	cmp	r3, sl
 801c3b6:	dc01      	bgt.n	801c3bc <_printf_float+0x2b4>
 801c3b8:	464b      	mov	r3, r9
 801c3ba:	e793      	b.n	801c2e4 <_printf_float+0x1dc>
 801c3bc:	2301      	movs	r3, #1
 801c3be:	465a      	mov	r2, fp
 801c3c0:	4631      	mov	r1, r6
 801c3c2:	4628      	mov	r0, r5
 801c3c4:	47b8      	blx	r7
 801c3c6:	3001      	adds	r0, #1
 801c3c8:	f43f aef9 	beq.w	801c1be <_printf_float+0xb6>
 801c3cc:	f10a 0a01 	add.w	sl, sl, #1
 801c3d0:	e7ee      	b.n	801c3b0 <_printf_float+0x2a8>
 801c3d2:	bf00      	nop
 801c3d4:	7fefffff 	.word	0x7fefffff
 801c3d8:	0801f9bc 	.word	0x0801f9bc
 801c3dc:	0801f9c0 	.word	0x0801f9c0
 801c3e0:	0801f9c4 	.word	0x0801f9c4
 801c3e4:	0801f9c8 	.word	0x0801f9c8
 801c3e8:	0801f9cc 	.word	0x0801f9cc
 801c3ec:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801c3ee:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 801c3f2:	4553      	cmp	r3, sl
 801c3f4:	bfa8      	it	ge
 801c3f6:	4653      	movge	r3, sl
 801c3f8:	2b00      	cmp	r3, #0
 801c3fa:	4699      	mov	r9, r3
 801c3fc:	dc36      	bgt.n	801c46c <_printf_float+0x364>
 801c3fe:	f04f 0b00 	mov.w	fp, #0
 801c402:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801c406:	f104 021a 	add.w	r2, r4, #26
 801c40a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801c40c:	930a      	str	r3, [sp, #40]	@ 0x28
 801c40e:	eba3 0309 	sub.w	r3, r3, r9
 801c412:	455b      	cmp	r3, fp
 801c414:	dc31      	bgt.n	801c47a <_printf_float+0x372>
 801c416:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801c418:	459a      	cmp	sl, r3
 801c41a:	dc3a      	bgt.n	801c492 <_printf_float+0x38a>
 801c41c:	6823      	ldr	r3, [r4, #0]
 801c41e:	07da      	lsls	r2, r3, #31
 801c420:	d437      	bmi.n	801c492 <_printf_float+0x38a>
 801c422:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801c424:	ebaa 0903 	sub.w	r9, sl, r3
 801c428:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801c42a:	ebaa 0303 	sub.w	r3, sl, r3
 801c42e:	4599      	cmp	r9, r3
 801c430:	bfa8      	it	ge
 801c432:	4699      	movge	r9, r3
 801c434:	f1b9 0f00 	cmp.w	r9, #0
 801c438:	dc33      	bgt.n	801c4a2 <_printf_float+0x39a>
 801c43a:	f04f 0800 	mov.w	r8, #0
 801c43e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801c442:	f104 0b1a 	add.w	fp, r4, #26
 801c446:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801c448:	ebaa 0303 	sub.w	r3, sl, r3
 801c44c:	eba3 0309 	sub.w	r3, r3, r9
 801c450:	4543      	cmp	r3, r8
 801c452:	f77f af79 	ble.w	801c348 <_printf_float+0x240>
 801c456:	2301      	movs	r3, #1
 801c458:	465a      	mov	r2, fp
 801c45a:	4631      	mov	r1, r6
 801c45c:	4628      	mov	r0, r5
 801c45e:	47b8      	blx	r7
 801c460:	3001      	adds	r0, #1
 801c462:	f43f aeac 	beq.w	801c1be <_printf_float+0xb6>
 801c466:	f108 0801 	add.w	r8, r8, #1
 801c46a:	e7ec      	b.n	801c446 <_printf_float+0x33e>
 801c46c:	4642      	mov	r2, r8
 801c46e:	4631      	mov	r1, r6
 801c470:	4628      	mov	r0, r5
 801c472:	47b8      	blx	r7
 801c474:	3001      	adds	r0, #1
 801c476:	d1c2      	bne.n	801c3fe <_printf_float+0x2f6>
 801c478:	e6a1      	b.n	801c1be <_printf_float+0xb6>
 801c47a:	2301      	movs	r3, #1
 801c47c:	4631      	mov	r1, r6
 801c47e:	4628      	mov	r0, r5
 801c480:	920a      	str	r2, [sp, #40]	@ 0x28
 801c482:	47b8      	blx	r7
 801c484:	3001      	adds	r0, #1
 801c486:	f43f ae9a 	beq.w	801c1be <_printf_float+0xb6>
 801c48a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801c48c:	f10b 0b01 	add.w	fp, fp, #1
 801c490:	e7bb      	b.n	801c40a <_printf_float+0x302>
 801c492:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801c496:	4631      	mov	r1, r6
 801c498:	4628      	mov	r0, r5
 801c49a:	47b8      	blx	r7
 801c49c:	3001      	adds	r0, #1
 801c49e:	d1c0      	bne.n	801c422 <_printf_float+0x31a>
 801c4a0:	e68d      	b.n	801c1be <_printf_float+0xb6>
 801c4a2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801c4a4:	464b      	mov	r3, r9
 801c4a6:	4442      	add	r2, r8
 801c4a8:	4631      	mov	r1, r6
 801c4aa:	4628      	mov	r0, r5
 801c4ac:	47b8      	blx	r7
 801c4ae:	3001      	adds	r0, #1
 801c4b0:	d1c3      	bne.n	801c43a <_printf_float+0x332>
 801c4b2:	e684      	b.n	801c1be <_printf_float+0xb6>
 801c4b4:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 801c4b8:	f1ba 0f01 	cmp.w	sl, #1
 801c4bc:	dc01      	bgt.n	801c4c2 <_printf_float+0x3ba>
 801c4be:	07db      	lsls	r3, r3, #31
 801c4c0:	d536      	bpl.n	801c530 <_printf_float+0x428>
 801c4c2:	2301      	movs	r3, #1
 801c4c4:	4642      	mov	r2, r8
 801c4c6:	4631      	mov	r1, r6
 801c4c8:	4628      	mov	r0, r5
 801c4ca:	47b8      	blx	r7
 801c4cc:	3001      	adds	r0, #1
 801c4ce:	f43f ae76 	beq.w	801c1be <_printf_float+0xb6>
 801c4d2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801c4d6:	4631      	mov	r1, r6
 801c4d8:	4628      	mov	r0, r5
 801c4da:	47b8      	blx	r7
 801c4dc:	3001      	adds	r0, #1
 801c4de:	f43f ae6e 	beq.w	801c1be <_printf_float+0xb6>
 801c4e2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 801c4e6:	2200      	movs	r2, #0
 801c4e8:	2300      	movs	r3, #0
 801c4ea:	f10a 3aff 	add.w	sl, sl, #4294967295
 801c4ee:	f7e4 fac3 	bl	8000a78 <__aeabi_dcmpeq>
 801c4f2:	b9c0      	cbnz	r0, 801c526 <_printf_float+0x41e>
 801c4f4:	4653      	mov	r3, sl
 801c4f6:	f108 0201 	add.w	r2, r8, #1
 801c4fa:	4631      	mov	r1, r6
 801c4fc:	4628      	mov	r0, r5
 801c4fe:	47b8      	blx	r7
 801c500:	3001      	adds	r0, #1
 801c502:	d10c      	bne.n	801c51e <_printf_float+0x416>
 801c504:	e65b      	b.n	801c1be <_printf_float+0xb6>
 801c506:	2301      	movs	r3, #1
 801c508:	465a      	mov	r2, fp
 801c50a:	4631      	mov	r1, r6
 801c50c:	4628      	mov	r0, r5
 801c50e:	47b8      	blx	r7
 801c510:	3001      	adds	r0, #1
 801c512:	f43f ae54 	beq.w	801c1be <_printf_float+0xb6>
 801c516:	f108 0801 	add.w	r8, r8, #1
 801c51a:	45d0      	cmp	r8, sl
 801c51c:	dbf3      	blt.n	801c506 <_printf_float+0x3fe>
 801c51e:	464b      	mov	r3, r9
 801c520:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 801c524:	e6df      	b.n	801c2e6 <_printf_float+0x1de>
 801c526:	f04f 0800 	mov.w	r8, #0
 801c52a:	f104 0b1a 	add.w	fp, r4, #26
 801c52e:	e7f4      	b.n	801c51a <_printf_float+0x412>
 801c530:	2301      	movs	r3, #1
 801c532:	4642      	mov	r2, r8
 801c534:	e7e1      	b.n	801c4fa <_printf_float+0x3f2>
 801c536:	2301      	movs	r3, #1
 801c538:	464a      	mov	r2, r9
 801c53a:	4631      	mov	r1, r6
 801c53c:	4628      	mov	r0, r5
 801c53e:	47b8      	blx	r7
 801c540:	3001      	adds	r0, #1
 801c542:	f43f ae3c 	beq.w	801c1be <_printf_float+0xb6>
 801c546:	f108 0801 	add.w	r8, r8, #1
 801c54a:	68e3      	ldr	r3, [r4, #12]
 801c54c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801c54e:	1a5b      	subs	r3, r3, r1
 801c550:	4543      	cmp	r3, r8
 801c552:	dcf0      	bgt.n	801c536 <_printf_float+0x42e>
 801c554:	e6fc      	b.n	801c350 <_printf_float+0x248>
 801c556:	f04f 0800 	mov.w	r8, #0
 801c55a:	f104 0919 	add.w	r9, r4, #25
 801c55e:	e7f4      	b.n	801c54a <_printf_float+0x442>

0801c560 <_printf_common>:
 801c560:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c564:	4616      	mov	r6, r2
 801c566:	4698      	mov	r8, r3
 801c568:	688a      	ldr	r2, [r1, #8]
 801c56a:	690b      	ldr	r3, [r1, #16]
 801c56c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801c570:	4293      	cmp	r3, r2
 801c572:	bfb8      	it	lt
 801c574:	4613      	movlt	r3, r2
 801c576:	6033      	str	r3, [r6, #0]
 801c578:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801c57c:	4607      	mov	r7, r0
 801c57e:	460c      	mov	r4, r1
 801c580:	b10a      	cbz	r2, 801c586 <_printf_common+0x26>
 801c582:	3301      	adds	r3, #1
 801c584:	6033      	str	r3, [r6, #0]
 801c586:	6823      	ldr	r3, [r4, #0]
 801c588:	0699      	lsls	r1, r3, #26
 801c58a:	bf42      	ittt	mi
 801c58c:	6833      	ldrmi	r3, [r6, #0]
 801c58e:	3302      	addmi	r3, #2
 801c590:	6033      	strmi	r3, [r6, #0]
 801c592:	6825      	ldr	r5, [r4, #0]
 801c594:	f015 0506 	ands.w	r5, r5, #6
 801c598:	d106      	bne.n	801c5a8 <_printf_common+0x48>
 801c59a:	f104 0a19 	add.w	sl, r4, #25
 801c59e:	68e3      	ldr	r3, [r4, #12]
 801c5a0:	6832      	ldr	r2, [r6, #0]
 801c5a2:	1a9b      	subs	r3, r3, r2
 801c5a4:	42ab      	cmp	r3, r5
 801c5a6:	dc26      	bgt.n	801c5f6 <_printf_common+0x96>
 801c5a8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801c5ac:	6822      	ldr	r2, [r4, #0]
 801c5ae:	3b00      	subs	r3, #0
 801c5b0:	bf18      	it	ne
 801c5b2:	2301      	movne	r3, #1
 801c5b4:	0692      	lsls	r2, r2, #26
 801c5b6:	d42b      	bmi.n	801c610 <_printf_common+0xb0>
 801c5b8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801c5bc:	4641      	mov	r1, r8
 801c5be:	4638      	mov	r0, r7
 801c5c0:	47c8      	blx	r9
 801c5c2:	3001      	adds	r0, #1
 801c5c4:	d01e      	beq.n	801c604 <_printf_common+0xa4>
 801c5c6:	6823      	ldr	r3, [r4, #0]
 801c5c8:	6922      	ldr	r2, [r4, #16]
 801c5ca:	f003 0306 	and.w	r3, r3, #6
 801c5ce:	2b04      	cmp	r3, #4
 801c5d0:	bf02      	ittt	eq
 801c5d2:	68e5      	ldreq	r5, [r4, #12]
 801c5d4:	6833      	ldreq	r3, [r6, #0]
 801c5d6:	1aed      	subeq	r5, r5, r3
 801c5d8:	68a3      	ldr	r3, [r4, #8]
 801c5da:	bf0c      	ite	eq
 801c5dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801c5e0:	2500      	movne	r5, #0
 801c5e2:	4293      	cmp	r3, r2
 801c5e4:	bfc4      	itt	gt
 801c5e6:	1a9b      	subgt	r3, r3, r2
 801c5e8:	18ed      	addgt	r5, r5, r3
 801c5ea:	2600      	movs	r6, #0
 801c5ec:	341a      	adds	r4, #26
 801c5ee:	42b5      	cmp	r5, r6
 801c5f0:	d11a      	bne.n	801c628 <_printf_common+0xc8>
 801c5f2:	2000      	movs	r0, #0
 801c5f4:	e008      	b.n	801c608 <_printf_common+0xa8>
 801c5f6:	2301      	movs	r3, #1
 801c5f8:	4652      	mov	r2, sl
 801c5fa:	4641      	mov	r1, r8
 801c5fc:	4638      	mov	r0, r7
 801c5fe:	47c8      	blx	r9
 801c600:	3001      	adds	r0, #1
 801c602:	d103      	bne.n	801c60c <_printf_common+0xac>
 801c604:	f04f 30ff 	mov.w	r0, #4294967295
 801c608:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c60c:	3501      	adds	r5, #1
 801c60e:	e7c6      	b.n	801c59e <_printf_common+0x3e>
 801c610:	18e1      	adds	r1, r4, r3
 801c612:	1c5a      	adds	r2, r3, #1
 801c614:	2030      	movs	r0, #48	@ 0x30
 801c616:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801c61a:	4422      	add	r2, r4
 801c61c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801c620:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801c624:	3302      	adds	r3, #2
 801c626:	e7c7      	b.n	801c5b8 <_printf_common+0x58>
 801c628:	2301      	movs	r3, #1
 801c62a:	4622      	mov	r2, r4
 801c62c:	4641      	mov	r1, r8
 801c62e:	4638      	mov	r0, r7
 801c630:	47c8      	blx	r9
 801c632:	3001      	adds	r0, #1
 801c634:	d0e6      	beq.n	801c604 <_printf_common+0xa4>
 801c636:	3601      	adds	r6, #1
 801c638:	e7d9      	b.n	801c5ee <_printf_common+0x8e>
	...

0801c63c <_printf_i>:
 801c63c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801c640:	7e0f      	ldrb	r7, [r1, #24]
 801c642:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801c644:	2f78      	cmp	r7, #120	@ 0x78
 801c646:	4691      	mov	r9, r2
 801c648:	4680      	mov	r8, r0
 801c64a:	460c      	mov	r4, r1
 801c64c:	469a      	mov	sl, r3
 801c64e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801c652:	d807      	bhi.n	801c664 <_printf_i+0x28>
 801c654:	2f62      	cmp	r7, #98	@ 0x62
 801c656:	d80a      	bhi.n	801c66e <_printf_i+0x32>
 801c658:	2f00      	cmp	r7, #0
 801c65a:	f000 80d2 	beq.w	801c802 <_printf_i+0x1c6>
 801c65e:	2f58      	cmp	r7, #88	@ 0x58
 801c660:	f000 80b9 	beq.w	801c7d6 <_printf_i+0x19a>
 801c664:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801c668:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801c66c:	e03a      	b.n	801c6e4 <_printf_i+0xa8>
 801c66e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801c672:	2b15      	cmp	r3, #21
 801c674:	d8f6      	bhi.n	801c664 <_printf_i+0x28>
 801c676:	a101      	add	r1, pc, #4	@ (adr r1, 801c67c <_printf_i+0x40>)
 801c678:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801c67c:	0801c6d5 	.word	0x0801c6d5
 801c680:	0801c6e9 	.word	0x0801c6e9
 801c684:	0801c665 	.word	0x0801c665
 801c688:	0801c665 	.word	0x0801c665
 801c68c:	0801c665 	.word	0x0801c665
 801c690:	0801c665 	.word	0x0801c665
 801c694:	0801c6e9 	.word	0x0801c6e9
 801c698:	0801c665 	.word	0x0801c665
 801c69c:	0801c665 	.word	0x0801c665
 801c6a0:	0801c665 	.word	0x0801c665
 801c6a4:	0801c665 	.word	0x0801c665
 801c6a8:	0801c7e9 	.word	0x0801c7e9
 801c6ac:	0801c713 	.word	0x0801c713
 801c6b0:	0801c7a3 	.word	0x0801c7a3
 801c6b4:	0801c665 	.word	0x0801c665
 801c6b8:	0801c665 	.word	0x0801c665
 801c6bc:	0801c80b 	.word	0x0801c80b
 801c6c0:	0801c665 	.word	0x0801c665
 801c6c4:	0801c713 	.word	0x0801c713
 801c6c8:	0801c665 	.word	0x0801c665
 801c6cc:	0801c665 	.word	0x0801c665
 801c6d0:	0801c7ab 	.word	0x0801c7ab
 801c6d4:	6833      	ldr	r3, [r6, #0]
 801c6d6:	1d1a      	adds	r2, r3, #4
 801c6d8:	681b      	ldr	r3, [r3, #0]
 801c6da:	6032      	str	r2, [r6, #0]
 801c6dc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801c6e0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801c6e4:	2301      	movs	r3, #1
 801c6e6:	e09d      	b.n	801c824 <_printf_i+0x1e8>
 801c6e8:	6833      	ldr	r3, [r6, #0]
 801c6ea:	6820      	ldr	r0, [r4, #0]
 801c6ec:	1d19      	adds	r1, r3, #4
 801c6ee:	6031      	str	r1, [r6, #0]
 801c6f0:	0606      	lsls	r6, r0, #24
 801c6f2:	d501      	bpl.n	801c6f8 <_printf_i+0xbc>
 801c6f4:	681d      	ldr	r5, [r3, #0]
 801c6f6:	e003      	b.n	801c700 <_printf_i+0xc4>
 801c6f8:	0645      	lsls	r5, r0, #25
 801c6fa:	d5fb      	bpl.n	801c6f4 <_printf_i+0xb8>
 801c6fc:	f9b3 5000 	ldrsh.w	r5, [r3]
 801c700:	2d00      	cmp	r5, #0
 801c702:	da03      	bge.n	801c70c <_printf_i+0xd0>
 801c704:	232d      	movs	r3, #45	@ 0x2d
 801c706:	426d      	negs	r5, r5
 801c708:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801c70c:	4859      	ldr	r0, [pc, #356]	@ (801c874 <_printf_i+0x238>)
 801c70e:	230a      	movs	r3, #10
 801c710:	e011      	b.n	801c736 <_printf_i+0xfa>
 801c712:	6821      	ldr	r1, [r4, #0]
 801c714:	6833      	ldr	r3, [r6, #0]
 801c716:	0608      	lsls	r0, r1, #24
 801c718:	f853 5b04 	ldr.w	r5, [r3], #4
 801c71c:	d402      	bmi.n	801c724 <_printf_i+0xe8>
 801c71e:	0649      	lsls	r1, r1, #25
 801c720:	bf48      	it	mi
 801c722:	b2ad      	uxthmi	r5, r5
 801c724:	2f6f      	cmp	r7, #111	@ 0x6f
 801c726:	4853      	ldr	r0, [pc, #332]	@ (801c874 <_printf_i+0x238>)
 801c728:	6033      	str	r3, [r6, #0]
 801c72a:	bf14      	ite	ne
 801c72c:	230a      	movne	r3, #10
 801c72e:	2308      	moveq	r3, #8
 801c730:	2100      	movs	r1, #0
 801c732:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801c736:	6866      	ldr	r6, [r4, #4]
 801c738:	60a6      	str	r6, [r4, #8]
 801c73a:	2e00      	cmp	r6, #0
 801c73c:	bfa2      	ittt	ge
 801c73e:	6821      	ldrge	r1, [r4, #0]
 801c740:	f021 0104 	bicge.w	r1, r1, #4
 801c744:	6021      	strge	r1, [r4, #0]
 801c746:	b90d      	cbnz	r5, 801c74c <_printf_i+0x110>
 801c748:	2e00      	cmp	r6, #0
 801c74a:	d04b      	beq.n	801c7e4 <_printf_i+0x1a8>
 801c74c:	4616      	mov	r6, r2
 801c74e:	fbb5 f1f3 	udiv	r1, r5, r3
 801c752:	fb03 5711 	mls	r7, r3, r1, r5
 801c756:	5dc7      	ldrb	r7, [r0, r7]
 801c758:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801c75c:	462f      	mov	r7, r5
 801c75e:	42bb      	cmp	r3, r7
 801c760:	460d      	mov	r5, r1
 801c762:	d9f4      	bls.n	801c74e <_printf_i+0x112>
 801c764:	2b08      	cmp	r3, #8
 801c766:	d10b      	bne.n	801c780 <_printf_i+0x144>
 801c768:	6823      	ldr	r3, [r4, #0]
 801c76a:	07df      	lsls	r7, r3, #31
 801c76c:	d508      	bpl.n	801c780 <_printf_i+0x144>
 801c76e:	6923      	ldr	r3, [r4, #16]
 801c770:	6861      	ldr	r1, [r4, #4]
 801c772:	4299      	cmp	r1, r3
 801c774:	bfde      	ittt	le
 801c776:	2330      	movle	r3, #48	@ 0x30
 801c778:	f806 3c01 	strble.w	r3, [r6, #-1]
 801c77c:	f106 36ff 	addle.w	r6, r6, #4294967295
 801c780:	1b92      	subs	r2, r2, r6
 801c782:	6122      	str	r2, [r4, #16]
 801c784:	f8cd a000 	str.w	sl, [sp]
 801c788:	464b      	mov	r3, r9
 801c78a:	aa03      	add	r2, sp, #12
 801c78c:	4621      	mov	r1, r4
 801c78e:	4640      	mov	r0, r8
 801c790:	f7ff fee6 	bl	801c560 <_printf_common>
 801c794:	3001      	adds	r0, #1
 801c796:	d14a      	bne.n	801c82e <_printf_i+0x1f2>
 801c798:	f04f 30ff 	mov.w	r0, #4294967295
 801c79c:	b004      	add	sp, #16
 801c79e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c7a2:	6823      	ldr	r3, [r4, #0]
 801c7a4:	f043 0320 	orr.w	r3, r3, #32
 801c7a8:	6023      	str	r3, [r4, #0]
 801c7aa:	4833      	ldr	r0, [pc, #204]	@ (801c878 <_printf_i+0x23c>)
 801c7ac:	2778      	movs	r7, #120	@ 0x78
 801c7ae:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801c7b2:	6823      	ldr	r3, [r4, #0]
 801c7b4:	6831      	ldr	r1, [r6, #0]
 801c7b6:	061f      	lsls	r7, r3, #24
 801c7b8:	f851 5b04 	ldr.w	r5, [r1], #4
 801c7bc:	d402      	bmi.n	801c7c4 <_printf_i+0x188>
 801c7be:	065f      	lsls	r7, r3, #25
 801c7c0:	bf48      	it	mi
 801c7c2:	b2ad      	uxthmi	r5, r5
 801c7c4:	6031      	str	r1, [r6, #0]
 801c7c6:	07d9      	lsls	r1, r3, #31
 801c7c8:	bf44      	itt	mi
 801c7ca:	f043 0320 	orrmi.w	r3, r3, #32
 801c7ce:	6023      	strmi	r3, [r4, #0]
 801c7d0:	b11d      	cbz	r5, 801c7da <_printf_i+0x19e>
 801c7d2:	2310      	movs	r3, #16
 801c7d4:	e7ac      	b.n	801c730 <_printf_i+0xf4>
 801c7d6:	4827      	ldr	r0, [pc, #156]	@ (801c874 <_printf_i+0x238>)
 801c7d8:	e7e9      	b.n	801c7ae <_printf_i+0x172>
 801c7da:	6823      	ldr	r3, [r4, #0]
 801c7dc:	f023 0320 	bic.w	r3, r3, #32
 801c7e0:	6023      	str	r3, [r4, #0]
 801c7e2:	e7f6      	b.n	801c7d2 <_printf_i+0x196>
 801c7e4:	4616      	mov	r6, r2
 801c7e6:	e7bd      	b.n	801c764 <_printf_i+0x128>
 801c7e8:	6833      	ldr	r3, [r6, #0]
 801c7ea:	6825      	ldr	r5, [r4, #0]
 801c7ec:	6961      	ldr	r1, [r4, #20]
 801c7ee:	1d18      	adds	r0, r3, #4
 801c7f0:	6030      	str	r0, [r6, #0]
 801c7f2:	062e      	lsls	r6, r5, #24
 801c7f4:	681b      	ldr	r3, [r3, #0]
 801c7f6:	d501      	bpl.n	801c7fc <_printf_i+0x1c0>
 801c7f8:	6019      	str	r1, [r3, #0]
 801c7fa:	e002      	b.n	801c802 <_printf_i+0x1c6>
 801c7fc:	0668      	lsls	r0, r5, #25
 801c7fe:	d5fb      	bpl.n	801c7f8 <_printf_i+0x1bc>
 801c800:	8019      	strh	r1, [r3, #0]
 801c802:	2300      	movs	r3, #0
 801c804:	6123      	str	r3, [r4, #16]
 801c806:	4616      	mov	r6, r2
 801c808:	e7bc      	b.n	801c784 <_printf_i+0x148>
 801c80a:	6833      	ldr	r3, [r6, #0]
 801c80c:	1d1a      	adds	r2, r3, #4
 801c80e:	6032      	str	r2, [r6, #0]
 801c810:	681e      	ldr	r6, [r3, #0]
 801c812:	6862      	ldr	r2, [r4, #4]
 801c814:	2100      	movs	r1, #0
 801c816:	4630      	mov	r0, r6
 801c818:	f7e3 fcb2 	bl	8000180 <memchr>
 801c81c:	b108      	cbz	r0, 801c822 <_printf_i+0x1e6>
 801c81e:	1b80      	subs	r0, r0, r6
 801c820:	6060      	str	r0, [r4, #4]
 801c822:	6863      	ldr	r3, [r4, #4]
 801c824:	6123      	str	r3, [r4, #16]
 801c826:	2300      	movs	r3, #0
 801c828:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801c82c:	e7aa      	b.n	801c784 <_printf_i+0x148>
 801c82e:	6923      	ldr	r3, [r4, #16]
 801c830:	4632      	mov	r2, r6
 801c832:	4649      	mov	r1, r9
 801c834:	4640      	mov	r0, r8
 801c836:	47d0      	blx	sl
 801c838:	3001      	adds	r0, #1
 801c83a:	d0ad      	beq.n	801c798 <_printf_i+0x15c>
 801c83c:	6823      	ldr	r3, [r4, #0]
 801c83e:	079b      	lsls	r3, r3, #30
 801c840:	d413      	bmi.n	801c86a <_printf_i+0x22e>
 801c842:	68e0      	ldr	r0, [r4, #12]
 801c844:	9b03      	ldr	r3, [sp, #12]
 801c846:	4298      	cmp	r0, r3
 801c848:	bfb8      	it	lt
 801c84a:	4618      	movlt	r0, r3
 801c84c:	e7a6      	b.n	801c79c <_printf_i+0x160>
 801c84e:	2301      	movs	r3, #1
 801c850:	4632      	mov	r2, r6
 801c852:	4649      	mov	r1, r9
 801c854:	4640      	mov	r0, r8
 801c856:	47d0      	blx	sl
 801c858:	3001      	adds	r0, #1
 801c85a:	d09d      	beq.n	801c798 <_printf_i+0x15c>
 801c85c:	3501      	adds	r5, #1
 801c85e:	68e3      	ldr	r3, [r4, #12]
 801c860:	9903      	ldr	r1, [sp, #12]
 801c862:	1a5b      	subs	r3, r3, r1
 801c864:	42ab      	cmp	r3, r5
 801c866:	dcf2      	bgt.n	801c84e <_printf_i+0x212>
 801c868:	e7eb      	b.n	801c842 <_printf_i+0x206>
 801c86a:	2500      	movs	r5, #0
 801c86c:	f104 0619 	add.w	r6, r4, #25
 801c870:	e7f5      	b.n	801c85e <_printf_i+0x222>
 801c872:	bf00      	nop
 801c874:	0801f9ce 	.word	0x0801f9ce
 801c878:	0801f9df 	.word	0x0801f9df

0801c87c <std>:
 801c87c:	2300      	movs	r3, #0
 801c87e:	b510      	push	{r4, lr}
 801c880:	4604      	mov	r4, r0
 801c882:	e9c0 3300 	strd	r3, r3, [r0]
 801c886:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801c88a:	6083      	str	r3, [r0, #8]
 801c88c:	8181      	strh	r1, [r0, #12]
 801c88e:	6643      	str	r3, [r0, #100]	@ 0x64
 801c890:	81c2      	strh	r2, [r0, #14]
 801c892:	6183      	str	r3, [r0, #24]
 801c894:	4619      	mov	r1, r3
 801c896:	2208      	movs	r2, #8
 801c898:	305c      	adds	r0, #92	@ 0x5c
 801c89a:	f000 f989 	bl	801cbb0 <memset>
 801c89e:	4b0d      	ldr	r3, [pc, #52]	@ (801c8d4 <std+0x58>)
 801c8a0:	6263      	str	r3, [r4, #36]	@ 0x24
 801c8a2:	4b0d      	ldr	r3, [pc, #52]	@ (801c8d8 <std+0x5c>)
 801c8a4:	62a3      	str	r3, [r4, #40]	@ 0x28
 801c8a6:	4b0d      	ldr	r3, [pc, #52]	@ (801c8dc <std+0x60>)
 801c8a8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801c8aa:	4b0d      	ldr	r3, [pc, #52]	@ (801c8e0 <std+0x64>)
 801c8ac:	6323      	str	r3, [r4, #48]	@ 0x30
 801c8ae:	4b0d      	ldr	r3, [pc, #52]	@ (801c8e4 <std+0x68>)
 801c8b0:	6224      	str	r4, [r4, #32]
 801c8b2:	429c      	cmp	r4, r3
 801c8b4:	d006      	beq.n	801c8c4 <std+0x48>
 801c8b6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801c8ba:	4294      	cmp	r4, r2
 801c8bc:	d002      	beq.n	801c8c4 <std+0x48>
 801c8be:	33d0      	adds	r3, #208	@ 0xd0
 801c8c0:	429c      	cmp	r4, r3
 801c8c2:	d105      	bne.n	801c8d0 <std+0x54>
 801c8c4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801c8c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c8cc:	f000 b9ec 	b.w	801cca8 <__retarget_lock_init_recursive>
 801c8d0:	bd10      	pop	{r4, pc}
 801c8d2:	bf00      	nop
 801c8d4:	0801ca01 	.word	0x0801ca01
 801c8d8:	0801ca23 	.word	0x0801ca23
 801c8dc:	0801ca5b 	.word	0x0801ca5b
 801c8e0:	0801ca7f 	.word	0x0801ca7f
 801c8e4:	200023b8 	.word	0x200023b8

0801c8e8 <stdio_exit_handler>:
 801c8e8:	4a02      	ldr	r2, [pc, #8]	@ (801c8f4 <stdio_exit_handler+0xc>)
 801c8ea:	4903      	ldr	r1, [pc, #12]	@ (801c8f8 <stdio_exit_handler+0x10>)
 801c8ec:	4803      	ldr	r0, [pc, #12]	@ (801c8fc <stdio_exit_handler+0x14>)
 801c8ee:	f000 b869 	b.w	801c9c4 <_fwalk_sglue>
 801c8f2:	bf00      	nop
 801c8f4:	20000158 	.word	0x20000158
 801c8f8:	0801e5f1 	.word	0x0801e5f1
 801c8fc:	20000168 	.word	0x20000168

0801c900 <cleanup_stdio>:
 801c900:	6841      	ldr	r1, [r0, #4]
 801c902:	4b0c      	ldr	r3, [pc, #48]	@ (801c934 <cleanup_stdio+0x34>)
 801c904:	4299      	cmp	r1, r3
 801c906:	b510      	push	{r4, lr}
 801c908:	4604      	mov	r4, r0
 801c90a:	d001      	beq.n	801c910 <cleanup_stdio+0x10>
 801c90c:	f001 fe70 	bl	801e5f0 <_fflush_r>
 801c910:	68a1      	ldr	r1, [r4, #8]
 801c912:	4b09      	ldr	r3, [pc, #36]	@ (801c938 <cleanup_stdio+0x38>)
 801c914:	4299      	cmp	r1, r3
 801c916:	d002      	beq.n	801c91e <cleanup_stdio+0x1e>
 801c918:	4620      	mov	r0, r4
 801c91a:	f001 fe69 	bl	801e5f0 <_fflush_r>
 801c91e:	68e1      	ldr	r1, [r4, #12]
 801c920:	4b06      	ldr	r3, [pc, #24]	@ (801c93c <cleanup_stdio+0x3c>)
 801c922:	4299      	cmp	r1, r3
 801c924:	d004      	beq.n	801c930 <cleanup_stdio+0x30>
 801c926:	4620      	mov	r0, r4
 801c928:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c92c:	f001 be60 	b.w	801e5f0 <_fflush_r>
 801c930:	bd10      	pop	{r4, pc}
 801c932:	bf00      	nop
 801c934:	200023b8 	.word	0x200023b8
 801c938:	20002420 	.word	0x20002420
 801c93c:	20002488 	.word	0x20002488

0801c940 <global_stdio_init.part.0>:
 801c940:	b510      	push	{r4, lr}
 801c942:	4b0b      	ldr	r3, [pc, #44]	@ (801c970 <global_stdio_init.part.0+0x30>)
 801c944:	4c0b      	ldr	r4, [pc, #44]	@ (801c974 <global_stdio_init.part.0+0x34>)
 801c946:	4a0c      	ldr	r2, [pc, #48]	@ (801c978 <global_stdio_init.part.0+0x38>)
 801c948:	601a      	str	r2, [r3, #0]
 801c94a:	4620      	mov	r0, r4
 801c94c:	2200      	movs	r2, #0
 801c94e:	2104      	movs	r1, #4
 801c950:	f7ff ff94 	bl	801c87c <std>
 801c954:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801c958:	2201      	movs	r2, #1
 801c95a:	2109      	movs	r1, #9
 801c95c:	f7ff ff8e 	bl	801c87c <std>
 801c960:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801c964:	2202      	movs	r2, #2
 801c966:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c96a:	2112      	movs	r1, #18
 801c96c:	f7ff bf86 	b.w	801c87c <std>
 801c970:	200024f0 	.word	0x200024f0
 801c974:	200023b8 	.word	0x200023b8
 801c978:	0801c8e9 	.word	0x0801c8e9

0801c97c <__sfp_lock_acquire>:
 801c97c:	4801      	ldr	r0, [pc, #4]	@ (801c984 <__sfp_lock_acquire+0x8>)
 801c97e:	f000 b994 	b.w	801ccaa <__retarget_lock_acquire_recursive>
 801c982:	bf00      	nop
 801c984:	200024f9 	.word	0x200024f9

0801c988 <__sfp_lock_release>:
 801c988:	4801      	ldr	r0, [pc, #4]	@ (801c990 <__sfp_lock_release+0x8>)
 801c98a:	f000 b98f 	b.w	801ccac <__retarget_lock_release_recursive>
 801c98e:	bf00      	nop
 801c990:	200024f9 	.word	0x200024f9

0801c994 <__sinit>:
 801c994:	b510      	push	{r4, lr}
 801c996:	4604      	mov	r4, r0
 801c998:	f7ff fff0 	bl	801c97c <__sfp_lock_acquire>
 801c99c:	6a23      	ldr	r3, [r4, #32]
 801c99e:	b11b      	cbz	r3, 801c9a8 <__sinit+0x14>
 801c9a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c9a4:	f7ff bff0 	b.w	801c988 <__sfp_lock_release>
 801c9a8:	4b04      	ldr	r3, [pc, #16]	@ (801c9bc <__sinit+0x28>)
 801c9aa:	6223      	str	r3, [r4, #32]
 801c9ac:	4b04      	ldr	r3, [pc, #16]	@ (801c9c0 <__sinit+0x2c>)
 801c9ae:	681b      	ldr	r3, [r3, #0]
 801c9b0:	2b00      	cmp	r3, #0
 801c9b2:	d1f5      	bne.n	801c9a0 <__sinit+0xc>
 801c9b4:	f7ff ffc4 	bl	801c940 <global_stdio_init.part.0>
 801c9b8:	e7f2      	b.n	801c9a0 <__sinit+0xc>
 801c9ba:	bf00      	nop
 801c9bc:	0801c901 	.word	0x0801c901
 801c9c0:	200024f0 	.word	0x200024f0

0801c9c4 <_fwalk_sglue>:
 801c9c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801c9c8:	4607      	mov	r7, r0
 801c9ca:	4688      	mov	r8, r1
 801c9cc:	4614      	mov	r4, r2
 801c9ce:	2600      	movs	r6, #0
 801c9d0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801c9d4:	f1b9 0901 	subs.w	r9, r9, #1
 801c9d8:	d505      	bpl.n	801c9e6 <_fwalk_sglue+0x22>
 801c9da:	6824      	ldr	r4, [r4, #0]
 801c9dc:	2c00      	cmp	r4, #0
 801c9de:	d1f7      	bne.n	801c9d0 <_fwalk_sglue+0xc>
 801c9e0:	4630      	mov	r0, r6
 801c9e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801c9e6:	89ab      	ldrh	r3, [r5, #12]
 801c9e8:	2b01      	cmp	r3, #1
 801c9ea:	d907      	bls.n	801c9fc <_fwalk_sglue+0x38>
 801c9ec:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801c9f0:	3301      	adds	r3, #1
 801c9f2:	d003      	beq.n	801c9fc <_fwalk_sglue+0x38>
 801c9f4:	4629      	mov	r1, r5
 801c9f6:	4638      	mov	r0, r7
 801c9f8:	47c0      	blx	r8
 801c9fa:	4306      	orrs	r6, r0
 801c9fc:	3568      	adds	r5, #104	@ 0x68
 801c9fe:	e7e9      	b.n	801c9d4 <_fwalk_sglue+0x10>

0801ca00 <__sread>:
 801ca00:	b510      	push	{r4, lr}
 801ca02:	460c      	mov	r4, r1
 801ca04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ca08:	f000 f900 	bl	801cc0c <_read_r>
 801ca0c:	2800      	cmp	r0, #0
 801ca0e:	bfab      	itete	ge
 801ca10:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801ca12:	89a3      	ldrhlt	r3, [r4, #12]
 801ca14:	181b      	addge	r3, r3, r0
 801ca16:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801ca1a:	bfac      	ite	ge
 801ca1c:	6563      	strge	r3, [r4, #84]	@ 0x54
 801ca1e:	81a3      	strhlt	r3, [r4, #12]
 801ca20:	bd10      	pop	{r4, pc}

0801ca22 <__swrite>:
 801ca22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ca26:	461f      	mov	r7, r3
 801ca28:	898b      	ldrh	r3, [r1, #12]
 801ca2a:	05db      	lsls	r3, r3, #23
 801ca2c:	4605      	mov	r5, r0
 801ca2e:	460c      	mov	r4, r1
 801ca30:	4616      	mov	r6, r2
 801ca32:	d505      	bpl.n	801ca40 <__swrite+0x1e>
 801ca34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ca38:	2302      	movs	r3, #2
 801ca3a:	2200      	movs	r2, #0
 801ca3c:	f000 f8d4 	bl	801cbe8 <_lseek_r>
 801ca40:	89a3      	ldrh	r3, [r4, #12]
 801ca42:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801ca46:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801ca4a:	81a3      	strh	r3, [r4, #12]
 801ca4c:	4632      	mov	r2, r6
 801ca4e:	463b      	mov	r3, r7
 801ca50:	4628      	mov	r0, r5
 801ca52:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801ca56:	f000 b8eb 	b.w	801cc30 <_write_r>

0801ca5a <__sseek>:
 801ca5a:	b510      	push	{r4, lr}
 801ca5c:	460c      	mov	r4, r1
 801ca5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ca62:	f000 f8c1 	bl	801cbe8 <_lseek_r>
 801ca66:	1c43      	adds	r3, r0, #1
 801ca68:	89a3      	ldrh	r3, [r4, #12]
 801ca6a:	bf15      	itete	ne
 801ca6c:	6560      	strne	r0, [r4, #84]	@ 0x54
 801ca6e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801ca72:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801ca76:	81a3      	strheq	r3, [r4, #12]
 801ca78:	bf18      	it	ne
 801ca7a:	81a3      	strhne	r3, [r4, #12]
 801ca7c:	bd10      	pop	{r4, pc}

0801ca7e <__sclose>:
 801ca7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ca82:	f000 b8a1 	b.w	801cbc8 <_close_r>

0801ca86 <__swbuf_r>:
 801ca86:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ca88:	460e      	mov	r6, r1
 801ca8a:	4614      	mov	r4, r2
 801ca8c:	4605      	mov	r5, r0
 801ca8e:	b118      	cbz	r0, 801ca98 <__swbuf_r+0x12>
 801ca90:	6a03      	ldr	r3, [r0, #32]
 801ca92:	b90b      	cbnz	r3, 801ca98 <__swbuf_r+0x12>
 801ca94:	f7ff ff7e 	bl	801c994 <__sinit>
 801ca98:	69a3      	ldr	r3, [r4, #24]
 801ca9a:	60a3      	str	r3, [r4, #8]
 801ca9c:	89a3      	ldrh	r3, [r4, #12]
 801ca9e:	071a      	lsls	r2, r3, #28
 801caa0:	d501      	bpl.n	801caa6 <__swbuf_r+0x20>
 801caa2:	6923      	ldr	r3, [r4, #16]
 801caa4:	b943      	cbnz	r3, 801cab8 <__swbuf_r+0x32>
 801caa6:	4621      	mov	r1, r4
 801caa8:	4628      	mov	r0, r5
 801caaa:	f000 f82b 	bl	801cb04 <__swsetup_r>
 801caae:	b118      	cbz	r0, 801cab8 <__swbuf_r+0x32>
 801cab0:	f04f 37ff 	mov.w	r7, #4294967295
 801cab4:	4638      	mov	r0, r7
 801cab6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801cab8:	6823      	ldr	r3, [r4, #0]
 801caba:	6922      	ldr	r2, [r4, #16]
 801cabc:	1a98      	subs	r0, r3, r2
 801cabe:	6963      	ldr	r3, [r4, #20]
 801cac0:	b2f6      	uxtb	r6, r6
 801cac2:	4283      	cmp	r3, r0
 801cac4:	4637      	mov	r7, r6
 801cac6:	dc05      	bgt.n	801cad4 <__swbuf_r+0x4e>
 801cac8:	4621      	mov	r1, r4
 801caca:	4628      	mov	r0, r5
 801cacc:	f001 fd90 	bl	801e5f0 <_fflush_r>
 801cad0:	2800      	cmp	r0, #0
 801cad2:	d1ed      	bne.n	801cab0 <__swbuf_r+0x2a>
 801cad4:	68a3      	ldr	r3, [r4, #8]
 801cad6:	3b01      	subs	r3, #1
 801cad8:	60a3      	str	r3, [r4, #8]
 801cada:	6823      	ldr	r3, [r4, #0]
 801cadc:	1c5a      	adds	r2, r3, #1
 801cade:	6022      	str	r2, [r4, #0]
 801cae0:	701e      	strb	r6, [r3, #0]
 801cae2:	6962      	ldr	r2, [r4, #20]
 801cae4:	1c43      	adds	r3, r0, #1
 801cae6:	429a      	cmp	r2, r3
 801cae8:	d004      	beq.n	801caf4 <__swbuf_r+0x6e>
 801caea:	89a3      	ldrh	r3, [r4, #12]
 801caec:	07db      	lsls	r3, r3, #31
 801caee:	d5e1      	bpl.n	801cab4 <__swbuf_r+0x2e>
 801caf0:	2e0a      	cmp	r6, #10
 801caf2:	d1df      	bne.n	801cab4 <__swbuf_r+0x2e>
 801caf4:	4621      	mov	r1, r4
 801caf6:	4628      	mov	r0, r5
 801caf8:	f001 fd7a 	bl	801e5f0 <_fflush_r>
 801cafc:	2800      	cmp	r0, #0
 801cafe:	d0d9      	beq.n	801cab4 <__swbuf_r+0x2e>
 801cb00:	e7d6      	b.n	801cab0 <__swbuf_r+0x2a>
	...

0801cb04 <__swsetup_r>:
 801cb04:	b538      	push	{r3, r4, r5, lr}
 801cb06:	4b29      	ldr	r3, [pc, #164]	@ (801cbac <__swsetup_r+0xa8>)
 801cb08:	4605      	mov	r5, r0
 801cb0a:	6818      	ldr	r0, [r3, #0]
 801cb0c:	460c      	mov	r4, r1
 801cb0e:	b118      	cbz	r0, 801cb18 <__swsetup_r+0x14>
 801cb10:	6a03      	ldr	r3, [r0, #32]
 801cb12:	b90b      	cbnz	r3, 801cb18 <__swsetup_r+0x14>
 801cb14:	f7ff ff3e 	bl	801c994 <__sinit>
 801cb18:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801cb1c:	0719      	lsls	r1, r3, #28
 801cb1e:	d422      	bmi.n	801cb66 <__swsetup_r+0x62>
 801cb20:	06da      	lsls	r2, r3, #27
 801cb22:	d407      	bmi.n	801cb34 <__swsetup_r+0x30>
 801cb24:	2209      	movs	r2, #9
 801cb26:	602a      	str	r2, [r5, #0]
 801cb28:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801cb2c:	81a3      	strh	r3, [r4, #12]
 801cb2e:	f04f 30ff 	mov.w	r0, #4294967295
 801cb32:	e033      	b.n	801cb9c <__swsetup_r+0x98>
 801cb34:	0758      	lsls	r0, r3, #29
 801cb36:	d512      	bpl.n	801cb5e <__swsetup_r+0x5a>
 801cb38:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801cb3a:	b141      	cbz	r1, 801cb4e <__swsetup_r+0x4a>
 801cb3c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801cb40:	4299      	cmp	r1, r3
 801cb42:	d002      	beq.n	801cb4a <__swsetup_r+0x46>
 801cb44:	4628      	mov	r0, r5
 801cb46:	f000 ff13 	bl	801d970 <_free_r>
 801cb4a:	2300      	movs	r3, #0
 801cb4c:	6363      	str	r3, [r4, #52]	@ 0x34
 801cb4e:	89a3      	ldrh	r3, [r4, #12]
 801cb50:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801cb54:	81a3      	strh	r3, [r4, #12]
 801cb56:	2300      	movs	r3, #0
 801cb58:	6063      	str	r3, [r4, #4]
 801cb5a:	6923      	ldr	r3, [r4, #16]
 801cb5c:	6023      	str	r3, [r4, #0]
 801cb5e:	89a3      	ldrh	r3, [r4, #12]
 801cb60:	f043 0308 	orr.w	r3, r3, #8
 801cb64:	81a3      	strh	r3, [r4, #12]
 801cb66:	6923      	ldr	r3, [r4, #16]
 801cb68:	b94b      	cbnz	r3, 801cb7e <__swsetup_r+0x7a>
 801cb6a:	89a3      	ldrh	r3, [r4, #12]
 801cb6c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801cb70:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801cb74:	d003      	beq.n	801cb7e <__swsetup_r+0x7a>
 801cb76:	4621      	mov	r1, r4
 801cb78:	4628      	mov	r0, r5
 801cb7a:	f001 fd87 	bl	801e68c <__smakebuf_r>
 801cb7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801cb82:	f013 0201 	ands.w	r2, r3, #1
 801cb86:	d00a      	beq.n	801cb9e <__swsetup_r+0x9a>
 801cb88:	2200      	movs	r2, #0
 801cb8a:	60a2      	str	r2, [r4, #8]
 801cb8c:	6962      	ldr	r2, [r4, #20]
 801cb8e:	4252      	negs	r2, r2
 801cb90:	61a2      	str	r2, [r4, #24]
 801cb92:	6922      	ldr	r2, [r4, #16]
 801cb94:	b942      	cbnz	r2, 801cba8 <__swsetup_r+0xa4>
 801cb96:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801cb9a:	d1c5      	bne.n	801cb28 <__swsetup_r+0x24>
 801cb9c:	bd38      	pop	{r3, r4, r5, pc}
 801cb9e:	0799      	lsls	r1, r3, #30
 801cba0:	bf58      	it	pl
 801cba2:	6962      	ldrpl	r2, [r4, #20]
 801cba4:	60a2      	str	r2, [r4, #8]
 801cba6:	e7f4      	b.n	801cb92 <__swsetup_r+0x8e>
 801cba8:	2000      	movs	r0, #0
 801cbaa:	e7f7      	b.n	801cb9c <__swsetup_r+0x98>
 801cbac:	20000164 	.word	0x20000164

0801cbb0 <memset>:
 801cbb0:	4402      	add	r2, r0
 801cbb2:	4603      	mov	r3, r0
 801cbb4:	4293      	cmp	r3, r2
 801cbb6:	d100      	bne.n	801cbba <memset+0xa>
 801cbb8:	4770      	bx	lr
 801cbba:	f803 1b01 	strb.w	r1, [r3], #1
 801cbbe:	e7f9      	b.n	801cbb4 <memset+0x4>

0801cbc0 <_localeconv_r>:
 801cbc0:	4800      	ldr	r0, [pc, #0]	@ (801cbc4 <_localeconv_r+0x4>)
 801cbc2:	4770      	bx	lr
 801cbc4:	200002a4 	.word	0x200002a4

0801cbc8 <_close_r>:
 801cbc8:	b538      	push	{r3, r4, r5, lr}
 801cbca:	4d06      	ldr	r5, [pc, #24]	@ (801cbe4 <_close_r+0x1c>)
 801cbcc:	2300      	movs	r3, #0
 801cbce:	4604      	mov	r4, r0
 801cbd0:	4608      	mov	r0, r1
 801cbd2:	602b      	str	r3, [r5, #0]
 801cbd4:	f7e5 fc34 	bl	8002440 <_close>
 801cbd8:	1c43      	adds	r3, r0, #1
 801cbda:	d102      	bne.n	801cbe2 <_close_r+0x1a>
 801cbdc:	682b      	ldr	r3, [r5, #0]
 801cbde:	b103      	cbz	r3, 801cbe2 <_close_r+0x1a>
 801cbe0:	6023      	str	r3, [r4, #0]
 801cbe2:	bd38      	pop	{r3, r4, r5, pc}
 801cbe4:	200024f4 	.word	0x200024f4

0801cbe8 <_lseek_r>:
 801cbe8:	b538      	push	{r3, r4, r5, lr}
 801cbea:	4d07      	ldr	r5, [pc, #28]	@ (801cc08 <_lseek_r+0x20>)
 801cbec:	4604      	mov	r4, r0
 801cbee:	4608      	mov	r0, r1
 801cbf0:	4611      	mov	r1, r2
 801cbf2:	2200      	movs	r2, #0
 801cbf4:	602a      	str	r2, [r5, #0]
 801cbf6:	461a      	mov	r2, r3
 801cbf8:	f7e5 fc46 	bl	8002488 <_lseek>
 801cbfc:	1c43      	adds	r3, r0, #1
 801cbfe:	d102      	bne.n	801cc06 <_lseek_r+0x1e>
 801cc00:	682b      	ldr	r3, [r5, #0]
 801cc02:	b103      	cbz	r3, 801cc06 <_lseek_r+0x1e>
 801cc04:	6023      	str	r3, [r4, #0]
 801cc06:	bd38      	pop	{r3, r4, r5, pc}
 801cc08:	200024f4 	.word	0x200024f4

0801cc0c <_read_r>:
 801cc0c:	b538      	push	{r3, r4, r5, lr}
 801cc0e:	4d07      	ldr	r5, [pc, #28]	@ (801cc2c <_read_r+0x20>)
 801cc10:	4604      	mov	r4, r0
 801cc12:	4608      	mov	r0, r1
 801cc14:	4611      	mov	r1, r2
 801cc16:	2200      	movs	r2, #0
 801cc18:	602a      	str	r2, [r5, #0]
 801cc1a:	461a      	mov	r2, r3
 801cc1c:	f7e5 fbd7 	bl	80023ce <_read>
 801cc20:	1c43      	adds	r3, r0, #1
 801cc22:	d102      	bne.n	801cc2a <_read_r+0x1e>
 801cc24:	682b      	ldr	r3, [r5, #0]
 801cc26:	b103      	cbz	r3, 801cc2a <_read_r+0x1e>
 801cc28:	6023      	str	r3, [r4, #0]
 801cc2a:	bd38      	pop	{r3, r4, r5, pc}
 801cc2c:	200024f4 	.word	0x200024f4

0801cc30 <_write_r>:
 801cc30:	b538      	push	{r3, r4, r5, lr}
 801cc32:	4d07      	ldr	r5, [pc, #28]	@ (801cc50 <_write_r+0x20>)
 801cc34:	4604      	mov	r4, r0
 801cc36:	4608      	mov	r0, r1
 801cc38:	4611      	mov	r1, r2
 801cc3a:	2200      	movs	r2, #0
 801cc3c:	602a      	str	r2, [r5, #0]
 801cc3e:	461a      	mov	r2, r3
 801cc40:	f7e5 fbe2 	bl	8002408 <_write>
 801cc44:	1c43      	adds	r3, r0, #1
 801cc46:	d102      	bne.n	801cc4e <_write_r+0x1e>
 801cc48:	682b      	ldr	r3, [r5, #0]
 801cc4a:	b103      	cbz	r3, 801cc4e <_write_r+0x1e>
 801cc4c:	6023      	str	r3, [r4, #0]
 801cc4e:	bd38      	pop	{r3, r4, r5, pc}
 801cc50:	200024f4 	.word	0x200024f4

0801cc54 <__errno>:
 801cc54:	4b01      	ldr	r3, [pc, #4]	@ (801cc5c <__errno+0x8>)
 801cc56:	6818      	ldr	r0, [r3, #0]
 801cc58:	4770      	bx	lr
 801cc5a:	bf00      	nop
 801cc5c:	20000164 	.word	0x20000164

0801cc60 <__libc_init_array>:
 801cc60:	b570      	push	{r4, r5, r6, lr}
 801cc62:	4d0d      	ldr	r5, [pc, #52]	@ (801cc98 <__libc_init_array+0x38>)
 801cc64:	4c0d      	ldr	r4, [pc, #52]	@ (801cc9c <__libc_init_array+0x3c>)
 801cc66:	1b64      	subs	r4, r4, r5
 801cc68:	10a4      	asrs	r4, r4, #2
 801cc6a:	2600      	movs	r6, #0
 801cc6c:	42a6      	cmp	r6, r4
 801cc6e:	d109      	bne.n	801cc84 <__libc_init_array+0x24>
 801cc70:	4d0b      	ldr	r5, [pc, #44]	@ (801cca0 <__libc_init_array+0x40>)
 801cc72:	4c0c      	ldr	r4, [pc, #48]	@ (801cca4 <__libc_init_array+0x44>)
 801cc74:	f001 fea8 	bl	801e9c8 <_init>
 801cc78:	1b64      	subs	r4, r4, r5
 801cc7a:	10a4      	asrs	r4, r4, #2
 801cc7c:	2600      	movs	r6, #0
 801cc7e:	42a6      	cmp	r6, r4
 801cc80:	d105      	bne.n	801cc8e <__libc_init_array+0x2e>
 801cc82:	bd70      	pop	{r4, r5, r6, pc}
 801cc84:	f855 3b04 	ldr.w	r3, [r5], #4
 801cc88:	4798      	blx	r3
 801cc8a:	3601      	adds	r6, #1
 801cc8c:	e7ee      	b.n	801cc6c <__libc_init_array+0xc>
 801cc8e:	f855 3b04 	ldr.w	r3, [r5], #4
 801cc92:	4798      	blx	r3
 801cc94:	3601      	adds	r6, #1
 801cc96:	e7f2      	b.n	801cc7e <__libc_init_array+0x1e>
 801cc98:	0801fdf8 	.word	0x0801fdf8
 801cc9c:	0801fdf8 	.word	0x0801fdf8
 801cca0:	0801fdf8 	.word	0x0801fdf8
 801cca4:	0801fdfc 	.word	0x0801fdfc

0801cca8 <__retarget_lock_init_recursive>:
 801cca8:	4770      	bx	lr

0801ccaa <__retarget_lock_acquire_recursive>:
 801ccaa:	4770      	bx	lr

0801ccac <__retarget_lock_release_recursive>:
 801ccac:	4770      	bx	lr

0801ccae <memcpy>:
 801ccae:	440a      	add	r2, r1
 801ccb0:	4291      	cmp	r1, r2
 801ccb2:	f100 33ff 	add.w	r3, r0, #4294967295
 801ccb6:	d100      	bne.n	801ccba <memcpy+0xc>
 801ccb8:	4770      	bx	lr
 801ccba:	b510      	push	{r4, lr}
 801ccbc:	f811 4b01 	ldrb.w	r4, [r1], #1
 801ccc0:	f803 4f01 	strb.w	r4, [r3, #1]!
 801ccc4:	4291      	cmp	r1, r2
 801ccc6:	d1f9      	bne.n	801ccbc <memcpy+0xe>
 801ccc8:	bd10      	pop	{r4, pc}

0801ccca <quorem>:
 801ccca:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ccce:	6903      	ldr	r3, [r0, #16]
 801ccd0:	690c      	ldr	r4, [r1, #16]
 801ccd2:	42a3      	cmp	r3, r4
 801ccd4:	4607      	mov	r7, r0
 801ccd6:	db7e      	blt.n	801cdd6 <quorem+0x10c>
 801ccd8:	3c01      	subs	r4, #1
 801ccda:	f101 0814 	add.w	r8, r1, #20
 801ccde:	00a3      	lsls	r3, r4, #2
 801cce0:	f100 0514 	add.w	r5, r0, #20
 801cce4:	9300      	str	r3, [sp, #0]
 801cce6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801ccea:	9301      	str	r3, [sp, #4]
 801ccec:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801ccf0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801ccf4:	3301      	adds	r3, #1
 801ccf6:	429a      	cmp	r2, r3
 801ccf8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801ccfc:	fbb2 f6f3 	udiv	r6, r2, r3
 801cd00:	d32e      	bcc.n	801cd60 <quorem+0x96>
 801cd02:	f04f 0a00 	mov.w	sl, #0
 801cd06:	46c4      	mov	ip, r8
 801cd08:	46ae      	mov	lr, r5
 801cd0a:	46d3      	mov	fp, sl
 801cd0c:	f85c 3b04 	ldr.w	r3, [ip], #4
 801cd10:	b298      	uxth	r0, r3
 801cd12:	fb06 a000 	mla	r0, r6, r0, sl
 801cd16:	0c02      	lsrs	r2, r0, #16
 801cd18:	0c1b      	lsrs	r3, r3, #16
 801cd1a:	fb06 2303 	mla	r3, r6, r3, r2
 801cd1e:	f8de 2000 	ldr.w	r2, [lr]
 801cd22:	b280      	uxth	r0, r0
 801cd24:	b292      	uxth	r2, r2
 801cd26:	1a12      	subs	r2, r2, r0
 801cd28:	445a      	add	r2, fp
 801cd2a:	f8de 0000 	ldr.w	r0, [lr]
 801cd2e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801cd32:	b29b      	uxth	r3, r3
 801cd34:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 801cd38:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 801cd3c:	b292      	uxth	r2, r2
 801cd3e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 801cd42:	45e1      	cmp	r9, ip
 801cd44:	f84e 2b04 	str.w	r2, [lr], #4
 801cd48:	ea4f 4b23 	mov.w	fp, r3, asr #16
 801cd4c:	d2de      	bcs.n	801cd0c <quorem+0x42>
 801cd4e:	9b00      	ldr	r3, [sp, #0]
 801cd50:	58eb      	ldr	r3, [r5, r3]
 801cd52:	b92b      	cbnz	r3, 801cd60 <quorem+0x96>
 801cd54:	9b01      	ldr	r3, [sp, #4]
 801cd56:	3b04      	subs	r3, #4
 801cd58:	429d      	cmp	r5, r3
 801cd5a:	461a      	mov	r2, r3
 801cd5c:	d32f      	bcc.n	801cdbe <quorem+0xf4>
 801cd5e:	613c      	str	r4, [r7, #16]
 801cd60:	4638      	mov	r0, r7
 801cd62:	f001 f97f 	bl	801e064 <__mcmp>
 801cd66:	2800      	cmp	r0, #0
 801cd68:	db25      	blt.n	801cdb6 <quorem+0xec>
 801cd6a:	4629      	mov	r1, r5
 801cd6c:	2000      	movs	r0, #0
 801cd6e:	f858 2b04 	ldr.w	r2, [r8], #4
 801cd72:	f8d1 c000 	ldr.w	ip, [r1]
 801cd76:	fa1f fe82 	uxth.w	lr, r2
 801cd7a:	fa1f f38c 	uxth.w	r3, ip
 801cd7e:	eba3 030e 	sub.w	r3, r3, lr
 801cd82:	4403      	add	r3, r0
 801cd84:	0c12      	lsrs	r2, r2, #16
 801cd86:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 801cd8a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 801cd8e:	b29b      	uxth	r3, r3
 801cd90:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801cd94:	45c1      	cmp	r9, r8
 801cd96:	f841 3b04 	str.w	r3, [r1], #4
 801cd9a:	ea4f 4022 	mov.w	r0, r2, asr #16
 801cd9e:	d2e6      	bcs.n	801cd6e <quorem+0xa4>
 801cda0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801cda4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801cda8:	b922      	cbnz	r2, 801cdb4 <quorem+0xea>
 801cdaa:	3b04      	subs	r3, #4
 801cdac:	429d      	cmp	r5, r3
 801cdae:	461a      	mov	r2, r3
 801cdb0:	d30b      	bcc.n	801cdca <quorem+0x100>
 801cdb2:	613c      	str	r4, [r7, #16]
 801cdb4:	3601      	adds	r6, #1
 801cdb6:	4630      	mov	r0, r6
 801cdb8:	b003      	add	sp, #12
 801cdba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cdbe:	6812      	ldr	r2, [r2, #0]
 801cdc0:	3b04      	subs	r3, #4
 801cdc2:	2a00      	cmp	r2, #0
 801cdc4:	d1cb      	bne.n	801cd5e <quorem+0x94>
 801cdc6:	3c01      	subs	r4, #1
 801cdc8:	e7c6      	b.n	801cd58 <quorem+0x8e>
 801cdca:	6812      	ldr	r2, [r2, #0]
 801cdcc:	3b04      	subs	r3, #4
 801cdce:	2a00      	cmp	r2, #0
 801cdd0:	d1ef      	bne.n	801cdb2 <quorem+0xe8>
 801cdd2:	3c01      	subs	r4, #1
 801cdd4:	e7ea      	b.n	801cdac <quorem+0xe2>
 801cdd6:	2000      	movs	r0, #0
 801cdd8:	e7ee      	b.n	801cdb8 <quorem+0xee>
 801cdda:	0000      	movs	r0, r0
 801cddc:	0000      	movs	r0, r0
	...

0801cde0 <_dtoa_r>:
 801cde0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cde4:	69c7      	ldr	r7, [r0, #28]
 801cde6:	b097      	sub	sp, #92	@ 0x5c
 801cde8:	4614      	mov	r4, r2
 801cdea:	461d      	mov	r5, r3
 801cdec:	e9cd 4502 	strd	r4, r5, [sp, #8]
 801cdf0:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 801cdf2:	4683      	mov	fp, r0
 801cdf4:	b97f      	cbnz	r7, 801ce16 <_dtoa_r+0x36>
 801cdf6:	2010      	movs	r0, #16
 801cdf8:	f000 fe04 	bl	801da04 <malloc>
 801cdfc:	4602      	mov	r2, r0
 801cdfe:	f8cb 001c 	str.w	r0, [fp, #28]
 801ce02:	b920      	cbnz	r0, 801ce0e <_dtoa_r+0x2e>
 801ce04:	4ba8      	ldr	r3, [pc, #672]	@ (801d0a8 <_dtoa_r+0x2c8>)
 801ce06:	21ef      	movs	r1, #239	@ 0xef
 801ce08:	48a8      	ldr	r0, [pc, #672]	@ (801d0ac <_dtoa_r+0x2cc>)
 801ce0a:	f001 fcad 	bl	801e768 <__assert_func>
 801ce0e:	e9c0 7701 	strd	r7, r7, [r0, #4]
 801ce12:	6007      	str	r7, [r0, #0]
 801ce14:	60c7      	str	r7, [r0, #12]
 801ce16:	f8db 301c 	ldr.w	r3, [fp, #28]
 801ce1a:	6819      	ldr	r1, [r3, #0]
 801ce1c:	b159      	cbz	r1, 801ce36 <_dtoa_r+0x56>
 801ce1e:	685a      	ldr	r2, [r3, #4]
 801ce20:	604a      	str	r2, [r1, #4]
 801ce22:	2301      	movs	r3, #1
 801ce24:	4093      	lsls	r3, r2
 801ce26:	608b      	str	r3, [r1, #8]
 801ce28:	4658      	mov	r0, fp
 801ce2a:	f000 fee1 	bl	801dbf0 <_Bfree>
 801ce2e:	f8db 301c 	ldr.w	r3, [fp, #28]
 801ce32:	2200      	movs	r2, #0
 801ce34:	601a      	str	r2, [r3, #0]
 801ce36:	1e2b      	subs	r3, r5, #0
 801ce38:	bfb9      	ittee	lt
 801ce3a:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 801ce3e:	9303      	strlt	r3, [sp, #12]
 801ce40:	2300      	movge	r3, #0
 801ce42:	6033      	strge	r3, [r6, #0]
 801ce44:	f8dd 800c 	ldr.w	r8, [sp, #12]
 801ce48:	4b99      	ldr	r3, [pc, #612]	@ (801d0b0 <_dtoa_r+0x2d0>)
 801ce4a:	bfbc      	itt	lt
 801ce4c:	2201      	movlt	r2, #1
 801ce4e:	6032      	strlt	r2, [r6, #0]
 801ce50:	ea33 0308 	bics.w	r3, r3, r8
 801ce54:	d112      	bne.n	801ce7c <_dtoa_r+0x9c>
 801ce56:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 801ce58:	f242 730f 	movw	r3, #9999	@ 0x270f
 801ce5c:	6013      	str	r3, [r2, #0]
 801ce5e:	f3c8 0313 	ubfx	r3, r8, #0, #20
 801ce62:	4323      	orrs	r3, r4
 801ce64:	f000 8551 	beq.w	801d90a <_dtoa_r+0xb2a>
 801ce68:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801ce6a:	f8df a248 	ldr.w	sl, [pc, #584]	@ 801d0b4 <_dtoa_r+0x2d4>
 801ce6e:	2b00      	cmp	r3, #0
 801ce70:	f000 8553 	beq.w	801d91a <_dtoa_r+0xb3a>
 801ce74:	f10a 0303 	add.w	r3, sl, #3
 801ce78:	f000 bd4d 	b.w	801d916 <_dtoa_r+0xb36>
 801ce7c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801ce80:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 801ce84:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801ce88:	2200      	movs	r2, #0
 801ce8a:	2300      	movs	r3, #0
 801ce8c:	f7e3 fdf4 	bl	8000a78 <__aeabi_dcmpeq>
 801ce90:	4607      	mov	r7, r0
 801ce92:	b158      	cbz	r0, 801ceac <_dtoa_r+0xcc>
 801ce94:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 801ce96:	2301      	movs	r3, #1
 801ce98:	6013      	str	r3, [r2, #0]
 801ce9a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801ce9c:	b113      	cbz	r3, 801cea4 <_dtoa_r+0xc4>
 801ce9e:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 801cea0:	4b85      	ldr	r3, [pc, #532]	@ (801d0b8 <_dtoa_r+0x2d8>)
 801cea2:	6013      	str	r3, [r2, #0]
 801cea4:	f8df a214 	ldr.w	sl, [pc, #532]	@ 801d0bc <_dtoa_r+0x2dc>
 801cea8:	f000 bd37 	b.w	801d91a <_dtoa_r+0xb3a>
 801ceac:	ab14      	add	r3, sp, #80	@ 0x50
 801ceae:	9301      	str	r3, [sp, #4]
 801ceb0:	ab15      	add	r3, sp, #84	@ 0x54
 801ceb2:	9300      	str	r3, [sp, #0]
 801ceb4:	4658      	mov	r0, fp
 801ceb6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 801ceba:	f001 f981 	bl	801e1c0 <__d2b>
 801cebe:	f3c8 560a 	ubfx	r6, r8, #20, #11
 801cec2:	4681      	mov	r9, r0
 801cec4:	2e00      	cmp	r6, #0
 801cec6:	d076      	beq.n	801cfb6 <_dtoa_r+0x1d6>
 801cec8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801ceca:	9712      	str	r7, [sp, #72]	@ 0x48
 801cecc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801ced0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801ced4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 801ced8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 801cedc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 801cee0:	4619      	mov	r1, r3
 801cee2:	2200      	movs	r2, #0
 801cee4:	4b76      	ldr	r3, [pc, #472]	@ (801d0c0 <_dtoa_r+0x2e0>)
 801cee6:	f7e3 f9a7 	bl	8000238 <__aeabi_dsub>
 801ceea:	a369      	add	r3, pc, #420	@ (adr r3, 801d090 <_dtoa_r+0x2b0>)
 801ceec:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cef0:	f7e3 fb5a 	bl	80005a8 <__aeabi_dmul>
 801cef4:	a368      	add	r3, pc, #416	@ (adr r3, 801d098 <_dtoa_r+0x2b8>)
 801cef6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cefa:	f7e3 f99f 	bl	800023c <__adddf3>
 801cefe:	4604      	mov	r4, r0
 801cf00:	4630      	mov	r0, r6
 801cf02:	460d      	mov	r5, r1
 801cf04:	f7e3 fae6 	bl	80004d4 <__aeabi_i2d>
 801cf08:	a365      	add	r3, pc, #404	@ (adr r3, 801d0a0 <_dtoa_r+0x2c0>)
 801cf0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cf0e:	f7e3 fb4b 	bl	80005a8 <__aeabi_dmul>
 801cf12:	4602      	mov	r2, r0
 801cf14:	460b      	mov	r3, r1
 801cf16:	4620      	mov	r0, r4
 801cf18:	4629      	mov	r1, r5
 801cf1a:	f7e3 f98f 	bl	800023c <__adddf3>
 801cf1e:	4604      	mov	r4, r0
 801cf20:	460d      	mov	r5, r1
 801cf22:	f7e3 fdf1 	bl	8000b08 <__aeabi_d2iz>
 801cf26:	2200      	movs	r2, #0
 801cf28:	4607      	mov	r7, r0
 801cf2a:	2300      	movs	r3, #0
 801cf2c:	4620      	mov	r0, r4
 801cf2e:	4629      	mov	r1, r5
 801cf30:	f7e3 fdac 	bl	8000a8c <__aeabi_dcmplt>
 801cf34:	b140      	cbz	r0, 801cf48 <_dtoa_r+0x168>
 801cf36:	4638      	mov	r0, r7
 801cf38:	f7e3 facc 	bl	80004d4 <__aeabi_i2d>
 801cf3c:	4622      	mov	r2, r4
 801cf3e:	462b      	mov	r3, r5
 801cf40:	f7e3 fd9a 	bl	8000a78 <__aeabi_dcmpeq>
 801cf44:	b900      	cbnz	r0, 801cf48 <_dtoa_r+0x168>
 801cf46:	3f01      	subs	r7, #1
 801cf48:	2f16      	cmp	r7, #22
 801cf4a:	d852      	bhi.n	801cff2 <_dtoa_r+0x212>
 801cf4c:	4b5d      	ldr	r3, [pc, #372]	@ (801d0c4 <_dtoa_r+0x2e4>)
 801cf4e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801cf52:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cf56:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801cf5a:	f7e3 fd97 	bl	8000a8c <__aeabi_dcmplt>
 801cf5e:	2800      	cmp	r0, #0
 801cf60:	d049      	beq.n	801cff6 <_dtoa_r+0x216>
 801cf62:	3f01      	subs	r7, #1
 801cf64:	2300      	movs	r3, #0
 801cf66:	930f      	str	r3, [sp, #60]	@ 0x3c
 801cf68:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801cf6a:	1b9b      	subs	r3, r3, r6
 801cf6c:	1e5a      	subs	r2, r3, #1
 801cf6e:	bf44      	itt	mi
 801cf70:	f1c3 0801 	rsbmi	r8, r3, #1
 801cf74:	2300      	movmi	r3, #0
 801cf76:	9209      	str	r2, [sp, #36]	@ 0x24
 801cf78:	bf54      	ite	pl
 801cf7a:	f04f 0800 	movpl.w	r8, #0
 801cf7e:	9309      	strmi	r3, [sp, #36]	@ 0x24
 801cf80:	2f00      	cmp	r7, #0
 801cf82:	db3a      	blt.n	801cffa <_dtoa_r+0x21a>
 801cf84:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801cf86:	970e      	str	r7, [sp, #56]	@ 0x38
 801cf88:	443b      	add	r3, r7
 801cf8a:	9309      	str	r3, [sp, #36]	@ 0x24
 801cf8c:	2300      	movs	r3, #0
 801cf8e:	930a      	str	r3, [sp, #40]	@ 0x28
 801cf90:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801cf92:	2b09      	cmp	r3, #9
 801cf94:	d865      	bhi.n	801d062 <_dtoa_r+0x282>
 801cf96:	2b05      	cmp	r3, #5
 801cf98:	bfc4      	itt	gt
 801cf9a:	3b04      	subgt	r3, #4
 801cf9c:	9320      	strgt	r3, [sp, #128]	@ 0x80
 801cf9e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801cfa0:	f1a3 0302 	sub.w	r3, r3, #2
 801cfa4:	bfcc      	ite	gt
 801cfa6:	2400      	movgt	r4, #0
 801cfa8:	2401      	movle	r4, #1
 801cfaa:	2b03      	cmp	r3, #3
 801cfac:	d864      	bhi.n	801d078 <_dtoa_r+0x298>
 801cfae:	e8df f003 	tbb	[pc, r3]
 801cfb2:	382b      	.short	0x382b
 801cfb4:	5636      	.short	0x5636
 801cfb6:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 801cfba:	441e      	add	r6, r3
 801cfbc:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 801cfc0:	2b20      	cmp	r3, #32
 801cfc2:	bfc1      	itttt	gt
 801cfc4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 801cfc8:	fa08 f803 	lslgt.w	r8, r8, r3
 801cfcc:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 801cfd0:	fa24 f303 	lsrgt.w	r3, r4, r3
 801cfd4:	bfd6      	itet	le
 801cfd6:	f1c3 0320 	rsble	r3, r3, #32
 801cfda:	ea48 0003 	orrgt.w	r0, r8, r3
 801cfde:	fa04 f003 	lslle.w	r0, r4, r3
 801cfe2:	f7e3 fa67 	bl	80004b4 <__aeabi_ui2d>
 801cfe6:	2201      	movs	r2, #1
 801cfe8:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 801cfec:	3e01      	subs	r6, #1
 801cfee:	9212      	str	r2, [sp, #72]	@ 0x48
 801cff0:	e776      	b.n	801cee0 <_dtoa_r+0x100>
 801cff2:	2301      	movs	r3, #1
 801cff4:	e7b7      	b.n	801cf66 <_dtoa_r+0x186>
 801cff6:	900f      	str	r0, [sp, #60]	@ 0x3c
 801cff8:	e7b6      	b.n	801cf68 <_dtoa_r+0x188>
 801cffa:	427b      	negs	r3, r7
 801cffc:	930a      	str	r3, [sp, #40]	@ 0x28
 801cffe:	2300      	movs	r3, #0
 801d000:	eba8 0807 	sub.w	r8, r8, r7
 801d004:	930e      	str	r3, [sp, #56]	@ 0x38
 801d006:	e7c3      	b.n	801cf90 <_dtoa_r+0x1b0>
 801d008:	2300      	movs	r3, #0
 801d00a:	930b      	str	r3, [sp, #44]	@ 0x2c
 801d00c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801d00e:	2b00      	cmp	r3, #0
 801d010:	dc35      	bgt.n	801d07e <_dtoa_r+0x29e>
 801d012:	2301      	movs	r3, #1
 801d014:	e9cd 3307 	strd	r3, r3, [sp, #28]
 801d018:	461a      	mov	r2, r3
 801d01a:	9221      	str	r2, [sp, #132]	@ 0x84
 801d01c:	e00b      	b.n	801d036 <_dtoa_r+0x256>
 801d01e:	2301      	movs	r3, #1
 801d020:	e7f3      	b.n	801d00a <_dtoa_r+0x22a>
 801d022:	2300      	movs	r3, #0
 801d024:	930b      	str	r3, [sp, #44]	@ 0x2c
 801d026:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801d028:	18fb      	adds	r3, r7, r3
 801d02a:	9308      	str	r3, [sp, #32]
 801d02c:	3301      	adds	r3, #1
 801d02e:	2b01      	cmp	r3, #1
 801d030:	9307      	str	r3, [sp, #28]
 801d032:	bfb8      	it	lt
 801d034:	2301      	movlt	r3, #1
 801d036:	f8db 001c 	ldr.w	r0, [fp, #28]
 801d03a:	2100      	movs	r1, #0
 801d03c:	2204      	movs	r2, #4
 801d03e:	f102 0514 	add.w	r5, r2, #20
 801d042:	429d      	cmp	r5, r3
 801d044:	d91f      	bls.n	801d086 <_dtoa_r+0x2a6>
 801d046:	6041      	str	r1, [r0, #4]
 801d048:	4658      	mov	r0, fp
 801d04a:	f000 fd91 	bl	801db70 <_Balloc>
 801d04e:	4682      	mov	sl, r0
 801d050:	2800      	cmp	r0, #0
 801d052:	d13b      	bne.n	801d0cc <_dtoa_r+0x2ec>
 801d054:	4b1c      	ldr	r3, [pc, #112]	@ (801d0c8 <_dtoa_r+0x2e8>)
 801d056:	4602      	mov	r2, r0
 801d058:	f240 11af 	movw	r1, #431	@ 0x1af
 801d05c:	e6d4      	b.n	801ce08 <_dtoa_r+0x28>
 801d05e:	2301      	movs	r3, #1
 801d060:	e7e0      	b.n	801d024 <_dtoa_r+0x244>
 801d062:	2401      	movs	r4, #1
 801d064:	2300      	movs	r3, #0
 801d066:	9320      	str	r3, [sp, #128]	@ 0x80
 801d068:	940b      	str	r4, [sp, #44]	@ 0x2c
 801d06a:	f04f 33ff 	mov.w	r3, #4294967295
 801d06e:	e9cd 3307 	strd	r3, r3, [sp, #28]
 801d072:	2200      	movs	r2, #0
 801d074:	2312      	movs	r3, #18
 801d076:	e7d0      	b.n	801d01a <_dtoa_r+0x23a>
 801d078:	2301      	movs	r3, #1
 801d07a:	930b      	str	r3, [sp, #44]	@ 0x2c
 801d07c:	e7f5      	b.n	801d06a <_dtoa_r+0x28a>
 801d07e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801d080:	e9cd 3307 	strd	r3, r3, [sp, #28]
 801d084:	e7d7      	b.n	801d036 <_dtoa_r+0x256>
 801d086:	3101      	adds	r1, #1
 801d088:	0052      	lsls	r2, r2, #1
 801d08a:	e7d8      	b.n	801d03e <_dtoa_r+0x25e>
 801d08c:	f3af 8000 	nop.w
 801d090:	636f4361 	.word	0x636f4361
 801d094:	3fd287a7 	.word	0x3fd287a7
 801d098:	8b60c8b3 	.word	0x8b60c8b3
 801d09c:	3fc68a28 	.word	0x3fc68a28
 801d0a0:	509f79fb 	.word	0x509f79fb
 801d0a4:	3fd34413 	.word	0x3fd34413
 801d0a8:	0801f9fd 	.word	0x0801f9fd
 801d0ac:	0801fa14 	.word	0x0801fa14
 801d0b0:	7ff00000 	.word	0x7ff00000
 801d0b4:	0801f9f9 	.word	0x0801f9f9
 801d0b8:	0801f9cd 	.word	0x0801f9cd
 801d0bc:	0801f9cc 	.word	0x0801f9cc
 801d0c0:	3ff80000 	.word	0x3ff80000
 801d0c4:	0801fb10 	.word	0x0801fb10
 801d0c8:	0801fa6c 	.word	0x0801fa6c
 801d0cc:	f8db 301c 	ldr.w	r3, [fp, #28]
 801d0d0:	6018      	str	r0, [r3, #0]
 801d0d2:	9b07      	ldr	r3, [sp, #28]
 801d0d4:	2b0e      	cmp	r3, #14
 801d0d6:	f200 80a4 	bhi.w	801d222 <_dtoa_r+0x442>
 801d0da:	2c00      	cmp	r4, #0
 801d0dc:	f000 80a1 	beq.w	801d222 <_dtoa_r+0x442>
 801d0e0:	2f00      	cmp	r7, #0
 801d0e2:	dd33      	ble.n	801d14c <_dtoa_r+0x36c>
 801d0e4:	4b86      	ldr	r3, [pc, #536]	@ (801d300 <_dtoa_r+0x520>)
 801d0e6:	f007 020f 	and.w	r2, r7, #15
 801d0ea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801d0ee:	e9d3 3400 	ldrd	r3, r4, [r3]
 801d0f2:	05f8      	lsls	r0, r7, #23
 801d0f4:	e9cd 3404 	strd	r3, r4, [sp, #16]
 801d0f8:	ea4f 1427 	mov.w	r4, r7, asr #4
 801d0fc:	d516      	bpl.n	801d12c <_dtoa_r+0x34c>
 801d0fe:	4b81      	ldr	r3, [pc, #516]	@ (801d304 <_dtoa_r+0x524>)
 801d100:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801d104:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801d108:	f7e3 fb78 	bl	80007fc <__aeabi_ddiv>
 801d10c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801d110:	f004 040f 	and.w	r4, r4, #15
 801d114:	2603      	movs	r6, #3
 801d116:	4d7b      	ldr	r5, [pc, #492]	@ (801d304 <_dtoa_r+0x524>)
 801d118:	b954      	cbnz	r4, 801d130 <_dtoa_r+0x350>
 801d11a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801d11e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801d122:	f7e3 fb6b 	bl	80007fc <__aeabi_ddiv>
 801d126:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801d12a:	e028      	b.n	801d17e <_dtoa_r+0x39e>
 801d12c:	2602      	movs	r6, #2
 801d12e:	e7f2      	b.n	801d116 <_dtoa_r+0x336>
 801d130:	07e1      	lsls	r1, r4, #31
 801d132:	d508      	bpl.n	801d146 <_dtoa_r+0x366>
 801d134:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801d138:	e9d5 2300 	ldrd	r2, r3, [r5]
 801d13c:	f7e3 fa34 	bl	80005a8 <__aeabi_dmul>
 801d140:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801d144:	3601      	adds	r6, #1
 801d146:	1064      	asrs	r4, r4, #1
 801d148:	3508      	adds	r5, #8
 801d14a:	e7e5      	b.n	801d118 <_dtoa_r+0x338>
 801d14c:	f000 80d2 	beq.w	801d2f4 <_dtoa_r+0x514>
 801d150:	427c      	negs	r4, r7
 801d152:	4b6b      	ldr	r3, [pc, #428]	@ (801d300 <_dtoa_r+0x520>)
 801d154:	4d6b      	ldr	r5, [pc, #428]	@ (801d304 <_dtoa_r+0x524>)
 801d156:	f004 020f 	and.w	r2, r4, #15
 801d15a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801d15e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d162:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801d166:	f7e3 fa1f 	bl	80005a8 <__aeabi_dmul>
 801d16a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801d16e:	1124      	asrs	r4, r4, #4
 801d170:	2300      	movs	r3, #0
 801d172:	2602      	movs	r6, #2
 801d174:	2c00      	cmp	r4, #0
 801d176:	f040 80b2 	bne.w	801d2de <_dtoa_r+0x4fe>
 801d17a:	2b00      	cmp	r3, #0
 801d17c:	d1d3      	bne.n	801d126 <_dtoa_r+0x346>
 801d17e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801d180:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 801d184:	2b00      	cmp	r3, #0
 801d186:	f000 80b7 	beq.w	801d2f8 <_dtoa_r+0x518>
 801d18a:	4b5f      	ldr	r3, [pc, #380]	@ (801d308 <_dtoa_r+0x528>)
 801d18c:	2200      	movs	r2, #0
 801d18e:	4620      	mov	r0, r4
 801d190:	4629      	mov	r1, r5
 801d192:	f7e3 fc7b 	bl	8000a8c <__aeabi_dcmplt>
 801d196:	2800      	cmp	r0, #0
 801d198:	f000 80ae 	beq.w	801d2f8 <_dtoa_r+0x518>
 801d19c:	9b07      	ldr	r3, [sp, #28]
 801d19e:	2b00      	cmp	r3, #0
 801d1a0:	f000 80aa 	beq.w	801d2f8 <_dtoa_r+0x518>
 801d1a4:	9b08      	ldr	r3, [sp, #32]
 801d1a6:	2b00      	cmp	r3, #0
 801d1a8:	dd37      	ble.n	801d21a <_dtoa_r+0x43a>
 801d1aa:	1e7b      	subs	r3, r7, #1
 801d1ac:	9304      	str	r3, [sp, #16]
 801d1ae:	4620      	mov	r0, r4
 801d1b0:	4b56      	ldr	r3, [pc, #344]	@ (801d30c <_dtoa_r+0x52c>)
 801d1b2:	2200      	movs	r2, #0
 801d1b4:	4629      	mov	r1, r5
 801d1b6:	f7e3 f9f7 	bl	80005a8 <__aeabi_dmul>
 801d1ba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801d1be:	9c08      	ldr	r4, [sp, #32]
 801d1c0:	3601      	adds	r6, #1
 801d1c2:	4630      	mov	r0, r6
 801d1c4:	f7e3 f986 	bl	80004d4 <__aeabi_i2d>
 801d1c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801d1cc:	f7e3 f9ec 	bl	80005a8 <__aeabi_dmul>
 801d1d0:	4b4f      	ldr	r3, [pc, #316]	@ (801d310 <_dtoa_r+0x530>)
 801d1d2:	2200      	movs	r2, #0
 801d1d4:	f7e3 f832 	bl	800023c <__adddf3>
 801d1d8:	4605      	mov	r5, r0
 801d1da:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 801d1de:	2c00      	cmp	r4, #0
 801d1e0:	f040 809a 	bne.w	801d318 <_dtoa_r+0x538>
 801d1e4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801d1e8:	4b4a      	ldr	r3, [pc, #296]	@ (801d314 <_dtoa_r+0x534>)
 801d1ea:	2200      	movs	r2, #0
 801d1ec:	f7e3 f824 	bl	8000238 <__aeabi_dsub>
 801d1f0:	4602      	mov	r2, r0
 801d1f2:	460b      	mov	r3, r1
 801d1f4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801d1f8:	462a      	mov	r2, r5
 801d1fa:	4633      	mov	r3, r6
 801d1fc:	f7e3 fc64 	bl	8000ac8 <__aeabi_dcmpgt>
 801d200:	2800      	cmp	r0, #0
 801d202:	f040 828e 	bne.w	801d722 <_dtoa_r+0x942>
 801d206:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801d20a:	462a      	mov	r2, r5
 801d20c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 801d210:	f7e3 fc3c 	bl	8000a8c <__aeabi_dcmplt>
 801d214:	2800      	cmp	r0, #0
 801d216:	f040 8127 	bne.w	801d468 <_dtoa_r+0x688>
 801d21a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 801d21e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 801d222:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801d224:	2b00      	cmp	r3, #0
 801d226:	f2c0 8163 	blt.w	801d4f0 <_dtoa_r+0x710>
 801d22a:	2f0e      	cmp	r7, #14
 801d22c:	f300 8160 	bgt.w	801d4f0 <_dtoa_r+0x710>
 801d230:	4b33      	ldr	r3, [pc, #204]	@ (801d300 <_dtoa_r+0x520>)
 801d232:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801d236:	e9d3 3400 	ldrd	r3, r4, [r3]
 801d23a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 801d23e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801d240:	2b00      	cmp	r3, #0
 801d242:	da03      	bge.n	801d24c <_dtoa_r+0x46c>
 801d244:	9b07      	ldr	r3, [sp, #28]
 801d246:	2b00      	cmp	r3, #0
 801d248:	f340 8100 	ble.w	801d44c <_dtoa_r+0x66c>
 801d24c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 801d250:	4656      	mov	r6, sl
 801d252:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801d256:	4620      	mov	r0, r4
 801d258:	4629      	mov	r1, r5
 801d25a:	f7e3 facf 	bl	80007fc <__aeabi_ddiv>
 801d25e:	f7e3 fc53 	bl	8000b08 <__aeabi_d2iz>
 801d262:	4680      	mov	r8, r0
 801d264:	f7e3 f936 	bl	80004d4 <__aeabi_i2d>
 801d268:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801d26c:	f7e3 f99c 	bl	80005a8 <__aeabi_dmul>
 801d270:	4602      	mov	r2, r0
 801d272:	460b      	mov	r3, r1
 801d274:	4620      	mov	r0, r4
 801d276:	4629      	mov	r1, r5
 801d278:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 801d27c:	f7e2 ffdc 	bl	8000238 <__aeabi_dsub>
 801d280:	f806 4b01 	strb.w	r4, [r6], #1
 801d284:	9d07      	ldr	r5, [sp, #28]
 801d286:	eba6 040a 	sub.w	r4, r6, sl
 801d28a:	42a5      	cmp	r5, r4
 801d28c:	4602      	mov	r2, r0
 801d28e:	460b      	mov	r3, r1
 801d290:	f040 8116 	bne.w	801d4c0 <_dtoa_r+0x6e0>
 801d294:	f7e2 ffd2 	bl	800023c <__adddf3>
 801d298:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801d29c:	4604      	mov	r4, r0
 801d29e:	460d      	mov	r5, r1
 801d2a0:	f7e3 fc12 	bl	8000ac8 <__aeabi_dcmpgt>
 801d2a4:	2800      	cmp	r0, #0
 801d2a6:	f040 80f8 	bne.w	801d49a <_dtoa_r+0x6ba>
 801d2aa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801d2ae:	4620      	mov	r0, r4
 801d2b0:	4629      	mov	r1, r5
 801d2b2:	f7e3 fbe1 	bl	8000a78 <__aeabi_dcmpeq>
 801d2b6:	b118      	cbz	r0, 801d2c0 <_dtoa_r+0x4e0>
 801d2b8:	f018 0f01 	tst.w	r8, #1
 801d2bc:	f040 80ed 	bne.w	801d49a <_dtoa_r+0x6ba>
 801d2c0:	4649      	mov	r1, r9
 801d2c2:	4658      	mov	r0, fp
 801d2c4:	f000 fc94 	bl	801dbf0 <_Bfree>
 801d2c8:	2300      	movs	r3, #0
 801d2ca:	7033      	strb	r3, [r6, #0]
 801d2cc:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801d2ce:	3701      	adds	r7, #1
 801d2d0:	601f      	str	r7, [r3, #0]
 801d2d2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801d2d4:	2b00      	cmp	r3, #0
 801d2d6:	f000 8320 	beq.w	801d91a <_dtoa_r+0xb3a>
 801d2da:	601e      	str	r6, [r3, #0]
 801d2dc:	e31d      	b.n	801d91a <_dtoa_r+0xb3a>
 801d2de:	07e2      	lsls	r2, r4, #31
 801d2e0:	d505      	bpl.n	801d2ee <_dtoa_r+0x50e>
 801d2e2:	e9d5 2300 	ldrd	r2, r3, [r5]
 801d2e6:	f7e3 f95f 	bl	80005a8 <__aeabi_dmul>
 801d2ea:	3601      	adds	r6, #1
 801d2ec:	2301      	movs	r3, #1
 801d2ee:	1064      	asrs	r4, r4, #1
 801d2f0:	3508      	adds	r5, #8
 801d2f2:	e73f      	b.n	801d174 <_dtoa_r+0x394>
 801d2f4:	2602      	movs	r6, #2
 801d2f6:	e742      	b.n	801d17e <_dtoa_r+0x39e>
 801d2f8:	9c07      	ldr	r4, [sp, #28]
 801d2fa:	9704      	str	r7, [sp, #16]
 801d2fc:	e761      	b.n	801d1c2 <_dtoa_r+0x3e2>
 801d2fe:	bf00      	nop
 801d300:	0801fb10 	.word	0x0801fb10
 801d304:	0801fae8 	.word	0x0801fae8
 801d308:	3ff00000 	.word	0x3ff00000
 801d30c:	40240000 	.word	0x40240000
 801d310:	401c0000 	.word	0x401c0000
 801d314:	40140000 	.word	0x40140000
 801d318:	4b70      	ldr	r3, [pc, #448]	@ (801d4dc <_dtoa_r+0x6fc>)
 801d31a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801d31c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801d320:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801d324:	4454      	add	r4, sl
 801d326:	2900      	cmp	r1, #0
 801d328:	d045      	beq.n	801d3b6 <_dtoa_r+0x5d6>
 801d32a:	496d      	ldr	r1, [pc, #436]	@ (801d4e0 <_dtoa_r+0x700>)
 801d32c:	2000      	movs	r0, #0
 801d32e:	f7e3 fa65 	bl	80007fc <__aeabi_ddiv>
 801d332:	4633      	mov	r3, r6
 801d334:	462a      	mov	r2, r5
 801d336:	f7e2 ff7f 	bl	8000238 <__aeabi_dsub>
 801d33a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801d33e:	4656      	mov	r6, sl
 801d340:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801d344:	f7e3 fbe0 	bl	8000b08 <__aeabi_d2iz>
 801d348:	4605      	mov	r5, r0
 801d34a:	f7e3 f8c3 	bl	80004d4 <__aeabi_i2d>
 801d34e:	4602      	mov	r2, r0
 801d350:	460b      	mov	r3, r1
 801d352:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801d356:	f7e2 ff6f 	bl	8000238 <__aeabi_dsub>
 801d35a:	3530      	adds	r5, #48	@ 0x30
 801d35c:	4602      	mov	r2, r0
 801d35e:	460b      	mov	r3, r1
 801d360:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801d364:	f806 5b01 	strb.w	r5, [r6], #1
 801d368:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801d36c:	f7e3 fb8e 	bl	8000a8c <__aeabi_dcmplt>
 801d370:	2800      	cmp	r0, #0
 801d372:	d163      	bne.n	801d43c <_dtoa_r+0x65c>
 801d374:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801d378:	495a      	ldr	r1, [pc, #360]	@ (801d4e4 <_dtoa_r+0x704>)
 801d37a:	2000      	movs	r0, #0
 801d37c:	f7e2 ff5c 	bl	8000238 <__aeabi_dsub>
 801d380:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801d384:	f7e3 fb82 	bl	8000a8c <__aeabi_dcmplt>
 801d388:	2800      	cmp	r0, #0
 801d38a:	f040 8087 	bne.w	801d49c <_dtoa_r+0x6bc>
 801d38e:	42a6      	cmp	r6, r4
 801d390:	f43f af43 	beq.w	801d21a <_dtoa_r+0x43a>
 801d394:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 801d398:	4b53      	ldr	r3, [pc, #332]	@ (801d4e8 <_dtoa_r+0x708>)
 801d39a:	2200      	movs	r2, #0
 801d39c:	f7e3 f904 	bl	80005a8 <__aeabi_dmul>
 801d3a0:	4b51      	ldr	r3, [pc, #324]	@ (801d4e8 <_dtoa_r+0x708>)
 801d3a2:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801d3a6:	2200      	movs	r2, #0
 801d3a8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801d3ac:	f7e3 f8fc 	bl	80005a8 <__aeabi_dmul>
 801d3b0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801d3b4:	e7c4      	b.n	801d340 <_dtoa_r+0x560>
 801d3b6:	4631      	mov	r1, r6
 801d3b8:	4628      	mov	r0, r5
 801d3ba:	f7e3 f8f5 	bl	80005a8 <__aeabi_dmul>
 801d3be:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801d3c2:	9413      	str	r4, [sp, #76]	@ 0x4c
 801d3c4:	4656      	mov	r6, sl
 801d3c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801d3ca:	f7e3 fb9d 	bl	8000b08 <__aeabi_d2iz>
 801d3ce:	4605      	mov	r5, r0
 801d3d0:	f7e3 f880 	bl	80004d4 <__aeabi_i2d>
 801d3d4:	4602      	mov	r2, r0
 801d3d6:	460b      	mov	r3, r1
 801d3d8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801d3dc:	f7e2 ff2c 	bl	8000238 <__aeabi_dsub>
 801d3e0:	3530      	adds	r5, #48	@ 0x30
 801d3e2:	f806 5b01 	strb.w	r5, [r6], #1
 801d3e6:	4602      	mov	r2, r0
 801d3e8:	460b      	mov	r3, r1
 801d3ea:	42a6      	cmp	r6, r4
 801d3ec:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801d3f0:	f04f 0200 	mov.w	r2, #0
 801d3f4:	d124      	bne.n	801d440 <_dtoa_r+0x660>
 801d3f6:	4b3a      	ldr	r3, [pc, #232]	@ (801d4e0 <_dtoa_r+0x700>)
 801d3f8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 801d3fc:	f7e2 ff1e 	bl	800023c <__adddf3>
 801d400:	4602      	mov	r2, r0
 801d402:	460b      	mov	r3, r1
 801d404:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801d408:	f7e3 fb5e 	bl	8000ac8 <__aeabi_dcmpgt>
 801d40c:	2800      	cmp	r0, #0
 801d40e:	d145      	bne.n	801d49c <_dtoa_r+0x6bc>
 801d410:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801d414:	4932      	ldr	r1, [pc, #200]	@ (801d4e0 <_dtoa_r+0x700>)
 801d416:	2000      	movs	r0, #0
 801d418:	f7e2 ff0e 	bl	8000238 <__aeabi_dsub>
 801d41c:	4602      	mov	r2, r0
 801d41e:	460b      	mov	r3, r1
 801d420:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801d424:	f7e3 fb32 	bl	8000a8c <__aeabi_dcmplt>
 801d428:	2800      	cmp	r0, #0
 801d42a:	f43f aef6 	beq.w	801d21a <_dtoa_r+0x43a>
 801d42e:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 801d430:	1e73      	subs	r3, r6, #1
 801d432:	9313      	str	r3, [sp, #76]	@ 0x4c
 801d434:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801d438:	2b30      	cmp	r3, #48	@ 0x30
 801d43a:	d0f8      	beq.n	801d42e <_dtoa_r+0x64e>
 801d43c:	9f04      	ldr	r7, [sp, #16]
 801d43e:	e73f      	b.n	801d2c0 <_dtoa_r+0x4e0>
 801d440:	4b29      	ldr	r3, [pc, #164]	@ (801d4e8 <_dtoa_r+0x708>)
 801d442:	f7e3 f8b1 	bl	80005a8 <__aeabi_dmul>
 801d446:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801d44a:	e7bc      	b.n	801d3c6 <_dtoa_r+0x5e6>
 801d44c:	d10c      	bne.n	801d468 <_dtoa_r+0x688>
 801d44e:	4b27      	ldr	r3, [pc, #156]	@ (801d4ec <_dtoa_r+0x70c>)
 801d450:	2200      	movs	r2, #0
 801d452:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801d456:	f7e3 f8a7 	bl	80005a8 <__aeabi_dmul>
 801d45a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801d45e:	f7e3 fb29 	bl	8000ab4 <__aeabi_dcmpge>
 801d462:	2800      	cmp	r0, #0
 801d464:	f000 815b 	beq.w	801d71e <_dtoa_r+0x93e>
 801d468:	2400      	movs	r4, #0
 801d46a:	4625      	mov	r5, r4
 801d46c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801d46e:	43db      	mvns	r3, r3
 801d470:	9304      	str	r3, [sp, #16]
 801d472:	4656      	mov	r6, sl
 801d474:	2700      	movs	r7, #0
 801d476:	4621      	mov	r1, r4
 801d478:	4658      	mov	r0, fp
 801d47a:	f000 fbb9 	bl	801dbf0 <_Bfree>
 801d47e:	2d00      	cmp	r5, #0
 801d480:	d0dc      	beq.n	801d43c <_dtoa_r+0x65c>
 801d482:	b12f      	cbz	r7, 801d490 <_dtoa_r+0x6b0>
 801d484:	42af      	cmp	r7, r5
 801d486:	d003      	beq.n	801d490 <_dtoa_r+0x6b0>
 801d488:	4639      	mov	r1, r7
 801d48a:	4658      	mov	r0, fp
 801d48c:	f000 fbb0 	bl	801dbf0 <_Bfree>
 801d490:	4629      	mov	r1, r5
 801d492:	4658      	mov	r0, fp
 801d494:	f000 fbac 	bl	801dbf0 <_Bfree>
 801d498:	e7d0      	b.n	801d43c <_dtoa_r+0x65c>
 801d49a:	9704      	str	r7, [sp, #16]
 801d49c:	4633      	mov	r3, r6
 801d49e:	461e      	mov	r6, r3
 801d4a0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801d4a4:	2a39      	cmp	r2, #57	@ 0x39
 801d4a6:	d107      	bne.n	801d4b8 <_dtoa_r+0x6d8>
 801d4a8:	459a      	cmp	sl, r3
 801d4aa:	d1f8      	bne.n	801d49e <_dtoa_r+0x6be>
 801d4ac:	9a04      	ldr	r2, [sp, #16]
 801d4ae:	3201      	adds	r2, #1
 801d4b0:	9204      	str	r2, [sp, #16]
 801d4b2:	2230      	movs	r2, #48	@ 0x30
 801d4b4:	f88a 2000 	strb.w	r2, [sl]
 801d4b8:	781a      	ldrb	r2, [r3, #0]
 801d4ba:	3201      	adds	r2, #1
 801d4bc:	701a      	strb	r2, [r3, #0]
 801d4be:	e7bd      	b.n	801d43c <_dtoa_r+0x65c>
 801d4c0:	4b09      	ldr	r3, [pc, #36]	@ (801d4e8 <_dtoa_r+0x708>)
 801d4c2:	2200      	movs	r2, #0
 801d4c4:	f7e3 f870 	bl	80005a8 <__aeabi_dmul>
 801d4c8:	2200      	movs	r2, #0
 801d4ca:	2300      	movs	r3, #0
 801d4cc:	4604      	mov	r4, r0
 801d4ce:	460d      	mov	r5, r1
 801d4d0:	f7e3 fad2 	bl	8000a78 <__aeabi_dcmpeq>
 801d4d4:	2800      	cmp	r0, #0
 801d4d6:	f43f aebc 	beq.w	801d252 <_dtoa_r+0x472>
 801d4da:	e6f1      	b.n	801d2c0 <_dtoa_r+0x4e0>
 801d4dc:	0801fb10 	.word	0x0801fb10
 801d4e0:	3fe00000 	.word	0x3fe00000
 801d4e4:	3ff00000 	.word	0x3ff00000
 801d4e8:	40240000 	.word	0x40240000
 801d4ec:	40140000 	.word	0x40140000
 801d4f0:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801d4f2:	2a00      	cmp	r2, #0
 801d4f4:	f000 80db 	beq.w	801d6ae <_dtoa_r+0x8ce>
 801d4f8:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801d4fa:	2a01      	cmp	r2, #1
 801d4fc:	f300 80bf 	bgt.w	801d67e <_dtoa_r+0x89e>
 801d500:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801d502:	2a00      	cmp	r2, #0
 801d504:	f000 80b7 	beq.w	801d676 <_dtoa_r+0x896>
 801d508:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 801d50c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801d50e:	4646      	mov	r6, r8
 801d510:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801d512:	2101      	movs	r1, #1
 801d514:	441a      	add	r2, r3
 801d516:	4658      	mov	r0, fp
 801d518:	4498      	add	r8, r3
 801d51a:	9209      	str	r2, [sp, #36]	@ 0x24
 801d51c:	f000 fc1c 	bl	801dd58 <__i2b>
 801d520:	4605      	mov	r5, r0
 801d522:	b15e      	cbz	r6, 801d53c <_dtoa_r+0x75c>
 801d524:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d526:	2b00      	cmp	r3, #0
 801d528:	dd08      	ble.n	801d53c <_dtoa_r+0x75c>
 801d52a:	42b3      	cmp	r3, r6
 801d52c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801d52e:	bfa8      	it	ge
 801d530:	4633      	movge	r3, r6
 801d532:	eba8 0803 	sub.w	r8, r8, r3
 801d536:	1af6      	subs	r6, r6, r3
 801d538:	1ad3      	subs	r3, r2, r3
 801d53a:	9309      	str	r3, [sp, #36]	@ 0x24
 801d53c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801d53e:	b1f3      	cbz	r3, 801d57e <_dtoa_r+0x79e>
 801d540:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801d542:	2b00      	cmp	r3, #0
 801d544:	f000 80b7 	beq.w	801d6b6 <_dtoa_r+0x8d6>
 801d548:	b18c      	cbz	r4, 801d56e <_dtoa_r+0x78e>
 801d54a:	4629      	mov	r1, r5
 801d54c:	4622      	mov	r2, r4
 801d54e:	4658      	mov	r0, fp
 801d550:	f000 fcc2 	bl	801ded8 <__pow5mult>
 801d554:	464a      	mov	r2, r9
 801d556:	4601      	mov	r1, r0
 801d558:	4605      	mov	r5, r0
 801d55a:	4658      	mov	r0, fp
 801d55c:	f000 fc12 	bl	801dd84 <__multiply>
 801d560:	4649      	mov	r1, r9
 801d562:	9004      	str	r0, [sp, #16]
 801d564:	4658      	mov	r0, fp
 801d566:	f000 fb43 	bl	801dbf0 <_Bfree>
 801d56a:	9b04      	ldr	r3, [sp, #16]
 801d56c:	4699      	mov	r9, r3
 801d56e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801d570:	1b1a      	subs	r2, r3, r4
 801d572:	d004      	beq.n	801d57e <_dtoa_r+0x79e>
 801d574:	4649      	mov	r1, r9
 801d576:	4658      	mov	r0, fp
 801d578:	f000 fcae 	bl	801ded8 <__pow5mult>
 801d57c:	4681      	mov	r9, r0
 801d57e:	2101      	movs	r1, #1
 801d580:	4658      	mov	r0, fp
 801d582:	f000 fbe9 	bl	801dd58 <__i2b>
 801d586:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801d588:	4604      	mov	r4, r0
 801d58a:	2b00      	cmp	r3, #0
 801d58c:	f000 81c9 	beq.w	801d922 <_dtoa_r+0xb42>
 801d590:	461a      	mov	r2, r3
 801d592:	4601      	mov	r1, r0
 801d594:	4658      	mov	r0, fp
 801d596:	f000 fc9f 	bl	801ded8 <__pow5mult>
 801d59a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801d59c:	2b01      	cmp	r3, #1
 801d59e:	4604      	mov	r4, r0
 801d5a0:	f300 808f 	bgt.w	801d6c2 <_dtoa_r+0x8e2>
 801d5a4:	9b02      	ldr	r3, [sp, #8]
 801d5a6:	2b00      	cmp	r3, #0
 801d5a8:	f040 8087 	bne.w	801d6ba <_dtoa_r+0x8da>
 801d5ac:	9b03      	ldr	r3, [sp, #12]
 801d5ae:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801d5b2:	2b00      	cmp	r3, #0
 801d5b4:	f040 8083 	bne.w	801d6be <_dtoa_r+0x8de>
 801d5b8:	9b03      	ldr	r3, [sp, #12]
 801d5ba:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801d5be:	0d1b      	lsrs	r3, r3, #20
 801d5c0:	051b      	lsls	r3, r3, #20
 801d5c2:	b12b      	cbz	r3, 801d5d0 <_dtoa_r+0x7f0>
 801d5c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d5c6:	3301      	adds	r3, #1
 801d5c8:	9309      	str	r3, [sp, #36]	@ 0x24
 801d5ca:	f108 0801 	add.w	r8, r8, #1
 801d5ce:	2301      	movs	r3, #1
 801d5d0:	930a      	str	r3, [sp, #40]	@ 0x28
 801d5d2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801d5d4:	2b00      	cmp	r3, #0
 801d5d6:	f000 81aa 	beq.w	801d92e <_dtoa_r+0xb4e>
 801d5da:	6923      	ldr	r3, [r4, #16]
 801d5dc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801d5e0:	6918      	ldr	r0, [r3, #16]
 801d5e2:	f000 fb6d 	bl	801dcc0 <__hi0bits>
 801d5e6:	f1c0 0020 	rsb	r0, r0, #32
 801d5ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d5ec:	4418      	add	r0, r3
 801d5ee:	f010 001f 	ands.w	r0, r0, #31
 801d5f2:	d071      	beq.n	801d6d8 <_dtoa_r+0x8f8>
 801d5f4:	f1c0 0320 	rsb	r3, r0, #32
 801d5f8:	2b04      	cmp	r3, #4
 801d5fa:	dd65      	ble.n	801d6c8 <_dtoa_r+0x8e8>
 801d5fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d5fe:	f1c0 001c 	rsb	r0, r0, #28
 801d602:	4403      	add	r3, r0
 801d604:	4480      	add	r8, r0
 801d606:	4406      	add	r6, r0
 801d608:	9309      	str	r3, [sp, #36]	@ 0x24
 801d60a:	f1b8 0f00 	cmp.w	r8, #0
 801d60e:	dd05      	ble.n	801d61c <_dtoa_r+0x83c>
 801d610:	4649      	mov	r1, r9
 801d612:	4642      	mov	r2, r8
 801d614:	4658      	mov	r0, fp
 801d616:	f000 fcb9 	bl	801df8c <__lshift>
 801d61a:	4681      	mov	r9, r0
 801d61c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d61e:	2b00      	cmp	r3, #0
 801d620:	dd05      	ble.n	801d62e <_dtoa_r+0x84e>
 801d622:	4621      	mov	r1, r4
 801d624:	461a      	mov	r2, r3
 801d626:	4658      	mov	r0, fp
 801d628:	f000 fcb0 	bl	801df8c <__lshift>
 801d62c:	4604      	mov	r4, r0
 801d62e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801d630:	2b00      	cmp	r3, #0
 801d632:	d053      	beq.n	801d6dc <_dtoa_r+0x8fc>
 801d634:	4621      	mov	r1, r4
 801d636:	4648      	mov	r0, r9
 801d638:	f000 fd14 	bl	801e064 <__mcmp>
 801d63c:	2800      	cmp	r0, #0
 801d63e:	da4d      	bge.n	801d6dc <_dtoa_r+0x8fc>
 801d640:	1e7b      	subs	r3, r7, #1
 801d642:	9304      	str	r3, [sp, #16]
 801d644:	4649      	mov	r1, r9
 801d646:	2300      	movs	r3, #0
 801d648:	220a      	movs	r2, #10
 801d64a:	4658      	mov	r0, fp
 801d64c:	f000 faf2 	bl	801dc34 <__multadd>
 801d650:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801d652:	4681      	mov	r9, r0
 801d654:	2b00      	cmp	r3, #0
 801d656:	f000 816c 	beq.w	801d932 <_dtoa_r+0xb52>
 801d65a:	2300      	movs	r3, #0
 801d65c:	4629      	mov	r1, r5
 801d65e:	220a      	movs	r2, #10
 801d660:	4658      	mov	r0, fp
 801d662:	f000 fae7 	bl	801dc34 <__multadd>
 801d666:	9b08      	ldr	r3, [sp, #32]
 801d668:	2b00      	cmp	r3, #0
 801d66a:	4605      	mov	r5, r0
 801d66c:	dc61      	bgt.n	801d732 <_dtoa_r+0x952>
 801d66e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801d670:	2b02      	cmp	r3, #2
 801d672:	dc3b      	bgt.n	801d6ec <_dtoa_r+0x90c>
 801d674:	e05d      	b.n	801d732 <_dtoa_r+0x952>
 801d676:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801d678:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 801d67c:	e746      	b.n	801d50c <_dtoa_r+0x72c>
 801d67e:	9b07      	ldr	r3, [sp, #28]
 801d680:	1e5c      	subs	r4, r3, #1
 801d682:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801d684:	42a3      	cmp	r3, r4
 801d686:	bfbf      	itttt	lt
 801d688:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 801d68a:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 801d68c:	940a      	strlt	r4, [sp, #40]	@ 0x28
 801d68e:	1ae3      	sublt	r3, r4, r3
 801d690:	bfb4      	ite	lt
 801d692:	18d2      	addlt	r2, r2, r3
 801d694:	1b1c      	subge	r4, r3, r4
 801d696:	9b07      	ldr	r3, [sp, #28]
 801d698:	bfbc      	itt	lt
 801d69a:	920e      	strlt	r2, [sp, #56]	@ 0x38
 801d69c:	2400      	movlt	r4, #0
 801d69e:	2b00      	cmp	r3, #0
 801d6a0:	bfb5      	itete	lt
 801d6a2:	eba8 0603 	sublt.w	r6, r8, r3
 801d6a6:	9b07      	ldrge	r3, [sp, #28]
 801d6a8:	2300      	movlt	r3, #0
 801d6aa:	4646      	movge	r6, r8
 801d6ac:	e730      	b.n	801d510 <_dtoa_r+0x730>
 801d6ae:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801d6b0:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 801d6b2:	4646      	mov	r6, r8
 801d6b4:	e735      	b.n	801d522 <_dtoa_r+0x742>
 801d6b6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801d6b8:	e75c      	b.n	801d574 <_dtoa_r+0x794>
 801d6ba:	2300      	movs	r3, #0
 801d6bc:	e788      	b.n	801d5d0 <_dtoa_r+0x7f0>
 801d6be:	9b02      	ldr	r3, [sp, #8]
 801d6c0:	e786      	b.n	801d5d0 <_dtoa_r+0x7f0>
 801d6c2:	2300      	movs	r3, #0
 801d6c4:	930a      	str	r3, [sp, #40]	@ 0x28
 801d6c6:	e788      	b.n	801d5da <_dtoa_r+0x7fa>
 801d6c8:	d09f      	beq.n	801d60a <_dtoa_r+0x82a>
 801d6ca:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801d6cc:	331c      	adds	r3, #28
 801d6ce:	441a      	add	r2, r3
 801d6d0:	4498      	add	r8, r3
 801d6d2:	441e      	add	r6, r3
 801d6d4:	9209      	str	r2, [sp, #36]	@ 0x24
 801d6d6:	e798      	b.n	801d60a <_dtoa_r+0x82a>
 801d6d8:	4603      	mov	r3, r0
 801d6da:	e7f6      	b.n	801d6ca <_dtoa_r+0x8ea>
 801d6dc:	9b07      	ldr	r3, [sp, #28]
 801d6de:	9704      	str	r7, [sp, #16]
 801d6e0:	2b00      	cmp	r3, #0
 801d6e2:	dc20      	bgt.n	801d726 <_dtoa_r+0x946>
 801d6e4:	9308      	str	r3, [sp, #32]
 801d6e6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801d6e8:	2b02      	cmp	r3, #2
 801d6ea:	dd1e      	ble.n	801d72a <_dtoa_r+0x94a>
 801d6ec:	9b08      	ldr	r3, [sp, #32]
 801d6ee:	2b00      	cmp	r3, #0
 801d6f0:	f47f aebc 	bne.w	801d46c <_dtoa_r+0x68c>
 801d6f4:	4621      	mov	r1, r4
 801d6f6:	2205      	movs	r2, #5
 801d6f8:	4658      	mov	r0, fp
 801d6fa:	f000 fa9b 	bl	801dc34 <__multadd>
 801d6fe:	4601      	mov	r1, r0
 801d700:	4604      	mov	r4, r0
 801d702:	4648      	mov	r0, r9
 801d704:	f000 fcae 	bl	801e064 <__mcmp>
 801d708:	2800      	cmp	r0, #0
 801d70a:	f77f aeaf 	ble.w	801d46c <_dtoa_r+0x68c>
 801d70e:	4656      	mov	r6, sl
 801d710:	2331      	movs	r3, #49	@ 0x31
 801d712:	f806 3b01 	strb.w	r3, [r6], #1
 801d716:	9b04      	ldr	r3, [sp, #16]
 801d718:	3301      	adds	r3, #1
 801d71a:	9304      	str	r3, [sp, #16]
 801d71c:	e6aa      	b.n	801d474 <_dtoa_r+0x694>
 801d71e:	9c07      	ldr	r4, [sp, #28]
 801d720:	9704      	str	r7, [sp, #16]
 801d722:	4625      	mov	r5, r4
 801d724:	e7f3      	b.n	801d70e <_dtoa_r+0x92e>
 801d726:	9b07      	ldr	r3, [sp, #28]
 801d728:	9308      	str	r3, [sp, #32]
 801d72a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801d72c:	2b00      	cmp	r3, #0
 801d72e:	f000 8104 	beq.w	801d93a <_dtoa_r+0xb5a>
 801d732:	2e00      	cmp	r6, #0
 801d734:	dd05      	ble.n	801d742 <_dtoa_r+0x962>
 801d736:	4629      	mov	r1, r5
 801d738:	4632      	mov	r2, r6
 801d73a:	4658      	mov	r0, fp
 801d73c:	f000 fc26 	bl	801df8c <__lshift>
 801d740:	4605      	mov	r5, r0
 801d742:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801d744:	2b00      	cmp	r3, #0
 801d746:	d05a      	beq.n	801d7fe <_dtoa_r+0xa1e>
 801d748:	6869      	ldr	r1, [r5, #4]
 801d74a:	4658      	mov	r0, fp
 801d74c:	f000 fa10 	bl	801db70 <_Balloc>
 801d750:	4606      	mov	r6, r0
 801d752:	b928      	cbnz	r0, 801d760 <_dtoa_r+0x980>
 801d754:	4b84      	ldr	r3, [pc, #528]	@ (801d968 <_dtoa_r+0xb88>)
 801d756:	4602      	mov	r2, r0
 801d758:	f240 21ef 	movw	r1, #751	@ 0x2ef
 801d75c:	f7ff bb54 	b.w	801ce08 <_dtoa_r+0x28>
 801d760:	692a      	ldr	r2, [r5, #16]
 801d762:	3202      	adds	r2, #2
 801d764:	0092      	lsls	r2, r2, #2
 801d766:	f105 010c 	add.w	r1, r5, #12
 801d76a:	300c      	adds	r0, #12
 801d76c:	f7ff fa9f 	bl	801ccae <memcpy>
 801d770:	2201      	movs	r2, #1
 801d772:	4631      	mov	r1, r6
 801d774:	4658      	mov	r0, fp
 801d776:	f000 fc09 	bl	801df8c <__lshift>
 801d77a:	f10a 0301 	add.w	r3, sl, #1
 801d77e:	9307      	str	r3, [sp, #28]
 801d780:	9b08      	ldr	r3, [sp, #32]
 801d782:	4453      	add	r3, sl
 801d784:	930b      	str	r3, [sp, #44]	@ 0x2c
 801d786:	9b02      	ldr	r3, [sp, #8]
 801d788:	f003 0301 	and.w	r3, r3, #1
 801d78c:	462f      	mov	r7, r5
 801d78e:	930a      	str	r3, [sp, #40]	@ 0x28
 801d790:	4605      	mov	r5, r0
 801d792:	9b07      	ldr	r3, [sp, #28]
 801d794:	4621      	mov	r1, r4
 801d796:	3b01      	subs	r3, #1
 801d798:	4648      	mov	r0, r9
 801d79a:	9302      	str	r3, [sp, #8]
 801d79c:	f7ff fa95 	bl	801ccca <quorem>
 801d7a0:	4639      	mov	r1, r7
 801d7a2:	9008      	str	r0, [sp, #32]
 801d7a4:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 801d7a8:	4648      	mov	r0, r9
 801d7aa:	f000 fc5b 	bl	801e064 <__mcmp>
 801d7ae:	462a      	mov	r2, r5
 801d7b0:	9009      	str	r0, [sp, #36]	@ 0x24
 801d7b2:	4621      	mov	r1, r4
 801d7b4:	4658      	mov	r0, fp
 801d7b6:	f000 fc71 	bl	801e09c <__mdiff>
 801d7ba:	68c2      	ldr	r2, [r0, #12]
 801d7bc:	4606      	mov	r6, r0
 801d7be:	bb02      	cbnz	r2, 801d802 <_dtoa_r+0xa22>
 801d7c0:	4601      	mov	r1, r0
 801d7c2:	4648      	mov	r0, r9
 801d7c4:	f000 fc4e 	bl	801e064 <__mcmp>
 801d7c8:	4602      	mov	r2, r0
 801d7ca:	4631      	mov	r1, r6
 801d7cc:	4658      	mov	r0, fp
 801d7ce:	920c      	str	r2, [sp, #48]	@ 0x30
 801d7d0:	f000 fa0e 	bl	801dbf0 <_Bfree>
 801d7d4:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801d7d6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801d7d8:	9e07      	ldr	r6, [sp, #28]
 801d7da:	ea43 0102 	orr.w	r1, r3, r2
 801d7de:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801d7e0:	4319      	orrs	r1, r3
 801d7e2:	d110      	bne.n	801d806 <_dtoa_r+0xa26>
 801d7e4:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801d7e8:	d029      	beq.n	801d83e <_dtoa_r+0xa5e>
 801d7ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d7ec:	2b00      	cmp	r3, #0
 801d7ee:	dd02      	ble.n	801d7f6 <_dtoa_r+0xa16>
 801d7f0:	9b08      	ldr	r3, [sp, #32]
 801d7f2:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 801d7f6:	9b02      	ldr	r3, [sp, #8]
 801d7f8:	f883 8000 	strb.w	r8, [r3]
 801d7fc:	e63b      	b.n	801d476 <_dtoa_r+0x696>
 801d7fe:	4628      	mov	r0, r5
 801d800:	e7bb      	b.n	801d77a <_dtoa_r+0x99a>
 801d802:	2201      	movs	r2, #1
 801d804:	e7e1      	b.n	801d7ca <_dtoa_r+0x9ea>
 801d806:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d808:	2b00      	cmp	r3, #0
 801d80a:	db04      	blt.n	801d816 <_dtoa_r+0xa36>
 801d80c:	9920      	ldr	r1, [sp, #128]	@ 0x80
 801d80e:	430b      	orrs	r3, r1
 801d810:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801d812:	430b      	orrs	r3, r1
 801d814:	d120      	bne.n	801d858 <_dtoa_r+0xa78>
 801d816:	2a00      	cmp	r2, #0
 801d818:	dded      	ble.n	801d7f6 <_dtoa_r+0xa16>
 801d81a:	4649      	mov	r1, r9
 801d81c:	2201      	movs	r2, #1
 801d81e:	4658      	mov	r0, fp
 801d820:	f000 fbb4 	bl	801df8c <__lshift>
 801d824:	4621      	mov	r1, r4
 801d826:	4681      	mov	r9, r0
 801d828:	f000 fc1c 	bl	801e064 <__mcmp>
 801d82c:	2800      	cmp	r0, #0
 801d82e:	dc03      	bgt.n	801d838 <_dtoa_r+0xa58>
 801d830:	d1e1      	bne.n	801d7f6 <_dtoa_r+0xa16>
 801d832:	f018 0f01 	tst.w	r8, #1
 801d836:	d0de      	beq.n	801d7f6 <_dtoa_r+0xa16>
 801d838:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801d83c:	d1d8      	bne.n	801d7f0 <_dtoa_r+0xa10>
 801d83e:	9a02      	ldr	r2, [sp, #8]
 801d840:	2339      	movs	r3, #57	@ 0x39
 801d842:	7013      	strb	r3, [r2, #0]
 801d844:	4633      	mov	r3, r6
 801d846:	461e      	mov	r6, r3
 801d848:	3b01      	subs	r3, #1
 801d84a:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 801d84e:	2a39      	cmp	r2, #57	@ 0x39
 801d850:	d052      	beq.n	801d8f8 <_dtoa_r+0xb18>
 801d852:	3201      	adds	r2, #1
 801d854:	701a      	strb	r2, [r3, #0]
 801d856:	e60e      	b.n	801d476 <_dtoa_r+0x696>
 801d858:	2a00      	cmp	r2, #0
 801d85a:	dd07      	ble.n	801d86c <_dtoa_r+0xa8c>
 801d85c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801d860:	d0ed      	beq.n	801d83e <_dtoa_r+0xa5e>
 801d862:	9a02      	ldr	r2, [sp, #8]
 801d864:	f108 0301 	add.w	r3, r8, #1
 801d868:	7013      	strb	r3, [r2, #0]
 801d86a:	e604      	b.n	801d476 <_dtoa_r+0x696>
 801d86c:	9b07      	ldr	r3, [sp, #28]
 801d86e:	9a07      	ldr	r2, [sp, #28]
 801d870:	f803 8c01 	strb.w	r8, [r3, #-1]
 801d874:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801d876:	4293      	cmp	r3, r2
 801d878:	d028      	beq.n	801d8cc <_dtoa_r+0xaec>
 801d87a:	4649      	mov	r1, r9
 801d87c:	2300      	movs	r3, #0
 801d87e:	220a      	movs	r2, #10
 801d880:	4658      	mov	r0, fp
 801d882:	f000 f9d7 	bl	801dc34 <__multadd>
 801d886:	42af      	cmp	r7, r5
 801d888:	4681      	mov	r9, r0
 801d88a:	f04f 0300 	mov.w	r3, #0
 801d88e:	f04f 020a 	mov.w	r2, #10
 801d892:	4639      	mov	r1, r7
 801d894:	4658      	mov	r0, fp
 801d896:	d107      	bne.n	801d8a8 <_dtoa_r+0xac8>
 801d898:	f000 f9cc 	bl	801dc34 <__multadd>
 801d89c:	4607      	mov	r7, r0
 801d89e:	4605      	mov	r5, r0
 801d8a0:	9b07      	ldr	r3, [sp, #28]
 801d8a2:	3301      	adds	r3, #1
 801d8a4:	9307      	str	r3, [sp, #28]
 801d8a6:	e774      	b.n	801d792 <_dtoa_r+0x9b2>
 801d8a8:	f000 f9c4 	bl	801dc34 <__multadd>
 801d8ac:	4629      	mov	r1, r5
 801d8ae:	4607      	mov	r7, r0
 801d8b0:	2300      	movs	r3, #0
 801d8b2:	220a      	movs	r2, #10
 801d8b4:	4658      	mov	r0, fp
 801d8b6:	f000 f9bd 	bl	801dc34 <__multadd>
 801d8ba:	4605      	mov	r5, r0
 801d8bc:	e7f0      	b.n	801d8a0 <_dtoa_r+0xac0>
 801d8be:	9b08      	ldr	r3, [sp, #32]
 801d8c0:	2b00      	cmp	r3, #0
 801d8c2:	bfcc      	ite	gt
 801d8c4:	461e      	movgt	r6, r3
 801d8c6:	2601      	movle	r6, #1
 801d8c8:	4456      	add	r6, sl
 801d8ca:	2700      	movs	r7, #0
 801d8cc:	4649      	mov	r1, r9
 801d8ce:	2201      	movs	r2, #1
 801d8d0:	4658      	mov	r0, fp
 801d8d2:	f000 fb5b 	bl	801df8c <__lshift>
 801d8d6:	4621      	mov	r1, r4
 801d8d8:	4681      	mov	r9, r0
 801d8da:	f000 fbc3 	bl	801e064 <__mcmp>
 801d8de:	2800      	cmp	r0, #0
 801d8e0:	dcb0      	bgt.n	801d844 <_dtoa_r+0xa64>
 801d8e2:	d102      	bne.n	801d8ea <_dtoa_r+0xb0a>
 801d8e4:	f018 0f01 	tst.w	r8, #1
 801d8e8:	d1ac      	bne.n	801d844 <_dtoa_r+0xa64>
 801d8ea:	4633      	mov	r3, r6
 801d8ec:	461e      	mov	r6, r3
 801d8ee:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801d8f2:	2a30      	cmp	r2, #48	@ 0x30
 801d8f4:	d0fa      	beq.n	801d8ec <_dtoa_r+0xb0c>
 801d8f6:	e5be      	b.n	801d476 <_dtoa_r+0x696>
 801d8f8:	459a      	cmp	sl, r3
 801d8fa:	d1a4      	bne.n	801d846 <_dtoa_r+0xa66>
 801d8fc:	9b04      	ldr	r3, [sp, #16]
 801d8fe:	3301      	adds	r3, #1
 801d900:	9304      	str	r3, [sp, #16]
 801d902:	2331      	movs	r3, #49	@ 0x31
 801d904:	f88a 3000 	strb.w	r3, [sl]
 801d908:	e5b5      	b.n	801d476 <_dtoa_r+0x696>
 801d90a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801d90c:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 801d96c <_dtoa_r+0xb8c>
 801d910:	b11b      	cbz	r3, 801d91a <_dtoa_r+0xb3a>
 801d912:	f10a 0308 	add.w	r3, sl, #8
 801d916:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 801d918:	6013      	str	r3, [r2, #0]
 801d91a:	4650      	mov	r0, sl
 801d91c:	b017      	add	sp, #92	@ 0x5c
 801d91e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d922:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801d924:	2b01      	cmp	r3, #1
 801d926:	f77f ae3d 	ble.w	801d5a4 <_dtoa_r+0x7c4>
 801d92a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801d92c:	930a      	str	r3, [sp, #40]	@ 0x28
 801d92e:	2001      	movs	r0, #1
 801d930:	e65b      	b.n	801d5ea <_dtoa_r+0x80a>
 801d932:	9b08      	ldr	r3, [sp, #32]
 801d934:	2b00      	cmp	r3, #0
 801d936:	f77f aed6 	ble.w	801d6e6 <_dtoa_r+0x906>
 801d93a:	4656      	mov	r6, sl
 801d93c:	4621      	mov	r1, r4
 801d93e:	4648      	mov	r0, r9
 801d940:	f7ff f9c3 	bl	801ccca <quorem>
 801d944:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 801d948:	f806 8b01 	strb.w	r8, [r6], #1
 801d94c:	9b08      	ldr	r3, [sp, #32]
 801d94e:	eba6 020a 	sub.w	r2, r6, sl
 801d952:	4293      	cmp	r3, r2
 801d954:	ddb3      	ble.n	801d8be <_dtoa_r+0xade>
 801d956:	4649      	mov	r1, r9
 801d958:	2300      	movs	r3, #0
 801d95a:	220a      	movs	r2, #10
 801d95c:	4658      	mov	r0, fp
 801d95e:	f000 f969 	bl	801dc34 <__multadd>
 801d962:	4681      	mov	r9, r0
 801d964:	e7ea      	b.n	801d93c <_dtoa_r+0xb5c>
 801d966:	bf00      	nop
 801d968:	0801fa6c 	.word	0x0801fa6c
 801d96c:	0801f9f0 	.word	0x0801f9f0

0801d970 <_free_r>:
 801d970:	b538      	push	{r3, r4, r5, lr}
 801d972:	4605      	mov	r5, r0
 801d974:	2900      	cmp	r1, #0
 801d976:	d041      	beq.n	801d9fc <_free_r+0x8c>
 801d978:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801d97c:	1f0c      	subs	r4, r1, #4
 801d97e:	2b00      	cmp	r3, #0
 801d980:	bfb8      	it	lt
 801d982:	18e4      	addlt	r4, r4, r3
 801d984:	f000 f8e8 	bl	801db58 <__malloc_lock>
 801d988:	4a1d      	ldr	r2, [pc, #116]	@ (801da00 <_free_r+0x90>)
 801d98a:	6813      	ldr	r3, [r2, #0]
 801d98c:	b933      	cbnz	r3, 801d99c <_free_r+0x2c>
 801d98e:	6063      	str	r3, [r4, #4]
 801d990:	6014      	str	r4, [r2, #0]
 801d992:	4628      	mov	r0, r5
 801d994:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801d998:	f000 b8e4 	b.w	801db64 <__malloc_unlock>
 801d99c:	42a3      	cmp	r3, r4
 801d99e:	d908      	bls.n	801d9b2 <_free_r+0x42>
 801d9a0:	6820      	ldr	r0, [r4, #0]
 801d9a2:	1821      	adds	r1, r4, r0
 801d9a4:	428b      	cmp	r3, r1
 801d9a6:	bf01      	itttt	eq
 801d9a8:	6819      	ldreq	r1, [r3, #0]
 801d9aa:	685b      	ldreq	r3, [r3, #4]
 801d9ac:	1809      	addeq	r1, r1, r0
 801d9ae:	6021      	streq	r1, [r4, #0]
 801d9b0:	e7ed      	b.n	801d98e <_free_r+0x1e>
 801d9b2:	461a      	mov	r2, r3
 801d9b4:	685b      	ldr	r3, [r3, #4]
 801d9b6:	b10b      	cbz	r3, 801d9bc <_free_r+0x4c>
 801d9b8:	42a3      	cmp	r3, r4
 801d9ba:	d9fa      	bls.n	801d9b2 <_free_r+0x42>
 801d9bc:	6811      	ldr	r1, [r2, #0]
 801d9be:	1850      	adds	r0, r2, r1
 801d9c0:	42a0      	cmp	r0, r4
 801d9c2:	d10b      	bne.n	801d9dc <_free_r+0x6c>
 801d9c4:	6820      	ldr	r0, [r4, #0]
 801d9c6:	4401      	add	r1, r0
 801d9c8:	1850      	adds	r0, r2, r1
 801d9ca:	4283      	cmp	r3, r0
 801d9cc:	6011      	str	r1, [r2, #0]
 801d9ce:	d1e0      	bne.n	801d992 <_free_r+0x22>
 801d9d0:	6818      	ldr	r0, [r3, #0]
 801d9d2:	685b      	ldr	r3, [r3, #4]
 801d9d4:	6053      	str	r3, [r2, #4]
 801d9d6:	4408      	add	r0, r1
 801d9d8:	6010      	str	r0, [r2, #0]
 801d9da:	e7da      	b.n	801d992 <_free_r+0x22>
 801d9dc:	d902      	bls.n	801d9e4 <_free_r+0x74>
 801d9de:	230c      	movs	r3, #12
 801d9e0:	602b      	str	r3, [r5, #0]
 801d9e2:	e7d6      	b.n	801d992 <_free_r+0x22>
 801d9e4:	6820      	ldr	r0, [r4, #0]
 801d9e6:	1821      	adds	r1, r4, r0
 801d9e8:	428b      	cmp	r3, r1
 801d9ea:	bf04      	itt	eq
 801d9ec:	6819      	ldreq	r1, [r3, #0]
 801d9ee:	685b      	ldreq	r3, [r3, #4]
 801d9f0:	6063      	str	r3, [r4, #4]
 801d9f2:	bf04      	itt	eq
 801d9f4:	1809      	addeq	r1, r1, r0
 801d9f6:	6021      	streq	r1, [r4, #0]
 801d9f8:	6054      	str	r4, [r2, #4]
 801d9fa:	e7ca      	b.n	801d992 <_free_r+0x22>
 801d9fc:	bd38      	pop	{r3, r4, r5, pc}
 801d9fe:	bf00      	nop
 801da00:	20002500 	.word	0x20002500

0801da04 <malloc>:
 801da04:	4b02      	ldr	r3, [pc, #8]	@ (801da10 <malloc+0xc>)
 801da06:	4601      	mov	r1, r0
 801da08:	6818      	ldr	r0, [r3, #0]
 801da0a:	f000 b825 	b.w	801da58 <_malloc_r>
 801da0e:	bf00      	nop
 801da10:	20000164 	.word	0x20000164

0801da14 <sbrk_aligned>:
 801da14:	b570      	push	{r4, r5, r6, lr}
 801da16:	4e0f      	ldr	r6, [pc, #60]	@ (801da54 <sbrk_aligned+0x40>)
 801da18:	460c      	mov	r4, r1
 801da1a:	6831      	ldr	r1, [r6, #0]
 801da1c:	4605      	mov	r5, r0
 801da1e:	b911      	cbnz	r1, 801da26 <sbrk_aligned+0x12>
 801da20:	f000 fe92 	bl	801e748 <_sbrk_r>
 801da24:	6030      	str	r0, [r6, #0]
 801da26:	4621      	mov	r1, r4
 801da28:	4628      	mov	r0, r5
 801da2a:	f000 fe8d 	bl	801e748 <_sbrk_r>
 801da2e:	1c43      	adds	r3, r0, #1
 801da30:	d103      	bne.n	801da3a <sbrk_aligned+0x26>
 801da32:	f04f 34ff 	mov.w	r4, #4294967295
 801da36:	4620      	mov	r0, r4
 801da38:	bd70      	pop	{r4, r5, r6, pc}
 801da3a:	1cc4      	adds	r4, r0, #3
 801da3c:	f024 0403 	bic.w	r4, r4, #3
 801da40:	42a0      	cmp	r0, r4
 801da42:	d0f8      	beq.n	801da36 <sbrk_aligned+0x22>
 801da44:	1a21      	subs	r1, r4, r0
 801da46:	4628      	mov	r0, r5
 801da48:	f000 fe7e 	bl	801e748 <_sbrk_r>
 801da4c:	3001      	adds	r0, #1
 801da4e:	d1f2      	bne.n	801da36 <sbrk_aligned+0x22>
 801da50:	e7ef      	b.n	801da32 <sbrk_aligned+0x1e>
 801da52:	bf00      	nop
 801da54:	200024fc 	.word	0x200024fc

0801da58 <_malloc_r>:
 801da58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801da5c:	1ccd      	adds	r5, r1, #3
 801da5e:	f025 0503 	bic.w	r5, r5, #3
 801da62:	3508      	adds	r5, #8
 801da64:	2d0c      	cmp	r5, #12
 801da66:	bf38      	it	cc
 801da68:	250c      	movcc	r5, #12
 801da6a:	2d00      	cmp	r5, #0
 801da6c:	4606      	mov	r6, r0
 801da6e:	db01      	blt.n	801da74 <_malloc_r+0x1c>
 801da70:	42a9      	cmp	r1, r5
 801da72:	d904      	bls.n	801da7e <_malloc_r+0x26>
 801da74:	230c      	movs	r3, #12
 801da76:	6033      	str	r3, [r6, #0]
 801da78:	2000      	movs	r0, #0
 801da7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801da7e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801db54 <_malloc_r+0xfc>
 801da82:	f000 f869 	bl	801db58 <__malloc_lock>
 801da86:	f8d8 3000 	ldr.w	r3, [r8]
 801da8a:	461c      	mov	r4, r3
 801da8c:	bb44      	cbnz	r4, 801dae0 <_malloc_r+0x88>
 801da8e:	4629      	mov	r1, r5
 801da90:	4630      	mov	r0, r6
 801da92:	f7ff ffbf 	bl	801da14 <sbrk_aligned>
 801da96:	1c43      	adds	r3, r0, #1
 801da98:	4604      	mov	r4, r0
 801da9a:	d158      	bne.n	801db4e <_malloc_r+0xf6>
 801da9c:	f8d8 4000 	ldr.w	r4, [r8]
 801daa0:	4627      	mov	r7, r4
 801daa2:	2f00      	cmp	r7, #0
 801daa4:	d143      	bne.n	801db2e <_malloc_r+0xd6>
 801daa6:	2c00      	cmp	r4, #0
 801daa8:	d04b      	beq.n	801db42 <_malloc_r+0xea>
 801daaa:	6823      	ldr	r3, [r4, #0]
 801daac:	4639      	mov	r1, r7
 801daae:	4630      	mov	r0, r6
 801dab0:	eb04 0903 	add.w	r9, r4, r3
 801dab4:	f000 fe48 	bl	801e748 <_sbrk_r>
 801dab8:	4581      	cmp	r9, r0
 801daba:	d142      	bne.n	801db42 <_malloc_r+0xea>
 801dabc:	6821      	ldr	r1, [r4, #0]
 801dabe:	1a6d      	subs	r5, r5, r1
 801dac0:	4629      	mov	r1, r5
 801dac2:	4630      	mov	r0, r6
 801dac4:	f7ff ffa6 	bl	801da14 <sbrk_aligned>
 801dac8:	3001      	adds	r0, #1
 801daca:	d03a      	beq.n	801db42 <_malloc_r+0xea>
 801dacc:	6823      	ldr	r3, [r4, #0]
 801dace:	442b      	add	r3, r5
 801dad0:	6023      	str	r3, [r4, #0]
 801dad2:	f8d8 3000 	ldr.w	r3, [r8]
 801dad6:	685a      	ldr	r2, [r3, #4]
 801dad8:	bb62      	cbnz	r2, 801db34 <_malloc_r+0xdc>
 801dada:	f8c8 7000 	str.w	r7, [r8]
 801dade:	e00f      	b.n	801db00 <_malloc_r+0xa8>
 801dae0:	6822      	ldr	r2, [r4, #0]
 801dae2:	1b52      	subs	r2, r2, r5
 801dae4:	d420      	bmi.n	801db28 <_malloc_r+0xd0>
 801dae6:	2a0b      	cmp	r2, #11
 801dae8:	d917      	bls.n	801db1a <_malloc_r+0xc2>
 801daea:	1961      	adds	r1, r4, r5
 801daec:	42a3      	cmp	r3, r4
 801daee:	6025      	str	r5, [r4, #0]
 801daf0:	bf18      	it	ne
 801daf2:	6059      	strne	r1, [r3, #4]
 801daf4:	6863      	ldr	r3, [r4, #4]
 801daf6:	bf08      	it	eq
 801daf8:	f8c8 1000 	streq.w	r1, [r8]
 801dafc:	5162      	str	r2, [r4, r5]
 801dafe:	604b      	str	r3, [r1, #4]
 801db00:	4630      	mov	r0, r6
 801db02:	f000 f82f 	bl	801db64 <__malloc_unlock>
 801db06:	f104 000b 	add.w	r0, r4, #11
 801db0a:	1d23      	adds	r3, r4, #4
 801db0c:	f020 0007 	bic.w	r0, r0, #7
 801db10:	1ac2      	subs	r2, r0, r3
 801db12:	bf1c      	itt	ne
 801db14:	1a1b      	subne	r3, r3, r0
 801db16:	50a3      	strne	r3, [r4, r2]
 801db18:	e7af      	b.n	801da7a <_malloc_r+0x22>
 801db1a:	6862      	ldr	r2, [r4, #4]
 801db1c:	42a3      	cmp	r3, r4
 801db1e:	bf0c      	ite	eq
 801db20:	f8c8 2000 	streq.w	r2, [r8]
 801db24:	605a      	strne	r2, [r3, #4]
 801db26:	e7eb      	b.n	801db00 <_malloc_r+0xa8>
 801db28:	4623      	mov	r3, r4
 801db2a:	6864      	ldr	r4, [r4, #4]
 801db2c:	e7ae      	b.n	801da8c <_malloc_r+0x34>
 801db2e:	463c      	mov	r4, r7
 801db30:	687f      	ldr	r7, [r7, #4]
 801db32:	e7b6      	b.n	801daa2 <_malloc_r+0x4a>
 801db34:	461a      	mov	r2, r3
 801db36:	685b      	ldr	r3, [r3, #4]
 801db38:	42a3      	cmp	r3, r4
 801db3a:	d1fb      	bne.n	801db34 <_malloc_r+0xdc>
 801db3c:	2300      	movs	r3, #0
 801db3e:	6053      	str	r3, [r2, #4]
 801db40:	e7de      	b.n	801db00 <_malloc_r+0xa8>
 801db42:	230c      	movs	r3, #12
 801db44:	6033      	str	r3, [r6, #0]
 801db46:	4630      	mov	r0, r6
 801db48:	f000 f80c 	bl	801db64 <__malloc_unlock>
 801db4c:	e794      	b.n	801da78 <_malloc_r+0x20>
 801db4e:	6005      	str	r5, [r0, #0]
 801db50:	e7d6      	b.n	801db00 <_malloc_r+0xa8>
 801db52:	bf00      	nop
 801db54:	20002500 	.word	0x20002500

0801db58 <__malloc_lock>:
 801db58:	4801      	ldr	r0, [pc, #4]	@ (801db60 <__malloc_lock+0x8>)
 801db5a:	f7ff b8a6 	b.w	801ccaa <__retarget_lock_acquire_recursive>
 801db5e:	bf00      	nop
 801db60:	200024f8 	.word	0x200024f8

0801db64 <__malloc_unlock>:
 801db64:	4801      	ldr	r0, [pc, #4]	@ (801db6c <__malloc_unlock+0x8>)
 801db66:	f7ff b8a1 	b.w	801ccac <__retarget_lock_release_recursive>
 801db6a:	bf00      	nop
 801db6c:	200024f8 	.word	0x200024f8

0801db70 <_Balloc>:
 801db70:	b570      	push	{r4, r5, r6, lr}
 801db72:	69c6      	ldr	r6, [r0, #28]
 801db74:	4604      	mov	r4, r0
 801db76:	460d      	mov	r5, r1
 801db78:	b976      	cbnz	r6, 801db98 <_Balloc+0x28>
 801db7a:	2010      	movs	r0, #16
 801db7c:	f7ff ff42 	bl	801da04 <malloc>
 801db80:	4602      	mov	r2, r0
 801db82:	61e0      	str	r0, [r4, #28]
 801db84:	b920      	cbnz	r0, 801db90 <_Balloc+0x20>
 801db86:	4b18      	ldr	r3, [pc, #96]	@ (801dbe8 <_Balloc+0x78>)
 801db88:	4818      	ldr	r0, [pc, #96]	@ (801dbec <_Balloc+0x7c>)
 801db8a:	216b      	movs	r1, #107	@ 0x6b
 801db8c:	f000 fdec 	bl	801e768 <__assert_func>
 801db90:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801db94:	6006      	str	r6, [r0, #0]
 801db96:	60c6      	str	r6, [r0, #12]
 801db98:	69e6      	ldr	r6, [r4, #28]
 801db9a:	68f3      	ldr	r3, [r6, #12]
 801db9c:	b183      	cbz	r3, 801dbc0 <_Balloc+0x50>
 801db9e:	69e3      	ldr	r3, [r4, #28]
 801dba0:	68db      	ldr	r3, [r3, #12]
 801dba2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801dba6:	b9b8      	cbnz	r0, 801dbd8 <_Balloc+0x68>
 801dba8:	2101      	movs	r1, #1
 801dbaa:	fa01 f605 	lsl.w	r6, r1, r5
 801dbae:	1d72      	adds	r2, r6, #5
 801dbb0:	0092      	lsls	r2, r2, #2
 801dbb2:	4620      	mov	r0, r4
 801dbb4:	f000 fdf6 	bl	801e7a4 <_calloc_r>
 801dbb8:	b160      	cbz	r0, 801dbd4 <_Balloc+0x64>
 801dbba:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801dbbe:	e00e      	b.n	801dbde <_Balloc+0x6e>
 801dbc0:	2221      	movs	r2, #33	@ 0x21
 801dbc2:	2104      	movs	r1, #4
 801dbc4:	4620      	mov	r0, r4
 801dbc6:	f000 fded 	bl	801e7a4 <_calloc_r>
 801dbca:	69e3      	ldr	r3, [r4, #28]
 801dbcc:	60f0      	str	r0, [r6, #12]
 801dbce:	68db      	ldr	r3, [r3, #12]
 801dbd0:	2b00      	cmp	r3, #0
 801dbd2:	d1e4      	bne.n	801db9e <_Balloc+0x2e>
 801dbd4:	2000      	movs	r0, #0
 801dbd6:	bd70      	pop	{r4, r5, r6, pc}
 801dbd8:	6802      	ldr	r2, [r0, #0]
 801dbda:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801dbde:	2300      	movs	r3, #0
 801dbe0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801dbe4:	e7f7      	b.n	801dbd6 <_Balloc+0x66>
 801dbe6:	bf00      	nop
 801dbe8:	0801f9fd 	.word	0x0801f9fd
 801dbec:	0801fa7d 	.word	0x0801fa7d

0801dbf0 <_Bfree>:
 801dbf0:	b570      	push	{r4, r5, r6, lr}
 801dbf2:	69c6      	ldr	r6, [r0, #28]
 801dbf4:	4605      	mov	r5, r0
 801dbf6:	460c      	mov	r4, r1
 801dbf8:	b976      	cbnz	r6, 801dc18 <_Bfree+0x28>
 801dbfa:	2010      	movs	r0, #16
 801dbfc:	f7ff ff02 	bl	801da04 <malloc>
 801dc00:	4602      	mov	r2, r0
 801dc02:	61e8      	str	r0, [r5, #28]
 801dc04:	b920      	cbnz	r0, 801dc10 <_Bfree+0x20>
 801dc06:	4b09      	ldr	r3, [pc, #36]	@ (801dc2c <_Bfree+0x3c>)
 801dc08:	4809      	ldr	r0, [pc, #36]	@ (801dc30 <_Bfree+0x40>)
 801dc0a:	218f      	movs	r1, #143	@ 0x8f
 801dc0c:	f000 fdac 	bl	801e768 <__assert_func>
 801dc10:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801dc14:	6006      	str	r6, [r0, #0]
 801dc16:	60c6      	str	r6, [r0, #12]
 801dc18:	b13c      	cbz	r4, 801dc2a <_Bfree+0x3a>
 801dc1a:	69eb      	ldr	r3, [r5, #28]
 801dc1c:	6862      	ldr	r2, [r4, #4]
 801dc1e:	68db      	ldr	r3, [r3, #12]
 801dc20:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801dc24:	6021      	str	r1, [r4, #0]
 801dc26:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801dc2a:	bd70      	pop	{r4, r5, r6, pc}
 801dc2c:	0801f9fd 	.word	0x0801f9fd
 801dc30:	0801fa7d 	.word	0x0801fa7d

0801dc34 <__multadd>:
 801dc34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801dc38:	690d      	ldr	r5, [r1, #16]
 801dc3a:	4607      	mov	r7, r0
 801dc3c:	460c      	mov	r4, r1
 801dc3e:	461e      	mov	r6, r3
 801dc40:	f101 0c14 	add.w	ip, r1, #20
 801dc44:	2000      	movs	r0, #0
 801dc46:	f8dc 3000 	ldr.w	r3, [ip]
 801dc4a:	b299      	uxth	r1, r3
 801dc4c:	fb02 6101 	mla	r1, r2, r1, r6
 801dc50:	0c1e      	lsrs	r6, r3, #16
 801dc52:	0c0b      	lsrs	r3, r1, #16
 801dc54:	fb02 3306 	mla	r3, r2, r6, r3
 801dc58:	b289      	uxth	r1, r1
 801dc5a:	3001      	adds	r0, #1
 801dc5c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801dc60:	4285      	cmp	r5, r0
 801dc62:	f84c 1b04 	str.w	r1, [ip], #4
 801dc66:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801dc6a:	dcec      	bgt.n	801dc46 <__multadd+0x12>
 801dc6c:	b30e      	cbz	r6, 801dcb2 <__multadd+0x7e>
 801dc6e:	68a3      	ldr	r3, [r4, #8]
 801dc70:	42ab      	cmp	r3, r5
 801dc72:	dc19      	bgt.n	801dca8 <__multadd+0x74>
 801dc74:	6861      	ldr	r1, [r4, #4]
 801dc76:	4638      	mov	r0, r7
 801dc78:	3101      	adds	r1, #1
 801dc7a:	f7ff ff79 	bl	801db70 <_Balloc>
 801dc7e:	4680      	mov	r8, r0
 801dc80:	b928      	cbnz	r0, 801dc8e <__multadd+0x5a>
 801dc82:	4602      	mov	r2, r0
 801dc84:	4b0c      	ldr	r3, [pc, #48]	@ (801dcb8 <__multadd+0x84>)
 801dc86:	480d      	ldr	r0, [pc, #52]	@ (801dcbc <__multadd+0x88>)
 801dc88:	21ba      	movs	r1, #186	@ 0xba
 801dc8a:	f000 fd6d 	bl	801e768 <__assert_func>
 801dc8e:	6922      	ldr	r2, [r4, #16]
 801dc90:	3202      	adds	r2, #2
 801dc92:	f104 010c 	add.w	r1, r4, #12
 801dc96:	0092      	lsls	r2, r2, #2
 801dc98:	300c      	adds	r0, #12
 801dc9a:	f7ff f808 	bl	801ccae <memcpy>
 801dc9e:	4621      	mov	r1, r4
 801dca0:	4638      	mov	r0, r7
 801dca2:	f7ff ffa5 	bl	801dbf0 <_Bfree>
 801dca6:	4644      	mov	r4, r8
 801dca8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801dcac:	3501      	adds	r5, #1
 801dcae:	615e      	str	r6, [r3, #20]
 801dcb0:	6125      	str	r5, [r4, #16]
 801dcb2:	4620      	mov	r0, r4
 801dcb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801dcb8:	0801fa6c 	.word	0x0801fa6c
 801dcbc:	0801fa7d 	.word	0x0801fa7d

0801dcc0 <__hi0bits>:
 801dcc0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 801dcc4:	4603      	mov	r3, r0
 801dcc6:	bf36      	itet	cc
 801dcc8:	0403      	lslcc	r3, r0, #16
 801dcca:	2000      	movcs	r0, #0
 801dccc:	2010      	movcc	r0, #16
 801dcce:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801dcd2:	bf3c      	itt	cc
 801dcd4:	021b      	lslcc	r3, r3, #8
 801dcd6:	3008      	addcc	r0, #8
 801dcd8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801dcdc:	bf3c      	itt	cc
 801dcde:	011b      	lslcc	r3, r3, #4
 801dce0:	3004      	addcc	r0, #4
 801dce2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801dce6:	bf3c      	itt	cc
 801dce8:	009b      	lslcc	r3, r3, #2
 801dcea:	3002      	addcc	r0, #2
 801dcec:	2b00      	cmp	r3, #0
 801dcee:	db05      	blt.n	801dcfc <__hi0bits+0x3c>
 801dcf0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 801dcf4:	f100 0001 	add.w	r0, r0, #1
 801dcf8:	bf08      	it	eq
 801dcfa:	2020      	moveq	r0, #32
 801dcfc:	4770      	bx	lr

0801dcfe <__lo0bits>:
 801dcfe:	6803      	ldr	r3, [r0, #0]
 801dd00:	4602      	mov	r2, r0
 801dd02:	f013 0007 	ands.w	r0, r3, #7
 801dd06:	d00b      	beq.n	801dd20 <__lo0bits+0x22>
 801dd08:	07d9      	lsls	r1, r3, #31
 801dd0a:	d421      	bmi.n	801dd50 <__lo0bits+0x52>
 801dd0c:	0798      	lsls	r0, r3, #30
 801dd0e:	bf49      	itett	mi
 801dd10:	085b      	lsrmi	r3, r3, #1
 801dd12:	089b      	lsrpl	r3, r3, #2
 801dd14:	2001      	movmi	r0, #1
 801dd16:	6013      	strmi	r3, [r2, #0]
 801dd18:	bf5c      	itt	pl
 801dd1a:	6013      	strpl	r3, [r2, #0]
 801dd1c:	2002      	movpl	r0, #2
 801dd1e:	4770      	bx	lr
 801dd20:	b299      	uxth	r1, r3
 801dd22:	b909      	cbnz	r1, 801dd28 <__lo0bits+0x2a>
 801dd24:	0c1b      	lsrs	r3, r3, #16
 801dd26:	2010      	movs	r0, #16
 801dd28:	b2d9      	uxtb	r1, r3
 801dd2a:	b909      	cbnz	r1, 801dd30 <__lo0bits+0x32>
 801dd2c:	3008      	adds	r0, #8
 801dd2e:	0a1b      	lsrs	r3, r3, #8
 801dd30:	0719      	lsls	r1, r3, #28
 801dd32:	bf04      	itt	eq
 801dd34:	091b      	lsreq	r3, r3, #4
 801dd36:	3004      	addeq	r0, #4
 801dd38:	0799      	lsls	r1, r3, #30
 801dd3a:	bf04      	itt	eq
 801dd3c:	089b      	lsreq	r3, r3, #2
 801dd3e:	3002      	addeq	r0, #2
 801dd40:	07d9      	lsls	r1, r3, #31
 801dd42:	d403      	bmi.n	801dd4c <__lo0bits+0x4e>
 801dd44:	085b      	lsrs	r3, r3, #1
 801dd46:	f100 0001 	add.w	r0, r0, #1
 801dd4a:	d003      	beq.n	801dd54 <__lo0bits+0x56>
 801dd4c:	6013      	str	r3, [r2, #0]
 801dd4e:	4770      	bx	lr
 801dd50:	2000      	movs	r0, #0
 801dd52:	4770      	bx	lr
 801dd54:	2020      	movs	r0, #32
 801dd56:	4770      	bx	lr

0801dd58 <__i2b>:
 801dd58:	b510      	push	{r4, lr}
 801dd5a:	460c      	mov	r4, r1
 801dd5c:	2101      	movs	r1, #1
 801dd5e:	f7ff ff07 	bl	801db70 <_Balloc>
 801dd62:	4602      	mov	r2, r0
 801dd64:	b928      	cbnz	r0, 801dd72 <__i2b+0x1a>
 801dd66:	4b05      	ldr	r3, [pc, #20]	@ (801dd7c <__i2b+0x24>)
 801dd68:	4805      	ldr	r0, [pc, #20]	@ (801dd80 <__i2b+0x28>)
 801dd6a:	f240 1145 	movw	r1, #325	@ 0x145
 801dd6e:	f000 fcfb 	bl	801e768 <__assert_func>
 801dd72:	2301      	movs	r3, #1
 801dd74:	6144      	str	r4, [r0, #20]
 801dd76:	6103      	str	r3, [r0, #16]
 801dd78:	bd10      	pop	{r4, pc}
 801dd7a:	bf00      	nop
 801dd7c:	0801fa6c 	.word	0x0801fa6c
 801dd80:	0801fa7d 	.word	0x0801fa7d

0801dd84 <__multiply>:
 801dd84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dd88:	4614      	mov	r4, r2
 801dd8a:	690a      	ldr	r2, [r1, #16]
 801dd8c:	6923      	ldr	r3, [r4, #16]
 801dd8e:	429a      	cmp	r2, r3
 801dd90:	bfa8      	it	ge
 801dd92:	4623      	movge	r3, r4
 801dd94:	460f      	mov	r7, r1
 801dd96:	bfa4      	itt	ge
 801dd98:	460c      	movge	r4, r1
 801dd9a:	461f      	movge	r7, r3
 801dd9c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 801dda0:	f8d7 9010 	ldr.w	r9, [r7, #16]
 801dda4:	68a3      	ldr	r3, [r4, #8]
 801dda6:	6861      	ldr	r1, [r4, #4]
 801dda8:	eb0a 0609 	add.w	r6, sl, r9
 801ddac:	42b3      	cmp	r3, r6
 801ddae:	b085      	sub	sp, #20
 801ddb0:	bfb8      	it	lt
 801ddb2:	3101      	addlt	r1, #1
 801ddb4:	f7ff fedc 	bl	801db70 <_Balloc>
 801ddb8:	b930      	cbnz	r0, 801ddc8 <__multiply+0x44>
 801ddba:	4602      	mov	r2, r0
 801ddbc:	4b44      	ldr	r3, [pc, #272]	@ (801ded0 <__multiply+0x14c>)
 801ddbe:	4845      	ldr	r0, [pc, #276]	@ (801ded4 <__multiply+0x150>)
 801ddc0:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 801ddc4:	f000 fcd0 	bl	801e768 <__assert_func>
 801ddc8:	f100 0514 	add.w	r5, r0, #20
 801ddcc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801ddd0:	462b      	mov	r3, r5
 801ddd2:	2200      	movs	r2, #0
 801ddd4:	4543      	cmp	r3, r8
 801ddd6:	d321      	bcc.n	801de1c <__multiply+0x98>
 801ddd8:	f107 0114 	add.w	r1, r7, #20
 801dddc:	f104 0214 	add.w	r2, r4, #20
 801dde0:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 801dde4:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 801dde8:	9302      	str	r3, [sp, #8]
 801ddea:	1b13      	subs	r3, r2, r4
 801ddec:	3b15      	subs	r3, #21
 801ddee:	f023 0303 	bic.w	r3, r3, #3
 801ddf2:	3304      	adds	r3, #4
 801ddf4:	f104 0715 	add.w	r7, r4, #21
 801ddf8:	42ba      	cmp	r2, r7
 801ddfa:	bf38      	it	cc
 801ddfc:	2304      	movcc	r3, #4
 801ddfe:	9301      	str	r3, [sp, #4]
 801de00:	9b02      	ldr	r3, [sp, #8]
 801de02:	9103      	str	r1, [sp, #12]
 801de04:	428b      	cmp	r3, r1
 801de06:	d80c      	bhi.n	801de22 <__multiply+0x9e>
 801de08:	2e00      	cmp	r6, #0
 801de0a:	dd03      	ble.n	801de14 <__multiply+0x90>
 801de0c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801de10:	2b00      	cmp	r3, #0
 801de12:	d05a      	beq.n	801deca <__multiply+0x146>
 801de14:	6106      	str	r6, [r0, #16]
 801de16:	b005      	add	sp, #20
 801de18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801de1c:	f843 2b04 	str.w	r2, [r3], #4
 801de20:	e7d8      	b.n	801ddd4 <__multiply+0x50>
 801de22:	f8b1 a000 	ldrh.w	sl, [r1]
 801de26:	f1ba 0f00 	cmp.w	sl, #0
 801de2a:	d023      	beq.n	801de74 <__multiply+0xf0>
 801de2c:	f104 0e14 	add.w	lr, r4, #20
 801de30:	46a9      	mov	r9, r5
 801de32:	f04f 0c00 	mov.w	ip, #0
 801de36:	f85e 7b04 	ldr.w	r7, [lr], #4
 801de3a:	f8d9 3000 	ldr.w	r3, [r9]
 801de3e:	fa1f fb87 	uxth.w	fp, r7
 801de42:	b29b      	uxth	r3, r3
 801de44:	fb0a 330b 	mla	r3, sl, fp, r3
 801de48:	4463      	add	r3, ip
 801de4a:	f8d9 c000 	ldr.w	ip, [r9]
 801de4e:	0c3f      	lsrs	r7, r7, #16
 801de50:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 801de54:	fb0a c707 	mla	r7, sl, r7, ip
 801de58:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 801de5c:	b29b      	uxth	r3, r3
 801de5e:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 801de62:	4572      	cmp	r2, lr
 801de64:	f849 3b04 	str.w	r3, [r9], #4
 801de68:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801de6c:	d8e3      	bhi.n	801de36 <__multiply+0xb2>
 801de6e:	9b01      	ldr	r3, [sp, #4]
 801de70:	f845 c003 	str.w	ip, [r5, r3]
 801de74:	9b03      	ldr	r3, [sp, #12]
 801de76:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 801de7a:	3104      	adds	r1, #4
 801de7c:	f1b9 0f00 	cmp.w	r9, #0
 801de80:	d021      	beq.n	801dec6 <__multiply+0x142>
 801de82:	682b      	ldr	r3, [r5, #0]
 801de84:	f104 0c14 	add.w	ip, r4, #20
 801de88:	46ae      	mov	lr, r5
 801de8a:	f04f 0a00 	mov.w	sl, #0
 801de8e:	f8bc b000 	ldrh.w	fp, [ip]
 801de92:	f8be 7002 	ldrh.w	r7, [lr, #2]
 801de96:	fb09 770b 	mla	r7, r9, fp, r7
 801de9a:	4457      	add	r7, sl
 801de9c:	b29b      	uxth	r3, r3
 801de9e:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 801dea2:	f84e 3b04 	str.w	r3, [lr], #4
 801dea6:	f85c 3b04 	ldr.w	r3, [ip], #4
 801deaa:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801deae:	f8be 3000 	ldrh.w	r3, [lr]
 801deb2:	fb09 330a 	mla	r3, r9, sl, r3
 801deb6:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 801deba:	4562      	cmp	r2, ip
 801debc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801dec0:	d8e5      	bhi.n	801de8e <__multiply+0x10a>
 801dec2:	9f01      	ldr	r7, [sp, #4]
 801dec4:	51eb      	str	r3, [r5, r7]
 801dec6:	3504      	adds	r5, #4
 801dec8:	e79a      	b.n	801de00 <__multiply+0x7c>
 801deca:	3e01      	subs	r6, #1
 801decc:	e79c      	b.n	801de08 <__multiply+0x84>
 801dece:	bf00      	nop
 801ded0:	0801fa6c 	.word	0x0801fa6c
 801ded4:	0801fa7d 	.word	0x0801fa7d

0801ded8 <__pow5mult>:
 801ded8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801dedc:	4615      	mov	r5, r2
 801dede:	f012 0203 	ands.w	r2, r2, #3
 801dee2:	4607      	mov	r7, r0
 801dee4:	460e      	mov	r6, r1
 801dee6:	d007      	beq.n	801def8 <__pow5mult+0x20>
 801dee8:	4c25      	ldr	r4, [pc, #148]	@ (801df80 <__pow5mult+0xa8>)
 801deea:	3a01      	subs	r2, #1
 801deec:	2300      	movs	r3, #0
 801deee:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801def2:	f7ff fe9f 	bl	801dc34 <__multadd>
 801def6:	4606      	mov	r6, r0
 801def8:	10ad      	asrs	r5, r5, #2
 801defa:	d03d      	beq.n	801df78 <__pow5mult+0xa0>
 801defc:	69fc      	ldr	r4, [r7, #28]
 801defe:	b97c      	cbnz	r4, 801df20 <__pow5mult+0x48>
 801df00:	2010      	movs	r0, #16
 801df02:	f7ff fd7f 	bl	801da04 <malloc>
 801df06:	4602      	mov	r2, r0
 801df08:	61f8      	str	r0, [r7, #28]
 801df0a:	b928      	cbnz	r0, 801df18 <__pow5mult+0x40>
 801df0c:	4b1d      	ldr	r3, [pc, #116]	@ (801df84 <__pow5mult+0xac>)
 801df0e:	481e      	ldr	r0, [pc, #120]	@ (801df88 <__pow5mult+0xb0>)
 801df10:	f240 11b3 	movw	r1, #435	@ 0x1b3
 801df14:	f000 fc28 	bl	801e768 <__assert_func>
 801df18:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801df1c:	6004      	str	r4, [r0, #0]
 801df1e:	60c4      	str	r4, [r0, #12]
 801df20:	f8d7 801c 	ldr.w	r8, [r7, #28]
 801df24:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801df28:	b94c      	cbnz	r4, 801df3e <__pow5mult+0x66>
 801df2a:	f240 2171 	movw	r1, #625	@ 0x271
 801df2e:	4638      	mov	r0, r7
 801df30:	f7ff ff12 	bl	801dd58 <__i2b>
 801df34:	2300      	movs	r3, #0
 801df36:	f8c8 0008 	str.w	r0, [r8, #8]
 801df3a:	4604      	mov	r4, r0
 801df3c:	6003      	str	r3, [r0, #0]
 801df3e:	f04f 0900 	mov.w	r9, #0
 801df42:	07eb      	lsls	r3, r5, #31
 801df44:	d50a      	bpl.n	801df5c <__pow5mult+0x84>
 801df46:	4631      	mov	r1, r6
 801df48:	4622      	mov	r2, r4
 801df4a:	4638      	mov	r0, r7
 801df4c:	f7ff ff1a 	bl	801dd84 <__multiply>
 801df50:	4631      	mov	r1, r6
 801df52:	4680      	mov	r8, r0
 801df54:	4638      	mov	r0, r7
 801df56:	f7ff fe4b 	bl	801dbf0 <_Bfree>
 801df5a:	4646      	mov	r6, r8
 801df5c:	106d      	asrs	r5, r5, #1
 801df5e:	d00b      	beq.n	801df78 <__pow5mult+0xa0>
 801df60:	6820      	ldr	r0, [r4, #0]
 801df62:	b938      	cbnz	r0, 801df74 <__pow5mult+0x9c>
 801df64:	4622      	mov	r2, r4
 801df66:	4621      	mov	r1, r4
 801df68:	4638      	mov	r0, r7
 801df6a:	f7ff ff0b 	bl	801dd84 <__multiply>
 801df6e:	6020      	str	r0, [r4, #0]
 801df70:	f8c0 9000 	str.w	r9, [r0]
 801df74:	4604      	mov	r4, r0
 801df76:	e7e4      	b.n	801df42 <__pow5mult+0x6a>
 801df78:	4630      	mov	r0, r6
 801df7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801df7e:	bf00      	nop
 801df80:	0801fad8 	.word	0x0801fad8
 801df84:	0801f9fd 	.word	0x0801f9fd
 801df88:	0801fa7d 	.word	0x0801fa7d

0801df8c <__lshift>:
 801df8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801df90:	460c      	mov	r4, r1
 801df92:	6849      	ldr	r1, [r1, #4]
 801df94:	6923      	ldr	r3, [r4, #16]
 801df96:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801df9a:	68a3      	ldr	r3, [r4, #8]
 801df9c:	4607      	mov	r7, r0
 801df9e:	4691      	mov	r9, r2
 801dfa0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801dfa4:	f108 0601 	add.w	r6, r8, #1
 801dfa8:	42b3      	cmp	r3, r6
 801dfaa:	db0b      	blt.n	801dfc4 <__lshift+0x38>
 801dfac:	4638      	mov	r0, r7
 801dfae:	f7ff fddf 	bl	801db70 <_Balloc>
 801dfb2:	4605      	mov	r5, r0
 801dfb4:	b948      	cbnz	r0, 801dfca <__lshift+0x3e>
 801dfb6:	4602      	mov	r2, r0
 801dfb8:	4b28      	ldr	r3, [pc, #160]	@ (801e05c <__lshift+0xd0>)
 801dfba:	4829      	ldr	r0, [pc, #164]	@ (801e060 <__lshift+0xd4>)
 801dfbc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 801dfc0:	f000 fbd2 	bl	801e768 <__assert_func>
 801dfc4:	3101      	adds	r1, #1
 801dfc6:	005b      	lsls	r3, r3, #1
 801dfc8:	e7ee      	b.n	801dfa8 <__lshift+0x1c>
 801dfca:	2300      	movs	r3, #0
 801dfcc:	f100 0114 	add.w	r1, r0, #20
 801dfd0:	f100 0210 	add.w	r2, r0, #16
 801dfd4:	4618      	mov	r0, r3
 801dfd6:	4553      	cmp	r3, sl
 801dfd8:	db33      	blt.n	801e042 <__lshift+0xb6>
 801dfda:	6920      	ldr	r0, [r4, #16]
 801dfdc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801dfe0:	f104 0314 	add.w	r3, r4, #20
 801dfe4:	f019 091f 	ands.w	r9, r9, #31
 801dfe8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801dfec:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801dff0:	d02b      	beq.n	801e04a <__lshift+0xbe>
 801dff2:	f1c9 0e20 	rsb	lr, r9, #32
 801dff6:	468a      	mov	sl, r1
 801dff8:	2200      	movs	r2, #0
 801dffa:	6818      	ldr	r0, [r3, #0]
 801dffc:	fa00 f009 	lsl.w	r0, r0, r9
 801e000:	4310      	orrs	r0, r2
 801e002:	f84a 0b04 	str.w	r0, [sl], #4
 801e006:	f853 2b04 	ldr.w	r2, [r3], #4
 801e00a:	459c      	cmp	ip, r3
 801e00c:	fa22 f20e 	lsr.w	r2, r2, lr
 801e010:	d8f3      	bhi.n	801dffa <__lshift+0x6e>
 801e012:	ebac 0304 	sub.w	r3, ip, r4
 801e016:	3b15      	subs	r3, #21
 801e018:	f023 0303 	bic.w	r3, r3, #3
 801e01c:	3304      	adds	r3, #4
 801e01e:	f104 0015 	add.w	r0, r4, #21
 801e022:	4584      	cmp	ip, r0
 801e024:	bf38      	it	cc
 801e026:	2304      	movcc	r3, #4
 801e028:	50ca      	str	r2, [r1, r3]
 801e02a:	b10a      	cbz	r2, 801e030 <__lshift+0xa4>
 801e02c:	f108 0602 	add.w	r6, r8, #2
 801e030:	3e01      	subs	r6, #1
 801e032:	4638      	mov	r0, r7
 801e034:	612e      	str	r6, [r5, #16]
 801e036:	4621      	mov	r1, r4
 801e038:	f7ff fdda 	bl	801dbf0 <_Bfree>
 801e03c:	4628      	mov	r0, r5
 801e03e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e042:	f842 0f04 	str.w	r0, [r2, #4]!
 801e046:	3301      	adds	r3, #1
 801e048:	e7c5      	b.n	801dfd6 <__lshift+0x4a>
 801e04a:	3904      	subs	r1, #4
 801e04c:	f853 2b04 	ldr.w	r2, [r3], #4
 801e050:	f841 2f04 	str.w	r2, [r1, #4]!
 801e054:	459c      	cmp	ip, r3
 801e056:	d8f9      	bhi.n	801e04c <__lshift+0xc0>
 801e058:	e7ea      	b.n	801e030 <__lshift+0xa4>
 801e05a:	bf00      	nop
 801e05c:	0801fa6c 	.word	0x0801fa6c
 801e060:	0801fa7d 	.word	0x0801fa7d

0801e064 <__mcmp>:
 801e064:	690a      	ldr	r2, [r1, #16]
 801e066:	4603      	mov	r3, r0
 801e068:	6900      	ldr	r0, [r0, #16]
 801e06a:	1a80      	subs	r0, r0, r2
 801e06c:	b530      	push	{r4, r5, lr}
 801e06e:	d10e      	bne.n	801e08e <__mcmp+0x2a>
 801e070:	3314      	adds	r3, #20
 801e072:	3114      	adds	r1, #20
 801e074:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 801e078:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 801e07c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801e080:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801e084:	4295      	cmp	r5, r2
 801e086:	d003      	beq.n	801e090 <__mcmp+0x2c>
 801e088:	d205      	bcs.n	801e096 <__mcmp+0x32>
 801e08a:	f04f 30ff 	mov.w	r0, #4294967295
 801e08e:	bd30      	pop	{r4, r5, pc}
 801e090:	42a3      	cmp	r3, r4
 801e092:	d3f3      	bcc.n	801e07c <__mcmp+0x18>
 801e094:	e7fb      	b.n	801e08e <__mcmp+0x2a>
 801e096:	2001      	movs	r0, #1
 801e098:	e7f9      	b.n	801e08e <__mcmp+0x2a>
	...

0801e09c <__mdiff>:
 801e09c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e0a0:	4689      	mov	r9, r1
 801e0a2:	4606      	mov	r6, r0
 801e0a4:	4611      	mov	r1, r2
 801e0a6:	4648      	mov	r0, r9
 801e0a8:	4614      	mov	r4, r2
 801e0aa:	f7ff ffdb 	bl	801e064 <__mcmp>
 801e0ae:	1e05      	subs	r5, r0, #0
 801e0b0:	d112      	bne.n	801e0d8 <__mdiff+0x3c>
 801e0b2:	4629      	mov	r1, r5
 801e0b4:	4630      	mov	r0, r6
 801e0b6:	f7ff fd5b 	bl	801db70 <_Balloc>
 801e0ba:	4602      	mov	r2, r0
 801e0bc:	b928      	cbnz	r0, 801e0ca <__mdiff+0x2e>
 801e0be:	4b3e      	ldr	r3, [pc, #248]	@ (801e1b8 <__mdiff+0x11c>)
 801e0c0:	f240 2137 	movw	r1, #567	@ 0x237
 801e0c4:	483d      	ldr	r0, [pc, #244]	@ (801e1bc <__mdiff+0x120>)
 801e0c6:	f000 fb4f 	bl	801e768 <__assert_func>
 801e0ca:	2301      	movs	r3, #1
 801e0cc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801e0d0:	4610      	mov	r0, r2
 801e0d2:	b003      	add	sp, #12
 801e0d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e0d8:	bfbc      	itt	lt
 801e0da:	464b      	movlt	r3, r9
 801e0dc:	46a1      	movlt	r9, r4
 801e0de:	4630      	mov	r0, r6
 801e0e0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 801e0e4:	bfba      	itte	lt
 801e0e6:	461c      	movlt	r4, r3
 801e0e8:	2501      	movlt	r5, #1
 801e0ea:	2500      	movge	r5, #0
 801e0ec:	f7ff fd40 	bl	801db70 <_Balloc>
 801e0f0:	4602      	mov	r2, r0
 801e0f2:	b918      	cbnz	r0, 801e0fc <__mdiff+0x60>
 801e0f4:	4b30      	ldr	r3, [pc, #192]	@ (801e1b8 <__mdiff+0x11c>)
 801e0f6:	f240 2145 	movw	r1, #581	@ 0x245
 801e0fa:	e7e3      	b.n	801e0c4 <__mdiff+0x28>
 801e0fc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 801e100:	6926      	ldr	r6, [r4, #16]
 801e102:	60c5      	str	r5, [r0, #12]
 801e104:	f109 0310 	add.w	r3, r9, #16
 801e108:	f109 0514 	add.w	r5, r9, #20
 801e10c:	f104 0e14 	add.w	lr, r4, #20
 801e110:	f100 0b14 	add.w	fp, r0, #20
 801e114:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 801e118:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 801e11c:	9301      	str	r3, [sp, #4]
 801e11e:	46d9      	mov	r9, fp
 801e120:	f04f 0c00 	mov.w	ip, #0
 801e124:	9b01      	ldr	r3, [sp, #4]
 801e126:	f85e 0b04 	ldr.w	r0, [lr], #4
 801e12a:	f853 af04 	ldr.w	sl, [r3, #4]!
 801e12e:	9301      	str	r3, [sp, #4]
 801e130:	b281      	uxth	r1, r0
 801e132:	fa1f f38a 	uxth.w	r3, sl
 801e136:	1a5b      	subs	r3, r3, r1
 801e138:	0c00      	lsrs	r0, r0, #16
 801e13a:	4463      	add	r3, ip
 801e13c:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 801e140:	eb00 4023 	add.w	r0, r0, r3, asr #16
 801e144:	b29b      	uxth	r3, r3
 801e146:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 801e14a:	4576      	cmp	r6, lr
 801e14c:	f849 3b04 	str.w	r3, [r9], #4
 801e150:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801e154:	d8e6      	bhi.n	801e124 <__mdiff+0x88>
 801e156:	1b33      	subs	r3, r6, r4
 801e158:	3b15      	subs	r3, #21
 801e15a:	f023 0303 	bic.w	r3, r3, #3
 801e15e:	3415      	adds	r4, #21
 801e160:	3304      	adds	r3, #4
 801e162:	42a6      	cmp	r6, r4
 801e164:	bf38      	it	cc
 801e166:	2304      	movcc	r3, #4
 801e168:	441d      	add	r5, r3
 801e16a:	445b      	add	r3, fp
 801e16c:	461e      	mov	r6, r3
 801e16e:	462c      	mov	r4, r5
 801e170:	4544      	cmp	r4, r8
 801e172:	d30e      	bcc.n	801e192 <__mdiff+0xf6>
 801e174:	f108 0103 	add.w	r1, r8, #3
 801e178:	1b49      	subs	r1, r1, r5
 801e17a:	f021 0103 	bic.w	r1, r1, #3
 801e17e:	3d03      	subs	r5, #3
 801e180:	45a8      	cmp	r8, r5
 801e182:	bf38      	it	cc
 801e184:	2100      	movcc	r1, #0
 801e186:	440b      	add	r3, r1
 801e188:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801e18c:	b191      	cbz	r1, 801e1b4 <__mdiff+0x118>
 801e18e:	6117      	str	r7, [r2, #16]
 801e190:	e79e      	b.n	801e0d0 <__mdiff+0x34>
 801e192:	f854 1b04 	ldr.w	r1, [r4], #4
 801e196:	46e6      	mov	lr, ip
 801e198:	0c08      	lsrs	r0, r1, #16
 801e19a:	fa1c fc81 	uxtah	ip, ip, r1
 801e19e:	4471      	add	r1, lr
 801e1a0:	eb00 402c 	add.w	r0, r0, ip, asr #16
 801e1a4:	b289      	uxth	r1, r1
 801e1a6:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 801e1aa:	f846 1b04 	str.w	r1, [r6], #4
 801e1ae:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801e1b2:	e7dd      	b.n	801e170 <__mdiff+0xd4>
 801e1b4:	3f01      	subs	r7, #1
 801e1b6:	e7e7      	b.n	801e188 <__mdiff+0xec>
 801e1b8:	0801fa6c 	.word	0x0801fa6c
 801e1bc:	0801fa7d 	.word	0x0801fa7d

0801e1c0 <__d2b>:
 801e1c0:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 801e1c4:	2101      	movs	r1, #1
 801e1c6:	9e08      	ldr	r6, [sp, #32]
 801e1c8:	4690      	mov	r8, r2
 801e1ca:	4699      	mov	r9, r3
 801e1cc:	f7ff fcd0 	bl	801db70 <_Balloc>
 801e1d0:	4604      	mov	r4, r0
 801e1d2:	b930      	cbnz	r0, 801e1e2 <__d2b+0x22>
 801e1d4:	4602      	mov	r2, r0
 801e1d6:	4b24      	ldr	r3, [pc, #144]	@ (801e268 <__d2b+0xa8>)
 801e1d8:	4824      	ldr	r0, [pc, #144]	@ (801e26c <__d2b+0xac>)
 801e1da:	f240 310f 	movw	r1, #783	@ 0x30f
 801e1de:	f000 fac3 	bl	801e768 <__assert_func>
 801e1e2:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801e1e6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801e1ea:	b10d      	cbz	r5, 801e1f0 <__d2b+0x30>
 801e1ec:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801e1f0:	9301      	str	r3, [sp, #4]
 801e1f2:	f1b8 0300 	subs.w	r3, r8, #0
 801e1f6:	d024      	beq.n	801e242 <__d2b+0x82>
 801e1f8:	4668      	mov	r0, sp
 801e1fa:	9300      	str	r3, [sp, #0]
 801e1fc:	f7ff fd7f 	bl	801dcfe <__lo0bits>
 801e200:	e9dd 1200 	ldrd	r1, r2, [sp]
 801e204:	b1d8      	cbz	r0, 801e23e <__d2b+0x7e>
 801e206:	f1c0 0320 	rsb	r3, r0, #32
 801e20a:	fa02 f303 	lsl.w	r3, r2, r3
 801e20e:	430b      	orrs	r3, r1
 801e210:	40c2      	lsrs	r2, r0
 801e212:	6163      	str	r3, [r4, #20]
 801e214:	9201      	str	r2, [sp, #4]
 801e216:	9b01      	ldr	r3, [sp, #4]
 801e218:	61a3      	str	r3, [r4, #24]
 801e21a:	2b00      	cmp	r3, #0
 801e21c:	bf0c      	ite	eq
 801e21e:	2201      	moveq	r2, #1
 801e220:	2202      	movne	r2, #2
 801e222:	6122      	str	r2, [r4, #16]
 801e224:	b1ad      	cbz	r5, 801e252 <__d2b+0x92>
 801e226:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 801e22a:	4405      	add	r5, r0
 801e22c:	6035      	str	r5, [r6, #0]
 801e22e:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 801e232:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e234:	6018      	str	r0, [r3, #0]
 801e236:	4620      	mov	r0, r4
 801e238:	b002      	add	sp, #8
 801e23a:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 801e23e:	6161      	str	r1, [r4, #20]
 801e240:	e7e9      	b.n	801e216 <__d2b+0x56>
 801e242:	a801      	add	r0, sp, #4
 801e244:	f7ff fd5b 	bl	801dcfe <__lo0bits>
 801e248:	9b01      	ldr	r3, [sp, #4]
 801e24a:	6163      	str	r3, [r4, #20]
 801e24c:	3020      	adds	r0, #32
 801e24e:	2201      	movs	r2, #1
 801e250:	e7e7      	b.n	801e222 <__d2b+0x62>
 801e252:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801e256:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 801e25a:	6030      	str	r0, [r6, #0]
 801e25c:	6918      	ldr	r0, [r3, #16]
 801e25e:	f7ff fd2f 	bl	801dcc0 <__hi0bits>
 801e262:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801e266:	e7e4      	b.n	801e232 <__d2b+0x72>
 801e268:	0801fa6c 	.word	0x0801fa6c
 801e26c:	0801fa7d 	.word	0x0801fa7d

0801e270 <__sfputc_r>:
 801e270:	6893      	ldr	r3, [r2, #8]
 801e272:	3b01      	subs	r3, #1
 801e274:	2b00      	cmp	r3, #0
 801e276:	b410      	push	{r4}
 801e278:	6093      	str	r3, [r2, #8]
 801e27a:	da07      	bge.n	801e28c <__sfputc_r+0x1c>
 801e27c:	6994      	ldr	r4, [r2, #24]
 801e27e:	42a3      	cmp	r3, r4
 801e280:	db01      	blt.n	801e286 <__sfputc_r+0x16>
 801e282:	290a      	cmp	r1, #10
 801e284:	d102      	bne.n	801e28c <__sfputc_r+0x1c>
 801e286:	bc10      	pop	{r4}
 801e288:	f7fe bbfd 	b.w	801ca86 <__swbuf_r>
 801e28c:	6813      	ldr	r3, [r2, #0]
 801e28e:	1c58      	adds	r0, r3, #1
 801e290:	6010      	str	r0, [r2, #0]
 801e292:	7019      	strb	r1, [r3, #0]
 801e294:	4608      	mov	r0, r1
 801e296:	bc10      	pop	{r4}
 801e298:	4770      	bx	lr

0801e29a <__sfputs_r>:
 801e29a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e29c:	4606      	mov	r6, r0
 801e29e:	460f      	mov	r7, r1
 801e2a0:	4614      	mov	r4, r2
 801e2a2:	18d5      	adds	r5, r2, r3
 801e2a4:	42ac      	cmp	r4, r5
 801e2a6:	d101      	bne.n	801e2ac <__sfputs_r+0x12>
 801e2a8:	2000      	movs	r0, #0
 801e2aa:	e007      	b.n	801e2bc <__sfputs_r+0x22>
 801e2ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e2b0:	463a      	mov	r2, r7
 801e2b2:	4630      	mov	r0, r6
 801e2b4:	f7ff ffdc 	bl	801e270 <__sfputc_r>
 801e2b8:	1c43      	adds	r3, r0, #1
 801e2ba:	d1f3      	bne.n	801e2a4 <__sfputs_r+0xa>
 801e2bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801e2c0 <_vfiprintf_r>:
 801e2c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e2c4:	460d      	mov	r5, r1
 801e2c6:	b09d      	sub	sp, #116	@ 0x74
 801e2c8:	4614      	mov	r4, r2
 801e2ca:	4698      	mov	r8, r3
 801e2cc:	4606      	mov	r6, r0
 801e2ce:	b118      	cbz	r0, 801e2d8 <_vfiprintf_r+0x18>
 801e2d0:	6a03      	ldr	r3, [r0, #32]
 801e2d2:	b90b      	cbnz	r3, 801e2d8 <_vfiprintf_r+0x18>
 801e2d4:	f7fe fb5e 	bl	801c994 <__sinit>
 801e2d8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801e2da:	07d9      	lsls	r1, r3, #31
 801e2dc:	d405      	bmi.n	801e2ea <_vfiprintf_r+0x2a>
 801e2de:	89ab      	ldrh	r3, [r5, #12]
 801e2e0:	059a      	lsls	r2, r3, #22
 801e2e2:	d402      	bmi.n	801e2ea <_vfiprintf_r+0x2a>
 801e2e4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801e2e6:	f7fe fce0 	bl	801ccaa <__retarget_lock_acquire_recursive>
 801e2ea:	89ab      	ldrh	r3, [r5, #12]
 801e2ec:	071b      	lsls	r3, r3, #28
 801e2ee:	d501      	bpl.n	801e2f4 <_vfiprintf_r+0x34>
 801e2f0:	692b      	ldr	r3, [r5, #16]
 801e2f2:	b99b      	cbnz	r3, 801e31c <_vfiprintf_r+0x5c>
 801e2f4:	4629      	mov	r1, r5
 801e2f6:	4630      	mov	r0, r6
 801e2f8:	f7fe fc04 	bl	801cb04 <__swsetup_r>
 801e2fc:	b170      	cbz	r0, 801e31c <_vfiprintf_r+0x5c>
 801e2fe:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801e300:	07dc      	lsls	r4, r3, #31
 801e302:	d504      	bpl.n	801e30e <_vfiprintf_r+0x4e>
 801e304:	f04f 30ff 	mov.w	r0, #4294967295
 801e308:	b01d      	add	sp, #116	@ 0x74
 801e30a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e30e:	89ab      	ldrh	r3, [r5, #12]
 801e310:	0598      	lsls	r0, r3, #22
 801e312:	d4f7      	bmi.n	801e304 <_vfiprintf_r+0x44>
 801e314:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801e316:	f7fe fcc9 	bl	801ccac <__retarget_lock_release_recursive>
 801e31a:	e7f3      	b.n	801e304 <_vfiprintf_r+0x44>
 801e31c:	2300      	movs	r3, #0
 801e31e:	9309      	str	r3, [sp, #36]	@ 0x24
 801e320:	2320      	movs	r3, #32
 801e322:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801e326:	f8cd 800c 	str.w	r8, [sp, #12]
 801e32a:	2330      	movs	r3, #48	@ 0x30
 801e32c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801e4dc <_vfiprintf_r+0x21c>
 801e330:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801e334:	f04f 0901 	mov.w	r9, #1
 801e338:	4623      	mov	r3, r4
 801e33a:	469a      	mov	sl, r3
 801e33c:	f813 2b01 	ldrb.w	r2, [r3], #1
 801e340:	b10a      	cbz	r2, 801e346 <_vfiprintf_r+0x86>
 801e342:	2a25      	cmp	r2, #37	@ 0x25
 801e344:	d1f9      	bne.n	801e33a <_vfiprintf_r+0x7a>
 801e346:	ebba 0b04 	subs.w	fp, sl, r4
 801e34a:	d00b      	beq.n	801e364 <_vfiprintf_r+0xa4>
 801e34c:	465b      	mov	r3, fp
 801e34e:	4622      	mov	r2, r4
 801e350:	4629      	mov	r1, r5
 801e352:	4630      	mov	r0, r6
 801e354:	f7ff ffa1 	bl	801e29a <__sfputs_r>
 801e358:	3001      	adds	r0, #1
 801e35a:	f000 80a7 	beq.w	801e4ac <_vfiprintf_r+0x1ec>
 801e35e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801e360:	445a      	add	r2, fp
 801e362:	9209      	str	r2, [sp, #36]	@ 0x24
 801e364:	f89a 3000 	ldrb.w	r3, [sl]
 801e368:	2b00      	cmp	r3, #0
 801e36a:	f000 809f 	beq.w	801e4ac <_vfiprintf_r+0x1ec>
 801e36e:	2300      	movs	r3, #0
 801e370:	f04f 32ff 	mov.w	r2, #4294967295
 801e374:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801e378:	f10a 0a01 	add.w	sl, sl, #1
 801e37c:	9304      	str	r3, [sp, #16]
 801e37e:	9307      	str	r3, [sp, #28]
 801e380:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801e384:	931a      	str	r3, [sp, #104]	@ 0x68
 801e386:	4654      	mov	r4, sl
 801e388:	2205      	movs	r2, #5
 801e38a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e38e:	4853      	ldr	r0, [pc, #332]	@ (801e4dc <_vfiprintf_r+0x21c>)
 801e390:	f7e1 fef6 	bl	8000180 <memchr>
 801e394:	9a04      	ldr	r2, [sp, #16]
 801e396:	b9d8      	cbnz	r0, 801e3d0 <_vfiprintf_r+0x110>
 801e398:	06d1      	lsls	r1, r2, #27
 801e39a:	bf44      	itt	mi
 801e39c:	2320      	movmi	r3, #32
 801e39e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801e3a2:	0713      	lsls	r3, r2, #28
 801e3a4:	bf44      	itt	mi
 801e3a6:	232b      	movmi	r3, #43	@ 0x2b
 801e3a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801e3ac:	f89a 3000 	ldrb.w	r3, [sl]
 801e3b0:	2b2a      	cmp	r3, #42	@ 0x2a
 801e3b2:	d015      	beq.n	801e3e0 <_vfiprintf_r+0x120>
 801e3b4:	9a07      	ldr	r2, [sp, #28]
 801e3b6:	4654      	mov	r4, sl
 801e3b8:	2000      	movs	r0, #0
 801e3ba:	f04f 0c0a 	mov.w	ip, #10
 801e3be:	4621      	mov	r1, r4
 801e3c0:	f811 3b01 	ldrb.w	r3, [r1], #1
 801e3c4:	3b30      	subs	r3, #48	@ 0x30
 801e3c6:	2b09      	cmp	r3, #9
 801e3c8:	d94b      	bls.n	801e462 <_vfiprintf_r+0x1a2>
 801e3ca:	b1b0      	cbz	r0, 801e3fa <_vfiprintf_r+0x13a>
 801e3cc:	9207      	str	r2, [sp, #28]
 801e3ce:	e014      	b.n	801e3fa <_vfiprintf_r+0x13a>
 801e3d0:	eba0 0308 	sub.w	r3, r0, r8
 801e3d4:	fa09 f303 	lsl.w	r3, r9, r3
 801e3d8:	4313      	orrs	r3, r2
 801e3da:	9304      	str	r3, [sp, #16]
 801e3dc:	46a2      	mov	sl, r4
 801e3de:	e7d2      	b.n	801e386 <_vfiprintf_r+0xc6>
 801e3e0:	9b03      	ldr	r3, [sp, #12]
 801e3e2:	1d19      	adds	r1, r3, #4
 801e3e4:	681b      	ldr	r3, [r3, #0]
 801e3e6:	9103      	str	r1, [sp, #12]
 801e3e8:	2b00      	cmp	r3, #0
 801e3ea:	bfbb      	ittet	lt
 801e3ec:	425b      	neglt	r3, r3
 801e3ee:	f042 0202 	orrlt.w	r2, r2, #2
 801e3f2:	9307      	strge	r3, [sp, #28]
 801e3f4:	9307      	strlt	r3, [sp, #28]
 801e3f6:	bfb8      	it	lt
 801e3f8:	9204      	strlt	r2, [sp, #16]
 801e3fa:	7823      	ldrb	r3, [r4, #0]
 801e3fc:	2b2e      	cmp	r3, #46	@ 0x2e
 801e3fe:	d10a      	bne.n	801e416 <_vfiprintf_r+0x156>
 801e400:	7863      	ldrb	r3, [r4, #1]
 801e402:	2b2a      	cmp	r3, #42	@ 0x2a
 801e404:	d132      	bne.n	801e46c <_vfiprintf_r+0x1ac>
 801e406:	9b03      	ldr	r3, [sp, #12]
 801e408:	1d1a      	adds	r2, r3, #4
 801e40a:	681b      	ldr	r3, [r3, #0]
 801e40c:	9203      	str	r2, [sp, #12]
 801e40e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801e412:	3402      	adds	r4, #2
 801e414:	9305      	str	r3, [sp, #20]
 801e416:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 801e4e0 <_vfiprintf_r+0x220>
 801e41a:	7821      	ldrb	r1, [r4, #0]
 801e41c:	2203      	movs	r2, #3
 801e41e:	4650      	mov	r0, sl
 801e420:	f7e1 feae 	bl	8000180 <memchr>
 801e424:	b138      	cbz	r0, 801e436 <_vfiprintf_r+0x176>
 801e426:	9b04      	ldr	r3, [sp, #16]
 801e428:	eba0 000a 	sub.w	r0, r0, sl
 801e42c:	2240      	movs	r2, #64	@ 0x40
 801e42e:	4082      	lsls	r2, r0
 801e430:	4313      	orrs	r3, r2
 801e432:	3401      	adds	r4, #1
 801e434:	9304      	str	r3, [sp, #16]
 801e436:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e43a:	482a      	ldr	r0, [pc, #168]	@ (801e4e4 <_vfiprintf_r+0x224>)
 801e43c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801e440:	2206      	movs	r2, #6
 801e442:	f7e1 fe9d 	bl	8000180 <memchr>
 801e446:	2800      	cmp	r0, #0
 801e448:	d03f      	beq.n	801e4ca <_vfiprintf_r+0x20a>
 801e44a:	4b27      	ldr	r3, [pc, #156]	@ (801e4e8 <_vfiprintf_r+0x228>)
 801e44c:	bb1b      	cbnz	r3, 801e496 <_vfiprintf_r+0x1d6>
 801e44e:	9b03      	ldr	r3, [sp, #12]
 801e450:	3307      	adds	r3, #7
 801e452:	f023 0307 	bic.w	r3, r3, #7
 801e456:	3308      	adds	r3, #8
 801e458:	9303      	str	r3, [sp, #12]
 801e45a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e45c:	443b      	add	r3, r7
 801e45e:	9309      	str	r3, [sp, #36]	@ 0x24
 801e460:	e76a      	b.n	801e338 <_vfiprintf_r+0x78>
 801e462:	fb0c 3202 	mla	r2, ip, r2, r3
 801e466:	460c      	mov	r4, r1
 801e468:	2001      	movs	r0, #1
 801e46a:	e7a8      	b.n	801e3be <_vfiprintf_r+0xfe>
 801e46c:	2300      	movs	r3, #0
 801e46e:	3401      	adds	r4, #1
 801e470:	9305      	str	r3, [sp, #20]
 801e472:	4619      	mov	r1, r3
 801e474:	f04f 0c0a 	mov.w	ip, #10
 801e478:	4620      	mov	r0, r4
 801e47a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801e47e:	3a30      	subs	r2, #48	@ 0x30
 801e480:	2a09      	cmp	r2, #9
 801e482:	d903      	bls.n	801e48c <_vfiprintf_r+0x1cc>
 801e484:	2b00      	cmp	r3, #0
 801e486:	d0c6      	beq.n	801e416 <_vfiprintf_r+0x156>
 801e488:	9105      	str	r1, [sp, #20]
 801e48a:	e7c4      	b.n	801e416 <_vfiprintf_r+0x156>
 801e48c:	fb0c 2101 	mla	r1, ip, r1, r2
 801e490:	4604      	mov	r4, r0
 801e492:	2301      	movs	r3, #1
 801e494:	e7f0      	b.n	801e478 <_vfiprintf_r+0x1b8>
 801e496:	ab03      	add	r3, sp, #12
 801e498:	9300      	str	r3, [sp, #0]
 801e49a:	462a      	mov	r2, r5
 801e49c:	4b13      	ldr	r3, [pc, #76]	@ (801e4ec <_vfiprintf_r+0x22c>)
 801e49e:	a904      	add	r1, sp, #16
 801e4a0:	4630      	mov	r0, r6
 801e4a2:	f7fd fe31 	bl	801c108 <_printf_float>
 801e4a6:	4607      	mov	r7, r0
 801e4a8:	1c78      	adds	r0, r7, #1
 801e4aa:	d1d6      	bne.n	801e45a <_vfiprintf_r+0x19a>
 801e4ac:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801e4ae:	07d9      	lsls	r1, r3, #31
 801e4b0:	d405      	bmi.n	801e4be <_vfiprintf_r+0x1fe>
 801e4b2:	89ab      	ldrh	r3, [r5, #12]
 801e4b4:	059a      	lsls	r2, r3, #22
 801e4b6:	d402      	bmi.n	801e4be <_vfiprintf_r+0x1fe>
 801e4b8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801e4ba:	f7fe fbf7 	bl	801ccac <__retarget_lock_release_recursive>
 801e4be:	89ab      	ldrh	r3, [r5, #12]
 801e4c0:	065b      	lsls	r3, r3, #25
 801e4c2:	f53f af1f 	bmi.w	801e304 <_vfiprintf_r+0x44>
 801e4c6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801e4c8:	e71e      	b.n	801e308 <_vfiprintf_r+0x48>
 801e4ca:	ab03      	add	r3, sp, #12
 801e4cc:	9300      	str	r3, [sp, #0]
 801e4ce:	462a      	mov	r2, r5
 801e4d0:	4b06      	ldr	r3, [pc, #24]	@ (801e4ec <_vfiprintf_r+0x22c>)
 801e4d2:	a904      	add	r1, sp, #16
 801e4d4:	4630      	mov	r0, r6
 801e4d6:	f7fe f8b1 	bl	801c63c <_printf_i>
 801e4da:	e7e4      	b.n	801e4a6 <_vfiprintf_r+0x1e6>
 801e4dc:	0801fbd8 	.word	0x0801fbd8
 801e4e0:	0801fbde 	.word	0x0801fbde
 801e4e4:	0801fbe2 	.word	0x0801fbe2
 801e4e8:	0801c109 	.word	0x0801c109
 801e4ec:	0801e29b 	.word	0x0801e29b

0801e4f0 <__sflush_r>:
 801e4f0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801e4f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e4f6:	0716      	lsls	r6, r2, #28
 801e4f8:	4605      	mov	r5, r0
 801e4fa:	460c      	mov	r4, r1
 801e4fc:	d454      	bmi.n	801e5a8 <__sflush_r+0xb8>
 801e4fe:	684b      	ldr	r3, [r1, #4]
 801e500:	2b00      	cmp	r3, #0
 801e502:	dc02      	bgt.n	801e50a <__sflush_r+0x1a>
 801e504:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801e506:	2b00      	cmp	r3, #0
 801e508:	dd48      	ble.n	801e59c <__sflush_r+0xac>
 801e50a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801e50c:	2e00      	cmp	r6, #0
 801e50e:	d045      	beq.n	801e59c <__sflush_r+0xac>
 801e510:	2300      	movs	r3, #0
 801e512:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801e516:	682f      	ldr	r7, [r5, #0]
 801e518:	6a21      	ldr	r1, [r4, #32]
 801e51a:	602b      	str	r3, [r5, #0]
 801e51c:	d030      	beq.n	801e580 <__sflush_r+0x90>
 801e51e:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801e520:	89a3      	ldrh	r3, [r4, #12]
 801e522:	0759      	lsls	r1, r3, #29
 801e524:	d505      	bpl.n	801e532 <__sflush_r+0x42>
 801e526:	6863      	ldr	r3, [r4, #4]
 801e528:	1ad2      	subs	r2, r2, r3
 801e52a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801e52c:	b10b      	cbz	r3, 801e532 <__sflush_r+0x42>
 801e52e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801e530:	1ad2      	subs	r2, r2, r3
 801e532:	2300      	movs	r3, #0
 801e534:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801e536:	6a21      	ldr	r1, [r4, #32]
 801e538:	4628      	mov	r0, r5
 801e53a:	47b0      	blx	r6
 801e53c:	1c43      	adds	r3, r0, #1
 801e53e:	89a3      	ldrh	r3, [r4, #12]
 801e540:	d106      	bne.n	801e550 <__sflush_r+0x60>
 801e542:	6829      	ldr	r1, [r5, #0]
 801e544:	291d      	cmp	r1, #29
 801e546:	d82b      	bhi.n	801e5a0 <__sflush_r+0xb0>
 801e548:	4a28      	ldr	r2, [pc, #160]	@ (801e5ec <__sflush_r+0xfc>)
 801e54a:	410a      	asrs	r2, r1
 801e54c:	07d6      	lsls	r6, r2, #31
 801e54e:	d427      	bmi.n	801e5a0 <__sflush_r+0xb0>
 801e550:	2200      	movs	r2, #0
 801e552:	6062      	str	r2, [r4, #4]
 801e554:	04d9      	lsls	r1, r3, #19
 801e556:	6922      	ldr	r2, [r4, #16]
 801e558:	6022      	str	r2, [r4, #0]
 801e55a:	d504      	bpl.n	801e566 <__sflush_r+0x76>
 801e55c:	1c42      	adds	r2, r0, #1
 801e55e:	d101      	bne.n	801e564 <__sflush_r+0x74>
 801e560:	682b      	ldr	r3, [r5, #0]
 801e562:	b903      	cbnz	r3, 801e566 <__sflush_r+0x76>
 801e564:	6560      	str	r0, [r4, #84]	@ 0x54
 801e566:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801e568:	602f      	str	r7, [r5, #0]
 801e56a:	b1b9      	cbz	r1, 801e59c <__sflush_r+0xac>
 801e56c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801e570:	4299      	cmp	r1, r3
 801e572:	d002      	beq.n	801e57a <__sflush_r+0x8a>
 801e574:	4628      	mov	r0, r5
 801e576:	f7ff f9fb 	bl	801d970 <_free_r>
 801e57a:	2300      	movs	r3, #0
 801e57c:	6363      	str	r3, [r4, #52]	@ 0x34
 801e57e:	e00d      	b.n	801e59c <__sflush_r+0xac>
 801e580:	2301      	movs	r3, #1
 801e582:	4628      	mov	r0, r5
 801e584:	47b0      	blx	r6
 801e586:	4602      	mov	r2, r0
 801e588:	1c50      	adds	r0, r2, #1
 801e58a:	d1c9      	bne.n	801e520 <__sflush_r+0x30>
 801e58c:	682b      	ldr	r3, [r5, #0]
 801e58e:	2b00      	cmp	r3, #0
 801e590:	d0c6      	beq.n	801e520 <__sflush_r+0x30>
 801e592:	2b1d      	cmp	r3, #29
 801e594:	d001      	beq.n	801e59a <__sflush_r+0xaa>
 801e596:	2b16      	cmp	r3, #22
 801e598:	d11d      	bne.n	801e5d6 <__sflush_r+0xe6>
 801e59a:	602f      	str	r7, [r5, #0]
 801e59c:	2000      	movs	r0, #0
 801e59e:	e021      	b.n	801e5e4 <__sflush_r+0xf4>
 801e5a0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801e5a4:	b21b      	sxth	r3, r3
 801e5a6:	e01a      	b.n	801e5de <__sflush_r+0xee>
 801e5a8:	690f      	ldr	r7, [r1, #16]
 801e5aa:	2f00      	cmp	r7, #0
 801e5ac:	d0f6      	beq.n	801e59c <__sflush_r+0xac>
 801e5ae:	0793      	lsls	r3, r2, #30
 801e5b0:	680e      	ldr	r6, [r1, #0]
 801e5b2:	bf08      	it	eq
 801e5b4:	694b      	ldreq	r3, [r1, #20]
 801e5b6:	600f      	str	r7, [r1, #0]
 801e5b8:	bf18      	it	ne
 801e5ba:	2300      	movne	r3, #0
 801e5bc:	1bf6      	subs	r6, r6, r7
 801e5be:	608b      	str	r3, [r1, #8]
 801e5c0:	2e00      	cmp	r6, #0
 801e5c2:	ddeb      	ble.n	801e59c <__sflush_r+0xac>
 801e5c4:	6a21      	ldr	r1, [r4, #32]
 801e5c6:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 801e5ca:	4633      	mov	r3, r6
 801e5cc:	463a      	mov	r2, r7
 801e5ce:	4628      	mov	r0, r5
 801e5d0:	47e0      	blx	ip
 801e5d2:	2800      	cmp	r0, #0
 801e5d4:	dc07      	bgt.n	801e5e6 <__sflush_r+0xf6>
 801e5d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e5da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801e5de:	81a3      	strh	r3, [r4, #12]
 801e5e0:	f04f 30ff 	mov.w	r0, #4294967295
 801e5e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e5e6:	4407      	add	r7, r0
 801e5e8:	1a36      	subs	r6, r6, r0
 801e5ea:	e7e9      	b.n	801e5c0 <__sflush_r+0xd0>
 801e5ec:	dfbffffe 	.word	0xdfbffffe

0801e5f0 <_fflush_r>:
 801e5f0:	b538      	push	{r3, r4, r5, lr}
 801e5f2:	690b      	ldr	r3, [r1, #16]
 801e5f4:	4605      	mov	r5, r0
 801e5f6:	460c      	mov	r4, r1
 801e5f8:	b913      	cbnz	r3, 801e600 <_fflush_r+0x10>
 801e5fa:	2500      	movs	r5, #0
 801e5fc:	4628      	mov	r0, r5
 801e5fe:	bd38      	pop	{r3, r4, r5, pc}
 801e600:	b118      	cbz	r0, 801e60a <_fflush_r+0x1a>
 801e602:	6a03      	ldr	r3, [r0, #32]
 801e604:	b90b      	cbnz	r3, 801e60a <_fflush_r+0x1a>
 801e606:	f7fe f9c5 	bl	801c994 <__sinit>
 801e60a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e60e:	2b00      	cmp	r3, #0
 801e610:	d0f3      	beq.n	801e5fa <_fflush_r+0xa>
 801e612:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801e614:	07d0      	lsls	r0, r2, #31
 801e616:	d404      	bmi.n	801e622 <_fflush_r+0x32>
 801e618:	0599      	lsls	r1, r3, #22
 801e61a:	d402      	bmi.n	801e622 <_fflush_r+0x32>
 801e61c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801e61e:	f7fe fb44 	bl	801ccaa <__retarget_lock_acquire_recursive>
 801e622:	4628      	mov	r0, r5
 801e624:	4621      	mov	r1, r4
 801e626:	f7ff ff63 	bl	801e4f0 <__sflush_r>
 801e62a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801e62c:	07da      	lsls	r2, r3, #31
 801e62e:	4605      	mov	r5, r0
 801e630:	d4e4      	bmi.n	801e5fc <_fflush_r+0xc>
 801e632:	89a3      	ldrh	r3, [r4, #12]
 801e634:	059b      	lsls	r3, r3, #22
 801e636:	d4e1      	bmi.n	801e5fc <_fflush_r+0xc>
 801e638:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801e63a:	f7fe fb37 	bl	801ccac <__retarget_lock_release_recursive>
 801e63e:	e7dd      	b.n	801e5fc <_fflush_r+0xc>

0801e640 <__swhatbuf_r>:
 801e640:	b570      	push	{r4, r5, r6, lr}
 801e642:	460c      	mov	r4, r1
 801e644:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e648:	2900      	cmp	r1, #0
 801e64a:	b096      	sub	sp, #88	@ 0x58
 801e64c:	4615      	mov	r5, r2
 801e64e:	461e      	mov	r6, r3
 801e650:	da0d      	bge.n	801e66e <__swhatbuf_r+0x2e>
 801e652:	89a3      	ldrh	r3, [r4, #12]
 801e654:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801e658:	f04f 0100 	mov.w	r1, #0
 801e65c:	bf14      	ite	ne
 801e65e:	2340      	movne	r3, #64	@ 0x40
 801e660:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801e664:	2000      	movs	r0, #0
 801e666:	6031      	str	r1, [r6, #0]
 801e668:	602b      	str	r3, [r5, #0]
 801e66a:	b016      	add	sp, #88	@ 0x58
 801e66c:	bd70      	pop	{r4, r5, r6, pc}
 801e66e:	466a      	mov	r2, sp
 801e670:	f000 f848 	bl	801e704 <_fstat_r>
 801e674:	2800      	cmp	r0, #0
 801e676:	dbec      	blt.n	801e652 <__swhatbuf_r+0x12>
 801e678:	9901      	ldr	r1, [sp, #4]
 801e67a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801e67e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801e682:	4259      	negs	r1, r3
 801e684:	4159      	adcs	r1, r3
 801e686:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801e68a:	e7eb      	b.n	801e664 <__swhatbuf_r+0x24>

0801e68c <__smakebuf_r>:
 801e68c:	898b      	ldrh	r3, [r1, #12]
 801e68e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801e690:	079d      	lsls	r5, r3, #30
 801e692:	4606      	mov	r6, r0
 801e694:	460c      	mov	r4, r1
 801e696:	d507      	bpl.n	801e6a8 <__smakebuf_r+0x1c>
 801e698:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801e69c:	6023      	str	r3, [r4, #0]
 801e69e:	6123      	str	r3, [r4, #16]
 801e6a0:	2301      	movs	r3, #1
 801e6a2:	6163      	str	r3, [r4, #20]
 801e6a4:	b003      	add	sp, #12
 801e6a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e6a8:	ab01      	add	r3, sp, #4
 801e6aa:	466a      	mov	r2, sp
 801e6ac:	f7ff ffc8 	bl	801e640 <__swhatbuf_r>
 801e6b0:	9f00      	ldr	r7, [sp, #0]
 801e6b2:	4605      	mov	r5, r0
 801e6b4:	4639      	mov	r1, r7
 801e6b6:	4630      	mov	r0, r6
 801e6b8:	f7ff f9ce 	bl	801da58 <_malloc_r>
 801e6bc:	b948      	cbnz	r0, 801e6d2 <__smakebuf_r+0x46>
 801e6be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e6c2:	059a      	lsls	r2, r3, #22
 801e6c4:	d4ee      	bmi.n	801e6a4 <__smakebuf_r+0x18>
 801e6c6:	f023 0303 	bic.w	r3, r3, #3
 801e6ca:	f043 0302 	orr.w	r3, r3, #2
 801e6ce:	81a3      	strh	r3, [r4, #12]
 801e6d0:	e7e2      	b.n	801e698 <__smakebuf_r+0xc>
 801e6d2:	89a3      	ldrh	r3, [r4, #12]
 801e6d4:	6020      	str	r0, [r4, #0]
 801e6d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801e6da:	81a3      	strh	r3, [r4, #12]
 801e6dc:	9b01      	ldr	r3, [sp, #4]
 801e6de:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801e6e2:	b15b      	cbz	r3, 801e6fc <__smakebuf_r+0x70>
 801e6e4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801e6e8:	4630      	mov	r0, r6
 801e6ea:	f000 f81d 	bl	801e728 <_isatty_r>
 801e6ee:	b128      	cbz	r0, 801e6fc <__smakebuf_r+0x70>
 801e6f0:	89a3      	ldrh	r3, [r4, #12]
 801e6f2:	f023 0303 	bic.w	r3, r3, #3
 801e6f6:	f043 0301 	orr.w	r3, r3, #1
 801e6fa:	81a3      	strh	r3, [r4, #12]
 801e6fc:	89a3      	ldrh	r3, [r4, #12]
 801e6fe:	431d      	orrs	r5, r3
 801e700:	81a5      	strh	r5, [r4, #12]
 801e702:	e7cf      	b.n	801e6a4 <__smakebuf_r+0x18>

0801e704 <_fstat_r>:
 801e704:	b538      	push	{r3, r4, r5, lr}
 801e706:	4d07      	ldr	r5, [pc, #28]	@ (801e724 <_fstat_r+0x20>)
 801e708:	2300      	movs	r3, #0
 801e70a:	4604      	mov	r4, r0
 801e70c:	4608      	mov	r0, r1
 801e70e:	4611      	mov	r1, r2
 801e710:	602b      	str	r3, [r5, #0]
 801e712:	f7e3 fea0 	bl	8002456 <_fstat>
 801e716:	1c43      	adds	r3, r0, #1
 801e718:	d102      	bne.n	801e720 <_fstat_r+0x1c>
 801e71a:	682b      	ldr	r3, [r5, #0]
 801e71c:	b103      	cbz	r3, 801e720 <_fstat_r+0x1c>
 801e71e:	6023      	str	r3, [r4, #0]
 801e720:	bd38      	pop	{r3, r4, r5, pc}
 801e722:	bf00      	nop
 801e724:	200024f4 	.word	0x200024f4

0801e728 <_isatty_r>:
 801e728:	b538      	push	{r3, r4, r5, lr}
 801e72a:	4d06      	ldr	r5, [pc, #24]	@ (801e744 <_isatty_r+0x1c>)
 801e72c:	2300      	movs	r3, #0
 801e72e:	4604      	mov	r4, r0
 801e730:	4608      	mov	r0, r1
 801e732:	602b      	str	r3, [r5, #0]
 801e734:	f7e3 fe9e 	bl	8002474 <_isatty>
 801e738:	1c43      	adds	r3, r0, #1
 801e73a:	d102      	bne.n	801e742 <_isatty_r+0x1a>
 801e73c:	682b      	ldr	r3, [r5, #0]
 801e73e:	b103      	cbz	r3, 801e742 <_isatty_r+0x1a>
 801e740:	6023      	str	r3, [r4, #0]
 801e742:	bd38      	pop	{r3, r4, r5, pc}
 801e744:	200024f4 	.word	0x200024f4

0801e748 <_sbrk_r>:
 801e748:	b538      	push	{r3, r4, r5, lr}
 801e74a:	4d06      	ldr	r5, [pc, #24]	@ (801e764 <_sbrk_r+0x1c>)
 801e74c:	2300      	movs	r3, #0
 801e74e:	4604      	mov	r4, r0
 801e750:	4608      	mov	r0, r1
 801e752:	602b      	str	r3, [r5, #0]
 801e754:	f7e3 fea4 	bl	80024a0 <_sbrk>
 801e758:	1c43      	adds	r3, r0, #1
 801e75a:	d102      	bne.n	801e762 <_sbrk_r+0x1a>
 801e75c:	682b      	ldr	r3, [r5, #0]
 801e75e:	b103      	cbz	r3, 801e762 <_sbrk_r+0x1a>
 801e760:	6023      	str	r3, [r4, #0]
 801e762:	bd38      	pop	{r3, r4, r5, pc}
 801e764:	200024f4 	.word	0x200024f4

0801e768 <__assert_func>:
 801e768:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801e76a:	4614      	mov	r4, r2
 801e76c:	461a      	mov	r2, r3
 801e76e:	4b09      	ldr	r3, [pc, #36]	@ (801e794 <__assert_func+0x2c>)
 801e770:	681b      	ldr	r3, [r3, #0]
 801e772:	4605      	mov	r5, r0
 801e774:	68d8      	ldr	r0, [r3, #12]
 801e776:	b954      	cbnz	r4, 801e78e <__assert_func+0x26>
 801e778:	4b07      	ldr	r3, [pc, #28]	@ (801e798 <__assert_func+0x30>)
 801e77a:	461c      	mov	r4, r3
 801e77c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801e780:	9100      	str	r1, [sp, #0]
 801e782:	462b      	mov	r3, r5
 801e784:	4905      	ldr	r1, [pc, #20]	@ (801e79c <__assert_func+0x34>)
 801e786:	f000 f841 	bl	801e80c <fiprintf>
 801e78a:	f000 f851 	bl	801e830 <abort>
 801e78e:	4b04      	ldr	r3, [pc, #16]	@ (801e7a0 <__assert_func+0x38>)
 801e790:	e7f4      	b.n	801e77c <__assert_func+0x14>
 801e792:	bf00      	nop
 801e794:	20000164 	.word	0x20000164
 801e798:	0801fc2e 	.word	0x0801fc2e
 801e79c:	0801fc00 	.word	0x0801fc00
 801e7a0:	0801fbf3 	.word	0x0801fbf3

0801e7a4 <_calloc_r>:
 801e7a4:	b570      	push	{r4, r5, r6, lr}
 801e7a6:	fba1 5402 	umull	r5, r4, r1, r2
 801e7aa:	b93c      	cbnz	r4, 801e7bc <_calloc_r+0x18>
 801e7ac:	4629      	mov	r1, r5
 801e7ae:	f7ff f953 	bl	801da58 <_malloc_r>
 801e7b2:	4606      	mov	r6, r0
 801e7b4:	b928      	cbnz	r0, 801e7c2 <_calloc_r+0x1e>
 801e7b6:	2600      	movs	r6, #0
 801e7b8:	4630      	mov	r0, r6
 801e7ba:	bd70      	pop	{r4, r5, r6, pc}
 801e7bc:	220c      	movs	r2, #12
 801e7be:	6002      	str	r2, [r0, #0]
 801e7c0:	e7f9      	b.n	801e7b6 <_calloc_r+0x12>
 801e7c2:	462a      	mov	r2, r5
 801e7c4:	4621      	mov	r1, r4
 801e7c6:	f7fe f9f3 	bl	801cbb0 <memset>
 801e7ca:	e7f5      	b.n	801e7b8 <_calloc_r+0x14>

0801e7cc <__ascii_mbtowc>:
 801e7cc:	b082      	sub	sp, #8
 801e7ce:	b901      	cbnz	r1, 801e7d2 <__ascii_mbtowc+0x6>
 801e7d0:	a901      	add	r1, sp, #4
 801e7d2:	b142      	cbz	r2, 801e7e6 <__ascii_mbtowc+0x1a>
 801e7d4:	b14b      	cbz	r3, 801e7ea <__ascii_mbtowc+0x1e>
 801e7d6:	7813      	ldrb	r3, [r2, #0]
 801e7d8:	600b      	str	r3, [r1, #0]
 801e7da:	7812      	ldrb	r2, [r2, #0]
 801e7dc:	1e10      	subs	r0, r2, #0
 801e7de:	bf18      	it	ne
 801e7e0:	2001      	movne	r0, #1
 801e7e2:	b002      	add	sp, #8
 801e7e4:	4770      	bx	lr
 801e7e6:	4610      	mov	r0, r2
 801e7e8:	e7fb      	b.n	801e7e2 <__ascii_mbtowc+0x16>
 801e7ea:	f06f 0001 	mvn.w	r0, #1
 801e7ee:	e7f8      	b.n	801e7e2 <__ascii_mbtowc+0x16>

0801e7f0 <__ascii_wctomb>:
 801e7f0:	4603      	mov	r3, r0
 801e7f2:	4608      	mov	r0, r1
 801e7f4:	b141      	cbz	r1, 801e808 <__ascii_wctomb+0x18>
 801e7f6:	2aff      	cmp	r2, #255	@ 0xff
 801e7f8:	d904      	bls.n	801e804 <__ascii_wctomb+0x14>
 801e7fa:	228a      	movs	r2, #138	@ 0x8a
 801e7fc:	601a      	str	r2, [r3, #0]
 801e7fe:	f04f 30ff 	mov.w	r0, #4294967295
 801e802:	4770      	bx	lr
 801e804:	700a      	strb	r2, [r1, #0]
 801e806:	2001      	movs	r0, #1
 801e808:	4770      	bx	lr
	...

0801e80c <fiprintf>:
 801e80c:	b40e      	push	{r1, r2, r3}
 801e80e:	b503      	push	{r0, r1, lr}
 801e810:	4601      	mov	r1, r0
 801e812:	ab03      	add	r3, sp, #12
 801e814:	4805      	ldr	r0, [pc, #20]	@ (801e82c <fiprintf+0x20>)
 801e816:	f853 2b04 	ldr.w	r2, [r3], #4
 801e81a:	6800      	ldr	r0, [r0, #0]
 801e81c:	9301      	str	r3, [sp, #4]
 801e81e:	f7ff fd4f 	bl	801e2c0 <_vfiprintf_r>
 801e822:	b002      	add	sp, #8
 801e824:	f85d eb04 	ldr.w	lr, [sp], #4
 801e828:	b003      	add	sp, #12
 801e82a:	4770      	bx	lr
 801e82c:	20000164 	.word	0x20000164

0801e830 <abort>:
 801e830:	b508      	push	{r3, lr}
 801e832:	2006      	movs	r0, #6
 801e834:	f000 f82c 	bl	801e890 <raise>
 801e838:	2001      	movs	r0, #1
 801e83a:	f7e3 fdbd 	bl	80023b8 <_exit>

0801e83e <_raise_r>:
 801e83e:	291f      	cmp	r1, #31
 801e840:	b538      	push	{r3, r4, r5, lr}
 801e842:	4605      	mov	r5, r0
 801e844:	460c      	mov	r4, r1
 801e846:	d904      	bls.n	801e852 <_raise_r+0x14>
 801e848:	2316      	movs	r3, #22
 801e84a:	6003      	str	r3, [r0, #0]
 801e84c:	f04f 30ff 	mov.w	r0, #4294967295
 801e850:	bd38      	pop	{r3, r4, r5, pc}
 801e852:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801e854:	b112      	cbz	r2, 801e85c <_raise_r+0x1e>
 801e856:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801e85a:	b94b      	cbnz	r3, 801e870 <_raise_r+0x32>
 801e85c:	4628      	mov	r0, r5
 801e85e:	f000 f831 	bl	801e8c4 <_getpid_r>
 801e862:	4622      	mov	r2, r4
 801e864:	4601      	mov	r1, r0
 801e866:	4628      	mov	r0, r5
 801e868:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801e86c:	f000 b818 	b.w	801e8a0 <_kill_r>
 801e870:	2b01      	cmp	r3, #1
 801e872:	d00a      	beq.n	801e88a <_raise_r+0x4c>
 801e874:	1c59      	adds	r1, r3, #1
 801e876:	d103      	bne.n	801e880 <_raise_r+0x42>
 801e878:	2316      	movs	r3, #22
 801e87a:	6003      	str	r3, [r0, #0]
 801e87c:	2001      	movs	r0, #1
 801e87e:	e7e7      	b.n	801e850 <_raise_r+0x12>
 801e880:	2100      	movs	r1, #0
 801e882:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801e886:	4620      	mov	r0, r4
 801e888:	4798      	blx	r3
 801e88a:	2000      	movs	r0, #0
 801e88c:	e7e0      	b.n	801e850 <_raise_r+0x12>
	...

0801e890 <raise>:
 801e890:	4b02      	ldr	r3, [pc, #8]	@ (801e89c <raise+0xc>)
 801e892:	4601      	mov	r1, r0
 801e894:	6818      	ldr	r0, [r3, #0]
 801e896:	f7ff bfd2 	b.w	801e83e <_raise_r>
 801e89a:	bf00      	nop
 801e89c:	20000164 	.word	0x20000164

0801e8a0 <_kill_r>:
 801e8a0:	b538      	push	{r3, r4, r5, lr}
 801e8a2:	4d07      	ldr	r5, [pc, #28]	@ (801e8c0 <_kill_r+0x20>)
 801e8a4:	2300      	movs	r3, #0
 801e8a6:	4604      	mov	r4, r0
 801e8a8:	4608      	mov	r0, r1
 801e8aa:	4611      	mov	r1, r2
 801e8ac:	602b      	str	r3, [r5, #0]
 801e8ae:	f7e3 fd73 	bl	8002398 <_kill>
 801e8b2:	1c43      	adds	r3, r0, #1
 801e8b4:	d102      	bne.n	801e8bc <_kill_r+0x1c>
 801e8b6:	682b      	ldr	r3, [r5, #0]
 801e8b8:	b103      	cbz	r3, 801e8bc <_kill_r+0x1c>
 801e8ba:	6023      	str	r3, [r4, #0]
 801e8bc:	bd38      	pop	{r3, r4, r5, pc}
 801e8be:	bf00      	nop
 801e8c0:	200024f4 	.word	0x200024f4

0801e8c4 <_getpid_r>:
 801e8c4:	f7e3 bd61 	b.w	800238a <_getpid>

0801e8c8 <floor>:
 801e8c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e8cc:	f3c1 570a 	ubfx	r7, r1, #20, #11
 801e8d0:	f2a7 36ff 	subw	r6, r7, #1023	@ 0x3ff
 801e8d4:	2e13      	cmp	r6, #19
 801e8d6:	4602      	mov	r2, r0
 801e8d8:	460b      	mov	r3, r1
 801e8da:	460c      	mov	r4, r1
 801e8dc:	4605      	mov	r5, r0
 801e8de:	4680      	mov	r8, r0
 801e8e0:	dc35      	bgt.n	801e94e <floor+0x86>
 801e8e2:	2e00      	cmp	r6, #0
 801e8e4:	da17      	bge.n	801e916 <floor+0x4e>
 801e8e6:	a334      	add	r3, pc, #208	@ (adr r3, 801e9b8 <floor+0xf0>)
 801e8e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e8ec:	f7e1 fca6 	bl	800023c <__adddf3>
 801e8f0:	2200      	movs	r2, #0
 801e8f2:	2300      	movs	r3, #0
 801e8f4:	f7e2 f8e8 	bl	8000ac8 <__aeabi_dcmpgt>
 801e8f8:	b150      	cbz	r0, 801e910 <floor+0x48>
 801e8fa:	2c00      	cmp	r4, #0
 801e8fc:	da57      	bge.n	801e9ae <floor+0xe6>
 801e8fe:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 801e902:	432c      	orrs	r4, r5
 801e904:	2500      	movs	r5, #0
 801e906:	42ac      	cmp	r4, r5
 801e908:	4c2d      	ldr	r4, [pc, #180]	@ (801e9c0 <floor+0xf8>)
 801e90a:	bf08      	it	eq
 801e90c:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 801e910:	4623      	mov	r3, r4
 801e912:	462a      	mov	r2, r5
 801e914:	e024      	b.n	801e960 <floor+0x98>
 801e916:	4f2b      	ldr	r7, [pc, #172]	@ (801e9c4 <floor+0xfc>)
 801e918:	4137      	asrs	r7, r6
 801e91a:	ea01 0c07 	and.w	ip, r1, r7
 801e91e:	ea5c 0c00 	orrs.w	ip, ip, r0
 801e922:	d01d      	beq.n	801e960 <floor+0x98>
 801e924:	a324      	add	r3, pc, #144	@ (adr r3, 801e9b8 <floor+0xf0>)
 801e926:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e92a:	f7e1 fc87 	bl	800023c <__adddf3>
 801e92e:	2200      	movs	r2, #0
 801e930:	2300      	movs	r3, #0
 801e932:	f7e2 f8c9 	bl	8000ac8 <__aeabi_dcmpgt>
 801e936:	2800      	cmp	r0, #0
 801e938:	d0ea      	beq.n	801e910 <floor+0x48>
 801e93a:	2c00      	cmp	r4, #0
 801e93c:	bfbe      	ittt	lt
 801e93e:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 801e942:	4133      	asrlt	r3, r6
 801e944:	18e4      	addlt	r4, r4, r3
 801e946:	ea24 0407 	bic.w	r4, r4, r7
 801e94a:	2500      	movs	r5, #0
 801e94c:	e7e0      	b.n	801e910 <floor+0x48>
 801e94e:	2e33      	cmp	r6, #51	@ 0x33
 801e950:	dd0a      	ble.n	801e968 <floor+0xa0>
 801e952:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 801e956:	d103      	bne.n	801e960 <floor+0x98>
 801e958:	f7e1 fc70 	bl	800023c <__adddf3>
 801e95c:	4602      	mov	r2, r0
 801e95e:	460b      	mov	r3, r1
 801e960:	4610      	mov	r0, r2
 801e962:	4619      	mov	r1, r3
 801e964:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e968:	f2a7 4713 	subw	r7, r7, #1043	@ 0x413
 801e96c:	f04f 3cff 	mov.w	ip, #4294967295
 801e970:	fa2c f707 	lsr.w	r7, ip, r7
 801e974:	4207      	tst	r7, r0
 801e976:	d0f3      	beq.n	801e960 <floor+0x98>
 801e978:	a30f      	add	r3, pc, #60	@ (adr r3, 801e9b8 <floor+0xf0>)
 801e97a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e97e:	f7e1 fc5d 	bl	800023c <__adddf3>
 801e982:	2200      	movs	r2, #0
 801e984:	2300      	movs	r3, #0
 801e986:	f7e2 f89f 	bl	8000ac8 <__aeabi_dcmpgt>
 801e98a:	2800      	cmp	r0, #0
 801e98c:	d0c0      	beq.n	801e910 <floor+0x48>
 801e98e:	2c00      	cmp	r4, #0
 801e990:	da0a      	bge.n	801e9a8 <floor+0xe0>
 801e992:	2e14      	cmp	r6, #20
 801e994:	d101      	bne.n	801e99a <floor+0xd2>
 801e996:	3401      	adds	r4, #1
 801e998:	e006      	b.n	801e9a8 <floor+0xe0>
 801e99a:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 801e99e:	2301      	movs	r3, #1
 801e9a0:	40b3      	lsls	r3, r6
 801e9a2:	441d      	add	r5, r3
 801e9a4:	4545      	cmp	r5, r8
 801e9a6:	d3f6      	bcc.n	801e996 <floor+0xce>
 801e9a8:	ea25 0507 	bic.w	r5, r5, r7
 801e9ac:	e7b0      	b.n	801e910 <floor+0x48>
 801e9ae:	2500      	movs	r5, #0
 801e9b0:	462c      	mov	r4, r5
 801e9b2:	e7ad      	b.n	801e910 <floor+0x48>
 801e9b4:	f3af 8000 	nop.w
 801e9b8:	8800759c 	.word	0x8800759c
 801e9bc:	7e37e43c 	.word	0x7e37e43c
 801e9c0:	bff00000 	.word	0xbff00000
 801e9c4:	000fffff 	.word	0x000fffff

0801e9c8 <_init>:
 801e9c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e9ca:	bf00      	nop
 801e9cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801e9ce:	bc08      	pop	{r3}
 801e9d0:	469e      	mov	lr, r3
 801e9d2:	4770      	bx	lr

0801e9d4 <_fini>:
 801e9d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e9d6:	bf00      	nop
 801e9d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801e9da:	bc08      	pop	{r3}
 801e9dc:	469e      	mov	lr, r3
 801e9de:	4770      	bx	lr
