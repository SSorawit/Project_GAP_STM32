
stm32_rs485_greehourse.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007bbc  08000140  08000140  00001140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000518  08007d00  08007d00  00008d00  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008218  08008218  0000a1d4  2**0
                  CONTENTS
  4 .ARM          00000008  08008218  08008218  00009218  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008220  08008220  0000a1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008220  08008220  00009220  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008224  08008224  00009224  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08008228  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002b0  200001d4  080083fc  0000a1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000484  080083fc  0000a484  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  0000a1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f44f  00000000  00000000  0000a1fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002644  00000000  00000000  0001964d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001038  00000000  00000000  0001bc98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c4c  00000000  00000000  0001ccd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a45b  00000000  00000000  0001d91c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000facf  00000000  00000000  00037d77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a007b  00000000  00000000  00047846  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e78c1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000053bc  00000000  00000000  000e7904  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  000eccc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200001d4 	.word	0x200001d4
 800015c:	00000000 	.word	0x00000000
 8000160:	08007ce4 	.word	0x08007ce4

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200001d8 	.word	0x200001d8
 800017c:	08007ce4 	.word	0x08007ce4

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	@ 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__gedf2>:
 80009cc:	f04f 3cff 	mov.w	ip, #4294967295
 80009d0:	e006      	b.n	80009e0 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__ledf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	e002      	b.n	80009e0 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__cmpdf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009f6:	d01b      	beq.n	8000a30 <__cmpdf2+0x54>
 80009f8:	b001      	add	sp, #4
 80009fa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009fe:	bf0c      	ite	eq
 8000a00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a04:	ea91 0f03 	teqne	r1, r3
 8000a08:	bf02      	ittt	eq
 8000a0a:	ea90 0f02 	teqeq	r0, r2
 8000a0e:	2000      	moveq	r0, #0
 8000a10:	4770      	bxeq	lr
 8000a12:	f110 0f00 	cmn.w	r0, #0
 8000a16:	ea91 0f03 	teq	r1, r3
 8000a1a:	bf58      	it	pl
 8000a1c:	4299      	cmppl	r1, r3
 8000a1e:	bf08      	it	eq
 8000a20:	4290      	cmpeq	r0, r2
 8000a22:	bf2c      	ite	cs
 8000a24:	17d8      	asrcs	r0, r3, #31
 8000a26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a2a:	f040 0001 	orr.w	r0, r0, #1
 8000a2e:	4770      	bx	lr
 8000a30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__cmpdf2+0x64>
 8000a3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3e:	d107      	bne.n	8000a50 <__cmpdf2+0x74>
 8000a40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d1d6      	bne.n	80009f8 <__cmpdf2+0x1c>
 8000a4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4e:	d0d3      	beq.n	80009f8 <__cmpdf2+0x1c>
 8000a50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdrcmple>:
 8000a58:	4684      	mov	ip, r0
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4662      	mov	r2, ip
 8000a5e:	468c      	mov	ip, r1
 8000a60:	4619      	mov	r1, r3
 8000a62:	4663      	mov	r3, ip
 8000a64:	e000      	b.n	8000a68 <__aeabi_cdcmpeq>
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdcmpeq>:
 8000a68:	b501      	push	{r0, lr}
 8000a6a:	f7ff ffb7 	bl	80009dc <__cmpdf2>
 8000a6e:	2800      	cmp	r0, #0
 8000a70:	bf48      	it	mi
 8000a72:	f110 0f00 	cmnmi.w	r0, #0
 8000a76:	bd01      	pop	{r0, pc}

08000a78 <__aeabi_dcmpeq>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff fff4 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a80:	bf0c      	ite	eq
 8000a82:	2001      	moveq	r0, #1
 8000a84:	2000      	movne	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmplt>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffea 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a94:	bf34      	ite	cc
 8000a96:	2001      	movcc	r0, #1
 8000a98:	2000      	movcs	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmple>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffe0 	bl	8000a68 <__aeabi_cdcmpeq>
 8000aa8:	bf94      	ite	ls
 8000aaa:	2001      	movls	r0, #1
 8000aac:	2000      	movhi	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpge>:
 8000ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab8:	f7ff ffce 	bl	8000a58 <__aeabi_cdrcmple>
 8000abc:	bf94      	ite	ls
 8000abe:	2001      	movls	r0, #1
 8000ac0:	2000      	movhi	r0, #0
 8000ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_dcmpgt>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff ffc4 	bl	8000a58 <__aeabi_cdrcmple>
 8000ad0:	bf34      	ite	cc
 8000ad2:	2001      	movcc	r0, #1
 8000ad4:	2000      	movcs	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmpun>:
 8000adc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x10>
 8000ae6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aea:	d10a      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x20>
 8000af6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afa:	d102      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	f04f 0001 	mov.w	r0, #1
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_d2iz>:
 8000b08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b0c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b10:	d215      	bcs.n	8000b3e <__aeabi_d2iz+0x36>
 8000b12:	d511      	bpl.n	8000b38 <__aeabi_d2iz+0x30>
 8000b14:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b1c:	d912      	bls.n	8000b44 <__aeabi_d2iz+0x3c>
 8000b1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b22:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b2a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b32:	bf18      	it	ne
 8000b34:	4240      	negne	r0, r0
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b42:	d105      	bne.n	8000b50 <__aeabi_d2iz+0x48>
 8000b44:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b48:	bf08      	it	eq
 8000b4a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b4e:	4770      	bx	lr
 8000b50:	f04f 0000 	mov.w	r0, #0
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_frsub>:
 8000b58:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b5c:	e002      	b.n	8000b64 <__addsf3>
 8000b5e:	bf00      	nop

08000b60 <__aeabi_fsub>:
 8000b60:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b64 <__addsf3>:
 8000b64:	0042      	lsls	r2, r0, #1
 8000b66:	bf1f      	itttt	ne
 8000b68:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b6c:	ea92 0f03 	teqne	r2, r3
 8000b70:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b74:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b78:	d06a      	beq.n	8000c50 <__addsf3+0xec>
 8000b7a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b7e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b82:	bfc1      	itttt	gt
 8000b84:	18d2      	addgt	r2, r2, r3
 8000b86:	4041      	eorgt	r1, r0
 8000b88:	4048      	eorgt	r0, r1
 8000b8a:	4041      	eorgt	r1, r0
 8000b8c:	bfb8      	it	lt
 8000b8e:	425b      	neglt	r3, r3
 8000b90:	2b19      	cmp	r3, #25
 8000b92:	bf88      	it	hi
 8000b94:	4770      	bxhi	lr
 8000b96:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b9a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b9e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000baa:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000bae:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4249      	negne	r1, r1
 8000bb6:	ea92 0f03 	teq	r2, r3
 8000bba:	d03f      	beq.n	8000c3c <__addsf3+0xd8>
 8000bbc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bc0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bc4:	eb10 000c 	adds.w	r0, r0, ip
 8000bc8:	f1c3 0320 	rsb	r3, r3, #32
 8000bcc:	fa01 f103 	lsl.w	r1, r1, r3
 8000bd0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000bd4:	d502      	bpl.n	8000bdc <__addsf3+0x78>
 8000bd6:	4249      	negs	r1, r1
 8000bd8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bdc:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000be0:	d313      	bcc.n	8000c0a <__addsf3+0xa6>
 8000be2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000be6:	d306      	bcc.n	8000bf6 <__addsf3+0x92>
 8000be8:	0840      	lsrs	r0, r0, #1
 8000bea:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bee:	f102 0201 	add.w	r2, r2, #1
 8000bf2:	2afe      	cmp	r2, #254	@ 0xfe
 8000bf4:	d251      	bcs.n	8000c9a <__addsf3+0x136>
 8000bf6:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000bfa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bfe:	bf08      	it	eq
 8000c00:	f020 0001 	biceq.w	r0, r0, #1
 8000c04:	ea40 0003 	orr.w	r0, r0, r3
 8000c08:	4770      	bx	lr
 8000c0a:	0049      	lsls	r1, r1, #1
 8000c0c:	eb40 0000 	adc.w	r0, r0, r0
 8000c10:	3a01      	subs	r2, #1
 8000c12:	bf28      	it	cs
 8000c14:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c18:	d2ed      	bcs.n	8000bf6 <__addsf3+0x92>
 8000c1a:	fab0 fc80 	clz	ip, r0
 8000c1e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c22:	ebb2 020c 	subs.w	r2, r2, ip
 8000c26:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c2a:	bfaa      	itet	ge
 8000c2c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c30:	4252      	neglt	r2, r2
 8000c32:	4318      	orrge	r0, r3
 8000c34:	bfbc      	itt	lt
 8000c36:	40d0      	lsrlt	r0, r2
 8000c38:	4318      	orrlt	r0, r3
 8000c3a:	4770      	bx	lr
 8000c3c:	f092 0f00 	teq	r2, #0
 8000c40:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c44:	bf06      	itte	eq
 8000c46:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c4a:	3201      	addeq	r2, #1
 8000c4c:	3b01      	subne	r3, #1
 8000c4e:	e7b5      	b.n	8000bbc <__addsf3+0x58>
 8000c50:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c54:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c58:	bf18      	it	ne
 8000c5a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c5e:	d021      	beq.n	8000ca4 <__addsf3+0x140>
 8000c60:	ea92 0f03 	teq	r2, r3
 8000c64:	d004      	beq.n	8000c70 <__addsf3+0x10c>
 8000c66:	f092 0f00 	teq	r2, #0
 8000c6a:	bf08      	it	eq
 8000c6c:	4608      	moveq	r0, r1
 8000c6e:	4770      	bx	lr
 8000c70:	ea90 0f01 	teq	r0, r1
 8000c74:	bf1c      	itt	ne
 8000c76:	2000      	movne	r0, #0
 8000c78:	4770      	bxne	lr
 8000c7a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c7e:	d104      	bne.n	8000c8a <__addsf3+0x126>
 8000c80:	0040      	lsls	r0, r0, #1
 8000c82:	bf28      	it	cs
 8000c84:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c88:	4770      	bx	lr
 8000c8a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c8e:	bf3c      	itt	cc
 8000c90:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bxcc	lr
 8000c96:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c9a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000c9e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ca2:	4770      	bx	lr
 8000ca4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ca8:	bf16      	itet	ne
 8000caa:	4608      	movne	r0, r1
 8000cac:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cb0:	4601      	movne	r1, r0
 8000cb2:	0242      	lsls	r2, r0, #9
 8000cb4:	bf06      	itte	eq
 8000cb6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cba:	ea90 0f01 	teqeq	r0, r1
 8000cbe:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000cc2:	4770      	bx	lr

08000cc4 <__aeabi_ui2f>:
 8000cc4:	f04f 0300 	mov.w	r3, #0
 8000cc8:	e004      	b.n	8000cd4 <__aeabi_i2f+0x8>
 8000cca:	bf00      	nop

08000ccc <__aeabi_i2f>:
 8000ccc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000cd0:	bf48      	it	mi
 8000cd2:	4240      	negmi	r0, r0
 8000cd4:	ea5f 0c00 	movs.w	ip, r0
 8000cd8:	bf08      	it	eq
 8000cda:	4770      	bxeq	lr
 8000cdc:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000ce0:	4601      	mov	r1, r0
 8000ce2:	f04f 0000 	mov.w	r0, #0
 8000ce6:	e01c      	b.n	8000d22 <__aeabi_l2f+0x2a>

08000ce8 <__aeabi_ul2f>:
 8000ce8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cec:	bf08      	it	eq
 8000cee:	4770      	bxeq	lr
 8000cf0:	f04f 0300 	mov.w	r3, #0
 8000cf4:	e00a      	b.n	8000d0c <__aeabi_l2f+0x14>
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_l2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d04:	d502      	bpl.n	8000d0c <__aeabi_l2f+0x14>
 8000d06:	4240      	negs	r0, r0
 8000d08:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d0c:	ea5f 0c01 	movs.w	ip, r1
 8000d10:	bf02      	ittt	eq
 8000d12:	4684      	moveq	ip, r0
 8000d14:	4601      	moveq	r1, r0
 8000d16:	2000      	moveq	r0, #0
 8000d18:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d1c:	bf08      	it	eq
 8000d1e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d22:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d26:	fabc f28c 	clz	r2, ip
 8000d2a:	3a08      	subs	r2, #8
 8000d2c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d30:	db10      	blt.n	8000d54 <__aeabi_l2f+0x5c>
 8000d32:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d36:	4463      	add	r3, ip
 8000d38:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d3c:	f1c2 0220 	rsb	r2, r2, #32
 8000d40:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d44:	fa20 f202 	lsr.w	r2, r0, r2
 8000d48:	eb43 0002 	adc.w	r0, r3, r2
 8000d4c:	bf08      	it	eq
 8000d4e:	f020 0001 	biceq.w	r0, r0, #1
 8000d52:	4770      	bx	lr
 8000d54:	f102 0220 	add.w	r2, r2, #32
 8000d58:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d5c:	f1c2 0220 	rsb	r2, r2, #32
 8000d60:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d64:	fa21 f202 	lsr.w	r2, r1, r2
 8000d68:	eb43 0002 	adc.w	r0, r3, r2
 8000d6c:	bf08      	it	eq
 8000d6e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d72:	4770      	bx	lr

08000d74 <__aeabi_fmul>:
 8000d74:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d78:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d7c:	bf1e      	ittt	ne
 8000d7e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d82:	ea92 0f0c 	teqne	r2, ip
 8000d86:	ea93 0f0c 	teqne	r3, ip
 8000d8a:	d06f      	beq.n	8000e6c <__aeabi_fmul+0xf8>
 8000d8c:	441a      	add	r2, r3
 8000d8e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d92:	0240      	lsls	r0, r0, #9
 8000d94:	bf18      	it	ne
 8000d96:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d9a:	d01e      	beq.n	8000dda <__aeabi_fmul+0x66>
 8000d9c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000da0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000da4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000da8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dac:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000db0:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000db4:	bf3e      	ittt	cc
 8000db6:	0049      	lslcc	r1, r1, #1
 8000db8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dbc:	005b      	lslcc	r3, r3, #1
 8000dbe:	ea40 0001 	orr.w	r0, r0, r1
 8000dc2:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000dc6:	2afd      	cmp	r2, #253	@ 0xfd
 8000dc8:	d81d      	bhi.n	8000e06 <__aeabi_fmul+0x92>
 8000dca:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000dce:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000dd2:	bf08      	it	eq
 8000dd4:	f020 0001 	biceq.w	r0, r0, #1
 8000dd8:	4770      	bx	lr
 8000dda:	f090 0f00 	teq	r0, #0
 8000dde:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000de2:	bf08      	it	eq
 8000de4:	0249      	lsleq	r1, r1, #9
 8000de6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dea:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dee:	3a7f      	subs	r2, #127	@ 0x7f
 8000df0:	bfc2      	ittt	gt
 8000df2:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000df6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dfa:	4770      	bxgt	lr
 8000dfc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e00:	f04f 0300 	mov.w	r3, #0
 8000e04:	3a01      	subs	r2, #1
 8000e06:	dc5d      	bgt.n	8000ec4 <__aeabi_fmul+0x150>
 8000e08:	f112 0f19 	cmn.w	r2, #25
 8000e0c:	bfdc      	itt	le
 8000e0e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000e12:	4770      	bxle	lr
 8000e14:	f1c2 0200 	rsb	r2, r2, #0
 8000e18:	0041      	lsls	r1, r0, #1
 8000e1a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e1e:	f1c2 0220 	rsb	r2, r2, #32
 8000e22:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e26:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e2a:	f140 0000 	adc.w	r0, r0, #0
 8000e2e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e32:	bf08      	it	eq
 8000e34:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e38:	4770      	bx	lr
 8000e3a:	f092 0f00 	teq	r2, #0
 8000e3e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e42:	bf02      	ittt	eq
 8000e44:	0040      	lsleq	r0, r0, #1
 8000e46:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e4a:	3a01      	subeq	r2, #1
 8000e4c:	d0f9      	beq.n	8000e42 <__aeabi_fmul+0xce>
 8000e4e:	ea40 000c 	orr.w	r0, r0, ip
 8000e52:	f093 0f00 	teq	r3, #0
 8000e56:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e5a:	bf02      	ittt	eq
 8000e5c:	0049      	lsleq	r1, r1, #1
 8000e5e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e62:	3b01      	subeq	r3, #1
 8000e64:	d0f9      	beq.n	8000e5a <__aeabi_fmul+0xe6>
 8000e66:	ea41 010c 	orr.w	r1, r1, ip
 8000e6a:	e78f      	b.n	8000d8c <__aeabi_fmul+0x18>
 8000e6c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e70:	ea92 0f0c 	teq	r2, ip
 8000e74:	bf18      	it	ne
 8000e76:	ea93 0f0c 	teqne	r3, ip
 8000e7a:	d00a      	beq.n	8000e92 <__aeabi_fmul+0x11e>
 8000e7c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e80:	bf18      	it	ne
 8000e82:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e86:	d1d8      	bne.n	8000e3a <__aeabi_fmul+0xc6>
 8000e88:	ea80 0001 	eor.w	r0, r0, r1
 8000e8c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e90:	4770      	bx	lr
 8000e92:	f090 0f00 	teq	r0, #0
 8000e96:	bf17      	itett	ne
 8000e98:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000e9c:	4608      	moveq	r0, r1
 8000e9e:	f091 0f00 	teqne	r1, #0
 8000ea2:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000ea6:	d014      	beq.n	8000ed2 <__aeabi_fmul+0x15e>
 8000ea8:	ea92 0f0c 	teq	r2, ip
 8000eac:	d101      	bne.n	8000eb2 <__aeabi_fmul+0x13e>
 8000eae:	0242      	lsls	r2, r0, #9
 8000eb0:	d10f      	bne.n	8000ed2 <__aeabi_fmul+0x15e>
 8000eb2:	ea93 0f0c 	teq	r3, ip
 8000eb6:	d103      	bne.n	8000ec0 <__aeabi_fmul+0x14c>
 8000eb8:	024b      	lsls	r3, r1, #9
 8000eba:	bf18      	it	ne
 8000ebc:	4608      	movne	r0, r1
 8000ebe:	d108      	bne.n	8000ed2 <__aeabi_fmul+0x15e>
 8000ec0:	ea80 0001 	eor.w	r0, r0, r1
 8000ec4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ec8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ecc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ed0:	4770      	bx	lr
 8000ed2:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ed6:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000eda:	4770      	bx	lr

08000edc <__aeabi_fdiv>:
 8000edc:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ee0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ee4:	bf1e      	ittt	ne
 8000ee6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eea:	ea92 0f0c 	teqne	r2, ip
 8000eee:	ea93 0f0c 	teqne	r3, ip
 8000ef2:	d069      	beq.n	8000fc8 <__aeabi_fdiv+0xec>
 8000ef4:	eba2 0203 	sub.w	r2, r2, r3
 8000ef8:	ea80 0c01 	eor.w	ip, r0, r1
 8000efc:	0249      	lsls	r1, r1, #9
 8000efe:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f02:	d037      	beq.n	8000f74 <__aeabi_fdiv+0x98>
 8000f04:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000f08:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f0c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f10:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000f14:	428b      	cmp	r3, r1
 8000f16:	bf38      	it	cc
 8000f18:	005b      	lslcc	r3, r3, #1
 8000f1a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000f1e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000f22:	428b      	cmp	r3, r1
 8000f24:	bf24      	itt	cs
 8000f26:	1a5b      	subcs	r3, r3, r1
 8000f28:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f2c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f30:	bf24      	itt	cs
 8000f32:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f36:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f3a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f3e:	bf24      	itt	cs
 8000f40:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f44:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f48:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f4c:	bf24      	itt	cs
 8000f4e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f52:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f56:	011b      	lsls	r3, r3, #4
 8000f58:	bf18      	it	ne
 8000f5a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f5e:	d1e0      	bne.n	8000f22 <__aeabi_fdiv+0x46>
 8000f60:	2afd      	cmp	r2, #253	@ 0xfd
 8000f62:	f63f af50 	bhi.w	8000e06 <__aeabi_fmul+0x92>
 8000f66:	428b      	cmp	r3, r1
 8000f68:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f6c:	bf08      	it	eq
 8000f6e:	f020 0001 	biceq.w	r0, r0, #1
 8000f72:	4770      	bx	lr
 8000f74:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f78:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f7c:	327f      	adds	r2, #127	@ 0x7f
 8000f7e:	bfc2      	ittt	gt
 8000f80:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f84:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f88:	4770      	bxgt	lr
 8000f8a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f8e:	f04f 0300 	mov.w	r3, #0
 8000f92:	3a01      	subs	r2, #1
 8000f94:	e737      	b.n	8000e06 <__aeabi_fmul+0x92>
 8000f96:	f092 0f00 	teq	r2, #0
 8000f9a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000f9e:	bf02      	ittt	eq
 8000fa0:	0040      	lsleq	r0, r0, #1
 8000fa2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000fa6:	3a01      	subeq	r2, #1
 8000fa8:	d0f9      	beq.n	8000f9e <__aeabi_fdiv+0xc2>
 8000faa:	ea40 000c 	orr.w	r0, r0, ip
 8000fae:	f093 0f00 	teq	r3, #0
 8000fb2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000fb6:	bf02      	ittt	eq
 8000fb8:	0049      	lsleq	r1, r1, #1
 8000fba:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000fbe:	3b01      	subeq	r3, #1
 8000fc0:	d0f9      	beq.n	8000fb6 <__aeabi_fdiv+0xda>
 8000fc2:	ea41 010c 	orr.w	r1, r1, ip
 8000fc6:	e795      	b.n	8000ef4 <__aeabi_fdiv+0x18>
 8000fc8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fcc:	ea92 0f0c 	teq	r2, ip
 8000fd0:	d108      	bne.n	8000fe4 <__aeabi_fdiv+0x108>
 8000fd2:	0242      	lsls	r2, r0, #9
 8000fd4:	f47f af7d 	bne.w	8000ed2 <__aeabi_fmul+0x15e>
 8000fd8:	ea93 0f0c 	teq	r3, ip
 8000fdc:	f47f af70 	bne.w	8000ec0 <__aeabi_fmul+0x14c>
 8000fe0:	4608      	mov	r0, r1
 8000fe2:	e776      	b.n	8000ed2 <__aeabi_fmul+0x15e>
 8000fe4:	ea93 0f0c 	teq	r3, ip
 8000fe8:	d104      	bne.n	8000ff4 <__aeabi_fdiv+0x118>
 8000fea:	024b      	lsls	r3, r1, #9
 8000fec:	f43f af4c 	beq.w	8000e88 <__aeabi_fmul+0x114>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e76e      	b.n	8000ed2 <__aeabi_fmul+0x15e>
 8000ff4:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000ff8:	bf18      	it	ne
 8000ffa:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000ffe:	d1ca      	bne.n	8000f96 <__aeabi_fdiv+0xba>
 8001000:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8001004:	f47f af5c 	bne.w	8000ec0 <__aeabi_fmul+0x14c>
 8001008:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 800100c:	f47f af3c 	bne.w	8000e88 <__aeabi_fmul+0x114>
 8001010:	e75f      	b.n	8000ed2 <__aeabi_fmul+0x15e>
 8001012:	bf00      	nop

08001014 <__aeabi_uldivmod>:
 8001014:	b953      	cbnz	r3, 800102c <__aeabi_uldivmod+0x18>
 8001016:	b94a      	cbnz	r2, 800102c <__aeabi_uldivmod+0x18>
 8001018:	2900      	cmp	r1, #0
 800101a:	bf08      	it	eq
 800101c:	2800      	cmpeq	r0, #0
 800101e:	bf1c      	itt	ne
 8001020:	f04f 31ff 	movne.w	r1, #4294967295
 8001024:	f04f 30ff 	movne.w	r0, #4294967295
 8001028:	f000 b96a 	b.w	8001300 <__aeabi_idiv0>
 800102c:	f1ad 0c08 	sub.w	ip, sp, #8
 8001030:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8001034:	f000 f806 	bl	8001044 <__udivmoddi4>
 8001038:	f8dd e004 	ldr.w	lr, [sp, #4]
 800103c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001040:	b004      	add	sp, #16
 8001042:	4770      	bx	lr

08001044 <__udivmoddi4>:
 8001044:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001048:	9d08      	ldr	r5, [sp, #32]
 800104a:	460c      	mov	r4, r1
 800104c:	2b00      	cmp	r3, #0
 800104e:	d14e      	bne.n	80010ee <__udivmoddi4+0xaa>
 8001050:	4694      	mov	ip, r2
 8001052:	458c      	cmp	ip, r1
 8001054:	4686      	mov	lr, r0
 8001056:	fab2 f282 	clz	r2, r2
 800105a:	d962      	bls.n	8001122 <__udivmoddi4+0xde>
 800105c:	b14a      	cbz	r2, 8001072 <__udivmoddi4+0x2e>
 800105e:	f1c2 0320 	rsb	r3, r2, #32
 8001062:	4091      	lsls	r1, r2
 8001064:	fa20 f303 	lsr.w	r3, r0, r3
 8001068:	fa0c fc02 	lsl.w	ip, ip, r2
 800106c:	4319      	orrs	r1, r3
 800106e:	fa00 fe02 	lsl.w	lr, r0, r2
 8001072:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001076:	fa1f f68c 	uxth.w	r6, ip
 800107a:	fbb1 f4f7 	udiv	r4, r1, r7
 800107e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8001082:	fb07 1114 	mls	r1, r7, r4, r1
 8001086:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800108a:	fb04 f106 	mul.w	r1, r4, r6
 800108e:	4299      	cmp	r1, r3
 8001090:	d90a      	bls.n	80010a8 <__udivmoddi4+0x64>
 8001092:	eb1c 0303 	adds.w	r3, ip, r3
 8001096:	f104 30ff 	add.w	r0, r4, #4294967295
 800109a:	f080 8112 	bcs.w	80012c2 <__udivmoddi4+0x27e>
 800109e:	4299      	cmp	r1, r3
 80010a0:	f240 810f 	bls.w	80012c2 <__udivmoddi4+0x27e>
 80010a4:	3c02      	subs	r4, #2
 80010a6:	4463      	add	r3, ip
 80010a8:	1a59      	subs	r1, r3, r1
 80010aa:	fa1f f38e 	uxth.w	r3, lr
 80010ae:	fbb1 f0f7 	udiv	r0, r1, r7
 80010b2:	fb07 1110 	mls	r1, r7, r0, r1
 80010b6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80010ba:	fb00 f606 	mul.w	r6, r0, r6
 80010be:	429e      	cmp	r6, r3
 80010c0:	d90a      	bls.n	80010d8 <__udivmoddi4+0x94>
 80010c2:	eb1c 0303 	adds.w	r3, ip, r3
 80010c6:	f100 31ff 	add.w	r1, r0, #4294967295
 80010ca:	f080 80fc 	bcs.w	80012c6 <__udivmoddi4+0x282>
 80010ce:	429e      	cmp	r6, r3
 80010d0:	f240 80f9 	bls.w	80012c6 <__udivmoddi4+0x282>
 80010d4:	4463      	add	r3, ip
 80010d6:	3802      	subs	r0, #2
 80010d8:	1b9b      	subs	r3, r3, r6
 80010da:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80010de:	2100      	movs	r1, #0
 80010e0:	b11d      	cbz	r5, 80010ea <__udivmoddi4+0xa6>
 80010e2:	40d3      	lsrs	r3, r2
 80010e4:	2200      	movs	r2, #0
 80010e6:	e9c5 3200 	strd	r3, r2, [r5]
 80010ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80010ee:	428b      	cmp	r3, r1
 80010f0:	d905      	bls.n	80010fe <__udivmoddi4+0xba>
 80010f2:	b10d      	cbz	r5, 80010f8 <__udivmoddi4+0xb4>
 80010f4:	e9c5 0100 	strd	r0, r1, [r5]
 80010f8:	2100      	movs	r1, #0
 80010fa:	4608      	mov	r0, r1
 80010fc:	e7f5      	b.n	80010ea <__udivmoddi4+0xa6>
 80010fe:	fab3 f183 	clz	r1, r3
 8001102:	2900      	cmp	r1, #0
 8001104:	d146      	bne.n	8001194 <__udivmoddi4+0x150>
 8001106:	42a3      	cmp	r3, r4
 8001108:	d302      	bcc.n	8001110 <__udivmoddi4+0xcc>
 800110a:	4290      	cmp	r0, r2
 800110c:	f0c0 80f0 	bcc.w	80012f0 <__udivmoddi4+0x2ac>
 8001110:	1a86      	subs	r6, r0, r2
 8001112:	eb64 0303 	sbc.w	r3, r4, r3
 8001116:	2001      	movs	r0, #1
 8001118:	2d00      	cmp	r5, #0
 800111a:	d0e6      	beq.n	80010ea <__udivmoddi4+0xa6>
 800111c:	e9c5 6300 	strd	r6, r3, [r5]
 8001120:	e7e3      	b.n	80010ea <__udivmoddi4+0xa6>
 8001122:	2a00      	cmp	r2, #0
 8001124:	f040 8090 	bne.w	8001248 <__udivmoddi4+0x204>
 8001128:	eba1 040c 	sub.w	r4, r1, ip
 800112c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8001130:	fa1f f78c 	uxth.w	r7, ip
 8001134:	2101      	movs	r1, #1
 8001136:	fbb4 f6f8 	udiv	r6, r4, r8
 800113a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800113e:	fb08 4416 	mls	r4, r8, r6, r4
 8001142:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8001146:	fb07 f006 	mul.w	r0, r7, r6
 800114a:	4298      	cmp	r0, r3
 800114c:	d908      	bls.n	8001160 <__udivmoddi4+0x11c>
 800114e:	eb1c 0303 	adds.w	r3, ip, r3
 8001152:	f106 34ff 	add.w	r4, r6, #4294967295
 8001156:	d202      	bcs.n	800115e <__udivmoddi4+0x11a>
 8001158:	4298      	cmp	r0, r3
 800115a:	f200 80cd 	bhi.w	80012f8 <__udivmoddi4+0x2b4>
 800115e:	4626      	mov	r6, r4
 8001160:	1a1c      	subs	r4, r3, r0
 8001162:	fa1f f38e 	uxth.w	r3, lr
 8001166:	fbb4 f0f8 	udiv	r0, r4, r8
 800116a:	fb08 4410 	mls	r4, r8, r0, r4
 800116e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8001172:	fb00 f707 	mul.w	r7, r0, r7
 8001176:	429f      	cmp	r7, r3
 8001178:	d908      	bls.n	800118c <__udivmoddi4+0x148>
 800117a:	eb1c 0303 	adds.w	r3, ip, r3
 800117e:	f100 34ff 	add.w	r4, r0, #4294967295
 8001182:	d202      	bcs.n	800118a <__udivmoddi4+0x146>
 8001184:	429f      	cmp	r7, r3
 8001186:	f200 80b0 	bhi.w	80012ea <__udivmoddi4+0x2a6>
 800118a:	4620      	mov	r0, r4
 800118c:	1bdb      	subs	r3, r3, r7
 800118e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8001192:	e7a5      	b.n	80010e0 <__udivmoddi4+0x9c>
 8001194:	f1c1 0620 	rsb	r6, r1, #32
 8001198:	408b      	lsls	r3, r1
 800119a:	fa22 f706 	lsr.w	r7, r2, r6
 800119e:	431f      	orrs	r7, r3
 80011a0:	fa20 fc06 	lsr.w	ip, r0, r6
 80011a4:	fa04 f301 	lsl.w	r3, r4, r1
 80011a8:	ea43 030c 	orr.w	r3, r3, ip
 80011ac:	40f4      	lsrs	r4, r6
 80011ae:	fa00 f801 	lsl.w	r8, r0, r1
 80011b2:	0c38      	lsrs	r0, r7, #16
 80011b4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80011b8:	fbb4 fef0 	udiv	lr, r4, r0
 80011bc:	fa1f fc87 	uxth.w	ip, r7
 80011c0:	fb00 441e 	mls	r4, r0, lr, r4
 80011c4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80011c8:	fb0e f90c 	mul.w	r9, lr, ip
 80011cc:	45a1      	cmp	r9, r4
 80011ce:	fa02 f201 	lsl.w	r2, r2, r1
 80011d2:	d90a      	bls.n	80011ea <__udivmoddi4+0x1a6>
 80011d4:	193c      	adds	r4, r7, r4
 80011d6:	f10e 3aff 	add.w	sl, lr, #4294967295
 80011da:	f080 8084 	bcs.w	80012e6 <__udivmoddi4+0x2a2>
 80011de:	45a1      	cmp	r9, r4
 80011e0:	f240 8081 	bls.w	80012e6 <__udivmoddi4+0x2a2>
 80011e4:	f1ae 0e02 	sub.w	lr, lr, #2
 80011e8:	443c      	add	r4, r7
 80011ea:	eba4 0409 	sub.w	r4, r4, r9
 80011ee:	fa1f f983 	uxth.w	r9, r3
 80011f2:	fbb4 f3f0 	udiv	r3, r4, r0
 80011f6:	fb00 4413 	mls	r4, r0, r3, r4
 80011fa:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80011fe:	fb03 fc0c 	mul.w	ip, r3, ip
 8001202:	45a4      	cmp	ip, r4
 8001204:	d907      	bls.n	8001216 <__udivmoddi4+0x1d2>
 8001206:	193c      	adds	r4, r7, r4
 8001208:	f103 30ff 	add.w	r0, r3, #4294967295
 800120c:	d267      	bcs.n	80012de <__udivmoddi4+0x29a>
 800120e:	45a4      	cmp	ip, r4
 8001210:	d965      	bls.n	80012de <__udivmoddi4+0x29a>
 8001212:	3b02      	subs	r3, #2
 8001214:	443c      	add	r4, r7
 8001216:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800121a:	fba0 9302 	umull	r9, r3, r0, r2
 800121e:	eba4 040c 	sub.w	r4, r4, ip
 8001222:	429c      	cmp	r4, r3
 8001224:	46ce      	mov	lr, r9
 8001226:	469c      	mov	ip, r3
 8001228:	d351      	bcc.n	80012ce <__udivmoddi4+0x28a>
 800122a:	d04e      	beq.n	80012ca <__udivmoddi4+0x286>
 800122c:	b155      	cbz	r5, 8001244 <__udivmoddi4+0x200>
 800122e:	ebb8 030e 	subs.w	r3, r8, lr
 8001232:	eb64 040c 	sbc.w	r4, r4, ip
 8001236:	fa04 f606 	lsl.w	r6, r4, r6
 800123a:	40cb      	lsrs	r3, r1
 800123c:	431e      	orrs	r6, r3
 800123e:	40cc      	lsrs	r4, r1
 8001240:	e9c5 6400 	strd	r6, r4, [r5]
 8001244:	2100      	movs	r1, #0
 8001246:	e750      	b.n	80010ea <__udivmoddi4+0xa6>
 8001248:	f1c2 0320 	rsb	r3, r2, #32
 800124c:	fa20 f103 	lsr.w	r1, r0, r3
 8001250:	fa0c fc02 	lsl.w	ip, ip, r2
 8001254:	fa24 f303 	lsr.w	r3, r4, r3
 8001258:	4094      	lsls	r4, r2
 800125a:	430c      	orrs	r4, r1
 800125c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8001260:	fa00 fe02 	lsl.w	lr, r0, r2
 8001264:	fa1f f78c 	uxth.w	r7, ip
 8001268:	fbb3 f0f8 	udiv	r0, r3, r8
 800126c:	fb08 3110 	mls	r1, r8, r0, r3
 8001270:	0c23      	lsrs	r3, r4, #16
 8001272:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001276:	fb00 f107 	mul.w	r1, r0, r7
 800127a:	4299      	cmp	r1, r3
 800127c:	d908      	bls.n	8001290 <__udivmoddi4+0x24c>
 800127e:	eb1c 0303 	adds.w	r3, ip, r3
 8001282:	f100 36ff 	add.w	r6, r0, #4294967295
 8001286:	d22c      	bcs.n	80012e2 <__udivmoddi4+0x29e>
 8001288:	4299      	cmp	r1, r3
 800128a:	d92a      	bls.n	80012e2 <__udivmoddi4+0x29e>
 800128c:	3802      	subs	r0, #2
 800128e:	4463      	add	r3, ip
 8001290:	1a5b      	subs	r3, r3, r1
 8001292:	b2a4      	uxth	r4, r4
 8001294:	fbb3 f1f8 	udiv	r1, r3, r8
 8001298:	fb08 3311 	mls	r3, r8, r1, r3
 800129c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80012a0:	fb01 f307 	mul.w	r3, r1, r7
 80012a4:	42a3      	cmp	r3, r4
 80012a6:	d908      	bls.n	80012ba <__udivmoddi4+0x276>
 80012a8:	eb1c 0404 	adds.w	r4, ip, r4
 80012ac:	f101 36ff 	add.w	r6, r1, #4294967295
 80012b0:	d213      	bcs.n	80012da <__udivmoddi4+0x296>
 80012b2:	42a3      	cmp	r3, r4
 80012b4:	d911      	bls.n	80012da <__udivmoddi4+0x296>
 80012b6:	3902      	subs	r1, #2
 80012b8:	4464      	add	r4, ip
 80012ba:	1ae4      	subs	r4, r4, r3
 80012bc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80012c0:	e739      	b.n	8001136 <__udivmoddi4+0xf2>
 80012c2:	4604      	mov	r4, r0
 80012c4:	e6f0      	b.n	80010a8 <__udivmoddi4+0x64>
 80012c6:	4608      	mov	r0, r1
 80012c8:	e706      	b.n	80010d8 <__udivmoddi4+0x94>
 80012ca:	45c8      	cmp	r8, r9
 80012cc:	d2ae      	bcs.n	800122c <__udivmoddi4+0x1e8>
 80012ce:	ebb9 0e02 	subs.w	lr, r9, r2
 80012d2:	eb63 0c07 	sbc.w	ip, r3, r7
 80012d6:	3801      	subs	r0, #1
 80012d8:	e7a8      	b.n	800122c <__udivmoddi4+0x1e8>
 80012da:	4631      	mov	r1, r6
 80012dc:	e7ed      	b.n	80012ba <__udivmoddi4+0x276>
 80012de:	4603      	mov	r3, r0
 80012e0:	e799      	b.n	8001216 <__udivmoddi4+0x1d2>
 80012e2:	4630      	mov	r0, r6
 80012e4:	e7d4      	b.n	8001290 <__udivmoddi4+0x24c>
 80012e6:	46d6      	mov	lr, sl
 80012e8:	e77f      	b.n	80011ea <__udivmoddi4+0x1a6>
 80012ea:	4463      	add	r3, ip
 80012ec:	3802      	subs	r0, #2
 80012ee:	e74d      	b.n	800118c <__udivmoddi4+0x148>
 80012f0:	4606      	mov	r6, r0
 80012f2:	4623      	mov	r3, r4
 80012f4:	4608      	mov	r0, r1
 80012f6:	e70f      	b.n	8001118 <__udivmoddi4+0xd4>
 80012f8:	3e02      	subs	r6, #2
 80012fa:	4463      	add	r3, ip
 80012fc:	e730      	b.n	8001160 <__udivmoddi4+0x11c>
 80012fe:	bf00      	nop

08001300 <__aeabi_idiv0>:
 8001300:	4770      	bx	lr
 8001302:	bf00      	nop

08001304 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8001304:	b480      	push	{r7}
 8001306:	b083      	sub	sp, #12
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800130c:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001310:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8001314:	f003 0301 	and.w	r3, r3, #1
 8001318:	2b00      	cmp	r3, #0
 800131a:	d013      	beq.n	8001344 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 800131c:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001320:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8001324:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001328:	2b00      	cmp	r3, #0
 800132a:	d00b      	beq.n	8001344 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 800132c:	e000      	b.n	8001330 <ITM_SendChar+0x2c>
    {
      __NOP();
 800132e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001330:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	2b00      	cmp	r3, #0
 8001338:	d0f9      	beq.n	800132e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800133a:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800133e:	687a      	ldr	r2, [r7, #4]
 8001340:	b2d2      	uxtb	r2, r2
 8001342:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8001344:	687b      	ldr	r3, [r7, #4]
}
 8001346:	4618      	mov	r0, r3
 8001348:	370c      	adds	r7, #12
 800134a:	46bd      	mov	sp, r7
 800134c:	bc80      	pop	{r7}
 800134e:	4770      	bx	lr

08001350 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001350:	b480      	push	{r7}
 8001352:	b085      	sub	sp, #20
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001358:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800135c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800135e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	4313      	orrs	r3, r2
 8001366:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001368:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800136c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	4013      	ands	r3, r2
 8001372:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001374:	68fb      	ldr	r3, [r7, #12]
}
 8001376:	bf00      	nop
 8001378:	3714      	adds	r7, #20
 800137a:	46bd      	mov	sp, r7
 800137c:	bc80      	pop	{r7}
 800137e:	4770      	bx	lr

08001380 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001384:	f000 fda6 	bl	8001ed4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001388:	f000 f80e 	bl	80013a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800138c:	f000 f8fa 	bl	8001584 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001390:	f000 f8a8 	bl	80014e4 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8001394:	f000 f85a 	bl	800144c <MX_USART1_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  TempHumi();
 8001398:	f000 fada 	bl	8001950 <TempHumi>
	  Lihgt();
 800139c:	f000 fb1e 	bl	80019dc <Lihgt>
	  SoilTempHumi();
 80013a0:	f000 fb62 	bl	8001a68 <SoilTempHumi>
	  TempHumi();
 80013a4:	bf00      	nop
 80013a6:	e7f7      	b.n	8001398 <main+0x18>

080013a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b09a      	sub	sp, #104	@ 0x68
 80013ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013ae:	f107 0320 	add.w	r3, r7, #32
 80013b2:	2248      	movs	r2, #72	@ 0x48
 80013b4:	2100      	movs	r1, #0
 80013b6:	4618      	mov	r0, r3
 80013b8:	f004 fe0a 	bl	8005fd0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013bc:	f107 0308 	add.w	r3, r7, #8
 80013c0:	2200      	movs	r2, #0
 80013c2:	601a      	str	r2, [r3, #0]
 80013c4:	605a      	str	r2, [r3, #4]
 80013c6:	609a      	str	r2, [r3, #8]
 80013c8:	60da      	str	r2, [r3, #12]
 80013ca:	611a      	str	r2, [r3, #16]
 80013cc:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80013ce:	4b1e      	ldr	r3, [pc, #120]	@ (8001448 <SystemClock_Config+0xa0>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80013d6:	4a1c      	ldr	r2, [pc, #112]	@ (8001448 <SystemClock_Config+0xa0>)
 80013d8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80013dc:	6013      	str	r3, [r2, #0]
 80013de:	4b1a      	ldr	r3, [pc, #104]	@ (8001448 <SystemClock_Config+0xa0>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80013e6:	607b      	str	r3, [r7, #4]
 80013e8:	687b      	ldr	r3, [r7, #4]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80013ea:	2302      	movs	r3, #2
 80013ec:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013ee:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80013f2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80013f4:	2340      	movs	r3, #64	@ 0x40
 80013f6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80013f8:	2300      	movs	r3, #0
 80013fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013fc:	f107 0320 	add.w	r3, r7, #32
 8001400:	4618      	mov	r0, r3
 8001402:	f001 fbeb 	bl	8002bdc <HAL_RCC_OscConfig>
 8001406:	4603      	mov	r3, r0
 8001408:	2b00      	cmp	r3, #0
 800140a:	d001      	beq.n	8001410 <SystemClock_Config+0x68>
  {
    Error_Handler();
 800140c:	f000 fb72 	bl	8001af4 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 8001410:	234f      	movs	r3, #79	@ 0x4f
 8001412:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001414:	2301      	movs	r3, #1
 8001416:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001418:	2300      	movs	r3, #0
 800141a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800141c:	2300      	movs	r3, #0
 800141e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001420:	2300      	movs	r3, #0
 8001422:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 8001424:	2300      	movs	r3, #0
 8001426:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001428:	f107 0308 	add.w	r3, r7, #8
 800142c:	2100      	movs	r1, #0
 800142e:	4618      	mov	r0, r3
 8001430:	f001 ff56 	bl	80032e0 <HAL_RCC_ClockConfig>
 8001434:	4603      	mov	r3, r0
 8001436:	2b00      	cmp	r3, #0
 8001438:	d001      	beq.n	800143e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800143a:	f000 fb5b 	bl	8001af4 <Error_Handler>
  }
}
 800143e:	bf00      	nop
 8001440:	3768      	adds	r7, #104	@ 0x68
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	58000400 	.word	0x58000400

0800144c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001450:	4b22      	ldr	r3, [pc, #136]	@ (80014dc <MX_USART1_UART_Init+0x90>)
 8001452:	4a23      	ldr	r2, [pc, #140]	@ (80014e0 <MX_USART1_UART_Init+0x94>)
 8001454:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001456:	4b21      	ldr	r3, [pc, #132]	@ (80014dc <MX_USART1_UART_Init+0x90>)
 8001458:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 800145c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800145e:	4b1f      	ldr	r3, [pc, #124]	@ (80014dc <MX_USART1_UART_Init+0x90>)
 8001460:	2200      	movs	r2, #0
 8001462:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001464:	4b1d      	ldr	r3, [pc, #116]	@ (80014dc <MX_USART1_UART_Init+0x90>)
 8001466:	2200      	movs	r2, #0
 8001468:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800146a:	4b1c      	ldr	r3, [pc, #112]	@ (80014dc <MX_USART1_UART_Init+0x90>)
 800146c:	2200      	movs	r2, #0
 800146e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001470:	4b1a      	ldr	r3, [pc, #104]	@ (80014dc <MX_USART1_UART_Init+0x90>)
 8001472:	220c      	movs	r2, #12
 8001474:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001476:	4b19      	ldr	r3, [pc, #100]	@ (80014dc <MX_USART1_UART_Init+0x90>)
 8001478:	2200      	movs	r2, #0
 800147a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800147c:	4b17      	ldr	r3, [pc, #92]	@ (80014dc <MX_USART1_UART_Init+0x90>)
 800147e:	2200      	movs	r2, #0
 8001480:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001482:	4b16      	ldr	r3, [pc, #88]	@ (80014dc <MX_USART1_UART_Init+0x90>)
 8001484:	2200      	movs	r2, #0
 8001486:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001488:	4b14      	ldr	r3, [pc, #80]	@ (80014dc <MX_USART1_UART_Init+0x90>)
 800148a:	2200      	movs	r2, #0
 800148c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800148e:	4b13      	ldr	r3, [pc, #76]	@ (80014dc <MX_USART1_UART_Init+0x90>)
 8001490:	2200      	movs	r2, #0
 8001492:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001494:	4811      	ldr	r0, [pc, #68]	@ (80014dc <MX_USART1_UART_Init+0x90>)
 8001496:	f002 fc00 	bl	8003c9a <HAL_UART_Init>
 800149a:	4603      	mov	r3, r0
 800149c:	2b00      	cmp	r3, #0
 800149e:	d001      	beq.n	80014a4 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80014a0:	f000 fb28 	bl	8001af4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80014a4:	2100      	movs	r1, #0
 80014a6:	480d      	ldr	r0, [pc, #52]	@ (80014dc <MX_USART1_UART_Init+0x90>)
 80014a8:	f003 fe67 	bl	800517a <HAL_UARTEx_SetTxFifoThreshold>
 80014ac:	4603      	mov	r3, r0
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d001      	beq.n	80014b6 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80014b2:	f000 fb1f 	bl	8001af4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80014b6:	2100      	movs	r1, #0
 80014b8:	4808      	ldr	r0, [pc, #32]	@ (80014dc <MX_USART1_UART_Init+0x90>)
 80014ba:	f003 fe9c 	bl	80051f6 <HAL_UARTEx_SetRxFifoThreshold>
 80014be:	4603      	mov	r3, r0
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d001      	beq.n	80014c8 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80014c4:	f000 fb16 	bl	8001af4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80014c8:	4804      	ldr	r0, [pc, #16]	@ (80014dc <MX_USART1_UART_Init+0x90>)
 80014ca:	f003 fe1e 	bl	800510a <HAL_UARTEx_DisableFifoMode>
 80014ce:	4603      	mov	r3, r0
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d001      	beq.n	80014d8 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80014d4:	f000 fb0e 	bl	8001af4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80014d8:	bf00      	nop
 80014da:	bd80      	pop	{r7, pc}
 80014dc:	20000208 	.word	0x20000208
 80014e0:	40013800 	.word	0x40013800

080014e4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80014e8:	4b24      	ldr	r3, [pc, #144]	@ (800157c <MX_USART2_UART_Init+0x98>)
 80014ea:	4a25      	ldr	r2, [pc, #148]	@ (8001580 <MX_USART2_UART_Init+0x9c>)
 80014ec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80014ee:	4b23      	ldr	r3, [pc, #140]	@ (800157c <MX_USART2_UART_Init+0x98>)
 80014f0:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80014f4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80014f6:	4b21      	ldr	r3, [pc, #132]	@ (800157c <MX_USART2_UART_Init+0x98>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80014fc:	4b1f      	ldr	r3, [pc, #124]	@ (800157c <MX_USART2_UART_Init+0x98>)
 80014fe:	2200      	movs	r2, #0
 8001500:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001502:	4b1e      	ldr	r3, [pc, #120]	@ (800157c <MX_USART2_UART_Init+0x98>)
 8001504:	2200      	movs	r2, #0
 8001506:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001508:	4b1c      	ldr	r3, [pc, #112]	@ (800157c <MX_USART2_UART_Init+0x98>)
 800150a:	220c      	movs	r2, #12
 800150c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800150e:	4b1b      	ldr	r3, [pc, #108]	@ (800157c <MX_USART2_UART_Init+0x98>)
 8001510:	2200      	movs	r2, #0
 8001512:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001514:	4b19      	ldr	r3, [pc, #100]	@ (800157c <MX_USART2_UART_Init+0x98>)
 8001516:	2200      	movs	r2, #0
 8001518:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800151a:	4b18      	ldr	r3, [pc, #96]	@ (800157c <MX_USART2_UART_Init+0x98>)
 800151c:	2200      	movs	r2, #0
 800151e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001520:	4b16      	ldr	r3, [pc, #88]	@ (800157c <MX_USART2_UART_Init+0x98>)
 8001522:	2200      	movs	r2, #0
 8001524:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001526:	4b15      	ldr	r3, [pc, #84]	@ (800157c <MX_USART2_UART_Init+0x98>)
 8001528:	2200      	movs	r2, #0
 800152a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RS485Ex_Init(&huart2, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 800152c:	2300      	movs	r3, #0
 800152e:	2200      	movs	r2, #0
 8001530:	2100      	movs	r1, #0
 8001532:	4812      	ldr	r0, [pc, #72]	@ (800157c <MX_USART2_UART_Init+0x98>)
 8001534:	f003 fd65 	bl	8005002 <HAL_RS485Ex_Init>
 8001538:	4603      	mov	r3, r0
 800153a:	2b00      	cmp	r3, #0
 800153c:	d001      	beq.n	8001542 <MX_USART2_UART_Init+0x5e>
  {
    Error_Handler();
 800153e:	f000 fad9 	bl	8001af4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001542:	2100      	movs	r1, #0
 8001544:	480d      	ldr	r0, [pc, #52]	@ (800157c <MX_USART2_UART_Init+0x98>)
 8001546:	f003 fe18 	bl	800517a <HAL_UARTEx_SetTxFifoThreshold>
 800154a:	4603      	mov	r3, r0
 800154c:	2b00      	cmp	r3, #0
 800154e:	d001      	beq.n	8001554 <MX_USART2_UART_Init+0x70>
  {
    Error_Handler();
 8001550:	f000 fad0 	bl	8001af4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001554:	2100      	movs	r1, #0
 8001556:	4809      	ldr	r0, [pc, #36]	@ (800157c <MX_USART2_UART_Init+0x98>)
 8001558:	f003 fe4d 	bl	80051f6 <HAL_UARTEx_SetRxFifoThreshold>
 800155c:	4603      	mov	r3, r0
 800155e:	2b00      	cmp	r3, #0
 8001560:	d001      	beq.n	8001566 <MX_USART2_UART_Init+0x82>
  {
    Error_Handler();
 8001562:	f000 fac7 	bl	8001af4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001566:	4805      	ldr	r0, [pc, #20]	@ (800157c <MX_USART2_UART_Init+0x98>)
 8001568:	f003 fdcf 	bl	800510a <HAL_UARTEx_DisableFifoMode>
 800156c:	4603      	mov	r3, r0
 800156e:	2b00      	cmp	r3, #0
 8001570:	d001      	beq.n	8001576 <MX_USART2_UART_Init+0x92>
  {
    Error_Handler();
 8001572:	f000 fabf 	bl	8001af4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001576:	bf00      	nop
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	2000029c 	.word	0x2000029c
 8001580:	40004400 	.word	0x40004400

08001584 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b086      	sub	sp, #24
 8001588:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800158a:	1d3b      	adds	r3, r7, #4
 800158c:	2200      	movs	r2, #0
 800158e:	601a      	str	r2, [r3, #0]
 8001590:	605a      	str	r2, [r3, #4]
 8001592:	609a      	str	r2, [r3, #8]
 8001594:	60da      	str	r2, [r3, #12]
 8001596:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001598:	2001      	movs	r0, #1
 800159a:	f7ff fed9 	bl	8001350 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800159e:	2002      	movs	r0, #2
 80015a0:	f7ff fed6 	bl	8001350 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 80015a4:	2200      	movs	r2, #0
 80015a6:	2120      	movs	r1, #32
 80015a8:	4818      	ldr	r0, [pc, #96]	@ (800160c <MX_GPIO_Init+0x88>)
 80015aa:	f001 f855 	bl	8002658 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 80015ae:	2201      	movs	r2, #1
 80015b0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80015b4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80015b8:	f001 f84e 	bl	8002658 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 80015bc:	2201      	movs	r2, #1
 80015be:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80015c2:	4812      	ldr	r0, [pc, #72]	@ (800160c <MX_GPIO_Init+0x88>)
 80015c4:	f001 f848 	bl	8002658 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB5 PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_10;
 80015c8:	f44f 6384 	mov.w	r3, #1056	@ 0x420
 80015cc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015ce:	2301      	movs	r3, #1
 80015d0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d2:	2300      	movs	r3, #0
 80015d4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015d6:	2300      	movs	r3, #0
 80015d8:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015da:	1d3b      	adds	r3, r7, #4
 80015dc:	4619      	mov	r1, r3
 80015de:	480b      	ldr	r0, [pc, #44]	@ (800160c <MX_GPIO_Init+0x88>)
 80015e0:	f000 feda 	bl	8002398 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80015e4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80015e8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015ea:	2301      	movs	r3, #1
 80015ec:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ee:	2300      	movs	r3, #0
 80015f0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015f2:	2300      	movs	r3, #0
 80015f4:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015f6:	1d3b      	adds	r3, r7, #4
 80015f8:	4619      	mov	r1, r3
 80015fa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80015fe:	f000 fecb 	bl	8002398 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001602:	bf00      	nop
 8001604:	3718      	adds	r7, #24
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	48000400 	.word	0x48000400

08001610 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len) {
 8001610:	b580      	push	{r7, lr}
 8001612:	b086      	sub	sp, #24
 8001614:	af00      	add	r7, sp, #0
 8001616:	60f8      	str	r0, [r7, #12]
 8001618:	60b9      	str	r1, [r7, #8]
 800161a:	607a      	str	r2, [r7, #4]
    for (int i = 0; i < len; i++) {
 800161c:	2300      	movs	r3, #0
 800161e:	617b      	str	r3, [r7, #20]
 8001620:	e009      	b.n	8001636 <_write+0x26>
        ITM_SendChar((*ptr++));
 8001622:	68bb      	ldr	r3, [r7, #8]
 8001624:	1c5a      	adds	r2, r3, #1
 8001626:	60ba      	str	r2, [r7, #8]
 8001628:	781b      	ldrb	r3, [r3, #0]
 800162a:	4618      	mov	r0, r3
 800162c:	f7ff fe6a 	bl	8001304 <ITM_SendChar>
    for (int i = 0; i < len; i++) {
 8001630:	697b      	ldr	r3, [r7, #20]
 8001632:	3301      	adds	r3, #1
 8001634:	617b      	str	r3, [r7, #20]
 8001636:	697a      	ldr	r2, [r7, #20]
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	429a      	cmp	r2, r3
 800163c:	dbf1      	blt.n	8001622 <_write+0x12>
    }
    return len;
 800163e:	687b      	ldr	r3, [r7, #4]
}
 8001640:	4618      	mov	r0, r3
 8001642:	3718      	adds	r7, #24
 8001644:	46bd      	mov	sp, r7
 8001646:	bd80      	pop	{r7, pc}

08001648 <Modbus_CRC16>:

uint16_t Modbus_CRC16(uint8_t *buf, uint8_t len) {
 8001648:	b480      	push	{r7}
 800164a:	b085      	sub	sp, #20
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
 8001650:	460b      	mov	r3, r1
 8001652:	70fb      	strb	r3, [r7, #3]
    uint16_t crc = 0xFFFF;
 8001654:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001658:	81fb      	strh	r3, [r7, #14]

    for (uint8_t pos = 0; pos < len; pos++) {
 800165a:	2300      	movs	r3, #0
 800165c:	737b      	strb	r3, [r7, #13]
 800165e:	e026      	b.n	80016ae <Modbus_CRC16+0x66>
        crc ^= (uint16_t)buf[pos];
 8001660:	7b7b      	ldrb	r3, [r7, #13]
 8001662:	687a      	ldr	r2, [r7, #4]
 8001664:	4413      	add	r3, r2
 8001666:	781b      	ldrb	r3, [r3, #0]
 8001668:	461a      	mov	r2, r3
 800166a:	89fb      	ldrh	r3, [r7, #14]
 800166c:	4053      	eors	r3, r2
 800166e:	81fb      	strh	r3, [r7, #14]
        for (int i = 0; i < 8; i++) {
 8001670:	2300      	movs	r3, #0
 8001672:	60bb      	str	r3, [r7, #8]
 8001674:	e015      	b.n	80016a2 <Modbus_CRC16+0x5a>
            if (crc & 0x0001) {
 8001676:	89fb      	ldrh	r3, [r7, #14]
 8001678:	f003 0301 	and.w	r3, r3, #1
 800167c:	2b00      	cmp	r3, #0
 800167e:	d00a      	beq.n	8001696 <Modbus_CRC16+0x4e>
                crc >>= 1;
 8001680:	89fb      	ldrh	r3, [r7, #14]
 8001682:	085b      	lsrs	r3, r3, #1
 8001684:	81fb      	strh	r3, [r7, #14]
                crc ^= 0xA001;
 8001686:	89fb      	ldrh	r3, [r7, #14]
 8001688:	f483 43bf 	eor.w	r3, r3, #24448	@ 0x5f80
 800168c:	f083 037e 	eor.w	r3, r3, #126	@ 0x7e
 8001690:	43db      	mvns	r3, r3
 8001692:	81fb      	strh	r3, [r7, #14]
 8001694:	e002      	b.n	800169c <Modbus_CRC16+0x54>
            } else {
                crc >>= 1;
 8001696:	89fb      	ldrh	r3, [r7, #14]
 8001698:	085b      	lsrs	r3, r3, #1
 800169a:	81fb      	strh	r3, [r7, #14]
        for (int i = 0; i < 8; i++) {
 800169c:	68bb      	ldr	r3, [r7, #8]
 800169e:	3301      	adds	r3, #1
 80016a0:	60bb      	str	r3, [r7, #8]
 80016a2:	68bb      	ldr	r3, [r7, #8]
 80016a4:	2b07      	cmp	r3, #7
 80016a6:	dde6      	ble.n	8001676 <Modbus_CRC16+0x2e>
    for (uint8_t pos = 0; pos < len; pos++) {
 80016a8:	7b7b      	ldrb	r3, [r7, #13]
 80016aa:	3301      	adds	r3, #1
 80016ac:	737b      	strb	r3, [r7, #13]
 80016ae:	7b7a      	ldrb	r2, [r7, #13]
 80016b0:	78fb      	ldrb	r3, [r7, #3]
 80016b2:	429a      	cmp	r2, r3
 80016b4:	d3d4      	bcc.n	8001660 <Modbus_CRC16+0x18>
            }
        }
    }

    return crc;
 80016b6:	89fb      	ldrh	r3, [r7, #14]
}
 80016b8:	4618      	mov	r0, r3
 80016ba:	3714      	adds	r7, #20
 80016bc:	46bd      	mov	sp, r7
 80016be:	bc80      	pop	{r7}
 80016c0:	4770      	bx	lr

080016c2 <Build_Modbus_Request>:

void Build_Modbus_Request(uint8_t slave_addr, uint16_t start_reg, uint16_t quantity, uint8_t *frame_out) {
 80016c2:	b580      	push	{r7, lr}
 80016c4:	b086      	sub	sp, #24
 80016c6:	af00      	add	r7, sp, #0
 80016c8:	607b      	str	r3, [r7, #4]
 80016ca:	4603      	mov	r3, r0
 80016cc:	73fb      	strb	r3, [r7, #15]
 80016ce:	460b      	mov	r3, r1
 80016d0:	81bb      	strh	r3, [r7, #12]
 80016d2:	4613      	mov	r3, r2
 80016d4:	817b      	strh	r3, [r7, #10]
    frame_out[0] = slave_addr;                // AA
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	7bfa      	ldrb	r2, [r7, #15]
 80016da:	701a      	strb	r2, [r3, #0]
    frame_out[1] = 0x03;                      // Function Code
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	3301      	adds	r3, #1
 80016e0:	2203      	movs	r2, #3
 80016e2:	701a      	strb	r2, [r3, #0]

    frame_out[2] = (start_reg >> 8) & 0xFF;   // RRRR (high byte)
 80016e4:	89bb      	ldrh	r3, [r7, #12]
 80016e6:	0a1b      	lsrs	r3, r3, #8
 80016e8:	b29a      	uxth	r2, r3
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	3302      	adds	r3, #2
 80016ee:	b2d2      	uxtb	r2, r2
 80016f0:	701a      	strb	r2, [r3, #0]
    frame_out[3] = start_reg & 0xFF;          // RRRR (low byte)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	3303      	adds	r3, #3
 80016f6:	89ba      	ldrh	r2, [r7, #12]
 80016f8:	b2d2      	uxtb	r2, r2
 80016fa:	701a      	strb	r2, [r3, #0]

    frame_out[4] = (quantity >> 8) & 0xFF;    // NNNN (high byte)
 80016fc:	897b      	ldrh	r3, [r7, #10]
 80016fe:	0a1b      	lsrs	r3, r3, #8
 8001700:	b29a      	uxth	r2, r3
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	3304      	adds	r3, #4
 8001706:	b2d2      	uxtb	r2, r2
 8001708:	701a      	strb	r2, [r3, #0]
    frame_out[5] = quantity & 0xFF;           // NNNN (low byte)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	3305      	adds	r3, #5
 800170e:	897a      	ldrh	r2, [r7, #10]
 8001710:	b2d2      	uxtb	r2, r2
 8001712:	701a      	strb	r2, [r3, #0]

    uint16_t crc = Modbus_CRC16(frame_out, 6);  // คำนวณ CRC จาก 6 byte แรก
 8001714:	2106      	movs	r1, #6
 8001716:	6878      	ldr	r0, [r7, #4]
 8001718:	f7ff ff96 	bl	8001648 <Modbus_CRC16>
 800171c:	4603      	mov	r3, r0
 800171e:	82fb      	strh	r3, [r7, #22]

    frame_out[6] = crc & 0xFF;               // CRC Low byte
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	3306      	adds	r3, #6
 8001724:	8afa      	ldrh	r2, [r7, #22]
 8001726:	b2d2      	uxtb	r2, r2
 8001728:	701a      	strb	r2, [r3, #0]
    frame_out[7] = (crc >> 8) & 0xFF;        // CRC High byte
 800172a:	8afb      	ldrh	r3, [r7, #22]
 800172c:	0a1b      	lsrs	r3, r3, #8
 800172e:	b29a      	uxth	r2, r3
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	3307      	adds	r3, #7
 8001734:	b2d2      	uxtb	r2, r2
 8001736:	701a      	strb	r2, [r3, #0]
}
 8001738:	bf00      	nop
 800173a:	3718      	adds	r7, #24
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}

08001740 <Decode_TempHumi>:

void Decode_TempHumi(uint8_t *rx_buf) {
 8001740:	b580      	push	{r7, lr}
 8001742:	b088      	sub	sp, #32
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
    int16_t temp_raw = (rx_buf[3] << 8) | rx_buf[4];
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	3303      	adds	r3, #3
 800174c:	781b      	ldrb	r3, [r3, #0]
 800174e:	021b      	lsls	r3, r3, #8
 8001750:	b21a      	sxth	r2, r3
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	3304      	adds	r3, #4
 8001756:	781b      	ldrb	r3, [r3, #0]
 8001758:	b21b      	sxth	r3, r3
 800175a:	4313      	orrs	r3, r2
 800175c:	83fb      	strh	r3, [r7, #30]
    uint16_t humi_raw = (rx_buf[5] << 8) | rx_buf[6];
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	3305      	adds	r3, #5
 8001762:	781b      	ldrb	r3, [r3, #0]
 8001764:	021b      	lsls	r3, r3, #8
 8001766:	b21a      	sxth	r2, r3
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	3306      	adds	r3, #6
 800176c:	781b      	ldrb	r3, [r3, #0]
 800176e:	b21b      	sxth	r3, r3
 8001770:	4313      	orrs	r3, r2
 8001772:	b21b      	sxth	r3, r3
 8001774:	83bb      	strh	r3, [r7, #28]
    int16_t dew_raw = (rx_buf[7] << 8) | rx_buf[8];
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	3307      	adds	r3, #7
 800177a:	781b      	ldrb	r3, [r3, #0]
 800177c:	021b      	lsls	r3, r3, #8
 800177e:	b21a      	sxth	r2, r3
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	3308      	adds	r3, #8
 8001784:	781b      	ldrb	r3, [r3, #0]
 8001786:	b21b      	sxth	r3, r3
 8001788:	4313      	orrs	r3, r2
 800178a:	837b      	strh	r3, [r7, #26]
    uint16_t press_raw = (rx_buf[9] << 8) | rx_buf[10];
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	3309      	adds	r3, #9
 8001790:	781b      	ldrb	r3, [r3, #0]
 8001792:	021b      	lsls	r3, r3, #8
 8001794:	b21a      	sxth	r2, r3
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	330a      	adds	r3, #10
 800179a:	781b      	ldrb	r3, [r3, #0]
 800179c:	b21b      	sxth	r3, r3
 800179e:	4313      	orrs	r3, r2
 80017a0:	b21b      	sxth	r3, r3
 80017a2:	833b      	strh	r3, [r7, #24]

    float temp_c = temp_raw / 100.0f;  // °C
 80017a4:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80017a8:	4618      	mov	r0, r3
 80017aa:	f7ff fa8f 	bl	8000ccc <__aeabi_i2f>
 80017ae:	4603      	mov	r3, r0
 80017b0:	4925      	ldr	r1, [pc, #148]	@ (8001848 <Decode_TempHumi+0x108>)
 80017b2:	4618      	mov	r0, r3
 80017b4:	f7ff fb92 	bl	8000edc <__aeabi_fdiv>
 80017b8:	4603      	mov	r3, r0
 80017ba:	617b      	str	r3, [r7, #20]
    float humidity = humi_raw / 100.0f;  // %
 80017bc:	8bbb      	ldrh	r3, [r7, #28]
 80017be:	4618      	mov	r0, r3
 80017c0:	f7ff fa84 	bl	8000ccc <__aeabi_i2f>
 80017c4:	4603      	mov	r3, r0
 80017c6:	4920      	ldr	r1, [pc, #128]	@ (8001848 <Decode_TempHumi+0x108>)
 80017c8:	4618      	mov	r0, r3
 80017ca:	f7ff fb87 	bl	8000edc <__aeabi_fdiv>
 80017ce:	4603      	mov	r3, r0
 80017d0:	613b      	str	r3, [r7, #16]
    float dewpoint_c = dew_raw / 100.0f;  // °C
 80017d2:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80017d6:	4618      	mov	r0, r3
 80017d8:	f7ff fa78 	bl	8000ccc <__aeabi_i2f>
 80017dc:	4603      	mov	r3, r0
 80017de:	491a      	ldr	r1, [pc, #104]	@ (8001848 <Decode_TempHumi+0x108>)
 80017e0:	4618      	mov	r0, r3
 80017e2:	f7ff fb7b 	bl	8000edc <__aeabi_fdiv>
 80017e6:	4603      	mov	r3, r0
 80017e8:	60fb      	str	r3, [r7, #12]
    float pressure_hpa = press_raw / 10.0f;  // hPa
 80017ea:	8b3b      	ldrh	r3, [r7, #24]
 80017ec:	4618      	mov	r0, r3
 80017ee:	f7ff fa6d 	bl	8000ccc <__aeabi_i2f>
 80017f2:	4603      	mov	r3, r0
 80017f4:	4915      	ldr	r1, [pc, #84]	@ (800184c <Decode_TempHumi+0x10c>)
 80017f6:	4618      	mov	r0, r3
 80017f8:	f7ff fb70 	bl	8000edc <__aeabi_fdiv>
 80017fc:	4603      	mov	r3, r0
 80017fe:	60bb      	str	r3, [r7, #8]

    printf("Temperature: %.2f C\r\n", temp_c);
 8001800:	6978      	ldr	r0, [r7, #20]
 8001802:	f7fe fe79 	bl	80004f8 <__aeabi_f2d>
 8001806:	4602      	mov	r2, r0
 8001808:	460b      	mov	r3, r1
 800180a:	4811      	ldr	r0, [pc, #68]	@ (8001850 <Decode_TempHumi+0x110>)
 800180c:	f004 fa98 	bl	8005d40 <iprintf>
    printf("Humidity: %.2f %%\r\n", humidity);
 8001810:	6938      	ldr	r0, [r7, #16]
 8001812:	f7fe fe71 	bl	80004f8 <__aeabi_f2d>
 8001816:	4602      	mov	r2, r0
 8001818:	460b      	mov	r3, r1
 800181a:	480e      	ldr	r0, [pc, #56]	@ (8001854 <Decode_TempHumi+0x114>)
 800181c:	f004 fa90 	bl	8005d40 <iprintf>
    printf("Dew Point: %.2f C\r\n", dewpoint_c);
 8001820:	68f8      	ldr	r0, [r7, #12]
 8001822:	f7fe fe69 	bl	80004f8 <__aeabi_f2d>
 8001826:	4602      	mov	r2, r0
 8001828:	460b      	mov	r3, r1
 800182a:	480b      	ldr	r0, [pc, #44]	@ (8001858 <Decode_TempHumi+0x118>)
 800182c:	f004 fa88 	bl	8005d40 <iprintf>
    printf("Pressure: %.1f hPa\r\n", pressure_hpa);
 8001830:	68b8      	ldr	r0, [r7, #8]
 8001832:	f7fe fe61 	bl	80004f8 <__aeabi_f2d>
 8001836:	4602      	mov	r2, r0
 8001838:	460b      	mov	r3, r1
 800183a:	4808      	ldr	r0, [pc, #32]	@ (800185c <Decode_TempHumi+0x11c>)
 800183c:	f004 fa80 	bl	8005d40 <iprintf>
}
 8001840:	bf00      	nop
 8001842:	3720      	adds	r7, #32
 8001844:	46bd      	mov	sp, r7
 8001846:	bd80      	pop	{r7, pc}
 8001848:	42c80000 	.word	0x42c80000
 800184c:	41200000 	.word	0x41200000
 8001850:	08007d00 	.word	0x08007d00
 8001854:	08007d18 	.word	0x08007d18
 8001858:	08007d2c 	.word	0x08007d2c
 800185c:	08007d40 	.word	0x08007d40

08001860 <Decode_Light>:

void Decode_Light(uint8_t *rx_buf) {
 8001860:	b580      	push	{r7, lr}
 8001862:	b084      	sub	sp, #16
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
    // อ่านค่า High และ Low 16 bits ของ Illuminance
    uint16_t lux_high = (rx_buf[3] << 8) | rx_buf[4];  // High 16 bits
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	3303      	adds	r3, #3
 800186c:	781b      	ldrb	r3, [r3, #0]
 800186e:	021b      	lsls	r3, r3, #8
 8001870:	b21a      	sxth	r2, r3
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	3304      	adds	r3, #4
 8001876:	781b      	ldrb	r3, [r3, #0]
 8001878:	b21b      	sxth	r3, r3
 800187a:	4313      	orrs	r3, r2
 800187c:	b21b      	sxth	r3, r3
 800187e:	81fb      	strh	r3, [r7, #14]
    uint16_t lux_low  = (rx_buf[5] << 8) | rx_buf[6];  // Low 16 bits
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	3305      	adds	r3, #5
 8001884:	781b      	ldrb	r3, [r3, #0]
 8001886:	021b      	lsls	r3, r3, #8
 8001888:	b21a      	sxth	r2, r3
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	3306      	adds	r3, #6
 800188e:	781b      	ldrb	r3, [r3, #0]
 8001890:	b21b      	sxth	r3, r3
 8001892:	4313      	orrs	r3, r2
 8001894:	b21b      	sxth	r3, r3
 8001896:	81bb      	strh	r3, [r7, #12]

    // รวม High และ Low 16 bits เป็น 32-bit Illuminance
    uint32_t lux = ((uint32_t)lux_high << 16) | lux_low;
 8001898:	89fb      	ldrh	r3, [r7, #14]
 800189a:	041a      	lsls	r2, r3, #16
 800189c:	89bb      	ldrh	r3, [r7, #12]
 800189e:	4313      	orrs	r3, r2
 80018a0:	60bb      	str	r3, [r7, #8]

    // แสดงผล
    printf("Illuminance: %lu lux\r\n", lux);
 80018a2:	68b9      	ldr	r1, [r7, #8]
 80018a4:	4803      	ldr	r0, [pc, #12]	@ (80018b4 <Decode_Light+0x54>)
 80018a6:	f004 fa4b 	bl	8005d40 <iprintf>
}
 80018aa:	bf00      	nop
 80018ac:	3710      	adds	r7, #16
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	08007d58 	.word	0x08007d58

080018b8 <Decode_Soil>:

void Decode_Soil(uint8_t *rx_buf) {
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b086      	sub	sp, #24
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
    // ดึง Humidity (unsigned)
    uint16_t humi_raw = (rx_buf[3] << 8) | rx_buf[4];
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	3303      	adds	r3, #3
 80018c4:	781b      	ldrb	r3, [r3, #0]
 80018c6:	021b      	lsls	r3, r3, #8
 80018c8:	b21a      	sxth	r2, r3
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	3304      	adds	r3, #4
 80018ce:	781b      	ldrb	r3, [r3, #0]
 80018d0:	b21b      	sxth	r3, r3
 80018d2:	4313      	orrs	r3, r2
 80018d4:	b21b      	sxth	r3, r3
 80018d6:	82fb      	strh	r3, [r7, #22]
    // ดึง Temperature (signed)
    int16_t temp_raw = (rx_buf[5] << 8) | rx_buf[6];
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	3305      	adds	r3, #5
 80018dc:	781b      	ldrb	r3, [r3, #0]
 80018de:	021b      	lsls	r3, r3, #8
 80018e0:	b21a      	sxth	r2, r3
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	3306      	adds	r3, #6
 80018e6:	781b      	ldrb	r3, [r3, #0]
 80018e8:	b21b      	sxth	r3, r3
 80018ea:	4313      	orrs	r3, r2
 80018ec:	82bb      	strh	r3, [r7, #20]

    // แปลงหน่วย
    float humidity = humi_raw / 10.0f;   // %RH
 80018ee:	8afb      	ldrh	r3, [r7, #22]
 80018f0:	4618      	mov	r0, r3
 80018f2:	f7ff f9eb 	bl	8000ccc <__aeabi_i2f>
 80018f6:	4603      	mov	r3, r0
 80018f8:	4912      	ldr	r1, [pc, #72]	@ (8001944 <Decode_Soil+0x8c>)
 80018fa:	4618      	mov	r0, r3
 80018fc:	f7ff faee 	bl	8000edc <__aeabi_fdiv>
 8001900:	4603      	mov	r3, r0
 8001902:	613b      	str	r3, [r7, #16]
    float temperature = temp_raw / 10.0f; // °C
 8001904:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001908:	4618      	mov	r0, r3
 800190a:	f7ff f9df 	bl	8000ccc <__aeabi_i2f>
 800190e:	4603      	mov	r3, r0
 8001910:	490c      	ldr	r1, [pc, #48]	@ (8001944 <Decode_Soil+0x8c>)
 8001912:	4618      	mov	r0, r3
 8001914:	f7ff fae2 	bl	8000edc <__aeabi_fdiv>
 8001918:	4603      	mov	r3, r0
 800191a:	60fb      	str	r3, [r7, #12]

    // แสดงผล
    printf("Humidity: %.1f %%RH\r\n", humidity);
 800191c:	6938      	ldr	r0, [r7, #16]
 800191e:	f7fe fdeb 	bl	80004f8 <__aeabi_f2d>
 8001922:	4602      	mov	r2, r0
 8001924:	460b      	mov	r3, r1
 8001926:	4808      	ldr	r0, [pc, #32]	@ (8001948 <Decode_Soil+0x90>)
 8001928:	f004 fa0a 	bl	8005d40 <iprintf>
    printf("Temperature: %.1f C\r\n", temperature);
 800192c:	68f8      	ldr	r0, [r7, #12]
 800192e:	f7fe fde3 	bl	80004f8 <__aeabi_f2d>
 8001932:	4602      	mov	r2, r0
 8001934:	460b      	mov	r3, r1
 8001936:	4805      	ldr	r0, [pc, #20]	@ (800194c <Decode_Soil+0x94>)
 8001938:	f004 fa02 	bl	8005d40 <iprintf>
}
 800193c:	bf00      	nop
 800193e:	3718      	adds	r7, #24
 8001940:	46bd      	mov	sp, r7
 8001942:	bd80      	pop	{r7, pc}
 8001944:	41200000 	.word	0x41200000
 8001948:	08007d70 	.word	0x08007d70
 800194c:	08007d88 	.word	0x08007d88

08001950 <TempHumi>:

void TempHumi() {
 8001950:	b580      	push	{r7, lr}
 8001952:	b082      	sub	sp, #8
 8001954:	af00      	add	r7, sp, #0
	Build_Modbus_Request(0x01, 0x0000, 0x0004, modbus_frame);
 8001956:	4b1b      	ldr	r3, [pc, #108]	@ (80019c4 <TempHumi+0x74>)
 8001958:	2204      	movs	r2, #4
 800195a:	2100      	movs	r1, #0
 800195c:	2001      	movs	r0, #1
 800195e:	f7ff feb0 	bl	80016c2 <Build_Modbus_Request>
	HAL_UART_Transmit(&huart1, modbus_frame, 8, 1000);
 8001962:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001966:	2208      	movs	r2, #8
 8001968:	4916      	ldr	r1, [pc, #88]	@ (80019c4 <TempHumi+0x74>)
 800196a:	4817      	ldr	r0, [pc, #92]	@ (80019c8 <TempHumi+0x78>)
 800196c:	f002 f9e5 	bl	8003d3a <HAL_UART_Transmit>
	HAL_UART_Receive(&huart1, rx_buffer, 16, 1000);
 8001970:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001974:	2210      	movs	r2, #16
 8001976:	4915      	ldr	r1, [pc, #84]	@ (80019cc <TempHumi+0x7c>)
 8001978:	4813      	ldr	r0, [pc, #76]	@ (80019c8 <TempHumi+0x78>)
 800197a:	f002 fa64 	bl	8003e46 <HAL_UART_Receive>

	printf("TEMPHUMI: ");
 800197e:	4814      	ldr	r0, [pc, #80]	@ (80019d0 <TempHumi+0x80>)
 8001980:	f004 f9de 	bl	8005d40 <iprintf>
	for (int i = 0; i < 16; i++) {
 8001984:	2300      	movs	r3, #0
 8001986:	607b      	str	r3, [r7, #4]
 8001988:	e00a      	b.n	80019a0 <TempHumi+0x50>
	    printf("%d ", rx_buffer[i]);
 800198a:	4a10      	ldr	r2, [pc, #64]	@ (80019cc <TempHumi+0x7c>)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	4413      	add	r3, r2
 8001990:	781b      	ldrb	r3, [r3, #0]
 8001992:	4619      	mov	r1, r3
 8001994:	480f      	ldr	r0, [pc, #60]	@ (80019d4 <TempHumi+0x84>)
 8001996:	f004 f9d3 	bl	8005d40 <iprintf>
	for (int i = 0; i < 16; i++) {
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	3301      	adds	r3, #1
 800199e:	607b      	str	r3, [r7, #4]
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	2b0f      	cmp	r3, #15
 80019a4:	ddf1      	ble.n	800198a <TempHumi+0x3a>
	}
    printf("\r\n");
 80019a6:	480c      	ldr	r0, [pc, #48]	@ (80019d8 <TempHumi+0x88>)
 80019a8:	f004 fa32 	bl	8005e10 <puts>

    Decode_TempHumi(rx_buffer);
 80019ac:	4807      	ldr	r0, [pc, #28]	@ (80019cc <TempHumi+0x7c>)
 80019ae:	f7ff fec7 	bl	8001740 <Decode_TempHumi>

	HAL_Delay(1000);
 80019b2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80019b6:	f000 fb03 	bl	8001fc0 <HAL_Delay>
}
 80019ba:	bf00      	nop
 80019bc:	3708      	adds	r7, #8
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	20000200 	.word	0x20000200
 80019c8:	20000208 	.word	0x20000208
 80019cc:	200001f0 	.word	0x200001f0
 80019d0:	08007da0 	.word	0x08007da0
 80019d4:	08007dac 	.word	0x08007dac
 80019d8:	08007db0 	.word	0x08007db0

080019dc <Lihgt>:

void Lihgt() {
 80019dc:	b580      	push	{r7, lr}
 80019de:	b082      	sub	sp, #8
 80019e0:	af00      	add	r7, sp, #0
	Build_Modbus_Request(0x02, 0x0000, 0x0002, modbus_frame);
 80019e2:	4b1b      	ldr	r3, [pc, #108]	@ (8001a50 <Lihgt+0x74>)
 80019e4:	2202      	movs	r2, #2
 80019e6:	2100      	movs	r1, #0
 80019e8:	2002      	movs	r0, #2
 80019ea:	f7ff fe6a 	bl	80016c2 <Build_Modbus_Request>
	HAL_UART_Transmit(&huart1, modbus_frame, 8, 1000);
 80019ee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80019f2:	2208      	movs	r2, #8
 80019f4:	4916      	ldr	r1, [pc, #88]	@ (8001a50 <Lihgt+0x74>)
 80019f6:	4817      	ldr	r0, [pc, #92]	@ (8001a54 <Lihgt+0x78>)
 80019f8:	f002 f99f 	bl	8003d3a <HAL_UART_Transmit>
	HAL_UART_Receive(&huart1, rx_buffer, 16, 1000);
 80019fc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a00:	2210      	movs	r2, #16
 8001a02:	4915      	ldr	r1, [pc, #84]	@ (8001a58 <Lihgt+0x7c>)
 8001a04:	4813      	ldr	r0, [pc, #76]	@ (8001a54 <Lihgt+0x78>)
 8001a06:	f002 fa1e 	bl	8003e46 <HAL_UART_Receive>

	printf("LiGHT: ");
 8001a0a:	4814      	ldr	r0, [pc, #80]	@ (8001a5c <Lihgt+0x80>)
 8001a0c:	f004 f998 	bl	8005d40 <iprintf>
	for (int i = 0; i < 16; i++) {
 8001a10:	2300      	movs	r3, #0
 8001a12:	607b      	str	r3, [r7, #4]
 8001a14:	e00a      	b.n	8001a2c <Lihgt+0x50>
	    printf("%d ", rx_buffer[i]);
 8001a16:	4a10      	ldr	r2, [pc, #64]	@ (8001a58 <Lihgt+0x7c>)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	4413      	add	r3, r2
 8001a1c:	781b      	ldrb	r3, [r3, #0]
 8001a1e:	4619      	mov	r1, r3
 8001a20:	480f      	ldr	r0, [pc, #60]	@ (8001a60 <Lihgt+0x84>)
 8001a22:	f004 f98d 	bl	8005d40 <iprintf>
	for (int i = 0; i < 16; i++) {
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	3301      	adds	r3, #1
 8001a2a:	607b      	str	r3, [r7, #4]
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2b0f      	cmp	r3, #15
 8001a30:	ddf1      	ble.n	8001a16 <Lihgt+0x3a>
	}
    printf("\r\n");
 8001a32:	480c      	ldr	r0, [pc, #48]	@ (8001a64 <Lihgt+0x88>)
 8001a34:	f004 f9ec 	bl	8005e10 <puts>

    Decode_Light(rx_buffer);
 8001a38:	4807      	ldr	r0, [pc, #28]	@ (8001a58 <Lihgt+0x7c>)
 8001a3a:	f7ff ff11 	bl	8001860 <Decode_Light>

	HAL_Delay(1000);
 8001a3e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001a42:	f000 fabd 	bl	8001fc0 <HAL_Delay>
}
 8001a46:	bf00      	nop
 8001a48:	3708      	adds	r7, #8
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	20000200 	.word	0x20000200
 8001a54:	20000208 	.word	0x20000208
 8001a58:	200001f0 	.word	0x200001f0
 8001a5c:	08007db4 	.word	0x08007db4
 8001a60:	08007dac 	.word	0x08007dac
 8001a64:	08007db0 	.word	0x08007db0

08001a68 <SoilTempHumi>:

void SoilTempHumi() {
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b082      	sub	sp, #8
 8001a6c:	af00      	add	r7, sp, #0
	Build_Modbus_Request(0x03, 0x0000, 0x0002, modbus_frame);
 8001a6e:	4b1b      	ldr	r3, [pc, #108]	@ (8001adc <SoilTempHumi+0x74>)
 8001a70:	2202      	movs	r2, #2
 8001a72:	2100      	movs	r1, #0
 8001a74:	2003      	movs	r0, #3
 8001a76:	f7ff fe24 	bl	80016c2 <Build_Modbus_Request>
	HAL_UART_Transmit(&huart1, modbus_frame, 8, 1000);
 8001a7a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a7e:	2208      	movs	r2, #8
 8001a80:	4916      	ldr	r1, [pc, #88]	@ (8001adc <SoilTempHumi+0x74>)
 8001a82:	4817      	ldr	r0, [pc, #92]	@ (8001ae0 <SoilTempHumi+0x78>)
 8001a84:	f002 f959 	bl	8003d3a <HAL_UART_Transmit>
	HAL_UART_Receive(&huart1, rx_buffer, 16, 1000);
 8001a88:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a8c:	2210      	movs	r2, #16
 8001a8e:	4915      	ldr	r1, [pc, #84]	@ (8001ae4 <SoilTempHumi+0x7c>)
 8001a90:	4813      	ldr	r0, [pc, #76]	@ (8001ae0 <SoilTempHumi+0x78>)
 8001a92:	f002 f9d8 	bl	8003e46 <HAL_UART_Receive>

	printf("SOIL: ");
 8001a96:	4814      	ldr	r0, [pc, #80]	@ (8001ae8 <SoilTempHumi+0x80>)
 8001a98:	f004 f952 	bl	8005d40 <iprintf>
	for (int i = 0; i < 16; i++) {
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	607b      	str	r3, [r7, #4]
 8001aa0:	e00a      	b.n	8001ab8 <SoilTempHumi+0x50>
	    printf("%d ", rx_buffer[i]);
 8001aa2:	4a10      	ldr	r2, [pc, #64]	@ (8001ae4 <SoilTempHumi+0x7c>)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	4413      	add	r3, r2
 8001aa8:	781b      	ldrb	r3, [r3, #0]
 8001aaa:	4619      	mov	r1, r3
 8001aac:	480f      	ldr	r0, [pc, #60]	@ (8001aec <SoilTempHumi+0x84>)
 8001aae:	f004 f947 	bl	8005d40 <iprintf>
	for (int i = 0; i < 16; i++) {
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	3301      	adds	r3, #1
 8001ab6:	607b      	str	r3, [r7, #4]
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2b0f      	cmp	r3, #15
 8001abc:	ddf1      	ble.n	8001aa2 <SoilTempHumi+0x3a>
	}
    printf("\r\n");
 8001abe:	480c      	ldr	r0, [pc, #48]	@ (8001af0 <SoilTempHumi+0x88>)
 8001ac0:	f004 f9a6 	bl	8005e10 <puts>

    Decode_Soil(rx_buffer);
 8001ac4:	4807      	ldr	r0, [pc, #28]	@ (8001ae4 <SoilTempHumi+0x7c>)
 8001ac6:	f7ff fef7 	bl	80018b8 <Decode_Soil>

	HAL_Delay(1000);
 8001aca:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001ace:	f000 fa77 	bl	8001fc0 <HAL_Delay>
}
 8001ad2:	bf00      	nop
 8001ad4:	3708      	adds	r7, #8
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	20000200 	.word	0x20000200
 8001ae0:	20000208 	.word	0x20000208
 8001ae4:	200001f0 	.word	0x200001f0
 8001ae8:	08007dbc 	.word	0x08007dbc
 8001aec:	08007dac 	.word	0x08007dac
 8001af0:	08007db0 	.word	0x08007db0

08001af4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001af4:	b480      	push	{r7}
 8001af6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001af8:	b672      	cpsid	i
}
 8001afa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001afc:	bf00      	nop
 8001afe:	e7fd      	b.n	8001afc <Error_Handler+0x8>

08001b00 <LL_AHB2_GRP1_EnableClock>:
{
 8001b00:	b480      	push	{r7}
 8001b02:	b085      	sub	sp, #20
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001b08:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b0c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001b0e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	4313      	orrs	r3, r2
 8001b16:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001b18:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b1c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	4013      	ands	r3, r2
 8001b22:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001b24:	68fb      	ldr	r3, [r7, #12]
}
 8001b26:	bf00      	nop
 8001b28:	3714      	adds	r7, #20
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bc80      	pop	{r7}
 8001b2e:	4770      	bx	lr

08001b30 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_DAC
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001b30:	b480      	push	{r7}
 8001b32:	b085      	sub	sp, #20
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001b38:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b3c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001b3e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	4313      	orrs	r3, r2
 8001b46:	658b      	str	r3, [r1, #88]	@ 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001b48:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b4c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	4013      	ands	r3, r2
 8001b52:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001b54:	68fb      	ldr	r3, [r7, #12]
}
 8001b56:	bf00      	nop
 8001b58:	3714      	adds	r7, #20
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bc80      	pop	{r7}
 8001b5e:	4770      	bx	lr

08001b60 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001b60:	b480      	push	{r7}
 8001b62:	b085      	sub	sp, #20
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001b68:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b6c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001b6e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	4313      	orrs	r3, r2
 8001b76:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001b78:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b7c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	4013      	ands	r3, r2
 8001b82:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001b84:	68fb      	ldr	r3, [r7, #12]
}
 8001b86:	bf00      	nop
 8001b88:	3714      	adds	r7, #20
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bc80      	pop	{r7}
 8001b8e:	4770      	bx	lr

08001b90 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b90:	b480      	push	{r7}
 8001b92:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b94:	bf00      	nop
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bc80      	pop	{r7}
 8001b9a:	4770      	bx	lr

08001b9c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b096      	sub	sp, #88	@ 0x58
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ba4:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001ba8:	2200      	movs	r2, #0
 8001baa:	601a      	str	r2, [r3, #0]
 8001bac:	605a      	str	r2, [r3, #4]
 8001bae:	609a      	str	r2, [r3, #8]
 8001bb0:	60da      	str	r2, [r3, #12]
 8001bb2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001bb4:	f107 030c 	add.w	r3, r7, #12
 8001bb8:	2238      	movs	r2, #56	@ 0x38
 8001bba:	2100      	movs	r1, #0
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	f004 fa07 	bl	8005fd0 <memset>
  if(huart->Instance==USART1)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4a35      	ldr	r2, [pc, #212]	@ (8001c9c <HAL_UART_MspInit+0x100>)
 8001bc8:	4293      	cmp	r3, r2
 8001bca:	d12e      	bne.n	8001c2a <HAL_UART_MspInit+0x8e>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001bcc:	2301      	movs	r3, #1
 8001bce:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001bd0:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 8001bd4:	613b      	str	r3, [r7, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001bd6:	f107 030c 	add.w	r3, r7, #12
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f001 ff22 	bl	8003a24 <HAL_RCCEx_PeriphCLKConfig>
 8001be0:	4603      	mov	r3, r0
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d001      	beq.n	8001bea <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001be6:	f7ff ff85 	bl	8001af4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001bea:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8001bee:	f7ff ffb7 	bl	8001b60 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bf2:	2002      	movs	r0, #2
 8001bf4:	f7ff ff84 	bl	8001b00 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8001bf8:	23c0      	movs	r3, #192	@ 0xc0
 8001bfa:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bfc:	2302      	movs	r3, #2
 8001bfe:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c00:	2300      	movs	r3, #0
 8001c02:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c04:	2300      	movs	r3, #0
 8001c06:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001c08:	2307      	movs	r3, #7
 8001c0a:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c0c:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001c10:	4619      	mov	r1, r3
 8001c12:	4823      	ldr	r0, [pc, #140]	@ (8001ca0 <HAL_UART_MspInit+0x104>)
 8001c14:	f000 fbc0 	bl	8002398 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001c18:	2200      	movs	r2, #0
 8001c1a:	2100      	movs	r1, #0
 8001c1c:	2024      	movs	r0, #36	@ 0x24
 8001c1e:	f000 faca 	bl	80021b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001c22:	2024      	movs	r0, #36	@ 0x24
 8001c24:	f000 fae1 	bl	80021ea <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USER CODE END USART2_MspInit 1 */
  }

}
 8001c28:	e033      	b.n	8001c92 <HAL_UART_MspInit+0xf6>
  else if(huart->Instance==USART2)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4a1d      	ldr	r2, [pc, #116]	@ (8001ca4 <HAL_UART_MspInit+0x108>)
 8001c30:	4293      	cmp	r3, r2
 8001c32:	d12e      	bne.n	8001c92 <HAL_UART_MspInit+0xf6>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001c34:	2302      	movs	r3, #2
 8001c36:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001c38:	f44f 2340 	mov.w	r3, #786432	@ 0xc0000
 8001c3c:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c3e:	f107 030c 	add.w	r3, r7, #12
 8001c42:	4618      	mov	r0, r3
 8001c44:	f001 feee 	bl	8003a24 <HAL_RCCEx_PeriphCLKConfig>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d001      	beq.n	8001c52 <HAL_UART_MspInit+0xb6>
      Error_Handler();
 8001c4e:	f7ff ff51 	bl	8001af4 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001c52:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8001c56:	f7ff ff6b 	bl	8001b30 <LL_APB1_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c5a:	2001      	movs	r0, #1
 8001c5c:	f7ff ff50 	bl	8001b00 <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_2;
 8001c60:	230e      	movs	r3, #14
 8001c62:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c64:	2302      	movs	r3, #2
 8001c66:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001c70:	2307      	movs	r3, #7
 8001c72:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c74:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001c78:	4619      	mov	r1, r3
 8001c7a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c7e:	f000 fb8b 	bl	8002398 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001c82:	2200      	movs	r2, #0
 8001c84:	2100      	movs	r1, #0
 8001c86:	2025      	movs	r0, #37	@ 0x25
 8001c88:	f000 fa95 	bl	80021b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001c8c:	2025      	movs	r0, #37	@ 0x25
 8001c8e:	f000 faac 	bl	80021ea <HAL_NVIC_EnableIRQ>
}
 8001c92:	bf00      	nop
 8001c94:	3758      	adds	r7, #88	@ 0x58
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}
 8001c9a:	bf00      	nop
 8001c9c:	40013800 	.word	0x40013800
 8001ca0:	48000400 	.word	0x48000400
 8001ca4:	40004400 	.word	0x40004400

08001ca8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001cac:	bf00      	nop
 8001cae:	e7fd      	b.n	8001cac <NMI_Handler+0x4>

08001cb0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001cb4:	bf00      	nop
 8001cb6:	e7fd      	b.n	8001cb4 <HardFault_Handler+0x4>

08001cb8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001cbc:	bf00      	nop
 8001cbe:	e7fd      	b.n	8001cbc <MemManage_Handler+0x4>

08001cc0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001cc4:	bf00      	nop
 8001cc6:	e7fd      	b.n	8001cc4 <BusFault_Handler+0x4>

08001cc8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ccc:	bf00      	nop
 8001cce:	e7fd      	b.n	8001ccc <UsageFault_Handler+0x4>

08001cd0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001cd4:	bf00      	nop
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bc80      	pop	{r7}
 8001cda:	4770      	bx	lr

08001cdc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ce0:	bf00      	nop
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bc80      	pop	{r7}
 8001ce6:	4770      	bx	lr

08001ce8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001cec:	bf00      	nop
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bc80      	pop	{r7}
 8001cf2:	4770      	bx	lr

08001cf4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001cf8:	f000 f946 	bl	8001f88 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001cfc:	bf00      	nop
 8001cfe:	bd80      	pop	{r7, pc}

08001d00 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 Interrupt.
  */
void USART1_IRQHandler(void)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001d04:	4802      	ldr	r0, [pc, #8]	@ (8001d10 <USART1_IRQHandler+0x10>)
 8001d06:	f002 f963 	bl	8003fd0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001d0a:	bf00      	nop
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	bf00      	nop
 8001d10:	20000208 	.word	0x20000208

08001d14 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 Interrupt.
  */
void USART2_IRQHandler(void)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001d18:	4802      	ldr	r0, [pc, #8]	@ (8001d24 <USART2_IRQHandler+0x10>)
 8001d1a:	f002 f959 	bl	8003fd0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001d1e:	bf00      	nop
 8001d20:	bd80      	pop	{r7, pc}
 8001d22:	bf00      	nop
 8001d24:	2000029c 	.word	0x2000029c

08001d28 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	af00      	add	r7, sp, #0
  return 1;
 8001d2c:	2301      	movs	r3, #1
}
 8001d2e:	4618      	mov	r0, r3
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bc80      	pop	{r7}
 8001d34:	4770      	bx	lr

08001d36 <_kill>:

int _kill(int pid, int sig)
{
 8001d36:	b580      	push	{r7, lr}
 8001d38:	b082      	sub	sp, #8
 8001d3a:	af00      	add	r7, sp, #0
 8001d3c:	6078      	str	r0, [r7, #4]
 8001d3e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001d40:	f004 f998 	bl	8006074 <__errno>
 8001d44:	4603      	mov	r3, r0
 8001d46:	2216      	movs	r2, #22
 8001d48:	601a      	str	r2, [r3, #0]
  return -1;
 8001d4a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d4e:	4618      	mov	r0, r3
 8001d50:	3708      	adds	r7, #8
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}

08001d56 <_exit>:

void _exit (int status)
{
 8001d56:	b580      	push	{r7, lr}
 8001d58:	b082      	sub	sp, #8
 8001d5a:	af00      	add	r7, sp, #0
 8001d5c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001d5e:	f04f 31ff 	mov.w	r1, #4294967295
 8001d62:	6878      	ldr	r0, [r7, #4]
 8001d64:	f7ff ffe7 	bl	8001d36 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001d68:	bf00      	nop
 8001d6a:	e7fd      	b.n	8001d68 <_exit+0x12>

08001d6c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b086      	sub	sp, #24
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	60f8      	str	r0, [r7, #12]
 8001d74:	60b9      	str	r1, [r7, #8]
 8001d76:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d78:	2300      	movs	r3, #0
 8001d7a:	617b      	str	r3, [r7, #20]
 8001d7c:	e00a      	b.n	8001d94 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001d7e:	f3af 8000 	nop.w
 8001d82:	4601      	mov	r1, r0
 8001d84:	68bb      	ldr	r3, [r7, #8]
 8001d86:	1c5a      	adds	r2, r3, #1
 8001d88:	60ba      	str	r2, [r7, #8]
 8001d8a:	b2ca      	uxtb	r2, r1
 8001d8c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d8e:	697b      	ldr	r3, [r7, #20]
 8001d90:	3301      	adds	r3, #1
 8001d92:	617b      	str	r3, [r7, #20]
 8001d94:	697a      	ldr	r2, [r7, #20]
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	429a      	cmp	r2, r3
 8001d9a:	dbf0      	blt.n	8001d7e <_read+0x12>
  }

  return len;
 8001d9c:	687b      	ldr	r3, [r7, #4]
}
 8001d9e:	4618      	mov	r0, r3
 8001da0:	3718      	adds	r7, #24
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}

08001da6 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001da6:	b480      	push	{r7}
 8001da8:	b083      	sub	sp, #12
 8001daa:	af00      	add	r7, sp, #0
 8001dac:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001dae:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001db2:	4618      	mov	r0, r3
 8001db4:	370c      	adds	r7, #12
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bc80      	pop	{r7}
 8001dba:	4770      	bx	lr

08001dbc <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b083      	sub	sp, #12
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
 8001dc4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001dcc:	605a      	str	r2, [r3, #4]
  return 0;
 8001dce:	2300      	movs	r3, #0
}
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	370c      	adds	r7, #12
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bc80      	pop	{r7}
 8001dd8:	4770      	bx	lr

08001dda <_isatty>:

int _isatty(int file)
{
 8001dda:	b480      	push	{r7}
 8001ddc:	b083      	sub	sp, #12
 8001dde:	af00      	add	r7, sp, #0
 8001de0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001de2:	2301      	movs	r3, #1
}
 8001de4:	4618      	mov	r0, r3
 8001de6:	370c      	adds	r7, #12
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bc80      	pop	{r7}
 8001dec:	4770      	bx	lr

08001dee <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001dee:	b480      	push	{r7}
 8001df0:	b085      	sub	sp, #20
 8001df2:	af00      	add	r7, sp, #0
 8001df4:	60f8      	str	r0, [r7, #12]
 8001df6:	60b9      	str	r1, [r7, #8]
 8001df8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001dfa:	2300      	movs	r3, #0
}
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	3714      	adds	r7, #20
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bc80      	pop	{r7}
 8001e04:	4770      	bx	lr
	...

08001e08 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b086      	sub	sp, #24
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e10:	4a14      	ldr	r2, [pc, #80]	@ (8001e64 <_sbrk+0x5c>)
 8001e12:	4b15      	ldr	r3, [pc, #84]	@ (8001e68 <_sbrk+0x60>)
 8001e14:	1ad3      	subs	r3, r2, r3
 8001e16:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e18:	697b      	ldr	r3, [r7, #20]
 8001e1a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e1c:	4b13      	ldr	r3, [pc, #76]	@ (8001e6c <_sbrk+0x64>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d102      	bne.n	8001e2a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e24:	4b11      	ldr	r3, [pc, #68]	@ (8001e6c <_sbrk+0x64>)
 8001e26:	4a12      	ldr	r2, [pc, #72]	@ (8001e70 <_sbrk+0x68>)
 8001e28:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e2a:	4b10      	ldr	r3, [pc, #64]	@ (8001e6c <_sbrk+0x64>)
 8001e2c:	681a      	ldr	r2, [r3, #0]
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	4413      	add	r3, r2
 8001e32:	693a      	ldr	r2, [r7, #16]
 8001e34:	429a      	cmp	r2, r3
 8001e36:	d207      	bcs.n	8001e48 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e38:	f004 f91c 	bl	8006074 <__errno>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	220c      	movs	r2, #12
 8001e40:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e42:	f04f 33ff 	mov.w	r3, #4294967295
 8001e46:	e009      	b.n	8001e5c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e48:	4b08      	ldr	r3, [pc, #32]	@ (8001e6c <_sbrk+0x64>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e4e:	4b07      	ldr	r3, [pc, #28]	@ (8001e6c <_sbrk+0x64>)
 8001e50:	681a      	ldr	r2, [r3, #0]
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	4413      	add	r3, r2
 8001e56:	4a05      	ldr	r2, [pc, #20]	@ (8001e6c <_sbrk+0x64>)
 8001e58:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e5a:	68fb      	ldr	r3, [r7, #12]
}
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	3718      	adds	r7, #24
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bd80      	pop	{r7, pc}
 8001e64:	20010000 	.word	0x20010000
 8001e68:	00000400 	.word	0x00000400
 8001e6c:	20000330 	.word	0x20000330
 8001e70:	20000488 	.word	0x20000488

08001e74 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e74:	b480      	push	{r7}
 8001e76:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8001e78:	bf00      	nop
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bc80      	pop	{r7}
 8001e7e:	4770      	bx	lr

08001e80 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001e80:	480d      	ldr	r0, [pc, #52]	@ (8001eb8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001e82:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001e84:	f7ff fff6 	bl	8001e74 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e88:	480c      	ldr	r0, [pc, #48]	@ (8001ebc <LoopForever+0x6>)
  ldr r1, =_edata
 8001e8a:	490d      	ldr	r1, [pc, #52]	@ (8001ec0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001e8c:	4a0d      	ldr	r2, [pc, #52]	@ (8001ec4 <LoopForever+0xe>)
  movs r3, #0
 8001e8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e90:	e002      	b.n	8001e98 <LoopCopyDataInit>

08001e92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e96:	3304      	adds	r3, #4

08001e98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e9c:	d3f9      	bcc.n	8001e92 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e9e:	4a0a      	ldr	r2, [pc, #40]	@ (8001ec8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001ea0:	4c0a      	ldr	r4, [pc, #40]	@ (8001ecc <LoopForever+0x16>)
  movs r3, #0
 8001ea2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ea4:	e001      	b.n	8001eaa <LoopFillZerobss>

08001ea6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ea6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ea8:	3204      	adds	r2, #4

08001eaa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001eaa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001eac:	d3fb      	bcc.n	8001ea6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001eae:	f004 f8e7 	bl	8006080 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001eb2:	f7ff fa65 	bl	8001380 <main>

08001eb6 <LoopForever>:

LoopForever:
    b LoopForever
 8001eb6:	e7fe      	b.n	8001eb6 <LoopForever>
  ldr   r0, =_estack
 8001eb8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001ebc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ec0:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001ec4:	08008228 	.word	0x08008228
  ldr r2, =_sbss
 8001ec8:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001ecc:	20000484 	.word	0x20000484

08001ed0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001ed0:	e7fe      	b.n	8001ed0 <ADC_IRQHandler>
	...

08001ed4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b082      	sub	sp, #8
 8001ed8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001eda:	2300      	movs	r3, #0
 8001edc:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ede:	2003      	movs	r0, #3
 8001ee0:	f000 f95e 	bl	80021a0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001ee4:	f001 fbc0 	bl	8003668 <HAL_RCC_GetHCLKFreq>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	4a09      	ldr	r2, [pc, #36]	@ (8001f10 <HAL_Init+0x3c>)
 8001eec:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001eee:	200f      	movs	r0, #15
 8001ef0:	f000 f810 	bl	8001f14 <HAL_InitTick>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d002      	beq.n	8001f00 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001efa:	2301      	movs	r3, #1
 8001efc:	71fb      	strb	r3, [r7, #7]
 8001efe:	e001      	b.n	8001f04 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001f00:	f7ff fe46 	bl	8001b90 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001f04:	79fb      	ldrb	r3, [r7, #7]
}
 8001f06:	4618      	mov	r0, r3
 8001f08:	3708      	adds	r7, #8
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}
 8001f0e:	bf00      	nop
 8001f10:	20000000 	.word	0x20000000

08001f14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b084      	sub	sp, #16
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001f20:	4b17      	ldr	r3, [pc, #92]	@ (8001f80 <HAL_InitTick+0x6c>)
 8001f22:	781b      	ldrb	r3, [r3, #0]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d024      	beq.n	8001f72 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
#ifdef CORE_CM0PLUS
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLK2Freq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
#else
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001f28:	f001 fb9e 	bl	8003668 <HAL_RCC_GetHCLKFreq>
 8001f2c:	4602      	mov	r2, r0
 8001f2e:	4b14      	ldr	r3, [pc, #80]	@ (8001f80 <HAL_InitTick+0x6c>)
 8001f30:	781b      	ldrb	r3, [r3, #0]
 8001f32:	4619      	mov	r1, r3
 8001f34:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001f38:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f40:	4618      	mov	r0, r3
 8001f42:	f000 f960 	bl	8002206 <HAL_SYSTICK_Config>
 8001f46:	4603      	mov	r3, r0
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d10f      	bne.n	8001f6c <HAL_InitTick+0x58>
#endif
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2b0f      	cmp	r3, #15
 8001f50:	d809      	bhi.n	8001f66 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f52:	2200      	movs	r2, #0
 8001f54:	6879      	ldr	r1, [r7, #4]
 8001f56:	f04f 30ff 	mov.w	r0, #4294967295
 8001f5a:	f000 f92c 	bl	80021b6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001f5e:	4a09      	ldr	r2, [pc, #36]	@ (8001f84 <HAL_InitTick+0x70>)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6013      	str	r3, [r2, #0]
 8001f64:	e007      	b.n	8001f76 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8001f66:	2301      	movs	r3, #1
 8001f68:	73fb      	strb	r3, [r7, #15]
 8001f6a:	e004      	b.n	8001f76 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	73fb      	strb	r3, [r7, #15]
 8001f70:	e001      	b.n	8001f76 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001f72:	2301      	movs	r3, #1
 8001f74:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001f76:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f78:	4618      	mov	r0, r3
 8001f7a:	3710      	adds	r7, #16
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bd80      	pop	{r7, pc}
 8001f80:	20000008 	.word	0x20000008
 8001f84:	20000004 	.word	0x20000004

08001f88 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001f8c:	4b05      	ldr	r3, [pc, #20]	@ (8001fa4 <HAL_IncTick+0x1c>)
 8001f8e:	781b      	ldrb	r3, [r3, #0]
 8001f90:	461a      	mov	r2, r3
 8001f92:	4b05      	ldr	r3, [pc, #20]	@ (8001fa8 <HAL_IncTick+0x20>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4413      	add	r3, r2
 8001f98:	4a03      	ldr	r2, [pc, #12]	@ (8001fa8 <HAL_IncTick+0x20>)
 8001f9a:	6013      	str	r3, [r2, #0]
}
 8001f9c:	bf00      	nop
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bc80      	pop	{r7}
 8001fa2:	4770      	bx	lr
 8001fa4:	20000008 	.word	0x20000008
 8001fa8:	20000334 	.word	0x20000334

08001fac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fac:	b480      	push	{r7}
 8001fae:	af00      	add	r7, sp, #0
  return uwTick;
 8001fb0:	4b02      	ldr	r3, [pc, #8]	@ (8001fbc <HAL_GetTick+0x10>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
}
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bc80      	pop	{r7}
 8001fba:	4770      	bx	lr
 8001fbc:	20000334 	.word	0x20000334

08001fc0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b084      	sub	sp, #16
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001fc8:	f7ff fff0 	bl	8001fac <HAL_GetTick>
 8001fcc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fd8:	d005      	beq.n	8001fe6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001fda:	4b0a      	ldr	r3, [pc, #40]	@ (8002004 <HAL_Delay+0x44>)
 8001fdc:	781b      	ldrb	r3, [r3, #0]
 8001fde:	461a      	mov	r2, r3
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	4413      	add	r3, r2
 8001fe4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001fe6:	bf00      	nop
 8001fe8:	f7ff ffe0 	bl	8001fac <HAL_GetTick>
 8001fec:	4602      	mov	r2, r0
 8001fee:	68bb      	ldr	r3, [r7, #8]
 8001ff0:	1ad3      	subs	r3, r2, r3
 8001ff2:	68fa      	ldr	r2, [r7, #12]
 8001ff4:	429a      	cmp	r2, r3
 8001ff6:	d8f7      	bhi.n	8001fe8 <HAL_Delay+0x28>
  {
  }
}
 8001ff8:	bf00      	nop
 8001ffa:	bf00      	nop
 8001ffc:	3710      	adds	r7, #16
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd80      	pop	{r7, pc}
 8002002:	bf00      	nop
 8002004:	20000008 	.word	0x20000008

08002008 <__NVIC_SetPriorityGrouping>:
{
 8002008:	b480      	push	{r7}
 800200a:	b085      	sub	sp, #20
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	f003 0307 	and.w	r3, r3, #7
 8002016:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002018:	4b0c      	ldr	r3, [pc, #48]	@ (800204c <__NVIC_SetPriorityGrouping+0x44>)
 800201a:	68db      	ldr	r3, [r3, #12]
 800201c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800201e:	68ba      	ldr	r2, [r7, #8]
 8002020:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002024:	4013      	ands	r3, r2
 8002026:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800202c:	68bb      	ldr	r3, [r7, #8]
 800202e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002030:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002034:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002038:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800203a:	4a04      	ldr	r2, [pc, #16]	@ (800204c <__NVIC_SetPriorityGrouping+0x44>)
 800203c:	68bb      	ldr	r3, [r7, #8]
 800203e:	60d3      	str	r3, [r2, #12]
}
 8002040:	bf00      	nop
 8002042:	3714      	adds	r7, #20
 8002044:	46bd      	mov	sp, r7
 8002046:	bc80      	pop	{r7}
 8002048:	4770      	bx	lr
 800204a:	bf00      	nop
 800204c:	e000ed00 	.word	0xe000ed00

08002050 <__NVIC_GetPriorityGrouping>:
{
 8002050:	b480      	push	{r7}
 8002052:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002054:	4b04      	ldr	r3, [pc, #16]	@ (8002068 <__NVIC_GetPriorityGrouping+0x18>)
 8002056:	68db      	ldr	r3, [r3, #12]
 8002058:	0a1b      	lsrs	r3, r3, #8
 800205a:	f003 0307 	and.w	r3, r3, #7
}
 800205e:	4618      	mov	r0, r3
 8002060:	46bd      	mov	sp, r7
 8002062:	bc80      	pop	{r7}
 8002064:	4770      	bx	lr
 8002066:	bf00      	nop
 8002068:	e000ed00 	.word	0xe000ed00

0800206c <__NVIC_EnableIRQ>:
{
 800206c:	b480      	push	{r7}
 800206e:	b083      	sub	sp, #12
 8002070:	af00      	add	r7, sp, #0
 8002072:	4603      	mov	r3, r0
 8002074:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002076:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800207a:	2b00      	cmp	r3, #0
 800207c:	db0b      	blt.n	8002096 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800207e:	79fb      	ldrb	r3, [r7, #7]
 8002080:	f003 021f 	and.w	r2, r3, #31
 8002084:	4906      	ldr	r1, [pc, #24]	@ (80020a0 <__NVIC_EnableIRQ+0x34>)
 8002086:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800208a:	095b      	lsrs	r3, r3, #5
 800208c:	2001      	movs	r0, #1
 800208e:	fa00 f202 	lsl.w	r2, r0, r2
 8002092:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002096:	bf00      	nop
 8002098:	370c      	adds	r7, #12
 800209a:	46bd      	mov	sp, r7
 800209c:	bc80      	pop	{r7}
 800209e:	4770      	bx	lr
 80020a0:	e000e100 	.word	0xe000e100

080020a4 <__NVIC_SetPriority>:
{
 80020a4:	b480      	push	{r7}
 80020a6:	b083      	sub	sp, #12
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	4603      	mov	r3, r0
 80020ac:	6039      	str	r1, [r7, #0]
 80020ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	db0a      	blt.n	80020ce <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	b2da      	uxtb	r2, r3
 80020bc:	490c      	ldr	r1, [pc, #48]	@ (80020f0 <__NVIC_SetPriority+0x4c>)
 80020be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020c2:	0112      	lsls	r2, r2, #4
 80020c4:	b2d2      	uxtb	r2, r2
 80020c6:	440b      	add	r3, r1
 80020c8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80020cc:	e00a      	b.n	80020e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	b2da      	uxtb	r2, r3
 80020d2:	4908      	ldr	r1, [pc, #32]	@ (80020f4 <__NVIC_SetPriority+0x50>)
 80020d4:	79fb      	ldrb	r3, [r7, #7]
 80020d6:	f003 030f 	and.w	r3, r3, #15
 80020da:	3b04      	subs	r3, #4
 80020dc:	0112      	lsls	r2, r2, #4
 80020de:	b2d2      	uxtb	r2, r2
 80020e0:	440b      	add	r3, r1
 80020e2:	761a      	strb	r2, [r3, #24]
}
 80020e4:	bf00      	nop
 80020e6:	370c      	adds	r7, #12
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bc80      	pop	{r7}
 80020ec:	4770      	bx	lr
 80020ee:	bf00      	nop
 80020f0:	e000e100 	.word	0xe000e100
 80020f4:	e000ed00 	.word	0xe000ed00

080020f8 <NVIC_EncodePriority>:
{
 80020f8:	b480      	push	{r7}
 80020fa:	b089      	sub	sp, #36	@ 0x24
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	60f8      	str	r0, [r7, #12]
 8002100:	60b9      	str	r1, [r7, #8]
 8002102:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	f003 0307 	and.w	r3, r3, #7
 800210a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800210c:	69fb      	ldr	r3, [r7, #28]
 800210e:	f1c3 0307 	rsb	r3, r3, #7
 8002112:	2b04      	cmp	r3, #4
 8002114:	bf28      	it	cs
 8002116:	2304      	movcs	r3, #4
 8002118:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800211a:	69fb      	ldr	r3, [r7, #28]
 800211c:	3304      	adds	r3, #4
 800211e:	2b06      	cmp	r3, #6
 8002120:	d902      	bls.n	8002128 <NVIC_EncodePriority+0x30>
 8002122:	69fb      	ldr	r3, [r7, #28]
 8002124:	3b03      	subs	r3, #3
 8002126:	e000      	b.n	800212a <NVIC_EncodePriority+0x32>
 8002128:	2300      	movs	r3, #0
 800212a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800212c:	f04f 32ff 	mov.w	r2, #4294967295
 8002130:	69bb      	ldr	r3, [r7, #24]
 8002132:	fa02 f303 	lsl.w	r3, r2, r3
 8002136:	43da      	mvns	r2, r3
 8002138:	68bb      	ldr	r3, [r7, #8]
 800213a:	401a      	ands	r2, r3
 800213c:	697b      	ldr	r3, [r7, #20]
 800213e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002140:	f04f 31ff 	mov.w	r1, #4294967295
 8002144:	697b      	ldr	r3, [r7, #20]
 8002146:	fa01 f303 	lsl.w	r3, r1, r3
 800214a:	43d9      	mvns	r1, r3
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002150:	4313      	orrs	r3, r2
}
 8002152:	4618      	mov	r0, r3
 8002154:	3724      	adds	r7, #36	@ 0x24
 8002156:	46bd      	mov	sp, r7
 8002158:	bc80      	pop	{r7}
 800215a:	4770      	bx	lr

0800215c <SysTick_Config>:
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b082      	sub	sp, #8
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	3b01      	subs	r3, #1
 8002168:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800216c:	d301      	bcc.n	8002172 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800216e:	2301      	movs	r3, #1
 8002170:	e00f      	b.n	8002192 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002172:	4a0a      	ldr	r2, [pc, #40]	@ (800219c <SysTick_Config+0x40>)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	3b01      	subs	r3, #1
 8002178:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800217a:	210f      	movs	r1, #15
 800217c:	f04f 30ff 	mov.w	r0, #4294967295
 8002180:	f7ff ff90 	bl	80020a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002184:	4b05      	ldr	r3, [pc, #20]	@ (800219c <SysTick_Config+0x40>)
 8002186:	2200      	movs	r2, #0
 8002188:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800218a:	4b04      	ldr	r3, [pc, #16]	@ (800219c <SysTick_Config+0x40>)
 800218c:	2207      	movs	r2, #7
 800218e:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8002190:	2300      	movs	r3, #0
}
 8002192:	4618      	mov	r0, r3
 8002194:	3708      	adds	r7, #8
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}
 800219a:	bf00      	nop
 800219c:	e000e010 	.word	0xe000e010

080021a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b082      	sub	sp, #8
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021a8:	6878      	ldr	r0, [r7, #4]
 80021aa:	f7ff ff2d 	bl	8002008 <__NVIC_SetPriorityGrouping>
}
 80021ae:	bf00      	nop
 80021b0:	3708      	adds	r7, #8
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}

080021b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021b6:	b580      	push	{r7, lr}
 80021b8:	b086      	sub	sp, #24
 80021ba:	af00      	add	r7, sp, #0
 80021bc:	4603      	mov	r3, r0
 80021be:	60b9      	str	r1, [r7, #8]
 80021c0:	607a      	str	r2, [r7, #4]
 80021c2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80021c4:	f7ff ff44 	bl	8002050 <__NVIC_GetPriorityGrouping>
 80021c8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021ca:	687a      	ldr	r2, [r7, #4]
 80021cc:	68b9      	ldr	r1, [r7, #8]
 80021ce:	6978      	ldr	r0, [r7, #20]
 80021d0:	f7ff ff92 	bl	80020f8 <NVIC_EncodePriority>
 80021d4:	4602      	mov	r2, r0
 80021d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021da:	4611      	mov	r1, r2
 80021dc:	4618      	mov	r0, r3
 80021de:	f7ff ff61 	bl	80020a4 <__NVIC_SetPriority>
}
 80021e2:	bf00      	nop
 80021e4:	3718      	adds	r7, #24
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}

080021ea <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021ea:	b580      	push	{r7, lr}
 80021ec:	b082      	sub	sp, #8
 80021ee:	af00      	add	r7, sp, #0
 80021f0:	4603      	mov	r3, r0
 80021f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80021f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021f8:	4618      	mov	r0, r3
 80021fa:	f7ff ff37 	bl	800206c <__NVIC_EnableIRQ>
}
 80021fe:	bf00      	nop
 8002200:	3708      	adds	r7, #8
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}

08002206 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002206:	b580      	push	{r7, lr}
 8002208:	b082      	sub	sp, #8
 800220a:	af00      	add	r7, sp, #0
 800220c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800220e:	6878      	ldr	r0, [r7, #4]
 8002210:	f7ff ffa4 	bl	800215c <SysTick_Config>
 8002214:	4603      	mov	r3, r0
}
 8002216:	4618      	mov	r0, r3
 8002218:	3708      	adds	r7, #8
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}

0800221e <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800221e:	b480      	push	{r7}
 8002220:	b083      	sub	sp, #12
 8002222:	af00      	add	r7, sp, #0
 8002224:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	2b00      	cmp	r3, #0
 800222a:	d101      	bne.n	8002230 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 800222c:	2301      	movs	r3, #1
 800222e:	e04f      	b.n	80022d0 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002236:	b2db      	uxtb	r3, r3
 8002238:	2b02      	cmp	r3, #2
 800223a:	d008      	beq.n	800224e <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2204      	movs	r2, #4
 8002240:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2200      	movs	r2, #0
 8002246:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800224a:	2301      	movs	r3, #1
 800224c:	e040      	b.n	80022d0 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	681a      	ldr	r2, [r3, #0]
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f022 020e 	bic.w	r2, r2, #14
 800225c:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002262:	681a      	ldr	r2, [r3, #0]
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002268:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800226c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	681a      	ldr	r2, [r3, #0]
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f022 0201 	bic.w	r2, r2, #1
 800227c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002282:	f003 021c 	and.w	r2, r3, #28
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800228a:	2101      	movs	r1, #1
 800228c:	fa01 f202 	lsl.w	r2, r1, r2
 8002290:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002296:	687a      	ldr	r2, [r7, #4]
 8002298:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800229a:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d00c      	beq.n	80022be <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022a8:	681a      	ldr	r2, [r3, #0]
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022ae:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80022b2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022b8:	687a      	ldr	r2, [r7, #4]
 80022ba:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80022bc:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2201      	movs	r2, #1
 80022c2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2200      	movs	r2, #0
 80022ca:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }

  return HAL_OK;
 80022ce:	2300      	movs	r3, #0
}
 80022d0:	4618      	mov	r0, r3
 80022d2:	370c      	adds	r7, #12
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bc80      	pop	{r7}
 80022d8:	4770      	bx	lr

080022da <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80022da:	b580      	push	{r7, lr}
 80022dc:	b084      	sub	sp, #16
 80022de:	af00      	add	r7, sp, #0
 80022e0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80022e2:	2300      	movs	r3, #0
 80022e4:	73fb      	strb	r3, [r7, #15]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80022ec:	b2db      	uxtb	r3, r3
 80022ee:	2b02      	cmp	r3, #2
 80022f0:	d005      	beq.n	80022fe <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2204      	movs	r2, #4
 80022f6:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80022f8:	2301      	movs	r3, #1
 80022fa:	73fb      	strb	r3, [r7, #15]
 80022fc:	e047      	b.n	800238e <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	681a      	ldr	r2, [r3, #0]
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f022 020e 	bic.w	r2, r2, #14
 800230c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	681a      	ldr	r2, [r3, #0]
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f022 0201 	bic.w	r2, r2, #1
 800231c:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002322:	681a      	ldr	r2, [r3, #0]
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002328:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800232c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002332:	f003 021c 	and.w	r2, r3, #28
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800233a:	2101      	movs	r1, #1
 800233c:	fa01 f202 	lsl.w	r2, r1, r2
 8002340:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002346:	687a      	ldr	r2, [r7, #4]
 8002348:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800234a:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002350:	2b00      	cmp	r3, #0
 8002352:	d00c      	beq.n	800236e <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002358:	681a      	ldr	r2, [r3, #0]
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800235e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002362:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002368:	687a      	ldr	r2, [r7, #4]
 800236a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800236c:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2201      	movs	r2, #1
 8002372:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2200      	movs	r2, #0
 800237a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002382:	2b00      	cmp	r3, #0
 8002384:	d003      	beq.n	800238e <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800238a:	6878      	ldr	r0, [r7, #4]
 800238c:	4798      	blx	r3
    }
  }
  return status;
 800238e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002390:	4618      	mov	r0, r3
 8002392:	3710      	adds	r7, #16
 8002394:	46bd      	mov	sp, r7
 8002396:	bd80      	pop	{r7, pc}

08002398 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002398:	b480      	push	{r7}
 800239a:	b087      	sub	sp, #28
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
 80023a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80023a2:	2300      	movs	r3, #0
 80023a4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80023a6:	e140      	b.n	800262a <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	681a      	ldr	r2, [r3, #0]
 80023ac:	2101      	movs	r1, #1
 80023ae:	697b      	ldr	r3, [r7, #20]
 80023b0:	fa01 f303 	lsl.w	r3, r1, r3
 80023b4:	4013      	ands	r3, r2
 80023b6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	f000 8132 	beq.w	8002624 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	f003 0303 	and.w	r3, r3, #3
 80023c8:	2b01      	cmp	r3, #1
 80023ca:	d005      	beq.n	80023d8 <HAL_GPIO_Init+0x40>
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	f003 0303 	and.w	r3, r3, #3
 80023d4:	2b02      	cmp	r3, #2
 80023d6:	d130      	bne.n	800243a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	689b      	ldr	r3, [r3, #8]
 80023dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80023de:	697b      	ldr	r3, [r7, #20]
 80023e0:	005b      	lsls	r3, r3, #1
 80023e2:	2203      	movs	r2, #3
 80023e4:	fa02 f303 	lsl.w	r3, r2, r3
 80023e8:	43db      	mvns	r3, r3
 80023ea:	693a      	ldr	r2, [r7, #16]
 80023ec:	4013      	ands	r3, r2
 80023ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	68da      	ldr	r2, [r3, #12]
 80023f4:	697b      	ldr	r3, [r7, #20]
 80023f6:	005b      	lsls	r3, r3, #1
 80023f8:	fa02 f303 	lsl.w	r3, r2, r3
 80023fc:	693a      	ldr	r2, [r7, #16]
 80023fe:	4313      	orrs	r3, r2
 8002400:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	693a      	ldr	r2, [r7, #16]
 8002406:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800240e:	2201      	movs	r2, #1
 8002410:	697b      	ldr	r3, [r7, #20]
 8002412:	fa02 f303 	lsl.w	r3, r2, r3
 8002416:	43db      	mvns	r3, r3
 8002418:	693a      	ldr	r2, [r7, #16]
 800241a:	4013      	ands	r3, r2
 800241c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	091b      	lsrs	r3, r3, #4
 8002424:	f003 0201 	and.w	r2, r3, #1
 8002428:	697b      	ldr	r3, [r7, #20]
 800242a:	fa02 f303 	lsl.w	r3, r2, r3
 800242e:	693a      	ldr	r2, [r7, #16]
 8002430:	4313      	orrs	r3, r2
 8002432:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	693a      	ldr	r2, [r7, #16]
 8002438:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	f003 0303 	and.w	r3, r3, #3
 8002442:	2b03      	cmp	r3, #3
 8002444:	d017      	beq.n	8002476 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	68db      	ldr	r3, [r3, #12]
 800244a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800244c:	697b      	ldr	r3, [r7, #20]
 800244e:	005b      	lsls	r3, r3, #1
 8002450:	2203      	movs	r2, #3
 8002452:	fa02 f303 	lsl.w	r3, r2, r3
 8002456:	43db      	mvns	r3, r3
 8002458:	693a      	ldr	r2, [r7, #16]
 800245a:	4013      	ands	r3, r2
 800245c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	689a      	ldr	r2, [r3, #8]
 8002462:	697b      	ldr	r3, [r7, #20]
 8002464:	005b      	lsls	r3, r3, #1
 8002466:	fa02 f303 	lsl.w	r3, r2, r3
 800246a:	693a      	ldr	r2, [r7, #16]
 800246c:	4313      	orrs	r3, r2
 800246e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	693a      	ldr	r2, [r7, #16]
 8002474:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	f003 0303 	and.w	r3, r3, #3
 800247e:	2b02      	cmp	r3, #2
 8002480:	d123      	bne.n	80024ca <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002482:	697b      	ldr	r3, [r7, #20]
 8002484:	08da      	lsrs	r2, r3, #3
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	3208      	adds	r2, #8
 800248a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800248e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002490:	697b      	ldr	r3, [r7, #20]
 8002492:	f003 0307 	and.w	r3, r3, #7
 8002496:	009b      	lsls	r3, r3, #2
 8002498:	220f      	movs	r2, #15
 800249a:	fa02 f303 	lsl.w	r3, r2, r3
 800249e:	43db      	mvns	r3, r3
 80024a0:	693a      	ldr	r2, [r7, #16]
 80024a2:	4013      	ands	r3, r2
 80024a4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	691a      	ldr	r2, [r3, #16]
 80024aa:	697b      	ldr	r3, [r7, #20]
 80024ac:	f003 0307 	and.w	r3, r3, #7
 80024b0:	009b      	lsls	r3, r3, #2
 80024b2:	fa02 f303 	lsl.w	r3, r2, r3
 80024b6:	693a      	ldr	r2, [r7, #16]
 80024b8:	4313      	orrs	r3, r2
 80024ba:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80024bc:	697b      	ldr	r3, [r7, #20]
 80024be:	08da      	lsrs	r2, r3, #3
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	3208      	adds	r2, #8
 80024c4:	6939      	ldr	r1, [r7, #16]
 80024c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80024d0:	697b      	ldr	r3, [r7, #20]
 80024d2:	005b      	lsls	r3, r3, #1
 80024d4:	2203      	movs	r2, #3
 80024d6:	fa02 f303 	lsl.w	r3, r2, r3
 80024da:	43db      	mvns	r3, r3
 80024dc:	693a      	ldr	r2, [r7, #16]
 80024de:	4013      	ands	r3, r2
 80024e0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	f003 0203 	and.w	r2, r3, #3
 80024ea:	697b      	ldr	r3, [r7, #20]
 80024ec:	005b      	lsls	r3, r3, #1
 80024ee:	fa02 f303 	lsl.w	r3, r2, r3
 80024f2:	693a      	ldr	r2, [r7, #16]
 80024f4:	4313      	orrs	r3, r2
 80024f6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	693a      	ldr	r2, [r7, #16]
 80024fc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002506:	2b00      	cmp	r3, #0
 8002508:	f000 808c 	beq.w	8002624 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 800250c:	4a4e      	ldr	r2, [pc, #312]	@ (8002648 <HAL_GPIO_Init+0x2b0>)
 800250e:	697b      	ldr	r3, [r7, #20]
 8002510:	089b      	lsrs	r3, r3, #2
 8002512:	3302      	adds	r3, #2
 8002514:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002518:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 800251a:	697b      	ldr	r3, [r7, #20]
 800251c:	f003 0303 	and.w	r3, r3, #3
 8002520:	009b      	lsls	r3, r3, #2
 8002522:	2207      	movs	r2, #7
 8002524:	fa02 f303 	lsl.w	r3, r2, r3
 8002528:	43db      	mvns	r3, r3
 800252a:	693a      	ldr	r2, [r7, #16]
 800252c:	4013      	ands	r3, r2
 800252e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002536:	d00d      	beq.n	8002554 <HAL_GPIO_Init+0x1bc>
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	4a44      	ldr	r2, [pc, #272]	@ (800264c <HAL_GPIO_Init+0x2b4>)
 800253c:	4293      	cmp	r3, r2
 800253e:	d007      	beq.n	8002550 <HAL_GPIO_Init+0x1b8>
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	4a43      	ldr	r2, [pc, #268]	@ (8002650 <HAL_GPIO_Init+0x2b8>)
 8002544:	4293      	cmp	r3, r2
 8002546:	d101      	bne.n	800254c <HAL_GPIO_Init+0x1b4>
 8002548:	2302      	movs	r3, #2
 800254a:	e004      	b.n	8002556 <HAL_GPIO_Init+0x1be>
 800254c:	2307      	movs	r3, #7
 800254e:	e002      	b.n	8002556 <HAL_GPIO_Init+0x1be>
 8002550:	2301      	movs	r3, #1
 8002552:	e000      	b.n	8002556 <HAL_GPIO_Init+0x1be>
 8002554:	2300      	movs	r3, #0
 8002556:	697a      	ldr	r2, [r7, #20]
 8002558:	f002 0203 	and.w	r2, r2, #3
 800255c:	0092      	lsls	r2, r2, #2
 800255e:	4093      	lsls	r3, r2
 8002560:	693a      	ldr	r2, [r7, #16]
 8002562:	4313      	orrs	r3, r2
 8002564:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002566:	4938      	ldr	r1, [pc, #224]	@ (8002648 <HAL_GPIO_Init+0x2b0>)
 8002568:	697b      	ldr	r3, [r7, #20]
 800256a:	089b      	lsrs	r3, r3, #2
 800256c:	3302      	adds	r3, #2
 800256e:	693a      	ldr	r2, [r7, #16]
 8002570:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002574:	4b37      	ldr	r3, [pc, #220]	@ (8002654 <HAL_GPIO_Init+0x2bc>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	43db      	mvns	r3, r3
 800257e:	693a      	ldr	r2, [r7, #16]
 8002580:	4013      	ands	r3, r2
 8002582:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800258c:	2b00      	cmp	r3, #0
 800258e:	d003      	beq.n	8002598 <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 8002590:	693a      	ldr	r2, [r7, #16]
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	4313      	orrs	r3, r2
 8002596:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002598:	4a2e      	ldr	r2, [pc, #184]	@ (8002654 <HAL_GPIO_Init+0x2bc>)
 800259a:	693b      	ldr	r3, [r7, #16]
 800259c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800259e:	4b2d      	ldr	r3, [pc, #180]	@ (8002654 <HAL_GPIO_Init+0x2bc>)
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	43db      	mvns	r3, r3
 80025a8:	693a      	ldr	r2, [r7, #16]
 80025aa:	4013      	ands	r3, r2
 80025ac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d003      	beq.n	80025c2 <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 80025ba:	693a      	ldr	r2, [r7, #16]
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	4313      	orrs	r3, r2
 80025c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80025c2:	4a24      	ldr	r2, [pc, #144]	@ (8002654 <HAL_GPIO_Init+0x2bc>)
 80025c4:	693b      	ldr	r3, [r7, #16]
 80025c6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 80025c8:	4b22      	ldr	r3, [pc, #136]	@ (8002654 <HAL_GPIO_Init+0x2bc>)
 80025ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80025ce:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	43db      	mvns	r3, r3
 80025d4:	693a      	ldr	r2, [r7, #16]
 80025d6:	4013      	ands	r3, r2
 80025d8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d003      	beq.n	80025ee <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 80025e6:	693a      	ldr	r2, [r7, #16]
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	4313      	orrs	r3, r2
 80025ec:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 80025ee:	4a19      	ldr	r2, [pc, #100]	@ (8002654 <HAL_GPIO_Init+0x2bc>)
 80025f0:	693b      	ldr	r3, [r7, #16]
 80025f2:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 80025f6:	4b17      	ldr	r3, [pc, #92]	@ (8002654 <HAL_GPIO_Init+0x2bc>)
 80025f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80025fc:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	43db      	mvns	r3, r3
 8002602:	693a      	ldr	r2, [r7, #16]
 8002604:	4013      	ands	r3, r2
 8002606:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002610:	2b00      	cmp	r3, #0
 8002612:	d003      	beq.n	800261c <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8002614:	693a      	ldr	r2, [r7, #16]
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	4313      	orrs	r3, r2
 800261a:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 800261c:	4a0d      	ldr	r2, [pc, #52]	@ (8002654 <HAL_GPIO_Init+0x2bc>)
 800261e:	693b      	ldr	r3, [r7, #16]
 8002620:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 8002624:	697b      	ldr	r3, [r7, #20]
 8002626:	3301      	adds	r3, #1
 8002628:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	681a      	ldr	r2, [r3, #0]
 800262e:	697b      	ldr	r3, [r7, #20]
 8002630:	fa22 f303 	lsr.w	r3, r2, r3
 8002634:	2b00      	cmp	r3, #0
 8002636:	f47f aeb7 	bne.w	80023a8 <HAL_GPIO_Init+0x10>
  }
}
 800263a:	bf00      	nop
 800263c:	bf00      	nop
 800263e:	371c      	adds	r7, #28
 8002640:	46bd      	mov	sp, r7
 8002642:	bc80      	pop	{r7}
 8002644:	4770      	bx	lr
 8002646:	bf00      	nop
 8002648:	40010000 	.word	0x40010000
 800264c:	48000400 	.word	0x48000400
 8002650:	48000800 	.word	0x48000800
 8002654:	58000800 	.word	0x58000800

08002658 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002658:	b480      	push	{r7}
 800265a:	b083      	sub	sp, #12
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
 8002660:	460b      	mov	r3, r1
 8002662:	807b      	strh	r3, [r7, #2]
 8002664:	4613      	mov	r3, r2
 8002666:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002668:	787b      	ldrb	r3, [r7, #1]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d003      	beq.n	8002676 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800266e:	887a      	ldrh	r2, [r7, #2]
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002674:	e002      	b.n	800267c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002676:	887a      	ldrh	r2, [r7, #2]
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800267c:	bf00      	nop
 800267e:	370c      	adds	r7, #12
 8002680:	46bd      	mov	sp, r7
 8002682:	bc80      	pop	{r7}
 8002684:	4770      	bx	lr
	...

08002688 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002688:	b480      	push	{r7}
 800268a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800268c:	4b04      	ldr	r3, [pc, #16]	@ (80026a0 <HAL_PWR_EnableBkUpAccess+0x18>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4a03      	ldr	r2, [pc, #12]	@ (80026a0 <HAL_PWR_EnableBkUpAccess+0x18>)
 8002692:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002696:	6013      	str	r3, [r2, #0]
}
 8002698:	bf00      	nop
 800269a:	46bd      	mov	sp, r7
 800269c:	bc80      	pop	{r7}
 800269e:	4770      	bx	lr
 80026a0:	58000400 	.word	0x58000400

080026a4 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80026a4:	b480      	push	{r7}
 80026a6:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 80026a8:	4b03      	ldr	r3, [pc, #12]	@ (80026b8 <HAL_PWREx_GetVoltageRange+0x14>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 80026b0:	4618      	mov	r0, r3
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bc80      	pop	{r7}
 80026b6:	4770      	bx	lr
 80026b8:	58000400 	.word	0x58000400

080026bc <LL_PWR_IsEnabledBkUpAccess>:
  * @brief  Check if the backup domain is enabled
  * @rmtoll CR1          DBP           LL_PWR_IsEnabledBkUpAccess
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsEnabledBkUpAccess(void)
{
 80026bc:	b480      	push	{r7}
 80026be:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 80026c0:	4b06      	ldr	r3, [pc, #24]	@ (80026dc <LL_PWR_IsEnabledBkUpAccess+0x20>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026c8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80026cc:	d101      	bne.n	80026d2 <LL_PWR_IsEnabledBkUpAccess+0x16>
 80026ce:	2301      	movs	r3, #1
 80026d0:	e000      	b.n	80026d4 <LL_PWR_IsEnabledBkUpAccess+0x18>
 80026d2:	2300      	movs	r3, #0
}
 80026d4:	4618      	mov	r0, r3
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bc80      	pop	{r7}
 80026da:	4770      	bx	lr
 80026dc:	58000400 	.word	0x58000400

080026e0 <LL_RCC_HSE_EnableTcxo>:
  * @note PB0 must be configured in analog mode prior enabling VDDTCXO supply
  * @rmtoll CR           HSEBYPPWR        LL_RCC_HSE_EnableTcxo
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_EnableTcxo(void)
{
 80026e0:	b480      	push	{r7}
 80026e2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 80026e4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80026ee:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80026f2:	6013      	str	r3, [r2, #0]
}
 80026f4:	bf00      	nop
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bc80      	pop	{r7}
 80026fa:	4770      	bx	lr

080026fc <LL_RCC_HSE_DisableTcxo>:
  * @brief  Disable HSE VDDTCXO output on package pin PB0-VDDTCXO
  * @rmtoll CR           HSEBYPPWR        LL_RCC_HSE_DisableTcxo
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_DisableTcxo(void)
{
 80026fc:	b480      	push	{r7}
 80026fe:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8002700:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800270a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800270e:	6013      	str	r3, [r2, #0]
}
 8002710:	bf00      	nop
 8002712:	46bd      	mov	sp, r7
 8002714:	bc80      	pop	{r7}
 8002716:	4770      	bx	lr

08002718 <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler  division by 2
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 8002718:	b480      	push	{r7}
 800271a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 800271c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002726:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800272a:	d101      	bne.n	8002730 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 800272c:	2301      	movs	r3, #1
 800272e:	e000      	b.n	8002732 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8002730:	2300      	movs	r3, #0
}
 8002732:	4618      	mov	r0, r3
 8002734:	46bd      	mov	sp, r7
 8002736:	bc80      	pop	{r7}
 8002738:	4770      	bx	lr

0800273a <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 800273a:	b480      	push	{r7}
 800273c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800273e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002748:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800274c:	6013      	str	r3, [r2, #0]
}
 800274e:	bf00      	nop
 8002750:	46bd      	mov	sp, r7
 8002752:	bc80      	pop	{r7}
 8002754:	4770      	bx	lr

08002756 <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 8002756:	b480      	push	{r7}
 8002758:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800275a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002764:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002768:	6013      	str	r3, [r2, #0]
}
 800276a:	bf00      	nop
 800276c:	46bd      	mov	sp, r7
 800276e:	bc80      	pop	{r7}
 8002770:	4770      	bx	lr

08002772 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8002772:	b480      	push	{r7}
 8002774:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8002776:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002780:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002784:	d101      	bne.n	800278a <LL_RCC_HSE_IsReady+0x18>
 8002786:	2301      	movs	r3, #1
 8002788:	e000      	b.n	800278c <LL_RCC_HSE_IsReady+0x1a>
 800278a:	2300      	movs	r3, #0
}
 800278c:	4618      	mov	r0, r3
 800278e:	46bd      	mov	sp, r7
 8002790:	bc80      	pop	{r7}
 8002792:	4770      	bx	lr

08002794 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8002794:	b480      	push	{r7}
 8002796:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8002798:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80027a2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80027a6:	6013      	str	r3, [r2, #0]
}
 80027a8:	bf00      	nop
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bc80      	pop	{r7}
 80027ae:	4770      	bx	lr

080027b0 <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 80027b0:	b480      	push	{r7}
 80027b2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 80027b4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80027be:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80027c2:	6013      	str	r3, [r2, #0]
}
 80027c4:	bf00      	nop
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bc80      	pop	{r7}
 80027ca:	4770      	bx	lr

080027cc <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 80027cc:	b480      	push	{r7}
 80027ce:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80027d0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80027da:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80027de:	d101      	bne.n	80027e4 <LL_RCC_HSI_IsReady+0x18>
 80027e0:	2301      	movs	r3, #1
 80027e2:	e000      	b.n	80027e6 <LL_RCC_HSI_IsReady+0x1a>
 80027e4:	2300      	movs	r3, #0
}
 80027e6:	4618      	mov	r0, r3
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bc80      	pop	{r7}
 80027ec:	4770      	bx	lr

080027ee <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 80027ee:	b480      	push	{r7}
 80027f0:	b083      	sub	sp, #12
 80027f2:	af00      	add	r7, sp, #0
 80027f4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80027f6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	061b      	lsls	r3, r3, #24
 8002804:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002808:	4313      	orrs	r3, r2
 800280a:	604b      	str	r3, [r1, #4]
}
 800280c:	bf00      	nop
 800280e:	370c      	adds	r7, #12
 8002810:	46bd      	mov	sp, r7
 8002812:	bc80      	pop	{r7}
 8002814:	4770      	bx	lr

08002816 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8002816:	b480      	push	{r7}
 8002818:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800281a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800281e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002822:	f003 0302 	and.w	r3, r3, #2
 8002826:	2b02      	cmp	r3, #2
 8002828:	d101      	bne.n	800282e <LL_RCC_LSE_IsReady+0x18>
 800282a:	2301      	movs	r3, #1
 800282c:	e000      	b.n	8002830 <LL_RCC_LSE_IsReady+0x1a>
 800282e:	2300      	movs	r3, #0
}
 8002830:	4618      	mov	r0, r3
 8002832:	46bd      	mov	sp, r7
 8002834:	bc80      	pop	{r7}
 8002836:	4770      	bx	lr

08002838 <LL_RCC_LSI_Enable>:
  * @brief  Enable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Enable(void)
{
 8002838:	b480      	push	{r7}
 800283a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 800283c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002840:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002844:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002848:	f043 0301 	orr.w	r3, r3, #1
 800284c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8002850:	bf00      	nop
 8002852:	46bd      	mov	sp, r7
 8002854:	bc80      	pop	{r7}
 8002856:	4770      	bx	lr

08002858 <LL_RCC_LSI_Disable>:
  * @brief  Disable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Disable(void)
{
 8002858:	b480      	push	{r7}
 800285a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 800285c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002860:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002864:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002868:	f023 0301 	bic.w	r3, r3, #1
 800286c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8002870:	bf00      	nop
 8002872:	46bd      	mov	sp, r7
 8002874:	bc80      	pop	{r7}
 8002876:	4770      	bx	lr

08002878 <LL_RCC_LSI_IsReady>:
  * @brief  Check if LSI is Ready
  * @rmtoll CSR          LSIRDY        LL_RCC_LSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI_IsReady(void)
{
 8002878:	b480      	push	{r7}
 800287a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 800287c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002880:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002884:	f003 0302 	and.w	r3, r3, #2
 8002888:	2b02      	cmp	r3, #2
 800288a:	d101      	bne.n	8002890 <LL_RCC_LSI_IsReady+0x18>
 800288c:	2301      	movs	r3, #1
 800288e:	e000      	b.n	8002892 <LL_RCC_LSI_IsReady+0x1a>
 8002890:	2300      	movs	r3, #0
}
 8002892:	4618      	mov	r0, r3
 8002894:	46bd      	mov	sp, r7
 8002896:	bc80      	pop	{r7}
 8002898:	4770      	bx	lr

0800289a <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 800289a:	b480      	push	{r7}
 800289c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 800289e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80028a8:	f043 0301 	orr.w	r3, r3, #1
 80028ac:	6013      	str	r3, [r2, #0]
}
 80028ae:	bf00      	nop
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bc80      	pop	{r7}
 80028b4:	4770      	bx	lr

080028b6 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 80028b6:	b480      	push	{r7}
 80028b8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80028ba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80028c4:	f023 0301 	bic.w	r3, r3, #1
 80028c8:	6013      	str	r3, [r2, #0]
}
 80028ca:	bf00      	nop
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bc80      	pop	{r7}
 80028d0:	4770      	bx	lr

080028d2 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 80028d2:	b480      	push	{r7}
 80028d4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80028d6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f003 0302 	and.w	r3, r3, #2
 80028e0:	2b02      	cmp	r3, #2
 80028e2:	d101      	bne.n	80028e8 <LL_RCC_MSI_IsReady+0x16>
 80028e4:	2301      	movs	r3, #1
 80028e6:	e000      	b.n	80028ea <LL_RCC_MSI_IsReady+0x18>
 80028e8:	2300      	movs	r3, #0
}
 80028ea:	4618      	mov	r0, r3
 80028ec:	46bd      	mov	sp, r7
 80028ee:	bc80      	pop	{r7}
 80028f0:	4770      	bx	lr

080028f2 <LL_RCC_MSI_IsEnabledRangeSelect>:
  * @brief  Check if MSI clock range is selected with MSIRANGE register
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_IsEnabledRangeSelect
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsEnabledRangeSelect(void)
{
 80028f2:	b480      	push	{r7}
 80028f4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 80028f6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f003 0308 	and.w	r3, r3, #8
 8002900:	2b08      	cmp	r3, #8
 8002902:	d101      	bne.n	8002908 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8002904:	2301      	movs	r3, #1
 8002906:	e000      	b.n	800290a <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8002908:	2300      	movs	r3, #0
}
 800290a:	4618      	mov	r0, r3
 800290c:	46bd      	mov	sp, r7
 800290e:	bc80      	pop	{r7}
 8002910:	4770      	bx	lr

08002912 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8002912:	b480      	push	{r7}
 8002914:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8002916:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8002920:	4618      	mov	r0, r3
 8002922:	46bd      	mov	sp, r7
 8002924:	bc80      	pop	{r7}
 8002926:	4770      	bx	lr

08002928 <LL_RCC_MSI_GetRangeAfterStandby>:
  *         @arg @ref LL_RCC_MSISRANGE_5
  *         @arg @ref LL_RCC_MSISRANGE_6
  *         @arg @ref LL_RCC_MSISRANGE_7
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRangeAfterStandby(void)
{
 8002928:	b480      	push	{r7}
 800292a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 800292c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002930:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002934:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
}
 8002938:	4618      	mov	r0, r3
 800293a:	46bd      	mov	sp, r7
 800293c:	bc80      	pop	{r7}
 800293e:	4770      	bx	lr

08002940 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8002940:	b480      	push	{r7}
 8002942:	b083      	sub	sp, #12
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8002948:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	021b      	lsls	r3, r3, #8
 8002956:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800295a:	4313      	orrs	r3, r2
 800295c:	604b      	str	r3, [r1, #4]
}
 800295e:	bf00      	nop
 8002960:	370c      	adds	r7, #12
 8002962:	46bd      	mov	sp, r7
 8002964:	bc80      	pop	{r7}
 8002966:	4770      	bx	lr

08002968 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8002968:	b480      	push	{r7}
 800296a:	b083      	sub	sp, #12
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8002970:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002974:	689b      	ldr	r3, [r3, #8]
 8002976:	f023 0203 	bic.w	r2, r3, #3
 800297a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	4313      	orrs	r3, r2
 8002982:	608b      	str	r3, [r1, #8]
}
 8002984:	bf00      	nop
 8002986:	370c      	adds	r7, #12
 8002988:	46bd      	mov	sp, r7
 800298a:	bc80      	pop	{r7}
 800298c:	4770      	bx	lr

0800298e <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 800298e:	b480      	push	{r7}
 8002990:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002992:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002996:	689b      	ldr	r3, [r3, #8]
 8002998:	f003 030c 	and.w	r3, r3, #12
}
 800299c:	4618      	mov	r0, r3
 800299e:	46bd      	mov	sp, r7
 80029a0:	bc80      	pop	{r7}
 80029a2:	4770      	bx	lr

080029a4 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80029a4:	b480      	push	{r7}
 80029a6:	b083      	sub	sp, #12
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80029ac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80029b0:	689b      	ldr	r3, [r3, #8]
 80029b2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80029b6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	4313      	orrs	r3, r2
 80029be:	608b      	str	r3, [r1, #8]
}
 80029c0:	bf00      	nop
 80029c2:	370c      	adds	r7, #12
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bc80      	pop	{r7}
 80029c8:	4770      	bx	lr

080029ca <LL_RCC_SetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB3Prescaler(uint32_t Prescaler)
{
 80029ca:	b480      	push	{r7}
 80029cc:	b083      	sub	sp, #12
 80029ce:	af00      	add	r7, sp, #0
 80029d0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80029d2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80029d6:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80029da:	f023 020f 	bic.w	r2, r3, #15
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	091b      	lsrs	r3, r3, #4
 80029e2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80029e6:	4313      	orrs	r3, r2
 80029e8:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 80029ec:	bf00      	nop
 80029ee:	370c      	adds	r7, #12
 80029f0:	46bd      	mov	sp, r7
 80029f2:	bc80      	pop	{r7}
 80029f4:	4770      	bx	lr

080029f6 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80029f6:	b480      	push	{r7}
 80029f8:	b083      	sub	sp, #12
 80029fa:	af00      	add	r7, sp, #0
 80029fc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80029fe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a02:	689b      	ldr	r3, [r3, #8]
 8002a04:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002a08:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	608b      	str	r3, [r1, #8]
}
 8002a12:	bf00      	nop
 8002a14:	370c      	adds	r7, #12
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bc80      	pop	{r7}
 8002a1a:	4770      	bx	lr

08002a1c <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	b083      	sub	sp, #12
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8002a24:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a28:	689b      	ldr	r3, [r3, #8]
 8002a2a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002a2e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	4313      	orrs	r3, r2
 8002a36:	608b      	str	r3, [r1, #8]
}
 8002a38:	bf00      	nop
 8002a3a:	370c      	adds	r7, #12
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	bc80      	pop	{r7}
 8002a40:	4770      	bx	lr

08002a42 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8002a42:	b480      	push	{r7}
 8002a44:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002a46:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a4a:	689b      	ldr	r3, [r3, #8]
 8002a4c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8002a50:	4618      	mov	r0, r3
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bc80      	pop	{r7}
 8002a56:	4770      	bx	lr

08002a58 <LL_RCC_GetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB3Prescaler(void)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8002a5c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a60:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8002a64:	011b      	lsls	r3, r3, #4
 8002a66:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	bc80      	pop	{r7}
 8002a70:	4770      	bx	lr

08002a72 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8002a72:	b480      	push	{r7}
 8002a74:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8002a76:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a7a:	689b      	ldr	r3, [r3, #8]
 8002a7c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 8002a80:	4618      	mov	r0, r3
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bc80      	pop	{r7}
 8002a86:	4770      	bx	lr

08002a88 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8002a8c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a90:	689b      	ldr	r3, [r3, #8]
 8002a92:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 8002a96:	4618      	mov	r0, r3
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	bc80      	pop	{r7}
 8002a9c:	4770      	bx	lr

08002a9e <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8002a9e:	b480      	push	{r7}
 8002aa0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8002aa2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002aac:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002ab0:	6013      	str	r3, [r2, #0]
}
 8002ab2:	bf00      	nop
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	bc80      	pop	{r7}
 8002ab8:	4770      	bx	lr

08002aba <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8002aba:	b480      	push	{r7}
 8002abc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8002abe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002ac8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002acc:	6013      	str	r3, [r2, #0]
}
 8002ace:	bf00      	nop
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	bc80      	pop	{r7}
 8002ad4:	4770      	bx	lr

08002ad6 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8002ad6:	b480      	push	{r7}
 8002ad8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8002ada:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ae4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002ae8:	d101      	bne.n	8002aee <LL_RCC_PLL_IsReady+0x18>
 8002aea:	2301      	movs	r3, #1
 8002aec:	e000      	b.n	8002af0 <LL_RCC_PLL_IsReady+0x1a>
 8002aee:	2300      	movs	r3, #0
}
 8002af0:	4618      	mov	r0, r3
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bc80      	pop	{r7}
 8002af6:	4770      	bx	lr

08002af8 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8002af8:	b480      	push	{r7}
 8002afa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8002afc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b00:	68db      	ldr	r3, [r3, #12]
 8002b02:	0a1b      	lsrs	r3, r3, #8
 8002b04:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 8002b08:	4618      	mov	r0, r3
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bc80      	pop	{r7}
 8002b0e:	4770      	bx	lr

08002b10 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8002b10:	b480      	push	{r7}
 8002b12:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8002b14:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b18:	68db      	ldr	r3, [r3, #12]
 8002b1a:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 8002b1e:	4618      	mov	r0, r3
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bc80      	pop	{r7}
 8002b24:	4770      	bx	lr

08002b26 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8002b26:	b480      	push	{r7}
 8002b28:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8002b2a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b2e:	68db      	ldr	r3, [r3, #12]
 8002b30:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 8002b34:	4618      	mov	r0, r3
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bc80      	pop	{r7}
 8002b3a:	4770      	bx	lr

08002b3c <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8002b40:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b44:	68db      	ldr	r3, [r3, #12]
 8002b46:	f003 0303 	and.w	r3, r3, #3
}
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	bc80      	pop	{r7}
 8002b50:	4770      	bx	lr

08002b52 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8002b52:	b480      	push	{r7}
 8002b54:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8002b56:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b5a:	689b      	ldr	r3, [r3, #8]
 8002b5c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b60:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002b64:	d101      	bne.n	8002b6a <LL_RCC_IsActiveFlag_HPRE+0x18>
 8002b66:	2301      	movs	r3, #1
 8002b68:	e000      	b.n	8002b6c <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8002b6a:	2300      	movs	r3, #0
}
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bc80      	pop	{r7}
 8002b72:	4770      	bx	lr

08002b74 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8002b74:	b480      	push	{r7}
 8002b76:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8002b78:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b7c:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8002b80:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b84:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002b88:	d101      	bne.n	8002b8e <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	e000      	b.n	8002b90 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8002b8e:	2300      	movs	r3, #0
}
 8002b90:	4618      	mov	r0, r3
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bc80      	pop	{r7}
 8002b96:	4770      	bx	lr

08002b98 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8002b9c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ba0:	689b      	ldr	r3, [r3, #8]
 8002ba2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ba6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002baa:	d101      	bne.n	8002bb0 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8002bac:	2301      	movs	r3, #1
 8002bae:	e000      	b.n	8002bb2 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8002bb0:	2300      	movs	r3, #0
}
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	bc80      	pop	{r7}
 8002bb8:	4770      	bx	lr

08002bba <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8002bba:	b480      	push	{r7}
 8002bbc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8002bbe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002bc2:	689b      	ldr	r3, [r3, #8]
 8002bc4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002bc8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002bcc:	d101      	bne.n	8002bd2 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8002bce:	2301      	movs	r3, #1
 8002bd0:	e000      	b.n	8002bd4 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8002bd2:	2300      	movs	r3, #0
}
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bc80      	pop	{r7}
 8002bda:	4770      	bx	lr

08002bdc <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b088      	sub	sp, #32
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d101      	bne.n	8002bee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002bea:	2301      	movs	r3, #1
 8002bec:	e36f      	b.n	80032ce <HAL_RCC_OscConfig+0x6f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002bee:	f7ff fece 	bl	800298e <LL_RCC_GetSysClkSource>
 8002bf2:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002bf4:	f7ff ffa2 	bl	8002b3c <LL_RCC_PLL_GetMainSource>
 8002bf8:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f003 0320 	and.w	r3, r3, #32
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	f000 80c4 	beq.w	8002d90 <HAL_RCC_OscConfig+0x1b4>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002c08:	69fb      	ldr	r3, [r7, #28]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d005      	beq.n	8002c1a <HAL_RCC_OscConfig+0x3e>
 8002c0e:	69fb      	ldr	r3, [r7, #28]
 8002c10:	2b0c      	cmp	r3, #12
 8002c12:	d176      	bne.n	8002d02 <HAL_RCC_OscConfig+0x126>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002c14:	69bb      	ldr	r3, [r7, #24]
 8002c16:	2b01      	cmp	r3, #1
 8002c18:	d173      	bne.n	8002d02 <HAL_RCC_OscConfig+0x126>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6a1b      	ldr	r3, [r3, #32]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d101      	bne.n	8002c26 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8002c22:	2301      	movs	r3, #1
 8002c24:	e353      	b.n	80032ce <HAL_RCC_OscConfig+0x6f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002c2a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f003 0308 	and.w	r3, r3, #8
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d005      	beq.n	8002c44 <HAL_RCC_OscConfig+0x68>
 8002c38:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002c42:	e006      	b.n	8002c52 <HAL_RCC_OscConfig+0x76>
 8002c44:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c48:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002c4c:	091b      	lsrs	r3, r3, #4
 8002c4e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d222      	bcs.n	8002c9c <HAL_RCC_OscConfig+0xc0>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	f000 fd3c 	bl	80036d8 <RCC_SetFlashLatencyFromMSIRange>
 8002c60:	4603      	mov	r3, r0
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d001      	beq.n	8002c6a <HAL_RCC_OscConfig+0x8e>
          {
            return HAL_ERROR;
 8002c66:	2301      	movs	r3, #1
 8002c68:	e331      	b.n	80032ce <HAL_RCC_OscConfig+0x6f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002c6a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002c74:	f043 0308 	orr.w	r3, r3, #8
 8002c78:	6013      	str	r3, [r2, #0]
 8002c7a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c88:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002c8c:	4313      	orrs	r3, r2
 8002c8e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c94:	4618      	mov	r0, r3
 8002c96:	f7ff fe53 	bl	8002940 <LL_RCC_MSI_SetCalibTrimming>
 8002c9a:	e021      	b.n	8002ce0 <HAL_RCC_OscConfig+0x104>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range. */
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002c9c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002ca6:	f043 0308 	orr.w	r3, r3, #8
 8002caa:	6013      	str	r3, [r2, #0]
 8002cac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cba:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002cbe:	4313      	orrs	r3, r2
 8002cc0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	f7ff fe3a 	bl	8002940 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	f000 fd01 	bl	80036d8 <RCC_SetFlashLatencyFromMSIRange>
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d001      	beq.n	8002ce0 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_ERROR;
 8002cdc:	2301      	movs	r3, #1
 8002cde:	e2f6      	b.n	80032ce <HAL_RCC_OscConfig+0x6f2>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002ce0:	f000 fcc2 	bl	8003668 <HAL_RCC_GetHCLKFreq>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	4aa7      	ldr	r2, [pc, #668]	@ (8002f84 <HAL_RCC_OscConfig+0x3a8>)
 8002ce8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings */
        status = HAL_InitTick(uwTickPrio);
 8002cea:	4ba7      	ldr	r3, [pc, #668]	@ (8002f88 <HAL_RCC_OscConfig+0x3ac>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4618      	mov	r0, r3
 8002cf0:	f7ff f910 	bl	8001f14 <HAL_InitTick>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8002cf8:	7cfb      	ldrb	r3, [r7, #19]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d047      	beq.n	8002d8e <HAL_RCC_OscConfig+0x1b2>
        {
          return status;
 8002cfe:	7cfb      	ldrb	r3, [r7, #19]
 8002d00:	e2e5      	b.n	80032ce <HAL_RCC_OscConfig+0x6f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6a1b      	ldr	r3, [r3, #32]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d02c      	beq.n	8002d64 <HAL_RCC_OscConfig+0x188>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002d0a:	f7ff fdc6 	bl	800289a <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002d0e:	f7ff f94d 	bl	8001fac <HAL_GetTick>
 8002d12:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8002d14:	e008      	b.n	8002d28 <HAL_RCC_OscConfig+0x14c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002d16:	f7ff f949 	bl	8001fac <HAL_GetTick>
 8002d1a:	4602      	mov	r2, r0
 8002d1c:	697b      	ldr	r3, [r7, #20]
 8002d1e:	1ad3      	subs	r3, r2, r3
 8002d20:	2b02      	cmp	r3, #2
 8002d22:	d901      	bls.n	8002d28 <HAL_RCC_OscConfig+0x14c>
          {
            return HAL_TIMEOUT;
 8002d24:	2303      	movs	r3, #3
 8002d26:	e2d2      	b.n	80032ce <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() == 0U)
 8002d28:	f7ff fdd3 	bl	80028d2 <LL_RCC_MSI_IsReady>
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d0f1      	beq.n	8002d16 <HAL_RCC_OscConfig+0x13a>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range. */
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002d32:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002d3c:	f043 0308 	orr.w	r3, r3, #8
 8002d40:	6013      	str	r3, [r2, #0]
 8002d42:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d50:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002d54:	4313      	orrs	r3, r2
 8002d56:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value. */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	f7ff fdef 	bl	8002940 <LL_RCC_MSI_SetCalibTrimming>
 8002d62:	e015      	b.n	8002d90 <HAL_RCC_OscConfig+0x1b4>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002d64:	f7ff fda7 	bl	80028b6 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002d68:	f7ff f920 	bl	8001fac <HAL_GetTick>
 8002d6c:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8002d6e:	e008      	b.n	8002d82 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002d70:	f7ff f91c 	bl	8001fac <HAL_GetTick>
 8002d74:	4602      	mov	r2, r0
 8002d76:	697b      	ldr	r3, [r7, #20]
 8002d78:	1ad3      	subs	r3, r2, r3
 8002d7a:	2b02      	cmp	r3, #2
 8002d7c:	d901      	bls.n	8002d82 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8002d7e:	2303      	movs	r3, #3
 8002d80:	e2a5      	b.n	80032ce <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() != 0U)
 8002d82:	f7ff fda6 	bl	80028d2 <LL_RCC_MSI_IsReady>
 8002d86:	4603      	mov	r3, r0
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d1f1      	bne.n	8002d70 <HAL_RCC_OscConfig+0x194>
 8002d8c:	e000      	b.n	8002d90 <HAL_RCC_OscConfig+0x1b4>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8002d8e:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f003 0301 	and.w	r3, r3, #1
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d058      	beq.n	8002e4e <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8002d9c:	69fb      	ldr	r3, [r7, #28]
 8002d9e:	2b08      	cmp	r3, #8
 8002da0:	d005      	beq.n	8002dae <HAL_RCC_OscConfig+0x1d2>
 8002da2:	69fb      	ldr	r3, [r7, #28]
 8002da4:	2b0c      	cmp	r3, #12
 8002da6:	d108      	bne.n	8002dba <HAL_RCC_OscConfig+0x1de>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002da8:	69bb      	ldr	r3, [r7, #24]
 8002daa:	2b03      	cmp	r3, #3
 8002dac:	d105      	bne.n	8002dba <HAL_RCC_OscConfig+0x1de>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d14b      	bne.n	8002e4e <HAL_RCC_OscConfig+0x272>
      {
        return HAL_ERROR;
 8002db6:	2301      	movs	r3, #1
 8002db8:	e289      	b.n	80032ce <HAL_RCC_OscConfig+0x6f2>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 8002dba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	689b      	ldr	r3, [r3, #8]
 8002dc8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002dcc:	4313      	orrs	r3, r2
 8002dce:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002dd8:	d102      	bne.n	8002de0 <HAL_RCC_OscConfig+0x204>
 8002dda:	f7ff fcae 	bl	800273a <LL_RCC_HSE_Enable>
 8002dde:	e00d      	b.n	8002dfc <HAL_RCC_OscConfig+0x220>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	f5b3 1f04 	cmp.w	r3, #2162688	@ 0x210000
 8002de8:	d104      	bne.n	8002df4 <HAL_RCC_OscConfig+0x218>
 8002dea:	f7ff fc79 	bl	80026e0 <LL_RCC_HSE_EnableTcxo>
 8002dee:	f7ff fca4 	bl	800273a <LL_RCC_HSE_Enable>
 8002df2:	e003      	b.n	8002dfc <HAL_RCC_OscConfig+0x220>
 8002df4:	f7ff fcaf 	bl	8002756 <LL_RCC_HSE_Disable>
 8002df8:	f7ff fc80 	bl	80026fc <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d012      	beq.n	8002e2a <HAL_RCC_OscConfig+0x24e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e04:	f7ff f8d2 	bl	8001fac <HAL_GetTick>
 8002e08:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8002e0a:	e008      	b.n	8002e1e <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e0c:	f7ff f8ce 	bl	8001fac <HAL_GetTick>
 8002e10:	4602      	mov	r2, r0
 8002e12:	697b      	ldr	r3, [r7, #20]
 8002e14:	1ad3      	subs	r3, r2, r3
 8002e16:	2b64      	cmp	r3, #100	@ 0x64
 8002e18:	d901      	bls.n	8002e1e <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 8002e1a:	2303      	movs	r3, #3
 8002e1c:	e257      	b.n	80032ce <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() == 0U)
 8002e1e:	f7ff fca8 	bl	8002772 <LL_RCC_HSE_IsReady>
 8002e22:	4603      	mov	r3, r0
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d0f1      	beq.n	8002e0c <HAL_RCC_OscConfig+0x230>
 8002e28:	e011      	b.n	8002e4e <HAL_RCC_OscConfig+0x272>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e2a:	f7ff f8bf 	bl	8001fac <HAL_GetTick>
 8002e2e:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8002e30:	e008      	b.n	8002e44 <HAL_RCC_OscConfig+0x268>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e32:	f7ff f8bb 	bl	8001fac <HAL_GetTick>
 8002e36:	4602      	mov	r2, r0
 8002e38:	697b      	ldr	r3, [r7, #20]
 8002e3a:	1ad3      	subs	r3, r2, r3
 8002e3c:	2b64      	cmp	r3, #100	@ 0x64
 8002e3e:	d901      	bls.n	8002e44 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8002e40:	2303      	movs	r3, #3
 8002e42:	e244      	b.n	80032ce <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() != 0U)
 8002e44:	f7ff fc95 	bl	8002772 <LL_RCC_HSE_IsReady>
 8002e48:	4603      	mov	r3, r0
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d1f1      	bne.n	8002e32 <HAL_RCC_OscConfig+0x256>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f003 0302 	and.w	r3, r3, #2
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d046      	beq.n	8002ee8 <HAL_RCC_OscConfig+0x30c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8002e5a:	69fb      	ldr	r3, [r7, #28]
 8002e5c:	2b04      	cmp	r3, #4
 8002e5e:	d005      	beq.n	8002e6c <HAL_RCC_OscConfig+0x290>
 8002e60:	69fb      	ldr	r3, [r7, #28]
 8002e62:	2b0c      	cmp	r3, #12
 8002e64:	d10e      	bne.n	8002e84 <HAL_RCC_OscConfig+0x2a8>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002e66:	69bb      	ldr	r3, [r7, #24]
 8002e68:	2b02      	cmp	r3, #2
 8002e6a:	d10b      	bne.n	8002e84 <HAL_RCC_OscConfig+0x2a8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	691b      	ldr	r3, [r3, #16]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d101      	bne.n	8002e78 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8002e74:	2301      	movs	r3, #1
 8002e76:	e22a      	b.n	80032ce <HAL_RCC_OscConfig+0x6f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	695b      	ldr	r3, [r3, #20]
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	f7ff fcb6 	bl	80027ee <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002e82:	e031      	b.n	8002ee8 <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	691b      	ldr	r3, [r3, #16]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d019      	beq.n	8002ec0 <HAL_RCC_OscConfig+0x2e4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e8c:	f7ff fc82 	bl	8002794 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e90:	f7ff f88c 	bl	8001fac <HAL_GetTick>
 8002e94:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8002e96:	e008      	b.n	8002eaa <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e98:	f7ff f888 	bl	8001fac <HAL_GetTick>
 8002e9c:	4602      	mov	r2, r0
 8002e9e:	697b      	ldr	r3, [r7, #20]
 8002ea0:	1ad3      	subs	r3, r2, r3
 8002ea2:	2b02      	cmp	r3, #2
 8002ea4:	d901      	bls.n	8002eaa <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 8002ea6:	2303      	movs	r3, #3
 8002ea8:	e211      	b.n	80032ce <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() == 0U)
 8002eaa:	f7ff fc8f 	bl	80027cc <LL_RCC_HSI_IsReady>
 8002eae:	4603      	mov	r3, r0
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d0f1      	beq.n	8002e98 <HAL_RCC_OscConfig+0x2bc>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	695b      	ldr	r3, [r3, #20]
 8002eb8:	4618      	mov	r0, r3
 8002eba:	f7ff fc98 	bl	80027ee <LL_RCC_HSI_SetCalibTrimming>
 8002ebe:	e013      	b.n	8002ee8 <HAL_RCC_OscConfig+0x30c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ec0:	f7ff fc76 	bl	80027b0 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ec4:	f7ff f872 	bl	8001fac <HAL_GetTick>
 8002ec8:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8002eca:	e008      	b.n	8002ede <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ecc:	f7ff f86e 	bl	8001fac <HAL_GetTick>
 8002ed0:	4602      	mov	r2, r0
 8002ed2:	697b      	ldr	r3, [r7, #20]
 8002ed4:	1ad3      	subs	r3, r2, r3
 8002ed6:	2b02      	cmp	r3, #2
 8002ed8:	d901      	bls.n	8002ede <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 8002eda:	2303      	movs	r3, #3
 8002edc:	e1f7      	b.n	80032ce <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() != 0U)
 8002ede:	f7ff fc75 	bl	80027cc <LL_RCC_HSI_IsReady>
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d1f1      	bne.n	8002ecc <HAL_RCC_OscConfig+0x2f0>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f003 0308 	and.w	r3, r3, #8
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d06e      	beq.n	8002fd2 <HAL_RCC_OscConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	699b      	ldr	r3, [r3, #24]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d056      	beq.n	8002faa <HAL_RCC_OscConfig+0x3ce>
    {
      uint32_t csr_temp = RCC->CSR;
 8002efc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f00:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002f04:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	69da      	ldr	r2, [r3, #28]
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	f003 0310 	and.w	r3, r3, #16
 8002f10:	429a      	cmp	r2, r3
 8002f12:	d031      	beq.n	8002f78 <HAL_RCC_OscConfig+0x39c>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	f003 0302 	and.w	r3, r3, #2
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d006      	beq.n	8002f2c <HAL_RCC_OscConfig+0x350>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d101      	bne.n	8002f2c <HAL_RCC_OscConfig+0x350>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated */
          return HAL_ERROR;
 8002f28:	2301      	movs	r3, #1
 8002f2a:	e1d0      	b.n	80032ce <HAL_RCC_OscConfig+0x6f2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	f003 0301 	and.w	r3, r3, #1
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d013      	beq.n	8002f5e <HAL_RCC_OscConfig+0x382>
        {
          __HAL_RCC_LSI_DISABLE();
 8002f36:	f7ff fc8f 	bl	8002858 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002f3a:	f7ff f837 	bl	8001fac <HAL_GetTick>
 8002f3e:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 8002f40:	e008      	b.n	8002f54 <HAL_RCC_OscConfig+0x378>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f42:	f7ff f833 	bl	8001fac <HAL_GetTick>
 8002f46:	4602      	mov	r2, r0
 8002f48:	697b      	ldr	r3, [r7, #20]
 8002f4a:	1ad3      	subs	r3, r2, r3
 8002f4c:	2b11      	cmp	r3, #17
 8002f4e:	d901      	bls.n	8002f54 <HAL_RCC_OscConfig+0x378>
            {
              return HAL_TIMEOUT;
 8002f50:	2303      	movs	r3, #3
 8002f52:	e1bc      	b.n	80032ce <HAL_RCC_OscConfig+0x6f2>
          while (LL_RCC_LSI_IsReady() != 0U)
 8002f54:	f7ff fc90 	bl	8002878 <LL_RCC_LSI_IsReady>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d1f1      	bne.n	8002f42 <HAL_RCC_OscConfig+0x366>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 8002f5e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f62:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002f66:	f023 0210 	bic.w	r2, r3, #16
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	69db      	ldr	r3, [r3, #28]
 8002f6e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002f72:	4313      	orrs	r3, r2
 8002f74:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f78:	f7ff fc5e 	bl	8002838 <LL_RCC_LSI_Enable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f7c:	f7ff f816 	bl	8001fac <HAL_GetTick>
 8002f80:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 8002f82:	e00c      	b.n	8002f9e <HAL_RCC_OscConfig+0x3c2>
 8002f84:	20000000 	.word	0x20000000
 8002f88:	20000004 	.word	0x20000004
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f8c:	f7ff f80e 	bl	8001fac <HAL_GetTick>
 8002f90:	4602      	mov	r2, r0
 8002f92:	697b      	ldr	r3, [r7, #20]
 8002f94:	1ad3      	subs	r3, r2, r3
 8002f96:	2b11      	cmp	r3, #17
 8002f98:	d901      	bls.n	8002f9e <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8002f9a:	2303      	movs	r3, #3
 8002f9c:	e197      	b.n	80032ce <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() == 0U)
 8002f9e:	f7ff fc6b 	bl	8002878 <LL_RCC_LSI_IsReady>
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d0f1      	beq.n	8002f8c <HAL_RCC_OscConfig+0x3b0>
 8002fa8:	e013      	b.n	8002fd2 <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002faa:	f7ff fc55 	bl	8002858 <LL_RCC_LSI_Disable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fae:	f7fe fffd 	bl	8001fac <HAL_GetTick>
 8002fb2:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 8002fb4:	e008      	b.n	8002fc8 <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002fb6:	f7fe fff9 	bl	8001fac <HAL_GetTick>
 8002fba:	4602      	mov	r2, r0
 8002fbc:	697b      	ldr	r3, [r7, #20]
 8002fbe:	1ad3      	subs	r3, r2, r3
 8002fc0:	2b11      	cmp	r3, #17
 8002fc2:	d901      	bls.n	8002fc8 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8002fc4:	2303      	movs	r3, #3
 8002fc6:	e182      	b.n	80032ce <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() != 0U)
 8002fc8:	f7ff fc56 	bl	8002878 <LL_RCC_LSI_IsReady>
 8002fcc:	4603      	mov	r3, r0
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d1f1      	bne.n	8002fb6 <HAL_RCC_OscConfig+0x3da>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f003 0304 	and.w	r3, r3, #4
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	f000 80d8 	beq.w	8003190 <HAL_RCC_OscConfig+0x5b4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8002fe0:	f7ff fb6c 	bl	80026bc <LL_PWR_IsEnabledBkUpAccess>
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d113      	bne.n	8003012 <HAL_RCC_OscConfig+0x436>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8002fea:	f7ff fb4d 	bl	8002688 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002fee:	f7fe ffdd 	bl	8001fac <HAL_GetTick>
 8002ff2:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8002ff4:	e008      	b.n	8003008 <HAL_RCC_OscConfig+0x42c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ff6:	f7fe ffd9 	bl	8001fac <HAL_GetTick>
 8002ffa:	4602      	mov	r2, r0
 8002ffc:	697b      	ldr	r3, [r7, #20]
 8002ffe:	1ad3      	subs	r3, r2, r3
 8003000:	2b02      	cmp	r3, #2
 8003002:	d901      	bls.n	8003008 <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 8003004:	2303      	movs	r3, #3
 8003006:	e162      	b.n	80032ce <HAL_RCC_OscConfig+0x6f2>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8003008:	f7ff fb58 	bl	80026bc <LL_PWR_IsEnabledBkUpAccess>
 800300c:	4603      	mov	r3, r0
 800300e:	2b00      	cmp	r3, #0
 8003010:	d0f1      	beq.n	8002ff6 <HAL_RCC_OscConfig+0x41a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	68db      	ldr	r3, [r3, #12]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d07b      	beq.n	8003112 <HAL_RCC_OscConfig+0x536>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	68db      	ldr	r3, [r3, #12]
 800301e:	2b85      	cmp	r3, #133	@ 0x85
 8003020:	d003      	beq.n	800302a <HAL_RCC_OscConfig+0x44e>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	68db      	ldr	r3, [r3, #12]
 8003026:	2b05      	cmp	r3, #5
 8003028:	d109      	bne.n	800303e <HAL_RCC_OscConfig+0x462>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800302a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800302e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003032:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003036:	f043 0304 	orr.w	r3, r3, #4
 800303a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800303e:	f7fe ffb5 	bl	8001fac <HAL_GetTick>
 8003042:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003044:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003048:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800304c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003050:	f043 0301 	orr.w	r3, r3, #1
 8003054:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8003058:	e00a      	b.n	8003070 <HAL_RCC_OscConfig+0x494>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800305a:	f7fe ffa7 	bl	8001fac <HAL_GetTick>
 800305e:	4602      	mov	r2, r0
 8003060:	697b      	ldr	r3, [r7, #20]
 8003062:	1ad3      	subs	r3, r2, r3
 8003064:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003068:	4293      	cmp	r3, r2
 800306a:	d901      	bls.n	8003070 <HAL_RCC_OscConfig+0x494>
        {
          return HAL_TIMEOUT;
 800306c:	2303      	movs	r3, #3
 800306e:	e12e      	b.n	80032ce <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() == 0U)
 8003070:	f7ff fbd1 	bl	8002816 <LL_RCC_LSE_IsReady>
 8003074:	4603      	mov	r3, r0
 8003076:	2b00      	cmp	r3, #0
 8003078:	d0ef      	beq.n	800305a <HAL_RCC_OscConfig+0x47e>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	68db      	ldr	r3, [r3, #12]
 800307e:	2b81      	cmp	r3, #129	@ 0x81
 8003080:	d003      	beq.n	800308a <HAL_RCC_OscConfig+0x4ae>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	68db      	ldr	r3, [r3, #12]
 8003086:	2b85      	cmp	r3, #133	@ 0x85
 8003088:	d121      	bne.n	80030ce <HAL_RCC_OscConfig+0x4f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800308a:	f7fe ff8f 	bl	8001fac <HAL_GetTick>
 800308e:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003090:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003094:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003098:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800309c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80030a0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80030a4:	e00a      	b.n	80030bc <HAL_RCC_OscConfig+0x4e0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030a6:	f7fe ff81 	bl	8001fac <HAL_GetTick>
 80030aa:	4602      	mov	r2, r0
 80030ac:	697b      	ldr	r3, [r7, #20]
 80030ae:	1ad3      	subs	r3, r2, r3
 80030b0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d901      	bls.n	80030bc <HAL_RCC_OscConfig+0x4e0>
          {
            return HAL_TIMEOUT;
 80030b8:	2303      	movs	r3, #3
 80030ba:	e108      	b.n	80032ce <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80030bc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80030c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030c4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d0ec      	beq.n	80030a6 <HAL_RCC_OscConfig+0x4ca>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 80030cc:	e060      	b.n	8003190 <HAL_RCC_OscConfig+0x5b4>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030ce:	f7fe ff6d 	bl	8001fac <HAL_GetTick>
 80030d2:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80030d4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80030d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030dc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80030e0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80030e4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80030e8:	e00a      	b.n	8003100 <HAL_RCC_OscConfig+0x524>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030ea:	f7fe ff5f 	bl	8001fac <HAL_GetTick>
 80030ee:	4602      	mov	r2, r0
 80030f0:	697b      	ldr	r3, [r7, #20]
 80030f2:	1ad3      	subs	r3, r2, r3
 80030f4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d901      	bls.n	8003100 <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 80030fc:	2303      	movs	r3, #3
 80030fe:	e0e6      	b.n	80032ce <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003100:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003104:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003108:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800310c:	2b00      	cmp	r3, #0
 800310e:	d1ec      	bne.n	80030ea <HAL_RCC_OscConfig+0x50e>
 8003110:	e03e      	b.n	8003190 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003112:	f7fe ff4b 	bl	8001fac <HAL_GetTick>
 8003116:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003118:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800311c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003120:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003124:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003128:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800312c:	e00a      	b.n	8003144 <HAL_RCC_OscConfig+0x568>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800312e:	f7fe ff3d 	bl	8001fac <HAL_GetTick>
 8003132:	4602      	mov	r2, r0
 8003134:	697b      	ldr	r3, [r7, #20]
 8003136:	1ad3      	subs	r3, r2, r3
 8003138:	f241 3288 	movw	r2, #5000	@ 0x1388
 800313c:	4293      	cmp	r3, r2
 800313e:	d901      	bls.n	8003144 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8003140:	2303      	movs	r3, #3
 8003142:	e0c4      	b.n	80032ce <HAL_RCC_OscConfig+0x6f2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003144:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003148:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800314c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003150:	2b00      	cmp	r3, #0
 8003152:	d1ec      	bne.n	800312e <HAL_RCC_OscConfig+0x552>
        }
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003154:	f7fe ff2a 	bl	8001fac <HAL_GetTick>
 8003158:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800315a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800315e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003162:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003166:	f023 0301 	bic.w	r3, r3, #1
 800316a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800316e:	e00a      	b.n	8003186 <HAL_RCC_OscConfig+0x5aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003170:	f7fe ff1c 	bl	8001fac <HAL_GetTick>
 8003174:	4602      	mov	r2, r0
 8003176:	697b      	ldr	r3, [r7, #20]
 8003178:	1ad3      	subs	r3, r2, r3
 800317a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800317e:	4293      	cmp	r3, r2
 8003180:	d901      	bls.n	8003186 <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 8003182:	2303      	movs	r3, #3
 8003184:	e0a3      	b.n	80032ce <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() != 0U)
 8003186:	f7ff fb46 	bl	8002816 <LL_RCC_LSE_IsReady>
 800318a:	4603      	mov	r3, r0
 800318c:	2b00      	cmp	r3, #0
 800318e:	d1ef      	bne.n	8003170 <HAL_RCC_OscConfig+0x594>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003194:	2b00      	cmp	r3, #0
 8003196:	f000 8099 	beq.w	80032cc <HAL_RCC_OscConfig+0x6f0>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800319a:	69fb      	ldr	r3, [r7, #28]
 800319c:	2b0c      	cmp	r3, #12
 800319e:	d06c      	beq.n	800327a <HAL_RCC_OscConfig+0x69e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031a4:	2b02      	cmp	r3, #2
 80031a6:	d14b      	bne.n	8003240 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031a8:	f7ff fc87 	bl	8002aba <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031ac:	f7fe fefe 	bl	8001fac <HAL_GetTick>
 80031b0:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 80031b2:	e008      	b.n	80031c6 <HAL_RCC_OscConfig+0x5ea>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031b4:	f7fe fefa 	bl	8001fac <HAL_GetTick>
 80031b8:	4602      	mov	r2, r0
 80031ba:	697b      	ldr	r3, [r7, #20]
 80031bc:	1ad3      	subs	r3, r2, r3
 80031be:	2b0a      	cmp	r3, #10
 80031c0:	d901      	bls.n	80031c6 <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 80031c2:	2303      	movs	r3, #3
 80031c4:	e083      	b.n	80032ce <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 80031c6:	f7ff fc86 	bl	8002ad6 <LL_RCC_PLL_IsReady>
 80031ca:	4603      	mov	r3, r0
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d1f1      	bne.n	80031b4 <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80031d0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80031d4:	68da      	ldr	r2, [r3, #12]
 80031d6:	4b40      	ldr	r3, [pc, #256]	@ (80032d8 <HAL_RCC_OscConfig+0x6fc>)
 80031d8:	4013      	ands	r3, r2
 80031da:	687a      	ldr	r2, [r7, #4]
 80031dc:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 80031de:	687a      	ldr	r2, [r7, #4]
 80031e0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80031e2:	4311      	orrs	r1, r2
 80031e4:	687a      	ldr	r2, [r7, #4]
 80031e6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80031e8:	0212      	lsls	r2, r2, #8
 80031ea:	4311      	orrs	r1, r2
 80031ec:	687a      	ldr	r2, [r7, #4]
 80031ee:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80031f0:	4311      	orrs	r1, r2
 80031f2:	687a      	ldr	r2, [r7, #4]
 80031f4:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80031f6:	4311      	orrs	r1, r2
 80031f8:	687a      	ldr	r2, [r7, #4]
 80031fa:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80031fc:	430a      	orrs	r2, r1
 80031fe:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003202:	4313      	orrs	r3, r2
 8003204:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003206:	f7ff fc4a 	bl	8002a9e <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800320a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800320e:	68db      	ldr	r3, [r3, #12]
 8003210:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003214:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003218:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800321a:	f7fe fec7 	bl	8001fac <HAL_GetTick>
 800321e:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 8003220:	e008      	b.n	8003234 <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003222:	f7fe fec3 	bl	8001fac <HAL_GetTick>
 8003226:	4602      	mov	r2, r0
 8003228:	697b      	ldr	r3, [r7, #20]
 800322a:	1ad3      	subs	r3, r2, r3
 800322c:	2b0a      	cmp	r3, #10
 800322e:	d901      	bls.n	8003234 <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 8003230:	2303      	movs	r3, #3
 8003232:	e04c      	b.n	80032ce <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() == 0U)
 8003234:	f7ff fc4f 	bl	8002ad6 <LL_RCC_PLL_IsReady>
 8003238:	4603      	mov	r3, r0
 800323a:	2b00      	cmp	r3, #0
 800323c:	d0f1      	beq.n	8003222 <HAL_RCC_OscConfig+0x646>
 800323e:	e045      	b.n	80032cc <HAL_RCC_OscConfig+0x6f0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003240:	f7ff fc3b 	bl	8002aba <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003244:	f7fe feb2 	bl	8001fac <HAL_GetTick>
 8003248:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 800324a:	e008      	b.n	800325e <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800324c:	f7fe feae 	bl	8001fac <HAL_GetTick>
 8003250:	4602      	mov	r2, r0
 8003252:	697b      	ldr	r3, [r7, #20]
 8003254:	1ad3      	subs	r3, r2, r3
 8003256:	2b0a      	cmp	r3, #10
 8003258:	d901      	bls.n	800325e <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800325a:	2303      	movs	r3, #3
 800325c:	e037      	b.n	80032ce <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 800325e:	f7ff fc3a 	bl	8002ad6 <LL_RCC_PLL_IsReady>
 8003262:	4603      	mov	r3, r0
 8003264:	2b00      	cmp	r3, #0
 8003266:	d1f1      	bne.n	800324c <HAL_RCC_OscConfig+0x670>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8003268:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800326c:	68da      	ldr	r2, [r3, #12]
 800326e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003272:	4b1a      	ldr	r3, [pc, #104]	@ (80032dc <HAL_RCC_OscConfig+0x700>)
 8003274:	4013      	ands	r3, r2
 8003276:	60cb      	str	r3, [r1, #12]
 8003278:	e028      	b.n	80032cc <HAL_RCC_OscConfig+0x6f0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800327e:	2b01      	cmp	r3, #1
 8003280:	d101      	bne.n	8003286 <HAL_RCC_OscConfig+0x6aa>
      {
        return HAL_ERROR;
 8003282:	2301      	movs	r3, #1
 8003284:	e023      	b.n	80032ce <HAL_RCC_OscConfig+0x6f2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003286:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800328a:	68db      	ldr	r3, [r3, #12]
 800328c:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 800328e:	69bb      	ldr	r3, [r7, #24]
 8003290:	f003 0203 	and.w	r2, r3, #3
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003298:	429a      	cmp	r2, r3
 800329a:	d115      	bne.n	80032c8 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 800329c:	69bb      	ldr	r3, [r7, #24]
 800329e:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80032a6:	429a      	cmp	r2, r3
 80032a8:	d10e      	bne.n	80032c8 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 80032aa:	69bb      	ldr	r3, [r7, #24]
 80032ac:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032b4:	021b      	lsls	r3, r3, #8
 80032b6:	429a      	cmp	r2, r3
 80032b8:	d106      	bne.n	80032c8 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 80032ba:	69bb      	ldr	r3, [r7, #24]
 80032bc:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032c4:	429a      	cmp	r2, r3
 80032c6:	d001      	beq.n	80032cc <HAL_RCC_OscConfig+0x6f0>
        {
          return HAL_ERROR;
 80032c8:	2301      	movs	r3, #1
 80032ca:	e000      	b.n	80032ce <HAL_RCC_OscConfig+0x6f2>
        }
      }
    }
  }
  return HAL_OK;
 80032cc:	2300      	movs	r3, #0
}
 80032ce:	4618      	mov	r0, r3
 80032d0:	3720      	adds	r7, #32
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bd80      	pop	{r7, pc}
 80032d6:	bf00      	nop
 80032d8:	11c1808c 	.word	0x11c1808c
 80032dc:	eefefffc 	.word	0xeefefffc

080032e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b084      	sub	sp, #16
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
 80032e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d101      	bne.n	80032f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80032f0:	2301      	movs	r3, #1
 80032f2:	e10f      	b.n	8003514 <HAL_RCC_ClockConfig+0x234>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80032f4:	4b89      	ldr	r3, [pc, #548]	@ (800351c <HAL_RCC_ClockConfig+0x23c>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f003 0307 	and.w	r3, r3, #7
 80032fc:	683a      	ldr	r2, [r7, #0]
 80032fe:	429a      	cmp	r2, r3
 8003300:	d91b      	bls.n	800333a <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003302:	4b86      	ldr	r3, [pc, #536]	@ (800351c <HAL_RCC_ClockConfig+0x23c>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f023 0207 	bic.w	r2, r3, #7
 800330a:	4984      	ldr	r1, [pc, #528]	@ (800351c <HAL_RCC_ClockConfig+0x23c>)
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	4313      	orrs	r3, r2
 8003310:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003312:	f7fe fe4b 	bl	8001fac <HAL_GetTick>
 8003316:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003318:	e008      	b.n	800332c <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800331a:	f7fe fe47 	bl	8001fac <HAL_GetTick>
 800331e:	4602      	mov	r2, r0
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	1ad3      	subs	r3, r2, r3
 8003324:	2b02      	cmp	r3, #2
 8003326:	d901      	bls.n	800332c <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8003328:	2303      	movs	r3, #3
 800332a:	e0f3      	b.n	8003514 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800332c:	4b7b      	ldr	r3, [pc, #492]	@ (800351c <HAL_RCC_ClockConfig+0x23c>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f003 0307 	and.w	r3, r3, #7
 8003334:	683a      	ldr	r2, [r7, #0]
 8003336:	429a      	cmp	r2, r3
 8003338:	d1ef      	bne.n	800331a <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f003 0302 	and.w	r3, r3, #2
 8003342:	2b00      	cmp	r3, #0
 8003344:	d016      	beq.n	8003374 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	689b      	ldr	r3, [r3, #8]
 800334a:	4618      	mov	r0, r3
 800334c:	f7ff fb2a 	bl	80029a4 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003350:	f7fe fe2c 	bl	8001fac <HAL_GetTick>
 8003354:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8003356:	e008      	b.n	800336a <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003358:	f7fe fe28 	bl	8001fac <HAL_GetTick>
 800335c:	4602      	mov	r2, r0
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	1ad3      	subs	r3, r2, r3
 8003362:	2b02      	cmp	r3, #2
 8003364:	d901      	bls.n	800336a <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8003366:	2303      	movs	r3, #3
 8003368:	e0d4      	b.n	8003514 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800336a:	f7ff fbf2 	bl	8002b52 <LL_RCC_IsActiveFlag_HPRE>
 800336e:	4603      	mov	r3, r0
 8003370:	2b00      	cmp	r3, #0
 8003372:	d0f1      	beq.n	8003358 <HAL_RCC_ClockConfig+0x78>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800337c:	2b00      	cmp	r3, #0
 800337e:	d016      	beq.n	80033ae <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	695b      	ldr	r3, [r3, #20]
 8003384:	4618      	mov	r0, r3
 8003386:	f7ff fb20 	bl	80029ca <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800338a:	f7fe fe0f 	bl	8001fac <HAL_GetTick>
 800338e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8003390:	e008      	b.n	80033a4 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003392:	f7fe fe0b 	bl	8001fac <HAL_GetTick>
 8003396:	4602      	mov	r2, r0
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	1ad3      	subs	r3, r2, r3
 800339c:	2b02      	cmp	r3, #2
 800339e:	d901      	bls.n	80033a4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 80033a0:	2303      	movs	r3, #3
 80033a2:	e0b7      	b.n	8003514 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80033a4:	f7ff fbe6 	bl	8002b74 <LL_RCC_IsActiveFlag_SHDHPRE>
 80033a8:	4603      	mov	r3, r0
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d0f1      	beq.n	8003392 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f003 0304 	and.w	r3, r3, #4
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d016      	beq.n	80033e8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	68db      	ldr	r3, [r3, #12]
 80033be:	4618      	mov	r0, r3
 80033c0:	f7ff fb19 	bl	80029f6 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80033c4:	f7fe fdf2 	bl	8001fac <HAL_GetTick>
 80033c8:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80033ca:	e008      	b.n	80033de <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80033cc:	f7fe fdee 	bl	8001fac <HAL_GetTick>
 80033d0:	4602      	mov	r2, r0
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	1ad3      	subs	r3, r2, r3
 80033d6:	2b02      	cmp	r3, #2
 80033d8:	d901      	bls.n	80033de <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 80033da:	2303      	movs	r3, #3
 80033dc:	e09a      	b.n	8003514 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80033de:	f7ff fbdb 	bl	8002b98 <LL_RCC_IsActiveFlag_PPRE1>
 80033e2:	4603      	mov	r3, r0
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d0f1      	beq.n	80033cc <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f003 0308 	and.w	r3, r3, #8
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d017      	beq.n	8003424 <HAL_RCC_ClockConfig+0x144>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	691b      	ldr	r3, [r3, #16]
 80033f8:	00db      	lsls	r3, r3, #3
 80033fa:	4618      	mov	r0, r3
 80033fc:	f7ff fb0e 	bl	8002a1c <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003400:	f7fe fdd4 	bl	8001fac <HAL_GetTick>
 8003404:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8003406:	e008      	b.n	800341a <HAL_RCC_ClockConfig+0x13a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003408:	f7fe fdd0 	bl	8001fac <HAL_GetTick>
 800340c:	4602      	mov	r2, r0
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	1ad3      	subs	r3, r2, r3
 8003412:	2b02      	cmp	r3, #2
 8003414:	d901      	bls.n	800341a <HAL_RCC_ClockConfig+0x13a>
      {
        return HAL_TIMEOUT;
 8003416:	2303      	movs	r3, #3
 8003418:	e07c      	b.n	8003514 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800341a:	f7ff fbce 	bl	8002bba <LL_RCC_IsActiveFlag_PPRE2>
 800341e:	4603      	mov	r3, r0
 8003420:	2b00      	cmp	r3, #0
 8003422:	d0f1      	beq.n	8003408 <HAL_RCC_ClockConfig+0x128>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f003 0301 	and.w	r3, r3, #1
 800342c:	2b00      	cmp	r3, #0
 800342e:	d043      	beq.n	80034b8 <HAL_RCC_ClockConfig+0x1d8>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	2b02      	cmp	r3, #2
 8003436:	d106      	bne.n	8003446 <HAL_RCC_ClockConfig+0x166>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8003438:	f7ff f99b 	bl	8002772 <LL_RCC_HSE_IsReady>
 800343c:	4603      	mov	r3, r0
 800343e:	2b00      	cmp	r3, #0
 8003440:	d11e      	bne.n	8003480 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003442:	2301      	movs	r3, #1
 8003444:	e066      	b.n	8003514 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	2b03      	cmp	r3, #3
 800344c:	d106      	bne.n	800345c <HAL_RCC_ClockConfig+0x17c>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 800344e:	f7ff fb42 	bl	8002ad6 <LL_RCC_PLL_IsReady>
 8003452:	4603      	mov	r3, r0
 8003454:	2b00      	cmp	r3, #0
 8003456:	d113      	bne.n	8003480 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003458:	2301      	movs	r3, #1
 800345a:	e05b      	b.n	8003514 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d106      	bne.n	8003472 <HAL_RCC_ClockConfig+0x192>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8003464:	f7ff fa35 	bl	80028d2 <LL_RCC_MSI_IsReady>
 8003468:	4603      	mov	r3, r0
 800346a:	2b00      	cmp	r3, #0
 800346c:	d108      	bne.n	8003480 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800346e:	2301      	movs	r3, #1
 8003470:	e050      	b.n	8003514 <HAL_RCC_ClockConfig+0x234>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8003472:	f7ff f9ab 	bl	80027cc <LL_RCC_HSI_IsReady>
 8003476:	4603      	mov	r3, r0
 8003478:	2b00      	cmp	r3, #0
 800347a:	d101      	bne.n	8003480 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800347c:	2301      	movs	r3, #1
 800347e:	e049      	b.n	8003514 <HAL_RCC_ClockConfig+0x234>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	4618      	mov	r0, r3
 8003486:	f7ff fa6f 	bl	8002968 <LL_RCC_SetSysClkSource>

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800348a:	f7fe fd8f 	bl	8001fac <HAL_GetTick>
 800348e:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003490:	e00a      	b.n	80034a8 <HAL_RCC_ClockConfig+0x1c8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003492:	f7fe fd8b 	bl	8001fac <HAL_GetTick>
 8003496:	4602      	mov	r2, r0
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	1ad3      	subs	r3, r2, r3
 800349c:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d901      	bls.n	80034a8 <HAL_RCC_ClockConfig+0x1c8>
      {
        return HAL_TIMEOUT;
 80034a4:	2303      	movs	r3, #3
 80034a6:	e035      	b.n	8003514 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034a8:	f7ff fa71 	bl	800298e <LL_RCC_GetSysClkSource>
 80034ac:	4602      	mov	r2, r0
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	685b      	ldr	r3, [r3, #4]
 80034b2:	009b      	lsls	r3, r3, #2
 80034b4:	429a      	cmp	r2, r3
 80034b6:	d1ec      	bne.n	8003492 <HAL_RCC_ClockConfig+0x1b2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80034b8:	4b18      	ldr	r3, [pc, #96]	@ (800351c <HAL_RCC_ClockConfig+0x23c>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f003 0307 	and.w	r3, r3, #7
 80034c0:	683a      	ldr	r2, [r7, #0]
 80034c2:	429a      	cmp	r2, r3
 80034c4:	d21b      	bcs.n	80034fe <HAL_RCC_ClockConfig+0x21e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034c6:	4b15      	ldr	r3, [pc, #84]	@ (800351c <HAL_RCC_ClockConfig+0x23c>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f023 0207 	bic.w	r2, r3, #7
 80034ce:	4913      	ldr	r1, [pc, #76]	@ (800351c <HAL_RCC_ClockConfig+0x23c>)
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	4313      	orrs	r3, r2
 80034d4:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80034d6:	f7fe fd69 	bl	8001fac <HAL_GetTick>
 80034da:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80034dc:	e008      	b.n	80034f0 <HAL_RCC_ClockConfig+0x210>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80034de:	f7fe fd65 	bl	8001fac <HAL_GetTick>
 80034e2:	4602      	mov	r2, r0
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	1ad3      	subs	r3, r2, r3
 80034e8:	2b02      	cmp	r3, #2
 80034ea:	d901      	bls.n	80034f0 <HAL_RCC_ClockConfig+0x210>
      {
        return HAL_TIMEOUT;
 80034ec:	2303      	movs	r3, #3
 80034ee:	e011      	b.n	8003514 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80034f0:	4b0a      	ldr	r3, [pc, #40]	@ (800351c <HAL_RCC_ClockConfig+0x23c>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f003 0307 	and.w	r3, r3, #7
 80034f8:	683a      	ldr	r2, [r7, #0]
 80034fa:	429a      	cmp	r2, r3
 80034fc:	d1ef      	bne.n	80034de <HAL_RCC_ClockConfig+0x1fe>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80034fe:	f000 f8b3 	bl	8003668 <HAL_RCC_GetHCLKFreq>
 8003502:	4603      	mov	r3, r0
 8003504:	4a06      	ldr	r2, [pc, #24]	@ (8003520 <HAL_RCC_ClockConfig+0x240>)
 8003506:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  return HAL_InitTick(uwTickPrio);
 8003508:	4b06      	ldr	r3, [pc, #24]	@ (8003524 <HAL_RCC_ClockConfig+0x244>)
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4618      	mov	r0, r3
 800350e:	f7fe fd01 	bl	8001f14 <HAL_InitTick>
 8003512:	4603      	mov	r3, r0
}
 8003514:	4618      	mov	r0, r3
 8003516:	3710      	adds	r7, #16
 8003518:	46bd      	mov	sp, r7
 800351a:	bd80      	pop	{r7, pc}
 800351c:	58004000 	.word	0x58004000
 8003520:	20000000 	.word	0x20000000
 8003524:	20000004 	.word	0x20000004

08003528 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003528:	b590      	push	{r4, r7, lr}
 800352a:	b087      	sub	sp, #28
 800352c:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 800352e:	2300      	movs	r3, #0
 8003530:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 8003532:	2300      	movs	r3, #0
 8003534:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003536:	f7ff fa2a 	bl	800298e <LL_RCC_GetSysClkSource>
 800353a:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800353c:	f7ff fafe 	bl	8002b3c <LL_RCC_PLL_GetMainSource>
 8003540:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8003542:	68bb      	ldr	r3, [r7, #8]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d005      	beq.n	8003554 <HAL_RCC_GetSysClockFreq+0x2c>
 8003548:	68bb      	ldr	r3, [r7, #8]
 800354a:	2b0c      	cmp	r3, #12
 800354c:	d139      	bne.n	80035c2 <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2b01      	cmp	r3, #1
 8003552:	d136      	bne.n	80035c2 <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /* Retrieve MSI frequency range in Hz */
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8003554:	f7ff f9cd 	bl	80028f2 <LL_RCC_MSI_IsEnabledRangeSelect>
 8003558:	4603      	mov	r3, r0
 800355a:	2b00      	cmp	r3, #0
 800355c:	d115      	bne.n	800358a <HAL_RCC_GetSysClockFreq+0x62>
 800355e:	f7ff f9c8 	bl	80028f2 <LL_RCC_MSI_IsEnabledRangeSelect>
 8003562:	4603      	mov	r3, r0
 8003564:	2b01      	cmp	r3, #1
 8003566:	d106      	bne.n	8003576 <HAL_RCC_GetSysClockFreq+0x4e>
 8003568:	f7ff f9d3 	bl	8002912 <LL_RCC_MSI_GetRange>
 800356c:	4603      	mov	r3, r0
 800356e:	0a1b      	lsrs	r3, r3, #8
 8003570:	f003 030f 	and.w	r3, r3, #15
 8003574:	e005      	b.n	8003582 <HAL_RCC_GetSysClockFreq+0x5a>
 8003576:	f7ff f9d7 	bl	8002928 <LL_RCC_MSI_GetRangeAfterStandby>
 800357a:	4603      	mov	r3, r0
 800357c:	0a1b      	lsrs	r3, r3, #8
 800357e:	f003 030f 	and.w	r3, r3, #15
 8003582:	4a36      	ldr	r2, [pc, #216]	@ (800365c <HAL_RCC_GetSysClockFreq+0x134>)
 8003584:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003588:	e014      	b.n	80035b4 <HAL_RCC_GetSysClockFreq+0x8c>
 800358a:	f7ff f9b2 	bl	80028f2 <LL_RCC_MSI_IsEnabledRangeSelect>
 800358e:	4603      	mov	r3, r0
 8003590:	2b01      	cmp	r3, #1
 8003592:	d106      	bne.n	80035a2 <HAL_RCC_GetSysClockFreq+0x7a>
 8003594:	f7ff f9bd 	bl	8002912 <LL_RCC_MSI_GetRange>
 8003598:	4603      	mov	r3, r0
 800359a:	091b      	lsrs	r3, r3, #4
 800359c:	f003 030f 	and.w	r3, r3, #15
 80035a0:	e005      	b.n	80035ae <HAL_RCC_GetSysClockFreq+0x86>
 80035a2:	f7ff f9c1 	bl	8002928 <LL_RCC_MSI_GetRangeAfterStandby>
 80035a6:	4603      	mov	r3, r0
 80035a8:	091b      	lsrs	r3, r3, #4
 80035aa:	f003 030f 	and.w	r3, r3, #15
 80035ae:	4a2b      	ldr	r2, [pc, #172]	@ (800365c <HAL_RCC_GetSysClockFreq+0x134>)
 80035b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035b4:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80035b6:	68bb      	ldr	r3, [r7, #8]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d115      	bne.n	80035e8 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 80035bc:	693b      	ldr	r3, [r7, #16]
 80035be:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80035c0:	e012      	b.n	80035e8 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80035c2:	68bb      	ldr	r3, [r7, #8]
 80035c4:	2b04      	cmp	r3, #4
 80035c6:	d102      	bne.n	80035ce <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80035c8:	4b25      	ldr	r3, [pc, #148]	@ (8003660 <HAL_RCC_GetSysClockFreq+0x138>)
 80035ca:	617b      	str	r3, [r7, #20]
 80035cc:	e00c      	b.n	80035e8 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80035ce:	68bb      	ldr	r3, [r7, #8]
 80035d0:	2b08      	cmp	r3, #8
 80035d2:	d109      	bne.n	80035e8 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80035d4:	f7ff f8a0 	bl	8002718 <LL_RCC_HSE_IsEnabledDiv2>
 80035d8:	4603      	mov	r3, r0
 80035da:	2b01      	cmp	r3, #1
 80035dc:	d102      	bne.n	80035e4 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 80035de:	4b20      	ldr	r3, [pc, #128]	@ (8003660 <HAL_RCC_GetSysClockFreq+0x138>)
 80035e0:	617b      	str	r3, [r7, #20]
 80035e2:	e001      	b.n	80035e8 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 80035e4:	4b1f      	ldr	r3, [pc, #124]	@ (8003664 <HAL_RCC_GetSysClockFreq+0x13c>)
 80035e6:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80035e8:	f7ff f9d1 	bl	800298e <LL_RCC_GetSysClkSource>
 80035ec:	4603      	mov	r3, r0
 80035ee:	2b0c      	cmp	r3, #12
 80035f0:	d12f      	bne.n	8003652 <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 80035f2:	f7ff faa3 	bl	8002b3c <LL_RCC_PLL_GetMainSource>
 80035f6:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2b02      	cmp	r3, #2
 80035fc:	d003      	beq.n	8003606 <HAL_RCC_GetSysClockFreq+0xde>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2b03      	cmp	r3, #3
 8003602:	d003      	beq.n	800360c <HAL_RCC_GetSysClockFreq+0xe4>
 8003604:	e00d      	b.n	8003622 <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8003606:	4b16      	ldr	r3, [pc, #88]	@ (8003660 <HAL_RCC_GetSysClockFreq+0x138>)
 8003608:	60fb      	str	r3, [r7, #12]
        break;
 800360a:	e00d      	b.n	8003628 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800360c:	f7ff f884 	bl	8002718 <LL_RCC_HSE_IsEnabledDiv2>
 8003610:	4603      	mov	r3, r0
 8003612:	2b01      	cmp	r3, #1
 8003614:	d102      	bne.n	800361c <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8003616:	4b12      	ldr	r3, [pc, #72]	@ (8003660 <HAL_RCC_GetSysClockFreq+0x138>)
 8003618:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 800361a:	e005      	b.n	8003628 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 800361c:	4b11      	ldr	r3, [pc, #68]	@ (8003664 <HAL_RCC_GetSysClockFreq+0x13c>)
 800361e:	60fb      	str	r3, [r7, #12]
        break;
 8003620:	e002      	b.n	8003628 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 8003622:	693b      	ldr	r3, [r7, #16]
 8003624:	60fb      	str	r3, [r7, #12]
        break;
 8003626:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8003628:	f7ff fa66 	bl	8002af8 <LL_RCC_PLL_GetN>
 800362c:	4602      	mov	r2, r0
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	fb03 f402 	mul.w	r4, r3, r2
 8003634:	f7ff fa77 	bl	8002b26 <LL_RCC_PLL_GetDivider>
 8003638:	4603      	mov	r3, r0
 800363a:	091b      	lsrs	r3, r3, #4
 800363c:	3301      	adds	r3, #1
 800363e:	fbb4 f4f3 	udiv	r4, r4, r3
 8003642:	f7ff fa65 	bl	8002b10 <LL_RCC_PLL_GetR>
 8003646:	4603      	mov	r3, r0
 8003648:	0f5b      	lsrs	r3, r3, #29
 800364a:	3301      	adds	r3, #1
 800364c:	fbb4 f3f3 	udiv	r3, r4, r3
 8003650:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8003652:	697b      	ldr	r3, [r7, #20]
}
 8003654:	4618      	mov	r0, r3
 8003656:	371c      	adds	r7, #28
 8003658:	46bd      	mov	sp, r7
 800365a:	bd90      	pop	{r4, r7, pc}
 800365c:	08007e40 	.word	0x08007e40
 8003660:	00f42400 	.word	0x00f42400
 8003664:	01e84800 	.word	0x01e84800

08003668 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003668:	b598      	push	{r3, r4, r7, lr}
 800366a:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 800366c:	f7ff ff5c 	bl	8003528 <HAL_RCC_GetSysClockFreq>
 8003670:	4604      	mov	r4, r0
 8003672:	f7ff f9e6 	bl	8002a42 <LL_RCC_GetAHBPrescaler>
 8003676:	4603      	mov	r3, r0
 8003678:	091b      	lsrs	r3, r3, #4
 800367a:	f003 030f 	and.w	r3, r3, #15
 800367e:	4a03      	ldr	r2, [pc, #12]	@ (800368c <HAL_RCC_GetHCLKFreq+0x24>)
 8003680:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003684:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8003688:	4618      	mov	r0, r3
 800368a:	bd98      	pop	{r3, r4, r7, pc}
 800368c:	08007de0 	.word	0x08007de0

08003690 <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003690:	b598      	push	{r3, r4, r7, lr}
 8003692:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8003694:	f7ff ffe8 	bl	8003668 <HAL_RCC_GetHCLKFreq>
 8003698:	4604      	mov	r4, r0
 800369a:	f7ff f9ea 	bl	8002a72 <LL_RCC_GetAPB1Prescaler>
 800369e:	4603      	mov	r3, r0
 80036a0:	0a1b      	lsrs	r3, r3, #8
 80036a2:	4a03      	ldr	r2, [pc, #12]	@ (80036b0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80036a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036a8:	fa24 f303 	lsr.w	r3, r4, r3
}
 80036ac:	4618      	mov	r0, r3
 80036ae:	bd98      	pop	{r3, r4, r7, pc}
 80036b0:	08007e20 	.word	0x08007e20

080036b4 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80036b4:	b598      	push	{r3, r4, r7, lr}
 80036b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 80036b8:	f7ff ffd6 	bl	8003668 <HAL_RCC_GetHCLKFreq>
 80036bc:	4604      	mov	r4, r0
 80036be:	f7ff f9e3 	bl	8002a88 <LL_RCC_GetAPB2Prescaler>
 80036c2:	4603      	mov	r3, r0
 80036c4:	0adb      	lsrs	r3, r3, #11
 80036c6:	4a03      	ldr	r2, [pc, #12]	@ (80036d4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80036c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036cc:	fa24 f303 	lsr.w	r3, r4, r3
}
 80036d0:	4618      	mov	r0, r3
 80036d2:	bd98      	pop	{r3, r4, r7, pc}
 80036d4:	08007e20 	.word	0x08007e20

080036d8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 80036d8:	b590      	push	{r4, r7, lr}
 80036da:	b085      	sub	sp, #20
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	091b      	lsrs	r3, r3, #4
 80036e4:	f003 030f 	and.w	r3, r3, #15
 80036e8:	4a10      	ldr	r2, [pc, #64]	@ (800372c <RCC_SetFlashLatencyFromMSIRange+0x54>)
 80036ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036ee:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 80036f0:	f7ff f9b2 	bl	8002a58 <LL_RCC_GetAHB3Prescaler>
 80036f4:	4603      	mov	r3, r0
 80036f6:	091b      	lsrs	r3, r3, #4
 80036f8:	f003 030f 	and.w	r3, r3, #15
 80036fc:	4a0c      	ldr	r2, [pc, #48]	@ (8003730 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 80036fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003702:	68fa      	ldr	r2, [r7, #12]
 8003704:	fbb2 f3f3 	udiv	r3, r2, r3
 8003708:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 800370a:	68bb      	ldr	r3, [r7, #8]
 800370c:	4a09      	ldr	r2, [pc, #36]	@ (8003734 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 800370e:	fba2 2303 	umull	r2, r3, r2, r3
 8003712:	0c9c      	lsrs	r4, r3, #18
 8003714:	f7fe ffc6 	bl	80026a4 <HAL_PWREx_GetVoltageRange>
 8003718:	4603      	mov	r3, r0
 800371a:	4619      	mov	r1, r3
 800371c:	4620      	mov	r0, r4
 800371e:	f000 f80b 	bl	8003738 <RCC_SetFlashLatency>
 8003722:	4603      	mov	r3, r0
}
 8003724:	4618      	mov	r0, r3
 8003726:	3714      	adds	r7, #20
 8003728:	46bd      	mov	sp, r7
 800372a:	bd90      	pop	{r4, r7, pc}
 800372c:	08007e40 	.word	0x08007e40
 8003730:	08007de0 	.word	0x08007de0
 8003734:	431bde83 	.word	0x431bde83

08003738 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b08e      	sub	sp, #56	@ 0x38
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
 8003740:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 8003742:	4a3a      	ldr	r2, [pc, #232]	@ (800382c <RCC_SetFlashLatency+0xf4>)
 8003744:	f107 0320 	add.w	r3, r7, #32
 8003748:	e892 0003 	ldmia.w	r2, {r0, r1}
 800374c:	6018      	str	r0, [r3, #0]
 800374e:	3304      	adds	r3, #4
 8003750:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 8003752:	4a37      	ldr	r2, [pc, #220]	@ (8003830 <RCC_SetFlashLatency+0xf8>)
 8003754:	f107 0318 	add.w	r3, r7, #24
 8003758:	e892 0003 	ldmia.w	r2, {r0, r1}
 800375c:	6018      	str	r0, [r3, #0]
 800375e:	3304      	adds	r3, #4
 8003760:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 8003762:	4a34      	ldr	r2, [pc, #208]	@ (8003834 <RCC_SetFlashLatency+0xfc>)
 8003764:	f107 030c 	add.w	r3, r7, #12
 8003768:	ca07      	ldmia	r2, {r0, r1, r2}
 800376a:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800376e:	2300      	movs	r3, #0
 8003770:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003778:	d11b      	bne.n	80037b2 <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800377a:	2300      	movs	r3, #0
 800377c:	633b      	str	r3, [r7, #48]	@ 0x30
 800377e:	e014      	b.n	80037aa <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8003780:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003782:	005b      	lsls	r3, r3, #1
 8003784:	3338      	adds	r3, #56	@ 0x38
 8003786:	443b      	add	r3, r7
 8003788:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 800378c:	461a      	mov	r2, r3
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	4293      	cmp	r3, r2
 8003792:	d807      	bhi.n	80037a4 <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8003794:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003796:	009b      	lsls	r3, r3, #2
 8003798:	3338      	adds	r3, #56	@ 0x38
 800379a:	443b      	add	r3, r7
 800379c:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80037a0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80037a2:	e021      	b.n	80037e8 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80037a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037a6:	3301      	adds	r3, #1
 80037a8:	633b      	str	r3, [r7, #48]	@ 0x30
 80037aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037ac:	2b02      	cmp	r3, #2
 80037ae:	d9e7      	bls.n	8003780 <RCC_SetFlashLatency+0x48>
 80037b0:	e01a      	b.n	80037e8 <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80037b2:	2300      	movs	r3, #0
 80037b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80037b6:	e014      	b.n	80037e2 <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 80037b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037ba:	005b      	lsls	r3, r3, #1
 80037bc:	3338      	adds	r3, #56	@ 0x38
 80037be:	443b      	add	r3, r7
 80037c0:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 80037c4:	461a      	mov	r2, r3
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d807      	bhi.n	80037dc <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80037cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037ce:	009b      	lsls	r3, r3, #2
 80037d0:	3338      	adds	r3, #56	@ 0x38
 80037d2:	443b      	add	r3, r7
 80037d4:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80037d8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80037da:	e005      	b.n	80037e8 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80037dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037de:	3301      	adds	r3, #1
 80037e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80037e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037e4:	2b02      	cmp	r3, #2
 80037e6:	d9e7      	bls.n	80037b8 <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80037e8:	4b13      	ldr	r3, [pc, #76]	@ (8003838 <RCC_SetFlashLatency+0x100>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f023 0207 	bic.w	r2, r3, #7
 80037f0:	4911      	ldr	r1, [pc, #68]	@ (8003838 <RCC_SetFlashLatency+0x100>)
 80037f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80037f4:	4313      	orrs	r3, r2
 80037f6:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80037f8:	f7fe fbd8 	bl	8001fac <HAL_GetTick>
 80037fc:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80037fe:	e008      	b.n	8003812 <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003800:	f7fe fbd4 	bl	8001fac <HAL_GetTick>
 8003804:	4602      	mov	r2, r0
 8003806:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003808:	1ad3      	subs	r3, r2, r3
 800380a:	2b02      	cmp	r3, #2
 800380c:	d901      	bls.n	8003812 <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 800380e:	2303      	movs	r3, #3
 8003810:	e007      	b.n	8003822 <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003812:	4b09      	ldr	r3, [pc, #36]	@ (8003838 <RCC_SetFlashLatency+0x100>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f003 0307 	and.w	r3, r3, #7
 800381a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800381c:	429a      	cmp	r2, r3
 800381e:	d1ef      	bne.n	8003800 <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 8003820:	2300      	movs	r3, #0
}
 8003822:	4618      	mov	r0, r3
 8003824:	3738      	adds	r7, #56	@ 0x38
 8003826:	46bd      	mov	sp, r7
 8003828:	bd80      	pop	{r7, pc}
 800382a:	bf00      	nop
 800382c:	08007dc4 	.word	0x08007dc4
 8003830:	08007dcc 	.word	0x08007dcc
 8003834:	08007dd4 	.word	0x08007dd4
 8003838:	58004000 	.word	0x58004000

0800383c <LL_RCC_LSE_IsReady>:
{
 800383c:	b480      	push	{r7}
 800383e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8003840:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003844:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003848:	f003 0302 	and.w	r3, r3, #2
 800384c:	2b02      	cmp	r3, #2
 800384e:	d101      	bne.n	8003854 <LL_RCC_LSE_IsReady+0x18>
 8003850:	2301      	movs	r3, #1
 8003852:	e000      	b.n	8003856 <LL_RCC_LSE_IsReady+0x1a>
 8003854:	2300      	movs	r3, #0
}
 8003856:	4618      	mov	r0, r3
 8003858:	46bd      	mov	sp, r7
 800385a:	bc80      	pop	{r7}
 800385c:	4770      	bx	lr

0800385e <LL_RCC_SetUSARTClockSource>:
{
 800385e:	b480      	push	{r7}
 8003860:	b083      	sub	sp, #12
 8003862:	af00      	add	r7, sp, #0
 8003864:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 8003866:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800386a:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	0c1b      	lsrs	r3, r3, #16
 8003872:	43db      	mvns	r3, r3
 8003874:	401a      	ands	r2, r3
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	b29b      	uxth	r3, r3
 800387a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800387e:	4313      	orrs	r3, r2
 8003880:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003884:	bf00      	nop
 8003886:	370c      	adds	r7, #12
 8003888:	46bd      	mov	sp, r7
 800388a:	bc80      	pop	{r7}
 800388c:	4770      	bx	lr

0800388e <LL_RCC_SetI2SClockSource>:
{
 800388e:	b480      	push	{r7}
 8003890:	b083      	sub	sp, #12
 8003892:	af00      	add	r7, sp, #0
 8003894:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 8003896:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800389a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800389e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80038a2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	4313      	orrs	r3, r2
 80038aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80038ae:	bf00      	nop
 80038b0:	370c      	adds	r7, #12
 80038b2:	46bd      	mov	sp, r7
 80038b4:	bc80      	pop	{r7}
 80038b6:	4770      	bx	lr

080038b8 <LL_RCC_SetLPUARTClockSource>:
{
 80038b8:	b480      	push	{r7}
 80038ba:	b083      	sub	sp, #12
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 80038c0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80038c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038c8:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80038cc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	4313      	orrs	r3, r2
 80038d4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80038d8:	bf00      	nop
 80038da:	370c      	adds	r7, #12
 80038dc:	46bd      	mov	sp, r7
 80038de:	bc80      	pop	{r7}
 80038e0:	4770      	bx	lr

080038e2 <LL_RCC_SetI2CClockSource>:
{
 80038e2:	b480      	push	{r7}
 80038e4:	b083      	sub	sp, #12
 80038e6:	af00      	add	r7, sp, #0
 80038e8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 80038ea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80038ee:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	091b      	lsrs	r3, r3, #4
 80038f6:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 80038fa:	43db      	mvns	r3, r3
 80038fc:	401a      	ands	r2, r3
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	011b      	lsls	r3, r3, #4
 8003902:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8003906:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800390a:	4313      	orrs	r3, r2
 800390c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003910:	bf00      	nop
 8003912:	370c      	adds	r7, #12
 8003914:	46bd      	mov	sp, r7
 8003916:	bc80      	pop	{r7}
 8003918:	4770      	bx	lr

0800391a <LL_RCC_SetLPTIMClockSource>:
{
 800391a:	b480      	push	{r7}
 800391c:	b083      	sub	sp, #12
 800391e:	af00      	add	r7, sp, #0
 8003920:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8003922:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003926:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	0c1b      	lsrs	r3, r3, #16
 800392e:	041b      	lsls	r3, r3, #16
 8003930:	43db      	mvns	r3, r3
 8003932:	401a      	ands	r2, r3
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	041b      	lsls	r3, r3, #16
 8003938:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800393c:	4313      	orrs	r3, r2
 800393e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003942:	bf00      	nop
 8003944:	370c      	adds	r7, #12
 8003946:	46bd      	mov	sp, r7
 8003948:	bc80      	pop	{r7}
 800394a:	4770      	bx	lr

0800394c <LL_RCC_SetRNGClockSource>:
{
 800394c:	b480      	push	{r7}
 800394e:	b083      	sub	sp, #12
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8003954:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003958:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800395c:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8003960:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	4313      	orrs	r3, r2
 8003968:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800396c:	bf00      	nop
 800396e:	370c      	adds	r7, #12
 8003970:	46bd      	mov	sp, r7
 8003972:	bc80      	pop	{r7}
 8003974:	4770      	bx	lr

08003976 <LL_RCC_SetADCClockSource>:
{
 8003976:	b480      	push	{r7}
 8003978:	b083      	sub	sp, #12
 800397a:	af00      	add	r7, sp, #0
 800397c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 800397e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003982:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003986:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800398a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	4313      	orrs	r3, r2
 8003992:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003996:	bf00      	nop
 8003998:	370c      	adds	r7, #12
 800399a:	46bd      	mov	sp, r7
 800399c:	bc80      	pop	{r7}
 800399e:	4770      	bx	lr

080039a0 <LL_RCC_SetRTCClockSource>:
{
 80039a0:	b480      	push	{r7}
 80039a2:	b083      	sub	sp, #12
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80039a8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80039ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80039b0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80039b4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	4313      	orrs	r3, r2
 80039bc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 80039c0:	bf00      	nop
 80039c2:	370c      	adds	r7, #12
 80039c4:	46bd      	mov	sp, r7
 80039c6:	bc80      	pop	{r7}
 80039c8:	4770      	bx	lr

080039ca <LL_RCC_GetRTCClockSource>:
{
 80039ca:	b480      	push	{r7}
 80039cc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 80039ce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80039d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80039d6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 80039da:	4618      	mov	r0, r3
 80039dc:	46bd      	mov	sp, r7
 80039de:	bc80      	pop	{r7}
 80039e0:	4770      	bx	lr

080039e2 <LL_RCC_ForceBackupDomainReset>:
{
 80039e2:	b480      	push	{r7}
 80039e4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80039e6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80039ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80039ee:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80039f2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80039f6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80039fa:	bf00      	nop
 80039fc:	46bd      	mov	sp, r7
 80039fe:	bc80      	pop	{r7}
 8003a00:	4770      	bx	lr

08003a02 <LL_RCC_ReleaseBackupDomainReset>:
{
 8003a02:	b480      	push	{r7}
 8003a04:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003a06:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003a0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a0e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003a12:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003a16:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8003a1a:	bf00      	nop
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	bc80      	pop	{r7}
 8003a20:	4770      	bx	lr
	...

08003a24 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b086      	sub	sp, #24
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 8003a30:	2300      	movs	r3, #0
 8003a32:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8003a34:	2300      	movs	r3, #0
 8003a36:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d058      	beq.n	8003af6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 8003a44:	f7fe fe20 	bl	8002688 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003a48:	f7fe fab0 	bl	8001fac <HAL_GetTick>
 8003a4c:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8003a4e:	e009      	b.n	8003a64 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a50:	f7fe faac 	bl	8001fac <HAL_GetTick>
 8003a54:	4602      	mov	r2, r0
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	1ad3      	subs	r3, r2, r3
 8003a5a:	2b02      	cmp	r3, #2
 8003a5c:	d902      	bls.n	8003a64 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 8003a5e:	2303      	movs	r3, #3
 8003a60:	74fb      	strb	r3, [r7, #19]
        break;
 8003a62:	e006      	b.n	8003a72 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8003a64:	4b7b      	ldr	r3, [pc, #492]	@ (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a6c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003a70:	d1ee      	bne.n	8003a50 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 8003a72:	7cfb      	ldrb	r3, [r7, #19]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d13c      	bne.n	8003af2 <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8003a78:	f7ff ffa7 	bl	80039ca <LL_RCC_GetRTCClockSource>
 8003a7c:	4602      	mov	r2, r0
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a82:	429a      	cmp	r2, r3
 8003a84:	d00f      	beq.n	8003aa6 <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003a86:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003a8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a8e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003a92:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003a94:	f7ff ffa5 	bl	80039e2 <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003a98:	f7ff ffb3 	bl	8003a02 <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003a9c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003aa0:	697b      	ldr	r3, [r7, #20]
 8003aa2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 8003aa6:	697b      	ldr	r3, [r7, #20]
 8003aa8:	f003 0302 	and.w	r3, r3, #2
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d014      	beq.n	8003ada <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ab0:	f7fe fa7c 	bl	8001fac <HAL_GetTick>
 8003ab4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 8003ab6:	e00b      	b.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ab8:	f7fe fa78 	bl	8001fac <HAL_GetTick>
 8003abc:	4602      	mov	r2, r0
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	1ad3      	subs	r3, r2, r3
 8003ac2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d902      	bls.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 8003aca:	2303      	movs	r3, #3
 8003acc:	74fb      	strb	r3, [r7, #19]
            break;
 8003ace:	e004      	b.n	8003ada <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 8003ad0:	f7ff feb4 	bl	800383c <LL_RCC_LSE_IsReady>
 8003ad4:	4603      	mov	r3, r0
 8003ad6:	2b01      	cmp	r3, #1
 8003ad8:	d1ee      	bne.n	8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 8003ada:	7cfb      	ldrb	r3, [r7, #19]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d105      	bne.n	8003aec <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	f7ff ff5b 	bl	80039a0 <LL_RCC_SetRTCClockSource>
 8003aea:	e004      	b.n	8003af6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003aec:	7cfb      	ldrb	r3, [r7, #19]
 8003aee:	74bb      	strb	r3, [r7, #18]
 8003af0:	e001      	b.n	8003af6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003af2:	7cfb      	ldrb	r3, [r7, #19]
 8003af4:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f003 0301 	and.w	r3, r3, #1
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d004      	beq.n	8003b0c <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	685b      	ldr	r3, [r3, #4]
 8003b06:	4618      	mov	r0, r3
 8003b08:	f7ff fea9 	bl	800385e <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f003 0302 	and.w	r3, r3, #2
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d004      	beq.n	8003b22 <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	689b      	ldr	r3, [r3, #8]
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	f7ff fe9e 	bl	800385e <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f003 0320 	and.w	r3, r3, #32
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d004      	beq.n	8003b38 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	691b      	ldr	r3, [r3, #16]
 8003b32:	4618      	mov	r0, r3
 8003b34:	f7ff fec0 	bl	80038b8 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d004      	beq.n	8003b4e <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6a1b      	ldr	r3, [r3, #32]
 8003b48:	4618      	mov	r0, r3
 8003b4a:	f7ff fee6 	bl	800391a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d004      	beq.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b5e:	4618      	mov	r0, r3
 8003b60:	f7ff fedb 	bl	800391a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d004      	beq.n	8003b7a <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b74:	4618      	mov	r0, r3
 8003b76:	f7ff fed0 	bl	800391a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d004      	beq.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	695b      	ldr	r3, [r3, #20]
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	f7ff fea9 	bl	80038e2 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d004      	beq.n	8003ba6 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	699b      	ldr	r3, [r3, #24]
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	f7ff fe9e 	bl	80038e2 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d004      	beq.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	69db      	ldr	r3, [r3, #28]
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	f7ff fe93 	bl	80038e2 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f003 0310 	and.w	r3, r3, #16
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d011      	beq.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	68db      	ldr	r3, [r3, #12]
 8003bcc:	4618      	mov	r0, r3
 8003bce:	f7ff fe5e 	bl	800388e <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	68db      	ldr	r3, [r3, #12]
 8003bd6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003bda:	d107      	bne.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8003bdc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003be0:	68db      	ldr	r3, [r3, #12]
 8003be2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003be6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003bea:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d010      	beq.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	f7ff fea5 	bl	800394c <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d107      	bne.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8003c0a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003c0e:	68db      	ldr	r3, [r3, #12]
 8003c10:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003c14:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003c18:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d011      	beq.n	8003c4a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	f7ff fea3 	bl	8003976 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c34:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003c38:	d107      	bne.n	8003c4a <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003c3a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003c3e:	68db      	ldr	r3, [r3, #12]
 8003c40:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003c44:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c48:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8003c4a:	7cbb      	ldrb	r3, [r7, #18]
}
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	3718      	adds	r7, #24
 8003c50:	46bd      	mov	sp, r7
 8003c52:	bd80      	pop	{r7, pc}
 8003c54:	58000400 	.word	0x58000400

08003c58 <LL_RCC_GetUSARTClockSource>:
{
 8003c58:	b480      	push	{r7}
 8003c5a:	b083      	sub	sp, #12
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 8003c60:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003c64:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	401a      	ands	r2, r3
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	041b      	lsls	r3, r3, #16
 8003c70:	4313      	orrs	r3, r2
}
 8003c72:	4618      	mov	r0, r3
 8003c74:	370c      	adds	r7, #12
 8003c76:	46bd      	mov	sp, r7
 8003c78:	bc80      	pop	{r7}
 8003c7a:	4770      	bx	lr

08003c7c <LL_RCC_GetLPUARTClockSource>:
{
 8003c7c:	b480      	push	{r7}
 8003c7e:	b083      	sub	sp, #12
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8003c84:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003c88:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	4013      	ands	r3, r2
}
 8003c90:	4618      	mov	r0, r3
 8003c92:	370c      	adds	r7, #12
 8003c94:	46bd      	mov	sp, r7
 8003c96:	bc80      	pop	{r7}
 8003c98:	4770      	bx	lr

08003c9a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c9a:	b580      	push	{r7, lr}
 8003c9c:	b082      	sub	sp, #8
 8003c9e:	af00      	add	r7, sp, #0
 8003ca0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d101      	bne.n	8003cac <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003ca8:	2301      	movs	r3, #1
 8003caa:	e042      	b.n	8003d32 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d106      	bne.n	8003cc4 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2200      	movs	r2, #0
 8003cba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003cbe:	6878      	ldr	r0, [r7, #4]
 8003cc0:	f7fd ff6c 	bl	8001b9c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2224      	movs	r2, #36	@ 0x24
 8003cc8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	681a      	ldr	r2, [r3, #0]
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f022 0201 	bic.w	r2, r2, #1
 8003cda:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d002      	beq.n	8003cea <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8003ce4:	6878      	ldr	r0, [r7, #4]
 8003ce6:	f000 ff29 	bl	8004b3c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003cea:	6878      	ldr	r0, [r7, #4]
 8003cec:	f000 fcb2 	bl	8004654 <UART_SetConfig>
 8003cf0:	4603      	mov	r3, r0
 8003cf2:	2b01      	cmp	r3, #1
 8003cf4:	d101      	bne.n	8003cfa <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	e01b      	b.n	8003d32 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	685a      	ldr	r2, [r3, #4]
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003d08:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	689a      	ldr	r2, [r3, #8]
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003d18:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	681a      	ldr	r2, [r3, #0]
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f042 0201 	orr.w	r2, r2, #1
 8003d28:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003d2a:	6878      	ldr	r0, [r7, #4]
 8003d2c:	f000 ffa7 	bl	8004c7e <UART_CheckIdleState>
 8003d30:	4603      	mov	r3, r0
}
 8003d32:	4618      	mov	r0, r3
 8003d34:	3708      	adds	r7, #8
 8003d36:	46bd      	mov	sp, r7
 8003d38:	bd80      	pop	{r7, pc}

08003d3a <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d3a:	b580      	push	{r7, lr}
 8003d3c:	b08a      	sub	sp, #40	@ 0x28
 8003d3e:	af02      	add	r7, sp, #8
 8003d40:	60f8      	str	r0, [r7, #12]
 8003d42:	60b9      	str	r1, [r7, #8]
 8003d44:	603b      	str	r3, [r7, #0]
 8003d46:	4613      	mov	r3, r2
 8003d48:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d50:	2b20      	cmp	r3, #32
 8003d52:	d173      	bne.n	8003e3c <HAL_UART_Transmit+0x102>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d54:	68bb      	ldr	r3, [r7, #8]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d002      	beq.n	8003d60 <HAL_UART_Transmit+0x26>
 8003d5a:	88fb      	ldrh	r3, [r7, #6]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d101      	bne.n	8003d64 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003d60:	2301      	movs	r3, #1
 8003d62:	e06c      	b.n	8003e3e <HAL_UART_Transmit+0x104>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	2200      	movs	r2, #0
 8003d68:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	2221      	movs	r2, #33	@ 0x21
 8003d70:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003d74:	f7fe f91a 	bl	8001fac <HAL_GetTick>
 8003d78:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	88fa      	ldrh	r2, [r7, #6]
 8003d7e:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	88fa      	ldrh	r2, [r7, #6]
 8003d86:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	689b      	ldr	r3, [r3, #8]
 8003d8e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d92:	d108      	bne.n	8003da6 <HAL_UART_Transmit+0x6c>
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	691b      	ldr	r3, [r3, #16]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d104      	bne.n	8003da6 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003da0:	68bb      	ldr	r3, [r7, #8]
 8003da2:	61bb      	str	r3, [r7, #24]
 8003da4:	e003      	b.n	8003dae <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003da6:	68bb      	ldr	r3, [r7, #8]
 8003da8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003daa:	2300      	movs	r3, #0
 8003dac:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003dae:	e02c      	b.n	8003e0a <HAL_UART_Transmit+0xd0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	9300      	str	r3, [sp, #0]
 8003db4:	697b      	ldr	r3, [r7, #20]
 8003db6:	2200      	movs	r2, #0
 8003db8:	2180      	movs	r1, #128	@ 0x80
 8003dba:	68f8      	ldr	r0, [r7, #12]
 8003dbc:	f000 ffad 	bl	8004d1a <UART_WaitOnFlagUntilTimeout>
 8003dc0:	4603      	mov	r3, r0
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d001      	beq.n	8003dca <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8003dc6:	2303      	movs	r3, #3
 8003dc8:	e039      	b.n	8003e3e <HAL_UART_Transmit+0x104>
      }
      if (pdata8bits == NULL)
 8003dca:	69fb      	ldr	r3, [r7, #28]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d10b      	bne.n	8003de8 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003dd0:	69bb      	ldr	r3, [r7, #24]
 8003dd2:	881b      	ldrh	r3, [r3, #0]
 8003dd4:	461a      	mov	r2, r3
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003dde:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003de0:	69bb      	ldr	r3, [r7, #24]
 8003de2:	3302      	adds	r3, #2
 8003de4:	61bb      	str	r3, [r7, #24]
 8003de6:	e007      	b.n	8003df8 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003de8:	69fb      	ldr	r3, [r7, #28]
 8003dea:	781a      	ldrb	r2, [r3, #0]
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003df2:	69fb      	ldr	r3, [r7, #28]
 8003df4:	3301      	adds	r3, #1
 8003df6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8003dfe:	b29b      	uxth	r3, r3
 8003e00:	3b01      	subs	r3, #1
 8003e02:	b29a      	uxth	r2, r3
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8003e10:	b29b      	uxth	r3, r3
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d1cc      	bne.n	8003db0 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	9300      	str	r3, [sp, #0]
 8003e1a:	697b      	ldr	r3, [r7, #20]
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	2140      	movs	r1, #64	@ 0x40
 8003e20:	68f8      	ldr	r0, [r7, #12]
 8003e22:	f000 ff7a 	bl	8004d1a <UART_WaitOnFlagUntilTimeout>
 8003e26:	4603      	mov	r3, r0
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d001      	beq.n	8003e30 <HAL_UART_Transmit+0xf6>
    {
      return HAL_TIMEOUT;
 8003e2c:	2303      	movs	r3, #3
 8003e2e:	e006      	b.n	8003e3e <HAL_UART_Transmit+0x104>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	2220      	movs	r2, #32
 8003e34:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8003e38:	2300      	movs	r3, #0
 8003e3a:	e000      	b.n	8003e3e <HAL_UART_Transmit+0x104>
  }
  else
  {
    return HAL_BUSY;
 8003e3c:	2302      	movs	r3, #2
  }
}
 8003e3e:	4618      	mov	r0, r3
 8003e40:	3720      	adds	r7, #32
 8003e42:	46bd      	mov	sp, r7
 8003e44:	bd80      	pop	{r7, pc}

08003e46 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e46:	b580      	push	{r7, lr}
 8003e48:	b08a      	sub	sp, #40	@ 0x28
 8003e4a:	af02      	add	r7, sp, #8
 8003e4c:	60f8      	str	r0, [r7, #12]
 8003e4e:	60b9      	str	r1, [r7, #8]
 8003e50:	603b      	str	r3, [r7, #0]
 8003e52:	4613      	mov	r3, r2
 8003e54:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003e5c:	2b20      	cmp	r3, #32
 8003e5e:	f040 80b1 	bne.w	8003fc4 <HAL_UART_Receive+0x17e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e62:	68bb      	ldr	r3, [r7, #8]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d002      	beq.n	8003e6e <HAL_UART_Receive+0x28>
 8003e68:	88fb      	ldrh	r3, [r7, #6]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d101      	bne.n	8003e72 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8003e6e:	2301      	movs	r3, #1
 8003e70:	e0a9      	b.n	8003fc6 <HAL_UART_Receive+0x180>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	2200      	movs	r2, #0
 8003e76:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	2222      	movs	r2, #34	@ 0x22
 8003e7e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	2200      	movs	r2, #0
 8003e86:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003e88:	f7fe f890 	bl	8001fac <HAL_GetTick>
 8003e8c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	88fa      	ldrh	r2, [r7, #6]
 8003e92:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	88fa      	ldrh	r2, [r7, #6]
 8003e9a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	689b      	ldr	r3, [r3, #8]
 8003ea2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ea6:	d10e      	bne.n	8003ec6 <HAL_UART_Receive+0x80>
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	691b      	ldr	r3, [r3, #16]
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d105      	bne.n	8003ebc <HAL_UART_Receive+0x76>
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8003eb6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8003eba:	e02d      	b.n	8003f18 <HAL_UART_Receive+0xd2>
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	22ff      	movs	r2, #255	@ 0xff
 8003ec0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8003ec4:	e028      	b.n	8003f18 <HAL_UART_Receive+0xd2>
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	689b      	ldr	r3, [r3, #8]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d10d      	bne.n	8003eea <HAL_UART_Receive+0xa4>
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	691b      	ldr	r3, [r3, #16]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d104      	bne.n	8003ee0 <HAL_UART_Receive+0x9a>
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	22ff      	movs	r2, #255	@ 0xff
 8003eda:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8003ede:	e01b      	b.n	8003f18 <HAL_UART_Receive+0xd2>
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	227f      	movs	r2, #127	@ 0x7f
 8003ee4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8003ee8:	e016      	b.n	8003f18 <HAL_UART_Receive+0xd2>
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	689b      	ldr	r3, [r3, #8]
 8003eee:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003ef2:	d10d      	bne.n	8003f10 <HAL_UART_Receive+0xca>
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	691b      	ldr	r3, [r3, #16]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d104      	bne.n	8003f06 <HAL_UART_Receive+0xc0>
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	227f      	movs	r2, #127	@ 0x7f
 8003f00:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8003f04:	e008      	b.n	8003f18 <HAL_UART_Receive+0xd2>
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	223f      	movs	r2, #63	@ 0x3f
 8003f0a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8003f0e:	e003      	b.n	8003f18 <HAL_UART_Receive+0xd2>
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	2200      	movs	r2, #0
 8003f14:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8003f1e:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	689b      	ldr	r3, [r3, #8]
 8003f24:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f28:	d108      	bne.n	8003f3c <HAL_UART_Receive+0xf6>
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	691b      	ldr	r3, [r3, #16]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d104      	bne.n	8003f3c <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8003f32:	2300      	movs	r3, #0
 8003f34:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003f36:	68bb      	ldr	r3, [r7, #8]
 8003f38:	61bb      	str	r3, [r7, #24]
 8003f3a:	e003      	b.n	8003f44 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8003f3c:	68bb      	ldr	r3, [r7, #8]
 8003f3e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003f40:	2300      	movs	r3, #0
 8003f42:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8003f44:	e032      	b.n	8003fac <HAL_UART_Receive+0x166>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	9300      	str	r3, [sp, #0]
 8003f4a:	697b      	ldr	r3, [r7, #20]
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	2120      	movs	r1, #32
 8003f50:	68f8      	ldr	r0, [r7, #12]
 8003f52:	f000 fee2 	bl	8004d1a <UART_WaitOnFlagUntilTimeout>
 8003f56:	4603      	mov	r3, r0
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d001      	beq.n	8003f60 <HAL_UART_Receive+0x11a>
      {
        return HAL_TIMEOUT;
 8003f5c:	2303      	movs	r3, #3
 8003f5e:	e032      	b.n	8003fc6 <HAL_UART_Receive+0x180>
      }
      if (pdata8bits == NULL)
 8003f60:	69fb      	ldr	r3, [r7, #28]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d10c      	bne.n	8003f80 <HAL_UART_Receive+0x13a>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f6c:	b29a      	uxth	r2, r3
 8003f6e:	8a7b      	ldrh	r3, [r7, #18]
 8003f70:	4013      	ands	r3, r2
 8003f72:	b29a      	uxth	r2, r3
 8003f74:	69bb      	ldr	r3, [r7, #24]
 8003f76:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003f78:	69bb      	ldr	r3, [r7, #24]
 8003f7a:	3302      	adds	r3, #2
 8003f7c:	61bb      	str	r3, [r7, #24]
 8003f7e:	e00c      	b.n	8003f9a <HAL_UART_Receive+0x154>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f86:	b2da      	uxtb	r2, r3
 8003f88:	8a7b      	ldrh	r3, [r7, #18]
 8003f8a:	b2db      	uxtb	r3, r3
 8003f8c:	4013      	ands	r3, r2
 8003f8e:	b2da      	uxtb	r2, r3
 8003f90:	69fb      	ldr	r3, [r7, #28]
 8003f92:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8003f94:	69fb      	ldr	r3, [r7, #28]
 8003f96:	3301      	adds	r3, #1
 8003f98:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8003fa0:	b29b      	uxth	r3, r3
 8003fa2:	3b01      	subs	r3, #1
 8003fa4:	b29a      	uxth	r2, r3
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8003fb2:	b29b      	uxth	r3, r3
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d1c6      	bne.n	8003f46 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	2220      	movs	r2, #32
 8003fbc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	e000      	b.n	8003fc6 <HAL_UART_Receive+0x180>
  }
  else
  {
    return HAL_BUSY;
 8003fc4:	2302      	movs	r3, #2
  }
}
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	3720      	adds	r7, #32
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	bd80      	pop	{r7, pc}
	...

08003fd0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b0ba      	sub	sp, #232	@ 0xe8
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	69db      	ldr	r3, [r3, #28]
 8003fde:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	689b      	ldr	r3, [r3, #8]
 8003ff2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003ff6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8003ffa:	f640 030f 	movw	r3, #2063	@ 0x80f
 8003ffe:	4013      	ands	r3, r2
 8004000:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8004004:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004008:	2b00      	cmp	r3, #0
 800400a:	d11b      	bne.n	8004044 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800400c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004010:	f003 0320 	and.w	r3, r3, #32
 8004014:	2b00      	cmp	r3, #0
 8004016:	d015      	beq.n	8004044 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004018:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800401c:	f003 0320 	and.w	r3, r3, #32
 8004020:	2b00      	cmp	r3, #0
 8004022:	d105      	bne.n	8004030 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004024:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004028:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800402c:	2b00      	cmp	r3, #0
 800402e:	d009      	beq.n	8004044 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004034:	2b00      	cmp	r3, #0
 8004036:	f000 82e3 	beq.w	8004600 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800403e:	6878      	ldr	r0, [r7, #4]
 8004040:	4798      	blx	r3
      }
      return;
 8004042:	e2dd      	b.n	8004600 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004044:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004048:	2b00      	cmp	r3, #0
 800404a:	f000 8123 	beq.w	8004294 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800404e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8004052:	4b8d      	ldr	r3, [pc, #564]	@ (8004288 <HAL_UART_IRQHandler+0x2b8>)
 8004054:	4013      	ands	r3, r2
 8004056:	2b00      	cmp	r3, #0
 8004058:	d106      	bne.n	8004068 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800405a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800405e:	4b8b      	ldr	r3, [pc, #556]	@ (800428c <HAL_UART_IRQHandler+0x2bc>)
 8004060:	4013      	ands	r3, r2
 8004062:	2b00      	cmp	r3, #0
 8004064:	f000 8116 	beq.w	8004294 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004068:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800406c:	f003 0301 	and.w	r3, r3, #1
 8004070:	2b00      	cmp	r3, #0
 8004072:	d011      	beq.n	8004098 <HAL_UART_IRQHandler+0xc8>
 8004074:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004078:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800407c:	2b00      	cmp	r3, #0
 800407e:	d00b      	beq.n	8004098 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	2201      	movs	r2, #1
 8004086:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800408e:	f043 0201 	orr.w	r2, r3, #1
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004098:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800409c:	f003 0302 	and.w	r3, r3, #2
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d011      	beq.n	80040c8 <HAL_UART_IRQHandler+0xf8>
 80040a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80040a8:	f003 0301 	and.w	r3, r3, #1
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d00b      	beq.n	80040c8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	2202      	movs	r2, #2
 80040b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040be:	f043 0204 	orr.w	r2, r3, #4
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80040c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80040cc:	f003 0304 	and.w	r3, r3, #4
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d011      	beq.n	80040f8 <HAL_UART_IRQHandler+0x128>
 80040d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80040d8:	f003 0301 	and.w	r3, r3, #1
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d00b      	beq.n	80040f8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	2204      	movs	r2, #4
 80040e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040ee:	f043 0202 	orr.w	r2, r3, #2
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80040f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80040fc:	f003 0308 	and.w	r3, r3, #8
 8004100:	2b00      	cmp	r3, #0
 8004102:	d017      	beq.n	8004134 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004104:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004108:	f003 0320 	and.w	r3, r3, #32
 800410c:	2b00      	cmp	r3, #0
 800410e:	d105      	bne.n	800411c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8004110:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8004114:	4b5c      	ldr	r3, [pc, #368]	@ (8004288 <HAL_UART_IRQHandler+0x2b8>)
 8004116:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004118:	2b00      	cmp	r3, #0
 800411a:	d00b      	beq.n	8004134 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	2208      	movs	r2, #8
 8004122:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800412a:	f043 0208 	orr.w	r2, r3, #8
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004134:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004138:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800413c:	2b00      	cmp	r3, #0
 800413e:	d012      	beq.n	8004166 <HAL_UART_IRQHandler+0x196>
 8004140:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004144:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004148:	2b00      	cmp	r3, #0
 800414a:	d00c      	beq.n	8004166 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004154:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800415c:	f043 0220 	orr.w	r2, r3, #32
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800416c:	2b00      	cmp	r3, #0
 800416e:	f000 8249 	beq.w	8004604 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004172:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004176:	f003 0320 	and.w	r3, r3, #32
 800417a:	2b00      	cmp	r3, #0
 800417c:	d013      	beq.n	80041a6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800417e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004182:	f003 0320 	and.w	r3, r3, #32
 8004186:	2b00      	cmp	r3, #0
 8004188:	d105      	bne.n	8004196 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800418a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800418e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004192:	2b00      	cmp	r3, #0
 8004194:	d007      	beq.n	80041a6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800419a:	2b00      	cmp	r3, #0
 800419c:	d003      	beq.n	80041a6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80041a2:	6878      	ldr	r0, [r7, #4]
 80041a4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041ac:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	689b      	ldr	r3, [r3, #8]
 80041b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041ba:	2b40      	cmp	r3, #64	@ 0x40
 80041bc:	d005      	beq.n	80041ca <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80041be:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80041c2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d054      	beq.n	8004274 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80041ca:	6878      	ldr	r0, [r7, #4]
 80041cc:	f000 fe73 	bl	8004eb6 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	689b      	ldr	r3, [r3, #8]
 80041d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041da:	2b40      	cmp	r3, #64	@ 0x40
 80041dc:	d146      	bne.n	800426c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	3308      	adds	r3, #8
 80041e4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041e8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80041ec:	e853 3f00 	ldrex	r3, [r3]
 80041f0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80041f4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80041f8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80041fc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	3308      	adds	r3, #8
 8004206:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800420a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800420e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004212:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004216:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800421a:	e841 2300 	strex	r3, r2, [r1]
 800421e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004222:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004226:	2b00      	cmp	r3, #0
 8004228:	d1d9      	bne.n	80041de <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004230:	2b00      	cmp	r3, #0
 8004232:	d017      	beq.n	8004264 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800423a:	4a15      	ldr	r2, [pc, #84]	@ (8004290 <HAL_UART_IRQHandler+0x2c0>)
 800423c:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004244:	4618      	mov	r0, r3
 8004246:	f7fe f848 	bl	80022da <HAL_DMA_Abort_IT>
 800424a:	4603      	mov	r3, r0
 800424c:	2b00      	cmp	r3, #0
 800424e:	d019      	beq.n	8004284 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004256:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004258:	687a      	ldr	r2, [r7, #4]
 800425a:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800425e:	4610      	mov	r0, r2
 8004260:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004262:	e00f      	b.n	8004284 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004264:	6878      	ldr	r0, [r7, #4]
 8004266:	f000 f9e0 	bl	800462a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800426a:	e00b      	b.n	8004284 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800426c:	6878      	ldr	r0, [r7, #4]
 800426e:	f000 f9dc 	bl	800462a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004272:	e007      	b.n	8004284 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004274:	6878      	ldr	r0, [r7, #4]
 8004276:	f000 f9d8 	bl	800462a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2200      	movs	r2, #0
 800427e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8004282:	e1bf      	b.n	8004604 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004284:	bf00      	nop
    return;
 8004286:	e1bd      	b.n	8004604 <HAL_UART_IRQHandler+0x634>
 8004288:	10000001 	.word	0x10000001
 800428c:	04000120 	.word	0x04000120
 8004290:	08004f81 	.word	0x08004f81

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004298:	2b01      	cmp	r3, #1
 800429a:	f040 8153 	bne.w	8004544 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800429e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80042a2:	f003 0310 	and.w	r3, r3, #16
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	f000 814c 	beq.w	8004544 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80042ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80042b0:	f003 0310 	and.w	r3, r3, #16
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	f000 8145 	beq.w	8004544 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	2210      	movs	r2, #16
 80042c0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	689b      	ldr	r3, [r3, #8]
 80042c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042cc:	2b40      	cmp	r3, #64	@ 0x40
 80042ce:	f040 80bb 	bne.w	8004448 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	685b      	ldr	r3, [r3, #4]
 80042dc:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80042e0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	f000 818f 	beq.w	8004608 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80042f0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80042f4:	429a      	cmp	r2, r3
 80042f6:	f080 8187 	bcs.w	8004608 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004300:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f003 0320 	and.w	r3, r3, #32
 8004312:	2b00      	cmp	r3, #0
 8004314:	f040 8087 	bne.w	8004426 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004320:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004324:	e853 3f00 	ldrex	r3, [r3]
 8004328:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800432c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004330:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004334:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	461a      	mov	r2, r3
 800433e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004342:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004346:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800434a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800434e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004352:	e841 2300 	strex	r3, r2, [r1]
 8004356:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800435a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800435e:	2b00      	cmp	r3, #0
 8004360:	d1da      	bne.n	8004318 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	3308      	adds	r3, #8
 8004368:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800436a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800436c:	e853 3f00 	ldrex	r3, [r3]
 8004370:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004372:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004374:	f023 0301 	bic.w	r3, r3, #1
 8004378:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	3308      	adds	r3, #8
 8004382:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004386:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800438a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800438c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800438e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004392:	e841 2300 	strex	r3, r2, [r1]
 8004396:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004398:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800439a:	2b00      	cmp	r3, #0
 800439c:	d1e1      	bne.n	8004362 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	3308      	adds	r3, #8
 80043a4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043a6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80043a8:	e853 3f00 	ldrex	r3, [r3]
 80043ac:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80043ae:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80043b0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80043b4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	3308      	adds	r3, #8
 80043be:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80043c2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80043c4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043c6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80043c8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80043ca:	e841 2300 	strex	r3, r2, [r1]
 80043ce:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80043d0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d1e3      	bne.n	800439e <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2220      	movs	r2, #32
 80043da:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2200      	movs	r2, #0
 80043e2:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043ea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80043ec:	e853 3f00 	ldrex	r3, [r3]
 80043f0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80043f2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80043f4:	f023 0310 	bic.w	r3, r3, #16
 80043f8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	461a      	mov	r2, r3
 8004402:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004406:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004408:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800440a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800440c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800440e:	e841 2300 	strex	r3, r2, [r1]
 8004412:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004414:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004416:	2b00      	cmp	r3, #0
 8004418:	d1e4      	bne.n	80043e4 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004420:	4618      	mov	r0, r3
 8004422:	f7fd fefc 	bl	800221e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2202      	movs	r2, #2
 800442a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004438:	b29b      	uxth	r3, r3
 800443a:	1ad3      	subs	r3, r2, r3
 800443c:	b29b      	uxth	r3, r3
 800443e:	4619      	mov	r1, r3
 8004440:	6878      	ldr	r0, [r7, #4]
 8004442:	f000 f8fb 	bl	800463c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004446:	e0df      	b.n	8004608 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004454:	b29b      	uxth	r3, r3
 8004456:	1ad3      	subs	r3, r2, r3
 8004458:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004462:	b29b      	uxth	r3, r3
 8004464:	2b00      	cmp	r3, #0
 8004466:	f000 80d1 	beq.w	800460c <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 800446a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800446e:	2b00      	cmp	r3, #0
 8004470:	f000 80cc 	beq.w	800460c <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800447a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800447c:	e853 3f00 	ldrex	r3, [r3]
 8004480:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004482:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004484:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004488:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	461a      	mov	r2, r3
 8004492:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004496:	647b      	str	r3, [r7, #68]	@ 0x44
 8004498:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800449a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800449c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800449e:	e841 2300 	strex	r3, r2, [r1]
 80044a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80044a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d1e4      	bne.n	8004474 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	3308      	adds	r3, #8
 80044b0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044b4:	e853 3f00 	ldrex	r3, [r3]
 80044b8:	623b      	str	r3, [r7, #32]
   return(result);
 80044ba:	6a3b      	ldr	r3, [r7, #32]
 80044bc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80044c0:	f023 0301 	bic.w	r3, r3, #1
 80044c4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	3308      	adds	r3, #8
 80044ce:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80044d2:	633a      	str	r2, [r7, #48]	@ 0x30
 80044d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044d6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80044d8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80044da:	e841 2300 	strex	r3, r2, [r1]
 80044de:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80044e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d1e1      	bne.n	80044aa <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2220      	movs	r2, #32
 80044ea:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2200      	movs	r2, #0
 80044f2:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2200      	movs	r2, #0
 80044f8:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004500:	693b      	ldr	r3, [r7, #16]
 8004502:	e853 3f00 	ldrex	r3, [r3]
 8004506:	60fb      	str	r3, [r7, #12]
   return(result);
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	f023 0310 	bic.w	r3, r3, #16
 800450e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	461a      	mov	r2, r3
 8004518:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800451c:	61fb      	str	r3, [r7, #28]
 800451e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004520:	69b9      	ldr	r1, [r7, #24]
 8004522:	69fa      	ldr	r2, [r7, #28]
 8004524:	e841 2300 	strex	r3, r2, [r1]
 8004528:	617b      	str	r3, [r7, #20]
   return(result);
 800452a:	697b      	ldr	r3, [r7, #20]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d1e4      	bne.n	80044fa <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2202      	movs	r2, #2
 8004534:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004536:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800453a:	4619      	mov	r1, r3
 800453c:	6878      	ldr	r0, [r7, #4]
 800453e:	f000 f87d 	bl	800463c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004542:	e063      	b.n	800460c <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004544:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004548:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800454c:	2b00      	cmp	r3, #0
 800454e:	d00e      	beq.n	800456e <HAL_UART_IRQHandler+0x59e>
 8004550:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004554:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004558:	2b00      	cmp	r3, #0
 800455a:	d008      	beq.n	800456e <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8004564:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004566:	6878      	ldr	r0, [r7, #4]
 8004568:	f000 fdb4 	bl	80050d4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800456c:	e051      	b.n	8004612 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800456e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004572:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004576:	2b00      	cmp	r3, #0
 8004578:	d014      	beq.n	80045a4 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800457a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800457e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004582:	2b00      	cmp	r3, #0
 8004584:	d105      	bne.n	8004592 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8004586:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800458a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800458e:	2b00      	cmp	r3, #0
 8004590:	d008      	beq.n	80045a4 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004596:	2b00      	cmp	r3, #0
 8004598:	d03a      	beq.n	8004610 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800459e:	6878      	ldr	r0, [r7, #4]
 80045a0:	4798      	blx	r3
    }
    return;
 80045a2:	e035      	b.n	8004610 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80045a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80045a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d009      	beq.n	80045c4 <HAL_UART_IRQHandler+0x5f4>
 80045b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80045b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d003      	beq.n	80045c4 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 80045bc:	6878      	ldr	r0, [r7, #4]
 80045be:	f000 fcf5 	bl	8004fac <UART_EndTransmit_IT>
    return;
 80045c2:	e026      	b.n	8004612 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80045c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80045c8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d009      	beq.n	80045e4 <HAL_UART_IRQHandler+0x614>
 80045d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80045d4:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d003      	beq.n	80045e4 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80045dc:	6878      	ldr	r0, [r7, #4]
 80045de:	f000 fd8b 	bl	80050f8 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80045e2:	e016      	b.n	8004612 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80045e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80045e8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d010      	beq.n	8004612 <HAL_UART_IRQHandler+0x642>
 80045f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	da0c      	bge.n	8004612 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80045f8:	6878      	ldr	r0, [r7, #4]
 80045fa:	f000 fd74 	bl	80050e6 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80045fe:	e008      	b.n	8004612 <HAL_UART_IRQHandler+0x642>
      return;
 8004600:	bf00      	nop
 8004602:	e006      	b.n	8004612 <HAL_UART_IRQHandler+0x642>
    return;
 8004604:	bf00      	nop
 8004606:	e004      	b.n	8004612 <HAL_UART_IRQHandler+0x642>
      return;
 8004608:	bf00      	nop
 800460a:	e002      	b.n	8004612 <HAL_UART_IRQHandler+0x642>
      return;
 800460c:	bf00      	nop
 800460e:	e000      	b.n	8004612 <HAL_UART_IRQHandler+0x642>
    return;
 8004610:	bf00      	nop
  }
}
 8004612:	37e8      	adds	r7, #232	@ 0xe8
 8004614:	46bd      	mov	sp, r7
 8004616:	bd80      	pop	{r7, pc}

08004618 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004618:	b480      	push	{r7}
 800461a:	b083      	sub	sp, #12
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004620:	bf00      	nop
 8004622:	370c      	adds	r7, #12
 8004624:	46bd      	mov	sp, r7
 8004626:	bc80      	pop	{r7}
 8004628:	4770      	bx	lr

0800462a <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800462a:	b480      	push	{r7}
 800462c:	b083      	sub	sp, #12
 800462e:	af00      	add	r7, sp, #0
 8004630:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004632:	bf00      	nop
 8004634:	370c      	adds	r7, #12
 8004636:	46bd      	mov	sp, r7
 8004638:	bc80      	pop	{r7}
 800463a:	4770      	bx	lr

0800463c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800463c:	b480      	push	{r7}
 800463e:	b083      	sub	sp, #12
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
 8004644:	460b      	mov	r3, r1
 8004646:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004648:	bf00      	nop
 800464a:	370c      	adds	r7, #12
 800464c:	46bd      	mov	sp, r7
 800464e:	bc80      	pop	{r7}
 8004650:	4770      	bx	lr
	...

08004654 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004654:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004658:	b08c      	sub	sp, #48	@ 0x30
 800465a:	af00      	add	r7, sp, #0
 800465c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800465e:	2300      	movs	r3, #0
 8004660:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004664:	697b      	ldr	r3, [r7, #20]
 8004666:	689a      	ldr	r2, [r3, #8]
 8004668:	697b      	ldr	r3, [r7, #20]
 800466a:	691b      	ldr	r3, [r3, #16]
 800466c:	431a      	orrs	r2, r3
 800466e:	697b      	ldr	r3, [r7, #20]
 8004670:	695b      	ldr	r3, [r3, #20]
 8004672:	431a      	orrs	r2, r3
 8004674:	697b      	ldr	r3, [r7, #20]
 8004676:	69db      	ldr	r3, [r3, #28]
 8004678:	4313      	orrs	r3, r2
 800467a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800467c:	697b      	ldr	r3, [r7, #20]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	681a      	ldr	r2, [r3, #0]
 8004682:	4b94      	ldr	r3, [pc, #592]	@ (80048d4 <UART_SetConfig+0x280>)
 8004684:	4013      	ands	r3, r2
 8004686:	697a      	ldr	r2, [r7, #20]
 8004688:	6812      	ldr	r2, [r2, #0]
 800468a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800468c:	430b      	orrs	r3, r1
 800468e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004690:	697b      	ldr	r3, [r7, #20]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	685b      	ldr	r3, [r3, #4]
 8004696:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800469a:	697b      	ldr	r3, [r7, #20]
 800469c:	68da      	ldr	r2, [r3, #12]
 800469e:	697b      	ldr	r3, [r7, #20]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	430a      	orrs	r2, r1
 80046a4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80046a6:	697b      	ldr	r3, [r7, #20]
 80046a8:	699b      	ldr	r3, [r3, #24]
 80046aa:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80046ac:	697b      	ldr	r3, [r7, #20]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	4a89      	ldr	r2, [pc, #548]	@ (80048d8 <UART_SetConfig+0x284>)
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d004      	beq.n	80046c0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80046b6:	697b      	ldr	r3, [r7, #20]
 80046b8:	6a1b      	ldr	r3, [r3, #32]
 80046ba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80046bc:	4313      	orrs	r3, r2
 80046be:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80046c0:	697b      	ldr	r3, [r7, #20]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	689b      	ldr	r3, [r3, #8]
 80046c6:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80046ca:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80046ce:	697a      	ldr	r2, [r7, #20]
 80046d0:	6812      	ldr	r2, [r2, #0]
 80046d2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80046d4:	430b      	orrs	r3, r1
 80046d6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80046d8:	697b      	ldr	r3, [r7, #20]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046de:	f023 010f 	bic.w	r1, r3, #15
 80046e2:	697b      	ldr	r3, [r7, #20]
 80046e4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80046e6:	697b      	ldr	r3, [r7, #20]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	430a      	orrs	r2, r1
 80046ec:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80046ee:	697b      	ldr	r3, [r7, #20]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	4a7a      	ldr	r2, [pc, #488]	@ (80048dc <UART_SetConfig+0x288>)
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d127      	bne.n	8004748 <UART_SetConfig+0xf4>
 80046f8:	2003      	movs	r0, #3
 80046fa:	f7ff faad 	bl	8003c58 <LL_RCC_GetUSARTClockSource>
 80046fe:	4603      	mov	r3, r0
 8004700:	f5a3 3340 	sub.w	r3, r3, #196608	@ 0x30000
 8004704:	2b03      	cmp	r3, #3
 8004706:	d81b      	bhi.n	8004740 <UART_SetConfig+0xec>
 8004708:	a201      	add	r2, pc, #4	@ (adr r2, 8004710 <UART_SetConfig+0xbc>)
 800470a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800470e:	bf00      	nop
 8004710:	08004721 	.word	0x08004721
 8004714:	08004731 	.word	0x08004731
 8004718:	08004729 	.word	0x08004729
 800471c:	08004739 	.word	0x08004739
 8004720:	2301      	movs	r3, #1
 8004722:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004726:	e080      	b.n	800482a <UART_SetConfig+0x1d6>
 8004728:	2302      	movs	r3, #2
 800472a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800472e:	e07c      	b.n	800482a <UART_SetConfig+0x1d6>
 8004730:	2304      	movs	r3, #4
 8004732:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004736:	e078      	b.n	800482a <UART_SetConfig+0x1d6>
 8004738:	2308      	movs	r3, #8
 800473a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800473e:	e074      	b.n	800482a <UART_SetConfig+0x1d6>
 8004740:	2310      	movs	r3, #16
 8004742:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004746:	e070      	b.n	800482a <UART_SetConfig+0x1d6>
 8004748:	697b      	ldr	r3, [r7, #20]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	4a64      	ldr	r2, [pc, #400]	@ (80048e0 <UART_SetConfig+0x28c>)
 800474e:	4293      	cmp	r3, r2
 8004750:	d138      	bne.n	80047c4 <UART_SetConfig+0x170>
 8004752:	200c      	movs	r0, #12
 8004754:	f7ff fa80 	bl	8003c58 <LL_RCC_GetUSARTClockSource>
 8004758:	4603      	mov	r3, r0
 800475a:	f5a3 2340 	sub.w	r3, r3, #786432	@ 0xc0000
 800475e:	2b0c      	cmp	r3, #12
 8004760:	d82c      	bhi.n	80047bc <UART_SetConfig+0x168>
 8004762:	a201      	add	r2, pc, #4	@ (adr r2, 8004768 <UART_SetConfig+0x114>)
 8004764:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004768:	0800479d 	.word	0x0800479d
 800476c:	080047bd 	.word	0x080047bd
 8004770:	080047bd 	.word	0x080047bd
 8004774:	080047bd 	.word	0x080047bd
 8004778:	080047ad 	.word	0x080047ad
 800477c:	080047bd 	.word	0x080047bd
 8004780:	080047bd 	.word	0x080047bd
 8004784:	080047bd 	.word	0x080047bd
 8004788:	080047a5 	.word	0x080047a5
 800478c:	080047bd 	.word	0x080047bd
 8004790:	080047bd 	.word	0x080047bd
 8004794:	080047bd 	.word	0x080047bd
 8004798:	080047b5 	.word	0x080047b5
 800479c:	2300      	movs	r3, #0
 800479e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80047a2:	e042      	b.n	800482a <UART_SetConfig+0x1d6>
 80047a4:	2302      	movs	r3, #2
 80047a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80047aa:	e03e      	b.n	800482a <UART_SetConfig+0x1d6>
 80047ac:	2304      	movs	r3, #4
 80047ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80047b2:	e03a      	b.n	800482a <UART_SetConfig+0x1d6>
 80047b4:	2308      	movs	r3, #8
 80047b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80047ba:	e036      	b.n	800482a <UART_SetConfig+0x1d6>
 80047bc:	2310      	movs	r3, #16
 80047be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80047c2:	e032      	b.n	800482a <UART_SetConfig+0x1d6>
 80047c4:	697b      	ldr	r3, [r7, #20]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	4a43      	ldr	r2, [pc, #268]	@ (80048d8 <UART_SetConfig+0x284>)
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d12a      	bne.n	8004824 <UART_SetConfig+0x1d0>
 80047ce:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 80047d2:	f7ff fa53 	bl	8003c7c <LL_RCC_GetLPUARTClockSource>
 80047d6:	4603      	mov	r3, r0
 80047d8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80047dc:	d01a      	beq.n	8004814 <UART_SetConfig+0x1c0>
 80047de:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80047e2:	d81b      	bhi.n	800481c <UART_SetConfig+0x1c8>
 80047e4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80047e8:	d00c      	beq.n	8004804 <UART_SetConfig+0x1b0>
 80047ea:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80047ee:	d815      	bhi.n	800481c <UART_SetConfig+0x1c8>
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d003      	beq.n	80047fc <UART_SetConfig+0x1a8>
 80047f4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80047f8:	d008      	beq.n	800480c <UART_SetConfig+0x1b8>
 80047fa:	e00f      	b.n	800481c <UART_SetConfig+0x1c8>
 80047fc:	2300      	movs	r3, #0
 80047fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004802:	e012      	b.n	800482a <UART_SetConfig+0x1d6>
 8004804:	2302      	movs	r3, #2
 8004806:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800480a:	e00e      	b.n	800482a <UART_SetConfig+0x1d6>
 800480c:	2304      	movs	r3, #4
 800480e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004812:	e00a      	b.n	800482a <UART_SetConfig+0x1d6>
 8004814:	2308      	movs	r3, #8
 8004816:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800481a:	e006      	b.n	800482a <UART_SetConfig+0x1d6>
 800481c:	2310      	movs	r3, #16
 800481e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004822:	e002      	b.n	800482a <UART_SetConfig+0x1d6>
 8004824:	2310      	movs	r3, #16
 8004826:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800482a:	697b      	ldr	r3, [r7, #20]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	4a2a      	ldr	r2, [pc, #168]	@ (80048d8 <UART_SetConfig+0x284>)
 8004830:	4293      	cmp	r3, r2
 8004832:	f040 80a4 	bne.w	800497e <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004836:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800483a:	2b08      	cmp	r3, #8
 800483c:	d823      	bhi.n	8004886 <UART_SetConfig+0x232>
 800483e:	a201      	add	r2, pc, #4	@ (adr r2, 8004844 <UART_SetConfig+0x1f0>)
 8004840:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004844:	08004869 	.word	0x08004869
 8004848:	08004887 	.word	0x08004887
 800484c:	08004871 	.word	0x08004871
 8004850:	08004887 	.word	0x08004887
 8004854:	08004877 	.word	0x08004877
 8004858:	08004887 	.word	0x08004887
 800485c:	08004887 	.word	0x08004887
 8004860:	08004887 	.word	0x08004887
 8004864:	0800487f 	.word	0x0800487f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004868:	f7fe ff12 	bl	8003690 <HAL_RCC_GetPCLK1Freq>
 800486c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800486e:	e010      	b.n	8004892 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004870:	4b1c      	ldr	r3, [pc, #112]	@ (80048e4 <UART_SetConfig+0x290>)
 8004872:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004874:	e00d      	b.n	8004892 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004876:	f7fe fe57 	bl	8003528 <HAL_RCC_GetSysClockFreq>
 800487a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800487c:	e009      	b.n	8004892 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800487e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004882:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004884:	e005      	b.n	8004892 <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 8004886:	2300      	movs	r3, #0
 8004888:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800488a:	2301      	movs	r3, #1
 800488c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004890:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004892:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004894:	2b00      	cmp	r3, #0
 8004896:	f000 8137 	beq.w	8004b08 <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800489a:	697b      	ldr	r3, [r7, #20]
 800489c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800489e:	4a12      	ldr	r2, [pc, #72]	@ (80048e8 <UART_SetConfig+0x294>)
 80048a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80048a4:	461a      	mov	r2, r3
 80048a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048a8:	fbb3 f3f2 	udiv	r3, r3, r2
 80048ac:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80048ae:	697b      	ldr	r3, [r7, #20]
 80048b0:	685a      	ldr	r2, [r3, #4]
 80048b2:	4613      	mov	r3, r2
 80048b4:	005b      	lsls	r3, r3, #1
 80048b6:	4413      	add	r3, r2
 80048b8:	69ba      	ldr	r2, [r7, #24]
 80048ba:	429a      	cmp	r2, r3
 80048bc:	d305      	bcc.n	80048ca <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80048be:	697b      	ldr	r3, [r7, #20]
 80048c0:	685b      	ldr	r3, [r3, #4]
 80048c2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80048c4:	69ba      	ldr	r2, [r7, #24]
 80048c6:	429a      	cmp	r2, r3
 80048c8:	d910      	bls.n	80048ec <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 80048ca:	2301      	movs	r3, #1
 80048cc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80048d0:	e11a      	b.n	8004b08 <UART_SetConfig+0x4b4>
 80048d2:	bf00      	nop
 80048d4:	cfff69f3 	.word	0xcfff69f3
 80048d8:	40008000 	.word	0x40008000
 80048dc:	40013800 	.word	0x40013800
 80048e0:	40004400 	.word	0x40004400
 80048e4:	00f42400 	.word	0x00f42400
 80048e8:	08007e80 	.word	0x08007e80
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80048ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048ee:	2200      	movs	r2, #0
 80048f0:	60bb      	str	r3, [r7, #8]
 80048f2:	60fa      	str	r2, [r7, #12]
 80048f4:	697b      	ldr	r3, [r7, #20]
 80048f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048f8:	4a8e      	ldr	r2, [pc, #568]	@ (8004b34 <UART_SetConfig+0x4e0>)
 80048fa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80048fe:	b29b      	uxth	r3, r3
 8004900:	2200      	movs	r2, #0
 8004902:	603b      	str	r3, [r7, #0]
 8004904:	607a      	str	r2, [r7, #4]
 8004906:	e9d7 2300 	ldrd	r2, r3, [r7]
 800490a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800490e:	f7fc fb81 	bl	8001014 <__aeabi_uldivmod>
 8004912:	4602      	mov	r2, r0
 8004914:	460b      	mov	r3, r1
 8004916:	4610      	mov	r0, r2
 8004918:	4619      	mov	r1, r3
 800491a:	f04f 0200 	mov.w	r2, #0
 800491e:	f04f 0300 	mov.w	r3, #0
 8004922:	020b      	lsls	r3, r1, #8
 8004924:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004928:	0202      	lsls	r2, r0, #8
 800492a:	6979      	ldr	r1, [r7, #20]
 800492c:	6849      	ldr	r1, [r1, #4]
 800492e:	0849      	lsrs	r1, r1, #1
 8004930:	2000      	movs	r0, #0
 8004932:	460c      	mov	r4, r1
 8004934:	4605      	mov	r5, r0
 8004936:	eb12 0804 	adds.w	r8, r2, r4
 800493a:	eb43 0905 	adc.w	r9, r3, r5
 800493e:	697b      	ldr	r3, [r7, #20]
 8004940:	685b      	ldr	r3, [r3, #4]
 8004942:	2200      	movs	r2, #0
 8004944:	469a      	mov	sl, r3
 8004946:	4693      	mov	fp, r2
 8004948:	4652      	mov	r2, sl
 800494a:	465b      	mov	r3, fp
 800494c:	4640      	mov	r0, r8
 800494e:	4649      	mov	r1, r9
 8004950:	f7fc fb60 	bl	8001014 <__aeabi_uldivmod>
 8004954:	4602      	mov	r2, r0
 8004956:	460b      	mov	r3, r1
 8004958:	4613      	mov	r3, r2
 800495a:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800495c:	6a3b      	ldr	r3, [r7, #32]
 800495e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004962:	d308      	bcc.n	8004976 <UART_SetConfig+0x322>
 8004964:	6a3b      	ldr	r3, [r7, #32]
 8004966:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800496a:	d204      	bcs.n	8004976 <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 800496c:	697b      	ldr	r3, [r7, #20]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	6a3a      	ldr	r2, [r7, #32]
 8004972:	60da      	str	r2, [r3, #12]
 8004974:	e0c8      	b.n	8004b08 <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 8004976:	2301      	movs	r3, #1
 8004978:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800497c:	e0c4      	b.n	8004b08 <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800497e:	697b      	ldr	r3, [r7, #20]
 8004980:	69db      	ldr	r3, [r3, #28]
 8004982:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004986:	d167      	bne.n	8004a58 <UART_SetConfig+0x404>
  {
    switch (clocksource)
 8004988:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800498c:	2b08      	cmp	r3, #8
 800498e:	d828      	bhi.n	80049e2 <UART_SetConfig+0x38e>
 8004990:	a201      	add	r2, pc, #4	@ (adr r2, 8004998 <UART_SetConfig+0x344>)
 8004992:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004996:	bf00      	nop
 8004998:	080049bd 	.word	0x080049bd
 800499c:	080049c5 	.word	0x080049c5
 80049a0:	080049cd 	.word	0x080049cd
 80049a4:	080049e3 	.word	0x080049e3
 80049a8:	080049d3 	.word	0x080049d3
 80049ac:	080049e3 	.word	0x080049e3
 80049b0:	080049e3 	.word	0x080049e3
 80049b4:	080049e3 	.word	0x080049e3
 80049b8:	080049db 	.word	0x080049db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80049bc:	f7fe fe68 	bl	8003690 <HAL_RCC_GetPCLK1Freq>
 80049c0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80049c2:	e014      	b.n	80049ee <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80049c4:	f7fe fe76 	bl	80036b4 <HAL_RCC_GetPCLK2Freq>
 80049c8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80049ca:	e010      	b.n	80049ee <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80049cc:	4b5a      	ldr	r3, [pc, #360]	@ (8004b38 <UART_SetConfig+0x4e4>)
 80049ce:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80049d0:	e00d      	b.n	80049ee <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80049d2:	f7fe fda9 	bl	8003528 <HAL_RCC_GetSysClockFreq>
 80049d6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80049d8:	e009      	b.n	80049ee <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80049da:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80049de:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80049e0:	e005      	b.n	80049ee <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 80049e2:	2300      	movs	r3, #0
 80049e4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80049e6:	2301      	movs	r3, #1
 80049e8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80049ec:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80049ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	f000 8089 	beq.w	8004b08 <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80049f6:	697b      	ldr	r3, [r7, #20]
 80049f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049fa:	4a4e      	ldr	r2, [pc, #312]	@ (8004b34 <UART_SetConfig+0x4e0>)
 80049fc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004a00:	461a      	mov	r2, r3
 8004a02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a04:	fbb3 f3f2 	udiv	r3, r3, r2
 8004a08:	005a      	lsls	r2, r3, #1
 8004a0a:	697b      	ldr	r3, [r7, #20]
 8004a0c:	685b      	ldr	r3, [r3, #4]
 8004a0e:	085b      	lsrs	r3, r3, #1
 8004a10:	441a      	add	r2, r3
 8004a12:	697b      	ldr	r3, [r7, #20]
 8004a14:	685b      	ldr	r3, [r3, #4]
 8004a16:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a1a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004a1c:	6a3b      	ldr	r3, [r7, #32]
 8004a1e:	2b0f      	cmp	r3, #15
 8004a20:	d916      	bls.n	8004a50 <UART_SetConfig+0x3fc>
 8004a22:	6a3b      	ldr	r3, [r7, #32]
 8004a24:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004a28:	d212      	bcs.n	8004a50 <UART_SetConfig+0x3fc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004a2a:	6a3b      	ldr	r3, [r7, #32]
 8004a2c:	b29b      	uxth	r3, r3
 8004a2e:	f023 030f 	bic.w	r3, r3, #15
 8004a32:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004a34:	6a3b      	ldr	r3, [r7, #32]
 8004a36:	085b      	lsrs	r3, r3, #1
 8004a38:	b29b      	uxth	r3, r3
 8004a3a:	f003 0307 	and.w	r3, r3, #7
 8004a3e:	b29a      	uxth	r2, r3
 8004a40:	8bfb      	ldrh	r3, [r7, #30]
 8004a42:	4313      	orrs	r3, r2
 8004a44:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8004a46:	697b      	ldr	r3, [r7, #20]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	8bfa      	ldrh	r2, [r7, #30]
 8004a4c:	60da      	str	r2, [r3, #12]
 8004a4e:	e05b      	b.n	8004b08 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8004a50:	2301      	movs	r3, #1
 8004a52:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004a56:	e057      	b.n	8004b08 <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004a58:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004a5c:	2b08      	cmp	r3, #8
 8004a5e:	d828      	bhi.n	8004ab2 <UART_SetConfig+0x45e>
 8004a60:	a201      	add	r2, pc, #4	@ (adr r2, 8004a68 <UART_SetConfig+0x414>)
 8004a62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a66:	bf00      	nop
 8004a68:	08004a8d 	.word	0x08004a8d
 8004a6c:	08004a95 	.word	0x08004a95
 8004a70:	08004a9d 	.word	0x08004a9d
 8004a74:	08004ab3 	.word	0x08004ab3
 8004a78:	08004aa3 	.word	0x08004aa3
 8004a7c:	08004ab3 	.word	0x08004ab3
 8004a80:	08004ab3 	.word	0x08004ab3
 8004a84:	08004ab3 	.word	0x08004ab3
 8004a88:	08004aab 	.word	0x08004aab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a8c:	f7fe fe00 	bl	8003690 <HAL_RCC_GetPCLK1Freq>
 8004a90:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004a92:	e014      	b.n	8004abe <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004a94:	f7fe fe0e 	bl	80036b4 <HAL_RCC_GetPCLK2Freq>
 8004a98:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004a9a:	e010      	b.n	8004abe <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004a9c:	4b26      	ldr	r3, [pc, #152]	@ (8004b38 <UART_SetConfig+0x4e4>)
 8004a9e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004aa0:	e00d      	b.n	8004abe <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004aa2:	f7fe fd41 	bl	8003528 <HAL_RCC_GetSysClockFreq>
 8004aa6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004aa8:	e009      	b.n	8004abe <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004aaa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004aae:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004ab0:	e005      	b.n	8004abe <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004ab6:	2301      	movs	r3, #1
 8004ab8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004abc:	bf00      	nop
    }

    if (pclk != 0U)
 8004abe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d021      	beq.n	8004b08 <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004ac4:	697b      	ldr	r3, [r7, #20]
 8004ac6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ac8:	4a1a      	ldr	r2, [pc, #104]	@ (8004b34 <UART_SetConfig+0x4e0>)
 8004aca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004ace:	461a      	mov	r2, r3
 8004ad0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ad2:	fbb3 f2f2 	udiv	r2, r3, r2
 8004ad6:	697b      	ldr	r3, [r7, #20]
 8004ad8:	685b      	ldr	r3, [r3, #4]
 8004ada:	085b      	lsrs	r3, r3, #1
 8004adc:	441a      	add	r2, r3
 8004ade:	697b      	ldr	r3, [r7, #20]
 8004ae0:	685b      	ldr	r3, [r3, #4]
 8004ae2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ae6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004ae8:	6a3b      	ldr	r3, [r7, #32]
 8004aea:	2b0f      	cmp	r3, #15
 8004aec:	d909      	bls.n	8004b02 <UART_SetConfig+0x4ae>
 8004aee:	6a3b      	ldr	r3, [r7, #32]
 8004af0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004af4:	d205      	bcs.n	8004b02 <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004af6:	6a3b      	ldr	r3, [r7, #32]
 8004af8:	b29a      	uxth	r2, r3
 8004afa:	697b      	ldr	r3, [r7, #20]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	60da      	str	r2, [r3, #12]
 8004b00:	e002      	b.n	8004b08 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8004b02:	2301      	movs	r3, #1
 8004b04:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004b08:	697b      	ldr	r3, [r7, #20]
 8004b0a:	2201      	movs	r2, #1
 8004b0c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8004b10:	697b      	ldr	r3, [r7, #20]
 8004b12:	2201      	movs	r2, #1
 8004b14:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004b18:	697b      	ldr	r3, [r7, #20]
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8004b1e:	697b      	ldr	r3, [r7, #20]
 8004b20:	2200      	movs	r2, #0
 8004b22:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8004b24:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8004b28:	4618      	mov	r0, r3
 8004b2a:	3730      	adds	r7, #48	@ 0x30
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004b32:	bf00      	nop
 8004b34:	08007e80 	.word	0x08007e80
 8004b38:	00f42400 	.word	0x00f42400

08004b3c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004b3c:	b480      	push	{r7}
 8004b3e:	b083      	sub	sp, #12
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b48:	f003 0308 	and.w	r3, r3, #8
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d00a      	beq.n	8004b66 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	685b      	ldr	r3, [r3, #4]
 8004b56:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	430a      	orrs	r2, r1
 8004b64:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b6a:	f003 0301 	and.w	r3, r3, #1
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d00a      	beq.n	8004b88 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	685b      	ldr	r3, [r3, #4]
 8004b78:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	430a      	orrs	r2, r1
 8004b86:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b8c:	f003 0302 	and.w	r3, r3, #2
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d00a      	beq.n	8004baa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	685b      	ldr	r3, [r3, #4]
 8004b9a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	430a      	orrs	r2, r1
 8004ba8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bae:	f003 0304 	and.w	r3, r3, #4
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d00a      	beq.n	8004bcc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	685b      	ldr	r3, [r3, #4]
 8004bbc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	430a      	orrs	r2, r1
 8004bca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bd0:	f003 0310 	and.w	r3, r3, #16
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d00a      	beq.n	8004bee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	689b      	ldr	r3, [r3, #8]
 8004bde:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	430a      	orrs	r2, r1
 8004bec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bf2:	f003 0320 	and.w	r3, r3, #32
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d00a      	beq.n	8004c10 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	689b      	ldr	r3, [r3, #8]
 8004c00:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	430a      	orrs	r2, r1
 8004c0e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d01a      	beq.n	8004c52 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	685b      	ldr	r3, [r3, #4]
 8004c22:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	430a      	orrs	r2, r1
 8004c30:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c36:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004c3a:	d10a      	bne.n	8004c52 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	685b      	ldr	r3, [r3, #4]
 8004c42:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	430a      	orrs	r2, r1
 8004c50:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c56:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d00a      	beq.n	8004c74 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	685b      	ldr	r3, [r3, #4]
 8004c64:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	430a      	orrs	r2, r1
 8004c72:	605a      	str	r2, [r3, #4]
  }
}
 8004c74:	bf00      	nop
 8004c76:	370c      	adds	r7, #12
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	bc80      	pop	{r7}
 8004c7c:	4770      	bx	lr

08004c7e <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004c7e:	b580      	push	{r7, lr}
 8004c80:	b086      	sub	sp, #24
 8004c82:	af02      	add	r7, sp, #8
 8004c84:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2200      	movs	r2, #0
 8004c8a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004c8e:	f7fd f98d 	bl	8001fac <HAL_GetTick>
 8004c92:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f003 0308 	and.w	r3, r3, #8
 8004c9e:	2b08      	cmp	r3, #8
 8004ca0:	d10e      	bne.n	8004cc0 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004ca2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004ca6:	9300      	str	r3, [sp, #0]
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	2200      	movs	r2, #0
 8004cac:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004cb0:	6878      	ldr	r0, [r7, #4]
 8004cb2:	f000 f832 	bl	8004d1a <UART_WaitOnFlagUntilTimeout>
 8004cb6:	4603      	mov	r3, r0
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d001      	beq.n	8004cc0 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004cbc:	2303      	movs	r3, #3
 8004cbe:	e028      	b.n	8004d12 <UART_CheckIdleState+0x94>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f003 0304 	and.w	r3, r3, #4
 8004cca:	2b04      	cmp	r3, #4
 8004ccc:	d10e      	bne.n	8004cec <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004cce:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004cd2:	9300      	str	r3, [sp, #0]
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004cdc:	6878      	ldr	r0, [r7, #4]
 8004cde:	f000 f81c 	bl	8004d1a <UART_WaitOnFlagUntilTimeout>
 8004ce2:	4603      	mov	r3, r0
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d001      	beq.n	8004cec <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004ce8:	2303      	movs	r3, #3
 8004cea:	e012      	b.n	8004d12 <UART_CheckIdleState+0x94>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2220      	movs	r2, #32
 8004cf0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2220      	movs	r2, #32
 8004cf8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2200      	movs	r2, #0
 8004d00:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2200      	movs	r2, #0
 8004d06:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004d10:	2300      	movs	r3, #0
}
 8004d12:	4618      	mov	r0, r3
 8004d14:	3710      	adds	r7, #16
 8004d16:	46bd      	mov	sp, r7
 8004d18:	bd80      	pop	{r7, pc}

08004d1a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004d1a:	b580      	push	{r7, lr}
 8004d1c:	b09c      	sub	sp, #112	@ 0x70
 8004d1e:	af00      	add	r7, sp, #0
 8004d20:	60f8      	str	r0, [r7, #12]
 8004d22:	60b9      	str	r1, [r7, #8]
 8004d24:	603b      	str	r3, [r7, #0]
 8004d26:	4613      	mov	r3, r2
 8004d28:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d2a:	e0af      	b.n	8004e8c <UART_WaitOnFlagUntilTimeout+0x172>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d2c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004d2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d32:	f000 80ab 	beq.w	8004e8c <UART_WaitOnFlagUntilTimeout+0x172>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d36:	f7fd f939 	bl	8001fac <HAL_GetTick>
 8004d3a:	4602      	mov	r2, r0
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	1ad3      	subs	r3, r2, r3
 8004d40:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8004d42:	429a      	cmp	r2, r3
 8004d44:	d302      	bcc.n	8004d4c <UART_WaitOnFlagUntilTimeout+0x32>
 8004d46:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d140      	bne.n	8004dce <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d52:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004d54:	e853 3f00 	ldrex	r3, [r3]
 8004d58:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8004d5a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004d5c:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8004d60:	667b      	str	r3, [r7, #100]	@ 0x64
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	461a      	mov	r2, r3
 8004d68:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004d6a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004d6c:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d6e:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8004d70:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8004d72:	e841 2300 	strex	r3, r2, [r1]
 8004d76:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8004d78:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d1e6      	bne.n	8004d4c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	3308      	adds	r3, #8
 8004d84:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d86:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004d88:	e853 3f00 	ldrex	r3, [r3]
 8004d8c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004d8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d90:	f023 0301 	bic.w	r3, r3, #1
 8004d94:	663b      	str	r3, [r7, #96]	@ 0x60
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	3308      	adds	r3, #8
 8004d9c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004d9e:	64ba      	str	r2, [r7, #72]	@ 0x48
 8004da0:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004da2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004da4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004da6:	e841 2300 	strex	r3, r2, [r1]
 8004daa:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8004dac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d1e5      	bne.n	8004d7e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	2220      	movs	r2, #32
 8004db6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        huart->RxState = HAL_UART_STATE_READY;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	2220      	movs	r2, #32
 8004dbe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        __HAL_UNLOCK(huart);
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

        return HAL_TIMEOUT;
 8004dca:	2303      	movs	r3, #3
 8004dcc:	e06f      	b.n	8004eae <UART_WaitOnFlagUntilTimeout+0x194>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f003 0304 	and.w	r3, r3, #4
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d057      	beq.n	8004e8c <UART_WaitOnFlagUntilTimeout+0x172>
 8004ddc:	68bb      	ldr	r3, [r7, #8]
 8004dde:	2b80      	cmp	r3, #128	@ 0x80
 8004de0:	d054      	beq.n	8004e8c <UART_WaitOnFlagUntilTimeout+0x172>
 8004de2:	68bb      	ldr	r3, [r7, #8]
 8004de4:	2b40      	cmp	r3, #64	@ 0x40
 8004de6:	d051      	beq.n	8004e8c <UART_WaitOnFlagUntilTimeout+0x172>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	69db      	ldr	r3, [r3, #28]
 8004dee:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004df2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004df6:	d149      	bne.n	8004e8c <UART_WaitOnFlagUntilTimeout+0x172>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004e00:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e0a:	e853 3f00 	ldrex	r3, [r3]
 8004e0e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004e10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e12:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8004e16:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	461a      	mov	r2, r3
 8004e1e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004e20:	637b      	str	r3, [r7, #52]	@ 0x34
 8004e22:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e24:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004e26:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004e28:	e841 2300 	strex	r3, r2, [r1]
 8004e2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8004e2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d1e6      	bne.n	8004e02 <UART_WaitOnFlagUntilTimeout+0xe8>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	3308      	adds	r3, #8
 8004e3a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e3c:	697b      	ldr	r3, [r7, #20]
 8004e3e:	e853 3f00 	ldrex	r3, [r3]
 8004e42:	613b      	str	r3, [r7, #16]
   return(result);
 8004e44:	693b      	ldr	r3, [r7, #16]
 8004e46:	f023 0301 	bic.w	r3, r3, #1
 8004e4a:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	3308      	adds	r3, #8
 8004e52:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8004e54:	623a      	str	r2, [r7, #32]
 8004e56:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e58:	69f9      	ldr	r1, [r7, #28]
 8004e5a:	6a3a      	ldr	r2, [r7, #32]
 8004e5c:	e841 2300 	strex	r3, r2, [r1]
 8004e60:	61bb      	str	r3, [r7, #24]
   return(result);
 8004e62:	69bb      	ldr	r3, [r7, #24]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d1e5      	bne.n	8004e34 <UART_WaitOnFlagUntilTimeout+0x11a>

          huart->gState = HAL_UART_STATE_READY;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	2220      	movs	r2, #32
 8004e6c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          huart->RxState = HAL_UART_STATE_READY;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	2220      	movs	r2, #32
 8004e74:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	2220      	movs	r2, #32
 8004e7c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	2200      	movs	r2, #0
 8004e84:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8004e88:	2303      	movs	r3, #3
 8004e8a:	e010      	b.n	8004eae <UART_WaitOnFlagUntilTimeout+0x194>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	69da      	ldr	r2, [r3, #28]
 8004e92:	68bb      	ldr	r3, [r7, #8]
 8004e94:	4013      	ands	r3, r2
 8004e96:	68ba      	ldr	r2, [r7, #8]
 8004e98:	429a      	cmp	r2, r3
 8004e9a:	bf0c      	ite	eq
 8004e9c:	2301      	moveq	r3, #1
 8004e9e:	2300      	movne	r3, #0
 8004ea0:	b2db      	uxtb	r3, r3
 8004ea2:	461a      	mov	r2, r3
 8004ea4:	79fb      	ldrb	r3, [r7, #7]
 8004ea6:	429a      	cmp	r2, r3
 8004ea8:	f43f af40 	beq.w	8004d2c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004eac:	2300      	movs	r3, #0
}
 8004eae:	4618      	mov	r0, r3
 8004eb0:	3770      	adds	r7, #112	@ 0x70
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	bd80      	pop	{r7, pc}

08004eb6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004eb6:	b480      	push	{r7}
 8004eb8:	b095      	sub	sp, #84	@ 0x54
 8004eba:	af00      	add	r7, sp, #0
 8004ebc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ec4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ec6:	e853 3f00 	ldrex	r3, [r3]
 8004eca:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004ecc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ece:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004ed2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	461a      	mov	r2, r3
 8004eda:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004edc:	643b      	str	r3, [r7, #64]	@ 0x40
 8004ede:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ee0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004ee2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004ee4:	e841 2300 	strex	r3, r2, [r1]
 8004ee8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004eea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d1e6      	bne.n	8004ebe <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	3308      	adds	r3, #8
 8004ef6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ef8:	6a3b      	ldr	r3, [r7, #32]
 8004efa:	e853 3f00 	ldrex	r3, [r3]
 8004efe:	61fb      	str	r3, [r7, #28]
   return(result);
 8004f00:	69fb      	ldr	r3, [r7, #28]
 8004f02:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004f06:	f023 0301 	bic.w	r3, r3, #1
 8004f0a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	3308      	adds	r3, #8
 8004f12:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004f14:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004f16:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f18:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004f1a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004f1c:	e841 2300 	strex	r3, r2, [r1]
 8004f20:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004f22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d1e3      	bne.n	8004ef0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004f2c:	2b01      	cmp	r3, #1
 8004f2e:	d118      	bne.n	8004f62 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	e853 3f00 	ldrex	r3, [r3]
 8004f3c:	60bb      	str	r3, [r7, #8]
   return(result);
 8004f3e:	68bb      	ldr	r3, [r7, #8]
 8004f40:	f023 0310 	bic.w	r3, r3, #16
 8004f44:	647b      	str	r3, [r7, #68]	@ 0x44
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	461a      	mov	r2, r3
 8004f4c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004f4e:	61bb      	str	r3, [r7, #24]
 8004f50:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f52:	6979      	ldr	r1, [r7, #20]
 8004f54:	69ba      	ldr	r2, [r7, #24]
 8004f56:	e841 2300 	strex	r3, r2, [r1]
 8004f5a:	613b      	str	r3, [r7, #16]
   return(result);
 8004f5c:	693b      	ldr	r3, [r7, #16]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d1e6      	bne.n	8004f30 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2220      	movs	r2, #32
 8004f66:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2200      	movs	r2, #0
 8004f74:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8004f76:	bf00      	nop
 8004f78:	3754      	adds	r7, #84	@ 0x54
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	bc80      	pop	{r7}
 8004f7e:	4770      	bx	lr

08004f80 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	b084      	sub	sp, #16
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f8c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	2200      	movs	r2, #0
 8004f92:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	2200      	movs	r2, #0
 8004f9a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004f9e:	68f8      	ldr	r0, [r7, #12]
 8004fa0:	f7ff fb43 	bl	800462a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004fa4:	bf00      	nop
 8004fa6:	3710      	adds	r7, #16
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	bd80      	pop	{r7, pc}

08004fac <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b088      	sub	sp, #32
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	e853 3f00 	ldrex	r3, [r3]
 8004fc0:	60bb      	str	r3, [r7, #8]
   return(result);
 8004fc2:	68bb      	ldr	r3, [r7, #8]
 8004fc4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004fc8:	61fb      	str	r3, [r7, #28]
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	461a      	mov	r2, r3
 8004fd0:	69fb      	ldr	r3, [r7, #28]
 8004fd2:	61bb      	str	r3, [r7, #24]
 8004fd4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fd6:	6979      	ldr	r1, [r7, #20]
 8004fd8:	69ba      	ldr	r2, [r7, #24]
 8004fda:	e841 2300 	strex	r3, r2, [r1]
 8004fde:	613b      	str	r3, [r7, #16]
   return(result);
 8004fe0:	693b      	ldr	r3, [r7, #16]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d1e6      	bne.n	8004fb4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	2220      	movs	r2, #32
 8004fea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004ff4:	6878      	ldr	r0, [r7, #4]
 8004ff6:	f7ff fb0f 	bl	8004618 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004ffa:	bf00      	nop
 8004ffc:	3720      	adds	r7, #32
 8004ffe:	46bd      	mov	sp, r7
 8005000:	bd80      	pop	{r7, pc}

08005002 <HAL_RS485Ex_Init>:
  *       oversampling rate).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RS485Ex_Init(UART_HandleTypeDef *huart, uint32_t Polarity, uint32_t AssertionTime,
                                   uint32_t DeassertionTime)
{
 8005002:	b580      	push	{r7, lr}
 8005004:	b086      	sub	sp, #24
 8005006:	af00      	add	r7, sp, #0
 8005008:	60f8      	str	r0, [r7, #12]
 800500a:	60b9      	str	r1, [r7, #8]
 800500c:	607a      	str	r2, [r7, #4]
 800500e:	603b      	str	r3, [r7, #0]
  uint32_t temp;

  /* Check the UART handle allocation */
  if (huart == NULL)
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	2b00      	cmp	r3, #0
 8005014:	d101      	bne.n	800501a <HAL_RS485Ex_Init+0x18>
  {
    return HAL_ERROR;
 8005016:	2301      	movs	r3, #1
 8005018:	e058      	b.n	80050cc <HAL_RS485Ex_Init+0xca>
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));

  /* Check the Driver Enable deassertion time */
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));

  if (huart->gState == HAL_UART_STATE_RESET)
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005020:	2b00      	cmp	r3, #0
 8005022:	d106      	bne.n	8005032 <HAL_RS485Ex_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	2200      	movs	r2, #0
 8005028:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_UART_MspInit(huart);
 800502c:	68f8      	ldr	r0, [r7, #12]
 800502e:	f7fc fdb5 	bl	8001b9c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	2224      	movs	r2, #36	@ 0x24
 8005036:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	681a      	ldr	r2, [r3, #0]
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f022 0201 	bic.w	r2, r2, #1
 8005048:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800504e:	2b00      	cmp	r3, #0
 8005050:	d002      	beq.n	8005058 <HAL_RS485Ex_Init+0x56>
  {
    UART_AdvFeatureConfig(huart);
 8005052:	68f8      	ldr	r0, [r7, #12]
 8005054:	f7ff fd72 	bl	8004b3c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005058:	68f8      	ldr	r0, [r7, #12]
 800505a:	f7ff fafb 	bl	8004654 <UART_SetConfig>
 800505e:	4603      	mov	r3, r0
 8005060:	2b01      	cmp	r3, #1
 8005062:	d101      	bne.n	8005068 <HAL_RS485Ex_Init+0x66>
  {
    return HAL_ERROR;
 8005064:	2301      	movs	r3, #1
 8005066:	e031      	b.n	80050cc <HAL_RS485Ex_Init+0xca>
  }

  /* Enable the Driver Enable mode by setting the DEM bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	689a      	ldr	r2, [r3, #8]
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005076:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable polarity */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	689b      	ldr	r3, [r3, #8]
 800507e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	68ba      	ldr	r2, [r7, #8]
 8005088:	430a      	orrs	r2, r1
 800508a:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable assertion and deassertion times */
  temp = (AssertionTime << UART_CR1_DEAT_ADDRESS_LSB_POS);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	055b      	lsls	r3, r3, #21
 8005090:	617b      	str	r3, [r7, #20]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	041b      	lsls	r3, r3, #16
 8005096:	697a      	ldr	r2, [r7, #20]
 8005098:	4313      	orrs	r3, r2
 800509a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f023 737f 	bic.w	r3, r3, #66846720	@ 0x3fc0000
 80050a6:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 80050aa:	68fa      	ldr	r2, [r7, #12]
 80050ac:	6812      	ldr	r2, [r2, #0]
 80050ae:	6979      	ldr	r1, [r7, #20]
 80050b0:	430b      	orrs	r3, r1
 80050b2:	6013      	str	r3, [r2, #0]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	681a      	ldr	r2, [r3, #0]
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f042 0201 	orr.w	r2, r2, #1
 80050c2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80050c4:	68f8      	ldr	r0, [r7, #12]
 80050c6:	f7ff fdda 	bl	8004c7e <UART_CheckIdleState>
 80050ca:	4603      	mov	r3, r0
}
 80050cc:	4618      	mov	r0, r3
 80050ce:	3718      	adds	r7, #24
 80050d0:	46bd      	mov	sp, r7
 80050d2:	bd80      	pop	{r7, pc}

080050d4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80050d4:	b480      	push	{r7}
 80050d6:	b083      	sub	sp, #12
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80050dc:	bf00      	nop
 80050de:	370c      	adds	r7, #12
 80050e0:	46bd      	mov	sp, r7
 80050e2:	bc80      	pop	{r7}
 80050e4:	4770      	bx	lr

080050e6 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80050e6:	b480      	push	{r7}
 80050e8:	b083      	sub	sp, #12
 80050ea:	af00      	add	r7, sp, #0
 80050ec:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80050ee:	bf00      	nop
 80050f0:	370c      	adds	r7, #12
 80050f2:	46bd      	mov	sp, r7
 80050f4:	bc80      	pop	{r7}
 80050f6:	4770      	bx	lr

080050f8 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80050f8:	b480      	push	{r7}
 80050fa:	b083      	sub	sp, #12
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8005100:	bf00      	nop
 8005102:	370c      	adds	r7, #12
 8005104:	46bd      	mov	sp, r7
 8005106:	bc80      	pop	{r7}
 8005108:	4770      	bx	lr

0800510a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800510a:	b480      	push	{r7}
 800510c:	b085      	sub	sp, #20
 800510e:	af00      	add	r7, sp, #0
 8005110:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005118:	2b01      	cmp	r3, #1
 800511a:	d101      	bne.n	8005120 <HAL_UARTEx_DisableFifoMode+0x16>
 800511c:	2302      	movs	r3, #2
 800511e:	e027      	b.n	8005170 <HAL_UARTEx_DisableFifoMode+0x66>
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2201      	movs	r2, #1
 8005124:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2224      	movs	r2, #36	@ 0x24
 800512c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	681a      	ldr	r2, [r3, #0]
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f022 0201 	bic.w	r2, r2, #1
 8005146:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800514e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2200      	movs	r2, #0
 8005154:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	68fa      	ldr	r2, [r7, #12]
 800515c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	2220      	movs	r2, #32
 8005162:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2200      	movs	r2, #0
 800516a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800516e:	2300      	movs	r3, #0
}
 8005170:	4618      	mov	r0, r3
 8005172:	3714      	adds	r7, #20
 8005174:	46bd      	mov	sp, r7
 8005176:	bc80      	pop	{r7}
 8005178:	4770      	bx	lr

0800517a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800517a:	b580      	push	{r7, lr}
 800517c:	b084      	sub	sp, #16
 800517e:	af00      	add	r7, sp, #0
 8005180:	6078      	str	r0, [r7, #4]
 8005182:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800518a:	2b01      	cmp	r3, #1
 800518c:	d101      	bne.n	8005192 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800518e:	2302      	movs	r3, #2
 8005190:	e02d      	b.n	80051ee <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2201      	movs	r2, #1
 8005196:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	2224      	movs	r2, #36	@ 0x24
 800519e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	681a      	ldr	r2, [r3, #0]
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f022 0201 	bic.w	r2, r2, #1
 80051b8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	689b      	ldr	r3, [r3, #8]
 80051c0:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	683a      	ldr	r2, [r7, #0]
 80051ca:	430a      	orrs	r2, r1
 80051cc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80051ce:	6878      	ldr	r0, [r7, #4]
 80051d0:	f000 f850 	bl	8005274 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	68fa      	ldr	r2, [r7, #12]
 80051da:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2220      	movs	r2, #32
 80051e0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2200      	movs	r2, #0
 80051e8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80051ec:	2300      	movs	r3, #0
}
 80051ee:	4618      	mov	r0, r3
 80051f0:	3710      	adds	r7, #16
 80051f2:	46bd      	mov	sp, r7
 80051f4:	bd80      	pop	{r7, pc}

080051f6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80051f6:	b580      	push	{r7, lr}
 80051f8:	b084      	sub	sp, #16
 80051fa:	af00      	add	r7, sp, #0
 80051fc:	6078      	str	r0, [r7, #4]
 80051fe:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005206:	2b01      	cmp	r3, #1
 8005208:	d101      	bne.n	800520e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800520a:	2302      	movs	r3, #2
 800520c:	e02d      	b.n	800526a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2201      	movs	r2, #1
 8005212:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	2224      	movs	r2, #36	@ 0x24
 800521a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	681a      	ldr	r2, [r3, #0]
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f022 0201 	bic.w	r2, r2, #1
 8005234:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	689b      	ldr	r3, [r3, #8]
 800523c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	683a      	ldr	r2, [r7, #0]
 8005246:	430a      	orrs	r2, r1
 8005248:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800524a:	6878      	ldr	r0, [r7, #4]
 800524c:	f000 f812 	bl	8005274 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	68fa      	ldr	r2, [r7, #12]
 8005256:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2220      	movs	r2, #32
 800525c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2200      	movs	r2, #0
 8005264:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005268:	2300      	movs	r3, #0
}
 800526a:	4618      	mov	r0, r3
 800526c:	3710      	adds	r7, #16
 800526e:	46bd      	mov	sp, r7
 8005270:	bd80      	pop	{r7, pc}
	...

08005274 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005274:	b480      	push	{r7}
 8005276:	b085      	sub	sp, #20
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005280:	2b00      	cmp	r3, #0
 8005282:	d108      	bne.n	8005296 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2201      	movs	r2, #1
 8005288:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2201      	movs	r2, #1
 8005290:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005294:	e031      	b.n	80052fa <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005296:	2308      	movs	r3, #8
 8005298:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800529a:	2308      	movs	r3, #8
 800529c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	689b      	ldr	r3, [r3, #8]
 80052a4:	0e5b      	lsrs	r3, r3, #25
 80052a6:	b2db      	uxtb	r3, r3
 80052a8:	f003 0307 	and.w	r3, r3, #7
 80052ac:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	689b      	ldr	r3, [r3, #8]
 80052b4:	0f5b      	lsrs	r3, r3, #29
 80052b6:	b2db      	uxtb	r3, r3
 80052b8:	f003 0307 	and.w	r3, r3, #7
 80052bc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80052be:	7bbb      	ldrb	r3, [r7, #14]
 80052c0:	7b3a      	ldrb	r2, [r7, #12]
 80052c2:	4910      	ldr	r1, [pc, #64]	@ (8005304 <UARTEx_SetNbDataToProcess+0x90>)
 80052c4:	5c8a      	ldrb	r2, [r1, r2]
 80052c6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80052ca:	7b3a      	ldrb	r2, [r7, #12]
 80052cc:	490e      	ldr	r1, [pc, #56]	@ (8005308 <UARTEx_SetNbDataToProcess+0x94>)
 80052ce:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80052d0:	fb93 f3f2 	sdiv	r3, r3, r2
 80052d4:	b29a      	uxth	r2, r3
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80052dc:	7bfb      	ldrb	r3, [r7, #15]
 80052de:	7b7a      	ldrb	r2, [r7, #13]
 80052e0:	4908      	ldr	r1, [pc, #32]	@ (8005304 <UARTEx_SetNbDataToProcess+0x90>)
 80052e2:	5c8a      	ldrb	r2, [r1, r2]
 80052e4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80052e8:	7b7a      	ldrb	r2, [r7, #13]
 80052ea:	4907      	ldr	r1, [pc, #28]	@ (8005308 <UARTEx_SetNbDataToProcess+0x94>)
 80052ec:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80052ee:	fb93 f3f2 	sdiv	r3, r3, r2
 80052f2:	b29a      	uxth	r2, r3
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80052fa:	bf00      	nop
 80052fc:	3714      	adds	r7, #20
 80052fe:	46bd      	mov	sp, r7
 8005300:	bc80      	pop	{r7}
 8005302:	4770      	bx	lr
 8005304:	08007e98 	.word	0x08007e98
 8005308:	08007ea0 	.word	0x08007ea0

0800530c <__cvt>:
 800530c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005310:	b088      	sub	sp, #32
 8005312:	2b00      	cmp	r3, #0
 8005314:	461d      	mov	r5, r3
 8005316:	4614      	mov	r4, r2
 8005318:	bfbc      	itt	lt
 800531a:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 800531e:	4614      	movlt	r4, r2
 8005320:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8005322:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8005324:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8005328:	bfb6      	itet	lt
 800532a:	461d      	movlt	r5, r3
 800532c:	2300      	movge	r3, #0
 800532e:	232d      	movlt	r3, #45	@ 0x2d
 8005330:	7013      	strb	r3, [r2, #0]
 8005332:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005334:	f023 0820 	bic.w	r8, r3, #32
 8005338:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800533c:	d005      	beq.n	800534a <__cvt+0x3e>
 800533e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8005342:	d100      	bne.n	8005346 <__cvt+0x3a>
 8005344:	3601      	adds	r6, #1
 8005346:	2302      	movs	r3, #2
 8005348:	e000      	b.n	800534c <__cvt+0x40>
 800534a:	2303      	movs	r3, #3
 800534c:	aa07      	add	r2, sp, #28
 800534e:	9204      	str	r2, [sp, #16]
 8005350:	aa06      	add	r2, sp, #24
 8005352:	e9cd a202 	strd	sl, r2, [sp, #8]
 8005356:	e9cd 3600 	strd	r3, r6, [sp]
 800535a:	4622      	mov	r2, r4
 800535c:	462b      	mov	r3, r5
 800535e:	f000 ff3f 	bl	80061e0 <_dtoa_r>
 8005362:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8005366:	4607      	mov	r7, r0
 8005368:	d119      	bne.n	800539e <__cvt+0x92>
 800536a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800536c:	07db      	lsls	r3, r3, #31
 800536e:	d50e      	bpl.n	800538e <__cvt+0x82>
 8005370:	eb00 0906 	add.w	r9, r0, r6
 8005374:	2200      	movs	r2, #0
 8005376:	2300      	movs	r3, #0
 8005378:	4620      	mov	r0, r4
 800537a:	4629      	mov	r1, r5
 800537c:	f7fb fb7c 	bl	8000a78 <__aeabi_dcmpeq>
 8005380:	b108      	cbz	r0, 8005386 <__cvt+0x7a>
 8005382:	f8cd 901c 	str.w	r9, [sp, #28]
 8005386:	2230      	movs	r2, #48	@ 0x30
 8005388:	9b07      	ldr	r3, [sp, #28]
 800538a:	454b      	cmp	r3, r9
 800538c:	d31e      	bcc.n	80053cc <__cvt+0xc0>
 800538e:	9b07      	ldr	r3, [sp, #28]
 8005390:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8005392:	1bdb      	subs	r3, r3, r7
 8005394:	4638      	mov	r0, r7
 8005396:	6013      	str	r3, [r2, #0]
 8005398:	b008      	add	sp, #32
 800539a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800539e:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80053a2:	eb00 0906 	add.w	r9, r0, r6
 80053a6:	d1e5      	bne.n	8005374 <__cvt+0x68>
 80053a8:	7803      	ldrb	r3, [r0, #0]
 80053aa:	2b30      	cmp	r3, #48	@ 0x30
 80053ac:	d10a      	bne.n	80053c4 <__cvt+0xb8>
 80053ae:	2200      	movs	r2, #0
 80053b0:	2300      	movs	r3, #0
 80053b2:	4620      	mov	r0, r4
 80053b4:	4629      	mov	r1, r5
 80053b6:	f7fb fb5f 	bl	8000a78 <__aeabi_dcmpeq>
 80053ba:	b918      	cbnz	r0, 80053c4 <__cvt+0xb8>
 80053bc:	f1c6 0601 	rsb	r6, r6, #1
 80053c0:	f8ca 6000 	str.w	r6, [sl]
 80053c4:	f8da 3000 	ldr.w	r3, [sl]
 80053c8:	4499      	add	r9, r3
 80053ca:	e7d3      	b.n	8005374 <__cvt+0x68>
 80053cc:	1c59      	adds	r1, r3, #1
 80053ce:	9107      	str	r1, [sp, #28]
 80053d0:	701a      	strb	r2, [r3, #0]
 80053d2:	e7d9      	b.n	8005388 <__cvt+0x7c>

080053d4 <__exponent>:
 80053d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80053d6:	2900      	cmp	r1, #0
 80053d8:	bfba      	itte	lt
 80053da:	4249      	neglt	r1, r1
 80053dc:	232d      	movlt	r3, #45	@ 0x2d
 80053de:	232b      	movge	r3, #43	@ 0x2b
 80053e0:	2909      	cmp	r1, #9
 80053e2:	7002      	strb	r2, [r0, #0]
 80053e4:	7043      	strb	r3, [r0, #1]
 80053e6:	dd29      	ble.n	800543c <__exponent+0x68>
 80053e8:	f10d 0307 	add.w	r3, sp, #7
 80053ec:	461d      	mov	r5, r3
 80053ee:	270a      	movs	r7, #10
 80053f0:	461a      	mov	r2, r3
 80053f2:	fbb1 f6f7 	udiv	r6, r1, r7
 80053f6:	fb07 1416 	mls	r4, r7, r6, r1
 80053fa:	3430      	adds	r4, #48	@ 0x30
 80053fc:	f802 4c01 	strb.w	r4, [r2, #-1]
 8005400:	460c      	mov	r4, r1
 8005402:	2c63      	cmp	r4, #99	@ 0x63
 8005404:	f103 33ff 	add.w	r3, r3, #4294967295
 8005408:	4631      	mov	r1, r6
 800540a:	dcf1      	bgt.n	80053f0 <__exponent+0x1c>
 800540c:	3130      	adds	r1, #48	@ 0x30
 800540e:	1e94      	subs	r4, r2, #2
 8005410:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005414:	1c41      	adds	r1, r0, #1
 8005416:	4623      	mov	r3, r4
 8005418:	42ab      	cmp	r3, r5
 800541a:	d30a      	bcc.n	8005432 <__exponent+0x5e>
 800541c:	f10d 0309 	add.w	r3, sp, #9
 8005420:	1a9b      	subs	r3, r3, r2
 8005422:	42ac      	cmp	r4, r5
 8005424:	bf88      	it	hi
 8005426:	2300      	movhi	r3, #0
 8005428:	3302      	adds	r3, #2
 800542a:	4403      	add	r3, r0
 800542c:	1a18      	subs	r0, r3, r0
 800542e:	b003      	add	sp, #12
 8005430:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005432:	f813 6b01 	ldrb.w	r6, [r3], #1
 8005436:	f801 6f01 	strb.w	r6, [r1, #1]!
 800543a:	e7ed      	b.n	8005418 <__exponent+0x44>
 800543c:	2330      	movs	r3, #48	@ 0x30
 800543e:	3130      	adds	r1, #48	@ 0x30
 8005440:	7083      	strb	r3, [r0, #2]
 8005442:	70c1      	strb	r1, [r0, #3]
 8005444:	1d03      	adds	r3, r0, #4
 8005446:	e7f1      	b.n	800542c <__exponent+0x58>

08005448 <_printf_float>:
 8005448:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800544c:	b091      	sub	sp, #68	@ 0x44
 800544e:	460c      	mov	r4, r1
 8005450:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8005454:	4616      	mov	r6, r2
 8005456:	461f      	mov	r7, r3
 8005458:	4605      	mov	r5, r0
 800545a:	f000 fdc1 	bl	8005fe0 <_localeconv_r>
 800545e:	6803      	ldr	r3, [r0, #0]
 8005460:	9308      	str	r3, [sp, #32]
 8005462:	4618      	mov	r0, r3
 8005464:	f7fa fedc 	bl	8000220 <strlen>
 8005468:	2300      	movs	r3, #0
 800546a:	930e      	str	r3, [sp, #56]	@ 0x38
 800546c:	f8d8 3000 	ldr.w	r3, [r8]
 8005470:	9009      	str	r0, [sp, #36]	@ 0x24
 8005472:	3307      	adds	r3, #7
 8005474:	f023 0307 	bic.w	r3, r3, #7
 8005478:	f103 0208 	add.w	r2, r3, #8
 800547c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005480:	f8d4 b000 	ldr.w	fp, [r4]
 8005484:	f8c8 2000 	str.w	r2, [r8]
 8005488:	e9d3 8900 	ldrd	r8, r9, [r3]
 800548c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8005490:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005492:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8005496:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800549a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800549e:	4b9d      	ldr	r3, [pc, #628]	@ (8005714 <_printf_float+0x2cc>)
 80054a0:	f04f 32ff 	mov.w	r2, #4294967295
 80054a4:	f7fb fb1a 	bl	8000adc <__aeabi_dcmpun>
 80054a8:	bb70      	cbnz	r0, 8005508 <_printf_float+0xc0>
 80054aa:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80054ae:	4b99      	ldr	r3, [pc, #612]	@ (8005714 <_printf_float+0x2cc>)
 80054b0:	f04f 32ff 	mov.w	r2, #4294967295
 80054b4:	f7fb faf4 	bl	8000aa0 <__aeabi_dcmple>
 80054b8:	bb30      	cbnz	r0, 8005508 <_printf_float+0xc0>
 80054ba:	2200      	movs	r2, #0
 80054bc:	2300      	movs	r3, #0
 80054be:	4640      	mov	r0, r8
 80054c0:	4649      	mov	r1, r9
 80054c2:	f7fb fae3 	bl	8000a8c <__aeabi_dcmplt>
 80054c6:	b110      	cbz	r0, 80054ce <_printf_float+0x86>
 80054c8:	232d      	movs	r3, #45	@ 0x2d
 80054ca:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80054ce:	4a92      	ldr	r2, [pc, #584]	@ (8005718 <_printf_float+0x2d0>)
 80054d0:	4b92      	ldr	r3, [pc, #584]	@ (800571c <_printf_float+0x2d4>)
 80054d2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80054d6:	bf94      	ite	ls
 80054d8:	4690      	movls	r8, r2
 80054da:	4698      	movhi	r8, r3
 80054dc:	2303      	movs	r3, #3
 80054de:	6123      	str	r3, [r4, #16]
 80054e0:	f02b 0304 	bic.w	r3, fp, #4
 80054e4:	6023      	str	r3, [r4, #0]
 80054e6:	f04f 0900 	mov.w	r9, #0
 80054ea:	9700      	str	r7, [sp, #0]
 80054ec:	4633      	mov	r3, r6
 80054ee:	aa0f      	add	r2, sp, #60	@ 0x3c
 80054f0:	4621      	mov	r1, r4
 80054f2:	4628      	mov	r0, r5
 80054f4:	f000 f9d4 	bl	80058a0 <_printf_common>
 80054f8:	3001      	adds	r0, #1
 80054fa:	f040 808f 	bne.w	800561c <_printf_float+0x1d4>
 80054fe:	f04f 30ff 	mov.w	r0, #4294967295
 8005502:	b011      	add	sp, #68	@ 0x44
 8005504:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005508:	4642      	mov	r2, r8
 800550a:	464b      	mov	r3, r9
 800550c:	4640      	mov	r0, r8
 800550e:	4649      	mov	r1, r9
 8005510:	f7fb fae4 	bl	8000adc <__aeabi_dcmpun>
 8005514:	b140      	cbz	r0, 8005528 <_printf_float+0xe0>
 8005516:	464b      	mov	r3, r9
 8005518:	2b00      	cmp	r3, #0
 800551a:	bfbc      	itt	lt
 800551c:	232d      	movlt	r3, #45	@ 0x2d
 800551e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8005522:	4a7f      	ldr	r2, [pc, #508]	@ (8005720 <_printf_float+0x2d8>)
 8005524:	4b7f      	ldr	r3, [pc, #508]	@ (8005724 <_printf_float+0x2dc>)
 8005526:	e7d4      	b.n	80054d2 <_printf_float+0x8a>
 8005528:	6863      	ldr	r3, [r4, #4]
 800552a:	1c5a      	adds	r2, r3, #1
 800552c:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8005530:	d13f      	bne.n	80055b2 <_printf_float+0x16a>
 8005532:	2306      	movs	r3, #6
 8005534:	6063      	str	r3, [r4, #4]
 8005536:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 800553a:	2200      	movs	r2, #0
 800553c:	6023      	str	r3, [r4, #0]
 800553e:	9206      	str	r2, [sp, #24]
 8005540:	aa0e      	add	r2, sp, #56	@ 0x38
 8005542:	e9cd a204 	strd	sl, r2, [sp, #16]
 8005546:	aa0d      	add	r2, sp, #52	@ 0x34
 8005548:	9203      	str	r2, [sp, #12]
 800554a:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 800554e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8005552:	6863      	ldr	r3, [r4, #4]
 8005554:	9300      	str	r3, [sp, #0]
 8005556:	4642      	mov	r2, r8
 8005558:	464b      	mov	r3, r9
 800555a:	4628      	mov	r0, r5
 800555c:	910a      	str	r1, [sp, #40]	@ 0x28
 800555e:	f7ff fed5 	bl	800530c <__cvt>
 8005562:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005564:	2947      	cmp	r1, #71	@ 0x47
 8005566:	4680      	mov	r8, r0
 8005568:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800556a:	d128      	bne.n	80055be <_printf_float+0x176>
 800556c:	1cc8      	adds	r0, r1, #3
 800556e:	db02      	blt.n	8005576 <_printf_float+0x12e>
 8005570:	6863      	ldr	r3, [r4, #4]
 8005572:	4299      	cmp	r1, r3
 8005574:	dd40      	ble.n	80055f8 <_printf_float+0x1b0>
 8005576:	f1aa 0a02 	sub.w	sl, sl, #2
 800557a:	fa5f fa8a 	uxtb.w	sl, sl
 800557e:	3901      	subs	r1, #1
 8005580:	4652      	mov	r2, sl
 8005582:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8005586:	910d      	str	r1, [sp, #52]	@ 0x34
 8005588:	f7ff ff24 	bl	80053d4 <__exponent>
 800558c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800558e:	1813      	adds	r3, r2, r0
 8005590:	2a01      	cmp	r2, #1
 8005592:	4681      	mov	r9, r0
 8005594:	6123      	str	r3, [r4, #16]
 8005596:	dc02      	bgt.n	800559e <_printf_float+0x156>
 8005598:	6822      	ldr	r2, [r4, #0]
 800559a:	07d2      	lsls	r2, r2, #31
 800559c:	d501      	bpl.n	80055a2 <_printf_float+0x15a>
 800559e:	3301      	adds	r3, #1
 80055a0:	6123      	str	r3, [r4, #16]
 80055a2:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d09f      	beq.n	80054ea <_printf_float+0xa2>
 80055aa:	232d      	movs	r3, #45	@ 0x2d
 80055ac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80055b0:	e79b      	b.n	80054ea <_printf_float+0xa2>
 80055b2:	2947      	cmp	r1, #71	@ 0x47
 80055b4:	d1bf      	bne.n	8005536 <_printf_float+0xee>
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d1bd      	bne.n	8005536 <_printf_float+0xee>
 80055ba:	2301      	movs	r3, #1
 80055bc:	e7ba      	b.n	8005534 <_printf_float+0xec>
 80055be:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80055c2:	d9dc      	bls.n	800557e <_printf_float+0x136>
 80055c4:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80055c8:	d118      	bne.n	80055fc <_printf_float+0x1b4>
 80055ca:	2900      	cmp	r1, #0
 80055cc:	6863      	ldr	r3, [r4, #4]
 80055ce:	dd0b      	ble.n	80055e8 <_printf_float+0x1a0>
 80055d0:	6121      	str	r1, [r4, #16]
 80055d2:	b913      	cbnz	r3, 80055da <_printf_float+0x192>
 80055d4:	6822      	ldr	r2, [r4, #0]
 80055d6:	07d0      	lsls	r0, r2, #31
 80055d8:	d502      	bpl.n	80055e0 <_printf_float+0x198>
 80055da:	3301      	adds	r3, #1
 80055dc:	440b      	add	r3, r1
 80055de:	6123      	str	r3, [r4, #16]
 80055e0:	65a1      	str	r1, [r4, #88]	@ 0x58
 80055e2:	f04f 0900 	mov.w	r9, #0
 80055e6:	e7dc      	b.n	80055a2 <_printf_float+0x15a>
 80055e8:	b913      	cbnz	r3, 80055f0 <_printf_float+0x1a8>
 80055ea:	6822      	ldr	r2, [r4, #0]
 80055ec:	07d2      	lsls	r2, r2, #31
 80055ee:	d501      	bpl.n	80055f4 <_printf_float+0x1ac>
 80055f0:	3302      	adds	r3, #2
 80055f2:	e7f4      	b.n	80055de <_printf_float+0x196>
 80055f4:	2301      	movs	r3, #1
 80055f6:	e7f2      	b.n	80055de <_printf_float+0x196>
 80055f8:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80055fc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80055fe:	4299      	cmp	r1, r3
 8005600:	db05      	blt.n	800560e <_printf_float+0x1c6>
 8005602:	6823      	ldr	r3, [r4, #0]
 8005604:	6121      	str	r1, [r4, #16]
 8005606:	07d8      	lsls	r0, r3, #31
 8005608:	d5ea      	bpl.n	80055e0 <_printf_float+0x198>
 800560a:	1c4b      	adds	r3, r1, #1
 800560c:	e7e7      	b.n	80055de <_printf_float+0x196>
 800560e:	2900      	cmp	r1, #0
 8005610:	bfd4      	ite	le
 8005612:	f1c1 0202 	rsble	r2, r1, #2
 8005616:	2201      	movgt	r2, #1
 8005618:	4413      	add	r3, r2
 800561a:	e7e0      	b.n	80055de <_printf_float+0x196>
 800561c:	6823      	ldr	r3, [r4, #0]
 800561e:	055a      	lsls	r2, r3, #21
 8005620:	d407      	bmi.n	8005632 <_printf_float+0x1ea>
 8005622:	6923      	ldr	r3, [r4, #16]
 8005624:	4642      	mov	r2, r8
 8005626:	4631      	mov	r1, r6
 8005628:	4628      	mov	r0, r5
 800562a:	47b8      	blx	r7
 800562c:	3001      	adds	r0, #1
 800562e:	d12b      	bne.n	8005688 <_printf_float+0x240>
 8005630:	e765      	b.n	80054fe <_printf_float+0xb6>
 8005632:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005636:	f240 80dd 	bls.w	80057f4 <_printf_float+0x3ac>
 800563a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800563e:	2200      	movs	r2, #0
 8005640:	2300      	movs	r3, #0
 8005642:	f7fb fa19 	bl	8000a78 <__aeabi_dcmpeq>
 8005646:	2800      	cmp	r0, #0
 8005648:	d033      	beq.n	80056b2 <_printf_float+0x26a>
 800564a:	4a37      	ldr	r2, [pc, #220]	@ (8005728 <_printf_float+0x2e0>)
 800564c:	2301      	movs	r3, #1
 800564e:	4631      	mov	r1, r6
 8005650:	4628      	mov	r0, r5
 8005652:	47b8      	blx	r7
 8005654:	3001      	adds	r0, #1
 8005656:	f43f af52 	beq.w	80054fe <_printf_float+0xb6>
 800565a:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 800565e:	4543      	cmp	r3, r8
 8005660:	db02      	blt.n	8005668 <_printf_float+0x220>
 8005662:	6823      	ldr	r3, [r4, #0]
 8005664:	07d8      	lsls	r0, r3, #31
 8005666:	d50f      	bpl.n	8005688 <_printf_float+0x240>
 8005668:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800566c:	4631      	mov	r1, r6
 800566e:	4628      	mov	r0, r5
 8005670:	47b8      	blx	r7
 8005672:	3001      	adds	r0, #1
 8005674:	f43f af43 	beq.w	80054fe <_printf_float+0xb6>
 8005678:	f04f 0900 	mov.w	r9, #0
 800567c:	f108 38ff 	add.w	r8, r8, #4294967295
 8005680:	f104 0a1a 	add.w	sl, r4, #26
 8005684:	45c8      	cmp	r8, r9
 8005686:	dc09      	bgt.n	800569c <_printf_float+0x254>
 8005688:	6823      	ldr	r3, [r4, #0]
 800568a:	079b      	lsls	r3, r3, #30
 800568c:	f100 8103 	bmi.w	8005896 <_printf_float+0x44e>
 8005690:	68e0      	ldr	r0, [r4, #12]
 8005692:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005694:	4298      	cmp	r0, r3
 8005696:	bfb8      	it	lt
 8005698:	4618      	movlt	r0, r3
 800569a:	e732      	b.n	8005502 <_printf_float+0xba>
 800569c:	2301      	movs	r3, #1
 800569e:	4652      	mov	r2, sl
 80056a0:	4631      	mov	r1, r6
 80056a2:	4628      	mov	r0, r5
 80056a4:	47b8      	blx	r7
 80056a6:	3001      	adds	r0, #1
 80056a8:	f43f af29 	beq.w	80054fe <_printf_float+0xb6>
 80056ac:	f109 0901 	add.w	r9, r9, #1
 80056b0:	e7e8      	b.n	8005684 <_printf_float+0x23c>
 80056b2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	dc39      	bgt.n	800572c <_printf_float+0x2e4>
 80056b8:	4a1b      	ldr	r2, [pc, #108]	@ (8005728 <_printf_float+0x2e0>)
 80056ba:	2301      	movs	r3, #1
 80056bc:	4631      	mov	r1, r6
 80056be:	4628      	mov	r0, r5
 80056c0:	47b8      	blx	r7
 80056c2:	3001      	adds	r0, #1
 80056c4:	f43f af1b 	beq.w	80054fe <_printf_float+0xb6>
 80056c8:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 80056cc:	ea59 0303 	orrs.w	r3, r9, r3
 80056d0:	d102      	bne.n	80056d8 <_printf_float+0x290>
 80056d2:	6823      	ldr	r3, [r4, #0]
 80056d4:	07d9      	lsls	r1, r3, #31
 80056d6:	d5d7      	bpl.n	8005688 <_printf_float+0x240>
 80056d8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80056dc:	4631      	mov	r1, r6
 80056de:	4628      	mov	r0, r5
 80056e0:	47b8      	blx	r7
 80056e2:	3001      	adds	r0, #1
 80056e4:	f43f af0b 	beq.w	80054fe <_printf_float+0xb6>
 80056e8:	f04f 0a00 	mov.w	sl, #0
 80056ec:	f104 0b1a 	add.w	fp, r4, #26
 80056f0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80056f2:	425b      	negs	r3, r3
 80056f4:	4553      	cmp	r3, sl
 80056f6:	dc01      	bgt.n	80056fc <_printf_float+0x2b4>
 80056f8:	464b      	mov	r3, r9
 80056fa:	e793      	b.n	8005624 <_printf_float+0x1dc>
 80056fc:	2301      	movs	r3, #1
 80056fe:	465a      	mov	r2, fp
 8005700:	4631      	mov	r1, r6
 8005702:	4628      	mov	r0, r5
 8005704:	47b8      	blx	r7
 8005706:	3001      	adds	r0, #1
 8005708:	f43f aef9 	beq.w	80054fe <_printf_float+0xb6>
 800570c:	f10a 0a01 	add.w	sl, sl, #1
 8005710:	e7ee      	b.n	80056f0 <_printf_float+0x2a8>
 8005712:	bf00      	nop
 8005714:	7fefffff 	.word	0x7fefffff
 8005718:	08007ea8 	.word	0x08007ea8
 800571c:	08007eac 	.word	0x08007eac
 8005720:	08007eb0 	.word	0x08007eb0
 8005724:	08007eb4 	.word	0x08007eb4
 8005728:	08007eb8 	.word	0x08007eb8
 800572c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800572e:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8005732:	4553      	cmp	r3, sl
 8005734:	bfa8      	it	ge
 8005736:	4653      	movge	r3, sl
 8005738:	2b00      	cmp	r3, #0
 800573a:	4699      	mov	r9, r3
 800573c:	dc36      	bgt.n	80057ac <_printf_float+0x364>
 800573e:	f04f 0b00 	mov.w	fp, #0
 8005742:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005746:	f104 021a 	add.w	r2, r4, #26
 800574a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800574c:	930a      	str	r3, [sp, #40]	@ 0x28
 800574e:	eba3 0309 	sub.w	r3, r3, r9
 8005752:	455b      	cmp	r3, fp
 8005754:	dc31      	bgt.n	80057ba <_printf_float+0x372>
 8005756:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005758:	459a      	cmp	sl, r3
 800575a:	dc3a      	bgt.n	80057d2 <_printf_float+0x38a>
 800575c:	6823      	ldr	r3, [r4, #0]
 800575e:	07da      	lsls	r2, r3, #31
 8005760:	d437      	bmi.n	80057d2 <_printf_float+0x38a>
 8005762:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005764:	ebaa 0903 	sub.w	r9, sl, r3
 8005768:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800576a:	ebaa 0303 	sub.w	r3, sl, r3
 800576e:	4599      	cmp	r9, r3
 8005770:	bfa8      	it	ge
 8005772:	4699      	movge	r9, r3
 8005774:	f1b9 0f00 	cmp.w	r9, #0
 8005778:	dc33      	bgt.n	80057e2 <_printf_float+0x39a>
 800577a:	f04f 0800 	mov.w	r8, #0
 800577e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005782:	f104 0b1a 	add.w	fp, r4, #26
 8005786:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005788:	ebaa 0303 	sub.w	r3, sl, r3
 800578c:	eba3 0309 	sub.w	r3, r3, r9
 8005790:	4543      	cmp	r3, r8
 8005792:	f77f af79 	ble.w	8005688 <_printf_float+0x240>
 8005796:	2301      	movs	r3, #1
 8005798:	465a      	mov	r2, fp
 800579a:	4631      	mov	r1, r6
 800579c:	4628      	mov	r0, r5
 800579e:	47b8      	blx	r7
 80057a0:	3001      	adds	r0, #1
 80057a2:	f43f aeac 	beq.w	80054fe <_printf_float+0xb6>
 80057a6:	f108 0801 	add.w	r8, r8, #1
 80057aa:	e7ec      	b.n	8005786 <_printf_float+0x33e>
 80057ac:	4642      	mov	r2, r8
 80057ae:	4631      	mov	r1, r6
 80057b0:	4628      	mov	r0, r5
 80057b2:	47b8      	blx	r7
 80057b4:	3001      	adds	r0, #1
 80057b6:	d1c2      	bne.n	800573e <_printf_float+0x2f6>
 80057b8:	e6a1      	b.n	80054fe <_printf_float+0xb6>
 80057ba:	2301      	movs	r3, #1
 80057bc:	4631      	mov	r1, r6
 80057be:	4628      	mov	r0, r5
 80057c0:	920a      	str	r2, [sp, #40]	@ 0x28
 80057c2:	47b8      	blx	r7
 80057c4:	3001      	adds	r0, #1
 80057c6:	f43f ae9a 	beq.w	80054fe <_printf_float+0xb6>
 80057ca:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80057cc:	f10b 0b01 	add.w	fp, fp, #1
 80057d0:	e7bb      	b.n	800574a <_printf_float+0x302>
 80057d2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80057d6:	4631      	mov	r1, r6
 80057d8:	4628      	mov	r0, r5
 80057da:	47b8      	blx	r7
 80057dc:	3001      	adds	r0, #1
 80057de:	d1c0      	bne.n	8005762 <_printf_float+0x31a>
 80057e0:	e68d      	b.n	80054fe <_printf_float+0xb6>
 80057e2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80057e4:	464b      	mov	r3, r9
 80057e6:	4442      	add	r2, r8
 80057e8:	4631      	mov	r1, r6
 80057ea:	4628      	mov	r0, r5
 80057ec:	47b8      	blx	r7
 80057ee:	3001      	adds	r0, #1
 80057f0:	d1c3      	bne.n	800577a <_printf_float+0x332>
 80057f2:	e684      	b.n	80054fe <_printf_float+0xb6>
 80057f4:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80057f8:	f1ba 0f01 	cmp.w	sl, #1
 80057fc:	dc01      	bgt.n	8005802 <_printf_float+0x3ba>
 80057fe:	07db      	lsls	r3, r3, #31
 8005800:	d536      	bpl.n	8005870 <_printf_float+0x428>
 8005802:	2301      	movs	r3, #1
 8005804:	4642      	mov	r2, r8
 8005806:	4631      	mov	r1, r6
 8005808:	4628      	mov	r0, r5
 800580a:	47b8      	blx	r7
 800580c:	3001      	adds	r0, #1
 800580e:	f43f ae76 	beq.w	80054fe <_printf_float+0xb6>
 8005812:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005816:	4631      	mov	r1, r6
 8005818:	4628      	mov	r0, r5
 800581a:	47b8      	blx	r7
 800581c:	3001      	adds	r0, #1
 800581e:	f43f ae6e 	beq.w	80054fe <_printf_float+0xb6>
 8005822:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005826:	2200      	movs	r2, #0
 8005828:	2300      	movs	r3, #0
 800582a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800582e:	f7fb f923 	bl	8000a78 <__aeabi_dcmpeq>
 8005832:	b9c0      	cbnz	r0, 8005866 <_printf_float+0x41e>
 8005834:	4653      	mov	r3, sl
 8005836:	f108 0201 	add.w	r2, r8, #1
 800583a:	4631      	mov	r1, r6
 800583c:	4628      	mov	r0, r5
 800583e:	47b8      	blx	r7
 8005840:	3001      	adds	r0, #1
 8005842:	d10c      	bne.n	800585e <_printf_float+0x416>
 8005844:	e65b      	b.n	80054fe <_printf_float+0xb6>
 8005846:	2301      	movs	r3, #1
 8005848:	465a      	mov	r2, fp
 800584a:	4631      	mov	r1, r6
 800584c:	4628      	mov	r0, r5
 800584e:	47b8      	blx	r7
 8005850:	3001      	adds	r0, #1
 8005852:	f43f ae54 	beq.w	80054fe <_printf_float+0xb6>
 8005856:	f108 0801 	add.w	r8, r8, #1
 800585a:	45d0      	cmp	r8, sl
 800585c:	dbf3      	blt.n	8005846 <_printf_float+0x3fe>
 800585e:	464b      	mov	r3, r9
 8005860:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8005864:	e6df      	b.n	8005626 <_printf_float+0x1de>
 8005866:	f04f 0800 	mov.w	r8, #0
 800586a:	f104 0b1a 	add.w	fp, r4, #26
 800586e:	e7f4      	b.n	800585a <_printf_float+0x412>
 8005870:	2301      	movs	r3, #1
 8005872:	4642      	mov	r2, r8
 8005874:	e7e1      	b.n	800583a <_printf_float+0x3f2>
 8005876:	2301      	movs	r3, #1
 8005878:	464a      	mov	r2, r9
 800587a:	4631      	mov	r1, r6
 800587c:	4628      	mov	r0, r5
 800587e:	47b8      	blx	r7
 8005880:	3001      	adds	r0, #1
 8005882:	f43f ae3c 	beq.w	80054fe <_printf_float+0xb6>
 8005886:	f108 0801 	add.w	r8, r8, #1
 800588a:	68e3      	ldr	r3, [r4, #12]
 800588c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800588e:	1a5b      	subs	r3, r3, r1
 8005890:	4543      	cmp	r3, r8
 8005892:	dcf0      	bgt.n	8005876 <_printf_float+0x42e>
 8005894:	e6fc      	b.n	8005690 <_printf_float+0x248>
 8005896:	f04f 0800 	mov.w	r8, #0
 800589a:	f104 0919 	add.w	r9, r4, #25
 800589e:	e7f4      	b.n	800588a <_printf_float+0x442>

080058a0 <_printf_common>:
 80058a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80058a4:	4616      	mov	r6, r2
 80058a6:	4698      	mov	r8, r3
 80058a8:	688a      	ldr	r2, [r1, #8]
 80058aa:	690b      	ldr	r3, [r1, #16]
 80058ac:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80058b0:	4293      	cmp	r3, r2
 80058b2:	bfb8      	it	lt
 80058b4:	4613      	movlt	r3, r2
 80058b6:	6033      	str	r3, [r6, #0]
 80058b8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80058bc:	4607      	mov	r7, r0
 80058be:	460c      	mov	r4, r1
 80058c0:	b10a      	cbz	r2, 80058c6 <_printf_common+0x26>
 80058c2:	3301      	adds	r3, #1
 80058c4:	6033      	str	r3, [r6, #0]
 80058c6:	6823      	ldr	r3, [r4, #0]
 80058c8:	0699      	lsls	r1, r3, #26
 80058ca:	bf42      	ittt	mi
 80058cc:	6833      	ldrmi	r3, [r6, #0]
 80058ce:	3302      	addmi	r3, #2
 80058d0:	6033      	strmi	r3, [r6, #0]
 80058d2:	6825      	ldr	r5, [r4, #0]
 80058d4:	f015 0506 	ands.w	r5, r5, #6
 80058d8:	d106      	bne.n	80058e8 <_printf_common+0x48>
 80058da:	f104 0a19 	add.w	sl, r4, #25
 80058de:	68e3      	ldr	r3, [r4, #12]
 80058e0:	6832      	ldr	r2, [r6, #0]
 80058e2:	1a9b      	subs	r3, r3, r2
 80058e4:	42ab      	cmp	r3, r5
 80058e6:	dc26      	bgt.n	8005936 <_printf_common+0x96>
 80058e8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80058ec:	6822      	ldr	r2, [r4, #0]
 80058ee:	3b00      	subs	r3, #0
 80058f0:	bf18      	it	ne
 80058f2:	2301      	movne	r3, #1
 80058f4:	0692      	lsls	r2, r2, #26
 80058f6:	d42b      	bmi.n	8005950 <_printf_common+0xb0>
 80058f8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80058fc:	4641      	mov	r1, r8
 80058fe:	4638      	mov	r0, r7
 8005900:	47c8      	blx	r9
 8005902:	3001      	adds	r0, #1
 8005904:	d01e      	beq.n	8005944 <_printf_common+0xa4>
 8005906:	6823      	ldr	r3, [r4, #0]
 8005908:	6922      	ldr	r2, [r4, #16]
 800590a:	f003 0306 	and.w	r3, r3, #6
 800590e:	2b04      	cmp	r3, #4
 8005910:	bf02      	ittt	eq
 8005912:	68e5      	ldreq	r5, [r4, #12]
 8005914:	6833      	ldreq	r3, [r6, #0]
 8005916:	1aed      	subeq	r5, r5, r3
 8005918:	68a3      	ldr	r3, [r4, #8]
 800591a:	bf0c      	ite	eq
 800591c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005920:	2500      	movne	r5, #0
 8005922:	4293      	cmp	r3, r2
 8005924:	bfc4      	itt	gt
 8005926:	1a9b      	subgt	r3, r3, r2
 8005928:	18ed      	addgt	r5, r5, r3
 800592a:	2600      	movs	r6, #0
 800592c:	341a      	adds	r4, #26
 800592e:	42b5      	cmp	r5, r6
 8005930:	d11a      	bne.n	8005968 <_printf_common+0xc8>
 8005932:	2000      	movs	r0, #0
 8005934:	e008      	b.n	8005948 <_printf_common+0xa8>
 8005936:	2301      	movs	r3, #1
 8005938:	4652      	mov	r2, sl
 800593a:	4641      	mov	r1, r8
 800593c:	4638      	mov	r0, r7
 800593e:	47c8      	blx	r9
 8005940:	3001      	adds	r0, #1
 8005942:	d103      	bne.n	800594c <_printf_common+0xac>
 8005944:	f04f 30ff 	mov.w	r0, #4294967295
 8005948:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800594c:	3501      	adds	r5, #1
 800594e:	e7c6      	b.n	80058de <_printf_common+0x3e>
 8005950:	18e1      	adds	r1, r4, r3
 8005952:	1c5a      	adds	r2, r3, #1
 8005954:	2030      	movs	r0, #48	@ 0x30
 8005956:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800595a:	4422      	add	r2, r4
 800595c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005960:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005964:	3302      	adds	r3, #2
 8005966:	e7c7      	b.n	80058f8 <_printf_common+0x58>
 8005968:	2301      	movs	r3, #1
 800596a:	4622      	mov	r2, r4
 800596c:	4641      	mov	r1, r8
 800596e:	4638      	mov	r0, r7
 8005970:	47c8      	blx	r9
 8005972:	3001      	adds	r0, #1
 8005974:	d0e6      	beq.n	8005944 <_printf_common+0xa4>
 8005976:	3601      	adds	r6, #1
 8005978:	e7d9      	b.n	800592e <_printf_common+0x8e>
	...

0800597c <_printf_i>:
 800597c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005980:	7e0f      	ldrb	r7, [r1, #24]
 8005982:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005984:	2f78      	cmp	r7, #120	@ 0x78
 8005986:	4691      	mov	r9, r2
 8005988:	4680      	mov	r8, r0
 800598a:	460c      	mov	r4, r1
 800598c:	469a      	mov	sl, r3
 800598e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005992:	d807      	bhi.n	80059a4 <_printf_i+0x28>
 8005994:	2f62      	cmp	r7, #98	@ 0x62
 8005996:	d80a      	bhi.n	80059ae <_printf_i+0x32>
 8005998:	2f00      	cmp	r7, #0
 800599a:	f000 80d2 	beq.w	8005b42 <_printf_i+0x1c6>
 800599e:	2f58      	cmp	r7, #88	@ 0x58
 80059a0:	f000 80b9 	beq.w	8005b16 <_printf_i+0x19a>
 80059a4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80059a8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80059ac:	e03a      	b.n	8005a24 <_printf_i+0xa8>
 80059ae:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80059b2:	2b15      	cmp	r3, #21
 80059b4:	d8f6      	bhi.n	80059a4 <_printf_i+0x28>
 80059b6:	a101      	add	r1, pc, #4	@ (adr r1, 80059bc <_printf_i+0x40>)
 80059b8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80059bc:	08005a15 	.word	0x08005a15
 80059c0:	08005a29 	.word	0x08005a29
 80059c4:	080059a5 	.word	0x080059a5
 80059c8:	080059a5 	.word	0x080059a5
 80059cc:	080059a5 	.word	0x080059a5
 80059d0:	080059a5 	.word	0x080059a5
 80059d4:	08005a29 	.word	0x08005a29
 80059d8:	080059a5 	.word	0x080059a5
 80059dc:	080059a5 	.word	0x080059a5
 80059e0:	080059a5 	.word	0x080059a5
 80059e4:	080059a5 	.word	0x080059a5
 80059e8:	08005b29 	.word	0x08005b29
 80059ec:	08005a53 	.word	0x08005a53
 80059f0:	08005ae3 	.word	0x08005ae3
 80059f4:	080059a5 	.word	0x080059a5
 80059f8:	080059a5 	.word	0x080059a5
 80059fc:	08005b4b 	.word	0x08005b4b
 8005a00:	080059a5 	.word	0x080059a5
 8005a04:	08005a53 	.word	0x08005a53
 8005a08:	080059a5 	.word	0x080059a5
 8005a0c:	080059a5 	.word	0x080059a5
 8005a10:	08005aeb 	.word	0x08005aeb
 8005a14:	6833      	ldr	r3, [r6, #0]
 8005a16:	1d1a      	adds	r2, r3, #4
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	6032      	str	r2, [r6, #0]
 8005a1c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005a20:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005a24:	2301      	movs	r3, #1
 8005a26:	e09d      	b.n	8005b64 <_printf_i+0x1e8>
 8005a28:	6833      	ldr	r3, [r6, #0]
 8005a2a:	6820      	ldr	r0, [r4, #0]
 8005a2c:	1d19      	adds	r1, r3, #4
 8005a2e:	6031      	str	r1, [r6, #0]
 8005a30:	0606      	lsls	r6, r0, #24
 8005a32:	d501      	bpl.n	8005a38 <_printf_i+0xbc>
 8005a34:	681d      	ldr	r5, [r3, #0]
 8005a36:	e003      	b.n	8005a40 <_printf_i+0xc4>
 8005a38:	0645      	lsls	r5, r0, #25
 8005a3a:	d5fb      	bpl.n	8005a34 <_printf_i+0xb8>
 8005a3c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005a40:	2d00      	cmp	r5, #0
 8005a42:	da03      	bge.n	8005a4c <_printf_i+0xd0>
 8005a44:	232d      	movs	r3, #45	@ 0x2d
 8005a46:	426d      	negs	r5, r5
 8005a48:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005a4c:	4859      	ldr	r0, [pc, #356]	@ (8005bb4 <_printf_i+0x238>)
 8005a4e:	230a      	movs	r3, #10
 8005a50:	e011      	b.n	8005a76 <_printf_i+0xfa>
 8005a52:	6821      	ldr	r1, [r4, #0]
 8005a54:	6833      	ldr	r3, [r6, #0]
 8005a56:	0608      	lsls	r0, r1, #24
 8005a58:	f853 5b04 	ldr.w	r5, [r3], #4
 8005a5c:	d402      	bmi.n	8005a64 <_printf_i+0xe8>
 8005a5e:	0649      	lsls	r1, r1, #25
 8005a60:	bf48      	it	mi
 8005a62:	b2ad      	uxthmi	r5, r5
 8005a64:	2f6f      	cmp	r7, #111	@ 0x6f
 8005a66:	4853      	ldr	r0, [pc, #332]	@ (8005bb4 <_printf_i+0x238>)
 8005a68:	6033      	str	r3, [r6, #0]
 8005a6a:	bf14      	ite	ne
 8005a6c:	230a      	movne	r3, #10
 8005a6e:	2308      	moveq	r3, #8
 8005a70:	2100      	movs	r1, #0
 8005a72:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005a76:	6866      	ldr	r6, [r4, #4]
 8005a78:	60a6      	str	r6, [r4, #8]
 8005a7a:	2e00      	cmp	r6, #0
 8005a7c:	bfa2      	ittt	ge
 8005a7e:	6821      	ldrge	r1, [r4, #0]
 8005a80:	f021 0104 	bicge.w	r1, r1, #4
 8005a84:	6021      	strge	r1, [r4, #0]
 8005a86:	b90d      	cbnz	r5, 8005a8c <_printf_i+0x110>
 8005a88:	2e00      	cmp	r6, #0
 8005a8a:	d04b      	beq.n	8005b24 <_printf_i+0x1a8>
 8005a8c:	4616      	mov	r6, r2
 8005a8e:	fbb5 f1f3 	udiv	r1, r5, r3
 8005a92:	fb03 5711 	mls	r7, r3, r1, r5
 8005a96:	5dc7      	ldrb	r7, [r0, r7]
 8005a98:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005a9c:	462f      	mov	r7, r5
 8005a9e:	42bb      	cmp	r3, r7
 8005aa0:	460d      	mov	r5, r1
 8005aa2:	d9f4      	bls.n	8005a8e <_printf_i+0x112>
 8005aa4:	2b08      	cmp	r3, #8
 8005aa6:	d10b      	bne.n	8005ac0 <_printf_i+0x144>
 8005aa8:	6823      	ldr	r3, [r4, #0]
 8005aaa:	07df      	lsls	r7, r3, #31
 8005aac:	d508      	bpl.n	8005ac0 <_printf_i+0x144>
 8005aae:	6923      	ldr	r3, [r4, #16]
 8005ab0:	6861      	ldr	r1, [r4, #4]
 8005ab2:	4299      	cmp	r1, r3
 8005ab4:	bfde      	ittt	le
 8005ab6:	2330      	movle	r3, #48	@ 0x30
 8005ab8:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005abc:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005ac0:	1b92      	subs	r2, r2, r6
 8005ac2:	6122      	str	r2, [r4, #16]
 8005ac4:	f8cd a000 	str.w	sl, [sp]
 8005ac8:	464b      	mov	r3, r9
 8005aca:	aa03      	add	r2, sp, #12
 8005acc:	4621      	mov	r1, r4
 8005ace:	4640      	mov	r0, r8
 8005ad0:	f7ff fee6 	bl	80058a0 <_printf_common>
 8005ad4:	3001      	adds	r0, #1
 8005ad6:	d14a      	bne.n	8005b6e <_printf_i+0x1f2>
 8005ad8:	f04f 30ff 	mov.w	r0, #4294967295
 8005adc:	b004      	add	sp, #16
 8005ade:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ae2:	6823      	ldr	r3, [r4, #0]
 8005ae4:	f043 0320 	orr.w	r3, r3, #32
 8005ae8:	6023      	str	r3, [r4, #0]
 8005aea:	4833      	ldr	r0, [pc, #204]	@ (8005bb8 <_printf_i+0x23c>)
 8005aec:	2778      	movs	r7, #120	@ 0x78
 8005aee:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005af2:	6823      	ldr	r3, [r4, #0]
 8005af4:	6831      	ldr	r1, [r6, #0]
 8005af6:	061f      	lsls	r7, r3, #24
 8005af8:	f851 5b04 	ldr.w	r5, [r1], #4
 8005afc:	d402      	bmi.n	8005b04 <_printf_i+0x188>
 8005afe:	065f      	lsls	r7, r3, #25
 8005b00:	bf48      	it	mi
 8005b02:	b2ad      	uxthmi	r5, r5
 8005b04:	6031      	str	r1, [r6, #0]
 8005b06:	07d9      	lsls	r1, r3, #31
 8005b08:	bf44      	itt	mi
 8005b0a:	f043 0320 	orrmi.w	r3, r3, #32
 8005b0e:	6023      	strmi	r3, [r4, #0]
 8005b10:	b11d      	cbz	r5, 8005b1a <_printf_i+0x19e>
 8005b12:	2310      	movs	r3, #16
 8005b14:	e7ac      	b.n	8005a70 <_printf_i+0xf4>
 8005b16:	4827      	ldr	r0, [pc, #156]	@ (8005bb4 <_printf_i+0x238>)
 8005b18:	e7e9      	b.n	8005aee <_printf_i+0x172>
 8005b1a:	6823      	ldr	r3, [r4, #0]
 8005b1c:	f023 0320 	bic.w	r3, r3, #32
 8005b20:	6023      	str	r3, [r4, #0]
 8005b22:	e7f6      	b.n	8005b12 <_printf_i+0x196>
 8005b24:	4616      	mov	r6, r2
 8005b26:	e7bd      	b.n	8005aa4 <_printf_i+0x128>
 8005b28:	6833      	ldr	r3, [r6, #0]
 8005b2a:	6825      	ldr	r5, [r4, #0]
 8005b2c:	6961      	ldr	r1, [r4, #20]
 8005b2e:	1d18      	adds	r0, r3, #4
 8005b30:	6030      	str	r0, [r6, #0]
 8005b32:	062e      	lsls	r6, r5, #24
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	d501      	bpl.n	8005b3c <_printf_i+0x1c0>
 8005b38:	6019      	str	r1, [r3, #0]
 8005b3a:	e002      	b.n	8005b42 <_printf_i+0x1c6>
 8005b3c:	0668      	lsls	r0, r5, #25
 8005b3e:	d5fb      	bpl.n	8005b38 <_printf_i+0x1bc>
 8005b40:	8019      	strh	r1, [r3, #0]
 8005b42:	2300      	movs	r3, #0
 8005b44:	6123      	str	r3, [r4, #16]
 8005b46:	4616      	mov	r6, r2
 8005b48:	e7bc      	b.n	8005ac4 <_printf_i+0x148>
 8005b4a:	6833      	ldr	r3, [r6, #0]
 8005b4c:	1d1a      	adds	r2, r3, #4
 8005b4e:	6032      	str	r2, [r6, #0]
 8005b50:	681e      	ldr	r6, [r3, #0]
 8005b52:	6862      	ldr	r2, [r4, #4]
 8005b54:	2100      	movs	r1, #0
 8005b56:	4630      	mov	r0, r6
 8005b58:	f7fa fb12 	bl	8000180 <memchr>
 8005b5c:	b108      	cbz	r0, 8005b62 <_printf_i+0x1e6>
 8005b5e:	1b80      	subs	r0, r0, r6
 8005b60:	6060      	str	r0, [r4, #4]
 8005b62:	6863      	ldr	r3, [r4, #4]
 8005b64:	6123      	str	r3, [r4, #16]
 8005b66:	2300      	movs	r3, #0
 8005b68:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005b6c:	e7aa      	b.n	8005ac4 <_printf_i+0x148>
 8005b6e:	6923      	ldr	r3, [r4, #16]
 8005b70:	4632      	mov	r2, r6
 8005b72:	4649      	mov	r1, r9
 8005b74:	4640      	mov	r0, r8
 8005b76:	47d0      	blx	sl
 8005b78:	3001      	adds	r0, #1
 8005b7a:	d0ad      	beq.n	8005ad8 <_printf_i+0x15c>
 8005b7c:	6823      	ldr	r3, [r4, #0]
 8005b7e:	079b      	lsls	r3, r3, #30
 8005b80:	d413      	bmi.n	8005baa <_printf_i+0x22e>
 8005b82:	68e0      	ldr	r0, [r4, #12]
 8005b84:	9b03      	ldr	r3, [sp, #12]
 8005b86:	4298      	cmp	r0, r3
 8005b88:	bfb8      	it	lt
 8005b8a:	4618      	movlt	r0, r3
 8005b8c:	e7a6      	b.n	8005adc <_printf_i+0x160>
 8005b8e:	2301      	movs	r3, #1
 8005b90:	4632      	mov	r2, r6
 8005b92:	4649      	mov	r1, r9
 8005b94:	4640      	mov	r0, r8
 8005b96:	47d0      	blx	sl
 8005b98:	3001      	adds	r0, #1
 8005b9a:	d09d      	beq.n	8005ad8 <_printf_i+0x15c>
 8005b9c:	3501      	adds	r5, #1
 8005b9e:	68e3      	ldr	r3, [r4, #12]
 8005ba0:	9903      	ldr	r1, [sp, #12]
 8005ba2:	1a5b      	subs	r3, r3, r1
 8005ba4:	42ab      	cmp	r3, r5
 8005ba6:	dcf2      	bgt.n	8005b8e <_printf_i+0x212>
 8005ba8:	e7eb      	b.n	8005b82 <_printf_i+0x206>
 8005baa:	2500      	movs	r5, #0
 8005bac:	f104 0619 	add.w	r6, r4, #25
 8005bb0:	e7f5      	b.n	8005b9e <_printf_i+0x222>
 8005bb2:	bf00      	nop
 8005bb4:	08007eba 	.word	0x08007eba
 8005bb8:	08007ecb 	.word	0x08007ecb

08005bbc <std>:
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	b510      	push	{r4, lr}
 8005bc0:	4604      	mov	r4, r0
 8005bc2:	e9c0 3300 	strd	r3, r3, [r0]
 8005bc6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005bca:	6083      	str	r3, [r0, #8]
 8005bcc:	8181      	strh	r1, [r0, #12]
 8005bce:	6643      	str	r3, [r0, #100]	@ 0x64
 8005bd0:	81c2      	strh	r2, [r0, #14]
 8005bd2:	6183      	str	r3, [r0, #24]
 8005bd4:	4619      	mov	r1, r3
 8005bd6:	2208      	movs	r2, #8
 8005bd8:	305c      	adds	r0, #92	@ 0x5c
 8005bda:	f000 f9f9 	bl	8005fd0 <memset>
 8005bde:	4b0d      	ldr	r3, [pc, #52]	@ (8005c14 <std+0x58>)
 8005be0:	6263      	str	r3, [r4, #36]	@ 0x24
 8005be2:	4b0d      	ldr	r3, [pc, #52]	@ (8005c18 <std+0x5c>)
 8005be4:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005be6:	4b0d      	ldr	r3, [pc, #52]	@ (8005c1c <std+0x60>)
 8005be8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005bea:	4b0d      	ldr	r3, [pc, #52]	@ (8005c20 <std+0x64>)
 8005bec:	6323      	str	r3, [r4, #48]	@ 0x30
 8005bee:	4b0d      	ldr	r3, [pc, #52]	@ (8005c24 <std+0x68>)
 8005bf0:	6224      	str	r4, [r4, #32]
 8005bf2:	429c      	cmp	r4, r3
 8005bf4:	d006      	beq.n	8005c04 <std+0x48>
 8005bf6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005bfa:	4294      	cmp	r4, r2
 8005bfc:	d002      	beq.n	8005c04 <std+0x48>
 8005bfe:	33d0      	adds	r3, #208	@ 0xd0
 8005c00:	429c      	cmp	r4, r3
 8005c02:	d105      	bne.n	8005c10 <std+0x54>
 8005c04:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005c08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005c0c:	f000 ba5c 	b.w	80060c8 <__retarget_lock_init_recursive>
 8005c10:	bd10      	pop	{r4, pc}
 8005c12:	bf00      	nop
 8005c14:	08005e21 	.word	0x08005e21
 8005c18:	08005e43 	.word	0x08005e43
 8005c1c:	08005e7b 	.word	0x08005e7b
 8005c20:	08005e9f 	.word	0x08005e9f
 8005c24:	20000338 	.word	0x20000338

08005c28 <stdio_exit_handler>:
 8005c28:	4a02      	ldr	r2, [pc, #8]	@ (8005c34 <stdio_exit_handler+0xc>)
 8005c2a:	4903      	ldr	r1, [pc, #12]	@ (8005c38 <stdio_exit_handler+0x10>)
 8005c2c:	4803      	ldr	r0, [pc, #12]	@ (8005c3c <stdio_exit_handler+0x14>)
 8005c2e:	f000 b869 	b.w	8005d04 <_fwalk_sglue>
 8005c32:	bf00      	nop
 8005c34:	2000000c 	.word	0x2000000c
 8005c38:	080079f1 	.word	0x080079f1
 8005c3c:	2000001c 	.word	0x2000001c

08005c40 <cleanup_stdio>:
 8005c40:	6841      	ldr	r1, [r0, #4]
 8005c42:	4b0c      	ldr	r3, [pc, #48]	@ (8005c74 <cleanup_stdio+0x34>)
 8005c44:	4299      	cmp	r1, r3
 8005c46:	b510      	push	{r4, lr}
 8005c48:	4604      	mov	r4, r0
 8005c4a:	d001      	beq.n	8005c50 <cleanup_stdio+0x10>
 8005c4c:	f001 fed0 	bl	80079f0 <_fflush_r>
 8005c50:	68a1      	ldr	r1, [r4, #8]
 8005c52:	4b09      	ldr	r3, [pc, #36]	@ (8005c78 <cleanup_stdio+0x38>)
 8005c54:	4299      	cmp	r1, r3
 8005c56:	d002      	beq.n	8005c5e <cleanup_stdio+0x1e>
 8005c58:	4620      	mov	r0, r4
 8005c5a:	f001 fec9 	bl	80079f0 <_fflush_r>
 8005c5e:	68e1      	ldr	r1, [r4, #12]
 8005c60:	4b06      	ldr	r3, [pc, #24]	@ (8005c7c <cleanup_stdio+0x3c>)
 8005c62:	4299      	cmp	r1, r3
 8005c64:	d004      	beq.n	8005c70 <cleanup_stdio+0x30>
 8005c66:	4620      	mov	r0, r4
 8005c68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005c6c:	f001 bec0 	b.w	80079f0 <_fflush_r>
 8005c70:	bd10      	pop	{r4, pc}
 8005c72:	bf00      	nop
 8005c74:	20000338 	.word	0x20000338
 8005c78:	200003a0 	.word	0x200003a0
 8005c7c:	20000408 	.word	0x20000408

08005c80 <global_stdio_init.part.0>:
 8005c80:	b510      	push	{r4, lr}
 8005c82:	4b0b      	ldr	r3, [pc, #44]	@ (8005cb0 <global_stdio_init.part.0+0x30>)
 8005c84:	4c0b      	ldr	r4, [pc, #44]	@ (8005cb4 <global_stdio_init.part.0+0x34>)
 8005c86:	4a0c      	ldr	r2, [pc, #48]	@ (8005cb8 <global_stdio_init.part.0+0x38>)
 8005c88:	601a      	str	r2, [r3, #0]
 8005c8a:	4620      	mov	r0, r4
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	2104      	movs	r1, #4
 8005c90:	f7ff ff94 	bl	8005bbc <std>
 8005c94:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005c98:	2201      	movs	r2, #1
 8005c9a:	2109      	movs	r1, #9
 8005c9c:	f7ff ff8e 	bl	8005bbc <std>
 8005ca0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005ca4:	2202      	movs	r2, #2
 8005ca6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005caa:	2112      	movs	r1, #18
 8005cac:	f7ff bf86 	b.w	8005bbc <std>
 8005cb0:	20000470 	.word	0x20000470
 8005cb4:	20000338 	.word	0x20000338
 8005cb8:	08005c29 	.word	0x08005c29

08005cbc <__sfp_lock_acquire>:
 8005cbc:	4801      	ldr	r0, [pc, #4]	@ (8005cc4 <__sfp_lock_acquire+0x8>)
 8005cbe:	f000 ba04 	b.w	80060ca <__retarget_lock_acquire_recursive>
 8005cc2:	bf00      	nop
 8005cc4:	20000479 	.word	0x20000479

08005cc8 <__sfp_lock_release>:
 8005cc8:	4801      	ldr	r0, [pc, #4]	@ (8005cd0 <__sfp_lock_release+0x8>)
 8005cca:	f000 b9ff 	b.w	80060cc <__retarget_lock_release_recursive>
 8005cce:	bf00      	nop
 8005cd0:	20000479 	.word	0x20000479

08005cd4 <__sinit>:
 8005cd4:	b510      	push	{r4, lr}
 8005cd6:	4604      	mov	r4, r0
 8005cd8:	f7ff fff0 	bl	8005cbc <__sfp_lock_acquire>
 8005cdc:	6a23      	ldr	r3, [r4, #32]
 8005cde:	b11b      	cbz	r3, 8005ce8 <__sinit+0x14>
 8005ce0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005ce4:	f7ff bff0 	b.w	8005cc8 <__sfp_lock_release>
 8005ce8:	4b04      	ldr	r3, [pc, #16]	@ (8005cfc <__sinit+0x28>)
 8005cea:	6223      	str	r3, [r4, #32]
 8005cec:	4b04      	ldr	r3, [pc, #16]	@ (8005d00 <__sinit+0x2c>)
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d1f5      	bne.n	8005ce0 <__sinit+0xc>
 8005cf4:	f7ff ffc4 	bl	8005c80 <global_stdio_init.part.0>
 8005cf8:	e7f2      	b.n	8005ce0 <__sinit+0xc>
 8005cfa:	bf00      	nop
 8005cfc:	08005c41 	.word	0x08005c41
 8005d00:	20000470 	.word	0x20000470

08005d04 <_fwalk_sglue>:
 8005d04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005d08:	4607      	mov	r7, r0
 8005d0a:	4688      	mov	r8, r1
 8005d0c:	4614      	mov	r4, r2
 8005d0e:	2600      	movs	r6, #0
 8005d10:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005d14:	f1b9 0901 	subs.w	r9, r9, #1
 8005d18:	d505      	bpl.n	8005d26 <_fwalk_sglue+0x22>
 8005d1a:	6824      	ldr	r4, [r4, #0]
 8005d1c:	2c00      	cmp	r4, #0
 8005d1e:	d1f7      	bne.n	8005d10 <_fwalk_sglue+0xc>
 8005d20:	4630      	mov	r0, r6
 8005d22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005d26:	89ab      	ldrh	r3, [r5, #12]
 8005d28:	2b01      	cmp	r3, #1
 8005d2a:	d907      	bls.n	8005d3c <_fwalk_sglue+0x38>
 8005d2c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005d30:	3301      	adds	r3, #1
 8005d32:	d003      	beq.n	8005d3c <_fwalk_sglue+0x38>
 8005d34:	4629      	mov	r1, r5
 8005d36:	4638      	mov	r0, r7
 8005d38:	47c0      	blx	r8
 8005d3a:	4306      	orrs	r6, r0
 8005d3c:	3568      	adds	r5, #104	@ 0x68
 8005d3e:	e7e9      	b.n	8005d14 <_fwalk_sglue+0x10>

08005d40 <iprintf>:
 8005d40:	b40f      	push	{r0, r1, r2, r3}
 8005d42:	b507      	push	{r0, r1, r2, lr}
 8005d44:	4906      	ldr	r1, [pc, #24]	@ (8005d60 <iprintf+0x20>)
 8005d46:	ab04      	add	r3, sp, #16
 8005d48:	6808      	ldr	r0, [r1, #0]
 8005d4a:	f853 2b04 	ldr.w	r2, [r3], #4
 8005d4e:	6881      	ldr	r1, [r0, #8]
 8005d50:	9301      	str	r3, [sp, #4]
 8005d52:	f001 fcb5 	bl	80076c0 <_vfiprintf_r>
 8005d56:	b003      	add	sp, #12
 8005d58:	f85d eb04 	ldr.w	lr, [sp], #4
 8005d5c:	b004      	add	sp, #16
 8005d5e:	4770      	bx	lr
 8005d60:	20000018 	.word	0x20000018

08005d64 <_puts_r>:
 8005d64:	6a03      	ldr	r3, [r0, #32]
 8005d66:	b570      	push	{r4, r5, r6, lr}
 8005d68:	6884      	ldr	r4, [r0, #8]
 8005d6a:	4605      	mov	r5, r0
 8005d6c:	460e      	mov	r6, r1
 8005d6e:	b90b      	cbnz	r3, 8005d74 <_puts_r+0x10>
 8005d70:	f7ff ffb0 	bl	8005cd4 <__sinit>
 8005d74:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005d76:	07db      	lsls	r3, r3, #31
 8005d78:	d405      	bmi.n	8005d86 <_puts_r+0x22>
 8005d7a:	89a3      	ldrh	r3, [r4, #12]
 8005d7c:	0598      	lsls	r0, r3, #22
 8005d7e:	d402      	bmi.n	8005d86 <_puts_r+0x22>
 8005d80:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005d82:	f000 f9a2 	bl	80060ca <__retarget_lock_acquire_recursive>
 8005d86:	89a3      	ldrh	r3, [r4, #12]
 8005d88:	0719      	lsls	r1, r3, #28
 8005d8a:	d502      	bpl.n	8005d92 <_puts_r+0x2e>
 8005d8c:	6923      	ldr	r3, [r4, #16]
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d135      	bne.n	8005dfe <_puts_r+0x9a>
 8005d92:	4621      	mov	r1, r4
 8005d94:	4628      	mov	r0, r5
 8005d96:	f000 f8c5 	bl	8005f24 <__swsetup_r>
 8005d9a:	b380      	cbz	r0, 8005dfe <_puts_r+0x9a>
 8005d9c:	f04f 35ff 	mov.w	r5, #4294967295
 8005da0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005da2:	07da      	lsls	r2, r3, #31
 8005da4:	d405      	bmi.n	8005db2 <_puts_r+0x4e>
 8005da6:	89a3      	ldrh	r3, [r4, #12]
 8005da8:	059b      	lsls	r3, r3, #22
 8005daa:	d402      	bmi.n	8005db2 <_puts_r+0x4e>
 8005dac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005dae:	f000 f98d 	bl	80060cc <__retarget_lock_release_recursive>
 8005db2:	4628      	mov	r0, r5
 8005db4:	bd70      	pop	{r4, r5, r6, pc}
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	da04      	bge.n	8005dc4 <_puts_r+0x60>
 8005dba:	69a2      	ldr	r2, [r4, #24]
 8005dbc:	429a      	cmp	r2, r3
 8005dbe:	dc17      	bgt.n	8005df0 <_puts_r+0x8c>
 8005dc0:	290a      	cmp	r1, #10
 8005dc2:	d015      	beq.n	8005df0 <_puts_r+0x8c>
 8005dc4:	6823      	ldr	r3, [r4, #0]
 8005dc6:	1c5a      	adds	r2, r3, #1
 8005dc8:	6022      	str	r2, [r4, #0]
 8005dca:	7019      	strb	r1, [r3, #0]
 8005dcc:	68a3      	ldr	r3, [r4, #8]
 8005dce:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005dd2:	3b01      	subs	r3, #1
 8005dd4:	60a3      	str	r3, [r4, #8]
 8005dd6:	2900      	cmp	r1, #0
 8005dd8:	d1ed      	bne.n	8005db6 <_puts_r+0x52>
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	da11      	bge.n	8005e02 <_puts_r+0x9e>
 8005dde:	4622      	mov	r2, r4
 8005de0:	210a      	movs	r1, #10
 8005de2:	4628      	mov	r0, r5
 8005de4:	f000 f85f 	bl	8005ea6 <__swbuf_r>
 8005de8:	3001      	adds	r0, #1
 8005dea:	d0d7      	beq.n	8005d9c <_puts_r+0x38>
 8005dec:	250a      	movs	r5, #10
 8005dee:	e7d7      	b.n	8005da0 <_puts_r+0x3c>
 8005df0:	4622      	mov	r2, r4
 8005df2:	4628      	mov	r0, r5
 8005df4:	f000 f857 	bl	8005ea6 <__swbuf_r>
 8005df8:	3001      	adds	r0, #1
 8005dfa:	d1e7      	bne.n	8005dcc <_puts_r+0x68>
 8005dfc:	e7ce      	b.n	8005d9c <_puts_r+0x38>
 8005dfe:	3e01      	subs	r6, #1
 8005e00:	e7e4      	b.n	8005dcc <_puts_r+0x68>
 8005e02:	6823      	ldr	r3, [r4, #0]
 8005e04:	1c5a      	adds	r2, r3, #1
 8005e06:	6022      	str	r2, [r4, #0]
 8005e08:	220a      	movs	r2, #10
 8005e0a:	701a      	strb	r2, [r3, #0]
 8005e0c:	e7ee      	b.n	8005dec <_puts_r+0x88>
	...

08005e10 <puts>:
 8005e10:	4b02      	ldr	r3, [pc, #8]	@ (8005e1c <puts+0xc>)
 8005e12:	4601      	mov	r1, r0
 8005e14:	6818      	ldr	r0, [r3, #0]
 8005e16:	f7ff bfa5 	b.w	8005d64 <_puts_r>
 8005e1a:	bf00      	nop
 8005e1c:	20000018 	.word	0x20000018

08005e20 <__sread>:
 8005e20:	b510      	push	{r4, lr}
 8005e22:	460c      	mov	r4, r1
 8005e24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e28:	f000 f900 	bl	800602c <_read_r>
 8005e2c:	2800      	cmp	r0, #0
 8005e2e:	bfab      	itete	ge
 8005e30:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005e32:	89a3      	ldrhlt	r3, [r4, #12]
 8005e34:	181b      	addge	r3, r3, r0
 8005e36:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005e3a:	bfac      	ite	ge
 8005e3c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005e3e:	81a3      	strhlt	r3, [r4, #12]
 8005e40:	bd10      	pop	{r4, pc}

08005e42 <__swrite>:
 8005e42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e46:	461f      	mov	r7, r3
 8005e48:	898b      	ldrh	r3, [r1, #12]
 8005e4a:	05db      	lsls	r3, r3, #23
 8005e4c:	4605      	mov	r5, r0
 8005e4e:	460c      	mov	r4, r1
 8005e50:	4616      	mov	r6, r2
 8005e52:	d505      	bpl.n	8005e60 <__swrite+0x1e>
 8005e54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e58:	2302      	movs	r3, #2
 8005e5a:	2200      	movs	r2, #0
 8005e5c:	f000 f8d4 	bl	8006008 <_lseek_r>
 8005e60:	89a3      	ldrh	r3, [r4, #12]
 8005e62:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005e66:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005e6a:	81a3      	strh	r3, [r4, #12]
 8005e6c:	4632      	mov	r2, r6
 8005e6e:	463b      	mov	r3, r7
 8005e70:	4628      	mov	r0, r5
 8005e72:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005e76:	f000 b8eb 	b.w	8006050 <_write_r>

08005e7a <__sseek>:
 8005e7a:	b510      	push	{r4, lr}
 8005e7c:	460c      	mov	r4, r1
 8005e7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e82:	f000 f8c1 	bl	8006008 <_lseek_r>
 8005e86:	1c43      	adds	r3, r0, #1
 8005e88:	89a3      	ldrh	r3, [r4, #12]
 8005e8a:	bf15      	itete	ne
 8005e8c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005e8e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005e92:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005e96:	81a3      	strheq	r3, [r4, #12]
 8005e98:	bf18      	it	ne
 8005e9a:	81a3      	strhne	r3, [r4, #12]
 8005e9c:	bd10      	pop	{r4, pc}

08005e9e <__sclose>:
 8005e9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ea2:	f000 b8a1 	b.w	8005fe8 <_close_r>

08005ea6 <__swbuf_r>:
 8005ea6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ea8:	460e      	mov	r6, r1
 8005eaa:	4614      	mov	r4, r2
 8005eac:	4605      	mov	r5, r0
 8005eae:	b118      	cbz	r0, 8005eb8 <__swbuf_r+0x12>
 8005eb0:	6a03      	ldr	r3, [r0, #32]
 8005eb2:	b90b      	cbnz	r3, 8005eb8 <__swbuf_r+0x12>
 8005eb4:	f7ff ff0e 	bl	8005cd4 <__sinit>
 8005eb8:	69a3      	ldr	r3, [r4, #24]
 8005eba:	60a3      	str	r3, [r4, #8]
 8005ebc:	89a3      	ldrh	r3, [r4, #12]
 8005ebe:	071a      	lsls	r2, r3, #28
 8005ec0:	d501      	bpl.n	8005ec6 <__swbuf_r+0x20>
 8005ec2:	6923      	ldr	r3, [r4, #16]
 8005ec4:	b943      	cbnz	r3, 8005ed8 <__swbuf_r+0x32>
 8005ec6:	4621      	mov	r1, r4
 8005ec8:	4628      	mov	r0, r5
 8005eca:	f000 f82b 	bl	8005f24 <__swsetup_r>
 8005ece:	b118      	cbz	r0, 8005ed8 <__swbuf_r+0x32>
 8005ed0:	f04f 37ff 	mov.w	r7, #4294967295
 8005ed4:	4638      	mov	r0, r7
 8005ed6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005ed8:	6823      	ldr	r3, [r4, #0]
 8005eda:	6922      	ldr	r2, [r4, #16]
 8005edc:	1a98      	subs	r0, r3, r2
 8005ede:	6963      	ldr	r3, [r4, #20]
 8005ee0:	b2f6      	uxtb	r6, r6
 8005ee2:	4283      	cmp	r3, r0
 8005ee4:	4637      	mov	r7, r6
 8005ee6:	dc05      	bgt.n	8005ef4 <__swbuf_r+0x4e>
 8005ee8:	4621      	mov	r1, r4
 8005eea:	4628      	mov	r0, r5
 8005eec:	f001 fd80 	bl	80079f0 <_fflush_r>
 8005ef0:	2800      	cmp	r0, #0
 8005ef2:	d1ed      	bne.n	8005ed0 <__swbuf_r+0x2a>
 8005ef4:	68a3      	ldr	r3, [r4, #8]
 8005ef6:	3b01      	subs	r3, #1
 8005ef8:	60a3      	str	r3, [r4, #8]
 8005efa:	6823      	ldr	r3, [r4, #0]
 8005efc:	1c5a      	adds	r2, r3, #1
 8005efe:	6022      	str	r2, [r4, #0]
 8005f00:	701e      	strb	r6, [r3, #0]
 8005f02:	6962      	ldr	r2, [r4, #20]
 8005f04:	1c43      	adds	r3, r0, #1
 8005f06:	429a      	cmp	r2, r3
 8005f08:	d004      	beq.n	8005f14 <__swbuf_r+0x6e>
 8005f0a:	89a3      	ldrh	r3, [r4, #12]
 8005f0c:	07db      	lsls	r3, r3, #31
 8005f0e:	d5e1      	bpl.n	8005ed4 <__swbuf_r+0x2e>
 8005f10:	2e0a      	cmp	r6, #10
 8005f12:	d1df      	bne.n	8005ed4 <__swbuf_r+0x2e>
 8005f14:	4621      	mov	r1, r4
 8005f16:	4628      	mov	r0, r5
 8005f18:	f001 fd6a 	bl	80079f0 <_fflush_r>
 8005f1c:	2800      	cmp	r0, #0
 8005f1e:	d0d9      	beq.n	8005ed4 <__swbuf_r+0x2e>
 8005f20:	e7d6      	b.n	8005ed0 <__swbuf_r+0x2a>
	...

08005f24 <__swsetup_r>:
 8005f24:	b538      	push	{r3, r4, r5, lr}
 8005f26:	4b29      	ldr	r3, [pc, #164]	@ (8005fcc <__swsetup_r+0xa8>)
 8005f28:	4605      	mov	r5, r0
 8005f2a:	6818      	ldr	r0, [r3, #0]
 8005f2c:	460c      	mov	r4, r1
 8005f2e:	b118      	cbz	r0, 8005f38 <__swsetup_r+0x14>
 8005f30:	6a03      	ldr	r3, [r0, #32]
 8005f32:	b90b      	cbnz	r3, 8005f38 <__swsetup_r+0x14>
 8005f34:	f7ff fece 	bl	8005cd4 <__sinit>
 8005f38:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005f3c:	0719      	lsls	r1, r3, #28
 8005f3e:	d422      	bmi.n	8005f86 <__swsetup_r+0x62>
 8005f40:	06da      	lsls	r2, r3, #27
 8005f42:	d407      	bmi.n	8005f54 <__swsetup_r+0x30>
 8005f44:	2209      	movs	r2, #9
 8005f46:	602a      	str	r2, [r5, #0]
 8005f48:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005f4c:	81a3      	strh	r3, [r4, #12]
 8005f4e:	f04f 30ff 	mov.w	r0, #4294967295
 8005f52:	e033      	b.n	8005fbc <__swsetup_r+0x98>
 8005f54:	0758      	lsls	r0, r3, #29
 8005f56:	d512      	bpl.n	8005f7e <__swsetup_r+0x5a>
 8005f58:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005f5a:	b141      	cbz	r1, 8005f6e <__swsetup_r+0x4a>
 8005f5c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005f60:	4299      	cmp	r1, r3
 8005f62:	d002      	beq.n	8005f6a <__swsetup_r+0x46>
 8005f64:	4628      	mov	r0, r5
 8005f66:	f000 ff03 	bl	8006d70 <_free_r>
 8005f6a:	2300      	movs	r3, #0
 8005f6c:	6363      	str	r3, [r4, #52]	@ 0x34
 8005f6e:	89a3      	ldrh	r3, [r4, #12]
 8005f70:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005f74:	81a3      	strh	r3, [r4, #12]
 8005f76:	2300      	movs	r3, #0
 8005f78:	6063      	str	r3, [r4, #4]
 8005f7a:	6923      	ldr	r3, [r4, #16]
 8005f7c:	6023      	str	r3, [r4, #0]
 8005f7e:	89a3      	ldrh	r3, [r4, #12]
 8005f80:	f043 0308 	orr.w	r3, r3, #8
 8005f84:	81a3      	strh	r3, [r4, #12]
 8005f86:	6923      	ldr	r3, [r4, #16]
 8005f88:	b94b      	cbnz	r3, 8005f9e <__swsetup_r+0x7a>
 8005f8a:	89a3      	ldrh	r3, [r4, #12]
 8005f8c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005f90:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005f94:	d003      	beq.n	8005f9e <__swsetup_r+0x7a>
 8005f96:	4621      	mov	r1, r4
 8005f98:	4628      	mov	r0, r5
 8005f9a:	f001 fd77 	bl	8007a8c <__smakebuf_r>
 8005f9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005fa2:	f013 0201 	ands.w	r2, r3, #1
 8005fa6:	d00a      	beq.n	8005fbe <__swsetup_r+0x9a>
 8005fa8:	2200      	movs	r2, #0
 8005faa:	60a2      	str	r2, [r4, #8]
 8005fac:	6962      	ldr	r2, [r4, #20]
 8005fae:	4252      	negs	r2, r2
 8005fb0:	61a2      	str	r2, [r4, #24]
 8005fb2:	6922      	ldr	r2, [r4, #16]
 8005fb4:	b942      	cbnz	r2, 8005fc8 <__swsetup_r+0xa4>
 8005fb6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005fba:	d1c5      	bne.n	8005f48 <__swsetup_r+0x24>
 8005fbc:	bd38      	pop	{r3, r4, r5, pc}
 8005fbe:	0799      	lsls	r1, r3, #30
 8005fc0:	bf58      	it	pl
 8005fc2:	6962      	ldrpl	r2, [r4, #20]
 8005fc4:	60a2      	str	r2, [r4, #8]
 8005fc6:	e7f4      	b.n	8005fb2 <__swsetup_r+0x8e>
 8005fc8:	2000      	movs	r0, #0
 8005fca:	e7f7      	b.n	8005fbc <__swsetup_r+0x98>
 8005fcc:	20000018 	.word	0x20000018

08005fd0 <memset>:
 8005fd0:	4402      	add	r2, r0
 8005fd2:	4603      	mov	r3, r0
 8005fd4:	4293      	cmp	r3, r2
 8005fd6:	d100      	bne.n	8005fda <memset+0xa>
 8005fd8:	4770      	bx	lr
 8005fda:	f803 1b01 	strb.w	r1, [r3], #1
 8005fde:	e7f9      	b.n	8005fd4 <memset+0x4>

08005fe0 <_localeconv_r>:
 8005fe0:	4800      	ldr	r0, [pc, #0]	@ (8005fe4 <_localeconv_r+0x4>)
 8005fe2:	4770      	bx	lr
 8005fe4:	20000158 	.word	0x20000158

08005fe8 <_close_r>:
 8005fe8:	b538      	push	{r3, r4, r5, lr}
 8005fea:	4d06      	ldr	r5, [pc, #24]	@ (8006004 <_close_r+0x1c>)
 8005fec:	2300      	movs	r3, #0
 8005fee:	4604      	mov	r4, r0
 8005ff0:	4608      	mov	r0, r1
 8005ff2:	602b      	str	r3, [r5, #0]
 8005ff4:	f7fb fed7 	bl	8001da6 <_close>
 8005ff8:	1c43      	adds	r3, r0, #1
 8005ffa:	d102      	bne.n	8006002 <_close_r+0x1a>
 8005ffc:	682b      	ldr	r3, [r5, #0]
 8005ffe:	b103      	cbz	r3, 8006002 <_close_r+0x1a>
 8006000:	6023      	str	r3, [r4, #0]
 8006002:	bd38      	pop	{r3, r4, r5, pc}
 8006004:	20000474 	.word	0x20000474

08006008 <_lseek_r>:
 8006008:	b538      	push	{r3, r4, r5, lr}
 800600a:	4d07      	ldr	r5, [pc, #28]	@ (8006028 <_lseek_r+0x20>)
 800600c:	4604      	mov	r4, r0
 800600e:	4608      	mov	r0, r1
 8006010:	4611      	mov	r1, r2
 8006012:	2200      	movs	r2, #0
 8006014:	602a      	str	r2, [r5, #0]
 8006016:	461a      	mov	r2, r3
 8006018:	f7fb fee9 	bl	8001dee <_lseek>
 800601c:	1c43      	adds	r3, r0, #1
 800601e:	d102      	bne.n	8006026 <_lseek_r+0x1e>
 8006020:	682b      	ldr	r3, [r5, #0]
 8006022:	b103      	cbz	r3, 8006026 <_lseek_r+0x1e>
 8006024:	6023      	str	r3, [r4, #0]
 8006026:	bd38      	pop	{r3, r4, r5, pc}
 8006028:	20000474 	.word	0x20000474

0800602c <_read_r>:
 800602c:	b538      	push	{r3, r4, r5, lr}
 800602e:	4d07      	ldr	r5, [pc, #28]	@ (800604c <_read_r+0x20>)
 8006030:	4604      	mov	r4, r0
 8006032:	4608      	mov	r0, r1
 8006034:	4611      	mov	r1, r2
 8006036:	2200      	movs	r2, #0
 8006038:	602a      	str	r2, [r5, #0]
 800603a:	461a      	mov	r2, r3
 800603c:	f7fb fe96 	bl	8001d6c <_read>
 8006040:	1c43      	adds	r3, r0, #1
 8006042:	d102      	bne.n	800604a <_read_r+0x1e>
 8006044:	682b      	ldr	r3, [r5, #0]
 8006046:	b103      	cbz	r3, 800604a <_read_r+0x1e>
 8006048:	6023      	str	r3, [r4, #0]
 800604a:	bd38      	pop	{r3, r4, r5, pc}
 800604c:	20000474 	.word	0x20000474

08006050 <_write_r>:
 8006050:	b538      	push	{r3, r4, r5, lr}
 8006052:	4d07      	ldr	r5, [pc, #28]	@ (8006070 <_write_r+0x20>)
 8006054:	4604      	mov	r4, r0
 8006056:	4608      	mov	r0, r1
 8006058:	4611      	mov	r1, r2
 800605a:	2200      	movs	r2, #0
 800605c:	602a      	str	r2, [r5, #0]
 800605e:	461a      	mov	r2, r3
 8006060:	f7fb fad6 	bl	8001610 <_write>
 8006064:	1c43      	adds	r3, r0, #1
 8006066:	d102      	bne.n	800606e <_write_r+0x1e>
 8006068:	682b      	ldr	r3, [r5, #0]
 800606a:	b103      	cbz	r3, 800606e <_write_r+0x1e>
 800606c:	6023      	str	r3, [r4, #0]
 800606e:	bd38      	pop	{r3, r4, r5, pc}
 8006070:	20000474 	.word	0x20000474

08006074 <__errno>:
 8006074:	4b01      	ldr	r3, [pc, #4]	@ (800607c <__errno+0x8>)
 8006076:	6818      	ldr	r0, [r3, #0]
 8006078:	4770      	bx	lr
 800607a:	bf00      	nop
 800607c:	20000018 	.word	0x20000018

08006080 <__libc_init_array>:
 8006080:	b570      	push	{r4, r5, r6, lr}
 8006082:	4d0d      	ldr	r5, [pc, #52]	@ (80060b8 <__libc_init_array+0x38>)
 8006084:	4c0d      	ldr	r4, [pc, #52]	@ (80060bc <__libc_init_array+0x3c>)
 8006086:	1b64      	subs	r4, r4, r5
 8006088:	10a4      	asrs	r4, r4, #2
 800608a:	2600      	movs	r6, #0
 800608c:	42a6      	cmp	r6, r4
 800608e:	d109      	bne.n	80060a4 <__libc_init_array+0x24>
 8006090:	4d0b      	ldr	r5, [pc, #44]	@ (80060c0 <__libc_init_array+0x40>)
 8006092:	4c0c      	ldr	r4, [pc, #48]	@ (80060c4 <__libc_init_array+0x44>)
 8006094:	f001 fe26 	bl	8007ce4 <_init>
 8006098:	1b64      	subs	r4, r4, r5
 800609a:	10a4      	asrs	r4, r4, #2
 800609c:	2600      	movs	r6, #0
 800609e:	42a6      	cmp	r6, r4
 80060a0:	d105      	bne.n	80060ae <__libc_init_array+0x2e>
 80060a2:	bd70      	pop	{r4, r5, r6, pc}
 80060a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80060a8:	4798      	blx	r3
 80060aa:	3601      	adds	r6, #1
 80060ac:	e7ee      	b.n	800608c <__libc_init_array+0xc>
 80060ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80060b2:	4798      	blx	r3
 80060b4:	3601      	adds	r6, #1
 80060b6:	e7f2      	b.n	800609e <__libc_init_array+0x1e>
 80060b8:	08008220 	.word	0x08008220
 80060bc:	08008220 	.word	0x08008220
 80060c0:	08008220 	.word	0x08008220
 80060c4:	08008224 	.word	0x08008224

080060c8 <__retarget_lock_init_recursive>:
 80060c8:	4770      	bx	lr

080060ca <__retarget_lock_acquire_recursive>:
 80060ca:	4770      	bx	lr

080060cc <__retarget_lock_release_recursive>:
 80060cc:	4770      	bx	lr

080060ce <quorem>:
 80060ce:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060d2:	6903      	ldr	r3, [r0, #16]
 80060d4:	690c      	ldr	r4, [r1, #16]
 80060d6:	42a3      	cmp	r3, r4
 80060d8:	4607      	mov	r7, r0
 80060da:	db7e      	blt.n	80061da <quorem+0x10c>
 80060dc:	3c01      	subs	r4, #1
 80060de:	f101 0814 	add.w	r8, r1, #20
 80060e2:	00a3      	lsls	r3, r4, #2
 80060e4:	f100 0514 	add.w	r5, r0, #20
 80060e8:	9300      	str	r3, [sp, #0]
 80060ea:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80060ee:	9301      	str	r3, [sp, #4]
 80060f0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80060f4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80060f8:	3301      	adds	r3, #1
 80060fa:	429a      	cmp	r2, r3
 80060fc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006100:	fbb2 f6f3 	udiv	r6, r2, r3
 8006104:	d32e      	bcc.n	8006164 <quorem+0x96>
 8006106:	f04f 0a00 	mov.w	sl, #0
 800610a:	46c4      	mov	ip, r8
 800610c:	46ae      	mov	lr, r5
 800610e:	46d3      	mov	fp, sl
 8006110:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006114:	b298      	uxth	r0, r3
 8006116:	fb06 a000 	mla	r0, r6, r0, sl
 800611a:	0c02      	lsrs	r2, r0, #16
 800611c:	0c1b      	lsrs	r3, r3, #16
 800611e:	fb06 2303 	mla	r3, r6, r3, r2
 8006122:	f8de 2000 	ldr.w	r2, [lr]
 8006126:	b280      	uxth	r0, r0
 8006128:	b292      	uxth	r2, r2
 800612a:	1a12      	subs	r2, r2, r0
 800612c:	445a      	add	r2, fp
 800612e:	f8de 0000 	ldr.w	r0, [lr]
 8006132:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006136:	b29b      	uxth	r3, r3
 8006138:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800613c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8006140:	b292      	uxth	r2, r2
 8006142:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006146:	45e1      	cmp	r9, ip
 8006148:	f84e 2b04 	str.w	r2, [lr], #4
 800614c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8006150:	d2de      	bcs.n	8006110 <quorem+0x42>
 8006152:	9b00      	ldr	r3, [sp, #0]
 8006154:	58eb      	ldr	r3, [r5, r3]
 8006156:	b92b      	cbnz	r3, 8006164 <quorem+0x96>
 8006158:	9b01      	ldr	r3, [sp, #4]
 800615a:	3b04      	subs	r3, #4
 800615c:	429d      	cmp	r5, r3
 800615e:	461a      	mov	r2, r3
 8006160:	d32f      	bcc.n	80061c2 <quorem+0xf4>
 8006162:	613c      	str	r4, [r7, #16]
 8006164:	4638      	mov	r0, r7
 8006166:	f001 f97d 	bl	8007464 <__mcmp>
 800616a:	2800      	cmp	r0, #0
 800616c:	db25      	blt.n	80061ba <quorem+0xec>
 800616e:	4629      	mov	r1, r5
 8006170:	2000      	movs	r0, #0
 8006172:	f858 2b04 	ldr.w	r2, [r8], #4
 8006176:	f8d1 c000 	ldr.w	ip, [r1]
 800617a:	fa1f fe82 	uxth.w	lr, r2
 800617e:	fa1f f38c 	uxth.w	r3, ip
 8006182:	eba3 030e 	sub.w	r3, r3, lr
 8006186:	4403      	add	r3, r0
 8006188:	0c12      	lsrs	r2, r2, #16
 800618a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800618e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8006192:	b29b      	uxth	r3, r3
 8006194:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006198:	45c1      	cmp	r9, r8
 800619a:	f841 3b04 	str.w	r3, [r1], #4
 800619e:	ea4f 4022 	mov.w	r0, r2, asr #16
 80061a2:	d2e6      	bcs.n	8006172 <quorem+0xa4>
 80061a4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80061a8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80061ac:	b922      	cbnz	r2, 80061b8 <quorem+0xea>
 80061ae:	3b04      	subs	r3, #4
 80061b0:	429d      	cmp	r5, r3
 80061b2:	461a      	mov	r2, r3
 80061b4:	d30b      	bcc.n	80061ce <quorem+0x100>
 80061b6:	613c      	str	r4, [r7, #16]
 80061b8:	3601      	adds	r6, #1
 80061ba:	4630      	mov	r0, r6
 80061bc:	b003      	add	sp, #12
 80061be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061c2:	6812      	ldr	r2, [r2, #0]
 80061c4:	3b04      	subs	r3, #4
 80061c6:	2a00      	cmp	r2, #0
 80061c8:	d1cb      	bne.n	8006162 <quorem+0x94>
 80061ca:	3c01      	subs	r4, #1
 80061cc:	e7c6      	b.n	800615c <quorem+0x8e>
 80061ce:	6812      	ldr	r2, [r2, #0]
 80061d0:	3b04      	subs	r3, #4
 80061d2:	2a00      	cmp	r2, #0
 80061d4:	d1ef      	bne.n	80061b6 <quorem+0xe8>
 80061d6:	3c01      	subs	r4, #1
 80061d8:	e7ea      	b.n	80061b0 <quorem+0xe2>
 80061da:	2000      	movs	r0, #0
 80061dc:	e7ee      	b.n	80061bc <quorem+0xee>
	...

080061e0 <_dtoa_r>:
 80061e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061e4:	69c7      	ldr	r7, [r0, #28]
 80061e6:	b097      	sub	sp, #92	@ 0x5c
 80061e8:	4614      	mov	r4, r2
 80061ea:	461d      	mov	r5, r3
 80061ec:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80061f0:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 80061f2:	4683      	mov	fp, r0
 80061f4:	b97f      	cbnz	r7, 8006216 <_dtoa_r+0x36>
 80061f6:	2010      	movs	r0, #16
 80061f8:	f000 fe04 	bl	8006e04 <malloc>
 80061fc:	4602      	mov	r2, r0
 80061fe:	f8cb 001c 	str.w	r0, [fp, #28]
 8006202:	b920      	cbnz	r0, 800620e <_dtoa_r+0x2e>
 8006204:	4ba8      	ldr	r3, [pc, #672]	@ (80064a8 <_dtoa_r+0x2c8>)
 8006206:	21ef      	movs	r1, #239	@ 0xef
 8006208:	48a8      	ldr	r0, [pc, #672]	@ (80064ac <_dtoa_r+0x2cc>)
 800620a:	f001 fcbb 	bl	8007b84 <__assert_func>
 800620e:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8006212:	6007      	str	r7, [r0, #0]
 8006214:	60c7      	str	r7, [r0, #12]
 8006216:	f8db 301c 	ldr.w	r3, [fp, #28]
 800621a:	6819      	ldr	r1, [r3, #0]
 800621c:	b159      	cbz	r1, 8006236 <_dtoa_r+0x56>
 800621e:	685a      	ldr	r2, [r3, #4]
 8006220:	604a      	str	r2, [r1, #4]
 8006222:	2301      	movs	r3, #1
 8006224:	4093      	lsls	r3, r2
 8006226:	608b      	str	r3, [r1, #8]
 8006228:	4658      	mov	r0, fp
 800622a:	f000 fee1 	bl	8006ff0 <_Bfree>
 800622e:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006232:	2200      	movs	r2, #0
 8006234:	601a      	str	r2, [r3, #0]
 8006236:	1e2b      	subs	r3, r5, #0
 8006238:	bfb9      	ittee	lt
 800623a:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800623e:	9303      	strlt	r3, [sp, #12]
 8006240:	2300      	movge	r3, #0
 8006242:	6033      	strge	r3, [r6, #0]
 8006244:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8006248:	4b99      	ldr	r3, [pc, #612]	@ (80064b0 <_dtoa_r+0x2d0>)
 800624a:	bfbc      	itt	lt
 800624c:	2201      	movlt	r2, #1
 800624e:	6032      	strlt	r2, [r6, #0]
 8006250:	ea33 0308 	bics.w	r3, r3, r8
 8006254:	d112      	bne.n	800627c <_dtoa_r+0x9c>
 8006256:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8006258:	f242 730f 	movw	r3, #9999	@ 0x270f
 800625c:	6013      	str	r3, [r2, #0]
 800625e:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8006262:	4323      	orrs	r3, r4
 8006264:	f000 8551 	beq.w	8006d0a <_dtoa_r+0xb2a>
 8006268:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800626a:	f8df a248 	ldr.w	sl, [pc, #584]	@ 80064b4 <_dtoa_r+0x2d4>
 800626e:	2b00      	cmp	r3, #0
 8006270:	f000 8553 	beq.w	8006d1a <_dtoa_r+0xb3a>
 8006274:	f10a 0303 	add.w	r3, sl, #3
 8006278:	f000 bd4d 	b.w	8006d16 <_dtoa_r+0xb36>
 800627c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006280:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8006284:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006288:	2200      	movs	r2, #0
 800628a:	2300      	movs	r3, #0
 800628c:	f7fa fbf4 	bl	8000a78 <__aeabi_dcmpeq>
 8006290:	4607      	mov	r7, r0
 8006292:	b158      	cbz	r0, 80062ac <_dtoa_r+0xcc>
 8006294:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8006296:	2301      	movs	r3, #1
 8006298:	6013      	str	r3, [r2, #0]
 800629a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800629c:	b113      	cbz	r3, 80062a4 <_dtoa_r+0xc4>
 800629e:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80062a0:	4b85      	ldr	r3, [pc, #532]	@ (80064b8 <_dtoa_r+0x2d8>)
 80062a2:	6013      	str	r3, [r2, #0]
 80062a4:	f8df a214 	ldr.w	sl, [pc, #532]	@ 80064bc <_dtoa_r+0x2dc>
 80062a8:	f000 bd37 	b.w	8006d1a <_dtoa_r+0xb3a>
 80062ac:	ab14      	add	r3, sp, #80	@ 0x50
 80062ae:	9301      	str	r3, [sp, #4]
 80062b0:	ab15      	add	r3, sp, #84	@ 0x54
 80062b2:	9300      	str	r3, [sp, #0]
 80062b4:	4658      	mov	r0, fp
 80062b6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80062ba:	f001 f981 	bl	80075c0 <__d2b>
 80062be:	f3c8 560a 	ubfx	r6, r8, #20, #11
 80062c2:	4681      	mov	r9, r0
 80062c4:	2e00      	cmp	r6, #0
 80062c6:	d076      	beq.n	80063b6 <_dtoa_r+0x1d6>
 80062c8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80062ca:	9712      	str	r7, [sp, #72]	@ 0x48
 80062cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80062d0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80062d4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80062d8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80062dc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80062e0:	4619      	mov	r1, r3
 80062e2:	2200      	movs	r2, #0
 80062e4:	4b76      	ldr	r3, [pc, #472]	@ (80064c0 <_dtoa_r+0x2e0>)
 80062e6:	f7f9 ffa7 	bl	8000238 <__aeabi_dsub>
 80062ea:	a369      	add	r3, pc, #420	@ (adr r3, 8006490 <_dtoa_r+0x2b0>)
 80062ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062f0:	f7fa f95a 	bl	80005a8 <__aeabi_dmul>
 80062f4:	a368      	add	r3, pc, #416	@ (adr r3, 8006498 <_dtoa_r+0x2b8>)
 80062f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062fa:	f7f9 ff9f 	bl	800023c <__adddf3>
 80062fe:	4604      	mov	r4, r0
 8006300:	4630      	mov	r0, r6
 8006302:	460d      	mov	r5, r1
 8006304:	f7fa f8e6 	bl	80004d4 <__aeabi_i2d>
 8006308:	a365      	add	r3, pc, #404	@ (adr r3, 80064a0 <_dtoa_r+0x2c0>)
 800630a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800630e:	f7fa f94b 	bl	80005a8 <__aeabi_dmul>
 8006312:	4602      	mov	r2, r0
 8006314:	460b      	mov	r3, r1
 8006316:	4620      	mov	r0, r4
 8006318:	4629      	mov	r1, r5
 800631a:	f7f9 ff8f 	bl	800023c <__adddf3>
 800631e:	4604      	mov	r4, r0
 8006320:	460d      	mov	r5, r1
 8006322:	f7fa fbf1 	bl	8000b08 <__aeabi_d2iz>
 8006326:	2200      	movs	r2, #0
 8006328:	4607      	mov	r7, r0
 800632a:	2300      	movs	r3, #0
 800632c:	4620      	mov	r0, r4
 800632e:	4629      	mov	r1, r5
 8006330:	f7fa fbac 	bl	8000a8c <__aeabi_dcmplt>
 8006334:	b140      	cbz	r0, 8006348 <_dtoa_r+0x168>
 8006336:	4638      	mov	r0, r7
 8006338:	f7fa f8cc 	bl	80004d4 <__aeabi_i2d>
 800633c:	4622      	mov	r2, r4
 800633e:	462b      	mov	r3, r5
 8006340:	f7fa fb9a 	bl	8000a78 <__aeabi_dcmpeq>
 8006344:	b900      	cbnz	r0, 8006348 <_dtoa_r+0x168>
 8006346:	3f01      	subs	r7, #1
 8006348:	2f16      	cmp	r7, #22
 800634a:	d852      	bhi.n	80063f2 <_dtoa_r+0x212>
 800634c:	4b5d      	ldr	r3, [pc, #372]	@ (80064c4 <_dtoa_r+0x2e4>)
 800634e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006352:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006356:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800635a:	f7fa fb97 	bl	8000a8c <__aeabi_dcmplt>
 800635e:	2800      	cmp	r0, #0
 8006360:	d049      	beq.n	80063f6 <_dtoa_r+0x216>
 8006362:	3f01      	subs	r7, #1
 8006364:	2300      	movs	r3, #0
 8006366:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006368:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800636a:	1b9b      	subs	r3, r3, r6
 800636c:	1e5a      	subs	r2, r3, #1
 800636e:	bf44      	itt	mi
 8006370:	f1c3 0801 	rsbmi	r8, r3, #1
 8006374:	2300      	movmi	r3, #0
 8006376:	9209      	str	r2, [sp, #36]	@ 0x24
 8006378:	bf54      	ite	pl
 800637a:	f04f 0800 	movpl.w	r8, #0
 800637e:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8006380:	2f00      	cmp	r7, #0
 8006382:	db3a      	blt.n	80063fa <_dtoa_r+0x21a>
 8006384:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006386:	970e      	str	r7, [sp, #56]	@ 0x38
 8006388:	443b      	add	r3, r7
 800638a:	9309      	str	r3, [sp, #36]	@ 0x24
 800638c:	2300      	movs	r3, #0
 800638e:	930a      	str	r3, [sp, #40]	@ 0x28
 8006390:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006392:	2b09      	cmp	r3, #9
 8006394:	d865      	bhi.n	8006462 <_dtoa_r+0x282>
 8006396:	2b05      	cmp	r3, #5
 8006398:	bfc4      	itt	gt
 800639a:	3b04      	subgt	r3, #4
 800639c:	9320      	strgt	r3, [sp, #128]	@ 0x80
 800639e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80063a0:	f1a3 0302 	sub.w	r3, r3, #2
 80063a4:	bfcc      	ite	gt
 80063a6:	2400      	movgt	r4, #0
 80063a8:	2401      	movle	r4, #1
 80063aa:	2b03      	cmp	r3, #3
 80063ac:	d864      	bhi.n	8006478 <_dtoa_r+0x298>
 80063ae:	e8df f003 	tbb	[pc, r3]
 80063b2:	382b      	.short	0x382b
 80063b4:	5636      	.short	0x5636
 80063b6:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80063ba:	441e      	add	r6, r3
 80063bc:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80063c0:	2b20      	cmp	r3, #32
 80063c2:	bfc1      	itttt	gt
 80063c4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80063c8:	fa08 f803 	lslgt.w	r8, r8, r3
 80063cc:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80063d0:	fa24 f303 	lsrgt.w	r3, r4, r3
 80063d4:	bfd6      	itet	le
 80063d6:	f1c3 0320 	rsble	r3, r3, #32
 80063da:	ea48 0003 	orrgt.w	r0, r8, r3
 80063de:	fa04 f003 	lslle.w	r0, r4, r3
 80063e2:	f7fa f867 	bl	80004b4 <__aeabi_ui2d>
 80063e6:	2201      	movs	r2, #1
 80063e8:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80063ec:	3e01      	subs	r6, #1
 80063ee:	9212      	str	r2, [sp, #72]	@ 0x48
 80063f0:	e776      	b.n	80062e0 <_dtoa_r+0x100>
 80063f2:	2301      	movs	r3, #1
 80063f4:	e7b7      	b.n	8006366 <_dtoa_r+0x186>
 80063f6:	900f      	str	r0, [sp, #60]	@ 0x3c
 80063f8:	e7b6      	b.n	8006368 <_dtoa_r+0x188>
 80063fa:	427b      	negs	r3, r7
 80063fc:	930a      	str	r3, [sp, #40]	@ 0x28
 80063fe:	2300      	movs	r3, #0
 8006400:	eba8 0807 	sub.w	r8, r8, r7
 8006404:	930e      	str	r3, [sp, #56]	@ 0x38
 8006406:	e7c3      	b.n	8006390 <_dtoa_r+0x1b0>
 8006408:	2300      	movs	r3, #0
 800640a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800640c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800640e:	2b00      	cmp	r3, #0
 8006410:	dc35      	bgt.n	800647e <_dtoa_r+0x29e>
 8006412:	2301      	movs	r3, #1
 8006414:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8006418:	461a      	mov	r2, r3
 800641a:	9221      	str	r2, [sp, #132]	@ 0x84
 800641c:	e00b      	b.n	8006436 <_dtoa_r+0x256>
 800641e:	2301      	movs	r3, #1
 8006420:	e7f3      	b.n	800640a <_dtoa_r+0x22a>
 8006422:	2300      	movs	r3, #0
 8006424:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006426:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006428:	18fb      	adds	r3, r7, r3
 800642a:	9308      	str	r3, [sp, #32]
 800642c:	3301      	adds	r3, #1
 800642e:	2b01      	cmp	r3, #1
 8006430:	9307      	str	r3, [sp, #28]
 8006432:	bfb8      	it	lt
 8006434:	2301      	movlt	r3, #1
 8006436:	f8db 001c 	ldr.w	r0, [fp, #28]
 800643a:	2100      	movs	r1, #0
 800643c:	2204      	movs	r2, #4
 800643e:	f102 0514 	add.w	r5, r2, #20
 8006442:	429d      	cmp	r5, r3
 8006444:	d91f      	bls.n	8006486 <_dtoa_r+0x2a6>
 8006446:	6041      	str	r1, [r0, #4]
 8006448:	4658      	mov	r0, fp
 800644a:	f000 fd91 	bl	8006f70 <_Balloc>
 800644e:	4682      	mov	sl, r0
 8006450:	2800      	cmp	r0, #0
 8006452:	d13b      	bne.n	80064cc <_dtoa_r+0x2ec>
 8006454:	4b1c      	ldr	r3, [pc, #112]	@ (80064c8 <_dtoa_r+0x2e8>)
 8006456:	4602      	mov	r2, r0
 8006458:	f240 11af 	movw	r1, #431	@ 0x1af
 800645c:	e6d4      	b.n	8006208 <_dtoa_r+0x28>
 800645e:	2301      	movs	r3, #1
 8006460:	e7e0      	b.n	8006424 <_dtoa_r+0x244>
 8006462:	2401      	movs	r4, #1
 8006464:	2300      	movs	r3, #0
 8006466:	9320      	str	r3, [sp, #128]	@ 0x80
 8006468:	940b      	str	r4, [sp, #44]	@ 0x2c
 800646a:	f04f 33ff 	mov.w	r3, #4294967295
 800646e:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8006472:	2200      	movs	r2, #0
 8006474:	2312      	movs	r3, #18
 8006476:	e7d0      	b.n	800641a <_dtoa_r+0x23a>
 8006478:	2301      	movs	r3, #1
 800647a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800647c:	e7f5      	b.n	800646a <_dtoa_r+0x28a>
 800647e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006480:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8006484:	e7d7      	b.n	8006436 <_dtoa_r+0x256>
 8006486:	3101      	adds	r1, #1
 8006488:	0052      	lsls	r2, r2, #1
 800648a:	e7d8      	b.n	800643e <_dtoa_r+0x25e>
 800648c:	f3af 8000 	nop.w
 8006490:	636f4361 	.word	0x636f4361
 8006494:	3fd287a7 	.word	0x3fd287a7
 8006498:	8b60c8b3 	.word	0x8b60c8b3
 800649c:	3fc68a28 	.word	0x3fc68a28
 80064a0:	509f79fb 	.word	0x509f79fb
 80064a4:	3fd34413 	.word	0x3fd34413
 80064a8:	08007ee9 	.word	0x08007ee9
 80064ac:	08007f00 	.word	0x08007f00
 80064b0:	7ff00000 	.word	0x7ff00000
 80064b4:	08007ee5 	.word	0x08007ee5
 80064b8:	08007eb9 	.word	0x08007eb9
 80064bc:	08007eb8 	.word	0x08007eb8
 80064c0:	3ff80000 	.word	0x3ff80000
 80064c4:	08007ff8 	.word	0x08007ff8
 80064c8:	08007f58 	.word	0x08007f58
 80064cc:	f8db 301c 	ldr.w	r3, [fp, #28]
 80064d0:	6018      	str	r0, [r3, #0]
 80064d2:	9b07      	ldr	r3, [sp, #28]
 80064d4:	2b0e      	cmp	r3, #14
 80064d6:	f200 80a4 	bhi.w	8006622 <_dtoa_r+0x442>
 80064da:	2c00      	cmp	r4, #0
 80064dc:	f000 80a1 	beq.w	8006622 <_dtoa_r+0x442>
 80064e0:	2f00      	cmp	r7, #0
 80064e2:	dd33      	ble.n	800654c <_dtoa_r+0x36c>
 80064e4:	4b86      	ldr	r3, [pc, #536]	@ (8006700 <_dtoa_r+0x520>)
 80064e6:	f007 020f 	and.w	r2, r7, #15
 80064ea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80064ee:	e9d3 3400 	ldrd	r3, r4, [r3]
 80064f2:	05f8      	lsls	r0, r7, #23
 80064f4:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80064f8:	ea4f 1427 	mov.w	r4, r7, asr #4
 80064fc:	d516      	bpl.n	800652c <_dtoa_r+0x34c>
 80064fe:	4b81      	ldr	r3, [pc, #516]	@ (8006704 <_dtoa_r+0x524>)
 8006500:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006504:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006508:	f7fa f978 	bl	80007fc <__aeabi_ddiv>
 800650c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006510:	f004 040f 	and.w	r4, r4, #15
 8006514:	2603      	movs	r6, #3
 8006516:	4d7b      	ldr	r5, [pc, #492]	@ (8006704 <_dtoa_r+0x524>)
 8006518:	b954      	cbnz	r4, 8006530 <_dtoa_r+0x350>
 800651a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800651e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006522:	f7fa f96b 	bl	80007fc <__aeabi_ddiv>
 8006526:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800652a:	e028      	b.n	800657e <_dtoa_r+0x39e>
 800652c:	2602      	movs	r6, #2
 800652e:	e7f2      	b.n	8006516 <_dtoa_r+0x336>
 8006530:	07e1      	lsls	r1, r4, #31
 8006532:	d508      	bpl.n	8006546 <_dtoa_r+0x366>
 8006534:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006538:	e9d5 2300 	ldrd	r2, r3, [r5]
 800653c:	f7fa f834 	bl	80005a8 <__aeabi_dmul>
 8006540:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006544:	3601      	adds	r6, #1
 8006546:	1064      	asrs	r4, r4, #1
 8006548:	3508      	adds	r5, #8
 800654a:	e7e5      	b.n	8006518 <_dtoa_r+0x338>
 800654c:	f000 80d2 	beq.w	80066f4 <_dtoa_r+0x514>
 8006550:	427c      	negs	r4, r7
 8006552:	4b6b      	ldr	r3, [pc, #428]	@ (8006700 <_dtoa_r+0x520>)
 8006554:	4d6b      	ldr	r5, [pc, #428]	@ (8006704 <_dtoa_r+0x524>)
 8006556:	f004 020f 	and.w	r2, r4, #15
 800655a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800655e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006562:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006566:	f7fa f81f 	bl	80005a8 <__aeabi_dmul>
 800656a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800656e:	1124      	asrs	r4, r4, #4
 8006570:	2300      	movs	r3, #0
 8006572:	2602      	movs	r6, #2
 8006574:	2c00      	cmp	r4, #0
 8006576:	f040 80b2 	bne.w	80066de <_dtoa_r+0x4fe>
 800657a:	2b00      	cmp	r3, #0
 800657c:	d1d3      	bne.n	8006526 <_dtoa_r+0x346>
 800657e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006580:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006584:	2b00      	cmp	r3, #0
 8006586:	f000 80b7 	beq.w	80066f8 <_dtoa_r+0x518>
 800658a:	4b5f      	ldr	r3, [pc, #380]	@ (8006708 <_dtoa_r+0x528>)
 800658c:	2200      	movs	r2, #0
 800658e:	4620      	mov	r0, r4
 8006590:	4629      	mov	r1, r5
 8006592:	f7fa fa7b 	bl	8000a8c <__aeabi_dcmplt>
 8006596:	2800      	cmp	r0, #0
 8006598:	f000 80ae 	beq.w	80066f8 <_dtoa_r+0x518>
 800659c:	9b07      	ldr	r3, [sp, #28]
 800659e:	2b00      	cmp	r3, #0
 80065a0:	f000 80aa 	beq.w	80066f8 <_dtoa_r+0x518>
 80065a4:	9b08      	ldr	r3, [sp, #32]
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	dd37      	ble.n	800661a <_dtoa_r+0x43a>
 80065aa:	1e7b      	subs	r3, r7, #1
 80065ac:	9304      	str	r3, [sp, #16]
 80065ae:	4620      	mov	r0, r4
 80065b0:	4b56      	ldr	r3, [pc, #344]	@ (800670c <_dtoa_r+0x52c>)
 80065b2:	2200      	movs	r2, #0
 80065b4:	4629      	mov	r1, r5
 80065b6:	f7f9 fff7 	bl	80005a8 <__aeabi_dmul>
 80065ba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80065be:	9c08      	ldr	r4, [sp, #32]
 80065c0:	3601      	adds	r6, #1
 80065c2:	4630      	mov	r0, r6
 80065c4:	f7f9 ff86 	bl	80004d4 <__aeabi_i2d>
 80065c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80065cc:	f7f9 ffec 	bl	80005a8 <__aeabi_dmul>
 80065d0:	4b4f      	ldr	r3, [pc, #316]	@ (8006710 <_dtoa_r+0x530>)
 80065d2:	2200      	movs	r2, #0
 80065d4:	f7f9 fe32 	bl	800023c <__adddf3>
 80065d8:	4605      	mov	r5, r0
 80065da:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80065de:	2c00      	cmp	r4, #0
 80065e0:	f040 809a 	bne.w	8006718 <_dtoa_r+0x538>
 80065e4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80065e8:	4b4a      	ldr	r3, [pc, #296]	@ (8006714 <_dtoa_r+0x534>)
 80065ea:	2200      	movs	r2, #0
 80065ec:	f7f9 fe24 	bl	8000238 <__aeabi_dsub>
 80065f0:	4602      	mov	r2, r0
 80065f2:	460b      	mov	r3, r1
 80065f4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80065f8:	462a      	mov	r2, r5
 80065fa:	4633      	mov	r3, r6
 80065fc:	f7fa fa64 	bl	8000ac8 <__aeabi_dcmpgt>
 8006600:	2800      	cmp	r0, #0
 8006602:	f040 828e 	bne.w	8006b22 <_dtoa_r+0x942>
 8006606:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800660a:	462a      	mov	r2, r5
 800660c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006610:	f7fa fa3c 	bl	8000a8c <__aeabi_dcmplt>
 8006614:	2800      	cmp	r0, #0
 8006616:	f040 8127 	bne.w	8006868 <_dtoa_r+0x688>
 800661a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800661e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8006622:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8006624:	2b00      	cmp	r3, #0
 8006626:	f2c0 8163 	blt.w	80068f0 <_dtoa_r+0x710>
 800662a:	2f0e      	cmp	r7, #14
 800662c:	f300 8160 	bgt.w	80068f0 <_dtoa_r+0x710>
 8006630:	4b33      	ldr	r3, [pc, #204]	@ (8006700 <_dtoa_r+0x520>)
 8006632:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006636:	e9d3 3400 	ldrd	r3, r4, [r3]
 800663a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800663e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006640:	2b00      	cmp	r3, #0
 8006642:	da03      	bge.n	800664c <_dtoa_r+0x46c>
 8006644:	9b07      	ldr	r3, [sp, #28]
 8006646:	2b00      	cmp	r3, #0
 8006648:	f340 8100 	ble.w	800684c <_dtoa_r+0x66c>
 800664c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006650:	4656      	mov	r6, sl
 8006652:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006656:	4620      	mov	r0, r4
 8006658:	4629      	mov	r1, r5
 800665a:	f7fa f8cf 	bl	80007fc <__aeabi_ddiv>
 800665e:	f7fa fa53 	bl	8000b08 <__aeabi_d2iz>
 8006662:	4680      	mov	r8, r0
 8006664:	f7f9 ff36 	bl	80004d4 <__aeabi_i2d>
 8006668:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800666c:	f7f9 ff9c 	bl	80005a8 <__aeabi_dmul>
 8006670:	4602      	mov	r2, r0
 8006672:	460b      	mov	r3, r1
 8006674:	4620      	mov	r0, r4
 8006676:	4629      	mov	r1, r5
 8006678:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800667c:	f7f9 fddc 	bl	8000238 <__aeabi_dsub>
 8006680:	f806 4b01 	strb.w	r4, [r6], #1
 8006684:	9d07      	ldr	r5, [sp, #28]
 8006686:	eba6 040a 	sub.w	r4, r6, sl
 800668a:	42a5      	cmp	r5, r4
 800668c:	4602      	mov	r2, r0
 800668e:	460b      	mov	r3, r1
 8006690:	f040 8116 	bne.w	80068c0 <_dtoa_r+0x6e0>
 8006694:	f7f9 fdd2 	bl	800023c <__adddf3>
 8006698:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800669c:	4604      	mov	r4, r0
 800669e:	460d      	mov	r5, r1
 80066a0:	f7fa fa12 	bl	8000ac8 <__aeabi_dcmpgt>
 80066a4:	2800      	cmp	r0, #0
 80066a6:	f040 80f8 	bne.w	800689a <_dtoa_r+0x6ba>
 80066aa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80066ae:	4620      	mov	r0, r4
 80066b0:	4629      	mov	r1, r5
 80066b2:	f7fa f9e1 	bl	8000a78 <__aeabi_dcmpeq>
 80066b6:	b118      	cbz	r0, 80066c0 <_dtoa_r+0x4e0>
 80066b8:	f018 0f01 	tst.w	r8, #1
 80066bc:	f040 80ed 	bne.w	800689a <_dtoa_r+0x6ba>
 80066c0:	4649      	mov	r1, r9
 80066c2:	4658      	mov	r0, fp
 80066c4:	f000 fc94 	bl	8006ff0 <_Bfree>
 80066c8:	2300      	movs	r3, #0
 80066ca:	7033      	strb	r3, [r6, #0]
 80066cc:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80066ce:	3701      	adds	r7, #1
 80066d0:	601f      	str	r7, [r3, #0]
 80066d2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	f000 8320 	beq.w	8006d1a <_dtoa_r+0xb3a>
 80066da:	601e      	str	r6, [r3, #0]
 80066dc:	e31d      	b.n	8006d1a <_dtoa_r+0xb3a>
 80066de:	07e2      	lsls	r2, r4, #31
 80066e0:	d505      	bpl.n	80066ee <_dtoa_r+0x50e>
 80066e2:	e9d5 2300 	ldrd	r2, r3, [r5]
 80066e6:	f7f9 ff5f 	bl	80005a8 <__aeabi_dmul>
 80066ea:	3601      	adds	r6, #1
 80066ec:	2301      	movs	r3, #1
 80066ee:	1064      	asrs	r4, r4, #1
 80066f0:	3508      	adds	r5, #8
 80066f2:	e73f      	b.n	8006574 <_dtoa_r+0x394>
 80066f4:	2602      	movs	r6, #2
 80066f6:	e742      	b.n	800657e <_dtoa_r+0x39e>
 80066f8:	9c07      	ldr	r4, [sp, #28]
 80066fa:	9704      	str	r7, [sp, #16]
 80066fc:	e761      	b.n	80065c2 <_dtoa_r+0x3e2>
 80066fe:	bf00      	nop
 8006700:	08007ff8 	.word	0x08007ff8
 8006704:	08007fd0 	.word	0x08007fd0
 8006708:	3ff00000 	.word	0x3ff00000
 800670c:	40240000 	.word	0x40240000
 8006710:	401c0000 	.word	0x401c0000
 8006714:	40140000 	.word	0x40140000
 8006718:	4b70      	ldr	r3, [pc, #448]	@ (80068dc <_dtoa_r+0x6fc>)
 800671a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800671c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006720:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006724:	4454      	add	r4, sl
 8006726:	2900      	cmp	r1, #0
 8006728:	d045      	beq.n	80067b6 <_dtoa_r+0x5d6>
 800672a:	496d      	ldr	r1, [pc, #436]	@ (80068e0 <_dtoa_r+0x700>)
 800672c:	2000      	movs	r0, #0
 800672e:	f7fa f865 	bl	80007fc <__aeabi_ddiv>
 8006732:	4633      	mov	r3, r6
 8006734:	462a      	mov	r2, r5
 8006736:	f7f9 fd7f 	bl	8000238 <__aeabi_dsub>
 800673a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800673e:	4656      	mov	r6, sl
 8006740:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006744:	f7fa f9e0 	bl	8000b08 <__aeabi_d2iz>
 8006748:	4605      	mov	r5, r0
 800674a:	f7f9 fec3 	bl	80004d4 <__aeabi_i2d>
 800674e:	4602      	mov	r2, r0
 8006750:	460b      	mov	r3, r1
 8006752:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006756:	f7f9 fd6f 	bl	8000238 <__aeabi_dsub>
 800675a:	3530      	adds	r5, #48	@ 0x30
 800675c:	4602      	mov	r2, r0
 800675e:	460b      	mov	r3, r1
 8006760:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006764:	f806 5b01 	strb.w	r5, [r6], #1
 8006768:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800676c:	f7fa f98e 	bl	8000a8c <__aeabi_dcmplt>
 8006770:	2800      	cmp	r0, #0
 8006772:	d163      	bne.n	800683c <_dtoa_r+0x65c>
 8006774:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006778:	495a      	ldr	r1, [pc, #360]	@ (80068e4 <_dtoa_r+0x704>)
 800677a:	2000      	movs	r0, #0
 800677c:	f7f9 fd5c 	bl	8000238 <__aeabi_dsub>
 8006780:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006784:	f7fa f982 	bl	8000a8c <__aeabi_dcmplt>
 8006788:	2800      	cmp	r0, #0
 800678a:	f040 8087 	bne.w	800689c <_dtoa_r+0x6bc>
 800678e:	42a6      	cmp	r6, r4
 8006790:	f43f af43 	beq.w	800661a <_dtoa_r+0x43a>
 8006794:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006798:	4b53      	ldr	r3, [pc, #332]	@ (80068e8 <_dtoa_r+0x708>)
 800679a:	2200      	movs	r2, #0
 800679c:	f7f9 ff04 	bl	80005a8 <__aeabi_dmul>
 80067a0:	4b51      	ldr	r3, [pc, #324]	@ (80068e8 <_dtoa_r+0x708>)
 80067a2:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80067a6:	2200      	movs	r2, #0
 80067a8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80067ac:	f7f9 fefc 	bl	80005a8 <__aeabi_dmul>
 80067b0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80067b4:	e7c4      	b.n	8006740 <_dtoa_r+0x560>
 80067b6:	4631      	mov	r1, r6
 80067b8:	4628      	mov	r0, r5
 80067ba:	f7f9 fef5 	bl	80005a8 <__aeabi_dmul>
 80067be:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80067c2:	9413      	str	r4, [sp, #76]	@ 0x4c
 80067c4:	4656      	mov	r6, sl
 80067c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80067ca:	f7fa f99d 	bl	8000b08 <__aeabi_d2iz>
 80067ce:	4605      	mov	r5, r0
 80067d0:	f7f9 fe80 	bl	80004d4 <__aeabi_i2d>
 80067d4:	4602      	mov	r2, r0
 80067d6:	460b      	mov	r3, r1
 80067d8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80067dc:	f7f9 fd2c 	bl	8000238 <__aeabi_dsub>
 80067e0:	3530      	adds	r5, #48	@ 0x30
 80067e2:	f806 5b01 	strb.w	r5, [r6], #1
 80067e6:	4602      	mov	r2, r0
 80067e8:	460b      	mov	r3, r1
 80067ea:	42a6      	cmp	r6, r4
 80067ec:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80067f0:	f04f 0200 	mov.w	r2, #0
 80067f4:	d124      	bne.n	8006840 <_dtoa_r+0x660>
 80067f6:	4b3a      	ldr	r3, [pc, #232]	@ (80068e0 <_dtoa_r+0x700>)
 80067f8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80067fc:	f7f9 fd1e 	bl	800023c <__adddf3>
 8006800:	4602      	mov	r2, r0
 8006802:	460b      	mov	r3, r1
 8006804:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006808:	f7fa f95e 	bl	8000ac8 <__aeabi_dcmpgt>
 800680c:	2800      	cmp	r0, #0
 800680e:	d145      	bne.n	800689c <_dtoa_r+0x6bc>
 8006810:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006814:	4932      	ldr	r1, [pc, #200]	@ (80068e0 <_dtoa_r+0x700>)
 8006816:	2000      	movs	r0, #0
 8006818:	f7f9 fd0e 	bl	8000238 <__aeabi_dsub>
 800681c:	4602      	mov	r2, r0
 800681e:	460b      	mov	r3, r1
 8006820:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006824:	f7fa f932 	bl	8000a8c <__aeabi_dcmplt>
 8006828:	2800      	cmp	r0, #0
 800682a:	f43f aef6 	beq.w	800661a <_dtoa_r+0x43a>
 800682e:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8006830:	1e73      	subs	r3, r6, #1
 8006832:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006834:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006838:	2b30      	cmp	r3, #48	@ 0x30
 800683a:	d0f8      	beq.n	800682e <_dtoa_r+0x64e>
 800683c:	9f04      	ldr	r7, [sp, #16]
 800683e:	e73f      	b.n	80066c0 <_dtoa_r+0x4e0>
 8006840:	4b29      	ldr	r3, [pc, #164]	@ (80068e8 <_dtoa_r+0x708>)
 8006842:	f7f9 feb1 	bl	80005a8 <__aeabi_dmul>
 8006846:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800684a:	e7bc      	b.n	80067c6 <_dtoa_r+0x5e6>
 800684c:	d10c      	bne.n	8006868 <_dtoa_r+0x688>
 800684e:	4b27      	ldr	r3, [pc, #156]	@ (80068ec <_dtoa_r+0x70c>)
 8006850:	2200      	movs	r2, #0
 8006852:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006856:	f7f9 fea7 	bl	80005a8 <__aeabi_dmul>
 800685a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800685e:	f7fa f929 	bl	8000ab4 <__aeabi_dcmpge>
 8006862:	2800      	cmp	r0, #0
 8006864:	f000 815b 	beq.w	8006b1e <_dtoa_r+0x93e>
 8006868:	2400      	movs	r4, #0
 800686a:	4625      	mov	r5, r4
 800686c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800686e:	43db      	mvns	r3, r3
 8006870:	9304      	str	r3, [sp, #16]
 8006872:	4656      	mov	r6, sl
 8006874:	2700      	movs	r7, #0
 8006876:	4621      	mov	r1, r4
 8006878:	4658      	mov	r0, fp
 800687a:	f000 fbb9 	bl	8006ff0 <_Bfree>
 800687e:	2d00      	cmp	r5, #0
 8006880:	d0dc      	beq.n	800683c <_dtoa_r+0x65c>
 8006882:	b12f      	cbz	r7, 8006890 <_dtoa_r+0x6b0>
 8006884:	42af      	cmp	r7, r5
 8006886:	d003      	beq.n	8006890 <_dtoa_r+0x6b0>
 8006888:	4639      	mov	r1, r7
 800688a:	4658      	mov	r0, fp
 800688c:	f000 fbb0 	bl	8006ff0 <_Bfree>
 8006890:	4629      	mov	r1, r5
 8006892:	4658      	mov	r0, fp
 8006894:	f000 fbac 	bl	8006ff0 <_Bfree>
 8006898:	e7d0      	b.n	800683c <_dtoa_r+0x65c>
 800689a:	9704      	str	r7, [sp, #16]
 800689c:	4633      	mov	r3, r6
 800689e:	461e      	mov	r6, r3
 80068a0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80068a4:	2a39      	cmp	r2, #57	@ 0x39
 80068a6:	d107      	bne.n	80068b8 <_dtoa_r+0x6d8>
 80068a8:	459a      	cmp	sl, r3
 80068aa:	d1f8      	bne.n	800689e <_dtoa_r+0x6be>
 80068ac:	9a04      	ldr	r2, [sp, #16]
 80068ae:	3201      	adds	r2, #1
 80068b0:	9204      	str	r2, [sp, #16]
 80068b2:	2230      	movs	r2, #48	@ 0x30
 80068b4:	f88a 2000 	strb.w	r2, [sl]
 80068b8:	781a      	ldrb	r2, [r3, #0]
 80068ba:	3201      	adds	r2, #1
 80068bc:	701a      	strb	r2, [r3, #0]
 80068be:	e7bd      	b.n	800683c <_dtoa_r+0x65c>
 80068c0:	4b09      	ldr	r3, [pc, #36]	@ (80068e8 <_dtoa_r+0x708>)
 80068c2:	2200      	movs	r2, #0
 80068c4:	f7f9 fe70 	bl	80005a8 <__aeabi_dmul>
 80068c8:	2200      	movs	r2, #0
 80068ca:	2300      	movs	r3, #0
 80068cc:	4604      	mov	r4, r0
 80068ce:	460d      	mov	r5, r1
 80068d0:	f7fa f8d2 	bl	8000a78 <__aeabi_dcmpeq>
 80068d4:	2800      	cmp	r0, #0
 80068d6:	f43f aebc 	beq.w	8006652 <_dtoa_r+0x472>
 80068da:	e6f1      	b.n	80066c0 <_dtoa_r+0x4e0>
 80068dc:	08007ff8 	.word	0x08007ff8
 80068e0:	3fe00000 	.word	0x3fe00000
 80068e4:	3ff00000 	.word	0x3ff00000
 80068e8:	40240000 	.word	0x40240000
 80068ec:	40140000 	.word	0x40140000
 80068f0:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80068f2:	2a00      	cmp	r2, #0
 80068f4:	f000 80db 	beq.w	8006aae <_dtoa_r+0x8ce>
 80068f8:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80068fa:	2a01      	cmp	r2, #1
 80068fc:	f300 80bf 	bgt.w	8006a7e <_dtoa_r+0x89e>
 8006900:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8006902:	2a00      	cmp	r2, #0
 8006904:	f000 80b7 	beq.w	8006a76 <_dtoa_r+0x896>
 8006908:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800690c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800690e:	4646      	mov	r6, r8
 8006910:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006912:	2101      	movs	r1, #1
 8006914:	441a      	add	r2, r3
 8006916:	4658      	mov	r0, fp
 8006918:	4498      	add	r8, r3
 800691a:	9209      	str	r2, [sp, #36]	@ 0x24
 800691c:	f000 fc1c 	bl	8007158 <__i2b>
 8006920:	4605      	mov	r5, r0
 8006922:	b15e      	cbz	r6, 800693c <_dtoa_r+0x75c>
 8006924:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006926:	2b00      	cmp	r3, #0
 8006928:	dd08      	ble.n	800693c <_dtoa_r+0x75c>
 800692a:	42b3      	cmp	r3, r6
 800692c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800692e:	bfa8      	it	ge
 8006930:	4633      	movge	r3, r6
 8006932:	eba8 0803 	sub.w	r8, r8, r3
 8006936:	1af6      	subs	r6, r6, r3
 8006938:	1ad3      	subs	r3, r2, r3
 800693a:	9309      	str	r3, [sp, #36]	@ 0x24
 800693c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800693e:	b1f3      	cbz	r3, 800697e <_dtoa_r+0x79e>
 8006940:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006942:	2b00      	cmp	r3, #0
 8006944:	f000 80b7 	beq.w	8006ab6 <_dtoa_r+0x8d6>
 8006948:	b18c      	cbz	r4, 800696e <_dtoa_r+0x78e>
 800694a:	4629      	mov	r1, r5
 800694c:	4622      	mov	r2, r4
 800694e:	4658      	mov	r0, fp
 8006950:	f000 fcc2 	bl	80072d8 <__pow5mult>
 8006954:	464a      	mov	r2, r9
 8006956:	4601      	mov	r1, r0
 8006958:	4605      	mov	r5, r0
 800695a:	4658      	mov	r0, fp
 800695c:	f000 fc12 	bl	8007184 <__multiply>
 8006960:	4649      	mov	r1, r9
 8006962:	9004      	str	r0, [sp, #16]
 8006964:	4658      	mov	r0, fp
 8006966:	f000 fb43 	bl	8006ff0 <_Bfree>
 800696a:	9b04      	ldr	r3, [sp, #16]
 800696c:	4699      	mov	r9, r3
 800696e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006970:	1b1a      	subs	r2, r3, r4
 8006972:	d004      	beq.n	800697e <_dtoa_r+0x79e>
 8006974:	4649      	mov	r1, r9
 8006976:	4658      	mov	r0, fp
 8006978:	f000 fcae 	bl	80072d8 <__pow5mult>
 800697c:	4681      	mov	r9, r0
 800697e:	2101      	movs	r1, #1
 8006980:	4658      	mov	r0, fp
 8006982:	f000 fbe9 	bl	8007158 <__i2b>
 8006986:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006988:	4604      	mov	r4, r0
 800698a:	2b00      	cmp	r3, #0
 800698c:	f000 81c9 	beq.w	8006d22 <_dtoa_r+0xb42>
 8006990:	461a      	mov	r2, r3
 8006992:	4601      	mov	r1, r0
 8006994:	4658      	mov	r0, fp
 8006996:	f000 fc9f 	bl	80072d8 <__pow5mult>
 800699a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800699c:	2b01      	cmp	r3, #1
 800699e:	4604      	mov	r4, r0
 80069a0:	f300 808f 	bgt.w	8006ac2 <_dtoa_r+0x8e2>
 80069a4:	9b02      	ldr	r3, [sp, #8]
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	f040 8087 	bne.w	8006aba <_dtoa_r+0x8da>
 80069ac:	9b03      	ldr	r3, [sp, #12]
 80069ae:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	f040 8083 	bne.w	8006abe <_dtoa_r+0x8de>
 80069b8:	9b03      	ldr	r3, [sp, #12]
 80069ba:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80069be:	0d1b      	lsrs	r3, r3, #20
 80069c0:	051b      	lsls	r3, r3, #20
 80069c2:	b12b      	cbz	r3, 80069d0 <_dtoa_r+0x7f0>
 80069c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80069c6:	3301      	adds	r3, #1
 80069c8:	9309      	str	r3, [sp, #36]	@ 0x24
 80069ca:	f108 0801 	add.w	r8, r8, #1
 80069ce:	2301      	movs	r3, #1
 80069d0:	930a      	str	r3, [sp, #40]	@ 0x28
 80069d2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	f000 81aa 	beq.w	8006d2e <_dtoa_r+0xb4e>
 80069da:	6923      	ldr	r3, [r4, #16]
 80069dc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80069e0:	6918      	ldr	r0, [r3, #16]
 80069e2:	f000 fb6d 	bl	80070c0 <__hi0bits>
 80069e6:	f1c0 0020 	rsb	r0, r0, #32
 80069ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80069ec:	4418      	add	r0, r3
 80069ee:	f010 001f 	ands.w	r0, r0, #31
 80069f2:	d071      	beq.n	8006ad8 <_dtoa_r+0x8f8>
 80069f4:	f1c0 0320 	rsb	r3, r0, #32
 80069f8:	2b04      	cmp	r3, #4
 80069fa:	dd65      	ble.n	8006ac8 <_dtoa_r+0x8e8>
 80069fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80069fe:	f1c0 001c 	rsb	r0, r0, #28
 8006a02:	4403      	add	r3, r0
 8006a04:	4480      	add	r8, r0
 8006a06:	4406      	add	r6, r0
 8006a08:	9309      	str	r3, [sp, #36]	@ 0x24
 8006a0a:	f1b8 0f00 	cmp.w	r8, #0
 8006a0e:	dd05      	ble.n	8006a1c <_dtoa_r+0x83c>
 8006a10:	4649      	mov	r1, r9
 8006a12:	4642      	mov	r2, r8
 8006a14:	4658      	mov	r0, fp
 8006a16:	f000 fcb9 	bl	800738c <__lshift>
 8006a1a:	4681      	mov	r9, r0
 8006a1c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	dd05      	ble.n	8006a2e <_dtoa_r+0x84e>
 8006a22:	4621      	mov	r1, r4
 8006a24:	461a      	mov	r2, r3
 8006a26:	4658      	mov	r0, fp
 8006a28:	f000 fcb0 	bl	800738c <__lshift>
 8006a2c:	4604      	mov	r4, r0
 8006a2e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d053      	beq.n	8006adc <_dtoa_r+0x8fc>
 8006a34:	4621      	mov	r1, r4
 8006a36:	4648      	mov	r0, r9
 8006a38:	f000 fd14 	bl	8007464 <__mcmp>
 8006a3c:	2800      	cmp	r0, #0
 8006a3e:	da4d      	bge.n	8006adc <_dtoa_r+0x8fc>
 8006a40:	1e7b      	subs	r3, r7, #1
 8006a42:	9304      	str	r3, [sp, #16]
 8006a44:	4649      	mov	r1, r9
 8006a46:	2300      	movs	r3, #0
 8006a48:	220a      	movs	r2, #10
 8006a4a:	4658      	mov	r0, fp
 8006a4c:	f000 faf2 	bl	8007034 <__multadd>
 8006a50:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006a52:	4681      	mov	r9, r0
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	f000 816c 	beq.w	8006d32 <_dtoa_r+0xb52>
 8006a5a:	2300      	movs	r3, #0
 8006a5c:	4629      	mov	r1, r5
 8006a5e:	220a      	movs	r2, #10
 8006a60:	4658      	mov	r0, fp
 8006a62:	f000 fae7 	bl	8007034 <__multadd>
 8006a66:	9b08      	ldr	r3, [sp, #32]
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	4605      	mov	r5, r0
 8006a6c:	dc61      	bgt.n	8006b32 <_dtoa_r+0x952>
 8006a6e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006a70:	2b02      	cmp	r3, #2
 8006a72:	dc3b      	bgt.n	8006aec <_dtoa_r+0x90c>
 8006a74:	e05d      	b.n	8006b32 <_dtoa_r+0x952>
 8006a76:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006a78:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8006a7c:	e746      	b.n	800690c <_dtoa_r+0x72c>
 8006a7e:	9b07      	ldr	r3, [sp, #28]
 8006a80:	1e5c      	subs	r4, r3, #1
 8006a82:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006a84:	42a3      	cmp	r3, r4
 8006a86:	bfbf      	itttt	lt
 8006a88:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8006a8a:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 8006a8c:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8006a8e:	1ae3      	sublt	r3, r4, r3
 8006a90:	bfb4      	ite	lt
 8006a92:	18d2      	addlt	r2, r2, r3
 8006a94:	1b1c      	subge	r4, r3, r4
 8006a96:	9b07      	ldr	r3, [sp, #28]
 8006a98:	bfbc      	itt	lt
 8006a9a:	920e      	strlt	r2, [sp, #56]	@ 0x38
 8006a9c:	2400      	movlt	r4, #0
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	bfb5      	itete	lt
 8006aa2:	eba8 0603 	sublt.w	r6, r8, r3
 8006aa6:	9b07      	ldrge	r3, [sp, #28]
 8006aa8:	2300      	movlt	r3, #0
 8006aaa:	4646      	movge	r6, r8
 8006aac:	e730      	b.n	8006910 <_dtoa_r+0x730>
 8006aae:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006ab0:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8006ab2:	4646      	mov	r6, r8
 8006ab4:	e735      	b.n	8006922 <_dtoa_r+0x742>
 8006ab6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006ab8:	e75c      	b.n	8006974 <_dtoa_r+0x794>
 8006aba:	2300      	movs	r3, #0
 8006abc:	e788      	b.n	80069d0 <_dtoa_r+0x7f0>
 8006abe:	9b02      	ldr	r3, [sp, #8]
 8006ac0:	e786      	b.n	80069d0 <_dtoa_r+0x7f0>
 8006ac2:	2300      	movs	r3, #0
 8006ac4:	930a      	str	r3, [sp, #40]	@ 0x28
 8006ac6:	e788      	b.n	80069da <_dtoa_r+0x7fa>
 8006ac8:	d09f      	beq.n	8006a0a <_dtoa_r+0x82a>
 8006aca:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006acc:	331c      	adds	r3, #28
 8006ace:	441a      	add	r2, r3
 8006ad0:	4498      	add	r8, r3
 8006ad2:	441e      	add	r6, r3
 8006ad4:	9209      	str	r2, [sp, #36]	@ 0x24
 8006ad6:	e798      	b.n	8006a0a <_dtoa_r+0x82a>
 8006ad8:	4603      	mov	r3, r0
 8006ada:	e7f6      	b.n	8006aca <_dtoa_r+0x8ea>
 8006adc:	9b07      	ldr	r3, [sp, #28]
 8006ade:	9704      	str	r7, [sp, #16]
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	dc20      	bgt.n	8006b26 <_dtoa_r+0x946>
 8006ae4:	9308      	str	r3, [sp, #32]
 8006ae6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006ae8:	2b02      	cmp	r3, #2
 8006aea:	dd1e      	ble.n	8006b2a <_dtoa_r+0x94a>
 8006aec:	9b08      	ldr	r3, [sp, #32]
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	f47f aebc 	bne.w	800686c <_dtoa_r+0x68c>
 8006af4:	4621      	mov	r1, r4
 8006af6:	2205      	movs	r2, #5
 8006af8:	4658      	mov	r0, fp
 8006afa:	f000 fa9b 	bl	8007034 <__multadd>
 8006afe:	4601      	mov	r1, r0
 8006b00:	4604      	mov	r4, r0
 8006b02:	4648      	mov	r0, r9
 8006b04:	f000 fcae 	bl	8007464 <__mcmp>
 8006b08:	2800      	cmp	r0, #0
 8006b0a:	f77f aeaf 	ble.w	800686c <_dtoa_r+0x68c>
 8006b0e:	4656      	mov	r6, sl
 8006b10:	2331      	movs	r3, #49	@ 0x31
 8006b12:	f806 3b01 	strb.w	r3, [r6], #1
 8006b16:	9b04      	ldr	r3, [sp, #16]
 8006b18:	3301      	adds	r3, #1
 8006b1a:	9304      	str	r3, [sp, #16]
 8006b1c:	e6aa      	b.n	8006874 <_dtoa_r+0x694>
 8006b1e:	9c07      	ldr	r4, [sp, #28]
 8006b20:	9704      	str	r7, [sp, #16]
 8006b22:	4625      	mov	r5, r4
 8006b24:	e7f3      	b.n	8006b0e <_dtoa_r+0x92e>
 8006b26:	9b07      	ldr	r3, [sp, #28]
 8006b28:	9308      	str	r3, [sp, #32]
 8006b2a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	f000 8104 	beq.w	8006d3a <_dtoa_r+0xb5a>
 8006b32:	2e00      	cmp	r6, #0
 8006b34:	dd05      	ble.n	8006b42 <_dtoa_r+0x962>
 8006b36:	4629      	mov	r1, r5
 8006b38:	4632      	mov	r2, r6
 8006b3a:	4658      	mov	r0, fp
 8006b3c:	f000 fc26 	bl	800738c <__lshift>
 8006b40:	4605      	mov	r5, r0
 8006b42:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d05a      	beq.n	8006bfe <_dtoa_r+0xa1e>
 8006b48:	6869      	ldr	r1, [r5, #4]
 8006b4a:	4658      	mov	r0, fp
 8006b4c:	f000 fa10 	bl	8006f70 <_Balloc>
 8006b50:	4606      	mov	r6, r0
 8006b52:	b928      	cbnz	r0, 8006b60 <_dtoa_r+0x980>
 8006b54:	4b84      	ldr	r3, [pc, #528]	@ (8006d68 <_dtoa_r+0xb88>)
 8006b56:	4602      	mov	r2, r0
 8006b58:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8006b5c:	f7ff bb54 	b.w	8006208 <_dtoa_r+0x28>
 8006b60:	692a      	ldr	r2, [r5, #16]
 8006b62:	3202      	adds	r2, #2
 8006b64:	0092      	lsls	r2, r2, #2
 8006b66:	f105 010c 	add.w	r1, r5, #12
 8006b6a:	300c      	adds	r0, #12
 8006b6c:	f000 fffc 	bl	8007b68 <memcpy>
 8006b70:	2201      	movs	r2, #1
 8006b72:	4631      	mov	r1, r6
 8006b74:	4658      	mov	r0, fp
 8006b76:	f000 fc09 	bl	800738c <__lshift>
 8006b7a:	f10a 0301 	add.w	r3, sl, #1
 8006b7e:	9307      	str	r3, [sp, #28]
 8006b80:	9b08      	ldr	r3, [sp, #32]
 8006b82:	4453      	add	r3, sl
 8006b84:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006b86:	9b02      	ldr	r3, [sp, #8]
 8006b88:	f003 0301 	and.w	r3, r3, #1
 8006b8c:	462f      	mov	r7, r5
 8006b8e:	930a      	str	r3, [sp, #40]	@ 0x28
 8006b90:	4605      	mov	r5, r0
 8006b92:	9b07      	ldr	r3, [sp, #28]
 8006b94:	4621      	mov	r1, r4
 8006b96:	3b01      	subs	r3, #1
 8006b98:	4648      	mov	r0, r9
 8006b9a:	9302      	str	r3, [sp, #8]
 8006b9c:	f7ff fa97 	bl	80060ce <quorem>
 8006ba0:	4639      	mov	r1, r7
 8006ba2:	9008      	str	r0, [sp, #32]
 8006ba4:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006ba8:	4648      	mov	r0, r9
 8006baa:	f000 fc5b 	bl	8007464 <__mcmp>
 8006bae:	462a      	mov	r2, r5
 8006bb0:	9009      	str	r0, [sp, #36]	@ 0x24
 8006bb2:	4621      	mov	r1, r4
 8006bb4:	4658      	mov	r0, fp
 8006bb6:	f000 fc71 	bl	800749c <__mdiff>
 8006bba:	68c2      	ldr	r2, [r0, #12]
 8006bbc:	4606      	mov	r6, r0
 8006bbe:	bb02      	cbnz	r2, 8006c02 <_dtoa_r+0xa22>
 8006bc0:	4601      	mov	r1, r0
 8006bc2:	4648      	mov	r0, r9
 8006bc4:	f000 fc4e 	bl	8007464 <__mcmp>
 8006bc8:	4602      	mov	r2, r0
 8006bca:	4631      	mov	r1, r6
 8006bcc:	4658      	mov	r0, fp
 8006bce:	920c      	str	r2, [sp, #48]	@ 0x30
 8006bd0:	f000 fa0e 	bl	8006ff0 <_Bfree>
 8006bd4:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006bd6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8006bd8:	9e07      	ldr	r6, [sp, #28]
 8006bda:	ea43 0102 	orr.w	r1, r3, r2
 8006bde:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006be0:	4319      	orrs	r1, r3
 8006be2:	d110      	bne.n	8006c06 <_dtoa_r+0xa26>
 8006be4:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006be8:	d029      	beq.n	8006c3e <_dtoa_r+0xa5e>
 8006bea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	dd02      	ble.n	8006bf6 <_dtoa_r+0xa16>
 8006bf0:	9b08      	ldr	r3, [sp, #32]
 8006bf2:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8006bf6:	9b02      	ldr	r3, [sp, #8]
 8006bf8:	f883 8000 	strb.w	r8, [r3]
 8006bfc:	e63b      	b.n	8006876 <_dtoa_r+0x696>
 8006bfe:	4628      	mov	r0, r5
 8006c00:	e7bb      	b.n	8006b7a <_dtoa_r+0x99a>
 8006c02:	2201      	movs	r2, #1
 8006c04:	e7e1      	b.n	8006bca <_dtoa_r+0x9ea>
 8006c06:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	db04      	blt.n	8006c16 <_dtoa_r+0xa36>
 8006c0c:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8006c0e:	430b      	orrs	r3, r1
 8006c10:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006c12:	430b      	orrs	r3, r1
 8006c14:	d120      	bne.n	8006c58 <_dtoa_r+0xa78>
 8006c16:	2a00      	cmp	r2, #0
 8006c18:	dded      	ble.n	8006bf6 <_dtoa_r+0xa16>
 8006c1a:	4649      	mov	r1, r9
 8006c1c:	2201      	movs	r2, #1
 8006c1e:	4658      	mov	r0, fp
 8006c20:	f000 fbb4 	bl	800738c <__lshift>
 8006c24:	4621      	mov	r1, r4
 8006c26:	4681      	mov	r9, r0
 8006c28:	f000 fc1c 	bl	8007464 <__mcmp>
 8006c2c:	2800      	cmp	r0, #0
 8006c2e:	dc03      	bgt.n	8006c38 <_dtoa_r+0xa58>
 8006c30:	d1e1      	bne.n	8006bf6 <_dtoa_r+0xa16>
 8006c32:	f018 0f01 	tst.w	r8, #1
 8006c36:	d0de      	beq.n	8006bf6 <_dtoa_r+0xa16>
 8006c38:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006c3c:	d1d8      	bne.n	8006bf0 <_dtoa_r+0xa10>
 8006c3e:	9a02      	ldr	r2, [sp, #8]
 8006c40:	2339      	movs	r3, #57	@ 0x39
 8006c42:	7013      	strb	r3, [r2, #0]
 8006c44:	4633      	mov	r3, r6
 8006c46:	461e      	mov	r6, r3
 8006c48:	3b01      	subs	r3, #1
 8006c4a:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8006c4e:	2a39      	cmp	r2, #57	@ 0x39
 8006c50:	d052      	beq.n	8006cf8 <_dtoa_r+0xb18>
 8006c52:	3201      	adds	r2, #1
 8006c54:	701a      	strb	r2, [r3, #0]
 8006c56:	e60e      	b.n	8006876 <_dtoa_r+0x696>
 8006c58:	2a00      	cmp	r2, #0
 8006c5a:	dd07      	ble.n	8006c6c <_dtoa_r+0xa8c>
 8006c5c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006c60:	d0ed      	beq.n	8006c3e <_dtoa_r+0xa5e>
 8006c62:	9a02      	ldr	r2, [sp, #8]
 8006c64:	f108 0301 	add.w	r3, r8, #1
 8006c68:	7013      	strb	r3, [r2, #0]
 8006c6a:	e604      	b.n	8006876 <_dtoa_r+0x696>
 8006c6c:	9b07      	ldr	r3, [sp, #28]
 8006c6e:	9a07      	ldr	r2, [sp, #28]
 8006c70:	f803 8c01 	strb.w	r8, [r3, #-1]
 8006c74:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006c76:	4293      	cmp	r3, r2
 8006c78:	d028      	beq.n	8006ccc <_dtoa_r+0xaec>
 8006c7a:	4649      	mov	r1, r9
 8006c7c:	2300      	movs	r3, #0
 8006c7e:	220a      	movs	r2, #10
 8006c80:	4658      	mov	r0, fp
 8006c82:	f000 f9d7 	bl	8007034 <__multadd>
 8006c86:	42af      	cmp	r7, r5
 8006c88:	4681      	mov	r9, r0
 8006c8a:	f04f 0300 	mov.w	r3, #0
 8006c8e:	f04f 020a 	mov.w	r2, #10
 8006c92:	4639      	mov	r1, r7
 8006c94:	4658      	mov	r0, fp
 8006c96:	d107      	bne.n	8006ca8 <_dtoa_r+0xac8>
 8006c98:	f000 f9cc 	bl	8007034 <__multadd>
 8006c9c:	4607      	mov	r7, r0
 8006c9e:	4605      	mov	r5, r0
 8006ca0:	9b07      	ldr	r3, [sp, #28]
 8006ca2:	3301      	adds	r3, #1
 8006ca4:	9307      	str	r3, [sp, #28]
 8006ca6:	e774      	b.n	8006b92 <_dtoa_r+0x9b2>
 8006ca8:	f000 f9c4 	bl	8007034 <__multadd>
 8006cac:	4629      	mov	r1, r5
 8006cae:	4607      	mov	r7, r0
 8006cb0:	2300      	movs	r3, #0
 8006cb2:	220a      	movs	r2, #10
 8006cb4:	4658      	mov	r0, fp
 8006cb6:	f000 f9bd 	bl	8007034 <__multadd>
 8006cba:	4605      	mov	r5, r0
 8006cbc:	e7f0      	b.n	8006ca0 <_dtoa_r+0xac0>
 8006cbe:	9b08      	ldr	r3, [sp, #32]
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	bfcc      	ite	gt
 8006cc4:	461e      	movgt	r6, r3
 8006cc6:	2601      	movle	r6, #1
 8006cc8:	4456      	add	r6, sl
 8006cca:	2700      	movs	r7, #0
 8006ccc:	4649      	mov	r1, r9
 8006cce:	2201      	movs	r2, #1
 8006cd0:	4658      	mov	r0, fp
 8006cd2:	f000 fb5b 	bl	800738c <__lshift>
 8006cd6:	4621      	mov	r1, r4
 8006cd8:	4681      	mov	r9, r0
 8006cda:	f000 fbc3 	bl	8007464 <__mcmp>
 8006cde:	2800      	cmp	r0, #0
 8006ce0:	dcb0      	bgt.n	8006c44 <_dtoa_r+0xa64>
 8006ce2:	d102      	bne.n	8006cea <_dtoa_r+0xb0a>
 8006ce4:	f018 0f01 	tst.w	r8, #1
 8006ce8:	d1ac      	bne.n	8006c44 <_dtoa_r+0xa64>
 8006cea:	4633      	mov	r3, r6
 8006cec:	461e      	mov	r6, r3
 8006cee:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006cf2:	2a30      	cmp	r2, #48	@ 0x30
 8006cf4:	d0fa      	beq.n	8006cec <_dtoa_r+0xb0c>
 8006cf6:	e5be      	b.n	8006876 <_dtoa_r+0x696>
 8006cf8:	459a      	cmp	sl, r3
 8006cfa:	d1a4      	bne.n	8006c46 <_dtoa_r+0xa66>
 8006cfc:	9b04      	ldr	r3, [sp, #16]
 8006cfe:	3301      	adds	r3, #1
 8006d00:	9304      	str	r3, [sp, #16]
 8006d02:	2331      	movs	r3, #49	@ 0x31
 8006d04:	f88a 3000 	strb.w	r3, [sl]
 8006d08:	e5b5      	b.n	8006876 <_dtoa_r+0x696>
 8006d0a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8006d0c:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8006d6c <_dtoa_r+0xb8c>
 8006d10:	b11b      	cbz	r3, 8006d1a <_dtoa_r+0xb3a>
 8006d12:	f10a 0308 	add.w	r3, sl, #8
 8006d16:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8006d18:	6013      	str	r3, [r2, #0]
 8006d1a:	4650      	mov	r0, sl
 8006d1c:	b017      	add	sp, #92	@ 0x5c
 8006d1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d22:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006d24:	2b01      	cmp	r3, #1
 8006d26:	f77f ae3d 	ble.w	80069a4 <_dtoa_r+0x7c4>
 8006d2a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006d2c:	930a      	str	r3, [sp, #40]	@ 0x28
 8006d2e:	2001      	movs	r0, #1
 8006d30:	e65b      	b.n	80069ea <_dtoa_r+0x80a>
 8006d32:	9b08      	ldr	r3, [sp, #32]
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	f77f aed6 	ble.w	8006ae6 <_dtoa_r+0x906>
 8006d3a:	4656      	mov	r6, sl
 8006d3c:	4621      	mov	r1, r4
 8006d3e:	4648      	mov	r0, r9
 8006d40:	f7ff f9c5 	bl	80060ce <quorem>
 8006d44:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006d48:	f806 8b01 	strb.w	r8, [r6], #1
 8006d4c:	9b08      	ldr	r3, [sp, #32]
 8006d4e:	eba6 020a 	sub.w	r2, r6, sl
 8006d52:	4293      	cmp	r3, r2
 8006d54:	ddb3      	ble.n	8006cbe <_dtoa_r+0xade>
 8006d56:	4649      	mov	r1, r9
 8006d58:	2300      	movs	r3, #0
 8006d5a:	220a      	movs	r2, #10
 8006d5c:	4658      	mov	r0, fp
 8006d5e:	f000 f969 	bl	8007034 <__multadd>
 8006d62:	4681      	mov	r9, r0
 8006d64:	e7ea      	b.n	8006d3c <_dtoa_r+0xb5c>
 8006d66:	bf00      	nop
 8006d68:	08007f58 	.word	0x08007f58
 8006d6c:	08007edc 	.word	0x08007edc

08006d70 <_free_r>:
 8006d70:	b538      	push	{r3, r4, r5, lr}
 8006d72:	4605      	mov	r5, r0
 8006d74:	2900      	cmp	r1, #0
 8006d76:	d041      	beq.n	8006dfc <_free_r+0x8c>
 8006d78:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006d7c:	1f0c      	subs	r4, r1, #4
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	bfb8      	it	lt
 8006d82:	18e4      	addlt	r4, r4, r3
 8006d84:	f000 f8e8 	bl	8006f58 <__malloc_lock>
 8006d88:	4a1d      	ldr	r2, [pc, #116]	@ (8006e00 <_free_r+0x90>)
 8006d8a:	6813      	ldr	r3, [r2, #0]
 8006d8c:	b933      	cbnz	r3, 8006d9c <_free_r+0x2c>
 8006d8e:	6063      	str	r3, [r4, #4]
 8006d90:	6014      	str	r4, [r2, #0]
 8006d92:	4628      	mov	r0, r5
 8006d94:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006d98:	f000 b8e4 	b.w	8006f64 <__malloc_unlock>
 8006d9c:	42a3      	cmp	r3, r4
 8006d9e:	d908      	bls.n	8006db2 <_free_r+0x42>
 8006da0:	6820      	ldr	r0, [r4, #0]
 8006da2:	1821      	adds	r1, r4, r0
 8006da4:	428b      	cmp	r3, r1
 8006da6:	bf01      	itttt	eq
 8006da8:	6819      	ldreq	r1, [r3, #0]
 8006daa:	685b      	ldreq	r3, [r3, #4]
 8006dac:	1809      	addeq	r1, r1, r0
 8006dae:	6021      	streq	r1, [r4, #0]
 8006db0:	e7ed      	b.n	8006d8e <_free_r+0x1e>
 8006db2:	461a      	mov	r2, r3
 8006db4:	685b      	ldr	r3, [r3, #4]
 8006db6:	b10b      	cbz	r3, 8006dbc <_free_r+0x4c>
 8006db8:	42a3      	cmp	r3, r4
 8006dba:	d9fa      	bls.n	8006db2 <_free_r+0x42>
 8006dbc:	6811      	ldr	r1, [r2, #0]
 8006dbe:	1850      	adds	r0, r2, r1
 8006dc0:	42a0      	cmp	r0, r4
 8006dc2:	d10b      	bne.n	8006ddc <_free_r+0x6c>
 8006dc4:	6820      	ldr	r0, [r4, #0]
 8006dc6:	4401      	add	r1, r0
 8006dc8:	1850      	adds	r0, r2, r1
 8006dca:	4283      	cmp	r3, r0
 8006dcc:	6011      	str	r1, [r2, #0]
 8006dce:	d1e0      	bne.n	8006d92 <_free_r+0x22>
 8006dd0:	6818      	ldr	r0, [r3, #0]
 8006dd2:	685b      	ldr	r3, [r3, #4]
 8006dd4:	6053      	str	r3, [r2, #4]
 8006dd6:	4408      	add	r0, r1
 8006dd8:	6010      	str	r0, [r2, #0]
 8006dda:	e7da      	b.n	8006d92 <_free_r+0x22>
 8006ddc:	d902      	bls.n	8006de4 <_free_r+0x74>
 8006dde:	230c      	movs	r3, #12
 8006de0:	602b      	str	r3, [r5, #0]
 8006de2:	e7d6      	b.n	8006d92 <_free_r+0x22>
 8006de4:	6820      	ldr	r0, [r4, #0]
 8006de6:	1821      	adds	r1, r4, r0
 8006de8:	428b      	cmp	r3, r1
 8006dea:	bf04      	itt	eq
 8006dec:	6819      	ldreq	r1, [r3, #0]
 8006dee:	685b      	ldreq	r3, [r3, #4]
 8006df0:	6063      	str	r3, [r4, #4]
 8006df2:	bf04      	itt	eq
 8006df4:	1809      	addeq	r1, r1, r0
 8006df6:	6021      	streq	r1, [r4, #0]
 8006df8:	6054      	str	r4, [r2, #4]
 8006dfa:	e7ca      	b.n	8006d92 <_free_r+0x22>
 8006dfc:	bd38      	pop	{r3, r4, r5, pc}
 8006dfe:	bf00      	nop
 8006e00:	20000480 	.word	0x20000480

08006e04 <malloc>:
 8006e04:	4b02      	ldr	r3, [pc, #8]	@ (8006e10 <malloc+0xc>)
 8006e06:	4601      	mov	r1, r0
 8006e08:	6818      	ldr	r0, [r3, #0]
 8006e0a:	f000 b825 	b.w	8006e58 <_malloc_r>
 8006e0e:	bf00      	nop
 8006e10:	20000018 	.word	0x20000018

08006e14 <sbrk_aligned>:
 8006e14:	b570      	push	{r4, r5, r6, lr}
 8006e16:	4e0f      	ldr	r6, [pc, #60]	@ (8006e54 <sbrk_aligned+0x40>)
 8006e18:	460c      	mov	r4, r1
 8006e1a:	6831      	ldr	r1, [r6, #0]
 8006e1c:	4605      	mov	r5, r0
 8006e1e:	b911      	cbnz	r1, 8006e26 <sbrk_aligned+0x12>
 8006e20:	f000 fe92 	bl	8007b48 <_sbrk_r>
 8006e24:	6030      	str	r0, [r6, #0]
 8006e26:	4621      	mov	r1, r4
 8006e28:	4628      	mov	r0, r5
 8006e2a:	f000 fe8d 	bl	8007b48 <_sbrk_r>
 8006e2e:	1c43      	adds	r3, r0, #1
 8006e30:	d103      	bne.n	8006e3a <sbrk_aligned+0x26>
 8006e32:	f04f 34ff 	mov.w	r4, #4294967295
 8006e36:	4620      	mov	r0, r4
 8006e38:	bd70      	pop	{r4, r5, r6, pc}
 8006e3a:	1cc4      	adds	r4, r0, #3
 8006e3c:	f024 0403 	bic.w	r4, r4, #3
 8006e40:	42a0      	cmp	r0, r4
 8006e42:	d0f8      	beq.n	8006e36 <sbrk_aligned+0x22>
 8006e44:	1a21      	subs	r1, r4, r0
 8006e46:	4628      	mov	r0, r5
 8006e48:	f000 fe7e 	bl	8007b48 <_sbrk_r>
 8006e4c:	3001      	adds	r0, #1
 8006e4e:	d1f2      	bne.n	8006e36 <sbrk_aligned+0x22>
 8006e50:	e7ef      	b.n	8006e32 <sbrk_aligned+0x1e>
 8006e52:	bf00      	nop
 8006e54:	2000047c 	.word	0x2000047c

08006e58 <_malloc_r>:
 8006e58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006e5c:	1ccd      	adds	r5, r1, #3
 8006e5e:	f025 0503 	bic.w	r5, r5, #3
 8006e62:	3508      	adds	r5, #8
 8006e64:	2d0c      	cmp	r5, #12
 8006e66:	bf38      	it	cc
 8006e68:	250c      	movcc	r5, #12
 8006e6a:	2d00      	cmp	r5, #0
 8006e6c:	4606      	mov	r6, r0
 8006e6e:	db01      	blt.n	8006e74 <_malloc_r+0x1c>
 8006e70:	42a9      	cmp	r1, r5
 8006e72:	d904      	bls.n	8006e7e <_malloc_r+0x26>
 8006e74:	230c      	movs	r3, #12
 8006e76:	6033      	str	r3, [r6, #0]
 8006e78:	2000      	movs	r0, #0
 8006e7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006e7e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006f54 <_malloc_r+0xfc>
 8006e82:	f000 f869 	bl	8006f58 <__malloc_lock>
 8006e86:	f8d8 3000 	ldr.w	r3, [r8]
 8006e8a:	461c      	mov	r4, r3
 8006e8c:	bb44      	cbnz	r4, 8006ee0 <_malloc_r+0x88>
 8006e8e:	4629      	mov	r1, r5
 8006e90:	4630      	mov	r0, r6
 8006e92:	f7ff ffbf 	bl	8006e14 <sbrk_aligned>
 8006e96:	1c43      	adds	r3, r0, #1
 8006e98:	4604      	mov	r4, r0
 8006e9a:	d158      	bne.n	8006f4e <_malloc_r+0xf6>
 8006e9c:	f8d8 4000 	ldr.w	r4, [r8]
 8006ea0:	4627      	mov	r7, r4
 8006ea2:	2f00      	cmp	r7, #0
 8006ea4:	d143      	bne.n	8006f2e <_malloc_r+0xd6>
 8006ea6:	2c00      	cmp	r4, #0
 8006ea8:	d04b      	beq.n	8006f42 <_malloc_r+0xea>
 8006eaa:	6823      	ldr	r3, [r4, #0]
 8006eac:	4639      	mov	r1, r7
 8006eae:	4630      	mov	r0, r6
 8006eb0:	eb04 0903 	add.w	r9, r4, r3
 8006eb4:	f000 fe48 	bl	8007b48 <_sbrk_r>
 8006eb8:	4581      	cmp	r9, r0
 8006eba:	d142      	bne.n	8006f42 <_malloc_r+0xea>
 8006ebc:	6821      	ldr	r1, [r4, #0]
 8006ebe:	1a6d      	subs	r5, r5, r1
 8006ec0:	4629      	mov	r1, r5
 8006ec2:	4630      	mov	r0, r6
 8006ec4:	f7ff ffa6 	bl	8006e14 <sbrk_aligned>
 8006ec8:	3001      	adds	r0, #1
 8006eca:	d03a      	beq.n	8006f42 <_malloc_r+0xea>
 8006ecc:	6823      	ldr	r3, [r4, #0]
 8006ece:	442b      	add	r3, r5
 8006ed0:	6023      	str	r3, [r4, #0]
 8006ed2:	f8d8 3000 	ldr.w	r3, [r8]
 8006ed6:	685a      	ldr	r2, [r3, #4]
 8006ed8:	bb62      	cbnz	r2, 8006f34 <_malloc_r+0xdc>
 8006eda:	f8c8 7000 	str.w	r7, [r8]
 8006ede:	e00f      	b.n	8006f00 <_malloc_r+0xa8>
 8006ee0:	6822      	ldr	r2, [r4, #0]
 8006ee2:	1b52      	subs	r2, r2, r5
 8006ee4:	d420      	bmi.n	8006f28 <_malloc_r+0xd0>
 8006ee6:	2a0b      	cmp	r2, #11
 8006ee8:	d917      	bls.n	8006f1a <_malloc_r+0xc2>
 8006eea:	1961      	adds	r1, r4, r5
 8006eec:	42a3      	cmp	r3, r4
 8006eee:	6025      	str	r5, [r4, #0]
 8006ef0:	bf18      	it	ne
 8006ef2:	6059      	strne	r1, [r3, #4]
 8006ef4:	6863      	ldr	r3, [r4, #4]
 8006ef6:	bf08      	it	eq
 8006ef8:	f8c8 1000 	streq.w	r1, [r8]
 8006efc:	5162      	str	r2, [r4, r5]
 8006efe:	604b      	str	r3, [r1, #4]
 8006f00:	4630      	mov	r0, r6
 8006f02:	f000 f82f 	bl	8006f64 <__malloc_unlock>
 8006f06:	f104 000b 	add.w	r0, r4, #11
 8006f0a:	1d23      	adds	r3, r4, #4
 8006f0c:	f020 0007 	bic.w	r0, r0, #7
 8006f10:	1ac2      	subs	r2, r0, r3
 8006f12:	bf1c      	itt	ne
 8006f14:	1a1b      	subne	r3, r3, r0
 8006f16:	50a3      	strne	r3, [r4, r2]
 8006f18:	e7af      	b.n	8006e7a <_malloc_r+0x22>
 8006f1a:	6862      	ldr	r2, [r4, #4]
 8006f1c:	42a3      	cmp	r3, r4
 8006f1e:	bf0c      	ite	eq
 8006f20:	f8c8 2000 	streq.w	r2, [r8]
 8006f24:	605a      	strne	r2, [r3, #4]
 8006f26:	e7eb      	b.n	8006f00 <_malloc_r+0xa8>
 8006f28:	4623      	mov	r3, r4
 8006f2a:	6864      	ldr	r4, [r4, #4]
 8006f2c:	e7ae      	b.n	8006e8c <_malloc_r+0x34>
 8006f2e:	463c      	mov	r4, r7
 8006f30:	687f      	ldr	r7, [r7, #4]
 8006f32:	e7b6      	b.n	8006ea2 <_malloc_r+0x4a>
 8006f34:	461a      	mov	r2, r3
 8006f36:	685b      	ldr	r3, [r3, #4]
 8006f38:	42a3      	cmp	r3, r4
 8006f3a:	d1fb      	bne.n	8006f34 <_malloc_r+0xdc>
 8006f3c:	2300      	movs	r3, #0
 8006f3e:	6053      	str	r3, [r2, #4]
 8006f40:	e7de      	b.n	8006f00 <_malloc_r+0xa8>
 8006f42:	230c      	movs	r3, #12
 8006f44:	6033      	str	r3, [r6, #0]
 8006f46:	4630      	mov	r0, r6
 8006f48:	f000 f80c 	bl	8006f64 <__malloc_unlock>
 8006f4c:	e794      	b.n	8006e78 <_malloc_r+0x20>
 8006f4e:	6005      	str	r5, [r0, #0]
 8006f50:	e7d6      	b.n	8006f00 <_malloc_r+0xa8>
 8006f52:	bf00      	nop
 8006f54:	20000480 	.word	0x20000480

08006f58 <__malloc_lock>:
 8006f58:	4801      	ldr	r0, [pc, #4]	@ (8006f60 <__malloc_lock+0x8>)
 8006f5a:	f7ff b8b6 	b.w	80060ca <__retarget_lock_acquire_recursive>
 8006f5e:	bf00      	nop
 8006f60:	20000478 	.word	0x20000478

08006f64 <__malloc_unlock>:
 8006f64:	4801      	ldr	r0, [pc, #4]	@ (8006f6c <__malloc_unlock+0x8>)
 8006f66:	f7ff b8b1 	b.w	80060cc <__retarget_lock_release_recursive>
 8006f6a:	bf00      	nop
 8006f6c:	20000478 	.word	0x20000478

08006f70 <_Balloc>:
 8006f70:	b570      	push	{r4, r5, r6, lr}
 8006f72:	69c6      	ldr	r6, [r0, #28]
 8006f74:	4604      	mov	r4, r0
 8006f76:	460d      	mov	r5, r1
 8006f78:	b976      	cbnz	r6, 8006f98 <_Balloc+0x28>
 8006f7a:	2010      	movs	r0, #16
 8006f7c:	f7ff ff42 	bl	8006e04 <malloc>
 8006f80:	4602      	mov	r2, r0
 8006f82:	61e0      	str	r0, [r4, #28]
 8006f84:	b920      	cbnz	r0, 8006f90 <_Balloc+0x20>
 8006f86:	4b18      	ldr	r3, [pc, #96]	@ (8006fe8 <_Balloc+0x78>)
 8006f88:	4818      	ldr	r0, [pc, #96]	@ (8006fec <_Balloc+0x7c>)
 8006f8a:	216b      	movs	r1, #107	@ 0x6b
 8006f8c:	f000 fdfa 	bl	8007b84 <__assert_func>
 8006f90:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006f94:	6006      	str	r6, [r0, #0]
 8006f96:	60c6      	str	r6, [r0, #12]
 8006f98:	69e6      	ldr	r6, [r4, #28]
 8006f9a:	68f3      	ldr	r3, [r6, #12]
 8006f9c:	b183      	cbz	r3, 8006fc0 <_Balloc+0x50>
 8006f9e:	69e3      	ldr	r3, [r4, #28]
 8006fa0:	68db      	ldr	r3, [r3, #12]
 8006fa2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006fa6:	b9b8      	cbnz	r0, 8006fd8 <_Balloc+0x68>
 8006fa8:	2101      	movs	r1, #1
 8006faa:	fa01 f605 	lsl.w	r6, r1, r5
 8006fae:	1d72      	adds	r2, r6, #5
 8006fb0:	0092      	lsls	r2, r2, #2
 8006fb2:	4620      	mov	r0, r4
 8006fb4:	f000 fe04 	bl	8007bc0 <_calloc_r>
 8006fb8:	b160      	cbz	r0, 8006fd4 <_Balloc+0x64>
 8006fba:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006fbe:	e00e      	b.n	8006fde <_Balloc+0x6e>
 8006fc0:	2221      	movs	r2, #33	@ 0x21
 8006fc2:	2104      	movs	r1, #4
 8006fc4:	4620      	mov	r0, r4
 8006fc6:	f000 fdfb 	bl	8007bc0 <_calloc_r>
 8006fca:	69e3      	ldr	r3, [r4, #28]
 8006fcc:	60f0      	str	r0, [r6, #12]
 8006fce:	68db      	ldr	r3, [r3, #12]
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d1e4      	bne.n	8006f9e <_Balloc+0x2e>
 8006fd4:	2000      	movs	r0, #0
 8006fd6:	bd70      	pop	{r4, r5, r6, pc}
 8006fd8:	6802      	ldr	r2, [r0, #0]
 8006fda:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006fde:	2300      	movs	r3, #0
 8006fe0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006fe4:	e7f7      	b.n	8006fd6 <_Balloc+0x66>
 8006fe6:	bf00      	nop
 8006fe8:	08007ee9 	.word	0x08007ee9
 8006fec:	08007f69 	.word	0x08007f69

08006ff0 <_Bfree>:
 8006ff0:	b570      	push	{r4, r5, r6, lr}
 8006ff2:	69c6      	ldr	r6, [r0, #28]
 8006ff4:	4605      	mov	r5, r0
 8006ff6:	460c      	mov	r4, r1
 8006ff8:	b976      	cbnz	r6, 8007018 <_Bfree+0x28>
 8006ffa:	2010      	movs	r0, #16
 8006ffc:	f7ff ff02 	bl	8006e04 <malloc>
 8007000:	4602      	mov	r2, r0
 8007002:	61e8      	str	r0, [r5, #28]
 8007004:	b920      	cbnz	r0, 8007010 <_Bfree+0x20>
 8007006:	4b09      	ldr	r3, [pc, #36]	@ (800702c <_Bfree+0x3c>)
 8007008:	4809      	ldr	r0, [pc, #36]	@ (8007030 <_Bfree+0x40>)
 800700a:	218f      	movs	r1, #143	@ 0x8f
 800700c:	f000 fdba 	bl	8007b84 <__assert_func>
 8007010:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007014:	6006      	str	r6, [r0, #0]
 8007016:	60c6      	str	r6, [r0, #12]
 8007018:	b13c      	cbz	r4, 800702a <_Bfree+0x3a>
 800701a:	69eb      	ldr	r3, [r5, #28]
 800701c:	6862      	ldr	r2, [r4, #4]
 800701e:	68db      	ldr	r3, [r3, #12]
 8007020:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007024:	6021      	str	r1, [r4, #0]
 8007026:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800702a:	bd70      	pop	{r4, r5, r6, pc}
 800702c:	08007ee9 	.word	0x08007ee9
 8007030:	08007f69 	.word	0x08007f69

08007034 <__multadd>:
 8007034:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007038:	690d      	ldr	r5, [r1, #16]
 800703a:	4607      	mov	r7, r0
 800703c:	460c      	mov	r4, r1
 800703e:	461e      	mov	r6, r3
 8007040:	f101 0c14 	add.w	ip, r1, #20
 8007044:	2000      	movs	r0, #0
 8007046:	f8dc 3000 	ldr.w	r3, [ip]
 800704a:	b299      	uxth	r1, r3
 800704c:	fb02 6101 	mla	r1, r2, r1, r6
 8007050:	0c1e      	lsrs	r6, r3, #16
 8007052:	0c0b      	lsrs	r3, r1, #16
 8007054:	fb02 3306 	mla	r3, r2, r6, r3
 8007058:	b289      	uxth	r1, r1
 800705a:	3001      	adds	r0, #1
 800705c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007060:	4285      	cmp	r5, r0
 8007062:	f84c 1b04 	str.w	r1, [ip], #4
 8007066:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800706a:	dcec      	bgt.n	8007046 <__multadd+0x12>
 800706c:	b30e      	cbz	r6, 80070b2 <__multadd+0x7e>
 800706e:	68a3      	ldr	r3, [r4, #8]
 8007070:	42ab      	cmp	r3, r5
 8007072:	dc19      	bgt.n	80070a8 <__multadd+0x74>
 8007074:	6861      	ldr	r1, [r4, #4]
 8007076:	4638      	mov	r0, r7
 8007078:	3101      	adds	r1, #1
 800707a:	f7ff ff79 	bl	8006f70 <_Balloc>
 800707e:	4680      	mov	r8, r0
 8007080:	b928      	cbnz	r0, 800708e <__multadd+0x5a>
 8007082:	4602      	mov	r2, r0
 8007084:	4b0c      	ldr	r3, [pc, #48]	@ (80070b8 <__multadd+0x84>)
 8007086:	480d      	ldr	r0, [pc, #52]	@ (80070bc <__multadd+0x88>)
 8007088:	21ba      	movs	r1, #186	@ 0xba
 800708a:	f000 fd7b 	bl	8007b84 <__assert_func>
 800708e:	6922      	ldr	r2, [r4, #16]
 8007090:	3202      	adds	r2, #2
 8007092:	f104 010c 	add.w	r1, r4, #12
 8007096:	0092      	lsls	r2, r2, #2
 8007098:	300c      	adds	r0, #12
 800709a:	f000 fd65 	bl	8007b68 <memcpy>
 800709e:	4621      	mov	r1, r4
 80070a0:	4638      	mov	r0, r7
 80070a2:	f7ff ffa5 	bl	8006ff0 <_Bfree>
 80070a6:	4644      	mov	r4, r8
 80070a8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80070ac:	3501      	adds	r5, #1
 80070ae:	615e      	str	r6, [r3, #20]
 80070b0:	6125      	str	r5, [r4, #16]
 80070b2:	4620      	mov	r0, r4
 80070b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80070b8:	08007f58 	.word	0x08007f58
 80070bc:	08007f69 	.word	0x08007f69

080070c0 <__hi0bits>:
 80070c0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80070c4:	4603      	mov	r3, r0
 80070c6:	bf36      	itet	cc
 80070c8:	0403      	lslcc	r3, r0, #16
 80070ca:	2000      	movcs	r0, #0
 80070cc:	2010      	movcc	r0, #16
 80070ce:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80070d2:	bf3c      	itt	cc
 80070d4:	021b      	lslcc	r3, r3, #8
 80070d6:	3008      	addcc	r0, #8
 80070d8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80070dc:	bf3c      	itt	cc
 80070de:	011b      	lslcc	r3, r3, #4
 80070e0:	3004      	addcc	r0, #4
 80070e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80070e6:	bf3c      	itt	cc
 80070e8:	009b      	lslcc	r3, r3, #2
 80070ea:	3002      	addcc	r0, #2
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	db05      	blt.n	80070fc <__hi0bits+0x3c>
 80070f0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80070f4:	f100 0001 	add.w	r0, r0, #1
 80070f8:	bf08      	it	eq
 80070fa:	2020      	moveq	r0, #32
 80070fc:	4770      	bx	lr

080070fe <__lo0bits>:
 80070fe:	6803      	ldr	r3, [r0, #0]
 8007100:	4602      	mov	r2, r0
 8007102:	f013 0007 	ands.w	r0, r3, #7
 8007106:	d00b      	beq.n	8007120 <__lo0bits+0x22>
 8007108:	07d9      	lsls	r1, r3, #31
 800710a:	d421      	bmi.n	8007150 <__lo0bits+0x52>
 800710c:	0798      	lsls	r0, r3, #30
 800710e:	bf49      	itett	mi
 8007110:	085b      	lsrmi	r3, r3, #1
 8007112:	089b      	lsrpl	r3, r3, #2
 8007114:	2001      	movmi	r0, #1
 8007116:	6013      	strmi	r3, [r2, #0]
 8007118:	bf5c      	itt	pl
 800711a:	6013      	strpl	r3, [r2, #0]
 800711c:	2002      	movpl	r0, #2
 800711e:	4770      	bx	lr
 8007120:	b299      	uxth	r1, r3
 8007122:	b909      	cbnz	r1, 8007128 <__lo0bits+0x2a>
 8007124:	0c1b      	lsrs	r3, r3, #16
 8007126:	2010      	movs	r0, #16
 8007128:	b2d9      	uxtb	r1, r3
 800712a:	b909      	cbnz	r1, 8007130 <__lo0bits+0x32>
 800712c:	3008      	adds	r0, #8
 800712e:	0a1b      	lsrs	r3, r3, #8
 8007130:	0719      	lsls	r1, r3, #28
 8007132:	bf04      	itt	eq
 8007134:	091b      	lsreq	r3, r3, #4
 8007136:	3004      	addeq	r0, #4
 8007138:	0799      	lsls	r1, r3, #30
 800713a:	bf04      	itt	eq
 800713c:	089b      	lsreq	r3, r3, #2
 800713e:	3002      	addeq	r0, #2
 8007140:	07d9      	lsls	r1, r3, #31
 8007142:	d403      	bmi.n	800714c <__lo0bits+0x4e>
 8007144:	085b      	lsrs	r3, r3, #1
 8007146:	f100 0001 	add.w	r0, r0, #1
 800714a:	d003      	beq.n	8007154 <__lo0bits+0x56>
 800714c:	6013      	str	r3, [r2, #0]
 800714e:	4770      	bx	lr
 8007150:	2000      	movs	r0, #0
 8007152:	4770      	bx	lr
 8007154:	2020      	movs	r0, #32
 8007156:	4770      	bx	lr

08007158 <__i2b>:
 8007158:	b510      	push	{r4, lr}
 800715a:	460c      	mov	r4, r1
 800715c:	2101      	movs	r1, #1
 800715e:	f7ff ff07 	bl	8006f70 <_Balloc>
 8007162:	4602      	mov	r2, r0
 8007164:	b928      	cbnz	r0, 8007172 <__i2b+0x1a>
 8007166:	4b05      	ldr	r3, [pc, #20]	@ (800717c <__i2b+0x24>)
 8007168:	4805      	ldr	r0, [pc, #20]	@ (8007180 <__i2b+0x28>)
 800716a:	f240 1145 	movw	r1, #325	@ 0x145
 800716e:	f000 fd09 	bl	8007b84 <__assert_func>
 8007172:	2301      	movs	r3, #1
 8007174:	6144      	str	r4, [r0, #20]
 8007176:	6103      	str	r3, [r0, #16]
 8007178:	bd10      	pop	{r4, pc}
 800717a:	bf00      	nop
 800717c:	08007f58 	.word	0x08007f58
 8007180:	08007f69 	.word	0x08007f69

08007184 <__multiply>:
 8007184:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007188:	4614      	mov	r4, r2
 800718a:	690a      	ldr	r2, [r1, #16]
 800718c:	6923      	ldr	r3, [r4, #16]
 800718e:	429a      	cmp	r2, r3
 8007190:	bfa8      	it	ge
 8007192:	4623      	movge	r3, r4
 8007194:	460f      	mov	r7, r1
 8007196:	bfa4      	itt	ge
 8007198:	460c      	movge	r4, r1
 800719a:	461f      	movge	r7, r3
 800719c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80071a0:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80071a4:	68a3      	ldr	r3, [r4, #8]
 80071a6:	6861      	ldr	r1, [r4, #4]
 80071a8:	eb0a 0609 	add.w	r6, sl, r9
 80071ac:	42b3      	cmp	r3, r6
 80071ae:	b085      	sub	sp, #20
 80071b0:	bfb8      	it	lt
 80071b2:	3101      	addlt	r1, #1
 80071b4:	f7ff fedc 	bl	8006f70 <_Balloc>
 80071b8:	b930      	cbnz	r0, 80071c8 <__multiply+0x44>
 80071ba:	4602      	mov	r2, r0
 80071bc:	4b44      	ldr	r3, [pc, #272]	@ (80072d0 <__multiply+0x14c>)
 80071be:	4845      	ldr	r0, [pc, #276]	@ (80072d4 <__multiply+0x150>)
 80071c0:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80071c4:	f000 fcde 	bl	8007b84 <__assert_func>
 80071c8:	f100 0514 	add.w	r5, r0, #20
 80071cc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80071d0:	462b      	mov	r3, r5
 80071d2:	2200      	movs	r2, #0
 80071d4:	4543      	cmp	r3, r8
 80071d6:	d321      	bcc.n	800721c <__multiply+0x98>
 80071d8:	f107 0114 	add.w	r1, r7, #20
 80071dc:	f104 0214 	add.w	r2, r4, #20
 80071e0:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80071e4:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80071e8:	9302      	str	r3, [sp, #8]
 80071ea:	1b13      	subs	r3, r2, r4
 80071ec:	3b15      	subs	r3, #21
 80071ee:	f023 0303 	bic.w	r3, r3, #3
 80071f2:	3304      	adds	r3, #4
 80071f4:	f104 0715 	add.w	r7, r4, #21
 80071f8:	42ba      	cmp	r2, r7
 80071fa:	bf38      	it	cc
 80071fc:	2304      	movcc	r3, #4
 80071fe:	9301      	str	r3, [sp, #4]
 8007200:	9b02      	ldr	r3, [sp, #8]
 8007202:	9103      	str	r1, [sp, #12]
 8007204:	428b      	cmp	r3, r1
 8007206:	d80c      	bhi.n	8007222 <__multiply+0x9e>
 8007208:	2e00      	cmp	r6, #0
 800720a:	dd03      	ble.n	8007214 <__multiply+0x90>
 800720c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007210:	2b00      	cmp	r3, #0
 8007212:	d05a      	beq.n	80072ca <__multiply+0x146>
 8007214:	6106      	str	r6, [r0, #16]
 8007216:	b005      	add	sp, #20
 8007218:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800721c:	f843 2b04 	str.w	r2, [r3], #4
 8007220:	e7d8      	b.n	80071d4 <__multiply+0x50>
 8007222:	f8b1 a000 	ldrh.w	sl, [r1]
 8007226:	f1ba 0f00 	cmp.w	sl, #0
 800722a:	d023      	beq.n	8007274 <__multiply+0xf0>
 800722c:	f104 0e14 	add.w	lr, r4, #20
 8007230:	46a9      	mov	r9, r5
 8007232:	f04f 0c00 	mov.w	ip, #0
 8007236:	f85e 7b04 	ldr.w	r7, [lr], #4
 800723a:	f8d9 3000 	ldr.w	r3, [r9]
 800723e:	fa1f fb87 	uxth.w	fp, r7
 8007242:	b29b      	uxth	r3, r3
 8007244:	fb0a 330b 	mla	r3, sl, fp, r3
 8007248:	4463      	add	r3, ip
 800724a:	f8d9 c000 	ldr.w	ip, [r9]
 800724e:	0c3f      	lsrs	r7, r7, #16
 8007250:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8007254:	fb0a c707 	mla	r7, sl, r7, ip
 8007258:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800725c:	b29b      	uxth	r3, r3
 800725e:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007262:	4572      	cmp	r2, lr
 8007264:	f849 3b04 	str.w	r3, [r9], #4
 8007268:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800726c:	d8e3      	bhi.n	8007236 <__multiply+0xb2>
 800726e:	9b01      	ldr	r3, [sp, #4]
 8007270:	f845 c003 	str.w	ip, [r5, r3]
 8007274:	9b03      	ldr	r3, [sp, #12]
 8007276:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800727a:	3104      	adds	r1, #4
 800727c:	f1b9 0f00 	cmp.w	r9, #0
 8007280:	d021      	beq.n	80072c6 <__multiply+0x142>
 8007282:	682b      	ldr	r3, [r5, #0]
 8007284:	f104 0c14 	add.w	ip, r4, #20
 8007288:	46ae      	mov	lr, r5
 800728a:	f04f 0a00 	mov.w	sl, #0
 800728e:	f8bc b000 	ldrh.w	fp, [ip]
 8007292:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8007296:	fb09 770b 	mla	r7, r9, fp, r7
 800729a:	4457      	add	r7, sl
 800729c:	b29b      	uxth	r3, r3
 800729e:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80072a2:	f84e 3b04 	str.w	r3, [lr], #4
 80072a6:	f85c 3b04 	ldr.w	r3, [ip], #4
 80072aa:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80072ae:	f8be 3000 	ldrh.w	r3, [lr]
 80072b2:	fb09 330a 	mla	r3, r9, sl, r3
 80072b6:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80072ba:	4562      	cmp	r2, ip
 80072bc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80072c0:	d8e5      	bhi.n	800728e <__multiply+0x10a>
 80072c2:	9f01      	ldr	r7, [sp, #4]
 80072c4:	51eb      	str	r3, [r5, r7]
 80072c6:	3504      	adds	r5, #4
 80072c8:	e79a      	b.n	8007200 <__multiply+0x7c>
 80072ca:	3e01      	subs	r6, #1
 80072cc:	e79c      	b.n	8007208 <__multiply+0x84>
 80072ce:	bf00      	nop
 80072d0:	08007f58 	.word	0x08007f58
 80072d4:	08007f69 	.word	0x08007f69

080072d8 <__pow5mult>:
 80072d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80072dc:	4615      	mov	r5, r2
 80072de:	f012 0203 	ands.w	r2, r2, #3
 80072e2:	4607      	mov	r7, r0
 80072e4:	460e      	mov	r6, r1
 80072e6:	d007      	beq.n	80072f8 <__pow5mult+0x20>
 80072e8:	4c25      	ldr	r4, [pc, #148]	@ (8007380 <__pow5mult+0xa8>)
 80072ea:	3a01      	subs	r2, #1
 80072ec:	2300      	movs	r3, #0
 80072ee:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80072f2:	f7ff fe9f 	bl	8007034 <__multadd>
 80072f6:	4606      	mov	r6, r0
 80072f8:	10ad      	asrs	r5, r5, #2
 80072fa:	d03d      	beq.n	8007378 <__pow5mult+0xa0>
 80072fc:	69fc      	ldr	r4, [r7, #28]
 80072fe:	b97c      	cbnz	r4, 8007320 <__pow5mult+0x48>
 8007300:	2010      	movs	r0, #16
 8007302:	f7ff fd7f 	bl	8006e04 <malloc>
 8007306:	4602      	mov	r2, r0
 8007308:	61f8      	str	r0, [r7, #28]
 800730a:	b928      	cbnz	r0, 8007318 <__pow5mult+0x40>
 800730c:	4b1d      	ldr	r3, [pc, #116]	@ (8007384 <__pow5mult+0xac>)
 800730e:	481e      	ldr	r0, [pc, #120]	@ (8007388 <__pow5mult+0xb0>)
 8007310:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8007314:	f000 fc36 	bl	8007b84 <__assert_func>
 8007318:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800731c:	6004      	str	r4, [r0, #0]
 800731e:	60c4      	str	r4, [r0, #12]
 8007320:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8007324:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007328:	b94c      	cbnz	r4, 800733e <__pow5mult+0x66>
 800732a:	f240 2171 	movw	r1, #625	@ 0x271
 800732e:	4638      	mov	r0, r7
 8007330:	f7ff ff12 	bl	8007158 <__i2b>
 8007334:	2300      	movs	r3, #0
 8007336:	f8c8 0008 	str.w	r0, [r8, #8]
 800733a:	4604      	mov	r4, r0
 800733c:	6003      	str	r3, [r0, #0]
 800733e:	f04f 0900 	mov.w	r9, #0
 8007342:	07eb      	lsls	r3, r5, #31
 8007344:	d50a      	bpl.n	800735c <__pow5mult+0x84>
 8007346:	4631      	mov	r1, r6
 8007348:	4622      	mov	r2, r4
 800734a:	4638      	mov	r0, r7
 800734c:	f7ff ff1a 	bl	8007184 <__multiply>
 8007350:	4631      	mov	r1, r6
 8007352:	4680      	mov	r8, r0
 8007354:	4638      	mov	r0, r7
 8007356:	f7ff fe4b 	bl	8006ff0 <_Bfree>
 800735a:	4646      	mov	r6, r8
 800735c:	106d      	asrs	r5, r5, #1
 800735e:	d00b      	beq.n	8007378 <__pow5mult+0xa0>
 8007360:	6820      	ldr	r0, [r4, #0]
 8007362:	b938      	cbnz	r0, 8007374 <__pow5mult+0x9c>
 8007364:	4622      	mov	r2, r4
 8007366:	4621      	mov	r1, r4
 8007368:	4638      	mov	r0, r7
 800736a:	f7ff ff0b 	bl	8007184 <__multiply>
 800736e:	6020      	str	r0, [r4, #0]
 8007370:	f8c0 9000 	str.w	r9, [r0]
 8007374:	4604      	mov	r4, r0
 8007376:	e7e4      	b.n	8007342 <__pow5mult+0x6a>
 8007378:	4630      	mov	r0, r6
 800737a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800737e:	bf00      	nop
 8007380:	08007fc4 	.word	0x08007fc4
 8007384:	08007ee9 	.word	0x08007ee9
 8007388:	08007f69 	.word	0x08007f69

0800738c <__lshift>:
 800738c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007390:	460c      	mov	r4, r1
 8007392:	6849      	ldr	r1, [r1, #4]
 8007394:	6923      	ldr	r3, [r4, #16]
 8007396:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800739a:	68a3      	ldr	r3, [r4, #8]
 800739c:	4607      	mov	r7, r0
 800739e:	4691      	mov	r9, r2
 80073a0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80073a4:	f108 0601 	add.w	r6, r8, #1
 80073a8:	42b3      	cmp	r3, r6
 80073aa:	db0b      	blt.n	80073c4 <__lshift+0x38>
 80073ac:	4638      	mov	r0, r7
 80073ae:	f7ff fddf 	bl	8006f70 <_Balloc>
 80073b2:	4605      	mov	r5, r0
 80073b4:	b948      	cbnz	r0, 80073ca <__lshift+0x3e>
 80073b6:	4602      	mov	r2, r0
 80073b8:	4b28      	ldr	r3, [pc, #160]	@ (800745c <__lshift+0xd0>)
 80073ba:	4829      	ldr	r0, [pc, #164]	@ (8007460 <__lshift+0xd4>)
 80073bc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80073c0:	f000 fbe0 	bl	8007b84 <__assert_func>
 80073c4:	3101      	adds	r1, #1
 80073c6:	005b      	lsls	r3, r3, #1
 80073c8:	e7ee      	b.n	80073a8 <__lshift+0x1c>
 80073ca:	2300      	movs	r3, #0
 80073cc:	f100 0114 	add.w	r1, r0, #20
 80073d0:	f100 0210 	add.w	r2, r0, #16
 80073d4:	4618      	mov	r0, r3
 80073d6:	4553      	cmp	r3, sl
 80073d8:	db33      	blt.n	8007442 <__lshift+0xb6>
 80073da:	6920      	ldr	r0, [r4, #16]
 80073dc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80073e0:	f104 0314 	add.w	r3, r4, #20
 80073e4:	f019 091f 	ands.w	r9, r9, #31
 80073e8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80073ec:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80073f0:	d02b      	beq.n	800744a <__lshift+0xbe>
 80073f2:	f1c9 0e20 	rsb	lr, r9, #32
 80073f6:	468a      	mov	sl, r1
 80073f8:	2200      	movs	r2, #0
 80073fa:	6818      	ldr	r0, [r3, #0]
 80073fc:	fa00 f009 	lsl.w	r0, r0, r9
 8007400:	4310      	orrs	r0, r2
 8007402:	f84a 0b04 	str.w	r0, [sl], #4
 8007406:	f853 2b04 	ldr.w	r2, [r3], #4
 800740a:	459c      	cmp	ip, r3
 800740c:	fa22 f20e 	lsr.w	r2, r2, lr
 8007410:	d8f3      	bhi.n	80073fa <__lshift+0x6e>
 8007412:	ebac 0304 	sub.w	r3, ip, r4
 8007416:	3b15      	subs	r3, #21
 8007418:	f023 0303 	bic.w	r3, r3, #3
 800741c:	3304      	adds	r3, #4
 800741e:	f104 0015 	add.w	r0, r4, #21
 8007422:	4584      	cmp	ip, r0
 8007424:	bf38      	it	cc
 8007426:	2304      	movcc	r3, #4
 8007428:	50ca      	str	r2, [r1, r3]
 800742a:	b10a      	cbz	r2, 8007430 <__lshift+0xa4>
 800742c:	f108 0602 	add.w	r6, r8, #2
 8007430:	3e01      	subs	r6, #1
 8007432:	4638      	mov	r0, r7
 8007434:	612e      	str	r6, [r5, #16]
 8007436:	4621      	mov	r1, r4
 8007438:	f7ff fdda 	bl	8006ff0 <_Bfree>
 800743c:	4628      	mov	r0, r5
 800743e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007442:	f842 0f04 	str.w	r0, [r2, #4]!
 8007446:	3301      	adds	r3, #1
 8007448:	e7c5      	b.n	80073d6 <__lshift+0x4a>
 800744a:	3904      	subs	r1, #4
 800744c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007450:	f841 2f04 	str.w	r2, [r1, #4]!
 8007454:	459c      	cmp	ip, r3
 8007456:	d8f9      	bhi.n	800744c <__lshift+0xc0>
 8007458:	e7ea      	b.n	8007430 <__lshift+0xa4>
 800745a:	bf00      	nop
 800745c:	08007f58 	.word	0x08007f58
 8007460:	08007f69 	.word	0x08007f69

08007464 <__mcmp>:
 8007464:	690a      	ldr	r2, [r1, #16]
 8007466:	4603      	mov	r3, r0
 8007468:	6900      	ldr	r0, [r0, #16]
 800746a:	1a80      	subs	r0, r0, r2
 800746c:	b530      	push	{r4, r5, lr}
 800746e:	d10e      	bne.n	800748e <__mcmp+0x2a>
 8007470:	3314      	adds	r3, #20
 8007472:	3114      	adds	r1, #20
 8007474:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007478:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800747c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007480:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007484:	4295      	cmp	r5, r2
 8007486:	d003      	beq.n	8007490 <__mcmp+0x2c>
 8007488:	d205      	bcs.n	8007496 <__mcmp+0x32>
 800748a:	f04f 30ff 	mov.w	r0, #4294967295
 800748e:	bd30      	pop	{r4, r5, pc}
 8007490:	42a3      	cmp	r3, r4
 8007492:	d3f3      	bcc.n	800747c <__mcmp+0x18>
 8007494:	e7fb      	b.n	800748e <__mcmp+0x2a>
 8007496:	2001      	movs	r0, #1
 8007498:	e7f9      	b.n	800748e <__mcmp+0x2a>
	...

0800749c <__mdiff>:
 800749c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074a0:	4689      	mov	r9, r1
 80074a2:	4606      	mov	r6, r0
 80074a4:	4611      	mov	r1, r2
 80074a6:	4648      	mov	r0, r9
 80074a8:	4614      	mov	r4, r2
 80074aa:	f7ff ffdb 	bl	8007464 <__mcmp>
 80074ae:	1e05      	subs	r5, r0, #0
 80074b0:	d112      	bne.n	80074d8 <__mdiff+0x3c>
 80074b2:	4629      	mov	r1, r5
 80074b4:	4630      	mov	r0, r6
 80074b6:	f7ff fd5b 	bl	8006f70 <_Balloc>
 80074ba:	4602      	mov	r2, r0
 80074bc:	b928      	cbnz	r0, 80074ca <__mdiff+0x2e>
 80074be:	4b3e      	ldr	r3, [pc, #248]	@ (80075b8 <__mdiff+0x11c>)
 80074c0:	f240 2137 	movw	r1, #567	@ 0x237
 80074c4:	483d      	ldr	r0, [pc, #244]	@ (80075bc <__mdiff+0x120>)
 80074c6:	f000 fb5d 	bl	8007b84 <__assert_func>
 80074ca:	2301      	movs	r3, #1
 80074cc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80074d0:	4610      	mov	r0, r2
 80074d2:	b003      	add	sp, #12
 80074d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074d8:	bfbc      	itt	lt
 80074da:	464b      	movlt	r3, r9
 80074dc:	46a1      	movlt	r9, r4
 80074de:	4630      	mov	r0, r6
 80074e0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80074e4:	bfba      	itte	lt
 80074e6:	461c      	movlt	r4, r3
 80074e8:	2501      	movlt	r5, #1
 80074ea:	2500      	movge	r5, #0
 80074ec:	f7ff fd40 	bl	8006f70 <_Balloc>
 80074f0:	4602      	mov	r2, r0
 80074f2:	b918      	cbnz	r0, 80074fc <__mdiff+0x60>
 80074f4:	4b30      	ldr	r3, [pc, #192]	@ (80075b8 <__mdiff+0x11c>)
 80074f6:	f240 2145 	movw	r1, #581	@ 0x245
 80074fa:	e7e3      	b.n	80074c4 <__mdiff+0x28>
 80074fc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8007500:	6926      	ldr	r6, [r4, #16]
 8007502:	60c5      	str	r5, [r0, #12]
 8007504:	f109 0310 	add.w	r3, r9, #16
 8007508:	f109 0514 	add.w	r5, r9, #20
 800750c:	f104 0e14 	add.w	lr, r4, #20
 8007510:	f100 0b14 	add.w	fp, r0, #20
 8007514:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8007518:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800751c:	9301      	str	r3, [sp, #4]
 800751e:	46d9      	mov	r9, fp
 8007520:	f04f 0c00 	mov.w	ip, #0
 8007524:	9b01      	ldr	r3, [sp, #4]
 8007526:	f85e 0b04 	ldr.w	r0, [lr], #4
 800752a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800752e:	9301      	str	r3, [sp, #4]
 8007530:	b281      	uxth	r1, r0
 8007532:	fa1f f38a 	uxth.w	r3, sl
 8007536:	1a5b      	subs	r3, r3, r1
 8007538:	0c00      	lsrs	r0, r0, #16
 800753a:	4463      	add	r3, ip
 800753c:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8007540:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8007544:	b29b      	uxth	r3, r3
 8007546:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800754a:	4576      	cmp	r6, lr
 800754c:	f849 3b04 	str.w	r3, [r9], #4
 8007550:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007554:	d8e6      	bhi.n	8007524 <__mdiff+0x88>
 8007556:	1b33      	subs	r3, r6, r4
 8007558:	3b15      	subs	r3, #21
 800755a:	f023 0303 	bic.w	r3, r3, #3
 800755e:	3415      	adds	r4, #21
 8007560:	3304      	adds	r3, #4
 8007562:	42a6      	cmp	r6, r4
 8007564:	bf38      	it	cc
 8007566:	2304      	movcc	r3, #4
 8007568:	441d      	add	r5, r3
 800756a:	445b      	add	r3, fp
 800756c:	461e      	mov	r6, r3
 800756e:	462c      	mov	r4, r5
 8007570:	4544      	cmp	r4, r8
 8007572:	d30e      	bcc.n	8007592 <__mdiff+0xf6>
 8007574:	f108 0103 	add.w	r1, r8, #3
 8007578:	1b49      	subs	r1, r1, r5
 800757a:	f021 0103 	bic.w	r1, r1, #3
 800757e:	3d03      	subs	r5, #3
 8007580:	45a8      	cmp	r8, r5
 8007582:	bf38      	it	cc
 8007584:	2100      	movcc	r1, #0
 8007586:	440b      	add	r3, r1
 8007588:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800758c:	b191      	cbz	r1, 80075b4 <__mdiff+0x118>
 800758e:	6117      	str	r7, [r2, #16]
 8007590:	e79e      	b.n	80074d0 <__mdiff+0x34>
 8007592:	f854 1b04 	ldr.w	r1, [r4], #4
 8007596:	46e6      	mov	lr, ip
 8007598:	0c08      	lsrs	r0, r1, #16
 800759a:	fa1c fc81 	uxtah	ip, ip, r1
 800759e:	4471      	add	r1, lr
 80075a0:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80075a4:	b289      	uxth	r1, r1
 80075a6:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80075aa:	f846 1b04 	str.w	r1, [r6], #4
 80075ae:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80075b2:	e7dd      	b.n	8007570 <__mdiff+0xd4>
 80075b4:	3f01      	subs	r7, #1
 80075b6:	e7e7      	b.n	8007588 <__mdiff+0xec>
 80075b8:	08007f58 	.word	0x08007f58
 80075bc:	08007f69 	.word	0x08007f69

080075c0 <__d2b>:
 80075c0:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 80075c4:	2101      	movs	r1, #1
 80075c6:	9e08      	ldr	r6, [sp, #32]
 80075c8:	4690      	mov	r8, r2
 80075ca:	4699      	mov	r9, r3
 80075cc:	f7ff fcd0 	bl	8006f70 <_Balloc>
 80075d0:	4604      	mov	r4, r0
 80075d2:	b930      	cbnz	r0, 80075e2 <__d2b+0x22>
 80075d4:	4602      	mov	r2, r0
 80075d6:	4b24      	ldr	r3, [pc, #144]	@ (8007668 <__d2b+0xa8>)
 80075d8:	4824      	ldr	r0, [pc, #144]	@ (800766c <__d2b+0xac>)
 80075da:	f240 310f 	movw	r1, #783	@ 0x30f
 80075de:	f000 fad1 	bl	8007b84 <__assert_func>
 80075e2:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80075e6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80075ea:	b10d      	cbz	r5, 80075f0 <__d2b+0x30>
 80075ec:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80075f0:	9301      	str	r3, [sp, #4]
 80075f2:	f1b8 0300 	subs.w	r3, r8, #0
 80075f6:	d024      	beq.n	8007642 <__d2b+0x82>
 80075f8:	4668      	mov	r0, sp
 80075fa:	9300      	str	r3, [sp, #0]
 80075fc:	f7ff fd7f 	bl	80070fe <__lo0bits>
 8007600:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007604:	b1d8      	cbz	r0, 800763e <__d2b+0x7e>
 8007606:	f1c0 0320 	rsb	r3, r0, #32
 800760a:	fa02 f303 	lsl.w	r3, r2, r3
 800760e:	430b      	orrs	r3, r1
 8007610:	40c2      	lsrs	r2, r0
 8007612:	6163      	str	r3, [r4, #20]
 8007614:	9201      	str	r2, [sp, #4]
 8007616:	9b01      	ldr	r3, [sp, #4]
 8007618:	61a3      	str	r3, [r4, #24]
 800761a:	2b00      	cmp	r3, #0
 800761c:	bf0c      	ite	eq
 800761e:	2201      	moveq	r2, #1
 8007620:	2202      	movne	r2, #2
 8007622:	6122      	str	r2, [r4, #16]
 8007624:	b1ad      	cbz	r5, 8007652 <__d2b+0x92>
 8007626:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800762a:	4405      	add	r5, r0
 800762c:	6035      	str	r5, [r6, #0]
 800762e:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8007632:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007634:	6018      	str	r0, [r3, #0]
 8007636:	4620      	mov	r0, r4
 8007638:	b002      	add	sp, #8
 800763a:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800763e:	6161      	str	r1, [r4, #20]
 8007640:	e7e9      	b.n	8007616 <__d2b+0x56>
 8007642:	a801      	add	r0, sp, #4
 8007644:	f7ff fd5b 	bl	80070fe <__lo0bits>
 8007648:	9b01      	ldr	r3, [sp, #4]
 800764a:	6163      	str	r3, [r4, #20]
 800764c:	3020      	adds	r0, #32
 800764e:	2201      	movs	r2, #1
 8007650:	e7e7      	b.n	8007622 <__d2b+0x62>
 8007652:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007656:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800765a:	6030      	str	r0, [r6, #0]
 800765c:	6918      	ldr	r0, [r3, #16]
 800765e:	f7ff fd2f 	bl	80070c0 <__hi0bits>
 8007662:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007666:	e7e4      	b.n	8007632 <__d2b+0x72>
 8007668:	08007f58 	.word	0x08007f58
 800766c:	08007f69 	.word	0x08007f69

08007670 <__sfputc_r>:
 8007670:	6893      	ldr	r3, [r2, #8]
 8007672:	3b01      	subs	r3, #1
 8007674:	2b00      	cmp	r3, #0
 8007676:	b410      	push	{r4}
 8007678:	6093      	str	r3, [r2, #8]
 800767a:	da07      	bge.n	800768c <__sfputc_r+0x1c>
 800767c:	6994      	ldr	r4, [r2, #24]
 800767e:	42a3      	cmp	r3, r4
 8007680:	db01      	blt.n	8007686 <__sfputc_r+0x16>
 8007682:	290a      	cmp	r1, #10
 8007684:	d102      	bne.n	800768c <__sfputc_r+0x1c>
 8007686:	bc10      	pop	{r4}
 8007688:	f7fe bc0d 	b.w	8005ea6 <__swbuf_r>
 800768c:	6813      	ldr	r3, [r2, #0]
 800768e:	1c58      	adds	r0, r3, #1
 8007690:	6010      	str	r0, [r2, #0]
 8007692:	7019      	strb	r1, [r3, #0]
 8007694:	4608      	mov	r0, r1
 8007696:	bc10      	pop	{r4}
 8007698:	4770      	bx	lr

0800769a <__sfputs_r>:
 800769a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800769c:	4606      	mov	r6, r0
 800769e:	460f      	mov	r7, r1
 80076a0:	4614      	mov	r4, r2
 80076a2:	18d5      	adds	r5, r2, r3
 80076a4:	42ac      	cmp	r4, r5
 80076a6:	d101      	bne.n	80076ac <__sfputs_r+0x12>
 80076a8:	2000      	movs	r0, #0
 80076aa:	e007      	b.n	80076bc <__sfputs_r+0x22>
 80076ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80076b0:	463a      	mov	r2, r7
 80076b2:	4630      	mov	r0, r6
 80076b4:	f7ff ffdc 	bl	8007670 <__sfputc_r>
 80076b8:	1c43      	adds	r3, r0, #1
 80076ba:	d1f3      	bne.n	80076a4 <__sfputs_r+0xa>
 80076bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080076c0 <_vfiprintf_r>:
 80076c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076c4:	460d      	mov	r5, r1
 80076c6:	b09d      	sub	sp, #116	@ 0x74
 80076c8:	4614      	mov	r4, r2
 80076ca:	4698      	mov	r8, r3
 80076cc:	4606      	mov	r6, r0
 80076ce:	b118      	cbz	r0, 80076d8 <_vfiprintf_r+0x18>
 80076d0:	6a03      	ldr	r3, [r0, #32]
 80076d2:	b90b      	cbnz	r3, 80076d8 <_vfiprintf_r+0x18>
 80076d4:	f7fe fafe 	bl	8005cd4 <__sinit>
 80076d8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80076da:	07d9      	lsls	r1, r3, #31
 80076dc:	d405      	bmi.n	80076ea <_vfiprintf_r+0x2a>
 80076de:	89ab      	ldrh	r3, [r5, #12]
 80076e0:	059a      	lsls	r2, r3, #22
 80076e2:	d402      	bmi.n	80076ea <_vfiprintf_r+0x2a>
 80076e4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80076e6:	f7fe fcf0 	bl	80060ca <__retarget_lock_acquire_recursive>
 80076ea:	89ab      	ldrh	r3, [r5, #12]
 80076ec:	071b      	lsls	r3, r3, #28
 80076ee:	d501      	bpl.n	80076f4 <_vfiprintf_r+0x34>
 80076f0:	692b      	ldr	r3, [r5, #16]
 80076f2:	b99b      	cbnz	r3, 800771c <_vfiprintf_r+0x5c>
 80076f4:	4629      	mov	r1, r5
 80076f6:	4630      	mov	r0, r6
 80076f8:	f7fe fc14 	bl	8005f24 <__swsetup_r>
 80076fc:	b170      	cbz	r0, 800771c <_vfiprintf_r+0x5c>
 80076fe:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007700:	07dc      	lsls	r4, r3, #31
 8007702:	d504      	bpl.n	800770e <_vfiprintf_r+0x4e>
 8007704:	f04f 30ff 	mov.w	r0, #4294967295
 8007708:	b01d      	add	sp, #116	@ 0x74
 800770a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800770e:	89ab      	ldrh	r3, [r5, #12]
 8007710:	0598      	lsls	r0, r3, #22
 8007712:	d4f7      	bmi.n	8007704 <_vfiprintf_r+0x44>
 8007714:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007716:	f7fe fcd9 	bl	80060cc <__retarget_lock_release_recursive>
 800771a:	e7f3      	b.n	8007704 <_vfiprintf_r+0x44>
 800771c:	2300      	movs	r3, #0
 800771e:	9309      	str	r3, [sp, #36]	@ 0x24
 8007720:	2320      	movs	r3, #32
 8007722:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007726:	f8cd 800c 	str.w	r8, [sp, #12]
 800772a:	2330      	movs	r3, #48	@ 0x30
 800772c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80078dc <_vfiprintf_r+0x21c>
 8007730:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007734:	f04f 0901 	mov.w	r9, #1
 8007738:	4623      	mov	r3, r4
 800773a:	469a      	mov	sl, r3
 800773c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007740:	b10a      	cbz	r2, 8007746 <_vfiprintf_r+0x86>
 8007742:	2a25      	cmp	r2, #37	@ 0x25
 8007744:	d1f9      	bne.n	800773a <_vfiprintf_r+0x7a>
 8007746:	ebba 0b04 	subs.w	fp, sl, r4
 800774a:	d00b      	beq.n	8007764 <_vfiprintf_r+0xa4>
 800774c:	465b      	mov	r3, fp
 800774e:	4622      	mov	r2, r4
 8007750:	4629      	mov	r1, r5
 8007752:	4630      	mov	r0, r6
 8007754:	f7ff ffa1 	bl	800769a <__sfputs_r>
 8007758:	3001      	adds	r0, #1
 800775a:	f000 80a7 	beq.w	80078ac <_vfiprintf_r+0x1ec>
 800775e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007760:	445a      	add	r2, fp
 8007762:	9209      	str	r2, [sp, #36]	@ 0x24
 8007764:	f89a 3000 	ldrb.w	r3, [sl]
 8007768:	2b00      	cmp	r3, #0
 800776a:	f000 809f 	beq.w	80078ac <_vfiprintf_r+0x1ec>
 800776e:	2300      	movs	r3, #0
 8007770:	f04f 32ff 	mov.w	r2, #4294967295
 8007774:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007778:	f10a 0a01 	add.w	sl, sl, #1
 800777c:	9304      	str	r3, [sp, #16]
 800777e:	9307      	str	r3, [sp, #28]
 8007780:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007784:	931a      	str	r3, [sp, #104]	@ 0x68
 8007786:	4654      	mov	r4, sl
 8007788:	2205      	movs	r2, #5
 800778a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800778e:	4853      	ldr	r0, [pc, #332]	@ (80078dc <_vfiprintf_r+0x21c>)
 8007790:	f7f8 fcf6 	bl	8000180 <memchr>
 8007794:	9a04      	ldr	r2, [sp, #16]
 8007796:	b9d8      	cbnz	r0, 80077d0 <_vfiprintf_r+0x110>
 8007798:	06d1      	lsls	r1, r2, #27
 800779a:	bf44      	itt	mi
 800779c:	2320      	movmi	r3, #32
 800779e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80077a2:	0713      	lsls	r3, r2, #28
 80077a4:	bf44      	itt	mi
 80077a6:	232b      	movmi	r3, #43	@ 0x2b
 80077a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80077ac:	f89a 3000 	ldrb.w	r3, [sl]
 80077b0:	2b2a      	cmp	r3, #42	@ 0x2a
 80077b2:	d015      	beq.n	80077e0 <_vfiprintf_r+0x120>
 80077b4:	9a07      	ldr	r2, [sp, #28]
 80077b6:	4654      	mov	r4, sl
 80077b8:	2000      	movs	r0, #0
 80077ba:	f04f 0c0a 	mov.w	ip, #10
 80077be:	4621      	mov	r1, r4
 80077c0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80077c4:	3b30      	subs	r3, #48	@ 0x30
 80077c6:	2b09      	cmp	r3, #9
 80077c8:	d94b      	bls.n	8007862 <_vfiprintf_r+0x1a2>
 80077ca:	b1b0      	cbz	r0, 80077fa <_vfiprintf_r+0x13a>
 80077cc:	9207      	str	r2, [sp, #28]
 80077ce:	e014      	b.n	80077fa <_vfiprintf_r+0x13a>
 80077d0:	eba0 0308 	sub.w	r3, r0, r8
 80077d4:	fa09 f303 	lsl.w	r3, r9, r3
 80077d8:	4313      	orrs	r3, r2
 80077da:	9304      	str	r3, [sp, #16]
 80077dc:	46a2      	mov	sl, r4
 80077de:	e7d2      	b.n	8007786 <_vfiprintf_r+0xc6>
 80077e0:	9b03      	ldr	r3, [sp, #12]
 80077e2:	1d19      	adds	r1, r3, #4
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	9103      	str	r1, [sp, #12]
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	bfbb      	ittet	lt
 80077ec:	425b      	neglt	r3, r3
 80077ee:	f042 0202 	orrlt.w	r2, r2, #2
 80077f2:	9307      	strge	r3, [sp, #28]
 80077f4:	9307      	strlt	r3, [sp, #28]
 80077f6:	bfb8      	it	lt
 80077f8:	9204      	strlt	r2, [sp, #16]
 80077fa:	7823      	ldrb	r3, [r4, #0]
 80077fc:	2b2e      	cmp	r3, #46	@ 0x2e
 80077fe:	d10a      	bne.n	8007816 <_vfiprintf_r+0x156>
 8007800:	7863      	ldrb	r3, [r4, #1]
 8007802:	2b2a      	cmp	r3, #42	@ 0x2a
 8007804:	d132      	bne.n	800786c <_vfiprintf_r+0x1ac>
 8007806:	9b03      	ldr	r3, [sp, #12]
 8007808:	1d1a      	adds	r2, r3, #4
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	9203      	str	r2, [sp, #12]
 800780e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007812:	3402      	adds	r4, #2
 8007814:	9305      	str	r3, [sp, #20]
 8007816:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 80078e0 <_vfiprintf_r+0x220>
 800781a:	7821      	ldrb	r1, [r4, #0]
 800781c:	2203      	movs	r2, #3
 800781e:	4650      	mov	r0, sl
 8007820:	f7f8 fcae 	bl	8000180 <memchr>
 8007824:	b138      	cbz	r0, 8007836 <_vfiprintf_r+0x176>
 8007826:	9b04      	ldr	r3, [sp, #16]
 8007828:	eba0 000a 	sub.w	r0, r0, sl
 800782c:	2240      	movs	r2, #64	@ 0x40
 800782e:	4082      	lsls	r2, r0
 8007830:	4313      	orrs	r3, r2
 8007832:	3401      	adds	r4, #1
 8007834:	9304      	str	r3, [sp, #16]
 8007836:	f814 1b01 	ldrb.w	r1, [r4], #1
 800783a:	482a      	ldr	r0, [pc, #168]	@ (80078e4 <_vfiprintf_r+0x224>)
 800783c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007840:	2206      	movs	r2, #6
 8007842:	f7f8 fc9d 	bl	8000180 <memchr>
 8007846:	2800      	cmp	r0, #0
 8007848:	d03f      	beq.n	80078ca <_vfiprintf_r+0x20a>
 800784a:	4b27      	ldr	r3, [pc, #156]	@ (80078e8 <_vfiprintf_r+0x228>)
 800784c:	bb1b      	cbnz	r3, 8007896 <_vfiprintf_r+0x1d6>
 800784e:	9b03      	ldr	r3, [sp, #12]
 8007850:	3307      	adds	r3, #7
 8007852:	f023 0307 	bic.w	r3, r3, #7
 8007856:	3308      	adds	r3, #8
 8007858:	9303      	str	r3, [sp, #12]
 800785a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800785c:	443b      	add	r3, r7
 800785e:	9309      	str	r3, [sp, #36]	@ 0x24
 8007860:	e76a      	b.n	8007738 <_vfiprintf_r+0x78>
 8007862:	fb0c 3202 	mla	r2, ip, r2, r3
 8007866:	460c      	mov	r4, r1
 8007868:	2001      	movs	r0, #1
 800786a:	e7a8      	b.n	80077be <_vfiprintf_r+0xfe>
 800786c:	2300      	movs	r3, #0
 800786e:	3401      	adds	r4, #1
 8007870:	9305      	str	r3, [sp, #20]
 8007872:	4619      	mov	r1, r3
 8007874:	f04f 0c0a 	mov.w	ip, #10
 8007878:	4620      	mov	r0, r4
 800787a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800787e:	3a30      	subs	r2, #48	@ 0x30
 8007880:	2a09      	cmp	r2, #9
 8007882:	d903      	bls.n	800788c <_vfiprintf_r+0x1cc>
 8007884:	2b00      	cmp	r3, #0
 8007886:	d0c6      	beq.n	8007816 <_vfiprintf_r+0x156>
 8007888:	9105      	str	r1, [sp, #20]
 800788a:	e7c4      	b.n	8007816 <_vfiprintf_r+0x156>
 800788c:	fb0c 2101 	mla	r1, ip, r1, r2
 8007890:	4604      	mov	r4, r0
 8007892:	2301      	movs	r3, #1
 8007894:	e7f0      	b.n	8007878 <_vfiprintf_r+0x1b8>
 8007896:	ab03      	add	r3, sp, #12
 8007898:	9300      	str	r3, [sp, #0]
 800789a:	462a      	mov	r2, r5
 800789c:	4b13      	ldr	r3, [pc, #76]	@ (80078ec <_vfiprintf_r+0x22c>)
 800789e:	a904      	add	r1, sp, #16
 80078a0:	4630      	mov	r0, r6
 80078a2:	f7fd fdd1 	bl	8005448 <_printf_float>
 80078a6:	4607      	mov	r7, r0
 80078a8:	1c78      	adds	r0, r7, #1
 80078aa:	d1d6      	bne.n	800785a <_vfiprintf_r+0x19a>
 80078ac:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80078ae:	07d9      	lsls	r1, r3, #31
 80078b0:	d405      	bmi.n	80078be <_vfiprintf_r+0x1fe>
 80078b2:	89ab      	ldrh	r3, [r5, #12]
 80078b4:	059a      	lsls	r2, r3, #22
 80078b6:	d402      	bmi.n	80078be <_vfiprintf_r+0x1fe>
 80078b8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80078ba:	f7fe fc07 	bl	80060cc <__retarget_lock_release_recursive>
 80078be:	89ab      	ldrh	r3, [r5, #12]
 80078c0:	065b      	lsls	r3, r3, #25
 80078c2:	f53f af1f 	bmi.w	8007704 <_vfiprintf_r+0x44>
 80078c6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80078c8:	e71e      	b.n	8007708 <_vfiprintf_r+0x48>
 80078ca:	ab03      	add	r3, sp, #12
 80078cc:	9300      	str	r3, [sp, #0]
 80078ce:	462a      	mov	r2, r5
 80078d0:	4b06      	ldr	r3, [pc, #24]	@ (80078ec <_vfiprintf_r+0x22c>)
 80078d2:	a904      	add	r1, sp, #16
 80078d4:	4630      	mov	r0, r6
 80078d6:	f7fe f851 	bl	800597c <_printf_i>
 80078da:	e7e4      	b.n	80078a6 <_vfiprintf_r+0x1e6>
 80078dc:	080080c0 	.word	0x080080c0
 80078e0:	080080c6 	.word	0x080080c6
 80078e4:	080080ca 	.word	0x080080ca
 80078e8:	08005449 	.word	0x08005449
 80078ec:	0800769b 	.word	0x0800769b

080078f0 <__sflush_r>:
 80078f0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80078f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078f6:	0716      	lsls	r6, r2, #28
 80078f8:	4605      	mov	r5, r0
 80078fa:	460c      	mov	r4, r1
 80078fc:	d454      	bmi.n	80079a8 <__sflush_r+0xb8>
 80078fe:	684b      	ldr	r3, [r1, #4]
 8007900:	2b00      	cmp	r3, #0
 8007902:	dc02      	bgt.n	800790a <__sflush_r+0x1a>
 8007904:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007906:	2b00      	cmp	r3, #0
 8007908:	dd48      	ble.n	800799c <__sflush_r+0xac>
 800790a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800790c:	2e00      	cmp	r6, #0
 800790e:	d045      	beq.n	800799c <__sflush_r+0xac>
 8007910:	2300      	movs	r3, #0
 8007912:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007916:	682f      	ldr	r7, [r5, #0]
 8007918:	6a21      	ldr	r1, [r4, #32]
 800791a:	602b      	str	r3, [r5, #0]
 800791c:	d030      	beq.n	8007980 <__sflush_r+0x90>
 800791e:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007920:	89a3      	ldrh	r3, [r4, #12]
 8007922:	0759      	lsls	r1, r3, #29
 8007924:	d505      	bpl.n	8007932 <__sflush_r+0x42>
 8007926:	6863      	ldr	r3, [r4, #4]
 8007928:	1ad2      	subs	r2, r2, r3
 800792a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800792c:	b10b      	cbz	r3, 8007932 <__sflush_r+0x42>
 800792e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007930:	1ad2      	subs	r2, r2, r3
 8007932:	2300      	movs	r3, #0
 8007934:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007936:	6a21      	ldr	r1, [r4, #32]
 8007938:	4628      	mov	r0, r5
 800793a:	47b0      	blx	r6
 800793c:	1c43      	adds	r3, r0, #1
 800793e:	89a3      	ldrh	r3, [r4, #12]
 8007940:	d106      	bne.n	8007950 <__sflush_r+0x60>
 8007942:	6829      	ldr	r1, [r5, #0]
 8007944:	291d      	cmp	r1, #29
 8007946:	d82b      	bhi.n	80079a0 <__sflush_r+0xb0>
 8007948:	4a28      	ldr	r2, [pc, #160]	@ (80079ec <__sflush_r+0xfc>)
 800794a:	410a      	asrs	r2, r1
 800794c:	07d6      	lsls	r6, r2, #31
 800794e:	d427      	bmi.n	80079a0 <__sflush_r+0xb0>
 8007950:	2200      	movs	r2, #0
 8007952:	6062      	str	r2, [r4, #4]
 8007954:	04d9      	lsls	r1, r3, #19
 8007956:	6922      	ldr	r2, [r4, #16]
 8007958:	6022      	str	r2, [r4, #0]
 800795a:	d504      	bpl.n	8007966 <__sflush_r+0x76>
 800795c:	1c42      	adds	r2, r0, #1
 800795e:	d101      	bne.n	8007964 <__sflush_r+0x74>
 8007960:	682b      	ldr	r3, [r5, #0]
 8007962:	b903      	cbnz	r3, 8007966 <__sflush_r+0x76>
 8007964:	6560      	str	r0, [r4, #84]	@ 0x54
 8007966:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007968:	602f      	str	r7, [r5, #0]
 800796a:	b1b9      	cbz	r1, 800799c <__sflush_r+0xac>
 800796c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007970:	4299      	cmp	r1, r3
 8007972:	d002      	beq.n	800797a <__sflush_r+0x8a>
 8007974:	4628      	mov	r0, r5
 8007976:	f7ff f9fb 	bl	8006d70 <_free_r>
 800797a:	2300      	movs	r3, #0
 800797c:	6363      	str	r3, [r4, #52]	@ 0x34
 800797e:	e00d      	b.n	800799c <__sflush_r+0xac>
 8007980:	2301      	movs	r3, #1
 8007982:	4628      	mov	r0, r5
 8007984:	47b0      	blx	r6
 8007986:	4602      	mov	r2, r0
 8007988:	1c50      	adds	r0, r2, #1
 800798a:	d1c9      	bne.n	8007920 <__sflush_r+0x30>
 800798c:	682b      	ldr	r3, [r5, #0]
 800798e:	2b00      	cmp	r3, #0
 8007990:	d0c6      	beq.n	8007920 <__sflush_r+0x30>
 8007992:	2b1d      	cmp	r3, #29
 8007994:	d001      	beq.n	800799a <__sflush_r+0xaa>
 8007996:	2b16      	cmp	r3, #22
 8007998:	d11d      	bne.n	80079d6 <__sflush_r+0xe6>
 800799a:	602f      	str	r7, [r5, #0]
 800799c:	2000      	movs	r0, #0
 800799e:	e021      	b.n	80079e4 <__sflush_r+0xf4>
 80079a0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80079a4:	b21b      	sxth	r3, r3
 80079a6:	e01a      	b.n	80079de <__sflush_r+0xee>
 80079a8:	690f      	ldr	r7, [r1, #16]
 80079aa:	2f00      	cmp	r7, #0
 80079ac:	d0f6      	beq.n	800799c <__sflush_r+0xac>
 80079ae:	0793      	lsls	r3, r2, #30
 80079b0:	680e      	ldr	r6, [r1, #0]
 80079b2:	bf08      	it	eq
 80079b4:	694b      	ldreq	r3, [r1, #20]
 80079b6:	600f      	str	r7, [r1, #0]
 80079b8:	bf18      	it	ne
 80079ba:	2300      	movne	r3, #0
 80079bc:	1bf6      	subs	r6, r6, r7
 80079be:	608b      	str	r3, [r1, #8]
 80079c0:	2e00      	cmp	r6, #0
 80079c2:	ddeb      	ble.n	800799c <__sflush_r+0xac>
 80079c4:	6a21      	ldr	r1, [r4, #32]
 80079c6:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 80079ca:	4633      	mov	r3, r6
 80079cc:	463a      	mov	r2, r7
 80079ce:	4628      	mov	r0, r5
 80079d0:	47e0      	blx	ip
 80079d2:	2800      	cmp	r0, #0
 80079d4:	dc07      	bgt.n	80079e6 <__sflush_r+0xf6>
 80079d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80079da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80079de:	81a3      	strh	r3, [r4, #12]
 80079e0:	f04f 30ff 	mov.w	r0, #4294967295
 80079e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80079e6:	4407      	add	r7, r0
 80079e8:	1a36      	subs	r6, r6, r0
 80079ea:	e7e9      	b.n	80079c0 <__sflush_r+0xd0>
 80079ec:	dfbffffe 	.word	0xdfbffffe

080079f0 <_fflush_r>:
 80079f0:	b538      	push	{r3, r4, r5, lr}
 80079f2:	690b      	ldr	r3, [r1, #16]
 80079f4:	4605      	mov	r5, r0
 80079f6:	460c      	mov	r4, r1
 80079f8:	b913      	cbnz	r3, 8007a00 <_fflush_r+0x10>
 80079fa:	2500      	movs	r5, #0
 80079fc:	4628      	mov	r0, r5
 80079fe:	bd38      	pop	{r3, r4, r5, pc}
 8007a00:	b118      	cbz	r0, 8007a0a <_fflush_r+0x1a>
 8007a02:	6a03      	ldr	r3, [r0, #32]
 8007a04:	b90b      	cbnz	r3, 8007a0a <_fflush_r+0x1a>
 8007a06:	f7fe f965 	bl	8005cd4 <__sinit>
 8007a0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d0f3      	beq.n	80079fa <_fflush_r+0xa>
 8007a12:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007a14:	07d0      	lsls	r0, r2, #31
 8007a16:	d404      	bmi.n	8007a22 <_fflush_r+0x32>
 8007a18:	0599      	lsls	r1, r3, #22
 8007a1a:	d402      	bmi.n	8007a22 <_fflush_r+0x32>
 8007a1c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007a1e:	f7fe fb54 	bl	80060ca <__retarget_lock_acquire_recursive>
 8007a22:	4628      	mov	r0, r5
 8007a24:	4621      	mov	r1, r4
 8007a26:	f7ff ff63 	bl	80078f0 <__sflush_r>
 8007a2a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007a2c:	07da      	lsls	r2, r3, #31
 8007a2e:	4605      	mov	r5, r0
 8007a30:	d4e4      	bmi.n	80079fc <_fflush_r+0xc>
 8007a32:	89a3      	ldrh	r3, [r4, #12]
 8007a34:	059b      	lsls	r3, r3, #22
 8007a36:	d4e1      	bmi.n	80079fc <_fflush_r+0xc>
 8007a38:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007a3a:	f7fe fb47 	bl	80060cc <__retarget_lock_release_recursive>
 8007a3e:	e7dd      	b.n	80079fc <_fflush_r+0xc>

08007a40 <__swhatbuf_r>:
 8007a40:	b570      	push	{r4, r5, r6, lr}
 8007a42:	460c      	mov	r4, r1
 8007a44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a48:	2900      	cmp	r1, #0
 8007a4a:	b096      	sub	sp, #88	@ 0x58
 8007a4c:	4615      	mov	r5, r2
 8007a4e:	461e      	mov	r6, r3
 8007a50:	da0d      	bge.n	8007a6e <__swhatbuf_r+0x2e>
 8007a52:	89a3      	ldrh	r3, [r4, #12]
 8007a54:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007a58:	f04f 0100 	mov.w	r1, #0
 8007a5c:	bf14      	ite	ne
 8007a5e:	2340      	movne	r3, #64	@ 0x40
 8007a60:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007a64:	2000      	movs	r0, #0
 8007a66:	6031      	str	r1, [r6, #0]
 8007a68:	602b      	str	r3, [r5, #0]
 8007a6a:	b016      	add	sp, #88	@ 0x58
 8007a6c:	bd70      	pop	{r4, r5, r6, pc}
 8007a6e:	466a      	mov	r2, sp
 8007a70:	f000 f848 	bl	8007b04 <_fstat_r>
 8007a74:	2800      	cmp	r0, #0
 8007a76:	dbec      	blt.n	8007a52 <__swhatbuf_r+0x12>
 8007a78:	9901      	ldr	r1, [sp, #4]
 8007a7a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007a7e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007a82:	4259      	negs	r1, r3
 8007a84:	4159      	adcs	r1, r3
 8007a86:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007a8a:	e7eb      	b.n	8007a64 <__swhatbuf_r+0x24>

08007a8c <__smakebuf_r>:
 8007a8c:	898b      	ldrh	r3, [r1, #12]
 8007a8e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007a90:	079d      	lsls	r5, r3, #30
 8007a92:	4606      	mov	r6, r0
 8007a94:	460c      	mov	r4, r1
 8007a96:	d507      	bpl.n	8007aa8 <__smakebuf_r+0x1c>
 8007a98:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007a9c:	6023      	str	r3, [r4, #0]
 8007a9e:	6123      	str	r3, [r4, #16]
 8007aa0:	2301      	movs	r3, #1
 8007aa2:	6163      	str	r3, [r4, #20]
 8007aa4:	b003      	add	sp, #12
 8007aa6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007aa8:	ab01      	add	r3, sp, #4
 8007aaa:	466a      	mov	r2, sp
 8007aac:	f7ff ffc8 	bl	8007a40 <__swhatbuf_r>
 8007ab0:	9f00      	ldr	r7, [sp, #0]
 8007ab2:	4605      	mov	r5, r0
 8007ab4:	4639      	mov	r1, r7
 8007ab6:	4630      	mov	r0, r6
 8007ab8:	f7ff f9ce 	bl	8006e58 <_malloc_r>
 8007abc:	b948      	cbnz	r0, 8007ad2 <__smakebuf_r+0x46>
 8007abe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007ac2:	059a      	lsls	r2, r3, #22
 8007ac4:	d4ee      	bmi.n	8007aa4 <__smakebuf_r+0x18>
 8007ac6:	f023 0303 	bic.w	r3, r3, #3
 8007aca:	f043 0302 	orr.w	r3, r3, #2
 8007ace:	81a3      	strh	r3, [r4, #12]
 8007ad0:	e7e2      	b.n	8007a98 <__smakebuf_r+0xc>
 8007ad2:	89a3      	ldrh	r3, [r4, #12]
 8007ad4:	6020      	str	r0, [r4, #0]
 8007ad6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007ada:	81a3      	strh	r3, [r4, #12]
 8007adc:	9b01      	ldr	r3, [sp, #4]
 8007ade:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007ae2:	b15b      	cbz	r3, 8007afc <__smakebuf_r+0x70>
 8007ae4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007ae8:	4630      	mov	r0, r6
 8007aea:	f000 f81d 	bl	8007b28 <_isatty_r>
 8007aee:	b128      	cbz	r0, 8007afc <__smakebuf_r+0x70>
 8007af0:	89a3      	ldrh	r3, [r4, #12]
 8007af2:	f023 0303 	bic.w	r3, r3, #3
 8007af6:	f043 0301 	orr.w	r3, r3, #1
 8007afa:	81a3      	strh	r3, [r4, #12]
 8007afc:	89a3      	ldrh	r3, [r4, #12]
 8007afe:	431d      	orrs	r5, r3
 8007b00:	81a5      	strh	r5, [r4, #12]
 8007b02:	e7cf      	b.n	8007aa4 <__smakebuf_r+0x18>

08007b04 <_fstat_r>:
 8007b04:	b538      	push	{r3, r4, r5, lr}
 8007b06:	4d07      	ldr	r5, [pc, #28]	@ (8007b24 <_fstat_r+0x20>)
 8007b08:	2300      	movs	r3, #0
 8007b0a:	4604      	mov	r4, r0
 8007b0c:	4608      	mov	r0, r1
 8007b0e:	4611      	mov	r1, r2
 8007b10:	602b      	str	r3, [r5, #0]
 8007b12:	f7fa f953 	bl	8001dbc <_fstat>
 8007b16:	1c43      	adds	r3, r0, #1
 8007b18:	d102      	bne.n	8007b20 <_fstat_r+0x1c>
 8007b1a:	682b      	ldr	r3, [r5, #0]
 8007b1c:	b103      	cbz	r3, 8007b20 <_fstat_r+0x1c>
 8007b1e:	6023      	str	r3, [r4, #0]
 8007b20:	bd38      	pop	{r3, r4, r5, pc}
 8007b22:	bf00      	nop
 8007b24:	20000474 	.word	0x20000474

08007b28 <_isatty_r>:
 8007b28:	b538      	push	{r3, r4, r5, lr}
 8007b2a:	4d06      	ldr	r5, [pc, #24]	@ (8007b44 <_isatty_r+0x1c>)
 8007b2c:	2300      	movs	r3, #0
 8007b2e:	4604      	mov	r4, r0
 8007b30:	4608      	mov	r0, r1
 8007b32:	602b      	str	r3, [r5, #0]
 8007b34:	f7fa f951 	bl	8001dda <_isatty>
 8007b38:	1c43      	adds	r3, r0, #1
 8007b3a:	d102      	bne.n	8007b42 <_isatty_r+0x1a>
 8007b3c:	682b      	ldr	r3, [r5, #0]
 8007b3e:	b103      	cbz	r3, 8007b42 <_isatty_r+0x1a>
 8007b40:	6023      	str	r3, [r4, #0]
 8007b42:	bd38      	pop	{r3, r4, r5, pc}
 8007b44:	20000474 	.word	0x20000474

08007b48 <_sbrk_r>:
 8007b48:	b538      	push	{r3, r4, r5, lr}
 8007b4a:	4d06      	ldr	r5, [pc, #24]	@ (8007b64 <_sbrk_r+0x1c>)
 8007b4c:	2300      	movs	r3, #0
 8007b4e:	4604      	mov	r4, r0
 8007b50:	4608      	mov	r0, r1
 8007b52:	602b      	str	r3, [r5, #0]
 8007b54:	f7fa f958 	bl	8001e08 <_sbrk>
 8007b58:	1c43      	adds	r3, r0, #1
 8007b5a:	d102      	bne.n	8007b62 <_sbrk_r+0x1a>
 8007b5c:	682b      	ldr	r3, [r5, #0]
 8007b5e:	b103      	cbz	r3, 8007b62 <_sbrk_r+0x1a>
 8007b60:	6023      	str	r3, [r4, #0]
 8007b62:	bd38      	pop	{r3, r4, r5, pc}
 8007b64:	20000474 	.word	0x20000474

08007b68 <memcpy>:
 8007b68:	440a      	add	r2, r1
 8007b6a:	4291      	cmp	r1, r2
 8007b6c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007b70:	d100      	bne.n	8007b74 <memcpy+0xc>
 8007b72:	4770      	bx	lr
 8007b74:	b510      	push	{r4, lr}
 8007b76:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007b7a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007b7e:	4291      	cmp	r1, r2
 8007b80:	d1f9      	bne.n	8007b76 <memcpy+0xe>
 8007b82:	bd10      	pop	{r4, pc}

08007b84 <__assert_func>:
 8007b84:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007b86:	4614      	mov	r4, r2
 8007b88:	461a      	mov	r2, r3
 8007b8a:	4b09      	ldr	r3, [pc, #36]	@ (8007bb0 <__assert_func+0x2c>)
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	4605      	mov	r5, r0
 8007b90:	68d8      	ldr	r0, [r3, #12]
 8007b92:	b954      	cbnz	r4, 8007baa <__assert_func+0x26>
 8007b94:	4b07      	ldr	r3, [pc, #28]	@ (8007bb4 <__assert_func+0x30>)
 8007b96:	461c      	mov	r4, r3
 8007b98:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007b9c:	9100      	str	r1, [sp, #0]
 8007b9e:	462b      	mov	r3, r5
 8007ba0:	4905      	ldr	r1, [pc, #20]	@ (8007bb8 <__assert_func+0x34>)
 8007ba2:	f000 f841 	bl	8007c28 <fiprintf>
 8007ba6:	f000 f851 	bl	8007c4c <abort>
 8007baa:	4b04      	ldr	r3, [pc, #16]	@ (8007bbc <__assert_func+0x38>)
 8007bac:	e7f4      	b.n	8007b98 <__assert_func+0x14>
 8007bae:	bf00      	nop
 8007bb0:	20000018 	.word	0x20000018
 8007bb4:	08008116 	.word	0x08008116
 8007bb8:	080080e8 	.word	0x080080e8
 8007bbc:	080080db 	.word	0x080080db

08007bc0 <_calloc_r>:
 8007bc0:	b570      	push	{r4, r5, r6, lr}
 8007bc2:	fba1 5402 	umull	r5, r4, r1, r2
 8007bc6:	b93c      	cbnz	r4, 8007bd8 <_calloc_r+0x18>
 8007bc8:	4629      	mov	r1, r5
 8007bca:	f7ff f945 	bl	8006e58 <_malloc_r>
 8007bce:	4606      	mov	r6, r0
 8007bd0:	b928      	cbnz	r0, 8007bde <_calloc_r+0x1e>
 8007bd2:	2600      	movs	r6, #0
 8007bd4:	4630      	mov	r0, r6
 8007bd6:	bd70      	pop	{r4, r5, r6, pc}
 8007bd8:	220c      	movs	r2, #12
 8007bda:	6002      	str	r2, [r0, #0]
 8007bdc:	e7f9      	b.n	8007bd2 <_calloc_r+0x12>
 8007bde:	462a      	mov	r2, r5
 8007be0:	4621      	mov	r1, r4
 8007be2:	f7fe f9f5 	bl	8005fd0 <memset>
 8007be6:	e7f5      	b.n	8007bd4 <_calloc_r+0x14>

08007be8 <__ascii_mbtowc>:
 8007be8:	b082      	sub	sp, #8
 8007bea:	b901      	cbnz	r1, 8007bee <__ascii_mbtowc+0x6>
 8007bec:	a901      	add	r1, sp, #4
 8007bee:	b142      	cbz	r2, 8007c02 <__ascii_mbtowc+0x1a>
 8007bf0:	b14b      	cbz	r3, 8007c06 <__ascii_mbtowc+0x1e>
 8007bf2:	7813      	ldrb	r3, [r2, #0]
 8007bf4:	600b      	str	r3, [r1, #0]
 8007bf6:	7812      	ldrb	r2, [r2, #0]
 8007bf8:	1e10      	subs	r0, r2, #0
 8007bfa:	bf18      	it	ne
 8007bfc:	2001      	movne	r0, #1
 8007bfe:	b002      	add	sp, #8
 8007c00:	4770      	bx	lr
 8007c02:	4610      	mov	r0, r2
 8007c04:	e7fb      	b.n	8007bfe <__ascii_mbtowc+0x16>
 8007c06:	f06f 0001 	mvn.w	r0, #1
 8007c0a:	e7f8      	b.n	8007bfe <__ascii_mbtowc+0x16>

08007c0c <__ascii_wctomb>:
 8007c0c:	4603      	mov	r3, r0
 8007c0e:	4608      	mov	r0, r1
 8007c10:	b141      	cbz	r1, 8007c24 <__ascii_wctomb+0x18>
 8007c12:	2aff      	cmp	r2, #255	@ 0xff
 8007c14:	d904      	bls.n	8007c20 <__ascii_wctomb+0x14>
 8007c16:	228a      	movs	r2, #138	@ 0x8a
 8007c18:	601a      	str	r2, [r3, #0]
 8007c1a:	f04f 30ff 	mov.w	r0, #4294967295
 8007c1e:	4770      	bx	lr
 8007c20:	700a      	strb	r2, [r1, #0]
 8007c22:	2001      	movs	r0, #1
 8007c24:	4770      	bx	lr
	...

08007c28 <fiprintf>:
 8007c28:	b40e      	push	{r1, r2, r3}
 8007c2a:	b503      	push	{r0, r1, lr}
 8007c2c:	4601      	mov	r1, r0
 8007c2e:	ab03      	add	r3, sp, #12
 8007c30:	4805      	ldr	r0, [pc, #20]	@ (8007c48 <fiprintf+0x20>)
 8007c32:	f853 2b04 	ldr.w	r2, [r3], #4
 8007c36:	6800      	ldr	r0, [r0, #0]
 8007c38:	9301      	str	r3, [sp, #4]
 8007c3a:	f7ff fd41 	bl	80076c0 <_vfiprintf_r>
 8007c3e:	b002      	add	sp, #8
 8007c40:	f85d eb04 	ldr.w	lr, [sp], #4
 8007c44:	b003      	add	sp, #12
 8007c46:	4770      	bx	lr
 8007c48:	20000018 	.word	0x20000018

08007c4c <abort>:
 8007c4c:	b508      	push	{r3, lr}
 8007c4e:	2006      	movs	r0, #6
 8007c50:	f000 f82c 	bl	8007cac <raise>
 8007c54:	2001      	movs	r0, #1
 8007c56:	f7fa f87e 	bl	8001d56 <_exit>

08007c5a <_raise_r>:
 8007c5a:	291f      	cmp	r1, #31
 8007c5c:	b538      	push	{r3, r4, r5, lr}
 8007c5e:	4605      	mov	r5, r0
 8007c60:	460c      	mov	r4, r1
 8007c62:	d904      	bls.n	8007c6e <_raise_r+0x14>
 8007c64:	2316      	movs	r3, #22
 8007c66:	6003      	str	r3, [r0, #0]
 8007c68:	f04f 30ff 	mov.w	r0, #4294967295
 8007c6c:	bd38      	pop	{r3, r4, r5, pc}
 8007c6e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8007c70:	b112      	cbz	r2, 8007c78 <_raise_r+0x1e>
 8007c72:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007c76:	b94b      	cbnz	r3, 8007c8c <_raise_r+0x32>
 8007c78:	4628      	mov	r0, r5
 8007c7a:	f000 f831 	bl	8007ce0 <_getpid_r>
 8007c7e:	4622      	mov	r2, r4
 8007c80:	4601      	mov	r1, r0
 8007c82:	4628      	mov	r0, r5
 8007c84:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007c88:	f000 b818 	b.w	8007cbc <_kill_r>
 8007c8c:	2b01      	cmp	r3, #1
 8007c8e:	d00a      	beq.n	8007ca6 <_raise_r+0x4c>
 8007c90:	1c59      	adds	r1, r3, #1
 8007c92:	d103      	bne.n	8007c9c <_raise_r+0x42>
 8007c94:	2316      	movs	r3, #22
 8007c96:	6003      	str	r3, [r0, #0]
 8007c98:	2001      	movs	r0, #1
 8007c9a:	e7e7      	b.n	8007c6c <_raise_r+0x12>
 8007c9c:	2100      	movs	r1, #0
 8007c9e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8007ca2:	4620      	mov	r0, r4
 8007ca4:	4798      	blx	r3
 8007ca6:	2000      	movs	r0, #0
 8007ca8:	e7e0      	b.n	8007c6c <_raise_r+0x12>
	...

08007cac <raise>:
 8007cac:	4b02      	ldr	r3, [pc, #8]	@ (8007cb8 <raise+0xc>)
 8007cae:	4601      	mov	r1, r0
 8007cb0:	6818      	ldr	r0, [r3, #0]
 8007cb2:	f7ff bfd2 	b.w	8007c5a <_raise_r>
 8007cb6:	bf00      	nop
 8007cb8:	20000018 	.word	0x20000018

08007cbc <_kill_r>:
 8007cbc:	b538      	push	{r3, r4, r5, lr}
 8007cbe:	4d07      	ldr	r5, [pc, #28]	@ (8007cdc <_kill_r+0x20>)
 8007cc0:	2300      	movs	r3, #0
 8007cc2:	4604      	mov	r4, r0
 8007cc4:	4608      	mov	r0, r1
 8007cc6:	4611      	mov	r1, r2
 8007cc8:	602b      	str	r3, [r5, #0]
 8007cca:	f7fa f834 	bl	8001d36 <_kill>
 8007cce:	1c43      	adds	r3, r0, #1
 8007cd0:	d102      	bne.n	8007cd8 <_kill_r+0x1c>
 8007cd2:	682b      	ldr	r3, [r5, #0]
 8007cd4:	b103      	cbz	r3, 8007cd8 <_kill_r+0x1c>
 8007cd6:	6023      	str	r3, [r4, #0]
 8007cd8:	bd38      	pop	{r3, r4, r5, pc}
 8007cda:	bf00      	nop
 8007cdc:	20000474 	.word	0x20000474

08007ce0 <_getpid_r>:
 8007ce0:	f7fa b822 	b.w	8001d28 <_getpid>

08007ce4 <_init>:
 8007ce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ce6:	bf00      	nop
 8007ce8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007cea:	bc08      	pop	{r3}
 8007cec:	469e      	mov	lr, r3
 8007cee:	4770      	bx	lr

08007cf0 <_fini>:
 8007cf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cf2:	bf00      	nop
 8007cf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007cf6:	bc08      	pop	{r3}
 8007cf8:	469e      	mov	lr, r3
 8007cfa:	4770      	bx	lr
