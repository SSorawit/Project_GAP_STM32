
stm32_rs485_greehourse.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007ba4  08000140  08000140  00001140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000052c  08007ce8  08007ce8  00008ce8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008214  08008214  0000a1e0  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08008214  08008214  00009214  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800821c  0800821c  0000a1e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800821c  0800821c  0000921c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008220  08008220  00009220  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e0  20000000  08008224  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002b0  200001e0  08008404  0000a1e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000490  08008404  0000a490  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  0000a1e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f47f  00000000  00000000  0000a20a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002644  00000000  00000000  00019689  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001038  00000000  00000000  0001bcd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c4c  00000000  00000000  0001cd08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a4bc  00000000  00000000  0001d954  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f6c7  00000000  00000000  00037e10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a020a  00000000  00000000  000474d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e76e1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000053bc  00000000  00000000  000e7724  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000075  00000000  00000000  000ecae0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200001e0 	.word	0x200001e0
 800015c:	00000000 	.word	0x00000000
 8000160:	08007ccc 	.word	0x08007ccc

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200001e4 	.word	0x200001e4
 800017c:	08007ccc 	.word	0x08007ccc

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	@ 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__gedf2>:
 80009cc:	f04f 3cff 	mov.w	ip, #4294967295
 80009d0:	e006      	b.n	80009e0 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__ledf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	e002      	b.n	80009e0 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__cmpdf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009f6:	d01b      	beq.n	8000a30 <__cmpdf2+0x54>
 80009f8:	b001      	add	sp, #4
 80009fa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009fe:	bf0c      	ite	eq
 8000a00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a04:	ea91 0f03 	teqne	r1, r3
 8000a08:	bf02      	ittt	eq
 8000a0a:	ea90 0f02 	teqeq	r0, r2
 8000a0e:	2000      	moveq	r0, #0
 8000a10:	4770      	bxeq	lr
 8000a12:	f110 0f00 	cmn.w	r0, #0
 8000a16:	ea91 0f03 	teq	r1, r3
 8000a1a:	bf58      	it	pl
 8000a1c:	4299      	cmppl	r1, r3
 8000a1e:	bf08      	it	eq
 8000a20:	4290      	cmpeq	r0, r2
 8000a22:	bf2c      	ite	cs
 8000a24:	17d8      	asrcs	r0, r3, #31
 8000a26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a2a:	f040 0001 	orr.w	r0, r0, #1
 8000a2e:	4770      	bx	lr
 8000a30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__cmpdf2+0x64>
 8000a3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3e:	d107      	bne.n	8000a50 <__cmpdf2+0x74>
 8000a40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d1d6      	bne.n	80009f8 <__cmpdf2+0x1c>
 8000a4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4e:	d0d3      	beq.n	80009f8 <__cmpdf2+0x1c>
 8000a50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdrcmple>:
 8000a58:	4684      	mov	ip, r0
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4662      	mov	r2, ip
 8000a5e:	468c      	mov	ip, r1
 8000a60:	4619      	mov	r1, r3
 8000a62:	4663      	mov	r3, ip
 8000a64:	e000      	b.n	8000a68 <__aeabi_cdcmpeq>
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdcmpeq>:
 8000a68:	b501      	push	{r0, lr}
 8000a6a:	f7ff ffb7 	bl	80009dc <__cmpdf2>
 8000a6e:	2800      	cmp	r0, #0
 8000a70:	bf48      	it	mi
 8000a72:	f110 0f00 	cmnmi.w	r0, #0
 8000a76:	bd01      	pop	{r0, pc}

08000a78 <__aeabi_dcmpeq>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff fff4 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a80:	bf0c      	ite	eq
 8000a82:	2001      	moveq	r0, #1
 8000a84:	2000      	movne	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmplt>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffea 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a94:	bf34      	ite	cc
 8000a96:	2001      	movcc	r0, #1
 8000a98:	2000      	movcs	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmple>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffe0 	bl	8000a68 <__aeabi_cdcmpeq>
 8000aa8:	bf94      	ite	ls
 8000aaa:	2001      	movls	r0, #1
 8000aac:	2000      	movhi	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpge>:
 8000ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab8:	f7ff ffce 	bl	8000a58 <__aeabi_cdrcmple>
 8000abc:	bf94      	ite	ls
 8000abe:	2001      	movls	r0, #1
 8000ac0:	2000      	movhi	r0, #0
 8000ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_dcmpgt>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff ffc4 	bl	8000a58 <__aeabi_cdrcmple>
 8000ad0:	bf34      	ite	cc
 8000ad2:	2001      	movcc	r0, #1
 8000ad4:	2000      	movcs	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmpun>:
 8000adc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x10>
 8000ae6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aea:	d10a      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x20>
 8000af6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afa:	d102      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	f04f 0001 	mov.w	r0, #1
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_d2iz>:
 8000b08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b0c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b10:	d215      	bcs.n	8000b3e <__aeabi_d2iz+0x36>
 8000b12:	d511      	bpl.n	8000b38 <__aeabi_d2iz+0x30>
 8000b14:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b1c:	d912      	bls.n	8000b44 <__aeabi_d2iz+0x3c>
 8000b1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b22:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b2a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b32:	bf18      	it	ne
 8000b34:	4240      	negne	r0, r0
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b42:	d105      	bne.n	8000b50 <__aeabi_d2iz+0x48>
 8000b44:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b48:	bf08      	it	eq
 8000b4a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b4e:	4770      	bx	lr
 8000b50:	f04f 0000 	mov.w	r0, #0
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_frsub>:
 8000b58:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b5c:	e002      	b.n	8000b64 <__addsf3>
 8000b5e:	bf00      	nop

08000b60 <__aeabi_fsub>:
 8000b60:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b64 <__addsf3>:
 8000b64:	0042      	lsls	r2, r0, #1
 8000b66:	bf1f      	itttt	ne
 8000b68:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b6c:	ea92 0f03 	teqne	r2, r3
 8000b70:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b74:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b78:	d06a      	beq.n	8000c50 <__addsf3+0xec>
 8000b7a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b7e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b82:	bfc1      	itttt	gt
 8000b84:	18d2      	addgt	r2, r2, r3
 8000b86:	4041      	eorgt	r1, r0
 8000b88:	4048      	eorgt	r0, r1
 8000b8a:	4041      	eorgt	r1, r0
 8000b8c:	bfb8      	it	lt
 8000b8e:	425b      	neglt	r3, r3
 8000b90:	2b19      	cmp	r3, #25
 8000b92:	bf88      	it	hi
 8000b94:	4770      	bxhi	lr
 8000b96:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b9a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b9e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000baa:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000bae:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4249      	negne	r1, r1
 8000bb6:	ea92 0f03 	teq	r2, r3
 8000bba:	d03f      	beq.n	8000c3c <__addsf3+0xd8>
 8000bbc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bc0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bc4:	eb10 000c 	adds.w	r0, r0, ip
 8000bc8:	f1c3 0320 	rsb	r3, r3, #32
 8000bcc:	fa01 f103 	lsl.w	r1, r1, r3
 8000bd0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000bd4:	d502      	bpl.n	8000bdc <__addsf3+0x78>
 8000bd6:	4249      	negs	r1, r1
 8000bd8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bdc:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000be0:	d313      	bcc.n	8000c0a <__addsf3+0xa6>
 8000be2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000be6:	d306      	bcc.n	8000bf6 <__addsf3+0x92>
 8000be8:	0840      	lsrs	r0, r0, #1
 8000bea:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bee:	f102 0201 	add.w	r2, r2, #1
 8000bf2:	2afe      	cmp	r2, #254	@ 0xfe
 8000bf4:	d251      	bcs.n	8000c9a <__addsf3+0x136>
 8000bf6:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000bfa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bfe:	bf08      	it	eq
 8000c00:	f020 0001 	biceq.w	r0, r0, #1
 8000c04:	ea40 0003 	orr.w	r0, r0, r3
 8000c08:	4770      	bx	lr
 8000c0a:	0049      	lsls	r1, r1, #1
 8000c0c:	eb40 0000 	adc.w	r0, r0, r0
 8000c10:	3a01      	subs	r2, #1
 8000c12:	bf28      	it	cs
 8000c14:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c18:	d2ed      	bcs.n	8000bf6 <__addsf3+0x92>
 8000c1a:	fab0 fc80 	clz	ip, r0
 8000c1e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c22:	ebb2 020c 	subs.w	r2, r2, ip
 8000c26:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c2a:	bfaa      	itet	ge
 8000c2c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c30:	4252      	neglt	r2, r2
 8000c32:	4318      	orrge	r0, r3
 8000c34:	bfbc      	itt	lt
 8000c36:	40d0      	lsrlt	r0, r2
 8000c38:	4318      	orrlt	r0, r3
 8000c3a:	4770      	bx	lr
 8000c3c:	f092 0f00 	teq	r2, #0
 8000c40:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c44:	bf06      	itte	eq
 8000c46:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c4a:	3201      	addeq	r2, #1
 8000c4c:	3b01      	subne	r3, #1
 8000c4e:	e7b5      	b.n	8000bbc <__addsf3+0x58>
 8000c50:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c54:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c58:	bf18      	it	ne
 8000c5a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c5e:	d021      	beq.n	8000ca4 <__addsf3+0x140>
 8000c60:	ea92 0f03 	teq	r2, r3
 8000c64:	d004      	beq.n	8000c70 <__addsf3+0x10c>
 8000c66:	f092 0f00 	teq	r2, #0
 8000c6a:	bf08      	it	eq
 8000c6c:	4608      	moveq	r0, r1
 8000c6e:	4770      	bx	lr
 8000c70:	ea90 0f01 	teq	r0, r1
 8000c74:	bf1c      	itt	ne
 8000c76:	2000      	movne	r0, #0
 8000c78:	4770      	bxne	lr
 8000c7a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c7e:	d104      	bne.n	8000c8a <__addsf3+0x126>
 8000c80:	0040      	lsls	r0, r0, #1
 8000c82:	bf28      	it	cs
 8000c84:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c88:	4770      	bx	lr
 8000c8a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c8e:	bf3c      	itt	cc
 8000c90:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bxcc	lr
 8000c96:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c9a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000c9e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ca2:	4770      	bx	lr
 8000ca4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ca8:	bf16      	itet	ne
 8000caa:	4608      	movne	r0, r1
 8000cac:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cb0:	4601      	movne	r1, r0
 8000cb2:	0242      	lsls	r2, r0, #9
 8000cb4:	bf06      	itte	eq
 8000cb6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cba:	ea90 0f01 	teqeq	r0, r1
 8000cbe:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000cc2:	4770      	bx	lr

08000cc4 <__aeabi_ui2f>:
 8000cc4:	f04f 0300 	mov.w	r3, #0
 8000cc8:	e004      	b.n	8000cd4 <__aeabi_i2f+0x8>
 8000cca:	bf00      	nop

08000ccc <__aeabi_i2f>:
 8000ccc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000cd0:	bf48      	it	mi
 8000cd2:	4240      	negmi	r0, r0
 8000cd4:	ea5f 0c00 	movs.w	ip, r0
 8000cd8:	bf08      	it	eq
 8000cda:	4770      	bxeq	lr
 8000cdc:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000ce0:	4601      	mov	r1, r0
 8000ce2:	f04f 0000 	mov.w	r0, #0
 8000ce6:	e01c      	b.n	8000d22 <__aeabi_l2f+0x2a>

08000ce8 <__aeabi_ul2f>:
 8000ce8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cec:	bf08      	it	eq
 8000cee:	4770      	bxeq	lr
 8000cf0:	f04f 0300 	mov.w	r3, #0
 8000cf4:	e00a      	b.n	8000d0c <__aeabi_l2f+0x14>
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_l2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d04:	d502      	bpl.n	8000d0c <__aeabi_l2f+0x14>
 8000d06:	4240      	negs	r0, r0
 8000d08:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d0c:	ea5f 0c01 	movs.w	ip, r1
 8000d10:	bf02      	ittt	eq
 8000d12:	4684      	moveq	ip, r0
 8000d14:	4601      	moveq	r1, r0
 8000d16:	2000      	moveq	r0, #0
 8000d18:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d1c:	bf08      	it	eq
 8000d1e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d22:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d26:	fabc f28c 	clz	r2, ip
 8000d2a:	3a08      	subs	r2, #8
 8000d2c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d30:	db10      	blt.n	8000d54 <__aeabi_l2f+0x5c>
 8000d32:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d36:	4463      	add	r3, ip
 8000d38:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d3c:	f1c2 0220 	rsb	r2, r2, #32
 8000d40:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d44:	fa20 f202 	lsr.w	r2, r0, r2
 8000d48:	eb43 0002 	adc.w	r0, r3, r2
 8000d4c:	bf08      	it	eq
 8000d4e:	f020 0001 	biceq.w	r0, r0, #1
 8000d52:	4770      	bx	lr
 8000d54:	f102 0220 	add.w	r2, r2, #32
 8000d58:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d5c:	f1c2 0220 	rsb	r2, r2, #32
 8000d60:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d64:	fa21 f202 	lsr.w	r2, r1, r2
 8000d68:	eb43 0002 	adc.w	r0, r3, r2
 8000d6c:	bf08      	it	eq
 8000d6e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d72:	4770      	bx	lr

08000d74 <__aeabi_fmul>:
 8000d74:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d78:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d7c:	bf1e      	ittt	ne
 8000d7e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d82:	ea92 0f0c 	teqne	r2, ip
 8000d86:	ea93 0f0c 	teqne	r3, ip
 8000d8a:	d06f      	beq.n	8000e6c <__aeabi_fmul+0xf8>
 8000d8c:	441a      	add	r2, r3
 8000d8e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d92:	0240      	lsls	r0, r0, #9
 8000d94:	bf18      	it	ne
 8000d96:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d9a:	d01e      	beq.n	8000dda <__aeabi_fmul+0x66>
 8000d9c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000da0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000da4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000da8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dac:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000db0:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000db4:	bf3e      	ittt	cc
 8000db6:	0049      	lslcc	r1, r1, #1
 8000db8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dbc:	005b      	lslcc	r3, r3, #1
 8000dbe:	ea40 0001 	orr.w	r0, r0, r1
 8000dc2:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000dc6:	2afd      	cmp	r2, #253	@ 0xfd
 8000dc8:	d81d      	bhi.n	8000e06 <__aeabi_fmul+0x92>
 8000dca:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000dce:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000dd2:	bf08      	it	eq
 8000dd4:	f020 0001 	biceq.w	r0, r0, #1
 8000dd8:	4770      	bx	lr
 8000dda:	f090 0f00 	teq	r0, #0
 8000dde:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000de2:	bf08      	it	eq
 8000de4:	0249      	lsleq	r1, r1, #9
 8000de6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dea:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dee:	3a7f      	subs	r2, #127	@ 0x7f
 8000df0:	bfc2      	ittt	gt
 8000df2:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000df6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dfa:	4770      	bxgt	lr
 8000dfc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e00:	f04f 0300 	mov.w	r3, #0
 8000e04:	3a01      	subs	r2, #1
 8000e06:	dc5d      	bgt.n	8000ec4 <__aeabi_fmul+0x150>
 8000e08:	f112 0f19 	cmn.w	r2, #25
 8000e0c:	bfdc      	itt	le
 8000e0e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000e12:	4770      	bxle	lr
 8000e14:	f1c2 0200 	rsb	r2, r2, #0
 8000e18:	0041      	lsls	r1, r0, #1
 8000e1a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e1e:	f1c2 0220 	rsb	r2, r2, #32
 8000e22:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e26:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e2a:	f140 0000 	adc.w	r0, r0, #0
 8000e2e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e32:	bf08      	it	eq
 8000e34:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e38:	4770      	bx	lr
 8000e3a:	f092 0f00 	teq	r2, #0
 8000e3e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e42:	bf02      	ittt	eq
 8000e44:	0040      	lsleq	r0, r0, #1
 8000e46:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e4a:	3a01      	subeq	r2, #1
 8000e4c:	d0f9      	beq.n	8000e42 <__aeabi_fmul+0xce>
 8000e4e:	ea40 000c 	orr.w	r0, r0, ip
 8000e52:	f093 0f00 	teq	r3, #0
 8000e56:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e5a:	bf02      	ittt	eq
 8000e5c:	0049      	lsleq	r1, r1, #1
 8000e5e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e62:	3b01      	subeq	r3, #1
 8000e64:	d0f9      	beq.n	8000e5a <__aeabi_fmul+0xe6>
 8000e66:	ea41 010c 	orr.w	r1, r1, ip
 8000e6a:	e78f      	b.n	8000d8c <__aeabi_fmul+0x18>
 8000e6c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e70:	ea92 0f0c 	teq	r2, ip
 8000e74:	bf18      	it	ne
 8000e76:	ea93 0f0c 	teqne	r3, ip
 8000e7a:	d00a      	beq.n	8000e92 <__aeabi_fmul+0x11e>
 8000e7c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e80:	bf18      	it	ne
 8000e82:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e86:	d1d8      	bne.n	8000e3a <__aeabi_fmul+0xc6>
 8000e88:	ea80 0001 	eor.w	r0, r0, r1
 8000e8c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e90:	4770      	bx	lr
 8000e92:	f090 0f00 	teq	r0, #0
 8000e96:	bf17      	itett	ne
 8000e98:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000e9c:	4608      	moveq	r0, r1
 8000e9e:	f091 0f00 	teqne	r1, #0
 8000ea2:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000ea6:	d014      	beq.n	8000ed2 <__aeabi_fmul+0x15e>
 8000ea8:	ea92 0f0c 	teq	r2, ip
 8000eac:	d101      	bne.n	8000eb2 <__aeabi_fmul+0x13e>
 8000eae:	0242      	lsls	r2, r0, #9
 8000eb0:	d10f      	bne.n	8000ed2 <__aeabi_fmul+0x15e>
 8000eb2:	ea93 0f0c 	teq	r3, ip
 8000eb6:	d103      	bne.n	8000ec0 <__aeabi_fmul+0x14c>
 8000eb8:	024b      	lsls	r3, r1, #9
 8000eba:	bf18      	it	ne
 8000ebc:	4608      	movne	r0, r1
 8000ebe:	d108      	bne.n	8000ed2 <__aeabi_fmul+0x15e>
 8000ec0:	ea80 0001 	eor.w	r0, r0, r1
 8000ec4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ec8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ecc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ed0:	4770      	bx	lr
 8000ed2:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ed6:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000eda:	4770      	bx	lr

08000edc <__aeabi_fdiv>:
 8000edc:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ee0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ee4:	bf1e      	ittt	ne
 8000ee6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eea:	ea92 0f0c 	teqne	r2, ip
 8000eee:	ea93 0f0c 	teqne	r3, ip
 8000ef2:	d069      	beq.n	8000fc8 <__aeabi_fdiv+0xec>
 8000ef4:	eba2 0203 	sub.w	r2, r2, r3
 8000ef8:	ea80 0c01 	eor.w	ip, r0, r1
 8000efc:	0249      	lsls	r1, r1, #9
 8000efe:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f02:	d037      	beq.n	8000f74 <__aeabi_fdiv+0x98>
 8000f04:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000f08:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f0c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f10:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000f14:	428b      	cmp	r3, r1
 8000f16:	bf38      	it	cc
 8000f18:	005b      	lslcc	r3, r3, #1
 8000f1a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000f1e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000f22:	428b      	cmp	r3, r1
 8000f24:	bf24      	itt	cs
 8000f26:	1a5b      	subcs	r3, r3, r1
 8000f28:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f2c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f30:	bf24      	itt	cs
 8000f32:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f36:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f3a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f3e:	bf24      	itt	cs
 8000f40:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f44:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f48:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f4c:	bf24      	itt	cs
 8000f4e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f52:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f56:	011b      	lsls	r3, r3, #4
 8000f58:	bf18      	it	ne
 8000f5a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f5e:	d1e0      	bne.n	8000f22 <__aeabi_fdiv+0x46>
 8000f60:	2afd      	cmp	r2, #253	@ 0xfd
 8000f62:	f63f af50 	bhi.w	8000e06 <__aeabi_fmul+0x92>
 8000f66:	428b      	cmp	r3, r1
 8000f68:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f6c:	bf08      	it	eq
 8000f6e:	f020 0001 	biceq.w	r0, r0, #1
 8000f72:	4770      	bx	lr
 8000f74:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f78:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f7c:	327f      	adds	r2, #127	@ 0x7f
 8000f7e:	bfc2      	ittt	gt
 8000f80:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f84:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f88:	4770      	bxgt	lr
 8000f8a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f8e:	f04f 0300 	mov.w	r3, #0
 8000f92:	3a01      	subs	r2, #1
 8000f94:	e737      	b.n	8000e06 <__aeabi_fmul+0x92>
 8000f96:	f092 0f00 	teq	r2, #0
 8000f9a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000f9e:	bf02      	ittt	eq
 8000fa0:	0040      	lsleq	r0, r0, #1
 8000fa2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000fa6:	3a01      	subeq	r2, #1
 8000fa8:	d0f9      	beq.n	8000f9e <__aeabi_fdiv+0xc2>
 8000faa:	ea40 000c 	orr.w	r0, r0, ip
 8000fae:	f093 0f00 	teq	r3, #0
 8000fb2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000fb6:	bf02      	ittt	eq
 8000fb8:	0049      	lsleq	r1, r1, #1
 8000fba:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000fbe:	3b01      	subeq	r3, #1
 8000fc0:	d0f9      	beq.n	8000fb6 <__aeabi_fdiv+0xda>
 8000fc2:	ea41 010c 	orr.w	r1, r1, ip
 8000fc6:	e795      	b.n	8000ef4 <__aeabi_fdiv+0x18>
 8000fc8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fcc:	ea92 0f0c 	teq	r2, ip
 8000fd0:	d108      	bne.n	8000fe4 <__aeabi_fdiv+0x108>
 8000fd2:	0242      	lsls	r2, r0, #9
 8000fd4:	f47f af7d 	bne.w	8000ed2 <__aeabi_fmul+0x15e>
 8000fd8:	ea93 0f0c 	teq	r3, ip
 8000fdc:	f47f af70 	bne.w	8000ec0 <__aeabi_fmul+0x14c>
 8000fe0:	4608      	mov	r0, r1
 8000fe2:	e776      	b.n	8000ed2 <__aeabi_fmul+0x15e>
 8000fe4:	ea93 0f0c 	teq	r3, ip
 8000fe8:	d104      	bne.n	8000ff4 <__aeabi_fdiv+0x118>
 8000fea:	024b      	lsls	r3, r1, #9
 8000fec:	f43f af4c 	beq.w	8000e88 <__aeabi_fmul+0x114>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e76e      	b.n	8000ed2 <__aeabi_fmul+0x15e>
 8000ff4:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000ff8:	bf18      	it	ne
 8000ffa:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000ffe:	d1ca      	bne.n	8000f96 <__aeabi_fdiv+0xba>
 8001000:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8001004:	f47f af5c 	bne.w	8000ec0 <__aeabi_fmul+0x14c>
 8001008:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 800100c:	f47f af3c 	bne.w	8000e88 <__aeabi_fmul+0x114>
 8001010:	e75f      	b.n	8000ed2 <__aeabi_fmul+0x15e>
 8001012:	bf00      	nop

08001014 <__aeabi_uldivmod>:
 8001014:	b953      	cbnz	r3, 800102c <__aeabi_uldivmod+0x18>
 8001016:	b94a      	cbnz	r2, 800102c <__aeabi_uldivmod+0x18>
 8001018:	2900      	cmp	r1, #0
 800101a:	bf08      	it	eq
 800101c:	2800      	cmpeq	r0, #0
 800101e:	bf1c      	itt	ne
 8001020:	f04f 31ff 	movne.w	r1, #4294967295
 8001024:	f04f 30ff 	movne.w	r0, #4294967295
 8001028:	f000 b988 	b.w	800133c <__aeabi_idiv0>
 800102c:	f1ad 0c08 	sub.w	ip, sp, #8
 8001030:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8001034:	f000 f806 	bl	8001044 <__udivmoddi4>
 8001038:	f8dd e004 	ldr.w	lr, [sp, #4]
 800103c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001040:	b004      	add	sp, #16
 8001042:	4770      	bx	lr

08001044 <__udivmoddi4>:
 8001044:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001048:	9d08      	ldr	r5, [sp, #32]
 800104a:	468e      	mov	lr, r1
 800104c:	4604      	mov	r4, r0
 800104e:	4688      	mov	r8, r1
 8001050:	2b00      	cmp	r3, #0
 8001052:	d14a      	bne.n	80010ea <__udivmoddi4+0xa6>
 8001054:	428a      	cmp	r2, r1
 8001056:	4617      	mov	r7, r2
 8001058:	d962      	bls.n	8001120 <__udivmoddi4+0xdc>
 800105a:	fab2 f682 	clz	r6, r2
 800105e:	b14e      	cbz	r6, 8001074 <__udivmoddi4+0x30>
 8001060:	f1c6 0320 	rsb	r3, r6, #32
 8001064:	fa01 f806 	lsl.w	r8, r1, r6
 8001068:	fa20 f303 	lsr.w	r3, r0, r3
 800106c:	40b7      	lsls	r7, r6
 800106e:	ea43 0808 	orr.w	r8, r3, r8
 8001072:	40b4      	lsls	r4, r6
 8001074:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8001078:	fa1f fc87 	uxth.w	ip, r7
 800107c:	fbb8 f1fe 	udiv	r1, r8, lr
 8001080:	0c23      	lsrs	r3, r4, #16
 8001082:	fb0e 8811 	mls	r8, lr, r1, r8
 8001086:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800108a:	fb01 f20c 	mul.w	r2, r1, ip
 800108e:	429a      	cmp	r2, r3
 8001090:	d909      	bls.n	80010a6 <__udivmoddi4+0x62>
 8001092:	18fb      	adds	r3, r7, r3
 8001094:	f101 30ff 	add.w	r0, r1, #4294967295
 8001098:	f080 80ea 	bcs.w	8001270 <__udivmoddi4+0x22c>
 800109c:	429a      	cmp	r2, r3
 800109e:	f240 80e7 	bls.w	8001270 <__udivmoddi4+0x22c>
 80010a2:	3902      	subs	r1, #2
 80010a4:	443b      	add	r3, r7
 80010a6:	1a9a      	subs	r2, r3, r2
 80010a8:	b2a3      	uxth	r3, r4
 80010aa:	fbb2 f0fe 	udiv	r0, r2, lr
 80010ae:	fb0e 2210 	mls	r2, lr, r0, r2
 80010b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80010b6:	fb00 fc0c 	mul.w	ip, r0, ip
 80010ba:	459c      	cmp	ip, r3
 80010bc:	d909      	bls.n	80010d2 <__udivmoddi4+0x8e>
 80010be:	18fb      	adds	r3, r7, r3
 80010c0:	f100 32ff 	add.w	r2, r0, #4294967295
 80010c4:	f080 80d6 	bcs.w	8001274 <__udivmoddi4+0x230>
 80010c8:	459c      	cmp	ip, r3
 80010ca:	f240 80d3 	bls.w	8001274 <__udivmoddi4+0x230>
 80010ce:	443b      	add	r3, r7
 80010d0:	3802      	subs	r0, #2
 80010d2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80010d6:	eba3 030c 	sub.w	r3, r3, ip
 80010da:	2100      	movs	r1, #0
 80010dc:	b11d      	cbz	r5, 80010e6 <__udivmoddi4+0xa2>
 80010de:	40f3      	lsrs	r3, r6
 80010e0:	2200      	movs	r2, #0
 80010e2:	e9c5 3200 	strd	r3, r2, [r5]
 80010e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80010ea:	428b      	cmp	r3, r1
 80010ec:	d905      	bls.n	80010fa <__udivmoddi4+0xb6>
 80010ee:	b10d      	cbz	r5, 80010f4 <__udivmoddi4+0xb0>
 80010f0:	e9c5 0100 	strd	r0, r1, [r5]
 80010f4:	2100      	movs	r1, #0
 80010f6:	4608      	mov	r0, r1
 80010f8:	e7f5      	b.n	80010e6 <__udivmoddi4+0xa2>
 80010fa:	fab3 f183 	clz	r1, r3
 80010fe:	2900      	cmp	r1, #0
 8001100:	d146      	bne.n	8001190 <__udivmoddi4+0x14c>
 8001102:	4573      	cmp	r3, lr
 8001104:	d302      	bcc.n	800110c <__udivmoddi4+0xc8>
 8001106:	4282      	cmp	r2, r0
 8001108:	f200 8105 	bhi.w	8001316 <__udivmoddi4+0x2d2>
 800110c:	1a84      	subs	r4, r0, r2
 800110e:	eb6e 0203 	sbc.w	r2, lr, r3
 8001112:	2001      	movs	r0, #1
 8001114:	4690      	mov	r8, r2
 8001116:	2d00      	cmp	r5, #0
 8001118:	d0e5      	beq.n	80010e6 <__udivmoddi4+0xa2>
 800111a:	e9c5 4800 	strd	r4, r8, [r5]
 800111e:	e7e2      	b.n	80010e6 <__udivmoddi4+0xa2>
 8001120:	2a00      	cmp	r2, #0
 8001122:	f000 8090 	beq.w	8001246 <__udivmoddi4+0x202>
 8001126:	fab2 f682 	clz	r6, r2
 800112a:	2e00      	cmp	r6, #0
 800112c:	f040 80a4 	bne.w	8001278 <__udivmoddi4+0x234>
 8001130:	1a8a      	subs	r2, r1, r2
 8001132:	0c03      	lsrs	r3, r0, #16
 8001134:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8001138:	b280      	uxth	r0, r0
 800113a:	b2bc      	uxth	r4, r7
 800113c:	2101      	movs	r1, #1
 800113e:	fbb2 fcfe 	udiv	ip, r2, lr
 8001142:	fb0e 221c 	mls	r2, lr, ip, r2
 8001146:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800114a:	fb04 f20c 	mul.w	r2, r4, ip
 800114e:	429a      	cmp	r2, r3
 8001150:	d907      	bls.n	8001162 <__udivmoddi4+0x11e>
 8001152:	18fb      	adds	r3, r7, r3
 8001154:	f10c 38ff 	add.w	r8, ip, #4294967295
 8001158:	d202      	bcs.n	8001160 <__udivmoddi4+0x11c>
 800115a:	429a      	cmp	r2, r3
 800115c:	f200 80e0 	bhi.w	8001320 <__udivmoddi4+0x2dc>
 8001160:	46c4      	mov	ip, r8
 8001162:	1a9b      	subs	r3, r3, r2
 8001164:	fbb3 f2fe 	udiv	r2, r3, lr
 8001168:	fb0e 3312 	mls	r3, lr, r2, r3
 800116c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8001170:	fb02 f404 	mul.w	r4, r2, r4
 8001174:	429c      	cmp	r4, r3
 8001176:	d907      	bls.n	8001188 <__udivmoddi4+0x144>
 8001178:	18fb      	adds	r3, r7, r3
 800117a:	f102 30ff 	add.w	r0, r2, #4294967295
 800117e:	d202      	bcs.n	8001186 <__udivmoddi4+0x142>
 8001180:	429c      	cmp	r4, r3
 8001182:	f200 80ca 	bhi.w	800131a <__udivmoddi4+0x2d6>
 8001186:	4602      	mov	r2, r0
 8001188:	1b1b      	subs	r3, r3, r4
 800118a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800118e:	e7a5      	b.n	80010dc <__udivmoddi4+0x98>
 8001190:	f1c1 0620 	rsb	r6, r1, #32
 8001194:	408b      	lsls	r3, r1
 8001196:	fa22 f706 	lsr.w	r7, r2, r6
 800119a:	431f      	orrs	r7, r3
 800119c:	fa0e f401 	lsl.w	r4, lr, r1
 80011a0:	fa20 f306 	lsr.w	r3, r0, r6
 80011a4:	fa2e fe06 	lsr.w	lr, lr, r6
 80011a8:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80011ac:	4323      	orrs	r3, r4
 80011ae:	fa00 f801 	lsl.w	r8, r0, r1
 80011b2:	fa1f fc87 	uxth.w	ip, r7
 80011b6:	fbbe f0f9 	udiv	r0, lr, r9
 80011ba:	0c1c      	lsrs	r4, r3, #16
 80011bc:	fb09 ee10 	mls	lr, r9, r0, lr
 80011c0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80011c4:	fb00 fe0c 	mul.w	lr, r0, ip
 80011c8:	45a6      	cmp	lr, r4
 80011ca:	fa02 f201 	lsl.w	r2, r2, r1
 80011ce:	d909      	bls.n	80011e4 <__udivmoddi4+0x1a0>
 80011d0:	193c      	adds	r4, r7, r4
 80011d2:	f100 3aff 	add.w	sl, r0, #4294967295
 80011d6:	f080 809c 	bcs.w	8001312 <__udivmoddi4+0x2ce>
 80011da:	45a6      	cmp	lr, r4
 80011dc:	f240 8099 	bls.w	8001312 <__udivmoddi4+0x2ce>
 80011e0:	3802      	subs	r0, #2
 80011e2:	443c      	add	r4, r7
 80011e4:	eba4 040e 	sub.w	r4, r4, lr
 80011e8:	fa1f fe83 	uxth.w	lr, r3
 80011ec:	fbb4 f3f9 	udiv	r3, r4, r9
 80011f0:	fb09 4413 	mls	r4, r9, r3, r4
 80011f4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80011f8:	fb03 fc0c 	mul.w	ip, r3, ip
 80011fc:	45a4      	cmp	ip, r4
 80011fe:	d908      	bls.n	8001212 <__udivmoddi4+0x1ce>
 8001200:	193c      	adds	r4, r7, r4
 8001202:	f103 3eff 	add.w	lr, r3, #4294967295
 8001206:	f080 8082 	bcs.w	800130e <__udivmoddi4+0x2ca>
 800120a:	45a4      	cmp	ip, r4
 800120c:	d97f      	bls.n	800130e <__udivmoddi4+0x2ca>
 800120e:	3b02      	subs	r3, #2
 8001210:	443c      	add	r4, r7
 8001212:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8001216:	eba4 040c 	sub.w	r4, r4, ip
 800121a:	fba0 ec02 	umull	lr, ip, r0, r2
 800121e:	4564      	cmp	r4, ip
 8001220:	4673      	mov	r3, lr
 8001222:	46e1      	mov	r9, ip
 8001224:	d362      	bcc.n	80012ec <__udivmoddi4+0x2a8>
 8001226:	d05f      	beq.n	80012e8 <__udivmoddi4+0x2a4>
 8001228:	b15d      	cbz	r5, 8001242 <__udivmoddi4+0x1fe>
 800122a:	ebb8 0203 	subs.w	r2, r8, r3
 800122e:	eb64 0409 	sbc.w	r4, r4, r9
 8001232:	fa04 f606 	lsl.w	r6, r4, r6
 8001236:	fa22 f301 	lsr.w	r3, r2, r1
 800123a:	431e      	orrs	r6, r3
 800123c:	40cc      	lsrs	r4, r1
 800123e:	e9c5 6400 	strd	r6, r4, [r5]
 8001242:	2100      	movs	r1, #0
 8001244:	e74f      	b.n	80010e6 <__udivmoddi4+0xa2>
 8001246:	fbb1 fcf2 	udiv	ip, r1, r2
 800124a:	0c01      	lsrs	r1, r0, #16
 800124c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8001250:	b280      	uxth	r0, r0
 8001252:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8001256:	463b      	mov	r3, r7
 8001258:	4638      	mov	r0, r7
 800125a:	463c      	mov	r4, r7
 800125c:	46b8      	mov	r8, r7
 800125e:	46be      	mov	lr, r7
 8001260:	2620      	movs	r6, #32
 8001262:	fbb1 f1f7 	udiv	r1, r1, r7
 8001266:	eba2 0208 	sub.w	r2, r2, r8
 800126a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800126e:	e766      	b.n	800113e <__udivmoddi4+0xfa>
 8001270:	4601      	mov	r1, r0
 8001272:	e718      	b.n	80010a6 <__udivmoddi4+0x62>
 8001274:	4610      	mov	r0, r2
 8001276:	e72c      	b.n	80010d2 <__udivmoddi4+0x8e>
 8001278:	f1c6 0220 	rsb	r2, r6, #32
 800127c:	fa2e f302 	lsr.w	r3, lr, r2
 8001280:	40b7      	lsls	r7, r6
 8001282:	40b1      	lsls	r1, r6
 8001284:	fa20 f202 	lsr.w	r2, r0, r2
 8001288:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800128c:	430a      	orrs	r2, r1
 800128e:	fbb3 f8fe 	udiv	r8, r3, lr
 8001292:	b2bc      	uxth	r4, r7
 8001294:	fb0e 3318 	mls	r3, lr, r8, r3
 8001298:	0c11      	lsrs	r1, r2, #16
 800129a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800129e:	fb08 f904 	mul.w	r9, r8, r4
 80012a2:	40b0      	lsls	r0, r6
 80012a4:	4589      	cmp	r9, r1
 80012a6:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80012aa:	b280      	uxth	r0, r0
 80012ac:	d93e      	bls.n	800132c <__udivmoddi4+0x2e8>
 80012ae:	1879      	adds	r1, r7, r1
 80012b0:	f108 3cff 	add.w	ip, r8, #4294967295
 80012b4:	d201      	bcs.n	80012ba <__udivmoddi4+0x276>
 80012b6:	4589      	cmp	r9, r1
 80012b8:	d81f      	bhi.n	80012fa <__udivmoddi4+0x2b6>
 80012ba:	eba1 0109 	sub.w	r1, r1, r9
 80012be:	fbb1 f9fe 	udiv	r9, r1, lr
 80012c2:	fb09 f804 	mul.w	r8, r9, r4
 80012c6:	fb0e 1119 	mls	r1, lr, r9, r1
 80012ca:	b292      	uxth	r2, r2
 80012cc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80012d0:	4542      	cmp	r2, r8
 80012d2:	d229      	bcs.n	8001328 <__udivmoddi4+0x2e4>
 80012d4:	18ba      	adds	r2, r7, r2
 80012d6:	f109 31ff 	add.w	r1, r9, #4294967295
 80012da:	d2c4      	bcs.n	8001266 <__udivmoddi4+0x222>
 80012dc:	4542      	cmp	r2, r8
 80012de:	d2c2      	bcs.n	8001266 <__udivmoddi4+0x222>
 80012e0:	f1a9 0102 	sub.w	r1, r9, #2
 80012e4:	443a      	add	r2, r7
 80012e6:	e7be      	b.n	8001266 <__udivmoddi4+0x222>
 80012e8:	45f0      	cmp	r8, lr
 80012ea:	d29d      	bcs.n	8001228 <__udivmoddi4+0x1e4>
 80012ec:	ebbe 0302 	subs.w	r3, lr, r2
 80012f0:	eb6c 0c07 	sbc.w	ip, ip, r7
 80012f4:	3801      	subs	r0, #1
 80012f6:	46e1      	mov	r9, ip
 80012f8:	e796      	b.n	8001228 <__udivmoddi4+0x1e4>
 80012fa:	eba7 0909 	sub.w	r9, r7, r9
 80012fe:	4449      	add	r1, r9
 8001300:	f1a8 0c02 	sub.w	ip, r8, #2
 8001304:	fbb1 f9fe 	udiv	r9, r1, lr
 8001308:	fb09 f804 	mul.w	r8, r9, r4
 800130c:	e7db      	b.n	80012c6 <__udivmoddi4+0x282>
 800130e:	4673      	mov	r3, lr
 8001310:	e77f      	b.n	8001212 <__udivmoddi4+0x1ce>
 8001312:	4650      	mov	r0, sl
 8001314:	e766      	b.n	80011e4 <__udivmoddi4+0x1a0>
 8001316:	4608      	mov	r0, r1
 8001318:	e6fd      	b.n	8001116 <__udivmoddi4+0xd2>
 800131a:	443b      	add	r3, r7
 800131c:	3a02      	subs	r2, #2
 800131e:	e733      	b.n	8001188 <__udivmoddi4+0x144>
 8001320:	f1ac 0c02 	sub.w	ip, ip, #2
 8001324:	443b      	add	r3, r7
 8001326:	e71c      	b.n	8001162 <__udivmoddi4+0x11e>
 8001328:	4649      	mov	r1, r9
 800132a:	e79c      	b.n	8001266 <__udivmoddi4+0x222>
 800132c:	eba1 0109 	sub.w	r1, r1, r9
 8001330:	46c4      	mov	ip, r8
 8001332:	fbb1 f9fe 	udiv	r9, r1, lr
 8001336:	fb09 f804 	mul.w	r8, r9, r4
 800133a:	e7c4      	b.n	80012c6 <__udivmoddi4+0x282>

0800133c <__aeabi_idiv0>:
 800133c:	4770      	bx	lr
 800133e:	bf00      	nop

08001340 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8001340:	b480      	push	{r7}
 8001342:	b083      	sub	sp, #12
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001348:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800134c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8001350:	f003 0301 	and.w	r3, r3, #1
 8001354:	2b00      	cmp	r3, #0
 8001356:	d013      	beq.n	8001380 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001358:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800135c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8001360:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001364:	2b00      	cmp	r3, #0
 8001366:	d00b      	beq.n	8001380 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001368:	e000      	b.n	800136c <ITM_SendChar+0x2c>
    {
      __NOP();
 800136a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 800136c:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	2b00      	cmp	r3, #0
 8001374:	d0f9      	beq.n	800136a <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8001376:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800137a:	687a      	ldr	r2, [r7, #4]
 800137c:	b2d2      	uxtb	r2, r2
 800137e:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8001380:	687b      	ldr	r3, [r7, #4]
}
 8001382:	4618      	mov	r0, r3
 8001384:	370c      	adds	r7, #12
 8001386:	46bd      	mov	sp, r7
 8001388:	bc80      	pop	{r7}
 800138a:	4770      	bx	lr

0800138c <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 800138c:	b480      	push	{r7}
 800138e:	b085      	sub	sp, #20
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001394:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001398:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800139a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	4313      	orrs	r3, r2
 80013a2:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80013a4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80013a8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	4013      	ands	r3, r2
 80013ae:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80013b0:	68fb      	ldr	r3, [r7, #12]
}
 80013b2:	bf00      	nop
 80013b4:	3714      	adds	r7, #20
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bc80      	pop	{r7}
 80013ba:	4770      	bx	lr

080013bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013c0:	f000 fde6 	bl	8001f90 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013c4:	f000 f80e 	bl	80013e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013c8:	f000 f8f6 	bl	80015b8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80013cc:	f000 f8a8 	bl	8001520 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 80013d0:	f000 f85a 	bl	8001488 <MX_USART1_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  TempHumi();
 80013d4:	f000 fade 	bl	8001994 <TempHumi>
	  Light();
 80013d8:	f000 fb36 	bl	8001a48 <Light>
	  SoilTempHumi();
 80013dc:	f000 fb8e 	bl	8001afc <SoilTempHumi>
	  TempHumi();
 80013e0:	bf00      	nop
 80013e2:	e7f7      	b.n	80013d4 <main+0x18>

080013e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b09a      	sub	sp, #104	@ 0x68
 80013e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013ea:	f107 0320 	add.w	r3, r7, #32
 80013ee:	2248      	movs	r2, #72	@ 0x48
 80013f0:	2100      	movs	r1, #0
 80013f2:	4618      	mov	r0, r3
 80013f4:	f004 fdde 	bl	8005fb4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013f8:	f107 0308 	add.w	r3, r7, #8
 80013fc:	2200      	movs	r2, #0
 80013fe:	601a      	str	r2, [r3, #0]
 8001400:	605a      	str	r2, [r3, #4]
 8001402:	609a      	str	r2, [r3, #8]
 8001404:	60da      	str	r2, [r3, #12]
 8001406:	611a      	str	r2, [r3, #16]
 8001408:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800140a:	4b1e      	ldr	r3, [pc, #120]	@ (8001484 <SystemClock_Config+0xa0>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001412:	4a1c      	ldr	r2, [pc, #112]	@ (8001484 <SystemClock_Config+0xa0>)
 8001414:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001418:	6013      	str	r3, [r2, #0]
 800141a:	4b1a      	ldr	r3, [pc, #104]	@ (8001484 <SystemClock_Config+0xa0>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001422:	607b      	str	r3, [r7, #4]
 8001424:	687b      	ldr	r3, [r7, #4]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001426:	2302      	movs	r3, #2
 8001428:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800142a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800142e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001430:	2340      	movs	r3, #64	@ 0x40
 8001432:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001434:	2300      	movs	r3, #0
 8001436:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001438:	f107 0320 	add.w	r3, r7, #32
 800143c:	4618      	mov	r0, r3
 800143e:	f001 fc2b 	bl	8002c98 <HAL_RCC_OscConfig>
 8001442:	4603      	mov	r3, r0
 8001444:	2b00      	cmp	r3, #0
 8001446:	d001      	beq.n	800144c <SystemClock_Config+0x68>
  {
    Error_Handler();
 8001448:	f000 fbb2 	bl	8001bb0 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 800144c:	234f      	movs	r3, #79	@ 0x4f
 800144e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001450:	2301      	movs	r3, #1
 8001452:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001454:	2300      	movs	r3, #0
 8001456:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001458:	2300      	movs	r3, #0
 800145a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800145c:	2300      	movs	r3, #0
 800145e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 8001460:	2300      	movs	r3, #0
 8001462:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001464:	f107 0308 	add.w	r3, r7, #8
 8001468:	2100      	movs	r1, #0
 800146a:	4618      	mov	r0, r3
 800146c:	f001 ff96 	bl	800339c <HAL_RCC_ClockConfig>
 8001470:	4603      	mov	r3, r0
 8001472:	2b00      	cmp	r3, #0
 8001474:	d001      	beq.n	800147a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001476:	f000 fb9b 	bl	8001bb0 <Error_Handler>
  }
}
 800147a:	bf00      	nop
 800147c:	3768      	adds	r7, #104	@ 0x68
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	58000400 	.word	0x58000400

08001488 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800148c:	4b22      	ldr	r3, [pc, #136]	@ (8001518 <MX_USART1_UART_Init+0x90>)
 800148e:	4a23      	ldr	r2, [pc, #140]	@ (800151c <MX_USART1_UART_Init+0x94>)
 8001490:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001492:	4b21      	ldr	r3, [pc, #132]	@ (8001518 <MX_USART1_UART_Init+0x90>)
 8001494:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001498:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800149a:	4b1f      	ldr	r3, [pc, #124]	@ (8001518 <MX_USART1_UART_Init+0x90>)
 800149c:	2200      	movs	r2, #0
 800149e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80014a0:	4b1d      	ldr	r3, [pc, #116]	@ (8001518 <MX_USART1_UART_Init+0x90>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80014a6:	4b1c      	ldr	r3, [pc, #112]	@ (8001518 <MX_USART1_UART_Init+0x90>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80014ac:	4b1a      	ldr	r3, [pc, #104]	@ (8001518 <MX_USART1_UART_Init+0x90>)
 80014ae:	220c      	movs	r2, #12
 80014b0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014b2:	4b19      	ldr	r3, [pc, #100]	@ (8001518 <MX_USART1_UART_Init+0x90>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80014b8:	4b17      	ldr	r3, [pc, #92]	@ (8001518 <MX_USART1_UART_Init+0x90>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80014be:	4b16      	ldr	r3, [pc, #88]	@ (8001518 <MX_USART1_UART_Init+0x90>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80014c4:	4b14      	ldr	r3, [pc, #80]	@ (8001518 <MX_USART1_UART_Init+0x90>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80014ca:	4b13      	ldr	r3, [pc, #76]	@ (8001518 <MX_USART1_UART_Init+0x90>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80014d0:	4811      	ldr	r0, [pc, #68]	@ (8001518 <MX_USART1_UART_Init+0x90>)
 80014d2:	f002 fc40 	bl	8003d56 <HAL_UART_Init>
 80014d6:	4603      	mov	r3, r0
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d001      	beq.n	80014e0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80014dc:	f000 fb68 	bl	8001bb0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80014e0:	2100      	movs	r1, #0
 80014e2:	480d      	ldr	r0, [pc, #52]	@ (8001518 <MX_USART1_UART_Init+0x90>)
 80014e4:	f003 fe3e 	bl	8005164 <HAL_UARTEx_SetTxFifoThreshold>
 80014e8:	4603      	mov	r3, r0
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d001      	beq.n	80014f2 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80014ee:	f000 fb5f 	bl	8001bb0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80014f2:	2100      	movs	r1, #0
 80014f4:	4808      	ldr	r0, [pc, #32]	@ (8001518 <MX_USART1_UART_Init+0x90>)
 80014f6:	f003 fe73 	bl	80051e0 <HAL_UARTEx_SetRxFifoThreshold>
 80014fa:	4603      	mov	r3, r0
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d001      	beq.n	8001504 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001500:	f000 fb56 	bl	8001bb0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001504:	4804      	ldr	r0, [pc, #16]	@ (8001518 <MX_USART1_UART_Init+0x90>)
 8001506:	f003 fdf5 	bl	80050f4 <HAL_UARTEx_DisableFifoMode>
 800150a:	4603      	mov	r3, r0
 800150c:	2b00      	cmp	r3, #0
 800150e:	d001      	beq.n	8001514 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001510:	f000 fb4e 	bl	8001bb0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001514:	bf00      	nop
 8001516:	bd80      	pop	{r7, pc}
 8001518:	20000214 	.word	0x20000214
 800151c:	40013800 	.word	0x40013800

08001520 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001524:	4b22      	ldr	r3, [pc, #136]	@ (80015b0 <MX_USART2_UART_Init+0x90>)
 8001526:	4a23      	ldr	r2, [pc, #140]	@ (80015b4 <MX_USART2_UART_Init+0x94>)
 8001528:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800152a:	4b21      	ldr	r3, [pc, #132]	@ (80015b0 <MX_USART2_UART_Init+0x90>)
 800152c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001530:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001532:	4b1f      	ldr	r3, [pc, #124]	@ (80015b0 <MX_USART2_UART_Init+0x90>)
 8001534:	2200      	movs	r2, #0
 8001536:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001538:	4b1d      	ldr	r3, [pc, #116]	@ (80015b0 <MX_USART2_UART_Init+0x90>)
 800153a:	2200      	movs	r2, #0
 800153c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800153e:	4b1c      	ldr	r3, [pc, #112]	@ (80015b0 <MX_USART2_UART_Init+0x90>)
 8001540:	2200      	movs	r2, #0
 8001542:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001544:	4b1a      	ldr	r3, [pc, #104]	@ (80015b0 <MX_USART2_UART_Init+0x90>)
 8001546:	220c      	movs	r2, #12
 8001548:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800154a:	4b19      	ldr	r3, [pc, #100]	@ (80015b0 <MX_USART2_UART_Init+0x90>)
 800154c:	2200      	movs	r2, #0
 800154e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001550:	4b17      	ldr	r3, [pc, #92]	@ (80015b0 <MX_USART2_UART_Init+0x90>)
 8001552:	2200      	movs	r2, #0
 8001554:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001556:	4b16      	ldr	r3, [pc, #88]	@ (80015b0 <MX_USART2_UART_Init+0x90>)
 8001558:	2200      	movs	r2, #0
 800155a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800155c:	4b14      	ldr	r3, [pc, #80]	@ (80015b0 <MX_USART2_UART_Init+0x90>)
 800155e:	2200      	movs	r2, #0
 8001560:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001562:	4b13      	ldr	r3, [pc, #76]	@ (80015b0 <MX_USART2_UART_Init+0x90>)
 8001564:	2200      	movs	r2, #0
 8001566:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001568:	4811      	ldr	r0, [pc, #68]	@ (80015b0 <MX_USART2_UART_Init+0x90>)
 800156a:	f002 fbf4 	bl	8003d56 <HAL_UART_Init>
 800156e:	4603      	mov	r3, r0
 8001570:	2b00      	cmp	r3, #0
 8001572:	d001      	beq.n	8001578 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001574:	f000 fb1c 	bl	8001bb0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001578:	2100      	movs	r1, #0
 800157a:	480d      	ldr	r0, [pc, #52]	@ (80015b0 <MX_USART2_UART_Init+0x90>)
 800157c:	f003 fdf2 	bl	8005164 <HAL_UARTEx_SetTxFifoThreshold>
 8001580:	4603      	mov	r3, r0
 8001582:	2b00      	cmp	r3, #0
 8001584:	d001      	beq.n	800158a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001586:	f000 fb13 	bl	8001bb0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800158a:	2100      	movs	r1, #0
 800158c:	4808      	ldr	r0, [pc, #32]	@ (80015b0 <MX_USART2_UART_Init+0x90>)
 800158e:	f003 fe27 	bl	80051e0 <HAL_UARTEx_SetRxFifoThreshold>
 8001592:	4603      	mov	r3, r0
 8001594:	2b00      	cmp	r3, #0
 8001596:	d001      	beq.n	800159c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001598:	f000 fb0a 	bl	8001bb0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800159c:	4804      	ldr	r0, [pc, #16]	@ (80015b0 <MX_USART2_UART_Init+0x90>)
 800159e:	f003 fda9 	bl	80050f4 <HAL_UARTEx_DisableFifoMode>
 80015a2:	4603      	mov	r3, r0
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d001      	beq.n	80015ac <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80015a8:	f000 fb02 	bl	8001bb0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80015ac:	bf00      	nop
 80015ae:	bd80      	pop	{r7, pc}
 80015b0:	200002a8 	.word	0x200002a8
 80015b4:	40004400 	.word	0x40004400

080015b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b086      	sub	sp, #24
 80015bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015be:	1d3b      	adds	r3, r7, #4
 80015c0:	2200      	movs	r2, #0
 80015c2:	601a      	str	r2, [r3, #0]
 80015c4:	605a      	str	r2, [r3, #4]
 80015c6:	609a      	str	r2, [r3, #8]
 80015c8:	60da      	str	r2, [r3, #12]
 80015ca:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015cc:	2001      	movs	r0, #1
 80015ce:	f7ff fedd 	bl	800138c <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015d2:	2002      	movs	r0, #2
 80015d4:	f7ff feda 	bl	800138c <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 80015d8:	2200      	movs	r2, #0
 80015da:	2120      	movs	r1, #32
 80015dc:	4818      	ldr	r0, [pc, #96]	@ (8001640 <MX_GPIO_Init+0x88>)
 80015de:	f001 f899 	bl	8002714 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 80015e2:	2201      	movs	r2, #1
 80015e4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80015e8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80015ec:	f001 f892 	bl	8002714 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 80015f0:	2201      	movs	r2, #1
 80015f2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80015f6:	4812      	ldr	r0, [pc, #72]	@ (8001640 <MX_GPIO_Init+0x88>)
 80015f8:	f001 f88c 	bl	8002714 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB5 PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_10;
 80015fc:	f44f 6384 	mov.w	r3, #1056	@ 0x420
 8001600:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001602:	2301      	movs	r3, #1
 8001604:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001606:	2300      	movs	r3, #0
 8001608:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800160a:	2300      	movs	r3, #0
 800160c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800160e:	1d3b      	adds	r3, r7, #4
 8001610:	4619      	mov	r1, r3
 8001612:	480b      	ldr	r0, [pc, #44]	@ (8001640 <MX_GPIO_Init+0x88>)
 8001614:	f000 ff1e 	bl	8002454 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001618:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800161c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800161e:	2301      	movs	r3, #1
 8001620:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001622:	2300      	movs	r3, #0
 8001624:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001626:	2300      	movs	r3, #0
 8001628:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800162a:	1d3b      	adds	r3, r7, #4
 800162c:	4619      	mov	r1, r3
 800162e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001632:	f000 ff0f 	bl	8002454 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001636:	bf00      	nop
 8001638:	3718      	adds	r7, #24
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	48000400 	.word	0x48000400

08001644 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len) {
 8001644:	b580      	push	{r7, lr}
 8001646:	b086      	sub	sp, #24
 8001648:	af00      	add	r7, sp, #0
 800164a:	60f8      	str	r0, [r7, #12]
 800164c:	60b9      	str	r1, [r7, #8]
 800164e:	607a      	str	r2, [r7, #4]
    for (int i = 0; i < len; i++) {
 8001650:	2300      	movs	r3, #0
 8001652:	617b      	str	r3, [r7, #20]
 8001654:	e009      	b.n	800166a <_write+0x26>
        ITM_SendChar((*ptr++));
 8001656:	68bb      	ldr	r3, [r7, #8]
 8001658:	1c5a      	adds	r2, r3, #1
 800165a:	60ba      	str	r2, [r7, #8]
 800165c:	781b      	ldrb	r3, [r3, #0]
 800165e:	4618      	mov	r0, r3
 8001660:	f7ff fe6e 	bl	8001340 <ITM_SendChar>
    for (int i = 0; i < len; i++) {
 8001664:	697b      	ldr	r3, [r7, #20]
 8001666:	3301      	adds	r3, #1
 8001668:	617b      	str	r3, [r7, #20]
 800166a:	697a      	ldr	r2, [r7, #20]
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	429a      	cmp	r2, r3
 8001670:	dbf1      	blt.n	8001656 <_write+0x12>
    }
    return len;
 8001672:	687b      	ldr	r3, [r7, #4]
}
 8001674:	4618      	mov	r0, r3
 8001676:	3718      	adds	r7, #24
 8001678:	46bd      	mov	sp, r7
 800167a:	bd80      	pop	{r7, pc}

0800167c <Modbus_CRC16>:

uint16_t Modbus_CRC16(uint8_t *buf, uint8_t len) {
 800167c:	b480      	push	{r7}
 800167e:	b085      	sub	sp, #20
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
 8001684:	460b      	mov	r3, r1
 8001686:	70fb      	strb	r3, [r7, #3]
    uint16_t crc = 0xFFFF;
 8001688:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800168c:	81fb      	strh	r3, [r7, #14]

    for (uint8_t pos = 0; pos < len; pos++) {
 800168e:	2300      	movs	r3, #0
 8001690:	737b      	strb	r3, [r7, #13]
 8001692:	e026      	b.n	80016e2 <Modbus_CRC16+0x66>
        crc ^= (uint16_t)buf[pos];
 8001694:	7b7b      	ldrb	r3, [r7, #13]
 8001696:	687a      	ldr	r2, [r7, #4]
 8001698:	4413      	add	r3, r2
 800169a:	781b      	ldrb	r3, [r3, #0]
 800169c:	461a      	mov	r2, r3
 800169e:	89fb      	ldrh	r3, [r7, #14]
 80016a0:	4053      	eors	r3, r2
 80016a2:	81fb      	strh	r3, [r7, #14]
        for (int i = 0; i < 8; i++) {
 80016a4:	2300      	movs	r3, #0
 80016a6:	60bb      	str	r3, [r7, #8]
 80016a8:	e015      	b.n	80016d6 <Modbus_CRC16+0x5a>
            if (crc & 0x0001) {
 80016aa:	89fb      	ldrh	r3, [r7, #14]
 80016ac:	f003 0301 	and.w	r3, r3, #1
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d00a      	beq.n	80016ca <Modbus_CRC16+0x4e>
                crc >>= 1;
 80016b4:	89fb      	ldrh	r3, [r7, #14]
 80016b6:	085b      	lsrs	r3, r3, #1
 80016b8:	81fb      	strh	r3, [r7, #14]
                crc ^= 0xA001;
 80016ba:	89fb      	ldrh	r3, [r7, #14]
 80016bc:	f483 43bf 	eor.w	r3, r3, #24448	@ 0x5f80
 80016c0:	f083 037e 	eor.w	r3, r3, #126	@ 0x7e
 80016c4:	43db      	mvns	r3, r3
 80016c6:	81fb      	strh	r3, [r7, #14]
 80016c8:	e002      	b.n	80016d0 <Modbus_CRC16+0x54>
            } else {
                crc >>= 1;
 80016ca:	89fb      	ldrh	r3, [r7, #14]
 80016cc:	085b      	lsrs	r3, r3, #1
 80016ce:	81fb      	strh	r3, [r7, #14]
        for (int i = 0; i < 8; i++) {
 80016d0:	68bb      	ldr	r3, [r7, #8]
 80016d2:	3301      	adds	r3, #1
 80016d4:	60bb      	str	r3, [r7, #8]
 80016d6:	68bb      	ldr	r3, [r7, #8]
 80016d8:	2b07      	cmp	r3, #7
 80016da:	dde6      	ble.n	80016aa <Modbus_CRC16+0x2e>
    for (uint8_t pos = 0; pos < len; pos++) {
 80016dc:	7b7b      	ldrb	r3, [r7, #13]
 80016de:	3301      	adds	r3, #1
 80016e0:	737b      	strb	r3, [r7, #13]
 80016e2:	7b7a      	ldrb	r2, [r7, #13]
 80016e4:	78fb      	ldrb	r3, [r7, #3]
 80016e6:	429a      	cmp	r2, r3
 80016e8:	d3d4      	bcc.n	8001694 <Modbus_CRC16+0x18>
            }
        }
    }

    return crc;
 80016ea:	89fb      	ldrh	r3, [r7, #14]
}
 80016ec:	4618      	mov	r0, r3
 80016ee:	3714      	adds	r7, #20
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bc80      	pop	{r7}
 80016f4:	4770      	bx	lr

080016f6 <Build_Modbus_Request>:

void Build_Modbus_Request(uint8_t slave_addr, uint16_t start_reg, uint16_t quantity, uint8_t *frame_out) {
 80016f6:	b580      	push	{r7, lr}
 80016f8:	b086      	sub	sp, #24
 80016fa:	af00      	add	r7, sp, #0
 80016fc:	607b      	str	r3, [r7, #4]
 80016fe:	4603      	mov	r3, r0
 8001700:	73fb      	strb	r3, [r7, #15]
 8001702:	460b      	mov	r3, r1
 8001704:	81bb      	strh	r3, [r7, #12]
 8001706:	4613      	mov	r3, r2
 8001708:	817b      	strh	r3, [r7, #10]
    frame_out[0] = slave_addr;                // AA
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	7bfa      	ldrb	r2, [r7, #15]
 800170e:	701a      	strb	r2, [r3, #0]
    frame_out[1] = 0x03;                      // Function Code
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	3301      	adds	r3, #1
 8001714:	2203      	movs	r2, #3
 8001716:	701a      	strb	r2, [r3, #0]

    frame_out[2] = (start_reg >> 8) & 0xFF;   // RRRR (high byte)
 8001718:	89bb      	ldrh	r3, [r7, #12]
 800171a:	0a1b      	lsrs	r3, r3, #8
 800171c:	b29a      	uxth	r2, r3
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	3302      	adds	r3, #2
 8001722:	b2d2      	uxtb	r2, r2
 8001724:	701a      	strb	r2, [r3, #0]
    frame_out[3] = start_reg & 0xFF;          // RRRR (low byte)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	3303      	adds	r3, #3
 800172a:	89ba      	ldrh	r2, [r7, #12]
 800172c:	b2d2      	uxtb	r2, r2
 800172e:	701a      	strb	r2, [r3, #0]

    frame_out[4] = (quantity >> 8) & 0xFF;    // NNNN (high byte)
 8001730:	897b      	ldrh	r3, [r7, #10]
 8001732:	0a1b      	lsrs	r3, r3, #8
 8001734:	b29a      	uxth	r2, r3
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	3304      	adds	r3, #4
 800173a:	b2d2      	uxtb	r2, r2
 800173c:	701a      	strb	r2, [r3, #0]
    frame_out[5] = quantity & 0xFF;           // NNNN (low byte)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	3305      	adds	r3, #5
 8001742:	897a      	ldrh	r2, [r7, #10]
 8001744:	b2d2      	uxtb	r2, r2
 8001746:	701a      	strb	r2, [r3, #0]

    uint16_t crc = Modbus_CRC16(frame_out, 6);  // คำนวณ CRC จาก 6 byte แรก
 8001748:	2106      	movs	r1, #6
 800174a:	6878      	ldr	r0, [r7, #4]
 800174c:	f7ff ff96 	bl	800167c <Modbus_CRC16>
 8001750:	4603      	mov	r3, r0
 8001752:	82fb      	strh	r3, [r7, #22]

    frame_out[6] = crc & 0xFF;               // CRC Low byte
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	3306      	adds	r3, #6
 8001758:	8afa      	ldrh	r2, [r7, #22]
 800175a:	b2d2      	uxtb	r2, r2
 800175c:	701a      	strb	r2, [r3, #0]
    frame_out[7] = (crc >> 8) & 0xFF;        // CRC High byte
 800175e:	8afb      	ldrh	r3, [r7, #22]
 8001760:	0a1b      	lsrs	r3, r3, #8
 8001762:	b29a      	uxth	r2, r3
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	3307      	adds	r3, #7
 8001768:	b2d2      	uxtb	r2, r2
 800176a:	701a      	strb	r2, [r3, #0]
}
 800176c:	bf00      	nop
 800176e:	3718      	adds	r7, #24
 8001770:	46bd      	mov	sp, r7
 8001772:	bd80      	pop	{r7, pc}

08001774 <Decode_TempHumi>:

void Decode_TempHumi(uint8_t *rx_buf) {
 8001774:	b580      	push	{r7, lr}
 8001776:	b088      	sub	sp, #32
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
    int16_t temp_raw = (rx_buf[3] << 8) | rx_buf[4];
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	3303      	adds	r3, #3
 8001780:	781b      	ldrb	r3, [r3, #0]
 8001782:	b21b      	sxth	r3, r3
 8001784:	021b      	lsls	r3, r3, #8
 8001786:	b21a      	sxth	r2, r3
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	3304      	adds	r3, #4
 800178c:	781b      	ldrb	r3, [r3, #0]
 800178e:	b21b      	sxth	r3, r3
 8001790:	4313      	orrs	r3, r2
 8001792:	83fb      	strh	r3, [r7, #30]
    uint16_t humi_raw = (rx_buf[5] << 8) | rx_buf[6];
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	3305      	adds	r3, #5
 8001798:	781b      	ldrb	r3, [r3, #0]
 800179a:	b21b      	sxth	r3, r3
 800179c:	021b      	lsls	r3, r3, #8
 800179e:	b21a      	sxth	r2, r3
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	3306      	adds	r3, #6
 80017a4:	781b      	ldrb	r3, [r3, #0]
 80017a6:	b21b      	sxth	r3, r3
 80017a8:	4313      	orrs	r3, r2
 80017aa:	b21b      	sxth	r3, r3
 80017ac:	83bb      	strh	r3, [r7, #28]
    int16_t dew_raw = (rx_buf[7] << 8) | rx_buf[8];
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	3307      	adds	r3, #7
 80017b2:	781b      	ldrb	r3, [r3, #0]
 80017b4:	b21b      	sxth	r3, r3
 80017b6:	021b      	lsls	r3, r3, #8
 80017b8:	b21a      	sxth	r2, r3
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	3308      	adds	r3, #8
 80017be:	781b      	ldrb	r3, [r3, #0]
 80017c0:	b21b      	sxth	r3, r3
 80017c2:	4313      	orrs	r3, r2
 80017c4:	837b      	strh	r3, [r7, #26]
    uint16_t press_raw = (rx_buf[9] << 8) | rx_buf[10];
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	3309      	adds	r3, #9
 80017ca:	781b      	ldrb	r3, [r3, #0]
 80017cc:	b21b      	sxth	r3, r3
 80017ce:	021b      	lsls	r3, r3, #8
 80017d0:	b21a      	sxth	r2, r3
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	330a      	adds	r3, #10
 80017d6:	781b      	ldrb	r3, [r3, #0]
 80017d8:	b21b      	sxth	r3, r3
 80017da:	4313      	orrs	r3, r2
 80017dc:	b21b      	sxth	r3, r3
 80017de:	833b      	strh	r3, [r7, #24]

    float temp_c = temp_raw / 100.0f;  // °C
 80017e0:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80017e4:	4618      	mov	r0, r3
 80017e6:	f7ff fa71 	bl	8000ccc <__aeabi_i2f>
 80017ea:	4603      	mov	r3, r0
 80017ec:	4925      	ldr	r1, [pc, #148]	@ (8001884 <Decode_TempHumi+0x110>)
 80017ee:	4618      	mov	r0, r3
 80017f0:	f7ff fb74 	bl	8000edc <__aeabi_fdiv>
 80017f4:	4603      	mov	r3, r0
 80017f6:	617b      	str	r3, [r7, #20]
    float humidity = humi_raw / 100.0f;  // %
 80017f8:	8bbb      	ldrh	r3, [r7, #28]
 80017fa:	4618      	mov	r0, r3
 80017fc:	f7ff fa66 	bl	8000ccc <__aeabi_i2f>
 8001800:	4603      	mov	r3, r0
 8001802:	4920      	ldr	r1, [pc, #128]	@ (8001884 <Decode_TempHumi+0x110>)
 8001804:	4618      	mov	r0, r3
 8001806:	f7ff fb69 	bl	8000edc <__aeabi_fdiv>
 800180a:	4603      	mov	r3, r0
 800180c:	613b      	str	r3, [r7, #16]
    float dewpoint_c = dew_raw / 100.0f;  // °C
 800180e:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001812:	4618      	mov	r0, r3
 8001814:	f7ff fa5a 	bl	8000ccc <__aeabi_i2f>
 8001818:	4603      	mov	r3, r0
 800181a:	491a      	ldr	r1, [pc, #104]	@ (8001884 <Decode_TempHumi+0x110>)
 800181c:	4618      	mov	r0, r3
 800181e:	f7ff fb5d 	bl	8000edc <__aeabi_fdiv>
 8001822:	4603      	mov	r3, r0
 8001824:	60fb      	str	r3, [r7, #12]
    float pressure_hpa = press_raw / 10.0f;  // hPa
 8001826:	8b3b      	ldrh	r3, [r7, #24]
 8001828:	4618      	mov	r0, r3
 800182a:	f7ff fa4f 	bl	8000ccc <__aeabi_i2f>
 800182e:	4603      	mov	r3, r0
 8001830:	4915      	ldr	r1, [pc, #84]	@ (8001888 <Decode_TempHumi+0x114>)
 8001832:	4618      	mov	r0, r3
 8001834:	f7ff fb52 	bl	8000edc <__aeabi_fdiv>
 8001838:	4603      	mov	r3, r0
 800183a:	60bb      	str	r3, [r7, #8]

    printf("Temperature: %.2f C\r\n", temp_c);
 800183c:	6978      	ldr	r0, [r7, #20]
 800183e:	f7fe fe5b 	bl	80004f8 <__aeabi_f2d>
 8001842:	4602      	mov	r2, r0
 8001844:	460b      	mov	r3, r1
 8001846:	4811      	ldr	r0, [pc, #68]	@ (800188c <Decode_TempHumi+0x118>)
 8001848:	f004 fa6c 	bl	8005d24 <iprintf>
    printf("Humidity: %.2f %%\r\n", humidity);
 800184c:	6938      	ldr	r0, [r7, #16]
 800184e:	f7fe fe53 	bl	80004f8 <__aeabi_f2d>
 8001852:	4602      	mov	r2, r0
 8001854:	460b      	mov	r3, r1
 8001856:	480e      	ldr	r0, [pc, #56]	@ (8001890 <Decode_TempHumi+0x11c>)
 8001858:	f004 fa64 	bl	8005d24 <iprintf>
    printf("Dew Point: %.2f C\r\n", dewpoint_c);
 800185c:	68f8      	ldr	r0, [r7, #12]
 800185e:	f7fe fe4b 	bl	80004f8 <__aeabi_f2d>
 8001862:	4602      	mov	r2, r0
 8001864:	460b      	mov	r3, r1
 8001866:	480b      	ldr	r0, [pc, #44]	@ (8001894 <Decode_TempHumi+0x120>)
 8001868:	f004 fa5c 	bl	8005d24 <iprintf>
    printf("Pressure: %.1f hPa\r\n", pressure_hpa);
 800186c:	68b8      	ldr	r0, [r7, #8]
 800186e:	f7fe fe43 	bl	80004f8 <__aeabi_f2d>
 8001872:	4602      	mov	r2, r0
 8001874:	460b      	mov	r3, r1
 8001876:	4808      	ldr	r0, [pc, #32]	@ (8001898 <Decode_TempHumi+0x124>)
 8001878:	f004 fa54 	bl	8005d24 <iprintf>
}
 800187c:	bf00      	nop
 800187e:	3720      	adds	r7, #32
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}
 8001884:	42c80000 	.word	0x42c80000
 8001888:	41200000 	.word	0x41200000
 800188c:	08007ce8 	.word	0x08007ce8
 8001890:	08007d00 	.word	0x08007d00
 8001894:	08007d14 	.word	0x08007d14
 8001898:	08007d28 	.word	0x08007d28

0800189c <Decode_Light>:

void Decode_Light(uint8_t *rx_buf) {
 800189c:	b580      	push	{r7, lr}
 800189e:	b084      	sub	sp, #16
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
    // อ่านค่า High และ Low 16 bits ของ Illuminance
    uint16_t lux_high = (rx_buf[3] << 8) | rx_buf[4];  // High 16 bits
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	3303      	adds	r3, #3
 80018a8:	781b      	ldrb	r3, [r3, #0]
 80018aa:	b21b      	sxth	r3, r3
 80018ac:	021b      	lsls	r3, r3, #8
 80018ae:	b21a      	sxth	r2, r3
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	3304      	adds	r3, #4
 80018b4:	781b      	ldrb	r3, [r3, #0]
 80018b6:	b21b      	sxth	r3, r3
 80018b8:	4313      	orrs	r3, r2
 80018ba:	b21b      	sxth	r3, r3
 80018bc:	81fb      	strh	r3, [r7, #14]
    uint16_t lux_low  = (rx_buf[5] << 8) | rx_buf[6];  // Low 16 bits
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	3305      	adds	r3, #5
 80018c2:	781b      	ldrb	r3, [r3, #0]
 80018c4:	b21b      	sxth	r3, r3
 80018c6:	021b      	lsls	r3, r3, #8
 80018c8:	b21a      	sxth	r2, r3
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	3306      	adds	r3, #6
 80018ce:	781b      	ldrb	r3, [r3, #0]
 80018d0:	b21b      	sxth	r3, r3
 80018d2:	4313      	orrs	r3, r2
 80018d4:	b21b      	sxth	r3, r3
 80018d6:	81bb      	strh	r3, [r7, #12]

    // รวม High และ Low 16 bits เป็น 32-bit Illuminance
    uint32_t lux = ((uint32_t)lux_high << 16) | lux_low;
 80018d8:	89fb      	ldrh	r3, [r7, #14]
 80018da:	041a      	lsls	r2, r3, #16
 80018dc:	89bb      	ldrh	r3, [r7, #12]
 80018de:	4313      	orrs	r3, r2
 80018e0:	60bb      	str	r3, [r7, #8]

    // แสดงผล
    printf("Illuminance: %lu lux\r\n", lux);
 80018e2:	68b9      	ldr	r1, [r7, #8]
 80018e4:	4803      	ldr	r0, [pc, #12]	@ (80018f4 <Decode_Light+0x58>)
 80018e6:	f004 fa1d 	bl	8005d24 <iprintf>
}
 80018ea:	bf00      	nop
 80018ec:	3710      	adds	r7, #16
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop
 80018f4:	08007d40 	.word	0x08007d40

080018f8 <Decode_Soil>:

void Decode_Soil(uint8_t *rx_buf) {
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b086      	sub	sp, #24
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
    // ดึง Humidity (unsigned)
    uint16_t humi_raw = (rx_buf[3] << 8) | rx_buf[4];
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	3303      	adds	r3, #3
 8001904:	781b      	ldrb	r3, [r3, #0]
 8001906:	b21b      	sxth	r3, r3
 8001908:	021b      	lsls	r3, r3, #8
 800190a:	b21a      	sxth	r2, r3
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	3304      	adds	r3, #4
 8001910:	781b      	ldrb	r3, [r3, #0]
 8001912:	b21b      	sxth	r3, r3
 8001914:	4313      	orrs	r3, r2
 8001916:	b21b      	sxth	r3, r3
 8001918:	82fb      	strh	r3, [r7, #22]
    // ดึง Temperature (signed)
    int16_t temp_raw = (rx_buf[5] << 8) | rx_buf[6];
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	3305      	adds	r3, #5
 800191e:	781b      	ldrb	r3, [r3, #0]
 8001920:	b21b      	sxth	r3, r3
 8001922:	021b      	lsls	r3, r3, #8
 8001924:	b21a      	sxth	r2, r3
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	3306      	adds	r3, #6
 800192a:	781b      	ldrb	r3, [r3, #0]
 800192c:	b21b      	sxth	r3, r3
 800192e:	4313      	orrs	r3, r2
 8001930:	82bb      	strh	r3, [r7, #20]

    // แปลงหน่วย
    float humidity = humi_raw / 10.0f;   // %RH
 8001932:	8afb      	ldrh	r3, [r7, #22]
 8001934:	4618      	mov	r0, r3
 8001936:	f7ff f9c9 	bl	8000ccc <__aeabi_i2f>
 800193a:	4603      	mov	r3, r0
 800193c:	4912      	ldr	r1, [pc, #72]	@ (8001988 <Decode_Soil+0x90>)
 800193e:	4618      	mov	r0, r3
 8001940:	f7ff facc 	bl	8000edc <__aeabi_fdiv>
 8001944:	4603      	mov	r3, r0
 8001946:	613b      	str	r3, [r7, #16]
    float temperature = temp_raw / 10.0f; // °C
 8001948:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800194c:	4618      	mov	r0, r3
 800194e:	f7ff f9bd 	bl	8000ccc <__aeabi_i2f>
 8001952:	4603      	mov	r3, r0
 8001954:	490c      	ldr	r1, [pc, #48]	@ (8001988 <Decode_Soil+0x90>)
 8001956:	4618      	mov	r0, r3
 8001958:	f7ff fac0 	bl	8000edc <__aeabi_fdiv>
 800195c:	4603      	mov	r3, r0
 800195e:	60fb      	str	r3, [r7, #12]

    // แสดงผล
    printf("Humidity: %.1f %%RH\r\n", humidity);
 8001960:	6938      	ldr	r0, [r7, #16]
 8001962:	f7fe fdc9 	bl	80004f8 <__aeabi_f2d>
 8001966:	4602      	mov	r2, r0
 8001968:	460b      	mov	r3, r1
 800196a:	4808      	ldr	r0, [pc, #32]	@ (800198c <Decode_Soil+0x94>)
 800196c:	f004 f9da 	bl	8005d24 <iprintf>
    printf("Temperature: %.1f C\r\n", temperature);
 8001970:	68f8      	ldr	r0, [r7, #12]
 8001972:	f7fe fdc1 	bl	80004f8 <__aeabi_f2d>
 8001976:	4602      	mov	r2, r0
 8001978:	460b      	mov	r3, r1
 800197a:	4805      	ldr	r0, [pc, #20]	@ (8001990 <Decode_Soil+0x98>)
 800197c:	f004 f9d2 	bl	8005d24 <iprintf>
}
 8001980:	bf00      	nop
 8001982:	3718      	adds	r7, #24
 8001984:	46bd      	mov	sp, r7
 8001986:	bd80      	pop	{r7, pc}
 8001988:	41200000 	.word	0x41200000
 800198c:	08007d58 	.word	0x08007d58
 8001990:	08007d70 	.word	0x08007d70

08001994 <TempHumi>:

void TempHumi() {
 8001994:	b580      	push	{r7, lr}
 8001996:	b082      	sub	sp, #8
 8001998:	af00      	add	r7, sp, #0
	Build_Modbus_Request(0x01, 0x0000, 0x0004, modbus_frame);
 800199a:	4b21      	ldr	r3, [pc, #132]	@ (8001a20 <TempHumi+0x8c>)
 800199c:	2204      	movs	r2, #4
 800199e:	2100      	movs	r1, #0
 80019a0:	2001      	movs	r0, #1
 80019a2:	f7ff fea8 	bl	80016f6 <Build_Modbus_Request>
	HAL_UART_Transmit(&huart2, modbus_frame, 8, UART_TIMEOUT);
 80019a6:	4b1f      	ldr	r3, [pc, #124]	@ (8001a24 <TempHumi+0x90>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	2208      	movs	r2, #8
 80019ac:	491c      	ldr	r1, [pc, #112]	@ (8001a20 <TempHumi+0x8c>)
 80019ae:	481e      	ldr	r0, [pc, #120]	@ (8001a28 <TempHumi+0x94>)
 80019b0:	f002 fa21 	bl	8003df6 <HAL_UART_Transmit>
//	HAL_Delay(10);  // wait for sensor to respond

	if (HAL_UART_Receive(&huart2, rx_buffer, UART_RX_AIR_LENGTH, UART_TIMEOUT) == HAL_OK) {
 80019b4:	4b1d      	ldr	r3, [pc, #116]	@ (8001a2c <TempHumi+0x98>)
 80019b6:	781b      	ldrb	r3, [r3, #0]
 80019b8:	461a      	mov	r2, r3
 80019ba:	4b1a      	ldr	r3, [pc, #104]	@ (8001a24 <TempHumi+0x90>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	491c      	ldr	r1, [pc, #112]	@ (8001a30 <TempHumi+0x9c>)
 80019c0:	4819      	ldr	r0, [pc, #100]	@ (8001a28 <TempHumi+0x94>)
 80019c2:	f002 fa9e 	bl	8003f02 <HAL_UART_Receive>
 80019c6:	4603      	mov	r3, r0
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d11d      	bne.n	8001a08 <TempHumi+0x74>
		printf("TEMPHUMI: ");
 80019cc:	4819      	ldr	r0, [pc, #100]	@ (8001a34 <TempHumi+0xa0>)
 80019ce:	f004 f9a9 	bl	8005d24 <iprintf>
		for (int i = 0; i < UART_RX_AIR_LENGTH; i++) {
 80019d2:	2300      	movs	r3, #0
 80019d4:	607b      	str	r3, [r7, #4]
 80019d6:	e00a      	b.n	80019ee <TempHumi+0x5a>
		    printf("%d ", rx_buffer[i]);
 80019d8:	4a15      	ldr	r2, [pc, #84]	@ (8001a30 <TempHumi+0x9c>)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	4413      	add	r3, r2
 80019de:	781b      	ldrb	r3, [r3, #0]
 80019e0:	4619      	mov	r1, r3
 80019e2:	4815      	ldr	r0, [pc, #84]	@ (8001a38 <TempHumi+0xa4>)
 80019e4:	f004 f99e 	bl	8005d24 <iprintf>
		for (int i = 0; i < UART_RX_AIR_LENGTH; i++) {
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	3301      	adds	r3, #1
 80019ec:	607b      	str	r3, [r7, #4]
 80019ee:	4b0f      	ldr	r3, [pc, #60]	@ (8001a2c <TempHumi+0x98>)
 80019f0:	781b      	ldrb	r3, [r3, #0]
 80019f2:	461a      	mov	r2, r3
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	4293      	cmp	r3, r2
 80019f8:	dbee      	blt.n	80019d8 <TempHumi+0x44>
		}
	    printf("\r\n");
 80019fa:	4810      	ldr	r0, [pc, #64]	@ (8001a3c <TempHumi+0xa8>)
 80019fc:	f004 f9fa 	bl	8005df4 <puts>

	    Decode_TempHumi(rx_buffer);
 8001a00:	480b      	ldr	r0, [pc, #44]	@ (8001a30 <TempHumi+0x9c>)
 8001a02:	f7ff feb7 	bl	8001774 <Decode_TempHumi>
 8001a06:	e002      	b.n	8001a0e <TempHumi+0x7a>
	} else {
	    printf("Receive failed\r\n");
 8001a08:	480d      	ldr	r0, [pc, #52]	@ (8001a40 <TempHumi+0xac>)
 8001a0a:	f004 f9f3 	bl	8005df4 <puts>
	}

	HAL_Delay(HAL_DELAY_TIME);
 8001a0e:	4b0d      	ldr	r3, [pc, #52]	@ (8001a44 <TempHumi+0xb0>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4618      	mov	r0, r3
 8001a14:	f000 fb32 	bl	800207c <HAL_Delay>
}
 8001a18:	bf00      	nop
 8001a1a:	3708      	adds	r7, #8
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bd80      	pop	{r7, pc}
 8001a20:	2000020c 	.word	0x2000020c
 8001a24:	20000004 	.word	0x20000004
 8001a28:	200002a8 	.word	0x200002a8
 8001a2c:	20000000 	.word	0x20000000
 8001a30:	200001fc 	.word	0x200001fc
 8001a34:	08007d88 	.word	0x08007d88
 8001a38:	08007d94 	.word	0x08007d94
 8001a3c:	08007d98 	.word	0x08007d98
 8001a40:	08007d9c 	.word	0x08007d9c
 8001a44:	20000008 	.word	0x20000008

08001a48 <Light>:

void Light() {
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b082      	sub	sp, #8
 8001a4c:	af00      	add	r7, sp, #0
	Build_Modbus_Request(0x02, 0x0000, 0x0002, modbus_frame);
 8001a4e:	4b21      	ldr	r3, [pc, #132]	@ (8001ad4 <Light+0x8c>)
 8001a50:	2202      	movs	r2, #2
 8001a52:	2100      	movs	r1, #0
 8001a54:	2002      	movs	r0, #2
 8001a56:	f7ff fe4e 	bl	80016f6 <Build_Modbus_Request>
	HAL_UART_Transmit(&huart2, modbus_frame, 8, UART_TIMEOUT);
 8001a5a:	4b1f      	ldr	r3, [pc, #124]	@ (8001ad8 <Light+0x90>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	2208      	movs	r2, #8
 8001a60:	491c      	ldr	r1, [pc, #112]	@ (8001ad4 <Light+0x8c>)
 8001a62:	481e      	ldr	r0, [pc, #120]	@ (8001adc <Light+0x94>)
 8001a64:	f002 f9c7 	bl	8003df6 <HAL_UART_Transmit>

//	HAL_Delay(10);  // wait for sensor to respond

	if (HAL_UART_Receive(&huart2, rx_buffer, UART_RX_LIGHT_LENGTH, UART_TIMEOUT) == HAL_OK) {
 8001a68:	4b1d      	ldr	r3, [pc, #116]	@ (8001ae0 <Light+0x98>)
 8001a6a:	781b      	ldrb	r3, [r3, #0]
 8001a6c:	461a      	mov	r2, r3
 8001a6e:	4b1a      	ldr	r3, [pc, #104]	@ (8001ad8 <Light+0x90>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	491c      	ldr	r1, [pc, #112]	@ (8001ae4 <Light+0x9c>)
 8001a74:	4819      	ldr	r0, [pc, #100]	@ (8001adc <Light+0x94>)
 8001a76:	f002 fa44 	bl	8003f02 <HAL_UART_Receive>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d11d      	bne.n	8001abc <Light+0x74>
		printf("LIGHT: ");
 8001a80:	4819      	ldr	r0, [pc, #100]	@ (8001ae8 <Light+0xa0>)
 8001a82:	f004 f94f 	bl	8005d24 <iprintf>
		for (int i = 0; i < UART_RX_LIGHT_LENGTH; i++) {
 8001a86:	2300      	movs	r3, #0
 8001a88:	607b      	str	r3, [r7, #4]
 8001a8a:	e00a      	b.n	8001aa2 <Light+0x5a>
		    printf("%d ", rx_buffer[i]);
 8001a8c:	4a15      	ldr	r2, [pc, #84]	@ (8001ae4 <Light+0x9c>)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	4413      	add	r3, r2
 8001a92:	781b      	ldrb	r3, [r3, #0]
 8001a94:	4619      	mov	r1, r3
 8001a96:	4815      	ldr	r0, [pc, #84]	@ (8001aec <Light+0xa4>)
 8001a98:	f004 f944 	bl	8005d24 <iprintf>
		for (int i = 0; i < UART_RX_LIGHT_LENGTH; i++) {
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	3301      	adds	r3, #1
 8001aa0:	607b      	str	r3, [r7, #4]
 8001aa2:	4b0f      	ldr	r3, [pc, #60]	@ (8001ae0 <Light+0x98>)
 8001aa4:	781b      	ldrb	r3, [r3, #0]
 8001aa6:	461a      	mov	r2, r3
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	dbee      	blt.n	8001a8c <Light+0x44>
		}
	    printf("\r\n");
 8001aae:	4810      	ldr	r0, [pc, #64]	@ (8001af0 <Light+0xa8>)
 8001ab0:	f004 f9a0 	bl	8005df4 <puts>

	    Decode_Light(rx_buffer);
 8001ab4:	480b      	ldr	r0, [pc, #44]	@ (8001ae4 <Light+0x9c>)
 8001ab6:	f7ff fef1 	bl	800189c <Decode_Light>
 8001aba:	e002      	b.n	8001ac2 <Light+0x7a>
	} else {
	    printf("Receive failed\r\n");
 8001abc:	480d      	ldr	r0, [pc, #52]	@ (8001af4 <Light+0xac>)
 8001abe:	f004 f999 	bl	8005df4 <puts>
	}

	HAL_Delay(HAL_DELAY_TIME);
 8001ac2:	4b0d      	ldr	r3, [pc, #52]	@ (8001af8 <Light+0xb0>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f000 fad8 	bl	800207c <HAL_Delay>
}
 8001acc:	bf00      	nop
 8001ace:	3708      	adds	r7, #8
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bd80      	pop	{r7, pc}
 8001ad4:	2000020c 	.word	0x2000020c
 8001ad8:	20000004 	.word	0x20000004
 8001adc:	200002a8 	.word	0x200002a8
 8001ae0:	20000002 	.word	0x20000002
 8001ae4:	200001fc 	.word	0x200001fc
 8001ae8:	08007dac 	.word	0x08007dac
 8001aec:	08007d94 	.word	0x08007d94
 8001af0:	08007d98 	.word	0x08007d98
 8001af4:	08007d9c 	.word	0x08007d9c
 8001af8:	20000008 	.word	0x20000008

08001afc <SoilTempHumi>:

void SoilTempHumi() {
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b082      	sub	sp, #8
 8001b00:	af00      	add	r7, sp, #0
	Build_Modbus_Request(0x03, 0x0000, 0x0002, modbus_frame);
 8001b02:	4b21      	ldr	r3, [pc, #132]	@ (8001b88 <SoilTempHumi+0x8c>)
 8001b04:	2202      	movs	r2, #2
 8001b06:	2100      	movs	r1, #0
 8001b08:	2003      	movs	r0, #3
 8001b0a:	f7ff fdf4 	bl	80016f6 <Build_Modbus_Request>
	HAL_UART_Transmit(&huart2, modbus_frame, 8, UART_TIMEOUT);
 8001b0e:	4b1f      	ldr	r3, [pc, #124]	@ (8001b8c <SoilTempHumi+0x90>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	2208      	movs	r2, #8
 8001b14:	491c      	ldr	r1, [pc, #112]	@ (8001b88 <SoilTempHumi+0x8c>)
 8001b16:	481e      	ldr	r0, [pc, #120]	@ (8001b90 <SoilTempHumi+0x94>)
 8001b18:	f002 f96d 	bl	8003df6 <HAL_UART_Transmit>

//	HAL_Delay(10);  // wait for sensor to respond
//	HAL_UART_Receive(&huart2, rx_buffer, UART_RX_SOIL_LENGTH, UART_TIMEOUT);

	if (HAL_UART_Receive(&huart2, rx_buffer, UART_RX_SOIL_LENGTH, UART_TIMEOUT) == HAL_OK) {
 8001b1c:	4b1d      	ldr	r3, [pc, #116]	@ (8001b94 <SoilTempHumi+0x98>)
 8001b1e:	781b      	ldrb	r3, [r3, #0]
 8001b20:	461a      	mov	r2, r3
 8001b22:	4b1a      	ldr	r3, [pc, #104]	@ (8001b8c <SoilTempHumi+0x90>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	491c      	ldr	r1, [pc, #112]	@ (8001b98 <SoilTempHumi+0x9c>)
 8001b28:	4819      	ldr	r0, [pc, #100]	@ (8001b90 <SoilTempHumi+0x94>)
 8001b2a:	f002 f9ea 	bl	8003f02 <HAL_UART_Receive>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d11d      	bne.n	8001b70 <SoilTempHumi+0x74>
		printf("SOIL: ");
 8001b34:	4819      	ldr	r0, [pc, #100]	@ (8001b9c <SoilTempHumi+0xa0>)
 8001b36:	f004 f8f5 	bl	8005d24 <iprintf>
		for (int i = 0; i < UART_RX_SOIL_LENGTH; i++) {
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	607b      	str	r3, [r7, #4]
 8001b3e:	e00a      	b.n	8001b56 <SoilTempHumi+0x5a>
		    printf("%d ", rx_buffer[i]);
 8001b40:	4a15      	ldr	r2, [pc, #84]	@ (8001b98 <SoilTempHumi+0x9c>)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	4413      	add	r3, r2
 8001b46:	781b      	ldrb	r3, [r3, #0]
 8001b48:	4619      	mov	r1, r3
 8001b4a:	4815      	ldr	r0, [pc, #84]	@ (8001ba0 <SoilTempHumi+0xa4>)
 8001b4c:	f004 f8ea 	bl	8005d24 <iprintf>
		for (int i = 0; i < UART_RX_SOIL_LENGTH; i++) {
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	3301      	adds	r3, #1
 8001b54:	607b      	str	r3, [r7, #4]
 8001b56:	4b0f      	ldr	r3, [pc, #60]	@ (8001b94 <SoilTempHumi+0x98>)
 8001b58:	781b      	ldrb	r3, [r3, #0]
 8001b5a:	461a      	mov	r2, r3
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	dbee      	blt.n	8001b40 <SoilTempHumi+0x44>
		}
	    printf("\r\n");
 8001b62:	4810      	ldr	r0, [pc, #64]	@ (8001ba4 <SoilTempHumi+0xa8>)
 8001b64:	f004 f946 	bl	8005df4 <puts>

	    Decode_Soil(rx_buffer);
 8001b68:	480b      	ldr	r0, [pc, #44]	@ (8001b98 <SoilTempHumi+0x9c>)
 8001b6a:	f7ff fec5 	bl	80018f8 <Decode_Soil>
 8001b6e:	e002      	b.n	8001b76 <SoilTempHumi+0x7a>
	} else {
	    printf("Receive failed\r\n");
 8001b70:	480d      	ldr	r0, [pc, #52]	@ (8001ba8 <SoilTempHumi+0xac>)
 8001b72:	f004 f93f 	bl	8005df4 <puts>
	}

	HAL_Delay(HAL_DELAY_TIME);
 8001b76:	4b0d      	ldr	r3, [pc, #52]	@ (8001bac <SoilTempHumi+0xb0>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f000 fa7e 	bl	800207c <HAL_Delay>
}
 8001b80:	bf00      	nop
 8001b82:	3708      	adds	r7, #8
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd80      	pop	{r7, pc}
 8001b88:	2000020c 	.word	0x2000020c
 8001b8c:	20000004 	.word	0x20000004
 8001b90:	200002a8 	.word	0x200002a8
 8001b94:	20000001 	.word	0x20000001
 8001b98:	200001fc 	.word	0x200001fc
 8001b9c:	08007db4 	.word	0x08007db4
 8001ba0:	08007d94 	.word	0x08007d94
 8001ba4:	08007d98 	.word	0x08007d98
 8001ba8:	08007d9c 	.word	0x08007d9c
 8001bac:	20000008 	.word	0x20000008

08001bb0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001bb4:	b672      	cpsid	i
}
 8001bb6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001bb8:	bf00      	nop
 8001bba:	e7fd      	b.n	8001bb8 <Error_Handler+0x8>

08001bbc <LL_AHB2_GRP1_EnableClock>:
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	b085      	sub	sp, #20
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001bc4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001bc8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001bca:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	4313      	orrs	r3, r2
 8001bd2:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001bd4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001bd8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	4013      	ands	r3, r2
 8001bde:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001be0:	68fb      	ldr	r3, [r7, #12]
}
 8001be2:	bf00      	nop
 8001be4:	3714      	adds	r7, #20
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bc80      	pop	{r7}
 8001bea:	4770      	bx	lr

08001bec <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_DAC
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001bec:	b480      	push	{r7}
 8001bee:	b085      	sub	sp, #20
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001bf4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001bf8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001bfa:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	4313      	orrs	r3, r2
 8001c02:	658b      	str	r3, [r1, #88]	@ 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001c04:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c08:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	4013      	ands	r3, r2
 8001c0e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001c10:	68fb      	ldr	r3, [r7, #12]
}
 8001c12:	bf00      	nop
 8001c14:	3714      	adds	r7, #20
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bc80      	pop	{r7}
 8001c1a:	4770      	bx	lr

08001c1c <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b085      	sub	sp, #20
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001c24:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c28:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001c2a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	4313      	orrs	r3, r2
 8001c32:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001c34:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c38:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	4013      	ands	r3, r2
 8001c3e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001c40:	68fb      	ldr	r3, [r7, #12]
}
 8001c42:	bf00      	nop
 8001c44:	3714      	adds	r7, #20
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bc80      	pop	{r7}
 8001c4a:	4770      	bx	lr

08001c4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c50:	bf00      	nop
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bc80      	pop	{r7}
 8001c56:	4770      	bx	lr

08001c58 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b096      	sub	sp, #88	@ 0x58
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c60:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001c64:	2200      	movs	r2, #0
 8001c66:	601a      	str	r2, [r3, #0]
 8001c68:	605a      	str	r2, [r3, #4]
 8001c6a:	609a      	str	r2, [r3, #8]
 8001c6c:	60da      	str	r2, [r3, #12]
 8001c6e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c70:	f107 030c 	add.w	r3, r7, #12
 8001c74:	2238      	movs	r2, #56	@ 0x38
 8001c76:	2100      	movs	r1, #0
 8001c78:	4618      	mov	r0, r3
 8001c7a:	f004 f99b 	bl	8005fb4 <memset>
  if(huart->Instance==USART1)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	4a35      	ldr	r2, [pc, #212]	@ (8001d58 <HAL_UART_MspInit+0x100>)
 8001c84:	4293      	cmp	r3, r2
 8001c86:	d12e      	bne.n	8001ce6 <HAL_UART_MspInit+0x8e>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001c88:	2301      	movs	r3, #1
 8001c8a:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001c8c:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 8001c90:	613b      	str	r3, [r7, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c92:	f107 030c 	add.w	r3, r7, #12
 8001c96:	4618      	mov	r0, r3
 8001c98:	f001 ff22 	bl	8003ae0 <HAL_RCCEx_PeriphCLKConfig>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d001      	beq.n	8001ca6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001ca2:	f7ff ff85 	bl	8001bb0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001ca6:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8001caa:	f7ff ffb7 	bl	8001c1c <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cae:	2002      	movs	r0, #2
 8001cb0:	f7ff ff84 	bl	8001bbc <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8001cb4:	23c0      	movs	r3, #192	@ 0xc0
 8001cb6:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cb8:	2302      	movs	r3, #2
 8001cba:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001cc4:	2307      	movs	r3, #7
 8001cc6:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cc8:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001ccc:	4619      	mov	r1, r3
 8001cce:	4823      	ldr	r0, [pc, #140]	@ (8001d5c <HAL_UART_MspInit+0x104>)
 8001cd0:	f000 fbc0 	bl	8002454 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	2100      	movs	r1, #0
 8001cd8:	2024      	movs	r0, #36	@ 0x24
 8001cda:	f000 faca 	bl	8002272 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001cde:	2024      	movs	r0, #36	@ 0x24
 8001ce0:	f000 fae1 	bl	80022a6 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USER CODE END USART2_MspInit 1 */
  }

}
 8001ce4:	e033      	b.n	8001d4e <HAL_UART_MspInit+0xf6>
  else if(huart->Instance==USART2)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4a1d      	ldr	r2, [pc, #116]	@ (8001d60 <HAL_UART_MspInit+0x108>)
 8001cec:	4293      	cmp	r3, r2
 8001cee:	d12e      	bne.n	8001d4e <HAL_UART_MspInit+0xf6>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001cf0:	2302      	movs	r3, #2
 8001cf2:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001cf4:	f44f 2340 	mov.w	r3, #786432	@ 0xc0000
 8001cf8:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001cfa:	f107 030c 	add.w	r3, r7, #12
 8001cfe:	4618      	mov	r0, r3
 8001d00:	f001 feee 	bl	8003ae0 <HAL_RCCEx_PeriphCLKConfig>
 8001d04:	4603      	mov	r3, r0
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d001      	beq.n	8001d0e <HAL_UART_MspInit+0xb6>
      Error_Handler();
 8001d0a:	f7ff ff51 	bl	8001bb0 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001d0e:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8001d12:	f7ff ff6b 	bl	8001bec <LL_APB1_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d16:	2001      	movs	r0, #1
 8001d18:	f7ff ff50 	bl	8001bbc <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_2;
 8001d1c:	230c      	movs	r3, #12
 8001d1e:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d20:	2302      	movs	r3, #2
 8001d22:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d24:	2300      	movs	r3, #0
 8001d26:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001d2c:	2307      	movs	r3, #7
 8001d2e:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d30:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001d34:	4619      	mov	r1, r3
 8001d36:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001d3a:	f000 fb8b 	bl	8002454 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001d3e:	2200      	movs	r2, #0
 8001d40:	2100      	movs	r1, #0
 8001d42:	2025      	movs	r0, #37	@ 0x25
 8001d44:	f000 fa95 	bl	8002272 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001d48:	2025      	movs	r0, #37	@ 0x25
 8001d4a:	f000 faac 	bl	80022a6 <HAL_NVIC_EnableIRQ>
}
 8001d4e:	bf00      	nop
 8001d50:	3758      	adds	r7, #88	@ 0x58
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}
 8001d56:	bf00      	nop
 8001d58:	40013800 	.word	0x40013800
 8001d5c:	48000400 	.word	0x48000400
 8001d60:	40004400 	.word	0x40004400

08001d64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d64:	b480      	push	{r7}
 8001d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001d68:	bf00      	nop
 8001d6a:	e7fd      	b.n	8001d68 <NMI_Handler+0x4>

08001d6c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d70:	bf00      	nop
 8001d72:	e7fd      	b.n	8001d70 <HardFault_Handler+0x4>

08001d74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d74:	b480      	push	{r7}
 8001d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d78:	bf00      	nop
 8001d7a:	e7fd      	b.n	8001d78 <MemManage_Handler+0x4>

08001d7c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d80:	bf00      	nop
 8001d82:	e7fd      	b.n	8001d80 <BusFault_Handler+0x4>

08001d84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d84:	b480      	push	{r7}
 8001d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d88:	bf00      	nop
 8001d8a:	e7fd      	b.n	8001d88 <UsageFault_Handler+0x4>

08001d8c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d90:	bf00      	nop
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bc80      	pop	{r7}
 8001d96:	4770      	bx	lr

08001d98 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d9c:	bf00      	nop
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bc80      	pop	{r7}
 8001da2:	4770      	bx	lr

08001da4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001da4:	b480      	push	{r7}
 8001da6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001da8:	bf00      	nop
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bc80      	pop	{r7}
 8001dae:	4770      	bx	lr

08001db0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001db4:	f000 f946 	bl	8002044 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001db8:	bf00      	nop
 8001dba:	bd80      	pop	{r7, pc}

08001dbc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 Interrupt.
  */
void USART1_IRQHandler(void)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001dc0:	4802      	ldr	r0, [pc, #8]	@ (8001dcc <USART1_IRQHandler+0x10>)
 8001dc2:	f002 f963 	bl	800408c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001dc6:	bf00      	nop
 8001dc8:	bd80      	pop	{r7, pc}
 8001dca:	bf00      	nop
 8001dcc:	20000214 	.word	0x20000214

08001dd0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 Interrupt.
  */
void USART2_IRQHandler(void)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001dd4:	4802      	ldr	r0, [pc, #8]	@ (8001de0 <USART2_IRQHandler+0x10>)
 8001dd6:	f002 f959 	bl	800408c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001dda:	bf00      	nop
 8001ddc:	bd80      	pop	{r7, pc}
 8001dde:	bf00      	nop
 8001de0:	200002a8 	.word	0x200002a8

08001de4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001de4:	b480      	push	{r7}
 8001de6:	af00      	add	r7, sp, #0
  return 1;
 8001de8:	2301      	movs	r3, #1
}
 8001dea:	4618      	mov	r0, r3
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bc80      	pop	{r7}
 8001df0:	4770      	bx	lr

08001df2 <_kill>:

int _kill(int pid, int sig)
{
 8001df2:	b580      	push	{r7, lr}
 8001df4:	b082      	sub	sp, #8
 8001df6:	af00      	add	r7, sp, #0
 8001df8:	6078      	str	r0, [r7, #4]
 8001dfa:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001dfc:	f004 f92c 	bl	8006058 <__errno>
 8001e00:	4603      	mov	r3, r0
 8001e02:	2216      	movs	r2, #22
 8001e04:	601a      	str	r2, [r3, #0]
  return -1;
 8001e06:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	3708      	adds	r7, #8
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}

08001e12 <_exit>:

void _exit (int status)
{
 8001e12:	b580      	push	{r7, lr}
 8001e14:	b082      	sub	sp, #8
 8001e16:	af00      	add	r7, sp, #0
 8001e18:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001e1a:	f04f 31ff 	mov.w	r1, #4294967295
 8001e1e:	6878      	ldr	r0, [r7, #4]
 8001e20:	f7ff ffe7 	bl	8001df2 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001e24:	bf00      	nop
 8001e26:	e7fd      	b.n	8001e24 <_exit+0x12>

08001e28 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b086      	sub	sp, #24
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	60f8      	str	r0, [r7, #12]
 8001e30:	60b9      	str	r1, [r7, #8]
 8001e32:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e34:	2300      	movs	r3, #0
 8001e36:	617b      	str	r3, [r7, #20]
 8001e38:	e00a      	b.n	8001e50 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001e3a:	f3af 8000 	nop.w
 8001e3e:	4601      	mov	r1, r0
 8001e40:	68bb      	ldr	r3, [r7, #8]
 8001e42:	1c5a      	adds	r2, r3, #1
 8001e44:	60ba      	str	r2, [r7, #8]
 8001e46:	b2ca      	uxtb	r2, r1
 8001e48:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e4a:	697b      	ldr	r3, [r7, #20]
 8001e4c:	3301      	adds	r3, #1
 8001e4e:	617b      	str	r3, [r7, #20]
 8001e50:	697a      	ldr	r2, [r7, #20]
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	429a      	cmp	r2, r3
 8001e56:	dbf0      	blt.n	8001e3a <_read+0x12>
  }

  return len;
 8001e58:	687b      	ldr	r3, [r7, #4]
}
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	3718      	adds	r7, #24
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}

08001e62 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001e62:	b480      	push	{r7}
 8001e64:	b083      	sub	sp, #12
 8001e66:	af00      	add	r7, sp, #0
 8001e68:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001e6a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e6e:	4618      	mov	r0, r3
 8001e70:	370c      	adds	r7, #12
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bc80      	pop	{r7}
 8001e76:	4770      	bx	lr

08001e78 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	b083      	sub	sp, #12
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
 8001e80:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001e88:	605a      	str	r2, [r3, #4]
  return 0;
 8001e8a:	2300      	movs	r3, #0
}
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	370c      	adds	r7, #12
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bc80      	pop	{r7}
 8001e94:	4770      	bx	lr

08001e96 <_isatty>:

int _isatty(int file)
{
 8001e96:	b480      	push	{r7}
 8001e98:	b083      	sub	sp, #12
 8001e9a:	af00      	add	r7, sp, #0
 8001e9c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001e9e:	2301      	movs	r3, #1
}
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	370c      	adds	r7, #12
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bc80      	pop	{r7}
 8001ea8:	4770      	bx	lr

08001eaa <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001eaa:	b480      	push	{r7}
 8001eac:	b085      	sub	sp, #20
 8001eae:	af00      	add	r7, sp, #0
 8001eb0:	60f8      	str	r0, [r7, #12]
 8001eb2:	60b9      	str	r1, [r7, #8]
 8001eb4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001eb6:	2300      	movs	r3, #0
}
 8001eb8:	4618      	mov	r0, r3
 8001eba:	3714      	adds	r7, #20
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bc80      	pop	{r7}
 8001ec0:	4770      	bx	lr
	...

08001ec4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b086      	sub	sp, #24
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ecc:	4a14      	ldr	r2, [pc, #80]	@ (8001f20 <_sbrk+0x5c>)
 8001ece:	4b15      	ldr	r3, [pc, #84]	@ (8001f24 <_sbrk+0x60>)
 8001ed0:	1ad3      	subs	r3, r2, r3
 8001ed2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ed4:	697b      	ldr	r3, [r7, #20]
 8001ed6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ed8:	4b13      	ldr	r3, [pc, #76]	@ (8001f28 <_sbrk+0x64>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d102      	bne.n	8001ee6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ee0:	4b11      	ldr	r3, [pc, #68]	@ (8001f28 <_sbrk+0x64>)
 8001ee2:	4a12      	ldr	r2, [pc, #72]	@ (8001f2c <_sbrk+0x68>)
 8001ee4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ee6:	4b10      	ldr	r3, [pc, #64]	@ (8001f28 <_sbrk+0x64>)
 8001ee8:	681a      	ldr	r2, [r3, #0]
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	4413      	add	r3, r2
 8001eee:	693a      	ldr	r2, [r7, #16]
 8001ef0:	429a      	cmp	r2, r3
 8001ef2:	d207      	bcs.n	8001f04 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ef4:	f004 f8b0 	bl	8006058 <__errno>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	220c      	movs	r2, #12
 8001efc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001efe:	f04f 33ff 	mov.w	r3, #4294967295
 8001f02:	e009      	b.n	8001f18 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f04:	4b08      	ldr	r3, [pc, #32]	@ (8001f28 <_sbrk+0x64>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f0a:	4b07      	ldr	r3, [pc, #28]	@ (8001f28 <_sbrk+0x64>)
 8001f0c:	681a      	ldr	r2, [r3, #0]
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	4413      	add	r3, r2
 8001f12:	4a05      	ldr	r2, [pc, #20]	@ (8001f28 <_sbrk+0x64>)
 8001f14:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f16:	68fb      	ldr	r3, [r7, #12]
}
 8001f18:	4618      	mov	r0, r3
 8001f1a:	3718      	adds	r7, #24
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bd80      	pop	{r7, pc}
 8001f20:	20010000 	.word	0x20010000
 8001f24:	00000400 	.word	0x00000400
 8001f28:	2000033c 	.word	0x2000033c
 8001f2c:	20000490 	.word	0x20000490

08001f30 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f30:	b480      	push	{r7}
 8001f32:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8001f34:	bf00      	nop
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bc80      	pop	{r7}
 8001f3a:	4770      	bx	lr

08001f3c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001f3c:	480d      	ldr	r0, [pc, #52]	@ (8001f74 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001f3e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001f40:	f7ff fff6 	bl	8001f30 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f44:	480c      	ldr	r0, [pc, #48]	@ (8001f78 <LoopForever+0x6>)
  ldr r1, =_edata
 8001f46:	490d      	ldr	r1, [pc, #52]	@ (8001f7c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001f48:	4a0d      	ldr	r2, [pc, #52]	@ (8001f80 <LoopForever+0xe>)
  movs r3, #0
 8001f4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f4c:	e002      	b.n	8001f54 <LoopCopyDataInit>

08001f4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f52:	3304      	adds	r3, #4

08001f54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f58:	d3f9      	bcc.n	8001f4e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f5a:	4a0a      	ldr	r2, [pc, #40]	@ (8001f84 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001f5c:	4c0a      	ldr	r4, [pc, #40]	@ (8001f88 <LoopForever+0x16>)
  movs r3, #0
 8001f5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f60:	e001      	b.n	8001f66 <LoopFillZerobss>

08001f62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f64:	3204      	adds	r2, #4

08001f66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f68:	d3fb      	bcc.n	8001f62 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001f6a:	f004 f87b 	bl	8006064 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001f6e:	f7ff fa25 	bl	80013bc <main>

08001f72 <LoopForever>:

LoopForever:
    b LoopForever
 8001f72:	e7fe      	b.n	8001f72 <LoopForever>
  ldr   r0, =_estack
 8001f74:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001f78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f7c:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8001f80:	08008224 	.word	0x08008224
  ldr r2, =_sbss
 8001f84:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001f88:	20000490 	.word	0x20000490

08001f8c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001f8c:	e7fe      	b.n	8001f8c <ADC_IRQHandler>
	...

08001f90 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b082      	sub	sp, #8
 8001f94:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001f96:	2300      	movs	r3, #0
 8001f98:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f9a:	2003      	movs	r0, #3
 8001f9c:	f000 f95e 	bl	800225c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001fa0:	f001 fbc0 	bl	8003724 <HAL_RCC_GetHCLKFreq>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	4a09      	ldr	r2, [pc, #36]	@ (8001fcc <HAL_Init+0x3c>)
 8001fa8:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001faa:	200f      	movs	r0, #15
 8001fac:	f000 f810 	bl	8001fd0 <HAL_InitTick>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d002      	beq.n	8001fbc <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	71fb      	strb	r3, [r7, #7]
 8001fba:	e001      	b.n	8001fc0 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001fbc:	f7ff fe46 	bl	8001c4c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001fc0:	79fb      	ldrb	r3, [r7, #7]
}
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	3708      	adds	r7, #8
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}
 8001fca:	bf00      	nop
 8001fcc:	2000000c 	.word	0x2000000c

08001fd0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b084      	sub	sp, #16
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001fdc:	4b17      	ldr	r3, [pc, #92]	@ (800203c <HAL_InitTick+0x6c>)
 8001fde:	781b      	ldrb	r3, [r3, #0]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d024      	beq.n	800202e <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
#ifdef CORE_CM0PLUS
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLK2Freq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
#else
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001fe4:	f001 fb9e 	bl	8003724 <HAL_RCC_GetHCLKFreq>
 8001fe8:	4602      	mov	r2, r0
 8001fea:	4b14      	ldr	r3, [pc, #80]	@ (800203c <HAL_InitTick+0x6c>)
 8001fec:	781b      	ldrb	r3, [r3, #0]
 8001fee:	4619      	mov	r1, r3
 8001ff0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001ff4:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ff8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	f000 f960 	bl	80022c2 <HAL_SYSTICK_Config>
 8002002:	4603      	mov	r3, r0
 8002004:	2b00      	cmp	r3, #0
 8002006:	d10f      	bne.n	8002028 <HAL_InitTick+0x58>
#endif
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2b0f      	cmp	r3, #15
 800200c:	d809      	bhi.n	8002022 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800200e:	2200      	movs	r2, #0
 8002010:	6879      	ldr	r1, [r7, #4]
 8002012:	f04f 30ff 	mov.w	r0, #4294967295
 8002016:	f000 f92c 	bl	8002272 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800201a:	4a09      	ldr	r2, [pc, #36]	@ (8002040 <HAL_InitTick+0x70>)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6013      	str	r3, [r2, #0]
 8002020:	e007      	b.n	8002032 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8002022:	2301      	movs	r3, #1
 8002024:	73fb      	strb	r3, [r7, #15]
 8002026:	e004      	b.n	8002032 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002028:	2301      	movs	r3, #1
 800202a:	73fb      	strb	r3, [r7, #15]
 800202c:	e001      	b.n	8002032 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 800202e:	2301      	movs	r3, #1
 8002030:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002032:	7bfb      	ldrb	r3, [r7, #15]
}
 8002034:	4618      	mov	r0, r3
 8002036:	3710      	adds	r7, #16
 8002038:	46bd      	mov	sp, r7
 800203a:	bd80      	pop	{r7, pc}
 800203c:	20000014 	.word	0x20000014
 8002040:	20000010 	.word	0x20000010

08002044 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002044:	b480      	push	{r7}
 8002046:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002048:	4b05      	ldr	r3, [pc, #20]	@ (8002060 <HAL_IncTick+0x1c>)
 800204a:	781b      	ldrb	r3, [r3, #0]
 800204c:	461a      	mov	r2, r3
 800204e:	4b05      	ldr	r3, [pc, #20]	@ (8002064 <HAL_IncTick+0x20>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4413      	add	r3, r2
 8002054:	4a03      	ldr	r2, [pc, #12]	@ (8002064 <HAL_IncTick+0x20>)
 8002056:	6013      	str	r3, [r2, #0]
}
 8002058:	bf00      	nop
 800205a:	46bd      	mov	sp, r7
 800205c:	bc80      	pop	{r7}
 800205e:	4770      	bx	lr
 8002060:	20000014 	.word	0x20000014
 8002064:	20000340 	.word	0x20000340

08002068 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002068:	b480      	push	{r7}
 800206a:	af00      	add	r7, sp, #0
  return uwTick;
 800206c:	4b02      	ldr	r3, [pc, #8]	@ (8002078 <HAL_GetTick+0x10>)
 800206e:	681b      	ldr	r3, [r3, #0]
}
 8002070:	4618      	mov	r0, r3
 8002072:	46bd      	mov	sp, r7
 8002074:	bc80      	pop	{r7}
 8002076:	4770      	bx	lr
 8002078:	20000340 	.word	0x20000340

0800207c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b084      	sub	sp, #16
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002084:	f7ff fff0 	bl	8002068 <HAL_GetTick>
 8002088:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002094:	d005      	beq.n	80020a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002096:	4b0a      	ldr	r3, [pc, #40]	@ (80020c0 <HAL_Delay+0x44>)
 8002098:	781b      	ldrb	r3, [r3, #0]
 800209a:	461a      	mov	r2, r3
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	4413      	add	r3, r2
 80020a0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80020a2:	bf00      	nop
 80020a4:	f7ff ffe0 	bl	8002068 <HAL_GetTick>
 80020a8:	4602      	mov	r2, r0
 80020aa:	68bb      	ldr	r3, [r7, #8]
 80020ac:	1ad3      	subs	r3, r2, r3
 80020ae:	68fa      	ldr	r2, [r7, #12]
 80020b0:	429a      	cmp	r2, r3
 80020b2:	d8f7      	bhi.n	80020a4 <HAL_Delay+0x28>
  {
  }
}
 80020b4:	bf00      	nop
 80020b6:	bf00      	nop
 80020b8:	3710      	adds	r7, #16
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}
 80020be:	bf00      	nop
 80020c0:	20000014 	.word	0x20000014

080020c4 <__NVIC_SetPriorityGrouping>:
{
 80020c4:	b480      	push	{r7}
 80020c6:	b085      	sub	sp, #20
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	f003 0307 	and.w	r3, r3, #7
 80020d2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020d4:	4b0c      	ldr	r3, [pc, #48]	@ (8002108 <__NVIC_SetPriorityGrouping+0x44>)
 80020d6:	68db      	ldr	r3, [r3, #12]
 80020d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020da:	68ba      	ldr	r2, [r7, #8]
 80020dc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80020e0:	4013      	ands	r3, r2
 80020e2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020e8:	68bb      	ldr	r3, [r7, #8]
 80020ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80020ec:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80020f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80020f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020f6:	4a04      	ldr	r2, [pc, #16]	@ (8002108 <__NVIC_SetPriorityGrouping+0x44>)
 80020f8:	68bb      	ldr	r3, [r7, #8]
 80020fa:	60d3      	str	r3, [r2, #12]
}
 80020fc:	bf00      	nop
 80020fe:	3714      	adds	r7, #20
 8002100:	46bd      	mov	sp, r7
 8002102:	bc80      	pop	{r7}
 8002104:	4770      	bx	lr
 8002106:	bf00      	nop
 8002108:	e000ed00 	.word	0xe000ed00

0800210c <__NVIC_GetPriorityGrouping>:
{
 800210c:	b480      	push	{r7}
 800210e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002110:	4b04      	ldr	r3, [pc, #16]	@ (8002124 <__NVIC_GetPriorityGrouping+0x18>)
 8002112:	68db      	ldr	r3, [r3, #12]
 8002114:	0a1b      	lsrs	r3, r3, #8
 8002116:	f003 0307 	and.w	r3, r3, #7
}
 800211a:	4618      	mov	r0, r3
 800211c:	46bd      	mov	sp, r7
 800211e:	bc80      	pop	{r7}
 8002120:	4770      	bx	lr
 8002122:	bf00      	nop
 8002124:	e000ed00 	.word	0xe000ed00

08002128 <__NVIC_EnableIRQ>:
{
 8002128:	b480      	push	{r7}
 800212a:	b083      	sub	sp, #12
 800212c:	af00      	add	r7, sp, #0
 800212e:	4603      	mov	r3, r0
 8002130:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002132:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002136:	2b00      	cmp	r3, #0
 8002138:	db0b      	blt.n	8002152 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800213a:	79fb      	ldrb	r3, [r7, #7]
 800213c:	f003 021f 	and.w	r2, r3, #31
 8002140:	4906      	ldr	r1, [pc, #24]	@ (800215c <__NVIC_EnableIRQ+0x34>)
 8002142:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002146:	095b      	lsrs	r3, r3, #5
 8002148:	2001      	movs	r0, #1
 800214a:	fa00 f202 	lsl.w	r2, r0, r2
 800214e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002152:	bf00      	nop
 8002154:	370c      	adds	r7, #12
 8002156:	46bd      	mov	sp, r7
 8002158:	bc80      	pop	{r7}
 800215a:	4770      	bx	lr
 800215c:	e000e100 	.word	0xe000e100

08002160 <__NVIC_SetPriority>:
{
 8002160:	b480      	push	{r7}
 8002162:	b083      	sub	sp, #12
 8002164:	af00      	add	r7, sp, #0
 8002166:	4603      	mov	r3, r0
 8002168:	6039      	str	r1, [r7, #0]
 800216a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800216c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002170:	2b00      	cmp	r3, #0
 8002172:	db0a      	blt.n	800218a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	b2da      	uxtb	r2, r3
 8002178:	490c      	ldr	r1, [pc, #48]	@ (80021ac <__NVIC_SetPriority+0x4c>)
 800217a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800217e:	0112      	lsls	r2, r2, #4
 8002180:	b2d2      	uxtb	r2, r2
 8002182:	440b      	add	r3, r1
 8002184:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8002188:	e00a      	b.n	80021a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	b2da      	uxtb	r2, r3
 800218e:	4908      	ldr	r1, [pc, #32]	@ (80021b0 <__NVIC_SetPriority+0x50>)
 8002190:	79fb      	ldrb	r3, [r7, #7]
 8002192:	f003 030f 	and.w	r3, r3, #15
 8002196:	3b04      	subs	r3, #4
 8002198:	0112      	lsls	r2, r2, #4
 800219a:	b2d2      	uxtb	r2, r2
 800219c:	440b      	add	r3, r1
 800219e:	761a      	strb	r2, [r3, #24]
}
 80021a0:	bf00      	nop
 80021a2:	370c      	adds	r7, #12
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bc80      	pop	{r7}
 80021a8:	4770      	bx	lr
 80021aa:	bf00      	nop
 80021ac:	e000e100 	.word	0xe000e100
 80021b0:	e000ed00 	.word	0xe000ed00

080021b4 <NVIC_EncodePriority>:
{
 80021b4:	b480      	push	{r7}
 80021b6:	b089      	sub	sp, #36	@ 0x24
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	60f8      	str	r0, [r7, #12]
 80021bc:	60b9      	str	r1, [r7, #8]
 80021be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	f003 0307 	and.w	r3, r3, #7
 80021c6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021c8:	69fb      	ldr	r3, [r7, #28]
 80021ca:	f1c3 0307 	rsb	r3, r3, #7
 80021ce:	2b04      	cmp	r3, #4
 80021d0:	bf28      	it	cs
 80021d2:	2304      	movcs	r3, #4
 80021d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021d6:	69fb      	ldr	r3, [r7, #28]
 80021d8:	3304      	adds	r3, #4
 80021da:	2b06      	cmp	r3, #6
 80021dc:	d902      	bls.n	80021e4 <NVIC_EncodePriority+0x30>
 80021de:	69fb      	ldr	r3, [r7, #28]
 80021e0:	3b03      	subs	r3, #3
 80021e2:	e000      	b.n	80021e6 <NVIC_EncodePriority+0x32>
 80021e4:	2300      	movs	r3, #0
 80021e6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021e8:	f04f 32ff 	mov.w	r2, #4294967295
 80021ec:	69bb      	ldr	r3, [r7, #24]
 80021ee:	fa02 f303 	lsl.w	r3, r2, r3
 80021f2:	43da      	mvns	r2, r3
 80021f4:	68bb      	ldr	r3, [r7, #8]
 80021f6:	401a      	ands	r2, r3
 80021f8:	697b      	ldr	r3, [r7, #20]
 80021fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021fc:	f04f 31ff 	mov.w	r1, #4294967295
 8002200:	697b      	ldr	r3, [r7, #20]
 8002202:	fa01 f303 	lsl.w	r3, r1, r3
 8002206:	43d9      	mvns	r1, r3
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800220c:	4313      	orrs	r3, r2
}
 800220e:	4618      	mov	r0, r3
 8002210:	3724      	adds	r7, #36	@ 0x24
 8002212:	46bd      	mov	sp, r7
 8002214:	bc80      	pop	{r7}
 8002216:	4770      	bx	lr

08002218 <SysTick_Config>:
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b082      	sub	sp, #8
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	3b01      	subs	r3, #1
 8002224:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002228:	d301      	bcc.n	800222e <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800222a:	2301      	movs	r3, #1
 800222c:	e00f      	b.n	800224e <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800222e:	4a0a      	ldr	r2, [pc, #40]	@ (8002258 <SysTick_Config+0x40>)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	3b01      	subs	r3, #1
 8002234:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002236:	210f      	movs	r1, #15
 8002238:	f04f 30ff 	mov.w	r0, #4294967295
 800223c:	f7ff ff90 	bl	8002160 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002240:	4b05      	ldr	r3, [pc, #20]	@ (8002258 <SysTick_Config+0x40>)
 8002242:	2200      	movs	r2, #0
 8002244:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002246:	4b04      	ldr	r3, [pc, #16]	@ (8002258 <SysTick_Config+0x40>)
 8002248:	2207      	movs	r2, #7
 800224a:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 800224c:	2300      	movs	r3, #0
}
 800224e:	4618      	mov	r0, r3
 8002250:	3708      	adds	r7, #8
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}
 8002256:	bf00      	nop
 8002258:	e000e010 	.word	0xe000e010

0800225c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b082      	sub	sp, #8
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002264:	6878      	ldr	r0, [r7, #4]
 8002266:	f7ff ff2d 	bl	80020c4 <__NVIC_SetPriorityGrouping>
}
 800226a:	bf00      	nop
 800226c:	3708      	adds	r7, #8
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}

08002272 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002272:	b580      	push	{r7, lr}
 8002274:	b086      	sub	sp, #24
 8002276:	af00      	add	r7, sp, #0
 8002278:	4603      	mov	r3, r0
 800227a:	60b9      	str	r1, [r7, #8]
 800227c:	607a      	str	r2, [r7, #4]
 800227e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002280:	f7ff ff44 	bl	800210c <__NVIC_GetPriorityGrouping>
 8002284:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002286:	687a      	ldr	r2, [r7, #4]
 8002288:	68b9      	ldr	r1, [r7, #8]
 800228a:	6978      	ldr	r0, [r7, #20]
 800228c:	f7ff ff92 	bl	80021b4 <NVIC_EncodePriority>
 8002290:	4602      	mov	r2, r0
 8002292:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002296:	4611      	mov	r1, r2
 8002298:	4618      	mov	r0, r3
 800229a:	f7ff ff61 	bl	8002160 <__NVIC_SetPriority>
}
 800229e:	bf00      	nop
 80022a0:	3718      	adds	r7, #24
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}

080022a6 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022a6:	b580      	push	{r7, lr}
 80022a8:	b082      	sub	sp, #8
 80022aa:	af00      	add	r7, sp, #0
 80022ac:	4603      	mov	r3, r0
 80022ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80022b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022b4:	4618      	mov	r0, r3
 80022b6:	f7ff ff37 	bl	8002128 <__NVIC_EnableIRQ>
}
 80022ba:	bf00      	nop
 80022bc:	3708      	adds	r7, #8
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}

080022c2 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80022c2:	b580      	push	{r7, lr}
 80022c4:	b082      	sub	sp, #8
 80022c6:	af00      	add	r7, sp, #0
 80022c8:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80022ca:	6878      	ldr	r0, [r7, #4]
 80022cc:	f7ff ffa4 	bl	8002218 <SysTick_Config>
 80022d0:	4603      	mov	r3, r0
}
 80022d2:	4618      	mov	r0, r3
 80022d4:	3708      	adds	r7, #8
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}

080022da <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80022da:	b480      	push	{r7}
 80022dc:	b083      	sub	sp, #12
 80022de:	af00      	add	r7, sp, #0
 80022e0:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d101      	bne.n	80022ec <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 80022e8:	2301      	movs	r3, #1
 80022ea:	e04f      	b.n	800238c <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80022f2:	b2db      	uxtb	r3, r3
 80022f4:	2b02      	cmp	r3, #2
 80022f6:	d008      	beq.n	800230a <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2204      	movs	r2, #4
 80022fc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2200      	movs	r2, #0
 8002302:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002306:	2301      	movs	r3, #1
 8002308:	e040      	b.n	800238c <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	681a      	ldr	r2, [r3, #0]
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f022 020e 	bic.w	r2, r2, #14
 8002318:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800231e:	681a      	ldr	r2, [r3, #0]
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002324:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002328:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	681a      	ldr	r2, [r3, #0]
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f022 0201 	bic.w	r2, r2, #1
 8002338:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800233e:	f003 021c 	and.w	r2, r3, #28
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002346:	2101      	movs	r1, #1
 8002348:	fa01 f202 	lsl.w	r2, r1, r2
 800234c:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002352:	687a      	ldr	r2, [r7, #4]
 8002354:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002356:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800235c:	2b00      	cmp	r3, #0
 800235e:	d00c      	beq.n	800237a <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002364:	681a      	ldr	r2, [r3, #0]
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800236a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800236e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002374:	687a      	ldr	r2, [r7, #4]
 8002376:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002378:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2201      	movs	r2, #1
 800237e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2200      	movs	r2, #0
 8002386:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }

  return HAL_OK;
 800238a:	2300      	movs	r3, #0
}
 800238c:	4618      	mov	r0, r3
 800238e:	370c      	adds	r7, #12
 8002390:	46bd      	mov	sp, r7
 8002392:	bc80      	pop	{r7}
 8002394:	4770      	bx	lr

08002396 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002396:	b580      	push	{r7, lr}
 8002398:	b084      	sub	sp, #16
 800239a:	af00      	add	r7, sp, #0
 800239c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800239e:	2300      	movs	r3, #0
 80023a0:	73fb      	strb	r3, [r7, #15]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80023a8:	b2db      	uxtb	r3, r3
 80023aa:	2b02      	cmp	r3, #2
 80023ac:	d005      	beq.n	80023ba <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2204      	movs	r2, #4
 80023b2:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80023b4:	2301      	movs	r3, #1
 80023b6:	73fb      	strb	r3, [r7, #15]
 80023b8:	e047      	b.n	800244a <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	681a      	ldr	r2, [r3, #0]
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f022 020e 	bic.w	r2, r2, #14
 80023c8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	681a      	ldr	r2, [r3, #0]
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f022 0201 	bic.w	r2, r2, #1
 80023d8:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80023de:	681a      	ldr	r2, [r3, #0]
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80023e4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80023e8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023ee:	f003 021c 	and.w	r2, r3, #28
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023f6:	2101      	movs	r1, #1
 80023f8:	fa01 f202 	lsl.w	r2, r1, r2
 80023fc:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002402:	687a      	ldr	r2, [r7, #4]
 8002404:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002406:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800240c:	2b00      	cmp	r3, #0
 800240e:	d00c      	beq.n	800242a <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002414:	681a      	ldr	r2, [r3, #0]
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800241a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800241e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002424:	687a      	ldr	r2, [r7, #4]
 8002426:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002428:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2201      	movs	r2, #1
 800242e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2200      	movs	r2, #0
 8002436:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800243e:	2b00      	cmp	r3, #0
 8002440:	d003      	beq.n	800244a <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002446:	6878      	ldr	r0, [r7, #4]
 8002448:	4798      	blx	r3
    }
  }
  return status;
 800244a:	7bfb      	ldrb	r3, [r7, #15]
}
 800244c:	4618      	mov	r0, r3
 800244e:	3710      	adds	r7, #16
 8002450:	46bd      	mov	sp, r7
 8002452:	bd80      	pop	{r7, pc}

08002454 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002454:	b480      	push	{r7}
 8002456:	b087      	sub	sp, #28
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
 800245c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800245e:	2300      	movs	r3, #0
 8002460:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002462:	e140      	b.n	80026e6 <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	681a      	ldr	r2, [r3, #0]
 8002468:	2101      	movs	r1, #1
 800246a:	697b      	ldr	r3, [r7, #20]
 800246c:	fa01 f303 	lsl.w	r3, r1, r3
 8002470:	4013      	ands	r3, r2
 8002472:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	2b00      	cmp	r3, #0
 8002478:	f000 8132 	beq.w	80026e0 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	f003 0303 	and.w	r3, r3, #3
 8002484:	2b01      	cmp	r3, #1
 8002486:	d005      	beq.n	8002494 <HAL_GPIO_Init+0x40>
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	f003 0303 	and.w	r3, r3, #3
 8002490:	2b02      	cmp	r3, #2
 8002492:	d130      	bne.n	80024f6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	689b      	ldr	r3, [r3, #8]
 8002498:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800249a:	697b      	ldr	r3, [r7, #20]
 800249c:	005b      	lsls	r3, r3, #1
 800249e:	2203      	movs	r2, #3
 80024a0:	fa02 f303 	lsl.w	r3, r2, r3
 80024a4:	43db      	mvns	r3, r3
 80024a6:	693a      	ldr	r2, [r7, #16]
 80024a8:	4013      	ands	r3, r2
 80024aa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	68da      	ldr	r2, [r3, #12]
 80024b0:	697b      	ldr	r3, [r7, #20]
 80024b2:	005b      	lsls	r3, r3, #1
 80024b4:	fa02 f303 	lsl.w	r3, r2, r3
 80024b8:	693a      	ldr	r2, [r7, #16]
 80024ba:	4313      	orrs	r3, r2
 80024bc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	693a      	ldr	r2, [r7, #16]
 80024c2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80024ca:	2201      	movs	r2, #1
 80024cc:	697b      	ldr	r3, [r7, #20]
 80024ce:	fa02 f303 	lsl.w	r3, r2, r3
 80024d2:	43db      	mvns	r3, r3
 80024d4:	693a      	ldr	r2, [r7, #16]
 80024d6:	4013      	ands	r3, r2
 80024d8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	091b      	lsrs	r3, r3, #4
 80024e0:	f003 0201 	and.w	r2, r3, #1
 80024e4:	697b      	ldr	r3, [r7, #20]
 80024e6:	fa02 f303 	lsl.w	r3, r2, r3
 80024ea:	693a      	ldr	r2, [r7, #16]
 80024ec:	4313      	orrs	r3, r2
 80024ee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	693a      	ldr	r2, [r7, #16]
 80024f4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	f003 0303 	and.w	r3, r3, #3
 80024fe:	2b03      	cmp	r3, #3
 8002500:	d017      	beq.n	8002532 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	68db      	ldr	r3, [r3, #12]
 8002506:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002508:	697b      	ldr	r3, [r7, #20]
 800250a:	005b      	lsls	r3, r3, #1
 800250c:	2203      	movs	r2, #3
 800250e:	fa02 f303 	lsl.w	r3, r2, r3
 8002512:	43db      	mvns	r3, r3
 8002514:	693a      	ldr	r2, [r7, #16]
 8002516:	4013      	ands	r3, r2
 8002518:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	689a      	ldr	r2, [r3, #8]
 800251e:	697b      	ldr	r3, [r7, #20]
 8002520:	005b      	lsls	r3, r3, #1
 8002522:	fa02 f303 	lsl.w	r3, r2, r3
 8002526:	693a      	ldr	r2, [r7, #16]
 8002528:	4313      	orrs	r3, r2
 800252a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	693a      	ldr	r2, [r7, #16]
 8002530:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	f003 0303 	and.w	r3, r3, #3
 800253a:	2b02      	cmp	r3, #2
 800253c:	d123      	bne.n	8002586 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800253e:	697b      	ldr	r3, [r7, #20]
 8002540:	08da      	lsrs	r2, r3, #3
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	3208      	adds	r2, #8
 8002546:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800254a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800254c:	697b      	ldr	r3, [r7, #20]
 800254e:	f003 0307 	and.w	r3, r3, #7
 8002552:	009b      	lsls	r3, r3, #2
 8002554:	220f      	movs	r2, #15
 8002556:	fa02 f303 	lsl.w	r3, r2, r3
 800255a:	43db      	mvns	r3, r3
 800255c:	693a      	ldr	r2, [r7, #16]
 800255e:	4013      	ands	r3, r2
 8002560:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	691a      	ldr	r2, [r3, #16]
 8002566:	697b      	ldr	r3, [r7, #20]
 8002568:	f003 0307 	and.w	r3, r3, #7
 800256c:	009b      	lsls	r3, r3, #2
 800256e:	fa02 f303 	lsl.w	r3, r2, r3
 8002572:	693a      	ldr	r2, [r7, #16]
 8002574:	4313      	orrs	r3, r2
 8002576:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002578:	697b      	ldr	r3, [r7, #20]
 800257a:	08da      	lsrs	r2, r3, #3
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	3208      	adds	r2, #8
 8002580:	6939      	ldr	r1, [r7, #16]
 8002582:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800258c:	697b      	ldr	r3, [r7, #20]
 800258e:	005b      	lsls	r3, r3, #1
 8002590:	2203      	movs	r2, #3
 8002592:	fa02 f303 	lsl.w	r3, r2, r3
 8002596:	43db      	mvns	r3, r3
 8002598:	693a      	ldr	r2, [r7, #16]
 800259a:	4013      	ands	r3, r2
 800259c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	f003 0203 	and.w	r2, r3, #3
 80025a6:	697b      	ldr	r3, [r7, #20]
 80025a8:	005b      	lsls	r3, r3, #1
 80025aa:	fa02 f303 	lsl.w	r3, r2, r3
 80025ae:	693a      	ldr	r2, [r7, #16]
 80025b0:	4313      	orrs	r3, r2
 80025b2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	693a      	ldr	r2, [r7, #16]
 80025b8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	f000 808c 	beq.w	80026e0 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 80025c8:	4a4e      	ldr	r2, [pc, #312]	@ (8002704 <HAL_GPIO_Init+0x2b0>)
 80025ca:	697b      	ldr	r3, [r7, #20]
 80025cc:	089b      	lsrs	r3, r3, #2
 80025ce:	3302      	adds	r3, #2
 80025d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025d4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 80025d6:	697b      	ldr	r3, [r7, #20]
 80025d8:	f003 0303 	and.w	r3, r3, #3
 80025dc:	009b      	lsls	r3, r3, #2
 80025de:	2207      	movs	r2, #7
 80025e0:	fa02 f303 	lsl.w	r3, r2, r3
 80025e4:	43db      	mvns	r3, r3
 80025e6:	693a      	ldr	r2, [r7, #16]
 80025e8:	4013      	ands	r3, r2
 80025ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80025f2:	d00d      	beq.n	8002610 <HAL_GPIO_Init+0x1bc>
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	4a44      	ldr	r2, [pc, #272]	@ (8002708 <HAL_GPIO_Init+0x2b4>)
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d007      	beq.n	800260c <HAL_GPIO_Init+0x1b8>
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	4a43      	ldr	r2, [pc, #268]	@ (800270c <HAL_GPIO_Init+0x2b8>)
 8002600:	4293      	cmp	r3, r2
 8002602:	d101      	bne.n	8002608 <HAL_GPIO_Init+0x1b4>
 8002604:	2302      	movs	r3, #2
 8002606:	e004      	b.n	8002612 <HAL_GPIO_Init+0x1be>
 8002608:	2307      	movs	r3, #7
 800260a:	e002      	b.n	8002612 <HAL_GPIO_Init+0x1be>
 800260c:	2301      	movs	r3, #1
 800260e:	e000      	b.n	8002612 <HAL_GPIO_Init+0x1be>
 8002610:	2300      	movs	r3, #0
 8002612:	697a      	ldr	r2, [r7, #20]
 8002614:	f002 0203 	and.w	r2, r2, #3
 8002618:	0092      	lsls	r2, r2, #2
 800261a:	4093      	lsls	r3, r2
 800261c:	693a      	ldr	r2, [r7, #16]
 800261e:	4313      	orrs	r3, r2
 8002620:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002622:	4938      	ldr	r1, [pc, #224]	@ (8002704 <HAL_GPIO_Init+0x2b0>)
 8002624:	697b      	ldr	r3, [r7, #20]
 8002626:	089b      	lsrs	r3, r3, #2
 8002628:	3302      	adds	r3, #2
 800262a:	693a      	ldr	r2, [r7, #16]
 800262c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002630:	4b37      	ldr	r3, [pc, #220]	@ (8002710 <HAL_GPIO_Init+0x2bc>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	43db      	mvns	r3, r3
 800263a:	693a      	ldr	r2, [r7, #16]
 800263c:	4013      	ands	r3, r2
 800263e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002648:	2b00      	cmp	r3, #0
 800264a:	d003      	beq.n	8002654 <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 800264c:	693a      	ldr	r2, [r7, #16]
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	4313      	orrs	r3, r2
 8002652:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002654:	4a2e      	ldr	r2, [pc, #184]	@ (8002710 <HAL_GPIO_Init+0x2bc>)
 8002656:	693b      	ldr	r3, [r7, #16]
 8002658:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800265a:	4b2d      	ldr	r3, [pc, #180]	@ (8002710 <HAL_GPIO_Init+0x2bc>)
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	43db      	mvns	r3, r3
 8002664:	693a      	ldr	r2, [r7, #16]
 8002666:	4013      	ands	r3, r2
 8002668:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002672:	2b00      	cmp	r3, #0
 8002674:	d003      	beq.n	800267e <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 8002676:	693a      	ldr	r2, [r7, #16]
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	4313      	orrs	r3, r2
 800267c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800267e:	4a24      	ldr	r2, [pc, #144]	@ (8002710 <HAL_GPIO_Init+0x2bc>)
 8002680:	693b      	ldr	r3, [r7, #16]
 8002682:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8002684:	4b22      	ldr	r3, [pc, #136]	@ (8002710 <HAL_GPIO_Init+0x2bc>)
 8002686:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800268a:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	43db      	mvns	r3, r3
 8002690:	693a      	ldr	r2, [r7, #16]
 8002692:	4013      	ands	r3, r2
 8002694:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d003      	beq.n	80026aa <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 80026a2:	693a      	ldr	r2, [r7, #16]
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	4313      	orrs	r3, r2
 80026a8:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 80026aa:	4a19      	ldr	r2, [pc, #100]	@ (8002710 <HAL_GPIO_Init+0x2bc>)
 80026ac:	693b      	ldr	r3, [r7, #16]
 80026ae:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 80026b2:	4b17      	ldr	r3, [pc, #92]	@ (8002710 <HAL_GPIO_Init+0x2bc>)
 80026b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80026b8:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	43db      	mvns	r3, r3
 80026be:	693a      	ldr	r2, [r7, #16]
 80026c0:	4013      	ands	r3, r2
 80026c2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d003      	beq.n	80026d8 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80026d0:	693a      	ldr	r2, [r7, #16]
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	4313      	orrs	r3, r2
 80026d6:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 80026d8:	4a0d      	ldr	r2, [pc, #52]	@ (8002710 <HAL_GPIO_Init+0x2bc>)
 80026da:	693b      	ldr	r3, [r7, #16]
 80026dc:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 80026e0:	697b      	ldr	r3, [r7, #20]
 80026e2:	3301      	adds	r3, #1
 80026e4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	681a      	ldr	r2, [r3, #0]
 80026ea:	697b      	ldr	r3, [r7, #20]
 80026ec:	fa22 f303 	lsr.w	r3, r2, r3
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	f47f aeb7 	bne.w	8002464 <HAL_GPIO_Init+0x10>
  }
}
 80026f6:	bf00      	nop
 80026f8:	bf00      	nop
 80026fa:	371c      	adds	r7, #28
 80026fc:	46bd      	mov	sp, r7
 80026fe:	bc80      	pop	{r7}
 8002700:	4770      	bx	lr
 8002702:	bf00      	nop
 8002704:	40010000 	.word	0x40010000
 8002708:	48000400 	.word	0x48000400
 800270c:	48000800 	.word	0x48000800
 8002710:	58000800 	.word	0x58000800

08002714 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002714:	b480      	push	{r7}
 8002716:	b083      	sub	sp, #12
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
 800271c:	460b      	mov	r3, r1
 800271e:	807b      	strh	r3, [r7, #2]
 8002720:	4613      	mov	r3, r2
 8002722:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002724:	787b      	ldrb	r3, [r7, #1]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d003      	beq.n	8002732 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800272a:	887a      	ldrh	r2, [r7, #2]
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002730:	e002      	b.n	8002738 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002732:	887a      	ldrh	r2, [r7, #2]
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002738:	bf00      	nop
 800273a:	370c      	adds	r7, #12
 800273c:	46bd      	mov	sp, r7
 800273e:	bc80      	pop	{r7}
 8002740:	4770      	bx	lr
	...

08002744 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002744:	b480      	push	{r7}
 8002746:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002748:	4b04      	ldr	r3, [pc, #16]	@ (800275c <HAL_PWR_EnableBkUpAccess+0x18>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4a03      	ldr	r2, [pc, #12]	@ (800275c <HAL_PWR_EnableBkUpAccess+0x18>)
 800274e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002752:	6013      	str	r3, [r2, #0]
}
 8002754:	bf00      	nop
 8002756:	46bd      	mov	sp, r7
 8002758:	bc80      	pop	{r7}
 800275a:	4770      	bx	lr
 800275c:	58000400 	.word	0x58000400

08002760 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002760:	b480      	push	{r7}
 8002762:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8002764:	4b03      	ldr	r3, [pc, #12]	@ (8002774 <HAL_PWREx_GetVoltageRange+0x14>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 800276c:	4618      	mov	r0, r3
 800276e:	46bd      	mov	sp, r7
 8002770:	bc80      	pop	{r7}
 8002772:	4770      	bx	lr
 8002774:	58000400 	.word	0x58000400

08002778 <LL_PWR_IsEnabledBkUpAccess>:
  * @brief  Check if the backup domain is enabled
  * @rmtoll CR1          DBP           LL_PWR_IsEnabledBkUpAccess
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsEnabledBkUpAccess(void)
{
 8002778:	b480      	push	{r7}
 800277a:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 800277c:	4b06      	ldr	r3, [pc, #24]	@ (8002798 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002784:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002788:	d101      	bne.n	800278e <LL_PWR_IsEnabledBkUpAccess+0x16>
 800278a:	2301      	movs	r3, #1
 800278c:	e000      	b.n	8002790 <LL_PWR_IsEnabledBkUpAccess+0x18>
 800278e:	2300      	movs	r3, #0
}
 8002790:	4618      	mov	r0, r3
 8002792:	46bd      	mov	sp, r7
 8002794:	bc80      	pop	{r7}
 8002796:	4770      	bx	lr
 8002798:	58000400 	.word	0x58000400

0800279c <LL_RCC_HSE_EnableTcxo>:
  * @note PB0 must be configured in analog mode prior enabling VDDTCXO supply
  * @rmtoll CR           HSEBYPPWR        LL_RCC_HSE_EnableTcxo
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_EnableTcxo(void)
{
 800279c:	b480      	push	{r7}
 800279e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 80027a0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80027aa:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80027ae:	6013      	str	r3, [r2, #0]
}
 80027b0:	bf00      	nop
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bc80      	pop	{r7}
 80027b6:	4770      	bx	lr

080027b8 <LL_RCC_HSE_DisableTcxo>:
  * @brief  Disable HSE VDDTCXO output on package pin PB0-VDDTCXO
  * @rmtoll CR           HSEBYPPWR        LL_RCC_HSE_DisableTcxo
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_DisableTcxo(void)
{
 80027b8:	b480      	push	{r7}
 80027ba:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 80027bc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80027c6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80027ca:	6013      	str	r3, [r2, #0]
}
 80027cc:	bf00      	nop
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bc80      	pop	{r7}
 80027d2:	4770      	bx	lr

080027d4 <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler  division by 2
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 80027d4:	b480      	push	{r7}
 80027d6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80027d8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80027e2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80027e6:	d101      	bne.n	80027ec <LL_RCC_HSE_IsEnabledDiv2+0x18>
 80027e8:	2301      	movs	r3, #1
 80027ea:	e000      	b.n	80027ee <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 80027ec:	2300      	movs	r3, #0
}
 80027ee:	4618      	mov	r0, r3
 80027f0:	46bd      	mov	sp, r7
 80027f2:	bc80      	pop	{r7}
 80027f4:	4770      	bx	lr

080027f6 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 80027f6:	b480      	push	{r7}
 80027f8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80027fa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002804:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002808:	6013      	str	r3, [r2, #0]
}
 800280a:	bf00      	nop
 800280c:	46bd      	mov	sp, r7
 800280e:	bc80      	pop	{r7}
 8002810:	4770      	bx	lr

08002812 <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 8002812:	b480      	push	{r7}
 8002814:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8002816:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002820:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002824:	6013      	str	r3, [r2, #0]
}
 8002826:	bf00      	nop
 8002828:	46bd      	mov	sp, r7
 800282a:	bc80      	pop	{r7}
 800282c:	4770      	bx	lr

0800282e <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 800282e:	b480      	push	{r7}
 8002830:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8002832:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800283c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002840:	d101      	bne.n	8002846 <LL_RCC_HSE_IsReady+0x18>
 8002842:	2301      	movs	r3, #1
 8002844:	e000      	b.n	8002848 <LL_RCC_HSE_IsReady+0x1a>
 8002846:	2300      	movs	r3, #0
}
 8002848:	4618      	mov	r0, r3
 800284a:	46bd      	mov	sp, r7
 800284c:	bc80      	pop	{r7}
 800284e:	4770      	bx	lr

08002850 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8002850:	b480      	push	{r7}
 8002852:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8002854:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800285e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002862:	6013      	str	r3, [r2, #0]
}
 8002864:	bf00      	nop
 8002866:	46bd      	mov	sp, r7
 8002868:	bc80      	pop	{r7}
 800286a:	4770      	bx	lr

0800286c <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 800286c:	b480      	push	{r7}
 800286e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8002870:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800287a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800287e:	6013      	str	r3, [r2, #0]
}
 8002880:	bf00      	nop
 8002882:	46bd      	mov	sp, r7
 8002884:	bc80      	pop	{r7}
 8002886:	4770      	bx	lr

08002888 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8002888:	b480      	push	{r7}
 800288a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800288c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002896:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800289a:	d101      	bne.n	80028a0 <LL_RCC_HSI_IsReady+0x18>
 800289c:	2301      	movs	r3, #1
 800289e:	e000      	b.n	80028a2 <LL_RCC_HSI_IsReady+0x1a>
 80028a0:	2300      	movs	r3, #0
}
 80028a2:	4618      	mov	r0, r3
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bc80      	pop	{r7}
 80028a8:	4770      	bx	lr

080028aa <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 80028aa:	b480      	push	{r7}
 80028ac:	b083      	sub	sp, #12
 80028ae:	af00      	add	r7, sp, #0
 80028b0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80028b2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	061b      	lsls	r3, r3, #24
 80028c0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80028c4:	4313      	orrs	r3, r2
 80028c6:	604b      	str	r3, [r1, #4]
}
 80028c8:	bf00      	nop
 80028ca:	370c      	adds	r7, #12
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bc80      	pop	{r7}
 80028d0:	4770      	bx	lr

080028d2 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 80028d2:	b480      	push	{r7}
 80028d4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80028d6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80028da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028de:	f003 0302 	and.w	r3, r3, #2
 80028e2:	2b02      	cmp	r3, #2
 80028e4:	d101      	bne.n	80028ea <LL_RCC_LSE_IsReady+0x18>
 80028e6:	2301      	movs	r3, #1
 80028e8:	e000      	b.n	80028ec <LL_RCC_LSE_IsReady+0x1a>
 80028ea:	2300      	movs	r3, #0
}
 80028ec:	4618      	mov	r0, r3
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bc80      	pop	{r7}
 80028f2:	4770      	bx	lr

080028f4 <LL_RCC_LSI_Enable>:
  * @brief  Enable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Enable(void)
{
 80028f4:	b480      	push	{r7}
 80028f6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 80028f8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80028fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002900:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002904:	f043 0301 	orr.w	r3, r3, #1
 8002908:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800290c:	bf00      	nop
 800290e:	46bd      	mov	sp, r7
 8002910:	bc80      	pop	{r7}
 8002912:	4770      	bx	lr

08002914 <LL_RCC_LSI_Disable>:
  * @brief  Disable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Disable(void)
{
 8002914:	b480      	push	{r7}
 8002916:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8002918:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800291c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002920:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002924:	f023 0301 	bic.w	r3, r3, #1
 8002928:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800292c:	bf00      	nop
 800292e:	46bd      	mov	sp, r7
 8002930:	bc80      	pop	{r7}
 8002932:	4770      	bx	lr

08002934 <LL_RCC_LSI_IsReady>:
  * @brief  Check if LSI is Ready
  * @rmtoll CSR          LSIRDY        LL_RCC_LSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI_IsReady(void)
{
 8002934:	b480      	push	{r7}
 8002936:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8002938:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800293c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002940:	f003 0302 	and.w	r3, r3, #2
 8002944:	2b02      	cmp	r3, #2
 8002946:	d101      	bne.n	800294c <LL_RCC_LSI_IsReady+0x18>
 8002948:	2301      	movs	r3, #1
 800294a:	e000      	b.n	800294e <LL_RCC_LSI_IsReady+0x1a>
 800294c:	2300      	movs	r3, #0
}
 800294e:	4618      	mov	r0, r3
 8002950:	46bd      	mov	sp, r7
 8002952:	bc80      	pop	{r7}
 8002954:	4770      	bx	lr

08002956 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8002956:	b480      	push	{r7}
 8002958:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 800295a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002964:	f043 0301 	orr.w	r3, r3, #1
 8002968:	6013      	str	r3, [r2, #0]
}
 800296a:	bf00      	nop
 800296c:	46bd      	mov	sp, r7
 800296e:	bc80      	pop	{r7}
 8002970:	4770      	bx	lr

08002972 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8002972:	b480      	push	{r7}
 8002974:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8002976:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002980:	f023 0301 	bic.w	r3, r3, #1
 8002984:	6013      	str	r3, [r2, #0]
}
 8002986:	bf00      	nop
 8002988:	46bd      	mov	sp, r7
 800298a:	bc80      	pop	{r7}
 800298c:	4770      	bx	lr

0800298e <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 800298e:	b480      	push	{r7}
 8002990:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8002992:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f003 0302 	and.w	r3, r3, #2
 800299c:	2b02      	cmp	r3, #2
 800299e:	d101      	bne.n	80029a4 <LL_RCC_MSI_IsReady+0x16>
 80029a0:	2301      	movs	r3, #1
 80029a2:	e000      	b.n	80029a6 <LL_RCC_MSI_IsReady+0x18>
 80029a4:	2300      	movs	r3, #0
}
 80029a6:	4618      	mov	r0, r3
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bc80      	pop	{r7}
 80029ac:	4770      	bx	lr

080029ae <LL_RCC_MSI_IsEnabledRangeSelect>:
  * @brief  Check if MSI clock range is selected with MSIRANGE register
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_IsEnabledRangeSelect
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsEnabledRangeSelect(void)
{
 80029ae:	b480      	push	{r7}
 80029b0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 80029b2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f003 0308 	and.w	r3, r3, #8
 80029bc:	2b08      	cmp	r3, #8
 80029be:	d101      	bne.n	80029c4 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 80029c0:	2301      	movs	r3, #1
 80029c2:	e000      	b.n	80029c6 <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 80029c4:	2300      	movs	r3, #0
}
 80029c6:	4618      	mov	r0, r3
 80029c8:	46bd      	mov	sp, r7
 80029ca:	bc80      	pop	{r7}
 80029cc:	4770      	bx	lr

080029ce <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 80029ce:	b480      	push	{r7}
 80029d0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 80029d2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 80029dc:	4618      	mov	r0, r3
 80029de:	46bd      	mov	sp, r7
 80029e0:	bc80      	pop	{r7}
 80029e2:	4770      	bx	lr

080029e4 <LL_RCC_MSI_GetRangeAfterStandby>:
  *         @arg @ref LL_RCC_MSISRANGE_5
  *         @arg @ref LL_RCC_MSISRANGE_6
  *         @arg @ref LL_RCC_MSISRANGE_7
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRangeAfterStandby(void)
{
 80029e4:	b480      	push	{r7}
 80029e6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 80029e8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80029ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80029f0:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
}
 80029f4:	4618      	mov	r0, r3
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bc80      	pop	{r7}
 80029fa:	4770      	bx	lr

080029fc <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 80029fc:	b480      	push	{r7}
 80029fe:	b083      	sub	sp, #12
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8002a04:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	021b      	lsls	r3, r3, #8
 8002a12:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002a16:	4313      	orrs	r3, r2
 8002a18:	604b      	str	r3, [r1, #4]
}
 8002a1a:	bf00      	nop
 8002a1c:	370c      	adds	r7, #12
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bc80      	pop	{r7}
 8002a22:	4770      	bx	lr

08002a24 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8002a24:	b480      	push	{r7}
 8002a26:	b083      	sub	sp, #12
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8002a2c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a30:	689b      	ldr	r3, [r3, #8]
 8002a32:	f023 0203 	bic.w	r2, r3, #3
 8002a36:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	4313      	orrs	r3, r2
 8002a3e:	608b      	str	r3, [r1, #8]
}
 8002a40:	bf00      	nop
 8002a42:	370c      	adds	r7, #12
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bc80      	pop	{r7}
 8002a48:	4770      	bx	lr

08002a4a <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8002a4a:	b480      	push	{r7}
 8002a4c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002a4e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a52:	689b      	ldr	r3, [r3, #8]
 8002a54:	f003 030c 	and.w	r3, r3, #12
}
 8002a58:	4618      	mov	r0, r3
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bc80      	pop	{r7}
 8002a5e:	4770      	bx	lr

08002a60 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8002a60:	b480      	push	{r7}
 8002a62:	b083      	sub	sp, #12
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8002a68:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a6c:	689b      	ldr	r3, [r3, #8]
 8002a6e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002a72:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	608b      	str	r3, [r1, #8]
}
 8002a7c:	bf00      	nop
 8002a7e:	370c      	adds	r7, #12
 8002a80:	46bd      	mov	sp, r7
 8002a82:	bc80      	pop	{r7}
 8002a84:	4770      	bx	lr

08002a86 <LL_RCC_SetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB3Prescaler(uint32_t Prescaler)
{
 8002a86:	b480      	push	{r7}
 8002a88:	b083      	sub	sp, #12
 8002a8a:	af00      	add	r7, sp, #0
 8002a8c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8002a8e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a92:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8002a96:	f023 020f 	bic.w	r2, r3, #15
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	091b      	lsrs	r3, r3, #4
 8002a9e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8002aa8:	bf00      	nop
 8002aaa:	370c      	adds	r7, #12
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bc80      	pop	{r7}
 8002ab0:	4770      	bx	lr

08002ab2 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8002ab2:	b480      	push	{r7}
 8002ab4:	b083      	sub	sp, #12
 8002ab6:	af00      	add	r7, sp, #0
 8002ab8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8002aba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002abe:	689b      	ldr	r3, [r3, #8]
 8002ac0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002ac4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	4313      	orrs	r3, r2
 8002acc:	608b      	str	r3, [r1, #8]
}
 8002ace:	bf00      	nop
 8002ad0:	370c      	adds	r7, #12
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bc80      	pop	{r7}
 8002ad6:	4770      	bx	lr

08002ad8 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	b083      	sub	sp, #12
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8002ae0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ae4:	689b      	ldr	r3, [r3, #8]
 8002ae6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002aea:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	4313      	orrs	r3, r2
 8002af2:	608b      	str	r3, [r1, #8]
}
 8002af4:	bf00      	nop
 8002af6:	370c      	adds	r7, #12
 8002af8:	46bd      	mov	sp, r7
 8002afa:	bc80      	pop	{r7}
 8002afc:	4770      	bx	lr

08002afe <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8002afe:	b480      	push	{r7}
 8002b00:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002b02:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b06:	689b      	ldr	r3, [r3, #8]
 8002b08:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bc80      	pop	{r7}
 8002b12:	4770      	bx	lr

08002b14 <LL_RCC_GetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB3Prescaler(void)
{
 8002b14:	b480      	push	{r7}
 8002b16:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8002b18:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b1c:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8002b20:	011b      	lsls	r3, r3, #4
 8002b22:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8002b26:	4618      	mov	r0, r3
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	bc80      	pop	{r7}
 8002b2c:	4770      	bx	lr

08002b2e <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8002b2e:	b480      	push	{r7}
 8002b30:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8002b32:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b36:	689b      	ldr	r3, [r3, #8]
 8002b38:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bc80      	pop	{r7}
 8002b42:	4770      	bx	lr

08002b44 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8002b44:	b480      	push	{r7}
 8002b46:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8002b48:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b4c:	689b      	ldr	r3, [r3, #8]
 8002b4e:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 8002b52:	4618      	mov	r0, r3
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bc80      	pop	{r7}
 8002b58:	4770      	bx	lr

08002b5a <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8002b5a:	b480      	push	{r7}
 8002b5c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8002b5e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002b68:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002b6c:	6013      	str	r3, [r2, #0]
}
 8002b6e:	bf00      	nop
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bc80      	pop	{r7}
 8002b74:	4770      	bx	lr

08002b76 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8002b76:	b480      	push	{r7}
 8002b78:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8002b7a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002b84:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002b88:	6013      	str	r3, [r2, #0]
}
 8002b8a:	bf00      	nop
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	bc80      	pop	{r7}
 8002b90:	4770      	bx	lr

08002b92 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8002b92:	b480      	push	{r7}
 8002b94:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8002b96:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ba0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002ba4:	d101      	bne.n	8002baa <LL_RCC_PLL_IsReady+0x18>
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	e000      	b.n	8002bac <LL_RCC_PLL_IsReady+0x1a>
 8002baa:	2300      	movs	r3, #0
}
 8002bac:	4618      	mov	r0, r3
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bc80      	pop	{r7}
 8002bb2:	4770      	bx	lr

08002bb4 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8002bb8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002bbc:	68db      	ldr	r3, [r3, #12]
 8002bbe:	0a1b      	lsrs	r3, r3, #8
 8002bc0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bc80      	pop	{r7}
 8002bca:	4770      	bx	lr

08002bcc <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8002bd0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002bd4:	68db      	ldr	r3, [r3, #12]
 8002bd6:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 8002bda:	4618      	mov	r0, r3
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bc80      	pop	{r7}
 8002be0:	4770      	bx	lr

08002be2 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8002be2:	b480      	push	{r7}
 8002be4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8002be6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002bea:	68db      	ldr	r3, [r3, #12]
 8002bec:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bc80      	pop	{r7}
 8002bf6:	4770      	bx	lr

08002bf8 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8002bfc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c00:	68db      	ldr	r3, [r3, #12]
 8002c02:	f003 0303 	and.w	r3, r3, #3
}
 8002c06:	4618      	mov	r0, r3
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	bc80      	pop	{r7}
 8002c0c:	4770      	bx	lr

08002c0e <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8002c0e:	b480      	push	{r7}
 8002c10:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8002c12:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c16:	689b      	ldr	r3, [r3, #8]
 8002c18:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c1c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002c20:	d101      	bne.n	8002c26 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8002c22:	2301      	movs	r3, #1
 8002c24:	e000      	b.n	8002c28 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8002c26:	2300      	movs	r3, #0
}
 8002c28:	4618      	mov	r0, r3
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bc80      	pop	{r7}
 8002c2e:	4770      	bx	lr

08002c30 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8002c30:	b480      	push	{r7}
 8002c32:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8002c34:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c38:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8002c3c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c40:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002c44:	d101      	bne.n	8002c4a <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8002c46:	2301      	movs	r3, #1
 8002c48:	e000      	b.n	8002c4c <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8002c4a:	2300      	movs	r3, #0
}
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bc80      	pop	{r7}
 8002c52:	4770      	bx	lr

08002c54 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8002c54:	b480      	push	{r7}
 8002c56:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8002c58:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c5c:	689b      	ldr	r3, [r3, #8]
 8002c5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c62:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002c66:	d101      	bne.n	8002c6c <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8002c68:	2301      	movs	r3, #1
 8002c6a:	e000      	b.n	8002c6e <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8002c6c:	2300      	movs	r3, #0
}
 8002c6e:	4618      	mov	r0, r3
 8002c70:	46bd      	mov	sp, r7
 8002c72:	bc80      	pop	{r7}
 8002c74:	4770      	bx	lr

08002c76 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8002c76:	b480      	push	{r7}
 8002c78:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8002c7a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c7e:	689b      	ldr	r3, [r3, #8]
 8002c80:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002c84:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002c88:	d101      	bne.n	8002c8e <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	e000      	b.n	8002c90 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8002c8e:	2300      	movs	r3, #0
}
 8002c90:	4618      	mov	r0, r3
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bc80      	pop	{r7}
 8002c96:	4770      	bx	lr

08002c98 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b088      	sub	sp, #32
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d101      	bne.n	8002caa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	e36f      	b.n	800338a <HAL_RCC_OscConfig+0x6f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002caa:	f7ff fece 	bl	8002a4a <LL_RCC_GetSysClkSource>
 8002cae:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002cb0:	f7ff ffa2 	bl	8002bf8 <LL_RCC_PLL_GetMainSource>
 8002cb4:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f003 0320 	and.w	r3, r3, #32
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	f000 80c4 	beq.w	8002e4c <HAL_RCC_OscConfig+0x1b4>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002cc4:	69fb      	ldr	r3, [r7, #28]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d005      	beq.n	8002cd6 <HAL_RCC_OscConfig+0x3e>
 8002cca:	69fb      	ldr	r3, [r7, #28]
 8002ccc:	2b0c      	cmp	r3, #12
 8002cce:	d176      	bne.n	8002dbe <HAL_RCC_OscConfig+0x126>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002cd0:	69bb      	ldr	r3, [r7, #24]
 8002cd2:	2b01      	cmp	r3, #1
 8002cd4:	d173      	bne.n	8002dbe <HAL_RCC_OscConfig+0x126>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6a1b      	ldr	r3, [r3, #32]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d101      	bne.n	8002ce2 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	e353      	b.n	800338a <HAL_RCC_OscConfig+0x6f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002ce6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f003 0308 	and.w	r3, r3, #8
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d005      	beq.n	8002d00 <HAL_RCC_OscConfig+0x68>
 8002cf4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002cfe:	e006      	b.n	8002d0e <HAL_RCC_OscConfig+0x76>
 8002d00:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d04:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002d08:	091b      	lsrs	r3, r3, #4
 8002d0a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d222      	bcs.n	8002d58 <HAL_RCC_OscConfig+0xc0>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d16:	4618      	mov	r0, r3
 8002d18:	f000 fd3c 	bl	8003794 <RCC_SetFlashLatencyFromMSIRange>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d001      	beq.n	8002d26 <HAL_RCC_OscConfig+0x8e>
          {
            return HAL_ERROR;
 8002d22:	2301      	movs	r3, #1
 8002d24:	e331      	b.n	800338a <HAL_RCC_OscConfig+0x6f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002d26:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002d30:	f043 0308 	orr.w	r3, r3, #8
 8002d34:	6013      	str	r3, [r2, #0]
 8002d36:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d44:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d50:	4618      	mov	r0, r3
 8002d52:	f7ff fe53 	bl	80029fc <LL_RCC_MSI_SetCalibTrimming>
 8002d56:	e021      	b.n	8002d9c <HAL_RCC_OscConfig+0x104>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range. */
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002d58:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002d62:	f043 0308 	orr.w	r3, r3, #8
 8002d66:	6013      	str	r3, [r2, #0]
 8002d68:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d76:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002d7a:	4313      	orrs	r3, r2
 8002d7c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d82:	4618      	mov	r0, r3
 8002d84:	f7ff fe3a 	bl	80029fc <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	f000 fd01 	bl	8003794 <RCC_SetFlashLatencyFromMSIRange>
 8002d92:	4603      	mov	r3, r0
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d001      	beq.n	8002d9c <HAL_RCC_OscConfig+0x104>
          {
            return HAL_ERROR;
 8002d98:	2301      	movs	r3, #1
 8002d9a:	e2f6      	b.n	800338a <HAL_RCC_OscConfig+0x6f2>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002d9c:	f000 fcc2 	bl	8003724 <HAL_RCC_GetHCLKFreq>
 8002da0:	4603      	mov	r3, r0
 8002da2:	4aa7      	ldr	r2, [pc, #668]	@ (8003040 <HAL_RCC_OscConfig+0x3a8>)
 8002da4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings */
        status = HAL_InitTick(uwTickPrio);
 8002da6:	4ba7      	ldr	r3, [pc, #668]	@ (8003044 <HAL_RCC_OscConfig+0x3ac>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4618      	mov	r0, r3
 8002dac:	f7ff f910 	bl	8001fd0 <HAL_InitTick>
 8002db0:	4603      	mov	r3, r0
 8002db2:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8002db4:	7cfb      	ldrb	r3, [r7, #19]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d047      	beq.n	8002e4a <HAL_RCC_OscConfig+0x1b2>
        {
          return status;
 8002dba:	7cfb      	ldrb	r3, [r7, #19]
 8002dbc:	e2e5      	b.n	800338a <HAL_RCC_OscConfig+0x6f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6a1b      	ldr	r3, [r3, #32]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d02c      	beq.n	8002e20 <HAL_RCC_OscConfig+0x188>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002dc6:	f7ff fdc6 	bl	8002956 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002dca:	f7ff f94d 	bl	8002068 <HAL_GetTick>
 8002dce:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8002dd0:	e008      	b.n	8002de4 <HAL_RCC_OscConfig+0x14c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002dd2:	f7ff f949 	bl	8002068 <HAL_GetTick>
 8002dd6:	4602      	mov	r2, r0
 8002dd8:	697b      	ldr	r3, [r7, #20]
 8002dda:	1ad3      	subs	r3, r2, r3
 8002ddc:	2b02      	cmp	r3, #2
 8002dde:	d901      	bls.n	8002de4 <HAL_RCC_OscConfig+0x14c>
          {
            return HAL_TIMEOUT;
 8002de0:	2303      	movs	r3, #3
 8002de2:	e2d2      	b.n	800338a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() == 0U)
 8002de4:	f7ff fdd3 	bl	800298e <LL_RCC_MSI_IsReady>
 8002de8:	4603      	mov	r3, r0
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d0f1      	beq.n	8002dd2 <HAL_RCC_OscConfig+0x13a>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range. */
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002dee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002df8:	f043 0308 	orr.w	r3, r3, #8
 8002dfc:	6013      	str	r3, [r2, #0]
 8002dfe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e0c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002e10:	4313      	orrs	r3, r2
 8002e12:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value. */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e18:	4618      	mov	r0, r3
 8002e1a:	f7ff fdef 	bl	80029fc <LL_RCC_MSI_SetCalibTrimming>
 8002e1e:	e015      	b.n	8002e4c <HAL_RCC_OscConfig+0x1b4>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002e20:	f7ff fda7 	bl	8002972 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002e24:	f7ff f920 	bl	8002068 <HAL_GetTick>
 8002e28:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8002e2a:	e008      	b.n	8002e3e <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002e2c:	f7ff f91c 	bl	8002068 <HAL_GetTick>
 8002e30:	4602      	mov	r2, r0
 8002e32:	697b      	ldr	r3, [r7, #20]
 8002e34:	1ad3      	subs	r3, r2, r3
 8002e36:	2b02      	cmp	r3, #2
 8002e38:	d901      	bls.n	8002e3e <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8002e3a:	2303      	movs	r3, #3
 8002e3c:	e2a5      	b.n	800338a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() != 0U)
 8002e3e:	f7ff fda6 	bl	800298e <LL_RCC_MSI_IsReady>
 8002e42:	4603      	mov	r3, r0
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d1f1      	bne.n	8002e2c <HAL_RCC_OscConfig+0x194>
 8002e48:	e000      	b.n	8002e4c <HAL_RCC_OscConfig+0x1b4>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8002e4a:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f003 0301 	and.w	r3, r3, #1
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d058      	beq.n	8002f0a <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8002e58:	69fb      	ldr	r3, [r7, #28]
 8002e5a:	2b08      	cmp	r3, #8
 8002e5c:	d005      	beq.n	8002e6a <HAL_RCC_OscConfig+0x1d2>
 8002e5e:	69fb      	ldr	r3, [r7, #28]
 8002e60:	2b0c      	cmp	r3, #12
 8002e62:	d108      	bne.n	8002e76 <HAL_RCC_OscConfig+0x1de>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002e64:	69bb      	ldr	r3, [r7, #24]
 8002e66:	2b03      	cmp	r3, #3
 8002e68:	d105      	bne.n	8002e76 <HAL_RCC_OscConfig+0x1de>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d14b      	bne.n	8002f0a <HAL_RCC_OscConfig+0x272>
      {
        return HAL_ERROR;
 8002e72:	2301      	movs	r3, #1
 8002e74:	e289      	b.n	800338a <HAL_RCC_OscConfig+0x6f2>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 8002e76:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	689b      	ldr	r3, [r3, #8]
 8002e84:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002e88:	4313      	orrs	r3, r2
 8002e8a:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e94:	d102      	bne.n	8002e9c <HAL_RCC_OscConfig+0x204>
 8002e96:	f7ff fcae 	bl	80027f6 <LL_RCC_HSE_Enable>
 8002e9a:	e00d      	b.n	8002eb8 <HAL_RCC_OscConfig+0x220>
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	f5b3 1f04 	cmp.w	r3, #2162688	@ 0x210000
 8002ea4:	d104      	bne.n	8002eb0 <HAL_RCC_OscConfig+0x218>
 8002ea6:	f7ff fc79 	bl	800279c <LL_RCC_HSE_EnableTcxo>
 8002eaa:	f7ff fca4 	bl	80027f6 <LL_RCC_HSE_Enable>
 8002eae:	e003      	b.n	8002eb8 <HAL_RCC_OscConfig+0x220>
 8002eb0:	f7ff fcaf 	bl	8002812 <LL_RCC_HSE_Disable>
 8002eb4:	f7ff fc80 	bl	80027b8 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d012      	beq.n	8002ee6 <HAL_RCC_OscConfig+0x24e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ec0:	f7ff f8d2 	bl	8002068 <HAL_GetTick>
 8002ec4:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8002ec6:	e008      	b.n	8002eda <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ec8:	f7ff f8ce 	bl	8002068 <HAL_GetTick>
 8002ecc:	4602      	mov	r2, r0
 8002ece:	697b      	ldr	r3, [r7, #20]
 8002ed0:	1ad3      	subs	r3, r2, r3
 8002ed2:	2b64      	cmp	r3, #100	@ 0x64
 8002ed4:	d901      	bls.n	8002eda <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 8002ed6:	2303      	movs	r3, #3
 8002ed8:	e257      	b.n	800338a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() == 0U)
 8002eda:	f7ff fca8 	bl	800282e <LL_RCC_HSE_IsReady>
 8002ede:	4603      	mov	r3, r0
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d0f1      	beq.n	8002ec8 <HAL_RCC_OscConfig+0x230>
 8002ee4:	e011      	b.n	8002f0a <HAL_RCC_OscConfig+0x272>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ee6:	f7ff f8bf 	bl	8002068 <HAL_GetTick>
 8002eea:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8002eec:	e008      	b.n	8002f00 <HAL_RCC_OscConfig+0x268>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002eee:	f7ff f8bb 	bl	8002068 <HAL_GetTick>
 8002ef2:	4602      	mov	r2, r0
 8002ef4:	697b      	ldr	r3, [r7, #20]
 8002ef6:	1ad3      	subs	r3, r2, r3
 8002ef8:	2b64      	cmp	r3, #100	@ 0x64
 8002efa:	d901      	bls.n	8002f00 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8002efc:	2303      	movs	r3, #3
 8002efe:	e244      	b.n	800338a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() != 0U)
 8002f00:	f7ff fc95 	bl	800282e <LL_RCC_HSE_IsReady>
 8002f04:	4603      	mov	r3, r0
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d1f1      	bne.n	8002eee <HAL_RCC_OscConfig+0x256>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f003 0302 	and.w	r3, r3, #2
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d046      	beq.n	8002fa4 <HAL_RCC_OscConfig+0x30c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8002f16:	69fb      	ldr	r3, [r7, #28]
 8002f18:	2b04      	cmp	r3, #4
 8002f1a:	d005      	beq.n	8002f28 <HAL_RCC_OscConfig+0x290>
 8002f1c:	69fb      	ldr	r3, [r7, #28]
 8002f1e:	2b0c      	cmp	r3, #12
 8002f20:	d10e      	bne.n	8002f40 <HAL_RCC_OscConfig+0x2a8>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002f22:	69bb      	ldr	r3, [r7, #24]
 8002f24:	2b02      	cmp	r3, #2
 8002f26:	d10b      	bne.n	8002f40 <HAL_RCC_OscConfig+0x2a8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	691b      	ldr	r3, [r3, #16]
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d101      	bne.n	8002f34 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8002f30:	2301      	movs	r3, #1
 8002f32:	e22a      	b.n	800338a <HAL_RCC_OscConfig+0x6f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	695b      	ldr	r3, [r3, #20]
 8002f38:	4618      	mov	r0, r3
 8002f3a:	f7ff fcb6 	bl	80028aa <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002f3e:	e031      	b.n	8002fa4 <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	691b      	ldr	r3, [r3, #16]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d019      	beq.n	8002f7c <HAL_RCC_OscConfig+0x2e4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f48:	f7ff fc82 	bl	8002850 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f4c:	f7ff f88c 	bl	8002068 <HAL_GetTick>
 8002f50:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8002f52:	e008      	b.n	8002f66 <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f54:	f7ff f888 	bl	8002068 <HAL_GetTick>
 8002f58:	4602      	mov	r2, r0
 8002f5a:	697b      	ldr	r3, [r7, #20]
 8002f5c:	1ad3      	subs	r3, r2, r3
 8002f5e:	2b02      	cmp	r3, #2
 8002f60:	d901      	bls.n	8002f66 <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 8002f62:	2303      	movs	r3, #3
 8002f64:	e211      	b.n	800338a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() == 0U)
 8002f66:	f7ff fc8f 	bl	8002888 <LL_RCC_HSI_IsReady>
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d0f1      	beq.n	8002f54 <HAL_RCC_OscConfig+0x2bc>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	695b      	ldr	r3, [r3, #20]
 8002f74:	4618      	mov	r0, r3
 8002f76:	f7ff fc98 	bl	80028aa <LL_RCC_HSI_SetCalibTrimming>
 8002f7a:	e013      	b.n	8002fa4 <HAL_RCC_OscConfig+0x30c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f7c:	f7ff fc76 	bl	800286c <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f80:	f7ff f872 	bl	8002068 <HAL_GetTick>
 8002f84:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8002f86:	e008      	b.n	8002f9a <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f88:	f7ff f86e 	bl	8002068 <HAL_GetTick>
 8002f8c:	4602      	mov	r2, r0
 8002f8e:	697b      	ldr	r3, [r7, #20]
 8002f90:	1ad3      	subs	r3, r2, r3
 8002f92:	2b02      	cmp	r3, #2
 8002f94:	d901      	bls.n	8002f9a <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 8002f96:	2303      	movs	r3, #3
 8002f98:	e1f7      	b.n	800338a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() != 0U)
 8002f9a:	f7ff fc75 	bl	8002888 <LL_RCC_HSI_IsReady>
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d1f1      	bne.n	8002f88 <HAL_RCC_OscConfig+0x2f0>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f003 0308 	and.w	r3, r3, #8
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d06e      	beq.n	800308e <HAL_RCC_OscConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	699b      	ldr	r3, [r3, #24]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d056      	beq.n	8003066 <HAL_RCC_OscConfig+0x3ce>
    {
      uint32_t csr_temp = RCC->CSR;
 8002fb8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002fbc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002fc0:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	69da      	ldr	r2, [r3, #28]
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	f003 0310 	and.w	r3, r3, #16
 8002fcc:	429a      	cmp	r2, r3
 8002fce:	d031      	beq.n	8003034 <HAL_RCC_OscConfig+0x39c>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	f003 0302 	and.w	r3, r3, #2
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d006      	beq.n	8002fe8 <HAL_RCC_OscConfig+0x350>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d101      	bne.n	8002fe8 <HAL_RCC_OscConfig+0x350>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated */
          return HAL_ERROR;
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	e1d0      	b.n	800338a <HAL_RCC_OscConfig+0x6f2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	f003 0301 	and.w	r3, r3, #1
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d013      	beq.n	800301a <HAL_RCC_OscConfig+0x382>
        {
          __HAL_RCC_LSI_DISABLE();
 8002ff2:	f7ff fc8f 	bl	8002914 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002ff6:	f7ff f837 	bl	8002068 <HAL_GetTick>
 8002ffa:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 8002ffc:	e008      	b.n	8003010 <HAL_RCC_OscConfig+0x378>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ffe:	f7ff f833 	bl	8002068 <HAL_GetTick>
 8003002:	4602      	mov	r2, r0
 8003004:	697b      	ldr	r3, [r7, #20]
 8003006:	1ad3      	subs	r3, r2, r3
 8003008:	2b11      	cmp	r3, #17
 800300a:	d901      	bls.n	8003010 <HAL_RCC_OscConfig+0x378>
            {
              return HAL_TIMEOUT;
 800300c:	2303      	movs	r3, #3
 800300e:	e1bc      	b.n	800338a <HAL_RCC_OscConfig+0x6f2>
          while (LL_RCC_LSI_IsReady() != 0U)
 8003010:	f7ff fc90 	bl	8002934 <LL_RCC_LSI_IsReady>
 8003014:	4603      	mov	r3, r0
 8003016:	2b00      	cmp	r3, #0
 8003018:	d1f1      	bne.n	8002ffe <HAL_RCC_OscConfig+0x366>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 800301a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800301e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003022:	f023 0210 	bic.w	r2, r3, #16
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	69db      	ldr	r3, [r3, #28]
 800302a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800302e:	4313      	orrs	r3, r2
 8003030:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003034:	f7ff fc5e 	bl	80028f4 <LL_RCC_LSI_Enable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003038:	f7ff f816 	bl	8002068 <HAL_GetTick>
 800303c:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 800303e:	e00c      	b.n	800305a <HAL_RCC_OscConfig+0x3c2>
 8003040:	2000000c 	.word	0x2000000c
 8003044:	20000010 	.word	0x20000010
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003048:	f7ff f80e 	bl	8002068 <HAL_GetTick>
 800304c:	4602      	mov	r2, r0
 800304e:	697b      	ldr	r3, [r7, #20]
 8003050:	1ad3      	subs	r3, r2, r3
 8003052:	2b11      	cmp	r3, #17
 8003054:	d901      	bls.n	800305a <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8003056:	2303      	movs	r3, #3
 8003058:	e197      	b.n	800338a <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() == 0U)
 800305a:	f7ff fc6b 	bl	8002934 <LL_RCC_LSI_IsReady>
 800305e:	4603      	mov	r3, r0
 8003060:	2b00      	cmp	r3, #0
 8003062:	d0f1      	beq.n	8003048 <HAL_RCC_OscConfig+0x3b0>
 8003064:	e013      	b.n	800308e <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003066:	f7ff fc55 	bl	8002914 <LL_RCC_LSI_Disable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800306a:	f7fe fffd 	bl	8002068 <HAL_GetTick>
 800306e:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 8003070:	e008      	b.n	8003084 <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003072:	f7fe fff9 	bl	8002068 <HAL_GetTick>
 8003076:	4602      	mov	r2, r0
 8003078:	697b      	ldr	r3, [r7, #20]
 800307a:	1ad3      	subs	r3, r2, r3
 800307c:	2b11      	cmp	r3, #17
 800307e:	d901      	bls.n	8003084 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8003080:	2303      	movs	r3, #3
 8003082:	e182      	b.n	800338a <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() != 0U)
 8003084:	f7ff fc56 	bl	8002934 <LL_RCC_LSI_IsReady>
 8003088:	4603      	mov	r3, r0
 800308a:	2b00      	cmp	r3, #0
 800308c:	d1f1      	bne.n	8003072 <HAL_RCC_OscConfig+0x3da>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f003 0304 	and.w	r3, r3, #4
 8003096:	2b00      	cmp	r3, #0
 8003098:	f000 80d8 	beq.w	800324c <HAL_RCC_OscConfig+0x5b4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 800309c:	f7ff fb6c 	bl	8002778 <LL_PWR_IsEnabledBkUpAccess>
 80030a0:	4603      	mov	r3, r0
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d113      	bne.n	80030ce <HAL_RCC_OscConfig+0x436>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80030a6:	f7ff fb4d 	bl	8002744 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030aa:	f7fe ffdd 	bl	8002068 <HAL_GetTick>
 80030ae:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 80030b0:	e008      	b.n	80030c4 <HAL_RCC_OscConfig+0x42c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030b2:	f7fe ffd9 	bl	8002068 <HAL_GetTick>
 80030b6:	4602      	mov	r2, r0
 80030b8:	697b      	ldr	r3, [r7, #20]
 80030ba:	1ad3      	subs	r3, r2, r3
 80030bc:	2b02      	cmp	r3, #2
 80030be:	d901      	bls.n	80030c4 <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 80030c0:	2303      	movs	r3, #3
 80030c2:	e162      	b.n	800338a <HAL_RCC_OscConfig+0x6f2>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 80030c4:	f7ff fb58 	bl	8002778 <LL_PWR_IsEnabledBkUpAccess>
 80030c8:	4603      	mov	r3, r0
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d0f1      	beq.n	80030b2 <HAL_RCC_OscConfig+0x41a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	68db      	ldr	r3, [r3, #12]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d07b      	beq.n	80031ce <HAL_RCC_OscConfig+0x536>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	68db      	ldr	r3, [r3, #12]
 80030da:	2b85      	cmp	r3, #133	@ 0x85
 80030dc:	d003      	beq.n	80030e6 <HAL_RCC_OscConfig+0x44e>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	68db      	ldr	r3, [r3, #12]
 80030e2:	2b05      	cmp	r3, #5
 80030e4:	d109      	bne.n	80030fa <HAL_RCC_OscConfig+0x462>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80030e6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80030ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030ee:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80030f2:	f043 0304 	orr.w	r3, r3, #4
 80030f6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030fa:	f7fe ffb5 	bl	8002068 <HAL_GetTick>
 80030fe:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003100:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003104:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003108:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800310c:	f043 0301 	orr.w	r3, r3, #1
 8003110:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8003114:	e00a      	b.n	800312c <HAL_RCC_OscConfig+0x494>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003116:	f7fe ffa7 	bl	8002068 <HAL_GetTick>
 800311a:	4602      	mov	r2, r0
 800311c:	697b      	ldr	r3, [r7, #20]
 800311e:	1ad3      	subs	r3, r2, r3
 8003120:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003124:	4293      	cmp	r3, r2
 8003126:	d901      	bls.n	800312c <HAL_RCC_OscConfig+0x494>
        {
          return HAL_TIMEOUT;
 8003128:	2303      	movs	r3, #3
 800312a:	e12e      	b.n	800338a <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() == 0U)
 800312c:	f7ff fbd1 	bl	80028d2 <LL_RCC_LSE_IsReady>
 8003130:	4603      	mov	r3, r0
 8003132:	2b00      	cmp	r3, #0
 8003134:	d0ef      	beq.n	8003116 <HAL_RCC_OscConfig+0x47e>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	68db      	ldr	r3, [r3, #12]
 800313a:	2b81      	cmp	r3, #129	@ 0x81
 800313c:	d003      	beq.n	8003146 <HAL_RCC_OscConfig+0x4ae>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	68db      	ldr	r3, [r3, #12]
 8003142:	2b85      	cmp	r3, #133	@ 0x85
 8003144:	d121      	bne.n	800318a <HAL_RCC_OscConfig+0x4f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003146:	f7fe ff8f 	bl	8002068 <HAL_GetTick>
 800314a:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800314c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003150:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003154:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003158:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800315c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8003160:	e00a      	b.n	8003178 <HAL_RCC_OscConfig+0x4e0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003162:	f7fe ff81 	bl	8002068 <HAL_GetTick>
 8003166:	4602      	mov	r2, r0
 8003168:	697b      	ldr	r3, [r7, #20]
 800316a:	1ad3      	subs	r3, r2, r3
 800316c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003170:	4293      	cmp	r3, r2
 8003172:	d901      	bls.n	8003178 <HAL_RCC_OscConfig+0x4e0>
          {
            return HAL_TIMEOUT;
 8003174:	2303      	movs	r3, #3
 8003176:	e108      	b.n	800338a <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8003178:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800317c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003180:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003184:	2b00      	cmp	r3, #0
 8003186:	d0ec      	beq.n	8003162 <HAL_RCC_OscConfig+0x4ca>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8003188:	e060      	b.n	800324c <HAL_RCC_OscConfig+0x5b4>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800318a:	f7fe ff6d 	bl	8002068 <HAL_GetTick>
 800318e:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003190:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003194:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003198:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800319c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80031a0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80031a4:	e00a      	b.n	80031bc <HAL_RCC_OscConfig+0x524>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031a6:	f7fe ff5f 	bl	8002068 <HAL_GetTick>
 80031aa:	4602      	mov	r2, r0
 80031ac:	697b      	ldr	r3, [r7, #20]
 80031ae:	1ad3      	subs	r3, r2, r3
 80031b0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031b4:	4293      	cmp	r3, r2
 80031b6:	d901      	bls.n	80031bc <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 80031b8:	2303      	movs	r3, #3
 80031ba:	e0e6      	b.n	800338a <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80031bc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80031c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031c4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d1ec      	bne.n	80031a6 <HAL_RCC_OscConfig+0x50e>
 80031cc:	e03e      	b.n	800324c <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031ce:	f7fe ff4b 	bl	8002068 <HAL_GetTick>
 80031d2:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80031d4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80031d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031dc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80031e0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80031e4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80031e8:	e00a      	b.n	8003200 <HAL_RCC_OscConfig+0x568>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031ea:	f7fe ff3d 	bl	8002068 <HAL_GetTick>
 80031ee:	4602      	mov	r2, r0
 80031f0:	697b      	ldr	r3, [r7, #20]
 80031f2:	1ad3      	subs	r3, r2, r3
 80031f4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d901      	bls.n	8003200 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 80031fc:	2303      	movs	r3, #3
 80031fe:	e0c4      	b.n	800338a <HAL_RCC_OscConfig+0x6f2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003200:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003204:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003208:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800320c:	2b00      	cmp	r3, #0
 800320e:	d1ec      	bne.n	80031ea <HAL_RCC_OscConfig+0x552>
        }
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003210:	f7fe ff2a 	bl	8002068 <HAL_GetTick>
 8003214:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003216:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800321a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800321e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003222:	f023 0301 	bic.w	r3, r3, #1
 8003226:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800322a:	e00a      	b.n	8003242 <HAL_RCC_OscConfig+0x5aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800322c:	f7fe ff1c 	bl	8002068 <HAL_GetTick>
 8003230:	4602      	mov	r2, r0
 8003232:	697b      	ldr	r3, [r7, #20]
 8003234:	1ad3      	subs	r3, r2, r3
 8003236:	f241 3288 	movw	r2, #5000	@ 0x1388
 800323a:	4293      	cmp	r3, r2
 800323c:	d901      	bls.n	8003242 <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 800323e:	2303      	movs	r3, #3
 8003240:	e0a3      	b.n	800338a <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() != 0U)
 8003242:	f7ff fb46 	bl	80028d2 <LL_RCC_LSE_IsReady>
 8003246:	4603      	mov	r3, r0
 8003248:	2b00      	cmp	r3, #0
 800324a:	d1ef      	bne.n	800322c <HAL_RCC_OscConfig+0x594>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003250:	2b00      	cmp	r3, #0
 8003252:	f000 8099 	beq.w	8003388 <HAL_RCC_OscConfig+0x6f0>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003256:	69fb      	ldr	r3, [r7, #28]
 8003258:	2b0c      	cmp	r3, #12
 800325a:	d06c      	beq.n	8003336 <HAL_RCC_OscConfig+0x69e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003260:	2b02      	cmp	r3, #2
 8003262:	d14b      	bne.n	80032fc <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003264:	f7ff fc87 	bl	8002b76 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003268:	f7fe fefe 	bl	8002068 <HAL_GetTick>
 800326c:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 800326e:	e008      	b.n	8003282 <HAL_RCC_OscConfig+0x5ea>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003270:	f7fe fefa 	bl	8002068 <HAL_GetTick>
 8003274:	4602      	mov	r2, r0
 8003276:	697b      	ldr	r3, [r7, #20]
 8003278:	1ad3      	subs	r3, r2, r3
 800327a:	2b0a      	cmp	r3, #10
 800327c:	d901      	bls.n	8003282 <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 800327e:	2303      	movs	r3, #3
 8003280:	e083      	b.n	800338a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8003282:	f7ff fc86 	bl	8002b92 <LL_RCC_PLL_IsReady>
 8003286:	4603      	mov	r3, r0
 8003288:	2b00      	cmp	r3, #0
 800328a:	d1f1      	bne.n	8003270 <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800328c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003290:	68da      	ldr	r2, [r3, #12]
 8003292:	4b40      	ldr	r3, [pc, #256]	@ (8003394 <HAL_RCC_OscConfig+0x6fc>)
 8003294:	4013      	ands	r3, r2
 8003296:	687a      	ldr	r2, [r7, #4]
 8003298:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 800329a:	687a      	ldr	r2, [r7, #4]
 800329c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800329e:	4311      	orrs	r1, r2
 80032a0:	687a      	ldr	r2, [r7, #4]
 80032a2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80032a4:	0212      	lsls	r2, r2, #8
 80032a6:	4311      	orrs	r1, r2
 80032a8:	687a      	ldr	r2, [r7, #4]
 80032aa:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80032ac:	4311      	orrs	r1, r2
 80032ae:	687a      	ldr	r2, [r7, #4]
 80032b0:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80032b2:	4311      	orrs	r1, r2
 80032b4:	687a      	ldr	r2, [r7, #4]
 80032b6:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80032b8:	430a      	orrs	r2, r1
 80032ba:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80032be:	4313      	orrs	r3, r2
 80032c0:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80032c2:	f7ff fc4a 	bl	8002b5a <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80032c6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80032ca:	68db      	ldr	r3, [r3, #12]
 80032cc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80032d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80032d4:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032d6:	f7fe fec7 	bl	8002068 <HAL_GetTick>
 80032da:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 80032dc:	e008      	b.n	80032f0 <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032de:	f7fe fec3 	bl	8002068 <HAL_GetTick>
 80032e2:	4602      	mov	r2, r0
 80032e4:	697b      	ldr	r3, [r7, #20]
 80032e6:	1ad3      	subs	r3, r2, r3
 80032e8:	2b0a      	cmp	r3, #10
 80032ea:	d901      	bls.n	80032f0 <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 80032ec:	2303      	movs	r3, #3
 80032ee:	e04c      	b.n	800338a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() == 0U)
 80032f0:	f7ff fc4f 	bl	8002b92 <LL_RCC_PLL_IsReady>
 80032f4:	4603      	mov	r3, r0
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d0f1      	beq.n	80032de <HAL_RCC_OscConfig+0x646>
 80032fa:	e045      	b.n	8003388 <HAL_RCC_OscConfig+0x6f0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032fc:	f7ff fc3b 	bl	8002b76 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003300:	f7fe feb2 	bl	8002068 <HAL_GetTick>
 8003304:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 8003306:	e008      	b.n	800331a <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003308:	f7fe feae 	bl	8002068 <HAL_GetTick>
 800330c:	4602      	mov	r2, r0
 800330e:	697b      	ldr	r3, [r7, #20]
 8003310:	1ad3      	subs	r3, r2, r3
 8003312:	2b0a      	cmp	r3, #10
 8003314:	d901      	bls.n	800331a <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8003316:	2303      	movs	r3, #3
 8003318:	e037      	b.n	800338a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 800331a:	f7ff fc3a 	bl	8002b92 <LL_RCC_PLL_IsReady>
 800331e:	4603      	mov	r3, r0
 8003320:	2b00      	cmp	r3, #0
 8003322:	d1f1      	bne.n	8003308 <HAL_RCC_OscConfig+0x670>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8003324:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003328:	68da      	ldr	r2, [r3, #12]
 800332a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800332e:	4b1a      	ldr	r3, [pc, #104]	@ (8003398 <HAL_RCC_OscConfig+0x700>)
 8003330:	4013      	ands	r3, r2
 8003332:	60cb      	str	r3, [r1, #12]
 8003334:	e028      	b.n	8003388 <HAL_RCC_OscConfig+0x6f0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800333a:	2b01      	cmp	r3, #1
 800333c:	d101      	bne.n	8003342 <HAL_RCC_OscConfig+0x6aa>
      {
        return HAL_ERROR;
 800333e:	2301      	movs	r3, #1
 8003340:	e023      	b.n	800338a <HAL_RCC_OscConfig+0x6f2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003342:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003346:	68db      	ldr	r3, [r3, #12]
 8003348:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 800334a:	69bb      	ldr	r3, [r7, #24]
 800334c:	f003 0203 	and.w	r2, r3, #3
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003354:	429a      	cmp	r2, r3
 8003356:	d115      	bne.n	8003384 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8003358:	69bb      	ldr	r3, [r7, #24]
 800335a:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003362:	429a      	cmp	r2, r3
 8003364:	d10e      	bne.n	8003384 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 8003366:	69bb      	ldr	r3, [r7, #24]
 8003368:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003370:	021b      	lsls	r3, r3, #8
 8003372:	429a      	cmp	r2, r3
 8003374:	d106      	bne.n	8003384 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 8003376:	69bb      	ldr	r3, [r7, #24]
 8003378:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003380:	429a      	cmp	r2, r3
 8003382:	d001      	beq.n	8003388 <HAL_RCC_OscConfig+0x6f0>
        {
          return HAL_ERROR;
 8003384:	2301      	movs	r3, #1
 8003386:	e000      	b.n	800338a <HAL_RCC_OscConfig+0x6f2>
        }
      }
    }
  }
  return HAL_OK;
 8003388:	2300      	movs	r3, #0
}
 800338a:	4618      	mov	r0, r3
 800338c:	3720      	adds	r7, #32
 800338e:	46bd      	mov	sp, r7
 8003390:	bd80      	pop	{r7, pc}
 8003392:	bf00      	nop
 8003394:	11c1808c 	.word	0x11c1808c
 8003398:	eefefffc 	.word	0xeefefffc

0800339c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b084      	sub	sp, #16
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
 80033a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d101      	bne.n	80033b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80033ac:	2301      	movs	r3, #1
 80033ae:	e10f      	b.n	80035d0 <HAL_RCC_ClockConfig+0x234>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80033b0:	4b89      	ldr	r3, [pc, #548]	@ (80035d8 <HAL_RCC_ClockConfig+0x23c>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f003 0307 	and.w	r3, r3, #7
 80033b8:	683a      	ldr	r2, [r7, #0]
 80033ba:	429a      	cmp	r2, r3
 80033bc:	d91b      	bls.n	80033f6 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033be:	4b86      	ldr	r3, [pc, #536]	@ (80035d8 <HAL_RCC_ClockConfig+0x23c>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f023 0207 	bic.w	r2, r3, #7
 80033c6:	4984      	ldr	r1, [pc, #528]	@ (80035d8 <HAL_RCC_ClockConfig+0x23c>)
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	4313      	orrs	r3, r2
 80033cc:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80033ce:	f7fe fe4b 	bl	8002068 <HAL_GetTick>
 80033d2:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033d4:	e008      	b.n	80033e8 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80033d6:	f7fe fe47 	bl	8002068 <HAL_GetTick>
 80033da:	4602      	mov	r2, r0
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	1ad3      	subs	r3, r2, r3
 80033e0:	2b02      	cmp	r3, #2
 80033e2:	d901      	bls.n	80033e8 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80033e4:	2303      	movs	r3, #3
 80033e6:	e0f3      	b.n	80035d0 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033e8:	4b7b      	ldr	r3, [pc, #492]	@ (80035d8 <HAL_RCC_ClockConfig+0x23c>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f003 0307 	and.w	r3, r3, #7
 80033f0:	683a      	ldr	r2, [r7, #0]
 80033f2:	429a      	cmp	r2, r3
 80033f4:	d1ef      	bne.n	80033d6 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f003 0302 	and.w	r3, r3, #2
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d016      	beq.n	8003430 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	689b      	ldr	r3, [r3, #8]
 8003406:	4618      	mov	r0, r3
 8003408:	f7ff fb2a 	bl	8002a60 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800340c:	f7fe fe2c 	bl	8002068 <HAL_GetTick>
 8003410:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8003412:	e008      	b.n	8003426 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003414:	f7fe fe28 	bl	8002068 <HAL_GetTick>
 8003418:	4602      	mov	r2, r0
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	1ad3      	subs	r3, r2, r3
 800341e:	2b02      	cmp	r3, #2
 8003420:	d901      	bls.n	8003426 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8003422:	2303      	movs	r3, #3
 8003424:	e0d4      	b.n	80035d0 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8003426:	f7ff fbf2 	bl	8002c0e <LL_RCC_IsActiveFlag_HPRE>
 800342a:	4603      	mov	r3, r0
 800342c:	2b00      	cmp	r3, #0
 800342e:	d0f1      	beq.n	8003414 <HAL_RCC_ClockConfig+0x78>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003438:	2b00      	cmp	r3, #0
 800343a:	d016      	beq.n	800346a <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	695b      	ldr	r3, [r3, #20]
 8003440:	4618      	mov	r0, r3
 8003442:	f7ff fb20 	bl	8002a86 <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003446:	f7fe fe0f 	bl	8002068 <HAL_GetTick>
 800344a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800344c:	e008      	b.n	8003460 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800344e:	f7fe fe0b 	bl	8002068 <HAL_GetTick>
 8003452:	4602      	mov	r2, r0
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	1ad3      	subs	r3, r2, r3
 8003458:	2b02      	cmp	r3, #2
 800345a:	d901      	bls.n	8003460 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 800345c:	2303      	movs	r3, #3
 800345e:	e0b7      	b.n	80035d0 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8003460:	f7ff fbe6 	bl	8002c30 <LL_RCC_IsActiveFlag_SHDHPRE>
 8003464:	4603      	mov	r3, r0
 8003466:	2b00      	cmp	r3, #0
 8003468:	d0f1      	beq.n	800344e <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f003 0304 	and.w	r3, r3, #4
 8003472:	2b00      	cmp	r3, #0
 8003474:	d016      	beq.n	80034a4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	68db      	ldr	r3, [r3, #12]
 800347a:	4618      	mov	r0, r3
 800347c:	f7ff fb19 	bl	8002ab2 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003480:	f7fe fdf2 	bl	8002068 <HAL_GetTick>
 8003484:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8003486:	e008      	b.n	800349a <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003488:	f7fe fdee 	bl	8002068 <HAL_GetTick>
 800348c:	4602      	mov	r2, r0
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	1ad3      	subs	r3, r2, r3
 8003492:	2b02      	cmp	r3, #2
 8003494:	d901      	bls.n	800349a <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8003496:	2303      	movs	r3, #3
 8003498:	e09a      	b.n	80035d0 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800349a:	f7ff fbdb 	bl	8002c54 <LL_RCC_IsActiveFlag_PPRE1>
 800349e:	4603      	mov	r3, r0
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d0f1      	beq.n	8003488 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f003 0308 	and.w	r3, r3, #8
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d017      	beq.n	80034e0 <HAL_RCC_ClockConfig+0x144>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	691b      	ldr	r3, [r3, #16]
 80034b4:	00db      	lsls	r3, r3, #3
 80034b6:	4618      	mov	r0, r3
 80034b8:	f7ff fb0e 	bl	8002ad8 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80034bc:	f7fe fdd4 	bl	8002068 <HAL_GetTick>
 80034c0:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80034c2:	e008      	b.n	80034d6 <HAL_RCC_ClockConfig+0x13a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80034c4:	f7fe fdd0 	bl	8002068 <HAL_GetTick>
 80034c8:	4602      	mov	r2, r0
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	1ad3      	subs	r3, r2, r3
 80034ce:	2b02      	cmp	r3, #2
 80034d0:	d901      	bls.n	80034d6 <HAL_RCC_ClockConfig+0x13a>
      {
        return HAL_TIMEOUT;
 80034d2:	2303      	movs	r3, #3
 80034d4:	e07c      	b.n	80035d0 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80034d6:	f7ff fbce 	bl	8002c76 <LL_RCC_IsActiveFlag_PPRE2>
 80034da:	4603      	mov	r3, r0
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d0f1      	beq.n	80034c4 <HAL_RCC_ClockConfig+0x128>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f003 0301 	and.w	r3, r3, #1
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d043      	beq.n	8003574 <HAL_RCC_ClockConfig+0x1d8>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	2b02      	cmp	r3, #2
 80034f2:	d106      	bne.n	8003502 <HAL_RCC_ClockConfig+0x166>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 80034f4:	f7ff f99b 	bl	800282e <LL_RCC_HSE_IsReady>
 80034f8:	4603      	mov	r3, r0
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d11e      	bne.n	800353c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80034fe:	2301      	movs	r3, #1
 8003500:	e066      	b.n	80035d0 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	685b      	ldr	r3, [r3, #4]
 8003506:	2b03      	cmp	r3, #3
 8003508:	d106      	bne.n	8003518 <HAL_RCC_ClockConfig+0x17c>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 800350a:	f7ff fb42 	bl	8002b92 <LL_RCC_PLL_IsReady>
 800350e:	4603      	mov	r3, r0
 8003510:	2b00      	cmp	r3, #0
 8003512:	d113      	bne.n	800353c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003514:	2301      	movs	r3, #1
 8003516:	e05b      	b.n	80035d0 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	685b      	ldr	r3, [r3, #4]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d106      	bne.n	800352e <HAL_RCC_ClockConfig+0x192>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8003520:	f7ff fa35 	bl	800298e <LL_RCC_MSI_IsReady>
 8003524:	4603      	mov	r3, r0
 8003526:	2b00      	cmp	r3, #0
 8003528:	d108      	bne.n	800353c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800352a:	2301      	movs	r3, #1
 800352c:	e050      	b.n	80035d0 <HAL_RCC_ClockConfig+0x234>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 800352e:	f7ff f9ab 	bl	8002888 <LL_RCC_HSI_IsReady>
 8003532:	4603      	mov	r3, r0
 8003534:	2b00      	cmp	r3, #0
 8003536:	d101      	bne.n	800353c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003538:	2301      	movs	r3, #1
 800353a:	e049      	b.n	80035d0 <HAL_RCC_ClockConfig+0x234>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	685b      	ldr	r3, [r3, #4]
 8003540:	4618      	mov	r0, r3
 8003542:	f7ff fa6f 	bl	8002a24 <LL_RCC_SetSysClkSource>

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003546:	f7fe fd8f 	bl	8002068 <HAL_GetTick>
 800354a:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800354c:	e00a      	b.n	8003564 <HAL_RCC_ClockConfig+0x1c8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800354e:	f7fe fd8b 	bl	8002068 <HAL_GetTick>
 8003552:	4602      	mov	r2, r0
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	1ad3      	subs	r3, r2, r3
 8003558:	f241 3288 	movw	r2, #5000	@ 0x1388
 800355c:	4293      	cmp	r3, r2
 800355e:	d901      	bls.n	8003564 <HAL_RCC_ClockConfig+0x1c8>
      {
        return HAL_TIMEOUT;
 8003560:	2303      	movs	r3, #3
 8003562:	e035      	b.n	80035d0 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003564:	f7ff fa71 	bl	8002a4a <LL_RCC_GetSysClkSource>
 8003568:	4602      	mov	r2, r0
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	685b      	ldr	r3, [r3, #4]
 800356e:	009b      	lsls	r3, r3, #2
 8003570:	429a      	cmp	r2, r3
 8003572:	d1ec      	bne.n	800354e <HAL_RCC_ClockConfig+0x1b2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003574:	4b18      	ldr	r3, [pc, #96]	@ (80035d8 <HAL_RCC_ClockConfig+0x23c>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f003 0307 	and.w	r3, r3, #7
 800357c:	683a      	ldr	r2, [r7, #0]
 800357e:	429a      	cmp	r2, r3
 8003580:	d21b      	bcs.n	80035ba <HAL_RCC_ClockConfig+0x21e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003582:	4b15      	ldr	r3, [pc, #84]	@ (80035d8 <HAL_RCC_ClockConfig+0x23c>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f023 0207 	bic.w	r2, r3, #7
 800358a:	4913      	ldr	r1, [pc, #76]	@ (80035d8 <HAL_RCC_ClockConfig+0x23c>)
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	4313      	orrs	r3, r2
 8003590:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003592:	f7fe fd69 	bl	8002068 <HAL_GetTick>
 8003596:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003598:	e008      	b.n	80035ac <HAL_RCC_ClockConfig+0x210>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800359a:	f7fe fd65 	bl	8002068 <HAL_GetTick>
 800359e:	4602      	mov	r2, r0
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	1ad3      	subs	r3, r2, r3
 80035a4:	2b02      	cmp	r3, #2
 80035a6:	d901      	bls.n	80035ac <HAL_RCC_ClockConfig+0x210>
      {
        return HAL_TIMEOUT;
 80035a8:	2303      	movs	r3, #3
 80035aa:	e011      	b.n	80035d0 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80035ac:	4b0a      	ldr	r3, [pc, #40]	@ (80035d8 <HAL_RCC_ClockConfig+0x23c>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f003 0307 	and.w	r3, r3, #7
 80035b4:	683a      	ldr	r2, [r7, #0]
 80035b6:	429a      	cmp	r2, r3
 80035b8:	d1ef      	bne.n	800359a <HAL_RCC_ClockConfig+0x1fe>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80035ba:	f000 f8b3 	bl	8003724 <HAL_RCC_GetHCLKFreq>
 80035be:	4603      	mov	r3, r0
 80035c0:	4a06      	ldr	r2, [pc, #24]	@ (80035dc <HAL_RCC_ClockConfig+0x240>)
 80035c2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  return HAL_InitTick(uwTickPrio);
 80035c4:	4b06      	ldr	r3, [pc, #24]	@ (80035e0 <HAL_RCC_ClockConfig+0x244>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4618      	mov	r0, r3
 80035ca:	f7fe fd01 	bl	8001fd0 <HAL_InitTick>
 80035ce:	4603      	mov	r3, r0
}
 80035d0:	4618      	mov	r0, r3
 80035d2:	3710      	adds	r7, #16
 80035d4:	46bd      	mov	sp, r7
 80035d6:	bd80      	pop	{r7, pc}
 80035d8:	58004000 	.word	0x58004000
 80035dc:	2000000c 	.word	0x2000000c
 80035e0:	20000010 	.word	0x20000010

080035e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80035e4:	b590      	push	{r4, r7, lr}
 80035e6:	b087      	sub	sp, #28
 80035e8:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 80035ea:	2300      	movs	r3, #0
 80035ec:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 80035ee:	2300      	movs	r3, #0
 80035f0:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80035f2:	f7ff fa2a 	bl	8002a4a <LL_RCC_GetSysClkSource>
 80035f6:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80035f8:	f7ff fafe 	bl	8002bf8 <LL_RCC_PLL_GetMainSource>
 80035fc:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80035fe:	68bb      	ldr	r3, [r7, #8]
 8003600:	2b00      	cmp	r3, #0
 8003602:	d005      	beq.n	8003610 <HAL_RCC_GetSysClockFreq+0x2c>
 8003604:	68bb      	ldr	r3, [r7, #8]
 8003606:	2b0c      	cmp	r3, #12
 8003608:	d139      	bne.n	800367e <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2b01      	cmp	r3, #1
 800360e:	d136      	bne.n	800367e <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /* Retrieve MSI frequency range in Hz */
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8003610:	f7ff f9cd 	bl	80029ae <LL_RCC_MSI_IsEnabledRangeSelect>
 8003614:	4603      	mov	r3, r0
 8003616:	2b00      	cmp	r3, #0
 8003618:	d115      	bne.n	8003646 <HAL_RCC_GetSysClockFreq+0x62>
 800361a:	f7ff f9c8 	bl	80029ae <LL_RCC_MSI_IsEnabledRangeSelect>
 800361e:	4603      	mov	r3, r0
 8003620:	2b01      	cmp	r3, #1
 8003622:	d106      	bne.n	8003632 <HAL_RCC_GetSysClockFreq+0x4e>
 8003624:	f7ff f9d3 	bl	80029ce <LL_RCC_MSI_GetRange>
 8003628:	4603      	mov	r3, r0
 800362a:	0a1b      	lsrs	r3, r3, #8
 800362c:	f003 030f 	and.w	r3, r3, #15
 8003630:	e005      	b.n	800363e <HAL_RCC_GetSysClockFreq+0x5a>
 8003632:	f7ff f9d7 	bl	80029e4 <LL_RCC_MSI_GetRangeAfterStandby>
 8003636:	4603      	mov	r3, r0
 8003638:	0a1b      	lsrs	r3, r3, #8
 800363a:	f003 030f 	and.w	r3, r3, #15
 800363e:	4a36      	ldr	r2, [pc, #216]	@ (8003718 <HAL_RCC_GetSysClockFreq+0x134>)
 8003640:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003644:	e014      	b.n	8003670 <HAL_RCC_GetSysClockFreq+0x8c>
 8003646:	f7ff f9b2 	bl	80029ae <LL_RCC_MSI_IsEnabledRangeSelect>
 800364a:	4603      	mov	r3, r0
 800364c:	2b01      	cmp	r3, #1
 800364e:	d106      	bne.n	800365e <HAL_RCC_GetSysClockFreq+0x7a>
 8003650:	f7ff f9bd 	bl	80029ce <LL_RCC_MSI_GetRange>
 8003654:	4603      	mov	r3, r0
 8003656:	091b      	lsrs	r3, r3, #4
 8003658:	f003 030f 	and.w	r3, r3, #15
 800365c:	e005      	b.n	800366a <HAL_RCC_GetSysClockFreq+0x86>
 800365e:	f7ff f9c1 	bl	80029e4 <LL_RCC_MSI_GetRangeAfterStandby>
 8003662:	4603      	mov	r3, r0
 8003664:	091b      	lsrs	r3, r3, #4
 8003666:	f003 030f 	and.w	r3, r3, #15
 800366a:	4a2b      	ldr	r2, [pc, #172]	@ (8003718 <HAL_RCC_GetSysClockFreq+0x134>)
 800366c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003670:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003672:	68bb      	ldr	r3, [r7, #8]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d115      	bne.n	80036a4 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 8003678:	693b      	ldr	r3, [r7, #16]
 800367a:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800367c:	e012      	b.n	80036a4 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800367e:	68bb      	ldr	r3, [r7, #8]
 8003680:	2b04      	cmp	r3, #4
 8003682:	d102      	bne.n	800368a <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003684:	4b25      	ldr	r3, [pc, #148]	@ (800371c <HAL_RCC_GetSysClockFreq+0x138>)
 8003686:	617b      	str	r3, [r7, #20]
 8003688:	e00c      	b.n	80036a4 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800368a:	68bb      	ldr	r3, [r7, #8]
 800368c:	2b08      	cmp	r3, #8
 800368e:	d109      	bne.n	80036a4 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003690:	f7ff f8a0 	bl	80027d4 <LL_RCC_HSE_IsEnabledDiv2>
 8003694:	4603      	mov	r3, r0
 8003696:	2b01      	cmp	r3, #1
 8003698:	d102      	bne.n	80036a0 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 800369a:	4b20      	ldr	r3, [pc, #128]	@ (800371c <HAL_RCC_GetSysClockFreq+0x138>)
 800369c:	617b      	str	r3, [r7, #20]
 800369e:	e001      	b.n	80036a4 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 80036a0:	4b1f      	ldr	r3, [pc, #124]	@ (8003720 <HAL_RCC_GetSysClockFreq+0x13c>)
 80036a2:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80036a4:	f7ff f9d1 	bl	8002a4a <LL_RCC_GetSysClkSource>
 80036a8:	4603      	mov	r3, r0
 80036aa:	2b0c      	cmp	r3, #12
 80036ac:	d12f      	bne.n	800370e <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 80036ae:	f7ff faa3 	bl	8002bf8 <LL_RCC_PLL_GetMainSource>
 80036b2:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2b02      	cmp	r3, #2
 80036b8:	d003      	beq.n	80036c2 <HAL_RCC_GetSysClockFreq+0xde>
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2b03      	cmp	r3, #3
 80036be:	d003      	beq.n	80036c8 <HAL_RCC_GetSysClockFreq+0xe4>
 80036c0:	e00d      	b.n	80036de <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 80036c2:	4b16      	ldr	r3, [pc, #88]	@ (800371c <HAL_RCC_GetSysClockFreq+0x138>)
 80036c4:	60fb      	str	r3, [r7, #12]
        break;
 80036c6:	e00d      	b.n	80036e4 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80036c8:	f7ff f884 	bl	80027d4 <LL_RCC_HSE_IsEnabledDiv2>
 80036cc:	4603      	mov	r3, r0
 80036ce:	2b01      	cmp	r3, #1
 80036d0:	d102      	bne.n	80036d8 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 80036d2:	4b12      	ldr	r3, [pc, #72]	@ (800371c <HAL_RCC_GetSysClockFreq+0x138>)
 80036d4:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 80036d6:	e005      	b.n	80036e4 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 80036d8:	4b11      	ldr	r3, [pc, #68]	@ (8003720 <HAL_RCC_GetSysClockFreq+0x13c>)
 80036da:	60fb      	str	r3, [r7, #12]
        break;
 80036dc:	e002      	b.n	80036e4 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 80036de:	693b      	ldr	r3, [r7, #16]
 80036e0:	60fb      	str	r3, [r7, #12]
        break;
 80036e2:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80036e4:	f7ff fa66 	bl	8002bb4 <LL_RCC_PLL_GetN>
 80036e8:	4602      	mov	r2, r0
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	fb03 f402 	mul.w	r4, r3, r2
 80036f0:	f7ff fa77 	bl	8002be2 <LL_RCC_PLL_GetDivider>
 80036f4:	4603      	mov	r3, r0
 80036f6:	091b      	lsrs	r3, r3, #4
 80036f8:	3301      	adds	r3, #1
 80036fa:	fbb4 f4f3 	udiv	r4, r4, r3
 80036fe:	f7ff fa65 	bl	8002bcc <LL_RCC_PLL_GetR>
 8003702:	4603      	mov	r3, r0
 8003704:	0f5b      	lsrs	r3, r3, #29
 8003706:	3301      	adds	r3, #1
 8003708:	fbb4 f3f3 	udiv	r3, r4, r3
 800370c:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 800370e:	697b      	ldr	r3, [r7, #20]
}
 8003710:	4618      	mov	r0, r3
 8003712:	371c      	adds	r7, #28
 8003714:	46bd      	mov	sp, r7
 8003716:	bd90      	pop	{r4, r7, pc}
 8003718:	08007e38 	.word	0x08007e38
 800371c:	00f42400 	.word	0x00f42400
 8003720:	01e84800 	.word	0x01e84800

08003724 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003724:	b598      	push	{r3, r4, r7, lr}
 8003726:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8003728:	f7ff ff5c 	bl	80035e4 <HAL_RCC_GetSysClockFreq>
 800372c:	4604      	mov	r4, r0
 800372e:	f7ff f9e6 	bl	8002afe <LL_RCC_GetAHBPrescaler>
 8003732:	4603      	mov	r3, r0
 8003734:	091b      	lsrs	r3, r3, #4
 8003736:	f003 030f 	and.w	r3, r3, #15
 800373a:	4a03      	ldr	r2, [pc, #12]	@ (8003748 <HAL_RCC_GetHCLKFreq+0x24>)
 800373c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003740:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8003744:	4618      	mov	r0, r3
 8003746:	bd98      	pop	{r3, r4, r7, pc}
 8003748:	08007dd8 	.word	0x08007dd8

0800374c <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800374c:	b598      	push	{r3, r4, r7, lr}
 800374e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8003750:	f7ff ffe8 	bl	8003724 <HAL_RCC_GetHCLKFreq>
 8003754:	4604      	mov	r4, r0
 8003756:	f7ff f9ea 	bl	8002b2e <LL_RCC_GetAPB1Prescaler>
 800375a:	4603      	mov	r3, r0
 800375c:	0a1b      	lsrs	r3, r3, #8
 800375e:	4a03      	ldr	r2, [pc, #12]	@ (800376c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003760:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003764:	fa24 f303 	lsr.w	r3, r4, r3
}
 8003768:	4618      	mov	r0, r3
 800376a:	bd98      	pop	{r3, r4, r7, pc}
 800376c:	08007e18 	.word	0x08007e18

08003770 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003770:	b598      	push	{r3, r4, r7, lr}
 8003772:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8003774:	f7ff ffd6 	bl	8003724 <HAL_RCC_GetHCLKFreq>
 8003778:	4604      	mov	r4, r0
 800377a:	f7ff f9e3 	bl	8002b44 <LL_RCC_GetAPB2Prescaler>
 800377e:	4603      	mov	r3, r0
 8003780:	0adb      	lsrs	r3, r3, #11
 8003782:	4a03      	ldr	r2, [pc, #12]	@ (8003790 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003784:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003788:	fa24 f303 	lsr.w	r3, r4, r3
}
 800378c:	4618      	mov	r0, r3
 800378e:	bd98      	pop	{r3, r4, r7, pc}
 8003790:	08007e18 	.word	0x08007e18

08003794 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8003794:	b590      	push	{r4, r7, lr}
 8003796:	b085      	sub	sp, #20
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	091b      	lsrs	r3, r3, #4
 80037a0:	f003 030f 	and.w	r3, r3, #15
 80037a4:	4a10      	ldr	r2, [pc, #64]	@ (80037e8 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 80037a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037aa:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 80037ac:	f7ff f9b2 	bl	8002b14 <LL_RCC_GetAHB3Prescaler>
 80037b0:	4603      	mov	r3, r0
 80037b2:	091b      	lsrs	r3, r3, #4
 80037b4:	f003 030f 	and.w	r3, r3, #15
 80037b8:	4a0c      	ldr	r2, [pc, #48]	@ (80037ec <RCC_SetFlashLatencyFromMSIRange+0x58>)
 80037ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037be:	68fa      	ldr	r2, [r7, #12]
 80037c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80037c4:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 80037c6:	68bb      	ldr	r3, [r7, #8]
 80037c8:	4a09      	ldr	r2, [pc, #36]	@ (80037f0 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 80037ca:	fba2 2303 	umull	r2, r3, r2, r3
 80037ce:	0c9c      	lsrs	r4, r3, #18
 80037d0:	f7fe ffc6 	bl	8002760 <HAL_PWREx_GetVoltageRange>
 80037d4:	4603      	mov	r3, r0
 80037d6:	4619      	mov	r1, r3
 80037d8:	4620      	mov	r0, r4
 80037da:	f000 f80b 	bl	80037f4 <RCC_SetFlashLatency>
 80037de:	4603      	mov	r3, r0
}
 80037e0:	4618      	mov	r0, r3
 80037e2:	3714      	adds	r7, #20
 80037e4:	46bd      	mov	sp, r7
 80037e6:	bd90      	pop	{r4, r7, pc}
 80037e8:	08007e38 	.word	0x08007e38
 80037ec:	08007dd8 	.word	0x08007dd8
 80037f0:	431bde83 	.word	0x431bde83

080037f4 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b08e      	sub	sp, #56	@ 0x38
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
 80037fc:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 80037fe:	4a3a      	ldr	r2, [pc, #232]	@ (80038e8 <RCC_SetFlashLatency+0xf4>)
 8003800:	f107 0320 	add.w	r3, r7, #32
 8003804:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003808:	6018      	str	r0, [r3, #0]
 800380a:	3304      	adds	r3, #4
 800380c:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 800380e:	4a37      	ldr	r2, [pc, #220]	@ (80038ec <RCC_SetFlashLatency+0xf8>)
 8003810:	f107 0318 	add.w	r3, r7, #24
 8003814:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003818:	6018      	str	r0, [r3, #0]
 800381a:	3304      	adds	r3, #4
 800381c:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 800381e:	4a34      	ldr	r2, [pc, #208]	@ (80038f0 <RCC_SetFlashLatency+0xfc>)
 8003820:	f107 030c 	add.w	r3, r7, #12
 8003824:	ca07      	ldmia	r2, {r0, r1, r2}
 8003826:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800382a:	2300      	movs	r3, #0
 800382c:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003834:	d11b      	bne.n	800386e <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003836:	2300      	movs	r3, #0
 8003838:	633b      	str	r3, [r7, #48]	@ 0x30
 800383a:	e014      	b.n	8003866 <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 800383c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800383e:	005b      	lsls	r3, r3, #1
 8003840:	3338      	adds	r3, #56	@ 0x38
 8003842:	443b      	add	r3, r7
 8003844:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8003848:	461a      	mov	r2, r3
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	4293      	cmp	r3, r2
 800384e:	d807      	bhi.n	8003860 <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8003850:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003852:	009b      	lsls	r3, r3, #2
 8003854:	3338      	adds	r3, #56	@ 0x38
 8003856:	443b      	add	r3, r7
 8003858:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800385c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800385e:	e021      	b.n	80038a4 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003860:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003862:	3301      	adds	r3, #1
 8003864:	633b      	str	r3, [r7, #48]	@ 0x30
 8003866:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003868:	2b02      	cmp	r3, #2
 800386a:	d9e7      	bls.n	800383c <RCC_SetFlashLatency+0x48>
 800386c:	e01a      	b.n	80038a4 <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800386e:	2300      	movs	r3, #0
 8003870:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003872:	e014      	b.n	800389e <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8003874:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003876:	005b      	lsls	r3, r3, #1
 8003878:	3338      	adds	r3, #56	@ 0x38
 800387a:	443b      	add	r3, r7
 800387c:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8003880:	461a      	mov	r2, r3
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	4293      	cmp	r3, r2
 8003886:	d807      	bhi.n	8003898 <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8003888:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800388a:	009b      	lsls	r3, r3, #2
 800388c:	3338      	adds	r3, #56	@ 0x38
 800388e:	443b      	add	r3, r7
 8003890:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8003894:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003896:	e005      	b.n	80038a4 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003898:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800389a:	3301      	adds	r3, #1
 800389c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800389e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038a0:	2b02      	cmp	r3, #2
 80038a2:	d9e7      	bls.n	8003874 <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80038a4:	4b13      	ldr	r3, [pc, #76]	@ (80038f4 <RCC_SetFlashLatency+0x100>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f023 0207 	bic.w	r2, r3, #7
 80038ac:	4911      	ldr	r1, [pc, #68]	@ (80038f4 <RCC_SetFlashLatency+0x100>)
 80038ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80038b0:	4313      	orrs	r3, r2
 80038b2:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80038b4:	f7fe fbd8 	bl	8002068 <HAL_GetTick>
 80038b8:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80038ba:	e008      	b.n	80038ce <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80038bc:	f7fe fbd4 	bl	8002068 <HAL_GetTick>
 80038c0:	4602      	mov	r2, r0
 80038c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038c4:	1ad3      	subs	r3, r2, r3
 80038c6:	2b02      	cmp	r3, #2
 80038c8:	d901      	bls.n	80038ce <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 80038ca:	2303      	movs	r3, #3
 80038cc:	e007      	b.n	80038de <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80038ce:	4b09      	ldr	r3, [pc, #36]	@ (80038f4 <RCC_SetFlashLatency+0x100>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f003 0307 	and.w	r3, r3, #7
 80038d6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80038d8:	429a      	cmp	r2, r3
 80038da:	d1ef      	bne.n	80038bc <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 80038dc:	2300      	movs	r3, #0
}
 80038de:	4618      	mov	r0, r3
 80038e0:	3738      	adds	r7, #56	@ 0x38
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bd80      	pop	{r7, pc}
 80038e6:	bf00      	nop
 80038e8:	08007dbc 	.word	0x08007dbc
 80038ec:	08007dc4 	.word	0x08007dc4
 80038f0:	08007dcc 	.word	0x08007dcc
 80038f4:	58004000 	.word	0x58004000

080038f8 <LL_RCC_LSE_IsReady>:
{
 80038f8:	b480      	push	{r7}
 80038fa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80038fc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003900:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003904:	f003 0302 	and.w	r3, r3, #2
 8003908:	2b02      	cmp	r3, #2
 800390a:	d101      	bne.n	8003910 <LL_RCC_LSE_IsReady+0x18>
 800390c:	2301      	movs	r3, #1
 800390e:	e000      	b.n	8003912 <LL_RCC_LSE_IsReady+0x1a>
 8003910:	2300      	movs	r3, #0
}
 8003912:	4618      	mov	r0, r3
 8003914:	46bd      	mov	sp, r7
 8003916:	bc80      	pop	{r7}
 8003918:	4770      	bx	lr

0800391a <LL_RCC_SetUSARTClockSource>:
{
 800391a:	b480      	push	{r7}
 800391c:	b083      	sub	sp, #12
 800391e:	af00      	add	r7, sp, #0
 8003920:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 8003922:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003926:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	0c1b      	lsrs	r3, r3, #16
 800392e:	43db      	mvns	r3, r3
 8003930:	401a      	ands	r2, r3
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	b29b      	uxth	r3, r3
 8003936:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800393a:	4313      	orrs	r3, r2
 800393c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003940:	bf00      	nop
 8003942:	370c      	adds	r7, #12
 8003944:	46bd      	mov	sp, r7
 8003946:	bc80      	pop	{r7}
 8003948:	4770      	bx	lr

0800394a <LL_RCC_SetI2SClockSource>:
{
 800394a:	b480      	push	{r7}
 800394c:	b083      	sub	sp, #12
 800394e:	af00      	add	r7, sp, #0
 8003950:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 8003952:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003956:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800395a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800395e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	4313      	orrs	r3, r2
 8003966:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800396a:	bf00      	nop
 800396c:	370c      	adds	r7, #12
 800396e:	46bd      	mov	sp, r7
 8003970:	bc80      	pop	{r7}
 8003972:	4770      	bx	lr

08003974 <LL_RCC_SetLPUARTClockSource>:
{
 8003974:	b480      	push	{r7}
 8003976:	b083      	sub	sp, #12
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 800397c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003980:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003984:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003988:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	4313      	orrs	r3, r2
 8003990:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003994:	bf00      	nop
 8003996:	370c      	adds	r7, #12
 8003998:	46bd      	mov	sp, r7
 800399a:	bc80      	pop	{r7}
 800399c:	4770      	bx	lr

0800399e <LL_RCC_SetI2CClockSource>:
{
 800399e:	b480      	push	{r7}
 80039a0:	b083      	sub	sp, #12
 80039a2:	af00      	add	r7, sp, #0
 80039a4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 80039a6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80039aa:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	091b      	lsrs	r3, r3, #4
 80039b2:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 80039b6:	43db      	mvns	r3, r3
 80039b8:	401a      	ands	r2, r3
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	011b      	lsls	r3, r3, #4
 80039be:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 80039c2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80039c6:	4313      	orrs	r3, r2
 80039c8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80039cc:	bf00      	nop
 80039ce:	370c      	adds	r7, #12
 80039d0:	46bd      	mov	sp, r7
 80039d2:	bc80      	pop	{r7}
 80039d4:	4770      	bx	lr

080039d6 <LL_RCC_SetLPTIMClockSource>:
{
 80039d6:	b480      	push	{r7}
 80039d8:	b083      	sub	sp, #12
 80039da:	af00      	add	r7, sp, #0
 80039dc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 80039de:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80039e2:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	0c1b      	lsrs	r3, r3, #16
 80039ea:	041b      	lsls	r3, r3, #16
 80039ec:	43db      	mvns	r3, r3
 80039ee:	401a      	ands	r2, r3
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	041b      	lsls	r3, r3, #16
 80039f4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80039f8:	4313      	orrs	r3, r2
 80039fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80039fe:	bf00      	nop
 8003a00:	370c      	adds	r7, #12
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bc80      	pop	{r7}
 8003a06:	4770      	bx	lr

08003a08 <LL_RCC_SetRNGClockSource>:
{
 8003a08:	b480      	push	{r7}
 8003a0a:	b083      	sub	sp, #12
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8003a10:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003a14:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a18:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8003a1c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	4313      	orrs	r3, r2
 8003a24:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003a28:	bf00      	nop
 8003a2a:	370c      	adds	r7, #12
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	bc80      	pop	{r7}
 8003a30:	4770      	bx	lr

08003a32 <LL_RCC_SetADCClockSource>:
{
 8003a32:	b480      	push	{r7}
 8003a34:	b083      	sub	sp, #12
 8003a36:	af00      	add	r7, sp, #0
 8003a38:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8003a3a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003a3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a42:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003a46:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	4313      	orrs	r3, r2
 8003a4e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003a52:	bf00      	nop
 8003a54:	370c      	adds	r7, #12
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bc80      	pop	{r7}
 8003a5a:	4770      	bx	lr

08003a5c <LL_RCC_SetRTCClockSource>:
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	b083      	sub	sp, #12
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8003a64:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003a68:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a6c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003a70:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	4313      	orrs	r3, r2
 8003a78:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8003a7c:	bf00      	nop
 8003a7e:	370c      	adds	r7, #12
 8003a80:	46bd      	mov	sp, r7
 8003a82:	bc80      	pop	{r7}
 8003a84:	4770      	bx	lr

08003a86 <LL_RCC_GetRTCClockSource>:
{
 8003a86:	b480      	push	{r7}
 8003a88:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8003a8a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003a8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a92:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 8003a96:	4618      	mov	r0, r3
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	bc80      	pop	{r7}
 8003a9c:	4770      	bx	lr

08003a9e <LL_RCC_ForceBackupDomainReset>:
{
 8003a9e:	b480      	push	{r7}
 8003aa0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003aa2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003aa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003aaa:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003aae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ab2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8003ab6:	bf00      	nop
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	bc80      	pop	{r7}
 8003abc:	4770      	bx	lr

08003abe <LL_RCC_ReleaseBackupDomainReset>:
{
 8003abe:	b480      	push	{r7}
 8003ac0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003ac2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003ac6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003aca:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003ace:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003ad2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8003ad6:	bf00      	nop
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	bc80      	pop	{r7}
 8003adc:	4770      	bx	lr
	...

08003ae0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b086      	sub	sp, #24
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 8003ae8:	2300      	movs	r3, #0
 8003aea:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 8003aec:	2300      	movs	r3, #0
 8003aee:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8003af0:	2300      	movs	r3, #0
 8003af2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d058      	beq.n	8003bb2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 8003b00:	f7fe fe20 	bl	8002744 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003b04:	f7fe fab0 	bl	8002068 <HAL_GetTick>
 8003b08:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8003b0a:	e009      	b.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b0c:	f7fe faac 	bl	8002068 <HAL_GetTick>
 8003b10:	4602      	mov	r2, r0
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	1ad3      	subs	r3, r2, r3
 8003b16:	2b02      	cmp	r3, #2
 8003b18:	d902      	bls.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 8003b1a:	2303      	movs	r3, #3
 8003b1c:	74fb      	strb	r3, [r7, #19]
        break;
 8003b1e:	e006      	b.n	8003b2e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8003b20:	4b7b      	ldr	r3, [pc, #492]	@ (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b28:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003b2c:	d1ee      	bne.n	8003b0c <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 8003b2e:	7cfb      	ldrb	r3, [r7, #19]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d13c      	bne.n	8003bae <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8003b34:	f7ff ffa7 	bl	8003a86 <LL_RCC_GetRTCClockSource>
 8003b38:	4602      	mov	r2, r0
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b3e:	429a      	cmp	r2, r3
 8003b40:	d00f      	beq.n	8003b62 <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003b42:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003b46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b4a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b4e:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003b50:	f7ff ffa5 	bl	8003a9e <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003b54:	f7ff ffb3 	bl	8003abe <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003b58:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003b5c:	697b      	ldr	r3, [r7, #20]
 8003b5e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 8003b62:	697b      	ldr	r3, [r7, #20]
 8003b64:	f003 0302 	and.w	r3, r3, #2
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d014      	beq.n	8003b96 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b6c:	f7fe fa7c 	bl	8002068 <HAL_GetTick>
 8003b70:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 8003b72:	e00b      	b.n	8003b8c <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b74:	f7fe fa78 	bl	8002068 <HAL_GetTick>
 8003b78:	4602      	mov	r2, r0
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	1ad3      	subs	r3, r2, r3
 8003b7e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d902      	bls.n	8003b8c <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 8003b86:	2303      	movs	r3, #3
 8003b88:	74fb      	strb	r3, [r7, #19]
            break;
 8003b8a:	e004      	b.n	8003b96 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 8003b8c:	f7ff feb4 	bl	80038f8 <LL_RCC_LSE_IsReady>
 8003b90:	4603      	mov	r3, r0
 8003b92:	2b01      	cmp	r3, #1
 8003b94:	d1ee      	bne.n	8003b74 <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 8003b96:	7cfb      	ldrb	r3, [r7, #19]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d105      	bne.n	8003ba8 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	f7ff ff5b 	bl	8003a5c <LL_RCC_SetRTCClockSource>
 8003ba6:	e004      	b.n	8003bb2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003ba8:	7cfb      	ldrb	r3, [r7, #19]
 8003baa:	74bb      	strb	r3, [r7, #18]
 8003bac:	e001      	b.n	8003bb2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bae:	7cfb      	ldrb	r3, [r7, #19]
 8003bb0:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f003 0301 	and.w	r3, r3, #1
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d004      	beq.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	685b      	ldr	r3, [r3, #4]
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	f7ff fea9 	bl	800391a <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f003 0302 	and.w	r3, r3, #2
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d004      	beq.n	8003bde <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	689b      	ldr	r3, [r3, #8]
 8003bd8:	4618      	mov	r0, r3
 8003bda:	f7ff fe9e 	bl	800391a <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f003 0320 	and.w	r3, r3, #32
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d004      	beq.n	8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	691b      	ldr	r3, [r3, #16]
 8003bee:	4618      	mov	r0, r3
 8003bf0:	f7ff fec0 	bl	8003974 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d004      	beq.n	8003c0a <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6a1b      	ldr	r3, [r3, #32]
 8003c04:	4618      	mov	r0, r3
 8003c06:	f7ff fee6 	bl	80039d6 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d004      	beq.n	8003c20 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	f7ff fedb 	bl	80039d6 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d004      	beq.n	8003c36 <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c30:	4618      	mov	r0, r3
 8003c32:	f7ff fed0 	bl	80039d6 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d004      	beq.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	695b      	ldr	r3, [r3, #20]
 8003c46:	4618      	mov	r0, r3
 8003c48:	f7ff fea9 	bl	800399e <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d004      	beq.n	8003c62 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	699b      	ldr	r3, [r3, #24]
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	f7ff fe9e 	bl	800399e <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d004      	beq.n	8003c78 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	69db      	ldr	r3, [r3, #28]
 8003c72:	4618      	mov	r0, r3
 8003c74:	f7ff fe93 	bl	800399e <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f003 0310 	and.w	r3, r3, #16
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d011      	beq.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	68db      	ldr	r3, [r3, #12]
 8003c88:	4618      	mov	r0, r3
 8003c8a:	f7ff fe5e 	bl	800394a <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	68db      	ldr	r3, [r3, #12]
 8003c92:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003c96:	d107      	bne.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8003c98:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003c9c:	68db      	ldr	r3, [r3, #12]
 8003c9e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003ca2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003ca6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d010      	beq.n	8003cd6 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cb8:	4618      	mov	r0, r3
 8003cba:	f7ff fea5 	bl	8003a08 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d107      	bne.n	8003cd6 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8003cc6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003cca:	68db      	ldr	r3, [r3, #12]
 8003ccc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003cd0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003cd4:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d011      	beq.n	8003d06 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	f7ff fea3 	bl	8003a32 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cf0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003cf4:	d107      	bne.n	8003d06 <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003cf6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003cfa:	68db      	ldr	r3, [r3, #12]
 8003cfc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003d00:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d04:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8003d06:	7cbb      	ldrb	r3, [r7, #18]
}
 8003d08:	4618      	mov	r0, r3
 8003d0a:	3718      	adds	r7, #24
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	bd80      	pop	{r7, pc}
 8003d10:	58000400 	.word	0x58000400

08003d14 <LL_RCC_GetUSARTClockSource>:
{
 8003d14:	b480      	push	{r7}
 8003d16:	b083      	sub	sp, #12
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 8003d1c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003d20:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	401a      	ands	r2, r3
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	041b      	lsls	r3, r3, #16
 8003d2c:	4313      	orrs	r3, r2
}
 8003d2e:	4618      	mov	r0, r3
 8003d30:	370c      	adds	r7, #12
 8003d32:	46bd      	mov	sp, r7
 8003d34:	bc80      	pop	{r7}
 8003d36:	4770      	bx	lr

08003d38 <LL_RCC_GetLPUARTClockSource>:
{
 8003d38:	b480      	push	{r7}
 8003d3a:	b083      	sub	sp, #12
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8003d40:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003d44:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	4013      	ands	r3, r2
}
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	370c      	adds	r7, #12
 8003d50:	46bd      	mov	sp, r7
 8003d52:	bc80      	pop	{r7}
 8003d54:	4770      	bx	lr

08003d56 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003d56:	b580      	push	{r7, lr}
 8003d58:	b082      	sub	sp, #8
 8003d5a:	af00      	add	r7, sp, #0
 8003d5c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d101      	bne.n	8003d68 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003d64:	2301      	movs	r3, #1
 8003d66:	e042      	b.n	8003dee <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d106      	bne.n	8003d80 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	2200      	movs	r2, #0
 8003d76:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003d7a:	6878      	ldr	r0, [r7, #4]
 8003d7c:	f7fd ff6c 	bl	8001c58 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2224      	movs	r2, #36	@ 0x24
 8003d84:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	681a      	ldr	r2, [r3, #0]
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f022 0201 	bic.w	r2, r2, #1
 8003d96:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d002      	beq.n	8003da6 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8003da0:	6878      	ldr	r0, [r7, #4]
 8003da2:	f000 ff29 	bl	8004bf8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003da6:	6878      	ldr	r0, [r7, #4]
 8003da8:	f000 fcb2 	bl	8004710 <UART_SetConfig>
 8003dac:	4603      	mov	r3, r0
 8003dae:	2b01      	cmp	r3, #1
 8003db0:	d101      	bne.n	8003db6 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8003db2:	2301      	movs	r3, #1
 8003db4:	e01b      	b.n	8003dee <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	685a      	ldr	r2, [r3, #4]
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003dc4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	689a      	ldr	r2, [r3, #8]
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003dd4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	681a      	ldr	r2, [r3, #0]
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f042 0201 	orr.w	r2, r2, #1
 8003de4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003de6:	6878      	ldr	r0, [r7, #4]
 8003de8:	f000 ffa7 	bl	8004d3a <UART_CheckIdleState>
 8003dec:	4603      	mov	r3, r0
}
 8003dee:	4618      	mov	r0, r3
 8003df0:	3708      	adds	r7, #8
 8003df2:	46bd      	mov	sp, r7
 8003df4:	bd80      	pop	{r7, pc}

08003df6 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003df6:	b580      	push	{r7, lr}
 8003df8:	b08a      	sub	sp, #40	@ 0x28
 8003dfa:	af02      	add	r7, sp, #8
 8003dfc:	60f8      	str	r0, [r7, #12]
 8003dfe:	60b9      	str	r1, [r7, #8]
 8003e00:	603b      	str	r3, [r7, #0]
 8003e02:	4613      	mov	r3, r2
 8003e04:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e0c:	2b20      	cmp	r3, #32
 8003e0e:	d173      	bne.n	8003ef8 <HAL_UART_Transmit+0x102>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e10:	68bb      	ldr	r3, [r7, #8]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d002      	beq.n	8003e1c <HAL_UART_Transmit+0x26>
 8003e16:	88fb      	ldrh	r3, [r7, #6]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d101      	bne.n	8003e20 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003e1c:	2301      	movs	r3, #1
 8003e1e:	e06c      	b.n	8003efa <HAL_UART_Transmit+0x104>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	2200      	movs	r2, #0
 8003e24:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	2221      	movs	r2, #33	@ 0x21
 8003e2c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003e30:	f7fe f91a 	bl	8002068 <HAL_GetTick>
 8003e34:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	88fa      	ldrh	r2, [r7, #6]
 8003e3a:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	88fa      	ldrh	r2, [r7, #6]
 8003e42:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	689b      	ldr	r3, [r3, #8]
 8003e4a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e4e:	d108      	bne.n	8003e62 <HAL_UART_Transmit+0x6c>
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	691b      	ldr	r3, [r3, #16]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d104      	bne.n	8003e62 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003e58:	2300      	movs	r3, #0
 8003e5a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003e5c:	68bb      	ldr	r3, [r7, #8]
 8003e5e:	61bb      	str	r3, [r7, #24]
 8003e60:	e003      	b.n	8003e6a <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003e62:	68bb      	ldr	r3, [r7, #8]
 8003e64:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003e66:	2300      	movs	r3, #0
 8003e68:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003e6a:	e02c      	b.n	8003ec6 <HAL_UART_Transmit+0xd0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	9300      	str	r3, [sp, #0]
 8003e70:	697b      	ldr	r3, [r7, #20]
 8003e72:	2200      	movs	r2, #0
 8003e74:	2180      	movs	r1, #128	@ 0x80
 8003e76:	68f8      	ldr	r0, [r7, #12]
 8003e78:	f000 ffad 	bl	8004dd6 <UART_WaitOnFlagUntilTimeout>
 8003e7c:	4603      	mov	r3, r0
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d001      	beq.n	8003e86 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8003e82:	2303      	movs	r3, #3
 8003e84:	e039      	b.n	8003efa <HAL_UART_Transmit+0x104>
      }
      if (pdata8bits == NULL)
 8003e86:	69fb      	ldr	r3, [r7, #28]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d10b      	bne.n	8003ea4 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003e8c:	69bb      	ldr	r3, [r7, #24]
 8003e8e:	881b      	ldrh	r3, [r3, #0]
 8003e90:	461a      	mov	r2, r3
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003e9a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003e9c:	69bb      	ldr	r3, [r7, #24]
 8003e9e:	3302      	adds	r3, #2
 8003ea0:	61bb      	str	r3, [r7, #24]
 8003ea2:	e007      	b.n	8003eb4 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003ea4:	69fb      	ldr	r3, [r7, #28]
 8003ea6:	781a      	ldrb	r2, [r3, #0]
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003eae:	69fb      	ldr	r3, [r7, #28]
 8003eb0:	3301      	adds	r3, #1
 8003eb2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8003eba:	b29b      	uxth	r3, r3
 8003ebc:	3b01      	subs	r3, #1
 8003ebe:	b29a      	uxth	r2, r3
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8003ecc:	b29b      	uxth	r3, r3
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d1cc      	bne.n	8003e6c <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	9300      	str	r3, [sp, #0]
 8003ed6:	697b      	ldr	r3, [r7, #20]
 8003ed8:	2200      	movs	r2, #0
 8003eda:	2140      	movs	r1, #64	@ 0x40
 8003edc:	68f8      	ldr	r0, [r7, #12]
 8003ede:	f000 ff7a 	bl	8004dd6 <UART_WaitOnFlagUntilTimeout>
 8003ee2:	4603      	mov	r3, r0
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d001      	beq.n	8003eec <HAL_UART_Transmit+0xf6>
    {
      return HAL_TIMEOUT;
 8003ee8:	2303      	movs	r3, #3
 8003eea:	e006      	b.n	8003efa <HAL_UART_Transmit+0x104>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	2220      	movs	r2, #32
 8003ef0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	e000      	b.n	8003efa <HAL_UART_Transmit+0x104>
  }
  else
  {
    return HAL_BUSY;
 8003ef8:	2302      	movs	r3, #2
  }
}
 8003efa:	4618      	mov	r0, r3
 8003efc:	3720      	adds	r7, #32
 8003efe:	46bd      	mov	sp, r7
 8003f00:	bd80      	pop	{r7, pc}

08003f02 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f02:	b580      	push	{r7, lr}
 8003f04:	b08a      	sub	sp, #40	@ 0x28
 8003f06:	af02      	add	r7, sp, #8
 8003f08:	60f8      	str	r0, [r7, #12]
 8003f0a:	60b9      	str	r1, [r7, #8]
 8003f0c:	603b      	str	r3, [r7, #0]
 8003f0e:	4613      	mov	r3, r2
 8003f10:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003f18:	2b20      	cmp	r3, #32
 8003f1a:	f040 80b1 	bne.w	8004080 <HAL_UART_Receive+0x17e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f1e:	68bb      	ldr	r3, [r7, #8]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d002      	beq.n	8003f2a <HAL_UART_Receive+0x28>
 8003f24:	88fb      	ldrh	r3, [r7, #6]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d101      	bne.n	8003f2e <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	e0a9      	b.n	8004082 <HAL_UART_Receive+0x180>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	2200      	movs	r2, #0
 8003f32:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	2222      	movs	r2, #34	@ 0x22
 8003f3a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	2200      	movs	r2, #0
 8003f42:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003f44:	f7fe f890 	bl	8002068 <HAL_GetTick>
 8003f48:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	88fa      	ldrh	r2, [r7, #6]
 8003f4e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	88fa      	ldrh	r2, [r7, #6]
 8003f56:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	689b      	ldr	r3, [r3, #8]
 8003f5e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f62:	d10e      	bne.n	8003f82 <HAL_UART_Receive+0x80>
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	691b      	ldr	r3, [r3, #16]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d105      	bne.n	8003f78 <HAL_UART_Receive+0x76>
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8003f72:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8003f76:	e02d      	b.n	8003fd4 <HAL_UART_Receive+0xd2>
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	22ff      	movs	r2, #255	@ 0xff
 8003f7c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8003f80:	e028      	b.n	8003fd4 <HAL_UART_Receive+0xd2>
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	689b      	ldr	r3, [r3, #8]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d10d      	bne.n	8003fa6 <HAL_UART_Receive+0xa4>
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	691b      	ldr	r3, [r3, #16]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d104      	bne.n	8003f9c <HAL_UART_Receive+0x9a>
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	22ff      	movs	r2, #255	@ 0xff
 8003f96:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8003f9a:	e01b      	b.n	8003fd4 <HAL_UART_Receive+0xd2>
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	227f      	movs	r2, #127	@ 0x7f
 8003fa0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8003fa4:	e016      	b.n	8003fd4 <HAL_UART_Receive+0xd2>
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	689b      	ldr	r3, [r3, #8]
 8003faa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003fae:	d10d      	bne.n	8003fcc <HAL_UART_Receive+0xca>
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	691b      	ldr	r3, [r3, #16]
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d104      	bne.n	8003fc2 <HAL_UART_Receive+0xc0>
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	227f      	movs	r2, #127	@ 0x7f
 8003fbc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8003fc0:	e008      	b.n	8003fd4 <HAL_UART_Receive+0xd2>
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	223f      	movs	r2, #63	@ 0x3f
 8003fc6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8003fca:	e003      	b.n	8003fd4 <HAL_UART_Receive+0xd2>
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	2200      	movs	r2, #0
 8003fd0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8003fda:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	689b      	ldr	r3, [r3, #8]
 8003fe0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003fe4:	d108      	bne.n	8003ff8 <HAL_UART_Receive+0xf6>
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	691b      	ldr	r3, [r3, #16]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d104      	bne.n	8003ff8 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8003fee:	2300      	movs	r3, #0
 8003ff0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003ff2:	68bb      	ldr	r3, [r7, #8]
 8003ff4:	61bb      	str	r3, [r7, #24]
 8003ff6:	e003      	b.n	8004000 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8003ff8:	68bb      	ldr	r3, [r7, #8]
 8003ffa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8004000:	e032      	b.n	8004068 <HAL_UART_Receive+0x166>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	9300      	str	r3, [sp, #0]
 8004006:	697b      	ldr	r3, [r7, #20]
 8004008:	2200      	movs	r2, #0
 800400a:	2120      	movs	r1, #32
 800400c:	68f8      	ldr	r0, [r7, #12]
 800400e:	f000 fee2 	bl	8004dd6 <UART_WaitOnFlagUntilTimeout>
 8004012:	4603      	mov	r3, r0
 8004014:	2b00      	cmp	r3, #0
 8004016:	d001      	beq.n	800401c <HAL_UART_Receive+0x11a>
      {
        return HAL_TIMEOUT;
 8004018:	2303      	movs	r3, #3
 800401a:	e032      	b.n	8004082 <HAL_UART_Receive+0x180>
      }
      if (pdata8bits == NULL)
 800401c:	69fb      	ldr	r3, [r7, #28]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d10c      	bne.n	800403c <HAL_UART_Receive+0x13a>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004028:	b29a      	uxth	r2, r3
 800402a:	8a7b      	ldrh	r3, [r7, #18]
 800402c:	4013      	ands	r3, r2
 800402e:	b29a      	uxth	r2, r3
 8004030:	69bb      	ldr	r3, [r7, #24]
 8004032:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004034:	69bb      	ldr	r3, [r7, #24]
 8004036:	3302      	adds	r3, #2
 8004038:	61bb      	str	r3, [r7, #24]
 800403a:	e00c      	b.n	8004056 <HAL_UART_Receive+0x154>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004042:	b2da      	uxtb	r2, r3
 8004044:	8a7b      	ldrh	r3, [r7, #18]
 8004046:	b2db      	uxtb	r3, r3
 8004048:	4013      	ands	r3, r2
 800404a:	b2da      	uxtb	r2, r3
 800404c:	69fb      	ldr	r3, [r7, #28]
 800404e:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8004050:	69fb      	ldr	r3, [r7, #28]
 8004052:	3301      	adds	r3, #1
 8004054:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800405c:	b29b      	uxth	r3, r3
 800405e:	3b01      	subs	r3, #1
 8004060:	b29a      	uxth	r2, r3
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800406e:	b29b      	uxth	r3, r3
 8004070:	2b00      	cmp	r3, #0
 8004072:	d1c6      	bne.n	8004002 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	2220      	movs	r2, #32
 8004078:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 800407c:	2300      	movs	r3, #0
 800407e:	e000      	b.n	8004082 <HAL_UART_Receive+0x180>
  }
  else
  {
    return HAL_BUSY;
 8004080:	2302      	movs	r3, #2
  }
}
 8004082:	4618      	mov	r0, r3
 8004084:	3720      	adds	r7, #32
 8004086:	46bd      	mov	sp, r7
 8004088:	bd80      	pop	{r7, pc}
	...

0800408c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b0ba      	sub	sp, #232	@ 0xe8
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	69db      	ldr	r3, [r3, #28]
 800409a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	689b      	ldr	r3, [r3, #8]
 80040ae:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80040b2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80040b6:	f640 030f 	movw	r3, #2063	@ 0x80f
 80040ba:	4013      	ands	r3, r2
 80040bc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80040c0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d11b      	bne.n	8004100 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80040c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80040cc:	f003 0320 	and.w	r3, r3, #32
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d015      	beq.n	8004100 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80040d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80040d8:	f003 0320 	and.w	r3, r3, #32
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d105      	bne.n	80040ec <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80040e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80040e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d009      	beq.n	8004100 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	f000 82e3 	beq.w	80046bc <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80040fa:	6878      	ldr	r0, [r7, #4]
 80040fc:	4798      	blx	r3
      }
      return;
 80040fe:	e2dd      	b.n	80046bc <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004100:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004104:	2b00      	cmp	r3, #0
 8004106:	f000 8123 	beq.w	8004350 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800410a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800410e:	4b8d      	ldr	r3, [pc, #564]	@ (8004344 <HAL_UART_IRQHandler+0x2b8>)
 8004110:	4013      	ands	r3, r2
 8004112:	2b00      	cmp	r3, #0
 8004114:	d106      	bne.n	8004124 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8004116:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800411a:	4b8b      	ldr	r3, [pc, #556]	@ (8004348 <HAL_UART_IRQHandler+0x2bc>)
 800411c:	4013      	ands	r3, r2
 800411e:	2b00      	cmp	r3, #0
 8004120:	f000 8116 	beq.w	8004350 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004124:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004128:	f003 0301 	and.w	r3, r3, #1
 800412c:	2b00      	cmp	r3, #0
 800412e:	d011      	beq.n	8004154 <HAL_UART_IRQHandler+0xc8>
 8004130:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004134:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004138:	2b00      	cmp	r3, #0
 800413a:	d00b      	beq.n	8004154 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	2201      	movs	r2, #1
 8004142:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800414a:	f043 0201 	orr.w	r2, r3, #1
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004154:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004158:	f003 0302 	and.w	r3, r3, #2
 800415c:	2b00      	cmp	r3, #0
 800415e:	d011      	beq.n	8004184 <HAL_UART_IRQHandler+0xf8>
 8004160:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004164:	f003 0301 	and.w	r3, r3, #1
 8004168:	2b00      	cmp	r3, #0
 800416a:	d00b      	beq.n	8004184 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	2202      	movs	r2, #2
 8004172:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800417a:	f043 0204 	orr.w	r2, r3, #4
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004184:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004188:	f003 0304 	and.w	r3, r3, #4
 800418c:	2b00      	cmp	r3, #0
 800418e:	d011      	beq.n	80041b4 <HAL_UART_IRQHandler+0x128>
 8004190:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004194:	f003 0301 	and.w	r3, r3, #1
 8004198:	2b00      	cmp	r3, #0
 800419a:	d00b      	beq.n	80041b4 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	2204      	movs	r2, #4
 80041a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041aa:	f043 0202 	orr.w	r2, r3, #2
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80041b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80041b8:	f003 0308 	and.w	r3, r3, #8
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d017      	beq.n	80041f0 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80041c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80041c4:	f003 0320 	and.w	r3, r3, #32
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d105      	bne.n	80041d8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80041cc:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80041d0:	4b5c      	ldr	r3, [pc, #368]	@ (8004344 <HAL_UART_IRQHandler+0x2b8>)
 80041d2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d00b      	beq.n	80041f0 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	2208      	movs	r2, #8
 80041de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041e6:	f043 0208 	orr.w	r2, r3, #8
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80041f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80041f4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d012      	beq.n	8004222 <HAL_UART_IRQHandler+0x196>
 80041fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004200:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004204:	2b00      	cmp	r3, #0
 8004206:	d00c      	beq.n	8004222 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004210:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004218:	f043 0220 	orr.w	r2, r3, #32
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004228:	2b00      	cmp	r3, #0
 800422a:	f000 8249 	beq.w	80046c0 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800422e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004232:	f003 0320 	and.w	r3, r3, #32
 8004236:	2b00      	cmp	r3, #0
 8004238:	d013      	beq.n	8004262 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800423a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800423e:	f003 0320 	and.w	r3, r3, #32
 8004242:	2b00      	cmp	r3, #0
 8004244:	d105      	bne.n	8004252 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004246:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800424a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800424e:	2b00      	cmp	r3, #0
 8004250:	d007      	beq.n	8004262 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004256:	2b00      	cmp	r3, #0
 8004258:	d003      	beq.n	8004262 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800425e:	6878      	ldr	r0, [r7, #4]
 8004260:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004268:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	689b      	ldr	r3, [r3, #8]
 8004272:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004276:	2b40      	cmp	r3, #64	@ 0x40
 8004278:	d005      	beq.n	8004286 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800427a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800427e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004282:	2b00      	cmp	r3, #0
 8004284:	d054      	beq.n	8004330 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004286:	6878      	ldr	r0, [r7, #4]
 8004288:	f000 fe73 	bl	8004f72 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	689b      	ldr	r3, [r3, #8]
 8004292:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004296:	2b40      	cmp	r3, #64	@ 0x40
 8004298:	d146      	bne.n	8004328 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	3308      	adds	r3, #8
 80042a0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042a4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80042a8:	e853 3f00 	ldrex	r3, [r3]
 80042ac:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80042b0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80042b4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80042b8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	3308      	adds	r3, #8
 80042c2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80042c6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80042ca:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042ce:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80042d2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80042d6:	e841 2300 	strex	r3, r2, [r1]
 80042da:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80042de:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d1d9      	bne.n	800429a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d017      	beq.n	8004320 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80042f6:	4a15      	ldr	r2, [pc, #84]	@ (800434c <HAL_UART_IRQHandler+0x2c0>)
 80042f8:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004300:	4618      	mov	r0, r3
 8004302:	f7fe f848 	bl	8002396 <HAL_DMA_Abort_IT>
 8004306:	4603      	mov	r3, r0
 8004308:	2b00      	cmp	r3, #0
 800430a:	d019      	beq.n	8004340 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004312:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004314:	687a      	ldr	r2, [r7, #4]
 8004316:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800431a:	4610      	mov	r0, r2
 800431c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800431e:	e00f      	b.n	8004340 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004320:	6878      	ldr	r0, [r7, #4]
 8004322:	f000 f9e0 	bl	80046e6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004326:	e00b      	b.n	8004340 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004328:	6878      	ldr	r0, [r7, #4]
 800432a:	f000 f9dc 	bl	80046e6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800432e:	e007      	b.n	8004340 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004330:	6878      	ldr	r0, [r7, #4]
 8004332:	f000 f9d8 	bl	80046e6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2200      	movs	r2, #0
 800433a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800433e:	e1bf      	b.n	80046c0 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004340:	bf00      	nop
    return;
 8004342:	e1bd      	b.n	80046c0 <HAL_UART_IRQHandler+0x634>
 8004344:	10000001 	.word	0x10000001
 8004348:	04000120 	.word	0x04000120
 800434c:	0800503d 	.word	0x0800503d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004354:	2b01      	cmp	r3, #1
 8004356:	f040 8153 	bne.w	8004600 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800435a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800435e:	f003 0310 	and.w	r3, r3, #16
 8004362:	2b00      	cmp	r3, #0
 8004364:	f000 814c 	beq.w	8004600 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004368:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800436c:	f003 0310 	and.w	r3, r3, #16
 8004370:	2b00      	cmp	r3, #0
 8004372:	f000 8145 	beq.w	8004600 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	2210      	movs	r2, #16
 800437c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	689b      	ldr	r3, [r3, #8]
 8004384:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004388:	2b40      	cmp	r3, #64	@ 0x40
 800438a:	f040 80bb 	bne.w	8004504 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	685b      	ldr	r3, [r3, #4]
 8004398:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800439c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	f000 818f 	beq.w	80046c4 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80043ac:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80043b0:	429a      	cmp	r2, r3
 80043b2:	f080 8187 	bcs.w	80046c4 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80043bc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f003 0320 	and.w	r3, r3, #32
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	f040 8087 	bne.w	80044e2 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043dc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80043e0:	e853 3f00 	ldrex	r3, [r3]
 80043e4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80043e8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80043ec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80043f0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	461a      	mov	r2, r3
 80043fa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80043fe:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004402:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004406:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800440a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800440e:	e841 2300 	strex	r3, r2, [r1]
 8004412:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004416:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800441a:	2b00      	cmp	r3, #0
 800441c:	d1da      	bne.n	80043d4 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	3308      	adds	r3, #8
 8004424:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004426:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004428:	e853 3f00 	ldrex	r3, [r3]
 800442c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800442e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004430:	f023 0301 	bic.w	r3, r3, #1
 8004434:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	3308      	adds	r3, #8
 800443e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004442:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004446:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004448:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800444a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800444e:	e841 2300 	strex	r3, r2, [r1]
 8004452:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004454:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004456:	2b00      	cmp	r3, #0
 8004458:	d1e1      	bne.n	800441e <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	3308      	adds	r3, #8
 8004460:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004462:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004464:	e853 3f00 	ldrex	r3, [r3]
 8004468:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800446a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800446c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004470:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	3308      	adds	r3, #8
 800447a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800447e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004480:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004482:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004484:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004486:	e841 2300 	strex	r3, r2, [r1]
 800448a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800448c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800448e:	2b00      	cmp	r3, #0
 8004490:	d1e3      	bne.n	800445a <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2220      	movs	r2, #32
 8004496:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2200      	movs	r2, #0
 800449e:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044a6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80044a8:	e853 3f00 	ldrex	r3, [r3]
 80044ac:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80044ae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80044b0:	f023 0310 	bic.w	r3, r3, #16
 80044b4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	461a      	mov	r2, r3
 80044be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80044c2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80044c4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044c6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80044c8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80044ca:	e841 2300 	strex	r3, r2, [r1]
 80044ce:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80044d0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d1e4      	bne.n	80044a0 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80044dc:	4618      	mov	r0, r3
 80044de:	f7fd fefc 	bl	80022da <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	2202      	movs	r2, #2
 80044e6:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80044f4:	b29b      	uxth	r3, r3
 80044f6:	1ad3      	subs	r3, r2, r3
 80044f8:	b29b      	uxth	r3, r3
 80044fa:	4619      	mov	r1, r3
 80044fc:	6878      	ldr	r0, [r7, #4]
 80044fe:	f000 f8fb 	bl	80046f8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004502:	e0df      	b.n	80046c4 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004510:	b29b      	uxth	r3, r3
 8004512:	1ad3      	subs	r3, r2, r3
 8004514:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800451e:	b29b      	uxth	r3, r3
 8004520:	2b00      	cmp	r3, #0
 8004522:	f000 80d1 	beq.w	80046c8 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8004526:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800452a:	2b00      	cmp	r3, #0
 800452c:	f000 80cc 	beq.w	80046c8 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004536:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004538:	e853 3f00 	ldrex	r3, [r3]
 800453c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800453e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004540:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004544:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	461a      	mov	r2, r3
 800454e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004552:	647b      	str	r3, [r7, #68]	@ 0x44
 8004554:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004556:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004558:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800455a:	e841 2300 	strex	r3, r2, [r1]
 800455e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004560:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004562:	2b00      	cmp	r3, #0
 8004564:	d1e4      	bne.n	8004530 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	3308      	adds	r3, #8
 800456c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800456e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004570:	e853 3f00 	ldrex	r3, [r3]
 8004574:	623b      	str	r3, [r7, #32]
   return(result);
 8004576:	6a3b      	ldr	r3, [r7, #32]
 8004578:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800457c:	f023 0301 	bic.w	r3, r3, #1
 8004580:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	3308      	adds	r3, #8
 800458a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800458e:	633a      	str	r2, [r7, #48]	@ 0x30
 8004590:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004592:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004594:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004596:	e841 2300 	strex	r3, r2, [r1]
 800459a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800459c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d1e1      	bne.n	8004566 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2220      	movs	r2, #32
 80045a6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2200      	movs	r2, #0
 80045ae:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2200      	movs	r2, #0
 80045b4:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045bc:	693b      	ldr	r3, [r7, #16]
 80045be:	e853 3f00 	ldrex	r3, [r3]
 80045c2:	60fb      	str	r3, [r7, #12]
   return(result);
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	f023 0310 	bic.w	r3, r3, #16
 80045ca:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	461a      	mov	r2, r3
 80045d4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80045d8:	61fb      	str	r3, [r7, #28]
 80045da:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045dc:	69b9      	ldr	r1, [r7, #24]
 80045de:	69fa      	ldr	r2, [r7, #28]
 80045e0:	e841 2300 	strex	r3, r2, [r1]
 80045e4:	617b      	str	r3, [r7, #20]
   return(result);
 80045e6:	697b      	ldr	r3, [r7, #20]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d1e4      	bne.n	80045b6 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2202      	movs	r2, #2
 80045f0:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80045f2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80045f6:	4619      	mov	r1, r3
 80045f8:	6878      	ldr	r0, [r7, #4]
 80045fa:	f000 f87d 	bl	80046f8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80045fe:	e063      	b.n	80046c8 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004600:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004604:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004608:	2b00      	cmp	r3, #0
 800460a:	d00e      	beq.n	800462a <HAL_UART_IRQHandler+0x59e>
 800460c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004610:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004614:	2b00      	cmp	r3, #0
 8004616:	d008      	beq.n	800462a <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8004620:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004622:	6878      	ldr	r0, [r7, #4]
 8004624:	f000 fd4b 	bl	80050be <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004628:	e051      	b.n	80046ce <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800462a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800462e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004632:	2b00      	cmp	r3, #0
 8004634:	d014      	beq.n	8004660 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8004636:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800463a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800463e:	2b00      	cmp	r3, #0
 8004640:	d105      	bne.n	800464e <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8004642:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004646:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800464a:	2b00      	cmp	r3, #0
 800464c:	d008      	beq.n	8004660 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004652:	2b00      	cmp	r3, #0
 8004654:	d03a      	beq.n	80046cc <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800465a:	6878      	ldr	r0, [r7, #4]
 800465c:	4798      	blx	r3
    }
    return;
 800465e:	e035      	b.n	80046cc <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004660:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004664:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004668:	2b00      	cmp	r3, #0
 800466a:	d009      	beq.n	8004680 <HAL_UART_IRQHandler+0x5f4>
 800466c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004670:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004674:	2b00      	cmp	r3, #0
 8004676:	d003      	beq.n	8004680 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8004678:	6878      	ldr	r0, [r7, #4]
 800467a:	f000 fcf5 	bl	8005068 <UART_EndTransmit_IT>
    return;
 800467e:	e026      	b.n	80046ce <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8004680:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004684:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004688:	2b00      	cmp	r3, #0
 800468a:	d009      	beq.n	80046a0 <HAL_UART_IRQHandler+0x614>
 800468c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004690:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8004694:	2b00      	cmp	r3, #0
 8004696:	d003      	beq.n	80046a0 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8004698:	6878      	ldr	r0, [r7, #4]
 800469a:	f000 fd22 	bl	80050e2 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800469e:	e016      	b.n	80046ce <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80046a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80046a4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d010      	beq.n	80046ce <HAL_UART_IRQHandler+0x642>
 80046ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	da0c      	bge.n	80046ce <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80046b4:	6878      	ldr	r0, [r7, #4]
 80046b6:	f000 fd0b 	bl	80050d0 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80046ba:	e008      	b.n	80046ce <HAL_UART_IRQHandler+0x642>
      return;
 80046bc:	bf00      	nop
 80046be:	e006      	b.n	80046ce <HAL_UART_IRQHandler+0x642>
    return;
 80046c0:	bf00      	nop
 80046c2:	e004      	b.n	80046ce <HAL_UART_IRQHandler+0x642>
      return;
 80046c4:	bf00      	nop
 80046c6:	e002      	b.n	80046ce <HAL_UART_IRQHandler+0x642>
      return;
 80046c8:	bf00      	nop
 80046ca:	e000      	b.n	80046ce <HAL_UART_IRQHandler+0x642>
    return;
 80046cc:	bf00      	nop
  }
}
 80046ce:	37e8      	adds	r7, #232	@ 0xe8
 80046d0:	46bd      	mov	sp, r7
 80046d2:	bd80      	pop	{r7, pc}

080046d4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80046d4:	b480      	push	{r7}
 80046d6:	b083      	sub	sp, #12
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80046dc:	bf00      	nop
 80046de:	370c      	adds	r7, #12
 80046e0:	46bd      	mov	sp, r7
 80046e2:	bc80      	pop	{r7}
 80046e4:	4770      	bx	lr

080046e6 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80046e6:	b480      	push	{r7}
 80046e8:	b083      	sub	sp, #12
 80046ea:	af00      	add	r7, sp, #0
 80046ec:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80046ee:	bf00      	nop
 80046f0:	370c      	adds	r7, #12
 80046f2:	46bd      	mov	sp, r7
 80046f4:	bc80      	pop	{r7}
 80046f6:	4770      	bx	lr

080046f8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80046f8:	b480      	push	{r7}
 80046fa:	b083      	sub	sp, #12
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
 8004700:	460b      	mov	r3, r1
 8004702:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004704:	bf00      	nop
 8004706:	370c      	adds	r7, #12
 8004708:	46bd      	mov	sp, r7
 800470a:	bc80      	pop	{r7}
 800470c:	4770      	bx	lr
	...

08004710 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004710:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004714:	b08c      	sub	sp, #48	@ 0x30
 8004716:	af00      	add	r7, sp, #0
 8004718:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800471a:	2300      	movs	r3, #0
 800471c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004720:	697b      	ldr	r3, [r7, #20]
 8004722:	689a      	ldr	r2, [r3, #8]
 8004724:	697b      	ldr	r3, [r7, #20]
 8004726:	691b      	ldr	r3, [r3, #16]
 8004728:	431a      	orrs	r2, r3
 800472a:	697b      	ldr	r3, [r7, #20]
 800472c:	695b      	ldr	r3, [r3, #20]
 800472e:	431a      	orrs	r2, r3
 8004730:	697b      	ldr	r3, [r7, #20]
 8004732:	69db      	ldr	r3, [r3, #28]
 8004734:	4313      	orrs	r3, r2
 8004736:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004738:	697b      	ldr	r3, [r7, #20]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	681a      	ldr	r2, [r3, #0]
 800473e:	4b94      	ldr	r3, [pc, #592]	@ (8004990 <UART_SetConfig+0x280>)
 8004740:	4013      	ands	r3, r2
 8004742:	697a      	ldr	r2, [r7, #20]
 8004744:	6812      	ldr	r2, [r2, #0]
 8004746:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004748:	430b      	orrs	r3, r1
 800474a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800474c:	697b      	ldr	r3, [r7, #20]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	685b      	ldr	r3, [r3, #4]
 8004752:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004756:	697b      	ldr	r3, [r7, #20]
 8004758:	68da      	ldr	r2, [r3, #12]
 800475a:	697b      	ldr	r3, [r7, #20]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	430a      	orrs	r2, r1
 8004760:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004762:	697b      	ldr	r3, [r7, #20]
 8004764:	699b      	ldr	r3, [r3, #24]
 8004766:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004768:	697b      	ldr	r3, [r7, #20]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	4a89      	ldr	r2, [pc, #548]	@ (8004994 <UART_SetConfig+0x284>)
 800476e:	4293      	cmp	r3, r2
 8004770:	d004      	beq.n	800477c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004772:	697b      	ldr	r3, [r7, #20]
 8004774:	6a1b      	ldr	r3, [r3, #32]
 8004776:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004778:	4313      	orrs	r3, r2
 800477a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800477c:	697b      	ldr	r3, [r7, #20]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	689b      	ldr	r3, [r3, #8]
 8004782:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8004786:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800478a:	697a      	ldr	r2, [r7, #20]
 800478c:	6812      	ldr	r2, [r2, #0]
 800478e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004790:	430b      	orrs	r3, r1
 8004792:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004794:	697b      	ldr	r3, [r7, #20]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800479a:	f023 010f 	bic.w	r1, r3, #15
 800479e:	697b      	ldr	r3, [r7, #20]
 80047a0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80047a2:	697b      	ldr	r3, [r7, #20]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	430a      	orrs	r2, r1
 80047a8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80047aa:	697b      	ldr	r3, [r7, #20]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	4a7a      	ldr	r2, [pc, #488]	@ (8004998 <UART_SetConfig+0x288>)
 80047b0:	4293      	cmp	r3, r2
 80047b2:	d127      	bne.n	8004804 <UART_SetConfig+0xf4>
 80047b4:	2003      	movs	r0, #3
 80047b6:	f7ff faad 	bl	8003d14 <LL_RCC_GetUSARTClockSource>
 80047ba:	4603      	mov	r3, r0
 80047bc:	f5a3 3340 	sub.w	r3, r3, #196608	@ 0x30000
 80047c0:	2b03      	cmp	r3, #3
 80047c2:	d81b      	bhi.n	80047fc <UART_SetConfig+0xec>
 80047c4:	a201      	add	r2, pc, #4	@ (adr r2, 80047cc <UART_SetConfig+0xbc>)
 80047c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047ca:	bf00      	nop
 80047cc:	080047dd 	.word	0x080047dd
 80047d0:	080047ed 	.word	0x080047ed
 80047d4:	080047e5 	.word	0x080047e5
 80047d8:	080047f5 	.word	0x080047f5
 80047dc:	2301      	movs	r3, #1
 80047de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80047e2:	e080      	b.n	80048e6 <UART_SetConfig+0x1d6>
 80047e4:	2302      	movs	r3, #2
 80047e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80047ea:	e07c      	b.n	80048e6 <UART_SetConfig+0x1d6>
 80047ec:	2304      	movs	r3, #4
 80047ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80047f2:	e078      	b.n	80048e6 <UART_SetConfig+0x1d6>
 80047f4:	2308      	movs	r3, #8
 80047f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80047fa:	e074      	b.n	80048e6 <UART_SetConfig+0x1d6>
 80047fc:	2310      	movs	r3, #16
 80047fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004802:	e070      	b.n	80048e6 <UART_SetConfig+0x1d6>
 8004804:	697b      	ldr	r3, [r7, #20]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	4a64      	ldr	r2, [pc, #400]	@ (800499c <UART_SetConfig+0x28c>)
 800480a:	4293      	cmp	r3, r2
 800480c:	d138      	bne.n	8004880 <UART_SetConfig+0x170>
 800480e:	200c      	movs	r0, #12
 8004810:	f7ff fa80 	bl	8003d14 <LL_RCC_GetUSARTClockSource>
 8004814:	4603      	mov	r3, r0
 8004816:	f5a3 2340 	sub.w	r3, r3, #786432	@ 0xc0000
 800481a:	2b0c      	cmp	r3, #12
 800481c:	d82c      	bhi.n	8004878 <UART_SetConfig+0x168>
 800481e:	a201      	add	r2, pc, #4	@ (adr r2, 8004824 <UART_SetConfig+0x114>)
 8004820:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004824:	08004859 	.word	0x08004859
 8004828:	08004879 	.word	0x08004879
 800482c:	08004879 	.word	0x08004879
 8004830:	08004879 	.word	0x08004879
 8004834:	08004869 	.word	0x08004869
 8004838:	08004879 	.word	0x08004879
 800483c:	08004879 	.word	0x08004879
 8004840:	08004879 	.word	0x08004879
 8004844:	08004861 	.word	0x08004861
 8004848:	08004879 	.word	0x08004879
 800484c:	08004879 	.word	0x08004879
 8004850:	08004879 	.word	0x08004879
 8004854:	08004871 	.word	0x08004871
 8004858:	2300      	movs	r3, #0
 800485a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800485e:	e042      	b.n	80048e6 <UART_SetConfig+0x1d6>
 8004860:	2302      	movs	r3, #2
 8004862:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004866:	e03e      	b.n	80048e6 <UART_SetConfig+0x1d6>
 8004868:	2304      	movs	r3, #4
 800486a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800486e:	e03a      	b.n	80048e6 <UART_SetConfig+0x1d6>
 8004870:	2308      	movs	r3, #8
 8004872:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004876:	e036      	b.n	80048e6 <UART_SetConfig+0x1d6>
 8004878:	2310      	movs	r3, #16
 800487a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800487e:	e032      	b.n	80048e6 <UART_SetConfig+0x1d6>
 8004880:	697b      	ldr	r3, [r7, #20]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	4a43      	ldr	r2, [pc, #268]	@ (8004994 <UART_SetConfig+0x284>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d12a      	bne.n	80048e0 <UART_SetConfig+0x1d0>
 800488a:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 800488e:	f7ff fa53 	bl	8003d38 <LL_RCC_GetLPUARTClockSource>
 8004892:	4603      	mov	r3, r0
 8004894:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004898:	d01a      	beq.n	80048d0 <UART_SetConfig+0x1c0>
 800489a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800489e:	d81b      	bhi.n	80048d8 <UART_SetConfig+0x1c8>
 80048a0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80048a4:	d00c      	beq.n	80048c0 <UART_SetConfig+0x1b0>
 80048a6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80048aa:	d815      	bhi.n	80048d8 <UART_SetConfig+0x1c8>
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d003      	beq.n	80048b8 <UART_SetConfig+0x1a8>
 80048b0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80048b4:	d008      	beq.n	80048c8 <UART_SetConfig+0x1b8>
 80048b6:	e00f      	b.n	80048d8 <UART_SetConfig+0x1c8>
 80048b8:	2300      	movs	r3, #0
 80048ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80048be:	e012      	b.n	80048e6 <UART_SetConfig+0x1d6>
 80048c0:	2302      	movs	r3, #2
 80048c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80048c6:	e00e      	b.n	80048e6 <UART_SetConfig+0x1d6>
 80048c8:	2304      	movs	r3, #4
 80048ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80048ce:	e00a      	b.n	80048e6 <UART_SetConfig+0x1d6>
 80048d0:	2308      	movs	r3, #8
 80048d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80048d6:	e006      	b.n	80048e6 <UART_SetConfig+0x1d6>
 80048d8:	2310      	movs	r3, #16
 80048da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80048de:	e002      	b.n	80048e6 <UART_SetConfig+0x1d6>
 80048e0:	2310      	movs	r3, #16
 80048e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80048e6:	697b      	ldr	r3, [r7, #20]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4a2a      	ldr	r2, [pc, #168]	@ (8004994 <UART_SetConfig+0x284>)
 80048ec:	4293      	cmp	r3, r2
 80048ee:	f040 80a4 	bne.w	8004a3a <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80048f2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80048f6:	2b08      	cmp	r3, #8
 80048f8:	d823      	bhi.n	8004942 <UART_SetConfig+0x232>
 80048fa:	a201      	add	r2, pc, #4	@ (adr r2, 8004900 <UART_SetConfig+0x1f0>)
 80048fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004900:	08004925 	.word	0x08004925
 8004904:	08004943 	.word	0x08004943
 8004908:	0800492d 	.word	0x0800492d
 800490c:	08004943 	.word	0x08004943
 8004910:	08004933 	.word	0x08004933
 8004914:	08004943 	.word	0x08004943
 8004918:	08004943 	.word	0x08004943
 800491c:	08004943 	.word	0x08004943
 8004920:	0800493b 	.word	0x0800493b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004924:	f7fe ff12 	bl	800374c <HAL_RCC_GetPCLK1Freq>
 8004928:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800492a:	e010      	b.n	800494e <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800492c:	4b1c      	ldr	r3, [pc, #112]	@ (80049a0 <UART_SetConfig+0x290>)
 800492e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004930:	e00d      	b.n	800494e <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004932:	f7fe fe57 	bl	80035e4 <HAL_RCC_GetSysClockFreq>
 8004936:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004938:	e009      	b.n	800494e <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800493a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800493e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004940:	e005      	b.n	800494e <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 8004942:	2300      	movs	r3, #0
 8004944:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004946:	2301      	movs	r3, #1
 8004948:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800494c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800494e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004950:	2b00      	cmp	r3, #0
 8004952:	f000 8137 	beq.w	8004bc4 <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004956:	697b      	ldr	r3, [r7, #20]
 8004958:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800495a:	4a12      	ldr	r2, [pc, #72]	@ (80049a4 <UART_SetConfig+0x294>)
 800495c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004960:	461a      	mov	r2, r3
 8004962:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004964:	fbb3 f3f2 	udiv	r3, r3, r2
 8004968:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800496a:	697b      	ldr	r3, [r7, #20]
 800496c:	685a      	ldr	r2, [r3, #4]
 800496e:	4613      	mov	r3, r2
 8004970:	005b      	lsls	r3, r3, #1
 8004972:	4413      	add	r3, r2
 8004974:	69ba      	ldr	r2, [r7, #24]
 8004976:	429a      	cmp	r2, r3
 8004978:	d305      	bcc.n	8004986 <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800497a:	697b      	ldr	r3, [r7, #20]
 800497c:	685b      	ldr	r3, [r3, #4]
 800497e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004980:	69ba      	ldr	r2, [r7, #24]
 8004982:	429a      	cmp	r2, r3
 8004984:	d910      	bls.n	80049a8 <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 8004986:	2301      	movs	r3, #1
 8004988:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800498c:	e11a      	b.n	8004bc4 <UART_SetConfig+0x4b4>
 800498e:	bf00      	nop
 8004990:	cfff69f3 	.word	0xcfff69f3
 8004994:	40008000 	.word	0x40008000
 8004998:	40013800 	.word	0x40013800
 800499c:	40004400 	.word	0x40004400
 80049a0:	00f42400 	.word	0x00f42400
 80049a4:	08007e78 	.word	0x08007e78
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80049a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049aa:	2200      	movs	r2, #0
 80049ac:	60bb      	str	r3, [r7, #8]
 80049ae:	60fa      	str	r2, [r7, #12]
 80049b0:	697b      	ldr	r3, [r7, #20]
 80049b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049b4:	4a8e      	ldr	r2, [pc, #568]	@ (8004bf0 <UART_SetConfig+0x4e0>)
 80049b6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80049ba:	b29b      	uxth	r3, r3
 80049bc:	2200      	movs	r2, #0
 80049be:	603b      	str	r3, [r7, #0]
 80049c0:	607a      	str	r2, [r7, #4]
 80049c2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80049c6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80049ca:	f7fc fb23 	bl	8001014 <__aeabi_uldivmod>
 80049ce:	4602      	mov	r2, r0
 80049d0:	460b      	mov	r3, r1
 80049d2:	4610      	mov	r0, r2
 80049d4:	4619      	mov	r1, r3
 80049d6:	f04f 0200 	mov.w	r2, #0
 80049da:	f04f 0300 	mov.w	r3, #0
 80049de:	020b      	lsls	r3, r1, #8
 80049e0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80049e4:	0202      	lsls	r2, r0, #8
 80049e6:	6979      	ldr	r1, [r7, #20]
 80049e8:	6849      	ldr	r1, [r1, #4]
 80049ea:	0849      	lsrs	r1, r1, #1
 80049ec:	2000      	movs	r0, #0
 80049ee:	460c      	mov	r4, r1
 80049f0:	4605      	mov	r5, r0
 80049f2:	eb12 0804 	adds.w	r8, r2, r4
 80049f6:	eb43 0905 	adc.w	r9, r3, r5
 80049fa:	697b      	ldr	r3, [r7, #20]
 80049fc:	685b      	ldr	r3, [r3, #4]
 80049fe:	2200      	movs	r2, #0
 8004a00:	469a      	mov	sl, r3
 8004a02:	4693      	mov	fp, r2
 8004a04:	4652      	mov	r2, sl
 8004a06:	465b      	mov	r3, fp
 8004a08:	4640      	mov	r0, r8
 8004a0a:	4649      	mov	r1, r9
 8004a0c:	f7fc fb02 	bl	8001014 <__aeabi_uldivmod>
 8004a10:	4602      	mov	r2, r0
 8004a12:	460b      	mov	r3, r1
 8004a14:	4613      	mov	r3, r2
 8004a16:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004a18:	6a3b      	ldr	r3, [r7, #32]
 8004a1a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004a1e:	d308      	bcc.n	8004a32 <UART_SetConfig+0x322>
 8004a20:	6a3b      	ldr	r3, [r7, #32]
 8004a22:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004a26:	d204      	bcs.n	8004a32 <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 8004a28:	697b      	ldr	r3, [r7, #20]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	6a3a      	ldr	r2, [r7, #32]
 8004a2e:	60da      	str	r2, [r3, #12]
 8004a30:	e0c8      	b.n	8004bc4 <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 8004a32:	2301      	movs	r3, #1
 8004a34:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004a38:	e0c4      	b.n	8004bc4 <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004a3a:	697b      	ldr	r3, [r7, #20]
 8004a3c:	69db      	ldr	r3, [r3, #28]
 8004a3e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004a42:	d167      	bne.n	8004b14 <UART_SetConfig+0x404>
  {
    switch (clocksource)
 8004a44:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004a48:	2b08      	cmp	r3, #8
 8004a4a:	d828      	bhi.n	8004a9e <UART_SetConfig+0x38e>
 8004a4c:	a201      	add	r2, pc, #4	@ (adr r2, 8004a54 <UART_SetConfig+0x344>)
 8004a4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a52:	bf00      	nop
 8004a54:	08004a79 	.word	0x08004a79
 8004a58:	08004a81 	.word	0x08004a81
 8004a5c:	08004a89 	.word	0x08004a89
 8004a60:	08004a9f 	.word	0x08004a9f
 8004a64:	08004a8f 	.word	0x08004a8f
 8004a68:	08004a9f 	.word	0x08004a9f
 8004a6c:	08004a9f 	.word	0x08004a9f
 8004a70:	08004a9f 	.word	0x08004a9f
 8004a74:	08004a97 	.word	0x08004a97
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a78:	f7fe fe68 	bl	800374c <HAL_RCC_GetPCLK1Freq>
 8004a7c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004a7e:	e014      	b.n	8004aaa <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004a80:	f7fe fe76 	bl	8003770 <HAL_RCC_GetPCLK2Freq>
 8004a84:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004a86:	e010      	b.n	8004aaa <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004a88:	4b5a      	ldr	r3, [pc, #360]	@ (8004bf4 <UART_SetConfig+0x4e4>)
 8004a8a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004a8c:	e00d      	b.n	8004aaa <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004a8e:	f7fe fda9 	bl	80035e4 <HAL_RCC_GetSysClockFreq>
 8004a92:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004a94:	e009      	b.n	8004aaa <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a96:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004a9a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004a9c:	e005      	b.n	8004aaa <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004aa2:	2301      	movs	r3, #1
 8004aa4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004aa8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004aaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	f000 8089 	beq.w	8004bc4 <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004ab2:	697b      	ldr	r3, [r7, #20]
 8004ab4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ab6:	4a4e      	ldr	r2, [pc, #312]	@ (8004bf0 <UART_SetConfig+0x4e0>)
 8004ab8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004abc:	461a      	mov	r2, r3
 8004abe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ac0:	fbb3 f3f2 	udiv	r3, r3, r2
 8004ac4:	005a      	lsls	r2, r3, #1
 8004ac6:	697b      	ldr	r3, [r7, #20]
 8004ac8:	685b      	ldr	r3, [r3, #4]
 8004aca:	085b      	lsrs	r3, r3, #1
 8004acc:	441a      	add	r2, r3
 8004ace:	697b      	ldr	r3, [r7, #20]
 8004ad0:	685b      	ldr	r3, [r3, #4]
 8004ad2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ad6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004ad8:	6a3b      	ldr	r3, [r7, #32]
 8004ada:	2b0f      	cmp	r3, #15
 8004adc:	d916      	bls.n	8004b0c <UART_SetConfig+0x3fc>
 8004ade:	6a3b      	ldr	r3, [r7, #32]
 8004ae0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ae4:	d212      	bcs.n	8004b0c <UART_SetConfig+0x3fc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004ae6:	6a3b      	ldr	r3, [r7, #32]
 8004ae8:	b29b      	uxth	r3, r3
 8004aea:	f023 030f 	bic.w	r3, r3, #15
 8004aee:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004af0:	6a3b      	ldr	r3, [r7, #32]
 8004af2:	085b      	lsrs	r3, r3, #1
 8004af4:	b29b      	uxth	r3, r3
 8004af6:	f003 0307 	and.w	r3, r3, #7
 8004afa:	b29a      	uxth	r2, r3
 8004afc:	8bfb      	ldrh	r3, [r7, #30]
 8004afe:	4313      	orrs	r3, r2
 8004b00:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8004b02:	697b      	ldr	r3, [r7, #20]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	8bfa      	ldrh	r2, [r7, #30]
 8004b08:	60da      	str	r2, [r3, #12]
 8004b0a:	e05b      	b.n	8004bc4 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8004b0c:	2301      	movs	r3, #1
 8004b0e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004b12:	e057      	b.n	8004bc4 <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004b14:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004b18:	2b08      	cmp	r3, #8
 8004b1a:	d828      	bhi.n	8004b6e <UART_SetConfig+0x45e>
 8004b1c:	a201      	add	r2, pc, #4	@ (adr r2, 8004b24 <UART_SetConfig+0x414>)
 8004b1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b22:	bf00      	nop
 8004b24:	08004b49 	.word	0x08004b49
 8004b28:	08004b51 	.word	0x08004b51
 8004b2c:	08004b59 	.word	0x08004b59
 8004b30:	08004b6f 	.word	0x08004b6f
 8004b34:	08004b5f 	.word	0x08004b5f
 8004b38:	08004b6f 	.word	0x08004b6f
 8004b3c:	08004b6f 	.word	0x08004b6f
 8004b40:	08004b6f 	.word	0x08004b6f
 8004b44:	08004b67 	.word	0x08004b67
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b48:	f7fe fe00 	bl	800374c <HAL_RCC_GetPCLK1Freq>
 8004b4c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004b4e:	e014      	b.n	8004b7a <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004b50:	f7fe fe0e 	bl	8003770 <HAL_RCC_GetPCLK2Freq>
 8004b54:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004b56:	e010      	b.n	8004b7a <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004b58:	4b26      	ldr	r3, [pc, #152]	@ (8004bf4 <UART_SetConfig+0x4e4>)
 8004b5a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004b5c:	e00d      	b.n	8004b7a <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004b5e:	f7fe fd41 	bl	80035e4 <HAL_RCC_GetSysClockFreq>
 8004b62:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004b64:	e009      	b.n	8004b7a <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b66:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004b6a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004b6c:	e005      	b.n	8004b7a <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 8004b6e:	2300      	movs	r3, #0
 8004b70:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004b72:	2301      	movs	r3, #1
 8004b74:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004b78:	bf00      	nop
    }

    if (pclk != 0U)
 8004b7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d021      	beq.n	8004bc4 <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004b80:	697b      	ldr	r3, [r7, #20]
 8004b82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b84:	4a1a      	ldr	r2, [pc, #104]	@ (8004bf0 <UART_SetConfig+0x4e0>)
 8004b86:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004b8a:	461a      	mov	r2, r3
 8004b8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b8e:	fbb3 f2f2 	udiv	r2, r3, r2
 8004b92:	697b      	ldr	r3, [r7, #20]
 8004b94:	685b      	ldr	r3, [r3, #4]
 8004b96:	085b      	lsrs	r3, r3, #1
 8004b98:	441a      	add	r2, r3
 8004b9a:	697b      	ldr	r3, [r7, #20]
 8004b9c:	685b      	ldr	r3, [r3, #4]
 8004b9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ba2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004ba4:	6a3b      	ldr	r3, [r7, #32]
 8004ba6:	2b0f      	cmp	r3, #15
 8004ba8:	d909      	bls.n	8004bbe <UART_SetConfig+0x4ae>
 8004baa:	6a3b      	ldr	r3, [r7, #32]
 8004bac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004bb0:	d205      	bcs.n	8004bbe <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004bb2:	6a3b      	ldr	r3, [r7, #32]
 8004bb4:	b29a      	uxth	r2, r3
 8004bb6:	697b      	ldr	r3, [r7, #20]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	60da      	str	r2, [r3, #12]
 8004bbc:	e002      	b.n	8004bc4 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8004bbe:	2301      	movs	r3, #1
 8004bc0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004bc4:	697b      	ldr	r3, [r7, #20]
 8004bc6:	2201      	movs	r2, #1
 8004bc8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8004bcc:	697b      	ldr	r3, [r7, #20]
 8004bce:	2201      	movs	r2, #1
 8004bd0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004bd4:	697b      	ldr	r3, [r7, #20]
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8004bda:	697b      	ldr	r3, [r7, #20]
 8004bdc:	2200      	movs	r2, #0
 8004bde:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8004be0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8004be4:	4618      	mov	r0, r3
 8004be6:	3730      	adds	r7, #48	@ 0x30
 8004be8:	46bd      	mov	sp, r7
 8004bea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004bee:	bf00      	nop
 8004bf0:	08007e78 	.word	0x08007e78
 8004bf4:	00f42400 	.word	0x00f42400

08004bf8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004bf8:	b480      	push	{r7}
 8004bfa:	b083      	sub	sp, #12
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c04:	f003 0308 	and.w	r3, r3, #8
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d00a      	beq.n	8004c22 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	685b      	ldr	r3, [r3, #4]
 8004c12:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	430a      	orrs	r2, r1
 8004c20:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c26:	f003 0301 	and.w	r3, r3, #1
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d00a      	beq.n	8004c44 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	685b      	ldr	r3, [r3, #4]
 8004c34:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	430a      	orrs	r2, r1
 8004c42:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c48:	f003 0302 	and.w	r3, r3, #2
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d00a      	beq.n	8004c66 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	685b      	ldr	r3, [r3, #4]
 8004c56:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	430a      	orrs	r2, r1
 8004c64:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c6a:	f003 0304 	and.w	r3, r3, #4
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d00a      	beq.n	8004c88 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	685b      	ldr	r3, [r3, #4]
 8004c78:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	430a      	orrs	r2, r1
 8004c86:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c8c:	f003 0310 	and.w	r3, r3, #16
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d00a      	beq.n	8004caa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	689b      	ldr	r3, [r3, #8]
 8004c9a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	430a      	orrs	r2, r1
 8004ca8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cae:	f003 0320 	and.w	r3, r3, #32
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d00a      	beq.n	8004ccc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	689b      	ldr	r3, [r3, #8]
 8004cbc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	430a      	orrs	r2, r1
 8004cca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cd0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d01a      	beq.n	8004d0e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	685b      	ldr	r3, [r3, #4]
 8004cde:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	430a      	orrs	r2, r1
 8004cec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004cf2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004cf6:	d10a      	bne.n	8004d0e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	685b      	ldr	r3, [r3, #4]
 8004cfe:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	430a      	orrs	r2, r1
 8004d0c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d00a      	beq.n	8004d30 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	685b      	ldr	r3, [r3, #4]
 8004d20:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	430a      	orrs	r2, r1
 8004d2e:	605a      	str	r2, [r3, #4]
  }
}
 8004d30:	bf00      	nop
 8004d32:	370c      	adds	r7, #12
 8004d34:	46bd      	mov	sp, r7
 8004d36:	bc80      	pop	{r7}
 8004d38:	4770      	bx	lr

08004d3a <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004d3a:	b580      	push	{r7, lr}
 8004d3c:	b086      	sub	sp, #24
 8004d3e:	af02      	add	r7, sp, #8
 8004d40:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	2200      	movs	r2, #0
 8004d46:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004d4a:	f7fd f98d 	bl	8002068 <HAL_GetTick>
 8004d4e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f003 0308 	and.w	r3, r3, #8
 8004d5a:	2b08      	cmp	r3, #8
 8004d5c:	d10e      	bne.n	8004d7c <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004d5e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004d62:	9300      	str	r3, [sp, #0]
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	2200      	movs	r2, #0
 8004d68:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004d6c:	6878      	ldr	r0, [r7, #4]
 8004d6e:	f000 f832 	bl	8004dd6 <UART_WaitOnFlagUntilTimeout>
 8004d72:	4603      	mov	r3, r0
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d001      	beq.n	8004d7c <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004d78:	2303      	movs	r3, #3
 8004d7a:	e028      	b.n	8004dce <UART_CheckIdleState+0x94>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f003 0304 	and.w	r3, r3, #4
 8004d86:	2b04      	cmp	r3, #4
 8004d88:	d10e      	bne.n	8004da8 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004d8a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004d8e:	9300      	str	r3, [sp, #0]
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	2200      	movs	r2, #0
 8004d94:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004d98:	6878      	ldr	r0, [r7, #4]
 8004d9a:	f000 f81c 	bl	8004dd6 <UART_WaitOnFlagUntilTimeout>
 8004d9e:	4603      	mov	r3, r0
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d001      	beq.n	8004da8 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004da4:	2303      	movs	r3, #3
 8004da6:	e012      	b.n	8004dce <UART_CheckIdleState+0x94>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2220      	movs	r2, #32
 8004dac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2220      	movs	r2, #32
 8004db4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2200      	movs	r2, #0
 8004dbc:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004dcc:	2300      	movs	r3, #0
}
 8004dce:	4618      	mov	r0, r3
 8004dd0:	3710      	adds	r7, #16
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	bd80      	pop	{r7, pc}

08004dd6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004dd6:	b580      	push	{r7, lr}
 8004dd8:	b09c      	sub	sp, #112	@ 0x70
 8004dda:	af00      	add	r7, sp, #0
 8004ddc:	60f8      	str	r0, [r7, #12]
 8004dde:	60b9      	str	r1, [r7, #8]
 8004de0:	603b      	str	r3, [r7, #0]
 8004de2:	4613      	mov	r3, r2
 8004de4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004de6:	e0af      	b.n	8004f48 <UART_WaitOnFlagUntilTimeout+0x172>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004de8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004dea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dee:	f000 80ab 	beq.w	8004f48 <UART_WaitOnFlagUntilTimeout+0x172>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004df2:	f7fd f939 	bl	8002068 <HAL_GetTick>
 8004df6:	4602      	mov	r2, r0
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	1ad3      	subs	r3, r2, r3
 8004dfc:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8004dfe:	429a      	cmp	r2, r3
 8004e00:	d302      	bcc.n	8004e08 <UART_WaitOnFlagUntilTimeout+0x32>
 8004e02:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d140      	bne.n	8004e8a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e0e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004e10:	e853 3f00 	ldrex	r3, [r3]
 8004e14:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8004e16:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004e18:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8004e1c:	667b      	str	r3, [r7, #100]	@ 0x64
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	461a      	mov	r2, r3
 8004e24:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004e26:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004e28:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e2a:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8004e2c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8004e2e:	e841 2300 	strex	r3, r2, [r1]
 8004e32:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8004e34:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d1e6      	bne.n	8004e08 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	3308      	adds	r3, #8
 8004e40:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004e44:	e853 3f00 	ldrex	r3, [r3]
 8004e48:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004e4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e4c:	f023 0301 	bic.w	r3, r3, #1
 8004e50:	663b      	str	r3, [r7, #96]	@ 0x60
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	3308      	adds	r3, #8
 8004e58:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004e5a:	64ba      	str	r2, [r7, #72]	@ 0x48
 8004e5c:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e5e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004e60:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004e62:	e841 2300 	strex	r3, r2, [r1]
 8004e66:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8004e68:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d1e5      	bne.n	8004e3a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	2220      	movs	r2, #32
 8004e72:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        huart->RxState = HAL_UART_STATE_READY;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	2220      	movs	r2, #32
 8004e7a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        __HAL_UNLOCK(huart);
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	2200      	movs	r2, #0
 8004e82:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

        return HAL_TIMEOUT;
 8004e86:	2303      	movs	r3, #3
 8004e88:	e06f      	b.n	8004f6a <UART_WaitOnFlagUntilTimeout+0x194>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f003 0304 	and.w	r3, r3, #4
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d057      	beq.n	8004f48 <UART_WaitOnFlagUntilTimeout+0x172>
 8004e98:	68bb      	ldr	r3, [r7, #8]
 8004e9a:	2b80      	cmp	r3, #128	@ 0x80
 8004e9c:	d054      	beq.n	8004f48 <UART_WaitOnFlagUntilTimeout+0x172>
 8004e9e:	68bb      	ldr	r3, [r7, #8]
 8004ea0:	2b40      	cmp	r3, #64	@ 0x40
 8004ea2:	d051      	beq.n	8004f48 <UART_WaitOnFlagUntilTimeout+0x172>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	69db      	ldr	r3, [r3, #28]
 8004eaa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004eae:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004eb2:	d149      	bne.n	8004f48 <UART_WaitOnFlagUntilTimeout+0x172>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004ebc:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ec4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ec6:	e853 3f00 	ldrex	r3, [r3]
 8004eca:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004ecc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ece:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8004ed2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	461a      	mov	r2, r3
 8004eda:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004edc:	637b      	str	r3, [r7, #52]	@ 0x34
 8004ede:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ee0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004ee2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004ee4:	e841 2300 	strex	r3, r2, [r1]
 8004ee8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8004eea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d1e6      	bne.n	8004ebe <UART_WaitOnFlagUntilTimeout+0xe8>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	3308      	adds	r3, #8
 8004ef6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ef8:	697b      	ldr	r3, [r7, #20]
 8004efa:	e853 3f00 	ldrex	r3, [r3]
 8004efe:	613b      	str	r3, [r7, #16]
   return(result);
 8004f00:	693b      	ldr	r3, [r7, #16]
 8004f02:	f023 0301 	bic.w	r3, r3, #1
 8004f06:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	3308      	adds	r3, #8
 8004f0e:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8004f10:	623a      	str	r2, [r7, #32]
 8004f12:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f14:	69f9      	ldr	r1, [r7, #28]
 8004f16:	6a3a      	ldr	r2, [r7, #32]
 8004f18:	e841 2300 	strex	r3, r2, [r1]
 8004f1c:	61bb      	str	r3, [r7, #24]
   return(result);
 8004f1e:	69bb      	ldr	r3, [r7, #24]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d1e5      	bne.n	8004ef0 <UART_WaitOnFlagUntilTimeout+0x11a>

          huart->gState = HAL_UART_STATE_READY;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	2220      	movs	r2, #32
 8004f28:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          huart->RxState = HAL_UART_STATE_READY;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	2220      	movs	r2, #32
 8004f30:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	2220      	movs	r2, #32
 8004f38:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	2200      	movs	r2, #0
 8004f40:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8004f44:	2303      	movs	r3, #3
 8004f46:	e010      	b.n	8004f6a <UART_WaitOnFlagUntilTimeout+0x194>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	69da      	ldr	r2, [r3, #28]
 8004f4e:	68bb      	ldr	r3, [r7, #8]
 8004f50:	4013      	ands	r3, r2
 8004f52:	68ba      	ldr	r2, [r7, #8]
 8004f54:	429a      	cmp	r2, r3
 8004f56:	bf0c      	ite	eq
 8004f58:	2301      	moveq	r3, #1
 8004f5a:	2300      	movne	r3, #0
 8004f5c:	b2db      	uxtb	r3, r3
 8004f5e:	461a      	mov	r2, r3
 8004f60:	79fb      	ldrb	r3, [r7, #7]
 8004f62:	429a      	cmp	r2, r3
 8004f64:	f43f af40 	beq.w	8004de8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004f68:	2300      	movs	r3, #0
}
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	3770      	adds	r7, #112	@ 0x70
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	bd80      	pop	{r7, pc}

08004f72 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004f72:	b480      	push	{r7}
 8004f74:	b095      	sub	sp, #84	@ 0x54
 8004f76:	af00      	add	r7, sp, #0
 8004f78:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f82:	e853 3f00 	ldrex	r3, [r3]
 8004f86:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004f88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f8a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004f8e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	461a      	mov	r2, r3
 8004f96:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004f98:	643b      	str	r3, [r7, #64]	@ 0x40
 8004f9a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f9c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004f9e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004fa0:	e841 2300 	strex	r3, r2, [r1]
 8004fa4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004fa6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d1e6      	bne.n	8004f7a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	3308      	adds	r3, #8
 8004fb2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fb4:	6a3b      	ldr	r3, [r7, #32]
 8004fb6:	e853 3f00 	ldrex	r3, [r3]
 8004fba:	61fb      	str	r3, [r7, #28]
   return(result);
 8004fbc:	69fb      	ldr	r3, [r7, #28]
 8004fbe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004fc2:	f023 0301 	bic.w	r3, r3, #1
 8004fc6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	3308      	adds	r3, #8
 8004fce:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004fd0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004fd2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fd4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004fd6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004fd8:	e841 2300 	strex	r3, r2, [r1]
 8004fdc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004fde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d1e3      	bne.n	8004fac <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004fe8:	2b01      	cmp	r3, #1
 8004fea:	d118      	bne.n	800501e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	e853 3f00 	ldrex	r3, [r3]
 8004ff8:	60bb      	str	r3, [r7, #8]
   return(result);
 8004ffa:	68bb      	ldr	r3, [r7, #8]
 8004ffc:	f023 0310 	bic.w	r3, r3, #16
 8005000:	647b      	str	r3, [r7, #68]	@ 0x44
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	461a      	mov	r2, r3
 8005008:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800500a:	61bb      	str	r3, [r7, #24]
 800500c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800500e:	6979      	ldr	r1, [r7, #20]
 8005010:	69ba      	ldr	r2, [r7, #24]
 8005012:	e841 2300 	strex	r3, r2, [r1]
 8005016:	613b      	str	r3, [r7, #16]
   return(result);
 8005018:	693b      	ldr	r3, [r7, #16]
 800501a:	2b00      	cmp	r3, #0
 800501c:	d1e6      	bne.n	8004fec <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	2220      	movs	r2, #32
 8005022:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	2200      	movs	r2, #0
 800502a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2200      	movs	r2, #0
 8005030:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8005032:	bf00      	nop
 8005034:	3754      	adds	r7, #84	@ 0x54
 8005036:	46bd      	mov	sp, r7
 8005038:	bc80      	pop	{r7}
 800503a:	4770      	bx	lr

0800503c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800503c:	b580      	push	{r7, lr}
 800503e:	b084      	sub	sp, #16
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005048:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	2200      	movs	r2, #0
 800504e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	2200      	movs	r2, #0
 8005056:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800505a:	68f8      	ldr	r0, [r7, #12]
 800505c:	f7ff fb43 	bl	80046e6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005060:	bf00      	nop
 8005062:	3710      	adds	r7, #16
 8005064:	46bd      	mov	sp, r7
 8005066:	bd80      	pop	{r7, pc}

08005068 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005068:	b580      	push	{r7, lr}
 800506a:	b088      	sub	sp, #32
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	e853 3f00 	ldrex	r3, [r3]
 800507c:	60bb      	str	r3, [r7, #8]
   return(result);
 800507e:	68bb      	ldr	r3, [r7, #8]
 8005080:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005084:	61fb      	str	r3, [r7, #28]
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	461a      	mov	r2, r3
 800508c:	69fb      	ldr	r3, [r7, #28]
 800508e:	61bb      	str	r3, [r7, #24]
 8005090:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005092:	6979      	ldr	r1, [r7, #20]
 8005094:	69ba      	ldr	r2, [r7, #24]
 8005096:	e841 2300 	strex	r3, r2, [r1]
 800509a:	613b      	str	r3, [r7, #16]
   return(result);
 800509c:	693b      	ldr	r3, [r7, #16]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d1e6      	bne.n	8005070 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2220      	movs	r2, #32
 80050a6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2200      	movs	r2, #0
 80050ae:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80050b0:	6878      	ldr	r0, [r7, #4]
 80050b2:	f7ff fb0f 	bl	80046d4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80050b6:	bf00      	nop
 80050b8:	3720      	adds	r7, #32
 80050ba:	46bd      	mov	sp, r7
 80050bc:	bd80      	pop	{r7, pc}

080050be <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80050be:	b480      	push	{r7}
 80050c0:	b083      	sub	sp, #12
 80050c2:	af00      	add	r7, sp, #0
 80050c4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80050c6:	bf00      	nop
 80050c8:	370c      	adds	r7, #12
 80050ca:	46bd      	mov	sp, r7
 80050cc:	bc80      	pop	{r7}
 80050ce:	4770      	bx	lr

080050d0 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80050d0:	b480      	push	{r7}
 80050d2:	b083      	sub	sp, #12
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80050d8:	bf00      	nop
 80050da:	370c      	adds	r7, #12
 80050dc:	46bd      	mov	sp, r7
 80050de:	bc80      	pop	{r7}
 80050e0:	4770      	bx	lr

080050e2 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80050e2:	b480      	push	{r7}
 80050e4:	b083      	sub	sp, #12
 80050e6:	af00      	add	r7, sp, #0
 80050e8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80050ea:	bf00      	nop
 80050ec:	370c      	adds	r7, #12
 80050ee:	46bd      	mov	sp, r7
 80050f0:	bc80      	pop	{r7}
 80050f2:	4770      	bx	lr

080050f4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80050f4:	b480      	push	{r7}
 80050f6:	b085      	sub	sp, #20
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005102:	2b01      	cmp	r3, #1
 8005104:	d101      	bne.n	800510a <HAL_UARTEx_DisableFifoMode+0x16>
 8005106:	2302      	movs	r3, #2
 8005108:	e027      	b.n	800515a <HAL_UARTEx_DisableFifoMode+0x66>
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	2201      	movs	r2, #1
 800510e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	2224      	movs	r2, #36	@ 0x24
 8005116:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	681a      	ldr	r2, [r3, #0]
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f022 0201 	bic.w	r2, r2, #1
 8005130:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8005138:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	2200      	movs	r2, #0
 800513e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	68fa      	ldr	r2, [r7, #12]
 8005146:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2220      	movs	r2, #32
 800514c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2200      	movs	r2, #0
 8005154:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005158:	2300      	movs	r3, #0
}
 800515a:	4618      	mov	r0, r3
 800515c:	3714      	adds	r7, #20
 800515e:	46bd      	mov	sp, r7
 8005160:	bc80      	pop	{r7}
 8005162:	4770      	bx	lr

08005164 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005164:	b580      	push	{r7, lr}
 8005166:	b084      	sub	sp, #16
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
 800516c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005174:	2b01      	cmp	r3, #1
 8005176:	d101      	bne.n	800517c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005178:	2302      	movs	r3, #2
 800517a:	e02d      	b.n	80051d8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2201      	movs	r2, #1
 8005180:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2224      	movs	r2, #36	@ 0x24
 8005188:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	681a      	ldr	r2, [r3, #0]
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f022 0201 	bic.w	r2, r2, #1
 80051a2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	689b      	ldr	r3, [r3, #8]
 80051aa:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	683a      	ldr	r2, [r7, #0]
 80051b4:	430a      	orrs	r2, r1
 80051b6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80051b8:	6878      	ldr	r0, [r7, #4]
 80051ba:	f000 f84f 	bl	800525c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	68fa      	ldr	r2, [r7, #12]
 80051c4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	2220      	movs	r2, #32
 80051ca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	2200      	movs	r2, #0
 80051d2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80051d6:	2300      	movs	r3, #0
}
 80051d8:	4618      	mov	r0, r3
 80051da:	3710      	adds	r7, #16
 80051dc:	46bd      	mov	sp, r7
 80051de:	bd80      	pop	{r7, pc}

080051e0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b084      	sub	sp, #16
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
 80051e8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80051f0:	2b01      	cmp	r3, #1
 80051f2:	d101      	bne.n	80051f8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80051f4:	2302      	movs	r3, #2
 80051f6:	e02d      	b.n	8005254 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2201      	movs	r2, #1
 80051fc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2224      	movs	r2, #36	@ 0x24
 8005204:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	681a      	ldr	r2, [r3, #0]
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f022 0201 	bic.w	r2, r2, #1
 800521e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	689b      	ldr	r3, [r3, #8]
 8005226:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	683a      	ldr	r2, [r7, #0]
 8005230:	430a      	orrs	r2, r1
 8005232:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005234:	6878      	ldr	r0, [r7, #4]
 8005236:	f000 f811 	bl	800525c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	68fa      	ldr	r2, [r7, #12]
 8005240:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	2220      	movs	r2, #32
 8005246:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	2200      	movs	r2, #0
 800524e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005252:	2300      	movs	r3, #0
}
 8005254:	4618      	mov	r0, r3
 8005256:	3710      	adds	r7, #16
 8005258:	46bd      	mov	sp, r7
 800525a:	bd80      	pop	{r7, pc}

0800525c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800525c:	b480      	push	{r7}
 800525e:	b085      	sub	sp, #20
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005268:	2b00      	cmp	r3, #0
 800526a:	d108      	bne.n	800527e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2201      	movs	r2, #1
 8005270:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2201      	movs	r2, #1
 8005278:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800527c:	e031      	b.n	80052e2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800527e:	2308      	movs	r3, #8
 8005280:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005282:	2308      	movs	r3, #8
 8005284:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	689b      	ldr	r3, [r3, #8]
 800528c:	0e5b      	lsrs	r3, r3, #25
 800528e:	b2db      	uxtb	r3, r3
 8005290:	f003 0307 	and.w	r3, r3, #7
 8005294:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	689b      	ldr	r3, [r3, #8]
 800529c:	0f5b      	lsrs	r3, r3, #29
 800529e:	b2db      	uxtb	r3, r3
 80052a0:	f003 0307 	and.w	r3, r3, #7
 80052a4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80052a6:	7bbb      	ldrb	r3, [r7, #14]
 80052a8:	7b3a      	ldrb	r2, [r7, #12]
 80052aa:	4910      	ldr	r1, [pc, #64]	@ (80052ec <UARTEx_SetNbDataToProcess+0x90>)
 80052ac:	5c8a      	ldrb	r2, [r1, r2]
 80052ae:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80052b2:	7b3a      	ldrb	r2, [r7, #12]
 80052b4:	490e      	ldr	r1, [pc, #56]	@ (80052f0 <UARTEx_SetNbDataToProcess+0x94>)
 80052b6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80052b8:	fb93 f3f2 	sdiv	r3, r3, r2
 80052bc:	b29a      	uxth	r2, r3
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80052c4:	7bfb      	ldrb	r3, [r7, #15]
 80052c6:	7b7a      	ldrb	r2, [r7, #13]
 80052c8:	4908      	ldr	r1, [pc, #32]	@ (80052ec <UARTEx_SetNbDataToProcess+0x90>)
 80052ca:	5c8a      	ldrb	r2, [r1, r2]
 80052cc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80052d0:	7b7a      	ldrb	r2, [r7, #13]
 80052d2:	4907      	ldr	r1, [pc, #28]	@ (80052f0 <UARTEx_SetNbDataToProcess+0x94>)
 80052d4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80052d6:	fb93 f3f2 	sdiv	r3, r3, r2
 80052da:	b29a      	uxth	r2, r3
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80052e2:	bf00      	nop
 80052e4:	3714      	adds	r7, #20
 80052e6:	46bd      	mov	sp, r7
 80052e8:	bc80      	pop	{r7}
 80052ea:	4770      	bx	lr
 80052ec:	08007e90 	.word	0x08007e90
 80052f0:	08007e98 	.word	0x08007e98

080052f4 <__cvt>:
 80052f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80052f8:	b088      	sub	sp, #32
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	461d      	mov	r5, r3
 80052fe:	4614      	mov	r4, r2
 8005300:	bfbc      	itt	lt
 8005302:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8005306:	4614      	movlt	r4, r2
 8005308:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800530a:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 800530c:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8005310:	bfb6      	itet	lt
 8005312:	461d      	movlt	r5, r3
 8005314:	2300      	movge	r3, #0
 8005316:	232d      	movlt	r3, #45	@ 0x2d
 8005318:	7013      	strb	r3, [r2, #0]
 800531a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800531c:	f023 0820 	bic.w	r8, r3, #32
 8005320:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005324:	d005      	beq.n	8005332 <__cvt+0x3e>
 8005326:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800532a:	d100      	bne.n	800532e <__cvt+0x3a>
 800532c:	3601      	adds	r6, #1
 800532e:	2302      	movs	r3, #2
 8005330:	e000      	b.n	8005334 <__cvt+0x40>
 8005332:	2303      	movs	r3, #3
 8005334:	aa07      	add	r2, sp, #28
 8005336:	9204      	str	r2, [sp, #16]
 8005338:	aa06      	add	r2, sp, #24
 800533a:	e9cd a202 	strd	sl, r2, [sp, #8]
 800533e:	e9cd 3600 	strd	r3, r6, [sp]
 8005342:	4622      	mov	r2, r4
 8005344:	462b      	mov	r3, r5
 8005346:	f000 ff3f 	bl	80061c8 <_dtoa_r>
 800534a:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800534e:	4607      	mov	r7, r0
 8005350:	d119      	bne.n	8005386 <__cvt+0x92>
 8005352:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8005354:	07db      	lsls	r3, r3, #31
 8005356:	d50e      	bpl.n	8005376 <__cvt+0x82>
 8005358:	eb00 0906 	add.w	r9, r0, r6
 800535c:	2200      	movs	r2, #0
 800535e:	2300      	movs	r3, #0
 8005360:	4620      	mov	r0, r4
 8005362:	4629      	mov	r1, r5
 8005364:	f7fb fb88 	bl	8000a78 <__aeabi_dcmpeq>
 8005368:	b108      	cbz	r0, 800536e <__cvt+0x7a>
 800536a:	f8cd 901c 	str.w	r9, [sp, #28]
 800536e:	2230      	movs	r2, #48	@ 0x30
 8005370:	9b07      	ldr	r3, [sp, #28]
 8005372:	454b      	cmp	r3, r9
 8005374:	d31e      	bcc.n	80053b4 <__cvt+0xc0>
 8005376:	9b07      	ldr	r3, [sp, #28]
 8005378:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800537a:	1bdb      	subs	r3, r3, r7
 800537c:	4638      	mov	r0, r7
 800537e:	6013      	str	r3, [r2, #0]
 8005380:	b008      	add	sp, #32
 8005382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005386:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800538a:	eb00 0906 	add.w	r9, r0, r6
 800538e:	d1e5      	bne.n	800535c <__cvt+0x68>
 8005390:	7803      	ldrb	r3, [r0, #0]
 8005392:	2b30      	cmp	r3, #48	@ 0x30
 8005394:	d10a      	bne.n	80053ac <__cvt+0xb8>
 8005396:	2200      	movs	r2, #0
 8005398:	2300      	movs	r3, #0
 800539a:	4620      	mov	r0, r4
 800539c:	4629      	mov	r1, r5
 800539e:	f7fb fb6b 	bl	8000a78 <__aeabi_dcmpeq>
 80053a2:	b918      	cbnz	r0, 80053ac <__cvt+0xb8>
 80053a4:	f1c6 0601 	rsb	r6, r6, #1
 80053a8:	f8ca 6000 	str.w	r6, [sl]
 80053ac:	f8da 3000 	ldr.w	r3, [sl]
 80053b0:	4499      	add	r9, r3
 80053b2:	e7d3      	b.n	800535c <__cvt+0x68>
 80053b4:	1c59      	adds	r1, r3, #1
 80053b6:	9107      	str	r1, [sp, #28]
 80053b8:	701a      	strb	r2, [r3, #0]
 80053ba:	e7d9      	b.n	8005370 <__cvt+0x7c>

080053bc <__exponent>:
 80053bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80053be:	2900      	cmp	r1, #0
 80053c0:	bfba      	itte	lt
 80053c2:	4249      	neglt	r1, r1
 80053c4:	232d      	movlt	r3, #45	@ 0x2d
 80053c6:	232b      	movge	r3, #43	@ 0x2b
 80053c8:	2909      	cmp	r1, #9
 80053ca:	7002      	strb	r2, [r0, #0]
 80053cc:	7043      	strb	r3, [r0, #1]
 80053ce:	dd29      	ble.n	8005424 <__exponent+0x68>
 80053d0:	f10d 0307 	add.w	r3, sp, #7
 80053d4:	461d      	mov	r5, r3
 80053d6:	270a      	movs	r7, #10
 80053d8:	461a      	mov	r2, r3
 80053da:	fbb1 f6f7 	udiv	r6, r1, r7
 80053de:	fb07 1416 	mls	r4, r7, r6, r1
 80053e2:	3430      	adds	r4, #48	@ 0x30
 80053e4:	f802 4c01 	strb.w	r4, [r2, #-1]
 80053e8:	460c      	mov	r4, r1
 80053ea:	2c63      	cmp	r4, #99	@ 0x63
 80053ec:	f103 33ff 	add.w	r3, r3, #4294967295
 80053f0:	4631      	mov	r1, r6
 80053f2:	dcf1      	bgt.n	80053d8 <__exponent+0x1c>
 80053f4:	3130      	adds	r1, #48	@ 0x30
 80053f6:	1e94      	subs	r4, r2, #2
 80053f8:	f803 1c01 	strb.w	r1, [r3, #-1]
 80053fc:	1c41      	adds	r1, r0, #1
 80053fe:	4623      	mov	r3, r4
 8005400:	42ab      	cmp	r3, r5
 8005402:	d30a      	bcc.n	800541a <__exponent+0x5e>
 8005404:	f10d 0309 	add.w	r3, sp, #9
 8005408:	1a9b      	subs	r3, r3, r2
 800540a:	42ac      	cmp	r4, r5
 800540c:	bf88      	it	hi
 800540e:	2300      	movhi	r3, #0
 8005410:	3302      	adds	r3, #2
 8005412:	4403      	add	r3, r0
 8005414:	1a18      	subs	r0, r3, r0
 8005416:	b003      	add	sp, #12
 8005418:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800541a:	f813 6b01 	ldrb.w	r6, [r3], #1
 800541e:	f801 6f01 	strb.w	r6, [r1, #1]!
 8005422:	e7ed      	b.n	8005400 <__exponent+0x44>
 8005424:	2330      	movs	r3, #48	@ 0x30
 8005426:	3130      	adds	r1, #48	@ 0x30
 8005428:	7083      	strb	r3, [r0, #2]
 800542a:	70c1      	strb	r1, [r0, #3]
 800542c:	1d03      	adds	r3, r0, #4
 800542e:	e7f1      	b.n	8005414 <__exponent+0x58>

08005430 <_printf_float>:
 8005430:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005434:	b091      	sub	sp, #68	@ 0x44
 8005436:	460c      	mov	r4, r1
 8005438:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 800543c:	4616      	mov	r6, r2
 800543e:	461f      	mov	r7, r3
 8005440:	4605      	mov	r5, r0
 8005442:	f000 fdbf 	bl	8005fc4 <_localeconv_r>
 8005446:	6803      	ldr	r3, [r0, #0]
 8005448:	9308      	str	r3, [sp, #32]
 800544a:	4618      	mov	r0, r3
 800544c:	f7fa fee8 	bl	8000220 <strlen>
 8005450:	2300      	movs	r3, #0
 8005452:	930e      	str	r3, [sp, #56]	@ 0x38
 8005454:	f8d8 3000 	ldr.w	r3, [r8]
 8005458:	9009      	str	r0, [sp, #36]	@ 0x24
 800545a:	3307      	adds	r3, #7
 800545c:	f023 0307 	bic.w	r3, r3, #7
 8005460:	f103 0208 	add.w	r2, r3, #8
 8005464:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005468:	f8d4 b000 	ldr.w	fp, [r4]
 800546c:	f8c8 2000 	str.w	r2, [r8]
 8005470:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005474:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8005478:	930b      	str	r3, [sp, #44]	@ 0x2c
 800547a:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800547e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8005482:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8005486:	4b9d      	ldr	r3, [pc, #628]	@ (80056fc <_printf_float+0x2cc>)
 8005488:	f04f 32ff 	mov.w	r2, #4294967295
 800548c:	f7fb fb26 	bl	8000adc <__aeabi_dcmpun>
 8005490:	bb70      	cbnz	r0, 80054f0 <_printf_float+0xc0>
 8005492:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8005496:	4b99      	ldr	r3, [pc, #612]	@ (80056fc <_printf_float+0x2cc>)
 8005498:	f04f 32ff 	mov.w	r2, #4294967295
 800549c:	f7fb fb00 	bl	8000aa0 <__aeabi_dcmple>
 80054a0:	bb30      	cbnz	r0, 80054f0 <_printf_float+0xc0>
 80054a2:	2200      	movs	r2, #0
 80054a4:	2300      	movs	r3, #0
 80054a6:	4640      	mov	r0, r8
 80054a8:	4649      	mov	r1, r9
 80054aa:	f7fb faef 	bl	8000a8c <__aeabi_dcmplt>
 80054ae:	b110      	cbz	r0, 80054b6 <_printf_float+0x86>
 80054b0:	232d      	movs	r3, #45	@ 0x2d
 80054b2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80054b6:	4a92      	ldr	r2, [pc, #584]	@ (8005700 <_printf_float+0x2d0>)
 80054b8:	4b92      	ldr	r3, [pc, #584]	@ (8005704 <_printf_float+0x2d4>)
 80054ba:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80054be:	bf8c      	ite	hi
 80054c0:	4690      	movhi	r8, r2
 80054c2:	4698      	movls	r8, r3
 80054c4:	2303      	movs	r3, #3
 80054c6:	6123      	str	r3, [r4, #16]
 80054c8:	f02b 0304 	bic.w	r3, fp, #4
 80054cc:	6023      	str	r3, [r4, #0]
 80054ce:	f04f 0900 	mov.w	r9, #0
 80054d2:	9700      	str	r7, [sp, #0]
 80054d4:	4633      	mov	r3, r6
 80054d6:	aa0f      	add	r2, sp, #60	@ 0x3c
 80054d8:	4621      	mov	r1, r4
 80054da:	4628      	mov	r0, r5
 80054dc:	f000 f9d4 	bl	8005888 <_printf_common>
 80054e0:	3001      	adds	r0, #1
 80054e2:	f040 808f 	bne.w	8005604 <_printf_float+0x1d4>
 80054e6:	f04f 30ff 	mov.w	r0, #4294967295
 80054ea:	b011      	add	sp, #68	@ 0x44
 80054ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80054f0:	4642      	mov	r2, r8
 80054f2:	464b      	mov	r3, r9
 80054f4:	4640      	mov	r0, r8
 80054f6:	4649      	mov	r1, r9
 80054f8:	f7fb faf0 	bl	8000adc <__aeabi_dcmpun>
 80054fc:	b140      	cbz	r0, 8005510 <_printf_float+0xe0>
 80054fe:	464b      	mov	r3, r9
 8005500:	2b00      	cmp	r3, #0
 8005502:	bfbc      	itt	lt
 8005504:	232d      	movlt	r3, #45	@ 0x2d
 8005506:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800550a:	4a7f      	ldr	r2, [pc, #508]	@ (8005708 <_printf_float+0x2d8>)
 800550c:	4b7f      	ldr	r3, [pc, #508]	@ (800570c <_printf_float+0x2dc>)
 800550e:	e7d4      	b.n	80054ba <_printf_float+0x8a>
 8005510:	6863      	ldr	r3, [r4, #4]
 8005512:	1c5a      	adds	r2, r3, #1
 8005514:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8005518:	d13f      	bne.n	800559a <_printf_float+0x16a>
 800551a:	2306      	movs	r3, #6
 800551c:	6063      	str	r3, [r4, #4]
 800551e:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8005522:	2200      	movs	r2, #0
 8005524:	6023      	str	r3, [r4, #0]
 8005526:	9206      	str	r2, [sp, #24]
 8005528:	aa0e      	add	r2, sp, #56	@ 0x38
 800552a:	e9cd a204 	strd	sl, r2, [sp, #16]
 800552e:	aa0d      	add	r2, sp, #52	@ 0x34
 8005530:	9203      	str	r2, [sp, #12]
 8005532:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8005536:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800553a:	6863      	ldr	r3, [r4, #4]
 800553c:	9300      	str	r3, [sp, #0]
 800553e:	4642      	mov	r2, r8
 8005540:	464b      	mov	r3, r9
 8005542:	4628      	mov	r0, r5
 8005544:	910a      	str	r1, [sp, #40]	@ 0x28
 8005546:	f7ff fed5 	bl	80052f4 <__cvt>
 800554a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800554c:	2947      	cmp	r1, #71	@ 0x47
 800554e:	4680      	mov	r8, r0
 8005550:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8005552:	d128      	bne.n	80055a6 <_printf_float+0x176>
 8005554:	1cc8      	adds	r0, r1, #3
 8005556:	db02      	blt.n	800555e <_printf_float+0x12e>
 8005558:	6863      	ldr	r3, [r4, #4]
 800555a:	4299      	cmp	r1, r3
 800555c:	dd40      	ble.n	80055e0 <_printf_float+0x1b0>
 800555e:	f1aa 0a02 	sub.w	sl, sl, #2
 8005562:	fa5f fa8a 	uxtb.w	sl, sl
 8005566:	3901      	subs	r1, #1
 8005568:	4652      	mov	r2, sl
 800556a:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800556e:	910d      	str	r1, [sp, #52]	@ 0x34
 8005570:	f7ff ff24 	bl	80053bc <__exponent>
 8005574:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005576:	1813      	adds	r3, r2, r0
 8005578:	2a01      	cmp	r2, #1
 800557a:	4681      	mov	r9, r0
 800557c:	6123      	str	r3, [r4, #16]
 800557e:	dc02      	bgt.n	8005586 <_printf_float+0x156>
 8005580:	6822      	ldr	r2, [r4, #0]
 8005582:	07d2      	lsls	r2, r2, #31
 8005584:	d501      	bpl.n	800558a <_printf_float+0x15a>
 8005586:	3301      	adds	r3, #1
 8005588:	6123      	str	r3, [r4, #16]
 800558a:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 800558e:	2b00      	cmp	r3, #0
 8005590:	d09f      	beq.n	80054d2 <_printf_float+0xa2>
 8005592:	232d      	movs	r3, #45	@ 0x2d
 8005594:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005598:	e79b      	b.n	80054d2 <_printf_float+0xa2>
 800559a:	2947      	cmp	r1, #71	@ 0x47
 800559c:	d1bf      	bne.n	800551e <_printf_float+0xee>
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d1bd      	bne.n	800551e <_printf_float+0xee>
 80055a2:	2301      	movs	r3, #1
 80055a4:	e7ba      	b.n	800551c <_printf_float+0xec>
 80055a6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80055aa:	d9dc      	bls.n	8005566 <_printf_float+0x136>
 80055ac:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80055b0:	d118      	bne.n	80055e4 <_printf_float+0x1b4>
 80055b2:	2900      	cmp	r1, #0
 80055b4:	6863      	ldr	r3, [r4, #4]
 80055b6:	dd0b      	ble.n	80055d0 <_printf_float+0x1a0>
 80055b8:	6121      	str	r1, [r4, #16]
 80055ba:	b913      	cbnz	r3, 80055c2 <_printf_float+0x192>
 80055bc:	6822      	ldr	r2, [r4, #0]
 80055be:	07d0      	lsls	r0, r2, #31
 80055c0:	d502      	bpl.n	80055c8 <_printf_float+0x198>
 80055c2:	3301      	adds	r3, #1
 80055c4:	440b      	add	r3, r1
 80055c6:	6123      	str	r3, [r4, #16]
 80055c8:	65a1      	str	r1, [r4, #88]	@ 0x58
 80055ca:	f04f 0900 	mov.w	r9, #0
 80055ce:	e7dc      	b.n	800558a <_printf_float+0x15a>
 80055d0:	b913      	cbnz	r3, 80055d8 <_printf_float+0x1a8>
 80055d2:	6822      	ldr	r2, [r4, #0]
 80055d4:	07d2      	lsls	r2, r2, #31
 80055d6:	d501      	bpl.n	80055dc <_printf_float+0x1ac>
 80055d8:	3302      	adds	r3, #2
 80055da:	e7f4      	b.n	80055c6 <_printf_float+0x196>
 80055dc:	2301      	movs	r3, #1
 80055de:	e7f2      	b.n	80055c6 <_printf_float+0x196>
 80055e0:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80055e4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80055e6:	4299      	cmp	r1, r3
 80055e8:	db05      	blt.n	80055f6 <_printf_float+0x1c6>
 80055ea:	6823      	ldr	r3, [r4, #0]
 80055ec:	6121      	str	r1, [r4, #16]
 80055ee:	07d8      	lsls	r0, r3, #31
 80055f0:	d5ea      	bpl.n	80055c8 <_printf_float+0x198>
 80055f2:	1c4b      	adds	r3, r1, #1
 80055f4:	e7e7      	b.n	80055c6 <_printf_float+0x196>
 80055f6:	2900      	cmp	r1, #0
 80055f8:	bfd4      	ite	le
 80055fa:	f1c1 0202 	rsble	r2, r1, #2
 80055fe:	2201      	movgt	r2, #1
 8005600:	4413      	add	r3, r2
 8005602:	e7e0      	b.n	80055c6 <_printf_float+0x196>
 8005604:	6823      	ldr	r3, [r4, #0]
 8005606:	055a      	lsls	r2, r3, #21
 8005608:	d407      	bmi.n	800561a <_printf_float+0x1ea>
 800560a:	6923      	ldr	r3, [r4, #16]
 800560c:	4642      	mov	r2, r8
 800560e:	4631      	mov	r1, r6
 8005610:	4628      	mov	r0, r5
 8005612:	47b8      	blx	r7
 8005614:	3001      	adds	r0, #1
 8005616:	d12b      	bne.n	8005670 <_printf_float+0x240>
 8005618:	e765      	b.n	80054e6 <_printf_float+0xb6>
 800561a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800561e:	f240 80dd 	bls.w	80057dc <_printf_float+0x3ac>
 8005622:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005626:	2200      	movs	r2, #0
 8005628:	2300      	movs	r3, #0
 800562a:	f7fb fa25 	bl	8000a78 <__aeabi_dcmpeq>
 800562e:	2800      	cmp	r0, #0
 8005630:	d033      	beq.n	800569a <_printf_float+0x26a>
 8005632:	4a37      	ldr	r2, [pc, #220]	@ (8005710 <_printf_float+0x2e0>)
 8005634:	2301      	movs	r3, #1
 8005636:	4631      	mov	r1, r6
 8005638:	4628      	mov	r0, r5
 800563a:	47b8      	blx	r7
 800563c:	3001      	adds	r0, #1
 800563e:	f43f af52 	beq.w	80054e6 <_printf_float+0xb6>
 8005642:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8005646:	4543      	cmp	r3, r8
 8005648:	db02      	blt.n	8005650 <_printf_float+0x220>
 800564a:	6823      	ldr	r3, [r4, #0]
 800564c:	07d8      	lsls	r0, r3, #31
 800564e:	d50f      	bpl.n	8005670 <_printf_float+0x240>
 8005650:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005654:	4631      	mov	r1, r6
 8005656:	4628      	mov	r0, r5
 8005658:	47b8      	blx	r7
 800565a:	3001      	adds	r0, #1
 800565c:	f43f af43 	beq.w	80054e6 <_printf_float+0xb6>
 8005660:	f04f 0900 	mov.w	r9, #0
 8005664:	f108 38ff 	add.w	r8, r8, #4294967295
 8005668:	f104 0a1a 	add.w	sl, r4, #26
 800566c:	45c8      	cmp	r8, r9
 800566e:	dc09      	bgt.n	8005684 <_printf_float+0x254>
 8005670:	6823      	ldr	r3, [r4, #0]
 8005672:	079b      	lsls	r3, r3, #30
 8005674:	f100 8103 	bmi.w	800587e <_printf_float+0x44e>
 8005678:	68e0      	ldr	r0, [r4, #12]
 800567a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800567c:	4298      	cmp	r0, r3
 800567e:	bfb8      	it	lt
 8005680:	4618      	movlt	r0, r3
 8005682:	e732      	b.n	80054ea <_printf_float+0xba>
 8005684:	2301      	movs	r3, #1
 8005686:	4652      	mov	r2, sl
 8005688:	4631      	mov	r1, r6
 800568a:	4628      	mov	r0, r5
 800568c:	47b8      	blx	r7
 800568e:	3001      	adds	r0, #1
 8005690:	f43f af29 	beq.w	80054e6 <_printf_float+0xb6>
 8005694:	f109 0901 	add.w	r9, r9, #1
 8005698:	e7e8      	b.n	800566c <_printf_float+0x23c>
 800569a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800569c:	2b00      	cmp	r3, #0
 800569e:	dc39      	bgt.n	8005714 <_printf_float+0x2e4>
 80056a0:	4a1b      	ldr	r2, [pc, #108]	@ (8005710 <_printf_float+0x2e0>)
 80056a2:	2301      	movs	r3, #1
 80056a4:	4631      	mov	r1, r6
 80056a6:	4628      	mov	r0, r5
 80056a8:	47b8      	blx	r7
 80056aa:	3001      	adds	r0, #1
 80056ac:	f43f af1b 	beq.w	80054e6 <_printf_float+0xb6>
 80056b0:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 80056b4:	ea59 0303 	orrs.w	r3, r9, r3
 80056b8:	d102      	bne.n	80056c0 <_printf_float+0x290>
 80056ba:	6823      	ldr	r3, [r4, #0]
 80056bc:	07d9      	lsls	r1, r3, #31
 80056be:	d5d7      	bpl.n	8005670 <_printf_float+0x240>
 80056c0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80056c4:	4631      	mov	r1, r6
 80056c6:	4628      	mov	r0, r5
 80056c8:	47b8      	blx	r7
 80056ca:	3001      	adds	r0, #1
 80056cc:	f43f af0b 	beq.w	80054e6 <_printf_float+0xb6>
 80056d0:	f04f 0a00 	mov.w	sl, #0
 80056d4:	f104 0b1a 	add.w	fp, r4, #26
 80056d8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80056da:	425b      	negs	r3, r3
 80056dc:	4553      	cmp	r3, sl
 80056de:	dc01      	bgt.n	80056e4 <_printf_float+0x2b4>
 80056e0:	464b      	mov	r3, r9
 80056e2:	e793      	b.n	800560c <_printf_float+0x1dc>
 80056e4:	2301      	movs	r3, #1
 80056e6:	465a      	mov	r2, fp
 80056e8:	4631      	mov	r1, r6
 80056ea:	4628      	mov	r0, r5
 80056ec:	47b8      	blx	r7
 80056ee:	3001      	adds	r0, #1
 80056f0:	f43f aef9 	beq.w	80054e6 <_printf_float+0xb6>
 80056f4:	f10a 0a01 	add.w	sl, sl, #1
 80056f8:	e7ee      	b.n	80056d8 <_printf_float+0x2a8>
 80056fa:	bf00      	nop
 80056fc:	7fefffff 	.word	0x7fefffff
 8005700:	08007ea4 	.word	0x08007ea4
 8005704:	08007ea0 	.word	0x08007ea0
 8005708:	08007eac 	.word	0x08007eac
 800570c:	08007ea8 	.word	0x08007ea8
 8005710:	08007eb0 	.word	0x08007eb0
 8005714:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005716:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800571a:	4553      	cmp	r3, sl
 800571c:	bfa8      	it	ge
 800571e:	4653      	movge	r3, sl
 8005720:	2b00      	cmp	r3, #0
 8005722:	4699      	mov	r9, r3
 8005724:	dc36      	bgt.n	8005794 <_printf_float+0x364>
 8005726:	f04f 0b00 	mov.w	fp, #0
 800572a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800572e:	f104 021a 	add.w	r2, r4, #26
 8005732:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005734:	930a      	str	r3, [sp, #40]	@ 0x28
 8005736:	eba3 0309 	sub.w	r3, r3, r9
 800573a:	455b      	cmp	r3, fp
 800573c:	dc31      	bgt.n	80057a2 <_printf_float+0x372>
 800573e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005740:	459a      	cmp	sl, r3
 8005742:	dc3a      	bgt.n	80057ba <_printf_float+0x38a>
 8005744:	6823      	ldr	r3, [r4, #0]
 8005746:	07da      	lsls	r2, r3, #31
 8005748:	d437      	bmi.n	80057ba <_printf_float+0x38a>
 800574a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800574c:	ebaa 0903 	sub.w	r9, sl, r3
 8005750:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005752:	ebaa 0303 	sub.w	r3, sl, r3
 8005756:	4599      	cmp	r9, r3
 8005758:	bfa8      	it	ge
 800575a:	4699      	movge	r9, r3
 800575c:	f1b9 0f00 	cmp.w	r9, #0
 8005760:	dc33      	bgt.n	80057ca <_printf_float+0x39a>
 8005762:	f04f 0800 	mov.w	r8, #0
 8005766:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800576a:	f104 0b1a 	add.w	fp, r4, #26
 800576e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005770:	ebaa 0303 	sub.w	r3, sl, r3
 8005774:	eba3 0309 	sub.w	r3, r3, r9
 8005778:	4543      	cmp	r3, r8
 800577a:	f77f af79 	ble.w	8005670 <_printf_float+0x240>
 800577e:	2301      	movs	r3, #1
 8005780:	465a      	mov	r2, fp
 8005782:	4631      	mov	r1, r6
 8005784:	4628      	mov	r0, r5
 8005786:	47b8      	blx	r7
 8005788:	3001      	adds	r0, #1
 800578a:	f43f aeac 	beq.w	80054e6 <_printf_float+0xb6>
 800578e:	f108 0801 	add.w	r8, r8, #1
 8005792:	e7ec      	b.n	800576e <_printf_float+0x33e>
 8005794:	4642      	mov	r2, r8
 8005796:	4631      	mov	r1, r6
 8005798:	4628      	mov	r0, r5
 800579a:	47b8      	blx	r7
 800579c:	3001      	adds	r0, #1
 800579e:	d1c2      	bne.n	8005726 <_printf_float+0x2f6>
 80057a0:	e6a1      	b.n	80054e6 <_printf_float+0xb6>
 80057a2:	2301      	movs	r3, #1
 80057a4:	4631      	mov	r1, r6
 80057a6:	4628      	mov	r0, r5
 80057a8:	920a      	str	r2, [sp, #40]	@ 0x28
 80057aa:	47b8      	blx	r7
 80057ac:	3001      	adds	r0, #1
 80057ae:	f43f ae9a 	beq.w	80054e6 <_printf_float+0xb6>
 80057b2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80057b4:	f10b 0b01 	add.w	fp, fp, #1
 80057b8:	e7bb      	b.n	8005732 <_printf_float+0x302>
 80057ba:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80057be:	4631      	mov	r1, r6
 80057c0:	4628      	mov	r0, r5
 80057c2:	47b8      	blx	r7
 80057c4:	3001      	adds	r0, #1
 80057c6:	d1c0      	bne.n	800574a <_printf_float+0x31a>
 80057c8:	e68d      	b.n	80054e6 <_printf_float+0xb6>
 80057ca:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80057cc:	464b      	mov	r3, r9
 80057ce:	4442      	add	r2, r8
 80057d0:	4631      	mov	r1, r6
 80057d2:	4628      	mov	r0, r5
 80057d4:	47b8      	blx	r7
 80057d6:	3001      	adds	r0, #1
 80057d8:	d1c3      	bne.n	8005762 <_printf_float+0x332>
 80057da:	e684      	b.n	80054e6 <_printf_float+0xb6>
 80057dc:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80057e0:	f1ba 0f01 	cmp.w	sl, #1
 80057e4:	dc01      	bgt.n	80057ea <_printf_float+0x3ba>
 80057e6:	07db      	lsls	r3, r3, #31
 80057e8:	d536      	bpl.n	8005858 <_printf_float+0x428>
 80057ea:	2301      	movs	r3, #1
 80057ec:	4642      	mov	r2, r8
 80057ee:	4631      	mov	r1, r6
 80057f0:	4628      	mov	r0, r5
 80057f2:	47b8      	blx	r7
 80057f4:	3001      	adds	r0, #1
 80057f6:	f43f ae76 	beq.w	80054e6 <_printf_float+0xb6>
 80057fa:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80057fe:	4631      	mov	r1, r6
 8005800:	4628      	mov	r0, r5
 8005802:	47b8      	blx	r7
 8005804:	3001      	adds	r0, #1
 8005806:	f43f ae6e 	beq.w	80054e6 <_printf_float+0xb6>
 800580a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800580e:	2200      	movs	r2, #0
 8005810:	2300      	movs	r3, #0
 8005812:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005816:	f7fb f92f 	bl	8000a78 <__aeabi_dcmpeq>
 800581a:	b9c0      	cbnz	r0, 800584e <_printf_float+0x41e>
 800581c:	4653      	mov	r3, sl
 800581e:	f108 0201 	add.w	r2, r8, #1
 8005822:	4631      	mov	r1, r6
 8005824:	4628      	mov	r0, r5
 8005826:	47b8      	blx	r7
 8005828:	3001      	adds	r0, #1
 800582a:	d10c      	bne.n	8005846 <_printf_float+0x416>
 800582c:	e65b      	b.n	80054e6 <_printf_float+0xb6>
 800582e:	2301      	movs	r3, #1
 8005830:	465a      	mov	r2, fp
 8005832:	4631      	mov	r1, r6
 8005834:	4628      	mov	r0, r5
 8005836:	47b8      	blx	r7
 8005838:	3001      	adds	r0, #1
 800583a:	f43f ae54 	beq.w	80054e6 <_printf_float+0xb6>
 800583e:	f108 0801 	add.w	r8, r8, #1
 8005842:	45d0      	cmp	r8, sl
 8005844:	dbf3      	blt.n	800582e <_printf_float+0x3fe>
 8005846:	464b      	mov	r3, r9
 8005848:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800584c:	e6df      	b.n	800560e <_printf_float+0x1de>
 800584e:	f04f 0800 	mov.w	r8, #0
 8005852:	f104 0b1a 	add.w	fp, r4, #26
 8005856:	e7f4      	b.n	8005842 <_printf_float+0x412>
 8005858:	2301      	movs	r3, #1
 800585a:	4642      	mov	r2, r8
 800585c:	e7e1      	b.n	8005822 <_printf_float+0x3f2>
 800585e:	2301      	movs	r3, #1
 8005860:	464a      	mov	r2, r9
 8005862:	4631      	mov	r1, r6
 8005864:	4628      	mov	r0, r5
 8005866:	47b8      	blx	r7
 8005868:	3001      	adds	r0, #1
 800586a:	f43f ae3c 	beq.w	80054e6 <_printf_float+0xb6>
 800586e:	f108 0801 	add.w	r8, r8, #1
 8005872:	68e3      	ldr	r3, [r4, #12]
 8005874:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8005876:	1a5b      	subs	r3, r3, r1
 8005878:	4543      	cmp	r3, r8
 800587a:	dcf0      	bgt.n	800585e <_printf_float+0x42e>
 800587c:	e6fc      	b.n	8005678 <_printf_float+0x248>
 800587e:	f04f 0800 	mov.w	r8, #0
 8005882:	f104 0919 	add.w	r9, r4, #25
 8005886:	e7f4      	b.n	8005872 <_printf_float+0x442>

08005888 <_printf_common>:
 8005888:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800588c:	4616      	mov	r6, r2
 800588e:	4698      	mov	r8, r3
 8005890:	688a      	ldr	r2, [r1, #8]
 8005892:	690b      	ldr	r3, [r1, #16]
 8005894:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005898:	4293      	cmp	r3, r2
 800589a:	bfb8      	it	lt
 800589c:	4613      	movlt	r3, r2
 800589e:	6033      	str	r3, [r6, #0]
 80058a0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80058a4:	4607      	mov	r7, r0
 80058a6:	460c      	mov	r4, r1
 80058a8:	b10a      	cbz	r2, 80058ae <_printf_common+0x26>
 80058aa:	3301      	adds	r3, #1
 80058ac:	6033      	str	r3, [r6, #0]
 80058ae:	6823      	ldr	r3, [r4, #0]
 80058b0:	0699      	lsls	r1, r3, #26
 80058b2:	bf42      	ittt	mi
 80058b4:	6833      	ldrmi	r3, [r6, #0]
 80058b6:	3302      	addmi	r3, #2
 80058b8:	6033      	strmi	r3, [r6, #0]
 80058ba:	6825      	ldr	r5, [r4, #0]
 80058bc:	f015 0506 	ands.w	r5, r5, #6
 80058c0:	d106      	bne.n	80058d0 <_printf_common+0x48>
 80058c2:	f104 0a19 	add.w	sl, r4, #25
 80058c6:	68e3      	ldr	r3, [r4, #12]
 80058c8:	6832      	ldr	r2, [r6, #0]
 80058ca:	1a9b      	subs	r3, r3, r2
 80058cc:	42ab      	cmp	r3, r5
 80058ce:	dc26      	bgt.n	800591e <_printf_common+0x96>
 80058d0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80058d4:	6822      	ldr	r2, [r4, #0]
 80058d6:	3b00      	subs	r3, #0
 80058d8:	bf18      	it	ne
 80058da:	2301      	movne	r3, #1
 80058dc:	0692      	lsls	r2, r2, #26
 80058de:	d42b      	bmi.n	8005938 <_printf_common+0xb0>
 80058e0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80058e4:	4641      	mov	r1, r8
 80058e6:	4638      	mov	r0, r7
 80058e8:	47c8      	blx	r9
 80058ea:	3001      	adds	r0, #1
 80058ec:	d01e      	beq.n	800592c <_printf_common+0xa4>
 80058ee:	6823      	ldr	r3, [r4, #0]
 80058f0:	6922      	ldr	r2, [r4, #16]
 80058f2:	f003 0306 	and.w	r3, r3, #6
 80058f6:	2b04      	cmp	r3, #4
 80058f8:	bf02      	ittt	eq
 80058fa:	68e5      	ldreq	r5, [r4, #12]
 80058fc:	6833      	ldreq	r3, [r6, #0]
 80058fe:	1aed      	subeq	r5, r5, r3
 8005900:	68a3      	ldr	r3, [r4, #8]
 8005902:	bf0c      	ite	eq
 8005904:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005908:	2500      	movne	r5, #0
 800590a:	4293      	cmp	r3, r2
 800590c:	bfc4      	itt	gt
 800590e:	1a9b      	subgt	r3, r3, r2
 8005910:	18ed      	addgt	r5, r5, r3
 8005912:	2600      	movs	r6, #0
 8005914:	341a      	adds	r4, #26
 8005916:	42b5      	cmp	r5, r6
 8005918:	d11a      	bne.n	8005950 <_printf_common+0xc8>
 800591a:	2000      	movs	r0, #0
 800591c:	e008      	b.n	8005930 <_printf_common+0xa8>
 800591e:	2301      	movs	r3, #1
 8005920:	4652      	mov	r2, sl
 8005922:	4641      	mov	r1, r8
 8005924:	4638      	mov	r0, r7
 8005926:	47c8      	blx	r9
 8005928:	3001      	adds	r0, #1
 800592a:	d103      	bne.n	8005934 <_printf_common+0xac>
 800592c:	f04f 30ff 	mov.w	r0, #4294967295
 8005930:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005934:	3501      	adds	r5, #1
 8005936:	e7c6      	b.n	80058c6 <_printf_common+0x3e>
 8005938:	18e1      	adds	r1, r4, r3
 800593a:	1c5a      	adds	r2, r3, #1
 800593c:	2030      	movs	r0, #48	@ 0x30
 800593e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005942:	4422      	add	r2, r4
 8005944:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005948:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800594c:	3302      	adds	r3, #2
 800594e:	e7c7      	b.n	80058e0 <_printf_common+0x58>
 8005950:	2301      	movs	r3, #1
 8005952:	4622      	mov	r2, r4
 8005954:	4641      	mov	r1, r8
 8005956:	4638      	mov	r0, r7
 8005958:	47c8      	blx	r9
 800595a:	3001      	adds	r0, #1
 800595c:	d0e6      	beq.n	800592c <_printf_common+0xa4>
 800595e:	3601      	adds	r6, #1
 8005960:	e7d9      	b.n	8005916 <_printf_common+0x8e>
	...

08005964 <_printf_i>:
 8005964:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005968:	7e0f      	ldrb	r7, [r1, #24]
 800596a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800596c:	2f78      	cmp	r7, #120	@ 0x78
 800596e:	4691      	mov	r9, r2
 8005970:	4680      	mov	r8, r0
 8005972:	460c      	mov	r4, r1
 8005974:	469a      	mov	sl, r3
 8005976:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800597a:	d807      	bhi.n	800598c <_printf_i+0x28>
 800597c:	2f62      	cmp	r7, #98	@ 0x62
 800597e:	d80a      	bhi.n	8005996 <_printf_i+0x32>
 8005980:	2f00      	cmp	r7, #0
 8005982:	f000 80d1 	beq.w	8005b28 <_printf_i+0x1c4>
 8005986:	2f58      	cmp	r7, #88	@ 0x58
 8005988:	f000 80b8 	beq.w	8005afc <_printf_i+0x198>
 800598c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005990:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005994:	e03a      	b.n	8005a0c <_printf_i+0xa8>
 8005996:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800599a:	2b15      	cmp	r3, #21
 800599c:	d8f6      	bhi.n	800598c <_printf_i+0x28>
 800599e:	a101      	add	r1, pc, #4	@ (adr r1, 80059a4 <_printf_i+0x40>)
 80059a0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80059a4:	080059fd 	.word	0x080059fd
 80059a8:	08005a11 	.word	0x08005a11
 80059ac:	0800598d 	.word	0x0800598d
 80059b0:	0800598d 	.word	0x0800598d
 80059b4:	0800598d 	.word	0x0800598d
 80059b8:	0800598d 	.word	0x0800598d
 80059bc:	08005a11 	.word	0x08005a11
 80059c0:	0800598d 	.word	0x0800598d
 80059c4:	0800598d 	.word	0x0800598d
 80059c8:	0800598d 	.word	0x0800598d
 80059cc:	0800598d 	.word	0x0800598d
 80059d0:	08005b0f 	.word	0x08005b0f
 80059d4:	08005a3b 	.word	0x08005a3b
 80059d8:	08005ac9 	.word	0x08005ac9
 80059dc:	0800598d 	.word	0x0800598d
 80059e0:	0800598d 	.word	0x0800598d
 80059e4:	08005b31 	.word	0x08005b31
 80059e8:	0800598d 	.word	0x0800598d
 80059ec:	08005a3b 	.word	0x08005a3b
 80059f0:	0800598d 	.word	0x0800598d
 80059f4:	0800598d 	.word	0x0800598d
 80059f8:	08005ad1 	.word	0x08005ad1
 80059fc:	6833      	ldr	r3, [r6, #0]
 80059fe:	1d1a      	adds	r2, r3, #4
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	6032      	str	r2, [r6, #0]
 8005a04:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005a08:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005a0c:	2301      	movs	r3, #1
 8005a0e:	e09c      	b.n	8005b4a <_printf_i+0x1e6>
 8005a10:	6833      	ldr	r3, [r6, #0]
 8005a12:	6820      	ldr	r0, [r4, #0]
 8005a14:	1d19      	adds	r1, r3, #4
 8005a16:	6031      	str	r1, [r6, #0]
 8005a18:	0606      	lsls	r6, r0, #24
 8005a1a:	d501      	bpl.n	8005a20 <_printf_i+0xbc>
 8005a1c:	681d      	ldr	r5, [r3, #0]
 8005a1e:	e003      	b.n	8005a28 <_printf_i+0xc4>
 8005a20:	0645      	lsls	r5, r0, #25
 8005a22:	d5fb      	bpl.n	8005a1c <_printf_i+0xb8>
 8005a24:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005a28:	2d00      	cmp	r5, #0
 8005a2a:	da03      	bge.n	8005a34 <_printf_i+0xd0>
 8005a2c:	232d      	movs	r3, #45	@ 0x2d
 8005a2e:	426d      	negs	r5, r5
 8005a30:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005a34:	4858      	ldr	r0, [pc, #352]	@ (8005b98 <_printf_i+0x234>)
 8005a36:	230a      	movs	r3, #10
 8005a38:	e011      	b.n	8005a5e <_printf_i+0xfa>
 8005a3a:	6821      	ldr	r1, [r4, #0]
 8005a3c:	6833      	ldr	r3, [r6, #0]
 8005a3e:	0608      	lsls	r0, r1, #24
 8005a40:	f853 5b04 	ldr.w	r5, [r3], #4
 8005a44:	d402      	bmi.n	8005a4c <_printf_i+0xe8>
 8005a46:	0649      	lsls	r1, r1, #25
 8005a48:	bf48      	it	mi
 8005a4a:	b2ad      	uxthmi	r5, r5
 8005a4c:	2f6f      	cmp	r7, #111	@ 0x6f
 8005a4e:	4852      	ldr	r0, [pc, #328]	@ (8005b98 <_printf_i+0x234>)
 8005a50:	6033      	str	r3, [r6, #0]
 8005a52:	bf14      	ite	ne
 8005a54:	230a      	movne	r3, #10
 8005a56:	2308      	moveq	r3, #8
 8005a58:	2100      	movs	r1, #0
 8005a5a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005a5e:	6866      	ldr	r6, [r4, #4]
 8005a60:	60a6      	str	r6, [r4, #8]
 8005a62:	2e00      	cmp	r6, #0
 8005a64:	db05      	blt.n	8005a72 <_printf_i+0x10e>
 8005a66:	6821      	ldr	r1, [r4, #0]
 8005a68:	432e      	orrs	r6, r5
 8005a6a:	f021 0104 	bic.w	r1, r1, #4
 8005a6e:	6021      	str	r1, [r4, #0]
 8005a70:	d04b      	beq.n	8005b0a <_printf_i+0x1a6>
 8005a72:	4616      	mov	r6, r2
 8005a74:	fbb5 f1f3 	udiv	r1, r5, r3
 8005a78:	fb03 5711 	mls	r7, r3, r1, r5
 8005a7c:	5dc7      	ldrb	r7, [r0, r7]
 8005a7e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005a82:	462f      	mov	r7, r5
 8005a84:	42bb      	cmp	r3, r7
 8005a86:	460d      	mov	r5, r1
 8005a88:	d9f4      	bls.n	8005a74 <_printf_i+0x110>
 8005a8a:	2b08      	cmp	r3, #8
 8005a8c:	d10b      	bne.n	8005aa6 <_printf_i+0x142>
 8005a8e:	6823      	ldr	r3, [r4, #0]
 8005a90:	07df      	lsls	r7, r3, #31
 8005a92:	d508      	bpl.n	8005aa6 <_printf_i+0x142>
 8005a94:	6923      	ldr	r3, [r4, #16]
 8005a96:	6861      	ldr	r1, [r4, #4]
 8005a98:	4299      	cmp	r1, r3
 8005a9a:	bfde      	ittt	le
 8005a9c:	2330      	movle	r3, #48	@ 0x30
 8005a9e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005aa2:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005aa6:	1b92      	subs	r2, r2, r6
 8005aa8:	6122      	str	r2, [r4, #16]
 8005aaa:	f8cd a000 	str.w	sl, [sp]
 8005aae:	464b      	mov	r3, r9
 8005ab0:	aa03      	add	r2, sp, #12
 8005ab2:	4621      	mov	r1, r4
 8005ab4:	4640      	mov	r0, r8
 8005ab6:	f7ff fee7 	bl	8005888 <_printf_common>
 8005aba:	3001      	adds	r0, #1
 8005abc:	d14a      	bne.n	8005b54 <_printf_i+0x1f0>
 8005abe:	f04f 30ff 	mov.w	r0, #4294967295
 8005ac2:	b004      	add	sp, #16
 8005ac4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ac8:	6823      	ldr	r3, [r4, #0]
 8005aca:	f043 0320 	orr.w	r3, r3, #32
 8005ace:	6023      	str	r3, [r4, #0]
 8005ad0:	4832      	ldr	r0, [pc, #200]	@ (8005b9c <_printf_i+0x238>)
 8005ad2:	2778      	movs	r7, #120	@ 0x78
 8005ad4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005ad8:	6823      	ldr	r3, [r4, #0]
 8005ada:	6831      	ldr	r1, [r6, #0]
 8005adc:	061f      	lsls	r7, r3, #24
 8005ade:	f851 5b04 	ldr.w	r5, [r1], #4
 8005ae2:	d402      	bmi.n	8005aea <_printf_i+0x186>
 8005ae4:	065f      	lsls	r7, r3, #25
 8005ae6:	bf48      	it	mi
 8005ae8:	b2ad      	uxthmi	r5, r5
 8005aea:	6031      	str	r1, [r6, #0]
 8005aec:	07d9      	lsls	r1, r3, #31
 8005aee:	bf44      	itt	mi
 8005af0:	f043 0320 	orrmi.w	r3, r3, #32
 8005af4:	6023      	strmi	r3, [r4, #0]
 8005af6:	b11d      	cbz	r5, 8005b00 <_printf_i+0x19c>
 8005af8:	2310      	movs	r3, #16
 8005afa:	e7ad      	b.n	8005a58 <_printf_i+0xf4>
 8005afc:	4826      	ldr	r0, [pc, #152]	@ (8005b98 <_printf_i+0x234>)
 8005afe:	e7e9      	b.n	8005ad4 <_printf_i+0x170>
 8005b00:	6823      	ldr	r3, [r4, #0]
 8005b02:	f023 0320 	bic.w	r3, r3, #32
 8005b06:	6023      	str	r3, [r4, #0]
 8005b08:	e7f6      	b.n	8005af8 <_printf_i+0x194>
 8005b0a:	4616      	mov	r6, r2
 8005b0c:	e7bd      	b.n	8005a8a <_printf_i+0x126>
 8005b0e:	6833      	ldr	r3, [r6, #0]
 8005b10:	6825      	ldr	r5, [r4, #0]
 8005b12:	6961      	ldr	r1, [r4, #20]
 8005b14:	1d18      	adds	r0, r3, #4
 8005b16:	6030      	str	r0, [r6, #0]
 8005b18:	062e      	lsls	r6, r5, #24
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	d501      	bpl.n	8005b22 <_printf_i+0x1be>
 8005b1e:	6019      	str	r1, [r3, #0]
 8005b20:	e002      	b.n	8005b28 <_printf_i+0x1c4>
 8005b22:	0668      	lsls	r0, r5, #25
 8005b24:	d5fb      	bpl.n	8005b1e <_printf_i+0x1ba>
 8005b26:	8019      	strh	r1, [r3, #0]
 8005b28:	2300      	movs	r3, #0
 8005b2a:	6123      	str	r3, [r4, #16]
 8005b2c:	4616      	mov	r6, r2
 8005b2e:	e7bc      	b.n	8005aaa <_printf_i+0x146>
 8005b30:	6833      	ldr	r3, [r6, #0]
 8005b32:	1d1a      	adds	r2, r3, #4
 8005b34:	6032      	str	r2, [r6, #0]
 8005b36:	681e      	ldr	r6, [r3, #0]
 8005b38:	6862      	ldr	r2, [r4, #4]
 8005b3a:	2100      	movs	r1, #0
 8005b3c:	4630      	mov	r0, r6
 8005b3e:	f7fa fb1f 	bl	8000180 <memchr>
 8005b42:	b108      	cbz	r0, 8005b48 <_printf_i+0x1e4>
 8005b44:	1b80      	subs	r0, r0, r6
 8005b46:	6060      	str	r0, [r4, #4]
 8005b48:	6863      	ldr	r3, [r4, #4]
 8005b4a:	6123      	str	r3, [r4, #16]
 8005b4c:	2300      	movs	r3, #0
 8005b4e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005b52:	e7aa      	b.n	8005aaa <_printf_i+0x146>
 8005b54:	6923      	ldr	r3, [r4, #16]
 8005b56:	4632      	mov	r2, r6
 8005b58:	4649      	mov	r1, r9
 8005b5a:	4640      	mov	r0, r8
 8005b5c:	47d0      	blx	sl
 8005b5e:	3001      	adds	r0, #1
 8005b60:	d0ad      	beq.n	8005abe <_printf_i+0x15a>
 8005b62:	6823      	ldr	r3, [r4, #0]
 8005b64:	079b      	lsls	r3, r3, #30
 8005b66:	d413      	bmi.n	8005b90 <_printf_i+0x22c>
 8005b68:	68e0      	ldr	r0, [r4, #12]
 8005b6a:	9b03      	ldr	r3, [sp, #12]
 8005b6c:	4298      	cmp	r0, r3
 8005b6e:	bfb8      	it	lt
 8005b70:	4618      	movlt	r0, r3
 8005b72:	e7a6      	b.n	8005ac2 <_printf_i+0x15e>
 8005b74:	2301      	movs	r3, #1
 8005b76:	4632      	mov	r2, r6
 8005b78:	4649      	mov	r1, r9
 8005b7a:	4640      	mov	r0, r8
 8005b7c:	47d0      	blx	sl
 8005b7e:	3001      	adds	r0, #1
 8005b80:	d09d      	beq.n	8005abe <_printf_i+0x15a>
 8005b82:	3501      	adds	r5, #1
 8005b84:	68e3      	ldr	r3, [r4, #12]
 8005b86:	9903      	ldr	r1, [sp, #12]
 8005b88:	1a5b      	subs	r3, r3, r1
 8005b8a:	42ab      	cmp	r3, r5
 8005b8c:	dcf2      	bgt.n	8005b74 <_printf_i+0x210>
 8005b8e:	e7eb      	b.n	8005b68 <_printf_i+0x204>
 8005b90:	2500      	movs	r5, #0
 8005b92:	f104 0619 	add.w	r6, r4, #25
 8005b96:	e7f5      	b.n	8005b84 <_printf_i+0x220>
 8005b98:	08007eb2 	.word	0x08007eb2
 8005b9c:	08007ec3 	.word	0x08007ec3

08005ba0 <std>:
 8005ba0:	2300      	movs	r3, #0
 8005ba2:	b510      	push	{r4, lr}
 8005ba4:	4604      	mov	r4, r0
 8005ba6:	e9c0 3300 	strd	r3, r3, [r0]
 8005baa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005bae:	6083      	str	r3, [r0, #8]
 8005bb0:	8181      	strh	r1, [r0, #12]
 8005bb2:	6643      	str	r3, [r0, #100]	@ 0x64
 8005bb4:	81c2      	strh	r2, [r0, #14]
 8005bb6:	6183      	str	r3, [r0, #24]
 8005bb8:	4619      	mov	r1, r3
 8005bba:	2208      	movs	r2, #8
 8005bbc:	305c      	adds	r0, #92	@ 0x5c
 8005bbe:	f000 f9f9 	bl	8005fb4 <memset>
 8005bc2:	4b0d      	ldr	r3, [pc, #52]	@ (8005bf8 <std+0x58>)
 8005bc4:	6263      	str	r3, [r4, #36]	@ 0x24
 8005bc6:	4b0d      	ldr	r3, [pc, #52]	@ (8005bfc <std+0x5c>)
 8005bc8:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005bca:	4b0d      	ldr	r3, [pc, #52]	@ (8005c00 <std+0x60>)
 8005bcc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005bce:	4b0d      	ldr	r3, [pc, #52]	@ (8005c04 <std+0x64>)
 8005bd0:	6323      	str	r3, [r4, #48]	@ 0x30
 8005bd2:	4b0d      	ldr	r3, [pc, #52]	@ (8005c08 <std+0x68>)
 8005bd4:	6224      	str	r4, [r4, #32]
 8005bd6:	429c      	cmp	r4, r3
 8005bd8:	d006      	beq.n	8005be8 <std+0x48>
 8005bda:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005bde:	4294      	cmp	r4, r2
 8005be0:	d002      	beq.n	8005be8 <std+0x48>
 8005be2:	33d0      	adds	r3, #208	@ 0xd0
 8005be4:	429c      	cmp	r4, r3
 8005be6:	d105      	bne.n	8005bf4 <std+0x54>
 8005be8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005bec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005bf0:	f000 ba5c 	b.w	80060ac <__retarget_lock_init_recursive>
 8005bf4:	bd10      	pop	{r4, pc}
 8005bf6:	bf00      	nop
 8005bf8:	08005e05 	.word	0x08005e05
 8005bfc:	08005e27 	.word	0x08005e27
 8005c00:	08005e5f 	.word	0x08005e5f
 8005c04:	08005e83 	.word	0x08005e83
 8005c08:	20000344 	.word	0x20000344

08005c0c <stdio_exit_handler>:
 8005c0c:	4a02      	ldr	r2, [pc, #8]	@ (8005c18 <stdio_exit_handler+0xc>)
 8005c0e:	4903      	ldr	r1, [pc, #12]	@ (8005c1c <stdio_exit_handler+0x10>)
 8005c10:	4803      	ldr	r0, [pc, #12]	@ (8005c20 <stdio_exit_handler+0x14>)
 8005c12:	f000 b869 	b.w	8005ce8 <_fwalk_sglue>
 8005c16:	bf00      	nop
 8005c18:	20000018 	.word	0x20000018
 8005c1c:	080079d9 	.word	0x080079d9
 8005c20:	20000028 	.word	0x20000028

08005c24 <cleanup_stdio>:
 8005c24:	6841      	ldr	r1, [r0, #4]
 8005c26:	4b0c      	ldr	r3, [pc, #48]	@ (8005c58 <cleanup_stdio+0x34>)
 8005c28:	4299      	cmp	r1, r3
 8005c2a:	b510      	push	{r4, lr}
 8005c2c:	4604      	mov	r4, r0
 8005c2e:	d001      	beq.n	8005c34 <cleanup_stdio+0x10>
 8005c30:	f001 fed2 	bl	80079d8 <_fflush_r>
 8005c34:	68a1      	ldr	r1, [r4, #8]
 8005c36:	4b09      	ldr	r3, [pc, #36]	@ (8005c5c <cleanup_stdio+0x38>)
 8005c38:	4299      	cmp	r1, r3
 8005c3a:	d002      	beq.n	8005c42 <cleanup_stdio+0x1e>
 8005c3c:	4620      	mov	r0, r4
 8005c3e:	f001 fecb 	bl	80079d8 <_fflush_r>
 8005c42:	68e1      	ldr	r1, [r4, #12]
 8005c44:	4b06      	ldr	r3, [pc, #24]	@ (8005c60 <cleanup_stdio+0x3c>)
 8005c46:	4299      	cmp	r1, r3
 8005c48:	d004      	beq.n	8005c54 <cleanup_stdio+0x30>
 8005c4a:	4620      	mov	r0, r4
 8005c4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005c50:	f001 bec2 	b.w	80079d8 <_fflush_r>
 8005c54:	bd10      	pop	{r4, pc}
 8005c56:	bf00      	nop
 8005c58:	20000344 	.word	0x20000344
 8005c5c:	200003ac 	.word	0x200003ac
 8005c60:	20000414 	.word	0x20000414

08005c64 <global_stdio_init.part.0>:
 8005c64:	b510      	push	{r4, lr}
 8005c66:	4b0b      	ldr	r3, [pc, #44]	@ (8005c94 <global_stdio_init.part.0+0x30>)
 8005c68:	4c0b      	ldr	r4, [pc, #44]	@ (8005c98 <global_stdio_init.part.0+0x34>)
 8005c6a:	4a0c      	ldr	r2, [pc, #48]	@ (8005c9c <global_stdio_init.part.0+0x38>)
 8005c6c:	601a      	str	r2, [r3, #0]
 8005c6e:	4620      	mov	r0, r4
 8005c70:	2200      	movs	r2, #0
 8005c72:	2104      	movs	r1, #4
 8005c74:	f7ff ff94 	bl	8005ba0 <std>
 8005c78:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005c7c:	2201      	movs	r2, #1
 8005c7e:	2109      	movs	r1, #9
 8005c80:	f7ff ff8e 	bl	8005ba0 <std>
 8005c84:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005c88:	2202      	movs	r2, #2
 8005c8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005c8e:	2112      	movs	r1, #18
 8005c90:	f7ff bf86 	b.w	8005ba0 <std>
 8005c94:	2000047c 	.word	0x2000047c
 8005c98:	20000344 	.word	0x20000344
 8005c9c:	08005c0d 	.word	0x08005c0d

08005ca0 <__sfp_lock_acquire>:
 8005ca0:	4801      	ldr	r0, [pc, #4]	@ (8005ca8 <__sfp_lock_acquire+0x8>)
 8005ca2:	f000 ba04 	b.w	80060ae <__retarget_lock_acquire_recursive>
 8005ca6:	bf00      	nop
 8005ca8:	20000485 	.word	0x20000485

08005cac <__sfp_lock_release>:
 8005cac:	4801      	ldr	r0, [pc, #4]	@ (8005cb4 <__sfp_lock_release+0x8>)
 8005cae:	f000 b9ff 	b.w	80060b0 <__retarget_lock_release_recursive>
 8005cb2:	bf00      	nop
 8005cb4:	20000485 	.word	0x20000485

08005cb8 <__sinit>:
 8005cb8:	b510      	push	{r4, lr}
 8005cba:	4604      	mov	r4, r0
 8005cbc:	f7ff fff0 	bl	8005ca0 <__sfp_lock_acquire>
 8005cc0:	6a23      	ldr	r3, [r4, #32]
 8005cc2:	b11b      	cbz	r3, 8005ccc <__sinit+0x14>
 8005cc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005cc8:	f7ff bff0 	b.w	8005cac <__sfp_lock_release>
 8005ccc:	4b04      	ldr	r3, [pc, #16]	@ (8005ce0 <__sinit+0x28>)
 8005cce:	6223      	str	r3, [r4, #32]
 8005cd0:	4b04      	ldr	r3, [pc, #16]	@ (8005ce4 <__sinit+0x2c>)
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d1f5      	bne.n	8005cc4 <__sinit+0xc>
 8005cd8:	f7ff ffc4 	bl	8005c64 <global_stdio_init.part.0>
 8005cdc:	e7f2      	b.n	8005cc4 <__sinit+0xc>
 8005cde:	bf00      	nop
 8005ce0:	08005c25 	.word	0x08005c25
 8005ce4:	2000047c 	.word	0x2000047c

08005ce8 <_fwalk_sglue>:
 8005ce8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005cec:	4607      	mov	r7, r0
 8005cee:	4688      	mov	r8, r1
 8005cf0:	4614      	mov	r4, r2
 8005cf2:	2600      	movs	r6, #0
 8005cf4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005cf8:	f1b9 0901 	subs.w	r9, r9, #1
 8005cfc:	d505      	bpl.n	8005d0a <_fwalk_sglue+0x22>
 8005cfe:	6824      	ldr	r4, [r4, #0]
 8005d00:	2c00      	cmp	r4, #0
 8005d02:	d1f7      	bne.n	8005cf4 <_fwalk_sglue+0xc>
 8005d04:	4630      	mov	r0, r6
 8005d06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005d0a:	89ab      	ldrh	r3, [r5, #12]
 8005d0c:	2b01      	cmp	r3, #1
 8005d0e:	d907      	bls.n	8005d20 <_fwalk_sglue+0x38>
 8005d10:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005d14:	3301      	adds	r3, #1
 8005d16:	d003      	beq.n	8005d20 <_fwalk_sglue+0x38>
 8005d18:	4629      	mov	r1, r5
 8005d1a:	4638      	mov	r0, r7
 8005d1c:	47c0      	blx	r8
 8005d1e:	4306      	orrs	r6, r0
 8005d20:	3568      	adds	r5, #104	@ 0x68
 8005d22:	e7e9      	b.n	8005cf8 <_fwalk_sglue+0x10>

08005d24 <iprintf>:
 8005d24:	b40f      	push	{r0, r1, r2, r3}
 8005d26:	b507      	push	{r0, r1, r2, lr}
 8005d28:	4906      	ldr	r1, [pc, #24]	@ (8005d44 <iprintf+0x20>)
 8005d2a:	ab04      	add	r3, sp, #16
 8005d2c:	6808      	ldr	r0, [r1, #0]
 8005d2e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005d32:	6881      	ldr	r1, [r0, #8]
 8005d34:	9301      	str	r3, [sp, #4]
 8005d36:	f001 fcb7 	bl	80076a8 <_vfiprintf_r>
 8005d3a:	b003      	add	sp, #12
 8005d3c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005d40:	b004      	add	sp, #16
 8005d42:	4770      	bx	lr
 8005d44:	20000024 	.word	0x20000024

08005d48 <_puts_r>:
 8005d48:	6a03      	ldr	r3, [r0, #32]
 8005d4a:	b570      	push	{r4, r5, r6, lr}
 8005d4c:	6884      	ldr	r4, [r0, #8]
 8005d4e:	4605      	mov	r5, r0
 8005d50:	460e      	mov	r6, r1
 8005d52:	b90b      	cbnz	r3, 8005d58 <_puts_r+0x10>
 8005d54:	f7ff ffb0 	bl	8005cb8 <__sinit>
 8005d58:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005d5a:	07db      	lsls	r3, r3, #31
 8005d5c:	d405      	bmi.n	8005d6a <_puts_r+0x22>
 8005d5e:	89a3      	ldrh	r3, [r4, #12]
 8005d60:	0598      	lsls	r0, r3, #22
 8005d62:	d402      	bmi.n	8005d6a <_puts_r+0x22>
 8005d64:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005d66:	f000 f9a2 	bl	80060ae <__retarget_lock_acquire_recursive>
 8005d6a:	89a3      	ldrh	r3, [r4, #12]
 8005d6c:	0719      	lsls	r1, r3, #28
 8005d6e:	d502      	bpl.n	8005d76 <_puts_r+0x2e>
 8005d70:	6923      	ldr	r3, [r4, #16]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d135      	bne.n	8005de2 <_puts_r+0x9a>
 8005d76:	4621      	mov	r1, r4
 8005d78:	4628      	mov	r0, r5
 8005d7a:	f000 f8c5 	bl	8005f08 <__swsetup_r>
 8005d7e:	b380      	cbz	r0, 8005de2 <_puts_r+0x9a>
 8005d80:	f04f 35ff 	mov.w	r5, #4294967295
 8005d84:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005d86:	07da      	lsls	r2, r3, #31
 8005d88:	d405      	bmi.n	8005d96 <_puts_r+0x4e>
 8005d8a:	89a3      	ldrh	r3, [r4, #12]
 8005d8c:	059b      	lsls	r3, r3, #22
 8005d8e:	d402      	bmi.n	8005d96 <_puts_r+0x4e>
 8005d90:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005d92:	f000 f98d 	bl	80060b0 <__retarget_lock_release_recursive>
 8005d96:	4628      	mov	r0, r5
 8005d98:	bd70      	pop	{r4, r5, r6, pc}
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	da04      	bge.n	8005da8 <_puts_r+0x60>
 8005d9e:	69a2      	ldr	r2, [r4, #24]
 8005da0:	429a      	cmp	r2, r3
 8005da2:	dc17      	bgt.n	8005dd4 <_puts_r+0x8c>
 8005da4:	290a      	cmp	r1, #10
 8005da6:	d015      	beq.n	8005dd4 <_puts_r+0x8c>
 8005da8:	6823      	ldr	r3, [r4, #0]
 8005daa:	1c5a      	adds	r2, r3, #1
 8005dac:	6022      	str	r2, [r4, #0]
 8005dae:	7019      	strb	r1, [r3, #0]
 8005db0:	68a3      	ldr	r3, [r4, #8]
 8005db2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005db6:	3b01      	subs	r3, #1
 8005db8:	60a3      	str	r3, [r4, #8]
 8005dba:	2900      	cmp	r1, #0
 8005dbc:	d1ed      	bne.n	8005d9a <_puts_r+0x52>
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	da11      	bge.n	8005de6 <_puts_r+0x9e>
 8005dc2:	4622      	mov	r2, r4
 8005dc4:	210a      	movs	r1, #10
 8005dc6:	4628      	mov	r0, r5
 8005dc8:	f000 f85f 	bl	8005e8a <__swbuf_r>
 8005dcc:	3001      	adds	r0, #1
 8005dce:	d0d7      	beq.n	8005d80 <_puts_r+0x38>
 8005dd0:	250a      	movs	r5, #10
 8005dd2:	e7d7      	b.n	8005d84 <_puts_r+0x3c>
 8005dd4:	4622      	mov	r2, r4
 8005dd6:	4628      	mov	r0, r5
 8005dd8:	f000 f857 	bl	8005e8a <__swbuf_r>
 8005ddc:	3001      	adds	r0, #1
 8005dde:	d1e7      	bne.n	8005db0 <_puts_r+0x68>
 8005de0:	e7ce      	b.n	8005d80 <_puts_r+0x38>
 8005de2:	3e01      	subs	r6, #1
 8005de4:	e7e4      	b.n	8005db0 <_puts_r+0x68>
 8005de6:	6823      	ldr	r3, [r4, #0]
 8005de8:	1c5a      	adds	r2, r3, #1
 8005dea:	6022      	str	r2, [r4, #0]
 8005dec:	220a      	movs	r2, #10
 8005dee:	701a      	strb	r2, [r3, #0]
 8005df0:	e7ee      	b.n	8005dd0 <_puts_r+0x88>
	...

08005df4 <puts>:
 8005df4:	4b02      	ldr	r3, [pc, #8]	@ (8005e00 <puts+0xc>)
 8005df6:	4601      	mov	r1, r0
 8005df8:	6818      	ldr	r0, [r3, #0]
 8005dfa:	f7ff bfa5 	b.w	8005d48 <_puts_r>
 8005dfe:	bf00      	nop
 8005e00:	20000024 	.word	0x20000024

08005e04 <__sread>:
 8005e04:	b510      	push	{r4, lr}
 8005e06:	460c      	mov	r4, r1
 8005e08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e0c:	f000 f900 	bl	8006010 <_read_r>
 8005e10:	2800      	cmp	r0, #0
 8005e12:	bfab      	itete	ge
 8005e14:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005e16:	89a3      	ldrhlt	r3, [r4, #12]
 8005e18:	181b      	addge	r3, r3, r0
 8005e1a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005e1e:	bfac      	ite	ge
 8005e20:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005e22:	81a3      	strhlt	r3, [r4, #12]
 8005e24:	bd10      	pop	{r4, pc}

08005e26 <__swrite>:
 8005e26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e2a:	461f      	mov	r7, r3
 8005e2c:	898b      	ldrh	r3, [r1, #12]
 8005e2e:	05db      	lsls	r3, r3, #23
 8005e30:	4605      	mov	r5, r0
 8005e32:	460c      	mov	r4, r1
 8005e34:	4616      	mov	r6, r2
 8005e36:	d505      	bpl.n	8005e44 <__swrite+0x1e>
 8005e38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e3c:	2302      	movs	r3, #2
 8005e3e:	2200      	movs	r2, #0
 8005e40:	f000 f8d4 	bl	8005fec <_lseek_r>
 8005e44:	89a3      	ldrh	r3, [r4, #12]
 8005e46:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005e4a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005e4e:	81a3      	strh	r3, [r4, #12]
 8005e50:	4632      	mov	r2, r6
 8005e52:	463b      	mov	r3, r7
 8005e54:	4628      	mov	r0, r5
 8005e56:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005e5a:	f000 b8eb 	b.w	8006034 <_write_r>

08005e5e <__sseek>:
 8005e5e:	b510      	push	{r4, lr}
 8005e60:	460c      	mov	r4, r1
 8005e62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e66:	f000 f8c1 	bl	8005fec <_lseek_r>
 8005e6a:	1c43      	adds	r3, r0, #1
 8005e6c:	89a3      	ldrh	r3, [r4, #12]
 8005e6e:	bf15      	itete	ne
 8005e70:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005e72:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005e76:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005e7a:	81a3      	strheq	r3, [r4, #12]
 8005e7c:	bf18      	it	ne
 8005e7e:	81a3      	strhne	r3, [r4, #12]
 8005e80:	bd10      	pop	{r4, pc}

08005e82 <__sclose>:
 8005e82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e86:	f000 b8a1 	b.w	8005fcc <_close_r>

08005e8a <__swbuf_r>:
 8005e8a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e8c:	460e      	mov	r6, r1
 8005e8e:	4614      	mov	r4, r2
 8005e90:	4605      	mov	r5, r0
 8005e92:	b118      	cbz	r0, 8005e9c <__swbuf_r+0x12>
 8005e94:	6a03      	ldr	r3, [r0, #32]
 8005e96:	b90b      	cbnz	r3, 8005e9c <__swbuf_r+0x12>
 8005e98:	f7ff ff0e 	bl	8005cb8 <__sinit>
 8005e9c:	69a3      	ldr	r3, [r4, #24]
 8005e9e:	60a3      	str	r3, [r4, #8]
 8005ea0:	89a3      	ldrh	r3, [r4, #12]
 8005ea2:	071a      	lsls	r2, r3, #28
 8005ea4:	d501      	bpl.n	8005eaa <__swbuf_r+0x20>
 8005ea6:	6923      	ldr	r3, [r4, #16]
 8005ea8:	b943      	cbnz	r3, 8005ebc <__swbuf_r+0x32>
 8005eaa:	4621      	mov	r1, r4
 8005eac:	4628      	mov	r0, r5
 8005eae:	f000 f82b 	bl	8005f08 <__swsetup_r>
 8005eb2:	b118      	cbz	r0, 8005ebc <__swbuf_r+0x32>
 8005eb4:	f04f 37ff 	mov.w	r7, #4294967295
 8005eb8:	4638      	mov	r0, r7
 8005eba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005ebc:	6823      	ldr	r3, [r4, #0]
 8005ebe:	6922      	ldr	r2, [r4, #16]
 8005ec0:	1a98      	subs	r0, r3, r2
 8005ec2:	6963      	ldr	r3, [r4, #20]
 8005ec4:	b2f6      	uxtb	r6, r6
 8005ec6:	4283      	cmp	r3, r0
 8005ec8:	4637      	mov	r7, r6
 8005eca:	dc05      	bgt.n	8005ed8 <__swbuf_r+0x4e>
 8005ecc:	4621      	mov	r1, r4
 8005ece:	4628      	mov	r0, r5
 8005ed0:	f001 fd82 	bl	80079d8 <_fflush_r>
 8005ed4:	2800      	cmp	r0, #0
 8005ed6:	d1ed      	bne.n	8005eb4 <__swbuf_r+0x2a>
 8005ed8:	68a3      	ldr	r3, [r4, #8]
 8005eda:	3b01      	subs	r3, #1
 8005edc:	60a3      	str	r3, [r4, #8]
 8005ede:	6823      	ldr	r3, [r4, #0]
 8005ee0:	1c5a      	adds	r2, r3, #1
 8005ee2:	6022      	str	r2, [r4, #0]
 8005ee4:	701e      	strb	r6, [r3, #0]
 8005ee6:	6962      	ldr	r2, [r4, #20]
 8005ee8:	1c43      	adds	r3, r0, #1
 8005eea:	429a      	cmp	r2, r3
 8005eec:	d004      	beq.n	8005ef8 <__swbuf_r+0x6e>
 8005eee:	89a3      	ldrh	r3, [r4, #12]
 8005ef0:	07db      	lsls	r3, r3, #31
 8005ef2:	d5e1      	bpl.n	8005eb8 <__swbuf_r+0x2e>
 8005ef4:	2e0a      	cmp	r6, #10
 8005ef6:	d1df      	bne.n	8005eb8 <__swbuf_r+0x2e>
 8005ef8:	4621      	mov	r1, r4
 8005efa:	4628      	mov	r0, r5
 8005efc:	f001 fd6c 	bl	80079d8 <_fflush_r>
 8005f00:	2800      	cmp	r0, #0
 8005f02:	d0d9      	beq.n	8005eb8 <__swbuf_r+0x2e>
 8005f04:	e7d6      	b.n	8005eb4 <__swbuf_r+0x2a>
	...

08005f08 <__swsetup_r>:
 8005f08:	b538      	push	{r3, r4, r5, lr}
 8005f0a:	4b29      	ldr	r3, [pc, #164]	@ (8005fb0 <__swsetup_r+0xa8>)
 8005f0c:	4605      	mov	r5, r0
 8005f0e:	6818      	ldr	r0, [r3, #0]
 8005f10:	460c      	mov	r4, r1
 8005f12:	b118      	cbz	r0, 8005f1c <__swsetup_r+0x14>
 8005f14:	6a03      	ldr	r3, [r0, #32]
 8005f16:	b90b      	cbnz	r3, 8005f1c <__swsetup_r+0x14>
 8005f18:	f7ff fece 	bl	8005cb8 <__sinit>
 8005f1c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005f20:	0719      	lsls	r1, r3, #28
 8005f22:	d422      	bmi.n	8005f6a <__swsetup_r+0x62>
 8005f24:	06da      	lsls	r2, r3, #27
 8005f26:	d407      	bmi.n	8005f38 <__swsetup_r+0x30>
 8005f28:	2209      	movs	r2, #9
 8005f2a:	602a      	str	r2, [r5, #0]
 8005f2c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005f30:	81a3      	strh	r3, [r4, #12]
 8005f32:	f04f 30ff 	mov.w	r0, #4294967295
 8005f36:	e033      	b.n	8005fa0 <__swsetup_r+0x98>
 8005f38:	0758      	lsls	r0, r3, #29
 8005f3a:	d512      	bpl.n	8005f62 <__swsetup_r+0x5a>
 8005f3c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005f3e:	b141      	cbz	r1, 8005f52 <__swsetup_r+0x4a>
 8005f40:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005f44:	4299      	cmp	r1, r3
 8005f46:	d002      	beq.n	8005f4e <__swsetup_r+0x46>
 8005f48:	4628      	mov	r0, r5
 8005f4a:	f000 ff0d 	bl	8006d68 <_free_r>
 8005f4e:	2300      	movs	r3, #0
 8005f50:	6363      	str	r3, [r4, #52]	@ 0x34
 8005f52:	89a3      	ldrh	r3, [r4, #12]
 8005f54:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005f58:	81a3      	strh	r3, [r4, #12]
 8005f5a:	2300      	movs	r3, #0
 8005f5c:	6063      	str	r3, [r4, #4]
 8005f5e:	6923      	ldr	r3, [r4, #16]
 8005f60:	6023      	str	r3, [r4, #0]
 8005f62:	89a3      	ldrh	r3, [r4, #12]
 8005f64:	f043 0308 	orr.w	r3, r3, #8
 8005f68:	81a3      	strh	r3, [r4, #12]
 8005f6a:	6923      	ldr	r3, [r4, #16]
 8005f6c:	b94b      	cbnz	r3, 8005f82 <__swsetup_r+0x7a>
 8005f6e:	89a3      	ldrh	r3, [r4, #12]
 8005f70:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005f74:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005f78:	d003      	beq.n	8005f82 <__swsetup_r+0x7a>
 8005f7a:	4621      	mov	r1, r4
 8005f7c:	4628      	mov	r0, r5
 8005f7e:	f001 fd79 	bl	8007a74 <__smakebuf_r>
 8005f82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005f86:	f013 0201 	ands.w	r2, r3, #1
 8005f8a:	d00a      	beq.n	8005fa2 <__swsetup_r+0x9a>
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	60a2      	str	r2, [r4, #8]
 8005f90:	6962      	ldr	r2, [r4, #20]
 8005f92:	4252      	negs	r2, r2
 8005f94:	61a2      	str	r2, [r4, #24]
 8005f96:	6922      	ldr	r2, [r4, #16]
 8005f98:	b942      	cbnz	r2, 8005fac <__swsetup_r+0xa4>
 8005f9a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005f9e:	d1c5      	bne.n	8005f2c <__swsetup_r+0x24>
 8005fa0:	bd38      	pop	{r3, r4, r5, pc}
 8005fa2:	0799      	lsls	r1, r3, #30
 8005fa4:	bf58      	it	pl
 8005fa6:	6962      	ldrpl	r2, [r4, #20]
 8005fa8:	60a2      	str	r2, [r4, #8]
 8005faa:	e7f4      	b.n	8005f96 <__swsetup_r+0x8e>
 8005fac:	2000      	movs	r0, #0
 8005fae:	e7f7      	b.n	8005fa0 <__swsetup_r+0x98>
 8005fb0:	20000024 	.word	0x20000024

08005fb4 <memset>:
 8005fb4:	4402      	add	r2, r0
 8005fb6:	4603      	mov	r3, r0
 8005fb8:	4293      	cmp	r3, r2
 8005fba:	d100      	bne.n	8005fbe <memset+0xa>
 8005fbc:	4770      	bx	lr
 8005fbe:	f803 1b01 	strb.w	r1, [r3], #1
 8005fc2:	e7f9      	b.n	8005fb8 <memset+0x4>

08005fc4 <_localeconv_r>:
 8005fc4:	4800      	ldr	r0, [pc, #0]	@ (8005fc8 <_localeconv_r+0x4>)
 8005fc6:	4770      	bx	lr
 8005fc8:	20000164 	.word	0x20000164

08005fcc <_close_r>:
 8005fcc:	b538      	push	{r3, r4, r5, lr}
 8005fce:	4d06      	ldr	r5, [pc, #24]	@ (8005fe8 <_close_r+0x1c>)
 8005fd0:	2300      	movs	r3, #0
 8005fd2:	4604      	mov	r4, r0
 8005fd4:	4608      	mov	r0, r1
 8005fd6:	602b      	str	r3, [r5, #0]
 8005fd8:	f7fb ff43 	bl	8001e62 <_close>
 8005fdc:	1c43      	adds	r3, r0, #1
 8005fde:	d102      	bne.n	8005fe6 <_close_r+0x1a>
 8005fe0:	682b      	ldr	r3, [r5, #0]
 8005fe2:	b103      	cbz	r3, 8005fe6 <_close_r+0x1a>
 8005fe4:	6023      	str	r3, [r4, #0]
 8005fe6:	bd38      	pop	{r3, r4, r5, pc}
 8005fe8:	20000480 	.word	0x20000480

08005fec <_lseek_r>:
 8005fec:	b538      	push	{r3, r4, r5, lr}
 8005fee:	4d07      	ldr	r5, [pc, #28]	@ (800600c <_lseek_r+0x20>)
 8005ff0:	4604      	mov	r4, r0
 8005ff2:	4608      	mov	r0, r1
 8005ff4:	4611      	mov	r1, r2
 8005ff6:	2200      	movs	r2, #0
 8005ff8:	602a      	str	r2, [r5, #0]
 8005ffa:	461a      	mov	r2, r3
 8005ffc:	f7fb ff55 	bl	8001eaa <_lseek>
 8006000:	1c43      	adds	r3, r0, #1
 8006002:	d102      	bne.n	800600a <_lseek_r+0x1e>
 8006004:	682b      	ldr	r3, [r5, #0]
 8006006:	b103      	cbz	r3, 800600a <_lseek_r+0x1e>
 8006008:	6023      	str	r3, [r4, #0]
 800600a:	bd38      	pop	{r3, r4, r5, pc}
 800600c:	20000480 	.word	0x20000480

08006010 <_read_r>:
 8006010:	b538      	push	{r3, r4, r5, lr}
 8006012:	4d07      	ldr	r5, [pc, #28]	@ (8006030 <_read_r+0x20>)
 8006014:	4604      	mov	r4, r0
 8006016:	4608      	mov	r0, r1
 8006018:	4611      	mov	r1, r2
 800601a:	2200      	movs	r2, #0
 800601c:	602a      	str	r2, [r5, #0]
 800601e:	461a      	mov	r2, r3
 8006020:	f7fb ff02 	bl	8001e28 <_read>
 8006024:	1c43      	adds	r3, r0, #1
 8006026:	d102      	bne.n	800602e <_read_r+0x1e>
 8006028:	682b      	ldr	r3, [r5, #0]
 800602a:	b103      	cbz	r3, 800602e <_read_r+0x1e>
 800602c:	6023      	str	r3, [r4, #0]
 800602e:	bd38      	pop	{r3, r4, r5, pc}
 8006030:	20000480 	.word	0x20000480

08006034 <_write_r>:
 8006034:	b538      	push	{r3, r4, r5, lr}
 8006036:	4d07      	ldr	r5, [pc, #28]	@ (8006054 <_write_r+0x20>)
 8006038:	4604      	mov	r4, r0
 800603a:	4608      	mov	r0, r1
 800603c:	4611      	mov	r1, r2
 800603e:	2200      	movs	r2, #0
 8006040:	602a      	str	r2, [r5, #0]
 8006042:	461a      	mov	r2, r3
 8006044:	f7fb fafe 	bl	8001644 <_write>
 8006048:	1c43      	adds	r3, r0, #1
 800604a:	d102      	bne.n	8006052 <_write_r+0x1e>
 800604c:	682b      	ldr	r3, [r5, #0]
 800604e:	b103      	cbz	r3, 8006052 <_write_r+0x1e>
 8006050:	6023      	str	r3, [r4, #0]
 8006052:	bd38      	pop	{r3, r4, r5, pc}
 8006054:	20000480 	.word	0x20000480

08006058 <__errno>:
 8006058:	4b01      	ldr	r3, [pc, #4]	@ (8006060 <__errno+0x8>)
 800605a:	6818      	ldr	r0, [r3, #0]
 800605c:	4770      	bx	lr
 800605e:	bf00      	nop
 8006060:	20000024 	.word	0x20000024

08006064 <__libc_init_array>:
 8006064:	b570      	push	{r4, r5, r6, lr}
 8006066:	4d0d      	ldr	r5, [pc, #52]	@ (800609c <__libc_init_array+0x38>)
 8006068:	4c0d      	ldr	r4, [pc, #52]	@ (80060a0 <__libc_init_array+0x3c>)
 800606a:	1b64      	subs	r4, r4, r5
 800606c:	10a4      	asrs	r4, r4, #2
 800606e:	2600      	movs	r6, #0
 8006070:	42a6      	cmp	r6, r4
 8006072:	d109      	bne.n	8006088 <__libc_init_array+0x24>
 8006074:	4d0b      	ldr	r5, [pc, #44]	@ (80060a4 <__libc_init_array+0x40>)
 8006076:	4c0c      	ldr	r4, [pc, #48]	@ (80060a8 <__libc_init_array+0x44>)
 8006078:	f001 fe28 	bl	8007ccc <_init>
 800607c:	1b64      	subs	r4, r4, r5
 800607e:	10a4      	asrs	r4, r4, #2
 8006080:	2600      	movs	r6, #0
 8006082:	42a6      	cmp	r6, r4
 8006084:	d105      	bne.n	8006092 <__libc_init_array+0x2e>
 8006086:	bd70      	pop	{r4, r5, r6, pc}
 8006088:	f855 3b04 	ldr.w	r3, [r5], #4
 800608c:	4798      	blx	r3
 800608e:	3601      	adds	r6, #1
 8006090:	e7ee      	b.n	8006070 <__libc_init_array+0xc>
 8006092:	f855 3b04 	ldr.w	r3, [r5], #4
 8006096:	4798      	blx	r3
 8006098:	3601      	adds	r6, #1
 800609a:	e7f2      	b.n	8006082 <__libc_init_array+0x1e>
 800609c:	0800821c 	.word	0x0800821c
 80060a0:	0800821c 	.word	0x0800821c
 80060a4:	0800821c 	.word	0x0800821c
 80060a8:	08008220 	.word	0x08008220

080060ac <__retarget_lock_init_recursive>:
 80060ac:	4770      	bx	lr

080060ae <__retarget_lock_acquire_recursive>:
 80060ae:	4770      	bx	lr

080060b0 <__retarget_lock_release_recursive>:
 80060b0:	4770      	bx	lr

080060b2 <quorem>:
 80060b2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060b6:	6903      	ldr	r3, [r0, #16]
 80060b8:	690c      	ldr	r4, [r1, #16]
 80060ba:	42a3      	cmp	r3, r4
 80060bc:	4607      	mov	r7, r0
 80060be:	db7e      	blt.n	80061be <quorem+0x10c>
 80060c0:	3c01      	subs	r4, #1
 80060c2:	f101 0814 	add.w	r8, r1, #20
 80060c6:	00a3      	lsls	r3, r4, #2
 80060c8:	f100 0514 	add.w	r5, r0, #20
 80060cc:	9300      	str	r3, [sp, #0]
 80060ce:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80060d2:	9301      	str	r3, [sp, #4]
 80060d4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80060d8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80060dc:	3301      	adds	r3, #1
 80060de:	429a      	cmp	r2, r3
 80060e0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80060e4:	fbb2 f6f3 	udiv	r6, r2, r3
 80060e8:	d32e      	bcc.n	8006148 <quorem+0x96>
 80060ea:	f04f 0a00 	mov.w	sl, #0
 80060ee:	46c4      	mov	ip, r8
 80060f0:	46ae      	mov	lr, r5
 80060f2:	46d3      	mov	fp, sl
 80060f4:	f85c 3b04 	ldr.w	r3, [ip], #4
 80060f8:	b298      	uxth	r0, r3
 80060fa:	fb06 a000 	mla	r0, r6, r0, sl
 80060fe:	0c02      	lsrs	r2, r0, #16
 8006100:	0c1b      	lsrs	r3, r3, #16
 8006102:	fb06 2303 	mla	r3, r6, r3, r2
 8006106:	f8de 2000 	ldr.w	r2, [lr]
 800610a:	b280      	uxth	r0, r0
 800610c:	b292      	uxth	r2, r2
 800610e:	1a12      	subs	r2, r2, r0
 8006110:	445a      	add	r2, fp
 8006112:	f8de 0000 	ldr.w	r0, [lr]
 8006116:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800611a:	b29b      	uxth	r3, r3
 800611c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8006120:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8006124:	b292      	uxth	r2, r2
 8006126:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800612a:	45e1      	cmp	r9, ip
 800612c:	f84e 2b04 	str.w	r2, [lr], #4
 8006130:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8006134:	d2de      	bcs.n	80060f4 <quorem+0x42>
 8006136:	9b00      	ldr	r3, [sp, #0]
 8006138:	58eb      	ldr	r3, [r5, r3]
 800613a:	b92b      	cbnz	r3, 8006148 <quorem+0x96>
 800613c:	9b01      	ldr	r3, [sp, #4]
 800613e:	3b04      	subs	r3, #4
 8006140:	429d      	cmp	r5, r3
 8006142:	461a      	mov	r2, r3
 8006144:	d32f      	bcc.n	80061a6 <quorem+0xf4>
 8006146:	613c      	str	r4, [r7, #16]
 8006148:	4638      	mov	r0, r7
 800614a:	f001 f97f 	bl	800744c <__mcmp>
 800614e:	2800      	cmp	r0, #0
 8006150:	db25      	blt.n	800619e <quorem+0xec>
 8006152:	4629      	mov	r1, r5
 8006154:	2000      	movs	r0, #0
 8006156:	f858 2b04 	ldr.w	r2, [r8], #4
 800615a:	f8d1 c000 	ldr.w	ip, [r1]
 800615e:	fa1f fe82 	uxth.w	lr, r2
 8006162:	fa1f f38c 	uxth.w	r3, ip
 8006166:	eba3 030e 	sub.w	r3, r3, lr
 800616a:	4403      	add	r3, r0
 800616c:	0c12      	lsrs	r2, r2, #16
 800616e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8006172:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8006176:	b29b      	uxth	r3, r3
 8006178:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800617c:	45c1      	cmp	r9, r8
 800617e:	f841 3b04 	str.w	r3, [r1], #4
 8006182:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006186:	d2e6      	bcs.n	8006156 <quorem+0xa4>
 8006188:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800618c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006190:	b922      	cbnz	r2, 800619c <quorem+0xea>
 8006192:	3b04      	subs	r3, #4
 8006194:	429d      	cmp	r5, r3
 8006196:	461a      	mov	r2, r3
 8006198:	d30b      	bcc.n	80061b2 <quorem+0x100>
 800619a:	613c      	str	r4, [r7, #16]
 800619c:	3601      	adds	r6, #1
 800619e:	4630      	mov	r0, r6
 80061a0:	b003      	add	sp, #12
 80061a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061a6:	6812      	ldr	r2, [r2, #0]
 80061a8:	3b04      	subs	r3, #4
 80061aa:	2a00      	cmp	r2, #0
 80061ac:	d1cb      	bne.n	8006146 <quorem+0x94>
 80061ae:	3c01      	subs	r4, #1
 80061b0:	e7c6      	b.n	8006140 <quorem+0x8e>
 80061b2:	6812      	ldr	r2, [r2, #0]
 80061b4:	3b04      	subs	r3, #4
 80061b6:	2a00      	cmp	r2, #0
 80061b8:	d1ef      	bne.n	800619a <quorem+0xe8>
 80061ba:	3c01      	subs	r4, #1
 80061bc:	e7ea      	b.n	8006194 <quorem+0xe2>
 80061be:	2000      	movs	r0, #0
 80061c0:	e7ee      	b.n	80061a0 <quorem+0xee>
 80061c2:	0000      	movs	r0, r0
 80061c4:	0000      	movs	r0, r0
	...

080061c8 <_dtoa_r>:
 80061c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061cc:	69c7      	ldr	r7, [r0, #28]
 80061ce:	b097      	sub	sp, #92	@ 0x5c
 80061d0:	4614      	mov	r4, r2
 80061d2:	461d      	mov	r5, r3
 80061d4:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80061d8:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 80061da:	4681      	mov	r9, r0
 80061dc:	b97f      	cbnz	r7, 80061fe <_dtoa_r+0x36>
 80061de:	2010      	movs	r0, #16
 80061e0:	f000 fe0c 	bl	8006dfc <malloc>
 80061e4:	4602      	mov	r2, r0
 80061e6:	f8c9 001c 	str.w	r0, [r9, #28]
 80061ea:	b920      	cbnz	r0, 80061f6 <_dtoa_r+0x2e>
 80061ec:	4baa      	ldr	r3, [pc, #680]	@ (8006498 <_dtoa_r+0x2d0>)
 80061ee:	21ef      	movs	r1, #239	@ 0xef
 80061f0:	48aa      	ldr	r0, [pc, #680]	@ (800649c <_dtoa_r+0x2d4>)
 80061f2:	f001 fcbb 	bl	8007b6c <__assert_func>
 80061f6:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80061fa:	6007      	str	r7, [r0, #0]
 80061fc:	60c7      	str	r7, [r0, #12]
 80061fe:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006202:	6819      	ldr	r1, [r3, #0]
 8006204:	b159      	cbz	r1, 800621e <_dtoa_r+0x56>
 8006206:	685a      	ldr	r2, [r3, #4]
 8006208:	604a      	str	r2, [r1, #4]
 800620a:	2301      	movs	r3, #1
 800620c:	4093      	lsls	r3, r2
 800620e:	608b      	str	r3, [r1, #8]
 8006210:	4648      	mov	r0, r9
 8006212:	f000 fee9 	bl	8006fe8 <_Bfree>
 8006216:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800621a:	2200      	movs	r2, #0
 800621c:	601a      	str	r2, [r3, #0]
 800621e:	1e2b      	subs	r3, r5, #0
 8006220:	bfb9      	ittee	lt
 8006222:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8006226:	9307      	strlt	r3, [sp, #28]
 8006228:	2300      	movge	r3, #0
 800622a:	6033      	strge	r3, [r6, #0]
 800622c:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8006230:	4b9b      	ldr	r3, [pc, #620]	@ (80064a0 <_dtoa_r+0x2d8>)
 8006232:	bfbc      	itt	lt
 8006234:	2201      	movlt	r2, #1
 8006236:	6032      	strlt	r2, [r6, #0]
 8006238:	ea33 0308 	bics.w	r3, r3, r8
 800623c:	d112      	bne.n	8006264 <_dtoa_r+0x9c>
 800623e:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8006240:	f242 730f 	movw	r3, #9999	@ 0x270f
 8006244:	6013      	str	r3, [r2, #0]
 8006246:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800624a:	4323      	orrs	r3, r4
 800624c:	f000 855b 	beq.w	8006d06 <_dtoa_r+0xb3e>
 8006250:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8006252:	f8df a250 	ldr.w	sl, [pc, #592]	@ 80064a4 <_dtoa_r+0x2dc>
 8006256:	2b00      	cmp	r3, #0
 8006258:	f000 855d 	beq.w	8006d16 <_dtoa_r+0xb4e>
 800625c:	f10a 0303 	add.w	r3, sl, #3
 8006260:	f000 bd57 	b.w	8006d12 <_dtoa_r+0xb4a>
 8006264:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006268:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800626c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006270:	2200      	movs	r2, #0
 8006272:	2300      	movs	r3, #0
 8006274:	f7fa fc00 	bl	8000a78 <__aeabi_dcmpeq>
 8006278:	4607      	mov	r7, r0
 800627a:	b158      	cbz	r0, 8006294 <_dtoa_r+0xcc>
 800627c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800627e:	2301      	movs	r3, #1
 8006280:	6013      	str	r3, [r2, #0]
 8006282:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8006284:	b113      	cbz	r3, 800628c <_dtoa_r+0xc4>
 8006286:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8006288:	4b87      	ldr	r3, [pc, #540]	@ (80064a8 <_dtoa_r+0x2e0>)
 800628a:	6013      	str	r3, [r2, #0]
 800628c:	f8df a21c 	ldr.w	sl, [pc, #540]	@ 80064ac <_dtoa_r+0x2e4>
 8006290:	f000 bd41 	b.w	8006d16 <_dtoa_r+0xb4e>
 8006294:	ab14      	add	r3, sp, #80	@ 0x50
 8006296:	9301      	str	r3, [sp, #4]
 8006298:	ab15      	add	r3, sp, #84	@ 0x54
 800629a:	9300      	str	r3, [sp, #0]
 800629c:	4648      	mov	r0, r9
 800629e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80062a2:	f001 f981 	bl	80075a8 <__d2b>
 80062a6:	f3c8 560a 	ubfx	r6, r8, #20, #11
 80062aa:	9003      	str	r0, [sp, #12]
 80062ac:	2e00      	cmp	r6, #0
 80062ae:	d077      	beq.n	80063a0 <_dtoa_r+0x1d8>
 80062b0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80062b2:	9712      	str	r7, [sp, #72]	@ 0x48
 80062b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80062b8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80062bc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80062c0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80062c4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80062c8:	4619      	mov	r1, r3
 80062ca:	2200      	movs	r2, #0
 80062cc:	4b78      	ldr	r3, [pc, #480]	@ (80064b0 <_dtoa_r+0x2e8>)
 80062ce:	f7f9 ffb3 	bl	8000238 <__aeabi_dsub>
 80062d2:	a36b      	add	r3, pc, #428	@ (adr r3, 8006480 <_dtoa_r+0x2b8>)
 80062d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062d8:	f7fa f966 	bl	80005a8 <__aeabi_dmul>
 80062dc:	a36a      	add	r3, pc, #424	@ (adr r3, 8006488 <_dtoa_r+0x2c0>)
 80062de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062e2:	f7f9 ffab 	bl	800023c <__adddf3>
 80062e6:	4604      	mov	r4, r0
 80062e8:	4630      	mov	r0, r6
 80062ea:	460d      	mov	r5, r1
 80062ec:	f7fa f8f2 	bl	80004d4 <__aeabi_i2d>
 80062f0:	a367      	add	r3, pc, #412	@ (adr r3, 8006490 <_dtoa_r+0x2c8>)
 80062f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062f6:	f7fa f957 	bl	80005a8 <__aeabi_dmul>
 80062fa:	4602      	mov	r2, r0
 80062fc:	460b      	mov	r3, r1
 80062fe:	4620      	mov	r0, r4
 8006300:	4629      	mov	r1, r5
 8006302:	f7f9 ff9b 	bl	800023c <__adddf3>
 8006306:	4604      	mov	r4, r0
 8006308:	460d      	mov	r5, r1
 800630a:	f7fa fbfd 	bl	8000b08 <__aeabi_d2iz>
 800630e:	2200      	movs	r2, #0
 8006310:	4607      	mov	r7, r0
 8006312:	2300      	movs	r3, #0
 8006314:	4620      	mov	r0, r4
 8006316:	4629      	mov	r1, r5
 8006318:	f7fa fbb8 	bl	8000a8c <__aeabi_dcmplt>
 800631c:	b140      	cbz	r0, 8006330 <_dtoa_r+0x168>
 800631e:	4638      	mov	r0, r7
 8006320:	f7fa f8d8 	bl	80004d4 <__aeabi_i2d>
 8006324:	4622      	mov	r2, r4
 8006326:	462b      	mov	r3, r5
 8006328:	f7fa fba6 	bl	8000a78 <__aeabi_dcmpeq>
 800632c:	b900      	cbnz	r0, 8006330 <_dtoa_r+0x168>
 800632e:	3f01      	subs	r7, #1
 8006330:	2f16      	cmp	r7, #22
 8006332:	d853      	bhi.n	80063dc <_dtoa_r+0x214>
 8006334:	4b5f      	ldr	r3, [pc, #380]	@ (80064b4 <_dtoa_r+0x2ec>)
 8006336:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800633a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800633e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006342:	f7fa fba3 	bl	8000a8c <__aeabi_dcmplt>
 8006346:	2800      	cmp	r0, #0
 8006348:	d04a      	beq.n	80063e0 <_dtoa_r+0x218>
 800634a:	3f01      	subs	r7, #1
 800634c:	2300      	movs	r3, #0
 800634e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006350:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006352:	1b9b      	subs	r3, r3, r6
 8006354:	1e5a      	subs	r2, r3, #1
 8006356:	bf45      	ittet	mi
 8006358:	f1c3 0301 	rsbmi	r3, r3, #1
 800635c:	9304      	strmi	r3, [sp, #16]
 800635e:	2300      	movpl	r3, #0
 8006360:	2300      	movmi	r3, #0
 8006362:	9209      	str	r2, [sp, #36]	@ 0x24
 8006364:	bf54      	ite	pl
 8006366:	9304      	strpl	r3, [sp, #16]
 8006368:	9309      	strmi	r3, [sp, #36]	@ 0x24
 800636a:	2f00      	cmp	r7, #0
 800636c:	db3a      	blt.n	80063e4 <_dtoa_r+0x21c>
 800636e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006370:	970e      	str	r7, [sp, #56]	@ 0x38
 8006372:	443b      	add	r3, r7
 8006374:	9309      	str	r3, [sp, #36]	@ 0x24
 8006376:	2300      	movs	r3, #0
 8006378:	930a      	str	r3, [sp, #40]	@ 0x28
 800637a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800637c:	2b09      	cmp	r3, #9
 800637e:	d864      	bhi.n	800644a <_dtoa_r+0x282>
 8006380:	2b05      	cmp	r3, #5
 8006382:	bfc4      	itt	gt
 8006384:	3b04      	subgt	r3, #4
 8006386:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8006388:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800638a:	f1a3 0302 	sub.w	r3, r3, #2
 800638e:	bfcc      	ite	gt
 8006390:	2400      	movgt	r4, #0
 8006392:	2401      	movle	r4, #1
 8006394:	2b03      	cmp	r3, #3
 8006396:	d864      	bhi.n	8006462 <_dtoa_r+0x29a>
 8006398:	e8df f003 	tbb	[pc, r3]
 800639c:	2c385553 	.word	0x2c385553
 80063a0:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80063a4:	441e      	add	r6, r3
 80063a6:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80063aa:	2b20      	cmp	r3, #32
 80063ac:	bfc1      	itttt	gt
 80063ae:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80063b2:	fa08 f803 	lslgt.w	r8, r8, r3
 80063b6:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80063ba:	fa24 f303 	lsrgt.w	r3, r4, r3
 80063be:	bfd6      	itet	le
 80063c0:	f1c3 0320 	rsble	r3, r3, #32
 80063c4:	ea48 0003 	orrgt.w	r0, r8, r3
 80063c8:	fa04 f003 	lslle.w	r0, r4, r3
 80063cc:	f7fa f872 	bl	80004b4 <__aeabi_ui2d>
 80063d0:	2201      	movs	r2, #1
 80063d2:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80063d6:	3e01      	subs	r6, #1
 80063d8:	9212      	str	r2, [sp, #72]	@ 0x48
 80063da:	e775      	b.n	80062c8 <_dtoa_r+0x100>
 80063dc:	2301      	movs	r3, #1
 80063de:	e7b6      	b.n	800634e <_dtoa_r+0x186>
 80063e0:	900f      	str	r0, [sp, #60]	@ 0x3c
 80063e2:	e7b5      	b.n	8006350 <_dtoa_r+0x188>
 80063e4:	9b04      	ldr	r3, [sp, #16]
 80063e6:	1bdb      	subs	r3, r3, r7
 80063e8:	9304      	str	r3, [sp, #16]
 80063ea:	427b      	negs	r3, r7
 80063ec:	930a      	str	r3, [sp, #40]	@ 0x28
 80063ee:	2300      	movs	r3, #0
 80063f0:	930e      	str	r3, [sp, #56]	@ 0x38
 80063f2:	e7c2      	b.n	800637a <_dtoa_r+0x1b2>
 80063f4:	2301      	movs	r3, #1
 80063f6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80063f8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80063fa:	eb07 0b03 	add.w	fp, r7, r3
 80063fe:	f10b 0301 	add.w	r3, fp, #1
 8006402:	2b01      	cmp	r3, #1
 8006404:	9308      	str	r3, [sp, #32]
 8006406:	bfb8      	it	lt
 8006408:	2301      	movlt	r3, #1
 800640a:	e006      	b.n	800641a <_dtoa_r+0x252>
 800640c:	2301      	movs	r3, #1
 800640e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006410:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006412:	2b00      	cmp	r3, #0
 8006414:	dd28      	ble.n	8006468 <_dtoa_r+0x2a0>
 8006416:	469b      	mov	fp, r3
 8006418:	9308      	str	r3, [sp, #32]
 800641a:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800641e:	2100      	movs	r1, #0
 8006420:	2204      	movs	r2, #4
 8006422:	f102 0514 	add.w	r5, r2, #20
 8006426:	429d      	cmp	r5, r3
 8006428:	d926      	bls.n	8006478 <_dtoa_r+0x2b0>
 800642a:	6041      	str	r1, [r0, #4]
 800642c:	4648      	mov	r0, r9
 800642e:	f000 fd9b 	bl	8006f68 <_Balloc>
 8006432:	4682      	mov	sl, r0
 8006434:	2800      	cmp	r0, #0
 8006436:	d141      	bne.n	80064bc <_dtoa_r+0x2f4>
 8006438:	4b1f      	ldr	r3, [pc, #124]	@ (80064b8 <_dtoa_r+0x2f0>)
 800643a:	4602      	mov	r2, r0
 800643c:	f240 11af 	movw	r1, #431	@ 0x1af
 8006440:	e6d6      	b.n	80061f0 <_dtoa_r+0x28>
 8006442:	2300      	movs	r3, #0
 8006444:	e7e3      	b.n	800640e <_dtoa_r+0x246>
 8006446:	2300      	movs	r3, #0
 8006448:	e7d5      	b.n	80063f6 <_dtoa_r+0x22e>
 800644a:	2401      	movs	r4, #1
 800644c:	2300      	movs	r3, #0
 800644e:	9320      	str	r3, [sp, #128]	@ 0x80
 8006450:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006452:	f04f 3bff 	mov.w	fp, #4294967295
 8006456:	2200      	movs	r2, #0
 8006458:	f8cd b020 	str.w	fp, [sp, #32]
 800645c:	2312      	movs	r3, #18
 800645e:	9221      	str	r2, [sp, #132]	@ 0x84
 8006460:	e7db      	b.n	800641a <_dtoa_r+0x252>
 8006462:	2301      	movs	r3, #1
 8006464:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006466:	e7f4      	b.n	8006452 <_dtoa_r+0x28a>
 8006468:	f04f 0b01 	mov.w	fp, #1
 800646c:	f8cd b020 	str.w	fp, [sp, #32]
 8006470:	465b      	mov	r3, fp
 8006472:	f8cd b084 	str.w	fp, [sp, #132]	@ 0x84
 8006476:	e7d0      	b.n	800641a <_dtoa_r+0x252>
 8006478:	3101      	adds	r1, #1
 800647a:	0052      	lsls	r2, r2, #1
 800647c:	e7d1      	b.n	8006422 <_dtoa_r+0x25a>
 800647e:	bf00      	nop
 8006480:	636f4361 	.word	0x636f4361
 8006484:	3fd287a7 	.word	0x3fd287a7
 8006488:	8b60c8b3 	.word	0x8b60c8b3
 800648c:	3fc68a28 	.word	0x3fc68a28
 8006490:	509f79fb 	.word	0x509f79fb
 8006494:	3fd34413 	.word	0x3fd34413
 8006498:	08007ee1 	.word	0x08007ee1
 800649c:	08007ef8 	.word	0x08007ef8
 80064a0:	7ff00000 	.word	0x7ff00000
 80064a4:	08007edd 	.word	0x08007edd
 80064a8:	08007eb1 	.word	0x08007eb1
 80064ac:	08007eb0 	.word	0x08007eb0
 80064b0:	3ff80000 	.word	0x3ff80000
 80064b4:	08008048 	.word	0x08008048
 80064b8:	08007f50 	.word	0x08007f50
 80064bc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80064c0:	6018      	str	r0, [r3, #0]
 80064c2:	9b08      	ldr	r3, [sp, #32]
 80064c4:	2b0e      	cmp	r3, #14
 80064c6:	f200 80a1 	bhi.w	800660c <_dtoa_r+0x444>
 80064ca:	2c00      	cmp	r4, #0
 80064cc:	f000 809e 	beq.w	800660c <_dtoa_r+0x444>
 80064d0:	2f00      	cmp	r7, #0
 80064d2:	dd33      	ble.n	800653c <_dtoa_r+0x374>
 80064d4:	4b9c      	ldr	r3, [pc, #624]	@ (8006748 <_dtoa_r+0x580>)
 80064d6:	f007 020f 	and.w	r2, r7, #15
 80064da:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80064de:	e9d3 3400 	ldrd	r3, r4, [r3]
 80064e2:	05f8      	lsls	r0, r7, #23
 80064e4:	e9cd 3410 	strd	r3, r4, [sp, #64]	@ 0x40
 80064e8:	ea4f 1427 	mov.w	r4, r7, asr #4
 80064ec:	d516      	bpl.n	800651c <_dtoa_r+0x354>
 80064ee:	4b97      	ldr	r3, [pc, #604]	@ (800674c <_dtoa_r+0x584>)
 80064f0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80064f4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80064f8:	f7fa f980 	bl	80007fc <__aeabi_ddiv>
 80064fc:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006500:	f004 040f 	and.w	r4, r4, #15
 8006504:	2603      	movs	r6, #3
 8006506:	4d91      	ldr	r5, [pc, #580]	@ (800674c <_dtoa_r+0x584>)
 8006508:	b954      	cbnz	r4, 8006520 <_dtoa_r+0x358>
 800650a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800650e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006512:	f7fa f973 	bl	80007fc <__aeabi_ddiv>
 8006516:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800651a:	e028      	b.n	800656e <_dtoa_r+0x3a6>
 800651c:	2602      	movs	r6, #2
 800651e:	e7f2      	b.n	8006506 <_dtoa_r+0x33e>
 8006520:	07e1      	lsls	r1, r4, #31
 8006522:	d508      	bpl.n	8006536 <_dtoa_r+0x36e>
 8006524:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006528:	e9d5 2300 	ldrd	r2, r3, [r5]
 800652c:	f7fa f83c 	bl	80005a8 <__aeabi_dmul>
 8006530:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006534:	3601      	adds	r6, #1
 8006536:	1064      	asrs	r4, r4, #1
 8006538:	3508      	adds	r5, #8
 800653a:	e7e5      	b.n	8006508 <_dtoa_r+0x340>
 800653c:	f000 80af 	beq.w	800669e <_dtoa_r+0x4d6>
 8006540:	427c      	negs	r4, r7
 8006542:	4b81      	ldr	r3, [pc, #516]	@ (8006748 <_dtoa_r+0x580>)
 8006544:	4d81      	ldr	r5, [pc, #516]	@ (800674c <_dtoa_r+0x584>)
 8006546:	f004 020f 	and.w	r2, r4, #15
 800654a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800654e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006552:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006556:	f7fa f827 	bl	80005a8 <__aeabi_dmul>
 800655a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800655e:	1124      	asrs	r4, r4, #4
 8006560:	2300      	movs	r3, #0
 8006562:	2602      	movs	r6, #2
 8006564:	2c00      	cmp	r4, #0
 8006566:	f040 808f 	bne.w	8006688 <_dtoa_r+0x4c0>
 800656a:	2b00      	cmp	r3, #0
 800656c:	d1d3      	bne.n	8006516 <_dtoa_r+0x34e>
 800656e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006570:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8006574:	2b00      	cmp	r3, #0
 8006576:	f000 8094 	beq.w	80066a2 <_dtoa_r+0x4da>
 800657a:	4b75      	ldr	r3, [pc, #468]	@ (8006750 <_dtoa_r+0x588>)
 800657c:	2200      	movs	r2, #0
 800657e:	4620      	mov	r0, r4
 8006580:	4629      	mov	r1, r5
 8006582:	f7fa fa83 	bl	8000a8c <__aeabi_dcmplt>
 8006586:	2800      	cmp	r0, #0
 8006588:	f000 808b 	beq.w	80066a2 <_dtoa_r+0x4da>
 800658c:	9b08      	ldr	r3, [sp, #32]
 800658e:	2b00      	cmp	r3, #0
 8006590:	f000 8087 	beq.w	80066a2 <_dtoa_r+0x4da>
 8006594:	f1bb 0f00 	cmp.w	fp, #0
 8006598:	dd34      	ble.n	8006604 <_dtoa_r+0x43c>
 800659a:	4620      	mov	r0, r4
 800659c:	4b6d      	ldr	r3, [pc, #436]	@ (8006754 <_dtoa_r+0x58c>)
 800659e:	2200      	movs	r2, #0
 80065a0:	4629      	mov	r1, r5
 80065a2:	f7fa f801 	bl	80005a8 <__aeabi_dmul>
 80065a6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80065aa:	f107 38ff 	add.w	r8, r7, #4294967295
 80065ae:	3601      	adds	r6, #1
 80065b0:	465c      	mov	r4, fp
 80065b2:	4630      	mov	r0, r6
 80065b4:	f7f9 ff8e 	bl	80004d4 <__aeabi_i2d>
 80065b8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80065bc:	f7f9 fff4 	bl	80005a8 <__aeabi_dmul>
 80065c0:	4b65      	ldr	r3, [pc, #404]	@ (8006758 <_dtoa_r+0x590>)
 80065c2:	2200      	movs	r2, #0
 80065c4:	f7f9 fe3a 	bl	800023c <__adddf3>
 80065c8:	4605      	mov	r5, r0
 80065ca:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80065ce:	2c00      	cmp	r4, #0
 80065d0:	d16a      	bne.n	80066a8 <_dtoa_r+0x4e0>
 80065d2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80065d6:	4b61      	ldr	r3, [pc, #388]	@ (800675c <_dtoa_r+0x594>)
 80065d8:	2200      	movs	r2, #0
 80065da:	f7f9 fe2d 	bl	8000238 <__aeabi_dsub>
 80065de:	4602      	mov	r2, r0
 80065e0:	460b      	mov	r3, r1
 80065e2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80065e6:	462a      	mov	r2, r5
 80065e8:	4633      	mov	r3, r6
 80065ea:	f7fa fa6d 	bl	8000ac8 <__aeabi_dcmpgt>
 80065ee:	2800      	cmp	r0, #0
 80065f0:	f040 8298 	bne.w	8006b24 <_dtoa_r+0x95c>
 80065f4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80065f8:	462a      	mov	r2, r5
 80065fa:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80065fe:	f7fa fa45 	bl	8000a8c <__aeabi_dcmplt>
 8006602:	bb38      	cbnz	r0, 8006654 <_dtoa_r+0x48c>
 8006604:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8006608:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800660c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800660e:	2b00      	cmp	r3, #0
 8006610:	f2c0 8157 	blt.w	80068c2 <_dtoa_r+0x6fa>
 8006614:	2f0e      	cmp	r7, #14
 8006616:	f300 8154 	bgt.w	80068c2 <_dtoa_r+0x6fa>
 800661a:	4b4b      	ldr	r3, [pc, #300]	@ (8006748 <_dtoa_r+0x580>)
 800661c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006620:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006624:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006628:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800662a:	2b00      	cmp	r3, #0
 800662c:	f280 80e5 	bge.w	80067fa <_dtoa_r+0x632>
 8006630:	9b08      	ldr	r3, [sp, #32]
 8006632:	2b00      	cmp	r3, #0
 8006634:	f300 80e1 	bgt.w	80067fa <_dtoa_r+0x632>
 8006638:	d10c      	bne.n	8006654 <_dtoa_r+0x48c>
 800663a:	4b48      	ldr	r3, [pc, #288]	@ (800675c <_dtoa_r+0x594>)
 800663c:	2200      	movs	r2, #0
 800663e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006642:	f7f9 ffb1 	bl	80005a8 <__aeabi_dmul>
 8006646:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800664a:	f7fa fa33 	bl	8000ab4 <__aeabi_dcmpge>
 800664e:	2800      	cmp	r0, #0
 8006650:	f000 8266 	beq.w	8006b20 <_dtoa_r+0x958>
 8006654:	2400      	movs	r4, #0
 8006656:	4625      	mov	r5, r4
 8006658:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800665a:	4656      	mov	r6, sl
 800665c:	ea6f 0803 	mvn.w	r8, r3
 8006660:	2700      	movs	r7, #0
 8006662:	4621      	mov	r1, r4
 8006664:	4648      	mov	r0, r9
 8006666:	f000 fcbf 	bl	8006fe8 <_Bfree>
 800666a:	2d00      	cmp	r5, #0
 800666c:	f000 80bd 	beq.w	80067ea <_dtoa_r+0x622>
 8006670:	b12f      	cbz	r7, 800667e <_dtoa_r+0x4b6>
 8006672:	42af      	cmp	r7, r5
 8006674:	d003      	beq.n	800667e <_dtoa_r+0x4b6>
 8006676:	4639      	mov	r1, r7
 8006678:	4648      	mov	r0, r9
 800667a:	f000 fcb5 	bl	8006fe8 <_Bfree>
 800667e:	4629      	mov	r1, r5
 8006680:	4648      	mov	r0, r9
 8006682:	f000 fcb1 	bl	8006fe8 <_Bfree>
 8006686:	e0b0      	b.n	80067ea <_dtoa_r+0x622>
 8006688:	07e2      	lsls	r2, r4, #31
 800668a:	d505      	bpl.n	8006698 <_dtoa_r+0x4d0>
 800668c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006690:	f7f9 ff8a 	bl	80005a8 <__aeabi_dmul>
 8006694:	3601      	adds	r6, #1
 8006696:	2301      	movs	r3, #1
 8006698:	1064      	asrs	r4, r4, #1
 800669a:	3508      	adds	r5, #8
 800669c:	e762      	b.n	8006564 <_dtoa_r+0x39c>
 800669e:	2602      	movs	r6, #2
 80066a0:	e765      	b.n	800656e <_dtoa_r+0x3a6>
 80066a2:	9c08      	ldr	r4, [sp, #32]
 80066a4:	46b8      	mov	r8, r7
 80066a6:	e784      	b.n	80065b2 <_dtoa_r+0x3ea>
 80066a8:	4b27      	ldr	r3, [pc, #156]	@ (8006748 <_dtoa_r+0x580>)
 80066aa:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80066ac:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80066b0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80066b4:	4454      	add	r4, sl
 80066b6:	2900      	cmp	r1, #0
 80066b8:	d054      	beq.n	8006764 <_dtoa_r+0x59c>
 80066ba:	4929      	ldr	r1, [pc, #164]	@ (8006760 <_dtoa_r+0x598>)
 80066bc:	2000      	movs	r0, #0
 80066be:	f7fa f89d 	bl	80007fc <__aeabi_ddiv>
 80066c2:	4633      	mov	r3, r6
 80066c4:	462a      	mov	r2, r5
 80066c6:	f7f9 fdb7 	bl	8000238 <__aeabi_dsub>
 80066ca:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80066ce:	4656      	mov	r6, sl
 80066d0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80066d4:	f7fa fa18 	bl	8000b08 <__aeabi_d2iz>
 80066d8:	4605      	mov	r5, r0
 80066da:	f7f9 fefb 	bl	80004d4 <__aeabi_i2d>
 80066de:	4602      	mov	r2, r0
 80066e0:	460b      	mov	r3, r1
 80066e2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80066e6:	f7f9 fda7 	bl	8000238 <__aeabi_dsub>
 80066ea:	3530      	adds	r5, #48	@ 0x30
 80066ec:	4602      	mov	r2, r0
 80066ee:	460b      	mov	r3, r1
 80066f0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80066f4:	f806 5b01 	strb.w	r5, [r6], #1
 80066f8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80066fc:	f7fa f9c6 	bl	8000a8c <__aeabi_dcmplt>
 8006700:	2800      	cmp	r0, #0
 8006702:	d172      	bne.n	80067ea <_dtoa_r+0x622>
 8006704:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006708:	4911      	ldr	r1, [pc, #68]	@ (8006750 <_dtoa_r+0x588>)
 800670a:	2000      	movs	r0, #0
 800670c:	f7f9 fd94 	bl	8000238 <__aeabi_dsub>
 8006710:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006714:	f7fa f9ba 	bl	8000a8c <__aeabi_dcmplt>
 8006718:	2800      	cmp	r0, #0
 800671a:	f040 80b4 	bne.w	8006886 <_dtoa_r+0x6be>
 800671e:	42a6      	cmp	r6, r4
 8006720:	f43f af70 	beq.w	8006604 <_dtoa_r+0x43c>
 8006724:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006728:	4b0a      	ldr	r3, [pc, #40]	@ (8006754 <_dtoa_r+0x58c>)
 800672a:	2200      	movs	r2, #0
 800672c:	f7f9 ff3c 	bl	80005a8 <__aeabi_dmul>
 8006730:	4b08      	ldr	r3, [pc, #32]	@ (8006754 <_dtoa_r+0x58c>)
 8006732:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006736:	2200      	movs	r2, #0
 8006738:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800673c:	f7f9 ff34 	bl	80005a8 <__aeabi_dmul>
 8006740:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006744:	e7c4      	b.n	80066d0 <_dtoa_r+0x508>
 8006746:	bf00      	nop
 8006748:	08008048 	.word	0x08008048
 800674c:	08008020 	.word	0x08008020
 8006750:	3ff00000 	.word	0x3ff00000
 8006754:	40240000 	.word	0x40240000
 8006758:	401c0000 	.word	0x401c0000
 800675c:	40140000 	.word	0x40140000
 8006760:	3fe00000 	.word	0x3fe00000
 8006764:	4631      	mov	r1, r6
 8006766:	4628      	mov	r0, r5
 8006768:	f7f9 ff1e 	bl	80005a8 <__aeabi_dmul>
 800676c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006770:	9413      	str	r4, [sp, #76]	@ 0x4c
 8006772:	4656      	mov	r6, sl
 8006774:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006778:	f7fa f9c6 	bl	8000b08 <__aeabi_d2iz>
 800677c:	4605      	mov	r5, r0
 800677e:	f7f9 fea9 	bl	80004d4 <__aeabi_i2d>
 8006782:	4602      	mov	r2, r0
 8006784:	460b      	mov	r3, r1
 8006786:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800678a:	f7f9 fd55 	bl	8000238 <__aeabi_dsub>
 800678e:	3530      	adds	r5, #48	@ 0x30
 8006790:	f806 5b01 	strb.w	r5, [r6], #1
 8006794:	4602      	mov	r2, r0
 8006796:	460b      	mov	r3, r1
 8006798:	42a6      	cmp	r6, r4
 800679a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800679e:	f04f 0200 	mov.w	r2, #0
 80067a2:	d124      	bne.n	80067ee <_dtoa_r+0x626>
 80067a4:	4baf      	ldr	r3, [pc, #700]	@ (8006a64 <_dtoa_r+0x89c>)
 80067a6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80067aa:	f7f9 fd47 	bl	800023c <__adddf3>
 80067ae:	4602      	mov	r2, r0
 80067b0:	460b      	mov	r3, r1
 80067b2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80067b6:	f7fa f987 	bl	8000ac8 <__aeabi_dcmpgt>
 80067ba:	2800      	cmp	r0, #0
 80067bc:	d163      	bne.n	8006886 <_dtoa_r+0x6be>
 80067be:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80067c2:	49a8      	ldr	r1, [pc, #672]	@ (8006a64 <_dtoa_r+0x89c>)
 80067c4:	2000      	movs	r0, #0
 80067c6:	f7f9 fd37 	bl	8000238 <__aeabi_dsub>
 80067ca:	4602      	mov	r2, r0
 80067cc:	460b      	mov	r3, r1
 80067ce:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80067d2:	f7fa f95b 	bl	8000a8c <__aeabi_dcmplt>
 80067d6:	2800      	cmp	r0, #0
 80067d8:	f43f af14 	beq.w	8006604 <_dtoa_r+0x43c>
 80067dc:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80067de:	1e73      	subs	r3, r6, #1
 80067e0:	9313      	str	r3, [sp, #76]	@ 0x4c
 80067e2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80067e6:	2b30      	cmp	r3, #48	@ 0x30
 80067e8:	d0f8      	beq.n	80067dc <_dtoa_r+0x614>
 80067ea:	4647      	mov	r7, r8
 80067ec:	e03b      	b.n	8006866 <_dtoa_r+0x69e>
 80067ee:	4b9e      	ldr	r3, [pc, #632]	@ (8006a68 <_dtoa_r+0x8a0>)
 80067f0:	f7f9 feda 	bl	80005a8 <__aeabi_dmul>
 80067f4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80067f8:	e7bc      	b.n	8006774 <_dtoa_r+0x5ac>
 80067fa:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 80067fe:	4656      	mov	r6, sl
 8006800:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006804:	4620      	mov	r0, r4
 8006806:	4629      	mov	r1, r5
 8006808:	f7f9 fff8 	bl	80007fc <__aeabi_ddiv>
 800680c:	f7fa f97c 	bl	8000b08 <__aeabi_d2iz>
 8006810:	4680      	mov	r8, r0
 8006812:	f7f9 fe5f 	bl	80004d4 <__aeabi_i2d>
 8006816:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800681a:	f7f9 fec5 	bl	80005a8 <__aeabi_dmul>
 800681e:	4602      	mov	r2, r0
 8006820:	460b      	mov	r3, r1
 8006822:	4620      	mov	r0, r4
 8006824:	4629      	mov	r1, r5
 8006826:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800682a:	f7f9 fd05 	bl	8000238 <__aeabi_dsub>
 800682e:	f806 4b01 	strb.w	r4, [r6], #1
 8006832:	9d08      	ldr	r5, [sp, #32]
 8006834:	eba6 040a 	sub.w	r4, r6, sl
 8006838:	42a5      	cmp	r5, r4
 800683a:	4602      	mov	r2, r0
 800683c:	460b      	mov	r3, r1
 800683e:	d133      	bne.n	80068a8 <_dtoa_r+0x6e0>
 8006840:	f7f9 fcfc 	bl	800023c <__adddf3>
 8006844:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006848:	4604      	mov	r4, r0
 800684a:	460d      	mov	r5, r1
 800684c:	f7fa f93c 	bl	8000ac8 <__aeabi_dcmpgt>
 8006850:	b9c0      	cbnz	r0, 8006884 <_dtoa_r+0x6bc>
 8006852:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006856:	4620      	mov	r0, r4
 8006858:	4629      	mov	r1, r5
 800685a:	f7fa f90d 	bl	8000a78 <__aeabi_dcmpeq>
 800685e:	b110      	cbz	r0, 8006866 <_dtoa_r+0x69e>
 8006860:	f018 0f01 	tst.w	r8, #1
 8006864:	d10e      	bne.n	8006884 <_dtoa_r+0x6bc>
 8006866:	9903      	ldr	r1, [sp, #12]
 8006868:	4648      	mov	r0, r9
 800686a:	f000 fbbd 	bl	8006fe8 <_Bfree>
 800686e:	2300      	movs	r3, #0
 8006870:	7033      	strb	r3, [r6, #0]
 8006872:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8006874:	3701      	adds	r7, #1
 8006876:	601f      	str	r7, [r3, #0]
 8006878:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800687a:	2b00      	cmp	r3, #0
 800687c:	f000 824b 	beq.w	8006d16 <_dtoa_r+0xb4e>
 8006880:	601e      	str	r6, [r3, #0]
 8006882:	e248      	b.n	8006d16 <_dtoa_r+0xb4e>
 8006884:	46b8      	mov	r8, r7
 8006886:	4633      	mov	r3, r6
 8006888:	461e      	mov	r6, r3
 800688a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800688e:	2a39      	cmp	r2, #57	@ 0x39
 8006890:	d106      	bne.n	80068a0 <_dtoa_r+0x6d8>
 8006892:	459a      	cmp	sl, r3
 8006894:	d1f8      	bne.n	8006888 <_dtoa_r+0x6c0>
 8006896:	2230      	movs	r2, #48	@ 0x30
 8006898:	f108 0801 	add.w	r8, r8, #1
 800689c:	f88a 2000 	strb.w	r2, [sl]
 80068a0:	781a      	ldrb	r2, [r3, #0]
 80068a2:	3201      	adds	r2, #1
 80068a4:	701a      	strb	r2, [r3, #0]
 80068a6:	e7a0      	b.n	80067ea <_dtoa_r+0x622>
 80068a8:	4b6f      	ldr	r3, [pc, #444]	@ (8006a68 <_dtoa_r+0x8a0>)
 80068aa:	2200      	movs	r2, #0
 80068ac:	f7f9 fe7c 	bl	80005a8 <__aeabi_dmul>
 80068b0:	2200      	movs	r2, #0
 80068b2:	2300      	movs	r3, #0
 80068b4:	4604      	mov	r4, r0
 80068b6:	460d      	mov	r5, r1
 80068b8:	f7fa f8de 	bl	8000a78 <__aeabi_dcmpeq>
 80068bc:	2800      	cmp	r0, #0
 80068be:	d09f      	beq.n	8006800 <_dtoa_r+0x638>
 80068c0:	e7d1      	b.n	8006866 <_dtoa_r+0x69e>
 80068c2:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80068c4:	2a00      	cmp	r2, #0
 80068c6:	f000 80ea 	beq.w	8006a9e <_dtoa_r+0x8d6>
 80068ca:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80068cc:	2a01      	cmp	r2, #1
 80068ce:	f300 80cd 	bgt.w	8006a6c <_dtoa_r+0x8a4>
 80068d2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80068d4:	2a00      	cmp	r2, #0
 80068d6:	f000 80c1 	beq.w	8006a5c <_dtoa_r+0x894>
 80068da:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80068de:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80068e0:	9e04      	ldr	r6, [sp, #16]
 80068e2:	9a04      	ldr	r2, [sp, #16]
 80068e4:	441a      	add	r2, r3
 80068e6:	9204      	str	r2, [sp, #16]
 80068e8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80068ea:	2101      	movs	r1, #1
 80068ec:	441a      	add	r2, r3
 80068ee:	4648      	mov	r0, r9
 80068f0:	9209      	str	r2, [sp, #36]	@ 0x24
 80068f2:	f000 fc2d 	bl	8007150 <__i2b>
 80068f6:	4605      	mov	r5, r0
 80068f8:	b166      	cbz	r6, 8006914 <_dtoa_r+0x74c>
 80068fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	dd09      	ble.n	8006914 <_dtoa_r+0x74c>
 8006900:	42b3      	cmp	r3, r6
 8006902:	9a04      	ldr	r2, [sp, #16]
 8006904:	bfa8      	it	ge
 8006906:	4633      	movge	r3, r6
 8006908:	1ad2      	subs	r2, r2, r3
 800690a:	9204      	str	r2, [sp, #16]
 800690c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800690e:	1af6      	subs	r6, r6, r3
 8006910:	1ad3      	subs	r3, r2, r3
 8006912:	9309      	str	r3, [sp, #36]	@ 0x24
 8006914:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006916:	b30b      	cbz	r3, 800695c <_dtoa_r+0x794>
 8006918:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800691a:	2b00      	cmp	r3, #0
 800691c:	f000 80c6 	beq.w	8006aac <_dtoa_r+0x8e4>
 8006920:	2c00      	cmp	r4, #0
 8006922:	f000 80c0 	beq.w	8006aa6 <_dtoa_r+0x8de>
 8006926:	4629      	mov	r1, r5
 8006928:	4622      	mov	r2, r4
 800692a:	4648      	mov	r0, r9
 800692c:	f000 fcc8 	bl	80072c0 <__pow5mult>
 8006930:	9a03      	ldr	r2, [sp, #12]
 8006932:	4601      	mov	r1, r0
 8006934:	4605      	mov	r5, r0
 8006936:	4648      	mov	r0, r9
 8006938:	f000 fc20 	bl	800717c <__multiply>
 800693c:	9903      	ldr	r1, [sp, #12]
 800693e:	4680      	mov	r8, r0
 8006940:	4648      	mov	r0, r9
 8006942:	f000 fb51 	bl	8006fe8 <_Bfree>
 8006946:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006948:	1b1b      	subs	r3, r3, r4
 800694a:	930a      	str	r3, [sp, #40]	@ 0x28
 800694c:	f000 80b1 	beq.w	8006ab2 <_dtoa_r+0x8ea>
 8006950:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006952:	4641      	mov	r1, r8
 8006954:	4648      	mov	r0, r9
 8006956:	f000 fcb3 	bl	80072c0 <__pow5mult>
 800695a:	9003      	str	r0, [sp, #12]
 800695c:	2101      	movs	r1, #1
 800695e:	4648      	mov	r0, r9
 8006960:	f000 fbf6 	bl	8007150 <__i2b>
 8006964:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006966:	4604      	mov	r4, r0
 8006968:	2b00      	cmp	r3, #0
 800696a:	f000 81d8 	beq.w	8006d1e <_dtoa_r+0xb56>
 800696e:	461a      	mov	r2, r3
 8006970:	4601      	mov	r1, r0
 8006972:	4648      	mov	r0, r9
 8006974:	f000 fca4 	bl	80072c0 <__pow5mult>
 8006978:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800697a:	2b01      	cmp	r3, #1
 800697c:	4604      	mov	r4, r0
 800697e:	f300 809f 	bgt.w	8006ac0 <_dtoa_r+0x8f8>
 8006982:	9b06      	ldr	r3, [sp, #24]
 8006984:	2b00      	cmp	r3, #0
 8006986:	f040 8097 	bne.w	8006ab8 <_dtoa_r+0x8f0>
 800698a:	9b07      	ldr	r3, [sp, #28]
 800698c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006990:	2b00      	cmp	r3, #0
 8006992:	f040 8093 	bne.w	8006abc <_dtoa_r+0x8f4>
 8006996:	9b07      	ldr	r3, [sp, #28]
 8006998:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800699c:	0d1b      	lsrs	r3, r3, #20
 800699e:	051b      	lsls	r3, r3, #20
 80069a0:	b133      	cbz	r3, 80069b0 <_dtoa_r+0x7e8>
 80069a2:	9b04      	ldr	r3, [sp, #16]
 80069a4:	3301      	adds	r3, #1
 80069a6:	9304      	str	r3, [sp, #16]
 80069a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80069aa:	3301      	adds	r3, #1
 80069ac:	9309      	str	r3, [sp, #36]	@ 0x24
 80069ae:	2301      	movs	r3, #1
 80069b0:	930a      	str	r3, [sp, #40]	@ 0x28
 80069b2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	f000 81b8 	beq.w	8006d2a <_dtoa_r+0xb62>
 80069ba:	6923      	ldr	r3, [r4, #16]
 80069bc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80069c0:	6918      	ldr	r0, [r3, #16]
 80069c2:	f000 fb79 	bl	80070b8 <__hi0bits>
 80069c6:	f1c0 0020 	rsb	r0, r0, #32
 80069ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80069cc:	4418      	add	r0, r3
 80069ce:	f010 001f 	ands.w	r0, r0, #31
 80069d2:	f000 8082 	beq.w	8006ada <_dtoa_r+0x912>
 80069d6:	f1c0 0320 	rsb	r3, r0, #32
 80069da:	2b04      	cmp	r3, #4
 80069dc:	dd73      	ble.n	8006ac6 <_dtoa_r+0x8fe>
 80069de:	9b04      	ldr	r3, [sp, #16]
 80069e0:	f1c0 001c 	rsb	r0, r0, #28
 80069e4:	4403      	add	r3, r0
 80069e6:	9304      	str	r3, [sp, #16]
 80069e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80069ea:	4403      	add	r3, r0
 80069ec:	4406      	add	r6, r0
 80069ee:	9309      	str	r3, [sp, #36]	@ 0x24
 80069f0:	9b04      	ldr	r3, [sp, #16]
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	dd05      	ble.n	8006a02 <_dtoa_r+0x83a>
 80069f6:	9903      	ldr	r1, [sp, #12]
 80069f8:	461a      	mov	r2, r3
 80069fa:	4648      	mov	r0, r9
 80069fc:	f000 fcba 	bl	8007374 <__lshift>
 8006a00:	9003      	str	r0, [sp, #12]
 8006a02:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	dd05      	ble.n	8006a14 <_dtoa_r+0x84c>
 8006a08:	4621      	mov	r1, r4
 8006a0a:	461a      	mov	r2, r3
 8006a0c:	4648      	mov	r0, r9
 8006a0e:	f000 fcb1 	bl	8007374 <__lshift>
 8006a12:	4604      	mov	r4, r0
 8006a14:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d061      	beq.n	8006ade <_dtoa_r+0x916>
 8006a1a:	9803      	ldr	r0, [sp, #12]
 8006a1c:	4621      	mov	r1, r4
 8006a1e:	f000 fd15 	bl	800744c <__mcmp>
 8006a22:	2800      	cmp	r0, #0
 8006a24:	da5b      	bge.n	8006ade <_dtoa_r+0x916>
 8006a26:	2300      	movs	r3, #0
 8006a28:	9903      	ldr	r1, [sp, #12]
 8006a2a:	220a      	movs	r2, #10
 8006a2c:	4648      	mov	r0, r9
 8006a2e:	f000 fafd 	bl	800702c <__multadd>
 8006a32:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006a34:	9003      	str	r0, [sp, #12]
 8006a36:	f107 38ff 	add.w	r8, r7, #4294967295
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	f000 8177 	beq.w	8006d2e <_dtoa_r+0xb66>
 8006a40:	4629      	mov	r1, r5
 8006a42:	2300      	movs	r3, #0
 8006a44:	220a      	movs	r2, #10
 8006a46:	4648      	mov	r0, r9
 8006a48:	f000 faf0 	bl	800702c <__multadd>
 8006a4c:	f1bb 0f00 	cmp.w	fp, #0
 8006a50:	4605      	mov	r5, r0
 8006a52:	dc6f      	bgt.n	8006b34 <_dtoa_r+0x96c>
 8006a54:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006a56:	2b02      	cmp	r3, #2
 8006a58:	dc49      	bgt.n	8006aee <_dtoa_r+0x926>
 8006a5a:	e06b      	b.n	8006b34 <_dtoa_r+0x96c>
 8006a5c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006a5e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8006a62:	e73c      	b.n	80068de <_dtoa_r+0x716>
 8006a64:	3fe00000 	.word	0x3fe00000
 8006a68:	40240000 	.word	0x40240000
 8006a6c:	9b08      	ldr	r3, [sp, #32]
 8006a6e:	1e5c      	subs	r4, r3, #1
 8006a70:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006a72:	42a3      	cmp	r3, r4
 8006a74:	db09      	blt.n	8006a8a <_dtoa_r+0x8c2>
 8006a76:	1b1c      	subs	r4, r3, r4
 8006a78:	9b08      	ldr	r3, [sp, #32]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	f6bf af30 	bge.w	80068e0 <_dtoa_r+0x718>
 8006a80:	9b04      	ldr	r3, [sp, #16]
 8006a82:	9a08      	ldr	r2, [sp, #32]
 8006a84:	1a9e      	subs	r6, r3, r2
 8006a86:	2300      	movs	r3, #0
 8006a88:	e72b      	b.n	80068e2 <_dtoa_r+0x71a>
 8006a8a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006a8c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006a8e:	940a      	str	r4, [sp, #40]	@ 0x28
 8006a90:	1ae3      	subs	r3, r4, r3
 8006a92:	441a      	add	r2, r3
 8006a94:	9e04      	ldr	r6, [sp, #16]
 8006a96:	9b08      	ldr	r3, [sp, #32]
 8006a98:	920e      	str	r2, [sp, #56]	@ 0x38
 8006a9a:	2400      	movs	r4, #0
 8006a9c:	e721      	b.n	80068e2 <_dtoa_r+0x71a>
 8006a9e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006aa0:	9e04      	ldr	r6, [sp, #16]
 8006aa2:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8006aa4:	e728      	b.n	80068f8 <_dtoa_r+0x730>
 8006aa6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8006aaa:	e751      	b.n	8006950 <_dtoa_r+0x788>
 8006aac:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006aae:	9903      	ldr	r1, [sp, #12]
 8006ab0:	e750      	b.n	8006954 <_dtoa_r+0x78c>
 8006ab2:	f8cd 800c 	str.w	r8, [sp, #12]
 8006ab6:	e751      	b.n	800695c <_dtoa_r+0x794>
 8006ab8:	2300      	movs	r3, #0
 8006aba:	e779      	b.n	80069b0 <_dtoa_r+0x7e8>
 8006abc:	9b06      	ldr	r3, [sp, #24]
 8006abe:	e777      	b.n	80069b0 <_dtoa_r+0x7e8>
 8006ac0:	2300      	movs	r3, #0
 8006ac2:	930a      	str	r3, [sp, #40]	@ 0x28
 8006ac4:	e779      	b.n	80069ba <_dtoa_r+0x7f2>
 8006ac6:	d093      	beq.n	80069f0 <_dtoa_r+0x828>
 8006ac8:	9a04      	ldr	r2, [sp, #16]
 8006aca:	331c      	adds	r3, #28
 8006acc:	441a      	add	r2, r3
 8006ace:	9204      	str	r2, [sp, #16]
 8006ad0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006ad2:	441a      	add	r2, r3
 8006ad4:	441e      	add	r6, r3
 8006ad6:	9209      	str	r2, [sp, #36]	@ 0x24
 8006ad8:	e78a      	b.n	80069f0 <_dtoa_r+0x828>
 8006ada:	4603      	mov	r3, r0
 8006adc:	e7f4      	b.n	8006ac8 <_dtoa_r+0x900>
 8006ade:	9b08      	ldr	r3, [sp, #32]
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	46b8      	mov	r8, r7
 8006ae4:	dc20      	bgt.n	8006b28 <_dtoa_r+0x960>
 8006ae6:	469b      	mov	fp, r3
 8006ae8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006aea:	2b02      	cmp	r3, #2
 8006aec:	dd1e      	ble.n	8006b2c <_dtoa_r+0x964>
 8006aee:	f1bb 0f00 	cmp.w	fp, #0
 8006af2:	f47f adb1 	bne.w	8006658 <_dtoa_r+0x490>
 8006af6:	4621      	mov	r1, r4
 8006af8:	465b      	mov	r3, fp
 8006afa:	2205      	movs	r2, #5
 8006afc:	4648      	mov	r0, r9
 8006afe:	f000 fa95 	bl	800702c <__multadd>
 8006b02:	4601      	mov	r1, r0
 8006b04:	4604      	mov	r4, r0
 8006b06:	9803      	ldr	r0, [sp, #12]
 8006b08:	f000 fca0 	bl	800744c <__mcmp>
 8006b0c:	2800      	cmp	r0, #0
 8006b0e:	f77f ada3 	ble.w	8006658 <_dtoa_r+0x490>
 8006b12:	4656      	mov	r6, sl
 8006b14:	2331      	movs	r3, #49	@ 0x31
 8006b16:	f806 3b01 	strb.w	r3, [r6], #1
 8006b1a:	f108 0801 	add.w	r8, r8, #1
 8006b1e:	e59f      	b.n	8006660 <_dtoa_r+0x498>
 8006b20:	9c08      	ldr	r4, [sp, #32]
 8006b22:	46b8      	mov	r8, r7
 8006b24:	4625      	mov	r5, r4
 8006b26:	e7f4      	b.n	8006b12 <_dtoa_r+0x94a>
 8006b28:	f8dd b020 	ldr.w	fp, [sp, #32]
 8006b2c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	f000 8101 	beq.w	8006d36 <_dtoa_r+0xb6e>
 8006b34:	2e00      	cmp	r6, #0
 8006b36:	dd05      	ble.n	8006b44 <_dtoa_r+0x97c>
 8006b38:	4629      	mov	r1, r5
 8006b3a:	4632      	mov	r2, r6
 8006b3c:	4648      	mov	r0, r9
 8006b3e:	f000 fc19 	bl	8007374 <__lshift>
 8006b42:	4605      	mov	r5, r0
 8006b44:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d05c      	beq.n	8006c04 <_dtoa_r+0xa3c>
 8006b4a:	6869      	ldr	r1, [r5, #4]
 8006b4c:	4648      	mov	r0, r9
 8006b4e:	f000 fa0b 	bl	8006f68 <_Balloc>
 8006b52:	4606      	mov	r6, r0
 8006b54:	b928      	cbnz	r0, 8006b62 <_dtoa_r+0x99a>
 8006b56:	4b82      	ldr	r3, [pc, #520]	@ (8006d60 <_dtoa_r+0xb98>)
 8006b58:	4602      	mov	r2, r0
 8006b5a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8006b5e:	f7ff bb47 	b.w	80061f0 <_dtoa_r+0x28>
 8006b62:	692a      	ldr	r2, [r5, #16]
 8006b64:	3202      	adds	r2, #2
 8006b66:	0092      	lsls	r2, r2, #2
 8006b68:	f105 010c 	add.w	r1, r5, #12
 8006b6c:	300c      	adds	r0, #12
 8006b6e:	f000 ffef 	bl	8007b50 <memcpy>
 8006b72:	2201      	movs	r2, #1
 8006b74:	4631      	mov	r1, r6
 8006b76:	4648      	mov	r0, r9
 8006b78:	f000 fbfc 	bl	8007374 <__lshift>
 8006b7c:	f10a 0301 	add.w	r3, sl, #1
 8006b80:	9304      	str	r3, [sp, #16]
 8006b82:	eb0a 030b 	add.w	r3, sl, fp
 8006b86:	930a      	str	r3, [sp, #40]	@ 0x28
 8006b88:	9b06      	ldr	r3, [sp, #24]
 8006b8a:	f003 0301 	and.w	r3, r3, #1
 8006b8e:	462f      	mov	r7, r5
 8006b90:	9309      	str	r3, [sp, #36]	@ 0x24
 8006b92:	4605      	mov	r5, r0
 8006b94:	9b04      	ldr	r3, [sp, #16]
 8006b96:	9803      	ldr	r0, [sp, #12]
 8006b98:	4621      	mov	r1, r4
 8006b9a:	f103 3bff 	add.w	fp, r3, #4294967295
 8006b9e:	f7ff fa88 	bl	80060b2 <quorem>
 8006ba2:	4603      	mov	r3, r0
 8006ba4:	3330      	adds	r3, #48	@ 0x30
 8006ba6:	9006      	str	r0, [sp, #24]
 8006ba8:	4639      	mov	r1, r7
 8006baa:	9803      	ldr	r0, [sp, #12]
 8006bac:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006bae:	f000 fc4d 	bl	800744c <__mcmp>
 8006bb2:	462a      	mov	r2, r5
 8006bb4:	9008      	str	r0, [sp, #32]
 8006bb6:	4621      	mov	r1, r4
 8006bb8:	4648      	mov	r0, r9
 8006bba:	f000 fc63 	bl	8007484 <__mdiff>
 8006bbe:	68c2      	ldr	r2, [r0, #12]
 8006bc0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006bc2:	4606      	mov	r6, r0
 8006bc4:	bb02      	cbnz	r2, 8006c08 <_dtoa_r+0xa40>
 8006bc6:	4601      	mov	r1, r0
 8006bc8:	9803      	ldr	r0, [sp, #12]
 8006bca:	f000 fc3f 	bl	800744c <__mcmp>
 8006bce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006bd0:	4602      	mov	r2, r0
 8006bd2:	4631      	mov	r1, r6
 8006bd4:	4648      	mov	r0, r9
 8006bd6:	e9cd 320b 	strd	r3, r2, [sp, #44]	@ 0x2c
 8006bda:	f000 fa05 	bl	8006fe8 <_Bfree>
 8006bde:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006be0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8006be2:	9e04      	ldr	r6, [sp, #16]
 8006be4:	ea42 0103 	orr.w	r1, r2, r3
 8006be8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006bea:	4319      	orrs	r1, r3
 8006bec:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006bee:	d10d      	bne.n	8006c0c <_dtoa_r+0xa44>
 8006bf0:	2b39      	cmp	r3, #57	@ 0x39
 8006bf2:	d027      	beq.n	8006c44 <_dtoa_r+0xa7c>
 8006bf4:	9a08      	ldr	r2, [sp, #32]
 8006bf6:	2a00      	cmp	r2, #0
 8006bf8:	dd01      	ble.n	8006bfe <_dtoa_r+0xa36>
 8006bfa:	9b06      	ldr	r3, [sp, #24]
 8006bfc:	3331      	adds	r3, #49	@ 0x31
 8006bfe:	f88b 3000 	strb.w	r3, [fp]
 8006c02:	e52e      	b.n	8006662 <_dtoa_r+0x49a>
 8006c04:	4628      	mov	r0, r5
 8006c06:	e7b9      	b.n	8006b7c <_dtoa_r+0x9b4>
 8006c08:	2201      	movs	r2, #1
 8006c0a:	e7e2      	b.n	8006bd2 <_dtoa_r+0xa0a>
 8006c0c:	9908      	ldr	r1, [sp, #32]
 8006c0e:	2900      	cmp	r1, #0
 8006c10:	db04      	blt.n	8006c1c <_dtoa_r+0xa54>
 8006c12:	9820      	ldr	r0, [sp, #128]	@ 0x80
 8006c14:	4301      	orrs	r1, r0
 8006c16:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006c18:	4301      	orrs	r1, r0
 8006c1a:	d120      	bne.n	8006c5e <_dtoa_r+0xa96>
 8006c1c:	2a00      	cmp	r2, #0
 8006c1e:	ddee      	ble.n	8006bfe <_dtoa_r+0xa36>
 8006c20:	9903      	ldr	r1, [sp, #12]
 8006c22:	9304      	str	r3, [sp, #16]
 8006c24:	2201      	movs	r2, #1
 8006c26:	4648      	mov	r0, r9
 8006c28:	f000 fba4 	bl	8007374 <__lshift>
 8006c2c:	4621      	mov	r1, r4
 8006c2e:	9003      	str	r0, [sp, #12]
 8006c30:	f000 fc0c 	bl	800744c <__mcmp>
 8006c34:	2800      	cmp	r0, #0
 8006c36:	9b04      	ldr	r3, [sp, #16]
 8006c38:	dc02      	bgt.n	8006c40 <_dtoa_r+0xa78>
 8006c3a:	d1e0      	bne.n	8006bfe <_dtoa_r+0xa36>
 8006c3c:	07da      	lsls	r2, r3, #31
 8006c3e:	d5de      	bpl.n	8006bfe <_dtoa_r+0xa36>
 8006c40:	2b39      	cmp	r3, #57	@ 0x39
 8006c42:	d1da      	bne.n	8006bfa <_dtoa_r+0xa32>
 8006c44:	2339      	movs	r3, #57	@ 0x39
 8006c46:	f88b 3000 	strb.w	r3, [fp]
 8006c4a:	4633      	mov	r3, r6
 8006c4c:	461e      	mov	r6, r3
 8006c4e:	3b01      	subs	r3, #1
 8006c50:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8006c54:	2a39      	cmp	r2, #57	@ 0x39
 8006c56:	d04e      	beq.n	8006cf6 <_dtoa_r+0xb2e>
 8006c58:	3201      	adds	r2, #1
 8006c5a:	701a      	strb	r2, [r3, #0]
 8006c5c:	e501      	b.n	8006662 <_dtoa_r+0x49a>
 8006c5e:	2a00      	cmp	r2, #0
 8006c60:	dd03      	ble.n	8006c6a <_dtoa_r+0xaa2>
 8006c62:	2b39      	cmp	r3, #57	@ 0x39
 8006c64:	d0ee      	beq.n	8006c44 <_dtoa_r+0xa7c>
 8006c66:	3301      	adds	r3, #1
 8006c68:	e7c9      	b.n	8006bfe <_dtoa_r+0xa36>
 8006c6a:	9a04      	ldr	r2, [sp, #16]
 8006c6c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006c6e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8006c72:	428a      	cmp	r2, r1
 8006c74:	d028      	beq.n	8006cc8 <_dtoa_r+0xb00>
 8006c76:	9903      	ldr	r1, [sp, #12]
 8006c78:	2300      	movs	r3, #0
 8006c7a:	220a      	movs	r2, #10
 8006c7c:	4648      	mov	r0, r9
 8006c7e:	f000 f9d5 	bl	800702c <__multadd>
 8006c82:	42af      	cmp	r7, r5
 8006c84:	9003      	str	r0, [sp, #12]
 8006c86:	f04f 0300 	mov.w	r3, #0
 8006c8a:	f04f 020a 	mov.w	r2, #10
 8006c8e:	4639      	mov	r1, r7
 8006c90:	4648      	mov	r0, r9
 8006c92:	d107      	bne.n	8006ca4 <_dtoa_r+0xadc>
 8006c94:	f000 f9ca 	bl	800702c <__multadd>
 8006c98:	4607      	mov	r7, r0
 8006c9a:	4605      	mov	r5, r0
 8006c9c:	9b04      	ldr	r3, [sp, #16]
 8006c9e:	3301      	adds	r3, #1
 8006ca0:	9304      	str	r3, [sp, #16]
 8006ca2:	e777      	b.n	8006b94 <_dtoa_r+0x9cc>
 8006ca4:	f000 f9c2 	bl	800702c <__multadd>
 8006ca8:	4629      	mov	r1, r5
 8006caa:	4607      	mov	r7, r0
 8006cac:	2300      	movs	r3, #0
 8006cae:	220a      	movs	r2, #10
 8006cb0:	4648      	mov	r0, r9
 8006cb2:	f000 f9bb 	bl	800702c <__multadd>
 8006cb6:	4605      	mov	r5, r0
 8006cb8:	e7f0      	b.n	8006c9c <_dtoa_r+0xad4>
 8006cba:	f1bb 0f00 	cmp.w	fp, #0
 8006cbe:	bfcc      	ite	gt
 8006cc0:	465e      	movgt	r6, fp
 8006cc2:	2601      	movle	r6, #1
 8006cc4:	4456      	add	r6, sl
 8006cc6:	2700      	movs	r7, #0
 8006cc8:	9903      	ldr	r1, [sp, #12]
 8006cca:	9304      	str	r3, [sp, #16]
 8006ccc:	2201      	movs	r2, #1
 8006cce:	4648      	mov	r0, r9
 8006cd0:	f000 fb50 	bl	8007374 <__lshift>
 8006cd4:	4621      	mov	r1, r4
 8006cd6:	9003      	str	r0, [sp, #12]
 8006cd8:	f000 fbb8 	bl	800744c <__mcmp>
 8006cdc:	2800      	cmp	r0, #0
 8006cde:	dcb4      	bgt.n	8006c4a <_dtoa_r+0xa82>
 8006ce0:	d102      	bne.n	8006ce8 <_dtoa_r+0xb20>
 8006ce2:	9b04      	ldr	r3, [sp, #16]
 8006ce4:	07db      	lsls	r3, r3, #31
 8006ce6:	d4b0      	bmi.n	8006c4a <_dtoa_r+0xa82>
 8006ce8:	4633      	mov	r3, r6
 8006cea:	461e      	mov	r6, r3
 8006cec:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006cf0:	2a30      	cmp	r2, #48	@ 0x30
 8006cf2:	d0fa      	beq.n	8006cea <_dtoa_r+0xb22>
 8006cf4:	e4b5      	b.n	8006662 <_dtoa_r+0x49a>
 8006cf6:	459a      	cmp	sl, r3
 8006cf8:	d1a8      	bne.n	8006c4c <_dtoa_r+0xa84>
 8006cfa:	2331      	movs	r3, #49	@ 0x31
 8006cfc:	f108 0801 	add.w	r8, r8, #1
 8006d00:	f88a 3000 	strb.w	r3, [sl]
 8006d04:	e4ad      	b.n	8006662 <_dtoa_r+0x49a>
 8006d06:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8006d08:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8006d64 <_dtoa_r+0xb9c>
 8006d0c:	b11b      	cbz	r3, 8006d16 <_dtoa_r+0xb4e>
 8006d0e:	f10a 0308 	add.w	r3, sl, #8
 8006d12:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8006d14:	6013      	str	r3, [r2, #0]
 8006d16:	4650      	mov	r0, sl
 8006d18:	b017      	add	sp, #92	@ 0x5c
 8006d1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d1e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006d20:	2b01      	cmp	r3, #1
 8006d22:	f77f ae2e 	ble.w	8006982 <_dtoa_r+0x7ba>
 8006d26:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006d28:	930a      	str	r3, [sp, #40]	@ 0x28
 8006d2a:	2001      	movs	r0, #1
 8006d2c:	e64d      	b.n	80069ca <_dtoa_r+0x802>
 8006d2e:	f1bb 0f00 	cmp.w	fp, #0
 8006d32:	f77f aed9 	ble.w	8006ae8 <_dtoa_r+0x920>
 8006d36:	4656      	mov	r6, sl
 8006d38:	9803      	ldr	r0, [sp, #12]
 8006d3a:	4621      	mov	r1, r4
 8006d3c:	f7ff f9b9 	bl	80060b2 <quorem>
 8006d40:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8006d44:	f806 3b01 	strb.w	r3, [r6], #1
 8006d48:	eba6 020a 	sub.w	r2, r6, sl
 8006d4c:	4593      	cmp	fp, r2
 8006d4e:	ddb4      	ble.n	8006cba <_dtoa_r+0xaf2>
 8006d50:	9903      	ldr	r1, [sp, #12]
 8006d52:	2300      	movs	r3, #0
 8006d54:	220a      	movs	r2, #10
 8006d56:	4648      	mov	r0, r9
 8006d58:	f000 f968 	bl	800702c <__multadd>
 8006d5c:	9003      	str	r0, [sp, #12]
 8006d5e:	e7eb      	b.n	8006d38 <_dtoa_r+0xb70>
 8006d60:	08007f50 	.word	0x08007f50
 8006d64:	08007ed4 	.word	0x08007ed4

08006d68 <_free_r>:
 8006d68:	b538      	push	{r3, r4, r5, lr}
 8006d6a:	4605      	mov	r5, r0
 8006d6c:	2900      	cmp	r1, #0
 8006d6e:	d041      	beq.n	8006df4 <_free_r+0x8c>
 8006d70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006d74:	1f0c      	subs	r4, r1, #4
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	bfb8      	it	lt
 8006d7a:	18e4      	addlt	r4, r4, r3
 8006d7c:	f000 f8e8 	bl	8006f50 <__malloc_lock>
 8006d80:	4a1d      	ldr	r2, [pc, #116]	@ (8006df8 <_free_r+0x90>)
 8006d82:	6813      	ldr	r3, [r2, #0]
 8006d84:	b933      	cbnz	r3, 8006d94 <_free_r+0x2c>
 8006d86:	6063      	str	r3, [r4, #4]
 8006d88:	6014      	str	r4, [r2, #0]
 8006d8a:	4628      	mov	r0, r5
 8006d8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006d90:	f000 b8e4 	b.w	8006f5c <__malloc_unlock>
 8006d94:	42a3      	cmp	r3, r4
 8006d96:	d908      	bls.n	8006daa <_free_r+0x42>
 8006d98:	6820      	ldr	r0, [r4, #0]
 8006d9a:	1821      	adds	r1, r4, r0
 8006d9c:	428b      	cmp	r3, r1
 8006d9e:	bf01      	itttt	eq
 8006da0:	6819      	ldreq	r1, [r3, #0]
 8006da2:	685b      	ldreq	r3, [r3, #4]
 8006da4:	1809      	addeq	r1, r1, r0
 8006da6:	6021      	streq	r1, [r4, #0]
 8006da8:	e7ed      	b.n	8006d86 <_free_r+0x1e>
 8006daa:	461a      	mov	r2, r3
 8006dac:	685b      	ldr	r3, [r3, #4]
 8006dae:	b10b      	cbz	r3, 8006db4 <_free_r+0x4c>
 8006db0:	42a3      	cmp	r3, r4
 8006db2:	d9fa      	bls.n	8006daa <_free_r+0x42>
 8006db4:	6811      	ldr	r1, [r2, #0]
 8006db6:	1850      	adds	r0, r2, r1
 8006db8:	42a0      	cmp	r0, r4
 8006dba:	d10b      	bne.n	8006dd4 <_free_r+0x6c>
 8006dbc:	6820      	ldr	r0, [r4, #0]
 8006dbe:	4401      	add	r1, r0
 8006dc0:	1850      	adds	r0, r2, r1
 8006dc2:	4283      	cmp	r3, r0
 8006dc4:	6011      	str	r1, [r2, #0]
 8006dc6:	d1e0      	bne.n	8006d8a <_free_r+0x22>
 8006dc8:	6818      	ldr	r0, [r3, #0]
 8006dca:	685b      	ldr	r3, [r3, #4]
 8006dcc:	6053      	str	r3, [r2, #4]
 8006dce:	4408      	add	r0, r1
 8006dd0:	6010      	str	r0, [r2, #0]
 8006dd2:	e7da      	b.n	8006d8a <_free_r+0x22>
 8006dd4:	d902      	bls.n	8006ddc <_free_r+0x74>
 8006dd6:	230c      	movs	r3, #12
 8006dd8:	602b      	str	r3, [r5, #0]
 8006dda:	e7d6      	b.n	8006d8a <_free_r+0x22>
 8006ddc:	6820      	ldr	r0, [r4, #0]
 8006dde:	1821      	adds	r1, r4, r0
 8006de0:	428b      	cmp	r3, r1
 8006de2:	bf04      	itt	eq
 8006de4:	6819      	ldreq	r1, [r3, #0]
 8006de6:	685b      	ldreq	r3, [r3, #4]
 8006de8:	6063      	str	r3, [r4, #4]
 8006dea:	bf04      	itt	eq
 8006dec:	1809      	addeq	r1, r1, r0
 8006dee:	6021      	streq	r1, [r4, #0]
 8006df0:	6054      	str	r4, [r2, #4]
 8006df2:	e7ca      	b.n	8006d8a <_free_r+0x22>
 8006df4:	bd38      	pop	{r3, r4, r5, pc}
 8006df6:	bf00      	nop
 8006df8:	2000048c 	.word	0x2000048c

08006dfc <malloc>:
 8006dfc:	4b02      	ldr	r3, [pc, #8]	@ (8006e08 <malloc+0xc>)
 8006dfe:	4601      	mov	r1, r0
 8006e00:	6818      	ldr	r0, [r3, #0]
 8006e02:	f000 b825 	b.w	8006e50 <_malloc_r>
 8006e06:	bf00      	nop
 8006e08:	20000024 	.word	0x20000024

08006e0c <sbrk_aligned>:
 8006e0c:	b570      	push	{r4, r5, r6, lr}
 8006e0e:	4e0f      	ldr	r6, [pc, #60]	@ (8006e4c <sbrk_aligned+0x40>)
 8006e10:	460c      	mov	r4, r1
 8006e12:	6831      	ldr	r1, [r6, #0]
 8006e14:	4605      	mov	r5, r0
 8006e16:	b911      	cbnz	r1, 8006e1e <sbrk_aligned+0x12>
 8006e18:	f000 fe8a 	bl	8007b30 <_sbrk_r>
 8006e1c:	6030      	str	r0, [r6, #0]
 8006e1e:	4621      	mov	r1, r4
 8006e20:	4628      	mov	r0, r5
 8006e22:	f000 fe85 	bl	8007b30 <_sbrk_r>
 8006e26:	1c43      	adds	r3, r0, #1
 8006e28:	d103      	bne.n	8006e32 <sbrk_aligned+0x26>
 8006e2a:	f04f 34ff 	mov.w	r4, #4294967295
 8006e2e:	4620      	mov	r0, r4
 8006e30:	bd70      	pop	{r4, r5, r6, pc}
 8006e32:	1cc4      	adds	r4, r0, #3
 8006e34:	f024 0403 	bic.w	r4, r4, #3
 8006e38:	42a0      	cmp	r0, r4
 8006e3a:	d0f8      	beq.n	8006e2e <sbrk_aligned+0x22>
 8006e3c:	1a21      	subs	r1, r4, r0
 8006e3e:	4628      	mov	r0, r5
 8006e40:	f000 fe76 	bl	8007b30 <_sbrk_r>
 8006e44:	3001      	adds	r0, #1
 8006e46:	d1f2      	bne.n	8006e2e <sbrk_aligned+0x22>
 8006e48:	e7ef      	b.n	8006e2a <sbrk_aligned+0x1e>
 8006e4a:	bf00      	nop
 8006e4c:	20000488 	.word	0x20000488

08006e50 <_malloc_r>:
 8006e50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006e54:	1ccd      	adds	r5, r1, #3
 8006e56:	f025 0503 	bic.w	r5, r5, #3
 8006e5a:	3508      	adds	r5, #8
 8006e5c:	2d0c      	cmp	r5, #12
 8006e5e:	bf38      	it	cc
 8006e60:	250c      	movcc	r5, #12
 8006e62:	2d00      	cmp	r5, #0
 8006e64:	4606      	mov	r6, r0
 8006e66:	db01      	blt.n	8006e6c <_malloc_r+0x1c>
 8006e68:	42a9      	cmp	r1, r5
 8006e6a:	d904      	bls.n	8006e76 <_malloc_r+0x26>
 8006e6c:	230c      	movs	r3, #12
 8006e6e:	6033      	str	r3, [r6, #0]
 8006e70:	2000      	movs	r0, #0
 8006e72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006e76:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006f4c <_malloc_r+0xfc>
 8006e7a:	f000 f869 	bl	8006f50 <__malloc_lock>
 8006e7e:	f8d8 3000 	ldr.w	r3, [r8]
 8006e82:	461c      	mov	r4, r3
 8006e84:	bb44      	cbnz	r4, 8006ed8 <_malloc_r+0x88>
 8006e86:	4629      	mov	r1, r5
 8006e88:	4630      	mov	r0, r6
 8006e8a:	f7ff ffbf 	bl	8006e0c <sbrk_aligned>
 8006e8e:	1c43      	adds	r3, r0, #1
 8006e90:	4604      	mov	r4, r0
 8006e92:	d158      	bne.n	8006f46 <_malloc_r+0xf6>
 8006e94:	f8d8 4000 	ldr.w	r4, [r8]
 8006e98:	4627      	mov	r7, r4
 8006e9a:	2f00      	cmp	r7, #0
 8006e9c:	d143      	bne.n	8006f26 <_malloc_r+0xd6>
 8006e9e:	2c00      	cmp	r4, #0
 8006ea0:	d04b      	beq.n	8006f3a <_malloc_r+0xea>
 8006ea2:	6823      	ldr	r3, [r4, #0]
 8006ea4:	4639      	mov	r1, r7
 8006ea6:	4630      	mov	r0, r6
 8006ea8:	eb04 0903 	add.w	r9, r4, r3
 8006eac:	f000 fe40 	bl	8007b30 <_sbrk_r>
 8006eb0:	4581      	cmp	r9, r0
 8006eb2:	d142      	bne.n	8006f3a <_malloc_r+0xea>
 8006eb4:	6821      	ldr	r1, [r4, #0]
 8006eb6:	1a6d      	subs	r5, r5, r1
 8006eb8:	4629      	mov	r1, r5
 8006eba:	4630      	mov	r0, r6
 8006ebc:	f7ff ffa6 	bl	8006e0c <sbrk_aligned>
 8006ec0:	3001      	adds	r0, #1
 8006ec2:	d03a      	beq.n	8006f3a <_malloc_r+0xea>
 8006ec4:	6823      	ldr	r3, [r4, #0]
 8006ec6:	442b      	add	r3, r5
 8006ec8:	6023      	str	r3, [r4, #0]
 8006eca:	f8d8 3000 	ldr.w	r3, [r8]
 8006ece:	685a      	ldr	r2, [r3, #4]
 8006ed0:	bb62      	cbnz	r2, 8006f2c <_malloc_r+0xdc>
 8006ed2:	f8c8 7000 	str.w	r7, [r8]
 8006ed6:	e00f      	b.n	8006ef8 <_malloc_r+0xa8>
 8006ed8:	6822      	ldr	r2, [r4, #0]
 8006eda:	1b52      	subs	r2, r2, r5
 8006edc:	d420      	bmi.n	8006f20 <_malloc_r+0xd0>
 8006ede:	2a0b      	cmp	r2, #11
 8006ee0:	d917      	bls.n	8006f12 <_malloc_r+0xc2>
 8006ee2:	1961      	adds	r1, r4, r5
 8006ee4:	42a3      	cmp	r3, r4
 8006ee6:	6025      	str	r5, [r4, #0]
 8006ee8:	bf18      	it	ne
 8006eea:	6059      	strne	r1, [r3, #4]
 8006eec:	6863      	ldr	r3, [r4, #4]
 8006eee:	bf08      	it	eq
 8006ef0:	f8c8 1000 	streq.w	r1, [r8]
 8006ef4:	5162      	str	r2, [r4, r5]
 8006ef6:	604b      	str	r3, [r1, #4]
 8006ef8:	4630      	mov	r0, r6
 8006efa:	f000 f82f 	bl	8006f5c <__malloc_unlock>
 8006efe:	f104 000b 	add.w	r0, r4, #11
 8006f02:	1d23      	adds	r3, r4, #4
 8006f04:	f020 0007 	bic.w	r0, r0, #7
 8006f08:	1ac2      	subs	r2, r0, r3
 8006f0a:	bf1c      	itt	ne
 8006f0c:	1a1b      	subne	r3, r3, r0
 8006f0e:	50a3      	strne	r3, [r4, r2]
 8006f10:	e7af      	b.n	8006e72 <_malloc_r+0x22>
 8006f12:	6862      	ldr	r2, [r4, #4]
 8006f14:	42a3      	cmp	r3, r4
 8006f16:	bf0c      	ite	eq
 8006f18:	f8c8 2000 	streq.w	r2, [r8]
 8006f1c:	605a      	strne	r2, [r3, #4]
 8006f1e:	e7eb      	b.n	8006ef8 <_malloc_r+0xa8>
 8006f20:	4623      	mov	r3, r4
 8006f22:	6864      	ldr	r4, [r4, #4]
 8006f24:	e7ae      	b.n	8006e84 <_malloc_r+0x34>
 8006f26:	463c      	mov	r4, r7
 8006f28:	687f      	ldr	r7, [r7, #4]
 8006f2a:	e7b6      	b.n	8006e9a <_malloc_r+0x4a>
 8006f2c:	461a      	mov	r2, r3
 8006f2e:	685b      	ldr	r3, [r3, #4]
 8006f30:	42a3      	cmp	r3, r4
 8006f32:	d1fb      	bne.n	8006f2c <_malloc_r+0xdc>
 8006f34:	2300      	movs	r3, #0
 8006f36:	6053      	str	r3, [r2, #4]
 8006f38:	e7de      	b.n	8006ef8 <_malloc_r+0xa8>
 8006f3a:	230c      	movs	r3, #12
 8006f3c:	6033      	str	r3, [r6, #0]
 8006f3e:	4630      	mov	r0, r6
 8006f40:	f000 f80c 	bl	8006f5c <__malloc_unlock>
 8006f44:	e794      	b.n	8006e70 <_malloc_r+0x20>
 8006f46:	6005      	str	r5, [r0, #0]
 8006f48:	e7d6      	b.n	8006ef8 <_malloc_r+0xa8>
 8006f4a:	bf00      	nop
 8006f4c:	2000048c 	.word	0x2000048c

08006f50 <__malloc_lock>:
 8006f50:	4801      	ldr	r0, [pc, #4]	@ (8006f58 <__malloc_lock+0x8>)
 8006f52:	f7ff b8ac 	b.w	80060ae <__retarget_lock_acquire_recursive>
 8006f56:	bf00      	nop
 8006f58:	20000484 	.word	0x20000484

08006f5c <__malloc_unlock>:
 8006f5c:	4801      	ldr	r0, [pc, #4]	@ (8006f64 <__malloc_unlock+0x8>)
 8006f5e:	f7ff b8a7 	b.w	80060b0 <__retarget_lock_release_recursive>
 8006f62:	bf00      	nop
 8006f64:	20000484 	.word	0x20000484

08006f68 <_Balloc>:
 8006f68:	b570      	push	{r4, r5, r6, lr}
 8006f6a:	69c6      	ldr	r6, [r0, #28]
 8006f6c:	4604      	mov	r4, r0
 8006f6e:	460d      	mov	r5, r1
 8006f70:	b976      	cbnz	r6, 8006f90 <_Balloc+0x28>
 8006f72:	2010      	movs	r0, #16
 8006f74:	f7ff ff42 	bl	8006dfc <malloc>
 8006f78:	4602      	mov	r2, r0
 8006f7a:	61e0      	str	r0, [r4, #28]
 8006f7c:	b920      	cbnz	r0, 8006f88 <_Balloc+0x20>
 8006f7e:	4b18      	ldr	r3, [pc, #96]	@ (8006fe0 <_Balloc+0x78>)
 8006f80:	4818      	ldr	r0, [pc, #96]	@ (8006fe4 <_Balloc+0x7c>)
 8006f82:	216b      	movs	r1, #107	@ 0x6b
 8006f84:	f000 fdf2 	bl	8007b6c <__assert_func>
 8006f88:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006f8c:	6006      	str	r6, [r0, #0]
 8006f8e:	60c6      	str	r6, [r0, #12]
 8006f90:	69e6      	ldr	r6, [r4, #28]
 8006f92:	68f3      	ldr	r3, [r6, #12]
 8006f94:	b183      	cbz	r3, 8006fb8 <_Balloc+0x50>
 8006f96:	69e3      	ldr	r3, [r4, #28]
 8006f98:	68db      	ldr	r3, [r3, #12]
 8006f9a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006f9e:	b9b8      	cbnz	r0, 8006fd0 <_Balloc+0x68>
 8006fa0:	2101      	movs	r1, #1
 8006fa2:	fa01 f605 	lsl.w	r6, r1, r5
 8006fa6:	1d72      	adds	r2, r6, #5
 8006fa8:	0092      	lsls	r2, r2, #2
 8006faa:	4620      	mov	r0, r4
 8006fac:	f000 fdfc 	bl	8007ba8 <_calloc_r>
 8006fb0:	b160      	cbz	r0, 8006fcc <_Balloc+0x64>
 8006fb2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006fb6:	e00e      	b.n	8006fd6 <_Balloc+0x6e>
 8006fb8:	2221      	movs	r2, #33	@ 0x21
 8006fba:	2104      	movs	r1, #4
 8006fbc:	4620      	mov	r0, r4
 8006fbe:	f000 fdf3 	bl	8007ba8 <_calloc_r>
 8006fc2:	69e3      	ldr	r3, [r4, #28]
 8006fc4:	60f0      	str	r0, [r6, #12]
 8006fc6:	68db      	ldr	r3, [r3, #12]
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d1e4      	bne.n	8006f96 <_Balloc+0x2e>
 8006fcc:	2000      	movs	r0, #0
 8006fce:	bd70      	pop	{r4, r5, r6, pc}
 8006fd0:	6802      	ldr	r2, [r0, #0]
 8006fd2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006fd6:	2300      	movs	r3, #0
 8006fd8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006fdc:	e7f7      	b.n	8006fce <_Balloc+0x66>
 8006fde:	bf00      	nop
 8006fe0:	08007ee1 	.word	0x08007ee1
 8006fe4:	08007f61 	.word	0x08007f61

08006fe8 <_Bfree>:
 8006fe8:	b570      	push	{r4, r5, r6, lr}
 8006fea:	69c6      	ldr	r6, [r0, #28]
 8006fec:	4605      	mov	r5, r0
 8006fee:	460c      	mov	r4, r1
 8006ff0:	b976      	cbnz	r6, 8007010 <_Bfree+0x28>
 8006ff2:	2010      	movs	r0, #16
 8006ff4:	f7ff ff02 	bl	8006dfc <malloc>
 8006ff8:	4602      	mov	r2, r0
 8006ffa:	61e8      	str	r0, [r5, #28]
 8006ffc:	b920      	cbnz	r0, 8007008 <_Bfree+0x20>
 8006ffe:	4b09      	ldr	r3, [pc, #36]	@ (8007024 <_Bfree+0x3c>)
 8007000:	4809      	ldr	r0, [pc, #36]	@ (8007028 <_Bfree+0x40>)
 8007002:	218f      	movs	r1, #143	@ 0x8f
 8007004:	f000 fdb2 	bl	8007b6c <__assert_func>
 8007008:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800700c:	6006      	str	r6, [r0, #0]
 800700e:	60c6      	str	r6, [r0, #12]
 8007010:	b13c      	cbz	r4, 8007022 <_Bfree+0x3a>
 8007012:	69eb      	ldr	r3, [r5, #28]
 8007014:	6862      	ldr	r2, [r4, #4]
 8007016:	68db      	ldr	r3, [r3, #12]
 8007018:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800701c:	6021      	str	r1, [r4, #0]
 800701e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007022:	bd70      	pop	{r4, r5, r6, pc}
 8007024:	08007ee1 	.word	0x08007ee1
 8007028:	08007f61 	.word	0x08007f61

0800702c <__multadd>:
 800702c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007030:	690d      	ldr	r5, [r1, #16]
 8007032:	4607      	mov	r7, r0
 8007034:	460c      	mov	r4, r1
 8007036:	461e      	mov	r6, r3
 8007038:	f101 0c14 	add.w	ip, r1, #20
 800703c:	2000      	movs	r0, #0
 800703e:	f8dc 3000 	ldr.w	r3, [ip]
 8007042:	b299      	uxth	r1, r3
 8007044:	fb02 6101 	mla	r1, r2, r1, r6
 8007048:	0c1e      	lsrs	r6, r3, #16
 800704a:	0c0b      	lsrs	r3, r1, #16
 800704c:	fb02 3306 	mla	r3, r2, r6, r3
 8007050:	b289      	uxth	r1, r1
 8007052:	3001      	adds	r0, #1
 8007054:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007058:	4285      	cmp	r5, r0
 800705a:	f84c 1b04 	str.w	r1, [ip], #4
 800705e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007062:	dcec      	bgt.n	800703e <__multadd+0x12>
 8007064:	b30e      	cbz	r6, 80070aa <__multadd+0x7e>
 8007066:	68a3      	ldr	r3, [r4, #8]
 8007068:	42ab      	cmp	r3, r5
 800706a:	dc19      	bgt.n	80070a0 <__multadd+0x74>
 800706c:	6861      	ldr	r1, [r4, #4]
 800706e:	4638      	mov	r0, r7
 8007070:	3101      	adds	r1, #1
 8007072:	f7ff ff79 	bl	8006f68 <_Balloc>
 8007076:	4680      	mov	r8, r0
 8007078:	b928      	cbnz	r0, 8007086 <__multadd+0x5a>
 800707a:	4602      	mov	r2, r0
 800707c:	4b0c      	ldr	r3, [pc, #48]	@ (80070b0 <__multadd+0x84>)
 800707e:	480d      	ldr	r0, [pc, #52]	@ (80070b4 <__multadd+0x88>)
 8007080:	21ba      	movs	r1, #186	@ 0xba
 8007082:	f000 fd73 	bl	8007b6c <__assert_func>
 8007086:	6922      	ldr	r2, [r4, #16]
 8007088:	3202      	adds	r2, #2
 800708a:	f104 010c 	add.w	r1, r4, #12
 800708e:	0092      	lsls	r2, r2, #2
 8007090:	300c      	adds	r0, #12
 8007092:	f000 fd5d 	bl	8007b50 <memcpy>
 8007096:	4621      	mov	r1, r4
 8007098:	4638      	mov	r0, r7
 800709a:	f7ff ffa5 	bl	8006fe8 <_Bfree>
 800709e:	4644      	mov	r4, r8
 80070a0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80070a4:	3501      	adds	r5, #1
 80070a6:	615e      	str	r6, [r3, #20]
 80070a8:	6125      	str	r5, [r4, #16]
 80070aa:	4620      	mov	r0, r4
 80070ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80070b0:	08007f50 	.word	0x08007f50
 80070b4:	08007f61 	.word	0x08007f61

080070b8 <__hi0bits>:
 80070b8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80070bc:	4603      	mov	r3, r0
 80070be:	bf36      	itet	cc
 80070c0:	0403      	lslcc	r3, r0, #16
 80070c2:	2000      	movcs	r0, #0
 80070c4:	2010      	movcc	r0, #16
 80070c6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80070ca:	bf3c      	itt	cc
 80070cc:	021b      	lslcc	r3, r3, #8
 80070ce:	3008      	addcc	r0, #8
 80070d0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80070d4:	bf3c      	itt	cc
 80070d6:	011b      	lslcc	r3, r3, #4
 80070d8:	3004      	addcc	r0, #4
 80070da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80070de:	bf3c      	itt	cc
 80070e0:	009b      	lslcc	r3, r3, #2
 80070e2:	3002      	addcc	r0, #2
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	db05      	blt.n	80070f4 <__hi0bits+0x3c>
 80070e8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80070ec:	f100 0001 	add.w	r0, r0, #1
 80070f0:	bf08      	it	eq
 80070f2:	2020      	moveq	r0, #32
 80070f4:	4770      	bx	lr

080070f6 <__lo0bits>:
 80070f6:	6803      	ldr	r3, [r0, #0]
 80070f8:	4602      	mov	r2, r0
 80070fa:	f013 0007 	ands.w	r0, r3, #7
 80070fe:	d00b      	beq.n	8007118 <__lo0bits+0x22>
 8007100:	07d9      	lsls	r1, r3, #31
 8007102:	d421      	bmi.n	8007148 <__lo0bits+0x52>
 8007104:	0798      	lsls	r0, r3, #30
 8007106:	bf49      	itett	mi
 8007108:	085b      	lsrmi	r3, r3, #1
 800710a:	089b      	lsrpl	r3, r3, #2
 800710c:	2001      	movmi	r0, #1
 800710e:	6013      	strmi	r3, [r2, #0]
 8007110:	bf5c      	itt	pl
 8007112:	6013      	strpl	r3, [r2, #0]
 8007114:	2002      	movpl	r0, #2
 8007116:	4770      	bx	lr
 8007118:	b299      	uxth	r1, r3
 800711a:	b909      	cbnz	r1, 8007120 <__lo0bits+0x2a>
 800711c:	0c1b      	lsrs	r3, r3, #16
 800711e:	2010      	movs	r0, #16
 8007120:	b2d9      	uxtb	r1, r3
 8007122:	b909      	cbnz	r1, 8007128 <__lo0bits+0x32>
 8007124:	3008      	adds	r0, #8
 8007126:	0a1b      	lsrs	r3, r3, #8
 8007128:	0719      	lsls	r1, r3, #28
 800712a:	bf04      	itt	eq
 800712c:	091b      	lsreq	r3, r3, #4
 800712e:	3004      	addeq	r0, #4
 8007130:	0799      	lsls	r1, r3, #30
 8007132:	bf04      	itt	eq
 8007134:	089b      	lsreq	r3, r3, #2
 8007136:	3002      	addeq	r0, #2
 8007138:	07d9      	lsls	r1, r3, #31
 800713a:	d403      	bmi.n	8007144 <__lo0bits+0x4e>
 800713c:	085b      	lsrs	r3, r3, #1
 800713e:	f100 0001 	add.w	r0, r0, #1
 8007142:	d003      	beq.n	800714c <__lo0bits+0x56>
 8007144:	6013      	str	r3, [r2, #0]
 8007146:	4770      	bx	lr
 8007148:	2000      	movs	r0, #0
 800714a:	4770      	bx	lr
 800714c:	2020      	movs	r0, #32
 800714e:	4770      	bx	lr

08007150 <__i2b>:
 8007150:	b510      	push	{r4, lr}
 8007152:	460c      	mov	r4, r1
 8007154:	2101      	movs	r1, #1
 8007156:	f7ff ff07 	bl	8006f68 <_Balloc>
 800715a:	4602      	mov	r2, r0
 800715c:	b928      	cbnz	r0, 800716a <__i2b+0x1a>
 800715e:	4b05      	ldr	r3, [pc, #20]	@ (8007174 <__i2b+0x24>)
 8007160:	4805      	ldr	r0, [pc, #20]	@ (8007178 <__i2b+0x28>)
 8007162:	f240 1145 	movw	r1, #325	@ 0x145
 8007166:	f000 fd01 	bl	8007b6c <__assert_func>
 800716a:	2301      	movs	r3, #1
 800716c:	6144      	str	r4, [r0, #20]
 800716e:	6103      	str	r3, [r0, #16]
 8007170:	bd10      	pop	{r4, pc}
 8007172:	bf00      	nop
 8007174:	08007f50 	.word	0x08007f50
 8007178:	08007f61 	.word	0x08007f61

0800717c <__multiply>:
 800717c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007180:	4617      	mov	r7, r2
 8007182:	690a      	ldr	r2, [r1, #16]
 8007184:	693b      	ldr	r3, [r7, #16]
 8007186:	429a      	cmp	r2, r3
 8007188:	bfa8      	it	ge
 800718a:	463b      	movge	r3, r7
 800718c:	4689      	mov	r9, r1
 800718e:	bfa4      	itt	ge
 8007190:	460f      	movge	r7, r1
 8007192:	4699      	movge	r9, r3
 8007194:	693d      	ldr	r5, [r7, #16]
 8007196:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800719a:	68bb      	ldr	r3, [r7, #8]
 800719c:	6879      	ldr	r1, [r7, #4]
 800719e:	eb05 060a 	add.w	r6, r5, sl
 80071a2:	42b3      	cmp	r3, r6
 80071a4:	b085      	sub	sp, #20
 80071a6:	bfb8      	it	lt
 80071a8:	3101      	addlt	r1, #1
 80071aa:	f7ff fedd 	bl	8006f68 <_Balloc>
 80071ae:	b930      	cbnz	r0, 80071be <__multiply+0x42>
 80071b0:	4602      	mov	r2, r0
 80071b2:	4b41      	ldr	r3, [pc, #260]	@ (80072b8 <__multiply+0x13c>)
 80071b4:	4841      	ldr	r0, [pc, #260]	@ (80072bc <__multiply+0x140>)
 80071b6:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80071ba:	f000 fcd7 	bl	8007b6c <__assert_func>
 80071be:	f100 0414 	add.w	r4, r0, #20
 80071c2:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 80071c6:	4623      	mov	r3, r4
 80071c8:	2200      	movs	r2, #0
 80071ca:	4573      	cmp	r3, lr
 80071cc:	d320      	bcc.n	8007210 <__multiply+0x94>
 80071ce:	f107 0814 	add.w	r8, r7, #20
 80071d2:	f109 0114 	add.w	r1, r9, #20
 80071d6:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 80071da:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 80071de:	9302      	str	r3, [sp, #8]
 80071e0:	1beb      	subs	r3, r5, r7
 80071e2:	3b15      	subs	r3, #21
 80071e4:	f023 0303 	bic.w	r3, r3, #3
 80071e8:	3304      	adds	r3, #4
 80071ea:	3715      	adds	r7, #21
 80071ec:	42bd      	cmp	r5, r7
 80071ee:	bf38      	it	cc
 80071f0:	2304      	movcc	r3, #4
 80071f2:	9301      	str	r3, [sp, #4]
 80071f4:	9b02      	ldr	r3, [sp, #8]
 80071f6:	9103      	str	r1, [sp, #12]
 80071f8:	428b      	cmp	r3, r1
 80071fa:	d80c      	bhi.n	8007216 <__multiply+0x9a>
 80071fc:	2e00      	cmp	r6, #0
 80071fe:	dd03      	ble.n	8007208 <__multiply+0x8c>
 8007200:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8007204:	2b00      	cmp	r3, #0
 8007206:	d055      	beq.n	80072b4 <__multiply+0x138>
 8007208:	6106      	str	r6, [r0, #16]
 800720a:	b005      	add	sp, #20
 800720c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007210:	f843 2b04 	str.w	r2, [r3], #4
 8007214:	e7d9      	b.n	80071ca <__multiply+0x4e>
 8007216:	f8b1 a000 	ldrh.w	sl, [r1]
 800721a:	f1ba 0f00 	cmp.w	sl, #0
 800721e:	d01f      	beq.n	8007260 <__multiply+0xe4>
 8007220:	46c4      	mov	ip, r8
 8007222:	46a1      	mov	r9, r4
 8007224:	2700      	movs	r7, #0
 8007226:	f85c 2b04 	ldr.w	r2, [ip], #4
 800722a:	f8d9 3000 	ldr.w	r3, [r9]
 800722e:	fa1f fb82 	uxth.w	fp, r2
 8007232:	b29b      	uxth	r3, r3
 8007234:	fb0a 330b 	mla	r3, sl, fp, r3
 8007238:	443b      	add	r3, r7
 800723a:	f8d9 7000 	ldr.w	r7, [r9]
 800723e:	0c12      	lsrs	r2, r2, #16
 8007240:	0c3f      	lsrs	r7, r7, #16
 8007242:	fb0a 7202 	mla	r2, sl, r2, r7
 8007246:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800724a:	b29b      	uxth	r3, r3
 800724c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007250:	4565      	cmp	r5, ip
 8007252:	f849 3b04 	str.w	r3, [r9], #4
 8007256:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800725a:	d8e4      	bhi.n	8007226 <__multiply+0xaa>
 800725c:	9b01      	ldr	r3, [sp, #4]
 800725e:	50e7      	str	r7, [r4, r3]
 8007260:	9b03      	ldr	r3, [sp, #12]
 8007262:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8007266:	3104      	adds	r1, #4
 8007268:	f1b9 0f00 	cmp.w	r9, #0
 800726c:	d020      	beq.n	80072b0 <__multiply+0x134>
 800726e:	6823      	ldr	r3, [r4, #0]
 8007270:	4647      	mov	r7, r8
 8007272:	46a4      	mov	ip, r4
 8007274:	f04f 0a00 	mov.w	sl, #0
 8007278:	f8b7 b000 	ldrh.w	fp, [r7]
 800727c:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8007280:	fb09 220b 	mla	r2, r9, fp, r2
 8007284:	4452      	add	r2, sl
 8007286:	b29b      	uxth	r3, r3
 8007288:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800728c:	f84c 3b04 	str.w	r3, [ip], #4
 8007290:	f857 3b04 	ldr.w	r3, [r7], #4
 8007294:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007298:	f8bc 3000 	ldrh.w	r3, [ip]
 800729c:	fb09 330a 	mla	r3, r9, sl, r3
 80072a0:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 80072a4:	42bd      	cmp	r5, r7
 80072a6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80072aa:	d8e5      	bhi.n	8007278 <__multiply+0xfc>
 80072ac:	9a01      	ldr	r2, [sp, #4]
 80072ae:	50a3      	str	r3, [r4, r2]
 80072b0:	3404      	adds	r4, #4
 80072b2:	e79f      	b.n	80071f4 <__multiply+0x78>
 80072b4:	3e01      	subs	r6, #1
 80072b6:	e7a1      	b.n	80071fc <__multiply+0x80>
 80072b8:	08007f50 	.word	0x08007f50
 80072bc:	08007f61 	.word	0x08007f61

080072c0 <__pow5mult>:
 80072c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80072c4:	4615      	mov	r5, r2
 80072c6:	f012 0203 	ands.w	r2, r2, #3
 80072ca:	4607      	mov	r7, r0
 80072cc:	460e      	mov	r6, r1
 80072ce:	d007      	beq.n	80072e0 <__pow5mult+0x20>
 80072d0:	4c25      	ldr	r4, [pc, #148]	@ (8007368 <__pow5mult+0xa8>)
 80072d2:	3a01      	subs	r2, #1
 80072d4:	2300      	movs	r3, #0
 80072d6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80072da:	f7ff fea7 	bl	800702c <__multadd>
 80072de:	4606      	mov	r6, r0
 80072e0:	10ad      	asrs	r5, r5, #2
 80072e2:	d03d      	beq.n	8007360 <__pow5mult+0xa0>
 80072e4:	69fc      	ldr	r4, [r7, #28]
 80072e6:	b97c      	cbnz	r4, 8007308 <__pow5mult+0x48>
 80072e8:	2010      	movs	r0, #16
 80072ea:	f7ff fd87 	bl	8006dfc <malloc>
 80072ee:	4602      	mov	r2, r0
 80072f0:	61f8      	str	r0, [r7, #28]
 80072f2:	b928      	cbnz	r0, 8007300 <__pow5mult+0x40>
 80072f4:	4b1d      	ldr	r3, [pc, #116]	@ (800736c <__pow5mult+0xac>)
 80072f6:	481e      	ldr	r0, [pc, #120]	@ (8007370 <__pow5mult+0xb0>)
 80072f8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80072fc:	f000 fc36 	bl	8007b6c <__assert_func>
 8007300:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007304:	6004      	str	r4, [r0, #0]
 8007306:	60c4      	str	r4, [r0, #12]
 8007308:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800730c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007310:	b94c      	cbnz	r4, 8007326 <__pow5mult+0x66>
 8007312:	f240 2171 	movw	r1, #625	@ 0x271
 8007316:	4638      	mov	r0, r7
 8007318:	f7ff ff1a 	bl	8007150 <__i2b>
 800731c:	2300      	movs	r3, #0
 800731e:	f8c8 0008 	str.w	r0, [r8, #8]
 8007322:	4604      	mov	r4, r0
 8007324:	6003      	str	r3, [r0, #0]
 8007326:	f04f 0900 	mov.w	r9, #0
 800732a:	07eb      	lsls	r3, r5, #31
 800732c:	d50a      	bpl.n	8007344 <__pow5mult+0x84>
 800732e:	4631      	mov	r1, r6
 8007330:	4622      	mov	r2, r4
 8007332:	4638      	mov	r0, r7
 8007334:	f7ff ff22 	bl	800717c <__multiply>
 8007338:	4631      	mov	r1, r6
 800733a:	4680      	mov	r8, r0
 800733c:	4638      	mov	r0, r7
 800733e:	f7ff fe53 	bl	8006fe8 <_Bfree>
 8007342:	4646      	mov	r6, r8
 8007344:	106d      	asrs	r5, r5, #1
 8007346:	d00b      	beq.n	8007360 <__pow5mult+0xa0>
 8007348:	6820      	ldr	r0, [r4, #0]
 800734a:	b938      	cbnz	r0, 800735c <__pow5mult+0x9c>
 800734c:	4622      	mov	r2, r4
 800734e:	4621      	mov	r1, r4
 8007350:	4638      	mov	r0, r7
 8007352:	f7ff ff13 	bl	800717c <__multiply>
 8007356:	6020      	str	r0, [r4, #0]
 8007358:	f8c0 9000 	str.w	r9, [r0]
 800735c:	4604      	mov	r4, r0
 800735e:	e7e4      	b.n	800732a <__pow5mult+0x6a>
 8007360:	4630      	mov	r0, r6
 8007362:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007366:	bf00      	nop
 8007368:	08008014 	.word	0x08008014
 800736c:	08007ee1 	.word	0x08007ee1
 8007370:	08007f61 	.word	0x08007f61

08007374 <__lshift>:
 8007374:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007378:	460c      	mov	r4, r1
 800737a:	6849      	ldr	r1, [r1, #4]
 800737c:	6923      	ldr	r3, [r4, #16]
 800737e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007382:	68a3      	ldr	r3, [r4, #8]
 8007384:	4607      	mov	r7, r0
 8007386:	4691      	mov	r9, r2
 8007388:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800738c:	f108 0601 	add.w	r6, r8, #1
 8007390:	42b3      	cmp	r3, r6
 8007392:	db0b      	blt.n	80073ac <__lshift+0x38>
 8007394:	4638      	mov	r0, r7
 8007396:	f7ff fde7 	bl	8006f68 <_Balloc>
 800739a:	4605      	mov	r5, r0
 800739c:	b948      	cbnz	r0, 80073b2 <__lshift+0x3e>
 800739e:	4602      	mov	r2, r0
 80073a0:	4b28      	ldr	r3, [pc, #160]	@ (8007444 <__lshift+0xd0>)
 80073a2:	4829      	ldr	r0, [pc, #164]	@ (8007448 <__lshift+0xd4>)
 80073a4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80073a8:	f000 fbe0 	bl	8007b6c <__assert_func>
 80073ac:	3101      	adds	r1, #1
 80073ae:	005b      	lsls	r3, r3, #1
 80073b0:	e7ee      	b.n	8007390 <__lshift+0x1c>
 80073b2:	2300      	movs	r3, #0
 80073b4:	f100 0114 	add.w	r1, r0, #20
 80073b8:	f100 0210 	add.w	r2, r0, #16
 80073bc:	4618      	mov	r0, r3
 80073be:	4553      	cmp	r3, sl
 80073c0:	db33      	blt.n	800742a <__lshift+0xb6>
 80073c2:	6920      	ldr	r0, [r4, #16]
 80073c4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80073c8:	f104 0314 	add.w	r3, r4, #20
 80073cc:	f019 091f 	ands.w	r9, r9, #31
 80073d0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80073d4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80073d8:	d02b      	beq.n	8007432 <__lshift+0xbe>
 80073da:	f1c9 0e20 	rsb	lr, r9, #32
 80073de:	468a      	mov	sl, r1
 80073e0:	2200      	movs	r2, #0
 80073e2:	6818      	ldr	r0, [r3, #0]
 80073e4:	fa00 f009 	lsl.w	r0, r0, r9
 80073e8:	4310      	orrs	r0, r2
 80073ea:	f84a 0b04 	str.w	r0, [sl], #4
 80073ee:	f853 2b04 	ldr.w	r2, [r3], #4
 80073f2:	459c      	cmp	ip, r3
 80073f4:	fa22 f20e 	lsr.w	r2, r2, lr
 80073f8:	d8f3      	bhi.n	80073e2 <__lshift+0x6e>
 80073fa:	ebac 0304 	sub.w	r3, ip, r4
 80073fe:	3b15      	subs	r3, #21
 8007400:	f023 0303 	bic.w	r3, r3, #3
 8007404:	3304      	adds	r3, #4
 8007406:	f104 0015 	add.w	r0, r4, #21
 800740a:	4560      	cmp	r0, ip
 800740c:	bf88      	it	hi
 800740e:	2304      	movhi	r3, #4
 8007410:	50ca      	str	r2, [r1, r3]
 8007412:	b10a      	cbz	r2, 8007418 <__lshift+0xa4>
 8007414:	f108 0602 	add.w	r6, r8, #2
 8007418:	3e01      	subs	r6, #1
 800741a:	4638      	mov	r0, r7
 800741c:	612e      	str	r6, [r5, #16]
 800741e:	4621      	mov	r1, r4
 8007420:	f7ff fde2 	bl	8006fe8 <_Bfree>
 8007424:	4628      	mov	r0, r5
 8007426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800742a:	f842 0f04 	str.w	r0, [r2, #4]!
 800742e:	3301      	adds	r3, #1
 8007430:	e7c5      	b.n	80073be <__lshift+0x4a>
 8007432:	3904      	subs	r1, #4
 8007434:	f853 2b04 	ldr.w	r2, [r3], #4
 8007438:	f841 2f04 	str.w	r2, [r1, #4]!
 800743c:	459c      	cmp	ip, r3
 800743e:	d8f9      	bhi.n	8007434 <__lshift+0xc0>
 8007440:	e7ea      	b.n	8007418 <__lshift+0xa4>
 8007442:	bf00      	nop
 8007444:	08007f50 	.word	0x08007f50
 8007448:	08007f61 	.word	0x08007f61

0800744c <__mcmp>:
 800744c:	690a      	ldr	r2, [r1, #16]
 800744e:	4603      	mov	r3, r0
 8007450:	6900      	ldr	r0, [r0, #16]
 8007452:	1a80      	subs	r0, r0, r2
 8007454:	b530      	push	{r4, r5, lr}
 8007456:	d10e      	bne.n	8007476 <__mcmp+0x2a>
 8007458:	3314      	adds	r3, #20
 800745a:	3114      	adds	r1, #20
 800745c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007460:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007464:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007468:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800746c:	4295      	cmp	r5, r2
 800746e:	d003      	beq.n	8007478 <__mcmp+0x2c>
 8007470:	d205      	bcs.n	800747e <__mcmp+0x32>
 8007472:	f04f 30ff 	mov.w	r0, #4294967295
 8007476:	bd30      	pop	{r4, r5, pc}
 8007478:	42a3      	cmp	r3, r4
 800747a:	d3f3      	bcc.n	8007464 <__mcmp+0x18>
 800747c:	e7fb      	b.n	8007476 <__mcmp+0x2a>
 800747e:	2001      	movs	r0, #1
 8007480:	e7f9      	b.n	8007476 <__mcmp+0x2a>
	...

08007484 <__mdiff>:
 8007484:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007488:	4689      	mov	r9, r1
 800748a:	4606      	mov	r6, r0
 800748c:	4611      	mov	r1, r2
 800748e:	4648      	mov	r0, r9
 8007490:	4614      	mov	r4, r2
 8007492:	f7ff ffdb 	bl	800744c <__mcmp>
 8007496:	1e05      	subs	r5, r0, #0
 8007498:	d112      	bne.n	80074c0 <__mdiff+0x3c>
 800749a:	4629      	mov	r1, r5
 800749c:	4630      	mov	r0, r6
 800749e:	f7ff fd63 	bl	8006f68 <_Balloc>
 80074a2:	4602      	mov	r2, r0
 80074a4:	b928      	cbnz	r0, 80074b2 <__mdiff+0x2e>
 80074a6:	4b3e      	ldr	r3, [pc, #248]	@ (80075a0 <__mdiff+0x11c>)
 80074a8:	f240 2137 	movw	r1, #567	@ 0x237
 80074ac:	483d      	ldr	r0, [pc, #244]	@ (80075a4 <__mdiff+0x120>)
 80074ae:	f000 fb5d 	bl	8007b6c <__assert_func>
 80074b2:	2301      	movs	r3, #1
 80074b4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80074b8:	4610      	mov	r0, r2
 80074ba:	b003      	add	sp, #12
 80074bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074c0:	bfbc      	itt	lt
 80074c2:	464b      	movlt	r3, r9
 80074c4:	46a1      	movlt	r9, r4
 80074c6:	4630      	mov	r0, r6
 80074c8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80074cc:	bfba      	itte	lt
 80074ce:	461c      	movlt	r4, r3
 80074d0:	2501      	movlt	r5, #1
 80074d2:	2500      	movge	r5, #0
 80074d4:	f7ff fd48 	bl	8006f68 <_Balloc>
 80074d8:	4602      	mov	r2, r0
 80074da:	b918      	cbnz	r0, 80074e4 <__mdiff+0x60>
 80074dc:	4b30      	ldr	r3, [pc, #192]	@ (80075a0 <__mdiff+0x11c>)
 80074de:	f240 2145 	movw	r1, #581	@ 0x245
 80074e2:	e7e3      	b.n	80074ac <__mdiff+0x28>
 80074e4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80074e8:	6926      	ldr	r6, [r4, #16]
 80074ea:	60c5      	str	r5, [r0, #12]
 80074ec:	f109 0310 	add.w	r3, r9, #16
 80074f0:	f109 0514 	add.w	r5, r9, #20
 80074f4:	f104 0e14 	add.w	lr, r4, #20
 80074f8:	f100 0b14 	add.w	fp, r0, #20
 80074fc:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8007500:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8007504:	9301      	str	r3, [sp, #4]
 8007506:	46d9      	mov	r9, fp
 8007508:	f04f 0c00 	mov.w	ip, #0
 800750c:	9b01      	ldr	r3, [sp, #4]
 800750e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8007512:	f853 af04 	ldr.w	sl, [r3, #4]!
 8007516:	9301      	str	r3, [sp, #4]
 8007518:	b281      	uxth	r1, r0
 800751a:	fa1f f38a 	uxth.w	r3, sl
 800751e:	1a5b      	subs	r3, r3, r1
 8007520:	0c00      	lsrs	r0, r0, #16
 8007522:	4463      	add	r3, ip
 8007524:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8007528:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800752c:	b29b      	uxth	r3, r3
 800752e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8007532:	4576      	cmp	r6, lr
 8007534:	f849 3b04 	str.w	r3, [r9], #4
 8007538:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800753c:	d8e6      	bhi.n	800750c <__mdiff+0x88>
 800753e:	1b33      	subs	r3, r6, r4
 8007540:	3b15      	subs	r3, #21
 8007542:	f023 0303 	bic.w	r3, r3, #3
 8007546:	3415      	adds	r4, #21
 8007548:	3304      	adds	r3, #4
 800754a:	42a6      	cmp	r6, r4
 800754c:	bf38      	it	cc
 800754e:	2304      	movcc	r3, #4
 8007550:	441d      	add	r5, r3
 8007552:	445b      	add	r3, fp
 8007554:	461e      	mov	r6, r3
 8007556:	462c      	mov	r4, r5
 8007558:	4544      	cmp	r4, r8
 800755a:	d30e      	bcc.n	800757a <__mdiff+0xf6>
 800755c:	f108 0103 	add.w	r1, r8, #3
 8007560:	1b49      	subs	r1, r1, r5
 8007562:	f021 0103 	bic.w	r1, r1, #3
 8007566:	3d03      	subs	r5, #3
 8007568:	45a8      	cmp	r8, r5
 800756a:	bf38      	it	cc
 800756c:	2100      	movcc	r1, #0
 800756e:	440b      	add	r3, r1
 8007570:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007574:	b191      	cbz	r1, 800759c <__mdiff+0x118>
 8007576:	6117      	str	r7, [r2, #16]
 8007578:	e79e      	b.n	80074b8 <__mdiff+0x34>
 800757a:	f854 1b04 	ldr.w	r1, [r4], #4
 800757e:	46e6      	mov	lr, ip
 8007580:	0c08      	lsrs	r0, r1, #16
 8007582:	fa1c fc81 	uxtah	ip, ip, r1
 8007586:	4471      	add	r1, lr
 8007588:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800758c:	b289      	uxth	r1, r1
 800758e:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007592:	f846 1b04 	str.w	r1, [r6], #4
 8007596:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800759a:	e7dd      	b.n	8007558 <__mdiff+0xd4>
 800759c:	3f01      	subs	r7, #1
 800759e:	e7e7      	b.n	8007570 <__mdiff+0xec>
 80075a0:	08007f50 	.word	0x08007f50
 80075a4:	08007f61 	.word	0x08007f61

080075a8 <__d2b>:
 80075a8:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 80075ac:	2101      	movs	r1, #1
 80075ae:	9e08      	ldr	r6, [sp, #32]
 80075b0:	4690      	mov	r8, r2
 80075b2:	4699      	mov	r9, r3
 80075b4:	f7ff fcd8 	bl	8006f68 <_Balloc>
 80075b8:	4604      	mov	r4, r0
 80075ba:	b930      	cbnz	r0, 80075ca <__d2b+0x22>
 80075bc:	4602      	mov	r2, r0
 80075be:	4b24      	ldr	r3, [pc, #144]	@ (8007650 <__d2b+0xa8>)
 80075c0:	4824      	ldr	r0, [pc, #144]	@ (8007654 <__d2b+0xac>)
 80075c2:	f240 310f 	movw	r1, #783	@ 0x30f
 80075c6:	f000 fad1 	bl	8007b6c <__assert_func>
 80075ca:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80075ce:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80075d2:	b10d      	cbz	r5, 80075d8 <__d2b+0x30>
 80075d4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80075d8:	9301      	str	r3, [sp, #4]
 80075da:	f1b8 0300 	subs.w	r3, r8, #0
 80075de:	d024      	beq.n	800762a <__d2b+0x82>
 80075e0:	4668      	mov	r0, sp
 80075e2:	9300      	str	r3, [sp, #0]
 80075e4:	f7ff fd87 	bl	80070f6 <__lo0bits>
 80075e8:	e9dd 1200 	ldrd	r1, r2, [sp]
 80075ec:	b1d8      	cbz	r0, 8007626 <__d2b+0x7e>
 80075ee:	f1c0 0320 	rsb	r3, r0, #32
 80075f2:	fa02 f303 	lsl.w	r3, r2, r3
 80075f6:	430b      	orrs	r3, r1
 80075f8:	40c2      	lsrs	r2, r0
 80075fa:	6163      	str	r3, [r4, #20]
 80075fc:	9201      	str	r2, [sp, #4]
 80075fe:	9b01      	ldr	r3, [sp, #4]
 8007600:	61a3      	str	r3, [r4, #24]
 8007602:	2b00      	cmp	r3, #0
 8007604:	bf0c      	ite	eq
 8007606:	2201      	moveq	r2, #1
 8007608:	2202      	movne	r2, #2
 800760a:	6122      	str	r2, [r4, #16]
 800760c:	b1ad      	cbz	r5, 800763a <__d2b+0x92>
 800760e:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8007612:	4405      	add	r5, r0
 8007614:	6035      	str	r5, [r6, #0]
 8007616:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800761a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800761c:	6018      	str	r0, [r3, #0]
 800761e:	4620      	mov	r0, r4
 8007620:	b002      	add	sp, #8
 8007622:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8007626:	6161      	str	r1, [r4, #20]
 8007628:	e7e9      	b.n	80075fe <__d2b+0x56>
 800762a:	a801      	add	r0, sp, #4
 800762c:	f7ff fd63 	bl	80070f6 <__lo0bits>
 8007630:	9b01      	ldr	r3, [sp, #4]
 8007632:	6163      	str	r3, [r4, #20]
 8007634:	3020      	adds	r0, #32
 8007636:	2201      	movs	r2, #1
 8007638:	e7e7      	b.n	800760a <__d2b+0x62>
 800763a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800763e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8007642:	6030      	str	r0, [r6, #0]
 8007644:	6918      	ldr	r0, [r3, #16]
 8007646:	f7ff fd37 	bl	80070b8 <__hi0bits>
 800764a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800764e:	e7e4      	b.n	800761a <__d2b+0x72>
 8007650:	08007f50 	.word	0x08007f50
 8007654:	08007f61 	.word	0x08007f61

08007658 <__sfputc_r>:
 8007658:	6893      	ldr	r3, [r2, #8]
 800765a:	3b01      	subs	r3, #1
 800765c:	2b00      	cmp	r3, #0
 800765e:	b410      	push	{r4}
 8007660:	6093      	str	r3, [r2, #8]
 8007662:	da07      	bge.n	8007674 <__sfputc_r+0x1c>
 8007664:	6994      	ldr	r4, [r2, #24]
 8007666:	42a3      	cmp	r3, r4
 8007668:	db01      	blt.n	800766e <__sfputc_r+0x16>
 800766a:	290a      	cmp	r1, #10
 800766c:	d102      	bne.n	8007674 <__sfputc_r+0x1c>
 800766e:	bc10      	pop	{r4}
 8007670:	f7fe bc0b 	b.w	8005e8a <__swbuf_r>
 8007674:	6813      	ldr	r3, [r2, #0]
 8007676:	1c58      	adds	r0, r3, #1
 8007678:	6010      	str	r0, [r2, #0]
 800767a:	7019      	strb	r1, [r3, #0]
 800767c:	4608      	mov	r0, r1
 800767e:	bc10      	pop	{r4}
 8007680:	4770      	bx	lr

08007682 <__sfputs_r>:
 8007682:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007684:	4606      	mov	r6, r0
 8007686:	460f      	mov	r7, r1
 8007688:	4614      	mov	r4, r2
 800768a:	18d5      	adds	r5, r2, r3
 800768c:	42ac      	cmp	r4, r5
 800768e:	d101      	bne.n	8007694 <__sfputs_r+0x12>
 8007690:	2000      	movs	r0, #0
 8007692:	e007      	b.n	80076a4 <__sfputs_r+0x22>
 8007694:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007698:	463a      	mov	r2, r7
 800769a:	4630      	mov	r0, r6
 800769c:	f7ff ffdc 	bl	8007658 <__sfputc_r>
 80076a0:	1c43      	adds	r3, r0, #1
 80076a2:	d1f3      	bne.n	800768c <__sfputs_r+0xa>
 80076a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080076a8 <_vfiprintf_r>:
 80076a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076ac:	460d      	mov	r5, r1
 80076ae:	b09d      	sub	sp, #116	@ 0x74
 80076b0:	4614      	mov	r4, r2
 80076b2:	4698      	mov	r8, r3
 80076b4:	4606      	mov	r6, r0
 80076b6:	b118      	cbz	r0, 80076c0 <_vfiprintf_r+0x18>
 80076b8:	6a03      	ldr	r3, [r0, #32]
 80076ba:	b90b      	cbnz	r3, 80076c0 <_vfiprintf_r+0x18>
 80076bc:	f7fe fafc 	bl	8005cb8 <__sinit>
 80076c0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80076c2:	07d9      	lsls	r1, r3, #31
 80076c4:	d405      	bmi.n	80076d2 <_vfiprintf_r+0x2a>
 80076c6:	89ab      	ldrh	r3, [r5, #12]
 80076c8:	059a      	lsls	r2, r3, #22
 80076ca:	d402      	bmi.n	80076d2 <_vfiprintf_r+0x2a>
 80076cc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80076ce:	f7fe fcee 	bl	80060ae <__retarget_lock_acquire_recursive>
 80076d2:	89ab      	ldrh	r3, [r5, #12]
 80076d4:	071b      	lsls	r3, r3, #28
 80076d6:	d501      	bpl.n	80076dc <_vfiprintf_r+0x34>
 80076d8:	692b      	ldr	r3, [r5, #16]
 80076da:	b99b      	cbnz	r3, 8007704 <_vfiprintf_r+0x5c>
 80076dc:	4629      	mov	r1, r5
 80076de:	4630      	mov	r0, r6
 80076e0:	f7fe fc12 	bl	8005f08 <__swsetup_r>
 80076e4:	b170      	cbz	r0, 8007704 <_vfiprintf_r+0x5c>
 80076e6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80076e8:	07dc      	lsls	r4, r3, #31
 80076ea:	d504      	bpl.n	80076f6 <_vfiprintf_r+0x4e>
 80076ec:	f04f 30ff 	mov.w	r0, #4294967295
 80076f0:	b01d      	add	sp, #116	@ 0x74
 80076f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076f6:	89ab      	ldrh	r3, [r5, #12]
 80076f8:	0598      	lsls	r0, r3, #22
 80076fa:	d4f7      	bmi.n	80076ec <_vfiprintf_r+0x44>
 80076fc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80076fe:	f7fe fcd7 	bl	80060b0 <__retarget_lock_release_recursive>
 8007702:	e7f3      	b.n	80076ec <_vfiprintf_r+0x44>
 8007704:	2300      	movs	r3, #0
 8007706:	9309      	str	r3, [sp, #36]	@ 0x24
 8007708:	2320      	movs	r3, #32
 800770a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800770e:	f8cd 800c 	str.w	r8, [sp, #12]
 8007712:	2330      	movs	r3, #48	@ 0x30
 8007714:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80078c4 <_vfiprintf_r+0x21c>
 8007718:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800771c:	f04f 0901 	mov.w	r9, #1
 8007720:	4623      	mov	r3, r4
 8007722:	469a      	mov	sl, r3
 8007724:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007728:	b10a      	cbz	r2, 800772e <_vfiprintf_r+0x86>
 800772a:	2a25      	cmp	r2, #37	@ 0x25
 800772c:	d1f9      	bne.n	8007722 <_vfiprintf_r+0x7a>
 800772e:	ebba 0b04 	subs.w	fp, sl, r4
 8007732:	d00b      	beq.n	800774c <_vfiprintf_r+0xa4>
 8007734:	465b      	mov	r3, fp
 8007736:	4622      	mov	r2, r4
 8007738:	4629      	mov	r1, r5
 800773a:	4630      	mov	r0, r6
 800773c:	f7ff ffa1 	bl	8007682 <__sfputs_r>
 8007740:	3001      	adds	r0, #1
 8007742:	f000 80a7 	beq.w	8007894 <_vfiprintf_r+0x1ec>
 8007746:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007748:	445a      	add	r2, fp
 800774a:	9209      	str	r2, [sp, #36]	@ 0x24
 800774c:	f89a 3000 	ldrb.w	r3, [sl]
 8007750:	2b00      	cmp	r3, #0
 8007752:	f000 809f 	beq.w	8007894 <_vfiprintf_r+0x1ec>
 8007756:	2300      	movs	r3, #0
 8007758:	f04f 32ff 	mov.w	r2, #4294967295
 800775c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007760:	f10a 0a01 	add.w	sl, sl, #1
 8007764:	9304      	str	r3, [sp, #16]
 8007766:	9307      	str	r3, [sp, #28]
 8007768:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800776c:	931a      	str	r3, [sp, #104]	@ 0x68
 800776e:	4654      	mov	r4, sl
 8007770:	2205      	movs	r2, #5
 8007772:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007776:	4853      	ldr	r0, [pc, #332]	@ (80078c4 <_vfiprintf_r+0x21c>)
 8007778:	f7f8 fd02 	bl	8000180 <memchr>
 800777c:	9a04      	ldr	r2, [sp, #16]
 800777e:	b9d8      	cbnz	r0, 80077b8 <_vfiprintf_r+0x110>
 8007780:	06d1      	lsls	r1, r2, #27
 8007782:	bf44      	itt	mi
 8007784:	2320      	movmi	r3, #32
 8007786:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800778a:	0713      	lsls	r3, r2, #28
 800778c:	bf44      	itt	mi
 800778e:	232b      	movmi	r3, #43	@ 0x2b
 8007790:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007794:	f89a 3000 	ldrb.w	r3, [sl]
 8007798:	2b2a      	cmp	r3, #42	@ 0x2a
 800779a:	d015      	beq.n	80077c8 <_vfiprintf_r+0x120>
 800779c:	9a07      	ldr	r2, [sp, #28]
 800779e:	4654      	mov	r4, sl
 80077a0:	2000      	movs	r0, #0
 80077a2:	f04f 0c0a 	mov.w	ip, #10
 80077a6:	4621      	mov	r1, r4
 80077a8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80077ac:	3b30      	subs	r3, #48	@ 0x30
 80077ae:	2b09      	cmp	r3, #9
 80077b0:	d94b      	bls.n	800784a <_vfiprintf_r+0x1a2>
 80077b2:	b1b0      	cbz	r0, 80077e2 <_vfiprintf_r+0x13a>
 80077b4:	9207      	str	r2, [sp, #28]
 80077b6:	e014      	b.n	80077e2 <_vfiprintf_r+0x13a>
 80077b8:	eba0 0308 	sub.w	r3, r0, r8
 80077bc:	fa09 f303 	lsl.w	r3, r9, r3
 80077c0:	4313      	orrs	r3, r2
 80077c2:	9304      	str	r3, [sp, #16]
 80077c4:	46a2      	mov	sl, r4
 80077c6:	e7d2      	b.n	800776e <_vfiprintf_r+0xc6>
 80077c8:	9b03      	ldr	r3, [sp, #12]
 80077ca:	1d19      	adds	r1, r3, #4
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	9103      	str	r1, [sp, #12]
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	bfbb      	ittet	lt
 80077d4:	425b      	neglt	r3, r3
 80077d6:	f042 0202 	orrlt.w	r2, r2, #2
 80077da:	9307      	strge	r3, [sp, #28]
 80077dc:	9307      	strlt	r3, [sp, #28]
 80077de:	bfb8      	it	lt
 80077e0:	9204      	strlt	r2, [sp, #16]
 80077e2:	7823      	ldrb	r3, [r4, #0]
 80077e4:	2b2e      	cmp	r3, #46	@ 0x2e
 80077e6:	d10a      	bne.n	80077fe <_vfiprintf_r+0x156>
 80077e8:	7863      	ldrb	r3, [r4, #1]
 80077ea:	2b2a      	cmp	r3, #42	@ 0x2a
 80077ec:	d132      	bne.n	8007854 <_vfiprintf_r+0x1ac>
 80077ee:	9b03      	ldr	r3, [sp, #12]
 80077f0:	1d1a      	adds	r2, r3, #4
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	9203      	str	r2, [sp, #12]
 80077f6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80077fa:	3402      	adds	r4, #2
 80077fc:	9305      	str	r3, [sp, #20]
 80077fe:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 80078c8 <_vfiprintf_r+0x220>
 8007802:	7821      	ldrb	r1, [r4, #0]
 8007804:	2203      	movs	r2, #3
 8007806:	4650      	mov	r0, sl
 8007808:	f7f8 fcba 	bl	8000180 <memchr>
 800780c:	b138      	cbz	r0, 800781e <_vfiprintf_r+0x176>
 800780e:	9b04      	ldr	r3, [sp, #16]
 8007810:	eba0 000a 	sub.w	r0, r0, sl
 8007814:	2240      	movs	r2, #64	@ 0x40
 8007816:	4082      	lsls	r2, r0
 8007818:	4313      	orrs	r3, r2
 800781a:	3401      	adds	r4, #1
 800781c:	9304      	str	r3, [sp, #16]
 800781e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007822:	482a      	ldr	r0, [pc, #168]	@ (80078cc <_vfiprintf_r+0x224>)
 8007824:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007828:	2206      	movs	r2, #6
 800782a:	f7f8 fca9 	bl	8000180 <memchr>
 800782e:	2800      	cmp	r0, #0
 8007830:	d03f      	beq.n	80078b2 <_vfiprintf_r+0x20a>
 8007832:	4b27      	ldr	r3, [pc, #156]	@ (80078d0 <_vfiprintf_r+0x228>)
 8007834:	bb1b      	cbnz	r3, 800787e <_vfiprintf_r+0x1d6>
 8007836:	9b03      	ldr	r3, [sp, #12]
 8007838:	3307      	adds	r3, #7
 800783a:	f023 0307 	bic.w	r3, r3, #7
 800783e:	3308      	adds	r3, #8
 8007840:	9303      	str	r3, [sp, #12]
 8007842:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007844:	443b      	add	r3, r7
 8007846:	9309      	str	r3, [sp, #36]	@ 0x24
 8007848:	e76a      	b.n	8007720 <_vfiprintf_r+0x78>
 800784a:	fb0c 3202 	mla	r2, ip, r2, r3
 800784e:	460c      	mov	r4, r1
 8007850:	2001      	movs	r0, #1
 8007852:	e7a8      	b.n	80077a6 <_vfiprintf_r+0xfe>
 8007854:	2300      	movs	r3, #0
 8007856:	3401      	adds	r4, #1
 8007858:	9305      	str	r3, [sp, #20]
 800785a:	4619      	mov	r1, r3
 800785c:	f04f 0c0a 	mov.w	ip, #10
 8007860:	4620      	mov	r0, r4
 8007862:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007866:	3a30      	subs	r2, #48	@ 0x30
 8007868:	2a09      	cmp	r2, #9
 800786a:	d903      	bls.n	8007874 <_vfiprintf_r+0x1cc>
 800786c:	2b00      	cmp	r3, #0
 800786e:	d0c6      	beq.n	80077fe <_vfiprintf_r+0x156>
 8007870:	9105      	str	r1, [sp, #20]
 8007872:	e7c4      	b.n	80077fe <_vfiprintf_r+0x156>
 8007874:	fb0c 2101 	mla	r1, ip, r1, r2
 8007878:	4604      	mov	r4, r0
 800787a:	2301      	movs	r3, #1
 800787c:	e7f0      	b.n	8007860 <_vfiprintf_r+0x1b8>
 800787e:	ab03      	add	r3, sp, #12
 8007880:	9300      	str	r3, [sp, #0]
 8007882:	462a      	mov	r2, r5
 8007884:	4b13      	ldr	r3, [pc, #76]	@ (80078d4 <_vfiprintf_r+0x22c>)
 8007886:	a904      	add	r1, sp, #16
 8007888:	4630      	mov	r0, r6
 800788a:	f7fd fdd1 	bl	8005430 <_printf_float>
 800788e:	4607      	mov	r7, r0
 8007890:	1c78      	adds	r0, r7, #1
 8007892:	d1d6      	bne.n	8007842 <_vfiprintf_r+0x19a>
 8007894:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007896:	07d9      	lsls	r1, r3, #31
 8007898:	d405      	bmi.n	80078a6 <_vfiprintf_r+0x1fe>
 800789a:	89ab      	ldrh	r3, [r5, #12]
 800789c:	059a      	lsls	r2, r3, #22
 800789e:	d402      	bmi.n	80078a6 <_vfiprintf_r+0x1fe>
 80078a0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80078a2:	f7fe fc05 	bl	80060b0 <__retarget_lock_release_recursive>
 80078a6:	89ab      	ldrh	r3, [r5, #12]
 80078a8:	065b      	lsls	r3, r3, #25
 80078aa:	f53f af1f 	bmi.w	80076ec <_vfiprintf_r+0x44>
 80078ae:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80078b0:	e71e      	b.n	80076f0 <_vfiprintf_r+0x48>
 80078b2:	ab03      	add	r3, sp, #12
 80078b4:	9300      	str	r3, [sp, #0]
 80078b6:	462a      	mov	r2, r5
 80078b8:	4b06      	ldr	r3, [pc, #24]	@ (80078d4 <_vfiprintf_r+0x22c>)
 80078ba:	a904      	add	r1, sp, #16
 80078bc:	4630      	mov	r0, r6
 80078be:	f7fe f851 	bl	8005964 <_printf_i>
 80078c2:	e7e4      	b.n	800788e <_vfiprintf_r+0x1e6>
 80078c4:	08007fba 	.word	0x08007fba
 80078c8:	08007fc0 	.word	0x08007fc0
 80078cc:	08007fc4 	.word	0x08007fc4
 80078d0:	08005431 	.word	0x08005431
 80078d4:	08007683 	.word	0x08007683

080078d8 <__sflush_r>:
 80078d8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80078dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078de:	0716      	lsls	r6, r2, #28
 80078e0:	4605      	mov	r5, r0
 80078e2:	460c      	mov	r4, r1
 80078e4:	d454      	bmi.n	8007990 <__sflush_r+0xb8>
 80078e6:	684b      	ldr	r3, [r1, #4]
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	dc02      	bgt.n	80078f2 <__sflush_r+0x1a>
 80078ec:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	dd48      	ble.n	8007984 <__sflush_r+0xac>
 80078f2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80078f4:	2e00      	cmp	r6, #0
 80078f6:	d045      	beq.n	8007984 <__sflush_r+0xac>
 80078f8:	2300      	movs	r3, #0
 80078fa:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80078fe:	682f      	ldr	r7, [r5, #0]
 8007900:	6a21      	ldr	r1, [r4, #32]
 8007902:	602b      	str	r3, [r5, #0]
 8007904:	d030      	beq.n	8007968 <__sflush_r+0x90>
 8007906:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007908:	89a3      	ldrh	r3, [r4, #12]
 800790a:	0759      	lsls	r1, r3, #29
 800790c:	d505      	bpl.n	800791a <__sflush_r+0x42>
 800790e:	6863      	ldr	r3, [r4, #4]
 8007910:	1ad2      	subs	r2, r2, r3
 8007912:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007914:	b10b      	cbz	r3, 800791a <__sflush_r+0x42>
 8007916:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007918:	1ad2      	subs	r2, r2, r3
 800791a:	2300      	movs	r3, #0
 800791c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800791e:	6a21      	ldr	r1, [r4, #32]
 8007920:	4628      	mov	r0, r5
 8007922:	47b0      	blx	r6
 8007924:	1c43      	adds	r3, r0, #1
 8007926:	89a3      	ldrh	r3, [r4, #12]
 8007928:	d106      	bne.n	8007938 <__sflush_r+0x60>
 800792a:	6829      	ldr	r1, [r5, #0]
 800792c:	291d      	cmp	r1, #29
 800792e:	d82b      	bhi.n	8007988 <__sflush_r+0xb0>
 8007930:	4a28      	ldr	r2, [pc, #160]	@ (80079d4 <__sflush_r+0xfc>)
 8007932:	40ca      	lsrs	r2, r1
 8007934:	07d6      	lsls	r6, r2, #31
 8007936:	d527      	bpl.n	8007988 <__sflush_r+0xb0>
 8007938:	2200      	movs	r2, #0
 800793a:	6062      	str	r2, [r4, #4]
 800793c:	04d9      	lsls	r1, r3, #19
 800793e:	6922      	ldr	r2, [r4, #16]
 8007940:	6022      	str	r2, [r4, #0]
 8007942:	d504      	bpl.n	800794e <__sflush_r+0x76>
 8007944:	1c42      	adds	r2, r0, #1
 8007946:	d101      	bne.n	800794c <__sflush_r+0x74>
 8007948:	682b      	ldr	r3, [r5, #0]
 800794a:	b903      	cbnz	r3, 800794e <__sflush_r+0x76>
 800794c:	6560      	str	r0, [r4, #84]	@ 0x54
 800794e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007950:	602f      	str	r7, [r5, #0]
 8007952:	b1b9      	cbz	r1, 8007984 <__sflush_r+0xac>
 8007954:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007958:	4299      	cmp	r1, r3
 800795a:	d002      	beq.n	8007962 <__sflush_r+0x8a>
 800795c:	4628      	mov	r0, r5
 800795e:	f7ff fa03 	bl	8006d68 <_free_r>
 8007962:	2300      	movs	r3, #0
 8007964:	6363      	str	r3, [r4, #52]	@ 0x34
 8007966:	e00d      	b.n	8007984 <__sflush_r+0xac>
 8007968:	2301      	movs	r3, #1
 800796a:	4628      	mov	r0, r5
 800796c:	47b0      	blx	r6
 800796e:	4602      	mov	r2, r0
 8007970:	1c50      	adds	r0, r2, #1
 8007972:	d1c9      	bne.n	8007908 <__sflush_r+0x30>
 8007974:	682b      	ldr	r3, [r5, #0]
 8007976:	2b00      	cmp	r3, #0
 8007978:	d0c6      	beq.n	8007908 <__sflush_r+0x30>
 800797a:	2b1d      	cmp	r3, #29
 800797c:	d001      	beq.n	8007982 <__sflush_r+0xaa>
 800797e:	2b16      	cmp	r3, #22
 8007980:	d11d      	bne.n	80079be <__sflush_r+0xe6>
 8007982:	602f      	str	r7, [r5, #0]
 8007984:	2000      	movs	r0, #0
 8007986:	e021      	b.n	80079cc <__sflush_r+0xf4>
 8007988:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800798c:	b21b      	sxth	r3, r3
 800798e:	e01a      	b.n	80079c6 <__sflush_r+0xee>
 8007990:	690f      	ldr	r7, [r1, #16]
 8007992:	2f00      	cmp	r7, #0
 8007994:	d0f6      	beq.n	8007984 <__sflush_r+0xac>
 8007996:	0793      	lsls	r3, r2, #30
 8007998:	680e      	ldr	r6, [r1, #0]
 800799a:	bf08      	it	eq
 800799c:	694b      	ldreq	r3, [r1, #20]
 800799e:	600f      	str	r7, [r1, #0]
 80079a0:	bf18      	it	ne
 80079a2:	2300      	movne	r3, #0
 80079a4:	1bf6      	subs	r6, r6, r7
 80079a6:	608b      	str	r3, [r1, #8]
 80079a8:	2e00      	cmp	r6, #0
 80079aa:	ddeb      	ble.n	8007984 <__sflush_r+0xac>
 80079ac:	6a21      	ldr	r1, [r4, #32]
 80079ae:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 80079b2:	4633      	mov	r3, r6
 80079b4:	463a      	mov	r2, r7
 80079b6:	4628      	mov	r0, r5
 80079b8:	47e0      	blx	ip
 80079ba:	2800      	cmp	r0, #0
 80079bc:	dc07      	bgt.n	80079ce <__sflush_r+0xf6>
 80079be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80079c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80079c6:	81a3      	strh	r3, [r4, #12]
 80079c8:	f04f 30ff 	mov.w	r0, #4294967295
 80079cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80079ce:	4407      	add	r7, r0
 80079d0:	1a36      	subs	r6, r6, r0
 80079d2:	e7e9      	b.n	80079a8 <__sflush_r+0xd0>
 80079d4:	20400001 	.word	0x20400001

080079d8 <_fflush_r>:
 80079d8:	b538      	push	{r3, r4, r5, lr}
 80079da:	690b      	ldr	r3, [r1, #16]
 80079dc:	4605      	mov	r5, r0
 80079de:	460c      	mov	r4, r1
 80079e0:	b913      	cbnz	r3, 80079e8 <_fflush_r+0x10>
 80079e2:	2500      	movs	r5, #0
 80079e4:	4628      	mov	r0, r5
 80079e6:	bd38      	pop	{r3, r4, r5, pc}
 80079e8:	b118      	cbz	r0, 80079f2 <_fflush_r+0x1a>
 80079ea:	6a03      	ldr	r3, [r0, #32]
 80079ec:	b90b      	cbnz	r3, 80079f2 <_fflush_r+0x1a>
 80079ee:	f7fe f963 	bl	8005cb8 <__sinit>
 80079f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d0f3      	beq.n	80079e2 <_fflush_r+0xa>
 80079fa:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80079fc:	07d0      	lsls	r0, r2, #31
 80079fe:	d404      	bmi.n	8007a0a <_fflush_r+0x32>
 8007a00:	0599      	lsls	r1, r3, #22
 8007a02:	d402      	bmi.n	8007a0a <_fflush_r+0x32>
 8007a04:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007a06:	f7fe fb52 	bl	80060ae <__retarget_lock_acquire_recursive>
 8007a0a:	4628      	mov	r0, r5
 8007a0c:	4621      	mov	r1, r4
 8007a0e:	f7ff ff63 	bl	80078d8 <__sflush_r>
 8007a12:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007a14:	07da      	lsls	r2, r3, #31
 8007a16:	4605      	mov	r5, r0
 8007a18:	d4e4      	bmi.n	80079e4 <_fflush_r+0xc>
 8007a1a:	89a3      	ldrh	r3, [r4, #12]
 8007a1c:	059b      	lsls	r3, r3, #22
 8007a1e:	d4e1      	bmi.n	80079e4 <_fflush_r+0xc>
 8007a20:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007a22:	f7fe fb45 	bl	80060b0 <__retarget_lock_release_recursive>
 8007a26:	e7dd      	b.n	80079e4 <_fflush_r+0xc>

08007a28 <__swhatbuf_r>:
 8007a28:	b570      	push	{r4, r5, r6, lr}
 8007a2a:	460c      	mov	r4, r1
 8007a2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a30:	2900      	cmp	r1, #0
 8007a32:	b096      	sub	sp, #88	@ 0x58
 8007a34:	4615      	mov	r5, r2
 8007a36:	461e      	mov	r6, r3
 8007a38:	da0d      	bge.n	8007a56 <__swhatbuf_r+0x2e>
 8007a3a:	89a3      	ldrh	r3, [r4, #12]
 8007a3c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007a40:	f04f 0100 	mov.w	r1, #0
 8007a44:	bf14      	ite	ne
 8007a46:	2340      	movne	r3, #64	@ 0x40
 8007a48:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007a4c:	2000      	movs	r0, #0
 8007a4e:	6031      	str	r1, [r6, #0]
 8007a50:	602b      	str	r3, [r5, #0]
 8007a52:	b016      	add	sp, #88	@ 0x58
 8007a54:	bd70      	pop	{r4, r5, r6, pc}
 8007a56:	466a      	mov	r2, sp
 8007a58:	f000 f848 	bl	8007aec <_fstat_r>
 8007a5c:	2800      	cmp	r0, #0
 8007a5e:	dbec      	blt.n	8007a3a <__swhatbuf_r+0x12>
 8007a60:	9901      	ldr	r1, [sp, #4]
 8007a62:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007a66:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007a6a:	4259      	negs	r1, r3
 8007a6c:	4159      	adcs	r1, r3
 8007a6e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007a72:	e7eb      	b.n	8007a4c <__swhatbuf_r+0x24>

08007a74 <__smakebuf_r>:
 8007a74:	898b      	ldrh	r3, [r1, #12]
 8007a76:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007a78:	079d      	lsls	r5, r3, #30
 8007a7a:	4606      	mov	r6, r0
 8007a7c:	460c      	mov	r4, r1
 8007a7e:	d507      	bpl.n	8007a90 <__smakebuf_r+0x1c>
 8007a80:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007a84:	6023      	str	r3, [r4, #0]
 8007a86:	6123      	str	r3, [r4, #16]
 8007a88:	2301      	movs	r3, #1
 8007a8a:	6163      	str	r3, [r4, #20]
 8007a8c:	b003      	add	sp, #12
 8007a8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007a90:	ab01      	add	r3, sp, #4
 8007a92:	466a      	mov	r2, sp
 8007a94:	f7ff ffc8 	bl	8007a28 <__swhatbuf_r>
 8007a98:	9f00      	ldr	r7, [sp, #0]
 8007a9a:	4605      	mov	r5, r0
 8007a9c:	4639      	mov	r1, r7
 8007a9e:	4630      	mov	r0, r6
 8007aa0:	f7ff f9d6 	bl	8006e50 <_malloc_r>
 8007aa4:	b948      	cbnz	r0, 8007aba <__smakebuf_r+0x46>
 8007aa6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007aaa:	059a      	lsls	r2, r3, #22
 8007aac:	d4ee      	bmi.n	8007a8c <__smakebuf_r+0x18>
 8007aae:	f023 0303 	bic.w	r3, r3, #3
 8007ab2:	f043 0302 	orr.w	r3, r3, #2
 8007ab6:	81a3      	strh	r3, [r4, #12]
 8007ab8:	e7e2      	b.n	8007a80 <__smakebuf_r+0xc>
 8007aba:	89a3      	ldrh	r3, [r4, #12]
 8007abc:	6020      	str	r0, [r4, #0]
 8007abe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007ac2:	81a3      	strh	r3, [r4, #12]
 8007ac4:	9b01      	ldr	r3, [sp, #4]
 8007ac6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007aca:	b15b      	cbz	r3, 8007ae4 <__smakebuf_r+0x70>
 8007acc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007ad0:	4630      	mov	r0, r6
 8007ad2:	f000 f81d 	bl	8007b10 <_isatty_r>
 8007ad6:	b128      	cbz	r0, 8007ae4 <__smakebuf_r+0x70>
 8007ad8:	89a3      	ldrh	r3, [r4, #12]
 8007ada:	f023 0303 	bic.w	r3, r3, #3
 8007ade:	f043 0301 	orr.w	r3, r3, #1
 8007ae2:	81a3      	strh	r3, [r4, #12]
 8007ae4:	89a3      	ldrh	r3, [r4, #12]
 8007ae6:	431d      	orrs	r5, r3
 8007ae8:	81a5      	strh	r5, [r4, #12]
 8007aea:	e7cf      	b.n	8007a8c <__smakebuf_r+0x18>

08007aec <_fstat_r>:
 8007aec:	b538      	push	{r3, r4, r5, lr}
 8007aee:	4d07      	ldr	r5, [pc, #28]	@ (8007b0c <_fstat_r+0x20>)
 8007af0:	2300      	movs	r3, #0
 8007af2:	4604      	mov	r4, r0
 8007af4:	4608      	mov	r0, r1
 8007af6:	4611      	mov	r1, r2
 8007af8:	602b      	str	r3, [r5, #0]
 8007afa:	f7fa f9bd 	bl	8001e78 <_fstat>
 8007afe:	1c43      	adds	r3, r0, #1
 8007b00:	d102      	bne.n	8007b08 <_fstat_r+0x1c>
 8007b02:	682b      	ldr	r3, [r5, #0]
 8007b04:	b103      	cbz	r3, 8007b08 <_fstat_r+0x1c>
 8007b06:	6023      	str	r3, [r4, #0]
 8007b08:	bd38      	pop	{r3, r4, r5, pc}
 8007b0a:	bf00      	nop
 8007b0c:	20000480 	.word	0x20000480

08007b10 <_isatty_r>:
 8007b10:	b538      	push	{r3, r4, r5, lr}
 8007b12:	4d06      	ldr	r5, [pc, #24]	@ (8007b2c <_isatty_r+0x1c>)
 8007b14:	2300      	movs	r3, #0
 8007b16:	4604      	mov	r4, r0
 8007b18:	4608      	mov	r0, r1
 8007b1a:	602b      	str	r3, [r5, #0]
 8007b1c:	f7fa f9bb 	bl	8001e96 <_isatty>
 8007b20:	1c43      	adds	r3, r0, #1
 8007b22:	d102      	bne.n	8007b2a <_isatty_r+0x1a>
 8007b24:	682b      	ldr	r3, [r5, #0]
 8007b26:	b103      	cbz	r3, 8007b2a <_isatty_r+0x1a>
 8007b28:	6023      	str	r3, [r4, #0]
 8007b2a:	bd38      	pop	{r3, r4, r5, pc}
 8007b2c:	20000480 	.word	0x20000480

08007b30 <_sbrk_r>:
 8007b30:	b538      	push	{r3, r4, r5, lr}
 8007b32:	4d06      	ldr	r5, [pc, #24]	@ (8007b4c <_sbrk_r+0x1c>)
 8007b34:	2300      	movs	r3, #0
 8007b36:	4604      	mov	r4, r0
 8007b38:	4608      	mov	r0, r1
 8007b3a:	602b      	str	r3, [r5, #0]
 8007b3c:	f7fa f9c2 	bl	8001ec4 <_sbrk>
 8007b40:	1c43      	adds	r3, r0, #1
 8007b42:	d102      	bne.n	8007b4a <_sbrk_r+0x1a>
 8007b44:	682b      	ldr	r3, [r5, #0]
 8007b46:	b103      	cbz	r3, 8007b4a <_sbrk_r+0x1a>
 8007b48:	6023      	str	r3, [r4, #0]
 8007b4a:	bd38      	pop	{r3, r4, r5, pc}
 8007b4c:	20000480 	.word	0x20000480

08007b50 <memcpy>:
 8007b50:	440a      	add	r2, r1
 8007b52:	4291      	cmp	r1, r2
 8007b54:	f100 33ff 	add.w	r3, r0, #4294967295
 8007b58:	d100      	bne.n	8007b5c <memcpy+0xc>
 8007b5a:	4770      	bx	lr
 8007b5c:	b510      	push	{r4, lr}
 8007b5e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007b62:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007b66:	4291      	cmp	r1, r2
 8007b68:	d1f9      	bne.n	8007b5e <memcpy+0xe>
 8007b6a:	bd10      	pop	{r4, pc}

08007b6c <__assert_func>:
 8007b6c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007b6e:	4614      	mov	r4, r2
 8007b70:	461a      	mov	r2, r3
 8007b72:	4b09      	ldr	r3, [pc, #36]	@ (8007b98 <__assert_func+0x2c>)
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	4605      	mov	r5, r0
 8007b78:	68d8      	ldr	r0, [r3, #12]
 8007b7a:	b14c      	cbz	r4, 8007b90 <__assert_func+0x24>
 8007b7c:	4b07      	ldr	r3, [pc, #28]	@ (8007b9c <__assert_func+0x30>)
 8007b7e:	9100      	str	r1, [sp, #0]
 8007b80:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007b84:	4906      	ldr	r1, [pc, #24]	@ (8007ba0 <__assert_func+0x34>)
 8007b86:	462b      	mov	r3, r5
 8007b88:	f000 f842 	bl	8007c10 <fiprintf>
 8007b8c:	f000 f852 	bl	8007c34 <abort>
 8007b90:	4b04      	ldr	r3, [pc, #16]	@ (8007ba4 <__assert_func+0x38>)
 8007b92:	461c      	mov	r4, r3
 8007b94:	e7f3      	b.n	8007b7e <__assert_func+0x12>
 8007b96:	bf00      	nop
 8007b98:	20000024 	.word	0x20000024
 8007b9c:	08007fd5 	.word	0x08007fd5
 8007ba0:	08007fe2 	.word	0x08007fe2
 8007ba4:	08008010 	.word	0x08008010

08007ba8 <_calloc_r>:
 8007ba8:	b570      	push	{r4, r5, r6, lr}
 8007baa:	fba1 5402 	umull	r5, r4, r1, r2
 8007bae:	b934      	cbnz	r4, 8007bbe <_calloc_r+0x16>
 8007bb0:	4629      	mov	r1, r5
 8007bb2:	f7ff f94d 	bl	8006e50 <_malloc_r>
 8007bb6:	4606      	mov	r6, r0
 8007bb8:	b928      	cbnz	r0, 8007bc6 <_calloc_r+0x1e>
 8007bba:	4630      	mov	r0, r6
 8007bbc:	bd70      	pop	{r4, r5, r6, pc}
 8007bbe:	220c      	movs	r2, #12
 8007bc0:	6002      	str	r2, [r0, #0]
 8007bc2:	2600      	movs	r6, #0
 8007bc4:	e7f9      	b.n	8007bba <_calloc_r+0x12>
 8007bc6:	462a      	mov	r2, r5
 8007bc8:	4621      	mov	r1, r4
 8007bca:	f7fe f9f3 	bl	8005fb4 <memset>
 8007bce:	e7f4      	b.n	8007bba <_calloc_r+0x12>

08007bd0 <__ascii_mbtowc>:
 8007bd0:	b082      	sub	sp, #8
 8007bd2:	b901      	cbnz	r1, 8007bd6 <__ascii_mbtowc+0x6>
 8007bd4:	a901      	add	r1, sp, #4
 8007bd6:	b142      	cbz	r2, 8007bea <__ascii_mbtowc+0x1a>
 8007bd8:	b14b      	cbz	r3, 8007bee <__ascii_mbtowc+0x1e>
 8007bda:	7813      	ldrb	r3, [r2, #0]
 8007bdc:	600b      	str	r3, [r1, #0]
 8007bde:	7812      	ldrb	r2, [r2, #0]
 8007be0:	1e10      	subs	r0, r2, #0
 8007be2:	bf18      	it	ne
 8007be4:	2001      	movne	r0, #1
 8007be6:	b002      	add	sp, #8
 8007be8:	4770      	bx	lr
 8007bea:	4610      	mov	r0, r2
 8007bec:	e7fb      	b.n	8007be6 <__ascii_mbtowc+0x16>
 8007bee:	f06f 0001 	mvn.w	r0, #1
 8007bf2:	e7f8      	b.n	8007be6 <__ascii_mbtowc+0x16>

08007bf4 <__ascii_wctomb>:
 8007bf4:	4603      	mov	r3, r0
 8007bf6:	4608      	mov	r0, r1
 8007bf8:	b141      	cbz	r1, 8007c0c <__ascii_wctomb+0x18>
 8007bfa:	2aff      	cmp	r2, #255	@ 0xff
 8007bfc:	d904      	bls.n	8007c08 <__ascii_wctomb+0x14>
 8007bfe:	228a      	movs	r2, #138	@ 0x8a
 8007c00:	601a      	str	r2, [r3, #0]
 8007c02:	f04f 30ff 	mov.w	r0, #4294967295
 8007c06:	4770      	bx	lr
 8007c08:	700a      	strb	r2, [r1, #0]
 8007c0a:	2001      	movs	r0, #1
 8007c0c:	4770      	bx	lr
	...

08007c10 <fiprintf>:
 8007c10:	b40e      	push	{r1, r2, r3}
 8007c12:	b503      	push	{r0, r1, lr}
 8007c14:	4601      	mov	r1, r0
 8007c16:	ab03      	add	r3, sp, #12
 8007c18:	4805      	ldr	r0, [pc, #20]	@ (8007c30 <fiprintf+0x20>)
 8007c1a:	f853 2b04 	ldr.w	r2, [r3], #4
 8007c1e:	6800      	ldr	r0, [r0, #0]
 8007c20:	9301      	str	r3, [sp, #4]
 8007c22:	f7ff fd41 	bl	80076a8 <_vfiprintf_r>
 8007c26:	b002      	add	sp, #8
 8007c28:	f85d eb04 	ldr.w	lr, [sp], #4
 8007c2c:	b003      	add	sp, #12
 8007c2e:	4770      	bx	lr
 8007c30:	20000024 	.word	0x20000024

08007c34 <abort>:
 8007c34:	b508      	push	{r3, lr}
 8007c36:	2006      	movs	r0, #6
 8007c38:	f000 f82c 	bl	8007c94 <raise>
 8007c3c:	2001      	movs	r0, #1
 8007c3e:	f7fa f8e8 	bl	8001e12 <_exit>

08007c42 <_raise_r>:
 8007c42:	291f      	cmp	r1, #31
 8007c44:	b538      	push	{r3, r4, r5, lr}
 8007c46:	4605      	mov	r5, r0
 8007c48:	460c      	mov	r4, r1
 8007c4a:	d904      	bls.n	8007c56 <_raise_r+0x14>
 8007c4c:	2316      	movs	r3, #22
 8007c4e:	6003      	str	r3, [r0, #0]
 8007c50:	f04f 30ff 	mov.w	r0, #4294967295
 8007c54:	bd38      	pop	{r3, r4, r5, pc}
 8007c56:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8007c58:	b112      	cbz	r2, 8007c60 <_raise_r+0x1e>
 8007c5a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007c5e:	b94b      	cbnz	r3, 8007c74 <_raise_r+0x32>
 8007c60:	4628      	mov	r0, r5
 8007c62:	f000 f831 	bl	8007cc8 <_getpid_r>
 8007c66:	4622      	mov	r2, r4
 8007c68:	4601      	mov	r1, r0
 8007c6a:	4628      	mov	r0, r5
 8007c6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007c70:	f000 b818 	b.w	8007ca4 <_kill_r>
 8007c74:	2b01      	cmp	r3, #1
 8007c76:	d00a      	beq.n	8007c8e <_raise_r+0x4c>
 8007c78:	1c59      	adds	r1, r3, #1
 8007c7a:	d103      	bne.n	8007c84 <_raise_r+0x42>
 8007c7c:	2316      	movs	r3, #22
 8007c7e:	6003      	str	r3, [r0, #0]
 8007c80:	2001      	movs	r0, #1
 8007c82:	e7e7      	b.n	8007c54 <_raise_r+0x12>
 8007c84:	2100      	movs	r1, #0
 8007c86:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8007c8a:	4620      	mov	r0, r4
 8007c8c:	4798      	blx	r3
 8007c8e:	2000      	movs	r0, #0
 8007c90:	e7e0      	b.n	8007c54 <_raise_r+0x12>
	...

08007c94 <raise>:
 8007c94:	4b02      	ldr	r3, [pc, #8]	@ (8007ca0 <raise+0xc>)
 8007c96:	4601      	mov	r1, r0
 8007c98:	6818      	ldr	r0, [r3, #0]
 8007c9a:	f7ff bfd2 	b.w	8007c42 <_raise_r>
 8007c9e:	bf00      	nop
 8007ca0:	20000024 	.word	0x20000024

08007ca4 <_kill_r>:
 8007ca4:	b538      	push	{r3, r4, r5, lr}
 8007ca6:	4d07      	ldr	r5, [pc, #28]	@ (8007cc4 <_kill_r+0x20>)
 8007ca8:	2300      	movs	r3, #0
 8007caa:	4604      	mov	r4, r0
 8007cac:	4608      	mov	r0, r1
 8007cae:	4611      	mov	r1, r2
 8007cb0:	602b      	str	r3, [r5, #0]
 8007cb2:	f7fa f89e 	bl	8001df2 <_kill>
 8007cb6:	1c43      	adds	r3, r0, #1
 8007cb8:	d102      	bne.n	8007cc0 <_kill_r+0x1c>
 8007cba:	682b      	ldr	r3, [r5, #0]
 8007cbc:	b103      	cbz	r3, 8007cc0 <_kill_r+0x1c>
 8007cbe:	6023      	str	r3, [r4, #0]
 8007cc0:	bd38      	pop	{r3, r4, r5, pc}
 8007cc2:	bf00      	nop
 8007cc4:	20000480 	.word	0x20000480

08007cc8 <_getpid_r>:
 8007cc8:	f7fa b88c 	b.w	8001de4 <_getpid>

08007ccc <_init>:
 8007ccc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cce:	bf00      	nop
 8007cd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007cd2:	bc08      	pop	{r3}
 8007cd4:	469e      	mov	lr, r3
 8007cd6:	4770      	bx	lr

08007cd8 <_fini>:
 8007cd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cda:	bf00      	nop
 8007cdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007cde:	bc08      	pop	{r3}
 8007ce0:	469e      	mov	lr, r3
 8007ce2:	4770      	bx	lr
