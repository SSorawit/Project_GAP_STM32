
stm32_LoRa_Mark4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001b1e0  08000138  08000138  00001138  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b40  0801b318  0801b318  0001c318  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .USER_embedded_Keys 000000d8  0801be58  0801be58  0001ce58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  0801bf30  0801bf30  0001d138  2**0
                  CONTENTS
  5 .ARM          00000008  0801bf30  0801bf30  0001cf30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  0801bf38  0801bf38  0001d138  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  0801bf38  0801bf38  0001cf38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .fini_array   00000004  0801bf3c  0801bf3c  0001cf3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .data         00000138  20000000  0801bf40  0001d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00001a9c  20000138  0801c078  0001d138  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20001bd4  0801c078  0001dbd4  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  0001d138  2**0
                  CONTENTS, READONLY
 13 .debug_info   0003f7a0  00000000  00000000  0001d162  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00009ea9  00000000  00000000  0005c902  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00003218  00000000  00000000  000667b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000025fe  00000000  00000000  000699c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000280df  00000000  00000000  0006bfc6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0003d55e  00000000  00000000  000940a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cadff  00000000  00000000  000d1603  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0019c402  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000cdd4  00000000  00000000  0019c448  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005d  00000000  00000000  001a921c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000138 <__do_global_dtors_aux>:
 8000138:	b510      	push	{r4, lr}
 800013a:	4c05      	ldr	r4, [pc, #20]	@ (8000150 <__do_global_dtors_aux+0x18>)
 800013c:	7823      	ldrb	r3, [r4, #0]
 800013e:	b933      	cbnz	r3, 800014e <__do_global_dtors_aux+0x16>
 8000140:	4b04      	ldr	r3, [pc, #16]	@ (8000154 <__do_global_dtors_aux+0x1c>)
 8000142:	b113      	cbz	r3, 800014a <__do_global_dtors_aux+0x12>
 8000144:	4804      	ldr	r0, [pc, #16]	@ (8000158 <__do_global_dtors_aux+0x20>)
 8000146:	f3af 8000 	nop.w
 800014a:	2301      	movs	r3, #1
 800014c:	7023      	strb	r3, [r4, #0]
 800014e:	bd10      	pop	{r4, pc}
 8000150:	20000138 	.word	0x20000138
 8000154:	00000000 	.word	0x00000000
 8000158:	0801b300 	.word	0x0801b300

0800015c <frame_dummy>:
 800015c:	b508      	push	{r3, lr}
 800015e:	4b03      	ldr	r3, [pc, #12]	@ (800016c <frame_dummy+0x10>)
 8000160:	b11b      	cbz	r3, 800016a <frame_dummy+0xe>
 8000162:	4903      	ldr	r1, [pc, #12]	@ (8000170 <frame_dummy+0x14>)
 8000164:	4803      	ldr	r0, [pc, #12]	@ (8000174 <frame_dummy+0x18>)
 8000166:	f3af 8000 	nop.w
 800016a:	bd08      	pop	{r3, pc}
 800016c:	00000000 	.word	0x00000000
 8000170:	2000013c 	.word	0x2000013c
 8000174:	0801b300 	.word	0x0801b300

08000178 <strlen>:
 8000178:	4603      	mov	r3, r0
 800017a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800017e:	2a00      	cmp	r2, #0
 8000180:	d1fb      	bne.n	800017a <strlen+0x2>
 8000182:	1a18      	subs	r0, r3, r0
 8000184:	3801      	subs	r0, #1
 8000186:	4770      	bx	lr

08000188 <__aeabi_drsub>:
 8000188:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800018c:	e002      	b.n	8000194 <__adddf3>
 800018e:	bf00      	nop

08000190 <__aeabi_dsub>:
 8000190:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000194 <__adddf3>:
 8000194:	b530      	push	{r4, r5, lr}
 8000196:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800019a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800019e:	ea94 0f05 	teq	r4, r5
 80001a2:	bf08      	it	eq
 80001a4:	ea90 0f02 	teqeq	r0, r2
 80001a8:	bf1f      	itttt	ne
 80001aa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ae:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001b2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001b6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001ba:	f000 80e2 	beq.w	8000382 <__adddf3+0x1ee>
 80001be:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001c2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001c6:	bfb8      	it	lt
 80001c8:	426d      	neglt	r5, r5
 80001ca:	dd0c      	ble.n	80001e6 <__adddf3+0x52>
 80001cc:	442c      	add	r4, r5
 80001ce:	ea80 0202 	eor.w	r2, r0, r2
 80001d2:	ea81 0303 	eor.w	r3, r1, r3
 80001d6:	ea82 0000 	eor.w	r0, r2, r0
 80001da:	ea83 0101 	eor.w	r1, r3, r1
 80001de:	ea80 0202 	eor.w	r2, r0, r2
 80001e2:	ea81 0303 	eor.w	r3, r1, r3
 80001e6:	2d36      	cmp	r5, #54	@ 0x36
 80001e8:	bf88      	it	hi
 80001ea:	bd30      	pophi	{r4, r5, pc}
 80001ec:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001f0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001f4:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001f8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x70>
 80001fe:	4240      	negs	r0, r0
 8000200:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000204:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000208:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800020c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000210:	d002      	beq.n	8000218 <__adddf3+0x84>
 8000212:	4252      	negs	r2, r2
 8000214:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000218:	ea94 0f05 	teq	r4, r5
 800021c:	f000 80a7 	beq.w	800036e <__adddf3+0x1da>
 8000220:	f1a4 0401 	sub.w	r4, r4, #1
 8000224:	f1d5 0e20 	rsbs	lr, r5, #32
 8000228:	db0d      	blt.n	8000246 <__adddf3+0xb2>
 800022a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800022e:	fa22 f205 	lsr.w	r2, r2, r5
 8000232:	1880      	adds	r0, r0, r2
 8000234:	f141 0100 	adc.w	r1, r1, #0
 8000238:	fa03 f20e 	lsl.w	r2, r3, lr
 800023c:	1880      	adds	r0, r0, r2
 800023e:	fa43 f305 	asr.w	r3, r3, r5
 8000242:	4159      	adcs	r1, r3
 8000244:	e00e      	b.n	8000264 <__adddf3+0xd0>
 8000246:	f1a5 0520 	sub.w	r5, r5, #32
 800024a:	f10e 0e20 	add.w	lr, lr, #32
 800024e:	2a01      	cmp	r2, #1
 8000250:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000254:	bf28      	it	cs
 8000256:	f04c 0c02 	orrcs.w	ip, ip, #2
 800025a:	fa43 f305 	asr.w	r3, r3, r5
 800025e:	18c0      	adds	r0, r0, r3
 8000260:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000264:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000268:	d507      	bpl.n	800027a <__adddf3+0xe6>
 800026a:	f04f 0e00 	mov.w	lr, #0
 800026e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000272:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000276:	eb6e 0101 	sbc.w	r1, lr, r1
 800027a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800027e:	d31b      	bcc.n	80002b8 <__adddf3+0x124>
 8000280:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000284:	d30c      	bcc.n	80002a0 <__adddf3+0x10c>
 8000286:	0849      	lsrs	r1, r1, #1
 8000288:	ea5f 0030 	movs.w	r0, r0, rrx
 800028c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000290:	f104 0401 	add.w	r4, r4, #1
 8000294:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000298:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800029c:	f080 809a 	bcs.w	80003d4 <__adddf3+0x240>
 80002a0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002a4:	bf08      	it	eq
 80002a6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002aa:	f150 0000 	adcs.w	r0, r0, #0
 80002ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002b2:	ea41 0105 	orr.w	r1, r1, r5
 80002b6:	bd30      	pop	{r4, r5, pc}
 80002b8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002bc:	4140      	adcs	r0, r0
 80002be:	eb41 0101 	adc.w	r1, r1, r1
 80002c2:	3c01      	subs	r4, #1
 80002c4:	bf28      	it	cs
 80002c6:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002ca:	d2e9      	bcs.n	80002a0 <__adddf3+0x10c>
 80002cc:	f091 0f00 	teq	r1, #0
 80002d0:	bf04      	itt	eq
 80002d2:	4601      	moveq	r1, r0
 80002d4:	2000      	moveq	r0, #0
 80002d6:	fab1 f381 	clz	r3, r1
 80002da:	bf08      	it	eq
 80002dc:	3320      	addeq	r3, #32
 80002de:	f1a3 030b 	sub.w	r3, r3, #11
 80002e2:	f1b3 0220 	subs.w	r2, r3, #32
 80002e6:	da0c      	bge.n	8000302 <__adddf3+0x16e>
 80002e8:	320c      	adds	r2, #12
 80002ea:	dd08      	ble.n	80002fe <__adddf3+0x16a>
 80002ec:	f102 0c14 	add.w	ip, r2, #20
 80002f0:	f1c2 020c 	rsb	r2, r2, #12
 80002f4:	fa01 f00c 	lsl.w	r0, r1, ip
 80002f8:	fa21 f102 	lsr.w	r1, r1, r2
 80002fc:	e00c      	b.n	8000318 <__adddf3+0x184>
 80002fe:	f102 0214 	add.w	r2, r2, #20
 8000302:	bfd8      	it	le
 8000304:	f1c2 0c20 	rsble	ip, r2, #32
 8000308:	fa01 f102 	lsl.w	r1, r1, r2
 800030c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000310:	bfdc      	itt	le
 8000312:	ea41 010c 	orrle.w	r1, r1, ip
 8000316:	4090      	lslle	r0, r2
 8000318:	1ae4      	subs	r4, r4, r3
 800031a:	bfa2      	ittt	ge
 800031c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000320:	4329      	orrge	r1, r5
 8000322:	bd30      	popge	{r4, r5, pc}
 8000324:	ea6f 0404 	mvn.w	r4, r4
 8000328:	3c1f      	subs	r4, #31
 800032a:	da1c      	bge.n	8000366 <__adddf3+0x1d2>
 800032c:	340c      	adds	r4, #12
 800032e:	dc0e      	bgt.n	800034e <__adddf3+0x1ba>
 8000330:	f104 0414 	add.w	r4, r4, #20
 8000334:	f1c4 0220 	rsb	r2, r4, #32
 8000338:	fa20 f004 	lsr.w	r0, r0, r4
 800033c:	fa01 f302 	lsl.w	r3, r1, r2
 8000340:	ea40 0003 	orr.w	r0, r0, r3
 8000344:	fa21 f304 	lsr.w	r3, r1, r4
 8000348:	ea45 0103 	orr.w	r1, r5, r3
 800034c:	bd30      	pop	{r4, r5, pc}
 800034e:	f1c4 040c 	rsb	r4, r4, #12
 8000352:	f1c4 0220 	rsb	r2, r4, #32
 8000356:	fa20 f002 	lsr.w	r0, r0, r2
 800035a:	fa01 f304 	lsl.w	r3, r1, r4
 800035e:	ea40 0003 	orr.w	r0, r0, r3
 8000362:	4629      	mov	r1, r5
 8000364:	bd30      	pop	{r4, r5, pc}
 8000366:	fa21 f004 	lsr.w	r0, r1, r4
 800036a:	4629      	mov	r1, r5
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	f094 0f00 	teq	r4, #0
 8000372:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000376:	bf06      	itte	eq
 8000378:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800037c:	3401      	addeq	r4, #1
 800037e:	3d01      	subne	r5, #1
 8000380:	e74e      	b.n	8000220 <__adddf3+0x8c>
 8000382:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000386:	bf18      	it	ne
 8000388:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800038c:	d029      	beq.n	80003e2 <__adddf3+0x24e>
 800038e:	ea94 0f05 	teq	r4, r5
 8000392:	bf08      	it	eq
 8000394:	ea90 0f02 	teqeq	r0, r2
 8000398:	d005      	beq.n	80003a6 <__adddf3+0x212>
 800039a:	ea54 0c00 	orrs.w	ip, r4, r0
 800039e:	bf04      	itt	eq
 80003a0:	4619      	moveq	r1, r3
 80003a2:	4610      	moveq	r0, r2
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea91 0f03 	teq	r1, r3
 80003aa:	bf1e      	ittt	ne
 80003ac:	2100      	movne	r1, #0
 80003ae:	2000      	movne	r0, #0
 80003b0:	bd30      	popne	{r4, r5, pc}
 80003b2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003b6:	d105      	bne.n	80003c4 <__adddf3+0x230>
 80003b8:	0040      	lsls	r0, r0, #1
 80003ba:	4149      	adcs	r1, r1
 80003bc:	bf28      	it	cs
 80003be:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80003c2:	bd30      	pop	{r4, r5, pc}
 80003c4:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003c8:	bf3c      	itt	cc
 80003ca:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003ce:	bd30      	popcc	{r4, r5, pc}
 80003d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003d4:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003d8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003dc:	f04f 0000 	mov.w	r0, #0
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003e6:	bf1a      	itte	ne
 80003e8:	4619      	movne	r1, r3
 80003ea:	4610      	movne	r0, r2
 80003ec:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003f0:	bf1c      	itt	ne
 80003f2:	460b      	movne	r3, r1
 80003f4:	4602      	movne	r2, r0
 80003f6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003fa:	bf06      	itte	eq
 80003fc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000400:	ea91 0f03 	teqeq	r1, r3
 8000404:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000408:	bd30      	pop	{r4, r5, pc}
 800040a:	bf00      	nop

0800040c <__aeabi_ui2d>:
 800040c:	f090 0f00 	teq	r0, #0
 8000410:	bf04      	itt	eq
 8000412:	2100      	moveq	r1, #0
 8000414:	4770      	bxeq	lr
 8000416:	b530      	push	{r4, r5, lr}
 8000418:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800041c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000420:	f04f 0500 	mov.w	r5, #0
 8000424:	f04f 0100 	mov.w	r1, #0
 8000428:	e750      	b.n	80002cc <__adddf3+0x138>
 800042a:	bf00      	nop

0800042c <__aeabi_i2d>:
 800042c:	f090 0f00 	teq	r0, #0
 8000430:	bf04      	itt	eq
 8000432:	2100      	moveq	r1, #0
 8000434:	4770      	bxeq	lr
 8000436:	b530      	push	{r4, r5, lr}
 8000438:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800043c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000440:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000444:	bf48      	it	mi
 8000446:	4240      	negmi	r0, r0
 8000448:	f04f 0100 	mov.w	r1, #0
 800044c:	e73e      	b.n	80002cc <__adddf3+0x138>
 800044e:	bf00      	nop

08000450 <__aeabi_f2d>:
 8000450:	0042      	lsls	r2, r0, #1
 8000452:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000456:	ea4f 0131 	mov.w	r1, r1, rrx
 800045a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800045e:	bf1f      	itttt	ne
 8000460:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000464:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000468:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 800046c:	4770      	bxne	lr
 800046e:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000472:	bf08      	it	eq
 8000474:	4770      	bxeq	lr
 8000476:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800047a:	bf04      	itt	eq
 800047c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000480:	4770      	bxeq	lr
 8000482:	b530      	push	{r4, r5, lr}
 8000484:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000488:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800048c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000490:	e71c      	b.n	80002cc <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_ul2d>:
 8000494:	ea50 0201 	orrs.w	r2, r0, r1
 8000498:	bf08      	it	eq
 800049a:	4770      	bxeq	lr
 800049c:	b530      	push	{r4, r5, lr}
 800049e:	f04f 0500 	mov.w	r5, #0
 80004a2:	e00a      	b.n	80004ba <__aeabi_l2d+0x16>

080004a4 <__aeabi_l2d>:
 80004a4:	ea50 0201 	orrs.w	r2, r0, r1
 80004a8:	bf08      	it	eq
 80004aa:	4770      	bxeq	lr
 80004ac:	b530      	push	{r4, r5, lr}
 80004ae:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004b2:	d502      	bpl.n	80004ba <__aeabi_l2d+0x16>
 80004b4:	4240      	negs	r0, r0
 80004b6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004ba:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004be:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004c6:	f43f aed8 	beq.w	800027a <__adddf3+0xe6>
 80004ca:	f04f 0203 	mov.w	r2, #3
 80004ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004d2:	bf18      	it	ne
 80004d4:	3203      	addne	r2, #3
 80004d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004da:	bf18      	it	ne
 80004dc:	3203      	addne	r2, #3
 80004de:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004e2:	f1c2 0320 	rsb	r3, r2, #32
 80004e6:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ea:	fa20 f002 	lsr.w	r0, r0, r2
 80004ee:	fa01 fe03 	lsl.w	lr, r1, r3
 80004f2:	ea40 000e 	orr.w	r0, r0, lr
 80004f6:	fa21 f102 	lsr.w	r1, r1, r2
 80004fa:	4414      	add	r4, r2
 80004fc:	e6bd      	b.n	800027a <__adddf3+0xe6>
 80004fe:	bf00      	nop

08000500 <__gedf2>:
 8000500:	f04f 3cff 	mov.w	ip, #4294967295
 8000504:	e006      	b.n	8000514 <__cmpdf2+0x4>
 8000506:	bf00      	nop

08000508 <__ledf2>:
 8000508:	f04f 0c01 	mov.w	ip, #1
 800050c:	e002      	b.n	8000514 <__cmpdf2+0x4>
 800050e:	bf00      	nop

08000510 <__cmpdf2>:
 8000510:	f04f 0c01 	mov.w	ip, #1
 8000514:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000518:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800051c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000520:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000524:	bf18      	it	ne
 8000526:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800052a:	d01b      	beq.n	8000564 <__cmpdf2+0x54>
 800052c:	b001      	add	sp, #4
 800052e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000532:	bf0c      	ite	eq
 8000534:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000538:	ea91 0f03 	teqne	r1, r3
 800053c:	bf02      	ittt	eq
 800053e:	ea90 0f02 	teqeq	r0, r2
 8000542:	2000      	moveq	r0, #0
 8000544:	4770      	bxeq	lr
 8000546:	f110 0f00 	cmn.w	r0, #0
 800054a:	ea91 0f03 	teq	r1, r3
 800054e:	bf58      	it	pl
 8000550:	4299      	cmppl	r1, r3
 8000552:	bf08      	it	eq
 8000554:	4290      	cmpeq	r0, r2
 8000556:	bf2c      	ite	cs
 8000558:	17d8      	asrcs	r0, r3, #31
 800055a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800055e:	f040 0001 	orr.w	r0, r0, #1
 8000562:	4770      	bx	lr
 8000564:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000568:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800056c:	d102      	bne.n	8000574 <__cmpdf2+0x64>
 800056e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000572:	d107      	bne.n	8000584 <__cmpdf2+0x74>
 8000574:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000578:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800057c:	d1d6      	bne.n	800052c <__cmpdf2+0x1c>
 800057e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000582:	d0d3      	beq.n	800052c <__cmpdf2+0x1c>
 8000584:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <__aeabi_cdrcmple>:
 800058c:	4684      	mov	ip, r0
 800058e:	4610      	mov	r0, r2
 8000590:	4662      	mov	r2, ip
 8000592:	468c      	mov	ip, r1
 8000594:	4619      	mov	r1, r3
 8000596:	4663      	mov	r3, ip
 8000598:	e000      	b.n	800059c <__aeabi_cdcmpeq>
 800059a:	bf00      	nop

0800059c <__aeabi_cdcmpeq>:
 800059c:	b501      	push	{r0, lr}
 800059e:	f7ff ffb7 	bl	8000510 <__cmpdf2>
 80005a2:	2800      	cmp	r0, #0
 80005a4:	bf48      	it	mi
 80005a6:	f110 0f00 	cmnmi.w	r0, #0
 80005aa:	bd01      	pop	{r0, pc}

080005ac <__aeabi_dcmpeq>:
 80005ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005b0:	f7ff fff4 	bl	800059c <__aeabi_cdcmpeq>
 80005b4:	bf0c      	ite	eq
 80005b6:	2001      	moveq	r0, #1
 80005b8:	2000      	movne	r0, #0
 80005ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80005be:	bf00      	nop

080005c0 <__aeabi_dcmplt>:
 80005c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005c4:	f7ff ffea 	bl	800059c <__aeabi_cdcmpeq>
 80005c8:	bf34      	ite	cc
 80005ca:	2001      	movcc	r0, #1
 80005cc:	2000      	movcs	r0, #0
 80005ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80005d2:	bf00      	nop

080005d4 <__aeabi_dcmple>:
 80005d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005d8:	f7ff ffe0 	bl	800059c <__aeabi_cdcmpeq>
 80005dc:	bf94      	ite	ls
 80005de:	2001      	movls	r0, #1
 80005e0:	2000      	movhi	r0, #0
 80005e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80005e6:	bf00      	nop

080005e8 <__aeabi_dcmpge>:
 80005e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005ec:	f7ff ffce 	bl	800058c <__aeabi_cdrcmple>
 80005f0:	bf94      	ite	ls
 80005f2:	2001      	movls	r0, #1
 80005f4:	2000      	movhi	r0, #0
 80005f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80005fa:	bf00      	nop

080005fc <__aeabi_dcmpgt>:
 80005fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000600:	f7ff ffc4 	bl	800058c <__aeabi_cdrcmple>
 8000604:	bf34      	ite	cc
 8000606:	2001      	movcc	r0, #1
 8000608:	2000      	movcs	r0, #0
 800060a:	f85d fb08 	ldr.w	pc, [sp], #8
 800060e:	bf00      	nop

08000610 <__aeabi_d2iz>:
 8000610:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000614:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000618:	d215      	bcs.n	8000646 <__aeabi_d2iz+0x36>
 800061a:	d511      	bpl.n	8000640 <__aeabi_d2iz+0x30>
 800061c:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000620:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000624:	d912      	bls.n	800064c <__aeabi_d2iz+0x3c>
 8000626:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800062a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800062e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000632:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000636:	fa23 f002 	lsr.w	r0, r3, r2
 800063a:	bf18      	it	ne
 800063c:	4240      	negne	r0, r0
 800063e:	4770      	bx	lr
 8000640:	f04f 0000 	mov.w	r0, #0
 8000644:	4770      	bx	lr
 8000646:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800064a:	d105      	bne.n	8000658 <__aeabi_d2iz+0x48>
 800064c:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000650:	bf08      	it	eq
 8000652:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000656:	4770      	bx	lr
 8000658:	f04f 0000 	mov.w	r0, #0
 800065c:	4770      	bx	lr
 800065e:	bf00      	nop

08000660 <__aeabi_frsub>:
 8000660:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000664:	e002      	b.n	800066c <__addsf3>
 8000666:	bf00      	nop

08000668 <__aeabi_fsub>:
 8000668:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

0800066c <__addsf3>:
 800066c:	0042      	lsls	r2, r0, #1
 800066e:	bf1f      	itttt	ne
 8000670:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000674:	ea92 0f03 	teqne	r2, r3
 8000678:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800067c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000680:	d06a      	beq.n	8000758 <__addsf3+0xec>
 8000682:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000686:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800068a:	bfc1      	itttt	gt
 800068c:	18d2      	addgt	r2, r2, r3
 800068e:	4041      	eorgt	r1, r0
 8000690:	4048      	eorgt	r0, r1
 8000692:	4041      	eorgt	r1, r0
 8000694:	bfb8      	it	lt
 8000696:	425b      	neglt	r3, r3
 8000698:	2b19      	cmp	r3, #25
 800069a:	bf88      	it	hi
 800069c:	4770      	bxhi	lr
 800069e:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 80006a2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80006a6:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 80006aa:	bf18      	it	ne
 80006ac:	4240      	negne	r0, r0
 80006ae:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80006b2:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80006b6:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 80006ba:	bf18      	it	ne
 80006bc:	4249      	negne	r1, r1
 80006be:	ea92 0f03 	teq	r2, r3
 80006c2:	d03f      	beq.n	8000744 <__addsf3+0xd8>
 80006c4:	f1a2 0201 	sub.w	r2, r2, #1
 80006c8:	fa41 fc03 	asr.w	ip, r1, r3
 80006cc:	eb10 000c 	adds.w	r0, r0, ip
 80006d0:	f1c3 0320 	rsb	r3, r3, #32
 80006d4:	fa01 f103 	lsl.w	r1, r1, r3
 80006d8:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80006dc:	d502      	bpl.n	80006e4 <__addsf3+0x78>
 80006de:	4249      	negs	r1, r1
 80006e0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80006e4:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 80006e8:	d313      	bcc.n	8000712 <__addsf3+0xa6>
 80006ea:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80006ee:	d306      	bcc.n	80006fe <__addsf3+0x92>
 80006f0:	0840      	lsrs	r0, r0, #1
 80006f2:	ea4f 0131 	mov.w	r1, r1, rrx
 80006f6:	f102 0201 	add.w	r2, r2, #1
 80006fa:	2afe      	cmp	r2, #254	@ 0xfe
 80006fc:	d251      	bcs.n	80007a2 <__addsf3+0x136>
 80006fe:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000702:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000706:	bf08      	it	eq
 8000708:	f020 0001 	biceq.w	r0, r0, #1
 800070c:	ea40 0003 	orr.w	r0, r0, r3
 8000710:	4770      	bx	lr
 8000712:	0049      	lsls	r1, r1, #1
 8000714:	eb40 0000 	adc.w	r0, r0, r0
 8000718:	3a01      	subs	r2, #1
 800071a:	bf28      	it	cs
 800071c:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000720:	d2ed      	bcs.n	80006fe <__addsf3+0x92>
 8000722:	fab0 fc80 	clz	ip, r0
 8000726:	f1ac 0c08 	sub.w	ip, ip, #8
 800072a:	ebb2 020c 	subs.w	r2, r2, ip
 800072e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000732:	bfaa      	itet	ge
 8000734:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000738:	4252      	neglt	r2, r2
 800073a:	4318      	orrge	r0, r3
 800073c:	bfbc      	itt	lt
 800073e:	40d0      	lsrlt	r0, r2
 8000740:	4318      	orrlt	r0, r3
 8000742:	4770      	bx	lr
 8000744:	f092 0f00 	teq	r2, #0
 8000748:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 800074c:	bf06      	itte	eq
 800074e:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000752:	3201      	addeq	r2, #1
 8000754:	3b01      	subne	r3, #1
 8000756:	e7b5      	b.n	80006c4 <__addsf3+0x58>
 8000758:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800075c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000760:	bf18      	it	ne
 8000762:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000766:	d021      	beq.n	80007ac <__addsf3+0x140>
 8000768:	ea92 0f03 	teq	r2, r3
 800076c:	d004      	beq.n	8000778 <__addsf3+0x10c>
 800076e:	f092 0f00 	teq	r2, #0
 8000772:	bf08      	it	eq
 8000774:	4608      	moveq	r0, r1
 8000776:	4770      	bx	lr
 8000778:	ea90 0f01 	teq	r0, r1
 800077c:	bf1c      	itt	ne
 800077e:	2000      	movne	r0, #0
 8000780:	4770      	bxne	lr
 8000782:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000786:	d104      	bne.n	8000792 <__addsf3+0x126>
 8000788:	0040      	lsls	r0, r0, #1
 800078a:	bf28      	it	cs
 800078c:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000790:	4770      	bx	lr
 8000792:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000796:	bf3c      	itt	cc
 8000798:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 800079c:	4770      	bxcc	lr
 800079e:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80007a2:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 80007a6:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80007aa:	4770      	bx	lr
 80007ac:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80007b0:	bf16      	itet	ne
 80007b2:	4608      	movne	r0, r1
 80007b4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80007b8:	4601      	movne	r1, r0
 80007ba:	0242      	lsls	r2, r0, #9
 80007bc:	bf06      	itte	eq
 80007be:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80007c2:	ea90 0f01 	teqeq	r0, r1
 80007c6:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 80007ca:	4770      	bx	lr

080007cc <__aeabi_ui2f>:
 80007cc:	f04f 0300 	mov.w	r3, #0
 80007d0:	e004      	b.n	80007dc <__aeabi_i2f+0x8>
 80007d2:	bf00      	nop

080007d4 <__aeabi_i2f>:
 80007d4:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 80007d8:	bf48      	it	mi
 80007da:	4240      	negmi	r0, r0
 80007dc:	ea5f 0c00 	movs.w	ip, r0
 80007e0:	bf08      	it	eq
 80007e2:	4770      	bxeq	lr
 80007e4:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 80007e8:	4601      	mov	r1, r0
 80007ea:	f04f 0000 	mov.w	r0, #0
 80007ee:	e01c      	b.n	800082a <__aeabi_l2f+0x2a>

080007f0 <__aeabi_ul2f>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	f04f 0300 	mov.w	r3, #0
 80007fc:	e00a      	b.n	8000814 <__aeabi_l2f+0x14>
 80007fe:	bf00      	nop

08000800 <__aeabi_l2f>:
 8000800:	ea50 0201 	orrs.w	r2, r0, r1
 8000804:	bf08      	it	eq
 8000806:	4770      	bxeq	lr
 8000808:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 800080c:	d502      	bpl.n	8000814 <__aeabi_l2f+0x14>
 800080e:	4240      	negs	r0, r0
 8000810:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000814:	ea5f 0c01 	movs.w	ip, r1
 8000818:	bf02      	ittt	eq
 800081a:	4684      	moveq	ip, r0
 800081c:	4601      	moveq	r1, r0
 800081e:	2000      	moveq	r0, #0
 8000820:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000824:	bf08      	it	eq
 8000826:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 800082a:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 800082e:	fabc f28c 	clz	r2, ip
 8000832:	3a08      	subs	r2, #8
 8000834:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000838:	db10      	blt.n	800085c <__aeabi_l2f+0x5c>
 800083a:	fa01 fc02 	lsl.w	ip, r1, r2
 800083e:	4463      	add	r3, ip
 8000840:	fa00 fc02 	lsl.w	ip, r0, r2
 8000844:	f1c2 0220 	rsb	r2, r2, #32
 8000848:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800084c:	fa20 f202 	lsr.w	r2, r0, r2
 8000850:	eb43 0002 	adc.w	r0, r3, r2
 8000854:	bf08      	it	eq
 8000856:	f020 0001 	biceq.w	r0, r0, #1
 800085a:	4770      	bx	lr
 800085c:	f102 0220 	add.w	r2, r2, #32
 8000860:	fa01 fc02 	lsl.w	ip, r1, r2
 8000864:	f1c2 0220 	rsb	r2, r2, #32
 8000868:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800086c:	fa21 f202 	lsr.w	r2, r1, r2
 8000870:	eb43 0002 	adc.w	r0, r3, r2
 8000874:	bf08      	it	eq
 8000876:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800087a:	4770      	bx	lr

0800087c <__aeabi_f2iz>:
 800087c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000880:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000884:	d30f      	bcc.n	80008a6 <__aeabi_f2iz+0x2a>
 8000886:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 800088a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800088e:	d90d      	bls.n	80008ac <__aeabi_f2iz+0x30>
 8000890:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000894:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000898:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 800089c:	fa23 f002 	lsr.w	r0, r3, r2
 80008a0:	bf18      	it	ne
 80008a2:	4240      	negne	r0, r0
 80008a4:	4770      	bx	lr
 80008a6:	f04f 0000 	mov.w	r0, #0
 80008aa:	4770      	bx	lr
 80008ac:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 80008b0:	d101      	bne.n	80008b6 <__aeabi_f2iz+0x3a>
 80008b2:	0242      	lsls	r2, r0, #9
 80008b4:	d105      	bne.n	80008c2 <__aeabi_f2iz+0x46>
 80008b6:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 80008ba:	bf08      	it	eq
 80008bc:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 80008c0:	4770      	bx	lr
 80008c2:	f04f 0000 	mov.w	r0, #0
 80008c6:	4770      	bx	lr

080008c8 <__aeabi_uldivmod>:
 80008c8:	b953      	cbnz	r3, 80008e0 <__aeabi_uldivmod+0x18>
 80008ca:	b94a      	cbnz	r2, 80008e0 <__aeabi_uldivmod+0x18>
 80008cc:	2900      	cmp	r1, #0
 80008ce:	bf08      	it	eq
 80008d0:	2800      	cmpeq	r0, #0
 80008d2:	bf1c      	itt	ne
 80008d4:	f04f 31ff 	movne.w	r1, #4294967295
 80008d8:	f04f 30ff 	movne.w	r0, #4294967295
 80008dc:	f000 b96a 	b.w	8000bb4 <__aeabi_idiv0>
 80008e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80008e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008e8:	f000 f806 	bl	80008f8 <__udivmoddi4>
 80008ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008f4:	b004      	add	sp, #16
 80008f6:	4770      	bx	lr

080008f8 <__udivmoddi4>:
 80008f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008fc:	9d08      	ldr	r5, [sp, #32]
 80008fe:	460c      	mov	r4, r1
 8000900:	2b00      	cmp	r3, #0
 8000902:	d14e      	bne.n	80009a2 <__udivmoddi4+0xaa>
 8000904:	4694      	mov	ip, r2
 8000906:	458c      	cmp	ip, r1
 8000908:	4686      	mov	lr, r0
 800090a:	fab2 f282 	clz	r2, r2
 800090e:	d962      	bls.n	80009d6 <__udivmoddi4+0xde>
 8000910:	b14a      	cbz	r2, 8000926 <__udivmoddi4+0x2e>
 8000912:	f1c2 0320 	rsb	r3, r2, #32
 8000916:	4091      	lsls	r1, r2
 8000918:	fa20 f303 	lsr.w	r3, r0, r3
 800091c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000920:	4319      	orrs	r1, r3
 8000922:	fa00 fe02 	lsl.w	lr, r0, r2
 8000926:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800092a:	fa1f f68c 	uxth.w	r6, ip
 800092e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000932:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000936:	fb07 1114 	mls	r1, r7, r4, r1
 800093a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800093e:	fb04 f106 	mul.w	r1, r4, r6
 8000942:	4299      	cmp	r1, r3
 8000944:	d90a      	bls.n	800095c <__udivmoddi4+0x64>
 8000946:	eb1c 0303 	adds.w	r3, ip, r3
 800094a:	f104 30ff 	add.w	r0, r4, #4294967295
 800094e:	f080 8112 	bcs.w	8000b76 <__udivmoddi4+0x27e>
 8000952:	4299      	cmp	r1, r3
 8000954:	f240 810f 	bls.w	8000b76 <__udivmoddi4+0x27e>
 8000958:	3c02      	subs	r4, #2
 800095a:	4463      	add	r3, ip
 800095c:	1a59      	subs	r1, r3, r1
 800095e:	fa1f f38e 	uxth.w	r3, lr
 8000962:	fbb1 f0f7 	udiv	r0, r1, r7
 8000966:	fb07 1110 	mls	r1, r7, r0, r1
 800096a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800096e:	fb00 f606 	mul.w	r6, r0, r6
 8000972:	429e      	cmp	r6, r3
 8000974:	d90a      	bls.n	800098c <__udivmoddi4+0x94>
 8000976:	eb1c 0303 	adds.w	r3, ip, r3
 800097a:	f100 31ff 	add.w	r1, r0, #4294967295
 800097e:	f080 80fc 	bcs.w	8000b7a <__udivmoddi4+0x282>
 8000982:	429e      	cmp	r6, r3
 8000984:	f240 80f9 	bls.w	8000b7a <__udivmoddi4+0x282>
 8000988:	4463      	add	r3, ip
 800098a:	3802      	subs	r0, #2
 800098c:	1b9b      	subs	r3, r3, r6
 800098e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000992:	2100      	movs	r1, #0
 8000994:	b11d      	cbz	r5, 800099e <__udivmoddi4+0xa6>
 8000996:	40d3      	lsrs	r3, r2
 8000998:	2200      	movs	r2, #0
 800099a:	e9c5 3200 	strd	r3, r2, [r5]
 800099e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009a2:	428b      	cmp	r3, r1
 80009a4:	d905      	bls.n	80009b2 <__udivmoddi4+0xba>
 80009a6:	b10d      	cbz	r5, 80009ac <__udivmoddi4+0xb4>
 80009a8:	e9c5 0100 	strd	r0, r1, [r5]
 80009ac:	2100      	movs	r1, #0
 80009ae:	4608      	mov	r0, r1
 80009b0:	e7f5      	b.n	800099e <__udivmoddi4+0xa6>
 80009b2:	fab3 f183 	clz	r1, r3
 80009b6:	2900      	cmp	r1, #0
 80009b8:	d146      	bne.n	8000a48 <__udivmoddi4+0x150>
 80009ba:	42a3      	cmp	r3, r4
 80009bc:	d302      	bcc.n	80009c4 <__udivmoddi4+0xcc>
 80009be:	4290      	cmp	r0, r2
 80009c0:	f0c0 80f0 	bcc.w	8000ba4 <__udivmoddi4+0x2ac>
 80009c4:	1a86      	subs	r6, r0, r2
 80009c6:	eb64 0303 	sbc.w	r3, r4, r3
 80009ca:	2001      	movs	r0, #1
 80009cc:	2d00      	cmp	r5, #0
 80009ce:	d0e6      	beq.n	800099e <__udivmoddi4+0xa6>
 80009d0:	e9c5 6300 	strd	r6, r3, [r5]
 80009d4:	e7e3      	b.n	800099e <__udivmoddi4+0xa6>
 80009d6:	2a00      	cmp	r2, #0
 80009d8:	f040 8090 	bne.w	8000afc <__udivmoddi4+0x204>
 80009dc:	eba1 040c 	sub.w	r4, r1, ip
 80009e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80009e4:	fa1f f78c 	uxth.w	r7, ip
 80009e8:	2101      	movs	r1, #1
 80009ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80009ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80009f2:	fb08 4416 	mls	r4, r8, r6, r4
 80009f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80009fa:	fb07 f006 	mul.w	r0, r7, r6
 80009fe:	4298      	cmp	r0, r3
 8000a00:	d908      	bls.n	8000a14 <__udivmoddi4+0x11c>
 8000a02:	eb1c 0303 	adds.w	r3, ip, r3
 8000a06:	f106 34ff 	add.w	r4, r6, #4294967295
 8000a0a:	d202      	bcs.n	8000a12 <__udivmoddi4+0x11a>
 8000a0c:	4298      	cmp	r0, r3
 8000a0e:	f200 80cd 	bhi.w	8000bac <__udivmoddi4+0x2b4>
 8000a12:	4626      	mov	r6, r4
 8000a14:	1a1c      	subs	r4, r3, r0
 8000a16:	fa1f f38e 	uxth.w	r3, lr
 8000a1a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000a1e:	fb08 4410 	mls	r4, r8, r0, r4
 8000a22:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000a26:	fb00 f707 	mul.w	r7, r0, r7
 8000a2a:	429f      	cmp	r7, r3
 8000a2c:	d908      	bls.n	8000a40 <__udivmoddi4+0x148>
 8000a2e:	eb1c 0303 	adds.w	r3, ip, r3
 8000a32:	f100 34ff 	add.w	r4, r0, #4294967295
 8000a36:	d202      	bcs.n	8000a3e <__udivmoddi4+0x146>
 8000a38:	429f      	cmp	r7, r3
 8000a3a:	f200 80b0 	bhi.w	8000b9e <__udivmoddi4+0x2a6>
 8000a3e:	4620      	mov	r0, r4
 8000a40:	1bdb      	subs	r3, r3, r7
 8000a42:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000a46:	e7a5      	b.n	8000994 <__udivmoddi4+0x9c>
 8000a48:	f1c1 0620 	rsb	r6, r1, #32
 8000a4c:	408b      	lsls	r3, r1
 8000a4e:	fa22 f706 	lsr.w	r7, r2, r6
 8000a52:	431f      	orrs	r7, r3
 8000a54:	fa20 fc06 	lsr.w	ip, r0, r6
 8000a58:	fa04 f301 	lsl.w	r3, r4, r1
 8000a5c:	ea43 030c 	orr.w	r3, r3, ip
 8000a60:	40f4      	lsrs	r4, r6
 8000a62:	fa00 f801 	lsl.w	r8, r0, r1
 8000a66:	0c38      	lsrs	r0, r7, #16
 8000a68:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000a6c:	fbb4 fef0 	udiv	lr, r4, r0
 8000a70:	fa1f fc87 	uxth.w	ip, r7
 8000a74:	fb00 441e 	mls	r4, r0, lr, r4
 8000a78:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000a7c:	fb0e f90c 	mul.w	r9, lr, ip
 8000a80:	45a1      	cmp	r9, r4
 8000a82:	fa02 f201 	lsl.w	r2, r2, r1
 8000a86:	d90a      	bls.n	8000a9e <__udivmoddi4+0x1a6>
 8000a88:	193c      	adds	r4, r7, r4
 8000a8a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000a8e:	f080 8084 	bcs.w	8000b9a <__udivmoddi4+0x2a2>
 8000a92:	45a1      	cmp	r9, r4
 8000a94:	f240 8081 	bls.w	8000b9a <__udivmoddi4+0x2a2>
 8000a98:	f1ae 0e02 	sub.w	lr, lr, #2
 8000a9c:	443c      	add	r4, r7
 8000a9e:	eba4 0409 	sub.w	r4, r4, r9
 8000aa2:	fa1f f983 	uxth.w	r9, r3
 8000aa6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000aaa:	fb00 4413 	mls	r4, r0, r3, r4
 8000aae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ab2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ab6:	45a4      	cmp	ip, r4
 8000ab8:	d907      	bls.n	8000aca <__udivmoddi4+0x1d2>
 8000aba:	193c      	adds	r4, r7, r4
 8000abc:	f103 30ff 	add.w	r0, r3, #4294967295
 8000ac0:	d267      	bcs.n	8000b92 <__udivmoddi4+0x29a>
 8000ac2:	45a4      	cmp	ip, r4
 8000ac4:	d965      	bls.n	8000b92 <__udivmoddi4+0x29a>
 8000ac6:	3b02      	subs	r3, #2
 8000ac8:	443c      	add	r4, r7
 8000aca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000ace:	fba0 9302 	umull	r9, r3, r0, r2
 8000ad2:	eba4 040c 	sub.w	r4, r4, ip
 8000ad6:	429c      	cmp	r4, r3
 8000ad8:	46ce      	mov	lr, r9
 8000ada:	469c      	mov	ip, r3
 8000adc:	d351      	bcc.n	8000b82 <__udivmoddi4+0x28a>
 8000ade:	d04e      	beq.n	8000b7e <__udivmoddi4+0x286>
 8000ae0:	b155      	cbz	r5, 8000af8 <__udivmoddi4+0x200>
 8000ae2:	ebb8 030e 	subs.w	r3, r8, lr
 8000ae6:	eb64 040c 	sbc.w	r4, r4, ip
 8000aea:	fa04 f606 	lsl.w	r6, r4, r6
 8000aee:	40cb      	lsrs	r3, r1
 8000af0:	431e      	orrs	r6, r3
 8000af2:	40cc      	lsrs	r4, r1
 8000af4:	e9c5 6400 	strd	r6, r4, [r5]
 8000af8:	2100      	movs	r1, #0
 8000afa:	e750      	b.n	800099e <__udivmoddi4+0xa6>
 8000afc:	f1c2 0320 	rsb	r3, r2, #32
 8000b00:	fa20 f103 	lsr.w	r1, r0, r3
 8000b04:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b08:	fa24 f303 	lsr.w	r3, r4, r3
 8000b0c:	4094      	lsls	r4, r2
 8000b0e:	430c      	orrs	r4, r1
 8000b10:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b14:	fa00 fe02 	lsl.w	lr, r0, r2
 8000b18:	fa1f f78c 	uxth.w	r7, ip
 8000b1c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b20:	fb08 3110 	mls	r1, r8, r0, r3
 8000b24:	0c23      	lsrs	r3, r4, #16
 8000b26:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b2a:	fb00 f107 	mul.w	r1, r0, r7
 8000b2e:	4299      	cmp	r1, r3
 8000b30:	d908      	bls.n	8000b44 <__udivmoddi4+0x24c>
 8000b32:	eb1c 0303 	adds.w	r3, ip, r3
 8000b36:	f100 36ff 	add.w	r6, r0, #4294967295
 8000b3a:	d22c      	bcs.n	8000b96 <__udivmoddi4+0x29e>
 8000b3c:	4299      	cmp	r1, r3
 8000b3e:	d92a      	bls.n	8000b96 <__udivmoddi4+0x29e>
 8000b40:	3802      	subs	r0, #2
 8000b42:	4463      	add	r3, ip
 8000b44:	1a5b      	subs	r3, r3, r1
 8000b46:	b2a4      	uxth	r4, r4
 8000b48:	fbb3 f1f8 	udiv	r1, r3, r8
 8000b4c:	fb08 3311 	mls	r3, r8, r1, r3
 8000b50:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b54:	fb01 f307 	mul.w	r3, r1, r7
 8000b58:	42a3      	cmp	r3, r4
 8000b5a:	d908      	bls.n	8000b6e <__udivmoddi4+0x276>
 8000b5c:	eb1c 0404 	adds.w	r4, ip, r4
 8000b60:	f101 36ff 	add.w	r6, r1, #4294967295
 8000b64:	d213      	bcs.n	8000b8e <__udivmoddi4+0x296>
 8000b66:	42a3      	cmp	r3, r4
 8000b68:	d911      	bls.n	8000b8e <__udivmoddi4+0x296>
 8000b6a:	3902      	subs	r1, #2
 8000b6c:	4464      	add	r4, ip
 8000b6e:	1ae4      	subs	r4, r4, r3
 8000b70:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000b74:	e739      	b.n	80009ea <__udivmoddi4+0xf2>
 8000b76:	4604      	mov	r4, r0
 8000b78:	e6f0      	b.n	800095c <__udivmoddi4+0x64>
 8000b7a:	4608      	mov	r0, r1
 8000b7c:	e706      	b.n	800098c <__udivmoddi4+0x94>
 8000b7e:	45c8      	cmp	r8, r9
 8000b80:	d2ae      	bcs.n	8000ae0 <__udivmoddi4+0x1e8>
 8000b82:	ebb9 0e02 	subs.w	lr, r9, r2
 8000b86:	eb63 0c07 	sbc.w	ip, r3, r7
 8000b8a:	3801      	subs	r0, #1
 8000b8c:	e7a8      	b.n	8000ae0 <__udivmoddi4+0x1e8>
 8000b8e:	4631      	mov	r1, r6
 8000b90:	e7ed      	b.n	8000b6e <__udivmoddi4+0x276>
 8000b92:	4603      	mov	r3, r0
 8000b94:	e799      	b.n	8000aca <__udivmoddi4+0x1d2>
 8000b96:	4630      	mov	r0, r6
 8000b98:	e7d4      	b.n	8000b44 <__udivmoddi4+0x24c>
 8000b9a:	46d6      	mov	lr, sl
 8000b9c:	e77f      	b.n	8000a9e <__udivmoddi4+0x1a6>
 8000b9e:	4463      	add	r3, ip
 8000ba0:	3802      	subs	r0, #2
 8000ba2:	e74d      	b.n	8000a40 <__udivmoddi4+0x148>
 8000ba4:	4606      	mov	r6, r0
 8000ba6:	4623      	mov	r3, r4
 8000ba8:	4608      	mov	r0, r1
 8000baa:	e70f      	b.n	80009cc <__udivmoddi4+0xd4>
 8000bac:	3e02      	subs	r6, #2
 8000bae:	4463      	add	r3, ip
 8000bb0:	e730      	b.n	8000a14 <__udivmoddi4+0x11c>
 8000bb2:	bf00      	nop

08000bb4 <__aeabi_idiv0>:
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	b085      	sub	sp, #20
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000bc0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000bc4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000bc6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	4313      	orrs	r3, r2
 8000bce:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000bd0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000bd4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	4013      	ands	r3, r2
 8000bda:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000bdc:	68fb      	ldr	r3, [r7, #12]
}
 8000bde:	bf00      	nop
 8000be0:	3714      	adds	r7, #20
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bc80      	pop	{r7}
 8000be6:	4770      	bx	lr

08000be8 <LL_APB2_GRP1_DisableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_DisableClock(uint32_t Periphs)
{
 8000be8:	b480      	push	{r7}
 8000bea:	b083      	sub	sp, #12
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 8000bf0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000bf4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	43db      	mvns	r3, r3
 8000bfa:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000bfe:	4013      	ands	r3, r2
 8000c00:	660b      	str	r3, [r1, #96]	@ 0x60
}
 8000c02:	bf00      	nop
 8000c04:	370c      	adds	r7, #12
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bc80      	pop	{r7}
 8000c0a:	4770      	bx	lr

08000c0c <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	af00      	add	r7, sp, #0

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC;
 8000c10:	4b23      	ldr	r3, [pc, #140]	@ (8000ca0 <MX_ADC_Init+0x94>)
 8000c12:	4a24      	ldr	r2, [pc, #144]	@ (8000ca4 <MX_ADC_Init+0x98>)
 8000c14:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000c16:	4b22      	ldr	r3, [pc, #136]	@ (8000ca0 <MX_ADC_Init+0x94>)
 8000c18:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8000c1c:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000c1e:	4b20      	ldr	r3, [pc, #128]	@ (8000ca0 <MX_ADC_Init+0x94>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c24:	4b1e      	ldr	r3, [pc, #120]	@ (8000ca0 <MX_ADC_Init+0x94>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000c2a:	4b1d      	ldr	r3, [pc, #116]	@ (8000ca0 <MX_ADC_Init+0x94>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000c30:	4b1b      	ldr	r3, [pc, #108]	@ (8000ca0 <MX_ADC_Init+0x94>)
 8000c32:	2204      	movs	r2, #4
 8000c34:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000c36:	4b1a      	ldr	r3, [pc, #104]	@ (8000ca0 <MX_ADC_Init+0x94>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000c3c:	4b18      	ldr	r3, [pc, #96]	@ (8000ca0 <MX_ADC_Init+0x94>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 8000c42:	4b17      	ldr	r3, [pc, #92]	@ (8000ca0 <MX_ADC_Init+0x94>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	769a      	strb	r2, [r3, #26]
  hadc.Init.NbrOfConversion = 1;
 8000c48:	4b15      	ldr	r3, [pc, #84]	@ (8000ca0 <MX_ADC_Init+0x94>)
 8000c4a:	2201      	movs	r2, #1
 8000c4c:	61da      	str	r2, [r3, #28]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000c4e:	4b14      	ldr	r3, [pc, #80]	@ (8000ca0 <MX_ADC_Init+0x94>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	f883 2020 	strb.w	r2, [r3, #32]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c56:	4b12      	ldr	r3, [pc, #72]	@ (8000ca0 <MX_ADC_Init+0x94>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000c5c:	4b10      	ldr	r3, [pc, #64]	@ (8000ca0 <MX_ADC_Init+0x94>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000c62:	4b0f      	ldr	r3, [pc, #60]	@ (8000ca0 <MX_ADC_Init+0x94>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  hadc.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000c6a:	4b0d      	ldr	r3, [pc, #52]	@ (8000ca0 <MX_ADC_Init+0x94>)
 8000c6c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000c70:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_160CYCLES_5;
 8000c72:	4b0b      	ldr	r3, [pc, #44]	@ (8000ca0 <MX_ADC_Init+0x94>)
 8000c74:	2207      	movs	r2, #7
 8000c76:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_160CYCLES_5;
 8000c78:	4b09      	ldr	r3, [pc, #36]	@ (8000ca0 <MX_ADC_Init+0x94>)
 8000c7a:	2207      	movs	r2, #7
 8000c7c:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc.Init.OversamplingMode = DISABLE;
 8000c7e:	4b08      	ldr	r3, [pc, #32]	@ (8000ca0 <MX_ADC_Init+0x94>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  hadc.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000c86:	4b06      	ldr	r3, [pc, #24]	@ (8000ca0 <MX_ADC_Init+0x94>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000c8c:	4804      	ldr	r0, [pc, #16]	@ (8000ca0 <MX_ADC_Init+0x94>)
 8000c8e:	f002 f8f3 	bl	8002e78 <HAL_ADC_Init>
 8000c92:	4603      	mov	r3, r0
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d001      	beq.n	8000c9c <MX_ADC_Init+0x90>
  {
    Error_Handler();
 8000c98:	f000 fc8c 	bl	80015b4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000c9c:	bf00      	nop
 8000c9e:	bd80      	pop	{r7, pc}
 8000ca0:	20000154 	.word	0x20000154
 8000ca4:	40012400 	.word	0x40012400

08000ca8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b082      	sub	sp, #8
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC)
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	4a09      	ldr	r2, [pc, #36]	@ (8000cdc <HAL_ADC_MspInit+0x34>)
 8000cb6:	4293      	cmp	r3, r2
 8000cb8:	d10b      	bne.n	8000cd2 <HAL_ADC_MspInit+0x2a>
  {
  /* USER CODE BEGIN ADC_MspInit 0 */

  /* USER CODE END ADC_MspInit 0 */
    /* ADC clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000cba:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000cbe:	f7ff ff7b 	bl	8000bb8 <LL_APB2_GRP1_EnableClock>

    /* ADC interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	2100      	movs	r1, #0
 8000cc6:	2012      	movs	r0, #18
 8000cc8:	f003 fa15 	bl	80040f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000ccc:	2012      	movs	r0, #18
 8000cce:	f003 fa2c 	bl	800412a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC_MspInit 1 */

  /* USER CODE END ADC_MspInit 1 */
  }
}
 8000cd2:	bf00      	nop
 8000cd4:	3708      	adds	r7, #8
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	40012400 	.word	0x40012400

08000ce0 <HAL_ADC_MspDeInit>:

void HAL_ADC_MspDeInit(ADC_HandleTypeDef* adcHandle)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b082      	sub	sp, #8
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC)
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	4a06      	ldr	r2, [pc, #24]	@ (8000d08 <HAL_ADC_MspDeInit+0x28>)
 8000cee:	4293      	cmp	r3, r2
 8000cf0:	d106      	bne.n	8000d00 <HAL_ADC_MspDeInit+0x20>
  {
  /* USER CODE BEGIN ADC_MspDeInit 0 */

  /* USER CODE END ADC_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_ADC_CLK_DISABLE();
 8000cf2:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000cf6:	f7ff ff77 	bl	8000be8 <LL_APB2_GRP1_DisableClock>

    /* ADC interrupt Deinit */
    HAL_NVIC_DisableIRQ(ADC_IRQn);
 8000cfa:	2012      	movs	r0, #18
 8000cfc:	f003 fa23 	bl	8004146 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN ADC_MspDeInit 1 */

  /* USER CODE END ADC_MspDeInit 1 */
  }
}
 8000d00:	bf00      	nop
 8000d02:	3708      	adds	r7, #8
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	40012400 	.word	0x40012400

08000d0c <SYS_InitMeasurement>:
/* USER CODE BEGIN EF */

/* USER CODE END EF */

void SYS_InitMeasurement(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SYS_InitMeasurement_1 */

  /* USER CODE END SYS_InitMeasurement_1 */
  hadc.Instance = ADC;
 8000d10:	4b03      	ldr	r3, [pc, #12]	@ (8000d20 <SYS_InitMeasurement+0x14>)
 8000d12:	4a04      	ldr	r2, [pc, #16]	@ (8000d24 <SYS_InitMeasurement+0x18>)
 8000d14:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN SYS_InitMeasurement_2 */

  /* USER CODE END SYS_InitMeasurement_2 */
}
 8000d16:	bf00      	nop
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bc80      	pop	{r7}
 8000d1c:	4770      	bx	lr
 8000d1e:	bf00      	nop
 8000d20:	20000154 	.word	0x20000154
 8000d24:	40012400 	.word	0x40012400

08000d28 <SYS_GetTemperatureLevel>:

  /* USER CODE END SYS_DeInitMeasurement_1 */
}

int16_t SYS_GetTemperatureLevel(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b082      	sub	sp, #8
 8000d2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SYS_GetTemperatureLevel_1 */

  /* USER CODE END SYS_GetTemperatureLevel_1 */
  __IO int16_t temperatureDegreeC = 0;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	803b      	strh	r3, [r7, #0]
  uint32_t measuredLevel = 0;
 8000d32:	2300      	movs	r3, #0
 8000d34:	607b      	str	r3, [r7, #4]
  uint16_t batteryLevelmV = SYS_GetBatteryLevel();
 8000d36:	f000 f869 	bl	8000e0c <SYS_GetBatteryLevel>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	807b      	strh	r3, [r7, #2]

  measuredLevel = ADC_ReadChannels(ADC_CHANNEL_TEMPSENSOR);
 8000d3e:	482d      	ldr	r0, [pc, #180]	@ (8000df4 <SYS_GetTemperatureLevel+0xcc>)
 8000d40:	f000 f898 	bl	8000e74 <ADC_ReadChannels>
 8000d44:	6078      	str	r0, [r7, #4]

  /* convert ADC level to temperature */
  /* check whether device has temperature sensor calibrated in production */
  if (((int32_t)*TEMPSENSOR_CAL2_ADDR - (int32_t)*TEMPSENSOR_CAL1_ADDR) != 0)
 8000d46:	4b2c      	ldr	r3, [pc, #176]	@ (8000df8 <SYS_GetTemperatureLevel+0xd0>)
 8000d48:	881a      	ldrh	r2, [r3, #0]
 8000d4a:	4b2c      	ldr	r3, [pc, #176]	@ (8000dfc <SYS_GetTemperatureLevel+0xd4>)
 8000d4c:	881b      	ldrh	r3, [r3, #0]
 8000d4e:	429a      	cmp	r2, r3
 8000d50:	d026      	beq.n	8000da0 <SYS_GetTemperatureLevel+0x78>
  {
    /* Device with temperature sensor calibrated in production:
       use device optimized parameters */
    temperatureDegreeC = __LL_ADC_CALC_TEMPERATURE(batteryLevelmV,
 8000d52:	4b29      	ldr	r3, [pc, #164]	@ (8000df8 <SYS_GetTemperatureLevel+0xd0>)
 8000d54:	881a      	ldrh	r2, [r3, #0]
 8000d56:	4b29      	ldr	r3, [pc, #164]	@ (8000dfc <SYS_GetTemperatureLevel+0xd4>)
 8000d58:	881b      	ldrh	r3, [r3, #0]
 8000d5a:	429a      	cmp	r2, r3
 8000d5c:	d01c      	beq.n	8000d98 <SYS_GetTemperatureLevel+0x70>
 8000d5e:	887b      	ldrh	r3, [r7, #2]
 8000d60:	687a      	ldr	r2, [r7, #4]
 8000d62:	fb02 f303 	mul.w	r3, r2, r3
 8000d66:	089b      	lsrs	r3, r3, #2
 8000d68:	4a25      	ldr	r2, [pc, #148]	@ (8000e00 <SYS_GetTemperatureLevel+0xd8>)
 8000d6a:	fba2 2303 	umull	r2, r3, r2, r3
 8000d6e:	095b      	lsrs	r3, r3, #5
 8000d70:	461a      	mov	r2, r3
 8000d72:	4b22      	ldr	r3, [pc, #136]	@ (8000dfc <SYS_GetTemperatureLevel+0xd4>)
 8000d74:	881b      	ldrh	r3, [r3, #0]
 8000d76:	1ad3      	subs	r3, r2, r3
 8000d78:	2264      	movs	r2, #100	@ 0x64
 8000d7a:	fb03 f202 	mul.w	r2, r3, r2
 8000d7e:	4b1e      	ldr	r3, [pc, #120]	@ (8000df8 <SYS_GetTemperatureLevel+0xd0>)
 8000d80:	881b      	ldrh	r3, [r3, #0]
 8000d82:	4619      	mov	r1, r3
 8000d84:	4b1d      	ldr	r3, [pc, #116]	@ (8000dfc <SYS_GetTemperatureLevel+0xd4>)
 8000d86:	881b      	ldrh	r3, [r3, #0]
 8000d88:	1acb      	subs	r3, r1, r3
 8000d8a:	fb92 f3f3 	sdiv	r3, r2, r3
 8000d8e:	b29b      	uxth	r3, r3
 8000d90:	331e      	adds	r3, #30
 8000d92:	b29b      	uxth	r3, r3
 8000d94:	b21b      	sxth	r3, r3
 8000d96:	e001      	b.n	8000d9c <SYS_GetTemperatureLevel+0x74>
 8000d98:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8000d9c:	803b      	strh	r3, [r7, #0]
 8000d9e:	e01d      	b.n	8000ddc <SYS_GetTemperatureLevel+0xb4>
  }
  else
  {
    /* Device with temperature sensor not calibrated in production:
       use generic parameters */
    temperatureDegreeC = __LL_ADC_CALC_TEMPERATURE_TYP_PARAMS(TEMPSENSOR_TYP_AVGSLOPE,
 8000da0:	887b      	ldrh	r3, [r7, #2]
 8000da2:	687a      	ldr	r2, [r7, #4]
 8000da4:	fb03 f202 	mul.w	r2, r3, r2
 8000da8:	4b16      	ldr	r3, [pc, #88]	@ (8000e04 <SYS_GetTemperatureLevel+0xdc>)
 8000daa:	fba3 1302 	umull	r1, r3, r3, r2
 8000dae:	1ad2      	subs	r2, r2, r3
 8000db0:	0852      	lsrs	r2, r2, #1
 8000db2:	4413      	add	r3, r2
 8000db4:	0adb      	lsrs	r3, r3, #11
 8000db6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000dba:	fb02 f303 	mul.w	r3, r2, r3
 8000dbe:	f5a3 2339 	sub.w	r3, r3, #757760	@ 0xb9000
 8000dc2:	f5a3 630c 	sub.w	r3, r3, #2240	@ 0x8c0
 8000dc6:	4a10      	ldr	r2, [pc, #64]	@ (8000e08 <SYS_GetTemperatureLevel+0xe0>)
 8000dc8:	fb82 1203 	smull	r1, r2, r2, r3
 8000dcc:	1292      	asrs	r2, r2, #10
 8000dce:	17db      	asrs	r3, r3, #31
 8000dd0:	1ad3      	subs	r3, r2, r3
 8000dd2:	b29b      	uxth	r3, r3
 8000dd4:	331e      	adds	r3, #30
 8000dd6:	b29b      	uxth	r3, r3
 8000dd8:	b21b      	sxth	r3, r3
 8000dda:	803b      	strh	r3, [r7, #0]
                                                              measuredLevel,
                                                              LL_ADC_RESOLUTION_12B);
  }

  /* from int16 to q8.7*/
  temperatureDegreeC <<= 8;
 8000ddc:	883b      	ldrh	r3, [r7, #0]
 8000dde:	b21b      	sxth	r3, r3
 8000de0:	021b      	lsls	r3, r3, #8
 8000de2:	b21b      	sxth	r3, r3
 8000de4:	803b      	strh	r3, [r7, #0]

  return (int16_t) temperatureDegreeC;
 8000de6:	883b      	ldrh	r3, [r7, #0]
 8000de8:	b21b      	sxth	r3, r3
  /* USER CODE BEGIN SYS_GetTemperatureLevel_2 */

  /* USER CODE END SYS_GetTemperatureLevel_2 */
}
 8000dea:	4618      	mov	r0, r3
 8000dec:	3708      	adds	r7, #8
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	b0001000 	.word	0xb0001000
 8000df8:	1fff75c8 	.word	0x1fff75c8
 8000dfc:	1fff75a8 	.word	0x1fff75a8
 8000e00:	09ee009f 	.word	0x09ee009f
 8000e04:	00100101 	.word	0x00100101
 8000e08:	68db8bad 	.word	0x68db8bad

08000e0c <SYS_GetBatteryLevel>:

uint16_t SYS_GetBatteryLevel(void)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b082      	sub	sp, #8
 8000e10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SYS_GetBatteryLevel_1 */

  /* USER CODE END SYS_GetBatteryLevel_1 */
  uint16_t batteryLevelmV = 0;
 8000e12:	2300      	movs	r3, #0
 8000e14:	80fb      	strh	r3, [r7, #6]
  uint32_t measuredLevel = 0;
 8000e16:	2300      	movs	r3, #0
 8000e18:	603b      	str	r3, [r7, #0]

  measuredLevel = ADC_ReadChannels(ADC_CHANNEL_VREFINT);
 8000e1a:	4813      	ldr	r0, [pc, #76]	@ (8000e68 <SYS_GetBatteryLevel+0x5c>)
 8000e1c:	f000 f82a 	bl	8000e74 <ADC_ReadChannels>
 8000e20:	6038      	str	r0, [r7, #0]

  if (measuredLevel == 0)
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d102      	bne.n	8000e2e <SYS_GetBatteryLevel+0x22>
  {
    batteryLevelmV = 0;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	80fb      	strh	r3, [r7, #6]
 8000e2c:	e016      	b.n	8000e5c <SYS_GetBatteryLevel+0x50>
  }
  else
  {
    if ((uint32_t)*VREFINT_CAL_ADDR != (uint32_t)0xFFFFU)
 8000e2e:	4b0f      	ldr	r3, [pc, #60]	@ (8000e6c <SYS_GetBatteryLevel+0x60>)
 8000e30:	881b      	ldrh	r3, [r3, #0]
 8000e32:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000e36:	4293      	cmp	r3, r2
 8000e38:	d00b      	beq.n	8000e52 <SYS_GetBatteryLevel+0x46>
    {
      /* Device with Reference voltage calibrated in production:
         use device optimized parameters */
      batteryLevelmV = __LL_ADC_CALC_VREFANALOG_VOLTAGE(measuredLevel,
 8000e3a:	4b0c      	ldr	r3, [pc, #48]	@ (8000e6c <SYS_GetBatteryLevel+0x60>)
 8000e3c:	881b      	ldrh	r3, [r3, #0]
 8000e3e:	461a      	mov	r2, r3
 8000e40:	f640 43e4 	movw	r3, #3300	@ 0xce4
 8000e44:	fb03 f202 	mul.w	r2, r3, r2
 8000e48:	683b      	ldr	r3, [r7, #0]
 8000e4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e4e:	80fb      	strh	r3, [r7, #6]
 8000e50:	e004      	b.n	8000e5c <SYS_GetBatteryLevel+0x50>
    }
    else
    {
      /* Device with Reference voltage not calibrated in production:
         use generic parameters */
      batteryLevelmV = (VREFINT_CAL_VREF * 1510) / measuredLevel;
 8000e52:	4a07      	ldr	r2, [pc, #28]	@ (8000e70 <SYS_GetBatteryLevel+0x64>)
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e5a:	80fb      	strh	r3, [r7, #6]
    }
  }

  return batteryLevelmV;
 8000e5c:	88fb      	ldrh	r3, [r7, #6]
  /* USER CODE BEGIN SYS_GetBatteryLevel_2 */

  /* USER CODE END SYS_GetBatteryLevel_2 */
}
 8000e5e:	4618      	mov	r0, r3
 8000e60:	3708      	adds	r7, #8
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	b4002000 	.word	0xb4002000
 8000e6c:	1fff75aa 	.word	0x1fff75aa
 8000e70:	004c08d8 	.word	0x004c08d8

08000e74 <ADC_ReadChannels>:
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

static uint32_t ADC_ReadChannels(uint32_t channel)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b086      	sub	sp, #24
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ADC_ReadChannels_1 */

  /* USER CODE END ADC_ReadChannels_1 */
  uint32_t ADCxConvertedValues = 0;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	617b      	str	r3, [r7, #20]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000e80:	f107 0308 	add.w	r3, r7, #8
 8000e84:	2200      	movs	r2, #0
 8000e86:	601a      	str	r2, [r3, #0]
 8000e88:	605a      	str	r2, [r3, #4]
 8000e8a:	609a      	str	r2, [r3, #8]

  MX_ADC_Init();
 8000e8c:	f7ff febe 	bl	8000c0c <MX_ADC_Init>

  /* Start Calibration */
  if (HAL_ADCEx_Calibration_Start(&hadc) != HAL_OK)
 8000e90:	481a      	ldr	r0, [pc, #104]	@ (8000efc <ADC_ReadChannels+0x88>)
 8000e92:	f002 ff44 	bl	8003d1e <HAL_ADCEx_Calibration_Start>
 8000e96:	4603      	mov	r3, r0
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d001      	beq.n	8000ea0 <ADC_ReadChannels+0x2c>
  {
    Error_Handler();
 8000e9c:	f000 fb8a 	bl	80015b4 <Error_Handler>
  }

  /* Configure Regular Channel */
  sConfig.Channel = channel;
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	60bb      	str	r3, [r7, #8]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	613b      	str	r3, [r7, #16]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000eac:	f107 0308 	add.w	r3, r7, #8
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	4812      	ldr	r0, [pc, #72]	@ (8000efc <ADC_ReadChannels+0x88>)
 8000eb4:	f002 fc50 	bl	8003758 <HAL_ADC_ConfigChannel>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d001      	beq.n	8000ec2 <ADC_ReadChannels+0x4e>
  {
    Error_Handler();
 8000ebe:	f000 fb79 	bl	80015b4 <Error_Handler>
  }

  if (HAL_ADC_Start(&hadc) != HAL_OK)
 8000ec2:	480e      	ldr	r0, [pc, #56]	@ (8000efc <ADC_ReadChannels+0x88>)
 8000ec4:	f002 f9f8 	bl	80032b8 <HAL_ADC_Start>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d001      	beq.n	8000ed2 <ADC_ReadChannels+0x5e>
  {
    /* Start Error */
    Error_Handler();
 8000ece:	f000 fb71 	bl	80015b4 <Error_Handler>
  }
  /** Wait for end of conversion */
  HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 8000ed2:	f04f 31ff 	mov.w	r1, #4294967295
 8000ed6:	4809      	ldr	r0, [pc, #36]	@ (8000efc <ADC_ReadChannels+0x88>)
 8000ed8:	f002 fa66 	bl	80033a8 <HAL_ADC_PollForConversion>

  /** Wait for end of conversion */
  HAL_ADC_Stop(&hadc);   /* it calls also ADC_Disable() */
 8000edc:	4807      	ldr	r0, [pc, #28]	@ (8000efc <ADC_ReadChannels+0x88>)
 8000ede:	f002 fa31 	bl	8003344 <HAL_ADC_Stop>

  ADCxConvertedValues = HAL_ADC_GetValue(&hadc);
 8000ee2:	4806      	ldr	r0, [pc, #24]	@ (8000efc <ADC_ReadChannels+0x88>)
 8000ee4:	f002 faf7 	bl	80034d6 <HAL_ADC_GetValue>
 8000ee8:	6178      	str	r0, [r7, #20]

  HAL_ADC_DeInit(&hadc);
 8000eea:	4804      	ldr	r0, [pc, #16]	@ (8000efc <ADC_ReadChannels+0x88>)
 8000eec:	f002 f958 	bl	80031a0 <HAL_ADC_DeInit>

  return ADCxConvertedValues;
 8000ef0:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN ADC_ReadChannels_2 */

  /* USER CODE END ADC_ReadChannels_2 */
}
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	3718      	adds	r7, #24
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	20000154 	.word	0x20000154

08000f00 <LL_AHB1_GRP1_EnableClock>:
{
 8000f00:	b480      	push	{r7}
 8000f02:	b085      	sub	sp, #20
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000f08:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000f0c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8000f0e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	4313      	orrs	r3, r2
 8000f16:	648b      	str	r3, [r1, #72]	@ 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000f18:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000f1c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	4013      	ands	r3, r2
 8000f22:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000f24:	68fb      	ldr	r3, [r7, #12]
}
 8000f26:	bf00      	nop
 8000f28:	3714      	adds	r7, #20
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bc80      	pop	{r7}
 8000f2e:	4770      	bx	lr

08000f30 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000f34:	2004      	movs	r0, #4
 8000f36:	f7ff ffe3 	bl	8000f00 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000f3a:	2001      	movs	r0, #1
 8000f3c:	f7ff ffe0 	bl	8000f00 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000f40:	2200      	movs	r2, #0
 8000f42:	2100      	movs	r1, #0
 8000f44:	200b      	movs	r0, #11
 8000f46:	f003 f8d6 	bl	80040f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000f4a:	200b      	movs	r0, #11
 8000f4c:	f003 f8ed 	bl	800412a <HAL_NVIC_EnableIRQ>

}
 8000f50:	bf00      	nop
 8000f52:	bd80      	pop	{r7, pc}

08000f54 <FLASH_IF_Write>:
  /* USER CODE END FLASH_IF_DeInit_2 */
  return ret_status;
}

FLASH_IF_StatusTypedef FLASH_IF_Write(void *pDestination, const void *pSource, uint32_t uLength)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b086      	sub	sp, #24
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	60f8      	str	r0, [r7, #12]
 8000f5c:	60b9      	str	r1, [r7, #8]
 8000f5e:	607a      	str	r2, [r7, #4]
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_ERROR;
 8000f60:	23ff      	movs	r3, #255	@ 0xff
 8000f62:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN FLASH_IF_Write_1 */

  /* USER CODE END FLASH_IF_Write_1 */
  if (IS_FLASH_MAIN_MEM_ADDRESS((uint32_t)pDestination))
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8000f6a:	d311      	bcc.n	8000f90 <FLASH_IF_Write+0x3c>
 8000f6c:	4b0b      	ldr	r3, [pc, #44]	@ (8000f9c <FLASH_IF_Write+0x48>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	029a      	lsls	r2, r3, #10
 8000f72:	4b0b      	ldr	r3, [pc, #44]	@ (8000fa0 <FLASH_IF_Write+0x4c>)
 8000f74:	4013      	ands	r3, r2
 8000f76:	f103 6300 	add.w	r3, r3, #134217728	@ 0x8000000
 8000f7a:	3b01      	subs	r3, #1
 8000f7c:	68fa      	ldr	r2, [r7, #12]
 8000f7e:	4293      	cmp	r3, r2
 8000f80:	d306      	bcc.n	8000f90 <FLASH_IF_Write+0x3c>
  {
    ret_status = FLASH_IF_INT_Write(pDestination, pSource, uLength);
 8000f82:	687a      	ldr	r2, [r7, #4]
 8000f84:	68b9      	ldr	r1, [r7, #8]
 8000f86:	68f8      	ldr	r0, [r7, #12]
 8000f88:	f000 f85a 	bl	8001040 <FLASH_IF_INT_Write>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	75fb      	strb	r3, [r7, #23]
  }
  /* USER CODE BEGIN FLASH_IF_Write_2 */

  /* USER CODE END FLASH_IF_Write_2 */
  return ret_status;
 8000f90:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8000f94:	4618      	mov	r0, r3
 8000f96:	3718      	adds	r7, #24
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	1fff75e0 	.word	0x1fff75e0
 8000fa0:	03fffc00 	.word	0x03fffc00

08000fa4 <FLASH_IF_Read>:

FLASH_IF_StatusTypedef FLASH_IF_Read(void *pDestination, const void *pSource, uint32_t uLength)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b086      	sub	sp, #24
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	60f8      	str	r0, [r7, #12]
 8000fac:	60b9      	str	r1, [r7, #8]
 8000fae:	607a      	str	r2, [r7, #4]
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_ERROR;
 8000fb0:	23ff      	movs	r3, #255	@ 0xff
 8000fb2:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN FLASH_IF_Read_1 */

  /* USER CODE END FLASH_IF_Read_1 */
  if (IS_FLASH_MAIN_MEM_ADDRESS((uint32_t)pSource))
 8000fb4:	68bb      	ldr	r3, [r7, #8]
 8000fb6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8000fba:	d311      	bcc.n	8000fe0 <FLASH_IF_Read+0x3c>
 8000fbc:	4b0b      	ldr	r3, [pc, #44]	@ (8000fec <FLASH_IF_Read+0x48>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	029a      	lsls	r2, r3, #10
 8000fc2:	4b0b      	ldr	r3, [pc, #44]	@ (8000ff0 <FLASH_IF_Read+0x4c>)
 8000fc4:	4013      	ands	r3, r2
 8000fc6:	f103 6300 	add.w	r3, r3, #134217728	@ 0x8000000
 8000fca:	3b01      	subs	r3, #1
 8000fcc:	68ba      	ldr	r2, [r7, #8]
 8000fce:	4293      	cmp	r3, r2
 8000fd0:	d306      	bcc.n	8000fe0 <FLASH_IF_Read+0x3c>
  {
    ret_status = FLASH_IF_INT_Read(pDestination, pSource, uLength);
 8000fd2:	687a      	ldr	r2, [r7, #4]
 8000fd4:	68b9      	ldr	r1, [r7, #8]
 8000fd6:	68f8      	ldr	r0, [r7, #12]
 8000fd8:	f000 f93a 	bl	8001250 <FLASH_IF_INT_Read>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	75fb      	strb	r3, [r7, #23]
  }
  /* USER CODE BEGIN FLASH_IF_Read_2 */

  /* USER CODE END FLASH_IF_Read_2 */
  return ret_status;
 8000fe0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	3718      	adds	r7, #24
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	1fff75e0 	.word	0x1fff75e0
 8000ff0:	03fffc00 	.word	0x03fffc00

08000ff4 <FLASH_IF_Erase>:

FLASH_IF_StatusTypedef FLASH_IF_Erase(void *pStart, uint32_t uLength)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b084      	sub	sp, #16
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
 8000ffc:	6039      	str	r1, [r7, #0]
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_ERROR;
 8000ffe:	23ff      	movs	r3, #255	@ 0xff
 8001000:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN FLASH_IF_Erase_1 */

  /* USER CODE END FLASH_IF_Erase_1 */
  /* Check Flash start address */
  if (IS_FLASH_MAIN_MEM_ADDRESS((uint32_t)pStart))
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8001008:	d310      	bcc.n	800102c <FLASH_IF_Erase+0x38>
 800100a:	4b0b      	ldr	r3, [pc, #44]	@ (8001038 <FLASH_IF_Erase+0x44>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	029a      	lsls	r2, r3, #10
 8001010:	4b0a      	ldr	r3, [pc, #40]	@ (800103c <FLASH_IF_Erase+0x48>)
 8001012:	4013      	ands	r3, r2
 8001014:	f103 6300 	add.w	r3, r3, #134217728	@ 0x8000000
 8001018:	3b01      	subs	r3, #1
 800101a:	687a      	ldr	r2, [r7, #4]
 800101c:	4293      	cmp	r3, r2
 800101e:	d305      	bcc.n	800102c <FLASH_IF_Erase+0x38>
  {
    ret_status = FLASH_IF_INT_Erase(pStart, uLength);
 8001020:	6839      	ldr	r1, [r7, #0]
 8001022:	6878      	ldr	r0, [r7, #4]
 8001024:	f000 f932 	bl	800128c <FLASH_IF_INT_Erase>
 8001028:	4603      	mov	r3, r0
 800102a:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE BEGIN FLASH_IF_Erase_2 */

  /* USER CODE END FLASH_IF_Erase_2 */
  return ret_status;
 800102c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001030:	4618      	mov	r0, r3
 8001032:	3710      	adds	r7, #16
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}
 8001038:	1fff75e0 	.word	0x1fff75e0
 800103c:	03fffc00 	.word	0x03fffc00

08001040 <FLASH_IF_INT_Write>:

/* Private Functions Definition -----------------------------------------------*/

/* Private Functions : internal flash -----------------------------------------*/
static FLASH_IF_StatusTypedef FLASH_IF_INT_Write(void *pDestination, const void *pSource, uint32_t uLength)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b090      	sub	sp, #64	@ 0x40
 8001044:	af00      	add	r7, sp, #0
 8001046:	60f8      	str	r0, [r7, #12]
 8001048:	60b9      	str	r1, [r7, #8]
 800104a:	607a      	str	r2, [r7, #4]
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_OK;
 800104c:	2300      	movs	r3, #0
 800104e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  /* USER CODE BEGIN FLASH_IF_INT_Write_1 */

  /* USER CODE END FLASH_IF_INT_Write_1 */
  uint32_t uDest = (uint32_t)pDestination;
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t uSource = (uint32_t)pSource;
 8001056:	68bb      	ldr	r3, [r7, #8]
 8001058:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t length = uLength;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t number_pages;
  uint32_t current_dest;
  uint32_t current_source;
  uint32_t current_length;

  if ((pDestination == NULL) || (pSource == NULL) || !IS_ADDR_ALIGNED_64BITS(uLength)
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	2b00      	cmp	r3, #0
 8001062:	d00c      	beq.n	800107e <FLASH_IF_INT_Write+0x3e>
 8001064:	68bb      	ldr	r3, [r7, #8]
 8001066:	2b00      	cmp	r3, #0
 8001068:	d009      	beq.n	800107e <FLASH_IF_INT_Write+0x3e>
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	f003 0307 	and.w	r3, r3, #7
 8001070:	2b00      	cmp	r3, #0
 8001072:	d104      	bne.n	800107e <FLASH_IF_INT_Write+0x3e>
      || !IS_ADDR_ALIGNED_64BITS((uint32_t)pDestination))
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	f003 0307 	and.w	r3, r3, #7
 800107a:	2b00      	cmp	r3, #0
 800107c:	d002      	beq.n	8001084 <FLASH_IF_INT_Write+0x44>
  {
    return FLASH_IF_PARAM_ERROR;
 800107e:	f06f 0305 	mvn.w	r3, #5
 8001082:	e0da      	b.n	800123a <FLASH_IF_INT_Write+0x1fa>
  }

  /* Clear error flags raised during previous operation */
  ret_status = FLASH_IF_INT_Clear_Error();
 8001084:	f000 f992 	bl	80013ac <FLASH_IF_INT_Clear_Error>
 8001088:	4603      	mov	r3, r0
 800108a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

  if (ret_status == FLASH_IF_OK)
 800108e:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8001092:	2b00      	cmp	r3, #0
 8001094:	f040 80cf 	bne.w	8001236 <FLASH_IF_INT_Write+0x1f6>
  {
    /* Unlock the Flash to enable the flash control register access */
    if (HAL_FLASH_Unlock() == HAL_OK)
 8001098:	f003 fc9e 	bl	80049d8 <HAL_FLASH_Unlock>
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	f040 80c6 	bne.w	8001230 <FLASH_IF_INT_Write+0x1f0>
    {
      start_page_index = PAGE_INDEX(uDest);
 80010a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80010a6:	f103 4278 	add.w	r2, r3, #4160749568	@ 0xf8000000
 80010aa:	4b66      	ldr	r3, [pc, #408]	@ (8001244 <FLASH_IF_INT_Write+0x204>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	0299      	lsls	r1, r3, #10
 80010b0:	4b65      	ldr	r3, [pc, #404]	@ (8001248 <FLASH_IF_INT_Write+0x208>)
 80010b2:	400b      	ands	r3, r1
 80010b4:	fbb2 f1f3 	udiv	r1, r2, r3
 80010b8:	fb01 f303 	mul.w	r3, r1, r3
 80010bc:	1ad3      	subs	r3, r2, r3
 80010be:	0adb      	lsrs	r3, r3, #11
 80010c0:	61bb      	str	r3, [r7, #24]
      number_pages = PAGE_INDEX(uDest + uLength - 1U) - start_page_index + 1U;
 80010c2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	4413      	add	r3, r2
 80010c8:	f103 4378 	add.w	r3, r3, #4160749568	@ 0xf8000000
 80010cc:	3b01      	subs	r3, #1
 80010ce:	4a5d      	ldr	r2, [pc, #372]	@ (8001244 <FLASH_IF_INT_Write+0x204>)
 80010d0:	6812      	ldr	r2, [r2, #0]
 80010d2:	0291      	lsls	r1, r2, #10
 80010d4:	4a5c      	ldr	r2, [pc, #368]	@ (8001248 <FLASH_IF_INT_Write+0x208>)
 80010d6:	400a      	ands	r2, r1
 80010d8:	fbb3 f1f2 	udiv	r1, r3, r2
 80010dc:	fb01 f202 	mul.w	r2, r1, r2
 80010e0:	1a9b      	subs	r3, r3, r2
 80010e2:	0ada      	lsrs	r2, r3, #11
 80010e4:	69bb      	ldr	r3, [r7, #24]
 80010e6:	1ad3      	subs	r3, r2, r3
 80010e8:	3301      	adds	r3, #1
 80010ea:	617b      	str	r3, [r7, #20]

      if (number_pages > 1)
 80010ec:	697b      	ldr	r3, [r7, #20]
 80010ee:	2b01      	cmp	r3, #1
 80010f0:	d905      	bls.n	80010fe <FLASH_IF_INT_Write+0xbe>
      {
        length = FLASH_PAGE_SIZE - (uDest % FLASH_PAGE_SIZE);
 80010f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80010f4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80010f8:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 80010fc:	633b      	str	r3, [r7, #48]	@ 0x30
      }

      for (page_index = start_page_index; page_index < (start_page_index + number_pages); page_index++)
 80010fe:	69bb      	ldr	r3, [r7, #24]
 8001100:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001102:	e089      	b.n	8001218 <FLASH_IF_INT_Write+0x1d8>
      {
        page_address = page_index * FLASH_PAGE_SIZE + FLASH_BASE;
 8001104:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001106:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 800110a:	02db      	lsls	r3, r3, #11
 800110c:	613b      	str	r3, [r7, #16]
        if (FLASH_IF_INT_IsEmpty(pDestination, length) != FLASH_IF_MEM_EMPTY)
 800110e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001110:	68f8      	ldr	r0, [r7, #12]
 8001112:	f000 f925 	bl	8001360 <FLASH_IF_INT_IsEmpty>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	d031      	beq.n	8001180 <FLASH_IF_INT_Write+0x140>
        {
          if (pAllocatedBuffer == NULL)
 800111c:	4b4b      	ldr	r3, [pc, #300]	@ (800124c <FLASH_IF_INT_Write+0x20c>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	2b00      	cmp	r3, #0
 8001122:	d103      	bne.n	800112c <FLASH_IF_INT_Write+0xec>
          {
            ret_status = FLASH_IF_PARAM_ERROR;
 8001124:	23fa      	movs	r3, #250	@ 0xfa
 8001126:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
            break; /* exit for loop */
 800112a:	e07e      	b.n	800122a <FLASH_IF_INT_Write+0x1ea>
          }

          /* backup initial Flash page data in RAM area */
          FLASH_IF_INT_Read(pAllocatedBuffer, (const void *)page_address, FLASH_PAGE_SIZE);
 800112c:	4b47      	ldr	r3, [pc, #284]	@ (800124c <FLASH_IF_INT_Write+0x20c>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	6939      	ldr	r1, [r7, #16]
 8001132:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001136:	4618      	mov	r0, r3
 8001138:	f000 f88a 	bl	8001250 <FLASH_IF_INT_Read>
          /* copy fragment into RAM area */
          UTIL_MEM_cpy_8(&pAllocatedBuffer[uDest % FLASH_PAGE_SIZE], (const void *)uSource, length);
 800113c:	4b43      	ldr	r3, [pc, #268]	@ (800124c <FLASH_IF_INT_Write+0x20c>)
 800113e:	681a      	ldr	r2, [r3, #0]
 8001140:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001142:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001146:	4413      	add	r3, r2
 8001148:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800114a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800114c:	b292      	uxth	r2, r2
 800114e:	4618      	mov	r0, r3
 8001150:	f018 fde6 	bl	8019d20 <UTIL_MEM_cpy_8>

          /*  erase the Flash sector, to avoid writing twice in RAM */
          if (FLASH_IF_INT_Erase((void *)page_address, FLASH_PAGE_SIZE) != FLASH_IF_OK)
 8001154:	693b      	ldr	r3, [r7, #16]
 8001156:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800115a:	4618      	mov	r0, r3
 800115c:	f000 f896 	bl	800128c <FLASH_IF_INT_Erase>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	d003      	beq.n	800116e <FLASH_IF_INT_Write+0x12e>
          {
            ret_status = FLASH_IF_ERASE_ERROR;
 8001166:	23fe      	movs	r3, #254	@ 0xfe
 8001168:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
            break; /* exit for loop */
 800116c:	e05d      	b.n	800122a <FLASH_IF_INT_Write+0x1ea>
          }

          /* copy the whole flash sector including fragment from RAM to Flash */
          current_dest = page_address;
 800116e:	693b      	ldr	r3, [r7, #16]
 8001170:	627b      	str	r3, [r7, #36]	@ 0x24
          current_source = (uint32_t)pAllocatedBuffer;
 8001172:	4b36      	ldr	r3, [pc, #216]	@ (800124c <FLASH_IF_INT_Write+0x20c>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	623b      	str	r3, [r7, #32]
          current_length = FLASH_PAGE_SIZE;
 8001178:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800117c:	61fb      	str	r3, [r7, #28]
 800117e:	e005      	b.n	800118c <FLASH_IF_INT_Write+0x14c>
        }
        else
        {
          /* write a part of flash page from selected source data */
          current_dest = uDest;
 8001180:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001182:	627b      	str	r3, [r7, #36]	@ 0x24
          current_source = uSource;
 8001184:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001186:	623b      	str	r3, [r7, #32]
          current_length = length;
 8001188:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800118a:	61fb      	str	r3, [r7, #28]
        }

        for (address_offset = 0U; address_offset < current_length; address_offset += 8U)
 800118c:	2300      	movs	r3, #0
 800118e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001190:	e026      	b.n	80011e0 <FLASH_IF_INT_Write+0x1a0>
        {
          /* Device voltage range supposed to be [2.7V to 3.6V], the operation will be done by word */
          if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, current_dest,
                                *((uint64_t *)(current_source + address_offset))) == HAL_OK)
 8001192:	6a3a      	ldr	r2, [r7, #32]
 8001194:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001196:	4413      	add	r3, r2
          if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, current_dest,
 8001198:	e9d3 2300 	ldrd	r2, r3, [r3]
 800119c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800119e:	2001      	movs	r0, #1
 80011a0:	f003 fbd6 	bl	8004950 <HAL_FLASH_Program>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d113      	bne.n	80011d2 <FLASH_IF_INT_Write+0x192>
          {
            /* Check the written value */
            if (*(uint64_t *)current_dest != *(uint64_t *)(current_source + address_offset))
 80011aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011ac:	e9d3 0100 	ldrd	r0, r1, [r3]
 80011b0:	6a3a      	ldr	r2, [r7, #32]
 80011b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80011b4:	4413      	add	r3, r2
 80011b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011ba:	4299      	cmp	r1, r3
 80011bc:	bf08      	it	eq
 80011be:	4290      	cmpeq	r0, r2
 80011c0:	d003      	beq.n	80011ca <FLASH_IF_INT_Write+0x18a>
            {
              /* Flash content doesn't match SRAM content */
              ret_status = FLASH_IF_WRITE_ERROR;
 80011c2:	23fc      	movs	r3, #252	@ 0xfc
 80011c4:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
              break;
 80011c8:	e00e      	b.n	80011e8 <FLASH_IF_INT_Write+0x1a8>
            }
            /* Increment FLASH Destination address */
            current_dest = current_dest + 8U;
 80011ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011cc:	3308      	adds	r3, #8
 80011ce:	627b      	str	r3, [r7, #36]	@ 0x24
 80011d0:	e003      	b.n	80011da <FLASH_IF_INT_Write+0x19a>
          }
          else
          {
            /* Error occurred while writing data in Flash memory */
            ret_status = FLASH_IF_WRITE_ERROR;
 80011d2:	23fc      	movs	r3, #252	@ 0xfc
 80011d4:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
            break;
 80011d8:	e006      	b.n	80011e8 <FLASH_IF_INT_Write+0x1a8>
        for (address_offset = 0U; address_offset < current_length; address_offset += 8U)
 80011da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80011dc:	3308      	adds	r3, #8
 80011de:	62bb      	str	r3, [r7, #40]	@ 0x28
 80011e0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80011e2:	69fb      	ldr	r3, [r7, #28]
 80011e4:	429a      	cmp	r2, r3
 80011e6:	d3d4      	bcc.n	8001192 <FLASH_IF_INT_Write+0x152>
          }
        }

        if (ret_status != FLASH_IF_OK)
 80011e8:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d11b      	bne.n	8001228 <FLASH_IF_INT_Write+0x1e8>
          /* Error occurred while writing data in Flash memory */
          break;
        }

        /* Increment FLASH destination address, source address, and decrease remaining length */
        uDest += length;
 80011f0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80011f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80011f4:	4413      	add	r3, r2
 80011f6:	63bb      	str	r3, [r7, #56]	@ 0x38
        uSource += length;
 80011f8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80011fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80011fc:	4413      	add	r3, r2
 80011fe:	637b      	str	r3, [r7, #52]	@ 0x34
        length = ((uLength - length) > FLASH_PAGE_SIZE) ? FLASH_PAGE_SIZE : uLength - length;
 8001200:	687a      	ldr	r2, [r7, #4]
 8001202:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001204:	1ad3      	subs	r3, r2, r3
 8001206:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800120a:	bf28      	it	cs
 800120c:	f44f 6300 	movcs.w	r3, #2048	@ 0x800
 8001210:	633b      	str	r3, [r7, #48]	@ 0x30
      for (page_index = start_page_index; page_index < (start_page_index + number_pages); page_index++)
 8001212:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001214:	3301      	adds	r3, #1
 8001216:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001218:	69ba      	ldr	r2, [r7, #24]
 800121a:	697b      	ldr	r3, [r7, #20]
 800121c:	4413      	add	r3, r2
 800121e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001220:	429a      	cmp	r2, r3
 8001222:	f4ff af6f 	bcc.w	8001104 <FLASH_IF_INT_Write+0xc4>
 8001226:	e000      	b.n	800122a <FLASH_IF_INT_Write+0x1ea>
          break;
 8001228:	bf00      	nop
      }

      /* Lock the Flash to disable the flash control register access (recommended
       * to protect the FLASH memory against possible unwanted operation) */
      HAL_FLASH_Lock();
 800122a:	f003 fbf7 	bl	8004a1c <HAL_FLASH_Lock>
 800122e:	e002      	b.n	8001236 <FLASH_IF_INT_Write+0x1f6>
    }
    else
    {
      ret_status = FLASH_IF_LOCK_ERROR;
 8001230:	23fb      	movs	r3, #251	@ 0xfb
 8001232:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    }
  }
  /* USER CODE BEGIN FLASH_IF_INT_Write_2 */

  /* USER CODE END FLASH_IF_INT_Write_2 */
  return ret_status;
 8001236:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 800123a:	4618      	mov	r0, r3
 800123c:	3740      	adds	r7, #64	@ 0x40
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	1fff75e0 	.word	0x1fff75e0
 8001248:	03fffc00 	.word	0x03fffc00
 800124c:	200001b8 	.word	0x200001b8

08001250 <FLASH_IF_INT_Read>:

static FLASH_IF_StatusTypedef FLASH_IF_INT_Read(void *pDestination, const void *pSource, uint32_t uLength)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b086      	sub	sp, #24
 8001254:	af00      	add	r7, sp, #0
 8001256:	60f8      	str	r0, [r7, #12]
 8001258:	60b9      	str	r1, [r7, #8]
 800125a:	607a      	str	r2, [r7, #4]
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_OK;
 800125c:	2300      	movs	r3, #0
 800125e:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN FLASH_IF_INT_Read_1 */

  /* USER CODE END FLASH_IF_INT_Read_1 */
  if ((pDestination == NULL) || (pSource == NULL))
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	2b00      	cmp	r3, #0
 8001264:	d002      	beq.n	800126c <FLASH_IF_INT_Read+0x1c>
 8001266:	68bb      	ldr	r3, [r7, #8]
 8001268:	2b00      	cmp	r3, #0
 800126a:	d102      	bne.n	8001272 <FLASH_IF_INT_Read+0x22>
  {
    return FLASH_IF_PARAM_ERROR;
 800126c:	f06f 0305 	mvn.w	r3, #5
 8001270:	e008      	b.n	8001284 <FLASH_IF_INT_Read+0x34>
  }

  UTIL_MEM_cpy_8(pDestination, pSource, uLength);
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	b29b      	uxth	r3, r3
 8001276:	461a      	mov	r2, r3
 8001278:	68b9      	ldr	r1, [r7, #8]
 800127a:	68f8      	ldr	r0, [r7, #12]
 800127c:	f018 fd50 	bl	8019d20 <UTIL_MEM_cpy_8>
  /* USER CODE BEGIN FLASH_IF_INT_Read_2 */

  /* USER CODE END FLASH_IF_INT_Read_2 */
  return ret_status;
 8001280:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001284:	4618      	mov	r0, r3
 8001286:	3718      	adds	r7, #24
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}

0800128c <FLASH_IF_INT_Erase>:

static FLASH_IF_StatusTypedef FLASH_IF_INT_Erase(void *pStart, uint32_t uLength)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b088      	sub	sp, #32
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
 8001294:	6039      	str	r1, [r7, #0]
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_OK;
 8001296:	2300      	movs	r3, #0
 8001298:	77fb      	strb	r3, [r7, #31]
  /* USER CODE BEGIN FLASH_IF_INT_Erase_1 */

  /* USER CODE END FLASH_IF_INT_Erase_1 */
  HAL_StatusTypeDef hal_status = HAL_ERROR;
 800129a:	2301      	movs	r3, #1
 800129c:	77bb      	strb	r3, [r7, #30]
  uint32_t page_error = 0U;
 800129e:	2300      	movs	r3, #0
 80012a0:	617b      	str	r3, [r7, #20]
  uint32_t uStart = (uint32_t)pStart;
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	61bb      	str	r3, [r7, #24]
  FLASH_EraseInitTypeDef erase_init;

  if (pStart == NULL)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d102      	bne.n	80012b2 <FLASH_IF_INT_Erase+0x26>
  {
    return FLASH_IF_PARAM_ERROR;
 80012ac:	f06f 0305 	mvn.w	r3, #5
 80012b0:	e04e      	b.n	8001350 <FLASH_IF_INT_Erase+0xc4>
  }

  /* Clear error flags raised during previous operation */
  ret_status = FLASH_IF_INT_Clear_Error();
 80012b2:	f000 f87b 	bl	80013ac <FLASH_IF_INT_Clear_Error>
 80012b6:	4603      	mov	r3, r0
 80012b8:	77fb      	strb	r3, [r7, #31]

  if (ret_status == FLASH_IF_OK)
 80012ba:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d144      	bne.n	800134c <FLASH_IF_INT_Erase+0xc0>
  {
    /* Unlock the Flash to enable the flash control register access */
    if (HAL_FLASH_Unlock() == HAL_OK)
 80012c2:	f003 fb89 	bl	80049d8 <HAL_FLASH_Unlock>
 80012c6:	4603      	mov	r3, r0
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d13d      	bne.n	8001348 <FLASH_IF_INT_Erase+0xbc>
    {
      erase_init.TypeErase = FLASH_TYPEERASE_PAGES;
 80012cc:	2302      	movs	r3, #2
 80012ce:	60bb      	str	r3, [r7, #8]
      erase_init.Page = PAGE_INDEX(uStart);
 80012d0:	69bb      	ldr	r3, [r7, #24]
 80012d2:	f103 4278 	add.w	r2, r3, #4160749568	@ 0xf8000000
 80012d6:	4b20      	ldr	r3, [pc, #128]	@ (8001358 <FLASH_IF_INT_Erase+0xcc>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	0299      	lsls	r1, r3, #10
 80012dc:	4b1f      	ldr	r3, [pc, #124]	@ (800135c <FLASH_IF_INT_Erase+0xd0>)
 80012de:	400b      	ands	r3, r1
 80012e0:	fbb2 f1f3 	udiv	r1, r2, r3
 80012e4:	fb01 f303 	mul.w	r3, r1, r3
 80012e8:	1ad3      	subs	r3, r2, r3
 80012ea:	0adb      	lsrs	r3, r3, #11
 80012ec:	60fb      	str	r3, [r7, #12]
      /* Get the number of pages to erase from 1st page */
      erase_init.NbPages = PAGE_INDEX(uStart + uLength - 1U) - erase_init.Page + 1U;
 80012ee:	69ba      	ldr	r2, [r7, #24]
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	4413      	add	r3, r2
 80012f4:	f103 4378 	add.w	r3, r3, #4160749568	@ 0xf8000000
 80012f8:	3b01      	subs	r3, #1
 80012fa:	4a17      	ldr	r2, [pc, #92]	@ (8001358 <FLASH_IF_INT_Erase+0xcc>)
 80012fc:	6812      	ldr	r2, [r2, #0]
 80012fe:	0291      	lsls	r1, r2, #10
 8001300:	4a16      	ldr	r2, [pc, #88]	@ (800135c <FLASH_IF_INT_Erase+0xd0>)
 8001302:	400a      	ands	r2, r1
 8001304:	fbb3 f1f2 	udiv	r1, r3, r2
 8001308:	fb01 f202 	mul.w	r2, r1, r2
 800130c:	1a9b      	subs	r3, r3, r2
 800130e:	0ada      	lsrs	r2, r3, #11
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	1ad3      	subs	r3, r2, r3
 8001314:	3301      	adds	r3, #1
 8001316:	613b      	str	r3, [r7, #16]

      /* Erase the Page */
      hal_status = HAL_FLASHEx_Erase(&erase_init, &page_error);
 8001318:	f107 0214 	add.w	r2, r7, #20
 800131c:	f107 0308 	add.w	r3, r7, #8
 8001320:	4611      	mov	r1, r2
 8001322:	4618      	mov	r0, r3
 8001324:	f003 fc5a 	bl	8004bdc <HAL_FLASHEx_Erase>
 8001328:	4603      	mov	r3, r0
 800132a:	77bb      	strb	r3, [r7, #30]

      if (hal_status != HAL_OK)
 800132c:	7fbb      	ldrb	r3, [r7, #30]
 800132e:	2b00      	cmp	r3, #0
 8001330:	d007      	beq.n	8001342 <FLASH_IF_INT_Erase+0xb6>
      {
        ret_status = (hal_status == HAL_BUSY) ? FLASH_IF_BUSY : FLASH_IF_ERASE_ERROR;
 8001332:	7fbb      	ldrb	r3, [r7, #30]
 8001334:	2b02      	cmp	r3, #2
 8001336:	d101      	bne.n	800133c <FLASH_IF_INT_Erase+0xb0>
 8001338:	2301      	movs	r3, #1
 800133a:	e001      	b.n	8001340 <FLASH_IF_INT_Erase+0xb4>
 800133c:	f06f 0301 	mvn.w	r3, #1
 8001340:	77fb      	strb	r3, [r7, #31]
      }

      /* Lock the Flash to disable the flash control register access (recommended
       * to protect the FLASH memory against possible unwanted operation) */
      HAL_FLASH_Lock();
 8001342:	f003 fb6b 	bl	8004a1c <HAL_FLASH_Lock>
 8001346:	e001      	b.n	800134c <FLASH_IF_INT_Erase+0xc0>
    }
    else
    {
      ret_status = FLASH_IF_LOCK_ERROR;
 8001348:	23fb      	movs	r3, #251	@ 0xfb
 800134a:	77fb      	strb	r3, [r7, #31]
    }
  }
  /* USER CODE BEGIN FLASH_IF_INT_Erase_2 */

  /* USER CODE END FLASH_IF_INT_Erase_2 */
  return ret_status;
 800134c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8001350:	4618      	mov	r0, r3
 8001352:	3720      	adds	r7, #32
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}
 8001358:	1fff75e0 	.word	0x1fff75e0
 800135c:	03fffc00 	.word	0x03fffc00

08001360 <FLASH_IF_INT_IsEmpty>:

static int32_t FLASH_IF_INT_IsEmpty(void *pStart, uint32_t uLength)
{
 8001360:	b480      	push	{r7}
 8001362:	b085      	sub	sp, #20
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
 8001368:	6039      	str	r1, [r7, #0]
  int32_t status = FLASH_IF_MEM_EMPTY;
 800136a:	2300      	movs	r3, #0
 800136c:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN FLASH_IF_INT_IsEmpty_1 */

  /* USER CODE END FLASH_IF_INT_IsEmpty_1 */
  uint32_t index;
  for (index = 0; index < uLength; index += 8)
 800136e:	2300      	movs	r3, #0
 8001370:	60bb      	str	r3, [r7, #8]
 8001372:	e011      	b.n	8001398 <FLASH_IF_INT_IsEmpty+0x38>
  {
    if (*(uint64_t *)pStart != UINT64_MAX)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	e9d3 2300 	ldrd	r2, r3, [r3]
 800137a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800137e:	bf08      	it	eq
 8001380:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 8001384:	d002      	beq.n	800138c <FLASH_IF_INT_IsEmpty+0x2c>
    {
      status = FLASH_IF_MEM_NOT_EMPTY;
 8001386:	2301      	movs	r3, #1
 8001388:	60fb      	str	r3, [r7, #12]
      break;
 800138a:	e009      	b.n	80013a0 <FLASH_IF_INT_IsEmpty+0x40>
    }
    pStart = (void *)((uint32_t)pStart + 8U);
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	3308      	adds	r3, #8
 8001390:	607b      	str	r3, [r7, #4]
  for (index = 0; index < uLength; index += 8)
 8001392:	68bb      	ldr	r3, [r7, #8]
 8001394:	3308      	adds	r3, #8
 8001396:	60bb      	str	r3, [r7, #8]
 8001398:	68ba      	ldr	r2, [r7, #8]
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	429a      	cmp	r2, r3
 800139e:	d3e9      	bcc.n	8001374 <FLASH_IF_INT_IsEmpty+0x14>
  }
  /* USER CODE BEGIN FLASH_IF_INT_IsEmpty_2 */

  /* USER CODE END FLASH_IF_INT_IsEmpty_2 */
  return status;
 80013a0:	68fb      	ldr	r3, [r7, #12]
}
 80013a2:	4618      	mov	r0, r3
 80013a4:	3714      	adds	r7, #20
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bc80      	pop	{r7}
 80013aa:	4770      	bx	lr

080013ac <FLASH_IF_INT_Clear_Error>:

static FLASH_IF_StatusTypedef FLASH_IF_INT_Clear_Error(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b082      	sub	sp, #8
 80013b0:	af00      	add	r7, sp, #0
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_LOCK_ERROR;
 80013b2:	23fb      	movs	r3, #251	@ 0xfb
 80013b4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN FLASH_IF_INT_Clear_Error_1 */

  /* USER CODE END FLASH_IF_INT_Clear_Error_1 */
  /* Unlock the Program memory */
  if (HAL_FLASH_Unlock() == HAL_OK)
 80013b6:	f003 fb0f 	bl	80049d8 <HAL_FLASH_Unlock>
 80013ba:	4603      	mov	r3, r0
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d110      	bne.n	80013e2 <FLASH_IF_INT_Clear_Error+0x36>
  {
    /* Clear all FLASH flags */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
 80013c0:	4b0b      	ldr	r3, [pc, #44]	@ (80013f0 <FLASH_IF_INT_Clear_Error+0x44>)
 80013c2:	699b      	ldr	r3, [r3, #24]
 80013c4:	4a0a      	ldr	r2, [pc, #40]	@ (80013f0 <FLASH_IF_INT_Clear_Error+0x44>)
 80013c6:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80013ca:	6193      	str	r3, [r2, #24]
 80013cc:	4b08      	ldr	r3, [pc, #32]	@ (80013f0 <FLASH_IF_INT_Clear_Error+0x44>)
 80013ce:	f24c 32fa 	movw	r2, #50170	@ 0xc3fa
 80013d2:	611a      	str	r2, [r3, #16]
    /* Unlock the Program memory */
    if (HAL_FLASH_Lock() == HAL_OK)
 80013d4:	f003 fb22 	bl	8004a1c <HAL_FLASH_Lock>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d101      	bne.n	80013e2 <FLASH_IF_INT_Clear_Error+0x36>
    {
      ret_status = FLASH_IF_OK;
 80013de:	2300      	movs	r3, #0
 80013e0:	71fb      	strb	r3, [r7, #7]
    }
  }
  /* USER CODE BEGIN FLASH_IF_INT_Clear_Error_2 */

  /* USER CODE END FLASH_IF_INT_Clear_Error_2 */
  return ret_status;
 80013e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 80013e6:	4618      	mov	r0, r3
 80013e8:	3708      	adds	r7, #8
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	58004000 	.word	0x58004000

080013f4 <LL_AHB2_GRP1_EnableClock>:
{
 80013f4:	b480      	push	{r7}
 80013f6:	b085      	sub	sp, #20
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80013fc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001400:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001402:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	4313      	orrs	r3, r2
 800140a:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800140c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001410:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	4013      	ands	r3, r2
 8001416:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001418:	68fb      	ldr	r3, [r7, #12]
}
 800141a:	bf00      	nop
 800141c:	3714      	adds	r7, #20
 800141e:	46bd      	mov	sp, r7
 8001420:	bc80      	pop	{r7}
 8001422:	4770      	bx	lr

08001424 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b086      	sub	sp, #24
 8001428:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800142a:	1d3b      	adds	r3, r7, #4
 800142c:	2200      	movs	r2, #0
 800142e:	601a      	str	r2, [r3, #0]
 8001430:	605a      	str	r2, [r3, #4]
 8001432:	609a      	str	r2, [r3, #8]
 8001434:	60da      	str	r2, [r3, #12]
 8001436:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001438:	2001      	movs	r0, #1
 800143a:	f7ff ffdb 	bl	80013f4 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800143e:	2004      	movs	r0, #4
 8001440:	f7ff ffd8 	bl	80013f4 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001444:	2002      	movs	r0, #2
 8001446:	f7ff ffd5 	bl	80013f4 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4|GPIO_PIN_10, GPIO_PIN_SET);
 800144a:	2201      	movs	r2, #1
 800144c:	f44f 6182 	mov.w	r1, #1040	@ 0x410
 8001450:	4817      	ldr	r0, [pc, #92]	@ (80014b0 <MX_GPIO_Init+0x8c>)
 8001452:	f003 fec5 	bl	80051e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8001456:	2200      	movs	r2, #0
 8001458:	2120      	movs	r1, #32
 800145a:	4815      	ldr	r0, [pc, #84]	@ (80014b0 <MX_GPIO_Init+0x8c>)
 800145c:	f003 fec0 	bl	80051e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 8001460:	2201      	movs	r2, #1
 8001462:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001466:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800146a:	f003 feb9 	bl	80051e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB4 PB5 PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_10;
 800146e:	f44f 6386 	mov.w	r3, #1072	@ 0x430
 8001472:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001474:	2301      	movs	r3, #1
 8001476:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001478:	2300      	movs	r3, #0
 800147a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800147c:	2300      	movs	r3, #0
 800147e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001480:	1d3b      	adds	r3, r7, #4
 8001482:	4619      	mov	r1, r3
 8001484:	480a      	ldr	r0, [pc, #40]	@ (80014b0 <MX_GPIO_Init+0x8c>)
 8001486:	f003 fc7d 	bl	8004d84 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 800148a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800148e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001490:	2301      	movs	r3, #1
 8001492:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001494:	2300      	movs	r3, #0
 8001496:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001498:	2300      	movs	r3, #0
 800149a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800149c:	1d3b      	adds	r3, r7, #4
 800149e:	4619      	mov	r1, r3
 80014a0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80014a4:	f003 fc6e 	bl	8004d84 <HAL_GPIO_Init>

}
 80014a8:	bf00      	nop
 80014aa:	3718      	adds	r7, #24
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	48000400 	.word	0x48000400

080014b4 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 80014b4:	b480      	push	{r7}
 80014b6:	b083      	sub	sp, #12
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 80014bc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80014c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80014c4:	f023 0218 	bic.w	r2, r3, #24
 80014c8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	4313      	orrs	r3, r2
 80014d0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 80014d4:	bf00      	nop
 80014d6:	370c      	adds	r7, #12
 80014d8:	46bd      	mov	sp, r7
 80014da:	bc80      	pop	{r7}
 80014dc:	4770      	bx	lr

080014de <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014de:	b580      	push	{r7, lr}
 80014e0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014e2:	f001 fa81 	bl	80029e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014e6:	f000 f80d 	bl	8001504 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014ea:	f7ff ff9b 	bl	8001424 <MX_GPIO_Init>
  MX_DMA_Init();
 80014ee:	f7ff fd1f 	bl	8000f30 <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 80014f2:	f000 fedd 	bl	80022b0 <MX_LPUART1_UART_Init>
  MX_USART2_UART_Init();
 80014f6:	f000 ff7f 	bl	80023f8 <MX_USART2_UART_Init>
  MX_LoRaWAN_Init();
 80014fa:	f008 fdcf 	bl	800a09c <MX_LoRaWAN_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_LoRaWAN_Process();
 80014fe:	f008 fdd5 	bl	800a0ac <MX_LoRaWAN_Process>
 8001502:	e7fc      	b.n	80014fe <main+0x20>

08001504 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b09a      	sub	sp, #104	@ 0x68
 8001508:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800150a:	f107 0320 	add.w	r3, r7, #32
 800150e:	2248      	movs	r2, #72	@ 0x48
 8001510:	2100      	movs	r1, #0
 8001512:	4618      	mov	r0, r3
 8001514:	f019 fe46 	bl	801b1a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001518:	f107 0308 	add.w	r3, r7, #8
 800151c:	2200      	movs	r2, #0
 800151e:	601a      	str	r2, [r3, #0]
 8001520:	605a      	str	r2, [r3, #4]
 8001522:	609a      	str	r2, [r3, #8]
 8001524:	60da      	str	r2, [r3, #12]
 8001526:	611a      	str	r2, [r3, #16]
 8001528:	615a      	str	r2, [r3, #20]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800152a:	f003 fe71 	bl	8005210 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800152e:	2000      	movs	r0, #0
 8001530:	f7ff ffc0 	bl	80014b4 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001534:	4b1e      	ldr	r3, [pc, #120]	@ (80015b0 <SystemClock_Config+0xac>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800153c:	4a1c      	ldr	r2, [pc, #112]	@ (80015b0 <SystemClock_Config+0xac>)
 800153e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001542:	6013      	str	r3, [r2, #0]
 8001544:	4b1a      	ldr	r3, [pc, #104]	@ (80015b0 <SystemClock_Config+0xac>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800154c:	607b      	str	r3, [r7, #4]
 800154e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8001550:	2306      	movs	r3, #6
 8001552:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001554:	2381      	movs	r3, #129	@ 0x81
 8001556:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001558:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800155c:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800155e:	2340      	movs	r3, #64	@ 0x40
 8001560:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001562:	2300      	movs	r3, #0
 8001564:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001566:	f107 0320 	add.w	r3, r7, #32
 800156a:	4618      	mov	r0, r3
 800156c:	f004 f99c 	bl	80058a8 <HAL_RCC_OscConfig>
 8001570:	4603      	mov	r3, r0
 8001572:	2b00      	cmp	r3, #0
 8001574:	d001      	beq.n	800157a <SystemClock_Config+0x76>
  {
    Error_Handler();
 8001576:	f000 f81d 	bl	80015b4 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 800157a:	234f      	movs	r3, #79	@ 0x4f
 800157c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800157e:	2301      	movs	r3, #1
 8001580:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001582:	2300      	movs	r3, #0
 8001584:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001586:	2300      	movs	r3, #0
 8001588:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800158a:	2300      	movs	r3, #0
 800158c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 800158e:	2300      	movs	r3, #0
 8001590:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001592:	f107 0308 	add.w	r3, r7, #8
 8001596:	2102      	movs	r1, #2
 8001598:	4618      	mov	r0, r3
 800159a:	f004 fd07 	bl	8005fac <HAL_RCC_ClockConfig>
 800159e:	4603      	mov	r3, r0
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d001      	beq.n	80015a8 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 80015a4:	f000 f806 	bl	80015b4 <Error_Handler>
  }
}
 80015a8:	bf00      	nop
 80015aa:	3768      	adds	r7, #104	@ 0x68
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd80      	pop	{r7, pc}
 80015b0:	58000400 	.word	0x58000400

080015b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015b4:	b480      	push	{r7}
 80015b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015b8:	b672      	cpsid	i
}
 80015ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015bc:	bf00      	nop
 80015be:	e7fd      	b.n	80015bc <Error_Handler+0x8>

080015c0 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 80015c0:	b480      	push	{r7}
 80015c2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 80015c4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80015c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80015cc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80015d0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80015d4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80015d8:	bf00      	nop
 80015da:	46bd      	mov	sp, r7
 80015dc:	bc80      	pop	{r7}
 80015de:	4770      	bx	lr

080015e0 <LL_APB1_GRP1_EnableClock>:
{
 80015e0:	b480      	push	{r7}
 80015e2:	b085      	sub	sp, #20
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 80015e8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80015ec:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80015ee:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	4313      	orrs	r3, r2
 80015f6:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80015f8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80015fc:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	4013      	ands	r3, r2
 8001602:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001604:	68fb      	ldr	r3, [r7, #12]
}
 8001606:	bf00      	nop
 8001608:	3714      	adds	r7, #20
 800160a:	46bd      	mov	sp, r7
 800160c:	bc80      	pop	{r7}
 800160e:	4770      	bx	lr

08001610 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b08c      	sub	sp, #48	@ 0x30
 8001614:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_AlarmTypeDef sAlarm = {0};
 8001616:	1d3b      	adds	r3, r7, #4
 8001618:	222c      	movs	r2, #44	@ 0x2c
 800161a:	2100      	movs	r1, #0
 800161c:	4618      	mov	r0, r3
 800161e:	f019 fdc1 	bl	801b1a4 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001622:	4b22      	ldr	r3, [pc, #136]	@ (80016ac <MX_RTC_Init+0x9c>)
 8001624:	4a22      	ldr	r2, [pc, #136]	@ (80016b0 <MX_RTC_Init+0xa0>)
 8001626:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_PREDIV_A;
 8001628:	4b20      	ldr	r3, [pc, #128]	@ (80016ac <MX_RTC_Init+0x9c>)
 800162a:	221f      	movs	r2, #31
 800162c:	609a      	str	r2, [r3, #8]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800162e:	4b1f      	ldr	r3, [pc, #124]	@ (80016ac <MX_RTC_Init+0x9c>)
 8001630:	2200      	movs	r2, #0
 8001632:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001634:	4b1d      	ldr	r3, [pc, #116]	@ (80016ac <MX_RTC_Init+0x9c>)
 8001636:	2200      	movs	r2, #0
 8001638:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800163a:	4b1c      	ldr	r3, [pc, #112]	@ (80016ac <MX_RTC_Init+0x9c>)
 800163c:	2200      	movs	r2, #0
 800163e:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001640:	4b1a      	ldr	r3, [pc, #104]	@ (80016ac <MX_RTC_Init+0x9c>)
 8001642:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001646:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8001648:	4b18      	ldr	r3, [pc, #96]	@ (80016ac <MX_RTC_Init+0x9c>)
 800164a:	2200      	movs	r2, #0
 800164c:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_ONLY;
 800164e:	4b17      	ldr	r3, [pc, #92]	@ (80016ac <MX_RTC_Init+0x9c>)
 8001650:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001654:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001656:	4815      	ldr	r0, [pc, #84]	@ (80016ac <MX_RTC_Init+0x9c>)
 8001658:	f005 f964 	bl	8006924 <HAL_RTC_Init>
 800165c:	4603      	mov	r3, r0
 800165e:	2b00      	cmp	r3, #0
 8001660:	d001      	beq.n	8001666 <MX_RTC_Init+0x56>
  {
    Error_Handler();
 8001662:	f7ff ffa7 	bl	80015b4 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  if (HAL_RTCEx_SetSSRU_IT(&hrtc) != HAL_OK)
 8001666:	4811      	ldr	r0, [pc, #68]	@ (80016ac <MX_RTC_Init+0x9c>)
 8001668:	f005 fd32 	bl	80070d0 <HAL_RTCEx_SetSSRU_IT>
 800166c:	4603      	mov	r3, r0
 800166e:	2b00      	cmp	r3, #0
 8001670:	d001      	beq.n	8001676 <MX_RTC_Init+0x66>
  {
    Error_Handler();
 8001672:	f7ff ff9f 	bl	80015b4 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 8001676:	2300      	movs	r3, #0
 8001678:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 800167a:	2300      	movs	r3, #0
 800167c:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 800167e:	2300      	movs	r3, #0
 8001680:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 8001682:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001686:	61fb      	str	r3, [r7, #28]
  sAlarm.Alarm = RTC_ALARM_A;
 8001688:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800168c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, 0) != HAL_OK)
 800168e:	1d3b      	adds	r3, r7, #4
 8001690:	2200      	movs	r2, #0
 8001692:	4619      	mov	r1, r3
 8001694:	4805      	ldr	r0, [pc, #20]	@ (80016ac <MX_RTC_Init+0x9c>)
 8001696:	f005 f9c7 	bl	8006a28 <HAL_RTC_SetAlarm>
 800169a:	4603      	mov	r3, r0
 800169c:	2b00      	cmp	r3, #0
 800169e:	d001      	beq.n	80016a4 <MX_RTC_Init+0x94>
  {
    Error_Handler();
 80016a0:	f7ff ff88 	bl	80015b4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80016a4:	bf00      	nop
 80016a6:	3730      	adds	r7, #48	@ 0x30
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bd80      	pop	{r7, pc}
 80016ac:	200001bc 	.word	0x200001bc
 80016b0:	40002800 	.word	0x40002800

080016b4 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b090      	sub	sp, #64	@ 0x40
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80016bc:	f107 0308 	add.w	r3, r7, #8
 80016c0:	2238      	movs	r2, #56	@ 0x38
 80016c2:	2100      	movs	r1, #0
 80016c4:	4618      	mov	r0, r3
 80016c6:	f019 fd6d 	bl	801b1a4 <memset>
  if(rtcHandle->Instance==RTC)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	4a12      	ldr	r2, [pc, #72]	@ (8001718 <HAL_RTC_MspInit+0x64>)
 80016d0:	4293      	cmp	r3, r2
 80016d2:	d11d      	bne.n	8001710 <HAL_RTC_MspInit+0x5c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80016d4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80016d8:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80016da:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80016de:	63fb      	str	r3, [r7, #60]	@ 0x3c

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80016e0:	f107 0308 	add.w	r3, r7, #8
 80016e4:	4618      	mov	r0, r3
 80016e6:	f005 f803 	bl	80066f0 <HAL_RCCEx_PeriphCLKConfig>
 80016ea:	4603      	mov	r3, r0
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d001      	beq.n	80016f4 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 80016f0:	f7ff ff60 	bl	80015b4 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80016f4:	f7ff ff64 	bl	80015c0 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 80016f8:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 80016fc:	f7ff ff70 	bl	80015e0 <LL_APB1_GRP1_EnableClock>

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(TAMP_STAMP_LSECSS_SSRU_IRQn, 0, 0);
 8001700:	2200      	movs	r2, #0
 8001702:	2100      	movs	r1, #0
 8001704:	2002      	movs	r0, #2
 8001706:	f002 fcf6 	bl	80040f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TAMP_STAMP_LSECSS_SSRU_IRQn);
 800170a:	2002      	movs	r0, #2
 800170c:	f002 fd0d 	bl	800412a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001710:	bf00      	nop
 8001712:	3740      	adds	r7, #64	@ 0x40
 8001714:	46bd      	mov	sp, r7
 8001716:	bd80      	pop	{r7, pc}
 8001718:	40002800 	.word	0x40002800

0800171c <LL_PWR_ClearFlag_C1STOP_C1STB>:
  * @brief  Clear standby and stop flags for CPU1
  * @rmtoll EXTSCR       C1CSSF        LL_PWR_ClearFlag_C1STOP_C1STB
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_C1STOP_C1STB(void)
{
 800171c:	b480      	push	{r7}
 800171e:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->EXTSCR, PWR_EXTSCR_C1CSSF);
 8001720:	4b03      	ldr	r3, [pc, #12]	@ (8001730 <LL_PWR_ClearFlag_C1STOP_C1STB+0x14>)
 8001722:	2201      	movs	r2, #1
 8001724:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8001728:	bf00      	nop
 800172a:	46bd      	mov	sp, r7
 800172c:	bc80      	pop	{r7}
 800172e:	4770      	bx	lr
 8001730:	58000400 	.word	0x58000400

08001734 <PWR_EnterOffMode>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void PWR_EnterOffMode(void)
{
 8001734:	b480      	push	{r7}
 8001736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterOffMode_1 */

  /* USER CODE END EnterOffMode_1 */
}
 8001738:	bf00      	nop
 800173a:	46bd      	mov	sp, r7
 800173c:	bc80      	pop	{r7}
 800173e:	4770      	bx	lr

08001740 <PWR_ExitOffMode>:

void PWR_ExitOffMode(void)
{
 8001740:	b480      	push	{r7}
 8001742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitOffMode_1 */

  /* USER CODE END ExitOffMode_1 */
}
 8001744:	bf00      	nop
 8001746:	46bd      	mov	sp, r7
 8001748:	bc80      	pop	{r7}
 800174a:	4770      	bx	lr

0800174c <PWR_EnterStopMode>:

void PWR_EnterStopMode(void)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterStopMode_1 */

  /* USER CODE END EnterStopMode_1 */
  HAL_SuspendTick();
 8001750:	f001 f9b6 	bl	8002ac0 <HAL_SuspendTick>
  /* Clear Status Flag before entering STOP/STANDBY Mode */
  LL_PWR_ClearFlag_C1STOP_C1STB();
 8001754:	f7ff ffe2 	bl	800171c <LL_PWR_ClearFlag_C1STOP_C1STB>

  /* USER CODE BEGIN EnterStopMode_2 */

  /* USER CODE END EnterStopMode_2 */
  HAL_PWREx_EnterSTOP2Mode(PWR_STOPENTRY_WFI);
 8001758:	2001      	movs	r0, #1
 800175a:	f003 fdeb 	bl	8005334 <HAL_PWREx_EnterSTOP2Mode>
  /* USER CODE BEGIN EnterStopMode_3 */

  /* USER CODE END EnterStopMode_3 */
}
 800175e:	bf00      	nop
 8001760:	bd80      	pop	{r7, pc}

08001762 <PWR_ExitStopMode>:

void PWR_ExitStopMode(void)
{
 8001762:	b580      	push	{r7, lr}
 8001764:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitStopMode_1 */

  /* USER CODE END ExitStopMode_1 */
  /* Resume sysTick : work around for debugger problem in dual core */
  HAL_ResumeTick();
 8001766:	f001 f9b9 	bl	8002adc <HAL_ResumeTick>
    ADC interface
    DAC interface USARTx, TIMx, i2Cx, SPIx
    SRAM ctrls, DMAx, DMAMux, AES, RNG, HSEM  */

  /* Resume not retained USARTx and DMA */
  vcom_Resume();
 800176a:	f001 f893 	bl	8002894 <vcom_Resume>
  /* USER CODE BEGIN ExitStopMode_2 */

  /* USER CODE END ExitStopMode_2 */
}
 800176e:	bf00      	nop
 8001770:	bd80      	pop	{r7, pc}

08001772 <PWR_EnterSleepMode>:

void PWR_EnterSleepMode(void)
{
 8001772:	b580      	push	{r7, lr}
 8001774:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterSleepMode_1 */

  /* USER CODE END EnterSleepMode_1 */
  /* Suspend sysTick */
  HAL_SuspendTick();
 8001776:	f001 f9a3 	bl	8002ac0 <HAL_SuspendTick>
  /* USER CODE BEGIN EnterSleepMode_2 */

  /* USER CODE END EnterSleepMode_2 */
  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 800177a:	2101      	movs	r1, #1
 800177c:	2000      	movs	r0, #0
 800177e:	f003 fd55 	bl	800522c <HAL_PWR_EnterSLEEPMode>
  /* USER CODE BEGIN EnterSleepMode_3 */

  /* USER CODE END EnterSleepMode_3 */
}
 8001782:	bf00      	nop
 8001784:	bd80      	pop	{r7, pc}

08001786 <PWR_ExitSleepMode>:

void PWR_ExitSleepMode(void)
{
 8001786:	b580      	push	{r7, lr}
 8001788:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitSleepMode_1 */

  /* USER CODE END ExitSleepMode_1 */
  /* Resume sysTick */
  HAL_ResumeTick();
 800178a:	f001 f9a7 	bl	8002adc <HAL_ResumeTick>

  /* USER CODE BEGIN ExitSleepMode_2 */

  /* USER CODE END ExitSleepMode_2 */
}
 800178e:	bf00      	nop
 8001790:	bd80      	pop	{r7, pc}

08001792 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001792:	b480      	push	{r7}
 8001794:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001796:	bf00      	nop
 8001798:	46bd      	mov	sp, r7
 800179a:	bc80      	pop	{r7}
 800179c:	4770      	bx	lr

0800179e <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800179e:	b480      	push	{r7}
 80017a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80017a2:	bf00      	nop
 80017a4:	e7fd      	b.n	80017a2 <NMI_Handler+0x4>

080017a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017a6:	b480      	push	{r7}
 80017a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017aa:	bf00      	nop
 80017ac:	e7fd      	b.n	80017aa <HardFault_Handler+0x4>

080017ae <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017ae:	b480      	push	{r7}
 80017b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017b2:	bf00      	nop
 80017b4:	e7fd      	b.n	80017b2 <MemManage_Handler+0x4>

080017b6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017b6:	b480      	push	{r7}
 80017b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017ba:	bf00      	nop
 80017bc:	e7fd      	b.n	80017ba <BusFault_Handler+0x4>

080017be <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017be:	b480      	push	{r7}
 80017c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017c2:	bf00      	nop
 80017c4:	e7fd      	b.n	80017c2 <UsageFault_Handler+0x4>

080017c6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017c6:	b480      	push	{r7}
 80017c8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017ca:	bf00      	nop
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bc80      	pop	{r7}
 80017d0:	4770      	bx	lr

080017d2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017d2:	b480      	push	{r7}
 80017d4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017d6:	bf00      	nop
 80017d8:	46bd      	mov	sp, r7
 80017da:	bc80      	pop	{r7}
 80017dc:	4770      	bx	lr

080017de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017de:	b480      	push	{r7}
 80017e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017e2:	bf00      	nop
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bc80      	pop	{r7}
 80017e8:	4770      	bx	lr

080017ea <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017ea:	b580      	push	{r7, lr}
 80017ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017ee:	f001 f955 	bl	8002a9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017f2:	bf00      	nop
 80017f4:	bd80      	pop	{r7, pc}
	...

080017f8 <TAMP_STAMP_LSECSS_SSRU_IRQHandler>:

/**
  * @brief This function handles RTC Tamper, RTC TimeStamp, LSECSS and RTC SSRU Interrupts.
  */
void TAMP_STAMP_LSECSS_SSRU_IRQHandler(void)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 0 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 0 */
  HAL_RTCEx_SSRUIRQHandler(&hrtc);
 80017fc:	4802      	ldr	r0, [pc, #8]	@ (8001808 <TAMP_STAMP_LSECSS_SSRU_IRQHandler+0x10>)
 80017fe:	f005 fca3 	bl	8007148 <HAL_RTCEx_SSRUIRQHandler>
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 1 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 1 */
}
 8001802:	bf00      	nop
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop
 8001808:	200001bc 	.word	0x200001bc

0800180c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 1 Interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001810:	4802      	ldr	r0, [pc, #8]	@ (800181c <DMA1_Channel1_IRQHandler+0x10>)
 8001812:	f002 ff2d 	bl	8004670 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001816:	bf00      	nop
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	200003c4 	.word	0x200003c4

08001820 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC Interrupt.
  */
void ADC_IRQHandler(void)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc);
 8001824:	4802      	ldr	r0, [pc, #8]	@ (8001830 <ADC_IRQHandler+0x10>)
 8001826:	f001 fe62 	bl	80034ee <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800182a:	bf00      	nop
 800182c:	bd80      	pop	{r7, pc}
 800182e:	bf00      	nop
 8001830:	20000154 	.word	0x20000154

08001834 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 Interrupt.
  */
void USART1_IRQHandler(void)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001838:	4802      	ldr	r0, [pc, #8]	@ (8001844 <USART1_IRQHandler+0x10>)
 800183a:	f006 fac9 	bl	8007dd0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800183e:	bf00      	nop
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	2000029c 	.word	0x2000029c

08001848 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 Interrupt.
  */
void USART2_IRQHandler(void)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800184c:	4802      	ldr	r0, [pc, #8]	@ (8001858 <USART2_IRQHandler+0x10>)
 800184e:	f006 fabf 	bl	8007dd0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001852:	bf00      	nop
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	20000330 	.word	0x20000330

0800185c <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 Interrupt.
  */
void LPUART1_IRQHandler(void)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8001860:	4802      	ldr	r0, [pc, #8]	@ (800186c <LPUART1_IRQHandler+0x10>)
 8001862:	f006 fab5 	bl	8007dd0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8001866:	bf00      	nop
 8001868:	bd80      	pop	{r7, pc}
 800186a:	bf00      	nop
 800186c:	20000208 	.word	0x20000208

08001870 <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */
  HAL_SUBGHZ_IRQHandler(&hsubghz);
 8001874:	4802      	ldr	r0, [pc, #8]	@ (8001880 <SUBGHZ_Radio_IRQHandler+0x10>)
 8001876:	f005 ffcb 	bl	8007810 <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 800187a:	bf00      	nop
 800187c:	bd80      	pop	{r7, pc}
 800187e:	bf00      	nop
 8001880:	200001f4 	.word	0x200001f4

08001884 <LL_APB3_GRP1_EnableClock>:
  * @param  Periphs This parameter can be a combination of the following values:
  *         @arg @ref LL_APB3_GRP1_PERIPH_SUBGHZSPI
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
 8001884:	b480      	push	{r7}
 8001886:	b085      	sub	sp, #20
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 800188c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001890:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8001892:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	4313      	orrs	r3, r2
 800189a:	664b      	str	r3, [r1, #100]	@ 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 800189c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80018a0:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	4013      	ands	r3, r2
 80018a6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80018a8:	68fb      	ldr	r3, [r7, #12]
}
 80018aa:	bf00      	nop
 80018ac:	3714      	adds	r7, #20
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bc80      	pop	{r7}
 80018b2:	4770      	bx	lr

080018b4 <MX_SUBGHZ_Init>:

SUBGHZ_HandleTypeDef hsubghz;

/* SUBGHZ init function */
void MX_SUBGHZ_Init(void)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	af00      	add	r7, sp, #0
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */

  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_4;
 80018b8:	4b06      	ldr	r3, [pc, #24]	@ (80018d4 <MX_SUBGHZ_Init+0x20>)
 80018ba:	2208      	movs	r2, #8
 80018bc:	601a      	str	r2, [r3, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 80018be:	4805      	ldr	r0, [pc, #20]	@ (80018d4 <MX_SUBGHZ_Init+0x20>)
 80018c0:	f005 fd24 	bl	800730c <HAL_SUBGHZ_Init>
 80018c4:	4603      	mov	r3, r0
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d001      	beq.n	80018ce <MX_SUBGHZ_Init+0x1a>
  {
    Error_Handler();
 80018ca:	f7ff fe73 	bl	80015b4 <Error_Handler>
  }
  /* USER CODE BEGIN SUBGHZ_Init 2 */

  /* USER CODE END SUBGHZ_Init 2 */

}
 80018ce:	bf00      	nop
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	200001f4 	.word	0x200001f4

080018d8 <HAL_SUBGHZ_MspInit>:

void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* subghzHandle)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b082      	sub	sp, #8
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN SUBGHZ_MspInit 0 */

  /* USER CODE END SUBGHZ_MspInit 0 */
    /* SUBGHZ clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();
 80018e0:	2001      	movs	r0, #1
 80018e2:	f7ff ffcf 	bl	8001884 <LL_APB3_GRP1_EnableClock>

    /* SUBGHZ interrupt Init */
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 0, 0);
 80018e6:	2200      	movs	r2, #0
 80018e8:	2100      	movs	r1, #0
 80018ea:	2032      	movs	r0, #50	@ 0x32
 80018ec:	f002 fc03 	bl	80040f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 80018f0:	2032      	movs	r0, #50	@ 0x32
 80018f2:	f002 fc1a 	bl	800412a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */
}
 80018f6:	bf00      	nop
 80018f8:	3708      	adds	r7, #8
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}

080018fe <LL_RCC_SetClkAfterWakeFromStop>:
{
 80018fe:	b480      	push	{r7}
 8001900:	b083      	sub	sp, #12
 8001902:	af00      	add	r7, sp, #0
 8001904:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8001906:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800190a:	689b      	ldr	r3, [r3, #8]
 800190c:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8001910:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	4313      	orrs	r3, r2
 8001918:	608b      	str	r3, [r1, #8]
}
 800191a:	bf00      	nop
 800191c:	370c      	adds	r7, #12
 800191e:	46bd      	mov	sp, r7
 8001920:	bc80      	pop	{r7}
 8001922:	4770      	bx	lr

08001924 <LL_FLASH_GetUDN>:
/**
  * @brief  Return the Unique Device Number
  * @retval Values between Min_Data=0x00000000 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 8001924:	b480      	push	{r7}
 8001926:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID64_BASE)));
 8001928:	4b02      	ldr	r3, [pc, #8]	@ (8001934 <LL_FLASH_GetUDN+0x10>)
 800192a:	681b      	ldr	r3, [r3, #0]
}
 800192c:	4618      	mov	r0, r3
 800192e:	46bd      	mov	sp, r7
 8001930:	bc80      	pop	{r7}
 8001932:	4770      	bx	lr
 8001934:	1fff7580 	.word	0x1fff7580

08001938 <LL_FLASH_GetDeviceID>:
  * @brief  Return the Device ID
  *         For STM32WLxxxx devices, the device ID is 0x15
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x15)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 8001938:	b480      	push	{r7}
 800193a:	af00      	add	r7, sp, #0
  return ((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 800193c:	4b03      	ldr	r3, [pc, #12]	@ (800194c <LL_FLASH_GetDeviceID+0x14>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	b2db      	uxtb	r3, r3
}
 8001942:	4618      	mov	r0, r3
 8001944:	46bd      	mov	sp, r7
 8001946:	bc80      	pop	{r7}
 8001948:	4770      	bx	lr
 800194a:	bf00      	nop
 800194c:	1fff7584 	.word	0x1fff7584

08001950 <LL_FLASH_GetSTCompanyID>:
  * @brief  Return the ST Company ID
  * @note   For STM32WLxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 8001950:	b480      	push	{r7}
 8001952:	af00      	add	r7, sp, #0
  return (((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 8001954:	4b03      	ldr	r3, [pc, #12]	@ (8001964 <LL_FLASH_GetSTCompanyID+0x14>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	0a1b      	lsrs	r3, r3, #8
}
 800195a:	4618      	mov	r0, r3
 800195c:	46bd      	mov	sp, r7
 800195e:	bc80      	pop	{r7}
 8001960:	4770      	bx	lr
 8001962:	bf00      	nop
 8001964:	1fff7584 	.word	0x1fff7584

08001968 <SystemApp_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
void SystemApp_Init(void)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SystemApp_Init_1 */

  /* USER CODE END SystemApp_Init_1 */

  /* Ensure that MSI is wake-up system clock */
  __HAL_RCC_WAKEUPSTOP_CLK_CONFIG(RCC_STOP_WAKEUPCLOCK_MSI);
 800196c:	2000      	movs	r0, #0
 800196e:	f7ff ffc6 	bl	80018fe <LL_RCC_SetClkAfterWakeFromStop>

  /*Initialize timer and RTC*/
  UTIL_TIMER_Init();
 8001972:	f018 ff61 	bl	801a838 <UTIL_TIMER_Init>
  SYS_TimerInitialisedFlag = 1;
 8001976:	4b0e      	ldr	r3, [pc, #56]	@ (80019b0 <SystemApp_Init+0x48>)
 8001978:	2201      	movs	r2, #1
 800197a:	701a      	strb	r2, [r3, #0]
  /* Initializes the SW probes pins and the monitor RF pins via Alternate Function */
  DBG_Init();
 800197c:	f000 f97e 	bl	8001c7c <DBG_Init>

  /*Initialize the terminal */
  UTIL_ADV_TRACE_Init();
 8001980:	f019 f96a 	bl	801ac58 <UTIL_ADV_TRACE_Init>
  UTIL_ADV_TRACE_RegisterTimeStampFunction(TimestampNow);
 8001984:	480b      	ldr	r0, [pc, #44]	@ (80019b4 <SystemApp_Init+0x4c>)
 8001986:	f019 fa15 	bl	801adb4 <UTIL_ADV_TRACE_RegisterTimeStampFunction>

  /* #warning "should be removed when proper obl is done" */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 800198a:	4b0b      	ldr	r3, [pc, #44]	@ (80019b8 <SystemApp_Init+0x50>)
 800198c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001990:	611a      	str	r2, [r3, #16]

  /*Set verbose LEVEL*/
  UTIL_ADV_TRACE_SetVerboseLevel(VERBOSE_LEVEL);
 8001992:	2002      	movs	r0, #2
 8001994:	f019 fa1c 	bl	801add0 <UTIL_ADV_TRACE_SetVerboseLevel>

  /*Initialize the temperature and Battery measurement services */
  SYS_InitMeasurement();
 8001998:	f7ff f9b8 	bl	8000d0c <SYS_InitMeasurement>

  /*Initialize the Sensors */
  EnvSensors_Init();
 800199c:	f000 f9ae 	bl	8001cfc <EnvSensors_Init>

  /*Init low power manager*/
  UTIL_LPM_Init();
 80019a0:	f018 f918 	bl	8019bd4 <UTIL_LPM_Init>
  /* Disable Stand-by mode */
  UTIL_LPM_SetOffMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 80019a4:	2101      	movs	r1, #1
 80019a6:	2001      	movs	r0, #1
 80019a8:	f018 f954 	bl	8019c54 <UTIL_LPM_SetOffMode>
#endif /* LOW_POWER_DISABLE */

  /* USER CODE BEGIN SystemApp_Init_2 */

  /* USER CODE END SystemApp_Init_2 */
}
 80019ac:	bf00      	nop
 80019ae:	bd80      	pop	{r7, pc}
 80019b0:	20000200 	.word	0x20000200
 80019b4:	08001b89 	.word	0x08001b89
 80019b8:	58004000 	.word	0x58004000

080019bc <UTIL_SEQ_Idle>:

/**
  * @brief redefines __weak function in stm32_seq.c such to enter low power
  */
void UTIL_SEQ_Idle(void)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_SEQ_Idle_1 */

  /* USER CODE END UTIL_SEQ_Idle_1 */
  UTIL_LPM_EnterLowPower();
 80019c0:	f018 f978 	bl	8019cb4 <UTIL_LPM_EnterLowPower>
  /* USER CODE BEGIN UTIL_SEQ_Idle_2 */

  /* USER CODE END UTIL_SEQ_Idle_2 */
}
 80019c4:	bf00      	nop
 80019c6:	bd80      	pop	{r7, pc}

080019c8 <GetBatteryLevel>:

uint8_t GetBatteryLevel(void)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b082      	sub	sp, #8
 80019cc:	af00      	add	r7, sp, #0
  uint8_t batteryLevel = 0;
 80019ce:	2300      	movs	r3, #0
 80019d0:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN GetBatteryLevel_0 */

  /* USER CODE END GetBatteryLevel_0 */

  batteryLevelmV = (uint16_t) SYS_GetBatteryLevel();
 80019d2:	f7ff fa1b 	bl	8000e0c <SYS_GetBatteryLevel>
 80019d6:	4603      	mov	r3, r0
 80019d8:	80bb      	strh	r3, [r7, #4]

  /* Convert battery level from mV to linear scale: 1 (very low) to 254 (fully charged) */
  if (batteryLevelmV > VDD_BAT)
 80019da:	88bb      	ldrh	r3, [r7, #4]
 80019dc:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 80019e0:	4293      	cmp	r3, r2
 80019e2:	d902      	bls.n	80019ea <GetBatteryLevel+0x22>
  {
    batteryLevel = LORAWAN_MAX_BAT;
 80019e4:	23fe      	movs	r3, #254	@ 0xfe
 80019e6:	71fb      	strb	r3, [r7, #7]
 80019e8:	e014      	b.n	8001a14 <GetBatteryLevel+0x4c>
  }
  else if (batteryLevelmV < VDD_MIN)
 80019ea:	88bb      	ldrh	r3, [r7, #4]
 80019ec:	f5b3 6fe1 	cmp.w	r3, #1800	@ 0x708
 80019f0:	d202      	bcs.n	80019f8 <GetBatteryLevel+0x30>
  {
    batteryLevel = 0;
 80019f2:	2300      	movs	r3, #0
 80019f4:	71fb      	strb	r3, [r7, #7]
 80019f6:	e00d      	b.n	8001a14 <GetBatteryLevel+0x4c>
  }
  else
  {
    batteryLevel = (((uint32_t)(batteryLevelmV - VDD_MIN) * LORAWAN_MAX_BAT) / (VDD_BAT - VDD_MIN));
 80019f8:	88bb      	ldrh	r3, [r7, #4]
 80019fa:	f5a3 63e1 	sub.w	r3, r3, #1800	@ 0x708
 80019fe:	461a      	mov	r2, r3
 8001a00:	4613      	mov	r3, r2
 8001a02:	01db      	lsls	r3, r3, #7
 8001a04:	1a9b      	subs	r3, r3, r2
 8001a06:	005b      	lsls	r3, r3, #1
 8001a08:	461a      	mov	r2, r3
 8001a0a:	4b05      	ldr	r3, [pc, #20]	@ (8001a20 <GetBatteryLevel+0x58>)
 8001a0c:	fba3 2302 	umull	r2, r3, r3, r2
 8001a10:	09db      	lsrs	r3, r3, #7
 8001a12:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN GetBatteryLevel_2 */

  /* USER CODE END GetBatteryLevel_2 */

  return batteryLevel;  /* 1 (very low) to 254 (fully charged) */
 8001a14:	79fb      	ldrb	r3, [r7, #7]
}
 8001a16:	4618      	mov	r0, r3
 8001a18:	3708      	adds	r7, #8
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}
 8001a1e:	bf00      	nop
 8001a20:	1b4e81b5 	.word	0x1b4e81b5

08001a24 <GetTemperatureLevel>:

int16_t GetTemperatureLevel(void)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b088      	sub	sp, #32
 8001a28:	af00      	add	r7, sp, #0
  int16_t temperatureLevel = 0;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	83fb      	strh	r3, [r7, #30]

  sensor_t sensor_data;

  EnvSensors_Read(&sensor_data);
 8001a2e:	1d3b      	adds	r3, r7, #4
 8001a30:	4618      	mov	r0, r3
 8001a32:	f000 f931 	bl	8001c98 <EnvSensors_Read>
  temperatureLevel = (int16_t)(sensor_data.temperature);
 8001a36:	68bb      	ldr	r3, [r7, #8]
 8001a38:	4618      	mov	r0, r3
 8001a3a:	f7fe ff1f 	bl	800087c <__aeabi_f2iz>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	83fb      	strh	r3, [r7, #30]
  /* USER CODE BEGIN GetTemperatureLevel */

  /* USER CODE END GetTemperatureLevel */
  return temperatureLevel;
 8001a42:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
}
 8001a46:	4618      	mov	r0, r3
 8001a48:	3720      	adds	r7, #32
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}

08001a4e <GetUniqueId>:

void GetUniqueId(uint8_t *id)
{
 8001a4e:	b590      	push	{r4, r7, lr}
 8001a50:	b087      	sub	sp, #28
 8001a52:	af00      	add	r7, sp, #0
 8001a54:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GetUniqueId_1 */

  /* USER CODE END GetUniqueId_1 */
  uint32_t val = 0;
 8001a56:	2300      	movs	r3, #0
 8001a58:	617b      	str	r3, [r7, #20]
  val = LL_FLASH_GetUDN();
 8001a5a:	f7ff ff63 	bl	8001924 <LL_FLASH_GetUDN>
 8001a5e:	6178      	str	r0, [r7, #20]
  if (val == 0xFFFFFFFF)  /* Normally this should not happen */
 8001a60:	697b      	ldr	r3, [r7, #20]
 8001a62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a66:	d138      	bne.n	8001ada <GetUniqueId+0x8c>
  {
    uint32_t ID_1_3_val = HAL_GetUIDw0() + HAL_GetUIDw2();
 8001a68:	f001 f846 	bl	8002af8 <HAL_GetUIDw0>
 8001a6c:	4604      	mov	r4, r0
 8001a6e:	f001 f857 	bl	8002b20 <HAL_GetUIDw2>
 8001a72:	4603      	mov	r3, r0
 8001a74:	4423      	add	r3, r4
 8001a76:	613b      	str	r3, [r7, #16]
    uint32_t ID_2_val = HAL_GetUIDw1();
 8001a78:	f001 f848 	bl	8002b0c <HAL_GetUIDw1>
 8001a7c:	60f8      	str	r0, [r7, #12]

    id[7] = (ID_1_3_val) >> 24;
 8001a7e:	693b      	ldr	r3, [r7, #16]
 8001a80:	0e1a      	lsrs	r2, r3, #24
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	3307      	adds	r3, #7
 8001a86:	b2d2      	uxtb	r2, r2
 8001a88:	701a      	strb	r2, [r3, #0]
    id[6] = (ID_1_3_val) >> 16;
 8001a8a:	693b      	ldr	r3, [r7, #16]
 8001a8c:	0c1a      	lsrs	r2, r3, #16
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	3306      	adds	r3, #6
 8001a92:	b2d2      	uxtb	r2, r2
 8001a94:	701a      	strb	r2, [r3, #0]
    id[5] = (ID_1_3_val) >> 8;
 8001a96:	693b      	ldr	r3, [r7, #16]
 8001a98:	0a1a      	lsrs	r2, r3, #8
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	3305      	adds	r3, #5
 8001a9e:	b2d2      	uxtb	r2, r2
 8001aa0:	701a      	strb	r2, [r3, #0]
    id[4] = (ID_1_3_val);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	3304      	adds	r3, #4
 8001aa6:	693a      	ldr	r2, [r7, #16]
 8001aa8:	b2d2      	uxtb	r2, r2
 8001aaa:	701a      	strb	r2, [r3, #0]
    id[3] = (ID_2_val) >> 24;
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	0e1a      	lsrs	r2, r3, #24
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	3303      	adds	r3, #3
 8001ab4:	b2d2      	uxtb	r2, r2
 8001ab6:	701a      	strb	r2, [r3, #0]
    id[2] = (ID_2_val) >> 16;
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	0c1a      	lsrs	r2, r3, #16
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	3302      	adds	r3, #2
 8001ac0:	b2d2      	uxtb	r2, r2
 8001ac2:	701a      	strb	r2, [r3, #0]
    id[1] = (ID_2_val) >> 8;
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	0a1a      	lsrs	r2, r3, #8
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	3301      	adds	r3, #1
 8001acc:	b2d2      	uxtb	r2, r2
 8001ace:	701a      	strb	r2, [r3, #0]
    id[0] = (ID_2_val);
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	b2da      	uxtb	r2, r3
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	701a      	strb	r2, [r3, #0]
  }

  /* USER CODE BEGIN GetUniqueId_2 */

  /* USER CODE END GetUniqueId_2 */
}
 8001ad8:	e031      	b.n	8001b3e <GetUniqueId+0xf0>
    id[7] = val & 0xFF;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	3307      	adds	r3, #7
 8001ade:	697a      	ldr	r2, [r7, #20]
 8001ae0:	b2d2      	uxtb	r2, r2
 8001ae2:	701a      	strb	r2, [r3, #0]
    id[6] = (val >> 8) & 0xFF;
 8001ae4:	697b      	ldr	r3, [r7, #20]
 8001ae6:	0a1a      	lsrs	r2, r3, #8
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	3306      	adds	r3, #6
 8001aec:	b2d2      	uxtb	r2, r2
 8001aee:	701a      	strb	r2, [r3, #0]
    id[5] = (val >> 16) & 0xFF;
 8001af0:	697b      	ldr	r3, [r7, #20]
 8001af2:	0c1a      	lsrs	r2, r3, #16
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	3305      	adds	r3, #5
 8001af8:	b2d2      	uxtb	r2, r2
 8001afa:	701a      	strb	r2, [r3, #0]
    id[4] = (val >> 24) & 0xFF;
 8001afc:	697b      	ldr	r3, [r7, #20]
 8001afe:	0e1a      	lsrs	r2, r3, #24
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	3304      	adds	r3, #4
 8001b04:	b2d2      	uxtb	r2, r2
 8001b06:	701a      	strb	r2, [r3, #0]
    val = LL_FLASH_GetDeviceID();
 8001b08:	f7ff ff16 	bl	8001938 <LL_FLASH_GetDeviceID>
 8001b0c:	6178      	str	r0, [r7, #20]
    id[3] = val & 0xFF;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	3303      	adds	r3, #3
 8001b12:	697a      	ldr	r2, [r7, #20]
 8001b14:	b2d2      	uxtb	r2, r2
 8001b16:	701a      	strb	r2, [r3, #0]
    val = LL_FLASH_GetSTCompanyID();
 8001b18:	f7ff ff1a 	bl	8001950 <LL_FLASH_GetSTCompanyID>
 8001b1c:	6178      	str	r0, [r7, #20]
    id[2] = val & 0xFF;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	3302      	adds	r3, #2
 8001b22:	697a      	ldr	r2, [r7, #20]
 8001b24:	b2d2      	uxtb	r2, r2
 8001b26:	701a      	strb	r2, [r3, #0]
    id[1] = (val >> 8) & 0xFF;
 8001b28:	697b      	ldr	r3, [r7, #20]
 8001b2a:	0a1a      	lsrs	r2, r3, #8
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	3301      	adds	r3, #1
 8001b30:	b2d2      	uxtb	r2, r2
 8001b32:	701a      	strb	r2, [r3, #0]
    id[0] = (val >> 16) & 0xFF;
 8001b34:	697b      	ldr	r3, [r7, #20]
 8001b36:	0c1b      	lsrs	r3, r3, #16
 8001b38:	b2da      	uxtb	r2, r3
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	701a      	strb	r2, [r3, #0]
}
 8001b3e:	bf00      	nop
 8001b40:	371c      	adds	r7, #28
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd90      	pop	{r4, r7, pc}

08001b46 <GetDevAddr>:

void GetDevAddr(uint32_t *devAddr)
{
 8001b46:	b590      	push	{r4, r7, lr}
 8001b48:	b083      	sub	sp, #12
 8001b4a:	af00      	add	r7, sp, #0
 8001b4c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GetDevAddr_1 */

  /* USER CODE END GetDevAddr_1 */

  *devAddr = LL_FLASH_GetUDN();
 8001b4e:	f7ff fee9 	bl	8001924 <LL_FLASH_GetUDN>
 8001b52:	4602      	mov	r2, r0
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	601a      	str	r2, [r3, #0]
  if (*devAddr == 0xFFFFFFFF)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b60:	d10d      	bne.n	8001b7e <GetDevAddr+0x38>
  {
    *devAddr = ((HAL_GetUIDw0()) ^ (HAL_GetUIDw1()) ^ (HAL_GetUIDw2()));
 8001b62:	f000 ffc9 	bl	8002af8 <HAL_GetUIDw0>
 8001b66:	4604      	mov	r4, r0
 8001b68:	f000 ffd0 	bl	8002b0c <HAL_GetUIDw1>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	405c      	eors	r4, r3
 8001b70:	f000 ffd6 	bl	8002b20 <HAL_GetUIDw2>
 8001b74:	4603      	mov	r3, r0
 8001b76:	ea84 0203 	eor.w	r2, r4, r3
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	601a      	str	r2, [r3, #0]
  }

  /* USER CODE BEGIN GetDevAddr_2 */

  /* USER CODE END GetDevAddr_2 */
}
 8001b7e:	bf00      	nop
 8001b80:	370c      	adds	r7, #12
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd90      	pop	{r4, r7, pc}
	...

08001b88 <TimestampNow>:
/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/

static void TimestampNow(uint8_t *buff, uint16_t *size)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b086      	sub	sp, #24
 8001b8c:	af02      	add	r7, sp, #8
 8001b8e:	6078      	str	r0, [r7, #4]
 8001b90:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN TimestampNow_1 */

  /* USER CODE END TimestampNow_1 */
  SysTime_t curtime = SysTimeGet();
 8001b92:	f107 0308 	add.w	r3, r7, #8
 8001b96:	4618      	mov	r0, r3
 8001b98:	f018 f99c 	bl	8019ed4 <SysTimeGet>
  tiny_snprintf_like((char *)buff, MAX_TS_SIZE, "%ds%03d:", curtime.Seconds, curtime.SubSeconds);
 8001b9c:	68bb      	ldr	r3, [r7, #8]
 8001b9e:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001ba2:	9200      	str	r2, [sp, #0]
 8001ba4:	4a07      	ldr	r2, [pc, #28]	@ (8001bc4 <TimestampNow+0x3c>)
 8001ba6:	2110      	movs	r1, #16
 8001ba8:	6878      	ldr	r0, [r7, #4]
 8001baa:	f000 f81d 	bl	8001be8 <tiny_snprintf_like>
  *size = strlen((char *)buff);
 8001bae:	6878      	ldr	r0, [r7, #4]
 8001bb0:	f7fe fae2 	bl	8000178 <strlen>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	b29a      	uxth	r2, r3
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN TimestampNow_2 */

  /* USER CODE END TimestampNow_2 */
}
 8001bbc:	bf00      	nop
 8001bbe:	3710      	adds	r7, #16
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bd80      	pop	{r7, pc}
 8001bc4:	0801b318 	.word	0x0801b318

08001bc8 <UTIL_ADV_TRACE_PreSendHook>:

/* Disable StopMode when traces need to be printed */
void UTIL_ADV_TRACE_PreSendHook(void)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_1 */

  /* USER CODE END UTIL_ADV_TRACE_PreSendHook_1 */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_DISABLE);
 8001bcc:	2101      	movs	r1, #1
 8001bce:	2002      	movs	r0, #2
 8001bd0:	f018 f810 	bl	8019bf4 <UTIL_LPM_SetStopMode>
  /* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_2 */

  /* USER CODE END UTIL_ADV_TRACE_PreSendHook_2 */
}
 8001bd4:	bf00      	nop
 8001bd6:	bd80      	pop	{r7, pc}

08001bd8 <UTIL_ADV_TRACE_PostSendHook>:
/* Re-enable StopMode when traces have been printed */
void UTIL_ADV_TRACE_PostSendHook(void)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_1 */

  /* USER CODE END UTIL_LPM_SetStopMode_1 */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_ENABLE);
 8001bdc:	2100      	movs	r1, #0
 8001bde:	2002      	movs	r0, #2
 8001be0:	f018 f808 	bl	8019bf4 <UTIL_LPM_SetStopMode>
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_2 */

  /* USER CODE END UTIL_LPM_SetStopMode_2 */
}
 8001be4:	bf00      	nop
 8001be6:	bd80      	pop	{r7, pc}

08001be8 <tiny_snprintf_like>:

static void tiny_snprintf_like(char *buf, uint32_t maxsize, const char *strFormat, ...)
{
 8001be8:	b40c      	push	{r2, r3}
 8001bea:	b580      	push	{r7, lr}
 8001bec:	b084      	sub	sp, #16
 8001bee:	af00      	add	r7, sp, #0
 8001bf0:	6078      	str	r0, [r7, #4]
 8001bf2:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN tiny_snprintf_like_1 */

  /* USER CODE END tiny_snprintf_like_1 */
  va_list vaArgs;
  va_start(vaArgs, strFormat);
 8001bf4:	f107 031c 	add.w	r3, r7, #28
 8001bf8:	60fb      	str	r3, [r7, #12]
  UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 8001bfa:	6839      	ldr	r1, [r7, #0]
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	69ba      	ldr	r2, [r7, #24]
 8001c00:	6878      	ldr	r0, [r7, #4]
 8001c02:	f018 fb39 	bl	801a278 <tiny_vsnprintf_like>
  va_end(vaArgs);
  /* USER CODE BEGIN tiny_snprintf_like_2 */

  /* USER CODE END tiny_snprintf_like_2 */
}
 8001c06:	bf00      	nop
 8001c08:	3710      	adds	r7, #16
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001c10:	b002      	add	sp, #8
 8001c12:	4770      	bx	lr

08001c14 <HAL_GetTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
uint32_t HAL_GetTick(void)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b082      	sub	sp, #8
 8001c18:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	607b      	str	r3, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_GetTick_1 */

  /* USER CODE END HAL_GetTick_1 */
  if (SYS_TimerInitialisedFlag == 0)
 8001c1e:	4b06      	ldr	r3, [pc, #24]	@ (8001c38 <HAL_GetTick+0x24>)
 8001c20:	781b      	ldrb	r3, [r3, #0]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d002      	beq.n	8001c2c <HAL_GetTick+0x18>

    /* USER CODE END HAL_GetTick_EarlyCall */
  }
  else
  {
    ret = TIMER_IF_GetTimerValue();
 8001c26:	f000 f935 	bl	8001e94 <TIMER_IF_GetTimerValue>
 8001c2a:	6078      	str	r0, [r7, #4]
  }
  /* USER CODE BEGIN HAL_GetTick_2 */

  /* USER CODE END HAL_GetTick_2 */
  return ret;
 8001c2c:	687b      	ldr	r3, [r7, #4]
}
 8001c2e:	4618      	mov	r0, r3
 8001c30:	3708      	adds	r7, #8
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	bf00      	nop
 8001c38:	20000200 	.word	0x20000200

08001c3c <HAL_Delay>:

/**
  * @note This function overwrites the __weak one from HAL
  */
void HAL_Delay(__IO uint32_t Delay)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b082      	sub	sp, #8
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_Delay_1 */

  /* USER CODE END HAL_Delay_1 */
  TIMER_IF_DelayMs(Delay);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	4618      	mov	r0, r3
 8001c48:	f000 f9ab 	bl	8001fa2 <TIMER_IF_DelayMs>
  /* USER CODE BEGIN HAL_Delay_2 */

  /* USER CODE END HAL_Delay_2 */
}
 8001c4c:	bf00      	nop
 8001c4e:	3708      	adds	r7, #8
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bd80      	pop	{r7, pc}

08001c54 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8001c54:	b480      	push	{r7}
 8001c56:	b083      	sub	sp, #12
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8001c5c:	4b06      	ldr	r3, [pc, #24]	@ (8001c78 <LL_EXTI_EnableIT_32_63+0x24>)
 8001c5e:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8001c62:	4905      	ldr	r1, [pc, #20]	@ (8001c78 <LL_EXTI_EnableIT_32_63+0x24>)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	4313      	orrs	r3, r2
 8001c68:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8001c6c:	bf00      	nop
 8001c6e:	370c      	adds	r7, #12
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bc80      	pop	{r7}
 8001c74:	4770      	bx	lr
 8001c76:	bf00      	nop
 8001c78:	58000800 	.word	0x58000800

08001c7c <DBG_Init>:

/**
  * @brief Initializes the SW probes pins and the monitor RF pins via Alternate Function
  */
void DBG_Init(void)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	af00      	add	r7, sp, #0
  HAL_DBGMCU_DisableDBGSleepMode();
  HAL_DBGMCU_DisableDBGStopMode();
  HAL_DBGMCU_DisableDBGStandbyMode();
#elif defined (DEBUGGER_ENABLED) && ( DEBUGGER_ENABLED == 1 )
  /*Debug power up request wakeup CBDGPWRUPREQ*/
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_46);
 8001c80:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8001c84:	f7ff ffe6 	bl	8001c54 <LL_EXTI_EnableIT_32_63>
  /* Disabled HAL_DBGMCU_  */
  HAL_DBGMCU_EnableDBGSleepMode();
 8001c88:	f000 ff54 	bl	8002b34 <HAL_DBGMCU_EnableDBGSleepMode>
  HAL_DBGMCU_EnableDBGStopMode();
 8001c8c:	f000 ff58 	bl	8002b40 <HAL_DBGMCU_EnableDBGStopMode>
  HAL_DBGMCU_EnableDBGStandbyMode();
 8001c90:	f000 ff5c 	bl	8002b4c <HAL_DBGMCU_EnableDBGStandbyMode>
#endif /* DEBUG_RF_BUSY_ENABLED */

  /* USER CODE BEGIN DBG_Init_3 */

  /* USER CODE END DBG_Init_3 */
}
 8001c94:	bf00      	nop
 8001c96:	bd80      	pop	{r7, pc}

08001c98 <EnvSensors_Read>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t EnvSensors_Read(sensor_t *sensor_data)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b086      	sub	sp, #24
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN EnvSensors_Read */
  float HUMIDITY_Value = HUMIDITY_DEFAULT_VAL;
 8001ca0:	4b11      	ldr	r3, [pc, #68]	@ (8001ce8 <EnvSensors_Read+0x50>)
 8001ca2:	617b      	str	r3, [r7, #20]
  float TEMPERATURE_Value = TEMPERATURE_DEFAULT_VAL;
 8001ca4:	4b11      	ldr	r3, [pc, #68]	@ (8001cec <EnvSensors_Read+0x54>)
 8001ca6:	613b      	str	r3, [r7, #16]
  float PRESSURE_Value = PRESSURE_DEFAULT_VAL;
 8001ca8:	4b11      	ldr	r3, [pc, #68]	@ (8001cf0 <EnvSensors_Read+0x58>)
 8001caa:	60fb      	str	r3, [r7, #12]
#if (USE_IKS01A3_ENV_SENSOR_LPS22HH_0 == 1)
  IKS01A3_ENV_SENSOR_GetValue(IKS01A3_LPS22HH_0, ENV_PRESSURE, &PRESSURE_Value);
  IKS01A3_ENV_SENSOR_GetValue(IKS01A3_LPS22HH_0, ENV_TEMPERATURE, &TEMPERATURE_Value);
#endif /* USE_IKS01A3_ENV_SENSOR_LPS22HH_0 */
#else
  TEMPERATURE_Value = (SYS_GetTemperatureLevel() >> 8);
 8001cac:	f7ff f83c 	bl	8000d28 <SYS_GetTemperatureLevel>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	121b      	asrs	r3, r3, #8
 8001cb4:	b21b      	sxth	r3, r3
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	f7fe fd8c 	bl	80007d4 <__aeabi_i2f>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	613b      	str	r3, [r7, #16]
#endif  /* SENSOR_ENABLED */

  sensor_data->humidity    = HUMIDITY_Value;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	697a      	ldr	r2, [r7, #20]
 8001cc4:	609a      	str	r2, [r3, #8]
  sensor_data->temperature = TEMPERATURE_Value;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	693a      	ldr	r2, [r7, #16]
 8001cca:	605a      	str	r2, [r3, #4]
  sensor_data->pressure    = PRESSURE_Value;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	68fa      	ldr	r2, [r7, #12]
 8001cd0:	601a      	str	r2, [r3, #0]

  sensor_data->latitude  = (int32_t)((STSOP_LATTITUDE  * MAX_GPS_POS) / 90);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	4a07      	ldr	r2, [pc, #28]	@ (8001cf4 <EnvSensors_Read+0x5c>)
 8001cd6:	60da      	str	r2, [r3, #12]
  sensor_data->longitude = (int32_t)((STSOP_LONGITUDE  * MAX_GPS_POS) / 180);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	4a07      	ldr	r2, [pc, #28]	@ (8001cf8 <EnvSensors_Read+0x60>)
 8001cdc:	611a      	str	r2, [r3, #16]

  return 0;
 8001cde:	2300      	movs	r3, #0
  /* USER CODE END EnvSensors_Read */
}
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	3718      	adds	r7, #24
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bd80      	pop	{r7, pc}
 8001ce8:	42480000 	.word	0x42480000
 8001cec:	41900000 	.word	0x41900000
 8001cf0:	447a0000 	.word	0x447a0000
 8001cf4:	003e090d 	.word	0x003e090d
 8001cf8:	000503ab 	.word	0x000503ab

08001cfc <EnvSensors_Init>:

int32_t EnvSensors_Init(void)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b083      	sub	sp, #12
 8001d00:	af00      	add	r7, sp, #0
  int32_t ret = 0;
 8001d02:	2300      	movs	r3, #0
 8001d04:	607b      	str	r3, [r7, #4]

#elif !defined (SENSOR_ENABLED)
#error SENSOR_ENABLED not defined
#endif /* SENSOR_ENABLED  */
  /* USER CODE END EnvSensors_Init */
  return ret;
 8001d06:	687b      	ldr	r3, [r7, #4]
}
 8001d08:	4618      	mov	r0, r3
 8001d0a:	370c      	adds	r7, #12
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bc80      	pop	{r7}
 8001d10:	4770      	bx	lr

08001d12 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d12:	b480      	push	{r7}
 8001d14:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8001d16:	bf00      	nop
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bc80      	pop	{r7}
 8001d1c:	4770      	bx	lr

08001d1e <LL_RTC_TIME_GetSubSecond>:
  * @param  RTCx RTC Instance
  * @retval If binary mode is none, Value between Min_Data=0x0 and Max_Data=0x7FFF
  *         else Value between Min_Data=0x0 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_RTC_TIME_GetSubSecond(RTC_TypeDef *RTCx)
{
 8001d1e:	b480      	push	{r7}
 8001d20:	b083      	sub	sp, #12
 8001d22:	af00      	add	r7, sp, #0
 8001d24:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RTCx->SSR, RTC_SSR_SS));
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	689b      	ldr	r3, [r3, #8]
}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	370c      	adds	r7, #12
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bc80      	pop	{r7}
 8001d32:	4770      	bx	lr

08001d34 <TIMER_IF_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
UTIL_TIMER_Status_t TIMER_IF_Init(void)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b082      	sub	sp, #8
 8001d38:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_Init */

  /* USER CODE END TIMER_IF_Init */
  if (RTC_Initialized == false)
 8001d3e:	4b14      	ldr	r3, [pc, #80]	@ (8001d90 <TIMER_IF_Init+0x5c>)
 8001d40:	781b      	ldrb	r3, [r3, #0]
 8001d42:	f083 0301 	eor.w	r3, r3, #1
 8001d46:	b2db      	uxtb	r3, r3
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d01b      	beq.n	8001d84 <TIMER_IF_Init+0x50>
  {
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8001d4c:	4b11      	ldr	r3, [pc, #68]	@ (8001d94 <TIMER_IF_Init+0x60>)
 8001d4e:	f04f 32ff 	mov.w	r2, #4294967295
 8001d52:	631a      	str	r2, [r3, #48]	@ 0x30
    /*Init RTC*/
    MX_RTC_Init();
 8001d54:	f7ff fc5c 	bl	8001610 <MX_RTC_Init>
    /*Stop Timer */
    TIMER_IF_StopTimer();
 8001d58:	f000 f856 	bl	8001e08 <TIMER_IF_StopTimer>
    /** DeActivate the Alarm A enabled by STM32CubeMX during MX_RTC_Init() */
    HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8001d5c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001d60:	480c      	ldr	r0, [pc, #48]	@ (8001d94 <TIMER_IF_Init+0x60>)
 8001d62:	f005 f86f 	bl	8006e44 <HAL_RTC_DeactivateAlarm>
    /*overload RTC feature enable*/
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8001d66:	4b0b      	ldr	r3, [pc, #44]	@ (8001d94 <TIMER_IF_Init+0x60>)
 8001d68:	f04f 32ff 	mov.w	r2, #4294967295
 8001d6c:	631a      	str	r2, [r3, #48]	@ 0x30

    /*Enable Direct Read of the calendar registers (not through Shadow) */
    HAL_RTCEx_EnableBypassShadow(&hrtc);
 8001d6e:	4809      	ldr	r0, [pc, #36]	@ (8001d94 <TIMER_IF_Init+0x60>)
 8001d70:	f005 f97c 	bl	800706c <HAL_RTCEx_EnableBypassShadow>
    /*Initialize MSB ticks*/
    TIMER_IF_BkUp_Write_MSBticks(0);
 8001d74:	2000      	movs	r0, #0
 8001d76:	f000 f9c9 	bl	800210c <TIMER_IF_BkUp_Write_MSBticks>

    TIMER_IF_SetTimerContext();
 8001d7a:	f000 f85f 	bl	8001e3c <TIMER_IF_SetTimerContext>

    /* Register a task to associate to UTIL_TIMER_Irq() interrupt */
    UTIL_TIMER_IRQ_MAP_INIT();

    RTC_Initialized = true;
 8001d7e:	4b04      	ldr	r3, [pc, #16]	@ (8001d90 <TIMER_IF_Init+0x5c>)
 8001d80:	2201      	movs	r2, #1
 8001d82:	701a      	strb	r2, [r3, #0]
  }

  /* USER CODE BEGIN TIMER_IF_Init_Last */

  /* USER CODE END TIMER_IF_Init_Last */
  return ret;
 8001d84:	79fb      	ldrb	r3, [r7, #7]
}
 8001d86:	4618      	mov	r0, r3
 8001d88:	3708      	adds	r7, #8
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}
 8001d8e:	bf00      	nop
 8001d90:	20000201 	.word	0x20000201
 8001d94:	200001bc 	.word	0x200001bc

08001d98 <TIMER_IF_StartTimer>:

UTIL_TIMER_Status_t TIMER_IF_StartTimer(uint32_t timeout)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b08e      	sub	sp, #56	@ 0x38
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8001da0:	2300      	movs	r3, #0
 8001da2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  /* USER CODE BEGIN TIMER_IF_StartTimer */

  /* USER CODE END TIMER_IF_StartTimer */
  RTC_AlarmTypeDef sAlarm = {0};
 8001da6:	f107 0308 	add.w	r3, r7, #8
 8001daa:	222c      	movs	r2, #44	@ 0x2c
 8001dac:	2100      	movs	r1, #0
 8001dae:	4618      	mov	r0, r3
 8001db0:	f019 f9f8 	bl	801b1a4 <memset>
  /*Stop timer if one is already started*/
  TIMER_IF_StopTimer();
 8001db4:	f000 f828 	bl	8001e08 <TIMER_IF_StopTimer>
  timeout += RtcTimerContext;
 8001db8:	4b11      	ldr	r3, [pc, #68]	@ (8001e00 <TIMER_IF_StartTimer+0x68>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	687a      	ldr	r2, [r7, #4]
 8001dbe:	4413      	add	r3, r2
 8001dc0:	607b      	str	r3, [r7, #4]

  TIMER_IF_DBG_PRINTF("Start timer: time=%d, alarm=%d\n\r",  GetTimerTicks(), timeout);
  /* starts timer*/
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	627b      	str	r3, [r7, #36]	@ 0x24
  sAlarm.AlarmTime.SubSeconds = UINT32_MAX - timeout;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	43db      	mvns	r3, r3
 8001dca:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 8001dd0:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001dd4:	623b      	str	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8001dd6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001dda:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001ddc:	f107 0308 	add.w	r3, r7, #8
 8001de0:	2201      	movs	r2, #1
 8001de2:	4619      	mov	r1, r3
 8001de4:	4807      	ldr	r0, [pc, #28]	@ (8001e04 <TIMER_IF_StartTimer+0x6c>)
 8001de6:	f004 ff21 	bl	8006c2c <HAL_RTC_SetAlarm_IT>
 8001dea:	4603      	mov	r3, r0
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d001      	beq.n	8001df4 <TIMER_IF_StartTimer+0x5c>
  {
    Error_Handler();
 8001df0:	f7ff fbe0 	bl	80015b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIMER_IF_StartTimer_Last */

  /* USER CODE END TIMER_IF_StartTimer_Last */
  return ret;
 8001df4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}
 8001df8:	4618      	mov	r0, r3
 8001dfa:	3738      	adds	r7, #56	@ 0x38
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bd80      	pop	{r7, pc}
 8001e00:	20000204 	.word	0x20000204
 8001e04:	200001bc 	.word	0x200001bc

08001e08 <TIMER_IF_StopTimer>:

UTIL_TIMER_Status_t TIMER_IF_StopTimer(void)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b082      	sub	sp, #8
 8001e0c:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_StopTimer */

  /* USER CODE END TIMER_IF_StopTimer */
  /* Clear RTC Alarm Flag */
  __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 8001e12:	4b08      	ldr	r3, [pc, #32]	@ (8001e34 <TIMER_IF_StopTimer+0x2c>)
 8001e14:	2201      	movs	r2, #1
 8001e16:	65da      	str	r2, [r3, #92]	@ 0x5c
  /* Disable the Alarm A interrupt */
  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8001e18:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001e1c:	4806      	ldr	r0, [pc, #24]	@ (8001e38 <TIMER_IF_StopTimer+0x30>)
 8001e1e:	f005 f811 	bl	8006e44 <HAL_RTC_DeactivateAlarm>
  /*overload RTC feature enable*/
  hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8001e22:	4b05      	ldr	r3, [pc, #20]	@ (8001e38 <TIMER_IF_StopTimer+0x30>)
 8001e24:	f04f 32ff 	mov.w	r2, #4294967295
 8001e28:	631a      	str	r2, [r3, #48]	@ 0x30
  /* USER CODE BEGIN TIMER_IF_StopTimer_Last */

  /* USER CODE END TIMER_IF_StopTimer_Last */
  return ret;
 8001e2a:	79fb      	ldrb	r3, [r7, #7]
}
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	3708      	adds	r7, #8
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bd80      	pop	{r7, pc}
 8001e34:	40002800 	.word	0x40002800
 8001e38:	200001bc 	.word	0x200001bc

08001e3c <TIMER_IF_SetTimerContext>:

uint32_t TIMER_IF_SetTimerContext(void)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	af00      	add	r7, sp, #0
  /*store time context*/
  RtcTimerContext = GetTimerTicks();
 8001e40:	f000 f984 	bl	800214c <GetTimerTicks>
 8001e44:	4603      	mov	r3, r0
 8001e46:	4a03      	ldr	r2, [pc, #12]	@ (8001e54 <TIMER_IF_SetTimerContext+0x18>)
 8001e48:	6013      	str	r3, [r2, #0]

  /* USER CODE END TIMER_IF_SetTimerContext */

  TIMER_IF_DBG_PRINTF("TIMER_IF_SetTimerContext=%d\n\r", RtcTimerContext);
  /*return time context*/
  return RtcTimerContext;
 8001e4a:	4b02      	ldr	r3, [pc, #8]	@ (8001e54 <TIMER_IF_SetTimerContext+0x18>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
}
 8001e4e:	4618      	mov	r0, r3
 8001e50:	bd80      	pop	{r7, pc}
 8001e52:	bf00      	nop
 8001e54:	20000204 	.word	0x20000204

08001e58 <TIMER_IF_GetTimerContext>:

uint32_t TIMER_IF_GetTimerContext(void)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	af00      	add	r7, sp, #0

  /* USER CODE END TIMER_IF_GetTimerContext */

  TIMER_IF_DBG_PRINTF("TIMER_IF_GetTimerContext=%d\n\r", RtcTimerContext);
  /*return time context*/
  return RtcTimerContext;
 8001e5c:	4b02      	ldr	r3, [pc, #8]	@ (8001e68 <TIMER_IF_GetTimerContext+0x10>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
}
 8001e60:	4618      	mov	r0, r3
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bc80      	pop	{r7}
 8001e66:	4770      	bx	lr
 8001e68:	20000204 	.word	0x20000204

08001e6c <TIMER_IF_GetTimerElapsedTime>:

uint32_t TIMER_IF_GetTimerElapsedTime(void)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b082      	sub	sp, #8
 8001e70:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8001e72:	2300      	movs	r3, #0
 8001e74:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime */
  ret = ((uint32_t)(GetTimerTicks() - RtcTimerContext));
 8001e76:	f000 f969 	bl	800214c <GetTimerTicks>
 8001e7a:	4602      	mov	r2, r0
 8001e7c:	4b04      	ldr	r3, [pc, #16]	@ (8001e90 <TIMER_IF_GetTimerElapsedTime+0x24>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	1ad3      	subs	r3, r2, r3
 8001e82:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime_Last */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime_Last */
  return ret;
 8001e84:	687b      	ldr	r3, [r7, #4]
}
 8001e86:	4618      	mov	r0, r3
 8001e88:	3708      	adds	r7, #8
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	bf00      	nop
 8001e90:	20000204 	.word	0x20000204

08001e94 <TIMER_IF_GetTimerValue>:

uint32_t TIMER_IF_GetTimerValue(void)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b082      	sub	sp, #8
 8001e98:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerValue */

  /* USER CODE END TIMER_IF_GetTimerValue */
  if (RTC_Initialized == true)
 8001e9e:	4b06      	ldr	r3, [pc, #24]	@ (8001eb8 <TIMER_IF_GetTimerValue+0x24>)
 8001ea0:	781b      	ldrb	r3, [r3, #0]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d002      	beq.n	8001eac <TIMER_IF_GetTimerValue+0x18>
  {
    ret = GetTimerTicks();
 8001ea6:	f000 f951 	bl	800214c <GetTimerTicks>
 8001eaa:	6078      	str	r0, [r7, #4]
  }
  /* USER CODE BEGIN TIMER_IF_GetTimerValue_Last */

  /* USER CODE END TIMER_IF_GetTimerValue_Last */
  return ret;
 8001eac:	687b      	ldr	r3, [r7, #4]
}
 8001eae:	4618      	mov	r0, r3
 8001eb0:	3708      	adds	r7, #8
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}
 8001eb6:	bf00      	nop
 8001eb8:	20000201 	.word	0x20000201

08001ebc <TIMER_IF_GetMinimumTimeout>:

uint32_t TIMER_IF_GetMinimumTimeout(void)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b083      	sub	sp, #12
 8001ec0:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout */

  /* USER CODE END TIMER_IF_GetMinimumTimeout */
  ret = (MIN_ALARM_DELAY);
 8001ec6:	2303      	movs	r3, #3
 8001ec8:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout_Last */

  /* USER CODE END TIMER_IF_GetMinimumTimeout_Last */
  return ret;
 8001eca:	687b      	ldr	r3, [r7, #4]
}
 8001ecc:	4618      	mov	r0, r3
 8001ece:	370c      	adds	r7, #12
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bc80      	pop	{r7}
 8001ed4:	4770      	bx	lr

08001ed6 <TIMER_IF_Convert_ms2Tick>:

uint32_t TIMER_IF_Convert_ms2Tick(uint32_t timeMilliSec)
{
 8001ed6:	b5b0      	push	{r4, r5, r7, lr}
 8001ed8:	b084      	sub	sp, #16
 8001eda:	af00      	add	r7, sp, #0
 8001edc:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 8001ede:	2100      	movs	r1, #0
 8001ee0:	60f9      	str	r1, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick */

  /* USER CODE END TIMER_IF_Convert_ms2Tick */
  ret = ((uint32_t)((((uint64_t) timeMilliSec) << RTC_N_PREDIV_S) / 1000));
 8001ee2:	6879      	ldr	r1, [r7, #4]
 8001ee4:	2000      	movs	r0, #0
 8001ee6:	460a      	mov	r2, r1
 8001ee8:	4603      	mov	r3, r0
 8001eea:	0d95      	lsrs	r5, r2, #22
 8001eec:	0294      	lsls	r4, r2, #10
 8001eee:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001ef2:	f04f 0300 	mov.w	r3, #0
 8001ef6:	4620      	mov	r0, r4
 8001ef8:	4629      	mov	r1, r5
 8001efa:	f7fe fce5 	bl	80008c8 <__aeabi_uldivmod>
 8001efe:	4602      	mov	r2, r0
 8001f00:	460b      	mov	r3, r1
 8001f02:	4613      	mov	r3, r2
 8001f04:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick_Last */

  /* USER CODE END TIMER_IF_Convert_ms2Tick_Last */
  return ret;
 8001f06:	68fb      	ldr	r3, [r7, #12]
}
 8001f08:	4618      	mov	r0, r3
 8001f0a:	3710      	adds	r7, #16
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bdb0      	pop	{r4, r5, r7, pc}

08001f10 <TIMER_IF_Convert_Tick2ms>:

uint32_t TIMER_IF_Convert_Tick2ms(uint32_t tick)
{
 8001f10:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8001f14:	b085      	sub	sp, #20
 8001f16:	af00      	add	r7, sp, #0
 8001f18:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 8001f1a:	2100      	movs	r1, #0
 8001f1c:	60f9      	str	r1, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms */

  /* USER CODE END TIMER_IF_Convert_Tick2ms */
  ret = ((uint32_t)((((uint64_t)(tick)) * 1000) >> RTC_N_PREDIV_S));
 8001f1e:	6879      	ldr	r1, [r7, #4]
 8001f20:	2000      	movs	r0, #0
 8001f22:	460c      	mov	r4, r1
 8001f24:	4605      	mov	r5, r0
 8001f26:	4620      	mov	r0, r4
 8001f28:	4629      	mov	r1, r5
 8001f2a:	f04f 0a00 	mov.w	sl, #0
 8001f2e:	f04f 0b00 	mov.w	fp, #0
 8001f32:	ea4f 1b41 	mov.w	fp, r1, lsl #5
 8001f36:	ea4b 6bd0 	orr.w	fp, fp, r0, lsr #27
 8001f3a:	ea4f 1a40 	mov.w	sl, r0, lsl #5
 8001f3e:	4650      	mov	r0, sl
 8001f40:	4659      	mov	r1, fp
 8001f42:	1b02      	subs	r2, r0, r4
 8001f44:	eb61 0305 	sbc.w	r3, r1, r5
 8001f48:	f04f 0000 	mov.w	r0, #0
 8001f4c:	f04f 0100 	mov.w	r1, #0
 8001f50:	0099      	lsls	r1, r3, #2
 8001f52:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8001f56:	0090      	lsls	r0, r2, #2
 8001f58:	4602      	mov	r2, r0
 8001f5a:	460b      	mov	r3, r1
 8001f5c:	eb12 0804 	adds.w	r8, r2, r4
 8001f60:	eb43 0905 	adc.w	r9, r3, r5
 8001f64:	f04f 0200 	mov.w	r2, #0
 8001f68:	f04f 0300 	mov.w	r3, #0
 8001f6c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001f70:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001f74:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001f78:	4690      	mov	r8, r2
 8001f7a:	4699      	mov	r9, r3
 8001f7c:	4640      	mov	r0, r8
 8001f7e:	4649      	mov	r1, r9
 8001f80:	f04f 0200 	mov.w	r2, #0
 8001f84:	f04f 0300 	mov.w	r3, #0
 8001f88:	0a82      	lsrs	r2, r0, #10
 8001f8a:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 8001f8e:	0a8b      	lsrs	r3, r1, #10
 8001f90:	4613      	mov	r3, r2
 8001f92:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms_Last */

  /* USER CODE END TIMER_IF_Convert_Tick2ms_Last */
  return ret;
 8001f94:	68fb      	ldr	r3, [r7, #12]
}
 8001f96:	4618      	mov	r0, r3
 8001f98:	3714      	adds	r7, #20
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8001fa0:	4770      	bx	lr

08001fa2 <TIMER_IF_DelayMs>:

void TIMER_IF_DelayMs(uint32_t delay)
{
 8001fa2:	b580      	push	{r7, lr}
 8001fa4:	b084      	sub	sp, #16
 8001fa6:	af00      	add	r7, sp, #0
 8001fa8:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_DelayMs */

  /* USER CODE END TIMER_IF_DelayMs */
  uint32_t delayTicks = TIMER_IF_Convert_ms2Tick(delay);
 8001faa:	6878      	ldr	r0, [r7, #4]
 8001fac:	f7ff ff93 	bl	8001ed6 <TIMER_IF_Convert_ms2Tick>
 8001fb0:	60f8      	str	r0, [r7, #12]
  uint32_t timeout = GetTimerTicks();
 8001fb2:	f000 f8cb 	bl	800214c <GetTimerTicks>
 8001fb6:	60b8      	str	r0, [r7, #8]

  /* Wait delay ms */
  while (((GetTimerTicks() - timeout)) < delayTicks)
 8001fb8:	e000      	b.n	8001fbc <TIMER_IF_DelayMs+0x1a>
  {
    __NOP();
 8001fba:	bf00      	nop
  while (((GetTimerTicks() - timeout)) < delayTicks)
 8001fbc:	f000 f8c6 	bl	800214c <GetTimerTicks>
 8001fc0:	4602      	mov	r2, r0
 8001fc2:	68bb      	ldr	r3, [r7, #8]
 8001fc4:	1ad3      	subs	r3, r2, r3
 8001fc6:	68fa      	ldr	r2, [r7, #12]
 8001fc8:	429a      	cmp	r2, r3
 8001fca:	d8f6      	bhi.n	8001fba <TIMER_IF_DelayMs+0x18>
  }
  /* USER CODE BEGIN TIMER_IF_DelayMs_Last */

  /* USER CODE END TIMER_IF_DelayMs_Last */
}
 8001fcc:	bf00      	nop
 8001fce:	bf00      	nop
 8001fd0:	3710      	adds	r7, #16
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}

08001fd6 <HAL_RTCEx_SSRUEventCallback>:

  /* USER CODE END HAL_RTC_AlarmAEventCallback_Last */
}

void HAL_RTCEx_SSRUEventCallback(RTC_HandleTypeDef *hrtc)
{
 8001fd6:	b580      	push	{r7, lr}
 8001fd8:	b084      	sub	sp, #16
 8001fda:	af00      	add	r7, sp, #0
 8001fdc:	6078      	str	r0, [r7, #4]

  /* USER CODE END HAL_RTCEx_SSRUEventCallback */
  /*called every 48 days with 1024 ticks per seconds*/
  TIMER_IF_DBG_PRINTF(">>Handler SSRUnderflow at %d\n\r", GetTimerTicks());
  /*Increment MSBticks*/
  uint32_t MSB_ticks = TIMER_IF_BkUp_Read_MSBticks();
 8001fde:	f000 f8a5 	bl	800212c <TIMER_IF_BkUp_Read_MSBticks>
 8001fe2:	60f8      	str	r0, [r7, #12]
  TIMER_IF_BkUp_Write_MSBticks(MSB_ticks + 1);
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	3301      	adds	r3, #1
 8001fe8:	4618      	mov	r0, r3
 8001fea:	f000 f88f 	bl	800210c <TIMER_IF_BkUp_Write_MSBticks>
  /* USER CODE BEGIN HAL_RTCEx_SSRUEventCallback_Last */

  /* USER CODE END HAL_RTCEx_SSRUEventCallback_Last */
}
 8001fee:	bf00      	nop
 8001ff0:	3710      	adds	r7, #16
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}

08001ff6 <TIMER_IF_GetTime>:

uint32_t TIMER_IF_GetTime(uint16_t *mSeconds)
{
 8001ff6:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001ffa:	b08c      	sub	sp, #48	@ 0x30
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6178      	str	r0, [r7, #20]
  uint32_t seconds = 0;
 8002000:	2300      	movs	r3, #0
 8002002:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* USER CODE BEGIN TIMER_IF_GetTime */

  /* USER CODE END TIMER_IF_GetTime */
  uint64_t ticks;
  uint32_t timerValueLsb = GetTimerTicks();
 8002004:	f000 f8a2 	bl	800214c <GetTimerTicks>
 8002008:	62b8      	str	r0, [r7, #40]	@ 0x28
  uint32_t timerValueMSB = TIMER_IF_BkUp_Read_MSBticks();
 800200a:	f000 f88f 	bl	800212c <TIMER_IF_BkUp_Read_MSBticks>
 800200e:	6278      	str	r0, [r7, #36]	@ 0x24

  ticks = (((uint64_t) timerValueMSB) << 32) + timerValueLsb;
 8002010:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002012:	2200      	movs	r2, #0
 8002014:	60bb      	str	r3, [r7, #8]
 8002016:	60fa      	str	r2, [r7, #12]
 8002018:	f04f 0200 	mov.w	r2, #0
 800201c:	f04f 0300 	mov.w	r3, #0
 8002020:	68b9      	ldr	r1, [r7, #8]
 8002022:	000b      	movs	r3, r1
 8002024:	2200      	movs	r2, #0
 8002026:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002028:	2000      	movs	r0, #0
 800202a:	460c      	mov	r4, r1
 800202c:	4605      	mov	r5, r0
 800202e:	eb12 0804 	adds.w	r8, r2, r4
 8002032:	eb43 0905 	adc.w	r9, r3, r5
 8002036:	e9c7 8906 	strd	r8, r9, [r7, #24]

  seconds = (uint32_t)(ticks >> RTC_N_PREDIV_S);
 800203a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800203e:	f04f 0200 	mov.w	r2, #0
 8002042:	f04f 0300 	mov.w	r3, #0
 8002046:	0a82      	lsrs	r2, r0, #10
 8002048:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 800204c:	0a8b      	lsrs	r3, r1, #10
 800204e:	4613      	mov	r3, r2
 8002050:	62fb      	str	r3, [r7, #44]	@ 0x2c

  ticks = (uint32_t) ticks & RTC_PREDIV_S;
 8002052:	69bb      	ldr	r3, [r7, #24]
 8002054:	2200      	movs	r2, #0
 8002056:	603b      	str	r3, [r7, #0]
 8002058:	607a      	str	r2, [r7, #4]
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	f3c3 0a09 	ubfx	sl, r3, #0, #10
 8002060:	f04f 0b00 	mov.w	fp, #0
 8002064:	e9c7 ab06 	strd	sl, fp, [r7, #24]

  *mSeconds = TIMER_IF_Convert_Tick2ms(ticks);
 8002068:	69bb      	ldr	r3, [r7, #24]
 800206a:	4618      	mov	r0, r3
 800206c:	f7ff ff50 	bl	8001f10 <TIMER_IF_Convert_Tick2ms>
 8002070:	4603      	mov	r3, r0
 8002072:	b29a      	uxth	r2, r3
 8002074:	697b      	ldr	r3, [r7, #20]
 8002076:	801a      	strh	r2, [r3, #0]

  /* USER CODE BEGIN TIMER_IF_GetTime_Last */

  /* USER CODE END TIMER_IF_GetTime_Last */
  return seconds;
 8002078:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800207a:	4618      	mov	r0, r3
 800207c:	3730      	adds	r7, #48	@ 0x30
 800207e:	46bd      	mov	sp, r7
 8002080:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08002084 <TIMER_IF_BkUp_Write_Seconds>:

void TIMER_IF_BkUp_Write_Seconds(uint32_t Seconds)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b082      	sub	sp, #8
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_Seconds */

  /* USER CODE END TIMER_IF_BkUp_Write_Seconds */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SECONDS, Seconds);
 800208c:	687a      	ldr	r2, [r7, #4]
 800208e:	2100      	movs	r1, #0
 8002090:	4803      	ldr	r0, [pc, #12]	@ (80020a0 <TIMER_IF_BkUp_Write_Seconds+0x1c>)
 8002092:	f005 f873 	bl	800717c <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_Seconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_Seconds_Last */
}
 8002096:	bf00      	nop
 8002098:	3708      	adds	r7, #8
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}
 800209e:	bf00      	nop
 80020a0:	200001bc 	.word	0x200001bc

080020a4 <TIMER_IF_BkUp_Write_SubSeconds>:

void TIMER_IF_BkUp_Write_SubSeconds(uint32_t SubSeconds)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b082      	sub	sp, #8
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_SubSeconds */

  /* USER CODE END TIMER_IF_BkUp_Write_SubSeconds */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SUBSECONDS, SubSeconds);
 80020ac:	687a      	ldr	r2, [r7, #4]
 80020ae:	2101      	movs	r1, #1
 80020b0:	4803      	ldr	r0, [pc, #12]	@ (80020c0 <TIMER_IF_BkUp_Write_SubSeconds+0x1c>)
 80020b2:	f005 f863 	bl	800717c <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_SubSeconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_SubSeconds_Last */
}
 80020b6:	bf00      	nop
 80020b8:	3708      	adds	r7, #8
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}
 80020be:	bf00      	nop
 80020c0:	200001bc 	.word	0x200001bc

080020c4 <TIMER_IF_BkUp_Read_Seconds>:

uint32_t TIMER_IF_BkUp_Read_Seconds(void)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b082      	sub	sp, #8
 80020c8:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 80020ca:	2300      	movs	r3, #0
 80020cc:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_Seconds */

  /* USER CODE END TIMER_IF_BkUp_Read_Seconds */
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SECONDS);
 80020ce:	2100      	movs	r1, #0
 80020d0:	4804      	ldr	r0, [pc, #16]	@ (80020e4 <TIMER_IF_BkUp_Read_Seconds+0x20>)
 80020d2:	f005 f86b 	bl	80071ac <HAL_RTCEx_BKUPRead>
 80020d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_Seconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_Seconds_Last */
  return ret;
 80020d8:	687b      	ldr	r3, [r7, #4]
}
 80020da:	4618      	mov	r0, r3
 80020dc:	3708      	adds	r7, #8
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}
 80020e2:	bf00      	nop
 80020e4:	200001bc 	.word	0x200001bc

080020e8 <TIMER_IF_BkUp_Read_SubSeconds>:

uint32_t TIMER_IF_BkUp_Read_SubSeconds(void)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b082      	sub	sp, #8
 80020ec:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 80020ee:	2300      	movs	r3, #0
 80020f0:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_SubSeconds */

  /* USER CODE END TIMER_IF_BkUp_Read_SubSeconds */
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SUBSECONDS);
 80020f2:	2101      	movs	r1, #1
 80020f4:	4804      	ldr	r0, [pc, #16]	@ (8002108 <TIMER_IF_BkUp_Read_SubSeconds+0x20>)
 80020f6:	f005 f859 	bl	80071ac <HAL_RTCEx_BKUPRead>
 80020fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_SubSeconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_SubSeconds_Last */
  return ret;
 80020fc:	687b      	ldr	r3, [r7, #4]
}
 80020fe:	4618      	mov	r0, r3
 8002100:	3708      	adds	r7, #8
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}
 8002106:	bf00      	nop
 8002108:	200001bc 	.word	0x200001bc

0800210c <TIMER_IF_BkUp_Write_MSBticks>:

/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/
static void TIMER_IF_BkUp_Write_MSBticks(uint32_t MSBticks)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b082      	sub	sp, #8
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_MSBticks */

  /* USER CODE END TIMER_IF_BkUp_Write_MSBticks */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_MSBTICKS, MSBticks);
 8002114:	687a      	ldr	r2, [r7, #4]
 8002116:	2102      	movs	r1, #2
 8002118:	4803      	ldr	r0, [pc, #12]	@ (8002128 <TIMER_IF_BkUp_Write_MSBticks+0x1c>)
 800211a:	f005 f82f 	bl	800717c <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_MSBticks_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_MSBticks_Last */
}
 800211e:	bf00      	nop
 8002120:	3708      	adds	r7, #8
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}
 8002126:	bf00      	nop
 8002128:	200001bc 	.word	0x200001bc

0800212c <TIMER_IF_BkUp_Read_MSBticks>:

static uint32_t TIMER_IF_BkUp_Read_MSBticks(void)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b082      	sub	sp, #8
 8002130:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_MSBticks */

  /* USER CODE END TIMER_IF_BkUp_Read_MSBticks */
  uint32_t MSBticks;
  MSBticks = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_MSBTICKS);
 8002132:	2102      	movs	r1, #2
 8002134:	4804      	ldr	r0, [pc, #16]	@ (8002148 <TIMER_IF_BkUp_Read_MSBticks+0x1c>)
 8002136:	f005 f839 	bl	80071ac <HAL_RTCEx_BKUPRead>
 800213a:	6078      	str	r0, [r7, #4]
  return MSBticks;
 800213c:	687b      	ldr	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_MSBticks_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_MSBticks_Last */
}
 800213e:	4618      	mov	r0, r3
 8002140:	3708      	adds	r7, #8
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}
 8002146:	bf00      	nop
 8002148:	200001bc 	.word	0x200001bc

0800214c <GetTimerTicks>:

static inline uint32_t GetTimerTicks(void)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b082      	sub	sp, #8
 8002150:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GetTimerTicks */

  /* USER CODE END GetTimerTicks */
  uint32_t ssr = LL_RTC_TIME_GetSubSecond(RTC);
 8002152:	480b      	ldr	r0, [pc, #44]	@ (8002180 <GetTimerTicks+0x34>)
 8002154:	f7ff fde3 	bl	8001d1e <LL_RTC_TIME_GetSubSecond>
 8002158:	6078      	str	r0, [r7, #4]
  /* read twice to make sure value it valid*/
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 800215a:	e003      	b.n	8002164 <GetTimerTicks+0x18>
  {
    ssr = LL_RTC_TIME_GetSubSecond(RTC);
 800215c:	4808      	ldr	r0, [pc, #32]	@ (8002180 <GetTimerTicks+0x34>)
 800215e:	f7ff fdde 	bl	8001d1e <LL_RTC_TIME_GetSubSecond>
 8002162:	6078      	str	r0, [r7, #4]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8002164:	4806      	ldr	r0, [pc, #24]	@ (8002180 <GetTimerTicks+0x34>)
 8002166:	f7ff fdda 	bl	8001d1e <LL_RTC_TIME_GetSubSecond>
 800216a:	4602      	mov	r2, r0
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	4293      	cmp	r3, r2
 8002170:	d1f4      	bne.n	800215c <GetTimerTicks+0x10>
  }
  return UINT32_MAX - ssr;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	43db      	mvns	r3, r3
  /* USER CODE BEGIN GetTimerTicks_Last */

  /* USER CODE END GetTimerTicks_Last */
}
 8002176:	4618      	mov	r0, r3
 8002178:	3708      	adds	r7, #8
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}
 800217e:	bf00      	nop
 8002180:	40002800 	.word	0x40002800

08002184 <LL_AHB2_GRP1_EnableClock>:
{
 8002184:	b480      	push	{r7}
 8002186:	b085      	sub	sp, #20
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800218c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002190:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002192:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	4313      	orrs	r3, r2
 800219a:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800219c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80021a0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	4013      	ands	r3, r2
 80021a6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80021a8:	68fb      	ldr	r3, [r7, #12]
}
 80021aa:	bf00      	nop
 80021ac:	3714      	adds	r7, #20
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bc80      	pop	{r7}
 80021b2:	4770      	bx	lr

080021b4 <LL_APB1_GRP1_EnableClock>:
{
 80021b4:	b480      	push	{r7}
 80021b6:	b085      	sub	sp, #20
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 80021bc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80021c0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80021c2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	4313      	orrs	r3, r2
 80021ca:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80021cc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80021d0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	4013      	ands	r3, r2
 80021d6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80021d8:	68fb      	ldr	r3, [r7, #12]
}
 80021da:	bf00      	nop
 80021dc:	3714      	adds	r7, #20
 80021de:	46bd      	mov	sp, r7
 80021e0:	bc80      	pop	{r7}
 80021e2:	4770      	bx	lr

080021e4 <LL_APB1_GRP2_EnableClock>:
{
 80021e4:	b480      	push	{r7}
 80021e6:	b085      	sub	sp, #20
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR2, Periphs);
 80021ec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80021f0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80021f2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	4313      	orrs	r3, r2
 80021fa:	65cb      	str	r3, [r1, #92]	@ 0x5c
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 80021fc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002200:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	4013      	ands	r3, r2
 8002206:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002208:	68fb      	ldr	r3, [r7, #12]
}
 800220a:	bf00      	nop
 800220c:	3714      	adds	r7, #20
 800220e:	46bd      	mov	sp, r7
 8002210:	bc80      	pop	{r7}
 8002212:	4770      	bx	lr

08002214 <LL_APB1_GRP1_DisableClock>:
{
 8002214:	b480      	push	{r7}
 8002216:	b083      	sub	sp, #12
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 800221c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002220:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	43db      	mvns	r3, r3
 8002226:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800222a:	4013      	ands	r3, r2
 800222c:	658b      	str	r3, [r1, #88]	@ 0x58
}
 800222e:	bf00      	nop
 8002230:	370c      	adds	r7, #12
 8002232:	46bd      	mov	sp, r7
 8002234:	bc80      	pop	{r7}
 8002236:	4770      	bx	lr

08002238 <LL_APB1_GRP2_DisableClock>:
{
 8002238:	b480      	push	{r7}
 800223a:	b083      	sub	sp, #12
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1ENR2, Periphs);
 8002240:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002244:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	43db      	mvns	r3, r3
 800224a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800224e:	4013      	ands	r3, r2
 8002250:	65cb      	str	r3, [r1, #92]	@ 0x5c
}
 8002252:	bf00      	nop
 8002254:	370c      	adds	r7, #12
 8002256:	46bd      	mov	sp, r7
 8002258:	bc80      	pop	{r7}
 800225a:	4770      	bx	lr

0800225c <LL_APB2_GRP1_EnableClock>:
{
 800225c:	b480      	push	{r7}
 800225e:	b085      	sub	sp, #20
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8002264:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002268:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800226a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	4313      	orrs	r3, r2
 8002272:	660b      	str	r3, [r1, #96]	@ 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002274:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002278:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	4013      	ands	r3, r2
 800227e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002280:	68fb      	ldr	r3, [r7, #12]
}
 8002282:	bf00      	nop
 8002284:	3714      	adds	r7, #20
 8002286:	46bd      	mov	sp, r7
 8002288:	bc80      	pop	{r7}
 800228a:	4770      	bx	lr

0800228c <LL_APB2_GRP1_DisableClock>:
{
 800228c:	b480      	push	{r7}
 800228e:	b083      	sub	sp, #12
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 8002294:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002298:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	43db      	mvns	r3, r3
 800229e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80022a2:	4013      	ands	r3, r2
 80022a4:	660b      	str	r3, [r1, #96]	@ 0x60
}
 80022a6:	bf00      	nop
 80022a8:	370c      	adds	r7, #12
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bc80      	pop	{r7}
 80022ae:	4770      	bx	lr

080022b0 <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80022b4:	4b28      	ldr	r3, [pc, #160]	@ (8002358 <MX_LPUART1_UART_Init+0xa8>)
 80022b6:	4a29      	ldr	r2, [pc, #164]	@ (800235c <MX_LPUART1_UART_Init+0xac>)
 80022b8:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 9600;
 80022ba:	4b27      	ldr	r3, [pc, #156]	@ (8002358 <MX_LPUART1_UART_Init+0xa8>)
 80022bc:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80022c0:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80022c2:	4b25      	ldr	r3, [pc, #148]	@ (8002358 <MX_LPUART1_UART_Init+0xa8>)
 80022c4:	2200      	movs	r2, #0
 80022c6:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80022c8:	4b23      	ldr	r3, [pc, #140]	@ (8002358 <MX_LPUART1_UART_Init+0xa8>)
 80022ca:	2200      	movs	r2, #0
 80022cc:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80022ce:	4b22      	ldr	r3, [pc, #136]	@ (8002358 <MX_LPUART1_UART_Init+0xa8>)
 80022d0:	2200      	movs	r2, #0
 80022d2:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80022d4:	4b20      	ldr	r3, [pc, #128]	@ (8002358 <MX_LPUART1_UART_Init+0xa8>)
 80022d6:	220c      	movs	r2, #12
 80022d8:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80022da:	4b1f      	ldr	r3, [pc, #124]	@ (8002358 <MX_LPUART1_UART_Init+0xa8>)
 80022dc:	2200      	movs	r2, #0
 80022de:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80022e0:	4b1d      	ldr	r3, [pc, #116]	@ (8002358 <MX_LPUART1_UART_Init+0xa8>)
 80022e2:	2200      	movs	r2, #0
 80022e4:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80022e6:	4b1c      	ldr	r3, [pc, #112]	@ (8002358 <MX_LPUART1_UART_Init+0xa8>)
 80022e8:	2200      	movs	r2, #0
 80022ea:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80022ec:	4b1a      	ldr	r3, [pc, #104]	@ (8002358 <MX_LPUART1_UART_Init+0xa8>)
 80022ee:	2200      	movs	r2, #0
 80022f0:	629a      	str	r2, [r3, #40]	@ 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 80022f2:	4b19      	ldr	r3, [pc, #100]	@ (8002358 <MX_LPUART1_UART_Init+0xa8>)
 80022f4:	2200      	movs	r2, #0
 80022f6:	665a      	str	r2, [r3, #100]	@ 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80022f8:	4817      	ldr	r0, [pc, #92]	@ (8002358 <MX_LPUART1_UART_Init+0xa8>)
 80022fa:	f005 fc4c 	bl	8007b96 <HAL_UART_Init>
 80022fe:	4603      	mov	r3, r0
 8002300:	2b00      	cmp	r3, #0
 8002302:	d001      	beq.n	8002308 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 8002304:	f7ff f956 	bl	80015b4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002308:	2100      	movs	r1, #0
 800230a:	4813      	ldr	r0, [pc, #76]	@ (8002358 <MX_LPUART1_UART_Init+0xa8>)
 800230c:	f007 fddb 	bl	8009ec6 <HAL_UARTEx_SetTxFifoThreshold>
 8002310:	4603      	mov	r3, r0
 8002312:	2b00      	cmp	r3, #0
 8002314:	d001      	beq.n	800231a <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 8002316:	f7ff f94d 	bl	80015b4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800231a:	2100      	movs	r1, #0
 800231c:	480e      	ldr	r0, [pc, #56]	@ (8002358 <MX_LPUART1_UART_Init+0xa8>)
 800231e:	f007 fe10 	bl	8009f42 <HAL_UARTEx_SetRxFifoThreshold>
 8002322:	4603      	mov	r3, r0
 8002324:	2b00      	cmp	r3, #0
 8002326:	d001      	beq.n	800232c <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002328:	f7ff f944 	bl	80015b4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 800232c:	480a      	ldr	r0, [pc, #40]	@ (8002358 <MX_LPUART1_UART_Init+0xa8>)
 800232e:	f007 fd92 	bl	8009e56 <HAL_UARTEx_DisableFifoMode>
 8002332:	4603      	mov	r3, r0
 8002334:	2b00      	cmp	r3, #0
 8002336:	d001      	beq.n	800233c <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002338:	f7ff f93c 	bl	80015b4 <Error_Handler>
  }
  if (HAL_RS485Ex_Init(&hlpuart1, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 800233c:	2300      	movs	r3, #0
 800233e:	2200      	movs	r2, #0
 8002340:	2100      	movs	r1, #0
 8002342:	4805      	ldr	r0, [pc, #20]	@ (8002358 <MX_LPUART1_UART_Init+0xa8>)
 8002344:	f007 fc76 	bl	8009c34 <HAL_RS485Ex_Init>
 8002348:	4603      	mov	r3, r0
 800234a:	2b00      	cmp	r3, #0
 800234c:	d001      	beq.n	8002352 <MX_LPUART1_UART_Init+0xa2>
  {
    Error_Handler();
 800234e:	f7ff f931 	bl	80015b4 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8002352:	bf00      	nop
 8002354:	bd80      	pop	{r7, pc}
 8002356:	bf00      	nop
 8002358:	20000208 	.word	0x20000208
 800235c:	40008000 	.word	0x40008000

08002360 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002364:	4b22      	ldr	r3, [pc, #136]	@ (80023f0 <MX_USART1_UART_Init+0x90>)
 8002366:	4a23      	ldr	r2, [pc, #140]	@ (80023f4 <MX_USART1_UART_Init+0x94>)
 8002368:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800236a:	4b21      	ldr	r3, [pc, #132]	@ (80023f0 <MX_USART1_UART_Init+0x90>)
 800236c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002370:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002372:	4b1f      	ldr	r3, [pc, #124]	@ (80023f0 <MX_USART1_UART_Init+0x90>)
 8002374:	2200      	movs	r2, #0
 8002376:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002378:	4b1d      	ldr	r3, [pc, #116]	@ (80023f0 <MX_USART1_UART_Init+0x90>)
 800237a:	2200      	movs	r2, #0
 800237c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800237e:	4b1c      	ldr	r3, [pc, #112]	@ (80023f0 <MX_USART1_UART_Init+0x90>)
 8002380:	2200      	movs	r2, #0
 8002382:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002384:	4b1a      	ldr	r3, [pc, #104]	@ (80023f0 <MX_USART1_UART_Init+0x90>)
 8002386:	220c      	movs	r2, #12
 8002388:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800238a:	4b19      	ldr	r3, [pc, #100]	@ (80023f0 <MX_USART1_UART_Init+0x90>)
 800238c:	2200      	movs	r2, #0
 800238e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002390:	4b17      	ldr	r3, [pc, #92]	@ (80023f0 <MX_USART1_UART_Init+0x90>)
 8002392:	2200      	movs	r2, #0
 8002394:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002396:	4b16      	ldr	r3, [pc, #88]	@ (80023f0 <MX_USART1_UART_Init+0x90>)
 8002398:	2200      	movs	r2, #0
 800239a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800239c:	4b14      	ldr	r3, [pc, #80]	@ (80023f0 <MX_USART1_UART_Init+0x90>)
 800239e:	2200      	movs	r2, #0
 80023a0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80023a2:	4b13      	ldr	r3, [pc, #76]	@ (80023f0 <MX_USART1_UART_Init+0x90>)
 80023a4:	2200      	movs	r2, #0
 80023a6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80023a8:	4811      	ldr	r0, [pc, #68]	@ (80023f0 <MX_USART1_UART_Init+0x90>)
 80023aa:	f005 fbf4 	bl	8007b96 <HAL_UART_Init>
 80023ae:	4603      	mov	r3, r0
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d001      	beq.n	80023b8 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80023b4:	f7ff f8fe 	bl	80015b4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80023b8:	2100      	movs	r1, #0
 80023ba:	480d      	ldr	r0, [pc, #52]	@ (80023f0 <MX_USART1_UART_Init+0x90>)
 80023bc:	f007 fd83 	bl	8009ec6 <HAL_UARTEx_SetTxFifoThreshold>
 80023c0:	4603      	mov	r3, r0
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d001      	beq.n	80023ca <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80023c6:	f7ff f8f5 	bl	80015b4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80023ca:	2100      	movs	r1, #0
 80023cc:	4808      	ldr	r0, [pc, #32]	@ (80023f0 <MX_USART1_UART_Init+0x90>)
 80023ce:	f007 fdb8 	bl	8009f42 <HAL_UARTEx_SetRxFifoThreshold>
 80023d2:	4603      	mov	r3, r0
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d001      	beq.n	80023dc <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80023d8:	f7ff f8ec 	bl	80015b4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80023dc:	4804      	ldr	r0, [pc, #16]	@ (80023f0 <MX_USART1_UART_Init+0x90>)
 80023de:	f007 fd3a 	bl	8009e56 <HAL_UARTEx_DisableFifoMode>
 80023e2:	4603      	mov	r3, r0
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d001      	beq.n	80023ec <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80023e8:	f7ff f8e4 	bl	80015b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80023ec:	bf00      	nop
 80023ee:	bd80      	pop	{r7, pc}
 80023f0:	2000029c 	.word	0x2000029c
 80023f4:	40013800 	.word	0x40013800

080023f8 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80023fc:	4b22      	ldr	r3, [pc, #136]	@ (8002488 <MX_USART2_UART_Init+0x90>)
 80023fe:	4a23      	ldr	r2, [pc, #140]	@ (800248c <MX_USART2_UART_Init+0x94>)
 8002400:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8002402:	4b21      	ldr	r3, [pc, #132]	@ (8002488 <MX_USART2_UART_Init+0x90>)
 8002404:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8002408:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800240a:	4b1f      	ldr	r3, [pc, #124]	@ (8002488 <MX_USART2_UART_Init+0x90>)
 800240c:	2200      	movs	r2, #0
 800240e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002410:	4b1d      	ldr	r3, [pc, #116]	@ (8002488 <MX_USART2_UART_Init+0x90>)
 8002412:	2200      	movs	r2, #0
 8002414:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002416:	4b1c      	ldr	r3, [pc, #112]	@ (8002488 <MX_USART2_UART_Init+0x90>)
 8002418:	2200      	movs	r2, #0
 800241a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800241c:	4b1a      	ldr	r3, [pc, #104]	@ (8002488 <MX_USART2_UART_Init+0x90>)
 800241e:	220c      	movs	r2, #12
 8002420:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002422:	4b19      	ldr	r3, [pc, #100]	@ (8002488 <MX_USART2_UART_Init+0x90>)
 8002424:	2200      	movs	r2, #0
 8002426:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002428:	4b17      	ldr	r3, [pc, #92]	@ (8002488 <MX_USART2_UART_Init+0x90>)
 800242a:	2200      	movs	r2, #0
 800242c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800242e:	4b16      	ldr	r3, [pc, #88]	@ (8002488 <MX_USART2_UART_Init+0x90>)
 8002430:	2200      	movs	r2, #0
 8002432:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002434:	4b14      	ldr	r3, [pc, #80]	@ (8002488 <MX_USART2_UART_Init+0x90>)
 8002436:	2200      	movs	r2, #0
 8002438:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800243a:	4b13      	ldr	r3, [pc, #76]	@ (8002488 <MX_USART2_UART_Init+0x90>)
 800243c:	2200      	movs	r2, #0
 800243e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002440:	4811      	ldr	r0, [pc, #68]	@ (8002488 <MX_USART2_UART_Init+0x90>)
 8002442:	f005 fba8 	bl	8007b96 <HAL_UART_Init>
 8002446:	4603      	mov	r3, r0
 8002448:	2b00      	cmp	r3, #0
 800244a:	d001      	beq.n	8002450 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 800244c:	f7ff f8b2 	bl	80015b4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002450:	2100      	movs	r1, #0
 8002452:	480d      	ldr	r0, [pc, #52]	@ (8002488 <MX_USART2_UART_Init+0x90>)
 8002454:	f007 fd37 	bl	8009ec6 <HAL_UARTEx_SetTxFifoThreshold>
 8002458:	4603      	mov	r3, r0
 800245a:	2b00      	cmp	r3, #0
 800245c:	d001      	beq.n	8002462 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800245e:	f7ff f8a9 	bl	80015b4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002462:	2100      	movs	r1, #0
 8002464:	4808      	ldr	r0, [pc, #32]	@ (8002488 <MX_USART2_UART_Init+0x90>)
 8002466:	f007 fd6c 	bl	8009f42 <HAL_UARTEx_SetRxFifoThreshold>
 800246a:	4603      	mov	r3, r0
 800246c:	2b00      	cmp	r3, #0
 800246e:	d001      	beq.n	8002474 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8002470:	f7ff f8a0 	bl	80015b4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8002474:	4804      	ldr	r0, [pc, #16]	@ (8002488 <MX_USART2_UART_Init+0x90>)
 8002476:	f007 fcee 	bl	8009e56 <HAL_UARTEx_DisableFifoMode>
 800247a:	4603      	mov	r3, r0
 800247c:	2b00      	cmp	r3, #0
 800247e:	d001      	beq.n	8002484 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8002480:	f7ff f898 	bl	80015b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002484:	bf00      	nop
 8002486:	bd80      	pop	{r7, pc}
 8002488:	20000330 	.word	0x20000330
 800248c:	40004400 	.word	0x40004400

08002490 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b096      	sub	sp, #88	@ 0x58
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002498:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800249c:	2200      	movs	r2, #0
 800249e:	601a      	str	r2, [r3, #0]
 80024a0:	605a      	str	r2, [r3, #4]
 80024a2:	609a      	str	r2, [r3, #8]
 80024a4:	60da      	str	r2, [r3, #12]
 80024a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80024a8:	f107 030c 	add.w	r3, r7, #12
 80024ac:	2238      	movs	r2, #56	@ 0x38
 80024ae:	2100      	movs	r1, #0
 80024b0:	4618      	mov	r0, r3
 80024b2:	f018 fe77 	bl	801b1a4 <memset>
  if(uartHandle->Instance==LPUART1)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	4a6b      	ldr	r2, [pc, #428]	@ (8002668 <HAL_UART_MspInit+0x1d8>)
 80024bc:	4293      	cmp	r3, r2
 80024be:	d140      	bne.n	8002542 <HAL_UART_MspInit+0xb2>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80024c0:	2320      	movs	r3, #32
 80024c2:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_HSI;
 80024c4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80024c8:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80024ca:	f107 030c 	add.w	r3, r7, #12
 80024ce:	4618      	mov	r0, r3
 80024d0:	f004 f90e 	bl	80066f0 <HAL_RCCEx_PeriphCLKConfig>
 80024d4:	4603      	mov	r3, r0
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d001      	beq.n	80024de <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80024da:	f7ff f86b 	bl	80015b4 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80024de:	2001      	movs	r0, #1
 80024e0:	f7ff fe80 	bl	80021e4 <LL_APB1_GRP2_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024e4:	2002      	movs	r0, #2
 80024e6:	f7ff fe4d 	bl	8002184 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80024ea:	2004      	movs	r0, #4
 80024ec:	f7ff fe4a 	bl	8002184 <LL_AHB2_GRP1_EnableClock>
    /**LPUART1 GPIO Configuration
    PB1     ------> LPUART1_DE
    PC1     ------> LPUART1_TX
    PC0     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80024f0:	2302      	movs	r3, #2
 80024f2:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024f4:	2302      	movs	r3, #2
 80024f6:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024f8:	2300      	movs	r3, #0
 80024fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024fc:	2300      	movs	r3, #0
 80024fe:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8002500:	2308      	movs	r3, #8
 8002502:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002504:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8002508:	4619      	mov	r1, r3
 800250a:	4858      	ldr	r0, [pc, #352]	@ (800266c <HAL_UART_MspInit+0x1dc>)
 800250c:	f002 fc3a 	bl	8004d84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0;
 8002510:	2303      	movs	r3, #3
 8002512:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002514:	2302      	movs	r3, #2
 8002516:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002518:	2300      	movs	r3, #0
 800251a:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800251c:	2300      	movs	r3, #0
 800251e:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8002520:	2308      	movs	r3, #8
 8002522:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002524:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8002528:	4619      	mov	r1, r3
 800252a:	4851      	ldr	r0, [pc, #324]	@ (8002670 <HAL_UART_MspInit+0x1e0>)
 800252c:	f002 fc2a 	bl	8004d84 <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8002530:	2200      	movs	r2, #0
 8002532:	2100      	movs	r1, #0
 8002534:	2026      	movs	r0, #38	@ 0x26
 8002536:	f001 fdde 	bl	80040f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 800253a:	2026      	movs	r0, #38	@ 0x26
 800253c:	f001 fdf5 	bl	800412a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002540:	e08e      	b.n	8002660 <HAL_UART_MspInit+0x1d0>
  else if(uartHandle->Instance==USART1)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4a4b      	ldr	r2, [pc, #300]	@ (8002674 <HAL_UART_MspInit+0x1e4>)
 8002548:	4293      	cmp	r3, r2
 800254a:	d156      	bne.n	80025fa <HAL_UART_MspInit+0x16a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800254c:	2301      	movs	r3, #1
 800254e:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_HSI;
 8002550:	4b49      	ldr	r3, [pc, #292]	@ (8002678 <HAL_UART_MspInit+0x1e8>)
 8002552:	613b      	str	r3, [r7, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002554:	f107 030c 	add.w	r3, r7, #12
 8002558:	4618      	mov	r0, r3
 800255a:	f004 f8c9 	bl	80066f0 <HAL_RCCEx_PeriphCLKConfig>
 800255e:	4603      	mov	r3, r0
 8002560:	2b00      	cmp	r3, #0
 8002562:	d001      	beq.n	8002568 <HAL_UART_MspInit+0xd8>
      Error_Handler();
 8002564:	f7ff f826 	bl	80015b4 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002568:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800256c:	f7ff fe76 	bl	800225c <LL_APB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002570:	2002      	movs	r0, #2
 8002572:	f7ff fe07 	bl	8002184 <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8002576:	23c0      	movs	r3, #192	@ 0xc0
 8002578:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800257a:	2302      	movs	r3, #2
 800257c:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800257e:	2300      	movs	r3, #0
 8002580:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002582:	2300      	movs	r3, #0
 8002584:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002586:	2307      	movs	r3, #7
 8002588:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800258a:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800258e:	4619      	mov	r1, r3
 8002590:	4836      	ldr	r0, [pc, #216]	@ (800266c <HAL_UART_MspInit+0x1dc>)
 8002592:	f002 fbf7 	bl	8004d84 <HAL_GPIO_Init>
    hdma_usart1_tx.Instance = DMA1_Channel1;
 8002596:	4b39      	ldr	r3, [pc, #228]	@ (800267c <HAL_UART_MspInit+0x1ec>)
 8002598:	4a39      	ldr	r2, [pc, #228]	@ (8002680 <HAL_UART_MspInit+0x1f0>)
 800259a:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 800259c:	4b37      	ldr	r3, [pc, #220]	@ (800267c <HAL_UART_MspInit+0x1ec>)
 800259e:	2212      	movs	r2, #18
 80025a0:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80025a2:	4b36      	ldr	r3, [pc, #216]	@ (800267c <HAL_UART_MspInit+0x1ec>)
 80025a4:	2210      	movs	r2, #16
 80025a6:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80025a8:	4b34      	ldr	r3, [pc, #208]	@ (800267c <HAL_UART_MspInit+0x1ec>)
 80025aa:	2200      	movs	r2, #0
 80025ac:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80025ae:	4b33      	ldr	r3, [pc, #204]	@ (800267c <HAL_UART_MspInit+0x1ec>)
 80025b0:	2280      	movs	r2, #128	@ 0x80
 80025b2:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80025b4:	4b31      	ldr	r3, [pc, #196]	@ (800267c <HAL_UART_MspInit+0x1ec>)
 80025b6:	2200      	movs	r2, #0
 80025b8:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80025ba:	4b30      	ldr	r3, [pc, #192]	@ (800267c <HAL_UART_MspInit+0x1ec>)
 80025bc:	2200      	movs	r2, #0
 80025be:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80025c0:	4b2e      	ldr	r3, [pc, #184]	@ (800267c <HAL_UART_MspInit+0x1ec>)
 80025c2:	2200      	movs	r2, #0
 80025c4:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80025c6:	4b2d      	ldr	r3, [pc, #180]	@ (800267c <HAL_UART_MspInit+0x1ec>)
 80025c8:	2200      	movs	r2, #0
 80025ca:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80025cc:	482b      	ldr	r0, [pc, #172]	@ (800267c <HAL_UART_MspInit+0x1ec>)
 80025ce:	f001 fdd5 	bl	800417c <HAL_DMA_Init>
 80025d2:	4603      	mov	r3, r0
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d001      	beq.n	80025dc <HAL_UART_MspInit+0x14c>
      Error_Handler();
 80025d8:	f7fe ffec 	bl	80015b4 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	4a27      	ldr	r2, [pc, #156]	@ (800267c <HAL_UART_MspInit+0x1ec>)
 80025e0:	67da      	str	r2, [r3, #124]	@ 0x7c
 80025e2:	4a26      	ldr	r2, [pc, #152]	@ (800267c <HAL_UART_MspInit+0x1ec>)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80025e8:	2200      	movs	r2, #0
 80025ea:	2100      	movs	r1, #0
 80025ec:	2024      	movs	r0, #36	@ 0x24
 80025ee:	f001 fd82 	bl	80040f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80025f2:	2024      	movs	r0, #36	@ 0x24
 80025f4:	f001 fd99 	bl	800412a <HAL_NVIC_EnableIRQ>
}
 80025f8:	e032      	b.n	8002660 <HAL_UART_MspInit+0x1d0>
  else if(uartHandle->Instance==USART2)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4a21      	ldr	r2, [pc, #132]	@ (8002684 <HAL_UART_MspInit+0x1f4>)
 8002600:	4293      	cmp	r3, r2
 8002602:	d12d      	bne.n	8002660 <HAL_UART_MspInit+0x1d0>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002604:	2302      	movs	r3, #2
 8002606:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_HSI;
 8002608:	4b1f      	ldr	r3, [pc, #124]	@ (8002688 <HAL_UART_MspInit+0x1f8>)
 800260a:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800260c:	f107 030c 	add.w	r3, r7, #12
 8002610:	4618      	mov	r0, r3
 8002612:	f004 f86d 	bl	80066f0 <HAL_RCCEx_PeriphCLKConfig>
 8002616:	4603      	mov	r3, r0
 8002618:	2b00      	cmp	r3, #0
 800261a:	d001      	beq.n	8002620 <HAL_UART_MspInit+0x190>
      Error_Handler();
 800261c:	f7fe ffca 	bl	80015b4 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002620:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8002624:	f7ff fdc6 	bl	80021b4 <LL_APB1_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002628:	2001      	movs	r0, #1
 800262a:	f7ff fdab 	bl	8002184 <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_2;
 800262e:	230c      	movs	r3, #12
 8002630:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002632:	2302      	movs	r3, #2
 8002634:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002636:	2300      	movs	r3, #0
 8002638:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800263a:	2300      	movs	r3, #0
 800263c:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800263e:	2307      	movs	r3, #7
 8002640:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002642:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8002646:	4619      	mov	r1, r3
 8002648:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800264c:	f002 fb9a 	bl	8004d84 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002650:	2200      	movs	r2, #0
 8002652:	2100      	movs	r1, #0
 8002654:	2025      	movs	r0, #37	@ 0x25
 8002656:	f001 fd4e 	bl	80040f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800265a:	2025      	movs	r0, #37	@ 0x25
 800265c:	f001 fd65 	bl	800412a <HAL_NVIC_EnableIRQ>
}
 8002660:	bf00      	nop
 8002662:	3758      	adds	r7, #88	@ 0x58
 8002664:	46bd      	mov	sp, r7
 8002666:	bd80      	pop	{r7, pc}
 8002668:	40008000 	.word	0x40008000
 800266c:	48000400 	.word	0x48000400
 8002670:	48000800 	.word	0x48000800
 8002674:	40013800 	.word	0x40013800
 8002678:	00030002 	.word	0x00030002
 800267c:	200003c4 	.word	0x200003c4
 8002680:	40020008 	.word	0x40020008
 8002684:	40004400 	.word	0x40004400
 8002688:	000c0008 	.word	0x000c0008

0800268c <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b082      	sub	sp, #8
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==LPUART1)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4a1e      	ldr	r2, [pc, #120]	@ (8002714 <HAL_UART_MspDeInit+0x88>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d10e      	bne.n	80026bc <HAL_UART_MspDeInit+0x30>
  {
  /* USER CODE BEGIN LPUART1_MspDeInit 0 */

  /* USER CODE END LPUART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_LPUART1_CLK_DISABLE();
 800269e:	2001      	movs	r0, #1
 80026a0:	f7ff fdca 	bl	8002238 <LL_APB1_GRP2_DisableClock>
    /**LPUART1 GPIO Configuration
    PB1     ------> LPUART1_DE
    PC1     ------> LPUART1_TX
    PC0     ------> LPUART1_RX
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_1);
 80026a4:	2102      	movs	r1, #2
 80026a6:	481c      	ldr	r0, [pc, #112]	@ (8002718 <HAL_UART_MspDeInit+0x8c>)
 80026a8:	f002 fccc 	bl	8005044 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_1|GPIO_PIN_0);
 80026ac:	2103      	movs	r1, #3
 80026ae:	481b      	ldr	r0, [pc, #108]	@ (800271c <HAL_UART_MspDeInit+0x90>)
 80026b0:	f002 fcc8 	bl	8005044 <HAL_GPIO_DeInit>

    /* LPUART1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(LPUART1_IRQn);
 80026b4:	2026      	movs	r0, #38	@ 0x26
 80026b6:	f001 fd46 	bl	8004146 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }
}
 80026ba:	e026      	b.n	800270a <HAL_UART_MspDeInit+0x7e>
  else if(uartHandle->Instance==USART1)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4a17      	ldr	r2, [pc, #92]	@ (8002720 <HAL_UART_MspDeInit+0x94>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d110      	bne.n	80026e8 <HAL_UART_MspDeInit+0x5c>
    __HAL_RCC_USART1_CLK_DISABLE();
 80026c6:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 80026ca:	f7ff fddf 	bl	800228c <LL_APB2_GRP1_DisableClock>
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7|GPIO_PIN_6);
 80026ce:	21c0      	movs	r1, #192	@ 0xc0
 80026d0:	4811      	ldr	r0, [pc, #68]	@ (8002718 <HAL_UART_MspDeInit+0x8c>)
 80026d2:	f002 fcb7 	bl	8005044 <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(uartHandle->hdmatx);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80026da:	4618      	mov	r0, r3
 80026dc:	f001 fdf6 	bl	80042cc <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 80026e0:	2024      	movs	r0, #36	@ 0x24
 80026e2:	f001 fd30 	bl	8004146 <HAL_NVIC_DisableIRQ>
}
 80026e6:	e010      	b.n	800270a <HAL_UART_MspDeInit+0x7e>
  else if(uartHandle->Instance==USART2)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4a0d      	ldr	r2, [pc, #52]	@ (8002724 <HAL_UART_MspDeInit+0x98>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d10b      	bne.n	800270a <HAL_UART_MspDeInit+0x7e>
    __HAL_RCC_USART2_CLK_DISABLE();
 80026f2:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 80026f6:	f7ff fd8d 	bl	8002214 <LL_APB1_GRP1_DisableClock>
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_3|GPIO_PIN_2);
 80026fa:	210c      	movs	r1, #12
 80026fc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002700:	f002 fca0 	bl	8005044 <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 8002704:	2025      	movs	r0, #37	@ 0x25
 8002706:	f001 fd1e 	bl	8004146 <HAL_NVIC_DisableIRQ>
}
 800270a:	bf00      	nop
 800270c:	3708      	adds	r7, #8
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}
 8002712:	bf00      	nop
 8002714:	40008000 	.word	0x40008000
 8002718:	48000400 	.word	0x48000400
 800271c:	48000800 	.word	0x48000800
 8002720:	40013800 	.word	0x40013800
 8002724:	40004400 	.word	0x40004400

08002728 <LL_APB2_GRP1_ForceReset>:
{
 8002728:	b480      	push	{r7}
 800272a:	b083      	sub	sp, #12
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2RSTR, Periphs);
 8002730:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002734:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002736:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	4313      	orrs	r3, r2
 800273e:	640b      	str	r3, [r1, #64]	@ 0x40
}
 8002740:	bf00      	nop
 8002742:	370c      	adds	r7, #12
 8002744:	46bd      	mov	sp, r7
 8002746:	bc80      	pop	{r7}
 8002748:	4770      	bx	lr

0800274a <LL_APB2_GRP1_ReleaseReset>:
{
 800274a:	b480      	push	{r7}
 800274c:	b083      	sub	sp, #12
 800274e:	af00      	add	r7, sp, #0
 8002750:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2RSTR, Periphs);
 8002752:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002756:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	43db      	mvns	r3, r3
 800275c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002760:	4013      	ands	r3, r2
 8002762:	640b      	str	r3, [r1, #64]	@ 0x40
}
 8002764:	bf00      	nop
 8002766:	370c      	adds	r7, #12
 8002768:	46bd      	mov	sp, r7
 800276a:	bc80      	pop	{r7}
 800276c:	4770      	bx	lr
	...

08002770 <LL_EXTI_EnableIT_0_31>:
{
 8002770:	b480      	push	{r7}
 8002772:	b083      	sub	sp, #12
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8002778:	4b06      	ldr	r3, [pc, #24]	@ (8002794 <LL_EXTI_EnableIT_0_31+0x24>)
 800277a:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 800277e:	4905      	ldr	r1, [pc, #20]	@ (8002794 <LL_EXTI_EnableIT_0_31+0x24>)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	4313      	orrs	r3, r2
 8002784:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 8002788:	bf00      	nop
 800278a:	370c      	adds	r7, #12
 800278c:	46bd      	mov	sp, r7
 800278e:	bc80      	pop	{r7}
 8002790:	4770      	bx	lr
 8002792:	bf00      	nop
 8002794:	58000800 	.word	0x58000800

08002798 <vcom_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

UTIL_ADV_TRACE_Status_t vcom_Init(void (*cb)(void *))
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b082      	sub	sp, #8
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vcom_Init_1 */

  /* USER CODE END vcom_Init_1 */
  TxCpltCallback = cb;
 80027a0:	4a07      	ldr	r2, [pc, #28]	@ (80027c0 <vcom_Init+0x28>)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6013      	str	r3, [r2, #0]
  MX_DMA_Init();
 80027a6:	f7fe fbc3 	bl	8000f30 <MX_DMA_Init>
  MX_USART1_UART_Init();
 80027aa:	f7ff fdd9 	bl	8002360 <MX_USART1_UART_Init>
  LL_EXTI_EnableIT_0_31(LL_EXTI_LINE_26);
 80027ae:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 80027b2:	f7ff ffdd 	bl	8002770 <LL_EXTI_EnableIT_0_31>
  return UTIL_ADV_TRACE_OK;
 80027b6:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Init_2 */

  /* USER CODE END vcom_Init_2 */
}
 80027b8:	4618      	mov	r0, r3
 80027ba:	3708      	adds	r7, #8
 80027bc:	46bd      	mov	sp, r7
 80027be:	bd80      	pop	{r7, pc}
 80027c0:	20000428 	.word	0x20000428

080027c4 <vcom_DeInit>:

UTIL_ADV_TRACE_Status_t vcom_DeInit(void)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN vcom_DeInit_1 */

  /* USER CODE END vcom_DeInit_1 */
  /* ##-1- Reset peripherals ################################################## */
  __HAL_RCC_USART1_FORCE_RESET();
 80027c8:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 80027cc:	f7ff ffac 	bl	8002728 <LL_APB2_GRP1_ForceReset>
  __HAL_RCC_USART1_RELEASE_RESET();
 80027d0:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 80027d4:	f7ff ffb9 	bl	800274a <LL_APB2_GRP1_ReleaseReset>

  /* ##-2- MspDeInit ################################################## */
  HAL_UART_MspDeInit(&huart1);
 80027d8:	4804      	ldr	r0, [pc, #16]	@ (80027ec <vcom_DeInit+0x28>)
 80027da:	f7ff ff57 	bl	800268c <HAL_UART_MspDeInit>

  /* ##-3- Disable the NVIC for DMA ########################################### */
  /* USER CODE BEGIN 1 */
  HAL_NVIC_DisableIRQ(DMA1_Channel5_IRQn);
 80027de:	200f      	movs	r0, #15
 80027e0:	f001 fcb1 	bl	8004146 <HAL_NVIC_DisableIRQ>

  return UTIL_ADV_TRACE_OK;
 80027e4:	2300      	movs	r3, #0
  /* USER CODE END 1 */
  /* USER CODE BEGIN vcom_DeInit_2 */

  /* USER CODE END vcom_DeInit_2 */
}
 80027e6:	4618      	mov	r0, r3
 80027e8:	bd80      	pop	{r7, pc}
 80027ea:	bf00      	nop
 80027ec:	2000029c 	.word	0x2000029c

080027f0 <vcom_Trace_DMA>:

  /* USER CODE END vcom_Trace_2 */
}

UTIL_ADV_TRACE_Status_t vcom_Trace_DMA(uint8_t *p_data, uint16_t size)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b082      	sub	sp, #8
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
 80027f8:	460b      	mov	r3, r1
 80027fa:	807b      	strh	r3, [r7, #2]
  /* USER CODE BEGIN vcom_Trace_DMA_1 */

  /* USER CODE END vcom_Trace_DMA_1 */
  HAL_UART_Transmit_DMA(&huart1, p_data, size);
 80027fc:	887b      	ldrh	r3, [r7, #2]
 80027fe:	461a      	mov	r2, r3
 8002800:	6879      	ldr	r1, [r7, #4]
 8002802:	4804      	ldr	r0, [pc, #16]	@ (8002814 <vcom_Trace_DMA+0x24>)
 8002804:	f005 fa64 	bl	8007cd0 <HAL_UART_Transmit_DMA>
  return UTIL_ADV_TRACE_OK;
 8002808:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Trace_DMA_2 */

  /* USER CODE END vcom_Trace_DMA_2 */
}
 800280a:	4618      	mov	r0, r3
 800280c:	3708      	adds	r7, #8
 800280e:	46bd      	mov	sp, r7
 8002810:	bd80      	pop	{r7, pc}
 8002812:	bf00      	nop
 8002814:	2000029c 	.word	0x2000029c

08002818 <vcom_ReceiveInit>:

UTIL_ADV_TRACE_Status_t vcom_ReceiveInit(void (*RxCb)(uint8_t *rxChar, uint16_t size, uint8_t error))
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b084      	sub	sp, #16
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]

  /* USER CODE END vcom_ReceiveInit_1 */
  UART_WakeUpTypeDef WakeUpSelection;

  /*record call back*/
  RxCpltCallback = RxCb;
 8002820:	4a19      	ldr	r2, [pc, #100]	@ (8002888 <vcom_ReceiveInit+0x70>)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6013      	str	r3, [r2, #0]

  /*Set wakeUp event on start bit*/
  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_STARTBIT;
 8002826:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800282a:	60bb      	str	r3, [r7, #8]

  HAL_UARTEx_StopModeWakeUpSourceConfig(&huart1, WakeUpSelection);
 800282c:	f107 0308 	add.w	r3, r7, #8
 8002830:	e893 0006 	ldmia.w	r3, {r1, r2}
 8002834:	4815      	ldr	r0, [pc, #84]	@ (800288c <vcom_ReceiveInit+0x74>)
 8002836:	f007 fa81 	bl	8009d3c <HAL_UARTEx_StopModeWakeUpSourceConfig>

  /* Make sure that no UART transfer is on-going */
  while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_BUSY) == SET);
 800283a:	bf00      	nop
 800283c:	4b13      	ldr	r3, [pc, #76]	@ (800288c <vcom_ReceiveInit+0x74>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	69db      	ldr	r3, [r3, #28]
 8002842:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002846:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800284a:	d0f7      	beq.n	800283c <vcom_ReceiveInit+0x24>

  /* Make sure that UART is ready to receive)   */
  while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_REACK) == RESET);
 800284c:	bf00      	nop
 800284e:	4b0f      	ldr	r3, [pc, #60]	@ (800288c <vcom_ReceiveInit+0x74>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	69db      	ldr	r3, [r3, #28]
 8002854:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002858:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800285c:	d1f7      	bne.n	800284e <vcom_ReceiveInit+0x36>

  /* Enable USART interrupt */
  __HAL_UART_ENABLE_IT(&huart1, UART_IT_WUF);
 800285e:	4b0b      	ldr	r3, [pc, #44]	@ (800288c <vcom_ReceiveInit+0x74>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	689a      	ldr	r2, [r3, #8]
 8002864:	4b09      	ldr	r3, [pc, #36]	@ (800288c <vcom_ReceiveInit+0x74>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 800286c:	609a      	str	r2, [r3, #8]

  /*Enable wakeup from stop mode*/
  HAL_UARTEx_EnableStopMode(&huart1);
 800286e:	4807      	ldr	r0, [pc, #28]	@ (800288c <vcom_ReceiveInit+0x74>)
 8002870:	f007 fabf 	bl	8009df2 <HAL_UARTEx_EnableStopMode>

  /*Start LPUART receive on IT*/
  HAL_UART_Receive_IT(&huart1, &charRx, 1);
 8002874:	2201      	movs	r2, #1
 8002876:	4906      	ldr	r1, [pc, #24]	@ (8002890 <vcom_ReceiveInit+0x78>)
 8002878:	4804      	ldr	r0, [pc, #16]	@ (800288c <vcom_ReceiveInit+0x74>)
 800287a:	f005 f9dd 	bl	8007c38 <HAL_UART_Receive_IT>

  return UTIL_ADV_TRACE_OK;
 800287e:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_ReceiveInit_2 */

  /* USER CODE END vcom_ReceiveInit_2 */
}
 8002880:	4618      	mov	r0, r3
 8002882:	3710      	adds	r7, #16
 8002884:	46bd      	mov	sp, r7
 8002886:	bd80      	pop	{r7, pc}
 8002888:	2000042c 	.word	0x2000042c
 800288c:	2000029c 	.word	0x2000029c
 8002890:	20000424 	.word	0x20000424

08002894 <vcom_Resume>:

void vcom_Resume(void)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN vcom_Resume_1 */

  /* USER CODE END vcom_Resume_1 */
  /*to re-enable lost UART settings*/
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002898:	4808      	ldr	r0, [pc, #32]	@ (80028bc <vcom_Resume+0x28>)
 800289a:	f005 f97c 	bl	8007b96 <HAL_UART_Init>
 800289e:	4603      	mov	r3, r0
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d001      	beq.n	80028a8 <vcom_Resume+0x14>
  {
    Error_Handler();
 80028a4:	f7fe fe86 	bl	80015b4 <Error_Handler>
  }

  /*to re-enable lost DMA settings*/
  if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80028a8:	4805      	ldr	r0, [pc, #20]	@ (80028c0 <vcom_Resume+0x2c>)
 80028aa:	f001 fc67 	bl	800417c <HAL_DMA_Init>
 80028ae:	4603      	mov	r3, r0
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d001      	beq.n	80028b8 <vcom_Resume+0x24>
  {
    Error_Handler();
 80028b4:	f7fe fe7e 	bl	80015b4 <Error_Handler>
  }
  /* USER CODE BEGIN vcom_Resume_2 */

  /* USER CODE END vcom_Resume_2 */
}
 80028b8:	bf00      	nop
 80028ba:	bd80      	pop	{r7, pc}
 80028bc:	2000029c 	.word	0x2000029c
 80028c0:	200003c4 	.word	0x200003c4

080028c4 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b082      	sub	sp, #8
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_1 */

  /* USER CODE END HAL_UART_TxCpltCallback_1 */
  /* buffer transmission complete*/
  if (huart->Instance == USART1)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a05      	ldr	r2, [pc, #20]	@ (80028e8 <HAL_UART_TxCpltCallback+0x24>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d103      	bne.n	80028de <HAL_UART_TxCpltCallback+0x1a>
  {
    TxCpltCallback(NULL);
 80028d6:	4b05      	ldr	r3, [pc, #20]	@ (80028ec <HAL_UART_TxCpltCallback+0x28>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	2000      	movs	r0, #0
 80028dc:	4798      	blx	r3
  }
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_2 */

  /* USER CODE END HAL_UART_TxCpltCallback_2 */
}
 80028de:	bf00      	nop
 80028e0:	3708      	adds	r7, #8
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bd80      	pop	{r7, pc}
 80028e6:	bf00      	nop
 80028e8:	40013800 	.word	0x40013800
 80028ec:	20000428 	.word	0x20000428

080028f0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b082      	sub	sp, #8
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_1 */

  /* USER CODE END HAL_UART_RxCpltCallback_1 */
  if (huart->Instance == USART1)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4a0d      	ldr	r2, [pc, #52]	@ (8002934 <HAL_UART_RxCpltCallback+0x44>)
 80028fe:	4293      	cmp	r3, r2
 8002900:	d113      	bne.n	800292a <HAL_UART_RxCpltCallback+0x3a>
  {
    if ((NULL != RxCpltCallback) && (HAL_UART_ERROR_NONE == huart->ErrorCode))
 8002902:	4b0d      	ldr	r3, [pc, #52]	@ (8002938 <HAL_UART_RxCpltCallback+0x48>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d00a      	beq.n	8002920 <HAL_UART_RxCpltCallback+0x30>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002910:	2b00      	cmp	r3, #0
 8002912:	d105      	bne.n	8002920 <HAL_UART_RxCpltCallback+0x30>
    {
      RxCpltCallback(&charRx, 1, 0);
 8002914:	4b08      	ldr	r3, [pc, #32]	@ (8002938 <HAL_UART_RxCpltCallback+0x48>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	2200      	movs	r2, #0
 800291a:	2101      	movs	r1, #1
 800291c:	4807      	ldr	r0, [pc, #28]	@ (800293c <HAL_UART_RxCpltCallback+0x4c>)
 800291e:	4798      	blx	r3
    }
    HAL_UART_Receive_IT(huart, &charRx, 1);
 8002920:	2201      	movs	r2, #1
 8002922:	4906      	ldr	r1, [pc, #24]	@ (800293c <HAL_UART_RxCpltCallback+0x4c>)
 8002924:	6878      	ldr	r0, [r7, #4]
 8002926:	f005 f987 	bl	8007c38 <HAL_UART_Receive_IT>
  }
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_2 */

  /* USER CODE END HAL_UART_RxCpltCallback_2 */
}
 800292a:	bf00      	nop
 800292c:	3708      	adds	r7, #8
 800292e:	46bd      	mov	sp, r7
 8002930:	bd80      	pop	{r7, pc}
 8002932:	bf00      	nop
 8002934:	40013800 	.word	0x40013800
 8002938:	2000042c 	.word	0x2000042c
 800293c:	20000424 	.word	0x20000424

08002940 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002940:	480d      	ldr	r0, [pc, #52]	@ (8002978 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002942:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002944:	f7ff f9e5 	bl	8001d12 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002948:	480c      	ldr	r0, [pc, #48]	@ (800297c <LoopForever+0x6>)
  ldr r1, =_edata
 800294a:	490d      	ldr	r1, [pc, #52]	@ (8002980 <LoopForever+0xa>)
  ldr r2, =_sidata
 800294c:	4a0d      	ldr	r2, [pc, #52]	@ (8002984 <LoopForever+0xe>)
  movs r3, #0
 800294e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002950:	e002      	b.n	8002958 <LoopCopyDataInit>

08002952 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002952:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002954:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002956:	3304      	adds	r3, #4

08002958 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002958:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800295a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800295c:	d3f9      	bcc.n	8002952 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800295e:	4a0a      	ldr	r2, [pc, #40]	@ (8002988 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002960:	4c0a      	ldr	r4, [pc, #40]	@ (800298c <LoopForever+0x16>)
  movs r3, #0
 8002962:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002964:	e001      	b.n	800296a <LoopFillZerobss>

08002966 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002966:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002968:	3204      	adds	r2, #4

0800296a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800296a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800296c:	d3fb      	bcc.n	8002966 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800296e:	f018 fc21 	bl	801b1b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002972:	f7fe fdb4 	bl	80014de <main>

08002976 <LoopForever>:

LoopForever:
    b LoopForever
 8002976:	e7fe      	b.n	8002976 <LoopForever>
  ldr   r0, =_estack
 8002978:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800297c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002980:	20000138 	.word	0x20000138
  ldr r2, =_sidata
 8002984:	0801bf40 	.word	0x0801bf40
  ldr r2, =_sbss
 8002988:	20000138 	.word	0x20000138
  ldr r4, =_ebss
 800298c:	20001bd4 	.word	0x20001bd4

08002990 <AES_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002990:	e7fe      	b.n	8002990 <AES_IRQHandler>
	...

08002994 <LL_DBGMCU_EnableDBGSleepMode>:
{
 8002994:	b480      	push	{r7}
 8002996:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8002998:	4b04      	ldr	r3, [pc, #16]	@ (80029ac <LL_DBGMCU_EnableDBGSleepMode+0x18>)
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	4a03      	ldr	r2, [pc, #12]	@ (80029ac <LL_DBGMCU_EnableDBGSleepMode+0x18>)
 800299e:	f043 0301 	orr.w	r3, r3, #1
 80029a2:	6053      	str	r3, [r2, #4]
}
 80029a4:	bf00      	nop
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bc80      	pop	{r7}
 80029aa:	4770      	bx	lr
 80029ac:	e0042000 	.word	0xe0042000

080029b0 <LL_DBGMCU_EnableDBGStopMode>:
{
 80029b0:	b480      	push	{r7}
 80029b2:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 80029b4:	4b04      	ldr	r3, [pc, #16]	@ (80029c8 <LL_DBGMCU_EnableDBGStopMode+0x18>)
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	4a03      	ldr	r2, [pc, #12]	@ (80029c8 <LL_DBGMCU_EnableDBGStopMode+0x18>)
 80029ba:	f043 0302 	orr.w	r3, r3, #2
 80029be:	6053      	str	r3, [r2, #4]
}
 80029c0:	bf00      	nop
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bc80      	pop	{r7}
 80029c6:	4770      	bx	lr
 80029c8:	e0042000 	.word	0xe0042000

080029cc <LL_DBGMCU_EnableDBGStandbyMode>:
{
 80029cc:	b480      	push	{r7}
 80029ce:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 80029d0:	4b04      	ldr	r3, [pc, #16]	@ (80029e4 <LL_DBGMCU_EnableDBGStandbyMode+0x18>)
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	4a03      	ldr	r2, [pc, #12]	@ (80029e4 <LL_DBGMCU_EnableDBGStandbyMode+0x18>)
 80029d6:	f043 0304 	orr.w	r3, r3, #4
 80029da:	6053      	str	r3, [r2, #4]
}
 80029dc:	bf00      	nop
 80029de:	46bd      	mov	sp, r7
 80029e0:	bc80      	pop	{r7}
 80029e2:	4770      	bx	lr
 80029e4:	e0042000 	.word	0xe0042000

080029e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b082      	sub	sp, #8
 80029ec:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80029ee:	2300      	movs	r3, #0
 80029f0:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80029f2:	2003      	movs	r0, #3
 80029f4:	f001 fb74 	bl	80040e0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80029f8:	f003 fc9c 	bl	8006334 <HAL_RCC_GetHCLKFreq>
 80029fc:	4603      	mov	r3, r0
 80029fe:	4a09      	ldr	r2, [pc, #36]	@ (8002a24 <HAL_Init+0x3c>)
 8002a00:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002a02:	2000      	movs	r0, #0
 8002a04:	f000 f810 	bl	8002a28 <HAL_InitTick>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d002      	beq.n	8002a14 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	71fb      	strb	r3, [r7, #7]
 8002a12:	e001      	b.n	8002a18 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002a14:	f7fe febd 	bl	8001792 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002a18:	79fb      	ldrb	r3, [r7, #7]
}
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	3708      	adds	r7, #8
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd80      	pop	{r7, pc}
 8002a22:	bf00      	nop
 8002a24:	20000000 	.word	0x20000000

08002a28 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b084      	sub	sp, #16
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002a30:	2300      	movs	r3, #0
 8002a32:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002a34:	4b17      	ldr	r3, [pc, #92]	@ (8002a94 <HAL_InitTick+0x6c>)
 8002a36:	781b      	ldrb	r3, [r3, #0]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d024      	beq.n	8002a86 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
#ifdef CORE_CM0PLUS
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLK2Freq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
#else
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002a3c:	f003 fc7a 	bl	8006334 <HAL_RCC_GetHCLKFreq>
 8002a40:	4602      	mov	r2, r0
 8002a42:	4b14      	ldr	r3, [pc, #80]	@ (8002a94 <HAL_InitTick+0x6c>)
 8002a44:	781b      	ldrb	r3, [r3, #0]
 8002a46:	4619      	mov	r1, r3
 8002a48:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002a4c:	fbb3 f3f1 	udiv	r3, r3, r1
 8002a50:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a54:	4618      	mov	r0, r3
 8002a56:	f001 fb84 	bl	8004162 <HAL_SYSTICK_Config>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d10f      	bne.n	8002a80 <HAL_InitTick+0x58>
#endif
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2b0f      	cmp	r3, #15
 8002a64:	d809      	bhi.n	8002a7a <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002a66:	2200      	movs	r2, #0
 8002a68:	6879      	ldr	r1, [r7, #4]
 8002a6a:	f04f 30ff 	mov.w	r0, #4294967295
 8002a6e:	f001 fb42 	bl	80040f6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002a72:	4a09      	ldr	r2, [pc, #36]	@ (8002a98 <HAL_InitTick+0x70>)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6013      	str	r3, [r2, #0]
 8002a78:	e007      	b.n	8002a8a <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	73fb      	strb	r3, [r7, #15]
 8002a7e:	e004      	b.n	8002a8a <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002a80:	2301      	movs	r3, #1
 8002a82:	73fb      	strb	r3, [r7, #15]
 8002a84:	e001      	b.n	8002a8a <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002a86:	2301      	movs	r3, #1
 8002a88:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002a8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	3710      	adds	r7, #16
 8002a90:	46bd      	mov	sp, r7
 8002a92:	bd80      	pop	{r7, pc}
 8002a94:	20000008 	.word	0x20000008
 8002a98:	20000004 	.word	0x20000004

08002a9c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002aa0:	4b05      	ldr	r3, [pc, #20]	@ (8002ab8 <HAL_IncTick+0x1c>)
 8002aa2:	781b      	ldrb	r3, [r3, #0]
 8002aa4:	461a      	mov	r2, r3
 8002aa6:	4b05      	ldr	r3, [pc, #20]	@ (8002abc <HAL_IncTick+0x20>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4413      	add	r3, r2
 8002aac:	4a03      	ldr	r2, [pc, #12]	@ (8002abc <HAL_IncTick+0x20>)
 8002aae:	6013      	str	r3, [r2, #0]
}
 8002ab0:	bf00      	nop
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bc80      	pop	{r7}
 8002ab6:	4770      	bx	lr
 8002ab8:	20000008 	.word	0x20000008
 8002abc:	20000430 	.word	0x20000430

08002ac0 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8002ac4:	4b04      	ldr	r3, [pc, #16]	@ (8002ad8 <HAL_SuspendTick+0x18>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4a03      	ldr	r2, [pc, #12]	@ (8002ad8 <HAL_SuspendTick+0x18>)
 8002aca:	f023 0302 	bic.w	r3, r3, #2
 8002ace:	6013      	str	r3, [r2, #0]
}
 8002ad0:	bf00      	nop
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bc80      	pop	{r7}
 8002ad6:	4770      	bx	lr
 8002ad8:	e000e010 	.word	0xe000e010

08002adc <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8002adc:	b480      	push	{r7}
 8002ade:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8002ae0:	4b04      	ldr	r3, [pc, #16]	@ (8002af4 <HAL_ResumeTick+0x18>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a03      	ldr	r2, [pc, #12]	@ (8002af4 <HAL_ResumeTick+0x18>)
 8002ae6:	f043 0302 	orr.w	r3, r3, #2
 8002aea:	6013      	str	r3, [r2, #0]
}
 8002aec:	bf00      	nop
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bc80      	pop	{r7}
 8002af2:	4770      	bx	lr
 8002af4:	e000e010 	.word	0xe000e010

08002af8 <HAL_GetUIDw0>:
/**
  * @brief  Return the first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 8002af8:	b480      	push	{r7}
 8002afa:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID_BASE)));
 8002afc:	4b02      	ldr	r3, [pc, #8]	@ (8002b08 <HAL_GetUIDw0+0x10>)
 8002afe:	681b      	ldr	r3, [r3, #0]
}
 8002b00:	4618      	mov	r0, r3
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bc80      	pop	{r7}
 8002b06:	4770      	bx	lr
 8002b08:	1fff7590 	.word	0x1fff7590

08002b0c <HAL_GetUIDw1>:
/**
  * @brief  Return the second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 8002b10:	4b02      	ldr	r3, [pc, #8]	@ (8002b1c <HAL_GetUIDw1+0x10>)
 8002b12:	681b      	ldr	r3, [r3, #0]
}
 8002b14:	4618      	mov	r0, r3
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bc80      	pop	{r7}
 8002b1a:	4770      	bx	lr
 8002b1c:	1fff7594 	.word	0x1fff7594

08002b20 <HAL_GetUIDw2>:
/**
  * @brief  Return the third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 8002b20:	b480      	push	{r7}
 8002b22:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 8002b24:	4b02      	ldr	r3, [pc, #8]	@ (8002b30 <HAL_GetUIDw2+0x10>)
 8002b26:	681b      	ldr	r3, [r3, #0]
}
 8002b28:	4618      	mov	r0, r3
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bc80      	pop	{r7}
 8002b2e:	4770      	bx	lr
 8002b30:	1fff7598 	.word	0x1fff7598

08002b34 <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enable the CPU1 Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGSleepMode();
 8002b38:	f7ff ff2c 	bl	8002994 <LL_DBGMCU_EnableDBGSleepMode>
}
 8002b3c:	bf00      	nop
 8002b3e:	bd80      	pop	{r7, pc}

08002b40 <HAL_DBGMCU_EnableDBGStopMode>:
  * @note  This functionality does not influence CPU2 operation, CPU2 cannot be debugged
  *        in Stop mode even when this bit is enabled
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGStopMode();
 8002b44:	f7ff ff34 	bl	80029b0 <LL_DBGMCU_EnableDBGStopMode>
}
 8002b48:	bf00      	nop
 8002b4a:	bd80      	pop	{r7, pc}

08002b4c <HAL_DBGMCU_EnableDBGStandbyMode>:
  * @note  This functionality does not influence CPU2 operation, CPU2 cannot be debugged
  *        in Standby mode even when this bit is enabled
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStandbyMode(void)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGStandbyMode();
 8002b50:	f7ff ff3c 	bl	80029cc <LL_DBGMCU_EnableDBGStandbyMode>
}
 8002b54:	bf00      	nop
 8002b56:	bd80      	pop	{r7, pc}

08002b58 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	b083      	sub	sp, #12
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
 8002b60:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	431a      	orrs	r2, r3
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	601a      	str	r2, [r3, #0]
}
 8002b72:	bf00      	nop
 8002b74:	370c      	adds	r7, #12
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bc80      	pop	{r7}
 8002b7a:	4770      	bx	lr

08002b7c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	b083      	sub	sp, #12
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	370c      	adds	r7, #12
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bc80      	pop	{r7}
 8002b94:	4770      	bx	lr

08002b96 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8002b96:	b480      	push	{r7}
 8002b98:	b085      	sub	sp, #20
 8002b9a:	af00      	add	r7, sp, #0
 8002b9c:	60f8      	str	r0, [r7, #12]
 8002b9e:	60b9      	str	r1, [r7, #8]
 8002ba0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	695a      	ldr	r2, [r3, #20]
 8002ba6:	68bb      	ldr	r3, [r7, #8]
 8002ba8:	f003 0304 	and.w	r3, r3, #4
 8002bac:	2107      	movs	r1, #7
 8002bae:	fa01 f303 	lsl.w	r3, r1, r3
 8002bb2:	43db      	mvns	r3, r3
 8002bb4:	401a      	ands	r2, r3
 8002bb6:	68bb      	ldr	r3, [r7, #8]
 8002bb8:	f003 0304 	and.w	r3, r3, #4
 8002bbc:	6879      	ldr	r1, [r7, #4]
 8002bbe:	fa01 f303 	lsl.w	r3, r1, r3
 8002bc2:	431a      	orrs	r2, r3
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8002bc8:	bf00      	nop
 8002bca:	3714      	adds	r7, #20
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bc80      	pop	{r7}
 8002bd0:	4770      	bx	lr

08002bd2 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8002bd2:	b480      	push	{r7}
 8002bd4:	b083      	sub	sp, #12
 8002bd6:	af00      	add	r7, sp, #0
 8002bd8:	6078      	str	r0, [r7, #4]
 8002bda:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	695a      	ldr	r2, [r3, #20]
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	f003 0304 	and.w	r3, r3, #4
 8002be6:	2107      	movs	r1, #7
 8002be8:	fa01 f303 	lsl.w	r3, r1, r3
 8002bec:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	f003 0304 	and.w	r3, r3, #4
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8002bf4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	370c      	adds	r7, #12
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	bc80      	pop	{r7}
 8002c00:	4770      	bx	lr

08002c02 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002c02:	b480      	push	{r7}
 8002c04:	b083      	sub	sp, #12
 8002c06:	af00      	add	r7, sp, #0
 8002c08:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	68db      	ldr	r3, [r3, #12]
 8002c0e:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d101      	bne.n	8002c1a <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002c16:	2301      	movs	r3, #1
 8002c18:	e000      	b.n	8002c1c <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002c1a:	2300      	movs	r3, #0
}
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	370c      	adds	r7, #12
 8002c20:	46bd      	mov	sp, r7
 8002c22:	bc80      	pop	{r7}
 8002c24:	4770      	bx	lr

08002c26 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002c26:	b480      	push	{r7}
 8002c28:	b085      	sub	sp, #20
 8002c2a:	af00      	add	r7, sp, #0
 8002c2c:	60f8      	str	r0, [r7, #12]
 8002c2e:	60b9      	str	r1, [r7, #8]
 8002c30:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002c36:	68bb      	ldr	r3, [r7, #8]
 8002c38:	f003 031f 	and.w	r3, r3, #31
 8002c3c:	210f      	movs	r1, #15
 8002c3e:	fa01 f303 	lsl.w	r3, r1, r3
 8002c42:	43db      	mvns	r3, r3
 8002c44:	401a      	ands	r2, r3
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	0e9b      	lsrs	r3, r3, #26
 8002c4a:	f003 010f 	and.w	r1, r3, #15
 8002c4e:	68bb      	ldr	r3, [r7, #8]
 8002c50:	f003 031f 	and.w	r3, r3, #31
 8002c54:	fa01 f303 	lsl.w	r3, r1, r3
 8002c58:	431a      	orrs	r2, r3
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
              << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002c5e:	bf00      	nop
 8002c60:	3714      	adds	r7, #20
 8002c62:	46bd      	mov	sp, r7
 8002c64:	bc80      	pop	{r7}
 8002c66:	4770      	bx	lr

08002c68 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	b083      	sub	sp, #12
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
 8002c70:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8002c7c:	431a      	orrs	r2, r3
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002c82:	bf00      	nop
 8002c84:	370c      	adds	r7, #12
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bc80      	pop	{r7}
 8002c8a:	4770      	bx	lr

08002c8c <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	b083      	sub	sp, #12
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
 8002c94:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8002ca0:	43db      	mvns	r3, r3
 8002ca2:	401a      	ands	r2, r3
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002ca8:	bf00      	nop
 8002caa:	370c      	adds	r7, #12
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bc80      	pop	{r7}
 8002cb0:	4770      	bx	lr

08002cb2 <LL_ADC_REG_GetDMATransfer>:
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_NONE
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
  */
__STATIC_INLINE uint32_t LL_ADC_REG_GetDMATransfer(ADC_TypeDef *ADCx)
{
 8002cb2:	b480      	push	{r7}
 8002cb4:	b083      	sub	sp, #12
 8002cb6:	af00      	add	r7, sp, #0
 8002cb8:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG));
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	68db      	ldr	r3, [r3, #12]
 8002cbe:	f003 0303 	and.w	r3, r3, #3
}
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	370c      	adds	r7, #12
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bc80      	pop	{r7}
 8002cca:	4770      	bx	lr

08002ccc <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	b085      	sub	sp, #20
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	60f8      	str	r0, [r7, #12]
 8002cd4:	60b9      	str	r1, [r7, #8]
 8002cd6:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	695a      	ldr	r2, [r3, #20]
 8002cdc:	68bb      	ldr	r3, [r7, #8]
 8002cde:	021b      	lsls	r3, r3, #8
 8002ce0:	43db      	mvns	r3, r3
 8002ce2:	401a      	ands	r2, r3
 8002ce4:	68bb      	ldr	r3, [r7, #8]
 8002ce6:	0219      	lsls	r1, r3, #8
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	400b      	ands	r3, r1
 8002cec:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 8002cf0:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002cf4:	431a      	orrs	r2, r3
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8002cfa:	bf00      	nop
 8002cfc:	3714      	adds	r7, #20
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bc80      	pop	{r7}
 8002d02:	4770      	bx	lr

08002d04 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002d04:	b480      	push	{r7}
 8002d06:	b083      	sub	sp, #12
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	689b      	ldr	r3, [r3, #8]
 8002d10:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8002d14:	f023 0317 	bic.w	r3, r3, #23
 8002d18:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002d20:	bf00      	nop
 8002d22:	370c      	adds	r7, #12
 8002d24:	46bd      	mov	sp, r7
 8002d26:	bc80      	pop	{r7}
 8002d28:	4770      	bx	lr

08002d2a <LL_ADC_DisableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_DisableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002d2a:	b480      	push	{r7}
 8002d2c:	b083      	sub	sp, #12
 8002d2e:	af00      	add	r7, sp, #0
 8002d30:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->CR, (ADC_CR_ADVREGEN | ADC_CR_BITS_PROPERTY_RS));
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	689b      	ldr	r3, [r3, #8]
 8002d36:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8002d3a:	f023 0317 	bic.w	r3, r3, #23
 8002d3e:	687a      	ldr	r2, [r7, #4]
 8002d40:	6093      	str	r3, [r2, #8]
}
 8002d42:	bf00      	nop
 8002d44:	370c      	adds	r7, #12
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bc80      	pop	{r7}
 8002d4a:	4770      	bx	lr

08002d4c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	b083      	sub	sp, #12
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	689b      	ldr	r3, [r3, #8]
 8002d58:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d5c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002d60:	d101      	bne.n	8002d66 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002d62:	2301      	movs	r3, #1
 8002d64:	e000      	b.n	8002d68 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002d66:	2300      	movs	r3, #0
}
 8002d68:	4618      	mov	r0, r3
 8002d6a:	370c      	adds	r7, #12
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	bc80      	pop	{r7}
 8002d70:	4770      	bx	lr

08002d72 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002d72:	b480      	push	{r7}
 8002d74:	b083      	sub	sp, #12
 8002d76:	af00      	add	r7, sp, #0
 8002d78:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	689b      	ldr	r3, [r3, #8]
 8002d7e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002d82:	f023 0317 	bic.w	r3, r3, #23
 8002d86:	f043 0201 	orr.w	r2, r3, #1
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002d8e:	bf00      	nop
 8002d90:	370c      	adds	r7, #12
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bc80      	pop	{r7}
 8002d96:	4770      	bx	lr

08002d98 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	b083      	sub	sp, #12
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	689b      	ldr	r3, [r3, #8]
 8002da4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002da8:	f023 0317 	bic.w	r3, r3, #23
 8002dac:	f043 0202 	orr.w	r2, r3, #2
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002db4:	bf00      	nop
 8002db6:	370c      	adds	r7, #12
 8002db8:	46bd      	mov	sp, r7
 8002dba:	bc80      	pop	{r7}
 8002dbc:	4770      	bx	lr

08002dbe <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002dbe:	b480      	push	{r7}
 8002dc0:	b083      	sub	sp, #12
 8002dc2:	af00      	add	r7, sp, #0
 8002dc4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	689b      	ldr	r3, [r3, #8]
 8002dca:	f003 0301 	and.w	r3, r3, #1
 8002dce:	2b01      	cmp	r3, #1
 8002dd0:	d101      	bne.n	8002dd6 <LL_ADC_IsEnabled+0x18>
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	e000      	b.n	8002dd8 <LL_ADC_IsEnabled+0x1a>
 8002dd6:	2300      	movs	r3, #0
}
 8002dd8:	4618      	mov	r0, r3
 8002dda:	370c      	adds	r7, #12
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	bc80      	pop	{r7}
 8002de0:	4770      	bx	lr

08002de2 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8002de2:	b480      	push	{r7}
 8002de4:	b083      	sub	sp, #12
 8002de6:	af00      	add	r7, sp, #0
 8002de8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	689b      	ldr	r3, [r3, #8]
 8002dee:	f003 0302 	and.w	r3, r3, #2
 8002df2:	2b02      	cmp	r3, #2
 8002df4:	d101      	bne.n	8002dfa <LL_ADC_IsDisableOngoing+0x18>
 8002df6:	2301      	movs	r3, #1
 8002df8:	e000      	b.n	8002dfc <LL_ADC_IsDisableOngoing+0x1a>
 8002dfa:	2300      	movs	r3, #0
}
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	370c      	adds	r7, #12
 8002e00:	46bd      	mov	sp, r7
 8002e02:	bc80      	pop	{r7}
 8002e04:	4770      	bx	lr

08002e06 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002e06:	b480      	push	{r7}
 8002e08:	b083      	sub	sp, #12
 8002e0a:	af00      	add	r7, sp, #0
 8002e0c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	689b      	ldr	r3, [r3, #8]
 8002e12:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002e16:	f023 0317 	bic.w	r3, r3, #23
 8002e1a:	f043 0204 	orr.w	r2, r3, #4
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002e22:	bf00      	nop
 8002e24:	370c      	adds	r7, #12
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bc80      	pop	{r7}
 8002e2a:	4770      	bx	lr

08002e2c <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	b083      	sub	sp, #12
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	689b      	ldr	r3, [r3, #8]
 8002e38:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002e3c:	f023 0317 	bic.w	r3, r3, #23
 8002e40:	f043 0210 	orr.w	r2, r3, #16
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8002e48:	bf00      	nop
 8002e4a:	370c      	adds	r7, #12
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	bc80      	pop	{r7}
 8002e50:	4770      	bx	lr

08002e52 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002e52:	b480      	push	{r7}
 8002e54:	b083      	sub	sp, #12
 8002e56:	af00      	add	r7, sp, #0
 8002e58:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	689b      	ldr	r3, [r3, #8]
 8002e5e:	f003 0304 	and.w	r3, r3, #4
 8002e62:	2b04      	cmp	r3, #4
 8002e64:	d101      	bne.n	8002e6a <LL_ADC_REG_IsConversionOngoing+0x18>
 8002e66:	2301      	movs	r3, #1
 8002e68:	e000      	b.n	8002e6c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002e6a:	2300      	movs	r3, #0
}
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	370c      	adds	r7, #12
 8002e70:	46bd      	mov	sp, r7
 8002e72:	bc80      	pop	{r7}
 8002e74:	4770      	bx	lr
	...

08002e78 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b088      	sub	sp, #32
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e80:	2300      	movs	r3, #0
 8002e82:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR1 = 0UL;
 8002e84:	2300      	movs	r3, #0
 8002e86:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8002e88:	2300      	movs	r3, #0
 8002e8a:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d101      	bne.n	8002e9a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002e96:	2301      	movs	r3, #1
 8002e98:	e17e      	b.n	8003198 <HAL_ADC_Init+0x320>
    assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
    assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
  }
  assert_param(IS_ADC_TRIGGER_FREQ(hadc->Init.TriggerFrequencyMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	691b      	ldr	r3, [r3, #16]
 8002e9e:	2b00      	cmp	r3, #0
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d109      	bne.n	8002ebc <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002ea8:	6878      	ldr	r0, [r7, #4]
 8002eaa:	f7fd fefd 	bl	8000ca8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	f7ff ff43 	bl	8002d4c <LL_ADC_IsInternalRegulatorEnabled>
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d115      	bne.n	8002ef8 <HAL_ADC_Init+0x80>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	f7ff ff17 	bl	8002d04 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002ed6:	4b9e      	ldr	r3, [pc, #632]	@ (8003150 <HAL_ADC_Init+0x2d8>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	099b      	lsrs	r3, r3, #6
 8002edc:	4a9d      	ldr	r2, [pc, #628]	@ (8003154 <HAL_ADC_Init+0x2dc>)
 8002ede:	fba2 2303 	umull	r2, r3, r2, r3
 8002ee2:	099b      	lsrs	r3, r3, #6
 8002ee4:	3301      	adds	r3, #1
 8002ee6:	005b      	lsls	r3, r3, #1
 8002ee8:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002eea:	e002      	b.n	8002ef2 <HAL_ADC_Init+0x7a>
    {
      wait_loop_index--;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	3b01      	subs	r3, #1
 8002ef0:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d1f9      	bne.n	8002eec <HAL_ADC_Init+0x74>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4618      	mov	r0, r3
 8002efe:	f7ff ff25 	bl	8002d4c <LL_ADC_IsInternalRegulatorEnabled>
 8002f02:	4603      	mov	r3, r0
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d10d      	bne.n	8002f24 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f0c:	f043 0210 	orr.w	r2, r3, #16
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f18:	f043 0201 	orr.w	r2, r3, #1
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002f20:	2301      	movs	r3, #1
 8002f22:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4618      	mov	r0, r3
 8002f2a:	f7ff ff92 	bl	8002e52 <LL_ADC_REG_IsConversionOngoing>
 8002f2e:	6138      	str	r0, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f34:	f003 0310 	and.w	r3, r3, #16
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	f040 8124 	bne.w	8003186 <HAL_ADC_Init+0x30e>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002f3e:	693b      	ldr	r3, [r7, #16]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	f040 8120 	bne.w	8003186 <HAL_ADC_Init+0x30e>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f4a:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002f4e:	f043 0202 	orr.w	r2, r3, #2
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	f7ff ff2f 	bl	8002dbe <LL_ADC_IsEnabled>
 8002f60:	4603      	mov	r3, r0
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	f040 80a7 	bne.w	80030b6 <HAL_ADC_Init+0x23e>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	7e1b      	ldrb	r3, [r3, #24]
 8002f70:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8002f72:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	7e5b      	ldrb	r3, [r3, #25]
 8002f78:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8002f7a:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	7e9b      	ldrb	r3, [r3, #26]
 8002f80:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8002f82:	4313      	orrs	r3, r2
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8002f84:	687a      	ldr	r2, [r7, #4]
 8002f86:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002f88:	2a00      	cmp	r2, #0
 8002f8a:	d002      	beq.n	8002f92 <HAL_ADC_Init+0x11a>
 8002f8c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002f90:	e000      	b.n	8002f94 <HAL_ADC_Init+0x11c>
 8002f92:	2200      	movs	r2, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8002f94:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8002f9a:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	691b      	ldr	r3, [r3, #16]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	da04      	bge.n	8002fae <HAL_ADC_Init+0x136>
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	691b      	ldr	r3, [r3, #16]
 8002fa8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002fac:	e001      	b.n	8002fb2 <HAL_ADC_Init+0x13a>
 8002fae:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
                   hadc->Init.DataAlign                                           |
 8002fb2:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8002fba:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8002fbc:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8002fbe:	69ba      	ldr	r2, [r7, #24]
 8002fc0:	4313      	orrs	r3, r2
 8002fc2:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002fca:	2b01      	cmp	r3, #1
 8002fcc:	d114      	bne.n	8002ff8 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	7e9b      	ldrb	r3, [r3, #26]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d104      	bne.n	8002fe0 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8002fd6:	69bb      	ldr	r3, [r7, #24]
 8002fd8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002fdc:	61bb      	str	r3, [r7, #24]
 8002fde:	e00b      	b.n	8002ff8 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fe4:	f043 0220 	orr.w	r2, r3, #32
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ff0:	f043 0201 	orr.w	r2, r3, #1
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d009      	beq.n	8003014 <HAL_ADC_Init+0x19c>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003004:	f403 72e0 	and.w	r2, r3, #448	@ 0x1c0
                     hadc->Init.ExternalTrigConvEdge);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 800300c:	4313      	orrs	r3, r2
 800300e:	69ba      	ldr	r2, [r7, #24]
 8003010:	4313      	orrs	r3, r2
 8003012:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	68db      	ldr	r3, [r3, #12]
 800301a:	f423 33fe 	bic.w	r3, r3, #130048	@ 0x1fc00
 800301e:	f423 73ff 	bic.w	r3, r3, #510	@ 0x1fe
 8003022:	687a      	ldr	r2, [r7, #4]
 8003024:	6812      	ldr	r2, [r2, #0]
 8003026:	69b9      	ldr	r1, [r7, #24]
 8003028:	430b      	orrs	r3, r1
 800302a:	60d3      	str	r3, [r2, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	f003 4240 	and.w	r2, r3, #3221225472	@ 0xc0000000
                   hadc->Init.TriggerFrequencyMode
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003038:	4313      	orrs	r3, r2
 800303a:	697a      	ldr	r2, [r7, #20]
 800303c:	4313      	orrs	r3, r2
 800303e:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003046:	2b01      	cmp	r3, #1
 8003048:	d111      	bne.n	800306e <HAL_ADC_Init+0x1f6>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	f003 4240 	and.w	r2, r3, #3221225472	@ 0xc0000000
                     hadc->Init.Oversampling.Ratio         |
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003056:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                     hadc->Init.Oversampling.Ratio         |
 800305c:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                     hadc->Init.Oversampling.RightBitShift |
 8003062:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8003064:	697b      	ldr	r3, [r7, #20]
 8003066:	4313      	orrs	r3, r2
 8003068:	f043 0301 	orr.w	r3, r3, #1
 800306c:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	691a      	ldr	r2, [r3, #16]
 8003074:	4b38      	ldr	r3, [pc, #224]	@ (8003158 <HAL_ADC_Init+0x2e0>)
 8003076:	4013      	ands	r3, r2
 8003078:	687a      	ldr	r2, [r7, #4]
 800307a:	6812      	ldr	r2, [r2, #0]
 800307c:	6979      	ldr	r1, [r7, #20]
 800307e:	430b      	orrs	r3, r1
 8003080:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	685b      	ldr	r3, [r3, #4]
 8003086:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800308a:	d014      	beq.n	80030b6 <HAL_ADC_Init+0x23e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	685b      	ldr	r3, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8003090:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003094:	d00f      	beq.n	80030b6 <HAL_ADC_Init+0x23e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	685b      	ldr	r3, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 800309a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800309e:	d00a      	beq.n	80030b6 <HAL_ADC_Init+0x23e>
      {
        MODIFY_REG(ADC_COMMON->CCR,
 80030a0:	4b2e      	ldr	r3, [pc, #184]	@ (800315c <HAL_ADC_Init+0x2e4>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f423 1270 	bic.w	r2, r3, #3932160	@ 0x3c0000
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 80030b0:	492a      	ldr	r1, [pc, #168]	@ (800315c <HAL_ADC_Init+0x2e4>)
 80030b2:	4313      	orrs	r3, r2
 80030b4:	600b      	str	r3, [r1, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6818      	ldr	r0, [r3, #0]
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80030be:	461a      	mov	r2, r3
 80030c0:	2100      	movs	r1, #0
 80030c2:	f7ff fd68 	bl	8002b96 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6818      	ldr	r0, [r3, #0]
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030ce:	461a      	mov	r2, r3
 80030d0:	4923      	ldr	r1, [pc, #140]	@ (8003160 <HAL_ADC_Init+0x2e8>)
 80030d2:	f7ff fd60 	bl	8002b96 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	691b      	ldr	r3, [r3, #16]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d108      	bne.n	80030f0 <HAL_ADC_Init+0x278>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f062 020f 	orn	r2, r2, #15
 80030ec:	629a      	str	r2, [r3, #40]	@ 0x28
 80030ee:	e017      	b.n	8003120 <HAL_ADC_Init+0x2a8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	691b      	ldr	r3, [r3, #16]
 80030f4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80030f8:	d112      	bne.n	8003120 <HAL_ADC_Init+0x2a8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	69db      	ldr	r3, [r3, #28]
 8003104:	3b01      	subs	r3, #1
 8003106:	009b      	lsls	r3, r3, #2
 8003108:	f003 031c 	and.w	r3, r3, #28
 800310c:	f06f 020f 	mvn.w	r2, #15
 8003110:	fa02 f103 	lsl.w	r1, r2, r3
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	430a      	orrs	r2, r1
 800311e:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	2100      	movs	r1, #0
 8003126:	4618      	mov	r0, r3
 8003128:	f7ff fd53 	bl	8002bd2 <LL_ADC_GetSamplingTimeCommonChannels>
 800312c:	4602      	mov	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8003132:	429a      	cmp	r2, r3
 8003134:	d116      	bne.n	8003164 <HAL_ADC_Init+0x2ec>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2200      	movs	r2, #0
 800313a:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003140:	f023 0303 	bic.w	r3, r3, #3
 8003144:	f043 0201 	orr.w	r2, r3, #1
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	659a      	str	r2, [r3, #88]	@ 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800314c:	e023      	b.n	8003196 <HAL_ADC_Init+0x31e>
 800314e:	bf00      	nop
 8003150:	20000000 	.word	0x20000000
 8003154:	053e2d63 	.word	0x053e2d63
 8003158:	1ffffc02 	.word	0x1ffffc02
 800315c:	40012708 	.word	0x40012708
 8003160:	03ffff04 	.word	0x03ffff04
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003168:	f023 0312 	bic.w	r3, r3, #18
 800316c:	f043 0210 	orr.w	r2, r3, #16
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003178:	f043 0201 	orr.w	r2, r3, #1
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 8003180:	2301      	movs	r3, #1
 8003182:	77fb      	strb	r3, [r7, #31]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8003184:	e007      	b.n	8003196 <HAL_ADC_Init+0x31e>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800318a:	f043 0210 	orr.w	r2, r3, #16
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8003192:	2301      	movs	r3, #1
 8003194:	77fb      	strb	r3, [r7, #31]
  }

  return tmp_hal_status;
 8003196:	7ffb      	ldrb	r3, [r7, #31]
}
 8003198:	4618      	mov	r0, r3
 800319a:	3720      	adds	r7, #32
 800319c:	46bd      	mov	sp, r7
 800319e:	bd80      	pop	{r7, pc}

080031a0 <HAL_ADC_DeInit>:
  *         common group is still running.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef *hadc)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b084      	sub	sp, #16
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check ADC handle */
  if (hadc == NULL)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d101      	bne.n	80031b2 <HAL_ADC_DeInit+0x12>
  {
    return HAL_ERROR;
 80031ae:	2301      	movs	r3, #1
 80031b0:	e07a      	b.n	80032a8 <HAL_ADC_DeInit+0x108>

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031b6:	f043 0202 	orr.w	r2, r3, #2
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Stop potential conversion on going, on regular group */
  tmp_hal_status = ADC_ConversionStop(hadc);
 80031be:	6878      	ldr	r0, [r7, #4]
 80031c0:	f000 fc02 	bl	80039c8 <ADC_ConversionStop>
 80031c4:	4603      	mov	r3, r0
 80031c6:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80031c8:	7bfb      	ldrb	r3, [r7, #15]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d10f      	bne.n	80031ee <HAL_ADC_DeInit+0x4e>
  {
    /* Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80031ce:	6878      	ldr	r0, [r7, #4]
 80031d0:	f000 fcc6 	bl	8003b60 <ADC_Disable>
 80031d4:	4603      	mov	r3, r0
 80031d6:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80031d8:	7bfb      	ldrb	r3, [r7, #15]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d102      	bne.n	80031e4 <HAL_ADC_DeInit+0x44>
    {
      /* Change ADC state */
      hadc->State = HAL_ADC_STATE_READY;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2201      	movs	r2, #1
 80031e2:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Disable ADC internal voltage regulator */
    LL_ADC_DisableInternalRegulator(hadc->Instance);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4618      	mov	r0, r3
 80031ea:	f7ff fd9e 	bl	8002d2a <LL_ADC_DisableInternalRegulator>
  /*       in HAL_ADC_MspDeInit() to reset the ADC peripheral using           */
  /*       system RCC hard reset.                                             */

  /* ========== Reset ADC registers ========== */
  /* Reset register IER */
  __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD3  | ADC_IT_AWD2 |
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	687a      	ldr	r2, [r7, #4]
 80031f6:	6812      	ldr	r2, [r2, #0]
 80031f8:	f423 7367 	bic.w	r3, r3, #924	@ 0x39c
 80031fc:	f023 0303 	bic.w	r3, r3, #3
 8003200:	6053      	str	r3, [r2, #4]
                              ADC_IT_AWD1  | ADC_IT_OVR  |
                              ADC_IT_EOS   | ADC_IT_EOC  |
                              ADC_IT_EOSMP | ADC_IT_RDY));

  /* Reset register ISR */
  __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD3  | ADC_FLAG_AWD2 |
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f240 329f 	movw	r2, #927	@ 0x39f
 800320a:	601a      	str	r2, [r3, #0]
  /* Reset register CR */
  /* Bits ADC_CR_ADCAL, ADC_CR_ADSTP, ADC_CR_ADSTART are in access mode     */
  /* "read-set": no direct reset applicable.                                */

  /* Reset register CFGR1 */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_AWD1CH   | ADC_CFGR1_AWD1EN  | ADC_CFGR1_AWD1SGL | ADC_CFGR1_DISCEN |
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	68d9      	ldr	r1, [r3, #12]
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681a      	ldr	r2, [r3, #0]
 8003216:	4b26      	ldr	r3, [pc, #152]	@ (80032b0 <HAL_ADC_DeInit+0x110>)
 8003218:	400b      	ands	r3, r1
 800321a:	60d3      	str	r3, [r2, #12]
                             ADC_CFGR1_AUTOFF  | ADC_CFGR1_WAIT   | ADC_CFGR1_CONT   | ADC_CFGR1_OVRMOD |
                             ADC_CFGR1_EXTEN   | ADC_CFGR1_EXTSEL | ADC_CFGR1_ALIGN  | ADC_CFGR1_RES    |
                             ADC_CFGR1_SCANDIR | ADC_CFGR1_DMACFG | ADC_CFGR1_DMAEN);

  /* Reset register SMPR */
  hadc->Instance->SMPR &= ~ADC_SMPR_SMP1;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	695a      	ldr	r2, [r3, #20]
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f022 0207 	bic.w	r2, r2, #7
 800322a:	615a      	str	r2, [r3, #20]

  /* Reset register CHSELR */
  hadc->Instance->CHSELR &= ~(ADC_CHSELR_SQ_ALL);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	2200      	movs	r2, #0
 8003238:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset register DR */
  /* bits in access mode read only, no direct reset applicable */

  /* Reset registers AWDxTR */
  hadc->Instance->AWD1TR &= ~(ADC_AWD1TR_HT1 | ADC_AWD1TR_LT1);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	6a1a      	ldr	r2, [r3, #32]
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f002 22f0 	and.w	r2, r2, #4026593280	@ 0xf000f000
 8003248:	621a      	str	r2, [r3, #32]
  hadc->Instance->AWD2TR &= ~(ADC_AWD2TR_HT2 | ADC_AWD2TR_LT2);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f002 22f0 	and.w	r2, r2, #4026593280	@ 0xf000f000
 8003258:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc->Instance->AWD3TR &= ~(ADC_AWD3TR_HT3 | ADC_AWD3TR_LT3);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f002 22f0 	and.w	r2, r2, #4026593280	@ 0xf000f000
 8003268:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset register CFGR2 */
  /* Note: CFGR2 reset done at the end of de-initialization due to          */
  /*       clock source reset                                               */
  /* Note: Update of ADC clock mode is conditioned to ADC state disabled:   */
  /*       already done above.                                              */
  hadc->Instance->CFGR2 &= ~ADC_CFGR2_CKMODE;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	691a      	ldr	r2, [r3, #16]
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f022 4240 	bic.w	r2, r2, #3221225472	@ 0xc0000000
 8003278:	611a      	str	r2, [r3, #16]

  /* Reset register CCR */
  ADC_COMMON->CCR &= ~(ADC_CCR_VBATEN | ADC_CCR_TSEN | ADC_CCR_VREFEN | ADC_CCR_PRESC);
 800327a:	4b0e      	ldr	r3, [pc, #56]	@ (80032b4 <HAL_ADC_DeInit+0x114>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4a0d      	ldr	r2, [pc, #52]	@ (80032b4 <HAL_ADC_DeInit+0x114>)
 8003280:	f023 73fe 	bic.w	r3, r3, #33292288	@ 0x1fc0000
 8003284:	6013      	str	r3, [r2, #0]

  /* DeInit the low level hardware */
  hadc->MspDeInitCallback(hadc);
#else
  /* DeInit the low level hardware */
  HAL_ADC_MspDeInit(hadc);
 8003286:	6878      	ldr	r0, [r7, #4]
 8003288:	f7fd fd2a 	bl	8000ce0 <HAL_ADC_MspDeInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

  /* Reset HAL ADC handle variable */
  hadc->ADCGroupRegularSequencerRanks = 0x00000000UL;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2200      	movs	r2, #0
 8003290:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Set ADC error code to none */
  ADC_CLEAR_ERRORCODE(hadc);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2200      	movs	r2, #0
 8003296:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC state */
  hadc->State = HAL_ADC_STATE_RESET;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2200      	movs	r2, #0
 800329c:	659a      	str	r2, [r3, #88]	@ 0x58

  __HAL_UNLOCK(hadc);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2200      	movs	r2, #0
 80032a2:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return tmp_hal_status;
 80032a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80032a8:	4618      	mov	r0, r3
 80032aa:	3710      	adds	r7, #16
 80032ac:	46bd      	mov	sp, r7
 80032ae:	bd80      	pop	{r7, pc}
 80032b0:	833e0200 	.word	0x833e0200
 80032b4:	40012708 	.word	0x40012708

080032b8 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b084      	sub	sp, #16
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4618      	mov	r0, r3
 80032c6:	f7ff fdc4 	bl	8002e52 <LL_ADC_REG_IsConversionOngoing>
 80032ca:	4603      	mov	r3, r0
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d132      	bne.n	8003336 <HAL_ADC_Start+0x7e>
  {
    __HAL_LOCK(hadc);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80032d6:	2b01      	cmp	r3, #1
 80032d8:	d101      	bne.n	80032de <HAL_ADC_Start+0x26>
 80032da:	2302      	movs	r3, #2
 80032dc:	e02e      	b.n	800333c <HAL_ADC_Start+0x84>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2201      	movs	r2, #1
 80032e2:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80032e6:	6878      	ldr	r0, [r7, #4]
 80032e8:	f000 fbb4 	bl	8003a54 <ADC_Enable>
 80032ec:	4603      	mov	r3, r0
 80032ee:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80032f0:	7bfb      	ldrb	r3, [r7, #15]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d11a      	bne.n	800332c <HAL_ADC_Start+0x74>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032fa:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80032fe:	f023 0301 	bic.w	r3, r3, #1
 8003302:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2200      	movs	r2, #0
 800330e:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	221c      	movs	r2, #28
 8003316:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2200      	movs	r2, #0
 800331c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4618      	mov	r0, r3
 8003326:	f7ff fd6e 	bl	8002e06 <LL_ADC_REG_StartConversion>
 800332a:	e006      	b.n	800333a <HAL_ADC_Start+0x82>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2200      	movs	r2, #0
 8003330:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
 8003334:	e001      	b.n	800333a <HAL_ADC_Start+0x82>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003336:	2302      	movs	r3, #2
 8003338:	73fb      	strb	r3, [r7, #15]
  }

  return tmp_hal_status;
 800333a:	7bfb      	ldrb	r3, [r7, #15]
}
 800333c:	4618      	mov	r0, r3
 800333e:	3710      	adds	r7, #16
 8003340:	46bd      	mov	sp, r7
 8003342:	bd80      	pop	{r7, pc}

08003344 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b084      	sub	sp, #16
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003352:	2b01      	cmp	r3, #1
 8003354:	d101      	bne.n	800335a <HAL_ADC_Stop+0x16>
 8003356:	2302      	movs	r3, #2
 8003358:	e022      	b.n	80033a0 <HAL_ADC_Stop+0x5c>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2201      	movs	r2, #1
 800335e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 8003362:	6878      	ldr	r0, [r7, #4]
 8003364:	f000 fb30 	bl	80039c8 <ADC_ConversionStop>
 8003368:	4603      	mov	r3, r0
 800336a:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800336c:	7bfb      	ldrb	r3, [r7, #15]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d111      	bne.n	8003396 <HAL_ADC_Stop+0x52>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8003372:	6878      	ldr	r0, [r7, #4]
 8003374:	f000 fbf4 	bl	8003b60 <ADC_Disable>
 8003378:	4603      	mov	r3, r0
 800337a:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800337c:	7bfb      	ldrb	r3, [r7, #15]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d109      	bne.n	8003396 <HAL_ADC_Stop+0x52>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003386:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800338a:	f023 0301 	bic.w	r3, r3, #1
 800338e:	f043 0201 	orr.w	r2, r3, #1
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_REG_BUSY,
                        HAL_ADC_STATE_READY);
    }
  }

  __HAL_UNLOCK(hadc);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2200      	movs	r2, #0
 800339a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return tmp_hal_status;
 800339e:	7bfb      	ldrb	r3, [r7, #15]
}
 80033a0:	4618      	mov	r0, r3
 80033a2:	3710      	adds	r7, #16
 80033a4:	46bd      	mov	sp, r7
 80033a6:	bd80      	pop	{r7, pc}

080033a8 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b084      	sub	sp, #16
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
 80033b0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	695b      	ldr	r3, [r3, #20]
 80033b6:	2b08      	cmp	r3, #8
 80033b8:	d102      	bne.n	80033c0 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 80033ba:	2308      	movs	r3, #8
 80033bc:	60fb      	str	r3, [r7, #12]
 80033be:	e010      	b.n	80033e2 <HAL_ADC_PollForConversion+0x3a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	68db      	ldr	r3, [r3, #12]
 80033c6:	f003 0301 	and.w	r3, r3, #1
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d007      	beq.n	80033de <HAL_ADC_PollForConversion+0x36>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033d2:	f043 0220 	orr.w	r2, r3, #32
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 80033da:	2301      	movs	r3, #1
 80033dc:	e077      	b.n	80034ce <HAL_ADC_PollForConversion+0x126>
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 80033de:	2304      	movs	r3, #4
 80033e0:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80033e2:	f7fe fc17 	bl	8001c14 <HAL_GetTick>
 80033e6:	60b8      	str	r0, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 80033e8:	e021      	b.n	800342e <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033f0:	d01d      	beq.n	800342e <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80033f2:	f7fe fc0f 	bl	8001c14 <HAL_GetTick>
 80033f6:	4602      	mov	r2, r0
 80033f8:	68bb      	ldr	r3, [r7, #8]
 80033fa:	1ad3      	subs	r3, r2, r3
 80033fc:	683a      	ldr	r2, [r7, #0]
 80033fe:	429a      	cmp	r2, r3
 8003400:	d302      	bcc.n	8003408 <HAL_ADC_PollForConversion+0x60>
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d112      	bne.n	800342e <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	681a      	ldr	r2, [r3, #0]
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	4013      	ands	r3, r2
 8003412:	2b00      	cmp	r3, #0
 8003414:	d10b      	bne.n	800342e <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800341a:	f043 0204 	orr.w	r2, r3, #4
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	659a      	str	r2, [r3, #88]	@ 0x58

          __HAL_UNLOCK(hadc);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2200      	movs	r2, #0
 8003426:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

          return HAL_TIMEOUT;
 800342a:	2303      	movs	r3, #3
 800342c:	e04f      	b.n	80034ce <HAL_ADC_PollForConversion+0x126>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	681a      	ldr	r2, [r3, #0]
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	4013      	ands	r3, r2
 8003438:	2b00      	cmp	r3, #0
 800343a:	d0d6      	beq.n	80033ea <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003440:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4618      	mov	r0, r3
 800344e:	f7ff fbd8 	bl	8002c02 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003452:	4603      	mov	r3, r0
 8003454:	2b00      	cmp	r3, #0
 8003456:	d031      	beq.n	80034bc <HAL_ADC_PollForConversion+0x114>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	7e9b      	ldrb	r3, [r3, #26]
 800345c:	2b00      	cmp	r3, #0
 800345e:	d12d      	bne.n	80034bc <HAL_ADC_PollForConversion+0x114>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f003 0308 	and.w	r3, r3, #8
 800346a:	2b08      	cmp	r3, #8
 800346c:	d126      	bne.n	80034bc <HAL_ADC_PollForConversion+0x114>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	4618      	mov	r0, r3
 8003474:	f7ff fced 	bl	8002e52 <LL_ADC_REG_IsConversionOngoing>
 8003478:	4603      	mov	r3, r0
 800347a:	2b00      	cmp	r3, #0
 800347c:	d112      	bne.n	80034a4 <HAL_ADC_PollForConversion+0xfc>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	685a      	ldr	r2, [r3, #4]
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f022 020c 	bic.w	r2, r2, #12
 800348c:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003492:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003496:	f023 0301 	bic.w	r3, r3, #1
 800349a:	f043 0201 	orr.w	r2, r3, #1
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	659a      	str	r2, [r3, #88]	@ 0x58
 80034a2:	e00b      	b.n	80034bc <HAL_ADC_PollForConversion+0x114>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034a8:	f043 0220 	orr.w	r2, r3, #32
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034b4:	f043 0201 	orr.w	r2, r3, #1
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	7e1b      	ldrb	r3, [r3, #24]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d103      	bne.n	80034cc <HAL_ADC_PollForConversion+0x124>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	220c      	movs	r2, #12
 80034ca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80034cc:	2300      	movs	r3, #0
}
 80034ce:	4618      	mov	r0, r3
 80034d0:	3710      	adds	r7, #16
 80034d2:	46bd      	mov	sp, r7
 80034d4:	bd80      	pop	{r7, pc}

080034d6 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80034d6:	b480      	push	{r7}
 80034d8:	b083      	sub	sp, #12
 80034da:	af00      	add	r7, sp, #0
 80034dc:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 80034e4:	4618      	mov	r0, r3
 80034e6:	370c      	adds	r7, #12
 80034e8:	46bd      	mov	sp, r7
 80034ea:	bc80      	pop	{r7}
 80034ec:	4770      	bx	lr

080034ee <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80034ee:	b580      	push	{r7, lr}
 80034f0:	b086      	sub	sp, #24
 80034f2:	af00      	add	r7, sp, #0
 80034f4:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80034f6:	2300      	movs	r3, #0
 80034f8:	617b      	str	r3, [r7, #20]
  uint32_t tmp_isr = hadc->Instance->ISR;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	613b      	str	r3, [r7, #16]
  uint32_t tmp_ier = hadc->Instance->IER;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 800350a:	693b      	ldr	r3, [r7, #16]
 800350c:	f003 0302 	and.w	r3, r3, #2
 8003510:	2b00      	cmp	r3, #0
 8003512:	d017      	beq.n	8003544 <HAL_ADC_IRQHandler+0x56>
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	f003 0302 	and.w	r3, r3, #2
 800351a:	2b00      	cmp	r3, #0
 800351c:	d012      	beq.n	8003544 <HAL_ADC_IRQHandler+0x56>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003522:	f003 0310 	and.w	r3, r3, #16
 8003526:	2b00      	cmp	r3, #0
 8003528:	d105      	bne.n	8003536 <HAL_ADC_IRQHandler+0x48>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800352e:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	659a      	str	r2, [r3, #88]	@ 0x58

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8003536:	6878      	ldr	r0, [r7, #4]
 8003538:	f000 fcd0 	bl	8003edc <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	2202      	movs	r2, #2
 8003542:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003544:	693b      	ldr	r3, [r7, #16]
 8003546:	f003 0304 	and.w	r3, r3, #4
 800354a:	2b00      	cmp	r3, #0
 800354c:	d004      	beq.n	8003558 <HAL_ADC_IRQHandler+0x6a>
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	f003 0304 	and.w	r3, r3, #4
 8003554:	2b00      	cmp	r3, #0
 8003556:	d109      	bne.n	800356c <HAL_ADC_IRQHandler+0x7e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003558:	693b      	ldr	r3, [r7, #16]
 800355a:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800355e:	2b00      	cmp	r3, #0
 8003560:	d051      	beq.n	8003606 <HAL_ADC_IRQHandler+0x118>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	f003 0308 	and.w	r3, r3, #8
 8003568:	2b00      	cmp	r3, #0
 800356a:	d04c      	beq.n	8003606 <HAL_ADC_IRQHandler+0x118>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003570:	f003 0310 	and.w	r3, r3, #16
 8003574:	2b00      	cmp	r3, #0
 8003576:	d105      	bne.n	8003584 <HAL_ADC_IRQHandler+0x96>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800357c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4618      	mov	r0, r3
 800358a:	f7ff fb3a 	bl	8002c02 <LL_ADC_REG_IsTriggerSourceSWStart>
 800358e:	4603      	mov	r3, r0
 8003590:	2b00      	cmp	r3, #0
 8003592:	d031      	beq.n	80035f8 <HAL_ADC_IRQHandler+0x10a>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	7e9b      	ldrb	r3, [r3, #26]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d12d      	bne.n	80035f8 <HAL_ADC_IRQHandler+0x10a>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f003 0308 	and.w	r3, r3, #8
 80035a6:	2b08      	cmp	r3, #8
 80035a8:	d126      	bne.n	80035f8 <HAL_ADC_IRQHandler+0x10a>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4618      	mov	r0, r3
 80035b0:	f7ff fc4f 	bl	8002e52 <LL_ADC_REG_IsConversionOngoing>
 80035b4:	4603      	mov	r3, r0
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d112      	bne.n	80035e0 <HAL_ADC_IRQHandler+0xf2>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	685a      	ldr	r2, [r3, #4]
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f022 020c 	bic.w	r2, r2, #12
 80035c8:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035ce:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80035d2:	f023 0301 	bic.w	r3, r3, #1
 80035d6:	f043 0201 	orr.w	r2, r3, #1
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	659a      	str	r2, [r3, #88]	@ 0x58
 80035de:	e00b      	b.n	80035f8 <HAL_ADC_IRQHandler+0x10a>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035e4:	f043 0220 	orr.w	r2, r3, #32
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035f0:	f043 0201 	orr.w	r2, r3, #1
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	65da      	str	r2, [r3, #92]	@ 0x5c
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80035f8:	6878      	ldr	r0, [r7, #4]
 80035fa:	f000 f892 	bl	8003722 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	220c      	movs	r2, #12
 8003604:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8003606:	693b      	ldr	r3, [r7, #16]
 8003608:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800360c:	2b00      	cmp	r3, #0
 800360e:	d011      	beq.n	8003634 <HAL_ADC_IRQHandler+0x146>
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003616:	2b00      	cmp	r3, #0
 8003618:	d00c      	beq.n	8003634 <HAL_ADC_IRQHandler+0x146>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800361e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003626:	6878      	ldr	r0, [r7, #4]
 8003628:	f000 f884 	bl	8003734 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	2280      	movs	r2, #128	@ 0x80
 8003632:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8003634:	693b      	ldr	r3, [r7, #16]
 8003636:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800363a:	2b00      	cmp	r3, #0
 800363c:	d012      	beq.n	8003664 <HAL_ADC_IRQHandler+0x176>
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003644:	2b00      	cmp	r3, #0
 8003646:	d00d      	beq.n	8003664 <HAL_ADC_IRQHandler+0x176>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800364c:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8003654:	6878      	ldr	r0, [r7, #4]
 8003656:	f000 fc2f 	bl	8003eb8 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003662:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8003664:	693b      	ldr	r3, [r7, #16]
 8003666:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800366a:	2b00      	cmp	r3, #0
 800366c:	d012      	beq.n	8003694 <HAL_ADC_IRQHandler+0x1a6>
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003674:	2b00      	cmp	r3, #0
 8003676:	d00d      	beq.n	8003694 <HAL_ADC_IRQHandler+0x1a6>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800367c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8003684:	6878      	ldr	r0, [r7, #4]
 8003686:	f000 fc20 	bl	8003eca <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003692:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8003694:	693b      	ldr	r3, [r7, #16]
 8003696:	f003 0310 	and.w	r3, r3, #16
 800369a:	2b00      	cmp	r3, #0
 800369c:	d02b      	beq.n	80036f6 <HAL_ADC_IRQHandler+0x208>
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	f003 0310 	and.w	r3, r3, #16
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d026      	beq.n	80036f6 <HAL_ADC_IRQHandler+0x208>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d102      	bne.n	80036b6 <HAL_ADC_IRQHandler+0x1c8>
    {
      overrun_error = 1UL;
 80036b0:	2301      	movs	r3, #1
 80036b2:	617b      	str	r3, [r7, #20]
 80036b4:	e009      	b.n	80036ca <HAL_ADC_IRQHandler+0x1dc>
    }
    else
    {
      /* Check DMA configuration */
      if (LL_ADC_REG_GetDMATransfer(hadc->Instance) != LL_ADC_REG_DMA_TRANSFER_NONE)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4618      	mov	r0, r3
 80036bc:	f7ff faf9 	bl	8002cb2 <LL_ADC_REG_GetDMATransfer>
 80036c0:	4603      	mov	r3, r0
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d001      	beq.n	80036ca <HAL_ADC_IRQHandler+0x1dc>
      {
        overrun_error = 1UL;
 80036c6:	2301      	movs	r3, #1
 80036c8:	617b      	str	r3, [r7, #20]
      }
    }

    if (overrun_error == 1UL)
 80036ca:	697b      	ldr	r3, [r7, #20]
 80036cc:	2b01      	cmp	r3, #1
 80036ce:	d10e      	bne.n	80036ee <HAL_ADC_IRQHandler+0x200>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036d4:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036e0:	f043 0202 	orr.w	r2, r3, #2
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	65da      	str	r2, [r3, #92]	@ 0x5c
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80036e8:	6878      	ldr	r0, [r7, #4]
 80036ea:	f000 f82c 	bl	8003746 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	2210      	movs	r2, #16
 80036f4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check channel configuration ready flag ========== */
  if (((tmp_isr & ADC_FLAG_CCRDY) == ADC_FLAG_CCRDY) && ((tmp_ier & ADC_IT_CCRDY) == ADC_IT_CCRDY))
 80036f6:	693b      	ldr	r3, [r7, #16]
 80036f8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d00c      	beq.n	800371a <HAL_ADC_IRQHandler+0x22c>
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003706:	2b00      	cmp	r3, #0
 8003708:	d007      	beq.n	800371a <HAL_ADC_IRQHandler+0x22c>
  {
    /* Channel configuration ready callback */
    HAL_ADCEx_ChannelConfigReadyCallback(hadc);
 800370a:	6878      	ldr	r0, [r7, #4]
 800370c:	f000 fbef 	bl	8003eee <HAL_ADCEx_ChannelConfigReadyCallback>

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_CCRDY);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003718:	601a      	str	r2, [r3, #0]
  }
}
 800371a:	bf00      	nop
 800371c:	3718      	adds	r7, #24
 800371e:	46bd      	mov	sp, r7
 8003720:	bd80      	pop	{r7, pc}

08003722 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003722:	b480      	push	{r7}
 8003724:	b083      	sub	sp, #12
 8003726:	af00      	add	r7, sp, #0
 8003728:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800372a:	bf00      	nop
 800372c:	370c      	adds	r7, #12
 800372e:	46bd      	mov	sp, r7
 8003730:	bc80      	pop	{r7}
 8003732:	4770      	bx	lr

08003734 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8003734:	b480      	push	{r7}
 8003736:	b083      	sub	sp, #12
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 800373c:	bf00      	nop
 800373e:	370c      	adds	r7, #12
 8003740:	46bd      	mov	sp, r7
 8003742:	bc80      	pop	{r7}
 8003744:	4770      	bx	lr

08003746 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003746:	b480      	push	{r7}
 8003748:	b083      	sub	sp, #12
 800374a:	af00      	add	r7, sp, #0
 800374c:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800374e:	bf00      	nop
 8003750:	370c      	adds	r7, #12
 8003752:	46bd      	mov	sp, r7
 8003754:	bc80      	pop	{r7}
 8003756:	4770      	bx	lr

08003758 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b088      	sub	sp, #32
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
 8003760:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003762:	2300      	movs	r3, #0
 8003764:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003766:	2300      	movs	r3, #0
 8003768:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(pConfig->Channel));
  assert_param(IS_ADC_SAMPLING_TIME_COMMON(pConfig->SamplingTime));

  if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	691b      	ldr	r3, [r3, #16]
 800376e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003778:	2b01      	cmp	r3, #1
 800377a:	d101      	bne.n	8003780 <HAL_ADC_ConfigChannel+0x28>
 800377c:	2302      	movs	r3, #2
 800377e:	e110      	b.n	80039a2 <HAL_ADC_ConfigChannel+0x24a>
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2201      	movs	r2, #1
 8003784:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4618      	mov	r0, r3
 800378e:	f7ff fb60 	bl	8002e52 <LL_ADC_REG_IsConversionOngoing>
 8003792:	4603      	mov	r3, r0
 8003794:	2b00      	cmp	r3, #0
 8003796:	f040 80f7 	bne.w	8003988 <HAL_ADC_ConfigChannel+0x230>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	2b02      	cmp	r3, #2
 80037a0:	f000 80b1 	beq.w	8003906 <HAL_ADC_ConfigChannel+0x1ae>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	691b      	ldr	r3, [r3, #16]
 80037a8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80037ac:	d004      	beq.n	80037b8 <HAL_ADC_ConfigChannel+0x60>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80037b2:	4a7e      	ldr	r2, [pc, #504]	@ (80039ac <HAL_ADC_ConfigChannel+0x254>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d108      	bne.n	80037ca <HAL_ADC_ConfigChannel+0x72>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681a      	ldr	r2, [r3, #0]
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4619      	mov	r1, r3
 80037c2:	4610      	mov	r0, r2
 80037c4:	f7ff fa50 	bl	8002c68 <LL_ADC_REG_SetSequencerChAdd>
 80037c8:	e041      	b.n	800384e <HAL_ADC_ConfigChannel+0xf6>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	685b      	ldr	r3, [r3, #4]
 80037d2:	f003 031f 	and.w	r3, r3, #31
 80037d6:	210f      	movs	r1, #15
 80037d8:	fa01 f303 	lsl.w	r3, r1, r3
 80037dc:	43db      	mvns	r3, r3
 80037de:	401a      	ands	r2, r3
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f3c3 0311 	ubfx	r3, r3, #0, #18
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d105      	bne.n	80037f8 <HAL_ADC_ConfigChannel+0xa0>
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	0e9b      	lsrs	r3, r3, #26
 80037f2:	f003 031f 	and.w	r3, r3, #31
 80037f6:	e011      	b.n	800381c <HAL_ADC_ConfigChannel+0xc4>
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037fe:	693b      	ldr	r3, [r7, #16]
 8003800:	fa93 f3a3 	rbit	r3, r3
 8003804:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800380a:	697b      	ldr	r3, [r7, #20]
 800380c:	2b00      	cmp	r3, #0
 800380e:	d101      	bne.n	8003814 <HAL_ADC_ConfigChannel+0xbc>
  {
    return 32U;
 8003810:	2320      	movs	r3, #32
 8003812:	e003      	b.n	800381c <HAL_ADC_ConfigChannel+0xc4>
  }
  return __builtin_clz(value);
 8003814:	697b      	ldr	r3, [r7, #20]
 8003816:	fab3 f383 	clz	r3, r3
 800381a:	b2db      	uxtb	r3, r3
 800381c:	6839      	ldr	r1, [r7, #0]
 800381e:	6849      	ldr	r1, [r1, #4]
 8003820:	f001 011f 	and.w	r1, r1, #31
 8003824:	408b      	lsls	r3, r1
 8003826:	431a      	orrs	r2, r3
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	685b      	ldr	r3, [r3, #4]
 8003830:	089b      	lsrs	r3, r3, #2
 8003832:	1c5a      	adds	r2, r3, #1
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	69db      	ldr	r3, [r3, #28]
 8003838:	429a      	cmp	r2, r3
 800383a:	d808      	bhi.n	800384e <HAL_ADC_ConfigChannel+0xf6>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6818      	ldr	r0, [r3, #0]
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	6859      	ldr	r1, [r3, #4]
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	461a      	mov	r2, r3
 800384a:	f7ff f9ec 	bl	8002c26 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6818      	ldr	r0, [r3, #0]
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	6819      	ldr	r1, [r3, #0]
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	689b      	ldr	r3, [r3, #8]
 800385a:	461a      	mov	r2, r3
 800385c:	f7ff fa36 	bl	8002ccc <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	2b00      	cmp	r3, #0
 8003866:	f280 8097 	bge.w	8003998 <HAL_ADC_ConfigChannel+0x240>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800386a:	4851      	ldr	r0, [pc, #324]	@ (80039b0 <HAL_ADC_ConfigChannel+0x258>)
 800386c:	f7ff f986 	bl	8002b7c <LL_ADC_GetCommonPathInternalCh>
 8003870:	61b8      	str	r0, [r7, #24]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4a4f      	ldr	r2, [pc, #316]	@ (80039b4 <HAL_ADC_ConfigChannel+0x25c>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d120      	bne.n	80038be <HAL_ADC_ConfigChannel+0x166>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800387c:	69bb      	ldr	r3, [r7, #24]
 800387e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003882:	2b00      	cmp	r3, #0
 8003884:	d11b      	bne.n	80038be <HAL_ADC_ConfigChannel+0x166>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003886:	69bb      	ldr	r3, [r7, #24]
 8003888:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800388c:	4619      	mov	r1, r3
 800388e:	4848      	ldr	r0, [pc, #288]	@ (80039b0 <HAL_ADC_ConfigChannel+0x258>)
 8003890:	f7ff f962 	bl	8002b58 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003894:	4b48      	ldr	r3, [pc, #288]	@ (80039b8 <HAL_ADC_ConfigChannel+0x260>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	099b      	lsrs	r3, r3, #6
 800389a:	4a48      	ldr	r2, [pc, #288]	@ (80039bc <HAL_ADC_ConfigChannel+0x264>)
 800389c:	fba2 2303 	umull	r2, r3, r2, r3
 80038a0:	099b      	lsrs	r3, r3, #6
 80038a2:	1c5a      	adds	r2, r3, #1
 80038a4:	4613      	mov	r3, r2
 80038a6:	005b      	lsls	r3, r3, #1
 80038a8:	4413      	add	r3, r2
 80038aa:	009b      	lsls	r3, r3, #2
 80038ac:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80038ae:	e002      	b.n	80038b6 <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 80038b0:	68bb      	ldr	r3, [r7, #8]
 80038b2:	3b01      	subs	r3, #1
 80038b4:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80038b6:	68bb      	ldr	r3, [r7, #8]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d1f9      	bne.n	80038b0 <HAL_ADC_ConfigChannel+0x158>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80038bc:	e06c      	b.n	8003998 <HAL_ADC_ConfigChannel+0x240>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4a3f      	ldr	r2, [pc, #252]	@ (80039c0 <HAL_ADC_ConfigChannel+0x268>)
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d10c      	bne.n	80038e2 <HAL_ADC_ConfigChannel+0x18a>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80038c8:	69bb      	ldr	r3, [r7, #24]
 80038ca:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d107      	bne.n	80038e2 <HAL_ADC_ConfigChannel+0x18a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80038d2:	69bb      	ldr	r3, [r7, #24]
 80038d4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80038d8:	4619      	mov	r1, r3
 80038da:	4835      	ldr	r0, [pc, #212]	@ (80039b0 <HAL_ADC_ConfigChannel+0x258>)
 80038dc:	f7ff f93c 	bl	8002b58 <LL_ADC_SetCommonPathInternalCh>
 80038e0:	e05a      	b.n	8003998 <HAL_ADC_ConfigChannel+0x240>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4a37      	ldr	r2, [pc, #220]	@ (80039c4 <HAL_ADC_ConfigChannel+0x26c>)
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d155      	bne.n	8003998 <HAL_ADC_ConfigChannel+0x240>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80038ec:	69bb      	ldr	r3, [r7, #24]
 80038ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d150      	bne.n	8003998 <HAL_ADC_ConfigChannel+0x240>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80038f6:	69bb      	ldr	r3, [r7, #24]
 80038f8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80038fc:	4619      	mov	r1, r3
 80038fe:	482c      	ldr	r0, [pc, #176]	@ (80039b0 <HAL_ADC_ConfigChannel+0x258>)
 8003900:	f7ff f92a 	bl	8002b58 <LL_ADC_SetCommonPathInternalCh>
 8003904:	e048      	b.n	8003998 <HAL_ADC_ConfigChannel+0x240>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	691b      	ldr	r3, [r3, #16]
 800390a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800390e:	d004      	beq.n	800391a <HAL_ADC_ConfigChannel+0x1c2>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003914:	4a25      	ldr	r2, [pc, #148]	@ (80039ac <HAL_ADC_ConfigChannel+0x254>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d107      	bne.n	800392a <HAL_ADC_ConfigChannel+0x1d2>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681a      	ldr	r2, [r3, #0]
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4619      	mov	r1, r3
 8003924:	4610      	mov	r0, r2
 8003926:	f7ff f9b1 	bl	8002c8c <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	2b00      	cmp	r3, #0
 8003930:	da32      	bge.n	8003998 <HAL_ADC_ConfigChannel+0x240>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003932:	481f      	ldr	r0, [pc, #124]	@ (80039b0 <HAL_ADC_ConfigChannel+0x258>)
 8003934:	f7ff f922 	bl	8002b7c <LL_ADC_GetCommonPathInternalCh>
 8003938:	61b8      	str	r0, [r7, #24]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	4a1d      	ldr	r2, [pc, #116]	@ (80039b4 <HAL_ADC_ConfigChannel+0x25c>)
 8003940:	4293      	cmp	r3, r2
 8003942:	d107      	bne.n	8003954 <HAL_ADC_ConfigChannel+0x1fc>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003944:	69bb      	ldr	r3, [r7, #24]
 8003946:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800394a:	4619      	mov	r1, r3
 800394c:	4818      	ldr	r0, [pc, #96]	@ (80039b0 <HAL_ADC_ConfigChannel+0x258>)
 800394e:	f7ff f903 	bl	8002b58 <LL_ADC_SetCommonPathInternalCh>
 8003952:	e021      	b.n	8003998 <HAL_ADC_ConfigChannel+0x240>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4a19      	ldr	r2, [pc, #100]	@ (80039c0 <HAL_ADC_ConfigChannel+0x268>)
 800395a:	4293      	cmp	r3, r2
 800395c:	d107      	bne.n	800396e <HAL_ADC_ConfigChannel+0x216>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800395e:	69bb      	ldr	r3, [r7, #24]
 8003960:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003964:	4619      	mov	r1, r3
 8003966:	4812      	ldr	r0, [pc, #72]	@ (80039b0 <HAL_ADC_ConfigChannel+0x258>)
 8003968:	f7ff f8f6 	bl	8002b58 <LL_ADC_SetCommonPathInternalCh>
 800396c:	e014      	b.n	8003998 <HAL_ADC_ConfigChannel+0x240>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4a14      	ldr	r2, [pc, #80]	@ (80039c4 <HAL_ADC_ConfigChannel+0x26c>)
 8003974:	4293      	cmp	r3, r2
 8003976:	d10f      	bne.n	8003998 <HAL_ADC_ConfigChannel+0x240>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003978:	69bb      	ldr	r3, [r7, #24]
 800397a:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 800397e:	4619      	mov	r1, r3
 8003980:	480b      	ldr	r0, [pc, #44]	@ (80039b0 <HAL_ADC_ConfigChannel+0x258>)
 8003982:	f7ff f8e9 	bl	8002b58 <LL_ADC_SetCommonPathInternalCh>
 8003986:	e007      	b.n	8003998 <HAL_ADC_ConfigChannel+0x240>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800398c:	f043 0220 	orr.w	r2, r3, #32
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8003994:	2301      	movs	r3, #1
 8003996:	77fb      	strb	r3, [r7, #31]
  }

  __HAL_UNLOCK(hadc);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2200      	movs	r2, #0
 800399c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return tmp_hal_status;
 80039a0:	7ffb      	ldrb	r3, [r7, #31]
}
 80039a2:	4618      	mov	r0, r3
 80039a4:	3720      	adds	r7, #32
 80039a6:	46bd      	mov	sp, r7
 80039a8:	bd80      	pop	{r7, pc}
 80039aa:	bf00      	nop
 80039ac:	80000004 	.word	0x80000004
 80039b0:	40012708 	.word	0x40012708
 80039b4:	b0001000 	.word	0xb0001000
 80039b8:	20000000 	.word	0x20000000
 80039bc:	053e2d63 	.word	0x053e2d63
 80039c0:	b8004000 	.word	0xb8004000
 80039c4:	b4002000 	.word	0xb4002000

080039c8 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b084      	sub	sp, #16
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4618      	mov	r0, r3
 80039d6:	f7ff fa3c 	bl	8002e52 <LL_ADC_REG_IsConversionOngoing>
 80039da:	4603      	mov	r3, r0
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d033      	beq.n	8003a48 <ADC_ConversionStop+0x80>
  {
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4618      	mov	r0, r3
 80039e6:	f7ff f9fc 	bl	8002de2 <LL_ADC_IsDisableOngoing>
 80039ea:	4603      	mov	r3, r0
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d104      	bne.n	80039fa <ADC_ConversionStop+0x32>
    {
      /* Stop ADC group regular conversion */
      LL_ADC_REG_StopConversion(hadc->Instance);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4618      	mov	r0, r3
 80039f6:	f7ff fa19 	bl	8002e2c <LL_ADC_REG_StopConversion>
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80039fa:	f7fe f90b 	bl	8001c14 <HAL_GetTick>
 80039fe:	60f8      	str	r0, [r7, #12]

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8003a00:	e01b      	b.n	8003a3a <ADC_ConversionStop+0x72>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8003a02:	f7fe f907 	bl	8001c14 <HAL_GetTick>
 8003a06:	4602      	mov	r2, r0
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	1ad3      	subs	r3, r2, r3
 8003a0c:	2b02      	cmp	r3, #2
 8003a0e:	d914      	bls.n	8003a3a <ADC_ConversionStop+0x72>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	689b      	ldr	r3, [r3, #8]
 8003a16:	f003 0304 	and.w	r3, r3, #4
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d00d      	beq.n	8003a3a <ADC_ConversionStop+0x72>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a22:	f043 0210 	orr.w	r2, r3, #16
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a2e:	f043 0201 	orr.w	r2, r3, #1
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8003a36:	2301      	movs	r3, #1
 8003a38:	e007      	b.n	8003a4a <ADC_ConversionStop+0x82>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	689b      	ldr	r3, [r3, #8]
 8003a40:	f003 0304 	and.w	r3, r3, #4
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d1dc      	bne.n	8003a02 <ADC_ConversionStop+0x3a>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8003a48:	2300      	movs	r3, #0
}
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	3710      	adds	r7, #16
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	bd80      	pop	{r7, pc}
	...

08003a54 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b084      	sub	sp, #16
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4618      	mov	r0, r3
 8003a66:	f7ff f9aa 	bl	8002dbe <LL_ADC_IsEnabled>
 8003a6a:	4603      	mov	r3, r0
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d169      	bne.n	8003b44 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	689a      	ldr	r2, [r3, #8]
 8003a76:	4b36      	ldr	r3, [pc, #216]	@ (8003b50 <ADC_Enable+0xfc>)
 8003a78:	4013      	ands	r3, r2
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d00d      	beq.n	8003a9a <ADC_Enable+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a82:	f043 0210 	orr.w	r2, r3, #16
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a8e:	f043 0201 	orr.w	r2, r3, #1
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8003a96:	2301      	movs	r3, #1
 8003a98:	e055      	b.n	8003b46 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	f7ff f967 	bl	8002d72 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) 
 8003aa4:	482b      	ldr	r0, [pc, #172]	@ (8003b54 <ADC_Enable+0x100>)
 8003aa6:	f7ff f869 	bl	8002b7c <LL_ADC_GetCommonPathInternalCh>
 8003aaa:	4603      	mov	r3, r0
 8003aac:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d00f      	beq.n	8003ad4 <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003ab4:	4b28      	ldr	r3, [pc, #160]	@ (8003b58 <ADC_Enable+0x104>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	099b      	lsrs	r3, r3, #6
 8003aba:	4a28      	ldr	r2, [pc, #160]	@ (8003b5c <ADC_Enable+0x108>)
 8003abc:	fba2 2303 	umull	r2, r3, r2, r3
 8003ac0:	099b      	lsrs	r3, r3, #6
 8003ac2:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
 8003ac4:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003ac6:	e002      	b.n	8003ace <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8003ac8:	68bb      	ldr	r3, [r7, #8]
 8003aca:	3b01      	subs	r3, #1
 8003acc:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003ace:	68bb      	ldr	r3, [r7, #8]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d1f9      	bne.n	8003ac8 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	7e5b      	ldrb	r3, [r3, #25]
 8003ad8:	2b01      	cmp	r3, #1
 8003ada:	d033      	beq.n	8003b44 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8003adc:	f7fe f89a 	bl	8001c14 <HAL_GetTick>
 8003ae0:	60f8      	str	r0, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003ae2:	e028      	b.n	8003b36 <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4618      	mov	r0, r3
 8003aea:	f7ff f968 	bl	8002dbe <LL_ADC_IsEnabled>
 8003aee:	4603      	mov	r3, r0
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d104      	bne.n	8003afe <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4618      	mov	r0, r3
 8003afa:	f7ff f93a 	bl	8002d72 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003afe:	f7fe f889 	bl	8001c14 <HAL_GetTick>
 8003b02:	4602      	mov	r2, r0
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	1ad3      	subs	r3, r2, r3
 8003b08:	2b02      	cmp	r3, #2
 8003b0a:	d914      	bls.n	8003b36 <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f003 0301 	and.w	r3, r3, #1
 8003b16:	2b01      	cmp	r3, #1
 8003b18:	d00d      	beq.n	8003b36 <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b1e:	f043 0210 	orr.w	r2, r3, #16
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	659a      	str	r2, [r3, #88]	@ 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b2a:	f043 0201 	orr.w	r2, r3, #1
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	65da      	str	r2, [r3, #92]	@ 0x5c

            return HAL_ERROR;
 8003b32:	2301      	movs	r3, #1
 8003b34:	e007      	b.n	8003b46 <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f003 0301 	and.w	r3, r3, #1
 8003b40:	2b01      	cmp	r3, #1
 8003b42:	d1cf      	bne.n	8003ae4 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003b44:	2300      	movs	r3, #0
}
 8003b46:	4618      	mov	r0, r3
 8003b48:	3710      	adds	r7, #16
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	bd80      	pop	{r7, pc}
 8003b4e:	bf00      	nop
 8003b50:	80000017 	.word	0x80000017
 8003b54:	40012708 	.word	0x40012708
 8003b58:	20000000 	.word	0x20000000
 8003b5c:	053e2d63 	.word	0x053e2d63

08003b60 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b084      	sub	sp, #16
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	f7ff f938 	bl	8002de2 <LL_ADC_IsDisableOngoing>
 8003b72:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4618      	mov	r0, r3
 8003b7a:	f7ff f920 	bl	8002dbe <LL_ADC_IsEnabled>
 8003b7e:	4603      	mov	r3, r0
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d047      	beq.n	8003c14 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d144      	bne.n	8003c14 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	689b      	ldr	r3, [r3, #8]
 8003b90:	f003 0305 	and.w	r3, r3, #5
 8003b94:	2b01      	cmp	r3, #1
 8003b96:	d10c      	bne.n	8003bb2 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	f7ff f8fb 	bl	8002d98 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	2203      	movs	r2, #3
 8003ba8:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003baa:	f7fe f833 	bl	8001c14 <HAL_GetTick>
 8003bae:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003bb0:	e029      	b.n	8003c06 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bb6:	f043 0210 	orr.w	r2, r3, #16
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	659a      	str	r2, [r3, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bc2:	f043 0201 	orr.w	r2, r3, #1
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 8003bca:	2301      	movs	r3, #1
 8003bcc:	e023      	b.n	8003c16 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003bce:	f7fe f821 	bl	8001c14 <HAL_GetTick>
 8003bd2:	4602      	mov	r2, r0
 8003bd4:	68bb      	ldr	r3, [r7, #8]
 8003bd6:	1ad3      	subs	r3, r2, r3
 8003bd8:	2b02      	cmp	r3, #2
 8003bda:	d914      	bls.n	8003c06 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	689b      	ldr	r3, [r3, #8]
 8003be2:	f003 0301 	and.w	r3, r3, #1
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d00d      	beq.n	8003c06 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bee:	f043 0210 	orr.w	r2, r3, #16
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bfa:	f043 0201 	orr.w	r2, r3, #1
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8003c02:	2301      	movs	r3, #1
 8003c04:	e007      	b.n	8003c16 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	689b      	ldr	r3, [r3, #8]
 8003c0c:	f003 0301 	and.w	r3, r3, #1
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d1dc      	bne.n	8003bce <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003c14:	2300      	movs	r3, #0
}
 8003c16:	4618      	mov	r0, r3
 8003c18:	3710      	adds	r7, #16
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	bd80      	pop	{r7, pc}

08003c1e <LL_ADC_SetCalibrationFactor>:
{
 8003c1e:	b480      	push	{r7}
 8003c20:	b083      	sub	sp, #12
 8003c22:	af00      	add	r7, sp, #0
 8003c24:	6078      	str	r0, [r7, #4]
 8003c26:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CALFACT,
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003c2e:	f023 027f 	bic.w	r2, r3, #127	@ 0x7f
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	431a      	orrs	r2, r3
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
}
 8003c3c:	bf00      	nop
 8003c3e:	370c      	adds	r7, #12
 8003c40:	46bd      	mov	sp, r7
 8003c42:	bc80      	pop	{r7}
 8003c44:	4770      	bx	lr

08003c46 <LL_ADC_GetCalibrationFactor>:
{
 8003c46:	b480      	push	{r7}
 8003c48:	b083      	sub	sp, #12
 8003c4a:	af00      	add	r7, sp, #0
 8003c4c:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003c54:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 8003c58:	4618      	mov	r0, r3
 8003c5a:	370c      	adds	r7, #12
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	bc80      	pop	{r7}
 8003c60:	4770      	bx	lr

08003c62 <LL_ADC_Enable>:
{
 8003c62:	b480      	push	{r7}
 8003c64:	b083      	sub	sp, #12
 8003c66:	af00      	add	r7, sp, #0
 8003c68:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	689b      	ldr	r3, [r3, #8]
 8003c6e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003c72:	f023 0317 	bic.w	r3, r3, #23
 8003c76:	f043 0201 	orr.w	r2, r3, #1
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	609a      	str	r2, [r3, #8]
}
 8003c7e:	bf00      	nop
 8003c80:	370c      	adds	r7, #12
 8003c82:	46bd      	mov	sp, r7
 8003c84:	bc80      	pop	{r7}
 8003c86:	4770      	bx	lr

08003c88 <LL_ADC_Disable>:
{
 8003c88:	b480      	push	{r7}
 8003c8a:	b083      	sub	sp, #12
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	689b      	ldr	r3, [r3, #8]
 8003c94:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003c98:	f023 0317 	bic.w	r3, r3, #23
 8003c9c:	f043 0202 	orr.w	r2, r3, #2
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	609a      	str	r2, [r3, #8]
}
 8003ca4:	bf00      	nop
 8003ca6:	370c      	adds	r7, #12
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	bc80      	pop	{r7}
 8003cac:	4770      	bx	lr

08003cae <LL_ADC_IsEnabled>:
{
 8003cae:	b480      	push	{r7}
 8003cb0:	b083      	sub	sp, #12
 8003cb2:	af00      	add	r7, sp, #0
 8003cb4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	689b      	ldr	r3, [r3, #8]
 8003cba:	f003 0301 	and.w	r3, r3, #1
 8003cbe:	2b01      	cmp	r3, #1
 8003cc0:	d101      	bne.n	8003cc6 <LL_ADC_IsEnabled+0x18>
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	e000      	b.n	8003cc8 <LL_ADC_IsEnabled+0x1a>
 8003cc6:	2300      	movs	r3, #0
}
 8003cc8:	4618      	mov	r0, r3
 8003cca:	370c      	adds	r7, #12
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	bc80      	pop	{r7}
 8003cd0:	4770      	bx	lr

08003cd2 <LL_ADC_StartCalibration>:
{
 8003cd2:	b480      	push	{r7}
 8003cd4:	b083      	sub	sp, #12
 8003cd6:	af00      	add	r7, sp, #0
 8003cd8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	689b      	ldr	r3, [r3, #8]
 8003cde:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003ce2:	f023 0317 	bic.w	r3, r3, #23
 8003ce6:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	609a      	str	r2, [r3, #8]
}
 8003cee:	bf00      	nop
 8003cf0:	370c      	adds	r7, #12
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	bc80      	pop	{r7}
 8003cf6:	4770      	bx	lr

08003cf8 <LL_ADC_IsCalibrationOnGoing>:
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	b083      	sub	sp, #12
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	689b      	ldr	r3, [r3, #8]
 8003d04:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003d08:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003d0c:	d101      	bne.n	8003d12 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8003d0e:	2301      	movs	r3, #1
 8003d10:	e000      	b.n	8003d14 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8003d12:	2300      	movs	r3, #0
}
 8003d14:	4618      	mov	r0, r3
 8003d16:	370c      	adds	r7, #12
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	bc80      	pop	{r7}
 8003d1c:	4770      	bx	lr

08003d1e <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 8003d1e:	b580      	push	{r7, lr}
 8003d20:	b088      	sub	sp, #32
 8003d22:	af00      	add	r7, sp, #0
 8003d24:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8003d26:	2300      	movs	r3, #0
 8003d28:	60bb      	str	r3, [r7, #8]
  uint32_t backup_setting_cfgr1;
  uint32_t calibration_index;
  uint32_t calibration_factor_accumulated = 0;
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003d34:	2b01      	cmp	r3, #1
 8003d36:	d101      	bne.n	8003d3c <HAL_ADCEx_Calibration_Start+0x1e>
 8003d38:	2302      	movs	r3, #2
 8003d3a:	e0b9      	b.n	8003eb0 <HAL_ADCEx_Calibration_Start+0x192>
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2201      	movs	r2, #1
 8003d40:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003d44:	6878      	ldr	r0, [r7, #4]
 8003d46:	f7ff ff0b 	bl	8003b60 <ADC_Disable>
 8003d4a:	4603      	mov	r3, r0
 8003d4c:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	4618      	mov	r0, r3
 8003d54:	f7ff ffab 	bl	8003cae <LL_ADC_IsEnabled>
 8003d58:	4603      	mov	r3, r0
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	f040 809d 	bne.w	8003e9a <HAL_ADCEx_Calibration_Start+0x17c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d64:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8003d68:	f043 0202 	orr.w	r2, r3, #2
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Note: Specificity of this STM32 series: Calibration factor is          */
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	68da      	ldr	r2, [r3, #12]
 8003d76:	f248 0303 	movw	r3, #32771	@ 0x8003
 8003d7a:	4013      	ands	r3, r2
 8003d7c:	613b      	str	r3, [r7, #16]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	68db      	ldr	r3, [r3, #12]
 8003d84:	687a      	ldr	r2, [r7, #4]
 8003d86:	6812      	ldr	r2, [r2, #0]
 8003d88:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003d8c:	f023 0303 	bic.w	r3, r3, #3
 8003d90:	60d3      	str	r3, [r2, #12]

    /* ADC calibration procedure */
    /* Note: Perform an averaging of 8 calibrations for optimized accuracy */
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8003d92:	2300      	movs	r3, #0
 8003d94:	61fb      	str	r3, [r7, #28]
 8003d96:	e02e      	b.n	8003df6 <HAL_ADCEx_Calibration_Start+0xd8>
    {
      /* Start ADC calibration */
      LL_ADC_StartCalibration(hadc->Instance);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	f7ff ff98 	bl	8003cd2 <LL_ADC_StartCalibration>

      /* Wait for calibration completion */
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003da2:	e014      	b.n	8003dce <HAL_ADCEx_Calibration_Start+0xb0>
      {
        wait_loop_index++;
 8003da4:	68bb      	ldr	r3, [r7, #8]
 8003da6:	3301      	adds	r3, #1
 8003da8:	60bb      	str	r3, [r7, #8]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003daa:	68bb      	ldr	r3, [r7, #8]
 8003dac:	f5b3 3f2e 	cmp.w	r3, #178176	@ 0x2b800
 8003db0:	d30d      	bcc.n	8003dce <HAL_ADCEx_Calibration_Start+0xb0>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003db6:	f023 0312 	bic.w	r3, r3, #18
 8003dba:	f043 0210 	orr.w	r2, r3, #16
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	659a      	str	r2, [r3, #88]	@ 0x58
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          __HAL_UNLOCK(hadc);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

          return HAL_ERROR;
 8003dca:	2301      	movs	r3, #1
 8003dcc:	e070      	b.n	8003eb0 <HAL_ADCEx_Calibration_Start+0x192>
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	f7ff ff90 	bl	8003cf8 <LL_ADC_IsCalibrationOnGoing>
 8003dd8:	4603      	mov	r3, r0
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d1e2      	bne.n	8003da4 <HAL_ADCEx_Calibration_Start+0x86>
        }
      }

      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	4618      	mov	r0, r3
 8003de4:	f7ff ff2f 	bl	8003c46 <LL_ADC_GetCalibrationFactor>
 8003de8:	4602      	mov	r2, r0
 8003dea:	69bb      	ldr	r3, [r7, #24]
 8003dec:	4413      	add	r3, r2
 8003dee:	61bb      	str	r3, [r7, #24]
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8003df0:	69fb      	ldr	r3, [r7, #28]
 8003df2:	3301      	adds	r3, #1
 8003df4:	61fb      	str	r3, [r7, #28]
 8003df6:	69fb      	ldr	r3, [r7, #28]
 8003df8:	2b07      	cmp	r3, #7
 8003dfa:	d9cd      	bls.n	8003d98 <HAL_ADCEx_Calibration_Start+0x7a>
    }
    /* Compute average */
    calibration_factor_accumulated /= calibration_index;
 8003dfc:	69ba      	ldr	r2, [r7, #24]
 8003dfe:	69fb      	ldr	r3, [r7, #28]
 8003e00:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e04:	61bb      	str	r3, [r7, #24]
    /* Apply calibration factor */
    LL_ADC_Enable(hadc->Instance);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	f7ff ff29 	bl	8003c62 <LL_ADC_Enable>
    LL_ADC_SetCalibrationFactor(hadc->Instance, calibration_factor_accumulated);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	69b9      	ldr	r1, [r7, #24]
 8003e16:	4618      	mov	r0, r3
 8003e18:	f7ff ff01 	bl	8003c1e <LL_ADC_SetCalibrationFactor>
    LL_ADC_Disable(hadc->Instance);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4618      	mov	r0, r3
 8003e22:	f7ff ff31 	bl	8003c88 <LL_ADC_Disable>

    /* Wait for ADC effectively disabled before changing configuration */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003e26:	f7fd fef5 	bl	8001c14 <HAL_GetTick>
 8003e2a:	60f8      	str	r0, [r7, #12]

    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003e2c:	e01c      	b.n	8003e68 <HAL_ADCEx_Calibration_Start+0x14a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003e2e:	f7fd fef1 	bl	8001c14 <HAL_GetTick>
 8003e32:	4602      	mov	r2, r0
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	1ad3      	subs	r3, r2, r3
 8003e38:	2b02      	cmp	r3, #2
 8003e3a:	d915      	bls.n	8003e68 <HAL_ADCEx_Calibration_Start+0x14a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	4618      	mov	r0, r3
 8003e42:	f7ff ff34 	bl	8003cae <LL_ADC_IsEnabled>
 8003e46:	4603      	mov	r3, r0
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d00d      	beq.n	8003e68 <HAL_ADCEx_Calibration_Start+0x14a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e50:	f043 0210 	orr.w	r2, r3, #16
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e5c:	f043 0201 	orr.w	r2, r3, #1
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8003e64:	2301      	movs	r3, #1
 8003e66:	e023      	b.n	8003eb0 <HAL_ADCEx_Calibration_Start+0x192>
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	f7ff ff1e 	bl	8003cae <LL_ADC_IsEnabled>
 8003e72:	4603      	mov	r3, r0
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d1da      	bne.n	8003e2e <HAL_ADCEx_Calibration_Start+0x110>
        }
      }
    }

    /* Restore configuration after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	68d9      	ldr	r1, [r3, #12]
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	693a      	ldr	r2, [r7, #16]
 8003e84:	430a      	orrs	r2, r1
 8003e86:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e8c:	f023 0303 	bic.w	r3, r3, #3
 8003e90:	f043 0201 	orr.w	r2, r3, #1
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	659a      	str	r2, [r3, #88]	@ 0x58
 8003e98:	e005      	b.n	8003ea6 <HAL_ADCEx_Calibration_Start+0x188>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e9e:	f043 0210 	orr.w	r2, r3, #16
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return tmp_hal_status;
 8003eae:	7dfb      	ldrb	r3, [r7, #23]
}
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	3720      	adds	r7, #32
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	bd80      	pop	{r7, pc}

08003eb8 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8003eb8:	b480      	push	{r7}
 8003eba:	b083      	sub	sp, #12
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8003ec0:	bf00      	nop
 8003ec2:	370c      	adds	r7, #12
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	bc80      	pop	{r7}
 8003ec8:	4770      	bx	lr

08003eca <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8003eca:	b480      	push	{r7}
 8003ecc:	b083      	sub	sp, #12
 8003ece:	af00      	add	r7, sp, #0
 8003ed0:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8003ed2:	bf00      	nop
 8003ed4:	370c      	adds	r7, #12
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	bc80      	pop	{r7}
 8003eda:	4770      	bx	lr

08003edc <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8003edc:	b480      	push	{r7}
 8003ede:	b083      	sub	sp, #12
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8003ee4:	bf00      	nop
 8003ee6:	370c      	adds	r7, #12
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	bc80      	pop	{r7}
 8003eec:	4770      	bx	lr

08003eee <HAL_ADCEx_ChannelConfigReadyCallback>:
  * @brief  ADC channel configuration ready callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_ChannelConfigReadyCallback(ADC_HandleTypeDef *hadc)
{
 8003eee:	b480      	push	{r7}
 8003ef0:	b083      	sub	sp, #12
 8003ef2:	af00      	add	r7, sp, #0
 8003ef4:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_ChannelConfigReadyCallback must be implemented in the user file.
  */
}
 8003ef6:	bf00      	nop
 8003ef8:	370c      	adds	r7, #12
 8003efa:	46bd      	mov	sp, r7
 8003efc:	bc80      	pop	{r7}
 8003efe:	4770      	bx	lr

08003f00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f00:	b480      	push	{r7}
 8003f02:	b085      	sub	sp, #20
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	f003 0307 	and.w	r3, r3, #7
 8003f0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003f10:	4b0c      	ldr	r3, [pc, #48]	@ (8003f44 <__NVIC_SetPriorityGrouping+0x44>)
 8003f12:	68db      	ldr	r3, [r3, #12]
 8003f14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003f16:	68ba      	ldr	r2, [r7, #8]
 8003f18:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003f1c:	4013      	ands	r3, r2
 8003f1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003f24:	68bb      	ldr	r3, [r7, #8]
 8003f26:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003f28:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003f2c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003f30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003f32:	4a04      	ldr	r2, [pc, #16]	@ (8003f44 <__NVIC_SetPriorityGrouping+0x44>)
 8003f34:	68bb      	ldr	r3, [r7, #8]
 8003f36:	60d3      	str	r3, [r2, #12]
}
 8003f38:	bf00      	nop
 8003f3a:	3714      	adds	r7, #20
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	bc80      	pop	{r7}
 8003f40:	4770      	bx	lr
 8003f42:	bf00      	nop
 8003f44:	e000ed00 	.word	0xe000ed00

08003f48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003f48:	b480      	push	{r7}
 8003f4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003f4c:	4b04      	ldr	r3, [pc, #16]	@ (8003f60 <__NVIC_GetPriorityGrouping+0x18>)
 8003f4e:	68db      	ldr	r3, [r3, #12]
 8003f50:	0a1b      	lsrs	r3, r3, #8
 8003f52:	f003 0307 	and.w	r3, r3, #7
}
 8003f56:	4618      	mov	r0, r3
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	bc80      	pop	{r7}
 8003f5c:	4770      	bx	lr
 8003f5e:	bf00      	nop
 8003f60:	e000ed00 	.word	0xe000ed00

08003f64 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f64:	b480      	push	{r7}
 8003f66:	b083      	sub	sp, #12
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	4603      	mov	r3, r0
 8003f6c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	db0b      	blt.n	8003f8e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003f76:	79fb      	ldrb	r3, [r7, #7]
 8003f78:	f003 021f 	and.w	r2, r3, #31
 8003f7c:	4906      	ldr	r1, [pc, #24]	@ (8003f98 <__NVIC_EnableIRQ+0x34>)
 8003f7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f82:	095b      	lsrs	r3, r3, #5
 8003f84:	2001      	movs	r0, #1
 8003f86:	fa00 f202 	lsl.w	r2, r0, r2
 8003f8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003f8e:	bf00      	nop
 8003f90:	370c      	adds	r7, #12
 8003f92:	46bd      	mov	sp, r7
 8003f94:	bc80      	pop	{r7}
 8003f96:	4770      	bx	lr
 8003f98:	e000e100 	.word	0xe000e100

08003f9c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003f9c:	b480      	push	{r7}
 8003f9e:	b083      	sub	sp, #12
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	4603      	mov	r3, r0
 8003fa4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003fa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	db12      	blt.n	8003fd4 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003fae:	79fb      	ldrb	r3, [r7, #7]
 8003fb0:	f003 021f 	and.w	r2, r3, #31
 8003fb4:	490a      	ldr	r1, [pc, #40]	@ (8003fe0 <__NVIC_DisableIRQ+0x44>)
 8003fb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fba:	095b      	lsrs	r3, r3, #5
 8003fbc:	2001      	movs	r0, #1
 8003fbe:	fa00 f202 	lsl.w	r2, r0, r2
 8003fc2:	3320      	adds	r3, #32
 8003fc4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8003fc8:	f3bf 8f4f 	dsb	sy
}
 8003fcc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003fce:	f3bf 8f6f 	isb	sy
}
 8003fd2:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8003fd4:	bf00      	nop
 8003fd6:	370c      	adds	r7, #12
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	bc80      	pop	{r7}
 8003fdc:	4770      	bx	lr
 8003fde:	bf00      	nop
 8003fe0:	e000e100 	.word	0xe000e100

08003fe4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003fe4:	b480      	push	{r7}
 8003fe6:	b083      	sub	sp, #12
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	4603      	mov	r3, r0
 8003fec:	6039      	str	r1, [r7, #0]
 8003fee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ff0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	db0a      	blt.n	800400e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	b2da      	uxtb	r2, r3
 8003ffc:	490c      	ldr	r1, [pc, #48]	@ (8004030 <__NVIC_SetPriority+0x4c>)
 8003ffe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004002:	0112      	lsls	r2, r2, #4
 8004004:	b2d2      	uxtb	r2, r2
 8004006:	440b      	add	r3, r1
 8004008:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800400c:	e00a      	b.n	8004024 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	b2da      	uxtb	r2, r3
 8004012:	4908      	ldr	r1, [pc, #32]	@ (8004034 <__NVIC_SetPriority+0x50>)
 8004014:	79fb      	ldrb	r3, [r7, #7]
 8004016:	f003 030f 	and.w	r3, r3, #15
 800401a:	3b04      	subs	r3, #4
 800401c:	0112      	lsls	r2, r2, #4
 800401e:	b2d2      	uxtb	r2, r2
 8004020:	440b      	add	r3, r1
 8004022:	761a      	strb	r2, [r3, #24]
}
 8004024:	bf00      	nop
 8004026:	370c      	adds	r7, #12
 8004028:	46bd      	mov	sp, r7
 800402a:	bc80      	pop	{r7}
 800402c:	4770      	bx	lr
 800402e:	bf00      	nop
 8004030:	e000e100 	.word	0xe000e100
 8004034:	e000ed00 	.word	0xe000ed00

08004038 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004038:	b480      	push	{r7}
 800403a:	b089      	sub	sp, #36	@ 0x24
 800403c:	af00      	add	r7, sp, #0
 800403e:	60f8      	str	r0, [r7, #12]
 8004040:	60b9      	str	r1, [r7, #8]
 8004042:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	f003 0307 	and.w	r3, r3, #7
 800404a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800404c:	69fb      	ldr	r3, [r7, #28]
 800404e:	f1c3 0307 	rsb	r3, r3, #7
 8004052:	2b04      	cmp	r3, #4
 8004054:	bf28      	it	cs
 8004056:	2304      	movcs	r3, #4
 8004058:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800405a:	69fb      	ldr	r3, [r7, #28]
 800405c:	3304      	adds	r3, #4
 800405e:	2b06      	cmp	r3, #6
 8004060:	d902      	bls.n	8004068 <NVIC_EncodePriority+0x30>
 8004062:	69fb      	ldr	r3, [r7, #28]
 8004064:	3b03      	subs	r3, #3
 8004066:	e000      	b.n	800406a <NVIC_EncodePriority+0x32>
 8004068:	2300      	movs	r3, #0
 800406a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800406c:	f04f 32ff 	mov.w	r2, #4294967295
 8004070:	69bb      	ldr	r3, [r7, #24]
 8004072:	fa02 f303 	lsl.w	r3, r2, r3
 8004076:	43da      	mvns	r2, r3
 8004078:	68bb      	ldr	r3, [r7, #8]
 800407a:	401a      	ands	r2, r3
 800407c:	697b      	ldr	r3, [r7, #20]
 800407e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004080:	f04f 31ff 	mov.w	r1, #4294967295
 8004084:	697b      	ldr	r3, [r7, #20]
 8004086:	fa01 f303 	lsl.w	r3, r1, r3
 800408a:	43d9      	mvns	r1, r3
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004090:	4313      	orrs	r3, r2
         );
}
 8004092:	4618      	mov	r0, r3
 8004094:	3724      	adds	r7, #36	@ 0x24
 8004096:	46bd      	mov	sp, r7
 8004098:	bc80      	pop	{r7}
 800409a:	4770      	bx	lr

0800409c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800409c:	b580      	push	{r7, lr}
 800409e:	b082      	sub	sp, #8
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	3b01      	subs	r3, #1
 80040a8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80040ac:	d301      	bcc.n	80040b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80040ae:	2301      	movs	r3, #1
 80040b0:	e00f      	b.n	80040d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80040b2:	4a0a      	ldr	r2, [pc, #40]	@ (80040dc <SysTick_Config+0x40>)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	3b01      	subs	r3, #1
 80040b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80040ba:	210f      	movs	r1, #15
 80040bc:	f04f 30ff 	mov.w	r0, #4294967295
 80040c0:	f7ff ff90 	bl	8003fe4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80040c4:	4b05      	ldr	r3, [pc, #20]	@ (80040dc <SysTick_Config+0x40>)
 80040c6:	2200      	movs	r2, #0
 80040c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80040ca:	4b04      	ldr	r3, [pc, #16]	@ (80040dc <SysTick_Config+0x40>)
 80040cc:	2207      	movs	r2, #7
 80040ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80040d0:	2300      	movs	r3, #0
}
 80040d2:	4618      	mov	r0, r3
 80040d4:	3708      	adds	r7, #8
 80040d6:	46bd      	mov	sp, r7
 80040d8:	bd80      	pop	{r7, pc}
 80040da:	bf00      	nop
 80040dc:	e000e010 	.word	0xe000e010

080040e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b082      	sub	sp, #8
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80040e8:	6878      	ldr	r0, [r7, #4]
 80040ea:	f7ff ff09 	bl	8003f00 <__NVIC_SetPriorityGrouping>
}
 80040ee:	bf00      	nop
 80040f0:	3708      	adds	r7, #8
 80040f2:	46bd      	mov	sp, r7
 80040f4:	bd80      	pop	{r7, pc}

080040f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80040f6:	b580      	push	{r7, lr}
 80040f8:	b086      	sub	sp, #24
 80040fa:	af00      	add	r7, sp, #0
 80040fc:	4603      	mov	r3, r0
 80040fe:	60b9      	str	r1, [r7, #8]
 8004100:	607a      	str	r2, [r7, #4]
 8004102:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004104:	f7ff ff20 	bl	8003f48 <__NVIC_GetPriorityGrouping>
 8004108:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800410a:	687a      	ldr	r2, [r7, #4]
 800410c:	68b9      	ldr	r1, [r7, #8]
 800410e:	6978      	ldr	r0, [r7, #20]
 8004110:	f7ff ff92 	bl	8004038 <NVIC_EncodePriority>
 8004114:	4602      	mov	r2, r0
 8004116:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800411a:	4611      	mov	r1, r2
 800411c:	4618      	mov	r0, r3
 800411e:	f7ff ff61 	bl	8003fe4 <__NVIC_SetPriority>
}
 8004122:	bf00      	nop
 8004124:	3718      	adds	r7, #24
 8004126:	46bd      	mov	sp, r7
 8004128:	bd80      	pop	{r7, pc}

0800412a <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800412a:	b580      	push	{r7, lr}
 800412c:	b082      	sub	sp, #8
 800412e:	af00      	add	r7, sp, #0
 8004130:	4603      	mov	r3, r0
 8004132:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004134:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004138:	4618      	mov	r0, r3
 800413a:	f7ff ff13 	bl	8003f64 <__NVIC_EnableIRQ>
}
 800413e:	bf00      	nop
 8004140:	3708      	adds	r7, #8
 8004142:	46bd      	mov	sp, r7
 8004144:	bd80      	pop	{r7, pc}

08004146 <HAL_NVIC_DisableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004146:	b580      	push	{r7, lr}
 8004148:	b082      	sub	sp, #8
 800414a:	af00      	add	r7, sp, #0
 800414c:	4603      	mov	r3, r0
 800414e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8004150:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004154:	4618      	mov	r0, r3
 8004156:	f7ff ff21 	bl	8003f9c <__NVIC_DisableIRQ>
}
 800415a:	bf00      	nop
 800415c:	3708      	adds	r7, #8
 800415e:	46bd      	mov	sp, r7
 8004160:	bd80      	pop	{r7, pc}

08004162 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004162:	b580      	push	{r7, lr}
 8004164:	b082      	sub	sp, #8
 8004166:	af00      	add	r7, sp, #0
 8004168:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800416a:	6878      	ldr	r0, [r7, #4]
 800416c:	f7ff ff96 	bl	800409c <SysTick_Config>
 8004170:	4603      	mov	r3, r0
}
 8004172:	4618      	mov	r0, r3
 8004174:	3708      	adds	r7, #8
 8004176:	46bd      	mov	sp, r7
 8004178:	bd80      	pop	{r7, pc}
	...

0800417c <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b082      	sub	sp, #8
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d101      	bne.n	800418e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800418a:	2301      	movs	r3, #1
 800418c:	e08e      	b.n	80042ac <HAL_DMA_Init+0x130>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	461a      	mov	r2, r3
 8004194:	4b47      	ldr	r3, [pc, #284]	@ (80042b4 <HAL_DMA_Init+0x138>)
 8004196:	429a      	cmp	r2, r3
 8004198:	d80f      	bhi.n	80041ba <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	461a      	mov	r2, r3
 80041a0:	4b45      	ldr	r3, [pc, #276]	@ (80042b8 <HAL_DMA_Init+0x13c>)
 80041a2:	4413      	add	r3, r2
 80041a4:	4a45      	ldr	r2, [pc, #276]	@ (80042bc <HAL_DMA_Init+0x140>)
 80041a6:	fba2 2303 	umull	r2, r3, r2, r3
 80041aa:	091b      	lsrs	r3, r3, #4
 80041ac:	009a      	lsls	r2, r3, #2
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	4a42      	ldr	r2, [pc, #264]	@ (80042c0 <HAL_DMA_Init+0x144>)
 80041b6:	641a      	str	r2, [r3, #64]	@ 0x40
 80041b8:	e00e      	b.n	80041d8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	461a      	mov	r2, r3
 80041c0:	4b40      	ldr	r3, [pc, #256]	@ (80042c4 <HAL_DMA_Init+0x148>)
 80041c2:	4413      	add	r3, r2
 80041c4:	4a3d      	ldr	r2, [pc, #244]	@ (80042bc <HAL_DMA_Init+0x140>)
 80041c6:	fba2 2303 	umull	r2, r3, r2, r3
 80041ca:	091b      	lsrs	r3, r3, #4
 80041cc:	009a      	lsls	r2, r3, #2
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	4a3c      	ldr	r2, [pc, #240]	@ (80042c8 <HAL_DMA_Init+0x14c>)
 80041d6:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2202      	movs	r2, #2
 80041dc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	687a      	ldr	r2, [r7, #4]
 80041e8:	6812      	ldr	r2, [r2, #0]
 80041ea:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80041ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80041f2:	6013      	str	r3, [r2, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	6819      	ldr	r1, [r3, #0]
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	689a      	ldr	r2, [r3, #8]
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	68db      	ldr	r3, [r3, #12]
 8004202:	431a      	orrs	r2, r3
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	691b      	ldr	r3, [r3, #16]
 8004208:	431a      	orrs	r2, r3
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	695b      	ldr	r3, [r3, #20]
 800420e:	431a      	orrs	r2, r3
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	699b      	ldr	r3, [r3, #24]
 8004214:	431a      	orrs	r2, r3
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	69db      	ldr	r3, [r3, #28]
 800421a:	431a      	orrs	r2, r3
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6a1b      	ldr	r3, [r3, #32]
 8004220:	431a      	orrs	r2, r3
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	430a      	orrs	r2, r1
 8004228:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800422a:	6878      	ldr	r0, [r7, #4]
 800422c:	f000 fb24 	bl	8004878 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	689b      	ldr	r3, [r3, #8]
 8004234:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004238:	d102      	bne.n	8004240 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2200      	movs	r2, #0
 800423e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	685a      	ldr	r2, [r3, #4]
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004248:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800424c:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004252:	687a      	ldr	r2, [r7, #4]
 8004254:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004256:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	685b      	ldr	r3, [r3, #4]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d010      	beq.n	8004282 <HAL_DMA_Init+0x106>
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	685b      	ldr	r3, [r3, #4]
 8004264:	2b04      	cmp	r3, #4
 8004266:	d80c      	bhi.n	8004282 <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004268:	6878      	ldr	r0, [r7, #4]
 800426a:	f000 fb4d 	bl	8004908 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004272:	2200      	movs	r2, #0
 8004274:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800427a:	687a      	ldr	r2, [r7, #4]
 800427c:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800427e:	605a      	str	r2, [r3, #4]
 8004280:	e008      	b.n	8004294 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = NULL;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2200      	movs	r2, #0
 8004286:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = NULL;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2200      	movs	r2, #0
 800428c:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2200      	movs	r2, #0
 8004292:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2200      	movs	r2, #0
 8004298:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2201      	movs	r2, #1
 800429e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2200      	movs	r2, #0
 80042a6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80042aa:	2300      	movs	r3, #0
}
 80042ac:	4618      	mov	r0, r3
 80042ae:	3708      	adds	r7, #8
 80042b0:	46bd      	mov	sp, r7
 80042b2:	bd80      	pop	{r7, pc}
 80042b4:	40020407 	.word	0x40020407
 80042b8:	bffdfff8 	.word	0xbffdfff8
 80042bc:	cccccccd 	.word	0xcccccccd
 80042c0:	40020000 	.word	0x40020000
 80042c4:	bffdfbf8 	.word	0xbffdfbf8
 80042c8:	40020400 	.word	0x40020400

080042cc <HAL_DMA_DeInit>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b082      	sub	sp, #8
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (NULL == hdma)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d101      	bne.n	80042de <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80042da:	2301      	movs	r3, #1
 80042dc:	e07b      	b.n	80043d6 <HAL_DMA_DeInit+0x10a>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	681a      	ldr	r2, [r3, #0]
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f022 0201 	bic.w	r2, r2, #1
 80042ec:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	461a      	mov	r2, r3
 80042f4:	4b3a      	ldr	r3, [pc, #232]	@ (80043e0 <HAL_DMA_DeInit+0x114>)
 80042f6:	429a      	cmp	r2, r3
 80042f8:	d80f      	bhi.n	800431a <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	461a      	mov	r2, r3
 8004300:	4b38      	ldr	r3, [pc, #224]	@ (80043e4 <HAL_DMA_DeInit+0x118>)
 8004302:	4413      	add	r3, r2
 8004304:	4a38      	ldr	r2, [pc, #224]	@ (80043e8 <HAL_DMA_DeInit+0x11c>)
 8004306:	fba2 2303 	umull	r2, r3, r2, r3
 800430a:	091b      	lsrs	r3, r3, #4
 800430c:	009a      	lsls	r2, r3, #2
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	4a35      	ldr	r2, [pc, #212]	@ (80043ec <HAL_DMA_DeInit+0x120>)
 8004316:	641a      	str	r2, [r3, #64]	@ 0x40
 8004318:	e00e      	b.n	8004338 <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	461a      	mov	r2, r3
 8004320:	4b33      	ldr	r3, [pc, #204]	@ (80043f0 <HAL_DMA_DeInit+0x124>)
 8004322:	4413      	add	r3, r2
 8004324:	4a30      	ldr	r2, [pc, #192]	@ (80043e8 <HAL_DMA_DeInit+0x11c>)
 8004326:	fba2 2303 	umull	r2, r3, r2, r3
 800432a:	091b      	lsrs	r3, r3, #4
 800432c:	009a      	lsls	r2, r3, #2
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	4a2f      	ldr	r2, [pc, #188]	@ (80043f4 <HAL_DMA_DeInit+0x128>)
 8004336:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Reset DMA Channel control register */
  hdma->Instance->CCR = 0U;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	2200      	movs	r2, #0
 800433e:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004344:	f003 021c 	and.w	r2, r3, #28
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800434c:	2101      	movs	r1, #1
 800434e:	fa01 f202 	lsl.w	r2, r1, r2
 8004352:	605a      	str	r2, [r3, #4]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */

  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004354:	6878      	ldr	r0, [r7, #4]
 8004356:	f000 fa8f 	bl	8004878 <DMA_CalcDMAMUXChannelBaseAndMask>

  /* Reset the DMAMUX channel that corresponds to the DMA channel */
  hdma->DMAmuxChannel->CCR = 0U;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800435e:	2200      	movs	r2, #0
 8004360:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004366:	687a      	ldr	r2, [r7, #4]
 8004368:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800436a:	605a      	str	r2, [r3, #4]

  /* Reset Request generator parameters if any */
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	685b      	ldr	r3, [r3, #4]
 8004370:	2b00      	cmp	r3, #0
 8004372:	d00f      	beq.n	8004394 <HAL_DMA_DeInit+0xc8>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	685b      	ldr	r3, [r3, #4]
 8004378:	2b04      	cmp	r3, #4
 800437a:	d80b      	bhi.n	8004394 <HAL_DMA_DeInit+0xc8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800437c:	6878      	ldr	r0, [r7, #4]
 800437e:	f000 fac3 	bl	8004908 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004386:	2200      	movs	r2, #0
 8004388:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800438e:	687a      	ldr	r2, [r7, #4]
 8004390:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004392:	605a      	str	r2, [r3, #4]
  }

  hdma->DMAmuxRequestGen = NULL;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2200      	movs	r2, #0
 8004398:	655a      	str	r2, [r3, #84]	@ 0x54
  hdma->DMAmuxRequestGenStatus = NULL;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2200      	movs	r2, #0
 800439e:	659a      	str	r2, [r3, #88]	@ 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2200      	movs	r2, #0
 80043a4:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2200      	movs	r2, #0
 80043aa:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma->XferHalfCpltCallback = NULL;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2200      	movs	r2, #0
 80043b0:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma->XferErrorCallback = NULL;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2200      	movs	r2, #0
 80043b6:	635a      	str	r2, [r3, #52]	@ 0x34
  hdma->XferAbortCallback = NULL;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2200      	movs	r2, #0
 80043bc:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2200      	movs	r2, #0
 80043c2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2200      	movs	r2, #0
 80043c8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2200      	movs	r2, #0
 80043d0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80043d4:	2300      	movs	r3, #0
}
 80043d6:	4618      	mov	r0, r3
 80043d8:	3708      	adds	r7, #8
 80043da:	46bd      	mov	sp, r7
 80043dc:	bd80      	pop	{r7, pc}
 80043de:	bf00      	nop
 80043e0:	40020407 	.word	0x40020407
 80043e4:	bffdfff8 	.word	0xbffdfff8
 80043e8:	cccccccd 	.word	0xcccccccd
 80043ec:	40020000 	.word	0x40020000
 80043f0:	bffdfbf8 	.word	0xbffdfbf8
 80043f4:	40020400 	.word	0x40020400

080043f8 <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b086      	sub	sp, #24
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	60f8      	str	r0, [r7, #12]
 8004400:	60b9      	str	r1, [r7, #8]
 8004402:	607a      	str	r2, [r7, #4]
 8004404:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004406:	2300      	movs	r3, #0
 8004408:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004410:	2b01      	cmp	r3, #1
 8004412:	d101      	bne.n	8004418 <HAL_DMA_Start_IT+0x20>
 8004414:	2302      	movs	r3, #2
 8004416:	e069      	b.n	80044ec <HAL_DMA_Start_IT+0xf4>
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	2201      	movs	r2, #1
 800441c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (hdma->State == HAL_DMA_STATE_READY)
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004426:	b2db      	uxtb	r3, r3
 8004428:	2b01      	cmp	r3, #1
 800442a:	d155      	bne.n	80044d8 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	2202      	movs	r2, #2
 8004430:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	2200      	movs	r2, #0
 8004438:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	681a      	ldr	r2, [r3, #0]
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f022 0201 	bic.w	r2, r2, #1
 8004448:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	687a      	ldr	r2, [r7, #4]
 800444e:	68b9      	ldr	r1, [r7, #8]
 8004450:	68f8      	ldr	r0, [r7, #12]
 8004452:	f000 f9d3 	bl	80047fc <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800445a:	2b00      	cmp	r3, #0
 800445c:	d008      	beq.n	8004470 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	681a      	ldr	r2, [r3, #0]
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f042 020e 	orr.w	r2, r2, #14
 800446c:	601a      	str	r2, [r3, #0]
 800446e:	e00f      	b.n	8004490 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	681a      	ldr	r2, [r3, #0]
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f022 0204 	bic.w	r2, r2, #4
 800447e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	681a      	ldr	r2, [r3, #0]
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f042 020a 	orr.w	r2, r2, #10
 800448e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800449a:	2b00      	cmp	r3, #0
 800449c:	d007      	beq.n	80044ae <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80044a2:	681a      	ldr	r2, [r3, #0]
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80044a8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80044ac:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != NULL)
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d007      	beq.n	80044c6 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044ba:	681a      	ldr	r2, [r3, #0]
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044c0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80044c4:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	681a      	ldr	r2, [r3, #0]
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f042 0201 	orr.w	r2, r2, #1
 80044d4:	601a      	str	r2, [r3, #0]
 80044d6:	e008      	b.n	80044ea <HAL_DMA_Start_IT+0xf2>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	2280      	movs	r2, #128	@ 0x80
 80044dc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	2200      	movs	r2, #0
 80044e2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Return error status */
    status = HAL_ERROR;
 80044e6:	2301      	movs	r3, #1
 80044e8:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80044ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80044ec:	4618      	mov	r0, r3
 80044ee:	3718      	adds	r7, #24
 80044f0:	46bd      	mov	sp, r7
 80044f2:	bd80      	pop	{r7, pc}

080044f4 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80044f4:	b480      	push	{r7}
 80044f6:	b083      	sub	sp, #12
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d101      	bne.n	8004506 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8004502:	2301      	movs	r3, #1
 8004504:	e04f      	b.n	80045a6 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800450c:	b2db      	uxtb	r3, r3
 800450e:	2b02      	cmp	r3, #2
 8004510:	d008      	beq.n	8004524 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	2204      	movs	r2, #4
 8004516:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2200      	movs	r2, #0
 800451c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8004520:	2301      	movs	r3, #1
 8004522:	e040      	b.n	80045a6 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	681a      	ldr	r2, [r3, #0]
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f022 020e 	bic.w	r2, r2, #14
 8004532:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004538:	681a      	ldr	r2, [r3, #0]
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800453e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004542:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	681a      	ldr	r2, [r3, #0]
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f022 0201 	bic.w	r2, r2, #1
 8004552:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004558:	f003 021c 	and.w	r2, r3, #28
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004560:	2101      	movs	r1, #1
 8004562:	fa01 f202 	lsl.w	r2, r1, r2
 8004566:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800456c:	687a      	ldr	r2, [r7, #4]
 800456e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004570:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004576:	2b00      	cmp	r3, #0
 8004578:	d00c      	beq.n	8004594 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800457e:	681a      	ldr	r2, [r3, #0]
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004584:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004588:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800458e:	687a      	ldr	r2, [r7, #4]
 8004590:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004592:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2201      	movs	r2, #1
 8004598:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2200      	movs	r2, #0
 80045a0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }

  return HAL_OK;
 80045a4:	2300      	movs	r3, #0
}
 80045a6:	4618      	mov	r0, r3
 80045a8:	370c      	adds	r7, #12
 80045aa:	46bd      	mov	sp, r7
 80045ac:	bc80      	pop	{r7}
 80045ae:	4770      	bx	lr

080045b0 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b084      	sub	sp, #16
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80045b8:	2300      	movs	r3, #0
 80045ba:	73fb      	strb	r3, [r7, #15]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80045c2:	b2db      	uxtb	r3, r3
 80045c4:	2b02      	cmp	r3, #2
 80045c6:	d005      	beq.n	80045d4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2204      	movs	r2, #4
 80045cc:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80045ce:	2301      	movs	r3, #1
 80045d0:	73fb      	strb	r3, [r7, #15]
 80045d2:	e047      	b.n	8004664 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	681a      	ldr	r2, [r3, #0]
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f022 020e 	bic.w	r2, r2, #14
 80045e2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	681a      	ldr	r2, [r3, #0]
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f022 0201 	bic.w	r2, r2, #1
 80045f2:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80045f8:	681a      	ldr	r2, [r3, #0]
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80045fe:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004602:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004608:	f003 021c 	and.w	r2, r3, #28
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004610:	2101      	movs	r1, #1
 8004612:	fa01 f202 	lsl.w	r2, r1, r2
 8004616:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800461c:	687a      	ldr	r2, [r7, #4]
 800461e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004620:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004626:	2b00      	cmp	r3, #0
 8004628:	d00c      	beq.n	8004644 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800462e:	681a      	ldr	r2, [r3, #0]
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004634:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004638:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800463e:	687a      	ldr	r2, [r7, #4]
 8004640:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004642:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2201      	movs	r2, #1
 8004648:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2200      	movs	r2, #0
 8004650:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004658:	2b00      	cmp	r3, #0
 800465a:	d003      	beq.n	8004664 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004660:	6878      	ldr	r0, [r7, #4]
 8004662:	4798      	blx	r3
    }
  }
  return status;
 8004664:	7bfb      	ldrb	r3, [r7, #15]
}
 8004666:	4618      	mov	r0, r3
 8004668:	3710      	adds	r7, #16
 800466a:	46bd      	mov	sp, r7
 800466c:	bd80      	pop	{r7, pc}
	...

08004670 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b084      	sub	sp, #16
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800468c:	f003 031c 	and.w	r3, r3, #28
 8004690:	2204      	movs	r2, #4
 8004692:	409a      	lsls	r2, r3
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	4013      	ands	r3, r2
 8004698:	2b00      	cmp	r3, #0
 800469a:	d027      	beq.n	80046ec <HAL_DMA_IRQHandler+0x7c>
 800469c:	68bb      	ldr	r3, [r7, #8]
 800469e:	f003 0304 	and.w	r3, r3, #4
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d022      	beq.n	80046ec <HAL_DMA_IRQHandler+0x7c>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f003 0320 	and.w	r3, r3, #32
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d107      	bne.n	80046c4 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	681a      	ldr	r2, [r3, #0]
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f022 0204 	bic.w	r2, r2, #4
 80046c2:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046c8:	f003 021c 	and.w	r2, r3, #28
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046d0:	2104      	movs	r1, #4
 80046d2:	fa01 f202 	lsl.w	r2, r1, r2
 80046d6:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046dc:	2b00      	cmp	r3, #0
 80046de:	f000 8081 	beq.w	80047e4 <HAL_DMA_IRQHandler+0x174>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046e6:	6878      	ldr	r0, [r7, #4]
 80046e8:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 80046ea:	e07b      	b.n	80047e4 <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046f0:	f003 031c 	and.w	r3, r3, #28
 80046f4:	2202      	movs	r2, #2
 80046f6:	409a      	lsls	r2, r3
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	4013      	ands	r3, r2
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d03d      	beq.n	800477c <HAL_DMA_IRQHandler+0x10c>
 8004700:	68bb      	ldr	r3, [r7, #8]
 8004702:	f003 0302 	and.w	r3, r3, #2
 8004706:	2b00      	cmp	r3, #0
 8004708:	d038      	beq.n	800477c <HAL_DMA_IRQHandler+0x10c>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f003 0320 	and.w	r3, r3, #32
 8004714:	2b00      	cmp	r3, #0
 8004716:	d10b      	bne.n	8004730 <HAL_DMA_IRQHandler+0xc0>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	681a      	ldr	r2, [r3, #0]
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f022 020a 	bic.w	r2, r2, #10
 8004726:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2201      	movs	r2, #1
 800472c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	461a      	mov	r2, r3
 8004736:	4b2e      	ldr	r3, [pc, #184]	@ (80047f0 <HAL_DMA_IRQHandler+0x180>)
 8004738:	429a      	cmp	r2, r3
 800473a:	d909      	bls.n	8004750 <HAL_DMA_IRQHandler+0xe0>
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004740:	f003 031c 	and.w	r3, r3, #28
 8004744:	4a2b      	ldr	r2, [pc, #172]	@ (80047f4 <HAL_DMA_IRQHandler+0x184>)
 8004746:	2102      	movs	r1, #2
 8004748:	fa01 f303 	lsl.w	r3, r1, r3
 800474c:	6053      	str	r3, [r2, #4]
 800474e:	e008      	b.n	8004762 <HAL_DMA_IRQHandler+0xf2>
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004754:	f003 031c 	and.w	r3, r3, #28
 8004758:	4a27      	ldr	r2, [pc, #156]	@ (80047f8 <HAL_DMA_IRQHandler+0x188>)
 800475a:	2102      	movs	r1, #2
 800475c:	fa01 f303 	lsl.w	r3, r1, r3
 8004760:	6053      	str	r3, [r2, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2200      	movs	r2, #0
 8004766:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

      if (hdma->XferCpltCallback != NULL)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800476e:	2b00      	cmp	r3, #0
 8004770:	d038      	beq.n	80047e4 <HAL_DMA_IRQHandler+0x174>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004776:	6878      	ldr	r0, [r7, #4]
 8004778:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 800477a:	e033      	b.n	80047e4 <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004780:	f003 031c 	and.w	r3, r3, #28
 8004784:	2208      	movs	r2, #8
 8004786:	409a      	lsls	r2, r3
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	4013      	ands	r3, r2
 800478c:	2b00      	cmp	r3, #0
 800478e:	d02a      	beq.n	80047e6 <HAL_DMA_IRQHandler+0x176>
 8004790:	68bb      	ldr	r3, [r7, #8]
 8004792:	f003 0308 	and.w	r3, r3, #8
 8004796:	2b00      	cmp	r3, #0
 8004798:	d025      	beq.n	80047e6 <HAL_DMA_IRQHandler+0x176>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	681a      	ldr	r2, [r3, #0]
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f022 020e 	bic.w	r2, r2, #14
 80047a8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047ae:	f003 021c 	and.w	r2, r3, #28
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047b6:	2101      	movs	r1, #1
 80047b8:	fa01 f202 	lsl.w	r2, r1, r2
 80047bc:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2201      	movs	r2, #1
 80047c2:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2201      	movs	r2, #1
 80047c8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2200      	movs	r2, #0
 80047d0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d004      	beq.n	80047e6 <HAL_DMA_IRQHandler+0x176>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80047e0:	6878      	ldr	r0, [r7, #4]
 80047e2:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80047e4:	bf00      	nop
 80047e6:	bf00      	nop
}
 80047e8:	3710      	adds	r7, #16
 80047ea:	46bd      	mov	sp, r7
 80047ec:	bd80      	pop	{r7, pc}
 80047ee:	bf00      	nop
 80047f0:	40020080 	.word	0x40020080
 80047f4:	40020400 	.word	0x40020400
 80047f8:	40020000 	.word	0x40020000

080047fc <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80047fc:	b480      	push	{r7}
 80047fe:	b085      	sub	sp, #20
 8004800:	af00      	add	r7, sp, #0
 8004802:	60f8      	str	r0, [r7, #12]
 8004804:	60b9      	str	r1, [r7, #8]
 8004806:	607a      	str	r2, [r7, #4]
 8004808:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800480e:	68fa      	ldr	r2, [r7, #12]
 8004810:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004812:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != NULL)
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004818:	2b00      	cmp	r3, #0
 800481a:	d004      	beq.n	8004826 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004820:	68fa      	ldr	r2, [r7, #12]
 8004822:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004824:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800482a:	f003 021c 	and.w	r2, r3, #28
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004832:	2101      	movs	r1, #1
 8004834:	fa01 f202 	lsl.w	r2, r1, r2
 8004838:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	683a      	ldr	r2, [r7, #0]
 8004840:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	689b      	ldr	r3, [r3, #8]
 8004846:	2b10      	cmp	r3, #16
 8004848:	d108      	bne.n	800485c <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	687a      	ldr	r2, [r7, #4]
 8004850:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	68ba      	ldr	r2, [r7, #8]
 8004858:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800485a:	e007      	b.n	800486c <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	68ba      	ldr	r2, [r7, #8]
 8004862:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	687a      	ldr	r2, [r7, #4]
 800486a:	60da      	str	r2, [r3, #12]
}
 800486c:	bf00      	nop
 800486e:	3714      	adds	r7, #20
 8004870:	46bd      	mov	sp, r7
 8004872:	bc80      	pop	{r7}
 8004874:	4770      	bx	lr
	...

08004878 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004878:	b480      	push	{r7}
 800487a:	b085      	sub	sp, #20
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	461a      	mov	r2, r3
 8004886:	4b1c      	ldr	r3, [pc, #112]	@ (80048f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x80>)
 8004888:	429a      	cmp	r2, r3
 800488a:	d813      	bhi.n	80048b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x3c>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004890:	089b      	lsrs	r3, r3, #2
 8004892:	009b      	lsls	r3, r3, #2
 8004894:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004898:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 800489c:	687a      	ldr	r2, [r7, #4]
 800489e:	6493      	str	r3, [r2, #72]	@ 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	b2db      	uxtb	r3, r3
 80048a6:	3b08      	subs	r3, #8
 80048a8:	4a14      	ldr	r2, [pc, #80]	@ (80048fc <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 80048aa:	fba2 2303 	umull	r2, r3, r2, r3
 80048ae:	091b      	lsrs	r3, r3, #4
 80048b0:	60fb      	str	r3, [r7, #12]
 80048b2:	e011      	b.n	80048d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
  }
  else
  {
    /* DMA2 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048b8:	089b      	lsrs	r3, r3, #2
 80048ba:	009a      	lsls	r2, r3, #2
 80048bc:	4b10      	ldr	r3, [pc, #64]	@ (8004900 <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
 80048be:	4413      	add	r3, r2
 80048c0:	687a      	ldr	r2, [r7, #4]
 80048c2:	6493      	str	r3, [r2, #72]	@ 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	b2db      	uxtb	r3, r3
 80048ca:	3b08      	subs	r3, #8
 80048cc:	4a0b      	ldr	r2, [pc, #44]	@ (80048fc <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 80048ce:	fba2 2303 	umull	r2, r3, r2, r3
 80048d2:	091b      	lsrs	r3, r3, #4
 80048d4:	3307      	adds	r3, #7
 80048d6:	60fb      	str	r3, [r7, #12]
  }

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	4a0a      	ldr	r2, [pc, #40]	@ (8004904 <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 80048dc:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	f003 031f 	and.w	r3, r3, #31
 80048e4:	2201      	movs	r2, #1
 80048e6:	409a      	lsls	r2, r3
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80048ec:	bf00      	nop
 80048ee:	3714      	adds	r7, #20
 80048f0:	46bd      	mov	sp, r7
 80048f2:	bc80      	pop	{r7}
 80048f4:	4770      	bx	lr
 80048f6:	bf00      	nop
 80048f8:	40020407 	.word	0x40020407
 80048fc:	cccccccd 	.word	0xcccccccd
 8004900:	4002081c 	.word	0x4002081c
 8004904:	40020880 	.word	0x40020880

08004908 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004908:	b480      	push	{r7}
 800490a:	b085      	sub	sp, #20
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	685b      	ldr	r3, [r3, #4]
 8004914:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004918:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800491a:	68fa      	ldr	r2, [r7, #12]
 800491c:	4b0a      	ldr	r3, [pc, #40]	@ (8004948 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800491e:	4413      	add	r3, r2
 8004920:	009b      	lsls	r3, r3, #2
 8004922:	461a      	mov	r2, r3
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	4a08      	ldr	r2, [pc, #32]	@ (800494c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800492c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	3b01      	subs	r3, #1
 8004932:	f003 0303 	and.w	r3, r3, #3
 8004936:	2201      	movs	r2, #1
 8004938:	409a      	lsls	r2, r3
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 800493e:	bf00      	nop
 8004940:	3714      	adds	r7, #20
 8004942:	46bd      	mov	sp, r7
 8004944:	bc80      	pop	{r7}
 8004946:	4770      	bx	lr
 8004948:	1000823f 	.word	0x1000823f
 800494c:	40020940 	.word	0x40020940

08004950 <HAL_FLASH_Program>:
  *                are stored the data for the row fast program.
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8004950:	b580      	push	{r7, lr}
 8004952:	b086      	sub	sp, #24
 8004954:	af00      	add	r7, sp, #0
 8004956:	60f8      	str	r0, [r7, #12]
 8004958:	60b9      	str	r1, [r7, #8]
 800495a:	e9c7 2300 	strd	r2, r3, [r7]
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_ADDR_ALIGNED_64BITS(Address));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800495e:	4b1c      	ldr	r3, [pc, #112]	@ (80049d0 <HAL_FLASH_Program+0x80>)
 8004960:	781b      	ldrb	r3, [r3, #0]
 8004962:	2b01      	cmp	r3, #1
 8004964:	d101      	bne.n	800496a <HAL_FLASH_Program+0x1a>
 8004966:	2302      	movs	r3, #2
 8004968:	e02d      	b.n	80049c6 <HAL_FLASH_Program+0x76>
 800496a:	4b19      	ldr	r3, [pc, #100]	@ (80049d0 <HAL_FLASH_Program+0x80>)
 800496c:	2201      	movs	r2, #1
 800496e:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004970:	4b17      	ldr	r3, [pc, #92]	@ (80049d0 <HAL_FLASH_Program+0x80>)
 8004972:	2200      	movs	r2, #0
 8004974:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004976:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800497a:	f000 f869 	bl	8004a50 <FLASH_WaitForLastOperation>
 800497e:	4603      	mov	r3, r0
 8004980:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 8004982:	7dfb      	ldrb	r3, [r7, #23]
 8004984:	2b00      	cmp	r3, #0
 8004986:	d11a      	bne.n	80049be <HAL_FLASH_Program+0x6e>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	2b01      	cmp	r3, #1
 800498c:	d105      	bne.n	800499a <HAL_FLASH_Program+0x4a>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 800498e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004992:	68b8      	ldr	r0, [r7, #8]
 8004994:	f000 f8be 	bl	8004b14 <FLASH_Program_DoubleWord>
 8004998:	e004      	b.n	80049a4 <HAL_FLASH_Program+0x54>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_FAST_PROGRAM_ADDRESS(Address));

      /* Fast program a 32 double-word (64-bit) row at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	4619      	mov	r1, r3
 800499e:	68b8      	ldr	r0, [r7, #8]
 80049a0:	f000 f8de 	bl	8004b60 <FLASH_Program_Fast>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80049a4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80049a8:	f000 f852 	bl	8004a50 <FLASH_WaitForLastOperation>
 80049ac:	4603      	mov	r3, r0
 80049ae:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
#ifdef CORE_CM0PLUS
    CLEAR_BIT(FLASH->C2CR, TypeProgram);
#else
    CLEAR_BIT(FLASH->CR, TypeProgram);
 80049b0:	4b08      	ldr	r3, [pc, #32]	@ (80049d4 <HAL_FLASH_Program+0x84>)
 80049b2:	695a      	ldr	r2, [r3, #20]
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	43db      	mvns	r3, r3
 80049b8:	4906      	ldr	r1, [pc, #24]	@ (80049d4 <HAL_FLASH_Program+0x84>)
 80049ba:	4013      	ands	r3, r2
 80049bc:	614b      	str	r3, [r1, #20]
#endif
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80049be:	4b04      	ldr	r3, [pc, #16]	@ (80049d0 <HAL_FLASH_Program+0x80>)
 80049c0:	2200      	movs	r2, #0
 80049c2:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 80049c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80049c6:	4618      	mov	r0, r3
 80049c8:	3718      	adds	r7, #24
 80049ca:	46bd      	mov	sp, r7
 80049cc:	bd80      	pop	{r7, pc}
 80049ce:	bf00      	nop
 80049d0:	20000434 	.word	0x20000434
 80049d4:	58004000 	.word	0x58004000

080049d8 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80049d8:	b480      	push	{r7}
 80049da:	b083      	sub	sp, #12
 80049dc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80049de:	2300      	movs	r3, #0
 80049e0:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 80049e2:	4b0b      	ldr	r3, [pc, #44]	@ (8004a10 <HAL_FLASH_Unlock+0x38>)
 80049e4:	695b      	ldr	r3, [r3, #20]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	da0b      	bge.n	8004a02 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80049ea:	4b09      	ldr	r3, [pc, #36]	@ (8004a10 <HAL_FLASH_Unlock+0x38>)
 80049ec:	4a09      	ldr	r2, [pc, #36]	@ (8004a14 <HAL_FLASH_Unlock+0x3c>)
 80049ee:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80049f0:	4b07      	ldr	r3, [pc, #28]	@ (8004a10 <HAL_FLASH_Unlock+0x38>)
 80049f2:	4a09      	ldr	r2, [pc, #36]	@ (8004a18 <HAL_FLASH_Unlock+0x40>)
 80049f4:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlock */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 80049f6:	4b06      	ldr	r3, [pc, #24]	@ (8004a10 <HAL_FLASH_Unlock+0x38>)
 80049f8:	695b      	ldr	r3, [r3, #20]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	da01      	bge.n	8004a02 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80049fe:	2301      	movs	r3, #1
 8004a00:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8004a02:	79fb      	ldrb	r3, [r7, #7]
}
 8004a04:	4618      	mov	r0, r3
 8004a06:	370c      	adds	r7, #12
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	bc80      	pop	{r7}
 8004a0c:	4770      	bx	lr
 8004a0e:	bf00      	nop
 8004a10:	58004000 	.word	0x58004000
 8004a14:	45670123 	.word	0x45670123
 8004a18:	cdef89ab 	.word	0xcdef89ab

08004a1c <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8004a1c:	b480      	push	{r7}
 8004a1e:	b083      	sub	sp, #12
 8004a20:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8004a22:	2300      	movs	r3, #0
 8004a24:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  /* @Note  The lock and unlock procedure is done only using CR registers even from CPU2 */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8004a26:	4b09      	ldr	r3, [pc, #36]	@ (8004a4c <HAL_FLASH_Lock+0x30>)
 8004a28:	695b      	ldr	r3, [r3, #20]
 8004a2a:	4a08      	ldr	r2, [pc, #32]	@ (8004a4c <HAL_FLASH_Lock+0x30>)
 8004a2c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004a30:	6153      	str	r3, [r2, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) == 0U)
 8004a32:	4b06      	ldr	r3, [pc, #24]	@ (8004a4c <HAL_FLASH_Lock+0x30>)
 8004a34:	695b      	ldr	r3, [r3, #20]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	db01      	blt.n	8004a3e <HAL_FLASH_Lock+0x22>
  {
    status = HAL_ERROR;
 8004a3a:	2301      	movs	r3, #1
 8004a3c:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8004a3e:	79fb      	ldrb	r3, [r7, #7]
}
 8004a40:	4618      	mov	r0, r3
 8004a42:	370c      	adds	r7, #12
 8004a44:	46bd      	mov	sp, r7
 8004a46:	bc80      	pop	{r7}
 8004a48:	4770      	bx	lr
 8004a4a:	bf00      	nop
 8004a4c:	58004000 	.word	0x58004000

08004a50 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout Maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b084      	sub	sp, #16
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
  uint32_t error;
  uint32_t tickstart = HAL_GetTick();
 8004a58:	f7fd f8dc 	bl	8001c14 <HAL_GetTick>
 8004a5c:	60f8      	str	r0, [r7, #12]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8004a5e:	e009      	b.n	8004a74 <FLASH_WaitForLastOperation+0x24>
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 8004a60:	f7fd f8d8 	bl	8001c14 <HAL_GetTick>
 8004a64:	4602      	mov	r2, r0
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	1ad3      	subs	r3, r2, r3
 8004a6a:	687a      	ldr	r2, [r7, #4]
 8004a6c:	429a      	cmp	r2, r3
 8004a6e:	d801      	bhi.n	8004a74 <FLASH_WaitForLastOperation+0x24>
    {
      return HAL_TIMEOUT;
 8004a70:	2303      	movs	r3, #3
 8004a72:	e046      	b.n	8004b02 <FLASH_WaitForLastOperation+0xb2>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8004a74:	4b25      	ldr	r3, [pc, #148]	@ (8004b0c <FLASH_WaitForLastOperation+0xbc>)
 8004a76:	691b      	ldr	r3, [r3, #16]
 8004a78:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004a7c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004a80:	d0ee      	beq.n	8004a60 <FLASH_WaitForLastOperation+0x10>
  /* check flash errors. Only ECC correction can be checked here as ECCD
      generates NMI */
#ifdef CORE_CM0PLUS
  error = FLASH->C2SR;
#else
  error = FLASH->SR;
 8004a82:	4b22      	ldr	r3, [pc, #136]	@ (8004b0c <FLASH_WaitForLastOperation+0xbc>)
 8004a84:	691b      	ldr	r3, [r3, #16]
 8004a86:	60bb      	str	r3, [r7, #8]
#endif

  /* Check FLASH End of Operation flag */
  if ((error & FLASH_FLAG_EOP) != 0U)
 8004a88:	68bb      	ldr	r3, [r7, #8]
 8004a8a:	f003 0301 	and.w	r3, r3, #1
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d002      	beq.n	8004a98 <FLASH_WaitForLastOperation+0x48>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8004a92:	4b1e      	ldr	r3, [pc, #120]	@ (8004b0c <FLASH_WaitForLastOperation+0xbc>)
 8004a94:	2201      	movs	r2, #1
 8004a96:	611a      	str	r2, [r3, #16]
  }

  /* Now update error variable to only error value */
  error &= FLASH_FLAG_SR_ERRORS;
 8004a98:	68ba      	ldr	r2, [r7, #8]
 8004a9a:	f24c 33fa 	movw	r3, #50170	@ 0xc3fa
 8004a9e:	4013      	ands	r3, r2
 8004aa0:	60bb      	str	r3, [r7, #8]

  /* clear error flags */
  __HAL_FLASH_CLEAR_FLAG(error);
 8004aa2:	68bb      	ldr	r3, [r7, #8]
 8004aa4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004aa8:	d307      	bcc.n	8004aba <FLASH_WaitForLastOperation+0x6a>
 8004aaa:	4b18      	ldr	r3, [pc, #96]	@ (8004b0c <FLASH_WaitForLastOperation+0xbc>)
 8004aac:	699a      	ldr	r2, [r3, #24]
 8004aae:	68bb      	ldr	r3, [r7, #8]
 8004ab0:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8004ab4:	4915      	ldr	r1, [pc, #84]	@ (8004b0c <FLASH_WaitForLastOperation+0xbc>)
 8004ab6:	4313      	orrs	r3, r2
 8004ab8:	618b      	str	r3, [r1, #24]
 8004aba:	68bb      	ldr	r3, [r7, #8]
 8004abc:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d004      	beq.n	8004ace <FLASH_WaitForLastOperation+0x7e>
 8004ac4:	4a11      	ldr	r2, [pc, #68]	@ (8004b0c <FLASH_WaitForLastOperation+0xbc>)
 8004ac6:	68bb      	ldr	r3, [r7, #8]
 8004ac8:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8004acc:	6113      	str	r3, [r2, #16]

  if (error != 0U)
 8004ace:	68bb      	ldr	r3, [r7, #8]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d00e      	beq.n	8004af2 <FLASH_WaitForLastOperation+0xa2>
  {
    /*Save the error code*/
    pFlash.ErrorCode = error;
 8004ad4:	4a0e      	ldr	r2, [pc, #56]	@ (8004b10 <FLASH_WaitForLastOperation+0xc0>)
 8004ad6:	68bb      	ldr	r3, [r7, #8]
 8004ad8:	6053      	str	r3, [r2, #4]

    return HAL_ERROR;
 8004ada:	2301      	movs	r3, #1
 8004adc:	e011      	b.n	8004b02 <FLASH_WaitForLastOperation+0xb2>
  }

  /* Wait for control register to be written */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 8004ade:	f7fd f899 	bl	8001c14 <HAL_GetTick>
 8004ae2:	4602      	mov	r2, r0
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	1ad3      	subs	r3, r2, r3
 8004ae8:	687a      	ldr	r2, [r7, #4]
 8004aea:	429a      	cmp	r2, r3
 8004aec:	d801      	bhi.n	8004af2 <FLASH_WaitForLastOperation+0xa2>
    {
      return HAL_TIMEOUT;
 8004aee:	2303      	movs	r3, #3
 8004af0:	e007      	b.n	8004b02 <FLASH_WaitForLastOperation+0xb2>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
 8004af2:	4b06      	ldr	r3, [pc, #24]	@ (8004b0c <FLASH_WaitForLastOperation+0xbc>)
 8004af4:	691b      	ldr	r3, [r3, #16]
 8004af6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004afa:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004afe:	d0ee      	beq.n	8004ade <FLASH_WaitForLastOperation+0x8e>
    }
  }

  return HAL_OK;
 8004b00:	2300      	movs	r3, #0
}
 8004b02:	4618      	mov	r0, r3
 8004b04:	3710      	adds	r7, #16
 8004b06:	46bd      	mov	sp, r7
 8004b08:	bd80      	pop	{r7, pc}
 8004b0a:	bf00      	nop
 8004b0c:	58004000 	.word	0x58004000
 8004b10:	20000434 	.word	0x20000434

08004b14 <FLASH_Program_DoubleWord>:
  * @param  Address Specifies the address to be programmed.
  * @param  Data Specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8004b14:	b480      	push	{r7}
 8004b16:	b085      	sub	sp, #20
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	60f8      	str	r0, [r7, #12]
 8004b1c:	e9c7 2300 	strd	r2, r3, [r7]
#ifdef CORE_CM0PLUS
  /* Set PG bit */
  SET_BIT(FLASH->C2CR, FLASH_CR_PG);
#else
  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8004b20:	4b0e      	ldr	r3, [pc, #56]	@ (8004b5c <FLASH_Program_DoubleWord+0x48>)
 8004b22:	695b      	ldr	r3, [r3, #20]
 8004b24:	4a0d      	ldr	r2, [pc, #52]	@ (8004b5c <FLASH_Program_DoubleWord+0x48>)
 8004b26:	f043 0301 	orr.w	r3, r3, #1
 8004b2a:	6153      	str	r3, [r2, #20]
#endif

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	683a      	ldr	r2, [r7, #0]
 8004b30:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8004b32:	f3bf 8f6f 	isb	sy
}
 8004b36:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 8004b38:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004b3c:	f04f 0200 	mov.w	r2, #0
 8004b40:	f04f 0300 	mov.w	r3, #0
 8004b44:	000a      	movs	r2, r1
 8004b46:	2300      	movs	r3, #0
 8004b48:	68f9      	ldr	r1, [r7, #12]
 8004b4a:	3104      	adds	r1, #4
 8004b4c:	4613      	mov	r3, r2
 8004b4e:	600b      	str	r3, [r1, #0]
}
 8004b50:	bf00      	nop
 8004b52:	3714      	adds	r7, #20
 8004b54:	46bd      	mov	sp, r7
 8004b56:	bc80      	pop	{r7}
 8004b58:	4770      	bx	lr
 8004b5a:	bf00      	nop
 8004b5c:	58004000 	.word	0x58004000

08004b60 <FLASH_Program_Fast>:
#ifdef CORE_CM0PLUS
static __RAM_FUNC void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
#else
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
#endif
{
 8004b60:	b480      	push	{r7}
 8004b62:	b089      	sub	sp, #36	@ 0x24
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
 8004b68:	6039      	str	r1, [r7, #0]
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
 8004b6a:	2340      	movs	r3, #64	@ 0x40
 8004b6c:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t *)Address;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t *)DataAddress;
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	617b      	str	r3, [r7, #20]

  /* Set FSTPG bit */
#ifdef CORE_CM0PLUS
  SET_BIT(FLASH->C2CR, FLASH_CR_FSTPG);
#else
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8004b76:	4b18      	ldr	r3, [pc, #96]	@ (8004bd8 <FLASH_Program_Fast+0x78>)
 8004b78:	695b      	ldr	r3, [r3, #20]
 8004b7a:	4a17      	ldr	r2, [pc, #92]	@ (8004bd8 <FLASH_Program_Fast+0x78>)
 8004b7c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004b80:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b82:	f3ef 8310 	mrs	r3, PRIMASK
 8004b86:	60fb      	str	r3, [r7, #12]
  return(result);
 8004b88:	68fb      	ldr	r3, [r7, #12]
#endif

  /* Enter critical section: row programming should not be longer than 7 ms */
  primask_bit = __get_PRIMASK();
 8004b8a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8004b8c:	b672      	cpsid	i
}
 8004b8e:	bf00      	nop
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 8004b90:	697b      	ldr	r3, [r7, #20]
 8004b92:	681a      	ldr	r2, [r3, #0]
 8004b94:	69bb      	ldr	r3, [r7, #24]
 8004b96:	601a      	str	r2, [r3, #0]
    dest_addr++;
 8004b98:	69bb      	ldr	r3, [r7, #24]
 8004b9a:	3304      	adds	r3, #4
 8004b9c:	61bb      	str	r3, [r7, #24]
    src_addr++;
 8004b9e:	697b      	ldr	r3, [r7, #20]
 8004ba0:	3304      	adds	r3, #4
 8004ba2:	617b      	str	r3, [r7, #20]
    row_index--;
 8004ba4:	7ffb      	ldrb	r3, [r7, #31]
 8004ba6:	3b01      	subs	r3, #1
 8004ba8:	77fb      	strb	r3, [r7, #31]
  }
  while (row_index != 0U);
 8004baa:	7ffb      	ldrb	r3, [r7, #31]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d1ef      	bne.n	8004b90 <FLASH_Program_Fast+0x30>

  /* wait for BSY in order to be sure that flash operation is ended before
     allowing prefetch in flash. Timeout does not return status, as it will
     be anyway done later */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != 0U)
 8004bb0:	bf00      	nop
 8004bb2:	4b09      	ldr	r3, [pc, #36]	@ (8004bd8 <FLASH_Program_Fast+0x78>)
 8004bb4:	691b      	ldr	r3, [r3, #16]
 8004bb6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004bba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004bbe:	d0f8      	beq.n	8004bb2 <FLASH_Program_Fast+0x52>
 8004bc0:	693b      	ldr	r3, [r7, #16]
 8004bc2:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004bc4:	68bb      	ldr	r3, [r7, #8]
 8004bc6:	f383 8810 	msr	PRIMASK, r3
}
 8004bca:	bf00      	nop
  {
  }

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 8004bcc:	bf00      	nop
 8004bce:	3724      	adds	r7, #36	@ 0x24
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	bc80      	pop	{r7}
 8004bd4:	4770      	bx	lr
 8004bd6:	bf00      	nop
 8004bd8:	58004000 	.word	0x58004000

08004bdc <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased)
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b084      	sub	sp, #16
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
 8004be4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8004be6:	4b28      	ldr	r3, [pc, #160]	@ (8004c88 <HAL_FLASHEx_Erase+0xac>)
 8004be8:	781b      	ldrb	r3, [r3, #0]
 8004bea:	2b01      	cmp	r3, #1
 8004bec:	d101      	bne.n	8004bf2 <HAL_FLASHEx_Erase+0x16>
 8004bee:	2302      	movs	r3, #2
 8004bf0:	e046      	b.n	8004c80 <HAL_FLASHEx_Erase+0xa4>
 8004bf2:	4b25      	ldr	r3, [pc, #148]	@ (8004c88 <HAL_FLASHEx_Erase+0xac>)
 8004bf4:	2201      	movs	r2, #1
 8004bf6:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004bf8:	4b23      	ldr	r3, [pc, #140]	@ (8004c88 <HAL_FLASHEx_Erase+0xac>)
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004bfe:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8004c02:	f7ff ff25 	bl	8004a50 <FLASH_WaitForLastOperation>
 8004c06:	4603      	mov	r3, r0
 8004c08:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8004c0a:	7bfb      	ldrb	r3, [r7, #15]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d133      	bne.n	8004c78 <HAL_FLASHEx_Erase+0x9c>
  {
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	2b04      	cmp	r3, #4
 8004c16:	d108      	bne.n	8004c2a <HAL_FLASHEx_Erase+0x4e>
    {
      /* Mass erase to be done */
      FLASH_MassErase();
 8004c18:	f000 f838 	bl	8004c8c <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004c1c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8004c20:	f7ff ff16 	bl	8004a50 <FLASH_WaitForLastOperation>
 8004c24:	4603      	mov	r3, r0
 8004c26:	73fb      	strb	r3, [r7, #15]
 8004c28:	e024      	b.n	8004c74 <HAL_FLASHEx_Erase+0x98>
      /* If operation is completed or interrupted, no need to clear the Mass Erase Bit */
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	f04f 32ff 	mov.w	r2, #4294967295
 8004c30:	601a      	str	r2, [r3, #0]

      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	685b      	ldr	r3, [r3, #4]
 8004c36:	60bb      	str	r3, [r7, #8]
 8004c38:	e012      	b.n	8004c60 <HAL_FLASHEx_Erase+0x84>
      {
        /* Start erase page */
        FLASH_PageErase(index);
 8004c3a:	68b8      	ldr	r0, [r7, #8]
 8004c3c:	f000 f836 	bl	8004cac <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004c40:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8004c44:	f7ff ff04 	bl	8004a50 <FLASH_WaitForLastOperation>
 8004c48:	4603      	mov	r3, r0
 8004c4a:	73fb      	strb	r3, [r7, #15]

        if (status != HAL_OK)
 8004c4c:	7bfb      	ldrb	r3, [r7, #15]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d003      	beq.n	8004c5a <HAL_FLASHEx_Erase+0x7e>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = index;
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	68ba      	ldr	r2, [r7, #8]
 8004c56:	601a      	str	r2, [r3, #0]
          break;
 8004c58:	e00a      	b.n	8004c70 <HAL_FLASHEx_Erase+0x94>
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8004c5a:	68bb      	ldr	r3, [r7, #8]
 8004c5c:	3301      	adds	r3, #1
 8004c5e:	60bb      	str	r3, [r7, #8]
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	685a      	ldr	r2, [r3, #4]
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	689b      	ldr	r3, [r3, #8]
 8004c68:	4413      	add	r3, r2
 8004c6a:	68ba      	ldr	r2, [r7, #8]
 8004c6c:	429a      	cmp	r2, r3
 8004c6e:	d3e4      	bcc.n	8004c3a <HAL_FLASHEx_Erase+0x5e>
        }
      }

      /* If operation is completed or interrupted, disable the Page Erase Bit */
      FLASH_AcknowledgePageErase();
 8004c70:	f000 f878 	bl	8004d64 <FLASH_AcknowledgePageErase>
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8004c74:	f000 f832 	bl	8004cdc <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8004c78:	4b03      	ldr	r3, [pc, #12]	@ (8004c88 <HAL_FLASHEx_Erase+0xac>)
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	701a      	strb	r2, [r3, #0]

  return status;
 8004c7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c80:	4618      	mov	r0, r3
 8004c82:	3710      	adds	r7, #16
 8004c84:	46bd      	mov	sp, r7
 8004c86:	bd80      	pop	{r7, pc}
 8004c88:	20000434 	.word	0x20000434

08004c8c <FLASH_MassErase>:
/**
  * @brief  Mass erase of FLASH memory.
  * @retval None
  */
static void FLASH_MassErase(void)
{
 8004c8c:	b480      	push	{r7}
 8004c8e:	af00      	add	r7, sp, #0
  /* Set the Mass Erase Bit and start bit */
#ifdef CORE_CM0PLUS
  SET_BIT(FLASH->C2CR, (FLASH_CR_MER | FLASH_CR_STRT));
#else
  SET_BIT(FLASH->CR, (FLASH_CR_MER | FLASH_CR_STRT));
 8004c90:	4b05      	ldr	r3, [pc, #20]	@ (8004ca8 <FLASH_MassErase+0x1c>)
 8004c92:	695b      	ldr	r3, [r3, #20]
 8004c94:	4a04      	ldr	r2, [pc, #16]	@ (8004ca8 <FLASH_MassErase+0x1c>)
 8004c96:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004c9a:	f043 0304 	orr.w	r3, r3, #4
 8004c9e:	6153      	str	r3, [r2, #20]
#endif
}
 8004ca0:	bf00      	nop
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	bc80      	pop	{r7}
 8004ca6:	4770      	bx	lr
 8004ca8:	58004000 	.word	0x58004000

08004cac <FLASH_PageErase>:
  * @param  Page FLASH page to erase
  *         This parameter must be a value between 0 and (max number of pages in Flash - 1)
  * @retval None
  */
void FLASH_PageErase(uint32_t Page)
{
 8004cac:	b480      	push	{r7}
 8004cae:	b083      	sub	sp, #12
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]

  /* Proceed to erase the page */
#ifdef CORE_CM0PLUS
  MODIFY_REG(FLASH->C2CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
#else
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
 8004cb4:	4b08      	ldr	r3, [pc, #32]	@ (8004cd8 <FLASH_PageErase+0x2c>)
 8004cb6:	695b      	ldr	r3, [r3, #20]
 8004cb8:	f423 727e 	bic.w	r2, r3, #1016	@ 0x3f8
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	00db      	lsls	r3, r3, #3
 8004cc0:	4313      	orrs	r3, r2
 8004cc2:	4a05      	ldr	r2, [pc, #20]	@ (8004cd8 <FLASH_PageErase+0x2c>)
 8004cc4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004cc8:	f043 0302 	orr.w	r3, r3, #2
 8004ccc:	6153      	str	r3, [r2, #20]
#endif
}
 8004cce:	bf00      	nop
 8004cd0:	370c      	adds	r7, #12
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	bc80      	pop	{r7}
 8004cd6:	4770      	bx	lr
 8004cd8:	58004000 	.word	0x58004000

08004cdc <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8004cdc:	b480      	push	{r7}
 8004cde:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) == 1U)
 8004ce0:	4b1f      	ldr	r3, [pc, #124]	@ (8004d60 <FLASH_FlushCaches+0x84>)
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004ce8:	2b01      	cmp	r3, #1
 8004cea:	d117      	bne.n	8004d1c <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8004cec:	4b1c      	ldr	r3, [pc, #112]	@ (8004d60 <FLASH_FlushCaches+0x84>)
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	4a1b      	ldr	r2, [pc, #108]	@ (8004d60 <FLASH_FlushCaches+0x84>)
 8004cf2:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004cf6:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8004cf8:	4b19      	ldr	r3, [pc, #100]	@ (8004d60 <FLASH_FlushCaches+0x84>)
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	4a18      	ldr	r2, [pc, #96]	@ (8004d60 <FLASH_FlushCaches+0x84>)
 8004cfe:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8004d02:	6013      	str	r3, [r2, #0]
 8004d04:	4b16      	ldr	r3, [pc, #88]	@ (8004d60 <FLASH_FlushCaches+0x84>)
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	4a15      	ldr	r2, [pc, #84]	@ (8004d60 <FLASH_FlushCaches+0x84>)
 8004d0a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004d0e:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004d10:	4b13      	ldr	r3, [pc, #76]	@ (8004d60 <FLASH_FlushCaches+0x84>)
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	4a12      	ldr	r2, [pc, #72]	@ (8004d60 <FLASH_FlushCaches+0x84>)
 8004d16:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004d1a:	6013      	str	r3, [r2, #0]
  }

#ifdef CORE_CM0PLUS
#else
  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) == 1U)
 8004d1c:	4b10      	ldr	r3, [pc, #64]	@ (8004d60 <FLASH_FlushCaches+0x84>)
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d24:	2b01      	cmp	r3, #1
 8004d26:	d117      	bne.n	8004d58 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8004d28:	4b0d      	ldr	r3, [pc, #52]	@ (8004d60 <FLASH_FlushCaches+0x84>)
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	4a0c      	ldr	r2, [pc, #48]	@ (8004d60 <FLASH_FlushCaches+0x84>)
 8004d2e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004d32:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8004d34:	4b0a      	ldr	r3, [pc, #40]	@ (8004d60 <FLASH_FlushCaches+0x84>)
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	4a09      	ldr	r2, [pc, #36]	@ (8004d60 <FLASH_FlushCaches+0x84>)
 8004d3a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004d3e:	6013      	str	r3, [r2, #0]
 8004d40:	4b07      	ldr	r3, [pc, #28]	@ (8004d60 <FLASH_FlushCaches+0x84>)
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	4a06      	ldr	r2, [pc, #24]	@ (8004d60 <FLASH_FlushCaches+0x84>)
 8004d46:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004d4a:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8004d4c:	4b04      	ldr	r3, [pc, #16]	@ (8004d60 <FLASH_FlushCaches+0x84>)
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	4a03      	ldr	r2, [pc, #12]	@ (8004d60 <FLASH_FlushCaches+0x84>)
 8004d52:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004d56:	6013      	str	r3, [r2, #0]
  }
#endif
}
 8004d58:	bf00      	nop
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	bc80      	pop	{r7}
 8004d5e:	4770      	bx	lr
 8004d60:	58004000 	.word	0x58004000

08004d64 <FLASH_AcknowledgePageErase>:
/**
  * @brief  Acknlowldge the page erase operation.
  * @retval None
  */
static void FLASH_AcknowledgePageErase(void)
{
 8004d64:	b480      	push	{r7}
 8004d66:	af00      	add	r7, sp, #0
#ifdef CORE_CM0PLUS
  CLEAR_BIT(FLASH->C2CR, (FLASH_CR_PER | FLASH_CR_PNB));
#else
  CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8004d68:	4b05      	ldr	r3, [pc, #20]	@ (8004d80 <FLASH_AcknowledgePageErase+0x1c>)
 8004d6a:	695b      	ldr	r3, [r3, #20]
 8004d6c:	4a04      	ldr	r2, [pc, #16]	@ (8004d80 <FLASH_AcknowledgePageErase+0x1c>)
 8004d6e:	f423 737e 	bic.w	r3, r3, #1016	@ 0x3f8
 8004d72:	f023 0302 	bic.w	r3, r3, #2
 8004d76:	6153      	str	r3, [r2, #20]
#endif
}
 8004d78:	bf00      	nop
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	bc80      	pop	{r7}
 8004d7e:	4770      	bx	lr
 8004d80:	58004000 	.word	0x58004000

08004d84 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004d84:	b480      	push	{r7}
 8004d86:	b087      	sub	sp, #28
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
 8004d8c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004d8e:	2300      	movs	r3, #0
 8004d90:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004d92:	e140      	b.n	8005016 <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	681a      	ldr	r2, [r3, #0]
 8004d98:	2101      	movs	r1, #1
 8004d9a:	697b      	ldr	r3, [r7, #20]
 8004d9c:	fa01 f303 	lsl.w	r3, r1, r3
 8004da0:	4013      	ands	r3, r2
 8004da2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	f000 8132 	beq.w	8005010 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	685b      	ldr	r3, [r3, #4]
 8004db0:	f003 0303 	and.w	r3, r3, #3
 8004db4:	2b01      	cmp	r3, #1
 8004db6:	d005      	beq.n	8004dc4 <HAL_GPIO_Init+0x40>
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	685b      	ldr	r3, [r3, #4]
 8004dbc:	f003 0303 	and.w	r3, r3, #3
 8004dc0:	2b02      	cmp	r3, #2
 8004dc2:	d130      	bne.n	8004e26 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	689b      	ldr	r3, [r3, #8]
 8004dc8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004dca:	697b      	ldr	r3, [r7, #20]
 8004dcc:	005b      	lsls	r3, r3, #1
 8004dce:	2203      	movs	r2, #3
 8004dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8004dd4:	43db      	mvns	r3, r3
 8004dd6:	693a      	ldr	r2, [r7, #16]
 8004dd8:	4013      	ands	r3, r2
 8004dda:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	68da      	ldr	r2, [r3, #12]
 8004de0:	697b      	ldr	r3, [r7, #20]
 8004de2:	005b      	lsls	r3, r3, #1
 8004de4:	fa02 f303 	lsl.w	r3, r2, r3
 8004de8:	693a      	ldr	r2, [r7, #16]
 8004dea:	4313      	orrs	r3, r2
 8004dec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	693a      	ldr	r2, [r7, #16]
 8004df2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	685b      	ldr	r3, [r3, #4]
 8004df8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004dfa:	2201      	movs	r2, #1
 8004dfc:	697b      	ldr	r3, [r7, #20]
 8004dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8004e02:	43db      	mvns	r3, r3
 8004e04:	693a      	ldr	r2, [r7, #16]
 8004e06:	4013      	ands	r3, r2
 8004e08:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	685b      	ldr	r3, [r3, #4]
 8004e0e:	091b      	lsrs	r3, r3, #4
 8004e10:	f003 0201 	and.w	r2, r3, #1
 8004e14:	697b      	ldr	r3, [r7, #20]
 8004e16:	fa02 f303 	lsl.w	r3, r2, r3
 8004e1a:	693a      	ldr	r2, [r7, #16]
 8004e1c:	4313      	orrs	r3, r2
 8004e1e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	693a      	ldr	r2, [r7, #16]
 8004e24:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004e26:	683b      	ldr	r3, [r7, #0]
 8004e28:	685b      	ldr	r3, [r3, #4]
 8004e2a:	f003 0303 	and.w	r3, r3, #3
 8004e2e:	2b03      	cmp	r3, #3
 8004e30:	d017      	beq.n	8004e62 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	68db      	ldr	r3, [r3, #12]
 8004e36:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004e38:	697b      	ldr	r3, [r7, #20]
 8004e3a:	005b      	lsls	r3, r3, #1
 8004e3c:	2203      	movs	r2, #3
 8004e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8004e42:	43db      	mvns	r3, r3
 8004e44:	693a      	ldr	r2, [r7, #16]
 8004e46:	4013      	ands	r3, r2
 8004e48:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	689a      	ldr	r2, [r3, #8]
 8004e4e:	697b      	ldr	r3, [r7, #20]
 8004e50:	005b      	lsls	r3, r3, #1
 8004e52:	fa02 f303 	lsl.w	r3, r2, r3
 8004e56:	693a      	ldr	r2, [r7, #16]
 8004e58:	4313      	orrs	r3, r2
 8004e5a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	693a      	ldr	r2, [r7, #16]
 8004e60:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	685b      	ldr	r3, [r3, #4]
 8004e66:	f003 0303 	and.w	r3, r3, #3
 8004e6a:	2b02      	cmp	r3, #2
 8004e6c:	d123      	bne.n	8004eb6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004e6e:	697b      	ldr	r3, [r7, #20]
 8004e70:	08da      	lsrs	r2, r3, #3
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	3208      	adds	r2, #8
 8004e76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e7a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004e7c:	697b      	ldr	r3, [r7, #20]
 8004e7e:	f003 0307 	and.w	r3, r3, #7
 8004e82:	009b      	lsls	r3, r3, #2
 8004e84:	220f      	movs	r2, #15
 8004e86:	fa02 f303 	lsl.w	r3, r2, r3
 8004e8a:	43db      	mvns	r3, r3
 8004e8c:	693a      	ldr	r2, [r7, #16]
 8004e8e:	4013      	ands	r3, r2
 8004e90:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	691a      	ldr	r2, [r3, #16]
 8004e96:	697b      	ldr	r3, [r7, #20]
 8004e98:	f003 0307 	and.w	r3, r3, #7
 8004e9c:	009b      	lsls	r3, r3, #2
 8004e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8004ea2:	693a      	ldr	r2, [r7, #16]
 8004ea4:	4313      	orrs	r3, r2
 8004ea6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004ea8:	697b      	ldr	r3, [r7, #20]
 8004eaa:	08da      	lsrs	r2, r3, #3
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	3208      	adds	r2, #8
 8004eb0:	6939      	ldr	r1, [r7, #16]
 8004eb2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004ebc:	697b      	ldr	r3, [r7, #20]
 8004ebe:	005b      	lsls	r3, r3, #1
 8004ec0:	2203      	movs	r2, #3
 8004ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ec6:	43db      	mvns	r3, r3
 8004ec8:	693a      	ldr	r2, [r7, #16]
 8004eca:	4013      	ands	r3, r2
 8004ecc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	685b      	ldr	r3, [r3, #4]
 8004ed2:	f003 0203 	and.w	r2, r3, #3
 8004ed6:	697b      	ldr	r3, [r7, #20]
 8004ed8:	005b      	lsls	r3, r3, #1
 8004eda:	fa02 f303 	lsl.w	r3, r2, r3
 8004ede:	693a      	ldr	r2, [r7, #16]
 8004ee0:	4313      	orrs	r3, r2
 8004ee2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	693a      	ldr	r2, [r7, #16]
 8004ee8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004eea:	683b      	ldr	r3, [r7, #0]
 8004eec:	685b      	ldr	r3, [r3, #4]
 8004eee:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	f000 808c 	beq.w	8005010 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8004ef8:	4a4e      	ldr	r2, [pc, #312]	@ (8005034 <HAL_GPIO_Init+0x2b0>)
 8004efa:	697b      	ldr	r3, [r7, #20]
 8004efc:	089b      	lsrs	r3, r3, #2
 8004efe:	3302      	adds	r3, #2
 8004f00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f04:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8004f06:	697b      	ldr	r3, [r7, #20]
 8004f08:	f003 0303 	and.w	r3, r3, #3
 8004f0c:	009b      	lsls	r3, r3, #2
 8004f0e:	2207      	movs	r2, #7
 8004f10:	fa02 f303 	lsl.w	r3, r2, r3
 8004f14:	43db      	mvns	r3, r3
 8004f16:	693a      	ldr	r2, [r7, #16]
 8004f18:	4013      	ands	r3, r2
 8004f1a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004f22:	d00d      	beq.n	8004f40 <HAL_GPIO_Init+0x1bc>
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	4a44      	ldr	r2, [pc, #272]	@ (8005038 <HAL_GPIO_Init+0x2b4>)
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	d007      	beq.n	8004f3c <HAL_GPIO_Init+0x1b8>
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	4a43      	ldr	r2, [pc, #268]	@ (800503c <HAL_GPIO_Init+0x2b8>)
 8004f30:	4293      	cmp	r3, r2
 8004f32:	d101      	bne.n	8004f38 <HAL_GPIO_Init+0x1b4>
 8004f34:	2302      	movs	r3, #2
 8004f36:	e004      	b.n	8004f42 <HAL_GPIO_Init+0x1be>
 8004f38:	2307      	movs	r3, #7
 8004f3a:	e002      	b.n	8004f42 <HAL_GPIO_Init+0x1be>
 8004f3c:	2301      	movs	r3, #1
 8004f3e:	e000      	b.n	8004f42 <HAL_GPIO_Init+0x1be>
 8004f40:	2300      	movs	r3, #0
 8004f42:	697a      	ldr	r2, [r7, #20]
 8004f44:	f002 0203 	and.w	r2, r2, #3
 8004f48:	0092      	lsls	r2, r2, #2
 8004f4a:	4093      	lsls	r3, r2
 8004f4c:	693a      	ldr	r2, [r7, #16]
 8004f4e:	4313      	orrs	r3, r2
 8004f50:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004f52:	4938      	ldr	r1, [pc, #224]	@ (8005034 <HAL_GPIO_Init+0x2b0>)
 8004f54:	697b      	ldr	r3, [r7, #20]
 8004f56:	089b      	lsrs	r3, r3, #2
 8004f58:	3302      	adds	r3, #2
 8004f5a:	693a      	ldr	r2, [r7, #16]
 8004f5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004f60:	4b37      	ldr	r3, [pc, #220]	@ (8005040 <HAL_GPIO_Init+0x2bc>)
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	43db      	mvns	r3, r3
 8004f6a:	693a      	ldr	r2, [r7, #16]
 8004f6c:	4013      	ands	r3, r2
 8004f6e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	685b      	ldr	r3, [r3, #4]
 8004f74:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d003      	beq.n	8004f84 <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 8004f7c:	693a      	ldr	r2, [r7, #16]
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	4313      	orrs	r3, r2
 8004f82:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004f84:	4a2e      	ldr	r2, [pc, #184]	@ (8005040 <HAL_GPIO_Init+0x2bc>)
 8004f86:	693b      	ldr	r3, [r7, #16]
 8004f88:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004f8a:	4b2d      	ldr	r3, [pc, #180]	@ (8005040 <HAL_GPIO_Init+0x2bc>)
 8004f8c:	685b      	ldr	r3, [r3, #4]
 8004f8e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	43db      	mvns	r3, r3
 8004f94:	693a      	ldr	r2, [r7, #16]
 8004f96:	4013      	ands	r3, r2
 8004f98:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	685b      	ldr	r3, [r3, #4]
 8004f9e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d003      	beq.n	8004fae <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 8004fa6:	693a      	ldr	r2, [r7, #16]
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	4313      	orrs	r3, r2
 8004fac:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004fae:	4a24      	ldr	r2, [pc, #144]	@ (8005040 <HAL_GPIO_Init+0x2bc>)
 8004fb0:	693b      	ldr	r3, [r7, #16]
 8004fb2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8004fb4:	4b22      	ldr	r3, [pc, #136]	@ (8005040 <HAL_GPIO_Init+0x2bc>)
 8004fb6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004fba:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	43db      	mvns	r3, r3
 8004fc0:	693a      	ldr	r2, [r7, #16]
 8004fc2:	4013      	ands	r3, r2
 8004fc4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	685b      	ldr	r3, [r3, #4]
 8004fca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d003      	beq.n	8004fda <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 8004fd2:	693a      	ldr	r2, [r7, #16]
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	4313      	orrs	r3, r2
 8004fd8:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8004fda:	4a19      	ldr	r2, [pc, #100]	@ (8005040 <HAL_GPIO_Init+0x2bc>)
 8004fdc:	693b      	ldr	r3, [r7, #16]
 8004fde:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 8004fe2:	4b17      	ldr	r3, [pc, #92]	@ (8005040 <HAL_GPIO_Init+0x2bc>)
 8004fe4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004fe8:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	43db      	mvns	r3, r3
 8004fee:	693a      	ldr	r2, [r7, #16]
 8004ff0:	4013      	ands	r3, r2
 8004ff2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	685b      	ldr	r3, [r3, #4]
 8004ff8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d003      	beq.n	8005008 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8005000:	693a      	ldr	r2, [r7, #16]
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	4313      	orrs	r3, r2
 8005006:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8005008:	4a0d      	ldr	r2, [pc, #52]	@ (8005040 <HAL_GPIO_Init+0x2bc>)
 800500a:	693b      	ldr	r3, [r7, #16]
 800500c:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 8005010:	697b      	ldr	r3, [r7, #20]
 8005012:	3301      	adds	r3, #1
 8005014:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	681a      	ldr	r2, [r3, #0]
 800501a:	697b      	ldr	r3, [r7, #20]
 800501c:	fa22 f303 	lsr.w	r3, r2, r3
 8005020:	2b00      	cmp	r3, #0
 8005022:	f47f aeb7 	bne.w	8004d94 <HAL_GPIO_Init+0x10>
  }
}
 8005026:	bf00      	nop
 8005028:	bf00      	nop
 800502a:	371c      	adds	r7, #28
 800502c:	46bd      	mov	sp, r7
 800502e:	bc80      	pop	{r7}
 8005030:	4770      	bx	lr
 8005032:	bf00      	nop
 8005034:	40010000 	.word	0x40010000
 8005038:	48000400 	.word	0x48000400
 800503c:	48000800 	.word	0x48000800
 8005040:	58000800 	.word	0x58000800

08005044 <HAL_GPIO_DeInit>:
  * @param GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8005044:	b480      	push	{r7}
 8005046:	b087      	sub	sp, #28
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
 800504c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800504e:	2300      	movs	r3, #0
 8005050:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8005052:	e0af      	b.n	80051b4 <HAL_GPIO_DeInit+0x170>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8005054:	2201      	movs	r2, #1
 8005056:	697b      	ldr	r3, [r7, #20]
 8005058:	fa02 f303 	lsl.w	r3, r2, r3
 800505c:	683a      	ldr	r2, [r7, #0]
 800505e:	4013      	ands	r3, r2
 8005060:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8005062:	693b      	ldr	r3, [r7, #16]
 8005064:	2b00      	cmp	r3, #0
 8005066:	f000 80a2 	beq.w	80051ae <HAL_GPIO_DeInit+0x16a>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 800506a:	4a59      	ldr	r2, [pc, #356]	@ (80051d0 <HAL_GPIO_DeInit+0x18c>)
 800506c:	697b      	ldr	r3, [r7, #20]
 800506e:	089b      	lsrs	r3, r3, #2
 8005070:	3302      	adds	r3, #2
 8005072:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005076:	60fb      	str	r3, [r7, #12]
      tmp &= (0x07uL << (4U * (position & 0x03U)));
 8005078:	697b      	ldr	r3, [r7, #20]
 800507a:	f003 0303 	and.w	r3, r3, #3
 800507e:	009b      	lsls	r3, r3, #2
 8005080:	2207      	movs	r2, #7
 8005082:	fa02 f303 	lsl.w	r3, r2, r3
 8005086:	68fa      	ldr	r2, [r7, #12]
 8005088:	4013      	ands	r3, r2
 800508a:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8005092:	d00d      	beq.n	80050b0 <HAL_GPIO_DeInit+0x6c>
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	4a4f      	ldr	r2, [pc, #316]	@ (80051d4 <HAL_GPIO_DeInit+0x190>)
 8005098:	4293      	cmp	r3, r2
 800509a:	d007      	beq.n	80050ac <HAL_GPIO_DeInit+0x68>
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	4a4e      	ldr	r2, [pc, #312]	@ (80051d8 <HAL_GPIO_DeInit+0x194>)
 80050a0:	4293      	cmp	r3, r2
 80050a2:	d101      	bne.n	80050a8 <HAL_GPIO_DeInit+0x64>
 80050a4:	2302      	movs	r3, #2
 80050a6:	e004      	b.n	80050b2 <HAL_GPIO_DeInit+0x6e>
 80050a8:	2307      	movs	r3, #7
 80050aa:	e002      	b.n	80050b2 <HAL_GPIO_DeInit+0x6e>
 80050ac:	2301      	movs	r3, #1
 80050ae:	e000      	b.n	80050b2 <HAL_GPIO_DeInit+0x6e>
 80050b0:	2300      	movs	r3, #0
 80050b2:	697a      	ldr	r2, [r7, #20]
 80050b4:	f002 0203 	and.w	r2, r2, #3
 80050b8:	0092      	lsls	r2, r2, #2
 80050ba:	4093      	lsls	r3, r2
 80050bc:	68fa      	ldr	r2, [r7, #12]
 80050be:	429a      	cmp	r2, r3
 80050c0:	d136      	bne.n	8005130 <HAL_GPIO_DeInit+0xec>
        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 &= ~(iocurrent);
        EXTI->C2EMR1 &= ~(iocurrent);
#else
        EXTI->IMR1 &= ~(iocurrent);
 80050c2:	4b46      	ldr	r3, [pc, #280]	@ (80051dc <HAL_GPIO_DeInit+0x198>)
 80050c4:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 80050c8:	693b      	ldr	r3, [r7, #16]
 80050ca:	43db      	mvns	r3, r3
 80050cc:	4943      	ldr	r1, [pc, #268]	@ (80051dc <HAL_GPIO_DeInit+0x198>)
 80050ce:	4013      	ands	r3, r2
 80050d0:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
        EXTI->EMR1 &= ~(iocurrent);
 80050d4:	4b41      	ldr	r3, [pc, #260]	@ (80051dc <HAL_GPIO_DeInit+0x198>)
 80050d6:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 80050da:	693b      	ldr	r3, [r7, #16]
 80050dc:	43db      	mvns	r3, r3
 80050de:	493f      	ldr	r1, [pc, #252]	@ (80051dc <HAL_GPIO_DeInit+0x198>)
 80050e0:	4013      	ands	r3, r2
 80050e2:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* CORE_CM0PLUS */

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 80050e6:	4b3d      	ldr	r3, [pc, #244]	@ (80051dc <HAL_GPIO_DeInit+0x198>)
 80050e8:	681a      	ldr	r2, [r3, #0]
 80050ea:	693b      	ldr	r3, [r7, #16]
 80050ec:	43db      	mvns	r3, r3
 80050ee:	493b      	ldr	r1, [pc, #236]	@ (80051dc <HAL_GPIO_DeInit+0x198>)
 80050f0:	4013      	ands	r3, r2
 80050f2:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 80050f4:	4b39      	ldr	r3, [pc, #228]	@ (80051dc <HAL_GPIO_DeInit+0x198>)
 80050f6:	685a      	ldr	r2, [r3, #4]
 80050f8:	693b      	ldr	r3, [r7, #16]
 80050fa:	43db      	mvns	r3, r3
 80050fc:	4937      	ldr	r1, [pc, #220]	@ (80051dc <HAL_GPIO_DeInit+0x198>)
 80050fe:	4013      	ands	r3, r2
 8005100:	604b      	str	r3, [r1, #4]

        /* Clear EXTICR configuration */
        tmp = 0x07uL << (4u * (position & 0x03U));
 8005102:	697b      	ldr	r3, [r7, #20]
 8005104:	f003 0303 	and.w	r3, r3, #3
 8005108:	009b      	lsls	r3, r3, #2
 800510a:	2207      	movs	r2, #7
 800510c:	fa02 f303 	lsl.w	r3, r2, r3
 8005110:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8005112:	4a2f      	ldr	r2, [pc, #188]	@ (80051d0 <HAL_GPIO_DeInit+0x18c>)
 8005114:	697b      	ldr	r3, [r7, #20]
 8005116:	089b      	lsrs	r3, r3, #2
 8005118:	3302      	adds	r3, #2
 800511a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	43da      	mvns	r2, r3
 8005122:	482b      	ldr	r0, [pc, #172]	@ (80051d0 <HAL_GPIO_DeInit+0x18c>)
 8005124:	697b      	ldr	r3, [r7, #20]
 8005126:	089b      	lsrs	r3, r3, #2
 8005128:	400a      	ands	r2, r1
 800512a:	3302      	adds	r3, #2
 800512c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681a      	ldr	r2, [r3, #0]
 8005134:	697b      	ldr	r3, [r7, #20]
 8005136:	005b      	lsls	r3, r3, #1
 8005138:	2103      	movs	r1, #3
 800513a:	fa01 f303 	lsl.w	r3, r1, r3
 800513e:	431a      	orrs	r2, r3
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8005144:	697b      	ldr	r3, [r7, #20]
 8005146:	08da      	lsrs	r2, r3, #3
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	3208      	adds	r2, #8
 800514c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005150:	697b      	ldr	r3, [r7, #20]
 8005152:	f003 0307 	and.w	r3, r3, #7
 8005156:	009b      	lsls	r3, r3, #2
 8005158:	220f      	movs	r2, #15
 800515a:	fa02 f303 	lsl.w	r3, r2, r3
 800515e:	43db      	mvns	r3, r3
 8005160:	697a      	ldr	r2, [r7, #20]
 8005162:	08d2      	lsrs	r2, r2, #3
 8005164:	4019      	ands	r1, r3
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	3208      	adds	r2, #8
 800516a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	689a      	ldr	r2, [r3, #8]
 8005172:	697b      	ldr	r3, [r7, #20]
 8005174:	005b      	lsls	r3, r3, #1
 8005176:	2103      	movs	r1, #3
 8005178:	fa01 f303 	lsl.w	r3, r1, r3
 800517c:	43db      	mvns	r3, r3
 800517e:	401a      	ands	r2, r3
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	685a      	ldr	r2, [r3, #4]
 8005188:	2101      	movs	r1, #1
 800518a:	697b      	ldr	r3, [r7, #20]
 800518c:	fa01 f303 	lsl.w	r3, r1, r3
 8005190:	43db      	mvns	r3, r3
 8005192:	401a      	ands	r2, r3
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	68da      	ldr	r2, [r3, #12]
 800519c:	697b      	ldr	r3, [r7, #20]
 800519e:	005b      	lsls	r3, r3, #1
 80051a0:	2103      	movs	r1, #3
 80051a2:	fa01 f303 	lsl.w	r3, r1, r3
 80051a6:	43db      	mvns	r3, r3
 80051a8:	401a      	ands	r2, r3
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	60da      	str	r2, [r3, #12]
    }

    position++;
 80051ae:	697b      	ldr	r3, [r7, #20]
 80051b0:	3301      	adds	r3, #1
 80051b2:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 80051b4:	683a      	ldr	r2, [r7, #0]
 80051b6:	697b      	ldr	r3, [r7, #20]
 80051b8:	fa22 f303 	lsr.w	r3, r2, r3
 80051bc:	2b00      	cmp	r3, #0
 80051be:	f47f af49 	bne.w	8005054 <HAL_GPIO_DeInit+0x10>
  }
}
 80051c2:	bf00      	nop
 80051c4:	bf00      	nop
 80051c6:	371c      	adds	r7, #28
 80051c8:	46bd      	mov	sp, r7
 80051ca:	bc80      	pop	{r7}
 80051cc:	4770      	bx	lr
 80051ce:	bf00      	nop
 80051d0:	40010000 	.word	0x40010000
 80051d4:	48000400 	.word	0x48000400
 80051d8:	48000800 	.word	0x48000800
 80051dc:	58000800 	.word	0x58000800

080051e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80051e0:	b480      	push	{r7}
 80051e2:	b083      	sub	sp, #12
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
 80051e8:	460b      	mov	r3, r1
 80051ea:	807b      	strh	r3, [r7, #2]
 80051ec:	4613      	mov	r3, r2
 80051ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80051f0:	787b      	ldrb	r3, [r7, #1]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d003      	beq.n	80051fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80051f6:	887a      	ldrh	r2, [r7, #2]
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80051fc:	e002      	b.n	8005204 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80051fe:	887a      	ldrh	r2, [r7, #2]
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005204:	bf00      	nop
 8005206:	370c      	adds	r7, #12
 8005208:	46bd      	mov	sp, r7
 800520a:	bc80      	pop	{r7}
 800520c:	4770      	bx	lr
	...

08005210 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005210:	b480      	push	{r7}
 8005212:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005214:	4b04      	ldr	r3, [pc, #16]	@ (8005228 <HAL_PWR_EnableBkUpAccess+0x18>)
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	4a03      	ldr	r2, [pc, #12]	@ (8005228 <HAL_PWR_EnableBkUpAccess+0x18>)
 800521a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800521e:	6013      	str	r3, [r2, #0]
}
 8005220:	bf00      	nop
 8005222:	46bd      	mov	sp, r7
 8005224:	bc80      	pop	{r7}
 8005226:	4770      	bx	lr
 8005228:	58000400 	.word	0x58000400

0800522c <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 800522c:	b580      	push	{r7, lr}
 800522e:	b082      	sub	sp, #8
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
 8005234:	460b      	mov	r3, r1
 8005236:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d10c      	bne.n	8005258 <HAL_PWR_EnterSLEEPMode+0x2c>
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 800523e:	4b13      	ldr	r3, [pc, #76]	@ (800528c <HAL_PWR_EnterSLEEPMode+0x60>)
 8005240:	695b      	ldr	r3, [r3, #20]
 8005242:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005246:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800524a:	d10d      	bne.n	8005268 <HAL_PWR_EnterSLEEPMode+0x3c>
    {
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 800524c:	f000 f83c 	bl	80052c8 <HAL_PWREx_DisableLowPowerRunMode>
 8005250:	4603      	mov	r3, r0
 8005252:	2b00      	cmp	r3, #0
 8005254:	d008      	beq.n	8005268 <HAL_PWR_EnterSLEEPMode+0x3c>
      {
        return ;
 8005256:	e015      	b.n	8005284 <HAL_PWR_EnterSLEEPMode+0x58>
  }
  else
  {
    /* If in run mode, first move to low-power run mode.
       The system clock frequency must be below 2 MHz at this point. */
    if (HAL_IS_BIT_CLR(PWR->SR2, (PWR_SR2_REGLPF)))
 8005258:	4b0c      	ldr	r3, [pc, #48]	@ (800528c <HAL_PWR_EnterSLEEPMode+0x60>)
 800525a:	695b      	ldr	r3, [r3, #20]
 800525c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005260:	2b00      	cmp	r3, #0
 8005262:	d101      	bne.n	8005268 <HAL_PWR_EnterSLEEPMode+0x3c>
    {
      HAL_PWREx_EnableLowPowerRunMode();
 8005264:	f000 f822 	bl	80052ac <HAL_PWREx_EnableLowPowerRunMode>
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8005268:	4b09      	ldr	r3, [pc, #36]	@ (8005290 <HAL_PWR_EnterSLEEPMode+0x64>)
 800526a:	691b      	ldr	r3, [r3, #16]
 800526c:	4a08      	ldr	r2, [pc, #32]	@ (8005290 <HAL_PWR_EnterSLEEPMode+0x64>)
 800526e:	f023 0304 	bic.w	r3, r3, #4
 8005272:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if (SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8005274:	78fb      	ldrb	r3, [r7, #3]
 8005276:	2b01      	cmp	r3, #1
 8005278:	d101      	bne.n	800527e <HAL_PWR_EnterSLEEPMode+0x52>
  {
    /* Request Wait For Interrupt */
    __WFI();
 800527a:	bf30      	wfi
 800527c:	e002      	b.n	8005284 <HAL_PWR_EnterSLEEPMode+0x58>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 800527e:	bf40      	sev
    __WFE();
 8005280:	bf20      	wfe
    __WFE();
 8005282:	bf20      	wfe
  }
}
 8005284:	3708      	adds	r7, #8
 8005286:	46bd      	mov	sp, r7
 8005288:	bd80      	pop	{r7, pc}
 800528a:	bf00      	nop
 800528c:	58000400 	.word	0x58000400
 8005290:	e000ed00 	.word	0xe000ed00

08005294 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005294:	b480      	push	{r7}
 8005296:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8005298:	4b03      	ldr	r3, [pc, #12]	@ (80052a8 <HAL_PWREx_GetVoltageRange+0x14>)
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 80052a0:	4618      	mov	r0, r3
 80052a2:	46bd      	mov	sp, r7
 80052a4:	bc80      	pop	{r7}
 80052a6:	4770      	bx	lr
 80052a8:	58000400 	.word	0x58000400

080052ac <HAL_PWREx_EnableLowPowerRunMode>:
  * @note  In Low-power Run mode, all I/O pins keep the same state as in Run mode.
  * @note  Clock frequency must be reduced below 2 MHz.
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
 80052ac:	b480      	push	{r7}
 80052ae:	af00      	add	r7, sp, #0
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 80052b0:	4b04      	ldr	r3, [pc, #16]	@ (80052c4 <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	4a03      	ldr	r2, [pc, #12]	@ (80052c4 <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 80052b6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80052ba:	6013      	str	r3, [r2, #0]
}
 80052bc:	bf00      	nop
 80052be:	46bd      	mov	sp, r7
 80052c0:	bc80      	pop	{r7}
 80052c2:	4770      	bx	lr
 80052c4:	58000400 	.word	0x58000400

080052c8 <HAL_PWREx_DisableLowPowerRunMode>:
  *        returns HAL_TIMEOUT status). The system clock frequency can then be
  *        increased above 2 MHz.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
 80052c8:	b480      	push	{r7}
 80052ca:	b083      	sub	sp, #12
 80052cc:	af00      	add	r7, sp, #0
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 80052ce:	4b16      	ldr	r3, [pc, #88]	@ (8005328 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	4a15      	ldr	r2, [pc, #84]	@ (8005328 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 80052d4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80052d8:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000UL);
 80052da:	4b14      	ldr	r3, [pc, #80]	@ (800532c <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	2232      	movs	r2, #50	@ 0x32
 80052e0:	fb02 f303 	mul.w	r3, r2, r3
 80052e4:	4a12      	ldr	r2, [pc, #72]	@ (8005330 <HAL_PWREx_DisableLowPowerRunMode+0x68>)
 80052e6:	fba2 2303 	umull	r2, r3, r2, r3
 80052ea:	0c9b      	lsrs	r3, r3, #18
 80052ec:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 80052ee:	e002      	b.n	80052f6 <HAL_PWREx_DisableLowPowerRunMode+0x2e>
  {
    wait_loop_index--;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	3b01      	subs	r3, #1
 80052f4:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 80052f6:	4b0c      	ldr	r3, [pc, #48]	@ (8005328 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 80052f8:	695b      	ldr	r3, [r3, #20]
 80052fa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80052fe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005302:	d102      	bne.n	800530a <HAL_PWREx_DisableLowPowerRunMode+0x42>
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2b00      	cmp	r3, #0
 8005308:	d1f2      	bne.n	80052f0 <HAL_PWREx_DisableLowPowerRunMode+0x28>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 800530a:	4b07      	ldr	r3, [pc, #28]	@ (8005328 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 800530c:	695b      	ldr	r3, [r3, #20]
 800530e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005312:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005316:	d101      	bne.n	800531c <HAL_PWREx_DisableLowPowerRunMode+0x54>
  {
    return HAL_TIMEOUT;
 8005318:	2303      	movs	r3, #3
 800531a:	e000      	b.n	800531e <HAL_PWREx_DisableLowPowerRunMode+0x56>
  }

  return HAL_OK;
 800531c:	2300      	movs	r3, #0
}
 800531e:	4618      	mov	r0, r3
 8005320:	370c      	adds	r7, #12
 8005322:	46bd      	mov	sp, r7
 8005324:	bc80      	pop	{r7}
 8005326:	4770      	bx	lr
 8005328:	58000400 	.word	0x58000400
 800532c:	20000000 	.word	0x20000000
 8005330:	431bde83 	.word	0x431bde83

08005334 <HAL_PWREx_EnterSTOP2Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP2Mode(uint8_t STOPEntry)
{
 8005334:	b480      	push	{r7}
 8005336:	b083      	sub	sp, #12
 8005338:	af00      	add	r7, sp, #0
 800533a:	4603      	mov	r3, r0
 800533c:	71fb      	strb	r3, [r7, #7]
#ifdef CORE_CM0PLUS
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
#else
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
 800533e:	4b10      	ldr	r3, [pc, #64]	@ (8005380 <HAL_PWREx_EnterSTOP2Mode+0x4c>)
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f023 0307 	bic.w	r3, r3, #7
 8005346:	4a0e      	ldr	r2, [pc, #56]	@ (8005380 <HAL_PWREx_EnterSTOP2Mode+0x4c>)
 8005348:	f043 0302 	orr.w	r3, r3, #2
 800534c:	6013      	str	r3, [r2, #0]
#endif

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800534e:	4b0d      	ldr	r3, [pc, #52]	@ (8005384 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8005350:	691b      	ldr	r3, [r3, #16]
 8005352:	4a0c      	ldr	r2, [pc, #48]	@ (8005384 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8005354:	f043 0304 	orr.w	r3, r3, #4
 8005358:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if (STOPEntry == PWR_STOPENTRY_WFI)
 800535a:	79fb      	ldrb	r3, [r7, #7]
 800535c:	2b01      	cmp	r3, #1
 800535e:	d101      	bne.n	8005364 <HAL_PWREx_EnterSTOP2Mode+0x30>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8005360:	bf30      	wfi
 8005362:	e002      	b.n	800536a <HAL_PWREx_EnterSTOP2Mode+0x36>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8005364:	bf40      	sev
    __WFE();
 8005366:	bf20      	wfe
    __WFE();
 8005368:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800536a:	4b06      	ldr	r3, [pc, #24]	@ (8005384 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 800536c:	691b      	ldr	r3, [r3, #16]
 800536e:	4a05      	ldr	r2, [pc, #20]	@ (8005384 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8005370:	f023 0304 	bic.w	r3, r3, #4
 8005374:	6113      	str	r3, [r2, #16]
}
 8005376:	bf00      	nop
 8005378:	370c      	adds	r7, #12
 800537a:	46bd      	mov	sp, r7
 800537c:	bc80      	pop	{r7}
 800537e:	4770      	bx	lr
 8005380:	58000400 	.word	0x58000400
 8005384:	e000ed00 	.word	0xe000ed00

08005388 <LL_PWR_IsEnabledBkUpAccess>:
{
 8005388:	b480      	push	{r7}
 800538a:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 800538c:	4b06      	ldr	r3, [pc, #24]	@ (80053a8 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005394:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005398:	d101      	bne.n	800539e <LL_PWR_IsEnabledBkUpAccess+0x16>
 800539a:	2301      	movs	r3, #1
 800539c:	e000      	b.n	80053a0 <LL_PWR_IsEnabledBkUpAccess+0x18>
 800539e:	2300      	movs	r3, #0
}
 80053a0:	4618      	mov	r0, r3
 80053a2:	46bd      	mov	sp, r7
 80053a4:	bc80      	pop	{r7}
 80053a6:	4770      	bx	lr
 80053a8:	58000400 	.word	0x58000400

080053ac <LL_RCC_HSE_EnableTcxo>:
{
 80053ac:	b480      	push	{r7}
 80053ae:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 80053b0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80053ba:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80053be:	6013      	str	r3, [r2, #0]
}
 80053c0:	bf00      	nop
 80053c2:	46bd      	mov	sp, r7
 80053c4:	bc80      	pop	{r7}
 80053c6:	4770      	bx	lr

080053c8 <LL_RCC_HSE_DisableTcxo>:
{
 80053c8:	b480      	push	{r7}
 80053ca:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 80053cc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80053d6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80053da:	6013      	str	r3, [r2, #0]
}
 80053dc:	bf00      	nop
 80053de:	46bd      	mov	sp, r7
 80053e0:	bc80      	pop	{r7}
 80053e2:	4770      	bx	lr

080053e4 <LL_RCC_HSE_IsEnabledDiv2>:
{
 80053e4:	b480      	push	{r7}
 80053e6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80053e8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80053f2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80053f6:	d101      	bne.n	80053fc <LL_RCC_HSE_IsEnabledDiv2+0x18>
 80053f8:	2301      	movs	r3, #1
 80053fa:	e000      	b.n	80053fe <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 80053fc:	2300      	movs	r3, #0
}
 80053fe:	4618      	mov	r0, r3
 8005400:	46bd      	mov	sp, r7
 8005402:	bc80      	pop	{r7}
 8005404:	4770      	bx	lr

08005406 <LL_RCC_HSE_Enable>:
{
 8005406:	b480      	push	{r7}
 8005408:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800540a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005414:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005418:	6013      	str	r3, [r2, #0]
}
 800541a:	bf00      	nop
 800541c:	46bd      	mov	sp, r7
 800541e:	bc80      	pop	{r7}
 8005420:	4770      	bx	lr

08005422 <LL_RCC_HSE_Disable>:
{
 8005422:	b480      	push	{r7}
 8005424:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8005426:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005430:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005434:	6013      	str	r3, [r2, #0]
}
 8005436:	bf00      	nop
 8005438:	46bd      	mov	sp, r7
 800543a:	bc80      	pop	{r7}
 800543c:	4770      	bx	lr

0800543e <LL_RCC_HSE_IsReady>:
{
 800543e:	b480      	push	{r7}
 8005440:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8005442:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800544c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005450:	d101      	bne.n	8005456 <LL_RCC_HSE_IsReady+0x18>
 8005452:	2301      	movs	r3, #1
 8005454:	e000      	b.n	8005458 <LL_RCC_HSE_IsReady+0x1a>
 8005456:	2300      	movs	r3, #0
}
 8005458:	4618      	mov	r0, r3
 800545a:	46bd      	mov	sp, r7
 800545c:	bc80      	pop	{r7}
 800545e:	4770      	bx	lr

08005460 <LL_RCC_HSI_Enable>:
{
 8005460:	b480      	push	{r7}
 8005462:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8005464:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800546e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005472:	6013      	str	r3, [r2, #0]
}
 8005474:	bf00      	nop
 8005476:	46bd      	mov	sp, r7
 8005478:	bc80      	pop	{r7}
 800547a:	4770      	bx	lr

0800547c <LL_RCC_HSI_Disable>:
{
 800547c:	b480      	push	{r7}
 800547e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8005480:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800548a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800548e:	6013      	str	r3, [r2, #0]
}
 8005490:	bf00      	nop
 8005492:	46bd      	mov	sp, r7
 8005494:	bc80      	pop	{r7}
 8005496:	4770      	bx	lr

08005498 <LL_RCC_HSI_IsReady>:
{
 8005498:	b480      	push	{r7}
 800549a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800549c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80054a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80054aa:	d101      	bne.n	80054b0 <LL_RCC_HSI_IsReady+0x18>
 80054ac:	2301      	movs	r3, #1
 80054ae:	e000      	b.n	80054b2 <LL_RCC_HSI_IsReady+0x1a>
 80054b0:	2300      	movs	r3, #0
}
 80054b2:	4618      	mov	r0, r3
 80054b4:	46bd      	mov	sp, r7
 80054b6:	bc80      	pop	{r7}
 80054b8:	4770      	bx	lr

080054ba <LL_RCC_HSI_SetCalibTrimming>:
{
 80054ba:	b480      	push	{r7}
 80054bc:	b083      	sub	sp, #12
 80054be:	af00      	add	r7, sp, #0
 80054c0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80054c2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80054c6:	685b      	ldr	r3, [r3, #4]
 80054c8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	061b      	lsls	r3, r3, #24
 80054d0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80054d4:	4313      	orrs	r3, r2
 80054d6:	604b      	str	r3, [r1, #4]
}
 80054d8:	bf00      	nop
 80054da:	370c      	adds	r7, #12
 80054dc:	46bd      	mov	sp, r7
 80054de:	bc80      	pop	{r7}
 80054e0:	4770      	bx	lr

080054e2 <LL_RCC_LSE_IsReady>:
{
 80054e2:	b480      	push	{r7}
 80054e4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80054e6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80054ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80054ee:	f003 0302 	and.w	r3, r3, #2
 80054f2:	2b02      	cmp	r3, #2
 80054f4:	d101      	bne.n	80054fa <LL_RCC_LSE_IsReady+0x18>
 80054f6:	2301      	movs	r3, #1
 80054f8:	e000      	b.n	80054fc <LL_RCC_LSE_IsReady+0x1a>
 80054fa:	2300      	movs	r3, #0
}
 80054fc:	4618      	mov	r0, r3
 80054fe:	46bd      	mov	sp, r7
 8005500:	bc80      	pop	{r7}
 8005502:	4770      	bx	lr

08005504 <LL_RCC_LSI_Enable>:
{
 8005504:	b480      	push	{r7}
 8005506:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8005508:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800550c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005510:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005514:	f043 0301 	orr.w	r3, r3, #1
 8005518:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800551c:	bf00      	nop
 800551e:	46bd      	mov	sp, r7
 8005520:	bc80      	pop	{r7}
 8005522:	4770      	bx	lr

08005524 <LL_RCC_LSI_Disable>:
{
 8005524:	b480      	push	{r7}
 8005526:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8005528:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800552c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005530:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005534:	f023 0301 	bic.w	r3, r3, #1
 8005538:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800553c:	bf00      	nop
 800553e:	46bd      	mov	sp, r7
 8005540:	bc80      	pop	{r7}
 8005542:	4770      	bx	lr

08005544 <LL_RCC_LSI_IsReady>:
{
 8005544:	b480      	push	{r7}
 8005546:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8005548:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800554c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005550:	f003 0302 	and.w	r3, r3, #2
 8005554:	2b02      	cmp	r3, #2
 8005556:	d101      	bne.n	800555c <LL_RCC_LSI_IsReady+0x18>
 8005558:	2301      	movs	r3, #1
 800555a:	e000      	b.n	800555e <LL_RCC_LSI_IsReady+0x1a>
 800555c:	2300      	movs	r3, #0
}
 800555e:	4618      	mov	r0, r3
 8005560:	46bd      	mov	sp, r7
 8005562:	bc80      	pop	{r7}
 8005564:	4770      	bx	lr

08005566 <LL_RCC_MSI_Enable>:
{
 8005566:	b480      	push	{r7}
 8005568:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 800556a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005574:	f043 0301 	orr.w	r3, r3, #1
 8005578:	6013      	str	r3, [r2, #0]
}
 800557a:	bf00      	nop
 800557c:	46bd      	mov	sp, r7
 800557e:	bc80      	pop	{r7}
 8005580:	4770      	bx	lr

08005582 <LL_RCC_MSI_Disable>:
{
 8005582:	b480      	push	{r7}
 8005584:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8005586:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005590:	f023 0301 	bic.w	r3, r3, #1
 8005594:	6013      	str	r3, [r2, #0]
}
 8005596:	bf00      	nop
 8005598:	46bd      	mov	sp, r7
 800559a:	bc80      	pop	{r7}
 800559c:	4770      	bx	lr

0800559e <LL_RCC_MSI_IsReady>:
{
 800559e:	b480      	push	{r7}
 80055a0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80055a2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f003 0302 	and.w	r3, r3, #2
 80055ac:	2b02      	cmp	r3, #2
 80055ae:	d101      	bne.n	80055b4 <LL_RCC_MSI_IsReady+0x16>
 80055b0:	2301      	movs	r3, #1
 80055b2:	e000      	b.n	80055b6 <LL_RCC_MSI_IsReady+0x18>
 80055b4:	2300      	movs	r3, #0
}
 80055b6:	4618      	mov	r0, r3
 80055b8:	46bd      	mov	sp, r7
 80055ba:	bc80      	pop	{r7}
 80055bc:	4770      	bx	lr

080055be <LL_RCC_MSI_IsEnabledRangeSelect>:
{
 80055be:	b480      	push	{r7}
 80055c0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 80055c2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f003 0308 	and.w	r3, r3, #8
 80055cc:	2b08      	cmp	r3, #8
 80055ce:	d101      	bne.n	80055d4 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 80055d0:	2301      	movs	r3, #1
 80055d2:	e000      	b.n	80055d6 <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 80055d4:	2300      	movs	r3, #0
}
 80055d6:	4618      	mov	r0, r3
 80055d8:	46bd      	mov	sp, r7
 80055da:	bc80      	pop	{r7}
 80055dc:	4770      	bx	lr

080055de <LL_RCC_MSI_GetRange>:
{
 80055de:	b480      	push	{r7}
 80055e0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 80055e2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 80055ec:	4618      	mov	r0, r3
 80055ee:	46bd      	mov	sp, r7
 80055f0:	bc80      	pop	{r7}
 80055f2:	4770      	bx	lr

080055f4 <LL_RCC_MSI_GetRangeAfterStandby>:
{
 80055f4:	b480      	push	{r7}
 80055f6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 80055f8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80055fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005600:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
}
 8005604:	4618      	mov	r0, r3
 8005606:	46bd      	mov	sp, r7
 8005608:	bc80      	pop	{r7}
 800560a:	4770      	bx	lr

0800560c <LL_RCC_MSI_SetCalibTrimming>:
{
 800560c:	b480      	push	{r7}
 800560e:	b083      	sub	sp, #12
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8005614:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005618:	685b      	ldr	r3, [r3, #4]
 800561a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	021b      	lsls	r3, r3, #8
 8005622:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005626:	4313      	orrs	r3, r2
 8005628:	604b      	str	r3, [r1, #4]
}
 800562a:	bf00      	nop
 800562c:	370c      	adds	r7, #12
 800562e:	46bd      	mov	sp, r7
 8005630:	bc80      	pop	{r7}
 8005632:	4770      	bx	lr

08005634 <LL_RCC_SetSysClkSource>:
{
 8005634:	b480      	push	{r7}
 8005636:	b083      	sub	sp, #12
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800563c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005640:	689b      	ldr	r3, [r3, #8]
 8005642:	f023 0203 	bic.w	r2, r3, #3
 8005646:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	4313      	orrs	r3, r2
 800564e:	608b      	str	r3, [r1, #8]
}
 8005650:	bf00      	nop
 8005652:	370c      	adds	r7, #12
 8005654:	46bd      	mov	sp, r7
 8005656:	bc80      	pop	{r7}
 8005658:	4770      	bx	lr

0800565a <LL_RCC_GetSysClkSource>:
{
 800565a:	b480      	push	{r7}
 800565c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800565e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005662:	689b      	ldr	r3, [r3, #8]
 8005664:	f003 030c 	and.w	r3, r3, #12
}
 8005668:	4618      	mov	r0, r3
 800566a:	46bd      	mov	sp, r7
 800566c:	bc80      	pop	{r7}
 800566e:	4770      	bx	lr

08005670 <LL_RCC_SetAHBPrescaler>:
{
 8005670:	b480      	push	{r7}
 8005672:	b083      	sub	sp, #12
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8005678:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800567c:	689b      	ldr	r3, [r3, #8]
 800567e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005682:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	4313      	orrs	r3, r2
 800568a:	608b      	str	r3, [r1, #8]
}
 800568c:	bf00      	nop
 800568e:	370c      	adds	r7, #12
 8005690:	46bd      	mov	sp, r7
 8005692:	bc80      	pop	{r7}
 8005694:	4770      	bx	lr

08005696 <LL_RCC_SetAHB3Prescaler>:
{
 8005696:	b480      	push	{r7}
 8005698:	b083      	sub	sp, #12
 800569a:	af00      	add	r7, sp, #0
 800569c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800569e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80056a2:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80056a6:	f023 020f 	bic.w	r2, r3, #15
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	091b      	lsrs	r3, r3, #4
 80056ae:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80056b2:	4313      	orrs	r3, r2
 80056b4:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 80056b8:	bf00      	nop
 80056ba:	370c      	adds	r7, #12
 80056bc:	46bd      	mov	sp, r7
 80056be:	bc80      	pop	{r7}
 80056c0:	4770      	bx	lr

080056c2 <LL_RCC_SetAPB1Prescaler>:
{
 80056c2:	b480      	push	{r7}
 80056c4:	b083      	sub	sp, #12
 80056c6:	af00      	add	r7, sp, #0
 80056c8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80056ca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80056ce:	689b      	ldr	r3, [r3, #8]
 80056d0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80056d4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	4313      	orrs	r3, r2
 80056dc:	608b      	str	r3, [r1, #8]
}
 80056de:	bf00      	nop
 80056e0:	370c      	adds	r7, #12
 80056e2:	46bd      	mov	sp, r7
 80056e4:	bc80      	pop	{r7}
 80056e6:	4770      	bx	lr

080056e8 <LL_RCC_SetAPB2Prescaler>:
{
 80056e8:	b480      	push	{r7}
 80056ea:	b083      	sub	sp, #12
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80056f0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80056f4:	689b      	ldr	r3, [r3, #8]
 80056f6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80056fa:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	4313      	orrs	r3, r2
 8005702:	608b      	str	r3, [r1, #8]
}
 8005704:	bf00      	nop
 8005706:	370c      	adds	r7, #12
 8005708:	46bd      	mov	sp, r7
 800570a:	bc80      	pop	{r7}
 800570c:	4770      	bx	lr

0800570e <LL_RCC_GetAHBPrescaler>:
{
 800570e:	b480      	push	{r7}
 8005710:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8005712:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005716:	689b      	ldr	r3, [r3, #8]
 8005718:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 800571c:	4618      	mov	r0, r3
 800571e:	46bd      	mov	sp, r7
 8005720:	bc80      	pop	{r7}
 8005722:	4770      	bx	lr

08005724 <LL_RCC_GetAHB3Prescaler>:
{
 8005724:	b480      	push	{r7}
 8005726:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8005728:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800572c:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8005730:	011b      	lsls	r3, r3, #4
 8005732:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8005736:	4618      	mov	r0, r3
 8005738:	46bd      	mov	sp, r7
 800573a:	bc80      	pop	{r7}
 800573c:	4770      	bx	lr

0800573e <LL_RCC_GetAPB1Prescaler>:
{
 800573e:	b480      	push	{r7}
 8005740:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8005742:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005746:	689b      	ldr	r3, [r3, #8]
 8005748:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 800574c:	4618      	mov	r0, r3
 800574e:	46bd      	mov	sp, r7
 8005750:	bc80      	pop	{r7}
 8005752:	4770      	bx	lr

08005754 <LL_RCC_GetAPB2Prescaler>:
{
 8005754:	b480      	push	{r7}
 8005756:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8005758:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800575c:	689b      	ldr	r3, [r3, #8]
 800575e:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 8005762:	4618      	mov	r0, r3
 8005764:	46bd      	mov	sp, r7
 8005766:	bc80      	pop	{r7}
 8005768:	4770      	bx	lr

0800576a <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 800576a:	b480      	push	{r7}
 800576c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800576e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005778:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800577c:	6013      	str	r3, [r2, #0]
}
 800577e:	bf00      	nop
 8005780:	46bd      	mov	sp, r7
 8005782:	bc80      	pop	{r7}
 8005784:	4770      	bx	lr

08005786 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8005786:	b480      	push	{r7}
 8005788:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800578a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005794:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005798:	6013      	str	r3, [r2, #0]
}
 800579a:	bf00      	nop
 800579c:	46bd      	mov	sp, r7
 800579e:	bc80      	pop	{r7}
 80057a0:	4770      	bx	lr

080057a2 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80057a2:	b480      	push	{r7}
 80057a4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80057a6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80057b0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80057b4:	d101      	bne.n	80057ba <LL_RCC_PLL_IsReady+0x18>
 80057b6:	2301      	movs	r3, #1
 80057b8:	e000      	b.n	80057bc <LL_RCC_PLL_IsReady+0x1a>
 80057ba:	2300      	movs	r3, #0
}
 80057bc:	4618      	mov	r0, r3
 80057be:	46bd      	mov	sp, r7
 80057c0:	bc80      	pop	{r7}
 80057c2:	4770      	bx	lr

080057c4 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80057c4:	b480      	push	{r7}
 80057c6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80057c8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80057cc:	68db      	ldr	r3, [r3, #12]
 80057ce:	0a1b      	lsrs	r3, r3, #8
 80057d0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 80057d4:	4618      	mov	r0, r3
 80057d6:	46bd      	mov	sp, r7
 80057d8:	bc80      	pop	{r7}
 80057da:	4770      	bx	lr

080057dc <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 80057dc:	b480      	push	{r7}
 80057de:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80057e0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80057e4:	68db      	ldr	r3, [r3, #12]
 80057e6:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 80057ea:	4618      	mov	r0, r3
 80057ec:	46bd      	mov	sp, r7
 80057ee:	bc80      	pop	{r7}
 80057f0:	4770      	bx	lr

080057f2 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80057f2:	b480      	push	{r7}
 80057f4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80057f6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80057fa:	68db      	ldr	r3, [r3, #12]
 80057fc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 8005800:	4618      	mov	r0, r3
 8005802:	46bd      	mov	sp, r7
 8005804:	bc80      	pop	{r7}
 8005806:	4770      	bx	lr

08005808 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8005808:	b480      	push	{r7}
 800580a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800580c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005810:	68db      	ldr	r3, [r3, #12]
 8005812:	f003 0303 	and.w	r3, r3, #3
}
 8005816:	4618      	mov	r0, r3
 8005818:	46bd      	mov	sp, r7
 800581a:	bc80      	pop	{r7}
 800581c:	4770      	bx	lr

0800581e <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 800581e:	b480      	push	{r7}
 8005820:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8005822:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005826:	689b      	ldr	r3, [r3, #8]
 8005828:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800582c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005830:	d101      	bne.n	8005836 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8005832:	2301      	movs	r3, #1
 8005834:	e000      	b.n	8005838 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8005836:	2300      	movs	r3, #0
}
 8005838:	4618      	mov	r0, r3
 800583a:	46bd      	mov	sp, r7
 800583c:	bc80      	pop	{r7}
 800583e:	4770      	bx	lr

08005840 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8005840:	b480      	push	{r7}
 8005842:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8005844:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005848:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800584c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005850:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005854:	d101      	bne.n	800585a <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8005856:	2301      	movs	r3, #1
 8005858:	e000      	b.n	800585c <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 800585a:	2300      	movs	r3, #0
}
 800585c:	4618      	mov	r0, r3
 800585e:	46bd      	mov	sp, r7
 8005860:	bc80      	pop	{r7}
 8005862:	4770      	bx	lr

08005864 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8005864:	b480      	push	{r7}
 8005866:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8005868:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800586c:	689b      	ldr	r3, [r3, #8]
 800586e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005872:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005876:	d101      	bne.n	800587c <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8005878:	2301      	movs	r3, #1
 800587a:	e000      	b.n	800587e <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 800587c:	2300      	movs	r3, #0
}
 800587e:	4618      	mov	r0, r3
 8005880:	46bd      	mov	sp, r7
 8005882:	bc80      	pop	{r7}
 8005884:	4770      	bx	lr

08005886 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8005886:	b480      	push	{r7}
 8005888:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800588a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800588e:	689b      	ldr	r3, [r3, #8]
 8005890:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005894:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005898:	d101      	bne.n	800589e <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800589a:	2301      	movs	r3, #1
 800589c:	e000      	b.n	80058a0 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 800589e:	2300      	movs	r3, #0
}
 80058a0:	4618      	mov	r0, r3
 80058a2:	46bd      	mov	sp, r7
 80058a4:	bc80      	pop	{r7}
 80058a6:	4770      	bx	lr

080058a8 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80058a8:	b580      	push	{r7, lr}
 80058aa:	b088      	sub	sp, #32
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d101      	bne.n	80058ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80058b6:	2301      	movs	r3, #1
 80058b8:	e36f      	b.n	8005f9a <HAL_RCC_OscConfig+0x6f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80058ba:	f7ff fece 	bl	800565a <LL_RCC_GetSysClkSource>
 80058be:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80058c0:	f7ff ffa2 	bl	8005808 <LL_RCC_PLL_GetMainSource>
 80058c4:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f003 0320 	and.w	r3, r3, #32
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	f000 80c4 	beq.w	8005a5c <HAL_RCC_OscConfig+0x1b4>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80058d4:	69fb      	ldr	r3, [r7, #28]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d005      	beq.n	80058e6 <HAL_RCC_OscConfig+0x3e>
 80058da:	69fb      	ldr	r3, [r7, #28]
 80058dc:	2b0c      	cmp	r3, #12
 80058de:	d176      	bne.n	80059ce <HAL_RCC_OscConfig+0x126>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 80058e0:	69bb      	ldr	r3, [r7, #24]
 80058e2:	2b01      	cmp	r3, #1
 80058e4:	d173      	bne.n	80059ce <HAL_RCC_OscConfig+0x126>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	6a1b      	ldr	r3, [r3, #32]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d101      	bne.n	80058f2 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 80058ee:	2301      	movs	r3, #1
 80058f0:	e353      	b.n	8005f9a <HAL_RCC_OscConfig+0x6f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80058f6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f003 0308 	and.w	r3, r3, #8
 8005900:	2b00      	cmp	r3, #0
 8005902:	d005      	beq.n	8005910 <HAL_RCC_OscConfig+0x68>
 8005904:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800590e:	e006      	b.n	800591e <HAL_RCC_OscConfig+0x76>
 8005910:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005914:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005918:	091b      	lsrs	r3, r3, #4
 800591a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800591e:	4293      	cmp	r3, r2
 8005920:	d222      	bcs.n	8005968 <HAL_RCC_OscConfig+0xc0>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005926:	4618      	mov	r0, r3
 8005928:	f000 fd3c 	bl	80063a4 <RCC_SetFlashLatencyFromMSIRange>
 800592c:	4603      	mov	r3, r0
 800592e:	2b00      	cmp	r3, #0
 8005930:	d001      	beq.n	8005936 <HAL_RCC_OscConfig+0x8e>
          {
            return HAL_ERROR;
 8005932:	2301      	movs	r3, #1
 8005934:	e331      	b.n	8005f9a <HAL_RCC_OscConfig+0x6f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005936:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005940:	f043 0308 	orr.w	r3, r3, #8
 8005944:	6013      	str	r3, [r2, #0]
 8005946:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005954:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005958:	4313      	orrs	r3, r2
 800595a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005960:	4618      	mov	r0, r3
 8005962:	f7ff fe53 	bl	800560c <LL_RCC_MSI_SetCalibTrimming>
 8005966:	e021      	b.n	80059ac <HAL_RCC_OscConfig+0x104>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range. */
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005968:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005972:	f043 0308 	orr.w	r3, r3, #8
 8005976:	6013      	str	r3, [r2, #0]
 8005978:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005986:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800598a:	4313      	orrs	r3, r2
 800598c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005992:	4618      	mov	r0, r3
 8005994:	f7ff fe3a 	bl	800560c <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800599c:	4618      	mov	r0, r3
 800599e:	f000 fd01 	bl	80063a4 <RCC_SetFlashLatencyFromMSIRange>
 80059a2:	4603      	mov	r3, r0
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d001      	beq.n	80059ac <HAL_RCC_OscConfig+0x104>
          {
            return HAL_ERROR;
 80059a8:	2301      	movs	r3, #1
 80059aa:	e2f6      	b.n	8005f9a <HAL_RCC_OscConfig+0x6f2>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80059ac:	f000 fcc2 	bl	8006334 <HAL_RCC_GetHCLKFreq>
 80059b0:	4603      	mov	r3, r0
 80059b2:	4aa7      	ldr	r2, [pc, #668]	@ (8005c50 <HAL_RCC_OscConfig+0x3a8>)
 80059b4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings */
        status = HAL_InitTick(uwTickPrio);
 80059b6:	4ba7      	ldr	r3, [pc, #668]	@ (8005c54 <HAL_RCC_OscConfig+0x3ac>)
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	4618      	mov	r0, r3
 80059bc:	f7fd f834 	bl	8002a28 <HAL_InitTick>
 80059c0:	4603      	mov	r3, r0
 80059c2:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 80059c4:	7cfb      	ldrb	r3, [r7, #19]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d047      	beq.n	8005a5a <HAL_RCC_OscConfig+0x1b2>
        {
          return status;
 80059ca:	7cfb      	ldrb	r3, [r7, #19]
 80059cc:	e2e5      	b.n	8005f9a <HAL_RCC_OscConfig+0x6f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6a1b      	ldr	r3, [r3, #32]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d02c      	beq.n	8005a30 <HAL_RCC_OscConfig+0x188>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80059d6:	f7ff fdc6 	bl	8005566 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80059da:	f7fc f91b 	bl	8001c14 <HAL_GetTick>
 80059de:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 80059e0:	e008      	b.n	80059f4 <HAL_RCC_OscConfig+0x14c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80059e2:	f7fc f917 	bl	8001c14 <HAL_GetTick>
 80059e6:	4602      	mov	r2, r0
 80059e8:	697b      	ldr	r3, [r7, #20]
 80059ea:	1ad3      	subs	r3, r2, r3
 80059ec:	2b02      	cmp	r3, #2
 80059ee:	d901      	bls.n	80059f4 <HAL_RCC_OscConfig+0x14c>
          {
            return HAL_TIMEOUT;
 80059f0:	2303      	movs	r3, #3
 80059f2:	e2d2      	b.n	8005f9a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() == 0U)
 80059f4:	f7ff fdd3 	bl	800559e <LL_RCC_MSI_IsReady>
 80059f8:	4603      	mov	r3, r0
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d0f1      	beq.n	80059e2 <HAL_RCC_OscConfig+0x13a>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range. */
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80059fe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005a08:	f043 0308 	orr.w	r3, r3, #8
 8005a0c:	6013      	str	r3, [r2, #0]
 8005a0e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a1c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005a20:	4313      	orrs	r3, r2
 8005a22:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value. */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a28:	4618      	mov	r0, r3
 8005a2a:	f7ff fdef 	bl	800560c <LL_RCC_MSI_SetCalibTrimming>
 8005a2e:	e015      	b.n	8005a5c <HAL_RCC_OscConfig+0x1b4>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005a30:	f7ff fda7 	bl	8005582 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005a34:	f7fc f8ee 	bl	8001c14 <HAL_GetTick>
 8005a38:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8005a3a:	e008      	b.n	8005a4e <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005a3c:	f7fc f8ea 	bl	8001c14 <HAL_GetTick>
 8005a40:	4602      	mov	r2, r0
 8005a42:	697b      	ldr	r3, [r7, #20]
 8005a44:	1ad3      	subs	r3, r2, r3
 8005a46:	2b02      	cmp	r3, #2
 8005a48:	d901      	bls.n	8005a4e <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8005a4a:	2303      	movs	r3, #3
 8005a4c:	e2a5      	b.n	8005f9a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() != 0U)
 8005a4e:	f7ff fda6 	bl	800559e <LL_RCC_MSI_IsReady>
 8005a52:	4603      	mov	r3, r0
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d1f1      	bne.n	8005a3c <HAL_RCC_OscConfig+0x194>
 8005a58:	e000      	b.n	8005a5c <HAL_RCC_OscConfig+0x1b4>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8005a5a:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f003 0301 	and.w	r3, r3, #1
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d058      	beq.n	8005b1a <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8005a68:	69fb      	ldr	r3, [r7, #28]
 8005a6a:	2b08      	cmp	r3, #8
 8005a6c:	d005      	beq.n	8005a7a <HAL_RCC_OscConfig+0x1d2>
 8005a6e:	69fb      	ldr	r3, [r7, #28]
 8005a70:	2b0c      	cmp	r3, #12
 8005a72:	d108      	bne.n	8005a86 <HAL_RCC_OscConfig+0x1de>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005a74:	69bb      	ldr	r3, [r7, #24]
 8005a76:	2b03      	cmp	r3, #3
 8005a78:	d105      	bne.n	8005a86 <HAL_RCC_OscConfig+0x1de>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	685b      	ldr	r3, [r3, #4]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d14b      	bne.n	8005b1a <HAL_RCC_OscConfig+0x272>
      {
        return HAL_ERROR;
 8005a82:	2301      	movs	r3, #1
 8005a84:	e289      	b.n	8005f9a <HAL_RCC_OscConfig+0x6f2>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 8005a86:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	689b      	ldr	r3, [r3, #8]
 8005a94:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005a98:	4313      	orrs	r3, r2
 8005a9a:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	685b      	ldr	r3, [r3, #4]
 8005aa0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005aa4:	d102      	bne.n	8005aac <HAL_RCC_OscConfig+0x204>
 8005aa6:	f7ff fcae 	bl	8005406 <LL_RCC_HSE_Enable>
 8005aaa:	e00d      	b.n	8005ac8 <HAL_RCC_OscConfig+0x220>
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	685b      	ldr	r3, [r3, #4]
 8005ab0:	f5b3 1f04 	cmp.w	r3, #2162688	@ 0x210000
 8005ab4:	d104      	bne.n	8005ac0 <HAL_RCC_OscConfig+0x218>
 8005ab6:	f7ff fc79 	bl	80053ac <LL_RCC_HSE_EnableTcxo>
 8005aba:	f7ff fca4 	bl	8005406 <LL_RCC_HSE_Enable>
 8005abe:	e003      	b.n	8005ac8 <HAL_RCC_OscConfig+0x220>
 8005ac0:	f7ff fcaf 	bl	8005422 <LL_RCC_HSE_Disable>
 8005ac4:	f7ff fc80 	bl	80053c8 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	685b      	ldr	r3, [r3, #4]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d012      	beq.n	8005af6 <HAL_RCC_OscConfig+0x24e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ad0:	f7fc f8a0 	bl	8001c14 <HAL_GetTick>
 8005ad4:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8005ad6:	e008      	b.n	8005aea <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005ad8:	f7fc f89c 	bl	8001c14 <HAL_GetTick>
 8005adc:	4602      	mov	r2, r0
 8005ade:	697b      	ldr	r3, [r7, #20]
 8005ae0:	1ad3      	subs	r3, r2, r3
 8005ae2:	2b64      	cmp	r3, #100	@ 0x64
 8005ae4:	d901      	bls.n	8005aea <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 8005ae6:	2303      	movs	r3, #3
 8005ae8:	e257      	b.n	8005f9a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() == 0U)
 8005aea:	f7ff fca8 	bl	800543e <LL_RCC_HSE_IsReady>
 8005aee:	4603      	mov	r3, r0
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d0f1      	beq.n	8005ad8 <HAL_RCC_OscConfig+0x230>
 8005af4:	e011      	b.n	8005b1a <HAL_RCC_OscConfig+0x272>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005af6:	f7fc f88d 	bl	8001c14 <HAL_GetTick>
 8005afa:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8005afc:	e008      	b.n	8005b10 <HAL_RCC_OscConfig+0x268>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005afe:	f7fc f889 	bl	8001c14 <HAL_GetTick>
 8005b02:	4602      	mov	r2, r0
 8005b04:	697b      	ldr	r3, [r7, #20]
 8005b06:	1ad3      	subs	r3, r2, r3
 8005b08:	2b64      	cmp	r3, #100	@ 0x64
 8005b0a:	d901      	bls.n	8005b10 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8005b0c:	2303      	movs	r3, #3
 8005b0e:	e244      	b.n	8005f9a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() != 0U)
 8005b10:	f7ff fc95 	bl	800543e <LL_RCC_HSE_IsReady>
 8005b14:	4603      	mov	r3, r0
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d1f1      	bne.n	8005afe <HAL_RCC_OscConfig+0x256>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f003 0302 	and.w	r3, r3, #2
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d046      	beq.n	8005bb4 <HAL_RCC_OscConfig+0x30c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8005b26:	69fb      	ldr	r3, [r7, #28]
 8005b28:	2b04      	cmp	r3, #4
 8005b2a:	d005      	beq.n	8005b38 <HAL_RCC_OscConfig+0x290>
 8005b2c:	69fb      	ldr	r3, [r7, #28]
 8005b2e:	2b0c      	cmp	r3, #12
 8005b30:	d10e      	bne.n	8005b50 <HAL_RCC_OscConfig+0x2a8>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005b32:	69bb      	ldr	r3, [r7, #24]
 8005b34:	2b02      	cmp	r3, #2
 8005b36:	d10b      	bne.n	8005b50 <HAL_RCC_OscConfig+0x2a8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	691b      	ldr	r3, [r3, #16]
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d101      	bne.n	8005b44 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8005b40:	2301      	movs	r3, #1
 8005b42:	e22a      	b.n	8005f9a <HAL_RCC_OscConfig+0x6f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	695b      	ldr	r3, [r3, #20]
 8005b48:	4618      	mov	r0, r3
 8005b4a:	f7ff fcb6 	bl	80054ba <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8005b4e:	e031      	b.n	8005bb4 <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	691b      	ldr	r3, [r3, #16]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d019      	beq.n	8005b8c <HAL_RCC_OscConfig+0x2e4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005b58:	f7ff fc82 	bl	8005460 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b5c:	f7fc f85a 	bl	8001c14 <HAL_GetTick>
 8005b60:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8005b62:	e008      	b.n	8005b76 <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005b64:	f7fc f856 	bl	8001c14 <HAL_GetTick>
 8005b68:	4602      	mov	r2, r0
 8005b6a:	697b      	ldr	r3, [r7, #20]
 8005b6c:	1ad3      	subs	r3, r2, r3
 8005b6e:	2b02      	cmp	r3, #2
 8005b70:	d901      	bls.n	8005b76 <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 8005b72:	2303      	movs	r3, #3
 8005b74:	e211      	b.n	8005f9a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() == 0U)
 8005b76:	f7ff fc8f 	bl	8005498 <LL_RCC_HSI_IsReady>
 8005b7a:	4603      	mov	r3, r0
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d0f1      	beq.n	8005b64 <HAL_RCC_OscConfig+0x2bc>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	695b      	ldr	r3, [r3, #20]
 8005b84:	4618      	mov	r0, r3
 8005b86:	f7ff fc98 	bl	80054ba <LL_RCC_HSI_SetCalibTrimming>
 8005b8a:	e013      	b.n	8005bb4 <HAL_RCC_OscConfig+0x30c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005b8c:	f7ff fc76 	bl	800547c <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b90:	f7fc f840 	bl	8001c14 <HAL_GetTick>
 8005b94:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8005b96:	e008      	b.n	8005baa <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005b98:	f7fc f83c 	bl	8001c14 <HAL_GetTick>
 8005b9c:	4602      	mov	r2, r0
 8005b9e:	697b      	ldr	r3, [r7, #20]
 8005ba0:	1ad3      	subs	r3, r2, r3
 8005ba2:	2b02      	cmp	r3, #2
 8005ba4:	d901      	bls.n	8005baa <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 8005ba6:	2303      	movs	r3, #3
 8005ba8:	e1f7      	b.n	8005f9a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() != 0U)
 8005baa:	f7ff fc75 	bl	8005498 <LL_RCC_HSI_IsReady>
 8005bae:	4603      	mov	r3, r0
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d1f1      	bne.n	8005b98 <HAL_RCC_OscConfig+0x2f0>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f003 0308 	and.w	r3, r3, #8
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d06e      	beq.n	8005c9e <HAL_RCC_OscConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	699b      	ldr	r3, [r3, #24]
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d056      	beq.n	8005c76 <HAL_RCC_OscConfig+0x3ce>
    {
      uint32_t csr_temp = RCC->CSR;
 8005bc8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005bcc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005bd0:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	69da      	ldr	r2, [r3, #28]
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	f003 0310 	and.w	r3, r3, #16
 8005bdc:	429a      	cmp	r2, r3
 8005bde:	d031      	beq.n	8005c44 <HAL_RCC_OscConfig+0x39c>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	f003 0302 	and.w	r3, r3, #2
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d006      	beq.n	8005bf8 <HAL_RCC_OscConfig+0x350>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d101      	bne.n	8005bf8 <HAL_RCC_OscConfig+0x350>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated */
          return HAL_ERROR;
 8005bf4:	2301      	movs	r3, #1
 8005bf6:	e1d0      	b.n	8005f9a <HAL_RCC_OscConfig+0x6f2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	f003 0301 	and.w	r3, r3, #1
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d013      	beq.n	8005c2a <HAL_RCC_OscConfig+0x382>
        {
          __HAL_RCC_LSI_DISABLE();
 8005c02:	f7ff fc8f 	bl	8005524 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005c06:	f7fc f805 	bl	8001c14 <HAL_GetTick>
 8005c0a:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 8005c0c:	e008      	b.n	8005c20 <HAL_RCC_OscConfig+0x378>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005c0e:	f7fc f801 	bl	8001c14 <HAL_GetTick>
 8005c12:	4602      	mov	r2, r0
 8005c14:	697b      	ldr	r3, [r7, #20]
 8005c16:	1ad3      	subs	r3, r2, r3
 8005c18:	2b11      	cmp	r3, #17
 8005c1a:	d901      	bls.n	8005c20 <HAL_RCC_OscConfig+0x378>
            {
              return HAL_TIMEOUT;
 8005c1c:	2303      	movs	r3, #3
 8005c1e:	e1bc      	b.n	8005f9a <HAL_RCC_OscConfig+0x6f2>
          while (LL_RCC_LSI_IsReady() != 0U)
 8005c20:	f7ff fc90 	bl	8005544 <LL_RCC_LSI_IsReady>
 8005c24:	4603      	mov	r3, r0
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d1f1      	bne.n	8005c0e <HAL_RCC_OscConfig+0x366>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 8005c2a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005c2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005c32:	f023 0210 	bic.w	r2, r3, #16
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	69db      	ldr	r3, [r3, #28]
 8005c3a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005c3e:	4313      	orrs	r3, r2
 8005c40:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005c44:	f7ff fc5e 	bl	8005504 <LL_RCC_LSI_Enable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005c48:	f7fb ffe4 	bl	8001c14 <HAL_GetTick>
 8005c4c:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 8005c4e:	e00c      	b.n	8005c6a <HAL_RCC_OscConfig+0x3c2>
 8005c50:	20000000 	.word	0x20000000
 8005c54:	20000004 	.word	0x20000004
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005c58:	f7fb ffdc 	bl	8001c14 <HAL_GetTick>
 8005c5c:	4602      	mov	r2, r0
 8005c5e:	697b      	ldr	r3, [r7, #20]
 8005c60:	1ad3      	subs	r3, r2, r3
 8005c62:	2b11      	cmp	r3, #17
 8005c64:	d901      	bls.n	8005c6a <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8005c66:	2303      	movs	r3, #3
 8005c68:	e197      	b.n	8005f9a <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() == 0U)
 8005c6a:	f7ff fc6b 	bl	8005544 <LL_RCC_LSI_IsReady>
 8005c6e:	4603      	mov	r3, r0
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d0f1      	beq.n	8005c58 <HAL_RCC_OscConfig+0x3b0>
 8005c74:	e013      	b.n	8005c9e <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005c76:	f7ff fc55 	bl	8005524 <LL_RCC_LSI_Disable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005c7a:	f7fb ffcb 	bl	8001c14 <HAL_GetTick>
 8005c7e:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 8005c80:	e008      	b.n	8005c94 <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005c82:	f7fb ffc7 	bl	8001c14 <HAL_GetTick>
 8005c86:	4602      	mov	r2, r0
 8005c88:	697b      	ldr	r3, [r7, #20]
 8005c8a:	1ad3      	subs	r3, r2, r3
 8005c8c:	2b11      	cmp	r3, #17
 8005c8e:	d901      	bls.n	8005c94 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8005c90:	2303      	movs	r3, #3
 8005c92:	e182      	b.n	8005f9a <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() != 0U)
 8005c94:	f7ff fc56 	bl	8005544 <LL_RCC_LSI_IsReady>
 8005c98:	4603      	mov	r3, r0
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d1f1      	bne.n	8005c82 <HAL_RCC_OscConfig+0x3da>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f003 0304 	and.w	r3, r3, #4
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	f000 80d8 	beq.w	8005e5c <HAL_RCC_OscConfig+0x5b4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8005cac:	f7ff fb6c 	bl	8005388 <LL_PWR_IsEnabledBkUpAccess>
 8005cb0:	4603      	mov	r3, r0
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d113      	bne.n	8005cde <HAL_RCC_OscConfig+0x436>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8005cb6:	f7ff faab 	bl	8005210 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005cba:	f7fb ffab 	bl	8001c14 <HAL_GetTick>
 8005cbe:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8005cc0:	e008      	b.n	8005cd4 <HAL_RCC_OscConfig+0x42c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005cc2:	f7fb ffa7 	bl	8001c14 <HAL_GetTick>
 8005cc6:	4602      	mov	r2, r0
 8005cc8:	697b      	ldr	r3, [r7, #20]
 8005cca:	1ad3      	subs	r3, r2, r3
 8005ccc:	2b02      	cmp	r3, #2
 8005cce:	d901      	bls.n	8005cd4 <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 8005cd0:	2303      	movs	r3, #3
 8005cd2:	e162      	b.n	8005f9a <HAL_RCC_OscConfig+0x6f2>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8005cd4:	f7ff fb58 	bl	8005388 <LL_PWR_IsEnabledBkUpAccess>
 8005cd8:	4603      	mov	r3, r0
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d0f1      	beq.n	8005cc2 <HAL_RCC_OscConfig+0x41a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	68db      	ldr	r3, [r3, #12]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d07b      	beq.n	8005dde <HAL_RCC_OscConfig+0x536>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	68db      	ldr	r3, [r3, #12]
 8005cea:	2b85      	cmp	r3, #133	@ 0x85
 8005cec:	d003      	beq.n	8005cf6 <HAL_RCC_OscConfig+0x44e>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	68db      	ldr	r3, [r3, #12]
 8005cf2:	2b05      	cmp	r3, #5
 8005cf4:	d109      	bne.n	8005d0a <HAL_RCC_OscConfig+0x462>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8005cf6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005cfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005cfe:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005d02:	f043 0304 	orr.w	r3, r3, #4
 8005d06:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005d0a:	f7fb ff83 	bl	8001c14 <HAL_GetTick>
 8005d0e:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005d10:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005d14:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005d18:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005d1c:	f043 0301 	orr.w	r3, r3, #1
 8005d20:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8005d24:	e00a      	b.n	8005d3c <HAL_RCC_OscConfig+0x494>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d26:	f7fb ff75 	bl	8001c14 <HAL_GetTick>
 8005d2a:	4602      	mov	r2, r0
 8005d2c:	697b      	ldr	r3, [r7, #20]
 8005d2e:	1ad3      	subs	r3, r2, r3
 8005d30:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005d34:	4293      	cmp	r3, r2
 8005d36:	d901      	bls.n	8005d3c <HAL_RCC_OscConfig+0x494>
        {
          return HAL_TIMEOUT;
 8005d38:	2303      	movs	r3, #3
 8005d3a:	e12e      	b.n	8005f9a <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() == 0U)
 8005d3c:	f7ff fbd1 	bl	80054e2 <LL_RCC_LSE_IsReady>
 8005d40:	4603      	mov	r3, r0
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d0ef      	beq.n	8005d26 <HAL_RCC_OscConfig+0x47e>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	68db      	ldr	r3, [r3, #12]
 8005d4a:	2b81      	cmp	r3, #129	@ 0x81
 8005d4c:	d003      	beq.n	8005d56 <HAL_RCC_OscConfig+0x4ae>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	68db      	ldr	r3, [r3, #12]
 8005d52:	2b85      	cmp	r3, #133	@ 0x85
 8005d54:	d121      	bne.n	8005d9a <HAL_RCC_OscConfig+0x4f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d56:	f7fb ff5d 	bl	8001c14 <HAL_GetTick>
 8005d5a:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8005d5c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005d60:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005d64:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005d68:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005d6c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8005d70:	e00a      	b.n	8005d88 <HAL_RCC_OscConfig+0x4e0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d72:	f7fb ff4f 	bl	8001c14 <HAL_GetTick>
 8005d76:	4602      	mov	r2, r0
 8005d78:	697b      	ldr	r3, [r7, #20]
 8005d7a:	1ad3      	subs	r3, r2, r3
 8005d7c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005d80:	4293      	cmp	r3, r2
 8005d82:	d901      	bls.n	8005d88 <HAL_RCC_OscConfig+0x4e0>
          {
            return HAL_TIMEOUT;
 8005d84:	2303      	movs	r3, #3
 8005d86:	e108      	b.n	8005f9a <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8005d88:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005d8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005d90:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d0ec      	beq.n	8005d72 <HAL_RCC_OscConfig+0x4ca>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8005d98:	e060      	b.n	8005e5c <HAL_RCC_OscConfig+0x5b4>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d9a:	f7fb ff3b 	bl	8001c14 <HAL_GetTick>
 8005d9e:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8005da0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005da4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005da8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005dac:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005db0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005db4:	e00a      	b.n	8005dcc <HAL_RCC_OscConfig+0x524>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005db6:	f7fb ff2d 	bl	8001c14 <HAL_GetTick>
 8005dba:	4602      	mov	r2, r0
 8005dbc:	697b      	ldr	r3, [r7, #20]
 8005dbe:	1ad3      	subs	r3, r2, r3
 8005dc0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005dc4:	4293      	cmp	r3, r2
 8005dc6:	d901      	bls.n	8005dcc <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 8005dc8:	2303      	movs	r3, #3
 8005dca:	e0e6      	b.n	8005f9a <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005dcc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005dd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005dd4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d1ec      	bne.n	8005db6 <HAL_RCC_OscConfig+0x50e>
 8005ddc:	e03e      	b.n	8005e5c <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005dde:	f7fb ff19 	bl	8001c14 <HAL_GetTick>
 8005de2:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8005de4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005de8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005dec:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005df0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005df4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005df8:	e00a      	b.n	8005e10 <HAL_RCC_OscConfig+0x568>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005dfa:	f7fb ff0b 	bl	8001c14 <HAL_GetTick>
 8005dfe:	4602      	mov	r2, r0
 8005e00:	697b      	ldr	r3, [r7, #20]
 8005e02:	1ad3      	subs	r3, r2, r3
 8005e04:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005e08:	4293      	cmp	r3, r2
 8005e0a:	d901      	bls.n	8005e10 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8005e0c:	2303      	movs	r3, #3
 8005e0e:	e0c4      	b.n	8005f9a <HAL_RCC_OscConfig+0x6f2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005e10:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005e14:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005e18:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d1ec      	bne.n	8005dfa <HAL_RCC_OscConfig+0x552>
        }
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005e20:	f7fb fef8 	bl	8001c14 <HAL_GetTick>
 8005e24:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005e26:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005e2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005e2e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005e32:	f023 0301 	bic.w	r3, r3, #1
 8005e36:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8005e3a:	e00a      	b.n	8005e52 <HAL_RCC_OscConfig+0x5aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e3c:	f7fb feea 	bl	8001c14 <HAL_GetTick>
 8005e40:	4602      	mov	r2, r0
 8005e42:	697b      	ldr	r3, [r7, #20]
 8005e44:	1ad3      	subs	r3, r2, r3
 8005e46:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005e4a:	4293      	cmp	r3, r2
 8005e4c:	d901      	bls.n	8005e52 <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 8005e4e:	2303      	movs	r3, #3
 8005e50:	e0a3      	b.n	8005f9a <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() != 0U)
 8005e52:	f7ff fb46 	bl	80054e2 <LL_RCC_LSE_IsReady>
 8005e56:	4603      	mov	r3, r0
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d1ef      	bne.n	8005e3c <HAL_RCC_OscConfig+0x594>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	f000 8099 	beq.w	8005f98 <HAL_RCC_OscConfig+0x6f0>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005e66:	69fb      	ldr	r3, [r7, #28]
 8005e68:	2b0c      	cmp	r3, #12
 8005e6a:	d06c      	beq.n	8005f46 <HAL_RCC_OscConfig+0x69e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e70:	2b02      	cmp	r3, #2
 8005e72:	d14b      	bne.n	8005f0c <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005e74:	f7ff fc87 	bl	8005786 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e78:	f7fb fecc 	bl	8001c14 <HAL_GetTick>
 8005e7c:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 8005e7e:	e008      	b.n	8005e92 <HAL_RCC_OscConfig+0x5ea>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e80:	f7fb fec8 	bl	8001c14 <HAL_GetTick>
 8005e84:	4602      	mov	r2, r0
 8005e86:	697b      	ldr	r3, [r7, #20]
 8005e88:	1ad3      	subs	r3, r2, r3
 8005e8a:	2b0a      	cmp	r3, #10
 8005e8c:	d901      	bls.n	8005e92 <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 8005e8e:	2303      	movs	r3, #3
 8005e90:	e083      	b.n	8005f9a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8005e92:	f7ff fc86 	bl	80057a2 <LL_RCC_PLL_IsReady>
 8005e96:	4603      	mov	r3, r0
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d1f1      	bne.n	8005e80 <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005e9c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005ea0:	68da      	ldr	r2, [r3, #12]
 8005ea2:	4b40      	ldr	r3, [pc, #256]	@ (8005fa4 <HAL_RCC_OscConfig+0x6fc>)
 8005ea4:	4013      	ands	r3, r2
 8005ea6:	687a      	ldr	r2, [r7, #4]
 8005ea8:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8005eaa:	687a      	ldr	r2, [r7, #4]
 8005eac:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005eae:	4311      	orrs	r1, r2
 8005eb0:	687a      	ldr	r2, [r7, #4]
 8005eb2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005eb4:	0212      	lsls	r2, r2, #8
 8005eb6:	4311      	orrs	r1, r2
 8005eb8:	687a      	ldr	r2, [r7, #4]
 8005eba:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005ebc:	4311      	orrs	r1, r2
 8005ebe:	687a      	ldr	r2, [r7, #4]
 8005ec0:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8005ec2:	4311      	orrs	r1, r2
 8005ec4:	687a      	ldr	r2, [r7, #4]
 8005ec6:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8005ec8:	430a      	orrs	r2, r1
 8005eca:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005ece:	4313      	orrs	r3, r2
 8005ed0:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005ed2:	f7ff fc4a 	bl	800576a <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005ed6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005eda:	68db      	ldr	r3, [r3, #12]
 8005edc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005ee0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005ee4:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ee6:	f7fb fe95 	bl	8001c14 <HAL_GetTick>
 8005eea:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 8005eec:	e008      	b.n	8005f00 <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005eee:	f7fb fe91 	bl	8001c14 <HAL_GetTick>
 8005ef2:	4602      	mov	r2, r0
 8005ef4:	697b      	ldr	r3, [r7, #20]
 8005ef6:	1ad3      	subs	r3, r2, r3
 8005ef8:	2b0a      	cmp	r3, #10
 8005efa:	d901      	bls.n	8005f00 <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 8005efc:	2303      	movs	r3, #3
 8005efe:	e04c      	b.n	8005f9a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() == 0U)
 8005f00:	f7ff fc4f 	bl	80057a2 <LL_RCC_PLL_IsReady>
 8005f04:	4603      	mov	r3, r0
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d0f1      	beq.n	8005eee <HAL_RCC_OscConfig+0x646>
 8005f0a:	e045      	b.n	8005f98 <HAL_RCC_OscConfig+0x6f0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005f0c:	f7ff fc3b 	bl	8005786 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f10:	f7fb fe80 	bl	8001c14 <HAL_GetTick>
 8005f14:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 8005f16:	e008      	b.n	8005f2a <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005f18:	f7fb fe7c 	bl	8001c14 <HAL_GetTick>
 8005f1c:	4602      	mov	r2, r0
 8005f1e:	697b      	ldr	r3, [r7, #20]
 8005f20:	1ad3      	subs	r3, r2, r3
 8005f22:	2b0a      	cmp	r3, #10
 8005f24:	d901      	bls.n	8005f2a <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8005f26:	2303      	movs	r3, #3
 8005f28:	e037      	b.n	8005f9a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8005f2a:	f7ff fc3a 	bl	80057a2 <LL_RCC_PLL_IsReady>
 8005f2e:	4603      	mov	r3, r0
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d1f1      	bne.n	8005f18 <HAL_RCC_OscConfig+0x670>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8005f34:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005f38:	68da      	ldr	r2, [r3, #12]
 8005f3a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005f3e:	4b1a      	ldr	r3, [pc, #104]	@ (8005fa8 <HAL_RCC_OscConfig+0x700>)
 8005f40:	4013      	ands	r3, r2
 8005f42:	60cb      	str	r3, [r1, #12]
 8005f44:	e028      	b.n	8005f98 <HAL_RCC_OscConfig+0x6f0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f4a:	2b01      	cmp	r3, #1
 8005f4c:	d101      	bne.n	8005f52 <HAL_RCC_OscConfig+0x6aa>
      {
        return HAL_ERROR;
 8005f4e:	2301      	movs	r3, #1
 8005f50:	e023      	b.n	8005f9a <HAL_RCC_OscConfig+0x6f2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005f52:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005f56:	68db      	ldr	r3, [r3, #12]
 8005f58:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 8005f5a:	69bb      	ldr	r3, [r7, #24]
 8005f5c:	f003 0203 	and.w	r2, r3, #3
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f64:	429a      	cmp	r2, r3
 8005f66:	d115      	bne.n	8005f94 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8005f68:	69bb      	ldr	r3, [r7, #24]
 8005f6a:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f72:	429a      	cmp	r2, r3
 8005f74:	d10e      	bne.n	8005f94 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 8005f76:	69bb      	ldr	r3, [r7, #24]
 8005f78:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f80:	021b      	lsls	r3, r3, #8
 8005f82:	429a      	cmp	r2, r3
 8005f84:	d106      	bne.n	8005f94 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 8005f86:	69bb      	ldr	r3, [r7, #24]
 8005f88:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f90:	429a      	cmp	r2, r3
 8005f92:	d001      	beq.n	8005f98 <HAL_RCC_OscConfig+0x6f0>
        {
          return HAL_ERROR;
 8005f94:	2301      	movs	r3, #1
 8005f96:	e000      	b.n	8005f9a <HAL_RCC_OscConfig+0x6f2>
        }
      }
    }
  }
  return HAL_OK;
 8005f98:	2300      	movs	r3, #0
}
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	3720      	adds	r7, #32
 8005f9e:	46bd      	mov	sp, r7
 8005fa0:	bd80      	pop	{r7, pc}
 8005fa2:	bf00      	nop
 8005fa4:	11c1808c 	.word	0x11c1808c
 8005fa8:	eefefffc 	.word	0xeefefffc

08005fac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005fac:	b580      	push	{r7, lr}
 8005fae:	b084      	sub	sp, #16
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]
 8005fb4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d101      	bne.n	8005fc0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005fbc:	2301      	movs	r3, #1
 8005fbe:	e10f      	b.n	80061e0 <HAL_RCC_ClockConfig+0x234>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005fc0:	4b89      	ldr	r3, [pc, #548]	@ (80061e8 <HAL_RCC_ClockConfig+0x23c>)
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	f003 0307 	and.w	r3, r3, #7
 8005fc8:	683a      	ldr	r2, [r7, #0]
 8005fca:	429a      	cmp	r2, r3
 8005fcc:	d91b      	bls.n	8006006 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005fce:	4b86      	ldr	r3, [pc, #536]	@ (80061e8 <HAL_RCC_ClockConfig+0x23c>)
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	f023 0207 	bic.w	r2, r3, #7
 8005fd6:	4984      	ldr	r1, [pc, #528]	@ (80061e8 <HAL_RCC_ClockConfig+0x23c>)
 8005fd8:	683b      	ldr	r3, [r7, #0]
 8005fda:	4313      	orrs	r3, r2
 8005fdc:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005fde:	f7fb fe19 	bl	8001c14 <HAL_GetTick>
 8005fe2:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005fe4:	e008      	b.n	8005ff8 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005fe6:	f7fb fe15 	bl	8001c14 <HAL_GetTick>
 8005fea:	4602      	mov	r2, r0
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	1ad3      	subs	r3, r2, r3
 8005ff0:	2b02      	cmp	r3, #2
 8005ff2:	d901      	bls.n	8005ff8 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8005ff4:	2303      	movs	r3, #3
 8005ff6:	e0f3      	b.n	80061e0 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ff8:	4b7b      	ldr	r3, [pc, #492]	@ (80061e8 <HAL_RCC_ClockConfig+0x23c>)
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	f003 0307 	and.w	r3, r3, #7
 8006000:	683a      	ldr	r2, [r7, #0]
 8006002:	429a      	cmp	r2, r3
 8006004:	d1ef      	bne.n	8005fe6 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	f003 0302 	and.w	r3, r3, #2
 800600e:	2b00      	cmp	r3, #0
 8006010:	d016      	beq.n	8006040 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	689b      	ldr	r3, [r3, #8]
 8006016:	4618      	mov	r0, r3
 8006018:	f7ff fb2a 	bl	8005670 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800601c:	f7fb fdfa 	bl	8001c14 <HAL_GetTick>
 8006020:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8006022:	e008      	b.n	8006036 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006024:	f7fb fdf6 	bl	8001c14 <HAL_GetTick>
 8006028:	4602      	mov	r2, r0
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	1ad3      	subs	r3, r2, r3
 800602e:	2b02      	cmp	r3, #2
 8006030:	d901      	bls.n	8006036 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8006032:	2303      	movs	r3, #3
 8006034:	e0d4      	b.n	80061e0 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8006036:	f7ff fbf2 	bl	800581e <LL_RCC_IsActiveFlag_HPRE>
 800603a:	4603      	mov	r3, r0
 800603c:	2b00      	cmp	r3, #0
 800603e:	d0f1      	beq.n	8006024 <HAL_RCC_ClockConfig+0x78>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006048:	2b00      	cmp	r3, #0
 800604a:	d016      	beq.n	800607a <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	695b      	ldr	r3, [r3, #20]
 8006050:	4618      	mov	r0, r3
 8006052:	f7ff fb20 	bl	8005696 <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006056:	f7fb fddd 	bl	8001c14 <HAL_GetTick>
 800605a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800605c:	e008      	b.n	8006070 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800605e:	f7fb fdd9 	bl	8001c14 <HAL_GetTick>
 8006062:	4602      	mov	r2, r0
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	1ad3      	subs	r3, r2, r3
 8006068:	2b02      	cmp	r3, #2
 800606a:	d901      	bls.n	8006070 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 800606c:	2303      	movs	r3, #3
 800606e:	e0b7      	b.n	80061e0 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8006070:	f7ff fbe6 	bl	8005840 <LL_RCC_IsActiveFlag_SHDHPRE>
 8006074:	4603      	mov	r3, r0
 8006076:	2b00      	cmp	r3, #0
 8006078:	d0f1      	beq.n	800605e <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	f003 0304 	and.w	r3, r3, #4
 8006082:	2b00      	cmp	r3, #0
 8006084:	d016      	beq.n	80060b4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	68db      	ldr	r3, [r3, #12]
 800608a:	4618      	mov	r0, r3
 800608c:	f7ff fb19 	bl	80056c2 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006090:	f7fb fdc0 	bl	8001c14 <HAL_GetTick>
 8006094:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8006096:	e008      	b.n	80060aa <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006098:	f7fb fdbc 	bl	8001c14 <HAL_GetTick>
 800609c:	4602      	mov	r2, r0
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	1ad3      	subs	r3, r2, r3
 80060a2:	2b02      	cmp	r3, #2
 80060a4:	d901      	bls.n	80060aa <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 80060a6:	2303      	movs	r3, #3
 80060a8:	e09a      	b.n	80061e0 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80060aa:	f7ff fbdb 	bl	8005864 <LL_RCC_IsActiveFlag_PPRE1>
 80060ae:	4603      	mov	r3, r0
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d0f1      	beq.n	8006098 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f003 0308 	and.w	r3, r3, #8
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d017      	beq.n	80060f0 <HAL_RCC_ClockConfig+0x144>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	691b      	ldr	r3, [r3, #16]
 80060c4:	00db      	lsls	r3, r3, #3
 80060c6:	4618      	mov	r0, r3
 80060c8:	f7ff fb0e 	bl	80056e8 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80060cc:	f7fb fda2 	bl	8001c14 <HAL_GetTick>
 80060d0:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80060d2:	e008      	b.n	80060e6 <HAL_RCC_ClockConfig+0x13a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80060d4:	f7fb fd9e 	bl	8001c14 <HAL_GetTick>
 80060d8:	4602      	mov	r2, r0
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	1ad3      	subs	r3, r2, r3
 80060de:	2b02      	cmp	r3, #2
 80060e0:	d901      	bls.n	80060e6 <HAL_RCC_ClockConfig+0x13a>
      {
        return HAL_TIMEOUT;
 80060e2:	2303      	movs	r3, #3
 80060e4:	e07c      	b.n	80061e0 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80060e6:	f7ff fbce 	bl	8005886 <LL_RCC_IsActiveFlag_PPRE2>
 80060ea:	4603      	mov	r3, r0
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d0f1      	beq.n	80060d4 <HAL_RCC_ClockConfig+0x128>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	f003 0301 	and.w	r3, r3, #1
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d043      	beq.n	8006184 <HAL_RCC_ClockConfig+0x1d8>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	685b      	ldr	r3, [r3, #4]
 8006100:	2b02      	cmp	r3, #2
 8006102:	d106      	bne.n	8006112 <HAL_RCC_ClockConfig+0x166>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8006104:	f7ff f99b 	bl	800543e <LL_RCC_HSE_IsReady>
 8006108:	4603      	mov	r3, r0
 800610a:	2b00      	cmp	r3, #0
 800610c:	d11e      	bne.n	800614c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800610e:	2301      	movs	r3, #1
 8006110:	e066      	b.n	80061e0 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	685b      	ldr	r3, [r3, #4]
 8006116:	2b03      	cmp	r3, #3
 8006118:	d106      	bne.n	8006128 <HAL_RCC_ClockConfig+0x17c>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 800611a:	f7ff fb42 	bl	80057a2 <LL_RCC_PLL_IsReady>
 800611e:	4603      	mov	r3, r0
 8006120:	2b00      	cmp	r3, #0
 8006122:	d113      	bne.n	800614c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006124:	2301      	movs	r3, #1
 8006126:	e05b      	b.n	80061e0 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	685b      	ldr	r3, [r3, #4]
 800612c:	2b00      	cmp	r3, #0
 800612e:	d106      	bne.n	800613e <HAL_RCC_ClockConfig+0x192>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8006130:	f7ff fa35 	bl	800559e <LL_RCC_MSI_IsReady>
 8006134:	4603      	mov	r3, r0
 8006136:	2b00      	cmp	r3, #0
 8006138:	d108      	bne.n	800614c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800613a:	2301      	movs	r3, #1
 800613c:	e050      	b.n	80061e0 <HAL_RCC_ClockConfig+0x234>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 800613e:	f7ff f9ab 	bl	8005498 <LL_RCC_HSI_IsReady>
 8006142:	4603      	mov	r3, r0
 8006144:	2b00      	cmp	r3, #0
 8006146:	d101      	bne.n	800614c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006148:	2301      	movs	r3, #1
 800614a:	e049      	b.n	80061e0 <HAL_RCC_ClockConfig+0x234>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	685b      	ldr	r3, [r3, #4]
 8006150:	4618      	mov	r0, r3
 8006152:	f7ff fa6f 	bl	8005634 <LL_RCC_SetSysClkSource>

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006156:	f7fb fd5d 	bl	8001c14 <HAL_GetTick>
 800615a:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800615c:	e00a      	b.n	8006174 <HAL_RCC_ClockConfig+0x1c8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800615e:	f7fb fd59 	bl	8001c14 <HAL_GetTick>
 8006162:	4602      	mov	r2, r0
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	1ad3      	subs	r3, r2, r3
 8006168:	f241 3288 	movw	r2, #5000	@ 0x1388
 800616c:	4293      	cmp	r3, r2
 800616e:	d901      	bls.n	8006174 <HAL_RCC_ClockConfig+0x1c8>
      {
        return HAL_TIMEOUT;
 8006170:	2303      	movs	r3, #3
 8006172:	e035      	b.n	80061e0 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006174:	f7ff fa71 	bl	800565a <LL_RCC_GetSysClkSource>
 8006178:	4602      	mov	r2, r0
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	685b      	ldr	r3, [r3, #4]
 800617e:	009b      	lsls	r3, r3, #2
 8006180:	429a      	cmp	r2, r3
 8006182:	d1ec      	bne.n	800615e <HAL_RCC_ClockConfig+0x1b2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006184:	4b18      	ldr	r3, [pc, #96]	@ (80061e8 <HAL_RCC_ClockConfig+0x23c>)
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	f003 0307 	and.w	r3, r3, #7
 800618c:	683a      	ldr	r2, [r7, #0]
 800618e:	429a      	cmp	r2, r3
 8006190:	d21b      	bcs.n	80061ca <HAL_RCC_ClockConfig+0x21e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006192:	4b15      	ldr	r3, [pc, #84]	@ (80061e8 <HAL_RCC_ClockConfig+0x23c>)
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	f023 0207 	bic.w	r2, r3, #7
 800619a:	4913      	ldr	r1, [pc, #76]	@ (80061e8 <HAL_RCC_ClockConfig+0x23c>)
 800619c:	683b      	ldr	r3, [r7, #0]
 800619e:	4313      	orrs	r3, r2
 80061a0:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80061a2:	f7fb fd37 	bl	8001c14 <HAL_GetTick>
 80061a6:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80061a8:	e008      	b.n	80061bc <HAL_RCC_ClockConfig+0x210>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80061aa:	f7fb fd33 	bl	8001c14 <HAL_GetTick>
 80061ae:	4602      	mov	r2, r0
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	1ad3      	subs	r3, r2, r3
 80061b4:	2b02      	cmp	r3, #2
 80061b6:	d901      	bls.n	80061bc <HAL_RCC_ClockConfig+0x210>
      {
        return HAL_TIMEOUT;
 80061b8:	2303      	movs	r3, #3
 80061ba:	e011      	b.n	80061e0 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80061bc:	4b0a      	ldr	r3, [pc, #40]	@ (80061e8 <HAL_RCC_ClockConfig+0x23c>)
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	f003 0307 	and.w	r3, r3, #7
 80061c4:	683a      	ldr	r2, [r7, #0]
 80061c6:	429a      	cmp	r2, r3
 80061c8:	d1ef      	bne.n	80061aa <HAL_RCC_ClockConfig+0x1fe>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80061ca:	f000 f8b3 	bl	8006334 <HAL_RCC_GetHCLKFreq>
 80061ce:	4603      	mov	r3, r0
 80061d0:	4a06      	ldr	r2, [pc, #24]	@ (80061ec <HAL_RCC_ClockConfig+0x240>)
 80061d2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  return HAL_InitTick(uwTickPrio);
 80061d4:	4b06      	ldr	r3, [pc, #24]	@ (80061f0 <HAL_RCC_ClockConfig+0x244>)
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	4618      	mov	r0, r3
 80061da:	f7fc fc25 	bl	8002a28 <HAL_InitTick>
 80061de:	4603      	mov	r3, r0
}
 80061e0:	4618      	mov	r0, r3
 80061e2:	3710      	adds	r7, #16
 80061e4:	46bd      	mov	sp, r7
 80061e6:	bd80      	pop	{r7, pc}
 80061e8:	58004000 	.word	0x58004000
 80061ec:	20000000 	.word	0x20000000
 80061f0:	20000004 	.word	0x20000004

080061f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80061f4:	b590      	push	{r4, r7, lr}
 80061f6:	b087      	sub	sp, #28
 80061f8:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 80061fa:	2300      	movs	r3, #0
 80061fc:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 80061fe:	2300      	movs	r3, #0
 8006200:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006202:	f7ff fa2a 	bl	800565a <LL_RCC_GetSysClkSource>
 8006206:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006208:	f7ff fafe 	bl	8005808 <LL_RCC_PLL_GetMainSource>
 800620c:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800620e:	68bb      	ldr	r3, [r7, #8]
 8006210:	2b00      	cmp	r3, #0
 8006212:	d005      	beq.n	8006220 <HAL_RCC_GetSysClockFreq+0x2c>
 8006214:	68bb      	ldr	r3, [r7, #8]
 8006216:	2b0c      	cmp	r3, #12
 8006218:	d139      	bne.n	800628e <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	2b01      	cmp	r3, #1
 800621e:	d136      	bne.n	800628e <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /* Retrieve MSI frequency range in Hz */
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8006220:	f7ff f9cd 	bl	80055be <LL_RCC_MSI_IsEnabledRangeSelect>
 8006224:	4603      	mov	r3, r0
 8006226:	2b00      	cmp	r3, #0
 8006228:	d115      	bne.n	8006256 <HAL_RCC_GetSysClockFreq+0x62>
 800622a:	f7ff f9c8 	bl	80055be <LL_RCC_MSI_IsEnabledRangeSelect>
 800622e:	4603      	mov	r3, r0
 8006230:	2b01      	cmp	r3, #1
 8006232:	d106      	bne.n	8006242 <HAL_RCC_GetSysClockFreq+0x4e>
 8006234:	f7ff f9d3 	bl	80055de <LL_RCC_MSI_GetRange>
 8006238:	4603      	mov	r3, r0
 800623a:	0a1b      	lsrs	r3, r3, #8
 800623c:	f003 030f 	and.w	r3, r3, #15
 8006240:	e005      	b.n	800624e <HAL_RCC_GetSysClockFreq+0x5a>
 8006242:	f7ff f9d7 	bl	80055f4 <LL_RCC_MSI_GetRangeAfterStandby>
 8006246:	4603      	mov	r3, r0
 8006248:	0a1b      	lsrs	r3, r3, #8
 800624a:	f003 030f 	and.w	r3, r3, #15
 800624e:	4a36      	ldr	r2, [pc, #216]	@ (8006328 <HAL_RCC_GetSysClockFreq+0x134>)
 8006250:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006254:	e014      	b.n	8006280 <HAL_RCC_GetSysClockFreq+0x8c>
 8006256:	f7ff f9b2 	bl	80055be <LL_RCC_MSI_IsEnabledRangeSelect>
 800625a:	4603      	mov	r3, r0
 800625c:	2b01      	cmp	r3, #1
 800625e:	d106      	bne.n	800626e <HAL_RCC_GetSysClockFreq+0x7a>
 8006260:	f7ff f9bd 	bl	80055de <LL_RCC_MSI_GetRange>
 8006264:	4603      	mov	r3, r0
 8006266:	091b      	lsrs	r3, r3, #4
 8006268:	f003 030f 	and.w	r3, r3, #15
 800626c:	e005      	b.n	800627a <HAL_RCC_GetSysClockFreq+0x86>
 800626e:	f7ff f9c1 	bl	80055f4 <LL_RCC_MSI_GetRangeAfterStandby>
 8006272:	4603      	mov	r3, r0
 8006274:	091b      	lsrs	r3, r3, #4
 8006276:	f003 030f 	and.w	r3, r3, #15
 800627a:	4a2b      	ldr	r2, [pc, #172]	@ (8006328 <HAL_RCC_GetSysClockFreq+0x134>)
 800627c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006280:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8006282:	68bb      	ldr	r3, [r7, #8]
 8006284:	2b00      	cmp	r3, #0
 8006286:	d115      	bne.n	80062b4 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 8006288:	693b      	ldr	r3, [r7, #16]
 800628a:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800628c:	e012      	b.n	80062b4 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800628e:	68bb      	ldr	r3, [r7, #8]
 8006290:	2b04      	cmp	r3, #4
 8006292:	d102      	bne.n	800629a <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006294:	4b25      	ldr	r3, [pc, #148]	@ (800632c <HAL_RCC_GetSysClockFreq+0x138>)
 8006296:	617b      	str	r3, [r7, #20]
 8006298:	e00c      	b.n	80062b4 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800629a:	68bb      	ldr	r3, [r7, #8]
 800629c:	2b08      	cmp	r3, #8
 800629e:	d109      	bne.n	80062b4 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80062a0:	f7ff f8a0 	bl	80053e4 <LL_RCC_HSE_IsEnabledDiv2>
 80062a4:	4603      	mov	r3, r0
 80062a6:	2b01      	cmp	r3, #1
 80062a8:	d102      	bne.n	80062b0 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 80062aa:	4b20      	ldr	r3, [pc, #128]	@ (800632c <HAL_RCC_GetSysClockFreq+0x138>)
 80062ac:	617b      	str	r3, [r7, #20]
 80062ae:	e001      	b.n	80062b4 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 80062b0:	4b1f      	ldr	r3, [pc, #124]	@ (8006330 <HAL_RCC_GetSysClockFreq+0x13c>)
 80062b2:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80062b4:	f7ff f9d1 	bl	800565a <LL_RCC_GetSysClkSource>
 80062b8:	4603      	mov	r3, r0
 80062ba:	2b0c      	cmp	r3, #12
 80062bc:	d12f      	bne.n	800631e <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 80062be:	f7ff faa3 	bl	8005808 <LL_RCC_PLL_GetMainSource>
 80062c2:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2b02      	cmp	r3, #2
 80062c8:	d003      	beq.n	80062d2 <HAL_RCC_GetSysClockFreq+0xde>
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	2b03      	cmp	r3, #3
 80062ce:	d003      	beq.n	80062d8 <HAL_RCC_GetSysClockFreq+0xe4>
 80062d0:	e00d      	b.n	80062ee <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 80062d2:	4b16      	ldr	r3, [pc, #88]	@ (800632c <HAL_RCC_GetSysClockFreq+0x138>)
 80062d4:	60fb      	str	r3, [r7, #12]
        break;
 80062d6:	e00d      	b.n	80062f4 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80062d8:	f7ff f884 	bl	80053e4 <LL_RCC_HSE_IsEnabledDiv2>
 80062dc:	4603      	mov	r3, r0
 80062de:	2b01      	cmp	r3, #1
 80062e0:	d102      	bne.n	80062e8 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 80062e2:	4b12      	ldr	r3, [pc, #72]	@ (800632c <HAL_RCC_GetSysClockFreq+0x138>)
 80062e4:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 80062e6:	e005      	b.n	80062f4 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 80062e8:	4b11      	ldr	r3, [pc, #68]	@ (8006330 <HAL_RCC_GetSysClockFreq+0x13c>)
 80062ea:	60fb      	str	r3, [r7, #12]
        break;
 80062ec:	e002      	b.n	80062f4 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 80062ee:	693b      	ldr	r3, [r7, #16]
 80062f0:	60fb      	str	r3, [r7, #12]
        break;
 80062f2:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80062f4:	f7ff fa66 	bl	80057c4 <LL_RCC_PLL_GetN>
 80062f8:	4602      	mov	r2, r0
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	fb03 f402 	mul.w	r4, r3, r2
 8006300:	f7ff fa77 	bl	80057f2 <LL_RCC_PLL_GetDivider>
 8006304:	4603      	mov	r3, r0
 8006306:	091b      	lsrs	r3, r3, #4
 8006308:	3301      	adds	r3, #1
 800630a:	fbb4 f4f3 	udiv	r4, r4, r3
 800630e:	f7ff fa65 	bl	80057dc <LL_RCC_PLL_GetR>
 8006312:	4603      	mov	r3, r0
 8006314:	0f5b      	lsrs	r3, r3, #29
 8006316:	3301      	adds	r3, #1
 8006318:	fbb4 f3f3 	udiv	r3, r4, r3
 800631c:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 800631e:	697b      	ldr	r3, [r7, #20]
}
 8006320:	4618      	mov	r0, r3
 8006322:	371c      	adds	r7, #28
 8006324:	46bd      	mov	sp, r7
 8006326:	bd90      	pop	{r4, r7, pc}
 8006328:	0801b874 	.word	0x0801b874
 800632c:	00f42400 	.word	0x00f42400
 8006330:	01e84800 	.word	0x01e84800

08006334 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006334:	b598      	push	{r3, r4, r7, lr}
 8006336:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8006338:	f7ff ff5c 	bl	80061f4 <HAL_RCC_GetSysClockFreq>
 800633c:	4604      	mov	r4, r0
 800633e:	f7ff f9e6 	bl	800570e <LL_RCC_GetAHBPrescaler>
 8006342:	4603      	mov	r3, r0
 8006344:	091b      	lsrs	r3, r3, #4
 8006346:	f003 030f 	and.w	r3, r3, #15
 800634a:	4a03      	ldr	r2, [pc, #12]	@ (8006358 <HAL_RCC_GetHCLKFreq+0x24>)
 800634c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006350:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8006354:	4618      	mov	r0, r3
 8006356:	bd98      	pop	{r3, r4, r7, pc}
 8006358:	0801b814 	.word	0x0801b814

0800635c <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800635c:	b598      	push	{r3, r4, r7, lr}
 800635e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8006360:	f7ff ffe8 	bl	8006334 <HAL_RCC_GetHCLKFreq>
 8006364:	4604      	mov	r4, r0
 8006366:	f7ff f9ea 	bl	800573e <LL_RCC_GetAPB1Prescaler>
 800636a:	4603      	mov	r3, r0
 800636c:	0a1b      	lsrs	r3, r3, #8
 800636e:	4a03      	ldr	r2, [pc, #12]	@ (800637c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006370:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006374:	fa24 f303 	lsr.w	r3, r4, r3
}
 8006378:	4618      	mov	r0, r3
 800637a:	bd98      	pop	{r3, r4, r7, pc}
 800637c:	0801b854 	.word	0x0801b854

08006380 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006380:	b598      	push	{r3, r4, r7, lr}
 8006382:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8006384:	f7ff ffd6 	bl	8006334 <HAL_RCC_GetHCLKFreq>
 8006388:	4604      	mov	r4, r0
 800638a:	f7ff f9e3 	bl	8005754 <LL_RCC_GetAPB2Prescaler>
 800638e:	4603      	mov	r3, r0
 8006390:	0adb      	lsrs	r3, r3, #11
 8006392:	4a03      	ldr	r2, [pc, #12]	@ (80063a0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006394:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006398:	fa24 f303 	lsr.w	r3, r4, r3
}
 800639c:	4618      	mov	r0, r3
 800639e:	bd98      	pop	{r3, r4, r7, pc}
 80063a0:	0801b854 	.word	0x0801b854

080063a4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 80063a4:	b590      	push	{r4, r7, lr}
 80063a6:	b085      	sub	sp, #20
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	091b      	lsrs	r3, r3, #4
 80063b0:	f003 030f 	and.w	r3, r3, #15
 80063b4:	4a10      	ldr	r2, [pc, #64]	@ (80063f8 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 80063b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80063ba:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 80063bc:	f7ff f9b2 	bl	8005724 <LL_RCC_GetAHB3Prescaler>
 80063c0:	4603      	mov	r3, r0
 80063c2:	091b      	lsrs	r3, r3, #4
 80063c4:	f003 030f 	and.w	r3, r3, #15
 80063c8:	4a0c      	ldr	r2, [pc, #48]	@ (80063fc <RCC_SetFlashLatencyFromMSIRange+0x58>)
 80063ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80063ce:	68fa      	ldr	r2, [r7, #12]
 80063d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80063d4:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 80063d6:	68bb      	ldr	r3, [r7, #8]
 80063d8:	4a09      	ldr	r2, [pc, #36]	@ (8006400 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 80063da:	fba2 2303 	umull	r2, r3, r2, r3
 80063de:	0c9c      	lsrs	r4, r3, #18
 80063e0:	f7fe ff58 	bl	8005294 <HAL_PWREx_GetVoltageRange>
 80063e4:	4603      	mov	r3, r0
 80063e6:	4619      	mov	r1, r3
 80063e8:	4620      	mov	r0, r4
 80063ea:	f000 f80b 	bl	8006404 <RCC_SetFlashLatency>
 80063ee:	4603      	mov	r3, r0
}
 80063f0:	4618      	mov	r0, r3
 80063f2:	3714      	adds	r7, #20
 80063f4:	46bd      	mov	sp, r7
 80063f6:	bd90      	pop	{r4, r7, pc}
 80063f8:	0801b874 	.word	0x0801b874
 80063fc:	0801b814 	.word	0x0801b814
 8006400:	431bde83 	.word	0x431bde83

08006404 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8006404:	b580      	push	{r7, lr}
 8006406:	b08e      	sub	sp, #56	@ 0x38
 8006408:	af00      	add	r7, sp, #0
 800640a:	6078      	str	r0, [r7, #4]
 800640c:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 800640e:	4a3a      	ldr	r2, [pc, #232]	@ (80064f8 <RCC_SetFlashLatency+0xf4>)
 8006410:	f107 0320 	add.w	r3, r7, #32
 8006414:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006418:	6018      	str	r0, [r3, #0]
 800641a:	3304      	adds	r3, #4
 800641c:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 800641e:	4a37      	ldr	r2, [pc, #220]	@ (80064fc <RCC_SetFlashLatency+0xf8>)
 8006420:	f107 0318 	add.w	r3, r7, #24
 8006424:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006428:	6018      	str	r0, [r3, #0]
 800642a:	3304      	adds	r3, #4
 800642c:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 800642e:	4a34      	ldr	r2, [pc, #208]	@ (8006500 <RCC_SetFlashLatency+0xfc>)
 8006430:	f107 030c 	add.w	r3, r7, #12
 8006434:	ca07      	ldmia	r2, {r0, r1, r2}
 8006436:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800643a:	2300      	movs	r3, #0
 800643c:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800643e:	683b      	ldr	r3, [r7, #0]
 8006440:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006444:	d11b      	bne.n	800647e <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8006446:	2300      	movs	r3, #0
 8006448:	633b      	str	r3, [r7, #48]	@ 0x30
 800644a:	e014      	b.n	8006476 <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 800644c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800644e:	005b      	lsls	r3, r3, #1
 8006450:	3338      	adds	r3, #56	@ 0x38
 8006452:	443b      	add	r3, r7
 8006454:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8006458:	461a      	mov	r2, r3
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	4293      	cmp	r3, r2
 800645e:	d807      	bhi.n	8006470 <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8006460:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006462:	009b      	lsls	r3, r3, #2
 8006464:	3338      	adds	r3, #56	@ 0x38
 8006466:	443b      	add	r3, r7
 8006468:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800646c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800646e:	e021      	b.n	80064b4 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8006470:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006472:	3301      	adds	r3, #1
 8006474:	633b      	str	r3, [r7, #48]	@ 0x30
 8006476:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006478:	2b02      	cmp	r3, #2
 800647a:	d9e7      	bls.n	800644c <RCC_SetFlashLatency+0x48>
 800647c:	e01a      	b.n	80064b4 <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800647e:	2300      	movs	r3, #0
 8006480:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006482:	e014      	b.n	80064ae <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8006484:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006486:	005b      	lsls	r3, r3, #1
 8006488:	3338      	adds	r3, #56	@ 0x38
 800648a:	443b      	add	r3, r7
 800648c:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8006490:	461a      	mov	r2, r3
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	4293      	cmp	r3, r2
 8006496:	d807      	bhi.n	80064a8 <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8006498:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800649a:	009b      	lsls	r3, r3, #2
 800649c:	3338      	adds	r3, #56	@ 0x38
 800649e:	443b      	add	r3, r7
 80064a0:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80064a4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80064a6:	e005      	b.n	80064b4 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80064a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064aa:	3301      	adds	r3, #1
 80064ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80064ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064b0:	2b02      	cmp	r3, #2
 80064b2:	d9e7      	bls.n	8006484 <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80064b4:	4b13      	ldr	r3, [pc, #76]	@ (8006504 <RCC_SetFlashLatency+0x100>)
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	f023 0207 	bic.w	r2, r3, #7
 80064bc:	4911      	ldr	r1, [pc, #68]	@ (8006504 <RCC_SetFlashLatency+0x100>)
 80064be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80064c0:	4313      	orrs	r3, r2
 80064c2:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80064c4:	f7fb fba6 	bl	8001c14 <HAL_GetTick>
 80064c8:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80064ca:	e008      	b.n	80064de <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80064cc:	f7fb fba2 	bl	8001c14 <HAL_GetTick>
 80064d0:	4602      	mov	r2, r0
 80064d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064d4:	1ad3      	subs	r3, r2, r3
 80064d6:	2b02      	cmp	r3, #2
 80064d8:	d901      	bls.n	80064de <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 80064da:	2303      	movs	r3, #3
 80064dc:	e007      	b.n	80064ee <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80064de:	4b09      	ldr	r3, [pc, #36]	@ (8006504 <RCC_SetFlashLatency+0x100>)
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	f003 0307 	and.w	r3, r3, #7
 80064e6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80064e8:	429a      	cmp	r2, r3
 80064ea:	d1ef      	bne.n	80064cc <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 80064ec:	2300      	movs	r3, #0
}
 80064ee:	4618      	mov	r0, r3
 80064f0:	3738      	adds	r7, #56	@ 0x38
 80064f2:	46bd      	mov	sp, r7
 80064f4:	bd80      	pop	{r7, pc}
 80064f6:	bf00      	nop
 80064f8:	0801b324 	.word	0x0801b324
 80064fc:	0801b32c 	.word	0x0801b32c
 8006500:	0801b334 	.word	0x0801b334
 8006504:	58004000 	.word	0x58004000

08006508 <LL_RCC_LSE_IsReady>:
{
 8006508:	b480      	push	{r7}
 800650a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800650c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006510:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006514:	f003 0302 	and.w	r3, r3, #2
 8006518:	2b02      	cmp	r3, #2
 800651a:	d101      	bne.n	8006520 <LL_RCC_LSE_IsReady+0x18>
 800651c:	2301      	movs	r3, #1
 800651e:	e000      	b.n	8006522 <LL_RCC_LSE_IsReady+0x1a>
 8006520:	2300      	movs	r3, #0
}
 8006522:	4618      	mov	r0, r3
 8006524:	46bd      	mov	sp, r7
 8006526:	bc80      	pop	{r7}
 8006528:	4770      	bx	lr

0800652a <LL_RCC_SetUSARTClockSource>:
{
 800652a:	b480      	push	{r7}
 800652c:	b083      	sub	sp, #12
 800652e:	af00      	add	r7, sp, #0
 8006530:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 8006532:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006536:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	0c1b      	lsrs	r3, r3, #16
 800653e:	43db      	mvns	r3, r3
 8006540:	401a      	ands	r2, r3
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	b29b      	uxth	r3, r3
 8006546:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800654a:	4313      	orrs	r3, r2
 800654c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8006550:	bf00      	nop
 8006552:	370c      	adds	r7, #12
 8006554:	46bd      	mov	sp, r7
 8006556:	bc80      	pop	{r7}
 8006558:	4770      	bx	lr

0800655a <LL_RCC_SetI2SClockSource>:
{
 800655a:	b480      	push	{r7}
 800655c:	b083      	sub	sp, #12
 800655e:	af00      	add	r7, sp, #0
 8006560:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 8006562:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006566:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800656a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800656e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	4313      	orrs	r3, r2
 8006576:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800657a:	bf00      	nop
 800657c:	370c      	adds	r7, #12
 800657e:	46bd      	mov	sp, r7
 8006580:	bc80      	pop	{r7}
 8006582:	4770      	bx	lr

08006584 <LL_RCC_SetLPUARTClockSource>:
{
 8006584:	b480      	push	{r7}
 8006586:	b083      	sub	sp, #12
 8006588:	af00      	add	r7, sp, #0
 800658a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 800658c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006590:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006594:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006598:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	4313      	orrs	r3, r2
 80065a0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80065a4:	bf00      	nop
 80065a6:	370c      	adds	r7, #12
 80065a8:	46bd      	mov	sp, r7
 80065aa:	bc80      	pop	{r7}
 80065ac:	4770      	bx	lr

080065ae <LL_RCC_SetI2CClockSource>:
{
 80065ae:	b480      	push	{r7}
 80065b0:	b083      	sub	sp, #12
 80065b2:	af00      	add	r7, sp, #0
 80065b4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 80065b6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80065ba:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	091b      	lsrs	r3, r3, #4
 80065c2:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 80065c6:	43db      	mvns	r3, r3
 80065c8:	401a      	ands	r2, r3
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	011b      	lsls	r3, r3, #4
 80065ce:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 80065d2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80065d6:	4313      	orrs	r3, r2
 80065d8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80065dc:	bf00      	nop
 80065de:	370c      	adds	r7, #12
 80065e0:	46bd      	mov	sp, r7
 80065e2:	bc80      	pop	{r7}
 80065e4:	4770      	bx	lr

080065e6 <LL_RCC_SetLPTIMClockSource>:
{
 80065e6:	b480      	push	{r7}
 80065e8:	b083      	sub	sp, #12
 80065ea:	af00      	add	r7, sp, #0
 80065ec:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 80065ee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80065f2:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	0c1b      	lsrs	r3, r3, #16
 80065fa:	041b      	lsls	r3, r3, #16
 80065fc:	43db      	mvns	r3, r3
 80065fe:	401a      	ands	r2, r3
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	041b      	lsls	r3, r3, #16
 8006604:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006608:	4313      	orrs	r3, r2
 800660a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800660e:	bf00      	nop
 8006610:	370c      	adds	r7, #12
 8006612:	46bd      	mov	sp, r7
 8006614:	bc80      	pop	{r7}
 8006616:	4770      	bx	lr

08006618 <LL_RCC_SetRNGClockSource>:
{
 8006618:	b480      	push	{r7}
 800661a:	b083      	sub	sp, #12
 800661c:	af00      	add	r7, sp, #0
 800661e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8006620:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006624:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006628:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800662c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	4313      	orrs	r3, r2
 8006634:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8006638:	bf00      	nop
 800663a:	370c      	adds	r7, #12
 800663c:	46bd      	mov	sp, r7
 800663e:	bc80      	pop	{r7}
 8006640:	4770      	bx	lr

08006642 <LL_RCC_SetADCClockSource>:
{
 8006642:	b480      	push	{r7}
 8006644:	b083      	sub	sp, #12
 8006646:	af00      	add	r7, sp, #0
 8006648:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 800664a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800664e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006652:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8006656:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	4313      	orrs	r3, r2
 800665e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8006662:	bf00      	nop
 8006664:	370c      	adds	r7, #12
 8006666:	46bd      	mov	sp, r7
 8006668:	bc80      	pop	{r7}
 800666a:	4770      	bx	lr

0800666c <LL_RCC_SetRTCClockSource>:
{
 800666c:	b480      	push	{r7}
 800666e:	b083      	sub	sp, #12
 8006670:	af00      	add	r7, sp, #0
 8006672:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8006674:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006678:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800667c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006680:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	4313      	orrs	r3, r2
 8006688:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 800668c:	bf00      	nop
 800668e:	370c      	adds	r7, #12
 8006690:	46bd      	mov	sp, r7
 8006692:	bc80      	pop	{r7}
 8006694:	4770      	bx	lr

08006696 <LL_RCC_GetRTCClockSource>:
{
 8006696:	b480      	push	{r7}
 8006698:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 800669a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800669e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80066a2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 80066a6:	4618      	mov	r0, r3
 80066a8:	46bd      	mov	sp, r7
 80066aa:	bc80      	pop	{r7}
 80066ac:	4770      	bx	lr

080066ae <LL_RCC_ForceBackupDomainReset>:
{
 80066ae:	b480      	push	{r7}
 80066b0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80066b2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80066b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80066ba:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80066be:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80066c2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80066c6:	bf00      	nop
 80066c8:	46bd      	mov	sp, r7
 80066ca:	bc80      	pop	{r7}
 80066cc:	4770      	bx	lr

080066ce <LL_RCC_ReleaseBackupDomainReset>:
{
 80066ce:	b480      	push	{r7}
 80066d0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80066d2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80066d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80066da:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80066de:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80066e2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80066e6:	bf00      	nop
 80066e8:	46bd      	mov	sp, r7
 80066ea:	bc80      	pop	{r7}
 80066ec:	4770      	bx	lr
	...

080066f0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80066f0:	b580      	push	{r7, lr}
 80066f2:	b086      	sub	sp, #24
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 80066f8:	2300      	movs	r3, #0
 80066fa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 80066fc:	2300      	movs	r3, #0
 80066fe:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8006700:	2300      	movs	r3, #0
 8006702:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800670c:	2b00      	cmp	r3, #0
 800670e:	d058      	beq.n	80067c2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 8006710:	f7fe fd7e 	bl	8005210 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006714:	f7fb fa7e 	bl	8001c14 <HAL_GetTick>
 8006718:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 800671a:	e009      	b.n	8006730 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800671c:	f7fb fa7a 	bl	8001c14 <HAL_GetTick>
 8006720:	4602      	mov	r2, r0
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	1ad3      	subs	r3, r2, r3
 8006726:	2b02      	cmp	r3, #2
 8006728:	d902      	bls.n	8006730 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 800672a:	2303      	movs	r3, #3
 800672c:	74fb      	strb	r3, [r7, #19]
        break;
 800672e:	e006      	b.n	800673e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8006730:	4b7b      	ldr	r3, [pc, #492]	@ (8006920 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006738:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800673c:	d1ee      	bne.n	800671c <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 800673e:	7cfb      	ldrb	r3, [r7, #19]
 8006740:	2b00      	cmp	r3, #0
 8006742:	d13c      	bne.n	80067be <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8006744:	f7ff ffa7 	bl	8006696 <LL_RCC_GetRTCClockSource>
 8006748:	4602      	mov	r2, r0
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800674e:	429a      	cmp	r2, r3
 8006750:	d00f      	beq.n	8006772 <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006752:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006756:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800675a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800675e:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006760:	f7ff ffa5 	bl	80066ae <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006764:	f7ff ffb3 	bl	80066ce <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006768:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800676c:	697b      	ldr	r3, [r7, #20]
 800676e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 8006772:	697b      	ldr	r3, [r7, #20]
 8006774:	f003 0302 	and.w	r3, r3, #2
 8006778:	2b00      	cmp	r3, #0
 800677a:	d014      	beq.n	80067a6 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800677c:	f7fb fa4a 	bl	8001c14 <HAL_GetTick>
 8006780:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 8006782:	e00b      	b.n	800679c <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006784:	f7fb fa46 	bl	8001c14 <HAL_GetTick>
 8006788:	4602      	mov	r2, r0
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	1ad3      	subs	r3, r2, r3
 800678e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006792:	4293      	cmp	r3, r2
 8006794:	d902      	bls.n	800679c <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 8006796:	2303      	movs	r3, #3
 8006798:	74fb      	strb	r3, [r7, #19]
            break;
 800679a:	e004      	b.n	80067a6 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 800679c:	f7ff feb4 	bl	8006508 <LL_RCC_LSE_IsReady>
 80067a0:	4603      	mov	r3, r0
 80067a2:	2b01      	cmp	r3, #1
 80067a4:	d1ee      	bne.n	8006784 <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 80067a6:	7cfb      	ldrb	r3, [r7, #19]
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d105      	bne.n	80067b8 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80067b0:	4618      	mov	r0, r3
 80067b2:	f7ff ff5b 	bl	800666c <LL_RCC_SetRTCClockSource>
 80067b6:	e004      	b.n	80067c2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80067b8:	7cfb      	ldrb	r3, [r7, #19]
 80067ba:	74bb      	strb	r3, [r7, #18]
 80067bc:	e001      	b.n	80067c2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067be:	7cfb      	ldrb	r3, [r7, #19]
 80067c0:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	f003 0301 	and.w	r3, r3, #1
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d004      	beq.n	80067d8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	685b      	ldr	r3, [r3, #4]
 80067d2:	4618      	mov	r0, r3
 80067d4:	f7ff fea9 	bl	800652a <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	f003 0302 	and.w	r3, r3, #2
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d004      	beq.n	80067ee <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	689b      	ldr	r3, [r3, #8]
 80067e8:	4618      	mov	r0, r3
 80067ea:	f7ff fe9e 	bl	800652a <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	f003 0320 	and.w	r3, r3, #32
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d004      	beq.n	8006804 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	691b      	ldr	r3, [r3, #16]
 80067fe:	4618      	mov	r0, r3
 8006800:	f7ff fec0 	bl	8006584 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800680c:	2b00      	cmp	r3, #0
 800680e:	d004      	beq.n	800681a <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	6a1b      	ldr	r3, [r3, #32]
 8006814:	4618      	mov	r0, r3
 8006816:	f7ff fee6 	bl	80065e6 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006822:	2b00      	cmp	r3, #0
 8006824:	d004      	beq.n	8006830 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800682a:	4618      	mov	r0, r3
 800682c:	f7ff fedb 	bl	80065e6 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006838:	2b00      	cmp	r3, #0
 800683a:	d004      	beq.n	8006846 <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006840:	4618      	mov	r0, r3
 8006842:	f7ff fed0 	bl	80065e6 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800684e:	2b00      	cmp	r3, #0
 8006850:	d004      	beq.n	800685c <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	695b      	ldr	r3, [r3, #20]
 8006856:	4618      	mov	r0, r3
 8006858:	f7ff fea9 	bl	80065ae <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006864:	2b00      	cmp	r3, #0
 8006866:	d004      	beq.n	8006872 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	699b      	ldr	r3, [r3, #24]
 800686c:	4618      	mov	r0, r3
 800686e:	f7ff fe9e 	bl	80065ae <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800687a:	2b00      	cmp	r3, #0
 800687c:	d004      	beq.n	8006888 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	69db      	ldr	r3, [r3, #28]
 8006882:	4618      	mov	r0, r3
 8006884:	f7ff fe93 	bl	80065ae <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	f003 0310 	and.w	r3, r3, #16
 8006890:	2b00      	cmp	r3, #0
 8006892:	d011      	beq.n	80068b8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	68db      	ldr	r3, [r3, #12]
 8006898:	4618      	mov	r0, r3
 800689a:	f7ff fe5e 	bl	800655a <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	68db      	ldr	r3, [r3, #12]
 80068a2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80068a6:	d107      	bne.n	80068b8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 80068a8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80068ac:	68db      	ldr	r3, [r3, #12]
 80068ae:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80068b2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80068b6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d010      	beq.n	80068e6 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068c8:	4618      	mov	r0, r3
 80068ca:	f7ff fea5 	bl	8006618 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d107      	bne.n	80068e6 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 80068d6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80068da:	68db      	ldr	r3, [r3, #12]
 80068dc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80068e0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80068e4:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d011      	beq.n	8006916 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068f6:	4618      	mov	r0, r3
 80068f8:	f7ff fea3 	bl	8006642 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006900:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006904:	d107      	bne.n	8006916 <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006906:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800690a:	68db      	ldr	r3, [r3, #12]
 800690c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006910:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006914:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8006916:	7cbb      	ldrb	r3, [r7, #18]
}
 8006918:	4618      	mov	r0, r3
 800691a:	3718      	adds	r7, #24
 800691c:	46bd      	mov	sp, r7
 800691e:	bd80      	pop	{r7, pc}
 8006920:	58000400 	.word	0x58000400

08006924 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006924:	b580      	push	{r7, lr}
 8006926:	b084      	sub	sp, #16
 8006928:	af00      	add	r7, sp, #0
 800692a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800692c:	2301      	movs	r3, #1
 800692e:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	2b00      	cmp	r3, #0
 8006934:	d071      	beq.n	8006a1a <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800693c:	b2db      	uxtb	r3, r3
 800693e:	2b00      	cmp	r3, #0
 8006940:	d106      	bne.n	8006950 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	2200      	movs	r2, #0
 8006946:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800694a:	6878      	ldr	r0, [r7, #4]
 800694c:	f7fa feb2 	bl	80016b4 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	2202      	movs	r2, #2
 8006954:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Check if the calendar has been not initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8006958:	4b32      	ldr	r3, [pc, #200]	@ (8006a24 <HAL_RTC_Init+0x100>)
 800695a:	68db      	ldr	r3, [r3, #12]
 800695c:	f003 0310 	and.w	r3, r3, #16
 8006960:	2b10      	cmp	r3, #16
 8006962:	d051      	beq.n	8006a08 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006964:	4b2f      	ldr	r3, [pc, #188]	@ (8006a24 <HAL_RTC_Init+0x100>)
 8006966:	22ca      	movs	r2, #202	@ 0xca
 8006968:	625a      	str	r2, [r3, #36]	@ 0x24
 800696a:	4b2e      	ldr	r3, [pc, #184]	@ (8006a24 <HAL_RTC_Init+0x100>)
 800696c:	2253      	movs	r2, #83	@ 0x53
 800696e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8006970:	6878      	ldr	r0, [r7, #4]
 8006972:	f000 fae9 	bl	8006f48 <RTC_EnterInitMode>
 8006976:	4603      	mov	r3, r0
 8006978:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 800697a:	7bfb      	ldrb	r3, [r7, #15]
 800697c:	2b00      	cmp	r3, #0
 800697e:	d13f      	bne.n	8006a00 <HAL_RTC_Init+0xdc>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8006980:	4b28      	ldr	r3, [pc, #160]	@ (8006a24 <HAL_RTC_Init+0x100>)
 8006982:	699b      	ldr	r3, [r3, #24]
 8006984:	4a27      	ldr	r2, [pc, #156]	@ (8006a24 <HAL_RTC_Init+0x100>)
 8006986:	f023 638e 	bic.w	r3, r3, #74448896	@ 0x4700000
 800698a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800698e:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8006990:	4b24      	ldr	r3, [pc, #144]	@ (8006a24 <HAL_RTC_Init+0x100>)
 8006992:	699a      	ldr	r2, [r3, #24]
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	6859      	ldr	r1, [r3, #4]
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	691b      	ldr	r3, [r3, #16]
 800699c:	4319      	orrs	r1, r3
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	699b      	ldr	r3, [r3, #24]
 80069a2:	430b      	orrs	r3, r1
 80069a4:	491f      	ldr	r1, [pc, #124]	@ (8006a24 <HAL_RTC_Init+0x100>)
 80069a6:	4313      	orrs	r3, r2
 80069a8:	618b      	str	r3, [r1, #24]

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	68da      	ldr	r2, [r3, #12]
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	689b      	ldr	r3, [r3, #8]
 80069b2:	041b      	lsls	r3, r3, #16
 80069b4:	491b      	ldr	r1, [pc, #108]	@ (8006a24 <HAL_RTC_Init+0x100>)
 80069b6:	4313      	orrs	r3, r2
 80069b8:	610b      	str	r3, [r1, #16]

        /* Configure the Binary mode */
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 80069ba:	4b1a      	ldr	r3, [pc, #104]	@ (8006a24 <HAL_RTC_Init+0x100>)
 80069bc:	68db      	ldr	r3, [r3, #12]
 80069be:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069ca:	430b      	orrs	r3, r1
 80069cc:	4915      	ldr	r1, [pc, #84]	@ (8006a24 <HAL_RTC_Init+0x100>)
 80069ce:	4313      	orrs	r3, r2
 80069d0:	60cb      	str	r3, [r1, #12]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 80069d2:	6878      	ldr	r0, [r7, #4]
 80069d4:	f000 faec 	bl	8006fb0 <RTC_ExitInitMode>
 80069d8:	4603      	mov	r3, r0
 80069da:	73fb      	strb	r3, [r7, #15]
        if (status == HAL_OK)
 80069dc:	7bfb      	ldrb	r3, [r7, #15]
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d10e      	bne.n	8006a00 <HAL_RTC_Init+0xdc>
        {
          MODIFY_REG(RTC->CR, \
 80069e2:	4b10      	ldr	r3, [pc, #64]	@ (8006a24 <HAL_RTC_Init+0x100>)
 80069e4:	699b      	ldr	r3, [r3, #24]
 80069e6:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	6a19      	ldr	r1, [r3, #32]
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	69db      	ldr	r3, [r3, #28]
 80069f2:	4319      	orrs	r1, r3
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	695b      	ldr	r3, [r3, #20]
 80069f8:	430b      	orrs	r3, r1
 80069fa:	490a      	ldr	r1, [pc, #40]	@ (8006a24 <HAL_RTC_Init+0x100>)
 80069fc:	4313      	orrs	r3, r2
 80069fe:	618b      	str	r3, [r1, #24]
                    hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006a00:	4b08      	ldr	r3, [pc, #32]	@ (8006a24 <HAL_RTC_Init+0x100>)
 8006a02:	22ff      	movs	r2, #255	@ 0xff
 8006a04:	625a      	str	r2, [r3, #36]	@ 0x24
 8006a06:	e001      	b.n	8006a0c <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* Calendar is already initialized */
      /* Set flag to OK */
      status = HAL_OK;
 8006a08:	2300      	movs	r3, #0
 8006a0a:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8006a0c:	7bfb      	ldrb	r3, [r7, #15]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d103      	bne.n	8006a1a <HAL_RTC_Init+0xf6>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	2201      	movs	r2, #1
 8006a16:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    }
  }

  return status;
 8006a1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a1c:	4618      	mov	r0, r3
 8006a1e:	3710      	adds	r7, #16
 8006a20:	46bd      	mov	sp, r7
 8006a22:	bd80      	pop	{r7, pc}
 8006a24:	40002800 	.word	0x40002800

08006a28 <HAL_RTC_SetAlarm>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8006a28:	b590      	push	{r4, r7, lr}
 8006a2a:	b087      	sub	sp, #28
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	60f8      	str	r0, [r7, #12]
 8006a30:	60b9      	str	r1, [r7, #8]
 8006a32:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8006a34:	2300      	movs	r3, #0
 8006a36:	617b      	str	r3, [r7, #20]
  uint32_t binaryMode;

  __HAL_LOCK(hrtc);
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8006a3e:	2b01      	cmp	r3, #1
 8006a40:	d101      	bne.n	8006a46 <HAL_RTC_SetAlarm+0x1e>
 8006a42:	2302      	movs	r3, #2
 8006a44:	e0eb      	b.n	8006c1e <HAL_RTC_SetAlarm+0x1f6>
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	2201      	movs	r2, #1
 8006a4a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	2202      	movs	r2, #2
 8006a52:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    assert_param((sAlarm->AlarmSubSecondMask >> RTC_ALRMASSR_MASKSS_Pos) <= (8U + (READ_BIT(RTC->ICSR, RTC_ICSR_BCDU) >> RTC_ICSR_BCDU_Pos)));
  }
#endif

  /* Get Binary mode (32-bit free-running counter configuration) */
  binaryMode = READ_BIT(RTC->ICSR, RTC_ICSR_BIN);
 8006a56:	4b74      	ldr	r3, [pc, #464]	@ (8006c28 <HAL_RTC_SetAlarm+0x200>)
 8006a58:	68db      	ldr	r3, [r3, #12]
 8006a5a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006a5e:	613b      	str	r3, [r7, #16]

  if (binaryMode != RTC_BINARY_ONLY)
 8006a60:	693b      	ldr	r3, [r7, #16]
 8006a62:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006a66:	d06a      	beq.n	8006b3e <HAL_RTC_SetAlarm+0x116>
  {
    if (Format == RTC_FORMAT_BIN)
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d13a      	bne.n	8006ae4 <HAL_RTC_SetAlarm+0xbc>
    {
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8006a6e:	4b6e      	ldr	r3, [pc, #440]	@ (8006c28 <HAL_RTC_SetAlarm+0x200>)
 8006a70:	699b      	ldr	r3, [r3, #24]
 8006a72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d102      	bne.n	8006a80 <HAL_RTC_SetAlarm+0x58>
        assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
        assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
      }
      else
      {
        sAlarm->AlarmTime.TimeFormat = 0x00U;
 8006a7a:	68bb      	ldr	r3, [r7, #8]
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
      }
      assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
      assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));

      if( sAlarm->AlarmMask != RTC_ALARMMASK_DATEWEEKDAY )
 8006a80:	68bb      	ldr	r3, [r7, #8]
 8006a82:	695b      	ldr	r3, [r3, #20]
 8006a84:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
        }
      }

      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006a88:	68bb      	ldr	r3, [r7, #8]
 8006a8a:	781b      	ldrb	r3, [r3, #0]
 8006a8c:	4618      	mov	r0, r3
 8006a8e:	f000 facd 	bl	800702c <RTC_ByteToBcd2>
 8006a92:	4603      	mov	r3, r0
 8006a94:	041c      	lsls	r4, r3, #16
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006a96:	68bb      	ldr	r3, [r7, #8]
 8006a98:	785b      	ldrb	r3, [r3, #1]
 8006a9a:	4618      	mov	r0, r3
 8006a9c:	f000 fac6 	bl	800702c <RTC_ByteToBcd2>
 8006aa0:	4603      	mov	r3, r0
 8006aa2:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006aa4:	431c      	orrs	r4, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8006aa6:	68bb      	ldr	r3, [r7, #8]
 8006aa8:	789b      	ldrb	r3, [r3, #2]
 8006aaa:	4618      	mov	r0, r3
 8006aac:	f000 fabe 	bl	800702c <RTC_ByteToBcd2>
 8006ab0:	4603      	mov	r3, r0
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006ab2:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8006ab6:	68bb      	ldr	r3, [r7, #8]
 8006ab8:	78db      	ldrb	r3, [r3, #3]
 8006aba:	059b      	lsls	r3, r3, #22
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8006abc:	ea42 0403 	orr.w	r4, r2, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8006ac0:	68bb      	ldr	r3, [r7, #8]
 8006ac2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006ac6:	4618      	mov	r0, r3
 8006ac8:	f000 fab0 	bl	800702c <RTC_ByteToBcd2>
 8006acc:	4603      	mov	r3, r0
 8006ace:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8006ad0:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8006ad4:	68bb      	ldr	r3, [r7, #8]
 8006ad6:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8006ad8:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 8006ada:	68bb      	ldr	r3, [r7, #8]
 8006adc:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006ade:	4313      	orrs	r3, r2
 8006ae0:	617b      	str	r3, [r7, #20]
 8006ae2:	e02c      	b.n	8006b3e <HAL_RTC_SetAlarm+0x116>
    }
    else /* format BCD */
    {
      if( sAlarm->AlarmMask != RTC_ALARMMASK_ALL )
 8006ae4:	68bb      	ldr	r3, [r7, #8]
 8006ae6:	695b      	ldr	r3, [r3, #20]
 8006ae8:	f1b3 3f80 	cmp.w	r3, #2155905152	@ 0x80808080
 8006aec:	d00d      	beq.n	8006b0a <HAL_RTC_SetAlarm+0xe2>
      {
        if( sAlarm->AlarmMask != RTC_ALARMMASK_HOURS )
 8006aee:	68bb      	ldr	r3, [r7, #8]
 8006af0:	695b      	ldr	r3, [r3, #20]
 8006af2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006af6:	d008      	beq.n	8006b0a <HAL_RTC_SetAlarm+0xe2>
        {
          if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8006af8:	4b4b      	ldr	r3, [pc, #300]	@ (8006c28 <HAL_RTC_SetAlarm+0x200>)
 8006afa:	699b      	ldr	r3, [r3, #24]
 8006afc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d102      	bne.n	8006b0a <HAL_RTC_SetAlarm+0xe2>
            assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
            assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
          }
          else
          {
            sAlarm->AlarmTime.TimeFormat = 0x00U;
 8006b04:	68bb      	ldr	r3, [r7, #8]
 8006b06:	2200      	movs	r2, #0
 8006b08:	70da      	strb	r2, [r3, #3]
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
        }
      }
#endif /* USE_FULL_ASSERT */
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006b0a:	68bb      	ldr	r3, [r7, #8]
 8006b0c:	781b      	ldrb	r3, [r3, #0]
 8006b0e:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006b10:	68bb      	ldr	r3, [r7, #8]
 8006b12:	785b      	ldrb	r3, [r3, #1]
 8006b14:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006b16:	4313      	orrs	r3, r2
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8006b18:	68ba      	ldr	r2, [r7, #8]
 8006b1a:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006b1c:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8006b1e:	68bb      	ldr	r3, [r7, #8]
 8006b20:	78db      	ldrb	r3, [r3, #3]
 8006b22:	059b      	lsls	r3, r3, #22
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8006b24:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8006b26:	68bb      	ldr	r3, [r7, #8]
 8006b28:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006b2c:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8006b2e:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8006b30:	68bb      	ldr	r3, [r7, #8]
 8006b32:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8006b34:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 8006b36:	68bb      	ldr	r3, [r7, #8]
 8006b38:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006b3a:	4313      	orrs	r3, r2
 8006b3c:	617b      	str	r3, [r7, #20]
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006b3e:	4b3a      	ldr	r3, [pc, #232]	@ (8006c28 <HAL_RTC_SetAlarm+0x200>)
 8006b40:	22ca      	movs	r2, #202	@ 0xca
 8006b42:	625a      	str	r2, [r3, #36]	@ 0x24
 8006b44:	4b38      	ldr	r3, [pc, #224]	@ (8006c28 <HAL_RTC_SetAlarm+0x200>)
 8006b46:	2253      	movs	r2, #83	@ 0x53
 8006b48:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8006b4a:	68bb      	ldr	r3, [r7, #8]
 8006b4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b4e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006b52:	d12c      	bne.n	8006bae <HAL_RTC_SetAlarm+0x186>
  {
    /* Disable the Alarm A interrupt */
    /* In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, (RTC_CR_ALRAE | RTC_CR_ALRAIE));
 8006b54:	4b34      	ldr	r3, [pc, #208]	@ (8006c28 <HAL_RTC_SetAlarm+0x200>)
 8006b56:	699b      	ldr	r3, [r3, #24]
 8006b58:	4a33      	ldr	r2, [pc, #204]	@ (8006c28 <HAL_RTC_SetAlarm+0x200>)
 8006b5a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8006b5e:	6193      	str	r3, [r2, #24]

    /* Clear flag alarm A */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8006b60:	4b31      	ldr	r3, [pc, #196]	@ (8006c28 <HAL_RTC_SetAlarm+0x200>)
 8006b62:	2201      	movs	r2, #1
 8006b64:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 8006b66:	693b      	ldr	r3, [r7, #16]
 8006b68:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006b6c:	d107      	bne.n	8006b7e <HAL_RTC_SetAlarm+0x156>
    {
      WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
 8006b6e:	68bb      	ldr	r3, [r7, #8]
 8006b70:	699a      	ldr	r2, [r3, #24]
 8006b72:	68bb      	ldr	r3, [r7, #8]
 8006b74:	69db      	ldr	r3, [r3, #28]
 8006b76:	492c      	ldr	r1, [pc, #176]	@ (8006c28 <HAL_RTC_SetAlarm+0x200>)
 8006b78:	4313      	orrs	r3, r2
 8006b7a:	644b      	str	r3, [r1, #68]	@ 0x44
 8006b7c:	e006      	b.n	8006b8c <HAL_RTC_SetAlarm+0x164>
    }
    else
    {
      WRITE_REG(RTC->ALRMAR, tmpreg);
 8006b7e:	4a2a      	ldr	r2, [pc, #168]	@ (8006c28 <HAL_RTC_SetAlarm+0x200>)
 8006b80:	697b      	ldr	r3, [r7, #20]
 8006b82:	6413      	str	r3, [r2, #64]	@ 0x40
      WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask);
 8006b84:	4a28      	ldr	r2, [pc, #160]	@ (8006c28 <HAL_RTC_SetAlarm+0x200>)
 8006b86:	68bb      	ldr	r3, [r7, #8]
 8006b88:	699b      	ldr	r3, [r3, #24]
 8006b8a:	6453      	str	r3, [r2, #68]	@ 0x44
    }

    WRITE_REG(RTC->ALRABINR, sAlarm->AlarmTime.SubSeconds);
 8006b8c:	4a26      	ldr	r2, [pc, #152]	@ (8006c28 <HAL_RTC_SetAlarm+0x200>)
 8006b8e:	68bb      	ldr	r3, [r7, #8]
 8006b90:	685b      	ldr	r3, [r3, #4]
 8006b92:	6713      	str	r3, [r2, #112]	@ 0x70

    /* Store in the handle the Alarm A enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b98:	f043 0201 	orr.w	r2, r3, #1
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Configure the Alarm state: Enable Alarm */
    SET_BIT(RTC->CR, RTC_CR_ALRAE);
 8006ba0:	4b21      	ldr	r3, [pc, #132]	@ (8006c28 <HAL_RTC_SetAlarm+0x200>)
 8006ba2:	699b      	ldr	r3, [r3, #24]
 8006ba4:	4a20      	ldr	r2, [pc, #128]	@ (8006c28 <HAL_RTC_SetAlarm+0x200>)
 8006ba6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006baa:	6193      	str	r3, [r2, #24]
 8006bac:	e02b      	b.n	8006c06 <HAL_RTC_SetAlarm+0x1de>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    /* In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, (RTC_CR_ALRBE | RTC_CR_ALRBIE));
 8006bae:	4b1e      	ldr	r3, [pc, #120]	@ (8006c28 <HAL_RTC_SetAlarm+0x200>)
 8006bb0:	699b      	ldr	r3, [r3, #24]
 8006bb2:	4a1d      	ldr	r2, [pc, #116]	@ (8006c28 <HAL_RTC_SetAlarm+0x200>)
 8006bb4:	f423 5308 	bic.w	r3, r3, #8704	@ 0x2200
 8006bb8:	6193      	str	r3, [r2, #24]

    /* Clear flag alarm B */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8006bba:	4b1b      	ldr	r3, [pc, #108]	@ (8006c28 <HAL_RTC_SetAlarm+0x200>)
 8006bbc:	2202      	movs	r2, #2
 8006bbe:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 8006bc0:	693b      	ldr	r3, [r7, #16]
 8006bc2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006bc6:	d107      	bne.n	8006bd8 <HAL_RTC_SetAlarm+0x1b0>
    {
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
 8006bc8:	68bb      	ldr	r3, [r7, #8]
 8006bca:	699a      	ldr	r2, [r3, #24]
 8006bcc:	68bb      	ldr	r3, [r7, #8]
 8006bce:	69db      	ldr	r3, [r3, #28]
 8006bd0:	4915      	ldr	r1, [pc, #84]	@ (8006c28 <HAL_RTC_SetAlarm+0x200>)
 8006bd2:	4313      	orrs	r3, r2
 8006bd4:	64cb      	str	r3, [r1, #76]	@ 0x4c
 8006bd6:	e006      	b.n	8006be6 <HAL_RTC_SetAlarm+0x1be>
    }
    else
    {
      WRITE_REG(RTC->ALRMBR, tmpreg);
 8006bd8:	4a13      	ldr	r2, [pc, #76]	@ (8006c28 <HAL_RTC_SetAlarm+0x200>)
 8006bda:	697b      	ldr	r3, [r7, #20]
 8006bdc:	6493      	str	r3, [r2, #72]	@ 0x48
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask);
 8006bde:	4a12      	ldr	r2, [pc, #72]	@ (8006c28 <HAL_RTC_SetAlarm+0x200>)
 8006be0:	68bb      	ldr	r3, [r7, #8]
 8006be2:	699b      	ldr	r3, [r3, #24]
 8006be4:	64d3      	str	r3, [r2, #76]	@ 0x4c
    }

    WRITE_REG(RTC->ALRBBINR, sAlarm->AlarmTime.SubSeconds);
 8006be6:	4a10      	ldr	r2, [pc, #64]	@ (8006c28 <HAL_RTC_SetAlarm+0x200>)
 8006be8:	68bb      	ldr	r3, [r7, #8]
 8006bea:	685b      	ldr	r3, [r3, #4]
 8006bec:	6753      	str	r3, [r2, #116]	@ 0x74

    /* Store in the handle the Alarm B enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006bf2:	f043 0202 	orr.w	r2, r3, #2
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Configure the Alarm state: Enable Alarm */
    SET_BIT(RTC->CR, RTC_CR_ALRBE);
 8006bfa:	4b0b      	ldr	r3, [pc, #44]	@ (8006c28 <HAL_RTC_SetAlarm+0x200>)
 8006bfc:	699b      	ldr	r3, [r3, #24]
 8006bfe:	4a0a      	ldr	r2, [pc, #40]	@ (8006c28 <HAL_RTC_SetAlarm+0x200>)
 8006c00:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006c04:	6193      	str	r3, [r2, #24]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006c06:	4b08      	ldr	r3, [pc, #32]	@ (8006c28 <HAL_RTC_SetAlarm+0x200>)
 8006c08:	22ff      	movs	r2, #255	@ 0xff
 8006c0a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	2201      	movs	r2, #1
 8006c10:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	2200      	movs	r2, #0
 8006c18:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8006c1c:	2300      	movs	r3, #0
}
 8006c1e:	4618      	mov	r0, r3
 8006c20:	371c      	adds	r7, #28
 8006c22:	46bd      	mov	sp, r7
 8006c24:	bd90      	pop	{r4, r7, pc}
 8006c26:	bf00      	nop
 8006c28:	40002800 	.word	0x40002800

08006c2c <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8006c2c:	b590      	push	{r4, r7, lr}
 8006c2e:	b087      	sub	sp, #28
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	60f8      	str	r0, [r7, #12]
 8006c34:	60b9      	str	r1, [r7, #8]
 8006c36:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8006c38:	2300      	movs	r3, #0
 8006c3a:	617b      	str	r3, [r7, #20]
  uint32_t binaryMode;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8006c42:	2b01      	cmp	r3, #1
 8006c44:	d101      	bne.n	8006c4a <HAL_RTC_SetAlarm_IT+0x1e>
 8006c46:	2302      	movs	r3, #2
 8006c48:	e0f3      	b.n	8006e32 <HAL_RTC_SetAlarm_IT+0x206>
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	2201      	movs	r2, #1
 8006c4e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	2202      	movs	r2, #2
 8006c56:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    assert_param((sAlarm->AlarmSubSecondMask >> RTC_ALRMASSR_MASKSS_Pos) <= (8U + (READ_BIT(RTC->ICSR, RTC_ICSR_BCDU) >> RTC_ICSR_BCDU_Pos)));
  }
#endif

  /* Get Binary mode (32-bit free-running counter configuration) */
  binaryMode = READ_BIT(RTC->ICSR, RTC_ICSR_BIN);
 8006c5a:	4b78      	ldr	r3, [pc, #480]	@ (8006e3c <HAL_RTC_SetAlarm_IT+0x210>)
 8006c5c:	68db      	ldr	r3, [r3, #12]
 8006c5e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006c62:	613b      	str	r3, [r7, #16]

  if (binaryMode != RTC_BINARY_ONLY)
 8006c64:	693b      	ldr	r3, [r7, #16]
 8006c66:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006c6a:	d06a      	beq.n	8006d42 <HAL_RTC_SetAlarm_IT+0x116>
  {
    if (Format == RTC_FORMAT_BIN)
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d13a      	bne.n	8006ce8 <HAL_RTC_SetAlarm_IT+0xbc>
    {
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8006c72:	4b72      	ldr	r3, [pc, #456]	@ (8006e3c <HAL_RTC_SetAlarm_IT+0x210>)
 8006c74:	699b      	ldr	r3, [r3, #24]
 8006c76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d102      	bne.n	8006c84 <HAL_RTC_SetAlarm_IT+0x58>
        assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
        assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
      }
      else
      {
        sAlarm->AlarmTime.TimeFormat = 0x00U;
 8006c7e:	68bb      	ldr	r3, [r7, #8]
 8006c80:	2200      	movs	r2, #0
 8006c82:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
      }
      assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
      assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));

      if( sAlarm->AlarmMask != RTC_ALARMMASK_DATEWEEKDAY )
 8006c84:	68bb      	ldr	r3, [r7, #8]
 8006c86:	695b      	ldr	r3, [r3, #20]
 8006c88:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
        }
      }

      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006c8c:	68bb      	ldr	r3, [r7, #8]
 8006c8e:	781b      	ldrb	r3, [r3, #0]
 8006c90:	4618      	mov	r0, r3
 8006c92:	f000 f9cb 	bl	800702c <RTC_ByteToBcd2>
 8006c96:	4603      	mov	r3, r0
 8006c98:	041c      	lsls	r4, r3, #16
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006c9a:	68bb      	ldr	r3, [r7, #8]
 8006c9c:	785b      	ldrb	r3, [r3, #1]
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	f000 f9c4 	bl	800702c <RTC_ByteToBcd2>
 8006ca4:	4603      	mov	r3, r0
 8006ca6:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006ca8:	431c      	orrs	r4, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8006caa:	68bb      	ldr	r3, [r7, #8]
 8006cac:	789b      	ldrb	r3, [r3, #2]
 8006cae:	4618      	mov	r0, r3
 8006cb0:	f000 f9bc 	bl	800702c <RTC_ByteToBcd2>
 8006cb4:	4603      	mov	r3, r0
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006cb6:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8006cba:	68bb      	ldr	r3, [r7, #8]
 8006cbc:	78db      	ldrb	r3, [r3, #3]
 8006cbe:	059b      	lsls	r3, r3, #22
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8006cc0:	ea42 0403 	orr.w	r4, r2, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8006cc4:	68bb      	ldr	r3, [r7, #8]
 8006cc6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006cca:	4618      	mov	r0, r3
 8006ccc:	f000 f9ae 	bl	800702c <RTC_ByteToBcd2>
 8006cd0:	4603      	mov	r3, r0
 8006cd2:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8006cd4:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8006cd8:	68bb      	ldr	r3, [r7, #8]
 8006cda:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8006cdc:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 8006cde:	68bb      	ldr	r3, [r7, #8]
 8006ce0:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006ce2:	4313      	orrs	r3, r2
 8006ce4:	617b      	str	r3, [r7, #20]
 8006ce6:	e02c      	b.n	8006d42 <HAL_RTC_SetAlarm_IT+0x116>
    }
    else /* Format BCD */
    {
      if( sAlarm->AlarmMask != RTC_ALARMMASK_ALL )
 8006ce8:	68bb      	ldr	r3, [r7, #8]
 8006cea:	695b      	ldr	r3, [r3, #20]
 8006cec:	f1b3 3f80 	cmp.w	r3, #2155905152	@ 0x80808080
 8006cf0:	d00d      	beq.n	8006d0e <HAL_RTC_SetAlarm_IT+0xe2>
      {
        if( sAlarm->AlarmMask != RTC_ALARMMASK_HOURS )
 8006cf2:	68bb      	ldr	r3, [r7, #8]
 8006cf4:	695b      	ldr	r3, [r3, #20]
 8006cf6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006cfa:	d008      	beq.n	8006d0e <HAL_RTC_SetAlarm_IT+0xe2>
        {
          if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8006cfc:	4b4f      	ldr	r3, [pc, #316]	@ (8006e3c <HAL_RTC_SetAlarm_IT+0x210>)
 8006cfe:	699b      	ldr	r3, [r3, #24]
 8006d00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d102      	bne.n	8006d0e <HAL_RTC_SetAlarm_IT+0xe2>
            assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
            assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
          }
          else
          {
            sAlarm->AlarmTime.TimeFormat = 0x00U;
 8006d08:	68bb      	ldr	r3, [r7, #8]
 8006d0a:	2200      	movs	r2, #0
 8006d0c:	70da      	strb	r2, [r3, #3]
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
        }
      }
#endif /* USE_FULL_ASSERT */
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006d0e:	68bb      	ldr	r3, [r7, #8]
 8006d10:	781b      	ldrb	r3, [r3, #0]
 8006d12:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006d14:	68bb      	ldr	r3, [r7, #8]
 8006d16:	785b      	ldrb	r3, [r3, #1]
 8006d18:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006d1a:	4313      	orrs	r3, r2
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8006d1c:	68ba      	ldr	r2, [r7, #8]
 8006d1e:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006d20:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8006d22:	68bb      	ldr	r3, [r7, #8]
 8006d24:	78db      	ldrb	r3, [r3, #3]
 8006d26:	059b      	lsls	r3, r3, #22
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8006d28:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8006d2a:	68bb      	ldr	r3, [r7, #8]
 8006d2c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006d30:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8006d32:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8006d34:	68bb      	ldr	r3, [r7, #8]
 8006d36:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8006d38:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 8006d3a:	68bb      	ldr	r3, [r7, #8]
 8006d3c:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006d3e:	4313      	orrs	r3, r2
 8006d40:	617b      	str	r3, [r7, #20]

    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006d42:	4b3e      	ldr	r3, [pc, #248]	@ (8006e3c <HAL_RTC_SetAlarm_IT+0x210>)
 8006d44:	22ca      	movs	r2, #202	@ 0xca
 8006d46:	625a      	str	r2, [r3, #36]	@ 0x24
 8006d48:	4b3c      	ldr	r3, [pc, #240]	@ (8006e3c <HAL_RTC_SetAlarm_IT+0x210>)
 8006d4a:	2253      	movs	r2, #83	@ 0x53
 8006d4c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8006d4e:	68bb      	ldr	r3, [r7, #8]
 8006d50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d52:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006d56:	d12c      	bne.n	8006db2 <HAL_RTC_SetAlarm_IT+0x186>
  {
    /* Disable the Alarm A interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8006d58:	4b38      	ldr	r3, [pc, #224]	@ (8006e3c <HAL_RTC_SetAlarm_IT+0x210>)
 8006d5a:	699b      	ldr	r3, [r3, #24]
 8006d5c:	4a37      	ldr	r2, [pc, #220]	@ (8006e3c <HAL_RTC_SetAlarm_IT+0x210>)
 8006d5e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8006d62:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm A */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8006d64:	4b35      	ldr	r3, [pc, #212]	@ (8006e3c <HAL_RTC_SetAlarm_IT+0x210>)
 8006d66:	2201      	movs	r2, #1
 8006d68:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 8006d6a:	693b      	ldr	r3, [r7, #16]
 8006d6c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006d70:	d107      	bne.n	8006d82 <HAL_RTC_SetAlarm_IT+0x156>
    {
      RTC->ALRMASSR = sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr;
 8006d72:	68bb      	ldr	r3, [r7, #8]
 8006d74:	699a      	ldr	r2, [r3, #24]
 8006d76:	68bb      	ldr	r3, [r7, #8]
 8006d78:	69db      	ldr	r3, [r3, #28]
 8006d7a:	4930      	ldr	r1, [pc, #192]	@ (8006e3c <HAL_RTC_SetAlarm_IT+0x210>)
 8006d7c:	4313      	orrs	r3, r2
 8006d7e:	644b      	str	r3, [r1, #68]	@ 0x44
 8006d80:	e006      	b.n	8006d90 <HAL_RTC_SetAlarm_IT+0x164>
    }
    else
    {
      WRITE_REG(RTC->ALRMAR, tmpreg);
 8006d82:	4a2e      	ldr	r2, [pc, #184]	@ (8006e3c <HAL_RTC_SetAlarm_IT+0x210>)
 8006d84:	697b      	ldr	r3, [r7, #20]
 8006d86:	6413      	str	r3, [r2, #64]	@ 0x40
      WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask);
 8006d88:	4a2c      	ldr	r2, [pc, #176]	@ (8006e3c <HAL_RTC_SetAlarm_IT+0x210>)
 8006d8a:	68bb      	ldr	r3, [r7, #8]
 8006d8c:	699b      	ldr	r3, [r3, #24]
 8006d8e:	6453      	str	r3, [r2, #68]	@ 0x44
    }

    WRITE_REG(RTC->ALRABINR, sAlarm->AlarmTime.SubSeconds);
 8006d90:	4a2a      	ldr	r2, [pc, #168]	@ (8006e3c <HAL_RTC_SetAlarm_IT+0x210>)
 8006d92:	68bb      	ldr	r3, [r7, #8]
 8006d94:	685b      	ldr	r3, [r3, #4]
 8006d96:	6713      	str	r3, [r2, #112]	@ 0x70

    /* Store in the handle the Alarm A enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d9c:	f043 0201 	orr.w	r2, r3, #1
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8006da4:	4b25      	ldr	r3, [pc, #148]	@ (8006e3c <HAL_RTC_SetAlarm_IT+0x210>)
 8006da6:	699b      	ldr	r3, [r3, #24]
 8006da8:	4a24      	ldr	r2, [pc, #144]	@ (8006e3c <HAL_RTC_SetAlarm_IT+0x210>)
 8006daa:	f443 5388 	orr.w	r3, r3, #4352	@ 0x1100
 8006dae:	6193      	str	r3, [r2, #24]
 8006db0:	e02b      	b.n	8006e0a <HAL_RTC_SetAlarm_IT+0x1de>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8006db2:	4b22      	ldr	r3, [pc, #136]	@ (8006e3c <HAL_RTC_SetAlarm_IT+0x210>)
 8006db4:	699b      	ldr	r3, [r3, #24]
 8006db6:	4a21      	ldr	r2, [pc, #132]	@ (8006e3c <HAL_RTC_SetAlarm_IT+0x210>)
 8006db8:	f423 5308 	bic.w	r3, r3, #8704	@ 0x2200
 8006dbc:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm B */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8006dbe:	4b1f      	ldr	r3, [pc, #124]	@ (8006e3c <HAL_RTC_SetAlarm_IT+0x210>)
 8006dc0:	2202      	movs	r2, #2
 8006dc2:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 8006dc4:	693b      	ldr	r3, [r7, #16]
 8006dc6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006dca:	d107      	bne.n	8006ddc <HAL_RTC_SetAlarm_IT+0x1b0>
    {
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
 8006dcc:	68bb      	ldr	r3, [r7, #8]
 8006dce:	699a      	ldr	r2, [r3, #24]
 8006dd0:	68bb      	ldr	r3, [r7, #8]
 8006dd2:	69db      	ldr	r3, [r3, #28]
 8006dd4:	4919      	ldr	r1, [pc, #100]	@ (8006e3c <HAL_RTC_SetAlarm_IT+0x210>)
 8006dd6:	4313      	orrs	r3, r2
 8006dd8:	64cb      	str	r3, [r1, #76]	@ 0x4c
 8006dda:	e006      	b.n	8006dea <HAL_RTC_SetAlarm_IT+0x1be>
    }
    else
    {
      WRITE_REG(RTC->ALRMBR, tmpreg);
 8006ddc:	4a17      	ldr	r2, [pc, #92]	@ (8006e3c <HAL_RTC_SetAlarm_IT+0x210>)
 8006dde:	697b      	ldr	r3, [r7, #20]
 8006de0:	6493      	str	r3, [r2, #72]	@ 0x48
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask);
 8006de2:	4a16      	ldr	r2, [pc, #88]	@ (8006e3c <HAL_RTC_SetAlarm_IT+0x210>)
 8006de4:	68bb      	ldr	r3, [r7, #8]
 8006de6:	699b      	ldr	r3, [r3, #24]
 8006de8:	64d3      	str	r3, [r2, #76]	@ 0x4c
    }

    WRITE_REG(RTC->ALRBBINR, sAlarm->AlarmTime.SubSeconds);
 8006dea:	4a14      	ldr	r2, [pc, #80]	@ (8006e3c <HAL_RTC_SetAlarm_IT+0x210>)
 8006dec:	68bb      	ldr	r3, [r7, #8]
 8006dee:	685b      	ldr	r3, [r3, #4]
 8006df0:	6753      	str	r3, [r2, #116]	@ 0x74

    /* Store in the handle the Alarm B enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006df6:	f043 0202 	orr.w	r2, r3, #2
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8006dfe:	4b0f      	ldr	r3, [pc, #60]	@ (8006e3c <HAL_RTC_SetAlarm_IT+0x210>)
 8006e00:	699b      	ldr	r3, [r3, #24]
 8006e02:	4a0e      	ldr	r2, [pc, #56]	@ (8006e3c <HAL_RTC_SetAlarm_IT+0x210>)
 8006e04:	f443 5308 	orr.w	r3, r3, #8704	@ 0x2200
 8006e08:	6193      	str	r3, [r2, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8006e0a:	4b0d      	ldr	r3, [pc, #52]	@ (8006e40 <HAL_RTC_SetAlarm_IT+0x214>)
 8006e0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006e10:	4a0b      	ldr	r2, [pc, #44]	@ (8006e40 <HAL_RTC_SetAlarm_IT+0x214>)
 8006e12:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006e16:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006e1a:	4b08      	ldr	r3, [pc, #32]	@ (8006e3c <HAL_RTC_SetAlarm_IT+0x210>)
 8006e1c:	22ff      	movs	r2, #255	@ 0xff
 8006e1e:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	2201      	movs	r2, #1
 8006e24:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	2200      	movs	r2, #0
 8006e2c:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8006e30:	2300      	movs	r3, #0
}
 8006e32:	4618      	mov	r0, r3
 8006e34:	371c      	adds	r7, #28
 8006e36:	46bd      	mov	sp, r7
 8006e38:	bd90      	pop	{r4, r7, pc}
 8006e3a:	bf00      	nop
 8006e3c:	40002800 	.word	0x40002800
 8006e40:	58000800 	.word	0x58000800

08006e44 <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 8006e44:	b480      	push	{r7}
 8006e46:	b083      	sub	sp, #12
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
 8006e4c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8006e54:	2b01      	cmp	r3, #1
 8006e56:	d101      	bne.n	8006e5c <HAL_RTC_DeactivateAlarm+0x18>
 8006e58:	2302      	movs	r3, #2
 8006e5a:	e048      	b.n	8006eee <HAL_RTC_DeactivateAlarm+0xaa>
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	2201      	movs	r2, #1
 8006e60:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	2202      	movs	r2, #2
 8006e68:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006e6c:	4b22      	ldr	r3, [pc, #136]	@ (8006ef8 <HAL_RTC_DeactivateAlarm+0xb4>)
 8006e6e:	22ca      	movs	r2, #202	@ 0xca
 8006e70:	625a      	str	r2, [r3, #36]	@ 0x24
 8006e72:	4b21      	ldr	r3, [pc, #132]	@ (8006ef8 <HAL_RTC_DeactivateAlarm+0xb4>)
 8006e74:	2253      	movs	r2, #83	@ 0x53
 8006e76:	625a      	str	r2, [r3, #36]	@ 0x24

  if (Alarm == RTC_ALARM_A)
 8006e78:	683b      	ldr	r3, [r7, #0]
 8006e7a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006e7e:	d115      	bne.n	8006eac <HAL_RTC_DeactivateAlarm+0x68>
  {
    /* AlarmA, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8006e80:	4b1d      	ldr	r3, [pc, #116]	@ (8006ef8 <HAL_RTC_DeactivateAlarm+0xb4>)
 8006e82:	699b      	ldr	r3, [r3, #24]
 8006e84:	4a1c      	ldr	r2, [pc, #112]	@ (8006ef8 <HAL_RTC_DeactivateAlarm+0xb4>)
 8006e86:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8006e8a:	6193      	str	r3, [r2, #24]

    /* AlarmA, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMASSR, RTC_ALRMASSR_SSCLR);
 8006e8c:	4b1a      	ldr	r3, [pc, #104]	@ (8006ef8 <HAL_RTC_DeactivateAlarm+0xb4>)
 8006e8e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e90:	4a19      	ldr	r2, [pc, #100]	@ (8006ef8 <HAL_RTC_DeactivateAlarm+0xb4>)
 8006e92:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006e96:	6453      	str	r3, [r2, #68]	@ 0x44

    /* Store in the handle the Alarm A disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e9c:	f023 0201 	bic.w	r2, r3, #1
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Clear AlarmA flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8006ea4:	4b14      	ldr	r3, [pc, #80]	@ (8006ef8 <HAL_RTC_DeactivateAlarm+0xb4>)
 8006ea6:	2201      	movs	r2, #1
 8006ea8:	65da      	str	r2, [r3, #92]	@ 0x5c
 8006eaa:	e014      	b.n	8006ed6 <HAL_RTC_DeactivateAlarm+0x92>
  }
  else
  {
    /* AlarmB, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8006eac:	4b12      	ldr	r3, [pc, #72]	@ (8006ef8 <HAL_RTC_DeactivateAlarm+0xb4>)
 8006eae:	699b      	ldr	r3, [r3, #24]
 8006eb0:	4a11      	ldr	r2, [pc, #68]	@ (8006ef8 <HAL_RTC_DeactivateAlarm+0xb4>)
 8006eb2:	f423 5308 	bic.w	r3, r3, #8704	@ 0x2200
 8006eb6:	6193      	str	r3, [r2, #24]

    /* AlarmB, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMBSSR, RTC_ALRMBSSR_SSCLR);
 8006eb8:	4b0f      	ldr	r3, [pc, #60]	@ (8006ef8 <HAL_RTC_DeactivateAlarm+0xb4>)
 8006eba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006ebc:	4a0e      	ldr	r2, [pc, #56]	@ (8006ef8 <HAL_RTC_DeactivateAlarm+0xb4>)
 8006ebe:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006ec2:	64d3      	str	r3, [r2, #76]	@ 0x4c

    /* Store in the handle the Alarm B disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ec8:	f023 0202 	bic.w	r2, r3, #2
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Clear AlarmB flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8006ed0:	4b09      	ldr	r3, [pc, #36]	@ (8006ef8 <HAL_RTC_DeactivateAlarm+0xb4>)
 8006ed2:	2202      	movs	r2, #2
 8006ed4:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006ed6:	4b08      	ldr	r3, [pc, #32]	@ (8006ef8 <HAL_RTC_DeactivateAlarm+0xb4>)
 8006ed8:	22ff      	movs	r2, #255	@ 0xff
 8006eda:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	2201      	movs	r2, #1
 8006ee0:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	2200      	movs	r2, #0
 8006ee8:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8006eec:	2300      	movs	r3, #0
}
 8006eee:	4618      	mov	r0, r3
 8006ef0:	370c      	adds	r7, #12
 8006ef2:	46bd      	mov	sp, r7
 8006ef4:	bc80      	pop	{r7}
 8006ef6:	4770      	bx	lr
 8006ef8:	40002800 	.word	0x40002800

08006efc <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8006efc:	b580      	push	{r7, lr}
 8006efe:	b084      	sub	sp, #16
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 8006f04:	4b0f      	ldr	r3, [pc, #60]	@ (8006f44 <HAL_RTC_WaitForSynchro+0x48>)
 8006f06:	68db      	ldr	r3, [r3, #12]
 8006f08:	4a0e      	ldr	r2, [pc, #56]	@ (8006f44 <HAL_RTC_WaitForSynchro+0x48>)
 8006f0a:	f023 0320 	bic.w	r3, r3, #32
 8006f0e:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8006f10:	f7fa fe80 	bl	8001c14 <HAL_GetTick>
 8006f14:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8006f16:	e009      	b.n	8006f2c <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006f18:	f7fa fe7c 	bl	8001c14 <HAL_GetTick>
 8006f1c:	4602      	mov	r2, r0
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	1ad3      	subs	r3, r2, r3
 8006f22:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006f26:	d901      	bls.n	8006f2c <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8006f28:	2303      	movs	r3, #3
 8006f2a:	e006      	b.n	8006f3a <HAL_RTC_WaitForSynchro+0x3e>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8006f2c:	4b05      	ldr	r3, [pc, #20]	@ (8006f44 <HAL_RTC_WaitForSynchro+0x48>)
 8006f2e:	68db      	ldr	r3, [r3, #12]
 8006f30:	f003 0320 	and.w	r3, r3, #32
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d0ef      	beq.n	8006f18 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8006f38:	2300      	movs	r3, #0
}
 8006f3a:	4618      	mov	r0, r3
 8006f3c:	3710      	adds	r7, #16
 8006f3e:	46bd      	mov	sp, r7
 8006f40:	bd80      	pop	{r7, pc}
 8006f42:	bf00      	nop
 8006f44:	40002800 	.word	0x40002800

08006f48 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006f48:	b580      	push	{r7, lr}
 8006f4a:	b084      	sub	sp, #16
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006f50:	2300      	movs	r3, #0
 8006f52:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8006f54:	4b15      	ldr	r3, [pc, #84]	@ (8006fac <RTC_EnterInitMode+0x64>)
 8006f56:	68db      	ldr	r3, [r3, #12]
 8006f58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d120      	bne.n	8006fa2 <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8006f60:	4b12      	ldr	r3, [pc, #72]	@ (8006fac <RTC_EnterInitMode+0x64>)
 8006f62:	68db      	ldr	r3, [r3, #12]
 8006f64:	4a11      	ldr	r2, [pc, #68]	@ (8006fac <RTC_EnterInitMode+0x64>)
 8006f66:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006f6a:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 8006f6c:	f7fa fe52 	bl	8001c14 <HAL_GetTick>
 8006f70:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8006f72:	e00d      	b.n	8006f90 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8006f74:	f7fa fe4e 	bl	8001c14 <HAL_GetTick>
 8006f78:	4602      	mov	r2, r0
 8006f7a:	68bb      	ldr	r3, [r7, #8]
 8006f7c:	1ad3      	subs	r3, r2, r3
 8006f7e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006f82:	d905      	bls.n	8006f90 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8006f84:	2303      	movs	r3, #3
 8006f86:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	2203      	movs	r2, #3
 8006f8c:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8006f90:	4b06      	ldr	r3, [pc, #24]	@ (8006fac <RTC_EnterInitMode+0x64>)
 8006f92:	68db      	ldr	r3, [r3, #12]
 8006f94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d102      	bne.n	8006fa2 <RTC_EnterInitMode+0x5a>
 8006f9c:	7bfb      	ldrb	r3, [r7, #15]
 8006f9e:	2b03      	cmp	r3, #3
 8006fa0:	d1e8      	bne.n	8006f74 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 8006fa2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fa4:	4618      	mov	r0, r3
 8006fa6:	3710      	adds	r7, #16
 8006fa8:	46bd      	mov	sp, r7
 8006faa:	bd80      	pop	{r7, pc}
 8006fac:	40002800 	.word	0x40002800

08006fb0 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8006fb0:	b580      	push	{r7, lr}
 8006fb2:	b084      	sub	sp, #16
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006fb8:	2300      	movs	r3, #0
 8006fba:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8006fbc:	4b1a      	ldr	r3, [pc, #104]	@ (8007028 <RTC_ExitInitMode+0x78>)
 8006fbe:	68db      	ldr	r3, [r3, #12]
 8006fc0:	4a19      	ldr	r2, [pc, #100]	@ (8007028 <RTC_ExitInitMode+0x78>)
 8006fc2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006fc6:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8006fc8:	4b17      	ldr	r3, [pc, #92]	@ (8007028 <RTC_ExitInitMode+0x78>)
 8006fca:	699b      	ldr	r3, [r3, #24]
 8006fcc:	f003 0320 	and.w	r3, r3, #32
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d10c      	bne.n	8006fee <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006fd4:	6878      	ldr	r0, [r7, #4]
 8006fd6:	f7ff ff91 	bl	8006efc <HAL_RTC_WaitForSynchro>
 8006fda:	4603      	mov	r3, r0
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d01e      	beq.n	800701e <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	2203      	movs	r2, #3
 8006fe4:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 8006fe8:	2303      	movs	r3, #3
 8006fea:	73fb      	strb	r3, [r7, #15]
 8006fec:	e017      	b.n	800701e <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8006fee:	4b0e      	ldr	r3, [pc, #56]	@ (8007028 <RTC_ExitInitMode+0x78>)
 8006ff0:	699b      	ldr	r3, [r3, #24]
 8006ff2:	4a0d      	ldr	r2, [pc, #52]	@ (8007028 <RTC_ExitInitMode+0x78>)
 8006ff4:	f023 0320 	bic.w	r3, r3, #32
 8006ff8:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006ffa:	6878      	ldr	r0, [r7, #4]
 8006ffc:	f7ff ff7e 	bl	8006efc <HAL_RTC_WaitForSynchro>
 8007000:	4603      	mov	r3, r0
 8007002:	2b00      	cmp	r3, #0
 8007004:	d005      	beq.n	8007012 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	2203      	movs	r2, #3
 800700a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 800700e:	2303      	movs	r3, #3
 8007010:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8007012:	4b05      	ldr	r3, [pc, #20]	@ (8007028 <RTC_ExitInitMode+0x78>)
 8007014:	699b      	ldr	r3, [r3, #24]
 8007016:	4a04      	ldr	r2, [pc, #16]	@ (8007028 <RTC_ExitInitMode+0x78>)
 8007018:	f043 0320 	orr.w	r3, r3, #32
 800701c:	6193      	str	r3, [r2, #24]
  }

  return status;
 800701e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007020:	4618      	mov	r0, r3
 8007022:	3710      	adds	r7, #16
 8007024:	46bd      	mov	sp, r7
 8007026:	bd80      	pop	{r7, pc}
 8007028:	40002800 	.word	0x40002800

0800702c <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800702c:	b480      	push	{r7}
 800702e:	b085      	sub	sp, #20
 8007030:	af00      	add	r7, sp, #0
 8007032:	4603      	mov	r3, r0
 8007034:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8007036:	2300      	movs	r3, #0
 8007038:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 800703a:	79fb      	ldrb	r3, [r7, #7]
 800703c:	72fb      	strb	r3, [r7, #11]

  while (tmp_Value >= 10U)
 800703e:	e005      	b.n	800704c <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	3301      	adds	r3, #1
 8007044:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 8007046:	7afb      	ldrb	r3, [r7, #11]
 8007048:	3b0a      	subs	r3, #10
 800704a:	72fb      	strb	r3, [r7, #11]
  while (tmp_Value >= 10U)
 800704c:	7afb      	ldrb	r3, [r7, #11]
 800704e:	2b09      	cmp	r3, #9
 8007050:	d8f6      	bhi.n	8007040 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	b2db      	uxtb	r3, r3
 8007056:	011b      	lsls	r3, r3, #4
 8007058:	b2da      	uxtb	r2, r3
 800705a:	7afb      	ldrb	r3, [r7, #11]
 800705c:	4313      	orrs	r3, r2
 800705e:	b2db      	uxtb	r3, r3
}
 8007060:	4618      	mov	r0, r3
 8007062:	3714      	adds	r7, #20
 8007064:	46bd      	mov	sp, r7
 8007066:	bc80      	pop	{r7}
 8007068:	4770      	bx	lr
	...

0800706c <HAL_RTCEx_EnableBypassShadow>:
  *         directly from the Calendar counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
 800706c:	b480      	push	{r7}
 800706e:	b083      	sub	sp, #12
 8007070:	af00      	add	r7, sp, #0
 8007072:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800707a:	2b01      	cmp	r3, #1
 800707c:	d101      	bne.n	8007082 <HAL_RTCEx_EnableBypassShadow+0x16>
 800707e:	2302      	movs	r3, #2
 8007080:	e01f      	b.n	80070c2 <HAL_RTCEx_EnableBypassShadow+0x56>
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	2201      	movs	r2, #1
 8007086:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	2202      	movs	r2, #2
 800708e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007092:	4b0e      	ldr	r3, [pc, #56]	@ (80070cc <HAL_RTCEx_EnableBypassShadow+0x60>)
 8007094:	22ca      	movs	r2, #202	@ 0xca
 8007096:	625a      	str	r2, [r3, #36]	@ 0x24
 8007098:	4b0c      	ldr	r3, [pc, #48]	@ (80070cc <HAL_RTCEx_EnableBypassShadow+0x60>)
 800709a:	2253      	movs	r2, #83	@ 0x53
 800709c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the BYPSHAD bit */
  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800709e:	4b0b      	ldr	r3, [pc, #44]	@ (80070cc <HAL_RTCEx_EnableBypassShadow+0x60>)
 80070a0:	699b      	ldr	r3, [r3, #24]
 80070a2:	4a0a      	ldr	r2, [pc, #40]	@ (80070cc <HAL_RTCEx_EnableBypassShadow+0x60>)
 80070a4:	f043 0320 	orr.w	r3, r3, #32
 80070a8:	6193      	str	r3, [r2, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80070aa:	4b08      	ldr	r3, [pc, #32]	@ (80070cc <HAL_RTCEx_EnableBypassShadow+0x60>)
 80070ac:	22ff      	movs	r2, #255	@ 0xff
 80070ae:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	2201      	movs	r2, #1
 80070b4:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	2200      	movs	r2, #0
 80070bc:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 80070c0:	2300      	movs	r3, #0
}
 80070c2:	4618      	mov	r0, r3
 80070c4:	370c      	adds	r7, #12
 80070c6:	46bd      	mov	sp, r7
 80070c8:	bc80      	pop	{r7}
 80070ca:	4770      	bx	lr
 80070cc:	40002800 	.word	0x40002800

080070d0 <HAL_RTCEx_SetSSRU_IT>:
  * @brief  Set SSR Underflow detection with Interrupt.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetSSRU_IT(RTC_HandleTypeDef *hrtc)
{
 80070d0:	b480      	push	{r7}
 80070d2:	b083      	sub	sp, #12
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80070de:	2b01      	cmp	r3, #1
 80070e0:	d101      	bne.n	80070e6 <HAL_RTCEx_SetSSRU_IT+0x16>
 80070e2:	2302      	movs	r3, #2
 80070e4:	e027      	b.n	8007136 <HAL_RTCEx_SetSSRU_IT+0x66>
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	2201      	movs	r2, #1
 80070ea:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	2202      	movs	r2, #2
 80070f2:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80070f6:	4b12      	ldr	r3, [pc, #72]	@ (8007140 <HAL_RTCEx_SetSSRU_IT+0x70>)
 80070f8:	22ca      	movs	r2, #202	@ 0xca
 80070fa:	625a      	str	r2, [r3, #36]	@ 0x24
 80070fc:	4b10      	ldr	r3, [pc, #64]	@ (8007140 <HAL_RTCEx_SetSSRU_IT+0x70>)
 80070fe:	2253      	movs	r2, #83	@ 0x53
 8007100:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enable IT SSRU */
  __HAL_RTC_SSRU_ENABLE_IT(hrtc, RTC_IT_SSRU);
 8007102:	4b0f      	ldr	r3, [pc, #60]	@ (8007140 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8007104:	699b      	ldr	r3, [r3, #24]
 8007106:	4a0e      	ldr	r2, [pc, #56]	@ (8007140 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8007108:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800710c:	6193      	str	r3, [r2, #24]

  /* RTC SSRU Interrupt Configuration: EXTI configuration */
  __HAL_RTC_SSRU_EXTI_ENABLE_IT();
 800710e:	4b0d      	ldr	r3, [pc, #52]	@ (8007144 <HAL_RTCEx_SetSSRU_IT+0x74>)
 8007110:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007114:	4a0b      	ldr	r2, [pc, #44]	@ (8007144 <HAL_RTCEx_SetSSRU_IT+0x74>)
 8007116:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800711a:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800711e:	4b08      	ldr	r3, [pc, #32]	@ (8007140 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8007120:	22ff      	movs	r2, #255	@ 0xff
 8007122:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	2201      	movs	r2, #1
 8007128:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	2200      	movs	r2, #0
 8007130:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8007134:	2300      	movs	r3, #0
}
 8007136:	4618      	mov	r0, r3
 8007138:	370c      	adds	r7, #12
 800713a:	46bd      	mov	sp, r7
 800713c:	bc80      	pop	{r7}
 800713e:	4770      	bx	lr
 8007140:	40002800 	.word	0x40002800
 8007144:	58000800 	.word	0x58000800

08007148 <HAL_RTCEx_SSRUIRQHandler>:
  * @brief  Handle SSR underflow interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_SSRUIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8007148:	b580      	push	{r7, lr}
 800714a:	b082      	sub	sp, #8
 800714c:	af00      	add	r7, sp, #0
 800714e:	6078      	str	r0, [r7, #4]
  if ((RTC->MISR & RTC_MISR_SSRUMF) != 0u)
 8007150:	4b09      	ldr	r3, [pc, #36]	@ (8007178 <HAL_RTCEx_SSRUIRQHandler+0x30>)
 8007152:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007154:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007158:	2b00      	cmp	r3, #0
 800715a:	d005      	beq.n	8007168 <HAL_RTCEx_SSRUIRQHandler+0x20>
  {
    /* Immediately clear flags */
    RTC->SCR = RTC_SCR_CSSRUF;
 800715c:	4b06      	ldr	r3, [pc, #24]	@ (8007178 <HAL_RTCEx_SSRUIRQHandler+0x30>)
 800715e:	2240      	movs	r2, #64	@ 0x40
 8007160:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* SSRU callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call SSRUEvent registered Callback */
    hrtc->SSRUEventCallback(hrtc);
#else
    HAL_RTCEx_SSRUEventCallback(hrtc);
 8007162:	6878      	ldr	r0, [r7, #4]
 8007164:	f7fa ff37 	bl	8001fd6 <HAL_RTCEx_SSRUEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	2201      	movs	r2, #1
 800716c:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
}
 8007170:	bf00      	nop
 8007172:	3708      	adds	r7, #8
 8007174:	46bd      	mov	sp, r7
 8007176:	bd80      	pop	{r7, pc}
 8007178:	40002800 	.word	0x40002800

0800717c <HAL_RTCEx_BKUPWrite>:
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @param  Data Data to be written in the specified Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 800717c:	b480      	push	{r7}
 800717e:	b087      	sub	sp, #28
 8007180:	af00      	add	r7, sp, #0
 8007182:	60f8      	str	r0, [r7, #12]
 8007184:	60b9      	str	r1, [r7, #8]
 8007186:	607a      	str	r2, [r7, #4]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
 8007188:	4b07      	ldr	r3, [pc, #28]	@ (80071a8 <HAL_RTCEx_BKUPWrite+0x2c>)
 800718a:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 800718c:	68bb      	ldr	r3, [r7, #8]
 800718e:	009b      	lsls	r3, r3, #2
 8007190:	697a      	ldr	r2, [r7, #20]
 8007192:	4413      	add	r3, r2
 8007194:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8007196:	697b      	ldr	r3, [r7, #20]
 8007198:	687a      	ldr	r2, [r7, #4]
 800719a:	601a      	str	r2, [r3, #0]
}
 800719c:	bf00      	nop
 800719e:	371c      	adds	r7, #28
 80071a0:	46bd      	mov	sp, r7
 80071a2:	bc80      	pop	{r7}
 80071a4:	4770      	bx	lr
 80071a6:	bf00      	nop
 80071a8:	4000b100 	.word	0x4000b100

080071ac <HAL_RTCEx_BKUPRead>:
  * @param  BackupRegister RTC Backup data Register number.
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 80071ac:	b480      	push	{r7}
 80071ae:	b085      	sub	sp, #20
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	6078      	str	r0, [r7, #4]
 80071b4:	6039      	str	r1, [r7, #0]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
 80071b6:	4b07      	ldr	r3, [pc, #28]	@ (80071d4 <HAL_RTCEx_BKUPRead+0x28>)
 80071b8:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 80071ba:	683b      	ldr	r3, [r7, #0]
 80071bc:	009b      	lsls	r3, r3, #2
 80071be:	68fa      	ldr	r2, [r7, #12]
 80071c0:	4413      	add	r3, r2
 80071c2:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	681b      	ldr	r3, [r3, #0]
}
 80071c8:	4618      	mov	r0, r3
 80071ca:	3714      	adds	r7, #20
 80071cc:	46bd      	mov	sp, r7
 80071ce:	bc80      	pop	{r7}
 80071d0:	4770      	bx	lr
 80071d2:	bf00      	nop
 80071d4:	4000b100 	.word	0x4000b100

080071d8 <LL_PWR_SetRadioBusyTrigger>:
{
 80071d8:	b480      	push	{r7}
 80071da:	b083      	sub	sp, #12
 80071dc:	af00      	add	r7, sp, #0
 80071de:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 80071e0:	4b06      	ldr	r3, [pc, #24]	@ (80071fc <LL_PWR_SetRadioBusyTrigger+0x24>)
 80071e2:	689b      	ldr	r3, [r3, #8]
 80071e4:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80071e8:	4904      	ldr	r1, [pc, #16]	@ (80071fc <LL_PWR_SetRadioBusyTrigger+0x24>)
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	4313      	orrs	r3, r2
 80071ee:	608b      	str	r3, [r1, #8]
}
 80071f0:	bf00      	nop
 80071f2:	370c      	adds	r7, #12
 80071f4:	46bd      	mov	sp, r7
 80071f6:	bc80      	pop	{r7}
 80071f8:	4770      	bx	lr
 80071fa:	bf00      	nop
 80071fc:	58000400 	.word	0x58000400

08007200 <LL_PWR_UnselectSUBGHZSPI_NSS>:
{
 8007200:	b480      	push	{r7}
 8007202:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8007204:	4b05      	ldr	r3, [pc, #20]	@ (800721c <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8007206:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800720a:	4a04      	ldr	r2, [pc, #16]	@ (800721c <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 800720c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007210:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8007214:	bf00      	nop
 8007216:	46bd      	mov	sp, r7
 8007218:	bc80      	pop	{r7}
 800721a:	4770      	bx	lr
 800721c:	58000400 	.word	0x58000400

08007220 <LL_PWR_SelectSUBGHZSPI_NSS>:
{
 8007220:	b480      	push	{r7}
 8007222:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8007224:	4b05      	ldr	r3, [pc, #20]	@ (800723c <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8007226:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800722a:	4a04      	ldr	r2, [pc, #16]	@ (800723c <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 800722c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007230:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8007234:	bf00      	nop
 8007236:	46bd      	mov	sp, r7
 8007238:	bc80      	pop	{r7}
 800723a:	4770      	bx	lr
 800723c:	58000400 	.word	0x58000400

08007240 <LL_PWR_ClearFlag_RFBUSY>:
{
 8007240:	b480      	push	{r7}
 8007242:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 8007244:	4b03      	ldr	r3, [pc, #12]	@ (8007254 <LL_PWR_ClearFlag_RFBUSY+0x14>)
 8007246:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800724a:	619a      	str	r2, [r3, #24]
}
 800724c:	bf00      	nop
 800724e:	46bd      	mov	sp, r7
 8007250:	bc80      	pop	{r7}
 8007252:	4770      	bx	lr
 8007254:	58000400 	.word	0x58000400

08007258 <LL_PWR_IsActiveFlag_RFBUSYS>:
{
 8007258:	b480      	push	{r7}
 800725a:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 800725c:	4b06      	ldr	r3, [pc, #24]	@ (8007278 <LL_PWR_IsActiveFlag_RFBUSYS+0x20>)
 800725e:	695b      	ldr	r3, [r3, #20]
 8007260:	f003 0302 	and.w	r3, r3, #2
 8007264:	2b02      	cmp	r3, #2
 8007266:	d101      	bne.n	800726c <LL_PWR_IsActiveFlag_RFBUSYS+0x14>
 8007268:	2301      	movs	r3, #1
 800726a:	e000      	b.n	800726e <LL_PWR_IsActiveFlag_RFBUSYS+0x16>
 800726c:	2300      	movs	r3, #0
}
 800726e:	4618      	mov	r0, r3
 8007270:	46bd      	mov	sp, r7
 8007272:	bc80      	pop	{r7}
 8007274:	4770      	bx	lr
 8007276:	bf00      	nop
 8007278:	58000400 	.word	0x58000400

0800727c <LL_PWR_IsActiveFlag_RFBUSYMS>:
{
 800727c:	b480      	push	{r7}
 800727e:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 8007280:	4b06      	ldr	r3, [pc, #24]	@ (800729c <LL_PWR_IsActiveFlag_RFBUSYMS+0x20>)
 8007282:	695b      	ldr	r3, [r3, #20]
 8007284:	f003 0304 	and.w	r3, r3, #4
 8007288:	2b04      	cmp	r3, #4
 800728a:	d101      	bne.n	8007290 <LL_PWR_IsActiveFlag_RFBUSYMS+0x14>
 800728c:	2301      	movs	r3, #1
 800728e:	e000      	b.n	8007292 <LL_PWR_IsActiveFlag_RFBUSYMS+0x16>
 8007290:	2300      	movs	r3, #0
}
 8007292:	4618      	mov	r0, r3
 8007294:	46bd      	mov	sp, r7
 8007296:	bc80      	pop	{r7}
 8007298:	4770      	bx	lr
 800729a:	bf00      	nop
 800729c:	58000400 	.word	0x58000400

080072a0 <LL_RCC_RF_DisableReset>:
{
 80072a0:	b480      	push	{r7}
 80072a2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 80072a4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80072a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80072ac:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80072b0:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80072b4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 80072b8:	bf00      	nop
 80072ba:	46bd      	mov	sp, r7
 80072bc:	bc80      	pop	{r7}
 80072be:	4770      	bx	lr

080072c0 <LL_RCC_IsRFUnderReset>:
{
 80072c0:	b480      	push	{r7}
 80072c2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 80072c4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80072c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80072cc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80072d0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80072d4:	d101      	bne.n	80072da <LL_RCC_IsRFUnderReset+0x1a>
 80072d6:	2301      	movs	r3, #1
 80072d8:	e000      	b.n	80072dc <LL_RCC_IsRFUnderReset+0x1c>
 80072da:	2300      	movs	r3, #0
}
 80072dc:	4618      	mov	r0, r3
 80072de:	46bd      	mov	sp, r7
 80072e0:	bc80      	pop	{r7}
 80072e2:	4770      	bx	lr

080072e4 <LL_EXTI_EnableIT_32_63>:
{
 80072e4:	b480      	push	{r7}
 80072e6:	b083      	sub	sp, #12
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 80072ec:	4b06      	ldr	r3, [pc, #24]	@ (8007308 <LL_EXTI_EnableIT_32_63+0x24>)
 80072ee:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 80072f2:	4905      	ldr	r1, [pc, #20]	@ (8007308 <LL_EXTI_EnableIT_32_63+0x24>)
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	4313      	orrs	r3, r2
 80072f8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 80072fc:	bf00      	nop
 80072fe:	370c      	adds	r7, #12
 8007300:	46bd      	mov	sp, r7
 8007302:	bc80      	pop	{r7}
 8007304:	4770      	bx	lr
 8007306:	bf00      	nop
 8007308:	58000800 	.word	0x58000800

0800730c <HAL_SUBGHZ_Init>:
  *         set the state to HAL_SUBGHZ_STATE_RESET_RF_READY with __HAL_SUBGHZ_RESET_HANDLE_STATE_RF_READY
  *         to avoid the reset of Radio peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SUBGHZ_Init(SUBGHZ_HandleTypeDef *hsubghz)
{
 800730c:	b580      	push	{r7, lr}
 800730e:	b084      	sub	sp, #16
 8007310:	af00      	add	r7, sp, #0
 8007312:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  HAL_SUBGHZ_StateTypeDef subghz_state;

  /* Check the hsubghz handle allocation */
  if (hsubghz == NULL)
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	2b00      	cmp	r3, #0
 8007318:	d103      	bne.n	8007322 <HAL_SUBGHZ_Init+0x16>
  {
    status = HAL_ERROR;
 800731a:	2301      	movs	r3, #1
 800731c:	73fb      	strb	r3, [r7, #15]
    return status;
 800731e:	7bfb      	ldrb	r3, [r7, #15]
 8007320:	e052      	b.n	80073c8 <HAL_SUBGHZ_Init+0xbc>
  }
  else
  {
    status = HAL_OK;
 8007322:	2300      	movs	r3, #0
 8007324:	73fb      	strb	r3, [r7, #15]
  }

  assert_param(IS_SUBGHZSPI_BAUDRATE_PRESCALER(hsubghz->Init.BaudratePrescaler));

  subghz_state = hsubghz->State;
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	799b      	ldrb	r3, [r3, #6]
 800732a:	73bb      	strb	r3, [r7, #14]
  if ((subghz_state == HAL_SUBGHZ_STATE_RESET) ||
 800732c:	7bbb      	ldrb	r3, [r7, #14]
 800732e:	2b00      	cmp	r3, #0
 8007330:	d002      	beq.n	8007338 <HAL_SUBGHZ_Init+0x2c>
 8007332:	7bbb      	ldrb	r3, [r7, #14]
 8007334:	2b03      	cmp	r3, #3
 8007336:	d109      	bne.n	800734c <HAL_SUBGHZ_Init+0x40>
      (subghz_state == HAL_SUBGHZ_STATE_RESET_RF_READY))
  {
    /* Allocate lock resource and initialize it */
    hsubghz->Lock = HAL_UNLOCKED;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	2200      	movs	r2, #0
 800733c:	715a      	strb	r2, [r3, #5]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hsubghz->MspInitCallback(hsubghz);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SUBGHZ_MspInit(hsubghz);
 800733e:	6878      	ldr	r0, [r7, #4]
 8007340:	f7fa faca 	bl	80018d8 <HAL_SUBGHZ_MspInit>
#if defined(CORE_CM0PLUS)
    /* Enable EXTI 44 : Radio IRQ ITs for CPU2 */
    LL_C2_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
#else
    /* Enable EXTI 44 : Radio IRQ ITs for CPU1 */
    LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
 8007344:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8007348:	f7ff ffcc 	bl	80072e4 <LL_EXTI_EnableIT_32_63>
#endif /* CORE_CM0PLUS */
  }

  if (subghz_state == HAL_SUBGHZ_STATE_RESET)
 800734c:	7bbb      	ldrb	r3, [r7, #14]
 800734e:	2b00      	cmp	r3, #0
 8007350:	d126      	bne.n	80073a0 <HAL_SUBGHZ_Init+0x94>
  {
    /* Reinitialize Radio peripheral only if SUBGHZ is in full RESET state */
    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	2202      	movs	r2, #2
 8007356:	719a      	strb	r2, [r3, #6]

    /* De-asserts the reset signal of the Radio peripheral */
    LL_RCC_RF_DisableReset();
 8007358:	f7ff ffa2 	bl	80072a0 <LL_RCC_RF_DisableReset>

    /* Verify that Radio in reset status flag is set */
    count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800735c:	4b1c      	ldr	r3, [pc, #112]	@ (80073d0 <HAL_SUBGHZ_Init+0xc4>)
 800735e:	681a      	ldr	r2, [r3, #0]
 8007360:	4613      	mov	r3, r2
 8007362:	00db      	lsls	r3, r3, #3
 8007364:	1a9b      	subs	r3, r3, r2
 8007366:	009b      	lsls	r3, r3, #2
 8007368:	0cdb      	lsrs	r3, r3, #19
 800736a:	2264      	movs	r2, #100	@ 0x64
 800736c:	fb02 f303 	mul.w	r3, r2, r3
 8007370:	60bb      	str	r3, [r7, #8]

    do
    {
      if (count == 0U)
 8007372:	68bb      	ldr	r3, [r7, #8]
 8007374:	2b00      	cmp	r3, #0
 8007376:	d105      	bne.n	8007384 <HAL_SUBGHZ_Init+0x78>
      {
        status  = HAL_ERROR;
 8007378:	2301      	movs	r3, #1
 800737a:	73fb      	strb	r3, [r7, #15]
        hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	2201      	movs	r2, #1
 8007380:	609a      	str	r2, [r3, #8]
        break;
 8007382:	e007      	b.n	8007394 <HAL_SUBGHZ_Init+0x88>
      }
      count--;
 8007384:	68bb      	ldr	r3, [r7, #8]
 8007386:	3b01      	subs	r3, #1
 8007388:	60bb      	str	r3, [r7, #8]
    } while (LL_RCC_IsRFUnderReset() != 0UL);
 800738a:	f7ff ff99 	bl	80072c0 <LL_RCC_IsRFUnderReset>
 800738e:	4603      	mov	r3, r0
 8007390:	2b00      	cmp	r3, #0
 8007392:	d1ee      	bne.n	8007372 <HAL_SUBGHZ_Init+0x66>

    /* Asserts the reset signal of the Radio peripheral */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8007394:	f7ff ff34 	bl	8007200 <LL_PWR_UnselectSUBGHZSPI_NSS>
#if defined(CORE_CM0PLUS)
    /* Enable wakeup signal of the Radio peripheral */
    LL_C2_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
#else
    /* Enable wakeup signal of the Radio peripheral */
    LL_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
 8007398:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800739c:	f7ff ff1c 	bl	80071d8 <LL_PWR_SetRadioBusyTrigger>
#endif /* CORE_CM0PLUS */
  }

  /* Clear Pending Flag */
  LL_PWR_ClearFlag_RFBUSY();
 80073a0:	f7ff ff4e 	bl	8007240 <LL_PWR_ClearFlag_RFBUSY>

  if (status == HAL_OK)
 80073a4:	7bfb      	ldrb	r3, [r7, #15]
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d10a      	bne.n	80073c0 <HAL_SUBGHZ_Init+0xb4>
  {
    /* Initialize SUBGHZSPI Peripheral */
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	4618      	mov	r0, r3
 80073b0:	f000 fab0 	bl	8007914 <SUBGHZSPI_Init>

    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	2201      	movs	r2, #1
 80073b8:	711a      	strb	r2, [r3, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	2200      	movs	r2, #0
 80073be:	609a      	str	r2, [r3, #8]
  }

  hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	2201      	movs	r2, #1
 80073c4:	719a      	strb	r2, [r3, #6]

  return status;
 80073c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80073c8:	4618      	mov	r0, r3
 80073ca:	3710      	adds	r7, #16
 80073cc:	46bd      	mov	sp, r7
 80073ce:	bd80      	pop	{r7, pc}
 80073d0:	20000000 	.word	0x20000000

080073d4 <HAL_SUBGHZ_WriteRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                            uint16_t Address,
                                            uint8_t *pBuffer,
                                            uint16_t Size)
{
 80073d4:	b580      	push	{r7, lr}
 80073d6:	b086      	sub	sp, #24
 80073d8:	af00      	add	r7, sp, #0
 80073da:	60f8      	str	r0, [r7, #12]
 80073dc:	607a      	str	r2, [r7, #4]
 80073de:	461a      	mov	r2, r3
 80073e0:	460b      	mov	r3, r1
 80073e2:	817b      	strh	r3, [r7, #10]
 80073e4:	4613      	mov	r3, r2
 80073e6:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	799b      	ldrb	r3, [r3, #6]
 80073ec:	b2db      	uxtb	r3, r3
 80073ee:	2b01      	cmp	r3, #1
 80073f0:	d14a      	bne.n	8007488 <HAL_SUBGHZ_WriteRegisters+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	795b      	ldrb	r3, [r3, #5]
 80073f6:	2b01      	cmp	r3, #1
 80073f8:	d101      	bne.n	80073fe <HAL_SUBGHZ_WriteRegisters+0x2a>
 80073fa:	2302      	movs	r3, #2
 80073fc:	e045      	b.n	800748a <HAL_SUBGHZ_WriteRegisters+0xb6>
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	2201      	movs	r2, #1
 8007402:	715a      	strb	r2, [r3, #5]

    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	2202      	movs	r2, #2
 8007408:	719a      	strb	r2, [r3, #6]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800740a:	68f8      	ldr	r0, [r7, #12]
 800740c:	f000 fb50 	bl	8007ab0 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8007410:	f7ff ff06 	bl	8007220 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 8007414:	210d      	movs	r1, #13
 8007416:	68f8      	ldr	r0, [r7, #12]
 8007418:	f000 fa9c 	bl	8007954 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 800741c:	897b      	ldrh	r3, [r7, #10]
 800741e:	0a1b      	lsrs	r3, r3, #8
 8007420:	b29b      	uxth	r3, r3
 8007422:	b2db      	uxtb	r3, r3
 8007424:	4619      	mov	r1, r3
 8007426:	68f8      	ldr	r0, [r7, #12]
 8007428:	f000 fa94 	bl	8007954 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 800742c:	897b      	ldrh	r3, [r7, #10]
 800742e:	b2db      	uxtb	r3, r3
 8007430:	4619      	mov	r1, r3
 8007432:	68f8      	ldr	r0, [r7, #12]
 8007434:	f000 fa8e 	bl	8007954 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8007438:	2300      	movs	r3, #0
 800743a:	82bb      	strh	r3, [r7, #20]
 800743c:	e00a      	b.n	8007454 <HAL_SUBGHZ_WriteRegisters+0x80>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 800743e:	8abb      	ldrh	r3, [r7, #20]
 8007440:	687a      	ldr	r2, [r7, #4]
 8007442:	4413      	add	r3, r2
 8007444:	781b      	ldrb	r3, [r3, #0]
 8007446:	4619      	mov	r1, r3
 8007448:	68f8      	ldr	r0, [r7, #12]
 800744a:	f000 fa83 	bl	8007954 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 800744e:	8abb      	ldrh	r3, [r7, #20]
 8007450:	3301      	adds	r3, #1
 8007452:	82bb      	strh	r3, [r7, #20]
 8007454:	8aba      	ldrh	r2, [r7, #20]
 8007456:	893b      	ldrh	r3, [r7, #8]
 8007458:	429a      	cmp	r2, r3
 800745a:	d3f0      	bcc.n	800743e <HAL_SUBGHZ_WriteRegisters+0x6a>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800745c:	f7ff fed0 	bl	8007200 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8007460:	68f8      	ldr	r0, [r7, #12]
 8007462:	f000 fb49 	bl	8007af8 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	689b      	ldr	r3, [r3, #8]
 800746a:	2b00      	cmp	r3, #0
 800746c:	d002      	beq.n	8007474 <HAL_SUBGHZ_WriteRegisters+0xa0>
    {
      status = HAL_ERROR;
 800746e:	2301      	movs	r3, #1
 8007470:	75fb      	strb	r3, [r7, #23]
 8007472:	e001      	b.n	8007478 <HAL_SUBGHZ_WriteRegisters+0xa4>
    }
    else
    {
      status = HAL_OK;
 8007474:	2300      	movs	r3, #0
 8007476:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	2201      	movs	r2, #1
 800747c:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	2200      	movs	r2, #0
 8007482:	715a      	strb	r2, [r3, #5]

    return status;
 8007484:	7dfb      	ldrb	r3, [r7, #23]
 8007486:	e000      	b.n	800748a <HAL_SUBGHZ_WriteRegisters+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8007488:	2302      	movs	r3, #2
  }
}
 800748a:	4618      	mov	r0, r3
 800748c:	3718      	adds	r7, #24
 800748e:	46bd      	mov	sp, r7
 8007490:	bd80      	pop	{r7, pc}

08007492 <HAL_SUBGHZ_ReadRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                           uint16_t Address,
                                           uint8_t *pBuffer,
                                           uint16_t Size)
{
 8007492:	b580      	push	{r7, lr}
 8007494:	b088      	sub	sp, #32
 8007496:	af00      	add	r7, sp, #0
 8007498:	60f8      	str	r0, [r7, #12]
 800749a:	607a      	str	r2, [r7, #4]
 800749c:	461a      	mov	r2, r3
 800749e:	460b      	mov	r3, r1
 80074a0:	817b      	strh	r3, [r7, #10]
 80074a2:	4613      	mov	r3, r2
 80074a4:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	799b      	ldrb	r3, [r3, #6]
 80074ae:	b2db      	uxtb	r3, r3
 80074b0:	2b01      	cmp	r3, #1
 80074b2:	d14a      	bne.n	800754a <HAL_SUBGHZ_ReadRegisters+0xb8>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	795b      	ldrb	r3, [r3, #5]
 80074b8:	2b01      	cmp	r3, #1
 80074ba:	d101      	bne.n	80074c0 <HAL_SUBGHZ_ReadRegisters+0x2e>
 80074bc:	2302      	movs	r3, #2
 80074be:	e045      	b.n	800754c <HAL_SUBGHZ_ReadRegisters+0xba>
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	2201      	movs	r2, #1
 80074c4:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80074c6:	68f8      	ldr	r0, [r7, #12]
 80074c8:	f000 faf2 	bl	8007ab0 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80074cc:	f7ff fea8 	bl	8007220 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 80074d0:	211d      	movs	r1, #29
 80074d2:	68f8      	ldr	r0, [r7, #12]
 80074d4:	f000 fa3e 	bl	8007954 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 80074d8:	897b      	ldrh	r3, [r7, #10]
 80074da:	0a1b      	lsrs	r3, r3, #8
 80074dc:	b29b      	uxth	r3, r3
 80074de:	b2db      	uxtb	r3, r3
 80074e0:	4619      	mov	r1, r3
 80074e2:	68f8      	ldr	r0, [r7, #12]
 80074e4:	f000 fa36 	bl	8007954 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 80074e8:	897b      	ldrh	r3, [r7, #10]
 80074ea:	b2db      	uxtb	r3, r3
 80074ec:	4619      	mov	r1, r3
 80074ee:	68f8      	ldr	r0, [r7, #12]
 80074f0:	f000 fa30 	bl	8007954 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 80074f4:	2100      	movs	r1, #0
 80074f6:	68f8      	ldr	r0, [r7, #12]
 80074f8:	f000 fa2c 	bl	8007954 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 80074fc:	2300      	movs	r3, #0
 80074fe:	82fb      	strh	r3, [r7, #22]
 8007500:	e009      	b.n	8007516 <HAL_SUBGHZ_ReadRegisters+0x84>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8007502:	69b9      	ldr	r1, [r7, #24]
 8007504:	68f8      	ldr	r0, [r7, #12]
 8007506:	f000 fa7b 	bl	8007a00 <SUBGHZSPI_Receive>
      pData++;
 800750a:	69bb      	ldr	r3, [r7, #24]
 800750c:	3301      	adds	r3, #1
 800750e:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8007510:	8afb      	ldrh	r3, [r7, #22]
 8007512:	3301      	adds	r3, #1
 8007514:	82fb      	strh	r3, [r7, #22]
 8007516:	8afa      	ldrh	r2, [r7, #22]
 8007518:	893b      	ldrh	r3, [r7, #8]
 800751a:	429a      	cmp	r2, r3
 800751c:	d3f1      	bcc.n	8007502 <HAL_SUBGHZ_ReadRegisters+0x70>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800751e:	f7ff fe6f 	bl	8007200 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8007522:	68f8      	ldr	r0, [r7, #12]
 8007524:	f000 fae8 	bl	8007af8 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	689b      	ldr	r3, [r3, #8]
 800752c:	2b00      	cmp	r3, #0
 800752e:	d002      	beq.n	8007536 <HAL_SUBGHZ_ReadRegisters+0xa4>
    {
      status = HAL_ERROR;
 8007530:	2301      	movs	r3, #1
 8007532:	77fb      	strb	r3, [r7, #31]
 8007534:	e001      	b.n	800753a <HAL_SUBGHZ_ReadRegisters+0xa8>
    }
    else
    {
      status = HAL_OK;
 8007536:	2300      	movs	r3, #0
 8007538:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	2201      	movs	r2, #1
 800753e:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	2200      	movs	r2, #0
 8007544:	715a      	strb	r2, [r3, #5]

    return status;
 8007546:	7ffb      	ldrb	r3, [r7, #31]
 8007548:	e000      	b.n	800754c <HAL_SUBGHZ_ReadRegisters+0xba>
  }
  else
  {
    return HAL_BUSY;
 800754a:	2302      	movs	r3, #2
  }
}
 800754c:	4618      	mov	r0, r3
 800754e:	3720      	adds	r7, #32
 8007550:	46bd      	mov	sp, r7
 8007552:	bd80      	pop	{r7, pc}

08007554 <HAL_SUBGHZ_ExecSetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecSetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioSetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8007554:	b580      	push	{r7, lr}
 8007556:	b086      	sub	sp, #24
 8007558:	af00      	add	r7, sp, #0
 800755a:	60f8      	str	r0, [r7, #12]
 800755c:	607a      	str	r2, [r7, #4]
 800755e:	461a      	mov	r2, r3
 8007560:	460b      	mov	r3, r1
 8007562:	72fb      	strb	r3, [r7, #11]
 8007564:	4613      	mov	r3, r2
 8007566:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  /* LORA Modulation not available on STM32WLx4xx devices */
  assert_param(IS_SUBGHZ_MODULATION_SUPPORTED(Command, pBuffer[0U]));

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	799b      	ldrb	r3, [r3, #6]
 800756c:	b2db      	uxtb	r3, r3
 800756e:	2b01      	cmp	r3, #1
 8007570:	d14a      	bne.n	8007608 <HAL_SUBGHZ_ExecSetCmd+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	795b      	ldrb	r3, [r3, #5]
 8007576:	2b01      	cmp	r3, #1
 8007578:	d101      	bne.n	800757e <HAL_SUBGHZ_ExecSetCmd+0x2a>
 800757a:	2302      	movs	r3, #2
 800757c:	e045      	b.n	800760a <HAL_SUBGHZ_ExecSetCmd+0xb6>
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	2201      	movs	r2, #1
 8007582:	715a      	strb	r2, [r3, #5]

    /* Need to wakeup Radio if already in Sleep at startup */
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8007584:	68f8      	ldr	r0, [r7, #12]
 8007586:	f000 fa93 	bl	8007ab0 <SUBGHZ_CheckDeviceReady>

    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 800758a:	7afb      	ldrb	r3, [r7, #11]
 800758c:	2b84      	cmp	r3, #132	@ 0x84
 800758e:	d002      	beq.n	8007596 <HAL_SUBGHZ_ExecSetCmd+0x42>
 8007590:	7afb      	ldrb	r3, [r7, #11]
 8007592:	2b94      	cmp	r3, #148	@ 0x94
 8007594:	d103      	bne.n	800759e <HAL_SUBGHZ_ExecSetCmd+0x4a>
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	2201      	movs	r2, #1
 800759a:	711a      	strb	r2, [r3, #4]
 800759c:	e002      	b.n	80075a4 <HAL_SUBGHZ_ExecSetCmd+0x50>
    }
    else
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	2200      	movs	r2, #0
 80075a2:	711a      	strb	r2, [r3, #4]
    }

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80075a4:	f7ff fe3c 	bl	8007220 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 80075a8:	7afb      	ldrb	r3, [r7, #11]
 80075aa:	4619      	mov	r1, r3
 80075ac:	68f8      	ldr	r0, [r7, #12]
 80075ae:	f000 f9d1 	bl	8007954 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 80075b2:	2300      	movs	r3, #0
 80075b4:	82bb      	strh	r3, [r7, #20]
 80075b6:	e00a      	b.n	80075ce <HAL_SUBGHZ_ExecSetCmd+0x7a>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 80075b8:	8abb      	ldrh	r3, [r7, #20]
 80075ba:	687a      	ldr	r2, [r7, #4]
 80075bc:	4413      	add	r3, r2
 80075be:	781b      	ldrb	r3, [r3, #0]
 80075c0:	4619      	mov	r1, r3
 80075c2:	68f8      	ldr	r0, [r7, #12]
 80075c4:	f000 f9c6 	bl	8007954 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 80075c8:	8abb      	ldrh	r3, [r7, #20]
 80075ca:	3301      	adds	r3, #1
 80075cc:	82bb      	strh	r3, [r7, #20]
 80075ce:	8aba      	ldrh	r2, [r7, #20]
 80075d0:	893b      	ldrh	r3, [r7, #8]
 80075d2:	429a      	cmp	r2, r3
 80075d4:	d3f0      	bcc.n	80075b8 <HAL_SUBGHZ_ExecSetCmd+0x64>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80075d6:	f7ff fe13 	bl	8007200 <LL_PWR_UnselectSUBGHZSPI_NSS>

    if (Command != RADIO_SET_SLEEP)
 80075da:	7afb      	ldrb	r3, [r7, #11]
 80075dc:	2b84      	cmp	r3, #132	@ 0x84
 80075de:	d002      	beq.n	80075e6 <HAL_SUBGHZ_ExecSetCmd+0x92>
    {
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 80075e0:	68f8      	ldr	r0, [r7, #12]
 80075e2:	f000 fa89 	bl	8007af8 <SUBGHZ_WaitOnBusy>
    }

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	689b      	ldr	r3, [r3, #8]
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d002      	beq.n	80075f4 <HAL_SUBGHZ_ExecSetCmd+0xa0>
    {
      status = HAL_ERROR;
 80075ee:	2301      	movs	r3, #1
 80075f0:	75fb      	strb	r3, [r7, #23]
 80075f2:	e001      	b.n	80075f8 <HAL_SUBGHZ_ExecSetCmd+0xa4>
    }
    else
    {
      status = HAL_OK;
 80075f4:	2300      	movs	r3, #0
 80075f6:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	2201      	movs	r2, #1
 80075fc:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	2200      	movs	r2, #0
 8007602:	715a      	strb	r2, [r3, #5]

    return status;
 8007604:	7dfb      	ldrb	r3, [r7, #23]
 8007606:	e000      	b.n	800760a <HAL_SUBGHZ_ExecSetCmd+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8007608:	2302      	movs	r3, #2
  }
}
 800760a:	4618      	mov	r0, r3
 800760c:	3718      	adds	r7, #24
 800760e:	46bd      	mov	sp, r7
 8007610:	bd80      	pop	{r7, pc}

08007612 <HAL_SUBGHZ_ExecGetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecGetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioGetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8007612:	b580      	push	{r7, lr}
 8007614:	b088      	sub	sp, #32
 8007616:	af00      	add	r7, sp, #0
 8007618:	60f8      	str	r0, [r7, #12]
 800761a:	607a      	str	r2, [r7, #4]
 800761c:	461a      	mov	r2, r3
 800761e:	460b      	mov	r3, r1
 8007620:	72fb      	strb	r3, [r7, #11]
 8007622:	4613      	mov	r3, r2
 8007624:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	799b      	ldrb	r3, [r3, #6]
 800762e:	b2db      	uxtb	r3, r3
 8007630:	2b01      	cmp	r3, #1
 8007632:	d13d      	bne.n	80076b0 <HAL_SUBGHZ_ExecGetCmd+0x9e>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	795b      	ldrb	r3, [r3, #5]
 8007638:	2b01      	cmp	r3, #1
 800763a:	d101      	bne.n	8007640 <HAL_SUBGHZ_ExecGetCmd+0x2e>
 800763c:	2302      	movs	r3, #2
 800763e:	e038      	b.n	80076b2 <HAL_SUBGHZ_ExecGetCmd+0xa0>
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	2201      	movs	r2, #1
 8007644:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8007646:	68f8      	ldr	r0, [r7, #12]
 8007648:	f000 fa32 	bl	8007ab0 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 800764c:	f7ff fde8 	bl	8007220 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8007650:	7afb      	ldrb	r3, [r7, #11]
 8007652:	4619      	mov	r1, r3
 8007654:	68f8      	ldr	r0, [r7, #12]
 8007656:	f000 f97d 	bl	8007954 <SUBGHZSPI_Transmit>

    /* Use to flush the Status (First byte) receive from SUBGHZ as not use */
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 800765a:	2100      	movs	r1, #0
 800765c:	68f8      	ldr	r0, [r7, #12]
 800765e:	f000 f979 	bl	8007954 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8007662:	2300      	movs	r3, #0
 8007664:	82fb      	strh	r3, [r7, #22]
 8007666:	e009      	b.n	800767c <HAL_SUBGHZ_ExecGetCmd+0x6a>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8007668:	69b9      	ldr	r1, [r7, #24]
 800766a:	68f8      	ldr	r0, [r7, #12]
 800766c:	f000 f9c8 	bl	8007a00 <SUBGHZSPI_Receive>
      pData++;
 8007670:	69bb      	ldr	r3, [r7, #24]
 8007672:	3301      	adds	r3, #1
 8007674:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8007676:	8afb      	ldrh	r3, [r7, #22]
 8007678:	3301      	adds	r3, #1
 800767a:	82fb      	strh	r3, [r7, #22]
 800767c:	8afa      	ldrh	r2, [r7, #22]
 800767e:	893b      	ldrh	r3, [r7, #8]
 8007680:	429a      	cmp	r2, r3
 8007682:	d3f1      	bcc.n	8007668 <HAL_SUBGHZ_ExecGetCmd+0x56>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8007684:	f7ff fdbc 	bl	8007200 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8007688:	68f8      	ldr	r0, [r7, #12]
 800768a:	f000 fa35 	bl	8007af8 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	689b      	ldr	r3, [r3, #8]
 8007692:	2b00      	cmp	r3, #0
 8007694:	d002      	beq.n	800769c <HAL_SUBGHZ_ExecGetCmd+0x8a>
    {
      status = HAL_ERROR;
 8007696:	2301      	movs	r3, #1
 8007698:	77fb      	strb	r3, [r7, #31]
 800769a:	e001      	b.n	80076a0 <HAL_SUBGHZ_ExecGetCmd+0x8e>
    }
    else
    {
      status = HAL_OK;
 800769c:	2300      	movs	r3, #0
 800769e:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	2201      	movs	r2, #1
 80076a4:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	2200      	movs	r2, #0
 80076aa:	715a      	strb	r2, [r3, #5]

    return status;
 80076ac:	7ffb      	ldrb	r3, [r7, #31]
 80076ae:	e000      	b.n	80076b2 <HAL_SUBGHZ_ExecGetCmd+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80076b0:	2302      	movs	r3, #2
  }
}
 80076b2:	4618      	mov	r0, r3
 80076b4:	3720      	adds	r7, #32
 80076b6:	46bd      	mov	sp, r7
 80076b8:	bd80      	pop	{r7, pc}

080076ba <HAL_SUBGHZ_WriteBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                         uint8_t Offset,
                                         uint8_t *pBuffer,
                                         uint16_t Size)
{
 80076ba:	b580      	push	{r7, lr}
 80076bc:	b086      	sub	sp, #24
 80076be:	af00      	add	r7, sp, #0
 80076c0:	60f8      	str	r0, [r7, #12]
 80076c2:	607a      	str	r2, [r7, #4]
 80076c4:	461a      	mov	r2, r3
 80076c6:	460b      	mov	r3, r1
 80076c8:	72fb      	strb	r3, [r7, #11]
 80076ca:	4613      	mov	r3, r2
 80076cc:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	799b      	ldrb	r3, [r3, #6]
 80076d2:	b2db      	uxtb	r3, r3
 80076d4:	2b01      	cmp	r3, #1
 80076d6:	d13e      	bne.n	8007756 <HAL_SUBGHZ_WriteBuffer+0x9c>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	795b      	ldrb	r3, [r3, #5]
 80076dc:	2b01      	cmp	r3, #1
 80076de:	d101      	bne.n	80076e4 <HAL_SUBGHZ_WriteBuffer+0x2a>
 80076e0:	2302      	movs	r3, #2
 80076e2:	e039      	b.n	8007758 <HAL_SUBGHZ_WriteBuffer+0x9e>
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	2201      	movs	r2, #1
 80076e8:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80076ea:	68f8      	ldr	r0, [r7, #12]
 80076ec:	f000 f9e0 	bl	8007ab0 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80076f0:	f7ff fd96 	bl	8007220 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 80076f4:	210e      	movs	r1, #14
 80076f6:	68f8      	ldr	r0, [r7, #12]
 80076f8:	f000 f92c 	bl	8007954 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 80076fc:	7afb      	ldrb	r3, [r7, #11]
 80076fe:	4619      	mov	r1, r3
 8007700:	68f8      	ldr	r0, [r7, #12]
 8007702:	f000 f927 	bl	8007954 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8007706:	2300      	movs	r3, #0
 8007708:	82bb      	strh	r3, [r7, #20]
 800770a:	e00a      	b.n	8007722 <HAL_SUBGHZ_WriteBuffer+0x68>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 800770c:	8abb      	ldrh	r3, [r7, #20]
 800770e:	687a      	ldr	r2, [r7, #4]
 8007710:	4413      	add	r3, r2
 8007712:	781b      	ldrb	r3, [r3, #0]
 8007714:	4619      	mov	r1, r3
 8007716:	68f8      	ldr	r0, [r7, #12]
 8007718:	f000 f91c 	bl	8007954 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 800771c:	8abb      	ldrh	r3, [r7, #20]
 800771e:	3301      	adds	r3, #1
 8007720:	82bb      	strh	r3, [r7, #20]
 8007722:	8aba      	ldrh	r2, [r7, #20]
 8007724:	893b      	ldrh	r3, [r7, #8]
 8007726:	429a      	cmp	r2, r3
 8007728:	d3f0      	bcc.n	800770c <HAL_SUBGHZ_WriteBuffer+0x52>
    }
    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800772a:	f7ff fd69 	bl	8007200 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 800772e:	68f8      	ldr	r0, [r7, #12]
 8007730:	f000 f9e2 	bl	8007af8 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	689b      	ldr	r3, [r3, #8]
 8007738:	2b00      	cmp	r3, #0
 800773a:	d002      	beq.n	8007742 <HAL_SUBGHZ_WriteBuffer+0x88>
    {
      status = HAL_ERROR;
 800773c:	2301      	movs	r3, #1
 800773e:	75fb      	strb	r3, [r7, #23]
 8007740:	e001      	b.n	8007746 <HAL_SUBGHZ_WriteBuffer+0x8c>
    }
    else
    {
      status = HAL_OK;
 8007742:	2300      	movs	r3, #0
 8007744:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	2201      	movs	r2, #1
 800774a:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	2200      	movs	r2, #0
 8007750:	715a      	strb	r2, [r3, #5]

    return status;
 8007752:	7dfb      	ldrb	r3, [r7, #23]
 8007754:	e000      	b.n	8007758 <HAL_SUBGHZ_WriteBuffer+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8007756:	2302      	movs	r3, #2
  }
}
 8007758:	4618      	mov	r0, r3
 800775a:	3718      	adds	r7, #24
 800775c:	46bd      	mov	sp, r7
 800775e:	bd80      	pop	{r7, pc}

08007760 <HAL_SUBGHZ_ReadBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                        uint8_t Offset,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8007760:	b580      	push	{r7, lr}
 8007762:	b088      	sub	sp, #32
 8007764:	af00      	add	r7, sp, #0
 8007766:	60f8      	str	r0, [r7, #12]
 8007768:	607a      	str	r2, [r7, #4]
 800776a:	461a      	mov	r2, r3
 800776c:	460b      	mov	r3, r1
 800776e:	72fb      	strb	r3, [r7, #11]
 8007770:	4613      	mov	r3, r2
 8007772:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	799b      	ldrb	r3, [r3, #6]
 800777c:	b2db      	uxtb	r3, r3
 800777e:	2b01      	cmp	r3, #1
 8007780:	d141      	bne.n	8007806 <HAL_SUBGHZ_ReadBuffer+0xa6>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	795b      	ldrb	r3, [r3, #5]
 8007786:	2b01      	cmp	r3, #1
 8007788:	d101      	bne.n	800778e <HAL_SUBGHZ_ReadBuffer+0x2e>
 800778a:	2302      	movs	r3, #2
 800778c:	e03c      	b.n	8007808 <HAL_SUBGHZ_ReadBuffer+0xa8>
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	2201      	movs	r2, #1
 8007792:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8007794:	68f8      	ldr	r0, [r7, #12]
 8007796:	f000 f98b 	bl	8007ab0 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 800779a:	f7ff fd41 	bl	8007220 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 800779e:	211e      	movs	r1, #30
 80077a0:	68f8      	ldr	r0, [r7, #12]
 80077a2:	f000 f8d7 	bl	8007954 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 80077a6:	7afb      	ldrb	r3, [r7, #11]
 80077a8:	4619      	mov	r1, r3
 80077aa:	68f8      	ldr	r0, [r7, #12]
 80077ac:	f000 f8d2 	bl	8007954 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 80077b0:	2100      	movs	r1, #0
 80077b2:	68f8      	ldr	r0, [r7, #12]
 80077b4:	f000 f8ce 	bl	8007954 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 80077b8:	2300      	movs	r3, #0
 80077ba:	82fb      	strh	r3, [r7, #22]
 80077bc:	e009      	b.n	80077d2 <HAL_SUBGHZ_ReadBuffer+0x72>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 80077be:	69b9      	ldr	r1, [r7, #24]
 80077c0:	68f8      	ldr	r0, [r7, #12]
 80077c2:	f000 f91d 	bl	8007a00 <SUBGHZSPI_Receive>
      pData++;
 80077c6:	69bb      	ldr	r3, [r7, #24]
 80077c8:	3301      	adds	r3, #1
 80077ca:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 80077cc:	8afb      	ldrh	r3, [r7, #22]
 80077ce:	3301      	adds	r3, #1
 80077d0:	82fb      	strh	r3, [r7, #22]
 80077d2:	8afa      	ldrh	r2, [r7, #22]
 80077d4:	893b      	ldrh	r3, [r7, #8]
 80077d6:	429a      	cmp	r2, r3
 80077d8:	d3f1      	bcc.n	80077be <HAL_SUBGHZ_ReadBuffer+0x5e>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80077da:	f7ff fd11 	bl	8007200 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80077de:	68f8      	ldr	r0, [r7, #12]
 80077e0:	f000 f98a 	bl	8007af8 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	689b      	ldr	r3, [r3, #8]
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d002      	beq.n	80077f2 <HAL_SUBGHZ_ReadBuffer+0x92>
    {
      status = HAL_ERROR;
 80077ec:	2301      	movs	r3, #1
 80077ee:	77fb      	strb	r3, [r7, #31]
 80077f0:	e001      	b.n	80077f6 <HAL_SUBGHZ_ReadBuffer+0x96>
    }
    else
    {
      status = HAL_OK;
 80077f2:	2300      	movs	r3, #0
 80077f4:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	2201      	movs	r2, #1
 80077fa:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	2200      	movs	r2, #0
 8007800:	715a      	strb	r2, [r3, #5]

    return status;
 8007802:	7ffb      	ldrb	r3, [r7, #31]
 8007804:	e000      	b.n	8007808 <HAL_SUBGHZ_ReadBuffer+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8007806:	2302      	movs	r3, #2
  }
}
 8007808:	4618      	mov	r0, r3
 800780a:	3720      	adds	r7, #32
 800780c:	46bd      	mov	sp, r7
 800780e:	bd80      	pop	{r7, pc}

08007810 <HAL_SUBGHZ_IRQHandler>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *               the configuration information for the specified SUBGHZ module.
  * @retval None
  */
void HAL_SUBGHZ_IRQHandler(SUBGHZ_HandleTypeDef *hsubghz)
{
 8007810:	b580      	push	{r7, lr}
 8007812:	b084      	sub	sp, #16
 8007814:	af00      	add	r7, sp, #0
 8007816:	6078      	str	r0, [r7, #4]
  uint8_t tmpisr[2U] = {0U};
 8007818:	2300      	movs	r3, #0
 800781a:	81bb      	strh	r3, [r7, #12]
  uint16_t itsource;

  /* Retrieve Interrupts from SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2U);
 800781c:	f107 020c 	add.w	r2, r7, #12
 8007820:	2302      	movs	r3, #2
 8007822:	2112      	movs	r1, #18
 8007824:	6878      	ldr	r0, [r7, #4]
 8007826:	f7ff fef4 	bl	8007612 <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0U];
 800782a:	7b3b      	ldrb	r3, [r7, #12]
 800782c:	81fb      	strh	r3, [r7, #14]
  itsource = (itsource << 8U) | tmpisr[1U];
 800782e:	89fb      	ldrh	r3, [r7, #14]
 8007830:	021b      	lsls	r3, r3, #8
 8007832:	b21a      	sxth	r2, r3
 8007834:	7b7b      	ldrb	r3, [r7, #13]
 8007836:	b21b      	sxth	r3, r3
 8007838:	4313      	orrs	r3, r2
 800783a:	b21b      	sxth	r3, r3
 800783c:	81fb      	strh	r3, [r7, #14]

  /* Clear SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2U);
 800783e:	f107 020c 	add.w	r2, r7, #12
 8007842:	2302      	movs	r3, #2
 8007844:	2102      	movs	r1, #2
 8007846:	6878      	ldr	r0, [r7, #4]
 8007848:	f7ff fe84 	bl	8007554 <HAL_SUBGHZ_ExecSetCmd>

  /* Packet transmission completed Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 800784c:	89fb      	ldrh	r3, [r7, #14]
 800784e:	f003 0301 	and.w	r3, r3, #1
 8007852:	2b00      	cmp	r3, #0
 8007854:	d002      	beq.n	800785c <HAL_SUBGHZ_IRQHandler+0x4c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->TxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 8007856:	6878      	ldr	r0, [r7, #4]
 8007858:	f011 ffe0 	bl	801981c <HAL_SUBGHZ_TxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Packet received Interrupt */
  if ((SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET) && \
 800785c:	89fb      	ldrh	r3, [r7, #14]
 800785e:	f003 0302 	and.w	r3, r3, #2
 8007862:	2b00      	cmp	r3, #0
 8007864:	d007      	beq.n	8007876 <HAL_SUBGHZ_IRQHandler+0x66>
      (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) == RESET))
 8007866:	89fb      	ldrh	r3, [r7, #14]
 8007868:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET) && \
 800786c:	2b00      	cmp	r3, #0
 800786e:	d102      	bne.n	8007876 <HAL_SUBGHZ_IRQHandler+0x66>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 8007870:	6878      	ldr	r0, [r7, #4]
 8007872:	f011 ffe1 	bl	8019838 <HAL_SUBGHZ_RxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Preamble Detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 8007876:	89fb      	ldrh	r3, [r7, #14]
 8007878:	f003 0304 	and.w	r3, r3, #4
 800787c:	2b00      	cmp	r3, #0
 800787e:	d002      	beq.n	8007886 <HAL_SUBGHZ_IRQHandler+0x76>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->PreambleDetectedCallback(hsubghz);
#else
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 8007880:	6878      	ldr	r0, [r7, #4]
 8007882:	f012 f831 	bl	80198e8 <HAL_SUBGHZ_PreambleDetectedCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /*  Valid sync word detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 8007886:	89fb      	ldrh	r3, [r7, #14]
 8007888:	f003 0308 	and.w	r3, r3, #8
 800788c:	2b00      	cmp	r3, #0
 800788e:	d002      	beq.n	8007896 <HAL_SUBGHZ_IRQHandler+0x86>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->SyncWordValidCallback(hsubghz);
#else
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 8007890:	6878      	ldr	r0, [r7, #4]
 8007892:	f012 f837 	bl	8019904 <HAL_SUBGHZ_SyncWordValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Valid LoRa header received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 8007896:	89fb      	ldrh	r3, [r7, #14]
 8007898:	f003 0310 	and.w	r3, r3, #16
 800789c:	2b00      	cmp	r3, #0
 800789e:	d002      	beq.n	80078a6 <HAL_SUBGHZ_IRQHandler+0x96>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderValidCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 80078a0:	6878      	ldr	r0, [r7, #4]
 80078a2:	f012 f83d 	bl	8019920 <HAL_SUBGHZ_HeaderValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LoRa header CRC error Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 80078a6:	89fb      	ldrh	r3, [r7, #14]
 80078a8:	f003 0320 	and.w	r3, r3, #32
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d002      	beq.n	80078b6 <HAL_SUBGHZ_IRQHandler+0xa6>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 80078b0:	6878      	ldr	r0, [r7, #4]
 80078b2:	f012 f80b 	bl	80198cc <HAL_SUBGHZ_HeaderErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Wrong CRC received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 80078b6:	89fb      	ldrh	r3, [r7, #14]
 80078b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d002      	beq.n	80078c6 <HAL_SUBGHZ_IRQHandler+0xb6>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->CRCErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 80078c0:	6878      	ldr	r0, [r7, #4]
 80078c2:	f011 ffc7 	bl	8019854 <HAL_SUBGHZ_CRCErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Channel activity detection finished Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 80078c6:	89fb      	ldrh	r3, [r7, #14]
 80078c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d00d      	beq.n	80078ec <HAL_SUBGHZ_IRQHandler+0xdc>
    {
      hsubghz->CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
    }
#else
    /* Channel activity Detected Interrupt */
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 80078d0:	89fb      	ldrh	r3, [r7, #14]
 80078d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d004      	beq.n	80078e4 <HAL_SUBGHZ_IRQHandler+0xd4>
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 80078da:	2101      	movs	r1, #1
 80078dc:	6878      	ldr	r0, [r7, #4]
 80078de:	f011 ffc7 	bl	8019870 <HAL_SUBGHZ_CADStatusCallback>
 80078e2:	e003      	b.n	80078ec <HAL_SUBGHZ_IRQHandler+0xdc>
    }
    else
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 80078e4:	2100      	movs	r1, #0
 80078e6:	6878      	ldr	r0, [r7, #4]
 80078e8:	f011 ffc2 	bl	8019870 <HAL_SUBGHZ_CADStatusCallback>
    }
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Rx or Tx Timeout Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 80078ec:	89fb      	ldrh	r3, [r7, #14]
 80078ee:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d002      	beq.n	80078fc <HAL_SUBGHZ_IRQHandler+0xec>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxTxTimeoutCallback(hsubghz);
#else
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 80078f6:	6878      	ldr	r0, [r7, #4]
 80078f8:	f011 ffd8 	bl	80198ac <HAL_SUBGHZ_RxTxTimeoutCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LR_FHSS Hop interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_LR_FHSS_HOP) != RESET)
 80078fc:	89fb      	ldrh	r3, [r7, #14]
 80078fe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007902:	2b00      	cmp	r3, #0
 8007904:	d002      	beq.n	800790c <HAL_SUBGHZ_IRQHandler+0xfc>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->LrFhssHopCallback(hsubghz);
#else
    HAL_SUBGHZ_LrFhssHopCallback(hsubghz);
 8007906:	6878      	ldr	r0, [r7, #4]
 8007908:	f012 f818 	bl	801993c <HAL_SUBGHZ_LrFhssHopCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }
}
 800790c:	bf00      	nop
 800790e:	3710      	adds	r7, #16
 8007910:	46bd      	mov	sp, r7
 8007912:	bd80      	pop	{r7, pc}

08007914 <SUBGHZSPI_Init>:
  * @brief  Initializes the SUBGHZSPI peripheral
  * @param  BaudratePrescaler SPI Baudrate prescaler
  * @retval None
  */
void SUBGHZSPI_Init(uint32_t BaudratePrescaler)
{
 8007914:	b480      	push	{r7}
 8007916:	b083      	sub	sp, #12
 8007918:	af00      	add	r7, sp, #0
 800791a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 800791c:	4b0c      	ldr	r3, [pc, #48]	@ (8007950 <SUBGHZSPI_Init+0x3c>)
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	4a0b      	ldr	r2, [pc, #44]	@ (8007950 <SUBGHZSPI_Init+0x3c>)
 8007922:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007926:	6013      	str	r3, [r2, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 8007928:	4a09      	ldr	r2, [pc, #36]	@ (8007950 <SUBGHZSPI_Init+0x3c>)
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	f443 7341 	orr.w	r3, r3, #772	@ 0x304
 8007930:	6013      	str	r3, [r2, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 8007932:	4b07      	ldr	r3, [pc, #28]	@ (8007950 <SUBGHZSPI_Init+0x3c>)
 8007934:	f44f 52b8 	mov.w	r2, #5888	@ 0x1700
 8007938:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 800793a:	4b05      	ldr	r3, [pc, #20]	@ (8007950 <SUBGHZSPI_Init+0x3c>)
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	4a04      	ldr	r2, [pc, #16]	@ (8007950 <SUBGHZSPI_Init+0x3c>)
 8007940:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007944:	6013      	str	r3, [r2, #0]
}
 8007946:	bf00      	nop
 8007948:	370c      	adds	r7, #12
 800794a:	46bd      	mov	sp, r7
 800794c:	bc80      	pop	{r7}
 800794e:	4770      	bx	lr
 8007950:	58010000 	.word	0x58010000

08007954 <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 8007954:	b480      	push	{r7}
 8007956:	b087      	sub	sp, #28
 8007958:	af00      	add	r7, sp, #0
 800795a:	6078      	str	r0, [r7, #4]
 800795c:	460b      	mov	r3, r1
 800795e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8007960:	2300      	movs	r3, #0
 8007962:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8007964:	4b23      	ldr	r3, [pc, #140]	@ (80079f4 <SUBGHZSPI_Transmit+0xa0>)
 8007966:	681a      	ldr	r2, [r3, #0]
 8007968:	4613      	mov	r3, r2
 800796a:	00db      	lsls	r3, r3, #3
 800796c:	1a9b      	subs	r3, r3, r2
 800796e:	009b      	lsls	r3, r3, #2
 8007970:	0cdb      	lsrs	r3, r3, #19
 8007972:	2264      	movs	r2, #100	@ 0x64
 8007974:	fb02 f303 	mul.w	r3, r2, r3
 8007978:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	2b00      	cmp	r3, #0
 800797e:	d105      	bne.n	800798c <SUBGHZSPI_Transmit+0x38>
    {
      status = HAL_ERROR;
 8007980:	2301      	movs	r3, #1
 8007982:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	2201      	movs	r2, #1
 8007988:	609a      	str	r2, [r3, #8]
      break;
 800798a:	e008      	b.n	800799e <SUBGHZSPI_Transmit+0x4a>
    }
    count--;
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	3b01      	subs	r3, #1
 8007990:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8007992:	4b19      	ldr	r3, [pc, #100]	@ (80079f8 <SUBGHZSPI_Transmit+0xa4>)
 8007994:	689b      	ldr	r3, [r3, #8]
 8007996:	f003 0302 	and.w	r3, r3, #2
 800799a:	2b02      	cmp	r3, #2
 800799c:	d1ed      	bne.n	800797a <SUBGHZSPI_Transmit+0x26>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 800799e:	4b17      	ldr	r3, [pc, #92]	@ (80079fc <SUBGHZSPI_Transmit+0xa8>)
 80079a0:	613b      	str	r3, [r7, #16]
  *spidr = Data;
 80079a2:	693b      	ldr	r3, [r7, #16]
 80079a4:	78fa      	ldrb	r2, [r7, #3]
 80079a6:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80079a8:	4b12      	ldr	r3, [pc, #72]	@ (80079f4 <SUBGHZSPI_Transmit+0xa0>)
 80079aa:	681a      	ldr	r2, [r3, #0]
 80079ac:	4613      	mov	r3, r2
 80079ae:	00db      	lsls	r3, r3, #3
 80079b0:	1a9b      	subs	r3, r3, r2
 80079b2:	009b      	lsls	r3, r3, #2
 80079b4:	0cdb      	lsrs	r3, r3, #19
 80079b6:	2264      	movs	r2, #100	@ 0x64
 80079b8:	fb02 f303 	mul.w	r3, r2, r3
 80079bc:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d105      	bne.n	80079d0 <SUBGHZSPI_Transmit+0x7c>
    {
      status = HAL_ERROR;
 80079c4:	2301      	movs	r3, #1
 80079c6:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	2201      	movs	r2, #1
 80079cc:	609a      	str	r2, [r3, #8]
      break;
 80079ce:	e008      	b.n	80079e2 <SUBGHZSPI_Transmit+0x8e>
    }
    count--;
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	3b01      	subs	r3, #1
 80079d4:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 80079d6:	4b08      	ldr	r3, [pc, #32]	@ (80079f8 <SUBGHZSPI_Transmit+0xa4>)
 80079d8:	689b      	ldr	r3, [r3, #8]
 80079da:	f003 0301 	and.w	r3, r3, #1
 80079de:	2b01      	cmp	r3, #1
 80079e0:	d1ed      	bne.n	80079be <SUBGHZSPI_Transmit+0x6a>

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 80079e2:	4b05      	ldr	r3, [pc, #20]	@ (80079f8 <SUBGHZSPI_Transmit+0xa4>)
 80079e4:	68db      	ldr	r3, [r3, #12]

  return status;
 80079e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80079e8:	4618      	mov	r0, r3
 80079ea:	371c      	adds	r7, #28
 80079ec:	46bd      	mov	sp, r7
 80079ee:	bc80      	pop	{r7}
 80079f0:	4770      	bx	lr
 80079f2:	bf00      	nop
 80079f4:	20000000 	.word	0x20000000
 80079f8:	58010000 	.word	0x58010000
 80079fc:	5801000c 	.word	0x5801000c

08007a00 <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 8007a00:	b480      	push	{r7}
 8007a02:	b087      	sub	sp, #28
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	6078      	str	r0, [r7, #4]
 8007a08:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007a0a:	2300      	movs	r3, #0
 8007a0c:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8007a0e:	4b25      	ldr	r3, [pc, #148]	@ (8007aa4 <SUBGHZSPI_Receive+0xa4>)
 8007a10:	681a      	ldr	r2, [r3, #0]
 8007a12:	4613      	mov	r3, r2
 8007a14:	00db      	lsls	r3, r3, #3
 8007a16:	1a9b      	subs	r3, r3, r2
 8007a18:	009b      	lsls	r3, r3, #2
 8007a1a:	0cdb      	lsrs	r3, r3, #19
 8007a1c:	2264      	movs	r2, #100	@ 0x64
 8007a1e:	fb02 f303 	mul.w	r3, r2, r3
 8007a22:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d105      	bne.n	8007a36 <SUBGHZSPI_Receive+0x36>
    {
      status = HAL_ERROR;
 8007a2a:	2301      	movs	r3, #1
 8007a2c:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	2201      	movs	r2, #1
 8007a32:	609a      	str	r2, [r3, #8]
      break;
 8007a34:	e008      	b.n	8007a48 <SUBGHZSPI_Receive+0x48>
    }
    count--;
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	3b01      	subs	r3, #1
 8007a3a:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8007a3c:	4b1a      	ldr	r3, [pc, #104]	@ (8007aa8 <SUBGHZSPI_Receive+0xa8>)
 8007a3e:	689b      	ldr	r3, [r3, #8]
 8007a40:	f003 0302 	and.w	r3, r3, #2
 8007a44:	2b02      	cmp	r3, #2
 8007a46:	d1ed      	bne.n	8007a24 <SUBGHZSPI_Receive+0x24>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8007a48:	4b18      	ldr	r3, [pc, #96]	@ (8007aac <SUBGHZSPI_Receive+0xac>)
 8007a4a:	613b      	str	r3, [r7, #16]
  *spidr = SUBGHZ_DUMMY_DATA;
 8007a4c:	693b      	ldr	r3, [r7, #16]
 8007a4e:	22ff      	movs	r2, #255	@ 0xff
 8007a50:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8007a52:	4b14      	ldr	r3, [pc, #80]	@ (8007aa4 <SUBGHZSPI_Receive+0xa4>)
 8007a54:	681a      	ldr	r2, [r3, #0]
 8007a56:	4613      	mov	r3, r2
 8007a58:	00db      	lsls	r3, r3, #3
 8007a5a:	1a9b      	subs	r3, r3, r2
 8007a5c:	009b      	lsls	r3, r3, #2
 8007a5e:	0cdb      	lsrs	r3, r3, #19
 8007a60:	2264      	movs	r2, #100	@ 0x64
 8007a62:	fb02 f303 	mul.w	r3, r2, r3
 8007a66:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d105      	bne.n	8007a7a <SUBGHZSPI_Receive+0x7a>
    {
      status = HAL_ERROR;
 8007a6e:	2301      	movs	r3, #1
 8007a70:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	2201      	movs	r2, #1
 8007a76:	609a      	str	r2, [r3, #8]
      break;
 8007a78:	e008      	b.n	8007a8c <SUBGHZSPI_Receive+0x8c>
    }
    count--;
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	3b01      	subs	r3, #1
 8007a7e:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8007a80:	4b09      	ldr	r3, [pc, #36]	@ (8007aa8 <SUBGHZSPI_Receive+0xa8>)
 8007a82:	689b      	ldr	r3, [r3, #8]
 8007a84:	f003 0301 	and.w	r3, r3, #1
 8007a88:	2b01      	cmp	r3, #1
 8007a8a:	d1ed      	bne.n	8007a68 <SUBGHZSPI_Receive+0x68>

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 8007a8c:	4b06      	ldr	r3, [pc, #24]	@ (8007aa8 <SUBGHZSPI_Receive+0xa8>)
 8007a8e:	68db      	ldr	r3, [r3, #12]
 8007a90:	b2da      	uxtb	r2, r3
 8007a92:	683b      	ldr	r3, [r7, #0]
 8007a94:	701a      	strb	r2, [r3, #0]

  return status;
 8007a96:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a98:	4618      	mov	r0, r3
 8007a9a:	371c      	adds	r7, #28
 8007a9c:	46bd      	mov	sp, r7
 8007a9e:	bc80      	pop	{r7}
 8007aa0:	4770      	bx	lr
 8007aa2:	bf00      	nop
 8007aa4:	20000000 	.word	0x20000000
 8007aa8:	58010000 	.word	0x58010000
 8007aac:	5801000c 	.word	0x5801000c

08007ab0 <SUBGHZ_CheckDeviceReady>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_CheckDeviceReady(SUBGHZ_HandleTypeDef *hsubghz)
{
 8007ab0:	b580      	push	{r7, lr}
 8007ab2:	b084      	sub	sp, #16
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  /* Wakeup radio in case of sleep mode: Select-Unselect radio */
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	791b      	ldrb	r3, [r3, #4]
 8007abc:	2b01      	cmp	r3, #1
 8007abe:	d111      	bne.n	8007ae4 <SUBGHZ_CheckDeviceReady+0x34>
  {
    /* Initialize NSS switch Delay */
    count  = SUBGHZ_NSS_LOOP_TIME;
 8007ac0:	4b0c      	ldr	r3, [pc, #48]	@ (8007af4 <SUBGHZ_CheckDeviceReady+0x44>)
 8007ac2:	681a      	ldr	r2, [r3, #0]
 8007ac4:	4613      	mov	r3, r2
 8007ac6:	005b      	lsls	r3, r3, #1
 8007ac8:	4413      	add	r3, r2
 8007aca:	00db      	lsls	r3, r3, #3
 8007acc:	0c1b      	lsrs	r3, r3, #16
 8007ace:	60fb      	str	r3, [r7, #12]

    /* NSS = 0; */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8007ad0:	f7ff fba6 	bl	8007220 <LL_PWR_SelectSUBGHZSPI_NSS>

    /* Wait Radio wakeup */
    do
    {
      count--;
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	3b01      	subs	r3, #1
 8007ad8:	60fb      	str	r3, [r7, #12]
    } while (count != 0UL);
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d1f9      	bne.n	8007ad4 <SUBGHZ_CheckDeviceReady+0x24>

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8007ae0:	f7ff fb8e 	bl	8007200 <LL_PWR_UnselectSUBGHZSPI_NSS>
  }
  return (SUBGHZ_WaitOnBusy(hsubghz));
 8007ae4:	6878      	ldr	r0, [r7, #4]
 8007ae6:	f000 f807 	bl	8007af8 <SUBGHZ_WaitOnBusy>
 8007aea:	4603      	mov	r3, r0
}
 8007aec:	4618      	mov	r0, r3
 8007aee:	3710      	adds	r7, #16
 8007af0:	46bd      	mov	sp, r7
 8007af2:	bd80      	pop	{r7, pc}
 8007af4:	20000000 	.word	0x20000000

08007af8 <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 8007af8:	b580      	push	{r7, lr}
 8007afa:	b086      	sub	sp, #24
 8007afc:	af00      	add	r7, sp, #0
 8007afe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
 8007b00:	2300      	movs	r3, #0
 8007b02:	75fb      	strb	r3, [r7, #23]
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 8007b04:	4b12      	ldr	r3, [pc, #72]	@ (8007b50 <SUBGHZ_WaitOnBusy+0x58>)
 8007b06:	681a      	ldr	r2, [r3, #0]
 8007b08:	4613      	mov	r3, r2
 8007b0a:	005b      	lsls	r3, r3, #1
 8007b0c:	4413      	add	r3, r2
 8007b0e:	00db      	lsls	r3, r3, #3
 8007b10:	0d1b      	lsrs	r3, r3, #20
 8007b12:	2264      	movs	r2, #100	@ 0x64
 8007b14:	fb02 f303 	mul.w	r3, r2, r3
 8007b18:	60fb      	str	r3, [r7, #12]

  /* Wait until Busy signal is set */
  do
  {
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();
 8007b1a:	f7ff fbaf 	bl	800727c <LL_PWR_IsActiveFlag_RFBUSYMS>
 8007b1e:	6138      	str	r0, [r7, #16]

    if (count == 0U)
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d105      	bne.n	8007b32 <SUBGHZ_WaitOnBusy+0x3a>
    {
      status  = HAL_ERROR;
 8007b26:	2301      	movs	r3, #1
 8007b28:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	2202      	movs	r2, #2
 8007b2e:	609a      	str	r2, [r3, #8]
      break;
 8007b30:	e009      	b.n	8007b46 <SUBGHZ_WaitOnBusy+0x4e>
    }
    count--;
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	3b01      	subs	r3, #1
 8007b36:	60fb      	str	r3, [r7, #12]
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 8007b38:	f7ff fb8e 	bl	8007258 <LL_PWR_IsActiveFlag_RFBUSYS>
 8007b3c:	4602      	mov	r2, r0
 8007b3e:	693b      	ldr	r3, [r7, #16]
 8007b40:	4013      	ands	r3, r2
 8007b42:	2b01      	cmp	r3, #1
 8007b44:	d0e9      	beq.n	8007b1a <SUBGHZ_WaitOnBusy+0x22>

  return status;
 8007b46:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b48:	4618      	mov	r0, r3
 8007b4a:	3718      	adds	r7, #24
 8007b4c:	46bd      	mov	sp, r7
 8007b4e:	bd80      	pop	{r7, pc}
 8007b50:	20000000 	.word	0x20000000

08007b54 <LL_RCC_GetUSARTClockSource>:
{
 8007b54:	b480      	push	{r7}
 8007b56:	b083      	sub	sp, #12
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 8007b5c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007b60:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	401a      	ands	r2, r3
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	041b      	lsls	r3, r3, #16
 8007b6c:	4313      	orrs	r3, r2
}
 8007b6e:	4618      	mov	r0, r3
 8007b70:	370c      	adds	r7, #12
 8007b72:	46bd      	mov	sp, r7
 8007b74:	bc80      	pop	{r7}
 8007b76:	4770      	bx	lr

08007b78 <LL_RCC_GetLPUARTClockSource>:
{
 8007b78:	b480      	push	{r7}
 8007b7a:	b083      	sub	sp, #12
 8007b7c:	af00      	add	r7, sp, #0
 8007b7e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8007b80:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007b84:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	4013      	ands	r3, r2
}
 8007b8c:	4618      	mov	r0, r3
 8007b8e:	370c      	adds	r7, #12
 8007b90:	46bd      	mov	sp, r7
 8007b92:	bc80      	pop	{r7}
 8007b94:	4770      	bx	lr

08007b96 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007b96:	b580      	push	{r7, lr}
 8007b98:	b082      	sub	sp, #8
 8007b9a:	af00      	add	r7, sp, #0
 8007b9c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d101      	bne.n	8007ba8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007ba4:	2301      	movs	r3, #1
 8007ba6:	e042      	b.n	8007c2e <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d106      	bne.n	8007bc0 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	2200      	movs	r2, #0
 8007bb6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007bba:	6878      	ldr	r0, [r7, #4]
 8007bbc:	f7fa fc68 	bl	8002490 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	2224      	movs	r2, #36	@ 0x24
 8007bc4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	681a      	ldr	r2, [r3, #0]
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	f022 0201 	bic.w	r2, r2, #1
 8007bd6:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d002      	beq.n	8007be6 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8007be0:	6878      	ldr	r0, [r7, #4]
 8007be2:	f000 feab 	bl	800893c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007be6:	6878      	ldr	r0, [r7, #4]
 8007be8:	f000 fc34 	bl	8008454 <UART_SetConfig>
 8007bec:	4603      	mov	r3, r0
 8007bee:	2b01      	cmp	r3, #1
 8007bf0:	d101      	bne.n	8007bf6 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8007bf2:	2301      	movs	r3, #1
 8007bf4:	e01b      	b.n	8007c2e <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	685a      	ldr	r2, [r3, #4]
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007c04:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	689a      	ldr	r2, [r3, #8]
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007c14:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	681a      	ldr	r2, [r3, #0]
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	f042 0201 	orr.w	r2, r2, #1
 8007c24:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007c26:	6878      	ldr	r0, [r7, #4]
 8007c28:	f000 ff29 	bl	8008a7e <UART_CheckIdleState>
 8007c2c:	4603      	mov	r3, r0
}
 8007c2e:	4618      	mov	r0, r3
 8007c30:	3708      	adds	r7, #8
 8007c32:	46bd      	mov	sp, r7
 8007c34:	bd80      	pop	{r7, pc}
	...

08007c38 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007c38:	b580      	push	{r7, lr}
 8007c3a:	b08a      	sub	sp, #40	@ 0x28
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	60f8      	str	r0, [r7, #12]
 8007c40:	60b9      	str	r1, [r7, #8]
 8007c42:	4613      	mov	r3, r2
 8007c44:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007c4c:	2b20      	cmp	r3, #32
 8007c4e:	d137      	bne.n	8007cc0 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8007c50:	68bb      	ldr	r3, [r7, #8]
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d002      	beq.n	8007c5c <HAL_UART_Receive_IT+0x24>
 8007c56:	88fb      	ldrh	r3, [r7, #6]
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d101      	bne.n	8007c60 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8007c5c:	2301      	movs	r3, #1
 8007c5e:	e030      	b.n	8007cc2 <HAL_UART_Receive_IT+0x8a>
      }
    }

#endif /* CORE_CM0PLUS */
    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	2200      	movs	r2, #0
 8007c64:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	4a18      	ldr	r2, [pc, #96]	@ (8007ccc <HAL_UART_Receive_IT+0x94>)
 8007c6c:	4293      	cmp	r3, r2
 8007c6e:	d01f      	beq.n	8007cb0 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	685b      	ldr	r3, [r3, #4]
 8007c76:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d018      	beq.n	8007cb0 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c84:	697b      	ldr	r3, [r7, #20]
 8007c86:	e853 3f00 	ldrex	r3, [r3]
 8007c8a:	613b      	str	r3, [r7, #16]
   return(result);
 8007c8c:	693b      	ldr	r3, [r7, #16]
 8007c8e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007c92:	627b      	str	r3, [r7, #36]	@ 0x24
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	461a      	mov	r2, r3
 8007c9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c9c:	623b      	str	r3, [r7, #32]
 8007c9e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ca0:	69f9      	ldr	r1, [r7, #28]
 8007ca2:	6a3a      	ldr	r2, [r7, #32]
 8007ca4:	e841 2300 	strex	r3, r2, [r1]
 8007ca8:	61bb      	str	r3, [r7, #24]
   return(result);
 8007caa:	69bb      	ldr	r3, [r7, #24]
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d1e6      	bne.n	8007c7e <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007cb0:	88fb      	ldrh	r3, [r7, #6]
 8007cb2:	461a      	mov	r2, r3
 8007cb4:	68b9      	ldr	r1, [r7, #8]
 8007cb6:	68f8      	ldr	r0, [r7, #12]
 8007cb8:	f000 fffe 	bl	8008cb8 <UART_Start_Receive_IT>
 8007cbc:	4603      	mov	r3, r0
 8007cbe:	e000      	b.n	8007cc2 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007cc0:	2302      	movs	r3, #2
  }
}
 8007cc2:	4618      	mov	r0, r3
 8007cc4:	3728      	adds	r7, #40	@ 0x28
 8007cc6:	46bd      	mov	sp, r7
 8007cc8:	bd80      	pop	{r7, pc}
 8007cca:	bf00      	nop
 8007ccc:	40008000 	.word	0x40008000

08007cd0 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8007cd0:	b580      	push	{r7, lr}
 8007cd2:	b08a      	sub	sp, #40	@ 0x28
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	60f8      	str	r0, [r7, #12]
 8007cd8:	60b9      	str	r1, [r7, #8]
 8007cda:	4613      	mov	r3, r2
 8007cdc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007ce4:	2b20      	cmp	r3, #32
 8007ce6:	d167      	bne.n	8007db8 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8007ce8:	68bb      	ldr	r3, [r7, #8]
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d002      	beq.n	8007cf4 <HAL_UART_Transmit_DMA+0x24>
 8007cee:	88fb      	ldrh	r3, [r7, #6]
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d101      	bne.n	8007cf8 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8007cf4:	2301      	movs	r3, #1
 8007cf6:	e060      	b.n	8007dba <HAL_UART_Transmit_DMA+0xea>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->pTxBuffPtr  = pData;
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	68ba      	ldr	r2, [r7, #8]
 8007cfc:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	88fa      	ldrh	r2, [r7, #6]
 8007d02:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	88fa      	ldrh	r2, [r7, #6]
 8007d0a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	2200      	movs	r2, #0
 8007d12:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	2221      	movs	r2, #33	@ 0x21
 8007d1a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d028      	beq.n	8007d78 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007d2a:	4a26      	ldr	r2, [pc, #152]	@ (8007dc4 <HAL_UART_Transmit_DMA+0xf4>)
 8007d2c:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007d32:	4a25      	ldr	r2, [pc, #148]	@ (8007dc8 <HAL_UART_Transmit_DMA+0xf8>)
 8007d34:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007d3a:	4a24      	ldr	r2, [pc, #144]	@ (8007dcc <HAL_UART_Transmit_DMA+0xfc>)
 8007d3c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007d42:	2200      	movs	r2, #0
 8007d44:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007d4e:	4619      	mov	r1, r3
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	3328      	adds	r3, #40	@ 0x28
 8007d56:	461a      	mov	r2, r3
 8007d58:	88fb      	ldrh	r3, [r7, #6]
 8007d5a:	f7fc fb4d 	bl	80043f8 <HAL_DMA_Start_IT>
 8007d5e:	4603      	mov	r3, r0
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d009      	beq.n	8007d78 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	2210      	movs	r2, #16
 8007d68:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	2220      	movs	r2, #32
 8007d70:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 8007d74:	2301      	movs	r3, #1
 8007d76:	e020      	b.n	8007dba <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	2240      	movs	r2, #64	@ 0x40
 8007d7e:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	3308      	adds	r3, #8
 8007d86:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d88:	697b      	ldr	r3, [r7, #20]
 8007d8a:	e853 3f00 	ldrex	r3, [r3]
 8007d8e:	613b      	str	r3, [r7, #16]
   return(result);
 8007d90:	693b      	ldr	r3, [r7, #16]
 8007d92:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007d96:	627b      	str	r3, [r7, #36]	@ 0x24
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	3308      	adds	r3, #8
 8007d9e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007da0:	623a      	str	r2, [r7, #32]
 8007da2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007da4:	69f9      	ldr	r1, [r7, #28]
 8007da6:	6a3a      	ldr	r2, [r7, #32]
 8007da8:	e841 2300 	strex	r3, r2, [r1]
 8007dac:	61bb      	str	r3, [r7, #24]
   return(result);
 8007dae:	69bb      	ldr	r3, [r7, #24]
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d1e5      	bne.n	8007d80 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8007db4:	2300      	movs	r3, #0
 8007db6:	e000      	b.n	8007dba <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8007db8:	2302      	movs	r3, #2
  }
}
 8007dba:	4618      	mov	r0, r3
 8007dbc:	3728      	adds	r7, #40	@ 0x28
 8007dbe:	46bd      	mov	sp, r7
 8007dc0:	bd80      	pop	{r7, pc}
 8007dc2:	bf00      	nop
 8007dc4:	08009043 	.word	0x08009043
 8007dc8:	080090dd 	.word	0x080090dd
 8007dcc:	080090f9 	.word	0x080090f9

08007dd0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007dd0:	b580      	push	{r7, lr}
 8007dd2:	b0ba      	sub	sp, #232	@ 0xe8
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	69db      	ldr	r3, [r3, #28]
 8007dde:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	689b      	ldr	r3, [r3, #8]
 8007df2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007df6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8007dfa:	f640 030f 	movw	r3, #2063	@ 0x80f
 8007dfe:	4013      	ands	r3, r2
 8007e00:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8007e04:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d11b      	bne.n	8007e44 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007e0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007e10:	f003 0320 	and.w	r3, r3, #32
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d015      	beq.n	8007e44 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007e18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007e1c:	f003 0320 	and.w	r3, r3, #32
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d105      	bne.n	8007e30 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007e24:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007e28:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d009      	beq.n	8007e44 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	f000 82e3 	beq.w	8008400 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007e3e:	6878      	ldr	r0, [r7, #4]
 8007e40:	4798      	blx	r3
      }
      return;
 8007e42:	e2dd      	b.n	8008400 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007e44:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	f000 8123 	beq.w	8008094 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8007e4e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8007e52:	4b8d      	ldr	r3, [pc, #564]	@ (8008088 <HAL_UART_IRQHandler+0x2b8>)
 8007e54:	4013      	ands	r3, r2
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d106      	bne.n	8007e68 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8007e5a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8007e5e:	4b8b      	ldr	r3, [pc, #556]	@ (800808c <HAL_UART_IRQHandler+0x2bc>)
 8007e60:	4013      	ands	r3, r2
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	f000 8116 	beq.w	8008094 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007e68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007e6c:	f003 0301 	and.w	r3, r3, #1
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d011      	beq.n	8007e98 <HAL_UART_IRQHandler+0xc8>
 8007e74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007e78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d00b      	beq.n	8007e98 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	2201      	movs	r2, #1
 8007e86:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007e8e:	f043 0201 	orr.w	r2, r3, #1
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007e98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007e9c:	f003 0302 	and.w	r3, r3, #2
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d011      	beq.n	8007ec8 <HAL_UART_IRQHandler+0xf8>
 8007ea4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007ea8:	f003 0301 	and.w	r3, r3, #1
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d00b      	beq.n	8007ec8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	2202      	movs	r2, #2
 8007eb6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007ebe:	f043 0204 	orr.w	r2, r3, #4
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007ec8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007ecc:	f003 0304 	and.w	r3, r3, #4
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d011      	beq.n	8007ef8 <HAL_UART_IRQHandler+0x128>
 8007ed4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007ed8:	f003 0301 	and.w	r3, r3, #1
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d00b      	beq.n	8007ef8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	2204      	movs	r2, #4
 8007ee6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007eee:	f043 0202 	orr.w	r2, r3, #2
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007ef8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007efc:	f003 0308 	and.w	r3, r3, #8
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d017      	beq.n	8007f34 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007f04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007f08:	f003 0320 	and.w	r3, r3, #32
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d105      	bne.n	8007f1c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8007f10:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8007f14:	4b5c      	ldr	r3, [pc, #368]	@ (8008088 <HAL_UART_IRQHandler+0x2b8>)
 8007f16:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d00b      	beq.n	8007f34 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	2208      	movs	r2, #8
 8007f22:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007f2a:	f043 0208 	orr.w	r2, r3, #8
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007f34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007f38:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d012      	beq.n	8007f66 <HAL_UART_IRQHandler+0x196>
 8007f40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007f44:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d00c      	beq.n	8007f66 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007f54:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007f5c:	f043 0220 	orr.w	r2, r3, #32
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	f000 8249 	beq.w	8008404 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007f72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007f76:	f003 0320 	and.w	r3, r3, #32
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d013      	beq.n	8007fa6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007f7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007f82:	f003 0320 	and.w	r3, r3, #32
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d105      	bne.n	8007f96 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007f8a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007f8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d007      	beq.n	8007fa6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d003      	beq.n	8007fa6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007fa2:	6878      	ldr	r0, [r7, #4]
 8007fa4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007fac:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	689b      	ldr	r3, [r3, #8]
 8007fb6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007fba:	2b40      	cmp	r3, #64	@ 0x40
 8007fbc:	d005      	beq.n	8007fca <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007fbe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007fc2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d054      	beq.n	8008074 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007fca:	6878      	ldr	r0, [r7, #4]
 8007fcc:	f000 ffd4 	bl	8008f78 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	689b      	ldr	r3, [r3, #8]
 8007fd6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007fda:	2b40      	cmp	r3, #64	@ 0x40
 8007fdc:	d146      	bne.n	800806c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	3308      	adds	r3, #8
 8007fe4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fe8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007fec:	e853 3f00 	ldrex	r3, [r3]
 8007ff0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8007ff4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007ff8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007ffc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	3308      	adds	r3, #8
 8008006:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800800a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800800e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008012:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8008016:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800801a:	e841 2300 	strex	r3, r2, [r1]
 800801e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8008022:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008026:	2b00      	cmp	r3, #0
 8008028:	d1d9      	bne.n	8007fde <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008030:	2b00      	cmp	r3, #0
 8008032:	d017      	beq.n	8008064 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800803a:	4a15      	ldr	r2, [pc, #84]	@ (8008090 <HAL_UART_IRQHandler+0x2c0>)
 800803c:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008044:	4618      	mov	r0, r3
 8008046:	f7fc fab3 	bl	80045b0 <HAL_DMA_Abort_IT>
 800804a:	4603      	mov	r3, r0
 800804c:	2b00      	cmp	r3, #0
 800804e:	d019      	beq.n	8008084 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008056:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008058:	687a      	ldr	r2, [r7, #4]
 800805a:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800805e:	4610      	mov	r0, r2
 8008060:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008062:	e00f      	b.n	8008084 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008064:	6878      	ldr	r0, [r7, #4]
 8008066:	f000 f9e0 	bl	800842a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800806a:	e00b      	b.n	8008084 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800806c:	6878      	ldr	r0, [r7, #4]
 800806e:	f000 f9dc 	bl	800842a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008072:	e007      	b.n	8008084 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008074:	6878      	ldr	r0, [r7, #4]
 8008076:	f000 f9d8 	bl	800842a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	2200      	movs	r2, #0
 800807e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8008082:	e1bf      	b.n	8008404 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008084:	bf00      	nop
    return;
 8008086:	e1bd      	b.n	8008404 <HAL_UART_IRQHandler+0x634>
 8008088:	10000001 	.word	0x10000001
 800808c:	04000120 	.word	0x04000120
 8008090:	08009179 	.word	0x08009179

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008098:	2b01      	cmp	r3, #1
 800809a:	f040 8153 	bne.w	8008344 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800809e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80080a2:	f003 0310 	and.w	r3, r3, #16
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	f000 814c 	beq.w	8008344 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80080ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80080b0:	f003 0310 	and.w	r3, r3, #16
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	f000 8145 	beq.w	8008344 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	2210      	movs	r2, #16
 80080c0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	689b      	ldr	r3, [r3, #8]
 80080c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80080cc:	2b40      	cmp	r3, #64	@ 0x40
 80080ce:	f040 80bb 	bne.w	8008248 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	685b      	ldr	r3, [r3, #4]
 80080dc:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80080e0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	f000 818f 	beq.w	8008408 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80080f0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80080f4:	429a      	cmp	r2, r3
 80080f6:	f080 8187 	bcs.w	8008408 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008100:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	f003 0320 	and.w	r3, r3, #32
 8008112:	2b00      	cmp	r3, #0
 8008114:	f040 8087 	bne.w	8008226 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008120:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008124:	e853 3f00 	ldrex	r3, [r3]
 8008128:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800812c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008130:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008134:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	461a      	mov	r2, r3
 800813e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008142:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008146:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800814a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800814e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8008152:	e841 2300 	strex	r3, r2, [r1]
 8008156:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800815a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800815e:	2b00      	cmp	r3, #0
 8008160:	d1da      	bne.n	8008118 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	3308      	adds	r3, #8
 8008168:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800816a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800816c:	e853 3f00 	ldrex	r3, [r3]
 8008170:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8008172:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008174:	f023 0301 	bic.w	r3, r3, #1
 8008178:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	3308      	adds	r3, #8
 8008182:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8008186:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800818a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800818c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800818e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8008192:	e841 2300 	strex	r3, r2, [r1]
 8008196:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008198:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800819a:	2b00      	cmp	r3, #0
 800819c:	d1e1      	bne.n	8008162 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	3308      	adds	r3, #8
 80081a4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081a6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80081a8:	e853 3f00 	ldrex	r3, [r3]
 80081ac:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80081ae:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80081b0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80081b4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	3308      	adds	r3, #8
 80081be:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80081c2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80081c4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081c6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80081c8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80081ca:	e841 2300 	strex	r3, r2, [r1]
 80081ce:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80081d0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d1e3      	bne.n	800819e <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	2220      	movs	r2, #32
 80081da:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	2200      	movs	r2, #0
 80081e2:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081ea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80081ec:	e853 3f00 	ldrex	r3, [r3]
 80081f0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80081f2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80081f4:	f023 0310 	bic.w	r3, r3, #16
 80081f8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	461a      	mov	r2, r3
 8008202:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008206:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008208:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800820a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800820c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800820e:	e841 2300 	strex	r3, r2, [r1]
 8008212:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008214:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008216:	2b00      	cmp	r3, #0
 8008218:	d1e4      	bne.n	80081e4 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008220:	4618      	mov	r0, r3
 8008222:	f7fc f967 	bl	80044f4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	2202      	movs	r2, #2
 800822a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008238:	b29b      	uxth	r3, r3
 800823a:	1ad3      	subs	r3, r2, r3
 800823c:	b29b      	uxth	r3, r3
 800823e:	4619      	mov	r1, r3
 8008240:	6878      	ldr	r0, [r7, #4]
 8008242:	f000 f8fb 	bl	800843c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008246:	e0df      	b.n	8008408 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008254:	b29b      	uxth	r3, r3
 8008256:	1ad3      	subs	r3, r2, r3
 8008258:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008262:	b29b      	uxth	r3, r3
 8008264:	2b00      	cmp	r3, #0
 8008266:	f000 80d1 	beq.w	800840c <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 800826a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800826e:	2b00      	cmp	r3, #0
 8008270:	f000 80cc 	beq.w	800840c <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800827a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800827c:	e853 3f00 	ldrex	r3, [r3]
 8008280:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008282:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008284:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008288:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	461a      	mov	r2, r3
 8008292:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008296:	647b      	str	r3, [r7, #68]	@ 0x44
 8008298:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800829a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800829c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800829e:	e841 2300 	strex	r3, r2, [r1]
 80082a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80082a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d1e4      	bne.n	8008274 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	3308      	adds	r3, #8
 80082b0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082b4:	e853 3f00 	ldrex	r3, [r3]
 80082b8:	623b      	str	r3, [r7, #32]
   return(result);
 80082ba:	6a3b      	ldr	r3, [r7, #32]
 80082bc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80082c0:	f023 0301 	bic.w	r3, r3, #1
 80082c4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	3308      	adds	r3, #8
 80082ce:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80082d2:	633a      	str	r2, [r7, #48]	@ 0x30
 80082d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082d6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80082d8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80082da:	e841 2300 	strex	r3, r2, [r1]
 80082de:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80082e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d1e1      	bne.n	80082aa <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	2220      	movs	r2, #32
 80082ea:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	2200      	movs	r2, #0
 80082f2:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	2200      	movs	r2, #0
 80082f8:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008300:	693b      	ldr	r3, [r7, #16]
 8008302:	e853 3f00 	ldrex	r3, [r3]
 8008306:	60fb      	str	r3, [r7, #12]
   return(result);
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	f023 0310 	bic.w	r3, r3, #16
 800830e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	461a      	mov	r2, r3
 8008318:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800831c:	61fb      	str	r3, [r7, #28]
 800831e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008320:	69b9      	ldr	r1, [r7, #24]
 8008322:	69fa      	ldr	r2, [r7, #28]
 8008324:	e841 2300 	strex	r3, r2, [r1]
 8008328:	617b      	str	r3, [r7, #20]
   return(result);
 800832a:	697b      	ldr	r3, [r7, #20]
 800832c:	2b00      	cmp	r3, #0
 800832e:	d1e4      	bne.n	80082fa <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	2202      	movs	r2, #2
 8008334:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008336:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800833a:	4619      	mov	r1, r3
 800833c:	6878      	ldr	r0, [r7, #4]
 800833e:	f000 f87d 	bl	800843c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008342:	e063      	b.n	800840c <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008344:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008348:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800834c:	2b00      	cmp	r3, #0
 800834e:	d00e      	beq.n	800836e <HAL_UART_IRQHandler+0x59e>
 8008350:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008354:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008358:	2b00      	cmp	r3, #0
 800835a:	d008      	beq.n	800836e <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8008364:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008366:	6878      	ldr	r0, [r7, #4]
 8008368:	f001 fccd 	bl	8009d06 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800836c:	e051      	b.n	8008412 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800836e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008372:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008376:	2b00      	cmp	r3, #0
 8008378:	d014      	beq.n	80083a4 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800837a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800837e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008382:	2b00      	cmp	r3, #0
 8008384:	d105      	bne.n	8008392 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8008386:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800838a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800838e:	2b00      	cmp	r3, #0
 8008390:	d008      	beq.n	80083a4 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008396:	2b00      	cmp	r3, #0
 8008398:	d03a      	beq.n	8008410 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800839e:	6878      	ldr	r0, [r7, #4]
 80083a0:	4798      	blx	r3
    }
    return;
 80083a2:	e035      	b.n	8008410 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80083a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80083a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d009      	beq.n	80083c4 <HAL_UART_IRQHandler+0x5f4>
 80083b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80083b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d003      	beq.n	80083c4 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 80083bc:	6878      	ldr	r0, [r7, #4]
 80083be:	f000 fef1 	bl	80091a4 <UART_EndTransmit_IT>
    return;
 80083c2:	e026      	b.n	8008412 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80083c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80083c8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d009      	beq.n	80083e4 <HAL_UART_IRQHandler+0x614>
 80083d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80083d4:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d003      	beq.n	80083e4 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80083dc:	6878      	ldr	r0, [r7, #4]
 80083de:	f001 fca4 	bl	8009d2a <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80083e2:	e016      	b.n	8008412 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80083e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80083e8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d010      	beq.n	8008412 <HAL_UART_IRQHandler+0x642>
 80083f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	da0c      	bge.n	8008412 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80083f8:	6878      	ldr	r0, [r7, #4]
 80083fa:	f001 fc8d 	bl	8009d18 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80083fe:	e008      	b.n	8008412 <HAL_UART_IRQHandler+0x642>
      return;
 8008400:	bf00      	nop
 8008402:	e006      	b.n	8008412 <HAL_UART_IRQHandler+0x642>
    return;
 8008404:	bf00      	nop
 8008406:	e004      	b.n	8008412 <HAL_UART_IRQHandler+0x642>
      return;
 8008408:	bf00      	nop
 800840a:	e002      	b.n	8008412 <HAL_UART_IRQHandler+0x642>
      return;
 800840c:	bf00      	nop
 800840e:	e000      	b.n	8008412 <HAL_UART_IRQHandler+0x642>
    return;
 8008410:	bf00      	nop
  }
}
 8008412:	37e8      	adds	r7, #232	@ 0xe8
 8008414:	46bd      	mov	sp, r7
 8008416:	bd80      	pop	{r7, pc}

08008418 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008418:	b480      	push	{r7}
 800841a:	b083      	sub	sp, #12
 800841c:	af00      	add	r7, sp, #0
 800841e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8008420:	bf00      	nop
 8008422:	370c      	adds	r7, #12
 8008424:	46bd      	mov	sp, r7
 8008426:	bc80      	pop	{r7}
 8008428:	4770      	bx	lr

0800842a <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800842a:	b480      	push	{r7}
 800842c:	b083      	sub	sp, #12
 800842e:	af00      	add	r7, sp, #0
 8008430:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008432:	bf00      	nop
 8008434:	370c      	adds	r7, #12
 8008436:	46bd      	mov	sp, r7
 8008438:	bc80      	pop	{r7}
 800843a:	4770      	bx	lr

0800843c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800843c:	b480      	push	{r7}
 800843e:	b083      	sub	sp, #12
 8008440:	af00      	add	r7, sp, #0
 8008442:	6078      	str	r0, [r7, #4]
 8008444:	460b      	mov	r3, r1
 8008446:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008448:	bf00      	nop
 800844a:	370c      	adds	r7, #12
 800844c:	46bd      	mov	sp, r7
 800844e:	bc80      	pop	{r7}
 8008450:	4770      	bx	lr
	...

08008454 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008454:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008458:	b08c      	sub	sp, #48	@ 0x30
 800845a:	af00      	add	r7, sp, #0
 800845c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800845e:	2300      	movs	r3, #0
 8008460:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008464:	697b      	ldr	r3, [r7, #20]
 8008466:	689a      	ldr	r2, [r3, #8]
 8008468:	697b      	ldr	r3, [r7, #20]
 800846a:	691b      	ldr	r3, [r3, #16]
 800846c:	431a      	orrs	r2, r3
 800846e:	697b      	ldr	r3, [r7, #20]
 8008470:	695b      	ldr	r3, [r3, #20]
 8008472:	431a      	orrs	r2, r3
 8008474:	697b      	ldr	r3, [r7, #20]
 8008476:	69db      	ldr	r3, [r3, #28]
 8008478:	4313      	orrs	r3, r2
 800847a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800847c:	697b      	ldr	r3, [r7, #20]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	681a      	ldr	r2, [r3, #0]
 8008482:	4b94      	ldr	r3, [pc, #592]	@ (80086d4 <UART_SetConfig+0x280>)
 8008484:	4013      	ands	r3, r2
 8008486:	697a      	ldr	r2, [r7, #20]
 8008488:	6812      	ldr	r2, [r2, #0]
 800848a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800848c:	430b      	orrs	r3, r1
 800848e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008490:	697b      	ldr	r3, [r7, #20]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	685b      	ldr	r3, [r3, #4]
 8008496:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800849a:	697b      	ldr	r3, [r7, #20]
 800849c:	68da      	ldr	r2, [r3, #12]
 800849e:	697b      	ldr	r3, [r7, #20]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	430a      	orrs	r2, r1
 80084a4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80084a6:	697b      	ldr	r3, [r7, #20]
 80084a8:	699b      	ldr	r3, [r3, #24]
 80084aa:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80084ac:	697b      	ldr	r3, [r7, #20]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	4a89      	ldr	r2, [pc, #548]	@ (80086d8 <UART_SetConfig+0x284>)
 80084b2:	4293      	cmp	r3, r2
 80084b4:	d004      	beq.n	80084c0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80084b6:	697b      	ldr	r3, [r7, #20]
 80084b8:	6a1b      	ldr	r3, [r3, #32]
 80084ba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80084bc:	4313      	orrs	r3, r2
 80084be:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80084c0:	697b      	ldr	r3, [r7, #20]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	689b      	ldr	r3, [r3, #8]
 80084c6:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80084ca:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80084ce:	697a      	ldr	r2, [r7, #20]
 80084d0:	6812      	ldr	r2, [r2, #0]
 80084d2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80084d4:	430b      	orrs	r3, r1
 80084d6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80084d8:	697b      	ldr	r3, [r7, #20]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084de:	f023 010f 	bic.w	r1, r3, #15
 80084e2:	697b      	ldr	r3, [r7, #20]
 80084e4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80084e6:	697b      	ldr	r3, [r7, #20]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	430a      	orrs	r2, r1
 80084ec:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80084ee:	697b      	ldr	r3, [r7, #20]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	4a7a      	ldr	r2, [pc, #488]	@ (80086dc <UART_SetConfig+0x288>)
 80084f4:	4293      	cmp	r3, r2
 80084f6:	d127      	bne.n	8008548 <UART_SetConfig+0xf4>
 80084f8:	2003      	movs	r0, #3
 80084fa:	f7ff fb2b 	bl	8007b54 <LL_RCC_GetUSARTClockSource>
 80084fe:	4603      	mov	r3, r0
 8008500:	f5a3 3340 	sub.w	r3, r3, #196608	@ 0x30000
 8008504:	2b03      	cmp	r3, #3
 8008506:	d81b      	bhi.n	8008540 <UART_SetConfig+0xec>
 8008508:	a201      	add	r2, pc, #4	@ (adr r2, 8008510 <UART_SetConfig+0xbc>)
 800850a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800850e:	bf00      	nop
 8008510:	08008521 	.word	0x08008521
 8008514:	08008531 	.word	0x08008531
 8008518:	08008529 	.word	0x08008529
 800851c:	08008539 	.word	0x08008539
 8008520:	2301      	movs	r3, #1
 8008522:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008526:	e080      	b.n	800862a <UART_SetConfig+0x1d6>
 8008528:	2302      	movs	r3, #2
 800852a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800852e:	e07c      	b.n	800862a <UART_SetConfig+0x1d6>
 8008530:	2304      	movs	r3, #4
 8008532:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008536:	e078      	b.n	800862a <UART_SetConfig+0x1d6>
 8008538:	2308      	movs	r3, #8
 800853a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800853e:	e074      	b.n	800862a <UART_SetConfig+0x1d6>
 8008540:	2310      	movs	r3, #16
 8008542:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008546:	e070      	b.n	800862a <UART_SetConfig+0x1d6>
 8008548:	697b      	ldr	r3, [r7, #20]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	4a64      	ldr	r2, [pc, #400]	@ (80086e0 <UART_SetConfig+0x28c>)
 800854e:	4293      	cmp	r3, r2
 8008550:	d138      	bne.n	80085c4 <UART_SetConfig+0x170>
 8008552:	200c      	movs	r0, #12
 8008554:	f7ff fafe 	bl	8007b54 <LL_RCC_GetUSARTClockSource>
 8008558:	4603      	mov	r3, r0
 800855a:	f5a3 2340 	sub.w	r3, r3, #786432	@ 0xc0000
 800855e:	2b0c      	cmp	r3, #12
 8008560:	d82c      	bhi.n	80085bc <UART_SetConfig+0x168>
 8008562:	a201      	add	r2, pc, #4	@ (adr r2, 8008568 <UART_SetConfig+0x114>)
 8008564:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008568:	0800859d 	.word	0x0800859d
 800856c:	080085bd 	.word	0x080085bd
 8008570:	080085bd 	.word	0x080085bd
 8008574:	080085bd 	.word	0x080085bd
 8008578:	080085ad 	.word	0x080085ad
 800857c:	080085bd 	.word	0x080085bd
 8008580:	080085bd 	.word	0x080085bd
 8008584:	080085bd 	.word	0x080085bd
 8008588:	080085a5 	.word	0x080085a5
 800858c:	080085bd 	.word	0x080085bd
 8008590:	080085bd 	.word	0x080085bd
 8008594:	080085bd 	.word	0x080085bd
 8008598:	080085b5 	.word	0x080085b5
 800859c:	2300      	movs	r3, #0
 800859e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80085a2:	e042      	b.n	800862a <UART_SetConfig+0x1d6>
 80085a4:	2302      	movs	r3, #2
 80085a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80085aa:	e03e      	b.n	800862a <UART_SetConfig+0x1d6>
 80085ac:	2304      	movs	r3, #4
 80085ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80085b2:	e03a      	b.n	800862a <UART_SetConfig+0x1d6>
 80085b4:	2308      	movs	r3, #8
 80085b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80085ba:	e036      	b.n	800862a <UART_SetConfig+0x1d6>
 80085bc:	2310      	movs	r3, #16
 80085be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80085c2:	e032      	b.n	800862a <UART_SetConfig+0x1d6>
 80085c4:	697b      	ldr	r3, [r7, #20]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	4a43      	ldr	r2, [pc, #268]	@ (80086d8 <UART_SetConfig+0x284>)
 80085ca:	4293      	cmp	r3, r2
 80085cc:	d12a      	bne.n	8008624 <UART_SetConfig+0x1d0>
 80085ce:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 80085d2:	f7ff fad1 	bl	8007b78 <LL_RCC_GetLPUARTClockSource>
 80085d6:	4603      	mov	r3, r0
 80085d8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80085dc:	d01a      	beq.n	8008614 <UART_SetConfig+0x1c0>
 80085de:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80085e2:	d81b      	bhi.n	800861c <UART_SetConfig+0x1c8>
 80085e4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80085e8:	d00c      	beq.n	8008604 <UART_SetConfig+0x1b0>
 80085ea:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80085ee:	d815      	bhi.n	800861c <UART_SetConfig+0x1c8>
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d003      	beq.n	80085fc <UART_SetConfig+0x1a8>
 80085f4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80085f8:	d008      	beq.n	800860c <UART_SetConfig+0x1b8>
 80085fa:	e00f      	b.n	800861c <UART_SetConfig+0x1c8>
 80085fc:	2300      	movs	r3, #0
 80085fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008602:	e012      	b.n	800862a <UART_SetConfig+0x1d6>
 8008604:	2302      	movs	r3, #2
 8008606:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800860a:	e00e      	b.n	800862a <UART_SetConfig+0x1d6>
 800860c:	2304      	movs	r3, #4
 800860e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008612:	e00a      	b.n	800862a <UART_SetConfig+0x1d6>
 8008614:	2308      	movs	r3, #8
 8008616:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800861a:	e006      	b.n	800862a <UART_SetConfig+0x1d6>
 800861c:	2310      	movs	r3, #16
 800861e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008622:	e002      	b.n	800862a <UART_SetConfig+0x1d6>
 8008624:	2310      	movs	r3, #16
 8008626:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800862a:	697b      	ldr	r3, [r7, #20]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	4a2a      	ldr	r2, [pc, #168]	@ (80086d8 <UART_SetConfig+0x284>)
 8008630:	4293      	cmp	r3, r2
 8008632:	f040 80a4 	bne.w	800877e <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008636:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800863a:	2b08      	cmp	r3, #8
 800863c:	d823      	bhi.n	8008686 <UART_SetConfig+0x232>
 800863e:	a201      	add	r2, pc, #4	@ (adr r2, 8008644 <UART_SetConfig+0x1f0>)
 8008640:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008644:	08008669 	.word	0x08008669
 8008648:	08008687 	.word	0x08008687
 800864c:	08008671 	.word	0x08008671
 8008650:	08008687 	.word	0x08008687
 8008654:	08008677 	.word	0x08008677
 8008658:	08008687 	.word	0x08008687
 800865c:	08008687 	.word	0x08008687
 8008660:	08008687 	.word	0x08008687
 8008664:	0800867f 	.word	0x0800867f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008668:	f7fd fe78 	bl	800635c <HAL_RCC_GetPCLK1Freq>
 800866c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800866e:	e010      	b.n	8008692 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008670:	4b1c      	ldr	r3, [pc, #112]	@ (80086e4 <UART_SetConfig+0x290>)
 8008672:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008674:	e00d      	b.n	8008692 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008676:	f7fd fdbd 	bl	80061f4 <HAL_RCC_GetSysClockFreq>
 800867a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800867c:	e009      	b.n	8008692 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800867e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008682:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008684:	e005      	b.n	8008692 <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 8008686:	2300      	movs	r3, #0
 8008688:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800868a:	2301      	movs	r3, #1
 800868c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008690:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008692:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008694:	2b00      	cmp	r3, #0
 8008696:	f000 8137 	beq.w	8008908 <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800869a:	697b      	ldr	r3, [r7, #20]
 800869c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800869e:	4a12      	ldr	r2, [pc, #72]	@ (80086e8 <UART_SetConfig+0x294>)
 80086a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80086a4:	461a      	mov	r2, r3
 80086a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086a8:	fbb3 f3f2 	udiv	r3, r3, r2
 80086ac:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80086ae:	697b      	ldr	r3, [r7, #20]
 80086b0:	685a      	ldr	r2, [r3, #4]
 80086b2:	4613      	mov	r3, r2
 80086b4:	005b      	lsls	r3, r3, #1
 80086b6:	4413      	add	r3, r2
 80086b8:	69ba      	ldr	r2, [r7, #24]
 80086ba:	429a      	cmp	r2, r3
 80086bc:	d305      	bcc.n	80086ca <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80086be:	697b      	ldr	r3, [r7, #20]
 80086c0:	685b      	ldr	r3, [r3, #4]
 80086c2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80086c4:	69ba      	ldr	r2, [r7, #24]
 80086c6:	429a      	cmp	r2, r3
 80086c8:	d910      	bls.n	80086ec <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 80086ca:	2301      	movs	r3, #1
 80086cc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80086d0:	e11a      	b.n	8008908 <UART_SetConfig+0x4b4>
 80086d2:	bf00      	nop
 80086d4:	cfff69f3 	.word	0xcfff69f3
 80086d8:	40008000 	.word	0x40008000
 80086dc:	40013800 	.word	0x40013800
 80086e0:	40004400 	.word	0x40004400
 80086e4:	00f42400 	.word	0x00f42400
 80086e8:	0801b904 	.word	0x0801b904
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80086ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086ee:	2200      	movs	r2, #0
 80086f0:	60bb      	str	r3, [r7, #8]
 80086f2:	60fa      	str	r2, [r7, #12]
 80086f4:	697b      	ldr	r3, [r7, #20]
 80086f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80086f8:	4a8e      	ldr	r2, [pc, #568]	@ (8008934 <UART_SetConfig+0x4e0>)
 80086fa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80086fe:	b29b      	uxth	r3, r3
 8008700:	2200      	movs	r2, #0
 8008702:	603b      	str	r3, [r7, #0]
 8008704:	607a      	str	r2, [r7, #4]
 8008706:	e9d7 2300 	ldrd	r2, r3, [r7]
 800870a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800870e:	f7f8 f8db 	bl	80008c8 <__aeabi_uldivmod>
 8008712:	4602      	mov	r2, r0
 8008714:	460b      	mov	r3, r1
 8008716:	4610      	mov	r0, r2
 8008718:	4619      	mov	r1, r3
 800871a:	f04f 0200 	mov.w	r2, #0
 800871e:	f04f 0300 	mov.w	r3, #0
 8008722:	020b      	lsls	r3, r1, #8
 8008724:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008728:	0202      	lsls	r2, r0, #8
 800872a:	6979      	ldr	r1, [r7, #20]
 800872c:	6849      	ldr	r1, [r1, #4]
 800872e:	0849      	lsrs	r1, r1, #1
 8008730:	2000      	movs	r0, #0
 8008732:	460c      	mov	r4, r1
 8008734:	4605      	mov	r5, r0
 8008736:	eb12 0804 	adds.w	r8, r2, r4
 800873a:	eb43 0905 	adc.w	r9, r3, r5
 800873e:	697b      	ldr	r3, [r7, #20]
 8008740:	685b      	ldr	r3, [r3, #4]
 8008742:	2200      	movs	r2, #0
 8008744:	469a      	mov	sl, r3
 8008746:	4693      	mov	fp, r2
 8008748:	4652      	mov	r2, sl
 800874a:	465b      	mov	r3, fp
 800874c:	4640      	mov	r0, r8
 800874e:	4649      	mov	r1, r9
 8008750:	f7f8 f8ba 	bl	80008c8 <__aeabi_uldivmod>
 8008754:	4602      	mov	r2, r0
 8008756:	460b      	mov	r3, r1
 8008758:	4613      	mov	r3, r2
 800875a:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800875c:	6a3b      	ldr	r3, [r7, #32]
 800875e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008762:	d308      	bcc.n	8008776 <UART_SetConfig+0x322>
 8008764:	6a3b      	ldr	r3, [r7, #32]
 8008766:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800876a:	d204      	bcs.n	8008776 <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 800876c:	697b      	ldr	r3, [r7, #20]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	6a3a      	ldr	r2, [r7, #32]
 8008772:	60da      	str	r2, [r3, #12]
 8008774:	e0c8      	b.n	8008908 <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 8008776:	2301      	movs	r3, #1
 8008778:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800877c:	e0c4      	b.n	8008908 <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800877e:	697b      	ldr	r3, [r7, #20]
 8008780:	69db      	ldr	r3, [r3, #28]
 8008782:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008786:	d167      	bne.n	8008858 <UART_SetConfig+0x404>
  {
    switch (clocksource)
 8008788:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800878c:	2b08      	cmp	r3, #8
 800878e:	d828      	bhi.n	80087e2 <UART_SetConfig+0x38e>
 8008790:	a201      	add	r2, pc, #4	@ (adr r2, 8008798 <UART_SetConfig+0x344>)
 8008792:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008796:	bf00      	nop
 8008798:	080087bd 	.word	0x080087bd
 800879c:	080087c5 	.word	0x080087c5
 80087a0:	080087cd 	.word	0x080087cd
 80087a4:	080087e3 	.word	0x080087e3
 80087a8:	080087d3 	.word	0x080087d3
 80087ac:	080087e3 	.word	0x080087e3
 80087b0:	080087e3 	.word	0x080087e3
 80087b4:	080087e3 	.word	0x080087e3
 80087b8:	080087db 	.word	0x080087db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80087bc:	f7fd fdce 	bl	800635c <HAL_RCC_GetPCLK1Freq>
 80087c0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80087c2:	e014      	b.n	80087ee <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80087c4:	f7fd fddc 	bl	8006380 <HAL_RCC_GetPCLK2Freq>
 80087c8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80087ca:	e010      	b.n	80087ee <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80087cc:	4b5a      	ldr	r3, [pc, #360]	@ (8008938 <UART_SetConfig+0x4e4>)
 80087ce:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80087d0:	e00d      	b.n	80087ee <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80087d2:	f7fd fd0f 	bl	80061f4 <HAL_RCC_GetSysClockFreq>
 80087d6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80087d8:	e009      	b.n	80087ee <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80087da:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80087de:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80087e0:	e005      	b.n	80087ee <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 80087e2:	2300      	movs	r3, #0
 80087e4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80087e6:	2301      	movs	r3, #1
 80087e8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80087ec:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80087ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	f000 8089 	beq.w	8008908 <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80087f6:	697b      	ldr	r3, [r7, #20]
 80087f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087fa:	4a4e      	ldr	r2, [pc, #312]	@ (8008934 <UART_SetConfig+0x4e0>)
 80087fc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008800:	461a      	mov	r2, r3
 8008802:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008804:	fbb3 f3f2 	udiv	r3, r3, r2
 8008808:	005a      	lsls	r2, r3, #1
 800880a:	697b      	ldr	r3, [r7, #20]
 800880c:	685b      	ldr	r3, [r3, #4]
 800880e:	085b      	lsrs	r3, r3, #1
 8008810:	441a      	add	r2, r3
 8008812:	697b      	ldr	r3, [r7, #20]
 8008814:	685b      	ldr	r3, [r3, #4]
 8008816:	fbb2 f3f3 	udiv	r3, r2, r3
 800881a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800881c:	6a3b      	ldr	r3, [r7, #32]
 800881e:	2b0f      	cmp	r3, #15
 8008820:	d916      	bls.n	8008850 <UART_SetConfig+0x3fc>
 8008822:	6a3b      	ldr	r3, [r7, #32]
 8008824:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008828:	d212      	bcs.n	8008850 <UART_SetConfig+0x3fc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800882a:	6a3b      	ldr	r3, [r7, #32]
 800882c:	b29b      	uxth	r3, r3
 800882e:	f023 030f 	bic.w	r3, r3, #15
 8008832:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008834:	6a3b      	ldr	r3, [r7, #32]
 8008836:	085b      	lsrs	r3, r3, #1
 8008838:	b29b      	uxth	r3, r3
 800883a:	f003 0307 	and.w	r3, r3, #7
 800883e:	b29a      	uxth	r2, r3
 8008840:	8bfb      	ldrh	r3, [r7, #30]
 8008842:	4313      	orrs	r3, r2
 8008844:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8008846:	697b      	ldr	r3, [r7, #20]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	8bfa      	ldrh	r2, [r7, #30]
 800884c:	60da      	str	r2, [r3, #12]
 800884e:	e05b      	b.n	8008908 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8008850:	2301      	movs	r3, #1
 8008852:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008856:	e057      	b.n	8008908 <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008858:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800885c:	2b08      	cmp	r3, #8
 800885e:	d828      	bhi.n	80088b2 <UART_SetConfig+0x45e>
 8008860:	a201      	add	r2, pc, #4	@ (adr r2, 8008868 <UART_SetConfig+0x414>)
 8008862:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008866:	bf00      	nop
 8008868:	0800888d 	.word	0x0800888d
 800886c:	08008895 	.word	0x08008895
 8008870:	0800889d 	.word	0x0800889d
 8008874:	080088b3 	.word	0x080088b3
 8008878:	080088a3 	.word	0x080088a3
 800887c:	080088b3 	.word	0x080088b3
 8008880:	080088b3 	.word	0x080088b3
 8008884:	080088b3 	.word	0x080088b3
 8008888:	080088ab 	.word	0x080088ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800888c:	f7fd fd66 	bl	800635c <HAL_RCC_GetPCLK1Freq>
 8008890:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008892:	e014      	b.n	80088be <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008894:	f7fd fd74 	bl	8006380 <HAL_RCC_GetPCLK2Freq>
 8008898:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800889a:	e010      	b.n	80088be <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800889c:	4b26      	ldr	r3, [pc, #152]	@ (8008938 <UART_SetConfig+0x4e4>)
 800889e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80088a0:	e00d      	b.n	80088be <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80088a2:	f7fd fca7 	bl	80061f4 <HAL_RCC_GetSysClockFreq>
 80088a6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80088a8:	e009      	b.n	80088be <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80088aa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80088ae:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80088b0:	e005      	b.n	80088be <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 80088b2:	2300      	movs	r3, #0
 80088b4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80088b6:	2301      	movs	r3, #1
 80088b8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80088bc:	bf00      	nop
    }

    if (pclk != 0U)
 80088be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d021      	beq.n	8008908 <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80088c4:	697b      	ldr	r3, [r7, #20]
 80088c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80088c8:	4a1a      	ldr	r2, [pc, #104]	@ (8008934 <UART_SetConfig+0x4e0>)
 80088ca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80088ce:	461a      	mov	r2, r3
 80088d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088d2:	fbb3 f2f2 	udiv	r2, r3, r2
 80088d6:	697b      	ldr	r3, [r7, #20]
 80088d8:	685b      	ldr	r3, [r3, #4]
 80088da:	085b      	lsrs	r3, r3, #1
 80088dc:	441a      	add	r2, r3
 80088de:	697b      	ldr	r3, [r7, #20]
 80088e0:	685b      	ldr	r3, [r3, #4]
 80088e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80088e6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80088e8:	6a3b      	ldr	r3, [r7, #32]
 80088ea:	2b0f      	cmp	r3, #15
 80088ec:	d909      	bls.n	8008902 <UART_SetConfig+0x4ae>
 80088ee:	6a3b      	ldr	r3, [r7, #32]
 80088f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80088f4:	d205      	bcs.n	8008902 <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80088f6:	6a3b      	ldr	r3, [r7, #32]
 80088f8:	b29a      	uxth	r2, r3
 80088fa:	697b      	ldr	r3, [r7, #20]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	60da      	str	r2, [r3, #12]
 8008900:	e002      	b.n	8008908 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8008902:	2301      	movs	r3, #1
 8008904:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008908:	697b      	ldr	r3, [r7, #20]
 800890a:	2201      	movs	r2, #1
 800890c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8008910:	697b      	ldr	r3, [r7, #20]
 8008912:	2201      	movs	r2, #1
 8008914:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008918:	697b      	ldr	r3, [r7, #20]
 800891a:	2200      	movs	r2, #0
 800891c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800891e:	697b      	ldr	r3, [r7, #20]
 8008920:	2200      	movs	r2, #0
 8008922:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8008924:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8008928:	4618      	mov	r0, r3
 800892a:	3730      	adds	r7, #48	@ 0x30
 800892c:	46bd      	mov	sp, r7
 800892e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008932:	bf00      	nop
 8008934:	0801b904 	.word	0x0801b904
 8008938:	00f42400 	.word	0x00f42400

0800893c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800893c:	b480      	push	{r7}
 800893e:	b083      	sub	sp, #12
 8008940:	af00      	add	r7, sp, #0
 8008942:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008948:	f003 0308 	and.w	r3, r3, #8
 800894c:	2b00      	cmp	r3, #0
 800894e:	d00a      	beq.n	8008966 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	685b      	ldr	r3, [r3, #4]
 8008956:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	430a      	orrs	r2, r1
 8008964:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800896a:	f003 0301 	and.w	r3, r3, #1
 800896e:	2b00      	cmp	r3, #0
 8008970:	d00a      	beq.n	8008988 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	685b      	ldr	r3, [r3, #4]
 8008978:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	430a      	orrs	r2, r1
 8008986:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800898c:	f003 0302 	and.w	r3, r3, #2
 8008990:	2b00      	cmp	r3, #0
 8008992:	d00a      	beq.n	80089aa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	685b      	ldr	r3, [r3, #4]
 800899a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	430a      	orrs	r2, r1
 80089a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80089ae:	f003 0304 	and.w	r3, r3, #4
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d00a      	beq.n	80089cc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	685b      	ldr	r3, [r3, #4]
 80089bc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	430a      	orrs	r2, r1
 80089ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80089d0:	f003 0310 	and.w	r3, r3, #16
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d00a      	beq.n	80089ee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	689b      	ldr	r3, [r3, #8]
 80089de:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	430a      	orrs	r2, r1
 80089ec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80089f2:	f003 0320 	and.w	r3, r3, #32
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d00a      	beq.n	8008a10 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	689b      	ldr	r3, [r3, #8]
 8008a00:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	430a      	orrs	r2, r1
 8008a0e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d01a      	beq.n	8008a52 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	685b      	ldr	r3, [r3, #4]
 8008a22:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	430a      	orrs	r2, r1
 8008a30:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008a36:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008a3a:	d10a      	bne.n	8008a52 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	685b      	ldr	r3, [r3, #4]
 8008a42:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	430a      	orrs	r2, r1
 8008a50:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a56:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d00a      	beq.n	8008a74 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	685b      	ldr	r3, [r3, #4]
 8008a64:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	430a      	orrs	r2, r1
 8008a72:	605a      	str	r2, [r3, #4]
  }
}
 8008a74:	bf00      	nop
 8008a76:	370c      	adds	r7, #12
 8008a78:	46bd      	mov	sp, r7
 8008a7a:	bc80      	pop	{r7}
 8008a7c:	4770      	bx	lr

08008a7e <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008a7e:	b580      	push	{r7, lr}
 8008a80:	b086      	sub	sp, #24
 8008a82:	af02      	add	r7, sp, #8
 8008a84:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	2200      	movs	r2, #0
 8008a8a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008a8e:	f7f9 f8c1 	bl	8001c14 <HAL_GetTick>
 8008a92:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	f003 0308 	and.w	r3, r3, #8
 8008a9e:	2b08      	cmp	r3, #8
 8008aa0:	d10e      	bne.n	8008ac0 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008aa2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008aa6:	9300      	str	r3, [sp, #0]
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	2200      	movs	r2, #0
 8008aac:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8008ab0:	6878      	ldr	r0, [r7, #4]
 8008ab2:	f000 f832 	bl	8008b1a <UART_WaitOnFlagUntilTimeout>
 8008ab6:	4603      	mov	r3, r0
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d001      	beq.n	8008ac0 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008abc:	2303      	movs	r3, #3
 8008abe:	e028      	b.n	8008b12 <UART_CheckIdleState+0x94>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	f003 0304 	and.w	r3, r3, #4
 8008aca:	2b04      	cmp	r3, #4
 8008acc:	d10e      	bne.n	8008aec <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008ace:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008ad2:	9300      	str	r3, [sp, #0]
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	2200      	movs	r2, #0
 8008ad8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008adc:	6878      	ldr	r0, [r7, #4]
 8008ade:	f000 f81c 	bl	8008b1a <UART_WaitOnFlagUntilTimeout>
 8008ae2:	4603      	mov	r3, r0
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d001      	beq.n	8008aec <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008ae8:	2303      	movs	r3, #3
 8008aea:	e012      	b.n	8008b12 <UART_CheckIdleState+0x94>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	2220      	movs	r2, #32
 8008af0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	2220      	movs	r2, #32
 8008af8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	2200      	movs	r2, #0
 8008b00:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	2200      	movs	r2, #0
 8008b06:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	2200      	movs	r2, #0
 8008b0c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008b10:	2300      	movs	r3, #0
}
 8008b12:	4618      	mov	r0, r3
 8008b14:	3710      	adds	r7, #16
 8008b16:	46bd      	mov	sp, r7
 8008b18:	bd80      	pop	{r7, pc}

08008b1a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008b1a:	b580      	push	{r7, lr}
 8008b1c:	b09c      	sub	sp, #112	@ 0x70
 8008b1e:	af00      	add	r7, sp, #0
 8008b20:	60f8      	str	r0, [r7, #12]
 8008b22:	60b9      	str	r1, [r7, #8]
 8008b24:	603b      	str	r3, [r7, #0]
 8008b26:	4613      	mov	r3, r2
 8008b28:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008b2a:	e0af      	b.n	8008c8c <UART_WaitOnFlagUntilTimeout+0x172>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008b2c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008b2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b32:	f000 80ab 	beq.w	8008c8c <UART_WaitOnFlagUntilTimeout+0x172>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008b36:	f7f9 f86d 	bl	8001c14 <HAL_GetTick>
 8008b3a:	4602      	mov	r2, r0
 8008b3c:	683b      	ldr	r3, [r7, #0]
 8008b3e:	1ad3      	subs	r3, r2, r3
 8008b40:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8008b42:	429a      	cmp	r2, r3
 8008b44:	d302      	bcc.n	8008b4c <UART_WaitOnFlagUntilTimeout+0x32>
 8008b46:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d140      	bne.n	8008bce <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b52:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008b54:	e853 3f00 	ldrex	r3, [r3]
 8008b58:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8008b5a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008b5c:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8008b60:	667b      	str	r3, [r7, #100]	@ 0x64
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	461a      	mov	r2, r3
 8008b68:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008b6a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008b6c:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b6e:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8008b70:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8008b72:	e841 2300 	strex	r3, r2, [r1]
 8008b76:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8008b78:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d1e6      	bne.n	8008b4c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	3308      	adds	r3, #8
 8008b84:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b86:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008b88:	e853 3f00 	ldrex	r3, [r3]
 8008b8c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008b8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b90:	f023 0301 	bic.w	r3, r3, #1
 8008b94:	663b      	str	r3, [r7, #96]	@ 0x60
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	3308      	adds	r3, #8
 8008b9c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8008b9e:	64ba      	str	r2, [r7, #72]	@ 0x48
 8008ba0:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ba2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008ba4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008ba6:	e841 2300 	strex	r3, r2, [r1]
 8008baa:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8008bac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d1e5      	bne.n	8008b7e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	2220      	movs	r2, #32
 8008bb6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        huart->RxState = HAL_UART_STATE_READY;
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	2220      	movs	r2, #32
 8008bbe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        __HAL_UNLOCK(huart);
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	2200      	movs	r2, #0
 8008bc6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

        return HAL_TIMEOUT;
 8008bca:	2303      	movs	r3, #3
 8008bcc:	e06f      	b.n	8008cae <UART_WaitOnFlagUntilTimeout+0x194>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	f003 0304 	and.w	r3, r3, #4
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d057      	beq.n	8008c8c <UART_WaitOnFlagUntilTimeout+0x172>
 8008bdc:	68bb      	ldr	r3, [r7, #8]
 8008bde:	2b80      	cmp	r3, #128	@ 0x80
 8008be0:	d054      	beq.n	8008c8c <UART_WaitOnFlagUntilTimeout+0x172>
 8008be2:	68bb      	ldr	r3, [r7, #8]
 8008be4:	2b40      	cmp	r3, #64	@ 0x40
 8008be6:	d051      	beq.n	8008c8c <UART_WaitOnFlagUntilTimeout+0x172>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	69db      	ldr	r3, [r3, #28]
 8008bee:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008bf2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008bf6:	d149      	bne.n	8008c8c <UART_WaitOnFlagUntilTimeout+0x172>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008c00:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c0a:	e853 3f00 	ldrex	r3, [r3]
 8008c0e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008c10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c12:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8008c16:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	461a      	mov	r2, r3
 8008c1e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008c20:	637b      	str	r3, [r7, #52]	@ 0x34
 8008c22:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c24:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008c26:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008c28:	e841 2300 	strex	r3, r2, [r1]
 8008c2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8008c2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d1e6      	bne.n	8008c02 <UART_WaitOnFlagUntilTimeout+0xe8>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	3308      	adds	r3, #8
 8008c3a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c3c:	697b      	ldr	r3, [r7, #20]
 8008c3e:	e853 3f00 	ldrex	r3, [r3]
 8008c42:	613b      	str	r3, [r7, #16]
   return(result);
 8008c44:	693b      	ldr	r3, [r7, #16]
 8008c46:	f023 0301 	bic.w	r3, r3, #1
 8008c4a:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	3308      	adds	r3, #8
 8008c52:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8008c54:	623a      	str	r2, [r7, #32]
 8008c56:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c58:	69f9      	ldr	r1, [r7, #28]
 8008c5a:	6a3a      	ldr	r2, [r7, #32]
 8008c5c:	e841 2300 	strex	r3, r2, [r1]
 8008c60:	61bb      	str	r3, [r7, #24]
   return(result);
 8008c62:	69bb      	ldr	r3, [r7, #24]
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d1e5      	bne.n	8008c34 <UART_WaitOnFlagUntilTimeout+0x11a>

          huart->gState = HAL_UART_STATE_READY;
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	2220      	movs	r2, #32
 8008c6c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          huart->RxState = HAL_UART_STATE_READY;
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	2220      	movs	r2, #32
 8008c74:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	2220      	movs	r2, #32
 8008c7c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	2200      	movs	r2, #0
 8008c84:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8008c88:	2303      	movs	r3, #3
 8008c8a:	e010      	b.n	8008cae <UART_WaitOnFlagUntilTimeout+0x194>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	69da      	ldr	r2, [r3, #28]
 8008c92:	68bb      	ldr	r3, [r7, #8]
 8008c94:	4013      	ands	r3, r2
 8008c96:	68ba      	ldr	r2, [r7, #8]
 8008c98:	429a      	cmp	r2, r3
 8008c9a:	bf0c      	ite	eq
 8008c9c:	2301      	moveq	r3, #1
 8008c9e:	2300      	movne	r3, #0
 8008ca0:	b2db      	uxtb	r3, r3
 8008ca2:	461a      	mov	r2, r3
 8008ca4:	79fb      	ldrb	r3, [r7, #7]
 8008ca6:	429a      	cmp	r2, r3
 8008ca8:	f43f af40 	beq.w	8008b2c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008cac:	2300      	movs	r3, #0
}
 8008cae:	4618      	mov	r0, r3
 8008cb0:	3770      	adds	r7, #112	@ 0x70
 8008cb2:	46bd      	mov	sp, r7
 8008cb4:	bd80      	pop	{r7, pc}
	...

08008cb8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008cb8:	b480      	push	{r7}
 8008cba:	b0a3      	sub	sp, #140	@ 0x8c
 8008cbc:	af00      	add	r7, sp, #0
 8008cbe:	60f8      	str	r0, [r7, #12]
 8008cc0:	60b9      	str	r1, [r7, #8]
 8008cc2:	4613      	mov	r3, r2
 8008cc4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	68ba      	ldr	r2, [r7, #8]
 8008cca:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	88fa      	ldrh	r2, [r7, #6]
 8008cd0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	88fa      	ldrh	r2, [r7, #6]
 8008cd8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	2200      	movs	r2, #0
 8008ce0:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	689b      	ldr	r3, [r3, #8]
 8008ce6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008cea:	d10e      	bne.n	8008d0a <UART_Start_Receive_IT+0x52>
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	691b      	ldr	r3, [r3, #16]
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d105      	bne.n	8008d00 <UART_Start_Receive_IT+0x48>
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8008cfa:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008cfe:	e02d      	b.n	8008d5c <UART_Start_Receive_IT+0xa4>
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	22ff      	movs	r2, #255	@ 0xff
 8008d04:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008d08:	e028      	b.n	8008d5c <UART_Start_Receive_IT+0xa4>
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	689b      	ldr	r3, [r3, #8]
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d10d      	bne.n	8008d2e <UART_Start_Receive_IT+0x76>
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	691b      	ldr	r3, [r3, #16]
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d104      	bne.n	8008d24 <UART_Start_Receive_IT+0x6c>
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	22ff      	movs	r2, #255	@ 0xff
 8008d1e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008d22:	e01b      	b.n	8008d5c <UART_Start_Receive_IT+0xa4>
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	227f      	movs	r2, #127	@ 0x7f
 8008d28:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008d2c:	e016      	b.n	8008d5c <UART_Start_Receive_IT+0xa4>
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	689b      	ldr	r3, [r3, #8]
 8008d32:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008d36:	d10d      	bne.n	8008d54 <UART_Start_Receive_IT+0x9c>
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	691b      	ldr	r3, [r3, #16]
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d104      	bne.n	8008d4a <UART_Start_Receive_IT+0x92>
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	227f      	movs	r2, #127	@ 0x7f
 8008d44:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008d48:	e008      	b.n	8008d5c <UART_Start_Receive_IT+0xa4>
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	223f      	movs	r2, #63	@ 0x3f
 8008d4e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008d52:	e003      	b.n	8008d5c <UART_Start_Receive_IT+0xa4>
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	2200      	movs	r2, #0
 8008d58:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	2200      	movs	r2, #0
 8008d60:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	2222      	movs	r2, #34	@ 0x22
 8008d68:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	3308      	adds	r3, #8
 8008d72:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d74:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008d76:	e853 3f00 	ldrex	r3, [r3]
 8008d7a:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8008d7c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008d7e:	f043 0301 	orr.w	r3, r3, #1
 8008d82:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	3308      	adds	r3, #8
 8008d8c:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8008d90:	673a      	str	r2, [r7, #112]	@ 0x70
 8008d92:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d94:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8008d96:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8008d98:	e841 2300 	strex	r3, r2, [r1]
 8008d9c:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 8008d9e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d1e3      	bne.n	8008d6c <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008da8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008dac:	d14f      	bne.n	8008e4e <UART_Start_Receive_IT+0x196>
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8008db4:	88fa      	ldrh	r2, [r7, #6]
 8008db6:	429a      	cmp	r2, r3
 8008db8:	d349      	bcc.n	8008e4e <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	689b      	ldr	r3, [r3, #8]
 8008dbe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008dc2:	d107      	bne.n	8008dd4 <UART_Start_Receive_IT+0x11c>
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	691b      	ldr	r3, [r3, #16]
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d103      	bne.n	8008dd4 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	4a46      	ldr	r2, [pc, #280]	@ (8008ee8 <UART_Start_Receive_IT+0x230>)
 8008dd0:	675a      	str	r2, [r3, #116]	@ 0x74
 8008dd2:	e002      	b.n	8008dda <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	4a45      	ldr	r2, [pc, #276]	@ (8008eec <UART_Start_Receive_IT+0x234>)
 8008dd8:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	691b      	ldr	r3, [r3, #16]
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d01a      	beq.n	8008e18 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008de8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008dea:	e853 3f00 	ldrex	r3, [r3]
 8008dee:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8008df0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008df2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008df6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	461a      	mov	r2, r3
 8008e00:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8008e04:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008e06:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e08:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8008e0a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8008e0c:	e841 2300 	strex	r3, r2, [r1]
 8008e10:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8008e12:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d1e4      	bne.n	8008de2 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	3308      	adds	r3, #8
 8008e1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e20:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008e22:	e853 3f00 	ldrex	r3, [r3]
 8008e26:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008e28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e2a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008e2e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	3308      	adds	r3, #8
 8008e36:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8008e38:	64ba      	str	r2, [r7, #72]	@ 0x48
 8008e3a:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e3c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008e3e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008e40:	e841 2300 	strex	r3, r2, [r1]
 8008e44:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8008e46:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d1e5      	bne.n	8008e18 <UART_Start_Receive_IT+0x160>
 8008e4c:	e046      	b.n	8008edc <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	689b      	ldr	r3, [r3, #8]
 8008e52:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008e56:	d107      	bne.n	8008e68 <UART_Start_Receive_IT+0x1b0>
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	691b      	ldr	r3, [r3, #16]
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d103      	bne.n	8008e68 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	4a23      	ldr	r2, [pc, #140]	@ (8008ef0 <UART_Start_Receive_IT+0x238>)
 8008e64:	675a      	str	r2, [r3, #116]	@ 0x74
 8008e66:	e002      	b.n	8008e6e <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	4a22      	ldr	r2, [pc, #136]	@ (8008ef4 <UART_Start_Receive_IT+0x23c>)
 8008e6c:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	691b      	ldr	r3, [r3, #16]
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d019      	beq.n	8008eaa <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e7e:	e853 3f00 	ldrex	r3, [r3]
 8008e82:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008e84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e86:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8008e8a:	677b      	str	r3, [r7, #116]	@ 0x74
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	461a      	mov	r2, r3
 8008e92:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008e94:	637b      	str	r3, [r7, #52]	@ 0x34
 8008e96:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e98:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008e9a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008e9c:	e841 2300 	strex	r3, r2, [r1]
 8008ea0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8008ea2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d1e6      	bne.n	8008e76 <UART_Start_Receive_IT+0x1be>
 8008ea8:	e018      	b.n	8008edc <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008eb0:	697b      	ldr	r3, [r7, #20]
 8008eb2:	e853 3f00 	ldrex	r3, [r3]
 8008eb6:	613b      	str	r3, [r7, #16]
   return(result);
 8008eb8:	693b      	ldr	r3, [r7, #16]
 8008eba:	f043 0320 	orr.w	r3, r3, #32
 8008ebe:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	461a      	mov	r2, r3
 8008ec6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008ec8:	623b      	str	r3, [r7, #32]
 8008eca:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ecc:	69f9      	ldr	r1, [r7, #28]
 8008ece:	6a3a      	ldr	r2, [r7, #32]
 8008ed0:	e841 2300 	strex	r3, r2, [r1]
 8008ed4:	61bb      	str	r3, [r7, #24]
   return(result);
 8008ed6:	69bb      	ldr	r3, [r7, #24]
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d1e6      	bne.n	8008eaa <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8008edc:	2300      	movs	r3, #0
}
 8008ede:	4618      	mov	r0, r3
 8008ee0:	378c      	adds	r7, #140	@ 0x8c
 8008ee2:	46bd      	mov	sp, r7
 8008ee4:	bc80      	pop	{r7}
 8008ee6:	4770      	bx	lr
 8008ee8:	080098cd 	.word	0x080098cd
 8008eec:	0800956d 	.word	0x0800956d
 8008ef0:	080093b5 	.word	0x080093b5
 8008ef4:	080091fd 	.word	0x080091fd

08008ef8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008ef8:	b480      	push	{r7}
 8008efa:	b08f      	sub	sp, #60	@ 0x3c
 8008efc:	af00      	add	r7, sp, #0
 8008efe:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f06:	6a3b      	ldr	r3, [r7, #32]
 8008f08:	e853 3f00 	ldrex	r3, [r3]
 8008f0c:	61fb      	str	r3, [r7, #28]
   return(result);
 8008f0e:	69fb      	ldr	r3, [r7, #28]
 8008f10:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8008f14:	637b      	str	r3, [r7, #52]	@ 0x34
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	461a      	mov	r2, r3
 8008f1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008f1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008f20:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f22:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008f24:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008f26:	e841 2300 	strex	r3, r2, [r1]
 8008f2a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008f2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d1e6      	bne.n	8008f00 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	3308      	adds	r3, #8
 8008f38:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	e853 3f00 	ldrex	r3, [r3]
 8008f40:	60bb      	str	r3, [r7, #8]
   return(result);
 8008f42:	68bb      	ldr	r3, [r7, #8]
 8008f44:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8008f48:	633b      	str	r3, [r7, #48]	@ 0x30
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	3308      	adds	r3, #8
 8008f50:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008f52:	61ba      	str	r2, [r7, #24]
 8008f54:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f56:	6979      	ldr	r1, [r7, #20]
 8008f58:	69ba      	ldr	r2, [r7, #24]
 8008f5a:	e841 2300 	strex	r3, r2, [r1]
 8008f5e:	613b      	str	r3, [r7, #16]
   return(result);
 8008f60:	693b      	ldr	r3, [r7, #16]
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d1e5      	bne.n	8008f32 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	2220      	movs	r2, #32
 8008f6a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8008f6e:	bf00      	nop
 8008f70:	373c      	adds	r7, #60	@ 0x3c
 8008f72:	46bd      	mov	sp, r7
 8008f74:	bc80      	pop	{r7}
 8008f76:	4770      	bx	lr

08008f78 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008f78:	b480      	push	{r7}
 8008f7a:	b095      	sub	sp, #84	@ 0x54
 8008f7c:	af00      	add	r7, sp, #0
 8008f7e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008f88:	e853 3f00 	ldrex	r3, [r3]
 8008f8c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008f8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f90:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008f94:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	461a      	mov	r2, r3
 8008f9c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008f9e:	643b      	str	r3, [r7, #64]	@ 0x40
 8008fa0:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fa2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008fa4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008fa6:	e841 2300 	strex	r3, r2, [r1]
 8008faa:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008fac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d1e6      	bne.n	8008f80 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	3308      	adds	r3, #8
 8008fb8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fba:	6a3b      	ldr	r3, [r7, #32]
 8008fbc:	e853 3f00 	ldrex	r3, [r3]
 8008fc0:	61fb      	str	r3, [r7, #28]
   return(result);
 8008fc2:	69fb      	ldr	r3, [r7, #28]
 8008fc4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008fc8:	f023 0301 	bic.w	r3, r3, #1
 8008fcc:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	3308      	adds	r3, #8
 8008fd4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008fd6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008fd8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fda:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008fdc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008fde:	e841 2300 	strex	r3, r2, [r1]
 8008fe2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008fe4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d1e3      	bne.n	8008fb2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008fee:	2b01      	cmp	r3, #1
 8008ff0:	d118      	bne.n	8009024 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	e853 3f00 	ldrex	r3, [r3]
 8008ffe:	60bb      	str	r3, [r7, #8]
   return(result);
 8009000:	68bb      	ldr	r3, [r7, #8]
 8009002:	f023 0310 	bic.w	r3, r3, #16
 8009006:	647b      	str	r3, [r7, #68]	@ 0x44
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	461a      	mov	r2, r3
 800900e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009010:	61bb      	str	r3, [r7, #24]
 8009012:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009014:	6979      	ldr	r1, [r7, #20]
 8009016:	69ba      	ldr	r2, [r7, #24]
 8009018:	e841 2300 	strex	r3, r2, [r1]
 800901c:	613b      	str	r3, [r7, #16]
   return(result);
 800901e:	693b      	ldr	r3, [r7, #16]
 8009020:	2b00      	cmp	r3, #0
 8009022:	d1e6      	bne.n	8008ff2 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	2220      	movs	r2, #32
 8009028:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	2200      	movs	r2, #0
 8009030:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	2200      	movs	r2, #0
 8009036:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8009038:	bf00      	nop
 800903a:	3754      	adds	r7, #84	@ 0x54
 800903c:	46bd      	mov	sp, r7
 800903e:	bc80      	pop	{r7}
 8009040:	4770      	bx	lr

08009042 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009042:	b580      	push	{r7, lr}
 8009044:	b090      	sub	sp, #64	@ 0x40
 8009046:	af00      	add	r7, sp, #0
 8009048:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800904e:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	f003 0320 	and.w	r3, r3, #32
 800905a:	2b00      	cmp	r3, #0
 800905c:	d137      	bne.n	80090ce <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800905e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009060:	2200      	movs	r2, #0
 8009062:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009066:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	3308      	adds	r3, #8
 800906c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800906e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009070:	e853 3f00 	ldrex	r3, [r3]
 8009074:	623b      	str	r3, [r7, #32]
   return(result);
 8009076:	6a3b      	ldr	r3, [r7, #32]
 8009078:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800907c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800907e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	3308      	adds	r3, #8
 8009084:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009086:	633a      	str	r2, [r7, #48]	@ 0x30
 8009088:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800908a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800908c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800908e:	e841 2300 	strex	r3, r2, [r1]
 8009092:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009094:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009096:	2b00      	cmp	r3, #0
 8009098:	d1e5      	bne.n	8009066 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800909a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090a0:	693b      	ldr	r3, [r7, #16]
 80090a2:	e853 3f00 	ldrex	r3, [r3]
 80090a6:	60fb      	str	r3, [r7, #12]
   return(result);
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80090ae:	637b      	str	r3, [r7, #52]	@ 0x34
 80090b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	461a      	mov	r2, r3
 80090b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80090b8:	61fb      	str	r3, [r7, #28]
 80090ba:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090bc:	69b9      	ldr	r1, [r7, #24]
 80090be:	69fa      	ldr	r2, [r7, #28]
 80090c0:	e841 2300 	strex	r3, r2, [r1]
 80090c4:	617b      	str	r3, [r7, #20]
   return(result);
 80090c6:	697b      	ldr	r3, [r7, #20]
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d1e6      	bne.n	800909a <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80090cc:	e002      	b.n	80090d4 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80090ce:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80090d0:	f7f9 fbf8 	bl	80028c4 <HAL_UART_TxCpltCallback>
}
 80090d4:	bf00      	nop
 80090d6:	3740      	adds	r7, #64	@ 0x40
 80090d8:	46bd      	mov	sp, r7
 80090da:	bd80      	pop	{r7, pc}

080090dc <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80090dc:	b580      	push	{r7, lr}
 80090de:	b084      	sub	sp, #16
 80090e0:	af00      	add	r7, sp, #0
 80090e2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80090e8:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80090ea:	68f8      	ldr	r0, [r7, #12]
 80090ec:	f7ff f994 	bl	8008418 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80090f0:	bf00      	nop
 80090f2:	3710      	adds	r7, #16
 80090f4:	46bd      	mov	sp, r7
 80090f6:	bd80      	pop	{r7, pc}

080090f8 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80090f8:	b580      	push	{r7, lr}
 80090fa:	b086      	sub	sp, #24
 80090fc:	af00      	add	r7, sp, #0
 80090fe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009104:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8009106:	697b      	ldr	r3, [r7, #20]
 8009108:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800910c:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800910e:	697b      	ldr	r3, [r7, #20]
 8009110:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009114:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8009116:	697b      	ldr	r3, [r7, #20]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	689b      	ldr	r3, [r3, #8]
 800911c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009120:	2b80      	cmp	r3, #128	@ 0x80
 8009122:	d109      	bne.n	8009138 <UART_DMAError+0x40>
 8009124:	693b      	ldr	r3, [r7, #16]
 8009126:	2b21      	cmp	r3, #33	@ 0x21
 8009128:	d106      	bne.n	8009138 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800912a:	697b      	ldr	r3, [r7, #20]
 800912c:	2200      	movs	r2, #0
 800912e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 8009132:	6978      	ldr	r0, [r7, #20]
 8009134:	f7ff fee0 	bl	8008ef8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8009138:	697b      	ldr	r3, [r7, #20]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	689b      	ldr	r3, [r3, #8]
 800913e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009142:	2b40      	cmp	r3, #64	@ 0x40
 8009144:	d109      	bne.n	800915a <UART_DMAError+0x62>
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	2b22      	cmp	r3, #34	@ 0x22
 800914a:	d106      	bne.n	800915a <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800914c:	697b      	ldr	r3, [r7, #20]
 800914e:	2200      	movs	r2, #0
 8009150:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 8009154:	6978      	ldr	r0, [r7, #20]
 8009156:	f7ff ff0f 	bl	8008f78 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800915a:	697b      	ldr	r3, [r7, #20]
 800915c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009160:	f043 0210 	orr.w	r2, r3, #16
 8009164:	697b      	ldr	r3, [r7, #20]
 8009166:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800916a:	6978      	ldr	r0, [r7, #20]
 800916c:	f7ff f95d 	bl	800842a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009170:	bf00      	nop
 8009172:	3718      	adds	r7, #24
 8009174:	46bd      	mov	sp, r7
 8009176:	bd80      	pop	{r7, pc}

08009178 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009178:	b580      	push	{r7, lr}
 800917a:	b084      	sub	sp, #16
 800917c:	af00      	add	r7, sp, #0
 800917e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009184:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	2200      	movs	r2, #0
 800918a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	2200      	movs	r2, #0
 8009192:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009196:	68f8      	ldr	r0, [r7, #12]
 8009198:	f7ff f947 	bl	800842a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800919c:	bf00      	nop
 800919e:	3710      	adds	r7, #16
 80091a0:	46bd      	mov	sp, r7
 80091a2:	bd80      	pop	{r7, pc}

080091a4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80091a4:	b580      	push	{r7, lr}
 80091a6:	b088      	sub	sp, #32
 80091a8:	af00      	add	r7, sp, #0
 80091aa:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	e853 3f00 	ldrex	r3, [r3]
 80091b8:	60bb      	str	r3, [r7, #8]
   return(result);
 80091ba:	68bb      	ldr	r3, [r7, #8]
 80091bc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80091c0:	61fb      	str	r3, [r7, #28]
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	461a      	mov	r2, r3
 80091c8:	69fb      	ldr	r3, [r7, #28]
 80091ca:	61bb      	str	r3, [r7, #24]
 80091cc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091ce:	6979      	ldr	r1, [r7, #20]
 80091d0:	69ba      	ldr	r2, [r7, #24]
 80091d2:	e841 2300 	strex	r3, r2, [r1]
 80091d6:	613b      	str	r3, [r7, #16]
   return(result);
 80091d8:	693b      	ldr	r3, [r7, #16]
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d1e6      	bne.n	80091ac <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	2220      	movs	r2, #32
 80091e2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	2200      	movs	r2, #0
 80091ea:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80091ec:	6878      	ldr	r0, [r7, #4]
 80091ee:	f7f9 fb69 	bl	80028c4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80091f2:	bf00      	nop
 80091f4:	3720      	adds	r7, #32
 80091f6:	46bd      	mov	sp, r7
 80091f8:	bd80      	pop	{r7, pc}
	...

080091fc <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80091fc:	b580      	push	{r7, lr}
 80091fe:	b09c      	sub	sp, #112	@ 0x70
 8009200:	af00      	add	r7, sp, #0
 8009202:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800920a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009214:	2b22      	cmp	r3, #34	@ 0x22
 8009216:	f040 80be 	bne.w	8009396 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009220:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009224:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8009228:	b2d9      	uxtb	r1, r3
 800922a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800922e:	b2da      	uxtb	r2, r3
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009234:	400a      	ands	r2, r1
 8009236:	b2d2      	uxtb	r2, r2
 8009238:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800923e:	1c5a      	adds	r2, r3, #1
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800924a:	b29b      	uxth	r3, r3
 800924c:	3b01      	subs	r3, #1
 800924e:	b29a      	uxth	r2, r3
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800925c:	b29b      	uxth	r3, r3
 800925e:	2b00      	cmp	r3, #0
 8009260:	f040 80a1 	bne.w	80093a6 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800926a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800926c:	e853 3f00 	ldrex	r3, [r3]
 8009270:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009272:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009274:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009278:	66bb      	str	r3, [r7, #104]	@ 0x68
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	461a      	mov	r2, r3
 8009280:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009282:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009284:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009286:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009288:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800928a:	e841 2300 	strex	r3, r2, [r1]
 800928e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009290:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009292:	2b00      	cmp	r3, #0
 8009294:	d1e6      	bne.n	8009264 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	3308      	adds	r3, #8
 800929c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800929e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092a0:	e853 3f00 	ldrex	r3, [r3]
 80092a4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80092a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80092a8:	f023 0301 	bic.w	r3, r3, #1
 80092ac:	667b      	str	r3, [r7, #100]	@ 0x64
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	3308      	adds	r3, #8
 80092b4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80092b6:	647a      	str	r2, [r7, #68]	@ 0x44
 80092b8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092ba:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80092bc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80092be:	e841 2300 	strex	r3, r2, [r1]
 80092c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80092c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d1e5      	bne.n	8009296 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	2220      	movs	r2, #32
 80092ce:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	2200      	movs	r2, #0
 80092d6:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	2200      	movs	r2, #0
 80092dc:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	4a33      	ldr	r2, [pc, #204]	@ (80093b0 <UART_RxISR_8BIT+0x1b4>)
 80092e4:	4293      	cmp	r3, r2
 80092e6:	d01f      	beq.n	8009328 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	685b      	ldr	r3, [r3, #4]
 80092ee:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d018      	beq.n	8009328 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092fe:	e853 3f00 	ldrex	r3, [r3]
 8009302:	623b      	str	r3, [r7, #32]
   return(result);
 8009304:	6a3b      	ldr	r3, [r7, #32]
 8009306:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800930a:	663b      	str	r3, [r7, #96]	@ 0x60
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	461a      	mov	r2, r3
 8009312:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009314:	633b      	str	r3, [r7, #48]	@ 0x30
 8009316:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009318:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800931a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800931c:	e841 2300 	strex	r3, r2, [r1]
 8009320:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009322:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009324:	2b00      	cmp	r3, #0
 8009326:	d1e6      	bne.n	80092f6 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800932c:	2b01      	cmp	r3, #1
 800932e:	d12e      	bne.n	800938e <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	2200      	movs	r2, #0
 8009334:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800933c:	693b      	ldr	r3, [r7, #16]
 800933e:	e853 3f00 	ldrex	r3, [r3]
 8009342:	60fb      	str	r3, [r7, #12]
   return(result);
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	f023 0310 	bic.w	r3, r3, #16
 800934a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	461a      	mov	r2, r3
 8009352:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009354:	61fb      	str	r3, [r7, #28]
 8009356:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009358:	69b9      	ldr	r1, [r7, #24]
 800935a:	69fa      	ldr	r2, [r7, #28]
 800935c:	e841 2300 	strex	r3, r2, [r1]
 8009360:	617b      	str	r3, [r7, #20]
   return(result);
 8009362:	697b      	ldr	r3, [r7, #20]
 8009364:	2b00      	cmp	r3, #0
 8009366:	d1e6      	bne.n	8009336 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	69db      	ldr	r3, [r3, #28]
 800936e:	f003 0310 	and.w	r3, r3, #16
 8009372:	2b10      	cmp	r3, #16
 8009374:	d103      	bne.n	800937e <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	2210      	movs	r2, #16
 800937c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009384:	4619      	mov	r1, r3
 8009386:	6878      	ldr	r0, [r7, #4]
 8009388:	f7ff f858 	bl	800843c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800938c:	e00b      	b.n	80093a6 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800938e:	6878      	ldr	r0, [r7, #4]
 8009390:	f7f9 faae 	bl	80028f0 <HAL_UART_RxCpltCallback>
}
 8009394:	e007      	b.n	80093a6 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	699a      	ldr	r2, [r3, #24]
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	f042 0208 	orr.w	r2, r2, #8
 80093a4:	619a      	str	r2, [r3, #24]
}
 80093a6:	bf00      	nop
 80093a8:	3770      	adds	r7, #112	@ 0x70
 80093aa:	46bd      	mov	sp, r7
 80093ac:	bd80      	pop	{r7, pc}
 80093ae:	bf00      	nop
 80093b0:	40008000 	.word	0x40008000

080093b4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80093b4:	b580      	push	{r7, lr}
 80093b6:	b09c      	sub	sp, #112	@ 0x70
 80093b8:	af00      	add	r7, sp, #0
 80093ba:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80093c2:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80093cc:	2b22      	cmp	r3, #34	@ 0x22
 80093ce:	f040 80be 	bne.w	800954e <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80093d8:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80093e0:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80093e2:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 80093e6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80093ea:	4013      	ands	r3, r2
 80093ec:	b29a      	uxth	r2, r3
 80093ee:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80093f0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80093f6:	1c9a      	adds	r2, r3, #2
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009402:	b29b      	uxth	r3, r3
 8009404:	3b01      	subs	r3, #1
 8009406:	b29a      	uxth	r2, r3
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009414:	b29b      	uxth	r3, r3
 8009416:	2b00      	cmp	r3, #0
 8009418:	f040 80a1 	bne.w	800955e <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009422:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009424:	e853 3f00 	ldrex	r3, [r3]
 8009428:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800942a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800942c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009430:	667b      	str	r3, [r7, #100]	@ 0x64
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	461a      	mov	r2, r3
 8009438:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800943a:	657b      	str	r3, [r7, #84]	@ 0x54
 800943c:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800943e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009440:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8009442:	e841 2300 	strex	r3, r2, [r1]
 8009446:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8009448:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800944a:	2b00      	cmp	r3, #0
 800944c:	d1e6      	bne.n	800941c <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	3308      	adds	r3, #8
 8009454:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009456:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009458:	e853 3f00 	ldrex	r3, [r3]
 800945c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800945e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009460:	f023 0301 	bic.w	r3, r3, #1
 8009464:	663b      	str	r3, [r7, #96]	@ 0x60
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	3308      	adds	r3, #8
 800946c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800946e:	643a      	str	r2, [r7, #64]	@ 0x40
 8009470:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009472:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009474:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009476:	e841 2300 	strex	r3, r2, [r1]
 800947a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800947c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800947e:	2b00      	cmp	r3, #0
 8009480:	d1e5      	bne.n	800944e <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	2220      	movs	r2, #32
 8009486:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	2200      	movs	r2, #0
 800948e:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	2200      	movs	r2, #0
 8009494:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	4a33      	ldr	r2, [pc, #204]	@ (8009568 <UART_RxISR_16BIT+0x1b4>)
 800949c:	4293      	cmp	r3, r2
 800949e:	d01f      	beq.n	80094e0 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	685b      	ldr	r3, [r3, #4]
 80094a6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d018      	beq.n	80094e0 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094b4:	6a3b      	ldr	r3, [r7, #32]
 80094b6:	e853 3f00 	ldrex	r3, [r3]
 80094ba:	61fb      	str	r3, [r7, #28]
   return(result);
 80094bc:	69fb      	ldr	r3, [r7, #28]
 80094be:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80094c2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	461a      	mov	r2, r3
 80094ca:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80094cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80094ce:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094d0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80094d2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80094d4:	e841 2300 	strex	r3, r2, [r1]
 80094d8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80094da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d1e6      	bne.n	80094ae <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80094e4:	2b01      	cmp	r3, #1
 80094e6:	d12e      	bne.n	8009546 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	2200      	movs	r2, #0
 80094ec:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	e853 3f00 	ldrex	r3, [r3]
 80094fa:	60bb      	str	r3, [r7, #8]
   return(result);
 80094fc:	68bb      	ldr	r3, [r7, #8]
 80094fe:	f023 0310 	bic.w	r3, r3, #16
 8009502:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	461a      	mov	r2, r3
 800950a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800950c:	61bb      	str	r3, [r7, #24]
 800950e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009510:	6979      	ldr	r1, [r7, #20]
 8009512:	69ba      	ldr	r2, [r7, #24]
 8009514:	e841 2300 	strex	r3, r2, [r1]
 8009518:	613b      	str	r3, [r7, #16]
   return(result);
 800951a:	693b      	ldr	r3, [r7, #16]
 800951c:	2b00      	cmp	r3, #0
 800951e:	d1e6      	bne.n	80094ee <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	69db      	ldr	r3, [r3, #28]
 8009526:	f003 0310 	and.w	r3, r3, #16
 800952a:	2b10      	cmp	r3, #16
 800952c:	d103      	bne.n	8009536 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	2210      	movs	r2, #16
 8009534:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800953c:	4619      	mov	r1, r3
 800953e:	6878      	ldr	r0, [r7, #4]
 8009540:	f7fe ff7c 	bl	800843c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009544:	e00b      	b.n	800955e <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8009546:	6878      	ldr	r0, [r7, #4]
 8009548:	f7f9 f9d2 	bl	80028f0 <HAL_UART_RxCpltCallback>
}
 800954c:	e007      	b.n	800955e <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	699a      	ldr	r2, [r3, #24]
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	f042 0208 	orr.w	r2, r2, #8
 800955c:	619a      	str	r2, [r3, #24]
}
 800955e:	bf00      	nop
 8009560:	3770      	adds	r7, #112	@ 0x70
 8009562:	46bd      	mov	sp, r7
 8009564:	bd80      	pop	{r7, pc}
 8009566:	bf00      	nop
 8009568:	40008000 	.word	0x40008000

0800956c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800956c:	b580      	push	{r7, lr}
 800956e:	b0ac      	sub	sp, #176	@ 0xb0
 8009570:	af00      	add	r7, sp, #0
 8009572:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800957a:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	69db      	ldr	r3, [r3, #28]
 8009584:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	689b      	ldr	r3, [r3, #8]
 8009598:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80095a2:	2b22      	cmp	r3, #34	@ 0x22
 80095a4:	f040 8182 	bne.w	80098ac <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80095ae:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80095b2:	e125      	b.n	8009800 <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80095ba:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80095be:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 80095c2:	b2d9      	uxtb	r1, r3
 80095c4:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 80095c8:	b2da      	uxtb	r2, r3
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80095ce:	400a      	ands	r2, r1
 80095d0:	b2d2      	uxtb	r2, r2
 80095d2:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80095d8:	1c5a      	adds	r2, r3, #1
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80095e4:	b29b      	uxth	r3, r3
 80095e6:	3b01      	subs	r3, #1
 80095e8:	b29a      	uxth	r2, r3
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	69db      	ldr	r3, [r3, #28]
 80095f6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80095fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80095fe:	f003 0307 	and.w	r3, r3, #7
 8009602:	2b00      	cmp	r3, #0
 8009604:	d053      	beq.n	80096ae <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009606:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800960a:	f003 0301 	and.w	r3, r3, #1
 800960e:	2b00      	cmp	r3, #0
 8009610:	d011      	beq.n	8009636 <UART_RxISR_8BIT_FIFOEN+0xca>
 8009612:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8009616:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800961a:	2b00      	cmp	r3, #0
 800961c:	d00b      	beq.n	8009636 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	2201      	movs	r2, #1
 8009624:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800962c:	f043 0201 	orr.w	r2, r3, #1
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009636:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800963a:	f003 0302 	and.w	r3, r3, #2
 800963e:	2b00      	cmp	r3, #0
 8009640:	d011      	beq.n	8009666 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8009642:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009646:	f003 0301 	and.w	r3, r3, #1
 800964a:	2b00      	cmp	r3, #0
 800964c:	d00b      	beq.n	8009666 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	2202      	movs	r2, #2
 8009654:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800965c:	f043 0204 	orr.w	r2, r3, #4
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009666:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800966a:	f003 0304 	and.w	r3, r3, #4
 800966e:	2b00      	cmp	r3, #0
 8009670:	d011      	beq.n	8009696 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8009672:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009676:	f003 0301 	and.w	r3, r3, #1
 800967a:	2b00      	cmp	r3, #0
 800967c:	d00b      	beq.n	8009696 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	2204      	movs	r2, #4
 8009684:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800968c:	f043 0202 	orr.w	r2, r3, #2
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800969c:	2b00      	cmp	r3, #0
 800969e:	d006      	beq.n	80096ae <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80096a0:	6878      	ldr	r0, [r7, #4]
 80096a2:	f7fe fec2 	bl	800842a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	2200      	movs	r2, #0
 80096aa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80096b4:	b29b      	uxth	r3, r3
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	f040 80a2 	bne.w	8009800 <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096c2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80096c4:	e853 3f00 	ldrex	r3, [r3]
 80096c8:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 80096ca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80096cc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80096d0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	461a      	mov	r2, r3
 80096da:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80096de:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80096e0:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096e2:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 80096e4:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80096e6:	e841 2300 	strex	r3, r2, [r1]
 80096ea:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 80096ec:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d1e4      	bne.n	80096bc <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	3308      	adds	r3, #8
 80096f8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096fa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80096fc:	e853 3f00 	ldrex	r3, [r3]
 8009700:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 8009702:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009704:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009708:	f023 0301 	bic.w	r3, r3, #1
 800970c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	3308      	adds	r3, #8
 8009716:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800971a:	66ba      	str	r2, [r7, #104]	@ 0x68
 800971c:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800971e:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8009720:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8009722:	e841 2300 	strex	r3, r2, [r1]
 8009726:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8009728:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800972a:	2b00      	cmp	r3, #0
 800972c:	d1e1      	bne.n	80096f2 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	2220      	movs	r2, #32
 8009732:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	2200      	movs	r2, #0
 800973a:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	2200      	movs	r2, #0
 8009740:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	4a5f      	ldr	r2, [pc, #380]	@ (80098c4 <UART_RxISR_8BIT_FIFOEN+0x358>)
 8009748:	4293      	cmp	r3, r2
 800974a:	d021      	beq.n	8009790 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	685b      	ldr	r3, [r3, #4]
 8009752:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009756:	2b00      	cmp	r3, #0
 8009758:	d01a      	beq.n	8009790 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009760:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009762:	e853 3f00 	ldrex	r3, [r3]
 8009766:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8009768:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800976a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800976e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	461a      	mov	r2, r3
 8009778:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800977c:	657b      	str	r3, [r7, #84]	@ 0x54
 800977e:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009780:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009782:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8009784:	e841 2300 	strex	r3, r2, [r1]
 8009788:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800978a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800978c:	2b00      	cmp	r3, #0
 800978e:	d1e4      	bne.n	800975a <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009794:	2b01      	cmp	r3, #1
 8009796:	d130      	bne.n	80097fa <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	2200      	movs	r2, #0
 800979c:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80097a6:	e853 3f00 	ldrex	r3, [r3]
 80097aa:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80097ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097ae:	f023 0310 	bic.w	r3, r3, #16
 80097b2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	461a      	mov	r2, r3
 80097bc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80097c0:	643b      	str	r3, [r7, #64]	@ 0x40
 80097c2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097c4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80097c6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80097c8:	e841 2300 	strex	r3, r2, [r1]
 80097cc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80097ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d1e4      	bne.n	800979e <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	69db      	ldr	r3, [r3, #28]
 80097da:	f003 0310 	and.w	r3, r3, #16
 80097de:	2b10      	cmp	r3, #16
 80097e0:	d103      	bne.n	80097ea <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	2210      	movs	r2, #16
 80097e8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80097f0:	4619      	mov	r1, r3
 80097f2:	6878      	ldr	r0, [r7, #4]
 80097f4:	f7fe fe22 	bl	800843c <HAL_UARTEx_RxEventCallback>
 80097f8:	e002      	b.n	8009800 <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80097fa:	6878      	ldr	r0, [r7, #4]
 80097fc:	f7f9 f878 	bl	80028f0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009800:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8009804:	2b00      	cmp	r3, #0
 8009806:	d006      	beq.n	8009816 <UART_RxISR_8BIT_FIFOEN+0x2aa>
 8009808:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800980c:	f003 0320 	and.w	r3, r3, #32
 8009810:	2b00      	cmp	r3, #0
 8009812:	f47f aecf 	bne.w	80095b4 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800981c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009820:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8009824:	2b00      	cmp	r3, #0
 8009826:	d049      	beq.n	80098bc <UART_RxISR_8BIT_FIFOEN+0x350>
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800982e:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 8009832:	429a      	cmp	r2, r3
 8009834:	d242      	bcs.n	80098bc <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	3308      	adds	r3, #8
 800983c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800983e:	6a3b      	ldr	r3, [r7, #32]
 8009840:	e853 3f00 	ldrex	r3, [r3]
 8009844:	61fb      	str	r3, [r7, #28]
   return(result);
 8009846:	69fb      	ldr	r3, [r7, #28]
 8009848:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800984c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	3308      	adds	r3, #8
 8009856:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800985a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800985c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800985e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009860:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009862:	e841 2300 	strex	r3, r2, [r1]
 8009866:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009868:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800986a:	2b00      	cmp	r3, #0
 800986c:	d1e3      	bne.n	8009836 <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	4a15      	ldr	r2, [pc, #84]	@ (80098c8 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8009872:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	e853 3f00 	ldrex	r3, [r3]
 8009880:	60bb      	str	r3, [r7, #8]
   return(result);
 8009882:	68bb      	ldr	r3, [r7, #8]
 8009884:	f043 0320 	orr.w	r3, r3, #32
 8009888:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	461a      	mov	r2, r3
 8009892:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8009896:	61bb      	str	r3, [r7, #24]
 8009898:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800989a:	6979      	ldr	r1, [r7, #20]
 800989c:	69ba      	ldr	r2, [r7, #24]
 800989e:	e841 2300 	strex	r3, r2, [r1]
 80098a2:	613b      	str	r3, [r7, #16]
   return(result);
 80098a4:	693b      	ldr	r3, [r7, #16]
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d1e4      	bne.n	8009874 <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80098aa:	e007      	b.n	80098bc <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	699a      	ldr	r2, [r3, #24]
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	f042 0208 	orr.w	r2, r2, #8
 80098ba:	619a      	str	r2, [r3, #24]
}
 80098bc:	bf00      	nop
 80098be:	37b0      	adds	r7, #176	@ 0xb0
 80098c0:	46bd      	mov	sp, r7
 80098c2:	bd80      	pop	{r7, pc}
 80098c4:	40008000 	.word	0x40008000
 80098c8:	080091fd 	.word	0x080091fd

080098cc <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80098cc:	b580      	push	{r7, lr}
 80098ce:	b0ae      	sub	sp, #184	@ 0xb8
 80098d0:	af00      	add	r7, sp, #0
 80098d2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80098da:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	69db      	ldr	r3, [r3, #28]
 80098e4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	689b      	ldr	r3, [r3, #8]
 80098f8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009902:	2b22      	cmp	r3, #34	@ 0x22
 8009904:	f040 8186 	bne.w	8009c14 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800990e:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009912:	e129      	b.n	8009b68 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800991a:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009922:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8009926:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 800992a:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 800992e:	4013      	ands	r3, r2
 8009930:	b29a      	uxth	r2, r3
 8009932:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009936:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800993c:	1c9a      	adds	r2, r3, #2
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009948:	b29b      	uxth	r3, r3
 800994a:	3b01      	subs	r3, #1
 800994c:	b29a      	uxth	r2, r3
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	69db      	ldr	r3, [r3, #28]
 800995a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800995e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009962:	f003 0307 	and.w	r3, r3, #7
 8009966:	2b00      	cmp	r3, #0
 8009968:	d053      	beq.n	8009a12 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800996a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800996e:	f003 0301 	and.w	r3, r3, #1
 8009972:	2b00      	cmp	r3, #0
 8009974:	d011      	beq.n	800999a <UART_RxISR_16BIT_FIFOEN+0xce>
 8009976:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800997a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800997e:	2b00      	cmp	r3, #0
 8009980:	d00b      	beq.n	800999a <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	2201      	movs	r2, #1
 8009988:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009990:	f043 0201 	orr.w	r2, r3, #1
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800999a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800999e:	f003 0302 	and.w	r3, r3, #2
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d011      	beq.n	80099ca <UART_RxISR_16BIT_FIFOEN+0xfe>
 80099a6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80099aa:	f003 0301 	and.w	r3, r3, #1
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d00b      	beq.n	80099ca <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	2202      	movs	r2, #2
 80099b8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80099c0:	f043 0204 	orr.w	r2, r3, #4
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80099ca:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80099ce:	f003 0304 	and.w	r3, r3, #4
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d011      	beq.n	80099fa <UART_RxISR_16BIT_FIFOEN+0x12e>
 80099d6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80099da:	f003 0301 	and.w	r3, r3, #1
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d00b      	beq.n	80099fa <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	2204      	movs	r2, #4
 80099e8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80099f0:	f043 0202 	orr.w	r2, r3, #2
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d006      	beq.n	8009a12 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009a04:	6878      	ldr	r0, [r7, #4]
 8009a06:	f7fe fd10 	bl	800842a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	2200      	movs	r2, #0
 8009a0e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009a18:	b29b      	uxth	r3, r3
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	f040 80a4 	bne.w	8009b68 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a26:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009a28:	e853 3f00 	ldrex	r3, [r3]
 8009a2c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8009a2e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009a30:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009a34:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	461a      	mov	r2, r3
 8009a3e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009a42:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009a46:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a48:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8009a4a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009a4e:	e841 2300 	strex	r3, r2, [r1]
 8009a52:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009a54:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d1e2      	bne.n	8009a20 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	3308      	adds	r3, #8
 8009a60:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a62:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009a64:	e853 3f00 	ldrex	r3, [r3]
 8009a68:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8009a6a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009a6c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009a70:	f023 0301 	bic.w	r3, r3, #1
 8009a74:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	3308      	adds	r3, #8
 8009a7e:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8009a82:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009a84:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a86:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009a88:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009a8a:	e841 2300 	strex	r3, r2, [r1]
 8009a8e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009a90:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d1e1      	bne.n	8009a5a <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	2220      	movs	r2, #32
 8009a9a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	2200      	movs	r2, #0
 8009aa2:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	2200      	movs	r2, #0
 8009aa8:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	4a5f      	ldr	r2, [pc, #380]	@ (8009c2c <UART_RxISR_16BIT_FIFOEN+0x360>)
 8009ab0:	4293      	cmp	r3, r2
 8009ab2:	d021      	beq.n	8009af8 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	685b      	ldr	r3, [r3, #4]
 8009aba:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d01a      	beq.n	8009af8 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ac8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009aca:	e853 3f00 	ldrex	r3, [r3]
 8009ace:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009ad0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009ad2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009ad6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	461a      	mov	r2, r3
 8009ae0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8009ae4:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009ae6:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ae8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009aea:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009aec:	e841 2300 	strex	r3, r2, [r1]
 8009af0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009af2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d1e4      	bne.n	8009ac2 <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009afc:	2b01      	cmp	r3, #1
 8009afe:	d130      	bne.n	8009b62 <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	2200      	movs	r2, #0
 8009b04:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b0e:	e853 3f00 	ldrex	r3, [r3]
 8009b12:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009b14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009b16:	f023 0310 	bic.w	r3, r3, #16
 8009b1a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	461a      	mov	r2, r3
 8009b24:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009b28:	647b      	str	r3, [r7, #68]	@ 0x44
 8009b2a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b2c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009b2e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009b30:	e841 2300 	strex	r3, r2, [r1]
 8009b34:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009b36:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d1e4      	bne.n	8009b06 <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	69db      	ldr	r3, [r3, #28]
 8009b42:	f003 0310 	and.w	r3, r3, #16
 8009b46:	2b10      	cmp	r3, #16
 8009b48:	d103      	bne.n	8009b52 <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	2210      	movs	r2, #16
 8009b50:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009b58:	4619      	mov	r1, r3
 8009b5a:	6878      	ldr	r0, [r7, #4]
 8009b5c:	f7fe fc6e 	bl	800843c <HAL_UARTEx_RxEventCallback>
 8009b60:	e002      	b.n	8009b68 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8009b62:	6878      	ldr	r0, [r7, #4]
 8009b64:	f7f8 fec4 	bl	80028f0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009b68:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d006      	beq.n	8009b7e <UART_RxISR_16BIT_FIFOEN+0x2b2>
 8009b70:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009b74:	f003 0320 	and.w	r3, r3, #32
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	f47f aecb 	bne.w	8009914 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009b84:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009b88:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d049      	beq.n	8009c24 <UART_RxISR_16BIT_FIFOEN+0x358>
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009b96:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 8009b9a:	429a      	cmp	r2, r3
 8009b9c:	d242      	bcs.n	8009c24 <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	3308      	adds	r3, #8
 8009ba4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ba6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ba8:	e853 3f00 	ldrex	r3, [r3]
 8009bac:	623b      	str	r3, [r7, #32]
   return(result);
 8009bae:	6a3b      	ldr	r3, [r7, #32]
 8009bb0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009bb4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	3308      	adds	r3, #8
 8009bbe:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8009bc2:	633a      	str	r2, [r7, #48]	@ 0x30
 8009bc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bc6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009bc8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009bca:	e841 2300 	strex	r3, r2, [r1]
 8009bce:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009bd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d1e3      	bne.n	8009b9e <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	4a15      	ldr	r2, [pc, #84]	@ (8009c30 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8009bda:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009be2:	693b      	ldr	r3, [r7, #16]
 8009be4:	e853 3f00 	ldrex	r3, [r3]
 8009be8:	60fb      	str	r3, [r7, #12]
   return(result);
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	f043 0320 	orr.w	r3, r3, #32
 8009bf0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	461a      	mov	r2, r3
 8009bfa:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009bfe:	61fb      	str	r3, [r7, #28]
 8009c00:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c02:	69b9      	ldr	r1, [r7, #24]
 8009c04:	69fa      	ldr	r2, [r7, #28]
 8009c06:	e841 2300 	strex	r3, r2, [r1]
 8009c0a:	617b      	str	r3, [r7, #20]
   return(result);
 8009c0c:	697b      	ldr	r3, [r7, #20]
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d1e4      	bne.n	8009bdc <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009c12:	e007      	b.n	8009c24 <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	699a      	ldr	r2, [r3, #24]
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	f042 0208 	orr.w	r2, r2, #8
 8009c22:	619a      	str	r2, [r3, #24]
}
 8009c24:	bf00      	nop
 8009c26:	37b8      	adds	r7, #184	@ 0xb8
 8009c28:	46bd      	mov	sp, r7
 8009c2a:	bd80      	pop	{r7, pc}
 8009c2c:	40008000 	.word	0x40008000
 8009c30:	080093b5 	.word	0x080093b5

08009c34 <HAL_RS485Ex_Init>:
  *       oversampling rate).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RS485Ex_Init(UART_HandleTypeDef *huart, uint32_t Polarity, uint32_t AssertionTime,
                                   uint32_t DeassertionTime)
{
 8009c34:	b580      	push	{r7, lr}
 8009c36:	b086      	sub	sp, #24
 8009c38:	af00      	add	r7, sp, #0
 8009c3a:	60f8      	str	r0, [r7, #12]
 8009c3c:	60b9      	str	r1, [r7, #8]
 8009c3e:	607a      	str	r2, [r7, #4]
 8009c40:	603b      	str	r3, [r7, #0]
  uint32_t temp;

  /* Check the UART handle allocation */
  if (huart == NULL)
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d101      	bne.n	8009c4c <HAL_RS485Ex_Init+0x18>
  {
    return HAL_ERROR;
 8009c48:	2301      	movs	r3, #1
 8009c4a:	e058      	b.n	8009cfe <HAL_RS485Ex_Init+0xca>
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));

  /* Check the Driver Enable deassertion time */
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d106      	bne.n	8009c64 <HAL_RS485Ex_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	2200      	movs	r2, #0
 8009c5a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_UART_MspInit(huart);
 8009c5e:	68f8      	ldr	r0, [r7, #12]
 8009c60:	f7f8 fc16 	bl	8002490 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	2224      	movs	r2, #36	@ 0x24
 8009c68:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	681a      	ldr	r2, [r3, #0]
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	f022 0201 	bic.w	r2, r2, #1
 8009c7a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d002      	beq.n	8009c8a <HAL_RS485Ex_Init+0x56>
  {
    UART_AdvFeatureConfig(huart);
 8009c84:	68f8      	ldr	r0, [r7, #12]
 8009c86:	f7fe fe59 	bl	800893c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009c8a:	68f8      	ldr	r0, [r7, #12]
 8009c8c:	f7fe fbe2 	bl	8008454 <UART_SetConfig>
 8009c90:	4603      	mov	r3, r0
 8009c92:	2b01      	cmp	r3, #1
 8009c94:	d101      	bne.n	8009c9a <HAL_RS485Ex_Init+0x66>
  {
    return HAL_ERROR;
 8009c96:	2301      	movs	r3, #1
 8009c98:	e031      	b.n	8009cfe <HAL_RS485Ex_Init+0xca>
  }

  /* Enable the Driver Enable mode by setting the DEM bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	689a      	ldr	r2, [r3, #8]
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009ca8:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable polarity */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	689b      	ldr	r3, [r3, #8]
 8009cb0:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	68ba      	ldr	r2, [r7, #8]
 8009cba:	430a      	orrs	r2, r1
 8009cbc:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable assertion and deassertion times */
  temp = (AssertionTime << UART_CR1_DEAT_ADDRESS_LSB_POS);
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	055b      	lsls	r3, r3, #21
 8009cc2:	617b      	str	r3, [r7, #20]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 8009cc4:	683b      	ldr	r3, [r7, #0]
 8009cc6:	041b      	lsls	r3, r3, #16
 8009cc8:	697a      	ldr	r2, [r7, #20]
 8009cca:	4313      	orrs	r3, r2
 8009ccc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	f023 737f 	bic.w	r3, r3, #66846720	@ 0x3fc0000
 8009cd8:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8009cdc:	68fa      	ldr	r2, [r7, #12]
 8009cde:	6812      	ldr	r2, [r2, #0]
 8009ce0:	6979      	ldr	r1, [r7, #20]
 8009ce2:	430b      	orrs	r3, r1
 8009ce4:	6013      	str	r3, [r2, #0]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	681a      	ldr	r2, [r3, #0]
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	f042 0201 	orr.w	r2, r2, #1
 8009cf4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009cf6:	68f8      	ldr	r0, [r7, #12]
 8009cf8:	f7fe fec1 	bl	8008a7e <UART_CheckIdleState>
 8009cfc:	4603      	mov	r3, r0
}
 8009cfe:	4618      	mov	r0, r3
 8009d00:	3718      	adds	r7, #24
 8009d02:	46bd      	mov	sp, r7
 8009d04:	bd80      	pop	{r7, pc}

08009d06 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009d06:	b480      	push	{r7}
 8009d08:	b083      	sub	sp, #12
 8009d0a:	af00      	add	r7, sp, #0
 8009d0c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009d0e:	bf00      	nop
 8009d10:	370c      	adds	r7, #12
 8009d12:	46bd      	mov	sp, r7
 8009d14:	bc80      	pop	{r7}
 8009d16:	4770      	bx	lr

08009d18 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8009d18:	b480      	push	{r7}
 8009d1a:	b083      	sub	sp, #12
 8009d1c:	af00      	add	r7, sp, #0
 8009d1e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009d20:	bf00      	nop
 8009d22:	370c      	adds	r7, #12
 8009d24:	46bd      	mov	sp, r7
 8009d26:	bc80      	pop	{r7}
 8009d28:	4770      	bx	lr

08009d2a <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8009d2a:	b480      	push	{r7}
 8009d2c:	b083      	sub	sp, #12
 8009d2e:	af00      	add	r7, sp, #0
 8009d30:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009d32:	bf00      	nop
 8009d34:	370c      	adds	r7, #12
 8009d36:	46bd      	mov	sp, r7
 8009d38:	bc80      	pop	{r7}
 8009d3a:	4770      	bx	lr

08009d3c <HAL_UARTEx_StopModeWakeUpSourceConfig>:
  *          @arg @ref UART_WAKEUP_ON_STARTBIT
  *          @arg @ref UART_WAKEUP_ON_READDATA_NONEMPTY
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_StopModeWakeUpSourceConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 8009d3c:	b580      	push	{r7, lr}
 8009d3e:	b088      	sub	sp, #32
 8009d40:	af02      	add	r7, sp, #8
 8009d42:	60f8      	str	r0, [r7, #12]
 8009d44:	1d3b      	adds	r3, r7, #4
 8009d46:	e883 0006 	stmia.w	r3, {r1, r2}
  HAL_StatusTypeDef status = HAL_OK;
 8009d4a:	2300      	movs	r3, #0
 8009d4c:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance));
  /* check the wake-up selection parameter */
  assert_param(IS_UART_WAKEUP_SELECTION(WakeUpSelection.WakeUpEvent));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009d54:	2b01      	cmp	r3, #1
 8009d56:	d101      	bne.n	8009d5c <HAL_UARTEx_StopModeWakeUpSourceConfig+0x20>
 8009d58:	2302      	movs	r3, #2
 8009d5a:	e046      	b.n	8009dea <HAL_UARTEx_StopModeWakeUpSourceConfig+0xae>
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	2201      	movs	r2, #1
 8009d60:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	2224      	movs	r2, #36	@ 0x24
 8009d68:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	681a      	ldr	r2, [r3, #0]
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	f022 0201 	bic.w	r2, r2, #1
 8009d7a:	601a      	str	r2, [r3, #0]

  /* Set the wake-up selection scheme */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	689b      	ldr	r3, [r3, #8]
 8009d82:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8009d86:	687a      	ldr	r2, [r7, #4]
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	430a      	orrs	r2, r1
 8009d8e:	609a      	str	r2, [r3, #8]

  if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d105      	bne.n	8009da2 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x66>
  {
    UARTEx_Wakeup_AddressConfig(huart, WakeUpSelection);
 8009d96:	1d3b      	adds	r3, r7, #4
 8009d98:	e893 0006 	ldmia.w	r3, {r1, r2}
 8009d9c:	68f8      	ldr	r0, [r7, #12]
 8009d9e:	f000 f90e 	bl	8009fbe <UARTEx_Wakeup_AddressConfig>
  }

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	681a      	ldr	r2, [r3, #0]
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	f042 0201 	orr.w	r2, r2, #1
 8009db0:	601a      	str	r2, [r3, #0]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009db2:	f7f7 ff2f 	bl	8001c14 <HAL_GetTick>
 8009db6:	6138      	str	r0, [r7, #16]

  /* Wait until REACK flag is set */
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009db8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009dbc:	9300      	str	r3, [sp, #0]
 8009dbe:	693b      	ldr	r3, [r7, #16]
 8009dc0:	2200      	movs	r2, #0
 8009dc2:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8009dc6:	68f8      	ldr	r0, [r7, #12]
 8009dc8:	f7fe fea7 	bl	8008b1a <UART_WaitOnFlagUntilTimeout>
 8009dcc:	4603      	mov	r3, r0
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d002      	beq.n	8009dd8 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x9c>
  {
    status = HAL_TIMEOUT;
 8009dd2:	2303      	movs	r3, #3
 8009dd4:	75fb      	strb	r3, [r7, #23]
 8009dd6:	e003      	b.n	8009de0 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xa4>
  }
  else
  {
    /* Initialize the UART State */
    huart->gState = HAL_UART_STATE_READY;
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	2220      	movs	r2, #32
 8009ddc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  }

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	2200      	movs	r2, #0
 8009de4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return status;
 8009de8:	7dfb      	ldrb	r3, [r7, #23]
}
 8009dea:	4618      	mov	r0, r3
 8009dec:	3718      	adds	r7, #24
 8009dee:	46bd      	mov	sp, r7
 8009df0:	bd80      	pop	{r7, pc}

08009df2 <HAL_UARTEx_EnableStopMode>:
  * @note The UART is able to wake up the MCU from Stop 1 mode as long as UART clock is HSI or LSE.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableStopMode(UART_HandleTypeDef *huart)
{
 8009df2:	b480      	push	{r7}
 8009df4:	b089      	sub	sp, #36	@ 0x24
 8009df6:	af00      	add	r7, sp, #0
 8009df8:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009e00:	2b01      	cmp	r3, #1
 8009e02:	d101      	bne.n	8009e08 <HAL_UARTEx_EnableStopMode+0x16>
 8009e04:	2302      	movs	r3, #2
 8009e06:	e021      	b.n	8009e4c <HAL_UARTEx_EnableStopMode+0x5a>
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	2201      	movs	r2, #1
 8009e0c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  /* Set UESM bit */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	e853 3f00 	ldrex	r3, [r3]
 8009e1c:	60bb      	str	r3, [r7, #8]
   return(result);
 8009e1e:	68bb      	ldr	r3, [r7, #8]
 8009e20:	f043 0302 	orr.w	r3, r3, #2
 8009e24:	61fb      	str	r3, [r7, #28]
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	461a      	mov	r2, r3
 8009e2c:	69fb      	ldr	r3, [r7, #28]
 8009e2e:	61bb      	str	r3, [r7, #24]
 8009e30:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e32:	6979      	ldr	r1, [r7, #20]
 8009e34:	69ba      	ldr	r2, [r7, #24]
 8009e36:	e841 2300 	strex	r3, r2, [r1]
 8009e3a:	613b      	str	r3, [r7, #16]
   return(result);
 8009e3c:	693b      	ldr	r3, [r7, #16]
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d1e6      	bne.n	8009e10 <HAL_UARTEx_EnableStopMode+0x1e>

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	2200      	movs	r2, #0
 8009e46:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009e4a:	2300      	movs	r3, #0
}
 8009e4c:	4618      	mov	r0, r3
 8009e4e:	3724      	adds	r7, #36	@ 0x24
 8009e50:	46bd      	mov	sp, r7
 8009e52:	bc80      	pop	{r7}
 8009e54:	4770      	bx	lr

08009e56 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009e56:	b480      	push	{r7}
 8009e58:	b085      	sub	sp, #20
 8009e5a:	af00      	add	r7, sp, #0
 8009e5c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009e64:	2b01      	cmp	r3, #1
 8009e66:	d101      	bne.n	8009e6c <HAL_UARTEx_DisableFifoMode+0x16>
 8009e68:	2302      	movs	r3, #2
 8009e6a:	e027      	b.n	8009ebc <HAL_UARTEx_DisableFifoMode+0x66>
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	2201      	movs	r2, #1
 8009e70:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	2224      	movs	r2, #36	@ 0x24
 8009e78:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	681a      	ldr	r2, [r3, #0]
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	f022 0201 	bic.w	r2, r2, #1
 8009e92:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8009e9a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	2200      	movs	r2, #0
 8009ea0:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	68fa      	ldr	r2, [r7, #12]
 8009ea8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	2220      	movs	r2, #32
 8009eae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	2200      	movs	r2, #0
 8009eb6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009eba:	2300      	movs	r3, #0
}
 8009ebc:	4618      	mov	r0, r3
 8009ebe:	3714      	adds	r7, #20
 8009ec0:	46bd      	mov	sp, r7
 8009ec2:	bc80      	pop	{r7}
 8009ec4:	4770      	bx	lr

08009ec6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009ec6:	b580      	push	{r7, lr}
 8009ec8:	b084      	sub	sp, #16
 8009eca:	af00      	add	r7, sp, #0
 8009ecc:	6078      	str	r0, [r7, #4]
 8009ece:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009ed6:	2b01      	cmp	r3, #1
 8009ed8:	d101      	bne.n	8009ede <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009eda:	2302      	movs	r3, #2
 8009edc:	e02d      	b.n	8009f3a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	2201      	movs	r2, #1
 8009ee2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	2224      	movs	r2, #36	@ 0x24
 8009eea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	681a      	ldr	r2, [r3, #0]
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	f022 0201 	bic.w	r2, r2, #1
 8009f04:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	689b      	ldr	r3, [r3, #8]
 8009f0c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	683a      	ldr	r2, [r7, #0]
 8009f16:	430a      	orrs	r2, r1
 8009f18:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009f1a:	6878      	ldr	r0, [r7, #4]
 8009f1c:	f000 f872 	bl	800a004 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	68fa      	ldr	r2, [r7, #12]
 8009f26:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	2220      	movs	r2, #32
 8009f2c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	2200      	movs	r2, #0
 8009f34:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009f38:	2300      	movs	r3, #0
}
 8009f3a:	4618      	mov	r0, r3
 8009f3c:	3710      	adds	r7, #16
 8009f3e:	46bd      	mov	sp, r7
 8009f40:	bd80      	pop	{r7, pc}

08009f42 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009f42:	b580      	push	{r7, lr}
 8009f44:	b084      	sub	sp, #16
 8009f46:	af00      	add	r7, sp, #0
 8009f48:	6078      	str	r0, [r7, #4]
 8009f4a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009f52:	2b01      	cmp	r3, #1
 8009f54:	d101      	bne.n	8009f5a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009f56:	2302      	movs	r3, #2
 8009f58:	e02d      	b.n	8009fb6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	2201      	movs	r2, #1
 8009f5e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	2224      	movs	r2, #36	@ 0x24
 8009f66:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	681a      	ldr	r2, [r3, #0]
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	f022 0201 	bic.w	r2, r2, #1
 8009f80:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	689b      	ldr	r3, [r3, #8]
 8009f88:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	683a      	ldr	r2, [r7, #0]
 8009f92:	430a      	orrs	r2, r1
 8009f94:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009f96:	6878      	ldr	r0, [r7, #4]
 8009f98:	f000 f834 	bl	800a004 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	68fa      	ldr	r2, [r7, #12]
 8009fa2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	2220      	movs	r2, #32
 8009fa8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	2200      	movs	r2, #0
 8009fb0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009fb4:	2300      	movs	r3, #0
}
 8009fb6:	4618      	mov	r0, r3
 8009fb8:	3710      	adds	r7, #16
 8009fba:	46bd      	mov	sp, r7
 8009fbc:	bd80      	pop	{r7, pc}

08009fbe <UARTEx_Wakeup_AddressConfig>:
  * @param huart           UART handle.
  * @param WakeUpSelection UART wake up from stop mode parameters.
  * @retval None
  */
static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 8009fbe:	b480      	push	{r7}
 8009fc0:	b085      	sub	sp, #20
 8009fc2:	af00      	add	r7, sp, #0
 8009fc4:	60f8      	str	r0, [r7, #12]
 8009fc6:	1d3b      	adds	r3, r7, #4
 8009fc8:	e883 0006 	stmia.w	r3, {r1, r2}
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(WakeUpSelection.AddressLength));

  /* Set the USART address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	685b      	ldr	r3, [r3, #4]
 8009fd2:	f023 0210 	bic.w	r2, r3, #16
 8009fd6:	893b      	ldrh	r3, [r7, #8]
 8009fd8:	4619      	mov	r1, r3
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	430a      	orrs	r2, r1
 8009fe0:	605a      	str	r2, [r3, #4]

  /* Set the USART address node */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	685b      	ldr	r3, [r3, #4]
 8009fe8:	f023 417f 	bic.w	r1, r3, #4278190080	@ 0xff000000
 8009fec:	7abb      	ldrb	r3, [r7, #10]
 8009fee:	061a      	lsls	r2, r3, #24
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	430a      	orrs	r2, r1
 8009ff6:	605a      	str	r2, [r3, #4]
}
 8009ff8:	bf00      	nop
 8009ffa:	3714      	adds	r7, #20
 8009ffc:	46bd      	mov	sp, r7
 8009ffe:	bc80      	pop	{r7}
 800a000:	4770      	bx	lr
	...

0800a004 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a004:	b480      	push	{r7}
 800a006:	b085      	sub	sp, #20
 800a008:	af00      	add	r7, sp, #0
 800a00a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a010:	2b00      	cmp	r3, #0
 800a012:	d108      	bne.n	800a026 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	2201      	movs	r2, #1
 800a018:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	2201      	movs	r2, #1
 800a020:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a024:	e031      	b.n	800a08a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a026:	2308      	movs	r3, #8
 800a028:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a02a:	2308      	movs	r3, #8
 800a02c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	689b      	ldr	r3, [r3, #8]
 800a034:	0e5b      	lsrs	r3, r3, #25
 800a036:	b2db      	uxtb	r3, r3
 800a038:	f003 0307 	and.w	r3, r3, #7
 800a03c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	689b      	ldr	r3, [r3, #8]
 800a044:	0f5b      	lsrs	r3, r3, #29
 800a046:	b2db      	uxtb	r3, r3
 800a048:	f003 0307 	and.w	r3, r3, #7
 800a04c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a04e:	7bbb      	ldrb	r3, [r7, #14]
 800a050:	7b3a      	ldrb	r2, [r7, #12]
 800a052:	4910      	ldr	r1, [pc, #64]	@ (800a094 <UARTEx_SetNbDataToProcess+0x90>)
 800a054:	5c8a      	ldrb	r2, [r1, r2]
 800a056:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a05a:	7b3a      	ldrb	r2, [r7, #12]
 800a05c:	490e      	ldr	r1, [pc, #56]	@ (800a098 <UARTEx_SetNbDataToProcess+0x94>)
 800a05e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a060:	fb93 f3f2 	sdiv	r3, r3, r2
 800a064:	b29a      	uxth	r2, r3
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a06c:	7bfb      	ldrb	r3, [r7, #15]
 800a06e:	7b7a      	ldrb	r2, [r7, #13]
 800a070:	4908      	ldr	r1, [pc, #32]	@ (800a094 <UARTEx_SetNbDataToProcess+0x90>)
 800a072:	5c8a      	ldrb	r2, [r1, r2]
 800a074:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a078:	7b7a      	ldrb	r2, [r7, #13]
 800a07a:	4907      	ldr	r1, [pc, #28]	@ (800a098 <UARTEx_SetNbDataToProcess+0x94>)
 800a07c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a07e:	fb93 f3f2 	sdiv	r3, r3, r2
 800a082:	b29a      	uxth	r2, r3
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800a08a:	bf00      	nop
 800a08c:	3714      	adds	r7, #20
 800a08e:	46bd      	mov	sp, r7
 800a090:	bc80      	pop	{r7}
 800a092:	4770      	bx	lr
 800a094:	0801b91c 	.word	0x0801b91c
 800a098:	0801b924 	.word	0x0801b924

0800a09c <MX_LoRaWAN_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void MX_LoRaWAN_Init(void)
{
 800a09c:	b580      	push	{r7, lr}
 800a09e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_LoRaWAN_Init_1 */

  /* USER CODE END MX_LoRaWAN_Init_1 */
  SystemApp_Init();
 800a0a0:	f7f7 fc62 	bl	8001968 <SystemApp_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_2 */

  /* USER CODE END MX_LoRaWAN_Init_2 */
  LoRaWAN_Init();
 800a0a4:	f000 f820 	bl	800a0e8 <LoRaWAN_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_3 */

  /* USER CODE END MX_LoRaWAN_Init_3 */
}
 800a0a8:	bf00      	nop
 800a0aa:	bd80      	pop	{r7, pc}

0800a0ac <MX_LoRaWAN_Process>:

void MX_LoRaWAN_Process(void)
{
 800a0ac:	b580      	push	{r7, lr}
 800a0ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_LoRaWAN_Process_1 */

  /* USER CODE END MX_LoRaWAN_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 800a0b0:	f04f 30ff 	mov.w	r0, #4294967295
 800a0b4:	f010 fa32 	bl	801a51c <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_LoRaWAN_Process_2 */

  /* USER CODE END MX_LoRaWAN_Process_2 */
}
 800a0b8:	bf00      	nop
 800a0ba:	bd80      	pop	{r7, pc}

0800a0bc <__NVIC_SystemReset>:
{
 800a0bc:	b480      	push	{r7}
 800a0be:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 800a0c0:	f3bf 8f4f 	dsb	sy
}
 800a0c4:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800a0c6:	4b06      	ldr	r3, [pc, #24]	@ (800a0e0 <__NVIC_SystemReset+0x24>)
 800a0c8:	68db      	ldr	r3, [r3, #12]
 800a0ca:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800a0ce:	4904      	ldr	r1, [pc, #16]	@ (800a0e0 <__NVIC_SystemReset+0x24>)
 800a0d0:	4b04      	ldr	r3, [pc, #16]	@ (800a0e4 <__NVIC_SystemReset+0x28>)
 800a0d2:	4313      	orrs	r3, r2
 800a0d4:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800a0d6:	f3bf 8f4f 	dsb	sy
}
 800a0da:	bf00      	nop
    __NOP();
 800a0dc:	bf00      	nop
 800a0de:	e7fd      	b.n	800a0dc <__NVIC_SystemReset+0x20>
 800a0e0:	e000ed00 	.word	0xe000ed00
 800a0e4:	05fa0004 	.word	0x05fa0004

0800a0e8 <LoRaWAN_Init>:
/* USER CODE BEGIN EF */

/* USER CODE END EF */

void LoRaWAN_Init(void)
{
 800a0e8:	b580      	push	{r7, lr}
 800a0ea:	b082      	sub	sp, #8
 800a0ec:	af02      	add	r7, sp, #8

  /* USER CODE BEGIN LoRaWAN_Init_1 */

  /* USER CODE END LoRaWAN_Init_1 */

  UTIL_TIMER_Create(&StopJoinTimer, JOIN_TIME, UTIL_TIMER_ONESHOT, OnStopJoinTimerEvent, NULL);
 800a0ee:	2300      	movs	r3, #0
 800a0f0:	9300      	str	r3, [sp, #0]
 800a0f2:	4b1f      	ldr	r3, [pc, #124]	@ (800a170 <LoRaWAN_Init+0x88>)
 800a0f4:	2200      	movs	r2, #0
 800a0f6:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 800a0fa:	481e      	ldr	r0, [pc, #120]	@ (800a174 <LoRaWAN_Init+0x8c>)
 800a0fc:	f010 fbac 	bl	801a858 <UTIL_TIMER_Create>

  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LmHandlerProcess), UTIL_SEQ_RFU, LmHandlerProcess);
 800a100:	4a1d      	ldr	r2, [pc, #116]	@ (800a178 <LoRaWAN_Init+0x90>)
 800a102:	2100      	movs	r1, #0
 800a104:	2001      	movs	r0, #1
 800a106:	f010 fb05 	bl	801a714 <UTIL_SEQ_RegTask>

  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), UTIL_SEQ_RFU, SendTxData);
 800a10a:	4a1c      	ldr	r2, [pc, #112]	@ (800a17c <LoRaWAN_Init+0x94>)
 800a10c:	2100      	movs	r1, #0
 800a10e:	2002      	movs	r0, #2
 800a110:	f010 fb00 	bl	801a714 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaStoreContextEvent), UTIL_SEQ_RFU, StoreContext);
 800a114:	4a1a      	ldr	r2, [pc, #104]	@ (800a180 <LoRaWAN_Init+0x98>)
 800a116:	2100      	movs	r1, #0
 800a118:	2004      	movs	r0, #4
 800a11a:	f010 fafb 	bl	801a714 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaStopJoinEvent), UTIL_SEQ_RFU, StopJoin);
 800a11e:	4a19      	ldr	r2, [pc, #100]	@ (800a184 <LoRaWAN_Init+0x9c>)
 800a120:	2100      	movs	r1, #0
 800a122:	2008      	movs	r0, #8
 800a124:	f010 faf6 	bl	801a714 <UTIL_SEQ_RegTask>

  /* Init Info table used by LmHandler*/
  LoraInfo_Init();
 800a128:	f000 f9aa 	bl	800a480 <LoraInfo_Init>

  /* Init the Lora Stack*/
  LmHandlerInit(&LmHandlerCallbacks, APP_VERSION);
 800a12c:	4916      	ldr	r1, [pc, #88]	@ (800a188 <LoRaWAN_Init+0xa0>)
 800a12e:	4817      	ldr	r0, [pc, #92]	@ (800a18c <LoRaWAN_Init+0xa4>)
 800a130:	f001 fee6 	bl	800bf00 <LmHandlerInit>

  LmHandlerConfigure(&LmHandlerParams);
 800a134:	4816      	ldr	r0, [pc, #88]	@ (800a190 <LoRaWAN_Init+0xa8>)
 800a136:	f001 ff3f 	bl	800bfb8 <LmHandlerConfigure>

  /* USER CODE BEGIN LoRaWAN_Init_2 */
  /* USER CODE END LoRaWAN_Init_2 */

  LmHandlerJoin(ActivationType, ForceRejoin);
 800a13a:	4b16      	ldr	r3, [pc, #88]	@ (800a194 <LoRaWAN_Init+0xac>)
 800a13c:	781b      	ldrb	r3, [r3, #0]
 800a13e:	4a16      	ldr	r2, [pc, #88]	@ (800a198 <LoRaWAN_Init+0xb0>)
 800a140:	7812      	ldrb	r2, [r2, #0]
 800a142:	4611      	mov	r1, r2
 800a144:	4618      	mov	r0, r3
 800a146:	f001 fffd 	bl	800c144 <LmHandlerJoin>

  if (EventType == TX_ON_TIMER)
 800a14a:	4b14      	ldr	r3, [pc, #80]	@ (800a19c <LoRaWAN_Init+0xb4>)
 800a14c:	781b      	ldrb	r3, [r3, #0]
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d10b      	bne.n	800a16a <LoRaWAN_Init+0x82>
  {
    /* send every time timer elapses */
    UTIL_TIMER_Create(&TxTimer, TxPeriodicity, UTIL_TIMER_ONESHOT, OnTxTimerEvent, NULL);
 800a152:	4b13      	ldr	r3, [pc, #76]	@ (800a1a0 <LoRaWAN_Init+0xb8>)
 800a154:	6819      	ldr	r1, [r3, #0]
 800a156:	2300      	movs	r3, #0
 800a158:	9300      	str	r3, [sp, #0]
 800a15a:	4b12      	ldr	r3, [pc, #72]	@ (800a1a4 <LoRaWAN_Init+0xbc>)
 800a15c:	2200      	movs	r2, #0
 800a15e:	4812      	ldr	r0, [pc, #72]	@ (800a1a8 <LoRaWAN_Init+0xc0>)
 800a160:	f010 fb7a 	bl	801a858 <UTIL_TIMER_Create>
    UTIL_TIMER_Start(&TxTimer);
 800a164:	4810      	ldr	r0, [pc, #64]	@ (800a1a8 <LoRaWAN_Init+0xc0>)
 800a166:	f010 fbad 	bl	801a8c4 <UTIL_TIMER_Start>
  }

  /* USER CODE BEGIN LoRaWAN_Init_Last */

  /* USER CODE END LoRaWAN_Init_Last */
}
 800a16a:	bf00      	nop
 800a16c:	46bd      	mov	sp, r7
 800a16e:	bd80      	pop	{r7, pc}
 800a170:	0800a381 	.word	0x0800a381
 800a174:	20000468 	.word	0x20000468
 800a178:	0800c12d 	.word	0x0800c12d
 800a17c:	0800a1c1 	.word	0x0800a1c1
 800a180:	0800a3a5 	.word	0x0800a3a5
 800a184:	0800a301 	.word	0x0800a301
 800a188:	01030100 	.word	0x01030100
 800a18c:	2000000c 	.word	0x2000000c
 800a190:	20000058 	.word	0x20000058
 800a194:	20000009 	.word	0x20000009
 800a198:	2000044c 	.word	0x2000044c
 800a19c:	2000044d 	.word	0x2000044d
 800a1a0:	20000070 	.word	0x20000070
 800a1a4:	0800a1cd 	.word	0x0800a1cd
 800a1a8:	20000450 	.word	0x20000450

0800a1ac <OnRxData>:
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

static void OnRxData(LmHandlerAppData_t *appData, LmHandlerRxParams_t *params)
{
 800a1ac:	b480      	push	{r7}
 800a1ae:	b083      	sub	sp, #12
 800a1b0:	af00      	add	r7, sp, #0
 800a1b2:	6078      	str	r0, [r7, #4]
 800a1b4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN OnRxData_1 */
  /* USER CODE END OnRxData_1 */
}
 800a1b6:	bf00      	nop
 800a1b8:	370c      	adds	r7, #12
 800a1ba:	46bd      	mov	sp, r7
 800a1bc:	bc80      	pop	{r7}
 800a1be:	4770      	bx	lr

0800a1c0 <SendTxData>:

static void SendTxData(void)
{
 800a1c0:	b480      	push	{r7}
 800a1c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SendTxData_1 */

  /* USER CODE END SendTxData_1 */
}
 800a1c4:	bf00      	nop
 800a1c6:	46bd      	mov	sp, r7
 800a1c8:	bc80      	pop	{r7}
 800a1ca:	4770      	bx	lr

0800a1cc <OnTxTimerEvent>:

static void OnTxTimerEvent(void *context)
{
 800a1cc:	b580      	push	{r7, lr}
 800a1ce:	b082      	sub	sp, #8
 800a1d0:	af00      	add	r7, sp, #0
 800a1d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxTimerEvent_1 */

  /* USER CODE END OnTxTimerEvent_1 */
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), CFG_SEQ_Prio_0);
 800a1d4:	2100      	movs	r1, #0
 800a1d6:	2002      	movs	r0, #2
 800a1d8:	f010 fabe 	bl	801a758 <UTIL_SEQ_SetTask>

  /*Wait for next tx slot*/
  UTIL_TIMER_Start(&TxTimer);
 800a1dc:	4803      	ldr	r0, [pc, #12]	@ (800a1ec <OnTxTimerEvent+0x20>)
 800a1de:	f010 fb71 	bl	801a8c4 <UTIL_TIMER_Start>
  /* USER CODE BEGIN OnTxTimerEvent_2 */

  /* USER CODE END OnTxTimerEvent_2 */
}
 800a1e2:	bf00      	nop
 800a1e4:	3708      	adds	r7, #8
 800a1e6:	46bd      	mov	sp, r7
 800a1e8:	bd80      	pop	{r7, pc}
 800a1ea:	bf00      	nop
 800a1ec:	20000450 	.word	0x20000450

0800a1f0 <OnTxData>:
/* USER CODE BEGIN PrFD_LedEvents */

/* USER CODE END PrFD_LedEvents */

static void OnTxData(LmHandlerTxParams_t *params)
{
 800a1f0:	b480      	push	{r7}
 800a1f2:	b083      	sub	sp, #12
 800a1f4:	af00      	add	r7, sp, #0
 800a1f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxData_1 */
  /* USER CODE END OnTxData_1 */
}
 800a1f8:	bf00      	nop
 800a1fa:	370c      	adds	r7, #12
 800a1fc:	46bd      	mov	sp, r7
 800a1fe:	bc80      	pop	{r7}
 800a200:	4770      	bx	lr

0800a202 <OnJoinRequest>:

static void OnJoinRequest(LmHandlerJoinParams_t *joinParams)
{
 800a202:	b480      	push	{r7}
 800a204:	b083      	sub	sp, #12
 800a206:	af00      	add	r7, sp, #0
 800a208:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnJoinRequest_1 */
  /* USER CODE END OnJoinRequest_1 */
}
 800a20a:	bf00      	nop
 800a20c:	370c      	adds	r7, #12
 800a20e:	46bd      	mov	sp, r7
 800a210:	bc80      	pop	{r7}
 800a212:	4770      	bx	lr

0800a214 <OnBeaconStatusChange>:

static void OnBeaconStatusChange(LmHandlerBeaconParams_t *params)
{
 800a214:	b480      	push	{r7}
 800a216:	b083      	sub	sp, #12
 800a218:	af00      	add	r7, sp, #0
 800a21a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnBeaconStatusChange_1 */
  /* USER CODE END OnBeaconStatusChange_1 */
}
 800a21c:	bf00      	nop
 800a21e:	370c      	adds	r7, #12
 800a220:	46bd      	mov	sp, r7
 800a222:	bc80      	pop	{r7}
 800a224:	4770      	bx	lr

0800a226 <OnSysTimeUpdate>:

static void OnSysTimeUpdate(void)
{
 800a226:	b480      	push	{r7}
 800a228:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnSysTimeUpdate_1 */

  /* USER CODE END OnSysTimeUpdate_1 */
}
 800a22a:	bf00      	nop
 800a22c:	46bd      	mov	sp, r7
 800a22e:	bc80      	pop	{r7}
 800a230:	4770      	bx	lr

0800a232 <OnClassChange>:

static void OnClassChange(DeviceClass_t deviceClass)
{
 800a232:	b480      	push	{r7}
 800a234:	b083      	sub	sp, #12
 800a236:	af00      	add	r7, sp, #0
 800a238:	4603      	mov	r3, r0
 800a23a:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnClassChange_1 */
  /* USER CODE END OnClassChange_1 */
}
 800a23c:	bf00      	nop
 800a23e:	370c      	adds	r7, #12
 800a240:	46bd      	mov	sp, r7
 800a242:	bc80      	pop	{r7}
 800a244:	4770      	bx	lr

0800a246 <OnMacProcessNotify>:

static void OnMacProcessNotify(void)
{
 800a246:	b580      	push	{r7, lr}
 800a248:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnMacProcessNotify_1 */

  /* USER CODE END OnMacProcessNotify_1 */
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LmHandlerProcess), CFG_SEQ_Prio_0);
 800a24a:	2100      	movs	r1, #0
 800a24c:	2001      	movs	r0, #1
 800a24e:	f010 fa83 	bl	801a758 <UTIL_SEQ_SetTask>

  /* USER CODE BEGIN OnMacProcessNotify_2 */

  /* USER CODE END OnMacProcessNotify_2 */
}
 800a252:	bf00      	nop
 800a254:	bd80      	pop	{r7, pc}
	...

0800a258 <OnTxPeriodicityChanged>:

static void OnTxPeriodicityChanged(uint32_t periodicity)
{
 800a258:	b580      	push	{r7, lr}
 800a25a:	b082      	sub	sp, #8
 800a25c:	af00      	add	r7, sp, #0
 800a25e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxPeriodicityChanged_1 */

  /* USER CODE END OnTxPeriodicityChanged_1 */
  TxPeriodicity = periodicity;
 800a260:	4a0d      	ldr	r2, [pc, #52]	@ (800a298 <OnTxPeriodicityChanged+0x40>)
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	6013      	str	r3, [r2, #0]

  if (TxPeriodicity == 0)
 800a266:	4b0c      	ldr	r3, [pc, #48]	@ (800a298 <OnTxPeriodicityChanged+0x40>)
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d103      	bne.n	800a276 <OnTxPeriodicityChanged+0x1e>
  {
    /* Revert to application default periodicity */
    TxPeriodicity = APP_TX_DUTYCYCLE;
 800a26e:	4b0a      	ldr	r3, [pc, #40]	@ (800a298 <OnTxPeriodicityChanged+0x40>)
 800a270:	f242 7210 	movw	r2, #10000	@ 0x2710
 800a274:	601a      	str	r2, [r3, #0]
  }

  /* Update timer periodicity */
  UTIL_TIMER_Stop(&TxTimer);
 800a276:	4809      	ldr	r0, [pc, #36]	@ (800a29c <OnTxPeriodicityChanged+0x44>)
 800a278:	f010 fb92 	bl	801a9a0 <UTIL_TIMER_Stop>
  UTIL_TIMER_SetPeriod(&TxTimer, TxPeriodicity);
 800a27c:	4b06      	ldr	r3, [pc, #24]	@ (800a298 <OnTxPeriodicityChanged+0x40>)
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	4619      	mov	r1, r3
 800a282:	4806      	ldr	r0, [pc, #24]	@ (800a29c <OnTxPeriodicityChanged+0x44>)
 800a284:	f010 fbfc 	bl	801aa80 <UTIL_TIMER_SetPeriod>
  UTIL_TIMER_Start(&TxTimer);
 800a288:	4804      	ldr	r0, [pc, #16]	@ (800a29c <OnTxPeriodicityChanged+0x44>)
 800a28a:	f010 fb1b 	bl	801a8c4 <UTIL_TIMER_Start>
  /* USER CODE BEGIN OnTxPeriodicityChanged_2 */

  /* USER CODE END OnTxPeriodicityChanged_2 */
}
 800a28e:	bf00      	nop
 800a290:	3708      	adds	r7, #8
 800a292:	46bd      	mov	sp, r7
 800a294:	bd80      	pop	{r7, pc}
 800a296:	bf00      	nop
 800a298:	20000070 	.word	0x20000070
 800a29c:	20000450 	.word	0x20000450

0800a2a0 <OnTxFrameCtrlChanged>:

static void OnTxFrameCtrlChanged(LmHandlerMsgTypes_t isTxConfirmed)
{
 800a2a0:	b480      	push	{r7}
 800a2a2:	b083      	sub	sp, #12
 800a2a4:	af00      	add	r7, sp, #0
 800a2a6:	4603      	mov	r3, r0
 800a2a8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnTxFrameCtrlChanged_1 */

  /* USER CODE END OnTxFrameCtrlChanged_1 */
  LmHandlerParams.IsTxConfirmed = isTxConfirmed;
 800a2aa:	4a04      	ldr	r2, [pc, #16]	@ (800a2bc <OnTxFrameCtrlChanged+0x1c>)
 800a2ac:	79fb      	ldrb	r3, [r7, #7]
 800a2ae:	70d3      	strb	r3, [r2, #3]
  /* USER CODE BEGIN OnTxFrameCtrlChanged_2 */

  /* USER CODE END OnTxFrameCtrlChanged_2 */
}
 800a2b0:	bf00      	nop
 800a2b2:	370c      	adds	r7, #12
 800a2b4:	46bd      	mov	sp, r7
 800a2b6:	bc80      	pop	{r7}
 800a2b8:	4770      	bx	lr
 800a2ba:	bf00      	nop
 800a2bc:	20000058 	.word	0x20000058

0800a2c0 <OnPingSlotPeriodicityChanged>:

static void OnPingSlotPeriodicityChanged(uint8_t pingSlotPeriodicity)
{
 800a2c0:	b480      	push	{r7}
 800a2c2:	b083      	sub	sp, #12
 800a2c4:	af00      	add	r7, sp, #0
 800a2c6:	4603      	mov	r3, r0
 800a2c8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnPingSlotPeriodicityChanged_1 */

  /* USER CODE END OnPingSlotPeriodicityChanged_1 */
  LmHandlerParams.PingSlotPeriodicity = pingSlotPeriodicity;
 800a2ca:	4a04      	ldr	r2, [pc, #16]	@ (800a2dc <OnPingSlotPeriodicityChanged+0x1c>)
 800a2cc:	79fb      	ldrb	r3, [r7, #7]
 800a2ce:	7413      	strb	r3, [r2, #16]
  /* USER CODE BEGIN OnPingSlotPeriodicityChanged_2 */

  /* USER CODE END OnPingSlotPeriodicityChanged_2 */
}
 800a2d0:	bf00      	nop
 800a2d2:	370c      	adds	r7, #12
 800a2d4:	46bd      	mov	sp, r7
 800a2d6:	bc80      	pop	{r7}
 800a2d8:	4770      	bx	lr
 800a2da:	bf00      	nop
 800a2dc:	20000058 	.word	0x20000058

0800a2e0 <OnSystemReset>:

static void OnSystemReset(void)
{
 800a2e0:	b580      	push	{r7, lr}
 800a2e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnSystemReset_1 */

  /* USER CODE END OnSystemReset_1 */
  if ((LORAMAC_HANDLER_SUCCESS == LmHandlerHalt()) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 800a2e4:	f002 fcf9 	bl	800ccda <LmHandlerHalt>
 800a2e8:	4603      	mov	r3, r0
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d106      	bne.n	800a2fc <OnSystemReset+0x1c>
 800a2ee:	f001 ffcd 	bl	800c28c <LmHandlerJoinStatus>
 800a2f2:	4603      	mov	r3, r0
 800a2f4:	2b01      	cmp	r3, #1
 800a2f6:	d101      	bne.n	800a2fc <OnSystemReset+0x1c>
  {
    NVIC_SystemReset();
 800a2f8:	f7ff fee0 	bl	800a0bc <__NVIC_SystemReset>
  }
  /* USER CODE BEGIN OnSystemReset_Last */

  /* USER CODE END OnSystemReset_Last */
}
 800a2fc:	bf00      	nop
 800a2fe:	bd80      	pop	{r7, pc}

0800a300 <StopJoin>:

static void StopJoin(void)
{
 800a300:	b580      	push	{r7, lr}
 800a302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN StopJoin_1 */

  /* USER CODE END StopJoin_1 */

  UTIL_TIMER_Stop(&TxTimer);
 800a304:	4817      	ldr	r0, [pc, #92]	@ (800a364 <StopJoin+0x64>)
 800a306:	f010 fb4b 	bl	801a9a0 <UTIL_TIMER_Stop>

  if (LORAMAC_HANDLER_SUCCESS != LmHandlerStop())
 800a30a:	f002 fcd9 	bl	800ccc0 <LmHandlerStop>
 800a30e:	4603      	mov	r3, r0
 800a310:	2b00      	cmp	r3, #0
 800a312:	d006      	beq.n	800a322 <StopJoin+0x22>
  {
    APP_LOG(TS_OFF, VLEVEL_M, "LmHandler Stop on going ...\r\n");
 800a314:	4b14      	ldr	r3, [pc, #80]	@ (800a368 <StopJoin+0x68>)
 800a316:	2200      	movs	r2, #0
 800a318:	2100      	movs	r1, #0
 800a31a:	2002      	movs	r0, #2
 800a31c:	f010 fcca 	bl	801acb4 <UTIL_ADV_TRACE_COND_FSend>
 800a320:	e01a      	b.n	800a358 <StopJoin+0x58>
  }
  else
  {
    APP_LOG(TS_OFF, VLEVEL_M, "LmHandler Stopped\r\n");
 800a322:	4b12      	ldr	r3, [pc, #72]	@ (800a36c <StopJoin+0x6c>)
 800a324:	2200      	movs	r2, #0
 800a326:	2100      	movs	r1, #0
 800a328:	2002      	movs	r0, #2
 800a32a:	f010 fcc3 	bl	801acb4 <UTIL_ADV_TRACE_COND_FSend>
      ActivationType = ACTIVATION_TYPE_OTAA;
      APP_LOG(TS_OFF, VLEVEL_M, "LmHandler switch to OTAA mode\r\n");
    }
    else
    {
      ActivationType = ACTIVATION_TYPE_ABP;
 800a32e:	4b10      	ldr	r3, [pc, #64]	@ (800a370 <StopJoin+0x70>)
 800a330:	2201      	movs	r2, #1
 800a332:	701a      	strb	r2, [r3, #0]
      APP_LOG(TS_OFF, VLEVEL_M, "LmHandler switch to ABP mode\r\n");
 800a334:	4b0f      	ldr	r3, [pc, #60]	@ (800a374 <StopJoin+0x74>)
 800a336:	2200      	movs	r2, #0
 800a338:	2100      	movs	r1, #0
 800a33a:	2002      	movs	r0, #2
 800a33c:	f010 fcba 	bl	801acb4 <UTIL_ADV_TRACE_COND_FSend>
    }
    LmHandlerConfigure(&LmHandlerParams);
 800a340:	480d      	ldr	r0, [pc, #52]	@ (800a378 <StopJoin+0x78>)
 800a342:	f001 fe39 	bl	800bfb8 <LmHandlerConfigure>
    LmHandlerJoin(ActivationType, true);
 800a346:	4b0a      	ldr	r3, [pc, #40]	@ (800a370 <StopJoin+0x70>)
 800a348:	781b      	ldrb	r3, [r3, #0]
 800a34a:	2101      	movs	r1, #1
 800a34c:	4618      	mov	r0, r3
 800a34e:	f001 fef9 	bl	800c144 <LmHandlerJoin>
    UTIL_TIMER_Start(&TxTimer);
 800a352:	4804      	ldr	r0, [pc, #16]	@ (800a364 <StopJoin+0x64>)
 800a354:	f010 fab6 	bl	801a8c4 <UTIL_TIMER_Start>
  }
  UTIL_TIMER_Start(&StopJoinTimer);
 800a358:	4808      	ldr	r0, [pc, #32]	@ (800a37c <StopJoin+0x7c>)
 800a35a:	f010 fab3 	bl	801a8c4 <UTIL_TIMER_Start>
  /* USER CODE BEGIN StopJoin_Last */

  /* USER CODE END StopJoin_Last */
}
 800a35e:	bf00      	nop
 800a360:	bd80      	pop	{r7, pc}
 800a362:	bf00      	nop
 800a364:	20000450 	.word	0x20000450
 800a368:	0801b340 	.word	0x0801b340
 800a36c:	0801b360 	.word	0x0801b360
 800a370:	20000009 	.word	0x20000009
 800a374:	0801b374 	.word	0x0801b374
 800a378:	20000058 	.word	0x20000058
 800a37c:	20000468 	.word	0x20000468

0800a380 <OnStopJoinTimerEvent>:

static void OnStopJoinTimerEvent(void *context)
{
 800a380:	b580      	push	{r7, lr}
 800a382:	b082      	sub	sp, #8
 800a384:	af00      	add	r7, sp, #0
 800a386:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnStopJoinTimerEvent_1 */

  /* USER CODE END OnStopJoinTimerEvent_1 */
  if (ActivationType == LORAWAN_DEFAULT_ACTIVATION_TYPE)
 800a388:	4b05      	ldr	r3, [pc, #20]	@ (800a3a0 <OnStopJoinTimerEvent+0x20>)
 800a38a:	781b      	ldrb	r3, [r3, #0]
 800a38c:	2b02      	cmp	r3, #2
 800a38e:	d103      	bne.n	800a398 <OnStopJoinTimerEvent+0x18>
  {
    UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaStopJoinEvent), CFG_SEQ_Prio_0);
 800a390:	2100      	movs	r1, #0
 800a392:	2008      	movs	r0, #8
 800a394:	f010 f9e0 	bl	801a758 <UTIL_SEQ_SetTask>
  }
  /* USER CODE BEGIN OnStopJoinTimerEvent_Last */

  /* USER CODE END OnStopJoinTimerEvent_Last */
}
 800a398:	bf00      	nop
 800a39a:	3708      	adds	r7, #8
 800a39c:	46bd      	mov	sp, r7
 800a39e:	bd80      	pop	{r7, pc}
 800a3a0:	20000009 	.word	0x20000009

0800a3a4 <StoreContext>:

static void StoreContext(void)
{
 800a3a4:	b580      	push	{r7, lr}
 800a3a6:	b082      	sub	sp, #8
 800a3a8:	af00      	add	r7, sp, #0
  LmHandlerErrorStatus_t status = LORAMAC_HANDLER_ERROR;
 800a3aa:	23ff      	movs	r3, #255	@ 0xff
 800a3ac:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN StoreContext_1 */

  /* USER CODE END StoreContext_1 */
  status = LmHandlerNvmDataStore();
 800a3ae:	f002 fcc9 	bl	800cd44 <LmHandlerNvmDataStore>
 800a3b2:	4603      	mov	r3, r0
 800a3b4:	71fb      	strb	r3, [r7, #7]

  if (status == LORAMAC_HANDLER_NVM_DATA_UP_TO_DATE)
 800a3b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a3ba:	f113 0f08 	cmn.w	r3, #8
 800a3be:	d106      	bne.n	800a3ce <StoreContext+0x2a>
  {
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA UP TO DATE\r\n");
 800a3c0:	4b0a      	ldr	r3, [pc, #40]	@ (800a3ec <StoreContext+0x48>)
 800a3c2:	2200      	movs	r2, #0
 800a3c4:	2100      	movs	r1, #0
 800a3c6:	2002      	movs	r0, #2
 800a3c8:	f010 fc74 	bl	801acb4 <UTIL_ADV_TRACE_COND_FSend>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORE FAILED\r\n");
  }
  /* USER CODE BEGIN StoreContext_Last */

  /* USER CODE END StoreContext_Last */
}
 800a3cc:	e00a      	b.n	800a3e4 <StoreContext+0x40>
  else if (status == LORAMAC_HANDLER_ERROR)
 800a3ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a3d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3d6:	d105      	bne.n	800a3e4 <StoreContext+0x40>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORE FAILED\r\n");
 800a3d8:	4b05      	ldr	r3, [pc, #20]	@ (800a3f0 <StoreContext+0x4c>)
 800a3da:	2200      	movs	r2, #0
 800a3dc:	2100      	movs	r1, #0
 800a3de:	2002      	movs	r0, #2
 800a3e0:	f010 fc68 	bl	801acb4 <UTIL_ADV_TRACE_COND_FSend>
}
 800a3e4:	bf00      	nop
 800a3e6:	3708      	adds	r7, #8
 800a3e8:	46bd      	mov	sp, r7
 800a3ea:	bd80      	pop	{r7, pc}
 800a3ec:	0801b394 	.word	0x0801b394
 800a3f0:	0801b3ac 	.word	0x0801b3ac

0800a3f4 <OnNvmDataChange>:

static void OnNvmDataChange(LmHandlerNvmContextStates_t state)
{
 800a3f4:	b580      	push	{r7, lr}
 800a3f6:	b082      	sub	sp, #8
 800a3f8:	af00      	add	r7, sp, #0
 800a3fa:	4603      	mov	r3, r0
 800a3fc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnNvmDataChange_1 */

  /* USER CODE END OnNvmDataChange_1 */
  if (state == LORAMAC_HANDLER_NVM_STORE)
 800a3fe:	79fb      	ldrb	r3, [r7, #7]
 800a400:	2b01      	cmp	r3, #1
 800a402:	d106      	bne.n	800a412 <OnNvmDataChange+0x1e>
  {
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORED\r\n");
 800a404:	4b08      	ldr	r3, [pc, #32]	@ (800a428 <OnNvmDataChange+0x34>)
 800a406:	2200      	movs	r2, #0
 800a408:	2100      	movs	r1, #0
 800a40a:	2002      	movs	r0, #2
 800a40c:	f010 fc52 	bl	801acb4 <UTIL_ADV_TRACE_COND_FSend>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA RESTORED\r\n");
  }
  /* USER CODE BEGIN OnNvmDataChange_Last */

  /* USER CODE END OnNvmDataChange_Last */
}
 800a410:	e005      	b.n	800a41e <OnNvmDataChange+0x2a>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA RESTORED\r\n");
 800a412:	4b06      	ldr	r3, [pc, #24]	@ (800a42c <OnNvmDataChange+0x38>)
 800a414:	2200      	movs	r2, #0
 800a416:	2100      	movs	r1, #0
 800a418:	2002      	movs	r0, #2
 800a41a:	f010 fc4b 	bl	801acb4 <UTIL_ADV_TRACE_COND_FSend>
}
 800a41e:	bf00      	nop
 800a420:	3708      	adds	r7, #8
 800a422:	46bd      	mov	sp, r7
 800a424:	bd80      	pop	{r7, pc}
 800a426:	bf00      	nop
 800a428:	0801b3c4 	.word	0x0801b3c4
 800a42c:	0801b3d8 	.word	0x0801b3d8

0800a430 <OnStoreContextRequest>:

static void OnStoreContextRequest(void *nvm, uint32_t nvm_size)
{
 800a430:	b580      	push	{r7, lr}
 800a432:	b082      	sub	sp, #8
 800a434:	af00      	add	r7, sp, #0
 800a436:	6078      	str	r0, [r7, #4]
 800a438:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN OnStoreContextRequest_1 */

  /* USER CODE END OnStoreContextRequest_1 */
  /* store nvm in flash */
  if (FLASH_IF_Erase(LORAWAN_NVM_BASE_ADDRESS, FLASH_PAGE_SIZE) == FLASH_IF_OK)
 800a43a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800a43e:	4807      	ldr	r0, [pc, #28]	@ (800a45c <OnStoreContextRequest+0x2c>)
 800a440:	f7f6 fdd8 	bl	8000ff4 <FLASH_IF_Erase>
 800a444:	4603      	mov	r3, r0
 800a446:	2b00      	cmp	r3, #0
 800a448:	d104      	bne.n	800a454 <OnStoreContextRequest+0x24>
  {
    FLASH_IF_Write(LORAWAN_NVM_BASE_ADDRESS, (const void *)nvm, nvm_size);
 800a44a:	683a      	ldr	r2, [r7, #0]
 800a44c:	6879      	ldr	r1, [r7, #4]
 800a44e:	4803      	ldr	r0, [pc, #12]	@ (800a45c <OnStoreContextRequest+0x2c>)
 800a450:	f7f6 fd80 	bl	8000f54 <FLASH_IF_Write>
  }
  /* USER CODE BEGIN OnStoreContextRequest_Last */

  /* USER CODE END OnStoreContextRequest_Last */
}
 800a454:	bf00      	nop
 800a456:	3708      	adds	r7, #8
 800a458:	46bd      	mov	sp, r7
 800a45a:	bd80      	pop	{r7, pc}
 800a45c:	0803f000 	.word	0x0803f000

0800a460 <OnRestoreContextRequest>:

static void OnRestoreContextRequest(void *nvm, uint32_t nvm_size)
{
 800a460:	b580      	push	{r7, lr}
 800a462:	b082      	sub	sp, #8
 800a464:	af00      	add	r7, sp, #0
 800a466:	6078      	str	r0, [r7, #4]
 800a468:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN OnRestoreContextRequest_1 */

  /* USER CODE END OnRestoreContextRequest_1 */
  FLASH_IF_Read(nvm, LORAWAN_NVM_BASE_ADDRESS, nvm_size);
 800a46a:	683a      	ldr	r2, [r7, #0]
 800a46c:	4903      	ldr	r1, [pc, #12]	@ (800a47c <OnRestoreContextRequest+0x1c>)
 800a46e:	6878      	ldr	r0, [r7, #4]
 800a470:	f7f6 fd98 	bl	8000fa4 <FLASH_IF_Read>
  /* USER CODE BEGIN OnRestoreContextRequest_Last */

  /* USER CODE END OnRestoreContextRequest_Last */
}
 800a474:	bf00      	nop
 800a476:	3708      	adds	r7, #8
 800a478:	46bd      	mov	sp, r7
 800a47a:	bd80      	pop	{r7, pc}
 800a47c:	0803f000 	.word	0x0803f000

0800a480 <LoraInfo_Init>:

/* USER CODE END EV */

/* Exported functions --------------------------------------------------------*/
void LoraInfo_Init(void)
{
 800a480:	b580      	push	{r7, lr}
 800a482:	af00      	add	r7, sp, #0
  loraInfo.ContextManagement = 0;
 800a484:	4b15      	ldr	r3, [pc, #84]	@ (800a4dc <LoraInfo_Init+0x5c>)
 800a486:	2200      	movs	r2, #0
 800a488:	601a      	str	r2, [r3, #0]
  loraInfo.Region = 0;
 800a48a:	4b14      	ldr	r3, [pc, #80]	@ (800a4dc <LoraInfo_Init+0x5c>)
 800a48c:	2200      	movs	r2, #0
 800a48e:	605a      	str	r2, [r3, #4]
  loraInfo.ClassB = 0;
 800a490:	4b12      	ldr	r3, [pc, #72]	@ (800a4dc <LoraInfo_Init+0x5c>)
 800a492:	2200      	movs	r2, #0
 800a494:	609a      	str	r2, [r3, #8]
  loraInfo.Kms = 0;
 800a496:	4b11      	ldr	r3, [pc, #68]	@ (800a4dc <LoraInfo_Init+0x5c>)
 800a498:	2200      	movs	r2, #0
 800a49a:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN LoraInfo_Init_1 */

  /* USER CODE END LoraInfo_Init_1 */

#ifdef  REGION_AS923
  loraInfo.Region |= (1 << LORAMAC_REGION_AS923);
 800a49c:	4b0f      	ldr	r3, [pc, #60]	@ (800a4dc <LoraInfo_Init+0x5c>)
 800a49e:	685b      	ldr	r3, [r3, #4]
 800a4a0:	f043 0301 	orr.w	r3, r3, #1
 800a4a4:	4a0d      	ldr	r2, [pc, #52]	@ (800a4dc <LoraInfo_Init+0x5c>)
 800a4a6:	6053      	str	r3, [r2, #4]
#endif /* REGION_US915 */
#ifdef  REGION_RU864
  loraInfo.Region |= (1 << LORAMAC_REGION_RU864);
#endif /* REGION_RU864 */

  if (loraInfo.Region == 0)
 800a4a8:	4b0c      	ldr	r3, [pc, #48]	@ (800a4dc <LoraInfo_Init+0x5c>)
 800a4aa:	685b      	ldr	r3, [r3, #4]
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d10d      	bne.n	800a4cc <LoraInfo_Init+0x4c>
  {
    APP_PRINTF("error: At least one region shall be defined in the MW: check lorawan_conf.h \r\n");
 800a4b0:	4b0b      	ldr	r3, [pc, #44]	@ (800a4e0 <LoraInfo_Init+0x60>)
 800a4b2:	2200      	movs	r2, #0
 800a4b4:	2100      	movs	r1, #0
 800a4b6:	2000      	movs	r0, #0
 800a4b8:	f010 fbfc 	bl	801acb4 <UTIL_ADV_TRACE_COND_FSend>
    while (1 != UTIL_ADV_TRACE_IsBufferEmpty())
 800a4bc:	bf00      	nop
 800a4be:	f010 fbe7 	bl	801ac90 <UTIL_ADV_TRACE_IsBufferEmpty>
 800a4c2:	4603      	mov	r3, r0
 800a4c4:	2b01      	cmp	r3, #1
 800a4c6:	d1fa      	bne.n	800a4be <LoraInfo_Init+0x3e>
    {
      /* Wait that all printfs are completed*/
    }
    while (1) {} /* At least one region shall be defined */
 800a4c8:	bf00      	nop
 800a4ca:	e7fd      	b.n	800a4c8 <LoraInfo_Init+0x48>
#elif !defined (LORAMAC_CLASSB_ENABLED)
#error LORAMAC_CLASSB_ENABLED not defined ( shall be <0 or 1> )
#endif /* LORAMAC_CLASSB_ENABLED */

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
  loraInfo.Kms = 0;
 800a4cc:	4b03      	ldr	r3, [pc, #12]	@ (800a4dc <LoraInfo_Init+0x5c>)
 800a4ce:	2200      	movs	r2, #0
 800a4d0:	60da      	str	r2, [r3, #12]
#else /* LORAWAN_KMS == 1 */
  loraInfo.Kms = 1;
#endif /* LORAWAN_KMS */

#if (!defined (CONTEXT_MANAGEMENT_ENABLED) || (CONTEXT_MANAGEMENT_ENABLED == 0))
  loraInfo.ContextManagement = 0;
 800a4d2:	4b02      	ldr	r3, [pc, #8]	@ (800a4dc <LoraInfo_Init+0x5c>)
 800a4d4:	2200      	movs	r2, #0
 800a4d6:	601a      	str	r2, [r3, #0]
#endif /* CONTEXT_MANAGEMENT_ENABLED */

  /* USER CODE BEGIN LoraInfo_Init_2 */

  /* USER CODE END LoraInfo_Init_2 */
}
 800a4d8:	bf00      	nop
 800a4da:	bd80      	pop	{r7, pc}
 800a4dc:	20000480 	.word	0x20000480
 800a4e0:	0801b3ec 	.word	0x0801b3ec

0800a4e4 <LoraInfo_GetPtr>:

LoraInfo_t *LoraInfo_GetPtr(void)
{
 800a4e4:	b480      	push	{r7}
 800a4e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LoraInfo_GetPtr */

  /* USER CODE END LoraInfo_GetPtr */
  return &loraInfo;
 800a4e8:	4b02      	ldr	r3, [pc, #8]	@ (800a4f4 <LoraInfo_GetPtr+0x10>)
}
 800a4ea:	4618      	mov	r0, r3
 800a4ec:	46bd      	mov	sp, r7
 800a4ee:	bc80      	pop	{r7}
 800a4f0:	4770      	bx	lr
 800a4f2:	bf00      	nop
 800a4f4:	20000480 	.word	0x20000480

0800a4f8 <RBI_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t RBI_Init(void)
{
 800a4f8:	b480      	push	{r7}
 800a4fa:	b083      	sub	sp, #12
 800a4fc:	af00      	add	r7, sp, #0
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_Init();
#else
  /* 2/ Or implement RBI_Init here */
  int32_t retcode = 0;
 800a4fe:	2300      	movs	r3, #0
 800a500:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RBI_Init_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_Init_2 */
  return retcode;
 800a502:	687b      	ldr	r3, [r7, #4]
#endif  /* USE_BSP_DRIVER  */
}
 800a504:	4618      	mov	r0, r3
 800a506:	370c      	adds	r7, #12
 800a508:	46bd      	mov	sp, r7
 800a50a:	bc80      	pop	{r7}
 800a50c:	4770      	bx	lr

0800a50e <RBI_ConfigRFSwitch>:
  return retcode;
#endif  /* USE_BSP_DRIVER */
}

int32_t RBI_ConfigRFSwitch(RBI_Switch_TypeDef Config)
{
 800a50e:	b480      	push	{r7}
 800a510:	b085      	sub	sp, #20
 800a512:	af00      	add	r7, sp, #0
 800a514:	4603      	mov	r3, r0
 800a516:	71fb      	strb	r3, [r7, #7]
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_ConfigRFSwitch((BSP_RADIO_Switch_TypeDef) Config);
#else
  /* 2/ Or implement RBI_ConfigRFSwitch here */
  int32_t retcode = 0;
 800a518:	2300      	movs	r3, #0
 800a51a:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN RBI_ConfigRFSwitch_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_ConfigRFSwitch_2 */
  return retcode;
 800a51c:	68fb      	ldr	r3, [r7, #12]
#endif  /* USE_BSP_DRIVER */
}
 800a51e:	4618      	mov	r0, r3
 800a520:	3714      	adds	r7, #20
 800a522:	46bd      	mov	sp, r7
 800a524:	bc80      	pop	{r7}
 800a526:	4770      	bx	lr

0800a528 <RBI_GetTxConfig>:

int32_t RBI_GetTxConfig(void)
{
 800a528:	b480      	push	{r7}
 800a52a:	b083      	sub	sp, #12
 800a52c:	af00      	add	r7, sp, #0
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetTxConfig();
#else
  /* 2/ Or implement RBI_GetTxConfig here */
  int32_t retcode = RBI_CONF_RFO;
 800a52e:	2300      	movs	r3, #0
 800a530:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RBI_GetTxConfig_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_GetTxConfig_2 */
  return retcode;
 800a532:	687b      	ldr	r3, [r7, #4]
#endif  /* USE_BSP_DRIVER */
}
 800a534:	4618      	mov	r0, r3
 800a536:	370c      	adds	r7, #12
 800a538:	46bd      	mov	sp, r7
 800a53a:	bc80      	pop	{r7}
 800a53c:	4770      	bx	lr

0800a53e <RBI_IsTCXO>:

int32_t RBI_IsTCXO(void)
{
 800a53e:	b480      	push	{r7}
 800a540:	b083      	sub	sp, #12
 800a542:	af00      	add	r7, sp, #0
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsTCXO();
#else
  /* 2/ Or implement RBI_IsTCXO here */
  int32_t retcode = IS_TCXO_SUPPORTED;
 800a544:	2301      	movs	r3, #1
 800a546:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RBI_IsTCXO_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsTCXO_2 */
  return retcode;
 800a548:	687b      	ldr	r3, [r7, #4]
#endif  /* USE_BSP_DRIVER  */
}
 800a54a:	4618      	mov	r0, r3
 800a54c:	370c      	adds	r7, #12
 800a54e:	46bd      	mov	sp, r7
 800a550:	bc80      	pop	{r7}
 800a552:	4770      	bx	lr

0800a554 <RBI_IsDCDC>:

int32_t RBI_IsDCDC(void)
{
 800a554:	b480      	push	{r7}
 800a556:	b083      	sub	sp, #12
 800a558:	af00      	add	r7, sp, #0
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsDCDC();
#else
  /* 2/ Or implement RBI_IsDCDC here */
  int32_t retcode = IS_DCDC_SUPPORTED;
 800a55a:	2301      	movs	r3, #1
 800a55c:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RBI_IsDCDC_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsDCDC_2 */
  return retcode;
 800a55e:	687b      	ldr	r3, [r7, #4]
#endif  /* USE_BSP_DRIVER  */
}
 800a560:	4618      	mov	r0, r3
 800a562:	370c      	adds	r7, #12
 800a564:	46bd      	mov	sp, r7
 800a566:	bc80      	pop	{r7}
 800a568:	4770      	bx	lr

0800a56a <RBI_GetRFOMaxPowerConfig>:

int32_t RBI_GetRFOMaxPowerConfig(RBI_RFOMaxPowerConfig_TypeDef Config)
{
 800a56a:	b480      	push	{r7}
 800a56c:	b085      	sub	sp, #20
 800a56e:	af00      	add	r7, sp, #0
 800a570:	4603      	mov	r3, r0
 800a572:	71fb      	strb	r3, [r7, #7]
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetRFOMaxPowerConfig((BSP_RADIO_RFOMaxPowerConfig_TypeDef) Config);
#else
  /* 2/ Or implement RBI_RBI_GetRFOMaxPowerConfig here */
  int32_t ret = 0;
 800a574:	2300      	movs	r3, #0
 800a576:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN RBI_GetRFOMaxPowerConfig_2 */
#warning user to provide its board code or to call his board driver functions
  if (Config == RBI_RFO_LP_MAXPOWER)
 800a578:	79fb      	ldrb	r3, [r7, #7]
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d102      	bne.n	800a584 <RBI_GetRFOMaxPowerConfig+0x1a>
  {
    ret = 15; /*dBm*/
 800a57e:	230f      	movs	r3, #15
 800a580:	60fb      	str	r3, [r7, #12]
 800a582:	e001      	b.n	800a588 <RBI_GetRFOMaxPowerConfig+0x1e>
  }
  else
  {
    ret = 22; /*dBm*/
 800a584:	2316      	movs	r3, #22
 800a586:	60fb      	str	r3, [r7, #12]
  }
  /* USER CODE END RBI_GetRFOMaxPowerConfig_2 */
  return ret;
 800a588:	68fb      	ldr	r3, [r7, #12]
#endif  /* USE_BSP_DRIVER  */
}
 800a58a:	4618      	mov	r0, r3
 800a58c:	3714      	adds	r7, #20
 800a58e:	46bd      	mov	sp, r7
 800a590:	bc80      	pop	{r7}
 800a592:	4770      	bx	lr

0800a594 <AES_CMAC_Init>:
            ( r )[i] = ( r )[i] ^ ( v )[i]; \
        }                                   \
    } while( 0 )

void AES_CMAC_Init( AES_CMAC_CTX* ctx )
{
 800a594:	b580      	push	{r7, lr}
 800a596:	b082      	sub	sp, #8
 800a598:	af00      	add	r7, sp, #0
 800a59a:	6078      	str	r0, [r7, #4]
    memset1( ctx->X, 0, sizeof ctx->X );
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	33f1      	adds	r3, #241	@ 0xf1
 800a5a0:	2210      	movs	r2, #16
 800a5a2:	2100      	movs	r1, #0
 800a5a4:	4618      	mov	r0, r3
 800a5a6:	f00c f883 	bl	80166b0 <memset1>
    ctx->M_n = 0;
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	2200      	movs	r2, #0
 800a5ae:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
    memset1( ctx->rijndael.ksch, '\0', 240 );
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	22f0      	movs	r2, #240	@ 0xf0
 800a5b6:	2100      	movs	r1, #0
 800a5b8:	4618      	mov	r0, r3
 800a5ba:	f00c f879 	bl	80166b0 <memset1>
}
 800a5be:	bf00      	nop
 800a5c0:	3708      	adds	r7, #8
 800a5c2:	46bd      	mov	sp, r7
 800a5c4:	bd80      	pop	{r7, pc}

0800a5c6 <AES_CMAC_SetKey>:

void AES_CMAC_SetKey( AES_CMAC_CTX* ctx, const uint8_t key[AES_CMAC_KEY_LENGTH] )
{
 800a5c6:	b580      	push	{r7, lr}
 800a5c8:	b082      	sub	sp, #8
 800a5ca:	af00      	add	r7, sp, #0
 800a5cc:	6078      	str	r0, [r7, #4]
 800a5ce:	6039      	str	r1, [r7, #0]
    lorawan_aes_set_key( key, AES_CMAC_KEY_LENGTH, &ctx->rijndael );
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	461a      	mov	r2, r3
 800a5d4:	2110      	movs	r1, #16
 800a5d6:	6838      	ldr	r0, [r7, #0]
 800a5d8:	f000 fe5c 	bl	800b294 <lorawan_aes_set_key>
}
 800a5dc:	bf00      	nop
 800a5de:	3708      	adds	r7, #8
 800a5e0:	46bd      	mov	sp, r7
 800a5e2:	bd80      	pop	{r7, pc}

0800a5e4 <AES_CMAC_Update>:

void AES_CMAC_Update( AES_CMAC_CTX* ctx, const uint8_t* data, uint32_t len )
{
 800a5e4:	b580      	push	{r7, lr}
 800a5e6:	b08c      	sub	sp, #48	@ 0x30
 800a5e8:	af00      	add	r7, sp, #0
 800a5ea:	60f8      	str	r0, [r7, #12]
 800a5ec:	60b9      	str	r1, [r7, #8]
 800a5ee:	607a      	str	r2, [r7, #4]
    uint32_t mlen;
    uint8_t  in[16];

    if( ctx->M_n > 0 )
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	f000 80a1 	beq.w	800a73e <AES_CMAC_Update+0x15a>
    {
        mlen = MIN( 16 - ctx->M_n, len );
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800a602:	f1c3 0310 	rsb	r3, r3, #16
 800a606:	687a      	ldr	r2, [r7, #4]
 800a608:	4293      	cmp	r3, r2
 800a60a:	bf28      	it	cs
 800a60c:	4613      	movcs	r3, r2
 800a60e:	627b      	str	r3, [r7, #36]	@ 0x24
        memcpy1( ctx->M_last + ctx->M_n, data, mlen );
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	f203 1201 	addw	r2, r3, #257	@ 0x101
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800a61c:	4413      	add	r3, r2
 800a61e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a620:	b292      	uxth	r2, r2
 800a622:	68b9      	ldr	r1, [r7, #8]
 800a624:	4618      	mov	r0, r3
 800a626:	f00c f808 	bl	801663a <memcpy1>
        ctx->M_n += mlen;
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	f8d3 2114 	ldr.w	r2, [r3, #276]	@ 0x114
 800a630:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a632:	441a      	add	r2, r3
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
        if( ctx->M_n < 16 || len == mlen )
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800a640:	2b0f      	cmp	r3, #15
 800a642:	f240 808d 	bls.w	800a760 <AES_CMAC_Update+0x17c>
 800a646:	687a      	ldr	r2, [r7, #4]
 800a648:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a64a:	429a      	cmp	r2, r3
 800a64c:	f000 8088 	beq.w	800a760 <AES_CMAC_Update+0x17c>
            return;
        XOR( ctx->M_last, ctx->X );
 800a650:	2300      	movs	r3, #0
 800a652:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a654:	e015      	b.n	800a682 <AES_CMAC_Update+0x9e>
 800a656:	68fa      	ldr	r2, [r7, #12]
 800a658:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a65a:	4413      	add	r3, r2
 800a65c:	33f1      	adds	r3, #241	@ 0xf1
 800a65e:	781a      	ldrb	r2, [r3, #0]
 800a660:	68f9      	ldr	r1, [r7, #12]
 800a662:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a664:	440b      	add	r3, r1
 800a666:	f203 1301 	addw	r3, r3, #257	@ 0x101
 800a66a:	781b      	ldrb	r3, [r3, #0]
 800a66c:	4053      	eors	r3, r2
 800a66e:	b2d9      	uxtb	r1, r3
 800a670:	68fa      	ldr	r2, [r7, #12]
 800a672:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a674:	4413      	add	r3, r2
 800a676:	33f1      	adds	r3, #241	@ 0xf1
 800a678:	460a      	mov	r2, r1
 800a67a:	701a      	strb	r2, [r3, #0]
 800a67c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a67e:	3301      	adds	r3, #1
 800a680:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a682:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a684:	2b0f      	cmp	r3, #15
 800a686:	dde6      	ble.n	800a656 <AES_CMAC_Update+0x72>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	f103 01f1 	add.w	r1, r3, #241	@ 0xf1
 800a68e:	f107 0314 	add.w	r3, r7, #20
 800a692:	2210      	movs	r2, #16
 800a694:	4618      	mov	r0, r3
 800a696:	f00b ffd0 	bl	801663a <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 800a69a:	68fa      	ldr	r2, [r7, #12]
 800a69c:	f107 0114 	add.w	r1, r7, #20
 800a6a0:	f107 0314 	add.w	r3, r7, #20
 800a6a4:	4618      	mov	r0, r3
 800a6a6:	f000 fed3 	bl	800b450 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	33f1      	adds	r3, #241	@ 0xf1
 800a6ae:	f107 0114 	add.w	r1, r7, #20
 800a6b2:	2210      	movs	r2, #16
 800a6b4:	4618      	mov	r0, r3
 800a6b6:	f00b ffc0 	bl	801663a <memcpy1>

        data += mlen;
 800a6ba:	68ba      	ldr	r2, [r7, #8]
 800a6bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6be:	4413      	add	r3, r2
 800a6c0:	60bb      	str	r3, [r7, #8]
        len -= mlen;
 800a6c2:	687a      	ldr	r2, [r7, #4]
 800a6c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6c6:	1ad3      	subs	r3, r2, r3
 800a6c8:	607b      	str	r3, [r7, #4]
    }
    while( len > 16 )
 800a6ca:	e038      	b.n	800a73e <AES_CMAC_Update+0x15a>
    { /* not last block */

        XOR( data, ctx->X );
 800a6cc:	2300      	movs	r3, #0
 800a6ce:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a6d0:	e013      	b.n	800a6fa <AES_CMAC_Update+0x116>
 800a6d2:	68fa      	ldr	r2, [r7, #12]
 800a6d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6d6:	4413      	add	r3, r2
 800a6d8:	33f1      	adds	r3, #241	@ 0xf1
 800a6da:	781a      	ldrb	r2, [r3, #0]
 800a6dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6de:	68b9      	ldr	r1, [r7, #8]
 800a6e0:	440b      	add	r3, r1
 800a6e2:	781b      	ldrb	r3, [r3, #0]
 800a6e4:	4053      	eors	r3, r2
 800a6e6:	b2d9      	uxtb	r1, r3
 800a6e8:	68fa      	ldr	r2, [r7, #12]
 800a6ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6ec:	4413      	add	r3, r2
 800a6ee:	33f1      	adds	r3, #241	@ 0xf1
 800a6f0:	460a      	mov	r2, r1
 800a6f2:	701a      	strb	r2, [r3, #0]
 800a6f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6f6:	3301      	adds	r3, #1
 800a6f8:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a6fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6fc:	2b0f      	cmp	r3, #15
 800a6fe:	dde8      	ble.n	800a6d2 <AES_CMAC_Update+0xee>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	f103 01f1 	add.w	r1, r3, #241	@ 0xf1
 800a706:	f107 0314 	add.w	r3, r7, #20
 800a70a:	2210      	movs	r2, #16
 800a70c:	4618      	mov	r0, r3
 800a70e:	f00b ff94 	bl	801663a <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 800a712:	68fa      	ldr	r2, [r7, #12]
 800a714:	f107 0114 	add.w	r1, r7, #20
 800a718:	f107 0314 	add.w	r3, r7, #20
 800a71c:	4618      	mov	r0, r3
 800a71e:	f000 fe97 	bl	800b450 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	33f1      	adds	r3, #241	@ 0xf1
 800a726:	f107 0114 	add.w	r1, r7, #20
 800a72a:	2210      	movs	r2, #16
 800a72c:	4618      	mov	r0, r3
 800a72e:	f00b ff84 	bl	801663a <memcpy1>

        data += 16;
 800a732:	68bb      	ldr	r3, [r7, #8]
 800a734:	3310      	adds	r3, #16
 800a736:	60bb      	str	r3, [r7, #8]
        len -= 16;
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	3b10      	subs	r3, #16
 800a73c:	607b      	str	r3, [r7, #4]
    while( len > 16 )
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	2b10      	cmp	r3, #16
 800a742:	d8c3      	bhi.n	800a6cc <AES_CMAC_Update+0xe8>
    }
    /* potential last block, save it */
    memcpy1( ctx->M_last, data, len );
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	f203 1301 	addw	r3, r3, #257	@ 0x101
 800a74a:	687a      	ldr	r2, [r7, #4]
 800a74c:	b292      	uxth	r2, r2
 800a74e:	68b9      	ldr	r1, [r7, #8]
 800a750:	4618      	mov	r0, r3
 800a752:	f00b ff72 	bl	801663a <memcpy1>
    ctx->M_n = len;
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	687a      	ldr	r2, [r7, #4]
 800a75a:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
 800a75e:	e000      	b.n	800a762 <AES_CMAC_Update+0x17e>
            return;
 800a760:	bf00      	nop
}
 800a762:	3730      	adds	r7, #48	@ 0x30
 800a764:	46bd      	mov	sp, r7
 800a766:	bd80      	pop	{r7, pc}

0800a768 <AES_CMAC_Final>:

void AES_CMAC_Final( uint8_t digest[AES_CMAC_DIGEST_LENGTH], AES_CMAC_CTX* ctx )
{
 800a768:	b580      	push	{r7, lr}
 800a76a:	b092      	sub	sp, #72	@ 0x48
 800a76c:	af00      	add	r7, sp, #0
 800a76e:	6078      	str	r0, [r7, #4]
 800a770:	6039      	str	r1, [r7, #0]
    uint8_t K[16];
    uint8_t in[16];
    /* generate subkey K1 */
    memset1( K, '\0', 16 );
 800a772:	f107 031c 	add.w	r3, r7, #28
 800a776:	2210      	movs	r2, #16
 800a778:	2100      	movs	r1, #0
 800a77a:	4618      	mov	r0, r3
 800a77c:	f00b ff98 	bl	80166b0 <memset1>

    lorawan_aes_encrypt( K, K, &ctx->rijndael );
 800a780:	683a      	ldr	r2, [r7, #0]
 800a782:	f107 011c 	add.w	r1, r7, #28
 800a786:	f107 031c 	add.w	r3, r7, #28
 800a78a:	4618      	mov	r0, r3
 800a78c:	f000 fe60 	bl	800b450 <lorawan_aes_encrypt>

    if( K[0] & 0x80 )
 800a790:	7f3b      	ldrb	r3, [r7, #28]
 800a792:	b25b      	sxtb	r3, r3
 800a794:	2b00      	cmp	r3, #0
 800a796:	da30      	bge.n	800a7fa <AES_CMAC_Final+0x92>
    {
        LSHIFT( K, K );
 800a798:	2300      	movs	r3, #0
 800a79a:	647b      	str	r3, [r7, #68]	@ 0x44
 800a79c:	e01b      	b.n	800a7d6 <AES_CMAC_Final+0x6e>
 800a79e:	f107 021c 	add.w	r2, r7, #28
 800a7a2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a7a4:	4413      	add	r3, r2
 800a7a6:	781b      	ldrb	r3, [r3, #0]
 800a7a8:	005b      	lsls	r3, r3, #1
 800a7aa:	b25a      	sxtb	r2, r3
 800a7ac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a7ae:	3301      	adds	r3, #1
 800a7b0:	3348      	adds	r3, #72	@ 0x48
 800a7b2:	443b      	add	r3, r7
 800a7b4:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800a7b8:	09db      	lsrs	r3, r3, #7
 800a7ba:	b2db      	uxtb	r3, r3
 800a7bc:	b25b      	sxtb	r3, r3
 800a7be:	4313      	orrs	r3, r2
 800a7c0:	b25b      	sxtb	r3, r3
 800a7c2:	b2d9      	uxtb	r1, r3
 800a7c4:	f107 021c 	add.w	r2, r7, #28
 800a7c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a7ca:	4413      	add	r3, r2
 800a7cc:	460a      	mov	r2, r1
 800a7ce:	701a      	strb	r2, [r3, #0]
 800a7d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a7d2:	3301      	adds	r3, #1
 800a7d4:	647b      	str	r3, [r7, #68]	@ 0x44
 800a7d6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a7d8:	2b0e      	cmp	r3, #14
 800a7da:	dde0      	ble.n	800a79e <AES_CMAC_Final+0x36>
 800a7dc:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a7e0:	005b      	lsls	r3, r3, #1
 800a7e2:	b2db      	uxtb	r3, r3
 800a7e4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        K[15] ^= 0x87;
 800a7e8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a7ec:	f083 0378 	eor.w	r3, r3, #120	@ 0x78
 800a7f0:	43db      	mvns	r3, r3
 800a7f2:	b2db      	uxtb	r3, r3
 800a7f4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a7f8:	e027      	b.n	800a84a <AES_CMAC_Final+0xe2>
    }
    else
        LSHIFT( K, K );
 800a7fa:	2300      	movs	r3, #0
 800a7fc:	643b      	str	r3, [r7, #64]	@ 0x40
 800a7fe:	e01b      	b.n	800a838 <AES_CMAC_Final+0xd0>
 800a800:	f107 021c 	add.w	r2, r7, #28
 800a804:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a806:	4413      	add	r3, r2
 800a808:	781b      	ldrb	r3, [r3, #0]
 800a80a:	005b      	lsls	r3, r3, #1
 800a80c:	b25a      	sxtb	r2, r3
 800a80e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a810:	3301      	adds	r3, #1
 800a812:	3348      	adds	r3, #72	@ 0x48
 800a814:	443b      	add	r3, r7
 800a816:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800a81a:	09db      	lsrs	r3, r3, #7
 800a81c:	b2db      	uxtb	r3, r3
 800a81e:	b25b      	sxtb	r3, r3
 800a820:	4313      	orrs	r3, r2
 800a822:	b25b      	sxtb	r3, r3
 800a824:	b2d9      	uxtb	r1, r3
 800a826:	f107 021c 	add.w	r2, r7, #28
 800a82a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a82c:	4413      	add	r3, r2
 800a82e:	460a      	mov	r2, r1
 800a830:	701a      	strb	r2, [r3, #0]
 800a832:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a834:	3301      	adds	r3, #1
 800a836:	643b      	str	r3, [r7, #64]	@ 0x40
 800a838:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a83a:	2b0e      	cmp	r3, #14
 800a83c:	dde0      	ble.n	800a800 <AES_CMAC_Final+0x98>
 800a83e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a842:	005b      	lsls	r3, r3, #1
 800a844:	b2db      	uxtb	r3, r3
 800a846:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

    if( ctx->M_n == 16 )
 800a84a:	683b      	ldr	r3, [r7, #0]
 800a84c:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800a850:	2b10      	cmp	r3, #16
 800a852:	d11d      	bne.n	800a890 <AES_CMAC_Final+0x128>
    {
        /* last block was a complete block */
        XOR( K, ctx->M_last );
 800a854:	2300      	movs	r3, #0
 800a856:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a858:	e016      	b.n	800a888 <AES_CMAC_Final+0x120>
 800a85a:	683a      	ldr	r2, [r7, #0]
 800a85c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a85e:	4413      	add	r3, r2
 800a860:	f203 1301 	addw	r3, r3, #257	@ 0x101
 800a864:	781a      	ldrb	r2, [r3, #0]
 800a866:	f107 011c 	add.w	r1, r7, #28
 800a86a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a86c:	440b      	add	r3, r1
 800a86e:	781b      	ldrb	r3, [r3, #0]
 800a870:	4053      	eors	r3, r2
 800a872:	b2d9      	uxtb	r1, r3
 800a874:	683a      	ldr	r2, [r7, #0]
 800a876:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a878:	4413      	add	r3, r2
 800a87a:	f203 1301 	addw	r3, r3, #257	@ 0x101
 800a87e:	460a      	mov	r2, r1
 800a880:	701a      	strb	r2, [r3, #0]
 800a882:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a884:	3301      	adds	r3, #1
 800a886:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a888:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a88a:	2b0f      	cmp	r3, #15
 800a88c:	dde5      	ble.n	800a85a <AES_CMAC_Final+0xf2>
 800a88e:	e096      	b.n	800a9be <AES_CMAC_Final+0x256>
    }
    else
    {
        /* generate subkey K2 */
        if( K[0] & 0x80 )
 800a890:	7f3b      	ldrb	r3, [r7, #28]
 800a892:	b25b      	sxtb	r3, r3
 800a894:	2b00      	cmp	r3, #0
 800a896:	da30      	bge.n	800a8fa <AES_CMAC_Final+0x192>
        {
            LSHIFT( K, K );
 800a898:	2300      	movs	r3, #0
 800a89a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a89c:	e01b      	b.n	800a8d6 <AES_CMAC_Final+0x16e>
 800a89e:	f107 021c 	add.w	r2, r7, #28
 800a8a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a8a4:	4413      	add	r3, r2
 800a8a6:	781b      	ldrb	r3, [r3, #0]
 800a8a8:	005b      	lsls	r3, r3, #1
 800a8aa:	b25a      	sxtb	r2, r3
 800a8ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a8ae:	3301      	adds	r3, #1
 800a8b0:	3348      	adds	r3, #72	@ 0x48
 800a8b2:	443b      	add	r3, r7
 800a8b4:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800a8b8:	09db      	lsrs	r3, r3, #7
 800a8ba:	b2db      	uxtb	r3, r3
 800a8bc:	b25b      	sxtb	r3, r3
 800a8be:	4313      	orrs	r3, r2
 800a8c0:	b25b      	sxtb	r3, r3
 800a8c2:	b2d9      	uxtb	r1, r3
 800a8c4:	f107 021c 	add.w	r2, r7, #28
 800a8c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a8ca:	4413      	add	r3, r2
 800a8cc:	460a      	mov	r2, r1
 800a8ce:	701a      	strb	r2, [r3, #0]
 800a8d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a8d2:	3301      	adds	r3, #1
 800a8d4:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a8d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a8d8:	2b0e      	cmp	r3, #14
 800a8da:	dde0      	ble.n	800a89e <AES_CMAC_Final+0x136>
 800a8dc:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a8e0:	005b      	lsls	r3, r3, #1
 800a8e2:	b2db      	uxtb	r3, r3
 800a8e4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
            K[15] ^= 0x87;
 800a8e8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a8ec:	f083 0378 	eor.w	r3, r3, #120	@ 0x78
 800a8f0:	43db      	mvns	r3, r3
 800a8f2:	b2db      	uxtb	r3, r3
 800a8f4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a8f8:	e027      	b.n	800a94a <AES_CMAC_Final+0x1e2>
        }
        else
            LSHIFT( K, K );
 800a8fa:	2300      	movs	r3, #0
 800a8fc:	637b      	str	r3, [r7, #52]	@ 0x34
 800a8fe:	e01b      	b.n	800a938 <AES_CMAC_Final+0x1d0>
 800a900:	f107 021c 	add.w	r2, r7, #28
 800a904:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a906:	4413      	add	r3, r2
 800a908:	781b      	ldrb	r3, [r3, #0]
 800a90a:	005b      	lsls	r3, r3, #1
 800a90c:	b25a      	sxtb	r2, r3
 800a90e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a910:	3301      	adds	r3, #1
 800a912:	3348      	adds	r3, #72	@ 0x48
 800a914:	443b      	add	r3, r7
 800a916:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800a91a:	09db      	lsrs	r3, r3, #7
 800a91c:	b2db      	uxtb	r3, r3
 800a91e:	b25b      	sxtb	r3, r3
 800a920:	4313      	orrs	r3, r2
 800a922:	b25b      	sxtb	r3, r3
 800a924:	b2d9      	uxtb	r1, r3
 800a926:	f107 021c 	add.w	r2, r7, #28
 800a92a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a92c:	4413      	add	r3, r2
 800a92e:	460a      	mov	r2, r1
 800a930:	701a      	strb	r2, [r3, #0]
 800a932:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a934:	3301      	adds	r3, #1
 800a936:	637b      	str	r3, [r7, #52]	@ 0x34
 800a938:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a93a:	2b0e      	cmp	r3, #14
 800a93c:	dde0      	ble.n	800a900 <AES_CMAC_Final+0x198>
 800a93e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a942:	005b      	lsls	r3, r3, #1
 800a944:	b2db      	uxtb	r3, r3
 800a946:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

        /* padding(M_last) */
        ctx->M_last[ctx->M_n] = 0x80;
 800a94a:	683b      	ldr	r3, [r7, #0]
 800a94c:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800a950:	683a      	ldr	r2, [r7, #0]
 800a952:	4413      	add	r3, r2
 800a954:	2280      	movs	r2, #128	@ 0x80
 800a956:	f883 2101 	strb.w	r2, [r3, #257]	@ 0x101
        while( ++ctx->M_n < 16 )
 800a95a:	e007      	b.n	800a96c <AES_CMAC_Final+0x204>
            ctx->M_last[ctx->M_n] = 0;
 800a95c:	683b      	ldr	r3, [r7, #0]
 800a95e:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800a962:	683a      	ldr	r2, [r7, #0]
 800a964:	4413      	add	r3, r2
 800a966:	2200      	movs	r2, #0
 800a968:	f883 2101 	strb.w	r2, [r3, #257]	@ 0x101
        while( ++ctx->M_n < 16 )
 800a96c:	683b      	ldr	r3, [r7, #0]
 800a96e:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800a972:	1c5a      	adds	r2, r3, #1
 800a974:	683b      	ldr	r3, [r7, #0]
 800a976:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
 800a97a:	683b      	ldr	r3, [r7, #0]
 800a97c:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800a980:	2b0f      	cmp	r3, #15
 800a982:	d9eb      	bls.n	800a95c <AES_CMAC_Final+0x1f4>

        XOR( K, ctx->M_last );
 800a984:	2300      	movs	r3, #0
 800a986:	633b      	str	r3, [r7, #48]	@ 0x30
 800a988:	e016      	b.n	800a9b8 <AES_CMAC_Final+0x250>
 800a98a:	683a      	ldr	r2, [r7, #0]
 800a98c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a98e:	4413      	add	r3, r2
 800a990:	f203 1301 	addw	r3, r3, #257	@ 0x101
 800a994:	781a      	ldrb	r2, [r3, #0]
 800a996:	f107 011c 	add.w	r1, r7, #28
 800a99a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a99c:	440b      	add	r3, r1
 800a99e:	781b      	ldrb	r3, [r3, #0]
 800a9a0:	4053      	eors	r3, r2
 800a9a2:	b2d9      	uxtb	r1, r3
 800a9a4:	683a      	ldr	r2, [r7, #0]
 800a9a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9a8:	4413      	add	r3, r2
 800a9aa:	f203 1301 	addw	r3, r3, #257	@ 0x101
 800a9ae:	460a      	mov	r2, r1
 800a9b0:	701a      	strb	r2, [r3, #0]
 800a9b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9b4:	3301      	adds	r3, #1
 800a9b6:	633b      	str	r3, [r7, #48]	@ 0x30
 800a9b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9ba:	2b0f      	cmp	r3, #15
 800a9bc:	dde5      	ble.n	800a98a <AES_CMAC_Final+0x222>
    }
    XOR( ctx->M_last, ctx->X );
 800a9be:	2300      	movs	r3, #0
 800a9c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a9c2:	e015      	b.n	800a9f0 <AES_CMAC_Final+0x288>
 800a9c4:	683a      	ldr	r2, [r7, #0]
 800a9c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a9c8:	4413      	add	r3, r2
 800a9ca:	33f1      	adds	r3, #241	@ 0xf1
 800a9cc:	781a      	ldrb	r2, [r3, #0]
 800a9ce:	6839      	ldr	r1, [r7, #0]
 800a9d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a9d2:	440b      	add	r3, r1
 800a9d4:	f203 1301 	addw	r3, r3, #257	@ 0x101
 800a9d8:	781b      	ldrb	r3, [r3, #0]
 800a9da:	4053      	eors	r3, r2
 800a9dc:	b2d9      	uxtb	r1, r3
 800a9de:	683a      	ldr	r2, [r7, #0]
 800a9e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a9e2:	4413      	add	r3, r2
 800a9e4:	33f1      	adds	r3, #241	@ 0xf1
 800a9e6:	460a      	mov	r2, r1
 800a9e8:	701a      	strb	r2, [r3, #0]
 800a9ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a9ec:	3301      	adds	r3, #1
 800a9ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a9f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a9f2:	2b0f      	cmp	r3, #15
 800a9f4:	dde6      	ble.n	800a9c4 <AES_CMAC_Final+0x25c>

    memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800a9f6:	683b      	ldr	r3, [r7, #0]
 800a9f8:	f103 01f1 	add.w	r1, r3, #241	@ 0xf1
 800a9fc:	f107 030c 	add.w	r3, r7, #12
 800aa00:	2210      	movs	r2, #16
 800aa02:	4618      	mov	r0, r3
 800aa04:	f00b fe19 	bl	801663a <memcpy1>
    lorawan_aes_encrypt( in, digest, &ctx->rijndael );
 800aa08:	683a      	ldr	r2, [r7, #0]
 800aa0a:	f107 030c 	add.w	r3, r7, #12
 800aa0e:	6879      	ldr	r1, [r7, #4]
 800aa10:	4618      	mov	r0, r3
 800aa12:	f000 fd1d 	bl	800b450 <lorawan_aes_encrypt>
    memset1( K, 0, sizeof K );
 800aa16:	f107 031c 	add.w	r3, r7, #28
 800aa1a:	2210      	movs	r2, #16
 800aa1c:	2100      	movs	r1, #0
 800aa1e:	4618      	mov	r0, r3
 800aa20:	f00b fe46 	bl	80166b0 <memset1>
}
 800aa24:	bf00      	nop
 800aa26:	3748      	adds	r7, #72	@ 0x48
 800aa28:	46bd      	mov	sp, r7
 800aa2a:	bd80      	pop	{r7, pc}

0800aa2c <copy_block>:
#  define block_copy_nn(d, s, l)    copy_block_nn(d, s, l)
#  define block_copy(d, s)          copy_block(d, s)
#endif

static void copy_block( void *d, const void *s )
{
 800aa2c:	b480      	push	{r7}
 800aa2e:	b083      	sub	sp, #12
 800aa30:	af00      	add	r7, sp, #0
 800aa32:	6078      	str	r0, [r7, #4]
 800aa34:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0];
 800aa36:	683b      	ldr	r3, [r7, #0]
 800aa38:	781a      	ldrb	r2, [r3, #0]
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1];
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	3301      	adds	r3, #1
 800aa42:	683a      	ldr	r2, [r7, #0]
 800aa44:	7852      	ldrb	r2, [r2, #1]
 800aa46:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2];
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	3302      	adds	r3, #2
 800aa4c:	683a      	ldr	r2, [r7, #0]
 800aa4e:	7892      	ldrb	r2, [r2, #2]
 800aa50:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3];
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	3303      	adds	r3, #3
 800aa56:	683a      	ldr	r2, [r7, #0]
 800aa58:	78d2      	ldrb	r2, [r2, #3]
 800aa5a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4];
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	3304      	adds	r3, #4
 800aa60:	683a      	ldr	r2, [r7, #0]
 800aa62:	7912      	ldrb	r2, [r2, #4]
 800aa64:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5];
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	3305      	adds	r3, #5
 800aa6a:	683a      	ldr	r2, [r7, #0]
 800aa6c:	7952      	ldrb	r2, [r2, #5]
 800aa6e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6];
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	3306      	adds	r3, #6
 800aa74:	683a      	ldr	r2, [r7, #0]
 800aa76:	7992      	ldrb	r2, [r2, #6]
 800aa78:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7];
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	3307      	adds	r3, #7
 800aa7e:	683a      	ldr	r2, [r7, #0]
 800aa80:	79d2      	ldrb	r2, [r2, #7]
 800aa82:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8];
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	3308      	adds	r3, #8
 800aa88:	683a      	ldr	r2, [r7, #0]
 800aa8a:	7a12      	ldrb	r2, [r2, #8]
 800aa8c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9];
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	3309      	adds	r3, #9
 800aa92:	683a      	ldr	r2, [r7, #0]
 800aa94:	7a52      	ldrb	r2, [r2, #9]
 800aa96:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10];
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	330a      	adds	r3, #10
 800aa9c:	683a      	ldr	r2, [r7, #0]
 800aa9e:	7a92      	ldrb	r2, [r2, #10]
 800aaa0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11];
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	330b      	adds	r3, #11
 800aaa6:	683a      	ldr	r2, [r7, #0]
 800aaa8:	7ad2      	ldrb	r2, [r2, #11]
 800aaaa:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12];
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	330c      	adds	r3, #12
 800aab0:	683a      	ldr	r2, [r7, #0]
 800aab2:	7b12      	ldrb	r2, [r2, #12]
 800aab4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13];
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	330d      	adds	r3, #13
 800aaba:	683a      	ldr	r2, [r7, #0]
 800aabc:	7b52      	ldrb	r2, [r2, #13]
 800aabe:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14];
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	330e      	adds	r3, #14
 800aac4:	683a      	ldr	r2, [r7, #0]
 800aac6:	7b92      	ldrb	r2, [r2, #14]
 800aac8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15];
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	330f      	adds	r3, #15
 800aace:	683a      	ldr	r2, [r7, #0]
 800aad0:	7bd2      	ldrb	r2, [r2, #15]
 800aad2:	701a      	strb	r2, [r3, #0]
#endif
}
 800aad4:	bf00      	nop
 800aad6:	370c      	adds	r7, #12
 800aad8:	46bd      	mov	sp, r7
 800aada:	bc80      	pop	{r7}
 800aadc:	4770      	bx	lr

0800aade <copy_block_nn>:

static void copy_block_nn( uint8_t * d, const uint8_t *s, uint8_t nn )
{
 800aade:	b480      	push	{r7}
 800aae0:	b085      	sub	sp, #20
 800aae2:	af00      	add	r7, sp, #0
 800aae4:	60f8      	str	r0, [r7, #12]
 800aae6:	60b9      	str	r1, [r7, #8]
 800aae8:	4613      	mov	r3, r2
 800aaea:	71fb      	strb	r3, [r7, #7]
    while( nn-- )
 800aaec:	e007      	b.n	800aafe <copy_block_nn+0x20>
        //*((uint8_t*)d)++ = *((uint8_t*)s)++;
        *d++ = *s++;
 800aaee:	68ba      	ldr	r2, [r7, #8]
 800aaf0:	1c53      	adds	r3, r2, #1
 800aaf2:	60bb      	str	r3, [r7, #8]
 800aaf4:	68fb      	ldr	r3, [r7, #12]
 800aaf6:	1c59      	adds	r1, r3, #1
 800aaf8:	60f9      	str	r1, [r7, #12]
 800aafa:	7812      	ldrb	r2, [r2, #0]
 800aafc:	701a      	strb	r2, [r3, #0]
    while( nn-- )
 800aafe:	79fb      	ldrb	r3, [r7, #7]
 800ab00:	1e5a      	subs	r2, r3, #1
 800ab02:	71fa      	strb	r2, [r7, #7]
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	d1f2      	bne.n	800aaee <copy_block_nn+0x10>
}
 800ab08:	bf00      	nop
 800ab0a:	bf00      	nop
 800ab0c:	3714      	adds	r7, #20
 800ab0e:	46bd      	mov	sp, r7
 800ab10:	bc80      	pop	{r7}
 800ab12:	4770      	bx	lr

0800ab14 <xor_block>:

static void xor_block( void *d, const void *s )
{
 800ab14:	b480      	push	{r7}
 800ab16:	b083      	sub	sp, #12
 800ab18:	af00      	add	r7, sp, #0
 800ab1a:	6078      	str	r0, [r7, #4]
 800ab1c:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] ^= ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] ^= ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] ^= ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] ^= ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] ^= ((uint8_t*)s)[ 0];
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	781a      	ldrb	r2, [r3, #0]
 800ab22:	683b      	ldr	r3, [r7, #0]
 800ab24:	781b      	ldrb	r3, [r3, #0]
 800ab26:	4053      	eors	r3, r2
 800ab28:	b2da      	uxtb	r2, r3
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] ^= ((uint8_t*)s)[ 1];
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	3301      	adds	r3, #1
 800ab32:	7819      	ldrb	r1, [r3, #0]
 800ab34:	683b      	ldr	r3, [r7, #0]
 800ab36:	3301      	adds	r3, #1
 800ab38:	781a      	ldrb	r2, [r3, #0]
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	3301      	adds	r3, #1
 800ab3e:	404a      	eors	r2, r1
 800ab40:	b2d2      	uxtb	r2, r2
 800ab42:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] ^= ((uint8_t*)s)[ 2];
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	3302      	adds	r3, #2
 800ab48:	7819      	ldrb	r1, [r3, #0]
 800ab4a:	683b      	ldr	r3, [r7, #0]
 800ab4c:	3302      	adds	r3, #2
 800ab4e:	781a      	ldrb	r2, [r3, #0]
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	3302      	adds	r3, #2
 800ab54:	404a      	eors	r2, r1
 800ab56:	b2d2      	uxtb	r2, r2
 800ab58:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] ^= ((uint8_t*)s)[ 3];
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	3303      	adds	r3, #3
 800ab5e:	7819      	ldrb	r1, [r3, #0]
 800ab60:	683b      	ldr	r3, [r7, #0]
 800ab62:	3303      	adds	r3, #3
 800ab64:	781a      	ldrb	r2, [r3, #0]
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	3303      	adds	r3, #3
 800ab6a:	404a      	eors	r2, r1
 800ab6c:	b2d2      	uxtb	r2, r2
 800ab6e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] ^= ((uint8_t*)s)[ 4];
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	3304      	adds	r3, #4
 800ab74:	7819      	ldrb	r1, [r3, #0]
 800ab76:	683b      	ldr	r3, [r7, #0]
 800ab78:	3304      	adds	r3, #4
 800ab7a:	781a      	ldrb	r2, [r3, #0]
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	3304      	adds	r3, #4
 800ab80:	404a      	eors	r2, r1
 800ab82:	b2d2      	uxtb	r2, r2
 800ab84:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] ^= ((uint8_t*)s)[ 5];
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	3305      	adds	r3, #5
 800ab8a:	7819      	ldrb	r1, [r3, #0]
 800ab8c:	683b      	ldr	r3, [r7, #0]
 800ab8e:	3305      	adds	r3, #5
 800ab90:	781a      	ldrb	r2, [r3, #0]
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	3305      	adds	r3, #5
 800ab96:	404a      	eors	r2, r1
 800ab98:	b2d2      	uxtb	r2, r2
 800ab9a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] ^= ((uint8_t*)s)[ 6];
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	3306      	adds	r3, #6
 800aba0:	7819      	ldrb	r1, [r3, #0]
 800aba2:	683b      	ldr	r3, [r7, #0]
 800aba4:	3306      	adds	r3, #6
 800aba6:	781a      	ldrb	r2, [r3, #0]
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	3306      	adds	r3, #6
 800abac:	404a      	eors	r2, r1
 800abae:	b2d2      	uxtb	r2, r2
 800abb0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] ^= ((uint8_t*)s)[ 7];
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	3307      	adds	r3, #7
 800abb6:	7819      	ldrb	r1, [r3, #0]
 800abb8:	683b      	ldr	r3, [r7, #0]
 800abba:	3307      	adds	r3, #7
 800abbc:	781a      	ldrb	r2, [r3, #0]
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	3307      	adds	r3, #7
 800abc2:	404a      	eors	r2, r1
 800abc4:	b2d2      	uxtb	r2, r2
 800abc6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] ^= ((uint8_t*)s)[ 8];
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	3308      	adds	r3, #8
 800abcc:	7819      	ldrb	r1, [r3, #0]
 800abce:	683b      	ldr	r3, [r7, #0]
 800abd0:	3308      	adds	r3, #8
 800abd2:	781a      	ldrb	r2, [r3, #0]
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	3308      	adds	r3, #8
 800abd8:	404a      	eors	r2, r1
 800abda:	b2d2      	uxtb	r2, r2
 800abdc:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] ^= ((uint8_t*)s)[ 9];
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	3309      	adds	r3, #9
 800abe2:	7819      	ldrb	r1, [r3, #0]
 800abe4:	683b      	ldr	r3, [r7, #0]
 800abe6:	3309      	adds	r3, #9
 800abe8:	781a      	ldrb	r2, [r3, #0]
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	3309      	adds	r3, #9
 800abee:	404a      	eors	r2, r1
 800abf0:	b2d2      	uxtb	r2, r2
 800abf2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] ^= ((uint8_t*)s)[10];
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	330a      	adds	r3, #10
 800abf8:	7819      	ldrb	r1, [r3, #0]
 800abfa:	683b      	ldr	r3, [r7, #0]
 800abfc:	330a      	adds	r3, #10
 800abfe:	781a      	ldrb	r2, [r3, #0]
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	330a      	adds	r3, #10
 800ac04:	404a      	eors	r2, r1
 800ac06:	b2d2      	uxtb	r2, r2
 800ac08:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] ^= ((uint8_t*)s)[11];
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	330b      	adds	r3, #11
 800ac0e:	7819      	ldrb	r1, [r3, #0]
 800ac10:	683b      	ldr	r3, [r7, #0]
 800ac12:	330b      	adds	r3, #11
 800ac14:	781a      	ldrb	r2, [r3, #0]
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	330b      	adds	r3, #11
 800ac1a:	404a      	eors	r2, r1
 800ac1c:	b2d2      	uxtb	r2, r2
 800ac1e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] ^= ((uint8_t*)s)[12];
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	330c      	adds	r3, #12
 800ac24:	7819      	ldrb	r1, [r3, #0]
 800ac26:	683b      	ldr	r3, [r7, #0]
 800ac28:	330c      	adds	r3, #12
 800ac2a:	781a      	ldrb	r2, [r3, #0]
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	330c      	adds	r3, #12
 800ac30:	404a      	eors	r2, r1
 800ac32:	b2d2      	uxtb	r2, r2
 800ac34:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] ^= ((uint8_t*)s)[13];
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	330d      	adds	r3, #13
 800ac3a:	7819      	ldrb	r1, [r3, #0]
 800ac3c:	683b      	ldr	r3, [r7, #0]
 800ac3e:	330d      	adds	r3, #13
 800ac40:	781a      	ldrb	r2, [r3, #0]
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	330d      	adds	r3, #13
 800ac46:	404a      	eors	r2, r1
 800ac48:	b2d2      	uxtb	r2, r2
 800ac4a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] ^= ((uint8_t*)s)[14];
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	330e      	adds	r3, #14
 800ac50:	7819      	ldrb	r1, [r3, #0]
 800ac52:	683b      	ldr	r3, [r7, #0]
 800ac54:	330e      	adds	r3, #14
 800ac56:	781a      	ldrb	r2, [r3, #0]
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	330e      	adds	r3, #14
 800ac5c:	404a      	eors	r2, r1
 800ac5e:	b2d2      	uxtb	r2, r2
 800ac60:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] ^= ((uint8_t*)s)[15];
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	330f      	adds	r3, #15
 800ac66:	7819      	ldrb	r1, [r3, #0]
 800ac68:	683b      	ldr	r3, [r7, #0]
 800ac6a:	330f      	adds	r3, #15
 800ac6c:	781a      	ldrb	r2, [r3, #0]
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	330f      	adds	r3, #15
 800ac72:	404a      	eors	r2, r1
 800ac74:	b2d2      	uxtb	r2, r2
 800ac76:	701a      	strb	r2, [r3, #0]
#endif
}
 800ac78:	bf00      	nop
 800ac7a:	370c      	adds	r7, #12
 800ac7c:	46bd      	mov	sp, r7
 800ac7e:	bc80      	pop	{r7}
 800ac80:	4770      	bx	lr

0800ac82 <copy_and_key>:

static void copy_and_key( void *d, const void *s, const void *k )
{
 800ac82:	b480      	push	{r7}
 800ac84:	b085      	sub	sp, #20
 800ac86:	af00      	add	r7, sp, #0
 800ac88:	60f8      	str	r0, [r7, #12]
 800ac8a:	60b9      	str	r1, [r7, #8]
 800ac8c:	607a      	str	r2, [r7, #4]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0] ^ ((uint32_t*)k)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1] ^ ((uint32_t*)k)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2] ^ ((uint32_t*)k)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3] ^ ((uint32_t*)k)[ 3];
#elif 1
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0] ^ ((uint8_t*)k)[ 0];
 800ac8e:	68bb      	ldr	r3, [r7, #8]
 800ac90:	781a      	ldrb	r2, [r3, #0]
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	781b      	ldrb	r3, [r3, #0]
 800ac96:	4053      	eors	r3, r2
 800ac98:	b2da      	uxtb	r2, r3
 800ac9a:	68fb      	ldr	r3, [r7, #12]
 800ac9c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1] ^ ((uint8_t*)k)[ 1];
 800ac9e:	68bb      	ldr	r3, [r7, #8]
 800aca0:	3301      	adds	r3, #1
 800aca2:	7819      	ldrb	r1, [r3, #0]
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	3301      	adds	r3, #1
 800aca8:	781a      	ldrb	r2, [r3, #0]
 800acaa:	68fb      	ldr	r3, [r7, #12]
 800acac:	3301      	adds	r3, #1
 800acae:	404a      	eors	r2, r1
 800acb0:	b2d2      	uxtb	r2, r2
 800acb2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2] ^ ((uint8_t*)k)[ 2];
 800acb4:	68bb      	ldr	r3, [r7, #8]
 800acb6:	3302      	adds	r3, #2
 800acb8:	7819      	ldrb	r1, [r3, #0]
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	3302      	adds	r3, #2
 800acbe:	781a      	ldrb	r2, [r3, #0]
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	3302      	adds	r3, #2
 800acc4:	404a      	eors	r2, r1
 800acc6:	b2d2      	uxtb	r2, r2
 800acc8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3] ^ ((uint8_t*)k)[ 3];
 800acca:	68bb      	ldr	r3, [r7, #8]
 800accc:	3303      	adds	r3, #3
 800acce:	7819      	ldrb	r1, [r3, #0]
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	3303      	adds	r3, #3
 800acd4:	781a      	ldrb	r2, [r3, #0]
 800acd6:	68fb      	ldr	r3, [r7, #12]
 800acd8:	3303      	adds	r3, #3
 800acda:	404a      	eors	r2, r1
 800acdc:	b2d2      	uxtb	r2, r2
 800acde:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4] ^ ((uint8_t*)k)[ 4];
 800ace0:	68bb      	ldr	r3, [r7, #8]
 800ace2:	3304      	adds	r3, #4
 800ace4:	7819      	ldrb	r1, [r3, #0]
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	3304      	adds	r3, #4
 800acea:	781a      	ldrb	r2, [r3, #0]
 800acec:	68fb      	ldr	r3, [r7, #12]
 800acee:	3304      	adds	r3, #4
 800acf0:	404a      	eors	r2, r1
 800acf2:	b2d2      	uxtb	r2, r2
 800acf4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5] ^ ((uint8_t*)k)[ 5];
 800acf6:	68bb      	ldr	r3, [r7, #8]
 800acf8:	3305      	adds	r3, #5
 800acfa:	7819      	ldrb	r1, [r3, #0]
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	3305      	adds	r3, #5
 800ad00:	781a      	ldrb	r2, [r3, #0]
 800ad02:	68fb      	ldr	r3, [r7, #12]
 800ad04:	3305      	adds	r3, #5
 800ad06:	404a      	eors	r2, r1
 800ad08:	b2d2      	uxtb	r2, r2
 800ad0a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6] ^ ((uint8_t*)k)[ 6];
 800ad0c:	68bb      	ldr	r3, [r7, #8]
 800ad0e:	3306      	adds	r3, #6
 800ad10:	7819      	ldrb	r1, [r3, #0]
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	3306      	adds	r3, #6
 800ad16:	781a      	ldrb	r2, [r3, #0]
 800ad18:	68fb      	ldr	r3, [r7, #12]
 800ad1a:	3306      	adds	r3, #6
 800ad1c:	404a      	eors	r2, r1
 800ad1e:	b2d2      	uxtb	r2, r2
 800ad20:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7] ^ ((uint8_t*)k)[ 7];
 800ad22:	68bb      	ldr	r3, [r7, #8]
 800ad24:	3307      	adds	r3, #7
 800ad26:	7819      	ldrb	r1, [r3, #0]
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	3307      	adds	r3, #7
 800ad2c:	781a      	ldrb	r2, [r3, #0]
 800ad2e:	68fb      	ldr	r3, [r7, #12]
 800ad30:	3307      	adds	r3, #7
 800ad32:	404a      	eors	r2, r1
 800ad34:	b2d2      	uxtb	r2, r2
 800ad36:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8] ^ ((uint8_t*)k)[ 8];
 800ad38:	68bb      	ldr	r3, [r7, #8]
 800ad3a:	3308      	adds	r3, #8
 800ad3c:	7819      	ldrb	r1, [r3, #0]
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	3308      	adds	r3, #8
 800ad42:	781a      	ldrb	r2, [r3, #0]
 800ad44:	68fb      	ldr	r3, [r7, #12]
 800ad46:	3308      	adds	r3, #8
 800ad48:	404a      	eors	r2, r1
 800ad4a:	b2d2      	uxtb	r2, r2
 800ad4c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9] ^ ((uint8_t*)k)[ 9];
 800ad4e:	68bb      	ldr	r3, [r7, #8]
 800ad50:	3309      	adds	r3, #9
 800ad52:	7819      	ldrb	r1, [r3, #0]
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	3309      	adds	r3, #9
 800ad58:	781a      	ldrb	r2, [r3, #0]
 800ad5a:	68fb      	ldr	r3, [r7, #12]
 800ad5c:	3309      	adds	r3, #9
 800ad5e:	404a      	eors	r2, r1
 800ad60:	b2d2      	uxtb	r2, r2
 800ad62:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10] ^ ((uint8_t*)k)[10];
 800ad64:	68bb      	ldr	r3, [r7, #8]
 800ad66:	330a      	adds	r3, #10
 800ad68:	7819      	ldrb	r1, [r3, #0]
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	330a      	adds	r3, #10
 800ad6e:	781a      	ldrb	r2, [r3, #0]
 800ad70:	68fb      	ldr	r3, [r7, #12]
 800ad72:	330a      	adds	r3, #10
 800ad74:	404a      	eors	r2, r1
 800ad76:	b2d2      	uxtb	r2, r2
 800ad78:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11] ^ ((uint8_t*)k)[11];
 800ad7a:	68bb      	ldr	r3, [r7, #8]
 800ad7c:	330b      	adds	r3, #11
 800ad7e:	7819      	ldrb	r1, [r3, #0]
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	330b      	adds	r3, #11
 800ad84:	781a      	ldrb	r2, [r3, #0]
 800ad86:	68fb      	ldr	r3, [r7, #12]
 800ad88:	330b      	adds	r3, #11
 800ad8a:	404a      	eors	r2, r1
 800ad8c:	b2d2      	uxtb	r2, r2
 800ad8e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12] ^ ((uint8_t*)k)[12];
 800ad90:	68bb      	ldr	r3, [r7, #8]
 800ad92:	330c      	adds	r3, #12
 800ad94:	7819      	ldrb	r1, [r3, #0]
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	330c      	adds	r3, #12
 800ad9a:	781a      	ldrb	r2, [r3, #0]
 800ad9c:	68fb      	ldr	r3, [r7, #12]
 800ad9e:	330c      	adds	r3, #12
 800ada0:	404a      	eors	r2, r1
 800ada2:	b2d2      	uxtb	r2, r2
 800ada4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13] ^ ((uint8_t*)k)[13];
 800ada6:	68bb      	ldr	r3, [r7, #8]
 800ada8:	330d      	adds	r3, #13
 800adaa:	7819      	ldrb	r1, [r3, #0]
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	330d      	adds	r3, #13
 800adb0:	781a      	ldrb	r2, [r3, #0]
 800adb2:	68fb      	ldr	r3, [r7, #12]
 800adb4:	330d      	adds	r3, #13
 800adb6:	404a      	eors	r2, r1
 800adb8:	b2d2      	uxtb	r2, r2
 800adba:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14] ^ ((uint8_t*)k)[14];
 800adbc:	68bb      	ldr	r3, [r7, #8]
 800adbe:	330e      	adds	r3, #14
 800adc0:	7819      	ldrb	r1, [r3, #0]
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	330e      	adds	r3, #14
 800adc6:	781a      	ldrb	r2, [r3, #0]
 800adc8:	68fb      	ldr	r3, [r7, #12]
 800adca:	330e      	adds	r3, #14
 800adcc:	404a      	eors	r2, r1
 800adce:	b2d2      	uxtb	r2, r2
 800add0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15] ^ ((uint8_t*)k)[15];
 800add2:	68bb      	ldr	r3, [r7, #8]
 800add4:	330f      	adds	r3, #15
 800add6:	7819      	ldrb	r1, [r3, #0]
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	330f      	adds	r3, #15
 800addc:	781a      	ldrb	r2, [r3, #0]
 800adde:	68fb      	ldr	r3, [r7, #12]
 800ade0:	330f      	adds	r3, #15
 800ade2:	404a      	eors	r2, r1
 800ade4:	b2d2      	uxtb	r2, r2
 800ade6:	701a      	strb	r2, [r3, #0]
#else
    block_copy(d, s);
    xor_block(d, k);
#endif
}
 800ade8:	bf00      	nop
 800adea:	3714      	adds	r7, #20
 800adec:	46bd      	mov	sp, r7
 800adee:	bc80      	pop	{r7}
 800adf0:	4770      	bx	lr

0800adf2 <add_round_key>:

static void add_round_key( uint8_t d[N_BLOCK], const uint8_t k[N_BLOCK] )
{
 800adf2:	b580      	push	{r7, lr}
 800adf4:	b082      	sub	sp, #8
 800adf6:	af00      	add	r7, sp, #0
 800adf8:	6078      	str	r0, [r7, #4]
 800adfa:	6039      	str	r1, [r7, #0]
    xor_block(d, k);
 800adfc:	6839      	ldr	r1, [r7, #0]
 800adfe:	6878      	ldr	r0, [r7, #4]
 800ae00:	f7ff fe88 	bl	800ab14 <xor_block>
}
 800ae04:	bf00      	nop
 800ae06:	3708      	adds	r7, #8
 800ae08:	46bd      	mov	sp, r7
 800ae0a:	bd80      	pop	{r7, pc}

0800ae0c <shift_sub_rows>:

static void shift_sub_rows( uint8_t st[N_BLOCK] )
{   uint8_t tt;
 800ae0c:	b480      	push	{r7}
 800ae0e:	b085      	sub	sp, #20
 800ae10:	af00      	add	r7, sp, #0
 800ae12:	6078      	str	r0, [r7, #4]

    st[ 0] = s_box(st[ 0]); st[ 4] = s_box(st[ 4]);
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	781b      	ldrb	r3, [r3, #0]
 800ae18:	461a      	mov	r2, r3
 800ae1a:	4b48      	ldr	r3, [pc, #288]	@ (800af3c <shift_sub_rows+0x130>)
 800ae1c:	5c9a      	ldrb	r2, [r3, r2]
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	701a      	strb	r2, [r3, #0]
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	3304      	adds	r3, #4
 800ae26:	781b      	ldrb	r3, [r3, #0]
 800ae28:	4619      	mov	r1, r3
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	3304      	adds	r3, #4
 800ae2e:	4a43      	ldr	r2, [pc, #268]	@ (800af3c <shift_sub_rows+0x130>)
 800ae30:	5c52      	ldrb	r2, [r2, r1]
 800ae32:	701a      	strb	r2, [r3, #0]
    st[ 8] = s_box(st[ 8]); st[12] = s_box(st[12]);
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	3308      	adds	r3, #8
 800ae38:	781b      	ldrb	r3, [r3, #0]
 800ae3a:	4619      	mov	r1, r3
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	3308      	adds	r3, #8
 800ae40:	4a3e      	ldr	r2, [pc, #248]	@ (800af3c <shift_sub_rows+0x130>)
 800ae42:	5c52      	ldrb	r2, [r2, r1]
 800ae44:	701a      	strb	r2, [r3, #0]
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	330c      	adds	r3, #12
 800ae4a:	781b      	ldrb	r3, [r3, #0]
 800ae4c:	4619      	mov	r1, r3
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	330c      	adds	r3, #12
 800ae52:	4a3a      	ldr	r2, [pc, #232]	@ (800af3c <shift_sub_rows+0x130>)
 800ae54:	5c52      	ldrb	r2, [r2, r1]
 800ae56:	701a      	strb	r2, [r3, #0]

    tt = st[1]; st[ 1] = s_box(st[ 5]); st[ 5] = s_box(st[ 9]);
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	785b      	ldrb	r3, [r3, #1]
 800ae5c:	73fb      	strb	r3, [r7, #15]
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	3305      	adds	r3, #5
 800ae62:	781b      	ldrb	r3, [r3, #0]
 800ae64:	4619      	mov	r1, r3
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	3301      	adds	r3, #1
 800ae6a:	4a34      	ldr	r2, [pc, #208]	@ (800af3c <shift_sub_rows+0x130>)
 800ae6c:	5c52      	ldrb	r2, [r2, r1]
 800ae6e:	701a      	strb	r2, [r3, #0]
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	3309      	adds	r3, #9
 800ae74:	781b      	ldrb	r3, [r3, #0]
 800ae76:	4619      	mov	r1, r3
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	3305      	adds	r3, #5
 800ae7c:	4a2f      	ldr	r2, [pc, #188]	@ (800af3c <shift_sub_rows+0x130>)
 800ae7e:	5c52      	ldrb	r2, [r2, r1]
 800ae80:	701a      	strb	r2, [r3, #0]
    st[ 9] = s_box(st[13]); st[13] = s_box( tt );
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	330d      	adds	r3, #13
 800ae86:	781b      	ldrb	r3, [r3, #0]
 800ae88:	4619      	mov	r1, r3
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	3309      	adds	r3, #9
 800ae8e:	4a2b      	ldr	r2, [pc, #172]	@ (800af3c <shift_sub_rows+0x130>)
 800ae90:	5c52      	ldrb	r2, [r2, r1]
 800ae92:	701a      	strb	r2, [r3, #0]
 800ae94:	7bfa      	ldrb	r2, [r7, #15]
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	330d      	adds	r3, #13
 800ae9a:	4928      	ldr	r1, [pc, #160]	@ (800af3c <shift_sub_rows+0x130>)
 800ae9c:	5c8a      	ldrb	r2, [r1, r2]
 800ae9e:	701a      	strb	r2, [r3, #0]

    tt = st[2]; st[ 2] = s_box(st[10]); st[10] = s_box( tt );
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	789b      	ldrb	r3, [r3, #2]
 800aea4:	73fb      	strb	r3, [r7, #15]
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	330a      	adds	r3, #10
 800aeaa:	781b      	ldrb	r3, [r3, #0]
 800aeac:	4619      	mov	r1, r3
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	3302      	adds	r3, #2
 800aeb2:	4a22      	ldr	r2, [pc, #136]	@ (800af3c <shift_sub_rows+0x130>)
 800aeb4:	5c52      	ldrb	r2, [r2, r1]
 800aeb6:	701a      	strb	r2, [r3, #0]
 800aeb8:	7bfa      	ldrb	r2, [r7, #15]
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	330a      	adds	r3, #10
 800aebe:	491f      	ldr	r1, [pc, #124]	@ (800af3c <shift_sub_rows+0x130>)
 800aec0:	5c8a      	ldrb	r2, [r1, r2]
 800aec2:	701a      	strb	r2, [r3, #0]
    tt = st[6]; st[ 6] = s_box(st[14]); st[14] = s_box( tt );
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	799b      	ldrb	r3, [r3, #6]
 800aec8:	73fb      	strb	r3, [r7, #15]
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	330e      	adds	r3, #14
 800aece:	781b      	ldrb	r3, [r3, #0]
 800aed0:	4619      	mov	r1, r3
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	3306      	adds	r3, #6
 800aed6:	4a19      	ldr	r2, [pc, #100]	@ (800af3c <shift_sub_rows+0x130>)
 800aed8:	5c52      	ldrb	r2, [r2, r1]
 800aeda:	701a      	strb	r2, [r3, #0]
 800aedc:	7bfa      	ldrb	r2, [r7, #15]
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	330e      	adds	r3, #14
 800aee2:	4916      	ldr	r1, [pc, #88]	@ (800af3c <shift_sub_rows+0x130>)
 800aee4:	5c8a      	ldrb	r2, [r1, r2]
 800aee6:	701a      	strb	r2, [r3, #0]

    tt = st[15]; st[15] = s_box(st[11]); st[11] = s_box(st[ 7]);
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	7bdb      	ldrb	r3, [r3, #15]
 800aeec:	73fb      	strb	r3, [r7, #15]
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	330b      	adds	r3, #11
 800aef2:	781b      	ldrb	r3, [r3, #0]
 800aef4:	4619      	mov	r1, r3
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	330f      	adds	r3, #15
 800aefa:	4a10      	ldr	r2, [pc, #64]	@ (800af3c <shift_sub_rows+0x130>)
 800aefc:	5c52      	ldrb	r2, [r2, r1]
 800aefe:	701a      	strb	r2, [r3, #0]
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	3307      	adds	r3, #7
 800af04:	781b      	ldrb	r3, [r3, #0]
 800af06:	4619      	mov	r1, r3
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	330b      	adds	r3, #11
 800af0c:	4a0b      	ldr	r2, [pc, #44]	@ (800af3c <shift_sub_rows+0x130>)
 800af0e:	5c52      	ldrb	r2, [r2, r1]
 800af10:	701a      	strb	r2, [r3, #0]
    st[ 7] = s_box(st[ 3]); st[ 3] = s_box( tt );
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	3303      	adds	r3, #3
 800af16:	781b      	ldrb	r3, [r3, #0]
 800af18:	4619      	mov	r1, r3
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	3307      	adds	r3, #7
 800af1e:	4a07      	ldr	r2, [pc, #28]	@ (800af3c <shift_sub_rows+0x130>)
 800af20:	5c52      	ldrb	r2, [r2, r1]
 800af22:	701a      	strb	r2, [r3, #0]
 800af24:	7bfa      	ldrb	r2, [r7, #15]
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	3303      	adds	r3, #3
 800af2a:	4904      	ldr	r1, [pc, #16]	@ (800af3c <shift_sub_rows+0x130>)
 800af2c:	5c8a      	ldrb	r2, [r1, r2]
 800af2e:	701a      	strb	r2, [r3, #0]
}
 800af30:	bf00      	nop
 800af32:	3714      	adds	r7, #20
 800af34:	46bd      	mov	sp, r7
 800af36:	bc80      	pop	{r7}
 800af38:	4770      	bx	lr
 800af3a:	bf00      	nop
 800af3c:	0801b92c 	.word	0x0801b92c

0800af40 <mix_sub_columns>:

#endif

#if defined( VERSION_1 )
  static void mix_sub_columns( uint8_t dt[N_BLOCK] )
  { uint8_t st[N_BLOCK];
 800af40:	b580      	push	{r7, lr}
 800af42:	b086      	sub	sp, #24
 800af44:	af00      	add	r7, sp, #0
 800af46:	6078      	str	r0, [r7, #4]
    block_copy(st, dt);
 800af48:	f107 0308 	add.w	r3, r7, #8
 800af4c:	6879      	ldr	r1, [r7, #4]
 800af4e:	4618      	mov	r0, r3
 800af50:	f7ff fd6c 	bl	800aa2c <copy_block>
#else
  static void mix_sub_columns( uint8_t dt[N_BLOCK], uint8_t st[N_BLOCK] )
  {
#endif
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 800af54:	7a3b      	ldrb	r3, [r7, #8]
 800af56:	461a      	mov	r2, r3
 800af58:	4b9a      	ldr	r3, [pc, #616]	@ (800b1c4 <mix_sub_columns+0x284>)
 800af5a:	5c9a      	ldrb	r2, [r3, r2]
 800af5c:	7b7b      	ldrb	r3, [r7, #13]
 800af5e:	4619      	mov	r1, r3
 800af60:	4b99      	ldr	r3, [pc, #612]	@ (800b1c8 <mix_sub_columns+0x288>)
 800af62:	5c5b      	ldrb	r3, [r3, r1]
 800af64:	4053      	eors	r3, r2
 800af66:	b2da      	uxtb	r2, r3
 800af68:	7cbb      	ldrb	r3, [r7, #18]
 800af6a:	4619      	mov	r1, r3
 800af6c:	4b97      	ldr	r3, [pc, #604]	@ (800b1cc <mix_sub_columns+0x28c>)
 800af6e:	5c5b      	ldrb	r3, [r3, r1]
 800af70:	4053      	eors	r3, r2
 800af72:	b2da      	uxtb	r2, r3
 800af74:	7dfb      	ldrb	r3, [r7, #23]
 800af76:	4619      	mov	r1, r3
 800af78:	4b94      	ldr	r3, [pc, #592]	@ (800b1cc <mix_sub_columns+0x28c>)
 800af7a:	5c5b      	ldrb	r3, [r3, r1]
 800af7c:	4053      	eors	r3, r2
 800af7e:	b2da      	uxtb	r2, r3
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	701a      	strb	r2, [r3, #0]
    dt[ 1] = s_box(st[0]) ^ gfm2_sb(st[5]) ^ gfm3_sb(st[10]) ^ s_box(st[15]);
 800af84:	7a3b      	ldrb	r3, [r7, #8]
 800af86:	461a      	mov	r2, r3
 800af88:	4b90      	ldr	r3, [pc, #576]	@ (800b1cc <mix_sub_columns+0x28c>)
 800af8a:	5c9a      	ldrb	r2, [r3, r2]
 800af8c:	7b7b      	ldrb	r3, [r7, #13]
 800af8e:	4619      	mov	r1, r3
 800af90:	4b8c      	ldr	r3, [pc, #560]	@ (800b1c4 <mix_sub_columns+0x284>)
 800af92:	5c5b      	ldrb	r3, [r3, r1]
 800af94:	4053      	eors	r3, r2
 800af96:	b2da      	uxtb	r2, r3
 800af98:	7cbb      	ldrb	r3, [r7, #18]
 800af9a:	4619      	mov	r1, r3
 800af9c:	4b8a      	ldr	r3, [pc, #552]	@ (800b1c8 <mix_sub_columns+0x288>)
 800af9e:	5c5b      	ldrb	r3, [r3, r1]
 800afa0:	4053      	eors	r3, r2
 800afa2:	b2d9      	uxtb	r1, r3
 800afa4:	7dfb      	ldrb	r3, [r7, #23]
 800afa6:	461a      	mov	r2, r3
 800afa8:	4b88      	ldr	r3, [pc, #544]	@ (800b1cc <mix_sub_columns+0x28c>)
 800afaa:	5c9a      	ldrb	r2, [r3, r2]
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	3301      	adds	r3, #1
 800afb0:	404a      	eors	r2, r1
 800afb2:	b2d2      	uxtb	r2, r2
 800afb4:	701a      	strb	r2, [r3, #0]
    dt[ 2] = s_box(st[0]) ^ s_box(st[5]) ^ gfm2_sb(st[10]) ^ gfm3_sb(st[15]);
 800afb6:	7a3b      	ldrb	r3, [r7, #8]
 800afb8:	461a      	mov	r2, r3
 800afba:	4b84      	ldr	r3, [pc, #528]	@ (800b1cc <mix_sub_columns+0x28c>)
 800afbc:	5c9a      	ldrb	r2, [r3, r2]
 800afbe:	7b7b      	ldrb	r3, [r7, #13]
 800afc0:	4619      	mov	r1, r3
 800afc2:	4b82      	ldr	r3, [pc, #520]	@ (800b1cc <mix_sub_columns+0x28c>)
 800afc4:	5c5b      	ldrb	r3, [r3, r1]
 800afc6:	4053      	eors	r3, r2
 800afc8:	b2da      	uxtb	r2, r3
 800afca:	7cbb      	ldrb	r3, [r7, #18]
 800afcc:	4619      	mov	r1, r3
 800afce:	4b7d      	ldr	r3, [pc, #500]	@ (800b1c4 <mix_sub_columns+0x284>)
 800afd0:	5c5b      	ldrb	r3, [r3, r1]
 800afd2:	4053      	eors	r3, r2
 800afd4:	b2d9      	uxtb	r1, r3
 800afd6:	7dfb      	ldrb	r3, [r7, #23]
 800afd8:	461a      	mov	r2, r3
 800afda:	4b7b      	ldr	r3, [pc, #492]	@ (800b1c8 <mix_sub_columns+0x288>)
 800afdc:	5c9a      	ldrb	r2, [r3, r2]
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	3302      	adds	r3, #2
 800afe2:	404a      	eors	r2, r1
 800afe4:	b2d2      	uxtb	r2, r2
 800afe6:	701a      	strb	r2, [r3, #0]
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
 800afe8:	7a3b      	ldrb	r3, [r7, #8]
 800afea:	461a      	mov	r2, r3
 800afec:	4b76      	ldr	r3, [pc, #472]	@ (800b1c8 <mix_sub_columns+0x288>)
 800afee:	5c9a      	ldrb	r2, [r3, r2]
 800aff0:	7b7b      	ldrb	r3, [r7, #13]
 800aff2:	4619      	mov	r1, r3
 800aff4:	4b75      	ldr	r3, [pc, #468]	@ (800b1cc <mix_sub_columns+0x28c>)
 800aff6:	5c5b      	ldrb	r3, [r3, r1]
 800aff8:	4053      	eors	r3, r2
 800affa:	b2da      	uxtb	r2, r3
 800affc:	7cbb      	ldrb	r3, [r7, #18]
 800affe:	4619      	mov	r1, r3
 800b000:	4b72      	ldr	r3, [pc, #456]	@ (800b1cc <mix_sub_columns+0x28c>)
 800b002:	5c5b      	ldrb	r3, [r3, r1]
 800b004:	4053      	eors	r3, r2
 800b006:	b2d9      	uxtb	r1, r3
 800b008:	7dfb      	ldrb	r3, [r7, #23]
 800b00a:	461a      	mov	r2, r3
 800b00c:	4b6d      	ldr	r3, [pc, #436]	@ (800b1c4 <mix_sub_columns+0x284>)
 800b00e:	5c9a      	ldrb	r2, [r3, r2]
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	3303      	adds	r3, #3
 800b014:	404a      	eors	r2, r1
 800b016:	b2d2      	uxtb	r2, r2
 800b018:	701a      	strb	r2, [r3, #0]

    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 800b01a:	7b3b      	ldrb	r3, [r7, #12]
 800b01c:	461a      	mov	r2, r3
 800b01e:	4b69      	ldr	r3, [pc, #420]	@ (800b1c4 <mix_sub_columns+0x284>)
 800b020:	5c9a      	ldrb	r2, [r3, r2]
 800b022:	7c7b      	ldrb	r3, [r7, #17]
 800b024:	4619      	mov	r1, r3
 800b026:	4b68      	ldr	r3, [pc, #416]	@ (800b1c8 <mix_sub_columns+0x288>)
 800b028:	5c5b      	ldrb	r3, [r3, r1]
 800b02a:	4053      	eors	r3, r2
 800b02c:	b2da      	uxtb	r2, r3
 800b02e:	7dbb      	ldrb	r3, [r7, #22]
 800b030:	4619      	mov	r1, r3
 800b032:	4b66      	ldr	r3, [pc, #408]	@ (800b1cc <mix_sub_columns+0x28c>)
 800b034:	5c5b      	ldrb	r3, [r3, r1]
 800b036:	4053      	eors	r3, r2
 800b038:	b2d9      	uxtb	r1, r3
 800b03a:	7afb      	ldrb	r3, [r7, #11]
 800b03c:	461a      	mov	r2, r3
 800b03e:	4b63      	ldr	r3, [pc, #396]	@ (800b1cc <mix_sub_columns+0x28c>)
 800b040:	5c9a      	ldrb	r2, [r3, r2]
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	3304      	adds	r3, #4
 800b046:	404a      	eors	r2, r1
 800b048:	b2d2      	uxtb	r2, r2
 800b04a:	701a      	strb	r2, [r3, #0]
    dt[ 5] = s_box(st[4]) ^ gfm2_sb(st[9]) ^ gfm3_sb(st[14]) ^ s_box(st[3]);
 800b04c:	7b3b      	ldrb	r3, [r7, #12]
 800b04e:	461a      	mov	r2, r3
 800b050:	4b5e      	ldr	r3, [pc, #376]	@ (800b1cc <mix_sub_columns+0x28c>)
 800b052:	5c9a      	ldrb	r2, [r3, r2]
 800b054:	7c7b      	ldrb	r3, [r7, #17]
 800b056:	4619      	mov	r1, r3
 800b058:	4b5a      	ldr	r3, [pc, #360]	@ (800b1c4 <mix_sub_columns+0x284>)
 800b05a:	5c5b      	ldrb	r3, [r3, r1]
 800b05c:	4053      	eors	r3, r2
 800b05e:	b2da      	uxtb	r2, r3
 800b060:	7dbb      	ldrb	r3, [r7, #22]
 800b062:	4619      	mov	r1, r3
 800b064:	4b58      	ldr	r3, [pc, #352]	@ (800b1c8 <mix_sub_columns+0x288>)
 800b066:	5c5b      	ldrb	r3, [r3, r1]
 800b068:	4053      	eors	r3, r2
 800b06a:	b2d9      	uxtb	r1, r3
 800b06c:	7afb      	ldrb	r3, [r7, #11]
 800b06e:	461a      	mov	r2, r3
 800b070:	4b56      	ldr	r3, [pc, #344]	@ (800b1cc <mix_sub_columns+0x28c>)
 800b072:	5c9a      	ldrb	r2, [r3, r2]
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	3305      	adds	r3, #5
 800b078:	404a      	eors	r2, r1
 800b07a:	b2d2      	uxtb	r2, r2
 800b07c:	701a      	strb	r2, [r3, #0]
    dt[ 6] = s_box(st[4]) ^ s_box(st[9]) ^ gfm2_sb(st[14]) ^ gfm3_sb(st[3]);
 800b07e:	7b3b      	ldrb	r3, [r7, #12]
 800b080:	461a      	mov	r2, r3
 800b082:	4b52      	ldr	r3, [pc, #328]	@ (800b1cc <mix_sub_columns+0x28c>)
 800b084:	5c9a      	ldrb	r2, [r3, r2]
 800b086:	7c7b      	ldrb	r3, [r7, #17]
 800b088:	4619      	mov	r1, r3
 800b08a:	4b50      	ldr	r3, [pc, #320]	@ (800b1cc <mix_sub_columns+0x28c>)
 800b08c:	5c5b      	ldrb	r3, [r3, r1]
 800b08e:	4053      	eors	r3, r2
 800b090:	b2da      	uxtb	r2, r3
 800b092:	7dbb      	ldrb	r3, [r7, #22]
 800b094:	4619      	mov	r1, r3
 800b096:	4b4b      	ldr	r3, [pc, #300]	@ (800b1c4 <mix_sub_columns+0x284>)
 800b098:	5c5b      	ldrb	r3, [r3, r1]
 800b09a:	4053      	eors	r3, r2
 800b09c:	b2d9      	uxtb	r1, r3
 800b09e:	7afb      	ldrb	r3, [r7, #11]
 800b0a0:	461a      	mov	r2, r3
 800b0a2:	4b49      	ldr	r3, [pc, #292]	@ (800b1c8 <mix_sub_columns+0x288>)
 800b0a4:	5c9a      	ldrb	r2, [r3, r2]
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	3306      	adds	r3, #6
 800b0aa:	404a      	eors	r2, r1
 800b0ac:	b2d2      	uxtb	r2, r2
 800b0ae:	701a      	strb	r2, [r3, #0]
    dt[ 7] = gfm3_sb(st[4]) ^ s_box(st[9]) ^ s_box(st[14]) ^ gfm2_sb(st[3]);
 800b0b0:	7b3b      	ldrb	r3, [r7, #12]
 800b0b2:	461a      	mov	r2, r3
 800b0b4:	4b44      	ldr	r3, [pc, #272]	@ (800b1c8 <mix_sub_columns+0x288>)
 800b0b6:	5c9a      	ldrb	r2, [r3, r2]
 800b0b8:	7c7b      	ldrb	r3, [r7, #17]
 800b0ba:	4619      	mov	r1, r3
 800b0bc:	4b43      	ldr	r3, [pc, #268]	@ (800b1cc <mix_sub_columns+0x28c>)
 800b0be:	5c5b      	ldrb	r3, [r3, r1]
 800b0c0:	4053      	eors	r3, r2
 800b0c2:	b2da      	uxtb	r2, r3
 800b0c4:	7dbb      	ldrb	r3, [r7, #22]
 800b0c6:	4619      	mov	r1, r3
 800b0c8:	4b40      	ldr	r3, [pc, #256]	@ (800b1cc <mix_sub_columns+0x28c>)
 800b0ca:	5c5b      	ldrb	r3, [r3, r1]
 800b0cc:	4053      	eors	r3, r2
 800b0ce:	b2d9      	uxtb	r1, r3
 800b0d0:	7afb      	ldrb	r3, [r7, #11]
 800b0d2:	461a      	mov	r2, r3
 800b0d4:	4b3b      	ldr	r3, [pc, #236]	@ (800b1c4 <mix_sub_columns+0x284>)
 800b0d6:	5c9a      	ldrb	r2, [r3, r2]
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	3307      	adds	r3, #7
 800b0dc:	404a      	eors	r2, r1
 800b0de:	b2d2      	uxtb	r2, r2
 800b0e0:	701a      	strb	r2, [r3, #0]

    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
 800b0e2:	7c3b      	ldrb	r3, [r7, #16]
 800b0e4:	461a      	mov	r2, r3
 800b0e6:	4b37      	ldr	r3, [pc, #220]	@ (800b1c4 <mix_sub_columns+0x284>)
 800b0e8:	5c9a      	ldrb	r2, [r3, r2]
 800b0ea:	7d7b      	ldrb	r3, [r7, #21]
 800b0ec:	4619      	mov	r1, r3
 800b0ee:	4b36      	ldr	r3, [pc, #216]	@ (800b1c8 <mix_sub_columns+0x288>)
 800b0f0:	5c5b      	ldrb	r3, [r3, r1]
 800b0f2:	4053      	eors	r3, r2
 800b0f4:	b2da      	uxtb	r2, r3
 800b0f6:	7abb      	ldrb	r3, [r7, #10]
 800b0f8:	4619      	mov	r1, r3
 800b0fa:	4b34      	ldr	r3, [pc, #208]	@ (800b1cc <mix_sub_columns+0x28c>)
 800b0fc:	5c5b      	ldrb	r3, [r3, r1]
 800b0fe:	4053      	eors	r3, r2
 800b100:	b2d9      	uxtb	r1, r3
 800b102:	7bfb      	ldrb	r3, [r7, #15]
 800b104:	461a      	mov	r2, r3
 800b106:	4b31      	ldr	r3, [pc, #196]	@ (800b1cc <mix_sub_columns+0x28c>)
 800b108:	5c9a      	ldrb	r2, [r3, r2]
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	3308      	adds	r3, #8
 800b10e:	404a      	eors	r2, r1
 800b110:	b2d2      	uxtb	r2, r2
 800b112:	701a      	strb	r2, [r3, #0]
    dt[ 9] = s_box(st[8]) ^ gfm2_sb(st[13]) ^ gfm3_sb(st[2]) ^ s_box(st[7]);
 800b114:	7c3b      	ldrb	r3, [r7, #16]
 800b116:	461a      	mov	r2, r3
 800b118:	4b2c      	ldr	r3, [pc, #176]	@ (800b1cc <mix_sub_columns+0x28c>)
 800b11a:	5c9a      	ldrb	r2, [r3, r2]
 800b11c:	7d7b      	ldrb	r3, [r7, #21]
 800b11e:	4619      	mov	r1, r3
 800b120:	4b28      	ldr	r3, [pc, #160]	@ (800b1c4 <mix_sub_columns+0x284>)
 800b122:	5c5b      	ldrb	r3, [r3, r1]
 800b124:	4053      	eors	r3, r2
 800b126:	b2da      	uxtb	r2, r3
 800b128:	7abb      	ldrb	r3, [r7, #10]
 800b12a:	4619      	mov	r1, r3
 800b12c:	4b26      	ldr	r3, [pc, #152]	@ (800b1c8 <mix_sub_columns+0x288>)
 800b12e:	5c5b      	ldrb	r3, [r3, r1]
 800b130:	4053      	eors	r3, r2
 800b132:	b2d9      	uxtb	r1, r3
 800b134:	7bfb      	ldrb	r3, [r7, #15]
 800b136:	461a      	mov	r2, r3
 800b138:	4b24      	ldr	r3, [pc, #144]	@ (800b1cc <mix_sub_columns+0x28c>)
 800b13a:	5c9a      	ldrb	r2, [r3, r2]
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	3309      	adds	r3, #9
 800b140:	404a      	eors	r2, r1
 800b142:	b2d2      	uxtb	r2, r2
 800b144:	701a      	strb	r2, [r3, #0]
    dt[10] = s_box(st[8]) ^ s_box(st[13]) ^ gfm2_sb(st[2]) ^ gfm3_sb(st[7]);
 800b146:	7c3b      	ldrb	r3, [r7, #16]
 800b148:	461a      	mov	r2, r3
 800b14a:	4b20      	ldr	r3, [pc, #128]	@ (800b1cc <mix_sub_columns+0x28c>)
 800b14c:	5c9a      	ldrb	r2, [r3, r2]
 800b14e:	7d7b      	ldrb	r3, [r7, #21]
 800b150:	4619      	mov	r1, r3
 800b152:	4b1e      	ldr	r3, [pc, #120]	@ (800b1cc <mix_sub_columns+0x28c>)
 800b154:	5c5b      	ldrb	r3, [r3, r1]
 800b156:	4053      	eors	r3, r2
 800b158:	b2da      	uxtb	r2, r3
 800b15a:	7abb      	ldrb	r3, [r7, #10]
 800b15c:	4619      	mov	r1, r3
 800b15e:	4b19      	ldr	r3, [pc, #100]	@ (800b1c4 <mix_sub_columns+0x284>)
 800b160:	5c5b      	ldrb	r3, [r3, r1]
 800b162:	4053      	eors	r3, r2
 800b164:	b2d9      	uxtb	r1, r3
 800b166:	7bfb      	ldrb	r3, [r7, #15]
 800b168:	461a      	mov	r2, r3
 800b16a:	4b17      	ldr	r3, [pc, #92]	@ (800b1c8 <mix_sub_columns+0x288>)
 800b16c:	5c9a      	ldrb	r2, [r3, r2]
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	330a      	adds	r3, #10
 800b172:	404a      	eors	r2, r1
 800b174:	b2d2      	uxtb	r2, r2
 800b176:	701a      	strb	r2, [r3, #0]
    dt[11] = gfm3_sb(st[8]) ^ s_box(st[13]) ^ s_box(st[2]) ^ gfm2_sb(st[7]);
 800b178:	7c3b      	ldrb	r3, [r7, #16]
 800b17a:	461a      	mov	r2, r3
 800b17c:	4b12      	ldr	r3, [pc, #72]	@ (800b1c8 <mix_sub_columns+0x288>)
 800b17e:	5c9a      	ldrb	r2, [r3, r2]
 800b180:	7d7b      	ldrb	r3, [r7, #21]
 800b182:	4619      	mov	r1, r3
 800b184:	4b11      	ldr	r3, [pc, #68]	@ (800b1cc <mix_sub_columns+0x28c>)
 800b186:	5c5b      	ldrb	r3, [r3, r1]
 800b188:	4053      	eors	r3, r2
 800b18a:	b2da      	uxtb	r2, r3
 800b18c:	7abb      	ldrb	r3, [r7, #10]
 800b18e:	4619      	mov	r1, r3
 800b190:	4b0e      	ldr	r3, [pc, #56]	@ (800b1cc <mix_sub_columns+0x28c>)
 800b192:	5c5b      	ldrb	r3, [r3, r1]
 800b194:	4053      	eors	r3, r2
 800b196:	b2d9      	uxtb	r1, r3
 800b198:	7bfb      	ldrb	r3, [r7, #15]
 800b19a:	461a      	mov	r2, r3
 800b19c:	4b09      	ldr	r3, [pc, #36]	@ (800b1c4 <mix_sub_columns+0x284>)
 800b19e:	5c9a      	ldrb	r2, [r3, r2]
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	330b      	adds	r3, #11
 800b1a4:	404a      	eors	r2, r1
 800b1a6:	b2d2      	uxtb	r2, r2
 800b1a8:	701a      	strb	r2, [r3, #0]

    dt[12] = gfm2_sb(st[12]) ^ gfm3_sb(st[1]) ^ s_box(st[6]) ^ s_box(st[11]);
 800b1aa:	7d3b      	ldrb	r3, [r7, #20]
 800b1ac:	461a      	mov	r2, r3
 800b1ae:	4b05      	ldr	r3, [pc, #20]	@ (800b1c4 <mix_sub_columns+0x284>)
 800b1b0:	5c9a      	ldrb	r2, [r3, r2]
 800b1b2:	7a7b      	ldrb	r3, [r7, #9]
 800b1b4:	4619      	mov	r1, r3
 800b1b6:	4b04      	ldr	r3, [pc, #16]	@ (800b1c8 <mix_sub_columns+0x288>)
 800b1b8:	5c5b      	ldrb	r3, [r3, r1]
 800b1ba:	4053      	eors	r3, r2
 800b1bc:	b2da      	uxtb	r2, r3
 800b1be:	7bbb      	ldrb	r3, [r7, #14]
 800b1c0:	4619      	mov	r1, r3
 800b1c2:	e005      	b.n	800b1d0 <mix_sub_columns+0x290>
 800b1c4:	0801ba2c 	.word	0x0801ba2c
 800b1c8:	0801bb2c 	.word	0x0801bb2c
 800b1cc:	0801b92c 	.word	0x0801b92c
 800b1d0:	4b2d      	ldr	r3, [pc, #180]	@ (800b288 <mix_sub_columns+0x348>)
 800b1d2:	5c5b      	ldrb	r3, [r3, r1]
 800b1d4:	4053      	eors	r3, r2
 800b1d6:	b2d9      	uxtb	r1, r3
 800b1d8:	7cfb      	ldrb	r3, [r7, #19]
 800b1da:	461a      	mov	r2, r3
 800b1dc:	4b2a      	ldr	r3, [pc, #168]	@ (800b288 <mix_sub_columns+0x348>)
 800b1de:	5c9a      	ldrb	r2, [r3, r2]
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	330c      	adds	r3, #12
 800b1e4:	404a      	eors	r2, r1
 800b1e6:	b2d2      	uxtb	r2, r2
 800b1e8:	701a      	strb	r2, [r3, #0]
    dt[13] = s_box(st[12]) ^ gfm2_sb(st[1]) ^ gfm3_sb(st[6]) ^ s_box(st[11]);
 800b1ea:	7d3b      	ldrb	r3, [r7, #20]
 800b1ec:	461a      	mov	r2, r3
 800b1ee:	4b26      	ldr	r3, [pc, #152]	@ (800b288 <mix_sub_columns+0x348>)
 800b1f0:	5c9a      	ldrb	r2, [r3, r2]
 800b1f2:	7a7b      	ldrb	r3, [r7, #9]
 800b1f4:	4619      	mov	r1, r3
 800b1f6:	4b25      	ldr	r3, [pc, #148]	@ (800b28c <mix_sub_columns+0x34c>)
 800b1f8:	5c5b      	ldrb	r3, [r3, r1]
 800b1fa:	4053      	eors	r3, r2
 800b1fc:	b2da      	uxtb	r2, r3
 800b1fe:	7bbb      	ldrb	r3, [r7, #14]
 800b200:	4619      	mov	r1, r3
 800b202:	4b23      	ldr	r3, [pc, #140]	@ (800b290 <mix_sub_columns+0x350>)
 800b204:	5c5b      	ldrb	r3, [r3, r1]
 800b206:	4053      	eors	r3, r2
 800b208:	b2d9      	uxtb	r1, r3
 800b20a:	7cfb      	ldrb	r3, [r7, #19]
 800b20c:	461a      	mov	r2, r3
 800b20e:	4b1e      	ldr	r3, [pc, #120]	@ (800b288 <mix_sub_columns+0x348>)
 800b210:	5c9a      	ldrb	r2, [r3, r2]
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	330d      	adds	r3, #13
 800b216:	404a      	eors	r2, r1
 800b218:	b2d2      	uxtb	r2, r2
 800b21a:	701a      	strb	r2, [r3, #0]
    dt[14] = s_box(st[12]) ^ s_box(st[1]) ^ gfm2_sb(st[6]) ^ gfm3_sb(st[11]);
 800b21c:	7d3b      	ldrb	r3, [r7, #20]
 800b21e:	461a      	mov	r2, r3
 800b220:	4b19      	ldr	r3, [pc, #100]	@ (800b288 <mix_sub_columns+0x348>)
 800b222:	5c9a      	ldrb	r2, [r3, r2]
 800b224:	7a7b      	ldrb	r3, [r7, #9]
 800b226:	4619      	mov	r1, r3
 800b228:	4b17      	ldr	r3, [pc, #92]	@ (800b288 <mix_sub_columns+0x348>)
 800b22a:	5c5b      	ldrb	r3, [r3, r1]
 800b22c:	4053      	eors	r3, r2
 800b22e:	b2da      	uxtb	r2, r3
 800b230:	7bbb      	ldrb	r3, [r7, #14]
 800b232:	4619      	mov	r1, r3
 800b234:	4b15      	ldr	r3, [pc, #84]	@ (800b28c <mix_sub_columns+0x34c>)
 800b236:	5c5b      	ldrb	r3, [r3, r1]
 800b238:	4053      	eors	r3, r2
 800b23a:	b2d9      	uxtb	r1, r3
 800b23c:	7cfb      	ldrb	r3, [r7, #19]
 800b23e:	461a      	mov	r2, r3
 800b240:	4b13      	ldr	r3, [pc, #76]	@ (800b290 <mix_sub_columns+0x350>)
 800b242:	5c9a      	ldrb	r2, [r3, r2]
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	330e      	adds	r3, #14
 800b248:	404a      	eors	r2, r1
 800b24a:	b2d2      	uxtb	r2, r2
 800b24c:	701a      	strb	r2, [r3, #0]
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 800b24e:	7d3b      	ldrb	r3, [r7, #20]
 800b250:	461a      	mov	r2, r3
 800b252:	4b0f      	ldr	r3, [pc, #60]	@ (800b290 <mix_sub_columns+0x350>)
 800b254:	5c9a      	ldrb	r2, [r3, r2]
 800b256:	7a7b      	ldrb	r3, [r7, #9]
 800b258:	4619      	mov	r1, r3
 800b25a:	4b0b      	ldr	r3, [pc, #44]	@ (800b288 <mix_sub_columns+0x348>)
 800b25c:	5c5b      	ldrb	r3, [r3, r1]
 800b25e:	4053      	eors	r3, r2
 800b260:	b2da      	uxtb	r2, r3
 800b262:	7bbb      	ldrb	r3, [r7, #14]
 800b264:	4619      	mov	r1, r3
 800b266:	4b08      	ldr	r3, [pc, #32]	@ (800b288 <mix_sub_columns+0x348>)
 800b268:	5c5b      	ldrb	r3, [r3, r1]
 800b26a:	4053      	eors	r3, r2
 800b26c:	b2d9      	uxtb	r1, r3
 800b26e:	7cfb      	ldrb	r3, [r7, #19]
 800b270:	461a      	mov	r2, r3
 800b272:	4b06      	ldr	r3, [pc, #24]	@ (800b28c <mix_sub_columns+0x34c>)
 800b274:	5c9a      	ldrb	r2, [r3, r2]
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	330f      	adds	r3, #15
 800b27a:	404a      	eors	r2, r1
 800b27c:	b2d2      	uxtb	r2, r2
 800b27e:	701a      	strb	r2, [r3, #0]
  }
 800b280:	bf00      	nop
 800b282:	3718      	adds	r7, #24
 800b284:	46bd      	mov	sp, r7
 800b286:	bd80      	pop	{r7, pc}
 800b288:	0801b92c 	.word	0x0801b92c
 800b28c:	0801ba2c 	.word	0x0801ba2c
 800b290:	0801bb2c 	.word	0x0801bb2c

0800b294 <lorawan_aes_set_key>:
#if defined( AES_ENC_PREKEYED ) || defined( AES_DEC_PREKEYED )

/*  Set the cipher key for the pre-keyed version */

return_type lorawan_aes_set_key( const uint8_t key[], length_type keylen, lorawan_aes_context ctx[1] )
{
 800b294:	b580      	push	{r7, lr}
 800b296:	b086      	sub	sp, #24
 800b298:	af00      	add	r7, sp, #0
 800b29a:	60f8      	str	r0, [r7, #12]
 800b29c:	460b      	mov	r3, r1
 800b29e:	607a      	str	r2, [r7, #4]
 800b2a0:	72fb      	strb	r3, [r7, #11]
    uint8_t cc, rc, hi;

    switch( keylen )
 800b2a2:	7afb      	ldrb	r3, [r7, #11]
 800b2a4:	3b10      	subs	r3, #16
 800b2a6:	2b10      	cmp	r3, #16
 800b2a8:	bf8c      	ite	hi
 800b2aa:	2201      	movhi	r2, #1
 800b2ac:	2200      	movls	r2, #0
 800b2ae:	b2d2      	uxtb	r2, r2
 800b2b0:	2a00      	cmp	r2, #0
 800b2b2:	d10b      	bne.n	800b2cc <lorawan_aes_set_key+0x38>
 800b2b4:	4a64      	ldr	r2, [pc, #400]	@ (800b448 <lorawan_aes_set_key+0x1b4>)
 800b2b6:	fa22 f303 	lsr.w	r3, r2, r3
 800b2ba:	f003 0301 	and.w	r3, r3, #1
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	bf14      	ite	ne
 800b2c2:	2301      	movne	r3, #1
 800b2c4:	2300      	moveq	r3, #0
 800b2c6:	b2db      	uxtb	r3, r3
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	d105      	bne.n	800b2d8 <lorawan_aes_set_key+0x44>
    case 16:
    case 24:
    case 32:
        break;
    default:
        ctx->rnd = 0;
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	2200      	movs	r2, #0
 800b2d0:	f883 20f0 	strb.w	r2, [r3, #240]	@ 0xf0
        return ( uint8_t )-1;
 800b2d4:	23ff      	movs	r3, #255	@ 0xff
 800b2d6:	e0b2      	b.n	800b43e <lorawan_aes_set_key+0x1aa>
        break;
 800b2d8:	bf00      	nop
    }
    block_copy_nn(ctx->ksch, key, keylen);
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	7afa      	ldrb	r2, [r7, #11]
 800b2de:	68f9      	ldr	r1, [r7, #12]
 800b2e0:	4618      	mov	r0, r3
 800b2e2:	f7ff fbfc 	bl	800aade <copy_block_nn>
    hi = (keylen + 28) << 2;
 800b2e6:	7afb      	ldrb	r3, [r7, #11]
 800b2e8:	331c      	adds	r3, #28
 800b2ea:	b2db      	uxtb	r3, r3
 800b2ec:	009b      	lsls	r3, r3, #2
 800b2ee:	747b      	strb	r3, [r7, #17]
    ctx->rnd = (hi >> 4) - 1;
 800b2f0:	7c7b      	ldrb	r3, [r7, #17]
 800b2f2:	091b      	lsrs	r3, r3, #4
 800b2f4:	b2db      	uxtb	r3, r3
 800b2f6:	3b01      	subs	r3, #1
 800b2f8:	b2da      	uxtb	r2, r3
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	f883 20f0 	strb.w	r2, [r3, #240]	@ 0xf0
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800b300:	7afb      	ldrb	r3, [r7, #11]
 800b302:	75fb      	strb	r3, [r7, #23]
 800b304:	2301      	movs	r3, #1
 800b306:	75bb      	strb	r3, [r7, #22]
 800b308:	e093      	b.n	800b432 <lorawan_aes_set_key+0x19e>
    {   uint8_t tt, t0, t1, t2, t3;

        t0 = ctx->ksch[cc - 4];
 800b30a:	7dfb      	ldrb	r3, [r7, #23]
 800b30c:	3b04      	subs	r3, #4
 800b30e:	687a      	ldr	r2, [r7, #4]
 800b310:	5cd3      	ldrb	r3, [r2, r3]
 800b312:	757b      	strb	r3, [r7, #21]
        t1 = ctx->ksch[cc - 3];
 800b314:	7dfb      	ldrb	r3, [r7, #23]
 800b316:	3b03      	subs	r3, #3
 800b318:	687a      	ldr	r2, [r7, #4]
 800b31a:	5cd3      	ldrb	r3, [r2, r3]
 800b31c:	753b      	strb	r3, [r7, #20]
        t2 = ctx->ksch[cc - 2];
 800b31e:	7dfb      	ldrb	r3, [r7, #23]
 800b320:	3b02      	subs	r3, #2
 800b322:	687a      	ldr	r2, [r7, #4]
 800b324:	5cd3      	ldrb	r3, [r2, r3]
 800b326:	74fb      	strb	r3, [r7, #19]
        t3 = ctx->ksch[cc - 1];
 800b328:	7dfb      	ldrb	r3, [r7, #23]
 800b32a:	3b01      	subs	r3, #1
 800b32c:	687a      	ldr	r2, [r7, #4]
 800b32e:	5cd3      	ldrb	r3, [r2, r3]
 800b330:	74bb      	strb	r3, [r7, #18]
        if( cc % keylen == 0 )
 800b332:	7dfb      	ldrb	r3, [r7, #23]
 800b334:	7afa      	ldrb	r2, [r7, #11]
 800b336:	fbb3 f1f2 	udiv	r1, r3, r2
 800b33a:	fb01 f202 	mul.w	r2, r1, r2
 800b33e:	1a9b      	subs	r3, r3, r2
 800b340:	b2db      	uxtb	r3, r3
 800b342:	2b00      	cmp	r3, #0
 800b344:	d127      	bne.n	800b396 <lorawan_aes_set_key+0x102>
        {
            tt = t0;
 800b346:	7d7b      	ldrb	r3, [r7, #21]
 800b348:	743b      	strb	r3, [r7, #16]
            t0 = s_box(t1) ^ rc;
 800b34a:	7d3b      	ldrb	r3, [r7, #20]
 800b34c:	4a3f      	ldr	r2, [pc, #252]	@ (800b44c <lorawan_aes_set_key+0x1b8>)
 800b34e:	5cd2      	ldrb	r2, [r2, r3]
 800b350:	7dbb      	ldrb	r3, [r7, #22]
 800b352:	4053      	eors	r3, r2
 800b354:	757b      	strb	r3, [r7, #21]
            t1 = s_box(t2);
 800b356:	7cfb      	ldrb	r3, [r7, #19]
 800b358:	4a3c      	ldr	r2, [pc, #240]	@ (800b44c <lorawan_aes_set_key+0x1b8>)
 800b35a:	5cd3      	ldrb	r3, [r2, r3]
 800b35c:	753b      	strb	r3, [r7, #20]
            t2 = s_box(t3);
 800b35e:	7cbb      	ldrb	r3, [r7, #18]
 800b360:	4a3a      	ldr	r2, [pc, #232]	@ (800b44c <lorawan_aes_set_key+0x1b8>)
 800b362:	5cd3      	ldrb	r3, [r2, r3]
 800b364:	74fb      	strb	r3, [r7, #19]
            t3 = s_box(tt);
 800b366:	7c3b      	ldrb	r3, [r7, #16]
 800b368:	4a38      	ldr	r2, [pc, #224]	@ (800b44c <lorawan_aes_set_key+0x1b8>)
 800b36a:	5cd3      	ldrb	r3, [r2, r3]
 800b36c:	74bb      	strb	r3, [r7, #18]
            rc = f2(rc);
 800b36e:	7dbb      	ldrb	r3, [r7, #22]
 800b370:	005b      	lsls	r3, r3, #1
 800b372:	b25a      	sxtb	r2, r3
 800b374:	7dbb      	ldrb	r3, [r7, #22]
 800b376:	09db      	lsrs	r3, r3, #7
 800b378:	b2db      	uxtb	r3, r3
 800b37a:	4619      	mov	r1, r3
 800b37c:	0049      	lsls	r1, r1, #1
 800b37e:	440b      	add	r3, r1
 800b380:	4619      	mov	r1, r3
 800b382:	00c8      	lsls	r0, r1, #3
 800b384:	4619      	mov	r1, r3
 800b386:	4603      	mov	r3, r0
 800b388:	440b      	add	r3, r1
 800b38a:	b2db      	uxtb	r3, r3
 800b38c:	b25b      	sxtb	r3, r3
 800b38e:	4053      	eors	r3, r2
 800b390:	b25b      	sxtb	r3, r3
 800b392:	75bb      	strb	r3, [r7, #22]
 800b394:	e01c      	b.n	800b3d0 <lorawan_aes_set_key+0x13c>
        }
        else if( keylen > 24 && cc % keylen == 16 )
 800b396:	7afb      	ldrb	r3, [r7, #11]
 800b398:	2b18      	cmp	r3, #24
 800b39a:	d919      	bls.n	800b3d0 <lorawan_aes_set_key+0x13c>
 800b39c:	7dfb      	ldrb	r3, [r7, #23]
 800b39e:	7afa      	ldrb	r2, [r7, #11]
 800b3a0:	fbb3 f1f2 	udiv	r1, r3, r2
 800b3a4:	fb01 f202 	mul.w	r2, r1, r2
 800b3a8:	1a9b      	subs	r3, r3, r2
 800b3aa:	b2db      	uxtb	r3, r3
 800b3ac:	2b10      	cmp	r3, #16
 800b3ae:	d10f      	bne.n	800b3d0 <lorawan_aes_set_key+0x13c>
        {
            t0 = s_box(t0);
 800b3b0:	7d7b      	ldrb	r3, [r7, #21]
 800b3b2:	4a26      	ldr	r2, [pc, #152]	@ (800b44c <lorawan_aes_set_key+0x1b8>)
 800b3b4:	5cd3      	ldrb	r3, [r2, r3]
 800b3b6:	757b      	strb	r3, [r7, #21]
            t1 = s_box(t1);
 800b3b8:	7d3b      	ldrb	r3, [r7, #20]
 800b3ba:	4a24      	ldr	r2, [pc, #144]	@ (800b44c <lorawan_aes_set_key+0x1b8>)
 800b3bc:	5cd3      	ldrb	r3, [r2, r3]
 800b3be:	753b      	strb	r3, [r7, #20]
            t2 = s_box(t2);
 800b3c0:	7cfb      	ldrb	r3, [r7, #19]
 800b3c2:	4a22      	ldr	r2, [pc, #136]	@ (800b44c <lorawan_aes_set_key+0x1b8>)
 800b3c4:	5cd3      	ldrb	r3, [r2, r3]
 800b3c6:	74fb      	strb	r3, [r7, #19]
            t3 = s_box(t3);
 800b3c8:	7cbb      	ldrb	r3, [r7, #18]
 800b3ca:	4a20      	ldr	r2, [pc, #128]	@ (800b44c <lorawan_aes_set_key+0x1b8>)
 800b3cc:	5cd3      	ldrb	r3, [r2, r3]
 800b3ce:	74bb      	strb	r3, [r7, #18]
        }
        tt = cc - keylen;
 800b3d0:	7dfa      	ldrb	r2, [r7, #23]
 800b3d2:	7afb      	ldrb	r3, [r7, #11]
 800b3d4:	1ad3      	subs	r3, r2, r3
 800b3d6:	743b      	strb	r3, [r7, #16]
        ctx->ksch[cc + 0] = ctx->ksch[tt + 0] ^ t0;
 800b3d8:	7c3b      	ldrb	r3, [r7, #16]
 800b3da:	687a      	ldr	r2, [r7, #4]
 800b3dc:	5cd1      	ldrb	r1, [r2, r3]
 800b3de:	7dfb      	ldrb	r3, [r7, #23]
 800b3e0:	7d7a      	ldrb	r2, [r7, #21]
 800b3e2:	404a      	eors	r2, r1
 800b3e4:	b2d1      	uxtb	r1, r2
 800b3e6:	687a      	ldr	r2, [r7, #4]
 800b3e8:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
 800b3ea:	7c3b      	ldrb	r3, [r7, #16]
 800b3ec:	3301      	adds	r3, #1
 800b3ee:	687a      	ldr	r2, [r7, #4]
 800b3f0:	5cd1      	ldrb	r1, [r2, r3]
 800b3f2:	7dfb      	ldrb	r3, [r7, #23]
 800b3f4:	3301      	adds	r3, #1
 800b3f6:	7d3a      	ldrb	r2, [r7, #20]
 800b3f8:	404a      	eors	r2, r1
 800b3fa:	b2d1      	uxtb	r1, r2
 800b3fc:	687a      	ldr	r2, [r7, #4]
 800b3fe:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
 800b400:	7c3b      	ldrb	r3, [r7, #16]
 800b402:	3302      	adds	r3, #2
 800b404:	687a      	ldr	r2, [r7, #4]
 800b406:	5cd1      	ldrb	r1, [r2, r3]
 800b408:	7dfb      	ldrb	r3, [r7, #23]
 800b40a:	3302      	adds	r3, #2
 800b40c:	7cfa      	ldrb	r2, [r7, #19]
 800b40e:	404a      	eors	r2, r1
 800b410:	b2d1      	uxtb	r1, r2
 800b412:	687a      	ldr	r2, [r7, #4]
 800b414:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 800b416:	7c3b      	ldrb	r3, [r7, #16]
 800b418:	3303      	adds	r3, #3
 800b41a:	687a      	ldr	r2, [r7, #4]
 800b41c:	5cd1      	ldrb	r1, [r2, r3]
 800b41e:	7dfb      	ldrb	r3, [r7, #23]
 800b420:	3303      	adds	r3, #3
 800b422:	7cba      	ldrb	r2, [r7, #18]
 800b424:	404a      	eors	r2, r1
 800b426:	b2d1      	uxtb	r1, r2
 800b428:	687a      	ldr	r2, [r7, #4]
 800b42a:	54d1      	strb	r1, [r2, r3]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800b42c:	7dfb      	ldrb	r3, [r7, #23]
 800b42e:	3304      	adds	r3, #4
 800b430:	75fb      	strb	r3, [r7, #23]
 800b432:	7dfa      	ldrb	r2, [r7, #23]
 800b434:	7c7b      	ldrb	r3, [r7, #17]
 800b436:	429a      	cmp	r2, r3
 800b438:	f4ff af67 	bcc.w	800b30a <lorawan_aes_set_key+0x76>
    }
    return 0;
 800b43c:	2300      	movs	r3, #0
}
 800b43e:	4618      	mov	r0, r3
 800b440:	3718      	adds	r7, #24
 800b442:	46bd      	mov	sp, r7
 800b444:	bd80      	pop	{r7, pc}
 800b446:	bf00      	nop
 800b448:	00010101 	.word	0x00010101
 800b44c:	0801b92c 	.word	0x0801b92c

0800b450 <lorawan_aes_encrypt>:
#if defined( AES_ENC_PREKEYED )

/*  Encrypt a single block of 16 bytes */

return_type lorawan_aes_encrypt( const uint8_t in[N_BLOCK], uint8_t  out[N_BLOCK], const lorawan_aes_context ctx[1] )
{
 800b450:	b580      	push	{r7, lr}
 800b452:	b08a      	sub	sp, #40	@ 0x28
 800b454:	af00      	add	r7, sp, #0
 800b456:	60f8      	str	r0, [r7, #12]
 800b458:	60b9      	str	r1, [r7, #8]
 800b45a:	607a      	str	r2, [r7, #4]
    if( ctx->rnd )
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800b462:	2b00      	cmp	r3, #0
 800b464:	d038      	beq.n	800b4d8 <lorawan_aes_encrypt+0x88>
    {
        uint8_t s1[N_BLOCK], r;
        copy_and_key( s1, in, ctx->ksch );
 800b466:	687a      	ldr	r2, [r7, #4]
 800b468:	f107 0314 	add.w	r3, r7, #20
 800b46c:	68f9      	ldr	r1, [r7, #12]
 800b46e:	4618      	mov	r0, r3
 800b470:	f7ff fc07 	bl	800ac82 <copy_and_key>

        for( r = 1 ; r < ctx->rnd ; ++r )
 800b474:	2301      	movs	r3, #1
 800b476:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800b47a:	e014      	b.n	800b4a6 <lorawan_aes_encrypt+0x56>
#if defined( VERSION_1 )
        {
            mix_sub_columns( s1 );
 800b47c:	f107 0314 	add.w	r3, r7, #20
 800b480:	4618      	mov	r0, r3
 800b482:	f7ff fd5d 	bl	800af40 <mix_sub_columns>
            add_round_key( s1, ctx->ksch + r * N_BLOCK);
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800b48c:	0112      	lsls	r2, r2, #4
 800b48e:	441a      	add	r2, r3
 800b490:	f107 0314 	add.w	r3, r7, #20
 800b494:	4611      	mov	r1, r2
 800b496:	4618      	mov	r0, r3
 800b498:	f7ff fcab 	bl	800adf2 <add_round_key>
        for( r = 1 ; r < ctx->rnd ; ++r )
 800b49c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b4a0:	3301      	adds	r3, #1
 800b4a2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800b4ac:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800b4b0:	429a      	cmp	r2, r3
 800b4b2:	d3e3      	bcc.n	800b47c <lorawan_aes_encrypt+0x2c>
        {   uint8_t s2[N_BLOCK];
            mix_sub_columns( s2, s1 );
            copy_and_key( s1, s2, ctx->ksch + r * N_BLOCK);
        }
#endif
        shift_sub_rows( s1 );
 800b4b4:	f107 0314 	add.w	r3, r7, #20
 800b4b8:	4618      	mov	r0, r3
 800b4ba:	f7ff fca7 	bl	800ae0c <shift_sub_rows>
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800b4c4:	0112      	lsls	r2, r2, #4
 800b4c6:	441a      	add	r2, r3
 800b4c8:	f107 0314 	add.w	r3, r7, #20
 800b4cc:	4619      	mov	r1, r3
 800b4ce:	68b8      	ldr	r0, [r7, #8]
 800b4d0:	f7ff fbd7 	bl	800ac82 <copy_and_key>
    }
    else
        return ( uint8_t )-1;
    return 0;
 800b4d4:	2300      	movs	r3, #0
 800b4d6:	e000      	b.n	800b4da <lorawan_aes_encrypt+0x8a>
        return ( uint8_t )-1;
 800b4d8:	23ff      	movs	r3, #255	@ 0xff
}
 800b4da:	4618      	mov	r0, r3
 800b4dc:	3728      	adds	r7, #40	@ 0x28
 800b4de:	46bd      	mov	sp, r7
 800b4e0:	bd80      	pop	{r7, pc}
	...

0800b4e4 <PrintKey>:
static SecureElementStatus_t ComputeCmac( uint8_t *micBxBuffer, uint8_t *buffer, uint32_t size, KeyIdentifier_t keyID,
                                          uint32_t *cmac );

/* Private functions ---------------------------------------------------------*/
static void PrintKey( KeyIdentifier_t keyID )
{
 800b4e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b4e6:	b0a1      	sub	sp, #132	@ 0x84
 800b4e8:	af12      	add	r7, sp, #72	@ 0x48
 800b4ea:	4603      	mov	r3, r0
 800b4ec:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
#if (KEY_EXTRACTABLE == 1)
#if (LORAWAN_KMS == 0)
    Key_t *keyItem;
    if( SECURE_ELEMENT_SUCCESS == SecureElementGetKeyByID( keyID, &keyItem ) )
 800b4f0:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 800b4f4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800b4f8:	4611      	mov	r1, r2
 800b4fa:	4618      	mov	r0, r3
 800b4fc:	f000 fa12 	bl	800b924 <SecureElementGetKeyByID>
 800b500:	4603      	mov	r3, r0
 800b502:	2b00      	cmp	r3, #0
 800b504:	d174      	bne.n	800b5f0 <PrintKey+0x10c>
#else
    uint8_t extractable_key[SE_KEY_SIZE] = {0};
    if( SECURE_ELEMENT_SUCCESS == SecureElementGetKeyByID( keyID, ( uint8_t * )extractable_key ) )
#endif /* LORAWAN_KMS */
    {
        for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800b506:	2300      	movs	r3, #0
 800b508:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800b50c:	e06c      	b.n	800b5e8 <PrintKey+0x104>
        {
            if( KeyLabel[i].keyID == keyID )
 800b50e:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 800b512:	4939      	ldr	r1, [pc, #228]	@ (800b5f8 <PrintKey+0x114>)
 800b514:	4613      	mov	r3, r2
 800b516:	005b      	lsls	r3, r3, #1
 800b518:	4413      	add	r3, r2
 800b51a:	009b      	lsls	r3, r3, #2
 800b51c:	440b      	add	r3, r1
 800b51e:	781b      	ldrb	r3, [r3, #0]
 800b520:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800b524:	429a      	cmp	r2, r3
 800b526:	d15a      	bne.n	800b5de <PrintKey+0xfa>
            {
#if (LORAWAN_KMS == 0)
                MW_LOG( TS_OFF, VLEVEL_M,
 800b528:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 800b52c:	4932      	ldr	r1, [pc, #200]	@ (800b5f8 <PrintKey+0x114>)
 800b52e:	4613      	mov	r3, r2
 800b530:	005b      	lsls	r3, r3, #1
 800b532:	4413      	add	r3, r2
 800b534:	009b      	lsls	r3, r3, #2
 800b536:	440b      	add	r3, r1
 800b538:	3308      	adds	r3, #8
 800b53a:	6819      	ldr	r1, [r3, #0]
 800b53c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b53e:	785b      	ldrb	r3, [r3, #1]
 800b540:	461d      	mov	r5, r3
 800b542:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b544:	789b      	ldrb	r3, [r3, #2]
 800b546:	461e      	mov	r6, r3
 800b548:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b54a:	78db      	ldrb	r3, [r3, #3]
 800b54c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b54e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b550:	791b      	ldrb	r3, [r3, #4]
 800b552:	627b      	str	r3, [r7, #36]	@ 0x24
 800b554:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b556:	795b      	ldrb	r3, [r3, #5]
 800b558:	623b      	str	r3, [r7, #32]
 800b55a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b55c:	799b      	ldrb	r3, [r3, #6]
 800b55e:	61fb      	str	r3, [r7, #28]
 800b560:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b562:	79db      	ldrb	r3, [r3, #7]
 800b564:	61bb      	str	r3, [r7, #24]
 800b566:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b568:	7a1b      	ldrb	r3, [r3, #8]
 800b56a:	617b      	str	r3, [r7, #20]
 800b56c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b56e:	7a5b      	ldrb	r3, [r3, #9]
 800b570:	613b      	str	r3, [r7, #16]
 800b572:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b574:	7a9b      	ldrb	r3, [r3, #10]
 800b576:	60fb      	str	r3, [r7, #12]
 800b578:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b57a:	7adb      	ldrb	r3, [r3, #11]
 800b57c:	60bb      	str	r3, [r7, #8]
 800b57e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b580:	7b1b      	ldrb	r3, [r3, #12]
 800b582:	607b      	str	r3, [r7, #4]
 800b584:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b586:	7b5b      	ldrb	r3, [r3, #13]
 800b588:	461c      	mov	r4, r3
 800b58a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b58c:	7b9b      	ldrb	r3, [r3, #14]
 800b58e:	4618      	mov	r0, r3
 800b590:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b592:	7bdb      	ldrb	r3, [r3, #15]
 800b594:	461a      	mov	r2, r3
 800b596:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b598:	7c1b      	ldrb	r3, [r3, #16]
 800b59a:	9310      	str	r3, [sp, #64]	@ 0x40
 800b59c:	920f      	str	r2, [sp, #60]	@ 0x3c
 800b59e:	900e      	str	r0, [sp, #56]	@ 0x38
 800b5a0:	940d      	str	r4, [sp, #52]	@ 0x34
 800b5a2:	687a      	ldr	r2, [r7, #4]
 800b5a4:	920c      	str	r2, [sp, #48]	@ 0x30
 800b5a6:	68ba      	ldr	r2, [r7, #8]
 800b5a8:	920b      	str	r2, [sp, #44]	@ 0x2c
 800b5aa:	68fa      	ldr	r2, [r7, #12]
 800b5ac:	920a      	str	r2, [sp, #40]	@ 0x28
 800b5ae:	693a      	ldr	r2, [r7, #16]
 800b5b0:	9209      	str	r2, [sp, #36]	@ 0x24
 800b5b2:	697a      	ldr	r2, [r7, #20]
 800b5b4:	9208      	str	r2, [sp, #32]
 800b5b6:	69ba      	ldr	r2, [r7, #24]
 800b5b8:	9207      	str	r2, [sp, #28]
 800b5ba:	69fa      	ldr	r2, [r7, #28]
 800b5bc:	9206      	str	r2, [sp, #24]
 800b5be:	6a3a      	ldr	r2, [r7, #32]
 800b5c0:	9205      	str	r2, [sp, #20]
 800b5c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b5c4:	9204      	str	r2, [sp, #16]
 800b5c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b5c8:	9303      	str	r3, [sp, #12]
 800b5ca:	9602      	str	r6, [sp, #8]
 800b5cc:	9501      	str	r5, [sp, #4]
 800b5ce:	9100      	str	r1, [sp, #0]
 800b5d0:	4b0a      	ldr	r3, [pc, #40]	@ (800b5fc <PrintKey+0x118>)
 800b5d2:	2200      	movs	r2, #0
 800b5d4:	2100      	movs	r1, #0
 800b5d6:	2002      	movs	r0, #2
 800b5d8:	f00f fb6c 	bl	801acb4 <UTIL_ADV_TRACE_COND_FSend>
 800b5dc:	e008      	b.n	800b5f0 <PrintKey+0x10c>
        for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800b5de:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800b5e2:	3301      	adds	r3, #1
 800b5e4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800b5e8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800b5ec:	2b0a      	cmp	r3, #10
 800b5ee:	d98e      	bls.n	800b50e <PrintKey+0x2a>
                return;
            }
        }
    }
#endif /* KEY_EXTRACTABLE */
}
 800b5f0:	373c      	adds	r7, #60	@ 0x3c
 800b5f2:	46bd      	mov	sp, r7
 800b5f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b5f6:	bf00      	nop
 800b5f8:	0801bc2c 	.word	0x0801bc2c
 800b5fc:	0801b4d0 	.word	0x0801b4d0

0800b600 <PrintIds>:

static void PrintIds( ActivationType_t mode )
{
 800b600:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b602:	b091      	sub	sp, #68	@ 0x44
 800b604:	af08      	add	r7, sp, #32
 800b606:	4603      	mov	r3, r0
 800b608:	71fb      	strb	r3, [r7, #7]
    uint8_t joinEui[SE_EUI_SIZE];
    uint8_t devEui[SE_EUI_SIZE];
    uint32_t devAddr = 0;
 800b60a:	2300      	movs	r3, #0
 800b60c:	60fb      	str	r3, [r7, #12]

    SecureElementGetDevEui( devEui );
 800b60e:	f107 0310 	add.w	r3, r7, #16
 800b612:	4618      	mov	r0, r3
 800b614:	f000 fbf0 	bl	800bdf8 <SecureElementGetDevEui>
    MW_LOG( TS_OFF, VLEVEL_M, "###### DevEUI:      %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n", HEX8( devEui ) );
 800b618:	7c3b      	ldrb	r3, [r7, #16]
 800b61a:	7c7a      	ldrb	r2, [r7, #17]
 800b61c:	7cb9      	ldrb	r1, [r7, #18]
 800b61e:	7cf8      	ldrb	r0, [r7, #19]
 800b620:	7d3c      	ldrb	r4, [r7, #20]
 800b622:	7d7d      	ldrb	r5, [r7, #21]
 800b624:	7dbe      	ldrb	r6, [r7, #22]
 800b626:	f897 c017 	ldrb.w	ip, [r7, #23]
 800b62a:	f8cd c01c 	str.w	ip, [sp, #28]
 800b62e:	9606      	str	r6, [sp, #24]
 800b630:	9505      	str	r5, [sp, #20]
 800b632:	9404      	str	r4, [sp, #16]
 800b634:	9003      	str	r0, [sp, #12]
 800b636:	9102      	str	r1, [sp, #8]
 800b638:	9201      	str	r2, [sp, #4]
 800b63a:	9300      	str	r3, [sp, #0]
 800b63c:	4b24      	ldr	r3, [pc, #144]	@ (800b6d0 <PrintIds+0xd0>)
 800b63e:	2200      	movs	r2, #0
 800b640:	2100      	movs	r1, #0
 800b642:	2002      	movs	r0, #2
 800b644:	f00f fb36 	bl	801acb4 <UTIL_ADV_TRACE_COND_FSend>

    SecureElementGetJoinEui( joinEui );
 800b648:	f107 0318 	add.w	r3, r7, #24
 800b64c:	4618      	mov	r0, r3
 800b64e:	f000 fc03 	bl	800be58 <SecureElementGetJoinEui>
    MW_LOG( TS_OFF, VLEVEL_M, "###### AppEUI:      %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n", HEX8( joinEui ) );
 800b652:	7e3b      	ldrb	r3, [r7, #24]
 800b654:	7e7a      	ldrb	r2, [r7, #25]
 800b656:	7eb9      	ldrb	r1, [r7, #26]
 800b658:	7ef8      	ldrb	r0, [r7, #27]
 800b65a:	7f3c      	ldrb	r4, [r7, #28]
 800b65c:	7f7d      	ldrb	r5, [r7, #29]
 800b65e:	7fbe      	ldrb	r6, [r7, #30]
 800b660:	f897 c01f 	ldrb.w	ip, [r7, #31]
 800b664:	f8cd c01c 	str.w	ip, [sp, #28]
 800b668:	9606      	str	r6, [sp, #24]
 800b66a:	9505      	str	r5, [sp, #20]
 800b66c:	9404      	str	r4, [sp, #16]
 800b66e:	9003      	str	r0, [sp, #12]
 800b670:	9102      	str	r1, [sp, #8]
 800b672:	9201      	str	r2, [sp, #4]
 800b674:	9300      	str	r3, [sp, #0]
 800b676:	4b17      	ldr	r3, [pc, #92]	@ (800b6d4 <PrintIds+0xd4>)
 800b678:	2200      	movs	r2, #0
 800b67a:	2100      	movs	r1, #0
 800b67c:	2002      	movs	r0, #2
 800b67e:	f00f fb19 	bl	801acb4 <UTIL_ADV_TRACE_COND_FSend>

    SecureElementGetDevAddr( mode, &devAddr );
 800b682:	f107 020c 	add.w	r2, r7, #12
 800b686:	79fb      	ldrb	r3, [r7, #7]
 800b688:	4611      	mov	r1, r2
 800b68a:	4618      	mov	r0, r3
 800b68c:	f000 fc16 	bl	800bebc <SecureElementGetDevAddr>
    MW_LOG( TS_OFF, VLEVEL_M, "###### DevAddr:     %02X:%02X:%02X:%02X\r\n",
 800b690:	f107 030c 	add.w	r3, r7, #12
 800b694:	3303      	adds	r3, #3
 800b696:	781b      	ldrb	r3, [r3, #0]
 800b698:	461a      	mov	r2, r3
 800b69a:	f107 030c 	add.w	r3, r7, #12
 800b69e:	3302      	adds	r3, #2
 800b6a0:	781b      	ldrb	r3, [r3, #0]
 800b6a2:	4619      	mov	r1, r3
 800b6a4:	f107 030c 	add.w	r3, r7, #12
 800b6a8:	3301      	adds	r3, #1
 800b6aa:	781b      	ldrb	r3, [r3, #0]
 800b6ac:	4618      	mov	r0, r3
 800b6ae:	f107 030c 	add.w	r3, r7, #12
 800b6b2:	781b      	ldrb	r3, [r3, #0]
 800b6b4:	9303      	str	r3, [sp, #12]
 800b6b6:	9002      	str	r0, [sp, #8]
 800b6b8:	9101      	str	r1, [sp, #4]
 800b6ba:	9200      	str	r2, [sp, #0]
 800b6bc:	4b06      	ldr	r3, [pc, #24]	@ (800b6d8 <PrintIds+0xd8>)
 800b6be:	2200      	movs	r2, #0
 800b6c0:	2100      	movs	r1, #0
 800b6c2:	2002      	movs	r0, #2
 800b6c4:	f00f faf6 	bl	801acb4 <UTIL_ADV_TRACE_COND_FSend>
            ( unsigned )( ( unsigned char * )( &devAddr ) )[3],
            ( unsigned )( ( unsigned char * )( &devAddr ) )[2],
            ( unsigned )( ( unsigned char * )( &devAddr ) )[1],
            ( unsigned )( ( unsigned char * )( &devAddr ) )[0] );
}
 800b6c8:	bf00      	nop
 800b6ca:	3724      	adds	r7, #36	@ 0x24
 800b6cc:	46bd      	mov	sp, r7
 800b6ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b6d0:	0801b52c 	.word	0x0801b52c
 800b6d4:	0801b56c 	.word	0x0801b56c
 800b6d8:	0801b5ac 	.word	0x0801b5ac

0800b6dc <GetKeyByID>:

#if (LORAWAN_KMS == 0)
static SecureElementStatus_t GetKeyByID( KeyIdentifier_t keyID, Key_t **keyItem )
{
 800b6dc:	b480      	push	{r7}
 800b6de:	b085      	sub	sp, #20
 800b6e0:	af00      	add	r7, sp, #0
 800b6e2:	4603      	mov	r3, r0
 800b6e4:	6039      	str	r1, [r7, #0]
 800b6e6:	71fb      	strb	r3, [r7, #7]
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800b6e8:	2300      	movs	r3, #0
 800b6ea:	73fb      	strb	r3, [r7, #15]
 800b6ec:	e01a      	b.n	800b724 <GetKeyByID+0x48>
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 800b6ee:	4b12      	ldr	r3, [pc, #72]	@ (800b738 <GetKeyByID+0x5c>)
 800b6f0:	6819      	ldr	r1, [r3, #0]
 800b6f2:	7bfa      	ldrb	r2, [r7, #15]
 800b6f4:	4613      	mov	r3, r2
 800b6f6:	011b      	lsls	r3, r3, #4
 800b6f8:	4413      	add	r3, r2
 800b6fa:	440b      	add	r3, r1
 800b6fc:	3318      	adds	r3, #24
 800b6fe:	781b      	ldrb	r3, [r3, #0]
 800b700:	79fa      	ldrb	r2, [r7, #7]
 800b702:	429a      	cmp	r2, r3
 800b704:	d10b      	bne.n	800b71e <GetKeyByID+0x42>
        {
            *keyItem = &( SeNvm->KeyList[i] );
 800b706:	4b0c      	ldr	r3, [pc, #48]	@ (800b738 <GetKeyByID+0x5c>)
 800b708:	6819      	ldr	r1, [r3, #0]
 800b70a:	7bfa      	ldrb	r2, [r7, #15]
 800b70c:	4613      	mov	r3, r2
 800b70e:	011b      	lsls	r3, r3, #4
 800b710:	4413      	add	r3, r2
 800b712:	3318      	adds	r3, #24
 800b714:	18ca      	adds	r2, r1, r3
 800b716:	683b      	ldr	r3, [r7, #0]
 800b718:	601a      	str	r2, [r3, #0]
            return SECURE_ELEMENT_SUCCESS;
 800b71a:	2300      	movs	r3, #0
 800b71c:	e006      	b.n	800b72c <GetKeyByID+0x50>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800b71e:	7bfb      	ldrb	r3, [r7, #15]
 800b720:	3301      	adds	r3, #1
 800b722:	73fb      	strb	r3, [r7, #15]
 800b724:	7bfb      	ldrb	r3, [r7, #15]
 800b726:	2b0a      	cmp	r3, #10
 800b728:	d9e1      	bls.n	800b6ee <GetKeyByID+0x12>
        }
    }
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800b72a:	2303      	movs	r3, #3
}
 800b72c:	4618      	mov	r0, r3
 800b72e:	3714      	adds	r7, #20
 800b730:	46bd      	mov	sp, r7
 800b732:	bc80      	pop	{r7}
 800b734:	4770      	bx	lr
 800b736:	bf00      	nop
 800b738:	20000490 	.word	0x20000490

0800b73c <ComputeCmac>:
}
#endif /* LORAWAN_KMS */

static SecureElementStatus_t ComputeCmac( uint8_t *micBxBuffer, uint8_t *buffer, uint32_t size, KeyIdentifier_t keyID,
                                          uint32_t *cmac )
{
 800b73c:	b590      	push	{r4, r7, lr}
 800b73e:	b0d1      	sub	sp, #324	@ 0x144
 800b740:	af00      	add	r7, sp, #0
 800b742:	f507 74a0 	add.w	r4, r7, #320	@ 0x140
 800b746:	f5a4 749a 	sub.w	r4, r4, #308	@ 0x134
 800b74a:	6020      	str	r0, [r4, #0]
 800b74c:	f507 70a0 	add.w	r0, r7, #320	@ 0x140
 800b750:	f5a0 709c 	sub.w	r0, r0, #312	@ 0x138
 800b754:	6001      	str	r1, [r0, #0]
 800b756:	f507 71a0 	add.w	r1, r7, #320	@ 0x140
 800b75a:	f5a1 719e 	sub.w	r1, r1, #316	@ 0x13c
 800b75e:	600a      	str	r2, [r1, #0]
 800b760:	461a      	mov	r2, r3
 800b762:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800b766:	f2a3 133d 	subw	r3, r3, #317	@ 0x13d
 800b76a:	701a      	strb	r2, [r3, #0]
    if( ( buffer == NULL ) || ( cmac == NULL ) )
 800b76c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800b770:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800b774:	681b      	ldr	r3, [r3, #0]
 800b776:	2b00      	cmp	r3, #0
 800b778:	d003      	beq.n	800b782 <ComputeCmac+0x46>
 800b77a:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 800b77e:	2b00      	cmp	r3, #0
 800b780:	d101      	bne.n	800b786 <ComputeCmac+0x4a>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800b782:	2302      	movs	r3, #2
 800b784:	e05d      	b.n	800b842 <ComputeCmac+0x106>

#if (LORAWAN_KMS == 0)
    uint8_t Cmac[16];
    AES_CMAC_CTX aesCmacCtx[1];

    AES_CMAC_Init( aesCmacCtx );
 800b786:	f107 0314 	add.w	r3, r7, #20
 800b78a:	4618      	mov	r0, r3
 800b78c:	f7fe ff02 	bl	800a594 <AES_CMAC_Init>

    Key_t                *keyItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &keyItem );
 800b790:	f107 0210 	add.w	r2, r7, #16
 800b794:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800b798:	f2a3 133d 	subw	r3, r3, #317	@ 0x13d
 800b79c:	781b      	ldrb	r3, [r3, #0]
 800b79e:	4611      	mov	r1, r2
 800b7a0:	4618      	mov	r0, r3
 800b7a2:	f7ff ff9b 	bl	800b6dc <GetKeyByID>
 800b7a6:	4603      	mov	r3, r0
 800b7a8:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f

    if( retval == SECURE_ELEMENT_SUCCESS )
 800b7ac:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
 800b7b0:	2b00      	cmp	r3, #0
 800b7b2:	d144      	bne.n	800b83e <ComputeCmac+0x102>
    {
        AES_CMAC_SetKey( aesCmacCtx, keyItem->KeyValue );
 800b7b4:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800b7b8:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800b7bc:	681b      	ldr	r3, [r3, #0]
 800b7be:	1c5a      	adds	r2, r3, #1
 800b7c0:	f107 0314 	add.w	r3, r7, #20
 800b7c4:	4611      	mov	r1, r2
 800b7c6:	4618      	mov	r0, r3
 800b7c8:	f7fe fefd 	bl	800a5c6 <AES_CMAC_SetKey>

        if( micBxBuffer != NULL )
 800b7cc:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800b7d0:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800b7d4:	681b      	ldr	r3, [r3, #0]
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	d009      	beq.n	800b7ee <ComputeCmac+0xb2>
        {
            AES_CMAC_Update( aesCmacCtx, micBxBuffer, MIC_BLOCK_BX_SIZE );
 800b7da:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800b7de:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800b7e2:	f107 0014 	add.w	r0, r7, #20
 800b7e6:	2210      	movs	r2, #16
 800b7e8:	6819      	ldr	r1, [r3, #0]
 800b7ea:	f7fe fefb 	bl	800a5e4 <AES_CMAC_Update>
        }

        AES_CMAC_Update( aesCmacCtx, buffer, size );
 800b7ee:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800b7f2:	f5a3 729e 	sub.w	r2, r3, #316	@ 0x13c
 800b7f6:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800b7fa:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800b7fe:	f107 0014 	add.w	r0, r7, #20
 800b802:	6812      	ldr	r2, [r2, #0]
 800b804:	6819      	ldr	r1, [r3, #0]
 800b806:	f7fe feed 	bl	800a5e4 <AES_CMAC_Update>

        AES_CMAC_Final( Cmac, aesCmacCtx );
 800b80a:	f107 0214 	add.w	r2, r7, #20
 800b80e:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 800b812:	4611      	mov	r1, r2
 800b814:	4618      	mov	r0, r3
 800b816:	f7fe ffa7 	bl	800a768 <AES_CMAC_Final>

        /* Bring into the required format */
        *cmac = GET_UINT32_LE( Cmac, 0 );
 800b81a:	f897 312c 	ldrb.w	r3, [r7, #300]	@ 0x12c
 800b81e:	461a      	mov	r2, r3
 800b820:	f897 312d 	ldrb.w	r3, [r7, #301]	@ 0x12d
 800b824:	021b      	lsls	r3, r3, #8
 800b826:	431a      	orrs	r2, r3
 800b828:	f897 312e 	ldrb.w	r3, [r7, #302]	@ 0x12e
 800b82c:	041b      	lsls	r3, r3, #16
 800b82e:	431a      	orrs	r2, r3
 800b830:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800b834:	061b      	lsls	r3, r3, #24
 800b836:	431a      	orrs	r2, r3
 800b838:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 800b83c:	601a      	str	r2, [r3, #0]
    if( rv != CKR_OK )
    {
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */
    return retval;
 800b83e:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
}
 800b842:	4618      	mov	r0, r3
 800b844:	f507 77a2 	add.w	r7, r7, #324	@ 0x144
 800b848:	46bd      	mov	sp, r7
 800b84a:	bd90      	pop	{r4, r7, pc}

0800b84c <SecureElementInit>:
/* Exported functions ---------------------------------------------------------*/
/*
 * API functions
 */
SecureElementStatus_t SecureElementInit( SecureElementNvmData_t *nvm )
{
 800b84c:	b580      	push	{r7, lr}
 800b84e:	b082      	sub	sp, #8
 800b850:	af00      	add	r7, sp, #0
 800b852:	6078      	str	r0, [r7, #4]
    if( nvm == NULL )
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	2b00      	cmp	r3, #0
 800b858:	d101      	bne.n	800b85e <SecureElementInit+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800b85a:	2302      	movs	r3, #2
 800b85c:	e00a      	b.n	800b874 <SecureElementInit+0x28>
    }

    /* Initialize nvm pointer */
    SeNvm = nvm;
 800b85e:	4a07      	ldr	r2, [pc, #28]	@ (800b87c <SecureElementInit+0x30>)
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	6013      	str	r3, [r2, #0]

#if (LORAWAN_KMS == 0)
    /* Initialize data */
    memcpy1( ( uint8_t * )SeNvm, ( uint8_t * )&seNvmInit, sizeof( seNvmInit ) );
 800b864:	4b05      	ldr	r3, [pc, #20]	@ (800b87c <SecureElementInit+0x30>)
 800b866:	681b      	ldr	r3, [r3, #0]
 800b868:	22d8      	movs	r2, #216	@ 0xd8
 800b86a:	4905      	ldr	r1, [pc, #20]	@ (800b880 <SecureElementInit+0x34>)
 800b86c:	4618      	mov	r0, r3
 800b86e:	f00a fee4 	bl	801663a <memcpy1>
        ( void )C_CloseSession( session );
    }

#endif /* LORAWAN_KMS */

    return SECURE_ELEMENT_SUCCESS;
 800b872:	2300      	movs	r3, #0
}
 800b874:	4618      	mov	r0, r3
 800b876:	3708      	adds	r7, #8
 800b878:	46bd      	mov	sp, r7
 800b87a:	bd80      	pop	{r7, pc}
 800b87c:	20000490 	.word	0x20000490
 800b880:	0801be58 	.word	0x0801be58

0800b884 <SecureElementInitMcuID>:

SecureElementStatus_t SecureElementInitMcuID( SecureElementGetUniqueId_t seGetUniqueId,
                                              SecureElementGetDevAddr_t seGetDevAddr )
{
 800b884:	b580      	push	{r7, lr}
 800b886:	b086      	sub	sp, #24
 800b888:	af00      	add	r7, sp, #0
 800b88a:	6078      	str	r0, [r7, #4]
 800b88c:	6039      	str	r1, [r7, #0]
    uint8_t devEui[SE_EUI_SIZE];
    uint32_t devAddrABP = 0;
 800b88e:	2300      	movs	r3, #0
 800b890:	60bb      	str	r3, [r7, #8]

    SecureElementGetDevEui( devEui );
 800b892:	f107 030c 	add.w	r3, r7, #12
 800b896:	4618      	mov	r0, r3
 800b898:	f000 faae 	bl	800bdf8 <SecureElementGetDevEui>
    SecureElementGetDevAddr( ACTIVATION_TYPE_ABP, &devAddrABP );
 800b89c:	f107 0308 	add.w	r3, r7, #8
 800b8a0:	4619      	mov	r1, r3
 800b8a2:	2001      	movs	r0, #1
 800b8a4:	f000 fb0a 	bl	800bebc <SecureElementGetDevAddr>

    if( seGetUniqueId != NULL )
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	d024      	beq.n	800b8f8 <SecureElementInitMcuID+0x74>
    {
        bool id_init = false;
 800b8ae:	2300      	movs	r3, #0
 800b8b0:	75fb      	strb	r3, [r7, #23]
        for( uint8_t index = 0; index < SE_EUI_SIZE; index++ )
 800b8b2:	2300      	movs	r3, #0
 800b8b4:	75bb      	strb	r3, [r7, #22]
 800b8b6:	e00c      	b.n	800b8d2 <SecureElementInitMcuID+0x4e>
        {
            if( devEui[index] != 0 )
 800b8b8:	7dbb      	ldrb	r3, [r7, #22]
 800b8ba:	3318      	adds	r3, #24
 800b8bc:	443b      	add	r3, r7
 800b8be:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	d002      	beq.n	800b8cc <SecureElementInitMcuID+0x48>
            {
                id_init = true;
 800b8c6:	2301      	movs	r3, #1
 800b8c8:	75fb      	strb	r3, [r7, #23]
                break;
 800b8ca:	e005      	b.n	800b8d8 <SecureElementInitMcuID+0x54>
        for( uint8_t index = 0; index < SE_EUI_SIZE; index++ )
 800b8cc:	7dbb      	ldrb	r3, [r7, #22]
 800b8ce:	3301      	adds	r3, #1
 800b8d0:	75bb      	strb	r3, [r7, #22]
 800b8d2:	7dbb      	ldrb	r3, [r7, #22]
 800b8d4:	2b07      	cmp	r3, #7
 800b8d6:	d9ef      	bls.n	800b8b8 <SecureElementInitMcuID+0x34>
            }
        }
        if( id_init == false )
 800b8d8:	7dfb      	ldrb	r3, [r7, #23]
 800b8da:	f083 0301 	eor.w	r3, r3, #1
 800b8de:	b2db      	uxtb	r3, r3
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	d009      	beq.n	800b8f8 <SecureElementInitMcuID+0x74>
        {
            /* Get a DevEUI from MCU unique ID */
            seGetUniqueId( devEui );
 800b8e4:	f107 020c 	add.w	r2, r7, #12
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	4610      	mov	r0, r2
 800b8ec:	4798      	blx	r3
            SecureElementSetDevEui( devEui );
 800b8ee:	f107 030c 	add.w	r3, r7, #12
 800b8f2:	4618      	mov	r0, r3
 800b8f4:	f000 fa68 	bl	800bdc8 <SecureElementSetDevEui>
        }
    }

    if( ( seGetDevAddr != NULL ) && ( devAddrABP == 0 ) )
 800b8f8:	683b      	ldr	r3, [r7, #0]
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	d00c      	beq.n	800b918 <SecureElementInitMcuID+0x94>
 800b8fe:	68bb      	ldr	r3, [r7, #8]
 800b900:	2b00      	cmp	r3, #0
 800b902:	d109      	bne.n	800b918 <SecureElementInitMcuID+0x94>
    {
        /* callback to dynamic DevAddr generation */
        seGetDevAddr( &devAddrABP );
 800b904:	f107 0208 	add.w	r2, r7, #8
 800b908:	683b      	ldr	r3, [r7, #0]
 800b90a:	4610      	mov	r0, r2
 800b90c:	4798      	blx	r3
        SecureElementSetDevAddr( ACTIVATION_TYPE_ABP, devAddrABP );
 800b90e:	68bb      	ldr	r3, [r7, #8]
 800b910:	4619      	mov	r1, r3
 800b912:	2001      	movs	r0, #1
 800b914:	f000 fab8 	bl	800be88 <SecureElementSetDevAddr>
    }

    return SECURE_ELEMENT_SUCCESS;
 800b918:	2300      	movs	r3, #0
}
 800b91a:	4618      	mov	r0, r3
 800b91c:	3718      	adds	r7, #24
 800b91e:	46bd      	mov	sp, r7
 800b920:	bd80      	pop	{r7, pc}
	...

0800b924 <SecureElementGetKeyByID>:

#if (LORAWAN_KMS == 0)
SecureElementStatus_t SecureElementGetKeyByID( KeyIdentifier_t keyID, Key_t **keyItem )
{
 800b924:	b480      	push	{r7}
 800b926:	b085      	sub	sp, #20
 800b928:	af00      	add	r7, sp, #0
 800b92a:	4603      	mov	r3, r0
 800b92c:	6039      	str	r1, [r7, #0]
 800b92e:	71fb      	strb	r3, [r7, #7]
#if (KEY_EXTRACTABLE == 1)
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800b930:	2300      	movs	r3, #0
 800b932:	73fb      	strb	r3, [r7, #15]
 800b934:	e01a      	b.n	800b96c <SecureElementGetKeyByID+0x48>
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 800b936:	4b12      	ldr	r3, [pc, #72]	@ (800b980 <SecureElementGetKeyByID+0x5c>)
 800b938:	6819      	ldr	r1, [r3, #0]
 800b93a:	7bfa      	ldrb	r2, [r7, #15]
 800b93c:	4613      	mov	r3, r2
 800b93e:	011b      	lsls	r3, r3, #4
 800b940:	4413      	add	r3, r2
 800b942:	440b      	add	r3, r1
 800b944:	3318      	adds	r3, #24
 800b946:	781b      	ldrb	r3, [r3, #0]
 800b948:	79fa      	ldrb	r2, [r7, #7]
 800b94a:	429a      	cmp	r2, r3
 800b94c:	d10b      	bne.n	800b966 <SecureElementGetKeyByID+0x42>
        {
            *keyItem = &( SeNvm->KeyList[i] );
 800b94e:	4b0c      	ldr	r3, [pc, #48]	@ (800b980 <SecureElementGetKeyByID+0x5c>)
 800b950:	6819      	ldr	r1, [r3, #0]
 800b952:	7bfa      	ldrb	r2, [r7, #15]
 800b954:	4613      	mov	r3, r2
 800b956:	011b      	lsls	r3, r3, #4
 800b958:	4413      	add	r3, r2
 800b95a:	3318      	adds	r3, #24
 800b95c:	18ca      	adds	r2, r1, r3
 800b95e:	683b      	ldr	r3, [r7, #0]
 800b960:	601a      	str	r2, [r3, #0]
            return SECURE_ELEMENT_SUCCESS;
 800b962:	2300      	movs	r3, #0
 800b964:	e006      	b.n	800b974 <SecureElementGetKeyByID+0x50>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800b966:	7bfb      	ldrb	r3, [r7, #15]
 800b968:	3301      	adds	r3, #1
 800b96a:	73fb      	strb	r3, [r7, #15]
 800b96c:	7bfb      	ldrb	r3, [r7, #15]
 800b96e:	2b0a      	cmp	r3, #10
 800b970:	d9e1      	bls.n	800b936 <SecureElementGetKeyByID+0x12>
        }
    }
#endif /* KEY_EXTRACTABLE */
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800b972:	2303      	movs	r3, #3
}
 800b974:	4618      	mov	r0, r3
 800b976:	3714      	adds	r7, #20
 800b978:	46bd      	mov	sp, r7
 800b97a:	bc80      	pop	{r7}
 800b97c:	4770      	bx	lr
 800b97e:	bf00      	nop
 800b980:	20000490 	.word	0x20000490

0800b984 <SecureElementPrintKeys>:
    return SECURE_ELEMENT_SUCCESS;
}
#endif /* LORAWAN_KMS */

SecureElementStatus_t SecureElementPrintKeys( void )
{
 800b984:	b580      	push	{r7, lr}
 800b986:	af00      	add	r7, sp, #0
    PrintKey( APP_KEY );
 800b988:	2000      	movs	r0, #0
 800b98a:	f7ff fdab 	bl	800b4e4 <PrintKey>
    PrintKey( NWK_KEY );
 800b98e:	2001      	movs	r0, #1
 800b990:	f7ff fda8 	bl	800b4e4 <PrintKey>
    PrintKey( APP_S_KEY );
 800b994:	2009      	movs	r0, #9
 800b996:	f7ff fda5 	bl	800b4e4 <PrintKey>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    PrintKey( F_NWK_S_INT_KEY );
    PrintKey( S_NWK_S_INT_KEY );
    PrintKey( NWK_S_ENC_KEY );
#else
    PrintKey( NWK_S_KEY );
 800b99a:	2008      	movs	r0, #8
 800b99c:	f7ff fda2 	bl	800b4e4 <PrintKey>
#endif /* LORAMAC_VERSION */
    PrintIds( ACTIVATION_TYPE_NONE );
 800b9a0:	2000      	movs	r0, #0
 800b9a2:	f7ff fe2d 	bl	800b600 <PrintIds>

    return SECURE_ELEMENT_SUCCESS;
 800b9a6:	2300      	movs	r3, #0
}
 800b9a8:	4618      	mov	r0, r3
 800b9aa:	bd80      	pop	{r7, pc}

0800b9ac <SecureElementPrintSessionKeys>:

SecureElementStatus_t SecureElementPrintSessionKeys( ActivationType_t mode )
{
 800b9ac:	b580      	push	{r7, lr}
 800b9ae:	b082      	sub	sp, #8
 800b9b0:	af00      	add	r7, sp, #0
 800b9b2:	4603      	mov	r3, r0
 800b9b4:	71fb      	strb	r3, [r7, #7]
    PrintKey( MC_ROOT_KEY );
 800b9b6:	200b      	movs	r0, #11
 800b9b8:	f7ff fd94 	bl	800b4e4 <PrintKey>
    PrintKey( MC_KE_KEY );
 800b9bc:	200c      	movs	r0, #12
 800b9be:	f7ff fd91 	bl	800b4e4 <PrintKey>
    PrintKey( APP_S_KEY );
 800b9c2:	2009      	movs	r0, #9
 800b9c4:	f7ff fd8e 	bl	800b4e4 <PrintKey>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    PrintKey( F_NWK_S_INT_KEY );
    PrintKey( S_NWK_S_INT_KEY );
    PrintKey( NWK_S_ENC_KEY );
#else
    PrintKey( NWK_S_KEY );
 800b9c8:	2008      	movs	r0, #8
 800b9ca:	f7ff fd8b 	bl	800b4e4 <PrintKey>
#endif /* LORAMAC_VERSION */
    PrintKey( DATABLOCK_INT_KEY );
 800b9ce:	200a      	movs	r0, #10
 800b9d0:	f7ff fd88 	bl	800b4e4 <PrintKey>
    PrintIds( mode );
 800b9d4:	79fb      	ldrb	r3, [r7, #7]
 800b9d6:	4618      	mov	r0, r3
 800b9d8:	f7ff fe12 	bl	800b600 <PrintIds>

    return SECURE_ELEMENT_SUCCESS;
 800b9dc:	2300      	movs	r3, #0
}
 800b9de:	4618      	mov	r0, r3
 800b9e0:	3708      	adds	r7, #8
 800b9e2:	46bd      	mov	sp, r7
 800b9e4:	bd80      	pop	{r7, pc}
	...

0800b9e8 <SecureElementSetKey>:
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
#endif /* LORAWAN_KMS */
}

SecureElementStatus_t SecureElementSetKey( KeyIdentifier_t keyID, uint8_t *key )
{
 800b9e8:	b580      	push	{r7, lr}
 800b9ea:	b088      	sub	sp, #32
 800b9ec:	af00      	add	r7, sp, #0
 800b9ee:	4603      	mov	r3, r0
 800b9f0:	6039      	str	r1, [r7, #0]
 800b9f2:	71fb      	strb	r3, [r7, #7]
    if( key == NULL )
 800b9f4:	683b      	ldr	r3, [r7, #0]
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	d101      	bne.n	800b9fe <SecureElementSetKey+0x16>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800b9fa:	2302      	movs	r3, #2
 800b9fc:	e04c      	b.n	800ba98 <SecureElementSetKey+0xb0>
    }

#if (LORAWAN_KMS == 0)
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800b9fe:	2300      	movs	r3, #0
 800ba00:	77fb      	strb	r3, [r7, #31]
 800ba02:	e045      	b.n	800ba90 <SecureElementSetKey+0xa8>
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 800ba04:	4b26      	ldr	r3, [pc, #152]	@ (800baa0 <SecureElementSetKey+0xb8>)
 800ba06:	6819      	ldr	r1, [r3, #0]
 800ba08:	7ffa      	ldrb	r2, [r7, #31]
 800ba0a:	4613      	mov	r3, r2
 800ba0c:	011b      	lsls	r3, r3, #4
 800ba0e:	4413      	add	r3, r2
 800ba10:	440b      	add	r3, r1
 800ba12:	3318      	adds	r3, #24
 800ba14:	781b      	ldrb	r3, [r3, #0]
 800ba16:	79fa      	ldrb	r2, [r7, #7]
 800ba18:	429a      	cmp	r2, r3
 800ba1a:	d136      	bne.n	800ba8a <SecureElementSetKey+0xa2>
        {
#if ( LORAMAC_MAX_MC_CTX == 1 )
            if( keyID == MC_KEY_0 )
 800ba1c:	79fb      	ldrb	r3, [r7, #7]
 800ba1e:	2b0d      	cmp	r3, #13
 800ba20:	d123      	bne.n	800ba6a <SecureElementSetKey+0x82>
#else /* LORAMAC_MAX_MC_CTX > 1 */
            if( ( keyID == MC_KEY_0 ) || ( keyID == MC_KEY_1 ) || ( keyID == MC_KEY_2 ) || ( keyID == MC_KEY_3 ) )
#endif /* LORAMAC_MAX_MC_CTX */
            {
                /* Decrypt the key if its a Mckey */
                SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 800ba22:	2306      	movs	r3, #6
 800ba24:	77bb      	strb	r3, [r7, #30]
                uint8_t decryptedKey[SE_KEY_SIZE] = { 0 };
 800ba26:	2300      	movs	r3, #0
 800ba28:	60fb      	str	r3, [r7, #12]
 800ba2a:	f107 0310 	add.w	r3, r7, #16
 800ba2e:	2200      	movs	r2, #0
 800ba30:	601a      	str	r2, [r3, #0]
 800ba32:	605a      	str	r2, [r3, #4]
 800ba34:	609a      	str	r2, [r3, #8]

                retval = SecureElementAesEncrypt( key, SE_KEY_SIZE, MC_KE_KEY, decryptedKey );
 800ba36:	f107 030c 	add.w	r3, r7, #12
 800ba3a:	220c      	movs	r2, #12
 800ba3c:	2110      	movs	r1, #16
 800ba3e:	6838      	ldr	r0, [r7, #0]
 800ba40:	f000 f876 	bl	800bb30 <SecureElementAesEncrypt>
 800ba44:	4603      	mov	r3, r0
 800ba46:	77bb      	strb	r3, [r7, #30]

                memcpy1( SeNvm->KeyList[i].KeyValue, decryptedKey, SE_KEY_SIZE );
 800ba48:	4b15      	ldr	r3, [pc, #84]	@ (800baa0 <SecureElementSetKey+0xb8>)
 800ba4a:	6819      	ldr	r1, [r3, #0]
 800ba4c:	7ffa      	ldrb	r2, [r7, #31]
 800ba4e:	4613      	mov	r3, r2
 800ba50:	011b      	lsls	r3, r3, #4
 800ba52:	4413      	add	r3, r2
 800ba54:	3318      	adds	r3, #24
 800ba56:	440b      	add	r3, r1
 800ba58:	3301      	adds	r3, #1
 800ba5a:	f107 010c 	add.w	r1, r7, #12
 800ba5e:	2210      	movs	r2, #16
 800ba60:	4618      	mov	r0, r3
 800ba62:	f00a fdea 	bl	801663a <memcpy1>
                return retval;
 800ba66:	7fbb      	ldrb	r3, [r7, #30]
 800ba68:	e016      	b.n	800ba98 <SecureElementSetKey+0xb0>
            }
            else
            {
                memcpy1( SeNvm->KeyList[i].KeyValue, key, SE_KEY_SIZE );
 800ba6a:	4b0d      	ldr	r3, [pc, #52]	@ (800baa0 <SecureElementSetKey+0xb8>)
 800ba6c:	6819      	ldr	r1, [r3, #0]
 800ba6e:	7ffa      	ldrb	r2, [r7, #31]
 800ba70:	4613      	mov	r3, r2
 800ba72:	011b      	lsls	r3, r3, #4
 800ba74:	4413      	add	r3, r2
 800ba76:	3318      	adds	r3, #24
 800ba78:	440b      	add	r3, r1
 800ba7a:	3301      	adds	r3, #1
 800ba7c:	2210      	movs	r2, #16
 800ba7e:	6839      	ldr	r1, [r7, #0]
 800ba80:	4618      	mov	r0, r3
 800ba82:	f00a fdda 	bl	801663a <memcpy1>
                return SECURE_ELEMENT_SUCCESS;
 800ba86:	2300      	movs	r3, #0
 800ba88:	e006      	b.n	800ba98 <SecureElementSetKey+0xb0>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800ba8a:	7ffb      	ldrb	r3, [r7, #31]
 800ba8c:	3301      	adds	r3, #1
 800ba8e:	77fb      	strb	r3, [r7, #31]
 800ba90:	7ffb      	ldrb	r3, [r7, #31]
 800ba92:	2b0a      	cmp	r3, #10
 800ba94:	d9b6      	bls.n	800ba04 <SecureElementSetKey+0x1c>
            }
        }
    }

    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800ba96:	2303      	movs	r3, #3
    {
        retval = SECURE_ELEMENT_ERROR;
    }
    return retval;
#endif /* LORAWAN_KMS */
}
 800ba98:	4618      	mov	r0, r3
 800ba9a:	3720      	adds	r7, #32
 800ba9c:	46bd      	mov	sp, r7
 800ba9e:	bd80      	pop	{r7, pc}
 800baa0:	20000490 	.word	0x20000490

0800baa4 <SecureElementComputeAesCmac>:
#endif /* LORAWAN_KMS */
}

SecureElementStatus_t SecureElementComputeAesCmac( uint8_t *micBxBuffer, uint8_t *buffer, uint32_t size,
                                                   KeyIdentifier_t keyID, uint32_t *cmac )
{
 800baa4:	b580      	push	{r7, lr}
 800baa6:	b086      	sub	sp, #24
 800baa8:	af02      	add	r7, sp, #8
 800baaa:	60f8      	str	r0, [r7, #12]
 800baac:	60b9      	str	r1, [r7, #8]
 800baae:	607a      	str	r2, [r7, #4]
 800bab0:	70fb      	strb	r3, [r7, #3]
    if( keyID >= MC_KE_KEY )
 800bab2:	78fb      	ldrb	r3, [r7, #3]
 800bab4:	2b0b      	cmp	r3, #11
 800bab6:	d901      	bls.n	800babc <SecureElementComputeAesCmac+0x18>
    {
        /* Never accept multicast key identifier for cmac computation */
        return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800bab8:	2303      	movs	r3, #3
 800baba:	e009      	b.n	800bad0 <SecureElementComputeAesCmac+0x2c>
    }

    return ComputeCmac( micBxBuffer, buffer, size, keyID, cmac );
 800babc:	78fa      	ldrb	r2, [r7, #3]
 800babe:	69bb      	ldr	r3, [r7, #24]
 800bac0:	9300      	str	r3, [sp, #0]
 800bac2:	4613      	mov	r3, r2
 800bac4:	687a      	ldr	r2, [r7, #4]
 800bac6:	68b9      	ldr	r1, [r7, #8]
 800bac8:	68f8      	ldr	r0, [r7, #12]
 800baca:	f7ff fe37 	bl	800b73c <ComputeCmac>
 800bace:	4603      	mov	r3, r0
}
 800bad0:	4618      	mov	r0, r3
 800bad2:	3710      	adds	r7, #16
 800bad4:	46bd      	mov	sp, r7
 800bad6:	bd80      	pop	{r7, pc}

0800bad8 <SecureElementVerifyAesCmac>:

SecureElementStatus_t SecureElementVerifyAesCmac( uint8_t *buffer, uint32_t size, uint32_t expectedCmac,
                                                  KeyIdentifier_t keyID )
{
 800bad8:	b580      	push	{r7, lr}
 800bada:	b088      	sub	sp, #32
 800badc:	af02      	add	r7, sp, #8
 800bade:	60f8      	str	r0, [r7, #12]
 800bae0:	60b9      	str	r1, [r7, #8]
 800bae2:	607a      	str	r2, [r7, #4]
 800bae4:	70fb      	strb	r3, [r7, #3]
    if( buffer == NULL )
 800bae6:	68fb      	ldr	r3, [r7, #12]
 800bae8:	2b00      	cmp	r3, #0
 800baea:	d101      	bne.n	800baf0 <SecureElementVerifyAesCmac+0x18>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800baec:	2302      	movs	r3, #2
 800baee:	e01b      	b.n	800bb28 <SecureElementVerifyAesCmac+0x50>
    }

    SecureElementStatus_t retval   = SECURE_ELEMENT_ERROR;
 800baf0:	2306      	movs	r3, #6
 800baf2:	75fb      	strb	r3, [r7, #23]
#if (LORAWAN_KMS == 0)
    uint32_t              compCmac = 0;
 800baf4:	2300      	movs	r3, #0
 800baf6:	613b      	str	r3, [r7, #16]
    retval                         = ComputeCmac( NULL, buffer, size, keyID, &compCmac );
 800baf8:	78fa      	ldrb	r2, [r7, #3]
 800bafa:	f107 0310 	add.w	r3, r7, #16
 800bafe:	9300      	str	r3, [sp, #0]
 800bb00:	4613      	mov	r3, r2
 800bb02:	68ba      	ldr	r2, [r7, #8]
 800bb04:	68f9      	ldr	r1, [r7, #12]
 800bb06:	2000      	movs	r0, #0
 800bb08:	f7ff fe18 	bl	800b73c <ComputeCmac>
 800bb0c:	4603      	mov	r3, r0
 800bb0e:	75fb      	strb	r3, [r7, #23]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800bb10:	7dfb      	ldrb	r3, [r7, #23]
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	d001      	beq.n	800bb1a <SecureElementVerifyAesCmac+0x42>
    {
        return retval;
 800bb16:	7dfb      	ldrb	r3, [r7, #23]
 800bb18:	e006      	b.n	800bb28 <SecureElementVerifyAesCmac+0x50>
    }

    if( expectedCmac != compCmac )
 800bb1a:	693b      	ldr	r3, [r7, #16]
 800bb1c:	687a      	ldr	r2, [r7, #4]
 800bb1e:	429a      	cmp	r2, r3
 800bb20:	d001      	beq.n	800bb26 <SecureElementVerifyAesCmac+0x4e>
    {
        retval = SECURE_ELEMENT_FAIL_CMAC;
 800bb22:	2301      	movs	r3, #1
 800bb24:	75fb      	strb	r3, [r7, #23]
        retval = SECURE_ELEMENT_ERROR;
    }

#endif /* LORAWAN_KMS */

    return retval;
 800bb26:	7dfb      	ldrb	r3, [r7, #23]
}
 800bb28:	4618      	mov	r0, r3
 800bb2a:	3718      	adds	r7, #24
 800bb2c:	46bd      	mov	sp, r7
 800bb2e:	bd80      	pop	{r7, pc}

0800bb30 <SecureElementAesEncrypt>:

SecureElementStatus_t SecureElementAesEncrypt( uint8_t *buffer, uint32_t size, KeyIdentifier_t keyID,
                                               uint8_t *encBuffer )
{
 800bb30:	b580      	push	{r7, lr}
 800bb32:	b0c2      	sub	sp, #264	@ 0x108
 800bb34:	af00      	add	r7, sp, #0
 800bb36:	60f8      	str	r0, [r7, #12]
 800bb38:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800bb3c:	f5a0 7080 	sub.w	r0, r0, #256	@ 0x100
 800bb40:	6001      	str	r1, [r0, #0]
 800bb42:	4611      	mov	r1, r2
 800bb44:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 800bb48:	f5a2 7284 	sub.w	r2, r2, #264	@ 0x108
 800bb4c:	6013      	str	r3, [r2, #0]
 800bb4e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bb52:	f2a3 1301 	subw	r3, r3, #257	@ 0x101
 800bb56:	460a      	mov	r2, r1
 800bb58:	701a      	strb	r2, [r3, #0]
    if( ( buffer == NULL ) || ( encBuffer == NULL ) )
 800bb5a:	68fb      	ldr	r3, [r7, #12]
 800bb5c:	2b00      	cmp	r3, #0
 800bb5e:	d006      	beq.n	800bb6e <SecureElementAesEncrypt+0x3e>
 800bb60:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bb64:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bb68:	681b      	ldr	r3, [r3, #0]
 800bb6a:	2b00      	cmp	r3, #0
 800bb6c:	d101      	bne.n	800bb72 <SecureElementAesEncrypt+0x42>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800bb6e:	2302      	movs	r3, #2
 800bb70:	e059      	b.n	800bc26 <SecureElementAesEncrypt+0xf6>
    }

    /* Check if the size is divisible by 16 */
    if( ( size % 16 ) != 0 )
 800bb72:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bb76:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800bb7a:	681b      	ldr	r3, [r3, #0]
 800bb7c:	f003 030f 	and.w	r3, r3, #15
 800bb80:	2b00      	cmp	r3, #0
 800bb82:	d001      	beq.n	800bb88 <SecureElementAesEncrypt+0x58>
    {
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 800bb84:	2305      	movs	r3, #5
 800bb86:	e04e      	b.n	800bc26 <SecureElementAesEncrypt+0xf6>
    }

#if (LORAWAN_KMS == 0)
    lorawan_aes_context aesContext;
    memset1( aesContext.ksch, '\0', 240 );
 800bb88:	f107 0314 	add.w	r3, r7, #20
 800bb8c:	22f0      	movs	r2, #240	@ 0xf0
 800bb8e:	2100      	movs	r1, #0
 800bb90:	4618      	mov	r0, r3
 800bb92:	f00a fd8d 	bl	80166b0 <memset1>

    Key_t                *pItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &pItem );
 800bb96:	f107 0210 	add.w	r2, r7, #16
 800bb9a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bb9e:	f2a3 1301 	subw	r3, r3, #257	@ 0x101
 800bba2:	781b      	ldrb	r3, [r3, #0]
 800bba4:	4611      	mov	r1, r2
 800bba6:	4618      	mov	r0, r3
 800bba8:	f7ff fd98 	bl	800b6dc <GetKeyByID>
 800bbac:	4603      	mov	r3, r0
 800bbae:	f887 3106 	strb.w	r3, [r7, #262]	@ 0x106

    if( retval == SECURE_ELEMENT_SUCCESS )
 800bbb2:	f897 3106 	ldrb.w	r3, [r7, #262]	@ 0x106
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	d133      	bne.n	800bc22 <SecureElementAesEncrypt+0xf2>
    {
        lorawan_aes_set_key( pItem->KeyValue, SE_KEY_SIZE, &aesContext );
 800bbba:	693b      	ldr	r3, [r7, #16]
 800bbbc:	3301      	adds	r3, #1
 800bbbe:	f107 0214 	add.w	r2, r7, #20
 800bbc2:	2110      	movs	r1, #16
 800bbc4:	4618      	mov	r0, r3
 800bbc6:	f7ff fb65 	bl	800b294 <lorawan_aes_set_key>

        uint8_t block = 0;
 800bbca:	2300      	movs	r3, #0
 800bbcc:	f887 3107 	strb.w	r3, [r7, #263]	@ 0x107

        while( size != 0 )
 800bbd0:	e020      	b.n	800bc14 <SecureElementAesEncrypt+0xe4>
        {
            lorawan_aes_encrypt( &buffer[block], &encBuffer[block], &aesContext );
 800bbd2:	f897 3107 	ldrb.w	r3, [r7, #263]	@ 0x107
 800bbd6:	68fa      	ldr	r2, [r7, #12]
 800bbd8:	18d0      	adds	r0, r2, r3
 800bbda:	f897 3107 	ldrb.w	r3, [r7, #263]	@ 0x107
 800bbde:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 800bbe2:	f5a2 7284 	sub.w	r2, r2, #264	@ 0x108
 800bbe6:	6812      	ldr	r2, [r2, #0]
 800bbe8:	4413      	add	r3, r2
 800bbea:	f107 0214 	add.w	r2, r7, #20
 800bbee:	4619      	mov	r1, r3
 800bbf0:	f7ff fc2e 	bl	800b450 <lorawan_aes_encrypt>
            block = block + 16;
 800bbf4:	f897 3107 	ldrb.w	r3, [r7, #263]	@ 0x107
 800bbf8:	3310      	adds	r3, #16
 800bbfa:	f887 3107 	strb.w	r3, [r7, #263]	@ 0x107
            size  = size - 16;
 800bbfe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bc02:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800bc06:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 800bc0a:	f5a2 7280 	sub.w	r2, r2, #256	@ 0x100
 800bc0e:	6812      	ldr	r2, [r2, #0]
 800bc10:	3a10      	subs	r2, #16
 800bc12:	601a      	str	r2, [r3, #0]
        while( size != 0 )
 800bc14:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bc18:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800bc1c:	681b      	ldr	r3, [r3, #0]
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	d1d7      	bne.n	800bbd2 <SecureElementAesEncrypt+0xa2>
    {
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */

    return retval;
 800bc22:	f897 3106 	ldrb.w	r3, [r7, #262]	@ 0x106
}
 800bc26:	4618      	mov	r0, r3
 800bc28:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 800bc2c:	46bd      	mov	sp, r7
 800bc2e:	bd80      	pop	{r7, pc}

0800bc30 <SecureElementDeriveAndStoreKey>:

SecureElementStatus_t SecureElementDeriveAndStoreKey( uint8_t *input, KeyIdentifier_t rootKeyID,
                                                      KeyIdentifier_t targetKeyID )
{
 800bc30:	b580      	push	{r7, lr}
 800bc32:	b088      	sub	sp, #32
 800bc34:	af00      	add	r7, sp, #0
 800bc36:	6078      	str	r0, [r7, #4]
 800bc38:	460b      	mov	r3, r1
 800bc3a:	70fb      	strb	r3, [r7, #3]
 800bc3c:	4613      	mov	r3, r2
 800bc3e:	70bb      	strb	r3, [r7, #2]
    if( input == NULL )
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	d101      	bne.n	800bc4a <SecureElementDeriveAndStoreKey+0x1a>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800bc46:	2302      	movs	r3, #2
 800bc48:	e02e      	b.n	800bca8 <SecureElementDeriveAndStoreKey+0x78>
    }

    SecureElementStatus_t retval  = SECURE_ELEMENT_ERROR;
 800bc4a:	2306      	movs	r3, #6
 800bc4c:	77fb      	strb	r3, [r7, #31]

    /* In case of MC_KE_KEY, only McRootKey can be used as root key */
    if( targetKeyID == MC_KE_KEY )
 800bc4e:	78bb      	ldrb	r3, [r7, #2]
 800bc50:	2b0c      	cmp	r3, #12
 800bc52:	d104      	bne.n	800bc5e <SecureElementDeriveAndStoreKey+0x2e>
    {
        if( rootKeyID != MC_ROOT_KEY )
 800bc54:	78fb      	ldrb	r3, [r7, #3]
 800bc56:	2b0b      	cmp	r3, #11
 800bc58:	d001      	beq.n	800bc5e <SecureElementDeriveAndStoreKey+0x2e>
        {
            return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800bc5a:	2303      	movs	r3, #3
 800bc5c:	e024      	b.n	800bca8 <SecureElementDeriveAndStoreKey+0x78>
        }
    }

#if (LORAWAN_KMS == 0)
    uint8_t key[SE_KEY_SIZE] = { 0 };
 800bc5e:	2300      	movs	r3, #0
 800bc60:	60fb      	str	r3, [r7, #12]
 800bc62:	f107 0310 	add.w	r3, r7, #16
 800bc66:	2200      	movs	r2, #0
 800bc68:	601a      	str	r2, [r3, #0]
 800bc6a:	605a      	str	r2, [r3, #4]
 800bc6c:	609a      	str	r2, [r3, #8]
    /* Derive key */
    retval = SecureElementAesEncrypt( input, SE_KEY_SIZE, rootKeyID, key );
 800bc6e:	f107 030c 	add.w	r3, r7, #12
 800bc72:	78fa      	ldrb	r2, [r7, #3]
 800bc74:	2110      	movs	r1, #16
 800bc76:	6878      	ldr	r0, [r7, #4]
 800bc78:	f7ff ff5a 	bl	800bb30 <SecureElementAesEncrypt>
 800bc7c:	4603      	mov	r3, r0
 800bc7e:	77fb      	strb	r3, [r7, #31]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800bc80:	7ffb      	ldrb	r3, [r7, #31]
 800bc82:	2b00      	cmp	r3, #0
 800bc84:	d001      	beq.n	800bc8a <SecureElementDeriveAndStoreKey+0x5a>
    {
        return retval;
 800bc86:	7ffb      	ldrb	r3, [r7, #31]
 800bc88:	e00e      	b.n	800bca8 <SecureElementDeriveAndStoreKey+0x78>
    }

    /* Store key */
    retval = SecureElementSetKey( targetKeyID, key );
 800bc8a:	f107 020c 	add.w	r2, r7, #12
 800bc8e:	78bb      	ldrb	r3, [r7, #2]
 800bc90:	4611      	mov	r1, r2
 800bc92:	4618      	mov	r0, r3
 800bc94:	f7ff fea8 	bl	800b9e8 <SecureElementSetKey>
 800bc98:	4603      	mov	r3, r0
 800bc9a:	77fb      	strb	r3, [r7, #31]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800bc9c:	7ffb      	ldrb	r3, [r7, #31]
 800bc9e:	2b00      	cmp	r3, #0
 800bca0:	d001      	beq.n	800bca6 <SecureElementDeriveAndStoreKey+0x76>
    {
        return retval;
 800bca2:	7ffb      	ldrb	r3, [r7, #31]
 800bca4:	e000      	b.n	800bca8 <SecureElementDeriveAndStoreKey+0x78>
    }

    return SECURE_ELEMENT_SUCCESS;
 800bca6:	2300      	movs	r3, #0
    {
        retval = SECURE_ELEMENT_ERROR;
    }
    return retval;
#endif /* LORAWAN_KMS */
}
 800bca8:	4618      	mov	r0, r3
 800bcaa:	3720      	adds	r7, #32
 800bcac:	46bd      	mov	sp, r7
 800bcae:	bd80      	pop	{r7, pc}

0800bcb0 <SecureElementProcessJoinAccept>:

SecureElementStatus_t SecureElementProcessJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t *joinEui,
                                                      uint16_t devNonce, uint8_t *encJoinAccept,
                                                      uint8_t encJoinAcceptSize, uint8_t *decJoinAccept,
                                                      uint8_t *versionMinor )
{
 800bcb0:	b580      	push	{r7, lr}
 800bcb2:	b086      	sub	sp, #24
 800bcb4:	af00      	add	r7, sp, #0
 800bcb6:	60b9      	str	r1, [r7, #8]
 800bcb8:	607b      	str	r3, [r7, #4]
 800bcba:	4603      	mov	r3, r0
 800bcbc:	73fb      	strb	r3, [r7, #15]
 800bcbe:	4613      	mov	r3, r2
 800bcc0:	81bb      	strh	r3, [r7, #12]
    if( ( encJoinAccept == NULL ) || ( decJoinAccept == NULL ) || ( versionMinor == NULL ) )
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	2b00      	cmp	r3, #0
 800bcc6:	d005      	beq.n	800bcd4 <SecureElementProcessJoinAccept+0x24>
 800bcc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bcca:	2b00      	cmp	r3, #0
 800bccc:	d002      	beq.n	800bcd4 <SecureElementProcessJoinAccept+0x24>
 800bcce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bcd0:	2b00      	cmp	r3, #0
 800bcd2:	d101      	bne.n	800bcd8 <SecureElementProcessJoinAccept+0x28>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800bcd4:	2302      	movs	r3, #2
 800bcd6:	e05c      	b.n	800bd92 <SecureElementProcessJoinAccept+0xe2>
    }

    /* Check that frame size isn't bigger than a JoinAccept with CFList size */
    if( encJoinAcceptSize > LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE )
 800bcd8:	f897 3020 	ldrb.w	r3, [r7, #32]
 800bcdc:	2b21      	cmp	r3, #33	@ 0x21
 800bcde:	d901      	bls.n	800bce4 <SecureElementProcessJoinAccept+0x34>
    {
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 800bce0:	2305      	movs	r3, #5
 800bce2:	e056      	b.n	800bd92 <SecureElementProcessJoinAccept+0xe2>
    }

    /* Determine decryption key */
    KeyIdentifier_t encKeyID = NWK_KEY;
 800bce4:	2301      	movs	r3, #1
 800bce6:	75fb      	strb	r3, [r7, #23]
    {
        encKeyID = J_S_ENC_KEY;
    }
#endif /* LORAMAC_VERSION */

    memcpy1( decJoinAccept, encJoinAccept, encJoinAcceptSize );
 800bce8:	f897 3020 	ldrb.w	r3, [r7, #32]
 800bcec:	b29b      	uxth	r3, r3
 800bcee:	461a      	mov	r2, r3
 800bcf0:	6879      	ldr	r1, [r7, #4]
 800bcf2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800bcf4:	f00a fca1 	bl	801663a <memcpy1>

    /* Decrypt JoinAccept, skip MHDR */
    if( SecureElementAesEncrypt( encJoinAccept + LORAMAC_MHDR_FIELD_SIZE, encJoinAcceptSize - LORAMAC_MHDR_FIELD_SIZE,
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	1c58      	adds	r0, r3, #1
 800bcfc:	f897 3020 	ldrb.w	r3, [r7, #32]
 800bd00:	3b01      	subs	r3, #1
 800bd02:	4619      	mov	r1, r3
 800bd04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd06:	3301      	adds	r3, #1
 800bd08:	7dfa      	ldrb	r2, [r7, #23]
 800bd0a:	f7ff ff11 	bl	800bb30 <SecureElementAesEncrypt>
 800bd0e:	4603      	mov	r3, r0
 800bd10:	2b00      	cmp	r3, #0
 800bd12:	d001      	beq.n	800bd18 <SecureElementProcessJoinAccept+0x68>
                                 encKeyID, decJoinAccept + LORAMAC_MHDR_FIELD_SIZE ) != SECURE_ELEMENT_SUCCESS )
    {
        return SECURE_ELEMENT_FAIL_ENCRYPT;
 800bd14:	2307      	movs	r3, #7
 800bd16:	e03c      	b.n	800bd92 <SecureElementProcessJoinAccept+0xe2>
    }

    *versionMinor = ( ( decJoinAccept[11] & 0x80 ) == 0x80 ) ? 1 : 0;
 800bd18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd1a:	330b      	adds	r3, #11
 800bd1c:	781b      	ldrb	r3, [r3, #0]
 800bd1e:	09db      	lsrs	r3, r3, #7
 800bd20:	b2da      	uxtb	r2, r3
 800bd22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd24:	701a      	strb	r2, [r3, #0]

    uint32_t mic = GET_UINT32_LE( decJoinAccept, encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE );
 800bd26:	f897 3020 	ldrb.w	r3, [r7, #32]
 800bd2a:	3b04      	subs	r3, #4
 800bd2c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bd2e:	4413      	add	r3, r2
 800bd30:	781b      	ldrb	r3, [r3, #0]
 800bd32:	4619      	mov	r1, r3
 800bd34:	f897 3020 	ldrb.w	r3, [r7, #32]
 800bd38:	3b03      	subs	r3, #3
 800bd3a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bd3c:	4413      	add	r3, r2
 800bd3e:	781b      	ldrb	r3, [r3, #0]
 800bd40:	021b      	lsls	r3, r3, #8
 800bd42:	ea41 0203 	orr.w	r2, r1, r3
 800bd46:	f897 3020 	ldrb.w	r3, [r7, #32]
 800bd4a:	3b02      	subs	r3, #2
 800bd4c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800bd4e:	440b      	add	r3, r1
 800bd50:	781b      	ldrb	r3, [r3, #0]
 800bd52:	041b      	lsls	r3, r3, #16
 800bd54:	431a      	orrs	r2, r3
 800bd56:	f897 3020 	ldrb.w	r3, [r7, #32]
 800bd5a:	3b01      	subs	r3, #1
 800bd5c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800bd5e:	440b      	add	r3, r1
 800bd60:	781b      	ldrb	r3, [r3, #0]
 800bd62:	061b      	lsls	r3, r3, #24
 800bd64:	4313      	orrs	r3, r2
 800bd66:	613b      	str	r3, [r7, #16]
     *        - LoRaWAN 1.0.x : micHeader = [MHDR(1)]
     *        - LoRaWAN 1.1.x : micHeader = [JoinReqType(1), JoinEUI(8), DevNonce(2), MHDR(1)]
     */

    /* Verify mic */
    if( *versionMinor == 0 )
 800bd68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd6a:	781b      	ldrb	r3, [r3, #0]
 800bd6c:	2b00      	cmp	r3, #0
 800bd6e:	d10d      	bne.n	800bd8c <SecureElementProcessJoinAccept+0xdc>
    {
        /* For LoRaWAN 1.0.x
         *   cmac = aes128_cmac(NwkKey, MHDR |  JoinNonce | NetID | DevAddr | DLSettings | RxDelay | CFList |
         *   CFListType)
         */
        if( SecureElementVerifyAesCmac( decJoinAccept, ( encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE ), mic, NWK_KEY ) !=
 800bd70:	f897 3020 	ldrb.w	r3, [r7, #32]
 800bd74:	3b04      	subs	r3, #4
 800bd76:	4619      	mov	r1, r3
 800bd78:	2301      	movs	r3, #1
 800bd7a:	693a      	ldr	r2, [r7, #16]
 800bd7c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800bd7e:	f7ff feab 	bl	800bad8 <SecureElementVerifyAesCmac>
 800bd82:	4603      	mov	r3, r0
 800bd84:	2b00      	cmp	r3, #0
 800bd86:	d003      	beq.n	800bd90 <SecureElementProcessJoinAccept+0xe0>
            SECURE_ELEMENT_SUCCESS )
        {
            return SECURE_ELEMENT_FAIL_CMAC;
 800bd88:	2301      	movs	r3, #1
 800bd8a:	e002      	b.n	800bd92 <SecureElementProcessJoinAccept+0xe2>
        }
    }
#endif /* LORAMAC_VERSION */
    else
    {
        return SECURE_ELEMENT_ERROR_INVALID_LORAWAM_SPEC_VERSION;
 800bd8c:	2304      	movs	r3, #4
 800bd8e:	e000      	b.n	800bd92 <SecureElementProcessJoinAccept+0xe2>
    }

    return SECURE_ELEMENT_SUCCESS;
 800bd90:	2300      	movs	r3, #0
}
 800bd92:	4618      	mov	r0, r3
 800bd94:	3718      	adds	r7, #24
 800bd96:	46bd      	mov	sp, r7
 800bd98:	bd80      	pop	{r7, pc}
	...

0800bd9c <SecureElementRandomNumber>:

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
SecureElementStatus_t SecureElementRandomNumber( uint32_t *randomNum )
{
 800bd9c:	b580      	push	{r7, lr}
 800bd9e:	b082      	sub	sp, #8
 800bda0:	af00      	add	r7, sp, #0
 800bda2:	6078      	str	r0, [r7, #4]
    if( randomNum == NULL )
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	2b00      	cmp	r3, #0
 800bda8:	d101      	bne.n	800bdae <SecureElementRandomNumber+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800bdaa:	2302      	movs	r3, #2
 800bdac:	e006      	b.n	800bdbc <SecureElementRandomNumber+0x20>
    }
    *randomNum = Radio.Random();
 800bdae:	4b05      	ldr	r3, [pc, #20]	@ (800bdc4 <SecureElementRandomNumber+0x28>)
 800bdb0:	695b      	ldr	r3, [r3, #20]
 800bdb2:	4798      	blx	r3
 800bdb4:	4602      	mov	r2, r0
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	601a      	str	r2, [r3, #0]
    return SECURE_ELEMENT_SUCCESS;
 800bdba:	2300      	movs	r3, #0
}
 800bdbc:	4618      	mov	r0, r3
 800bdbe:	3708      	adds	r7, #8
 800bdc0:	46bd      	mov	sp, r7
 800bdc2:	bd80      	pop	{r7, pc}
 800bdc4:	0801bd08 	.word	0x0801bd08

0800bdc8 <SecureElementSetDevEui>:
#endif /* LORAMAC_VERSION */

SecureElementStatus_t SecureElementSetDevEui( uint8_t *devEui )
{
 800bdc8:	b580      	push	{r7, lr}
 800bdca:	b082      	sub	sp, #8
 800bdcc:	af00      	add	r7, sp, #0
 800bdce:	6078      	str	r0, [r7, #4]
    if( devEui == NULL )
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	2b00      	cmp	r3, #0
 800bdd4:	d101      	bne.n	800bdda <SecureElementSetDevEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800bdd6:	2302      	movs	r3, #2
 800bdd8:	e007      	b.n	800bdea <SecureElementSetDevEui+0x22>
    }

#if (LORAWAN_KMS == 0)
    memcpy1( SeNvm->SeNvmDevJoinKey.DevEui, devEui, SE_EUI_SIZE );
 800bdda:	4b06      	ldr	r3, [pc, #24]	@ (800bdf4 <SecureElementSetDevEui+0x2c>)
 800bddc:	681b      	ldr	r3, [r3, #0]
 800bdde:	2208      	movs	r2, #8
 800bde0:	6879      	ldr	r1, [r7, #4]
 800bde2:	4618      	mov	r0, r3
 800bde4:	f00a fc29 	bl	801663a <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800bde8:	2300      	movs	r3, #0
        memcpy1( KMSKeyBlob.DevEui, devEui, SE_EUI_SIZE );
        status = SecureElementSetID( &KMSKeyBlob );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 800bdea:	4618      	mov	r0, r3
 800bdec:	3708      	adds	r7, #8
 800bdee:	46bd      	mov	sp, r7
 800bdf0:	bd80      	pop	{r7, pc}
 800bdf2:	bf00      	nop
 800bdf4:	20000490 	.word	0x20000490

0800bdf8 <SecureElementGetDevEui>:

SecureElementStatus_t SecureElementGetDevEui( uint8_t *devEui )
{
 800bdf8:	b580      	push	{r7, lr}
 800bdfa:	b082      	sub	sp, #8
 800bdfc:	af00      	add	r7, sp, #0
 800bdfe:	6078      	str	r0, [r7, #4]
    if( devEui == NULL )
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	2b00      	cmp	r3, #0
 800be04:	d101      	bne.n	800be0a <SecureElementGetDevEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800be06:	2302      	movs	r3, #2
 800be08:	e007      	b.n	800be1a <SecureElementGetDevEui+0x22>
    }

#if (LORAWAN_KMS == 0)
    memcpy1( devEui, SeNvm->SeNvmDevJoinKey.DevEui, SE_EUI_SIZE );
 800be0a:	4b06      	ldr	r3, [pc, #24]	@ (800be24 <SecureElementGetDevEui+0x2c>)
 800be0c:	681b      	ldr	r3, [r3, #0]
 800be0e:	2208      	movs	r2, #8
 800be10:	4619      	mov	r1, r3
 800be12:	6878      	ldr	r0, [r7, #4]
 800be14:	f00a fc11 	bl	801663a <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800be18:	2300      	movs	r3, #0
        /* get DevEui field in KMSKeyBlob handle */
        memcpy1( devEui, KMSKeyBlob.DevEui, SE_EUI_SIZE );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 800be1a:	4618      	mov	r0, r3
 800be1c:	3708      	adds	r7, #8
 800be1e:	46bd      	mov	sp, r7
 800be20:	bd80      	pop	{r7, pc}
 800be22:	bf00      	nop
 800be24:	20000490 	.word	0x20000490

0800be28 <SecureElementSetJoinEui>:

SecureElementStatus_t SecureElementSetJoinEui( uint8_t *joinEui )
{
 800be28:	b580      	push	{r7, lr}
 800be2a:	b082      	sub	sp, #8
 800be2c:	af00      	add	r7, sp, #0
 800be2e:	6078      	str	r0, [r7, #4]
    if( joinEui == NULL )
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	2b00      	cmp	r3, #0
 800be34:	d101      	bne.n	800be3a <SecureElementSetJoinEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800be36:	2302      	movs	r3, #2
 800be38:	e008      	b.n	800be4c <SecureElementSetJoinEui+0x24>
    }

#if (LORAWAN_KMS == 0)
    memcpy1( SeNvm->SeNvmDevJoinKey.JoinEui, joinEui, SE_EUI_SIZE );
 800be3a:	4b06      	ldr	r3, [pc, #24]	@ (800be54 <SecureElementSetJoinEui+0x2c>)
 800be3c:	681b      	ldr	r3, [r3, #0]
 800be3e:	3308      	adds	r3, #8
 800be40:	2208      	movs	r2, #8
 800be42:	6879      	ldr	r1, [r7, #4]
 800be44:	4618      	mov	r0, r3
 800be46:	f00a fbf8 	bl	801663a <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800be4a:	2300      	movs	r3, #0
        memcpy1( KMSKeyBlob.JoinEui, joinEui, SE_EUI_SIZE );
        status = SecureElementSetID( &KMSKeyBlob );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 800be4c:	4618      	mov	r0, r3
 800be4e:	3708      	adds	r7, #8
 800be50:	46bd      	mov	sp, r7
 800be52:	bd80      	pop	{r7, pc}
 800be54:	20000490 	.word	0x20000490

0800be58 <SecureElementGetJoinEui>:

SecureElementStatus_t SecureElementGetJoinEui( uint8_t *joinEui )
{
 800be58:	b580      	push	{r7, lr}
 800be5a:	b082      	sub	sp, #8
 800be5c:	af00      	add	r7, sp, #0
 800be5e:	6078      	str	r0, [r7, #4]
    if( joinEui == NULL )
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	2b00      	cmp	r3, #0
 800be64:	d101      	bne.n	800be6a <SecureElementGetJoinEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800be66:	2302      	movs	r3, #2
 800be68:	e008      	b.n	800be7c <SecureElementGetJoinEui+0x24>
    }

#if (LORAWAN_KMS == 0)
    memcpy1( joinEui, SeNvm->SeNvmDevJoinKey.JoinEui, SE_EUI_SIZE );
 800be6a:	4b06      	ldr	r3, [pc, #24]	@ (800be84 <SecureElementGetJoinEui+0x2c>)
 800be6c:	681b      	ldr	r3, [r3, #0]
 800be6e:	3308      	adds	r3, #8
 800be70:	2208      	movs	r2, #8
 800be72:	4619      	mov	r1, r3
 800be74:	6878      	ldr	r0, [r7, #4]
 800be76:	f00a fbe0 	bl	801663a <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800be7a:	2300      	movs	r3, #0
        /* get JoinEui field from KMSKeyBlob handle */
        memcpy1( joinEui, KMSKeyBlob.JoinEui, SE_EUI_SIZE );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 800be7c:	4618      	mov	r0, r3
 800be7e:	3708      	adds	r7, #8
 800be80:	46bd      	mov	sp, r7
 800be82:	bd80      	pop	{r7, pc}
 800be84:	20000490 	.word	0x20000490

0800be88 <SecureElementSetDevAddr>:

SecureElementStatus_t SecureElementSetDevAddr( ActivationType_t mode, uint32_t devAddr )
{
 800be88:	b480      	push	{r7}
 800be8a:	b083      	sub	sp, #12
 800be8c:	af00      	add	r7, sp, #0
 800be8e:	4603      	mov	r3, r0
 800be90:	6039      	str	r1, [r7, #0]
 800be92:	71fb      	strb	r3, [r7, #7]
#if (LORAWAN_KMS == 0)
    if( mode == ACTIVATION_TYPE_OTAA )
 800be94:	79fb      	ldrb	r3, [r7, #7]
 800be96:	2b02      	cmp	r3, #2
 800be98:	d104      	bne.n	800bea4 <SecureElementSetDevAddr+0x1c>
    {
        SeNvm->SeNvmDevJoinKey.DevAddrOTAA = devAddr;
 800be9a:	4b07      	ldr	r3, [pc, #28]	@ (800beb8 <SecureElementSetDevAddr+0x30>)
 800be9c:	681b      	ldr	r3, [r3, #0]
 800be9e:	683a      	ldr	r2, [r7, #0]
 800bea0:	611a      	str	r2, [r3, #16]
 800bea2:	e003      	b.n	800beac <SecureElementSetDevAddr+0x24>
    }
    else
    {
        SeNvm->SeNvmDevJoinKey.DevAddrABP = devAddr;
 800bea4:	4b04      	ldr	r3, [pc, #16]	@ (800beb8 <SecureElementSetDevAddr+0x30>)
 800bea6:	681b      	ldr	r3, [r3, #0]
 800bea8:	683a      	ldr	r2, [r7, #0]
 800beaa:	615a      	str	r2, [r3, #20]
    }

    return SECURE_ELEMENT_SUCCESS;
 800beac:	2300      	movs	r3, #0
        }
    }

    return status;
#endif /* LORAWAN_KMS */
}
 800beae:	4618      	mov	r0, r3
 800beb0:	370c      	adds	r7, #12
 800beb2:	46bd      	mov	sp, r7
 800beb4:	bc80      	pop	{r7}
 800beb6:	4770      	bx	lr
 800beb8:	20000490 	.word	0x20000490

0800bebc <SecureElementGetDevAddr>:

SecureElementStatus_t SecureElementGetDevAddr( ActivationType_t mode, uint32_t *devAddr )
{
 800bebc:	b480      	push	{r7}
 800bebe:	b083      	sub	sp, #12
 800bec0:	af00      	add	r7, sp, #0
 800bec2:	4603      	mov	r3, r0
 800bec4:	6039      	str	r1, [r7, #0]
 800bec6:	71fb      	strb	r3, [r7, #7]
    if( devAddr == NULL )
 800bec8:	683b      	ldr	r3, [r7, #0]
 800beca:	2b00      	cmp	r3, #0
 800becc:	d101      	bne.n	800bed2 <SecureElementGetDevAddr+0x16>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800bece:	2302      	movs	r3, #2
 800bed0:	e00e      	b.n	800bef0 <SecureElementGetDevAddr+0x34>
    }
#if (LORAWAN_KMS == 0)
    /* Recover DevAddrABP or DevAddrOTAA depending on mode */
    if( mode == ACTIVATION_TYPE_OTAA )
 800bed2:	79fb      	ldrb	r3, [r7, #7]
 800bed4:	2b02      	cmp	r3, #2
 800bed6:	d105      	bne.n	800bee4 <SecureElementGetDevAddr+0x28>
    {
        *devAddr = SeNvm->SeNvmDevJoinKey.DevAddrOTAA;
 800bed8:	4b08      	ldr	r3, [pc, #32]	@ (800befc <SecureElementGetDevAddr+0x40>)
 800beda:	681b      	ldr	r3, [r3, #0]
 800bedc:	691a      	ldr	r2, [r3, #16]
 800bede:	683b      	ldr	r3, [r7, #0]
 800bee0:	601a      	str	r2, [r3, #0]
 800bee2:	e004      	b.n	800beee <SecureElementGetDevAddr+0x32>
    }
    else
    {
        *devAddr = SeNvm->SeNvmDevJoinKey.DevAddrABP;
 800bee4:	4b05      	ldr	r3, [pc, #20]	@ (800befc <SecureElementGetDevAddr+0x40>)
 800bee6:	681b      	ldr	r3, [r3, #0]
 800bee8:	695a      	ldr	r2, [r3, #20]
 800beea:	683b      	ldr	r3, [r7, #0]
 800beec:	601a      	str	r2, [r3, #0]
    }
    return SECURE_ELEMENT_SUCCESS;
 800beee:	2300      	movs	r3, #0
        }
    }

    return status;
#endif /* LORAWAN_KMS */
}
 800bef0:	4618      	mov	r0, r3
 800bef2:	370c      	adds	r7, #12
 800bef4:	46bd      	mov	sp, r7
 800bef6:	bc80      	pop	{r7}
 800bef8:	4770      	bx	lr
 800befa:	bf00      	nop
 800befc:	20000490 	.word	0x20000490

0800bf00 <LmHandlerInit>:
static void LmHandlerOnPingSlotPeriodicityChanged( uint8_t pingSlotPeriodicity );
#endif /* LORAMAC_VERSION */

/* Exported functions ---------------------------------------------------------*/
LmHandlerErrorStatus_t LmHandlerInit( LmHandlerCallbacks_t *handlerCallbacks, uint32_t fwVersion )
{
 800bf00:	b580      	push	{r7, lr}
 800bf02:	b082      	sub	sp, #8
 800bf04:	af00      	add	r7, sp, #0
 800bf06:	6078      	str	r0, [r7, #4]
 800bf08:	6039      	str	r1, [r7, #0]
    LmHandlerCallbacks = handlerCallbacks;
 800bf0a:	4a22      	ldr	r2, [pc, #136]	@ (800bf94 <LmHandlerInit+0x94>)
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	6013      	str	r3, [r2, #0]

    LoRaMacPrimitives.MacMcpsConfirm = McpsConfirm;
 800bf10:	4b21      	ldr	r3, [pc, #132]	@ (800bf98 <LmHandlerInit+0x98>)
 800bf12:	4a22      	ldr	r2, [pc, #136]	@ (800bf9c <LmHandlerInit+0x9c>)
 800bf14:	601a      	str	r2, [r3, #0]
    LoRaMacPrimitives.MacMcpsIndication = McpsIndication;
 800bf16:	4b20      	ldr	r3, [pc, #128]	@ (800bf98 <LmHandlerInit+0x98>)
 800bf18:	4a21      	ldr	r2, [pc, #132]	@ (800bfa0 <LmHandlerInit+0xa0>)
 800bf1a:	605a      	str	r2, [r3, #4]
    LoRaMacPrimitives.MacMlmeConfirm = MlmeConfirm;
 800bf1c:	4b1e      	ldr	r3, [pc, #120]	@ (800bf98 <LmHandlerInit+0x98>)
 800bf1e:	4a21      	ldr	r2, [pc, #132]	@ (800bfa4 <LmHandlerInit+0xa4>)
 800bf20:	609a      	str	r2, [r3, #8]
    LoRaMacPrimitives.MacMlmeIndication = MlmeIndication;
 800bf22:	4b1d      	ldr	r3, [pc, #116]	@ (800bf98 <LmHandlerInit+0x98>)
 800bf24:	4a20      	ldr	r2, [pc, #128]	@ (800bfa8 <LmHandlerInit+0xa8>)
 800bf26:	60da      	str	r2, [r3, #12]
    LoRaMacCallbacks.GetBatteryLevel = LmHandlerCallbacks->GetBatteryLevel;
 800bf28:	4b1a      	ldr	r3, [pc, #104]	@ (800bf94 <LmHandlerInit+0x94>)
 800bf2a:	681b      	ldr	r3, [r3, #0]
 800bf2c:	681b      	ldr	r3, [r3, #0]
 800bf2e:	4a1f      	ldr	r2, [pc, #124]	@ (800bfac <LmHandlerInit+0xac>)
 800bf30:	6013      	str	r3, [r2, #0]
    LoRaMacCallbacks.GetTemperatureLevel = LmHandlerCallbacks->GetTemperature;
 800bf32:	4b18      	ldr	r3, [pc, #96]	@ (800bf94 <LmHandlerInit+0x94>)
 800bf34:	681b      	ldr	r3, [r3, #0]
 800bf36:	685b      	ldr	r3, [r3, #4]
 800bf38:	4a1c      	ldr	r2, [pc, #112]	@ (800bfac <LmHandlerInit+0xac>)
 800bf3a:	6053      	str	r3, [r2, #4]
    LoRaMacCallbacks.GetUniqueId = LmHandlerCallbacks->GetUniqueId;
 800bf3c:	4b15      	ldr	r3, [pc, #84]	@ (800bf94 <LmHandlerInit+0x94>)
 800bf3e:	681b      	ldr	r3, [r3, #0]
 800bf40:	689b      	ldr	r3, [r3, #8]
 800bf42:	4a1a      	ldr	r2, [pc, #104]	@ (800bfac <LmHandlerInit+0xac>)
 800bf44:	6093      	str	r3, [r2, #8]
    LoRaMacCallbacks.GetDevAddress = LmHandlerCallbacks->GetDevAddr;
 800bf46:	4b13      	ldr	r3, [pc, #76]	@ (800bf94 <LmHandlerInit+0x94>)
 800bf48:	681b      	ldr	r3, [r3, #0]
 800bf4a:	68db      	ldr	r3, [r3, #12]
 800bf4c:	4a17      	ldr	r2, [pc, #92]	@ (800bfac <LmHandlerInit+0xac>)
 800bf4e:	60d3      	str	r3, [r2, #12]
    LoRaMacCallbacks.NvmDataChange  = NvmDataMgmtEvent;
 800bf50:	4b16      	ldr	r3, [pc, #88]	@ (800bfac <LmHandlerInit+0xac>)
 800bf52:	4a17      	ldr	r2, [pc, #92]	@ (800bfb0 <LmHandlerInit+0xb0>)
 800bf54:	611a      	str	r2, [r3, #16]
    LoRaMacCallbacks.MacProcessNotify = LmHandlerCallbacks->OnMacProcess;
 800bf56:	4b0f      	ldr	r3, [pc, #60]	@ (800bf94 <LmHandlerInit+0x94>)
 800bf58:	681b      	ldr	r3, [r3, #0]
 800bf5a:	699b      	ldr	r3, [r3, #24]
 800bf5c:	4a13      	ldr	r2, [pc, #76]	@ (800bfac <LmHandlerInit+0xac>)
 800bf5e:	6153      	str	r3, [r2, #20]
    LmhpComplianceParams.OnTxFrameCtrlChanged = LmHandlerOnTxFrameCtrlChanged;
    LmhpComplianceParams.OnPingSlotPeriodicityChanged = LmHandlerOnPingSlotPeriodicityChanged;
#endif /* LORAMAC_VERSION */

    /*The LoRa-Alliance Compliance protocol package should always be initialized and activated.*/
    if( LmHandlerPackageRegister( PACKAGE_ID_COMPLIANCE, &LmhpComplianceParams ) != LORAMAC_HANDLER_SUCCESS )
 800bf60:	4914      	ldr	r1, [pc, #80]	@ (800bfb4 <LmHandlerInit+0xb4>)
 800bf62:	2000      	movs	r0, #0
 800bf64:	f000 fd3a 	bl	800c9dc <LmHandlerPackageRegister>
 800bf68:	4603      	mov	r3, r0
 800bf6a:	2b00      	cmp	r3, #0
 800bf6c:	d002      	beq.n	800bf74 <LmHandlerInit+0x74>
    {
        return LORAMAC_HANDLER_ERROR;
 800bf6e:	f04f 33ff 	mov.w	r3, #4294967295
 800bf72:	e00a      	b.n	800bf8a <LmHandlerInit+0x8a>
    }

    if( LmhpPackagesRegistrationInit( ( Version_t * )&fwVersion ) != LORAMAC_HANDLER_SUCCESS )
 800bf74:	463b      	mov	r3, r7
 800bf76:	4618      	mov	r0, r3
 800bf78:	f001 fa02 	bl	800d380 <LmhpPackagesRegistrationInit>
 800bf7c:	4603      	mov	r3, r0
 800bf7e:	2b00      	cmp	r3, #0
 800bf80:	d002      	beq.n	800bf88 <LmHandlerInit+0x88>
    {
        return LORAMAC_HANDLER_ERROR;
 800bf82:	f04f 33ff 	mov.w	r3, #4294967295
 800bf86:	e000      	b.n	800bf8a <LmHandlerInit+0x8a>
    }

    return LORAMAC_HANDLER_SUCCESS;
 800bf88:	2300      	movs	r3, #0
}
 800bf8a:	4618      	mov	r0, r3
 800bf8c:	3708      	adds	r7, #8
 800bf8e:	46bd      	mov	sp, r7
 800bf90:	bd80      	pop	{r7, pc}
 800bf92:	bf00      	nop
 800bf94:	200004d8 	.word	0x200004d8
 800bf98:	200004dc 	.word	0x200004dc
 800bf9c:	0800c6a1 	.word	0x0800c6a1
 800bfa0:	0800c715 	.word	0x0800c715
 800bfa4:	0800c7f5 	.word	0x0800c7f5
 800bfa8:	0800c949 	.word	0x0800c949
 800bfac:	200004ec 	.word	0x200004ec
 800bfb0:	0800cd55 	.word	0x0800cd55
 800bfb4:	20000074 	.word	0x20000074

0800bfb8 <LmHandlerConfigure>:
        return LORAMAC_HANDLER_BUSY_ERROR;
    }
}

LmHandlerErrorStatus_t LmHandlerConfigure( LmHandlerParams_t *handlerParams )
{
 800bfb8:	b580      	push	{r7, lr}
 800bfba:	b090      	sub	sp, #64	@ 0x40
 800bfbc:	af00      	add	r7, sp, #0
 800bfbe:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
    LoraInfo_t *loraInfo;

    memcpy1( ( void * )&LmHandlerParams, ( const void * )handlerParams, sizeof( LmHandlerParams_t ) );
 800bfc0:	2218      	movs	r2, #24
 800bfc2:	6879      	ldr	r1, [r7, #4]
 800bfc4:	4853      	ldr	r0, [pc, #332]	@ (800c114 <LmHandlerConfigure+0x15c>)
 800bfc6:	f00a fb38 	bl	801663a <memcpy1>
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    IsUplinkTxPending = false;
#endif /* LORAMAC_VERSION */

    loraInfo = LoraInfo_GetPtr();
 800bfca:	f7fe fa8b 	bl	800a4e4 <LoraInfo_GetPtr>
 800bfce:	63f8      	str	r0, [r7, #60]	@ 0x3c

    if( 0U == ( ( 1 << ( LmHandlerParams.ActiveRegion ) ) & ( loraInfo->Region ) ) )
 800bfd0:	4b50      	ldr	r3, [pc, #320]	@ (800c114 <LmHandlerConfigure+0x15c>)
 800bfd2:	781b      	ldrb	r3, [r3, #0]
 800bfd4:	461a      	mov	r2, r3
 800bfd6:	2301      	movs	r3, #1
 800bfd8:	4093      	lsls	r3, r2
 800bfda:	461a      	mov	r2, r3
 800bfdc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bfde:	685b      	ldr	r3, [r3, #4]
 800bfe0:	4013      	ands	r3, r2
 800bfe2:	2b00      	cmp	r3, #0
 800bfe4:	d107      	bne.n	800bff6 <LmHandlerConfigure+0x3e>
    {
        MW_LOG( TS_ON, VLEVEL_ALWAYS, "error: Region is not defined in the MW: set lorawan_conf.h accordingly\r\n" );
 800bfe6:	4b4c      	ldr	r3, [pc, #304]	@ (800c118 <LmHandlerConfigure+0x160>)
 800bfe8:	2201      	movs	r2, #1
 800bfea:	2100      	movs	r1, #0
 800bfec:	2000      	movs	r0, #0
 800bfee:	f00e fe61 	bl	801acb4 <UTIL_ADV_TRACE_COND_FSend>
        while( 1 ) {} /* error: Region is not defined in the MW */
 800bff2:	bf00      	nop
 800bff4:	e7fd      	b.n	800bff2 <LmHandlerConfigure+0x3a>
    }

    if( LoRaMacInitialization( &LoRaMacPrimitives, &LoRaMacCallbacks, LmHandlerParams.ActiveRegion ) != LORAMAC_STATUS_OK )
 800bff6:	4b47      	ldr	r3, [pc, #284]	@ (800c114 <LmHandlerConfigure+0x15c>)
 800bff8:	781b      	ldrb	r3, [r3, #0]
 800bffa:	461a      	mov	r2, r3
 800bffc:	4947      	ldr	r1, [pc, #284]	@ (800c11c <LmHandlerConfigure+0x164>)
 800bffe:	4848      	ldr	r0, [pc, #288]	@ (800c120 <LmHandlerConfigure+0x168>)
 800c000:	f004 fba2 	bl	8010748 <LoRaMacInitialization>
 800c004:	4603      	mov	r3, r0
 800c006:	2b00      	cmp	r3, #0
 800c008:	d002      	beq.n	800c010 <LmHandlerConfigure+0x58>
    {
        return LORAMAC_HANDLER_ERROR;
 800c00a:	f04f 33ff 	mov.w	r3, #4294967295
 800c00e:	e07c      	b.n	800c10a <LmHandlerConfigure+0x152>
        LmHandlerParams.AdrEnable = current_nvm->MacGroup2.AdrCtrlOn;
    }
    else
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */
    {
        mibReq.Type = MIB_NET_ID;
 800c010:	2305      	movs	r3, #5
 800c012:	753b      	strb	r3, [r7, #20]
        mibReq.Param.NetID = LORAWAN_NETWORK_ID;
 800c014:	2300      	movs	r3, #0
 800c016:	61bb      	str	r3, [r7, #24]
        LoRaMacMibSetRequestConfirm( &mibReq );
 800c018:	f107 0314 	add.w	r3, r7, #20
 800c01c:	4618      	mov	r0, r3
 800c01e:	f005 f901 	bl	8011224 <LoRaMacMibSetRequestConfirm>
    }

    /* Restore ID struct from NVM or Init from callbacks */
    if( SecureElementInitMcuID( LoRaMacCallbacks.GetUniqueId, LoRaMacCallbacks.GetDevAddress ) != SECURE_ELEMENT_SUCCESS )
 800c022:	4b3e      	ldr	r3, [pc, #248]	@ (800c11c <LmHandlerConfigure+0x164>)
 800c024:	689b      	ldr	r3, [r3, #8]
 800c026:	4a3d      	ldr	r2, [pc, #244]	@ (800c11c <LmHandlerConfigure+0x164>)
 800c028:	68d2      	ldr	r2, [r2, #12]
 800c02a:	4611      	mov	r1, r2
 800c02c:	4618      	mov	r0, r3
 800c02e:	f7ff fc29 	bl	800b884 <SecureElementInitMcuID>
 800c032:	4603      	mov	r3, r0
 800c034:	2b00      	cmp	r3, #0
 800c036:	d002      	beq.n	800c03e <LmHandlerConfigure+0x86>
    {
        return LORAMAC_HANDLER_ERROR;
 800c038:	f04f 33ff 	mov.w	r3, #4294967295
 800c03c:	e065      	b.n	800c10a <LmHandlerConfigure+0x152>
    }

    /* Read secure-element DEV_EUI, JOIN_EUI and DEV_ADDR values. */
    mibReq.Type = MIB_DEV_ADDR;
 800c03e:	2306      	movs	r3, #6
 800c040:	753b      	strb	r3, [r7, #20]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800c042:	f107 0314 	add.w	r3, r7, #20
 800c046:	4618      	mov	r0, r3
 800c048:	f004 ff16 	bl	8010e78 <LoRaMacMibGetRequestConfirm>
    CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 800c04c:	69bb      	ldr	r3, [r7, #24]
 800c04e:	4a35      	ldr	r2, [pc, #212]	@ (800c124 <LmHandlerConfigure+0x16c>)
 800c050:	6153      	str	r3, [r2, #20]

    /* Override DevAddress value after init from callbacks */
    LoRaMacMibSetRequestConfirm( &mibReq );
 800c052:	f107 0314 	add.w	r3, r7, #20
 800c056:	4618      	mov	r0, r3
 800c058:	f005 f8e4 	bl	8011224 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_DEV_EUI;
 800c05c:	2302      	movs	r3, #2
 800c05e:	753b      	strb	r3, [r7, #20]
    mibReq.Param.DevEui = CommissioningParams.DevEui;
 800c060:	4b30      	ldr	r3, [pc, #192]	@ (800c124 <LmHandlerConfigure+0x16c>)
 800c062:	61bb      	str	r3, [r7, #24]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800c064:	f107 0314 	add.w	r3, r7, #20
 800c068:	4618      	mov	r0, r3
 800c06a:	f004 ff05 	bl	8010e78 <LoRaMacMibGetRequestConfirm>

    mibReq.Type = MIB_JOIN_EUI;
 800c06e:	2303      	movs	r3, #3
 800c070:	753b      	strb	r3, [r7, #20]
    mibReq.Param.JoinEui = CommissioningParams.JoinEui;
 800c072:	4b2d      	ldr	r3, [pc, #180]	@ (800c128 <LmHandlerConfigure+0x170>)
 800c074:	61bb      	str	r3, [r7, #24]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800c076:	f107 0314 	add.w	r3, r7, #20
 800c07a:	4618      	mov	r0, r3
 800c07c:	f004 fefc 	bl	8010e78 <LoRaMacMibGetRequestConfirm>

    SecureElementPrintKeys();
 800c080:	f7ff fc80 	bl	800b984 <SecureElementPrintKeys>

#if (defined (LORAWAN_KMS) && (LORAWAN_KMS == 1))
    MW_LOG( TS_OFF, VLEVEL_L, "###### KMS ENABLED \r\n" );
#endif /* LORAWAN_KMS == 1 */

    mibReq.Type = MIB_PUBLIC_NETWORK;
 800c084:	230f      	movs	r3, #15
 800c086:	753b      	strb	r3, [r7, #20]
    mibReq.Param.EnablePublicNetwork = LORAWAN_PUBLIC_NETWORK;
 800c088:	2301      	movs	r3, #1
 800c08a:	763b      	strb	r3, [r7, #24]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800c08c:	f107 0314 	add.w	r3, r7, #20
 800c090:	4618      	mov	r0, r3
 800c092:	f005 f8c7 	bl	8011224 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_REPEATER_SUPPORT;
 800c096:	2310      	movs	r3, #16
 800c098:	753b      	strb	r3, [r7, #20]
    mibReq.Param.EnableRepeaterSupport = LORAWAN_REPEATER_SUPPORT;
 800c09a:	2300      	movs	r3, #0
 800c09c:	763b      	strb	r3, [r7, #24]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800c09e:	f107 0314 	add.w	r3, r7, #20
 800c0a2:	4618      	mov	r0, r3
 800c0a4:	f005 f8be 	bl	8011224 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_ADR;
 800c0a8:	2304      	movs	r3, #4
 800c0aa:	753b      	strb	r3, [r7, #20]
    mibReq.Param.AdrEnable = LmHandlerParams.AdrEnable;
 800c0ac:	4b19      	ldr	r3, [pc, #100]	@ (800c114 <LmHandlerConfigure+0x15c>)
 800c0ae:	789b      	ldrb	r3, [r3, #2]
 800c0b0:	763b      	strb	r3, [r7, #24]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800c0b2:	f107 0314 	add.w	r3, r7, #20
 800c0b6:	4618      	mov	r0, r3
 800c0b8:	f005 f8b4 	bl	8011224 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_RXB_C_TIMEOUT;
 800c0bc:	2339      	movs	r3, #57	@ 0x39
 800c0be:	753b      	strb	r3, [r7, #20]
    mibReq.Param.RxBCTimeout = LmHandlerParams.RxBCTimeout;
 800c0c0:	4b14      	ldr	r3, [pc, #80]	@ (800c114 <LmHandlerConfigure+0x15c>)
 800c0c2:	695b      	ldr	r3, [r3, #20]
 800c0c4:	61bb      	str	r3, [r7, #24]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800c0c6:	f107 0314 	add.w	r3, r7, #20
 800c0ca:	4618      	mov	r0, r3
 800c0cc:	f005 f8aa 	bl	8011224 <LoRaMacMibSetRequestConfirm>

    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    getPhy.Attribute = PHY_DUTY_CYCLE;
 800c0d0:	230f      	movs	r3, #15
 800c0d2:	733b      	strb	r3, [r7, #12]
    phyParam = RegionGetPhyParam( LmHandlerParams.ActiveRegion, &getPhy );
 800c0d4:	4b0f      	ldr	r3, [pc, #60]	@ (800c114 <LmHandlerConfigure+0x15c>)
 800c0d6:	781b      	ldrb	r3, [r3, #0]
 800c0d8:	f107 020c 	add.w	r2, r7, #12
 800c0dc:	4611      	mov	r1, r2
 800c0de:	4618      	mov	r0, r3
 800c0e0:	f007 ff9f 	bl	8014022 <RegionGetPhyParam>
 800c0e4:	4603      	mov	r3, r0
 800c0e6:	60bb      	str	r3, [r7, #8]
    LmHandlerParams.DutyCycleEnabled = ( bool ) phyParam.Value;
 800c0e8:	68bb      	ldr	r3, [r7, #8]
 800c0ea:	2b00      	cmp	r3, #0
 800c0ec:	bf14      	ite	ne
 800c0ee:	2301      	movne	r3, #1
 800c0f0:	2300      	moveq	r3, #0
 800c0f2:	b2da      	uxtb	r2, r3
 800c0f4:	4b07      	ldr	r3, [pc, #28]	@ (800c114 <LmHandlerConfigure+0x15c>)
 800c0f6:	71da      	strb	r2, [r3, #7]

    /* Set system maximum tolerated rx error in milliseconds */
    LmHandlerSetSystemMaxRxError( 20 );
 800c0f8:	2014      	movs	r0, #20
 800c0fa:	f000 fab9 	bl	800c670 <LmHandlerSetSystemMaxRxError>

    /* override previous value if reconfigure new region */
    LoRaMacTestSetDutyCycleOn( LmHandlerParams.DutyCycleEnabled );
 800c0fe:	4b05      	ldr	r3, [pc, #20]	@ (800c114 <LmHandlerConfigure+0x15c>)
 800c100:	79db      	ldrb	r3, [r3, #7]
 800c102:	4618      	mov	r0, r3
 800c104:	f005 fe8c 	bl	8011e20 <LoRaMacTestSetDutyCycleOn>

    return LORAMAC_HANDLER_SUCCESS;
 800c108:	2300      	movs	r3, #0
}
 800c10a:	4618      	mov	r0, r3
 800c10c:	3740      	adds	r7, #64	@ 0x40
 800c10e:	46bd      	mov	sp, r7
 800c110:	bd80      	pop	{r7, pc}
 800c112:	bf00      	nop
 800c114:	200004c0 	.word	0x200004c0
 800c118:	0801b5d8 	.word	0x0801b5d8
 800c11c:	200004ec 	.word	0x200004ec
 800c120:	200004dc 	.word	0x200004dc
 800c124:	20000494 	.word	0x20000494
 800c128:	2000049c 	.word	0x2000049c

0800c12c <LmHandlerProcess>:

    return false;
}

void LmHandlerProcess( void )
{
 800c12c:	b580      	push	{r7, lr}
 800c12e:	af00      	add	r7, sp, #0
    /* Call at first the LoRaMAC process before to run all package process features */
    /* Processes the LoRaMac events */
    LoRaMacProcess( );
 800c130:	f002 fb06 	bl	800e740 <LoRaMacProcess>

    /* Call all packages process functions */
    LmHandlerPackagesProcess( );
 800c134:	f000 fd90 	bl	800cc58 <LmHandlerPackagesProcess>

    /* Check if a package transmission is pending. */
    /* If it is the case exit function earlier */
    if( LmHandlerPackageIsTxPending( ) == true )
 800c138:	f000 fd60 	bl	800cbfc <LmHandlerPackageIsTxPending>
 800c13c:	4603      	mov	r3, r0
 800c13e:	2b00      	cmp	r3, #0
        {
            IsUplinkTxPending = false;
        }
    }
#endif /* LORAMAC_VERSION */
}
 800c140:	bd80      	pop	{r7, pc}
	...

0800c144 <LmHandlerJoin>:
{
    return DutyCycleWaitTime;
}

void LmHandlerJoin( ActivationType_t mode, bool forceRejoin )
{
 800c144:	b580      	push	{r7, lr}
 800c146:	b092      	sub	sp, #72	@ 0x48
 800c148:	af00      	add	r7, sp, #0
 800c14a:	4603      	mov	r3, r0
 800c14c:	460a      	mov	r2, r1
 800c14e:	71fb      	strb	r3, [r7, #7]
 800c150:	4613      	mov	r3, r2
 800c152:	71bb      	strb	r3, [r7, #6]
    MlmeReq_t mlmeReq;

    mlmeReq.Type = MLME_JOIN;
 800c154:	2301      	movs	r3, #1
 800c156:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
    mlmeReq.Req.Join.Datarate = LmHandlerParams.TxDatarate;
 800c15a:	4b47      	ldr	r3, [pc, #284]	@ (800c278 <LmHandlerJoin+0x134>)
 800c15c:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800c160:	b2db      	uxtb	r3, r3
 800c162:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
    mlmeReq.Req.Join.TxPower = LmHandlerParams.TxPower;
 800c166:	4b44      	ldr	r3, [pc, #272]	@ (800c278 <LmHandlerJoin+0x134>)
 800c168:	f993 3005 	ldrsb.w	r3, [r3, #5]
 800c16c:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a

    if( mode == ACTIVATION_TYPE_OTAA )
 800c170:	79fb      	ldrb	r3, [r7, #7]
 800c172:	2b02      	cmp	r3, #2
 800c174:	d110      	bne.n	800c198 <LmHandlerJoin+0x54>
    {
        mlmeReq.Req.Join.NetworkActivation = ACTIVATION_TYPE_OTAA;
 800c176:	2302      	movs	r3, #2
 800c178:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
        JoinParams.Mode = ACTIVATION_TYPE_OTAA;
 800c17c:	4b3f      	ldr	r3, [pc, #252]	@ (800c27c <LmHandlerJoin+0x138>)
 800c17e:	2202      	movs	r2, #2
 800c180:	71da      	strb	r2, [r3, #7]
        JoinParams.forceRejoin = forceRejoin;
 800c182:	4a3e      	ldr	r2, [pc, #248]	@ (800c27c <LmHandlerJoin+0x138>)
 800c184:	79bb      	ldrb	r3, [r7, #6]
 800c186:	7213      	strb	r3, [r2, #8]
        LoRaMacStart();
 800c188:	f004 fd90 	bl	8010cac <LoRaMacStart>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        /* Starts the OTAA join procedure */
        LoRaMacMlmeRequest( &mlmeReq );
 800c18c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800c190:	4618      	mov	r0, r3
 800c192:	f005 fbfd 	bl	8011990 <LoRaMacMlmeRequest>
        /* Starts the join procedure */
        LoRaMacMlmeRequest( &mlmeReq );
    }
    DutyCycleWaitTime = mlmeReq.ReqReturn.DutyCycleWaitTime;
#endif /* LORAMAC_VERSION */
}
 800c196:	e06b      	b.n	800c270 <LmHandlerJoin+0x12c>
        mlmeReq.Req.Join.NetworkActivation = ACTIVATION_TYPE_ABP;
 800c198:	2301      	movs	r3, #1
 800c19a:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
        JoinParams.Mode = ACTIVATION_TYPE_ABP;
 800c19e:	4b37      	ldr	r3, [pc, #220]	@ (800c27c <LmHandlerJoin+0x138>)
 800c1a0:	2201      	movs	r2, #1
 800c1a2:	71da      	strb	r2, [r3, #7]
        JoinParams.Datarate = LmHandlerParams.TxDatarate;
 800c1a4:	4b34      	ldr	r3, [pc, #208]	@ (800c278 <LmHandlerJoin+0x134>)
 800c1a6:	f993 2004 	ldrsb.w	r2, [r3, #4]
 800c1aa:	4b34      	ldr	r3, [pc, #208]	@ (800c27c <LmHandlerJoin+0x138>)
 800c1ac:	711a      	strb	r2, [r3, #4]
        JoinParams.TxPower = LmHandlerParams.TxPower;
 800c1ae:	4b32      	ldr	r3, [pc, #200]	@ (800c278 <LmHandlerJoin+0x134>)
 800c1b0:	f993 2005 	ldrsb.w	r2, [r3, #5]
 800c1b4:	4b31      	ldr	r3, [pc, #196]	@ (800c27c <LmHandlerJoin+0x138>)
 800c1b6:	715a      	strb	r2, [r3, #5]
        JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 800c1b8:	4b30      	ldr	r3, [pc, #192]	@ (800c27c <LmHandlerJoin+0x138>)
 800c1ba:	2200      	movs	r2, #0
 800c1bc:	719a      	strb	r2, [r3, #6]
        JoinParams.forceRejoin = forceRejoin;
 800c1be:	4a2f      	ldr	r2, [pc, #188]	@ (800c27c <LmHandlerJoin+0x138>)
 800c1c0:	79bb      	ldrb	r3, [r7, #6]
 800c1c2:	7213      	strb	r3, [r2, #8]
        if( CtxRestoreDone == false )
 800c1c4:	4b2e      	ldr	r3, [pc, #184]	@ (800c280 <LmHandlerJoin+0x13c>)
 800c1c6:	781b      	ldrb	r3, [r3, #0]
 800c1c8:	f083 0301 	eor.w	r3, r3, #1
 800c1cc:	b2db      	uxtb	r3, r3
 800c1ce:	2b00      	cmp	r3, #0
 800c1d0:	d034      	beq.n	800c23c <LmHandlerJoin+0xf8>
            mibReq.Type = MIB_CHANNELS_DEFAULT_DATARATE;
 800c1d2:	231e      	movs	r3, #30
 800c1d4:	733b      	strb	r3, [r7, #12]
            mibReq.Param.ChannelsDefaultDatarate = LmHandlerParams.TxDatarate;
 800c1d6:	4b28      	ldr	r3, [pc, #160]	@ (800c278 <LmHandlerJoin+0x134>)
 800c1d8:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800c1dc:	743b      	strb	r3, [r7, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800c1de:	f107 030c 	add.w	r3, r7, #12
 800c1e2:	4618      	mov	r0, r3
 800c1e4:	f005 f81e 	bl	8011224 <LoRaMacMibSetRequestConfirm>
            mibReq.Type = MIB_CHANNELS_DATARATE;
 800c1e8:	231f      	movs	r3, #31
 800c1ea:	733b      	strb	r3, [r7, #12]
            mibReq.Param.ChannelsDatarate = LmHandlerParams.TxDatarate;
 800c1ec:	4b22      	ldr	r3, [pc, #136]	@ (800c278 <LmHandlerJoin+0x134>)
 800c1ee:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800c1f2:	743b      	strb	r3, [r7, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800c1f4:	f107 030c 	add.w	r3, r7, #12
 800c1f8:	4618      	mov	r0, r3
 800c1fa:	f005 f813 	bl	8011224 <LoRaMacMibSetRequestConfirm>
            mibReq.Type = MIB_CHANNELS_DEFAULT_TX_POWER;
 800c1fe:	2321      	movs	r3, #33	@ 0x21
 800c200:	733b      	strb	r3, [r7, #12]
            mibReq.Param.ChannelsDefaultTxPower = LmHandlerParams.TxPower;
 800c202:	4b1d      	ldr	r3, [pc, #116]	@ (800c278 <LmHandlerJoin+0x134>)
 800c204:	f993 3005 	ldrsb.w	r3, [r3, #5]
 800c208:	743b      	strb	r3, [r7, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800c20a:	f107 030c 	add.w	r3, r7, #12
 800c20e:	4618      	mov	r0, r3
 800c210:	f005 f808 	bl	8011224 <LoRaMacMibSetRequestConfirm>
            mibReq.Type = MIB_CHANNELS_TX_POWER;
 800c214:	2320      	movs	r3, #32
 800c216:	733b      	strb	r3, [r7, #12]
            mibReq.Param.ChannelsTxPower = LmHandlerParams.TxPower;
 800c218:	4b17      	ldr	r3, [pc, #92]	@ (800c278 <LmHandlerJoin+0x134>)
 800c21a:	f993 3005 	ldrsb.w	r3, [r3, #5]
 800c21e:	743b      	strb	r3, [r7, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800c220:	f107 030c 	add.w	r3, r7, #12
 800c224:	4618      	mov	r0, r3
 800c226:	f004 fffd 	bl	8011224 <LoRaMacMibSetRequestConfirm>
            mibReq.Type = MIB_ABP_LORAWAN_VERSION;
 800c22a:	2328      	movs	r3, #40	@ 0x28
 800c22c:	733b      	strb	r3, [r7, #12]
            mibReq.Param.AbpLrWanVersion.Value = ABP_ACTIVATION_LRWAN_VERSION;
 800c22e:	4b15      	ldr	r3, [pc, #84]	@ (800c284 <LmHandlerJoin+0x140>)
 800c230:	613b      	str	r3, [r7, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800c232:	f107 030c 	add.w	r3, r7, #12
 800c236:	4618      	mov	r0, r3
 800c238:	f004 fff4 	bl	8011224 <LoRaMacMibSetRequestConfirm>
        LoRaMacStart();
 800c23c:	f004 fd36 	bl	8010cac <LoRaMacStart>
        mibReq.Type = MIB_NETWORK_ACTIVATION;
 800c240:	2301      	movs	r3, #1
 800c242:	733b      	strb	r3, [r7, #12]
        mibReq.Param.NetworkActivation = ACTIVATION_TYPE_ABP;
 800c244:	2301      	movs	r3, #1
 800c246:	743b      	strb	r3, [r7, #16]
        LoRaMacMibSetRequestConfirm( &mibReq );
 800c248:	f107 030c 	add.w	r3, r7, #12
 800c24c:	4618      	mov	r0, r3
 800c24e:	f004 ffe9 	bl	8011224 <LoRaMacMibSetRequestConfirm>
        if( LmHandlerCallbacks->OnJoinRequest != NULL )
 800c252:	4b0d      	ldr	r3, [pc, #52]	@ (800c288 <LmHandlerJoin+0x144>)
 800c254:	681b      	ldr	r3, [r3, #0]
 800c256:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c258:	2b00      	cmp	r3, #0
 800c25a:	d004      	beq.n	800c266 <LmHandlerJoin+0x122>
            LmHandlerCallbacks->OnJoinRequest( &JoinParams );
 800c25c:	4b0a      	ldr	r3, [pc, #40]	@ (800c288 <LmHandlerJoin+0x144>)
 800c25e:	681b      	ldr	r3, [r3, #0]
 800c260:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c262:	4806      	ldr	r0, [pc, #24]	@ (800c27c <LmHandlerJoin+0x138>)
 800c264:	4798      	blx	r3
        LmHandlerRequestClass( LmHandlerParams.DefaultClass );
 800c266:	4b04      	ldr	r3, [pc, #16]	@ (800c278 <LmHandlerJoin+0x134>)
 800c268:	785b      	ldrb	r3, [r3, #1]
 800c26a:	4618      	mov	r0, r3
 800c26c:	f000 f930 	bl	800c4d0 <LmHandlerRequestClass>
}
 800c270:	bf00      	nop
 800c272:	3748      	adds	r7, #72	@ 0x48
 800c274:	46bd      	mov	sp, r7
 800c276:	bd80      	pop	{r7, pc}
 800c278:	200004c0 	.word	0x200004c0
 800c27c:	20000080 	.word	0x20000080
 800c280:	200005fa 	.word	0x200005fa
 800c284:	01000300 	.word	0x01000300
 800c288:	200004d8 	.word	0x200004d8

0800c28c <LmHandlerJoinStatus>:

LmHandlerFlagStatus_t LmHandlerJoinStatus( void )
{
 800c28c:	b580      	push	{r7, lr}
 800c28e:	b08c      	sub	sp, #48	@ 0x30
 800c290:	af00      	add	r7, sp, #0
    MibRequestConfirm_t mibReq;
    LoRaMacStatus_t status;

    mibReq.Type = MIB_NETWORK_ACTIVATION;
 800c292:	2301      	movs	r3, #1
 800c294:	713b      	strb	r3, [r7, #4]
    status = LoRaMacMibGetRequestConfirm( &mibReq );
 800c296:	1d3b      	adds	r3, r7, #4
 800c298:	4618      	mov	r0, r3
 800c29a:	f004 fded 	bl	8010e78 <LoRaMacMibGetRequestConfirm>
 800c29e:	4603      	mov	r3, r0
 800c2a0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    if( status == LORAMAC_STATUS_OK )
 800c2a4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800c2a8:	2b00      	cmp	r3, #0
 800c2aa:	d106      	bne.n	800c2ba <LmHandlerJoinStatus+0x2e>
    {
        if( mibReq.Param.NetworkActivation == ACTIVATION_TYPE_NONE )
 800c2ac:	7a3b      	ldrb	r3, [r7, #8]
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	d101      	bne.n	800c2b6 <LmHandlerJoinStatus+0x2a>
        {
            return LORAMAC_HANDLER_RESET;
 800c2b2:	2300      	movs	r3, #0
 800c2b4:	e002      	b.n	800c2bc <LmHandlerJoinStatus+0x30>
        }
        else
        {
            return LORAMAC_HANDLER_SET;
 800c2b6:	2301      	movs	r3, #1
 800c2b8:	e000      	b.n	800c2bc <LmHandlerJoinStatus+0x30>
        }
    }
    else
    {
        return LORAMAC_HANDLER_RESET;
 800c2ba:	2300      	movs	r3, #0
    }
}
 800c2bc:	4618      	mov	r0, r3
 800c2be:	3730      	adds	r7, #48	@ 0x30
 800c2c0:	46bd      	mov	sp, r7
 800c2c2:	bd80      	pop	{r7, pc}

0800c2c4 <LmHandlerSend>:

LmHandlerErrorStatus_t LmHandlerSend( LmHandlerAppData_t *appData, LmHandlerMsgTypes_t isTxConfirmed,
                                      bool allowDelayedTx )
{
 800c2c4:	b580      	push	{r7, lr}
 800c2c6:	b08a      	sub	sp, #40	@ 0x28
 800c2c8:	af00      	add	r7, sp, #0
 800c2ca:	6078      	str	r0, [r7, #4]
 800c2cc:	460b      	mov	r3, r1
 800c2ce:	70fb      	strb	r3, [r7, #3]
 800c2d0:	4613      	mov	r3, r2
 800c2d2:	70bb      	strb	r3, [r7, #2]
    LoRaMacStatus_t status;
    LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_ERROR;
 800c2d4:	23ff      	movs	r3, #255	@ 0xff
 800c2d6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    McpsReq_t mcpsReq;
    LoRaMacTxInfo_t txInfo;

    if( LoRaMacIsBusy() == true )
 800c2da:	f001 ffbd 	bl	800e258 <LoRaMacIsBusy>
 800c2de:	4603      	mov	r3, r0
 800c2e0:	2b00      	cmp	r3, #0
 800c2e2:	d002      	beq.n	800c2ea <LmHandlerSend+0x26>
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800c2e4:	f06f 0301 	mvn.w	r3, #1
 800c2e8:	e0bc      	b.n	800c464 <LmHandlerSend+0x1a0>
    }

    if( LoRaMacIsStopped() == true )
 800c2ea:	f001 ffd1 	bl	800e290 <LoRaMacIsStopped>
 800c2ee:	4603      	mov	r3, r0
 800c2f0:	2b00      	cmp	r3, #0
 800c2f2:	d002      	beq.n	800c2fa <LmHandlerSend+0x36>
    {
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800c2f4:	f06f 0302 	mvn.w	r3, #2
 800c2f8:	e0b4      	b.n	800c464 <LmHandlerSend+0x1a0>
    }

    if( LmHandlerJoinStatus( ) != LORAMAC_HANDLER_SET )
 800c2fa:	f7ff ffc7 	bl	800c28c <LmHandlerJoinStatus>
 800c2fe:	4603      	mov	r3, r0
 800c300:	2b01      	cmp	r3, #1
 800c302:	d00a      	beq.n	800c31a <LmHandlerSend+0x56>
    {
        /* The network isn't joined, try again. */
        LmHandlerJoin( JoinParams.Mode, JoinParams.forceRejoin );
 800c304:	4b59      	ldr	r3, [pc, #356]	@ (800c46c <LmHandlerSend+0x1a8>)
 800c306:	79db      	ldrb	r3, [r3, #7]
 800c308:	4a58      	ldr	r2, [pc, #352]	@ (800c46c <LmHandlerSend+0x1a8>)
 800c30a:	7a12      	ldrb	r2, [r2, #8]
 800c30c:	4611      	mov	r1, r2
 800c30e:	4618      	mov	r0, r3
 800c310:	f7ff ff18 	bl	800c144 <LmHandlerJoin>
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800c314:	f06f 0302 	mvn.w	r3, #2
 800c318:	e0a4      	b.n	800c464 <LmHandlerSend+0x1a0>
    }

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    if( ( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning( ) == true )
 800c31a:	4b55      	ldr	r3, [pc, #340]	@ (800c470 <LmHandlerSend+0x1ac>)
 800c31c:	681b      	ldr	r3, [r3, #0]
 800c31e:	68db      	ldr	r3, [r3, #12]
 800c320:	4798      	blx	r3
 800c322:	4603      	mov	r3, r0
 800c324:	2b00      	cmp	r3, #0
 800c326:	d00d      	beq.n	800c344 <LmHandlerSend+0x80>
        && ( appData->Port != LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->Port ) && ( appData->Port != 0 ) )
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	781a      	ldrb	r2, [r3, #0]
 800c32c:	4b50      	ldr	r3, [pc, #320]	@ (800c470 <LmHandlerSend+0x1ac>)
 800c32e:	681b      	ldr	r3, [r3, #0]
 800c330:	781b      	ldrb	r3, [r3, #0]
 800c332:	429a      	cmp	r2, r3
 800c334:	d006      	beq.n	800c344 <LmHandlerSend+0x80>
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	781b      	ldrb	r3, [r3, #0]
 800c33a:	2b00      	cmp	r3, #0
 800c33c:	d002      	beq.n	800c344 <LmHandlerSend+0x80>
    {
        return LORAMAC_HANDLER_COMPLIANCE_RUNNING;
 800c33e:	f06f 0303 	mvn.w	r3, #3
 800c342:	e08f      	b.n	800c464 <LmHandlerSend+0x1a0>
    }
#endif /* LORAMAC_VERSION */

    TxParams.MsgType = isTxConfirmed;
 800c344:	4a4b      	ldr	r2, [pc, #300]	@ (800c474 <LmHandlerSend+0x1b0>)
 800c346:	78fb      	ldrb	r3, [r7, #3]
 800c348:	7213      	strb	r3, [r2, #8]
    mcpsReq.Type = ( isTxConfirmed == LORAMAC_HANDLER_UNCONFIRMED_MSG ) ? MCPS_UNCONFIRMED : MCPS_CONFIRMED;
 800c34a:	78fb      	ldrb	r3, [r7, #3]
 800c34c:	2b00      	cmp	r3, #0
 800c34e:	bf14      	ite	ne
 800c350:	2301      	movne	r3, #1
 800c352:	2300      	moveq	r3, #0
 800c354:	b2db      	uxtb	r3, r3
 800c356:	743b      	strb	r3, [r7, #16]
    mcpsReq.Req.Unconfirmed.Datarate = LmHandlerParams.TxDatarate;
 800c358:	4b47      	ldr	r3, [pc, #284]	@ (800c478 <LmHandlerSend+0x1b4>)
 800c35a:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800c35e:	77bb      	strb	r3, [r7, #30]
    if( LoRaMacQueryTxPossible( appData->BufferSize, &txInfo ) != LORAMAC_STATUS_OK )
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	785b      	ldrb	r3, [r3, #1]
 800c364:	f107 020c 	add.w	r2, r7, #12
 800c368:	4611      	mov	r1, r2
 800c36a:	4618      	mov	r0, r3
 800c36c:	f004 fcfe 	bl	8010d6c <LoRaMacQueryTxPossible>
 800c370:	4603      	mov	r3, r0
 800c372:	2b00      	cmp	r3, #0
 800c374:	d009      	beq.n	800c38a <LmHandlerSend+0xc6>
    {
        /* Send empty frame in order to flush MAC commands */
        mcpsReq.Type = MCPS_UNCONFIRMED;
 800c376:	2300      	movs	r3, #0
 800c378:	743b      	strb	r3, [r7, #16]
        mcpsReq.Req.Unconfirmed.fBuffer = NULL;
 800c37a:	2300      	movs	r3, #0
 800c37c:	61bb      	str	r3, [r7, #24]
        mcpsReq.Req.Unconfirmed.fBufferSize = 0;
 800c37e:	2300      	movs	r3, #0
 800c380:	83bb      	strh	r3, [r7, #28]
        lmhStatus = LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED;
 800c382:	23f9      	movs	r3, #249	@ 0xf9
 800c384:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800c388:	e008      	b.n	800c39c <LmHandlerSend+0xd8>
    }
    else
    {
        mcpsReq.Req.Unconfirmed.fPort = appData->Port;
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	781b      	ldrb	r3, [r3, #0]
 800c38e:	753b      	strb	r3, [r7, #20]
        mcpsReq.Req.Unconfirmed.fBufferSize = appData->BufferSize;
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	785b      	ldrb	r3, [r3, #1]
 800c394:	83bb      	strh	r3, [r7, #28]
        mcpsReq.Req.Unconfirmed.fBuffer = appData->Buffer;
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	685b      	ldr	r3, [r3, #4]
 800c39a:	61bb      	str	r3, [r7, #24]
    }

    TxParams.AppData = *appData;
 800c39c:	4b35      	ldr	r3, [pc, #212]	@ (800c474 <LmHandlerSend+0x1b0>)
 800c39e:	687a      	ldr	r2, [r7, #4]
 800c3a0:	3310      	adds	r3, #16
 800c3a2:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c3a6:	e883 0003 	stmia.w	r3, {r0, r1}
    TxParams.Datarate = LmHandlerParams.TxDatarate;
 800c3aa:	4b33      	ldr	r3, [pc, #204]	@ (800c478 <LmHandlerSend+0x1b4>)
 800c3ac:	f993 2004 	ldrsb.w	r2, [r3, #4]
 800c3b0:	4b30      	ldr	r3, [pc, #192]	@ (800c474 <LmHandlerSend+0x1b0>)
 800c3b2:	729a      	strb	r2, [r3, #10]

    status = LoRaMacMcpsRequest( &mcpsReq, allowDelayedTx );
 800c3b4:	78ba      	ldrb	r2, [r7, #2]
 800c3b6:	f107 0310 	add.w	r3, r7, #16
 800c3ba:	4611      	mov	r1, r2
 800c3bc:	4618      	mov	r0, r3
 800c3be:	f005 fc39 	bl	8011c34 <LoRaMacMcpsRequest>
 800c3c2:	4603      	mov	r3, r0
 800c3c4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    DutyCycleWaitTime = mcpsReq.ReqReturn.DutyCycleWaitTime;
 800c3c8:	6a3b      	ldr	r3, [r7, #32]
 800c3ca:	4a2c      	ldr	r2, [pc, #176]	@ (800c47c <LmHandlerSend+0x1b8>)
 800c3cc:	6013      	str	r3, [r2, #0]

    switch( status )
 800c3ce:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800c3d2:	2b11      	cmp	r3, #17
 800c3d4:	d83f      	bhi.n	800c456 <LmHandlerSend+0x192>
 800c3d6:	a201      	add	r2, pc, #4	@ (adr r2, 800c3dc <LmHandlerSend+0x118>)
 800c3d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c3dc:	0800c425 	.word	0x0800c425
 800c3e0:	0800c437 	.word	0x0800c437
 800c3e4:	0800c457 	.word	0x0800c457
 800c3e8:	0800c457 	.word	0x0800c457
 800c3ec:	0800c457 	.word	0x0800c457
 800c3f0:	0800c457 	.word	0x0800c457
 800c3f4:	0800c457 	.word	0x0800c457
 800c3f8:	0800c43f 	.word	0x0800c43f
 800c3fc:	0800c457 	.word	0x0800c457
 800c400:	0800c457 	.word	0x0800c457
 800c404:	0800c457 	.word	0x0800c457
 800c408:	0800c44f 	.word	0x0800c44f
 800c40c:	0800c457 	.word	0x0800c457
 800c410:	0800c457 	.word	0x0800c457
 800c414:	0800c437 	.word	0x0800c437
 800c418:	0800c437 	.word	0x0800c437
 800c41c:	0800c437 	.word	0x0800c437
 800c420:	0800c447 	.word	0x0800c447
    {
        case LORAMAC_STATUS_OK:
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            IsUplinkTxPending = false;
#endif /* LORAMAC_VERSION */
            if( lmhStatus != LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED )
 800c424:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800c428:	f113 0f07 	cmn.w	r3, #7
 800c42c:	d017      	beq.n	800c45e <LmHandlerSend+0x19a>
            {
                lmhStatus = LORAMAC_HANDLER_SUCCESS;
 800c42e:	2300      	movs	r3, #0
 800c430:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            }
            break;
 800c434:	e013      	b.n	800c45e <LmHandlerSend+0x19a>
        case LORAMAC_STATUS_BUSY:
        case LORAMAC_STATUS_BUSY_UPLINK_COLLISION:
        case LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME:
        case LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME:
            lmhStatus = LORAMAC_HANDLER_BUSY_ERROR;
 800c436:	23fe      	movs	r3, #254	@ 0xfe
 800c438:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 800c43c:	e010      	b.n	800c460 <LmHandlerSend+0x19c>
        case LORAMAC_STATUS_NO_NETWORK_JOINED:
            lmhStatus = LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800c43e:	23fd      	movs	r3, #253	@ 0xfd
 800c440:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 800c444:	e00c      	b.n	800c460 <LmHandlerSend+0x19c>
        case LORAMAC_STATUS_CRYPTO_ERROR:
            lmhStatus = LORAMAC_HANDLER_CRYPTO_ERROR;
 800c446:	23fb      	movs	r3, #251	@ 0xfb
 800c448:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 800c44c:	e008      	b.n	800c460 <LmHandlerSend+0x19c>
        case LORAMAC_STATUS_DUTYCYCLE_RESTRICTED:
            lmhStatus = LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED;
 800c44e:	23fa      	movs	r3, #250	@ 0xfa
 800c450:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 800c454:	e004      	b.n	800c460 <LmHandlerSend+0x19c>
        case LORAMAC_STATUS_REGION_NOT_SUPPORTED:
        case LORAMAC_STATUS_NO_FREE_CHANNEL_FOUND:
        case LORAMAC_STATUS_NO_CHANNEL_FOUND:
        case LORAMAC_STATUS_LENGTH_ERROR:
        default:
            lmhStatus = LORAMAC_HANDLER_ERROR;
 800c456:	23ff      	movs	r3, #255	@ 0xff
 800c458:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 800c45c:	e000      	b.n	800c460 <LmHandlerSend+0x19c>
            break;
 800c45e:	bf00      	nop
    }

    return lmhStatus;
 800c460:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 800c464:	4618      	mov	r0, r3
 800c466:	3728      	adds	r7, #40	@ 0x28
 800c468:	46bd      	mov	sp, r7
 800c46a:	bd80      	pop	{r7, pc}
 800c46c:	20000080 	.word	0x20000080
 800c470:	200004ac 	.word	0x200004ac
 800c474:	2000008c 	.word	0x2000008c
 800c478:	200004c0 	.word	0x200004c0
 800c47c:	20000504 	.word	0x20000504

0800c480 <LmHandlerDeviceTimeReq>:

LmHandlerErrorStatus_t LmHandlerDeviceTimeReq( void )
{
 800c480:	b580      	push	{r7, lr}
 800c482:	b086      	sub	sp, #24
 800c484:	af00      	add	r7, sp, #0
    LoRaMacStatus_t status;
    MlmeReq_t mlmeReq;

    mlmeReq.Type = MLME_DEVICE_TIME;
 800c486:	230a      	movs	r3, #10
 800c488:	703b      	strb	r3, [r7, #0]

    status = LoRaMacMlmeRequest( &mlmeReq );
 800c48a:	463b      	mov	r3, r7
 800c48c:	4618      	mov	r0, r3
 800c48e:	f005 fa7f 	bl	8011990 <LoRaMacMlmeRequest>
 800c492:	4603      	mov	r3, r0
 800c494:	75fb      	strb	r3, [r7, #23]
    DutyCycleWaitTime = mlmeReq.ReqReturn.DutyCycleWaitTime;
 800c496:	693b      	ldr	r3, [r7, #16]
 800c498:	4a06      	ldr	r2, [pc, #24]	@ (800c4b4 <LmHandlerDeviceTimeReq+0x34>)
 800c49a:	6013      	str	r3, [r2, #0]

    if( status == LORAMAC_STATUS_OK )
 800c49c:	7dfb      	ldrb	r3, [r7, #23]
 800c49e:	2b00      	cmp	r3, #0
 800c4a0:	d101      	bne.n	800c4a6 <LmHandlerDeviceTimeReq+0x26>
    {
        return LORAMAC_HANDLER_SUCCESS;
 800c4a2:	2300      	movs	r3, #0
 800c4a4:	e001      	b.n	800c4aa <LmHandlerDeviceTimeReq+0x2a>
    }
    else
    {
        return LORAMAC_HANDLER_ERROR;
 800c4a6:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 800c4aa:	4618      	mov	r0, r3
 800c4ac:	3718      	adds	r7, #24
 800c4ae:	46bd      	mov	sp, r7
 800c4b0:	bd80      	pop	{r7, pc}
 800c4b2:	bf00      	nop
 800c4b4:	20000504 	.word	0x20000504

0800c4b8 <LmHandlerPingSlotReq>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED == 1 */

LmHandlerErrorStatus_t LmHandlerPingSlotReq( uint8_t periodicity )
{
 800c4b8:	b480      	push	{r7}
 800c4ba:	b083      	sub	sp, #12
 800c4bc:	af00      	add	r7, sp, #0
 800c4be:	4603      	mov	r3, r0
 800c4c0:	71fb      	strb	r3, [r7, #7]
        return LmHandlerSend( &appData, LmHandlerParams.IsTxConfirmed, false );
    }
    else
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
    {
        return LORAMAC_HANDLER_ERROR;
 800c4c2:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 800c4c6:	4618      	mov	r0, r3
 800c4c8:	370c      	adds	r7, #12
 800c4ca:	46bd      	mov	sp, r7
 800c4cc:	bc80      	pop	{r7}
 800c4ce:	4770      	bx	lr

0800c4d0 <LmHandlerRequestClass>:

LmHandlerErrorStatus_t LmHandlerRequestClass( DeviceClass_t newClass )
{
 800c4d0:	b580      	push	{r7, lr}
 800c4d2:	b08e      	sub	sp, #56	@ 0x38
 800c4d4:	af00      	add	r7, sp, #0
 800c4d6:	4603      	mov	r3, r0
 800c4d8:	71fb      	strb	r3, [r7, #7]
    MibRequestConfirm_t mibReq;
    DeviceClass_t currentClass;
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 800c4da:	2300      	movs	r3, #0
 800c4dc:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

    if( LoRaMacIsBusy() == true )
 800c4e0:	f001 feba 	bl	800e258 <LoRaMacIsBusy>
 800c4e4:	4603      	mov	r3, r0
 800c4e6:	2b00      	cmp	r3, #0
 800c4e8:	d002      	beq.n	800c4f0 <LmHandlerRequestClass+0x20>
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800c4ea:	f06f 0301 	mvn.w	r3, #1
 800c4ee:	e071      	b.n	800c5d4 <LmHandlerRequestClass+0x104>
    }

    if( LmHandlerJoinStatus() != LORAMAC_HANDLER_SET )
 800c4f0:	f7ff fecc 	bl	800c28c <LmHandlerJoinStatus>
 800c4f4:	4603      	mov	r3, r0
 800c4f6:	2b01      	cmp	r3, #1
 800c4f8:	d002      	beq.n	800c500 <LmHandlerRequestClass+0x30>
    {
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800c4fa:	f06f 0302 	mvn.w	r3, #2
 800c4fe:	e069      	b.n	800c5d4 <LmHandlerRequestClass+0x104>
    }

    mibReq.Type = MIB_DEVICE_CLASS;
 800c500:	2300      	movs	r3, #0
 800c502:	733b      	strb	r3, [r7, #12]
    if( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800c504:	f107 030c 	add.w	r3, r7, #12
 800c508:	4618      	mov	r0, r3
 800c50a:	f004 fcb5 	bl	8010e78 <LoRaMacMibGetRequestConfirm>
 800c50e:	4603      	mov	r3, r0
 800c510:	2b00      	cmp	r3, #0
 800c512:	d002      	beq.n	800c51a <LmHandlerRequestClass+0x4a>
    {
        return LORAMAC_HANDLER_ERROR;
 800c514:	f04f 33ff 	mov.w	r3, #4294967295
 800c518:	e05c      	b.n	800c5d4 <LmHandlerRequestClass+0x104>
    }
    currentClass = mibReq.Param.Class;
 800c51a:	7c3b      	ldrb	r3, [r7, #16]
 800c51c:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    /* Attempt to switch only if class update */
    if( currentClass != newClass )
 800c520:	f897 2036 	ldrb.w	r2, [r7, #54]	@ 0x36
 800c524:	79fb      	ldrb	r3, [r7, #7]
 800c526:	429a      	cmp	r2, r3
 800c528:	d052      	beq.n	800c5d0 <LmHandlerRequestClass+0x100>
    {
        switch( newClass )
 800c52a:	79fb      	ldrb	r3, [r7, #7]
 800c52c:	2b02      	cmp	r3, #2
 800c52e:	d028      	beq.n	800c582 <LmHandlerRequestClass+0xb2>
 800c530:	2b02      	cmp	r3, #2
 800c532:	dc48      	bgt.n	800c5c6 <LmHandlerRequestClass+0xf6>
 800c534:	2b00      	cmp	r3, #0
 800c536:	d002      	beq.n	800c53e <LmHandlerRequestClass+0x6e>
 800c538:	2b01      	cmp	r3, #1
 800c53a:	d01e      	beq.n	800c57a <LmHandlerRequestClass+0xaa>
                        }
                    }
                }
                break;
            default:
                break;
 800c53c:	e043      	b.n	800c5c6 <LmHandlerRequestClass+0xf6>
                    if( currentClass != CLASS_A )
 800c53e:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800c542:	2b00      	cmp	r3, #0
 800c544:	d041      	beq.n	800c5ca <LmHandlerRequestClass+0xfa>
                        mibReq.Param.Class = newClass;
 800c546:	79fb      	ldrb	r3, [r7, #7]
 800c548:	743b      	strb	r3, [r7, #16]
                        if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 800c54a:	f107 030c 	add.w	r3, r7, #12
 800c54e:	4618      	mov	r0, r3
 800c550:	f004 fe68 	bl	8011224 <LoRaMacMibSetRequestConfirm>
 800c554:	4603      	mov	r3, r0
 800c556:	2b00      	cmp	r3, #0
 800c558:	d10b      	bne.n	800c572 <LmHandlerRequestClass+0xa2>
                            if( LmHandlerCallbacks->OnClassChange != NULL )
 800c55a:	4b20      	ldr	r3, [pc, #128]	@ (800c5dc <LmHandlerRequestClass+0x10c>)
 800c55c:	681b      	ldr	r3, [r3, #0]
 800c55e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c560:	2b00      	cmp	r3, #0
 800c562:	d032      	beq.n	800c5ca <LmHandlerRequestClass+0xfa>
                                LmHandlerCallbacks->OnClassChange( newClass );
 800c564:	4b1d      	ldr	r3, [pc, #116]	@ (800c5dc <LmHandlerRequestClass+0x10c>)
 800c566:	681b      	ldr	r3, [r3, #0]
 800c568:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c56a:	79fa      	ldrb	r2, [r7, #7]
 800c56c:	4610      	mov	r0, r2
 800c56e:	4798      	blx	r3
                break;
 800c570:	e02b      	b.n	800c5ca <LmHandlerRequestClass+0xfa>
                            errorStatus = LORAMAC_HANDLER_ERROR;
 800c572:	23ff      	movs	r3, #255	@ 0xff
 800c574:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
                break;
 800c578:	e027      	b.n	800c5ca <LmHandlerRequestClass+0xfa>
                    errorStatus = LORAMAC_HANDLER_ERROR;
 800c57a:	23ff      	movs	r3, #255	@ 0xff
 800c57c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
                break;
 800c580:	e026      	b.n	800c5d0 <LmHandlerRequestClass+0x100>
                    if( currentClass != CLASS_A )
 800c582:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800c586:	2b00      	cmp	r3, #0
 800c588:	d003      	beq.n	800c592 <LmHandlerRequestClass+0xc2>
                        errorStatus = LORAMAC_HANDLER_ERROR;
 800c58a:	23ff      	movs	r3, #255	@ 0xff
 800c58c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
                break;
 800c590:	e01d      	b.n	800c5ce <LmHandlerRequestClass+0xfe>
                        mibReq.Param.Class = newClass;
 800c592:	79fb      	ldrb	r3, [r7, #7]
 800c594:	743b      	strb	r3, [r7, #16]
                        if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 800c596:	f107 030c 	add.w	r3, r7, #12
 800c59a:	4618      	mov	r0, r3
 800c59c:	f004 fe42 	bl	8011224 <LoRaMacMibSetRequestConfirm>
 800c5a0:	4603      	mov	r3, r0
 800c5a2:	2b00      	cmp	r3, #0
 800c5a4:	d10b      	bne.n	800c5be <LmHandlerRequestClass+0xee>
                            if( LmHandlerCallbacks->OnClassChange != NULL )
 800c5a6:	4b0d      	ldr	r3, [pc, #52]	@ (800c5dc <LmHandlerRequestClass+0x10c>)
 800c5a8:	681b      	ldr	r3, [r3, #0]
 800c5aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c5ac:	2b00      	cmp	r3, #0
 800c5ae:	d00e      	beq.n	800c5ce <LmHandlerRequestClass+0xfe>
                                LmHandlerCallbacks->OnClassChange( newClass );
 800c5b0:	4b0a      	ldr	r3, [pc, #40]	@ (800c5dc <LmHandlerRequestClass+0x10c>)
 800c5b2:	681b      	ldr	r3, [r3, #0]
 800c5b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c5b6:	79fa      	ldrb	r2, [r7, #7]
 800c5b8:	4610      	mov	r0, r2
 800c5ba:	4798      	blx	r3
                break;
 800c5bc:	e007      	b.n	800c5ce <LmHandlerRequestClass+0xfe>
                            errorStatus = LORAMAC_HANDLER_ERROR;
 800c5be:	23ff      	movs	r3, #255	@ 0xff
 800c5c0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
                break;
 800c5c4:	e003      	b.n	800c5ce <LmHandlerRequestClass+0xfe>
                break;
 800c5c6:	bf00      	nop
 800c5c8:	e002      	b.n	800c5d0 <LmHandlerRequestClass+0x100>
                break;
 800c5ca:	bf00      	nop
 800c5cc:	e000      	b.n	800c5d0 <LmHandlerRequestClass+0x100>
                break;
 800c5ce:	bf00      	nop
        }
    }
    return errorStatus;
 800c5d0:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 800c5d4:	4618      	mov	r0, r3
 800c5d6:	3738      	adds	r7, #56	@ 0x38
 800c5d8:	46bd      	mov	sp, r7
 800c5da:	bd80      	pop	{r7, pc}
 800c5dc:	200004d8 	.word	0x200004d8

0800c5e0 <LmHandlerGetCurrentClass>:

LmHandlerErrorStatus_t LmHandlerGetCurrentClass( DeviceClass_t *deviceClass )
{
 800c5e0:	b580      	push	{r7, lr}
 800c5e2:	b08c      	sub	sp, #48	@ 0x30
 800c5e4:	af00      	add	r7, sp, #0
 800c5e6:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
    if( deviceClass == NULL )
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	2b00      	cmp	r3, #0
 800c5ec:	d102      	bne.n	800c5f4 <LmHandlerGetCurrentClass+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 800c5ee:	f04f 33ff 	mov.w	r3, #4294967295
 800c5f2:	e010      	b.n	800c616 <LmHandlerGetCurrentClass+0x36>
    }

    mibReq.Type = MIB_DEVICE_CLASS;
 800c5f4:	2300      	movs	r3, #0
 800c5f6:	723b      	strb	r3, [r7, #8]
    if( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800c5f8:	f107 0308 	add.w	r3, r7, #8
 800c5fc:	4618      	mov	r0, r3
 800c5fe:	f004 fc3b 	bl	8010e78 <LoRaMacMibGetRequestConfirm>
 800c602:	4603      	mov	r3, r0
 800c604:	2b00      	cmp	r3, #0
 800c606:	d002      	beq.n	800c60e <LmHandlerGetCurrentClass+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 800c608:	f04f 33ff 	mov.w	r3, #4294967295
 800c60c:	e003      	b.n	800c616 <LmHandlerGetCurrentClass+0x36>
    }

    *deviceClass = mibReq.Param.Class;
 800c60e:	7b3a      	ldrb	r2, [r7, #12]
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	701a      	strb	r2, [r3, #0]
    return LORAMAC_HANDLER_SUCCESS;
 800c614:	2300      	movs	r3, #0
}
 800c616:	4618      	mov	r0, r3
 800c618:	3730      	adds	r7, #48	@ 0x30
 800c61a:	46bd      	mov	sp, r7
 800c61c:	bd80      	pop	{r7, pc}
	...

0800c620 <LmHandlerGetTxDatarate>:

LmHandlerErrorStatus_t LmHandlerGetTxDatarate( int8_t *txDatarate )
{
 800c620:	b580      	push	{r7, lr}
 800c622:	b08c      	sub	sp, #48	@ 0x30
 800c624:	af00      	add	r7, sp, #0
 800c626:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibGet;
    if( txDatarate == NULL )
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	2b00      	cmp	r3, #0
 800c62c:	d102      	bne.n	800c634 <LmHandlerGetTxDatarate+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 800c62e:	f04f 33ff 	mov.w	r3, #4294967295
 800c632:	e016      	b.n	800c662 <LmHandlerGetTxDatarate+0x42>
    }

    mibGet.Type = MIB_CHANNELS_DATARATE;
 800c634:	231f      	movs	r3, #31
 800c636:	723b      	strb	r3, [r7, #8]
    if( LoRaMacMibGetRequestConfirm( &mibGet ) != LORAMAC_STATUS_OK )
 800c638:	f107 0308 	add.w	r3, r7, #8
 800c63c:	4618      	mov	r0, r3
 800c63e:	f004 fc1b 	bl	8010e78 <LoRaMacMibGetRequestConfirm>
 800c642:	4603      	mov	r3, r0
 800c644:	2b00      	cmp	r3, #0
 800c646:	d002      	beq.n	800c64e <LmHandlerGetTxDatarate+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 800c648:	f04f 33ff 	mov.w	r3, #4294967295
 800c64c:	e009      	b.n	800c662 <LmHandlerGetTxDatarate+0x42>
    }

    *txDatarate = mibGet.Param.ChannelsDatarate;
 800c64e:	f997 200c 	ldrsb.w	r2, [r7, #12]
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	701a      	strb	r2, [r3, #0]
    LmHandlerParams.TxDatarate = *txDatarate;
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	f993 2000 	ldrsb.w	r2, [r3]
 800c65c:	4b03      	ldr	r3, [pc, #12]	@ (800c66c <LmHandlerGetTxDatarate+0x4c>)
 800c65e:	711a      	strb	r2, [r3, #4]
    return LORAMAC_HANDLER_SUCCESS;
 800c660:	2300      	movs	r3, #0
}
 800c662:	4618      	mov	r0, r3
 800c664:	3730      	adds	r7, #48	@ 0x30
 800c666:	46bd      	mov	sp, r7
 800c668:	bd80      	pop	{r7, pc}
 800c66a:	bf00      	nop
 800c66c:	200004c0 	.word	0x200004c0

0800c670 <LmHandlerSetSystemMaxRxError>:
    *region = LmHandlerParams.ActiveRegion;
    return LORAMAC_HANDLER_SUCCESS;
}

LmHandlerErrorStatus_t LmHandlerSetSystemMaxRxError( uint32_t maxErrorInMs )
{
 800c670:	b580      	push	{r7, lr}
 800c672:	b08c      	sub	sp, #48	@ 0x30
 800c674:	af00      	add	r7, sp, #0
 800c676:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;

    mibReq.Type = MIB_SYSTEM_MAX_RX_ERROR;
 800c678:	2322      	movs	r3, #34	@ 0x22
 800c67a:	723b      	strb	r3, [r7, #8]
    mibReq.Param.SystemMaxRxError = maxErrorInMs;
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	60fb      	str	r3, [r7, #12]
    if( LoRaMacMibSetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800c680:	f107 0308 	add.w	r3, r7, #8
 800c684:	4618      	mov	r0, r3
 800c686:	f004 fdcd 	bl	8011224 <LoRaMacMibSetRequestConfirm>
 800c68a:	4603      	mov	r3, r0
 800c68c:	2b00      	cmp	r3, #0
 800c68e:	d002      	beq.n	800c696 <LmHandlerSetSystemMaxRxError+0x26>
    {
        return LORAMAC_HANDLER_ERROR;
 800c690:	f04f 33ff 	mov.w	r3, #4294967295
 800c694:	e000      	b.n	800c698 <LmHandlerSetSystemMaxRxError+0x28>
    }
    return LORAMAC_HANDLER_SUCCESS;
 800c696:	2300      	movs	r3, #0
}
 800c698:	4618      	mov	r0, r3
 800c69a:	3730      	adds	r7, #48	@ 0x30
 800c69c:	46bd      	mov	sp, r7
 800c69e:	bd80      	pop	{r7, pc}

0800c6a0 <McpsConfirm>:
 * LORAMAC NOTIFICATIONS HANDLING
 *=============================================================================
 */

static void McpsConfirm( McpsConfirm_t *mcpsConfirm )
{
 800c6a0:	b580      	push	{r7, lr}
 800c6a2:	b082      	sub	sp, #8
 800c6a4:	af00      	add	r7, sp, #0
 800c6a6:	6078      	str	r0, [r7, #4]
    TxParams.IsMcpsConfirm = 1;
 800c6a8:	4b18      	ldr	r3, [pc, #96]	@ (800c70c <McpsConfirm+0x6c>)
 800c6aa:	2201      	movs	r2, #1
 800c6ac:	701a      	strb	r2, [r3, #0]
    TxParams.Status = mcpsConfirm->Status;
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	785a      	ldrb	r2, [r3, #1]
 800c6b2:	4b16      	ldr	r3, [pc, #88]	@ (800c70c <McpsConfirm+0x6c>)
 800c6b4:	705a      	strb	r2, [r3, #1]
    TxParams.Datarate = mcpsConfirm->Datarate;
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	789b      	ldrb	r3, [r3, #2]
 800c6ba:	b25a      	sxtb	r2, r3
 800c6bc:	4b13      	ldr	r3, [pc, #76]	@ (800c70c <McpsConfirm+0x6c>)
 800c6be:	729a      	strb	r2, [r3, #10]
    TxParams.UplinkCounter = mcpsConfirm->UpLinkCounter;
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	68db      	ldr	r3, [r3, #12]
 800c6c4:	4a11      	ldr	r2, [pc, #68]	@ (800c70c <McpsConfirm+0x6c>)
 800c6c6:	60d3      	str	r3, [r2, #12]
    TxParams.TxPower = mcpsConfirm->TxPower;
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	f993 2003 	ldrsb.w	r2, [r3, #3]
 800c6ce:	4b0f      	ldr	r3, [pc, #60]	@ (800c70c <McpsConfirm+0x6c>)
 800c6d0:	761a      	strb	r2, [r3, #24]
    TxParams.Channel = mcpsConfirm->Channel;
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	691b      	ldr	r3, [r3, #16]
 800c6d6:	b2da      	uxtb	r2, r3
 800c6d8:	4b0c      	ldr	r3, [pc, #48]	@ (800c70c <McpsConfirm+0x6c>)
 800c6da:	765a      	strb	r2, [r3, #25]
    TxParams.AckReceived = mcpsConfirm->AckReceived;
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	791b      	ldrb	r3, [r3, #4]
 800c6e0:	461a      	mov	r2, r3
 800c6e2:	4b0a      	ldr	r3, [pc, #40]	@ (800c70c <McpsConfirm+0x6c>)
 800c6e4:	725a      	strb	r2, [r3, #9]

    if( LmHandlerCallbacks->OnTxData != NULL )
 800c6e6:	4b0a      	ldr	r3, [pc, #40]	@ (800c710 <McpsConfirm+0x70>)
 800c6e8:	681b      	ldr	r3, [r3, #0]
 800c6ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c6ec:	2b00      	cmp	r3, #0
 800c6ee:	d004      	beq.n	800c6fa <McpsConfirm+0x5a>
    {
        LmHandlerCallbacks->OnTxData( &TxParams );
 800c6f0:	4b07      	ldr	r3, [pc, #28]	@ (800c710 <McpsConfirm+0x70>)
 800c6f2:	681b      	ldr	r3, [r3, #0]
 800c6f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c6f6:	4805      	ldr	r0, [pc, #20]	@ (800c70c <McpsConfirm+0x6c>)
 800c6f8:	4798      	blx	r3
    }

    LmHandlerPackagesNotify( PACKAGE_MCPS_CONFIRM, mcpsConfirm );
 800c6fa:	6879      	ldr	r1, [r7, #4]
 800c6fc:	2000      	movs	r0, #0
 800c6fe:	f000 f9eb 	bl	800cad8 <LmHandlerPackagesNotify>
}
 800c702:	bf00      	nop
 800c704:	3708      	adds	r7, #8
 800c706:	46bd      	mov	sp, r7
 800c708:	bd80      	pop	{r7, pc}
 800c70a:	bf00      	nop
 800c70c:	2000008c 	.word	0x2000008c
 800c710:	200004d8 	.word	0x200004d8

0800c714 <McpsIndication>:

static void McpsIndication( McpsIndication_t *mcpsIndication, LoRaMacRxStatus_t *rxStatus )
{
 800c714:	b580      	push	{r7, lr}
 800c716:	b088      	sub	sp, #32
 800c718:	af00      	add	r7, sp, #0
 800c71a:	6078      	str	r0, [r7, #4]
 800c71c:	6039      	str	r1, [r7, #0]
    LmHandlerAppData_t appData;
    DeviceClass_t deviceClass = CLASS_A;
 800c71e:	2300      	movs	r3, #0
 800c720:	75fb      	strb	r3, [r7, #23]
    RxParams.IsMcpsIndication = 1;
 800c722:	4b32      	ldr	r3, [pc, #200]	@ (800c7ec <McpsIndication+0xd8>)
 800c724:	2201      	movs	r2, #1
 800c726:	701a      	strb	r2, [r3, #0]
    RxParams.Status = mcpsIndication->Status;
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	785a      	ldrb	r2, [r3, #1]
 800c72c:	4b2f      	ldr	r3, [pc, #188]	@ (800c7ec <McpsIndication+0xd8>)
 800c72e:	705a      	strb	r2, [r3, #1]

    if( RxParams.Status != LORAMAC_EVENT_INFO_STATUS_OK )
 800c730:	4b2e      	ldr	r3, [pc, #184]	@ (800c7ec <McpsIndication+0xd8>)
 800c732:	785b      	ldrb	r3, [r3, #1]
 800c734:	2b00      	cmp	r3, #0
 800c736:	d155      	bne.n	800c7e4 <McpsIndication+0xd0>
    {
        return;
    }

    RxParams.Datarate = mcpsIndication->RxDatarate;
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	791b      	ldrb	r3, [r3, #4]
 800c73c:	b25a      	sxtb	r2, r3
 800c73e:	4b2b      	ldr	r3, [pc, #172]	@ (800c7ec <McpsIndication+0xd8>)
 800c740:	721a      	strb	r2, [r3, #8]
    RxParams.Rssi = rxStatus->Rssi;
 800c742:	683b      	ldr	r3, [r7, #0]
 800c744:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c748:	b25a      	sxtb	r2, r3
 800c74a:	4b28      	ldr	r3, [pc, #160]	@ (800c7ec <McpsIndication+0xd8>)
 800c74c:	725a      	strb	r2, [r3, #9]
    RxParams.Snr = rxStatus->Snr;
 800c74e:	683b      	ldr	r3, [r7, #0]
 800c750:	f993 2002 	ldrsb.w	r2, [r3, #2]
 800c754:	4b25      	ldr	r3, [pc, #148]	@ (800c7ec <McpsIndication+0xd8>)
 800c756:	729a      	strb	r2, [r3, #10]
    RxParams.RxSlot = rxStatus->RxSlot;
 800c758:	683b      	ldr	r3, [r7, #0]
 800c75a:	78da      	ldrb	r2, [r3, #3]
 800c75c:	4b23      	ldr	r3, [pc, #140]	@ (800c7ec <McpsIndication+0xd8>)
 800c75e:	741a      	strb	r2, [r3, #16]
    RxParams.DownlinkCounter = mcpsIndication->DownLinkCounter;
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	691b      	ldr	r3, [r3, #16]
 800c764:	4a21      	ldr	r2, [pc, #132]	@ (800c7ec <McpsIndication+0xd8>)
 800c766:	60d3      	str	r3, [r2, #12]

    appData.Port = mcpsIndication->Port;
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	78db      	ldrb	r3, [r3, #3]
 800c76c:	763b      	strb	r3, [r7, #24]
    appData.BufferSize = mcpsIndication->BufferSize;
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	7b1b      	ldrb	r3, [r3, #12]
 800c772:	767b      	strb	r3, [r7, #25]
    appData.Buffer = mcpsIndication->Buffer;
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	689b      	ldr	r3, [r3, #8]
 800c778:	61fb      	str	r3, [r7, #28]

    if( LmHandlerCallbacks->OnRxData != NULL )
 800c77a:	4b1d      	ldr	r3, [pc, #116]	@ (800c7f0 <McpsIndication+0xdc>)
 800c77c:	681b      	ldr	r3, [r3, #0]
 800c77e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c780:	2b00      	cmp	r3, #0
 800c782:	d007      	beq.n	800c794 <McpsIndication+0x80>
    {
        LmHandlerCallbacks->OnRxData( &appData, &RxParams );
 800c784:	4b1a      	ldr	r3, [pc, #104]	@ (800c7f0 <McpsIndication+0xdc>)
 800c786:	681b      	ldr	r3, [r3, #0]
 800c788:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c78a:	f107 0218 	add.w	r2, r7, #24
 800c78e:	4917      	ldr	r1, [pc, #92]	@ (800c7ec <McpsIndication+0xd8>)
 800c790:	4610      	mov	r0, r2
 800c792:	4798      	blx	r3
    }

    if( ( LmHandlerCallbacks->OnSysTimeUpdate != NULL ) && ( mcpsIndication->DeviceTimeAnsReceived == true ) )
 800c794:	4b16      	ldr	r3, [pc, #88]	@ (800c7f0 <McpsIndication+0xdc>)
 800c796:	681b      	ldr	r3, [r3, #0]
 800c798:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c79a:	2b00      	cmp	r3, #0
 800c79c:	d007      	beq.n	800c7ae <McpsIndication+0x9a>
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	7e1b      	ldrb	r3, [r3, #24]
 800c7a2:	2b00      	cmp	r3, #0
 800c7a4:	d003      	beq.n	800c7ae <McpsIndication+0x9a>
    {
        LmHandlerCallbacks->OnSysTimeUpdate( );
 800c7a6:	4b12      	ldr	r3, [pc, #72]	@ (800c7f0 <McpsIndication+0xdc>)
 800c7a8:	681b      	ldr	r3, [r3, #0]
 800c7aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c7ac:	4798      	blx	r3
    }
    /* Call packages RxProcess function */
    LmHandlerPackagesNotify( PACKAGE_MCPS_INDICATION, mcpsIndication );
 800c7ae:	6879      	ldr	r1, [r7, #4]
 800c7b0:	2001      	movs	r0, #1
 800c7b2:	f000 f991 	bl	800cad8 <LmHandlerPackagesNotify>

    LmHandlerGetCurrentClass( &deviceClass );
 800c7b6:	f107 0317 	add.w	r3, r7, #23
 800c7ba:	4618      	mov	r0, r3
 800c7bc:	f7ff ff10 	bl	800c5e0 <LmHandlerGetCurrentClass>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    if( mcpsIndication->IsUplinkTxPending != 0 )
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	795b      	ldrb	r3, [r3, #5]
 800c7c4:	2b00      	cmp	r3, #0
 800c7c6:	d00e      	beq.n	800c7e6 <McpsIndication+0xd2>
    {
        /* The server signals that it has pending data to be sent. */
        /* We schedule an uplink as soon as possible to flush the server. */

        /* Send an empty message */
        LmHandlerAppData_t appData =
 800c7c8:	2300      	movs	r3, #0
 800c7ca:	733b      	strb	r3, [r7, #12]
 800c7cc:	2300      	movs	r3, #0
 800c7ce:	737b      	strb	r3, [r7, #13]
 800c7d0:	2300      	movs	r3, #0
 800c7d2:	613b      	str	r3, [r7, #16]
        {
            .Buffer = NULL,
            .BufferSize = 0,
            .Port = 0
        };
        LmHandlerSend( &appData, LORAMAC_HANDLER_UNCONFIRMED_MSG, true );
 800c7d4:	f107 030c 	add.w	r3, r7, #12
 800c7d8:	2201      	movs	r2, #1
 800c7da:	2100      	movs	r1, #0
 800c7dc:	4618      	mov	r0, r3
 800c7de:	f7ff fd71 	bl	800c2c4 <LmHandlerSend>
 800c7e2:	e000      	b.n	800c7e6 <McpsIndication+0xd2>
        return;
 800c7e4:	bf00      	nop
        /* The server signals that it has pending data to be sent. */
        /* We schedule an uplink as soon as possible to flush the server. */
        IsUplinkTxPending = true;
    }
#endif /* LORAMAC_VERSION */
}
 800c7e6:	3720      	adds	r7, #32
 800c7e8:	46bd      	mov	sp, r7
 800c7ea:	bd80      	pop	{r7, pc}
 800c7ec:	200000a8 	.word	0x200000a8
 800c7f0:	200004d8 	.word	0x200004d8

0800c7f4 <MlmeConfirm>:

static void MlmeConfirm( MlmeConfirm_t *mlmeConfirm )
{
 800c7f4:	b580      	push	{r7, lr}
 800c7f6:	b08c      	sub	sp, #48	@ 0x30
 800c7f8:	af00      	add	r7, sp, #0
 800c7fa:	6078      	str	r0, [r7, #4]
    TxParams.IsMcpsConfirm = 0;
 800c7fc:	4b4a      	ldr	r3, [pc, #296]	@ (800c928 <MlmeConfirm+0x134>)
 800c7fe:	2200      	movs	r2, #0
 800c800:	701a      	strb	r2, [r3, #0]
    TxParams.Status = mlmeConfirm->Status;
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	785a      	ldrb	r2, [r3, #1]
 800c806:	4b48      	ldr	r3, [pc, #288]	@ (800c928 <MlmeConfirm+0x134>)
 800c808:	705a      	strb	r2, [r3, #1]
    if( LmHandlerCallbacks->OnTxData != NULL )
 800c80a:	4b48      	ldr	r3, [pc, #288]	@ (800c92c <MlmeConfirm+0x138>)
 800c80c:	681b      	ldr	r3, [r3, #0]
 800c80e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c810:	2b00      	cmp	r3, #0
 800c812:	d004      	beq.n	800c81e <MlmeConfirm+0x2a>
    {
        LmHandlerCallbacks->OnTxData( &TxParams );
 800c814:	4b45      	ldr	r3, [pc, #276]	@ (800c92c <MlmeConfirm+0x138>)
 800c816:	681b      	ldr	r3, [r3, #0]
 800c818:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c81a:	4843      	ldr	r0, [pc, #268]	@ (800c928 <MlmeConfirm+0x134>)
 800c81c:	4798      	blx	r3
    }

    LmHandlerPackagesNotify( PACKAGE_MLME_CONFIRM, mlmeConfirm );
 800c81e:	6879      	ldr	r1, [r7, #4]
 800c820:	2002      	movs	r0, #2
 800c822:	f000 f959 	bl	800cad8 <LmHandlerPackagesNotify>

    switch( mlmeConfirm->MlmeRequest )
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	781b      	ldrb	r3, [r3, #0]
 800c82a:	3b01      	subs	r3, #1
 800c82c:	2b0c      	cmp	r3, #12
 800c82e:	d874      	bhi.n	800c91a <MlmeConfirm+0x126>
 800c830:	a201      	add	r2, pc, #4	@ (adr r2, 800c838 <MlmeConfirm+0x44>)
 800c832:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c836:	bf00      	nop
 800c838:	0800c86d 	.word	0x0800c86d
 800c83c:	0800c91b 	.word	0x0800c91b
 800c840:	0800c91b 	.word	0x0800c91b
 800c844:	0800c91b 	.word	0x0800c91b
 800c848:	0800c8e9 	.word	0x0800c8e9
 800c84c:	0800c91b 	.word	0x0800c91b
 800c850:	0800c91b 	.word	0x0800c91b
 800c854:	0800c91b 	.word	0x0800c91b
 800c858:	0800c91b 	.word	0x0800c91b
 800c85c:	0800c91b 	.word	0x0800c91b
 800c860:	0800c91b 	.word	0x0800c91b
 800c864:	0800c901 	.word	0x0800c901
 800c868:	0800c91b 	.word	0x0800c91b
    {
        case MLME_JOIN:
            {
                MibRequestConfirm_t mibReq;
                mibReq.Type = MIB_DEV_ADDR;
 800c86c:	2306      	movs	r3, #6
 800c86e:	723b      	strb	r3, [r7, #8]
                LoRaMacMibGetRequestConfirm( &mibReq );
 800c870:	f107 0308 	add.w	r3, r7, #8
 800c874:	4618      	mov	r0, r3
 800c876:	f004 faff 	bl	8010e78 <LoRaMacMibGetRequestConfirm>
                if( SecureElementSetDevAddr( JoinParams.Mode, mibReq.Param.DevAddr ) == SECURE_ELEMENT_SUCCESS )
 800c87a:	4b2d      	ldr	r3, [pc, #180]	@ (800c930 <MlmeConfirm+0x13c>)
 800c87c:	79db      	ldrb	r3, [r3, #7]
 800c87e:	68fa      	ldr	r2, [r7, #12]
 800c880:	4611      	mov	r1, r2
 800c882:	4618      	mov	r0, r3
 800c884:	f7ff fb00 	bl	800be88 <SecureElementSetDevAddr>
 800c888:	4603      	mov	r3, r0
 800c88a:	2b00      	cmp	r3, #0
 800c88c:	d102      	bne.n	800c894 <MlmeConfirm+0xa0>
                {
                    CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 800c88e:	68fb      	ldr	r3, [r7, #12]
 800c890:	4a28      	ldr	r2, [pc, #160]	@ (800c934 <MlmeConfirm+0x140>)
 800c892:	6153      	str	r3, [r2, #20]
                }
                LmHandlerGetTxDatarate( &JoinParams.Datarate );
 800c894:	4828      	ldr	r0, [pc, #160]	@ (800c938 <MlmeConfirm+0x144>)
 800c896:	f7ff fec3 	bl	800c620 <LmHandlerGetTxDatarate>
                LmHandlerGetTxPower( &JoinParams.TxPower );
 800c89a:	4828      	ldr	r0, [pc, #160]	@ (800c93c <MlmeConfirm+0x148>)
 800c89c:	f000 fa2a 	bl	800ccf4 <LmHandlerGetTxPower>

                if( TxParams.Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800c8a0:	4b21      	ldr	r3, [pc, #132]	@ (800c928 <MlmeConfirm+0x134>)
 800c8a2:	785b      	ldrb	r3, [r3, #1]
 800c8a4:	2b00      	cmp	r3, #0
 800c8a6:	d108      	bne.n	800c8ba <MlmeConfirm+0xc6>
                {
                    /* Status is OK, node has joined the network */
                    JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 800c8a8:	4b21      	ldr	r3, [pc, #132]	@ (800c930 <MlmeConfirm+0x13c>)
 800c8aa:	2200      	movs	r2, #0
 800c8ac:	719a      	strb	r2, [r3, #6]
                    LmHandlerRequestClass( LmHandlerParams.DefaultClass );
 800c8ae:	4b24      	ldr	r3, [pc, #144]	@ (800c940 <MlmeConfirm+0x14c>)
 800c8b0:	785b      	ldrb	r3, [r3, #1]
 800c8b2:	4618      	mov	r0, r3
 800c8b4:	f7ff fe0c 	bl	800c4d0 <LmHandlerRequestClass>
 800c8b8:	e002      	b.n	800c8c0 <MlmeConfirm+0xcc>
                }
                else
                {
                    /* Join was not successful. Try to join again */
                    JoinParams.Status = LORAMAC_HANDLER_ERROR;
 800c8ba:	4b1d      	ldr	r3, [pc, #116]	@ (800c930 <MlmeConfirm+0x13c>)
 800c8bc:	22ff      	movs	r2, #255	@ 0xff
 800c8be:	719a      	strb	r2, [r3, #6]
                }
                /* Notify upper layer */
                if( LmHandlerCallbacks->OnJoinRequest != NULL )
 800c8c0:	4b1a      	ldr	r3, [pc, #104]	@ (800c92c <MlmeConfirm+0x138>)
 800c8c2:	681b      	ldr	r3, [r3, #0]
 800c8c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c8c6:	2b00      	cmp	r3, #0
 800c8c8:	d004      	beq.n	800c8d4 <MlmeConfirm+0xe0>
                {
                    LmHandlerCallbacks->OnJoinRequest( &JoinParams );
 800c8ca:	4b18      	ldr	r3, [pc, #96]	@ (800c92c <MlmeConfirm+0x138>)
 800c8cc:	681b      	ldr	r3, [r3, #0]
 800c8ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c8d0:	4817      	ldr	r0, [pc, #92]	@ (800c930 <MlmeConfirm+0x13c>)
 800c8d2:	4798      	blx	r3
                }
                if( TxParams.Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800c8d4:	4b14      	ldr	r3, [pc, #80]	@ (800c928 <MlmeConfirm+0x134>)
 800c8d6:	785b      	ldrb	r3, [r3, #1]
 800c8d8:	2b00      	cmp	r3, #0
 800c8da:	d120      	bne.n	800c91e <MlmeConfirm+0x12a>
                {
                    SecureElementPrintSessionKeys( JoinParams.Mode );
 800c8dc:	4b14      	ldr	r3, [pc, #80]	@ (800c930 <MlmeConfirm+0x13c>)
 800c8de:	79db      	ldrb	r3, [r3, #7]
 800c8e0:	4618      	mov	r0, r3
 800c8e2:	f7ff f863 	bl	800b9ac <SecureElementPrintSessionKeys>
                }
            }
            break;
 800c8e6:	e01a      	b.n	800c91e <MlmeConfirm+0x12a>
        case MLME_LINK_CHECK:
            {
                RxParams.LinkCheck = true;
 800c8e8:	4b16      	ldr	r3, [pc, #88]	@ (800c944 <MlmeConfirm+0x150>)
 800c8ea:	2201      	movs	r2, #1
 800c8ec:	745a      	strb	r2, [r3, #17]
                RxParams.DemodMargin = mlmeConfirm->DemodMargin;
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	7a1a      	ldrb	r2, [r3, #8]
 800c8f2:	4b14      	ldr	r3, [pc, #80]	@ (800c944 <MlmeConfirm+0x150>)
 800c8f4:	749a      	strb	r2, [r3, #18]
                RxParams.NbGateways = mlmeConfirm->NbGateways;
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	7a5a      	ldrb	r2, [r3, #9]
 800c8fa:	4b12      	ldr	r3, [pc, #72]	@ (800c944 <MlmeConfirm+0x150>)
 800c8fc:	74da      	strb	r2, [r3, #19]
            }
            break;
 800c8fe:	e00f      	b.n	800c920 <MlmeConfirm+0x12c>
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
            }
            break;
        case MLME_BEACON_ACQUISITION:
            {
                if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	785b      	ldrb	r3, [r3, #1]
 800c904:	2b00      	cmp	r3, #0
 800c906:	d105      	bne.n	800c914 <MlmeConfirm+0x120>
                {
                    /* Beacon has been acquired */
                    /* Request server for ping slot */
                    LmHandlerPingSlotReq( LmHandlerParams.PingSlotPeriodicity );
 800c908:	4b0d      	ldr	r3, [pc, #52]	@ (800c940 <MlmeConfirm+0x14c>)
 800c90a:	7c1b      	ldrb	r3, [r3, #16]
 800c90c:	4618      	mov	r0, r3
 800c90e:	f7ff fdd3 	bl	800c4b8 <LmHandlerPingSlotReq>
                    /* Beacon not acquired */
                    /* Request Device Time again. */
                    LmHandlerDeviceTimeReq( );
                }
            }
            break;
 800c912:	e005      	b.n	800c920 <MlmeConfirm+0x12c>
                    LmHandlerDeviceTimeReq( );
 800c914:	f7ff fdb4 	bl	800c480 <LmHandlerDeviceTimeReq>
            break;
 800c918:	e002      	b.n	800c920 <MlmeConfirm+0x12c>
                }
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
            }
            break;
        default:
            break;
 800c91a:	bf00      	nop
 800c91c:	e000      	b.n	800c920 <MlmeConfirm+0x12c>
            break;
 800c91e:	bf00      	nop
    }
}
 800c920:	bf00      	nop
 800c922:	3730      	adds	r7, #48	@ 0x30
 800c924:	46bd      	mov	sp, r7
 800c926:	bd80      	pop	{r7, pc}
 800c928:	2000008c 	.word	0x2000008c
 800c92c:	200004d8 	.word	0x200004d8
 800c930:	20000080 	.word	0x20000080
 800c934:	20000494 	.word	0x20000494
 800c938:	20000084 	.word	0x20000084
 800c93c:	20000085 	.word	0x20000085
 800c940:	200004c0 	.word	0x200004c0
 800c944:	200000a8 	.word	0x200000a8

0800c948 <MlmeIndication>:

static void MlmeIndication( MlmeIndication_t *mlmeIndication, LoRaMacRxStatus_t *rxStatus )
{
 800c948:	b580      	push	{r7, lr}
 800c94a:	b082      	sub	sp, #8
 800c94c:	af00      	add	r7, sp, #0
 800c94e:	6078      	str	r0, [r7, #4]
 800c950:	6039      	str	r1, [r7, #0]
    RxParams.IsMcpsIndication = 0;
 800c952:	4b20      	ldr	r3, [pc, #128]	@ (800c9d4 <MlmeIndication+0x8c>)
 800c954:	2200      	movs	r2, #0
 800c956:	701a      	strb	r2, [r3, #0]
    RxParams.Status = mlmeIndication->Status;
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	785a      	ldrb	r2, [r3, #1]
 800c95c:	4b1d      	ldr	r3, [pc, #116]	@ (800c9d4 <MlmeIndication+0x8c>)
 800c95e:	705a      	strb	r2, [r3, #1]
    RxParams.Datarate = mlmeIndication->RxDatarate;
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	789b      	ldrb	r3, [r3, #2]
 800c964:	b25a      	sxtb	r2, r3
 800c966:	4b1b      	ldr	r3, [pc, #108]	@ (800c9d4 <MlmeIndication+0x8c>)
 800c968:	721a      	strb	r2, [r3, #8]
    RxParams.Rssi = rxStatus->Rssi;
 800c96a:	683b      	ldr	r3, [r7, #0]
 800c96c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c970:	b25a      	sxtb	r2, r3
 800c972:	4b18      	ldr	r3, [pc, #96]	@ (800c9d4 <MlmeIndication+0x8c>)
 800c974:	725a      	strb	r2, [r3, #9]
    RxParams.Snr = rxStatus->Snr;
 800c976:	683b      	ldr	r3, [r7, #0]
 800c978:	f993 2002 	ldrsb.w	r2, [r3, #2]
 800c97c:	4b15      	ldr	r3, [pc, #84]	@ (800c9d4 <MlmeIndication+0x8c>)
 800c97e:	729a      	strb	r2, [r3, #10]
    RxParams.RxSlot = rxStatus->RxSlot;
 800c980:	683b      	ldr	r3, [r7, #0]
 800c982:	78da      	ldrb	r2, [r3, #3]
 800c984:	4b13      	ldr	r3, [pc, #76]	@ (800c9d4 <MlmeIndication+0x8c>)
 800c986:	741a      	strb	r2, [r3, #16]
    RxParams.DownlinkCounter = mlmeIndication->DownLinkCounter;
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	685b      	ldr	r3, [r3, #4]
 800c98c:	4a11      	ldr	r2, [pc, #68]	@ (800c9d4 <MlmeIndication+0x8c>)
 800c98e:	60d3      	str	r3, [r2, #12]
    if( ( LmHandlerCallbacks->OnRxData != NULL ) && ( mlmeIndication->MlmeIndication != MLME_BEACON ) && ( mlmeIndication->MlmeIndication != MLME_BEACON_LOST ) )
 800c990:	4b11      	ldr	r3, [pc, #68]	@ (800c9d8 <MlmeIndication+0x90>)
 800c992:	681b      	ldr	r3, [r3, #0]
 800c994:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c996:	2b00      	cmp	r3, #0
 800c998:	d00d      	beq.n	800c9b6 <MlmeIndication+0x6e>
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	781b      	ldrb	r3, [r3, #0]
 800c99e:	2b0b      	cmp	r3, #11
 800c9a0:	d009      	beq.n	800c9b6 <MlmeIndication+0x6e>
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	781b      	ldrb	r3, [r3, #0]
 800c9a6:	2b0f      	cmp	r3, #15
 800c9a8:	d005      	beq.n	800c9b6 <MlmeIndication+0x6e>
    {
        LmHandlerCallbacks->OnRxData( NULL, &RxParams );
 800c9aa:	4b0b      	ldr	r3, [pc, #44]	@ (800c9d8 <MlmeIndication+0x90>)
 800c9ac:	681b      	ldr	r3, [r3, #0]
 800c9ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c9b0:	4908      	ldr	r1, [pc, #32]	@ (800c9d4 <MlmeIndication+0x8c>)
 800c9b2:	2000      	movs	r0, #0
 800c9b4:	4798      	blx	r3
    }

    /* Call packages RxProcess function */
    LmHandlerPackagesNotify( PACKAGE_MLME_INDICATION, mlmeIndication );
 800c9b6:	6879      	ldr	r1, [r7, #4]
 800c9b8:	2003      	movs	r0, #3
 800c9ba:	f000 f88d 	bl	800cad8 <LmHandlerPackagesNotify>

    switch( mlmeIndication->MlmeIndication )
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	781b      	ldrb	r3, [r3, #0]
 800c9c2:	2b0b      	cmp	r3, #11
 800c9c4:	d001      	beq.n	800c9ca <MlmeIndication+0x82>
 800c9c6:	2b0f      	cmp	r3, #15
                }
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
            }
            break;
        default:
            break;
 800c9c8:	e000      	b.n	800c9cc <MlmeIndication+0x84>
            break;
 800c9ca:	bf00      	nop
    }
}
 800c9cc:	bf00      	nop
 800c9ce:	3708      	adds	r7, #8
 800c9d0:	46bd      	mov	sp, r7
 800c9d2:	bd80      	pop	{r7, pc}
 800c9d4:	200000a8 	.word	0x200000a8
 800c9d8:	200004d8 	.word	0x200004d8

0800c9dc <LmHandlerPackageRegister>:
 * PACKAGES HANDLING
 *=============================================================================
 */

LmHandlerErrorStatus_t LmHandlerPackageRegister( uint8_t id, void *params )
{
 800c9dc:	b580      	push	{r7, lr}
 800c9de:	b084      	sub	sp, #16
 800c9e0:	af00      	add	r7, sp, #0
 800c9e2:	4603      	mov	r3, r0
 800c9e4:	6039      	str	r1, [r7, #0]
 800c9e6:	71fb      	strb	r3, [r7, #7]
    LmhPackage_t *package = NULL;
 800c9e8:	2300      	movs	r3, #0
 800c9ea:	60fb      	str	r3, [r7, #12]
    switch( id )
 800c9ec:	79fb      	ldrb	r3, [r7, #7]
 800c9ee:	2b00      	cmp	r3, #0
 800c9f0:	d104      	bne.n	800c9fc <LmHandlerPackageRegister+0x20>
    {
        case PACKAGE_ID_COMPLIANCE:
            {
                package = LmhpCompliancePackageFactory( );
 800c9f2:	f000 f9b9 	bl	800cd68 <LmhpCompliancePackageFactory>
 800c9f6:	4603      	mov	r3, r0
 800c9f8:	60fb      	str	r3, [r7, #12]
                break;
 800c9fa:	e00d      	b.n	800ca18 <LmHandlerPackageRegister+0x3c>
            }
        default:
            {
                if( LORAMAC_HANDLER_SUCCESS != LmhpPackagesRegister( id, &package ) )
 800c9fc:	f107 020c 	add.w	r2, r7, #12
 800ca00:	79fb      	ldrb	r3, [r7, #7]
 800ca02:	4611      	mov	r1, r2
 800ca04:	4618      	mov	r0, r3
 800ca06:	f000 fcc5 	bl	800d394 <LmhpPackagesRegister>
 800ca0a:	4603      	mov	r3, r0
 800ca0c:	2b00      	cmp	r3, #0
 800ca0e:	d002      	beq.n	800ca16 <LmHandlerPackageRegister+0x3a>
                {
                    return LORAMAC_HANDLER_ERROR;
 800ca10:	f04f 33ff 	mov.w	r3, #4294967295
 800ca14:	e031      	b.n	800ca7a <LmHandlerPackageRegister+0x9e>
                }
                break;
 800ca16:	bf00      	nop
            }
    }
    if( package != NULL )
 800ca18:	68fb      	ldr	r3, [r7, #12]
 800ca1a:	2b00      	cmp	r3, #0
 800ca1c:	d02b      	beq.n	800ca76 <LmHandlerPackageRegister+0x9a>
    {
        LmHandlerPackages[id] = package;
 800ca1e:	79fb      	ldrb	r3, [r7, #7]
 800ca20:	68fa      	ldr	r2, [r7, #12]
 800ca22:	4918      	ldr	r1, [pc, #96]	@ (800ca84 <LmHandlerPackageRegister+0xa8>)
 800ca24:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        LmHandlerPackages[id]->OnJoinRequest = LmHandlerJoin;
 800ca28:	79fb      	ldrb	r3, [r7, #7]
 800ca2a:	4a16      	ldr	r2, [pc, #88]	@ (800ca84 <LmHandlerPackageRegister+0xa8>)
 800ca2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ca30:	4a15      	ldr	r2, [pc, #84]	@ (800ca88 <LmHandlerPackageRegister+0xac>)
 800ca32:	62da      	str	r2, [r3, #44]	@ 0x2c
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        LmHandlerPackages[id]->OnSendRequest = LmHandlerSend;
 800ca34:	79fb      	ldrb	r3, [r7, #7]
 800ca36:	4a13      	ldr	r2, [pc, #76]	@ (800ca84 <LmHandlerPackageRegister+0xa8>)
 800ca38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ca3c:	4a13      	ldr	r2, [pc, #76]	@ (800ca8c <LmHandlerPackageRegister+0xb0>)
 800ca3e:	631a      	str	r2, [r3, #48]	@ 0x30
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        LmHandlerPackages[id]->OnSysTimeUpdate = LmHandlerCallbacks->OnSysTimeUpdate;
        LmHandlerPackages[id]->OnSystemReset = LmHandlerCallbacks->OnSystemReset;
#endif /* LORAMAC_VERSION */
        LmHandlerPackages[id]->OnDeviceTimeRequest = LmHandlerDeviceTimeReq;
 800ca40:	79fb      	ldrb	r3, [r7, #7]
 800ca42:	4a10      	ldr	r2, [pc, #64]	@ (800ca84 <LmHandlerPackageRegister+0xa8>)
 800ca44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ca48:	4a11      	ldr	r2, [pc, #68]	@ (800ca90 <LmHandlerPackageRegister+0xb4>)
 800ca4a:	635a      	str	r2, [r3, #52]	@ 0x34
        LmHandlerPackages[id]->OnPackageProcessEvent = LmHandlerCallbacks->OnMacProcess;
 800ca4c:	4b11      	ldr	r3, [pc, #68]	@ (800ca94 <LmHandlerPackageRegister+0xb8>)
 800ca4e:	681a      	ldr	r2, [r3, #0]
 800ca50:	79fb      	ldrb	r3, [r7, #7]
 800ca52:	490c      	ldr	r1, [pc, #48]	@ (800ca84 <LmHandlerPackageRegister+0xa8>)
 800ca54:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800ca58:	6992      	ldr	r2, [r2, #24]
 800ca5a:	619a      	str	r2, [r3, #24]
        LmHandlerPackages[id]->Init( params, AppData.Buffer, AppData.BufferSize );
 800ca5c:	79fb      	ldrb	r3, [r7, #7]
 800ca5e:	4a09      	ldr	r2, [pc, #36]	@ (800ca84 <LmHandlerPackageRegister+0xa8>)
 800ca60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ca64:	685b      	ldr	r3, [r3, #4]
 800ca66:	4a0c      	ldr	r2, [pc, #48]	@ (800ca98 <LmHandlerPackageRegister+0xbc>)
 800ca68:	6851      	ldr	r1, [r2, #4]
 800ca6a:	4a0b      	ldr	r2, [pc, #44]	@ (800ca98 <LmHandlerPackageRegister+0xbc>)
 800ca6c:	7852      	ldrb	r2, [r2, #1]
 800ca6e:	6838      	ldr	r0, [r7, #0]
 800ca70:	4798      	blx	r3

        return LORAMAC_HANDLER_SUCCESS;
 800ca72:	2300      	movs	r3, #0
 800ca74:	e001      	b.n	800ca7a <LmHandlerPackageRegister+0x9e>
    }
    else
    {
        return LORAMAC_HANDLER_ERROR;
 800ca76:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 800ca7a:	4618      	mov	r0, r3
 800ca7c:	3710      	adds	r7, #16
 800ca7e:	46bd      	mov	sp, r7
 800ca80:	bd80      	pop	{r7, pc}
 800ca82:	bf00      	nop
 800ca84:	200004ac 	.word	0x200004ac
 800ca88:	0800c145 	.word	0x0800c145
 800ca8c:	0800c2c5 	.word	0x0800c2c5
 800ca90:	0800c481 	.word	0x0800c481
 800ca94:	200004d8 	.word	0x200004d8
 800ca98:	200000bc 	.word	0x200000bc

0800ca9c <LmHandlerPackageIsInitialized>:

static bool LmHandlerPackageIsInitialized( uint8_t id )
{
 800ca9c:	b580      	push	{r7, lr}
 800ca9e:	b082      	sub	sp, #8
 800caa0:	af00      	add	r7, sp, #0
 800caa2:	4603      	mov	r3, r0
 800caa4:	71fb      	strb	r3, [r7, #7]
    if( ( id < PKG_MAX_NUMBER ) && ( LmHandlerPackages[id]->IsInitialized != NULL ) )
 800caa6:	79fb      	ldrb	r3, [r7, #7]
 800caa8:	2b04      	cmp	r3, #4
 800caaa:	d80e      	bhi.n	800caca <LmHandlerPackageIsInitialized+0x2e>
 800caac:	79fb      	ldrb	r3, [r7, #7]
 800caae:	4a09      	ldr	r2, [pc, #36]	@ (800cad4 <LmHandlerPackageIsInitialized+0x38>)
 800cab0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cab4:	689b      	ldr	r3, [r3, #8]
 800cab6:	2b00      	cmp	r3, #0
 800cab8:	d007      	beq.n	800caca <LmHandlerPackageIsInitialized+0x2e>
    {
        return LmHandlerPackages[id]->IsInitialized( );
 800caba:	79fb      	ldrb	r3, [r7, #7]
 800cabc:	4a05      	ldr	r2, [pc, #20]	@ (800cad4 <LmHandlerPackageIsInitialized+0x38>)
 800cabe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cac2:	689b      	ldr	r3, [r3, #8]
 800cac4:	4798      	blx	r3
 800cac6:	4603      	mov	r3, r0
 800cac8:	e000      	b.n	800cacc <LmHandlerPackageIsInitialized+0x30>
    }
    else
    {
        return false;
 800caca:	2300      	movs	r3, #0
    }
}
 800cacc:	4618      	mov	r0, r3
 800cace:	3708      	adds	r7, #8
 800cad0:	46bd      	mov	sp, r7
 800cad2:	bd80      	pop	{r7, pc}
 800cad4:	200004ac 	.word	0x200004ac

0800cad8 <LmHandlerPackagesNotify>:

static void LmHandlerPackagesNotify( PackageNotifyTypes_t notifyType, void *params )
{
 800cad8:	b580      	push	{r7, lr}
 800cada:	b084      	sub	sp, #16
 800cadc:	af00      	add	r7, sp, #0
 800cade:	4603      	mov	r3, r0
 800cae0:	6039      	str	r1, [r7, #0]
 800cae2:	71fb      	strb	r3, [r7, #7]
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800cae4:	2300      	movs	r3, #0
 800cae6:	73fb      	strb	r3, [r7, #15]
 800cae8:	e07c      	b.n	800cbe4 <LmHandlerPackagesNotify+0x10c>
    {
        if( LmHandlerPackages[i] != NULL )
 800caea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800caee:	4a42      	ldr	r2, [pc, #264]	@ (800cbf8 <LmHandlerPackagesNotify+0x120>)
 800caf0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800caf4:	2b00      	cmp	r3, #0
 800caf6:	d06f      	beq.n	800cbd8 <LmHandlerPackagesNotify+0x100>
        {
            switch( notifyType )
 800caf8:	79fb      	ldrb	r3, [r7, #7]
 800cafa:	2b03      	cmp	r3, #3
 800cafc:	d863      	bhi.n	800cbc6 <LmHandlerPackagesNotify+0xee>
 800cafe:	a201      	add	r2, pc, #4	@ (adr r2, 800cb04 <LmHandlerPackagesNotify+0x2c>)
 800cb00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb04:	0800cb15 	.word	0x0800cb15
 800cb08:	0800cb37 	.word	0x0800cb37
 800cb0c:	0800cb83 	.word	0x0800cb83
 800cb10:	0800cba5 	.word	0x0800cba5
            {
                case PACKAGE_MCPS_CONFIRM:
                    {
                        if( LmHandlerPackages[i]->OnMcpsConfirmProcess != NULL )
 800cb14:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cb18:	4a37      	ldr	r2, [pc, #220]	@ (800cbf8 <LmHandlerPackagesNotify+0x120>)
 800cb1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cb1e:	69db      	ldr	r3, [r3, #28]
 800cb20:	2b00      	cmp	r3, #0
 800cb22:	d052      	beq.n	800cbca <LmHandlerPackagesNotify+0xf2>
                        {
                            LmHandlerPackages[i]->OnMcpsConfirmProcess( ( McpsConfirm_t * ) params );
 800cb24:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cb28:	4a33      	ldr	r2, [pc, #204]	@ (800cbf8 <LmHandlerPackagesNotify+0x120>)
 800cb2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cb2e:	69db      	ldr	r3, [r3, #28]
 800cb30:	6838      	ldr	r0, [r7, #0]
 800cb32:	4798      	blx	r3
                        }
                        break;
 800cb34:	e049      	b.n	800cbca <LmHandlerPackagesNotify+0xf2>
                    }
                case PACKAGE_MCPS_INDICATION:
                    {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
                        if( ( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL ) &&
 800cb36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cb3a:	4a2f      	ldr	r2, [pc, #188]	@ (800cbf8 <LmHandlerPackagesNotify+0x120>)
 800cb3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cb40:	6a1b      	ldr	r3, [r3, #32]
 800cb42:	2b00      	cmp	r3, #0
 800cb44:	d043      	beq.n	800cbce <LmHandlerPackagesNotify+0xf6>
                            ( ( LmHandlerPackages[i]->Port == ( ( McpsIndication_t * )params )->Port ) ||
 800cb46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cb4a:	4a2b      	ldr	r2, [pc, #172]	@ (800cbf8 <LmHandlerPackagesNotify+0x120>)
 800cb4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cb50:	781a      	ldrb	r2, [r3, #0]
 800cb52:	683b      	ldr	r3, [r7, #0]
 800cb54:	78db      	ldrb	r3, [r3, #3]
                        if( ( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL ) &&
 800cb56:	429a      	cmp	r2, r3
 800cb58:	d00a      	beq.n	800cb70 <LmHandlerPackagesNotify+0x98>
                            ( ( LmHandlerPackages[i]->Port == ( ( McpsIndication_t * )params )->Port ) ||
 800cb5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cb5e:	2b00      	cmp	r3, #0
 800cb60:	d135      	bne.n	800cbce <LmHandlerPackagesNotify+0xf6>
                              ( ( i == PACKAGE_ID_COMPLIANCE ) && ( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning() ) ) ) )
 800cb62:	4b25      	ldr	r3, [pc, #148]	@ (800cbf8 <LmHandlerPackagesNotify+0x120>)
 800cb64:	681b      	ldr	r3, [r3, #0]
 800cb66:	68db      	ldr	r3, [r3, #12]
 800cb68:	4798      	blx	r3
 800cb6a:	4603      	mov	r3, r0
 800cb6c:	2b00      	cmp	r3, #0
 800cb6e:	d02e      	beq.n	800cbce <LmHandlerPackagesNotify+0xf6>
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                        if( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL )
#endif /* LORAMAC_VERSION */
                        {
                            LmHandlerPackages[i]->OnMcpsIndicationProcess( ( McpsIndication_t * )params );
 800cb70:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cb74:	4a20      	ldr	r2, [pc, #128]	@ (800cbf8 <LmHandlerPackagesNotify+0x120>)
 800cb76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cb7a:	6a1b      	ldr	r3, [r3, #32]
 800cb7c:	6838      	ldr	r0, [r7, #0]
 800cb7e:	4798      	blx	r3
                        }
                        break;
 800cb80:	e025      	b.n	800cbce <LmHandlerPackagesNotify+0xf6>
                    }
                case PACKAGE_MLME_CONFIRM:
                    {
                        if( LmHandlerPackages[i]->OnMlmeConfirmProcess != NULL )
 800cb82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cb86:	4a1c      	ldr	r2, [pc, #112]	@ (800cbf8 <LmHandlerPackagesNotify+0x120>)
 800cb88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cb8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cb8e:	2b00      	cmp	r3, #0
 800cb90:	d01f      	beq.n	800cbd2 <LmHandlerPackagesNotify+0xfa>
                        {
                            LmHandlerPackages[i]->OnMlmeConfirmProcess( ( MlmeConfirm_t * )params );
 800cb92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cb96:	4a18      	ldr	r2, [pc, #96]	@ (800cbf8 <LmHandlerPackagesNotify+0x120>)
 800cb98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cb9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cb9e:	6838      	ldr	r0, [r7, #0]
 800cba0:	4798      	blx	r3
                        }
                        break;
 800cba2:	e016      	b.n	800cbd2 <LmHandlerPackagesNotify+0xfa>
                    }
                case PACKAGE_MLME_INDICATION:
                    {
                        if( LmHandlerPackages[i]->OnMlmeIndicationProcess != NULL )
 800cba4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cba8:	4a13      	ldr	r2, [pc, #76]	@ (800cbf8 <LmHandlerPackagesNotify+0x120>)
 800cbaa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cbae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cbb0:	2b00      	cmp	r3, #0
 800cbb2:	d010      	beq.n	800cbd6 <LmHandlerPackagesNotify+0xfe>
                        {
                            LmHandlerPackages[i]->OnMlmeIndicationProcess( params );
 800cbb4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cbb8:	4a0f      	ldr	r2, [pc, #60]	@ (800cbf8 <LmHandlerPackagesNotify+0x120>)
 800cbba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cbbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cbc0:	6838      	ldr	r0, [r7, #0]
 800cbc2:	4798      	blx	r3
                        }
                        break;
 800cbc4:	e007      	b.n	800cbd6 <LmHandlerPackagesNotify+0xfe>
                    }
                default:
                    {
                        break;
 800cbc6:	bf00      	nop
 800cbc8:	e006      	b.n	800cbd8 <LmHandlerPackagesNotify+0x100>
                        break;
 800cbca:	bf00      	nop
 800cbcc:	e004      	b.n	800cbd8 <LmHandlerPackagesNotify+0x100>
                        break;
 800cbce:	bf00      	nop
 800cbd0:	e002      	b.n	800cbd8 <LmHandlerPackagesNotify+0x100>
                        break;
 800cbd2:	bf00      	nop
 800cbd4:	e000      	b.n	800cbd8 <LmHandlerPackagesNotify+0x100>
                        break;
 800cbd6:	bf00      	nop
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800cbd8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cbdc:	b2db      	uxtb	r3, r3
 800cbde:	3301      	adds	r3, #1
 800cbe0:	b2db      	uxtb	r3, r3
 800cbe2:	73fb      	strb	r3, [r7, #15]
 800cbe4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cbe8:	2b04      	cmp	r3, #4
 800cbea:	f77f af7e 	ble.w	800caea <LmHandlerPackagesNotify+0x12>
                    }
            }
        }
    }
}
 800cbee:	bf00      	nop
 800cbf0:	bf00      	nop
 800cbf2:	3710      	adds	r7, #16
 800cbf4:	46bd      	mov	sp, r7
 800cbf6:	bd80      	pop	{r7, pc}
 800cbf8:	200004ac 	.word	0x200004ac

0800cbfc <LmHandlerPackageIsTxPending>:

static bool LmHandlerPackageIsTxPending( void )
{
 800cbfc:	b580      	push	{r7, lr}
 800cbfe:	b082      	sub	sp, #8
 800cc00:	af00      	add	r7, sp, #0
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800cc02:	2300      	movs	r3, #0
 800cc04:	71fb      	strb	r3, [r7, #7]
 800cc06:	e01c      	b.n	800cc42 <LmHandlerPackageIsTxPending+0x46>
    {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        if( ( LmHandlerPackages[i] != NULL ) && ( i != PACKAGE_ID_COMPLIANCE ) )
 800cc08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cc0c:	4a11      	ldr	r2, [pc, #68]	@ (800cc54 <LmHandlerPackageIsTxPending+0x58>)
 800cc0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cc12:	2b00      	cmp	r3, #0
 800cc14:	d00f      	beq.n	800cc36 <LmHandlerPackageIsTxPending+0x3a>
 800cc16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cc1a:	2b00      	cmp	r3, #0
 800cc1c:	d00b      	beq.n	800cc36 <LmHandlerPackageIsTxPending+0x3a>
#else
        if( LmHandlerPackages[i] != NULL )
#endif /* LORAMAC_VERSION */
        {
            if( LmHandlerPackages[i]->IsTxPending( ) == true )
 800cc1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cc22:	4a0c      	ldr	r2, [pc, #48]	@ (800cc54 <LmHandlerPackageIsTxPending+0x58>)
 800cc24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cc28:	691b      	ldr	r3, [r3, #16]
 800cc2a:	4798      	blx	r3
 800cc2c:	4603      	mov	r3, r0
 800cc2e:	2b00      	cmp	r3, #0
 800cc30:	d001      	beq.n	800cc36 <LmHandlerPackageIsTxPending+0x3a>
            {
                return true;
 800cc32:	2301      	movs	r3, #1
 800cc34:	e00a      	b.n	800cc4c <LmHandlerPackageIsTxPending+0x50>
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800cc36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cc3a:	b2db      	uxtb	r3, r3
 800cc3c:	3301      	adds	r3, #1
 800cc3e:	b2db      	uxtb	r3, r3
 800cc40:	71fb      	strb	r3, [r7, #7]
 800cc42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cc46:	2b04      	cmp	r3, #4
 800cc48:	ddde      	ble.n	800cc08 <LmHandlerPackageIsTxPending+0xc>
            }
        }
    }
    return false;
 800cc4a:	2300      	movs	r3, #0
}
 800cc4c:	4618      	mov	r0, r3
 800cc4e:	3708      	adds	r7, #8
 800cc50:	46bd      	mov	sp, r7
 800cc52:	bd80      	pop	{r7, pc}
 800cc54:	200004ac 	.word	0x200004ac

0800cc58 <LmHandlerPackagesProcess>:

static void LmHandlerPackagesProcess( void )
{
 800cc58:	b580      	push	{r7, lr}
 800cc5a:	b082      	sub	sp, #8
 800cc5c:	af00      	add	r7, sp, #0
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800cc5e:	2300      	movs	r3, #0
 800cc60:	71fb      	strb	r3, [r7, #7]
 800cc62:	e022      	b.n	800ccaa <LmHandlerPackagesProcess+0x52>
    {
        if( ( LmHandlerPackages[i] != NULL ) &&
 800cc64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cc68:	4a14      	ldr	r2, [pc, #80]	@ (800ccbc <LmHandlerPackagesProcess+0x64>)
 800cc6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cc6e:	2b00      	cmp	r3, #0
 800cc70:	d015      	beq.n	800cc9e <LmHandlerPackagesProcess+0x46>
            ( LmHandlerPackages[i]->Process != NULL ) &&
 800cc72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cc76:	4a11      	ldr	r2, [pc, #68]	@ (800ccbc <LmHandlerPackagesProcess+0x64>)
 800cc78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cc7c:	695b      	ldr	r3, [r3, #20]
        if( ( LmHandlerPackages[i] != NULL ) &&
 800cc7e:	2b00      	cmp	r3, #0
 800cc80:	d00d      	beq.n	800cc9e <LmHandlerPackagesProcess+0x46>
            ( LmHandlerPackageIsInitialized( i ) != false ) )
 800cc82:	79fb      	ldrb	r3, [r7, #7]
 800cc84:	4618      	mov	r0, r3
 800cc86:	f7ff ff09 	bl	800ca9c <LmHandlerPackageIsInitialized>
 800cc8a:	4603      	mov	r3, r0
            ( LmHandlerPackages[i]->Process != NULL ) &&
 800cc8c:	2b00      	cmp	r3, #0
 800cc8e:	d006      	beq.n	800cc9e <LmHandlerPackagesProcess+0x46>
        {
            LmHandlerPackages[i]->Process( );
 800cc90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cc94:	4a09      	ldr	r2, [pc, #36]	@ (800ccbc <LmHandlerPackagesProcess+0x64>)
 800cc96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cc9a:	695b      	ldr	r3, [r3, #20]
 800cc9c:	4798      	blx	r3
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800cc9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cca2:	b2db      	uxtb	r3, r3
 800cca4:	3301      	adds	r3, #1
 800cca6:	b2db      	uxtb	r3, r3
 800cca8:	71fb      	strb	r3, [r7, #7]
 800ccaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ccae:	2b04      	cmp	r3, #4
 800ccb0:	ddd8      	ble.n	800cc64 <LmHandlerPackagesProcess+0xc>
        }
    }
}
 800ccb2:	bf00      	nop
 800ccb4:	bf00      	nop
 800ccb6:	3708      	adds	r7, #8
 800ccb8:	46bd      	mov	sp, r7
 800ccba:	bd80      	pop	{r7, pc}
 800ccbc:	200004ac 	.word	0x200004ac

0800ccc0 <LmHandlerStop>:

    return LORAMAC_HANDLER_SUCCESS;
}

LmHandlerErrorStatus_t LmHandlerStop( void )
{
 800ccc0:	b580      	push	{r7, lr}
 800ccc2:	af00      	add	r7, sp, #0
    if( LoRaMacDeInitialization() == LORAMAC_STATUS_OK )
 800ccc4:	f005 f8d2 	bl	8011e6c <LoRaMacDeInitialization>
 800ccc8:	4603      	mov	r3, r0
 800ccca:	2b00      	cmp	r3, #0
 800cccc:	d101      	bne.n	800ccd2 <LmHandlerStop+0x12>
    {
        return LORAMAC_HANDLER_SUCCESS;
 800ccce:	2300      	movs	r3, #0
 800ccd0:	e001      	b.n	800ccd6 <LmHandlerStop+0x16>
    }
    else
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800ccd2:	f06f 0301 	mvn.w	r3, #1
    }
}
 800ccd6:	4618      	mov	r0, r3
 800ccd8:	bd80      	pop	{r7, pc}

0800ccda <LmHandlerHalt>:

LmHandlerErrorStatus_t LmHandlerHalt( void )
{
 800ccda:	b580      	push	{r7, lr}
 800ccdc:	af00      	add	r7, sp, #0
    if( LoRaMacHalt() == LORAMAC_STATUS_OK )
 800ccde:	f004 f81b 	bl	8010d18 <LoRaMacHalt>
 800cce2:	4603      	mov	r3, r0
 800cce4:	2b00      	cmp	r3, #0
 800cce6:	d101      	bne.n	800ccec <LmHandlerHalt+0x12>
    {
        return LORAMAC_HANDLER_SUCCESS;
 800cce8:	2300      	movs	r3, #0
 800ccea:	e001      	b.n	800ccf0 <LmHandlerHalt+0x16>
    }
    else
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800ccec:	f06f 0301 	mvn.w	r3, #1
    }
}
 800ccf0:	4618      	mov	r0, r3
 800ccf2:	bd80      	pop	{r7, pc}

0800ccf4 <LmHandlerGetTxPower>:
    rxParams->Datarate = mibReq.Param.Rx2Channel.Datarate;
    return LORAMAC_HANDLER_SUCCESS;
}

LmHandlerErrorStatus_t LmHandlerGetTxPower( int8_t *txPower )
{
 800ccf4:	b580      	push	{r7, lr}
 800ccf6:	b08c      	sub	sp, #48	@ 0x30
 800ccf8:	af00      	add	r7, sp, #0
 800ccfa:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
    if( txPower == NULL )
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	2b00      	cmp	r3, #0
 800cd00:	d102      	bne.n	800cd08 <LmHandlerGetTxPower+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 800cd02:	f04f 33ff 	mov.w	r3, #4294967295
 800cd06:	e016      	b.n	800cd36 <LmHandlerGetTxPower+0x42>
    }

    mibReq.Type = MIB_CHANNELS_TX_POWER;
 800cd08:	2320      	movs	r3, #32
 800cd0a:	723b      	strb	r3, [r7, #8]
    if( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800cd0c:	f107 0308 	add.w	r3, r7, #8
 800cd10:	4618      	mov	r0, r3
 800cd12:	f004 f8b1 	bl	8010e78 <LoRaMacMibGetRequestConfirm>
 800cd16:	4603      	mov	r3, r0
 800cd18:	2b00      	cmp	r3, #0
 800cd1a:	d002      	beq.n	800cd22 <LmHandlerGetTxPower+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 800cd1c:	f04f 33ff 	mov.w	r3, #4294967295
 800cd20:	e009      	b.n	800cd36 <LmHandlerGetTxPower+0x42>
    }

    *txPower = mibReq.Param.ChannelsTxPower;
 800cd22:	f997 200c 	ldrsb.w	r2, [r7, #12]
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	701a      	strb	r2, [r3, #0]
    LmHandlerParams.TxPower = *txPower;
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	f993 2000 	ldrsb.w	r2, [r3]
 800cd30:	4b03      	ldr	r3, [pc, #12]	@ (800cd40 <LmHandlerGetTxPower+0x4c>)
 800cd32:	715a      	strb	r2, [r3, #5]
    return LORAMAC_HANDLER_SUCCESS;
 800cd34:	2300      	movs	r3, #0
}
 800cd36:	4618      	mov	r0, r3
 800cd38:	3730      	adds	r7, #48	@ 0x30
 800cd3a:	46bd      	mov	sp, r7
 800cd3c:	bd80      	pop	{r7, pc}
 800cd3e:	bf00      	nop
 800cd40:	200004c0 	.word	0x200004c0

0800cd44 <LmHandlerNvmDataStore>:

    return LORAMAC_HANDLER_SUCCESS;
}

LmHandlerErrorStatus_t LmHandlerNvmDataStore( void )
{
 800cd44:	b480      	push	{r7}
 800cd46:	af00      	add	r7, sp, #0
        LmHandlerCallbacks->OnNvmDataChange( LORAMAC_HANDLER_NVM_STORE );
    }

    return lmhStatus;
#else
    return LORAMAC_HANDLER_ERROR;
 800cd48:	f04f 33ff 	mov.w	r3, #4294967295
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 800cd4c:	4618      	mov	r0, r3
 800cd4e:	46bd      	mov	sp, r7
 800cd50:	bc80      	pop	{r7}
 800cd52:	4770      	bx	lr

0800cd54 <NvmDataMgmtEvent>:
#if ( CONTEXT_MANAGEMENT_ENABLED == 1 )
static uint16_t NvmNotifyFlags = 0;
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */

void NvmDataMgmtEvent( uint16_t notifyFlags )
{
 800cd54:	b480      	push	{r7}
 800cd56:	b083      	sub	sp, #12
 800cd58:	af00      	add	r7, sp, #0
 800cd5a:	4603      	mov	r3, r0
 800cd5c:	80fb      	strh	r3, [r7, #6]
#if ( CONTEXT_MANAGEMENT_ENABLED == 1 )
    NvmNotifyFlags |= notifyFlags;
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */
}
 800cd5e:	bf00      	nop
 800cd60:	370c      	adds	r7, #12
 800cd62:	46bd      	mov	sp, r7
 800cd64:	bc80      	pop	{r7}
 800cd66:	4770      	bx	lr

0800cd68 <LmhpCompliancePackageFactory>:
    .OnSysTimeUpdate = NULL,                                   /* To be initialized by LmHandler */
    .OnPackageProcessEvent = NULL,                             /* To be initialized by LmHandler */
};

LmhPackage_t *LmhpCompliancePackageFactory( void )
{
 800cd68:	b480      	push	{r7}
 800cd6a:	af00      	add	r7, sp, #0
    return &LmhpCompliancePackage;
 800cd6c:	4b02      	ldr	r3, [pc, #8]	@ (800cd78 <LmhpCompliancePackageFactory+0x10>)
}
 800cd6e:	4618      	mov	r0, r3
 800cd70:	46bd      	mov	sp, r7
 800cd72:	bc80      	pop	{r7}
 800cd74:	4770      	bx	lr
 800cd76:	bf00      	nop
 800cd78:	200000c4 	.word	0x200000c4

0800cd7c <LmhpComplianceInit>:

static void LmhpComplianceInit( void *params, uint8_t *dataBuffer, uint8_t dataBufferMaxSize )
{
 800cd7c:	b480      	push	{r7}
 800cd7e:	b085      	sub	sp, #20
 800cd80:	af00      	add	r7, sp, #0
 800cd82:	60f8      	str	r0, [r7, #12]
 800cd84:	60b9      	str	r1, [r7, #8]
 800cd86:	4613      	mov	r3, r2
 800cd88:	71fb      	strb	r3, [r7, #7]
    if( ( params != NULL ) && ( dataBuffer != NULL ) )
 800cd8a:	68fb      	ldr	r3, [r7, #12]
 800cd8c:	2b00      	cmp	r3, #0
 800cd8e:	d00f      	beq.n	800cdb0 <LmhpComplianceInit+0x34>
 800cd90:	68bb      	ldr	r3, [r7, #8]
 800cd92:	2b00      	cmp	r3, #0
 800cd94:	d00c      	beq.n	800cdb0 <LmhpComplianceInit+0x34>
    {
        LmhpComplianceParams = ( LmhpComplianceParams_t * )params;
 800cd96:	4a0c      	ldr	r2, [pc, #48]	@ (800cdc8 <LmhpComplianceInit+0x4c>)
 800cd98:	68fb      	ldr	r3, [r7, #12]
 800cd9a:	6013      	str	r3, [r2, #0]
        ComplianceTestState.DataBuffer = dataBuffer;
 800cd9c:	4a0b      	ldr	r2, [pc, #44]	@ (800cdcc <LmhpComplianceInit+0x50>)
 800cd9e:	68bb      	ldr	r3, [r7, #8]
 800cda0:	6093      	str	r3, [r2, #8]
        ComplianceTestState.DataBufferMaxSize = dataBufferMaxSize;
 800cda2:	4a0a      	ldr	r2, [pc, #40]	@ (800cdcc <LmhpComplianceInit+0x50>)
 800cda4:	79fb      	ldrb	r3, [r7, #7]
 800cda6:	7153      	strb	r3, [r2, #5]
        ComplianceTestState.Initialized = true;
 800cda8:	4b08      	ldr	r3, [pc, #32]	@ (800cdcc <LmhpComplianceInit+0x50>)
 800cdaa:	2201      	movs	r2, #1
 800cdac:	701a      	strb	r2, [r3, #0]
 800cdae:	e006      	b.n	800cdbe <LmhpComplianceInit+0x42>
    }
    else
    {
        LmhpComplianceParams = NULL;
 800cdb0:	4b05      	ldr	r3, [pc, #20]	@ (800cdc8 <LmhpComplianceInit+0x4c>)
 800cdb2:	2200      	movs	r2, #0
 800cdb4:	601a      	str	r2, [r3, #0]
        ComplianceTestState.Initialized = false;
 800cdb6:	4b05      	ldr	r3, [pc, #20]	@ (800cdcc <LmhpComplianceInit+0x50>)
 800cdb8:	2200      	movs	r2, #0
 800cdba:	701a      	strb	r2, [r3, #0]
    }
}
 800cdbc:	bf00      	nop
 800cdbe:	bf00      	nop
 800cdc0:	3714      	adds	r7, #20
 800cdc2:	46bd      	mov	sp, r7
 800cdc4:	bc80      	pop	{r7}
 800cdc6:	4770      	bx	lr
 800cdc8:	20000628 	.word	0x20000628
 800cdcc:	20000614 	.word	0x20000614

0800cdd0 <LmhpComplianceIsInitialized>:

static bool LmhpComplianceIsInitialized( void )
{
 800cdd0:	b480      	push	{r7}
 800cdd2:	af00      	add	r7, sp, #0
    return ComplianceTestState.Initialized;
 800cdd4:	4b02      	ldr	r3, [pc, #8]	@ (800cde0 <LmhpComplianceIsInitialized+0x10>)
 800cdd6:	781b      	ldrb	r3, [r3, #0]
}
 800cdd8:	4618      	mov	r0, r3
 800cdda:	46bd      	mov	sp, r7
 800cddc:	bc80      	pop	{r7}
 800cdde:	4770      	bx	lr
 800cde0:	20000614 	.word	0x20000614

0800cde4 <LmhpComplianceIsRunning>:

static bool LmhpComplianceIsRunning( void )
{
 800cde4:	b480      	push	{r7}
 800cde6:	af00      	add	r7, sp, #0
    if( ComplianceTestState.Initialized == false )
 800cde8:	4b07      	ldr	r3, [pc, #28]	@ (800ce08 <LmhpComplianceIsRunning+0x24>)
 800cdea:	781b      	ldrb	r3, [r3, #0]
 800cdec:	f083 0301 	eor.w	r3, r3, #1
 800cdf0:	b2db      	uxtb	r3, r3
 800cdf2:	2b00      	cmp	r3, #0
 800cdf4:	d001      	beq.n	800cdfa <LmhpComplianceIsRunning+0x16>
    {
        return false;
 800cdf6:	2300      	movs	r3, #0
 800cdf8:	e001      	b.n	800cdfe <LmhpComplianceIsRunning+0x1a>
    }

    return ComplianceTestState.IsRunning;
 800cdfa:	4b03      	ldr	r3, [pc, #12]	@ (800ce08 <LmhpComplianceIsRunning+0x24>)
 800cdfc:	785b      	ldrb	r3, [r3, #1]
}
 800cdfe:	4618      	mov	r0, r3
 800ce00:	46bd      	mov	sp, r7
 800ce02:	bc80      	pop	{r7}
 800ce04:	4770      	bx	lr
 800ce06:	bf00      	nop
 800ce08:	20000614 	.word	0x20000614

0800ce0c <LmhpComplianceOnMcpsConfirm>:

static void LmhpComplianceOnMcpsConfirm( McpsConfirm_t *mcpsConfirm )
{
 800ce0c:	b480      	push	{r7}
 800ce0e:	b083      	sub	sp, #12
 800ce10:	af00      	add	r7, sp, #0
 800ce12:	6078      	str	r0, [r7, #4]
    if( ComplianceTestState.Initialized == false )
 800ce14:	4b0f      	ldr	r3, [pc, #60]	@ (800ce54 <LmhpComplianceOnMcpsConfirm+0x48>)
 800ce16:	781b      	ldrb	r3, [r3, #0]
 800ce18:	f083 0301 	eor.w	r3, r3, #1
 800ce1c:	b2db      	uxtb	r3, r3
 800ce1e:	2b00      	cmp	r3, #0
 800ce20:	d112      	bne.n	800ce48 <LmhpComplianceOnMcpsConfirm+0x3c>
    {
        return;
    }

    if( ( ComplianceTestState.IsRunning == true ) &&
 800ce22:	4b0c      	ldr	r3, [pc, #48]	@ (800ce54 <LmhpComplianceOnMcpsConfirm+0x48>)
 800ce24:	785b      	ldrb	r3, [r3, #1]
 800ce26:	2b00      	cmp	r3, #0
 800ce28:	d00f      	beq.n	800ce4a <LmhpComplianceOnMcpsConfirm+0x3e>
        ( mcpsConfirm->McpsRequest == MCPS_CONFIRMED ) &&
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	781b      	ldrb	r3, [r3, #0]
    if( ( ComplianceTestState.IsRunning == true ) &&
 800ce2e:	2b01      	cmp	r3, #1
 800ce30:	d10b      	bne.n	800ce4a <LmhpComplianceOnMcpsConfirm+0x3e>
        ( mcpsConfirm->AckReceived != 0 ) )
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	791b      	ldrb	r3, [r3, #4]
        ( mcpsConfirm->McpsRequest == MCPS_CONFIRMED ) &&
 800ce36:	2b00      	cmp	r3, #0
 800ce38:	d007      	beq.n	800ce4a <LmhpComplianceOnMcpsConfirm+0x3e>
    {
        /* Increment the compliance certification protocol downlink counter */
        ComplianceTestState.DownLinkCounter++;
 800ce3a:	4b06      	ldr	r3, [pc, #24]	@ (800ce54 <LmhpComplianceOnMcpsConfirm+0x48>)
 800ce3c:	899b      	ldrh	r3, [r3, #12]
 800ce3e:	3301      	adds	r3, #1
 800ce40:	b29a      	uxth	r2, r3
 800ce42:	4b04      	ldr	r3, [pc, #16]	@ (800ce54 <LmhpComplianceOnMcpsConfirm+0x48>)
 800ce44:	819a      	strh	r2, [r3, #12]
 800ce46:	e000      	b.n	800ce4a <LmhpComplianceOnMcpsConfirm+0x3e>
        return;
 800ce48:	bf00      	nop
    }
}
 800ce4a:	370c      	adds	r7, #12
 800ce4c:	46bd      	mov	sp, r7
 800ce4e:	bc80      	pop	{r7}
 800ce50:	4770      	bx	lr
 800ce52:	bf00      	nop
 800ce54:	20000614 	.word	0x20000614

0800ce58 <LmhpComplianceOnMlmeConfirm>:

static void LmhpComplianceOnMlmeConfirm( MlmeConfirm_t *mlmeConfirm )
{
 800ce58:	b480      	push	{r7}
 800ce5a:	b083      	sub	sp, #12
 800ce5c:	af00      	add	r7, sp, #0
 800ce5e:	6078      	str	r0, [r7, #4]
    if( ComplianceTestState.Initialized == false )
 800ce60:	4b12      	ldr	r3, [pc, #72]	@ (800ceac <LmhpComplianceOnMlmeConfirm+0x54>)
 800ce62:	781b      	ldrb	r3, [r3, #0]
 800ce64:	f083 0301 	eor.w	r3, r3, #1
 800ce68:	b2db      	uxtb	r3, r3
 800ce6a:	2b00      	cmp	r3, #0
 800ce6c:	d116      	bne.n	800ce9c <LmhpComplianceOnMlmeConfirm+0x44>
    {
        return;
    }

    if( ComplianceTestState.IsRunning == false )
 800ce6e:	4b0f      	ldr	r3, [pc, #60]	@ (800ceac <LmhpComplianceOnMlmeConfirm+0x54>)
 800ce70:	785b      	ldrb	r3, [r3, #1]
 800ce72:	f083 0301 	eor.w	r3, r3, #1
 800ce76:	b2db      	uxtb	r3, r3
 800ce78:	2b00      	cmp	r3, #0
 800ce7a:	d111      	bne.n	800cea0 <LmhpComplianceOnMlmeConfirm+0x48>
    {
        return;
    }

    if( mlmeConfirm->MlmeRequest == MLME_LINK_CHECK )
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	781b      	ldrb	r3, [r3, #0]
 800ce80:	2b05      	cmp	r3, #5
 800ce82:	d10e      	bne.n	800cea2 <LmhpComplianceOnMlmeConfirm+0x4a>
    {
        ComplianceTestState.LinkCheck = true;
 800ce84:	4b09      	ldr	r3, [pc, #36]	@ (800ceac <LmhpComplianceOnMlmeConfirm+0x54>)
 800ce86:	2201      	movs	r2, #1
 800ce88:	739a      	strb	r2, [r3, #14]
        ComplianceTestState.DemodMargin = mlmeConfirm->DemodMargin;
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	7a1a      	ldrb	r2, [r3, #8]
 800ce8e:	4b07      	ldr	r3, [pc, #28]	@ (800ceac <LmhpComplianceOnMlmeConfirm+0x54>)
 800ce90:	73da      	strb	r2, [r3, #15]
        ComplianceTestState.NbGateways = mlmeConfirm->NbGateways;
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	7a5a      	ldrb	r2, [r3, #9]
 800ce96:	4b05      	ldr	r3, [pc, #20]	@ (800ceac <LmhpComplianceOnMlmeConfirm+0x54>)
 800ce98:	741a      	strb	r2, [r3, #16]
 800ce9a:	e002      	b.n	800cea2 <LmhpComplianceOnMlmeConfirm+0x4a>
        return;
 800ce9c:	bf00      	nop
 800ce9e:	e000      	b.n	800cea2 <LmhpComplianceOnMlmeConfirm+0x4a>
        return;
 800cea0:	bf00      	nop
    }
}
 800cea2:	370c      	adds	r7, #12
 800cea4:	46bd      	mov	sp, r7
 800cea6:	bc80      	pop	{r7}
 800cea8:	4770      	bx	lr
 800ceaa:	bf00      	nop
 800ceac:	20000614 	.word	0x20000614

0800ceb0 <LmhpComplianceTxProcess>:

static LmHandlerErrorStatus_t LmhpComplianceTxProcess( void )
{
 800ceb0:	b580      	push	{r7, lr}
 800ceb2:	b082      	sub	sp, #8
 800ceb4:	af00      	add	r7, sp, #0
    if( ComplianceTestState.Initialized == false )
 800ceb6:	4b36      	ldr	r3, [pc, #216]	@ (800cf90 <LmhpComplianceTxProcess+0xe0>)
 800ceb8:	781b      	ldrb	r3, [r3, #0]
 800ceba:	f083 0301 	eor.w	r3, r3, #1
 800cebe:	b2db      	uxtb	r3, r3
 800cec0:	2b00      	cmp	r3, #0
 800cec2:	d002      	beq.n	800ceca <LmhpComplianceTxProcess+0x1a>
    {
        return LORAMAC_HANDLER_ERROR;
 800cec4:	f04f 33ff 	mov.w	r3, #4294967295
 800cec8:	e05e      	b.n	800cf88 <LmhpComplianceTxProcess+0xd8>
    }

    if( ComplianceTestState.IsRunning == false )
 800ceca:	4b31      	ldr	r3, [pc, #196]	@ (800cf90 <LmhpComplianceTxProcess+0xe0>)
 800cecc:	785b      	ldrb	r3, [r3, #1]
 800cece:	f083 0301 	eor.w	r3, r3, #1
 800ced2:	b2db      	uxtb	r3, r3
 800ced4:	2b00      	cmp	r3, #0
 800ced6:	d001      	beq.n	800cedc <LmhpComplianceTxProcess+0x2c>
    {
        return LORAMAC_HANDLER_SUCCESS;
 800ced8:	2300      	movs	r3, #0
 800ceda:	e055      	b.n	800cf88 <LmhpComplianceTxProcess+0xd8>
    }

    if( ComplianceTestState.LinkCheck == true )
 800cedc:	4b2c      	ldr	r3, [pc, #176]	@ (800cf90 <LmhpComplianceTxProcess+0xe0>)
 800cede:	7b9b      	ldrb	r3, [r3, #14]
 800cee0:	2b00      	cmp	r3, #0
 800cee2:	d019      	beq.n	800cf18 <LmhpComplianceTxProcess+0x68>
    {
        ComplianceTestState.LinkCheck = false;
 800cee4:	4b2a      	ldr	r3, [pc, #168]	@ (800cf90 <LmhpComplianceTxProcess+0xe0>)
 800cee6:	2200      	movs	r2, #0
 800cee8:	739a      	strb	r2, [r3, #14]
        ComplianceTestState.DataBufferSize = 3;
 800ceea:	4b29      	ldr	r3, [pc, #164]	@ (800cf90 <LmhpComplianceTxProcess+0xe0>)
 800ceec:	2203      	movs	r2, #3
 800ceee:	719a      	strb	r2, [r3, #6]
        ComplianceTestState.DataBuffer[0] = 5;
 800cef0:	4b27      	ldr	r3, [pc, #156]	@ (800cf90 <LmhpComplianceTxProcess+0xe0>)
 800cef2:	689b      	ldr	r3, [r3, #8]
 800cef4:	2205      	movs	r2, #5
 800cef6:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[1] = ComplianceTestState.DemodMargin;
 800cef8:	4b25      	ldr	r3, [pc, #148]	@ (800cf90 <LmhpComplianceTxProcess+0xe0>)
 800cefa:	689b      	ldr	r3, [r3, #8]
 800cefc:	3301      	adds	r3, #1
 800cefe:	4a24      	ldr	r2, [pc, #144]	@ (800cf90 <LmhpComplianceTxProcess+0xe0>)
 800cf00:	7bd2      	ldrb	r2, [r2, #15]
 800cf02:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[2] = ComplianceTestState.NbGateways;
 800cf04:	4b22      	ldr	r3, [pc, #136]	@ (800cf90 <LmhpComplianceTxProcess+0xe0>)
 800cf06:	689b      	ldr	r3, [r3, #8]
 800cf08:	3302      	adds	r3, #2
 800cf0a:	4a21      	ldr	r2, [pc, #132]	@ (800cf90 <LmhpComplianceTxProcess+0xe0>)
 800cf0c:	7c12      	ldrb	r2, [r2, #16]
 800cf0e:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.State = 1;
 800cf10:	4b1f      	ldr	r3, [pc, #124]	@ (800cf90 <LmhpComplianceTxProcess+0xe0>)
 800cf12:	2201      	movs	r2, #1
 800cf14:	709a      	strb	r2, [r3, #2]
 800cf16:	e01c      	b.n	800cf52 <LmhpComplianceTxProcess+0xa2>
    }
    else
    {
        switch( ComplianceTestState.State )
 800cf18:	4b1d      	ldr	r3, [pc, #116]	@ (800cf90 <LmhpComplianceTxProcess+0xe0>)
 800cf1a:	789b      	ldrb	r3, [r3, #2]
 800cf1c:	2b01      	cmp	r3, #1
 800cf1e:	d005      	beq.n	800cf2c <LmhpComplianceTxProcess+0x7c>
 800cf20:	2b04      	cmp	r3, #4
 800cf22:	d116      	bne.n	800cf52 <LmhpComplianceTxProcess+0xa2>
        {
            case 4:
                ComplianceTestState.State = 1;
 800cf24:	4b1a      	ldr	r3, [pc, #104]	@ (800cf90 <LmhpComplianceTxProcess+0xe0>)
 800cf26:	2201      	movs	r2, #1
 800cf28:	709a      	strb	r2, [r3, #2]
                break;
 800cf2a:	e012      	b.n	800cf52 <LmhpComplianceTxProcess+0xa2>
            case 1:
                ComplianceTestState.DataBufferSize = 2;
 800cf2c:	4b18      	ldr	r3, [pc, #96]	@ (800cf90 <LmhpComplianceTxProcess+0xe0>)
 800cf2e:	2202      	movs	r2, #2
 800cf30:	719a      	strb	r2, [r3, #6]
                ComplianceTestState.DataBuffer[0] = ComplianceTestState.DownLinkCounter >> 8;
 800cf32:	4b17      	ldr	r3, [pc, #92]	@ (800cf90 <LmhpComplianceTxProcess+0xe0>)
 800cf34:	899b      	ldrh	r3, [r3, #12]
 800cf36:	0a1b      	lsrs	r3, r3, #8
 800cf38:	b29a      	uxth	r2, r3
 800cf3a:	4b15      	ldr	r3, [pc, #84]	@ (800cf90 <LmhpComplianceTxProcess+0xe0>)
 800cf3c:	689b      	ldr	r3, [r3, #8]
 800cf3e:	b2d2      	uxtb	r2, r2
 800cf40:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[1] = ComplianceTestState.DownLinkCounter;
 800cf42:	4b13      	ldr	r3, [pc, #76]	@ (800cf90 <LmhpComplianceTxProcess+0xe0>)
 800cf44:	899a      	ldrh	r2, [r3, #12]
 800cf46:	4b12      	ldr	r3, [pc, #72]	@ (800cf90 <LmhpComplianceTxProcess+0xe0>)
 800cf48:	689b      	ldr	r3, [r3, #8]
 800cf4a:	3301      	adds	r3, #1
 800cf4c:	b2d2      	uxtb	r2, r2
 800cf4e:	701a      	strb	r2, [r3, #0]
                break;
 800cf50:	bf00      	nop
        }
    }

    LmHandlerAppData_t appData =
 800cf52:	23e0      	movs	r3, #224	@ 0xe0
 800cf54:	703b      	strb	r3, [r7, #0]
    {
        .Buffer = ComplianceTestState.DataBuffer,
        .BufferSize = ComplianceTestState.DataBufferSize,
 800cf56:	4b0e      	ldr	r3, [pc, #56]	@ (800cf90 <LmhpComplianceTxProcess+0xe0>)
 800cf58:	799b      	ldrb	r3, [r3, #6]
    LmHandlerAppData_t appData =
 800cf5a:	707b      	strb	r3, [r7, #1]
        .Buffer = ComplianceTestState.DataBuffer,
 800cf5c:	4b0c      	ldr	r3, [pc, #48]	@ (800cf90 <LmhpComplianceTxProcess+0xe0>)
 800cf5e:	689b      	ldr	r3, [r3, #8]
    LmHandlerAppData_t appData =
 800cf60:	607b      	str	r3, [r7, #4]
        .Port = COMPLIANCE_PORT
    };

    /* Schedule next transmission */
    TimerStart( &ComplianceTxNextPacketTimer );
 800cf62:	480c      	ldr	r0, [pc, #48]	@ (800cf94 <LmhpComplianceTxProcess+0xe4>)
 800cf64:	f00d fcae 	bl	801a8c4 <UTIL_TIMER_Start>

    if( LmhpCompliancePackage.OnSendRequest == NULL)
 800cf68:	4b0b      	ldr	r3, [pc, #44]	@ (800cf98 <LmhpComplianceTxProcess+0xe8>)
 800cf6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cf6c:	2b00      	cmp	r3, #0
 800cf6e:	d102      	bne.n	800cf76 <LmhpComplianceTxProcess+0xc6>
    {
        return LORAMAC_HANDLER_ERROR;
 800cf70:	f04f 33ff 	mov.w	r3, #4294967295
 800cf74:	e008      	b.n	800cf88 <LmhpComplianceTxProcess+0xd8>
    }

    return LmhpCompliancePackage.OnSendRequest( &appData, ( LmHandlerMsgTypes_t )ComplianceTestState.IsTxConfirmed, true );
 800cf76:	4b08      	ldr	r3, [pc, #32]	@ (800cf98 <LmhpComplianceTxProcess+0xe8>)
 800cf78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cf7a:	4a05      	ldr	r2, [pc, #20]	@ (800cf90 <LmhpComplianceTxProcess+0xe0>)
 800cf7c:	78d2      	ldrb	r2, [r2, #3]
 800cf7e:	4611      	mov	r1, r2
 800cf80:	4638      	mov	r0, r7
 800cf82:	2201      	movs	r2, #1
 800cf84:	4798      	blx	r3
 800cf86:	4603      	mov	r3, r0
}
 800cf88:	4618      	mov	r0, r3
 800cf8a:	3708      	adds	r7, #8
 800cf8c:	46bd      	mov	sp, r7
 800cf8e:	bd80      	pop	{r7, pc}
 800cf90:	20000614 	.word	0x20000614
 800cf94:	200005fc 	.word	0x200005fc
 800cf98:	200000c4 	.word	0x200000c4

0800cf9c <LmhpComplianceOnMcpsIndication>:

static void LmhpComplianceOnMcpsIndication( McpsIndication_t *mcpsIndication )
{
 800cf9c:	b580      	push	{r7, lr}
 800cf9e:	b0a4      	sub	sp, #144	@ 0x90
 800cfa0:	af02      	add	r7, sp, #8
 800cfa2:	6078      	str	r0, [r7, #4]
    if( ComplianceTestState.Initialized == false )
 800cfa4:	4ba5      	ldr	r3, [pc, #660]	@ (800d23c <LmhpComplianceOnMcpsIndication+0x2a0>)
 800cfa6:	781b      	ldrb	r3, [r3, #0]
 800cfa8:	f083 0301 	eor.w	r3, r3, #1
 800cfac:	b2db      	uxtb	r3, r3
 800cfae:	2b00      	cmp	r3, #0
 800cfb0:	f040 81c6 	bne.w	800d340 <LmhpComplianceOnMcpsIndication+0x3a4>
    {
        return;
    }

    if( mcpsIndication->RxData == false )
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	7b5b      	ldrb	r3, [r3, #13]
 800cfb8:	f083 0301 	eor.w	r3, r3, #1
 800cfbc:	b2db      	uxtb	r3, r3
 800cfbe:	2b00      	cmp	r3, #0
 800cfc0:	f040 81c0 	bne.w	800d344 <LmhpComplianceOnMcpsIndication+0x3a8>
    {
        return;
    }

    if( ( ComplianceTestState.IsRunning == true ) &&
 800cfc4:	4b9d      	ldr	r3, [pc, #628]	@ (800d23c <LmhpComplianceOnMcpsIndication+0x2a0>)
 800cfc6:	785b      	ldrb	r3, [r3, #1]
 800cfc8:	2b00      	cmp	r3, #0
 800cfca:	d00c      	beq.n	800cfe6 <LmhpComplianceOnMcpsIndication+0x4a>
        ( mcpsIndication->AckReceived == 0 ) )
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	7b9b      	ldrb	r3, [r3, #14]
 800cfd0:	f083 0301 	eor.w	r3, r3, #1
 800cfd4:	b2db      	uxtb	r3, r3
    if( ( ComplianceTestState.IsRunning == true ) &&
 800cfd6:	2b00      	cmp	r3, #0
 800cfd8:	d005      	beq.n	800cfe6 <LmhpComplianceOnMcpsIndication+0x4a>
    {
        /* Increment the compliance certification protocol downlink counter */
        ComplianceTestState.DownLinkCounter++;
 800cfda:	4b98      	ldr	r3, [pc, #608]	@ (800d23c <LmhpComplianceOnMcpsIndication+0x2a0>)
 800cfdc:	899b      	ldrh	r3, [r3, #12]
 800cfde:	3301      	adds	r3, #1
 800cfe0:	b29a      	uxth	r2, r3
 800cfe2:	4b96      	ldr	r3, [pc, #600]	@ (800d23c <LmhpComplianceOnMcpsIndication+0x2a0>)
 800cfe4:	819a      	strh	r2, [r3, #12]
    }

    if( mcpsIndication->Port != COMPLIANCE_PORT )
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	78db      	ldrb	r3, [r3, #3]
 800cfea:	2be0      	cmp	r3, #224	@ 0xe0
 800cfec:	f040 81ac 	bne.w	800d348 <LmhpComplianceOnMcpsIndication+0x3ac>
    {
        return;
    }

    if( ComplianceTestState.IsRunning == false )
 800cff0:	4b92      	ldr	r3, [pc, #584]	@ (800d23c <LmhpComplianceOnMcpsIndication+0x2a0>)
 800cff2:	785b      	ldrb	r3, [r3, #1]
 800cff4:	f083 0301 	eor.w	r3, r3, #1
 800cff8:	b2db      	uxtb	r3, r3
 800cffa:	2b00      	cmp	r3, #0
 800cffc:	d060      	beq.n	800d0c0 <LmhpComplianceOnMcpsIndication+0x124>
    {
        /* Check compliance test enable command (i) */
        if( ( mcpsIndication->BufferSize == 4 ) &&
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	7b1b      	ldrb	r3, [r3, #12]
 800d002:	2b04      	cmp	r3, #4
 800d004:	f040 81a7 	bne.w	800d356 <LmhpComplianceOnMcpsIndication+0x3ba>
            ( mcpsIndication->Buffer[0] == 0x01 ) &&
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	689b      	ldr	r3, [r3, #8]
 800d00c:	781b      	ldrb	r3, [r3, #0]
        if( ( mcpsIndication->BufferSize == 4 ) &&
 800d00e:	2b01      	cmp	r3, #1
 800d010:	f040 81a1 	bne.w	800d356 <LmhpComplianceOnMcpsIndication+0x3ba>
            ( mcpsIndication->Buffer[1] == 0x01 ) &&
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	689b      	ldr	r3, [r3, #8]
 800d018:	3301      	adds	r3, #1
 800d01a:	781b      	ldrb	r3, [r3, #0]
            ( mcpsIndication->Buffer[0] == 0x01 ) &&
 800d01c:	2b01      	cmp	r3, #1
 800d01e:	f040 819a 	bne.w	800d356 <LmhpComplianceOnMcpsIndication+0x3ba>
            ( mcpsIndication->Buffer[2] == 0x01 ) &&
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	689b      	ldr	r3, [r3, #8]
 800d026:	3302      	adds	r3, #2
 800d028:	781b      	ldrb	r3, [r3, #0]
            ( mcpsIndication->Buffer[1] == 0x01 ) &&
 800d02a:	2b01      	cmp	r3, #1
 800d02c:	f040 8193 	bne.w	800d356 <LmhpComplianceOnMcpsIndication+0x3ba>
            ( mcpsIndication->Buffer[3] == 0x01 ) )
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	689b      	ldr	r3, [r3, #8]
 800d034:	3303      	adds	r3, #3
 800d036:	781b      	ldrb	r3, [r3, #0]
            ( mcpsIndication->Buffer[2] == 0x01 ) &&
 800d038:	2b01      	cmp	r3, #1
 800d03a:	f040 818c 	bne.w	800d356 <LmhpComplianceOnMcpsIndication+0x3ba>
        {
            MibRequestConfirm_t mibReq;

            /* Initialize compliance test mode context */
            ComplianceTestState.IsTxConfirmed = false;
 800d03e:	4b7f      	ldr	r3, [pc, #508]	@ (800d23c <LmhpComplianceOnMcpsIndication+0x2a0>)
 800d040:	2200      	movs	r2, #0
 800d042:	70da      	strb	r2, [r3, #3]
            ComplianceTestState.Port = 224;
 800d044:	4b7d      	ldr	r3, [pc, #500]	@ (800d23c <LmhpComplianceOnMcpsIndication+0x2a0>)
 800d046:	22e0      	movs	r2, #224	@ 0xe0
 800d048:	711a      	strb	r2, [r3, #4]
            ComplianceTestState.DataBufferSize = 2;
 800d04a:	4b7c      	ldr	r3, [pc, #496]	@ (800d23c <LmhpComplianceOnMcpsIndication+0x2a0>)
 800d04c:	2202      	movs	r2, #2
 800d04e:	719a      	strb	r2, [r3, #6]
            ComplianceTestState.DownLinkCounter = 0;
 800d050:	4b7a      	ldr	r3, [pc, #488]	@ (800d23c <LmhpComplianceOnMcpsIndication+0x2a0>)
 800d052:	2200      	movs	r2, #0
 800d054:	819a      	strh	r2, [r3, #12]
            ComplianceTestState.LinkCheck = false;
 800d056:	4b79      	ldr	r3, [pc, #484]	@ (800d23c <LmhpComplianceOnMcpsIndication+0x2a0>)
 800d058:	2200      	movs	r2, #0
 800d05a:	739a      	strb	r2, [r3, #14]
            ComplianceTestState.DemodMargin = 0;
 800d05c:	4b77      	ldr	r3, [pc, #476]	@ (800d23c <LmhpComplianceOnMcpsIndication+0x2a0>)
 800d05e:	2200      	movs	r2, #0
 800d060:	73da      	strb	r2, [r3, #15]
            ComplianceTestState.NbGateways = 0;
 800d062:	4b76      	ldr	r3, [pc, #472]	@ (800d23c <LmhpComplianceOnMcpsIndication+0x2a0>)
 800d064:	2200      	movs	r2, #0
 800d066:	741a      	strb	r2, [r3, #16]
            ComplianceTestState.IsRunning = true;
 800d068:	4b74      	ldr	r3, [pc, #464]	@ (800d23c <LmhpComplianceOnMcpsIndication+0x2a0>)
 800d06a:	2201      	movs	r2, #1
 800d06c:	705a      	strb	r2, [r3, #1]
            ComplianceTestState.State = 1;
 800d06e:	4b73      	ldr	r3, [pc, #460]	@ (800d23c <LmhpComplianceOnMcpsIndication+0x2a0>)
 800d070:	2201      	movs	r2, #1
 800d072:	709a      	strb	r2, [r3, #2]

            /* Enable ADR while in compliance test mode */
            mibReq.Type = MIB_ADR;
 800d074:	2304      	movs	r3, #4
 800d076:	733b      	strb	r3, [r7, #12]
            mibReq.Param.AdrEnable = true;
 800d078:	2301      	movs	r3, #1
 800d07a:	743b      	strb	r3, [r7, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800d07c:	f107 030c 	add.w	r3, r7, #12
 800d080:	4618      	mov	r0, r3
 800d082:	f004 f8cf 	bl	8011224 <LoRaMacMibSetRequestConfirm>

            /* Disable duty cycle enforcement while in compliance test mode */
            LoRaMacTestSetDutyCycleOn( false );
 800d086:	2000      	movs	r0, #0
 800d088:	f004 feca 	bl	8011e20 <LoRaMacTestSetDutyCycleOn>

            /* Stop peripherals */
            if( LmhpComplianceParams->StopPeripherals != NULL )
 800d08c:	4b6c      	ldr	r3, [pc, #432]	@ (800d240 <LmhpComplianceOnMcpsIndication+0x2a4>)
 800d08e:	681b      	ldr	r3, [r3, #0]
 800d090:	685b      	ldr	r3, [r3, #4]
 800d092:	2b00      	cmp	r3, #0
 800d094:	d003      	beq.n	800d09e <LmhpComplianceOnMcpsIndication+0x102>
            {
                LmhpComplianceParams->StopPeripherals( );
 800d096:	4b6a      	ldr	r3, [pc, #424]	@ (800d240 <LmhpComplianceOnMcpsIndication+0x2a4>)
 800d098:	681b      	ldr	r3, [r3, #0]
 800d09a:	685b      	ldr	r3, [r3, #4]
 800d09c:	4798      	blx	r3
            }
            /* Initialize compliance protocol transmission timer */
            TimerInit( &ComplianceTxNextPacketTimer, OnComplianceTxNextPacketTimerEvent );
 800d09e:	2300      	movs	r3, #0
 800d0a0:	9300      	str	r3, [sp, #0]
 800d0a2:	4b68      	ldr	r3, [pc, #416]	@ (800d244 <LmhpComplianceOnMcpsIndication+0x2a8>)
 800d0a4:	2200      	movs	r2, #0
 800d0a6:	f04f 31ff 	mov.w	r1, #4294967295
 800d0aa:	4867      	ldr	r0, [pc, #412]	@ (800d248 <LmhpComplianceOnMcpsIndication+0x2ac>)
 800d0ac:	f00d fbd4 	bl	801a858 <UTIL_TIMER_Create>
            TimerSetValue( &ComplianceTxNextPacketTimer, COMPLIANCE_TX_DUTYCYCLE );
 800d0b0:	f241 3188 	movw	r1, #5000	@ 0x1388
 800d0b4:	4864      	ldr	r0, [pc, #400]	@ (800d248 <LmhpComplianceOnMcpsIndication+0x2ac>)
 800d0b6:	f00d fce3 	bl	801aa80 <UTIL_TIMER_SetPeriod>

            /* Confirm compliance test protocol activation */
            LmhpComplianceTxProcess( );
 800d0ba:	f7ff fef9 	bl	800ceb0 <LmhpComplianceTxProcess>
 800d0be:	e14a      	b.n	800d356 <LmhpComplianceOnMcpsIndication+0x3ba>
    }
    else
    {

        /* Parse compliance test protocol */
        ComplianceTestState.State = mcpsIndication->Buffer[0];
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	689b      	ldr	r3, [r3, #8]
 800d0c4:	781a      	ldrb	r2, [r3, #0]
 800d0c6:	4b5d      	ldr	r3, [pc, #372]	@ (800d23c <LmhpComplianceOnMcpsIndication+0x2a0>)
 800d0c8:	709a      	strb	r2, [r3, #2]
        switch( ComplianceTestState.State )
 800d0ca:	4b5c      	ldr	r3, [pc, #368]	@ (800d23c <LmhpComplianceOnMcpsIndication+0x2a0>)
 800d0cc:	789b      	ldrb	r3, [r3, #2]
 800d0ce:	2b0a      	cmp	r3, #10
 800d0d0:	f200 813c 	bhi.w	800d34c <LmhpComplianceOnMcpsIndication+0x3b0>
 800d0d4:	a201      	add	r2, pc, #4	@ (adr r2, 800d0dc <LmhpComplianceOnMcpsIndication+0x140>)
 800d0d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d0da:	bf00      	nop
 800d0dc:	0800d109 	.word	0x0800d109
 800d0e0:	0800d153 	.word	0x0800d153
 800d0e4:	0800d15b 	.word	0x0800d15b
 800d0e8:	0800d169 	.word	0x0800d169
 800d0ec:	0800d177 	.word	0x0800d177
 800d0f0:	0800d1cf 	.word	0x0800d1cf
 800d0f4:	0800d1e1 	.word	0x0800d1e1
 800d0f8:	0800d251 	.word	0x0800d251
 800d0fc:	0800d2f9 	.word	0x0800d2f9
 800d100:	0800d30b 	.word	0x0800d30b
 800d104:	0800d325 	.word	0x0800d325
        {
            case 0: /* Check compliance test disable command (ii) */
                {
                    MibRequestConfirm_t mibReq;

                    TimerStop( &ComplianceTxNextPacketTimer );
 800d108:	484f      	ldr	r0, [pc, #316]	@ (800d248 <LmhpComplianceOnMcpsIndication+0x2ac>)
 800d10a:	f00d fc49 	bl	801a9a0 <UTIL_TIMER_Stop>

                    /* Disable compliance test mode and reset the downlink counter. */
                    ComplianceTestState.DownLinkCounter = 0;
 800d10e:	4b4b      	ldr	r3, [pc, #300]	@ (800d23c <LmhpComplianceOnMcpsIndication+0x2a0>)
 800d110:	2200      	movs	r2, #0
 800d112:	819a      	strh	r2, [r3, #12]
                    ComplianceTestState.IsRunning = false;
 800d114:	4b49      	ldr	r3, [pc, #292]	@ (800d23c <LmhpComplianceOnMcpsIndication+0x2a0>)
 800d116:	2200      	movs	r2, #0
 800d118:	705a      	strb	r2, [r3, #1]

                    /* Restore previous ADR setting */
                    mibReq.Type = MIB_ADR;
 800d11a:	2304      	movs	r3, #4
 800d11c:	733b      	strb	r3, [r7, #12]
                    mibReq.Param.AdrEnable = LmhpComplianceParams->AdrEnabled;
 800d11e:	4b48      	ldr	r3, [pc, #288]	@ (800d240 <LmhpComplianceOnMcpsIndication+0x2a4>)
 800d120:	681b      	ldr	r3, [r3, #0]
 800d122:	781b      	ldrb	r3, [r3, #0]
 800d124:	743b      	strb	r3, [r7, #16]
                    LoRaMacMibSetRequestConfirm( &mibReq );
 800d126:	f107 030c 	add.w	r3, r7, #12
 800d12a:	4618      	mov	r0, r3
 800d12c:	f004 f87a 	bl	8011224 <LoRaMacMibSetRequestConfirm>

                    /* Enable duty cycle enforcement */
                    LoRaMacTestSetDutyCycleOn( LmhpComplianceParams->DutyCycleEnabled );
 800d130:	4b43      	ldr	r3, [pc, #268]	@ (800d240 <LmhpComplianceOnMcpsIndication+0x2a4>)
 800d132:	681b      	ldr	r3, [r3, #0]
 800d134:	785b      	ldrb	r3, [r3, #1]
 800d136:	4618      	mov	r0, r3
 800d138:	f004 fe72 	bl	8011e20 <LoRaMacTestSetDutyCycleOn>

                    /* Restart peripherals */
                    if( LmhpComplianceParams->StartPeripherals != NULL )
 800d13c:	4b40      	ldr	r3, [pc, #256]	@ (800d240 <LmhpComplianceOnMcpsIndication+0x2a4>)
 800d13e:	681b      	ldr	r3, [r3, #0]
 800d140:	689b      	ldr	r3, [r3, #8]
 800d142:	2b00      	cmp	r3, #0
 800d144:	f000 8104 	beq.w	800d350 <LmhpComplianceOnMcpsIndication+0x3b4>
                    {
                        LmhpComplianceParams->StartPeripherals( );
 800d148:	4b3d      	ldr	r3, [pc, #244]	@ (800d240 <LmhpComplianceOnMcpsIndication+0x2a4>)
 800d14a:	681b      	ldr	r3, [r3, #0]
 800d14c:	689b      	ldr	r3, [r3, #8]
 800d14e:	4798      	blx	r3
                    }
                }
                break;
 800d150:	e0fe      	b.n	800d350 <LmhpComplianceOnMcpsIndication+0x3b4>
            case 1: /* (iii, iv) */
                ComplianceTestState.DataBufferSize = 2;
 800d152:	4b3a      	ldr	r3, [pc, #232]	@ (800d23c <LmhpComplianceOnMcpsIndication+0x2a0>)
 800d154:	2202      	movs	r2, #2
 800d156:	719a      	strb	r2, [r3, #6]
                break;
 800d158:	e0fd      	b.n	800d356 <LmhpComplianceOnMcpsIndication+0x3ba>
            case 2: /* Enable confirmed messages (v) */
                ComplianceTestState.IsTxConfirmed = true;
 800d15a:	4b38      	ldr	r3, [pc, #224]	@ (800d23c <LmhpComplianceOnMcpsIndication+0x2a0>)
 800d15c:	2201      	movs	r2, #1
 800d15e:	70da      	strb	r2, [r3, #3]
                ComplianceTestState.State = 1;
 800d160:	4b36      	ldr	r3, [pc, #216]	@ (800d23c <LmhpComplianceOnMcpsIndication+0x2a0>)
 800d162:	2201      	movs	r2, #1
 800d164:	709a      	strb	r2, [r3, #2]
                break;
 800d166:	e0f6      	b.n	800d356 <LmhpComplianceOnMcpsIndication+0x3ba>
            case 3:  /* Disable confirmed messages (vi) */
                ComplianceTestState.IsTxConfirmed = false;
 800d168:	4b34      	ldr	r3, [pc, #208]	@ (800d23c <LmhpComplianceOnMcpsIndication+0x2a0>)
 800d16a:	2200      	movs	r2, #0
 800d16c:	70da      	strb	r2, [r3, #3]
                ComplianceTestState.State = 1;
 800d16e:	4b33      	ldr	r3, [pc, #204]	@ (800d23c <LmhpComplianceOnMcpsIndication+0x2a0>)
 800d170:	2201      	movs	r2, #1
 800d172:	709a      	strb	r2, [r3, #2]
                break;
 800d174:	e0ef      	b.n	800d356 <LmhpComplianceOnMcpsIndication+0x3ba>
            case 4: /* (vii) */
                ComplianceTestState.DataBufferSize = mcpsIndication->BufferSize;
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	7b1a      	ldrb	r2, [r3, #12]
 800d17a:	4b30      	ldr	r3, [pc, #192]	@ (800d23c <LmhpComplianceOnMcpsIndication+0x2a0>)
 800d17c:	719a      	strb	r2, [r3, #6]

                ComplianceTestState.DataBuffer[0] = 4;
 800d17e:	4b2f      	ldr	r3, [pc, #188]	@ (800d23c <LmhpComplianceOnMcpsIndication+0x2a0>)
 800d180:	689b      	ldr	r3, [r3, #8]
 800d182:	2204      	movs	r2, #4
 800d184:	701a      	strb	r2, [r3, #0]
                for( uint8_t i = 1; i < MIN( ComplianceTestState.DataBufferSize, ComplianceTestState.DataBufferMaxSize ); i++ )
 800d186:	2301      	movs	r3, #1
 800d188:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 800d18c:	e012      	b.n	800d1b4 <LmhpComplianceOnMcpsIndication+0x218>
                {
                    ComplianceTestState.DataBuffer[i] = mcpsIndication->Buffer[i] + 1;
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	689a      	ldr	r2, [r3, #8]
 800d192:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 800d196:	4413      	add	r3, r2
 800d198:	781a      	ldrb	r2, [r3, #0]
 800d19a:	4b28      	ldr	r3, [pc, #160]	@ (800d23c <LmhpComplianceOnMcpsIndication+0x2a0>)
 800d19c:	6899      	ldr	r1, [r3, #8]
 800d19e:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 800d1a2:	440b      	add	r3, r1
 800d1a4:	3201      	adds	r2, #1
 800d1a6:	b2d2      	uxtb	r2, r2
 800d1a8:	701a      	strb	r2, [r3, #0]
                for( uint8_t i = 1; i < MIN( ComplianceTestState.DataBufferSize, ComplianceTestState.DataBufferMaxSize ); i++ )
 800d1aa:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 800d1ae:	3301      	adds	r3, #1
 800d1b0:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 800d1b4:	4b21      	ldr	r3, [pc, #132]	@ (800d23c <LmhpComplianceOnMcpsIndication+0x2a0>)
 800d1b6:	795a      	ldrb	r2, [r3, #5]
 800d1b8:	4b20      	ldr	r3, [pc, #128]	@ (800d23c <LmhpComplianceOnMcpsIndication+0x2a0>)
 800d1ba:	799b      	ldrb	r3, [r3, #6]
 800d1bc:	4293      	cmp	r3, r2
 800d1be:	bf28      	it	cs
 800d1c0:	4613      	movcs	r3, r2
 800d1c2:	b2db      	uxtb	r3, r3
 800d1c4:	f897 2087 	ldrb.w	r2, [r7, #135]	@ 0x87
 800d1c8:	429a      	cmp	r2, r3
 800d1ca:	d3e0      	bcc.n	800d18e <LmhpComplianceOnMcpsIndication+0x1f2>
                }
                break;
 800d1cc:	e0c3      	b.n	800d356 <LmhpComplianceOnMcpsIndication+0x3ba>
            case 5: /* (viii) */
                {
                    MlmeReq_t mlmeReq;

                    mlmeReq.Type = MLME_LINK_CHECK;
 800d1ce:	2305      	movs	r3, #5
 800d1d0:	f887 3070 	strb.w	r3, [r7, #112]	@ 0x70

                    LoRaMacMlmeRequest( &mlmeReq );
 800d1d4:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 800d1d8:	4618      	mov	r0, r3
 800d1da:	f004 fbd9 	bl	8011990 <LoRaMacMlmeRequest>
                }
                break;
 800d1de:	e0ba      	b.n	800d356 <LmhpComplianceOnMcpsIndication+0x3ba>
            case 6: /* (ix) */
                {
                    MibRequestConfirm_t mibReq;

                    TimerStop( &ComplianceTxNextPacketTimer );
 800d1e0:	4819      	ldr	r0, [pc, #100]	@ (800d248 <LmhpComplianceOnMcpsIndication+0x2ac>)
 800d1e2:	f00d fbdd 	bl	801a9a0 <UTIL_TIMER_Stop>

                    /* Disable TestMode and revert back to normal operation */
                    /* Disable compliance test mode and reset the downlink counter. */
                    ComplianceTestState.DownLinkCounter = 0;
 800d1e6:	4b15      	ldr	r3, [pc, #84]	@ (800d23c <LmhpComplianceOnMcpsIndication+0x2a0>)
 800d1e8:	2200      	movs	r2, #0
 800d1ea:	819a      	strh	r2, [r3, #12]
                    ComplianceTestState.IsRunning = false;
 800d1ec:	4b13      	ldr	r3, [pc, #76]	@ (800d23c <LmhpComplianceOnMcpsIndication+0x2a0>)
 800d1ee:	2200      	movs	r2, #0
 800d1f0:	705a      	strb	r2, [r3, #1]

                    /* Restore previous ADR setting */
                    mibReq.Type = MIB_ADR;
 800d1f2:	2304      	movs	r3, #4
 800d1f4:	733b      	strb	r3, [r7, #12]
                    mibReq.Param.AdrEnable = LmhpComplianceParams->AdrEnabled;
 800d1f6:	4b12      	ldr	r3, [pc, #72]	@ (800d240 <LmhpComplianceOnMcpsIndication+0x2a4>)
 800d1f8:	681b      	ldr	r3, [r3, #0]
 800d1fa:	781b      	ldrb	r3, [r3, #0]
 800d1fc:	743b      	strb	r3, [r7, #16]
                    LoRaMacMibSetRequestConfirm( &mibReq );
 800d1fe:	f107 030c 	add.w	r3, r7, #12
 800d202:	4618      	mov	r0, r3
 800d204:	f004 f80e 	bl	8011224 <LoRaMacMibSetRequestConfirm>

                    /* Enable duty cycle enforcement */
                    LoRaMacTestSetDutyCycleOn( LmhpComplianceParams->DutyCycleEnabled );
 800d208:	4b0d      	ldr	r3, [pc, #52]	@ (800d240 <LmhpComplianceOnMcpsIndication+0x2a4>)
 800d20a:	681b      	ldr	r3, [r3, #0]
 800d20c:	785b      	ldrb	r3, [r3, #1]
 800d20e:	4618      	mov	r0, r3
 800d210:	f004 fe06 	bl	8011e20 <LoRaMacTestSetDutyCycleOn>

                    /* Restart peripherals */
                    if( LmhpComplianceParams->StartPeripherals != NULL )
 800d214:	4b0a      	ldr	r3, [pc, #40]	@ (800d240 <LmhpComplianceOnMcpsIndication+0x2a4>)
 800d216:	681b      	ldr	r3, [r3, #0]
 800d218:	689b      	ldr	r3, [r3, #8]
 800d21a:	2b00      	cmp	r3, #0
 800d21c:	d003      	beq.n	800d226 <LmhpComplianceOnMcpsIndication+0x28a>
                    {
                        LmhpComplianceParams->StartPeripherals( );
 800d21e:	4b08      	ldr	r3, [pc, #32]	@ (800d240 <LmhpComplianceOnMcpsIndication+0x2a4>)
 800d220:	681b      	ldr	r3, [r3, #0]
 800d222:	689b      	ldr	r3, [r3, #8]
 800d224:	4798      	blx	r3
                    }

                    if( LmhpCompliancePackage.OnJoinRequest != NULL )
 800d226:	4b09      	ldr	r3, [pc, #36]	@ (800d24c <LmhpComplianceOnMcpsIndication+0x2b0>)
 800d228:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d22a:	2b00      	cmp	r3, #0
 800d22c:	f000 8092 	beq.w	800d354 <LmhpComplianceOnMcpsIndication+0x3b8>
                    {
                        LmhpCompliancePackage.OnJoinRequest( ACTIVATION_TYPE_OTAA, true );
 800d230:	4b06      	ldr	r3, [pc, #24]	@ (800d24c <LmhpComplianceOnMcpsIndication+0x2b0>)
 800d232:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d234:	2101      	movs	r1, #1
 800d236:	2002      	movs	r0, #2
 800d238:	4798      	blx	r3
                    }
                }
                break;
 800d23a:	e08b      	b.n	800d354 <LmhpComplianceOnMcpsIndication+0x3b8>
 800d23c:	20000614 	.word	0x20000614
 800d240:	20000628 	.word	0x20000628
 800d244:	0800d36d 	.word	0x0800d36d
 800d248:	200005fc 	.word	0x200005fc
 800d24c:	200000c4 	.word	0x200000c4
            case 7: /* (x) */
                {
                    MlmeReq_t mlmeReq;
                    if( mcpsIndication->BufferSize == 3 )
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	7b1b      	ldrb	r3, [r3, #12]
 800d254:	2b03      	cmp	r3, #3
 800d256:	d113      	bne.n	800d280 <LmhpComplianceOnMcpsIndication+0x2e4>
                    {
                        mlmeReq.Type = MLME_TXCW;
 800d258:	2306      	movs	r3, #6
 800d25a:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
                        mlmeReq.Req.TxCw.Timeout = ( uint16_t )( ( mcpsIndication->Buffer[1] << 8 ) | mcpsIndication->Buffer[2] );
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	689b      	ldr	r3, [r3, #8]
 800d262:	3301      	adds	r3, #1
 800d264:	781b      	ldrb	r3, [r3, #0]
 800d266:	021b      	lsls	r3, r3, #8
 800d268:	b21a      	sxth	r2, r3
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	689b      	ldr	r3, [r3, #8]
 800d26e:	3302      	adds	r3, #2
 800d270:	781b      	ldrb	r3, [r3, #0]
 800d272:	b21b      	sxth	r3, r3
 800d274:	4313      	orrs	r3, r2
 800d276:	b21b      	sxth	r3, r3
 800d278:	b29b      	uxth	r3, r3
 800d27a:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60
 800d27e:	e032      	b.n	800d2e6 <LmhpComplianceOnMcpsIndication+0x34a>
                    }
                    else if( mcpsIndication->BufferSize == 7 )
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	7b1b      	ldrb	r3, [r3, #12]
 800d284:	2b07      	cmp	r3, #7
 800d286:	d12e      	bne.n	800d2e6 <LmhpComplianceOnMcpsIndication+0x34a>
                    {
                        mlmeReq.Type = MLME_TXCW_1;
 800d288:	2307      	movs	r3, #7
 800d28a:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
                        mlmeReq.Req.TxCw.Timeout = ( uint16_t )( ( mcpsIndication->Buffer[1] << 8 ) | mcpsIndication->Buffer[2] );
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	689b      	ldr	r3, [r3, #8]
 800d292:	3301      	adds	r3, #1
 800d294:	781b      	ldrb	r3, [r3, #0]
 800d296:	021b      	lsls	r3, r3, #8
 800d298:	b21a      	sxth	r2, r3
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	689b      	ldr	r3, [r3, #8]
 800d29e:	3302      	adds	r3, #2
 800d2a0:	781b      	ldrb	r3, [r3, #0]
 800d2a2:	b21b      	sxth	r3, r3
 800d2a4:	4313      	orrs	r3, r2
 800d2a6:	b21b      	sxth	r3, r3
 800d2a8:	b29b      	uxth	r3, r3
 800d2aa:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60
                        mlmeReq.Req.TxCw.Frequency = ( uint32_t )( ( mcpsIndication->Buffer[3] << 16 ) | ( mcpsIndication->Buffer[4] << 8 ) | mcpsIndication->Buffer[5] ) * 100;
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	689b      	ldr	r3, [r3, #8]
 800d2b2:	3303      	adds	r3, #3
 800d2b4:	781b      	ldrb	r3, [r3, #0]
 800d2b6:	041a      	lsls	r2, r3, #16
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	689b      	ldr	r3, [r3, #8]
 800d2bc:	3304      	adds	r3, #4
 800d2be:	781b      	ldrb	r3, [r3, #0]
 800d2c0:	021b      	lsls	r3, r3, #8
 800d2c2:	4313      	orrs	r3, r2
 800d2c4:	687a      	ldr	r2, [r7, #4]
 800d2c6:	6892      	ldr	r2, [r2, #8]
 800d2c8:	3205      	adds	r2, #5
 800d2ca:	7812      	ldrb	r2, [r2, #0]
 800d2cc:	4313      	orrs	r3, r2
 800d2ce:	461a      	mov	r2, r3
 800d2d0:	2364      	movs	r3, #100	@ 0x64
 800d2d2:	fb02 f303 	mul.w	r3, r2, r3
 800d2d6:	667b      	str	r3, [r7, #100]	@ 0x64
                        mlmeReq.Req.TxCw.Power = mcpsIndication->Buffer[6];
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	689b      	ldr	r3, [r3, #8]
 800d2dc:	3306      	adds	r3, #6
 800d2de:	781b      	ldrb	r3, [r3, #0]
 800d2e0:	b25b      	sxtb	r3, r3
 800d2e2:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
                    }
                    LoRaMacMlmeRequest( &mlmeReq );
 800d2e6:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800d2ea:	4618      	mov	r0, r3
 800d2ec:	f004 fb50 	bl	8011990 <LoRaMacMlmeRequest>
                    ComplianceTestState.State = 1;
 800d2f0:	4b1a      	ldr	r3, [pc, #104]	@ (800d35c <LmhpComplianceOnMcpsIndication+0x3c0>)
 800d2f2:	2201      	movs	r2, #1
 800d2f4:	709a      	strb	r2, [r3, #2]
                }
                break;
 800d2f6:	e02e      	b.n	800d356 <LmhpComplianceOnMcpsIndication+0x3ba>
            case 8: /* Send DeviceTimeReq */
                {
                    MlmeReq_t mlmeReq;

                    mlmeReq.Type = MLME_DEVICE_TIME;
 800d2f8:	230a      	movs	r3, #10
 800d2fa:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48

                    LoRaMacMlmeRequest( &mlmeReq );
 800d2fe:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800d302:	4618      	mov	r0, r3
 800d304:	f004 fb44 	bl	8011990 <LoRaMacMlmeRequest>
                }
                break;
 800d308:	e025      	b.n	800d356 <LmhpComplianceOnMcpsIndication+0x3ba>
            case 9: /* Switch end device Class */
                {
                    MibRequestConfirm_t mibReq;

                    mibReq.Type = MIB_DEVICE_CLASS;
 800d30a:	2300      	movs	r3, #0
 800d30c:	733b      	strb	r3, [r7, #12]
                    /* CLASS_A = 0, CLASS_B = 1, CLASS_C = 2 */
                    mibReq.Param.Class = ( DeviceClass_t )mcpsIndication->Buffer[1];;
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	689b      	ldr	r3, [r3, #8]
 800d312:	3301      	adds	r3, #1
 800d314:	781b      	ldrb	r3, [r3, #0]
 800d316:	743b      	strb	r3, [r7, #16]
                    LoRaMacMibSetRequestConfirm( &mibReq );
 800d318:	f107 030c 	add.w	r3, r7, #12
 800d31c:	4618      	mov	r0, r3
 800d31e:	f003 ff81 	bl	8011224 <LoRaMacMibSetRequestConfirm>
                }
                break;
 800d322:	e018      	b.n	800d356 <LmhpComplianceOnMcpsIndication+0x3ba>
            case 10: /* Send PingSlotInfoReq */
                {
                    MlmeReq_t mlmeReq;

                    mlmeReq.Type = MLME_PING_SLOT_INFO;
 800d324:	230d      	movs	r3, #13
 800d326:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
                    mlmeReq.Req.PingSlotInfo.PingSlot.Value = mcpsIndication->Buffer[1];
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	689b      	ldr	r3, [r3, #8]
 800d32e:	785b      	ldrb	r3, [r3, #1]
 800d330:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38

                    LoRaMacMlmeRequest( &mlmeReq );
 800d334:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800d338:	4618      	mov	r0, r3
 800d33a:	f004 fb29 	bl	8011990 <LoRaMacMlmeRequest>
                }
                break;
 800d33e:	e00a      	b.n	800d356 <LmhpComplianceOnMcpsIndication+0x3ba>
        return;
 800d340:	bf00      	nop
 800d342:	e008      	b.n	800d356 <LmhpComplianceOnMcpsIndication+0x3ba>
        return;
 800d344:	bf00      	nop
 800d346:	e006      	b.n	800d356 <LmhpComplianceOnMcpsIndication+0x3ba>
        return;
 800d348:	bf00      	nop
 800d34a:	e004      	b.n	800d356 <LmhpComplianceOnMcpsIndication+0x3ba>
            default:
                break;
 800d34c:	bf00      	nop
 800d34e:	e002      	b.n	800d356 <LmhpComplianceOnMcpsIndication+0x3ba>
                break;
 800d350:	bf00      	nop
 800d352:	e000      	b.n	800d356 <LmhpComplianceOnMcpsIndication+0x3ba>
                break;
 800d354:	bf00      	nop
        }
    }
}
 800d356:	3788      	adds	r7, #136	@ 0x88
 800d358:	46bd      	mov	sp, r7
 800d35a:	bd80      	pop	{r7, pc}
 800d35c:	20000614 	.word	0x20000614

0800d360 <LmhpComplianceProcess>:

static void LmhpComplianceProcess( void )
{
 800d360:	b480      	push	{r7}
 800d362:	af00      	add	r7, sp, #0
    /* Nothing to process */
}
 800d364:	bf00      	nop
 800d366:	46bd      	mov	sp, r7
 800d368:	bc80      	pop	{r7}
 800d36a:	4770      	bx	lr

0800d36c <OnComplianceTxNextPacketTimerEvent>:

static void OnComplianceTxNextPacketTimerEvent( void *context )
{
 800d36c:	b580      	push	{r7, lr}
 800d36e:	b082      	sub	sp, #8
 800d370:	af00      	add	r7, sp, #0
 800d372:	6078      	str	r0, [r7, #4]
    LmhpComplianceTxProcess( );
 800d374:	f7ff fd9c 	bl	800ceb0 <LmhpComplianceTxProcess>
}
 800d378:	bf00      	nop
 800d37a:	3708      	adds	r7, #8
 800d37c:	46bd      	mov	sp, r7
 800d37e:	bd80      	pop	{r7, pc}

0800d380 <LmhpPackagesRegistrationInit>:

/* Private variables ---------------------------------------------------------*/

/* Exported functions ---------------------------------------------------------*/
LmHandlerErrorStatus_t LmhpPackagesRegistrationInit( Version_t *fwVersion )
{
 800d380:	b480      	push	{r7}
 800d382:	b083      	sub	sp, #12
 800d384:	af00      	add	r7, sp, #0
 800d386:	6078      	str	r0, [r7, #4]
        return LORAMAC_HANDLER_ERROR;
    }
#endif /* LORAWAN_PACKAGES_VERSION */
#endif /* LORAWAN_DATA_DISTRIB_MGT */

    return LORAMAC_HANDLER_SUCCESS;
 800d388:	2300      	movs	r3, #0
}
 800d38a:	4618      	mov	r0, r3
 800d38c:	370c      	adds	r7, #12
 800d38e:	46bd      	mov	sp, r7
 800d390:	bc80      	pop	{r7}
 800d392:	4770      	bx	lr

0800d394 <LmhpPackagesRegister>:

LmHandlerErrorStatus_t LmhpPackagesRegister( uint8_t id, LmhPackage_t **package )
{
 800d394:	b480      	push	{r7}
 800d396:	b083      	sub	sp, #12
 800d398:	af00      	add	r7, sp, #0
 800d39a:	4603      	mov	r3, r0
 800d39c:	6039      	str	r1, [r7, #0]
 800d39e:	71fb      	strb	r3, [r7, #7]
                break;
            }
    }
    return LORAMAC_HANDLER_SUCCESS;
#else
    return LORAMAC_HANDLER_ERROR;
 800d3a0:	f04f 33ff 	mov.w	r3, #4294967295
#endif /* LORAWAN_DATA_DISTRIB_MGT */
}
 800d3a4:	4618      	mov	r0, r3
 800d3a6:	370c      	adds	r7, #12
 800d3a8:	46bd      	mov	sp, r7
 800d3aa:	bc80      	pop	{r7}
 800d3ac:	4770      	bx	lr
	...

0800d3b0 <OnRadioTxDone>:
}RxDoneParams_t;

static RxDoneParams_t RxDoneParams;

static void OnRadioTxDone( void )
{
 800d3b0:	b590      	push	{r4, r7, lr}
 800d3b2:	b083      	sub	sp, #12
 800d3b4:	af00      	add	r7, sp, #0
    TxDoneParams.CurTime = TimerGetCurrentTime( );
 800d3b6:	f00d fb8d 	bl	801aad4 <UTIL_TIMER_GetCurrentTime>
 800d3ba:	4603      	mov	r3, r0
 800d3bc:	4a0f      	ldr	r2, [pc, #60]	@ (800d3fc <OnRadioTxDone+0x4c>)
 800d3be:	6013      	str	r3, [r2, #0]
    MacCtx.LastTxSysTime = SysTimeGet( );
 800d3c0:	4c0f      	ldr	r4, [pc, #60]	@ (800d400 <OnRadioTxDone+0x50>)
 800d3c2:	463b      	mov	r3, r7
 800d3c4:	4618      	mov	r0, r3
 800d3c6:	f00c fd85 	bl	8019ed4 <SysTimeGet>
 800d3ca:	f504 734e 	add.w	r3, r4, #824	@ 0x338
 800d3ce:	463a      	mov	r2, r7
 800d3d0:	e892 0003 	ldmia.w	r2, {r0, r1}
 800d3d4:	e883 0003 	stmia.w	r3, {r0, r1}

    LoRaMacRadioEvents.Events.TxDone = 1;
 800d3d8:	4a0a      	ldr	r2, [pc, #40]	@ (800d404 <OnRadioTxDone+0x54>)
 800d3da:	7813      	ldrb	r3, [r2, #0]
 800d3dc:	f043 0310 	orr.w	r3, r3, #16
 800d3e0:	7013      	strb	r3, [r2, #0]

    OnMacProcessNotify( );
 800d3e2:	f003 f8ef 	bl	80105c4 <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC txDone\r\n" );
 800d3e6:	4b08      	ldr	r3, [pc, #32]	@ (800d408 <OnRadioTxDone+0x58>)
 800d3e8:	2201      	movs	r2, #1
 800d3ea:	2100      	movs	r1, #0
 800d3ec:	2002      	movs	r0, #2
 800d3ee:	f00d fc61 	bl	801acb4 <UTIL_ADV_TRACE_COND_FSend>
}
 800d3f2:	bf00      	nop
 800d3f4:	370c      	adds	r7, #12
 800d3f6:	46bd      	mov	sp, r7
 800d3f8:	bd90      	pop	{r4, r7, pc}
 800d3fa:	bf00      	nop
 800d3fc:	200012a8 	.word	0x200012a8
 800d400:	2000062c 	.word	0x2000062c
 800d404:	200012a4 	.word	0x200012a4
 800d408:	0801b624 	.word	0x0801b624

0800d40c <OnRadioRxDone>:

static void OnRadioRxDone( uint8_t *payload, uint16_t size, int16_t rssi, int8_t snr )
{
 800d40c:	b580      	push	{r7, lr}
 800d40e:	b084      	sub	sp, #16
 800d410:	af00      	add	r7, sp, #0
 800d412:	60f8      	str	r0, [r7, #12]
 800d414:	4608      	mov	r0, r1
 800d416:	4611      	mov	r1, r2
 800d418:	461a      	mov	r2, r3
 800d41a:	4603      	mov	r3, r0
 800d41c:	817b      	strh	r3, [r7, #10]
 800d41e:	460b      	mov	r3, r1
 800d420:	813b      	strh	r3, [r7, #8]
 800d422:	4613      	mov	r3, r2
 800d424:	71fb      	strb	r3, [r7, #7]
    RxDoneParams.LastRxDone = TimerGetCurrentTime( );
 800d426:	f00d fb55 	bl	801aad4 <UTIL_TIMER_GetCurrentTime>
 800d42a:	4603      	mov	r3, r0
 800d42c:	4a0f      	ldr	r2, [pc, #60]	@ (800d46c <OnRadioRxDone+0x60>)
 800d42e:	6013      	str	r3, [r2, #0]
    RxDoneParams.Payload = payload;
 800d430:	4a0e      	ldr	r2, [pc, #56]	@ (800d46c <OnRadioRxDone+0x60>)
 800d432:	68fb      	ldr	r3, [r7, #12]
 800d434:	6053      	str	r3, [r2, #4]
    RxDoneParams.Size = size;
 800d436:	4a0d      	ldr	r2, [pc, #52]	@ (800d46c <OnRadioRxDone+0x60>)
 800d438:	897b      	ldrh	r3, [r7, #10]
 800d43a:	8113      	strh	r3, [r2, #8]
    RxDoneParams.Rssi = rssi;
 800d43c:	4a0b      	ldr	r2, [pc, #44]	@ (800d46c <OnRadioRxDone+0x60>)
 800d43e:	893b      	ldrh	r3, [r7, #8]
 800d440:	8153      	strh	r3, [r2, #10]
    RxDoneParams.Snr = snr;
 800d442:	4a0a      	ldr	r2, [pc, #40]	@ (800d46c <OnRadioRxDone+0x60>)
 800d444:	79fb      	ldrb	r3, [r7, #7]
 800d446:	7313      	strb	r3, [r2, #12]

    LoRaMacRadioEvents.Events.RxDone = 1;
 800d448:	4a09      	ldr	r2, [pc, #36]	@ (800d470 <OnRadioRxDone+0x64>)
 800d44a:	7813      	ldrb	r3, [r2, #0]
 800d44c:	f043 0308 	orr.w	r3, r3, #8
 800d450:	7013      	strb	r3, [r2, #0]
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    LoRaMacRadioEvents.Events.RxProcessPending = 1;
#endif /* LORAMAC_VERSION */

    OnMacProcessNotify( );
 800d452:	f003 f8b7 	bl	80105c4 <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxDone\r\n" );
 800d456:	4b07      	ldr	r3, [pc, #28]	@ (800d474 <OnRadioRxDone+0x68>)
 800d458:	2201      	movs	r2, #1
 800d45a:	2100      	movs	r1, #0
 800d45c:	2002      	movs	r0, #2
 800d45e:	f00d fc29 	bl	801acb4 <UTIL_ADV_TRACE_COND_FSend>
}
 800d462:	bf00      	nop
 800d464:	3710      	adds	r7, #16
 800d466:	46bd      	mov	sp, r7
 800d468:	bd80      	pop	{r7, pc}
 800d46a:	bf00      	nop
 800d46c:	200012ac 	.word	0x200012ac
 800d470:	200012a4 	.word	0x200012a4
 800d474:	0801b634 	.word	0x0801b634

0800d478 <OnRadioTxTimeout>:

static void OnRadioTxTimeout( void )
{
 800d478:	b580      	push	{r7, lr}
 800d47a:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.TxTimeout = 1;
 800d47c:	4a07      	ldr	r2, [pc, #28]	@ (800d49c <OnRadioTxTimeout+0x24>)
 800d47e:	7813      	ldrb	r3, [r2, #0]
 800d480:	f043 0304 	orr.w	r3, r3, #4
 800d484:	7013      	strb	r3, [r2, #0]

    OnMacProcessNotify( );
 800d486:	f003 f89d 	bl	80105c4 <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC txTimeOut\r\n" );
 800d48a:	4b05      	ldr	r3, [pc, #20]	@ (800d4a0 <OnRadioTxTimeout+0x28>)
 800d48c:	2201      	movs	r2, #1
 800d48e:	2100      	movs	r1, #0
 800d490:	2002      	movs	r0, #2
 800d492:	f00d fc0f 	bl	801acb4 <UTIL_ADV_TRACE_COND_FSend>
}
 800d496:	bf00      	nop
 800d498:	bd80      	pop	{r7, pc}
 800d49a:	bf00      	nop
 800d49c:	200012a4 	.word	0x200012a4
 800d4a0:	0801b644 	.word	0x0801b644

0800d4a4 <OnRadioRxError>:

static void OnRadioRxError( void )
{
 800d4a4:	b580      	push	{r7, lr}
 800d4a6:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.RxError = 1;
 800d4a8:	4a04      	ldr	r2, [pc, #16]	@ (800d4bc <OnRadioRxError+0x18>)
 800d4aa:	7813      	ldrb	r3, [r2, #0]
 800d4ac:	f043 0302 	orr.w	r3, r3, #2
 800d4b0:	7013      	strb	r3, [r2, #0]

    OnMacProcessNotify( );
 800d4b2:	f003 f887 	bl	80105c4 <OnMacProcessNotify>
}
 800d4b6:	bf00      	nop
 800d4b8:	bd80      	pop	{r7, pc}
 800d4ba:	bf00      	nop
 800d4bc:	200012a4 	.word	0x200012a4

0800d4c0 <OnRadioRxTimeout>:

static void OnRadioRxTimeout( void )
{
 800d4c0:	b580      	push	{r7, lr}
 800d4c2:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.RxTimeout = 1;
 800d4c4:	4a07      	ldr	r2, [pc, #28]	@ (800d4e4 <OnRadioRxTimeout+0x24>)
 800d4c6:	7813      	ldrb	r3, [r2, #0]
 800d4c8:	f043 0301 	orr.w	r3, r3, #1
 800d4cc:	7013      	strb	r3, [r2, #0]

    OnMacProcessNotify( );
 800d4ce:	f003 f879 	bl	80105c4 <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxTimeOut\r\n" );
 800d4d2:	4b05      	ldr	r3, [pc, #20]	@ (800d4e8 <OnRadioRxTimeout+0x28>)
 800d4d4:	2201      	movs	r2, #1
 800d4d6:	2100      	movs	r1, #0
 800d4d8:	2002      	movs	r0, #2
 800d4da:	f00d fbeb 	bl	801acb4 <UTIL_ADV_TRACE_COND_FSend>
}
 800d4de:	bf00      	nop
 800d4e0:	bd80      	pop	{r7, pc}
 800d4e2:	bf00      	nop
 800d4e4:	200012a4 	.word	0x200012a4
 800d4e8:	0801b654 	.word	0x0801b654

0800d4ec <UpdateRxSlotIdleState>:

static void UpdateRxSlotIdleState( void )
{
 800d4ec:	b480      	push	{r7}
 800d4ee:	af00      	add	r7, sp, #0
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800d4f0:	4b08      	ldr	r3, [pc, #32]	@ (800d514 <UpdateRxSlotIdleState+0x28>)
 800d4f2:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800d4f6:	2b02      	cmp	r3, #2
 800d4f8:	d004      	beq.n	800d504 <UpdateRxSlotIdleState+0x18>
    {
        MacCtx.RxSlot = RX_SLOT_NONE;
 800d4fa:	4b07      	ldr	r3, [pc, #28]	@ (800d518 <UpdateRxSlotIdleState+0x2c>)
 800d4fc:	2206      	movs	r2, #6
 800d4fe:	f883 2480 	strb.w	r2, [r3, #1152]	@ 0x480
    }
    else
    {
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
    }
}
 800d502:	e003      	b.n	800d50c <UpdateRxSlotIdleState+0x20>
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
 800d504:	4b04      	ldr	r3, [pc, #16]	@ (800d518 <UpdateRxSlotIdleState+0x2c>)
 800d506:	2202      	movs	r2, #2
 800d508:	f883 2480 	strb.w	r2, [r3, #1152]	@ 0x480
}
 800d50c:	bf00      	nop
 800d50e:	46bd      	mov	sp, r7
 800d510:	bc80      	pop	{r7}
 800d512:	4770      	bx	lr
 800d514:	20000b34 	.word	0x20000b34
 800d518:	2000062c 	.word	0x2000062c

0800d51c <ProcessRadioTxDone>:

static void ProcessRadioTxDone( void )
{
 800d51c:	b580      	push	{r7, lr}
 800d51e:	b092      	sub	sp, #72	@ 0x48
 800d520:	af02      	add	r7, sp, #8
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    SetBandTxDoneParams_t txDone;

    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800d522:	4b50      	ldr	r3, [pc, #320]	@ (800d664 <ProcessRadioTxDone+0x148>)
 800d524:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800d528:	2b02      	cmp	r3, #2
 800d52a:	d002      	beq.n	800d532 <ProcessRadioTxDone+0x16>
    {
        Radio.Sleep( );
 800d52c:	4b4e      	ldr	r3, [pc, #312]	@ (800d668 <ProcessRadioTxDone+0x14c>)
 800d52e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d530:	4798      	blx	r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d532:	f3ef 8310 	mrs	r3, PRIMASK
 800d536:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 800d538:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    }
#if ( !defined(DISABLE_LORAWAN_RX_WINDOW) || (DISABLE_LORAWAN_RX_WINDOW == 0) )
    // Setup timers
    CRITICAL_SECTION_BEGIN( );
 800d53a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  __ASM volatile ("cpsid i" : : : "memory");
 800d53c:	b672      	cpsid	i
}
 800d53e:	bf00      	nop
    uint32_t offset = TimerGetCurrentTime( ) - TxDoneParams.CurTime;
 800d540:	f00d fac8 	bl	801aad4 <UTIL_TIMER_GetCurrentTime>
 800d544:	4602      	mov	r2, r0
 800d546:	4b49      	ldr	r3, [pc, #292]	@ (800d66c <ProcessRadioTxDone+0x150>)
 800d548:	681b      	ldr	r3, [r3, #0]
 800d54a:	1ad3      	subs	r3, r2, r3
 800d54c:	63bb      	str	r3, [r7, #56]	@ 0x38
    TimerSetValue( &MacCtx.RxWindowTimer1, MacCtx.RxWindow1Delay - offset );
 800d54e:	4b48      	ldr	r3, [pc, #288]	@ (800d670 <ProcessRadioTxDone+0x154>)
 800d550:	f8d3 23b0 	ldr.w	r2, [r3, #944]	@ 0x3b0
 800d554:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d556:	1ad3      	subs	r3, r2, r3
 800d558:	4619      	mov	r1, r3
 800d55a:	4846      	ldr	r0, [pc, #280]	@ (800d674 <ProcessRadioTxDone+0x158>)
 800d55c:	f00d fa90 	bl	801aa80 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer1 );
 800d560:	4844      	ldr	r0, [pc, #272]	@ (800d674 <ProcessRadioTxDone+0x158>)
 800d562:	f00d f9af 	bl	801a8c4 <UTIL_TIMER_Start>
    TimerSetValue( &MacCtx.RxWindowTimer2, MacCtx.RxWindow2Delay - offset );
 800d566:	4b42      	ldr	r3, [pc, #264]	@ (800d670 <ProcessRadioTxDone+0x154>)
 800d568:	f8d3 23b4 	ldr.w	r2, [r3, #948]	@ 0x3b4
 800d56c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d56e:	1ad3      	subs	r3, r2, r3
 800d570:	4619      	mov	r1, r3
 800d572:	4841      	ldr	r0, [pc, #260]	@ (800d678 <ProcessRadioTxDone+0x15c>)
 800d574:	f00d fa84 	bl	801aa80 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer2 );
 800d578:	483f      	ldr	r0, [pc, #252]	@ (800d678 <ProcessRadioTxDone+0x15c>)
 800d57a:	f00d f9a3 	bl	801a8c4 <UTIL_TIMER_Start>
 800d57e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d580:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d582:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d584:	f383 8810 	msr	PRIMASK, r3
}
 800d588:	bf00      	nop
        MacCtx.MacFlags.Bits.MacDone = 1;
    }
#endif /* DISABLE_LORAWAN_RX_WINDOW */

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) || ( MacCtx.NodeAckRequested == true ) )
 800d58a:	4b36      	ldr	r3, [pc, #216]	@ (800d664 <ProcessRadioTxDone+0x148>)
 800d58c:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800d590:	2b02      	cmp	r3, #2
 800d592:	d004      	beq.n	800d59e <ProcessRadioTxDone+0x82>
 800d594:	4b36      	ldr	r3, [pc, #216]	@ (800d670 <ProcessRadioTxDone+0x154>)
 800d596:	f893 3410 	ldrb.w	r3, [r3, #1040]	@ 0x410
 800d59a:	2b00      	cmp	r3, #0
 800d59c:	d019      	beq.n	800d5d2 <ProcessRadioTxDone+0xb6>
    {
        getPhy.Attribute = PHY_ACK_TIMEOUT;
 800d59e:	2316      	movs	r3, #22
 800d5a0:	f887 3020 	strb.w	r3, [r7, #32]
        phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800d5a4:	4b2f      	ldr	r3, [pc, #188]	@ (800d664 <ProcessRadioTxDone+0x148>)
 800d5a6:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800d5aa:	f107 0220 	add.w	r2, r7, #32
 800d5ae:	4611      	mov	r1, r2
 800d5b0:	4618      	mov	r0, r3
 800d5b2:	f006 fd36 	bl	8014022 <RegionGetPhyParam>
 800d5b6:	4603      	mov	r3, r0
 800d5b8:	61fb      	str	r3, [r7, #28]
        TimerSetValue( &MacCtx.AckTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
 800d5ba:	4b2d      	ldr	r3, [pc, #180]	@ (800d670 <ProcessRadioTxDone+0x154>)
 800d5bc:	f8d3 23b4 	ldr.w	r2, [r3, #948]	@ 0x3b4
 800d5c0:	69fb      	ldr	r3, [r7, #28]
 800d5c2:	4413      	add	r3, r2
 800d5c4:	4619      	mov	r1, r3
 800d5c6:	482d      	ldr	r0, [pc, #180]	@ (800d67c <ProcessRadioTxDone+0x160>)
 800d5c8:	f00d fa5a 	bl	801aa80 <UTIL_TIMER_SetPeriod>
        TimerStart( &MacCtx.AckTimeoutTimer );
 800d5cc:	482b      	ldr	r0, [pc, #172]	@ (800d67c <ProcessRadioTxDone+0x160>)
 800d5ce:	f00d f979 	bl	801a8c4 <UTIL_TIMER_Start>
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
    }
#endif /* LORAMAC_VERSION */

    // Update Aggregated last tx done time
    Nvm.MacGroup1.LastTxDoneTime = TxDoneParams.CurTime;
 800d5d2:	4b26      	ldr	r3, [pc, #152]	@ (800d66c <ProcessRadioTxDone+0x150>)
 800d5d4:	681b      	ldr	r3, [r3, #0]
 800d5d6:	4a23      	ldr	r2, [pc, #140]	@ (800d664 <ProcessRadioTxDone+0x148>)
 800d5d8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    // Update last tx done time for the current channel
    txDone.Channel = MacCtx.Channel;
 800d5da:	4b25      	ldr	r3, [pc, #148]	@ (800d670 <ProcessRadioTxDone+0x154>)
 800d5dc:	f893 3411 	ldrb.w	r3, [r3, #1041]	@ 0x411
 800d5e0:	723b      	strb	r3, [r7, #8]
    txDone.LastTxDoneTime = TxDoneParams.CurTime;
 800d5e2:	4b22      	ldr	r3, [pc, #136]	@ (800d66c <ProcessRadioTxDone+0x150>)
 800d5e4:	681b      	ldr	r3, [r3, #0]
 800d5e6:	60fb      	str	r3, [r7, #12]
    txDone.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 800d5e8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800d5ec:	4618      	mov	r0, r3
 800d5ee:	f00c fca9 	bl	8019f44 <SysTimeGetMcuTime>
 800d5f2:	4638      	mov	r0, r7
 800d5f4:	4b1b      	ldr	r3, [pc, #108]	@ (800d664 <ProcessRadioTxDone+0x148>)
 800d5f6:	f8d3 2124 	ldr.w	r2, [r3, #292]	@ 0x124
 800d5fa:	9200      	str	r2, [sp, #0]
 800d5fc:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 800d600:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 800d604:	ca06      	ldmia	r2, {r1, r2}
 800d606:	f00c fbfe 	bl	8019e06 <SysTimeSub>
 800d60a:	f107 0314 	add.w	r3, r7, #20
 800d60e:	463a      	mov	r2, r7
 800d610:	e892 0003 	ldmia.w	r2, {r0, r1}
 800d614:	e883 0003 	stmia.w	r3, {r0, r1}
    txDone.LastTxAirTime = MacCtx.TxTimeOnAir;
 800d618:	4b15      	ldr	r3, [pc, #84]	@ (800d670 <ProcessRadioTxDone+0x154>)
 800d61a:	f8d3 3414 	ldr.w	r3, [r3, #1044]	@ 0x414
 800d61e:	613b      	str	r3, [r7, #16]
    txDone.Joined  = true;
 800d620:	2301      	movs	r3, #1
 800d622:	727b      	strb	r3, [r7, #9]
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800d624:	4b0f      	ldr	r3, [pc, #60]	@ (800d664 <ProcessRadioTxDone+0x148>)
 800d626:	f893 312c 	ldrb.w	r3, [r3, #300]	@ 0x12c
 800d62a:	2b00      	cmp	r3, #0
 800d62c:	d101      	bne.n	800d632 <ProcessRadioTxDone+0x116>
    {
        txDone.Joined  = false;
 800d62e:	2300      	movs	r3, #0
 800d630:	727b      	strb	r3, [r7, #9]
    }

    RegionSetBandTxDone( Nvm.MacGroup2.Region, &txDone );
 800d632:	4b0c      	ldr	r3, [pc, #48]	@ (800d664 <ProcessRadioTxDone+0x148>)
 800d634:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800d638:	f107 0208 	add.w	r2, r7, #8
 800d63c:	4611      	mov	r1, r2
 800d63e:	4618      	mov	r0, r3
 800d640:	f006 fd07 	bl	8014052 <RegionSetBandTxDone>

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    if( MacCtx.NodeAckRequested == false )
 800d644:	4b0a      	ldr	r3, [pc, #40]	@ (800d670 <ProcessRadioTxDone+0x154>)
 800d646:	f893 3410 	ldrb.w	r3, [r3, #1040]	@ 0x410
 800d64a:	f083 0301 	eor.w	r3, r3, #1
 800d64e:	b2db      	uxtb	r3, r3
 800d650:	2b00      	cmp	r3, #0
 800d652:	d003      	beq.n	800d65c <ProcessRadioTxDone+0x140>
    {
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800d654:	4b06      	ldr	r3, [pc, #24]	@ (800d670 <ProcessRadioTxDone+0x154>)
 800d656:	2200      	movs	r2, #0
 800d658:	f883 2435 	strb.w	r2, [r3, #1077]	@ 0x435
    }
#endif /* LORAMAC_VERSION */
}
 800d65c:	bf00      	nop
 800d65e:	3740      	adds	r7, #64	@ 0x40
 800d660:	46bd      	mov	sp, r7
 800d662:	bd80      	pop	{r7, pc}
 800d664:	20000b34 	.word	0x20000b34
 800d668:	0801bd08 	.word	0x0801bd08
 800d66c:	200012a8 	.word	0x200012a8
 800d670:	2000062c 	.word	0x2000062c
 800d674:	200009ac 	.word	0x200009ac
 800d678:	200009c4 	.word	0x200009c4
 800d67c:	20000a20 	.word	0x20000a20

0800d680 <PrepareRxDoneAbort>:

static void PrepareRxDoneAbort( void )
{
 800d680:	b580      	push	{r7, lr}
 800d682:	af00      	add	r7, sp, #0
    MacCtx.MacState |= LORAMAC_RX_ABORT;
 800d684:	4b10      	ldr	r3, [pc, #64]	@ (800d6c8 <PrepareRxDoneAbort+0x48>)
 800d686:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800d68a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d68e:	4a0e      	ldr	r2, [pc, #56]	@ (800d6c8 <PrepareRxDoneAbort+0x48>)
 800d690:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340

    if( MacCtx.NodeAckRequested == true )
 800d694:	4b0c      	ldr	r3, [pc, #48]	@ (800d6c8 <PrepareRxDoneAbort+0x48>)
 800d696:	f893 3410 	ldrb.w	r3, [r3, #1040]	@ 0x410
 800d69a:	2b00      	cmp	r3, #0
 800d69c:	d002      	beq.n	800d6a4 <PrepareRxDoneAbort+0x24>
    {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        OnAckTimeoutTimerEvent( NULL );
 800d69e:	2000      	movs	r0, #0
 800d6a0:	f001 f950 	bl	800e944 <OnAckTimeoutTimerEvent>
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        OnRetransmitTimeoutTimerEvent( NULL );
#endif /* LORAMAC_VERSION */
    }

    MacCtx.MacFlags.Bits.McpsInd = 1;
 800d6a4:	4a08      	ldr	r2, [pc, #32]	@ (800d6c8 <PrepareRxDoneAbort+0x48>)
 800d6a6:	f892 3481 	ldrb.w	r3, [r2, #1153]	@ 0x481
 800d6aa:	f043 0302 	orr.w	r3, r3, #2
 800d6ae:	f882 3481 	strb.w	r3, [r2, #1153]	@ 0x481
    MacCtx.MacFlags.Bits.MacDone = 1;
 800d6b2:	4a05      	ldr	r2, [pc, #20]	@ (800d6c8 <PrepareRxDoneAbort+0x48>)
 800d6b4:	f892 3481 	ldrb.w	r3, [r2, #1153]	@ 0x481
 800d6b8:	f043 0310 	orr.w	r3, r3, #16
 800d6bc:	f882 3481 	strb.w	r3, [r2, #1153]	@ 0x481

    UpdateRxSlotIdleState( );
 800d6c0:	f7ff ff14 	bl	800d4ec <UpdateRxSlotIdleState>
}
 800d6c4:	bf00      	nop
 800d6c6:	bd80      	pop	{r7, pc}
 800d6c8:	2000062c 	.word	0x2000062c

0800d6cc <ProcessRadioRxDone>:

static void ProcessRadioRxDone( void )
{
 800d6cc:	b5b0      	push	{r4, r5, r7, lr}
 800d6ce:	b0aa      	sub	sp, #168	@ 0xa8
 800d6d0:	af04      	add	r7, sp, #16
    LoRaMacHeader_t macHdr;
    ApplyCFListParams_t applyCFList;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacCryptoStatus_t macCryptoStatus = LORAMAC_CRYPTO_ERROR;
 800d6d2:	2313      	movs	r3, #19
 800d6d4:	f887 3090 	strb.w	r3, [r7, #144]	@ 0x90

    LoRaMacMessageData_t macMsgData;
    LoRaMacMessageJoinAccept_t macMsgJoinAccept;
    uint8_t *payload = RxDoneParams.Payload;
 800d6d8:	4b78      	ldr	r3, [pc, #480]	@ (800d8bc <ProcessRadioRxDone+0x1f0>)
 800d6da:	685b      	ldr	r3, [r3, #4]
 800d6dc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    uint16_t size = RxDoneParams.Size;
 800d6e0:	4b76      	ldr	r3, [pc, #472]	@ (800d8bc <ProcessRadioRxDone+0x1f0>)
 800d6e2:	891b      	ldrh	r3, [r3, #8]
 800d6e4:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    int16_t rssi = RxDoneParams.Rssi;
 800d6e8:	4b74      	ldr	r3, [pc, #464]	@ (800d8bc <ProcessRadioRxDone+0x1f0>)
 800d6ea:	895b      	ldrh	r3, [r3, #10]
 800d6ec:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
    int8_t snr = RxDoneParams.Snr;
 800d6f0:	4b72      	ldr	r3, [pc, #456]	@ (800d8bc <ProcessRadioRxDone+0x1f0>)
 800d6f2:	7b1b      	ldrb	r3, [r3, #12]
 800d6f4:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87

    uint8_t pktHeaderLen = 0;
 800d6f8:	2300      	movs	r3, #0
 800d6fa:	f887 3086 	strb.w	r3, [r7, #134]	@ 0x86

    uint32_t downLinkCounter = 0;
 800d6fe:	2300      	movs	r3, #0
 800d700:	613b      	str	r3, [r7, #16]
    uint32_t address = Nvm.MacGroup2.DevAddr;
 800d702:	4b6f      	ldr	r3, [pc, #444]	@ (800d8c0 <ProcessRadioRxDone+0x1f4>)
 800d704:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800d708:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    uint8_t multicast = 0;
 800d70c:	2300      	movs	r3, #0
 800d70e:	f887 3093 	strb.w	r3, [r7, #147]	@ 0x93
    AddressIdentifier_t addrID = UNICAST_DEV_ADDR;
 800d712:	2301      	movs	r3, #1
 800d714:	f887 3092 	strb.w	r3, [r7, #146]	@ 0x92
    FCntIdentifier_t fCntID;
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    uint8_t macCmdPayload[2] = { 0 };
#endif /* LORAMAC_VERSION */
    Mlme_t joinType = MLME_JOIN;
 800d718:	2301      	movs	r3, #1
 800d71a:	f887 3085 	strb.w	r3, [r7, #133]	@ 0x85

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    LoRaMacRadioEvents.Events.RxProcessPending = 0;
#endif /* LORAMAC_VERSION */

    MacCtx.McpsConfirm.AckReceived = false;
 800d71e:	4b69      	ldr	r3, [pc, #420]	@ (800d8c4 <ProcessRadioRxDone+0x1f8>)
 800d720:	2200      	movs	r2, #0
 800d722:	f883 2438 	strb.w	r2, [r3, #1080]	@ 0x438
    MacCtx.RxStatus.Rssi = rssi;
 800d726:	4a67      	ldr	r2, [pc, #412]	@ (800d8c4 <ProcessRadioRxDone+0x1f8>)
 800d728:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 800d72c:	f8a2 347c 	strh.w	r3, [r2, #1148]	@ 0x47c
    MacCtx.RxStatus.Snr = snr;
 800d730:	4a64      	ldr	r2, [pc, #400]	@ (800d8c4 <ProcessRadioRxDone+0x1f8>)
 800d732:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 800d736:	f882 347e 	strb.w	r3, [r2, #1150]	@ 0x47e
    MacCtx.RxStatus.RxSlot = MacCtx.RxSlot;
 800d73a:	4b62      	ldr	r3, [pc, #392]	@ (800d8c4 <ProcessRadioRxDone+0x1f8>)
 800d73c:	f893 2480 	ldrb.w	r2, [r3, #1152]	@ 0x480
 800d740:	4b60      	ldr	r3, [pc, #384]	@ (800d8c4 <ProcessRadioRxDone+0x1f8>)
 800d742:	f883 247f 	strb.w	r2, [r3, #1151]	@ 0x47f
    MacCtx.McpsIndication.Port = 0;
 800d746:	4b5f      	ldr	r3, [pc, #380]	@ (800d8c4 <ProcessRadioRxDone+0x1f8>)
 800d748:	2200      	movs	r2, #0
 800d74a:	f883 241b 	strb.w	r2, [r3, #1051]	@ 0x41b
    MacCtx.McpsIndication.Multicast = 0;
 800d74e:	4b5d      	ldr	r3, [pc, #372]	@ (800d8c4 <ProcessRadioRxDone+0x1f8>)
 800d750:	2200      	movs	r2, #0
 800d752:	f883 241a 	strb.w	r2, [r3, #1050]	@ 0x41a
    MacCtx.McpsIndication.IsUplinkTxPending = 0;
 800d756:	4b5b      	ldr	r3, [pc, #364]	@ (800d8c4 <ProcessRadioRxDone+0x1f8>)
 800d758:	2200      	movs	r2, #0
 800d75a:	f883 241d 	strb.w	r2, [r3, #1053]	@ 0x41d
    MacCtx.McpsIndication.Buffer = NULL;
 800d75e:	4b59      	ldr	r3, [pc, #356]	@ (800d8c4 <ProcessRadioRxDone+0x1f8>)
 800d760:	2200      	movs	r2, #0
 800d762:	f8c3 2420 	str.w	r2, [r3, #1056]	@ 0x420
    MacCtx.McpsIndication.BufferSize = 0;
 800d766:	4b57      	ldr	r3, [pc, #348]	@ (800d8c4 <ProcessRadioRxDone+0x1f8>)
 800d768:	2200      	movs	r2, #0
 800d76a:	f883 2424 	strb.w	r2, [r3, #1060]	@ 0x424
    MacCtx.McpsIndication.RxData = false;
 800d76e:	4b55      	ldr	r3, [pc, #340]	@ (800d8c4 <ProcessRadioRxDone+0x1f8>)
 800d770:	2200      	movs	r2, #0
 800d772:	f883 2425 	strb.w	r2, [r3, #1061]	@ 0x425
    MacCtx.McpsIndication.AckReceived = false;
 800d776:	4b53      	ldr	r3, [pc, #332]	@ (800d8c4 <ProcessRadioRxDone+0x1f8>)
 800d778:	2200      	movs	r2, #0
 800d77a:	f883 2426 	strb.w	r2, [r3, #1062]	@ 0x426
    MacCtx.McpsIndication.DownLinkCounter = 0;
 800d77e:	4b51      	ldr	r3, [pc, #324]	@ (800d8c4 <ProcessRadioRxDone+0x1f8>)
 800d780:	2200      	movs	r2, #0
 800d782:	f8c3 2428 	str.w	r2, [r3, #1064]	@ 0x428
    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 800d786:	4b4f      	ldr	r3, [pc, #316]	@ (800d8c4 <ProcessRadioRxDone+0x1f8>)
 800d788:	2200      	movs	r2, #0
 800d78a:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
    MacCtx.McpsIndication.DevAddress = 0;
 800d78e:	4b4d      	ldr	r3, [pc, #308]	@ (800d8c4 <ProcessRadioRxDone+0x1f8>)
 800d790:	2200      	movs	r2, #0
 800d792:	f8c3 242c 	str.w	r2, [r3, #1068]	@ 0x42c
    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 800d796:	4b4b      	ldr	r3, [pc, #300]	@ (800d8c4 <ProcessRadioRxDone+0x1f8>)
 800d798:	2200      	movs	r2, #0
 800d79a:	f883 2430 	strb.w	r2, [r3, #1072]	@ 0x430
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.McpsIndication.ResponseTimeout = 0;
#endif /* LORAMAC_VERSION */

    Radio.Sleep( );
 800d79e:	4b4a      	ldr	r3, [pc, #296]	@ (800d8c8 <ProcessRadioRxDone+0x1fc>)
 800d7a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d7a2:	4798      	blx	r3

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerStop( &MacCtx.RxWindowTimer2 );
 800d7a4:	4849      	ldr	r0, [pc, #292]	@ (800d8cc <ProcessRadioRxDone+0x200>)
 800d7a6:	f00d f8fb 	bl	801a9a0 <UTIL_TIMER_Stop>
        TimerStop( &MacCtx.RxWindowTimer2 );
    }
#endif /* LORAMAC_VERSION */

    // This function must be called even if we are not in class b mode yet.
    if( LoRaMacClassBRxBeacon( payload, size ) == true )
 800d7aa:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800d7ae:	4619      	mov	r1, r3
 800d7b0:	f8d7 008c 	ldr.w	r0, [r7, #140]	@ 0x8c
 800d7b4:	f004 fc9b 	bl	80120ee <LoRaMacClassBRxBeacon>
 800d7b8:	4603      	mov	r3, r0
 800d7ba:	2b00      	cmp	r3, #0
 800d7bc:	d00b      	beq.n	800d7d6 <ProcessRadioRxDone+0x10a>
    {
        MacCtx.MlmeIndication.BeaconInfo.Rssi = rssi;
 800d7be:	4a41      	ldr	r2, [pc, #260]	@ (800d8c4 <ProcessRadioRxDone+0x1f8>)
 800d7c0:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 800d7c4:	f8a2 3472 	strh.w	r3, [r2, #1138]	@ 0x472
        MacCtx.MlmeIndication.BeaconInfo.Snr = snr;
 800d7c8:	4a3e      	ldr	r2, [pc, #248]	@ (800d8c4 <ProcessRadioRxDone+0x1f8>)
 800d7ca:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 800d7ce:	f882 3474 	strb.w	r3, [r2, #1140]	@ 0x474
        return;
 800d7d2:	f000 bc1f 	b.w	800e014 <ProcessRadioRxDone+0x948>
    }
    // Check if we expect a ping or a multicast slot.
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800d7d6:	4b3a      	ldr	r3, [pc, #232]	@ (800d8c0 <ProcessRadioRxDone+0x1f4>)
 800d7d8:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800d7dc:	2b01      	cmp	r3, #1
 800d7de:	d11e      	bne.n	800d81e <ProcessRadioRxDone+0x152>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 800d7e0:	f004 fc98 	bl	8012114 <LoRaMacClassBIsPingExpected>
 800d7e4:	4603      	mov	r3, r0
 800d7e6:	2b00      	cmp	r3, #0
 800d7e8:	d00a      	beq.n	800d800 <ProcessRadioRxDone+0x134>
        {
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800d7ea:	2000      	movs	r0, #0
 800d7ec:	f004 fc49 	bl	8012082 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 800d7f0:	2000      	movs	r0, #0
 800d7f2:	f004 fc6a 	bl	80120ca <LoRaMacClassBPingSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 800d7f6:	4b33      	ldr	r3, [pc, #204]	@ (800d8c4 <ProcessRadioRxDone+0x1f8>)
 800d7f8:	2204      	movs	r2, #4
 800d7fa:	f883 247f 	strb.w	r2, [r3, #1151]	@ 0x47f
 800d7fe:	e00e      	b.n	800d81e <ProcessRadioRxDone+0x152>
        }
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 800d800:	f004 fc8f 	bl	8012122 <LoRaMacClassBIsMulticastExpected>
 800d804:	4603      	mov	r3, r0
 800d806:	2b00      	cmp	r3, #0
 800d808:	d009      	beq.n	800d81e <ProcessRadioRxDone+0x152>
        {
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800d80a:	2000      	movs	r0, #0
 800d80c:	f004 fc43 	bl	8012096 <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800d810:	2000      	movs	r0, #0
 800d812:	f004 fc63 	bl	80120dc <LoRaMacClassBMulticastSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 800d816:	4b2b      	ldr	r3, [pc, #172]	@ (800d8c4 <ProcessRadioRxDone+0x1f8>)
 800d818:	2205      	movs	r2, #5
 800d81a:	f883 247f 	strb.w	r2, [r3, #1151]	@ 0x47f
        }
    }

    // Abort on empty radio frames
    if( size == 0 )
 800d81e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800d822:	2b00      	cmp	r3, #0
 800d824:	d106      	bne.n	800d834 <ProcessRadioRxDone+0x168>
    {
        MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800d826:	4b27      	ldr	r3, [pc, #156]	@ (800d8c4 <ProcessRadioRxDone+0x1f8>)
 800d828:	2201      	movs	r2, #1
 800d82a:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
        PrepareRxDoneAbort( );
 800d82e:	f7ff ff27 	bl	800d680 <PrepareRxDoneAbort>
        return;
 800d832:	e3ef      	b.n	800e014 <ProcessRadioRxDone+0x948>
    }

    macHdr.Value = payload[pktHeaderLen++];
 800d834:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
 800d838:	1c5a      	adds	r2, r3, #1
 800d83a:	f887 2086 	strb.w	r2, [r7, #134]	@ 0x86
 800d83e:	461a      	mov	r2, r3
 800d840:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d844:	4413      	add	r3, r2
 800d846:	781b      	ldrb	r3, [r3, #0]
 800d848:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
        PrepareRxDoneAbort( );
        return;
    }
#endif /* LORAMAC_VERSION */

    switch( macHdr.Bits.MType )
 800d84c:	f897 3080 	ldrb.w	r3, [r7, #128]	@ 0x80
 800d850:	f3c3 1342 	ubfx	r3, r3, #5, #3
 800d854:	b2db      	uxtb	r3, r3
 800d856:	3b01      	subs	r3, #1
 800d858:	2b06      	cmp	r3, #6
 800d85a:	f200 83b4 	bhi.w	800dfc6 <ProcessRadioRxDone+0x8fa>
 800d85e:	a201      	add	r2, pc, #4	@ (adr r2, 800d864 <ProcessRadioRxDone+0x198>)
 800d860:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d864:	0800d881 	.word	0x0800d881
 800d868:	0800dfc7 	.word	0x0800dfc7
 800d86c:	0800da61 	.word	0x0800da61
 800d870:	0800dfc7 	.word	0x0800dfc7
 800d874:	0800da59 	.word	0x0800da59
 800d878:	0800dfc7 	.word	0x0800dfc7
 800d87c:	0800df6b 	.word	0x0800df6b
    {
        case FRAME_TYPE_JOIN_ACCEPT:
        {
            uint8_t joinEui[SE_EUI_SIZE];
            // Check if the received frame size is valid
            if( size < LORAMAC_JOIN_ACCEPT_FRAME_MIN_SIZE )
 800d880:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800d884:	2b10      	cmp	r3, #16
 800d886:	d806      	bhi.n	800d896 <ProcessRadioRxDone+0x1ca>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800d888:	4b0e      	ldr	r3, [pc, #56]	@ (800d8c4 <ProcessRadioRxDone+0x1f8>)
 800d88a:	2201      	movs	r2, #1
 800d88c:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
                PrepareRxDoneAbort( );
 800d890:	f7ff fef6 	bl	800d680 <PrepareRxDoneAbort>
                return;
 800d894:	e3be      	b.n	800e014 <ProcessRadioRxDone+0x948>
            }
            macMsgJoinAccept.Buffer = payload;
 800d896:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d89a:	617b      	str	r3, [r7, #20]
            macMsgJoinAccept.BufSize = size;
 800d89c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800d8a0:	b2db      	uxtb	r3, r3
 800d8a2:	763b      	strb	r3, [r7, #24]

            // Abort in case if the device is already joined and no rejoin request is ongoing.
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
            if( ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) && ( Nvm.MacGroup2.IsRejoinAcceptPending == false ) )
#else
            if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 800d8a4:	4b06      	ldr	r3, [pc, #24]	@ (800d8c0 <ProcessRadioRxDone+0x1f4>)
 800d8a6:	f893 312c 	ldrb.w	r3, [r3, #300]	@ 0x12c
 800d8aa:	2b00      	cmp	r3, #0
 800d8ac:	d010      	beq.n	800d8d0 <ProcessRadioRxDone+0x204>
#endif /* LORAMAC_VERSION */
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800d8ae:	4b05      	ldr	r3, [pc, #20]	@ (800d8c4 <ProcessRadioRxDone+0x1f8>)
 800d8b0:	2201      	movs	r2, #1
 800d8b2:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
                PrepareRxDoneAbort( );
 800d8b6:	f7ff fee3 	bl	800d680 <PrepareRxDoneAbort>
                return;
 800d8ba:	e3ab      	b.n	800e014 <ProcessRadioRxDone+0x948>
 800d8bc:	200012ac 	.word	0x200012ac
 800d8c0:	20000b34 	.word	0x20000b34
 800d8c4:	2000062c 	.word	0x2000062c
 800d8c8:	0801bd08 	.word	0x0801bd08
 800d8cc:	200009c4 	.word	0x200009c4
            }

            SecureElementGetJoinEui( joinEui );
 800d8d0:	1d3b      	adds	r3, r7, #4
 800d8d2:	4618      	mov	r0, r3
 800d8d4:	f7fe fac0 	bl	800be58 <SecureElementGetJoinEui>
            macCryptoStatus = LoRaMacCryptoHandleJoinAccept( JOIN_REQ, joinEui, &macMsgJoinAccept );
 800d8d8:	f107 0214 	add.w	r2, r7, #20
 800d8dc:	1d3b      	adds	r3, r7, #4
 800d8de:	4619      	mov	r1, r3
 800d8e0:	20ff      	movs	r0, #255	@ 0xff
 800d8e2:	f005 fe25 	bl	8013530 <LoRaMacCryptoHandleJoinAccept>
 800d8e6:	4603      	mov	r3, r0
 800d8e8:	f887 3090 	strb.w	r3, [r7, #144]	@ 0x90
                        break;
                    }
                }
#else
            VerifyParams_t verifyRxDr;
            bool rxDrValid = false;
 800d8ec:	2300      	movs	r3, #0
 800d8ee:	f887 3084 	strb.w	r3, [r7, #132]	@ 0x84
            verifyRxDr.DatarateParams.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800d8f2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800d8f6:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800d8fa:	b2db      	uxtb	r3, r3
 800d8fc:	b25b      	sxtb	r3, r3
 800d8fe:	703b      	strb	r3, [r7, #0]
            verifyRxDr.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800d900:	4bbb      	ldr	r3, [pc, #748]	@ (800dbf0 <ProcessRadioRxDone+0x524>)
 800d902:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800d906:	707b      	strb	r3, [r7, #1]
            rxDrValid = RegionVerify( Nvm.MacGroup2.Region, &verifyRxDr, PHY_RX_DR );
 800d908:	4bb9      	ldr	r3, [pc, #740]	@ (800dbf0 <ProcessRadioRxDone+0x524>)
 800d90a:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800d90e:	4639      	mov	r1, r7
 800d910:	2207      	movs	r2, #7
 800d912:	4618      	mov	r0, r3
 800d914:	f006 fbc0 	bl	8014098 <RegionVerify>
 800d918:	4603      	mov	r3, r0
 800d91a:	f887 3084 	strb.w	r3, [r7, #132]	@ 0x84

            if( ( LORAMAC_CRYPTO_SUCCESS == macCryptoStatus ) && ( rxDrValid == true ) )
 800d91e:	f897 3090 	ldrb.w	r3, [r7, #144]	@ 0x90
 800d922:	2b00      	cmp	r3, #0
 800d924:	f040 808c 	bne.w	800da40 <ProcessRadioRxDone+0x374>
 800d928:	f897 3084 	ldrb.w	r3, [r7, #132]	@ 0x84
 800d92c:	2b00      	cmp	r3, #0
 800d92e:	f000 8087 	beq.w	800da40 <ProcessRadioRxDone+0x374>
            {
#endif

                // Network ID
                Nvm.MacGroup2.NetID = ( uint32_t ) macMsgJoinAccept.NetID[0];
 800d932:	7f7b      	ldrb	r3, [r7, #29]
 800d934:	461a      	mov	r2, r3
 800d936:	4bae      	ldr	r3, [pc, #696]	@ (800dbf0 <ProcessRadioRxDone+0x524>)
 800d938:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[1] << 8 );
 800d93c:	4bac      	ldr	r3, [pc, #688]	@ (800dbf0 <ProcessRadioRxDone+0x524>)
 800d93e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800d942:	7fbb      	ldrb	r3, [r7, #30]
 800d944:	021b      	lsls	r3, r3, #8
 800d946:	4313      	orrs	r3, r2
 800d948:	4aa9      	ldr	r2, [pc, #676]	@ (800dbf0 <ProcessRadioRxDone+0x524>)
 800d94a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 800d94e:	4ba8      	ldr	r3, [pc, #672]	@ (800dbf0 <ProcessRadioRxDone+0x524>)
 800d950:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800d954:	7ffb      	ldrb	r3, [r7, #31]
 800d956:	041b      	lsls	r3, r3, #16
 800d958:	4313      	orrs	r3, r2
 800d95a:	4aa5      	ldr	r2, [pc, #660]	@ (800dbf0 <ProcessRadioRxDone+0x524>)
 800d95c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0

                // Device Address
                Nvm.MacGroup2.DevAddr = macMsgJoinAccept.DevAddr;
 800d960:	6a3b      	ldr	r3, [r7, #32]
 800d962:	4aa3      	ldr	r2, [pc, #652]	@ (800dbf0 <ProcessRadioRxDone+0x524>)
 800d964:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                // Update NVM DevAddrOTAA with network value
                SecureElementSetDevAddr( ACTIVATION_TYPE_OTAA, Nvm.MacGroup2.DevAddr );
 800d968:	4ba1      	ldr	r3, [pc, #644]	@ (800dbf0 <ProcessRadioRxDone+0x524>)
 800d96a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800d96e:	4619      	mov	r1, r3
 800d970:	2002      	movs	r0, #2
 800d972:	f7fe fa89 	bl	800be88 <SecureElementSetDevAddr>

                // DLSettings
                Nvm.MacGroup2.MacParams.Rx1DrOffset = macMsgJoinAccept.DLSettings.Bits.RX1DRoffset;
 800d976:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800d97a:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800d97e:	b2db      	uxtb	r3, r3
 800d980:	461a      	mov	r2, r3
 800d982:	4b9b      	ldr	r3, [pc, #620]	@ (800dbf0 <ProcessRadioRxDone+0x524>)
 800d984:	f883 2069 	strb.w	r2, [r3, #105]	@ 0x69
                // Verify if we shall assign the new datarate
                if( macMsgJoinAccept.DLSettings.Bits.RX2DataRate != 0x0F )
                {
#endif

                Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800d988:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800d98c:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800d990:	b2db      	uxtb	r3, r3
 800d992:	461a      	mov	r2, r3
 800d994:	4b96      	ldr	r3, [pc, #600]	@ (800dbf0 <ProcessRadioRxDone+0x524>)
 800d996:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
                Nvm.MacGroup2.MacParams.RxCChannel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800d99a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800d99e:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800d9a2:	b2db      	uxtb	r3, r3
 800d9a4:	461a      	mov	r2, r3
 800d9a6:	4b92      	ldr	r3, [pc, #584]	@ (800dbf0 <ProcessRadioRxDone+0x524>)
 800d9a8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
				}
#endif

                // RxDelay
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = macMsgJoinAccept.RxDelay;
 800d9ac:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800d9b0:	461a      	mov	r2, r3
 800d9b2:	4b8f      	ldr	r3, [pc, #572]	@ (800dbf0 <ProcessRadioRxDone+0x524>)
 800d9b4:	659a      	str	r2, [r3, #88]	@ 0x58
                if( Nvm.MacGroup2.MacParams.ReceiveDelay1 == 0 )
 800d9b6:	4b8e      	ldr	r3, [pc, #568]	@ (800dbf0 <ProcessRadioRxDone+0x524>)
 800d9b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d9ba:	2b00      	cmp	r3, #0
 800d9bc:	d102      	bne.n	800d9c4 <ProcessRadioRxDone+0x2f8>
                {
                    Nvm.MacGroup2.MacParams.ReceiveDelay1 = 1;
 800d9be:	4b8c      	ldr	r3, [pc, #560]	@ (800dbf0 <ProcessRadioRxDone+0x524>)
 800d9c0:	2201      	movs	r2, #1
 800d9c2:	659a      	str	r2, [r3, #88]	@ 0x58
                }
                Nvm.MacGroup2.MacParams.ReceiveDelay1 *= 1000;
 800d9c4:	4b8a      	ldr	r3, [pc, #552]	@ (800dbf0 <ProcessRadioRxDone+0x524>)
 800d9c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d9c8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800d9cc:	fb02 f303 	mul.w	r3, r2, r3
 800d9d0:	4a87      	ldr	r2, [pc, #540]	@ (800dbf0 <ProcessRadioRxDone+0x524>)
 800d9d2:	6593      	str	r3, [r2, #88]	@ 0x58
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 800d9d4:	4b86      	ldr	r3, [pc, #536]	@ (800dbf0 <ProcessRadioRxDone+0x524>)
 800d9d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d9d8:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800d9dc:	4a84      	ldr	r2, [pc, #528]	@ (800dbf0 <ProcessRadioRxDone+0x524>)
 800d9de:	65d3      	str	r3, [r2, #92]	@ 0x5c

                // Reset NbTrans to default value
                Nvm.MacGroup2.MacParams.ChannelsNbTrans = 1;
 800d9e0:	4b83      	ldr	r3, [pc, #524]	@ (800dbf0 <ProcessRadioRxDone+0x524>)
 800d9e2:	2201      	movs	r2, #1
 800d9e4:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
                else
                {
                    Nvm.MacGroup2.Version.Value = LORAMAC_VERSION;
                }
#else
                Nvm.MacGroup2.Version.Fields.Minor = 0;
 800d9e8:	4b81      	ldr	r3, [pc, #516]	@ (800dbf0 <ProcessRadioRxDone+0x524>)
 800d9ea:	2200      	movs	r2, #0
 800d9ec:	f883 212a 	strb.w	r2, [r3, #298]	@ 0x12a
#endif /* LORAMAC_VERSION */

                // Apply CF list
                applyCFList.Payload = macMsgJoinAccept.CFList;
 800d9f0:	f107 0314 	add.w	r3, r7, #20
 800d9f4:	3312      	adds	r3, #18
 800d9f6:	67bb      	str	r3, [r7, #120]	@ 0x78
                // Size of the regular payload is 12. Plus 1 byte MHDR and 4 bytes MIC
                applyCFList.Size = size - 17;
 800d9f8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800d9fc:	b2db      	uxtb	r3, r3
 800d9fe:	3b11      	subs	r3, #17
 800da00:	b2db      	uxtb	r3, r3
 800da02:	f887 307c 	strb.w	r3, [r7, #124]	@ 0x7c
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                // Apply the last tx channel
                applyCFList.JoinChannel = MacCtx.Channel;
#endif /* LORAMAC_VERSION */

                RegionApplyCFList( Nvm.MacGroup2.Region, &applyCFList );
 800da06:	4b7a      	ldr	r3, [pc, #488]	@ (800dbf0 <ProcessRadioRxDone+0x524>)
 800da08:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800da0c:	f107 0278 	add.w	r2, r7, #120	@ 0x78
 800da10:	4611      	mov	r1, r2
 800da12:	4618      	mov	r0, r3
 800da14:	f006 fb57 	bl	80140c6 <RegionApplyCFList>

                Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_OTAA;
 800da18:	4b75      	ldr	r3, [pc, #468]	@ (800dbf0 <ProcessRadioRxDone+0x524>)
 800da1a:	2202      	movs	r2, #2
 800da1c:	f883 212c 	strb.w	r2, [r3, #300]	@ 0x12c
                    LoRaMacCommandsAddCmd( MOTE_MAC_REKEY_IND, macCmdPayload, 1 );
                }
#endif /* LORAMAC_VERSION */

                // MLME handling
                if( LoRaMacConfirmQueueIsCmdActive( joinType ) == true )
 800da20:	f897 3085 	ldrb.w	r3, [r7, #133]	@ 0x85
 800da24:	4618      	mov	r0, r3
 800da26:	f005 f85d 	bl	8012ae4 <LoRaMacConfirmQueueIsCmdActive>
 800da2a:	4603      	mov	r3, r0
 800da2c:	2b00      	cmp	r3, #0
 800da2e:	f000 82d2 	beq.w	800dfd6 <ProcessRadioRxDone+0x90a>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, joinType );
 800da32:	f897 3085 	ldrb.w	r3, [r7, #133]	@ 0x85
 800da36:	4619      	mov	r1, r3
 800da38:	2000      	movs	r0, #0
 800da3a:	f004 ffc7 	bl	80129cc <LoRaMacConfirmQueueSetStatus>
                if( LoRaMacConfirmQueueIsCmdActive( joinType ) == true )
 800da3e:	e2ca      	b.n	800dfd6 <ProcessRadioRxDone+0x90a>
#endif /* LORAMAC_VERSION */
            }
            else
            {
                // MLME handling
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800da40:	2001      	movs	r0, #1
 800da42:	f005 f84f 	bl	8012ae4 <LoRaMacConfirmQueueIsCmdActive>
 800da46:	4603      	mov	r3, r0
 800da48:	2b00      	cmp	r3, #0
 800da4a:	f000 82c3 	beq.w	800dfd4 <ProcessRadioRxDone+0x908>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
 800da4e:	2101      	movs	r1, #1
 800da50:	2007      	movs	r0, #7
 800da52:	f004 ffbb 	bl	80129cc <LoRaMacConfirmQueueSetStatus>
                }
            }

            break;
 800da56:	e2bd      	b.n	800dfd4 <ProcessRadioRxDone+0x908>
        }
        case FRAME_TYPE_DATA_CONFIRMED_DOWN:
            MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 800da58:	4b66      	ldr	r3, [pc, #408]	@ (800dbf4 <ProcessRadioRxDone+0x528>)
 800da5a:	2201      	movs	r2, #1
 800da5c:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
            // Intentional fall through
        case FRAME_TYPE_DATA_UNCONFIRMED_DOWN:
            // Check if the received payload size is valid
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800da60:	4b63      	ldr	r3, [pc, #396]	@ (800dbf0 <ProcessRadioRxDone+0x524>)
 800da62:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800da66:	f887 3072 	strb.w	r3, [r7, #114]	@ 0x72
            getPhy.Datarate = MacCtx.McpsIndication.RxDatarate;
 800da6a:	4b62      	ldr	r3, [pc, #392]	@ (800dbf4 <ProcessRadioRxDone+0x528>)
 800da6c:	f893 341c 	ldrb.w	r3, [r3, #1052]	@ 0x41c
 800da70:	b25b      	sxtb	r3, r3
 800da72:	f887 3071 	strb.w	r3, [r7, #113]	@ 0x71
            getPhy.Attribute = PHY_MAX_PAYLOAD;
 800da76:	230d      	movs	r3, #13
 800da78:	f887 3070 	strb.w	r3, [r7, #112]	@ 0x70

            // Get the maximum payload length
            if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 800da7c:	4b5c      	ldr	r3, [pc, #368]	@ (800dbf0 <ProcessRadioRxDone+0x524>)
 800da7e:	f893 308c 	ldrb.w	r3, [r3, #140]	@ 0x8c
 800da82:	2b00      	cmp	r3, #0
 800da84:	d002      	beq.n	800da8c <ProcessRadioRxDone+0x3c0>
            {
                getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 800da86:	230e      	movs	r3, #14
 800da88:	f887 3070 	strb.w	r3, [r7, #112]	@ 0x70
            }

            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800da8c:	4b58      	ldr	r3, [pc, #352]	@ (800dbf0 <ProcessRadioRxDone+0x524>)
 800da8e:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800da92:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 800da96:	4611      	mov	r1, r2
 800da98:	4618      	mov	r0, r3
 800da9a:	f006 fac2 	bl	8014022 <RegionGetPhyParam>
 800da9e:	4603      	mov	r3, r0
 800daa0:	66fb      	str	r3, [r7, #108]	@ 0x6c
            if( ( MAX( 0, ( int16_t )( ( int16_t ) size - ( int16_t ) LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE ) ) > ( int16_t )phyParam.Value ) ||
 800daa2:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800daa6:	3b0d      	subs	r3, #13
 800daa8:	b29b      	uxth	r3, r3
 800daaa:	b21b      	sxth	r3, r3
 800daac:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800dab0:	b21a      	sxth	r2, r3
 800dab2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800dab4:	b21b      	sxth	r3, r3
 800dab6:	429a      	cmp	r2, r3
 800dab8:	dc03      	bgt.n	800dac2 <ProcessRadioRxDone+0x3f6>
 800daba:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800dabe:	2b0b      	cmp	r3, #11
 800dac0:	d806      	bhi.n	800dad0 <ProcessRadioRxDone+0x404>
                ( size < LORAMAC_FRAME_PAYLOAD_MIN_SIZE ) )
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800dac2:	4b4c      	ldr	r3, [pc, #304]	@ (800dbf4 <ProcessRadioRxDone+0x528>)
 800dac4:	2201      	movs	r2, #1
 800dac6:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
                PrepareRxDoneAbort( );
 800daca:	f7ff fdd9 	bl	800d680 <PrepareRxDoneAbort>
                return;
 800dace:	e2a1      	b.n	800e014 <ProcessRadioRxDone+0x948>
            }
            macMsgData.Buffer = payload;
 800dad0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800dad4:	63fb      	str	r3, [r7, #60]	@ 0x3c
            macMsgData.BufSize = size;
 800dad6:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800dada:	b2db      	uxtb	r3, r3
 800dadc:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
            macMsgData.FRMPayload = MacCtx.RxPayload;
 800dae0:	4b45      	ldr	r3, [pc, #276]	@ (800dbf8 <ProcessRadioRxDone+0x52c>)
 800dae2:	663b      	str	r3, [r7, #96]	@ 0x60
            macMsgData.FRMPayloadSize = LORAMAC_PHY_MAXPAYLOAD;
 800dae4:	23ff      	movs	r3, #255	@ 0xff
 800dae6:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64

            if( LORAMAC_PARSER_SUCCESS != LoRaMacParserData( &macMsgData ) )
 800daea:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800daee:	4618      	mov	r0, r3
 800daf0:	f006 f81e 	bl	8013b30 <LoRaMacParserData>
 800daf4:	4603      	mov	r3, r0
 800daf6:	2b00      	cmp	r3, #0
 800daf8:	d006      	beq.n	800db08 <ProcessRadioRxDone+0x43c>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800dafa:	4b3e      	ldr	r3, [pc, #248]	@ (800dbf4 <ProcessRadioRxDone+0x528>)
 800dafc:	2201      	movs	r2, #1
 800dafe:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
                PrepareRxDoneAbort( );
 800db02:	f7ff fdbd 	bl	800d680 <PrepareRxDoneAbort>
                return;
 800db06:	e285      	b.n	800e014 <ProcessRadioRxDone+0x948>
                }
            }
#endif /* LORAMAC_VERSION */

            // Store device address
            MacCtx.McpsIndication.DevAddress = macMsgData.FHDR.DevAddr;
 800db08:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800db0a:	4a3a      	ldr	r2, [pc, #232]	@ (800dbf4 <ProcessRadioRxDone+0x528>)
 800db0c:	f8c2 342c 	str.w	r3, [r2, #1068]	@ 0x42c

            FType_t fType;
            if( LORAMAC_STATUS_OK != DetermineFrameType( &macMsgData, &fType ) )
 800db10:	f107 020e 	add.w	r2, r7, #14
 800db14:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800db18:	4611      	mov	r1, r2
 800db1a:	4618      	mov	r0, r3
 800db1c:	f002 fc79 	bl	8010412 <DetermineFrameType>
 800db20:	4603      	mov	r3, r0
 800db22:	2b00      	cmp	r3, #0
 800db24:	d006      	beq.n	800db34 <ProcessRadioRxDone+0x468>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800db26:	4b33      	ldr	r3, [pc, #204]	@ (800dbf4 <ProcessRadioRxDone+0x528>)
 800db28:	2201      	movs	r2, #1
 800db2a:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
                PrepareRxDoneAbort( );
 800db2e:	f7ff fda7 	bl	800d680 <PrepareRxDoneAbort>
                return;
 800db32:	e26f      	b.n	800e014 <ProcessRadioRxDone+0x948>
            }

            //Check if it is a multicast message
            multicast = 0;
 800db34:	2300      	movs	r3, #0
 800db36:	f887 3093 	strb.w	r3, [r7, #147]	@ 0x93
            downLinkCounter = 0;
 800db3a:	2300      	movs	r3, #0
 800db3c:	613b      	str	r3, [r7, #16]
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800db3e:	2300      	movs	r3, #0
 800db40:	f887 3091 	strb.w	r3, [r7, #145]	@ 0x91
 800db44:	e04f      	b.n	800dbe6 <ProcessRadioRxDone+0x51a>
            {
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 800db46:	f897 2091 	ldrb.w	r2, [r7, #145]	@ 0x91
 800db4a:	4929      	ldr	r1, [pc, #164]	@ (800dbf0 <ProcessRadioRxDone+0x524>)
 800db4c:	4613      	mov	r3, r2
 800db4e:	005b      	lsls	r3, r3, #1
 800db50:	4413      	add	r3, r2
 800db52:	011b      	lsls	r3, r3, #4
 800db54:	440b      	add	r3, r1
 800db56:	33ec      	adds	r3, #236	@ 0xec
 800db58:	681a      	ldr	r2, [r3, #0]
 800db5a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800db5c:	429a      	cmp	r2, r3
 800db5e:	d13d      	bne.n	800dbdc <ProcessRadioRxDone+0x510>
                    ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) )
 800db60:	f897 2091 	ldrb.w	r2, [r7, #145]	@ 0x91
 800db64:	4922      	ldr	r1, [pc, #136]	@ (800dbf0 <ProcessRadioRxDone+0x524>)
 800db66:	4613      	mov	r3, r2
 800db68:	005b      	lsls	r3, r3, #1
 800db6a:	4413      	add	r3, r2
 800db6c:	011b      	lsls	r3, r3, #4
 800db6e:	440b      	add	r3, r1
 800db70:	33e9      	adds	r3, #233	@ 0xe9
 800db72:	781b      	ldrb	r3, [r3, #0]
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 800db74:	2b00      	cmp	r3, #0
 800db76:	d031      	beq.n	800dbdc <ProcessRadioRxDone+0x510>
                {
                    multicast = 1;
 800db78:	2301      	movs	r3, #1
 800db7a:	f887 3093 	strb.w	r3, [r7, #147]	@ 0x93
                    addrID = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.GroupID;
 800db7e:	f897 2091 	ldrb.w	r2, [r7, #145]	@ 0x91
 800db82:	491b      	ldr	r1, [pc, #108]	@ (800dbf0 <ProcessRadioRxDone+0x524>)
 800db84:	4613      	mov	r3, r2
 800db86:	005b      	lsls	r3, r3, #1
 800db88:	4413      	add	r3, r2
 800db8a:	011b      	lsls	r3, r3, #4
 800db8c:	440b      	add	r3, r1
 800db8e:	33ea      	adds	r3, #234	@ 0xea
 800db90:	781b      	ldrb	r3, [r3, #0]
 800db92:	f887 3092 	strb.w	r3, [r7, #146]	@ 0x92
                    downLinkCounter = *( Nvm.MacGroup2.MulticastChannelList[i].DownLinkCounter );
 800db96:	f897 2091 	ldrb.w	r2, [r7, #145]	@ 0x91
 800db9a:	4915      	ldr	r1, [pc, #84]	@ (800dbf0 <ProcessRadioRxDone+0x524>)
 800db9c:	4613      	mov	r3, r2
 800db9e:	005b      	lsls	r3, r3, #1
 800dba0:	4413      	add	r3, r2
 800dba2:	011b      	lsls	r3, r3, #4
 800dba4:	440b      	add	r3, r1
 800dba6:	f503 7386 	add.w	r3, r3, #268	@ 0x10c
 800dbaa:	681b      	ldr	r3, [r3, #0]
 800dbac:	681b      	ldr	r3, [r3, #0]
 800dbae:	613b      	str	r3, [r7, #16]
                    address = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address;
 800dbb0:	f897 2091 	ldrb.w	r2, [r7, #145]	@ 0x91
 800dbb4:	490e      	ldr	r1, [pc, #56]	@ (800dbf0 <ProcessRadioRxDone+0x524>)
 800dbb6:	4613      	mov	r3, r2
 800dbb8:	005b      	lsls	r3, r3, #1
 800dbba:	4413      	add	r3, r2
 800dbbc:	011b      	lsls	r3, r3, #4
 800dbbe:	440b      	add	r3, r1
 800dbc0:	33ec      	adds	r3, #236	@ 0xec
 800dbc2:	681b      	ldr	r3, [r3, #0]
 800dbc4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
                    if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 800dbc8:	4b09      	ldr	r3, [pc, #36]	@ (800dbf0 <ProcessRadioRxDone+0x524>)
 800dbca:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800dbce:	2b02      	cmp	r3, #2
 800dbd0:	d114      	bne.n	800dbfc <ProcessRadioRxDone+0x530>
                    {
                        MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 800dbd2:	4b08      	ldr	r3, [pc, #32]	@ (800dbf4 <ProcessRadioRxDone+0x528>)
 800dbd4:	2203      	movs	r2, #3
 800dbd6:	f883 247f 	strb.w	r2, [r3, #1151]	@ 0x47f
                    }
                    break;
 800dbda:	e00f      	b.n	800dbfc <ProcessRadioRxDone+0x530>
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800dbdc:	f897 3091 	ldrb.w	r3, [r7, #145]	@ 0x91
 800dbe0:	3301      	adds	r3, #1
 800dbe2:	f887 3091 	strb.w	r3, [r7, #145]	@ 0x91
 800dbe6:	f897 3091 	ldrb.w	r3, [r7, #145]	@ 0x91
 800dbea:	2b00      	cmp	r3, #0
 800dbec:	d0ab      	beq.n	800db46 <ProcessRadioRxDone+0x47a>
 800dbee:	e006      	b.n	800dbfe <ProcessRadioRxDone+0x532>
 800dbf0:	20000b34 	.word	0x20000b34
 800dbf4:	2000062c 	.word	0x2000062c
 800dbf8:	20000864 	.word	0x20000864
                    break;
 800dbfc:	bf00      	nop
                }
            }

            // Filter messages according to multicast downlink exceptions
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 800dbfe:	f897 3093 	ldrb.w	r3, [r7, #147]	@ 0x93
 800dc02:	2b01      	cmp	r3, #1
 800dc04:	d117      	bne.n	800dc36 <ProcessRadioRxDone+0x56a>
 800dc06:	7bbb      	ldrb	r3, [r7, #14]
 800dc08:	2b03      	cmp	r3, #3
 800dc0a:	d10d      	bne.n	800dc28 <ProcessRadioRxDone+0x55c>
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 800dc0c:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 800dc10:	f003 0320 	and.w	r3, r3, #32
 800dc14:	b2db      	uxtb	r3, r3
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 800dc16:	2b00      	cmp	r3, #0
 800dc18:	d106      	bne.n	800dc28 <ProcessRadioRxDone+0x55c>
                                        ( macMsgData.FHDR.FCtrl.Bits.AdrAckReq != 0 ) ) )
 800dc1a:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 800dc1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800dc22:	b2db      	uxtb	r3, r3
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 800dc24:	2b00      	cmp	r3, #0
 800dc26:	d006      	beq.n	800dc36 <ProcessRadioRxDone+0x56a>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800dc28:	4bb3      	ldr	r3, [pc, #716]	@ (800def8 <ProcessRadioRxDone+0x82c>)
 800dc2a:	2201      	movs	r2, #1
 800dc2c:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
                PrepareRxDoneAbort( );
 800dc30:	f7ff fd26 	bl	800d680 <PrepareRxDoneAbort>
                return;
 800dc34:	e1ee      	b.n	800e014 <ProcessRadioRxDone+0x948>
            }

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            // Get maximum allowed counter difference
            getPhy.Attribute = PHY_MAX_FCNT_GAP;
 800dc36:	2315      	movs	r3, #21
 800dc38:	f887 3070 	strb.w	r3, [r7, #112]	@ 0x70
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800dc3c:	4baf      	ldr	r3, [pc, #700]	@ (800defc <ProcessRadioRxDone+0x830>)
 800dc3e:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800dc42:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 800dc46:	4611      	mov	r1, r2
 800dc48:	4618      	mov	r0, r3
 800dc4a:	f006 f9ea 	bl	8014022 <RegionGetPhyParam>
 800dc4e:	4603      	mov	r3, r0
 800dc50:	66fb      	str	r3, [r7, #108]	@ 0x6c

            // Get downlink frame counter value
            macCryptoStatus = GetFCntDown( addrID, fType, &macMsgData, Nvm.MacGroup2.Version, phyParam.Value, &fCntID, &downLinkCounter );
 800dc52:	7bb9      	ldrb	r1, [r7, #14]
 800dc54:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800dc56:	b29b      	uxth	r3, r3
 800dc58:	4da8      	ldr	r5, [pc, #672]	@ (800defc <ProcessRadioRxDone+0x830>)
 800dc5a:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 800dc5e:	f897 0092 	ldrb.w	r0, [r7, #146]	@ 0x92
 800dc62:	f107 0210 	add.w	r2, r7, #16
 800dc66:	9202      	str	r2, [sp, #8]
 800dc68:	f107 020f 	add.w	r2, r7, #15
 800dc6c:	9201      	str	r2, [sp, #4]
 800dc6e:	9300      	str	r3, [sp, #0]
 800dc70:	f8d5 3128 	ldr.w	r3, [r5, #296]	@ 0x128
 800dc74:	4622      	mov	r2, r4
 800dc76:	f000 fe8d 	bl	800e994 <GetFCntDown>
 800dc7a:	4603      	mov	r3, r0
 800dc7c:	f887 3090 	strb.w	r3, [r7, #144]	@ 0x90
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800dc80:	f897 3090 	ldrb.w	r3, [r7, #144]	@ 0x90
 800dc84:	2b00      	cmp	r3, #0
 800dc86:	d035      	beq.n	800dcf4 <ProcessRadioRxDone+0x628>
            {
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED )
 800dc88:	f897 3090 	ldrb.w	r3, [r7, #144]	@ 0x90
 800dc8c:	2b07      	cmp	r3, #7
 800dc8e:	d119      	bne.n	800dcc4 <ProcessRadioRxDone+0x5f8>
                {
                    // Catch the case of repeated downlink frame counter
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_REPEATED;
 800dc90:	4b99      	ldr	r3, [pc, #612]	@ (800def8 <ProcessRadioRxDone+0x82c>)
 800dc92:	2208      	movs	r2, #8
 800dc94:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
                    if( ( Nvm.MacGroup2.Version.Fields.Minor == 0 ) && ( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN ) && ( Nvm.MacGroup1.LastRxMic == macMsgData.MIC ) )
 800dc98:	4b98      	ldr	r3, [pc, #608]	@ (800defc <ProcessRadioRxDone+0x830>)
 800dc9a:	f893 312a 	ldrb.w	r3, [r3, #298]	@ 0x12a
 800dc9e:	2b00      	cmp	r3, #0
 800dca0:	d11d      	bne.n	800dcde <ProcessRadioRxDone+0x612>
 800dca2:	f897 3080 	ldrb.w	r3, [r7, #128]	@ 0x80
 800dca6:	f023 031f 	bic.w	r3, r3, #31
 800dcaa:	b2db      	uxtb	r3, r3
 800dcac:	2ba0      	cmp	r3, #160	@ 0xa0
 800dcae:	d116      	bne.n	800dcde <ProcessRadioRxDone+0x612>
 800dcb0:	4b92      	ldr	r3, [pc, #584]	@ (800defc <ProcessRadioRxDone+0x830>)
 800dcb2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800dcb4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800dcb6:	429a      	cmp	r2, r3
 800dcb8:	d111      	bne.n	800dcde <ProcessRadioRxDone+0x612>
                    {
                        Nvm.MacGroup1.SrvAckRequested = true;
 800dcba:	4b90      	ldr	r3, [pc, #576]	@ (800defc <ProcessRadioRxDone+0x830>)
 800dcbc:	2201      	movs	r2, #1
 800dcbe:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
 800dcc2:	e00c      	b.n	800dcde <ProcessRadioRxDone+0x612>
                    }
                }
                else if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_MAX_GAP_FCNT )
 800dcc4:	f897 3090 	ldrb.w	r3, [r7, #144]	@ 0x90
 800dcc8:	2b08      	cmp	r3, #8
 800dcca:	d104      	bne.n	800dcd6 <ProcessRadioRxDone+0x60a>
                {
                    // Lost too many frames
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_TOO_MANY_FRAMES_LOSS;
 800dccc:	4b8a      	ldr	r3, [pc, #552]	@ (800def8 <ProcessRadioRxDone+0x82c>)
 800dcce:	220a      	movs	r2, #10
 800dcd0:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
 800dcd4:	e003      	b.n	800dcde <ProcessRadioRxDone+0x612>
                }
                else
                {
                    // Other errors
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800dcd6:	4b88      	ldr	r3, [pc, #544]	@ (800def8 <ProcessRadioRxDone+0x82c>)
 800dcd8:	2201      	movs	r2, #1
 800dcda:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
                }
                MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 800dcde:	693b      	ldr	r3, [r7, #16]
 800dce0:	4a85      	ldr	r2, [pc, #532]	@ (800def8 <ProcessRadioRxDone+0x82c>)
 800dce2:	f8c2 3428 	str.w	r3, [r2, #1064]	@ 0x428
                MacCtx.MlmeIndication.DownLinkCounter = downLinkCounter;
 800dce6:	693b      	ldr	r3, [r7, #16]
 800dce8:	4a83      	ldr	r2, [pc, #524]	@ (800def8 <ProcessRadioRxDone+0x82c>)
 800dcea:	f8c2 3460 	str.w	r3, [r2, #1120]	@ 0x460
                PrepareRxDoneAbort( );
 800dcee:	f7ff fcc7 	bl	800d680 <PrepareRxDoneAbort>
                return;
 800dcf2:	e18f      	b.n	800e014 <ProcessRadioRxDone+0x948>
            }

            macCryptoStatus = LoRaMacCryptoUnsecureMessage( addrID, address, fCntID, downLinkCounter, &macMsgData );
 800dcf4:	7bfa      	ldrb	r2, [r7, #15]
 800dcf6:	6939      	ldr	r1, [r7, #16]
 800dcf8:	f897 0092 	ldrb.w	r0, [r7, #146]	@ 0x92
 800dcfc:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800dd00:	9300      	str	r3, [sp, #0]
 800dd02:	460b      	mov	r3, r1
 800dd04:	f8d7 1094 	ldr.w	r1, [r7, #148]	@ 0x94
 800dd08:	f005 fd74 	bl	80137f4 <LoRaMacCryptoUnsecureMessage>
 800dd0c:	4603      	mov	r3, r0
 800dd0e:	f887 3090 	strb.w	r3, [r7, #144]	@ 0x90
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800dd12:	f897 3090 	ldrb.w	r3, [r7, #144]	@ 0x90
 800dd16:	2b00      	cmp	r3, #0
 800dd18:	d00f      	beq.n	800dd3a <ProcessRadioRxDone+0x66e>
            {
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_ADDRESS )
 800dd1a:	f897 3090 	ldrb.w	r3, [r7, #144]	@ 0x90
 800dd1e:	2b02      	cmp	r3, #2
 800dd20:	d104      	bne.n	800dd2c <ProcessRadioRxDone+0x660>
                {
                    // We are not the destination of this frame.
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ADDRESS_FAIL;
 800dd22:	4b75      	ldr	r3, [pc, #468]	@ (800def8 <ProcessRadioRxDone+0x82c>)
 800dd24:	220b      	movs	r2, #11
 800dd26:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
 800dd2a:	e003      	b.n	800dd34 <ProcessRadioRxDone+0x668>
                }
                else
                {
                    // MIC calculation fail
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_MIC_FAIL;
 800dd2c:	4b72      	ldr	r3, [pc, #456]	@ (800def8 <ProcessRadioRxDone+0x82c>)
 800dd2e:	220c      	movs	r2, #12
 800dd30:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
                }
                PrepareRxDoneAbort( );
 800dd34:	f7ff fca4 	bl	800d680 <PrepareRxDoneAbort>
                return;
 800dd38:	e16c      	b.n	800e014 <ProcessRadioRxDone+0x948>
                PrepareRxDoneAbort( );
                return;
            }
#endif /* LORAMAC_VERSION */

            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800dd3a:	4b6f      	ldr	r3, [pc, #444]	@ (800def8 <ProcessRadioRxDone+0x82c>)
 800dd3c:	2200      	movs	r2, #0
 800dd3e:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
            MacCtx.McpsIndication.Multicast = multicast;
 800dd42:	4a6d      	ldr	r2, [pc, #436]	@ (800def8 <ProcessRadioRxDone+0x82c>)
 800dd44:	f897 3093 	ldrb.w	r3, [r7, #147]	@ 0x93
 800dd48:	f882 341a 	strb.w	r3, [r2, #1050]	@ 0x41a
            MacCtx.McpsIndication.Buffer = NULL;
 800dd4c:	4b6a      	ldr	r3, [pc, #424]	@ (800def8 <ProcessRadioRxDone+0x82c>)
 800dd4e:	2200      	movs	r2, #0
 800dd50:	f8c3 2420 	str.w	r2, [r3, #1056]	@ 0x420
            MacCtx.McpsIndication.BufferSize = 0;
 800dd54:	4b68      	ldr	r3, [pc, #416]	@ (800def8 <ProcessRadioRxDone+0x82c>)
 800dd56:	2200      	movs	r2, #0
 800dd58:	f883 2424 	strb.w	r2, [r3, #1060]	@ 0x424
            MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 800dd5c:	693b      	ldr	r3, [r7, #16]
 800dd5e:	4a66      	ldr	r2, [pc, #408]	@ (800def8 <ProcessRadioRxDone+0x82c>)
 800dd60:	f8c2 3428 	str.w	r3, [r2, #1064]	@ 0x428
            MacCtx.MlmeIndication.DownLinkCounter = downLinkCounter;
 800dd64:	693b      	ldr	r3, [r7, #16]
 800dd66:	4a64      	ldr	r2, [pc, #400]	@ (800def8 <ProcessRadioRxDone+0x82c>)
 800dd68:	f8c2 3460 	str.w	r3, [r2, #1120]	@ 0x460
            MacCtx.McpsIndication.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 800dd6c:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 800dd70:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800dd74:	b2db      	uxtb	r3, r3
 800dd76:	2b00      	cmp	r3, #0
 800dd78:	bf14      	ite	ne
 800dd7a:	2301      	movne	r3, #1
 800dd7c:	2300      	moveq	r3, #0
 800dd7e:	b2da      	uxtb	r2, r3
 800dd80:	4b5d      	ldr	r3, [pc, #372]	@ (800def8 <ProcessRadioRxDone+0x82c>)
 800dd82:	f883 2426 	strb.w	r2, [r3, #1062]	@ 0x426

            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800dd86:	4b5c      	ldr	r3, [pc, #368]	@ (800def8 <ProcessRadioRxDone+0x82c>)
 800dd88:	2200      	movs	r2, #0
 800dd8a:	f883 2435 	strb.w	r2, [r3, #1077]	@ 0x435
            MacCtx.McpsConfirm.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 800dd8e:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 800dd92:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800dd96:	b2db      	uxtb	r3, r3
 800dd98:	2b00      	cmp	r3, #0
 800dd9a:	bf14      	ite	ne
 800dd9c:	2301      	movne	r3, #1
 800dd9e:	2300      	moveq	r3, #0
 800dda0:	b2da      	uxtb	r2, r3
 800dda2:	4b55      	ldr	r3, [pc, #340]	@ (800def8 <ProcessRadioRxDone+0x82c>)
 800dda4:	f883 2438 	strb.w	r2, [r3, #1080]	@ 0x438

            // Reset ADR ACK Counter only, when RX1 or RX2 slot
            if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 800dda8:	4b53      	ldr	r3, [pc, #332]	@ (800def8 <ProcessRadioRxDone+0x82c>)
 800ddaa:	f893 347f 	ldrb.w	r3, [r3, #1151]	@ 0x47f
 800ddae:	2b00      	cmp	r3, #0
 800ddb0:	d004      	beq.n	800ddbc <ProcessRadioRxDone+0x6f0>
                ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_2 ) )
 800ddb2:	4b51      	ldr	r3, [pc, #324]	@ (800def8 <ProcessRadioRxDone+0x82c>)
 800ddb4:	f893 347f 	ldrb.w	r3, [r3, #1151]	@ 0x47f
            if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 800ddb8:	2b01      	cmp	r3, #1
 800ddba:	d102      	bne.n	800ddc2 <ProcessRadioRxDone+0x6f6>
            {
                Nvm.MacGroup1.AdrAckCounter = 0;
 800ddbc:	4b4f      	ldr	r3, [pc, #316]	@ (800defc <ProcessRadioRxDone+0x830>)
 800ddbe:	2200      	movs	r2, #0
 800ddc0:	629a      	str	r2, [r3, #40]	@ 0x28
                Nvm.MacGroup2.DownlinkReceived = true;
#endif /* LORAMAC_VERSION */
            }

            // MCPS Indication and ack requested handling
            if( multicast == 1 )
 800ddc2:	f897 3093 	ldrb.w	r3, [r7, #147]	@ 0x93
 800ddc6:	2b01      	cmp	r3, #1
 800ddc8:	d104      	bne.n	800ddd4 <ProcessRadioRxDone+0x708>
            {
                MacCtx.McpsIndication.McpsIndication = MCPS_MULTICAST;
 800ddca:	4b4b      	ldr	r3, [pc, #300]	@ (800def8 <ProcessRadioRxDone+0x82c>)
 800ddcc:	2202      	movs	r2, #2
 800ddce:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
 800ddd2:	e01f      	b.n	800de14 <ProcessRadioRxDone+0x748>
            }
            else
            {
                if( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN )
 800ddd4:	f897 3080 	ldrb.w	r3, [r7, #128]	@ 0x80
 800ddd8:	f023 031f 	bic.w	r3, r3, #31
 800dddc:	b2db      	uxtb	r3, r3
 800ddde:	2ba0      	cmp	r3, #160	@ 0xa0
 800dde0:	d110      	bne.n	800de04 <ProcessRadioRxDone+0x738>
                {
                    Nvm.MacGroup1.SrvAckRequested = true;
 800dde2:	4b46      	ldr	r3, [pc, #280]	@ (800defc <ProcessRadioRxDone+0x830>)
 800dde4:	2201      	movs	r2, #1
 800dde6:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
                    if( Nvm.MacGroup2.Version.Fields.Minor == 0 )
 800ddea:	4b44      	ldr	r3, [pc, #272]	@ (800defc <ProcessRadioRxDone+0x830>)
 800ddec:	f893 312a 	ldrb.w	r3, [r3, #298]	@ 0x12a
 800ddf0:	2b00      	cmp	r3, #0
 800ddf2:	d102      	bne.n	800ddfa <ProcessRadioRxDone+0x72e>
                    {
                        Nvm.MacGroup1.LastRxMic = macMsgData.MIC;
 800ddf4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800ddf6:	4a41      	ldr	r2, [pc, #260]	@ (800defc <ProcessRadioRxDone+0x830>)
 800ddf8:	6353      	str	r3, [r2, #52]	@ 0x34
                    }
                    MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 800ddfa:	4b3f      	ldr	r3, [pc, #252]	@ (800def8 <ProcessRadioRxDone+0x82c>)
 800ddfc:	2201      	movs	r2, #1
 800ddfe:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
 800de02:	e007      	b.n	800de14 <ProcessRadioRxDone+0x748>
                    }
#endif /* LORAMAC_VERSION */
                }
                else
                {
                    Nvm.MacGroup1.SrvAckRequested = false;
 800de04:	4b3d      	ldr	r3, [pc, #244]	@ (800defc <ProcessRadioRxDone+0x830>)
 800de06:	2200      	movs	r2, #0
 800de08:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
                    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 800de0c:	4b3a      	ldr	r3, [pc, #232]	@ (800def8 <ProcessRadioRxDone+0x82c>)
 800de0e:	2200      	movs	r2, #0
 800de10:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
                }
            }

            // Set the pending status
			// Fix for Class C Certification test. Re-enabled part of if condition previously removed.
            if (( (Nvm.MacGroup1.SrvAckRequested == true) ||
 800de14:	4b39      	ldr	r3, [pc, #228]	@ (800defc <ProcessRadioRxDone+0x830>)
 800de16:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 800de1a:	2b00      	cmp	r3, #0
 800de1c:	d106      	bne.n	800de2c <ProcessRadioRxDone+0x760>
                  (macMsgData.FHDR.FCtrl.Bits.FPending > 0) ) &&
 800de1e:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 800de22:	f003 0310 	and.w	r3, r3, #16
 800de26:	b2db      	uxtb	r3, r3
            if (( (Nvm.MacGroup1.SrvAckRequested == true) ||
 800de28:	2b00      	cmp	r3, #0
 800de2a:	d008      	beq.n	800de3e <ProcessRadioRxDone+0x772>
                (Nvm.MacGroup2.DeviceClass == CLASS_A))
 800de2c:	4b33      	ldr	r3, [pc, #204]	@ (800defc <ProcessRadioRxDone+0x830>)
 800de2e:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
                  (macMsgData.FHDR.FCtrl.Bits.FPending > 0) ) &&
 800de32:	2b00      	cmp	r3, #0
 800de34:	d103      	bne.n	800de3e <ProcessRadioRxDone+0x772>
            {
                MacCtx.McpsIndication.IsUplinkTxPending = 1;
 800de36:	4b30      	ldr	r3, [pc, #192]	@ (800def8 <ProcessRadioRxDone+0x82c>)
 800de38:	2201      	movs	r2, #1
 800de3a:	f883 241d 	strb.w	r2, [r3, #1053]	@ 0x41d
            }

            RemoveMacCommands( MacCtx.RxStatus.RxSlot, macMsgData.FHDR.FCtrl, MacCtx.McpsConfirm.McpsRequest );
 800de3e:	4b2e      	ldr	r3, [pc, #184]	@ (800def8 <ProcessRadioRxDone+0x82c>)
 800de40:	f893 347f 	ldrb.w	r3, [r3, #1151]	@ 0x47f
 800de44:	4a2c      	ldr	r2, [pc, #176]	@ (800def8 <ProcessRadioRxDone+0x82c>)
 800de46:	f892 2434 	ldrb.w	r2, [r2, #1076]	@ 0x434
 800de4a:	f897 1048 	ldrb.w	r1, [r7, #72]	@ 0x48
 800de4e:	4618      	mov	r0, r3
 800de50:	f001 ff02 	bl	800fc58 <RemoveMacCommands>

            switch( fType )
 800de54:	7bbb      	ldrb	r3, [r7, #14]
 800de56:	2b03      	cmp	r3, #3
 800de58:	d878      	bhi.n	800df4c <ProcessRadioRxDone+0x880>
 800de5a:	a201      	add	r2, pc, #4	@ (adr r2, 800de60 <ProcessRadioRxDone+0x794>)
 800de5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800de60:	0800de71 	.word	0x0800de71
 800de64:	0800dec1 	.word	0x0800dec1
 800de68:	0800df01 	.word	0x0800df01
 800de6c:	0800df27 	.word	0x0800df27
                    * |    > 0   |   X  |  > 0  |       X      |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FOpts field
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 800de70:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 800de74:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800de78:	b2db      	uxtb	r3, r3
 800de7a:	461c      	mov	r4, r3
 800de7c:	4b1e      	ldr	r3, [pc, #120]	@ (800def8 <ProcessRadioRxDone+0x82c>)
 800de7e:	f893 347f 	ldrb.w	r3, [r3, #1151]	@ 0x47f
 800de82:	f997 1087 	ldrsb.w	r1, [r7, #135]	@ 0x87
 800de86:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 800de8a:	f102 0010 	add.w	r0, r2, #16
 800de8e:	9300      	str	r3, [sp, #0]
 800de90:	460b      	mov	r3, r1
 800de92:	4622      	mov	r2, r4
 800de94:	2100      	movs	r1, #0
 800de96:	f000 fef7 	bl	800ec88 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800de9a:	f897 205c 	ldrb.w	r2, [r7, #92]	@ 0x5c
 800de9e:	4b16      	ldr	r3, [pc, #88]	@ (800def8 <ProcessRadioRxDone+0x82c>)
 800dea0:	f883 241b 	strb.w	r2, [r3, #1051]	@ 0x41b
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 800dea4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800dea6:	4a14      	ldr	r2, [pc, #80]	@ (800def8 <ProcessRadioRxDone+0x82c>)
 800dea8:	f8c2 3420 	str.w	r3, [r2, #1056]	@ 0x420
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 800deac:	f897 2064 	ldrb.w	r2, [r7, #100]	@ 0x64
 800deb0:	4b11      	ldr	r3, [pc, #68]	@ (800def8 <ProcessRadioRxDone+0x82c>)
 800deb2:	f883 2424 	strb.w	r2, [r3, #1060]	@ 0x424
                    MacCtx.McpsIndication.RxData = true;
 800deb6:	4b10      	ldr	r3, [pc, #64]	@ (800def8 <ProcessRadioRxDone+0x82c>)
 800deb8:	2201      	movs	r2, #1
 800deba:	f883 2425 	strb.w	r2, [r3, #1061]	@ 0x425
                    break;
 800debe:	e04c      	b.n	800df5a <ProcessRadioRxDone+0x88e>
                    * |    > 0   |   X  |   -   |       -      |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FOpts field
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 800dec0:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 800dec4:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800dec8:	b2db      	uxtb	r3, r3
 800deca:	461c      	mov	r4, r3
 800decc:	4b0a      	ldr	r3, [pc, #40]	@ (800def8 <ProcessRadioRxDone+0x82c>)
 800dece:	f893 347f 	ldrb.w	r3, [r3, #1151]	@ 0x47f
 800ded2:	f997 1087 	ldrsb.w	r1, [r7, #135]	@ 0x87
 800ded6:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 800deda:	f102 0010 	add.w	r0, r2, #16
 800dede:	9300      	str	r3, [sp, #0]
 800dee0:	460b      	mov	r3, r1
 800dee2:	4622      	mov	r2, r4
 800dee4:	2100      	movs	r1, #0
 800dee6:	f000 fecf 	bl	800ec88 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800deea:	f897 205c 	ldrb.w	r2, [r7, #92]	@ 0x5c
 800deee:	4b02      	ldr	r3, [pc, #8]	@ (800def8 <ProcessRadioRxDone+0x82c>)
 800def0:	f883 241b 	strb.w	r2, [r3, #1051]	@ 0x41b
                    break;
 800def4:	e031      	b.n	800df5a <ProcessRadioRxDone+0x88e>
 800def6:	bf00      	nop
 800def8:	2000062c 	.word	0x2000062c
 800defc:	20000b34 	.word	0x20000b34
                    * |    = 0   |   -  |  = 0  | MAC commands |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FRMPayload
                    ProcessMacCommands( macMsgData.FRMPayload, 0, macMsgData.FRMPayloadSize, snr, MacCtx.RxStatus.RxSlot );
 800df00:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 800df02:	f897 2064 	ldrb.w	r2, [r7, #100]	@ 0x64
 800df06:	4b45      	ldr	r3, [pc, #276]	@ (800e01c <ProcessRadioRxDone+0x950>)
 800df08:	f893 347f 	ldrb.w	r3, [r3, #1151]	@ 0x47f
 800df0c:	f997 1087 	ldrsb.w	r1, [r7, #135]	@ 0x87
 800df10:	9300      	str	r3, [sp, #0]
 800df12:	460b      	mov	r3, r1
 800df14:	2100      	movs	r1, #0
 800df16:	f000 feb7 	bl	800ec88 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800df1a:	f897 205c 	ldrb.w	r2, [r7, #92]	@ 0x5c
 800df1e:	4b3f      	ldr	r3, [pc, #252]	@ (800e01c <ProcessRadioRxDone+0x950>)
 800df20:	f883 241b 	strb.w	r2, [r3, #1051]	@ 0x41b
                    break;
 800df24:	e019      	b.n	800df5a <ProcessRadioRxDone+0x88e>
                    * |    = 0   |   -  |  > 0  |       X      |
                    * +----------+------+-------+--------------+
                    */

                    // No MAC commands just application payload
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800df26:	f897 205c 	ldrb.w	r2, [r7, #92]	@ 0x5c
 800df2a:	4b3c      	ldr	r3, [pc, #240]	@ (800e01c <ProcessRadioRxDone+0x950>)
 800df2c:	f883 241b 	strb.w	r2, [r3, #1051]	@ 0x41b
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 800df30:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800df32:	4a3a      	ldr	r2, [pc, #232]	@ (800e01c <ProcessRadioRxDone+0x950>)
 800df34:	f8c2 3420 	str.w	r3, [r2, #1056]	@ 0x420
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 800df38:	f897 2064 	ldrb.w	r2, [r7, #100]	@ 0x64
 800df3c:	4b37      	ldr	r3, [pc, #220]	@ (800e01c <ProcessRadioRxDone+0x950>)
 800df3e:	f883 2424 	strb.w	r2, [r3, #1060]	@ 0x424
                    MacCtx.McpsIndication.RxData = true;
 800df42:	4b36      	ldr	r3, [pc, #216]	@ (800e01c <ProcessRadioRxDone+0x950>)
 800df44:	2201      	movs	r2, #1
 800df46:	f883 2425 	strb.w	r2, [r3, #1061]	@ 0x425
                    break;
 800df4a:	e006      	b.n	800df5a <ProcessRadioRxDone+0x88e>
                }
                default:
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800df4c:	4b33      	ldr	r3, [pc, #204]	@ (800e01c <ProcessRadioRxDone+0x950>)
 800df4e:	2201      	movs	r2, #1
 800df50:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
                    PrepareRxDoneAbort( );
 800df54:	f7ff fb94 	bl	800d680 <PrepareRxDoneAbort>
                    break;
 800df58:	bf00      	nop
            }
#endif /* LORAMAC_VERSION */

            // Provide always an indication, skip the callback to the user application,
            // in case of a confirmed downlink retransmission.
            MacCtx.MacFlags.Bits.McpsInd = 1;
 800df5a:	4a30      	ldr	r2, [pc, #192]	@ (800e01c <ProcessRadioRxDone+0x950>)
 800df5c:	f892 3481 	ldrb.w	r3, [r2, #1153]	@ 0x481
 800df60:	f043 0302 	orr.w	r3, r3, #2
 800df64:	f882 3481 	strb.w	r3, [r2, #1153]	@ 0x481

            break;
 800df68:	e035      	b.n	800dfd6 <ProcessRadioRxDone+0x90a>
        case FRAME_TYPE_PROPRIETARY:
            memcpy1( MacCtx.RxPayload, &payload[pktHeaderLen], size - pktHeaderLen );
 800df6a:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
 800df6e:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 800df72:	18d1      	adds	r1, r2, r3
 800df74:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
 800df78:	b29b      	uxth	r3, r3
 800df7a:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 800df7e:	1ad3      	subs	r3, r2, r3
 800df80:	b29b      	uxth	r3, r3
 800df82:	461a      	mov	r2, r3
 800df84:	4826      	ldr	r0, [pc, #152]	@ (800e020 <ProcessRadioRxDone+0x954>)
 800df86:	f008 fb58 	bl	801663a <memcpy1>

            MacCtx.McpsIndication.McpsIndication = MCPS_PROPRIETARY;
 800df8a:	4b24      	ldr	r3, [pc, #144]	@ (800e01c <ProcessRadioRxDone+0x950>)
 800df8c:	2203      	movs	r2, #3
 800df8e:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800df92:	4b22      	ldr	r3, [pc, #136]	@ (800e01c <ProcessRadioRxDone+0x950>)
 800df94:	2200      	movs	r2, #0
 800df96:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
            MacCtx.McpsIndication.Buffer = MacCtx.RxPayload;
 800df9a:	4b20      	ldr	r3, [pc, #128]	@ (800e01c <ProcessRadioRxDone+0x950>)
 800df9c:	4a20      	ldr	r2, [pc, #128]	@ (800e020 <ProcessRadioRxDone+0x954>)
 800df9e:	f8c3 2420 	str.w	r2, [r3, #1056]	@ 0x420
            MacCtx.McpsIndication.BufferSize = size - pktHeaderLen;
 800dfa2:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800dfa6:	b2da      	uxtb	r2, r3
 800dfa8:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
 800dfac:	1ad3      	subs	r3, r2, r3
 800dfae:	b2da      	uxtb	r2, r3
 800dfb0:	4b1a      	ldr	r3, [pc, #104]	@ (800e01c <ProcessRadioRxDone+0x950>)
 800dfb2:	f883 2424 	strb.w	r2, [r3, #1060]	@ 0x424

            MacCtx.MacFlags.Bits.McpsInd = 1;
 800dfb6:	4a19      	ldr	r2, [pc, #100]	@ (800e01c <ProcessRadioRxDone+0x950>)
 800dfb8:	f892 3481 	ldrb.w	r3, [r2, #1153]	@ 0x481
 800dfbc:	f043 0302 	orr.w	r3, r3, #2
 800dfc0:	f882 3481 	strb.w	r3, [r2, #1153]	@ 0x481
            break;
 800dfc4:	e007      	b.n	800dfd6 <ProcessRadioRxDone+0x90a>
        default:
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800dfc6:	4b15      	ldr	r3, [pc, #84]	@ (800e01c <ProcessRadioRxDone+0x950>)
 800dfc8:	2201      	movs	r2, #1
 800dfca:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
            PrepareRxDoneAbort( );
 800dfce:	f7ff fb57 	bl	800d680 <PrepareRxDoneAbort>
            break;
 800dfd2:	e000      	b.n	800dfd6 <ProcessRadioRxDone+0x90a>
            break;
 800dfd4:	bf00      	nop
    }

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    // Verify if we need to disable the AckTimeoutTimer
    if( MacCtx.NodeAckRequested == true )
 800dfd6:	4b11      	ldr	r3, [pc, #68]	@ (800e01c <ProcessRadioRxDone+0x950>)
 800dfd8:	f893 3410 	ldrb.w	r3, [r3, #1040]	@ 0x410
 800dfdc:	2b00      	cmp	r3, #0
 800dfde:	d008      	beq.n	800dff2 <ProcessRadioRxDone+0x926>
    {
        if( MacCtx.McpsConfirm.AckReceived == true )
 800dfe0:	4b0e      	ldr	r3, [pc, #56]	@ (800e01c <ProcessRadioRxDone+0x950>)
 800dfe2:	f893 3438 	ldrb.w	r3, [r3, #1080]	@ 0x438
 800dfe6:	2b00      	cmp	r3, #0
 800dfe8:	d00b      	beq.n	800e002 <ProcessRadioRxDone+0x936>
        {
            OnAckTimeoutTimerEvent( NULL );
 800dfea:	2000      	movs	r0, #0
 800dfec:	f000 fcaa 	bl	800e944 <OnAckTimeoutTimerEvent>
 800dff0:	e007      	b.n	800e002 <ProcessRadioRxDone+0x936>
        }
    }
    else
    {
        if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 800dff2:	4b0c      	ldr	r3, [pc, #48]	@ (800e024 <ProcessRadioRxDone+0x958>)
 800dff4:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800dff8:	2b02      	cmp	r3, #2
 800dffa:	d102      	bne.n	800e002 <ProcessRadioRxDone+0x936>
        {
            OnAckTimeoutTimerEvent( NULL );
 800dffc:	2000      	movs	r0, #0
 800dffe:	f000 fca1 	bl	800e944 <OnAckTimeoutTimerEvent>
        }
    }
    MacCtx.MacFlags.Bits.MacDone = 1;
 800e002:	4a06      	ldr	r2, [pc, #24]	@ (800e01c <ProcessRadioRxDone+0x950>)
 800e004:	f892 3481 	ldrb.w	r3, [r2, #1153]	@ 0x481
 800e008:	f043 0310 	orr.w	r3, r3, #16
 800e00c:	f882 3481 	strb.w	r3, [r2, #1153]	@ 0x481
    {
        MacCtx.MacFlags.Bits.MacDone = 1;
    }
#endif /* LORAMAC_VERSION */

    UpdateRxSlotIdleState( );
 800e010:	f7ff fa6c 	bl	800d4ec <UpdateRxSlotIdleState>
}
 800e014:	3798      	adds	r7, #152	@ 0x98
 800e016:	46bd      	mov	sp, r7
 800e018:	bdb0      	pop	{r4, r5, r7, pc}
 800e01a:	bf00      	nop
 800e01c:	2000062c 	.word	0x2000062c
 800e020:	20000864 	.word	0x20000864
 800e024:	20000b34 	.word	0x20000b34

0800e028 <ProcessRadioTxTimeout>:

static void ProcessRadioTxTimeout( void )
{
 800e028:	b580      	push	{r7, lr}
 800e02a:	af00      	add	r7, sp, #0
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800e02c:	4b11      	ldr	r3, [pc, #68]	@ (800e074 <ProcessRadioTxTimeout+0x4c>)
 800e02e:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800e032:	2b02      	cmp	r3, #2
 800e034:	d002      	beq.n	800e03c <ProcessRadioTxTimeout+0x14>
    {
        Radio.Sleep( );
 800e036:	4b10      	ldr	r3, [pc, #64]	@ (800e078 <ProcessRadioTxTimeout+0x50>)
 800e038:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e03a:	4798      	blx	r3
    }
    UpdateRxSlotIdleState( );
 800e03c:	f7ff fa56 	bl	800d4ec <UpdateRxSlotIdleState>

    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT;
 800e040:	4b0e      	ldr	r3, [pc, #56]	@ (800e07c <ProcessRadioTxTimeout+0x54>)
 800e042:	2202      	movs	r2, #2
 800e044:	f883 2435 	strb.w	r2, [r3, #1077]	@ 0x435
    LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT );
 800e048:	2002      	movs	r0, #2
 800e04a:	f004 fd17 	bl	8012a7c <LoRaMacConfirmQueueSetStatusCmn>
    if( MacCtx.NodeAckRequested == true )
 800e04e:	4b0b      	ldr	r3, [pc, #44]	@ (800e07c <ProcessRadioTxTimeout+0x54>)
 800e050:	f893 3410 	ldrb.w	r3, [r3, #1040]	@ 0x410
 800e054:	2b00      	cmp	r3, #0
 800e056:	d003      	beq.n	800e060 <ProcessRadioTxTimeout+0x38>
    {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        MacCtx.AckTimeoutRetry = true;
 800e058:	4b08      	ldr	r3, [pc, #32]	@ (800e07c <ProcessRadioTxTimeout+0x54>)
 800e05a:	2201      	movs	r2, #1
 800e05c:	f883 240f 	strb.w	r2, [r3, #1039]	@ 0x40f
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        MacCtx.RetransmitTimeoutRetry = true;
#endif /* LORAMAC_VERSION */
    }
    MacCtx.MacFlags.Bits.MacDone = 1;
 800e060:	4a06      	ldr	r2, [pc, #24]	@ (800e07c <ProcessRadioTxTimeout+0x54>)
 800e062:	f892 3481 	ldrb.w	r3, [r2, #1153]	@ 0x481
 800e066:	f043 0310 	orr.w	r3, r3, #16
 800e06a:	f882 3481 	strb.w	r3, [r2, #1153]	@ 0x481
}
 800e06e:	bf00      	nop
 800e070:	bd80      	pop	{r7, pc}
 800e072:	bf00      	nop
 800e074:	20000b34 	.word	0x20000b34
 800e078:	0801bd08 	.word	0x0801bd08
 800e07c:	2000062c 	.word	0x2000062c

0800e080 <HandleRadioRxErrorTimeout>:

static void HandleRadioRxErrorTimeout( LoRaMacEventInfoStatus_t rx1EventInfoStatus, LoRaMacEventInfoStatus_t rx2EventInfoStatus )
{
 800e080:	b580      	push	{r7, lr}
 800e082:	b084      	sub	sp, #16
 800e084:	af00      	add	r7, sp, #0
 800e086:	4603      	mov	r3, r0
 800e088:	460a      	mov	r2, r1
 800e08a:	71fb      	strb	r3, [r7, #7]
 800e08c:	4613      	mov	r3, r2
 800e08e:	71bb      	strb	r3, [r7, #6]
    bool classBRx = false;
 800e090:	2300      	movs	r3, #0
 800e092:	73fb      	strb	r3, [r7, #15]

    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800e094:	4b40      	ldr	r3, [pc, #256]	@ (800e198 <HandleRadioRxErrorTimeout+0x118>)
 800e096:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800e09a:	2b02      	cmp	r3, #2
 800e09c:	d002      	beq.n	800e0a4 <HandleRadioRxErrorTimeout+0x24>
    {
        Radio.Sleep( );
 800e09e:	4b3f      	ldr	r3, [pc, #252]	@ (800e19c <HandleRadioRxErrorTimeout+0x11c>)
 800e0a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e0a2:	4798      	blx	r3
    }

    if( LoRaMacClassBIsBeaconExpected( ) == true )
 800e0a4:	f004 f82f 	bl	8012106 <LoRaMacClassBIsBeaconExpected>
 800e0a8:	4603      	mov	r3, r0
 800e0aa:	2b00      	cmp	r3, #0
 800e0ac:	d007      	beq.n	800e0be <HandleRadioRxErrorTimeout+0x3e>
    {
        LoRaMacClassBSetBeaconState( BEACON_STATE_TIMEOUT );
 800e0ae:	2002      	movs	r0, #2
 800e0b0:	f003 ffdd 	bl	801206e <LoRaMacClassBSetBeaconState>
        LoRaMacClassBBeaconTimerEvent( NULL );
 800e0b4:	2000      	movs	r0, #0
 800e0b6:	f003 ffff 	bl	80120b8 <LoRaMacClassBBeaconTimerEvent>
        classBRx = true;
 800e0ba:	2301      	movs	r3, #1
 800e0bc:	73fb      	strb	r3, [r7, #15]
    }
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800e0be:	4b36      	ldr	r3, [pc, #216]	@ (800e198 <HandleRadioRxErrorTimeout+0x118>)
 800e0c0:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800e0c4:	2b01      	cmp	r3, #1
 800e0c6:	d119      	bne.n	800e0fc <HandleRadioRxErrorTimeout+0x7c>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 800e0c8:	f004 f824 	bl	8012114 <LoRaMacClassBIsPingExpected>
 800e0cc:	4603      	mov	r3, r0
 800e0ce:	2b00      	cmp	r3, #0
 800e0d0:	d007      	beq.n	800e0e2 <HandleRadioRxErrorTimeout+0x62>
        {
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800e0d2:	2000      	movs	r0, #0
 800e0d4:	f003 ffd5 	bl	8012082 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 800e0d8:	2000      	movs	r0, #0
 800e0da:	f003 fff6 	bl	80120ca <LoRaMacClassBPingSlotTimerEvent>
            classBRx = true;
 800e0de:	2301      	movs	r3, #1
 800e0e0:	73fb      	strb	r3, [r7, #15]
        }
        if( LoRaMacClassBIsMulticastExpected( ) == true )
 800e0e2:	f004 f81e 	bl	8012122 <LoRaMacClassBIsMulticastExpected>
 800e0e6:	4603      	mov	r3, r0
 800e0e8:	2b00      	cmp	r3, #0
 800e0ea:	d007      	beq.n	800e0fc <HandleRadioRxErrorTimeout+0x7c>
        {
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800e0ec:	2000      	movs	r0, #0
 800e0ee:	f003 ffd2 	bl	8012096 <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800e0f2:	2000      	movs	r0, #0
 800e0f4:	f003 fff2 	bl	80120dc <LoRaMacClassBMulticastSlotTimerEvent>
            classBRx = true;
 800e0f8:	2301      	movs	r3, #1
 800e0fa:	73fb      	strb	r3, [r7, #15]
        }
    }

    if( classBRx == false )
 800e0fc:	7bfb      	ldrb	r3, [r7, #15]
 800e0fe:	f083 0301 	eor.w	r3, r3, #1
 800e102:	b2db      	uxtb	r3, r3
 800e104:	2b00      	cmp	r3, #0
 800e106:	d040      	beq.n	800e18a <HandleRadioRxErrorTimeout+0x10a>
    {
        if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 800e108:	4b25      	ldr	r3, [pc, #148]	@ (800e1a0 <HandleRadioRxErrorTimeout+0x120>)
 800e10a:	f893 3480 	ldrb.w	r3, [r3, #1152]	@ 0x480
 800e10e:	2b00      	cmp	r3, #0
 800e110:	d122      	bne.n	800e158 <HandleRadioRxErrorTimeout+0xd8>
        {
            if( MacCtx.NodeAckRequested == true )
 800e112:	4b23      	ldr	r3, [pc, #140]	@ (800e1a0 <HandleRadioRxErrorTimeout+0x120>)
 800e114:	f893 3410 	ldrb.w	r3, [r3, #1040]	@ 0x410
 800e118:	2b00      	cmp	r3, #0
 800e11a:	d003      	beq.n	800e124 <HandleRadioRxErrorTimeout+0xa4>
            {
                MacCtx.McpsConfirm.Status = rx1EventInfoStatus;
 800e11c:	4a20      	ldr	r2, [pc, #128]	@ (800e1a0 <HandleRadioRxErrorTimeout+0x120>)
 800e11e:	79fb      	ldrb	r3, [r7, #7]
 800e120:	f882 3435 	strb.w	r3, [r2, #1077]	@ 0x435
            }
            LoRaMacConfirmQueueSetStatusCmn( rx1EventInfoStatus );
 800e124:	79fb      	ldrb	r3, [r7, #7]
 800e126:	4618      	mov	r0, r3
 800e128:	f004 fca8 	bl	8012a7c <LoRaMacConfirmQueueSetStatusCmn>

            if( TimerGetElapsedTime( Nvm.MacGroup1.LastTxDoneTime ) >= MacCtx.RxWindow2Delay )
 800e12c:	4b1a      	ldr	r3, [pc, #104]	@ (800e198 <HandleRadioRxErrorTimeout+0x118>)
 800e12e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e130:	4618      	mov	r0, r3
 800e132:	f00c fce1 	bl	801aaf8 <UTIL_TIMER_GetElapsedTime>
 800e136:	4602      	mov	r2, r0
 800e138:	4b19      	ldr	r3, [pc, #100]	@ (800e1a0 <HandleRadioRxErrorTimeout+0x120>)
 800e13a:	f8d3 33b4 	ldr.w	r3, [r3, #948]	@ 0x3b4
 800e13e:	429a      	cmp	r2, r3
 800e140:	d323      	bcc.n	800e18a <HandleRadioRxErrorTimeout+0x10a>
            {
                TimerStop( &MacCtx.RxWindowTimer2 );
 800e142:	4818      	ldr	r0, [pc, #96]	@ (800e1a4 <HandleRadioRxErrorTimeout+0x124>)
 800e144:	f00c fc2c 	bl	801a9a0 <UTIL_TIMER_Stop>
                MacCtx.MacFlags.Bits.MacDone = 1;
 800e148:	4a15      	ldr	r2, [pc, #84]	@ (800e1a0 <HandleRadioRxErrorTimeout+0x120>)
 800e14a:	f892 3481 	ldrb.w	r3, [r2, #1153]	@ 0x481
 800e14e:	f043 0310 	orr.w	r3, r3, #16
 800e152:	f882 3481 	strb.w	r3, [r2, #1153]	@ 0x481
 800e156:	e018      	b.n	800e18a <HandleRadioRxErrorTimeout+0x10a>
            }
        }
        else
        {
            if( MacCtx.NodeAckRequested == true )
 800e158:	4b11      	ldr	r3, [pc, #68]	@ (800e1a0 <HandleRadioRxErrorTimeout+0x120>)
 800e15a:	f893 3410 	ldrb.w	r3, [r3, #1040]	@ 0x410
 800e15e:	2b00      	cmp	r3, #0
 800e160:	d003      	beq.n	800e16a <HandleRadioRxErrorTimeout+0xea>
            {
                MacCtx.McpsConfirm.Status = rx2EventInfoStatus;
 800e162:	4a0f      	ldr	r2, [pc, #60]	@ (800e1a0 <HandleRadioRxErrorTimeout+0x120>)
 800e164:	79bb      	ldrb	r3, [r7, #6]
 800e166:	f882 3435 	strb.w	r3, [r2, #1077]	@ 0x435
            }
            LoRaMacConfirmQueueSetStatusCmn( rx2EventInfoStatus );
 800e16a:	79bb      	ldrb	r3, [r7, #6]
 800e16c:	4618      	mov	r0, r3
 800e16e:	f004 fc85 	bl	8012a7c <LoRaMacConfirmQueueSetStatusCmn>

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800e172:	4b09      	ldr	r3, [pc, #36]	@ (800e198 <HandleRadioRxErrorTimeout+0x118>)
 800e174:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800e178:	2b02      	cmp	r3, #2
 800e17a:	d006      	beq.n	800e18a <HandleRadioRxErrorTimeout+0x10a>
            {
                MacCtx.MacFlags.Bits.MacDone = 1;
 800e17c:	4a08      	ldr	r2, [pc, #32]	@ (800e1a0 <HandleRadioRxErrorTimeout+0x120>)
 800e17e:	f892 3481 	ldrb.w	r3, [r2, #1153]	@ 0x481
 800e182:	f043 0310 	orr.w	r3, r3, #16
 800e186:	f882 3481 	strb.w	r3, [r2, #1153]	@ 0x481
            MacCtx.MacFlags.Bits.MacDone = 1;
#endif /* LORAMAC_VERSION */
        }
    }

    UpdateRxSlotIdleState( );
 800e18a:	f7ff f9af 	bl	800d4ec <UpdateRxSlotIdleState>
}
 800e18e:	bf00      	nop
 800e190:	3710      	adds	r7, #16
 800e192:	46bd      	mov	sp, r7
 800e194:	bd80      	pop	{r7, pc}
 800e196:	bf00      	nop
 800e198:	20000b34 	.word	0x20000b34
 800e19c:	0801bd08 	.word	0x0801bd08
 800e1a0:	2000062c 	.word	0x2000062c
 800e1a4:	200009c4 	.word	0x200009c4

0800e1a8 <ProcessRadioRxError>:

static void ProcessRadioRxError( void )
{
 800e1a8:	b580      	push	{r7, lr}
 800e1aa:	af00      	add	r7, sp, #0
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_ERROR, LORAMAC_EVENT_INFO_STATUS_RX2_ERROR );
 800e1ac:	2106      	movs	r1, #6
 800e1ae:	2005      	movs	r0, #5
 800e1b0:	f7ff ff66 	bl	800e080 <HandleRadioRxErrorTimeout>
}
 800e1b4:	bf00      	nop
 800e1b6:	bd80      	pop	{r7, pc}

0800e1b8 <ProcessRadioRxTimeout>:

static void ProcessRadioRxTimeout( void )
{
 800e1b8:	b580      	push	{r7, lr}
 800e1ba:	af00      	add	r7, sp, #0
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_TIMEOUT, LORAMAC_EVENT_INFO_STATUS_RX2_TIMEOUT );
 800e1bc:	2104      	movs	r1, #4
 800e1be:	2003      	movs	r0, #3
 800e1c0:	f7ff ff5e 	bl	800e080 <HandleRadioRxErrorTimeout>
}
 800e1c4:	bf00      	nop
 800e1c6:	bd80      	pop	{r7, pc}

0800e1c8 <LoRaMacHandleIrqEvents>:

static void LoRaMacHandleIrqEvents( void )
{
 800e1c8:	b580      	push	{r7, lr}
 800e1ca:	b084      	sub	sp, #16
 800e1cc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e1ce:	f3ef 8310 	mrs	r3, PRIMASK
 800e1d2:	607b      	str	r3, [r7, #4]
  return(result);
 800e1d4:	687b      	ldr	r3, [r7, #4]
    LoRaMacRadioEvents_t events;

    CRITICAL_SECTION_BEGIN( );
 800e1d6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800e1d8:	b672      	cpsid	i
}
 800e1da:	bf00      	nop
    events = LoRaMacRadioEvents;
 800e1dc:	4b1d      	ldr	r3, [pc, #116]	@ (800e254 <LoRaMacHandleIrqEvents+0x8c>)
 800e1de:	681b      	ldr	r3, [r3, #0]
 800e1e0:	603b      	str	r3, [r7, #0]
    LoRaMacRadioEvents.Value = 0;
 800e1e2:	4b1c      	ldr	r3, [pc, #112]	@ (800e254 <LoRaMacHandleIrqEvents+0x8c>)
 800e1e4:	2200      	movs	r2, #0
 800e1e6:	601a      	str	r2, [r3, #0]
 800e1e8:	68fb      	ldr	r3, [r7, #12]
 800e1ea:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e1ec:	68bb      	ldr	r3, [r7, #8]
 800e1ee:	f383 8810 	msr	PRIMASK, r3
}
 800e1f2:	bf00      	nop
    CRITICAL_SECTION_END( );

    if( events.Value != 0 )
 800e1f4:	683b      	ldr	r3, [r7, #0]
 800e1f6:	2b00      	cmp	r3, #0
 800e1f8:	d027      	beq.n	800e24a <LoRaMacHandleIrqEvents+0x82>
    {
        if( events.Events.TxDone == 1 )
 800e1fa:	783b      	ldrb	r3, [r7, #0]
 800e1fc:	f003 0310 	and.w	r3, r3, #16
 800e200:	b2db      	uxtb	r3, r3
 800e202:	2b00      	cmp	r3, #0
 800e204:	d001      	beq.n	800e20a <LoRaMacHandleIrqEvents+0x42>
        {
            ProcessRadioTxDone( );
 800e206:	f7ff f989 	bl	800d51c <ProcessRadioTxDone>
        }
        if( events.Events.RxDone == 1 )
 800e20a:	783b      	ldrb	r3, [r7, #0]
 800e20c:	f003 0308 	and.w	r3, r3, #8
 800e210:	b2db      	uxtb	r3, r3
 800e212:	2b00      	cmp	r3, #0
 800e214:	d001      	beq.n	800e21a <LoRaMacHandleIrqEvents+0x52>
        {
            ProcessRadioRxDone( );
 800e216:	f7ff fa59 	bl	800d6cc <ProcessRadioRxDone>
        }
        if( events.Events.TxTimeout == 1 )
 800e21a:	783b      	ldrb	r3, [r7, #0]
 800e21c:	f003 0304 	and.w	r3, r3, #4
 800e220:	b2db      	uxtb	r3, r3
 800e222:	2b00      	cmp	r3, #0
 800e224:	d001      	beq.n	800e22a <LoRaMacHandleIrqEvents+0x62>
        {
            ProcessRadioTxTimeout( );
 800e226:	f7ff feff 	bl	800e028 <ProcessRadioTxTimeout>
        }
        if( events.Events.RxError == 1 )
 800e22a:	783b      	ldrb	r3, [r7, #0]
 800e22c:	f003 0302 	and.w	r3, r3, #2
 800e230:	b2db      	uxtb	r3, r3
 800e232:	2b00      	cmp	r3, #0
 800e234:	d001      	beq.n	800e23a <LoRaMacHandleIrqEvents+0x72>
        {
            ProcessRadioRxError( );
 800e236:	f7ff ffb7 	bl	800e1a8 <ProcessRadioRxError>
        }
        if( events.Events.RxTimeout == 1 )
 800e23a:	783b      	ldrb	r3, [r7, #0]
 800e23c:	f003 0301 	and.w	r3, r3, #1
 800e240:	b2db      	uxtb	r3, r3
 800e242:	2b00      	cmp	r3, #0
 800e244:	d001      	beq.n	800e24a <LoRaMacHandleIrqEvents+0x82>
        {
            ProcessRadioRxTimeout( );
 800e246:	f7ff ffb7 	bl	800e1b8 <ProcessRadioRxTimeout>
        }
    }
}
 800e24a:	bf00      	nop
 800e24c:	3710      	adds	r7, #16
 800e24e:	46bd      	mov	sp, r7
 800e250:	bd80      	pop	{r7, pc}
 800e252:	bf00      	nop
 800e254:	200012a4 	.word	0x200012a4

0800e258 <LoRaMacIsBusy>:

bool LoRaMacIsBusy( void )
{
 800e258:	b480      	push	{r7}
 800e25a:	af00      	add	r7, sp, #0
    if( MacCtx.MacState == LORAMAC_STOPPED )
 800e25c:	4b0b      	ldr	r3, [pc, #44]	@ (800e28c <LoRaMacIsBusy+0x34>)
 800e25e:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800e262:	2b01      	cmp	r3, #1
 800e264:	d101      	bne.n	800e26a <LoRaMacIsBusy+0x12>
    {
        return false;
 800e266:	2300      	movs	r3, #0
 800e268:	e00c      	b.n	800e284 <LoRaMacIsBusy+0x2c>
    {
        return true;
    }
#endif /* LORAMAC_VERSION */

    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 800e26a:	4b08      	ldr	r3, [pc, #32]	@ (800e28c <LoRaMacIsBusy+0x34>)
 800e26c:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800e270:	2b00      	cmp	r3, #0
 800e272:	d106      	bne.n	800e282 <LoRaMacIsBusy+0x2a>
        ( MacCtx.AllowRequests == LORAMAC_REQUEST_HANDLING_ON ) )
 800e274:	4b05      	ldr	r3, [pc, #20]	@ (800e28c <LoRaMacIsBusy+0x34>)
 800e276:	f893 3482 	ldrb.w	r3, [r3, #1154]	@ 0x482
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 800e27a:	2b01      	cmp	r3, #1
 800e27c:	d101      	bne.n	800e282 <LoRaMacIsBusy+0x2a>
    {
        return false;
 800e27e:	2300      	movs	r3, #0
 800e280:	e000      	b.n	800e284 <LoRaMacIsBusy+0x2c>
    }
    return true;
 800e282:	2301      	movs	r3, #1
}
 800e284:	4618      	mov	r0, r3
 800e286:	46bd      	mov	sp, r7
 800e288:	bc80      	pop	{r7}
 800e28a:	4770      	bx	lr
 800e28c:	2000062c 	.word	0x2000062c

0800e290 <LoRaMacIsStopped>:

bool LoRaMacIsStopped( void )
{
 800e290:	b480      	push	{r7}
 800e292:	af00      	add	r7, sp, #0
    if( MacCtx.MacState == LORAMAC_STOPPED )
 800e294:	4b05      	ldr	r3, [pc, #20]	@ (800e2ac <LoRaMacIsStopped+0x1c>)
 800e296:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800e29a:	2b01      	cmp	r3, #1
 800e29c:	d101      	bne.n	800e2a2 <LoRaMacIsStopped+0x12>
    {
        return true;
 800e29e:	2301      	movs	r3, #1
 800e2a0:	e000      	b.n	800e2a4 <LoRaMacIsStopped+0x14>
    }
    return false;
 800e2a2:	2300      	movs	r3, #0
}
 800e2a4:	4618      	mov	r0, r3
 800e2a6:	46bd      	mov	sp, r7
 800e2a8:	bc80      	pop	{r7}
 800e2aa:	4770      	bx	lr
 800e2ac:	2000062c 	.word	0x2000062c

0800e2b0 <LoRaMacEnableRequests>:

static void LoRaMacEnableRequests( LoRaMacRequestHandling_t requestState )
{
 800e2b0:	b480      	push	{r7}
 800e2b2:	b083      	sub	sp, #12
 800e2b4:	af00      	add	r7, sp, #0
 800e2b6:	4603      	mov	r3, r0
 800e2b8:	71fb      	strb	r3, [r7, #7]
    MacCtx.AllowRequests = requestState;
 800e2ba:	4a04      	ldr	r2, [pc, #16]	@ (800e2cc <LoRaMacEnableRequests+0x1c>)
 800e2bc:	79fb      	ldrb	r3, [r7, #7]
 800e2be:	f882 3482 	strb.w	r3, [r2, #1154]	@ 0x482
}
 800e2c2:	bf00      	nop
 800e2c4:	370c      	adds	r7, #12
 800e2c6:	46bd      	mov	sp, r7
 800e2c8:	bc80      	pop	{r7}
 800e2ca:	4770      	bx	lr
 800e2cc:	2000062c 	.word	0x2000062c

0800e2d0 <LoRaMacHandleRequestEvents>:

static void LoRaMacHandleRequestEvents( void )
{
 800e2d0:	b580      	push	{r7, lr}
 800e2d2:	b082      	sub	sp, #8
 800e2d4:	af00      	add	r7, sp, #0
    // Handle events
    LoRaMacFlags_t reqEvents = MacCtx.MacFlags;
 800e2d6:	4b2c      	ldr	r3, [pc, #176]	@ (800e388 <LoRaMacHandleRequestEvents+0xb8>)
 800e2d8:	f893 3481 	ldrb.w	r3, [r3, #1153]	@ 0x481
 800e2dc:	713b      	strb	r3, [r7, #4]

    if( MacCtx.MacState == LORAMAC_IDLE )
 800e2de:	4b2a      	ldr	r3, [pc, #168]	@ (800e388 <LoRaMacHandleRequestEvents+0xb8>)
 800e2e0:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800e2e4:	2b00      	cmp	r3, #0
 800e2e6:	d14a      	bne.n	800e37e <LoRaMacHandleRequestEvents+0xae>
    {
        // Update event bits
        if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 800e2e8:	4b27      	ldr	r3, [pc, #156]	@ (800e388 <LoRaMacHandleRequestEvents+0xb8>)
 800e2ea:	f893 3481 	ldrb.w	r3, [r3, #1153]	@ 0x481
 800e2ee:	f003 0301 	and.w	r3, r3, #1
 800e2f2:	b2db      	uxtb	r3, r3
 800e2f4:	2b00      	cmp	r3, #0
 800e2f6:	d006      	beq.n	800e306 <LoRaMacHandleRequestEvents+0x36>
        {
            MacCtx.MacFlags.Bits.McpsReq = 0;
 800e2f8:	4a23      	ldr	r2, [pc, #140]	@ (800e388 <LoRaMacHandleRequestEvents+0xb8>)
 800e2fa:	f892 3481 	ldrb.w	r3, [r2, #1153]	@ 0x481
 800e2fe:	f36f 0300 	bfc	r3, #0, #1
 800e302:	f882 3481 	strb.w	r3, [r2, #1153]	@ 0x481
        }

        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800e306:	4b20      	ldr	r3, [pc, #128]	@ (800e388 <LoRaMacHandleRequestEvents+0xb8>)
 800e308:	f893 3481 	ldrb.w	r3, [r3, #1153]	@ 0x481
 800e30c:	f003 0304 	and.w	r3, r3, #4
 800e310:	b2db      	uxtb	r3, r3
 800e312:	2b00      	cmp	r3, #0
 800e314:	d006      	beq.n	800e324 <LoRaMacHandleRequestEvents+0x54>
        {
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 800e316:	4a1c      	ldr	r2, [pc, #112]	@ (800e388 <LoRaMacHandleRequestEvents+0xb8>)
 800e318:	f892 3481 	ldrb.w	r3, [r2, #1153]	@ 0x481
 800e31c:	f36f 0382 	bfc	r3, #2, #1
 800e320:	f882 3481 	strb.w	r3, [r2, #1153]	@ 0x481
        }

        // Allow requests again
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 800e324:	2001      	movs	r0, #1
 800e326:	f7ff ffc3 	bl	800e2b0 <LoRaMacEnableRequests>

        // Handle callbacks
        if( reqEvents.Bits.McpsReq == 1 )
 800e32a:	793b      	ldrb	r3, [r7, #4]
 800e32c:	f003 0301 	and.w	r3, r3, #1
 800e330:	b2db      	uxtb	r3, r3
 800e332:	2b00      	cmp	r3, #0
 800e334:	d005      	beq.n	800e342 <LoRaMacHandleRequestEvents+0x72>
        {
            MacCtx.MacPrimitives->MacMcpsConfirm( &MacCtx.McpsConfirm );
 800e336:	4b14      	ldr	r3, [pc, #80]	@ (800e388 <LoRaMacHandleRequestEvents+0xb8>)
 800e338:	f8d3 3344 	ldr.w	r3, [r3, #836]	@ 0x344
 800e33c:	681b      	ldr	r3, [r3, #0]
 800e33e:	4813      	ldr	r0, [pc, #76]	@ (800e38c <LoRaMacHandleRequestEvents+0xbc>)
 800e340:	4798      	blx	r3
        }

        if( reqEvents.Bits.MlmeReq == 1 )
 800e342:	793b      	ldrb	r3, [r7, #4]
 800e344:	f003 0304 	and.w	r3, r3, #4
 800e348:	b2db      	uxtb	r3, r3
 800e34a:	2b00      	cmp	r3, #0
 800e34c:	d00e      	beq.n	800e36c <LoRaMacHandleRequestEvents+0x9c>
        {
            LoRaMacConfirmQueueHandleCb( &MacCtx.MlmeConfirm );
 800e34e:	4810      	ldr	r0, [pc, #64]	@ (800e390 <LoRaMacHandleRequestEvents+0xc0>)
 800e350:	f004 fbe2 	bl	8012b18 <LoRaMacConfirmQueueHandleCb>
            if( LoRaMacConfirmQueueGetCnt( ) > 0 )
 800e354:	f004 fc32 	bl	8012bbc <LoRaMacConfirmQueueGetCnt>
 800e358:	4603      	mov	r3, r0
 800e35a:	2b00      	cmp	r3, #0
 800e35c:	d006      	beq.n	800e36c <LoRaMacHandleRequestEvents+0x9c>
            {
                MacCtx.MacFlags.Bits.MlmeReq = 1;
 800e35e:	4a0a      	ldr	r2, [pc, #40]	@ (800e388 <LoRaMacHandleRequestEvents+0xb8>)
 800e360:	f892 3481 	ldrb.w	r3, [r2, #1153]	@ 0x481
 800e364:	f043 0304 	orr.w	r3, r3, #4
 800e368:	f882 3481 	strb.w	r3, [r2, #1153]	@ 0x481
            }
        }

        // Start beaconing again
        LoRaMacClassBResumeBeaconing( );
 800e36c:	f003 fef7 	bl	801215e <LoRaMacClassBResumeBeaconing>

        // Procedure done. Reset variables.
        MacCtx.MacFlags.Bits.MacDone = 0;
 800e370:	4a05      	ldr	r2, [pc, #20]	@ (800e388 <LoRaMacHandleRequestEvents+0xb8>)
 800e372:	f892 3481 	ldrb.w	r3, [r2, #1153]	@ 0x481
 800e376:	f36f 1304 	bfc	r3, #4, #1
 800e37a:	f882 3481 	strb.w	r3, [r2, #1153]	@ 0x481
    }
}
 800e37e:	bf00      	nop
 800e380:	3708      	adds	r7, #8
 800e382:	46bd      	mov	sp, r7
 800e384:	bd80      	pop	{r7, pc}
 800e386:	bf00      	nop
 800e388:	2000062c 	.word	0x2000062c
 800e38c:	20000a60 	.word	0x20000a60
 800e390:	20000a74 	.word	0x20000a74

0800e394 <LoRaMacHandleIndicationEvents>:

static void LoRaMacHandleIndicationEvents( void )
{
 800e394:	b580      	push	{r7, lr}
 800e396:	af00      	add	r7, sp, #0
    // Handle MLME indication
    if( MacCtx.MacFlags.Bits.MlmeInd == 1 )
 800e398:	4b16      	ldr	r3, [pc, #88]	@ (800e3f4 <LoRaMacHandleIndicationEvents+0x60>)
 800e39a:	f893 3481 	ldrb.w	r3, [r3, #1153]	@ 0x481
 800e39e:	f003 0308 	and.w	r3, r3, #8
 800e3a2:	b2db      	uxtb	r3, r3
 800e3a4:	2b00      	cmp	r3, #0
 800e3a6:	d00d      	beq.n	800e3c4 <LoRaMacHandleIndicationEvents+0x30>
    {
        MacCtx.MacFlags.Bits.MlmeInd = 0;
 800e3a8:	4a12      	ldr	r2, [pc, #72]	@ (800e3f4 <LoRaMacHandleIndicationEvents+0x60>)
 800e3aa:	f892 3481 	ldrb.w	r3, [r2, #1153]	@ 0x481
 800e3ae:	f36f 03c3 	bfc	r3, #3, #1
 800e3b2:	f882 3481 	strb.w	r3, [r2, #1153]	@ 0x481
        MacCtx.MacPrimitives->MacMlmeIndication( &MacCtx.MlmeIndication, &MacCtx.RxStatus );
 800e3b6:	4b0f      	ldr	r3, [pc, #60]	@ (800e3f4 <LoRaMacHandleIndicationEvents+0x60>)
 800e3b8:	f8d3 3344 	ldr.w	r3, [r3, #836]	@ 0x344
 800e3bc:	68db      	ldr	r3, [r3, #12]
 800e3be:	490e      	ldr	r1, [pc, #56]	@ (800e3f8 <LoRaMacHandleIndicationEvents+0x64>)
 800e3c0:	480e      	ldr	r0, [pc, #56]	@ (800e3fc <LoRaMacHandleIndicationEvents+0x68>)
 800e3c2:	4798      	blx	r3
    }

    // Handle MCPS indication
    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 800e3c4:	4b0b      	ldr	r3, [pc, #44]	@ (800e3f4 <LoRaMacHandleIndicationEvents+0x60>)
 800e3c6:	f893 3481 	ldrb.w	r3, [r3, #1153]	@ 0x481
 800e3ca:	f003 0302 	and.w	r3, r3, #2
 800e3ce:	b2db      	uxtb	r3, r3
 800e3d0:	2b00      	cmp	r3, #0
 800e3d2:	d00d      	beq.n	800e3f0 <LoRaMacHandleIndicationEvents+0x5c>
    {
        MacCtx.MacFlags.Bits.McpsInd = 0;
 800e3d4:	4a07      	ldr	r2, [pc, #28]	@ (800e3f4 <LoRaMacHandleIndicationEvents+0x60>)
 800e3d6:	f892 3481 	ldrb.w	r3, [r2, #1153]	@ 0x481
 800e3da:	f36f 0341 	bfc	r3, #1, #1
 800e3de:	f882 3481 	strb.w	r3, [r2, #1153]	@ 0x481
        MacCtx.MacPrimitives->MacMcpsIndication( &MacCtx.McpsIndication, &MacCtx.RxStatus );
 800e3e2:	4b04      	ldr	r3, [pc, #16]	@ (800e3f4 <LoRaMacHandleIndicationEvents+0x60>)
 800e3e4:	f8d3 3344 	ldr.w	r3, [r3, #836]	@ 0x344
 800e3e8:	685b      	ldr	r3, [r3, #4]
 800e3ea:	4903      	ldr	r1, [pc, #12]	@ (800e3f8 <LoRaMacHandleIndicationEvents+0x64>)
 800e3ec:	4804      	ldr	r0, [pc, #16]	@ (800e400 <LoRaMacHandleIndicationEvents+0x6c>)
 800e3ee:	4798      	blx	r3
    }
}
 800e3f0:	bf00      	nop
 800e3f2:	bd80      	pop	{r7, pc}
 800e3f4:	2000062c 	.word	0x2000062c
 800e3f8:	20000aa8 	.word	0x20000aa8
 800e3fc:	20000a88 	.word	0x20000a88
 800e400:	20000a44 	.word	0x20000a44

0800e404 <LoRaMacHandleMcpsRequest>:
    }
}
#endif /* LORAMAC_VERSION */

static void LoRaMacHandleMcpsRequest( void )
{
 800e404:	b580      	push	{r7, lr}
 800e406:	b082      	sub	sp, #8
 800e408:	af00      	add	r7, sp, #0
    // Handle MCPS uplinks
    if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 800e40a:	4b32      	ldr	r3, [pc, #200]	@ (800e4d4 <LoRaMacHandleMcpsRequest+0xd0>)
 800e40c:	f893 3481 	ldrb.w	r3, [r3, #1153]	@ 0x481
 800e410:	f003 0301 	and.w	r3, r3, #1
 800e414:	b2db      	uxtb	r3, r3
 800e416:	2b00      	cmp	r3, #0
 800e418:	d058      	beq.n	800e4cc <LoRaMacHandleMcpsRequest+0xc8>
    {
        bool stopRetransmission = false;
 800e41a:	2300      	movs	r3, #0
 800e41c:	71fb      	strb	r3, [r7, #7]
        bool waitForRetransmission = false;
 800e41e:	2300      	movs	r3, #0
 800e420:	71bb      	strb	r3, [r7, #6]

        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 800e422:	4b2c      	ldr	r3, [pc, #176]	@ (800e4d4 <LoRaMacHandleMcpsRequest+0xd0>)
 800e424:	f893 3434 	ldrb.w	r3, [r3, #1076]	@ 0x434
 800e428:	2b00      	cmp	r3, #0
 800e42a:	d004      	beq.n	800e436 <LoRaMacHandleMcpsRequest+0x32>
            ( MacCtx.McpsConfirm.McpsRequest == MCPS_PROPRIETARY ) )
 800e42c:	4b29      	ldr	r3, [pc, #164]	@ (800e4d4 <LoRaMacHandleMcpsRequest+0xd0>)
 800e42e:	f893 3434 	ldrb.w	r3, [r3, #1076]	@ 0x434
        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 800e432:	2b03      	cmp	r3, #3
 800e434:	d104      	bne.n	800e440 <LoRaMacHandleMcpsRequest+0x3c>
        {
            stopRetransmission = CheckRetransUnconfirmedUplink( );
 800e436:	f002 f83b 	bl	80104b0 <CheckRetransUnconfirmedUplink>
 800e43a:	4603      	mov	r3, r0
 800e43c:	71fb      	strb	r3, [r7, #7]
 800e43e:	e020      	b.n	800e482 <LoRaMacHandleMcpsRequest+0x7e>
        }
        else if( MacCtx.McpsConfirm.McpsRequest == MCPS_CONFIRMED )
 800e440:	4b24      	ldr	r3, [pc, #144]	@ (800e4d4 <LoRaMacHandleMcpsRequest+0xd0>)
 800e442:	f893 3434 	ldrb.w	r3, [r3, #1076]	@ 0x434
 800e446:	2b01      	cmp	r3, #1
 800e448:	d11b      	bne.n	800e482 <LoRaMacHandleMcpsRequest+0x7e>
        {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            if( MacCtx.AckTimeoutRetry == true )
 800e44a:	4b22      	ldr	r3, [pc, #136]	@ (800e4d4 <LoRaMacHandleMcpsRequest+0xd0>)
 800e44c:	f893 340f 	ldrb.w	r3, [r3, #1039]	@ 0x40f
 800e450:	2b00      	cmp	r3, #0
 800e452:	d014      	beq.n	800e47e <LoRaMacHandleMcpsRequest+0x7a>
            {
                stopRetransmission = CheckRetransConfirmedUplink( );
 800e454:	f002 f858 	bl	8010508 <CheckRetransConfirmedUplink>
 800e458:	4603      	mov	r3, r0
 800e45a:	71fb      	strb	r3, [r7, #7]

                if( Nvm.MacGroup2.Version.Fields.Minor == 0 )
 800e45c:	4b1e      	ldr	r3, [pc, #120]	@ (800e4d8 <LoRaMacHandleMcpsRequest+0xd4>)
 800e45e:	f893 312a 	ldrb.w	r3, [r3, #298]	@ 0x12a
 800e462:	2b00      	cmp	r3, #0
 800e464:	d10d      	bne.n	800e482 <LoRaMacHandleMcpsRequest+0x7e>
                {
                    if( stopRetransmission == false )
 800e466:	79fb      	ldrb	r3, [r7, #7]
 800e468:	f083 0301 	eor.w	r3, r3, #1
 800e46c:	b2db      	uxtb	r3, r3
 800e46e:	2b00      	cmp	r3, #0
 800e470:	d002      	beq.n	800e478 <LoRaMacHandleMcpsRequest+0x74>
                    {
                        AckTimeoutRetriesProcess( );
 800e472:	f002 f8db 	bl	801062c <AckTimeoutRetriesProcess>
 800e476:	e004      	b.n	800e482 <LoRaMacHandleMcpsRequest+0x7e>
                    }
                    else
                    {
                        AckTimeoutRetriesFinalize( );
 800e478:	f002 f916 	bl	80106a8 <AckTimeoutRetriesFinalize>
 800e47c:	e001      	b.n	800e482 <LoRaMacHandleMcpsRequest+0x7e>
                    }
                }
            }
            else
            {
                waitForRetransmission = true;
 800e47e:	2301      	movs	r3, #1
 800e480:	71bb      	strb	r3, [r7, #6]
                waitForRetransmission = true;
            }
#endif /* LORAMAC_VERSION */
        }

        if( stopRetransmission == true )
 800e482:	79fb      	ldrb	r3, [r7, #7]
 800e484:	2b00      	cmp	r3, #0
 800e486:	d00d      	beq.n	800e4a4 <LoRaMacHandleMcpsRequest+0xa0>
        {// Stop retransmission
            TimerStop( &MacCtx.TxDelayedTimer );
 800e488:	4814      	ldr	r0, [pc, #80]	@ (800e4dc <LoRaMacHandleMcpsRequest+0xd8>)
 800e48a:	f00c fa89 	bl	801a9a0 <UTIL_TIMER_Stop>
            MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 800e48e:	4b11      	ldr	r3, [pc, #68]	@ (800e4d4 <LoRaMacHandleMcpsRequest+0xd0>)
 800e490:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800e494:	f023 0320 	bic.w	r3, r3, #32
 800e498:	4a0e      	ldr	r2, [pc, #56]	@ (800e4d4 <LoRaMacHandleMcpsRequest+0xd0>)
 800e49a:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
            StopRetransmission( );
 800e49e:	f002 f855 	bl	801054c <StopRetransmission>
#endif /* LORAMAC_VERSION */
            // Sends the same frame again
            OnTxDelayedTimerEvent( NULL );
        }
    }
}
 800e4a2:	e013      	b.n	800e4cc <LoRaMacHandleMcpsRequest+0xc8>
        else if( waitForRetransmission == false )
 800e4a4:	79bb      	ldrb	r3, [r7, #6]
 800e4a6:	f083 0301 	eor.w	r3, r3, #1
 800e4aa:	b2db      	uxtb	r3, r3
 800e4ac:	2b00      	cmp	r3, #0
 800e4ae:	d00d      	beq.n	800e4cc <LoRaMacHandleMcpsRequest+0xc8>
            MacCtx.MacFlags.Bits.MacDone = 0;
 800e4b0:	4a08      	ldr	r2, [pc, #32]	@ (800e4d4 <LoRaMacHandleMcpsRequest+0xd0>)
 800e4b2:	f892 3481 	ldrb.w	r3, [r2, #1153]	@ 0x481
 800e4b6:	f36f 1304 	bfc	r3, #4, #1
 800e4ba:	f882 3481 	strb.w	r3, [r2, #1153]	@ 0x481
            MacCtx.AckTimeoutRetry = false;
 800e4be:	4b05      	ldr	r3, [pc, #20]	@ (800e4d4 <LoRaMacHandleMcpsRequest+0xd0>)
 800e4c0:	2200      	movs	r2, #0
 800e4c2:	f883 240f 	strb.w	r2, [r3, #1039]	@ 0x40f
            OnTxDelayedTimerEvent( NULL );
 800e4c6:	2000      	movs	r0, #0
 800e4c8:	f000 f992 	bl	800e7f0 <OnTxDelayedTimerEvent>
}
 800e4cc:	bf00      	nop
 800e4ce:	3708      	adds	r7, #8
 800e4d0:	46bd      	mov	sp, r7
 800e4d2:	bd80      	pop	{r7, pc}
 800e4d4:	2000062c 	.word	0x2000062c
 800e4d8:	20000b34 	.word	0x20000b34
 800e4dc:	20000994 	.word	0x20000994

0800e4e0 <LoRaMacHandleMlmeRequest>:

static void LoRaMacHandleMlmeRequest( void )
{
 800e4e0:	b580      	push	{r7, lr}
 800e4e2:	af00      	add	r7, sp, #0
    // Handle join request
    if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800e4e4:	4b1b      	ldr	r3, [pc, #108]	@ (800e554 <LoRaMacHandleMlmeRequest+0x74>)
 800e4e6:	f893 3481 	ldrb.w	r3, [r3, #1153]	@ 0x481
 800e4ea:	f003 0304 	and.w	r3, r3, #4
 800e4ee:	b2db      	uxtb	r3, r3
 800e4f0:	2b00      	cmp	r3, #0
 800e4f2:	d02c      	beq.n	800e54e <LoRaMacHandleMlmeRequest+0x6e>
            ( LoRaMacConfirmQueueIsCmdActive( MLME_REJOIN_1 ) == true ) ||
            ( LoRaMacConfirmQueueIsCmdActive( MLME_REJOIN_2 ) == true ) )
        {
            MacCtx.ChannelsNbTransCounter = 0;
#else
        if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800e4f4:	2001      	movs	r0, #1
 800e4f6:	f004 faf5 	bl	8012ae4 <LoRaMacConfirmQueueIsCmdActive>
 800e4fa:	4603      	mov	r3, r0
 800e4fc:	2b00      	cmp	r3, #0
 800e4fe:	d012      	beq.n	800e526 <LoRaMacHandleMlmeRequest+0x46>
        {
            if( LoRaMacConfirmQueueGetStatus( MLME_JOIN ) == LORAMAC_EVENT_INFO_STATUS_OK )
 800e500:	2001      	movs	r0, #1
 800e502:	f004 fa91 	bl	8012a28 <LoRaMacConfirmQueueGetStatus>
 800e506:	4603      	mov	r3, r0
 800e508:	2b00      	cmp	r3, #0
 800e50a:	d103      	bne.n	800e514 <LoRaMacHandleMlmeRequest+0x34>
            {// Node joined successfully
                MacCtx.ChannelsNbTransCounter = 0;
 800e50c:	4b11      	ldr	r3, [pc, #68]	@ (800e554 <LoRaMacHandleMlmeRequest+0x74>)
 800e50e:	2200      	movs	r2, #0
 800e510:	f883 240c 	strb.w	r2, [r3, #1036]	@ 0x40c
            }
#endif /* LORAMAC_VERSION */
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800e514:	4b0f      	ldr	r3, [pc, #60]	@ (800e554 <LoRaMacHandleMlmeRequest+0x74>)
 800e516:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800e51a:	f023 0302 	bic.w	r3, r3, #2
 800e51e:	4a0d      	ldr	r2, [pc, #52]	@ (800e554 <LoRaMacHandleMlmeRequest+0x74>)
 800e520:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
        {
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
        }
#endif /* LORAMAC_VERSION */
    }
}
 800e524:	e013      	b.n	800e54e <LoRaMacHandleMlmeRequest+0x6e>
        else if( ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true ) ||
 800e526:	2006      	movs	r0, #6
 800e528:	f004 fadc 	bl	8012ae4 <LoRaMacConfirmQueueIsCmdActive>
 800e52c:	4603      	mov	r3, r0
 800e52e:	2b00      	cmp	r3, #0
 800e530:	d105      	bne.n	800e53e <LoRaMacHandleMlmeRequest+0x5e>
                 ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW_1 ) == true ) )
 800e532:	2007      	movs	r0, #7
 800e534:	f004 fad6 	bl	8012ae4 <LoRaMacConfirmQueueIsCmdActive>
 800e538:	4603      	mov	r3, r0
        else if( ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true ) ||
 800e53a:	2b00      	cmp	r3, #0
 800e53c:	d007      	beq.n	800e54e <LoRaMacHandleMlmeRequest+0x6e>
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800e53e:	4b05      	ldr	r3, [pc, #20]	@ (800e554 <LoRaMacHandleMlmeRequest+0x74>)
 800e540:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800e544:	f023 0302 	bic.w	r3, r3, #2
 800e548:	4a02      	ldr	r2, [pc, #8]	@ (800e554 <LoRaMacHandleMlmeRequest+0x74>)
 800e54a:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
}
 800e54e:	bf00      	nop
 800e550:	bd80      	pop	{r7, pc}
 800e552:	bf00      	nop
 800e554:	2000062c 	.word	0x2000062c

0800e558 <LoRaMacCheckForBeaconAcquisition>:

static uint8_t LoRaMacCheckForBeaconAcquisition( void )
{
 800e558:	b580      	push	{r7, lr}
 800e55a:	af00      	add	r7, sp, #0
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 800e55c:	200c      	movs	r0, #12
 800e55e:	f004 fac1 	bl	8012ae4 <LoRaMacConfirmQueueIsCmdActive>
 800e562:	4603      	mov	r3, r0
 800e564:	2b00      	cmp	r3, #0
 800e566:	d019      	beq.n	800e59c <LoRaMacCheckForBeaconAcquisition+0x44>
        ( MacCtx.MacFlags.Bits.McpsReq == 0 ) )
 800e568:	4b0e      	ldr	r3, [pc, #56]	@ (800e5a4 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 800e56a:	f893 3481 	ldrb.w	r3, [r3, #1153]	@ 0x481
 800e56e:	f003 0301 	and.w	r3, r3, #1
 800e572:	b2db      	uxtb	r3, r3
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 800e574:	2b00      	cmp	r3, #0
 800e576:	d111      	bne.n	800e59c <LoRaMacCheckForBeaconAcquisition+0x44>
    {
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800e578:	4b0a      	ldr	r3, [pc, #40]	@ (800e5a4 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 800e57a:	f893 3481 	ldrb.w	r3, [r3, #1153]	@ 0x481
 800e57e:	f003 0304 	and.w	r3, r3, #4
 800e582:	b2db      	uxtb	r3, r3
 800e584:	2b00      	cmp	r3, #0
 800e586:	d009      	beq.n	800e59c <LoRaMacCheckForBeaconAcquisition+0x44>
        {
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800e588:	4b06      	ldr	r3, [pc, #24]	@ (800e5a4 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 800e58a:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800e58e:	f023 0302 	bic.w	r3, r3, #2
 800e592:	4a04      	ldr	r2, [pc, #16]	@ (800e5a4 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 800e594:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
            return 0x01;
 800e598:	2301      	movs	r3, #1
 800e59a:	e000      	b.n	800e59e <LoRaMacCheckForBeaconAcquisition+0x46>
        }
    }
    return 0x00;
 800e59c:	2300      	movs	r3, #0
}
 800e59e:	4618      	mov	r0, r3
 800e5a0:	bd80      	pop	{r7, pc}
 800e5a2:	bf00      	nop
 800e5a4:	2000062c 	.word	0x2000062c

0800e5a8 <LoRaMacCheckForRxAbort>:
    return false;
}
#endif /* LORAMAC_VERSION */

static void LoRaMacCheckForRxAbort( void )
{
 800e5a8:	b480      	push	{r7}
 800e5aa:	af00      	add	r7, sp, #0
    // A error occurs during receiving
    if( ( MacCtx.MacState & LORAMAC_RX_ABORT ) == LORAMAC_RX_ABORT )
 800e5ac:	4b0d      	ldr	r3, [pc, #52]	@ (800e5e4 <LoRaMacCheckForRxAbort+0x3c>)
 800e5ae:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800e5b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e5b6:	2b00      	cmp	r3, #0
 800e5b8:	d00f      	beq.n	800e5da <LoRaMacCheckForRxAbort+0x32>
    {
        MacCtx.MacState &= ~LORAMAC_RX_ABORT;
 800e5ba:	4b0a      	ldr	r3, [pc, #40]	@ (800e5e4 <LoRaMacCheckForRxAbort+0x3c>)
 800e5bc:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800e5c0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800e5c4:	4a07      	ldr	r2, [pc, #28]	@ (800e5e4 <LoRaMacCheckForRxAbort+0x3c>)
 800e5c6:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
        MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800e5ca:	4b06      	ldr	r3, [pc, #24]	@ (800e5e4 <LoRaMacCheckForRxAbort+0x3c>)
 800e5cc:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800e5d0:	f023 0302 	bic.w	r3, r3, #2
 800e5d4:	4a03      	ldr	r2, [pc, #12]	@ (800e5e4 <LoRaMacCheckForRxAbort+0x3c>)
 800e5d6:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
    }
}
 800e5da:	bf00      	nop
 800e5dc:	46bd      	mov	sp, r7
 800e5de:	bc80      	pop	{r7}
 800e5e0:	4770      	bx	lr
 800e5e2:	bf00      	nop
 800e5e4:	2000062c 	.word	0x2000062c

0800e5e8 <LoRaMacHandleNvm>:

static void LoRaMacHandleNvm( LoRaMacNvmData_t* nvmData )
{
 800e5e8:	b580      	push	{r7, lr}
 800e5ea:	b084      	sub	sp, #16
 800e5ec:	af00      	add	r7, sp, #0
 800e5ee:	6078      	str	r0, [r7, #4]
    uint32_t crc = 0;
 800e5f0:	2300      	movs	r3, #0
 800e5f2:	60bb      	str	r3, [r7, #8]
    uint16_t notifyFlags = LORAMAC_NVM_NOTIFY_FLAG_NONE;
 800e5f4:	2300      	movs	r3, #0
 800e5f6:	81fb      	strh	r3, [r7, #14]

    if( MacCtx.MacState != LORAMAC_IDLE )
 800e5f8:	4b50      	ldr	r3, [pc, #320]	@ (800e73c <LoRaMacHandleNvm+0x154>)
 800e5fa:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800e5fe:	2b00      	cmp	r3, #0
 800e600:	f040 8098 	bne.w	800e734 <LoRaMacHandleNvm+0x14c>
    {
        return;
    }

    // Crypto
    crc = Crc32( ( uint8_t* ) &nvmData->Crypto, sizeof( nvmData->Crypto ) -
 800e604:	687b      	ldr	r3, [r7, #4]
 800e606:	2124      	movs	r1, #36	@ 0x24
 800e608:	4618      	mov	r0, r3
 800e60a:	f008 f86b 	bl	80166e4 <Crc32>
 800e60e:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->Crypto.Crc32 ) );
    if( crc != nvmData->Crypto.Crc32 )
 800e610:	687b      	ldr	r3, [r7, #4]
 800e612:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e614:	68ba      	ldr	r2, [r7, #8]
 800e616:	429a      	cmp	r2, r3
 800e618:	d006      	beq.n	800e628 <LoRaMacHandleNvm+0x40>
    {
        nvmData->Crypto.Crc32 = crc;
 800e61a:	687b      	ldr	r3, [r7, #4]
 800e61c:	68ba      	ldr	r2, [r7, #8]
 800e61e:	625a      	str	r2, [r3, #36]	@ 0x24
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CRYPTO;
 800e620:	89fb      	ldrh	r3, [r7, #14]
 800e622:	f043 0301 	orr.w	r3, r3, #1
 800e626:	81fb      	strh	r3, [r7, #14]
    }

    // MacGroup1
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup1, sizeof( nvmData->MacGroup1 ) -
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	3328      	adds	r3, #40	@ 0x28
 800e62c:	211c      	movs	r1, #28
 800e62e:	4618      	mov	r0, r3
 800e630:	f008 f858 	bl	80166e4 <Crc32>
 800e634:	60b8      	str	r0, [r7, #8]
                                                   sizeof( nvmData->MacGroup1.Crc32 ) );
    if( crc != nvmData->MacGroup1.Crc32 )
 800e636:	687b      	ldr	r3, [r7, #4]
 800e638:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e63a:	68ba      	ldr	r2, [r7, #8]
 800e63c:	429a      	cmp	r2, r3
 800e63e:	d006      	beq.n	800e64e <LoRaMacHandleNvm+0x66>
    {
        nvmData->MacGroup1.Crc32 = crc;
 800e640:	687b      	ldr	r3, [r7, #4]
 800e642:	68ba      	ldr	r2, [r7, #8]
 800e644:	645a      	str	r2, [r3, #68]	@ 0x44
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP1;
 800e646:	89fb      	ldrh	r3, [r7, #14]
 800e648:	f043 0302 	orr.w	r3, r3, #2
 800e64c:	81fb      	strh	r3, [r7, #14]
    }

    // MacGroup2
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup2, sizeof( nvmData->MacGroup2 ) -
 800e64e:	687b      	ldr	r3, [r7, #4]
 800e650:	3348      	adds	r3, #72	@ 0x48
 800e652:	21fc      	movs	r1, #252	@ 0xfc
 800e654:	4618      	mov	r0, r3
 800e656:	f008 f845 	bl	80166e4 <Crc32>
 800e65a:	60b8      	str	r0, [r7, #8]
                                                   sizeof( nvmData->MacGroup2.Crc32 ) );
    if( crc != nvmData->MacGroup2.Crc32 )
 800e65c:	687b      	ldr	r3, [r7, #4]
 800e65e:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
 800e662:	68ba      	ldr	r2, [r7, #8]
 800e664:	429a      	cmp	r2, r3
 800e666:	d007      	beq.n	800e678 <LoRaMacHandleNvm+0x90>
    {
        nvmData->MacGroup2.Crc32 = crc;
 800e668:	687b      	ldr	r3, [r7, #4]
 800e66a:	68ba      	ldr	r2, [r7, #8]
 800e66c:	f8c3 2144 	str.w	r2, [r3, #324]	@ 0x144
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP2;
 800e670:	89fb      	ldrh	r3, [r7, #14]
 800e672:	f043 0304 	orr.w	r3, r3, #4
 800e676:	81fb      	strh	r3, [r7, #14]
    }

    // Secure Element
    crc = Crc32( ( uint8_t* ) &nvmData->SecureElement, sizeof( nvmData->SecureElement ) -
 800e678:	687b      	ldr	r3, [r7, #4]
 800e67a:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 800e67e:	21d4      	movs	r1, #212	@ 0xd4
 800e680:	4618      	mov	r0, r3
 800e682:	f008 f82f 	bl	80166e4 <Crc32>
 800e686:	60b8      	str	r0, [r7, #8]
                                                       sizeof( nvmData->SecureElement.Crc32 ) );
    if( crc != nvmData->SecureElement.Crc32 )
 800e688:	687b      	ldr	r3, [r7, #4]
 800e68a:	f8d3 321c 	ldr.w	r3, [r3, #540]	@ 0x21c
 800e68e:	68ba      	ldr	r2, [r7, #8]
 800e690:	429a      	cmp	r2, r3
 800e692:	d007      	beq.n	800e6a4 <LoRaMacHandleNvm+0xbc>
    {
        nvmData->SecureElement.Crc32 = crc;
 800e694:	687b      	ldr	r3, [r7, #4]
 800e696:	68ba      	ldr	r2, [r7, #8]
 800e698:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_SECURE_ELEMENT;
 800e69c:	89fb      	ldrh	r3, [r7, #14]
 800e69e:	f043 0308 	orr.w	r3, r3, #8
 800e6a2:	81fb      	strh	r3, [r7, #14]
    }

    // Region
    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup1, sizeof( nvmData->RegionGroup1 ) -
 800e6a4:	687b      	ldr	r3, [r7, #4]
 800e6a6:	f503 7308 	add.w	r3, r3, #544	@ 0x220
 800e6aa:	2190      	movs	r1, #144	@ 0x90
 800e6ac:	4618      	mov	r0, r3
 800e6ae:	f008 f819 	bl	80166e4 <Crc32>
 800e6b2:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->RegionGroup1.Crc32 ) );
    if( crc != nvmData->RegionGroup1.Crc32 )
 800e6b4:	687b      	ldr	r3, [r7, #4]
 800e6b6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800e6ba:	68ba      	ldr	r2, [r7, #8]
 800e6bc:	429a      	cmp	r2, r3
 800e6be:	d007      	beq.n	800e6d0 <LoRaMacHandleNvm+0xe8>
    {
        nvmData->RegionGroup1.Crc32 = crc;
 800e6c0:	687b      	ldr	r3, [r7, #4]
 800e6c2:	68ba      	ldr	r2, [r7, #8]
 800e6c4:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP1;
 800e6c8:	89fb      	ldrh	r3, [r7, #14]
 800e6ca:	f043 0310 	orr.w	r3, r3, #16
 800e6ce:	81fb      	strh	r3, [r7, #14]
    }

    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup2, sizeof( nvmData->RegionGroup2 ) -
 800e6d0:	687b      	ldr	r3, [r7, #4]
 800e6d2:	f503 732d 	add.w	r3, r3, #692	@ 0x2b4
 800e6d6:	f44f 6194 	mov.w	r1, #1184	@ 0x4a0
 800e6da:	4618      	mov	r0, r3
 800e6dc:	f008 f802 	bl	80166e4 <Crc32>
 800e6e0:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->RegionGroup2.Crc32 ) );
    if( crc != nvmData->RegionGroup2.Crc32 )
 800e6e2:	687b      	ldr	r3, [r7, #4]
 800e6e4:	f8d3 3754 	ldr.w	r3, [r3, #1876]	@ 0x754
 800e6e8:	68ba      	ldr	r2, [r7, #8]
 800e6ea:	429a      	cmp	r2, r3
 800e6ec:	d007      	beq.n	800e6fe <LoRaMacHandleNvm+0x116>
    {
        nvmData->RegionGroup2.Crc32 = crc;
 800e6ee:	687b      	ldr	r3, [r7, #4]
 800e6f0:	68ba      	ldr	r2, [r7, #8]
 800e6f2:	f8c3 2754 	str.w	r2, [r3, #1876]	@ 0x754
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP2;
 800e6f6:	89fb      	ldrh	r3, [r7, #14]
 800e6f8:	f043 0320 	orr.w	r3, r3, #32
 800e6fc:	81fb      	strh	r3, [r7, #14]
    }

    // ClassB
    crc = Crc32( ( uint8_t* ) &nvmData->ClassB, sizeof( nvmData->ClassB ) -
 800e6fe:	687b      	ldr	r3, [r7, #4]
 800e700:	f503 63eb 	add.w	r3, r3, #1880	@ 0x758
 800e704:	2114      	movs	r1, #20
 800e706:	4618      	mov	r0, r3
 800e708:	f007 ffec 	bl	80166e4 <Crc32>
 800e70c:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->ClassB.Crc32 ) );
    if( crc != nvmData->ClassB.Crc32 )
 800e70e:	687b      	ldr	r3, [r7, #4]
 800e710:	f8d3 376c 	ldr.w	r3, [r3, #1900]	@ 0x76c
 800e714:	68ba      	ldr	r2, [r7, #8]
 800e716:	429a      	cmp	r2, r3
 800e718:	d007      	beq.n	800e72a <LoRaMacHandleNvm+0x142>
    {
        nvmData->ClassB.Crc32 = crc;
 800e71a:	687b      	ldr	r3, [r7, #4]
 800e71c:	68ba      	ldr	r2, [r7, #8]
 800e71e:	f8c3 276c 	str.w	r2, [r3, #1900]	@ 0x76c
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CLASS_B;
 800e722:	89fb      	ldrh	r3, [r7, #14]
 800e724:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e728:	81fb      	strh	r3, [r7, #14]
    }

    CallNvmDataChangeCallback( notifyFlags );
 800e72a:	89fb      	ldrh	r3, [r7, #14]
 800e72c:	4618      	mov	r0, r3
 800e72e:	f001 ff5f 	bl	80105f0 <CallNvmDataChangeCallback>
 800e732:	e000      	b.n	800e736 <LoRaMacHandleNvm+0x14e>
        return;
 800e734:	bf00      	nop
}
 800e736:	3710      	adds	r7, #16
 800e738:	46bd      	mov	sp, r7
 800e73a:	bd80      	pop	{r7, pc}
 800e73c:	2000062c 	.word	0x2000062c

0800e740 <LoRaMacProcess>:
    return false;
}
#endif /* LORAMAC_VERSION */

void LoRaMacProcess( void )
{
 800e740:	b580      	push	{r7, lr}
 800e742:	b082      	sub	sp, #8
 800e744:	af00      	add	r7, sp, #0
    uint8_t noTx = false;
 800e746:	2300      	movs	r3, #0
 800e748:	71fb      	strb	r3, [r7, #7]

    LoRaMacHandleIrqEvents( );
 800e74a:	f7ff fd3d 	bl	800e1c8 <LoRaMacHandleIrqEvents>
    LoRaMacClassBProcess( );
 800e74e:	f003 fd6a 	bl	8012226 <LoRaMacClassBProcess>

    // MAC proceeded a state and is ready to check
    if( MacCtx.MacFlags.Bits.MacDone == 1 )
 800e752:	4b25      	ldr	r3, [pc, #148]	@ (800e7e8 <LoRaMacProcess+0xa8>)
 800e754:	f893 3481 	ldrb.w	r3, [r3, #1153]	@ 0x481
 800e758:	f003 0310 	and.w	r3, r3, #16
 800e75c:	b2db      	uxtb	r3, r3
 800e75e:	2b00      	cmp	r3, #0
 800e760:	d023      	beq.n	800e7aa <LoRaMacProcess+0x6a>
    {
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_OFF );
 800e762:	2000      	movs	r0, #0
 800e764:	f7ff fda4 	bl	800e2b0 <LoRaMacEnableRequests>
        LoRaMacCheckForRxAbort( );
 800e768:	f7ff ff1e 	bl	800e5a8 <LoRaMacCheckForRxAbort>

        // An error occurs during transmitting
        if( IsRequestPending( ) > 0 )
 800e76c:	f001 ffd0 	bl	8010710 <IsRequestPending>
 800e770:	4603      	mov	r3, r0
 800e772:	2b00      	cmp	r3, #0
 800e774:	d006      	beq.n	800e784 <LoRaMacProcess+0x44>
        {
            noTx |= LoRaMacCheckForBeaconAcquisition( );
 800e776:	f7ff feef 	bl	800e558 <LoRaMacCheckForBeaconAcquisition>
 800e77a:	4603      	mov	r3, r0
 800e77c:	461a      	mov	r2, r3
 800e77e:	79fb      	ldrb	r3, [r7, #7]
 800e780:	4313      	orrs	r3, r2
 800e782:	71fb      	strb	r3, [r7, #7]
        }

        if( noTx == 0x00 )
 800e784:	79fb      	ldrb	r3, [r7, #7]
 800e786:	2b00      	cmp	r3, #0
 800e788:	d103      	bne.n	800e792 <LoRaMacProcess+0x52>
        {
            LoRaMacHandleMlmeRequest( );
 800e78a:	f7ff fea9 	bl	800e4e0 <LoRaMacHandleMlmeRequest>
            LoRaMacHandleMcpsRequest( );
 800e78e:	f7ff fe39 	bl	800e404 <LoRaMacHandleMcpsRequest>
        }
        LoRaMacHandleRequestEvents( );
 800e792:	f7ff fd9d 	bl	800e2d0 <LoRaMacHandleRequestEvents>
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 800e796:	2001      	movs	r0, #1
 800e798:	f7ff fd8a 	bl	800e2b0 <LoRaMacEnableRequests>
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 800e79c:	4a12      	ldr	r2, [pc, #72]	@ (800e7e8 <LoRaMacProcess+0xa8>)
 800e79e:	f892 3481 	ldrb.w	r3, [r2, #1153]	@ 0x481
 800e7a2:	f043 0320 	orr.w	r3, r3, #32
 800e7a6:	f882 3481 	strb.w	r3, [r2, #1153]	@ 0x481
    }
    LoRaMacHandleIndicationEvents( );
 800e7aa:	f7ff fdf3 	bl	800e394 <LoRaMacHandleIndicationEvents>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    LoRaMacHandleRejoinEvents( );
#endif /* LORAMAC_VERSION */

    if( MacCtx.RxSlot == RX_SLOT_WIN_CLASS_C )
 800e7ae:	4b0e      	ldr	r3, [pc, #56]	@ (800e7e8 <LoRaMacProcess+0xa8>)
 800e7b0:	f893 3480 	ldrb.w	r3, [r3, #1152]	@ 0x480
 800e7b4:	2b02      	cmp	r3, #2
 800e7b6:	d101      	bne.n	800e7bc <LoRaMacProcess+0x7c>
    {
        OpenContinuousRxCWindow( );
 800e7b8:	f001 fbc8 	bl	800ff4c <OpenContinuousRxCWindow>
    }
    if( MacCtx.MacFlags.Bits.NvmHandle == 1 )
 800e7bc:	4b0a      	ldr	r3, [pc, #40]	@ (800e7e8 <LoRaMacProcess+0xa8>)
 800e7be:	f893 3481 	ldrb.w	r3, [r3, #1153]	@ 0x481
 800e7c2:	f003 0320 	and.w	r3, r3, #32
 800e7c6:	b2db      	uxtb	r3, r3
 800e7c8:	2b00      	cmp	r3, #0
 800e7ca:	d009      	beq.n	800e7e0 <LoRaMacProcess+0xa0>
    {
        MacCtx.MacFlags.Bits.NvmHandle = 0;
 800e7cc:	4a06      	ldr	r2, [pc, #24]	@ (800e7e8 <LoRaMacProcess+0xa8>)
 800e7ce:	f892 3481 	ldrb.w	r3, [r2, #1153]	@ 0x481
 800e7d2:	f36f 1345 	bfc	r3, #5, #1
 800e7d6:	f882 3481 	strb.w	r3, [r2, #1153]	@ 0x481
        LoRaMacHandleNvm( &Nvm );
 800e7da:	4804      	ldr	r0, [pc, #16]	@ (800e7ec <LoRaMacProcess+0xac>)
 800e7dc:	f7ff ff04 	bl	800e5e8 <LoRaMacHandleNvm>
    }
}
 800e7e0:	bf00      	nop
 800e7e2:	3708      	adds	r7, #8
 800e7e4:	46bd      	mov	sp, r7
 800e7e6:	bd80      	pop	{r7, pc}
 800e7e8:	2000062c 	.word	0x2000062c
 800e7ec:	20000b34 	.word	0x20000b34

0800e7f0 <OnTxDelayedTimerEvent>:

static void OnTxDelayedTimerEvent( void* context )
{
 800e7f0:	b580      	push	{r7, lr}
 800e7f2:	b082      	sub	sp, #8
 800e7f4:	af00      	add	r7, sp, #0
 800e7f6:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.TxDelayedTimer );
 800e7f8:	4817      	ldr	r0, [pc, #92]	@ (800e858 <OnTxDelayedTimerEvent+0x68>)
 800e7fa:	f00c f8d1 	bl	801a9a0 <UTIL_TIMER_Stop>
    MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 800e7fe:	4b17      	ldr	r3, [pc, #92]	@ (800e85c <OnTxDelayedTimerEvent+0x6c>)
 800e800:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800e804:	f023 0320 	bic.w	r3, r3, #32
 800e808:	4a14      	ldr	r2, [pc, #80]	@ (800e85c <OnTxDelayedTimerEvent+0x6c>)
 800e80a:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
        return;
    }
#endif /* LORAMAC_VERSION */

    // Schedule frame, allow delayed frame transmissions
    switch( ScheduleTx( true ) )
 800e80e:	2001      	movs	r0, #1
 800e810:	f001 f8f4 	bl	800f9fc <ScheduleTx>
 800e814:	4603      	mov	r3, r0
 800e816:	2b00      	cmp	r3, #0
 800e818:	d018      	beq.n	800e84c <OnTxDelayedTimerEvent+0x5c>
 800e81a:	2b0b      	cmp	r3, #11
 800e81c:	d016      	beq.n	800e84c <OnTxDelayedTimerEvent+0x5c>
            break;
        }
        default:
        {
            // Stop retransmission attempt
            MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800e81e:	4b10      	ldr	r3, [pc, #64]	@ (800e860 <OnTxDelayedTimerEvent+0x70>)
 800e820:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 800e824:	b2da      	uxtb	r2, r3
 800e826:	4b0d      	ldr	r3, [pc, #52]	@ (800e85c <OnTxDelayedTimerEvent+0x6c>)
 800e828:	f883 2436 	strb.w	r2, [r3, #1078]	@ 0x436
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
 800e82c:	4b0b      	ldr	r3, [pc, #44]	@ (800e85c <OnTxDelayedTimerEvent+0x6c>)
 800e82e:	f893 240e 	ldrb.w	r2, [r3, #1038]	@ 0x40e
 800e832:	4b0a      	ldr	r3, [pc, #40]	@ (800e85c <OnTxDelayedTimerEvent+0x6c>)
 800e834:	f883 2439 	strb.w	r2, [r3, #1081]	@ 0x439
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            MacCtx.McpsConfirm.NbTrans = MacCtx.ChannelsNbTransCounter;
#endif /* LORAMAC_VERSION */
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR;
 800e838:	4b08      	ldr	r3, [pc, #32]	@ (800e85c <OnTxDelayedTimerEvent+0x6c>)
 800e83a:	2209      	movs	r2, #9
 800e83c:	f883 2435 	strb.w	r2, [r3, #1077]	@ 0x435
            LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR );
 800e840:	2009      	movs	r0, #9
 800e842:	f004 f91b 	bl	8012a7c <LoRaMacConfirmQueueSetStatusCmn>
            StopRetransmission( );
 800e846:	f001 fe81 	bl	801054c <StopRetransmission>
            break;
 800e84a:	e000      	b.n	800e84e <OnTxDelayedTimerEvent+0x5e>
            break;
 800e84c:	bf00      	nop
        }
    }
}
 800e84e:	bf00      	nop
 800e850:	3708      	adds	r7, #8
 800e852:	46bd      	mov	sp, r7
 800e854:	bd80      	pop	{r7, pc}
 800e856:	bf00      	nop
 800e858:	20000994 	.word	0x20000994
 800e85c:	2000062c 	.word	0x2000062c
 800e860:	20000b34 	.word	0x20000b34

0800e864 <OnRxWindow1TimerEvent>:

static void OnRxWindow1TimerEvent( void* context )
{
 800e864:	b580      	push	{r7, lr}
 800e866:	b082      	sub	sp, #8
 800e868:	af00      	add	r7, sp, #0
 800e86a:	6078      	str	r0, [r7, #4]
    MacCtx.RxWindow1Config.Channel = MacCtx.Channel;
 800e86c:	4b14      	ldr	r3, [pc, #80]	@ (800e8c0 <OnRxWindow1TimerEvent+0x5c>)
 800e86e:	f893 2411 	ldrb.w	r2, [r3, #1041]	@ 0x411
 800e872:	4b13      	ldr	r3, [pc, #76]	@ (800e8c0 <OnRxWindow1TimerEvent+0x5c>)
 800e874:	f883 23b8 	strb.w	r2, [r3, #952]	@ 0x3b8
    MacCtx.RxWindow1Config.DrOffset = Nvm.MacGroup2.MacParams.Rx1DrOffset;
 800e878:	4b12      	ldr	r3, [pc, #72]	@ (800e8c4 <OnRxWindow1TimerEvent+0x60>)
 800e87a:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 800e87e:	b25a      	sxtb	r2, r3
 800e880:	4b0f      	ldr	r3, [pc, #60]	@ (800e8c0 <OnRxWindow1TimerEvent+0x5c>)
 800e882:	f883 23bb 	strb.w	r2, [r3, #955]	@ 0x3bb
    MacCtx.RxWindow1Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800e886:	4b0f      	ldr	r3, [pc, #60]	@ (800e8c4 <OnRxWindow1TimerEvent+0x60>)
 800e888:	f893 207d 	ldrb.w	r2, [r3, #125]	@ 0x7d
 800e88c:	4b0c      	ldr	r3, [pc, #48]	@ (800e8c0 <OnRxWindow1TimerEvent+0x5c>)
 800e88e:	f883 23c8 	strb.w	r2, [r3, #968]	@ 0x3c8
    MacCtx.RxWindow1Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 800e892:	4b0c      	ldr	r3, [pc, #48]	@ (800e8c4 <OnRxWindow1TimerEvent+0x60>)
 800e894:	f893 208c 	ldrb.w	r2, [r3, #140]	@ 0x8c
 800e898:	4b09      	ldr	r3, [pc, #36]	@ (800e8c0 <OnRxWindow1TimerEvent+0x5c>)
 800e89a:	f883 23c9 	strb.w	r2, [r3, #969]	@ 0x3c9
    MacCtx.RxWindow1Config.RxContinuous = false;
 800e89e:	4b08      	ldr	r3, [pc, #32]	@ (800e8c0 <OnRxWindow1TimerEvent+0x5c>)
 800e8a0:	2200      	movs	r2, #0
 800e8a2:	f883 23ca 	strb.w	r2, [r3, #970]	@ 0x3ca
    MacCtx.RxWindow1Config.RxSlot = RX_SLOT_WIN_1;
 800e8a6:	4b06      	ldr	r3, [pc, #24]	@ (800e8c0 <OnRxWindow1TimerEvent+0x5c>)
 800e8a8:	2200      	movs	r2, #0
 800e8aa:	f883 23cb 	strb.w	r2, [r3, #971]	@ 0x3cb
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RxWindow1Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
#endif /* LORAMAC_VERSION */

    RxWindowSetup( &MacCtx.RxWindowTimer1, &MacCtx.RxWindow1Config );
 800e8ae:	4906      	ldr	r1, [pc, #24]	@ (800e8c8 <OnRxWindow1TimerEvent+0x64>)
 800e8b0:	4806      	ldr	r0, [pc, #24]	@ (800e8cc <OnRxWindow1TimerEvent+0x68>)
 800e8b2:	f001 fb17 	bl	800fee4 <RxWindowSetup>
}
 800e8b6:	bf00      	nop
 800e8b8:	3708      	adds	r7, #8
 800e8ba:	46bd      	mov	sp, r7
 800e8bc:	bd80      	pop	{r7, pc}
 800e8be:	bf00      	nop
 800e8c0:	2000062c 	.word	0x2000062c
 800e8c4:	20000b34 	.word	0x20000b34
 800e8c8:	200009e4 	.word	0x200009e4
 800e8cc:	200009ac 	.word	0x200009ac

0800e8d0 <OnRxWindow2TimerEvent>:

static void OnRxWindow2TimerEvent( void* context )
{
 800e8d0:	b580      	push	{r7, lr}
 800e8d2:	b082      	sub	sp, #8
 800e8d4:	af00      	add	r7, sp, #0
 800e8d6:	6078      	str	r0, [r7, #4]
    // Check if we are processing Rx1 window.
    // If yes, we don't setup the Rx2 window.
    if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 800e8d8:	4b16      	ldr	r3, [pc, #88]	@ (800e934 <OnRxWindow2TimerEvent+0x64>)
 800e8da:	f893 3480 	ldrb.w	r3, [r3, #1152]	@ 0x480
 800e8de:	2b00      	cmp	r3, #0
 800e8e0:	d023      	beq.n	800e92a <OnRxWindow2TimerEvent+0x5a>
    {
        return;
    }
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 800e8e2:	4b14      	ldr	r3, [pc, #80]	@ (800e934 <OnRxWindow2TimerEvent+0x64>)
 800e8e4:	f893 2411 	ldrb.w	r2, [r3, #1041]	@ 0x411
 800e8e8:	4b12      	ldr	r3, [pc, #72]	@ (800e934 <OnRxWindow2TimerEvent+0x64>)
 800e8ea:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 800e8ee:	4b12      	ldr	r3, [pc, #72]	@ (800e938 <OnRxWindow2TimerEvent+0x68>)
 800e8f0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e8f2:	4a10      	ldr	r2, [pc, #64]	@ (800e934 <OnRxWindow2TimerEvent+0x64>)
 800e8f4:	f8c2 33d0 	str.w	r3, [r2, #976]	@ 0x3d0
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800e8f8:	4b0f      	ldr	r3, [pc, #60]	@ (800e938 <OnRxWindow2TimerEvent+0x68>)
 800e8fa:	f893 207d 	ldrb.w	r2, [r3, #125]	@ 0x7d
 800e8fe:	4b0d      	ldr	r3, [pc, #52]	@ (800e934 <OnRxWindow2TimerEvent+0x64>)
 800e900:	f883 23dc 	strb.w	r2, [r3, #988]	@ 0x3dc
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 800e904:	4b0c      	ldr	r3, [pc, #48]	@ (800e938 <OnRxWindow2TimerEvent+0x68>)
 800e906:	f893 208c 	ldrb.w	r2, [r3, #140]	@ 0x8c
 800e90a:	4b0a      	ldr	r3, [pc, #40]	@ (800e934 <OnRxWindow2TimerEvent+0x64>)
 800e90c:	f883 23dd 	strb.w	r2, [r3, #989]	@ 0x3dd
    MacCtx.RxWindow2Config.RxContinuous = false;
 800e910:	4b08      	ldr	r3, [pc, #32]	@ (800e934 <OnRxWindow2TimerEvent+0x64>)
 800e912:	2200      	movs	r2, #0
 800e914:	f883 23de 	strb.w	r2, [r3, #990]	@ 0x3de
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 800e918:	4b06      	ldr	r3, [pc, #24]	@ (800e934 <OnRxWindow2TimerEvent+0x64>)
 800e91a:	2201      	movs	r2, #1
 800e91c:	f883 23df 	strb.w	r2, [r3, #991]	@ 0x3df
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RxWindow2Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
#endif /* LORAMAC_VERSION */

    RxWindowSetup( &MacCtx.RxWindowTimer2, &MacCtx.RxWindow2Config );
 800e920:	4906      	ldr	r1, [pc, #24]	@ (800e93c <OnRxWindow2TimerEvent+0x6c>)
 800e922:	4807      	ldr	r0, [pc, #28]	@ (800e940 <OnRxWindow2TimerEvent+0x70>)
 800e924:	f001 fade 	bl	800fee4 <RxWindowSetup>
 800e928:	e000      	b.n	800e92c <OnRxWindow2TimerEvent+0x5c>
        return;
 800e92a:	bf00      	nop
}
 800e92c:	3708      	adds	r7, #8
 800e92e:	46bd      	mov	sp, r7
 800e930:	bd80      	pop	{r7, pc}
 800e932:	bf00      	nop
 800e934:	2000062c 	.word	0x2000062c
 800e938:	20000b34 	.word	0x20000b34
 800e93c:	200009f8 	.word	0x200009f8
 800e940:	200009c4 	.word	0x200009c4

0800e944 <OnAckTimeoutTimerEvent>:
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
static void OnAckTimeoutTimerEvent( void* context )
{
 800e944:	b580      	push	{r7, lr}
 800e946:	b082      	sub	sp, #8
 800e948:	af00      	add	r7, sp, #0
 800e94a:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.AckTimeoutTimer );
 800e94c:	480e      	ldr	r0, [pc, #56]	@ (800e988 <OnAckTimeoutTimerEvent+0x44>)
 800e94e:	f00c f827 	bl	801a9a0 <UTIL_TIMER_Stop>

    if( MacCtx.NodeAckRequested == true )
 800e952:	4b0e      	ldr	r3, [pc, #56]	@ (800e98c <OnAckTimeoutTimerEvent+0x48>)
 800e954:	f893 3410 	ldrb.w	r3, [r3, #1040]	@ 0x410
 800e958:	2b00      	cmp	r3, #0
 800e95a:	d003      	beq.n	800e964 <OnAckTimeoutTimerEvent+0x20>
    {
        MacCtx.AckTimeoutRetry = true;
 800e95c:	4b0b      	ldr	r3, [pc, #44]	@ (800e98c <OnAckTimeoutTimerEvent+0x48>)
 800e95e:	2201      	movs	r2, #1
 800e960:	f883 240f 	strb.w	r2, [r3, #1039]	@ 0x40f
    }
    if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 800e964:	4b0a      	ldr	r3, [pc, #40]	@ (800e990 <OnAckTimeoutTimerEvent+0x4c>)
 800e966:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800e96a:	2b02      	cmp	r3, #2
 800e96c:	d106      	bne.n	800e97c <OnAckTimeoutTimerEvent+0x38>
    {
        MacCtx.MacFlags.Bits.MacDone = 1;
 800e96e:	4a07      	ldr	r2, [pc, #28]	@ (800e98c <OnAckTimeoutTimerEvent+0x48>)
 800e970:	f892 3481 	ldrb.w	r3, [r2, #1153]	@ 0x481
 800e974:	f043 0310 	orr.w	r3, r3, #16
 800e978:	f882 3481 	strb.w	r3, [r2, #1153]	@ 0x481
    }
    OnMacProcessNotify( );
 800e97c:	f001 fe22 	bl	80105c4 <OnMacProcessNotify>
}
 800e980:	bf00      	nop
 800e982:	3708      	adds	r7, #8
 800e984:	46bd      	mov	sp, r7
 800e986:	bd80      	pop	{r7, pc}
 800e988:	20000a20 	.word	0x20000a20
 800e98c:	2000062c 	.word	0x2000062c
 800e990:	20000b34 	.word	0x20000b34

0800e994 <GetFCntDown>:

static LoRaMacCryptoStatus_t GetFCntDown( AddressIdentifier_t addrID, FType_t fType, LoRaMacMessageData_t* macMsg, Version_t lrWanVersion,
                                          uint16_t maxFCntGap, FCntIdentifier_t* fCntID, uint32_t* currentDown )
{
 800e994:	b580      	push	{r7, lr}
 800e996:	b084      	sub	sp, #16
 800e998:	af00      	add	r7, sp, #0
 800e99a:	60ba      	str	r2, [r7, #8]
 800e99c:	607b      	str	r3, [r7, #4]
 800e99e:	4603      	mov	r3, r0
 800e9a0:	73fb      	strb	r3, [r7, #15]
 800e9a2:	460b      	mov	r3, r1
 800e9a4:	73bb      	strb	r3, [r7, #14]
    if( ( macMsg == NULL ) || ( fCntID == NULL ) ||
 800e9a6:	68bb      	ldr	r3, [r7, #8]
 800e9a8:	2b00      	cmp	r3, #0
 800e9aa:	d005      	beq.n	800e9b8 <GetFCntDown+0x24>
 800e9ac:	69fb      	ldr	r3, [r7, #28]
 800e9ae:	2b00      	cmp	r3, #0
 800e9b0:	d002      	beq.n	800e9b8 <GetFCntDown+0x24>
 800e9b2:	6a3b      	ldr	r3, [r7, #32]
 800e9b4:	2b00      	cmp	r3, #0
 800e9b6:	d101      	bne.n	800e9bc <GetFCntDown+0x28>
        ( currentDown == NULL ) )
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 800e9b8:	230a      	movs	r3, #10
 800e9ba:	e029      	b.n	800ea10 <GetFCntDown+0x7c>
    }

    // Determine the frame counter identifier and choose counter from FCntList
    switch( addrID )
 800e9bc:	7bfb      	ldrb	r3, [r7, #15]
 800e9be:	2b00      	cmp	r3, #0
 800e9c0:	d016      	beq.n	800e9f0 <GetFCntDown+0x5c>
 800e9c2:	2b01      	cmp	r3, #1
 800e9c4:	d118      	bne.n	800e9f8 <GetFCntDown+0x64>
    {
        case UNICAST_DEV_ADDR:
            if( lrWanVersion.Fields.Minor == 1 )
 800e9c6:	79bb      	ldrb	r3, [r7, #6]
 800e9c8:	2b01      	cmp	r3, #1
 800e9ca:	d10d      	bne.n	800e9e8 <GetFCntDown+0x54>
            {
                if( ( fType == FRAME_TYPE_A ) || ( fType == FRAME_TYPE_D ) )
 800e9cc:	7bbb      	ldrb	r3, [r7, #14]
 800e9ce:	2b00      	cmp	r3, #0
 800e9d0:	d002      	beq.n	800e9d8 <GetFCntDown+0x44>
 800e9d2:	7bbb      	ldrb	r3, [r7, #14]
 800e9d4:	2b03      	cmp	r3, #3
 800e9d6:	d103      	bne.n	800e9e0 <GetFCntDown+0x4c>
                {
                    *fCntID = A_FCNT_DOWN;
 800e9d8:	69fb      	ldr	r3, [r7, #28]
 800e9da:	2202      	movs	r2, #2
 800e9dc:	701a      	strb	r2, [r3, #0]
            }
            else
            { // For LoRaWAN 1.0.X
                *fCntID = FCNT_DOWN;
            }
            break;
 800e9de:	e00d      	b.n	800e9fc <GetFCntDown+0x68>
                    *fCntID = N_FCNT_DOWN;
 800e9e0:	69fb      	ldr	r3, [r7, #28]
 800e9e2:	2201      	movs	r2, #1
 800e9e4:	701a      	strb	r2, [r3, #0]
            break;
 800e9e6:	e009      	b.n	800e9fc <GetFCntDown+0x68>
                *fCntID = FCNT_DOWN;
 800e9e8:	69fb      	ldr	r3, [r7, #28]
 800e9ea:	2203      	movs	r2, #3
 800e9ec:	701a      	strb	r2, [r3, #0]
            break;
 800e9ee:	e005      	b.n	800e9fc <GetFCntDown+0x68>
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MULTICAST_0_ADDR:
            *fCntID = MC_FCNT_DOWN_0;
 800e9f0:	69fb      	ldr	r3, [r7, #28]
 800e9f2:	2204      	movs	r2, #4
 800e9f4:	701a      	strb	r2, [r3, #0]
            break;
 800e9f6:	e001      	b.n	800e9fc <GetFCntDown+0x68>
        case MULTICAST_3_ADDR:
            *fCntID = MC_FCNT_DOWN_3;
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
 800e9f8:	2305      	movs	r3, #5
 800e9fa:	e009      	b.n	800ea10 <GetFCntDown+0x7c>
    }

    return LoRaMacCryptoGetFCntDown( *fCntID, maxFCntGap, macMsg->FHDR.FCnt, currentDown );
 800e9fc:	69fb      	ldr	r3, [r7, #28]
 800e9fe:	7818      	ldrb	r0, [r3, #0]
 800ea00:	68bb      	ldr	r3, [r7, #8]
 800ea02:	89db      	ldrh	r3, [r3, #14]
 800ea04:	461a      	mov	r2, r3
 800ea06:	8b39      	ldrh	r1, [r7, #24]
 800ea08:	6a3b      	ldr	r3, [r7, #32]
 800ea0a:	f004 fc75 	bl	80132f8 <LoRaMacCryptoGetFCntDown>
 800ea0e:	4603      	mov	r3, r0
}
 800ea10:	4618      	mov	r0, r3
 800ea12:	3710      	adds	r7, #16
 800ea14:	46bd      	mov	sp, r7
 800ea16:	bd80      	pop	{r7, pc}

0800ea18 <SwitchClass>:
    return LoRaMacCryptoGetFCntDown( *fCntID, macMsg->FHDR.FCnt, currentDown );
}
#endif /* LORAMAC_VERSION */

static LoRaMacStatus_t SwitchClass( DeviceClass_t deviceClass )
{
 800ea18:	b5b0      	push	{r4, r5, r7, lr}
 800ea1a:	b084      	sub	sp, #16
 800ea1c:	af00      	add	r7, sp, #0
 800ea1e:	4603      	mov	r3, r0
 800ea20:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 800ea22:	2303      	movs	r3, #3
 800ea24:	73fb      	strb	r3, [r7, #15]

    switch( Nvm.MacGroup2.DeviceClass )
 800ea26:	4b6d      	ldr	r3, [pc, #436]	@ (800ebdc <SwitchClass+0x1c4>)
 800ea28:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800ea2c:	2b02      	cmp	r3, #2
 800ea2e:	f000 80b9 	beq.w	800eba4 <SwitchClass+0x18c>
 800ea32:	2b02      	cmp	r3, #2
 800ea34:	f300 80cc 	bgt.w	800ebd0 <SwitchClass+0x1b8>
 800ea38:	2b00      	cmp	r3, #0
 800ea3a:	d003      	beq.n	800ea44 <SwitchClass+0x2c>
 800ea3c:	2b01      	cmp	r3, #1
 800ea3e:	f000 80a3 	beq.w	800eb88 <SwitchClass+0x170>
 800ea42:	e0c5      	b.n	800ebd0 <SwitchClass+0x1b8>
    {
        case CLASS_A:
        {
            if( deviceClass == CLASS_A )
 800ea44:	79fb      	ldrb	r3, [r7, #7]
 800ea46:	2b00      	cmp	r3, #0
 800ea48:	d109      	bne.n	800ea5e <SwitchClass+0x46>
            {
                // Revert back RxC parameters
                Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParams.Rx2Channel;
 800ea4a:	4b64      	ldr	r3, [pc, #400]	@ (800ebdc <SwitchClass+0x1c4>)
 800ea4c:	4a63      	ldr	r2, [pc, #396]	@ (800ebdc <SwitchClass+0x1c4>)
 800ea4e:	3374      	adds	r3, #116	@ 0x74
 800ea50:	326c      	adds	r2, #108	@ 0x6c
 800ea52:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ea56:	e883 0003 	stmia.w	r3, {r0, r1}

                status = LORAMAC_STATUS_OK;
 800ea5a:	2300      	movs	r3, #0
 800ea5c:	73fb      	strb	r3, [r7, #15]
            }
            if( deviceClass == CLASS_B )
 800ea5e:	79fb      	ldrb	r3, [r7, #7]
 800ea60:	2b01      	cmp	r3, #1
 800ea62:	d10c      	bne.n	800ea7e <SwitchClass+0x66>
            {
                status = LoRaMacClassBSwitchClass( deviceClass );
 800ea64:	79fb      	ldrb	r3, [r7, #7]
 800ea66:	4618      	mov	r0, r3
 800ea68:	f003 fb7f 	bl	801216a <LoRaMacClassBSwitchClass>
 800ea6c:	4603      	mov	r3, r0
 800ea6e:	73fb      	strb	r3, [r7, #15]
                if( status == LORAMAC_STATUS_OK )
 800ea70:	7bfb      	ldrb	r3, [r7, #15]
 800ea72:	2b00      	cmp	r3, #0
 800ea74:	d103      	bne.n	800ea7e <SwitchClass+0x66>
                {
                    Nvm.MacGroup2.DeviceClass = deviceClass;
 800ea76:	4a59      	ldr	r2, [pc, #356]	@ (800ebdc <SwitchClass+0x1c4>)
 800ea78:	79fb      	ldrb	r3, [r7, #7]
 800ea7a:	f882 3118 	strb.w	r3, [r2, #280]	@ 0x118
                }
            }

            if( deviceClass == CLASS_C )
 800ea7e:	79fb      	ldrb	r3, [r7, #7]
 800ea80:	2b02      	cmp	r3, #2
 800ea82:	f040 80a0 	bne.w	800ebc6 <SwitchClass+0x1ae>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 800ea86:	4a55      	ldr	r2, [pc, #340]	@ (800ebdc <SwitchClass+0x1c4>)
 800ea88:	79fb      	ldrb	r3, [r7, #7]
 800ea8a:	f882 3118 	strb.w	r3, [r2, #280]	@ 0x118

                MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 800ea8e:	4a54      	ldr	r2, [pc, #336]	@ (800ebe0 <SwitchClass+0x1c8>)
 800ea90:	4b53      	ldr	r3, [pc, #332]	@ (800ebe0 <SwitchClass+0x1c8>)
 800ea92:	f502 7478 	add.w	r4, r2, #992	@ 0x3e0
 800ea96:	f503 7573 	add.w	r5, r3, #972	@ 0x3cc
 800ea9a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ea9c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ea9e:	682b      	ldr	r3, [r5, #0]
 800eaa0:	6023      	str	r3, [r4, #0]
                MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 800eaa2:	4b4f      	ldr	r3, [pc, #316]	@ (800ebe0 <SwitchClass+0x1c8>)
 800eaa4:	2202      	movs	r2, #2
 800eaa6:	f883 23f3 	strb.w	r2, [r3, #1011]	@ 0x3f3

                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800eaaa:	2300      	movs	r3, #0
 800eaac:	73bb      	strb	r3, [r7, #14]
 800eaae:	e05b      	b.n	800eb68 <SwitchClass+0x150>
                {
                    if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) &&
 800eab0:	f997 200e 	ldrsb.w	r2, [r7, #14]
 800eab4:	4949      	ldr	r1, [pc, #292]	@ (800ebdc <SwitchClass+0x1c4>)
 800eab6:	4613      	mov	r3, r2
 800eab8:	005b      	lsls	r3, r3, #1
 800eaba:	4413      	add	r3, r2
 800eabc:	011b      	lsls	r3, r3, #4
 800eabe:	440b      	add	r3, r1
 800eac0:	33e9      	adds	r3, #233	@ 0xe9
 800eac2:	781b      	ldrb	r3, [r3, #0]
 800eac4:	2b00      	cmp	r3, #0
 800eac6:	d049      	beq.n	800eb5c <SwitchClass+0x144>
                        ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.Class == CLASS_C ) )
 800eac8:	f997 200e 	ldrsb.w	r2, [r7, #14]
 800eacc:	4943      	ldr	r1, [pc, #268]	@ (800ebdc <SwitchClass+0x1c4>)
 800eace:	4613      	mov	r3, r2
 800ead0:	005b      	lsls	r3, r3, #1
 800ead2:	4413      	add	r3, r2
 800ead4:	011b      	lsls	r3, r3, #4
 800ead6:	440b      	add	r3, r1
 800ead8:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800eadc:	781b      	ldrb	r3, [r3, #0]
                    if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) &&
 800eade:	2b02      	cmp	r3, #2
 800eae0:	d13c      	bne.n	800eb5c <SwitchClass+0x144>
                    {
                        Nvm.MacGroup2.MacParams.RxCChannel.Frequency = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.Params.ClassC.Frequency;
 800eae2:	f997 200e 	ldrsb.w	r2, [r7, #14]
 800eae6:	493d      	ldr	r1, [pc, #244]	@ (800ebdc <SwitchClass+0x1c4>)
 800eae8:	4613      	mov	r3, r2
 800eaea:	005b      	lsls	r3, r3, #1
 800eaec:	4413      	add	r3, r2
 800eaee:	011b      	lsls	r3, r3, #4
 800eaf0:	440b      	add	r3, r1
 800eaf2:	f503 7382 	add.w	r3, r3, #260	@ 0x104
 800eaf6:	681b      	ldr	r3, [r3, #0]
 800eaf8:	4a38      	ldr	r2, [pc, #224]	@ (800ebdc <SwitchClass+0x1c4>)
 800eafa:	6753      	str	r3, [r2, #116]	@ 0x74
                        Nvm.MacGroup2.MacParams.RxCChannel.Datarate = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.Params.ClassC.Datarate;
 800eafc:	f997 200e 	ldrsb.w	r2, [r7, #14]
 800eb00:	4936      	ldr	r1, [pc, #216]	@ (800ebdc <SwitchClass+0x1c4>)
 800eb02:	4613      	mov	r3, r2
 800eb04:	005b      	lsls	r3, r3, #1
 800eb06:	4413      	add	r3, r2
 800eb08:	011b      	lsls	r3, r3, #4
 800eb0a:	440b      	add	r3, r1
 800eb0c:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 800eb10:	f993 3000 	ldrsb.w	r3, [r3]
 800eb14:	b2da      	uxtb	r2, r3
 800eb16:	4b31      	ldr	r3, [pc, #196]	@ (800ebdc <SwitchClass+0x1c4>)
 800eb18:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

                        MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 800eb1c:	4b30      	ldr	r3, [pc, #192]	@ (800ebe0 <SwitchClass+0x1c8>)
 800eb1e:	f893 2411 	ldrb.w	r2, [r3, #1041]	@ 0x411
 800eb22:	4b2f      	ldr	r3, [pc, #188]	@ (800ebe0 <SwitchClass+0x1c8>)
 800eb24:	f883 23e0 	strb.w	r2, [r3, #992]	@ 0x3e0
                        MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 800eb28:	4b2c      	ldr	r3, [pc, #176]	@ (800ebdc <SwitchClass+0x1c4>)
 800eb2a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800eb2c:	4a2c      	ldr	r2, [pc, #176]	@ (800ebe0 <SwitchClass+0x1c8>)
 800eb2e:	f8c2 33e4 	str.w	r3, [r2, #996]	@ 0x3e4
                        MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800eb32:	4b2a      	ldr	r3, [pc, #168]	@ (800ebdc <SwitchClass+0x1c4>)
 800eb34:	f893 207d 	ldrb.w	r2, [r3, #125]	@ 0x7d
 800eb38:	4b29      	ldr	r3, [pc, #164]	@ (800ebe0 <SwitchClass+0x1c8>)
 800eb3a:	f883 23f0 	strb.w	r2, [r3, #1008]	@ 0x3f0
                        MacCtx.RxWindowCConfig.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 800eb3e:	4b27      	ldr	r3, [pc, #156]	@ (800ebdc <SwitchClass+0x1c4>)
 800eb40:	f893 208c 	ldrb.w	r2, [r3, #140]	@ 0x8c
 800eb44:	4b26      	ldr	r3, [pc, #152]	@ (800ebe0 <SwitchClass+0x1c8>)
 800eb46:	f883 23f1 	strb.w	r2, [r3, #1009]	@ 0x3f1
                        MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 800eb4a:	4b25      	ldr	r3, [pc, #148]	@ (800ebe0 <SwitchClass+0x1c8>)
 800eb4c:	2203      	movs	r2, #3
 800eb4e:	f883 23f3 	strb.w	r2, [r3, #1011]	@ 0x3f3
                        MacCtx.RxWindowCConfig.RxContinuous = true;
 800eb52:	4b23      	ldr	r3, [pc, #140]	@ (800ebe0 <SwitchClass+0x1c8>)
 800eb54:	2201      	movs	r2, #1
 800eb56:	f883 23f2 	strb.w	r2, [r3, #1010]	@ 0x3f2
                        break;
 800eb5a:	e009      	b.n	800eb70 <SwitchClass+0x158>
                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800eb5c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800eb60:	b2db      	uxtb	r3, r3
 800eb62:	3301      	adds	r3, #1
 800eb64:	b2db      	uxtb	r3, r3
 800eb66:	73bb      	strb	r3, [r7, #14]
 800eb68:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800eb6c:	2b00      	cmp	r3, #0
 800eb6e:	dd9f      	ble.n	800eab0 <SwitchClass+0x98>
                    }
                }

                // Set the NodeAckRequested indicator to default
                MacCtx.NodeAckRequested = false;
 800eb70:	4b1b      	ldr	r3, [pc, #108]	@ (800ebe0 <SwitchClass+0x1c8>)
 800eb72:	2200      	movs	r2, #0
 800eb74:	f883 2410 	strb.w	r2, [r3, #1040]	@ 0x410
                // Set the radio into sleep mode in case we are still in RX mode
                Radio.Sleep( );
 800eb78:	4b1a      	ldr	r3, [pc, #104]	@ (800ebe4 <SwitchClass+0x1cc>)
 800eb7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eb7c:	4798      	blx	r3

                OpenContinuousRxCWindow( );
 800eb7e:	f001 f9e5 	bl	800ff4c <OpenContinuousRxCWindow>
                {
                    LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_MODE_IND, ( uint8_t* )&Nvm.MacGroup2.DeviceClass, 1 );
                }
#endif /* LORAMAC_VERSION */

                status = LORAMAC_STATUS_OK;
 800eb82:	2300      	movs	r3, #0
 800eb84:	73fb      	strb	r3, [r7, #15]
            }
            break;
 800eb86:	e01e      	b.n	800ebc6 <SwitchClass+0x1ae>
        }
        case CLASS_B:
        {
            status = LoRaMacClassBSwitchClass( deviceClass );
 800eb88:	79fb      	ldrb	r3, [r7, #7]
 800eb8a:	4618      	mov	r0, r3
 800eb8c:	f003 faed 	bl	801216a <LoRaMacClassBSwitchClass>
 800eb90:	4603      	mov	r3, r0
 800eb92:	73fb      	strb	r3, [r7, #15]
            if( status == LORAMAC_STATUS_OK )
 800eb94:	7bfb      	ldrb	r3, [r7, #15]
 800eb96:	2b00      	cmp	r3, #0
 800eb98:	d117      	bne.n	800ebca <SwitchClass+0x1b2>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 800eb9a:	4a10      	ldr	r2, [pc, #64]	@ (800ebdc <SwitchClass+0x1c4>)
 800eb9c:	79fb      	ldrb	r3, [r7, #7]
 800eb9e:	f882 3118 	strb.w	r3, [r2, #280]	@ 0x118
            }
            break;
 800eba2:	e012      	b.n	800ebca <SwitchClass+0x1b2>
        }
        case CLASS_C:
        {
            if( deviceClass == CLASS_A )
 800eba4:	79fb      	ldrb	r3, [r7, #7]
 800eba6:	2b00      	cmp	r3, #0
 800eba8:	d111      	bne.n	800ebce <SwitchClass+0x1b6>
            {
                // Reset RxSlot to NONE
                MacCtx.RxSlot = RX_SLOT_NONE;
 800ebaa:	4b0d      	ldr	r3, [pc, #52]	@ (800ebe0 <SwitchClass+0x1c8>)
 800ebac:	2206      	movs	r2, #6
 800ebae:	f883 2480 	strb.w	r2, [r3, #1152]	@ 0x480

                Nvm.MacGroup2.DeviceClass = deviceClass;
 800ebb2:	4a0a      	ldr	r2, [pc, #40]	@ (800ebdc <SwitchClass+0x1c4>)
 800ebb4:	79fb      	ldrb	r3, [r7, #7]
 800ebb6:	f882 3118 	strb.w	r3, [r2, #280]	@ 0x118

                // Set the radio into sleep to setup a defined state
                Radio.Sleep( );
 800ebba:	4b0a      	ldr	r3, [pc, #40]	@ (800ebe4 <SwitchClass+0x1cc>)
 800ebbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ebbe:	4798      	blx	r3

                status = LORAMAC_STATUS_OK;
 800ebc0:	2300      	movs	r3, #0
 800ebc2:	73fb      	strb	r3, [r7, #15]
                {
                    LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_MODE_IND, ( uint8_t* )&Nvm.MacGroup2.DeviceClass, 1 );
                }
#endif /* LORAMAC_VERSION */
            }
            break;
 800ebc4:	e003      	b.n	800ebce <SwitchClass+0x1b6>
            break;
 800ebc6:	bf00      	nop
 800ebc8:	e002      	b.n	800ebd0 <SwitchClass+0x1b8>
            break;
 800ebca:	bf00      	nop
 800ebcc:	e000      	b.n	800ebd0 <SwitchClass+0x1b8>
            break;
 800ebce:	bf00      	nop
        }
    }

    return status;
 800ebd0:	7bfb      	ldrb	r3, [r7, #15]
}
 800ebd2:	4618      	mov	r0, r3
 800ebd4:	3710      	adds	r7, #16
 800ebd6:	46bd      	mov	sp, r7
 800ebd8:	bdb0      	pop	{r4, r5, r7, pc}
 800ebda:	bf00      	nop
 800ebdc:	20000b34 	.word	0x20000b34
 800ebe0:	2000062c 	.word	0x2000062c
 800ebe4:	0801bd08 	.word	0x0801bd08

0800ebe8 <GetMaxAppPayloadWithoutFOptsLength>:

static uint8_t GetMaxAppPayloadWithoutFOptsLength( int8_t datarate )
{
 800ebe8:	b580      	push	{r7, lr}
 800ebea:	b086      	sub	sp, #24
 800ebec:	af00      	add	r7, sp, #0
 800ebee:	4603      	mov	r3, r0
 800ebf0:	71fb      	strb	r3, [r7, #7]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Setup PHY request
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800ebf2:	4b10      	ldr	r3, [pc, #64]	@ (800ec34 <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 800ebf4:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 800ebf8:	74bb      	strb	r3, [r7, #18]
    getPhy.Datarate = datarate;
 800ebfa:	79fb      	ldrb	r3, [r7, #7]
 800ebfc:	747b      	strb	r3, [r7, #17]
    getPhy.Attribute = PHY_MAX_PAYLOAD;
 800ebfe:	230d      	movs	r3, #13
 800ec00:	743b      	strb	r3, [r7, #16]

    // Get the maximum payload length
    if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 800ec02:	4b0c      	ldr	r3, [pc, #48]	@ (800ec34 <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 800ec04:	f893 308c 	ldrb.w	r3, [r3, #140]	@ 0x8c
 800ec08:	2b00      	cmp	r3, #0
 800ec0a:	d001      	beq.n	800ec10 <GetMaxAppPayloadWithoutFOptsLength+0x28>
    {
        getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 800ec0c:	230e      	movs	r3, #14
 800ec0e:	743b      	strb	r3, [r7, #16]
    }
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800ec10:	4b08      	ldr	r3, [pc, #32]	@ (800ec34 <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 800ec12:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800ec16:	f107 0210 	add.w	r2, r7, #16
 800ec1a:	4611      	mov	r1, r2
 800ec1c:	4618      	mov	r0, r3
 800ec1e:	f005 fa00 	bl	8014022 <RegionGetPhyParam>
 800ec22:	4603      	mov	r3, r0
 800ec24:	60fb      	str	r3, [r7, #12]

    return phyParam.Value;
 800ec26:	68fb      	ldr	r3, [r7, #12]
 800ec28:	b2db      	uxtb	r3, r3
}
 800ec2a:	4618      	mov	r0, r3
 800ec2c:	3718      	adds	r7, #24
 800ec2e:	46bd      	mov	sp, r7
 800ec30:	bd80      	pop	{r7, pc}
 800ec32:	bf00      	nop
 800ec34:	20000b34 	.word	0x20000b34

0800ec38 <ValidatePayloadLength>:

static bool ValidatePayloadLength( uint8_t lenN, int8_t datarate, uint8_t fOptsLen )
{
 800ec38:	b580      	push	{r7, lr}
 800ec3a:	b084      	sub	sp, #16
 800ec3c:	af00      	add	r7, sp, #0
 800ec3e:	4603      	mov	r3, r0
 800ec40:	71fb      	strb	r3, [r7, #7]
 800ec42:	460b      	mov	r3, r1
 800ec44:	71bb      	strb	r3, [r7, #6]
 800ec46:	4613      	mov	r3, r2
 800ec48:	717b      	strb	r3, [r7, #5]
    uint16_t maxN = 0;
 800ec4a:	2300      	movs	r3, #0
 800ec4c:	81fb      	strh	r3, [r7, #14]
    uint16_t payloadSize = 0;
 800ec4e:	2300      	movs	r3, #0
 800ec50:	81bb      	strh	r3, [r7, #12]

    maxN = GetMaxAppPayloadWithoutFOptsLength( datarate );
 800ec52:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800ec56:	4618      	mov	r0, r3
 800ec58:	f7ff ffc6 	bl	800ebe8 <GetMaxAppPayloadWithoutFOptsLength>
 800ec5c:	4603      	mov	r3, r0
 800ec5e:	81fb      	strh	r3, [r7, #14]

    // Calculate the resulting payload size
    payloadSize = ( lenN + fOptsLen );
 800ec60:	79fb      	ldrb	r3, [r7, #7]
 800ec62:	b29a      	uxth	r2, r3
 800ec64:	797b      	ldrb	r3, [r7, #5]
 800ec66:	b29b      	uxth	r3, r3
 800ec68:	4413      	add	r3, r2
 800ec6a:	81bb      	strh	r3, [r7, #12]

    // Validation of the application payload size
    if( ( payloadSize <= maxN ) && ( payloadSize <= LORAMAC_PHY_MAXPAYLOAD ) )
 800ec6c:	89ba      	ldrh	r2, [r7, #12]
 800ec6e:	89fb      	ldrh	r3, [r7, #14]
 800ec70:	429a      	cmp	r2, r3
 800ec72:	d804      	bhi.n	800ec7e <ValidatePayloadLength+0x46>
 800ec74:	89bb      	ldrh	r3, [r7, #12]
 800ec76:	2bff      	cmp	r3, #255	@ 0xff
 800ec78:	d801      	bhi.n	800ec7e <ValidatePayloadLength+0x46>
    {
        return true;
 800ec7a:	2301      	movs	r3, #1
 800ec7c:	e000      	b.n	800ec80 <ValidatePayloadLength+0x48>
    }
    return false;
 800ec7e:	2300      	movs	r3, #0
}
 800ec80:	4618      	mov	r0, r3
 800ec82:	3710      	adds	r7, #16
 800ec84:	46bd      	mov	sp, r7
 800ec86:	bd80      	pop	{r7, pc}

0800ec88 <ProcessMacCommands>:

static void ProcessMacCommands( uint8_t *payload, uint8_t macIndex, uint8_t commandsSize, int8_t snr, LoRaMacRxSlot_t rxSlot )
{
 800ec88:	b590      	push	{r4, r7, lr}
 800ec8a:	b0a5      	sub	sp, #148	@ 0x94
 800ec8c:	af02      	add	r7, sp, #8
 800ec8e:	6078      	str	r0, [r7, #4]
 800ec90:	4608      	mov	r0, r1
 800ec92:	4611      	mov	r1, r2
 800ec94:	461a      	mov	r2, r3
 800ec96:	4603      	mov	r3, r0
 800ec98:	70fb      	strb	r3, [r7, #3]
 800ec9a:	460b      	mov	r3, r1
 800ec9c:	70bb      	strb	r3, [r7, #2]
 800ec9e:	4613      	mov	r3, r2
 800eca0:	707b      	strb	r3, [r7, #1]
    uint8_t status = 0;
 800eca2:	2300      	movs	r3, #0
 800eca4:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
    bool adrBlockFound = false;
 800eca8:	2300      	movs	r3, #0
 800ecaa:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 800ecae:	2300      	movs	r3, #0
 800ecb0:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68
        // Do only parse MAC commands for Class A RX windows
        return;
    }
#endif /* LORAMAC_VERSION */

    while( macIndex < commandsSize )
 800ecb4:	f000 bc7d 	b.w	800f5b2 <ProcessMacCommands+0x92a>
    {
        // Make sure to parse only complete MAC commands
        if( ( LoRaMacCommandsGetCmdSize( payload[macIndex] ) + macIndex ) > commandsSize )
 800ecb8:	78fb      	ldrb	r3, [r7, #3]
 800ecba:	687a      	ldr	r2, [r7, #4]
 800ecbc:	4413      	add	r3, r2
 800ecbe:	781b      	ldrb	r3, [r3, #0]
 800ecc0:	4618      	mov	r0, r3
 800ecc2:	f003 fd37 	bl	8012734 <LoRaMacCommandsGetCmdSize>
 800ecc6:	4603      	mov	r3, r0
 800ecc8:	461a      	mov	r2, r3
 800ecca:	78fb      	ldrb	r3, [r7, #3]
 800eccc:	441a      	add	r2, r3
 800ecce:	78bb      	ldrb	r3, [r7, #2]
 800ecd0:	429a      	cmp	r2, r3
 800ecd2:	f300 8474 	bgt.w	800f5be <ProcessMacCommands+0x936>
        {
            return;
        }

        // Decode Frame MAC commands
        switch( payload[macIndex++] )
 800ecd6:	78fb      	ldrb	r3, [r7, #3]
 800ecd8:	1c5a      	adds	r2, r3, #1
 800ecda:	70fa      	strb	r2, [r7, #3]
 800ecdc:	461a      	mov	r2, r3
 800ecde:	687b      	ldr	r3, [r7, #4]
 800ece0:	4413      	add	r3, r2
 800ece2:	781b      	ldrb	r3, [r3, #0]
 800ece4:	3b02      	subs	r3, #2
 800ece6:	2b11      	cmp	r3, #17
 800ece8:	f200 846b 	bhi.w	800f5c2 <ProcessMacCommands+0x93a>
 800ecec:	a201      	add	r2, pc, #4	@ (adr r2, 800ecf4 <ProcessMacCommands+0x6c>)
 800ecee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ecf2:	bf00      	nop
 800ecf4:	0800ed3d 	.word	0x0800ed3d
 800ecf8:	0800ed7f 	.word	0x0800ed7f
 800ecfc:	0800ee9b 	.word	0x0800ee9b
 800ed00:	0800eed9 	.word	0x0800eed9
 800ed04:	0800efc3 	.word	0x0800efc3
 800ed08:	0800f021 	.word	0x0800f021
 800ed0c:	0800f0dd 	.word	0x0800f0dd
 800ed10:	0800f133 	.word	0x0800f133
 800ed14:	0800f219 	.word	0x0800f219
 800ed18:	0800f5c3 	.word	0x0800f5c3
 800ed1c:	0800f5c3 	.word	0x0800f5c3
 800ed20:	0800f2bd 	.word	0x0800f2bd
 800ed24:	0800f5c3 	.word	0x0800f5c3
 800ed28:	0800f5c3 	.word	0x0800f5c3
 800ed2c:	0800f3d3 	.word	0x0800f3d3
 800ed30:	0800f407 	.word	0x0800f407
 800ed34:	0800f497 	.word	0x0800f497
 800ed38:	0800f50f 	.word	0x0800f50f
                break;
            }
#endif /* LORAMAC_VERSION */
            case SRV_MAC_LINK_CHECK_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_LINK_CHECK ) == true )
 800ed3c:	2005      	movs	r0, #5
 800ed3e:	f003 fed1 	bl	8012ae4 <LoRaMacConfirmQueueIsCmdActive>
 800ed42:	4603      	mov	r3, r0
 800ed44:	2b00      	cmp	r3, #0
 800ed46:	f000 8425 	beq.w	800f594 <ProcessMacCommands+0x90c>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_LINK_CHECK );
 800ed4a:	2105      	movs	r1, #5
 800ed4c:	2000      	movs	r0, #0
 800ed4e:	f003 fe3d 	bl	80129cc <LoRaMacConfirmQueueSetStatus>
                    MacCtx.MlmeConfirm.DemodMargin = payload[macIndex++];
 800ed52:	78fb      	ldrb	r3, [r7, #3]
 800ed54:	1c5a      	adds	r2, r3, #1
 800ed56:	70fa      	strb	r2, [r7, #3]
 800ed58:	461a      	mov	r2, r3
 800ed5a:	687b      	ldr	r3, [r7, #4]
 800ed5c:	4413      	add	r3, r2
 800ed5e:	781a      	ldrb	r2, [r3, #0]
 800ed60:	4bac      	ldr	r3, [pc, #688]	@ (800f014 <ProcessMacCommands+0x38c>)
 800ed62:	f883 2450 	strb.w	r2, [r3, #1104]	@ 0x450
                    MacCtx.MlmeConfirm.NbGateways = payload[macIndex++];
 800ed66:	78fb      	ldrb	r3, [r7, #3]
 800ed68:	1c5a      	adds	r2, r3, #1
 800ed6a:	70fa      	strb	r2, [r7, #3]
 800ed6c:	461a      	mov	r2, r3
 800ed6e:	687b      	ldr	r3, [r7, #4]
 800ed70:	4413      	add	r3, r2
 800ed72:	781a      	ldrb	r2, [r3, #0]
 800ed74:	4ba7      	ldr	r3, [pc, #668]	@ (800f014 <ProcessMacCommands+0x38c>)
 800ed76:	f883 2451 	strb.w	r2, [r3, #1105]	@ 0x451
                }
                break;
 800ed7a:	f000 bc0b 	b.w	800f594 <ProcessMacCommands+0x90c>
            }
            case SRV_MAC_LINK_ADR_REQ:
            {
                LinkAdrReqParams_t linkAdrReq;
                int8_t linkAdrDatarate = DR_0;
 800ed7e:	2300      	movs	r3, #0
 800ed80:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
                int8_t linkAdrTxPower = TX_POWER_0;
 800ed84:	2300      	movs	r3, #0
 800ed86:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
                uint8_t linkAdrNbRep = 0;
 800ed8a:	2300      	movs	r3, #0
 800ed8c:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
                uint8_t linkAdrNbBytesParsed = 0;
 800ed90:	2300      	movs	r3, #0
 800ed92:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54

                // The end node is allowed to process one block of LinkAdrRequests.
                // It must ignore subsequent blocks
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
                if( adrBlockFound == false )
 800ed96:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 800ed9a:	f083 0301 	eor.w	r3, r3, #1
 800ed9e:	b2db      	uxtb	r3, r3
 800eda0:	2b00      	cmp	r3, #0
 800eda2:	f000 83f9 	beq.w	800f598 <ProcessMacCommands+0x910>
                {
                    adrBlockFound = true;
 800eda6:	2301      	movs	r3, #1
 800eda8:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87

                    // Fill parameter structure
                    linkAdrReq.Payload = &payload[macIndex - 1];
 800edac:	78fb      	ldrb	r3, [r7, #3]
 800edae:	3b01      	subs	r3, #1
 800edb0:	687a      	ldr	r2, [r7, #4]
 800edb2:	4413      	add	r3, r2
 800edb4:	65fb      	str	r3, [r7, #92]	@ 0x5c
                    linkAdrReq.PayloadSize = commandsSize - ( macIndex - 1 );
 800edb6:	78ba      	ldrb	r2, [r7, #2]
 800edb8:	78fb      	ldrb	r3, [r7, #3]
 800edba:	1ad3      	subs	r3, r2, r3
 800edbc:	b2db      	uxtb	r3, r3
 800edbe:	3301      	adds	r3, #1
 800edc0:	b2db      	uxtb	r3, r3
 800edc2:	f887 3060 	strb.w	r3, [r7, #96]	@ 0x60
                    linkAdrReq.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 800edc6:	4b94      	ldr	r3, [pc, #592]	@ (800f018 <ProcessMacCommands+0x390>)
 800edc8:	f893 311a 	ldrb.w	r3, [r3, #282]	@ 0x11a
 800edcc:	f887 3062 	strb.w	r3, [r7, #98]	@ 0x62
                    linkAdrReq.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800edd0:	4b91      	ldr	r3, [pc, #580]	@ (800f018 <ProcessMacCommands+0x390>)
 800edd2:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 800edd6:	f887 3061 	strb.w	r3, [r7, #97]	@ 0x61
                    linkAdrReq.CurrentDatarate = Nvm.MacGroup1.ChannelsDatarate;
 800edda:	4b8f      	ldr	r3, [pc, #572]	@ (800f018 <ProcessMacCommands+0x390>)
 800eddc:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 800ede0:	f887 3063 	strb.w	r3, [r7, #99]	@ 0x63
                    linkAdrReq.CurrentTxPower = Nvm.MacGroup1.ChannelsTxPower;
 800ede4:	4b8c      	ldr	r3, [pc, #560]	@ (800f018 <ProcessMacCommands+0x390>)
 800ede6:	f993 3038 	ldrsb.w	r3, [r3, #56]	@ 0x38
 800edea:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
                    linkAdrReq.CurrentNbRep = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 800edee:	4b8a      	ldr	r3, [pc, #552]	@ (800f018 <ProcessMacCommands+0x390>)
 800edf0:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 800edf4:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
                    linkAdrReq.Version = Nvm.MacGroup2.Version;
 800edf8:	4b87      	ldr	r3, [pc, #540]	@ (800f018 <ProcessMacCommands+0x390>)
 800edfa:	f8d3 3128 	ldr.w	r3, [r3, #296]	@ 0x128
 800edfe:	65bb      	str	r3, [r7, #88]	@ 0x58

                    // Process the ADR requests
                    status = RegionLinkAdrReq( Nvm.MacGroup2.Region, &linkAdrReq, &linkAdrDatarate,
 800ee00:	4b85      	ldr	r3, [pc, #532]	@ (800f018 <ProcessMacCommands+0x390>)
 800ee02:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 800ee06:	f107 0456 	add.w	r4, r7, #86	@ 0x56
 800ee0a:	f107 0257 	add.w	r2, r7, #87	@ 0x57
 800ee0e:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 800ee12:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800ee16:	9301      	str	r3, [sp, #4]
 800ee18:	f107 0355 	add.w	r3, r7, #85	@ 0x55
 800ee1c:	9300      	str	r3, [sp, #0]
 800ee1e:	4623      	mov	r3, r4
 800ee20:	f005 f9bc 	bl	801419c <RegionLinkAdrReq>
 800ee24:	4603      	mov	r3, r0
 800ee26:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
                                               &linkAdrTxPower, &linkAdrNbRep, &linkAdrNbBytesParsed );

                    if( ( status & 0x07 ) == 0x07 )
 800ee2a:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 800ee2e:	f003 0307 	and.w	r3, r3, #7
 800ee32:	2b07      	cmp	r3, #7
 800ee34:	d10e      	bne.n	800ee54 <ProcessMacCommands+0x1cc>
                    {
                        Nvm.MacGroup1.ChannelsDatarate = linkAdrDatarate;
 800ee36:	f997 2057 	ldrsb.w	r2, [r7, #87]	@ 0x57
 800ee3a:	4b77      	ldr	r3, [pc, #476]	@ (800f018 <ProcessMacCommands+0x390>)
 800ee3c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
                        Nvm.MacGroup1.ChannelsTxPower = linkAdrTxPower;
 800ee40:	f997 2056 	ldrsb.w	r2, [r7, #86]	@ 0x56
 800ee44:	4b74      	ldr	r3, [pc, #464]	@ (800f018 <ProcessMacCommands+0x390>)
 800ee46:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
                        Nvm.MacGroup2.MacParams.ChannelsNbTrans = linkAdrNbRep;
 800ee4a:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 800ee4e:	4b72      	ldr	r3, [pc, #456]	@ (800f018 <ProcessMacCommands+0x390>)
 800ee50:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
                    }

                    // Add the answers to the buffer
                    for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 800ee54:	2300      	movs	r3, #0
 800ee56:	f887 3086 	strb.w	r3, [r7, #134]	@ 0x86
 800ee5a:	e00b      	b.n	800ee74 <ProcessMacCommands+0x1ec>
                    {
                        LoRaMacCommandsAddCmd( MOTE_MAC_LINK_ADR_ANS, &status, 1 );
 800ee5c:	f107 036b 	add.w	r3, r7, #107	@ 0x6b
 800ee60:	2201      	movs	r2, #1
 800ee62:	4619      	mov	r1, r3
 800ee64:	2003      	movs	r0, #3
 800ee66:	f003 fb05 	bl	8012474 <LoRaMacCommandsAddCmd>
                    for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 800ee6a:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
 800ee6e:	3301      	adds	r3, #1
 800ee70:	f887 3086 	strb.w	r3, [r7, #134]	@ 0x86
 800ee74:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 800ee78:	4a68      	ldr	r2, [pc, #416]	@ (800f01c <ProcessMacCommands+0x394>)
 800ee7a:	fba2 2303 	umull	r2, r3, r2, r3
 800ee7e:	089b      	lsrs	r3, r3, #2
 800ee80:	b2db      	uxtb	r3, r3
 800ee82:	f897 2086 	ldrb.w	r2, [r7, #134]	@ 0x86
 800ee86:	429a      	cmp	r2, r3
 800ee88:	d3e8      	bcc.n	800ee5c <ProcessMacCommands+0x1d4>
                    }
                    // Update MAC index
                    macIndex += linkAdrNbBytesParsed - 1;
 800ee8a:	f897 2054 	ldrb.w	r2, [r7, #84]	@ 0x54
 800ee8e:	78fb      	ldrb	r3, [r7, #3]
 800ee90:	4413      	add	r3, r2
 800ee92:	b2db      	uxtb	r3, r3
 800ee94:	3b01      	subs	r3, #1
 800ee96:	70fb      	strb	r3, [r7, #3]
                {
                    // Increase the index by the MAC command size (without command)
                    macIndex += 4;
                }
#endif /* LORAMAC_VERSION */
                break;
 800ee98:	e37e      	b.n	800f598 <ProcessMacCommands+0x910>
            }
            case SRV_MAC_DUTY_CYCLE_REQ:
            {
                Nvm.MacGroup2.MaxDCycle = payload[macIndex++] & 0x0F;
 800ee9a:	78fb      	ldrb	r3, [r7, #3]
 800ee9c:	1c5a      	adds	r2, r3, #1
 800ee9e:	70fa      	strb	r2, [r7, #3]
 800eea0:	461a      	mov	r2, r3
 800eea2:	687b      	ldr	r3, [r7, #4]
 800eea4:	4413      	add	r3, r2
 800eea6:	781b      	ldrb	r3, [r3, #0]
 800eea8:	f003 030f 	and.w	r3, r3, #15
 800eeac:	b2da      	uxtb	r2, r3
 800eeae:	4b5a      	ldr	r3, [pc, #360]	@ (800f018 <ProcessMacCommands+0x390>)
 800eeb0:	f883 211b 	strb.w	r2, [r3, #283]	@ 0x11b
                Nvm.MacGroup2.AggregatedDCycle = 1 << Nvm.MacGroup2.MaxDCycle;
 800eeb4:	4b58      	ldr	r3, [pc, #352]	@ (800f018 <ProcessMacCommands+0x390>)
 800eeb6:	f893 311b 	ldrb.w	r3, [r3, #283]	@ 0x11b
 800eeba:	461a      	mov	r2, r3
 800eebc:	2301      	movs	r3, #1
 800eebe:	4093      	lsls	r3, r2
 800eec0:	b29a      	uxth	r2, r3
 800eec2:	4b55      	ldr	r3, [pc, #340]	@ (800f018 <ProcessMacCommands+0x390>)
 800eec4:	f8a3 211e 	strh.w	r2, [r3, #286]	@ 0x11e
                LoRaMacCommandsAddCmd( MOTE_MAC_DUTY_CYCLE_ANS, macCmdPayload, 0 );
 800eec8:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800eecc:	2200      	movs	r2, #0
 800eece:	4619      	mov	r1, r3
 800eed0:	2004      	movs	r0, #4
 800eed2:	f003 facf 	bl	8012474 <LoRaMacCommandsAddCmd>
                break;
 800eed6:	e36c      	b.n	800f5b2 <ProcessMacCommands+0x92a>
            }
            case SRV_MAC_RX_PARAM_SETUP_REQ:
            {
                RxParamSetupReqParams_t rxParamSetupReq;
                status = 0x07;
 800eed8:	2307      	movs	r3, #7
 800eeda:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b

                rxParamSetupReq.DrOffset = ( payload[macIndex] >> 4 ) & 0x07;
 800eede:	78fb      	ldrb	r3, [r7, #3]
 800eee0:	687a      	ldr	r2, [r7, #4]
 800eee2:	4413      	add	r3, r2
 800eee4:	781b      	ldrb	r3, [r3, #0]
 800eee6:	091b      	lsrs	r3, r3, #4
 800eee8:	b2db      	uxtb	r3, r3
 800eeea:	b25b      	sxtb	r3, r3
 800eeec:	f003 0307 	and.w	r3, r3, #7
 800eef0:	b25b      	sxtb	r3, r3
 800eef2:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
                rxParamSetupReq.Datarate = payload[macIndex] & 0x0F;
 800eef6:	78fb      	ldrb	r3, [r7, #3]
 800eef8:	687a      	ldr	r2, [r7, #4]
 800eefa:	4413      	add	r3, r2
 800eefc:	781b      	ldrb	r3, [r3, #0]
 800eefe:	b25b      	sxtb	r3, r3
 800ef00:	f003 030f 	and.w	r3, r3, #15
 800ef04:	b25b      	sxtb	r3, r3
 800ef06:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
                macIndex++;
 800ef0a:	78fb      	ldrb	r3, [r7, #3]
 800ef0c:	3301      	adds	r3, #1
 800ef0e:	70fb      	strb	r3, [r7, #3]
                    // Keep the current datarate
                    rxParamSetupReq.Datarate = Nvm.MacGroup2.MacParams.Rx2Channel.Datarate;
                }
#endif

                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
 800ef10:	78fb      	ldrb	r3, [r7, #3]
 800ef12:	1c5a      	adds	r2, r3, #1
 800ef14:	70fa      	strb	r2, [r7, #3]
 800ef16:	461a      	mov	r2, r3
 800ef18:	687b      	ldr	r3, [r7, #4]
 800ef1a:	4413      	add	r3, r2
 800ef1c:	781b      	ldrb	r3, [r3, #0]
 800ef1e:	653b      	str	r3, [r7, #80]	@ 0x50
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800ef20:	78fb      	ldrb	r3, [r7, #3]
 800ef22:	1c5a      	adds	r2, r3, #1
 800ef24:	70fa      	strb	r2, [r7, #3]
 800ef26:	461a      	mov	r2, r3
 800ef28:	687b      	ldr	r3, [r7, #4]
 800ef2a:	4413      	add	r3, r2
 800ef2c:	781b      	ldrb	r3, [r3, #0]
 800ef2e:	021a      	lsls	r2, r3, #8
 800ef30:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ef32:	4313      	orrs	r3, r2
 800ef34:	653b      	str	r3, [r7, #80]	@ 0x50
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800ef36:	78fb      	ldrb	r3, [r7, #3]
 800ef38:	1c5a      	adds	r2, r3, #1
 800ef3a:	70fa      	strb	r2, [r7, #3]
 800ef3c:	461a      	mov	r2, r3
 800ef3e:	687b      	ldr	r3, [r7, #4]
 800ef40:	4413      	add	r3, r2
 800ef42:	781b      	ldrb	r3, [r3, #0]
 800ef44:	041a      	lsls	r2, r3, #16
 800ef46:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ef48:	4313      	orrs	r3, r2
 800ef4a:	653b      	str	r3, [r7, #80]	@ 0x50
                rxParamSetupReq.Frequency *= 100;
 800ef4c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ef4e:	2264      	movs	r2, #100	@ 0x64
 800ef50:	fb02 f303 	mul.w	r3, r2, r3
 800ef54:	653b      	str	r3, [r7, #80]	@ 0x50

                // Perform request on region
                status = RegionRxParamSetupReq( Nvm.MacGroup2.Region, &rxParamSetupReq );
 800ef56:	4b30      	ldr	r3, [pc, #192]	@ (800f018 <ProcessMacCommands+0x390>)
 800ef58:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800ef5c:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 800ef60:	4611      	mov	r1, r2
 800ef62:	4618      	mov	r0, r3
 800ef64:	f005 f934 	bl	80141d0 <RegionRxParamSetupReq>
 800ef68:	4603      	mov	r3, r0
 800ef6a:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b

                if( ( status & 0x07 ) == 0x07 )
 800ef6e:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 800ef72:	f003 0307 	and.w	r3, r3, #7
 800ef76:	2b07      	cmp	r3, #7
 800ef78:	d117      	bne.n	800efaa <ProcessMacCommands+0x322>
                {
                    Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = rxParamSetupReq.Datarate;
 800ef7a:	f997 304c 	ldrsb.w	r3, [r7, #76]	@ 0x4c
 800ef7e:	b2da      	uxtb	r2, r3
 800ef80:	4b25      	ldr	r3, [pc, #148]	@ (800f018 <ProcessMacCommands+0x390>)
 800ef82:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
                    Nvm.MacGroup2.MacParams.RxCChannel.Datarate = rxParamSetupReq.Datarate;
 800ef86:	f997 304c 	ldrsb.w	r3, [r7, #76]	@ 0x4c
 800ef8a:	b2da      	uxtb	r2, r3
 800ef8c:	4b22      	ldr	r3, [pc, #136]	@ (800f018 <ProcessMacCommands+0x390>)
 800ef8e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
                    Nvm.MacGroup2.MacParams.Rx2Channel.Frequency = rxParamSetupReq.Frequency;
 800ef92:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ef94:	4a20      	ldr	r2, [pc, #128]	@ (800f018 <ProcessMacCommands+0x390>)
 800ef96:	66d3      	str	r3, [r2, #108]	@ 0x6c
                    Nvm.MacGroup2.MacParams.RxCChannel.Frequency = rxParamSetupReq.Frequency;
 800ef98:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ef9a:	4a1f      	ldr	r2, [pc, #124]	@ (800f018 <ProcessMacCommands+0x390>)
 800ef9c:	6753      	str	r3, [r2, #116]	@ 0x74
                    Nvm.MacGroup2.MacParams.Rx1DrOffset = rxParamSetupReq.DrOffset;
 800ef9e:	f997 304d 	ldrsb.w	r3, [r7, #77]	@ 0x4d
 800efa2:	b2da      	uxtb	r2, r3
 800efa4:	4b1c      	ldr	r3, [pc, #112]	@ (800f018 <ProcessMacCommands+0x390>)
 800efa6:	f883 2069 	strb.w	r2, [r3, #105]	@ 0x69
                }
                macCmdPayload[0] = status;
 800efaa:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 800efae:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_PARAM_SETUP_ANS, macCmdPayload, 1 );
 800efb2:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800efb6:	2201      	movs	r2, #1
 800efb8:	4619      	mov	r1, r3
 800efba:	2005      	movs	r0, #5
 800efbc:	f003 fa5a 	bl	8012474 <LoRaMacCommandsAddCmd>
                break;
 800efc0:	e2f7      	b.n	800f5b2 <ProcessMacCommands+0x92a>
            }
            case SRV_MAC_DEV_STATUS_REQ:
            {
                uint8_t batteryLevel = BAT_LEVEL_NO_MEASURE;
 800efc2:	23ff      	movs	r3, #255	@ 0xff
 800efc4:	f887 3085 	strb.w	r3, [r7, #133]	@ 0x85
                if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->GetBatteryLevel != NULL ) )
 800efc8:	4b12      	ldr	r3, [pc, #72]	@ (800f014 <ProcessMacCommands+0x38c>)
 800efca:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800efce:	2b00      	cmp	r3, #0
 800efd0:	d00d      	beq.n	800efee <ProcessMacCommands+0x366>
 800efd2:	4b10      	ldr	r3, [pc, #64]	@ (800f014 <ProcessMacCommands+0x38c>)
 800efd4:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800efd8:	681b      	ldr	r3, [r3, #0]
 800efda:	2b00      	cmp	r3, #0
 800efdc:	d007      	beq.n	800efee <ProcessMacCommands+0x366>
                {
                    batteryLevel = MacCtx.MacCallbacks->GetBatteryLevel( );
 800efde:	4b0d      	ldr	r3, [pc, #52]	@ (800f014 <ProcessMacCommands+0x38c>)
 800efe0:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800efe4:	681b      	ldr	r3, [r3, #0]
 800efe6:	4798      	blx	r3
 800efe8:	4603      	mov	r3, r0
 800efea:	f887 3085 	strb.w	r3, [r7, #133]	@ 0x85
                }
                macCmdPayload[0] = batteryLevel;
 800efee:	f897 3085 	ldrb.w	r3, [r7, #133]	@ 0x85
 800eff2:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
                macCmdPayload[1] = ( uint8_t )( snr & 0x3F );
 800eff6:	787b      	ldrb	r3, [r7, #1]
 800eff8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800effc:	b2db      	uxtb	r3, r3
 800effe:	f887 3069 	strb.w	r3, [r7, #105]	@ 0x69
                LoRaMacCommandsAddCmd( MOTE_MAC_DEV_STATUS_ANS, macCmdPayload, 2 );
 800f002:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800f006:	2202      	movs	r2, #2
 800f008:	4619      	mov	r1, r3
 800f00a:	2006      	movs	r0, #6
 800f00c:	f003 fa32 	bl	8012474 <LoRaMacCommandsAddCmd>
                break;
 800f010:	e2cf      	b.n	800f5b2 <ProcessMacCommands+0x92a>
 800f012:	bf00      	nop
 800f014:	2000062c 	.word	0x2000062c
 800f018:	20000b34 	.word	0x20000b34
 800f01c:	cccccccd 	.word	0xcccccccd
            }
            case SRV_MAC_NEW_CHANNEL_REQ:
            {
                NewChannelReqParams_t newChannelReq;
                ChannelParams_t chParam;
                status = 0x03;
 800f020:	2303      	movs	r3, #3
 800f022:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b

                newChannelReq.ChannelId = payload[macIndex++];
 800f026:	78fb      	ldrb	r3, [r7, #3]
 800f028:	1c5a      	adds	r2, r3, #1
 800f02a:	70fa      	strb	r2, [r7, #3]
 800f02c:	461a      	mov	r2, r3
 800f02e:	687b      	ldr	r3, [r7, #4]
 800f030:	4413      	add	r3, r2
 800f032:	781b      	ldrb	r3, [r3, #0]
 800f034:	b25b      	sxtb	r3, r3
 800f036:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
                newChannelReq.NewChannel = &chParam;
 800f03a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800f03e:	647b      	str	r3, [r7, #68]	@ 0x44

                chParam.Frequency = ( uint32_t ) payload[macIndex++];
 800f040:	78fb      	ldrb	r3, [r7, #3]
 800f042:	1c5a      	adds	r2, r3, #1
 800f044:	70fa      	strb	r2, [r7, #3]
 800f046:	461a      	mov	r2, r3
 800f048:	687b      	ldr	r3, [r7, #4]
 800f04a:	4413      	add	r3, r2
 800f04c:	781b      	ldrb	r3, [r3, #0]
 800f04e:	63bb      	str	r3, [r7, #56]	@ 0x38
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800f050:	78fb      	ldrb	r3, [r7, #3]
 800f052:	1c5a      	adds	r2, r3, #1
 800f054:	70fa      	strb	r2, [r7, #3]
 800f056:	461a      	mov	r2, r3
 800f058:	687b      	ldr	r3, [r7, #4]
 800f05a:	4413      	add	r3, r2
 800f05c:	781b      	ldrb	r3, [r3, #0]
 800f05e:	021a      	lsls	r2, r3, #8
 800f060:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f062:	4313      	orrs	r3, r2
 800f064:	63bb      	str	r3, [r7, #56]	@ 0x38
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800f066:	78fb      	ldrb	r3, [r7, #3]
 800f068:	1c5a      	adds	r2, r3, #1
 800f06a:	70fa      	strb	r2, [r7, #3]
 800f06c:	461a      	mov	r2, r3
 800f06e:	687b      	ldr	r3, [r7, #4]
 800f070:	4413      	add	r3, r2
 800f072:	781b      	ldrb	r3, [r3, #0]
 800f074:	041a      	lsls	r2, r3, #16
 800f076:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f078:	4313      	orrs	r3, r2
 800f07a:	63bb      	str	r3, [r7, #56]	@ 0x38
                chParam.Frequency *= 100;
 800f07c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f07e:	2264      	movs	r2, #100	@ 0x64
 800f080:	fb02 f303 	mul.w	r3, r2, r3
 800f084:	63bb      	str	r3, [r7, #56]	@ 0x38
                chParam.Rx1Frequency = 0;
 800f086:	2300      	movs	r3, #0
 800f088:	63fb      	str	r3, [r7, #60]	@ 0x3c
                chParam.DrRange.Value = payload[macIndex++];
 800f08a:	78fb      	ldrb	r3, [r7, #3]
 800f08c:	1c5a      	adds	r2, r3, #1
 800f08e:	70fa      	strb	r2, [r7, #3]
 800f090:	461a      	mov	r2, r3
 800f092:	687b      	ldr	r3, [r7, #4]
 800f094:	4413      	add	r3, r2
 800f096:	781b      	ldrb	r3, [r3, #0]
 800f098:	b25b      	sxtb	r3, r3
 800f09a:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40

                status = ( uint8_t )RegionNewChannelReq( Nvm.MacGroup2.Region, &newChannelReq );
 800f09e:	4b85      	ldr	r3, [pc, #532]	@ (800f2b4 <ProcessMacCommands+0x62c>)
 800f0a0:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800f0a4:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 800f0a8:	4611      	mov	r1, r2
 800f0aa:	4618      	mov	r0, r3
 800f0ac:	f005 f8a3 	bl	80141f6 <RegionNewChannelReq>
 800f0b0:	4603      	mov	r3, r0
 800f0b2:	b2db      	uxtb	r3, r3
 800f0b4:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b

                if( ( int8_t )status >= 0 )
 800f0b8:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 800f0bc:	b25b      	sxtb	r3, r3
 800f0be:	2b00      	cmp	r3, #0
 800f0c0:	f2c0 826c 	blt.w	800f59c <ProcessMacCommands+0x914>
                {
                    macCmdPayload[0] = status;
 800f0c4:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 800f0c8:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
                    LoRaMacCommandsAddCmd( MOTE_MAC_NEW_CHANNEL_ANS, macCmdPayload, 1 );
 800f0cc:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800f0d0:	2201      	movs	r2, #1
 800f0d2:	4619      	mov	r1, r3
 800f0d4:	2007      	movs	r0, #7
 800f0d6:	f003 f9cd 	bl	8012474 <LoRaMacCommandsAddCmd>
                }
                break;
 800f0da:	e25f      	b.n	800f59c <ProcessMacCommands+0x914>
            }
            case SRV_MAC_RX_TIMING_SETUP_REQ:
            {
                uint8_t delay = payload[macIndex++] & 0x0F;
 800f0dc:	78fb      	ldrb	r3, [r7, #3]
 800f0de:	1c5a      	adds	r2, r3, #1
 800f0e0:	70fa      	strb	r2, [r7, #3]
 800f0e2:	461a      	mov	r2, r3
 800f0e4:	687b      	ldr	r3, [r7, #4]
 800f0e6:	4413      	add	r3, r2
 800f0e8:	781b      	ldrb	r3, [r3, #0]
 800f0ea:	f003 030f 	and.w	r3, r3, #15
 800f0ee:	f887 3084 	strb.w	r3, [r7, #132]	@ 0x84

                if( delay == 0 )
 800f0f2:	f897 3084 	ldrb.w	r3, [r7, #132]	@ 0x84
 800f0f6:	2b00      	cmp	r3, #0
 800f0f8:	d104      	bne.n	800f104 <ProcessMacCommands+0x47c>
                {
                    delay++;
 800f0fa:	f897 3084 	ldrb.w	r3, [r7, #132]	@ 0x84
 800f0fe:	3301      	adds	r3, #1
 800f100:	f887 3084 	strb.w	r3, [r7, #132]	@ 0x84
                }
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = delay * 1000;
 800f104:	f897 3084 	ldrb.w	r3, [r7, #132]	@ 0x84
 800f108:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800f10c:	fb02 f303 	mul.w	r3, r2, r3
 800f110:	461a      	mov	r2, r3
 800f112:	4b68      	ldr	r3, [pc, #416]	@ (800f2b4 <ProcessMacCommands+0x62c>)
 800f114:	659a      	str	r2, [r3, #88]	@ 0x58
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 800f116:	4b67      	ldr	r3, [pc, #412]	@ (800f2b4 <ProcessMacCommands+0x62c>)
 800f118:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f11a:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800f11e:	4a65      	ldr	r2, [pc, #404]	@ (800f2b4 <ProcessMacCommands+0x62c>)
 800f120:	65d3      	str	r3, [r2, #92]	@ 0x5c
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_TIMING_SETUP_ANS, macCmdPayload, 0 );
 800f122:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800f126:	2200      	movs	r2, #0
 800f128:	4619      	mov	r1, r3
 800f12a:	2008      	movs	r0, #8
 800f12c:	f003 f9a2 	bl	8012474 <LoRaMacCommandsAddCmd>
                break;
 800f130:	e23f      	b.n	800f5b2 <ProcessMacCommands+0x92a>
            case SRV_MAC_TX_PARAM_SETUP_REQ:
            {
                TxParamSetupReqParams_t txParamSetupReq;
                GetPhyParams_t getPhy;
                PhyParam_t phyParam;
                uint8_t eirpDwellTime = payload[macIndex++];
 800f132:	78fb      	ldrb	r3, [r7, #3]
 800f134:	1c5a      	adds	r2, r3, #1
 800f136:	70fa      	strb	r2, [r7, #3]
 800f138:	461a      	mov	r2, r3
 800f13a:	687b      	ldr	r3, [r7, #4]
 800f13c:	4413      	add	r3, r2
 800f13e:	781b      	ldrb	r3, [r3, #0]
 800f140:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76

                txParamSetupReq.UplinkDwellTime = 0;
 800f144:	2300      	movs	r3, #0
 800f146:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
                txParamSetupReq.DownlinkDwellTime = 0;
 800f14a:	2300      	movs	r3, #0
 800f14c:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35

                if( ( eirpDwellTime & 0x20 ) == 0x20 )
 800f150:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 800f154:	f003 0320 	and.w	r3, r3, #32
 800f158:	2b00      	cmp	r3, #0
 800f15a:	d002      	beq.n	800f162 <ProcessMacCommands+0x4da>
                {
                    txParamSetupReq.DownlinkDwellTime = 1;
 800f15c:	2301      	movs	r3, #1
 800f15e:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
                }
                if( ( eirpDwellTime & 0x10 ) == 0x10 )
 800f162:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 800f166:	f003 0310 	and.w	r3, r3, #16
 800f16a:	2b00      	cmp	r3, #0
 800f16c:	d002      	beq.n	800f174 <ProcessMacCommands+0x4ec>
                {
                    txParamSetupReq.UplinkDwellTime = 1;
 800f16e:	2301      	movs	r3, #1
 800f170:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
                }
                txParamSetupReq.MaxEirp = eirpDwellTime & 0x0F;
 800f174:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 800f178:	f003 030f 	and.w	r3, r3, #15
 800f17c:	b2db      	uxtb	r3, r3
 800f17e:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

                // Check the status for correctness
                if( RegionTxParamSetupReq( Nvm.MacGroup2.Region, &txParamSetupReq ) != -1 )
 800f182:	4b4c      	ldr	r3, [pc, #304]	@ (800f2b4 <ProcessMacCommands+0x62c>)
 800f184:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800f188:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 800f18c:	4611      	mov	r1, r2
 800f18e:	4618      	mov	r0, r3
 800f190:	f005 f844 	bl	801421c <RegionTxParamSetupReq>
 800f194:	4603      	mov	r3, r0
 800f196:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f19a:	f000 8201 	beq.w	800f5a0 <ProcessMacCommands+0x918>
                {
                    // Accept command
                    Nvm.MacGroup2.MacParams.UplinkDwellTime = txParamSetupReq.UplinkDwellTime;
 800f19e:	f897 2034 	ldrb.w	r2, [r7, #52]	@ 0x34
 800f1a2:	4b44      	ldr	r3, [pc, #272]	@ (800f2b4 <ProcessMacCommands+0x62c>)
 800f1a4:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
                    Nvm.MacGroup2.MacParams.DownlinkDwellTime = txParamSetupReq.DownlinkDwellTime;
 800f1a8:	f897 2035 	ldrb.w	r2, [r7, #53]	@ 0x35
 800f1ac:	4b41      	ldr	r3, [pc, #260]	@ (800f2b4 <ProcessMacCommands+0x62c>)
 800f1ae:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d
                    Nvm.MacGroup2.MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
 800f1b2:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800f1b6:	461a      	mov	r2, r3
 800f1b8:	4b3f      	ldr	r3, [pc, #252]	@ (800f2b8 <ProcessMacCommands+0x630>)
 800f1ba:	5c9b      	ldrb	r3, [r3, r2]
 800f1bc:	4618      	mov	r0, r3
 800f1be:	f7f1 fb05 	bl	80007cc <__aeabi_ui2f>
 800f1c2:	4603      	mov	r3, r0
 800f1c4:	4a3b      	ldr	r2, [pc, #236]	@ (800f2b4 <ProcessMacCommands+0x62c>)
 800f1c6:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
                    // Update the datarate in case of the new configuration limits it
                    getPhy.Attribute = PHY_MIN_TX_DR;
 800f1ca:	2302      	movs	r3, #2
 800f1cc:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
                    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800f1d0:	4b38      	ldr	r3, [pc, #224]	@ (800f2b4 <ProcessMacCommands+0x62c>)
 800f1d2:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 800f1d6:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
                    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800f1da:	4b36      	ldr	r3, [pc, #216]	@ (800f2b4 <ProcessMacCommands+0x62c>)
 800f1dc:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800f1e0:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 800f1e4:	4611      	mov	r1, r2
 800f1e6:	4618      	mov	r0, r3
 800f1e8:	f004 ff1b 	bl	8014022 <RegionGetPhyParam>
 800f1ec:	4603      	mov	r3, r0
 800f1ee:	62bb      	str	r3, [r7, #40]	@ 0x28
                    Nvm.MacGroup1.ChannelsDatarate = MAX( Nvm.MacGroup1.ChannelsDatarate, ( int8_t )phyParam.Value );
 800f1f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f1f2:	b25a      	sxtb	r2, r3
 800f1f4:	4b2f      	ldr	r3, [pc, #188]	@ (800f2b4 <ProcessMacCommands+0x62c>)
 800f1f6:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 800f1fa:	4293      	cmp	r3, r2
 800f1fc:	bfb8      	it	lt
 800f1fe:	4613      	movlt	r3, r2
 800f200:	b25a      	sxtb	r2, r3
 800f202:	4b2c      	ldr	r3, [pc, #176]	@ (800f2b4 <ProcessMacCommands+0x62c>)
 800f204:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

                    // Add command response
                    LoRaMacCommandsAddCmd( MOTE_MAC_TX_PARAM_SETUP_ANS, macCmdPayload, 0 );
 800f208:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800f20c:	2200      	movs	r2, #0
 800f20e:	4619      	mov	r1, r3
 800f210:	2009      	movs	r0, #9
 800f212:	f003 f92f 	bl	8012474 <LoRaMacCommandsAddCmd>
                }
                break;
 800f216:	e1c3      	b.n	800f5a0 <ProcessMacCommands+0x918>
            }
#endif /* LORAMAC_VERSION */
            case SRV_MAC_DL_CHANNEL_REQ:
            {
                DlChannelReqParams_t dlChannelReq;
                status = 0x03;
 800f218:	2303      	movs	r3, #3
 800f21a:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b

                dlChannelReq.ChannelId = payload[macIndex++];
 800f21e:	78fb      	ldrb	r3, [r7, #3]
 800f220:	1c5a      	adds	r2, r3, #1
 800f222:	70fa      	strb	r2, [r7, #3]
 800f224:	461a      	mov	r2, r3
 800f226:	687b      	ldr	r3, [r7, #4]
 800f228:	4413      	add	r3, r2
 800f22a:	781b      	ldrb	r3, [r3, #0]
 800f22c:	f887 3020 	strb.w	r3, [r7, #32]
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
 800f230:	78fb      	ldrb	r3, [r7, #3]
 800f232:	1c5a      	adds	r2, r3, #1
 800f234:	70fa      	strb	r2, [r7, #3]
 800f236:	461a      	mov	r2, r3
 800f238:	687b      	ldr	r3, [r7, #4]
 800f23a:	4413      	add	r3, r2
 800f23c:	781b      	ldrb	r3, [r3, #0]
 800f23e:	627b      	str	r3, [r7, #36]	@ 0x24
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800f240:	78fb      	ldrb	r3, [r7, #3]
 800f242:	1c5a      	adds	r2, r3, #1
 800f244:	70fa      	strb	r2, [r7, #3]
 800f246:	461a      	mov	r2, r3
 800f248:	687b      	ldr	r3, [r7, #4]
 800f24a:	4413      	add	r3, r2
 800f24c:	781b      	ldrb	r3, [r3, #0]
 800f24e:	021a      	lsls	r2, r3, #8
 800f250:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f252:	4313      	orrs	r3, r2
 800f254:	627b      	str	r3, [r7, #36]	@ 0x24
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800f256:	78fb      	ldrb	r3, [r7, #3]
 800f258:	1c5a      	adds	r2, r3, #1
 800f25a:	70fa      	strb	r2, [r7, #3]
 800f25c:	461a      	mov	r2, r3
 800f25e:	687b      	ldr	r3, [r7, #4]
 800f260:	4413      	add	r3, r2
 800f262:	781b      	ldrb	r3, [r3, #0]
 800f264:	041a      	lsls	r2, r3, #16
 800f266:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f268:	4313      	orrs	r3, r2
 800f26a:	627b      	str	r3, [r7, #36]	@ 0x24
                dlChannelReq.Rx1Frequency *= 100;
 800f26c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f26e:	2264      	movs	r2, #100	@ 0x64
 800f270:	fb02 f303 	mul.w	r3, r2, r3
 800f274:	627b      	str	r3, [r7, #36]	@ 0x24

                status = ( uint8_t )RegionDlChannelReq( Nvm.MacGroup2.Region, &dlChannelReq );
 800f276:	4b0f      	ldr	r3, [pc, #60]	@ (800f2b4 <ProcessMacCommands+0x62c>)
 800f278:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800f27c:	f107 0220 	add.w	r2, r7, #32
 800f280:	4611      	mov	r1, r2
 800f282:	4618      	mov	r0, r3
 800f284:	f004 ffdd 	bl	8014242 <RegionDlChannelReq>
 800f288:	4603      	mov	r3, r0
 800f28a:	b2db      	uxtb	r3, r3
 800f28c:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b

                if( ( int8_t )status >= 0 )
 800f290:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 800f294:	b25b      	sxtb	r3, r3
 800f296:	2b00      	cmp	r3, #0
 800f298:	f2c0 8184 	blt.w	800f5a4 <ProcessMacCommands+0x91c>
                {
                    macCmdPayload[0] = status;
 800f29c:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 800f2a0:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
                    LoRaMacCommandsAddCmd( MOTE_MAC_DL_CHANNEL_ANS, macCmdPayload, 1 );
 800f2a4:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800f2a8:	2201      	movs	r2, #1
 800f2aa:	4619      	mov	r1, r3
 800f2ac:	200a      	movs	r0, #10
 800f2ae:	f003 f8e1 	bl	8012474 <LoRaMacCommandsAddCmd>
                }
                break;
 800f2b2:	e177      	b.n	800f5a4 <ProcessMacCommands+0x91c>
 800f2b4:	20000b34 	.word	0x20000b34
 800f2b8:	0801bcb0 	.word	0x0801bcb0
#endif /* LORAMAC_VERSION */
            case SRV_MAC_DEVICE_TIME_ANS:
            {
                // The mote time can be updated only when the time is received in classA
                // receive windows only.
                if( LoRaMacConfirmQueueIsCmdActive( MLME_DEVICE_TIME ) == true )
 800f2bc:	200a      	movs	r0, #10
 800f2be:	f003 fc11 	bl	8012ae4 <LoRaMacConfirmQueueIsCmdActive>
 800f2c2:	4603      	mov	r3, r0
 800f2c4:	2b00      	cmp	r3, #0
 800f2c6:	f000 816f 	beq.w	800f5a8 <ProcessMacCommands+0x920>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
 800f2ca:	210a      	movs	r1, #10
 800f2cc:	2000      	movs	r0, #0
 800f2ce:	f003 fb7d 	bl	80129cc <LoRaMacConfirmQueueSetStatus>

                    SysTime_t gpsEpochTime = { 0 };
 800f2d2:	f107 0318 	add.w	r3, r7, #24
 800f2d6:	2200      	movs	r2, #0
 800f2d8:	601a      	str	r2, [r3, #0]
 800f2da:	605a      	str	r2, [r3, #4]
                    SysTime_t sysTime = { 0 };
 800f2dc:	f107 0310 	add.w	r3, r7, #16
 800f2e0:	2200      	movs	r2, #0
 800f2e2:	601a      	str	r2, [r3, #0]
 800f2e4:	605a      	str	r2, [r3, #4]
                    SysTime_t sysTimeCurrent = { 0 };
 800f2e6:	f107 0308 	add.w	r3, r7, #8
 800f2ea:	2200      	movs	r2, #0
 800f2ec:	601a      	str	r2, [r3, #0]
 800f2ee:	605a      	str	r2, [r3, #4]

                    gpsEpochTime.Seconds = ( uint32_t )payload[macIndex++];
 800f2f0:	78fb      	ldrb	r3, [r7, #3]
 800f2f2:	1c5a      	adds	r2, r3, #1
 800f2f4:	70fa      	strb	r2, [r7, #3]
 800f2f6:	461a      	mov	r2, r3
 800f2f8:	687b      	ldr	r3, [r7, #4]
 800f2fa:	4413      	add	r3, r2
 800f2fc:	781b      	ldrb	r3, [r3, #0]
 800f2fe:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 8;
 800f300:	78fb      	ldrb	r3, [r7, #3]
 800f302:	1c5a      	adds	r2, r3, #1
 800f304:	70fa      	strb	r2, [r7, #3]
 800f306:	461a      	mov	r2, r3
 800f308:	687b      	ldr	r3, [r7, #4]
 800f30a:	4413      	add	r3, r2
 800f30c:	781b      	ldrb	r3, [r3, #0]
 800f30e:	021a      	lsls	r2, r3, #8
 800f310:	69bb      	ldr	r3, [r7, #24]
 800f312:	4313      	orrs	r3, r2
 800f314:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 800f316:	78fb      	ldrb	r3, [r7, #3]
 800f318:	1c5a      	adds	r2, r3, #1
 800f31a:	70fa      	strb	r2, [r7, #3]
 800f31c:	461a      	mov	r2, r3
 800f31e:	687b      	ldr	r3, [r7, #4]
 800f320:	4413      	add	r3, r2
 800f322:	781b      	ldrb	r3, [r3, #0]
 800f324:	041a      	lsls	r2, r3, #16
 800f326:	69bb      	ldr	r3, [r7, #24]
 800f328:	4313      	orrs	r3, r2
 800f32a:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 800f32c:	78fb      	ldrb	r3, [r7, #3]
 800f32e:	1c5a      	adds	r2, r3, #1
 800f330:	70fa      	strb	r2, [r7, #3]
 800f332:	461a      	mov	r2, r3
 800f334:	687b      	ldr	r3, [r7, #4]
 800f336:	4413      	add	r3, r2
 800f338:	781b      	ldrb	r3, [r3, #0]
 800f33a:	061a      	lsls	r2, r3, #24
 800f33c:	69bb      	ldr	r3, [r7, #24]
 800f33e:	4313      	orrs	r3, r2
 800f340:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.SubSeconds = payload[macIndex++];
 800f342:	78fb      	ldrb	r3, [r7, #3]
 800f344:	1c5a      	adds	r2, r3, #1
 800f346:	70fa      	strb	r2, [r7, #3]
 800f348:	461a      	mov	r2, r3
 800f34a:	687b      	ldr	r3, [r7, #4]
 800f34c:	4413      	add	r3, r2
 800f34e:	781b      	ldrb	r3, [r3, #0]
 800f350:	b21b      	sxth	r3, r3
 800f352:	83bb      	strh	r3, [r7, #28]

                    // Convert the fractional second received in ms
                    // round( pow( 0.5, 8.0 ) * 1000 ) = 3.90625
                    gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 800f354:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800f358:	461a      	mov	r2, r3
 800f35a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800f35e:	fb02 f303 	mul.w	r3, r2, r3
 800f362:	121b      	asrs	r3, r3, #8
 800f364:	b21b      	sxth	r3, r3
 800f366:	83bb      	strh	r3, [r7, #28]

                    // Copy received GPS Epoch time into system time
                    sysTime = gpsEpochTime;
 800f368:	f107 0310 	add.w	r3, r7, #16
 800f36c:	f107 0218 	add.w	r2, r7, #24
 800f370:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f374:	e883 0003 	stmia.w	r3, {r0, r1}
                    // Add Unix to Gps epoch offset. The system time is based on Unix time.
                    sysTime.Seconds += UNIX_GPS_EPOCH_OFFSET;
 800f378:	693a      	ldr	r2, [r7, #16]
 800f37a:	4b94      	ldr	r3, [pc, #592]	@ (800f5cc <ProcessMacCommands+0x944>)
 800f37c:	4413      	add	r3, r2
 800f37e:	613b      	str	r3, [r7, #16]

                    // Compensate time difference between Tx Done time and now
                    sysTimeCurrent = SysTimeGet( );
 800f380:	f107 0308 	add.w	r3, r7, #8
 800f384:	4618      	mov	r0, r3
 800f386:	f00a fda5 	bl	8019ed4 <SysTimeGet>
                    sysTime = SysTimeAdd( sysTimeCurrent, SysTimeSub( sysTime, MacCtx.LastTxSysTime ) );
 800f38a:	f107 006c 	add.w	r0, r7, #108	@ 0x6c
 800f38e:	4b90      	ldr	r3, [pc, #576]	@ (800f5d0 <ProcessMacCommands+0x948>)
 800f390:	f8d3 233c 	ldr.w	r2, [r3, #828]	@ 0x33c
 800f394:	9200      	str	r2, [sp, #0]
 800f396:	f8d3 3338 	ldr.w	r3, [r3, #824]	@ 0x338
 800f39a:	f107 0210 	add.w	r2, r7, #16
 800f39e:	ca06      	ldmia	r2, {r1, r2}
 800f3a0:	f00a fd31 	bl	8019e06 <SysTimeSub>
 800f3a4:	f107 0010 	add.w	r0, r7, #16
 800f3a8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800f3aa:	9300      	str	r3, [sp, #0]
 800f3ac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f3ae:	f107 0208 	add.w	r2, r7, #8
 800f3b2:	ca06      	ldmia	r2, {r1, r2}
 800f3b4:	f00a fcee 	bl	8019d94 <SysTimeAdd>

                    // Apply the new system time.
                    SysTimeSet( sysTime );
 800f3b8:	f107 0310 	add.w	r3, r7, #16
 800f3bc:	e893 0003 	ldmia.w	r3, {r0, r1}
 800f3c0:	f00a fd5a 	bl	8019e78 <SysTimeSet>
                    LoRaMacClassBDeviceTimeAns( );
 800f3c4:	f002 ff0f 	bl	80121e6 <LoRaMacClassBDeviceTimeAns>
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = true;
 800f3c8:	4b81      	ldr	r3, [pc, #516]	@ (800f5d0 <ProcessMacCommands+0x948>)
 800f3ca:	2201      	movs	r2, #1
 800f3cc:	f883 2430 	strb.w	r2, [r3, #1072]	@ 0x430
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                    // In case of other receive windows the Device Time Answer is not received.
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
#endif /* LORAMAC_VERSION */
                }
                break;
 800f3d0:	e0ea      	b.n	800f5a8 <ProcessMacCommands+0x920>
            }
            case SRV_MAC_PING_SLOT_INFO_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_PING_SLOT_INFO ) == true )
 800f3d2:	200d      	movs	r0, #13
 800f3d4:	f003 fb86 	bl	8012ae4 <LoRaMacConfirmQueueIsCmdActive>
 800f3d8:	4603      	mov	r3, r0
 800f3da:	2b00      	cmp	r3, #0
 800f3dc:	f000 80e6 	beq.w	800f5ac <ProcessMacCommands+0x924>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
 800f3e0:	210d      	movs	r1, #13
 800f3e2:	2000      	movs	r0, #0
 800f3e4:	f003 faf2 	bl	80129cc <LoRaMacConfirmQueueSetStatus>
                    // According to the specification, it is not allowed to process this answer in
                    // a ping or multicast slot
                    if( ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_PING_SLOT ) && ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT ) )
 800f3e8:	4b79      	ldr	r3, [pc, #484]	@ (800f5d0 <ProcessMacCommands+0x948>)
 800f3ea:	f893 3480 	ldrb.w	r3, [r3, #1152]	@ 0x480
 800f3ee:	2b04      	cmp	r3, #4
 800f3f0:	f000 80dc 	beq.w	800f5ac <ProcessMacCommands+0x924>
 800f3f4:	4b76      	ldr	r3, [pc, #472]	@ (800f5d0 <ProcessMacCommands+0x948>)
 800f3f6:	f893 3480 	ldrb.w	r3, [r3, #1152]	@ 0x480
 800f3fa:	2b05      	cmp	r3, #5
 800f3fc:	f000 80d6 	beq.w	800f5ac <ProcessMacCommands+0x924>
                    {
                        LoRaMacClassBPingSlotInfoAns( );
 800f400:	f002 fed2 	bl	80121a8 <LoRaMacClassBPingSlotInfoAns>
                    }
                }
                break;
 800f404:	e0d2      	b.n	800f5ac <ProcessMacCommands+0x924>
            }
            case SRV_MAC_PING_SLOT_CHANNEL_REQ:
            {
                uint8_t status = 0x03;
 800f406:	2303      	movs	r3, #3
 800f408:	f887 307c 	strb.w	r3, [r7, #124]	@ 0x7c
                uint32_t frequency = 0;
 800f40c:	2300      	movs	r3, #0
 800f40e:	67bb      	str	r3, [r7, #120]	@ 0x78
                uint8_t datarate;

                frequency = ( uint32_t )payload[macIndex++];
 800f410:	78fb      	ldrb	r3, [r7, #3]
 800f412:	1c5a      	adds	r2, r3, #1
 800f414:	70fa      	strb	r2, [r7, #3]
 800f416:	461a      	mov	r2, r3
 800f418:	687b      	ldr	r3, [r7, #4]
 800f41a:	4413      	add	r3, r2
 800f41c:	781b      	ldrb	r3, [r3, #0]
 800f41e:	67bb      	str	r3, [r7, #120]	@ 0x78
                frequency |= ( uint32_t )payload[macIndex++] << 8;
 800f420:	78fb      	ldrb	r3, [r7, #3]
 800f422:	1c5a      	adds	r2, r3, #1
 800f424:	70fa      	strb	r2, [r7, #3]
 800f426:	461a      	mov	r2, r3
 800f428:	687b      	ldr	r3, [r7, #4]
 800f42a:	4413      	add	r3, r2
 800f42c:	781b      	ldrb	r3, [r3, #0]
 800f42e:	021b      	lsls	r3, r3, #8
 800f430:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800f432:	4313      	orrs	r3, r2
 800f434:	67bb      	str	r3, [r7, #120]	@ 0x78
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 800f436:	78fb      	ldrb	r3, [r7, #3]
 800f438:	1c5a      	adds	r2, r3, #1
 800f43a:	70fa      	strb	r2, [r7, #3]
 800f43c:	461a      	mov	r2, r3
 800f43e:	687b      	ldr	r3, [r7, #4]
 800f440:	4413      	add	r3, r2
 800f442:	781b      	ldrb	r3, [r3, #0]
 800f444:	041b      	lsls	r3, r3, #16
 800f446:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800f448:	4313      	orrs	r3, r2
 800f44a:	67bb      	str	r3, [r7, #120]	@ 0x78
                frequency *= 100;
 800f44c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800f44e:	2264      	movs	r2, #100	@ 0x64
 800f450:	fb02 f303 	mul.w	r3, r2, r3
 800f454:	67bb      	str	r3, [r7, #120]	@ 0x78
                datarate = payload[macIndex++] & 0x0F;
 800f456:	78fb      	ldrb	r3, [r7, #3]
 800f458:	1c5a      	adds	r2, r3, #1
 800f45a:	70fa      	strb	r2, [r7, #3]
 800f45c:	461a      	mov	r2, r3
 800f45e:	687b      	ldr	r3, [r7, #4]
 800f460:	4413      	add	r3, r2
 800f462:	781b      	ldrb	r3, [r3, #0]
 800f464:	f003 030f 	and.w	r3, r3, #15
 800f468:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77

                status = LoRaMacClassBPingSlotChannelReq( datarate, frequency );
 800f46c:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800f470:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800f472:	4618      	mov	r0, r3
 800f474:	f002 fe9e 	bl	80121b4 <LoRaMacClassBPingSlotChannelReq>
 800f478:	4603      	mov	r3, r0
 800f47a:	f887 307c 	strb.w	r3, [r7, #124]	@ 0x7c
                macCmdPayload[0] = status;
 800f47e:	f897 307c 	ldrb.w	r3, [r7, #124]	@ 0x7c
 800f482:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_FREQ_ANS, macCmdPayload, 1 );
 800f486:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800f48a:	2201      	movs	r2, #1
 800f48c:	4619      	mov	r1, r3
 800f48e:	2011      	movs	r0, #17
 800f490:	f002 fff0 	bl	8012474 <LoRaMacCommandsAddCmd>
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_CHANNEL_ANS, macCmdPayload, 1 );
#endif /* LORAMAC_VERSION */
                break;
 800f494:	e08d      	b.n	800f5b2 <ProcessMacCommands+0x92a>
            }
            case SRV_MAC_BEACON_TIMING_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_TIMING ) == true )
 800f496:	200e      	movs	r0, #14
 800f498:	f003 fb24 	bl	8012ae4 <LoRaMacConfirmQueueIsCmdActive>
 800f49c:	4603      	mov	r3, r0
 800f49e:	2b00      	cmp	r3, #0
 800f4a0:	f000 8086 	beq.w	800f5b0 <ProcessMacCommands+0x928>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_BEACON_TIMING );
 800f4a4:	210e      	movs	r1, #14
 800f4a6:	2000      	movs	r0, #0
 800f4a8:	f003 fa90 	bl	80129cc <LoRaMacConfirmQueueSetStatus>
                    uint16_t beaconTimingDelay = 0;
 800f4ac:	2300      	movs	r3, #0
 800f4ae:	f8a7 307e 	strh.w	r3, [r7, #126]	@ 0x7e
                    uint8_t beaconTimingChannel = 0;
 800f4b2:	2300      	movs	r3, #0
 800f4b4:	f887 307d 	strb.w	r3, [r7, #125]	@ 0x7d

                    beaconTimingDelay = ( uint16_t )payload[macIndex++];
 800f4b8:	78fb      	ldrb	r3, [r7, #3]
 800f4ba:	1c5a      	adds	r2, r3, #1
 800f4bc:	70fa      	strb	r2, [r7, #3]
 800f4be:	461a      	mov	r2, r3
 800f4c0:	687b      	ldr	r3, [r7, #4]
 800f4c2:	4413      	add	r3, r2
 800f4c4:	781b      	ldrb	r3, [r3, #0]
 800f4c6:	f8a7 307e 	strh.w	r3, [r7, #126]	@ 0x7e
                    beaconTimingDelay |= ( uint16_t )payload[macIndex++] << 8;
 800f4ca:	78fb      	ldrb	r3, [r7, #3]
 800f4cc:	1c5a      	adds	r2, r3, #1
 800f4ce:	70fa      	strb	r2, [r7, #3]
 800f4d0:	461a      	mov	r2, r3
 800f4d2:	687b      	ldr	r3, [r7, #4]
 800f4d4:	4413      	add	r3, r2
 800f4d6:	781b      	ldrb	r3, [r3, #0]
 800f4d8:	021b      	lsls	r3, r3, #8
 800f4da:	b21a      	sxth	r2, r3
 800f4dc:	f9b7 307e 	ldrsh.w	r3, [r7, #126]	@ 0x7e
 800f4e0:	4313      	orrs	r3, r2
 800f4e2:	b21b      	sxth	r3, r3
 800f4e4:	f8a7 307e 	strh.w	r3, [r7, #126]	@ 0x7e
                    beaconTimingChannel = payload[macIndex++];
 800f4e8:	78fb      	ldrb	r3, [r7, #3]
 800f4ea:	1c5a      	adds	r2, r3, #1
 800f4ec:	70fa      	strb	r2, [r7, #3]
 800f4ee:	461a      	mov	r2, r3
 800f4f0:	687b      	ldr	r3, [r7, #4]
 800f4f2:	4413      	add	r3, r2
 800f4f4:	781b      	ldrb	r3, [r3, #0]
 800f4f6:	f887 307d 	strb.w	r3, [r7, #125]	@ 0x7d

                    LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
 800f4fa:	4b36      	ldr	r3, [pc, #216]	@ (800f5d4 <ProcessMacCommands+0x94c>)
 800f4fc:	681a      	ldr	r2, [r3, #0]
 800f4fe:	f897 107d 	ldrb.w	r1, [r7, #125]	@ 0x7d
 800f502:	f8b7 307e 	ldrh.w	r3, [r7, #126]	@ 0x7e
 800f506:	4618      	mov	r0, r3
 800f508:	f002 fe60 	bl	80121cc <LoRaMacClassBBeaconTimingAns>
                }
                break;
 800f50c:	e050      	b.n	800f5b0 <ProcessMacCommands+0x928>
            }
            case SRV_MAC_BEACON_FREQ_REQ:
                {
                    uint32_t frequency = 0;
 800f50e:	2300      	movs	r3, #0
 800f510:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80

                    frequency = ( uint32_t )payload[macIndex++];
 800f514:	78fb      	ldrb	r3, [r7, #3]
 800f516:	1c5a      	adds	r2, r3, #1
 800f518:	70fa      	strb	r2, [r7, #3]
 800f51a:	461a      	mov	r2, r3
 800f51c:	687b      	ldr	r3, [r7, #4]
 800f51e:	4413      	add	r3, r2
 800f520:	781b      	ldrb	r3, [r3, #0]
 800f522:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
                    frequency |= ( uint32_t )payload[macIndex++] << 8;
 800f526:	78fb      	ldrb	r3, [r7, #3]
 800f528:	1c5a      	adds	r2, r3, #1
 800f52a:	70fa      	strb	r2, [r7, #3]
 800f52c:	461a      	mov	r2, r3
 800f52e:	687b      	ldr	r3, [r7, #4]
 800f530:	4413      	add	r3, r2
 800f532:	781b      	ldrb	r3, [r3, #0]
 800f534:	021b      	lsls	r3, r3, #8
 800f536:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800f53a:	4313      	orrs	r3, r2
 800f53c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 800f540:	78fb      	ldrb	r3, [r7, #3]
 800f542:	1c5a      	adds	r2, r3, #1
 800f544:	70fa      	strb	r2, [r7, #3]
 800f546:	461a      	mov	r2, r3
 800f548:	687b      	ldr	r3, [r7, #4]
 800f54a:	4413      	add	r3, r2
 800f54c:	781b      	ldrb	r3, [r3, #0]
 800f54e:	041b      	lsls	r3, r3, #16
 800f550:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800f554:	4313      	orrs	r3, r2
 800f556:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
                    frequency *= 100;
 800f55a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800f55e:	2264      	movs	r2, #100	@ 0x64
 800f560:	fb02 f303 	mul.w	r3, r2, r3
 800f564:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80

                    if( LoRaMacClassBBeaconFreqReq( frequency ) == true )
 800f568:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 800f56c:	f002 fe41 	bl	80121f2 <LoRaMacClassBBeaconFreqReq>
 800f570:	4603      	mov	r3, r0
 800f572:	2b00      	cmp	r3, #0
 800f574:	d003      	beq.n	800f57e <ProcessMacCommands+0x8f6>
                    {
                        macCmdPayload[0] = 1;
 800f576:	2301      	movs	r3, #1
 800f578:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
 800f57c:	e002      	b.n	800f584 <ProcessMacCommands+0x8fc>
                    }
                    else
                    {
                        macCmdPayload[0] = 0;
 800f57e:	2300      	movs	r3, #0
 800f580:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
                    }
                    LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_FREQ_ANS, macCmdPayload, 1 );
 800f584:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800f588:	2201      	movs	r2, #1
 800f58a:	4619      	mov	r1, r3
 800f58c:	2013      	movs	r0, #19
 800f58e:	f002 ff71 	bl	8012474 <LoRaMacCommandsAddCmd>
                }
                break;
 800f592:	e00e      	b.n	800f5b2 <ProcessMacCommands+0x92a>
                break;
 800f594:	bf00      	nop
 800f596:	e00c      	b.n	800f5b2 <ProcessMacCommands+0x92a>
                break;
 800f598:	bf00      	nop
 800f59a:	e00a      	b.n	800f5b2 <ProcessMacCommands+0x92a>
                break;
 800f59c:	bf00      	nop
 800f59e:	e008      	b.n	800f5b2 <ProcessMacCommands+0x92a>
                break;
 800f5a0:	bf00      	nop
 800f5a2:	e006      	b.n	800f5b2 <ProcessMacCommands+0x92a>
                break;
 800f5a4:	bf00      	nop
 800f5a6:	e004      	b.n	800f5b2 <ProcessMacCommands+0x92a>
                break;
 800f5a8:	bf00      	nop
 800f5aa:	e002      	b.n	800f5b2 <ProcessMacCommands+0x92a>
                break;
 800f5ac:	bf00      	nop
 800f5ae:	e000      	b.n	800f5b2 <ProcessMacCommands+0x92a>
                break;
 800f5b0:	bf00      	nop
    while( macIndex < commandsSize )
 800f5b2:	78fa      	ldrb	r2, [r7, #3]
 800f5b4:	78bb      	ldrb	r3, [r7, #2]
 800f5b6:	429a      	cmp	r2, r3
 800f5b8:	f4ff ab7e 	bcc.w	800ecb8 <ProcessMacCommands+0x30>
 800f5bc:	e002      	b.n	800f5c4 <ProcessMacCommands+0x93c>
            return;
 800f5be:	bf00      	nop
 800f5c0:	e000      	b.n	800f5c4 <ProcessMacCommands+0x93c>
            default:
                // Unknown command. ABORT MAC commands processing
                return;
 800f5c2:	bf00      	nop
        }
    }
}
 800f5c4:	378c      	adds	r7, #140	@ 0x8c
 800f5c6:	46bd      	mov	sp, r7
 800f5c8:	bd90      	pop	{r4, r7, pc}
 800f5ca:	bf00      	nop
 800f5cc:	12d53d80 	.word	0x12d53d80
 800f5d0:	2000062c 	.word	0x2000062c
 800f5d4:	200012ac 	.word	0x200012ac

0800f5d8 <Send>:

static LoRaMacStatus_t Send( LoRaMacHeader_t* macHdr, uint8_t fPort, void* fBuffer, uint16_t fBufferSize, bool allowDelayedTx )
{
 800f5d8:	b580      	push	{r7, lr}
 800f5da:	b08e      	sub	sp, #56	@ 0x38
 800f5dc:	af02      	add	r7, sp, #8
 800f5de:	60f8      	str	r0, [r7, #12]
 800f5e0:	607a      	str	r2, [r7, #4]
 800f5e2:	461a      	mov	r2, r3
 800f5e4:	460b      	mov	r3, r1
 800f5e6:	72fb      	strb	r3, [r7, #11]
 800f5e8:	4613      	mov	r3, r2
 800f5ea:	813b      	strh	r3, [r7, #8]
    LoRaMacFrameCtrl_t fCtrl;
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 800f5ec:	2303      	movs	r3, #3
 800f5ee:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    int8_t datarate = Nvm.MacGroup1.ChannelsDatarate;
 800f5f2:	4b65      	ldr	r3, [pc, #404]	@ (800f788 <Send+0x1b0>)
 800f5f4:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800f5f8:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    int8_t txPower = Nvm.MacGroup1.ChannelsTxPower;
 800f5fc:	4b62      	ldr	r3, [pc, #392]	@ (800f788 <Send+0x1b0>)
 800f5fe:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800f602:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 800f606:	4b60      	ldr	r3, [pc, #384]	@ (800f788 <Send+0x1b0>)
 800f608:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f60a:	62bb      	str	r3, [r7, #40]	@ 0x28
    CalcNextAdrParams_t adrNext;

    // Check if we are joined
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800f60c:	4b5e      	ldr	r3, [pc, #376]	@ (800f788 <Send+0x1b0>)
 800f60e:	f893 312c 	ldrb.w	r3, [r3, #300]	@ 0x12c
 800f612:	2b00      	cmp	r3, #0
 800f614:	d101      	bne.n	800f61a <Send+0x42>
    {
        return LORAMAC_STATUS_NO_NETWORK_JOINED;
 800f616:	2307      	movs	r3, #7
 800f618:	e0b1      	b.n	800f77e <Send+0x1a6>
    }
    if( Nvm.MacGroup2.MaxDCycle == 0 )
 800f61a:	4b5b      	ldr	r3, [pc, #364]	@ (800f788 <Send+0x1b0>)
 800f61c:	f893 311b 	ldrb.w	r3, [r3, #283]	@ 0x11b
 800f620:	2b00      	cmp	r3, #0
 800f622:	d102      	bne.n	800f62a <Send+0x52>
    {
        Nvm.MacGroup1.AggregatedTimeOff = 0;
 800f624:	4b58      	ldr	r3, [pc, #352]	@ (800f788 <Send+0x1b0>)
 800f626:	2200      	movs	r2, #0
 800f628:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    fCtrl.Value = 0;
 800f62a:	2300      	movs	r3, #0
 800f62c:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    fCtrl.Bits.FOptsLen      = 0;
 800f630:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800f634:	f36f 0303 	bfc	r3, #0, #4
 800f638:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    fCtrl.Bits.Adr           = Nvm.MacGroup2.AdrCtrlOn;
 800f63c:	4b52      	ldr	r3, [pc, #328]	@ (800f788 <Send+0x1b0>)
 800f63e:	f893 211a 	ldrb.w	r2, [r3, #282]	@ 0x11a
 800f642:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800f646:	f362 13c7 	bfi	r3, r2, #7, #1
 800f64a:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c

    // Check class b
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800f64e:	4b4e      	ldr	r3, [pc, #312]	@ (800f788 <Send+0x1b0>)
 800f650:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800f654:	2b01      	cmp	r3, #1
 800f656:	d106      	bne.n	800f666 <Send+0x8e>
    {
        fCtrl.Bits.FPending      = 1;
 800f658:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800f65c:	f043 0310 	orr.w	r3, r3, #16
 800f660:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
 800f664:	e005      	b.n	800f672 <Send+0x9a>
    }
    else
    {
        fCtrl.Bits.FPending      = 0;
 800f666:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800f66a:	f36f 1304 	bfc	r3, #4, #1
 800f66e:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    }

    // Check server ack
    if( Nvm.MacGroup1.SrvAckRequested == true )
 800f672:	4b45      	ldr	r3, [pc, #276]	@ (800f788 <Send+0x1b0>)
 800f674:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 800f678:	2b00      	cmp	r3, #0
 800f67a:	d005      	beq.n	800f688 <Send+0xb0>
    {
        fCtrl.Bits.Ack = 1;
 800f67c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800f680:	f043 0320 	orr.w	r3, r3, #32
 800f684:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    }

    // ADR next request
    adrNext.UpdateChanMask = true;
 800f688:	2301      	movs	r3, #1
 800f68a:	763b      	strb	r3, [r7, #24]
    adrNext.AdrEnabled = fCtrl.Bits.Adr;
 800f68c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800f690:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800f694:	b2db      	uxtb	r3, r3
 800f696:	2b00      	cmp	r3, #0
 800f698:	bf14      	ite	ne
 800f69a:	2301      	movne	r3, #1
 800f69c:	2300      	moveq	r3, #0
 800f69e:	b2db      	uxtb	r3, r3
 800f6a0:	767b      	strb	r3, [r7, #25]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 800f6a2:	4b39      	ldr	r3, [pc, #228]	@ (800f788 <Send+0x1b0>)
 800f6a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f6a6:	61fb      	str	r3, [r7, #28]
    adrNext.AdrAckLimit = Nvm.MacGroup2.MacParams.AdrAckLimit;
 800f6a8:	4b37      	ldr	r3, [pc, #220]	@ (800f788 <Send+0x1b0>)
 800f6aa:	f8b3 3088 	ldrh.w	r3, [r3, #136]	@ 0x88
 800f6ae:	843b      	strh	r3, [r7, #32]
    adrNext.AdrAckDelay = Nvm.MacGroup2.MacParams.AdrAckDelay;
 800f6b0:	4b35      	ldr	r3, [pc, #212]	@ (800f788 <Send+0x1b0>)
 800f6b2:	f8b3 308a 	ldrh.w	r3, [r3, #138]	@ 0x8a
 800f6b6:	847b      	strh	r3, [r7, #34]	@ 0x22
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800f6b8:	4b33      	ldr	r3, [pc, #204]	@ (800f788 <Send+0x1b0>)
 800f6ba:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 800f6be:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 800f6c2:	4b31      	ldr	r3, [pc, #196]	@ (800f788 <Send+0x1b0>)
 800f6c4:	f993 3038 	ldrsb.w	r3, [r3, #56]	@ 0x38
 800f6c8:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
    adrNext.UplinkDwellTime =  Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800f6cc:	4b2e      	ldr	r3, [pc, #184]	@ (800f788 <Send+0x1b0>)
 800f6ce:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 800f6d2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    adrNext.Region = Nvm.MacGroup2.Region;
 800f6d6:	4b2c      	ldr	r3, [pc, #176]	@ (800f788 <Send+0x1b0>)
 800f6d8:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800f6dc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    adrNext.Version = Nvm.MacGroup2.Version;
 800f6e0:	4b29      	ldr	r3, [pc, #164]	@ (800f788 <Send+0x1b0>)
 800f6e2:	f8d3 3128 	ldr.w	r3, [r3, #296]	@ 0x128
 800f6e6:	617b      	str	r3, [r7, #20]
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &Nvm.MacGroup1.ChannelsDatarate,
 800f6e8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800f6ec:	f107 0014 	add.w	r0, r7, #20
 800f6f0:	4a26      	ldr	r2, [pc, #152]	@ (800f78c <Send+0x1b4>)
 800f6f2:	4927      	ldr	r1, [pc, #156]	@ (800f790 <Send+0x1b8>)
 800f6f4:	f002 fc98 	bl	8012028 <LoRaMacAdrCalcNext>
 800f6f8:	4603      	mov	r3, r0
 800f6fa:	461a      	mov	r2, r3
 800f6fc:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800f700:	f362 1386 	bfi	r3, r2, #6, #1
 800f704:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
                                               &Nvm.MacGroup1.ChannelsTxPower,
                                               &Nvm.MacGroup2.MacParams.ChannelsNbTrans, &adrAckCounter );
#endif /* LORAMAC_VERSION */

    // Prepare the frame
    status = PrepareFrame( macHdr, &fCtrl, fPort, fBuffer, fBufferSize );
 800f708:	7afa      	ldrb	r2, [r7, #11]
 800f70a:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 800f70e:	893b      	ldrh	r3, [r7, #8]
 800f710:	9300      	str	r3, [sp, #0]
 800f712:	687b      	ldr	r3, [r7, #4]
 800f714:	68f8      	ldr	r0, [r7, #12]
 800f716:	f000 fc5d 	bl	800ffd4 <PrepareFrame>
 800f71a:	4603      	mov	r3, r0
 800f71c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    // Validate status
    if( ( status == LORAMAC_STATUS_OK ) || ( status == LORAMAC_STATUS_SKIPPED_APP_DATA ) )
 800f720:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800f724:	2b00      	cmp	r3, #0
 800f726:	d003      	beq.n	800f730 <Send+0x158>
 800f728:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800f72c:	2b0a      	cmp	r3, #10
 800f72e:	d107      	bne.n	800f740 <Send+0x168>
    {
        // Schedule frame, do not allow delayed transmissions
        status = ScheduleTx( allowDelayedTx );
 800f730:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 800f734:	4618      	mov	r0, r3
 800f736:	f000 f961 	bl	800f9fc <ScheduleTx>
 800f73a:	4603      	mov	r3, r0
 800f73c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

    // Post processing
    if( status != LORAMAC_STATUS_OK )
 800f740:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800f744:	2b00      	cmp	r3, #0
 800f746:	d00a      	beq.n	800f75e <Send+0x186>
    {
        // Bad case - restore
        // Store local variables
        Nvm.MacGroup1.ChannelsDatarate = datarate;
 800f748:	4a0f      	ldr	r2, [pc, #60]	@ (800f788 <Send+0x1b0>)
 800f74a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800f74e:	f882 3039 	strb.w	r3, [r2, #57]	@ 0x39
        Nvm.MacGroup1.ChannelsTxPower = txPower;
 800f752:	4a0d      	ldr	r2, [pc, #52]	@ (800f788 <Send+0x1b0>)
 800f754:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800f758:	f882 3038 	strb.w	r3, [r2, #56]	@ 0x38
 800f75c:	e00d      	b.n	800f77a <Send+0x1a2>
    }
    else
    {
        // Good case
        Nvm.MacGroup1.SrvAckRequested = false;
 800f75e:	4b0a      	ldr	r3, [pc, #40]	@ (800f788 <Send+0x1b0>)
 800f760:	2200      	movs	r2, #0
 800f762:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
        Nvm.MacGroup1.AdrAckCounter = adrAckCounter;
 800f766:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f768:	4a07      	ldr	r2, [pc, #28]	@ (800f788 <Send+0x1b0>)
 800f76a:	6293      	str	r3, [r2, #40]	@ 0x28
        // Remove all none sticky MAC commands
        if( LoRaMacCommandsRemoveNoneStickyCmds( ) != LORAMAC_COMMANDS_SUCCESS )
 800f76c:	f002 ff28 	bl	80125c0 <LoRaMacCommandsRemoveNoneStickyCmds>
 800f770:	4603      	mov	r3, r0
 800f772:	2b00      	cmp	r3, #0
 800f774:	d001      	beq.n	800f77a <Send+0x1a2>
        {
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800f776:	2313      	movs	r3, #19
 800f778:	e001      	b.n	800f77e <Send+0x1a6>
        }
    }
    return status;
 800f77a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800f77e:	4618      	mov	r0, r3
 800f780:	3730      	adds	r7, #48	@ 0x30
 800f782:	46bd      	mov	sp, r7
 800f784:	bd80      	pop	{r7, pc}
 800f786:	bf00      	nop
 800f788:	20000b34 	.word	0x20000b34
 800f78c:	20000b6c 	.word	0x20000b6c
 800f790:	20000b6d 	.word	0x20000b6d

0800f794 <SendReJoinReq>:

static LoRaMacStatus_t SendReJoinReq( JoinReqIdentifier_t joinReqType )
{
 800f794:	b580      	push	{r7, lr}
 800f796:	b084      	sub	sp, #16
 800f798:	af00      	add	r7, sp, #0
 800f79a:	4603      	mov	r3, r0
 800f79c:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800f79e:	2300      	movs	r3, #0
 800f7a0:	73bb      	strb	r3, [r7, #14]
    LoRaMacHeader_t macHdr;
    macHdr.Value = 0;
 800f7a2:	2300      	movs	r3, #0
 800f7a4:	733b      	strb	r3, [r7, #12]
    bool allowDelayedTx = true;
 800f7a6:	2301      	movs	r3, #1
 800f7a8:	73fb      	strb	r3, [r7, #15]

    // Setup join/rejoin message
    switch( joinReqType )
 800f7aa:	79fb      	ldrb	r3, [r7, #7]
 800f7ac:	2bff      	cmp	r3, #255	@ 0xff
 800f7ae:	d11f      	bne.n	800f7f0 <SendReJoinReq+0x5c>
            break;
        }
#endif /* LORAMAC_VERSION */
        case JOIN_REQ:
        {
            SwitchClass( CLASS_A );
 800f7b0:	2000      	movs	r0, #0
 800f7b2:	f7ff f931 	bl	800ea18 <SwitchClass>

            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_JOIN_REQUEST;
 800f7b6:	4b15      	ldr	r3, [pc, #84]	@ (800f80c <SendReJoinReq+0x78>)
 800f7b8:	2200      	movs	r2, #0
 800f7ba:	f883 2104 	strb.w	r2, [r3, #260]	@ 0x104
            MacCtx.TxMsg.Message.JoinReq.Buffer = MacCtx.PktBuffer;
 800f7be:	4b13      	ldr	r3, [pc, #76]	@ (800f80c <SendReJoinReq+0x78>)
 800f7c0:	4a13      	ldr	r2, [pc, #76]	@ (800f810 <SendReJoinReq+0x7c>)
 800f7c2:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
            MacCtx.TxMsg.Message.JoinReq.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 800f7c6:	4b11      	ldr	r3, [pc, #68]	@ (800f80c <SendReJoinReq+0x78>)
 800f7c8:	22ff      	movs	r2, #255	@ 0xff
 800f7ca:	f883 210c 	strb.w	r2, [r3, #268]	@ 0x10c

            macHdr.Bits.MType = FRAME_TYPE_JOIN_REQ;
 800f7ce:	7b3b      	ldrb	r3, [r7, #12]
 800f7d0:	f36f 1347 	bfc	r3, #5, #3
 800f7d4:	733b      	strb	r3, [r7, #12]
            MacCtx.TxMsg.Message.JoinReq.MHDR.Value = macHdr.Value;
 800f7d6:	7b3a      	ldrb	r2, [r7, #12]
 800f7d8:	4b0c      	ldr	r3, [pc, #48]	@ (800f80c <SendReJoinReq+0x78>)
 800f7da:	f883 210d 	strb.w	r2, [r3, #269]	@ 0x10d

            SecureElementGetJoinEui( MacCtx.TxMsg.Message.JoinReq.JoinEUI );
 800f7de:	480d      	ldr	r0, [pc, #52]	@ (800f814 <SendReJoinReq+0x80>)
 800f7e0:	f7fc fb3a 	bl	800be58 <SecureElementGetJoinEui>
            SecureElementGetDevEui( MacCtx.TxMsg.Message.JoinReq.DevEUI );
 800f7e4:	480c      	ldr	r0, [pc, #48]	@ (800f818 <SendReJoinReq+0x84>)
 800f7e6:	f7fc fb07 	bl	800bdf8 <SecureElementGetDevEui>

            allowDelayedTx = false;
 800f7ea:	2300      	movs	r3, #0
 800f7ec:	73fb      	strb	r3, [r7, #15]

            break;
 800f7ee:	e002      	b.n	800f7f6 <SendReJoinReq+0x62>
        }
        default:
            status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 800f7f0:	2302      	movs	r3, #2
 800f7f2:	73bb      	strb	r3, [r7, #14]
            break;
 800f7f4:	bf00      	nop
    }

    // Schedule frame
    status = ScheduleTx( allowDelayedTx );
 800f7f6:	7bfb      	ldrb	r3, [r7, #15]
 800f7f8:	4618      	mov	r0, r3
 800f7fa:	f000 f8ff 	bl	800f9fc <ScheduleTx>
 800f7fe:	4603      	mov	r3, r0
 800f800:	73bb      	strb	r3, [r7, #14]
    return status;
 800f802:	7bbb      	ldrb	r3, [r7, #14]
}
 800f804:	4618      	mov	r0, r3
 800f806:	3710      	adds	r7, #16
 800f808:	46bd      	mov	sp, r7
 800f80a:	bd80      	pop	{r7, pc}
 800f80c:	2000062c 	.word	0x2000062c
 800f810:	2000062e 	.word	0x2000062e
 800f814:	2000073a 	.word	0x2000073a
 800f818:	20000742 	.word	0x20000742

0800f81c <CheckForClassBCollision>:

static LoRaMacStatus_t CheckForClassBCollision( void )
{
 800f81c:	b580      	push	{r7, lr}
 800f81e:	af00      	add	r7, sp, #0
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 800f820:	f002 fc71 	bl	8012106 <LoRaMacClassBIsBeaconExpected>
 800f824:	4603      	mov	r3, r0
 800f826:	2b00      	cmp	r3, #0
 800f828:	d001      	beq.n	800f82e <CheckForClassBCollision+0x12>
    {
        return LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME;
 800f82a:	230e      	movs	r3, #14
 800f82c:	e013      	b.n	800f856 <CheckForClassBCollision+0x3a>
    }

    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800f82e:	4b0b      	ldr	r3, [pc, #44]	@ (800f85c <CheckForClassBCollision+0x40>)
 800f830:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800f834:	2b01      	cmp	r3, #1
 800f836:	d10d      	bne.n	800f854 <CheckForClassBCollision+0x38>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 800f838:	f002 fc6c 	bl	8012114 <LoRaMacClassBIsPingExpected>
 800f83c:	4603      	mov	r3, r0
 800f83e:	2b00      	cmp	r3, #0
 800f840:	d001      	beq.n	800f846 <CheckForClassBCollision+0x2a>
        {
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 800f842:	230f      	movs	r3, #15
 800f844:	e007      	b.n	800f856 <CheckForClassBCollision+0x3a>
        }
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 800f846:	f002 fc6c 	bl	8012122 <LoRaMacClassBIsMulticastExpected>
 800f84a:	4603      	mov	r3, r0
 800f84c:	2b00      	cmp	r3, #0
 800f84e:	d001      	beq.n	800f854 <CheckForClassBCollision+0x38>
        {
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 800f850:	230f      	movs	r3, #15
 800f852:	e000      	b.n	800f856 <CheckForClassBCollision+0x3a>
        }
    }
    return LORAMAC_STATUS_OK;
 800f854:	2300      	movs	r3, #0
}
 800f856:	4618      	mov	r0, r3
 800f858:	bd80      	pop	{r7, pc}
 800f85a:	bf00      	nop
 800f85c:	20000b34 	.word	0x20000b34

0800f860 <ComputeRxWindowParameters>:

static void ComputeRxWindowParameters( void )
{
 800f860:	b590      	push	{r4, r7, lr}
 800f862:	b083      	sub	sp, #12
 800f864:	af02      	add	r7, sp, #8
    // Compute Rx1 windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800f866:	4b2d      	ldr	r3, [pc, #180]	@ (800f91c <ComputeRxWindowParameters+0xbc>)
 800f868:	f893 4048 	ldrb.w	r4, [r3, #72]	@ 0x48
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 800f86c:	4b2b      	ldr	r3, [pc, #172]	@ (800f91c <ComputeRxWindowParameters+0xbc>)
 800f86e:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 800f872:	4b2a      	ldr	r3, [pc, #168]	@ (800f91c <ComputeRxWindowParameters+0xbc>)
 800f874:	f893 107d 	ldrb.w	r1, [r3, #125]	@ 0x7d
 800f878:	4b28      	ldr	r3, [pc, #160]	@ (800f91c <ComputeRxWindowParameters+0xbc>)
 800f87a:	f993 2039 	ldrsb.w	r2, [r3, #57]	@ 0x39
                                                          Nvm.MacGroup2.MacParams.DownlinkDwellTime,
                                                          Nvm.MacGroup1.ChannelsDatarate,
                                                          Nvm.MacGroup2.MacParams.Rx1DrOffset ),
 800f87e:	4b27      	ldr	r3, [pc, #156]	@ (800f91c <ComputeRxWindowParameters+0xbc>)
 800f880:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 800f884:	b25b      	sxtb	r3, r3
 800f886:	f004 fd33 	bl	80142f0 <RegionApplyDrOffset>
 800f88a:	4603      	mov	r3, r0
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800f88c:	b259      	sxtb	r1, r3
 800f88e:	4b23      	ldr	r3, [pc, #140]	@ (800f91c <ComputeRxWindowParameters+0xbc>)
 800f890:	f893 2050 	ldrb.w	r2, [r3, #80]	@ 0x50
 800f894:	4b21      	ldr	r3, [pc, #132]	@ (800f91c <ComputeRxWindowParameters+0xbc>)
 800f896:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f898:	4821      	ldr	r0, [pc, #132]	@ (800f920 <ComputeRxWindowParameters+0xc0>)
 800f89a:	9000      	str	r0, [sp, #0]
 800f89c:	4620      	mov	r0, r4
 800f89e:	f004 fc37 	bl	8014110 <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindow1Config );
    // Compute Rx2 windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800f8a2:	4b1e      	ldr	r3, [pc, #120]	@ (800f91c <ComputeRxWindowParameters+0xbc>)
 800f8a4:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
                                     Nvm.MacGroup2.MacParams.Rx2Channel.Datarate,
 800f8a8:	4b1c      	ldr	r3, [pc, #112]	@ (800f91c <ComputeRxWindowParameters+0xbc>)
 800f8aa:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800f8ae:	b259      	sxtb	r1, r3
 800f8b0:	4b1a      	ldr	r3, [pc, #104]	@ (800f91c <ComputeRxWindowParameters+0xbc>)
 800f8b2:	f893 2050 	ldrb.w	r2, [r3, #80]	@ 0x50
 800f8b6:	4b19      	ldr	r3, [pc, #100]	@ (800f91c <ComputeRxWindowParameters+0xbc>)
 800f8b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f8ba:	4c1a      	ldr	r4, [pc, #104]	@ (800f924 <ComputeRxWindowParameters+0xc4>)
 800f8bc:	9400      	str	r4, [sp, #0]
 800f8be:	f004 fc27 	bl	8014110 <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindow2Config );

    // Default setup, in case the device joined
    MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.ReceiveDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 800f8c2:	4b16      	ldr	r3, [pc, #88]	@ (800f91c <ComputeRxWindowParameters+0xbc>)
 800f8c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f8c6:	4a18      	ldr	r2, [pc, #96]	@ (800f928 <ComputeRxWindowParameters+0xc8>)
 800f8c8:	f8d2 23c4 	ldr.w	r2, [r2, #964]	@ 0x3c4
 800f8cc:	4413      	add	r3, r2
 800f8ce:	4a16      	ldr	r2, [pc, #88]	@ (800f928 <ComputeRxWindowParameters+0xc8>)
 800f8d0:	f8c2 33b0 	str.w	r3, [r2, #944]	@ 0x3b0
    MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.ReceiveDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 800f8d4:	4b11      	ldr	r3, [pc, #68]	@ (800f91c <ComputeRxWindowParameters+0xbc>)
 800f8d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800f8d8:	4a13      	ldr	r2, [pc, #76]	@ (800f928 <ComputeRxWindowParameters+0xc8>)
 800f8da:	f8d2 23d8 	ldr.w	r2, [r2, #984]	@ 0x3d8
 800f8de:	4413      	add	r3, r2
 800f8e0:	4a11      	ldr	r2, [pc, #68]	@ (800f928 <ComputeRxWindowParameters+0xc8>)
 800f8e2:	f8c2 33b4 	str.w	r3, [r2, #948]	@ 0x3b4

    if( MacCtx.TxMsg.Type != LORAMAC_MSG_TYPE_DATA )
 800f8e6:	4b10      	ldr	r3, [pc, #64]	@ (800f928 <ComputeRxWindowParameters+0xc8>)
 800f8e8:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 800f8ec:	2b04      	cmp	r3, #4
 800f8ee:	d011      	beq.n	800f914 <ComputeRxWindowParameters+0xb4>
    {
        MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 800f8f0:	4b0a      	ldr	r3, [pc, #40]	@ (800f91c <ComputeRxWindowParameters+0xbc>)
 800f8f2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800f8f4:	4a0c      	ldr	r2, [pc, #48]	@ (800f928 <ComputeRxWindowParameters+0xc8>)
 800f8f6:	f8d2 23c4 	ldr.w	r2, [r2, #964]	@ 0x3c4
 800f8fa:	4413      	add	r3, r2
 800f8fc:	4a0a      	ldr	r2, [pc, #40]	@ (800f928 <ComputeRxWindowParameters+0xc8>)
 800f8fe:	f8c2 33b0 	str.w	r3, [r2, #944]	@ 0x3b0
        MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 800f902:	4b06      	ldr	r3, [pc, #24]	@ (800f91c <ComputeRxWindowParameters+0xbc>)
 800f904:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800f906:	4a08      	ldr	r2, [pc, #32]	@ (800f928 <ComputeRxWindowParameters+0xc8>)
 800f908:	f8d2 23d8 	ldr.w	r2, [r2, #984]	@ 0x3d8
 800f90c:	4413      	add	r3, r2
 800f90e:	4a06      	ldr	r2, [pc, #24]	@ (800f928 <ComputeRxWindowParameters+0xc8>)
 800f910:	f8c2 33b4 	str.w	r3, [r2, #948]	@ 0x3b4
    }
}
 800f914:	bf00      	nop
 800f916:	3704      	adds	r7, #4
 800f918:	46bd      	mov	sp, r7
 800f91a:	bd90      	pop	{r4, r7, pc}
 800f91c:	20000b34 	.word	0x20000b34
 800f920:	200009e4 	.word	0x200009e4
 800f924:	200009f8 	.word	0x200009f8
 800f928:	2000062c 	.word	0x2000062c

0800f92c <VerifyTxFrame>:

static LoRaMacStatus_t VerifyTxFrame( void )
{
 800f92c:	b580      	push	{r7, lr}
 800f92e:	b082      	sub	sp, #8
 800f930:	af00      	add	r7, sp, #0
    size_t macCmdsSize = 0;
 800f932:	2300      	movs	r3, #0
 800f934:	607b      	str	r3, [r7, #4]

    if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 800f936:	4b13      	ldr	r3, [pc, #76]	@ (800f984 <VerifyTxFrame+0x58>)
 800f938:	f893 312c 	ldrb.w	r3, [r3, #300]	@ 0x12c
 800f93c:	2b00      	cmp	r3, #0
 800f93e:	d01b      	beq.n	800f978 <VerifyTxFrame+0x4c>
    {
        if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 800f940:	1d3b      	adds	r3, r7, #4
 800f942:	4618      	mov	r0, r3
 800f944:	f002 fe8c 	bl	8012660 <LoRaMacCommandsGetSizeSerializedCmds>
 800f948:	4603      	mov	r3, r0
 800f94a:	2b00      	cmp	r3, #0
 800f94c:	d001      	beq.n	800f952 <VerifyTxFrame+0x26>
        {
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800f94e:	2313      	movs	r3, #19
 800f950:	e013      	b.n	800f97a <VerifyTxFrame+0x4e>
        }

        if( ValidatePayloadLength( MacCtx.AppDataSize, Nvm.MacGroup1.ChannelsDatarate, macCmdsSize ) == false )
 800f952:	4b0d      	ldr	r3, [pc, #52]	@ (800f988 <VerifyTxFrame+0x5c>)
 800f954:	f893 3237 	ldrb.w	r3, [r3, #567]	@ 0x237
 800f958:	4a0a      	ldr	r2, [pc, #40]	@ (800f984 <VerifyTxFrame+0x58>)
 800f95a:	f992 1039 	ldrsb.w	r1, [r2, #57]	@ 0x39
 800f95e:	687a      	ldr	r2, [r7, #4]
 800f960:	b2d2      	uxtb	r2, r2
 800f962:	4618      	mov	r0, r3
 800f964:	f7ff f968 	bl	800ec38 <ValidatePayloadLength>
 800f968:	4603      	mov	r3, r0
 800f96a:	f083 0301 	eor.w	r3, r3, #1
 800f96e:	b2db      	uxtb	r3, r3
 800f970:	2b00      	cmp	r3, #0
 800f972:	d001      	beq.n	800f978 <VerifyTxFrame+0x4c>
        {
            return LORAMAC_STATUS_LENGTH_ERROR;
 800f974:	2308      	movs	r3, #8
 800f976:	e000      	b.n	800f97a <VerifyTxFrame+0x4e>
        }
    }
    return LORAMAC_STATUS_OK;
 800f978:	2300      	movs	r3, #0
}
 800f97a:	4618      	mov	r0, r3
 800f97c:	3708      	adds	r7, #8
 800f97e:	46bd      	mov	sp, r7
 800f980:	bd80      	pop	{r7, pc}
 800f982:	bf00      	nop
 800f984:	20000b34 	.word	0x20000b34
 800f988:	2000062c 	.word	0x2000062c

0800f98c <SerializeTxFrame>:

static LoRaMacStatus_t SerializeTxFrame( void )
{
 800f98c:	b580      	push	{r7, lr}
 800f98e:	b082      	sub	sp, #8
 800f990:	af00      	add	r7, sp, #0
    LoRaMacSerializerStatus_t serializeStatus;

    switch( MacCtx.TxMsg.Type )
 800f992:	4b18      	ldr	r3, [pc, #96]	@ (800f9f4 <SerializeTxFrame+0x68>)
 800f994:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 800f998:	2b00      	cmp	r3, #0
 800f99a:	d002      	beq.n	800f9a2 <SerializeTxFrame+0x16>
 800f99c:	2b04      	cmp	r3, #4
 800f99e:	d011      	beq.n	800f9c4 <SerializeTxFrame+0x38>
 800f9a0:	e021      	b.n	800f9e6 <SerializeTxFrame+0x5a>
    {
        case LORAMAC_MSG_TYPE_JOIN_REQUEST:
            serializeStatus = LoRaMacSerializerJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 800f9a2:	4815      	ldr	r0, [pc, #84]	@ (800f9f8 <SerializeTxFrame+0x6c>)
 800f9a4:	f004 f9b6 	bl	8013d14 <LoRaMacSerializerJoinRequest>
 800f9a8:	4603      	mov	r3, r0
 800f9aa:	71fb      	strb	r3, [r7, #7]
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 800f9ac:	79fb      	ldrb	r3, [r7, #7]
 800f9ae:	2b00      	cmp	r3, #0
 800f9b0:	d001      	beq.n	800f9b6 <SerializeTxFrame+0x2a>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 800f9b2:	2311      	movs	r3, #17
 800f9b4:	e01a      	b.n	800f9ec <SerializeTxFrame+0x60>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 800f9b6:	4b0f      	ldr	r3, [pc, #60]	@ (800f9f4 <SerializeTxFrame+0x68>)
 800f9b8:	f893 310c 	ldrb.w	r3, [r3, #268]	@ 0x10c
 800f9bc:	461a      	mov	r2, r3
 800f9be:	4b0d      	ldr	r3, [pc, #52]	@ (800f9f4 <SerializeTxFrame+0x68>)
 800f9c0:	801a      	strh	r2, [r3, #0]
            break;
 800f9c2:	e012      	b.n	800f9ea <SerializeTxFrame+0x5e>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.ReJoin0or2.BufSize;
            break;
#endif /* LORAMAC_VERSION */
        case LORAMAC_MSG_TYPE_DATA:
            serializeStatus = LoRaMacSerializerData( &MacCtx.TxMsg.Message.Data );
 800f9c4:	480c      	ldr	r0, [pc, #48]	@ (800f9f8 <SerializeTxFrame+0x6c>)
 800f9c6:	f004 fa27 	bl	8013e18 <LoRaMacSerializerData>
 800f9ca:	4603      	mov	r3, r0
 800f9cc:	71fb      	strb	r3, [r7, #7]
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 800f9ce:	79fb      	ldrb	r3, [r7, #7]
 800f9d0:	2b00      	cmp	r3, #0
 800f9d2:	d001      	beq.n	800f9d8 <SerializeTxFrame+0x4c>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 800f9d4:	2311      	movs	r3, #17
 800f9d6:	e009      	b.n	800f9ec <SerializeTxFrame+0x60>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 800f9d8:	4b06      	ldr	r3, [pc, #24]	@ (800f9f4 <SerializeTxFrame+0x68>)
 800f9da:	f893 310c 	ldrb.w	r3, [r3, #268]	@ 0x10c
 800f9de:	461a      	mov	r2, r3
 800f9e0:	4b04      	ldr	r3, [pc, #16]	@ (800f9f4 <SerializeTxFrame+0x68>)
 800f9e2:	801a      	strh	r2, [r3, #0]
            break;
 800f9e4:	e001      	b.n	800f9ea <SerializeTxFrame+0x5e>
        case LORAMAC_MSG_TYPE_JOIN_ACCEPT:
        case LORAMAC_MSG_TYPE_UNDEF:
        default:
            return LORAMAC_STATUS_PARAMETER_INVALID;
 800f9e6:	2303      	movs	r3, #3
 800f9e8:	e000      	b.n	800f9ec <SerializeTxFrame+0x60>
    }
    return LORAMAC_STATUS_OK;
 800f9ea:	2300      	movs	r3, #0
}
 800f9ec:	4618      	mov	r0, r3
 800f9ee:	3708      	adds	r7, #8
 800f9f0:	46bd      	mov	sp, r7
 800f9f2:	bd80      	pop	{r7, pc}
 800f9f4:	2000062c 	.word	0x2000062c
 800f9f8:	20000734 	.word	0x20000734

0800f9fc <ScheduleTx>:

static LoRaMacStatus_t ScheduleTx( bool allowDelayedTx )
{
 800f9fc:	b580      	push	{r7, lr}
 800f9fe:	b090      	sub	sp, #64	@ 0x40
 800fa00:	af02      	add	r7, sp, #8
 800fa02:	4603      	mov	r3, r0
 800fa04:	73fb      	strb	r3, [r7, #15]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 800fa06:	2303      	movs	r3, #3
 800fa08:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    NextChanParams_t nextChan;

    // Check class b collisions
    status = CheckForClassBCollision( );
 800fa0c:	f7ff ff06 	bl	800f81c <CheckForClassBCollision>
 800fa10:	4603      	mov	r3, r0
 800fa12:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    if( status != LORAMAC_STATUS_OK )
 800fa16:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800fa1a:	2b00      	cmp	r3, #0
 800fa1c:	d002      	beq.n	800fa24 <ScheduleTx+0x28>
    {
        return status;
 800fa1e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800fa22:	e092      	b.n	800fb4a <ScheduleTx+0x14e>
    }

    // Update back-off
    CalculateBackOff( );
 800fa24:	f000 f8fe 	bl	800fc24 <CalculateBackOff>

    // Serialize frame
    status = SerializeTxFrame( );
 800fa28:	f7ff ffb0 	bl	800f98c <SerializeTxFrame>
 800fa2c:	4603      	mov	r3, r0
 800fa2e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    if( status != LORAMAC_STATUS_OK )
 800fa32:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800fa36:	2b00      	cmp	r3, #0
 800fa38:	d002      	beq.n	800fa40 <ScheduleTx+0x44>
    {
        return status;
 800fa3a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800fa3e:	e084      	b.n	800fb4a <ScheduleTx+0x14e>
    }

    nextChan.AggrTimeOff = Nvm.MacGroup1.AggregatedTimeOff;
 800fa40:	4b44      	ldr	r3, [pc, #272]	@ (800fb54 <ScheduleTx+0x158>)
 800fa42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fa44:	617b      	str	r3, [r7, #20]
    nextChan.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800fa46:	4b43      	ldr	r3, [pc, #268]	@ (800fb54 <ScheduleTx+0x158>)
 800fa48:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 800fa4c:	773b      	strb	r3, [r7, #28]
    nextChan.DutyCycleEnabled = Nvm.MacGroup2.DutyCycleOn;
 800fa4e:	4b41      	ldr	r3, [pc, #260]	@ (800fb54 <ScheduleTx+0x158>)
 800fa50:	f893 311c 	ldrb.w	r3, [r3, #284]	@ 0x11c
 800fa54:	77bb      	strb	r3, [r7, #30]
    nextChan.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 800fa56:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800fa5a:	4618      	mov	r0, r3
 800fa5c:	f00a fa72 	bl	8019f44 <SysTimeGetMcuTime>
 800fa60:	4638      	mov	r0, r7
 800fa62:	4b3c      	ldr	r3, [pc, #240]	@ (800fb54 <ScheduleTx+0x158>)
 800fa64:	f8d3 2124 	ldr.w	r2, [r3, #292]	@ 0x124
 800fa68:	9200      	str	r2, [sp, #0]
 800fa6a:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 800fa6e:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 800fa72:	ca06      	ldmia	r2, {r1, r2}
 800fa74:	f00a f9c7 	bl	8019e06 <SysTimeSub>
 800fa78:	f107 0320 	add.w	r3, r7, #32
 800fa7c:	463a      	mov	r2, r7
 800fa7e:	e892 0003 	ldmia.w	r2, {r0, r1}
 800fa82:	e883 0003 	stmia.w	r3, {r0, r1}
    nextChan.LastAggrTx = Nvm.MacGroup1.LastTxDoneTime;
 800fa86:	4b33      	ldr	r3, [pc, #204]	@ (800fb54 <ScheduleTx+0x158>)
 800fa88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fa8a:	61bb      	str	r3, [r7, #24]
    nextChan.LastTxIsJoinRequest = false;
 800fa8c:	2300      	movs	r3, #0
 800fa8e:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    nextChan.Joined = true;
 800fa92:	2301      	movs	r3, #1
 800fa94:	777b      	strb	r3, [r7, #29]
    nextChan.PktLen = MacCtx.PktBufferLen;
 800fa96:	4b30      	ldr	r3, [pc, #192]	@ (800fb58 <ScheduleTx+0x15c>)
 800fa98:	881b      	ldrh	r3, [r3, #0]
 800fa9a:	857b      	strh	r3, [r7, #42]	@ 0x2a

    // Setup the parameters based on the join status
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800fa9c:	4b2d      	ldr	r3, [pc, #180]	@ (800fb54 <ScheduleTx+0x158>)
 800fa9e:	f893 312c 	ldrb.w	r3, [r3, #300]	@ 0x12c
 800faa2:	2b00      	cmp	r3, #0
 800faa4:	d104      	bne.n	800fab0 <ScheduleTx+0xb4>
    {
        nextChan.LastTxIsJoinRequest = true;
 800faa6:	2301      	movs	r3, #1
 800faa8:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
        nextChan.Joined = false;
 800faac:	2300      	movs	r3, #0
 800faae:	777b      	strb	r3, [r7, #29]
    }

    // Select channel
    status = RegionNextChannel( Nvm.MacGroup2.Region, &nextChan, &MacCtx.Channel, &MacCtx.DutyCycleWaitTime, &Nvm.MacGroup1.AggregatedTimeOff );
 800fab0:	4b28      	ldr	r3, [pc, #160]	@ (800fb54 <ScheduleTx+0x158>)
 800fab2:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 800fab6:	f107 0114 	add.w	r1, r7, #20
 800faba:	4b28      	ldr	r3, [pc, #160]	@ (800fb5c <ScheduleTx+0x160>)
 800fabc:	9300      	str	r3, [sp, #0]
 800fabe:	4b28      	ldr	r3, [pc, #160]	@ (800fb60 <ScheduleTx+0x164>)
 800fac0:	4a28      	ldr	r2, [pc, #160]	@ (800fb64 <ScheduleTx+0x168>)
 800fac2:	f004 fbeb 	bl	801429c <RegionNextChannel>
 800fac6:	4603      	mov	r3, r0
 800fac8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

    if( status != LORAMAC_STATUS_OK )
 800facc:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800fad0:	2b00      	cmp	r3, #0
 800fad2:	d025      	beq.n	800fb20 <ScheduleTx+0x124>
    {
        if( status == LORAMAC_STATUS_DUTYCYCLE_RESTRICTED )
 800fad4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800fad8:	2b0b      	cmp	r3, #11
 800fada:	d11e      	bne.n	800fb1a <ScheduleTx+0x11e>
        {
            if( MacCtx.DutyCycleWaitTime != 0 )
 800fadc:	4b1e      	ldr	r3, [pc, #120]	@ (800fb58 <ScheduleTx+0x15c>)
 800fade:	f8d3 3484 	ldr.w	r3, [r3, #1156]	@ 0x484
 800fae2:	2b00      	cmp	r3, #0
 800fae4:	d01c      	beq.n	800fb20 <ScheduleTx+0x124>
            {
                if( allowDelayedTx == true )
 800fae6:	7bfb      	ldrb	r3, [r7, #15]
 800fae8:	2b00      	cmp	r3, #0
 800faea:	d013      	beq.n	800fb14 <ScheduleTx+0x118>
                {
                    // Allow delayed transmissions. We have to allow it in case
                    // the MAC must retransmit a frame with the frame repetitions
                    MacCtx.MacState |= LORAMAC_TX_DELAYED;
 800faec:	4b1a      	ldr	r3, [pc, #104]	@ (800fb58 <ScheduleTx+0x15c>)
 800faee:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800faf2:	f043 0320 	orr.w	r3, r3, #32
 800faf6:	4a18      	ldr	r2, [pc, #96]	@ (800fb58 <ScheduleTx+0x15c>)
 800faf8:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
                    TimerSetValue( &MacCtx.TxDelayedTimer, MacCtx.DutyCycleWaitTime );
 800fafc:	4b16      	ldr	r3, [pc, #88]	@ (800fb58 <ScheduleTx+0x15c>)
 800fafe:	f8d3 3484 	ldr.w	r3, [r3, #1156]	@ 0x484
 800fb02:	4619      	mov	r1, r3
 800fb04:	4818      	ldr	r0, [pc, #96]	@ (800fb68 <ScheduleTx+0x16c>)
 800fb06:	f00a ffbb 	bl	801aa80 <UTIL_TIMER_SetPeriod>
                    TimerStart( &MacCtx.TxDelayedTimer );
 800fb0a:	4817      	ldr	r0, [pc, #92]	@ (800fb68 <ScheduleTx+0x16c>)
 800fb0c:	f00a feda 	bl	801a8c4 <UTIL_TIMER_Start>
                    return LORAMAC_STATUS_OK;
 800fb10:	2300      	movs	r3, #0
 800fb12:	e01a      	b.n	800fb4a <ScheduleTx+0x14e>
                }
                // Need to delay, but allowDelayedTx does not allow it
                return status;
 800fb14:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800fb18:	e017      	b.n	800fb4a <ScheduleTx+0x14e>
            }
        }
        else
        {// State where the MAC cannot send a frame
            return status;
 800fb1a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800fb1e:	e014      	b.n	800fb4a <ScheduleTx+0x14e>
        }
    }

    // Compute window parameters, offsets, rx symbols, system errors etc.
    ComputeRxWindowParameters( );
 800fb20:	f7ff fe9e 	bl	800f860 <ComputeRxWindowParameters>

    // Verify TX frame
    status = VerifyTxFrame( );
 800fb24:	f7ff ff02 	bl	800f92c <VerifyTxFrame>
 800fb28:	4603      	mov	r3, r0
 800fb2a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    if( status != LORAMAC_STATUS_OK )
 800fb2e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800fb32:	2b00      	cmp	r3, #0
 800fb34:	d002      	beq.n	800fb3c <ScheduleTx+0x140>
    {
        return status;
 800fb36:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800fb3a:	e006      	b.n	800fb4a <ScheduleTx+0x14e>
    }

    // Try to send now
    return SendFrameOnChannel( MacCtx.Channel );
 800fb3c:	4b06      	ldr	r3, [pc, #24]	@ (800fb58 <ScheduleTx+0x15c>)
 800fb3e:	f893 3411 	ldrb.w	r3, [r3, #1041]	@ 0x411
 800fb42:	4618      	mov	r0, r3
 800fb44:	f000 fb60 	bl	8010208 <SendFrameOnChannel>
 800fb48:	4603      	mov	r3, r0
}
 800fb4a:	4618      	mov	r0, r3
 800fb4c:	3738      	adds	r7, #56	@ 0x38
 800fb4e:	46bd      	mov	sp, r7
 800fb50:	bd80      	pop	{r7, pc}
 800fb52:	bf00      	nop
 800fb54:	20000b34 	.word	0x20000b34
 800fb58:	2000062c 	.word	0x2000062c
 800fb5c:	20000b64 	.word	0x20000b64
 800fb60:	20000ab0 	.word	0x20000ab0
 800fb64:	20000a3d 	.word	0x20000a3d
 800fb68:	20000994 	.word	0x20000994

0800fb6c <SecureFrame>:

static LoRaMacStatus_t SecureFrame( uint8_t txDr, uint8_t txCh )
{
 800fb6c:	b580      	push	{r7, lr}
 800fb6e:	b084      	sub	sp, #16
 800fb70:	af00      	add	r7, sp, #0
 800fb72:	4603      	mov	r3, r0
 800fb74:	460a      	mov	r2, r1
 800fb76:	71fb      	strb	r3, [r7, #7]
 800fb78:	4613      	mov	r3, r2
 800fb7a:	71bb      	strb	r3, [r7, #6]
    LoRaMacCryptoStatus_t macCryptoStatus = LORAMAC_CRYPTO_ERROR;
 800fb7c:	2313      	movs	r3, #19
 800fb7e:	73fb      	strb	r3, [r7, #15]
    uint32_t fCntUp = 0;
 800fb80:	2300      	movs	r3, #0
 800fb82:	60bb      	str	r3, [r7, #8]

    switch( MacCtx.TxMsg.Type )
 800fb84:	4b25      	ldr	r3, [pc, #148]	@ (800fc1c <SecureFrame+0xb0>)
 800fb86:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 800fb8a:	2b00      	cmp	r3, #0
 800fb8c:	d002      	beq.n	800fb94 <SecureFrame+0x28>
 800fb8e:	2b04      	cmp	r3, #4
 800fb90:	d011      	beq.n	800fbb6 <SecureFrame+0x4a>
 800fb92:	e03b      	b.n	800fc0c <SecureFrame+0xa0>
    {
        case LORAMAC_MSG_TYPE_JOIN_REQUEST:
            macCryptoStatus = LoRaMacCryptoPrepareJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 800fb94:	4822      	ldr	r0, [pc, #136]	@ (800fc20 <SecureFrame+0xb4>)
 800fb96:	f003 fc87 	bl	80134a8 <LoRaMacCryptoPrepareJoinRequest>
 800fb9a:	4603      	mov	r3, r0
 800fb9c:	73fb      	strb	r3, [r7, #15]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 800fb9e:	7bfb      	ldrb	r3, [r7, #15]
 800fba0:	2b00      	cmp	r3, #0
 800fba2:	d001      	beq.n	800fba8 <SecureFrame+0x3c>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 800fba4:	2311      	movs	r3, #17
 800fba6:	e034      	b.n	800fc12 <SecureFrame+0xa6>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 800fba8:	4b1c      	ldr	r3, [pc, #112]	@ (800fc1c <SecureFrame+0xb0>)
 800fbaa:	f893 310c 	ldrb.w	r3, [r3, #268]	@ 0x10c
 800fbae:	461a      	mov	r2, r3
 800fbb0:	4b1a      	ldr	r3, [pc, #104]	@ (800fc1c <SecureFrame+0xb0>)
 800fbb2:	801a      	strh	r2, [r3, #0]
            break;
 800fbb4:	e02c      	b.n	800fc10 <SecureFrame+0xa4>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.ReJoin0or2.BufSize;
            break;
#endif /* LORAMAC_VERSION */
        case LORAMAC_MSG_TYPE_DATA:

            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 800fbb6:	f107 0308 	add.w	r3, r7, #8
 800fbba:	4618      	mov	r0, r3
 800fbbc:	f003 fb84 	bl	80132c8 <LoRaMacCryptoGetFCntUp>
 800fbc0:	4603      	mov	r3, r0
 800fbc2:	2b00      	cmp	r3, #0
 800fbc4:	d001      	beq.n	800fbca <SecureFrame+0x5e>
            {
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 800fbc6:	2312      	movs	r3, #18
 800fbc8:	e023      	b.n	800fc12 <SecureFrame+0xa6>
            }

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            if( ( MacCtx.ChannelsNbTransCounter >= 1 ) || ( MacCtx.AckTimeoutRetriesCounter > 1 ) )
 800fbca:	4b14      	ldr	r3, [pc, #80]	@ (800fc1c <SecureFrame+0xb0>)
 800fbcc:	f893 340c 	ldrb.w	r3, [r3, #1036]	@ 0x40c
 800fbd0:	2b00      	cmp	r3, #0
 800fbd2:	d104      	bne.n	800fbde <SecureFrame+0x72>
 800fbd4:	4b11      	ldr	r3, [pc, #68]	@ (800fc1c <SecureFrame+0xb0>)
 800fbd6:	f893 340e 	ldrb.w	r3, [r3, #1038]	@ 0x40e
 800fbda:	2b01      	cmp	r3, #1
 800fbdc:	d902      	bls.n	800fbe4 <SecureFrame+0x78>
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            if( MacCtx.ChannelsNbTransCounter >= 1 )
#endif /* LORAMAC_VERSION */
            {
                fCntUp -= 1;
 800fbde:	68bb      	ldr	r3, [r7, #8]
 800fbe0:	3b01      	subs	r3, #1
 800fbe2:	60bb      	str	r3, [r7, #8]
            }

            macCryptoStatus = LoRaMacCryptoSecureMessage( fCntUp, txDr, txCh, &MacCtx.TxMsg.Message.Data );
 800fbe4:	68b8      	ldr	r0, [r7, #8]
 800fbe6:	79ba      	ldrb	r2, [r7, #6]
 800fbe8:	79f9      	ldrb	r1, [r7, #7]
 800fbea:	4b0d      	ldr	r3, [pc, #52]	@ (800fc20 <SecureFrame+0xb4>)
 800fbec:	f003 fd8a 	bl	8013704 <LoRaMacCryptoSecureMessage>
 800fbf0:	4603      	mov	r3, r0
 800fbf2:	73fb      	strb	r3, [r7, #15]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 800fbf4:	7bfb      	ldrb	r3, [r7, #15]
 800fbf6:	2b00      	cmp	r3, #0
 800fbf8:	d001      	beq.n	800fbfe <SecureFrame+0x92>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 800fbfa:	2311      	movs	r3, #17
 800fbfc:	e009      	b.n	800fc12 <SecureFrame+0xa6>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 800fbfe:	4b07      	ldr	r3, [pc, #28]	@ (800fc1c <SecureFrame+0xb0>)
 800fc00:	f893 310c 	ldrb.w	r3, [r3, #268]	@ 0x10c
 800fc04:	461a      	mov	r2, r3
 800fc06:	4b05      	ldr	r3, [pc, #20]	@ (800fc1c <SecureFrame+0xb0>)
 800fc08:	801a      	strh	r2, [r3, #0]
            break;
 800fc0a:	e001      	b.n	800fc10 <SecureFrame+0xa4>
        case LORAMAC_MSG_TYPE_JOIN_ACCEPT:
        case LORAMAC_MSG_TYPE_UNDEF:
        default:
            return LORAMAC_STATUS_PARAMETER_INVALID;
 800fc0c:	2303      	movs	r3, #3
 800fc0e:	e000      	b.n	800fc12 <SecureFrame+0xa6>
    }
    return LORAMAC_STATUS_OK;
 800fc10:	2300      	movs	r3, #0
}
 800fc12:	4618      	mov	r0, r3
 800fc14:	3710      	adds	r7, #16
 800fc16:	46bd      	mov	sp, r7
 800fc18:	bd80      	pop	{r7, pc}
 800fc1a:	bf00      	nop
 800fc1c:	2000062c 	.word	0x2000062c
 800fc20:	20000734 	.word	0x20000734

0800fc24 <CalculateBackOff>:

static void CalculateBackOff( void )
{
 800fc24:	b480      	push	{r7}
 800fc26:	af00      	add	r7, sp, #0
    // Make sure that the calculation of the backoff time for the aggregated time off will only be done in
    // case the value is zero. It will be set to zero in the function RegionNextChannel.
    if( Nvm.MacGroup1.AggregatedTimeOff == 0 )
 800fc28:	4b09      	ldr	r3, [pc, #36]	@ (800fc50 <CalculateBackOff+0x2c>)
 800fc2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fc2c:	2b00      	cmp	r3, #0
 800fc2e:	d10a      	bne.n	800fc46 <CalculateBackOff+0x22>
    {
        // Update aggregated time-off. This must be an assignment and no incremental
        // update as we do only calculate the time-off based on the last transmission
        Nvm.MacGroup1.AggregatedTimeOff = ( MacCtx.TxTimeOnAir * Nvm.MacGroup2.AggregatedDCycle - MacCtx.TxTimeOnAir );
 800fc30:	4b07      	ldr	r3, [pc, #28]	@ (800fc50 <CalculateBackOff+0x2c>)
 800fc32:	f8b3 311e 	ldrh.w	r3, [r3, #286]	@ 0x11e
 800fc36:	3b01      	subs	r3, #1
 800fc38:	4a06      	ldr	r2, [pc, #24]	@ (800fc54 <CalculateBackOff+0x30>)
 800fc3a:	f8d2 2414 	ldr.w	r2, [r2, #1044]	@ 0x414
 800fc3e:	fb02 f303 	mul.w	r3, r2, r3
 800fc42:	4a03      	ldr	r2, [pc, #12]	@ (800fc50 <CalculateBackOff+0x2c>)
 800fc44:	6313      	str	r3, [r2, #48]	@ 0x30
    }
}
 800fc46:	bf00      	nop
 800fc48:	46bd      	mov	sp, r7
 800fc4a:	bc80      	pop	{r7}
 800fc4c:	4770      	bx	lr
 800fc4e:	bf00      	nop
 800fc50:	20000b34 	.word	0x20000b34
 800fc54:	2000062c 	.word	0x2000062c

0800fc58 <RemoveMacCommands>:

static void RemoveMacCommands( LoRaMacRxSlot_t rxSlot, LoRaMacFrameCtrl_t fCtrl, Mcps_t request )
{
 800fc58:	b580      	push	{r7, lr}
 800fc5a:	b082      	sub	sp, #8
 800fc5c:	af00      	add	r7, sp, #0
 800fc5e:	4603      	mov	r3, r0
 800fc60:	7139      	strb	r1, [r7, #4]
 800fc62:	71fb      	strb	r3, [r7, #7]
 800fc64:	4613      	mov	r3, r2
 800fc66:	71bb      	strb	r3, [r7, #6]
    if( rxSlot == RX_SLOT_WIN_1 || rxSlot == RX_SLOT_WIN_2  )
 800fc68:	79fb      	ldrb	r3, [r7, #7]
 800fc6a:	2b00      	cmp	r3, #0
 800fc6c:	d002      	beq.n	800fc74 <RemoveMacCommands+0x1c>
 800fc6e:	79fb      	ldrb	r3, [r7, #7]
 800fc70:	2b01      	cmp	r3, #1
 800fc72:	d10d      	bne.n	800fc90 <RemoveMacCommands+0x38>
    {
        // Remove all sticky MAC commands answers since we can assume
        // that they have been received by the server.
        if( request == MCPS_CONFIRMED )
 800fc74:	79bb      	ldrb	r3, [r7, #6]
 800fc76:	2b01      	cmp	r3, #1
 800fc78:	d108      	bne.n	800fc8c <RemoveMacCommands+0x34>
        {
            if( fCtrl.Bits.Ack == 1 )
 800fc7a:	793b      	ldrb	r3, [r7, #4]
 800fc7c:	f003 0320 	and.w	r3, r3, #32
 800fc80:	b2db      	uxtb	r3, r3
 800fc82:	2b00      	cmp	r3, #0
 800fc84:	d004      	beq.n	800fc90 <RemoveMacCommands+0x38>
            {  // For confirmed uplinks only if we have received an ACK.
                LoRaMacCommandsRemoveStickyAnsCmds( );
 800fc86:	f002 fcbf 	bl	8012608 <LoRaMacCommandsRemoveStickyAnsCmds>
        else
        {
            LoRaMacCommandsRemoveStickyAnsCmds( );
        }
    }
}
 800fc8a:	e001      	b.n	800fc90 <RemoveMacCommands+0x38>
            LoRaMacCommandsRemoveStickyAnsCmds( );
 800fc8c:	f002 fcbc 	bl	8012608 <LoRaMacCommandsRemoveStickyAnsCmds>
}
 800fc90:	bf00      	nop
 800fc92:	3708      	adds	r7, #8
 800fc94:	46bd      	mov	sp, r7
 800fc96:	bd80      	pop	{r7, pc}

0800fc98 <ResetMacParameters>:

static void ResetMacParameters( bool isRejoin )
{
 800fc98:	b5b0      	push	{r4, r5, r7, lr}
 800fc9a:	b090      	sub	sp, #64	@ 0x40
 800fc9c:	af00      	add	r7, sp, #0
 800fc9e:	4603      	mov	r3, r0
 800fca0:	71fb      	strb	r3, [r7, #7]
    LoRaMacClassBCallback_t classBCallbacks;
    LoRaMacClassBParams_t classBParams;

    if( isRejoin == false )
 800fca2:	79fb      	ldrb	r3, [r7, #7]
 800fca4:	f083 0301 	eor.w	r3, r3, #1
 800fca8:	b2db      	uxtb	r3, r3
 800fcaa:	2b00      	cmp	r3, #0
 800fcac:	d003      	beq.n	800fcb6 <ResetMacParameters+0x1e>
    {
        Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_NONE;
 800fcae:	4b80      	ldr	r3, [pc, #512]	@ (800feb0 <ResetMacParameters+0x218>)
 800fcb0:	2200      	movs	r2, #0
 800fcb2:	f883 212c 	strb.w	r2, [r3, #300]	@ 0x12c
    }

    // ADR counter
    Nvm.MacGroup1.AdrAckCounter = 0;
 800fcb6:	4b7e      	ldr	r3, [pc, #504]	@ (800feb0 <ResetMacParameters+0x218>)
 800fcb8:	2200      	movs	r2, #0
 800fcba:	629a      	str	r2, [r3, #40]	@ 0x28

    MacCtx.ChannelsNbTransCounter = 0;
 800fcbc:	4b7d      	ldr	r3, [pc, #500]	@ (800feb4 <ResetMacParameters+0x21c>)
 800fcbe:	2200      	movs	r2, #0
 800fcc0:	f883 240c 	strb.w	r2, [r3, #1036]	@ 0x40c
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetries = 1;
 800fcc4:	4b7b      	ldr	r3, [pc, #492]	@ (800feb4 <ResetMacParameters+0x21c>)
 800fcc6:	2201      	movs	r2, #1
 800fcc8:	f883 240d 	strb.w	r2, [r3, #1037]	@ 0x40d
    MacCtx.AckTimeoutRetriesCounter = 1;
 800fccc:	4b79      	ldr	r3, [pc, #484]	@ (800feb4 <ResetMacParameters+0x21c>)
 800fcce:	2201      	movs	r2, #1
 800fcd0:	f883 240e 	strb.w	r2, [r3, #1038]	@ 0x40e
    MacCtx.AckTimeoutRetry = false;
 800fcd4:	4b77      	ldr	r3, [pc, #476]	@ (800feb4 <ResetMacParameters+0x21c>)
 800fcd6:	2200      	movs	r2, #0
 800fcd8:	f883 240f 	strb.w	r2, [r3, #1039]	@ 0x40f
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RetransmitTimeoutRetry = false;
    MacCtx.ResponseTimeoutStartTime = 0;
#endif /* LORAMAC_VERSION */

    Nvm.MacGroup2.MaxDCycle = 0;
 800fcdc:	4b74      	ldr	r3, [pc, #464]	@ (800feb0 <ResetMacParameters+0x218>)
 800fcde:	2200      	movs	r2, #0
 800fce0:	f883 211b 	strb.w	r2, [r3, #283]	@ 0x11b
    Nvm.MacGroup2.AggregatedDCycle = 1;
 800fce4:	4b72      	ldr	r3, [pc, #456]	@ (800feb0 <ResetMacParameters+0x218>)
 800fce6:	2201      	movs	r2, #1
 800fce8:	f8a3 211e 	strh.w	r2, [r3, #286]	@ 0x11e

    Nvm.MacGroup1.ChannelsTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 800fcec:	4b70      	ldr	r3, [pc, #448]	@ (800feb0 <ResetMacParameters+0x218>)
 800fcee:	f993 20dc 	ldrsb.w	r2, [r3, #220]	@ 0xdc
 800fcf2:	4b6f      	ldr	r3, [pc, #444]	@ (800feb0 <ResetMacParameters+0x218>)
 800fcf4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    Nvm.MacGroup1.ChannelsDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 800fcf8:	4b6d      	ldr	r3, [pc, #436]	@ (800feb0 <ResetMacParameters+0x218>)
 800fcfa:	f993 20dd 	ldrsb.w	r2, [r3, #221]	@ 0xdd
 800fcfe:	4b6c      	ldr	r3, [pc, #432]	@ (800feb0 <ResetMacParameters+0x218>)
 800fd00:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
    Nvm.MacGroup2.MacParams.Rx1DrOffset = Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset;
 800fd04:	4b6a      	ldr	r3, [pc, #424]	@ (800feb0 <ResetMacParameters+0x218>)
 800fd06:	f893 20b1 	ldrb.w	r2, [r3, #177]	@ 0xb1
 800fd0a:	4b69      	ldr	r3, [pc, #420]	@ (800feb0 <ResetMacParameters+0x218>)
 800fd0c:	f883 2069 	strb.w	r2, [r3, #105]	@ 0x69
    Nvm.MacGroup2.MacParams.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 800fd10:	4b67      	ldr	r3, [pc, #412]	@ (800feb0 <ResetMacParameters+0x218>)
 800fd12:	4a67      	ldr	r2, [pc, #412]	@ (800feb0 <ResetMacParameters+0x218>)
 800fd14:	336c      	adds	r3, #108	@ 0x6c
 800fd16:	32b4      	adds	r2, #180	@ 0xb4
 800fd18:	e892 0003 	ldmia.w	r2, {r0, r1}
 800fd1c:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 800fd20:	4b63      	ldr	r3, [pc, #396]	@ (800feb0 <ResetMacParameters+0x218>)
 800fd22:	4a63      	ldr	r2, [pc, #396]	@ (800feb0 <ResetMacParameters+0x218>)
 800fd24:	3374      	adds	r3, #116	@ 0x74
 800fd26:	32bc      	adds	r2, #188	@ 0xbc
 800fd28:	e892 0003 	ldmia.w	r2, {r0, r1}
 800fd2c:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.UplinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime;
 800fd30:	4b5f      	ldr	r3, [pc, #380]	@ (800feb0 <ResetMacParameters+0x218>)
 800fd32:	f893 20c4 	ldrb.w	r2, [r3, #196]	@ 0xc4
 800fd36:	4b5e      	ldr	r3, [pc, #376]	@ (800feb0 <ResetMacParameters+0x218>)
 800fd38:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
    Nvm.MacGroup2.MacParams.DownlinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime;
 800fd3c:	4b5c      	ldr	r3, [pc, #368]	@ (800feb0 <ResetMacParameters+0x218>)
 800fd3e:	f893 20c5 	ldrb.w	r2, [r3, #197]	@ 0xc5
 800fd42:	4b5b      	ldr	r3, [pc, #364]	@ (800feb0 <ResetMacParameters+0x218>)
 800fd44:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d
    Nvm.MacGroup2.MacParams.MaxEirp = Nvm.MacGroup2.MacParamsDefaults.MaxEirp;
 800fd48:	4b59      	ldr	r3, [pc, #356]	@ (800feb0 <ResetMacParameters+0x218>)
 800fd4a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800fd4e:	4a58      	ldr	r2, [pc, #352]	@ (800feb0 <ResetMacParameters+0x218>)
 800fd50:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
    Nvm.MacGroup2.MacParams.AntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 800fd54:	4b56      	ldr	r3, [pc, #344]	@ (800feb0 <ResetMacParameters+0x218>)
 800fd56:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 800fd5a:	4a55      	ldr	r2, [pc, #340]	@ (800feb0 <ResetMacParameters+0x218>)
 800fd5c:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
    Nvm.MacGroup2.MacParams.AdrAckLimit = Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit;
 800fd60:	4b53      	ldr	r3, [pc, #332]	@ (800feb0 <ResetMacParameters+0x218>)
 800fd62:	f8b3 20d0 	ldrh.w	r2, [r3, #208]	@ 0xd0
 800fd66:	4b52      	ldr	r3, [pc, #328]	@ (800feb0 <ResetMacParameters+0x218>)
 800fd68:	f8a3 2088 	strh.w	r2, [r3, #136]	@ 0x88
    Nvm.MacGroup2.MacParams.AdrAckDelay = Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay;
 800fd6c:	4b50      	ldr	r3, [pc, #320]	@ (800feb0 <ResetMacParameters+0x218>)
 800fd6e:	f8b3 20d2 	ldrh.w	r2, [r3, #210]	@ 0xd2
 800fd72:	4b4f      	ldr	r3, [pc, #316]	@ (800feb0 <ResetMacParameters+0x218>)
 800fd74:	f8a3 208a 	strh.w	r2, [r3, #138]	@ 0x8a

    MacCtx.NodeAckRequested = false;
 800fd78:	4b4e      	ldr	r3, [pc, #312]	@ (800feb4 <ResetMacParameters+0x21c>)
 800fd7a:	2200      	movs	r2, #0
 800fd7c:	f883 2410 	strb.w	r2, [r3, #1040]	@ 0x410
    Nvm.MacGroup1.SrvAckRequested = false;
 800fd80:	4b4b      	ldr	r3, [pc, #300]	@ (800feb0 <ResetMacParameters+0x218>)
 800fd82:	2200      	movs	r2, #0
 800fd84:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = false;
    Nvm.MacGroup2.DownlinkReceived = false;
#endif /* LORAMAC_VERSION */

    Nvm.MacGroup2.Rejoin0UplinksLimit = 0;
 800fd88:	4b49      	ldr	r3, [pc, #292]	@ (800feb0 <ResetMacParameters+0x218>)
 800fd8a:	2200      	movs	r2, #0
 800fd8c:	f8c3 2130 	str.w	r2, [r3, #304]	@ 0x130
    Nvm.MacGroup2.ForceRejoinMaxRetries = 0;
 800fd90:	4b47      	ldr	r3, [pc, #284]	@ (800feb0 <ResetMacParameters+0x218>)
 800fd92:	2200      	movs	r2, #0
 800fd94:	f883 2134 	strb.w	r2, [r3, #308]	@ 0x134
    Nvm.MacGroup2.ForceRejoinType = 0;
 800fd98:	4b45      	ldr	r3, [pc, #276]	@ (800feb0 <ResetMacParameters+0x218>)
 800fd9a:	2200      	movs	r2, #0
 800fd9c:	f883 2135 	strb.w	r2, [r3, #309]	@ 0x135
    Nvm.MacGroup2.Rejoin0CycleInSec = 0;
 800fda0:	4b43      	ldr	r3, [pc, #268]	@ (800feb0 <ResetMacParameters+0x218>)
 800fda2:	2200      	movs	r2, #0
 800fda4:	f8c3 2138 	str.w	r2, [r3, #312]	@ 0x138
    Nvm.MacGroup2.Rejoin1CycleInSec = 0;
 800fda8:	4b41      	ldr	r3, [pc, #260]	@ (800feb0 <ResetMacParameters+0x218>)
 800fdaa:	2200      	movs	r2, #0
 800fdac:	f8c3 213c 	str.w	r2, [r3, #316]	@ 0x13c
    Nvm.MacGroup2.IsRejoin0RequestQueued = 0;
 800fdb0:	4b3f      	ldr	r3, [pc, #252]	@ (800feb0 <ResetMacParameters+0x218>)
 800fdb2:	2200      	movs	r2, #0
 800fdb4:	f883 2141 	strb.w	r2, [r3, #321]	@ 0x141
    Nvm.MacGroup2.IsRejoin1RequestQueued = 0;
 800fdb8:	4b3d      	ldr	r3, [pc, #244]	@ (800feb0 <ResetMacParameters+0x218>)
 800fdba:	2200      	movs	r2, #0
 800fdbc:	f883 2142 	strb.w	r2, [r3, #322]	@ 0x142
    Nvm.MacGroup2.IsRejoin2RequestQueued = 0;
 800fdc0:	4b3b      	ldr	r3, [pc, #236]	@ (800feb0 <ResetMacParameters+0x218>)
 800fdc2:	2200      	movs	r2, #0
 800fdc4:	f883 2143 	strb.w	r2, [r3, #323]	@ 0x143

    // Reset to application defaults
    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_RESET_TO_DEFAULT_CHANNELS;
 800fdc8:	2301      	movs	r3, #1
 800fdca:	753b      	strb	r3, [r7, #20]
    params.NvmGroup1 = &Nvm.RegionGroup1;
 800fdcc:	4b3a      	ldr	r3, [pc, #232]	@ (800feb8 <ResetMacParameters+0x220>)
 800fdce:	60fb      	str	r3, [r7, #12]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 800fdd0:	4b3a      	ldr	r3, [pc, #232]	@ (800febc <ResetMacParameters+0x224>)
 800fdd2:	613b      	str	r3, [r7, #16]
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    params.Bands = &RegionBands;
#endif /* LORAMAC_VERSION */
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 800fdd4:	4b36      	ldr	r3, [pc, #216]	@ (800feb0 <ResetMacParameters+0x218>)
 800fdd6:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800fdda:	f107 020c 	add.w	r2, r7, #12
 800fdde:	4611      	mov	r1, r2
 800fde0:	4618      	mov	r0, r3
 800fde2:	f004 f947 	bl	8014074 <RegionInitDefaults>

    // Initialize channel index.
    MacCtx.Channel = 0;
 800fde6:	4b33      	ldr	r3, [pc, #204]	@ (800feb4 <ResetMacParameters+0x21c>)
 800fde8:	2200      	movs	r2, #0
 800fdea:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411

    // Initialize Rx2 config parameters.
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 800fdee:	4b31      	ldr	r3, [pc, #196]	@ (800feb4 <ResetMacParameters+0x21c>)
 800fdf0:	f893 2411 	ldrb.w	r2, [r3, #1041]	@ 0x411
 800fdf4:	4b2f      	ldr	r3, [pc, #188]	@ (800feb4 <ResetMacParameters+0x21c>)
 800fdf6:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 800fdfa:	4b2d      	ldr	r3, [pc, #180]	@ (800feb0 <ResetMacParameters+0x218>)
 800fdfc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800fdfe:	4a2d      	ldr	r2, [pc, #180]	@ (800feb4 <ResetMacParameters+0x21c>)
 800fe00:	f8c2 33d0 	str.w	r3, [r2, #976]	@ 0x3d0
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800fe04:	4b2a      	ldr	r3, [pc, #168]	@ (800feb0 <ResetMacParameters+0x218>)
 800fe06:	f893 207d 	ldrb.w	r2, [r3, #125]	@ 0x7d
 800fe0a:	4b2a      	ldr	r3, [pc, #168]	@ (800feb4 <ResetMacParameters+0x21c>)
 800fe0c:	f883 23dc 	strb.w	r2, [r3, #988]	@ 0x3dc
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 800fe10:	4b27      	ldr	r3, [pc, #156]	@ (800feb0 <ResetMacParameters+0x218>)
 800fe12:	f893 208c 	ldrb.w	r2, [r3, #140]	@ 0x8c
 800fe16:	4b27      	ldr	r3, [pc, #156]	@ (800feb4 <ResetMacParameters+0x21c>)
 800fe18:	f883 23dd 	strb.w	r2, [r3, #989]	@ 0x3dd
    MacCtx.RxWindow2Config.RxContinuous = false;
 800fe1c:	4b25      	ldr	r3, [pc, #148]	@ (800feb4 <ResetMacParameters+0x21c>)
 800fe1e:	2200      	movs	r2, #0
 800fe20:	f883 23de 	strb.w	r2, [r3, #990]	@ 0x3de
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 800fe24:	4b23      	ldr	r3, [pc, #140]	@ (800feb4 <ResetMacParameters+0x21c>)
 800fe26:	2201      	movs	r2, #1
 800fe28:	f883 23df 	strb.w	r2, [r3, #991]	@ 0x3df
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RxWindow2Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
#endif /* LORAMAC_VERSION */

    // Initialize RxC config parameters.
    MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 800fe2c:	4a21      	ldr	r2, [pc, #132]	@ (800feb4 <ResetMacParameters+0x21c>)
 800fe2e:	4b21      	ldr	r3, [pc, #132]	@ (800feb4 <ResetMacParameters+0x21c>)
 800fe30:	f502 7478 	add.w	r4, r2, #992	@ 0x3e0
 800fe34:	f503 7573 	add.w	r5, r3, #972	@ 0x3cc
 800fe38:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fe3a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fe3c:	682b      	ldr	r3, [r5, #0]
 800fe3e:	6023      	str	r3, [r4, #0]
    MacCtx.RxWindowCConfig.RxContinuous = true;
 800fe40:	4b1c      	ldr	r3, [pc, #112]	@ (800feb4 <ResetMacParameters+0x21c>)
 800fe42:	2201      	movs	r2, #1
 800fe44:	f883 23f2 	strb.w	r2, [r3, #1010]	@ 0x3f2
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 800fe48:	4b1a      	ldr	r3, [pc, #104]	@ (800feb4 <ResetMacParameters+0x21c>)
 800fe4a:	2202      	movs	r2, #2
 800fe4c:	f883 23f3 	strb.w	r2, [r3, #1011]	@ 0x3f3

    // Initialize class b
    // Apply callback
    classBCallbacks.GetTemperatureLevel = NULL;
 800fe50:	2300      	movs	r3, #0
 800fe52:	63bb      	str	r3, [r7, #56]	@ 0x38
    classBCallbacks.MacProcessNotify = NULL;
 800fe54:	2300      	movs	r3, #0
 800fe56:	63fb      	str	r3, [r7, #60]	@ 0x3c

    if( MacCtx.MacCallbacks != NULL )
 800fe58:	4b16      	ldr	r3, [pc, #88]	@ (800feb4 <ResetMacParameters+0x21c>)
 800fe5a:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800fe5e:	2b00      	cmp	r3, #0
 800fe60:	d009      	beq.n	800fe76 <ResetMacParameters+0x1de>
    {
        classBCallbacks.GetTemperatureLevel = MacCtx.MacCallbacks->GetTemperatureLevel;
 800fe62:	4b14      	ldr	r3, [pc, #80]	@ (800feb4 <ResetMacParameters+0x21c>)
 800fe64:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800fe68:	685b      	ldr	r3, [r3, #4]
 800fe6a:	63bb      	str	r3, [r7, #56]	@ 0x38
        classBCallbacks.MacProcessNotify = MacCtx.MacCallbacks->MacProcessNotify;
 800fe6c:	4b11      	ldr	r3, [pc, #68]	@ (800feb4 <ResetMacParameters+0x21c>)
 800fe6e:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800fe72:	695b      	ldr	r3, [r3, #20]
 800fe74:	63fb      	str	r3, [r7, #60]	@ 0x3c
    }

    // Must all be static. Don't use local references.
    classBParams.MlmeIndication = &MacCtx.MlmeIndication;
 800fe76:	4b12      	ldr	r3, [pc, #72]	@ (800fec0 <ResetMacParameters+0x228>)
 800fe78:	61bb      	str	r3, [r7, #24]
    classBParams.McpsIndication = &MacCtx.McpsIndication;
 800fe7a:	4b12      	ldr	r3, [pc, #72]	@ (800fec4 <ResetMacParameters+0x22c>)
 800fe7c:	61fb      	str	r3, [r7, #28]
    classBParams.MlmeConfirm = &MacCtx.MlmeConfirm;
 800fe7e:	4b12      	ldr	r3, [pc, #72]	@ (800fec8 <ResetMacParameters+0x230>)
 800fe80:	623b      	str	r3, [r7, #32]
    classBParams.LoRaMacFlags = &MacCtx.MacFlags;
 800fe82:	4b12      	ldr	r3, [pc, #72]	@ (800fecc <ResetMacParameters+0x234>)
 800fe84:	627b      	str	r3, [r7, #36]	@ 0x24
    classBParams.LoRaMacDevAddr = &Nvm.MacGroup2.DevAddr;
 800fe86:	4b12      	ldr	r3, [pc, #72]	@ (800fed0 <ResetMacParameters+0x238>)
 800fe88:	62bb      	str	r3, [r7, #40]	@ 0x28
    classBParams.LoRaMacRegion = &Nvm.MacGroup2.Region;
 800fe8a:	4b12      	ldr	r3, [pc, #72]	@ (800fed4 <ResetMacParameters+0x23c>)
 800fe8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    classBParams.LoRaMacParams = &Nvm.MacGroup2.MacParams;
 800fe8e:	4b12      	ldr	r3, [pc, #72]	@ (800fed8 <ResetMacParameters+0x240>)
 800fe90:	633b      	str	r3, [r7, #48]	@ 0x30
    classBParams.MulticastChannels = &Nvm.MacGroup2.MulticastChannelList[0];
 800fe92:	4b12      	ldr	r3, [pc, #72]	@ (800fedc <ResetMacParameters+0x244>)
 800fe94:	637b      	str	r3, [r7, #52]	@ 0x34
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    classBParams.NetworkActivation = &Nvm.MacGroup2.NetworkActivation;
#endif /* LORAMAC_VERSION */

    LoRaMacClassBInit( &classBParams, &classBCallbacks, &Nvm.ClassB );
 800fe96:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 800fe9a:	f107 0318 	add.w	r3, r7, #24
 800fe9e:	4a10      	ldr	r2, [pc, #64]	@ (800fee0 <ResetMacParameters+0x248>)
 800fea0:	4618      	mov	r0, r3
 800fea2:	f002 f8d9 	bl	8012058 <LoRaMacClassBInit>
}
 800fea6:	bf00      	nop
 800fea8:	3740      	adds	r7, #64	@ 0x40
 800feaa:	46bd      	mov	sp, r7
 800feac:	bdb0      	pop	{r4, r5, r7, pc}
 800feae:	bf00      	nop
 800feb0:	20000b34 	.word	0x20000b34
 800feb4:	2000062c 	.word	0x2000062c
 800feb8:	20000d54 	.word	0x20000d54
 800febc:	20000de8 	.word	0x20000de8
 800fec0:	20000a88 	.word	0x20000a88
 800fec4:	20000a44 	.word	0x20000a44
 800fec8:	20000a74 	.word	0x20000a74
 800fecc:	20000aad 	.word	0x20000aad
 800fed0:	20000c18 	.word	0x20000c18
 800fed4:	20000b7c 	.word	0x20000b7c
 800fed8:	20000b80 	.word	0x20000b80
 800fedc:	20000c1c 	.word	0x20000c1c
 800fee0:	2000128c 	.word	0x2000128c

0800fee4 <RxWindowSetup>:
 *
 * \param [in] rxTimer  Window timer to be topped.
 * \param [in] rxConfig Window parameters to be setup
 */
static void RxWindowSetup( TimerEvent_t* rxTimer, RxConfigParams_t* rxConfig )
{
 800fee4:	b580      	push	{r7, lr}
 800fee6:	b082      	sub	sp, #8
 800fee8:	af00      	add	r7, sp, #0
 800feea:	6078      	str	r0, [r7, #4]
 800feec:	6039      	str	r1, [r7, #0]
    TimerStop( rxTimer );
 800feee:	6878      	ldr	r0, [r7, #4]
 800fef0:	f00a fd56 	bl	801a9a0 <UTIL_TIMER_Stop>

    // Ensure the radio is Idle
    Radio.Standby( );
 800fef4:	4b11      	ldr	r3, [pc, #68]	@ (800ff3c <RxWindowSetup+0x58>)
 800fef6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fef8:	4798      	blx	r3

    if( RegionRxConfig( Nvm.MacGroup2.Region, rxConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 800fefa:	4b11      	ldr	r3, [pc, #68]	@ (800ff40 <RxWindowSetup+0x5c>)
 800fefc:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800ff00:	4a10      	ldr	r2, [pc, #64]	@ (800ff44 <RxWindowSetup+0x60>)
 800ff02:	6839      	ldr	r1, [r7, #0]
 800ff04:	4618      	mov	r0, r3
 800ff06:	f004 f91d 	bl	8014144 <RegionRxConfig>
 800ff0a:	4603      	mov	r3, r0
 800ff0c:	2b00      	cmp	r3, #0
 800ff0e:	d010      	beq.n	800ff32 <RxWindowSetup+0x4e>
    {
        MacCtx.MlmeIndication.RxDatarate = MacCtx.McpsIndication.RxDatarate;
 800ff10:	4b0d      	ldr	r3, [pc, #52]	@ (800ff48 <RxWindowSetup+0x64>)
 800ff12:	f893 241c 	ldrb.w	r2, [r3, #1052]	@ 0x41c
 800ff16:	4b0c      	ldr	r3, [pc, #48]	@ (800ff48 <RxWindowSetup+0x64>)
 800ff18:	f883 245e 	strb.w	r2, [r3, #1118]	@ 0x45e
        Radio.Rx( Nvm.MacGroup2.MacParams.MaxRxWindow );
 800ff1c:	4b07      	ldr	r3, [pc, #28]	@ (800ff3c <RxWindowSetup+0x58>)
 800ff1e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ff20:	4a07      	ldr	r2, [pc, #28]	@ (800ff40 <RxWindowSetup+0x5c>)
 800ff22:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800ff24:	4610      	mov	r0, r2
 800ff26:	4798      	blx	r3
        MacCtx.RxSlot = rxConfig->RxSlot;
 800ff28:	683b      	ldr	r3, [r7, #0]
 800ff2a:	7cda      	ldrb	r2, [r3, #19]
 800ff2c:	4b06      	ldr	r3, [pc, #24]	@ (800ff48 <RxWindowSetup+0x64>)
 800ff2e:	f883 2480 	strb.w	r2, [r3, #1152]	@ 0x480
    }
}
 800ff32:	bf00      	nop
 800ff34:	3708      	adds	r7, #8
 800ff36:	46bd      	mov	sp, r7
 800ff38:	bd80      	pop	{r7, pc}
 800ff3a:	bf00      	nop
 800ff3c:	0801bd08 	.word	0x0801bd08
 800ff40:	20000b34 	.word	0x20000b34
 800ff44:	20000a48 	.word	0x20000a48
 800ff48:	2000062c 	.word	0x2000062c

0800ff4c <OpenContinuousRxCWindow>:

static void OpenContinuousRxCWindow( void )
{
 800ff4c:	b590      	push	{r4, r7, lr}
 800ff4e:	b083      	sub	sp, #12
 800ff50:	af02      	add	r7, sp, #8
    // Compute RxC windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800ff52:	4b1b      	ldr	r3, [pc, #108]	@ (800ffc0 <OpenContinuousRxCWindow+0x74>)
 800ff54:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
                                     Nvm.MacGroup2.MacParams.RxCChannel.Datarate,
 800ff58:	4b19      	ldr	r3, [pc, #100]	@ (800ffc0 <OpenContinuousRxCWindow+0x74>)
 800ff5a:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800ff5e:	b259      	sxtb	r1, r3
 800ff60:	4b17      	ldr	r3, [pc, #92]	@ (800ffc0 <OpenContinuousRxCWindow+0x74>)
 800ff62:	f893 2050 	ldrb.w	r2, [r3, #80]	@ 0x50
 800ff66:	4b16      	ldr	r3, [pc, #88]	@ (800ffc0 <OpenContinuousRxCWindow+0x74>)
 800ff68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ff6a:	4c16      	ldr	r4, [pc, #88]	@ (800ffc4 <OpenContinuousRxCWindow+0x78>)
 800ff6c:	9400      	str	r4, [sp, #0]
 800ff6e:	f004 f8cf 	bl	8014110 <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindowCConfig );

    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 800ff72:	4b15      	ldr	r3, [pc, #84]	@ (800ffc8 <OpenContinuousRxCWindow+0x7c>)
 800ff74:	2202      	movs	r2, #2
 800ff76:	f883 23f3 	strb.w	r2, [r3, #1011]	@ 0x3f3
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RxWindowCConfig.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
#endif /* LORAMAC_VERSION */
    // Setup continuous listening
    MacCtx.RxWindowCConfig.RxContinuous = true;
 800ff7a:	4b13      	ldr	r3, [pc, #76]	@ (800ffc8 <OpenContinuousRxCWindow+0x7c>)
 800ff7c:	2201      	movs	r2, #1
 800ff7e:	f883 23f2 	strb.w	r2, [r3, #1010]	@ 0x3f2

    // At this point the Radio should be idle.
    // Thus, there is no need to set the radio in standby mode.
    if( RegionRxConfig( Nvm.MacGroup2.Region, &MacCtx.RxWindowCConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 800ff82:	4b0f      	ldr	r3, [pc, #60]	@ (800ffc0 <OpenContinuousRxCWindow+0x74>)
 800ff84:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800ff88:	4a10      	ldr	r2, [pc, #64]	@ (800ffcc <OpenContinuousRxCWindow+0x80>)
 800ff8a:	490e      	ldr	r1, [pc, #56]	@ (800ffc4 <OpenContinuousRxCWindow+0x78>)
 800ff8c:	4618      	mov	r0, r3
 800ff8e:	f004 f8d9 	bl	8014144 <RegionRxConfig>
 800ff92:	4603      	mov	r3, r0
 800ff94:	2b00      	cmp	r3, #0
 800ff96:	d00f      	beq.n	800ffb8 <OpenContinuousRxCWindow+0x6c>
    {
        MacCtx.MlmeIndication.RxDatarate = MacCtx.McpsIndication.RxDatarate;
 800ff98:	4b0b      	ldr	r3, [pc, #44]	@ (800ffc8 <OpenContinuousRxCWindow+0x7c>)
 800ff9a:	f893 241c 	ldrb.w	r2, [r3, #1052]	@ 0x41c
 800ff9e:	4b0a      	ldr	r3, [pc, #40]	@ (800ffc8 <OpenContinuousRxCWindow+0x7c>)
 800ffa0:	f883 245e 	strb.w	r2, [r3, #1118]	@ 0x45e
        Radio.Rx( 0 ); // Continuous mode
 800ffa4:	4b0a      	ldr	r3, [pc, #40]	@ (800ffd0 <OpenContinuousRxCWindow+0x84>)
 800ffa6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ffa8:	2000      	movs	r0, #0
 800ffaa:	4798      	blx	r3
        MacCtx.RxSlot = MacCtx.RxWindowCConfig.RxSlot;
 800ffac:	4b06      	ldr	r3, [pc, #24]	@ (800ffc8 <OpenContinuousRxCWindow+0x7c>)
 800ffae:	f893 23f3 	ldrb.w	r2, [r3, #1011]	@ 0x3f3
 800ffb2:	4b05      	ldr	r3, [pc, #20]	@ (800ffc8 <OpenContinuousRxCWindow+0x7c>)
 800ffb4:	f883 2480 	strb.w	r2, [r3, #1152]	@ 0x480
    }
}
 800ffb8:	bf00      	nop
 800ffba:	3704      	adds	r7, #4
 800ffbc:	46bd      	mov	sp, r7
 800ffbe:	bd90      	pop	{r4, r7, pc}
 800ffc0:	20000b34 	.word	0x20000b34
 800ffc4:	20000a0c 	.word	0x20000a0c
 800ffc8:	2000062c 	.word	0x2000062c
 800ffcc:	20000a48 	.word	0x20000a48
 800ffd0:	0801bd08 	.word	0x0801bd08

0800ffd4 <PrepareFrame>:

static LoRaMacStatus_t PrepareFrame( LoRaMacHeader_t* macHdr, LoRaMacFrameCtrl_t* fCtrl, uint8_t fPort, void* fBuffer, uint16_t fBufferSize )
{
 800ffd4:	b580      	push	{r7, lr}
 800ffd6:	b088      	sub	sp, #32
 800ffd8:	af00      	add	r7, sp, #0
 800ffda:	60f8      	str	r0, [r7, #12]
 800ffdc:	60b9      	str	r1, [r7, #8]
 800ffde:	603b      	str	r3, [r7, #0]
 800ffe0:	4613      	mov	r3, r2
 800ffe2:	71fb      	strb	r3, [r7, #7]
    MacCtx.PktBufferLen = 0;
 800ffe4:	4b81      	ldr	r3, [pc, #516]	@ (80101ec <PrepareFrame+0x218>)
 800ffe6:	2200      	movs	r2, #0
 800ffe8:	801a      	strh	r2, [r3, #0]
    MacCtx.NodeAckRequested = false;
 800ffea:	4b80      	ldr	r3, [pc, #512]	@ (80101ec <PrepareFrame+0x218>)
 800ffec:	2200      	movs	r2, #0
 800ffee:	f883 2410 	strb.w	r2, [r3, #1040]	@ 0x410
    uint32_t fCntUp = 0;
 800fff2:	2300      	movs	r3, #0
 800fff4:	61bb      	str	r3, [r7, #24]
    size_t macCmdsSize = 0;
 800fff6:	2300      	movs	r3, #0
 800fff8:	617b      	str	r3, [r7, #20]
    uint8_t availableSize = 0;
 800fffa:	2300      	movs	r3, #0
 800fffc:	77fb      	strb	r3, [r7, #31]

    if( fBuffer == NULL )
 800fffe:	683b      	ldr	r3, [r7, #0]
 8010000:	2b00      	cmp	r3, #0
 8010002:	d101      	bne.n	8010008 <PrepareFrame+0x34>
    {
        fBufferSize = 0;
 8010004:	2300      	movs	r3, #0
 8010006:	853b      	strh	r3, [r7, #40]	@ 0x28
    }

    memcpy1( MacCtx.AppData, ( uint8_t* ) fBuffer, fBufferSize );
 8010008:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 801000a:	461a      	mov	r2, r3
 801000c:	6839      	ldr	r1, [r7, #0]
 801000e:	4878      	ldr	r0, [pc, #480]	@ (80101f0 <PrepareFrame+0x21c>)
 8010010:	f006 fb13 	bl	801663a <memcpy1>
    MacCtx.AppDataSize = fBufferSize;
 8010014:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8010016:	b2da      	uxtb	r2, r3
 8010018:	4b74      	ldr	r3, [pc, #464]	@ (80101ec <PrepareFrame+0x218>)
 801001a:	f883 2237 	strb.w	r2, [r3, #567]	@ 0x237
    MacCtx.PktBuffer[0] = macHdr->Value;
 801001e:	68fb      	ldr	r3, [r7, #12]
 8010020:	781a      	ldrb	r2, [r3, #0]
 8010022:	4b72      	ldr	r3, [pc, #456]	@ (80101ec <PrepareFrame+0x218>)
 8010024:	709a      	strb	r2, [r3, #2]

    switch( macHdr->Bits.MType )
 8010026:	68fb      	ldr	r3, [r7, #12]
 8010028:	781b      	ldrb	r3, [r3, #0]
 801002a:	f3c3 1342 	ubfx	r3, r3, #5, #3
 801002e:	b2db      	uxtb	r3, r3
 8010030:	2b07      	cmp	r3, #7
 8010032:	f000 80b9 	beq.w	80101a8 <PrepareFrame+0x1d4>
 8010036:	2b07      	cmp	r3, #7
 8010038:	f300 80ce 	bgt.w	80101d8 <PrepareFrame+0x204>
 801003c:	2b02      	cmp	r3, #2
 801003e:	d006      	beq.n	801004e <PrepareFrame+0x7a>
 8010040:	2b04      	cmp	r3, #4
 8010042:	f040 80c9 	bne.w	80101d8 <PrepareFrame+0x204>
    {
        case FRAME_TYPE_DATA_CONFIRMED_UP:
            MacCtx.NodeAckRequested = true;
 8010046:	4b69      	ldr	r3, [pc, #420]	@ (80101ec <PrepareFrame+0x218>)
 8010048:	2201      	movs	r2, #1
 801004a:	f883 2410 	strb.w	r2, [r3, #1040]	@ 0x410
            // Intentional fall through
        case FRAME_TYPE_DATA_UNCONFIRMED_UP:
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_DATA;
 801004e:	4b67      	ldr	r3, [pc, #412]	@ (80101ec <PrepareFrame+0x218>)
 8010050:	2204      	movs	r2, #4
 8010052:	f883 2104 	strb.w	r2, [r3, #260]	@ 0x104
            MacCtx.TxMsg.Message.Data.Buffer = MacCtx.PktBuffer;
 8010056:	4b65      	ldr	r3, [pc, #404]	@ (80101ec <PrepareFrame+0x218>)
 8010058:	4a66      	ldr	r2, [pc, #408]	@ (80101f4 <PrepareFrame+0x220>)
 801005a:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
            MacCtx.TxMsg.Message.Data.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 801005e:	4b63      	ldr	r3, [pc, #396]	@ (80101ec <PrepareFrame+0x218>)
 8010060:	22ff      	movs	r2, #255	@ 0xff
 8010062:	f883 210c 	strb.w	r2, [r3, #268]	@ 0x10c
            MacCtx.TxMsg.Message.Data.MHDR.Value = macHdr->Value;
 8010066:	68fb      	ldr	r3, [r7, #12]
 8010068:	781a      	ldrb	r2, [r3, #0]
 801006a:	4b60      	ldr	r3, [pc, #384]	@ (80101ec <PrepareFrame+0x218>)
 801006c:	f883 210d 	strb.w	r2, [r3, #269]	@ 0x10d
            MacCtx.TxMsg.Message.Data.FPort = fPort;
 8010070:	4a5e      	ldr	r2, [pc, #376]	@ (80101ec <PrepareFrame+0x218>)
 8010072:	79fb      	ldrb	r3, [r7, #7]
 8010074:	f882 3128 	strb.w	r3, [r2, #296]	@ 0x128
            MacCtx.TxMsg.Message.Data.FHDR.DevAddr = Nvm.MacGroup2.DevAddr;
 8010078:	4b5f      	ldr	r3, [pc, #380]	@ (80101f8 <PrepareFrame+0x224>)
 801007a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 801007e:	4a5b      	ldr	r2, [pc, #364]	@ (80101ec <PrepareFrame+0x218>)
 8010080:	f8c2 3110 	str.w	r3, [r2, #272]	@ 0x110
            MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 8010084:	68bb      	ldr	r3, [r7, #8]
 8010086:	781a      	ldrb	r2, [r3, #0]
 8010088:	4b58      	ldr	r3, [pc, #352]	@ (80101ec <PrepareFrame+0x218>)
 801008a:	f883 2114 	strb.w	r2, [r3, #276]	@ 0x114
            MacCtx.TxMsg.Message.Data.FRMPayloadSize = MacCtx.AppDataSize;
 801008e:	4b57      	ldr	r3, [pc, #348]	@ (80101ec <PrepareFrame+0x218>)
 8010090:	f893 2237 	ldrb.w	r2, [r3, #567]	@ 0x237
 8010094:	4b55      	ldr	r3, [pc, #340]	@ (80101ec <PrepareFrame+0x218>)
 8010096:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
            MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.AppData;
 801009a:	4b54      	ldr	r3, [pc, #336]	@ (80101ec <PrepareFrame+0x218>)
 801009c:	4a54      	ldr	r2, [pc, #336]	@ (80101f0 <PrepareFrame+0x21c>)
 801009e:	f8c3 212c 	str.w	r2, [r3, #300]	@ 0x12c

            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 80100a2:	f107 0318 	add.w	r3, r7, #24
 80100a6:	4618      	mov	r0, r3
 80100a8:	f003 f90e 	bl	80132c8 <LoRaMacCryptoGetFCntUp>
 80100ac:	4603      	mov	r3, r0
 80100ae:	2b00      	cmp	r3, #0
 80100b0:	d001      	beq.n	80100b6 <PrepareFrame+0xe2>
            {
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 80100b2:	2312      	movs	r3, #18
 80100b4:	e096      	b.n	80101e4 <PrepareFrame+0x210>
            }
            MacCtx.TxMsg.Message.Data.FHDR.FCnt = ( uint16_t )fCntUp;
 80100b6:	69bb      	ldr	r3, [r7, #24]
 80100b8:	b29a      	uxth	r2, r3
 80100ba:	4b4c      	ldr	r3, [pc, #304]	@ (80101ec <PrepareFrame+0x218>)
 80100bc:	f8a3 2116 	strh.w	r2, [r3, #278]	@ 0x116

            // Reset confirm parameters
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            MacCtx.McpsConfirm.NbRetries = 0;
 80100c0:	4b4a      	ldr	r3, [pc, #296]	@ (80101ec <PrepareFrame+0x218>)
 80100c2:	2200      	movs	r2, #0
 80100c4:	f883 2439 	strb.w	r2, [r3, #1081]	@ 0x439
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            MacCtx.McpsConfirm.NbTrans = 0;
#endif /* LORAMAC_VERSION */
            MacCtx.McpsConfirm.AckReceived = false;
 80100c8:	4b48      	ldr	r3, [pc, #288]	@ (80101ec <PrepareFrame+0x218>)
 80100ca:	2200      	movs	r2, #0
 80100cc:	f883 2438 	strb.w	r2, [r3, #1080]	@ 0x438
            MacCtx.McpsConfirm.UpLinkCounter = fCntUp;
 80100d0:	69bb      	ldr	r3, [r7, #24]
 80100d2:	4a46      	ldr	r2, [pc, #280]	@ (80101ec <PrepareFrame+0x218>)
 80100d4:	f8c2 3440 	str.w	r3, [r2, #1088]	@ 0x440

            // Handle the MAC commands if there are any available
            if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 80100d8:	f107 0314 	add.w	r3, r7, #20
 80100dc:	4618      	mov	r0, r3
 80100de:	f002 fabf 	bl	8012660 <LoRaMacCommandsGetSizeSerializedCmds>
 80100e2:	4603      	mov	r3, r0
 80100e4:	2b00      	cmp	r3, #0
 80100e6:	d001      	beq.n	80100ec <PrepareFrame+0x118>
            {
                return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80100e8:	2313      	movs	r3, #19
 80100ea:	e07b      	b.n	80101e4 <PrepareFrame+0x210>
            }

            if( macCmdsSize > 0 )
 80100ec:	697b      	ldr	r3, [r7, #20]
 80100ee:	2b00      	cmp	r3, #0
 80100f0:	d074      	beq.n	80101dc <PrepareFrame+0x208>
            {
                availableSize = GetMaxAppPayloadWithoutFOptsLength( Nvm.MacGroup1.ChannelsDatarate );
 80100f2:	4b41      	ldr	r3, [pc, #260]	@ (80101f8 <PrepareFrame+0x224>)
 80100f4:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 80100f8:	4618      	mov	r0, r3
 80100fa:	f7fe fd75 	bl	800ebe8 <GetMaxAppPayloadWithoutFOptsLength>
 80100fe:	4603      	mov	r3, r0
 8010100:	77fb      	strb	r3, [r7, #31]

                // There is application payload available and the MAC commands fit into FOpts field.
                if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize <= LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 8010102:	4b3a      	ldr	r3, [pc, #232]	@ (80101ec <PrepareFrame+0x218>)
 8010104:	f893 3237 	ldrb.w	r3, [r3, #567]	@ 0x237
 8010108:	2b00      	cmp	r3, #0
 801010a:	d01d      	beq.n	8010148 <PrepareFrame+0x174>
 801010c:	697b      	ldr	r3, [r7, #20]
 801010e:	2b0f      	cmp	r3, #15
 8010110:	d81a      	bhi.n	8010148 <PrepareFrame+0x174>
                {
                    if( LoRaMacCommandsSerializeCmds( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH, &macCmdsSize, MacCtx.TxMsg.Message.Data.FHDR.FOpts ) != LORAMAC_COMMANDS_SUCCESS )
 8010112:	f107 0314 	add.w	r3, r7, #20
 8010116:	4a39      	ldr	r2, [pc, #228]	@ (80101fc <PrepareFrame+0x228>)
 8010118:	4619      	mov	r1, r3
 801011a:	200f      	movs	r0, #15
 801011c:	f002 fab6 	bl	801268c <LoRaMacCommandsSerializeCmds>
 8010120:	4603      	mov	r3, r0
 8010122:	2b00      	cmp	r3, #0
 8010124:	d001      	beq.n	801012a <PrepareFrame+0x156>
                    {
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8010126:	2313      	movs	r3, #19
 8010128:	e05c      	b.n	80101e4 <PrepareFrame+0x210>
                    }
                    fCtrl->Bits.FOptsLen = macCmdsSize;
 801012a:	697b      	ldr	r3, [r7, #20]
 801012c:	f003 030f 	and.w	r3, r3, #15
 8010130:	b2d9      	uxtb	r1, r3
 8010132:	68ba      	ldr	r2, [r7, #8]
 8010134:	7813      	ldrb	r3, [r2, #0]
 8010136:	f361 0303 	bfi	r3, r1, #0, #4
 801013a:	7013      	strb	r3, [r2, #0]
                    // Update FCtrl field with new value of FOptionsLength
                    MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 801013c:	68bb      	ldr	r3, [r7, #8]
 801013e:	781a      	ldrb	r2, [r3, #0]
 8010140:	4b2a      	ldr	r3, [pc, #168]	@ (80101ec <PrepareFrame+0x218>)
 8010142:	f883 2114 	strb.w	r2, [r3, #276]	@ 0x114
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
                }
            }

            break;
 8010146:	e049      	b.n	80101dc <PrepareFrame+0x208>
                else if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize > LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 8010148:	4b28      	ldr	r3, [pc, #160]	@ (80101ec <PrepareFrame+0x218>)
 801014a:	f893 3237 	ldrb.w	r3, [r3, #567]	@ 0x237
 801014e:	2b00      	cmp	r3, #0
 8010150:	d010      	beq.n	8010174 <PrepareFrame+0x1a0>
 8010152:	697b      	ldr	r3, [r7, #20]
 8010154:	2b0f      	cmp	r3, #15
 8010156:	d90d      	bls.n	8010174 <PrepareFrame+0x1a0>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 8010158:	7ffb      	ldrb	r3, [r7, #31]
 801015a:	f107 0114 	add.w	r1, r7, #20
 801015e:	4a28      	ldr	r2, [pc, #160]	@ (8010200 <PrepareFrame+0x22c>)
 8010160:	4618      	mov	r0, r3
 8010162:	f002 fa93 	bl	801268c <LoRaMacCommandsSerializeCmds>
 8010166:	4603      	mov	r3, r0
 8010168:	2b00      	cmp	r3, #0
 801016a:	d001      	beq.n	8010170 <PrepareFrame+0x19c>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 801016c:	2313      	movs	r3, #19
 801016e:	e039      	b.n	80101e4 <PrepareFrame+0x210>
                    return LORAMAC_STATUS_SKIPPED_APP_DATA;
 8010170:	230a      	movs	r3, #10
 8010172:	e037      	b.n	80101e4 <PrepareFrame+0x210>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 8010174:	7ffb      	ldrb	r3, [r7, #31]
 8010176:	f107 0114 	add.w	r1, r7, #20
 801017a:	4a21      	ldr	r2, [pc, #132]	@ (8010200 <PrepareFrame+0x22c>)
 801017c:	4618      	mov	r0, r3
 801017e:	f002 fa85 	bl	801268c <LoRaMacCommandsSerializeCmds>
 8010182:	4603      	mov	r3, r0
 8010184:	2b00      	cmp	r3, #0
 8010186:	d001      	beq.n	801018c <PrepareFrame+0x1b8>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8010188:	2313      	movs	r3, #19
 801018a:	e02b      	b.n	80101e4 <PrepareFrame+0x210>
                    MacCtx.TxMsg.Message.Data.FPort = 0;
 801018c:	4b17      	ldr	r3, [pc, #92]	@ (80101ec <PrepareFrame+0x218>)
 801018e:	2200      	movs	r2, #0
 8010190:	f883 2128 	strb.w	r2, [r3, #296]	@ 0x128
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
 8010194:	4b15      	ldr	r3, [pc, #84]	@ (80101ec <PrepareFrame+0x218>)
 8010196:	4a1a      	ldr	r2, [pc, #104]	@ (8010200 <PrepareFrame+0x22c>)
 8010198:	f8c3 212c 	str.w	r2, [r3, #300]	@ 0x12c
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
 801019c:	697b      	ldr	r3, [r7, #20]
 801019e:	b2da      	uxtb	r2, r3
 80101a0:	4b12      	ldr	r3, [pc, #72]	@ (80101ec <PrepareFrame+0x218>)
 80101a2:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
            break;
 80101a6:	e019      	b.n	80101dc <PrepareFrame+0x208>
        case FRAME_TYPE_PROPRIETARY:
            if( ( fBuffer != NULL ) && ( MacCtx.AppDataSize > 0 ) )
 80101a8:	683b      	ldr	r3, [r7, #0]
 80101aa:	2b00      	cmp	r3, #0
 80101ac:	d018      	beq.n	80101e0 <PrepareFrame+0x20c>
 80101ae:	4b0f      	ldr	r3, [pc, #60]	@ (80101ec <PrepareFrame+0x218>)
 80101b0:	f893 3237 	ldrb.w	r3, [r3, #567]	@ 0x237
 80101b4:	2b00      	cmp	r3, #0
 80101b6:	d013      	beq.n	80101e0 <PrepareFrame+0x20c>
            {
                memcpy1( MacCtx.PktBuffer + LORAMAC_MHDR_FIELD_SIZE, ( uint8_t* ) fBuffer, MacCtx.AppDataSize );
 80101b8:	4812      	ldr	r0, [pc, #72]	@ (8010204 <PrepareFrame+0x230>)
 80101ba:	4b0c      	ldr	r3, [pc, #48]	@ (80101ec <PrepareFrame+0x218>)
 80101bc:	f893 3237 	ldrb.w	r3, [r3, #567]	@ 0x237
 80101c0:	461a      	mov	r2, r3
 80101c2:	6839      	ldr	r1, [r7, #0]
 80101c4:	f006 fa39 	bl	801663a <memcpy1>
                MacCtx.PktBufferLen = LORAMAC_MHDR_FIELD_SIZE + MacCtx.AppDataSize;
 80101c8:	4b08      	ldr	r3, [pc, #32]	@ (80101ec <PrepareFrame+0x218>)
 80101ca:	f893 3237 	ldrb.w	r3, [r3, #567]	@ 0x237
 80101ce:	3301      	adds	r3, #1
 80101d0:	b29a      	uxth	r2, r3
 80101d2:	4b06      	ldr	r3, [pc, #24]	@ (80101ec <PrepareFrame+0x218>)
 80101d4:	801a      	strh	r2, [r3, #0]
            }
            break;
 80101d6:	e003      	b.n	80101e0 <PrepareFrame+0x20c>
        default:
            return LORAMAC_STATUS_SERVICE_UNKNOWN;
 80101d8:	2302      	movs	r3, #2
 80101da:	e003      	b.n	80101e4 <PrepareFrame+0x210>
            break;
 80101dc:	bf00      	nop
 80101de:	e000      	b.n	80101e2 <PrepareFrame+0x20e>
            break;
 80101e0:	bf00      	nop
    }

    return LORAMAC_STATUS_OK;
 80101e2:	2300      	movs	r3, #0
}
 80101e4:	4618      	mov	r0, r3
 80101e6:	3720      	adds	r7, #32
 80101e8:	46bd      	mov	sp, r7
 80101ea:	bd80      	pop	{r7, pc}
 80101ec:	2000062c 	.word	0x2000062c
 80101f0:	20000764 	.word	0x20000764
 80101f4:	2000062e 	.word	0x2000062e
 80101f8:	20000b34 	.word	0x20000b34
 80101fc:	20000744 	.word	0x20000744
 8010200:	20000ab4 	.word	0x20000ab4
 8010204:	2000062f 	.word	0x2000062f

08010208 <SendFrameOnChannel>:

static LoRaMacStatus_t SendFrameOnChannel( uint8_t channel )
{
 8010208:	b580      	push	{r7, lr}
 801020a:	b08a      	sub	sp, #40	@ 0x28
 801020c:	af00      	add	r7, sp, #0
 801020e:	4603      	mov	r3, r0
 8010210:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 8010212:	2303      	movs	r3, #3
 8010214:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    TxConfigParams_t txConfig;
    int8_t txPower = 0;
 8010218:	2300      	movs	r3, #0
 801021a:	73fb      	strb	r3, [r7, #15]

    txConfig.Channel = channel;
 801021c:	79fb      	ldrb	r3, [r7, #7]
 801021e:	743b      	strb	r3, [r7, #16]
    txConfig.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8010220:	4b48      	ldr	r3, [pc, #288]	@ (8010344 <SendFrameOnChannel+0x13c>)
 8010222:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 8010226:	747b      	strb	r3, [r7, #17]
    txConfig.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 8010228:	4b46      	ldr	r3, [pc, #280]	@ (8010344 <SendFrameOnChannel+0x13c>)
 801022a:	f993 3038 	ldrsb.w	r3, [r3, #56]	@ 0x38
 801022e:	74bb      	strb	r3, [r7, #18]
    txConfig.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
 8010230:	4b44      	ldr	r3, [pc, #272]	@ (8010344 <SendFrameOnChannel+0x13c>)
 8010232:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010236:	617b      	str	r3, [r7, #20]
    txConfig.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 8010238:	4b42      	ldr	r3, [pc, #264]	@ (8010344 <SendFrameOnChannel+0x13c>)
 801023a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801023e:	61bb      	str	r3, [r7, #24]
    txConfig.PktLen = MacCtx.PktBufferLen;
 8010240:	4b41      	ldr	r3, [pc, #260]	@ (8010348 <SendFrameOnChannel+0x140>)
 8010242:	881b      	ldrh	r3, [r3, #0]
 8010244:	83bb      	strh	r3, [r7, #28]
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    txConfig.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
#endif /* LORAMAC_VERSION */

    RegionTxConfig( Nvm.MacGroup2.Region, &txConfig, &txPower, &MacCtx.TxTimeOnAir );
 8010246:	4b3f      	ldr	r3, [pc, #252]	@ (8010344 <SendFrameOnChannel+0x13c>)
 8010248:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 801024c:	f107 020f 	add.w	r2, r7, #15
 8010250:	f107 0110 	add.w	r1, r7, #16
 8010254:	4b3d      	ldr	r3, [pc, #244]	@ (801034c <SendFrameOnChannel+0x144>)
 8010256:	f003 ff8a 	bl	801416e <RegionTxConfig>

    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 801025a:	4b3b      	ldr	r3, [pc, #236]	@ (8010348 <SendFrameOnChannel+0x140>)
 801025c:	2201      	movs	r2, #1
 801025e:	f883 2435 	strb.w	r2, [r3, #1077]	@ 0x435
    MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8010262:	4b38      	ldr	r3, [pc, #224]	@ (8010344 <SendFrameOnChannel+0x13c>)
 8010264:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 8010268:	b2da      	uxtb	r2, r3
 801026a:	4b37      	ldr	r3, [pc, #220]	@ (8010348 <SendFrameOnChannel+0x140>)
 801026c:	f883 2436 	strb.w	r2, [r3, #1078]	@ 0x436
    MacCtx.McpsConfirm.TxPower = txPower;
 8010270:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8010274:	4b34      	ldr	r3, [pc, #208]	@ (8010348 <SendFrameOnChannel+0x140>)
 8010276:	f883 2437 	strb.w	r2, [r3, #1079]	@ 0x437
    MacCtx.McpsConfirm.Channel = channel;
 801027a:	79fb      	ldrb	r3, [r7, #7]
 801027c:	4a32      	ldr	r2, [pc, #200]	@ (8010348 <SendFrameOnChannel+0x140>)
 801027e:	f8c2 3444 	str.w	r3, [r2, #1092]	@ 0x444

    // Store the time on air
    MacCtx.McpsConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 8010282:	4b31      	ldr	r3, [pc, #196]	@ (8010348 <SendFrameOnChannel+0x140>)
 8010284:	f8d3 3414 	ldr.w	r3, [r3, #1044]	@ 0x414
 8010288:	4a2f      	ldr	r2, [pc, #188]	@ (8010348 <SendFrameOnChannel+0x140>)
 801028a:	f8c2 343c 	str.w	r3, [r2, #1084]	@ 0x43c
    MacCtx.MlmeConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 801028e:	4b2e      	ldr	r3, [pc, #184]	@ (8010348 <SendFrameOnChannel+0x140>)
 8010290:	f8d3 3414 	ldr.w	r3, [r3, #1044]	@ 0x414
 8010294:	4a2c      	ldr	r2, [pc, #176]	@ (8010348 <SendFrameOnChannel+0x140>)
 8010296:	f8c2 344c 	str.w	r3, [r2, #1100]	@ 0x44c

    if( LoRaMacClassBIsBeaconModeActive( ) == true )
 801029a:	f001 ff49 	bl	8012130 <LoRaMacClassBIsBeaconModeActive>
 801029e:	4603      	mov	r3, r0
 80102a0:	2b00      	cmp	r3, #0
 80102a2:	d00b      	beq.n	80102bc <SendFrameOnChannel+0xb4>
    {
        // Currently, the Time-On-Air can only be computed when the radio is configured with
        // the TX configuration
        TimerTime_t collisionTime = LoRaMacClassBIsUplinkCollision( MacCtx.TxTimeOnAir );
 80102a4:	4b28      	ldr	r3, [pc, #160]	@ (8010348 <SendFrameOnChannel+0x140>)
 80102a6:	f8d3 3414 	ldr.w	r3, [r3, #1044]	@ 0x414
 80102aa:	4618      	mov	r0, r3
 80102ac:	f001 ffab 	bl	8012206 <LoRaMacClassBIsUplinkCollision>
 80102b0:	6238      	str	r0, [r7, #32]

        if( collisionTime > 0 )
 80102b2:	6a3b      	ldr	r3, [r7, #32]
 80102b4:	2b00      	cmp	r3, #0
 80102b6:	d001      	beq.n	80102bc <SendFrameOnChannel+0xb4>
        {
            return LORAMAC_STATUS_BUSY_UPLINK_COLLISION;
 80102b8:	2310      	movs	r3, #16
 80102ba:	e03e      	b.n	801033a <SendFrameOnChannel+0x132>
        }
    }

    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 80102bc:	4b21      	ldr	r3, [pc, #132]	@ (8010344 <SendFrameOnChannel+0x13c>)
 80102be:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 80102c2:	2b01      	cmp	r3, #1
 80102c4:	d101      	bne.n	80102ca <SendFrameOnChannel+0xc2>
    {
        // Stop slots for class b
        LoRaMacClassBStopRxSlots( );
 80102c6:	f001 ffa8 	bl	801221a <LoRaMacClassBStopRxSlots>
    }

    LoRaMacClassBHaltBeaconing( );
 80102ca:	f001 ff42 	bl	8012152 <LoRaMacClassBHaltBeaconing>

    // Secure frame
    status = SecureFrame( Nvm.MacGroup1.ChannelsDatarate, MacCtx.Channel );
 80102ce:	4b1d      	ldr	r3, [pc, #116]	@ (8010344 <SendFrameOnChannel+0x13c>)
 80102d0:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 80102d4:	b2db      	uxtb	r3, r3
 80102d6:	4a1c      	ldr	r2, [pc, #112]	@ (8010348 <SendFrameOnChannel+0x140>)
 80102d8:	f892 2411 	ldrb.w	r2, [r2, #1041]	@ 0x411
 80102dc:	4611      	mov	r1, r2
 80102de:	4618      	mov	r0, r3
 80102e0:	f7ff fc44 	bl	800fb6c <SecureFrame>
 80102e4:	4603      	mov	r3, r0
 80102e6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if( status != LORAMAC_STATUS_OK )
 80102ea:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80102ee:	2b00      	cmp	r3, #0
 80102f0:	d002      	beq.n	80102f8 <SendFrameOnChannel+0xf0>
    {
        return status;
 80102f2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80102f6:	e020      	b.n	801033a <SendFrameOnChannel+0x132>
    }

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 80102f8:	4b13      	ldr	r3, [pc, #76]	@ (8010348 <SendFrameOnChannel+0x140>)
 80102fa:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 80102fe:	f043 0302 	orr.w	r3, r3, #2
 8010302:	4a11      	ldr	r2, [pc, #68]	@ (8010348 <SendFrameOnChannel+0x140>)
 8010304:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    if( MacCtx.NodeAckRequested == false )
 8010308:	4b0f      	ldr	r3, [pc, #60]	@ (8010348 <SendFrameOnChannel+0x140>)
 801030a:	f893 3410 	ldrb.w	r3, [r3, #1040]	@ 0x410
 801030e:	f083 0301 	eor.w	r3, r3, #1
 8010312:	b2db      	uxtb	r3, r3
 8010314:	2b00      	cmp	r3, #0
 8010316:	d007      	beq.n	8010328 <SendFrameOnChannel+0x120>
    {
        MacCtx.ChannelsNbTransCounter++;
 8010318:	4b0b      	ldr	r3, [pc, #44]	@ (8010348 <SendFrameOnChannel+0x140>)
 801031a:	f893 340c 	ldrb.w	r3, [r3, #1036]	@ 0x40c
 801031e:	3301      	adds	r3, #1
 8010320:	b2da      	uxtb	r2, r3
 8010322:	4b09      	ldr	r3, [pc, #36]	@ (8010348 <SendFrameOnChannel+0x140>)
 8010324:	f883 240c 	strb.w	r2, [r3, #1036]	@ 0x40c
    MacCtx.McpsConfirm.NbTrans = MacCtx.ChannelsNbTransCounter;
    MacCtx.ResponseTimeoutStartTime = 0;
#endif /* LORAMAC_VERSION */

    // Send now
    Radio.Send( MacCtx.PktBuffer, MacCtx.PktBufferLen );
 8010328:	4b09      	ldr	r3, [pc, #36]	@ (8010350 <SendFrameOnChannel+0x148>)
 801032a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801032c:	4a06      	ldr	r2, [pc, #24]	@ (8010348 <SendFrameOnChannel+0x140>)
 801032e:	8812      	ldrh	r2, [r2, #0]
 8010330:	b2d2      	uxtb	r2, r2
 8010332:	4611      	mov	r1, r2
 8010334:	4807      	ldr	r0, [pc, #28]	@ (8010354 <SendFrameOnChannel+0x14c>)
 8010336:	4798      	blx	r3

    return LORAMAC_STATUS_OK;
 8010338:	2300      	movs	r3, #0
}
 801033a:	4618      	mov	r0, r3
 801033c:	3728      	adds	r7, #40	@ 0x28
 801033e:	46bd      	mov	sp, r7
 8010340:	bd80      	pop	{r7, pc}
 8010342:	bf00      	nop
 8010344:	20000b34 	.word	0x20000b34
 8010348:	2000062c 	.word	0x2000062c
 801034c:	20000a40 	.word	0x20000a40
 8010350:	0801bd08 	.word	0x0801bd08
 8010354:	2000062e 	.word	0x2000062e

08010358 <SetTxContinuousWave>:

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
static LoRaMacStatus_t SetTxContinuousWave( uint16_t timeout )
{
 8010358:	b580      	push	{r7, lr}
 801035a:	b086      	sub	sp, #24
 801035c:	af00      	add	r7, sp, #0
 801035e:	4603      	mov	r3, r0
 8010360:	80fb      	strh	r3, [r7, #6]
    ContinuousWaveParams_t continuousWave;

    continuousWave.Channel = MacCtx.Channel;
 8010362:	4b16      	ldr	r3, [pc, #88]	@ (80103bc <SetTxContinuousWave+0x64>)
 8010364:	f893 3411 	ldrb.w	r3, [r3, #1041]	@ 0x411
 8010368:	723b      	strb	r3, [r7, #8]
    continuousWave.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 801036a:	4b15      	ldr	r3, [pc, #84]	@ (80103c0 <SetTxContinuousWave+0x68>)
 801036c:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 8010370:	727b      	strb	r3, [r7, #9]
    continuousWave.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 8010372:	4b13      	ldr	r3, [pc, #76]	@ (80103c0 <SetTxContinuousWave+0x68>)
 8010374:	f993 3038 	ldrsb.w	r3, [r3, #56]	@ 0x38
 8010378:	72bb      	strb	r3, [r7, #10]
    continuousWave.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
 801037a:	4b11      	ldr	r3, [pc, #68]	@ (80103c0 <SetTxContinuousWave+0x68>)
 801037c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010380:	60fb      	str	r3, [r7, #12]
    continuousWave.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 8010382:	4b0f      	ldr	r3, [pc, #60]	@ (80103c0 <SetTxContinuousWave+0x68>)
 8010384:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010388:	613b      	str	r3, [r7, #16]
    continuousWave.Timeout = timeout;
 801038a:	88fb      	ldrh	r3, [r7, #6]
 801038c:	82bb      	strh	r3, [r7, #20]

    RegionSetContinuousWave( Nvm.MacGroup2.Region, &continuousWave );
 801038e:	4b0c      	ldr	r3, [pc, #48]	@ (80103c0 <SetTxContinuousWave+0x68>)
 8010390:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8010394:	f107 0208 	add.w	r2, r7, #8
 8010398:	4611      	mov	r1, r2
 801039a:	4618      	mov	r0, r3
 801039c:	f003 ff96 	bl	80142cc <RegionSetContinuousWave>

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 80103a0:	4b06      	ldr	r3, [pc, #24]	@ (80103bc <SetTxContinuousWave+0x64>)
 80103a2:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 80103a6:	f043 0302 	orr.w	r3, r3, #2
 80103aa:	4a04      	ldr	r2, [pc, #16]	@ (80103bc <SetTxContinuousWave+0x64>)
 80103ac:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340

    return LORAMAC_STATUS_OK;
 80103b0:	2300      	movs	r3, #0
}
 80103b2:	4618      	mov	r0, r3
 80103b4:	3718      	adds	r7, #24
 80103b6:	46bd      	mov	sp, r7
 80103b8:	bd80      	pop	{r7, pc}
 80103ba:	bf00      	nop
 80103bc:	2000062c 	.word	0x2000062c
 80103c0:	20000b34 	.word	0x20000b34

080103c4 <SetTxContinuousWave1>:

static LoRaMacStatus_t SetTxContinuousWave1( uint16_t timeout, uint32_t frequency, uint8_t power )
{
 80103c4:	b580      	push	{r7, lr}
 80103c6:	b082      	sub	sp, #8
 80103c8:	af00      	add	r7, sp, #0
 80103ca:	4603      	mov	r3, r0
 80103cc:	6039      	str	r1, [r7, #0]
 80103ce:	80fb      	strh	r3, [r7, #6]
 80103d0:	4613      	mov	r3, r2
 80103d2:	717b      	strb	r3, [r7, #5]
    Radio.SetTxContinuousWave( frequency, power, timeout );
 80103d4:	4b09      	ldr	r3, [pc, #36]	@ (80103fc <SetTxContinuousWave1+0x38>)
 80103d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80103d8:	f997 1005 	ldrsb.w	r1, [r7, #5]
 80103dc:	88fa      	ldrh	r2, [r7, #6]
 80103de:	6838      	ldr	r0, [r7, #0]
 80103e0:	4798      	blx	r3

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 80103e2:	4b07      	ldr	r3, [pc, #28]	@ (8010400 <SetTxContinuousWave1+0x3c>)
 80103e4:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 80103e8:	f043 0302 	orr.w	r3, r3, #2
 80103ec:	4a04      	ldr	r2, [pc, #16]	@ (8010400 <SetTxContinuousWave1+0x3c>)
 80103ee:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340

    return LORAMAC_STATUS_OK;
 80103f2:	2300      	movs	r3, #0
}
 80103f4:	4618      	mov	r0, r3
 80103f6:	3708      	adds	r7, #8
 80103f8:	46bd      	mov	sp, r7
 80103fa:	bd80      	pop	{r7, pc}
 80103fc:	0801bd08 	.word	0x0801bd08
 8010400:	2000062c 	.word	0x2000062c

08010404 <RestoreNvmData>:
    return LORAMAC_STATUS_OK;
}
#endif /* LORAMAC_VERSION */

static LoRaMacStatus_t RestoreNvmData( void )
{
 8010404:	b480      	push	{r7}
 8010406:	af00      	add	r7, sp, #0
    // from NVM and we thus need to synchronize the radio. The same function
    // is invoked in LoRaMacInitialization.
    Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */

    return LORAMAC_STATUS_OK;
 8010408:	2300      	movs	r3, #0
}
 801040a:	4618      	mov	r0, r3
 801040c:	46bd      	mov	sp, r7
 801040e:	bc80      	pop	{r7}
 8010410:	4770      	bx	lr

08010412 <DetermineFrameType>:

static LoRaMacStatus_t DetermineFrameType( LoRaMacMessageData_t* macMsg, FType_t* fType )
{
 8010412:	b480      	push	{r7}
 8010414:	b083      	sub	sp, #12
 8010416:	af00      	add	r7, sp, #0
 8010418:	6078      	str	r0, [r7, #4]
 801041a:	6039      	str	r1, [r7, #0]
    if( ( macMsg == NULL ) || ( fType == NULL ) )
 801041c:	687b      	ldr	r3, [r7, #4]
 801041e:	2b00      	cmp	r3, #0
 8010420:	d002      	beq.n	8010428 <DetermineFrameType+0x16>
 8010422:	683b      	ldr	r3, [r7, #0]
 8010424:	2b00      	cmp	r3, #0
 8010426:	d101      	bne.n	801042c <DetermineFrameType+0x1a>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8010428:	2303      	movs	r3, #3
 801042a:	e03b      	b.n	80104a4 <DetermineFrameType+0x92>
     * +-------+  +----------+------+-------+--------------+
     * |   D   |  |    = 0   |   -  |  > 0  |       X      |
     * +-------+  +----------+------+-------+--------------+
     */

    if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen > 0 ) && ( macMsg->FPort > 0 ) )
 801042c:	687b      	ldr	r3, [r7, #4]
 801042e:	7b1b      	ldrb	r3, [r3, #12]
 8010430:	f003 030f 	and.w	r3, r3, #15
 8010434:	b2db      	uxtb	r3, r3
 8010436:	2b00      	cmp	r3, #0
 8010438:	d008      	beq.n	801044c <DetermineFrameType+0x3a>
 801043a:	687b      	ldr	r3, [r7, #4]
 801043c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8010440:	2b00      	cmp	r3, #0
 8010442:	d003      	beq.n	801044c <DetermineFrameType+0x3a>
    {
        *fType = FRAME_TYPE_A;
 8010444:	683b      	ldr	r3, [r7, #0]
 8010446:	2200      	movs	r2, #0
 8010448:	701a      	strb	r2, [r3, #0]
 801044a:	e02a      	b.n	80104a2 <DetermineFrameType+0x90>
    }
    else if( macMsg->FRMPayloadSize == 0 )
 801044c:	687b      	ldr	r3, [r7, #4]
 801044e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8010452:	2b00      	cmp	r3, #0
 8010454:	d103      	bne.n	801045e <DetermineFrameType+0x4c>
    {
        *fType = FRAME_TYPE_B;
 8010456:	683b      	ldr	r3, [r7, #0]
 8010458:	2201      	movs	r2, #1
 801045a:	701a      	strb	r2, [r3, #0]
 801045c:	e021      	b.n	80104a2 <DetermineFrameType+0x90>
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort == 0 ) )
 801045e:	687b      	ldr	r3, [r7, #4]
 8010460:	7b1b      	ldrb	r3, [r3, #12]
 8010462:	f003 030f 	and.w	r3, r3, #15
 8010466:	b2db      	uxtb	r3, r3
 8010468:	2b00      	cmp	r3, #0
 801046a:	d108      	bne.n	801047e <DetermineFrameType+0x6c>
 801046c:	687b      	ldr	r3, [r7, #4]
 801046e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8010472:	2b00      	cmp	r3, #0
 8010474:	d103      	bne.n	801047e <DetermineFrameType+0x6c>
    {
        *fType = FRAME_TYPE_C;
 8010476:	683b      	ldr	r3, [r7, #0]
 8010478:	2202      	movs	r2, #2
 801047a:	701a      	strb	r2, [r3, #0]
 801047c:	e011      	b.n	80104a2 <DetermineFrameType+0x90>
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort > 0 ) )
 801047e:	687b      	ldr	r3, [r7, #4]
 8010480:	7b1b      	ldrb	r3, [r3, #12]
 8010482:	f003 030f 	and.w	r3, r3, #15
 8010486:	b2db      	uxtb	r3, r3
 8010488:	2b00      	cmp	r3, #0
 801048a:	d108      	bne.n	801049e <DetermineFrameType+0x8c>
 801048c:	687b      	ldr	r3, [r7, #4]
 801048e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8010492:	2b00      	cmp	r3, #0
 8010494:	d003      	beq.n	801049e <DetermineFrameType+0x8c>
    {
        *fType = FRAME_TYPE_D;
 8010496:	683b      	ldr	r3, [r7, #0]
 8010498:	2203      	movs	r2, #3
 801049a:	701a      	strb	r2, [r3, #0]
 801049c:	e001      	b.n	80104a2 <DetermineFrameType+0x90>
    }
    else
    {
        // Should never happen.
        return LORAMAC_STATUS_ERROR;
 801049e:	2318      	movs	r3, #24
 80104a0:	e000      	b.n	80104a4 <DetermineFrameType+0x92>
    }

    return LORAMAC_STATUS_OK;
 80104a2:	2300      	movs	r3, #0
}
 80104a4:	4618      	mov	r0, r3
 80104a6:	370c      	adds	r7, #12
 80104a8:	46bd      	mov	sp, r7
 80104aa:	bc80      	pop	{r7}
 80104ac:	4770      	bx	lr
	...

080104b0 <CheckRetransUnconfirmedUplink>:

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
static bool CheckRetransUnconfirmedUplink( void )
{
 80104b0:	b480      	push	{r7}
 80104b2:	af00      	add	r7, sp, #0
    // Unconfirmed uplink, when all retransmissions are done.
    if( MacCtx.ChannelsNbTransCounter >=
 80104b4:	4b12      	ldr	r3, [pc, #72]	@ (8010500 <CheckRetransUnconfirmedUplink+0x50>)
 80104b6:	f893 240c 	ldrb.w	r2, [r3, #1036]	@ 0x40c
        Nvm.MacGroup2.MacParams.ChannelsNbTrans )
 80104ba:	4b12      	ldr	r3, [pc, #72]	@ (8010504 <CheckRetransUnconfirmedUplink+0x54>)
 80104bc:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
    if( MacCtx.ChannelsNbTransCounter >=
 80104c0:	429a      	cmp	r2, r3
 80104c2:	d301      	bcc.n	80104c8 <CheckRetransUnconfirmedUplink+0x18>
    {
        return true;
 80104c4:	2301      	movs	r3, #1
 80104c6:	e016      	b.n	80104f6 <CheckRetransUnconfirmedUplink+0x46>
    }
    else if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 80104c8:	4b0d      	ldr	r3, [pc, #52]	@ (8010500 <CheckRetransUnconfirmedUplink+0x50>)
 80104ca:	f893 3481 	ldrb.w	r3, [r3, #1153]	@ 0x481
 80104ce:	f003 0302 	and.w	r3, r3, #2
 80104d2:	b2db      	uxtb	r3, r3
 80104d4:	2b00      	cmp	r3, #0
 80104d6:	d00d      	beq.n	80104f4 <CheckRetransUnconfirmedUplink+0x44>
    {
        // For Class A stop in each case
        if( Nvm.MacGroup2.DeviceClass == CLASS_A )
 80104d8:	4b0a      	ldr	r3, [pc, #40]	@ (8010504 <CheckRetransUnconfirmedUplink+0x54>)
 80104da:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 80104de:	2b00      	cmp	r3, #0
 80104e0:	d101      	bne.n	80104e6 <CheckRetransUnconfirmedUplink+0x36>
        {
            return true;
 80104e2:	2301      	movs	r3, #1
 80104e4:	e007      	b.n	80104f6 <CheckRetransUnconfirmedUplink+0x46>
        }
        else
        {// For Class B & C stop only if the frame was received in RX1 window
            if( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 )
 80104e6:	4b06      	ldr	r3, [pc, #24]	@ (8010500 <CheckRetransUnconfirmedUplink+0x50>)
 80104e8:	f893 347f 	ldrb.w	r3, [r3, #1151]	@ 0x47f
 80104ec:	2b00      	cmp	r3, #0
 80104ee:	d101      	bne.n	80104f4 <CheckRetransUnconfirmedUplink+0x44>
            {
                return true;
 80104f0:	2301      	movs	r3, #1
 80104f2:	e000      	b.n	80104f6 <CheckRetransUnconfirmedUplink+0x46>
            }
        }
    }
    return false;
 80104f4:	2300      	movs	r3, #0
}
 80104f6:	4618      	mov	r0, r3
 80104f8:	46bd      	mov	sp, r7
 80104fa:	bc80      	pop	{r7}
 80104fc:	4770      	bx	lr
 80104fe:	bf00      	nop
 8010500:	2000062c 	.word	0x2000062c
 8010504:	20000b34 	.word	0x20000b34

08010508 <CheckRetransConfirmedUplink>:

static bool CheckRetransConfirmedUplink( void )
{
 8010508:	b480      	push	{r7}
 801050a:	af00      	add	r7, sp, #0
    // Confirmed uplink, when all retransmissions ( tries to get a ack ) are done.
    if( MacCtx.AckTimeoutRetriesCounter >=
 801050c:	4b0e      	ldr	r3, [pc, #56]	@ (8010548 <CheckRetransConfirmedUplink+0x40>)
 801050e:	f893 240e 	ldrb.w	r2, [r3, #1038]	@ 0x40e
        MacCtx.AckTimeoutRetries )
 8010512:	4b0d      	ldr	r3, [pc, #52]	@ (8010548 <CheckRetransConfirmedUplink+0x40>)
 8010514:	f893 340d 	ldrb.w	r3, [r3, #1037]	@ 0x40d
    if( MacCtx.AckTimeoutRetriesCounter >=
 8010518:	429a      	cmp	r2, r3
 801051a:	d301      	bcc.n	8010520 <CheckRetransConfirmedUplink+0x18>
    {
        return true;
 801051c:	2301      	movs	r3, #1
 801051e:	e00f      	b.n	8010540 <CheckRetransConfirmedUplink+0x38>
    }
    else if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8010520:	4b09      	ldr	r3, [pc, #36]	@ (8010548 <CheckRetransConfirmedUplink+0x40>)
 8010522:	f893 3481 	ldrb.w	r3, [r3, #1153]	@ 0x481
 8010526:	f003 0302 	and.w	r3, r3, #2
 801052a:	b2db      	uxtb	r3, r3
 801052c:	2b00      	cmp	r3, #0
 801052e:	d006      	beq.n	801053e <CheckRetransConfirmedUplink+0x36>
    {
        if( MacCtx.McpsConfirm.AckReceived == true )
 8010530:	4b05      	ldr	r3, [pc, #20]	@ (8010548 <CheckRetransConfirmedUplink+0x40>)
 8010532:	f893 3438 	ldrb.w	r3, [r3, #1080]	@ 0x438
 8010536:	2b00      	cmp	r3, #0
 8010538:	d001      	beq.n	801053e <CheckRetransConfirmedUplink+0x36>
        {
            return true;
 801053a:	2301      	movs	r3, #1
 801053c:	e000      	b.n	8010540 <CheckRetransConfirmedUplink+0x38>
        }
    }
    return false;
 801053e:	2300      	movs	r3, #0
}
 8010540:	4618      	mov	r0, r3
 8010542:	46bd      	mov	sp, r7
 8010544:	bc80      	pop	{r7}
 8010546:	4770      	bx	lr
 8010548:	2000062c 	.word	0x2000062c

0801054c <StopRetransmission>:
    return counter;
}
#endif /* LORAMAC_VERSION */

static bool StopRetransmission( void )
{
 801054c:	b480      	push	{r7}
 801054e:	af00      	add	r7, sp, #0
            }
        }
    }
#endif /* LORAMAC_VERSION */

    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 8010550:	4b1a      	ldr	r3, [pc, #104]	@ (80105bc <StopRetransmission+0x70>)
 8010552:	f893 3481 	ldrb.w	r3, [r3, #1153]	@ 0x481
 8010556:	f003 0302 	and.w	r3, r3, #2
 801055a:	b2db      	uxtb	r3, r3
 801055c:	2b00      	cmp	r3, #0
 801055e:	d009      	beq.n	8010574 <StopRetransmission+0x28>
        ( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 8010560:	4b16      	ldr	r3, [pc, #88]	@ (80105bc <StopRetransmission+0x70>)
 8010562:	f893 347f 	ldrb.w	r3, [r3, #1151]	@ 0x47f
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 8010566:	2b00      	cmp	r3, #0
 8010568:	d00e      	beq.n	8010588 <StopRetransmission+0x3c>
          ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_2 ) ) )
 801056a:	4b14      	ldr	r3, [pc, #80]	@ (80105bc <StopRetransmission+0x70>)
 801056c:	f893 347f 	ldrb.w	r3, [r3, #1151]	@ 0x47f
        ( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 8010570:	2b01      	cmp	r3, #1
 8010572:	d009      	beq.n	8010588 <StopRetransmission+0x3c>
    {   // Maximum repetitions without downlink. Increase ADR Ack counter.
        // Only process the case when the MAC did not receive a downlink.
        if( Nvm.MacGroup2.AdrCtrlOn == true )
 8010574:	4b12      	ldr	r3, [pc, #72]	@ (80105c0 <StopRetransmission+0x74>)
 8010576:	f893 311a 	ldrb.w	r3, [r3, #282]	@ 0x11a
 801057a:	2b00      	cmp	r3, #0
 801057c:	d004      	beq.n	8010588 <StopRetransmission+0x3c>
        {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            Nvm.MacGroup1.AdrAckCounter++;
 801057e:	4b10      	ldr	r3, [pc, #64]	@ (80105c0 <StopRetransmission+0x74>)
 8010580:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010582:	3301      	adds	r3, #1
 8010584:	4a0e      	ldr	r2, [pc, #56]	@ (80105c0 <StopRetransmission+0x74>)
 8010586:	6293      	str	r3, [r2, #40]	@ 0x28
            Nvm.MacGroup1.AdrAckCounter = IncreaseAdrAckCounter( Nvm.MacGroup1.AdrAckCounter );
#endif /* LORAMAC_VERSION */
        }
    }

    MacCtx.ChannelsNbTransCounter = 0;
 8010588:	4b0c      	ldr	r3, [pc, #48]	@ (80105bc <StopRetransmission+0x70>)
 801058a:	2200      	movs	r2, #0
 801058c:	f883 240c 	strb.w	r2, [r3, #1036]	@ 0x40c
    MacCtx.NodeAckRequested = false;
 8010590:	4b0a      	ldr	r3, [pc, #40]	@ (80105bc <StopRetransmission+0x70>)
 8010592:	2200      	movs	r2, #0
 8010594:	f883 2410 	strb.w	r2, [r3, #1040]	@ 0x410
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetry = false;
 8010598:	4b08      	ldr	r3, [pc, #32]	@ (80105bc <StopRetransmission+0x70>)
 801059a:	2200      	movs	r2, #0
 801059c:	f883 240f 	strb.w	r2, [r3, #1039]	@ 0x40f
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RetransmitTimeoutRetry = false;
#endif /* LORAMAC_VERSION */
    MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 80105a0:	4b06      	ldr	r3, [pc, #24]	@ (80105bc <StopRetransmission+0x70>)
 80105a2:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 80105a6:	f023 0302 	bic.w	r3, r3, #2
 80105aa:	4a04      	ldr	r2, [pc, #16]	@ (80105bc <StopRetransmission+0x70>)
 80105ac:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340

    return true;
 80105b0:	2301      	movs	r3, #1
}
 80105b2:	4618      	mov	r0, r3
 80105b4:	46bd      	mov	sp, r7
 80105b6:	bc80      	pop	{r7}
 80105b8:	4770      	bx	lr
 80105ba:	bf00      	nop
 80105bc:	2000062c 	.word	0x2000062c
 80105c0:	20000b34 	.word	0x20000b34

080105c4 <OnMacProcessNotify>:

static void OnMacProcessNotify( void )
{
 80105c4:	b580      	push	{r7, lr}
 80105c6:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 80105c8:	4b08      	ldr	r3, [pc, #32]	@ (80105ec <OnMacProcessNotify+0x28>)
 80105ca:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 80105ce:	2b00      	cmp	r3, #0
 80105d0:	d00a      	beq.n	80105e8 <OnMacProcessNotify+0x24>
 80105d2:	4b06      	ldr	r3, [pc, #24]	@ (80105ec <OnMacProcessNotify+0x28>)
 80105d4:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 80105d8:	695b      	ldr	r3, [r3, #20]
 80105da:	2b00      	cmp	r3, #0
 80105dc:	d004      	beq.n	80105e8 <OnMacProcessNotify+0x24>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 80105de:	4b03      	ldr	r3, [pc, #12]	@ (80105ec <OnMacProcessNotify+0x28>)
 80105e0:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 80105e4:	695b      	ldr	r3, [r3, #20]
 80105e6:	4798      	blx	r3
    }
}
 80105e8:	bf00      	nop
 80105ea:	bd80      	pop	{r7, pc}
 80105ec:	2000062c 	.word	0x2000062c

080105f0 <CallNvmDataChangeCallback>:

static void CallNvmDataChangeCallback( uint16_t notifyFlags )
{
 80105f0:	b580      	push	{r7, lr}
 80105f2:	b082      	sub	sp, #8
 80105f4:	af00      	add	r7, sp, #0
 80105f6:	4603      	mov	r3, r0
 80105f8:	80fb      	strh	r3, [r7, #6]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->NvmDataChange  != NULL ) )
 80105fa:	4b0b      	ldr	r3, [pc, #44]	@ (8010628 <CallNvmDataChangeCallback+0x38>)
 80105fc:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 8010600:	2b00      	cmp	r3, #0
 8010602:	d00c      	beq.n	801061e <CallNvmDataChangeCallback+0x2e>
 8010604:	4b08      	ldr	r3, [pc, #32]	@ (8010628 <CallNvmDataChangeCallback+0x38>)
 8010606:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 801060a:	691b      	ldr	r3, [r3, #16]
 801060c:	2b00      	cmp	r3, #0
 801060e:	d006      	beq.n	801061e <CallNvmDataChangeCallback+0x2e>
    {
        MacCtx.MacCallbacks->NvmDataChange ( notifyFlags );
 8010610:	4b05      	ldr	r3, [pc, #20]	@ (8010628 <CallNvmDataChangeCallback+0x38>)
 8010612:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 8010616:	691b      	ldr	r3, [r3, #16]
 8010618:	88fa      	ldrh	r2, [r7, #6]
 801061a:	4610      	mov	r0, r2
 801061c:	4798      	blx	r3
    }
}
 801061e:	bf00      	nop
 8010620:	3708      	adds	r7, #8
 8010622:	46bd      	mov	sp, r7
 8010624:	bd80      	pop	{r7, pc}
 8010626:	bf00      	nop
 8010628:	2000062c 	.word	0x2000062c

0801062c <AckTimeoutRetriesProcess>:

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
static void AckTimeoutRetriesProcess( void )
{
 801062c:	b580      	push	{r7, lr}
 801062e:	b084      	sub	sp, #16
 8010630:	af00      	add	r7, sp, #0
    if( MacCtx.AckTimeoutRetriesCounter < MacCtx.AckTimeoutRetries )
 8010632:	4b1b      	ldr	r3, [pc, #108]	@ (80106a0 <AckTimeoutRetriesProcess+0x74>)
 8010634:	f893 240e 	ldrb.w	r2, [r3, #1038]	@ 0x40e
 8010638:	4b19      	ldr	r3, [pc, #100]	@ (80106a0 <AckTimeoutRetriesProcess+0x74>)
 801063a:	f893 340d 	ldrb.w	r3, [r3, #1037]	@ 0x40d
 801063e:	429a      	cmp	r2, r3
 8010640:	d229      	bcs.n	8010696 <AckTimeoutRetriesProcess+0x6a>
    {
        MacCtx.AckTimeoutRetriesCounter++;
 8010642:	4b17      	ldr	r3, [pc, #92]	@ (80106a0 <AckTimeoutRetriesProcess+0x74>)
 8010644:	f893 340e 	ldrb.w	r3, [r3, #1038]	@ 0x40e
 8010648:	3301      	adds	r3, #1
 801064a:	b2da      	uxtb	r2, r3
 801064c:	4b14      	ldr	r3, [pc, #80]	@ (80106a0 <AckTimeoutRetriesProcess+0x74>)
 801064e:	f883 240e 	strb.w	r2, [r3, #1038]	@ 0x40e
        if( ( MacCtx.AckTimeoutRetriesCounter % 2 ) == 1 )
 8010652:	4b13      	ldr	r3, [pc, #76]	@ (80106a0 <AckTimeoutRetriesProcess+0x74>)
 8010654:	f893 340e 	ldrb.w	r3, [r3, #1038]	@ 0x40e
 8010658:	f003 0301 	and.w	r3, r3, #1
 801065c:	b2db      	uxtb	r3, r3
 801065e:	2b00      	cmp	r3, #0
 8010660:	d019      	beq.n	8010696 <AckTimeoutRetriesProcess+0x6a>
        {
            GetPhyParams_t getPhy;
            PhyParam_t phyParam;

            getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 8010662:	2322      	movs	r3, #34	@ 0x22
 8010664:	723b      	strb	r3, [r7, #8]
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8010666:	4b0f      	ldr	r3, [pc, #60]	@ (80106a4 <AckTimeoutRetriesProcess+0x78>)
 8010668:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 801066c:	72bb      	strb	r3, [r7, #10]
            getPhy.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 801066e:	4b0d      	ldr	r3, [pc, #52]	@ (80106a4 <AckTimeoutRetriesProcess+0x78>)
 8010670:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 8010674:	727b      	strb	r3, [r7, #9]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010676:	4b0b      	ldr	r3, [pc, #44]	@ (80106a4 <AckTimeoutRetriesProcess+0x78>)
 8010678:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 801067c:	f107 0208 	add.w	r2, r7, #8
 8010680:	4611      	mov	r1, r2
 8010682:	4618      	mov	r0, r3
 8010684:	f003 fccd 	bl	8014022 <RegionGetPhyParam>
 8010688:	4603      	mov	r3, r0
 801068a:	607b      	str	r3, [r7, #4]
            Nvm.MacGroup1.ChannelsDatarate = phyParam.Value;
 801068c:	687b      	ldr	r3, [r7, #4]
 801068e:	b25a      	sxtb	r2, r3
 8010690:	4b04      	ldr	r3, [pc, #16]	@ (80106a4 <AckTimeoutRetriesProcess+0x78>)
 8010692:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
        }
    }
}
 8010696:	bf00      	nop
 8010698:	3710      	adds	r7, #16
 801069a:	46bd      	mov	sp, r7
 801069c:	bd80      	pop	{r7, pc}
 801069e:	bf00      	nop
 80106a0:	2000062c 	.word	0x2000062c
 80106a4:	20000b34 	.word	0x20000b34

080106a8 <AckTimeoutRetriesFinalize>:

static void AckTimeoutRetriesFinalize( void )
{
 80106a8:	b580      	push	{r7, lr}
 80106aa:	b084      	sub	sp, #16
 80106ac:	af00      	add	r7, sp, #0
    if( MacCtx.McpsConfirm.AckReceived == false )
 80106ae:	4b14      	ldr	r3, [pc, #80]	@ (8010700 <AckTimeoutRetriesFinalize+0x58>)
 80106b0:	f893 3438 	ldrb.w	r3, [r3, #1080]	@ 0x438
 80106b4:	f083 0301 	eor.w	r3, r3, #1
 80106b8:	b2db      	uxtb	r3, r3
 80106ba:	2b00      	cmp	r3, #0
 80106bc:	d015      	beq.n	80106ea <AckTimeoutRetriesFinalize+0x42>
    {
        InitDefaultsParams_t params;
        params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 80106be:	2302      	movs	r3, #2
 80106c0:	733b      	strb	r3, [r7, #12]
        params.NvmGroup1 = &Nvm.RegionGroup1;
 80106c2:	4b10      	ldr	r3, [pc, #64]	@ (8010704 <AckTimeoutRetriesFinalize+0x5c>)
 80106c4:	607b      	str	r3, [r7, #4]
        params.NvmGroup2 = &Nvm.RegionGroup2;
 80106c6:	4b10      	ldr	r3, [pc, #64]	@ (8010708 <AckTimeoutRetriesFinalize+0x60>)
 80106c8:	60bb      	str	r3, [r7, #8]
        RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 80106ca:	4b10      	ldr	r3, [pc, #64]	@ (801070c <AckTimeoutRetriesFinalize+0x64>)
 80106cc:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80106d0:	1d3a      	adds	r2, r7, #4
 80106d2:	4611      	mov	r1, r2
 80106d4:	4618      	mov	r0, r3
 80106d6:	f003 fccd 	bl	8014074 <RegionInitDefaults>

        MacCtx.NodeAckRequested = false;
 80106da:	4b09      	ldr	r3, [pc, #36]	@ (8010700 <AckTimeoutRetriesFinalize+0x58>)
 80106dc:	2200      	movs	r2, #0
 80106de:	f883 2410 	strb.w	r2, [r3, #1040]	@ 0x410
        MacCtx.McpsConfirm.AckReceived = false;
 80106e2:	4b07      	ldr	r3, [pc, #28]	@ (8010700 <AckTimeoutRetriesFinalize+0x58>)
 80106e4:	2200      	movs	r2, #0
 80106e6:	f883 2438 	strb.w	r2, [r3, #1080]	@ 0x438
    }
    MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
 80106ea:	4b05      	ldr	r3, [pc, #20]	@ (8010700 <AckTimeoutRetriesFinalize+0x58>)
 80106ec:	f893 240e 	ldrb.w	r2, [r3, #1038]	@ 0x40e
 80106f0:	4b03      	ldr	r3, [pc, #12]	@ (8010700 <AckTimeoutRetriesFinalize+0x58>)
 80106f2:	f883 2439 	strb.w	r2, [r3, #1081]	@ 0x439
}
 80106f6:	bf00      	nop
 80106f8:	3710      	adds	r7, #16
 80106fa:	46bd      	mov	sp, r7
 80106fc:	bd80      	pop	{r7, pc}
 80106fe:	bf00      	nop
 8010700:	2000062c 	.word	0x2000062c
 8010704:	20000d54 	.word	0x20000d54
 8010708:	20000de8 	.word	0x20000de8
 801070c:	20000b34 	.word	0x20000b34

08010710 <IsRequestPending>:
#endif /* LORAMAC_VERSION */

static uint8_t IsRequestPending( void )
{
 8010710:	b480      	push	{r7}
 8010712:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 8010714:	4b0b      	ldr	r3, [pc, #44]	@ (8010744 <IsRequestPending+0x34>)
 8010716:	f893 3481 	ldrb.w	r3, [r3, #1153]	@ 0x481
 801071a:	f003 0304 	and.w	r3, r3, #4
 801071e:	b2db      	uxtb	r3, r3
 8010720:	2b00      	cmp	r3, #0
 8010722:	d107      	bne.n	8010734 <IsRequestPending+0x24>
        ( MacCtx.MacFlags.Bits.McpsReq == 1 ) )
 8010724:	4b07      	ldr	r3, [pc, #28]	@ (8010744 <IsRequestPending+0x34>)
 8010726:	f893 3481 	ldrb.w	r3, [r3, #1153]	@ 0x481
 801072a:	f003 0301 	and.w	r3, r3, #1
 801072e:	b2db      	uxtb	r3, r3
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 8010730:	2b00      	cmp	r3, #0
 8010732:	d001      	beq.n	8010738 <IsRequestPending+0x28>
    {
        return 1;
 8010734:	2301      	movs	r3, #1
 8010736:	e000      	b.n	801073a <IsRequestPending+0x2a>
    }
    return 0;
 8010738:	2300      	movs	r3, #0
}
 801073a:	4618      	mov	r0, r3
 801073c:	46bd      	mov	sp, r7
 801073e:	bc80      	pop	{r7}
 8010740:	4770      	bx	lr
 8010742:	bf00      	nop
 8010744:	2000062c 	.word	0x2000062c

08010748 <LoRaMacInitialization>:

LoRaMacStatus_t LoRaMacInitialization( LoRaMacPrimitives_t* primitives, LoRaMacCallback_t* callbacks, LoRaMacRegion_t region )
{
 8010748:	b590      	push	{r4, r7, lr}
 801074a:	b08f      	sub	sp, #60	@ 0x3c
 801074c:	af02      	add	r7, sp, #8
 801074e:	6178      	str	r0, [r7, #20]
 8010750:	6139      	str	r1, [r7, #16]
 8010752:	4613      	mov	r3, r2
 8010754:	73fb      	strb	r3, [r7, #15]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( ( primitives == NULL ) ||
 8010756:	697b      	ldr	r3, [r7, #20]
 8010758:	2b00      	cmp	r3, #0
 801075a:	d002      	beq.n	8010762 <LoRaMacInitialization+0x1a>
 801075c:	693b      	ldr	r3, [r7, #16]
 801075e:	2b00      	cmp	r3, #0
 8010760:	d101      	bne.n	8010766 <LoRaMacInitialization+0x1e>
        ( callbacks == NULL ) )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8010762:	2303      	movs	r3, #3
 8010764:	e273      	b.n	8010c4e <LoRaMacInitialization+0x506>
    }

    if( ( primitives->MacMcpsConfirm == NULL ) ||
 8010766:	697b      	ldr	r3, [r7, #20]
 8010768:	681b      	ldr	r3, [r3, #0]
 801076a:	2b00      	cmp	r3, #0
 801076c:	d00b      	beq.n	8010786 <LoRaMacInitialization+0x3e>
        ( primitives->MacMcpsIndication == NULL ) ||
 801076e:	697b      	ldr	r3, [r7, #20]
 8010770:	685b      	ldr	r3, [r3, #4]
    if( ( primitives->MacMcpsConfirm == NULL ) ||
 8010772:	2b00      	cmp	r3, #0
 8010774:	d007      	beq.n	8010786 <LoRaMacInitialization+0x3e>
        ( primitives->MacMlmeConfirm == NULL ) ||
 8010776:	697b      	ldr	r3, [r7, #20]
 8010778:	689b      	ldr	r3, [r3, #8]
        ( primitives->MacMcpsIndication == NULL ) ||
 801077a:	2b00      	cmp	r3, #0
 801077c:	d003      	beq.n	8010786 <LoRaMacInitialization+0x3e>
        ( primitives->MacMlmeIndication == NULL ) )
 801077e:	697b      	ldr	r3, [r7, #20]
 8010780:	68db      	ldr	r3, [r3, #12]
        ( primitives->MacMlmeConfirm == NULL ) ||
 8010782:	2b00      	cmp	r3, #0
 8010784:	d101      	bne.n	801078a <LoRaMacInitialization+0x42>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8010786:	2303      	movs	r3, #3
 8010788:	e261      	b.n	8010c4e <LoRaMacInitialization+0x506>
    }
    // Verify if the region is supported
    if( RegionIsActive( region ) == false )
 801078a:	7bfb      	ldrb	r3, [r7, #15]
 801078c:	4618      	mov	r0, r3
 801078e:	f003 fc38 	bl	8014002 <RegionIsActive>
 8010792:	4603      	mov	r3, r0
 8010794:	f083 0301 	eor.w	r3, r3, #1
 8010798:	b2db      	uxtb	r3, r3
 801079a:	2b00      	cmp	r3, #0
 801079c:	d001      	beq.n	80107a2 <LoRaMacInitialization+0x5a>
    {
        return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 801079e:	2309      	movs	r3, #9
 80107a0:	e255      	b.n	8010c4e <LoRaMacInitialization+0x506>
    }

    // Confirm queue reset
    LoRaMacConfirmQueueInit( primitives );
 80107a2:	6978      	ldr	r0, [r7, #20]
 80107a4:	f002 f894 	bl	80128d0 <LoRaMacConfirmQueueInit>

    // Initialize the module context with zeros
    memset1( ( uint8_t* ) &Nvm, 0x00, sizeof( LoRaMacNvmData_t ) );
 80107a8:	f44f 62ee 	mov.w	r2, #1904	@ 0x770
 80107ac:	2100      	movs	r1, #0
 80107ae:	48c7      	ldr	r0, [pc, #796]	@ (8010acc <LoRaMacInitialization+0x384>)
 80107b0:	f005 ff7e 	bl	80166b0 <memset1>
    memset1( ( uint8_t* ) &MacCtx, 0x00, sizeof( LoRaMacCtx_t ) );
 80107b4:	f44f 62a1 	mov.w	r2, #1288	@ 0x508
 80107b8:	2100      	movs	r1, #0
 80107ba:	48c5      	ldr	r0, [pc, #788]	@ (8010ad0 <LoRaMacInitialization+0x388>)
 80107bc:	f005 ff78 	bl	80166b0 <memset1>

    // Set non zero variables to its default value
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetriesCounter = 1;
 80107c0:	4bc3      	ldr	r3, [pc, #780]	@ (8010ad0 <LoRaMacInitialization+0x388>)
 80107c2:	2201      	movs	r2, #1
 80107c4:	f883 240e 	strb.w	r2, [r3, #1038]	@ 0x40e
    MacCtx.AckTimeoutRetries = 1;
 80107c8:	4bc1      	ldr	r3, [pc, #772]	@ (8010ad0 <LoRaMacInitialization+0x388>)
 80107ca:	2201      	movs	r2, #1
 80107cc:	f883 240d 	strb.w	r2, [r3, #1037]	@ 0x40d
#endif /* LORAMAC_VERSION */
    Nvm.MacGroup2.Region = region;
 80107d0:	4abe      	ldr	r2, [pc, #760]	@ (8010acc <LoRaMacInitialization+0x384>)
 80107d2:	7bfb      	ldrb	r3, [r7, #15]
 80107d4:	f882 3048 	strb.w	r3, [r2, #72]	@ 0x48
    Nvm.MacGroup2.DeviceClass = CLASS_A;
 80107d8:	4bbc      	ldr	r3, [pc, #752]	@ (8010acc <LoRaMacInitialization+0x384>)
 80107da:	2200      	movs	r2, #0
 80107dc:	f883 2118 	strb.w	r2, [r3, #280]	@ 0x118
    Nvm.MacGroup2.MacParams.RepeaterSupport = false;
 80107e0:	4bba      	ldr	r3, [pc, #744]	@ (8010acc <LoRaMacInitialization+0x384>)
 80107e2:	2200      	movs	r2, #0
 80107e4:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c

    // Setup version
    Nvm.MacGroup2.Version.Value = LORAMAC_VERSION;
 80107e8:	4bb8      	ldr	r3, [pc, #736]	@ (8010acc <LoRaMacInitialization+0x384>)
 80107ea:	4aba      	ldr	r2, [pc, #744]	@ (8010ad4 <LoRaMacInitialization+0x38c>)
 80107ec:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
    params.Bands = &RegionBands;
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
#endif /* LORAMAC_VERSION */

    // Reset to defaults
    getPhy.Attribute = PHY_DUTY_CYCLE;
 80107f0:	230f      	movs	r3, #15
 80107f2:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80107f6:	4bb5      	ldr	r3, [pc, #724]	@ (8010acc <LoRaMacInitialization+0x384>)
 80107f8:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80107fc:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8010800:	4611      	mov	r1, r2
 8010802:	4618      	mov	r0, r3
 8010804:	f003 fc0d 	bl	8014022 <RegionGetPhyParam>
 8010808:	4603      	mov	r3, r0
 801080a:	627b      	str	r3, [r7, #36]	@ 0x24
    Nvm.MacGroup2.DutyCycleOn = ( bool ) phyParam.Value;
 801080c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801080e:	2b00      	cmp	r3, #0
 8010810:	bf14      	ite	ne
 8010812:	2301      	movne	r3, #1
 8010814:	2300      	moveq	r3, #0
 8010816:	b2da      	uxtb	r2, r3
 8010818:	4bac      	ldr	r3, [pc, #688]	@ (8010acc <LoRaMacInitialization+0x384>)
 801081a:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c

    getPhy.Attribute = PHY_DEF_TX_POWER;
 801081e:	230a      	movs	r3, #10
 8010820:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010824:	4ba9      	ldr	r3, [pc, #676]	@ (8010acc <LoRaMacInitialization+0x384>)
 8010826:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 801082a:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 801082e:	4611      	mov	r1, r2
 8010830:	4618      	mov	r0, r3
 8010832:	f003 fbf6 	bl	8014022 <RegionGetPhyParam>
 8010836:	4603      	mov	r3, r0
 8010838:	627b      	str	r3, [r7, #36]	@ 0x24
    Nvm.MacGroup2.ChannelsTxPowerDefault = phyParam.Value;
 801083a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801083c:	b25a      	sxtb	r2, r3
 801083e:	4ba3      	ldr	r3, [pc, #652]	@ (8010acc <LoRaMacInitialization+0x384>)
 8010840:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

    getPhy.Attribute = PHY_DEF_TX_DR;
 8010844:	2306      	movs	r3, #6
 8010846:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801084a:	4ba0      	ldr	r3, [pc, #640]	@ (8010acc <LoRaMacInitialization+0x384>)
 801084c:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8010850:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8010854:	4611      	mov	r1, r2
 8010856:	4618      	mov	r0, r3
 8010858:	f003 fbe3 	bl	8014022 <RegionGetPhyParam>
 801085c:	4603      	mov	r3, r0
 801085e:	627b      	str	r3, [r7, #36]	@ 0x24
    Nvm.MacGroup2.ChannelsDatarateDefault = phyParam.Value;
 8010860:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010862:	b25a      	sxtb	r2, r3
 8010864:	4b99      	ldr	r3, [pc, #612]	@ (8010acc <LoRaMacInitialization+0x384>)
 8010866:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

    getPhy.Attribute = PHY_MAX_RX_WINDOW;
 801086a:	2310      	movs	r3, #16
 801086c:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010870:	4b96      	ldr	r3, [pc, #600]	@ (8010acc <LoRaMacInitialization+0x384>)
 8010872:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8010876:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 801087a:	4611      	mov	r1, r2
 801087c:	4618      	mov	r0, r3
 801087e:	f003 fbd0 	bl	8014022 <RegionGetPhyParam>
 8010882:	4603      	mov	r3, r0
 8010884:	627b      	str	r3, [r7, #36]	@ 0x24
    Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow = phyParam.Value;
 8010886:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010888:	4a90      	ldr	r2, [pc, #576]	@ (8010acc <LoRaMacInitialization+0x384>)
 801088a:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c

    getPhy.Attribute = PHY_RECEIVE_DELAY1;
 801088e:	2311      	movs	r3, #17
 8010890:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010894:	4b8d      	ldr	r3, [pc, #564]	@ (8010acc <LoRaMacInitialization+0x384>)
 8010896:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 801089a:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 801089e:	4611      	mov	r1, r2
 80108a0:	4618      	mov	r0, r3
 80108a2:	f003 fbbe 	bl	8014022 <RegionGetPhyParam>
 80108a6:	4603      	mov	r3, r0
 80108a8:	627b      	str	r3, [r7, #36]	@ 0x24
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1 = phyParam.Value;
 80108aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80108ac:	4a87      	ldr	r2, [pc, #540]	@ (8010acc <LoRaMacInitialization+0x384>)
 80108ae:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

    getPhy.Attribute = PHY_RECEIVE_DELAY2;
 80108b2:	2312      	movs	r3, #18
 80108b4:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80108b8:	4b84      	ldr	r3, [pc, #528]	@ (8010acc <LoRaMacInitialization+0x384>)
 80108ba:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80108be:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 80108c2:	4611      	mov	r1, r2
 80108c4:	4618      	mov	r0, r3
 80108c6:	f003 fbac 	bl	8014022 <RegionGetPhyParam>
 80108ca:	4603      	mov	r3, r0
 80108cc:	627b      	str	r3, [r7, #36]	@ 0x24
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2 = phyParam.Value;
 80108ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80108d0:	4a7e      	ldr	r2, [pc, #504]	@ (8010acc <LoRaMacInitialization+0x384>)
 80108d2:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY1;
 80108d6:	2313      	movs	r3, #19
 80108d8:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80108dc:	4b7b      	ldr	r3, [pc, #492]	@ (8010acc <LoRaMacInitialization+0x384>)
 80108de:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80108e2:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 80108e6:	4611      	mov	r1, r2
 80108e8:	4618      	mov	r0, r3
 80108ea:	f003 fb9a 	bl	8014022 <RegionGetPhyParam>
 80108ee:	4603      	mov	r3, r0
 80108f0:	627b      	str	r3, [r7, #36]	@ 0x24
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1 = phyParam.Value;
 80108f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80108f4:	4a75      	ldr	r2, [pc, #468]	@ (8010acc <LoRaMacInitialization+0x384>)
 80108f6:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY2;
 80108fa:	2314      	movs	r3, #20
 80108fc:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010900:	4b72      	ldr	r3, [pc, #456]	@ (8010acc <LoRaMacInitialization+0x384>)
 8010902:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8010906:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 801090a:	4611      	mov	r1, r2
 801090c:	4618      	mov	r0, r3
 801090e:	f003 fb88 	bl	8014022 <RegionGetPhyParam>
 8010912:	4603      	mov	r3, r0
 8010914:	627b      	str	r3, [r7, #36]	@ 0x24
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2 = phyParam.Value;
 8010916:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010918:	4a6c      	ldr	r2, [pc, #432]	@ (8010acc <LoRaMacInitialization+0x384>)
 801091a:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac

    getPhy.Attribute = PHY_DEF_DR1_OFFSET;
 801091e:	2317      	movs	r3, #23
 8010920:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010924:	4b69      	ldr	r3, [pc, #420]	@ (8010acc <LoRaMacInitialization+0x384>)
 8010926:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 801092a:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 801092e:	4611      	mov	r1, r2
 8010930:	4618      	mov	r0, r3
 8010932:	f003 fb76 	bl	8014022 <RegionGetPhyParam>
 8010936:	4603      	mov	r3, r0
 8010938:	627b      	str	r3, [r7, #36]	@ 0x24
    Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset = phyParam.Value;
 801093a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801093c:	b2da      	uxtb	r2, r3
 801093e:	4b63      	ldr	r3, [pc, #396]	@ (8010acc <LoRaMacInitialization+0x384>)
 8010940:	f883 20b1 	strb.w	r2, [r3, #177]	@ 0xb1

    getPhy.Attribute = PHY_DEF_RX2_FREQUENCY;
 8010944:	2318      	movs	r3, #24
 8010946:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801094a:	4b60      	ldr	r3, [pc, #384]	@ (8010acc <LoRaMacInitialization+0x384>)
 801094c:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8010950:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8010954:	4611      	mov	r1, r2
 8010956:	4618      	mov	r0, r3
 8010958:	f003 fb63 	bl	8014022 <RegionGetPhyParam>
 801095c:	4603      	mov	r3, r0
 801095e:	627b      	str	r3, [r7, #36]	@ 0x24
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Frequency = phyParam.Value;
 8010960:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010962:	4a5a      	ldr	r2, [pc, #360]	@ (8010acc <LoRaMacInitialization+0x384>)
 8010964:	f8c2 30b4 	str.w	r3, [r2, #180]	@ 0xb4
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Frequency = phyParam.Value;
 8010968:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801096a:	4a58      	ldr	r2, [pc, #352]	@ (8010acc <LoRaMacInitialization+0x384>)
 801096c:	f8c2 30bc 	str.w	r3, [r2, #188]	@ 0xbc

    getPhy.Attribute = PHY_DEF_RX2_DR;
 8010970:	2319      	movs	r3, #25
 8010972:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010976:	4b55      	ldr	r3, [pc, #340]	@ (8010acc <LoRaMacInitialization+0x384>)
 8010978:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 801097c:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8010980:	4611      	mov	r1, r2
 8010982:	4618      	mov	r0, r3
 8010984:	f003 fb4d 	bl	8014022 <RegionGetPhyParam>
 8010988:	4603      	mov	r3, r0
 801098a:	627b      	str	r3, [r7, #36]	@ 0x24
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Datarate = phyParam.Value;
 801098c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801098e:	b2da      	uxtb	r2, r3
 8010990:	4b4e      	ldr	r3, [pc, #312]	@ (8010acc <LoRaMacInitialization+0x384>)
 8010992:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Datarate = phyParam.Value;
 8010996:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010998:	b2da      	uxtb	r2, r3
 801099a:	4b4c      	ldr	r3, [pc, #304]	@ (8010acc <LoRaMacInitialization+0x384>)
 801099c:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

    getPhy.Attribute = PHY_DEF_UPLINK_DWELL_TIME;
 80109a0:	231e      	movs	r3, #30
 80109a2:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80109a6:	4b49      	ldr	r3, [pc, #292]	@ (8010acc <LoRaMacInitialization+0x384>)
 80109a8:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80109ac:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 80109b0:	4611      	mov	r1, r2
 80109b2:	4618      	mov	r0, r3
 80109b4:	f003 fb35 	bl	8014022 <RegionGetPhyParam>
 80109b8:	4603      	mov	r3, r0
 80109ba:	627b      	str	r3, [r7, #36]	@ 0x24
    Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime = phyParam.Value;
 80109bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80109be:	b2da      	uxtb	r2, r3
 80109c0:	4b42      	ldr	r3, [pc, #264]	@ (8010acc <LoRaMacInitialization+0x384>)
 80109c2:	f883 20c4 	strb.w	r2, [r3, #196]	@ 0xc4

    getPhy.Attribute = PHY_DEF_DOWNLINK_DWELL_TIME;
 80109c6:	231f      	movs	r3, #31
 80109c8:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80109cc:	4b3f      	ldr	r3, [pc, #252]	@ (8010acc <LoRaMacInitialization+0x384>)
 80109ce:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80109d2:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 80109d6:	4611      	mov	r1, r2
 80109d8:	4618      	mov	r0, r3
 80109da:	f003 fb22 	bl	8014022 <RegionGetPhyParam>
 80109de:	4603      	mov	r3, r0
 80109e0:	627b      	str	r3, [r7, #36]	@ 0x24
    Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime = phyParam.Value;
 80109e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80109e4:	b2da      	uxtb	r2, r3
 80109e6:	4b39      	ldr	r3, [pc, #228]	@ (8010acc <LoRaMacInitialization+0x384>)
 80109e8:	f883 20c5 	strb.w	r2, [r3, #197]	@ 0xc5

    getPhy.Attribute = PHY_DEF_MAX_EIRP;
 80109ec:	2320      	movs	r3, #32
 80109ee:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80109f2:	4b36      	ldr	r3, [pc, #216]	@ (8010acc <LoRaMacInitialization+0x384>)
 80109f4:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80109f8:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 80109fc:	4611      	mov	r1, r2
 80109fe:	4618      	mov	r0, r3
 8010a00:	f003 fb0f 	bl	8014022 <RegionGetPhyParam>
 8010a04:	4603      	mov	r3, r0
 8010a06:	627b      	str	r3, [r7, #36]	@ 0x24
    Nvm.MacGroup2.MacParamsDefaults.MaxEirp = phyParam.fValue;
 8010a08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010a0a:	4a30      	ldr	r2, [pc, #192]	@ (8010acc <LoRaMacInitialization+0x384>)
 8010a0c:	f8c2 30c8 	str.w	r3, [r2, #200]	@ 0xc8

    getPhy.Attribute = PHY_DEF_ANTENNA_GAIN;
 8010a10:	2321      	movs	r3, #33	@ 0x21
 8010a12:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010a16:	4b2d      	ldr	r3, [pc, #180]	@ (8010acc <LoRaMacInitialization+0x384>)
 8010a18:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8010a1c:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8010a20:	4611      	mov	r1, r2
 8010a22:	4618      	mov	r0, r3
 8010a24:	f003 fafd 	bl	8014022 <RegionGetPhyParam>
 8010a28:	4603      	mov	r3, r0
 8010a2a:	627b      	str	r3, [r7, #36]	@ 0x24
    Nvm.MacGroup2.MacParamsDefaults.AntennaGain = phyParam.fValue;
 8010a2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010a2e:	4a27      	ldr	r2, [pc, #156]	@ (8010acc <LoRaMacInitialization+0x384>)
 8010a30:	f8c2 30cc 	str.w	r3, [r2, #204]	@ 0xcc

    getPhy.Attribute = PHY_DEF_ADR_ACK_LIMIT;
 8010a34:	230b      	movs	r3, #11
 8010a36:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010a3a:	4b24      	ldr	r3, [pc, #144]	@ (8010acc <LoRaMacInitialization+0x384>)
 8010a3c:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8010a40:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8010a44:	4611      	mov	r1, r2
 8010a46:	4618      	mov	r0, r3
 8010a48:	f003 faeb 	bl	8014022 <RegionGetPhyParam>
 8010a4c:	4603      	mov	r3, r0
 8010a4e:	627b      	str	r3, [r7, #36]	@ 0x24
    Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit = phyParam.Value;
 8010a50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010a52:	b29a      	uxth	r2, r3
 8010a54:	4b1d      	ldr	r3, [pc, #116]	@ (8010acc <LoRaMacInitialization+0x384>)
 8010a56:	f8a3 20d0 	strh.w	r2, [r3, #208]	@ 0xd0

    getPhy.Attribute = PHY_DEF_ADR_ACK_DELAY;
 8010a5a:	230c      	movs	r3, #12
 8010a5c:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010a60:	4b1a      	ldr	r3, [pc, #104]	@ (8010acc <LoRaMacInitialization+0x384>)
 8010a62:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8010a66:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8010a6a:	4611      	mov	r1, r2
 8010a6c:	4618      	mov	r0, r3
 8010a6e:	f003 fad8 	bl	8014022 <RegionGetPhyParam>
 8010a72:	4603      	mov	r3, r0
 8010a74:	627b      	str	r3, [r7, #36]	@ 0x24
    Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay = phyParam.Value;
 8010a76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010a78:	b29a      	uxth	r2, r3
 8010a7a:	4b14      	ldr	r3, [pc, #80]	@ (8010acc <LoRaMacInitialization+0x384>)
 8010a7c:	f8a3 20d2 	strh.w	r2, [r3, #210]	@ 0xd2

    // Init parameters which are not set in function ResetMacParameters
    Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans = 1;
 8010a80:	4b12      	ldr	r3, [pc, #72]	@ (8010acc <LoRaMacInitialization+0x384>)
 8010a82:	2201      	movs	r2, #1
 8010a84:	f883 20b0 	strb.w	r2, [r3, #176]	@ 0xb0
    Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = 10;
 8010a88:	4b10      	ldr	r3, [pc, #64]	@ (8010acc <LoRaMacInitialization+0x384>)
 8010a8a:	220a      	movs	r2, #10
 8010a8c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = 6;
 8010a90:	4b0e      	ldr	r3, [pc, #56]	@ (8010acc <LoRaMacInitialization+0x384>)
 8010a92:	2206      	movs	r2, #6
 8010a94:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError;
 8010a98:	4b0c      	ldr	r3, [pc, #48]	@ (8010acc <LoRaMacInitialization+0x384>)
 8010a9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8010a9e:	4a0b      	ldr	r2, [pc, #44]	@ (8010acc <LoRaMacInitialization+0x384>)
 8010aa0:	64d3      	str	r3, [r2, #76]	@ 0x4c
    Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols;
 8010aa2:	4b0a      	ldr	r3, [pc, #40]	@ (8010acc <LoRaMacInitialization+0x384>)
 8010aa4:	f893 2098 	ldrb.w	r2, [r3, #152]	@ 0x98
 8010aa8:	4b08      	ldr	r3, [pc, #32]	@ (8010acc <LoRaMacInitialization+0x384>)
 8010aaa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    Nvm.MacGroup2.MacParams.MaxRxWindow = Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow;
 8010aae:	4b07      	ldr	r3, [pc, #28]	@ (8010acc <LoRaMacInitialization+0x384>)
 8010ab0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8010ab4:	4a05      	ldr	r2, [pc, #20]	@ (8010acc <LoRaMacInitialization+0x384>)
 8010ab6:	6553      	str	r3, [r2, #84]	@ 0x54
    Nvm.MacGroup2.MacParams.ReceiveDelay1 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1;
 8010ab8:	4b04      	ldr	r3, [pc, #16]	@ (8010acc <LoRaMacInitialization+0x384>)
 8010aba:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8010abe:	4a03      	ldr	r2, [pc, #12]	@ (8010acc <LoRaMacInitialization+0x384>)
 8010ac0:	6593      	str	r3, [r2, #88]	@ 0x58
    Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2;
 8010ac2:	4b02      	ldr	r3, [pc, #8]	@ (8010acc <LoRaMacInitialization+0x384>)
 8010ac4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8010ac8:	e006      	b.n	8010ad8 <LoRaMacInitialization+0x390>
 8010aca:	bf00      	nop
 8010acc:	20000b34 	.word	0x20000b34
 8010ad0:	2000062c 	.word	0x2000062c
 8010ad4:	01000300 	.word	0x01000300
 8010ad8:	4a5f      	ldr	r2, [pc, #380]	@ (8010c58 <LoRaMacInitialization+0x510>)
 8010ada:	65d3      	str	r3, [r2, #92]	@ 0x5c
    Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1;
 8010adc:	4b5e      	ldr	r3, [pc, #376]	@ (8010c58 <LoRaMacInitialization+0x510>)
 8010ade:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8010ae2:	4a5d      	ldr	r2, [pc, #372]	@ (8010c58 <LoRaMacInitialization+0x510>)
 8010ae4:	6613      	str	r3, [r2, #96]	@ 0x60
    Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2;
 8010ae6:	4b5c      	ldr	r3, [pc, #368]	@ (8010c58 <LoRaMacInitialization+0x510>)
 8010ae8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8010aec:	4a5a      	ldr	r2, [pc, #360]	@ (8010c58 <LoRaMacInitialization+0x510>)
 8010aee:	6653      	str	r3, [r2, #100]	@ 0x64
    Nvm.MacGroup2.MacParams.ChannelsNbTrans = Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans;
 8010af0:	4b59      	ldr	r3, [pc, #356]	@ (8010c58 <LoRaMacInitialization+0x510>)
 8010af2:	f893 20b0 	ldrb.w	r2, [r3, #176]	@ 0xb0
 8010af6:	4b58      	ldr	r3, [pc, #352]	@ (8010c58 <LoRaMacInitialization+0x510>)
 8010af8:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_DEFAULTS;
 8010afc:	2300      	movs	r3, #0
 8010afe:	f887 3020 	strb.w	r3, [r7, #32]
    params.NvmGroup1 = &Nvm.RegionGroup1;
 8010b02:	4b56      	ldr	r3, [pc, #344]	@ (8010c5c <LoRaMacInitialization+0x514>)
 8010b04:	61bb      	str	r3, [r7, #24]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 8010b06:	4b56      	ldr	r3, [pc, #344]	@ (8010c60 <LoRaMacInitialization+0x518>)
 8010b08:	61fb      	str	r3, [r7, #28]
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 8010b0a:	4b53      	ldr	r3, [pc, #332]	@ (8010c58 <LoRaMacInitialization+0x510>)
 8010b0c:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8010b10:	f107 0218 	add.w	r2, r7, #24
 8010b14:	4611      	mov	r1, r2
 8010b16:	4618      	mov	r0, r3
 8010b18:	f003 faac 	bl	8014074 <RegionInitDefaults>
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    // FPort 224 is enabled by default.
    Nvm.MacGroup2.IsCertPortOn = true;
#endif /* LORAMAC_VERSION */

    MacCtx.MacCallbacks = callbacks;
 8010b1c:	4a51      	ldr	r2, [pc, #324]	@ (8010c64 <LoRaMacInitialization+0x51c>)
 8010b1e:	693b      	ldr	r3, [r7, #16]
 8010b20:	f8c2 3348 	str.w	r3, [r2, #840]	@ 0x348
    ResetMacParameters( false );
 8010b24:	2000      	movs	r0, #0
 8010b26:	f7ff f8b7 	bl	800fc98 <ResetMacParameters>

    Nvm.MacGroup2.PublicNetwork = true;
 8010b2a:	4b4b      	ldr	r3, [pc, #300]	@ (8010c58 <LoRaMacInitialization+0x510>)
 8010b2c:	2201      	movs	r2, #1
 8010b2e:	f883 2119 	strb.w	r2, [r3, #281]	@ 0x119

    MacCtx.MacPrimitives = primitives;
 8010b32:	4a4c      	ldr	r2, [pc, #304]	@ (8010c64 <LoRaMacInitialization+0x51c>)
 8010b34:	697b      	ldr	r3, [r7, #20]
 8010b36:	f8c2 3344 	str.w	r3, [r2, #836]	@ 0x344
    MacCtx.MacFlags.Value = 0;
 8010b3a:	4b4a      	ldr	r3, [pc, #296]	@ (8010c64 <LoRaMacInitialization+0x51c>)
 8010b3c:	2200      	movs	r2, #0
 8010b3e:	f883 2481 	strb.w	r2, [r3, #1153]	@ 0x481
    MacCtx.MacState = LORAMAC_STOPPED;
 8010b42:	4b48      	ldr	r3, [pc, #288]	@ (8010c64 <LoRaMacInitialization+0x51c>)
 8010b44:	2201      	movs	r2, #1
 8010b46:	f8c3 2340 	str.w	r2, [r3, #832]	@ 0x340

    // Reset duty cycle times
    Nvm.MacGroup1.LastTxDoneTime = 0;
 8010b4a:	4b43      	ldr	r3, [pc, #268]	@ (8010c58 <LoRaMacInitialization+0x510>)
 8010b4c:	2200      	movs	r2, #0
 8010b4e:	62da      	str	r2, [r3, #44]	@ 0x2c
    Nvm.MacGroup1.AggregatedTimeOff = 0;
 8010b50:	4b41      	ldr	r3, [pc, #260]	@ (8010c58 <LoRaMacInitialization+0x510>)
 8010b52:	2200      	movs	r2, #0
 8010b54:	631a      	str	r2, [r3, #48]	@ 0x30

    // Initialize timers
    TimerInit( &MacCtx.TxDelayedTimer, OnTxDelayedTimerEvent );
 8010b56:	2300      	movs	r3, #0
 8010b58:	9300      	str	r3, [sp, #0]
 8010b5a:	4b43      	ldr	r3, [pc, #268]	@ (8010c68 <LoRaMacInitialization+0x520>)
 8010b5c:	2200      	movs	r2, #0
 8010b5e:	f04f 31ff 	mov.w	r1, #4294967295
 8010b62:	4842      	ldr	r0, [pc, #264]	@ (8010c6c <LoRaMacInitialization+0x524>)
 8010b64:	f009 fe78 	bl	801a858 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer1, OnRxWindow1TimerEvent );
 8010b68:	2300      	movs	r3, #0
 8010b6a:	9300      	str	r3, [sp, #0]
 8010b6c:	4b40      	ldr	r3, [pc, #256]	@ (8010c70 <LoRaMacInitialization+0x528>)
 8010b6e:	2200      	movs	r2, #0
 8010b70:	f04f 31ff 	mov.w	r1, #4294967295
 8010b74:	483f      	ldr	r0, [pc, #252]	@ (8010c74 <LoRaMacInitialization+0x52c>)
 8010b76:	f009 fe6f 	bl	801a858 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer2, OnRxWindow2TimerEvent );
 8010b7a:	2300      	movs	r3, #0
 8010b7c:	9300      	str	r3, [sp, #0]
 8010b7e:	4b3e      	ldr	r3, [pc, #248]	@ (8010c78 <LoRaMacInitialization+0x530>)
 8010b80:	2200      	movs	r2, #0
 8010b82:	f04f 31ff 	mov.w	r1, #4294967295
 8010b86:	483d      	ldr	r0, [pc, #244]	@ (8010c7c <LoRaMacInitialization+0x534>)
 8010b88:	f009 fe66 	bl	801a858 <UTIL_TIMER_Create>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerInit( &MacCtx.AckTimeoutTimer, OnAckTimeoutTimerEvent );
 8010b8c:	2300      	movs	r3, #0
 8010b8e:	9300      	str	r3, [sp, #0]
 8010b90:	4b3b      	ldr	r3, [pc, #236]	@ (8010c80 <LoRaMacInitialization+0x538>)
 8010b92:	2200      	movs	r2, #0
 8010b94:	f04f 31ff 	mov.w	r1, #4294967295
 8010b98:	483a      	ldr	r0, [pc, #232]	@ (8010c84 <LoRaMacInitialization+0x53c>)
 8010b9a:	f009 fe5d 	bl	801a858 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.Rejoin1CycleTimer, OnRejoin1CycleTimerEvent );
    TimerInit( &MacCtx.ForceRejoinReqCycleTimer, OnForceRejoinReqCycleTimerEvent );
#endif /* LORAMAC_VERSION */

    // Store the current initialization time
    Nvm.MacGroup2.InitializationTime = SysTimeGetMcuTime( );
 8010b9e:	4c2e      	ldr	r4, [pc, #184]	@ (8010c58 <LoRaMacInitialization+0x510>)
 8010ba0:	463b      	mov	r3, r7
 8010ba2:	4618      	mov	r0, r3
 8010ba4:	f009 f9ce 	bl	8019f44 <SysTimeGetMcuTime>
 8010ba8:	f504 7390 	add.w	r3, r4, #288	@ 0x120
 8010bac:	463a      	mov	r2, r7
 8010bae:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010bb2:	e883 0003 	stmia.w	r3, {r0, r1}
    // Initialize MAC radio events
    LoRaMacRadioEvents.Value = 0;
#endif /* LORAMAC_VERSION */

    // Initialize Radio driver
    MacCtx.RadioEvents.TxDone = OnRadioTxDone;
 8010bb6:	4b2b      	ldr	r3, [pc, #172]	@ (8010c64 <LoRaMacInitialization+0x51c>)
 8010bb8:	4a33      	ldr	r2, [pc, #204]	@ (8010c88 <LoRaMacInitialization+0x540>)
 8010bba:	f8c3 234c 	str.w	r2, [r3, #844]	@ 0x34c
    MacCtx.RadioEvents.RxDone = OnRadioRxDone;
 8010bbe:	4b29      	ldr	r3, [pc, #164]	@ (8010c64 <LoRaMacInitialization+0x51c>)
 8010bc0:	4a32      	ldr	r2, [pc, #200]	@ (8010c8c <LoRaMacInitialization+0x544>)
 8010bc2:	f8c3 2354 	str.w	r2, [r3, #852]	@ 0x354
    MacCtx.RadioEvents.RxError = OnRadioRxError;
 8010bc6:	4b27      	ldr	r3, [pc, #156]	@ (8010c64 <LoRaMacInitialization+0x51c>)
 8010bc8:	4a31      	ldr	r2, [pc, #196]	@ (8010c90 <LoRaMacInitialization+0x548>)
 8010bca:	f8c3 235c 	str.w	r2, [r3, #860]	@ 0x35c
    MacCtx.RadioEvents.TxTimeout = OnRadioTxTimeout;
 8010bce:	4b25      	ldr	r3, [pc, #148]	@ (8010c64 <LoRaMacInitialization+0x51c>)
 8010bd0:	4a30      	ldr	r2, [pc, #192]	@ (8010c94 <LoRaMacInitialization+0x54c>)
 8010bd2:	f8c3 2350 	str.w	r2, [r3, #848]	@ 0x350
    MacCtx.RadioEvents.RxTimeout = OnRadioRxTimeout;
 8010bd6:	4b23      	ldr	r3, [pc, #140]	@ (8010c64 <LoRaMacInitialization+0x51c>)
 8010bd8:	4a2f      	ldr	r2, [pc, #188]	@ (8010c98 <LoRaMacInitialization+0x550>)
 8010bda:	f8c3 2358 	str.w	r2, [r3, #856]	@ 0x358
    Radio.Init( &MacCtx.RadioEvents );
 8010bde:	4b2f      	ldr	r3, [pc, #188]	@ (8010c9c <LoRaMacInitialization+0x554>)
 8010be0:	681b      	ldr	r3, [r3, #0]
 8010be2:	482f      	ldr	r0, [pc, #188]	@ (8010ca0 <LoRaMacInitialization+0x558>)
 8010be4:	4798      	blx	r3

    // Initialize the Secure Element driver
    if( SecureElementInit( &Nvm.SecureElement ) != SECURE_ELEMENT_SUCCESS )
 8010be6:	482f      	ldr	r0, [pc, #188]	@ (8010ca4 <LoRaMacInitialization+0x55c>)
 8010be8:	f7fa fe30 	bl	800b84c <SecureElementInit>
 8010bec:	4603      	mov	r3, r0
 8010bee:	2b00      	cmp	r3, #0
 8010bf0:	d001      	beq.n	8010bf6 <LoRaMacInitialization+0x4ae>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 8010bf2:	2311      	movs	r3, #17
 8010bf4:	e02b      	b.n	8010c4e <LoRaMacInitialization+0x506>
    }

    // Initialize Crypto module
    if( LoRaMacCryptoInit( &Nvm.Crypto ) != LORAMAC_CRYPTO_SUCCESS )
 8010bf6:	4818      	ldr	r0, [pc, #96]	@ (8010c58 <LoRaMacInitialization+0x510>)
 8010bf8:	f002 fb2a 	bl	8013250 <LoRaMacCryptoInit>
 8010bfc:	4603      	mov	r3, r0
 8010bfe:	2b00      	cmp	r3, #0
 8010c00:	d001      	beq.n	8010c06 <LoRaMacInitialization+0x4be>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 8010c02:	2311      	movs	r3, #17
 8010c04:	e023      	b.n	8010c4e <LoRaMacInitialization+0x506>
    }

    // Initialize MAC commands module
    if( LoRaMacCommandsInit( ) != LORAMAC_COMMANDS_SUCCESS )
 8010c06:	f001 fc25 	bl	8012454 <LoRaMacCommandsInit>
 8010c0a:	4603      	mov	r3, r0
 8010c0c:	2b00      	cmp	r3, #0
 8010c0e:	d001      	beq.n	8010c14 <LoRaMacInitialization+0x4cc>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8010c10:	2313      	movs	r3, #19
 8010c12:	e01c      	b.n	8010c4e <LoRaMacInitialization+0x506>
    }

    // Set multicast downlink counter reference
    if( LoRaMacCryptoSetMulticastReference( Nvm.MacGroup2.MulticastChannelList ) != LORAMAC_CRYPTO_SUCCESS )
 8010c14:	4824      	ldr	r0, [pc, #144]	@ (8010ca8 <LoRaMacInitialization+0x560>)
 8010c16:	f002 fbe5 	bl	80133e4 <LoRaMacCryptoSetMulticastReference>
 8010c1a:	4603      	mov	r3, r0
 8010c1c:	2b00      	cmp	r3, #0
 8010c1e:	d001      	beq.n	8010c24 <LoRaMacInitialization+0x4dc>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 8010c20:	2311      	movs	r3, #17
 8010c22:	e014      	b.n	8010c4e <LoRaMacInitialization+0x506>
    }

    // Random seed initialization
    srand1( Radio.Random( ) );
 8010c24:	4b1d      	ldr	r3, [pc, #116]	@ (8010c9c <LoRaMacInitialization+0x554>)
 8010c26:	695b      	ldr	r3, [r3, #20]
 8010c28:	4798      	blx	r3
 8010c2a:	4603      	mov	r3, r0
 8010c2c:	4618      	mov	r0, r3
 8010c2e:	f005 fcdf 	bl	80165f0 <srand1>

    Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 8010c32:	4b1a      	ldr	r3, [pc, #104]	@ (8010c9c <LoRaMacInitialization+0x554>)
 8010c34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010c36:	4a08      	ldr	r2, [pc, #32]	@ (8010c58 <LoRaMacInitialization+0x510>)
 8010c38:	f892 2119 	ldrb.w	r2, [r2, #281]	@ 0x119
 8010c3c:	4610      	mov	r0, r2
 8010c3e:	4798      	blx	r3
    Radio.Sleep( );
 8010c40:	4b16      	ldr	r3, [pc, #88]	@ (8010c9c <LoRaMacInitialization+0x554>)
 8010c42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010c44:	4798      	blx	r3

    LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 8010c46:	2001      	movs	r0, #1
 8010c48:	f7fd fb32 	bl	800e2b0 <LoRaMacEnableRequests>

    return LORAMAC_STATUS_OK;
 8010c4c:	2300      	movs	r3, #0
}
 8010c4e:	4618      	mov	r0, r3
 8010c50:	3734      	adds	r7, #52	@ 0x34
 8010c52:	46bd      	mov	sp, r7
 8010c54:	bd90      	pop	{r4, r7, pc}
 8010c56:	bf00      	nop
 8010c58:	20000b34 	.word	0x20000b34
 8010c5c:	20000d54 	.word	0x20000d54
 8010c60:	20000de8 	.word	0x20000de8
 8010c64:	2000062c 	.word	0x2000062c
 8010c68:	0800e7f1 	.word	0x0800e7f1
 8010c6c:	20000994 	.word	0x20000994
 8010c70:	0800e865 	.word	0x0800e865
 8010c74:	200009ac 	.word	0x200009ac
 8010c78:	0800e8d1 	.word	0x0800e8d1
 8010c7c:	200009c4 	.word	0x200009c4
 8010c80:	0800e945 	.word	0x0800e945
 8010c84:	20000a20 	.word	0x20000a20
 8010c88:	0800d3b1 	.word	0x0800d3b1
 8010c8c:	0800d40d 	.word	0x0800d40d
 8010c90:	0800d4a5 	.word	0x0800d4a5
 8010c94:	0800d479 	.word	0x0800d479
 8010c98:	0800d4c1 	.word	0x0800d4c1
 8010c9c:	0801bd08 	.word	0x0801bd08
 8010ca0:	20000978 	.word	0x20000978
 8010ca4:	20000c7c 	.word	0x20000c7c
 8010ca8:	20000c1c 	.word	0x20000c1c

08010cac <LoRaMacStart>:

LoRaMacStatus_t LoRaMacStart( void )
{
 8010cac:	b580      	push	{r7, lr}
 8010cae:	af00      	add	r7, sp, #0
    MacCtx.MacState = LORAMAC_IDLE;
 8010cb0:	4b04      	ldr	r3, [pc, #16]	@ (8010cc4 <LoRaMacStart+0x18>)
 8010cb2:	2200      	movs	r2, #0
 8010cb4:	f8c3 2340 	str.w	r2, [r3, #832]	@ 0x340
    UpdateRxSlotIdleState();
 8010cb8:	f7fc fc18 	bl	800d4ec <UpdateRxSlotIdleState>
    return LORAMAC_STATUS_OK;
 8010cbc:	2300      	movs	r3, #0
}
 8010cbe:	4618      	mov	r0, r3
 8010cc0:	bd80      	pop	{r7, pc}
 8010cc2:	bf00      	nop
 8010cc4:	2000062c 	.word	0x2000062c

08010cc8 <LoRaMacStop>:

LoRaMacStatus_t LoRaMacStop( void )
{
 8010cc8:	b580      	push	{r7, lr}
 8010cca:	af00      	add	r7, sp, #0
    if( LoRaMacIsBusy( ) == false )
 8010ccc:	f7fd fac4 	bl	800e258 <LoRaMacIsBusy>
 8010cd0:	4603      	mov	r3, r0
 8010cd2:	f083 0301 	eor.w	r3, r3, #1
 8010cd6:	b2db      	uxtb	r3, r3
 8010cd8:	2b00      	cmp	r3, #0
 8010cda:	d00d      	beq.n	8010cf8 <LoRaMacStop+0x30>
    {
        if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 8010cdc:	4b0b      	ldr	r3, [pc, #44]	@ (8010d0c <LoRaMacStop+0x44>)
 8010cde:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 8010ce2:	2b02      	cmp	r3, #2
 8010ce4:	d102      	bne.n	8010cec <LoRaMacStop+0x24>
        {
            Radio.Sleep( );
 8010ce6:	4b0a      	ldr	r3, [pc, #40]	@ (8010d10 <LoRaMacStop+0x48>)
 8010ce8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010cea:	4798      	blx	r3
        }
        MacCtx.MacState = LORAMAC_STOPPED;
 8010cec:	4b09      	ldr	r3, [pc, #36]	@ (8010d14 <LoRaMacStop+0x4c>)
 8010cee:	2201      	movs	r2, #1
 8010cf0:	f8c3 2340 	str.w	r2, [r3, #832]	@ 0x340
        return LORAMAC_STATUS_OK;
 8010cf4:	2300      	movs	r3, #0
 8010cf6:	e007      	b.n	8010d08 <LoRaMacStop+0x40>
    }
    else if(  MacCtx.MacState == LORAMAC_STOPPED )
 8010cf8:	4b06      	ldr	r3, [pc, #24]	@ (8010d14 <LoRaMacStop+0x4c>)
 8010cfa:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 8010cfe:	2b01      	cmp	r3, #1
 8010d00:	d101      	bne.n	8010d06 <LoRaMacStop+0x3e>
    {
        return LORAMAC_STATUS_OK;
 8010d02:	2300      	movs	r3, #0
 8010d04:	e000      	b.n	8010d08 <LoRaMacStop+0x40>
    }
    return LORAMAC_STATUS_BUSY;
 8010d06:	2301      	movs	r3, #1
}
 8010d08:	4618      	mov	r0, r3
 8010d0a:	bd80      	pop	{r7, pc}
 8010d0c:	20000b34 	.word	0x20000b34
 8010d10:	0801bd08 	.word	0x0801bd08
 8010d14:	2000062c 	.word	0x2000062c

08010d18 <LoRaMacHalt>:

LoRaMacStatus_t LoRaMacHalt( void )
{
 8010d18:	b580      	push	{r7, lr}
 8010d1a:	af00      	add	r7, sp, #0
    // Stop Timers
    TimerStop( &MacCtx.TxDelayedTimer );
 8010d1c:	480d      	ldr	r0, [pc, #52]	@ (8010d54 <LoRaMacHalt+0x3c>)
 8010d1e:	f009 fe3f 	bl	801a9a0 <UTIL_TIMER_Stop>
    TimerStop( &MacCtx.RxWindowTimer1 );
 8010d22:	480d      	ldr	r0, [pc, #52]	@ (8010d58 <LoRaMacHalt+0x40>)
 8010d24:	f009 fe3c 	bl	801a9a0 <UTIL_TIMER_Stop>
    TimerStop( &MacCtx.RxWindowTimer2 );
 8010d28:	480c      	ldr	r0, [pc, #48]	@ (8010d5c <LoRaMacHalt+0x44>)
 8010d2a:	f009 fe39 	bl	801a9a0 <UTIL_TIMER_Stop>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerStop( &MacCtx.AckTimeoutTimer );
 8010d2e:	480c      	ldr	r0, [pc, #48]	@ (8010d60 <LoRaMacHalt+0x48>)
 8010d30:	f009 fe36 	bl	801a9a0 <UTIL_TIMER_Stop>
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    TimerStop( &MacCtx.RetransmitTimeoutTimer );
#endif /* LORAMAC_VERSION */

    // Take care about class B
    LoRaMacClassBHaltBeaconing( );
 8010d34:	f001 fa0d 	bl	8012152 <LoRaMacClassBHaltBeaconing>

    // Switch off Radio
    Radio.Sleep( );
 8010d38:	4b0a      	ldr	r3, [pc, #40]	@ (8010d64 <LoRaMacHalt+0x4c>)
 8010d3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010d3c:	4798      	blx	r3

    MacCtx.MacState = LORAMAC_IDLE;
 8010d3e:	4b0a      	ldr	r3, [pc, #40]	@ (8010d68 <LoRaMacHalt+0x50>)
 8010d40:	2200      	movs	r2, #0
 8010d42:	f8c3 2340 	str.w	r2, [r3, #832]	@ 0x340

    // Preserve the Nvm context if data retention
    memcpy1( ( uint8_t* ) &NvmBackup, ( uint8_t* ) &Nvm, sizeof( LoRaMacNvmData_t ) );
#endif /* CONTEXT_MANAGEMENT_ENABLED */

    MacCtx.MacState = LORAMAC_STOPPED;
 8010d46:	4b08      	ldr	r3, [pc, #32]	@ (8010d68 <LoRaMacHalt+0x50>)
 8010d48:	2201      	movs	r2, #1
 8010d4a:	f8c3 2340 	str.w	r2, [r3, #832]	@ 0x340

    return LORAMAC_STATUS_OK;
 8010d4e:	2300      	movs	r3, #0
}
 8010d50:	4618      	mov	r0, r3
 8010d52:	bd80      	pop	{r7, pc}
 8010d54:	20000994 	.word	0x20000994
 8010d58:	200009ac 	.word	0x200009ac
 8010d5c:	200009c4 	.word	0x200009c4
 8010d60:	20000a20 	.word	0x20000a20
 8010d64:	0801bd08 	.word	0x0801bd08
 8010d68:	2000062c 	.word	0x2000062c

08010d6c <LoRaMacQueryTxPossible>:

LoRaMacStatus_t LoRaMacQueryTxPossible( uint8_t size, LoRaMacTxInfo_t* txInfo )
{
 8010d6c:	b580      	push	{r7, lr}
 8010d6e:	b08a      	sub	sp, #40	@ 0x28
 8010d70:	af00      	add	r7, sp, #0
 8010d72:	4603      	mov	r3, r0
 8010d74:	6039      	str	r1, [r7, #0]
 8010d76:	71fb      	strb	r3, [r7, #7]
    CalcNextAdrParams_t adrNext;
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8010d78:	4b3e      	ldr	r3, [pc, #248]	@ (8010e74 <LoRaMacQueryTxPossible+0x108>)
 8010d7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010d7c:	613b      	str	r3, [r7, #16]
    int8_t datarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 8010d7e:	4b3d      	ldr	r3, [pc, #244]	@ (8010e74 <LoRaMacQueryTxPossible+0x108>)
 8010d80:	f993 30dd 	ldrsb.w	r3, [r3, #221]	@ 0xdd
 8010d84:	73fb      	strb	r3, [r7, #15]
    int8_t txPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 8010d86:	4b3b      	ldr	r3, [pc, #236]	@ (8010e74 <LoRaMacQueryTxPossible+0x108>)
 8010d88:	f993 30dc 	ldrsb.w	r3, [r3, #220]	@ 0xdc
 8010d8c:	73bb      	strb	r3, [r7, #14]
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    uint8_t nbTrans = MacCtx.ChannelsNbTransCounter;
#endif /* LORAMAC_VERSION */
    size_t macCmdsSize = 0;
 8010d8e:	2300      	movs	r3, #0
 8010d90:	60bb      	str	r3, [r7, #8]

    if( txInfo == NULL )
 8010d92:	683b      	ldr	r3, [r7, #0]
 8010d94:	2b00      	cmp	r3, #0
 8010d96:	d101      	bne.n	8010d9c <LoRaMacQueryTxPossible+0x30>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8010d98:	2303      	movs	r3, #3
 8010d9a:	e066      	b.n	8010e6a <LoRaMacQueryTxPossible+0xfe>
    }

    // Setup ADR request
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    adrNext.Version = Nvm.MacGroup2.Version;
 8010d9c:	4b35      	ldr	r3, [pc, #212]	@ (8010e74 <LoRaMacQueryTxPossible+0x108>)
 8010d9e:	f8d3 3128 	ldr.w	r3, [r3, #296]	@ 0x128
 8010da2:	617b      	str	r3, [r7, #20]
#endif /* LORAMAC_VERSION */
    adrNext.UpdateChanMask = false;
 8010da4:	2300      	movs	r3, #0
 8010da6:	763b      	strb	r3, [r7, #24]
    adrNext.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 8010da8:	4b32      	ldr	r3, [pc, #200]	@ (8010e74 <LoRaMacQueryTxPossible+0x108>)
 8010daa:	f893 311a 	ldrb.w	r3, [r3, #282]	@ 0x11a
 8010dae:	767b      	strb	r3, [r7, #25]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8010db0:	4b30      	ldr	r3, [pc, #192]	@ (8010e74 <LoRaMacQueryTxPossible+0x108>)
 8010db2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010db4:	61fb      	str	r3, [r7, #28]
    adrNext.AdrAckLimit = Nvm.MacGroup2.MacParams.AdrAckLimit;
 8010db6:	4b2f      	ldr	r3, [pc, #188]	@ (8010e74 <LoRaMacQueryTxPossible+0x108>)
 8010db8:	f8b3 3088 	ldrh.w	r3, [r3, #136]	@ 0x88
 8010dbc:	843b      	strh	r3, [r7, #32]
    adrNext.AdrAckDelay = Nvm.MacGroup2.MacParams.AdrAckDelay;
 8010dbe:	4b2d      	ldr	r3, [pc, #180]	@ (8010e74 <LoRaMacQueryTxPossible+0x108>)
 8010dc0:	f8b3 308a 	ldrh.w	r3, [r3, #138]	@ 0x8a
 8010dc4:	847b      	strh	r3, [r7, #34]	@ 0x22
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8010dc6:	4b2b      	ldr	r3, [pc, #172]	@ (8010e74 <LoRaMacQueryTxPossible+0x108>)
 8010dc8:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 8010dcc:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 8010dd0:	4b28      	ldr	r3, [pc, #160]	@ (8010e74 <LoRaMacQueryTxPossible+0x108>)
 8010dd2:	f993 3038 	ldrsb.w	r3, [r3, #56]	@ 0x38
 8010dd6:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    adrNext.NbTrans = MacCtx.ChannelsNbTransCounter;
#endif /* LORAMAC_VERSION */
    adrNext.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8010dda:	4b26      	ldr	r3, [pc, #152]	@ (8010e74 <LoRaMacQueryTxPossible+0x108>)
 8010ddc:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8010de0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    adrNext.Region = Nvm.MacGroup2.Region;
 8010de4:	4b23      	ldr	r3, [pc, #140]	@ (8010e74 <LoRaMacQueryTxPossible+0x108>)
 8010de6:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8010dea:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    // We call the function for information purposes only. We don't want to
    // apply the datarate, the tx power and the ADR ack counter.
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &adrAckCounter );
 8010dee:	f107 0310 	add.w	r3, r7, #16
 8010df2:	f107 020e 	add.w	r2, r7, #14
 8010df6:	f107 010f 	add.w	r1, r7, #15
 8010dfa:	f107 0014 	add.w	r0, r7, #20
 8010dfe:	f001 f913 	bl	8012028 <LoRaMacAdrCalcNext>
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &nbTrans, &adrAckCounter );
#endif /* LORAMAC_VERSION */

    txInfo->CurrentPossiblePayloadSize = GetMaxAppPayloadWithoutFOptsLength( datarate );
 8010e02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010e06:	4618      	mov	r0, r3
 8010e08:	f7fd feee 	bl	800ebe8 <GetMaxAppPayloadWithoutFOptsLength>
 8010e0c:	4603      	mov	r3, r0
 8010e0e:	461a      	mov	r2, r3
 8010e10:	683b      	ldr	r3, [r7, #0]
 8010e12:	705a      	strb	r2, [r3, #1]

    if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8010e14:	f107 0308 	add.w	r3, r7, #8
 8010e18:	4618      	mov	r0, r3
 8010e1a:	f001 fc21 	bl	8012660 <LoRaMacCommandsGetSizeSerializedCmds>
 8010e1e:	4603      	mov	r3, r0
 8010e20:	2b00      	cmp	r3, #0
 8010e22:	d001      	beq.n	8010e28 <LoRaMacQueryTxPossible+0xbc>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8010e24:	2313      	movs	r3, #19
 8010e26:	e020      	b.n	8010e6a <LoRaMacQueryTxPossible+0xfe>
    }

    // Verify if the MAC commands fit into the FOpts and into the maximum payload.
    if( ( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH >= macCmdsSize ) && ( txInfo->CurrentPossiblePayloadSize >= macCmdsSize ) )
 8010e28:	68bb      	ldr	r3, [r7, #8]
 8010e2a:	2b0f      	cmp	r3, #15
 8010e2c:	d819      	bhi.n	8010e62 <LoRaMacQueryTxPossible+0xf6>
 8010e2e:	683b      	ldr	r3, [r7, #0]
 8010e30:	785b      	ldrb	r3, [r3, #1]
 8010e32:	461a      	mov	r2, r3
 8010e34:	68bb      	ldr	r3, [r7, #8]
 8010e36:	429a      	cmp	r2, r3
 8010e38:	d313      	bcc.n	8010e62 <LoRaMacQueryTxPossible+0xf6>
    {
        txInfo->MaxPossibleApplicationDataSize = txInfo->CurrentPossiblePayloadSize - macCmdsSize;
 8010e3a:	683b      	ldr	r3, [r7, #0]
 8010e3c:	785a      	ldrb	r2, [r3, #1]
 8010e3e:	68bb      	ldr	r3, [r7, #8]
 8010e40:	b2db      	uxtb	r3, r3
 8010e42:	1ad3      	subs	r3, r2, r3
 8010e44:	b2da      	uxtb	r2, r3
 8010e46:	683b      	ldr	r3, [r7, #0]
 8010e48:	701a      	strb	r2, [r3, #0]

        // Verify if the application data together with MAC command fit into the maximum payload.
        if( txInfo->CurrentPossiblePayloadSize >= ( macCmdsSize + size ) )
 8010e4a:	683b      	ldr	r3, [r7, #0]
 8010e4c:	785b      	ldrb	r3, [r3, #1]
 8010e4e:	4619      	mov	r1, r3
 8010e50:	79fa      	ldrb	r2, [r7, #7]
 8010e52:	68bb      	ldr	r3, [r7, #8]
 8010e54:	4413      	add	r3, r2
 8010e56:	4299      	cmp	r1, r3
 8010e58:	d301      	bcc.n	8010e5e <LoRaMacQueryTxPossible+0xf2>
        {
            return LORAMAC_STATUS_OK;
 8010e5a:	2300      	movs	r3, #0
 8010e5c:	e005      	b.n	8010e6a <LoRaMacQueryTxPossible+0xfe>
        }
        else
        {
           return LORAMAC_STATUS_LENGTH_ERROR;
 8010e5e:	2308      	movs	r3, #8
 8010e60:	e003      	b.n	8010e6a <LoRaMacQueryTxPossible+0xfe>
        }
    }
    else
    {
        txInfo->MaxPossibleApplicationDataSize = 0;
 8010e62:	683b      	ldr	r3, [r7, #0]
 8010e64:	2200      	movs	r2, #0
 8010e66:	701a      	strb	r2, [r3, #0]
        return LORAMAC_STATUS_LENGTH_ERROR;
 8010e68:	2308      	movs	r3, #8
    }
}
 8010e6a:	4618      	mov	r0, r3
 8010e6c:	3728      	adds	r7, #40	@ 0x28
 8010e6e:	46bd      	mov	sp, r7
 8010e70:	bd80      	pop	{r7, pc}
 8010e72:	bf00      	nop
 8010e74:	20000b34 	.word	0x20000b34

08010e78 <LoRaMacMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibGetRequestConfirm( MibRequestConfirm_t* mibGet )
{
 8010e78:	b590      	push	{r4, r7, lr}
 8010e7a:	b087      	sub	sp, #28
 8010e7c:	af00      	add	r7, sp, #0
 8010e7e:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8010e80:	2300      	movs	r3, #0
 8010e82:	75fb      	strb	r3, [r7, #23]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( mibGet == NULL )
 8010e84:	687b      	ldr	r3, [r7, #4]
 8010e86:	2b00      	cmp	r3, #0
 8010e88:	d101      	bne.n	8010e8e <LoRaMacMibGetRequestConfirm+0x16>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8010e8a:	2303      	movs	r3, #3
 8010e8c:	e1c4      	b.n	8011218 <LoRaMacMibGetRequestConfirm+0x3a0>
    }

    switch( mibGet->Type )
 8010e8e:	687b      	ldr	r3, [r7, #4]
 8010e90:	781b      	ldrb	r3, [r3, #0]
 8010e92:	2b3f      	cmp	r3, #63	@ 0x3f
 8010e94:	f200 81b9 	bhi.w	801120a <LoRaMacMibGetRequestConfirm+0x392>
 8010e98:	a201      	add	r2, pc, #4	@ (adr r2, 8010ea0 <LoRaMacMibGetRequestConfirm+0x28>)
 8010e9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010e9e:	bf00      	nop
 8010ea0:	08010fa1 	.word	0x08010fa1
 8010ea4:	08010fad 	.word	0x08010fad
 8010ea8:	08010fb9 	.word	0x08010fb9
 8010eac:	08010fc5 	.word	0x08010fc5
 8010eb0:	08010fd1 	.word	0x08010fd1
 8010eb4:	08010fdd 	.word	0x08010fdd
 8010eb8:	08010fe9 	.word	0x08010fe9
 8010ebc:	0801120b 	.word	0x0801120b
 8010ec0:	0801120b 	.word	0x0801120b
 8010ec4:	0801120b 	.word	0x0801120b
 8010ec8:	0801120b 	.word	0x0801120b
 8010ecc:	0801120b 	.word	0x0801120b
 8010ed0:	0801120b 	.word	0x0801120b
 8010ed4:	0801120b 	.word	0x0801120b
 8010ed8:	0801120b 	.word	0x0801120b
 8010edc:	08010ffd 	.word	0x08010ffd
 8010ee0:	08011009 	.word	0x08011009
 8010ee4:	08011015 	.word	0x08011015
 8010ee8:	08011037 	.word	0x08011037
 8010eec:	08011049 	.word	0x08011049
 8010ef0:	0801105b 	.word	0x0801105b
 8010ef4:	0801106d 	.word	0x0801106d
 8010ef8:	080110a1 	.word	0x080110a1
 8010efc:	0801107f 	.word	0x0801107f
 8010f00:	080110c3 	.word	0x080110c3
 8010f04:	080110cf 	.word	0x080110cf
 8010f08:	080110d9 	.word	0x080110d9
 8010f0c:	080110e3 	.word	0x080110e3
 8010f10:	080110ed 	.word	0x080110ed
 8010f14:	080110f7 	.word	0x080110f7
 8010f18:	08011101 	.word	0x08011101
 8010f1c:	0801110d 	.word	0x0801110d
 8010f20:	08011125 	.word	0x08011125
 8010f24:	08011119 	.word	0x08011119
 8010f28:	08011131 	.word	0x08011131
 8010f2c:	0801113b 	.word	0x0801113b
 8010f30:	08011147 	.word	0x08011147
 8010f34:	08011163 	.word	0x08011163
 8010f38:	08011153 	.word	0x08011153
 8010f3c:	0801115b 	.word	0x0801115b
 8010f40:	0801120b 	.word	0x0801120b
 8010f44:	0801116f 	.word	0x0801116f
 8010f48:	0801120b 	.word	0x0801120b
 8010f4c:	0801120b 	.word	0x0801120b
 8010f50:	0801120b 	.word	0x0801120b
 8010f54:	0801120b 	.word	0x0801120b
 8010f58:	0801120b 	.word	0x0801120b
 8010f5c:	0801120b 	.word	0x0801120b
 8010f60:	0801120b 	.word	0x0801120b
 8010f64:	0801120b 	.word	0x0801120b
 8010f68:	0801120b 	.word	0x0801120b
 8010f6c:	0801120b 	.word	0x0801120b
 8010f70:	0801120b 	.word	0x0801120b
 8010f74:	0801120b 	.word	0x0801120b
 8010f78:	0801120b 	.word	0x0801120b
 8010f7c:	0801120b 	.word	0x0801120b
 8010f80:	0801120b 	.word	0x0801120b
 8010f84:	08011183 	.word	0x08011183
 8010f88:	0801118f 	.word	0x0801118f
 8010f8c:	0801119b 	.word	0x0801119b
 8010f90:	080111a7 	.word	0x080111a7
 8010f94:	080111b3 	.word	0x080111b3
 8010f98:	080111bf 	.word	0x080111bf
 8010f9c:	080111e5 	.word	0x080111e5
    {
        case MIB_DEVICE_CLASS:
        {
            mibGet->Param.Class = Nvm.MacGroup2.DeviceClass;
 8010fa0:	4b9f      	ldr	r3, [pc, #636]	@ (8011220 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8010fa2:	f893 2118 	ldrb.w	r2, [r3, #280]	@ 0x118
 8010fa6:	687b      	ldr	r3, [r7, #4]
 8010fa8:	711a      	strb	r2, [r3, #4]
            break;
 8010faa:	e134      	b.n	8011216 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            mibGet->Param.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 8010fac:	4b9c      	ldr	r3, [pc, #624]	@ (8011220 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8010fae:	f893 212c 	ldrb.w	r2, [r3, #300]	@ 0x12c
 8010fb2:	687b      	ldr	r3, [r7, #4]
 8010fb4:	711a      	strb	r2, [r3, #4]
            break;
 8010fb6:	e12e      	b.n	8011216 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_DEV_EUI:
        {
            SecureElementGetDevEui( mibGet->Param.DevEui );
 8010fb8:	687b      	ldr	r3, [r7, #4]
 8010fba:	685b      	ldr	r3, [r3, #4]
 8010fbc:	4618      	mov	r0, r3
 8010fbe:	f7fa ff1b 	bl	800bdf8 <SecureElementGetDevEui>
            break;
 8010fc2:	e128      	b.n	8011216 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_JOIN_EUI:
        {
             SecureElementGetJoinEui( mibGet->Param.JoinEui );
 8010fc4:	687b      	ldr	r3, [r7, #4]
 8010fc6:	685b      	ldr	r3, [r3, #4]
 8010fc8:	4618      	mov	r0, r3
 8010fca:	f7fa ff45 	bl	800be58 <SecureElementGetJoinEui>
            break;
 8010fce:	e122      	b.n	8011216 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_ADR:
        {
            mibGet->Param.AdrEnable = Nvm.MacGroup2.AdrCtrlOn;
 8010fd0:	4b93      	ldr	r3, [pc, #588]	@ (8011220 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8010fd2:	f893 211a 	ldrb.w	r2, [r3, #282]	@ 0x11a
 8010fd6:	687b      	ldr	r3, [r7, #4]
 8010fd8:	711a      	strb	r2, [r3, #4]
            break;
 8010fda:	e11c      	b.n	8011216 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_NET_ID:
        {
            mibGet->Param.NetID = Nvm.MacGroup2.NetID;
 8010fdc:	4b90      	ldr	r3, [pc, #576]	@ (8011220 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8010fde:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8010fe2:	687b      	ldr	r3, [r7, #4]
 8010fe4:	605a      	str	r2, [r3, #4]
            break;
 8010fe6:	e116      	b.n	8011216 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_DEV_ADDR:
        {
            SecureElementGetDevAddr( Nvm.MacGroup2.NetworkActivation, &mibGet->Param.DevAddr );
 8010fe8:	4b8d      	ldr	r3, [pc, #564]	@ (8011220 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8010fea:	f893 212c 	ldrb.w	r2, [r3, #300]	@ 0x12c
 8010fee:	687b      	ldr	r3, [r7, #4]
 8010ff0:	3304      	adds	r3, #4
 8010ff2:	4619      	mov	r1, r3
 8010ff4:	4610      	mov	r0, r2
 8010ff6:	f7fa ff61 	bl	800bebc <SecureElementGetDevAddr>
            break;
 8010ffa:	e10c      	b.n	8011216 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_PUBLIC_NETWORK:
        {
            mibGet->Param.EnablePublicNetwork = Nvm.MacGroup2.PublicNetwork;
 8010ffc:	4b88      	ldr	r3, [pc, #544]	@ (8011220 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8010ffe:	f893 2119 	ldrb.w	r2, [r3, #281]	@ 0x119
 8011002:	687b      	ldr	r3, [r7, #4]
 8011004:	711a      	strb	r2, [r3, #4]
            break;
 8011006:	e106      	b.n	8011216 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_REPEATER_SUPPORT:
        {
            mibGet->Param.EnableRepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 8011008:	4b85      	ldr	r3, [pc, #532]	@ (8011220 <LoRaMacMibGetRequestConfirm+0x3a8>)
 801100a:	f893 208c 	ldrb.w	r2, [r3, #140]	@ 0x8c
 801100e:	687b      	ldr	r3, [r7, #4]
 8011010:	711a      	strb	r2, [r3, #4]
            break;
 8011012:	e100      	b.n	8011216 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_CHANNELS:
        {
            getPhy.Attribute = PHY_CHANNELS;
 8011014:	231d      	movs	r3, #29
 8011016:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011018:	4b81      	ldr	r3, [pc, #516]	@ (8011220 <LoRaMacMibGetRequestConfirm+0x3a8>)
 801101a:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 801101e:	f107 0210 	add.w	r2, r7, #16
 8011022:	4611      	mov	r1, r2
 8011024:	4618      	mov	r0, r3
 8011026:	f002 fffc 	bl	8014022 <RegionGetPhyParam>
 801102a:	4603      	mov	r3, r0
 801102c:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelList = phyParam.Channels;
 801102e:	68fa      	ldr	r2, [r7, #12]
 8011030:	687b      	ldr	r3, [r7, #4]
 8011032:	605a      	str	r2, [r3, #4]
            break;
 8011034:	e0ef      	b.n	8011216 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_RX2_CHANNEL:
        {
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParams.Rx2Channel;
 8011036:	687b      	ldr	r3, [r7, #4]
 8011038:	4a79      	ldr	r2, [pc, #484]	@ (8011220 <LoRaMacMibGetRequestConfirm+0x3a8>)
 801103a:	3304      	adds	r3, #4
 801103c:	326c      	adds	r2, #108	@ 0x6c
 801103e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011042:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8011046:	e0e6      	b.n	8011216 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 8011048:	687b      	ldr	r3, [r7, #4]
 801104a:	4a75      	ldr	r2, [pc, #468]	@ (8011220 <LoRaMacMibGetRequestConfirm+0x3a8>)
 801104c:	3304      	adds	r3, #4
 801104e:	32b4      	adds	r2, #180	@ 0xb4
 8011050:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011054:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8011058:	e0dd      	b.n	8011216 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_RXC_CHANNEL:
        {
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParams.RxCChannel;
 801105a:	687b      	ldr	r3, [r7, #4]
 801105c:	4a70      	ldr	r2, [pc, #448]	@ (8011220 <LoRaMacMibGetRequestConfirm+0x3a8>)
 801105e:	3304      	adds	r3, #4
 8011060:	3274      	adds	r2, #116	@ 0x74
 8011062:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011066:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 801106a:	e0d4      	b.n	8011216 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 801106c:	687b      	ldr	r3, [r7, #4]
 801106e:	4a6c      	ldr	r2, [pc, #432]	@ (8011220 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8011070:	3304      	adds	r3, #4
 8011072:	32bc      	adds	r2, #188	@ 0xbc
 8011074:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011078:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 801107c:	e0cb      	b.n	8011216 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_DEFAULT_MASK;
 801107e:	231b      	movs	r3, #27
 8011080:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011082:	4b67      	ldr	r3, [pc, #412]	@ (8011220 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8011084:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8011088:	f107 0210 	add.w	r2, r7, #16
 801108c:	4611      	mov	r1, r2
 801108e:	4618      	mov	r0, r3
 8011090:	f002 ffc7 	bl	8014022 <RegionGetPhyParam>
 8011094:	4603      	mov	r3, r0
 8011096:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsDefaultMask = phyParam.ChannelsMask;
 8011098:	68fa      	ldr	r2, [r7, #12]
 801109a:	687b      	ldr	r3, [r7, #4]
 801109c:	605a      	str	r2, [r3, #4]
            break;
 801109e:	e0ba      	b.n	8011216 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_CHANNELS_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_MASK;
 80110a0:	231a      	movs	r3, #26
 80110a2:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80110a4:	4b5e      	ldr	r3, [pc, #376]	@ (8011220 <LoRaMacMibGetRequestConfirm+0x3a8>)
 80110a6:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80110aa:	f107 0210 	add.w	r2, r7, #16
 80110ae:	4611      	mov	r1, r2
 80110b0:	4618      	mov	r0, r3
 80110b2:	f002 ffb6 	bl	8014022 <RegionGetPhyParam>
 80110b6:	4603      	mov	r3, r0
 80110b8:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsMask = phyParam.ChannelsMask;
 80110ba:	68fa      	ldr	r2, [r7, #12]
 80110bc:	687b      	ldr	r3, [r7, #4]
 80110be:	605a      	str	r2, [r3, #4]
            break;
 80110c0:	e0a9      	b.n	8011216 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            mibGet->Param.ChannelsNbTrans = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 80110c2:	4b57      	ldr	r3, [pc, #348]	@ (8011220 <LoRaMacMibGetRequestConfirm+0x3a8>)
 80110c4:	f893 2068 	ldrb.w	r2, [r3, #104]	@ 0x68
 80110c8:	687b      	ldr	r3, [r7, #4]
 80110ca:	711a      	strb	r2, [r3, #4]
            break;
 80110cc:	e0a3      	b.n	8011216 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            mibGet->Param.MaxRxWindow = Nvm.MacGroup2.MacParams.MaxRxWindow;
 80110ce:	4b54      	ldr	r3, [pc, #336]	@ (8011220 <LoRaMacMibGetRequestConfirm+0x3a8>)
 80110d0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80110d2:	687b      	ldr	r3, [r7, #4]
 80110d4:	605a      	str	r2, [r3, #4]
            break;
 80110d6:	e09e      	b.n	8011216 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            mibGet->Param.ReceiveDelay1 = Nvm.MacGroup2.MacParams.ReceiveDelay1;
 80110d8:	4b51      	ldr	r3, [pc, #324]	@ (8011220 <LoRaMacMibGetRequestConfirm+0x3a8>)
 80110da:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80110dc:	687b      	ldr	r3, [r7, #4]
 80110de:	605a      	str	r2, [r3, #4]
            break;
 80110e0:	e099      	b.n	8011216 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            mibGet->Param.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay2;
 80110e2:	4b4f      	ldr	r3, [pc, #316]	@ (8011220 <LoRaMacMibGetRequestConfirm+0x3a8>)
 80110e4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80110e6:	687b      	ldr	r3, [r7, #4]
 80110e8:	605a      	str	r2, [r3, #4]
            break;
 80110ea:	e094      	b.n	8011216 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            mibGet->Param.JoinAcceptDelay1 = Nvm.MacGroup2.MacParams.JoinAcceptDelay1;
 80110ec:	4b4c      	ldr	r3, [pc, #304]	@ (8011220 <LoRaMacMibGetRequestConfirm+0x3a8>)
 80110ee:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80110f0:	687b      	ldr	r3, [r7, #4]
 80110f2:	605a      	str	r2, [r3, #4]
            break;
 80110f4:	e08f      	b.n	8011216 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            mibGet->Param.JoinAcceptDelay2 = Nvm.MacGroup2.MacParams.JoinAcceptDelay2;
 80110f6:	4b4a      	ldr	r3, [pc, #296]	@ (8011220 <LoRaMacMibGetRequestConfirm+0x3a8>)
 80110f8:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80110fa:	687b      	ldr	r3, [r7, #4]
 80110fc:	605a      	str	r2, [r3, #4]
            break;
 80110fe:	e08a      	b.n	8011216 <LoRaMacMibGetRequestConfirm+0x39e>
            break;
        }
#endif /* LORAMAC_VERSION */
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            mibGet->Param.ChannelsDefaultDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 8011100:	4b47      	ldr	r3, [pc, #284]	@ (8011220 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8011102:	f993 20dd 	ldrsb.w	r2, [r3, #221]	@ 0xdd
 8011106:	687b      	ldr	r3, [r7, #4]
 8011108:	711a      	strb	r2, [r3, #4]
            break;
 801110a:	e084      	b.n	8011216 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_CHANNELS_DATARATE:
        {
            mibGet->Param.ChannelsDatarate = Nvm.MacGroup1.ChannelsDatarate;
 801110c:	4b44      	ldr	r3, [pc, #272]	@ (8011220 <LoRaMacMibGetRequestConfirm+0x3a8>)
 801110e:	f993 2039 	ldrsb.w	r2, [r3, #57]	@ 0x39
 8011112:	687b      	ldr	r3, [r7, #4]
 8011114:	711a      	strb	r2, [r3, #4]
            break;
 8011116:	e07e      	b.n	8011216 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            mibGet->Param.ChannelsDefaultTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 8011118:	4b41      	ldr	r3, [pc, #260]	@ (8011220 <LoRaMacMibGetRequestConfirm+0x3a8>)
 801111a:	f993 20dc 	ldrsb.w	r2, [r3, #220]	@ 0xdc
 801111e:	687b      	ldr	r3, [r7, #4]
 8011120:	711a      	strb	r2, [r3, #4]
            break;
 8011122:	e078      	b.n	8011216 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_CHANNELS_TX_POWER:
        {
            mibGet->Param.ChannelsTxPower = Nvm.MacGroup1.ChannelsTxPower;
 8011124:	4b3e      	ldr	r3, [pc, #248]	@ (8011220 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8011126:	f993 2038 	ldrsb.w	r2, [r3, #56]	@ 0x38
 801112a:	687b      	ldr	r3, [r7, #4]
 801112c:	711a      	strb	r2, [r3, #4]
            break;
 801112e:	e072      	b.n	8011216 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            mibGet->Param.SystemMaxRxError = Nvm.MacGroup2.MacParams.SystemMaxRxError;
 8011130:	4b3b      	ldr	r3, [pc, #236]	@ (8011220 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8011132:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8011134:	687b      	ldr	r3, [r7, #4]
 8011136:	605a      	str	r2, [r3, #4]
            break;
 8011138:	e06d      	b.n	8011216 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            mibGet->Param.MinRxSymbols = Nvm.MacGroup2.MacParams.MinRxSymbols;
 801113a:	4b39      	ldr	r3, [pc, #228]	@ (8011220 <LoRaMacMibGetRequestConfirm+0x3a8>)
 801113c:	f893 2050 	ldrb.w	r2, [r3, #80]	@ 0x50
 8011140:	687b      	ldr	r3, [r7, #4]
 8011142:	711a      	strb	r2, [r3, #4]
            break;
 8011144:	e067      	b.n	8011216 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_ANTENNA_GAIN:
        {
            mibGet->Param.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 8011146:	4b36      	ldr	r3, [pc, #216]	@ (8011220 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8011148:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 801114c:	687b      	ldr	r3, [r7, #4]
 801114e:	605a      	str	r2, [r3, #4]
            break;
 8011150:	e061      	b.n	8011216 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_NVM_CTXS:
        {
            mibGet->Param.Contexts = &Nvm;
 8011152:	687b      	ldr	r3, [r7, #4]
 8011154:	4a32      	ldr	r2, [pc, #200]	@ (8011220 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8011156:	605a      	str	r2, [r3, #4]
            break;
 8011158:	e05d      	b.n	8011216 <LoRaMacMibGetRequestConfirm+0x39e>
        case MIB_NVM_BKP_CTXS:
        {
#if (defined( CONTEXT_MANAGEMENT_ENABLED ) && ( CONTEXT_MANAGEMENT_ENABLED == 1 ))
            mibGet->Param.BackupContexts = &NvmBackup;
#else
            mibGet->Param.BackupContexts = NULL;
 801115a:	687b      	ldr	r3, [r7, #4]
 801115c:	2200      	movs	r2, #0
 801115e:	605a      	str	r2, [r3, #4]
#endif /* CONTEXT_MANAGEMENT_ENABLED */
            break;
 8011160:	e059      	b.n	8011216 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            mibGet->Param.DefaultAntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 8011162:	4b2f      	ldr	r3, [pc, #188]	@ (8011220 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8011164:	f8d3 20cc 	ldr.w	r2, [r3, #204]	@ 0xcc
 8011168:	687b      	ldr	r3, [r7, #4]
 801116a:	605a      	str	r2, [r3, #4]
            break;
 801116c:	e053      	b.n	8011216 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_LORAWAN_VERSION:
        {
            mibGet->Param.LrWanVersion.LoRaWan = Nvm.MacGroup2.Version;
 801116e:	687b      	ldr	r3, [r7, #4]
 8011170:	4a2b      	ldr	r2, [pc, #172]	@ (8011220 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8011172:	f8d2 2128 	ldr.w	r2, [r2, #296]	@ 0x128
 8011176:	605a      	str	r2, [r3, #4]
            mibGet->Param.LrWanVersion.LoRaWanRegion = RegionGetVersion( );
 8011178:	687c      	ldr	r4, [r7, #4]
 801117a:	f003 f8db 	bl	8014334 <RegionGetVersion>
 801117e:	60a0      	str	r0, [r4, #8]
            break;
 8011180:	e049      	b.n	8011216 <LoRaMacMibGetRequestConfirm+0x39e>
        }
    case MIB_RXB_C_TIMEOUT:
        {
            mibGet->Param.RxBCTimeout = Nvm.MacGroup2.MacParams.RxBCTimeout;
 8011182:	4b27      	ldr	r3, [pc, #156]	@ (8011220 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8011184:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8011188:	687b      	ldr	r3, [r7, #4]
 801118a:	605a      	str	r2, [r3, #4]
            break;
 801118c:	e043      	b.n	8011216 <LoRaMacMibGetRequestConfirm+0x39e>
            break;
        }
#endif /* LORAMAC_VERSION */
        case MIB_ADR_ACK_LIMIT:
        {
            mibGet->Param.AdrAckLimit = Nvm.MacGroup2.MacParams.AdrAckLimit;
 801118e:	4b24      	ldr	r3, [pc, #144]	@ (8011220 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8011190:	f8b3 2088 	ldrh.w	r2, [r3, #136]	@ 0x88
 8011194:	687b      	ldr	r3, [r7, #4]
 8011196:	809a      	strh	r2, [r3, #4]
            break;
 8011198:	e03d      	b.n	8011216 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_ADR_ACK_DELAY:
        {
            mibGet->Param.AdrAckDelay = Nvm.MacGroup2.MacParams.AdrAckDelay;
 801119a:	4b21      	ldr	r3, [pc, #132]	@ (8011220 <LoRaMacMibGetRequestConfirm+0x3a8>)
 801119c:	f8b3 208a 	ldrh.w	r2, [r3, #138]	@ 0x8a
 80111a0:	687b      	ldr	r3, [r7, #4]
 80111a2:	809a      	strh	r2, [r3, #4]
            break;
 80111a4:	e037      	b.n	8011216 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_ADR_ACK_DEFAULT_LIMIT:
        {
            mibGet->Param.AdrAckLimit = Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit;
 80111a6:	4b1e      	ldr	r3, [pc, #120]	@ (8011220 <LoRaMacMibGetRequestConfirm+0x3a8>)
 80111a8:	f8b3 20d0 	ldrh.w	r2, [r3, #208]	@ 0xd0
 80111ac:	687b      	ldr	r3, [r7, #4]
 80111ae:	809a      	strh	r2, [r3, #4]
            break;
 80111b0:	e031      	b.n	8011216 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_ADR_ACK_DEFAULT_DELAY:
        {
            mibGet->Param.AdrAckDelay = Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay;
 80111b2:	4b1b      	ldr	r3, [pc, #108]	@ (8011220 <LoRaMacMibGetRequestConfirm+0x3a8>)
 80111b4:	f8b3 20d2 	ldrh.w	r2, [r3, #210]	@ 0xd2
 80111b8:	687b      	ldr	r3, [r7, #4]
 80111ba:	809a      	strh	r2, [r3, #4]
            break;
 80111bc:	e02b      	b.n	8011216 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_RSSI_FREE_THRESHOLD:
        {
#if defined(REGION_KR920) || defined(REGION_AS923)
            if( Nvm.MacGroup2.Region != LORAMAC_REGION_AS923 && Nvm.MacGroup2.Region != LORAMAC_REGION_KR920 )
 80111be:	4b18      	ldr	r3, [pc, #96]	@ (8011220 <LoRaMacMibGetRequestConfirm+0x3a8>)
 80111c0:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80111c4:	2b00      	cmp	r3, #0
 80111c6:	d007      	beq.n	80111d8 <LoRaMacMibGetRequestConfirm+0x360>
 80111c8:	4b15      	ldr	r3, [pc, #84]	@ (8011220 <LoRaMacMibGetRequestConfirm+0x3a8>)
 80111ca:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80111ce:	2b06      	cmp	r3, #6
 80111d0:	d002      	beq.n	80111d8 <LoRaMacMibGetRequestConfirm+0x360>
            {
                status = LORAMAC_STATUS_ERROR;
 80111d2:	2318      	movs	r3, #24
 80111d4:	75fb      	strb	r3, [r7, #23]
                mibGet->Param.RssiFreeThreshold = Nvm.RegionGroup2.RssiFreeThreshold;
            }
#else
            status = LORAMAC_STATUS_ERROR;
#endif
            break;
 80111d6:	e01e      	b.n	8011216 <LoRaMacMibGetRequestConfirm+0x39e>
                mibGet->Param.RssiFreeThreshold = Nvm.RegionGroup2.RssiFreeThreshold;
 80111d8:	4b11      	ldr	r3, [pc, #68]	@ (8011220 <LoRaMacMibGetRequestConfirm+0x3a8>)
 80111da:	f9b3 274c 	ldrsh.w	r2, [r3, #1868]	@ 0x74c
 80111de:	687b      	ldr	r3, [r7, #4]
 80111e0:	809a      	strh	r2, [r3, #4]
            break;
 80111e2:	e018      	b.n	8011216 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_CARRIER_SENSE_TIME:
        {
#if defined(REGION_KR920) || defined(REGION_AS923)
            if( Nvm.MacGroup2.Region != LORAMAC_REGION_AS923 && Nvm.MacGroup2.Region != LORAMAC_REGION_KR920 )
 80111e4:	4b0e      	ldr	r3, [pc, #56]	@ (8011220 <LoRaMacMibGetRequestConfirm+0x3a8>)
 80111e6:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80111ea:	2b00      	cmp	r3, #0
 80111ec:	d007      	beq.n	80111fe <LoRaMacMibGetRequestConfirm+0x386>
 80111ee:	4b0c      	ldr	r3, [pc, #48]	@ (8011220 <LoRaMacMibGetRequestConfirm+0x3a8>)
 80111f0:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80111f4:	2b06      	cmp	r3, #6
 80111f6:	d002      	beq.n	80111fe <LoRaMacMibGetRequestConfirm+0x386>
            {
                status = LORAMAC_STATUS_ERROR;
 80111f8:	2318      	movs	r3, #24
 80111fa:	75fb      	strb	r3, [r7, #23]
                mibGet->Param.CarrierSenseTime = Nvm.RegionGroup2.CarrierSenseTime;
            }
#else
            status = LORAMAC_STATUS_ERROR;
#endif
            break;
 80111fc:	e00b      	b.n	8011216 <LoRaMacMibGetRequestConfirm+0x39e>
                mibGet->Param.CarrierSenseTime = Nvm.RegionGroup2.CarrierSenseTime;
 80111fe:	4b08      	ldr	r3, [pc, #32]	@ (8011220 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8011200:	f8d3 2750 	ldr.w	r2, [r3, #1872]	@ 0x750
 8011204:	687b      	ldr	r3, [r7, #4]
 8011206:	605a      	str	r2, [r3, #4]
            break;
 8011208:	e005      	b.n	8011216 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        default:
        {
            status = LoRaMacClassBMibGetRequestConfirm( mibGet );
 801120a:	6878      	ldr	r0, [r7, #4]
 801120c:	f000 ffb8 	bl	8012180 <LoRaMacClassBMibGetRequestConfirm>
 8011210:	4603      	mov	r3, r0
 8011212:	75fb      	strb	r3, [r7, #23]
            break;
 8011214:	bf00      	nop
        }
    }
    return status;
 8011216:	7dfb      	ldrb	r3, [r7, #23]
}
 8011218:	4618      	mov	r0, r3
 801121a:	371c      	adds	r7, #28
 801121c:	46bd      	mov	sp, r7
 801121e:	bd90      	pop	{r4, r7, pc}
 8011220:	20000b34 	.word	0x20000b34

08011224 <LoRaMacMibSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibSetRequestConfirm( MibRequestConfirm_t* mibSet )
{
 8011224:	b580      	push	{r7, lr}
 8011226:	b086      	sub	sp, #24
 8011228:	af00      	add	r7, sp, #0
 801122a:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 801122c:	2300      	movs	r3, #0
 801122e:	75fb      	strb	r3, [r7, #23]
    ChanMaskSetParams_t chanMaskSet;
    VerifyParams_t verify;

    if( mibSet == NULL )
 8011230:	687b      	ldr	r3, [r7, #4]
 8011232:	2b00      	cmp	r3, #0
 8011234:	d101      	bne.n	801123a <LoRaMacMibSetRequestConfirm+0x16>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8011236:	2303      	movs	r3, #3
 8011238:	e3a3      	b.n	8011982 <LoRaMacMibSetRequestConfirm+0x75e>
    }
    if( ( MacCtx.MacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING )
 801123a:	4bbb      	ldr	r3, [pc, #748]	@ (8011528 <LoRaMacMibSetRequestConfirm+0x304>)
 801123c:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 8011240:	f003 0302 	and.w	r3, r3, #2
 8011244:	2b00      	cmp	r3, #0
 8011246:	d001      	beq.n	801124c <LoRaMacMibSetRequestConfirm+0x28>
    {
        return LORAMAC_STATUS_BUSY;
 8011248:	2301      	movs	r3, #1
 801124a:	e39a      	b.n	8011982 <LoRaMacMibSetRequestConfirm+0x75e>
    }

    switch( mibSet->Type )
 801124c:	687b      	ldr	r3, [r7, #4]
 801124e:	781b      	ldrb	r3, [r3, #0]
 8011250:	2b3f      	cmp	r3, #63	@ 0x3f
 8011252:	f200 8374 	bhi.w	801193e <LoRaMacMibSetRequestConfirm+0x71a>
 8011256:	a201      	add	r2, pc, #4	@ (adr r2, 801125c <LoRaMacMibSetRequestConfirm+0x38>)
 8011258:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801125c:	0801135d 	.word	0x0801135d
 8011260:	0801136d 	.word	0x0801136d
 8011264:	08011387 	.word	0x08011387
 8011268:	0801139f 	.word	0x0801139f
 801126c:	080113b7 	.word	0x080113b7
 8011270:	080113c3 	.word	0x080113c3
 8011274:	080113cf 	.word	0x080113cf
 8011278:	080113f9 	.word	0x080113f9
 801127c:	0801141f 	.word	0x0801141f
 8011280:	08011445 	.word	0x08011445
 8011284:	0801146b 	.word	0x0801146b
 8011288:	08011491 	.word	0x08011491
 801128c:	080114b7 	.word	0x080114b7
 8011290:	080114dd 	.word	0x080114dd
 8011294:	08011503 	.word	0x08011503
 8011298:	08011531 	.word	0x08011531
 801129c:	08011551 	.word	0x08011551
 80112a0:	0801193f 	.word	0x0801193f
 80112a4:	0801155d 	.word	0x0801155d
 80112a8:	080115cd 	.word	0x080115cd
 80112ac:	0801160d 	.word	0x0801160d
 80112b0:	0801166f 	.word	0x0801166f
 80112b4:	080116df 	.word	0x080116df
 80112b8:	080116af 	.word	0x080116af
 80112bc:	0801170f 	.word	0x0801170f
 80112c0:	08011731 	.word	0x08011731
 80112c4:	0801173b 	.word	0x0801173b
 80112c8:	08011745 	.word	0x08011745
 80112cc:	0801174f 	.word	0x0801174f
 80112d0:	08011759 	.word	0x08011759
 80112d4:	08011763 	.word	0x08011763
 80112d8:	08011795 	.word	0x08011795
 80112dc:	08011809 	.word	0x08011809
 80112e0:	080117cf 	.word	0x080117cf
 80112e4:	0801183b 	.word	0x0801183b
 80112e8:	08011851 	.word	0x08011851
 80112ec:	08011869 	.word	0x08011869
 80112f0:	08011875 	.word	0x08011875
 80112f4:	08011881 	.word	0x08011881
 80112f8:	0801193f 	.word	0x0801193f
 80112fc:	0801188b 	.word	0x0801188b
 8011300:	0801193f 	.word	0x0801193f
 8011304:	0801193f 	.word	0x0801193f
 8011308:	0801193f 	.word	0x0801193f
 801130c:	0801193f 	.word	0x0801193f
 8011310:	0801193f 	.word	0x0801193f
 8011314:	0801193f 	.word	0x0801193f
 8011318:	0801193f 	.word	0x0801193f
 801131c:	0801193f 	.word	0x0801193f
 8011320:	0801193f 	.word	0x0801193f
 8011324:	0801193f 	.word	0x0801193f
 8011328:	0801193f 	.word	0x0801193f
 801132c:	0801193f 	.word	0x0801193f
 8011330:	0801193f 	.word	0x0801193f
 8011334:	0801193f 	.word	0x0801193f
 8011338:	0801193f 	.word	0x0801193f
 801133c:	0801193f 	.word	0x0801193f
 8011340:	080118b5 	.word	0x080118b5
 8011344:	080118c1 	.word	0x080118c1
 8011348:	080118cd 	.word	0x080118cd
 801134c:	080118d9 	.word	0x080118d9
 8011350:	080118e5 	.word	0x080118e5
 8011354:	080118f1 	.word	0x080118f1
 8011358:	08011919 	.word	0x08011919
    {
        case MIB_DEVICE_CLASS:
        {
            status = SwitchClass( mibSet->Param.Class );
 801135c:	687b      	ldr	r3, [r7, #4]
 801135e:	791b      	ldrb	r3, [r3, #4]
 8011360:	4618      	mov	r0, r3
 8011362:	f7fd fb59 	bl	800ea18 <SwitchClass>
 8011366:	4603      	mov	r3, r0
 8011368:	75fb      	strb	r3, [r7, #23]
            break;
 801136a:	e309      	b.n	8011980 <LoRaMacMibSetRequestConfirm+0x75c>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            if( mibSet->Param.NetworkActivation != ACTIVATION_TYPE_OTAA  )
 801136c:	687b      	ldr	r3, [r7, #4]
 801136e:	791b      	ldrb	r3, [r3, #4]
 8011370:	2b02      	cmp	r3, #2
 8011372:	d005      	beq.n	8011380 <LoRaMacMibSetRequestConfirm+0x15c>
            {
                Nvm.MacGroup2.NetworkActivation = mibSet->Param.NetworkActivation;
 8011374:	687b      	ldr	r3, [r7, #4]
 8011376:	791a      	ldrb	r2, [r3, #4]
 8011378:	4b6c      	ldr	r3, [pc, #432]	@ (801152c <LoRaMacMibSetRequestConfirm+0x308>)
 801137a:	f883 212c 	strb.w	r2, [r3, #300]	@ 0x12c
            }
            else
            {   // Do not allow to set ACTIVATION_TYPE_OTAA since the MAC will set it automatically after a successful join process.
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 801137e:	e2ff      	b.n	8011980 <LoRaMacMibSetRequestConfirm+0x75c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011380:	2303      	movs	r3, #3
 8011382:	75fb      	strb	r3, [r7, #23]
            break;
 8011384:	e2fc      	b.n	8011980 <LoRaMacMibSetRequestConfirm+0x75c>
        }
        case MIB_DEV_EUI:
        {
            if( SecureElementSetDevEui( mibSet->Param.DevEui ) != SECURE_ELEMENT_SUCCESS )
 8011386:	687b      	ldr	r3, [r7, #4]
 8011388:	685b      	ldr	r3, [r3, #4]
 801138a:	4618      	mov	r0, r3
 801138c:	f7fa fd1c 	bl	800bdc8 <SecureElementSetDevEui>
 8011390:	4603      	mov	r3, r0
 8011392:	2b00      	cmp	r3, #0
 8011394:	f000 82d9 	beq.w	801194a <LoRaMacMibSetRequestConfirm+0x726>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011398:	2303      	movs	r3, #3
 801139a:	75fb      	strb	r3, [r7, #23]
            }
            break;
 801139c:	e2d5      	b.n	801194a <LoRaMacMibSetRequestConfirm+0x726>
        }
        case MIB_JOIN_EUI:
        {
            if( SecureElementSetJoinEui( mibSet->Param.JoinEui ) != SECURE_ELEMENT_SUCCESS )
 801139e:	687b      	ldr	r3, [r7, #4]
 80113a0:	685b      	ldr	r3, [r3, #4]
 80113a2:	4618      	mov	r0, r3
 80113a4:	f7fa fd40 	bl	800be28 <SecureElementSetJoinEui>
 80113a8:	4603      	mov	r3, r0
 80113aa:	2b00      	cmp	r3, #0
 80113ac:	f000 82cf 	beq.w	801194e <LoRaMacMibSetRequestConfirm+0x72a>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80113b0:	2303      	movs	r3, #3
 80113b2:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80113b4:	e2cb      	b.n	801194e <LoRaMacMibSetRequestConfirm+0x72a>
        }
        case MIB_ADR:
        {
            Nvm.MacGroup2.AdrCtrlOn = mibSet->Param.AdrEnable;
 80113b6:	687b      	ldr	r3, [r7, #4]
 80113b8:	791a      	ldrb	r2, [r3, #4]
 80113ba:	4b5c      	ldr	r3, [pc, #368]	@ (801152c <LoRaMacMibSetRequestConfirm+0x308>)
 80113bc:	f883 211a 	strb.w	r2, [r3, #282]	@ 0x11a
            break;
 80113c0:	e2de      	b.n	8011980 <LoRaMacMibSetRequestConfirm+0x75c>
        }
        case MIB_NET_ID:
        {
            Nvm.MacGroup2.NetID = mibSet->Param.NetID;
 80113c2:	687b      	ldr	r3, [r7, #4]
 80113c4:	685b      	ldr	r3, [r3, #4]
 80113c6:	4a59      	ldr	r2, [pc, #356]	@ (801152c <LoRaMacMibSetRequestConfirm+0x308>)
 80113c8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
            break;
 80113cc:	e2d8      	b.n	8011980 <LoRaMacMibSetRequestConfirm+0x75c>
        }
        case MIB_DEV_ADDR:
        {
            if(SecureElementSetDevAddr( Nvm.MacGroup2.NetworkActivation, mibSet->Param.DevAddr ) != SECURE_ELEMENT_SUCCESS )
 80113ce:	4b57      	ldr	r3, [pc, #348]	@ (801152c <LoRaMacMibSetRequestConfirm+0x308>)
 80113d0:	f893 212c 	ldrb.w	r2, [r3, #300]	@ 0x12c
 80113d4:	687b      	ldr	r3, [r7, #4]
 80113d6:	685b      	ldr	r3, [r3, #4]
 80113d8:	4619      	mov	r1, r3
 80113da:	4610      	mov	r0, r2
 80113dc:	f7fa fd54 	bl	800be88 <SecureElementSetDevAddr>
 80113e0:	4603      	mov	r3, r0
 80113e2:	2b00      	cmp	r3, #0
 80113e4:	d002      	beq.n	80113ec <LoRaMacMibSetRequestConfirm+0x1c8>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80113e6:	2303      	movs	r3, #3
 80113e8:	75fb      	strb	r3, [r7, #23]
            else
            {
                /* Update Nvm.MacGroup2.devAdr to handle set/get sequence */
                Nvm.MacGroup2.DevAddr = mibSet->Param.DevAddr;
            }
            break;
 80113ea:	e2c9      	b.n	8011980 <LoRaMacMibSetRequestConfirm+0x75c>
                Nvm.MacGroup2.DevAddr = mibSet->Param.DevAddr;
 80113ec:	687b      	ldr	r3, [r7, #4]
 80113ee:	685b      	ldr	r3, [r3, #4]
 80113f0:	4a4e      	ldr	r2, [pc, #312]	@ (801152c <LoRaMacMibSetRequestConfirm+0x308>)
 80113f2:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
            break;
 80113f6:	e2c3      	b.n	8011980 <LoRaMacMibSetRequestConfirm+0x75c>
        }
        case MIB_APP_KEY:
        {
            if( mibSet->Param.AppKey != NULL )
 80113f8:	687b      	ldr	r3, [r7, #4]
 80113fa:	685b      	ldr	r3, [r3, #4]
 80113fc:	2b00      	cmp	r3, #0
 80113fe:	d00b      	beq.n	8011418 <LoRaMacMibSetRequestConfirm+0x1f4>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_KEY, mibSet->Param.AppKey ) )
 8011400:	687b      	ldr	r3, [r7, #4]
 8011402:	685b      	ldr	r3, [r3, #4]
 8011404:	4619      	mov	r1, r3
 8011406:	2000      	movs	r0, #0
 8011408:	f002 f816 	bl	8013438 <LoRaMacCryptoSetKey>
 801140c:	4603      	mov	r3, r0
 801140e:	2b00      	cmp	r3, #0
 8011410:	f000 829f 	beq.w	8011952 <LoRaMacMibSetRequestConfirm+0x72e>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8011414:	2311      	movs	r3, #17
 8011416:	e2b4      	b.n	8011982 <LoRaMacMibSetRequestConfirm+0x75e>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011418:	2303      	movs	r3, #3
 801141a:	75fb      	strb	r3, [r7, #23]
            }
            break;
 801141c:	e299      	b.n	8011952 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_NWK_KEY:
        {
            if( mibSet->Param.NwkKey != NULL )
 801141e:	687b      	ldr	r3, [r7, #4]
 8011420:	685b      	ldr	r3, [r3, #4]
 8011422:	2b00      	cmp	r3, #0
 8011424:	d00b      	beq.n	801143e <LoRaMacMibSetRequestConfirm+0x21a>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_KEY, mibSet->Param.NwkKey ) )
 8011426:	687b      	ldr	r3, [r7, #4]
 8011428:	685b      	ldr	r3, [r3, #4]
 801142a:	4619      	mov	r1, r3
 801142c:	2001      	movs	r0, #1
 801142e:	f002 f803 	bl	8013438 <LoRaMacCryptoSetKey>
 8011432:	4603      	mov	r3, r0
 8011434:	2b00      	cmp	r3, #0
 8011436:	f000 828e 	beq.w	8011956 <LoRaMacMibSetRequestConfirm+0x732>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 801143a:	2311      	movs	r3, #17
 801143c:	e2a1      	b.n	8011982 <LoRaMacMibSetRequestConfirm+0x75e>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801143e:	2303      	movs	r3, #3
 8011440:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8011442:	e288      	b.n	8011956 <LoRaMacMibSetRequestConfirm+0x732>
            break;
        }
#else
        case MIB_NWK_S_KEY:
        {
            if( mibSet->Param.NwkSKey != NULL )
 8011444:	687b      	ldr	r3, [r7, #4]
 8011446:	685b      	ldr	r3, [r3, #4]
 8011448:	2b00      	cmp	r3, #0
 801144a:	d00b      	beq.n	8011464 <LoRaMacMibSetRequestConfirm+0x240>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_S_KEY, mibSet->Param.NwkSKey ) )
 801144c:	687b      	ldr	r3, [r7, #4]
 801144e:	685b      	ldr	r3, [r3, #4]
 8011450:	4619      	mov	r1, r3
 8011452:	2008      	movs	r0, #8
 8011454:	f001 fff0 	bl	8013438 <LoRaMacCryptoSetKey>
 8011458:	4603      	mov	r3, r0
 801145a:	2b00      	cmp	r3, #0
 801145c:	f000 827d 	beq.w	801195a <LoRaMacMibSetRequestConfirm+0x736>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8011460:	2311      	movs	r3, #17
 8011462:	e28e      	b.n	8011982 <LoRaMacMibSetRequestConfirm+0x75e>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011464:	2303      	movs	r3, #3
 8011466:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8011468:	e277      	b.n	801195a <LoRaMacMibSetRequestConfirm+0x736>
        }
#endif /* LORAMAC_VERSION */
        case MIB_APP_S_KEY:
        {
            if( mibSet->Param.AppSKey != NULL )
 801146a:	687b      	ldr	r3, [r7, #4]
 801146c:	685b      	ldr	r3, [r3, #4]
 801146e:	2b00      	cmp	r3, #0
 8011470:	d00b      	beq.n	801148a <LoRaMacMibSetRequestConfirm+0x266>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_S_KEY, mibSet->Param.AppSKey ) )
 8011472:	687b      	ldr	r3, [r7, #4]
 8011474:	685b      	ldr	r3, [r3, #4]
 8011476:	4619      	mov	r1, r3
 8011478:	2009      	movs	r0, #9
 801147a:	f001 ffdd 	bl	8013438 <LoRaMacCryptoSetKey>
 801147e:	4603      	mov	r3, r0
 8011480:	2b00      	cmp	r3, #0
 8011482:	f000 826c 	beq.w	801195e <LoRaMacMibSetRequestConfirm+0x73a>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8011486:	2311      	movs	r3, #17
 8011488:	e27b      	b.n	8011982 <LoRaMacMibSetRequestConfirm+0x75e>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801148a:	2303      	movs	r3, #3
 801148c:	75fb      	strb	r3, [r7, #23]
            }
            break;
 801148e:	e266      	b.n	801195e <LoRaMacMibSetRequestConfirm+0x73a>
        }
        case MIB_MC_KE_KEY:
        {
            if( mibSet->Param.McKEKey != NULL )
 8011490:	687b      	ldr	r3, [r7, #4]
 8011492:	685b      	ldr	r3, [r3, #4]
 8011494:	2b00      	cmp	r3, #0
 8011496:	d00b      	beq.n	80114b0 <LoRaMacMibSetRequestConfirm+0x28c>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KE_KEY, mibSet->Param.McKEKey ) )
 8011498:	687b      	ldr	r3, [r7, #4]
 801149a:	685b      	ldr	r3, [r3, #4]
 801149c:	4619      	mov	r1, r3
 801149e:	200c      	movs	r0, #12
 80114a0:	f001 ffca 	bl	8013438 <LoRaMacCryptoSetKey>
 80114a4:	4603      	mov	r3, r0
 80114a6:	2b00      	cmp	r3, #0
 80114a8:	f000 825b 	beq.w	8011962 <LoRaMacMibSetRequestConfirm+0x73e>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80114ac:	2311      	movs	r3, #17
 80114ae:	e268      	b.n	8011982 <LoRaMacMibSetRequestConfirm+0x75e>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80114b0:	2303      	movs	r3, #3
 80114b2:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80114b4:	e255      	b.n	8011962 <LoRaMacMibSetRequestConfirm+0x73e>
        }
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MIB_MC_KEY_0:
        {
            if( mibSet->Param.McKey0 != NULL )
 80114b6:	687b      	ldr	r3, [r7, #4]
 80114b8:	685b      	ldr	r3, [r3, #4]
 80114ba:	2b00      	cmp	r3, #0
 80114bc:	d00b      	beq.n	80114d6 <LoRaMacMibSetRequestConfirm+0x2b2>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_0, mibSet->Param.McKey0 ) )
 80114be:	687b      	ldr	r3, [r7, #4]
 80114c0:	685b      	ldr	r3, [r3, #4]
 80114c2:	4619      	mov	r1, r3
 80114c4:	200d      	movs	r0, #13
 80114c6:	f001 ffb7 	bl	8013438 <LoRaMacCryptoSetKey>
 80114ca:	4603      	mov	r3, r0
 80114cc:	2b00      	cmp	r3, #0
 80114ce:	f000 824a 	beq.w	8011966 <LoRaMacMibSetRequestConfirm+0x742>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80114d2:	2311      	movs	r3, #17
 80114d4:	e255      	b.n	8011982 <LoRaMacMibSetRequestConfirm+0x75e>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80114d6:	2303      	movs	r3, #3
 80114d8:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80114da:	e244      	b.n	8011966 <LoRaMacMibSetRequestConfirm+0x742>
        }
        case MIB_MC_APP_S_KEY_0:
        {
            if( mibSet->Param.McAppSKey0 != NULL )
 80114dc:	687b      	ldr	r3, [r7, #4]
 80114de:	685b      	ldr	r3, [r3, #4]
 80114e0:	2b00      	cmp	r3, #0
 80114e2:	d00b      	beq.n	80114fc <LoRaMacMibSetRequestConfirm+0x2d8>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_0, mibSet->Param.McAppSKey0 ) )
 80114e4:	687b      	ldr	r3, [r7, #4]
 80114e6:	685b      	ldr	r3, [r3, #4]
 80114e8:	4619      	mov	r1, r3
 80114ea:	200e      	movs	r0, #14
 80114ec:	f001 ffa4 	bl	8013438 <LoRaMacCryptoSetKey>
 80114f0:	4603      	mov	r3, r0
 80114f2:	2b00      	cmp	r3, #0
 80114f4:	f000 8239 	beq.w	801196a <LoRaMacMibSetRequestConfirm+0x746>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80114f8:	2311      	movs	r3, #17
 80114fa:	e242      	b.n	8011982 <LoRaMacMibSetRequestConfirm+0x75e>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80114fc:	2303      	movs	r3, #3
 80114fe:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8011500:	e233      	b.n	801196a <LoRaMacMibSetRequestConfirm+0x746>
        }
        case MIB_MC_NWK_S_KEY_0:
        {
            if( mibSet->Param.McNwkSKey0 != NULL )
 8011502:	687b      	ldr	r3, [r7, #4]
 8011504:	685b      	ldr	r3, [r3, #4]
 8011506:	2b00      	cmp	r3, #0
 8011508:	d00b      	beq.n	8011522 <LoRaMacMibSetRequestConfirm+0x2fe>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_0, mibSet->Param.McNwkSKey0 ) )
 801150a:	687b      	ldr	r3, [r7, #4]
 801150c:	685b      	ldr	r3, [r3, #4]
 801150e:	4619      	mov	r1, r3
 8011510:	200f      	movs	r0, #15
 8011512:	f001 ff91 	bl	8013438 <LoRaMacCryptoSetKey>
 8011516:	4603      	mov	r3, r0
 8011518:	2b00      	cmp	r3, #0
 801151a:	f000 8228 	beq.w	801196e <LoRaMacMibSetRequestConfirm+0x74a>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 801151e:	2311      	movs	r3, #17
 8011520:	e22f      	b.n	8011982 <LoRaMacMibSetRequestConfirm+0x75e>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011522:	2303      	movs	r3, #3
 8011524:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8011526:	e222      	b.n	801196e <LoRaMacMibSetRequestConfirm+0x74a>
 8011528:	2000062c 	.word	0x2000062c
 801152c:	20000b34 	.word	0x20000b34
            break;
        }
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        case MIB_PUBLIC_NETWORK:
        {
            Nvm.MacGroup2.PublicNetwork = mibSet->Param.EnablePublicNetwork;
 8011530:	687b      	ldr	r3, [r7, #4]
 8011532:	791a      	ldrb	r2, [r3, #4]
 8011534:	4bb2      	ldr	r3, [pc, #712]	@ (8011800 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8011536:	f883 2119 	strb.w	r2, [r3, #281]	@ 0x119
            Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 801153a:	4bb2      	ldr	r3, [pc, #712]	@ (8011804 <LoRaMacMibSetRequestConfirm+0x5e0>)
 801153c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801153e:	4ab0      	ldr	r2, [pc, #704]	@ (8011800 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8011540:	f892 2119 	ldrb.w	r2, [r2, #281]	@ 0x119
 8011544:	4610      	mov	r0, r2
 8011546:	4798      	blx	r3
            Radio.Sleep( );
 8011548:	4bae      	ldr	r3, [pc, #696]	@ (8011804 <LoRaMacMibSetRequestConfirm+0x5e0>)
 801154a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801154c:	4798      	blx	r3
            break;
 801154e:	e217      	b.n	8011980 <LoRaMacMibSetRequestConfirm+0x75c>
        }
        case MIB_REPEATER_SUPPORT:
        {
            Nvm.MacGroup2.MacParams.RepeaterSupport = mibSet->Param.EnableRepeaterSupport;
 8011550:	687b      	ldr	r3, [r7, #4]
 8011552:	791a      	ldrb	r2, [r3, #4]
 8011554:	4baa      	ldr	r3, [pc, #680]	@ (8011800 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8011556:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c
            break;
 801155a:	e211      	b.n	8011980 <LoRaMacMibSetRequestConfirm+0x75c>
        }
        case MIB_RX2_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 801155c:	687b      	ldr	r3, [r7, #4]
 801155e:	7a1b      	ldrb	r3, [r3, #8]
 8011560:	b25b      	sxtb	r3, r3
 8011562:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8011564:	4ba6      	ldr	r3, [pc, #664]	@ (8011800 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8011566:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 801156a:	727b      	strb	r3, [r7, #9]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) != true )
 801156c:	4ba4      	ldr	r3, [pc, #656]	@ (8011800 <LoRaMacMibSetRequestConfirm+0x5dc>)
 801156e:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8011572:	f107 0108 	add.w	r1, r7, #8
 8011576:	2207      	movs	r2, #7
 8011578:	4618      	mov	r0, r3
 801157a:	f002 fd8d 	bl	8014098 <RegionVerify>
 801157e:	4603      	mov	r3, r0
 8011580:	f083 0301 	eor.w	r3, r3, #1
 8011584:	b2db      	uxtb	r3, r3
 8011586:	2b00      	cmp	r3, #0
 8011588:	d002      	beq.n	8011590 <LoRaMacMibSetRequestConfirm+0x36c>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801158a:	2303      	movs	r3, #3
 801158c:	75fb      	strb	r3, [r7, #23]
                else
                {
                    Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
                }
            }
            break;
 801158e:	e1f7      	b.n	8011980 <LoRaMacMibSetRequestConfirm+0x75c>
                verify.Frequency = mibSet->Param.Rx2Channel.Frequency;
 8011590:	687b      	ldr	r3, [r7, #4]
 8011592:	685b      	ldr	r3, [r3, #4]
 8011594:	60bb      	str	r3, [r7, #8]
                if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_FREQUENCY ) != true )
 8011596:	4b9a      	ldr	r3, [pc, #616]	@ (8011800 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8011598:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 801159c:	f107 0108 	add.w	r1, r7, #8
 80115a0:	2200      	movs	r2, #0
 80115a2:	4618      	mov	r0, r3
 80115a4:	f002 fd78 	bl	8014098 <RegionVerify>
 80115a8:	4603      	mov	r3, r0
 80115aa:	f083 0301 	eor.w	r3, r3, #1
 80115ae:	b2db      	uxtb	r3, r3
 80115b0:	2b00      	cmp	r3, #0
 80115b2:	d002      	beq.n	80115ba <LoRaMacMibSetRequestConfirm+0x396>
                    status = LORAMAC_STATUS_PARAMETER_INVALID;
 80115b4:	2303      	movs	r3, #3
 80115b6:	75fb      	strb	r3, [r7, #23]
            break;
 80115b8:	e1e2      	b.n	8011980 <LoRaMacMibSetRequestConfirm+0x75c>
                    Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
 80115ba:	4b91      	ldr	r3, [pc, #580]	@ (8011800 <LoRaMacMibSetRequestConfirm+0x5dc>)
 80115bc:	687a      	ldr	r2, [r7, #4]
 80115be:	336c      	adds	r3, #108	@ 0x6c
 80115c0:	3204      	adds	r2, #4
 80115c2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80115c6:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 80115ca:	e1d9      	b.n	8011980 <LoRaMacMibSetRequestConfirm+0x75c>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 80115cc:	687b      	ldr	r3, [r7, #4]
 80115ce:	7a1b      	ldrb	r3, [r3, #8]
 80115d0:	b25b      	sxtb	r3, r3
 80115d2:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 80115d4:	4b8a      	ldr	r3, [pc, #552]	@ (8011800 <LoRaMacMibSetRequestConfirm+0x5dc>)
 80115d6:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 80115da:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 80115dc:	4b88      	ldr	r3, [pc, #544]	@ (8011800 <LoRaMacMibSetRequestConfirm+0x5dc>)
 80115de:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80115e2:	f107 0108 	add.w	r1, r7, #8
 80115e6:	2207      	movs	r2, #7
 80115e8:	4618      	mov	r0, r3
 80115ea:	f002 fd55 	bl	8014098 <RegionVerify>
 80115ee:	4603      	mov	r3, r0
 80115f0:	2b00      	cmp	r3, #0
 80115f2:	d008      	beq.n	8011606 <LoRaMacMibSetRequestConfirm+0x3e2>
            {
                Nvm.MacGroup2.MacParamsDefaults.Rx2Channel = mibSet->Param.Rx2DefaultChannel;
 80115f4:	4b82      	ldr	r3, [pc, #520]	@ (8011800 <LoRaMacMibSetRequestConfirm+0x5dc>)
 80115f6:	687a      	ldr	r2, [r7, #4]
 80115f8:	33b4      	adds	r3, #180	@ 0xb4
 80115fa:	3204      	adds	r2, #4
 80115fc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011600:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8011604:	e1bc      	b.n	8011980 <LoRaMacMibSetRequestConfirm+0x75c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011606:	2303      	movs	r3, #3
 8011608:	75fb      	strb	r3, [r7, #23]
            break;
 801160a:	e1b9      	b.n	8011980 <LoRaMacMibSetRequestConfirm+0x75c>
        }
        case MIB_RXC_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 801160c:	687b      	ldr	r3, [r7, #4]
 801160e:	7a1b      	ldrb	r3, [r3, #8]
 8011610:	b25b      	sxtb	r3, r3
 8011612:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8011614:	4b7a      	ldr	r3, [pc, #488]	@ (8011800 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8011616:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 801161a:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 801161c:	4b78      	ldr	r3, [pc, #480]	@ (8011800 <LoRaMacMibSetRequestConfirm+0x5dc>)
 801161e:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8011622:	f107 0108 	add.w	r1, r7, #8
 8011626:	2207      	movs	r2, #7
 8011628:	4618      	mov	r0, r3
 801162a:	f002 fd35 	bl	8014098 <RegionVerify>
 801162e:	4603      	mov	r3, r0
 8011630:	2b00      	cmp	r3, #0
 8011632:	d019      	beq.n	8011668 <LoRaMacMibSetRequestConfirm+0x444>
            {
                Nvm.MacGroup2.MacParams.RxCChannel = mibSet->Param.RxCChannel;
 8011634:	4b72      	ldr	r3, [pc, #456]	@ (8011800 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8011636:	687a      	ldr	r2, [r7, #4]
 8011638:	3374      	adds	r3, #116	@ 0x74
 801163a:	3204      	adds	r2, #4
 801163c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011640:	e883 0003 	stmia.w	r3, {r0, r1}

                if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) && ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) )
 8011644:	4b6e      	ldr	r3, [pc, #440]	@ (8011800 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8011646:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 801164a:	2b02      	cmp	r3, #2
 801164c:	f040 8191 	bne.w	8011972 <LoRaMacMibSetRequestConfirm+0x74e>
 8011650:	4b6b      	ldr	r3, [pc, #428]	@ (8011800 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8011652:	f893 312c 	ldrb.w	r3, [r3, #300]	@ 0x12c
 8011656:	2b00      	cmp	r3, #0
 8011658:	f000 818b 	beq.w	8011972 <LoRaMacMibSetRequestConfirm+0x74e>
                {
                    // We can only compute the RX window parameters directly, if we are already
                    // in class c mode and joined. We cannot setup an RX window in case of any other
                    // class type.
                    // Set the radio into sleep mode in case we are still in RX mode
                    Radio.Sleep( );
 801165c:	4b69      	ldr	r3, [pc, #420]	@ (8011804 <LoRaMacMibSetRequestConfirm+0x5e0>)
 801165e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011660:	4798      	blx	r3

                    OpenContinuousRxCWindow( );
 8011662:	f7fe fc73 	bl	800ff4c <OpenContinuousRxCWindow>
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8011666:	e184      	b.n	8011972 <LoRaMacMibSetRequestConfirm+0x74e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011668:	2303      	movs	r3, #3
 801166a:	75fb      	strb	r3, [r7, #23]
            break;
 801166c:	e181      	b.n	8011972 <LoRaMacMibSetRequestConfirm+0x74e>
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 801166e:	687b      	ldr	r3, [r7, #4]
 8011670:	7a1b      	ldrb	r3, [r3, #8]
 8011672:	b25b      	sxtb	r3, r3
 8011674:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8011676:	4b62      	ldr	r3, [pc, #392]	@ (8011800 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8011678:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 801167c:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 801167e:	4b60      	ldr	r3, [pc, #384]	@ (8011800 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8011680:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8011684:	f107 0108 	add.w	r1, r7, #8
 8011688:	2207      	movs	r2, #7
 801168a:	4618      	mov	r0, r3
 801168c:	f002 fd04 	bl	8014098 <RegionVerify>
 8011690:	4603      	mov	r3, r0
 8011692:	2b00      	cmp	r3, #0
 8011694:	d008      	beq.n	80116a8 <LoRaMacMibSetRequestConfirm+0x484>
            {
                Nvm.MacGroup2.MacParamsDefaults.RxCChannel = mibSet->Param.RxCDefaultChannel;
 8011696:	4b5a      	ldr	r3, [pc, #360]	@ (8011800 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8011698:	687a      	ldr	r2, [r7, #4]
 801169a:	33bc      	adds	r3, #188	@ 0xbc
 801169c:	3204      	adds	r2, #4
 801169e:	e892 0003 	ldmia.w	r2, {r0, r1}
 80116a2:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 80116a6:	e16b      	b.n	8011980 <LoRaMacMibSetRequestConfirm+0x75c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80116a8:	2303      	movs	r3, #3
 80116aa:	75fb      	strb	r3, [r7, #23]
            break;
 80116ac:	e168      	b.n	8011980 <LoRaMacMibSetRequestConfirm+0x75c>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsDefaultMask;
 80116ae:	687b      	ldr	r3, [r7, #4]
 80116b0:	685b      	ldr	r3, [r3, #4]
 80116b2:	60fb      	str	r3, [r7, #12]
            chanMaskSet.ChannelsMaskType = CHANNELS_DEFAULT_MASK;
 80116b4:	2301      	movs	r3, #1
 80116b6:	743b      	strb	r3, [r7, #16]

            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 80116b8:	4b51      	ldr	r3, [pc, #324]	@ (8011800 <LoRaMacMibSetRequestConfirm+0x5dc>)
 80116ba:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80116be:	f107 020c 	add.w	r2, r7, #12
 80116c2:	4611      	mov	r1, r2
 80116c4:	4618      	mov	r0, r3
 80116c6:	f002 fd10 	bl	80140ea <RegionChanMaskSet>
 80116ca:	4603      	mov	r3, r0
 80116cc:	f083 0301 	eor.w	r3, r3, #1
 80116d0:	b2db      	uxtb	r3, r3
 80116d2:	2b00      	cmp	r3, #0
 80116d4:	f000 814f 	beq.w	8011976 <LoRaMacMibSetRequestConfirm+0x752>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80116d8:	2303      	movs	r3, #3
 80116da:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80116dc:	e14b      	b.n	8011976 <LoRaMacMibSetRequestConfirm+0x752>
        }
        case MIB_CHANNELS_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsMask;
 80116de:	687b      	ldr	r3, [r7, #4]
 80116e0:	685b      	ldr	r3, [r3, #4]
 80116e2:	60fb      	str	r3, [r7, #12]
            chanMaskSet.ChannelsMaskType = CHANNELS_MASK;
 80116e4:	2300      	movs	r3, #0
 80116e6:	743b      	strb	r3, [r7, #16]

            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 80116e8:	4b45      	ldr	r3, [pc, #276]	@ (8011800 <LoRaMacMibSetRequestConfirm+0x5dc>)
 80116ea:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80116ee:	f107 020c 	add.w	r2, r7, #12
 80116f2:	4611      	mov	r1, r2
 80116f4:	4618      	mov	r0, r3
 80116f6:	f002 fcf8 	bl	80140ea <RegionChanMaskSet>
 80116fa:	4603      	mov	r3, r0
 80116fc:	f083 0301 	eor.w	r3, r3, #1
 8011700:	b2db      	uxtb	r3, r3
 8011702:	2b00      	cmp	r3, #0
 8011704:	f000 8139 	beq.w	801197a <LoRaMacMibSetRequestConfirm+0x756>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011708:	2303      	movs	r3, #3
 801170a:	75fb      	strb	r3, [r7, #23]
            }
            break;
 801170c:	e135      	b.n	801197a <LoRaMacMibSetRequestConfirm+0x756>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 801170e:	687b      	ldr	r3, [r7, #4]
 8011710:	791b      	ldrb	r3, [r3, #4]
 8011712:	2b00      	cmp	r3, #0
 8011714:	d009      	beq.n	801172a <LoRaMacMibSetRequestConfirm+0x506>
                ( mibSet->Param.ChannelsNbTrans <= 15 ) )
 8011716:	687b      	ldr	r3, [r7, #4]
 8011718:	791b      	ldrb	r3, [r3, #4]
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 801171a:	2b0f      	cmp	r3, #15
 801171c:	d805      	bhi.n	801172a <LoRaMacMibSetRequestConfirm+0x506>
            {
                Nvm.MacGroup2.MacParams.ChannelsNbTrans = mibSet->Param.ChannelsNbTrans;
 801171e:	687b      	ldr	r3, [r7, #4]
 8011720:	791a      	ldrb	r2, [r3, #4]
 8011722:	4b37      	ldr	r3, [pc, #220]	@ (8011800 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8011724:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8011728:	e12a      	b.n	8011980 <LoRaMacMibSetRequestConfirm+0x75c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801172a:	2303      	movs	r3, #3
 801172c:	75fb      	strb	r3, [r7, #23]
            break;
 801172e:	e127      	b.n	8011980 <LoRaMacMibSetRequestConfirm+0x75c>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            Nvm.MacGroup2.MacParams.MaxRxWindow = mibSet->Param.MaxRxWindow;
 8011730:	687b      	ldr	r3, [r7, #4]
 8011732:	685b      	ldr	r3, [r3, #4]
 8011734:	4a32      	ldr	r2, [pc, #200]	@ (8011800 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8011736:	6553      	str	r3, [r2, #84]	@ 0x54
            break;
 8011738:	e122      	b.n	8011980 <LoRaMacMibSetRequestConfirm+0x75c>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            Nvm.MacGroup2.MacParams.ReceiveDelay1 = mibSet->Param.ReceiveDelay1;
 801173a:	687b      	ldr	r3, [r7, #4]
 801173c:	685b      	ldr	r3, [r3, #4]
 801173e:	4a30      	ldr	r2, [pc, #192]	@ (8011800 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8011740:	6593      	str	r3, [r2, #88]	@ 0x58
            break;
 8011742:	e11d      	b.n	8011980 <LoRaMacMibSetRequestConfirm+0x75c>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            Nvm.MacGroup2.MacParams.ReceiveDelay2 = mibSet->Param.ReceiveDelay2;
 8011744:	687b      	ldr	r3, [r7, #4]
 8011746:	685b      	ldr	r3, [r3, #4]
 8011748:	4a2d      	ldr	r2, [pc, #180]	@ (8011800 <LoRaMacMibSetRequestConfirm+0x5dc>)
 801174a:	65d3      	str	r3, [r2, #92]	@ 0x5c
            break;
 801174c:	e118      	b.n	8011980 <LoRaMacMibSetRequestConfirm+0x75c>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = mibSet->Param.JoinAcceptDelay1;
 801174e:	687b      	ldr	r3, [r7, #4]
 8011750:	685b      	ldr	r3, [r3, #4]
 8011752:	4a2b      	ldr	r2, [pc, #172]	@ (8011800 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8011754:	6613      	str	r3, [r2, #96]	@ 0x60
            break;
 8011756:	e113      	b.n	8011980 <LoRaMacMibSetRequestConfirm+0x75c>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = mibSet->Param.JoinAcceptDelay2;
 8011758:	687b      	ldr	r3, [r7, #4]
 801175a:	685b      	ldr	r3, [r3, #4]
 801175c:	4a28      	ldr	r2, [pc, #160]	@ (8011800 <LoRaMacMibSetRequestConfirm+0x5dc>)
 801175e:	6653      	str	r3, [r2, #100]	@ 0x64
            break;
 8011760:	e10e      	b.n	8011980 <LoRaMacMibSetRequestConfirm+0x75c>
        }
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDefaultDatarate;
 8011762:	687b      	ldr	r3, [r7, #4]
 8011764:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8011768:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_DR ) == true )
 801176a:	4b25      	ldr	r3, [pc, #148]	@ (8011800 <LoRaMacMibSetRequestConfirm+0x5dc>)
 801176c:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8011770:	f107 0108 	add.w	r1, r7, #8
 8011774:	2206      	movs	r2, #6
 8011776:	4618      	mov	r0, r3
 8011778:	f002 fc8e 	bl	8014098 <RegionVerify>
 801177c:	4603      	mov	r3, r0
 801177e:	2b00      	cmp	r3, #0
 8011780:	d005      	beq.n	801178e <LoRaMacMibSetRequestConfirm+0x56a>
            {
                Nvm.MacGroup2.ChannelsDatarateDefault = verify.DatarateParams.Datarate;
 8011782:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8011786:	4b1e      	ldr	r3, [pc, #120]	@ (8011800 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8011788:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 801178c:	e0f8      	b.n	8011980 <LoRaMacMibSetRequestConfirm+0x75c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801178e:	2303      	movs	r3, #3
 8011790:	75fb      	strb	r3, [r7, #23]
            break;
 8011792:	e0f5      	b.n	8011980 <LoRaMacMibSetRequestConfirm+0x75c>
        }
        case MIB_CHANNELS_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDatarate;
 8011794:	687b      	ldr	r3, [r7, #4]
 8011796:	f993 3004 	ldrsb.w	r3, [r3, #4]
 801179a:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 801179c:	4b18      	ldr	r3, [pc, #96]	@ (8011800 <LoRaMacMibSetRequestConfirm+0x5dc>)
 801179e:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 80117a2:	72bb      	strb	r3, [r7, #10]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 80117a4:	4b16      	ldr	r3, [pc, #88]	@ (8011800 <LoRaMacMibSetRequestConfirm+0x5dc>)
 80117a6:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80117aa:	f107 0108 	add.w	r1, r7, #8
 80117ae:	2205      	movs	r2, #5
 80117b0:	4618      	mov	r0, r3
 80117b2:	f002 fc71 	bl	8014098 <RegionVerify>
 80117b6:	4603      	mov	r3, r0
 80117b8:	2b00      	cmp	r3, #0
 80117ba:	d005      	beq.n	80117c8 <LoRaMacMibSetRequestConfirm+0x5a4>
            {
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 80117bc:	f997 2008 	ldrsb.w	r2, [r7, #8]
 80117c0:	4b0f      	ldr	r3, [pc, #60]	@ (8011800 <LoRaMacMibSetRequestConfirm+0x5dc>)
 80117c2:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 80117c6:	e0db      	b.n	8011980 <LoRaMacMibSetRequestConfirm+0x75c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80117c8:	2303      	movs	r3, #3
 80117ca:	75fb      	strb	r3, [r7, #23]
            break;
 80117cc:	e0d8      	b.n	8011980 <LoRaMacMibSetRequestConfirm+0x75c>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsDefaultTxPower;
 80117ce:	687b      	ldr	r3, [r7, #4]
 80117d0:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80117d4:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_POWER ) == true )
 80117d6:	4b0a      	ldr	r3, [pc, #40]	@ (8011800 <LoRaMacMibSetRequestConfirm+0x5dc>)
 80117d8:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80117dc:	f107 0108 	add.w	r1, r7, #8
 80117e0:	220a      	movs	r2, #10
 80117e2:	4618      	mov	r0, r3
 80117e4:	f002 fc58 	bl	8014098 <RegionVerify>
 80117e8:	4603      	mov	r3, r0
 80117ea:	2b00      	cmp	r3, #0
 80117ec:	d005      	beq.n	80117fa <LoRaMacMibSetRequestConfirm+0x5d6>
            {
                Nvm.MacGroup2.ChannelsTxPowerDefault = verify.TxPower;
 80117ee:	f997 2008 	ldrsb.w	r2, [r7, #8]
 80117f2:	4b03      	ldr	r3, [pc, #12]	@ (8011800 <LoRaMacMibSetRequestConfirm+0x5dc>)
 80117f4:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 80117f8:	e0c2      	b.n	8011980 <LoRaMacMibSetRequestConfirm+0x75c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80117fa:	2303      	movs	r3, #3
 80117fc:	75fb      	strb	r3, [r7, #23]
            break;
 80117fe:	e0bf      	b.n	8011980 <LoRaMacMibSetRequestConfirm+0x75c>
 8011800:	20000b34 	.word	0x20000b34
 8011804:	0801bd08 	.word	0x0801bd08
        }
        case MIB_CHANNELS_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsTxPower;
 8011808:	687b      	ldr	r3, [r7, #4]
 801180a:	f993 3004 	ldrsb.w	r3, [r3, #4]
 801180e:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_POWER ) == true )
 8011810:	4b5e      	ldr	r3, [pc, #376]	@ (801198c <LoRaMacMibSetRequestConfirm+0x768>)
 8011812:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8011816:	f107 0108 	add.w	r1, r7, #8
 801181a:	2209      	movs	r2, #9
 801181c:	4618      	mov	r0, r3
 801181e:	f002 fc3b 	bl	8014098 <RegionVerify>
 8011822:	4603      	mov	r3, r0
 8011824:	2b00      	cmp	r3, #0
 8011826:	d005      	beq.n	8011834 <LoRaMacMibSetRequestConfirm+0x610>
            {
                Nvm.MacGroup1.ChannelsTxPower = verify.TxPower;
 8011828:	f997 2008 	ldrsb.w	r2, [r7, #8]
 801182c:	4b57      	ldr	r3, [pc, #348]	@ (801198c <LoRaMacMibSetRequestConfirm+0x768>)
 801182e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8011832:	e0a5      	b.n	8011980 <LoRaMacMibSetRequestConfirm+0x75c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011834:	2303      	movs	r3, #3
 8011836:	75fb      	strb	r3, [r7, #23]
            break;
 8011838:	e0a2      	b.n	8011980 <LoRaMacMibSetRequestConfirm+0x75c>
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
#else
            Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = mibSet->Param.SystemMaxRxError;
 801183a:	687b      	ldr	r3, [r7, #4]
 801183c:	685b      	ldr	r3, [r3, #4]
 801183e:	4a53      	ldr	r2, [pc, #332]	@ (801198c <LoRaMacMibSetRequestConfirm+0x768>)
 8011840:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8011844:	4b51      	ldr	r3, [pc, #324]	@ (801198c <LoRaMacMibSetRequestConfirm+0x768>)
 8011846:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 801184a:	4a50      	ldr	r2, [pc, #320]	@ (801198c <LoRaMacMibSetRequestConfirm+0x768>)
 801184c:	64d3      	str	r3, [r2, #76]	@ 0x4c
#endif
            break;
 801184e:	e097      	b.n	8011980 <LoRaMacMibSetRequestConfirm+0x75c>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = mibSet->Param.MinRxSymbols;
 8011850:	687b      	ldr	r3, [r7, #4]
 8011852:	791a      	ldrb	r2, [r3, #4]
 8011854:	4b4d      	ldr	r3, [pc, #308]	@ (801198c <LoRaMacMibSetRequestConfirm+0x768>)
 8011856:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
 801185a:	4b4c      	ldr	r3, [pc, #304]	@ (801198c <LoRaMacMibSetRequestConfirm+0x768>)
 801185c:	f893 2098 	ldrb.w	r2, [r3, #152]	@ 0x98
 8011860:	4b4a      	ldr	r3, [pc, #296]	@ (801198c <LoRaMacMibSetRequestConfirm+0x768>)
 8011862:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
            break;
 8011866:	e08b      	b.n	8011980 <LoRaMacMibSetRequestConfirm+0x75c>
        }
        case MIB_ANTENNA_GAIN:
        {
            Nvm.MacGroup2.MacParams.AntennaGain = mibSet->Param.AntennaGain;
 8011868:	687b      	ldr	r3, [r7, #4]
 801186a:	685b      	ldr	r3, [r3, #4]
 801186c:	4a47      	ldr	r2, [pc, #284]	@ (801198c <LoRaMacMibSetRequestConfirm+0x768>)
 801186e:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
            break;
 8011872:	e085      	b.n	8011980 <LoRaMacMibSetRequestConfirm+0x75c>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            Nvm.MacGroup2.MacParamsDefaults.AntennaGain = mibSet->Param.DefaultAntennaGain;
 8011874:	687b      	ldr	r3, [r7, #4]
 8011876:	685b      	ldr	r3, [r3, #4]
 8011878:	4a44      	ldr	r2, [pc, #272]	@ (801198c <LoRaMacMibSetRequestConfirm+0x768>)
 801187a:	f8c2 30cc 	str.w	r3, [r2, #204]	@ 0xcc
            break;
 801187e:	e07f      	b.n	8011980 <LoRaMacMibSetRequestConfirm+0x75c>
        }
        case MIB_NVM_CTXS:
        {
            status = RestoreNvmData( );
 8011880:	f7fe fdc0 	bl	8010404 <RestoreNvmData>
 8011884:	4603      	mov	r3, r0
 8011886:	75fb      	strb	r3, [r7, #23]
            break;
 8011888:	e07a      	b.n	8011980 <LoRaMacMibSetRequestConfirm+0x75c>
        }
        case MIB_ABP_LORAWAN_VERSION:
        {
            if( mibSet->Param.AbpLrWanVersion.Fields.Minor <= 1 )
 801188a:	687b      	ldr	r3, [r7, #4]
 801188c:	799b      	ldrb	r3, [r3, #6]
 801188e:	2b01      	cmp	r3, #1
 8011890:	d80d      	bhi.n	80118ae <LoRaMacMibSetRequestConfirm+0x68a>
            {
                Nvm.MacGroup2.Version = mibSet->Param.AbpLrWanVersion;
 8011892:	4a3e      	ldr	r2, [pc, #248]	@ (801198c <LoRaMacMibSetRequestConfirm+0x768>)
 8011894:	687b      	ldr	r3, [r7, #4]
 8011896:	685b      	ldr	r3, [r3, #4]
 8011898:	f8c2 3128 	str.w	r3, [r2, #296]	@ 0x128

                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetLrWanVersion( mibSet->Param.AbpLrWanVersion ) )
 801189c:	687b      	ldr	r3, [r7, #4]
 801189e:	6858      	ldr	r0, [r3, #4]
 80118a0:	f001 fd02 	bl	80132a8 <LoRaMacCryptoSetLrWanVersion>
 80118a4:	4603      	mov	r3, r0
 80118a6:	2b00      	cmp	r3, #0
 80118a8:	d069      	beq.n	801197e <LoRaMacMibSetRequestConfirm+0x75a>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80118aa:	2311      	movs	r3, #17
 80118ac:	e069      	b.n	8011982 <LoRaMacMibSetRequestConfirm+0x75e>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80118ae:	2303      	movs	r3, #3
 80118b0:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80118b2:	e064      	b.n	801197e <LoRaMacMibSetRequestConfirm+0x75a>
        }
        case MIB_RXB_C_TIMEOUT:
        {
            Nvm.MacGroup2.MacParams.RxBCTimeout = mibSet->Param.RxBCTimeout;
 80118b4:	687b      	ldr	r3, [r7, #4]
 80118b6:	685b      	ldr	r3, [r3, #4]
 80118b8:	4a34      	ldr	r2, [pc, #208]	@ (801198c <LoRaMacMibSetRequestConfirm+0x768>)
 80118ba:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
            break;
 80118be:	e05f      	b.n	8011980 <LoRaMacMibSetRequestConfirm+0x75c>
            break;
        }
#endif /* LORAMAC_VERSION */
        case MIB_ADR_ACK_LIMIT:
        {
            Nvm.MacGroup2.MacParams.AdrAckLimit = mibSet->Param.AdrAckLimit;
 80118c0:	687b      	ldr	r3, [r7, #4]
 80118c2:	889a      	ldrh	r2, [r3, #4]
 80118c4:	4b31      	ldr	r3, [pc, #196]	@ (801198c <LoRaMacMibSetRequestConfirm+0x768>)
 80118c6:	f8a3 2088 	strh.w	r2, [r3, #136]	@ 0x88
            break;
 80118ca:	e059      	b.n	8011980 <LoRaMacMibSetRequestConfirm+0x75c>
        }
        case MIB_ADR_ACK_DELAY:
        {
            Nvm.MacGroup2.MacParams.AdrAckDelay = mibSet->Param.AdrAckDelay;
 80118cc:	687b      	ldr	r3, [r7, #4]
 80118ce:	889a      	ldrh	r2, [r3, #4]
 80118d0:	4b2e      	ldr	r3, [pc, #184]	@ (801198c <LoRaMacMibSetRequestConfirm+0x768>)
 80118d2:	f8a3 208a 	strh.w	r2, [r3, #138]	@ 0x8a
            break;
 80118d6:	e053      	b.n	8011980 <LoRaMacMibSetRequestConfirm+0x75c>
        }
        case MIB_ADR_ACK_DEFAULT_LIMIT:
        {
            Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit = mibSet->Param.AdrAckLimit;
 80118d8:	687b      	ldr	r3, [r7, #4]
 80118da:	889a      	ldrh	r2, [r3, #4]
 80118dc:	4b2b      	ldr	r3, [pc, #172]	@ (801198c <LoRaMacMibSetRequestConfirm+0x768>)
 80118de:	f8a3 20d0 	strh.w	r2, [r3, #208]	@ 0xd0
            break;
 80118e2:	e04d      	b.n	8011980 <LoRaMacMibSetRequestConfirm+0x75c>
        }
        case MIB_ADR_ACK_DEFAULT_DELAY:
        {
            Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay = mibSet->Param.AdrAckDelay;
 80118e4:	687b      	ldr	r3, [r7, #4]
 80118e6:	889a      	ldrh	r2, [r3, #4]
 80118e8:	4b28      	ldr	r3, [pc, #160]	@ (801198c <LoRaMacMibSetRequestConfirm+0x768>)
 80118ea:	f8a3 20d2 	strh.w	r2, [r3, #210]	@ 0xd2
            break;
 80118ee:	e047      	b.n	8011980 <LoRaMacMibSetRequestConfirm+0x75c>
        }
        case MIB_RSSI_FREE_THRESHOLD:
        {
#if defined(REGION_KR920) || defined(REGION_AS923)
            if( Nvm.MacGroup2.Region != LORAMAC_REGION_AS923 && Nvm.MacGroup2.Region != LORAMAC_REGION_KR920 )
 80118f0:	4b26      	ldr	r3, [pc, #152]	@ (801198c <LoRaMacMibSetRequestConfirm+0x768>)
 80118f2:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80118f6:	2b00      	cmp	r3, #0
 80118f8:	d007      	beq.n	801190a <LoRaMacMibSetRequestConfirm+0x6e6>
 80118fa:	4b24      	ldr	r3, [pc, #144]	@ (801198c <LoRaMacMibSetRequestConfirm+0x768>)
 80118fc:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8011900:	2b06      	cmp	r3, #6
 8011902:	d002      	beq.n	801190a <LoRaMacMibSetRequestConfirm+0x6e6>
            {
                status = LORAMAC_STATUS_ERROR;
 8011904:	2318      	movs	r3, #24
 8011906:	75fb      	strb	r3, [r7, #23]
                Nvm.RegionGroup2.RssiFreeThreshold = mibSet->Param.RssiFreeThreshold;
            }
#else
            status = LORAMAC_STATUS_ERROR;
#endif
            break;
 8011908:	e03a      	b.n	8011980 <LoRaMacMibSetRequestConfirm+0x75c>
                Nvm.RegionGroup2.RssiFreeThreshold = mibSet->Param.RssiFreeThreshold;
 801190a:	687b      	ldr	r3, [r7, #4]
 801190c:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8011910:	4b1e      	ldr	r3, [pc, #120]	@ (801198c <LoRaMacMibSetRequestConfirm+0x768>)
 8011912:	f8a3 274c 	strh.w	r2, [r3, #1868]	@ 0x74c
            break;
 8011916:	e033      	b.n	8011980 <LoRaMacMibSetRequestConfirm+0x75c>
        }
        case MIB_CARRIER_SENSE_TIME:
        {
#if defined(REGION_KR920) || defined(REGION_AS923)
            if( Nvm.MacGroup2.Region != LORAMAC_REGION_AS923 && Nvm.MacGroup2.Region != LORAMAC_REGION_KR920 )
 8011918:	4b1c      	ldr	r3, [pc, #112]	@ (801198c <LoRaMacMibSetRequestConfirm+0x768>)
 801191a:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 801191e:	2b00      	cmp	r3, #0
 8011920:	d007      	beq.n	8011932 <LoRaMacMibSetRequestConfirm+0x70e>
 8011922:	4b1a      	ldr	r3, [pc, #104]	@ (801198c <LoRaMacMibSetRequestConfirm+0x768>)
 8011924:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8011928:	2b06      	cmp	r3, #6
 801192a:	d002      	beq.n	8011932 <LoRaMacMibSetRequestConfirm+0x70e>
            {
                status = LORAMAC_STATUS_ERROR;
 801192c:	2318      	movs	r3, #24
 801192e:	75fb      	strb	r3, [r7, #23]
                Nvm.RegionGroup2.CarrierSenseTime = mibSet->Param.CarrierSenseTime;
            }
#else
            status = LORAMAC_STATUS_ERROR;
#endif
            break;
 8011930:	e026      	b.n	8011980 <LoRaMacMibSetRequestConfirm+0x75c>
                Nvm.RegionGroup2.CarrierSenseTime = mibSet->Param.CarrierSenseTime;
 8011932:	687b      	ldr	r3, [r7, #4]
 8011934:	685b      	ldr	r3, [r3, #4]
 8011936:	4a15      	ldr	r2, [pc, #84]	@ (801198c <LoRaMacMibSetRequestConfirm+0x768>)
 8011938:	f8c2 3750 	str.w	r3, [r2, #1872]	@ 0x750
            break;
 801193c:	e020      	b.n	8011980 <LoRaMacMibSetRequestConfirm+0x75c>
        }
        default:
        {
            status = LoRaMacMibClassBSetRequestConfirm( mibSet );
 801193e:	6878      	ldr	r0, [r7, #4]
 8011940:	f000 fc28 	bl	8012194 <LoRaMacMibClassBSetRequestConfirm>
 8011944:	4603      	mov	r3, r0
 8011946:	75fb      	strb	r3, [r7, #23]
            break;
 8011948:	e01a      	b.n	8011980 <LoRaMacMibSetRequestConfirm+0x75c>
            break;
 801194a:	bf00      	nop
 801194c:	e018      	b.n	8011980 <LoRaMacMibSetRequestConfirm+0x75c>
            break;
 801194e:	bf00      	nop
 8011950:	e016      	b.n	8011980 <LoRaMacMibSetRequestConfirm+0x75c>
            break;
 8011952:	bf00      	nop
 8011954:	e014      	b.n	8011980 <LoRaMacMibSetRequestConfirm+0x75c>
            break;
 8011956:	bf00      	nop
 8011958:	e012      	b.n	8011980 <LoRaMacMibSetRequestConfirm+0x75c>
            break;
 801195a:	bf00      	nop
 801195c:	e010      	b.n	8011980 <LoRaMacMibSetRequestConfirm+0x75c>
            break;
 801195e:	bf00      	nop
 8011960:	e00e      	b.n	8011980 <LoRaMacMibSetRequestConfirm+0x75c>
            break;
 8011962:	bf00      	nop
 8011964:	e00c      	b.n	8011980 <LoRaMacMibSetRequestConfirm+0x75c>
            break;
 8011966:	bf00      	nop
 8011968:	e00a      	b.n	8011980 <LoRaMacMibSetRequestConfirm+0x75c>
            break;
 801196a:	bf00      	nop
 801196c:	e008      	b.n	8011980 <LoRaMacMibSetRequestConfirm+0x75c>
            break;
 801196e:	bf00      	nop
 8011970:	e006      	b.n	8011980 <LoRaMacMibSetRequestConfirm+0x75c>
            break;
 8011972:	bf00      	nop
 8011974:	e004      	b.n	8011980 <LoRaMacMibSetRequestConfirm+0x75c>
            break;
 8011976:	bf00      	nop
 8011978:	e002      	b.n	8011980 <LoRaMacMibSetRequestConfirm+0x75c>
            break;
 801197a:	bf00      	nop
 801197c:	e000      	b.n	8011980 <LoRaMacMibSetRequestConfirm+0x75c>
            break;
 801197e:	bf00      	nop
    {
        // Handle NVM potential changes
        MacCtx.MacFlags.Bits.NvmHandle = 1;
    }
#endif /* LORAMAC_VERSION */
    return status;
 8011980:	7dfb      	ldrb	r3, [r7, #23]
}
 8011982:	4618      	mov	r0, r3
 8011984:	3718      	adds	r7, #24
 8011986:	46bd      	mov	sp, r7
 8011988:	bd80      	pop	{r7, pc}
 801198a:	bf00      	nop
 801198c:	20000b34 	.word	0x20000b34

08011990 <LoRaMacMlmeRequest>:

    return LORAMAC_STATUS_OK;
}

LoRaMacStatus_t LoRaMacMlmeRequest( MlmeReq_t* mlmeRequest )
{
 8011990:	b580      	push	{r7, lr}
 8011992:	b086      	sub	sp, #24
 8011994:	af00      	add	r7, sp, #0
 8011996:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 8011998:	2302      	movs	r3, #2
 801199a:	75fb      	strb	r3, [r7, #23]
    MlmeConfirmQueue_t queueElement;
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    bool isAbpJoinPending = false;
#endif /* LORAMAC_VERSION */
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 801199c:	2300      	movs	r3, #0
 801199e:	81bb      	strh	r3, [r7, #12]

    if( mlmeRequest == NULL )
 80119a0:	687b      	ldr	r3, [r7, #4]
 80119a2:	2b00      	cmp	r3, #0
 80119a4:	d101      	bne.n	80119aa <LoRaMacMlmeRequest+0x1a>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80119a6:	2303      	movs	r3, #3
 80119a8:	e13a      	b.n	8011c20 <LoRaMacMlmeRequest+0x290>
    // Initialize mlmeRequest->ReqReturn.DutyCycleWaitTime to 0 in order to
    // return a valid value in case the MAC is busy.
    mlmeRequest->ReqReturn.DutyCycleWaitTime = 0;
#endif /* LORAMAC_VERSION */

    if( LoRaMacIsBusy( ) == true )
 80119aa:	f7fc fc55 	bl	800e258 <LoRaMacIsBusy>
 80119ae:	4603      	mov	r3, r0
 80119b0:	2b00      	cmp	r3, #0
 80119b2:	d001      	beq.n	80119b8 <LoRaMacMlmeRequest+0x28>
    {
        return LORAMAC_STATUS_BUSY;
 80119b4:	2301      	movs	r3, #1
 80119b6:	e133      	b.n	8011c20 <LoRaMacMlmeRequest+0x290>
    }
    if( LoRaMacConfirmQueueIsFull( ) == true )
 80119b8:	f001 f90c 	bl	8012bd4 <LoRaMacConfirmQueueIsFull>
 80119bc:	4603      	mov	r3, r0
 80119be:	2b00      	cmp	r3, #0
 80119c0:	d001      	beq.n	80119c6 <LoRaMacMlmeRequest+0x36>
    {
        return LORAMAC_STATUS_BUSY;
 80119c2:	2301      	movs	r3, #1
 80119c4:	e12c      	b.n	8011c20 <LoRaMacMlmeRequest+0x290>
    }

    if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 80119c6:	f001 f8f9 	bl	8012bbc <LoRaMacConfirmQueueGetCnt>
 80119ca:	4603      	mov	r3, r0
 80119cc:	2b00      	cmp	r3, #0
 80119ce:	d104      	bne.n	80119da <LoRaMacMlmeRequest+0x4a>
    {
        memset1( ( uint8_t* ) &MacCtx.MlmeConfirm, 0, sizeof( MacCtx.MlmeConfirm ) );
 80119d0:	2214      	movs	r2, #20
 80119d2:	2100      	movs	r1, #0
 80119d4:	4894      	ldr	r0, [pc, #592]	@ (8011c28 <LoRaMacMlmeRequest+0x298>)
 80119d6:	f004 fe6b 	bl	80166b0 <memset1>
    }
    MacCtx.MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80119da:	4b94      	ldr	r3, [pc, #592]	@ (8011c2c <LoRaMacMlmeRequest+0x29c>)
 80119dc:	2201      	movs	r2, #1
 80119de:	f883 2449 	strb.w	r2, [r3, #1097]	@ 0x449

    MacCtx.MacFlags.Bits.MlmeReq = 1;
 80119e2:	4a92      	ldr	r2, [pc, #584]	@ (8011c2c <LoRaMacMlmeRequest+0x29c>)
 80119e4:	f892 3481 	ldrb.w	r3, [r2, #1153]	@ 0x481
 80119e8:	f043 0304 	orr.w	r3, r3, #4
 80119ec:	f882 3481 	strb.w	r3, [r2, #1153]	@ 0x481
    queueElement.Request = mlmeRequest->Type;
 80119f0:	687b      	ldr	r3, [r7, #4]
 80119f2:	781b      	ldrb	r3, [r3, #0]
 80119f4:	743b      	strb	r3, [r7, #16]
    queueElement.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80119f6:	2301      	movs	r3, #1
 80119f8:	747b      	strb	r3, [r7, #17]
    queueElement.RestrictCommonReadyToHandle = false;
 80119fa:	2300      	movs	r3, #0
 80119fc:	74fb      	strb	r3, [r7, #19]
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    queueElement.ReadyToHandle = false;
#endif /* LORAMAC_VERSION */

    switch( mlmeRequest->Type )
 80119fe:	687b      	ldr	r3, [r7, #4]
 8011a00:	781b      	ldrb	r3, [r3, #0]
 8011a02:	3b01      	subs	r3, #1
 8011a04:	2b0d      	cmp	r3, #13
 8011a06:	f200 80e1 	bhi.w	8011bcc <LoRaMacMlmeRequest+0x23c>
 8011a0a:	a201      	add	r2, pc, #4	@ (adr r2, 8011a10 <LoRaMacMlmeRequest+0x80>)
 8011a0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011a10:	08011a49 	.word	0x08011a49
 8011a14:	08011bcd 	.word	0x08011bcd
 8011a18:	08011bcd 	.word	0x08011bcd
 8011a1c:	08011bcd 	.word	0x08011bcd
 8011a20:	08011ac1 	.word	0x08011ac1
 8011a24:	08011adf 	.word	0x08011adf
 8011a28:	08011aef 	.word	0x08011aef
 8011a2c:	08011bcd 	.word	0x08011bcd
 8011a30:	08011bcd 	.word	0x08011bcd
 8011a34:	08011b0b 	.word	0x08011b0b
 8011a38:	08011bcd 	.word	0x08011bcd
 8011a3c:	08011ba1 	.word	0x08011ba1
 8011a40:	08011b41 	.word	0x08011b41
 8011a44:	08011b83 	.word	0x08011b83
    {
        case MLME_JOIN:
        {
            if( ( MacCtx.MacState & LORAMAC_TX_DELAYED ) == LORAMAC_TX_DELAYED )
 8011a48:	4b78      	ldr	r3, [pc, #480]	@ (8011c2c <LoRaMacMlmeRequest+0x29c>)
 8011a4a:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 8011a4e:	f003 0320 	and.w	r3, r3, #32
 8011a52:	2b00      	cmp	r3, #0
 8011a54:	d001      	beq.n	8011a5a <LoRaMacMlmeRequest+0xca>
            {
                return LORAMAC_STATUS_BUSY;
 8011a56:	2301      	movs	r3, #1
 8011a58:	e0e2      	b.n	8011c20 <LoRaMacMlmeRequest+0x290>
            }

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            ResetMacParameters( false );
 8011a5a:	2000      	movs	r0, #0
 8011a5c:	f7fe f91c 	bl	800fc98 <ResetMacParameters>

            Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR );
 8011a60:	4b73      	ldr	r3, [pc, #460]	@ (8011c30 <LoRaMacMlmeRequest+0x2a0>)
 8011a62:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 8011a66:	687b      	ldr	r3, [r7, #4]
 8011a68:	795b      	ldrb	r3, [r3, #5]
 8011a6a:	b25b      	sxtb	r3, r3
 8011a6c:	2200      	movs	r2, #0
 8011a6e:	4619      	mov	r1, r3
 8011a70:	f002 fbfa 	bl	8014268 <RegionAlternateDr>
 8011a74:	4603      	mov	r3, r0
 8011a76:	461a      	mov	r2, r3
 8011a78:	4b6d      	ldr	r3, [pc, #436]	@ (8011c30 <LoRaMacMlmeRequest+0x2a0>)
 8011a7a:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
            Nvm.MacGroup1.ChannelsTxPower = mlmeRequest->Req.Join.TxPower;
 8011a7e:	687b      	ldr	r3, [r7, #4]
 8011a80:	f993 2006 	ldrsb.w	r2, [r3, #6]
 8011a84:	4b6a      	ldr	r3, [pc, #424]	@ (8011c30 <LoRaMacMlmeRequest+0x2a0>)
 8011a86:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

            queueElement.Status = LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL;
 8011a8a:	2307      	movs	r3, #7
 8011a8c:	747b      	strb	r3, [r7, #17]

            status = SendReJoinReq( JOIN_REQ );
 8011a8e:	20ff      	movs	r0, #255	@ 0xff
 8011a90:	f7fd fe80 	bl	800f794 <SendReJoinReq>
 8011a94:	4603      	mov	r3, r0
 8011a96:	75fb      	strb	r3, [r7, #23]

            if( status != LORAMAC_STATUS_OK )
 8011a98:	7dfb      	ldrb	r3, [r7, #23]
 8011a9a:	2b00      	cmp	r3, #0
 8011a9c:	f000 8098 	beq.w	8011bd0 <LoRaMacMlmeRequest+0x240>
            {
                // Revert back the previous datarate ( mainly used for US915 like regions )
                Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR_RESTORE );
 8011aa0:	4b63      	ldr	r3, [pc, #396]	@ (8011c30 <LoRaMacMlmeRequest+0x2a0>)
 8011aa2:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 8011aa6:	687b      	ldr	r3, [r7, #4]
 8011aa8:	795b      	ldrb	r3, [r3, #5]
 8011aaa:	b25b      	sxtb	r3, r3
 8011aac:	2201      	movs	r2, #1
 8011aae:	4619      	mov	r1, r3
 8011ab0:	f002 fbda 	bl	8014268 <RegionAlternateDr>
 8011ab4:	4603      	mov	r3, r0
 8011ab6:	461a      	mov	r2, r3
 8011ab8:	4b5d      	ldr	r3, [pc, #372]	@ (8011c30 <LoRaMacMlmeRequest+0x2a0>)
 8011aba:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
                isAbpJoinPending = true;
#endif
                status = LORAMAC_STATUS_OK;
            }
#endif /* LORAMAC_VERSION */
            break;
 8011abe:	e087      	b.n	8011bd0 <LoRaMacMlmeRequest+0x240>
        }
#endif /* LORAMAC_VERSION */
        case MLME_LINK_CHECK:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 8011ac0:	2300      	movs	r3, #0
 8011ac2:	75fb      	strb	r3, [r7, #23]
            if( LoRaMacCommandsAddCmd( MOTE_MAC_LINK_CHECK_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8011ac4:	f107 030c 	add.w	r3, r7, #12
 8011ac8:	2200      	movs	r2, #0
 8011aca:	4619      	mov	r1, r3
 8011acc:	2002      	movs	r0, #2
 8011ace:	f000 fcd1 	bl	8012474 <LoRaMacCommandsAddCmd>
 8011ad2:	4603      	mov	r3, r0
 8011ad4:	2b00      	cmp	r3, #0
 8011ad6:	d07d      	beq.n	8011bd4 <LoRaMacMlmeRequest+0x244>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8011ad8:	2313      	movs	r3, #19
 8011ada:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8011adc:	e07a      	b.n	8011bd4 <LoRaMacMlmeRequest+0x244>
        }
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        case MLME_TXCW:
        {
            status = SetTxContinuousWave( mlmeRequest->Req.TxCw.Timeout );
 8011ade:	687b      	ldr	r3, [r7, #4]
 8011ae0:	889b      	ldrh	r3, [r3, #4]
 8011ae2:	4618      	mov	r0, r3
 8011ae4:	f7fe fc38 	bl	8010358 <SetTxContinuousWave>
 8011ae8:	4603      	mov	r3, r0
 8011aea:	75fb      	strb	r3, [r7, #23]
            break;
 8011aec:	e079      	b.n	8011be2 <LoRaMacMlmeRequest+0x252>
        }
        case MLME_TXCW_1:
        {

            status = SetTxContinuousWave1( mlmeRequest->Req.TxCw.Timeout, mlmeRequest->Req.TxCw.Frequency, mlmeRequest->Req.TxCw.Power );
 8011aee:	687b      	ldr	r3, [r7, #4]
 8011af0:	8898      	ldrh	r0, [r3, #4]
 8011af2:	687b      	ldr	r3, [r7, #4]
 8011af4:	6899      	ldr	r1, [r3, #8]
 8011af6:	687b      	ldr	r3, [r7, #4]
 8011af8:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8011afc:	b2db      	uxtb	r3, r3
 8011afe:	461a      	mov	r2, r3
 8011b00:	f7fe fc60 	bl	80103c4 <SetTxContinuousWave1>
 8011b04:	4603      	mov	r3, r0
 8011b06:	75fb      	strb	r3, [r7, #23]
            break;
 8011b08:	e06b      	b.n	8011be2 <LoRaMacMlmeRequest+0x252>
        }
#endif /* LORAMAC_VERSION */
        case MLME_DEVICE_TIME:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 8011b0a:	2300      	movs	r3, #0
 8011b0c:	75fb      	strb	r3, [r7, #23]
            MacCommand_t* newCmd;
            /* ST_CODE Begin: Add MAC command condition to prevent some duplicated request */
            if (LoRaMacCommandsGetCmd( MOTE_MAC_DEVICE_TIME_REQ, &newCmd ) == LORAMAC_COMMANDS_SUCCESS)
 8011b0e:	f107 0308 	add.w	r3, r7, #8
 8011b12:	4619      	mov	r1, r3
 8011b14:	200d      	movs	r0, #13
 8011b16:	f000 fd2d 	bl	8012574 <LoRaMacCommandsGetCmd>
 8011b1a:	4603      	mov	r3, r0
 8011b1c:	2b00      	cmp	r3, #0
 8011b1e:	d102      	bne.n	8011b26 <LoRaMacMlmeRequest+0x196>
            {
                status = LORAMAC_STATUS_OK;
 8011b20:	2300      	movs	r3, #0
 8011b22:	75fb      	strb	r3, [r7, #23]
            /* ST_CODE End */
            else if( LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_TIME_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
            }
            break;
 8011b24:	e058      	b.n	8011bd8 <LoRaMacMlmeRequest+0x248>
            else if( LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_TIME_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8011b26:	f107 030c 	add.w	r3, r7, #12
 8011b2a:	2200      	movs	r2, #0
 8011b2c:	4619      	mov	r1, r3
 8011b2e:	200d      	movs	r0, #13
 8011b30:	f000 fca0 	bl	8012474 <LoRaMacCommandsAddCmd>
 8011b34:	4603      	mov	r3, r0
 8011b36:	2b00      	cmp	r3, #0
 8011b38:	d04e      	beq.n	8011bd8 <LoRaMacMlmeRequest+0x248>
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8011b3a:	2313      	movs	r3, #19
 8011b3c:	75fb      	strb	r3, [r7, #23]
            break;
 8011b3e:	e04b      	b.n	8011bd8 <LoRaMacMlmeRequest+0x248>
        }
        case MLME_PING_SLOT_INFO:
        {
            if( Nvm.MacGroup2.DeviceClass == CLASS_A )
 8011b40:	4b3b      	ldr	r3, [pc, #236]	@ (8011c30 <LoRaMacMlmeRequest+0x2a0>)
 8011b42:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 8011b46:	2b00      	cmp	r3, #0
 8011b48:	d148      	bne.n	8011bdc <LoRaMacMlmeRequest+0x24c>
            {
                uint8_t value = mlmeRequest->Req.PingSlotInfo.PingSlot.Value;
 8011b4a:	687b      	ldr	r3, [r7, #4]
 8011b4c:	791b      	ldrb	r3, [r3, #4]
 8011b4e:	75bb      	strb	r3, [r7, #22]

                // LoRaMac will send this command piggy-pack
                LoRaMacClassBSetPingSlotInfo( mlmeRequest->Req.PingSlotInfo.PingSlot.Fields.Periodicity );
 8011b50:	687b      	ldr	r3, [r7, #4]
 8011b52:	791b      	ldrb	r3, [r3, #4]
 8011b54:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8011b58:	b2db      	uxtb	r3, r3
 8011b5a:	4618      	mov	r0, r3
 8011b5c:	f000 faef 	bl	801213e <LoRaMacClassBSetPingSlotInfo>
                macCmdPayload[0] = value;
 8011b60:	7dbb      	ldrb	r3, [r7, #22]
 8011b62:	733b      	strb	r3, [r7, #12]
                status = LORAMAC_STATUS_OK;
 8011b64:	2300      	movs	r3, #0
 8011b66:	75fb      	strb	r3, [r7, #23]
                if( LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_INFO_REQ, macCmdPayload, 1 ) != LORAMAC_COMMANDS_SUCCESS )
 8011b68:	f107 030c 	add.w	r3, r7, #12
 8011b6c:	2201      	movs	r2, #1
 8011b6e:	4619      	mov	r1, r3
 8011b70:	2010      	movs	r0, #16
 8011b72:	f000 fc7f 	bl	8012474 <LoRaMacCommandsAddCmd>
 8011b76:	4603      	mov	r3, r0
 8011b78:	2b00      	cmp	r3, #0
 8011b7a:	d02f      	beq.n	8011bdc <LoRaMacMlmeRequest+0x24c>
                {
                    status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8011b7c:	2313      	movs	r3, #19
 8011b7e:	75fb      	strb	r3, [r7, #23]
                }
            }
            break;
 8011b80:	e02c      	b.n	8011bdc <LoRaMacMlmeRequest+0x24c>
        }
        case MLME_BEACON_TIMING:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 8011b82:	2300      	movs	r3, #0
 8011b84:	75fb      	strb	r3, [r7, #23]
            if( LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_TIMING_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8011b86:	f107 030c 	add.w	r3, r7, #12
 8011b8a:	2200      	movs	r2, #0
 8011b8c:	4619      	mov	r1, r3
 8011b8e:	2012      	movs	r0, #18
 8011b90:	f000 fc70 	bl	8012474 <LoRaMacCommandsAddCmd>
 8011b94:	4603      	mov	r3, r0
 8011b96:	2b00      	cmp	r3, #0
 8011b98:	d022      	beq.n	8011be0 <LoRaMacMlmeRequest+0x250>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8011b9a:	2313      	movs	r3, #19
 8011b9c:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8011b9e:	e01f      	b.n	8011be0 <LoRaMacMlmeRequest+0x250>
        }
        case MLME_BEACON_ACQUISITION:
        {
            // Apply the request
            queueElement.RestrictCommonReadyToHandle = true;
 8011ba0:	2301      	movs	r3, #1
 8011ba2:	74fb      	strb	r3, [r7, #19]

            if( LoRaMacClassBIsAcquisitionInProgress( ) == false )
 8011ba4:	f000 fa81 	bl	80120aa <LoRaMacClassBIsAcquisitionInProgress>
 8011ba8:	4603      	mov	r3, r0
 8011baa:	f083 0301 	eor.w	r3, r3, #1
 8011bae:	b2db      	uxtb	r3, r3
 8011bb0:	2b00      	cmp	r3, #0
 8011bb2:	d008      	beq.n	8011bc6 <LoRaMacMlmeRequest+0x236>
            {
                // Start class B algorithm
                LoRaMacClassBSetBeaconState( BEACON_STATE_ACQUISITION );
 8011bb4:	2000      	movs	r0, #0
 8011bb6:	f000 fa5a 	bl	801206e <LoRaMacClassBSetBeaconState>
                LoRaMacClassBBeaconTimerEvent( NULL );
 8011bba:	2000      	movs	r0, #0
 8011bbc:	f000 fa7c 	bl	80120b8 <LoRaMacClassBBeaconTimerEvent>

                status = LORAMAC_STATUS_OK;
 8011bc0:	2300      	movs	r3, #0
 8011bc2:	75fb      	strb	r3, [r7, #23]
            }
            else
            {
                status = LORAMAC_STATUS_BUSY;
            }
            break;
 8011bc4:	e00d      	b.n	8011be2 <LoRaMacMlmeRequest+0x252>
                status = LORAMAC_STATUS_BUSY;
 8011bc6:	2301      	movs	r3, #1
 8011bc8:	75fb      	strb	r3, [r7, #23]
            break;
 8011bca:	e00a      	b.n	8011be2 <LoRaMacMlmeRequest+0x252>
        }
        default:
            break;
 8011bcc:	bf00      	nop
 8011bce:	e008      	b.n	8011be2 <LoRaMacMlmeRequest+0x252>
            break;
 8011bd0:	bf00      	nop
 8011bd2:	e006      	b.n	8011be2 <LoRaMacMlmeRequest+0x252>
            break;
 8011bd4:	bf00      	nop
 8011bd6:	e004      	b.n	8011be2 <LoRaMacMlmeRequest+0x252>
            break;
 8011bd8:	bf00      	nop
 8011bda:	e002      	b.n	8011be2 <LoRaMacMlmeRequest+0x252>
            break;
 8011bdc:	bf00      	nop
 8011bde:	e000      	b.n	8011be2 <LoRaMacMlmeRequest+0x252>
            break;
 8011be0:	bf00      	nop
    }

    // Fill return structure
    mlmeRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 8011be2:	4b12      	ldr	r3, [pc, #72]	@ (8011c2c <LoRaMacMlmeRequest+0x29c>)
 8011be4:	f8d3 2484 	ldr.w	r2, [r3, #1156]	@ 0x484
 8011be8:	687b      	ldr	r3, [r7, #4]
 8011bea:	611a      	str	r2, [r3, #16]

    if( status != LORAMAC_STATUS_OK )
 8011bec:	7dfb      	ldrb	r3, [r7, #23]
 8011bee:	2b00      	cmp	r3, #0
 8011bf0:	d010      	beq.n	8011c14 <LoRaMacMlmeRequest+0x284>
    {
        if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 8011bf2:	f000 ffe3 	bl	8012bbc <LoRaMacConfirmQueueGetCnt>
 8011bf6:	4603      	mov	r3, r0
 8011bf8:	2b00      	cmp	r3, #0
 8011bfa:	d110      	bne.n	8011c1e <LoRaMacMlmeRequest+0x28e>
        {
            MacCtx.NodeAckRequested = false;
 8011bfc:	4b0b      	ldr	r3, [pc, #44]	@ (8011c2c <LoRaMacMlmeRequest+0x29c>)
 8011bfe:	2200      	movs	r2, #0
 8011c00:	f883 2410 	strb.w	r2, [r3, #1040]	@ 0x410
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 8011c04:	4a09      	ldr	r2, [pc, #36]	@ (8011c2c <LoRaMacMlmeRequest+0x29c>)
 8011c06:	f892 3481 	ldrb.w	r3, [r2, #1153]	@ 0x481
 8011c0a:	f36f 0382 	bfc	r3, #2, #1
 8011c0e:	f882 3481 	strb.w	r3, [r2, #1153]	@ 0x481
 8011c12:	e004      	b.n	8011c1e <LoRaMacMlmeRequest+0x28e>
        }
    }
    else
    {
        LoRaMacConfirmQueueAdd( &queueElement );
 8011c14:	f107 0310 	add.w	r3, r7, #16
 8011c18:	4618      	mov	r0, r3
 8011c1a:	f000 fe7b 	bl	8012914 <LoRaMacConfirmQueueAdd>
        {
            AbpJoinPendingStart( );
        }
#endif /* LORAMAC_VERSION */
    }
    return status;
 8011c1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8011c20:	4618      	mov	r0, r3
 8011c22:	3718      	adds	r7, #24
 8011c24:	46bd      	mov	sp, r7
 8011c26:	bd80      	pop	{r7, pc}
 8011c28:	20000a74 	.word	0x20000a74
 8011c2c:	2000062c 	.word	0x2000062c
 8011c30:	20000b34 	.word	0x20000b34

08011c34 <LoRaMacMcpsRequest>:

LoRaMacStatus_t LoRaMacMcpsRequest( McpsReq_t* mcpsRequest, bool allowDelayedTx )
{
 8011c34:	b580      	push	{r7, lr}
 8011c36:	b08c      	sub	sp, #48	@ 0x30
 8011c38:	af02      	add	r7, sp, #8
 8011c3a:	6078      	str	r0, [r7, #4]
 8011c3c:	460b      	mov	r3, r1
 8011c3e:	70fb      	strb	r3, [r7, #3]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 8011c40:	2302      	movs	r3, #2
 8011c42:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    LoRaMacHeader_t macHdr;
    VerifyParams_t verify;
    uint8_t fPort = 0;
 8011c46:	2300      	movs	r3, #0
 8011c48:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    void* fBuffer = NULL;
 8011c4c:	2300      	movs	r3, #0
 8011c4e:	623b      	str	r3, [r7, #32]
    uint16_t fBufferSize;
    int8_t datarate = DR_0;
 8011c50:	2300      	movs	r3, #0
 8011c52:	777b      	strb	r3, [r7, #29]
    bool readyToSend = false;
 8011c54:	2300      	movs	r3, #0
 8011c56:	773b      	strb	r3, [r7, #28]

    if( mcpsRequest == NULL )
 8011c58:	687b      	ldr	r3, [r7, #4]
 8011c5a:	2b00      	cmp	r3, #0
 8011c5c:	d101      	bne.n	8011c62 <LoRaMacMcpsRequest+0x2e>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8011c5e:	2303      	movs	r3, #3
 8011c60:	e0d4      	b.n	8011e0c <LoRaMacMcpsRequest+0x1d8>
    }
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    if( LoRaMacIsBusy( ) == true )
 8011c62:	f7fc faf9 	bl	800e258 <LoRaMacIsBusy>
 8011c66:	4603      	mov	r3, r0
 8011c68:	2b00      	cmp	r3, #0
 8011c6a:	d001      	beq.n	8011c70 <LoRaMacMcpsRequest+0x3c>
    {
        return LORAMAC_STATUS_BUSY;
 8011c6c:	2301      	movs	r3, #1
 8011c6e:	e0cd      	b.n	8011e0c <LoRaMacMcpsRequest+0x1d8>
    }

    macHdr.Value = 0;
 8011c70:	2300      	movs	r3, #0
 8011c72:	733b      	strb	r3, [r7, #12]
    memset1( ( uint8_t* ) &MacCtx.McpsConfirm, 0, sizeof( MacCtx.McpsConfirm ) );
 8011c74:	2214      	movs	r2, #20
 8011c76:	2100      	movs	r1, #0
 8011c78:	4866      	ldr	r0, [pc, #408]	@ (8011e14 <LoRaMacMcpsRequest+0x1e0>)
 8011c7a:	f004 fd19 	bl	80166b0 <memset1>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8011c7e:	4b66      	ldr	r3, [pc, #408]	@ (8011e18 <LoRaMacMcpsRequest+0x1e4>)
 8011c80:	2201      	movs	r2, #1
 8011c82:	f883 2435 	strb.w	r2, [r3, #1077]	@ 0x435

    // AckTimeoutRetriesCounter must be reset every time a new request (unconfirmed or confirmed) is performed.
    MacCtx.AckTimeoutRetriesCounter = 1;
 8011c86:	4b64      	ldr	r3, [pc, #400]	@ (8011e18 <LoRaMacMcpsRequest+0x1e4>)
 8011c88:	2201      	movs	r2, #1
 8011c8a:	f883 240e 	strb.w	r2, [r3, #1038]	@ 0x40e

    switch( mcpsRequest->Type )
 8011c8e:	687b      	ldr	r3, [r7, #4]
 8011c90:	781b      	ldrb	r3, [r3, #0]
 8011c92:	2b03      	cmp	r3, #3
 8011c94:	d03d      	beq.n	8011d12 <LoRaMacMcpsRequest+0xde>
 8011c96:	2b03      	cmp	r3, #3
 8011c98:	dc4f      	bgt.n	8011d3a <LoRaMacMcpsRequest+0x106>
 8011c9a:	2b00      	cmp	r3, #0
 8011c9c:	d002      	beq.n	8011ca4 <LoRaMacMcpsRequest+0x70>
 8011c9e:	2b01      	cmp	r3, #1
 8011ca0:	d019      	beq.n	8011cd6 <LoRaMacMcpsRequest+0xa2>
            fBufferSize = mcpsRequest->Req.Proprietary.fBufferSize;
            datarate = mcpsRequest->Req.Proprietary.Datarate;
            break;
        }
        default:
            break;
 8011ca2:	e04a      	b.n	8011d3a <LoRaMacMcpsRequest+0x106>
            readyToSend = true;
 8011ca4:	2301      	movs	r3, #1
 8011ca6:	773b      	strb	r3, [r7, #28]
            MacCtx.AckTimeoutRetries = 1;
 8011ca8:	4b5b      	ldr	r3, [pc, #364]	@ (8011e18 <LoRaMacMcpsRequest+0x1e4>)
 8011caa:	2201      	movs	r2, #1
 8011cac:	f883 240d 	strb.w	r2, [r3, #1037]	@ 0x40d
            macHdr.Bits.MType = FRAME_TYPE_DATA_UNCONFIRMED_UP;
 8011cb0:	7b3b      	ldrb	r3, [r7, #12]
 8011cb2:	2202      	movs	r2, #2
 8011cb4:	f362 1347 	bfi	r3, r2, #5, #3
 8011cb8:	733b      	strb	r3, [r7, #12]
            fPort = mcpsRequest->Req.Unconfirmed.fPort;
 8011cba:	687b      	ldr	r3, [r7, #4]
 8011cbc:	791b      	ldrb	r3, [r3, #4]
 8011cbe:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
            fBuffer = mcpsRequest->Req.Unconfirmed.fBuffer;
 8011cc2:	687b      	ldr	r3, [r7, #4]
 8011cc4:	689b      	ldr	r3, [r3, #8]
 8011cc6:	623b      	str	r3, [r7, #32]
            fBufferSize = mcpsRequest->Req.Unconfirmed.fBufferSize;
 8011cc8:	687b      	ldr	r3, [r7, #4]
 8011cca:	899b      	ldrh	r3, [r3, #12]
 8011ccc:	83fb      	strh	r3, [r7, #30]
            datarate = mcpsRequest->Req.Unconfirmed.Datarate;
 8011cce:	687b      	ldr	r3, [r7, #4]
 8011cd0:	7b9b      	ldrb	r3, [r3, #14]
 8011cd2:	777b      	strb	r3, [r7, #29]
            break;
 8011cd4:	e032      	b.n	8011d3c <LoRaMacMcpsRequest+0x108>
            readyToSend = true;
 8011cd6:	2301      	movs	r3, #1
 8011cd8:	773b      	strb	r3, [r7, #28]
            MacCtx.AckTimeoutRetries = MIN( mcpsRequest->Req.Confirmed.NbTrials, MAX_ACK_RETRIES );
 8011cda:	687b      	ldr	r3, [r7, #4]
 8011cdc:	7bdb      	ldrb	r3, [r3, #15]
 8011cde:	2b08      	cmp	r3, #8
 8011ce0:	bf28      	it	cs
 8011ce2:	2308      	movcs	r3, #8
 8011ce4:	b2da      	uxtb	r2, r3
 8011ce6:	4b4c      	ldr	r3, [pc, #304]	@ (8011e18 <LoRaMacMcpsRequest+0x1e4>)
 8011ce8:	f883 240d 	strb.w	r2, [r3, #1037]	@ 0x40d
            macHdr.Bits.MType = FRAME_TYPE_DATA_CONFIRMED_UP;
 8011cec:	7b3b      	ldrb	r3, [r7, #12]
 8011cee:	2204      	movs	r2, #4
 8011cf0:	f362 1347 	bfi	r3, r2, #5, #3
 8011cf4:	733b      	strb	r3, [r7, #12]
            fPort = mcpsRequest->Req.Confirmed.fPort;
 8011cf6:	687b      	ldr	r3, [r7, #4]
 8011cf8:	791b      	ldrb	r3, [r3, #4]
 8011cfa:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
            fBuffer = mcpsRequest->Req.Confirmed.fBuffer;
 8011cfe:	687b      	ldr	r3, [r7, #4]
 8011d00:	689b      	ldr	r3, [r3, #8]
 8011d02:	623b      	str	r3, [r7, #32]
            fBufferSize = mcpsRequest->Req.Confirmed.fBufferSize;
 8011d04:	687b      	ldr	r3, [r7, #4]
 8011d06:	899b      	ldrh	r3, [r3, #12]
 8011d08:	83fb      	strh	r3, [r7, #30]
            datarate = mcpsRequest->Req.Confirmed.Datarate;
 8011d0a:	687b      	ldr	r3, [r7, #4]
 8011d0c:	7b9b      	ldrb	r3, [r3, #14]
 8011d0e:	777b      	strb	r3, [r7, #29]
            break;
 8011d10:	e014      	b.n	8011d3c <LoRaMacMcpsRequest+0x108>
            readyToSend = true;
 8011d12:	2301      	movs	r3, #1
 8011d14:	773b      	strb	r3, [r7, #28]
            MacCtx.AckTimeoutRetries = 1;
 8011d16:	4b40      	ldr	r3, [pc, #256]	@ (8011e18 <LoRaMacMcpsRequest+0x1e4>)
 8011d18:	2201      	movs	r2, #1
 8011d1a:	f883 240d 	strb.w	r2, [r3, #1037]	@ 0x40d
            macHdr.Bits.MType = FRAME_TYPE_PROPRIETARY;
 8011d1e:	7b3b      	ldrb	r3, [r7, #12]
 8011d20:	f043 03e0 	orr.w	r3, r3, #224	@ 0xe0
 8011d24:	733b      	strb	r3, [r7, #12]
            fBuffer = mcpsRequest->Req.Proprietary.fBuffer;
 8011d26:	687b      	ldr	r3, [r7, #4]
 8011d28:	685b      	ldr	r3, [r3, #4]
 8011d2a:	623b      	str	r3, [r7, #32]
            fBufferSize = mcpsRequest->Req.Proprietary.fBufferSize;
 8011d2c:	687b      	ldr	r3, [r7, #4]
 8011d2e:	891b      	ldrh	r3, [r3, #8]
 8011d30:	83fb      	strh	r3, [r7, #30]
            datarate = mcpsRequest->Req.Proprietary.Datarate;
 8011d32:	687b      	ldr	r3, [r7, #4]
 8011d34:	7a9b      	ldrb	r3, [r3, #10]
 8011d36:	777b      	strb	r3, [r7, #29]
            break;
 8011d38:	e000      	b.n	8011d3c <LoRaMacMcpsRequest+0x108>
            break;
 8011d3a:	bf00      	nop
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 8011d3c:	2302      	movs	r3, #2
 8011d3e:	753b      	strb	r3, [r7, #20]
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8011d40:	4b36      	ldr	r3, [pc, #216]	@ (8011e1c <LoRaMacMcpsRequest+0x1e8>)
 8011d42:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8011d46:	75bb      	strb	r3, [r7, #22]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011d48:	4b34      	ldr	r3, [pc, #208]	@ (8011e1c <LoRaMacMcpsRequest+0x1e8>)
 8011d4a:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8011d4e:	f107 0214 	add.w	r2, r7, #20
 8011d52:	4611      	mov	r1, r2
 8011d54:	4618      	mov	r0, r3
 8011d56:	f002 f964 	bl	8014022 <RegionGetPhyParam>
 8011d5a:	4603      	mov	r3, r0
 8011d5c:	613b      	str	r3, [r7, #16]
    // Apply the minimum possible datarate.
    // Some regions have limitations for the minimum datarate.
    datarate = MAX( datarate, ( int8_t )phyParam.Value );
 8011d5e:	693b      	ldr	r3, [r7, #16]
 8011d60:	b25b      	sxtb	r3, r3
 8011d62:	f997 201d 	ldrsb.w	r2, [r7, #29]
 8011d66:	4293      	cmp	r3, r2
 8011d68:	bfb8      	it	lt
 8011d6a:	4613      	movlt	r3, r2
 8011d6c:	777b      	strb	r3, [r7, #29]

    if( readyToSend == true )
 8011d6e:	7f3b      	ldrb	r3, [r7, #28]
 8011d70:	2b00      	cmp	r3, #0
 8011d72:	d044      	beq.n	8011dfe <LoRaMacMcpsRequest+0x1ca>
    {
        if( Nvm.MacGroup2.AdrCtrlOn == false )
 8011d74:	4b29      	ldr	r3, [pc, #164]	@ (8011e1c <LoRaMacMcpsRequest+0x1e8>)
 8011d76:	f893 311a 	ldrb.w	r3, [r3, #282]	@ 0x11a
 8011d7a:	f083 0301 	eor.w	r3, r3, #1
 8011d7e:	b2db      	uxtb	r3, r3
 8011d80:	2b00      	cmp	r3, #0
 8011d82:	d019      	beq.n	8011db8 <LoRaMacMcpsRequest+0x184>
        {
            verify.DatarateParams.Datarate = datarate;
 8011d84:	7f7b      	ldrb	r3, [r7, #29]
 8011d86:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8011d88:	4b24      	ldr	r3, [pc, #144]	@ (8011e1c <LoRaMacMcpsRequest+0x1e8>)
 8011d8a:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8011d8e:	72bb      	strb	r3, [r7, #10]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 8011d90:	4b22      	ldr	r3, [pc, #136]	@ (8011e1c <LoRaMacMcpsRequest+0x1e8>)
 8011d92:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8011d96:	f107 0108 	add.w	r1, r7, #8
 8011d9a:	2205      	movs	r2, #5
 8011d9c:	4618      	mov	r0, r3
 8011d9e:	f002 f97b 	bl	8014098 <RegionVerify>
 8011da2:	4603      	mov	r3, r0
 8011da4:	2b00      	cmp	r3, #0
 8011da6:	d005      	beq.n	8011db4 <LoRaMacMcpsRequest+0x180>
            {
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 8011da8:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8011dac:	4b1b      	ldr	r3, [pc, #108]	@ (8011e1c <LoRaMacMcpsRequest+0x1e8>)
 8011dae:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 8011db2:	e001      	b.n	8011db8 <LoRaMacMcpsRequest+0x184>
            }
            else
            {
                return LORAMAC_STATUS_PARAMETER_INVALID;
 8011db4:	2303      	movs	r3, #3
 8011db6:	e029      	b.n	8011e0c <LoRaMacMcpsRequest+0x1d8>
            }
        }

        status = Send( &macHdr, fPort, fBuffer, fBufferSize, allowDelayedTx );
 8011db8:	8bfa      	ldrh	r2, [r7, #30]
 8011dba:	f897 1026 	ldrb.w	r1, [r7, #38]	@ 0x26
 8011dbe:	f107 000c 	add.w	r0, r7, #12
 8011dc2:	78fb      	ldrb	r3, [r7, #3]
 8011dc4:	9300      	str	r3, [sp, #0]
 8011dc6:	4613      	mov	r3, r2
 8011dc8:	6a3a      	ldr	r2, [r7, #32]
 8011dca:	f7fd fc05 	bl	800f5d8 <Send>
 8011dce:	4603      	mov	r3, r0
 8011dd0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if( status == LORAMAC_STATUS_OK )
 8011dd4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011dd8:	2b00      	cmp	r3, #0
 8011dda:	d10c      	bne.n	8011df6 <LoRaMacMcpsRequest+0x1c2>
        {
            MacCtx.McpsConfirm.McpsRequest = mcpsRequest->Type;
 8011ddc:	687b      	ldr	r3, [r7, #4]
 8011dde:	781a      	ldrb	r2, [r3, #0]
 8011de0:	4b0d      	ldr	r3, [pc, #52]	@ (8011e18 <LoRaMacMcpsRequest+0x1e4>)
 8011de2:	f883 2434 	strb.w	r2, [r3, #1076]	@ 0x434
            MacCtx.MacFlags.Bits.McpsReq = 1;
 8011de6:	4a0c      	ldr	r2, [pc, #48]	@ (8011e18 <LoRaMacMcpsRequest+0x1e4>)
 8011de8:	f892 3481 	ldrb.w	r3, [r2, #1153]	@ 0x481
 8011dec:	f043 0301 	orr.w	r3, r3, #1
 8011df0:	f882 3481 	strb.w	r3, [r2, #1153]	@ 0x481
 8011df4:	e003      	b.n	8011dfe <LoRaMacMcpsRequest+0x1ca>
        }
        else
        {
            MacCtx.NodeAckRequested = false;
 8011df6:	4b08      	ldr	r3, [pc, #32]	@ (8011e18 <LoRaMacMcpsRequest+0x1e4>)
 8011df8:	2200      	movs	r2, #0
 8011dfa:	f883 2410 	strb.w	r2, [r3, #1040]	@ 0x410
        }
    }
#endif /* LORAMAC_VERSION */

    // Fill return structure
    mcpsRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 8011dfe:	4b06      	ldr	r3, [pc, #24]	@ (8011e18 <LoRaMacMcpsRequest+0x1e4>)
 8011e00:	f8d3 2484 	ldr.w	r2, [r3, #1156]	@ 0x484
 8011e04:	687b      	ldr	r3, [r7, #4]
 8011e06:	611a      	str	r2, [r3, #16]

    return status;
 8011e08:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8011e0c:	4618      	mov	r0, r3
 8011e0e:	3728      	adds	r7, #40	@ 0x28
 8011e10:	46bd      	mov	sp, r7
 8011e12:	bd80      	pop	{r7, pc}
 8011e14:	20000a60 	.word	0x20000a60
 8011e18:	2000062c 	.word	0x2000062c
 8011e1c:	20000b34 	.word	0x20000b34

08011e20 <LoRaMacTestSetDutyCycleOn>:
    OnMacProcessNotify( );
}
#endif /* LORAMAC_VERSION */

void LoRaMacTestSetDutyCycleOn( bool enable )
{
 8011e20:	b580      	push	{r7, lr}
 8011e22:	b084      	sub	sp, #16
 8011e24:	af00      	add	r7, sp, #0
 8011e26:	4603      	mov	r3, r0
 8011e28:	71fb      	strb	r3, [r7, #7]
    VerifyParams_t verify;

    verify.DutyCycle = enable;
 8011e2a:	79fb      	ldrb	r3, [r7, #7]
 8011e2c:	733b      	strb	r3, [r7, #12]

    if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DUTY_CYCLE ) == true )
 8011e2e:	4b0d      	ldr	r3, [pc, #52]	@ (8011e64 <LoRaMacTestSetDutyCycleOn+0x44>)
 8011e30:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8011e34:	f107 010c 	add.w	r1, r7, #12
 8011e38:	220f      	movs	r2, #15
 8011e3a:	4618      	mov	r0, r3
 8011e3c:	f002 f92c 	bl	8014098 <RegionVerify>
 8011e40:	4603      	mov	r3, r0
 8011e42:	2b00      	cmp	r3, #0
 8011e44:	d00a      	beq.n	8011e5c <LoRaMacTestSetDutyCycleOn+0x3c>
    {
        Nvm.MacGroup2.DutyCycleOn = enable;
 8011e46:	4a07      	ldr	r2, [pc, #28]	@ (8011e64 <LoRaMacTestSetDutyCycleOn+0x44>)
 8011e48:	79fb      	ldrb	r3, [r7, #7]
 8011e4a:	f882 311c 	strb.w	r3, [r2, #284]	@ 0x11c
        // Handle NVM potential changes
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 8011e4e:	4a06      	ldr	r2, [pc, #24]	@ (8011e68 <LoRaMacTestSetDutyCycleOn+0x48>)
 8011e50:	f892 3481 	ldrb.w	r3, [r2, #1153]	@ 0x481
 8011e54:	f043 0320 	orr.w	r3, r3, #32
 8011e58:	f882 3481 	strb.w	r3, [r2, #1153]	@ 0x481
    }
}
 8011e5c:	bf00      	nop
 8011e5e:	3710      	adds	r7, #16
 8011e60:	46bd      	mov	sp, r7
 8011e62:	bd80      	pop	{r7, pc}
 8011e64:	20000b34 	.word	0x20000b34
 8011e68:	2000062c 	.word	0x2000062c

08011e6c <LoRaMacDeInitialization>:

LoRaMacStatus_t LoRaMacDeInitialization( void )
{
 8011e6c:	b580      	push	{r7, lr}
 8011e6e:	af00      	add	r7, sp, #0
    // Check the current state of the LoRaMac
    if ( LoRaMacStop( ) == LORAMAC_STATUS_OK )
 8011e70:	f7fe ff2a 	bl	8010cc8 <LoRaMacStop>
 8011e74:	4603      	mov	r3, r0
 8011e76:	2b00      	cmp	r3, #0
 8011e78:	d115      	bne.n	8011ea6 <LoRaMacDeInitialization+0x3a>
    {
        // Stop Timers
        TimerStop( &MacCtx.TxDelayedTimer );
 8011e7a:	480c      	ldr	r0, [pc, #48]	@ (8011eac <LoRaMacDeInitialization+0x40>)
 8011e7c:	f008 fd90 	bl	801a9a0 <UTIL_TIMER_Stop>
        TimerStop( &MacCtx.RxWindowTimer1 );
 8011e80:	480b      	ldr	r0, [pc, #44]	@ (8011eb0 <LoRaMacDeInitialization+0x44>)
 8011e82:	f008 fd8d 	bl	801a9a0 <UTIL_TIMER_Stop>
        TimerStop( &MacCtx.RxWindowTimer2 );
 8011e86:	480b      	ldr	r0, [pc, #44]	@ (8011eb4 <LoRaMacDeInitialization+0x48>)
 8011e88:	f008 fd8a 	bl	801a9a0 <UTIL_TIMER_Stop>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        TimerStop( &MacCtx.AckTimeoutTimer );
 8011e8c:	480a      	ldr	r0, [pc, #40]	@ (8011eb8 <LoRaMacDeInitialization+0x4c>)
 8011e8e:	f008 fd87 	bl	801a9a0 <UTIL_TIMER_Stop>
#endif /* LORAMAC_VERSION */

        // Take care about class B
        LoRaMacClassBHaltBeaconing( );
 8011e92:	f000 f95e 	bl	8012152 <LoRaMacClassBHaltBeaconing>

        // Reset Mac parameters
        ResetMacParameters( false );
 8011e96:	2000      	movs	r0, #0
 8011e98:	f7fd fefe 	bl	800fc98 <ResetMacParameters>

        // Switch off Radio
        Radio.Sleep( );
 8011e9c:	4b07      	ldr	r3, [pc, #28]	@ (8011ebc <LoRaMacDeInitialization+0x50>)
 8011e9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011ea0:	4798      	blx	r3

        // Return success
        return LORAMAC_STATUS_OK;
 8011ea2:	2300      	movs	r3, #0
 8011ea4:	e000      	b.n	8011ea8 <LoRaMacDeInitialization+0x3c>
    }
    else
    {
        return LORAMAC_STATUS_BUSY;
 8011ea6:	2301      	movs	r3, #1
    }
}
 8011ea8:	4618      	mov	r0, r3
 8011eaa:	bd80      	pop	{r7, pc}
 8011eac:	20000994 	.word	0x20000994
 8011eb0:	200009ac 	.word	0x200009ac
 8011eb4:	200009c4 	.word	0x200009c4
 8011eb8:	20000a20 	.word	0x20000a20
 8011ebc:	0801bd08 	.word	0x0801bd08

08011ec0 <CalcNextV10X>:
#include "LoRaMacAdr.h"
#include "LoRaMacVersion.h"

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
static bool CalcNextV10X( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut, uint32_t* adrAckCounter )
{
 8011ec0:	b580      	push	{r7, lr}
 8011ec2:	b08c      	sub	sp, #48	@ 0x30
 8011ec4:	af00      	add	r7, sp, #0
 8011ec6:	60f8      	str	r0, [r7, #12]
 8011ec8:	60b9      	str	r1, [r7, #8]
 8011eca:	607a      	str	r2, [r7, #4]
 8011ecc:	603b      	str	r3, [r7, #0]
    bool adrAckReq = false;
 8011ece:	2300      	movs	r3, #0
 8011ed0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    int8_t datarate = adrNext->Datarate;
 8011ed4:	68fb      	ldr	r3, [r7, #12]
 8011ed6:	7c1b      	ldrb	r3, [r3, #16]
 8011ed8:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    int8_t txPower = adrNext->TxPower;
 8011edc:	68fb      	ldr	r3, [r7, #12]
 8011ede:	7c5b      	ldrb	r3, [r3, #17]
 8011ee0:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
    int8_t minTxDatarate;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Report back the adr ack counter
    *adrAckCounter = adrNext->AdrAckCounter;
 8011ee4:	68fb      	ldr	r3, [r7, #12]
 8011ee6:	689a      	ldr	r2, [r3, #8]
 8011ee8:	683b      	ldr	r3, [r7, #0]
 8011eea:	601a      	str	r2, [r3, #0]

    if( adrNext->AdrEnabled == true )
 8011eec:	68fb      	ldr	r3, [r7, #12]
 8011eee:	795b      	ldrb	r3, [r3, #5]
 8011ef0:	2b00      	cmp	r3, #0
 8011ef2:	f000 808b 	beq.w	801200c <CalcNextV10X+0x14c>
    {
        // Query minimum TX Datarate
        getPhy.Attribute = PHY_MIN_TX_DR;
 8011ef6:	2302      	movs	r3, #2
 8011ef8:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
        getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 8011efc:	68fb      	ldr	r3, [r7, #12]
 8011efe:	7c9b      	ldrb	r3, [r3, #18]
 8011f00:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 8011f04:	68fb      	ldr	r3, [r7, #12]
 8011f06:	7cdb      	ldrb	r3, [r3, #19]
 8011f08:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8011f0c:	4611      	mov	r1, r2
 8011f0e:	4618      	mov	r0, r3
 8011f10:	f002 f887 	bl	8014022 <RegionGetPhyParam>
 8011f14:	4603      	mov	r3, r0
 8011f16:	623b      	str	r3, [r7, #32]
        minTxDatarate = phyParam.Value;
 8011f18:	6a3b      	ldr	r3, [r7, #32]
 8011f1a:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
        datarate = MAX( datarate, minTxDatarate );
 8011f1e:	f997 202c 	ldrsb.w	r2, [r7, #44]	@ 0x2c
 8011f22:	f997 302e 	ldrsb.w	r3, [r7, #46]	@ 0x2e
 8011f26:	4293      	cmp	r3, r2
 8011f28:	bfb8      	it	lt
 8011f2a:	4613      	movlt	r3, r2
 8011f2c:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e

        if( datarate == minTxDatarate )
 8011f30:	f997 202e 	ldrsb.w	r2, [r7, #46]	@ 0x2e
 8011f34:	f997 302c 	ldrsb.w	r3, [r7, #44]	@ 0x2c
 8011f38:	429a      	cmp	r2, r3
 8011f3a:	d106      	bne.n	8011f4a <CalcNextV10X+0x8a>
        {
            *adrAckCounter = 0;
 8011f3c:	683b      	ldr	r3, [r7, #0]
 8011f3e:	2200      	movs	r2, #0
 8011f40:	601a      	str	r2, [r3, #0]
            adrAckReq = false;
 8011f42:	2300      	movs	r3, #0
 8011f44:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8011f48:	e060      	b.n	801200c <CalcNextV10X+0x14c>
        }
        else
        {
            if( adrNext->AdrAckCounter >=  adrNext->AdrAckLimit )
 8011f4a:	68fb      	ldr	r3, [r7, #12]
 8011f4c:	689b      	ldr	r3, [r3, #8]
 8011f4e:	68fa      	ldr	r2, [r7, #12]
 8011f50:	8992      	ldrh	r2, [r2, #12]
 8011f52:	4293      	cmp	r3, r2
 8011f54:	d303      	bcc.n	8011f5e <CalcNextV10X+0x9e>
            {
                adrAckReq = true;
 8011f56:	2301      	movs	r3, #1
 8011f58:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8011f5c:	e002      	b.n	8011f64 <CalcNextV10X+0xa4>
            }
            else
            {
                adrAckReq = false;
 8011f5e:	2300      	movs	r3, #0
 8011f60:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            }
            if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
 8011f64:	68fb      	ldr	r3, [r7, #12]
 8011f66:	689b      	ldr	r3, [r3, #8]
 8011f68:	68fa      	ldr	r2, [r7, #12]
 8011f6a:	8992      	ldrh	r2, [r2, #12]
 8011f6c:	4611      	mov	r1, r2
 8011f6e:	68fa      	ldr	r2, [r7, #12]
 8011f70:	89d2      	ldrh	r2, [r2, #14]
 8011f72:	440a      	add	r2, r1
 8011f74:	4293      	cmp	r3, r2
 8011f76:	d349      	bcc.n	801200c <CalcNextV10X+0x14c>
            {
                // Set TX Power to maximum
                getPhy.Attribute = PHY_MAX_TX_POWER;
 8011f78:	2308      	movs	r3, #8
 8011f7a:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
                phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 8011f7e:	68fb      	ldr	r3, [r7, #12]
 8011f80:	7cdb      	ldrb	r3, [r3, #19]
 8011f82:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8011f86:	4611      	mov	r1, r2
 8011f88:	4618      	mov	r0, r3
 8011f8a:	f002 f84a 	bl	8014022 <RegionGetPhyParam>
 8011f8e:	4603      	mov	r3, r0
 8011f90:	623b      	str	r3, [r7, #32]
                txPower = phyParam.Value;
 8011f92:	6a3b      	ldr	r3, [r7, #32]
 8011f94:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d

                if( ( adrNext->AdrAckCounter % adrNext->AdrAckDelay ) == 1 )
 8011f98:	68fb      	ldr	r3, [r7, #12]
 8011f9a:	689b      	ldr	r3, [r3, #8]
 8011f9c:	68fa      	ldr	r2, [r7, #12]
 8011f9e:	89d2      	ldrh	r2, [r2, #14]
 8011fa0:	fbb3 f1f2 	udiv	r1, r3, r2
 8011fa4:	fb01 f202 	mul.w	r2, r1, r2
 8011fa8:	1a9b      	subs	r3, r3, r2
 8011faa:	2b01      	cmp	r3, #1
 8011fac:	d12e      	bne.n	801200c <CalcNextV10X+0x14c>
                {
                    // Decrease the datarate
                    getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 8011fae:	2322      	movs	r3, #34	@ 0x22
 8011fb0:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
                    getPhy.Datarate = datarate;
 8011fb4:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8011fb8:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
                    getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 8011fbc:	68fb      	ldr	r3, [r7, #12]
 8011fbe:	7c9b      	ldrb	r3, [r3, #18]
 8011fc0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
                    phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 8011fc4:	68fb      	ldr	r3, [r7, #12]
 8011fc6:	7cdb      	ldrb	r3, [r3, #19]
 8011fc8:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8011fcc:	4611      	mov	r1, r2
 8011fce:	4618      	mov	r0, r3
 8011fd0:	f002 f827 	bl	8014022 <RegionGetPhyParam>
 8011fd4:	4603      	mov	r3, r0
 8011fd6:	623b      	str	r3, [r7, #32]
                    datarate = phyParam.Value;
 8011fd8:	6a3b      	ldr	r3, [r7, #32]
 8011fda:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e

                    if( datarate == minTxDatarate )
 8011fde:	f997 202e 	ldrsb.w	r2, [r7, #46]	@ 0x2e
 8011fe2:	f997 302c 	ldrsb.w	r3, [r7, #44]	@ 0x2c
 8011fe6:	429a      	cmp	r2, r3
 8011fe8:	d110      	bne.n	801200c <CalcNextV10X+0x14c>
                    {
                        // We must set adrAckReq to false as soon as we reach the lowest datarate
                        adrAckReq = false;
 8011fea:	2300      	movs	r3, #0
 8011fec:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
                        if( adrNext->UpdateChanMask == true )
 8011ff0:	68fb      	ldr	r3, [r7, #12]
 8011ff2:	791b      	ldrb	r3, [r3, #4]
 8011ff4:	2b00      	cmp	r3, #0
 8011ff6:	d009      	beq.n	801200c <CalcNextV10X+0x14c>
                        {
                            InitDefaultsParams_t params;
                            params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 8011ff8:	2302      	movs	r3, #2
 8011ffa:	773b      	strb	r3, [r7, #28]
                            RegionInitDefaults( adrNext->Region, &params );
 8011ffc:	68fb      	ldr	r3, [r7, #12]
 8011ffe:	7cdb      	ldrb	r3, [r3, #19]
 8012000:	f107 0214 	add.w	r2, r7, #20
 8012004:	4611      	mov	r1, r2
 8012006:	4618      	mov	r0, r3
 8012008:	f002 f834 	bl	8014074 <RegionInitDefaults>
                }
            }
        }
    }

    *drOut = datarate;
 801200c:	68bb      	ldr	r3, [r7, #8]
 801200e:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 8012012:	701a      	strb	r2, [r3, #0]
    *txPowOut = txPower;
 8012014:	687b      	ldr	r3, [r7, #4]
 8012016:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 801201a:	701a      	strb	r2, [r3, #0]
    return adrAckReq;
 801201c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8012020:	4618      	mov	r0, r3
 8012022:	3730      	adds	r7, #48	@ 0x30
 8012024:	46bd      	mov	sp, r7
 8012026:	bd80      	pop	{r7, pc}

08012028 <LoRaMacAdrCalcNext>:
 * \param [OUT] adrAckCounter The calculated ADR acknowledgement counter.
 *
 * \retval Returns true, if an ADR request should be performed.
 */
bool LoRaMacAdrCalcNext( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut, uint32_t* adrAckCounter )
{
 8012028:	b580      	push	{r7, lr}
 801202a:	b084      	sub	sp, #16
 801202c:	af00      	add	r7, sp, #0
 801202e:	60f8      	str	r0, [r7, #12]
 8012030:	60b9      	str	r1, [r7, #8]
 8012032:	607a      	str	r2, [r7, #4]
 8012034:	603b      	str	r3, [r7, #0]
    if( adrNext->Version.Fields.Minor == 0 )
 8012036:	68fb      	ldr	r3, [r7, #12]
 8012038:	789b      	ldrb	r3, [r3, #2]
 801203a:	2b00      	cmp	r3, #0
 801203c:	d107      	bne.n	801204e <LoRaMacAdrCalcNext+0x26>
    {
        return CalcNextV10X( adrNext, drOut, txPowOut, adrAckCounter );
 801203e:	683b      	ldr	r3, [r7, #0]
 8012040:	687a      	ldr	r2, [r7, #4]
 8012042:	68b9      	ldr	r1, [r7, #8]
 8012044:	68f8      	ldr	r0, [r7, #12]
 8012046:	f7ff ff3b 	bl	8011ec0 <CalcNextV10X>
 801204a:	4603      	mov	r3, r0
 801204c:	e000      	b.n	8012050 <LoRaMacAdrCalcNext+0x28>
    }
    return false;
 801204e:	2300      	movs	r3, #0
}
 8012050:	4618      	mov	r0, r3
 8012052:	3710      	adds	r7, #16
 8012054:	46bd      	mov	sp, r7
 8012056:	bd80      	pop	{r7, pc}

08012058 <LoRaMacClassBInit>:
#endif /* LORAMAC_VERSION */

#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBInit( LoRaMacClassBParams_t *classBParams, LoRaMacClassBCallback_t *callbacks, LoRaMacClassBNvmData_t* nvm )
{
 8012058:	b480      	push	{r7}
 801205a:	b085      	sub	sp, #20
 801205c:	af00      	add	r7, sp, #0
 801205e:	60f8      	str	r0, [r7, #12]
 8012060:	60b9      	str	r1, [r7, #8]
 8012062:	607a      	str	r2, [r7, #4]
    TimerInit( &Ctx.PingSlotTimer, LoRaMacClassBPingSlotTimerEvent );
    TimerInit( &Ctx.MulticastSlotTimer, LoRaMacClassBMulticastSlotTimerEvent );

    InitClassB( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012064:	bf00      	nop
 8012066:	3714      	adds	r7, #20
 8012068:	46bd      	mov	sp, r7
 801206a:	bc80      	pop	{r7}
 801206c:	4770      	bx	lr

0801206e <LoRaMacClassBSetBeaconState>:

void LoRaMacClassBSetBeaconState( BeaconState_t beaconState )
{
 801206e:	b480      	push	{r7}
 8012070:	b083      	sub	sp, #12
 8012072:	af00      	add	r7, sp, #0
 8012074:	4603      	mov	r3, r0
 8012076:	71fb      	strb	r3, [r7, #7]
        {
            Ctx.BeaconState = beaconState;
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012078:	bf00      	nop
 801207a:	370c      	adds	r7, #12
 801207c:	46bd      	mov	sp, r7
 801207e:	bc80      	pop	{r7}
 8012080:	4770      	bx	lr

08012082 <LoRaMacClassBSetPingSlotState>:

void LoRaMacClassBSetPingSlotState( PingSlotState_t pingSlotState )
{
 8012082:	b480      	push	{r7}
 8012084:	b083      	sub	sp, #12
 8012086:	af00      	add	r7, sp, #0
 8012088:	4603      	mov	r3, r0
 801208a:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.PingSlotState = pingSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801208c:	bf00      	nop
 801208e:	370c      	adds	r7, #12
 8012090:	46bd      	mov	sp, r7
 8012092:	bc80      	pop	{r7}
 8012094:	4770      	bx	lr

08012096 <LoRaMacClassBSetMulticastSlotState>:

void LoRaMacClassBSetMulticastSlotState( PingSlotState_t multicastSlotState )
{
 8012096:	b480      	push	{r7}
 8012098:	b083      	sub	sp, #12
 801209a:	af00      	add	r7, sp, #0
 801209c:	4603      	mov	r3, r0
 801209e:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.MulticastSlotState = multicastSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80120a0:	bf00      	nop
 80120a2:	370c      	adds	r7, #12
 80120a4:	46bd      	mov	sp, r7
 80120a6:	bc80      	pop	{r7}
 80120a8:	4770      	bx	lr

080120aa <LoRaMacClassBIsAcquisitionInProgress>:

bool LoRaMacClassBIsAcquisitionInProgress( void )
{
 80120aa:	b480      	push	{r7}
 80120ac:	af00      	add	r7, sp, #0
        // searches for a beacon.
        return true;
    }
    return false;
#else
    return false;
 80120ae:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80120b0:	4618      	mov	r0, r3
 80120b2:	46bd      	mov	sp, r7
 80120b4:	bc80      	pop	{r7}
 80120b6:	4770      	bx	lr

080120b8 <LoRaMacClassBBeaconTimerEvent>:

void LoRaMacClassBBeaconTimerEvent( void* context )
{
 80120b8:	b480      	push	{r7}
 80120ba:	b083      	sub	sp, #12
 80120bc:	af00      	add	r7, sp, #0
 80120be:	6078      	str	r0, [r7, #4]
    Ctx.BeaconCtx.TimeStamp = TimerGetCurrentTime( );
    TimerStop( &Ctx.BeaconTimer );
    LoRaMacClassBEvents.Events.Beacon = 1;
    OnClassBMacProcessNotify( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80120c0:	bf00      	nop
 80120c2:	370c      	adds	r7, #12
 80120c4:	46bd      	mov	sp, r7
 80120c6:	bc80      	pop	{r7}
 80120c8:	4770      	bx	lr

080120ca <LoRaMacClassBPingSlotTimerEvent>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBPingSlotTimerEvent( void* context )
{
 80120ca:	b480      	push	{r7}
 80120cc:	b083      	sub	sp, #12
 80120ce:	af00      	add	r7, sp, #0
 80120d0:	6078      	str	r0, [r7, #4]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    LoRaMacClassBEvents.Events.PingSlot = 1;

    OnClassBMacProcessNotify( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80120d2:	bf00      	nop
 80120d4:	370c      	adds	r7, #12
 80120d6:	46bd      	mov	sp, r7
 80120d8:	bc80      	pop	{r7}
 80120da:	4770      	bx	lr

080120dc <LoRaMacClassBMulticastSlotTimerEvent>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBMulticastSlotTimerEvent( void* context )
{
 80120dc:	b480      	push	{r7}
 80120de:	b083      	sub	sp, #12
 80120e0:	af00      	add	r7, sp, #0
 80120e2:	6078      	str	r0, [r7, #4]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    LoRaMacClassBEvents.Events.MulticastSlot = 1;

    OnClassBMacProcessNotify( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80120e4:	bf00      	nop
 80120e6:	370c      	adds	r7, #12
 80120e8:	46bd      	mov	sp, r7
 80120ea:	bc80      	pop	{r7}
 80120ec:	4770      	bx	lr

080120ee <LoRaMacClassBRxBeacon>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

bool LoRaMacClassBRxBeacon( uint8_t *payload, uint16_t size )
{
 80120ee:	b480      	push	{r7}
 80120f0:	b083      	sub	sp, #12
 80120f2:	af00      	add	r7, sp, #0
 80120f4:	6078      	str	r0, [r7, #4]
 80120f6:	460b      	mov	r3, r1
 80120f8:	807b      	strh	r3, [r7, #2]
        // valid beacon has been received.
        beaconProcessed = true;
    }
    return beaconProcessed;
#else
    return false;
 80120fa:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80120fc:	4618      	mov	r0, r3
 80120fe:	370c      	adds	r7, #12
 8012100:	46bd      	mov	sp, r7
 8012102:	bc80      	pop	{r7}
 8012104:	4770      	bx	lr

08012106 <LoRaMacClassBIsBeaconExpected>:

bool LoRaMacClassBIsBeaconExpected( void )
{
 8012106:	b480      	push	{r7}
 8012108:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 801210a:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801210c:	4618      	mov	r0, r3
 801210e:	46bd      	mov	sp, r7
 8012110:	bc80      	pop	{r7}
 8012112:	4770      	bx	lr

08012114 <LoRaMacClassBIsPingExpected>:

bool LoRaMacClassBIsPingExpected( void )
{
 8012114:	b480      	push	{r7}
 8012116:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 8012118:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801211a:	4618      	mov	r0, r3
 801211c:	46bd      	mov	sp, r7
 801211e:	bc80      	pop	{r7}
 8012120:	4770      	bx	lr

08012122 <LoRaMacClassBIsMulticastExpected>:

bool LoRaMacClassBIsMulticastExpected( void )
{
 8012122:	b480      	push	{r7}
 8012124:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 8012126:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012128:	4618      	mov	r0, r3
 801212a:	46bd      	mov	sp, r7
 801212c:	bc80      	pop	{r7}
 801212e:	4770      	bx	lr

08012130 <LoRaMacClassBIsBeaconModeActive>:
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}

bool LoRaMacClassBIsBeaconModeActive( void )
{
 8012130:	b480      	push	{r7}
 8012132:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 8012134:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012136:	4618      	mov	r0, r3
 8012138:	46bd      	mov	sp, r7
 801213a:	bc80      	pop	{r7}
 801213c:	4770      	bx	lr

0801213e <LoRaMacClassBSetPingSlotInfo>:

void LoRaMacClassBSetPingSlotInfo( uint8_t periodicity )
{
 801213e:	b480      	push	{r7}
 8012140:	b083      	sub	sp, #12
 8012142:	af00      	add	r7, sp, #0
 8012144:	4603      	mov	r3, r0
 8012146:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    ClassBNvm->PingSlotCtx.PingNb = CalcPingNb( periodicity );
    ClassBNvm->PingSlotCtx.PingPeriod = CalcPingPeriod( ClassBNvm->PingSlotCtx.PingNb );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012148:	bf00      	nop
 801214a:	370c      	adds	r7, #12
 801214c:	46bd      	mov	sp, r7
 801214e:	bc80      	pop	{r7}
 8012150:	4770      	bx	lr

08012152 <LoRaMacClassBHaltBeaconing>:

void LoRaMacClassBHaltBeaconing( void )
{
 8012152:	b480      	push	{r7}
 8012154:	af00      	add	r7, sp, #0

        // Halt ping and multicast slot state machines
        LoRaMacClassBStopRxSlots( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012156:	bf00      	nop
 8012158:	46bd      	mov	sp, r7
 801215a:	bc80      	pop	{r7}
 801215c:	4770      	bx	lr

0801215e <LoRaMacClassBResumeBeaconing>:

void LoRaMacClassBResumeBeaconing( void )
{
 801215e:	b480      	push	{r7}
 8012160:	af00      	add	r7, sp, #0
        }

        LoRaMacClassBBeaconTimerEvent( NULL );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012162:	bf00      	nop
 8012164:	46bd      	mov	sp, r7
 8012166:	bc80      	pop	{r7}
 8012168:	4770      	bx	lr

0801216a <LoRaMacClassBSwitchClass>:

LoRaMacStatus_t LoRaMacClassBSwitchClass( DeviceClass_t nextClass )
{
 801216a:	b480      	push	{r7}
 801216c:	b083      	sub	sp, #12
 801216e:	af00      	add	r7, sp, #0
 8012170:	4603      	mov	r3, r0
 8012172:	71fb      	strb	r3, [r7, #7]

        return LORAMAC_STATUS_OK;
    }
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8012174:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012176:	4618      	mov	r0, r3
 8012178:	370c      	adds	r7, #12
 801217a:	46bd      	mov	sp, r7
 801217c:	bc80      	pop	{r7}
 801217e:	4770      	bx	lr

08012180 <LoRaMacClassBMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacClassBMibGetRequestConfirm( MibRequestConfirm_t *mibGet )
{
 8012180:	b480      	push	{r7}
 8012182:	b083      	sub	sp, #12
 8012184:	af00      	add	r7, sp, #0
 8012186:	6078      	str	r0, [r7, #4]
            break;
        }
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8012188:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801218a:	4618      	mov	r0, r3
 801218c:	370c      	adds	r7, #12
 801218e:	46bd      	mov	sp, r7
 8012190:	bc80      	pop	{r7}
 8012192:	4770      	bx	lr

08012194 <LoRaMacMibClassBSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibClassBSetRequestConfirm( MibRequestConfirm_t *mibSet )
{
 8012194:	b480      	push	{r7}
 8012196:	b083      	sub	sp, #12
 8012198:	af00      	add	r7, sp, #0
 801219a:	6078      	str	r0, [r7, #4]
            break;
        }
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 801219c:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801219e:	4618      	mov	r0, r3
 80121a0:	370c      	adds	r7, #12
 80121a2:	46bd      	mov	sp, r7
 80121a4:	bc80      	pop	{r7}
 80121a6:	4770      	bx	lr

080121a8 <LoRaMacClassBPingSlotInfoAns>:

void LoRaMacClassBPingSlotInfoAns( void )
{
 80121a8:	b480      	push	{r7}
 80121aa:	af00      	add	r7, sp, #0
    {
        LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
        ClassBNvm->PingSlotCtx.Ctrl.Assigned = 1;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80121ac:	bf00      	nop
 80121ae:	46bd      	mov	sp, r7
 80121b0:	bc80      	pop	{r7}
 80121b2:	4770      	bx	lr

080121b4 <LoRaMacClassBPingSlotChannelReq>:

uint8_t LoRaMacClassBPingSlotChannelReq( uint8_t datarate, uint32_t frequency )
{
 80121b4:	b480      	push	{r7}
 80121b6:	b083      	sub	sp, #12
 80121b8:	af00      	add	r7, sp, #0
 80121ba:	4603      	mov	r3, r0
 80121bc:	6039      	str	r1, [r7, #0]
 80121be:	71fb      	strb	r3, [r7, #7]
        ClassBNvm->PingSlotCtx.Datarate = datarate;
    }

    return status;
#else
    return 0;
 80121c0:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80121c2:	4618      	mov	r0, r3
 80121c4:	370c      	adds	r7, #12
 80121c6:	46bd      	mov	sp, r7
 80121c8:	bc80      	pop	{r7}
 80121ca:	4770      	bx	lr

080121cc <LoRaMacClassBBeaconTimingAns>:

void LoRaMacClassBBeaconTimingAns( uint16_t beaconTimingDelay, uint8_t beaconTimingChannel, TimerTime_t lastRxDone )
{
 80121cc:	b480      	push	{r7}
 80121ce:	b083      	sub	sp, #12
 80121d0:	af00      	add	r7, sp, #0
 80121d2:	4603      	mov	r3, r0
 80121d4:	603a      	str	r2, [r7, #0]
 80121d6:	80fb      	strh	r3, [r7, #6]
 80121d8:	460b      	mov	r3, r1
 80121da:	717b      	strb	r3, [r7, #5]

        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingDelay = Ctx.BeaconCtx.BeaconTimingDelay;
        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingChannel = Ctx.BeaconCtx.BeaconTimingChannel;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80121dc:	bf00      	nop
 80121de:	370c      	adds	r7, #12
 80121e0:	46bd      	mov	sp, r7
 80121e2:	bc80      	pop	{r7}
 80121e4:	4770      	bx	lr

080121e6 <LoRaMacClassBDeviceTimeAns>:

void LoRaMacClassBDeviceTimeAns( void )
{
 80121e6:	b480      	push	{r7}
 80121e8:	af00      	add	r7, sp, #0
            Ctx.BeaconCtx.BeaconTime.SubSeconds = 0;
            LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80121ea:	bf00      	nop
 80121ec:	46bd      	mov	sp, r7
 80121ee:	bc80      	pop	{r7}
 80121f0:	4770      	bx	lr

080121f2 <LoRaMacClassBBeaconFreqReq>:

bool LoRaMacClassBBeaconFreqReq( uint32_t frequency )
{
 80121f2:	b480      	push	{r7}
 80121f4:	b083      	sub	sp, #12
 80121f6:	af00      	add	r7, sp, #0
 80121f8:	6078      	str	r0, [r7, #4]
        ClassBNvm->BeaconCtx.Ctrl.CustomFreq = 0;
        return true;
    }
    return false;
#else
    return false;
 80121fa:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80121fc:	4618      	mov	r0, r3
 80121fe:	370c      	adds	r7, #12
 8012200:	46bd      	mov	sp, r7
 8012202:	bc80      	pop	{r7}
 8012204:	4770      	bx	lr

08012206 <LoRaMacClassBIsUplinkCollision>:

TimerTime_t LoRaMacClassBIsUplinkCollision( TimerTime_t txTimeOnAir )
{
 8012206:	b480      	push	{r7}
 8012208:	b083      	sub	sp, #12
 801220a:	af00      	add	r7, sp, #0
 801220c:	6078      	str	r0, [r7, #4]
    {// Next beacon will be sent during the next uplink.
        return CLASSB_BEACON_RESERVED;
    }
    return 0;
#else
    return 0;
 801220e:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012210:	4618      	mov	r0, r3
 8012212:	370c      	adds	r7, #12
 8012214:	46bd      	mov	sp, r7
 8012216:	bc80      	pop	{r7}
 8012218:	4770      	bx	lr

0801221a <LoRaMacClassBStopRxSlots>:

void LoRaMacClassBStopRxSlots( void )
{
 801221a:	b480      	push	{r7}
 801221c:	af00      	add	r7, sp, #0
    CRITICAL_SECTION_BEGIN( );
    LoRaMacClassBEvents.Events.PingSlot = 0;
    LoRaMacClassBEvents.Events.MulticastSlot = 0;
    CRITICAL_SECTION_END( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801221e:	bf00      	nop
 8012220:	46bd      	mov	sp, r7
 8012222:	bc80      	pop	{r7}
 8012224:	4770      	bx	lr

08012226 <LoRaMacClassBProcess>:
#endif /* LORAMAC_CLASSB_ENABLED */
}
#endif /* LORAMAC_VERSION */

void LoRaMacClassBProcess( void )
{
 8012226:	b480      	push	{r7}
 8012228:	af00      	add	r7, sp, #0
        {
            LoRaMacClassBProcessMulticastSlot( );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801222a:	bf00      	nop
 801222c:	46bd      	mov	sp, r7
 801222e:	bc80      	pop	{r7}
 8012230:	4770      	bx	lr

08012232 <IsSlotFree>:
 *
 * \param [in]    slot           - Slot to check
 * \retval                       - Status of the operation
 */
static bool IsSlotFree( const MacCommand_t* slot )
{
 8012232:	b480      	push	{r7}
 8012234:	b085      	sub	sp, #20
 8012236:	af00      	add	r7, sp, #0
 8012238:	6078      	str	r0, [r7, #4]
    uint8_t* mem = ( uint8_t* )slot;
 801223a:	687b      	ldr	r3, [r7, #4]
 801223c:	60bb      	str	r3, [r7, #8]

    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 801223e:	2300      	movs	r3, #0
 8012240:	81fb      	strh	r3, [r7, #14]
 8012242:	e00a      	b.n	801225a <IsSlotFree+0x28>
    {
        if( mem[size] != 0x00 )
 8012244:	89fb      	ldrh	r3, [r7, #14]
 8012246:	68ba      	ldr	r2, [r7, #8]
 8012248:	4413      	add	r3, r2
 801224a:	781b      	ldrb	r3, [r3, #0]
 801224c:	2b00      	cmp	r3, #0
 801224e:	d001      	beq.n	8012254 <IsSlotFree+0x22>
        {
            return false;
 8012250:	2300      	movs	r3, #0
 8012252:	e006      	b.n	8012262 <IsSlotFree+0x30>
    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 8012254:	89fb      	ldrh	r3, [r7, #14]
 8012256:	3301      	adds	r3, #1
 8012258:	81fb      	strh	r3, [r7, #14]
 801225a:	89fb      	ldrh	r3, [r7, #14]
 801225c:	2b0f      	cmp	r3, #15
 801225e:	d9f1      	bls.n	8012244 <IsSlotFree+0x12>
        }
    }
    return true;
 8012260:	2301      	movs	r3, #1
}
 8012262:	4618      	mov	r0, r3
 8012264:	3714      	adds	r7, #20
 8012266:	46bd      	mov	sp, r7
 8012268:	bc80      	pop	{r7}
 801226a:	4770      	bx	lr

0801226c <MallocNewMacCommandSlot>:
 * \brief Allocates a new MAC command memory slot
 *
 * \retval                       - Pointer to slot
 */
static MacCommand_t* MallocNewMacCommandSlot( void )
{
 801226c:	b580      	push	{r7, lr}
 801226e:	b082      	sub	sp, #8
 8012270:	af00      	add	r7, sp, #0
    uint8_t itr = 0;
 8012272:	2300      	movs	r3, #0
 8012274:	71fb      	strb	r3, [r7, #7]

    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 8012276:	e007      	b.n	8012288 <MallocNewMacCommandSlot+0x1c>
    {
        itr++;
 8012278:	79fb      	ldrb	r3, [r7, #7]
 801227a:	3301      	adds	r3, #1
 801227c:	71fb      	strb	r3, [r7, #7]
        if( itr == NUM_OF_MAC_COMMANDS )
 801227e:	79fb      	ldrb	r3, [r7, #7]
 8012280:	2b0f      	cmp	r3, #15
 8012282:	d101      	bne.n	8012288 <MallocNewMacCommandSlot+0x1c>
        {
            return NULL;
 8012284:	2300      	movs	r3, #0
 8012286:	e012      	b.n	80122ae <MallocNewMacCommandSlot+0x42>
    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 8012288:	79fb      	ldrb	r3, [r7, #7]
 801228a:	011b      	lsls	r3, r3, #4
 801228c:	3308      	adds	r3, #8
 801228e:	4a0a      	ldr	r2, [pc, #40]	@ (80122b8 <MallocNewMacCommandSlot+0x4c>)
 8012290:	4413      	add	r3, r2
 8012292:	4618      	mov	r0, r3
 8012294:	f7ff ffcd 	bl	8012232 <IsSlotFree>
 8012298:	4603      	mov	r3, r0
 801229a:	f083 0301 	eor.w	r3, r3, #1
 801229e:	b2db      	uxtb	r3, r3
 80122a0:	2b00      	cmp	r3, #0
 80122a2:	d1e9      	bne.n	8012278 <MallocNewMacCommandSlot+0xc>
        }
    }

    return &CommandsCtx.MacCommandSlots[itr];
 80122a4:	79fb      	ldrb	r3, [r7, #7]
 80122a6:	011b      	lsls	r3, r3, #4
 80122a8:	3308      	adds	r3, #8
 80122aa:	4a03      	ldr	r2, [pc, #12]	@ (80122b8 <MallocNewMacCommandSlot+0x4c>)
 80122ac:	4413      	add	r3, r2
}
 80122ae:	4618      	mov	r0, r3
 80122b0:	3708      	adds	r7, #8
 80122b2:	46bd      	mov	sp, r7
 80122b4:	bd80      	pop	{r7, pc}
 80122b6:	bf00      	nop
 80122b8:	200012bc 	.word	0x200012bc

080122bc <FreeMacCommandSlot>:
 * \param [in]    slot           - Slot to free
 *
 * \retval                       - Status of the operation
 */
static bool FreeMacCommandSlot( MacCommand_t* slot )
{
 80122bc:	b580      	push	{r7, lr}
 80122be:	b082      	sub	sp, #8
 80122c0:	af00      	add	r7, sp, #0
 80122c2:	6078      	str	r0, [r7, #4]
    if( slot == NULL )
 80122c4:	687b      	ldr	r3, [r7, #4]
 80122c6:	2b00      	cmp	r3, #0
 80122c8:	d101      	bne.n	80122ce <FreeMacCommandSlot+0x12>
    {
        return false;
 80122ca:	2300      	movs	r3, #0
 80122cc:	e005      	b.n	80122da <FreeMacCommandSlot+0x1e>
    }

    memset1( ( uint8_t* )slot, 0x00, sizeof( MacCommand_t ) );
 80122ce:	2210      	movs	r2, #16
 80122d0:	2100      	movs	r1, #0
 80122d2:	6878      	ldr	r0, [r7, #4]
 80122d4:	f004 f9ec 	bl	80166b0 <memset1>

    return true;
 80122d8:	2301      	movs	r3, #1
}
 80122da:	4618      	mov	r0, r3
 80122dc:	3708      	adds	r7, #8
 80122de:	46bd      	mov	sp, r7
 80122e0:	bd80      	pop	{r7, pc}

080122e2 <LinkedListInit>:
 *
 * \param [in]    list           - List that shall be initialized
 * \retval                       - Status of the operation
 */
static bool LinkedListInit( MacCommandsList_t* list )
{
 80122e2:	b480      	push	{r7}
 80122e4:	b083      	sub	sp, #12
 80122e6:	af00      	add	r7, sp, #0
 80122e8:	6078      	str	r0, [r7, #4]
    if( list == NULL )
 80122ea:	687b      	ldr	r3, [r7, #4]
 80122ec:	2b00      	cmp	r3, #0
 80122ee:	d101      	bne.n	80122f4 <LinkedListInit+0x12>
    {
        return false;
 80122f0:	2300      	movs	r3, #0
 80122f2:	e006      	b.n	8012302 <LinkedListInit+0x20>
    }

    list->First = NULL;
 80122f4:	687b      	ldr	r3, [r7, #4]
 80122f6:	2200      	movs	r2, #0
 80122f8:	601a      	str	r2, [r3, #0]
    list->Last = NULL;
 80122fa:	687b      	ldr	r3, [r7, #4]
 80122fc:	2200      	movs	r2, #0
 80122fe:	605a      	str	r2, [r3, #4]

    return true;
 8012300:	2301      	movs	r3, #1
}
 8012302:	4618      	mov	r0, r3
 8012304:	370c      	adds	r7, #12
 8012306:	46bd      	mov	sp, r7
 8012308:	bc80      	pop	{r7}
 801230a:	4770      	bx	lr

0801230c <LinkedListAdd>:
 * \param [in]    list           - List where the element shall be added.
 * \param [in]    element        - Element to add
 * \retval                       - Status of the operation
 */
static bool LinkedListAdd( MacCommandsList_t* list, MacCommand_t* element )
{
 801230c:	b480      	push	{r7}
 801230e:	b083      	sub	sp, #12
 8012310:	af00      	add	r7, sp, #0
 8012312:	6078      	str	r0, [r7, #4]
 8012314:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 8012316:	687b      	ldr	r3, [r7, #4]
 8012318:	2b00      	cmp	r3, #0
 801231a:	d002      	beq.n	8012322 <LinkedListAdd+0x16>
 801231c:	683b      	ldr	r3, [r7, #0]
 801231e:	2b00      	cmp	r3, #0
 8012320:	d101      	bne.n	8012326 <LinkedListAdd+0x1a>
    {
        return false;
 8012322:	2300      	movs	r3, #0
 8012324:	e015      	b.n	8012352 <LinkedListAdd+0x46>
    }

    // Check if this is the first entry to enter the list.
    if( list->First == NULL )
 8012326:	687b      	ldr	r3, [r7, #4]
 8012328:	681b      	ldr	r3, [r3, #0]
 801232a:	2b00      	cmp	r3, #0
 801232c:	d102      	bne.n	8012334 <LinkedListAdd+0x28>
    {
        list->First = element;
 801232e:	687b      	ldr	r3, [r7, #4]
 8012330:	683a      	ldr	r2, [r7, #0]
 8012332:	601a      	str	r2, [r3, #0]
    }

    // Check if the last entry exists and update its next point.
    if( list->Last )
 8012334:	687b      	ldr	r3, [r7, #4]
 8012336:	685b      	ldr	r3, [r3, #4]
 8012338:	2b00      	cmp	r3, #0
 801233a:	d003      	beq.n	8012344 <LinkedListAdd+0x38>
    {
        list->Last->Next = element;
 801233c:	687b      	ldr	r3, [r7, #4]
 801233e:	685b      	ldr	r3, [r3, #4]
 8012340:	683a      	ldr	r2, [r7, #0]
 8012342:	601a      	str	r2, [r3, #0]
    }

    // Update the next point of this entry.
    element->Next = NULL;
 8012344:	683b      	ldr	r3, [r7, #0]
 8012346:	2200      	movs	r2, #0
 8012348:	601a      	str	r2, [r3, #0]

    // Update the last entry of the list.
    list->Last = element;
 801234a:	687b      	ldr	r3, [r7, #4]
 801234c:	683a      	ldr	r2, [r7, #0]
 801234e:	605a      	str	r2, [r3, #4]

    return true;
 8012350:	2301      	movs	r3, #1
}
 8012352:	4618      	mov	r0, r3
 8012354:	370c      	adds	r7, #12
 8012356:	46bd      	mov	sp, r7
 8012358:	bc80      	pop	{r7}
 801235a:	4770      	bx	lr

0801235c <LinkedListGetPrevious>:
 * \param [in]    list           - List
 * \param [in]    element        - Element where the previous element shall be searched
 * \retval                       - Status of the operation
 */
static MacCommand_t* LinkedListGetPrevious( MacCommandsList_t* list, MacCommand_t* element )
{
 801235c:	b480      	push	{r7}
 801235e:	b085      	sub	sp, #20
 8012360:	af00      	add	r7, sp, #0
 8012362:	6078      	str	r0, [r7, #4]
 8012364:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 8012366:	687b      	ldr	r3, [r7, #4]
 8012368:	2b00      	cmp	r3, #0
 801236a:	d002      	beq.n	8012372 <LinkedListGetPrevious+0x16>
 801236c:	683b      	ldr	r3, [r7, #0]
 801236e:	2b00      	cmp	r3, #0
 8012370:	d101      	bne.n	8012376 <LinkedListGetPrevious+0x1a>
    {
        return NULL;
 8012372:	2300      	movs	r3, #0
 8012374:	e016      	b.n	80123a4 <LinkedListGetPrevious+0x48>
    }

    MacCommand_t* curElement;

    // Start at the head of the list
    curElement = list->First;
 8012376:	687b      	ldr	r3, [r7, #4]
 8012378:	681b      	ldr	r3, [r3, #0]
 801237a:	60fb      	str	r3, [r7, #12]

    // When current element is the first of the list, there's no previous element so we can return NULL immediately.
    if( element != curElement )
 801237c:	683a      	ldr	r2, [r7, #0]
 801237e:	68fb      	ldr	r3, [r7, #12]
 8012380:	429a      	cmp	r2, r3
 8012382:	d00c      	beq.n	801239e <LinkedListGetPrevious+0x42>
    {
        // Loop through all elements until the end is reached or the next of current is the current element.
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 8012384:	e002      	b.n	801238c <LinkedListGetPrevious+0x30>
        {
            curElement = curElement->Next;
 8012386:	68fb      	ldr	r3, [r7, #12]
 8012388:	681b      	ldr	r3, [r3, #0]
 801238a:	60fb      	str	r3, [r7, #12]
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 801238c:	68fb      	ldr	r3, [r7, #12]
 801238e:	2b00      	cmp	r3, #0
 8012390:	d007      	beq.n	80123a2 <LinkedListGetPrevious+0x46>
 8012392:	68fb      	ldr	r3, [r7, #12]
 8012394:	681b      	ldr	r3, [r3, #0]
 8012396:	683a      	ldr	r2, [r7, #0]
 8012398:	429a      	cmp	r2, r3
 801239a:	d1f4      	bne.n	8012386 <LinkedListGetPrevious+0x2a>
 801239c:	e001      	b.n	80123a2 <LinkedListGetPrevious+0x46>
        }
    }
    else
    {
        curElement = NULL;
 801239e:	2300      	movs	r3, #0
 80123a0:	60fb      	str	r3, [r7, #12]
    }

    return curElement;
 80123a2:	68fb      	ldr	r3, [r7, #12]
}
 80123a4:	4618      	mov	r0, r3
 80123a6:	3714      	adds	r7, #20
 80123a8:	46bd      	mov	sp, r7
 80123aa:	bc80      	pop	{r7}
 80123ac:	4770      	bx	lr

080123ae <LinkedListRemove>:
 * \param [in]    list           - List where the element shall be removed from.
 * \param [in]    element        - Element to remove
 * \retval                       - Status of the operation
 */
static bool LinkedListRemove( MacCommandsList_t* list, MacCommand_t* element )
{
 80123ae:	b580      	push	{r7, lr}
 80123b0:	b084      	sub	sp, #16
 80123b2:	af00      	add	r7, sp, #0
 80123b4:	6078      	str	r0, [r7, #4]
 80123b6:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 80123b8:	687b      	ldr	r3, [r7, #4]
 80123ba:	2b00      	cmp	r3, #0
 80123bc:	d002      	beq.n	80123c4 <LinkedListRemove+0x16>
 80123be:	683b      	ldr	r3, [r7, #0]
 80123c0:	2b00      	cmp	r3, #0
 80123c2:	d101      	bne.n	80123c8 <LinkedListRemove+0x1a>
    {
        return false;
 80123c4:	2300      	movs	r3, #0
 80123c6:	e020      	b.n	801240a <LinkedListRemove+0x5c>
    }

    MacCommand_t* PrevElement = LinkedListGetPrevious( list, element );
 80123c8:	6839      	ldr	r1, [r7, #0]
 80123ca:	6878      	ldr	r0, [r7, #4]
 80123cc:	f7ff ffc6 	bl	801235c <LinkedListGetPrevious>
 80123d0:	60f8      	str	r0, [r7, #12]

    if( list->First == element )
 80123d2:	687b      	ldr	r3, [r7, #4]
 80123d4:	681b      	ldr	r3, [r3, #0]
 80123d6:	683a      	ldr	r2, [r7, #0]
 80123d8:	429a      	cmp	r2, r3
 80123da:	d103      	bne.n	80123e4 <LinkedListRemove+0x36>
    {
        list->First = element->Next;
 80123dc:	683b      	ldr	r3, [r7, #0]
 80123de:	681a      	ldr	r2, [r3, #0]
 80123e0:	687b      	ldr	r3, [r7, #4]
 80123e2:	601a      	str	r2, [r3, #0]
    }

    if( list->Last == element )
 80123e4:	687b      	ldr	r3, [r7, #4]
 80123e6:	685b      	ldr	r3, [r3, #4]
 80123e8:	683a      	ldr	r2, [r7, #0]
 80123ea:	429a      	cmp	r2, r3
 80123ec:	d102      	bne.n	80123f4 <LinkedListRemove+0x46>
    {
        list->Last = PrevElement;
 80123ee:	687b      	ldr	r3, [r7, #4]
 80123f0:	68fa      	ldr	r2, [r7, #12]
 80123f2:	605a      	str	r2, [r3, #4]
    }

    if( PrevElement != NULL )
 80123f4:	68fb      	ldr	r3, [r7, #12]
 80123f6:	2b00      	cmp	r3, #0
 80123f8:	d003      	beq.n	8012402 <LinkedListRemove+0x54>
    {
        PrevElement->Next = element->Next;
 80123fa:	683b      	ldr	r3, [r7, #0]
 80123fc:	681a      	ldr	r2, [r3, #0]
 80123fe:	68fb      	ldr	r3, [r7, #12]
 8012400:	601a      	str	r2, [r3, #0]
    }

    element->Next = NULL;
 8012402:	683b      	ldr	r3, [r7, #0]
 8012404:	2200      	movs	r2, #0
 8012406:	601a      	str	r2, [r3, #0]

    return true;
 8012408:	2301      	movs	r3, #1
}
 801240a:	4618      	mov	r0, r3
 801240c:	3710      	adds	r7, #16
 801240e:	46bd      	mov	sp, r7
 8012410:	bd80      	pop	{r7, pc}

08012412 <IsSticky>:
 * \param[IN]   cid            - MAC command identifier
 *
 * \retval                     - Status of the operation
 */
static bool IsSticky( uint8_t cid )
{
 8012412:	b480      	push	{r7}
 8012414:	b083      	sub	sp, #12
 8012416:	af00      	add	r7, sp, #0
 8012418:	4603      	mov	r3, r0
 801241a:	71fb      	strb	r3, [r7, #7]
    switch( cid )
 801241c:	79fb      	ldrb	r3, [r7, #7]
 801241e:	2b05      	cmp	r3, #5
 8012420:	d004      	beq.n	801242c <IsSticky+0x1a>
 8012422:	2b05      	cmp	r3, #5
 8012424:	db04      	blt.n	8012430 <IsSticky+0x1e>
 8012426:	3b08      	subs	r3, #8
 8012428:	2b02      	cmp	r3, #2
 801242a:	d801      	bhi.n	8012430 <IsSticky+0x1e>
        case MOTE_MAC_RX_TIMING_SETUP_ANS:
        case MOTE_MAC_TX_PARAM_SETUP_ANS:
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        case MOTE_MAC_PING_SLOT_CHANNEL_ANS:
#endif /* LORAMAC_VERSION */
            return true;
 801242c:	2301      	movs	r3, #1
 801242e:	e000      	b.n	8012432 <IsSticky+0x20>
        default:
            return false;
 8012430:	2300      	movs	r3, #0
    }
}
 8012432:	4618      	mov	r0, r3
 8012434:	370c      	adds	r7, #12
 8012436:	46bd      	mov	sp, r7
 8012438:	bc80      	pop	{r7}
 801243a:	4770      	bx	lr

0801243c <IsConfirmationRequired>:
 * \param[IN]   cid            - MAC command identifier
 *
 * \retval                     - Status of the operation
 */
static bool IsConfirmationRequired( uint8_t cid )
{
 801243c:	b480      	push	{r7}
 801243e:	b083      	sub	sp, #12
 8012440:	af00      	add	r7, sp, #0
 8012442:	4603      	mov	r3, r0
 8012444:	71fb      	strb	r3, [r7, #7]
        case MOTE_MAC_REKEY_IND:
        case MOTE_MAC_DEVICE_MODE_IND:
            return true;
#endif /* LORAMAC_VERSION */
        default:
            return false;
 8012446:	2300      	movs	r3, #0
    }
}
 8012448:	4618      	mov	r0, r3
 801244a:	370c      	adds	r7, #12
 801244c:	46bd      	mov	sp, r7
 801244e:	bc80      	pop	{r7}
 8012450:	4770      	bx	lr
	...

08012454 <LoRaMacCommandsInit>:

LoRaMacCommandStatus_t LoRaMacCommandsInit( void )
{
 8012454:	b580      	push	{r7, lr}
 8012456:	af00      	add	r7, sp, #0
    // Initialize with default
    memset1( ( uint8_t* )&CommandsCtx, 0, sizeof( CommandsCtx ) );
 8012458:	22fc      	movs	r2, #252	@ 0xfc
 801245a:	2100      	movs	r1, #0
 801245c:	4804      	ldr	r0, [pc, #16]	@ (8012470 <LoRaMacCommandsInit+0x1c>)
 801245e:	f004 f927 	bl	80166b0 <memset1>

    LinkedListInit( &CommandsCtx.MacCommandList );
 8012462:	4803      	ldr	r0, [pc, #12]	@ (8012470 <LoRaMacCommandsInit+0x1c>)
 8012464:	f7ff ff3d 	bl	80122e2 <LinkedListInit>

    return LORAMAC_COMMANDS_SUCCESS;
 8012468:	2300      	movs	r3, #0
}
 801246a:	4618      	mov	r0, r3
 801246c:	bd80      	pop	{r7, pc}
 801246e:	bf00      	nop
 8012470:	200012bc 	.word	0x200012bc

08012474 <LoRaMacCommandsAddCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsAddCmd( uint8_t cid, uint8_t* payload, size_t payloadSize )
{
 8012474:	b580      	push	{r7, lr}
 8012476:	b086      	sub	sp, #24
 8012478:	af00      	add	r7, sp, #0
 801247a:	4603      	mov	r3, r0
 801247c:	60b9      	str	r1, [r7, #8]
 801247e:	607a      	str	r2, [r7, #4]
 8012480:	73fb      	strb	r3, [r7, #15]
    if( payload == NULL )
 8012482:	68bb      	ldr	r3, [r7, #8]
 8012484:	2b00      	cmp	r3, #0
 8012486:	d101      	bne.n	801248c <LoRaMacCommandsAddCmd+0x18>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8012488:	2301      	movs	r3, #1
 801248a:	e03b      	b.n	8012504 <LoRaMacCommandsAddCmd+0x90>
    }
    MacCommand_t* newCmd;

    // Allocate a memory slot
    newCmd = MallocNewMacCommandSlot( );
 801248c:	f7ff feee 	bl	801226c <MallocNewMacCommandSlot>
 8012490:	6178      	str	r0, [r7, #20]

    if( newCmd == NULL )
 8012492:	697b      	ldr	r3, [r7, #20]
 8012494:	2b00      	cmp	r3, #0
 8012496:	d101      	bne.n	801249c <LoRaMacCommandsAddCmd+0x28>
    {
        return LORAMAC_COMMANDS_ERROR_MEMORY;
 8012498:	2302      	movs	r3, #2
 801249a:	e033      	b.n	8012504 <LoRaMacCommandsAddCmd+0x90>
    }

    // Add it to the list of Mac commands
    if( LinkedListAdd( &CommandsCtx.MacCommandList, newCmd ) == false )
 801249c:	6979      	ldr	r1, [r7, #20]
 801249e:	481b      	ldr	r0, [pc, #108]	@ (801250c <LoRaMacCommandsAddCmd+0x98>)
 80124a0:	f7ff ff34 	bl	801230c <LinkedListAdd>
 80124a4:	4603      	mov	r3, r0
 80124a6:	f083 0301 	eor.w	r3, r3, #1
 80124aa:	b2db      	uxtb	r3, r3
 80124ac:	2b00      	cmp	r3, #0
 80124ae:	d001      	beq.n	80124b4 <LoRaMacCommandsAddCmd+0x40>
    {
        return LORAMAC_COMMANDS_ERROR;
 80124b0:	2305      	movs	r3, #5
 80124b2:	e027      	b.n	8012504 <LoRaMacCommandsAddCmd+0x90>
    }

    // Set Values
    newCmd->CID = cid;
 80124b4:	697b      	ldr	r3, [r7, #20]
 80124b6:	7bfa      	ldrb	r2, [r7, #15]
 80124b8:	711a      	strb	r2, [r3, #4]
    newCmd->PayloadSize = payloadSize;
 80124ba:	697b      	ldr	r3, [r7, #20]
 80124bc:	687a      	ldr	r2, [r7, #4]
 80124be:	609a      	str	r2, [r3, #8]
    memcpy1( ( uint8_t* )newCmd->Payload, payload, payloadSize );
 80124c0:	697b      	ldr	r3, [r7, #20]
 80124c2:	3305      	adds	r3, #5
 80124c4:	687a      	ldr	r2, [r7, #4]
 80124c6:	b292      	uxth	r2, r2
 80124c8:	68b9      	ldr	r1, [r7, #8]
 80124ca:	4618      	mov	r0, r3
 80124cc:	f004 f8b5 	bl	801663a <memcpy1>
    newCmd->IsSticky = IsSticky( cid );
 80124d0:	7bfb      	ldrb	r3, [r7, #15]
 80124d2:	4618      	mov	r0, r3
 80124d4:	f7ff ff9d 	bl	8012412 <IsSticky>
 80124d8:	4603      	mov	r3, r0
 80124da:	461a      	mov	r2, r3
 80124dc:	697b      	ldr	r3, [r7, #20]
 80124de:	731a      	strb	r2, [r3, #12]
    newCmd->IsConfirmationRequired = IsConfirmationRequired( cid );
 80124e0:	7bfb      	ldrb	r3, [r7, #15]
 80124e2:	4618      	mov	r0, r3
 80124e4:	f7ff ffaa 	bl	801243c <IsConfirmationRequired>
 80124e8:	4603      	mov	r3, r0
 80124ea:	461a      	mov	r2, r3
 80124ec:	697b      	ldr	r3, [r7, #20]
 80124ee:	735a      	strb	r2, [r3, #13]

    CommandsCtx.SerializedCmdsSize += ( CID_FIELD_SIZE + payloadSize );
 80124f0:	4b06      	ldr	r3, [pc, #24]	@ (801250c <LoRaMacCommandsAddCmd+0x98>)
 80124f2:	f8d3 20f8 	ldr.w	r2, [r3, #248]	@ 0xf8
 80124f6:	687b      	ldr	r3, [r7, #4]
 80124f8:	4413      	add	r3, r2
 80124fa:	3301      	adds	r3, #1
 80124fc:	4a03      	ldr	r2, [pc, #12]	@ (801250c <LoRaMacCommandsAddCmd+0x98>)
 80124fe:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8

    return LORAMAC_COMMANDS_SUCCESS;
 8012502:	2300      	movs	r3, #0
}
 8012504:	4618      	mov	r0, r3
 8012506:	3718      	adds	r7, #24
 8012508:	46bd      	mov	sp, r7
 801250a:	bd80      	pop	{r7, pc}
 801250c:	200012bc 	.word	0x200012bc

08012510 <LoRaMacCommandsRemoveCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveCmd( MacCommand_t* macCmd )
{
 8012510:	b580      	push	{r7, lr}
 8012512:	b082      	sub	sp, #8
 8012514:	af00      	add	r7, sp, #0
 8012516:	6078      	str	r0, [r7, #4]
    if( macCmd == NULL )
 8012518:	687b      	ldr	r3, [r7, #4]
 801251a:	2b00      	cmp	r3, #0
 801251c:	d101      	bne.n	8012522 <LoRaMacCommandsRemoveCmd+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 801251e:	2301      	movs	r3, #1
 8012520:	e021      	b.n	8012566 <LoRaMacCommandsRemoveCmd+0x56>
    }

    // Remove the Mac command element from MacCommandList
    if( LinkedListRemove( &CommandsCtx.MacCommandList, macCmd ) == false )
 8012522:	6879      	ldr	r1, [r7, #4]
 8012524:	4812      	ldr	r0, [pc, #72]	@ (8012570 <LoRaMacCommandsRemoveCmd+0x60>)
 8012526:	f7ff ff42 	bl	80123ae <LinkedListRemove>
 801252a:	4603      	mov	r3, r0
 801252c:	f083 0301 	eor.w	r3, r3, #1
 8012530:	b2db      	uxtb	r3, r3
 8012532:	2b00      	cmp	r3, #0
 8012534:	d001      	beq.n	801253a <LoRaMacCommandsRemoveCmd+0x2a>
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
 8012536:	2303      	movs	r3, #3
 8012538:	e015      	b.n	8012566 <LoRaMacCommandsRemoveCmd+0x56>
    }

    CommandsCtx.SerializedCmdsSize -= ( CID_FIELD_SIZE + macCmd->PayloadSize );
 801253a:	4b0d      	ldr	r3, [pc, #52]	@ (8012570 <LoRaMacCommandsRemoveCmd+0x60>)
 801253c:	f8d3 20f8 	ldr.w	r2, [r3, #248]	@ 0xf8
 8012540:	687b      	ldr	r3, [r7, #4]
 8012542:	689b      	ldr	r3, [r3, #8]
 8012544:	1ad3      	subs	r3, r2, r3
 8012546:	3b01      	subs	r3, #1
 8012548:	4a09      	ldr	r2, [pc, #36]	@ (8012570 <LoRaMacCommandsRemoveCmd+0x60>)
 801254a:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8

    // Free the MacCommand Slot
    if( FreeMacCommandSlot( macCmd ) == false )
 801254e:	6878      	ldr	r0, [r7, #4]
 8012550:	f7ff feb4 	bl	80122bc <FreeMacCommandSlot>
 8012554:	4603      	mov	r3, r0
 8012556:	f083 0301 	eor.w	r3, r3, #1
 801255a:	b2db      	uxtb	r3, r3
 801255c:	2b00      	cmp	r3, #0
 801255e:	d001      	beq.n	8012564 <LoRaMacCommandsRemoveCmd+0x54>
    {
        return LORAMAC_COMMANDS_ERROR;
 8012560:	2305      	movs	r3, #5
 8012562:	e000      	b.n	8012566 <LoRaMacCommandsRemoveCmd+0x56>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 8012564:	2300      	movs	r3, #0
}
 8012566:	4618      	mov	r0, r3
 8012568:	3708      	adds	r7, #8
 801256a:	46bd      	mov	sp, r7
 801256c:	bd80      	pop	{r7, pc}
 801256e:	bf00      	nop
 8012570:	200012bc 	.word	0x200012bc

08012574 <LoRaMacCommandsGetCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsGetCmd( uint8_t cid, MacCommand_t** macCmd )
{
 8012574:	b480      	push	{r7}
 8012576:	b085      	sub	sp, #20
 8012578:	af00      	add	r7, sp, #0
 801257a:	4603      	mov	r3, r0
 801257c:	6039      	str	r1, [r7, #0]
 801257e:	71fb      	strb	r3, [r7, #7]
    MacCommand_t* curElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 8012580:	4b0e      	ldr	r3, [pc, #56]	@ (80125bc <LoRaMacCommandsGetCmd+0x48>)
 8012582:	681b      	ldr	r3, [r3, #0]
 8012584:	60fb      	str	r3, [r7, #12]

    // Loop through all elements until we find the element with the given CID
    while( ( curElement != NULL ) && ( curElement->CID != cid ) )
 8012586:	e002      	b.n	801258e <LoRaMacCommandsGetCmd+0x1a>
    {
        curElement = curElement->Next;
 8012588:	68fb      	ldr	r3, [r7, #12]
 801258a:	681b      	ldr	r3, [r3, #0]
 801258c:	60fb      	str	r3, [r7, #12]
    while( ( curElement != NULL ) && ( curElement->CID != cid ) )
 801258e:	68fb      	ldr	r3, [r7, #12]
 8012590:	2b00      	cmp	r3, #0
 8012592:	d004      	beq.n	801259e <LoRaMacCommandsGetCmd+0x2a>
 8012594:	68fb      	ldr	r3, [r7, #12]
 8012596:	791b      	ldrb	r3, [r3, #4]
 8012598:	79fa      	ldrb	r2, [r7, #7]
 801259a:	429a      	cmp	r2, r3
 801259c:	d1f4      	bne.n	8012588 <LoRaMacCommandsGetCmd+0x14>
    }

    // Update the pointer anyway
    *macCmd = curElement;
 801259e:	683b      	ldr	r3, [r7, #0]
 80125a0:	68fa      	ldr	r2, [r7, #12]
 80125a2:	601a      	str	r2, [r3, #0]

    // Handle error in case if we reached the end without finding it.
    if( curElement == NULL )
 80125a4:	68fb      	ldr	r3, [r7, #12]
 80125a6:	2b00      	cmp	r3, #0
 80125a8:	d101      	bne.n	80125ae <LoRaMacCommandsGetCmd+0x3a>
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
 80125aa:	2303      	movs	r3, #3
 80125ac:	e000      	b.n	80125b0 <LoRaMacCommandsGetCmd+0x3c>
    }
    return LORAMAC_COMMANDS_SUCCESS;
 80125ae:	2300      	movs	r3, #0
}
 80125b0:	4618      	mov	r0, r3
 80125b2:	3714      	adds	r7, #20
 80125b4:	46bd      	mov	sp, r7
 80125b6:	bc80      	pop	{r7}
 80125b8:	4770      	bx	lr
 80125ba:	bf00      	nop
 80125bc:	200012bc 	.word	0x200012bc

080125c0 <LoRaMacCommandsRemoveNoneStickyCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveNoneStickyCmds( void )
{
 80125c0:	b580      	push	{r7, lr}
 80125c2:	b082      	sub	sp, #8
 80125c4:	af00      	add	r7, sp, #0
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 80125c6:	4b0f      	ldr	r3, [pc, #60]	@ (8012604 <LoRaMacCommandsRemoveNoneStickyCmds+0x44>)
 80125c8:	681b      	ldr	r3, [r3, #0]
 80125ca:	607b      	str	r3, [r7, #4]

    // Loop through all elements
    while( curElement != NULL )
 80125cc:	e012      	b.n	80125f4 <LoRaMacCommandsRemoveNoneStickyCmds+0x34>
    {
        if( curElement->IsSticky == false )
 80125ce:	687b      	ldr	r3, [r7, #4]
 80125d0:	7b1b      	ldrb	r3, [r3, #12]
 80125d2:	f083 0301 	eor.w	r3, r3, #1
 80125d6:	b2db      	uxtb	r3, r3
 80125d8:	2b00      	cmp	r3, #0
 80125da:	d008      	beq.n	80125ee <LoRaMacCommandsRemoveNoneStickyCmds+0x2e>
        {
            nexElement = curElement->Next;
 80125dc:	687b      	ldr	r3, [r7, #4]
 80125de:	681b      	ldr	r3, [r3, #0]
 80125e0:	603b      	str	r3, [r7, #0]
            LoRaMacCommandsRemoveCmd( curElement );
 80125e2:	6878      	ldr	r0, [r7, #4]
 80125e4:	f7ff ff94 	bl	8012510 <LoRaMacCommandsRemoveCmd>
            curElement = nexElement;
 80125e8:	683b      	ldr	r3, [r7, #0]
 80125ea:	607b      	str	r3, [r7, #4]
 80125ec:	e002      	b.n	80125f4 <LoRaMacCommandsRemoveNoneStickyCmds+0x34>
        }
        else
        {
            curElement = curElement->Next;
 80125ee:	687b      	ldr	r3, [r7, #4]
 80125f0:	681b      	ldr	r3, [r3, #0]
 80125f2:	607b      	str	r3, [r7, #4]
    while( curElement != NULL )
 80125f4:	687b      	ldr	r3, [r7, #4]
 80125f6:	2b00      	cmp	r3, #0
 80125f8:	d1e9      	bne.n	80125ce <LoRaMacCommandsRemoveNoneStickyCmds+0xe>
        }
    }

    return LORAMAC_COMMANDS_SUCCESS;
 80125fa:	2300      	movs	r3, #0
}
 80125fc:	4618      	mov	r0, r3
 80125fe:	3708      	adds	r7, #8
 8012600:	46bd      	mov	sp, r7
 8012602:	bd80      	pop	{r7, pc}
 8012604:	200012bc 	.word	0x200012bc

08012608 <LoRaMacCommandsRemoveStickyAnsCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveStickyAnsCmds( void )
{
 8012608:	b580      	push	{r7, lr}
 801260a:	b082      	sub	sp, #8
 801260c:	af00      	add	r7, sp, #0
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 801260e:	4b13      	ldr	r3, [pc, #76]	@ (801265c <LoRaMacCommandsRemoveStickyAnsCmds+0x54>)
 8012610:	681b      	ldr	r3, [r3, #0]
 8012612:	607b      	str	r3, [r7, #4]

    // Loop through all elements
    while( curElement != NULL )
 8012614:	e01a      	b.n	801264c <LoRaMacCommandsRemoveStickyAnsCmds+0x44>
    {
        nexElement = curElement->Next;
 8012616:	687b      	ldr	r3, [r7, #4]
 8012618:	681b      	ldr	r3, [r3, #0]
 801261a:	603b      	str	r3, [r7, #0]
        if( ( IsSticky( curElement->CID ) == true ) &&
 801261c:	687b      	ldr	r3, [r7, #4]
 801261e:	791b      	ldrb	r3, [r3, #4]
 8012620:	4618      	mov	r0, r3
 8012622:	f7ff fef6 	bl	8012412 <IsSticky>
 8012626:	4603      	mov	r3, r0
 8012628:	2b00      	cmp	r3, #0
 801262a:	d00d      	beq.n	8012648 <LoRaMacCommandsRemoveStickyAnsCmds+0x40>
            ( IsConfirmationRequired( curElement->CID ) == false ) )
 801262c:	687b      	ldr	r3, [r7, #4]
 801262e:	791b      	ldrb	r3, [r3, #4]
 8012630:	4618      	mov	r0, r3
 8012632:	f7ff ff03 	bl	801243c <IsConfirmationRequired>
 8012636:	4603      	mov	r3, r0
 8012638:	f083 0301 	eor.w	r3, r3, #1
 801263c:	b2db      	uxtb	r3, r3
        if( ( IsSticky( curElement->CID ) == true ) &&
 801263e:	2b00      	cmp	r3, #0
 8012640:	d002      	beq.n	8012648 <LoRaMacCommandsRemoveStickyAnsCmds+0x40>
        {
            LoRaMacCommandsRemoveCmd( curElement );
 8012642:	6878      	ldr	r0, [r7, #4]
 8012644:	f7ff ff64 	bl	8012510 <LoRaMacCommandsRemoveCmd>
        }
        curElement = nexElement;
 8012648:	683b      	ldr	r3, [r7, #0]
 801264a:	607b      	str	r3, [r7, #4]
    while( curElement != NULL )
 801264c:	687b      	ldr	r3, [r7, #4]
 801264e:	2b00      	cmp	r3, #0
 8012650:	d1e1      	bne.n	8012616 <LoRaMacCommandsRemoveStickyAnsCmds+0xe>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 8012652:	2300      	movs	r3, #0
}
 8012654:	4618      	mov	r0, r3
 8012656:	3708      	adds	r7, #8
 8012658:	46bd      	mov	sp, r7
 801265a:	bd80      	pop	{r7, pc}
 801265c:	200012bc 	.word	0x200012bc

08012660 <LoRaMacCommandsGetSizeSerializedCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsGetSizeSerializedCmds( size_t* size )
{
 8012660:	b480      	push	{r7}
 8012662:	b083      	sub	sp, #12
 8012664:	af00      	add	r7, sp, #0
 8012666:	6078      	str	r0, [r7, #4]
    if( size == NULL )
 8012668:	687b      	ldr	r3, [r7, #4]
 801266a:	2b00      	cmp	r3, #0
 801266c:	d101      	bne.n	8012672 <LoRaMacCommandsGetSizeSerializedCmds+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 801266e:	2301      	movs	r3, #1
 8012670:	e005      	b.n	801267e <LoRaMacCommandsGetSizeSerializedCmds+0x1e>
    }
    *size = CommandsCtx.SerializedCmdsSize;
 8012672:	4b05      	ldr	r3, [pc, #20]	@ (8012688 <LoRaMacCommandsGetSizeSerializedCmds+0x28>)
 8012674:	f8d3 20f8 	ldr.w	r2, [r3, #248]	@ 0xf8
 8012678:	687b      	ldr	r3, [r7, #4]
 801267a:	601a      	str	r2, [r3, #0]
    return LORAMAC_COMMANDS_SUCCESS;
 801267c:	2300      	movs	r3, #0
}
 801267e:	4618      	mov	r0, r3
 8012680:	370c      	adds	r7, #12
 8012682:	46bd      	mov	sp, r7
 8012684:	bc80      	pop	{r7}
 8012686:	4770      	bx	lr
 8012688:	200012bc 	.word	0x200012bc

0801268c <LoRaMacCommandsSerializeCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsSerializeCmds( size_t availableSize, size_t* effectiveSize, uint8_t* buffer )
{
 801268c:	b580      	push	{r7, lr}
 801268e:	b088      	sub	sp, #32
 8012690:	af00      	add	r7, sp, #0
 8012692:	60f8      	str	r0, [r7, #12]
 8012694:	60b9      	str	r1, [r7, #8]
 8012696:	607a      	str	r2, [r7, #4]
    MacCommand_t* curElement = CommandsCtx.MacCommandList.First;
 8012698:	4b25      	ldr	r3, [pc, #148]	@ (8012730 <LoRaMacCommandsSerializeCmds+0xa4>)
 801269a:	681b      	ldr	r3, [r3, #0]
 801269c:	61fb      	str	r3, [r7, #28]
    MacCommand_t* nextElement;
    uint8_t itr = 0;
 801269e:	2300      	movs	r3, #0
 80126a0:	76fb      	strb	r3, [r7, #27]

    if( ( buffer == NULL ) || ( effectiveSize == NULL ) )
 80126a2:	687b      	ldr	r3, [r7, #4]
 80126a4:	2b00      	cmp	r3, #0
 80126a6:	d002      	beq.n	80126ae <LoRaMacCommandsSerializeCmds+0x22>
 80126a8:	68bb      	ldr	r3, [r7, #8]
 80126aa:	2b00      	cmp	r3, #0
 80126ac:	d126      	bne.n	80126fc <LoRaMacCommandsSerializeCmds+0x70>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 80126ae:	2301      	movs	r3, #1
 80126b0:	e039      	b.n	8012726 <LoRaMacCommandsSerializeCmds+0x9a>

    // Loop through all elements which fits into the buffer
    while( curElement != NULL )
    {
        // If the next MAC command still fits into the buffer, add it.
        if( ( availableSize - itr ) >= ( CID_FIELD_SIZE + curElement->PayloadSize ) )
 80126b2:	7efb      	ldrb	r3, [r7, #27]
 80126b4:	68fa      	ldr	r2, [r7, #12]
 80126b6:	1ad2      	subs	r2, r2, r3
 80126b8:	69fb      	ldr	r3, [r7, #28]
 80126ba:	689b      	ldr	r3, [r3, #8]
 80126bc:	3301      	adds	r3, #1
 80126be:	429a      	cmp	r2, r3
 80126c0:	d320      	bcc.n	8012704 <LoRaMacCommandsSerializeCmds+0x78>
        {
            buffer[itr++] = curElement->CID;
 80126c2:	7efb      	ldrb	r3, [r7, #27]
 80126c4:	1c5a      	adds	r2, r3, #1
 80126c6:	76fa      	strb	r2, [r7, #27]
 80126c8:	461a      	mov	r2, r3
 80126ca:	687b      	ldr	r3, [r7, #4]
 80126cc:	4413      	add	r3, r2
 80126ce:	69fa      	ldr	r2, [r7, #28]
 80126d0:	7912      	ldrb	r2, [r2, #4]
 80126d2:	701a      	strb	r2, [r3, #0]
            memcpy1( &buffer[itr], curElement->Payload, curElement->PayloadSize );
 80126d4:	7efb      	ldrb	r3, [r7, #27]
 80126d6:	687a      	ldr	r2, [r7, #4]
 80126d8:	18d0      	adds	r0, r2, r3
 80126da:	69fb      	ldr	r3, [r7, #28]
 80126dc:	1d59      	adds	r1, r3, #5
 80126de:	69fb      	ldr	r3, [r7, #28]
 80126e0:	689b      	ldr	r3, [r3, #8]
 80126e2:	b29b      	uxth	r3, r3
 80126e4:	461a      	mov	r2, r3
 80126e6:	f003 ffa8 	bl	801663a <memcpy1>
            itr += curElement->PayloadSize;
 80126ea:	69fb      	ldr	r3, [r7, #28]
 80126ec:	689b      	ldr	r3, [r3, #8]
 80126ee:	b2da      	uxtb	r2, r3
 80126f0:	7efb      	ldrb	r3, [r7, #27]
 80126f2:	4413      	add	r3, r2
 80126f4:	76fb      	strb	r3, [r7, #27]
        }
        else
        {
            break;
        }
        curElement = curElement->Next;
 80126f6:	69fb      	ldr	r3, [r7, #28]
 80126f8:	681b      	ldr	r3, [r3, #0]
 80126fa:	61fb      	str	r3, [r7, #28]
    while( curElement != NULL )
 80126fc:	69fb      	ldr	r3, [r7, #28]
 80126fe:	2b00      	cmp	r3, #0
 8012700:	d1d7      	bne.n	80126b2 <LoRaMacCommandsSerializeCmds+0x26>
 8012702:	e009      	b.n	8012718 <LoRaMacCommandsSerializeCmds+0x8c>
            break;
 8012704:	bf00      	nop
    }

    // Remove all commands which do not fit into the buffer
    while( curElement != NULL )
 8012706:	e007      	b.n	8012718 <LoRaMacCommandsSerializeCmds+0x8c>
    {
        // Store the next element before removing the current one
        nextElement = curElement->Next;
 8012708:	69fb      	ldr	r3, [r7, #28]
 801270a:	681b      	ldr	r3, [r3, #0]
 801270c:	617b      	str	r3, [r7, #20]
        LoRaMacCommandsRemoveCmd( curElement );
 801270e:	69f8      	ldr	r0, [r7, #28]
 8012710:	f7ff fefe 	bl	8012510 <LoRaMacCommandsRemoveCmd>
        curElement = nextElement;
 8012714:	697b      	ldr	r3, [r7, #20]
 8012716:	61fb      	str	r3, [r7, #28]
    while( curElement != NULL )
 8012718:	69fb      	ldr	r3, [r7, #28]
 801271a:	2b00      	cmp	r3, #0
 801271c:	d1f4      	bne.n	8012708 <LoRaMacCommandsSerializeCmds+0x7c>
    }

    // Fetch the effective size of the mac commands
    LoRaMacCommandsGetSizeSerializedCmds( effectiveSize );
 801271e:	68b8      	ldr	r0, [r7, #8]
 8012720:	f7ff ff9e 	bl	8012660 <LoRaMacCommandsGetSizeSerializedCmds>

    return LORAMAC_COMMANDS_SUCCESS;
 8012724:	2300      	movs	r3, #0
}
 8012726:	4618      	mov	r0, r3
 8012728:	3720      	adds	r7, #32
 801272a:	46bd      	mov	sp, r7
 801272c:	bd80      	pop	{r7, pc}
 801272e:	bf00      	nop
 8012730:	200012bc 	.word	0x200012bc

08012734 <LoRaMacCommandsGetCmdSize>:

uint8_t LoRaMacCommandsGetCmdSize( uint8_t cid )
{
 8012734:	b480      	push	{r7}
 8012736:	b085      	sub	sp, #20
 8012738:	af00      	add	r7, sp, #0
 801273a:	4603      	mov	r3, r0
 801273c:	71fb      	strb	r3, [r7, #7]
    uint8_t cidSize = 0;
 801273e:	2300      	movs	r3, #0
 8012740:	73fb      	strb	r3, [r7, #15]

    // Decode Frame MAC commands
    switch( cid )
 8012742:	79fb      	ldrb	r3, [r7, #7]
 8012744:	3b02      	subs	r3, #2
 8012746:	2b11      	cmp	r3, #17
 8012748:	d850      	bhi.n	80127ec <LoRaMacCommandsGetCmdSize+0xb8>
 801274a:	a201      	add	r2, pc, #4	@ (adr r2, 8012750 <LoRaMacCommandsGetCmdSize+0x1c>)
 801274c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012750:	08012799 	.word	0x08012799
 8012754:	0801279f 	.word	0x0801279f
 8012758:	080127a5 	.word	0x080127a5
 801275c:	080127ab 	.word	0x080127ab
 8012760:	080127b1 	.word	0x080127b1
 8012764:	080127b7 	.word	0x080127b7
 8012768:	080127bd 	.word	0x080127bd
 801276c:	080127c3 	.word	0x080127c3
 8012770:	080127c9 	.word	0x080127c9
 8012774:	080127ed 	.word	0x080127ed
 8012778:	080127ed 	.word	0x080127ed
 801277c:	080127cf 	.word	0x080127cf
 8012780:	080127ed 	.word	0x080127ed
 8012784:	080127ed 	.word	0x080127ed
 8012788:	080127d5 	.word	0x080127d5
 801278c:	080127db 	.word	0x080127db
 8012790:	080127e1 	.word	0x080127e1
 8012794:	080127e7 	.word	0x080127e7
        }
#endif /* LORAMAC_VERSION */
        case SRV_MAC_LINK_CHECK_ANS:
        {
            // cid + Margin + GwCnt
            cidSize = 3;
 8012798:	2303      	movs	r3, #3
 801279a:	73fb      	strb	r3, [r7, #15]
            break;
 801279c:	e027      	b.n	80127ee <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_LINK_ADR_REQ:
        {
            // cid + DataRate_TXPower + ChMask (2) + Redundancy
            cidSize = 5;
 801279e:	2305      	movs	r3, #5
 80127a0:	73fb      	strb	r3, [r7, #15]
            break;
 80127a2:	e024      	b.n	80127ee <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DUTY_CYCLE_REQ:
        {
            // cid + DutyCyclePL
            cidSize = 2;
 80127a4:	2302      	movs	r3, #2
 80127a6:	73fb      	strb	r3, [r7, #15]
            break;
 80127a8:	e021      	b.n	80127ee <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_RX_PARAM_SETUP_REQ:
        {
            // cid + DLsettings + Frequency (3)
            cidSize = 5;
 80127aa:	2305      	movs	r3, #5
 80127ac:	73fb      	strb	r3, [r7, #15]
            break;
 80127ae:	e01e      	b.n	80127ee <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DEV_STATUS_REQ:
        {
            // cid
            cidSize = 1;
 80127b0:	2301      	movs	r3, #1
 80127b2:	73fb      	strb	r3, [r7, #15]
            break;
 80127b4:	e01b      	b.n	80127ee <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_NEW_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3) + DrRange
            cidSize = 6;
 80127b6:	2306      	movs	r3, #6
 80127b8:	73fb      	strb	r3, [r7, #15]
            break;
 80127ba:	e018      	b.n	80127ee <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_RX_TIMING_SETUP_REQ:
        {
            // cid + Settings
            cidSize = 2;
 80127bc:	2302      	movs	r3, #2
 80127be:	73fb      	strb	r3, [r7, #15]
            break;
 80127c0:	e015      	b.n	80127ee <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_TX_PARAM_SETUP_REQ:
        {
            // cid + EIRP_DwellTime
            cidSize = 2;
 80127c2:	2302      	movs	r3, #2
 80127c4:	73fb      	strb	r3, [r7, #15]
            break;
 80127c6:	e012      	b.n	80127ee <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DL_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3)
            cidSize = 5;
 80127c8:	2305      	movs	r3, #5
 80127ca:	73fb      	strb	r3, [r7, #15]
            break;
 80127cc:	e00f      	b.n	80127ee <LoRaMacCommandsGetCmdSize+0xba>
        }
#endif /* LORAMAC_VERSION */
        case SRV_MAC_DEVICE_TIME_ANS:
        {
            // cid + Seconds (4) + Fractional seconds (1)
            cidSize = 6;
 80127ce:	2306      	movs	r3, #6
 80127d0:	73fb      	strb	r3, [r7, #15]
            break;
 80127d2:	e00c      	b.n	80127ee <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_PING_SLOT_INFO_ANS:
        {
            // cid
            cidSize = 1;
 80127d4:	2301      	movs	r3, #1
 80127d6:	73fb      	strb	r3, [r7, #15]
            break;
 80127d8:	e009      	b.n	80127ee <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_PING_SLOT_CHANNEL_REQ:
        {
            // cid + Frequency (3) + DR
            cidSize = 5;
 80127da:	2305      	movs	r3, #5
 80127dc:	73fb      	strb	r3, [r7, #15]
            break;
 80127de:	e006      	b.n	80127ee <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_BEACON_TIMING_ANS:
        {
            // cid + TimingDelay (2) + Channel
            cidSize = 4;
 80127e0:	2304      	movs	r3, #4
 80127e2:	73fb      	strb	r3, [r7, #15]
            break;
 80127e4:	e003      	b.n	80127ee <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_BEACON_FREQ_REQ:
        {
            // cid + Frequency (3)
            cidSize = 4;
 80127e6:	2304      	movs	r3, #4
 80127e8:	73fb      	strb	r3, [r7, #15]
            break;
 80127ea:	e000      	b.n	80127ee <LoRaMacCommandsGetCmdSize+0xba>
        }
        default:
        {
            // Unknown command. ABORT MAC commands processing
            break;
 80127ec:	bf00      	nop
        }
    }
    return cidSize;
 80127ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80127f0:	4618      	mov	r0, r3
 80127f2:	3714      	adds	r7, #20
 80127f4:	46bd      	mov	sp, r7
 80127f6:	bc80      	pop	{r7}
 80127f8:	4770      	bx	lr
 80127fa:	bf00      	nop

080127fc <IncreaseBufferPointer>:
 * Module context.
 */
static LoRaMacConfirmQueueCtx_t ConfirmQueueCtx;

static MlmeConfirmQueue_t* IncreaseBufferPointer( MlmeConfirmQueue_t* bufferPointer )
{
 80127fc:	b480      	push	{r7}
 80127fe:	b083      	sub	sp, #12
 8012800:	af00      	add	r7, sp, #0
 8012802:	6078      	str	r0, [r7, #4]
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 8012804:	687b      	ldr	r3, [r7, #4]
 8012806:	4a07      	ldr	r2, [pc, #28]	@ (8012824 <IncreaseBufferPointer+0x28>)
 8012808:	4293      	cmp	r3, r2
 801280a:	d102      	bne.n	8012812 <IncreaseBufferPointer+0x16>
    {
        // Reset to the first element
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 801280c:	4b06      	ldr	r3, [pc, #24]	@ (8012828 <IncreaseBufferPointer+0x2c>)
 801280e:	607b      	str	r3, [r7, #4]
 8012810:	e002      	b.n	8012818 <IncreaseBufferPointer+0x1c>
    }
    else
    {
        // Increase
        bufferPointer++;
 8012812:	687b      	ldr	r3, [r7, #4]
 8012814:	3304      	adds	r3, #4
 8012816:	607b      	str	r3, [r7, #4]
    }
    return bufferPointer;
 8012818:	687b      	ldr	r3, [r7, #4]
}
 801281a:	4618      	mov	r0, r3
 801281c:	370c      	adds	r7, #12
 801281e:	46bd      	mov	sp, r7
 8012820:	bc80      	pop	{r7}
 8012822:	4770      	bx	lr
 8012824:	200013d4 	.word	0x200013d4
 8012828:	200013c4 	.word	0x200013c4

0801282c <IsListEmpty>:
    }
    return bufferPointer;
}

static bool IsListEmpty( uint8_t count )
{
 801282c:	b480      	push	{r7}
 801282e:	b083      	sub	sp, #12
 8012830:	af00      	add	r7, sp, #0
 8012832:	4603      	mov	r3, r0
 8012834:	71fb      	strb	r3, [r7, #7]
    if( count == 0 )
 8012836:	79fb      	ldrb	r3, [r7, #7]
 8012838:	2b00      	cmp	r3, #0
 801283a:	d101      	bne.n	8012840 <IsListEmpty+0x14>
    {
        return true;
 801283c:	2301      	movs	r3, #1
 801283e:	e000      	b.n	8012842 <IsListEmpty+0x16>
    }
    return false;
 8012840:	2300      	movs	r3, #0
}
 8012842:	4618      	mov	r0, r3
 8012844:	370c      	adds	r7, #12
 8012846:	46bd      	mov	sp, r7
 8012848:	bc80      	pop	{r7}
 801284a:	4770      	bx	lr

0801284c <IsListFull>:

static bool IsListFull( uint8_t count )
{
 801284c:	b480      	push	{r7}
 801284e:	b083      	sub	sp, #12
 8012850:	af00      	add	r7, sp, #0
 8012852:	4603      	mov	r3, r0
 8012854:	71fb      	strb	r3, [r7, #7]
    if( count >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
 8012856:	79fb      	ldrb	r3, [r7, #7]
 8012858:	2b04      	cmp	r3, #4
 801285a:	d901      	bls.n	8012860 <IsListFull+0x14>
    {
        return true;
 801285c:	2301      	movs	r3, #1
 801285e:	e000      	b.n	8012862 <IsListFull+0x16>
    }
    return false;
 8012860:	2300      	movs	r3, #0
}
 8012862:	4618      	mov	r0, r3
 8012864:	370c      	adds	r7, #12
 8012866:	46bd      	mov	sp, r7
 8012868:	bc80      	pop	{r7}
 801286a:	4770      	bx	lr

0801286c <GetElement>:

static MlmeConfirmQueue_t* GetElement( Mlme_t request, MlmeConfirmQueue_t* bufferStart, MlmeConfirmQueue_t* bufferEnd )
{
 801286c:	b580      	push	{r7, lr}
 801286e:	b086      	sub	sp, #24
 8012870:	af00      	add	r7, sp, #0
 8012872:	4603      	mov	r3, r0
 8012874:	60b9      	str	r1, [r7, #8]
 8012876:	607a      	str	r2, [r7, #4]
 8012878:	73fb      	strb	r3, [r7, #15]
    MlmeConfirmQueue_t* element = bufferStart;
 801287a:	68bb      	ldr	r3, [r7, #8]
 801287c:	617b      	str	r3, [r7, #20]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 801287e:	4b13      	ldr	r3, [pc, #76]	@ (80128cc <GetElement+0x60>)
 8012880:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012884:	4618      	mov	r0, r3
 8012886:	f7ff ffd1 	bl	801282c <IsListEmpty>
 801288a:	4603      	mov	r3, r0
 801288c:	2b00      	cmp	r3, #0
 801288e:	d001      	beq.n	8012894 <GetElement+0x28>
    {
        return NULL;
 8012890:	2300      	movs	r3, #0
 8012892:	e017      	b.n	80128c4 <GetElement+0x58>
    }

    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 8012894:	2300      	movs	r3, #0
 8012896:	74fb      	strb	r3, [r7, #19]
 8012898:	e00d      	b.n	80128b6 <GetElement+0x4a>
    {
        if( element->Request == request )
 801289a:	697b      	ldr	r3, [r7, #20]
 801289c:	781b      	ldrb	r3, [r3, #0]
 801289e:	7bfa      	ldrb	r2, [r7, #15]
 80128a0:	429a      	cmp	r2, r3
 80128a2:	d101      	bne.n	80128a8 <GetElement+0x3c>
        {
            // We have found the element
            return element;
 80128a4:	697b      	ldr	r3, [r7, #20]
 80128a6:	e00d      	b.n	80128c4 <GetElement+0x58>
        }
        element = IncreaseBufferPointer( element );
 80128a8:	6978      	ldr	r0, [r7, #20]
 80128aa:	f7ff ffa7 	bl	80127fc <IncreaseBufferPointer>
 80128ae:	6178      	str	r0, [r7, #20]
    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 80128b0:	7cfb      	ldrb	r3, [r7, #19]
 80128b2:	3301      	adds	r3, #1
 80128b4:	74fb      	strb	r3, [r7, #19]
 80128b6:	4b05      	ldr	r3, [pc, #20]	@ (80128cc <GetElement+0x60>)
 80128b8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80128bc:	7cfa      	ldrb	r2, [r7, #19]
 80128be:	429a      	cmp	r2, r3
 80128c0:	d3eb      	bcc.n	801289a <GetElement+0x2e>
    }

    return NULL;
 80128c2:	2300      	movs	r3, #0
}
 80128c4:	4618      	mov	r0, r3
 80128c6:	3718      	adds	r7, #24
 80128c8:	46bd      	mov	sp, r7
 80128ca:	bd80      	pop	{r7, pc}
 80128cc:	200013b8 	.word	0x200013b8

080128d0 <LoRaMacConfirmQueueInit>:

void LoRaMacConfirmQueueInit( LoRaMacPrimitives_t* primitives )
{
 80128d0:	b580      	push	{r7, lr}
 80128d2:	b082      	sub	sp, #8
 80128d4:	af00      	add	r7, sp, #0
 80128d6:	6078      	str	r0, [r7, #4]
    ConfirmQueueCtx.Primitives = primitives;
 80128d8:	4a0c      	ldr	r2, [pc, #48]	@ (801290c <LoRaMacConfirmQueueInit+0x3c>)
 80128da:	687b      	ldr	r3, [r7, #4]
 80128dc:	6013      	str	r3, [r2, #0]

    // Init counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt = 0;
 80128de:	4b0b      	ldr	r3, [pc, #44]	@ (801290c <LoRaMacConfirmQueueInit+0x3c>)
 80128e0:	2200      	movs	r2, #0
 80128e2:	f883 2020 	strb.w	r2, [r3, #32]

    // Init buffer
    ConfirmQueueCtx.BufferStart = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 80128e6:	4b09      	ldr	r3, [pc, #36]	@ (801290c <LoRaMacConfirmQueueInit+0x3c>)
 80128e8:	4a09      	ldr	r2, [pc, #36]	@ (8012910 <LoRaMacConfirmQueueInit+0x40>)
 80128ea:	605a      	str	r2, [r3, #4]
    ConfirmQueueCtx.BufferEnd = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 80128ec:	4b07      	ldr	r3, [pc, #28]	@ (801290c <LoRaMacConfirmQueueInit+0x3c>)
 80128ee:	4a08      	ldr	r2, [pc, #32]	@ (8012910 <LoRaMacConfirmQueueInit+0x40>)
 80128f0:	609a      	str	r2, [r3, #8]

    memset1( ( uint8_t* )ConfirmQueueCtx.Nvm.MlmeConfirmQueue, 0xFF, sizeof( ConfirmQueueCtx.Nvm.MlmeConfirmQueue ) );
 80128f2:	2214      	movs	r2, #20
 80128f4:	21ff      	movs	r1, #255	@ 0xff
 80128f6:	4806      	ldr	r0, [pc, #24]	@ (8012910 <LoRaMacConfirmQueueInit+0x40>)
 80128f8:	f003 feda 	bl	80166b0 <memset1>

    // Common status
    ConfirmQueueCtx.Nvm.CommonStatus = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80128fc:	4b03      	ldr	r3, [pc, #12]	@ (801290c <LoRaMacConfirmQueueInit+0x3c>)
 80128fe:	2201      	movs	r2, #1
 8012900:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
}
 8012904:	bf00      	nop
 8012906:	3708      	adds	r7, #8
 8012908:	46bd      	mov	sp, r7
 801290a:	bd80      	pop	{r7, pc}
 801290c:	200013b8 	.word	0x200013b8
 8012910:	200013c4 	.word	0x200013c4

08012914 <LoRaMacConfirmQueueAdd>:

bool LoRaMacConfirmQueueAdd( MlmeConfirmQueue_t* mlmeConfirm )
{
 8012914:	b580      	push	{r7, lr}
 8012916:	b082      	sub	sp, #8
 8012918:	af00      	add	r7, sp, #0
 801291a:	6078      	str	r0, [r7, #4]
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 801291c:	4b19      	ldr	r3, [pc, #100]	@ (8012984 <LoRaMacConfirmQueueAdd+0x70>)
 801291e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012922:	4618      	mov	r0, r3
 8012924:	f7ff ff92 	bl	801284c <IsListFull>
 8012928:	4603      	mov	r3, r0
 801292a:	2b00      	cmp	r3, #0
 801292c:	d001      	beq.n	8012932 <LoRaMacConfirmQueueAdd+0x1e>
    {
        // Protect the buffer against overwrites
        return false;
 801292e:	2300      	movs	r3, #0
 8012930:	e023      	b.n	801297a <LoRaMacConfirmQueueAdd+0x66>
    }

    // Add the element to the ring buffer
    ConfirmQueueCtx.BufferEnd->Request = mlmeConfirm->Request;
 8012932:	4b14      	ldr	r3, [pc, #80]	@ (8012984 <LoRaMacConfirmQueueAdd+0x70>)
 8012934:	689b      	ldr	r3, [r3, #8]
 8012936:	687a      	ldr	r2, [r7, #4]
 8012938:	7812      	ldrb	r2, [r2, #0]
 801293a:	701a      	strb	r2, [r3, #0]
    ConfirmQueueCtx.BufferEnd->Status = mlmeConfirm->Status;
 801293c:	4b11      	ldr	r3, [pc, #68]	@ (8012984 <LoRaMacConfirmQueueAdd+0x70>)
 801293e:	689b      	ldr	r3, [r3, #8]
 8012940:	687a      	ldr	r2, [r7, #4]
 8012942:	7852      	ldrb	r2, [r2, #1]
 8012944:	705a      	strb	r2, [r3, #1]
    ConfirmQueueCtx.BufferEnd->RestrictCommonReadyToHandle = mlmeConfirm->RestrictCommonReadyToHandle;
 8012946:	4b0f      	ldr	r3, [pc, #60]	@ (8012984 <LoRaMacConfirmQueueAdd+0x70>)
 8012948:	689b      	ldr	r3, [r3, #8]
 801294a:	687a      	ldr	r2, [r7, #4]
 801294c:	78d2      	ldrb	r2, [r2, #3]
 801294e:	70da      	strb	r2, [r3, #3]
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = false;
 8012950:	4b0c      	ldr	r3, [pc, #48]	@ (8012984 <LoRaMacConfirmQueueAdd+0x70>)
 8012952:	689b      	ldr	r3, [r3, #8]
 8012954:	2200      	movs	r2, #0
 8012956:	709a      	strb	r2, [r3, #2]
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = mlmeConfirm->ReadyToHandle;
#endif /* LORAMAC_VERSION */
    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt++;
 8012958:	4b0a      	ldr	r3, [pc, #40]	@ (8012984 <LoRaMacConfirmQueueAdd+0x70>)
 801295a:	f893 3020 	ldrb.w	r3, [r3, #32]
 801295e:	3301      	adds	r3, #1
 8012960:	b2da      	uxtb	r2, r3
 8012962:	4b08      	ldr	r3, [pc, #32]	@ (8012984 <LoRaMacConfirmQueueAdd+0x70>)
 8012964:	f883 2020 	strb.w	r2, [r3, #32]
    // Update end pointer
    ConfirmQueueCtx.BufferEnd = IncreaseBufferPointer( ConfirmQueueCtx.BufferEnd );
 8012968:	4b06      	ldr	r3, [pc, #24]	@ (8012984 <LoRaMacConfirmQueueAdd+0x70>)
 801296a:	689b      	ldr	r3, [r3, #8]
 801296c:	4618      	mov	r0, r3
 801296e:	f7ff ff45 	bl	80127fc <IncreaseBufferPointer>
 8012972:	4603      	mov	r3, r0
 8012974:	4a03      	ldr	r2, [pc, #12]	@ (8012984 <LoRaMacConfirmQueueAdd+0x70>)
 8012976:	6093      	str	r3, [r2, #8]

    return true;
 8012978:	2301      	movs	r3, #1
}
 801297a:	4618      	mov	r0, r3
 801297c:	3708      	adds	r7, #8
 801297e:	46bd      	mov	sp, r7
 8012980:	bd80      	pop	{r7, pc}
 8012982:	bf00      	nop
 8012984:	200013b8 	.word	0x200013b8

08012988 <LoRaMacConfirmQueueRemoveFirst>:

    return true;
}

bool LoRaMacConfirmQueueRemoveFirst( void )
{
 8012988:	b580      	push	{r7, lr}
 801298a:	af00      	add	r7, sp, #0
    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 801298c:	4b0e      	ldr	r3, [pc, #56]	@ (80129c8 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 801298e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012992:	4618      	mov	r0, r3
 8012994:	f7ff ff4a 	bl	801282c <IsListEmpty>
 8012998:	4603      	mov	r3, r0
 801299a:	2b00      	cmp	r3, #0
 801299c:	d001      	beq.n	80129a2 <LoRaMacConfirmQueueRemoveFirst+0x1a>
    {
        return false;
 801299e:	2300      	movs	r3, #0
 80129a0:	e010      	b.n	80129c4 <LoRaMacConfirmQueueRemoveFirst+0x3c>
    }

    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt--;
 80129a2:	4b09      	ldr	r3, [pc, #36]	@ (80129c8 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 80129a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80129a8:	3b01      	subs	r3, #1
 80129aa:	b2da      	uxtb	r2, r3
 80129ac:	4b06      	ldr	r3, [pc, #24]	@ (80129c8 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 80129ae:	f883 2020 	strb.w	r2, [r3, #32]
    // Update start pointer
    ConfirmQueueCtx.BufferStart = IncreaseBufferPointer( ConfirmQueueCtx.BufferStart );
 80129b2:	4b05      	ldr	r3, [pc, #20]	@ (80129c8 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 80129b4:	685b      	ldr	r3, [r3, #4]
 80129b6:	4618      	mov	r0, r3
 80129b8:	f7ff ff20 	bl	80127fc <IncreaseBufferPointer>
 80129bc:	4603      	mov	r3, r0
 80129be:	4a02      	ldr	r2, [pc, #8]	@ (80129c8 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 80129c0:	6053      	str	r3, [r2, #4]

    return true;
 80129c2:	2301      	movs	r3, #1
}
 80129c4:	4618      	mov	r0, r3
 80129c6:	bd80      	pop	{r7, pc}
 80129c8:	200013b8 	.word	0x200013b8

080129cc <LoRaMacConfirmQueueSetStatus>:

void LoRaMacConfirmQueueSetStatus( LoRaMacEventInfoStatus_t status, Mlme_t request )
{
 80129cc:	b580      	push	{r7, lr}
 80129ce:	b084      	sub	sp, #16
 80129d0:	af00      	add	r7, sp, #0
 80129d2:	4603      	mov	r3, r0
 80129d4:	460a      	mov	r2, r1
 80129d6:	71fb      	strb	r3, [r7, #7]
 80129d8:	4613      	mov	r3, r2
 80129da:	71bb      	strb	r3, [r7, #6]
    MlmeConfirmQueue_t* element = NULL;
 80129dc:	2300      	movs	r3, #0
 80129de:	60fb      	str	r3, [r7, #12]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 80129e0:	4b10      	ldr	r3, [pc, #64]	@ (8012a24 <LoRaMacConfirmQueueSetStatus+0x58>)
 80129e2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80129e6:	4618      	mov	r0, r3
 80129e8:	f7ff ff20 	bl	801282c <IsListEmpty>
 80129ec:	4603      	mov	r3, r0
 80129ee:	f083 0301 	eor.w	r3, r3, #1
 80129f2:	b2db      	uxtb	r3, r3
 80129f4:	2b00      	cmp	r3, #0
 80129f6:	d011      	beq.n	8012a1c <LoRaMacConfirmQueueSetStatus+0x50>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 80129f8:	4b0a      	ldr	r3, [pc, #40]	@ (8012a24 <LoRaMacConfirmQueueSetStatus+0x58>)
 80129fa:	6859      	ldr	r1, [r3, #4]
 80129fc:	4b09      	ldr	r3, [pc, #36]	@ (8012a24 <LoRaMacConfirmQueueSetStatus+0x58>)
 80129fe:	689a      	ldr	r2, [r3, #8]
 8012a00:	79bb      	ldrb	r3, [r7, #6]
 8012a02:	4618      	mov	r0, r3
 8012a04:	f7ff ff32 	bl	801286c <GetElement>
 8012a08:	60f8      	str	r0, [r7, #12]
        if( element != NULL )
 8012a0a:	68fb      	ldr	r3, [r7, #12]
 8012a0c:	2b00      	cmp	r3, #0
 8012a0e:	d005      	beq.n	8012a1c <LoRaMacConfirmQueueSetStatus+0x50>
        {
            element->Status = status;
 8012a10:	68fb      	ldr	r3, [r7, #12]
 8012a12:	79fa      	ldrb	r2, [r7, #7]
 8012a14:	705a      	strb	r2, [r3, #1]
            element->ReadyToHandle = true;
 8012a16:	68fb      	ldr	r3, [r7, #12]
 8012a18:	2201      	movs	r2, #1
 8012a1a:	709a      	strb	r2, [r3, #2]
        }
    }
}
 8012a1c:	bf00      	nop
 8012a1e:	3710      	adds	r7, #16
 8012a20:	46bd      	mov	sp, r7
 8012a22:	bd80      	pop	{r7, pc}
 8012a24:	200013b8 	.word	0x200013b8

08012a28 <LoRaMacConfirmQueueGetStatus>:

LoRaMacEventInfoStatus_t LoRaMacConfirmQueueGetStatus( Mlme_t request )
{
 8012a28:	b580      	push	{r7, lr}
 8012a2a:	b084      	sub	sp, #16
 8012a2c:	af00      	add	r7, sp, #0
 8012a2e:	4603      	mov	r3, r0
 8012a30:	71fb      	strb	r3, [r7, #7]
    MlmeConfirmQueue_t* element = NULL;
 8012a32:	2300      	movs	r3, #0
 8012a34:	60fb      	str	r3, [r7, #12]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 8012a36:	4b10      	ldr	r3, [pc, #64]	@ (8012a78 <LoRaMacConfirmQueueGetStatus+0x50>)
 8012a38:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012a3c:	4618      	mov	r0, r3
 8012a3e:	f7ff fef5 	bl	801282c <IsListEmpty>
 8012a42:	4603      	mov	r3, r0
 8012a44:	f083 0301 	eor.w	r3, r3, #1
 8012a48:	b2db      	uxtb	r3, r3
 8012a4a:	2b00      	cmp	r3, #0
 8012a4c:	d00e      	beq.n	8012a6c <LoRaMacConfirmQueueGetStatus+0x44>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 8012a4e:	4b0a      	ldr	r3, [pc, #40]	@ (8012a78 <LoRaMacConfirmQueueGetStatus+0x50>)
 8012a50:	6859      	ldr	r1, [r3, #4]
 8012a52:	4b09      	ldr	r3, [pc, #36]	@ (8012a78 <LoRaMacConfirmQueueGetStatus+0x50>)
 8012a54:	689a      	ldr	r2, [r3, #8]
 8012a56:	79fb      	ldrb	r3, [r7, #7]
 8012a58:	4618      	mov	r0, r3
 8012a5a:	f7ff ff07 	bl	801286c <GetElement>
 8012a5e:	60f8      	str	r0, [r7, #12]
        if( element != NULL )
 8012a60:	68fb      	ldr	r3, [r7, #12]
 8012a62:	2b00      	cmp	r3, #0
 8012a64:	d002      	beq.n	8012a6c <LoRaMacConfirmQueueGetStatus+0x44>
        {
            return element->Status;
 8012a66:	68fb      	ldr	r3, [r7, #12]
 8012a68:	785b      	ldrb	r3, [r3, #1]
 8012a6a:	e000      	b.n	8012a6e <LoRaMacConfirmQueueGetStatus+0x46>
        }
    }
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 8012a6c:	2301      	movs	r3, #1
}
 8012a6e:	4618      	mov	r0, r3
 8012a70:	3710      	adds	r7, #16
 8012a72:	46bd      	mov	sp, r7
 8012a74:	bd80      	pop	{r7, pc}
 8012a76:	bf00      	nop
 8012a78:	200013b8 	.word	0x200013b8

08012a7c <LoRaMacConfirmQueueSetStatusCmn>:

void LoRaMacConfirmQueueSetStatusCmn( LoRaMacEventInfoStatus_t status )
{
 8012a7c:	b580      	push	{r7, lr}
 8012a7e:	b084      	sub	sp, #16
 8012a80:	af00      	add	r7, sp, #0
 8012a82:	4603      	mov	r3, r0
 8012a84:	71fb      	strb	r3, [r7, #7]
    MlmeConfirmQueue_t* element = ConfirmQueueCtx.BufferStart;
 8012a86:	4b16      	ldr	r3, [pc, #88]	@ (8012ae0 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8012a88:	685b      	ldr	r3, [r3, #4]
 8012a8a:	60fb      	str	r3, [r7, #12]

    ConfirmQueueCtx.Nvm.CommonStatus = status;
 8012a8c:	4a14      	ldr	r2, [pc, #80]	@ (8012ae0 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8012a8e:	79fb      	ldrb	r3, [r7, #7]
 8012a90:	f882 3021 	strb.w	r3, [r2, #33]	@ 0x21

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 8012a94:	4b12      	ldr	r3, [pc, #72]	@ (8012ae0 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8012a96:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012a9a:	4618      	mov	r0, r3
 8012a9c:	f7ff fec6 	bl	801282c <IsListEmpty>
 8012aa0:	4603      	mov	r3, r0
 8012aa2:	f083 0301 	eor.w	r3, r3, #1
 8012aa6:	b2db      	uxtb	r3, r3
 8012aa8:	2b00      	cmp	r3, #0
 8012aaa:	d015      	beq.n	8012ad8 <LoRaMacConfirmQueueSetStatusCmn+0x5c>
    {
        do
        {
            element->Status = status;
 8012aac:	68fb      	ldr	r3, [r7, #12]
 8012aae:	79fa      	ldrb	r2, [r7, #7]
 8012ab0:	705a      	strb	r2, [r3, #1]
            // Set the status if it is allowed to set it with a call to
            // LoRaMacConfirmQueueSetStatusCmn.
            if( element->RestrictCommonReadyToHandle == false )
 8012ab2:	68fb      	ldr	r3, [r7, #12]
 8012ab4:	78db      	ldrb	r3, [r3, #3]
 8012ab6:	f083 0301 	eor.w	r3, r3, #1
 8012aba:	b2db      	uxtb	r3, r3
 8012abc:	2b00      	cmp	r3, #0
 8012abe:	d002      	beq.n	8012ac6 <LoRaMacConfirmQueueSetStatusCmn+0x4a>
            {
                element->ReadyToHandle = true;
 8012ac0:	68fb      	ldr	r3, [r7, #12]
 8012ac2:	2201      	movs	r2, #1
 8012ac4:	709a      	strb	r2, [r3, #2]
            }
            element = IncreaseBufferPointer( element );
 8012ac6:	68f8      	ldr	r0, [r7, #12]
 8012ac8:	f7ff fe98 	bl	80127fc <IncreaseBufferPointer>
 8012acc:	60f8      	str	r0, [r7, #12]
        }while( element != ConfirmQueueCtx.BufferEnd );
 8012ace:	4b04      	ldr	r3, [pc, #16]	@ (8012ae0 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8012ad0:	689b      	ldr	r3, [r3, #8]
 8012ad2:	68fa      	ldr	r2, [r7, #12]
 8012ad4:	429a      	cmp	r2, r3
 8012ad6:	d1e9      	bne.n	8012aac <LoRaMacConfirmQueueSetStatusCmn+0x30>
    }
}
 8012ad8:	bf00      	nop
 8012ada:	3710      	adds	r7, #16
 8012adc:	46bd      	mov	sp, r7
 8012ade:	bd80      	pop	{r7, pc}
 8012ae0:	200013b8 	.word	0x200013b8

08012ae4 <LoRaMacConfirmQueueIsCmdActive>:
{
    return ConfirmQueueCtx.Nvm.CommonStatus;
}

bool LoRaMacConfirmQueueIsCmdActive( Mlme_t request )
{
 8012ae4:	b580      	push	{r7, lr}
 8012ae6:	b082      	sub	sp, #8
 8012ae8:	af00      	add	r7, sp, #0
 8012aea:	4603      	mov	r3, r0
 8012aec:	71fb      	strb	r3, [r7, #7]
    if( GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd ) != NULL )
 8012aee:	4b09      	ldr	r3, [pc, #36]	@ (8012b14 <LoRaMacConfirmQueueIsCmdActive+0x30>)
 8012af0:	6859      	ldr	r1, [r3, #4]
 8012af2:	4b08      	ldr	r3, [pc, #32]	@ (8012b14 <LoRaMacConfirmQueueIsCmdActive+0x30>)
 8012af4:	689a      	ldr	r2, [r3, #8]
 8012af6:	79fb      	ldrb	r3, [r7, #7]
 8012af8:	4618      	mov	r0, r3
 8012afa:	f7ff feb7 	bl	801286c <GetElement>
 8012afe:	4603      	mov	r3, r0
 8012b00:	2b00      	cmp	r3, #0
 8012b02:	d001      	beq.n	8012b08 <LoRaMacConfirmQueueIsCmdActive+0x24>
    {
        return true;
 8012b04:	2301      	movs	r3, #1
 8012b06:	e000      	b.n	8012b0a <LoRaMacConfirmQueueIsCmdActive+0x26>
    }
    return false;
 8012b08:	2300      	movs	r3, #0
}
 8012b0a:	4618      	mov	r0, r3
 8012b0c:	3708      	adds	r7, #8
 8012b0e:	46bd      	mov	sp, r7
 8012b10:	bd80      	pop	{r7, pc}
 8012b12:	bf00      	nop
 8012b14:	200013b8 	.word	0x200013b8

08012b18 <LoRaMacConfirmQueueHandleCb>:

void LoRaMacConfirmQueueHandleCb( MlmeConfirm_t* mlmeConfirm )
{
 8012b18:	b580      	push	{r7, lr}
 8012b1a:	b084      	sub	sp, #16
 8012b1c:	af00      	add	r7, sp, #0
 8012b1e:	6078      	str	r0, [r7, #4]
    uint8_t nbElements = ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 8012b20:	4b25      	ldr	r3, [pc, #148]	@ (8012bb8 <LoRaMacConfirmQueueHandleCb+0xa0>)
 8012b22:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012b26:	73bb      	strb	r3, [r7, #14]
    bool readyToHandle = false;
 8012b28:	2300      	movs	r3, #0
 8012b2a:	737b      	strb	r3, [r7, #13]
    MlmeConfirmQueue_t mlmeConfirmToStore;

    memset1( ( uint8_t* ) &mlmeConfirmToStore, 0, sizeof( MlmeConfirmQueue_t ) );
 8012b2c:	f107 0308 	add.w	r3, r7, #8
 8012b30:	2204      	movs	r2, #4
 8012b32:	2100      	movs	r1, #0
 8012b34:	4618      	mov	r0, r3
 8012b36:	f003 fdbb 	bl	80166b0 <memset1>

    for( uint8_t i = 0; i < nbElements; i++ )
 8012b3a:	2300      	movs	r3, #0
 8012b3c:	73fb      	strb	r3, [r7, #15]
 8012b3e:	e032      	b.n	8012ba6 <LoRaMacConfirmQueueHandleCb+0x8e>
    {
        mlmeConfirm->MlmeRequest = ConfirmQueueCtx.BufferStart->Request;
 8012b40:	4b1d      	ldr	r3, [pc, #116]	@ (8012bb8 <LoRaMacConfirmQueueHandleCb+0xa0>)
 8012b42:	685b      	ldr	r3, [r3, #4]
 8012b44:	781a      	ldrb	r2, [r3, #0]
 8012b46:	687b      	ldr	r3, [r7, #4]
 8012b48:	701a      	strb	r2, [r3, #0]
        mlmeConfirm->Status = ConfirmQueueCtx.BufferStart->Status;
 8012b4a:	4b1b      	ldr	r3, [pc, #108]	@ (8012bb8 <LoRaMacConfirmQueueHandleCb+0xa0>)
 8012b4c:	685b      	ldr	r3, [r3, #4]
 8012b4e:	785a      	ldrb	r2, [r3, #1]
 8012b50:	687b      	ldr	r3, [r7, #4]
 8012b52:	705a      	strb	r2, [r3, #1]
        readyToHandle = ConfirmQueueCtx.BufferStart->ReadyToHandle;
 8012b54:	4b18      	ldr	r3, [pc, #96]	@ (8012bb8 <LoRaMacConfirmQueueHandleCb+0xa0>)
 8012b56:	685b      	ldr	r3, [r3, #4]
 8012b58:	789b      	ldrb	r3, [r3, #2]
 8012b5a:	737b      	strb	r3, [r7, #13]

        if( readyToHandle == true )
 8012b5c:	7b7b      	ldrb	r3, [r7, #13]
 8012b5e:	2b00      	cmp	r3, #0
 8012b60:	d005      	beq.n	8012b6e <LoRaMacConfirmQueueHandleCb+0x56>
        {
            ConfirmQueueCtx.Primitives->MacMlmeConfirm( mlmeConfirm );
 8012b62:	4b15      	ldr	r3, [pc, #84]	@ (8012bb8 <LoRaMacConfirmQueueHandleCb+0xa0>)
 8012b64:	681b      	ldr	r3, [r3, #0]
 8012b66:	689b      	ldr	r3, [r3, #8]
 8012b68:	6878      	ldr	r0, [r7, #4]
 8012b6a:	4798      	blx	r3
 8012b6c:	e00b      	b.n	8012b86 <LoRaMacConfirmQueueHandleCb+0x6e>
        }
        else
        {
            // The request is not processed yet. Store the state.
            mlmeConfirmToStore.Request = ConfirmQueueCtx.BufferStart->Request;
 8012b6e:	4b12      	ldr	r3, [pc, #72]	@ (8012bb8 <LoRaMacConfirmQueueHandleCb+0xa0>)
 8012b70:	685b      	ldr	r3, [r3, #4]
 8012b72:	781b      	ldrb	r3, [r3, #0]
 8012b74:	723b      	strb	r3, [r7, #8]
            mlmeConfirmToStore.Status = ConfirmQueueCtx.BufferStart->Status;
 8012b76:	4b10      	ldr	r3, [pc, #64]	@ (8012bb8 <LoRaMacConfirmQueueHandleCb+0xa0>)
 8012b78:	685b      	ldr	r3, [r3, #4]
 8012b7a:	785b      	ldrb	r3, [r3, #1]
 8012b7c:	727b      	strb	r3, [r7, #9]
            mlmeConfirmToStore.RestrictCommonReadyToHandle = ConfirmQueueCtx.BufferStart->RestrictCommonReadyToHandle;
 8012b7e:	4b0e      	ldr	r3, [pc, #56]	@ (8012bb8 <LoRaMacConfirmQueueHandleCb+0xa0>)
 8012b80:	685b      	ldr	r3, [r3, #4]
 8012b82:	78db      	ldrb	r3, [r3, #3]
 8012b84:	72fb      	strb	r3, [r7, #11]
        }

        // Increase the pointer afterwards to prevent overwrites
        LoRaMacConfirmQueueRemoveFirst( );
 8012b86:	f7ff feff 	bl	8012988 <LoRaMacConfirmQueueRemoveFirst>

        if( readyToHandle == false )
 8012b8a:	7b7b      	ldrb	r3, [r7, #13]
 8012b8c:	f083 0301 	eor.w	r3, r3, #1
 8012b90:	b2db      	uxtb	r3, r3
 8012b92:	2b00      	cmp	r3, #0
 8012b94:	d004      	beq.n	8012ba0 <LoRaMacConfirmQueueHandleCb+0x88>
        {
            // Add a request which has not been finished again to the queue
            LoRaMacConfirmQueueAdd( &mlmeConfirmToStore );
 8012b96:	f107 0308 	add.w	r3, r7, #8
 8012b9a:	4618      	mov	r0, r3
 8012b9c:	f7ff feba 	bl	8012914 <LoRaMacConfirmQueueAdd>
    for( uint8_t i = 0; i < nbElements; i++ )
 8012ba0:	7bfb      	ldrb	r3, [r7, #15]
 8012ba2:	3301      	adds	r3, #1
 8012ba4:	73fb      	strb	r3, [r7, #15]
 8012ba6:	7bfa      	ldrb	r2, [r7, #15]
 8012ba8:	7bbb      	ldrb	r3, [r7, #14]
 8012baa:	429a      	cmp	r2, r3
 8012bac:	d3c8      	bcc.n	8012b40 <LoRaMacConfirmQueueHandleCb+0x28>
        }
    }
}
 8012bae:	bf00      	nop
 8012bb0:	bf00      	nop
 8012bb2:	3710      	adds	r7, #16
 8012bb4:	46bd      	mov	sp, r7
 8012bb6:	bd80      	pop	{r7, pc}
 8012bb8:	200013b8 	.word	0x200013b8

08012bbc <LoRaMacConfirmQueueGetCnt>:

uint8_t LoRaMacConfirmQueueGetCnt( void )
{
 8012bbc:	b480      	push	{r7}
 8012bbe:	af00      	add	r7, sp, #0
    return ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 8012bc0:	4b03      	ldr	r3, [pc, #12]	@ (8012bd0 <LoRaMacConfirmQueueGetCnt+0x14>)
 8012bc2:	f893 3020 	ldrb.w	r3, [r3, #32]
}
 8012bc6:	4618      	mov	r0, r3
 8012bc8:	46bd      	mov	sp, r7
 8012bca:	bc80      	pop	{r7}
 8012bcc:	4770      	bx	lr
 8012bce:	bf00      	nop
 8012bd0:	200013b8 	.word	0x200013b8

08012bd4 <LoRaMacConfirmQueueIsFull>:

bool LoRaMacConfirmQueueIsFull( void )
{
 8012bd4:	b580      	push	{r7, lr}
 8012bd6:	af00      	add	r7, sp, #0
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8012bd8:	4b06      	ldr	r3, [pc, #24]	@ (8012bf4 <LoRaMacConfirmQueueIsFull+0x20>)
 8012bda:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012bde:	4618      	mov	r0, r3
 8012be0:	f7ff fe34 	bl	801284c <IsListFull>
 8012be4:	4603      	mov	r3, r0
 8012be6:	2b00      	cmp	r3, #0
 8012be8:	d001      	beq.n	8012bee <LoRaMacConfirmQueueIsFull+0x1a>
    {
        return true;
 8012bea:	2301      	movs	r3, #1
 8012bec:	e000      	b.n	8012bf0 <LoRaMacConfirmQueueIsFull+0x1c>
    }
    else
    {
        return false;
 8012bee:	2300      	movs	r3, #0
    }
}
 8012bf0:	4618      	mov	r0, r3
 8012bf2:	bd80      	pop	{r7, pc}
 8012bf4:	200013b8 	.word	0x200013b8

08012bf8 <PayloadEncrypt>:
 * \param [in] size             - Size of data
 * \param [in,out] buffer       - Data buffer
 * \retval                      - Status of the operation
 */
static LoRaMacCryptoStatus_t PayloadEncrypt( uint8_t* buffer, int16_t size, KeyIdentifier_t keyID, uint32_t address, uint8_t dir, uint32_t frameCounter )
{
 8012bf8:	b580      	push	{r7, lr}
 8012bfa:	b08e      	sub	sp, #56	@ 0x38
 8012bfc:	af00      	add	r7, sp, #0
 8012bfe:	60f8      	str	r0, [r7, #12]
 8012c00:	607b      	str	r3, [r7, #4]
 8012c02:	460b      	mov	r3, r1
 8012c04:	817b      	strh	r3, [r7, #10]
 8012c06:	4613      	mov	r3, r2
 8012c08:	727b      	strb	r3, [r7, #9]
    if( buffer == 0 )
 8012c0a:	68fb      	ldr	r3, [r7, #12]
 8012c0c:	2b00      	cmp	r3, #0
 8012c0e:	d101      	bne.n	8012c14 <PayloadEncrypt+0x1c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8012c10:	230a      	movs	r3, #10
 8012c12:	e086      	b.n	8012d22 <PayloadEncrypt+0x12a>
    }

    uint8_t bufferIndex = 0;
 8012c14:	2300      	movs	r3, #0
 8012c16:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    uint16_t ctr = 1;
 8012c1a:	2301      	movs	r3, #1
 8012c1c:	86bb      	strh	r3, [r7, #52]	@ 0x34
    uint8_t sBlock[16] = { 0 };
 8012c1e:	2300      	movs	r3, #0
 8012c20:	623b      	str	r3, [r7, #32]
 8012c22:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8012c26:	2200      	movs	r2, #0
 8012c28:	601a      	str	r2, [r3, #0]
 8012c2a:	605a      	str	r2, [r3, #4]
 8012c2c:	609a      	str	r2, [r3, #8]
    uint8_t aBlock[16] = { 0 };
 8012c2e:	2300      	movs	r3, #0
 8012c30:	613b      	str	r3, [r7, #16]
 8012c32:	f107 0314 	add.w	r3, r7, #20
 8012c36:	2200      	movs	r2, #0
 8012c38:	601a      	str	r2, [r3, #0]
 8012c3a:	605a      	str	r2, [r3, #4]
 8012c3c:	609a      	str	r2, [r3, #8]

    aBlock[0] = 0x01;
 8012c3e:	2301      	movs	r3, #1
 8012c40:	743b      	strb	r3, [r7, #16]

    aBlock[5] = dir;
 8012c42:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8012c46:	757b      	strb	r3, [r7, #21]

    aBlock[6] = address & 0xFF;
 8012c48:	687b      	ldr	r3, [r7, #4]
 8012c4a:	b2db      	uxtb	r3, r3
 8012c4c:	75bb      	strb	r3, [r7, #22]
    aBlock[7] = ( address >> 8 ) & 0xFF;
 8012c4e:	687b      	ldr	r3, [r7, #4]
 8012c50:	0a1b      	lsrs	r3, r3, #8
 8012c52:	b2db      	uxtb	r3, r3
 8012c54:	75fb      	strb	r3, [r7, #23]
    aBlock[8] = ( address >> 16 ) & 0xFF;
 8012c56:	687b      	ldr	r3, [r7, #4]
 8012c58:	0c1b      	lsrs	r3, r3, #16
 8012c5a:	b2db      	uxtb	r3, r3
 8012c5c:	763b      	strb	r3, [r7, #24]
    aBlock[9] = ( address >> 24 ) & 0xFF;
 8012c5e:	687b      	ldr	r3, [r7, #4]
 8012c60:	0e1b      	lsrs	r3, r3, #24
 8012c62:	b2db      	uxtb	r3, r3
 8012c64:	767b      	strb	r3, [r7, #25]

    aBlock[10] = frameCounter & 0xFF;
 8012c66:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012c68:	b2db      	uxtb	r3, r3
 8012c6a:	76bb      	strb	r3, [r7, #26]
    aBlock[11] = ( frameCounter >> 8 ) & 0xFF;
 8012c6c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012c6e:	0a1b      	lsrs	r3, r3, #8
 8012c70:	b2db      	uxtb	r3, r3
 8012c72:	76fb      	strb	r3, [r7, #27]
    aBlock[12] = ( frameCounter >> 16 ) & 0xFF;
 8012c74:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012c76:	0c1b      	lsrs	r3, r3, #16
 8012c78:	b2db      	uxtb	r3, r3
 8012c7a:	773b      	strb	r3, [r7, #28]
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
 8012c7c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012c7e:	0e1b      	lsrs	r3, r3, #24
 8012c80:	b2db      	uxtb	r3, r3
 8012c82:	777b      	strb	r3, [r7, #29]

    while( size > 0 )
 8012c84:	e048      	b.n	8012d18 <PayloadEncrypt+0x120>
    {
        aBlock[15] = ctr & 0xFF;
 8012c86:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8012c88:	b2db      	uxtb	r3, r3
 8012c8a:	77fb      	strb	r3, [r7, #31]
        ctr++;
 8012c8c:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8012c8e:	3301      	adds	r3, #1
 8012c90:	86bb      	strh	r3, [r7, #52]	@ 0x34
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 8012c92:	f107 0320 	add.w	r3, r7, #32
 8012c96:	7a7a      	ldrb	r2, [r7, #9]
 8012c98:	f107 0010 	add.w	r0, r7, #16
 8012c9c:	2110      	movs	r1, #16
 8012c9e:	f7f8 ff47 	bl	800bb30 <SecureElementAesEncrypt>
 8012ca2:	4603      	mov	r3, r0
 8012ca4:	2b00      	cmp	r3, #0
 8012ca6:	d001      	beq.n	8012cac <PayloadEncrypt+0xb4>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8012ca8:	230f      	movs	r3, #15
 8012caa:	e03a      	b.n	8012d22 <PayloadEncrypt+0x12a>
        }

        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 8012cac:	2300      	movs	r3, #0
 8012cae:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 8012cb2:	e01e      	b.n	8012cf2 <PayloadEncrypt+0xfa>
        {
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 8012cb4:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8012cb8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8012cbc:	4413      	add	r3, r2
 8012cbe:	461a      	mov	r2, r3
 8012cc0:	68fb      	ldr	r3, [r7, #12]
 8012cc2:	4413      	add	r3, r2
 8012cc4:	7819      	ldrb	r1, [r3, #0]
 8012cc6:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8012cca:	3338      	adds	r3, #56	@ 0x38
 8012ccc:	443b      	add	r3, r7
 8012cce:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 8012cd2:	f897 0037 	ldrb.w	r0, [r7, #55]	@ 0x37
 8012cd6:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8012cda:	4403      	add	r3, r0
 8012cdc:	4618      	mov	r0, r3
 8012cde:	68fb      	ldr	r3, [r7, #12]
 8012ce0:	4403      	add	r3, r0
 8012ce2:	404a      	eors	r2, r1
 8012ce4:	b2d2      	uxtb	r2, r2
 8012ce6:	701a      	strb	r2, [r3, #0]
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 8012ce8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8012cec:	3301      	adds	r3, #1
 8012cee:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 8012cf2:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8012cf6:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8012cfa:	2a10      	cmp	r2, #16
 8012cfc:	bfa8      	it	ge
 8012cfe:	2210      	movge	r2, #16
 8012d00:	b212      	sxth	r2, r2
 8012d02:	4293      	cmp	r3, r2
 8012d04:	dbd6      	blt.n	8012cb4 <PayloadEncrypt+0xbc>
        }
        size -= 16;
 8012d06:	897b      	ldrh	r3, [r7, #10]
 8012d08:	3b10      	subs	r3, #16
 8012d0a:	b29b      	uxth	r3, r3
 8012d0c:	817b      	strh	r3, [r7, #10]
        bufferIndex += 16;
 8012d0e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8012d12:	3310      	adds	r3, #16
 8012d14:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    while( size > 0 )
 8012d18:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8012d1c:	2b00      	cmp	r3, #0
 8012d1e:	dcb2      	bgt.n	8012c86 <PayloadEncrypt+0x8e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8012d20:	2300      	movs	r3, #0
}
 8012d22:	4618      	mov	r0, r3
 8012d24:	3738      	adds	r7, #56	@ 0x38
 8012d26:	46bd      	mov	sp, r7
 8012d28:	bd80      	pop	{r7, pc}

08012d2a <PrepareB0>:
 * \param [in] fCnt           - Frame counter
 * \param [in,out] b0         - B0 block
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t PrepareB0( uint16_t msgLen, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint8_t* b0 )
{
 8012d2a:	b490      	push	{r4, r7}
 8012d2c:	b082      	sub	sp, #8
 8012d2e:	af00      	add	r7, sp, #0
 8012d30:	4604      	mov	r4, r0
 8012d32:	4608      	mov	r0, r1
 8012d34:	4611      	mov	r1, r2
 8012d36:	461a      	mov	r2, r3
 8012d38:	4623      	mov	r3, r4
 8012d3a:	80fb      	strh	r3, [r7, #6]
 8012d3c:	4603      	mov	r3, r0
 8012d3e:	717b      	strb	r3, [r7, #5]
 8012d40:	460b      	mov	r3, r1
 8012d42:	713b      	strb	r3, [r7, #4]
 8012d44:	4613      	mov	r3, r2
 8012d46:	70fb      	strb	r3, [r7, #3]
    if( b0 == 0 )
 8012d48:	69bb      	ldr	r3, [r7, #24]
 8012d4a:	2b00      	cmp	r3, #0
 8012d4c:	d101      	bne.n	8012d52 <PrepareB0+0x28>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8012d4e:	230a      	movs	r3, #10
 8012d50:	e04e      	b.n	8012df0 <PrepareB0+0xc6>
    }

    b0[0] = 0x49;
 8012d52:	69bb      	ldr	r3, [r7, #24]
 8012d54:	2249      	movs	r2, #73	@ 0x49
 8012d56:	701a      	strb	r2, [r3, #0]
        b0[2] = ( confFCnt >> 8 ) & 0xFF;
    }
    else
#endif /* LORAMAC_VERSION */
    {
        b0[1] = 0x00;
 8012d58:	69bb      	ldr	r3, [r7, #24]
 8012d5a:	3301      	adds	r3, #1
 8012d5c:	2200      	movs	r2, #0
 8012d5e:	701a      	strb	r2, [r3, #0]
        b0[2] = 0x00;
 8012d60:	69bb      	ldr	r3, [r7, #24]
 8012d62:	3302      	adds	r3, #2
 8012d64:	2200      	movs	r2, #0
 8012d66:	701a      	strb	r2, [r3, #0]
    }

    b0[3] = 0x00;
 8012d68:	69bb      	ldr	r3, [r7, #24]
 8012d6a:	3303      	adds	r3, #3
 8012d6c:	2200      	movs	r2, #0
 8012d6e:	701a      	strb	r2, [r3, #0]
    b0[4] = 0x00;
 8012d70:	69bb      	ldr	r3, [r7, #24]
 8012d72:	3304      	adds	r3, #4
 8012d74:	2200      	movs	r2, #0
 8012d76:	701a      	strb	r2, [r3, #0]

    b0[5] = dir;
 8012d78:	69bb      	ldr	r3, [r7, #24]
 8012d7a:	3305      	adds	r3, #5
 8012d7c:	78fa      	ldrb	r2, [r7, #3]
 8012d7e:	701a      	strb	r2, [r3, #0]

    b0[6] = devAddr & 0xFF;
 8012d80:	69bb      	ldr	r3, [r7, #24]
 8012d82:	3306      	adds	r3, #6
 8012d84:	693a      	ldr	r2, [r7, #16]
 8012d86:	b2d2      	uxtb	r2, r2
 8012d88:	701a      	strb	r2, [r3, #0]
    b0[7] = ( devAddr >> 8 ) & 0xFF;
 8012d8a:	693b      	ldr	r3, [r7, #16]
 8012d8c:	0a1a      	lsrs	r2, r3, #8
 8012d8e:	69bb      	ldr	r3, [r7, #24]
 8012d90:	3307      	adds	r3, #7
 8012d92:	b2d2      	uxtb	r2, r2
 8012d94:	701a      	strb	r2, [r3, #0]
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 8012d96:	693b      	ldr	r3, [r7, #16]
 8012d98:	0c1a      	lsrs	r2, r3, #16
 8012d9a:	69bb      	ldr	r3, [r7, #24]
 8012d9c:	3308      	adds	r3, #8
 8012d9e:	b2d2      	uxtb	r2, r2
 8012da0:	701a      	strb	r2, [r3, #0]
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 8012da2:	693b      	ldr	r3, [r7, #16]
 8012da4:	0e1a      	lsrs	r2, r3, #24
 8012da6:	69bb      	ldr	r3, [r7, #24]
 8012da8:	3309      	adds	r3, #9
 8012daa:	b2d2      	uxtb	r2, r2
 8012dac:	701a      	strb	r2, [r3, #0]

    b0[10] = fCnt & 0xFF;
 8012dae:	69bb      	ldr	r3, [r7, #24]
 8012db0:	330a      	adds	r3, #10
 8012db2:	697a      	ldr	r2, [r7, #20]
 8012db4:	b2d2      	uxtb	r2, r2
 8012db6:	701a      	strb	r2, [r3, #0]
    b0[11] = ( fCnt >> 8 ) & 0xFF;
 8012db8:	697b      	ldr	r3, [r7, #20]
 8012dba:	0a1a      	lsrs	r2, r3, #8
 8012dbc:	69bb      	ldr	r3, [r7, #24]
 8012dbe:	330b      	adds	r3, #11
 8012dc0:	b2d2      	uxtb	r2, r2
 8012dc2:	701a      	strb	r2, [r3, #0]
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 8012dc4:	697b      	ldr	r3, [r7, #20]
 8012dc6:	0c1a      	lsrs	r2, r3, #16
 8012dc8:	69bb      	ldr	r3, [r7, #24]
 8012dca:	330c      	adds	r3, #12
 8012dcc:	b2d2      	uxtb	r2, r2
 8012dce:	701a      	strb	r2, [r3, #0]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 8012dd0:	697b      	ldr	r3, [r7, #20]
 8012dd2:	0e1a      	lsrs	r2, r3, #24
 8012dd4:	69bb      	ldr	r3, [r7, #24]
 8012dd6:	330d      	adds	r3, #13
 8012dd8:	b2d2      	uxtb	r2, r2
 8012dda:	701a      	strb	r2, [r3, #0]

    b0[14] = 0x00;
 8012ddc:	69bb      	ldr	r3, [r7, #24]
 8012dde:	330e      	adds	r3, #14
 8012de0:	2200      	movs	r2, #0
 8012de2:	701a      	strb	r2, [r3, #0]

    b0[15] = msgLen & 0xFF;
 8012de4:	69bb      	ldr	r3, [r7, #24]
 8012de6:	330f      	adds	r3, #15
 8012de8:	88fa      	ldrh	r2, [r7, #6]
 8012dea:	b2d2      	uxtb	r2, r2
 8012dec:	701a      	strb	r2, [r3, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 8012dee:	2300      	movs	r3, #0
}
 8012df0:	4618      	mov	r0, r3
 8012df2:	3708      	adds	r7, #8
 8012df4:	46bd      	mov	sp, r7
 8012df6:	bc90      	pop	{r4, r7}
 8012df8:	4770      	bx	lr

08012dfa <ComputeCmacB0>:
 * \param [in] fCnt           - Frame counter
 * \param [out] cmac          - Computed cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t ComputeCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t* cmac )
{
 8012dfa:	b590      	push	{r4, r7, lr}
 8012dfc:	b08b      	sub	sp, #44	@ 0x2c
 8012dfe:	af04      	add	r7, sp, #16
 8012e00:	6078      	str	r0, [r7, #4]
 8012e02:	4608      	mov	r0, r1
 8012e04:	4611      	mov	r1, r2
 8012e06:	461a      	mov	r2, r3
 8012e08:	4603      	mov	r3, r0
 8012e0a:	807b      	strh	r3, [r7, #2]
 8012e0c:	460b      	mov	r3, r1
 8012e0e:	707b      	strb	r3, [r7, #1]
 8012e10:	4613      	mov	r3, r2
 8012e12:	703b      	strb	r3, [r7, #0]
    if( ( msg == 0 ) || ( cmac == 0 ) )
 8012e14:	687b      	ldr	r3, [r7, #4]
 8012e16:	2b00      	cmp	r3, #0
 8012e18:	d002      	beq.n	8012e20 <ComputeCmacB0+0x26>
 8012e1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012e1c:	2b00      	cmp	r3, #0
 8012e1e:	d101      	bne.n	8012e24 <ComputeCmacB0+0x2a>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8012e20:	230a      	movs	r3, #10
 8012e22:	e024      	b.n	8012e6e <ComputeCmacB0+0x74>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 8012e24:	887b      	ldrh	r3, [r7, #2]
 8012e26:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8012e2a:	d901      	bls.n	8012e30 <ComputeCmacB0+0x36>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 8012e2c:	230e      	movs	r3, #14
 8012e2e:	e01e      	b.n	8012e6e <ComputeCmacB0+0x74>
    }

    uint8_t micBuff[MIC_BLOCK_BX_SIZE] ALIGN(4);

    // Initialize the first Block
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 8012e30:	f897 4028 	ldrb.w	r4, [r7, #40]	@ 0x28
 8012e34:	783a      	ldrb	r2, [r7, #0]
 8012e36:	7879      	ldrb	r1, [r7, #1]
 8012e38:	8878      	ldrh	r0, [r7, #2]
 8012e3a:	f107 0308 	add.w	r3, r7, #8
 8012e3e:	9302      	str	r3, [sp, #8]
 8012e40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012e42:	9301      	str	r3, [sp, #4]
 8012e44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012e46:	9300      	str	r3, [sp, #0]
 8012e48:	4623      	mov	r3, r4
 8012e4a:	f7ff ff6e 	bl	8012d2a <PrepareB0>

    if( SecureElementComputeAesCmac( micBuff, msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
 8012e4e:	887a      	ldrh	r2, [r7, #2]
 8012e50:	7879      	ldrb	r1, [r7, #1]
 8012e52:	f107 0008 	add.w	r0, r7, #8
 8012e56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012e58:	9300      	str	r3, [sp, #0]
 8012e5a:	460b      	mov	r3, r1
 8012e5c:	6879      	ldr	r1, [r7, #4]
 8012e5e:	f7f8 fe21 	bl	800baa4 <SecureElementComputeAesCmac>
 8012e62:	4603      	mov	r3, r0
 8012e64:	2b00      	cmp	r3, #0
 8012e66:	d001      	beq.n	8012e6c <ComputeCmacB0+0x72>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8012e68:	230f      	movs	r3, #15
 8012e6a:	e000      	b.n	8012e6e <ComputeCmacB0+0x74>
    }
    return LORAMAC_CRYPTO_SUCCESS;
 8012e6c:	2300      	movs	r3, #0
}
 8012e6e:	4618      	mov	r0, r3
 8012e70:	371c      	adds	r7, #28
 8012e72:	46bd      	mov	sp, r7
 8012e74:	bd90      	pop	{r4, r7, pc}

08012e76 <VerifyCmacB0>:
 * \param [in] fCnt           - Frame counter
 * \param [in] expectedCmac   - Expected cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t VerifyCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t expectedCmac )
{
 8012e76:	b590      	push	{r4, r7, lr}
 8012e78:	b0cd      	sub	sp, #308	@ 0x134
 8012e7a:	af04      	add	r7, sp, #16
 8012e7c:	f507 7490 	add.w	r4, r7, #288	@ 0x120
 8012e80:	f5a4 748e 	sub.w	r4, r4, #284	@ 0x11c
 8012e84:	6020      	str	r0, [r4, #0]
 8012e86:	460c      	mov	r4, r1
 8012e88:	4610      	mov	r0, r2
 8012e8a:	4619      	mov	r1, r3
 8012e8c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8012e90:	f5a3 738f 	sub.w	r3, r3, #286	@ 0x11e
 8012e94:	4622      	mov	r2, r4
 8012e96:	801a      	strh	r2, [r3, #0]
 8012e98:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8012e9c:	f2a3 131f 	subw	r3, r3, #287	@ 0x11f
 8012ea0:	4602      	mov	r2, r0
 8012ea2:	701a      	strb	r2, [r3, #0]
 8012ea4:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8012ea8:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8012eac:	460a      	mov	r2, r1
 8012eae:	701a      	strb	r2, [r3, #0]
    if( msg == 0 )
 8012eb0:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8012eb4:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8012eb8:	681b      	ldr	r3, [r3, #0]
 8012eba:	2b00      	cmp	r3, #0
 8012ebc:	d101      	bne.n	8012ec2 <VerifyCmacB0+0x4c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8012ebe:	230a      	movs	r3, #10
 8012ec0:	e063      	b.n	8012f8a <VerifyCmacB0+0x114>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 8012ec2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8012ec6:	f5a3 738f 	sub.w	r3, r3, #286	@ 0x11e
 8012eca:	881b      	ldrh	r3, [r3, #0]
 8012ecc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8012ed0:	d901      	bls.n	8012ed6 <VerifyCmacB0+0x60>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 8012ed2:	230e      	movs	r3, #14
 8012ed4:	e059      	b.n	8012f8a <VerifyCmacB0+0x114>
    }

    uint8_t micBuff[CRYPTO_BUFFER_SIZE];
    memset1( micBuff, 0, CRYPTO_BUFFER_SIZE );
 8012ed6:	f107 030c 	add.w	r3, r7, #12
 8012eda:	f44f 7288 	mov.w	r2, #272	@ 0x110
 8012ede:	2100      	movs	r1, #0
 8012ee0:	4618      	mov	r0, r3
 8012ee2:	f003 fbe5 	bl	80166b0 <memset1>

    // Initialize the first Block
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 8012ee6:	f897 4130 	ldrb.w	r4, [r7, #304]	@ 0x130
 8012eea:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8012eee:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8012ef2:	781a      	ldrb	r2, [r3, #0]
 8012ef4:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8012ef8:	f2a3 131f 	subw	r3, r3, #287	@ 0x11f
 8012efc:	7819      	ldrb	r1, [r3, #0]
 8012efe:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8012f02:	f5a3 738f 	sub.w	r3, r3, #286	@ 0x11e
 8012f06:	8818      	ldrh	r0, [r3, #0]
 8012f08:	f107 030c 	add.w	r3, r7, #12
 8012f0c:	9302      	str	r3, [sp, #8]
 8012f0e:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8012f12:	9301      	str	r3, [sp, #4]
 8012f14:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8012f18:	9300      	str	r3, [sp, #0]
 8012f1a:	4623      	mov	r3, r4
 8012f1c:	f7ff ff05 	bl	8012d2a <PrepareB0>

    // Copy the given data to the mic computation buffer
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
 8012f20:	f107 030c 	add.w	r3, r7, #12
 8012f24:	3310      	adds	r3, #16
 8012f26:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8012f2a:	f5a2 728f 	sub.w	r2, r2, #286	@ 0x11e
 8012f2e:	8812      	ldrh	r2, [r2, #0]
 8012f30:	f507 7190 	add.w	r1, r7, #288	@ 0x120
 8012f34:	f5a1 718e 	sub.w	r1, r1, #284	@ 0x11c
 8012f38:	6809      	ldr	r1, [r1, #0]
 8012f3a:	4618      	mov	r0, r3
 8012f3c:	f003 fb7d 	bl	801663a <memcpy1>

    SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 8012f40:	2306      	movs	r3, #6
 8012f42:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    retval = SecureElementVerifyAesCmac( micBuff, ( len + MIC_BLOCK_BX_SIZE ), expectedCmac, keyID );
 8012f46:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8012f4a:	f5a3 738f 	sub.w	r3, r3, #286	@ 0x11e
 8012f4e:	881b      	ldrh	r3, [r3, #0]
 8012f50:	3310      	adds	r3, #16
 8012f52:	4619      	mov	r1, r3
 8012f54:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8012f58:	f2a3 131f 	subw	r3, r3, #287	@ 0x11f
 8012f5c:	781b      	ldrb	r3, [r3, #0]
 8012f5e:	f107 000c 	add.w	r0, r7, #12
 8012f62:	f8d7 213c 	ldr.w	r2, [r7, #316]	@ 0x13c
 8012f66:	f7f8 fdb7 	bl	800bad8 <SecureElementVerifyAesCmac>
 8012f6a:	4603      	mov	r3, r0
 8012f6c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

    if( retval == SECURE_ELEMENT_SUCCESS )
 8012f70:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8012f74:	2b00      	cmp	r3, #0
 8012f76:	d101      	bne.n	8012f7c <VerifyCmacB0+0x106>
    {
        return LORAMAC_CRYPTO_SUCCESS;
 8012f78:	2300      	movs	r3, #0
 8012f7a:	e006      	b.n	8012f8a <VerifyCmacB0+0x114>
    }
    else if( retval == SECURE_ELEMENT_FAIL_CMAC )
 8012f7c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8012f80:	2b01      	cmp	r3, #1
 8012f82:	d101      	bne.n	8012f88 <VerifyCmacB0+0x112>
    {
        return LORAMAC_CRYPTO_FAIL_MIC;
 8012f84:	2301      	movs	r3, #1
 8012f86:	e000      	b.n	8012f8a <VerifyCmacB0+0x114>
    }

    return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8012f88:	230f      	movs	r3, #15
}
 8012f8a:	4618      	mov	r0, r3
 8012f8c:	f507 7792 	add.w	r7, r7, #292	@ 0x124
 8012f90:	46bd      	mov	sp, r7
 8012f92:	bd90      	pop	{r4, r7, pc}

08012f94 <GetKeyAddrItem>:
 * \param [in] addrID         - Address identifier
 * \param [out] keyItem       - Key item reference
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t GetKeyAddrItem( AddressIdentifier_t addrID, KeyAddr_t** item )
{
 8012f94:	b480      	push	{r7}
 8012f96:	b085      	sub	sp, #20
 8012f98:	af00      	add	r7, sp, #0
 8012f9a:	4603      	mov	r3, r0
 8012f9c:	6039      	str	r1, [r7, #0]
 8012f9e:	71fb      	strb	r3, [r7, #7]
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 8012fa0:	2300      	movs	r3, #0
 8012fa2:	73fb      	strb	r3, [r7, #15]
 8012fa4:	e011      	b.n	8012fca <GetKeyAddrItem+0x36>
    {
        if( KeyAddrList[i].AddrID == addrID )
 8012fa6:	7bfb      	ldrb	r3, [r7, #15]
 8012fa8:	4a0c      	ldr	r2, [pc, #48]	@ (8012fdc <GetKeyAddrItem+0x48>)
 8012faa:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 8012fae:	79fa      	ldrb	r2, [r7, #7]
 8012fb0:	429a      	cmp	r2, r3
 8012fb2:	d107      	bne.n	8012fc4 <GetKeyAddrItem+0x30>
        {
            *item = &( KeyAddrList[i] );
 8012fb4:	7bfb      	ldrb	r3, [r7, #15]
 8012fb6:	009b      	lsls	r3, r3, #2
 8012fb8:	4a08      	ldr	r2, [pc, #32]	@ (8012fdc <GetKeyAddrItem+0x48>)
 8012fba:	441a      	add	r2, r3
 8012fbc:	683b      	ldr	r3, [r7, #0]
 8012fbe:	601a      	str	r2, [r3, #0]
            return LORAMAC_CRYPTO_SUCCESS;
 8012fc0:	2300      	movs	r3, #0
 8012fc2:	e006      	b.n	8012fd2 <GetKeyAddrItem+0x3e>
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 8012fc4:	7bfb      	ldrb	r3, [r7, #15]
 8012fc6:	3301      	adds	r3, #1
 8012fc8:	73fb      	strb	r3, [r7, #15]
 8012fca:	7bfb      	ldrb	r3, [r7, #15]
 8012fcc:	2b01      	cmp	r3, #1
 8012fce:	d9ea      	bls.n	8012fa6 <GetKeyAddrItem+0x12>
        }
    }
    return LORAMAC_CRYPTO_ERROR_INVALID_ADDR_ID;
 8012fd0:	230c      	movs	r3, #12
}
 8012fd2:	4618      	mov	r0, r3
 8012fd4:	3714      	adds	r7, #20
 8012fd6:	46bd      	mov	sp, r7
 8012fd8:	bc80      	pop	{r7}
 8012fda:	4770      	bx	lr
 8012fdc:	20000100 	.word	0x20000100

08012fe0 <DeriveSessionKey10x>:
 * \param [in] netID          - Network Identifier
 * \param [in] deviceNonce    - Device nonce
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t DeriveSessionKey10x( KeyIdentifier_t keyID, uint32_t joinNonce, uint32_t netID, uint16_t devNonce )
{
 8012fe0:	b580      	push	{r7, lr}
 8012fe2:	b088      	sub	sp, #32
 8012fe4:	af00      	add	r7, sp, #0
 8012fe6:	60b9      	str	r1, [r7, #8]
 8012fe8:	607a      	str	r2, [r7, #4]
 8012fea:	461a      	mov	r2, r3
 8012fec:	4603      	mov	r3, r0
 8012fee:	73fb      	strb	r3, [r7, #15]
 8012ff0:	4613      	mov	r3, r2
 8012ff2:	81bb      	strh	r3, [r7, #12]
    uint8_t compBase[16] = { 0 };
 8012ff4:	2300      	movs	r3, #0
 8012ff6:	613b      	str	r3, [r7, #16]
 8012ff8:	f107 0314 	add.w	r3, r7, #20
 8012ffc:	2200      	movs	r2, #0
 8012ffe:	601a      	str	r2, [r3, #0]
 8013000:	605a      	str	r2, [r3, #4]
 8013002:	609a      	str	r2, [r3, #8]

    switch( keyID )
 8013004:	7bfb      	ldrb	r3, [r7, #15]
 8013006:	2b08      	cmp	r3, #8
 8013008:	d002      	beq.n	8013010 <DeriveSessionKey10x+0x30>
 801300a:	2b09      	cmp	r3, #9
 801300c:	d003      	beq.n	8013016 <DeriveSessionKey10x+0x36>
 801300e:	e005      	b.n	801301c <DeriveSessionKey10x+0x3c>
        case S_NWK_S_INT_KEY:
        case NWK_S_ENC_KEY:
#else
        case NWK_S_KEY:
#endif /* LORAMAC_VERSION */
            compBase[0] = 0x01;
 8013010:	2301      	movs	r3, #1
 8013012:	743b      	strb	r3, [r7, #16]
            break;
 8013014:	e004      	b.n	8013020 <DeriveSessionKey10x+0x40>
        case APP_S_KEY:
            compBase[0] = 0x02;
 8013016:	2302      	movs	r3, #2
 8013018:	743b      	strb	r3, [r7, #16]
            break;
 801301a:	e001      	b.n	8013020 <DeriveSessionKey10x+0x40>
        default:
            return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 801301c:	230b      	movs	r3, #11
 801301e:	e02a      	b.n	8013076 <DeriveSessionKey10x+0x96>
    }

    compBase[1] = ( uint8_t )( ( joinNonce >> 0 ) & 0xFF );
 8013020:	68bb      	ldr	r3, [r7, #8]
 8013022:	b2db      	uxtb	r3, r3
 8013024:	747b      	strb	r3, [r7, #17]
    compBase[2] = ( uint8_t )( ( joinNonce >> 8 ) & 0xFF );
 8013026:	68bb      	ldr	r3, [r7, #8]
 8013028:	0a1b      	lsrs	r3, r3, #8
 801302a:	b2db      	uxtb	r3, r3
 801302c:	74bb      	strb	r3, [r7, #18]
    compBase[3] = ( uint8_t )( ( joinNonce >> 16 ) & 0xFF );
 801302e:	68bb      	ldr	r3, [r7, #8]
 8013030:	0c1b      	lsrs	r3, r3, #16
 8013032:	b2db      	uxtb	r3, r3
 8013034:	74fb      	strb	r3, [r7, #19]

    compBase[4] = ( uint8_t )( ( netID >> 0 ) & 0xFF );
 8013036:	687b      	ldr	r3, [r7, #4]
 8013038:	b2db      	uxtb	r3, r3
 801303a:	753b      	strb	r3, [r7, #20]
    compBase[5] = ( uint8_t )( ( netID >> 8 ) & 0xFF );
 801303c:	687b      	ldr	r3, [r7, #4]
 801303e:	0a1b      	lsrs	r3, r3, #8
 8013040:	b2db      	uxtb	r3, r3
 8013042:	757b      	strb	r3, [r7, #21]
    compBase[6] = ( uint8_t )( ( netID >> 16 ) & 0xFF );
 8013044:	687b      	ldr	r3, [r7, #4]
 8013046:	0c1b      	lsrs	r3, r3, #16
 8013048:	b2db      	uxtb	r3, r3
 801304a:	75bb      	strb	r3, [r7, #22]

    compBase[7] = ( uint8_t )( ( devNonce >> 0 ) & 0xFF );
 801304c:	89bb      	ldrh	r3, [r7, #12]
 801304e:	b2db      	uxtb	r3, r3
 8013050:	75fb      	strb	r3, [r7, #23]
    compBase[8] = ( uint8_t )( ( devNonce >> 8 ) & 0xFF );
 8013052:	89bb      	ldrh	r3, [r7, #12]
 8013054:	0a1b      	lsrs	r3, r3, #8
 8013056:	b29b      	uxth	r3, r3
 8013058:	b2db      	uxtb	r3, r3
 801305a:	763b      	strb	r3, [r7, #24]

    if( SecureElementDeriveAndStoreKey( compBase, NWK_KEY, keyID ) != SECURE_ELEMENT_SUCCESS )
 801305c:	7bfa      	ldrb	r2, [r7, #15]
 801305e:	f107 0310 	add.w	r3, r7, #16
 8013062:	2101      	movs	r1, #1
 8013064:	4618      	mov	r0, r3
 8013066:	f7f8 fde3 	bl	800bc30 <SecureElementDeriveAndStoreKey>
 801306a:	4603      	mov	r3, r0
 801306c:	2b00      	cmp	r3, #0
 801306e:	d001      	beq.n	8013074 <DeriveSessionKey10x+0x94>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8013070:	230f      	movs	r3, #15
 8013072:	e000      	b.n	8013076 <DeriveSessionKey10x+0x96>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8013074:	2300      	movs	r3, #0
}
 8013076:	4618      	mov	r0, r3
 8013078:	3720      	adds	r7, #32
 801307a:	46bd      	mov	sp, r7
 801307c:	bd80      	pop	{r7, pc}
	...

08013080 <GetLastFcntDown>:
 * \param [in]    lastDown     - Last downlink counter value
 *
 * \retval                     - Status of the operation
 */
static LoRaMacCryptoStatus_t GetLastFcntDown( FCntIdentifier_t fCntID, uint32_t* lastDown )
{
 8013080:	b480      	push	{r7}
 8013082:	b083      	sub	sp, #12
 8013084:	af00      	add	r7, sp, #0
 8013086:	4603      	mov	r3, r0
 8013088:	6039      	str	r1, [r7, #0]
 801308a:	71fb      	strb	r3, [r7, #7]
    if( lastDown == NULL )
 801308c:	683b      	ldr	r3, [r7, #0]
 801308e:	2b00      	cmp	r3, #0
 8013090:	d101      	bne.n	8013096 <GetLastFcntDown+0x16>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8013092:	230a      	movs	r3, #10
 8013094:	e029      	b.n	80130ea <GetLastFcntDown+0x6a>
    }
    switch( fCntID )
 8013096:	79fb      	ldrb	r3, [r7, #7]
 8013098:	3b01      	subs	r3, #1
 801309a:	2b03      	cmp	r3, #3
 801309c:	d822      	bhi.n	80130e4 <GetLastFcntDown+0x64>
 801309e:	a201      	add	r2, pc, #4	@ (adr r2, 80130a4 <GetLastFcntDown+0x24>)
 80130a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80130a4:	080130b5 	.word	0x080130b5
 80130a8:	080130c1 	.word	0x080130c1
 80130ac:	080130cd 	.word	0x080130cd
 80130b0:	080130d9 	.word	0x080130d9
    {
        case N_FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.NFCntDown;
 80130b4:	4b0f      	ldr	r3, [pc, #60]	@ (80130f4 <GetLastFcntDown+0x74>)
 80130b6:	681b      	ldr	r3, [r3, #0]
 80130b8:	691a      	ldr	r2, [r3, #16]
 80130ba:	683b      	ldr	r3, [r7, #0]
 80130bc:	601a      	str	r2, [r3, #0]
            break;
 80130be:	e013      	b.n	80130e8 <GetLastFcntDown+0x68>
        case A_FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.AFCntDown;
 80130c0:	4b0c      	ldr	r3, [pc, #48]	@ (80130f4 <GetLastFcntDown+0x74>)
 80130c2:	681b      	ldr	r3, [r3, #0]
 80130c4:	695a      	ldr	r2, [r3, #20]
 80130c6:	683b      	ldr	r3, [r7, #0]
 80130c8:	601a      	str	r2, [r3, #0]
            break;
 80130ca:	e00d      	b.n	80130e8 <GetLastFcntDown+0x68>
        case FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.FCntDown;
 80130cc:	4b09      	ldr	r3, [pc, #36]	@ (80130f4 <GetLastFcntDown+0x74>)
 80130ce:	681b      	ldr	r3, [r3, #0]
 80130d0:	699a      	ldr	r2, [r3, #24]
 80130d2:	683b      	ldr	r3, [r7, #0]
 80130d4:	601a      	str	r2, [r3, #0]
            break;
 80130d6:	e007      	b.n	80130e8 <GetLastFcntDown+0x68>
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MC_FCNT_DOWN_0:
            *lastDown = CryptoNvm->FCntList.McFCntDown[0];
 80130d8:	4b06      	ldr	r3, [pc, #24]	@ (80130f4 <GetLastFcntDown+0x74>)
 80130da:	681b      	ldr	r3, [r3, #0]
 80130dc:	69da      	ldr	r2, [r3, #28]
 80130de:	683b      	ldr	r3, [r7, #0]
 80130e0:	601a      	str	r2, [r3, #0]
            break;
 80130e2:	e001      	b.n	80130e8 <GetLastFcntDown+0x68>
        case MC_FCNT_DOWN_3:
            *lastDown = CryptoNvm->FCntList.McFCntDown[3];
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
 80130e4:	2305      	movs	r3, #5
 80130e6:	e000      	b.n	80130ea <GetLastFcntDown+0x6a>
    }
    return LORAMAC_CRYPTO_SUCCESS;
 80130e8:	2300      	movs	r3, #0
}
 80130ea:	4618      	mov	r0, r3
 80130ec:	370c      	adds	r7, #12
 80130ee:	46bd      	mov	sp, r7
 80130f0:	bc80      	pop	{r7}
 80130f2:	4770      	bx	lr
 80130f4:	200013dc 	.word	0x200013dc

080130f8 <CheckFCntDown>:
 * \param [in]    currentDown  - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static bool CheckFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 80130f8:	b580      	push	{r7, lr}
 80130fa:	b084      	sub	sp, #16
 80130fc:	af00      	add	r7, sp, #0
 80130fe:	4603      	mov	r3, r0
 8013100:	6039      	str	r1, [r7, #0]
 8013102:	71fb      	strb	r3, [r7, #7]
    uint32_t lastDown = 0;
 8013104:	2300      	movs	r3, #0
 8013106:	60fb      	str	r3, [r7, #12]
    if( GetLastFcntDown( fCntID, &lastDown ) != LORAMAC_CRYPTO_SUCCESS )
 8013108:	f107 020c 	add.w	r2, r7, #12
 801310c:	79fb      	ldrb	r3, [r7, #7]
 801310e:	4611      	mov	r1, r2
 8013110:	4618      	mov	r0, r3
 8013112:	f7ff ffb5 	bl	8013080 <GetLastFcntDown>
 8013116:	4603      	mov	r3, r0
 8013118:	2b00      	cmp	r3, #0
 801311a:	d001      	beq.n	8013120 <CheckFCntDown+0x28>
    {
        return false;
 801311c:	2300      	movs	r3, #0
 801311e:	e00a      	b.n	8013136 <CheckFCntDown+0x3e>
    }
    if( ( currentDown > lastDown ) ||
 8013120:	68fb      	ldr	r3, [r7, #12]
 8013122:	683a      	ldr	r2, [r7, #0]
 8013124:	429a      	cmp	r2, r3
 8013126:	d803      	bhi.n	8013130 <CheckFCntDown+0x38>
        // For LoRaWAN 1.0.X only. Allow downlink frames of 0
        ( lastDown == FCNT_DOWN_INITIAL_VALUE ) )
 8013128:	68fb      	ldr	r3, [r7, #12]
    if( ( currentDown > lastDown ) ||
 801312a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801312e:	d101      	bne.n	8013134 <CheckFCntDown+0x3c>
    {
        return true;
 8013130:	2301      	movs	r3, #1
 8013132:	e000      	b.n	8013136 <CheckFCntDown+0x3e>
    }
    else
    {
        return false;
 8013134:	2300      	movs	r3, #0
    }
}
 8013136:	4618      	mov	r0, r3
 8013138:	3710      	adds	r7, #16
 801313a:	46bd      	mov	sp, r7
 801313c:	bd80      	pop	{r7, pc}
	...

08013140 <UpdateFCntDown>:
 * \param [in]    currentDown   - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static void UpdateFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 8013140:	b480      	push	{r7}
 8013142:	b083      	sub	sp, #12
 8013144:	af00      	add	r7, sp, #0
 8013146:	4603      	mov	r3, r0
 8013148:	6039      	str	r1, [r7, #0]
 801314a:	71fb      	strb	r3, [r7, #7]
    switch( fCntID )
 801314c:	79fb      	ldrb	r3, [r7, #7]
 801314e:	3b01      	subs	r3, #1
 8013150:	2b03      	cmp	r3, #3
 8013152:	d82b      	bhi.n	80131ac <UpdateFCntDown+0x6c>
 8013154:	a201      	add	r2, pc, #4	@ (adr r2, 801315c <UpdateFCntDown+0x1c>)
 8013156:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801315a:	bf00      	nop
 801315c:	0801316d 	.word	0x0801316d
 8013160:	0801317f 	.word	0x0801317f
 8013164:	08013191 	.word	0x08013191
 8013168:	080131a3 	.word	0x080131a3
    {
        case N_FCNT_DOWN:
            CryptoNvm->FCntList.NFCntDown = currentDown;
 801316c:	4b12      	ldr	r3, [pc, #72]	@ (80131b8 <UpdateFCntDown+0x78>)
 801316e:	681b      	ldr	r3, [r3, #0]
 8013170:	683a      	ldr	r2, [r7, #0]
 8013172:	611a      	str	r2, [r3, #16]
            CryptoNvm->LastDownFCnt = currentDown;
 8013174:	4b10      	ldr	r3, [pc, #64]	@ (80131b8 <UpdateFCntDown+0x78>)
 8013176:	681b      	ldr	r3, [r3, #0]
 8013178:	683a      	ldr	r2, [r7, #0]
 801317a:	621a      	str	r2, [r3, #32]
            break;
 801317c:	e017      	b.n	80131ae <UpdateFCntDown+0x6e>
        case A_FCNT_DOWN:
            CryptoNvm->FCntList.AFCntDown = currentDown;
 801317e:	4b0e      	ldr	r3, [pc, #56]	@ (80131b8 <UpdateFCntDown+0x78>)
 8013180:	681b      	ldr	r3, [r3, #0]
 8013182:	683a      	ldr	r2, [r7, #0]
 8013184:	615a      	str	r2, [r3, #20]
            CryptoNvm->LastDownFCnt = currentDown;
 8013186:	4b0c      	ldr	r3, [pc, #48]	@ (80131b8 <UpdateFCntDown+0x78>)
 8013188:	681b      	ldr	r3, [r3, #0]
 801318a:	683a      	ldr	r2, [r7, #0]
 801318c:	621a      	str	r2, [r3, #32]
            break;
 801318e:	e00e      	b.n	80131ae <UpdateFCntDown+0x6e>
        case FCNT_DOWN:
            CryptoNvm->FCntList.FCntDown = currentDown;
 8013190:	4b09      	ldr	r3, [pc, #36]	@ (80131b8 <UpdateFCntDown+0x78>)
 8013192:	681b      	ldr	r3, [r3, #0]
 8013194:	683a      	ldr	r2, [r7, #0]
 8013196:	619a      	str	r2, [r3, #24]
            CryptoNvm->LastDownFCnt = currentDown;
 8013198:	4b07      	ldr	r3, [pc, #28]	@ (80131b8 <UpdateFCntDown+0x78>)
 801319a:	681b      	ldr	r3, [r3, #0]
 801319c:	683a      	ldr	r2, [r7, #0]
 801319e:	621a      	str	r2, [r3, #32]
            break;
 80131a0:	e005      	b.n	80131ae <UpdateFCntDown+0x6e>
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MC_FCNT_DOWN_0:
            CryptoNvm->FCntList.McFCntDown[0] = currentDown;
 80131a2:	4b05      	ldr	r3, [pc, #20]	@ (80131b8 <UpdateFCntDown+0x78>)
 80131a4:	681b      	ldr	r3, [r3, #0]
 80131a6:	683a      	ldr	r2, [r7, #0]
 80131a8:	61da      	str	r2, [r3, #28]
            break;
 80131aa:	e000      	b.n	80131ae <UpdateFCntDown+0x6e>
        case MC_FCNT_DOWN_3:
            CryptoNvm->FCntList.McFCntDown[3] = currentDown;
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            break;
 80131ac:	bf00      	nop
    }
}
 80131ae:	bf00      	nop
 80131b0:	370c      	adds	r7, #12
 80131b2:	46bd      	mov	sp, r7
 80131b4:	bc80      	pop	{r7}
 80131b6:	4770      	bx	lr
 80131b8:	200013dc 	.word	0x200013dc

080131bc <ResetFCnts>:

/*!
 * Resets the frame counters
 */
static void ResetFCnts( void )
{
 80131bc:	b480      	push	{r7}
 80131be:	b083      	sub	sp, #12
 80131c0:	af00      	add	r7, sp, #0
    CryptoNvm->FCntList.FCntUp = 0;
 80131c2:	4b18      	ldr	r3, [pc, #96]	@ (8013224 <ResetFCnts+0x68>)
 80131c4:	681b      	ldr	r3, [r3, #0]
 80131c6:	2200      	movs	r2, #0
 80131c8:	60da      	str	r2, [r3, #12]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITIAL_VALUE;
 80131ca:	4b16      	ldr	r3, [pc, #88]	@ (8013224 <ResetFCnts+0x68>)
 80131cc:	681b      	ldr	r3, [r3, #0]
 80131ce:	f04f 32ff 	mov.w	r2, #4294967295
 80131d2:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITIAL_VALUE;
 80131d4:	4b13      	ldr	r3, [pc, #76]	@ (8013224 <ResetFCnts+0x68>)
 80131d6:	681b      	ldr	r3, [r3, #0]
 80131d8:	f04f 32ff 	mov.w	r2, #4294967295
 80131dc:	615a      	str	r2, [r3, #20]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITIAL_VALUE;
 80131de:	4b11      	ldr	r3, [pc, #68]	@ (8013224 <ResetFCnts+0x68>)
 80131e0:	681b      	ldr	r3, [r3, #0]
 80131e2:	f04f 32ff 	mov.w	r2, #4294967295
 80131e6:	619a      	str	r2, [r3, #24]
    CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.FCntDown;
 80131e8:	4b0e      	ldr	r3, [pc, #56]	@ (8013224 <ResetFCnts+0x68>)
 80131ea:	681a      	ldr	r2, [r3, #0]
 80131ec:	4b0d      	ldr	r3, [pc, #52]	@ (8013224 <ResetFCnts+0x68>)
 80131ee:	681b      	ldr	r3, [r3, #0]
 80131f0:	6992      	ldr	r2, [r2, #24]
 80131f2:	621a      	str	r2, [r3, #32]

    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 80131f4:	2300      	movs	r3, #0
 80131f6:	607b      	str	r3, [r7, #4]
 80131f8:	e00b      	b.n	8013212 <ResetFCnts+0x56>
    {
        CryptoNvm->FCntList.McFCntDown[i] = FCNT_DOWN_INITIAL_VALUE;
 80131fa:	4b0a      	ldr	r3, [pc, #40]	@ (8013224 <ResetFCnts+0x68>)
 80131fc:	681a      	ldr	r2, [r3, #0]
 80131fe:	687b      	ldr	r3, [r7, #4]
 8013200:	3306      	adds	r3, #6
 8013202:	009b      	lsls	r3, r3, #2
 8013204:	4413      	add	r3, r2
 8013206:	f04f 32ff 	mov.w	r2, #4294967295
 801320a:	605a      	str	r2, [r3, #4]
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 801320c:	687b      	ldr	r3, [r7, #4]
 801320e:	3301      	adds	r3, #1
 8013210:	607b      	str	r3, [r7, #4]
 8013212:	687b      	ldr	r3, [r7, #4]
 8013214:	2b00      	cmp	r3, #0
 8013216:	ddf0      	ble.n	80131fa <ResetFCnts+0x3e>
    }
}
 8013218:	bf00      	nop
 801321a:	bf00      	nop
 801321c:	370c      	adds	r7, #12
 801321e:	46bd      	mov	sp, r7
 8013220:	bc80      	pop	{r7}
 8013222:	4770      	bx	lr
 8013224:	200013dc 	.word	0x200013dc

08013228 <IsJoinNonce10xOk>:

static bool IsJoinNonce10xOk( uint32_t joinNonce )
{
 8013228:	b480      	push	{r7}
 801322a:	b083      	sub	sp, #12
 801322c:	af00      	add	r7, sp, #0
 801322e:	6078      	str	r0, [r7, #4]
#if( USE_10X_JOIN_NONCE_COUNTER_CHECK == 1 )
    // Check if the JoinNonce is greater as the previous one
    return ( joinNonce > CryptoNvm->JoinNonce ) ? true : false;
 8013230:	4b06      	ldr	r3, [pc, #24]	@ (801324c <IsJoinNonce10xOk+0x24>)
 8013232:	681b      	ldr	r3, [r3, #0]
 8013234:	689b      	ldr	r3, [r3, #8]
 8013236:	687a      	ldr	r2, [r7, #4]
 8013238:	429a      	cmp	r2, r3
 801323a:	bf8c      	ite	hi
 801323c:	2301      	movhi	r3, #1
 801323e:	2300      	movls	r3, #0
 8013240:	b2db      	uxtb	r3, r3
#else
    // Check if the JoinNonce is different from the previous one
    return( joinNonce != CryptoNvm->JoinNonce ) ? true : false;
#endif
}
 8013242:	4618      	mov	r0, r3
 8013244:	370c      	adds	r7, #12
 8013246:	46bd      	mov	sp, r7
 8013248:	bc80      	pop	{r7}
 801324a:	4770      	bx	lr
 801324c:	200013dc 	.word	0x200013dc

08013250 <LoRaMacCryptoInit>:

/*
 *  API functions
 */
LoRaMacCryptoStatus_t LoRaMacCryptoInit( LoRaMacCryptoNvmData_t* nvm )
{
 8013250:	b580      	push	{r7, lr}
 8013252:	b082      	sub	sp, #8
 8013254:	af00      	add	r7, sp, #0
 8013256:	6078      	str	r0, [r7, #4]
    if( nvm == NULL )
 8013258:	687b      	ldr	r3, [r7, #4]
 801325a:	2b00      	cmp	r3, #0
 801325c:	d101      	bne.n	8013262 <LoRaMacCryptoInit+0x12>
    {
        return LORAMAC_CRYPTO_FAIL_PARAM;
 801325e:	2309      	movs	r3, #9
 8013260:	e01c      	b.n	801329c <LoRaMacCryptoInit+0x4c>
    }

    // Assign non volatile context
    CryptoNvm = nvm;
 8013262:	4a10      	ldr	r2, [pc, #64]	@ (80132a4 <LoRaMacCryptoInit+0x54>)
 8013264:	687b      	ldr	r3, [r7, #4]
 8013266:	6013      	str	r3, [r2, #0]

    // Initialize with default
    memset1( ( uint8_t* )CryptoNvm, 0, sizeof( LoRaMacCryptoNvmData_t ) );
 8013268:	4b0e      	ldr	r3, [pc, #56]	@ (80132a4 <LoRaMacCryptoInit+0x54>)
 801326a:	681b      	ldr	r3, [r3, #0]
 801326c:	2228      	movs	r2, #40	@ 0x28
 801326e:	2100      	movs	r1, #0
 8013270:	4618      	mov	r0, r3
 8013272:	f003 fa1d 	bl	80166b0 <memset1>

    // Set default LoRaWAN version
    CryptoNvm->LrWanVersion.Fields.Major = 1;
 8013276:	4b0b      	ldr	r3, [pc, #44]	@ (80132a4 <LoRaMacCryptoInit+0x54>)
 8013278:	681b      	ldr	r3, [r3, #0]
 801327a:	2201      	movs	r2, #1
 801327c:	70da      	strb	r2, [r3, #3]
    CryptoNvm->LrWanVersion.Fields.Minor = 1;
 801327e:	4b09      	ldr	r3, [pc, #36]	@ (80132a4 <LoRaMacCryptoInit+0x54>)
 8013280:	681b      	ldr	r3, [r3, #0]
 8013282:	2201      	movs	r2, #1
 8013284:	709a      	strb	r2, [r3, #2]
    CryptoNvm->LrWanVersion.Fields.Patch = 1;
 8013286:	4b07      	ldr	r3, [pc, #28]	@ (80132a4 <LoRaMacCryptoInit+0x54>)
 8013288:	681b      	ldr	r3, [r3, #0]
 801328a:	2201      	movs	r2, #1
 801328c:	705a      	strb	r2, [r3, #1]
    CryptoNvm->LrWanVersion.Fields.Revision = 0;
 801328e:	4b05      	ldr	r3, [pc, #20]	@ (80132a4 <LoRaMacCryptoInit+0x54>)
 8013290:	681b      	ldr	r3, [r3, #0]
 8013292:	2200      	movs	r2, #0
 8013294:	701a      	strb	r2, [r3, #0]

    // Reset frame counters
    ResetFCnts( );
 8013296:	f7ff ff91 	bl	80131bc <ResetFCnts>

    return LORAMAC_CRYPTO_SUCCESS;
 801329a:	2300      	movs	r3, #0
}
 801329c:	4618      	mov	r0, r3
 801329e:	3708      	adds	r7, #8
 80132a0:	46bd      	mov	sp, r7
 80132a2:	bd80      	pop	{r7, pc}
 80132a4:	200013dc 	.word	0x200013dc

080132a8 <LoRaMacCryptoSetLrWanVersion>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetLrWanVersion( Version_t version )
{
 80132a8:	b480      	push	{r7}
 80132aa:	b083      	sub	sp, #12
 80132ac:	af00      	add	r7, sp, #0
 80132ae:	6078      	str	r0, [r7, #4]
    CryptoNvm->LrWanVersion = version;
 80132b0:	4b04      	ldr	r3, [pc, #16]	@ (80132c4 <LoRaMacCryptoSetLrWanVersion+0x1c>)
 80132b2:	681b      	ldr	r3, [r3, #0]
 80132b4:	687a      	ldr	r2, [r7, #4]
 80132b6:	601a      	str	r2, [r3, #0]
    return LORAMAC_CRYPTO_SUCCESS;
 80132b8:	2300      	movs	r3, #0
}
 80132ba:	4618      	mov	r0, r3
 80132bc:	370c      	adds	r7, #12
 80132be:	46bd      	mov	sp, r7
 80132c0:	bc80      	pop	{r7}
 80132c2:	4770      	bx	lr
 80132c4:	200013dc 	.word	0x200013dc

080132c8 <LoRaMacCryptoGetFCntUp>:

LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntUp( uint32_t* currentUp )
{
 80132c8:	b480      	push	{r7}
 80132ca:	b083      	sub	sp, #12
 80132cc:	af00      	add	r7, sp, #0
 80132ce:	6078      	str	r0, [r7, #4]
    if( currentUp == NULL )
 80132d0:	687b      	ldr	r3, [r7, #4]
 80132d2:	2b00      	cmp	r3, #0
 80132d4:	d101      	bne.n	80132da <LoRaMacCryptoGetFCntUp+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80132d6:	230a      	movs	r3, #10
 80132d8:	e006      	b.n	80132e8 <LoRaMacCryptoGetFCntUp+0x20>
    }

    *currentUp = CryptoNvm->FCntList.FCntUp + 1;
 80132da:	4b06      	ldr	r3, [pc, #24]	@ (80132f4 <LoRaMacCryptoGetFCntUp+0x2c>)
 80132dc:	681b      	ldr	r3, [r3, #0]
 80132de:	68db      	ldr	r3, [r3, #12]
 80132e0:	1c5a      	adds	r2, r3, #1
 80132e2:	687b      	ldr	r3, [r7, #4]
 80132e4:	601a      	str	r2, [r3, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 80132e6:	2300      	movs	r3, #0
}
 80132e8:	4618      	mov	r0, r3
 80132ea:	370c      	adds	r7, #12
 80132ec:	46bd      	mov	sp, r7
 80132ee:	bc80      	pop	{r7}
 80132f0:	4770      	bx	lr
 80132f2:	bf00      	nop
 80132f4:	200013dc 	.word	0x200013dc

080132f8 <LoRaMacCryptoGetFCntDown>:
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntDown( FCntIdentifier_t fCntID, uint16_t maxFCntGap, uint32_t frameFcnt, uint32_t* currentDown )
{
 80132f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80132fc:	b08a      	sub	sp, #40	@ 0x28
 80132fe:	af00      	add	r7, sp, #0
 8013300:	613a      	str	r2, [r7, #16]
 8013302:	60fb      	str	r3, [r7, #12]
 8013304:	4603      	mov	r3, r0
 8013306:	75fb      	strb	r3, [r7, #23]
 8013308:	460b      	mov	r3, r1
 801330a:	82bb      	strh	r3, [r7, #20]
    uint32_t lastDown = 0;
 801330c:	2300      	movs	r3, #0
 801330e:	61fb      	str	r3, [r7, #28]
    int32_t fCntDiff = 0;
 8013310:	2300      	movs	r3, #0
 8013312:	627b      	str	r3, [r7, #36]	@ 0x24
    LoRaMacCryptoStatus_t cryptoStatus = LORAMAC_CRYPTO_ERROR;
 8013314:	2313      	movs	r3, #19
 8013316:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

    if( currentDown == NULL )
 801331a:	68fb      	ldr	r3, [r7, #12]
 801331c:	2b00      	cmp	r3, #0
 801331e:	d101      	bne.n	8013324 <LoRaMacCryptoGetFCntDown+0x2c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8013320:	230a      	movs	r3, #10
 8013322:	e057      	b.n	80133d4 <LoRaMacCryptoGetFCntDown+0xdc>
    }

    cryptoStatus = GetLastFcntDown( fCntID, &lastDown );
 8013324:	f107 021c 	add.w	r2, r7, #28
 8013328:	7dfb      	ldrb	r3, [r7, #23]
 801332a:	4611      	mov	r1, r2
 801332c:	4618      	mov	r0, r3
 801332e:	f7ff fea7 	bl	8013080 <GetLastFcntDown>
 8013332:	4603      	mov	r3, r0
 8013334:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    if( cryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 8013338:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801333c:	2b00      	cmp	r3, #0
 801333e:	d002      	beq.n	8013346 <LoRaMacCryptoGetFCntDown+0x4e>
    {
        return cryptoStatus;
 8013340:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8013344:	e046      	b.n	80133d4 <LoRaMacCryptoGetFCntDown+0xdc>
    }

    // For LoRaWAN 1.0.X only, allow downlink frames of 0
    if( lastDown == FCNT_DOWN_INITIAL_VALUE )
 8013346:	69fb      	ldr	r3, [r7, #28]
 8013348:	f1b3 3fff 	cmp.w	r3, #4294967295
 801334c:	d103      	bne.n	8013356 <LoRaMacCryptoGetFCntDown+0x5e>
    {
        *currentDown = frameFcnt;
 801334e:	68fb      	ldr	r3, [r7, #12]
 8013350:	693a      	ldr	r2, [r7, #16]
 8013352:	601a      	str	r2, [r3, #0]
 8013354:	e01e      	b.n	8013394 <LoRaMacCryptoGetFCntDown+0x9c>
    }
    else
    {
        // Add difference, consider roll-over
        fCntDiff = ( int32_t )( ( int64_t )frameFcnt - ( int64_t )( lastDown & 0x0000FFFF ) );
 8013356:	69fb      	ldr	r3, [r7, #28]
 8013358:	b29b      	uxth	r3, r3
 801335a:	693a      	ldr	r2, [r7, #16]
 801335c:	1ad3      	subs	r3, r2, r3
 801335e:	627b      	str	r3, [r7, #36]	@ 0x24

        if( fCntDiff > 0 )
 8013360:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013362:	2b00      	cmp	r3, #0
 8013364:	dd05      	ble.n	8013372 <LoRaMacCryptoGetFCntDown+0x7a>
        {  // Positive difference
            *currentDown = lastDown + fCntDiff;
 8013366:	69fa      	ldr	r2, [r7, #28]
 8013368:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801336a:	441a      	add	r2, r3
 801336c:	68fb      	ldr	r3, [r7, #12]
 801336e:	601a      	str	r2, [r3, #0]
 8013370:	e010      	b.n	8013394 <LoRaMacCryptoGetFCntDown+0x9c>
        }
        else if( fCntDiff == 0 )
 8013372:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013374:	2b00      	cmp	r3, #0
 8013376:	d104      	bne.n	8013382 <LoRaMacCryptoGetFCntDown+0x8a>
        {  // Duplicate FCnt value, keep the current value.
            *currentDown = lastDown;
 8013378:	69fa      	ldr	r2, [r7, #28]
 801337a:	68fb      	ldr	r3, [r7, #12]
 801337c:	601a      	str	r2, [r3, #0]
            return LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED;
 801337e:	2307      	movs	r3, #7
 8013380:	e028      	b.n	80133d4 <LoRaMacCryptoGetFCntDown+0xdc>
        }
        else
        {  // Negative difference, assume a roll-over of one uint16_t
            *currentDown = ( lastDown & 0xFFFF0000 ) + 0x10000 + frameFcnt;
 8013382:	69fb      	ldr	r3, [r7, #28]
 8013384:	0c1b      	lsrs	r3, r3, #16
 8013386:	041b      	lsls	r3, r3, #16
 8013388:	693a      	ldr	r2, [r7, #16]
 801338a:	4413      	add	r3, r2
 801338c:	f503 3280 	add.w	r2, r3, #65536	@ 0x10000
 8013390:	68fb      	ldr	r3, [r7, #12]
 8013392:	601a      	str	r2, [r3, #0]
        }
    }

    // For LoRaWAN 1.0.X only, check maxFCntGap
    if( CryptoNvm->LrWanVersion.Fields.Minor == 0 )
 8013394:	4b12      	ldr	r3, [pc, #72]	@ (80133e0 <LoRaMacCryptoGetFCntDown+0xe8>)
 8013396:	681b      	ldr	r3, [r3, #0]
 8013398:	789b      	ldrb	r3, [r3, #2]
 801339a:	2b00      	cmp	r3, #0
 801339c:	d119      	bne.n	80133d2 <LoRaMacCryptoGetFCntDown+0xda>
    {
        if( ( ( int64_t )*currentDown - ( int64_t )lastDown ) >= maxFCntGap )
 801339e:	68fb      	ldr	r3, [r7, #12]
 80133a0:	681b      	ldr	r3, [r3, #0]
 80133a2:	2200      	movs	r2, #0
 80133a4:	603b      	str	r3, [r7, #0]
 80133a6:	607a      	str	r2, [r7, #4]
 80133a8:	69fb      	ldr	r3, [r7, #28]
 80133aa:	2200      	movs	r2, #0
 80133ac:	469a      	mov	sl, r3
 80133ae:	4693      	mov	fp, r2
 80133b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80133b4:	4611      	mov	r1, r2
 80133b6:	ebb1 040a 	subs.w	r4, r1, sl
 80133ba:	eb63 050b 	sbc.w	r5, r3, fp
 80133be:	8abb      	ldrh	r3, [r7, #20]
 80133c0:	2200      	movs	r2, #0
 80133c2:	4698      	mov	r8, r3
 80133c4:	4691      	mov	r9, r2
 80133c6:	4544      	cmp	r4, r8
 80133c8:	eb75 0309 	sbcs.w	r3, r5, r9
 80133cc:	db01      	blt.n	80133d2 <LoRaMacCryptoGetFCntDown+0xda>
        {
            return LORAMAC_CRYPTO_FAIL_MAX_GAP_FCNT;
 80133ce:	2308      	movs	r3, #8
 80133d0:	e000      	b.n	80133d4 <LoRaMacCryptoGetFCntDown+0xdc>
        }
    }

    return LORAMAC_CRYPTO_SUCCESS;
 80133d2:	2300      	movs	r3, #0
}
 80133d4:	4618      	mov	r0, r3
 80133d6:	3728      	adds	r7, #40	@ 0x28
 80133d8:	46bd      	mov	sp, r7
 80133da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80133de:	bf00      	nop
 80133e0:	200013dc 	.word	0x200013dc

080133e4 <LoRaMacCryptoSetMulticastReference>:
    return LORAMAC_CRYPTO_ERROR;
#endif /* LORAMAC_VERSION */
}

LoRaMacCryptoStatus_t LoRaMacCryptoSetMulticastReference( MulticastCtx_t* multicastList )
{
 80133e4:	b480      	push	{r7}
 80133e6:	b085      	sub	sp, #20
 80133e8:	af00      	add	r7, sp, #0
 80133ea:	6078      	str	r0, [r7, #4]
    if( multicastList == NULL )
 80133ec:	687b      	ldr	r3, [r7, #4]
 80133ee:	2b00      	cmp	r3, #0
 80133f0:	d101      	bne.n	80133f6 <LoRaMacCryptoSetMulticastReference+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80133f2:	230a      	movs	r3, #10
 80133f4:	e019      	b.n	801342a <LoRaMacCryptoSetMulticastReference+0x46>
    }

    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 80133f6:	2300      	movs	r3, #0
 80133f8:	60fb      	str	r3, [r7, #12]
 80133fa:	e012      	b.n	8013422 <LoRaMacCryptoSetMulticastReference+0x3e>
    {
        multicastList[i].DownLinkCounter = &CryptoNvm->FCntList.McFCntDown[i];
 80133fc:	4b0d      	ldr	r3, [pc, #52]	@ (8013434 <LoRaMacCryptoSetMulticastReference+0x50>)
 80133fe:	6819      	ldr	r1, [r3, #0]
 8013400:	68fa      	ldr	r2, [r7, #12]
 8013402:	4613      	mov	r3, r2
 8013404:	005b      	lsls	r3, r3, #1
 8013406:	4413      	add	r3, r2
 8013408:	011b      	lsls	r3, r3, #4
 801340a:	461a      	mov	r2, r3
 801340c:	687b      	ldr	r3, [r7, #4]
 801340e:	4413      	add	r3, r2
 8013410:	68fa      	ldr	r2, [r7, #12]
 8013412:	3206      	adds	r2, #6
 8013414:	0092      	lsls	r2, r2, #2
 8013416:	440a      	add	r2, r1
 8013418:	3204      	adds	r2, #4
 801341a:	625a      	str	r2, [r3, #36]	@ 0x24
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 801341c:	68fb      	ldr	r3, [r7, #12]
 801341e:	3301      	adds	r3, #1
 8013420:	60fb      	str	r3, [r7, #12]
 8013422:	68fb      	ldr	r3, [r7, #12]
 8013424:	2b00      	cmp	r3, #0
 8013426:	dde9      	ble.n	80133fc <LoRaMacCryptoSetMulticastReference+0x18>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8013428:	2300      	movs	r3, #0
}
 801342a:	4618      	mov	r0, r3
 801342c:	3714      	adds	r7, #20
 801342e:	46bd      	mov	sp, r7
 8013430:	bc80      	pop	{r7}
 8013432:	4770      	bx	lr
 8013434:	200013dc 	.word	0x200013dc

08013438 <LoRaMacCryptoSetKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetKey( KeyIdentifier_t keyID, uint8_t* key )
{
 8013438:	b580      	push	{r7, lr}
 801343a:	b082      	sub	sp, #8
 801343c:	af00      	add	r7, sp, #0
 801343e:	4603      	mov	r3, r0
 8013440:	6039      	str	r1, [r7, #0]
 8013442:	71fb      	strb	r3, [r7, #7]
    if( SecureElementSetKey( keyID, key ) != SECURE_ELEMENT_SUCCESS )
 8013444:	79fb      	ldrb	r3, [r7, #7]
 8013446:	6839      	ldr	r1, [r7, #0]
 8013448:	4618      	mov	r0, r3
 801344a:	f7f8 facd 	bl	800b9e8 <SecureElementSetKey>
 801344e:	4603      	mov	r3, r0
 8013450:	2b00      	cmp	r3, #0
 8013452:	d001      	beq.n	8013458 <LoRaMacCryptoSetKey+0x20>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8013454:	230f      	movs	r3, #15
 8013456:	e021      	b.n	801349c <LoRaMacCryptoSetKey+0x64>
    }
    if( keyID == APP_KEY )
 8013458:	79fb      	ldrb	r3, [r7, #7]
 801345a:	2b00      	cmp	r3, #0
 801345c:	d11d      	bne.n	801349a <LoRaMacCryptoSetKey+0x62>
    {
        // Derive lifetime keys
        if( LoRaMacCryptoDeriveLifeTimeKey( CryptoNvm->LrWanVersion.Fields.Minor, MC_ROOT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 801345e:	4b11      	ldr	r3, [pc, #68]	@ (80134a4 <LoRaMacCryptoSetKey+0x6c>)
 8013460:	681b      	ldr	r3, [r3, #0]
 8013462:	789b      	ldrb	r3, [r3, #2]
 8013464:	210b      	movs	r1, #11
 8013466:	4618      	mov	r0, r3
 8013468:	f000 fa5c 	bl	8013924 <LoRaMacCryptoDeriveLifeTimeKey>
 801346c:	4603      	mov	r3, r0
 801346e:	2b00      	cmp	r3, #0
 8013470:	d001      	beq.n	8013476 <LoRaMacCryptoSetKey+0x3e>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8013472:	230f      	movs	r3, #15
 8013474:	e012      	b.n	801349c <LoRaMacCryptoSetKey+0x64>
        }
        if( LoRaMacCryptoDeriveLifeTimeKey( 0, MC_KE_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 8013476:	210c      	movs	r1, #12
 8013478:	2000      	movs	r0, #0
 801347a:	f000 fa53 	bl	8013924 <LoRaMacCryptoDeriveLifeTimeKey>
 801347e:	4603      	mov	r3, r0
 8013480:	2b00      	cmp	r3, #0
 8013482:	d001      	beq.n	8013488 <LoRaMacCryptoSetKey+0x50>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8013484:	230f      	movs	r3, #15
 8013486:	e009      	b.n	801349c <LoRaMacCryptoSetKey+0x64>
        }
        if( LoRaMacCryptoDeriveLifeTimeKey( 0, DATABLOCK_INT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 8013488:	210a      	movs	r1, #10
 801348a:	2000      	movs	r0, #0
 801348c:	f000 fa4a 	bl	8013924 <LoRaMacCryptoDeriveLifeTimeKey>
 8013490:	4603      	mov	r3, r0
 8013492:	2b00      	cmp	r3, #0
 8013494:	d001      	beq.n	801349a <LoRaMacCryptoSetKey+0x62>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8013496:	230f      	movs	r3, #15
 8013498:	e000      	b.n	801349c <LoRaMacCryptoSetKey+0x64>
        }
    }
    return LORAMAC_CRYPTO_SUCCESS;
 801349a:	2300      	movs	r3, #0
}
 801349c:	4618      	mov	r0, r3
 801349e:	3708      	adds	r7, #8
 80134a0:	46bd      	mov	sp, r7
 80134a2:	bd80      	pop	{r7, pc}
 80134a4:	200013dc 	.word	0x200013dc

080134a8 <LoRaMacCryptoPrepareJoinRequest>:

LoRaMacCryptoStatus_t LoRaMacCryptoPrepareJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 80134a8:	b580      	push	{r7, lr}
 80134aa:	b086      	sub	sp, #24
 80134ac:	af02      	add	r7, sp, #8
 80134ae:	6078      	str	r0, [r7, #4]
    if( macMsg == 0 )
 80134b0:	687b      	ldr	r3, [r7, #4]
 80134b2:	2b00      	cmp	r3, #0
 80134b4:	d101      	bne.n	80134ba <LoRaMacCryptoPrepareJoinRequest+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80134b6:	230a      	movs	r3, #10
 80134b8:	e033      	b.n	8013522 <LoRaMacCryptoPrepareJoinRequest+0x7a>
    }
    KeyIdentifier_t micComputationKeyID = NWK_KEY;
 80134ba:	2301      	movs	r3, #1
 80134bc:	73fb      	strb	r3, [r7, #15]

    // Add device nonce
#if ( USE_RANDOM_DEV_NONCE == 1 )
    uint32_t devNonce = 0;
 80134be:	2300      	movs	r3, #0
 80134c0:	60bb      	str	r3, [r7, #8]
    SecureElementRandomNumber( &devNonce );
 80134c2:	f107 0308 	add.w	r3, r7, #8
 80134c6:	4618      	mov	r0, r3
 80134c8:	f7f8 fc68 	bl	800bd9c <SecureElementRandomNumber>
    CryptoNvm->DevNonce = devNonce;
 80134cc:	68ba      	ldr	r2, [r7, #8]
 80134ce:	4b17      	ldr	r3, [pc, #92]	@ (801352c <LoRaMacCryptoPrepareJoinRequest+0x84>)
 80134d0:	681b      	ldr	r3, [r3, #0]
 80134d2:	b292      	uxth	r2, r2
 80134d4:	809a      	strh	r2, [r3, #4]
#else
    CryptoNvm->DevNonce++;
#endif /* USE_RANDOM_DEV_NONCE */
    macMsg->DevNonce = CryptoNvm->DevNonce;
 80134d6:	4b15      	ldr	r3, [pc, #84]	@ (801352c <LoRaMacCryptoPrepareJoinRequest+0x84>)
 80134d8:	681b      	ldr	r3, [r3, #0]
 80134da:	889a      	ldrh	r2, [r3, #4]
 80134dc:	687b      	ldr	r3, [r7, #4]
 80134de:	82da      	strh	r2, [r3, #22]
        return LORAMAC_CRYPTO_ERROR;
    }
#endif /* LORAMAC_VERSION */

    // Serialize message
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 80134e0:	6878      	ldr	r0, [r7, #4]
 80134e2:	f000 fc17 	bl	8013d14 <LoRaMacSerializerJoinRequest>
 80134e6:	4603      	mov	r3, r0
 80134e8:	2b00      	cmp	r3, #0
 80134ea:	d001      	beq.n	80134f0 <LoRaMacCryptoPrepareJoinRequest+0x48>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 80134ec:	2311      	movs	r3, #17
 80134ee:	e018      	b.n	8013522 <LoRaMacCryptoPrepareJoinRequest+0x7a>
    }

    // Compute mic
    if( SecureElementComputeAesCmac( NULL, macMsg->Buffer, ( LORAMAC_JOIN_REQ_MSG_SIZE - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, &macMsg->MIC ) != SECURE_ELEMENT_SUCCESS )
 80134f0:	687b      	ldr	r3, [r7, #4]
 80134f2:	6819      	ldr	r1, [r3, #0]
 80134f4:	687b      	ldr	r3, [r7, #4]
 80134f6:	3318      	adds	r3, #24
 80134f8:	7bfa      	ldrb	r2, [r7, #15]
 80134fa:	9300      	str	r3, [sp, #0]
 80134fc:	4613      	mov	r3, r2
 80134fe:	2213      	movs	r2, #19
 8013500:	2000      	movs	r0, #0
 8013502:	f7f8 facf 	bl	800baa4 <SecureElementComputeAesCmac>
 8013506:	4603      	mov	r3, r0
 8013508:	2b00      	cmp	r3, #0
 801350a:	d001      	beq.n	8013510 <LoRaMacCryptoPrepareJoinRequest+0x68>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 801350c:	230f      	movs	r3, #15
 801350e:	e008      	b.n	8013522 <LoRaMacCryptoPrepareJoinRequest+0x7a>
    }

    // Reserialize message to add the MIC
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8013510:	6878      	ldr	r0, [r7, #4]
 8013512:	f000 fbff 	bl	8013d14 <LoRaMacSerializerJoinRequest>
 8013516:	4603      	mov	r3, r0
 8013518:	2b00      	cmp	r3, #0
 801351a:	d001      	beq.n	8013520 <LoRaMacCryptoPrepareJoinRequest+0x78>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 801351c:	2311      	movs	r3, #17
 801351e:	e000      	b.n	8013522 <LoRaMacCryptoPrepareJoinRequest+0x7a>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8013520:	2300      	movs	r3, #0
}
 8013522:	4618      	mov	r0, r3
 8013524:	3710      	adds	r7, #16
 8013526:	46bd      	mov	sp, r7
 8013528:	bd80      	pop	{r7, pc}
 801352a:	bf00      	nop
 801352c:	200013dc 	.word	0x200013dc

08013530 <LoRaMacCryptoHandleJoinAccept>:
    return LORAMAC_CRYPTO_ERROR;
#endif /* LORAMAC_VERSION */
}

LoRaMacCryptoStatus_t LoRaMacCryptoHandleJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t* joinEUI, LoRaMacMessageJoinAccept_t* macMsg )
{
 8013530:	b590      	push	{r4, r7, lr}
 8013532:	b097      	sub	sp, #92	@ 0x5c
 8013534:	af04      	add	r7, sp, #16
 8013536:	4603      	mov	r3, r0
 8013538:	60b9      	str	r1, [r7, #8]
 801353a:	607a      	str	r2, [r7, #4]
 801353c:	73fb      	strb	r3, [r7, #15]
    if( ( macMsg == 0 ) || ( joinEUI == 0 ) )
 801353e:	687b      	ldr	r3, [r7, #4]
 8013540:	2b00      	cmp	r3, #0
 8013542:	d002      	beq.n	801354a <LoRaMacCryptoHandleJoinAccept+0x1a>
 8013544:	68bb      	ldr	r3, [r7, #8]
 8013546:	2b00      	cmp	r3, #0
 8013548:	d101      	bne.n	801354e <LoRaMacCryptoHandleJoinAccept+0x1e>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 801354a:	230a      	movs	r3, #10
 801354c:	e0d3      	b.n	80136f6 <LoRaMacCryptoHandleJoinAccept+0x1c6>
    }

    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 801354e:	2313      	movs	r3, #19
 8013550:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    uint8_t decJoinAccept[LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE] = { 0 };
 8013554:	2300      	movs	r3, #0
 8013556:	617b      	str	r3, [r7, #20]
 8013558:	f107 0318 	add.w	r3, r7, #24
 801355c:	221d      	movs	r2, #29
 801355e:	2100      	movs	r1, #0
 8013560:	4618      	mov	r0, r3
 8013562:	f007 fe1f 	bl	801b1a4 <memset>
    uint8_t versionMinor         = 0;
 8013566:	2300      	movs	r3, #0
 8013568:	74fb      	strb	r3, [r7, #19]
    uint16_t nonce               = CryptoNvm->DevNonce;
 801356a:	4b65      	ldr	r3, [pc, #404]	@ (8013700 <LoRaMacCryptoHandleJoinAccept+0x1d0>)
 801356c:	681b      	ldr	r3, [r3, #0]
 801356e:	889b      	ldrh	r3, [r3, #4]
 8013570:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
            nonce = CryptoNvm->FCntList.RJcount1;
        }
    }
#endif /* LORAMAC_VERSION */

    if( SecureElementProcessJoinAccept( joinReqType, joinEUI, nonce, macMsg->Buffer,
 8013574:	687b      	ldr	r3, [r7, #4]
 8013576:	681c      	ldr	r4, [r3, #0]
 8013578:	687b      	ldr	r3, [r7, #4]
 801357a:	791b      	ldrb	r3, [r3, #4]
 801357c:	f8b7 1044 	ldrh.w	r1, [r7, #68]	@ 0x44
 8013580:	7bf8      	ldrb	r0, [r7, #15]
 8013582:	f107 0213 	add.w	r2, r7, #19
 8013586:	9202      	str	r2, [sp, #8]
 8013588:	f107 0214 	add.w	r2, r7, #20
 801358c:	9201      	str	r2, [sp, #4]
 801358e:	9300      	str	r3, [sp, #0]
 8013590:	4623      	mov	r3, r4
 8013592:	460a      	mov	r2, r1
 8013594:	68b9      	ldr	r1, [r7, #8]
 8013596:	f7f8 fb8b 	bl	800bcb0 <SecureElementProcessJoinAccept>
 801359a:	4603      	mov	r3, r0
 801359c:	2b00      	cmp	r3, #0
 801359e:	d001      	beq.n	80135a4 <LoRaMacCryptoHandleJoinAccept+0x74>
                                        macMsg->BufSize, decJoinAccept,
                                        &versionMinor ) != SECURE_ELEMENT_SUCCESS )
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80135a0:	230f      	movs	r3, #15
 80135a2:	e0a8      	b.n	80136f6 <LoRaMacCryptoHandleJoinAccept+0x1c6>
    }

    memcpy1( macMsg->Buffer, decJoinAccept, macMsg->BufSize );
 80135a4:	687b      	ldr	r3, [r7, #4]
 80135a6:	6818      	ldr	r0, [r3, #0]
 80135a8:	687b      	ldr	r3, [r7, #4]
 80135aa:	791b      	ldrb	r3, [r3, #4]
 80135ac:	461a      	mov	r2, r3
 80135ae:	f107 0314 	add.w	r3, r7, #20
 80135b2:	4619      	mov	r1, r3
 80135b4:	f003 f841 	bl	801663a <memcpy1>

    // Parse the message
    if( LoRaMacParserJoinAccept( macMsg ) != LORAMAC_PARSER_SUCCESS )
 80135b8:	6878      	ldr	r0, [r7, #4]
 80135ba:	f000 f9ee 	bl	801399a <LoRaMacParserJoinAccept>
 80135be:	4603      	mov	r3, r0
 80135c0:	2b00      	cmp	r3, #0
 80135c2:	d001      	beq.n	80135c8 <LoRaMacCryptoHandleJoinAccept+0x98>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
 80135c4:	2310      	movs	r3, #16
 80135c6:	e096      	b.n	80136f6 <LoRaMacCryptoHandleJoinAccept+0x1c6>
    }

    uint32_t currentJoinNonce;
    bool isJoinNonceOk = false;
 80135c8:	2300      	movs	r3, #0
 80135ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

    currentJoinNonce = ( uint32_t )macMsg->JoinNonce[0];
 80135ce:	687b      	ldr	r3, [r7, #4]
 80135d0:	799b      	ldrb	r3, [r3, #6]
 80135d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[1] << 8 );
 80135d4:	687b      	ldr	r3, [r7, #4]
 80135d6:	79db      	ldrb	r3, [r3, #7]
 80135d8:	021b      	lsls	r3, r3, #8
 80135da:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80135dc:	4313      	orrs	r3, r2
 80135de:	63fb      	str	r3, [r7, #60]	@ 0x3c
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[2] << 16 );
 80135e0:	687b      	ldr	r3, [r7, #4]
 80135e2:	7a1b      	ldrb	r3, [r3, #8]
 80135e4:	041b      	lsls	r3, r3, #16
 80135e6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80135e8:	4313      	orrs	r3, r2
 80135ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        isJoinNonceOk = IsJoinNonce11xOk( currentJoinNonce );
    }
    else
#endif /* LORAMAC_VERSION */
    {
        isJoinNonceOk = IsJoinNonce10xOk( currentJoinNonce );
 80135ec:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80135ee:	f7ff fe1b 	bl	8013228 <IsJoinNonce10xOk>
 80135f2:	4603      	mov	r3, r0
 80135f4:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
    }

    if( isJoinNonceOk == true )
 80135f8:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80135fc:	2b00      	cmp	r3, #0
 80135fe:	d010      	beq.n	8013622 <LoRaMacCryptoHandleJoinAccept+0xf2>
    {
        CryptoNvm->JoinNonce = currentJoinNonce;
 8013600:	4b3f      	ldr	r3, [pc, #252]	@ (8013700 <LoRaMacCryptoHandleJoinAccept+0x1d0>)
 8013602:	681b      	ldr	r3, [r3, #0]
 8013604:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8013606:	609a      	str	r2, [r3, #8]
    {
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
    }

    // Derive lifetime keys
    retval = LoRaMacCryptoDeriveLifeTimeKey( versionMinor, MC_ROOT_KEY );
 8013608:	7cfb      	ldrb	r3, [r7, #19]
 801360a:	210b      	movs	r1, #11
 801360c:	4618      	mov	r0, r3
 801360e:	f000 f989 	bl	8013924 <LoRaMacCryptoDeriveLifeTimeKey>
 8013612:	4603      	mov	r3, r0
 8013614:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8013618:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 801361c:	2b00      	cmp	r3, #0
 801361e:	d005      	beq.n	801362c <LoRaMacCryptoHandleJoinAccept+0xfc>
 8013620:	e001      	b.n	8013626 <LoRaMacCryptoHandleJoinAccept+0xf6>
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
 8013622:	2303      	movs	r3, #3
 8013624:	e067      	b.n	80136f6 <LoRaMacCryptoHandleJoinAccept+0x1c6>
    {
        return retval;
 8013626:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 801362a:	e064      	b.n	80136f6 <LoRaMacCryptoHandleJoinAccept+0x1c6>
    }

    retval = LoRaMacCryptoDeriveLifeTimeKey( 0, MC_KE_KEY );
 801362c:	210c      	movs	r1, #12
 801362e:	2000      	movs	r0, #0
 8013630:	f000 f978 	bl	8013924 <LoRaMacCryptoDeriveLifeTimeKey>
 8013634:	4603      	mov	r3, r0
 8013636:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 801363a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 801363e:	2b00      	cmp	r3, #0
 8013640:	d002      	beq.n	8013648 <LoRaMacCryptoHandleJoinAccept+0x118>
    {
        return retval;
 8013642:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8013646:	e056      	b.n	80136f6 <LoRaMacCryptoHandleJoinAccept+0x1c6>
    }

    retval = LoRaMacCryptoDeriveLifeTimeKey( 0, DATABLOCK_INT_KEY );
 8013648:	210a      	movs	r1, #10
 801364a:	2000      	movs	r0, #0
 801364c:	f000 f96a 	bl	8013924 <LoRaMacCryptoDeriveLifeTimeKey>
 8013650:	4603      	mov	r3, r0
 8013652:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8013656:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 801365a:	2b00      	cmp	r3, #0
 801365c:	d002      	beq.n	8013664 <LoRaMacCryptoHandleJoinAccept+0x134>
    {
        return retval;
 801365e:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8013662:	e048      	b.n	80136f6 <LoRaMacCryptoHandleJoinAccept+0x1c6>
    {
        // Operating in LoRaWAN 1.0.x mode

        uint32_t netID;

        netID = ( uint32_t )macMsg->NetID[0];
 8013664:	687b      	ldr	r3, [r7, #4]
 8013666:	7a5b      	ldrb	r3, [r3, #9]
 8013668:	63bb      	str	r3, [r7, #56]	@ 0x38
        netID |= ( ( uint32_t )macMsg->NetID[1] << 8 );
 801366a:	687b      	ldr	r3, [r7, #4]
 801366c:	7a9b      	ldrb	r3, [r3, #10]
 801366e:	021b      	lsls	r3, r3, #8
 8013670:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8013672:	4313      	orrs	r3, r2
 8013674:	63bb      	str	r3, [r7, #56]	@ 0x38
        netID |= ( ( uint32_t )macMsg->NetID[2] << 16 );
 8013676:	687b      	ldr	r3, [r7, #4]
 8013678:	7adb      	ldrb	r3, [r3, #11]
 801367a:	041b      	lsls	r3, r3, #16
 801367c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801367e:	4313      	orrs	r3, r2
 8013680:	63bb      	str	r3, [r7, #56]	@ 0x38

        retval = DeriveSessionKey10x( APP_S_KEY, currentJoinNonce, netID, nonce );
 8013682:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8013686:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8013688:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 801368a:	2009      	movs	r0, #9
 801368c:	f7ff fca8 	bl	8012fe0 <DeriveSessionKey10x>
 8013690:	4603      	mov	r3, r0
 8013692:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8013696:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 801369a:	2b00      	cmp	r3, #0
 801369c:	d002      	beq.n	80136a4 <LoRaMacCryptoHandleJoinAccept+0x174>
        {
            return retval;
 801369e:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80136a2:	e028      	b.n	80136f6 <LoRaMacCryptoHandleJoinAccept+0x1c6>
            return retval;
        }

        retval = DeriveSessionKey10x( S_NWK_S_INT_KEY, currentJoinNonce, netID, nonce );
#else
        retval = DeriveSessionKey10x( NWK_S_KEY, currentJoinNonce, netID, nonce );
 80136a4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80136a8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80136aa:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80136ac:	2008      	movs	r0, #8
 80136ae:	f7ff fc97 	bl	8012fe0 <DeriveSessionKey10x>
 80136b2:	4603      	mov	r3, r0
 80136b4:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
#endif /* LORAMAC_VERSION */
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 80136b8:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80136bc:	2b00      	cmp	r3, #0
 80136be:	d002      	beq.n	80136c6 <LoRaMacCryptoHandleJoinAccept+0x196>
        {
            return retval;
 80136c0:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80136c4:	e017      	b.n	80136f6 <LoRaMacCryptoHandleJoinAccept+0x1c6>
        }
    }

    // Join-Accept is successfully processed
    // Save LoRaWAN specification version
    CryptoNvm->LrWanVersion.Fields.Minor = versionMinor;
 80136c6:	4b0e      	ldr	r3, [pc, #56]	@ (8013700 <LoRaMacCryptoHandleJoinAccept+0x1d0>)
 80136c8:	681b      	ldr	r3, [r3, #0]
 80136ca:	7cfa      	ldrb	r2, [r7, #19]
 80136cc:	709a      	strb	r2, [r3, #2]

    // Reset frame counters
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    RJcount0 = 0;
#endif /* LORAMAC_VERSION */
    CryptoNvm->FCntList.FCntUp = 0;
 80136ce:	4b0c      	ldr	r3, [pc, #48]	@ (8013700 <LoRaMacCryptoHandleJoinAccept+0x1d0>)
 80136d0:	681b      	ldr	r3, [r3, #0]
 80136d2:	2200      	movs	r2, #0
 80136d4:	60da      	str	r2, [r3, #12]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITIAL_VALUE;
 80136d6:	4b0a      	ldr	r3, [pc, #40]	@ (8013700 <LoRaMacCryptoHandleJoinAccept+0x1d0>)
 80136d8:	681b      	ldr	r3, [r3, #0]
 80136da:	f04f 32ff 	mov.w	r2, #4294967295
 80136de:	619a      	str	r2, [r3, #24]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITIAL_VALUE;
 80136e0:	4b07      	ldr	r3, [pc, #28]	@ (8013700 <LoRaMacCryptoHandleJoinAccept+0x1d0>)
 80136e2:	681b      	ldr	r3, [r3, #0]
 80136e4:	f04f 32ff 	mov.w	r2, #4294967295
 80136e8:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITIAL_VALUE;
 80136ea:	4b05      	ldr	r3, [pc, #20]	@ (8013700 <LoRaMacCryptoHandleJoinAccept+0x1d0>)
 80136ec:	681b      	ldr	r3, [r3, #0]
 80136ee:	f04f 32ff 	mov.w	r2, #4294967295
 80136f2:	615a      	str	r2, [r3, #20]

    return LORAMAC_CRYPTO_SUCCESS;
 80136f4:	2300      	movs	r3, #0
}
 80136f6:	4618      	mov	r0, r3
 80136f8:	374c      	adds	r7, #76	@ 0x4c
 80136fa:	46bd      	mov	sp, r7
 80136fc:	bd90      	pop	{r4, r7, pc}
 80136fe:	bf00      	nop
 8013700:	200013dc 	.word	0x200013dc

08013704 <LoRaMacCryptoSecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoSecureMessage( uint32_t fCntUp, uint8_t txDr, uint8_t txCh, LoRaMacMessageData_t* macMsg )
{
 8013704:	b590      	push	{r4, r7, lr}
 8013706:	b08b      	sub	sp, #44	@ 0x2c
 8013708:	af04      	add	r7, sp, #16
 801370a:	60f8      	str	r0, [r7, #12]
 801370c:	607b      	str	r3, [r7, #4]
 801370e:	460b      	mov	r3, r1
 8013710:	72fb      	strb	r3, [r7, #11]
 8013712:	4613      	mov	r3, r2
 8013714:	72bb      	strb	r3, [r7, #10]
    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 8013716:	2313      	movs	r3, #19
 8013718:	75bb      	strb	r3, [r7, #22]
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 801371a:	2309      	movs	r3, #9
 801371c:	75fb      	strb	r3, [r7, #23]

    if( macMsg == NULL )
 801371e:	687b      	ldr	r3, [r7, #4]
 8013720:	2b00      	cmp	r3, #0
 8013722:	d101      	bne.n	8013728 <LoRaMacCryptoSecureMessage+0x24>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8013724:	230a      	movs	r3, #10
 8013726:	e05e      	b.n	80137e6 <LoRaMacCryptoSecureMessage+0xe2>
    }

    if( fCntUp < CryptoNvm->FCntList.FCntUp )
 8013728:	4b31      	ldr	r3, [pc, #196]	@ (80137f0 <LoRaMacCryptoSecureMessage+0xec>)
 801372a:	681b      	ldr	r3, [r3, #0]
 801372c:	68db      	ldr	r3, [r3, #12]
 801372e:	68fa      	ldr	r2, [r7, #12]
 8013730:	429a      	cmp	r2, r3
 8013732:	d201      	bcs.n	8013738 <LoRaMacCryptoSecureMessage+0x34>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 8013734:	2306      	movs	r3, #6
 8013736:	e056      	b.n	80137e6 <LoRaMacCryptoSecureMessage+0xe2>
    }

    // Encrypt payload
    if( macMsg->FPort == 0 )
 8013738:	687b      	ldr	r3, [r7, #4]
 801373a:	f893 3020 	ldrb.w	r3, [r3, #32]
 801373e:	2b00      	cmp	r3, #0
 8013740:	d101      	bne.n	8013746 <LoRaMacCryptoSecureMessage+0x42>
    {
        // Use network session key
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else
        payloadDecryptionKeyID = NWK_S_KEY;
 8013742:	2308      	movs	r3, #8
 8013744:	75fb      	strb	r3, [r7, #23]
#endif /* LORAMAC_VERSION */
    }

    if( fCntUp > CryptoNvm->FCntList.FCntUp )
 8013746:	4b2a      	ldr	r3, [pc, #168]	@ (80137f0 <LoRaMacCryptoSecureMessage+0xec>)
 8013748:	681b      	ldr	r3, [r3, #0]
 801374a:	68db      	ldr	r3, [r3, #12]
 801374c:	68fa      	ldr	r2, [r7, #12]
 801374e:	429a      	cmp	r2, r3
 8013750:	d916      	bls.n	8013780 <LoRaMacCryptoSecureMessage+0x7c>
    {
        retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, macMsg->FHDR.DevAddr, UPLINK, fCntUp );
 8013752:	687b      	ldr	r3, [r7, #4]
 8013754:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8013756:	687b      	ldr	r3, [r7, #4]
 8013758:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801375c:	b219      	sxth	r1, r3
 801375e:	687b      	ldr	r3, [r7, #4]
 8013760:	689c      	ldr	r4, [r3, #8]
 8013762:	7dfa      	ldrb	r2, [r7, #23]
 8013764:	68fb      	ldr	r3, [r7, #12]
 8013766:	9301      	str	r3, [sp, #4]
 8013768:	2300      	movs	r3, #0
 801376a:	9300      	str	r3, [sp, #0]
 801376c:	4623      	mov	r3, r4
 801376e:	f7ff fa43 	bl	8012bf8 <PayloadEncrypt>
 8013772:	4603      	mov	r3, r0
 8013774:	75bb      	strb	r3, [r7, #22]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8013776:	7dbb      	ldrb	r3, [r7, #22]
 8013778:	2b00      	cmp	r3, #0
 801377a:	d001      	beq.n	8013780 <LoRaMacCryptoSecureMessage+0x7c>
        {
            return retval;
 801377c:	7dbb      	ldrb	r3, [r7, #22]
 801377e:	e032      	b.n	80137e6 <LoRaMacCryptoSecureMessage+0xe2>
        }
#endif /* LORAMAC_VERSION */
    }

    // Serialize message
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8013780:	6878      	ldr	r0, [r7, #4]
 8013782:	f000 fb49 	bl	8013e18 <LoRaMacSerializerData>
 8013786:	4603      	mov	r3, r0
 8013788:	2b00      	cmp	r3, #0
 801378a:	d001      	beq.n	8013790 <LoRaMacCryptoSecureMessage+0x8c>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 801378c:	2311      	movs	r3, #17
 801378e:	e02a      	b.n	80137e6 <LoRaMacCryptoSecureMessage+0xe2>
    {
        // Use network session key
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else
        payloadDecryptionKeyID = NWK_S_KEY;
 8013790:	2308      	movs	r3, #8
 8013792:	75fb      	strb	r3, [r7, #23]
#endif /* LORAMAC_VERSION */
        // MIC = cmacF[0..3]
        // The IsAck parameter is every time false since the ConfFCnt field is not used in legacy mode.
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), payloadDecryptionKeyID, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 8013794:	687b      	ldr	r3, [r7, #4]
 8013796:	6818      	ldr	r0, [r3, #0]
 8013798:	687b      	ldr	r3, [r7, #4]
 801379a:	791b      	ldrb	r3, [r3, #4]
 801379c:	3b04      	subs	r3, #4
 801379e:	b299      	uxth	r1, r3
 80137a0:	687b      	ldr	r3, [r7, #4]
 80137a2:	689b      	ldr	r3, [r3, #8]
 80137a4:	687a      	ldr	r2, [r7, #4]
 80137a6:	322c      	adds	r2, #44	@ 0x2c
 80137a8:	7dfc      	ldrb	r4, [r7, #23]
 80137aa:	9203      	str	r2, [sp, #12]
 80137ac:	68fa      	ldr	r2, [r7, #12]
 80137ae:	9202      	str	r2, [sp, #8]
 80137b0:	9301      	str	r3, [sp, #4]
 80137b2:	2300      	movs	r3, #0
 80137b4:	9300      	str	r3, [sp, #0]
 80137b6:	2300      	movs	r3, #0
 80137b8:	4622      	mov	r2, r4
 80137ba:	f7ff fb1e 	bl	8012dfa <ComputeCmacB0>
 80137be:	4603      	mov	r3, r0
 80137c0:	75bb      	strb	r3, [r7, #22]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 80137c2:	7dbb      	ldrb	r3, [r7, #22]
 80137c4:	2b00      	cmp	r3, #0
 80137c6:	d001      	beq.n	80137cc <LoRaMacCryptoSecureMessage+0xc8>
        {
            return retval;
 80137c8:	7dbb      	ldrb	r3, [r7, #22]
 80137ca:	e00c      	b.n	80137e6 <LoRaMacCryptoSecureMessage+0xe2>
        }
    }

    // Re-serialize message to add the MIC
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 80137cc:	6878      	ldr	r0, [r7, #4]
 80137ce:	f000 fb23 	bl	8013e18 <LoRaMacSerializerData>
 80137d2:	4603      	mov	r3, r0
 80137d4:	2b00      	cmp	r3, #0
 80137d6:	d001      	beq.n	80137dc <LoRaMacCryptoSecureMessage+0xd8>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 80137d8:	2311      	movs	r3, #17
 80137da:	e004      	b.n	80137e6 <LoRaMacCryptoSecureMessage+0xe2>
    }

    CryptoNvm->FCntList.FCntUp = fCntUp;
 80137dc:	4b04      	ldr	r3, [pc, #16]	@ (80137f0 <LoRaMacCryptoSecureMessage+0xec>)
 80137de:	681b      	ldr	r3, [r3, #0]
 80137e0:	68fa      	ldr	r2, [r7, #12]
 80137e2:	60da      	str	r2, [r3, #12]

    return LORAMAC_CRYPTO_SUCCESS;
 80137e4:	2300      	movs	r3, #0
}
 80137e6:	4618      	mov	r0, r3
 80137e8:	371c      	adds	r7, #28
 80137ea:	46bd      	mov	sp, r7
 80137ec:	bd90      	pop	{r4, r7, pc}
 80137ee:	bf00      	nop
 80137f0:	200013dc 	.word	0x200013dc

080137f4 <LoRaMacCryptoUnsecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoUnsecureMessage( AddressIdentifier_t addrID, uint32_t address, FCntIdentifier_t fCntID, uint32_t fCntDown, LoRaMacMessageData_t* macMsg )
{
 80137f4:	b590      	push	{r4, r7, lr}
 80137f6:	b08b      	sub	sp, #44	@ 0x2c
 80137f8:	af04      	add	r7, sp, #16
 80137fa:	60b9      	str	r1, [r7, #8]
 80137fc:	607b      	str	r3, [r7, #4]
 80137fe:	4603      	mov	r3, r0
 8013800:	73fb      	strb	r3, [r7, #15]
 8013802:	4613      	mov	r3, r2
 8013804:	73bb      	strb	r3, [r7, #14]
    if( macMsg == 0 )
 8013806:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013808:	2b00      	cmp	r3, #0
 801380a:	d101      	bne.n	8013810 <LoRaMacCryptoUnsecureMessage+0x1c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 801380c:	230a      	movs	r3, #10
 801380e:	e083      	b.n	8013918 <LoRaMacCryptoUnsecureMessage+0x124>
    }

    if( CheckFCntDown( fCntID, fCntDown ) == false )
 8013810:	7bbb      	ldrb	r3, [r7, #14]
 8013812:	6879      	ldr	r1, [r7, #4]
 8013814:	4618      	mov	r0, r3
 8013816:	f7ff fc6f 	bl	80130f8 <CheckFCntDown>
 801381a:	4603      	mov	r3, r0
 801381c:	f083 0301 	eor.w	r3, r3, #1
 8013820:	b2db      	uxtb	r3, r3
 8013822:	2b00      	cmp	r3, #0
 8013824:	d001      	beq.n	801382a <LoRaMacCryptoUnsecureMessage+0x36>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 8013826:	2306      	movs	r3, #6
 8013828:	e076      	b.n	8013918 <LoRaMacCryptoUnsecureMessage+0x124>
    }

    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 801382a:	2313      	movs	r3, #19
 801382c:	757b      	strb	r3, [r7, #21]
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 801382e:	2309      	movs	r3, #9
 8013830:	75fb      	strb	r3, [r7, #23]
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    KeyIdentifier_t micComputationKeyID = S_NWK_S_INT_KEY;
#else
    KeyIdentifier_t micComputationKeyID = NWK_S_KEY;
 8013832:	2308      	movs	r3, #8
 8013834:	753b      	strb	r3, [r7, #20]
#endif /* LORAMAC_VERSION */
    KeyAddr_t* curItem;

    // Parse the message
    if( LoRaMacParserData( macMsg ) != LORAMAC_PARSER_SUCCESS )
 8013836:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8013838:	f000 f97a 	bl	8013b30 <LoRaMacParserData>
 801383c:	4603      	mov	r3, r0
 801383e:	2b00      	cmp	r3, #0
 8013840:	d001      	beq.n	8013846 <LoRaMacCryptoUnsecureMessage+0x52>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
 8013842:	2310      	movs	r3, #16
 8013844:	e068      	b.n	8013918 <LoRaMacCryptoUnsecureMessage+0x124>
    }

    // Determine current security context
    retval = GetKeyAddrItem( addrID, &curItem );
 8013846:	f107 0210 	add.w	r2, r7, #16
 801384a:	7bfb      	ldrb	r3, [r7, #15]
 801384c:	4611      	mov	r1, r2
 801384e:	4618      	mov	r0, r3
 8013850:	f7ff fba0 	bl	8012f94 <GetKeyAddrItem>
 8013854:	4603      	mov	r3, r0
 8013856:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8013858:	7d7b      	ldrb	r3, [r7, #21]
 801385a:	2b00      	cmp	r3, #0
 801385c:	d001      	beq.n	8013862 <LoRaMacCryptoUnsecureMessage+0x6e>
    {
        return retval;
 801385e:	7d7b      	ldrb	r3, [r7, #21]
 8013860:	e05a      	b.n	8013918 <LoRaMacCryptoUnsecureMessage+0x124>
    }

    payloadDecryptionKeyID = curItem->AppSkey;
 8013862:	693b      	ldr	r3, [r7, #16]
 8013864:	785b      	ldrb	r3, [r3, #1]
 8013866:	75fb      	strb	r3, [r7, #23]
    micComputationKeyID = curItem->NwkSkey;
 8013868:	693b      	ldr	r3, [r7, #16]
 801386a:	789b      	ldrb	r3, [r3, #2]
 801386c:	753b      	strb	r3, [r7, #20]

    // Check if it is our address
    if( address != macMsg->FHDR.DevAddr )
 801386e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013870:	689b      	ldr	r3, [r3, #8]
 8013872:	68ba      	ldr	r2, [r7, #8]
 8013874:	429a      	cmp	r2, r3
 8013876:	d001      	beq.n	801387c <LoRaMacCryptoUnsecureMessage+0x88>
    {
        return LORAMAC_CRYPTO_FAIL_ADDRESS;
 8013878:	2302      	movs	r3, #2
 801387a:	e04d      	b.n	8013918 <LoRaMacCryptoUnsecureMessage+0x124>
    }

    // Compute mic
    bool isAck = macMsg->FHDR.FCtrl.Bits.Ack;
 801387c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801387e:	7b1b      	ldrb	r3, [r3, #12]
 8013880:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8013884:	b2db      	uxtb	r3, r3
 8013886:	2b00      	cmp	r3, #0
 8013888:	bf14      	ite	ne
 801388a:	2301      	movne	r3, #1
 801388c:	2300      	moveq	r3, #0
 801388e:	75bb      	strb	r3, [r7, #22]
    if( CryptoNvm->LrWanVersion.Fields.Minor == 0 )
 8013890:	4b23      	ldr	r3, [pc, #140]	@ (8013920 <LoRaMacCryptoUnsecureMessage+0x12c>)
 8013892:	681b      	ldr	r3, [r3, #0]
 8013894:	789b      	ldrb	r3, [r3, #2]
 8013896:	2b00      	cmp	r3, #0
 8013898:	d101      	bne.n	801389e <LoRaMacCryptoUnsecureMessage+0xaa>
    {
        // In legacy mode the IsAck parameter is forced to be false since the ConfFCnt field is not used.
        isAck = false;
 801389a:	2300      	movs	r3, #0
 801389c:	75bb      	strb	r3, [r7, #22]
    }

    // Verify mic
    retval = VerifyCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, isAck, DOWNLINK, address, fCntDown, macMsg->MIC );
 801389e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80138a0:	6818      	ldr	r0, [r3, #0]
 80138a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80138a4:	791b      	ldrb	r3, [r3, #4]
 80138a6:	3b04      	subs	r3, #4
 80138a8:	b299      	uxth	r1, r3
 80138aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80138ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80138ae:	7dbc      	ldrb	r4, [r7, #22]
 80138b0:	7d3a      	ldrb	r2, [r7, #20]
 80138b2:	9303      	str	r3, [sp, #12]
 80138b4:	687b      	ldr	r3, [r7, #4]
 80138b6:	9302      	str	r3, [sp, #8]
 80138b8:	68bb      	ldr	r3, [r7, #8]
 80138ba:	9301      	str	r3, [sp, #4]
 80138bc:	2301      	movs	r3, #1
 80138be:	9300      	str	r3, [sp, #0]
 80138c0:	4623      	mov	r3, r4
 80138c2:	f7ff fad8 	bl	8012e76 <VerifyCmacB0>
 80138c6:	4603      	mov	r3, r0
 80138c8:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 80138ca:	7d7b      	ldrb	r3, [r7, #21]
 80138cc:	2b00      	cmp	r3, #0
 80138ce:	d001      	beq.n	80138d4 <LoRaMacCryptoUnsecureMessage+0xe0>
    {
        return retval;
 80138d0:	7d7b      	ldrb	r3, [r7, #21]
 80138d2:	e021      	b.n	8013918 <LoRaMacCryptoUnsecureMessage+0x124>
    }

    // Decrypt payload
    if( macMsg->FPort == 0 )
 80138d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80138d6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80138da:	2b00      	cmp	r3, #0
 80138dc:	d101      	bne.n	80138e2 <LoRaMacCryptoUnsecureMessage+0xee>
    {
        // Use network session encryption key
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else
        payloadDecryptionKeyID = NWK_S_KEY;
 80138de:	2308      	movs	r3, #8
 80138e0:	75fb      	strb	r3, [r7, #23]
#endif /* LORAMAC_VERSION */
    }
    retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, address, DOWNLINK, fCntDown );
 80138e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80138e4:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 80138e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80138e8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80138ec:	b219      	sxth	r1, r3
 80138ee:	7dfa      	ldrb	r2, [r7, #23]
 80138f0:	687b      	ldr	r3, [r7, #4]
 80138f2:	9301      	str	r3, [sp, #4]
 80138f4:	2301      	movs	r3, #1
 80138f6:	9300      	str	r3, [sp, #0]
 80138f8:	68bb      	ldr	r3, [r7, #8]
 80138fa:	f7ff f97d 	bl	8012bf8 <PayloadEncrypt>
 80138fe:	4603      	mov	r3, r0
 8013900:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8013902:	7d7b      	ldrb	r3, [r7, #21]
 8013904:	2b00      	cmp	r3, #0
 8013906:	d001      	beq.n	801390c <LoRaMacCryptoUnsecureMessage+0x118>
    {
        return retval;
 8013908:	7d7b      	ldrb	r3, [r7, #21]
 801390a:	e005      	b.n	8013918 <LoRaMacCryptoUnsecureMessage+0x124>
            }
        }
    }
#endif /* LORAMAC_VERSION */

    UpdateFCntDown( fCntID, fCntDown );
 801390c:	7bbb      	ldrb	r3, [r7, #14]
 801390e:	6879      	ldr	r1, [r7, #4]
 8013910:	4618      	mov	r0, r3
 8013912:	f7ff fc15 	bl	8013140 <UpdateFCntDown>

    return LORAMAC_CRYPTO_SUCCESS;
 8013916:	2300      	movs	r3, #0
}
 8013918:	4618      	mov	r0, r3
 801391a:	371c      	adds	r7, #28
 801391c:	46bd      	mov	sp, r7
 801391e:	bd90      	pop	{r4, r7, pc}
 8013920:	200013dc 	.word	0x200013dc

08013924 <LoRaMacCryptoDeriveLifeTimeKey>:

    return LORAMAC_CRYPTO_SUCCESS;
}

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveLifeTimeKey( uint8_t versionMinor, KeyIdentifier_t keyID )
{
 8013924:	b580      	push	{r7, lr}
 8013926:	b088      	sub	sp, #32
 8013928:	af00      	add	r7, sp, #0
 801392a:	4603      	mov	r3, r0
 801392c:	460a      	mov	r2, r1
 801392e:	71fb      	strb	r3, [r7, #7]
 8013930:	4613      	mov	r3, r2
 8013932:	71bb      	strb	r3, [r7, #6]
    uint8_t compBase[16] = { 0 };
 8013934:	2300      	movs	r3, #0
 8013936:	60fb      	str	r3, [r7, #12]
 8013938:	f107 0310 	add.w	r3, r7, #16
 801393c:	2200      	movs	r2, #0
 801393e:	601a      	str	r2, [r3, #0]
 8013940:	605a      	str	r2, [r3, #4]
 8013942:	609a      	str	r2, [r3, #8]
    KeyIdentifier_t rootKeyId = APP_KEY;
 8013944:	2300      	movs	r3, #0
 8013946:	77fb      	strb	r3, [r7, #31]
    switch( keyID )
 8013948:	79bb      	ldrb	r3, [r7, #6]
 801394a:	2b0c      	cmp	r3, #12
 801394c:	d00b      	beq.n	8013966 <LoRaMacCryptoDeriveLifeTimeKey+0x42>
 801394e:	2b0c      	cmp	r3, #12
 8013950:	dc0f      	bgt.n	8013972 <LoRaMacCryptoDeriveLifeTimeKey+0x4e>
 8013952:	2b0a      	cmp	r3, #10
 8013954:	d00a      	beq.n	801396c <LoRaMacCryptoDeriveLifeTimeKey+0x48>
 8013956:	2b0b      	cmp	r3, #11
 8013958:	d10b      	bne.n	8013972 <LoRaMacCryptoDeriveLifeTimeKey+0x4e>
    {
        case MC_ROOT_KEY:
            if( versionMinor == 1 )
 801395a:	79fb      	ldrb	r3, [r7, #7]
 801395c:	2b01      	cmp	r3, #1
 801395e:	d10a      	bne.n	8013976 <LoRaMacCryptoDeriveLifeTimeKey+0x52>
            {
                compBase[0] = 0x20;
 8013960:	2320      	movs	r3, #32
 8013962:	733b      	strb	r3, [r7, #12]
            }
            break;
 8013964:	e007      	b.n	8013976 <LoRaMacCryptoDeriveLifeTimeKey+0x52>
        case MC_KE_KEY:
            rootKeyId = MC_ROOT_KEY;
 8013966:	230b      	movs	r3, #11
 8013968:	77fb      	strb	r3, [r7, #31]
            break;
 801396a:	e005      	b.n	8013978 <LoRaMacCryptoDeriveLifeTimeKey+0x54>
        case DATABLOCK_INT_KEY:
            compBase[0] = 0x30;
 801396c:	2330      	movs	r3, #48	@ 0x30
 801396e:	733b      	strb	r3, [r7, #12]
            break;
 8013970:	e002      	b.n	8013978 <LoRaMacCryptoDeriveLifeTimeKey+0x54>
        default:
            return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 8013972:	230b      	movs	r3, #11
 8013974:	e00d      	b.n	8013992 <LoRaMacCryptoDeriveLifeTimeKey+0x6e>
            break;
 8013976:	bf00      	nop
    }

    if( SecureElementDeriveAndStoreKey( compBase, rootKeyId, keyID ) != SECURE_ELEMENT_SUCCESS )
 8013978:	79ba      	ldrb	r2, [r7, #6]
 801397a:	7ff9      	ldrb	r1, [r7, #31]
 801397c:	f107 030c 	add.w	r3, r7, #12
 8013980:	4618      	mov	r0, r3
 8013982:	f7f8 f955 	bl	800bc30 <SecureElementDeriveAndStoreKey>
 8013986:	4603      	mov	r3, r0
 8013988:	2b00      	cmp	r3, #0
 801398a:	d001      	beq.n	8013990 <LoRaMacCryptoDeriveLifeTimeKey+0x6c>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 801398c:	230f      	movs	r3, #15
 801398e:	e000      	b.n	8013992 <LoRaMacCryptoDeriveLifeTimeKey+0x6e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8013990:	2300      	movs	r3, #0
}
 8013992:	4618      	mov	r0, r3
 8013994:	3720      	adds	r7, #32
 8013996:	46bd      	mov	sp, r7
 8013998:	bd80      	pop	{r7, pc}

0801399a <LoRaMacParserJoinAccept>:
 */
#include "LoRaMacParser.h"
#include "utilities.h"

LoRaMacParserStatus_t LoRaMacParserJoinAccept( LoRaMacMessageJoinAccept_t* macMsg )
{
 801399a:	b580      	push	{r7, lr}
 801399c:	b084      	sub	sp, #16
 801399e:	af00      	add	r7, sp, #0
 80139a0:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 80139a2:	687b      	ldr	r3, [r7, #4]
 80139a4:	2b00      	cmp	r3, #0
 80139a6:	d003      	beq.n	80139b0 <LoRaMacParserJoinAccept+0x16>
 80139a8:	687b      	ldr	r3, [r7, #4]
 80139aa:	681b      	ldr	r3, [r3, #0]
 80139ac:	2b00      	cmp	r3, #0
 80139ae:	d101      	bne.n	80139b4 <LoRaMacParserJoinAccept+0x1a>
    {
        return LORAMAC_PARSER_ERROR_NPE;
 80139b0:	2302      	movs	r3, #2
 80139b2:	e0b9      	b.n	8013b28 <LoRaMacParserJoinAccept+0x18e>
    }

    uint16_t bufItr = 0;
 80139b4:	2300      	movs	r3, #0
 80139b6:	81fb      	strh	r3, [r7, #14]

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 80139b8:	687b      	ldr	r3, [r7, #4]
 80139ba:	681a      	ldr	r2, [r3, #0]
 80139bc:	89fb      	ldrh	r3, [r7, #14]
 80139be:	1c59      	adds	r1, r3, #1
 80139c0:	81f9      	strh	r1, [r7, #14]
 80139c2:	4413      	add	r3, r2
 80139c4:	781a      	ldrb	r2, [r3, #0]
 80139c6:	687b      	ldr	r3, [r7, #4]
 80139c8:	715a      	strb	r2, [r3, #5]

    memcpy1( macMsg->JoinNonce, &macMsg->Buffer[bufItr], 3 );
 80139ca:	687b      	ldr	r3, [r7, #4]
 80139cc:	1d98      	adds	r0, r3, #6
 80139ce:	687b      	ldr	r3, [r7, #4]
 80139d0:	681a      	ldr	r2, [r3, #0]
 80139d2:	89fb      	ldrh	r3, [r7, #14]
 80139d4:	4413      	add	r3, r2
 80139d6:	2203      	movs	r2, #3
 80139d8:	4619      	mov	r1, r3
 80139da:	f002 fe2e 	bl	801663a <memcpy1>
    bufItr = bufItr + 3;
 80139de:	89fb      	ldrh	r3, [r7, #14]
 80139e0:	3303      	adds	r3, #3
 80139e2:	81fb      	strh	r3, [r7, #14]

    memcpy1( macMsg->NetID, &macMsg->Buffer[bufItr], 3 );
 80139e4:	687b      	ldr	r3, [r7, #4]
 80139e6:	f103 0009 	add.w	r0, r3, #9
 80139ea:	687b      	ldr	r3, [r7, #4]
 80139ec:	681a      	ldr	r2, [r3, #0]
 80139ee:	89fb      	ldrh	r3, [r7, #14]
 80139f0:	4413      	add	r3, r2
 80139f2:	2203      	movs	r2, #3
 80139f4:	4619      	mov	r1, r3
 80139f6:	f002 fe20 	bl	801663a <memcpy1>
    bufItr = bufItr + 3;
 80139fa:	89fb      	ldrh	r3, [r7, #14]
 80139fc:	3303      	adds	r3, #3
 80139fe:	81fb      	strh	r3, [r7, #14]

    macMsg->DevAddr = ( uint32_t ) macMsg->Buffer[bufItr++];
 8013a00:	687b      	ldr	r3, [r7, #4]
 8013a02:	681a      	ldr	r2, [r3, #0]
 8013a04:	89fb      	ldrh	r3, [r7, #14]
 8013a06:	1c59      	adds	r1, r3, #1
 8013a08:	81f9      	strh	r1, [r7, #14]
 8013a0a:	4413      	add	r3, r2
 8013a0c:	781b      	ldrb	r3, [r3, #0]
 8013a0e:	461a      	mov	r2, r3
 8013a10:	687b      	ldr	r3, [r7, #4]
 8013a12:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8013a14:	687b      	ldr	r3, [r7, #4]
 8013a16:	681a      	ldr	r2, [r3, #0]
 8013a18:	89fb      	ldrh	r3, [r7, #14]
 8013a1a:	1c59      	adds	r1, r3, #1
 8013a1c:	81f9      	strh	r1, [r7, #14]
 8013a1e:	4413      	add	r3, r2
 8013a20:	781b      	ldrb	r3, [r3, #0]
 8013a22:	021a      	lsls	r2, r3, #8
 8013a24:	687b      	ldr	r3, [r7, #4]
 8013a26:	68db      	ldr	r3, [r3, #12]
 8013a28:	431a      	orrs	r2, r3
 8013a2a:	687b      	ldr	r3, [r7, #4]
 8013a2c:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8013a2e:	687b      	ldr	r3, [r7, #4]
 8013a30:	681a      	ldr	r2, [r3, #0]
 8013a32:	89fb      	ldrh	r3, [r7, #14]
 8013a34:	1c59      	adds	r1, r3, #1
 8013a36:	81f9      	strh	r1, [r7, #14]
 8013a38:	4413      	add	r3, r2
 8013a3a:	781b      	ldrb	r3, [r3, #0]
 8013a3c:	041a      	lsls	r2, r3, #16
 8013a3e:	687b      	ldr	r3, [r7, #4]
 8013a40:	68db      	ldr	r3, [r3, #12]
 8013a42:	431a      	orrs	r2, r3
 8013a44:	687b      	ldr	r3, [r7, #4]
 8013a46:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 8013a48:	687b      	ldr	r3, [r7, #4]
 8013a4a:	681a      	ldr	r2, [r3, #0]
 8013a4c:	89fb      	ldrh	r3, [r7, #14]
 8013a4e:	1c59      	adds	r1, r3, #1
 8013a50:	81f9      	strh	r1, [r7, #14]
 8013a52:	4413      	add	r3, r2
 8013a54:	781b      	ldrb	r3, [r3, #0]
 8013a56:	061a      	lsls	r2, r3, #24
 8013a58:	687b      	ldr	r3, [r7, #4]
 8013a5a:	68db      	ldr	r3, [r3, #12]
 8013a5c:	431a      	orrs	r2, r3
 8013a5e:	687b      	ldr	r3, [r7, #4]
 8013a60:	60da      	str	r2, [r3, #12]

    macMsg->DLSettings.Value = macMsg->Buffer[bufItr++];
 8013a62:	687b      	ldr	r3, [r7, #4]
 8013a64:	681a      	ldr	r2, [r3, #0]
 8013a66:	89fb      	ldrh	r3, [r7, #14]
 8013a68:	1c59      	adds	r1, r3, #1
 8013a6a:	81f9      	strh	r1, [r7, #14]
 8013a6c:	4413      	add	r3, r2
 8013a6e:	781a      	ldrb	r2, [r3, #0]
 8013a70:	687b      	ldr	r3, [r7, #4]
 8013a72:	741a      	strb	r2, [r3, #16]

    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 8013a74:	687b      	ldr	r3, [r7, #4]
 8013a76:	681a      	ldr	r2, [r3, #0]
 8013a78:	89fb      	ldrh	r3, [r7, #14]
 8013a7a:	1c59      	adds	r1, r3, #1
 8013a7c:	81f9      	strh	r1, [r7, #14]
 8013a7e:	4413      	add	r3, r2
 8013a80:	781a      	ldrb	r2, [r3, #0]
 8013a82:	687b      	ldr	r3, [r7, #4]
 8013a84:	745a      	strb	r2, [r3, #17]

    if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) == LORAMAC_CF_LIST_FIELD_SIZE )
 8013a86:	687b      	ldr	r3, [r7, #4]
 8013a88:	791b      	ldrb	r3, [r3, #4]
 8013a8a:	1f1a      	subs	r2, r3, #4
 8013a8c:	89fb      	ldrh	r3, [r7, #14]
 8013a8e:	1ad3      	subs	r3, r2, r3
 8013a90:	2b10      	cmp	r3, #16
 8013a92:	d10e      	bne.n	8013ab2 <LoRaMacParserJoinAccept+0x118>
    {
        memcpy1( macMsg->CFList, &macMsg->Buffer[bufItr], LORAMAC_CF_LIST_FIELD_SIZE );
 8013a94:	687b      	ldr	r3, [r7, #4]
 8013a96:	f103 0012 	add.w	r0, r3, #18
 8013a9a:	687b      	ldr	r3, [r7, #4]
 8013a9c:	681a      	ldr	r2, [r3, #0]
 8013a9e:	89fb      	ldrh	r3, [r7, #14]
 8013aa0:	4413      	add	r3, r2
 8013aa2:	2210      	movs	r2, #16
 8013aa4:	4619      	mov	r1, r3
 8013aa6:	f002 fdc8 	bl	801663a <memcpy1>
        bufItr = bufItr + LORAMAC_CF_LIST_FIELD_SIZE;
 8013aaa:	89fb      	ldrh	r3, [r7, #14]
 8013aac:	3310      	adds	r3, #16
 8013aae:	81fb      	strh	r3, [r7, #14]
 8013ab0:	e008      	b.n	8013ac4 <LoRaMacParserJoinAccept+0x12a>
    }
    else if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) > 0 )
 8013ab2:	687b      	ldr	r3, [r7, #4]
 8013ab4:	791b      	ldrb	r3, [r3, #4]
 8013ab6:	1f1a      	subs	r2, r3, #4
 8013ab8:	89fb      	ldrh	r3, [r7, #14]
 8013aba:	1ad3      	subs	r3, r2, r3
 8013abc:	2b00      	cmp	r3, #0
 8013abe:	dd01      	ble.n	8013ac4 <LoRaMacParserJoinAccept+0x12a>
    {
        return LORAMAC_PARSER_FAIL;
 8013ac0:	2301      	movs	r3, #1
 8013ac2:	e031      	b.n	8013b28 <LoRaMacParserJoinAccept+0x18e>
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[bufItr++];
 8013ac4:	687b      	ldr	r3, [r7, #4]
 8013ac6:	681a      	ldr	r2, [r3, #0]
 8013ac8:	89fb      	ldrh	r3, [r7, #14]
 8013aca:	1c59      	adds	r1, r3, #1
 8013acc:	81f9      	strh	r1, [r7, #14]
 8013ace:	4413      	add	r3, r2
 8013ad0:	781b      	ldrb	r3, [r3, #0]
 8013ad2:	461a      	mov	r2, r3
 8013ad4:	687b      	ldr	r3, [r7, #4]
 8013ad6:	625a      	str	r2, [r3, #36]	@ 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8013ad8:	687b      	ldr	r3, [r7, #4]
 8013ada:	681a      	ldr	r2, [r3, #0]
 8013adc:	89fb      	ldrh	r3, [r7, #14]
 8013ade:	1c59      	adds	r1, r3, #1
 8013ae0:	81f9      	strh	r1, [r7, #14]
 8013ae2:	4413      	add	r3, r2
 8013ae4:	781b      	ldrb	r3, [r3, #0]
 8013ae6:	021a      	lsls	r2, r3, #8
 8013ae8:	687b      	ldr	r3, [r7, #4]
 8013aea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013aec:	431a      	orrs	r2, r3
 8013aee:	687b      	ldr	r3, [r7, #4]
 8013af0:	625a      	str	r2, [r3, #36]	@ 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8013af2:	687b      	ldr	r3, [r7, #4]
 8013af4:	681a      	ldr	r2, [r3, #0]
 8013af6:	89fb      	ldrh	r3, [r7, #14]
 8013af8:	1c59      	adds	r1, r3, #1
 8013afa:	81f9      	strh	r1, [r7, #14]
 8013afc:	4413      	add	r3, r2
 8013afe:	781b      	ldrb	r3, [r3, #0]
 8013b00:	041a      	lsls	r2, r3, #16
 8013b02:	687b      	ldr	r3, [r7, #4]
 8013b04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013b06:	431a      	orrs	r2, r3
 8013b08:	687b      	ldr	r3, [r7, #4]
 8013b0a:	625a      	str	r2, [r3, #36]	@ 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 8013b0c:	687b      	ldr	r3, [r7, #4]
 8013b0e:	681a      	ldr	r2, [r3, #0]
 8013b10:	89fb      	ldrh	r3, [r7, #14]
 8013b12:	1c59      	adds	r1, r3, #1
 8013b14:	81f9      	strh	r1, [r7, #14]
 8013b16:	4413      	add	r3, r2
 8013b18:	781b      	ldrb	r3, [r3, #0]
 8013b1a:	061a      	lsls	r2, r3, #24
 8013b1c:	687b      	ldr	r3, [r7, #4]
 8013b1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013b20:	431a      	orrs	r2, r3
 8013b22:	687b      	ldr	r3, [r7, #4]
 8013b24:	625a      	str	r2, [r3, #36]	@ 0x24

    return LORAMAC_PARSER_SUCCESS;
 8013b26:	2300      	movs	r3, #0
}
 8013b28:	4618      	mov	r0, r3
 8013b2a:	3710      	adds	r7, #16
 8013b2c:	46bd      	mov	sp, r7
 8013b2e:	bd80      	pop	{r7, pc}

08013b30 <LoRaMacParserData>:

LoRaMacParserStatus_t LoRaMacParserData( LoRaMacMessageData_t* macMsg )
{
 8013b30:	b580      	push	{r7, lr}
 8013b32:	b084      	sub	sp, #16
 8013b34:	af00      	add	r7, sp, #0
 8013b36:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8013b38:	687b      	ldr	r3, [r7, #4]
 8013b3a:	2b00      	cmp	r3, #0
 8013b3c:	d003      	beq.n	8013b46 <LoRaMacParserData+0x16>
 8013b3e:	687b      	ldr	r3, [r7, #4]
 8013b40:	681b      	ldr	r3, [r3, #0]
 8013b42:	2b00      	cmp	r3, #0
 8013b44:	d101      	bne.n	8013b4a <LoRaMacParserData+0x1a>
    {
        return LORAMAC_PARSER_ERROR_NPE;
 8013b46:	2302      	movs	r3, #2
 8013b48:	e0e0      	b.n	8013d0c <LoRaMacParserData+0x1dc>
    }

    uint16_t bufItr = 0;
 8013b4a:	2300      	movs	r3, #0
 8013b4c:	81fb      	strh	r3, [r7, #14]

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 8013b4e:	687b      	ldr	r3, [r7, #4]
 8013b50:	681a      	ldr	r2, [r3, #0]
 8013b52:	89fb      	ldrh	r3, [r7, #14]
 8013b54:	1c59      	adds	r1, r3, #1
 8013b56:	81f9      	strh	r1, [r7, #14]
 8013b58:	4413      	add	r3, r2
 8013b5a:	781a      	ldrb	r2, [r3, #0]
 8013b5c:	687b      	ldr	r3, [r7, #4]
 8013b5e:	715a      	strb	r2, [r3, #5]

    macMsg->FHDR.DevAddr = macMsg->Buffer[bufItr++];
 8013b60:	687b      	ldr	r3, [r7, #4]
 8013b62:	681a      	ldr	r2, [r3, #0]
 8013b64:	89fb      	ldrh	r3, [r7, #14]
 8013b66:	1c59      	adds	r1, r3, #1
 8013b68:	81f9      	strh	r1, [r7, #14]
 8013b6a:	4413      	add	r3, r2
 8013b6c:	781b      	ldrb	r3, [r3, #0]
 8013b6e:	461a      	mov	r2, r3
 8013b70:	687b      	ldr	r3, [r7, #4]
 8013b72:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8013b74:	687b      	ldr	r3, [r7, #4]
 8013b76:	681a      	ldr	r2, [r3, #0]
 8013b78:	89fb      	ldrh	r3, [r7, #14]
 8013b7a:	1c59      	adds	r1, r3, #1
 8013b7c:	81f9      	strh	r1, [r7, #14]
 8013b7e:	4413      	add	r3, r2
 8013b80:	781b      	ldrb	r3, [r3, #0]
 8013b82:	021a      	lsls	r2, r3, #8
 8013b84:	687b      	ldr	r3, [r7, #4]
 8013b86:	689b      	ldr	r3, [r3, #8]
 8013b88:	431a      	orrs	r2, r3
 8013b8a:	687b      	ldr	r3, [r7, #4]
 8013b8c:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8013b8e:	687b      	ldr	r3, [r7, #4]
 8013b90:	681a      	ldr	r2, [r3, #0]
 8013b92:	89fb      	ldrh	r3, [r7, #14]
 8013b94:	1c59      	adds	r1, r3, #1
 8013b96:	81f9      	strh	r1, [r7, #14]
 8013b98:	4413      	add	r3, r2
 8013b9a:	781b      	ldrb	r3, [r3, #0]
 8013b9c:	041a      	lsls	r2, r3, #16
 8013b9e:	687b      	ldr	r3, [r7, #4]
 8013ba0:	689b      	ldr	r3, [r3, #8]
 8013ba2:	431a      	orrs	r2, r3
 8013ba4:	687b      	ldr	r3, [r7, #4]
 8013ba6:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 8013ba8:	687b      	ldr	r3, [r7, #4]
 8013baa:	681a      	ldr	r2, [r3, #0]
 8013bac:	89fb      	ldrh	r3, [r7, #14]
 8013bae:	1c59      	adds	r1, r3, #1
 8013bb0:	81f9      	strh	r1, [r7, #14]
 8013bb2:	4413      	add	r3, r2
 8013bb4:	781b      	ldrb	r3, [r3, #0]
 8013bb6:	061a      	lsls	r2, r3, #24
 8013bb8:	687b      	ldr	r3, [r7, #4]
 8013bba:	689b      	ldr	r3, [r3, #8]
 8013bbc:	431a      	orrs	r2, r3
 8013bbe:	687b      	ldr	r3, [r7, #4]
 8013bc0:	609a      	str	r2, [r3, #8]

    macMsg->FHDR.FCtrl.Value = macMsg->Buffer[bufItr++];
 8013bc2:	687b      	ldr	r3, [r7, #4]
 8013bc4:	681a      	ldr	r2, [r3, #0]
 8013bc6:	89fb      	ldrh	r3, [r7, #14]
 8013bc8:	1c59      	adds	r1, r3, #1
 8013bca:	81f9      	strh	r1, [r7, #14]
 8013bcc:	4413      	add	r3, r2
 8013bce:	781a      	ldrb	r2, [r3, #0]
 8013bd0:	687b      	ldr	r3, [r7, #4]
 8013bd2:	731a      	strb	r2, [r3, #12]

    macMsg->FHDR.FCnt = macMsg->Buffer[bufItr++];
 8013bd4:	687b      	ldr	r3, [r7, #4]
 8013bd6:	681a      	ldr	r2, [r3, #0]
 8013bd8:	89fb      	ldrh	r3, [r7, #14]
 8013bda:	1c59      	adds	r1, r3, #1
 8013bdc:	81f9      	strh	r1, [r7, #14]
 8013bde:	4413      	add	r3, r2
 8013be0:	781b      	ldrb	r3, [r3, #0]
 8013be2:	461a      	mov	r2, r3
 8013be4:	687b      	ldr	r3, [r7, #4]
 8013be6:	81da      	strh	r2, [r3, #14]
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;
 8013be8:	687b      	ldr	r3, [r7, #4]
 8013bea:	681a      	ldr	r2, [r3, #0]
 8013bec:	89fb      	ldrh	r3, [r7, #14]
 8013bee:	1c59      	adds	r1, r3, #1
 8013bf0:	81f9      	strh	r1, [r7, #14]
 8013bf2:	4413      	add	r3, r2
 8013bf4:	781b      	ldrb	r3, [r3, #0]
 8013bf6:	0219      	lsls	r1, r3, #8
 8013bf8:	687b      	ldr	r3, [r7, #4]
 8013bfa:	89db      	ldrh	r3, [r3, #14]
 8013bfc:	b21a      	sxth	r2, r3
 8013bfe:	b20b      	sxth	r3, r1
 8013c00:	4313      	orrs	r3, r2
 8013c02:	b21b      	sxth	r3, r3
 8013c04:	b29a      	uxth	r2, r3
 8013c06:	687b      	ldr	r3, [r7, #4]
 8013c08:	81da      	strh	r2, [r3, #14]

    memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 8013c0a:	687b      	ldr	r3, [r7, #4]
 8013c0c:	f103 0010 	add.w	r0, r3, #16
 8013c10:	687b      	ldr	r3, [r7, #4]
 8013c12:	681a      	ldr	r2, [r3, #0]
 8013c14:	89fb      	ldrh	r3, [r7, #14]
 8013c16:	18d1      	adds	r1, r2, r3
 8013c18:	687b      	ldr	r3, [r7, #4]
 8013c1a:	7b1b      	ldrb	r3, [r3, #12]
 8013c1c:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8013c20:	b2db      	uxtb	r3, r3
 8013c22:	461a      	mov	r2, r3
 8013c24:	f002 fd09 	bl	801663a <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8013c28:	687b      	ldr	r3, [r7, #4]
 8013c2a:	7b1b      	ldrb	r3, [r3, #12]
 8013c2c:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8013c30:	b2db      	uxtb	r3, r3
 8013c32:	461a      	mov	r2, r3
 8013c34:	89fb      	ldrh	r3, [r7, #14]
 8013c36:	4413      	add	r3, r2
 8013c38:	81fb      	strh	r3, [r7, #14]

    // Initialize anyway with zero.
    macMsg->FPort = 0;
 8013c3a:	687b      	ldr	r3, [r7, #4]
 8013c3c:	2200      	movs	r2, #0
 8013c3e:	f883 2020 	strb.w	r2, [r3, #32]
    macMsg->FRMPayloadSize = 0;
 8013c42:	687b      	ldr	r3, [r7, #4]
 8013c44:	2200      	movs	r2, #0
 8013c46:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

    if( ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE ) > 0 )
 8013c4a:	687b      	ldr	r3, [r7, #4]
 8013c4c:	791b      	ldrb	r3, [r3, #4]
 8013c4e:	461a      	mov	r2, r3
 8013c50:	89fb      	ldrh	r3, [r7, #14]
 8013c52:	1ad3      	subs	r3, r2, r3
 8013c54:	2b04      	cmp	r3, #4
 8013c56:	dd27      	ble.n	8013ca8 <LoRaMacParserData+0x178>
    {
        macMsg->FPort = macMsg->Buffer[bufItr++];
 8013c58:	687b      	ldr	r3, [r7, #4]
 8013c5a:	681a      	ldr	r2, [r3, #0]
 8013c5c:	89fb      	ldrh	r3, [r7, #14]
 8013c5e:	1c59      	adds	r1, r3, #1
 8013c60:	81f9      	strh	r1, [r7, #14]
 8013c62:	4413      	add	r3, r2
 8013c64:	781a      	ldrb	r2, [r3, #0]
 8013c66:	687b      	ldr	r3, [r7, #4]
 8013c68:	f883 2020 	strb.w	r2, [r3, #32]

        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
 8013c6c:	687b      	ldr	r3, [r7, #4]
 8013c6e:	791a      	ldrb	r2, [r3, #4]
 8013c70:	89fb      	ldrh	r3, [r7, #14]
 8013c72:	b2db      	uxtb	r3, r3
 8013c74:	1ad3      	subs	r3, r2, r3
 8013c76:	b2db      	uxtb	r3, r3
 8013c78:	3b04      	subs	r3, #4
 8013c7a:	b2da      	uxtb	r2, r3
 8013c7c:	687b      	ldr	r3, [r7, #4]
 8013c7e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        memcpy1( macMsg->FRMPayload, &macMsg->Buffer[bufItr], macMsg->FRMPayloadSize );
 8013c82:	687b      	ldr	r3, [r7, #4]
 8013c84:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8013c86:	687b      	ldr	r3, [r7, #4]
 8013c88:	681a      	ldr	r2, [r3, #0]
 8013c8a:	89fb      	ldrh	r3, [r7, #14]
 8013c8c:	18d1      	adds	r1, r2, r3
 8013c8e:	687b      	ldr	r3, [r7, #4]
 8013c90:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8013c94:	461a      	mov	r2, r3
 8013c96:	f002 fcd0 	bl	801663a <memcpy1>
        bufItr = bufItr + macMsg->FRMPayloadSize;
 8013c9a:	687b      	ldr	r3, [r7, #4]
 8013c9c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8013ca0:	461a      	mov	r2, r3
 8013ca2:	89fb      	ldrh	r3, [r7, #14]
 8013ca4:	4413      	add	r3, r2
 8013ca6:	81fb      	strh	r3, [r7, #14]
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE )];
 8013ca8:	687b      	ldr	r3, [r7, #4]
 8013caa:	681a      	ldr	r2, [r3, #0]
 8013cac:	687b      	ldr	r3, [r7, #4]
 8013cae:	791b      	ldrb	r3, [r3, #4]
 8013cb0:	3b04      	subs	r3, #4
 8013cb2:	4413      	add	r3, r2
 8013cb4:	781b      	ldrb	r3, [r3, #0]
 8013cb6:	461a      	mov	r2, r3
 8013cb8:	687b      	ldr	r3, [r7, #4]
 8013cba:	62da      	str	r2, [r3, #44]	@ 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 1] << 8 );
 8013cbc:	687b      	ldr	r3, [r7, #4]
 8013cbe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013cc0:	687b      	ldr	r3, [r7, #4]
 8013cc2:	6819      	ldr	r1, [r3, #0]
 8013cc4:	687b      	ldr	r3, [r7, #4]
 8013cc6:	791b      	ldrb	r3, [r3, #4]
 8013cc8:	3b03      	subs	r3, #3
 8013cca:	440b      	add	r3, r1
 8013ccc:	781b      	ldrb	r3, [r3, #0]
 8013cce:	021b      	lsls	r3, r3, #8
 8013cd0:	431a      	orrs	r2, r3
 8013cd2:	687b      	ldr	r3, [r7, #4]
 8013cd4:	62da      	str	r2, [r3, #44]	@ 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 2] << 16 );
 8013cd6:	687b      	ldr	r3, [r7, #4]
 8013cd8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013cda:	687b      	ldr	r3, [r7, #4]
 8013cdc:	6819      	ldr	r1, [r3, #0]
 8013cde:	687b      	ldr	r3, [r7, #4]
 8013ce0:	791b      	ldrb	r3, [r3, #4]
 8013ce2:	3b02      	subs	r3, #2
 8013ce4:	440b      	add	r3, r1
 8013ce6:	781b      	ldrb	r3, [r3, #0]
 8013ce8:	041b      	lsls	r3, r3, #16
 8013cea:	431a      	orrs	r2, r3
 8013cec:	687b      	ldr	r3, [r7, #4]
 8013cee:	62da      	str	r2, [r3, #44]	@ 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 3] << 24 );
 8013cf0:	687b      	ldr	r3, [r7, #4]
 8013cf2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013cf4:	687b      	ldr	r3, [r7, #4]
 8013cf6:	6819      	ldr	r1, [r3, #0]
 8013cf8:	687b      	ldr	r3, [r7, #4]
 8013cfa:	791b      	ldrb	r3, [r3, #4]
 8013cfc:	3b01      	subs	r3, #1
 8013cfe:	440b      	add	r3, r1
 8013d00:	781b      	ldrb	r3, [r3, #0]
 8013d02:	061b      	lsls	r3, r3, #24
 8013d04:	431a      	orrs	r2, r3
 8013d06:	687b      	ldr	r3, [r7, #4]
 8013d08:	62da      	str	r2, [r3, #44]	@ 0x2c

    return LORAMAC_PARSER_SUCCESS;
 8013d0a:	2300      	movs	r3, #0
}
 8013d0c:	4618      	mov	r0, r3
 8013d0e:	3710      	adds	r7, #16
 8013d10:	46bd      	mov	sp, r7
 8013d12:	bd80      	pop	{r7, pc}

08013d14 <LoRaMacSerializerJoinRequest>:
 */
#include "LoRaMacSerializer.h"
#include "utilities.h"

LoRaMacSerializerStatus_t LoRaMacSerializerJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 8013d14:	b580      	push	{r7, lr}
 8013d16:	b084      	sub	sp, #16
 8013d18:	af00      	add	r7, sp, #0
 8013d1a:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8013d1c:	687b      	ldr	r3, [r7, #4]
 8013d1e:	2b00      	cmp	r3, #0
 8013d20:	d003      	beq.n	8013d2a <LoRaMacSerializerJoinRequest+0x16>
 8013d22:	687b      	ldr	r3, [r7, #4]
 8013d24:	681b      	ldr	r3, [r3, #0]
 8013d26:	2b00      	cmp	r3, #0
 8013d28:	d101      	bne.n	8013d2e <LoRaMacSerializerJoinRequest+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 8013d2a:	2301      	movs	r3, #1
 8013d2c:	e070      	b.n	8013e10 <LoRaMacSerializerJoinRequest+0xfc>
    }

    uint16_t bufItr = 0;
 8013d2e:	2300      	movs	r3, #0
 8013d30:	81fb      	strh	r3, [r7, #14]

    // Check macMsg->BufSize
    if( macMsg->BufSize < LORAMAC_JOIN_REQ_MSG_SIZE )
 8013d32:	687b      	ldr	r3, [r7, #4]
 8013d34:	791b      	ldrb	r3, [r3, #4]
 8013d36:	2b16      	cmp	r3, #22
 8013d38:	d801      	bhi.n	8013d3e <LoRaMacSerializerJoinRequest+0x2a>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 8013d3a:	2302      	movs	r3, #2
 8013d3c:	e068      	b.n	8013e10 <LoRaMacSerializerJoinRequest+0xfc>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 8013d3e:	687b      	ldr	r3, [r7, #4]
 8013d40:	681a      	ldr	r2, [r3, #0]
 8013d42:	89fb      	ldrh	r3, [r7, #14]
 8013d44:	1c59      	adds	r1, r3, #1
 8013d46:	81f9      	strh	r1, [r7, #14]
 8013d48:	4413      	add	r3, r2
 8013d4a:	687a      	ldr	r2, [r7, #4]
 8013d4c:	7952      	ldrb	r2, [r2, #5]
 8013d4e:	701a      	strb	r2, [r3, #0]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->JoinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
 8013d50:	687b      	ldr	r3, [r7, #4]
 8013d52:	681a      	ldr	r2, [r3, #0]
 8013d54:	89fb      	ldrh	r3, [r7, #14]
 8013d56:	18d0      	adds	r0, r2, r3
 8013d58:	687b      	ldr	r3, [r7, #4]
 8013d5a:	3306      	adds	r3, #6
 8013d5c:	2208      	movs	r2, #8
 8013d5e:	4619      	mov	r1, r3
 8013d60:	f002 fc86 	bl	8016670 <memcpyr>
    bufItr += LORAMAC_JOIN_EUI_FIELD_SIZE;
 8013d64:	89fb      	ldrh	r3, [r7, #14]
 8013d66:	3308      	adds	r3, #8
 8013d68:	81fb      	strh	r3, [r7, #14]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->DevEUI, LORAMAC_DEV_EUI_FIELD_SIZE );
 8013d6a:	687b      	ldr	r3, [r7, #4]
 8013d6c:	681a      	ldr	r2, [r3, #0]
 8013d6e:	89fb      	ldrh	r3, [r7, #14]
 8013d70:	18d0      	adds	r0, r2, r3
 8013d72:	687b      	ldr	r3, [r7, #4]
 8013d74:	330e      	adds	r3, #14
 8013d76:	2208      	movs	r2, #8
 8013d78:	4619      	mov	r1, r3
 8013d7a:	f002 fc79 	bl	8016670 <memcpyr>
    bufItr += LORAMAC_DEV_EUI_FIELD_SIZE;
 8013d7e:	89fb      	ldrh	r3, [r7, #14]
 8013d80:	3308      	adds	r3, #8
 8013d82:	81fb      	strh	r3, [r7, #14]

    macMsg->Buffer[bufItr++] = macMsg->DevNonce & 0xFF;
 8013d84:	687b      	ldr	r3, [r7, #4]
 8013d86:	8ad9      	ldrh	r1, [r3, #22]
 8013d88:	687b      	ldr	r3, [r7, #4]
 8013d8a:	681a      	ldr	r2, [r3, #0]
 8013d8c:	89fb      	ldrh	r3, [r7, #14]
 8013d8e:	1c58      	adds	r0, r3, #1
 8013d90:	81f8      	strh	r0, [r7, #14]
 8013d92:	4413      	add	r3, r2
 8013d94:	b2ca      	uxtb	r2, r1
 8013d96:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->DevNonce >> 8 ) & 0xFF;
 8013d98:	687b      	ldr	r3, [r7, #4]
 8013d9a:	8adb      	ldrh	r3, [r3, #22]
 8013d9c:	0a1b      	lsrs	r3, r3, #8
 8013d9e:	b299      	uxth	r1, r3
 8013da0:	687b      	ldr	r3, [r7, #4]
 8013da2:	681a      	ldr	r2, [r3, #0]
 8013da4:	89fb      	ldrh	r3, [r7, #14]
 8013da6:	1c58      	adds	r0, r3, #1
 8013da8:	81f8      	strh	r0, [r7, #14]
 8013daa:	4413      	add	r3, r2
 8013dac:	b2ca      	uxtb	r2, r1
 8013dae:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 8013db0:	687b      	ldr	r3, [r7, #4]
 8013db2:	6999      	ldr	r1, [r3, #24]
 8013db4:	687b      	ldr	r3, [r7, #4]
 8013db6:	681a      	ldr	r2, [r3, #0]
 8013db8:	89fb      	ldrh	r3, [r7, #14]
 8013dba:	1c58      	adds	r0, r3, #1
 8013dbc:	81f8      	strh	r0, [r7, #14]
 8013dbe:	4413      	add	r3, r2
 8013dc0:	b2ca      	uxtb	r2, r1
 8013dc2:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 8013dc4:	687b      	ldr	r3, [r7, #4]
 8013dc6:	699b      	ldr	r3, [r3, #24]
 8013dc8:	0a19      	lsrs	r1, r3, #8
 8013dca:	687b      	ldr	r3, [r7, #4]
 8013dcc:	681a      	ldr	r2, [r3, #0]
 8013dce:	89fb      	ldrh	r3, [r7, #14]
 8013dd0:	1c58      	adds	r0, r3, #1
 8013dd2:	81f8      	strh	r0, [r7, #14]
 8013dd4:	4413      	add	r3, r2
 8013dd6:	b2ca      	uxtb	r2, r1
 8013dd8:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 8013dda:	687b      	ldr	r3, [r7, #4]
 8013ddc:	699b      	ldr	r3, [r3, #24]
 8013dde:	0c19      	lsrs	r1, r3, #16
 8013de0:	687b      	ldr	r3, [r7, #4]
 8013de2:	681a      	ldr	r2, [r3, #0]
 8013de4:	89fb      	ldrh	r3, [r7, #14]
 8013de6:	1c58      	adds	r0, r3, #1
 8013de8:	81f8      	strh	r0, [r7, #14]
 8013dea:	4413      	add	r3, r2
 8013dec:	b2ca      	uxtb	r2, r1
 8013dee:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 8013df0:	687b      	ldr	r3, [r7, #4]
 8013df2:	699b      	ldr	r3, [r3, #24]
 8013df4:	0e19      	lsrs	r1, r3, #24
 8013df6:	687b      	ldr	r3, [r7, #4]
 8013df8:	681a      	ldr	r2, [r3, #0]
 8013dfa:	89fb      	ldrh	r3, [r7, #14]
 8013dfc:	1c58      	adds	r0, r3, #1
 8013dfe:	81f8      	strh	r0, [r7, #14]
 8013e00:	4413      	add	r3, r2
 8013e02:	b2ca      	uxtb	r2, r1
 8013e04:	701a      	strb	r2, [r3, #0]

    macMsg->BufSize = bufItr;
 8013e06:	89fb      	ldrh	r3, [r7, #14]
 8013e08:	b2da      	uxtb	r2, r3
 8013e0a:	687b      	ldr	r3, [r7, #4]
 8013e0c:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 8013e0e:	2300      	movs	r3, #0
}
 8013e10:	4618      	mov	r0, r3
 8013e12:	3710      	adds	r7, #16
 8013e14:	46bd      	mov	sp, r7
 8013e16:	bd80      	pop	{r7, pc}

08013e18 <LoRaMacSerializerData>:

    return LORAMAC_SERIALIZER_SUCCESS;
}

LoRaMacSerializerStatus_t LoRaMacSerializerData( LoRaMacMessageData_t* macMsg )
{
 8013e18:	b580      	push	{r7, lr}
 8013e1a:	b084      	sub	sp, #16
 8013e1c:	af00      	add	r7, sp, #0
 8013e1e:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8013e20:	687b      	ldr	r3, [r7, #4]
 8013e22:	2b00      	cmp	r3, #0
 8013e24:	d003      	beq.n	8013e2e <LoRaMacSerializerData+0x16>
 8013e26:	687b      	ldr	r3, [r7, #4]
 8013e28:	681b      	ldr	r3, [r3, #0]
 8013e2a:	2b00      	cmp	r3, #0
 8013e2c:	d101      	bne.n	8013e32 <LoRaMacSerializerData+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 8013e2e:	2301      	movs	r3, #1
 8013e30:	e0e3      	b.n	8013ffa <LoRaMacSerializerData+0x1e2>
    }

    uint16_t bufItr = 0;
 8013e32:	2300      	movs	r3, #0
 8013e34:	81fb      	strh	r3, [r7, #14]

    // Check macMsg->BufSize
    uint16_t computedBufSize =   LORAMAC_MHDR_FIELD_SIZE
 8013e36:	2308      	movs	r3, #8
 8013e38:	81bb      	strh	r3, [r7, #12]
                               + LORAMAC_FHDR_DEV_ADDR_FIELD_SIZE
                               + LORAMAC_FHDR_F_CTRL_FIELD_SIZE
                               + LORAMAC_FHDR_F_CNT_FIELD_SIZE;

    computedBufSize += macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8013e3a:	687b      	ldr	r3, [r7, #4]
 8013e3c:	7b1b      	ldrb	r3, [r3, #12]
 8013e3e:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8013e42:	b2db      	uxtb	r3, r3
 8013e44:	461a      	mov	r2, r3
 8013e46:	89bb      	ldrh	r3, [r7, #12]
 8013e48:	4413      	add	r3, r2
 8013e4a:	81bb      	strh	r3, [r7, #12]

    if( macMsg->FRMPayloadSize > 0 )
 8013e4c:	687b      	ldr	r3, [r7, #4]
 8013e4e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8013e52:	2b00      	cmp	r3, #0
 8013e54:	d002      	beq.n	8013e5c <LoRaMacSerializerData+0x44>
    {
        computedBufSize += LORAMAC_F_PORT_FIELD_SIZE;
 8013e56:	89bb      	ldrh	r3, [r7, #12]
 8013e58:	3301      	adds	r3, #1
 8013e5a:	81bb      	strh	r3, [r7, #12]
    }

    computedBufSize += macMsg->FRMPayloadSize;
 8013e5c:	687b      	ldr	r3, [r7, #4]
 8013e5e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8013e62:	461a      	mov	r2, r3
 8013e64:	89bb      	ldrh	r3, [r7, #12]
 8013e66:	4413      	add	r3, r2
 8013e68:	81bb      	strh	r3, [r7, #12]
    computedBufSize += LORAMAC_MIC_FIELD_SIZE;
 8013e6a:	89bb      	ldrh	r3, [r7, #12]
 8013e6c:	3304      	adds	r3, #4
 8013e6e:	81bb      	strh	r3, [r7, #12]

    if( macMsg->BufSize < computedBufSize )
 8013e70:	687b      	ldr	r3, [r7, #4]
 8013e72:	791b      	ldrb	r3, [r3, #4]
 8013e74:	461a      	mov	r2, r3
 8013e76:	89bb      	ldrh	r3, [r7, #12]
 8013e78:	4293      	cmp	r3, r2
 8013e7a:	d901      	bls.n	8013e80 <LoRaMacSerializerData+0x68>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 8013e7c:	2302      	movs	r3, #2
 8013e7e:	e0bc      	b.n	8013ffa <LoRaMacSerializerData+0x1e2>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 8013e80:	687b      	ldr	r3, [r7, #4]
 8013e82:	681a      	ldr	r2, [r3, #0]
 8013e84:	89fb      	ldrh	r3, [r7, #14]
 8013e86:	1c59      	adds	r1, r3, #1
 8013e88:	81f9      	strh	r1, [r7, #14]
 8013e8a:	4413      	add	r3, r2
 8013e8c:	687a      	ldr	r2, [r7, #4]
 8013e8e:	7952      	ldrb	r2, [r2, #5]
 8013e90:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr ) & 0xFF;
 8013e92:	687b      	ldr	r3, [r7, #4]
 8013e94:	6899      	ldr	r1, [r3, #8]
 8013e96:	687b      	ldr	r3, [r7, #4]
 8013e98:	681a      	ldr	r2, [r3, #0]
 8013e9a:	89fb      	ldrh	r3, [r7, #14]
 8013e9c:	1c58      	adds	r0, r3, #1
 8013e9e:	81f8      	strh	r0, [r7, #14]
 8013ea0:	4413      	add	r3, r2
 8013ea2:	b2ca      	uxtb	r2, r1
 8013ea4:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 8 ) & 0xFF;
 8013ea6:	687b      	ldr	r3, [r7, #4]
 8013ea8:	689b      	ldr	r3, [r3, #8]
 8013eaa:	0a19      	lsrs	r1, r3, #8
 8013eac:	687b      	ldr	r3, [r7, #4]
 8013eae:	681a      	ldr	r2, [r3, #0]
 8013eb0:	89fb      	ldrh	r3, [r7, #14]
 8013eb2:	1c58      	adds	r0, r3, #1
 8013eb4:	81f8      	strh	r0, [r7, #14]
 8013eb6:	4413      	add	r3, r2
 8013eb8:	b2ca      	uxtb	r2, r1
 8013eba:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 16 ) & 0xFF;
 8013ebc:	687b      	ldr	r3, [r7, #4]
 8013ebe:	689b      	ldr	r3, [r3, #8]
 8013ec0:	0c19      	lsrs	r1, r3, #16
 8013ec2:	687b      	ldr	r3, [r7, #4]
 8013ec4:	681a      	ldr	r2, [r3, #0]
 8013ec6:	89fb      	ldrh	r3, [r7, #14]
 8013ec8:	1c58      	adds	r0, r3, #1
 8013eca:	81f8      	strh	r0, [r7, #14]
 8013ecc:	4413      	add	r3, r2
 8013ece:	b2ca      	uxtb	r2, r1
 8013ed0:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 24 ) & 0xFF;
 8013ed2:	687b      	ldr	r3, [r7, #4]
 8013ed4:	689b      	ldr	r3, [r3, #8]
 8013ed6:	0e19      	lsrs	r1, r3, #24
 8013ed8:	687b      	ldr	r3, [r7, #4]
 8013eda:	681a      	ldr	r2, [r3, #0]
 8013edc:	89fb      	ldrh	r3, [r7, #14]
 8013ede:	1c58      	adds	r0, r3, #1
 8013ee0:	81f8      	strh	r0, [r7, #14]
 8013ee2:	4413      	add	r3, r2
 8013ee4:	b2ca      	uxtb	r2, r1
 8013ee6:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCtrl.Value;
 8013ee8:	687b      	ldr	r3, [r7, #4]
 8013eea:	681a      	ldr	r2, [r3, #0]
 8013eec:	89fb      	ldrh	r3, [r7, #14]
 8013eee:	1c59      	adds	r1, r3, #1
 8013ef0:	81f9      	strh	r1, [r7, #14]
 8013ef2:	4413      	add	r3, r2
 8013ef4:	687a      	ldr	r2, [r7, #4]
 8013ef6:	7b12      	ldrb	r2, [r2, #12]
 8013ef8:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCnt & 0xFF;
 8013efa:	687b      	ldr	r3, [r7, #4]
 8013efc:	89d9      	ldrh	r1, [r3, #14]
 8013efe:	687b      	ldr	r3, [r7, #4]
 8013f00:	681a      	ldr	r2, [r3, #0]
 8013f02:	89fb      	ldrh	r3, [r7, #14]
 8013f04:	1c58      	adds	r0, r3, #1
 8013f06:	81f8      	strh	r0, [r7, #14]
 8013f08:	4413      	add	r3, r2
 8013f0a:	b2ca      	uxtb	r2, r1
 8013f0c:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.FCnt >> 8 ) & 0xFF;
 8013f0e:	687b      	ldr	r3, [r7, #4]
 8013f10:	89db      	ldrh	r3, [r3, #14]
 8013f12:	0a1b      	lsrs	r3, r3, #8
 8013f14:	b299      	uxth	r1, r3
 8013f16:	687b      	ldr	r3, [r7, #4]
 8013f18:	681a      	ldr	r2, [r3, #0]
 8013f1a:	89fb      	ldrh	r3, [r7, #14]
 8013f1c:	1c58      	adds	r0, r3, #1
 8013f1e:	81f8      	strh	r0, [r7, #14]
 8013f20:	4413      	add	r3, r2
 8013f22:	b2ca      	uxtb	r2, r1
 8013f24:	701a      	strb	r2, [r3, #0]

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FHDR.FOpts, macMsg->FHDR.FCtrl.Bits.FOptsLen );
 8013f26:	687b      	ldr	r3, [r7, #4]
 8013f28:	681a      	ldr	r2, [r3, #0]
 8013f2a:	89fb      	ldrh	r3, [r7, #14]
 8013f2c:	18d0      	adds	r0, r2, r3
 8013f2e:	687b      	ldr	r3, [r7, #4]
 8013f30:	f103 0110 	add.w	r1, r3, #16
 8013f34:	687b      	ldr	r3, [r7, #4]
 8013f36:	7b1b      	ldrb	r3, [r3, #12]
 8013f38:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8013f3c:	b2db      	uxtb	r3, r3
 8013f3e:	461a      	mov	r2, r3
 8013f40:	f002 fb7b 	bl	801663a <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8013f44:	687b      	ldr	r3, [r7, #4]
 8013f46:	7b1b      	ldrb	r3, [r3, #12]
 8013f48:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8013f4c:	b2db      	uxtb	r3, r3
 8013f4e:	461a      	mov	r2, r3
 8013f50:	89fb      	ldrh	r3, [r7, #14]
 8013f52:	4413      	add	r3, r2
 8013f54:	81fb      	strh	r3, [r7, #14]

    if( macMsg->FRMPayloadSize > 0 )
 8013f56:	687b      	ldr	r3, [r7, #4]
 8013f58:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8013f5c:	2b00      	cmp	r3, #0
 8013f5e:	d009      	beq.n	8013f74 <LoRaMacSerializerData+0x15c>
    {
        macMsg->Buffer[bufItr++] = macMsg->FPort;
 8013f60:	687b      	ldr	r3, [r7, #4]
 8013f62:	681a      	ldr	r2, [r3, #0]
 8013f64:	89fb      	ldrh	r3, [r7, #14]
 8013f66:	1c59      	adds	r1, r3, #1
 8013f68:	81f9      	strh	r1, [r7, #14]
 8013f6a:	4413      	add	r3, r2
 8013f6c:	687a      	ldr	r2, [r7, #4]
 8013f6e:	f892 2020 	ldrb.w	r2, [r2, #32]
 8013f72:	701a      	strb	r2, [r3, #0]
    }

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FRMPayload, macMsg->FRMPayloadSize );
 8013f74:	687b      	ldr	r3, [r7, #4]
 8013f76:	681a      	ldr	r2, [r3, #0]
 8013f78:	89fb      	ldrh	r3, [r7, #14]
 8013f7a:	18d0      	adds	r0, r2, r3
 8013f7c:	687b      	ldr	r3, [r7, #4]
 8013f7e:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8013f80:	687b      	ldr	r3, [r7, #4]
 8013f82:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8013f86:	461a      	mov	r2, r3
 8013f88:	f002 fb57 	bl	801663a <memcpy1>
    bufItr = bufItr + macMsg->FRMPayloadSize;
 8013f8c:	687b      	ldr	r3, [r7, #4]
 8013f8e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8013f92:	461a      	mov	r2, r3
 8013f94:	89fb      	ldrh	r3, [r7, #14]
 8013f96:	4413      	add	r3, r2
 8013f98:	81fb      	strh	r3, [r7, #14]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 8013f9a:	687b      	ldr	r3, [r7, #4]
 8013f9c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8013f9e:	687b      	ldr	r3, [r7, #4]
 8013fa0:	681a      	ldr	r2, [r3, #0]
 8013fa2:	89fb      	ldrh	r3, [r7, #14]
 8013fa4:	1c58      	adds	r0, r3, #1
 8013fa6:	81f8      	strh	r0, [r7, #14]
 8013fa8:	4413      	add	r3, r2
 8013faa:	b2ca      	uxtb	r2, r1
 8013fac:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 8013fae:	687b      	ldr	r3, [r7, #4]
 8013fb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013fb2:	0a19      	lsrs	r1, r3, #8
 8013fb4:	687b      	ldr	r3, [r7, #4]
 8013fb6:	681a      	ldr	r2, [r3, #0]
 8013fb8:	89fb      	ldrh	r3, [r7, #14]
 8013fba:	1c58      	adds	r0, r3, #1
 8013fbc:	81f8      	strh	r0, [r7, #14]
 8013fbe:	4413      	add	r3, r2
 8013fc0:	b2ca      	uxtb	r2, r1
 8013fc2:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 8013fc4:	687b      	ldr	r3, [r7, #4]
 8013fc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013fc8:	0c19      	lsrs	r1, r3, #16
 8013fca:	687b      	ldr	r3, [r7, #4]
 8013fcc:	681a      	ldr	r2, [r3, #0]
 8013fce:	89fb      	ldrh	r3, [r7, #14]
 8013fd0:	1c58      	adds	r0, r3, #1
 8013fd2:	81f8      	strh	r0, [r7, #14]
 8013fd4:	4413      	add	r3, r2
 8013fd6:	b2ca      	uxtb	r2, r1
 8013fd8:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 8013fda:	687b      	ldr	r3, [r7, #4]
 8013fdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013fde:	0e19      	lsrs	r1, r3, #24
 8013fe0:	687b      	ldr	r3, [r7, #4]
 8013fe2:	681a      	ldr	r2, [r3, #0]
 8013fe4:	89fb      	ldrh	r3, [r7, #14]
 8013fe6:	1c58      	adds	r0, r3, #1
 8013fe8:	81f8      	strh	r0, [r7, #14]
 8013fea:	4413      	add	r3, r2
 8013fec:	b2ca      	uxtb	r2, r1
 8013fee:	701a      	strb	r2, [r3, #0]

    macMsg->BufSize = bufItr;
 8013ff0:	89fb      	ldrh	r3, [r7, #14]
 8013ff2:	b2da      	uxtb	r2, r3
 8013ff4:	687b      	ldr	r3, [r7, #4]
 8013ff6:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 8013ff8:	2300      	movs	r3, #0
}
 8013ffa:	4618      	mov	r0, r3
 8013ffc:	3710      	adds	r7, #16
 8013ffe:	46bd      	mov	sp, r7
 8014000:	bd80      	pop	{r7, pc}

08014002 <RegionIsActive>:
#define RU864_APPLY_DR_OFFSET( )
#define RU864_RX_BEACON_SETUP( )
#endif

bool RegionIsActive( LoRaMacRegion_t region )
{
 8014002:	b480      	push	{r7}
 8014004:	b083      	sub	sp, #12
 8014006:	af00      	add	r7, sp, #0
 8014008:	4603      	mov	r3, r0
 801400a:	71fb      	strb	r3, [r7, #7]
    switch( region )
 801400c:	79fb      	ldrb	r3, [r7, #7]
 801400e:	2b00      	cmp	r3, #0
 8014010:	d101      	bne.n	8014016 <RegionIsActive+0x14>
    {
        AS923_IS_ACTIVE( );
 8014012:	2301      	movs	r3, #1
 8014014:	e000      	b.n	8014018 <RegionIsActive+0x16>
        IN865_IS_ACTIVE( );
        US915_IS_ACTIVE( );
        RU864_IS_ACTIVE( );
        default:
        {
            return false;
 8014016:	2300      	movs	r3, #0
        }
    }
}
 8014018:	4618      	mov	r0, r3
 801401a:	370c      	adds	r7, #12
 801401c:	46bd      	mov	sp, r7
 801401e:	bc80      	pop	{r7}
 8014020:	4770      	bx	lr

08014022 <RegionGetPhyParam>:

PhyParam_t RegionGetPhyParam( LoRaMacRegion_t region, GetPhyParams_t* getPhy )
{
 8014022:	b580      	push	{r7, lr}
 8014024:	b084      	sub	sp, #16
 8014026:	af00      	add	r7, sp, #0
 8014028:	4603      	mov	r3, r0
 801402a:	6039      	str	r1, [r7, #0]
 801402c:	71fb      	strb	r3, [r7, #7]
    PhyParam_t phyParam = { 0 };
 801402e:	2300      	movs	r3, #0
 8014030:	60bb      	str	r3, [r7, #8]
    switch( region )
 8014032:	79fb      	ldrb	r3, [r7, #7]
 8014034:	2b00      	cmp	r3, #0
 8014036:	d105      	bne.n	8014044 <RegionGetPhyParam+0x22>
    {
        AS923_GET_PHY_PARAM( );
 8014038:	6838      	ldr	r0, [r7, #0]
 801403a:	f000 f9ff 	bl	801443c <RegionAS923GetPhyParam>
 801403e:	4603      	mov	r3, r0
 8014040:	60fb      	str	r3, [r7, #12]
 8014042:	e001      	b.n	8014048 <RegionGetPhyParam+0x26>
        IN865_GET_PHY_PARAM( );
        US915_GET_PHY_PARAM( );
        RU864_GET_PHY_PARAM( );
        default:
        {
            return phyParam;
 8014044:	68bb      	ldr	r3, [r7, #8]
 8014046:	60fb      	str	r3, [r7, #12]
        }
    }
}
 8014048:	68fb      	ldr	r3, [r7, #12]
 801404a:	4618      	mov	r0, r3
 801404c:	3710      	adds	r7, #16
 801404e:	46bd      	mov	sp, r7
 8014050:	bd80      	pop	{r7, pc}

08014052 <RegionSetBandTxDone>:

void RegionSetBandTxDone( LoRaMacRegion_t region, SetBandTxDoneParams_t* txDone )
{
 8014052:	b580      	push	{r7, lr}
 8014054:	b082      	sub	sp, #8
 8014056:	af00      	add	r7, sp, #0
 8014058:	4603      	mov	r3, r0
 801405a:	6039      	str	r1, [r7, #0]
 801405c:	71fb      	strb	r3, [r7, #7]
    switch( region )
 801405e:	79fb      	ldrb	r3, [r7, #7]
 8014060:	2b00      	cmp	r3, #0
 8014062:	d103      	bne.n	801406c <RegionSetBandTxDone+0x1a>
    {
        AS923_SET_BAND_TX_DONE( );
 8014064:	6838      	ldr	r0, [r7, #0]
 8014066:	f000 fb65 	bl	8014734 <RegionAS923SetBandTxDone>
 801406a:	e000      	b.n	801406e <RegionSetBandTxDone+0x1c>
        IN865_SET_BAND_TX_DONE( );
        US915_SET_BAND_TX_DONE( );
        RU864_SET_BAND_TX_DONE( );
        default:
        {
            return;
 801406c:	bf00      	nop
        }
    }
}
 801406e:	3708      	adds	r7, #8
 8014070:	46bd      	mov	sp, r7
 8014072:	bd80      	pop	{r7, pc}

08014074 <RegionInitDefaults>:

void RegionInitDefaults( LoRaMacRegion_t region, InitDefaultsParams_t* params )
{
 8014074:	b580      	push	{r7, lr}
 8014076:	b082      	sub	sp, #8
 8014078:	af00      	add	r7, sp, #0
 801407a:	4603      	mov	r3, r0
 801407c:	6039      	str	r1, [r7, #0]
 801407e:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8014080:	79fb      	ldrb	r3, [r7, #7]
 8014082:	2b00      	cmp	r3, #0
 8014084:	d103      	bne.n	801408e <RegionInitDefaults+0x1a>
    {
        AS923_INIT_DEFAULTS( );
 8014086:	6838      	ldr	r0, [r7, #0]
 8014088:	f000 fb80 	bl	801478c <RegionAS923InitDefaults>
 801408c:	e000      	b.n	8014090 <RegionInitDefaults+0x1c>
        IN865_INIT_DEFAULTS( );
        US915_INIT_DEFAULTS( );
        RU864_INIT_DEFAULTS( );
        default:
        {
            break;
 801408e:	bf00      	nop
        }
    }
}
 8014090:	bf00      	nop
 8014092:	3708      	adds	r7, #8
 8014094:	46bd      	mov	sp, r7
 8014096:	bd80      	pop	{r7, pc}

08014098 <RegionVerify>:

bool RegionVerify( LoRaMacRegion_t region, VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 8014098:	b580      	push	{r7, lr}
 801409a:	b082      	sub	sp, #8
 801409c:	af00      	add	r7, sp, #0
 801409e:	4603      	mov	r3, r0
 80140a0:	6039      	str	r1, [r7, #0]
 80140a2:	71fb      	strb	r3, [r7, #7]
 80140a4:	4613      	mov	r3, r2
 80140a6:	71bb      	strb	r3, [r7, #6]
    switch( region )
 80140a8:	79fb      	ldrb	r3, [r7, #7]
 80140aa:	2b00      	cmp	r3, #0
 80140ac:	d106      	bne.n	80140bc <RegionVerify+0x24>
    {
        AS923_VERIFY( );
 80140ae:	79bb      	ldrb	r3, [r7, #6]
 80140b0:	4619      	mov	r1, r3
 80140b2:	6838      	ldr	r0, [r7, #0]
 80140b4:	f000 fbfe 	bl	80148b4 <RegionAS923Verify>
 80140b8:	4603      	mov	r3, r0
 80140ba:	e000      	b.n	80140be <RegionVerify+0x26>
        IN865_VERIFY( );
        US915_VERIFY( );
        RU864_VERIFY( );
        default:
        {
            return false;
 80140bc:	2300      	movs	r3, #0
        }
    }
}
 80140be:	4618      	mov	r0, r3
 80140c0:	3708      	adds	r7, #8
 80140c2:	46bd      	mov	sp, r7
 80140c4:	bd80      	pop	{r7, pc}

080140c6 <RegionApplyCFList>:

void RegionApplyCFList( LoRaMacRegion_t region, ApplyCFListParams_t* applyCFList )
{
 80140c6:	b580      	push	{r7, lr}
 80140c8:	b082      	sub	sp, #8
 80140ca:	af00      	add	r7, sp, #0
 80140cc:	4603      	mov	r3, r0
 80140ce:	6039      	str	r1, [r7, #0]
 80140d0:	71fb      	strb	r3, [r7, #7]
    switch( region )
 80140d2:	79fb      	ldrb	r3, [r7, #7]
 80140d4:	2b00      	cmp	r3, #0
 80140d6:	d103      	bne.n	80140e0 <RegionApplyCFList+0x1a>
    {
        AS923_APPLY_CF_LIST( );
 80140d8:	6838      	ldr	r0, [r7, #0]
 80140da:	f000 fc89 	bl	80149f0 <RegionAS923ApplyCFList>
 80140de:	e000      	b.n	80140e2 <RegionApplyCFList+0x1c>
        IN865_APPLY_CF_LIST( );
        US915_APPLY_CF_LIST( );
        RU864_APPLY_CF_LIST( );
        default:
        {
            break;
 80140e0:	bf00      	nop
        }
    }
}
 80140e2:	bf00      	nop
 80140e4:	3708      	adds	r7, #8
 80140e6:	46bd      	mov	sp, r7
 80140e8:	bd80      	pop	{r7, pc}

080140ea <RegionChanMaskSet>:

bool RegionChanMaskSet( LoRaMacRegion_t region, ChanMaskSetParams_t* chanMaskSet )
{
 80140ea:	b580      	push	{r7, lr}
 80140ec:	b082      	sub	sp, #8
 80140ee:	af00      	add	r7, sp, #0
 80140f0:	4603      	mov	r3, r0
 80140f2:	6039      	str	r1, [r7, #0]
 80140f4:	71fb      	strb	r3, [r7, #7]
    switch( region )
 80140f6:	79fb      	ldrb	r3, [r7, #7]
 80140f8:	2b00      	cmp	r3, #0
 80140fa:	d104      	bne.n	8014106 <RegionChanMaskSet+0x1c>
    {
        AS923_CHAN_MASK_SET( );
 80140fc:	6838      	ldr	r0, [r7, #0]
 80140fe:	f000 fceb 	bl	8014ad8 <RegionAS923ChanMaskSet>
 8014102:	4603      	mov	r3, r0
 8014104:	e000      	b.n	8014108 <RegionChanMaskSet+0x1e>
        IN865_CHAN_MASK_SET( );
        US915_CHAN_MASK_SET( );
        RU864_CHAN_MASK_SET( );
        default:
        {
            return false;
 8014106:	2300      	movs	r3, #0
        }
    }
}
 8014108:	4618      	mov	r0, r3
 801410a:	3708      	adds	r7, #8
 801410c:	46bd      	mov	sp, r7
 801410e:	bd80      	pop	{r7, pc}

08014110 <RegionComputeRxWindowParameters>:

void RegionComputeRxWindowParameters( LoRaMacRegion_t region, int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 8014110:	b580      	push	{r7, lr}
 8014112:	b082      	sub	sp, #8
 8014114:	af00      	add	r7, sp, #0
 8014116:	603b      	str	r3, [r7, #0]
 8014118:	4603      	mov	r3, r0
 801411a:	71fb      	strb	r3, [r7, #7]
 801411c:	460b      	mov	r3, r1
 801411e:	71bb      	strb	r3, [r7, #6]
 8014120:	4613      	mov	r3, r2
 8014122:	717b      	strb	r3, [r7, #5]
    switch( region )
 8014124:	79fb      	ldrb	r3, [r7, #7]
 8014126:	2b00      	cmp	r3, #0
 8014128:	d107      	bne.n	801413a <RegionComputeRxWindowParameters+0x2a>
    {
        AS923_COMPUTE_RX_WINDOW_PARAMETERS( );
 801412a:	7979      	ldrb	r1, [r7, #5]
 801412c:	f997 0006 	ldrsb.w	r0, [r7, #6]
 8014130:	693b      	ldr	r3, [r7, #16]
 8014132:	683a      	ldr	r2, [r7, #0]
 8014134:	f000 fcfa 	bl	8014b2c <RegionAS923ComputeRxWindowParameters>
 8014138:	e000      	b.n	801413c <RegionComputeRxWindowParameters+0x2c>
        IN865_COMPUTE_RX_WINDOW_PARAMETERS( );
        US915_COMPUTE_RX_WINDOW_PARAMETERS( );
        RU864_COMPUTE_RX_WINDOW_PARAMETERS( );
        default:
        {
            break;
 801413a:	bf00      	nop
        }
    }
}
 801413c:	bf00      	nop
 801413e:	3708      	adds	r7, #8
 8014140:	46bd      	mov	sp, r7
 8014142:	bd80      	pop	{r7, pc}

08014144 <RegionRxConfig>:

bool RegionRxConfig( LoRaMacRegion_t region, RxConfigParams_t* rxConfig, int8_t* datarate )
{
 8014144:	b580      	push	{r7, lr}
 8014146:	b084      	sub	sp, #16
 8014148:	af00      	add	r7, sp, #0
 801414a:	4603      	mov	r3, r0
 801414c:	60b9      	str	r1, [r7, #8]
 801414e:	607a      	str	r2, [r7, #4]
 8014150:	73fb      	strb	r3, [r7, #15]
    switch( region )
 8014152:	7bfb      	ldrb	r3, [r7, #15]
 8014154:	2b00      	cmp	r3, #0
 8014156:	d105      	bne.n	8014164 <RegionRxConfig+0x20>
    {
        AS923_RX_CONFIG( );
 8014158:	6879      	ldr	r1, [r7, #4]
 801415a:	68b8      	ldr	r0, [r7, #8]
 801415c:	f000 fd40 	bl	8014be0 <RegionAS923RxConfig>
 8014160:	4603      	mov	r3, r0
 8014162:	e000      	b.n	8014166 <RegionRxConfig+0x22>
        IN865_RX_CONFIG( );
        US915_RX_CONFIG( );
        RU864_RX_CONFIG( );
        default:
        {
            return false;
 8014164:	2300      	movs	r3, #0
        }
    }
}
 8014166:	4618      	mov	r0, r3
 8014168:	3710      	adds	r7, #16
 801416a:	46bd      	mov	sp, r7
 801416c:	bd80      	pop	{r7, pc}

0801416e <RegionTxConfig>:

bool RegionTxConfig( LoRaMacRegion_t region, TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 801416e:	b580      	push	{r7, lr}
 8014170:	b084      	sub	sp, #16
 8014172:	af00      	add	r7, sp, #0
 8014174:	60b9      	str	r1, [r7, #8]
 8014176:	607a      	str	r2, [r7, #4]
 8014178:	603b      	str	r3, [r7, #0]
 801417a:	4603      	mov	r3, r0
 801417c:	73fb      	strb	r3, [r7, #15]
    switch( region )
 801417e:	7bfb      	ldrb	r3, [r7, #15]
 8014180:	2b00      	cmp	r3, #0
 8014182:	d106      	bne.n	8014192 <RegionTxConfig+0x24>
    {
        AS923_TX_CONFIG( );
 8014184:	683a      	ldr	r2, [r7, #0]
 8014186:	6879      	ldr	r1, [r7, #4]
 8014188:	68b8      	ldr	r0, [r7, #8]
 801418a:	f000 fdf9 	bl	8014d80 <RegionAS923TxConfig>
 801418e:	4603      	mov	r3, r0
 8014190:	e000      	b.n	8014194 <RegionTxConfig+0x26>
        IN865_TX_CONFIG( );
        US915_TX_CONFIG( );
        RU864_TX_CONFIG( );
        default:
        {
            return false;
 8014192:	2300      	movs	r3, #0
        }
    }
}
 8014194:	4618      	mov	r0, r3
 8014196:	3710      	adds	r7, #16
 8014198:	46bd      	mov	sp, r7
 801419a:	bd80      	pop	{r7, pc}

0801419c <RegionLinkAdrReq>:

uint8_t RegionLinkAdrReq( LoRaMacRegion_t region, LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 801419c:	b580      	push	{r7, lr}
 801419e:	b086      	sub	sp, #24
 80141a0:	af02      	add	r7, sp, #8
 80141a2:	60b9      	str	r1, [r7, #8]
 80141a4:	607a      	str	r2, [r7, #4]
 80141a6:	603b      	str	r3, [r7, #0]
 80141a8:	4603      	mov	r3, r0
 80141aa:	73fb      	strb	r3, [r7, #15]
    switch( region )
 80141ac:	7bfb      	ldrb	r3, [r7, #15]
 80141ae:	2b00      	cmp	r3, #0
 80141b0:	d109      	bne.n	80141c6 <RegionLinkAdrReq+0x2a>
    {
        AS923_LINK_ADR_REQ( );
 80141b2:	69fb      	ldr	r3, [r7, #28]
 80141b4:	9300      	str	r3, [sp, #0]
 80141b6:	69bb      	ldr	r3, [r7, #24]
 80141b8:	683a      	ldr	r2, [r7, #0]
 80141ba:	6879      	ldr	r1, [r7, #4]
 80141bc:	68b8      	ldr	r0, [r7, #8]
 80141be:	f000 feaf 	bl	8014f20 <RegionAS923LinkAdrReq>
 80141c2:	4603      	mov	r3, r0
 80141c4:	e000      	b.n	80141c8 <RegionLinkAdrReq+0x2c>
        IN865_LINK_ADR_REQ( );
        US915_LINK_ADR_REQ( );
        RU864_LINK_ADR_REQ( );
        default:
        {
            return 0;
 80141c6:	2300      	movs	r3, #0
        }
    }
}
 80141c8:	4618      	mov	r0, r3
 80141ca:	3710      	adds	r7, #16
 80141cc:	46bd      	mov	sp, r7
 80141ce:	bd80      	pop	{r7, pc}

080141d0 <RegionRxParamSetupReq>:

uint8_t RegionRxParamSetupReq( LoRaMacRegion_t region, RxParamSetupReqParams_t* rxParamSetupReq )
{
 80141d0:	b580      	push	{r7, lr}
 80141d2:	b082      	sub	sp, #8
 80141d4:	af00      	add	r7, sp, #0
 80141d6:	4603      	mov	r3, r0
 80141d8:	6039      	str	r1, [r7, #0]
 80141da:	71fb      	strb	r3, [r7, #7]
    switch( region )
 80141dc:	79fb      	ldrb	r3, [r7, #7]
 80141de:	2b00      	cmp	r3, #0
 80141e0:	d104      	bne.n	80141ec <RegionRxParamSetupReq+0x1c>
    {
        AS923_RX_PARAM_SETUP_REQ( );
 80141e2:	6838      	ldr	r0, [r7, #0]
 80141e4:	f000 ffbe 	bl	8015164 <RegionAS923RxParamSetupReq>
 80141e8:	4603      	mov	r3, r0
 80141ea:	e000      	b.n	80141ee <RegionRxParamSetupReq+0x1e>
        IN865_RX_PARAM_SETUP_REQ( );
        US915_RX_PARAM_SETUP_REQ( );
        RU864_RX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 80141ec:	2300      	movs	r3, #0
        }
    }
}
 80141ee:	4618      	mov	r0, r3
 80141f0:	3708      	adds	r7, #8
 80141f2:	46bd      	mov	sp, r7
 80141f4:	bd80      	pop	{r7, pc}

080141f6 <RegionNewChannelReq>:

int8_t RegionNewChannelReq( LoRaMacRegion_t region, NewChannelReqParams_t* newChannelReq )
{
 80141f6:	b580      	push	{r7, lr}
 80141f8:	b082      	sub	sp, #8
 80141fa:	af00      	add	r7, sp, #0
 80141fc:	4603      	mov	r3, r0
 80141fe:	6039      	str	r1, [r7, #0]
 8014200:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8014202:	79fb      	ldrb	r3, [r7, #7]
 8014204:	2b00      	cmp	r3, #0
 8014206:	d104      	bne.n	8014212 <RegionNewChannelReq+0x1c>
    {
        AS923_NEW_CHANNEL_REQ( );
 8014208:	6838      	ldr	r0, [r7, #0]
 801420a:	f000 ffe3 	bl	80151d4 <RegionAS923NewChannelReq>
 801420e:	4603      	mov	r3, r0
 8014210:	e000      	b.n	8014214 <RegionNewChannelReq+0x1e>
        IN865_NEW_CHANNEL_REQ( );
        US915_NEW_CHANNEL_REQ( );
        RU864_NEW_CHANNEL_REQ( );
        default:
        {
            return 0;
 8014212:	2300      	movs	r3, #0
        }
    }
}
 8014214:	4618      	mov	r0, r3
 8014216:	3708      	adds	r7, #8
 8014218:	46bd      	mov	sp, r7
 801421a:	bd80      	pop	{r7, pc}

0801421c <RegionTxParamSetupReq>:

int8_t RegionTxParamSetupReq( LoRaMacRegion_t region, TxParamSetupReqParams_t* txParamSetupReq )
{
 801421c:	b580      	push	{r7, lr}
 801421e:	b082      	sub	sp, #8
 8014220:	af00      	add	r7, sp, #0
 8014222:	4603      	mov	r3, r0
 8014224:	6039      	str	r1, [r7, #0]
 8014226:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8014228:	79fb      	ldrb	r3, [r7, #7]
 801422a:	2b00      	cmp	r3, #0
 801422c:	d104      	bne.n	8014238 <RegionTxParamSetupReq+0x1c>
    {
        AS923_TX_PARAM_SETUP_REQ( );
 801422e:	6838      	ldr	r0, [r7, #0]
 8014230:	f001 f82e 	bl	8015290 <RegionAS923TxParamSetupReq>
 8014234:	4603      	mov	r3, r0
 8014236:	e000      	b.n	801423a <RegionTxParamSetupReq+0x1e>
        IN865_TX_PARAM_SETUP_REQ( );
        US915_TX_PARAM_SETUP_REQ( );
        RU864_TX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 8014238:	2300      	movs	r3, #0
        }
    }
}
 801423a:	4618      	mov	r0, r3
 801423c:	3708      	adds	r7, #8
 801423e:	46bd      	mov	sp, r7
 8014240:	bd80      	pop	{r7, pc}

08014242 <RegionDlChannelReq>:

int8_t RegionDlChannelReq( LoRaMacRegion_t region, DlChannelReqParams_t* dlChannelReq )
{
 8014242:	b580      	push	{r7, lr}
 8014244:	b082      	sub	sp, #8
 8014246:	af00      	add	r7, sp, #0
 8014248:	4603      	mov	r3, r0
 801424a:	6039      	str	r1, [r7, #0]
 801424c:	71fb      	strb	r3, [r7, #7]
    switch( region )
 801424e:	79fb      	ldrb	r3, [r7, #7]
 8014250:	2b00      	cmp	r3, #0
 8014252:	d104      	bne.n	801425e <RegionDlChannelReq+0x1c>
    {
        AS923_DL_CHANNEL_REQ( );
 8014254:	6838      	ldr	r0, [r7, #0]
 8014256:	f001 f825 	bl	80152a4 <RegionAS923DlChannelReq>
 801425a:	4603      	mov	r3, r0
 801425c:	e000      	b.n	8014260 <RegionDlChannelReq+0x1e>
        IN865_DL_CHANNEL_REQ( );
        US915_DL_CHANNEL_REQ( );
        RU864_DL_CHANNEL_REQ( );
        default:
        {
            return 0;
 801425e:	2300      	movs	r3, #0
        }
    }
}
 8014260:	4618      	mov	r0, r3
 8014262:	3708      	adds	r7, #8
 8014264:	46bd      	mov	sp, r7
 8014266:	bd80      	pop	{r7, pc}

08014268 <RegionAlternateDr>:

int8_t RegionAlternateDr( LoRaMacRegion_t region, int8_t currentDr, AlternateDrType_t type )
{
 8014268:	b580      	push	{r7, lr}
 801426a:	b082      	sub	sp, #8
 801426c:	af00      	add	r7, sp, #0
 801426e:	4603      	mov	r3, r0
 8014270:	71fb      	strb	r3, [r7, #7]
 8014272:	460b      	mov	r3, r1
 8014274:	71bb      	strb	r3, [r7, #6]
 8014276:	4613      	mov	r3, r2
 8014278:	717b      	strb	r3, [r7, #5]
    switch( region )
 801427a:	79fb      	ldrb	r3, [r7, #7]
 801427c:	2b00      	cmp	r3, #0
 801427e:	d108      	bne.n	8014292 <RegionAlternateDr+0x2a>
    {
        AS923_ALTERNATE_DR( );
 8014280:	797a      	ldrb	r2, [r7, #5]
 8014282:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8014286:	4611      	mov	r1, r2
 8014288:	4618      	mov	r0, r3
 801428a:	f001 f851 	bl	8015330 <RegionAS923AlternateDr>
 801428e:	4603      	mov	r3, r0
 8014290:	e000      	b.n	8014294 <RegionAlternateDr+0x2c>
        IN865_ALTERNATE_DR( );
        US915_ALTERNATE_DR( );
        RU864_ALTERNATE_DR( );
        default:
        {
            return 0;
 8014292:	2300      	movs	r3, #0
        }
    }
}
 8014294:	4618      	mov	r0, r3
 8014296:	3708      	adds	r7, #8
 8014298:	46bd      	mov	sp, r7
 801429a:	bd80      	pop	{r7, pc}

0801429c <RegionNextChannel>:

LoRaMacStatus_t RegionNextChannel( LoRaMacRegion_t region, NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 801429c:	b580      	push	{r7, lr}
 801429e:	b084      	sub	sp, #16
 80142a0:	af00      	add	r7, sp, #0
 80142a2:	60b9      	str	r1, [r7, #8]
 80142a4:	607a      	str	r2, [r7, #4]
 80142a6:	603b      	str	r3, [r7, #0]
 80142a8:	4603      	mov	r3, r0
 80142aa:	73fb      	strb	r3, [r7, #15]
    switch( region )
 80142ac:	7bfb      	ldrb	r3, [r7, #15]
 80142ae:	2b00      	cmp	r3, #0
 80142b0:	d107      	bne.n	80142c2 <RegionNextChannel+0x26>
    {
        AS923_NEXT_CHANNEL( );
 80142b2:	69bb      	ldr	r3, [r7, #24]
 80142b4:	683a      	ldr	r2, [r7, #0]
 80142b6:	6879      	ldr	r1, [r7, #4]
 80142b8:	68b8      	ldr	r0, [r7, #8]
 80142ba:	f001 f847 	bl	801534c <RegionAS923NextChannel>
 80142be:	4603      	mov	r3, r0
 80142c0:	e000      	b.n	80142c4 <RegionNextChannel+0x28>
        IN865_NEXT_CHANNEL( );
        US915_NEXT_CHANNEL( );
        RU864_NEXT_CHANNEL( );
        default:
        {
            return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 80142c2:	2309      	movs	r3, #9
        }
    }
}
 80142c4:	4618      	mov	r0, r3
 80142c6:	3710      	adds	r7, #16
 80142c8:	46bd      	mov	sp, r7
 80142ca:	bd80      	pop	{r7, pc}

080142cc <RegionSetContinuousWave>:
    }
}

#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
void RegionSetContinuousWave( LoRaMacRegion_t region, ContinuousWaveParams_t* continuousWave )
{
 80142cc:	b580      	push	{r7, lr}
 80142ce:	b082      	sub	sp, #8
 80142d0:	af00      	add	r7, sp, #0
 80142d2:	4603      	mov	r3, r0
 80142d4:	6039      	str	r1, [r7, #0]
 80142d6:	71fb      	strb	r3, [r7, #7]
    switch( region )
 80142d8:	79fb      	ldrb	r3, [r7, #7]
 80142da:	2b00      	cmp	r3, #0
 80142dc:	d103      	bne.n	80142e6 <RegionSetContinuousWave+0x1a>
    {
        AS923_SET_CONTINUOUS_WAVE( );
 80142de:	6838      	ldr	r0, [r7, #0]
 80142e0:	f001 f9a8 	bl	8015634 <RegionAS923SetContinuousWave>
 80142e4:	e000      	b.n	80142e8 <RegionSetContinuousWave+0x1c>
        IN865_SET_CONTINUOUS_WAVE( );
        US915_SET_CONTINUOUS_WAVE( );
        RU864_SET_CONTINUOUS_WAVE( );
        default:
        {
            break;
 80142e6:	bf00      	nop
        }
    }
}
 80142e8:	bf00      	nop
 80142ea:	3708      	adds	r7, #8
 80142ec:	46bd      	mov	sp, r7
 80142ee:	bd80      	pop	{r7, pc}

080142f0 <RegionApplyDrOffset>:
#endif /* REGION_VERSION */

uint8_t RegionApplyDrOffset( LoRaMacRegion_t region, uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 80142f0:	b590      	push	{r4, r7, lr}
 80142f2:	b083      	sub	sp, #12
 80142f4:	af00      	add	r7, sp, #0
 80142f6:	4604      	mov	r4, r0
 80142f8:	4608      	mov	r0, r1
 80142fa:	4611      	mov	r1, r2
 80142fc:	461a      	mov	r2, r3
 80142fe:	4623      	mov	r3, r4
 8014300:	71fb      	strb	r3, [r7, #7]
 8014302:	4603      	mov	r3, r0
 8014304:	71bb      	strb	r3, [r7, #6]
 8014306:	460b      	mov	r3, r1
 8014308:	717b      	strb	r3, [r7, #5]
 801430a:	4613      	mov	r3, r2
 801430c:	713b      	strb	r3, [r7, #4]
    switch( region )
 801430e:	79fb      	ldrb	r3, [r7, #7]
 8014310:	2b00      	cmp	r3, #0
 8014312:	d109      	bne.n	8014328 <RegionApplyDrOffset+0x38>
    {
        AS923_APPLY_DR_OFFSET( );
 8014314:	f997 2004 	ldrsb.w	r2, [r7, #4]
 8014318:	f997 1005 	ldrsb.w	r1, [r7, #5]
 801431c:	79bb      	ldrb	r3, [r7, #6]
 801431e:	4618      	mov	r0, r3
 8014320:	f001 f9d6 	bl	80156d0 <RegionAS923ApplyDrOffset>
 8014324:	4603      	mov	r3, r0
 8014326:	e000      	b.n	801432a <RegionApplyDrOffset+0x3a>
        IN865_APPLY_DR_OFFSET( );
        US915_APPLY_DR_OFFSET( );
        RU864_APPLY_DR_OFFSET( );
        default:
        {
            return dr;
 8014328:	797b      	ldrb	r3, [r7, #5]
        }
    }
}
 801432a:	4618      	mov	r0, r3
 801432c:	370c      	adds	r7, #12
 801432e:	46bd      	mov	sp, r7
 8014330:	bd90      	pop	{r4, r7, pc}
	...

08014334 <RegionGetVersion>:
        }
    }
}

Version_t RegionGetVersion( void )
{
 8014334:	b480      	push	{r7}
 8014336:	b083      	sub	sp, #12
 8014338:	af00      	add	r7, sp, #0
    Version_t version;

    version.Value = REGION_VERSION;
 801433a:	4b04      	ldr	r3, [pc, #16]	@ (801434c <RegionGetVersion+0x18>)
 801433c:	607b      	str	r3, [r7, #4]

    return version;
 801433e:	687b      	ldr	r3, [r7, #4]
}
 8014340:	4618      	mov	r0, r3
 8014342:	370c      	adds	r7, #12
 8014344:	46bd      	mov	sp, r7
 8014346:	bc80      	pop	{r7}
 8014348:	4770      	bx	lr
 801434a:	bf00      	nop
 801434c:	01010003 	.word	0x01010003

08014350 <VerifyRfFreq>:
static Band_t* RegionBands;
#endif /* REGION_VERSION */

// Static functions
static bool VerifyRfFreq( uint32_t freq )
{
 8014350:	b580      	push	{r7, lr}
 8014352:	b082      	sub	sp, #8
 8014354:	af00      	add	r7, sp, #0
 8014356:	6078      	str	r0, [r7, #4]
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 8014358:	4b0d      	ldr	r3, [pc, #52]	@ (8014390 <VerifyRfFreq+0x40>)
 801435a:	6a1b      	ldr	r3, [r3, #32]
 801435c:	6878      	ldr	r0, [r7, #4]
 801435e:	4798      	blx	r3
 8014360:	4603      	mov	r3, r0
 8014362:	f083 0301 	eor.w	r3, r3, #1
 8014366:	b2db      	uxtb	r3, r3
 8014368:	2b00      	cmp	r3, #0
 801436a:	d001      	beq.n	8014370 <VerifyRfFreq+0x20>
    {
        return false;
 801436c:	2300      	movs	r3, #0
 801436e:	e00a      	b.n	8014386 <VerifyRfFreq+0x36>
    }

    if( ( freq < AS923_MIN_RF_FREQUENCY ) || ( freq > AS923_MAX_RF_FREQUENCY ) )
 8014370:	687b      	ldr	r3, [r7, #4]
 8014372:	4a08      	ldr	r2, [pc, #32]	@ (8014394 <VerifyRfFreq+0x44>)
 8014374:	4293      	cmp	r3, r2
 8014376:	d903      	bls.n	8014380 <VerifyRfFreq+0x30>
 8014378:	687b      	ldr	r3, [r7, #4]
 801437a:	4a07      	ldr	r2, [pc, #28]	@ (8014398 <VerifyRfFreq+0x48>)
 801437c:	4293      	cmp	r3, r2
 801437e:	d901      	bls.n	8014384 <VerifyRfFreq+0x34>
    {
        return false;
 8014380:	2300      	movs	r3, #0
 8014382:	e000      	b.n	8014386 <VerifyRfFreq+0x36>
    }
    return true;
 8014384:	2301      	movs	r3, #1
}
 8014386:	4618      	mov	r0, r3
 8014388:	3708      	adds	r7, #8
 801438a:	46bd      	mov	sp, r7
 801438c:	bd80      	pop	{r7, pc}
 801438e:	bf00      	nop
 8014390:	0801bd08 	.word	0x0801bd08
 8014394:	3689cabf 	.word	0x3689cabf
 8014398:	37502800 	.word	0x37502800

0801439c <GetTimeOnAir>:

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 801439c:	b590      	push	{r4, r7, lr}
 801439e:	b08b      	sub	sp, #44	@ 0x2c
 80143a0:	af04      	add	r7, sp, #16
 80143a2:	4603      	mov	r3, r0
 80143a4:	460a      	mov	r2, r1
 80143a6:	71fb      	strb	r3, [r7, #7]
 80143a8:	4613      	mov	r3, r2
 80143aa:	80bb      	strh	r3, [r7, #4]
    int8_t phyDr = DataratesAS923[datarate];
 80143ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80143b0:	4a1f      	ldr	r2, [pc, #124]	@ (8014430 <GetTimeOnAir+0x94>)
 80143b2:	5cd3      	ldrb	r3, [r2, r3]
 80143b4:	74fb      	strb	r3, [r7, #19]
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsAS923 );
 80143b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80143ba:	491e      	ldr	r1, [pc, #120]	@ (8014434 <GetTimeOnAir+0x98>)
 80143bc:	4618      	mov	r0, r3
 80143be:	f002 f88d 	bl	80164dc <RegionCommonGetBandwidth>
 80143c2:	60f8      	str	r0, [r7, #12]
    TimerTime_t timeOnAir = 0;
 80143c4:	2300      	movs	r3, #0
 80143c6:	617b      	str	r3, [r7, #20]

    if( datarate == DR_7 )
 80143c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80143cc:	2b07      	cmp	r3, #7
 80143ce:	d118      	bne.n	8014402 <GetTimeOnAir+0x66>
    { // High Speed FSK channel
        timeOnAir = Radio.TimeOnAir( MODEM_FSK, bandwidth, phyDr * 1000, 0, 5, false, pktLen, true );
 80143d0:	4b19      	ldr	r3, [pc, #100]	@ (8014438 <GetTimeOnAir+0x9c>)
 80143d2:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 80143d4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80143d8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80143dc:	fb02 f303 	mul.w	r3, r2, r3
 80143e0:	4619      	mov	r1, r3
 80143e2:	88bb      	ldrh	r3, [r7, #4]
 80143e4:	b2db      	uxtb	r3, r3
 80143e6:	2201      	movs	r2, #1
 80143e8:	9203      	str	r2, [sp, #12]
 80143ea:	9302      	str	r3, [sp, #8]
 80143ec:	2300      	movs	r3, #0
 80143ee:	9301      	str	r3, [sp, #4]
 80143f0:	2305      	movs	r3, #5
 80143f2:	9300      	str	r3, [sp, #0]
 80143f4:	2300      	movs	r3, #0
 80143f6:	460a      	mov	r2, r1
 80143f8:	68f9      	ldr	r1, [r7, #12]
 80143fa:	2000      	movs	r0, #0
 80143fc:	47a0      	blx	r4
 80143fe:	6178      	str	r0, [r7, #20]
 8014400:	e011      	b.n	8014426 <GetTimeOnAir+0x8a>
    }
    else
    {
        timeOnAir = Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 8014402:	4b0d      	ldr	r3, [pc, #52]	@ (8014438 <GetTimeOnAir+0x9c>)
 8014404:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8014406:	f997 2013 	ldrsb.w	r2, [r7, #19]
 801440a:	88bb      	ldrh	r3, [r7, #4]
 801440c:	b2db      	uxtb	r3, r3
 801440e:	2101      	movs	r1, #1
 8014410:	9103      	str	r1, [sp, #12]
 8014412:	9302      	str	r3, [sp, #8]
 8014414:	2300      	movs	r3, #0
 8014416:	9301      	str	r3, [sp, #4]
 8014418:	2308      	movs	r3, #8
 801441a:	9300      	str	r3, [sp, #0]
 801441c:	2301      	movs	r3, #1
 801441e:	68f9      	ldr	r1, [r7, #12]
 8014420:	2001      	movs	r0, #1
 8014422:	47a0      	blx	r4
 8014424:	6178      	str	r0, [r7, #20]
    }
    return timeOnAir;
 8014426:	697b      	ldr	r3, [r7, #20]
}
 8014428:	4618      	mov	r0, r3
 801442a:	371c      	adds	r7, #28
 801442c:	46bd      	mov	sp, r7
 801442e:	bd90      	pop	{r4, r7, pc}
 8014430:	0801bcc0 	.word	0x0801bcc0
 8014434:	0801bcc8 	.word	0x0801bcc8
 8014438:	0801bd08 	.word	0x0801bd08

0801443c <RegionAS923GetPhyParam>:
#endif /* REGION_AS923 */

PhyParam_t RegionAS923GetPhyParam( GetPhyParams_t* getPhy )
{
 801443c:	b580      	push	{r7, lr}
 801443e:	b088      	sub	sp, #32
 8014440:	af00      	add	r7, sp, #0
 8014442:	6078      	str	r0, [r7, #4]
    PhyParam_t phyParam = { 0 };
 8014444:	2300      	movs	r3, #0
 8014446:	61bb      	str	r3, [r7, #24]

#if defined( REGION_AS923 )
    switch( getPhy->Attribute )
 8014448:	687b      	ldr	r3, [r7, #4]
 801444a:	781b      	ldrb	r3, [r3, #0]
 801444c:	3b01      	subs	r3, #1
 801444e:	2b38      	cmp	r3, #56	@ 0x38
 8014450:	f200 8154 	bhi.w	80146fc <RegionAS923GetPhyParam+0x2c0>
 8014454:	a201      	add	r2, pc, #4	@ (adr r2, 801445c <RegionAS923GetPhyParam+0x20>)
 8014456:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801445a:	bf00      	nop
 801445c:	08014541 	.word	0x08014541
 8014460:	08014555 	.word	0x08014555
 8014464:	080146fd 	.word	0x080146fd
 8014468:	080146fd 	.word	0x080146fd
 801446c:	080146fd 	.word	0x080146fd
 8014470:	08014569 	.word	0x08014569
 8014474:	080146fd 	.word	0x080146fd
 8014478:	080145af 	.word	0x080145af
 801447c:	080146fd 	.word	0x080146fd
 8014480:	080145b5 	.word	0x080145b5
 8014484:	080145bb 	.word	0x080145bb
 8014488:	080145c1 	.word	0x080145c1
 801448c:	080145c7 	.word	0x080145c7
 8014490:	080145ef 	.word	0x080145ef
 8014494:	08014617 	.word	0x08014617
 8014498:	0801461d 	.word	0x0801461d
 801449c:	08014625 	.word	0x08014625
 80144a0:	0801462d 	.word	0x0801462d
 80144a4:	08014635 	.word	0x08014635
 80144a8:	0801463d 	.word	0x0801463d
 80144ac:	08014645 	.word	0x08014645
 80144b0:	0801464d 	.word	0x0801464d
 80144b4:	08014661 	.word	0x08014661
 80144b8:	08014667 	.word	0x08014667
 80144bc:	0801466d 	.word	0x0801466d
 80144c0:	08014673 	.word	0x08014673
 80144c4:	0801467f 	.word	0x0801467f
 80144c8:	0801468b 	.word	0x0801468b
 80144cc:	08014691 	.word	0x08014691
 80144d0:	08014699 	.word	0x08014699
 80144d4:	0801469f 	.word	0x0801469f
 80144d8:	080146a5 	.word	0x080146a5
 80144dc:	080146ad 	.word	0x080146ad
 80144e0:	0801456f 	.word	0x0801456f
 80144e4:	080146fd 	.word	0x080146fd
 80144e8:	080146fd 	.word	0x080146fd
 80144ec:	080146fd 	.word	0x080146fd
 80144f0:	080146fd 	.word	0x080146fd
 80144f4:	080146fd 	.word	0x080146fd
 80144f8:	080146fd 	.word	0x080146fd
 80144fc:	080146fd 	.word	0x080146fd
 8014500:	080146fd 	.word	0x080146fd
 8014504:	080146fd 	.word	0x080146fd
 8014508:	080146fd 	.word	0x080146fd
 801450c:	080146fd 	.word	0x080146fd
 8014510:	080146fd 	.word	0x080146fd
 8014514:	080146fd 	.word	0x080146fd
 8014518:	080146b3 	.word	0x080146b3
 801451c:	080146b9 	.word	0x080146b9
 8014520:	080146c7 	.word	0x080146c7
 8014524:	080146fd 	.word	0x080146fd
 8014528:	080146fd 	.word	0x080146fd
 801452c:	080146cd 	.word	0x080146cd
 8014530:	080146d3 	.word	0x080146d3
 8014534:	080146fd 	.word	0x080146fd
 8014538:	080146d9 	.word	0x080146d9
 801453c:	080146e9 	.word	0x080146e9
    {
        case PHY_MIN_RX_DR:
        {
            if( getPhy->DownlinkDwellTime == 0 )
 8014540:	687b      	ldr	r3, [r7, #4]
 8014542:	78db      	ldrb	r3, [r3, #3]
 8014544:	2b00      	cmp	r3, #0
 8014546:	d102      	bne.n	801454e <RegionAS923GetPhyParam+0x112>
            {
                phyParam.Value = AS923_RX_MIN_DATARATE;
 8014548:	2300      	movs	r3, #0
 801454a:	61bb      	str	r3, [r7, #24]
            }
            else
            {
                phyParam.Value = AS923_DWELL_LIMIT_DATARATE;
            }
            break;
 801454c:	e0d7      	b.n	80146fe <RegionAS923GetPhyParam+0x2c2>
                phyParam.Value = AS923_DWELL_LIMIT_DATARATE;
 801454e:	2302      	movs	r3, #2
 8014550:	61bb      	str	r3, [r7, #24]
            break;
 8014552:	e0d4      	b.n	80146fe <RegionAS923GetPhyParam+0x2c2>
        }
        case PHY_MIN_TX_DR:
        {
            if( getPhy->UplinkDwellTime == 0 )
 8014554:	687b      	ldr	r3, [r7, #4]
 8014556:	789b      	ldrb	r3, [r3, #2]
 8014558:	2b00      	cmp	r3, #0
 801455a:	d102      	bne.n	8014562 <RegionAS923GetPhyParam+0x126>
            {
                phyParam.Value = AS923_TX_MIN_DATARATE;
 801455c:	2300      	movs	r3, #0
 801455e:	61bb      	str	r3, [r7, #24]
            }
            else
            {
                phyParam.Value = AS923_DWELL_LIMIT_DATARATE;
            }
            break;
 8014560:	e0cd      	b.n	80146fe <RegionAS923GetPhyParam+0x2c2>
                phyParam.Value = AS923_DWELL_LIMIT_DATARATE;
 8014562:	2302      	movs	r3, #2
 8014564:	61bb      	str	r3, [r7, #24]
            break;
 8014566:	e0ca      	b.n	80146fe <RegionAS923GetPhyParam+0x2c2>
        }
        case PHY_DEF_TX_DR:
        {
            phyParam.Value = AS923_DEFAULT_DATARATE;
 8014568:	2302      	movs	r3, #2
 801456a:	61bb      	str	r3, [r7, #24]
            break;
 801456c:	e0c7      	b.n	80146fe <RegionAS923GetPhyParam+0x2c2>
        }
        case PHY_NEXT_LOWER_TX_DR:
        {
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
            {
                .CurrentDr = getPhy->Datarate,
 801456e:	687b      	ldr	r3, [r7, #4]
 8014570:	f993 3001 	ldrsb.w	r3, [r3, #1]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8014574:	733b      	strb	r3, [r7, #12]
 8014576:	2307      	movs	r3, #7
 8014578:	737b      	strb	r3, [r7, #13]
                .MaxDr = ( int8_t )AS923_TX_MAX_DATARATE,
                .MinDr = ( int8_t )( ( getPhy->UplinkDwellTime == 0 ) ? AS923_TX_MIN_DATARATE : AS923_DWELL_LIMIT_DATARATE ),
 801457a:	687b      	ldr	r3, [r7, #4]
 801457c:	789b      	ldrb	r3, [r3, #2]
 801457e:	2b00      	cmp	r3, #0
 8014580:	d101      	bne.n	8014586 <RegionAS923GetPhyParam+0x14a>
 8014582:	2300      	movs	r3, #0
 8014584:	e000      	b.n	8014588 <RegionAS923GetPhyParam+0x14c>
 8014586:	2302      	movs	r3, #2
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8014588:	73bb      	strb	r3, [r7, #14]
 801458a:	2310      	movs	r3, #16
 801458c:	73fb      	strb	r3, [r7, #15]
                .NbChannels = AS923_MAX_NB_CHANNELS,
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
 801458e:	4b5f      	ldr	r3, [pc, #380]	@ (801470c <RegionAS923GetPhyParam+0x2d0>)
 8014590:	681b      	ldr	r3, [r3, #0]
 8014592:	f503 6390 	add.w	r3, r3, #1152	@ 0x480
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8014596:	613b      	str	r3, [r7, #16]
                .Channels = RegionNvmGroup2->Channels,
 8014598:	4b5c      	ldr	r3, [pc, #368]	@ (801470c <RegionAS923GetPhyParam+0x2d0>)
 801459a:	681b      	ldr	r3, [r3, #0]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 801459c:	617b      	str	r3, [r7, #20]
            };
            phyParam.Value = RegionCommonGetNextLowerTxDr( &nextLowerTxDrParams );
 801459e:	f107 030c 	add.w	r3, r7, #12
 80145a2:	4618      	mov	r0, r3
 80145a4:	f001 ff47 	bl	8016436 <RegionCommonGetNextLowerTxDr>
 80145a8:	4603      	mov	r3, r0
 80145aa:	61bb      	str	r3, [r7, #24]
            break;
 80145ac:	e0a7      	b.n	80146fe <RegionAS923GetPhyParam+0x2c2>
        }
        case PHY_MAX_TX_POWER:
        {
            phyParam.Value = AS923_MAX_TX_POWER;
 80145ae:	2300      	movs	r3, #0
 80145b0:	61bb      	str	r3, [r7, #24]
            break;
 80145b2:	e0a4      	b.n	80146fe <RegionAS923GetPhyParam+0x2c2>
        }
        case PHY_DEF_TX_POWER:
        {
            phyParam.Value = AS923_DEFAULT_TX_POWER;
 80145b4:	2300      	movs	r3, #0
 80145b6:	61bb      	str	r3, [r7, #24]
            break;
 80145b8:	e0a1      	b.n	80146fe <RegionAS923GetPhyParam+0x2c2>
        }
        case PHY_DEF_ADR_ACK_LIMIT:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_LIMIT;
 80145ba:	2340      	movs	r3, #64	@ 0x40
 80145bc:	61bb      	str	r3, [r7, #24]
            break;
 80145be:	e09e      	b.n	80146fe <RegionAS923GetPhyParam+0x2c2>
        }
        case PHY_DEF_ADR_ACK_DELAY:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_DELAY;
 80145c0:	2320      	movs	r3, #32
 80145c2:	61bb      	str	r3, [r7, #24]
            break;
 80145c4:	e09b      	b.n	80146fe <RegionAS923GetPhyParam+0x2c2>
        }
        case PHY_MAX_PAYLOAD:
        {
            if( getPhy->UplinkDwellTime == 0 )
 80145c6:	687b      	ldr	r3, [r7, #4]
 80145c8:	789b      	ldrb	r3, [r3, #2]
 80145ca:	2b00      	cmp	r3, #0
 80145cc:	d107      	bne.n	80145de <RegionAS923GetPhyParam+0x1a2>
            {
                phyParam.Value = MaxPayloadOfDatarateDwell0AS923[getPhy->Datarate];
 80145ce:	687b      	ldr	r3, [r7, #4]
 80145d0:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80145d4:	461a      	mov	r2, r3
 80145d6:	4b4e      	ldr	r3, [pc, #312]	@ (8014710 <RegionAS923GetPhyParam+0x2d4>)
 80145d8:	5c9b      	ldrb	r3, [r3, r2]
 80145da:	61bb      	str	r3, [r7, #24]
            }
            else
            {
                phyParam.Value = MaxPayloadOfDatarateDwell1AS923[getPhy->Datarate];
            }
            break;
 80145dc:	e08f      	b.n	80146fe <RegionAS923GetPhyParam+0x2c2>
                phyParam.Value = MaxPayloadOfDatarateDwell1AS923[getPhy->Datarate];
 80145de:	687b      	ldr	r3, [r7, #4]
 80145e0:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80145e4:	461a      	mov	r2, r3
 80145e6:	4b4b      	ldr	r3, [pc, #300]	@ (8014714 <RegionAS923GetPhyParam+0x2d8>)
 80145e8:	5c9b      	ldrb	r3, [r3, r2]
 80145ea:	61bb      	str	r3, [r7, #24]
            break;
 80145ec:	e087      	b.n	80146fe <RegionAS923GetPhyParam+0x2c2>
        }
        case PHY_MAX_PAYLOAD_REPEATER:
        {
            if( getPhy->UplinkDwellTime == 0 )
 80145ee:	687b      	ldr	r3, [r7, #4]
 80145f0:	789b      	ldrb	r3, [r3, #2]
 80145f2:	2b00      	cmp	r3, #0
 80145f4:	d107      	bne.n	8014606 <RegionAS923GetPhyParam+0x1ca>
            {
                phyParam.Value = MaxPayloadOfDatarateRepeaterDwell0AS923[getPhy->Datarate];
 80145f6:	687b      	ldr	r3, [r7, #4]
 80145f8:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80145fc:	461a      	mov	r2, r3
 80145fe:	4b46      	ldr	r3, [pc, #280]	@ (8014718 <RegionAS923GetPhyParam+0x2dc>)
 8014600:	5c9b      	ldrb	r3, [r3, r2]
 8014602:	61bb      	str	r3, [r7, #24]
            }
            else
            {
                phyParam.Value = MaxPayloadOfDatarateDwell1AS923[getPhy->Datarate];
            }
            break;
 8014604:	e07b      	b.n	80146fe <RegionAS923GetPhyParam+0x2c2>
                phyParam.Value = MaxPayloadOfDatarateDwell1AS923[getPhy->Datarate];
 8014606:	687b      	ldr	r3, [r7, #4]
 8014608:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801460c:	461a      	mov	r2, r3
 801460e:	4b41      	ldr	r3, [pc, #260]	@ (8014714 <RegionAS923GetPhyParam+0x2d8>)
 8014610:	5c9b      	ldrb	r3, [r3, r2]
 8014612:	61bb      	str	r3, [r7, #24]
            break;
 8014614:	e073      	b.n	80146fe <RegionAS923GetPhyParam+0x2c2>
        }
        case PHY_DUTY_CYCLE:
        {
            phyParam.Value = AS923_DUTY_CYCLE_ENABLED;
 8014616:	2300      	movs	r3, #0
 8014618:	61bb      	str	r3, [r7, #24]
            break;
 801461a:	e070      	b.n	80146fe <RegionAS923GetPhyParam+0x2c2>
        }
        case PHY_MAX_RX_WINDOW:
        {
            phyParam.Value = AS923_MAX_RX_WINDOW;
 801461c:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8014620:	61bb      	str	r3, [r7, #24]
            break;
 8014622:	e06c      	b.n	80146fe <RegionAS923GetPhyParam+0x2c2>
        }
        case PHY_RECEIVE_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY1;
 8014624:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8014628:	61bb      	str	r3, [r7, #24]
            break;
 801462a:	e068      	b.n	80146fe <RegionAS923GetPhyParam+0x2c2>
        }
        case PHY_RECEIVE_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY2;
 801462c:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8014630:	61bb      	str	r3, [r7, #24]
            break;
 8014632:	e064      	b.n	80146fe <RegionAS923GetPhyParam+0x2c2>
        }
        case PHY_JOIN_ACCEPT_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY1;
 8014634:	f241 3388 	movw	r3, #5000	@ 0x1388
 8014638:	61bb      	str	r3, [r7, #24]
            break;
 801463a:	e060      	b.n	80146fe <RegionAS923GetPhyParam+0x2c2>
        }
        case PHY_JOIN_ACCEPT_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY2;
 801463c:	f241 7370 	movw	r3, #6000	@ 0x1770
 8014640:	61bb      	str	r3, [r7, #24]
            break;
 8014642:	e05c      	b.n	80146fe <RegionAS923GetPhyParam+0x2c2>
        }
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
        case PHY_MAX_FCNT_GAP:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_MAX_FCNT_GAP;
 8014644:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8014648:	61bb      	str	r3, [r7, #24]
            break;
 801464a:	e058      	b.n	80146fe <RegionAS923GetPhyParam+0x2c2>
        }
        case PHY_ACK_TIMEOUT:
        {
            phyParam.Value = ( REGION_COMMON_DEFAULT_ACK_TIMEOUT + randr( -REGION_COMMON_DEFAULT_ACK_TIMEOUT_RND, REGION_COMMON_DEFAULT_ACK_TIMEOUT_RND ) );
 801464c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8014650:	4832      	ldr	r0, [pc, #200]	@ (801471c <RegionAS923GetPhyParam+0x2e0>)
 8014652:	f001 ffdb 	bl	801660c <randr>
 8014656:	4603      	mov	r3, r0
 8014658:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 801465c:	61bb      	str	r3, [r7, #24]
            break;
 801465e:	e04e      	b.n	80146fe <RegionAS923GetPhyParam+0x2c2>
            break;
        }
#endif /* REGION_VERSION */
        case PHY_DEF_DR1_OFFSET:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RX1_DR_OFFSET;
 8014660:	2300      	movs	r3, #0
 8014662:	61bb      	str	r3, [r7, #24]
            break;
 8014664:	e04b      	b.n	80146fe <RegionAS923GetPhyParam+0x2c2>
        }
        case PHY_DEF_RX2_FREQUENCY:
        {
            phyParam.Value = AS923_RX_WND_2_FREQ - REGION_AS923_FREQ_OFFSET;
 8014666:	4b2e      	ldr	r3, [pc, #184]	@ (8014720 <RegionAS923GetPhyParam+0x2e4>)
 8014668:	61bb      	str	r3, [r7, #24]
            break;
 801466a:	e048      	b.n	80146fe <RegionAS923GetPhyParam+0x2c2>
        }
        case PHY_DEF_RX2_DR:
        {
            phyParam.Value = AS923_RX_WND_2_DR;
 801466c:	2302      	movs	r3, #2
 801466e:	61bb      	str	r3, [r7, #24]
            break;
 8014670:	e045      	b.n	80146fe <RegionAS923GetPhyParam+0x2c2>
        }
        case PHY_CHANNELS_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 8014672:	4b26      	ldr	r3, [pc, #152]	@ (801470c <RegionAS923GetPhyParam+0x2d0>)
 8014674:	681b      	ldr	r3, [r3, #0]
 8014676:	f503 6390 	add.w	r3, r3, #1152	@ 0x480
 801467a:	61bb      	str	r3, [r7, #24]
            break;
 801467c:	e03f      	b.n	80146fe <RegionAS923GetPhyParam+0x2c2>
        }
        case PHY_CHANNELS_DEFAULT_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsDefaultMask;
 801467e:	4b23      	ldr	r3, [pc, #140]	@ (801470c <RegionAS923GetPhyParam+0x2d0>)
 8014680:	681b      	ldr	r3, [r3, #0]
 8014682:	f203 438c 	addw	r3, r3, #1164	@ 0x48c
 8014686:	61bb      	str	r3, [r7, #24]
            break;
 8014688:	e039      	b.n	80146fe <RegionAS923GetPhyParam+0x2c2>
        }
        case PHY_MAX_NB_CHANNELS:
        {
            phyParam.Value = AS923_MAX_NB_CHANNELS;
 801468a:	2310      	movs	r3, #16
 801468c:	61bb      	str	r3, [r7, #24]
            break;
 801468e:	e036      	b.n	80146fe <RegionAS923GetPhyParam+0x2c2>
        }
        case PHY_CHANNELS:
        {
            phyParam.Channels = RegionNvmGroup2->Channels;
 8014690:	4b1e      	ldr	r3, [pc, #120]	@ (801470c <RegionAS923GetPhyParam+0x2d0>)
 8014692:	681b      	ldr	r3, [r3, #0]
 8014694:	61bb      	str	r3, [r7, #24]
            break;
 8014696:	e032      	b.n	80146fe <RegionAS923GetPhyParam+0x2c2>
        }
        case PHY_DEF_UPLINK_DWELL_TIME:
        {
            phyParam.Value = AS923_DEFAULT_UPLINK_DWELL_TIME;
 8014698:	2301      	movs	r3, #1
 801469a:	61bb      	str	r3, [r7, #24]
            break;
 801469c:	e02f      	b.n	80146fe <RegionAS923GetPhyParam+0x2c2>
        }
        case PHY_DEF_DOWNLINK_DWELL_TIME:
        {
            phyParam.Value = AS923_DEFAULT_DOWNLINK_DWELL_TIME;
 801469e:	2301      	movs	r3, #1
 80146a0:	61bb      	str	r3, [r7, #24]
            break;
 80146a2:	e02c      	b.n	80146fe <RegionAS923GetPhyParam+0x2c2>
        }
        case PHY_DEF_MAX_EIRP:
        {
            phyParam.fValue = AS923_DEFAULT_MAX_EIRP;
 80146a4:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 80146a8:	61bb      	str	r3, [r7, #24]
            break;
 80146aa:	e028      	b.n	80146fe <RegionAS923GetPhyParam+0x2c2>
        }
        case PHY_DEF_ANTENNA_GAIN:
        {
            phyParam.fValue = AS923_DEFAULT_ANTENNA_GAIN;
 80146ac:	4b1d      	ldr	r3, [pc, #116]	@ (8014724 <RegionAS923GetPhyParam+0x2e8>)
 80146ae:	61bb      	str	r3, [r7, #24]
            break;
 80146b0:	e025      	b.n	80146fe <RegionAS923GetPhyParam+0x2c2>
        }
        case PHY_BEACON_CHANNEL_FREQ:
        {
            phyParam.Value = AS923_BEACON_CHANNEL_FREQ - REGION_AS923_FREQ_OFFSET;
 80146b2:	4b1d      	ldr	r3, [pc, #116]	@ (8014728 <RegionAS923GetPhyParam+0x2ec>)
 80146b4:	61bb      	str	r3, [r7, #24]
            break;
 80146b6:	e022      	b.n	80146fe <RegionAS923GetPhyParam+0x2c2>
        }
        case PHY_BEACON_FORMAT:
        {
            phyParam.BeaconFormat.BeaconSize = AS923_BEACON_SIZE;
 80146b8:	2311      	movs	r3, #17
 80146ba:	763b      	strb	r3, [r7, #24]
            phyParam.BeaconFormat.Rfu1Size = AS923_RFU1_SIZE;
 80146bc:	2302      	movs	r3, #2
 80146be:	767b      	strb	r3, [r7, #25]
            phyParam.BeaconFormat.Rfu2Size = AS923_RFU2_SIZE;
 80146c0:	2300      	movs	r3, #0
 80146c2:	76bb      	strb	r3, [r7, #26]
            break;
 80146c4:	e01b      	b.n	80146fe <RegionAS923GetPhyParam+0x2c2>
        }
        case PHY_BEACON_CHANNEL_DR:
        {
            phyParam.Value = AS923_BEACON_CHANNEL_DR;
 80146c6:	2303      	movs	r3, #3
 80146c8:	61bb      	str	r3, [r7, #24]
            break;
 80146ca:	e018      	b.n	80146fe <RegionAS923GetPhyParam+0x2c2>
        }
        case PHY_PING_SLOT_CHANNEL_FREQ:
        {
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
            phyParam.Value = AS923_PING_SLOT_CHANNEL_FREQ;
 80146cc:	4b16      	ldr	r3, [pc, #88]	@ (8014728 <RegionAS923GetPhyParam+0x2ec>)
 80146ce:	61bb      	str	r3, [r7, #24]
#elif (defined( REGION_VERSION ) && (( REGION_VERSION == 0x02010001 ) || ( REGION_VERSION == 0x02010003 )))
            phyParam.Value = AS923_PING_SLOT_CHANNEL_FREQ - REGION_AS923_FREQ_OFFSET;
#endif /* REGION_VERSION */
            break;
 80146d0:	e015      	b.n	80146fe <RegionAS923GetPhyParam+0x2c2>
        }
        case PHY_PING_SLOT_CHANNEL_DR:
        {
            phyParam.Value = AS923_PING_SLOT_CHANNEL_DR;
 80146d2:	2303      	movs	r3, #3
 80146d4:	61bb      	str	r3, [r7, #24]
            break;
 80146d6:	e012      	b.n	80146fe <RegionAS923GetPhyParam+0x2c2>
        }
        case PHY_SF_FROM_DR:
        {
            phyParam.Value = DataratesAS923[getPhy->Datarate];
 80146d8:	687b      	ldr	r3, [r7, #4]
 80146da:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80146de:	461a      	mov	r2, r3
 80146e0:	4b12      	ldr	r3, [pc, #72]	@ (801472c <RegionAS923GetPhyParam+0x2f0>)
 80146e2:	5c9b      	ldrb	r3, [r3, r2]
 80146e4:	61bb      	str	r3, [r7, #24]
            break;
 80146e6:	e00a      	b.n	80146fe <RegionAS923GetPhyParam+0x2c2>
        }
        case PHY_BW_FROM_DR:
        {
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsAS923 );
 80146e8:	687b      	ldr	r3, [r7, #4]
 80146ea:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80146ee:	4910      	ldr	r1, [pc, #64]	@ (8014730 <RegionAS923GetPhyParam+0x2f4>)
 80146f0:	4618      	mov	r0, r3
 80146f2:	f001 fef3 	bl	80164dc <RegionCommonGetBandwidth>
 80146f6:	4603      	mov	r3, r0
 80146f8:	61bb      	str	r3, [r7, #24]
            break;
 80146fa:	e000      	b.n	80146fe <RegionAS923GetPhyParam+0x2c2>
        }
        default:
        {
            break;
 80146fc:	bf00      	nop
        }
    }

#endif /* REGION_AS923 */
    return phyParam;
 80146fe:	69bb      	ldr	r3, [r7, #24]
 8014700:	61fb      	str	r3, [r7, #28]
 8014702:	69fb      	ldr	r3, [r7, #28]
}
 8014704:	4618      	mov	r0, r3
 8014706:	3720      	adds	r7, #32
 8014708:	46bd      	mov	sp, r7
 801470a:	bd80      	pop	{r7, pc}
 801470c:	200013e4 	.word	0x200013e4
 8014710:	0801bce8 	.word	0x0801bce8
 8014714:	0801bcf8 	.word	0x0801bcf8
 8014718:	0801bcf0 	.word	0x0801bcf0
 801471c:	fffffc18 	.word	0xfffffc18
 8014720:	3706ea00 	.word	0x3706ea00
 8014724:	4009999a 	.word	0x4009999a
 8014728:	3709f740 	.word	0x3709f740
 801472c:	0801bcc0 	.word	0x0801bcc0
 8014730:	0801bcc8 	.word	0x0801bcc8

08014734 <RegionAS923SetBandTxDone>:

void RegionAS923SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 8014734:	b590      	push	{r4, r7, lr}
 8014736:	b085      	sub	sp, #20
 8014738:	af02      	add	r7, sp, #8
 801473a:	6078      	str	r0, [r7, #4]
#if defined( REGION_AS923 )
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    RegionCommonSetBandTxDone( &RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txDone->Channel].Band],
 801473c:	4b11      	ldr	r3, [pc, #68]	@ (8014784 <RegionAS923SetBandTxDone+0x50>)
 801473e:	681a      	ldr	r2, [r3, #0]
 8014740:	4b11      	ldr	r3, [pc, #68]	@ (8014788 <RegionAS923SetBandTxDone+0x54>)
 8014742:	6819      	ldr	r1, [r3, #0]
 8014744:	687b      	ldr	r3, [r7, #4]
 8014746:	781b      	ldrb	r3, [r3, #0]
 8014748:	4618      	mov	r0, r3
 801474a:	4603      	mov	r3, r0
 801474c:	005b      	lsls	r3, r3, #1
 801474e:	4403      	add	r3, r0
 8014750:	009b      	lsls	r3, r3, #2
 8014752:	440b      	add	r3, r1
 8014754:	3309      	adds	r3, #9
 8014756:	781b      	ldrb	r3, [r3, #0]
 8014758:	4619      	mov	r1, r3
 801475a:	460b      	mov	r3, r1
 801475c:	005b      	lsls	r3, r3, #1
 801475e:	440b      	add	r3, r1
 8014760:	00db      	lsls	r3, r3, #3
 8014762:	18d0      	adds	r0, r2, r3
 8014764:	687b      	ldr	r3, [r7, #4]
 8014766:	6899      	ldr	r1, [r3, #8]
 8014768:	687b      	ldr	r3, [r7, #4]
 801476a:	785c      	ldrb	r4, [r3, #1]
 801476c:	687b      	ldr	r3, [r7, #4]
 801476e:	691a      	ldr	r2, [r3, #16]
 8014770:	9200      	str	r2, [sp, #0]
 8014772:	68db      	ldr	r3, [r3, #12]
 8014774:	4622      	mov	r2, r4
 8014776:	f001 fa37 	bl	8015be8 <RegionCommonSetBandTxDone>
#elif (defined( REGION_VERSION ) && (( REGION_VERSION == 0x02010001 ) || ( REGION_VERSION == 0x02010003 )))
    RegionCommonSetBandTxDone( &RegionBands[RegionNvmGroup2->Channels[txDone->Channel].Band],
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#endif /* REGION_VERSION */
#endif /* REGION_AS923 */
}
 801477a:	bf00      	nop
 801477c:	370c      	adds	r7, #12
 801477e:	46bd      	mov	sp, r7
 8014780:	bd90      	pop	{r4, r7, pc}
 8014782:	bf00      	nop
 8014784:	200013e0 	.word	0x200013e0
 8014788:	200013e4 	.word	0x200013e4

0801478c <RegionAS923InitDefaults>:

void RegionAS923InitDefaults( InitDefaultsParams_t* params )
{
 801478c:	b580      	push	{r7, lr}
 801478e:	b08e      	sub	sp, #56	@ 0x38
 8014790:	af00      	add	r7, sp, #0
 8014792:	6078      	str	r0, [r7, #4]
#if defined( REGION_AS923 )
    Band_t bands[AS923_MAX_NB_BANDS] =
 8014794:	2364      	movs	r3, #100	@ 0x64
 8014796:	843b      	strh	r3, [r7, #32]
 8014798:	2300      	movs	r3, #0
 801479a:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 801479e:	2300      	movs	r3, #0
 80147a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80147a2:	2300      	movs	r3, #0
 80147a4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80147a6:	2300      	movs	r3, #0
 80147a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80147aa:	2300      	movs	r3, #0
 80147ac:	633b      	str	r3, [r7, #48]	@ 0x30
 80147ae:	2300      	movs	r3, #0
 80147b0:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
    {
        AS923_BAND0
    };

    switch( params->Type )
 80147b4:	687b      	ldr	r3, [r7, #4]
 80147b6:	7a1b      	ldrb	r3, [r3, #8]
 80147b8:	2b02      	cmp	r3, #2
 80147ba:	d05f      	beq.n	801487c <RegionAS923InitDefaults+0xf0>
 80147bc:	2b02      	cmp	r3, #2
 80147be:	dc6c      	bgt.n	801489a <RegionAS923InitDefaults+0x10e>
 80147c0:	2b00      	cmp	r3, #0
 80147c2:	d002      	beq.n	80147ca <RegionAS923InitDefaults+0x3e>
 80147c4:	2b01      	cmp	r3, #1
 80147c6:	d044      	beq.n	8014852 <RegionAS923InitDefaults+0xc6>
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
            break;
        }
        default:
        {
            break;
 80147c8:	e067      	b.n	801489a <RegionAS923InitDefaults+0x10e>
            if( ( params->NvmGroup1 == NULL ) || ( params->NvmGroup2 == NULL ) )
 80147ca:	687b      	ldr	r3, [r7, #4]
 80147cc:	681b      	ldr	r3, [r3, #0]
 80147ce:	2b00      	cmp	r3, #0
 80147d0:	d064      	beq.n	801489c <RegionAS923InitDefaults+0x110>
 80147d2:	687b      	ldr	r3, [r7, #4]
 80147d4:	685b      	ldr	r3, [r3, #4]
 80147d6:	2b00      	cmp	r3, #0
 80147d8:	d060      	beq.n	801489c <RegionAS923InitDefaults+0x110>
            RegionNvmGroup1 = (RegionNvmDataGroup1_t*) params->NvmGroup1;
 80147da:	687b      	ldr	r3, [r7, #4]
 80147dc:	681b      	ldr	r3, [r3, #0]
 80147de:	4a31      	ldr	r2, [pc, #196]	@ (80148a4 <RegionAS923InitDefaults+0x118>)
 80147e0:	6013      	str	r3, [r2, #0]
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
 80147e2:	687b      	ldr	r3, [r7, #4]
 80147e4:	685b      	ldr	r3, [r3, #4]
 80147e6:	4a30      	ldr	r2, [pc, #192]	@ (80148a8 <RegionAS923InitDefaults+0x11c>)
 80147e8:	6013      	str	r3, [r2, #0]
            memcpy1( ( uint8_t* )RegionNvmGroup1->Bands, ( uint8_t* )bands, sizeof( Band_t ) * AS923_MAX_NB_BANDS );
 80147ea:	4b2e      	ldr	r3, [pc, #184]	@ (80148a4 <RegionAS923InitDefaults+0x118>)
 80147ec:	681b      	ldr	r3, [r3, #0]
 80147ee:	4618      	mov	r0, r3
 80147f0:	f107 0320 	add.w	r3, r7, #32
 80147f4:	2218      	movs	r2, #24
 80147f6:	4619      	mov	r1, r3
 80147f8:	f001 ff1f 	bl	801663a <memcpy1>
            RegionNvmGroup2->Channels[0] = ( ChannelParams_t ) AS923_LC1;
 80147fc:	4b2a      	ldr	r3, [pc, #168]	@ (80148a8 <RegionAS923InitDefaults+0x11c>)
 80147fe:	681b      	ldr	r3, [r3, #0]
 8014800:	4a2a      	ldr	r2, [pc, #168]	@ (80148ac <RegionAS923InitDefaults+0x120>)
 8014802:	ca07      	ldmia	r2, {r0, r1, r2}
 8014804:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->Channels[1] = ( ChannelParams_t ) AS923_LC2;
 8014808:	4b27      	ldr	r3, [pc, #156]	@ (80148a8 <RegionAS923InitDefaults+0x11c>)
 801480a:	681b      	ldr	r3, [r3, #0]
 801480c:	4a28      	ldr	r2, [pc, #160]	@ (80148b0 <RegionAS923InitDefaults+0x124>)
 801480e:	330c      	adds	r3, #12
 8014810:	ca07      	ldmia	r2, {r0, r1, r2}
 8014812:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->Channels[0].Frequency -= REGION_AS923_FREQ_OFFSET;
 8014816:	4b24      	ldr	r3, [pc, #144]	@ (80148a8 <RegionAS923InitDefaults+0x11c>)
 8014818:	681a      	ldr	r2, [r3, #0]
 801481a:	4b23      	ldr	r3, [pc, #140]	@ (80148a8 <RegionAS923InitDefaults+0x11c>)
 801481c:	681b      	ldr	r3, [r3, #0]
 801481e:	6812      	ldr	r2, [r2, #0]
 8014820:	601a      	str	r2, [r3, #0]
            RegionNvmGroup2->Channels[1].Frequency -= REGION_AS923_FREQ_OFFSET;
 8014822:	4b21      	ldr	r3, [pc, #132]	@ (80148a8 <RegionAS923InitDefaults+0x11c>)
 8014824:	681a      	ldr	r2, [r3, #0]
 8014826:	4b20      	ldr	r3, [pc, #128]	@ (80148a8 <RegionAS923InitDefaults+0x11c>)
 8014828:	681b      	ldr	r3, [r3, #0]
 801482a:	68d2      	ldr	r2, [r2, #12]
 801482c:	60da      	str	r2, [r3, #12]
            RegionNvmGroup2->ChannelsDefaultMask[0] = LC( 1 ) + LC( 2 );
 801482e:	4b1e      	ldr	r3, [pc, #120]	@ (80148a8 <RegionAS923InitDefaults+0x11c>)
 8014830:	681b      	ldr	r3, [r3, #0]
 8014832:	2203      	movs	r2, #3
 8014834:	f8a3 248c 	strh.w	r2, [r3, #1164]	@ 0x48c
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 8014838:	4b1b      	ldr	r3, [pc, #108]	@ (80148a8 <RegionAS923InitDefaults+0x11c>)
 801483a:	681b      	ldr	r3, [r3, #0]
 801483c:	f503 6090 	add.w	r0, r3, #1152	@ 0x480
 8014840:	4b19      	ldr	r3, [pc, #100]	@ (80148a8 <RegionAS923InitDefaults+0x11c>)
 8014842:	681b      	ldr	r3, [r3, #0]
 8014844:	f203 438c 	addw	r3, r3, #1164	@ 0x48c
 8014848:	2201      	movs	r2, #1
 801484a:	4619      	mov	r1, r3
 801484c:	f001 f9a6 	bl	8015b9c <RegionCommonChanMaskCopy>
 8014850:	e024      	b.n	801489c <RegionAS923InitDefaults+0x110>
            RegionNvmGroup2->Channels[0].Rx1Frequency = 0;
 8014852:	4b15      	ldr	r3, [pc, #84]	@ (80148a8 <RegionAS923InitDefaults+0x11c>)
 8014854:	681b      	ldr	r3, [r3, #0]
 8014856:	2200      	movs	r2, #0
 8014858:	605a      	str	r2, [r3, #4]
            RegionNvmGroup2->Channels[1].Rx1Frequency = 0;
 801485a:	4b13      	ldr	r3, [pc, #76]	@ (80148a8 <RegionAS923InitDefaults+0x11c>)
 801485c:	681b      	ldr	r3, [r3, #0]
 801485e:	2200      	movs	r2, #0
 8014860:	611a      	str	r2, [r3, #16]
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 8014862:	4b11      	ldr	r3, [pc, #68]	@ (80148a8 <RegionAS923InitDefaults+0x11c>)
 8014864:	681b      	ldr	r3, [r3, #0]
 8014866:	f503 6090 	add.w	r0, r3, #1152	@ 0x480
 801486a:	4b0f      	ldr	r3, [pc, #60]	@ (80148a8 <RegionAS923InitDefaults+0x11c>)
 801486c:	681b      	ldr	r3, [r3, #0]
 801486e:	f203 438c 	addw	r3, r3, #1164	@ 0x48c
 8014872:	2201      	movs	r2, #1
 8014874:	4619      	mov	r1, r3
 8014876:	f001 f991 	bl	8015b9c <RegionCommonChanMaskCopy>
            break;
 801487a:	e00f      	b.n	801489c <RegionAS923InitDefaults+0x110>
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
 801487c:	4b0a      	ldr	r3, [pc, #40]	@ (80148a8 <RegionAS923InitDefaults+0x11c>)
 801487e:	681b      	ldr	r3, [r3, #0]
 8014880:	f8b3 1480 	ldrh.w	r1, [r3, #1152]	@ 0x480
 8014884:	4b08      	ldr	r3, [pc, #32]	@ (80148a8 <RegionAS923InitDefaults+0x11c>)
 8014886:	681b      	ldr	r3, [r3, #0]
 8014888:	f8b3 248c 	ldrh.w	r2, [r3, #1164]	@ 0x48c
 801488c:	4b06      	ldr	r3, [pc, #24]	@ (80148a8 <RegionAS923InitDefaults+0x11c>)
 801488e:	681b      	ldr	r3, [r3, #0]
 8014890:	430a      	orrs	r2, r1
 8014892:	b292      	uxth	r2, r2
 8014894:	f8a3 2480 	strh.w	r2, [r3, #1152]	@ 0x480
            break;
 8014898:	e000      	b.n	801489c <RegionAS923InitDefaults+0x110>
            break;
 801489a:	bf00      	nop
        }
    }
#endif /* REGION_AS923 */
}
 801489c:	3738      	adds	r7, #56	@ 0x38
 801489e:	46bd      	mov	sp, r7
 80148a0:	bd80      	pop	{r7, pc}
 80148a2:	bf00      	nop
 80148a4:	200013e0 	.word	0x200013e0
 80148a8:	200013e4 	.word	0x200013e4
 80148ac:	0801b664 	.word	0x0801b664
 80148b0:	0801b670 	.word	0x0801b670

080148b4 <RegionAS923Verify>:

bool RegionAS923Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 80148b4:	b580      	push	{r7, lr}
 80148b6:	b082      	sub	sp, #8
 80148b8:	af00      	add	r7, sp, #0
 80148ba:	6078      	str	r0, [r7, #4]
 80148bc:	460b      	mov	r3, r1
 80148be:	70fb      	strb	r3, [r7, #3]
#if defined( REGION_AS923 )
    switch( phyAttribute )
 80148c0:	78fb      	ldrb	r3, [r7, #3]
 80148c2:	2b0f      	cmp	r3, #15
 80148c4:	f200 808f 	bhi.w	80149e6 <RegionAS923Verify+0x132>
 80148c8:	a201      	add	r2, pc, #4	@ (adr r2, 80148d0 <RegionAS923Verify+0x1c>)
 80148ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80148ce:	bf00      	nop
 80148d0:	08014911 	.word	0x08014911
 80148d4:	080149e7 	.word	0x080149e7
 80148d8:	080149e7 	.word	0x080149e7
 80148dc:	080149e7 	.word	0x080149e7
 80148e0:	080149e7 	.word	0x080149e7
 80148e4:	0801491f 	.word	0x0801491f
 80148e8:	08014963 	.word	0x08014963
 80148ec:	08014981 	.word	0x08014981
 80148f0:	080149e7 	.word	0x080149e7
 80148f4:	080149c5 	.word	0x080149c5
 80148f8:	080149c5 	.word	0x080149c5
 80148fc:	080149e7 	.word	0x080149e7
 8014900:	080149e7 	.word	0x080149e7
 8014904:	080149e7 	.word	0x080149e7
 8014908:	080149e7 	.word	0x080149e7
 801490c:	080149e3 	.word	0x080149e3
    {
        case PHY_FREQUENCY:
        {
            return VerifyRfFreq( verify->Frequency );
 8014910:	687b      	ldr	r3, [r7, #4]
 8014912:	681b      	ldr	r3, [r3, #0]
 8014914:	4618      	mov	r0, r3
 8014916:	f7ff fd1b 	bl	8014350 <VerifyRfFreq>
 801491a:	4603      	mov	r3, r0
 801491c:	e064      	b.n	80149e8 <RegionAS923Verify+0x134>
        }
        case PHY_TX_DR:
        {
            if( verify->DatarateParams.UplinkDwellTime == 0 )
 801491e:	687b      	ldr	r3, [r7, #4]
 8014920:	789b      	ldrb	r3, [r3, #2]
 8014922:	2b00      	cmp	r3, #0
 8014924:	d10e      	bne.n	8014944 <RegionAS923Verify+0x90>
            {
                return RegionCommonValueInRange( verify->DatarateParams.Datarate, AS923_TX_MIN_DATARATE, AS923_TX_MAX_DATARATE );
 8014926:	687b      	ldr	r3, [r7, #4]
 8014928:	f993 3000 	ldrsb.w	r3, [r3]
 801492c:	2207      	movs	r2, #7
 801492e:	2100      	movs	r1, #0
 8014930:	4618      	mov	r0, r3
 8014932:	f001 f8b6 	bl	8015aa2 <RegionCommonValueInRange>
 8014936:	4603      	mov	r3, r0
 8014938:	2b00      	cmp	r3, #0
 801493a:	bf14      	ite	ne
 801493c:	2301      	movne	r3, #1
 801493e:	2300      	moveq	r3, #0
 8014940:	b2db      	uxtb	r3, r3
 8014942:	e051      	b.n	80149e8 <RegionAS923Verify+0x134>
            }
            else
            {
                return RegionCommonValueInRange( verify->DatarateParams.Datarate, AS923_DWELL_LIMIT_DATARATE, AS923_TX_MAX_DATARATE );
 8014944:	687b      	ldr	r3, [r7, #4]
 8014946:	f993 3000 	ldrsb.w	r3, [r3]
 801494a:	2207      	movs	r2, #7
 801494c:	2102      	movs	r1, #2
 801494e:	4618      	mov	r0, r3
 8014950:	f001 f8a7 	bl	8015aa2 <RegionCommonValueInRange>
 8014954:	4603      	mov	r3, r0
 8014956:	2b00      	cmp	r3, #0
 8014958:	bf14      	ite	ne
 801495a:	2301      	movne	r3, #1
 801495c:	2300      	moveq	r3, #0
 801495e:	b2db      	uxtb	r3, r3
 8014960:	e042      	b.n	80149e8 <RegionAS923Verify+0x134>
            }
        }
        case PHY_DEF_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
 8014962:	687b      	ldr	r3, [r7, #4]
 8014964:	f993 3000 	ldrsb.w	r3, [r3]
 8014968:	2205      	movs	r2, #5
 801496a:	2100      	movs	r1, #0
 801496c:	4618      	mov	r0, r3
 801496e:	f001 f898 	bl	8015aa2 <RegionCommonValueInRange>
 8014972:	4603      	mov	r3, r0
 8014974:	2b00      	cmp	r3, #0
 8014976:	bf14      	ite	ne
 8014978:	2301      	movne	r3, #1
 801497a:	2300      	moveq	r3, #0
 801497c:	b2db      	uxtb	r3, r3
 801497e:	e033      	b.n	80149e8 <RegionAS923Verify+0x134>
        }
        case PHY_RX_DR:
        {
            if( verify->DatarateParams.DownlinkDwellTime == 0 )
 8014980:	687b      	ldr	r3, [r7, #4]
 8014982:	785b      	ldrb	r3, [r3, #1]
 8014984:	2b00      	cmp	r3, #0
 8014986:	d10e      	bne.n	80149a6 <RegionAS923Verify+0xf2>
            {
                return RegionCommonValueInRange( verify->DatarateParams.Datarate, AS923_RX_MIN_DATARATE, AS923_RX_MAX_DATARATE );
 8014988:	687b      	ldr	r3, [r7, #4]
 801498a:	f993 3000 	ldrsb.w	r3, [r3]
 801498e:	2207      	movs	r2, #7
 8014990:	2100      	movs	r1, #0
 8014992:	4618      	mov	r0, r3
 8014994:	f001 f885 	bl	8015aa2 <RegionCommonValueInRange>
 8014998:	4603      	mov	r3, r0
 801499a:	2b00      	cmp	r3, #0
 801499c:	bf14      	ite	ne
 801499e:	2301      	movne	r3, #1
 80149a0:	2300      	moveq	r3, #0
 80149a2:	b2db      	uxtb	r3, r3
 80149a4:	e020      	b.n	80149e8 <RegionAS923Verify+0x134>
            }
            else
            {
                return RegionCommonValueInRange( verify->DatarateParams.Datarate, AS923_DWELL_LIMIT_DATARATE, AS923_RX_MAX_DATARATE );
 80149a6:	687b      	ldr	r3, [r7, #4]
 80149a8:	f993 3000 	ldrsb.w	r3, [r3]
 80149ac:	2207      	movs	r2, #7
 80149ae:	2102      	movs	r1, #2
 80149b0:	4618      	mov	r0, r3
 80149b2:	f001 f876 	bl	8015aa2 <RegionCommonValueInRange>
 80149b6:	4603      	mov	r3, r0
 80149b8:	2b00      	cmp	r3, #0
 80149ba:	bf14      	ite	ne
 80149bc:	2301      	movne	r3, #1
 80149be:	2300      	moveq	r3, #0
 80149c0:	b2db      	uxtb	r3, r3
 80149c2:	e011      	b.n	80149e8 <RegionAS923Verify+0x134>
        }
        case PHY_DEF_TX_POWER:
        case PHY_TX_POWER:
        {
            // Remark: switched min and max!
            return RegionCommonValueInRange( verify->TxPower, AS923_MAX_TX_POWER, AS923_MIN_TX_POWER );
 80149c4:	687b      	ldr	r3, [r7, #4]
 80149c6:	f993 3000 	ldrsb.w	r3, [r3]
 80149ca:	2207      	movs	r2, #7
 80149cc:	2100      	movs	r1, #0
 80149ce:	4618      	mov	r0, r3
 80149d0:	f001 f867 	bl	8015aa2 <RegionCommonValueInRange>
 80149d4:	4603      	mov	r3, r0
 80149d6:	2b00      	cmp	r3, #0
 80149d8:	bf14      	ite	ne
 80149da:	2301      	movne	r3, #1
 80149dc:	2300      	moveq	r3, #0
 80149de:	b2db      	uxtb	r3, r3
 80149e0:	e002      	b.n	80149e8 <RegionAS923Verify+0x134>
        }
        case PHY_DUTY_CYCLE:
        {
            return AS923_DUTY_CYCLE_ENABLED;
 80149e2:	2300      	movs	r3, #0
 80149e4:	e000      	b.n	80149e8 <RegionAS923Verify+0x134>
        }
        default:
            return false;
 80149e6:	2300      	movs	r3, #0
    }
#else
    return false;
#endif /* REGION_AS923 */
}
 80149e8:	4618      	mov	r0, r3
 80149ea:	3708      	adds	r7, #8
 80149ec:	46bd      	mov	sp, r7
 80149ee:	bd80      	pop	{r7, pc}

080149f0 <RegionAS923ApplyCFList>:

void RegionAS923ApplyCFList( ApplyCFListParams_t* applyCFList )
{
 80149f0:	b580      	push	{r7, lr}
 80149f2:	b08a      	sub	sp, #40	@ 0x28
 80149f4:	af00      	add	r7, sp, #0
 80149f6:	6078      	str	r0, [r7, #4]
    ChannelParams_t newChannel;
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    // Setup default datarate range
    newChannel.DrRange.Value = ( DR_5 << 4 ) | DR_0;
 80149f8:	2350      	movs	r3, #80	@ 0x50
 80149fa:	f887 3020 	strb.w	r3, [r7, #32]

    // Size of the optional CF list
    if( applyCFList->Size != 16 )
 80149fe:	687b      	ldr	r3, [r7, #4]
 8014a00:	791b      	ldrb	r3, [r3, #4]
 8014a02:	2b10      	cmp	r3, #16
 8014a04:	d162      	bne.n	8014acc <RegionAS923ApplyCFList+0xdc>
    {
        return;
    }

    // Last byte CFListType must be 0 to indicate the CFList contains a list of frequencies
    if( applyCFList->Payload[15] != 0 )
 8014a06:	687b      	ldr	r3, [r7, #4]
 8014a08:	681b      	ldr	r3, [r3, #0]
 8014a0a:	330f      	adds	r3, #15
 8014a0c:	781b      	ldrb	r3, [r3, #0]
 8014a0e:	2b00      	cmp	r3, #0
 8014a10:	d15e      	bne.n	8014ad0 <RegionAS923ApplyCFList+0xe0>
    {
        return;
    }

    // Last byte is RFU, don't take it into account
    for( uint8_t i = 0, chanIdx = AS923_NUMB_DEFAULT_CHANNELS; chanIdx < AS923_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 8014a12:	2300      	movs	r3, #0
 8014a14:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8014a18:	2302      	movs	r3, #2
 8014a1a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8014a1e:	e050      	b.n	8014ac2 <RegionAS923ApplyCFList+0xd2>
    {
        if( chanIdx < ( AS923_NUMB_CHANNELS_CF_LIST + AS923_NUMB_DEFAULT_CHANNELS ) )
 8014a20:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8014a24:	2b06      	cmp	r3, #6
 8014a26:	d824      	bhi.n	8014a72 <RegionAS923ApplyCFList+0x82>
        {
            // Channel frequency
            newChannel.Frequency = (uint32_t) applyCFList->Payload[i];
 8014a28:	687b      	ldr	r3, [r7, #4]
 8014a2a:	681a      	ldr	r2, [r3, #0]
 8014a2c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8014a30:	4413      	add	r3, r2
 8014a32:	781b      	ldrb	r3, [r3, #0]
 8014a34:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 1] << 8 );
 8014a36:	69ba      	ldr	r2, [r7, #24]
 8014a38:	687b      	ldr	r3, [r7, #4]
 8014a3a:	6819      	ldr	r1, [r3, #0]
 8014a3c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8014a40:	3301      	adds	r3, #1
 8014a42:	440b      	add	r3, r1
 8014a44:	781b      	ldrb	r3, [r3, #0]
 8014a46:	021b      	lsls	r3, r3, #8
 8014a48:	4313      	orrs	r3, r2
 8014a4a:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 2] << 16 );
 8014a4c:	69ba      	ldr	r2, [r7, #24]
 8014a4e:	687b      	ldr	r3, [r7, #4]
 8014a50:	6819      	ldr	r1, [r3, #0]
 8014a52:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8014a56:	3302      	adds	r3, #2
 8014a58:	440b      	add	r3, r1
 8014a5a:	781b      	ldrb	r3, [r3, #0]
 8014a5c:	041b      	lsls	r3, r3, #16
 8014a5e:	4313      	orrs	r3, r2
 8014a60:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency *= 100;
 8014a62:	69bb      	ldr	r3, [r7, #24]
 8014a64:	2264      	movs	r2, #100	@ 0x64
 8014a66:	fb02 f303 	mul.w	r3, r2, r3
 8014a6a:	61bb      	str	r3, [r7, #24]

            // Initialize alternative frequency to 0
            newChannel.Rx1Frequency = 0;
 8014a6c:	2300      	movs	r3, #0
 8014a6e:	61fb      	str	r3, [r7, #28]
 8014a70:	e006      	b.n	8014a80 <RegionAS923ApplyCFList+0x90>
        }
        else
        {
            newChannel.Frequency = 0;
 8014a72:	2300      	movs	r3, #0
 8014a74:	61bb      	str	r3, [r7, #24]
            newChannel.DrRange.Value = 0;
 8014a76:	2300      	movs	r3, #0
 8014a78:	f887 3020 	strb.w	r3, [r7, #32]
            newChannel.Rx1Frequency = 0;
 8014a7c:	2300      	movs	r3, #0
 8014a7e:	61fb      	str	r3, [r7, #28]
        }

        if( newChannel.Frequency != 0 )
 8014a80:	69bb      	ldr	r3, [r7, #24]
 8014a82:	2b00      	cmp	r3, #0
 8014a84:	d00b      	beq.n	8014a9e <RegionAS923ApplyCFList+0xae>
        {
            channelAdd.NewChannel = &newChannel;
 8014a86:	f107 0318 	add.w	r3, r7, #24
 8014a8a:	613b      	str	r3, [r7, #16]
            channelAdd.ChannelId = chanIdx;
 8014a8c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8014a90:	753b      	strb	r3, [r7, #20]

            // Try to add all channels
            RegionAS923ChannelAdd( &channelAdd );
 8014a92:	f107 0310 	add.w	r3, r7, #16
 8014a96:	4618      	mov	r0, r3
 8014a98:	f000 fd06 	bl	80154a8 <RegionAS923ChannelAdd>
 8014a9c:	e007      	b.n	8014aae <RegionAS923ApplyCFList+0xbe>
        }
        else
        {
            channelRemove.ChannelId = chanIdx;
 8014a9e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8014aa2:	733b      	strb	r3, [r7, #12]

            RegionAS923ChannelsRemove( &channelRemove );
 8014aa4:	f107 030c 	add.w	r3, r7, #12
 8014aa8:	4618      	mov	r0, r3
 8014aaa:	f000 fd99 	bl	80155e0 <RegionAS923ChannelsRemove>
    for( uint8_t i = 0, chanIdx = AS923_NUMB_DEFAULT_CHANNELS; chanIdx < AS923_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 8014aae:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8014ab2:	3303      	adds	r3, #3
 8014ab4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8014ab8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8014abc:	3301      	adds	r3, #1
 8014abe:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8014ac2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8014ac6:	2b0f      	cmp	r3, #15
 8014ac8:	d9aa      	bls.n	8014a20 <RegionAS923ApplyCFList+0x30>
 8014aca:	e002      	b.n	8014ad2 <RegionAS923ApplyCFList+0xe2>
        return;
 8014acc:	bf00      	nop
 8014ace:	e000      	b.n	8014ad2 <RegionAS923ApplyCFList+0xe2>
        return;
 8014ad0:	bf00      	nop
        }
    }
#endif /* REGION_AS923 */
}
 8014ad2:	3728      	adds	r7, #40	@ 0x28
 8014ad4:	46bd      	mov	sp, r7
 8014ad6:	bd80      	pop	{r7, pc}

08014ad8 <RegionAS923ChanMaskSet>:

bool RegionAS923ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 8014ad8:	b580      	push	{r7, lr}
 8014ada:	b082      	sub	sp, #8
 8014adc:	af00      	add	r7, sp, #0
 8014ade:	6078      	str	r0, [r7, #4]
#if defined( REGION_AS923 )
    switch( chanMaskSet->ChannelsMaskType )
 8014ae0:	687b      	ldr	r3, [r7, #4]
 8014ae2:	791b      	ldrb	r3, [r3, #4]
 8014ae4:	2b00      	cmp	r3, #0
 8014ae6:	d002      	beq.n	8014aee <RegionAS923ChanMaskSet+0x16>
 8014ae8:	2b01      	cmp	r3, #1
 8014aea:	d00b      	beq.n	8014b04 <RegionAS923ChanMaskSet+0x2c>
 8014aec:	e015      	b.n	8014b1a <RegionAS923ChanMaskSet+0x42>
    {
        case CHANNELS_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, chanMaskSet->ChannelsMaskIn, 1 );
 8014aee:	4b0e      	ldr	r3, [pc, #56]	@ (8014b28 <RegionAS923ChanMaskSet+0x50>)
 8014af0:	681b      	ldr	r3, [r3, #0]
 8014af2:	f503 6090 	add.w	r0, r3, #1152	@ 0x480
 8014af6:	687b      	ldr	r3, [r7, #4]
 8014af8:	681b      	ldr	r3, [r3, #0]
 8014afa:	2201      	movs	r2, #1
 8014afc:	4619      	mov	r1, r3
 8014afe:	f001 f84d 	bl	8015b9c <RegionCommonChanMaskCopy>
            break;
 8014b02:	e00c      	b.n	8014b1e <RegionAS923ChanMaskSet+0x46>
        }
        case CHANNELS_DEFAULT_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, 1 );
 8014b04:	4b08      	ldr	r3, [pc, #32]	@ (8014b28 <RegionAS923ChanMaskSet+0x50>)
 8014b06:	681b      	ldr	r3, [r3, #0]
 8014b08:	f203 408c 	addw	r0, r3, #1164	@ 0x48c
 8014b0c:	687b      	ldr	r3, [r7, #4]
 8014b0e:	681b      	ldr	r3, [r3, #0]
 8014b10:	2201      	movs	r2, #1
 8014b12:	4619      	mov	r1, r3
 8014b14:	f001 f842 	bl	8015b9c <RegionCommonChanMaskCopy>
            break;
 8014b18:	e001      	b.n	8014b1e <RegionAS923ChanMaskSet+0x46>
        }
        default:
            return false;
 8014b1a:	2300      	movs	r3, #0
 8014b1c:	e000      	b.n	8014b20 <RegionAS923ChanMaskSet+0x48>
    }
    return true;
 8014b1e:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_AS923 */
}
 8014b20:	4618      	mov	r0, r3
 8014b22:	3708      	adds	r7, #8
 8014b24:	46bd      	mov	sp, r7
 8014b26:	bd80      	pop	{r7, pc}
 8014b28:	200013e4 	.word	0x200013e4

08014b2c <RegionAS923ComputeRxWindowParameters>:

void RegionAS923ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 8014b2c:	b580      	push	{r7, lr}
 8014b2e:	b088      	sub	sp, #32
 8014b30:	af02      	add	r7, sp, #8
 8014b32:	60ba      	str	r2, [r7, #8]
 8014b34:	607b      	str	r3, [r7, #4]
 8014b36:	4603      	mov	r3, r0
 8014b38:	73fb      	strb	r3, [r7, #15]
 8014b3a:	460b      	mov	r3, r1
 8014b3c:	73bb      	strb	r3, [r7, #14]
#if defined( REGION_AS923 )
    uint32_t tSymbolInUs = 0;
 8014b3e:	2300      	movs	r3, #0
 8014b40:	617b      	str	r3, [r7, #20]

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, AS923_RX_MAX_DATARATE );
 8014b42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014b46:	2b07      	cmp	r3, #7
 8014b48:	bfa8      	it	ge
 8014b4a:	2307      	movge	r3, #7
 8014b4c:	b25a      	sxtb	r2, r3
 8014b4e:	687b      	ldr	r3, [r7, #4]
 8014b50:	705a      	strb	r2, [r3, #1]
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsAS923 );
 8014b52:	687b      	ldr	r3, [r7, #4]
 8014b54:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8014b58:	491e      	ldr	r1, [pc, #120]	@ (8014bd4 <RegionAS923ComputeRxWindowParameters+0xa8>)
 8014b5a:	4618      	mov	r0, r3
 8014b5c:	f001 fcbe 	bl	80164dc <RegionCommonGetBandwidth>
 8014b60:	4603      	mov	r3, r0
 8014b62:	b2da      	uxtb	r2, r3
 8014b64:	687b      	ldr	r3, [r7, #4]
 8014b66:	709a      	strb	r2, [r3, #2]

    if( rxConfigParams->Datarate == DR_7 )
 8014b68:	687b      	ldr	r3, [r7, #4]
 8014b6a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8014b6e:	2b07      	cmp	r3, #7
 8014b70:	d10a      	bne.n	8014b88 <RegionAS923ComputeRxWindowParameters+0x5c>
    { // FSK
        tSymbolInUs = RegionCommonComputeSymbolTimeFsk( DataratesAS923[rxConfigParams->Datarate] );
 8014b72:	687b      	ldr	r3, [r7, #4]
 8014b74:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8014b78:	461a      	mov	r2, r3
 8014b7a:	4b17      	ldr	r3, [pc, #92]	@ (8014bd8 <RegionAS923ComputeRxWindowParameters+0xac>)
 8014b7c:	5c9b      	ldrb	r3, [r3, r2]
 8014b7e:	4618      	mov	r0, r3
 8014b80:	f001 fa40 	bl	8016004 <RegionCommonComputeSymbolTimeFsk>
 8014b84:	6178      	str	r0, [r7, #20]
 8014b86:	e011      	b.n	8014bac <RegionAS923ComputeRxWindowParameters+0x80>
    }
    else
    { // LoRa
        tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesAS923[rxConfigParams->Datarate], BandwidthsAS923[rxConfigParams->Datarate] );
 8014b88:	687b      	ldr	r3, [r7, #4]
 8014b8a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8014b8e:	461a      	mov	r2, r3
 8014b90:	4b11      	ldr	r3, [pc, #68]	@ (8014bd8 <RegionAS923ComputeRxWindowParameters+0xac>)
 8014b92:	5c9a      	ldrb	r2, [r3, r2]
 8014b94:	687b      	ldr	r3, [r7, #4]
 8014b96:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8014b9a:	4619      	mov	r1, r3
 8014b9c:	4b0d      	ldr	r3, [pc, #52]	@ (8014bd4 <RegionAS923ComputeRxWindowParameters+0xa8>)
 8014b9e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8014ba2:	4619      	mov	r1, r3
 8014ba4:	4610      	mov	r0, r2
 8014ba6:	f001 fa17 	bl	8015fd8 <RegionCommonComputeSymbolTimeLoRa>
 8014baa:	6178      	str	r0, [r7, #20]
    }

    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 8014bac:	4b0b      	ldr	r3, [pc, #44]	@ (8014bdc <RegionAS923ComputeRxWindowParameters+0xb0>)
 8014bae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8014bb0:	4798      	blx	r3
 8014bb2:	687b      	ldr	r3, [r7, #4]
 8014bb4:	3308      	adds	r3, #8
 8014bb6:	687a      	ldr	r2, [r7, #4]
 8014bb8:	320c      	adds	r2, #12
 8014bba:	7bb9      	ldrb	r1, [r7, #14]
 8014bbc:	9201      	str	r2, [sp, #4]
 8014bbe:	9300      	str	r3, [sp, #0]
 8014bc0:	4603      	mov	r3, r0
 8014bc2:	68ba      	ldr	r2, [r7, #8]
 8014bc4:	6978      	ldr	r0, [r7, #20]
 8014bc6:	f001 fa2d 	bl	8016024 <RegionCommonComputeRxWindowParameters>
#endif /* REGION_AS923 */
}
 8014bca:	bf00      	nop
 8014bcc:	3718      	adds	r7, #24
 8014bce:	46bd      	mov	sp, r7
 8014bd0:	bd80      	pop	{r7, pc}
 8014bd2:	bf00      	nop
 8014bd4:	0801bcc8 	.word	0x0801bcc8
 8014bd8:	0801bcc0 	.word	0x0801bcc0
 8014bdc:	0801bd08 	.word	0x0801bd08

08014be0 <RegionAS923RxConfig>:

bool RegionAS923RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 8014be0:	b5b0      	push	{r4, r5, r7, lr}
 8014be2:	b090      	sub	sp, #64	@ 0x40
 8014be4:	af0a      	add	r7, sp, #40	@ 0x28
 8014be6:	6078      	str	r0, [r7, #4]
 8014be8:	6039      	str	r1, [r7, #0]
#if defined( REGION_AS923 )
    RadioModems_t modem;
    int8_t dr = rxConfig->Datarate;
 8014bea:	687b      	ldr	r3, [r7, #4]
 8014bec:	785b      	ldrb	r3, [r3, #1]
 8014bee:	73fb      	strb	r3, [r7, #15]
    uint8_t maxPayload = 0;
 8014bf0:	2300      	movs	r3, #0
 8014bf2:	75bb      	strb	r3, [r7, #22]
    int8_t phyDr = 0;
 8014bf4:	2300      	movs	r3, #0
 8014bf6:	73bb      	strb	r3, [r7, #14]
    uint32_t frequency = rxConfig->Frequency;
 8014bf8:	687b      	ldr	r3, [r7, #4]
 8014bfa:	685b      	ldr	r3, [r3, #4]
 8014bfc:	613b      	str	r3, [r7, #16]

    if( Radio.GetStatus( ) != RF_IDLE )
 8014bfe:	4b5a      	ldr	r3, [pc, #360]	@ (8014d68 <RegionAS923RxConfig+0x188>)
 8014c00:	685b      	ldr	r3, [r3, #4]
 8014c02:	4798      	blx	r3
 8014c04:	4603      	mov	r3, r0
 8014c06:	2b00      	cmp	r3, #0
 8014c08:	d001      	beq.n	8014c0e <RegionAS923RxConfig+0x2e>
    {
        return false;
 8014c0a:	2300      	movs	r3, #0
 8014c0c:	e0a8      	b.n	8014d60 <RegionAS923RxConfig+0x180>
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 8014c0e:	687b      	ldr	r3, [r7, #4]
 8014c10:	7cdb      	ldrb	r3, [r3, #19]
 8014c12:	2b00      	cmp	r3, #0
 8014c14:	d126      	bne.n	8014c64 <RegionAS923RxConfig+0x84>
    {
        // Apply window 1 frequency
        frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Frequency;
 8014c16:	4b55      	ldr	r3, [pc, #340]	@ (8014d6c <RegionAS923RxConfig+0x18c>)
 8014c18:	681a      	ldr	r2, [r3, #0]
 8014c1a:	687b      	ldr	r3, [r7, #4]
 8014c1c:	781b      	ldrb	r3, [r3, #0]
 8014c1e:	4619      	mov	r1, r3
 8014c20:	460b      	mov	r3, r1
 8014c22:	005b      	lsls	r3, r3, #1
 8014c24:	440b      	add	r3, r1
 8014c26:	009b      	lsls	r3, r3, #2
 8014c28:	4413      	add	r3, r2
 8014c2a:	681b      	ldr	r3, [r3, #0]
 8014c2c:	613b      	str	r3, [r7, #16]
        // Apply the alternative RX 1 window frequency, if it is available
        if( RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency != 0 )
 8014c2e:	4b4f      	ldr	r3, [pc, #316]	@ (8014d6c <RegionAS923RxConfig+0x18c>)
 8014c30:	681a      	ldr	r2, [r3, #0]
 8014c32:	687b      	ldr	r3, [r7, #4]
 8014c34:	781b      	ldrb	r3, [r3, #0]
 8014c36:	4619      	mov	r1, r3
 8014c38:	460b      	mov	r3, r1
 8014c3a:	005b      	lsls	r3, r3, #1
 8014c3c:	440b      	add	r3, r1
 8014c3e:	009b      	lsls	r3, r3, #2
 8014c40:	4413      	add	r3, r2
 8014c42:	3304      	adds	r3, #4
 8014c44:	681b      	ldr	r3, [r3, #0]
 8014c46:	2b00      	cmp	r3, #0
 8014c48:	d00c      	beq.n	8014c64 <RegionAS923RxConfig+0x84>
        {
            frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency;
 8014c4a:	4b48      	ldr	r3, [pc, #288]	@ (8014d6c <RegionAS923RxConfig+0x18c>)
 8014c4c:	681a      	ldr	r2, [r3, #0]
 8014c4e:	687b      	ldr	r3, [r7, #4]
 8014c50:	781b      	ldrb	r3, [r3, #0]
 8014c52:	4619      	mov	r1, r3
 8014c54:	460b      	mov	r3, r1
 8014c56:	005b      	lsls	r3, r3, #1
 8014c58:	440b      	add	r3, r1
 8014c5a:	009b      	lsls	r3, r3, #2
 8014c5c:	4413      	add	r3, r2
 8014c5e:	3304      	adds	r3, #4
 8014c60:	681b      	ldr	r3, [r3, #0]
 8014c62:	613b      	str	r3, [r7, #16]
        }
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesAS923[dr];
 8014c64:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014c68:	4a41      	ldr	r2, [pc, #260]	@ (8014d70 <RegionAS923RxConfig+0x190>)
 8014c6a:	5cd3      	ldrb	r3, [r2, r3]
 8014c6c:	73bb      	strb	r3, [r7, #14]

    Radio.SetChannel( frequency );
 8014c6e:	4b3e      	ldr	r3, [pc, #248]	@ (8014d68 <RegionAS923RxConfig+0x188>)
 8014c70:	68db      	ldr	r3, [r3, #12]
 8014c72:	6938      	ldr	r0, [r7, #16]
 8014c74:	4798      	blx	r3

    // Radio configuration
    if( dr == DR_7 )
 8014c76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014c7a:	2b07      	cmp	r3, #7
 8014c7c:	d128      	bne.n	8014cd0 <RegionAS923RxConfig+0xf0>
    {
        modem = MODEM_FSK;
 8014c7e:	2300      	movs	r3, #0
 8014c80:	75fb      	strb	r3, [r7, #23]
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
 8014c82:	4b39      	ldr	r3, [pc, #228]	@ (8014d68 <RegionAS923RxConfig+0x188>)
 8014c84:	699c      	ldr	r4, [r3, #24]
 8014c86:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8014c8a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8014c8e:	fb02 f303 	mul.w	r3, r2, r3
 8014c92:	4619      	mov	r1, r3
 8014c94:	687b      	ldr	r3, [r7, #4]
 8014c96:	689b      	ldr	r3, [r3, #8]
 8014c98:	b29b      	uxth	r3, r3
 8014c9a:	687a      	ldr	r2, [r7, #4]
 8014c9c:	7c92      	ldrb	r2, [r2, #18]
 8014c9e:	7df8      	ldrb	r0, [r7, #23]
 8014ca0:	9209      	str	r2, [sp, #36]	@ 0x24
 8014ca2:	2200      	movs	r2, #0
 8014ca4:	9208      	str	r2, [sp, #32]
 8014ca6:	2200      	movs	r2, #0
 8014ca8:	9207      	str	r2, [sp, #28]
 8014caa:	2200      	movs	r2, #0
 8014cac:	9206      	str	r2, [sp, #24]
 8014cae:	2201      	movs	r2, #1
 8014cb0:	9205      	str	r2, [sp, #20]
 8014cb2:	2200      	movs	r2, #0
 8014cb4:	9204      	str	r2, [sp, #16]
 8014cb6:	2200      	movs	r2, #0
 8014cb8:	9203      	str	r2, [sp, #12]
 8014cba:	9302      	str	r3, [sp, #8]
 8014cbc:	2305      	movs	r3, #5
 8014cbe:	9301      	str	r3, [sp, #4]
 8014cc0:	4b2c      	ldr	r3, [pc, #176]	@ (8014d74 <RegionAS923RxConfig+0x194>)
 8014cc2:	9300      	str	r3, [sp, #0]
 8014cc4:	2300      	movs	r3, #0
 8014cc6:	460a      	mov	r2, r1
 8014cc8:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8014ccc:	47a0      	blx	r4
 8014cce:	e024      	b.n	8014d1a <RegionAS923RxConfig+0x13a>
    }
    else
    {
        modem = MODEM_LORA;
 8014cd0:	2301      	movs	r3, #1
 8014cd2:	75fb      	strb	r3, [r7, #23]
        Radio.SetRxConfig( modem, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 8014cd4:	4b24      	ldr	r3, [pc, #144]	@ (8014d68 <RegionAS923RxConfig+0x188>)
 8014cd6:	699c      	ldr	r4, [r3, #24]
 8014cd8:	687b      	ldr	r3, [r7, #4]
 8014cda:	789b      	ldrb	r3, [r3, #2]
 8014cdc:	461d      	mov	r5, r3
 8014cde:	f997 100e 	ldrsb.w	r1, [r7, #14]
 8014ce2:	687b      	ldr	r3, [r7, #4]
 8014ce4:	689b      	ldr	r3, [r3, #8]
 8014ce6:	b29b      	uxth	r3, r3
 8014ce8:	687a      	ldr	r2, [r7, #4]
 8014cea:	7c92      	ldrb	r2, [r2, #18]
 8014cec:	7df8      	ldrb	r0, [r7, #23]
 8014cee:	9209      	str	r2, [sp, #36]	@ 0x24
 8014cf0:	2201      	movs	r2, #1
 8014cf2:	9208      	str	r2, [sp, #32]
 8014cf4:	2200      	movs	r2, #0
 8014cf6:	9207      	str	r2, [sp, #28]
 8014cf8:	2200      	movs	r2, #0
 8014cfa:	9206      	str	r2, [sp, #24]
 8014cfc:	2200      	movs	r2, #0
 8014cfe:	9205      	str	r2, [sp, #20]
 8014d00:	2200      	movs	r2, #0
 8014d02:	9204      	str	r2, [sp, #16]
 8014d04:	2200      	movs	r2, #0
 8014d06:	9203      	str	r2, [sp, #12]
 8014d08:	9302      	str	r3, [sp, #8]
 8014d0a:	2308      	movs	r3, #8
 8014d0c:	9301      	str	r3, [sp, #4]
 8014d0e:	2300      	movs	r3, #0
 8014d10:	9300      	str	r3, [sp, #0]
 8014d12:	2301      	movs	r3, #1
 8014d14:	460a      	mov	r2, r1
 8014d16:	4629      	mov	r1, r5
 8014d18:	47a0      	blx	r4
    }

    if( rxConfig->RepeaterSupport == true )
 8014d1a:	687b      	ldr	r3, [r7, #4]
 8014d1c:	7c5b      	ldrb	r3, [r3, #17]
 8014d1e:	2b00      	cmp	r3, #0
 8014d20:	d005      	beq.n	8014d2e <RegionAS923RxConfig+0x14e>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterDwell0AS923[dr];
 8014d22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014d26:	4a14      	ldr	r2, [pc, #80]	@ (8014d78 <RegionAS923RxConfig+0x198>)
 8014d28:	5cd3      	ldrb	r3, [r2, r3]
 8014d2a:	75bb      	strb	r3, [r7, #22]
 8014d2c:	e004      	b.n	8014d38 <RegionAS923RxConfig+0x158>
    }
    else
    {
        maxPayload = MaxPayloadOfDatarateDwell0AS923[dr];
 8014d2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014d32:	4a12      	ldr	r2, [pc, #72]	@ (8014d7c <RegionAS923RxConfig+0x19c>)
 8014d34:	5cd3      	ldrb	r3, [r2, r3]
 8014d36:	75bb      	strb	r3, [r7, #22]
    }

    Radio.SetMaxPayloadLength( modem, maxPayload + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 8014d38:	4b0b      	ldr	r3, [pc, #44]	@ (8014d68 <RegionAS923RxConfig+0x188>)
 8014d3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014d3c:	7dba      	ldrb	r2, [r7, #22]
 8014d3e:	320d      	adds	r2, #13
 8014d40:	b2d1      	uxtb	r1, r2
 8014d42:	7dfa      	ldrb	r2, [r7, #23]
 8014d44:	4610      	mov	r0, r2
 8014d46:	4798      	blx	r3

    RegionCommonRxConfigPrint(rxConfig->RxSlot, frequency, dr);
 8014d48:	687b      	ldr	r3, [r7, #4]
 8014d4a:	7cdb      	ldrb	r3, [r3, #19]
 8014d4c:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8014d50:	6939      	ldr	r1, [r7, #16]
 8014d52:	4618      	mov	r0, r3
 8014d54:	f001 fbe0 	bl	8016518 <RegionCommonRxConfigPrint>

    *datarate = (uint8_t) dr;
 8014d58:	683b      	ldr	r3, [r7, #0]
 8014d5a:	7bfa      	ldrb	r2, [r7, #15]
 8014d5c:	701a      	strb	r2, [r3, #0]
    return true;
 8014d5e:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_AS923 */
}
 8014d60:	4618      	mov	r0, r3
 8014d62:	3718      	adds	r7, #24
 8014d64:	46bd      	mov	sp, r7
 8014d66:	bdb0      	pop	{r4, r5, r7, pc}
 8014d68:	0801bd08 	.word	0x0801bd08
 8014d6c:	200013e4 	.word	0x200013e4
 8014d70:	0801bcc0 	.word	0x0801bcc0
 8014d74:	00014585 	.word	0x00014585
 8014d78:	0801bcf0 	.word	0x0801bcf0
 8014d7c:	0801bce8 	.word	0x0801bce8

08014d80 <RegionAS923TxConfig>:

bool RegionAS923TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 8014d80:	b590      	push	{r4, r7, lr}
 8014d82:	b093      	sub	sp, #76	@ 0x4c
 8014d84:	af0a      	add	r7, sp, #40	@ 0x28
 8014d86:	60f8      	str	r0, [r7, #12]
 8014d88:	60b9      	str	r1, [r7, #8]
 8014d8a:	607a      	str	r2, [r7, #4]
#if defined( REGION_AS923 )
    RadioModems_t modem;
    int8_t phyDr = DataratesAS923[txConfig->Datarate];
 8014d8c:	68fb      	ldr	r3, [r7, #12]
 8014d8e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8014d92:	461a      	mov	r2, r3
 8014d94:	4b5d      	ldr	r3, [pc, #372]	@ (8014f0c <RegionAS923TxConfig+0x18c>)
 8014d96:	5c9b      	ldrb	r3, [r3, r2]
 8014d98:	77bb      	strb	r3, [r7, #30]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
 8014d9a:	68fb      	ldr	r3, [r7, #12]
 8014d9c:	f993 0002 	ldrsb.w	r0, [r3, #2]
 8014da0:	4b5b      	ldr	r3, [pc, #364]	@ (8014f10 <RegionAS923TxConfig+0x190>)
 8014da2:	681a      	ldr	r2, [r3, #0]
 8014da4:	4b5b      	ldr	r3, [pc, #364]	@ (8014f14 <RegionAS923TxConfig+0x194>)
 8014da6:	6819      	ldr	r1, [r3, #0]
 8014da8:	68fb      	ldr	r3, [r7, #12]
 8014daa:	781b      	ldrb	r3, [r3, #0]
 8014dac:	461c      	mov	r4, r3
 8014dae:	4623      	mov	r3, r4
 8014db0:	005b      	lsls	r3, r3, #1
 8014db2:	4423      	add	r3, r4
 8014db4:	009b      	lsls	r3, r3, #2
 8014db6:	440b      	add	r3, r1
 8014db8:	3309      	adds	r3, #9
 8014dba:	781b      	ldrb	r3, [r3, #0]
 8014dbc:	4619      	mov	r1, r3
 8014dbe:	460b      	mov	r3, r1
 8014dc0:	005b      	lsls	r3, r3, #1
 8014dc2:	440b      	add	r3, r1
 8014dc4:	00db      	lsls	r3, r3, #3
 8014dc6:	4413      	add	r3, r2
 8014dc8:	3302      	adds	r3, #2
 8014dca:	f993 3000 	ldrsb.w	r3, [r3]
 8014dce:	4619      	mov	r1, r3
 8014dd0:	f001 fb6f 	bl	80164b2 <RegionCommonLimitTxPower>
 8014dd4:	4603      	mov	r3, r0
 8014dd6:	777b      	strb	r3, [r7, #29]
#elif (defined( REGION_VERSION ) && (( REGION_VERSION == 0x02010001 ) || ( REGION_VERSION == 0x02010003 )))
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionBands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
#endif /* REGION_VERSION */
    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsAS923 );
 8014dd8:	68fb      	ldr	r3, [r7, #12]
 8014dda:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8014dde:	494e      	ldr	r1, [pc, #312]	@ (8014f18 <RegionAS923TxConfig+0x198>)
 8014de0:	4618      	mov	r0, r3
 8014de2:	f001 fb7b 	bl	80164dc <RegionCommonGetBandwidth>
 8014de6:	61b8      	str	r0, [r7, #24]
    int8_t phyTxPower = 0;
 8014de8:	2300      	movs	r3, #0
 8014dea:	75fb      	strb	r3, [r7, #23]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 8014dec:	68fb      	ldr	r3, [r7, #12]
 8014dee:	6859      	ldr	r1, [r3, #4]
 8014df0:	68fb      	ldr	r3, [r7, #12]
 8014df2:	689a      	ldr	r2, [r3, #8]
 8014df4:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8014df8:	4618      	mov	r0, r3
 8014dfa:	f001 f9cb 	bl	8016194 <RegionCommonComputeTxPower>
 8014dfe:	4603      	mov	r3, r0
 8014e00:	75fb      	strb	r3, [r7, #23]

    // Setup the radio frequency
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 8014e02:	4b46      	ldr	r3, [pc, #280]	@ (8014f1c <RegionAS923TxConfig+0x19c>)
 8014e04:	68da      	ldr	r2, [r3, #12]
 8014e06:	4b43      	ldr	r3, [pc, #268]	@ (8014f14 <RegionAS923TxConfig+0x194>)
 8014e08:	6819      	ldr	r1, [r3, #0]
 8014e0a:	68fb      	ldr	r3, [r7, #12]
 8014e0c:	781b      	ldrb	r3, [r3, #0]
 8014e0e:	4618      	mov	r0, r3
 8014e10:	4603      	mov	r3, r0
 8014e12:	005b      	lsls	r3, r3, #1
 8014e14:	4403      	add	r3, r0
 8014e16:	009b      	lsls	r3, r3, #2
 8014e18:	440b      	add	r3, r1
 8014e1a:	681b      	ldr	r3, [r3, #0]
 8014e1c:	4618      	mov	r0, r3
 8014e1e:	4790      	blx	r2

    if( txConfig->Datarate == DR_7 )
 8014e20:	68fb      	ldr	r3, [r7, #12]
 8014e22:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8014e26:	2b07      	cmp	r3, #7
 8014e28:	d124      	bne.n	8014e74 <RegionAS923TxConfig+0xf4>
    { // High Speed FSK channel
        modem = MODEM_FSK;
 8014e2a:	2300      	movs	r3, #0
 8014e2c:	77fb      	strb	r3, [r7, #31]
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
 8014e2e:	4b3b      	ldr	r3, [pc, #236]	@ (8014f1c <RegionAS923TxConfig+0x19c>)
 8014e30:	69dc      	ldr	r4, [r3, #28]
 8014e32:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8014e36:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8014e3a:	fb02 f303 	mul.w	r3, r2, r3
 8014e3e:	461a      	mov	r2, r3
 8014e40:	f997 1017 	ldrsb.w	r1, [r7, #23]
 8014e44:	7ff8      	ldrb	r0, [r7, #31]
 8014e46:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 8014e4a:	9308      	str	r3, [sp, #32]
 8014e4c:	2300      	movs	r3, #0
 8014e4e:	9307      	str	r3, [sp, #28]
 8014e50:	2300      	movs	r3, #0
 8014e52:	9306      	str	r3, [sp, #24]
 8014e54:	2300      	movs	r3, #0
 8014e56:	9305      	str	r3, [sp, #20]
 8014e58:	2301      	movs	r3, #1
 8014e5a:	9304      	str	r3, [sp, #16]
 8014e5c:	2300      	movs	r3, #0
 8014e5e:	9303      	str	r3, [sp, #12]
 8014e60:	2305      	movs	r3, #5
 8014e62:	9302      	str	r3, [sp, #8]
 8014e64:	2300      	movs	r3, #0
 8014e66:	9301      	str	r3, [sp, #4]
 8014e68:	9200      	str	r2, [sp, #0]
 8014e6a:	69bb      	ldr	r3, [r7, #24]
 8014e6c:	f246 12a8 	movw	r2, #25000	@ 0x61a8
 8014e70:	47a0      	blx	r4
 8014e72:	e01d      	b.n	8014eb0 <RegionAS923TxConfig+0x130>
    }
    else
    {
        modem = MODEM_LORA;
 8014e74:	2301      	movs	r3, #1
 8014e76:	77fb      	strb	r3, [r7, #31]
        Radio.SetTxConfig( modem, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 8014e78:	4b28      	ldr	r3, [pc, #160]	@ (8014f1c <RegionAS923TxConfig+0x19c>)
 8014e7a:	69dc      	ldr	r4, [r3, #28]
 8014e7c:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8014e80:	f997 1017 	ldrsb.w	r1, [r7, #23]
 8014e84:	7ff8      	ldrb	r0, [r7, #31]
 8014e86:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 8014e8a:	9208      	str	r2, [sp, #32]
 8014e8c:	2200      	movs	r2, #0
 8014e8e:	9207      	str	r2, [sp, #28]
 8014e90:	2200      	movs	r2, #0
 8014e92:	9206      	str	r2, [sp, #24]
 8014e94:	2200      	movs	r2, #0
 8014e96:	9205      	str	r2, [sp, #20]
 8014e98:	2201      	movs	r2, #1
 8014e9a:	9204      	str	r2, [sp, #16]
 8014e9c:	2200      	movs	r2, #0
 8014e9e:	9203      	str	r2, [sp, #12]
 8014ea0:	2208      	movs	r2, #8
 8014ea2:	9202      	str	r2, [sp, #8]
 8014ea4:	2201      	movs	r2, #1
 8014ea6:	9201      	str	r2, [sp, #4]
 8014ea8:	9300      	str	r3, [sp, #0]
 8014eaa:	69bb      	ldr	r3, [r7, #24]
 8014eac:	2200      	movs	r2, #0
 8014eae:	47a0      	blx	r4
    }
    RegionCommonTxConfigPrint(RegionNvmGroup2->Channels[txConfig->Channel].Frequency, txConfig->Datarate);
 8014eb0:	4b18      	ldr	r3, [pc, #96]	@ (8014f14 <RegionAS923TxConfig+0x194>)
 8014eb2:	681a      	ldr	r2, [r3, #0]
 8014eb4:	68fb      	ldr	r3, [r7, #12]
 8014eb6:	781b      	ldrb	r3, [r3, #0]
 8014eb8:	4619      	mov	r1, r3
 8014eba:	460b      	mov	r3, r1
 8014ebc:	005b      	lsls	r3, r3, #1
 8014ebe:	440b      	add	r3, r1
 8014ec0:	009b      	lsls	r3, r3, #2
 8014ec2:	4413      	add	r3, r2
 8014ec4:	681a      	ldr	r2, [r3, #0]
 8014ec6:	68fb      	ldr	r3, [r7, #12]
 8014ec8:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8014ecc:	4619      	mov	r1, r3
 8014ece:	4610      	mov	r0, r2
 8014ed0:	f001 fb54 	bl	801657c <RegionCommonTxConfigPrint>

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 8014ed4:	68fb      	ldr	r3, [r7, #12]
 8014ed6:	f993 2001 	ldrsb.w	r2, [r3, #1]
 8014eda:	68fb      	ldr	r3, [r7, #12]
 8014edc:	899b      	ldrh	r3, [r3, #12]
 8014ede:	4619      	mov	r1, r3
 8014ee0:	4610      	mov	r0, r2
 8014ee2:	f7ff fa5b 	bl	801439c <GetTimeOnAir>
 8014ee6:	4602      	mov	r2, r0
 8014ee8:	687b      	ldr	r3, [r7, #4]
 8014eea:	601a      	str	r2, [r3, #0]

    // Setup maximum payload length of the radio driver
    Radio.SetMaxPayloadLength( modem, txConfig->PktLen );
 8014eec:	4b0b      	ldr	r3, [pc, #44]	@ (8014f1c <RegionAS923TxConfig+0x19c>)
 8014eee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014ef0:	68fa      	ldr	r2, [r7, #12]
 8014ef2:	8992      	ldrh	r2, [r2, #12]
 8014ef4:	b2d1      	uxtb	r1, r2
 8014ef6:	7ffa      	ldrb	r2, [r7, #31]
 8014ef8:	4610      	mov	r0, r2
 8014efa:	4798      	blx	r3

    *txPower = txPowerLimited;
 8014efc:	68bb      	ldr	r3, [r7, #8]
 8014efe:	7f7a      	ldrb	r2, [r7, #29]
 8014f00:	701a      	strb	r2, [r3, #0]
    return true;
 8014f02:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_AS923 */
}
 8014f04:	4618      	mov	r0, r3
 8014f06:	3724      	adds	r7, #36	@ 0x24
 8014f08:	46bd      	mov	sp, r7
 8014f0a:	bd90      	pop	{r4, r7, pc}
 8014f0c:	0801bcc0 	.word	0x0801bcc0
 8014f10:	200013e0 	.word	0x200013e0
 8014f14:	200013e4 	.word	0x200013e4
 8014f18:	0801bcc8 	.word	0x0801bcc8
 8014f1c:	0801bd08 	.word	0x0801bd08

08014f20 <RegionAS923LinkAdrReq>:

uint8_t RegionAS923LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 8014f20:	b590      	push	{r4, r7, lr}
 8014f22:	b093      	sub	sp, #76	@ 0x4c
 8014f24:	af00      	add	r7, sp, #0
 8014f26:	60f8      	str	r0, [r7, #12]
 8014f28:	60b9      	str	r1, [r7, #8]
 8014f2a:	607a      	str	r2, [r7, #4]
 8014f2c:	603b      	str	r3, [r7, #0]
    uint8_t status = 0x07;
 8014f2e:	2307      	movs	r3, #7
 8014f30:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
#if defined( REGION_AS923 )
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 8014f34:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8014f38:	2200      	movs	r2, #0
 8014f3a:	601a      	str	r2, [r3, #0]
 8014f3c:	809a      	strh	r2, [r3, #4]
    uint8_t nextIndex = 0;
 8014f3e:	2300      	movs	r3, #0
 8014f40:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
    uint8_t bytesProcessed = 0;
 8014f44:	2300      	movs	r3, #0
 8014f46:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    uint16_t chMask = 0;
 8014f4a:	2300      	movs	r3, #0
 8014f4c:	877b      	strh	r3, [r7, #58]	@ 0x3a
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    while( bytesProcessed < linkAdrReq->PayloadSize )
 8014f4e:	e085      	b.n	801505c <RegionAS923LinkAdrReq+0x13c>
    {
        // Get ADR request parameters
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 8014f50:	68fb      	ldr	r3, [r7, #12]
 8014f52:	685a      	ldr	r2, [r3, #4]
 8014f54:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8014f58:	4413      	add	r3, r2
 8014f5a:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 8014f5e:	4611      	mov	r1, r2
 8014f60:	4618      	mov	r0, r3
 8014f62:	f000 ff5f 	bl	8015e24 <RegionCommonParseLinkAdrReq>
 8014f66:	4603      	mov	r3, r0
 8014f68:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44

        if( nextIndex == 0 )
 8014f6c:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8014f70:	2b00      	cmp	r3, #0
 8014f72:	d07b      	beq.n	801506c <RegionAS923LinkAdrReq+0x14c>
            break; // break loop, since no more request has been found

        // Update bytes processed
        bytesProcessed += nextIndex;
 8014f74:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 8014f78:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8014f7c:	4413      	add	r3, r2
 8014f7e:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46

        // Revert status, as we only check the last ADR request for the channel mask KO
        status = 0x07;
 8014f82:	2307      	movs	r3, #7
 8014f84:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47

        // Setup temporary channels mask
        chMask = linkAdrParams.ChMask;
 8014f88:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8014f8c:	877b      	strh	r3, [r7, #58]	@ 0x3a

        // Verify channels mask
        if( ( linkAdrParams.ChMaskCtrl == 0 ) && ( chMask == 0 ) )
 8014f8e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8014f92:	2b00      	cmp	r3, #0
 8014f94:	d109      	bne.n	8014faa <RegionAS923LinkAdrReq+0x8a>
 8014f96:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8014f98:	2b00      	cmp	r3, #0
 8014f9a:	d106      	bne.n	8014faa <RegionAS923LinkAdrReq+0x8a>
        {
            status &= 0xFE; // Channel mask KO
 8014f9c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8014fa0:	f023 0301 	bic.w	r3, r3, #1
 8014fa4:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8014fa8:	e058      	b.n	801505c <RegionAS923LinkAdrReq+0x13c>
        }
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 8014faa:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8014fae:	2b00      	cmp	r3, #0
 8014fb0:	d003      	beq.n	8014fba <RegionAS923LinkAdrReq+0x9a>
 8014fb2:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8014fb6:	2b05      	cmp	r3, #5
 8014fb8:	d903      	bls.n	8014fc2 <RegionAS923LinkAdrReq+0xa2>
                ( linkAdrParams.ChMaskCtrl >= 7 ) )
 8014fba:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 8014fbe:	2b06      	cmp	r3, #6
 8014fc0:	d906      	bls.n	8014fd0 <RegionAS923LinkAdrReq+0xb0>
        {
            // RFU
            status &= 0xFE; // Channel mask KO
 8014fc2:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8014fc6:	f023 0301 	bic.w	r3, r3, #1
 8014fca:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8014fce:	e045      	b.n	801505c <RegionAS923LinkAdrReq+0x13c>
        }
        else
        {
            for( uint8_t i = 0; i < AS923_MAX_NB_CHANNELS; i++ )
 8014fd0:	2300      	movs	r3, #0
 8014fd2:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
 8014fd6:	e03d      	b.n	8015054 <RegionAS923LinkAdrReq+0x134>
            {
                if( linkAdrParams.ChMaskCtrl == 6 )
 8014fd8:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8014fdc:	2b06      	cmp	r3, #6
 8014fde:	d118      	bne.n	8015012 <RegionAS923LinkAdrReq+0xf2>
                {
                    if( RegionNvmGroup2->Channels[i].Frequency != 0 )
 8014fe0:	4b5f      	ldr	r3, [pc, #380]	@ (8015160 <RegionAS923LinkAdrReq+0x240>)
 8014fe2:	6819      	ldr	r1, [r3, #0]
 8014fe4:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8014fe8:	4613      	mov	r3, r2
 8014fea:	005b      	lsls	r3, r3, #1
 8014fec:	4413      	add	r3, r2
 8014fee:	009b      	lsls	r3, r3, #2
 8014ff0:	440b      	add	r3, r1
 8014ff2:	681b      	ldr	r3, [r3, #0]
 8014ff4:	2b00      	cmp	r3, #0
 8014ff6:	d028      	beq.n	801504a <RegionAS923LinkAdrReq+0x12a>
                    {
                        chMask |= 1 << i;
 8014ff8:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8014ffc:	2201      	movs	r2, #1
 8014ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8015002:	b21a      	sxth	r2, r3
 8015004:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8015006:	b21b      	sxth	r3, r3
 8015008:	4313      	orrs	r3, r2
 801500a:	b21b      	sxth	r3, r3
 801500c:	b29b      	uxth	r3, r3
 801500e:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8015010:	e01b      	b.n	801504a <RegionAS923LinkAdrReq+0x12a>
                    }
                }
                else
                {
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 8015012:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8015014:	461a      	mov	r2, r3
 8015016:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 801501a:	fa42 f303 	asr.w	r3, r2, r3
 801501e:	f003 0301 	and.w	r3, r3, #1
 8015022:	2b00      	cmp	r3, #0
 8015024:	d011      	beq.n	801504a <RegionAS923LinkAdrReq+0x12a>
                        ( RegionNvmGroup2->Channels[i].Frequency == 0 ) )
 8015026:	4b4e      	ldr	r3, [pc, #312]	@ (8015160 <RegionAS923LinkAdrReq+0x240>)
 8015028:	6819      	ldr	r1, [r3, #0]
 801502a:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 801502e:	4613      	mov	r3, r2
 8015030:	005b      	lsls	r3, r3, #1
 8015032:	4413      	add	r3, r2
 8015034:	009b      	lsls	r3, r3, #2
 8015036:	440b      	add	r3, r1
 8015038:	681b      	ldr	r3, [r3, #0]
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 801503a:	2b00      	cmp	r3, #0
 801503c:	d105      	bne.n	801504a <RegionAS923LinkAdrReq+0x12a>
                    {// Trying to enable an undefined channel
                        status &= 0xFE; // Channel mask KO
 801503e:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8015042:	f023 0301 	bic.w	r3, r3, #1
 8015046:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
            for( uint8_t i = 0; i < AS923_MAX_NB_CHANNELS; i++ )
 801504a:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 801504e:	3301      	adds	r3, #1
 8015050:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
 8015054:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8015058:	2b0f      	cmp	r3, #15
 801505a:	d9bd      	bls.n	8014fd8 <RegionAS923LinkAdrReq+0xb8>
    while( bytesProcessed < linkAdrReq->PayloadSize )
 801505c:	68fb      	ldr	r3, [r7, #12]
 801505e:	7a1b      	ldrb	r3, [r3, #8]
 8015060:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 8015064:	429a      	cmp	r2, r3
 8015066:	f4ff af73 	bcc.w	8014f50 <RegionAS923LinkAdrReq+0x30>
 801506a:	e000      	b.n	801506e <RegionAS923LinkAdrReq+0x14e>
            break; // break loop, since no more request has been found
 801506c:	bf00      	nop
            }
        }
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 801506e:	2302      	movs	r3, #2
 8015070:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 8015074:	68fb      	ldr	r3, [r7, #12]
 8015076:	7a5b      	ldrb	r3, [r3, #9]
 8015078:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    phyParam = RegionAS923GetPhyParam( &getPhy );
 801507c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8015080:	4618      	mov	r0, r3
 8015082:	f7ff f9db 	bl	801443c <RegionAS923GetPhyParam>
 8015086:	4603      	mov	r3, r0
 8015088:	633b      	str	r3, [r7, #48]	@ 0x30

    linkAdrVerifyParams.Status = status;
 801508a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 801508e:	753b      	strb	r3, [r7, #20]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 8015090:	68fb      	ldr	r3, [r7, #12]
 8015092:	7a9b      	ldrb	r3, [r3, #10]
 8015094:	757b      	strb	r3, [r7, #21]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 8015096:	f997 303d 	ldrsb.w	r3, [r7, #61]	@ 0x3d
 801509a:	75bb      	strb	r3, [r7, #22]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 801509c:	f997 303e 	ldrsb.w	r3, [r7, #62]	@ 0x3e
 80150a0:	75fb      	strb	r3, [r7, #23]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 80150a2:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 80150a6:	763b      	strb	r3, [r7, #24]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 80150a8:	68fb      	ldr	r3, [r7, #12]
 80150aa:	f993 300b 	ldrsb.w	r3, [r3, #11]
 80150ae:	767b      	strb	r3, [r7, #25]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 80150b0:	68fb      	ldr	r3, [r7, #12]
 80150b2:	f993 300c 	ldrsb.w	r3, [r3, #12]
 80150b6:	76bb      	strb	r3, [r7, #26]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 80150b8:	68fb      	ldr	r3, [r7, #12]
 80150ba:	7b5b      	ldrb	r3, [r3, #13]
 80150bc:	b25b      	sxtb	r3, r3
 80150be:	76fb      	strb	r3, [r7, #27]
    linkAdrVerifyParams.NbChannels = AS923_MAX_NB_CHANNELS;
 80150c0:	2310      	movs	r3, #16
 80150c2:	773b      	strb	r3, [r7, #28]
    linkAdrVerifyParams.ChannelsMask = &chMask;
 80150c4:	f107 033a 	add.w	r3, r7, #58	@ 0x3a
 80150c8:	623b      	str	r3, [r7, #32]
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 80150ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80150cc:	b25b      	sxtb	r3, r3
 80150ce:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
    linkAdrVerifyParams.MaxDatarate = AS923_TX_MAX_DATARATE;
 80150d2:	2307      	movs	r3, #7
 80150d4:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
    linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
 80150d8:	4b21      	ldr	r3, [pc, #132]	@ (8015160 <RegionAS923LinkAdrReq+0x240>)
 80150da:	681b      	ldr	r3, [r3, #0]
 80150dc:	62bb      	str	r3, [r7, #40]	@ 0x28
    linkAdrVerifyParams.MinTxPower = AS923_MIN_TX_POWER;
 80150de:	2307      	movs	r3, #7
 80150e0:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    linkAdrVerifyParams.MaxTxPower = AS923_MAX_TX_POWER;
 80150e4:	2300      	movs	r3, #0
 80150e6:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 80150ea:	68fb      	ldr	r3, [r7, #12]
 80150ec:	681b      	ldr	r3, [r3, #0]
 80150ee:	613b      	str	r3, [r7, #16]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 80150f0:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 80150f4:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80150f8:	1c9a      	adds	r2, r3, #2
 80150fa:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80150fe:	1c59      	adds	r1, r3, #1
 8015100:	f107 0010 	add.w	r0, r7, #16
 8015104:	4623      	mov	r3, r4
 8015106:	f000 fede 	bl	8015ec6 <RegionCommonLinkAdrReqVerifyParams>
 801510a:	4603      	mov	r3, r0
 801510c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 8015110:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8015114:	2b07      	cmp	r3, #7
 8015116:	d10d      	bne.n	8015134 <RegionAS923LinkAdrReq+0x214>
    {
        // Set the channels mask to a default value
        memset1( ( uint8_t* ) RegionNvmGroup2->ChannelsMask, 0, sizeof( RegionNvmGroup2->ChannelsMask ) );
 8015118:	4b11      	ldr	r3, [pc, #68]	@ (8015160 <RegionAS923LinkAdrReq+0x240>)
 801511a:	681b      	ldr	r3, [r3, #0]
 801511c:	f503 6390 	add.w	r3, r3, #1152	@ 0x480
 8015120:	220c      	movs	r2, #12
 8015122:	2100      	movs	r1, #0
 8015124:	4618      	mov	r0, r3
 8015126:	f001 fac3 	bl	80166b0 <memset1>
        // Update the channels mask
        RegionNvmGroup2->ChannelsMask[0] = chMask;
 801512a:	4b0d      	ldr	r3, [pc, #52]	@ (8015160 <RegionAS923LinkAdrReq+0x240>)
 801512c:	681b      	ldr	r3, [r3, #0]
 801512e:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8015130:	f8a3 2480 	strh.w	r2, [r3, #1152]	@ 0x480
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 8015134:	f997 203d 	ldrsb.w	r2, [r7, #61]	@ 0x3d
 8015138:	68bb      	ldr	r3, [r7, #8]
 801513a:	701a      	strb	r2, [r3, #0]
    *txPowOut = linkAdrParams.TxPower;
 801513c:	f997 203e 	ldrsb.w	r2, [r7, #62]	@ 0x3e
 8015140:	687b      	ldr	r3, [r7, #4]
 8015142:	701a      	strb	r2, [r3, #0]
    *nbRepOut = linkAdrParams.NbRep;
 8015144:	f897 203c 	ldrb.w	r2, [r7, #60]	@ 0x3c
 8015148:	683b      	ldr	r3, [r7, #0]
 801514a:	701a      	strb	r2, [r3, #0]
    *nbBytesParsed = bytesProcessed;
 801514c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801514e:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 8015152:	701a      	strb	r2, [r3, #0]

#endif /* REGION_AS923 */
    return status;
 8015154:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 8015158:	4618      	mov	r0, r3
 801515a:	374c      	adds	r7, #76	@ 0x4c
 801515c:	46bd      	mov	sp, r7
 801515e:	bd90      	pop	{r4, r7, pc}
 8015160:	200013e4 	.word	0x200013e4

08015164 <RegionAS923RxParamSetupReq>:

uint8_t RegionAS923RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 8015164:	b580      	push	{r7, lr}
 8015166:	b084      	sub	sp, #16
 8015168:	af00      	add	r7, sp, #0
 801516a:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x07;
 801516c:	2307      	movs	r3, #7
 801516e:	73fb      	strb	r3, [r7, #15]
#if defined( REGION_AS923 )

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency ) == false )
 8015170:	687b      	ldr	r3, [r7, #4]
 8015172:	685b      	ldr	r3, [r3, #4]
 8015174:	4618      	mov	r0, r3
 8015176:	f7ff f8eb 	bl	8014350 <VerifyRfFreq>
 801517a:	4603      	mov	r3, r0
 801517c:	f083 0301 	eor.w	r3, r3, #1
 8015180:	b2db      	uxtb	r3, r3
 8015182:	2b00      	cmp	r3, #0
 8015184:	d003      	beq.n	801518e <RegionAS923RxParamSetupReq+0x2a>
    {
        status &= 0xFE; // Channel frequency KO
 8015186:	7bfb      	ldrb	r3, [r7, #15]
 8015188:	f023 0301 	bic.w	r3, r3, #1
 801518c:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, AS923_RX_MIN_DATARATE, AS923_RX_MAX_DATARATE ) == false )
 801518e:	687b      	ldr	r3, [r7, #4]
 8015190:	f993 3000 	ldrsb.w	r3, [r3]
 8015194:	2207      	movs	r2, #7
 8015196:	2100      	movs	r1, #0
 8015198:	4618      	mov	r0, r3
 801519a:	f000 fc82 	bl	8015aa2 <RegionCommonValueInRange>
 801519e:	4603      	mov	r3, r0
 80151a0:	2b00      	cmp	r3, #0
 80151a2:	d103      	bne.n	80151ac <RegionAS923RxParamSetupReq+0x48>
    {
        status &= 0xFD; // Datarate KO
 80151a4:	7bfb      	ldrb	r3, [r7, #15]
 80151a6:	f023 0302 	bic.w	r3, r3, #2
 80151aa:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, AS923_MIN_RX1_DR_OFFSET, AS923_MAX_RX1_DR_OFFSET ) == false )
 80151ac:	687b      	ldr	r3, [r7, #4]
 80151ae:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80151b2:	2207      	movs	r2, #7
 80151b4:	2100      	movs	r1, #0
 80151b6:	4618      	mov	r0, r3
 80151b8:	f000 fc73 	bl	8015aa2 <RegionCommonValueInRange>
 80151bc:	4603      	mov	r3, r0
 80151be:	2b00      	cmp	r3, #0
 80151c0:	d103      	bne.n	80151ca <RegionAS923RxParamSetupReq+0x66>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 80151c2:	7bfb      	ldrb	r3, [r7, #15]
 80151c4:	f023 0304 	bic.w	r3, r3, #4
 80151c8:	73fb      	strb	r3, [r7, #15]
    }

#endif /* REGION_AS923 */
    return status;
 80151ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80151cc:	4618      	mov	r0, r3
 80151ce:	3710      	adds	r7, #16
 80151d0:	46bd      	mov	sp, r7
 80151d2:	bd80      	pop	{r7, pc}

080151d4 <RegionAS923NewChannelReq>:

int8_t RegionAS923NewChannelReq( NewChannelReqParams_t* newChannelReq )
{
 80151d4:	b580      	push	{r7, lr}
 80151d6:	b086      	sub	sp, #24
 80151d8:	af00      	add	r7, sp, #0
 80151da:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
 80151dc:	2303      	movs	r3, #3
 80151de:	75fb      	strb	r3, [r7, #23]
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    if( newChannelReq->NewChannel->Frequency == 0 )
 80151e0:	687b      	ldr	r3, [r7, #4]
 80151e2:	681b      	ldr	r3, [r3, #0]
 80151e4:	681b      	ldr	r3, [r3, #0]
 80151e6:	2b00      	cmp	r3, #0
 80151e8:	d114      	bne.n	8015214 <RegionAS923NewChannelReq+0x40>
    {
        channelRemove.ChannelId = newChannelReq->ChannelId;
 80151ea:	687b      	ldr	r3, [r7, #4]
 80151ec:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80151f0:	b2db      	uxtb	r3, r3
 80151f2:	723b      	strb	r3, [r7, #8]

        // Remove
        if( RegionAS923ChannelsRemove( &channelRemove ) == false )
 80151f4:	f107 0308 	add.w	r3, r7, #8
 80151f8:	4618      	mov	r0, r3
 80151fa:	f000 f9f1 	bl	80155e0 <RegionAS923ChannelsRemove>
 80151fe:	4603      	mov	r3, r0
 8015200:	f083 0301 	eor.w	r3, r3, #1
 8015204:	b2db      	uxtb	r3, r3
 8015206:	2b00      	cmp	r3, #0
 8015208:	d03b      	beq.n	8015282 <RegionAS923NewChannelReq+0xae>
        {
            status &= 0xFC;
 801520a:	7dfb      	ldrb	r3, [r7, #23]
 801520c:	f023 0303 	bic.w	r3, r3, #3
 8015210:	75fb      	strb	r3, [r7, #23]
 8015212:	e036      	b.n	8015282 <RegionAS923NewChannelReq+0xae>
        }
    }
    else
    {
        channelAdd.NewChannel = newChannelReq->NewChannel;
 8015214:	687b      	ldr	r3, [r7, #4]
 8015216:	681b      	ldr	r3, [r3, #0]
 8015218:	60fb      	str	r3, [r7, #12]
        channelAdd.ChannelId = newChannelReq->ChannelId;
 801521a:	687b      	ldr	r3, [r7, #4]
 801521c:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8015220:	b2db      	uxtb	r3, r3
 8015222:	743b      	strb	r3, [r7, #16]

        switch( RegionAS923ChannelAdd( &channelAdd ) )
 8015224:	f107 030c 	add.w	r3, r7, #12
 8015228:	4618      	mov	r0, r3
 801522a:	f000 f93d 	bl	80154a8 <RegionAS923ChannelAdd>
 801522e:	4603      	mov	r3, r0
 8015230:	2b06      	cmp	r3, #6
 8015232:	d820      	bhi.n	8015276 <RegionAS923NewChannelReq+0xa2>
 8015234:	a201      	add	r2, pc, #4	@ (adr r2, 801523c <RegionAS923NewChannelReq+0x68>)
 8015236:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801523a:	bf00      	nop
 801523c:	08015281 	.word	0x08015281
 8015240:	08015277 	.word	0x08015277
 8015244:	08015277 	.word	0x08015277
 8015248:	08015277 	.word	0x08015277
 801524c:	08015259 	.word	0x08015259
 8015250:	08015263 	.word	0x08015263
 8015254:	0801526d 	.word	0x0801526d
            {
                break;
            }
            case LORAMAC_STATUS_FREQUENCY_INVALID:
            {
                status &= 0xFE;
 8015258:	7dfb      	ldrb	r3, [r7, #23]
 801525a:	f023 0301 	bic.w	r3, r3, #1
 801525e:	75fb      	strb	r3, [r7, #23]
                break;
 8015260:	e00f      	b.n	8015282 <RegionAS923NewChannelReq+0xae>
            }
            case LORAMAC_STATUS_DATARATE_INVALID:
            {
                status &= 0xFD;
 8015262:	7dfb      	ldrb	r3, [r7, #23]
 8015264:	f023 0302 	bic.w	r3, r3, #2
 8015268:	75fb      	strb	r3, [r7, #23]
                break;
 801526a:	e00a      	b.n	8015282 <RegionAS923NewChannelReq+0xae>
            }
            case LORAMAC_STATUS_FREQ_AND_DR_INVALID:
            {
                status &= 0xFC;
 801526c:	7dfb      	ldrb	r3, [r7, #23]
 801526e:	f023 0303 	bic.w	r3, r3, #3
 8015272:	75fb      	strb	r3, [r7, #23]
                break;
 8015274:	e005      	b.n	8015282 <RegionAS923NewChannelReq+0xae>
            }
            default:
            {
                status &= 0xFC;
 8015276:	7dfb      	ldrb	r3, [r7, #23]
 8015278:	f023 0303 	bic.w	r3, r3, #3
 801527c:	75fb      	strb	r3, [r7, #23]
                break;
 801527e:	e000      	b.n	8015282 <RegionAS923NewChannelReq+0xae>
                break;
 8015280:	bf00      	nop
            }
        }
    }

    return status;
 8015282:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8015286:	4618      	mov	r0, r3
 8015288:	3718      	adds	r7, #24
 801528a:	46bd      	mov	sp, r7
 801528c:	bd80      	pop	{r7, pc}
 801528e:	bf00      	nop

08015290 <RegionAS923TxParamSetupReq>:

int8_t RegionAS923TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
 8015290:	b480      	push	{r7}
 8015292:	b083      	sub	sp, #12
 8015294:	af00      	add	r7, sp, #0
 8015296:	6078      	str	r0, [r7, #4]
    // Accept the request
    return 0;
 8015298:	2300      	movs	r3, #0
}
 801529a:	4618      	mov	r0, r3
 801529c:	370c      	adds	r7, #12
 801529e:	46bd      	mov	sp, r7
 80152a0:	bc80      	pop	{r7}
 80152a2:	4770      	bx	lr

080152a4 <RegionAS923DlChannelReq>:

int8_t RegionAS923DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
 80152a4:	b580      	push	{r7, lr}
 80152a6:	b084      	sub	sp, #16
 80152a8:	af00      	add	r7, sp, #0
 80152aa:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
 80152ac:	2303      	movs	r3, #3
 80152ae:	73fb      	strb	r3, [r7, #15]

#if defined( REGION_AS923 )
    if( dlChannelReq->ChannelId >= ( CHANNELS_MASK_SIZE * 16 ) )
 80152b0:	687b      	ldr	r3, [r7, #4]
 80152b2:	781b      	ldrb	r3, [r3, #0]
 80152b4:	2b0f      	cmp	r3, #15
 80152b6:	d901      	bls.n	80152bc <RegionAS923DlChannelReq+0x18>
    {
        return 0;
 80152b8:	2300      	movs	r3, #0
 80152ba:	e032      	b.n	8015322 <RegionAS923DlChannelReq+0x7e>
    }

    // Verify if the frequency is supported
    if( VerifyRfFreq( dlChannelReq->Rx1Frequency ) == false )
 80152bc:	687b      	ldr	r3, [r7, #4]
 80152be:	685b      	ldr	r3, [r3, #4]
 80152c0:	4618      	mov	r0, r3
 80152c2:	f7ff f845 	bl	8014350 <VerifyRfFreq>
 80152c6:	4603      	mov	r3, r0
 80152c8:	f083 0301 	eor.w	r3, r3, #1
 80152cc:	b2db      	uxtb	r3, r3
 80152ce:	2b00      	cmp	r3, #0
 80152d0:	d003      	beq.n	80152da <RegionAS923DlChannelReq+0x36>
    {
        status &= 0xFE;
 80152d2:	7bfb      	ldrb	r3, [r7, #15]
 80152d4:	f023 0301 	bic.w	r3, r3, #1
 80152d8:	73fb      	strb	r3, [r7, #15]
    }

    // Verify if an uplink frequency exists
    if( RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Frequency == 0 )
 80152da:	4b14      	ldr	r3, [pc, #80]	@ (801532c <RegionAS923DlChannelReq+0x88>)
 80152dc:	681a      	ldr	r2, [r3, #0]
 80152de:	687b      	ldr	r3, [r7, #4]
 80152e0:	781b      	ldrb	r3, [r3, #0]
 80152e2:	4619      	mov	r1, r3
 80152e4:	460b      	mov	r3, r1
 80152e6:	005b      	lsls	r3, r3, #1
 80152e8:	440b      	add	r3, r1
 80152ea:	009b      	lsls	r3, r3, #2
 80152ec:	4413      	add	r3, r2
 80152ee:	681b      	ldr	r3, [r3, #0]
 80152f0:	2b00      	cmp	r3, #0
 80152f2:	d103      	bne.n	80152fc <RegionAS923DlChannelReq+0x58>
    {
        status &= 0xFD;
 80152f4:	7bfb      	ldrb	r3, [r7, #15]
 80152f6:	f023 0302 	bic.w	r3, r3, #2
 80152fa:	73fb      	strb	r3, [r7, #15]
    }

    // Apply Rx1 frequency, if the status is OK
    if( status == 0x03 )
 80152fc:	7bfb      	ldrb	r3, [r7, #15]
 80152fe:	2b03      	cmp	r3, #3
 8015300:	d10d      	bne.n	801531e <RegionAS923DlChannelReq+0x7a>
    {
        RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
 8015302:	4b0a      	ldr	r3, [pc, #40]	@ (801532c <RegionAS923DlChannelReq+0x88>)
 8015304:	6819      	ldr	r1, [r3, #0]
 8015306:	687b      	ldr	r3, [r7, #4]
 8015308:	781b      	ldrb	r3, [r3, #0]
 801530a:	4618      	mov	r0, r3
 801530c:	687b      	ldr	r3, [r7, #4]
 801530e:	685a      	ldr	r2, [r3, #4]
 8015310:	4603      	mov	r3, r0
 8015312:	005b      	lsls	r3, r3, #1
 8015314:	4403      	add	r3, r0
 8015316:	009b      	lsls	r3, r3, #2
 8015318:	440b      	add	r3, r1
 801531a:	3304      	adds	r3, #4
 801531c:	601a      	str	r2, [r3, #0]
    }

#endif /* REGION_AS923 */
    return status;
 801531e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8015322:	4618      	mov	r0, r3
 8015324:	3710      	adds	r7, #16
 8015326:	46bd      	mov	sp, r7
 8015328:	bd80      	pop	{r7, pc}
 801532a:	bf00      	nop
 801532c:	200013e4 	.word	0x200013e4

08015330 <RegionAS923AlternateDr>:

int8_t RegionAS923AlternateDr( int8_t currentDr, AlternateDrType_t type )
{
 8015330:	b480      	push	{r7}
 8015332:	b083      	sub	sp, #12
 8015334:	af00      	add	r7, sp, #0
 8015336:	4603      	mov	r3, r0
 8015338:	460a      	mov	r2, r1
 801533a:	71fb      	strb	r3, [r7, #7]
 801533c:	4613      	mov	r3, r2
 801533e:	71bb      	strb	r3, [r7, #6]
#if defined( REGION_AS923 )
    // Only AS923_DWELL_LIMIT_DATARATE is supported
    return AS923_DWELL_LIMIT_DATARATE;
 8015340:	2302      	movs	r3, #2
#else
    return -1;
#endif /* REGION_AS923 */
}
 8015342:	4618      	mov	r0, r3
 8015344:	370c      	adds	r7, #12
 8015346:	46bd      	mov	sp, r7
 8015348:	bc80      	pop	{r7}
 801534a:	4770      	bx	lr

0801534c <RegionAS923NextChannel>:

LoRaMacStatus_t RegionAS923NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 801534c:	b580      	push	{r7, lr}
 801534e:	b09a      	sub	sp, #104	@ 0x68
 8015350:	af02      	add	r7, sp, #8
 8015352:	60f8      	str	r0, [r7, #12]
 8015354:	60b9      	str	r1, [r7, #8]
 8015356:	607a      	str	r2, [r7, #4]
 8015358:	603b      	str	r3, [r7, #0]
#if defined( REGION_AS923 )
    uint8_t nbEnabledChannels = 0;
 801535a:	2300      	movs	r3, #0
 801535c:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
    uint8_t nbRestrictedChannels = 0;
 8015360:	2300      	movs	r3, #0
 8015362:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
    uint8_t enabledChannels[AS923_MAX_NB_CHANNELS] = { 0 };
 8015366:	2300      	movs	r3, #0
 8015368:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801536a:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 801536e:	2200      	movs	r2, #0
 8015370:	601a      	str	r2, [r3, #0]
 8015372:	605a      	str	r2, [r3, #4]
 8015374:	609a      	str	r2, [r3, #8]
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;
 8015376:	230c      	movs	r3, #12
 8015378:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
    uint16_t joinChannels = AS923_JOIN_CHANNELS;
 801537c:	2303      	movs	r3, #3
 801537e:	827b      	strh	r3, [r7, #18]

    if( RegionCommonCountChannels( RegionNvmGroup2->ChannelsMask, 0, 1 ) == 0 )
 8015380:	4b47      	ldr	r3, [pc, #284]	@ (80154a0 <RegionAS923NextChannel+0x154>)
 8015382:	681b      	ldr	r3, [r3, #0]
 8015384:	f503 6390 	add.w	r3, r3, #1152	@ 0x480
 8015388:	2201      	movs	r2, #1
 801538a:	2100      	movs	r1, #0
 801538c:	4618      	mov	r0, r3
 801538e:	f000 fbd9 	bl	8015b44 <RegionCommonCountChannels>
 8015392:	4603      	mov	r3, r0
 8015394:	2b00      	cmp	r3, #0
 8015396:	d10a      	bne.n	80153ae <RegionAS923NextChannel+0x62>
    { // Reactivate default channels
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 );
 8015398:	4b41      	ldr	r3, [pc, #260]	@ (80154a0 <RegionAS923NextChannel+0x154>)
 801539a:	681b      	ldr	r3, [r3, #0]
 801539c:	f8b3 2480 	ldrh.w	r2, [r3, #1152]	@ 0x480
 80153a0:	4b3f      	ldr	r3, [pc, #252]	@ (80154a0 <RegionAS923NextChannel+0x154>)
 80153a2:	681b      	ldr	r3, [r3, #0]
 80153a4:	f042 0203 	orr.w	r2, r2, #3
 80153a8:	b292      	uxth	r2, r2
 80153aa:	f8a3 2480 	strh.w	r2, [r3, #1152]	@ 0x480
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
 80153ae:	68fb      	ldr	r3, [r7, #12]
 80153b0:	7a5b      	ldrb	r3, [r3, #9]
 80153b2:	753b      	strb	r3, [r7, #20]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 80153b4:	68fb      	ldr	r3, [r7, #12]
 80153b6:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80153ba:	b2db      	uxtb	r3, r3
 80153bc:	757b      	strb	r3, [r7, #21]
    countChannelsParams.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 80153be:	4b38      	ldr	r3, [pc, #224]	@ (80154a0 <RegionAS923NextChannel+0x154>)
 80153c0:	681b      	ldr	r3, [r3, #0]
 80153c2:	f503 6390 	add.w	r3, r3, #1152	@ 0x480
 80153c6:	61bb      	str	r3, [r7, #24]
    countChannelsParams.Channels = RegionNvmGroup2->Channels;
 80153c8:	4b35      	ldr	r3, [pc, #212]	@ (80154a0 <RegionAS923NextChannel+0x154>)
 80153ca:	681b      	ldr	r3, [r3, #0]
 80153cc:	61fb      	str	r3, [r7, #28]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    countChannelsParams.Bands = RegionNvmGroup1->Bands;
 80153ce:	4b35      	ldr	r3, [pc, #212]	@ (80154a4 <RegionAS923NextChannel+0x158>)
 80153d0:	681b      	ldr	r3, [r3, #0]
 80153d2:	623b      	str	r3, [r7, #32]
#elif (defined( REGION_VERSION ) && (( REGION_VERSION == 0x02010001 ) || ( REGION_VERSION == 0x02010003 )))
    countChannelsParams.Bands = RegionBands;
#endif /* REGION_VERSION */
    countChannelsParams.MaxNbChannels = AS923_MAX_NB_CHANNELS;
 80153d4:	2310      	movs	r3, #16
 80153d6:	84bb      	strh	r3, [r7, #36]	@ 0x24
    countChannelsParams.JoinChannels = &joinChannels;
 80153d8:	f107 0312 	add.w	r3, r7, #18
 80153dc:	62bb      	str	r3, [r7, #40]	@ 0x28

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 80153de:	68fb      	ldr	r3, [r7, #12]
 80153e0:	681b      	ldr	r3, [r3, #0]
 80153e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 80153e4:	68fb      	ldr	r3, [r7, #12]
 80153e6:	685b      	ldr	r3, [r3, #4]
 80153e8:	633b      	str	r3, [r7, #48]	@ 0x30
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 80153ea:	68fb      	ldr	r3, [r7, #12]
 80153ec:	7a9b      	ldrb	r3, [r3, #10]
 80153ee:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
    identifyChannelsParam.MaxBands = AS923_MAX_NB_BANDS;
 80153f2:	2301      	movs	r3, #1
 80153f4:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35

    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 80153f8:	68fa      	ldr	r2, [r7, #12]
 80153fa:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80153fe:	320c      	adds	r2, #12
 8015400:	e892 0003 	ldmia.w	r2, {r0, r1}
 8015404:	e883 0003 	stmia.w	r3, {r0, r1}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 8015408:	68fb      	ldr	r3, [r7, #12]
 801540a:	7d1b      	ldrb	r3, [r3, #20]
 801540c:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 8015410:	68fb      	ldr	r3, [r7, #12]
 8015412:	f993 2008 	ldrsb.w	r2, [r3, #8]
 8015416:	68fb      	ldr	r3, [r7, #12]
 8015418:	8adb      	ldrh	r3, [r3, #22]
 801541a:	4619      	mov	r1, r3
 801541c:	4610      	mov	r0, r2
 801541e:	f7fe ffbd 	bl	801439c <GetTimeOnAir>
 8015422:	4603      	mov	r3, r0
 8015424:	647b      	str	r3, [r7, #68]	@ 0x44

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 8015426:	f107 0314 	add.w	r3, r7, #20
 801542a:	64bb      	str	r3, [r7, #72]	@ 0x48

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 801542c:	f107 015e 	add.w	r1, r7, #94	@ 0x5e
 8015430:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 8015434:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 8015438:	687b      	ldr	r3, [r7, #4]
 801543a:	9301      	str	r3, [sp, #4]
 801543c:	f107 035d 	add.w	r3, r7, #93	@ 0x5d
 8015440:	9300      	str	r3, [sp, #0]
 8015442:	460b      	mov	r3, r1
 8015444:	6839      	ldr	r1, [r7, #0]
 8015446:	f000 ff94 	bl	8016372 <RegionCommonIdentifyChannels>
 801544a:	4603      	mov	r3, r0
 801544c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 8015450:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8015454:	2b00      	cmp	r3, #0
 8015456:	d10e      	bne.n	8015476 <RegionAS923NextChannel+0x12a>
        // Even if one or more channels are available according to the channel plan, no free channel
        // was found during the LBT procedure.
        status = LORAMAC_STATUS_NO_FREE_CHANNEL_FOUND;
#else
        // We found a valid channel
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 8015458:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 801545c:	3b01      	subs	r3, #1
 801545e:	4619      	mov	r1, r3
 8015460:	2000      	movs	r0, #0
 8015462:	f001 f8d3 	bl	801660c <randr>
 8015466:	4603      	mov	r3, r0
 8015468:	3360      	adds	r3, #96	@ 0x60
 801546a:	443b      	add	r3, r7
 801546c:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 8015470:	68bb      	ldr	r3, [r7, #8]
 8015472:	701a      	strb	r2, [r3, #0]
 8015474:	e00e      	b.n	8015494 <RegionAS923NextChannel+0x148>
#endif
    }
    else if( status == LORAMAC_STATUS_NO_CHANNEL_FOUND )
 8015476:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801547a:	2b0c      	cmp	r3, #12
 801547c:	d10a      	bne.n	8015494 <RegionAS923NextChannel+0x148>
    {
        // Datarate not supported by any channel, restore defaults
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 );
 801547e:	4b08      	ldr	r3, [pc, #32]	@ (80154a0 <RegionAS923NextChannel+0x154>)
 8015480:	681b      	ldr	r3, [r3, #0]
 8015482:	f8b3 2480 	ldrh.w	r2, [r3, #1152]	@ 0x480
 8015486:	4b06      	ldr	r3, [pc, #24]	@ (80154a0 <RegionAS923NextChannel+0x154>)
 8015488:	681b      	ldr	r3, [r3, #0]
 801548a:	f042 0203 	orr.w	r2, r2, #3
 801548e:	b292      	uxth	r2, r2
 8015490:	f8a3 2480 	strh.w	r2, [r3, #1152]	@ 0x480
    }
    return status;
 8015494:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_AS923 */
}
 8015498:	4618      	mov	r0, r3
 801549a:	3760      	adds	r7, #96	@ 0x60
 801549c:	46bd      	mov	sp, r7
 801549e:	bd80      	pop	{r7, pc}
 80154a0:	200013e4 	.word	0x200013e4
 80154a4:	200013e0 	.word	0x200013e0

080154a8 <RegionAS923ChannelAdd>:

LoRaMacStatus_t RegionAS923ChannelAdd( ChannelAddParams_t* channelAdd )
{
 80154a8:	b580      	push	{r7, lr}
 80154aa:	b084      	sub	sp, #16
 80154ac:	af00      	add	r7, sp, #0
 80154ae:	6078      	str	r0, [r7, #4]
#if defined( REGION_AS923 )
    bool drInvalid = false;
 80154b0:	2300      	movs	r3, #0
 80154b2:	73fb      	strb	r3, [r7, #15]
    bool freqInvalid = false;
 80154b4:	2300      	movs	r3, #0
 80154b6:	73bb      	strb	r3, [r7, #14]
    uint8_t id = channelAdd->ChannelId;
 80154b8:	687b      	ldr	r3, [r7, #4]
 80154ba:	791b      	ldrb	r3, [r3, #4]
 80154bc:	737b      	strb	r3, [r7, #13]

    if( id < AS923_NUMB_DEFAULT_CHANNELS )
 80154be:	7b7b      	ldrb	r3, [r7, #13]
 80154c0:	2b01      	cmp	r3, #1
 80154c2:	d801      	bhi.n	80154c8 <RegionAS923ChannelAdd+0x20>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 80154c4:	2306      	movs	r3, #6
 80154c6:	e085      	b.n	80155d4 <RegionAS923ChannelAdd+0x12c>
    }

    if( id >= AS923_MAX_NB_CHANNELS )
 80154c8:	7b7b      	ldrb	r3, [r7, #13]
 80154ca:	2b0f      	cmp	r3, #15
 80154cc:	d901      	bls.n	80154d2 <RegionAS923ChannelAdd+0x2a>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80154ce:	2303      	movs	r3, #3
 80154d0:	e080      	b.n	80155d4 <RegionAS923ChannelAdd+0x12c>
    }

    // Validate the datarate range
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Min, AS923_TX_MIN_DATARATE, AS923_TX_MAX_DATARATE ) == false )
 80154d2:	687b      	ldr	r3, [r7, #4]
 80154d4:	681b      	ldr	r3, [r3, #0]
 80154d6:	7a1b      	ldrb	r3, [r3, #8]
 80154d8:	f343 0303 	sbfx	r3, r3, #0, #4
 80154dc:	b25b      	sxtb	r3, r3
 80154de:	2207      	movs	r2, #7
 80154e0:	2100      	movs	r1, #0
 80154e2:	4618      	mov	r0, r3
 80154e4:	f000 fadd 	bl	8015aa2 <RegionCommonValueInRange>
 80154e8:	4603      	mov	r3, r0
 80154ea:	2b00      	cmp	r3, #0
 80154ec:	d101      	bne.n	80154f2 <RegionAS923ChannelAdd+0x4a>
    {
        drInvalid = true;
 80154ee:	2301      	movs	r3, #1
 80154f0:	73fb      	strb	r3, [r7, #15]
    }
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Max, AS923_TX_MIN_DATARATE, AS923_TX_MAX_DATARATE ) == false )
 80154f2:	687b      	ldr	r3, [r7, #4]
 80154f4:	681b      	ldr	r3, [r3, #0]
 80154f6:	7a1b      	ldrb	r3, [r3, #8]
 80154f8:	f343 1303 	sbfx	r3, r3, #4, #4
 80154fc:	b25b      	sxtb	r3, r3
 80154fe:	2207      	movs	r2, #7
 8015500:	2100      	movs	r1, #0
 8015502:	4618      	mov	r0, r3
 8015504:	f000 facd 	bl	8015aa2 <RegionCommonValueInRange>
 8015508:	4603      	mov	r3, r0
 801550a:	2b00      	cmp	r3, #0
 801550c:	d101      	bne.n	8015512 <RegionAS923ChannelAdd+0x6a>
    {
        drInvalid = true;
 801550e:	2301      	movs	r3, #1
 8015510:	73fb      	strb	r3, [r7, #15]
    }
    if( channelAdd->NewChannel->DrRange.Fields.Min > channelAdd->NewChannel->DrRange.Fields.Max )
 8015512:	687b      	ldr	r3, [r7, #4]
 8015514:	681b      	ldr	r3, [r3, #0]
 8015516:	7a1b      	ldrb	r3, [r3, #8]
 8015518:	f343 0303 	sbfx	r3, r3, #0, #4
 801551c:	b25a      	sxtb	r2, r3
 801551e:	687b      	ldr	r3, [r7, #4]
 8015520:	681b      	ldr	r3, [r3, #0]
 8015522:	7a1b      	ldrb	r3, [r3, #8]
 8015524:	f343 1303 	sbfx	r3, r3, #4, #4
 8015528:	b25b      	sxtb	r3, r3
 801552a:	429a      	cmp	r2, r3
 801552c:	dd01      	ble.n	8015532 <RegionAS923ChannelAdd+0x8a>
    {
        drInvalid = true;
 801552e:	2301      	movs	r3, #1
 8015530:	73fb      	strb	r3, [r7, #15]
    }

    // Check frequency
    if( freqInvalid == false )
 8015532:	7bbb      	ldrb	r3, [r7, #14]
 8015534:	f083 0301 	eor.w	r3, r3, #1
 8015538:	b2db      	uxtb	r3, r3
 801553a:	2b00      	cmp	r3, #0
 801553c:	d00d      	beq.n	801555a <RegionAS923ChannelAdd+0xb2>
    {
        if( VerifyRfFreq( channelAdd->NewChannel->Frequency ) == false )
 801553e:	687b      	ldr	r3, [r7, #4]
 8015540:	681b      	ldr	r3, [r3, #0]
 8015542:	681b      	ldr	r3, [r3, #0]
 8015544:	4618      	mov	r0, r3
 8015546:	f7fe ff03 	bl	8014350 <VerifyRfFreq>
 801554a:	4603      	mov	r3, r0
 801554c:	f083 0301 	eor.w	r3, r3, #1
 8015550:	b2db      	uxtb	r3, r3
 8015552:	2b00      	cmp	r3, #0
 8015554:	d001      	beq.n	801555a <RegionAS923ChannelAdd+0xb2>
        {
            freqInvalid = true;
 8015556:	2301      	movs	r3, #1
 8015558:	73bb      	strb	r3, [r7, #14]
        }
    }

    // Check status
    if( ( drInvalid == true ) && ( freqInvalid == true ) )
 801555a:	7bfb      	ldrb	r3, [r7, #15]
 801555c:	2b00      	cmp	r3, #0
 801555e:	d004      	beq.n	801556a <RegionAS923ChannelAdd+0xc2>
 8015560:	7bbb      	ldrb	r3, [r7, #14]
 8015562:	2b00      	cmp	r3, #0
 8015564:	d001      	beq.n	801556a <RegionAS923ChannelAdd+0xc2>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 8015566:	2306      	movs	r3, #6
 8015568:	e034      	b.n	80155d4 <RegionAS923ChannelAdd+0x12c>
    }
    if( drInvalid == true )
 801556a:	7bfb      	ldrb	r3, [r7, #15]
 801556c:	2b00      	cmp	r3, #0
 801556e:	d001      	beq.n	8015574 <RegionAS923ChannelAdd+0xcc>
    {
        return LORAMAC_STATUS_DATARATE_INVALID;
 8015570:	2305      	movs	r3, #5
 8015572:	e02f      	b.n	80155d4 <RegionAS923ChannelAdd+0x12c>
    }
    if( freqInvalid == true )
 8015574:	7bbb      	ldrb	r3, [r7, #14]
 8015576:	2b00      	cmp	r3, #0
 8015578:	d001      	beq.n	801557e <RegionAS923ChannelAdd+0xd6>
    {
        return LORAMAC_STATUS_FREQUENCY_INVALID;
 801557a:	2304      	movs	r3, #4
 801557c:	e02a      	b.n	80155d4 <RegionAS923ChannelAdd+0x12c>
    }

    memcpy1( ( uint8_t* ) &(RegionNvmGroup2->Channels[id]), ( uint8_t* ) channelAdd->NewChannel, sizeof( RegionNvmGroup2->Channels[id] ) );
 801557e:	4b17      	ldr	r3, [pc, #92]	@ (80155dc <RegionAS923ChannelAdd+0x134>)
 8015580:	6819      	ldr	r1, [r3, #0]
 8015582:	7b7a      	ldrb	r2, [r7, #13]
 8015584:	4613      	mov	r3, r2
 8015586:	005b      	lsls	r3, r3, #1
 8015588:	4413      	add	r3, r2
 801558a:	009b      	lsls	r3, r3, #2
 801558c:	18c8      	adds	r0, r1, r3
 801558e:	687b      	ldr	r3, [r7, #4]
 8015590:	681b      	ldr	r3, [r3, #0]
 8015592:	220c      	movs	r2, #12
 8015594:	4619      	mov	r1, r3
 8015596:	f001 f850 	bl	801663a <memcpy1>
    RegionNvmGroup2->Channels[id].Band = 0;
 801559a:	4b10      	ldr	r3, [pc, #64]	@ (80155dc <RegionAS923ChannelAdd+0x134>)
 801559c:	6819      	ldr	r1, [r3, #0]
 801559e:	7b7a      	ldrb	r2, [r7, #13]
 80155a0:	4613      	mov	r3, r2
 80155a2:	005b      	lsls	r3, r3, #1
 80155a4:	4413      	add	r3, r2
 80155a6:	009b      	lsls	r3, r3, #2
 80155a8:	440b      	add	r3, r1
 80155aa:	3309      	adds	r3, #9
 80155ac:	2200      	movs	r2, #0
 80155ae:	701a      	strb	r2, [r3, #0]
    RegionNvmGroup2->ChannelsMask[0] |= ( 1 << id );
 80155b0:	4b0a      	ldr	r3, [pc, #40]	@ (80155dc <RegionAS923ChannelAdd+0x134>)
 80155b2:	681b      	ldr	r3, [r3, #0]
 80155b4:	f8b3 3480 	ldrh.w	r3, [r3, #1152]	@ 0x480
 80155b8:	b21a      	sxth	r2, r3
 80155ba:	7b7b      	ldrb	r3, [r7, #13]
 80155bc:	2101      	movs	r1, #1
 80155be:	fa01 f303 	lsl.w	r3, r1, r3
 80155c2:	b21b      	sxth	r3, r3
 80155c4:	4313      	orrs	r3, r2
 80155c6:	b21a      	sxth	r2, r3
 80155c8:	4b04      	ldr	r3, [pc, #16]	@ (80155dc <RegionAS923ChannelAdd+0x134>)
 80155ca:	681b      	ldr	r3, [r3, #0]
 80155cc:	b292      	uxth	r2, r2
 80155ce:	f8a3 2480 	strh.w	r2, [r3, #1152]	@ 0x480
    return LORAMAC_STATUS_OK;
 80155d2:	2300      	movs	r3, #0
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_AS923 */
}
 80155d4:	4618      	mov	r0, r3
 80155d6:	3710      	adds	r7, #16
 80155d8:	46bd      	mov	sp, r7
 80155da:	bd80      	pop	{r7, pc}
 80155dc:	200013e4 	.word	0x200013e4

080155e0 <RegionAS923ChannelsRemove>:

bool RegionAS923ChannelsRemove( ChannelRemoveParams_t* channelRemove  )
{
 80155e0:	b580      	push	{r7, lr}
 80155e2:	b086      	sub	sp, #24
 80155e4:	af00      	add	r7, sp, #0
 80155e6:	6078      	str	r0, [r7, #4]
#if defined( REGION_AS923 )
    uint8_t id = channelRemove->ChannelId;
 80155e8:	687b      	ldr	r3, [r7, #4]
 80155ea:	781b      	ldrb	r3, [r3, #0]
 80155ec:	75fb      	strb	r3, [r7, #23]

    if( id < AS923_NUMB_DEFAULT_CHANNELS )
 80155ee:	7dfb      	ldrb	r3, [r7, #23]
 80155f0:	2b01      	cmp	r3, #1
 80155f2:	d801      	bhi.n	80155f8 <RegionAS923ChannelsRemove+0x18>
    {
        return false;
 80155f4:	2300      	movs	r3, #0
 80155f6:	e016      	b.n	8015626 <RegionAS923ChannelsRemove+0x46>
    }

    // Remove the channel from the list of channels
    RegionNvmGroup2->Channels[id] = ( ChannelParams_t ){ 0, 0, { 0 }, 0 };
 80155f8:	4b0d      	ldr	r3, [pc, #52]	@ (8015630 <RegionAS923ChannelsRemove+0x50>)
 80155fa:	6819      	ldr	r1, [r3, #0]
 80155fc:	7dfa      	ldrb	r2, [r7, #23]
 80155fe:	4613      	mov	r3, r2
 8015600:	005b      	lsls	r3, r3, #1
 8015602:	4413      	add	r3, r2
 8015604:	009b      	lsls	r3, r3, #2
 8015606:	440b      	add	r3, r1
 8015608:	461a      	mov	r2, r3
 801560a:	2300      	movs	r3, #0
 801560c:	6013      	str	r3, [r2, #0]
 801560e:	6053      	str	r3, [r2, #4]
 8015610:	6093      	str	r3, [r2, #8]

    return RegionCommonChanDisable( RegionNvmGroup2->ChannelsMask, id, AS923_MAX_NB_CHANNELS );
 8015612:	4b07      	ldr	r3, [pc, #28]	@ (8015630 <RegionAS923ChannelsRemove+0x50>)
 8015614:	681b      	ldr	r3, [r3, #0]
 8015616:	f503 6390 	add.w	r3, r3, #1152	@ 0x480
 801561a:	7df9      	ldrb	r1, [r7, #23]
 801561c:	2210      	movs	r2, #16
 801561e:	4618      	mov	r0, r3
 8015620:	f000 fa5c 	bl	8015adc <RegionCommonChanDisable>
 8015624:	4603      	mov	r3, r0
#else
    return false;
#endif /* REGION_AS923 */
}
 8015626:	4618      	mov	r0, r3
 8015628:	3718      	adds	r7, #24
 801562a:	46bd      	mov	sp, r7
 801562c:	bd80      	pop	{r7, pc}
 801562e:	bf00      	nop
 8015630:	200013e4 	.word	0x200013e4

08015634 <RegionAS923SetContinuousWave>:

#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
void RegionAS923SetContinuousWave( ContinuousWaveParams_t* continuousWave )
{
 8015634:	b590      	push	{r4, r7, lr}
 8015636:	b085      	sub	sp, #20
 8015638:	af00      	add	r7, sp, #0
 801563a:	6078      	str	r0, [r7, #4]
#if defined( REGION_AS923 )
    int8_t txPowerLimited = RegionCommonLimitTxPower( continuousWave->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[continuousWave->Channel].Band].TxMaxPower );
 801563c:	687b      	ldr	r3, [r7, #4]
 801563e:	f993 0002 	ldrsb.w	r0, [r3, #2]
 8015642:	4b20      	ldr	r3, [pc, #128]	@ (80156c4 <RegionAS923SetContinuousWave+0x90>)
 8015644:	681a      	ldr	r2, [r3, #0]
 8015646:	4b20      	ldr	r3, [pc, #128]	@ (80156c8 <RegionAS923SetContinuousWave+0x94>)
 8015648:	6819      	ldr	r1, [r3, #0]
 801564a:	687b      	ldr	r3, [r7, #4]
 801564c:	781b      	ldrb	r3, [r3, #0]
 801564e:	461c      	mov	r4, r3
 8015650:	4623      	mov	r3, r4
 8015652:	005b      	lsls	r3, r3, #1
 8015654:	4423      	add	r3, r4
 8015656:	009b      	lsls	r3, r3, #2
 8015658:	440b      	add	r3, r1
 801565a:	3309      	adds	r3, #9
 801565c:	781b      	ldrb	r3, [r3, #0]
 801565e:	4619      	mov	r1, r3
 8015660:	460b      	mov	r3, r1
 8015662:	005b      	lsls	r3, r3, #1
 8015664:	440b      	add	r3, r1
 8015666:	00db      	lsls	r3, r3, #3
 8015668:	4413      	add	r3, r2
 801566a:	3302      	adds	r3, #2
 801566c:	f993 3000 	ldrsb.w	r3, [r3]
 8015670:	4619      	mov	r1, r3
 8015672:	f000 ff1e 	bl	80164b2 <RegionCommonLimitTxPower>
 8015676:	4603      	mov	r3, r0
 8015678:	73fb      	strb	r3, [r7, #15]
    int8_t phyTxPower = 0;
 801567a:	2300      	movs	r3, #0
 801567c:	73bb      	strb	r3, [r7, #14]
    uint32_t frequency = RegionNvmGroup2->Channels[continuousWave->Channel].Frequency;
 801567e:	4b12      	ldr	r3, [pc, #72]	@ (80156c8 <RegionAS923SetContinuousWave+0x94>)
 8015680:	681a      	ldr	r2, [r3, #0]
 8015682:	687b      	ldr	r3, [r7, #4]
 8015684:	781b      	ldrb	r3, [r3, #0]
 8015686:	4619      	mov	r1, r3
 8015688:	460b      	mov	r3, r1
 801568a:	005b      	lsls	r3, r3, #1
 801568c:	440b      	add	r3, r1
 801568e:	009b      	lsls	r3, r3, #2
 8015690:	4413      	add	r3, r2
 8015692:	681b      	ldr	r3, [r3, #0]
 8015694:	60bb      	str	r3, [r7, #8]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, continuousWave->MaxEirp, continuousWave->AntennaGain );
 8015696:	687b      	ldr	r3, [r7, #4]
 8015698:	6859      	ldr	r1, [r3, #4]
 801569a:	687b      	ldr	r3, [r7, #4]
 801569c:	689a      	ldr	r2, [r3, #8]
 801569e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80156a2:	4618      	mov	r0, r3
 80156a4:	f000 fd76 	bl	8016194 <RegionCommonComputeTxPower>
 80156a8:	4603      	mov	r3, r0
 80156aa:	73bb      	strb	r3, [r7, #14]

    Radio.SetTxContinuousWave( frequency, phyTxPower, continuousWave->Timeout );
 80156ac:	4b07      	ldr	r3, [pc, #28]	@ (80156cc <RegionAS923SetContinuousWave+0x98>)
 80156ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80156b0:	687a      	ldr	r2, [r7, #4]
 80156b2:	8992      	ldrh	r2, [r2, #12]
 80156b4:	f997 100e 	ldrsb.w	r1, [r7, #14]
 80156b8:	68b8      	ldr	r0, [r7, #8]
 80156ba:	4798      	blx	r3
#endif /* REGION_AS923 */
}
 80156bc:	bf00      	nop
 80156be:	3714      	adds	r7, #20
 80156c0:	46bd      	mov	sp, r7
 80156c2:	bd90      	pop	{r4, r7, pc}
 80156c4:	200013e0 	.word	0x200013e0
 80156c8:	200013e4 	.word	0x200013e4
 80156cc:	0801bd08 	.word	0x0801bd08

080156d0 <RegionAS923ApplyDrOffset>:

uint8_t RegionAS923ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 80156d0:	b480      	push	{r7}
 80156d2:	b085      	sub	sp, #20
 80156d4:	af00      	add	r7, sp, #0
 80156d6:	4603      	mov	r3, r0
 80156d8:	71fb      	strb	r3, [r7, #7]
 80156da:	460b      	mov	r3, r1
 80156dc:	71bb      	strb	r3, [r7, #6]
 80156de:	4613      	mov	r3, r2
 80156e0:	717b      	strb	r3, [r7, #5]
#if defined( REGION_AS923 )
    // Initialize minDr for a downlink dwell time configuration of 0
    int8_t minDr = DR_0;
 80156e2:	2300      	movs	r3, #0
 80156e4:	73fb      	strb	r3, [r7, #15]

    // Update the minDR for a downlink dwell time configuration of 1
    if( downlinkDwellTime == 1 )
 80156e6:	79fb      	ldrb	r3, [r7, #7]
 80156e8:	2b01      	cmp	r3, #1
 80156ea:	d101      	bne.n	80156f0 <RegionAS923ApplyDrOffset+0x20>
    {
        minDr = AS923_DWELL_LIMIT_DATARATE;
 80156ec:	2302      	movs	r3, #2
 80156ee:	73fb      	strb	r3, [r7, #15]
    }

    // Apply offset formula
    return MIN( DR_5, MAX( minDr, dr - EffectiveRx1DrOffsetAS923[drOffset] ) );
 80156f0:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80156f4:	f997 2005 	ldrsb.w	r2, [r7, #5]
 80156f8:	4908      	ldr	r1, [pc, #32]	@ (801571c <RegionAS923ApplyDrOffset+0x4c>)
 80156fa:	568a      	ldrsb	r2, [r1, r2]
 80156fc:	1a9a      	subs	r2, r3, r2
 80156fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015702:	4293      	cmp	r3, r2
 8015704:	bfb8      	it	lt
 8015706:	4613      	movlt	r3, r2
 8015708:	2b05      	cmp	r3, #5
 801570a:	bfa8      	it	ge
 801570c:	2305      	movge	r3, #5
 801570e:	b2db      	uxtb	r3, r3
#else
    return 0;
#endif /* REGION_AS923 */

}
 8015710:	4618      	mov	r0, r3
 8015712:	3714      	adds	r7, #20
 8015714:	46bd      	mov	sp, r7
 8015716:	bc80      	pop	{r7}
 8015718:	4770      	bx	lr
 801571a:	bf00      	nop
 801571c:	0801bd00 	.word	0x0801bd00

08015720 <GetDutyCycle>:
#ifdef MW_LOG_ENABLED
static const char *EventRXSlotStrings[] = { "1", "2", "C", "Multi_C", "P", "Multi_P" };
#endif

static uint16_t GetDutyCycle( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 8015720:	b480      	push	{r7}
 8015722:	b087      	sub	sp, #28
 8015724:	af00      	add	r7, sp, #0
 8015726:	60f8      	str	r0, [r7, #12]
 8015728:	4608      	mov	r0, r1
 801572a:	4639      	mov	r1, r7
 801572c:	e881 000c 	stmia.w	r1, {r2, r3}
 8015730:	4603      	mov	r3, r0
 8015732:	72fb      	strb	r3, [r7, #11]
    uint16_t dutyCycle = band->DCycle;
 8015734:	68fb      	ldr	r3, [r7, #12]
 8015736:	881b      	ldrh	r3, [r3, #0]
 8015738:	82fb      	strh	r3, [r7, #22]

    if( joined == false )
 801573a:	7afb      	ldrb	r3, [r7, #11]
 801573c:	f083 0301 	eor.w	r3, r3, #1
 8015740:	b2db      	uxtb	r3, r3
 8015742:	2b00      	cmp	r3, #0
 8015744:	d01b      	beq.n	801577e <GetDutyCycle+0x5e>
    {
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010003 ))  
        uint16_t joinDutyCycle = BACKOFF_DC_1_HOUR;
#else
        uint16_t joinDutyCycle = BACKOFF_DC_24_HOURS;
 8015746:	f242 7310 	movw	r3, #10000	@ 0x2710
 801574a:	82bb      	strh	r3, [r7, #20]

        if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_1_HOUR_IN_S )
 801574c:	683b      	ldr	r3, [r7, #0]
 801574e:	f5b3 6f61 	cmp.w	r3, #3600	@ 0xe10
 8015752:	d202      	bcs.n	801575a <GetDutyCycle+0x3a>
        {
            joinDutyCycle = BACKOFF_DC_1_HOUR;
 8015754:	2364      	movs	r3, #100	@ 0x64
 8015756:	82bb      	strh	r3, [r7, #20]
 8015758:	e00b      	b.n	8015772 <GetDutyCycle+0x52>
        }
        else if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_10_HOURS_IN_S )
 801575a:	683b      	ldr	r3, [r7, #0]
 801575c:	f649 22af 	movw	r2, #39599	@ 0x9aaf
 8015760:	4293      	cmp	r3, r2
 8015762:	d803      	bhi.n	801576c <GetDutyCycle+0x4c>
        {
            joinDutyCycle = BACKOFF_DC_10_HOURS;
 8015764:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8015768:	82bb      	strh	r3, [r7, #20]
 801576a:	e002      	b.n	8015772 <GetDutyCycle+0x52>
        }
        else
        {
            joinDutyCycle = BACKOFF_DC_24_HOURS;
 801576c:	f242 7310 	movw	r3, #10000	@ 0x2710
 8015770:	82bb      	strh	r3, [r7, #20]
        }
#endif
        // Take the most restrictive duty cycle
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
 8015772:	8aba      	ldrh	r2, [r7, #20]
 8015774:	8afb      	ldrh	r3, [r7, #22]
 8015776:	4293      	cmp	r3, r2
 8015778:	bf38      	it	cc
 801577a:	4613      	movcc	r3, r2
 801577c:	82fb      	strh	r3, [r7, #22]
    }

    // Prevent value of 0
    if( dutyCycle == 0 )
 801577e:	8afb      	ldrh	r3, [r7, #22]
 8015780:	2b00      	cmp	r3, #0
 8015782:	d101      	bne.n	8015788 <GetDutyCycle+0x68>
    {
        dutyCycle = 1;
 8015784:	2301      	movs	r3, #1
 8015786:	82fb      	strh	r3, [r7, #22]
    }

    return dutyCycle;
 8015788:	8afb      	ldrh	r3, [r7, #22]
}
 801578a:	4618      	mov	r0, r3
 801578c:	371c      	adds	r7, #28
 801578e:	46bd      	mov	sp, r7
 8015790:	bc80      	pop	{r7}
 8015792:	4770      	bx	lr

08015794 <SetMaxTimeCredits>:

static uint16_t SetMaxTimeCredits( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup,
                                   bool dutyCycleEnabled, bool lastTxIsJoinRequest )
{
 8015794:	b580      	push	{r7, lr}
 8015796:	b08e      	sub	sp, #56	@ 0x38
 8015798:	af02      	add	r7, sp, #8
 801579a:	60f8      	str	r0, [r7, #12]
 801579c:	4608      	mov	r0, r1
 801579e:	4639      	mov	r1, r7
 80157a0:	e881 000c 	stmia.w	r1, {r2, r3}
 80157a4:	4603      	mov	r3, r0
 80157a6:	72fb      	strb	r3, [r7, #11]
    uint16_t dutyCycle = band->DCycle;
 80157a8:	68fb      	ldr	r3, [r7, #12]
 80157aa:	881b      	ldrh	r3, [r3, #0]
 80157ac:	857b      	strh	r3, [r7, #42]	@ 0x2a
    TimerTime_t maxCredits = DUTY_CYCLE_TIME_PERIOD;
 80157ae:	4b4b      	ldr	r3, [pc, #300]	@ (80158dc <SetMaxTimeCredits+0x148>)
 80157b0:	62fb      	str	r3, [r7, #44]	@ 0x2c

    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 80157b2:	7af9      	ldrb	r1, [r7, #11]
 80157b4:	463b      	mov	r3, r7
 80157b6:	cb0c      	ldmia	r3, {r2, r3}
 80157b8:	68f8      	ldr	r0, [r7, #12]
 80157ba:	f7ff ffb1 	bl	8015720 <GetDutyCycle>
 80157be:	4603      	mov	r3, r0
 80157c0:	857b      	strh	r3, [r7, #42]	@ 0x2a

    if( joined == false )
 80157c2:	7afb      	ldrb	r3, [r7, #11]
 80157c4:	f083 0301 	eor.w	r3, r3, #1
 80157c8:	b2db      	uxtb	r3, r3
 80157ca:	2b00      	cmp	r3, #0
 80157cc:	d06d      	beq.n	80158aa <SetMaxTimeCredits+0x116>
        else
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD_JOIN_BACKOFF_24H;
        }
#else
    	TimerTime_t elapsedTime = SysTimeToMs( elapsedTimeSinceStartup );
 80157ce:	463b      	mov	r3, r7
 80157d0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80157d4:	f004 fbd6 	bl	8019f84 <SysTimeToMs>
 80157d8:	6278      	str	r0, [r7, #36]	@ 0x24
    	SysTime_t timeDiff = { 0 };
 80157da:	f107 0314 	add.w	r3, r7, #20
 80157de:	2200      	movs	r2, #0
 80157e0:	601a      	str	r2, [r3, #0]
 80157e2:	605a      	str	r2, [r3, #4]
        if( dutyCycle == BACKOFF_DC_1_HOUR )
 80157e4:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80157e6:	2b64      	cmp	r3, #100	@ 0x64
 80157e8:	d105      	bne.n	80157f6 <SetMaxTimeCredits+0x62>
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD;
 80157ea:	4b3c      	ldr	r3, [pc, #240]	@ (80158dc <SetMaxTimeCredits+0x148>)
 80157ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
            band->LastMaxCreditAssignTime = elapsedTime;
 80157ee:	68fb      	ldr	r3, [r7, #12]
 80157f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80157f2:	609a      	str	r2, [r3, #8]
 80157f4:	e00b      	b.n	801580e <SetMaxTimeCredits+0x7a>
        }
        else if( dutyCycle == BACKOFF_DC_10_HOURS )
 80157f6:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80157f8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80157fc:	d105      	bne.n	801580a <SetMaxTimeCredits+0x76>
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 10;
 80157fe:	4b38      	ldr	r3, [pc, #224]	@ (80158e0 <SetMaxTimeCredits+0x14c>)
 8015800:	62fb      	str	r3, [r7, #44]	@ 0x2c
            band->LastMaxCreditAssignTime = elapsedTime;
 8015802:	68fb      	ldr	r3, [r7, #12]
 8015804:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8015806:	609a      	str	r2, [r3, #8]
 8015808:	e001      	b.n	801580e <SetMaxTimeCredits+0x7a>
        }
        else
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 24;
 801580a:	4b36      	ldr	r3, [pc, #216]	@ (80158e4 <SetMaxTimeCredits+0x150>)
 801580c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }

        timeDiff = SysTimeSub( elapsedTimeSinceStartup, SysTimeFromMs( band->LastMaxCreditAssignTime ) );
 801580e:	68fb      	ldr	r3, [r7, #12]
 8015810:	689a      	ldr	r2, [r3, #8]
 8015812:	f107 031c 	add.w	r3, r7, #28
 8015816:	4611      	mov	r1, r2
 8015818:	4618      	mov	r0, r3
 801581a:	f004 fbdb 	bl	8019fd4 <SysTimeFromMs>
 801581e:	f107 0014 	add.w	r0, r7, #20
 8015822:	6a3b      	ldr	r3, [r7, #32]
 8015824:	9300      	str	r3, [sp, #0]
 8015826:	69fb      	ldr	r3, [r7, #28]
 8015828:	463a      	mov	r2, r7
 801582a:	ca06      	ldmia	r2, {r1, r2}
 801582c:	f004 faeb 	bl	8019e06 <SysTimeSub>

        // Verify if we have to assign the maximum credits in cases
        // of the preconditions have changed.
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 8015830:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8015834:	f083 0301 	eor.w	r3, r3, #1
 8015838:	b2db      	uxtb	r3, r3
 801583a:	2b00      	cmp	r3, #0
 801583c:	d006      	beq.n	801584c <SetMaxTimeCredits+0xb8>
 801583e:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8015842:	f083 0301 	eor.w	r3, r3, #1
 8015846:	b2db      	uxtb	r3, r3
 8015848:	2b00      	cmp	r3, #0
 801584a:	d108      	bne.n	801585e <SetMaxTimeCredits+0xca>
            ( band->MaxTimeCredits != maxCredits ) ||
 801584c:	68fb      	ldr	r3, [r7, #12]
 801584e:	691b      	ldr	r3, [r3, #16]
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 8015850:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8015852:	429a      	cmp	r2, r3
 8015854:	d103      	bne.n	801585e <SetMaxTimeCredits+0xca>
            ( timeDiff.Seconds >= BACKOFF_24_HOURS_IN_S ) )
 8015856:	697b      	ldr	r3, [r7, #20]
            ( band->MaxTimeCredits != maxCredits ) ||
 8015858:	4a23      	ldr	r2, [pc, #140]	@ (80158e8 <SetMaxTimeCredits+0x154>)
 801585a:	4293      	cmp	r3, r2
 801585c:	d92f      	bls.n	80158be <SetMaxTimeCredits+0x12a>
        {
            band->TimeCredits = maxCredits;
 801585e:	68fb      	ldr	r3, [r7, #12]
 8015860:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8015862:	60da      	str	r2, [r3, #12]

            if( elapsedTimeSinceStartup.Seconds >= BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 8015864:	683b      	ldr	r3, [r7, #0]
 8015866:	4a21      	ldr	r2, [pc, #132]	@ (80158ec <SetMaxTimeCredits+0x158>)
 8015868:	4293      	cmp	r3, r2
 801586a:	d928      	bls.n	80158be <SetMaxTimeCredits+0x12a>
            {
                timeDiff.Seconds = ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S;
 801586c:	683b      	ldr	r3, [r7, #0]
 801586e:	f5a3 33f6 	sub.w	r3, r3, #125952	@ 0x1ec00
 8015872:	3b30      	subs	r3, #48	@ 0x30
 8015874:	4a1e      	ldr	r2, [pc, #120]	@ (80158f0 <SetMaxTimeCredits+0x15c>)
 8015876:	fba2 2303 	umull	r2, r3, r2, r3
 801587a:	0c1b      	lsrs	r3, r3, #16
 801587c:	617b      	str	r3, [r7, #20]
                timeDiff.Seconds *= BACKOFF_24_HOURS_IN_S;
 801587e:	697b      	ldr	r3, [r7, #20]
 8015880:	4a1c      	ldr	r2, [pc, #112]	@ (80158f4 <SetMaxTimeCredits+0x160>)
 8015882:	fb02 f303 	mul.w	r3, r2, r3
 8015886:	617b      	str	r3, [r7, #20]
                timeDiff.Seconds += BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 8015888:	697b      	ldr	r3, [r7, #20]
 801588a:	f503 33f6 	add.w	r3, r3, #125952	@ 0x1ec00
 801588e:	3330      	adds	r3, #48	@ 0x30
 8015890:	617b      	str	r3, [r7, #20]
                timeDiff.SubSeconds = 0;
 8015892:	2300      	movs	r3, #0
 8015894:	833b      	strh	r3, [r7, #24]
                band->LastMaxCreditAssignTime = SysTimeToMs( timeDiff );
 8015896:	f107 0314 	add.w	r3, r7, #20
 801589a:	e893 0003 	ldmia.w	r3, {r0, r1}
 801589e:	f004 fb71 	bl	8019f84 <SysTimeToMs>
 80158a2:	4602      	mov	r2, r0
 80158a4:	68fb      	ldr	r3, [r7, #12]
 80158a6:	609a      	str	r2, [r3, #8]
 80158a8:	e009      	b.n	80158be <SetMaxTimeCredits+0x12a>
#endif

    }
    else
    {
        if( dutyCycleEnabled == false )
 80158aa:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 80158ae:	f083 0301 	eor.w	r3, r3, #1
 80158b2:	b2db      	uxtb	r3, r3
 80158b4:	2b00      	cmp	r3, #0
 80158b6:	d002      	beq.n	80158be <SetMaxTimeCredits+0x12a>
        {
            // Assign max credits when the duty cycle is disabled.
            band->TimeCredits = maxCredits;
 80158b8:	68fb      	ldr	r3, [r7, #12]
 80158ba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80158bc:	60da      	str	r2, [r3, #12]
        }
    }

#if (defined( REGION_VERSION ) && (( REGION_VERSION == 0x01010003 ) || ( REGION_VERSION == 0x02010001 )))
    // Assign the max credits if its the first time
    if( band->LastBandUpdateTime == 0 )
 80158be:	68fb      	ldr	r3, [r7, #12]
 80158c0:	685b      	ldr	r3, [r3, #4]
 80158c2:	2b00      	cmp	r3, #0
 80158c4:	d102      	bne.n	80158cc <SetMaxTimeCredits+0x138>
    {
        band->TimeCredits = maxCredits;
 80158c6:	68fb      	ldr	r3, [r7, #12]
 80158c8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80158ca:	60da      	str	r2, [r3, #12]
    }
#endif 

    // Setup the maximum allowed credits. We can assign them
    // safely all the time.
    band->MaxTimeCredits = maxCredits;
 80158cc:	68fb      	ldr	r3, [r7, #12]
 80158ce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80158d0:	611a      	str	r2, [r3, #16]

    return dutyCycle;
 80158d2:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
}
 80158d4:	4618      	mov	r0, r3
 80158d6:	3730      	adds	r7, #48	@ 0x30
 80158d8:	46bd      	mov	sp, r7
 80158da:	bd80      	pop	{r7, pc}
 80158dc:	001b7740 	.word	0x001b7740
 80158e0:	0112a880 	.word	0x0112a880
 80158e4:	02932e00 	.word	0x02932e00
 80158e8:	0001517f 	.word	0x0001517f
 80158ec:	0001ec2f 	.word	0x0001ec2f
 80158f0:	c22e4507 	.word	0xc22e4507
 80158f4:	00015180 	.word	0x00015180

080158f8 <UpdateTimeCredits>:
}
#else
static uint16_t UpdateTimeCredits( Band_t* band, bool joined, bool dutyCycleEnabled,
                                   bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                   TimerTime_t currentTime )
{
 80158f8:	b580      	push	{r7, lr}
 80158fa:	b086      	sub	sp, #24
 80158fc:	af02      	add	r7, sp, #8
 80158fe:	6078      	str	r0, [r7, #4]
 8015900:	4608      	mov	r0, r1
 8015902:	4611      	mov	r1, r2
 8015904:	461a      	mov	r2, r3
 8015906:	4603      	mov	r3, r0
 8015908:	70fb      	strb	r3, [r7, #3]
 801590a:	460b      	mov	r3, r1
 801590c:	70bb      	strb	r3, [r7, #2]
 801590e:	4613      	mov	r3, r2
 8015910:	707b      	strb	r3, [r7, #1]
    uint16_t dutyCycle = SetMaxTimeCredits( band, joined, elapsedTimeSinceStartup,
 8015912:	78f9      	ldrb	r1, [r7, #3]
 8015914:	787b      	ldrb	r3, [r7, #1]
 8015916:	9301      	str	r3, [sp, #4]
 8015918:	78bb      	ldrb	r3, [r7, #2]
 801591a:	9300      	str	r3, [sp, #0]
 801591c:	f107 0318 	add.w	r3, r7, #24
 8015920:	cb0c      	ldmia	r3, {r2, r3}
 8015922:	6878      	ldr	r0, [r7, #4]
 8015924:	f7ff ff36 	bl	8015794 <SetMaxTimeCredits>
 8015928:	4603      	mov	r3, r0
 801592a:	81fb      	strh	r3, [r7, #14]
                                            dutyCycleEnabled, lastTxIsJoinRequest );

    if( joined == true )
 801592c:	78fb      	ldrb	r3, [r7, #3]
 801592e:	2b00      	cmp	r3, #0
 8015930:	d00a      	beq.n	8015948 <UpdateTimeCredits+0x50>
    {
        // Apply a sliding window for the duty cycle with collection and speding
        // credits.
        band->TimeCredits += TimerGetElapsedTime( band->LastBandUpdateTime );
 8015932:	687b      	ldr	r3, [r7, #4]
 8015934:	685b      	ldr	r3, [r3, #4]
 8015936:	4618      	mov	r0, r3
 8015938:	f005 f8de 	bl	801aaf8 <UTIL_TIMER_GetElapsedTime>
 801593c:	4602      	mov	r2, r0
 801593e:	687b      	ldr	r3, [r7, #4]
 8015940:	68db      	ldr	r3, [r3, #12]
 8015942:	441a      	add	r2, r3
 8015944:	687b      	ldr	r3, [r7, #4]
 8015946:	60da      	str	r2, [r3, #12]
    }

    // Limit band credits to maximum
    if( band->TimeCredits > band->MaxTimeCredits )
 8015948:	687b      	ldr	r3, [r7, #4]
 801594a:	68da      	ldr	r2, [r3, #12]
 801594c:	687b      	ldr	r3, [r7, #4]
 801594e:	691b      	ldr	r3, [r3, #16]
 8015950:	429a      	cmp	r2, r3
 8015952:	d903      	bls.n	801595c <UpdateTimeCredits+0x64>
    {
        band->TimeCredits = band->MaxTimeCredits;
 8015954:	687b      	ldr	r3, [r7, #4]
 8015956:	691a      	ldr	r2, [r3, #16]
 8015958:	687b      	ldr	r3, [r7, #4]
 801595a:	60da      	str	r2, [r3, #12]
    }

    // Synchronize update time
    band->LastBandUpdateTime = currentTime;
 801595c:	687b      	ldr	r3, [r7, #4]
 801595e:	6a3a      	ldr	r2, [r7, #32]
 8015960:	605a      	str	r2, [r3, #4]

    return dutyCycle;
 8015962:	89fb      	ldrh	r3, [r7, #14]
}
 8015964:	4618      	mov	r0, r3
 8015966:	3710      	adds	r7, #16
 8015968:	46bd      	mov	sp, r7
 801596a:	bd80      	pop	{r7, pc}

0801596c <CountChannels>:
#endif

static uint8_t CountChannels( uint16_t mask, uint8_t nbBits )
{
 801596c:	b480      	push	{r7}
 801596e:	b085      	sub	sp, #20
 8015970:	af00      	add	r7, sp, #0
 8015972:	4603      	mov	r3, r0
 8015974:	460a      	mov	r2, r1
 8015976:	80fb      	strh	r3, [r7, #6]
 8015978:	4613      	mov	r3, r2
 801597a:	717b      	strb	r3, [r7, #5]
    uint8_t nbActiveBits = 0;
 801597c:	2300      	movs	r3, #0
 801597e:	73fb      	strb	r3, [r7, #15]

    for( uint8_t j = 0; j < nbBits; j++ )
 8015980:	2300      	movs	r3, #0
 8015982:	73bb      	strb	r3, [r7, #14]
 8015984:	e011      	b.n	80159aa <CountChannels+0x3e>
    {
        if( ( mask & ( 1 << j ) ) == ( 1 << j ) )
 8015986:	88fa      	ldrh	r2, [r7, #6]
 8015988:	7bbb      	ldrb	r3, [r7, #14]
 801598a:	2101      	movs	r1, #1
 801598c:	fa01 f303 	lsl.w	r3, r1, r3
 8015990:	401a      	ands	r2, r3
 8015992:	7bbb      	ldrb	r3, [r7, #14]
 8015994:	2101      	movs	r1, #1
 8015996:	fa01 f303 	lsl.w	r3, r1, r3
 801599a:	429a      	cmp	r2, r3
 801599c:	d102      	bne.n	80159a4 <CountChannels+0x38>
        {
            nbActiveBits++;
 801599e:	7bfb      	ldrb	r3, [r7, #15]
 80159a0:	3301      	adds	r3, #1
 80159a2:	73fb      	strb	r3, [r7, #15]
    for( uint8_t j = 0; j < nbBits; j++ )
 80159a4:	7bbb      	ldrb	r3, [r7, #14]
 80159a6:	3301      	adds	r3, #1
 80159a8:	73bb      	strb	r3, [r7, #14]
 80159aa:	7bba      	ldrb	r2, [r7, #14]
 80159ac:	797b      	ldrb	r3, [r7, #5]
 80159ae:	429a      	cmp	r2, r3
 80159b0:	d3e9      	bcc.n	8015986 <CountChannels+0x1a>
        }
    }
    return nbActiveBits;
 80159b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80159b4:	4618      	mov	r0, r3
 80159b6:	3714      	adds	r7, #20
 80159b8:	46bd      	mov	sp, r7
 80159ba:	bc80      	pop	{r7}
 80159bc:	4770      	bx	lr

080159be <RegionCommonChanVerifyDr>:

bool RegionCommonChanVerifyDr( uint8_t nbChannels, uint16_t* channelsMask, int8_t dr, int8_t minDr, int8_t maxDr, ChannelParams_t* channels )
{
 80159be:	b580      	push	{r7, lr}
 80159c0:	b084      	sub	sp, #16
 80159c2:	af00      	add	r7, sp, #0
 80159c4:	6039      	str	r1, [r7, #0]
 80159c6:	4611      	mov	r1, r2
 80159c8:	461a      	mov	r2, r3
 80159ca:	4603      	mov	r3, r0
 80159cc:	71fb      	strb	r3, [r7, #7]
 80159ce:	460b      	mov	r3, r1
 80159d0:	71bb      	strb	r3, [r7, #6]
 80159d2:	4613      	mov	r3, r2
 80159d4:	717b      	strb	r3, [r7, #5]
    if( RegionCommonValueInRange( dr, minDr, maxDr ) == 0 )
 80159d6:	f997 2018 	ldrsb.w	r2, [r7, #24]
 80159da:	f997 1005 	ldrsb.w	r1, [r7, #5]
 80159de:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80159e2:	4618      	mov	r0, r3
 80159e4:	f000 f85d 	bl	8015aa2 <RegionCommonValueInRange>
 80159e8:	4603      	mov	r3, r0
 80159ea:	2b00      	cmp	r3, #0
 80159ec:	d101      	bne.n	80159f2 <RegionCommonChanVerifyDr+0x34>
    {
        return false;
 80159ee:	2300      	movs	r3, #0
 80159f0:	e053      	b.n	8015a9a <RegionCommonChanVerifyDr+0xdc>
    }

    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 80159f2:	2300      	movs	r3, #0
 80159f4:	73fb      	strb	r3, [r7, #15]
 80159f6:	2300      	movs	r3, #0
 80159f8:	73bb      	strb	r3, [r7, #14]
 80159fa:	e049      	b.n	8015a90 <RegionCommonChanVerifyDr+0xd2>
    {
        for( uint8_t j = 0; j < 16; j++ )
 80159fc:	2300      	movs	r3, #0
 80159fe:	737b      	strb	r3, [r7, #13]
 8015a00:	e03d      	b.n	8015a7e <RegionCommonChanVerifyDr+0xc0>
        {
            if( ( ( channelsMask[k] & ( 1 << j ) ) != 0 ) )
 8015a02:	7bbb      	ldrb	r3, [r7, #14]
 8015a04:	005b      	lsls	r3, r3, #1
 8015a06:	683a      	ldr	r2, [r7, #0]
 8015a08:	4413      	add	r3, r2
 8015a0a:	881b      	ldrh	r3, [r3, #0]
 8015a0c:	461a      	mov	r2, r3
 8015a0e:	7b7b      	ldrb	r3, [r7, #13]
 8015a10:	fa42 f303 	asr.w	r3, r2, r3
 8015a14:	f003 0301 	and.w	r3, r3, #1
 8015a18:	2b00      	cmp	r3, #0
 8015a1a:	d02d      	beq.n	8015a78 <RegionCommonChanVerifyDr+0xba>
            {// Check datarate validity for enabled channels
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 8015a1c:	7bfa      	ldrb	r2, [r7, #15]
 8015a1e:	7b7b      	ldrb	r3, [r7, #13]
 8015a20:	4413      	add	r3, r2
 8015a22:	461a      	mov	r2, r3
 8015a24:	4613      	mov	r3, r2
 8015a26:	005b      	lsls	r3, r3, #1
 8015a28:	4413      	add	r3, r2
 8015a2a:	009b      	lsls	r3, r3, #2
 8015a2c:	461a      	mov	r2, r3
 8015a2e:	69fb      	ldr	r3, [r7, #28]
 8015a30:	4413      	add	r3, r2
 8015a32:	7a1b      	ldrb	r3, [r3, #8]
 8015a34:	f343 0303 	sbfx	r3, r3, #0, #4
 8015a38:	b25b      	sxtb	r3, r3
 8015a3a:	f003 030f 	and.w	r3, r3, #15
 8015a3e:	b259      	sxtb	r1, r3
                                                  ( channels[i + j].DrRange.Fields.Max & 0x0F ) ) == 1 )
 8015a40:	7bfa      	ldrb	r2, [r7, #15]
 8015a42:	7b7b      	ldrb	r3, [r7, #13]
 8015a44:	4413      	add	r3, r2
 8015a46:	461a      	mov	r2, r3
 8015a48:	4613      	mov	r3, r2
 8015a4a:	005b      	lsls	r3, r3, #1
 8015a4c:	4413      	add	r3, r2
 8015a4e:	009b      	lsls	r3, r3, #2
 8015a50:	461a      	mov	r2, r3
 8015a52:	69fb      	ldr	r3, [r7, #28]
 8015a54:	4413      	add	r3, r2
 8015a56:	7a1b      	ldrb	r3, [r3, #8]
 8015a58:	f343 1303 	sbfx	r3, r3, #4, #4
 8015a5c:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 8015a5e:	f003 030f 	and.w	r3, r3, #15
 8015a62:	b25a      	sxtb	r2, r3
 8015a64:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8015a68:	4618      	mov	r0, r3
 8015a6a:	f000 f81a 	bl	8015aa2 <RegionCommonValueInRange>
 8015a6e:	4603      	mov	r3, r0
 8015a70:	2b01      	cmp	r3, #1
 8015a72:	d101      	bne.n	8015a78 <RegionCommonChanVerifyDr+0xba>
                {
                    // At least 1 channel has been found we can return OK.
                    return true;
 8015a74:	2301      	movs	r3, #1
 8015a76:	e010      	b.n	8015a9a <RegionCommonChanVerifyDr+0xdc>
        for( uint8_t j = 0; j < 16; j++ )
 8015a78:	7b7b      	ldrb	r3, [r7, #13]
 8015a7a:	3301      	adds	r3, #1
 8015a7c:	737b      	strb	r3, [r7, #13]
 8015a7e:	7b7b      	ldrb	r3, [r7, #13]
 8015a80:	2b0f      	cmp	r3, #15
 8015a82:	d9be      	bls.n	8015a02 <RegionCommonChanVerifyDr+0x44>
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 8015a84:	7bfb      	ldrb	r3, [r7, #15]
 8015a86:	3310      	adds	r3, #16
 8015a88:	73fb      	strb	r3, [r7, #15]
 8015a8a:	7bbb      	ldrb	r3, [r7, #14]
 8015a8c:	3301      	adds	r3, #1
 8015a8e:	73bb      	strb	r3, [r7, #14]
 8015a90:	7bfa      	ldrb	r2, [r7, #15]
 8015a92:	79fb      	ldrb	r3, [r7, #7]
 8015a94:	429a      	cmp	r2, r3
 8015a96:	d3b1      	bcc.n	80159fc <RegionCommonChanVerifyDr+0x3e>
                }
            }
        }
    }
    return false;
 8015a98:	2300      	movs	r3, #0
}
 8015a9a:	4618      	mov	r0, r3
 8015a9c:	3710      	adds	r7, #16
 8015a9e:	46bd      	mov	sp, r7
 8015aa0:	bd80      	pop	{r7, pc}

08015aa2 <RegionCommonValueInRange>:

uint8_t RegionCommonValueInRange( int8_t value, int8_t min, int8_t max )
{
 8015aa2:	b480      	push	{r7}
 8015aa4:	b083      	sub	sp, #12
 8015aa6:	af00      	add	r7, sp, #0
 8015aa8:	4603      	mov	r3, r0
 8015aaa:	71fb      	strb	r3, [r7, #7]
 8015aac:	460b      	mov	r3, r1
 8015aae:	71bb      	strb	r3, [r7, #6]
 8015ab0:	4613      	mov	r3, r2
 8015ab2:	717b      	strb	r3, [r7, #5]
    if( ( value >= min ) && ( value <= max ) )
 8015ab4:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8015ab8:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8015abc:	429a      	cmp	r2, r3
 8015abe:	db07      	blt.n	8015ad0 <RegionCommonValueInRange+0x2e>
 8015ac0:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8015ac4:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8015ac8:	429a      	cmp	r2, r3
 8015aca:	dc01      	bgt.n	8015ad0 <RegionCommonValueInRange+0x2e>
    {
        return 1;
 8015acc:	2301      	movs	r3, #1
 8015ace:	e000      	b.n	8015ad2 <RegionCommonValueInRange+0x30>
    }
    return 0;
 8015ad0:	2300      	movs	r3, #0
}
 8015ad2:	4618      	mov	r0, r3
 8015ad4:	370c      	adds	r7, #12
 8015ad6:	46bd      	mov	sp, r7
 8015ad8:	bc80      	pop	{r7}
 8015ada:	4770      	bx	lr

08015adc <RegionCommonChanDisable>:

bool RegionCommonChanDisable( uint16_t* channelsMask, uint8_t id, uint8_t maxChannels )
{
 8015adc:	b480      	push	{r7}
 8015ade:	b085      	sub	sp, #20
 8015ae0:	af00      	add	r7, sp, #0
 8015ae2:	6078      	str	r0, [r7, #4]
 8015ae4:	460b      	mov	r3, r1
 8015ae6:	70fb      	strb	r3, [r7, #3]
 8015ae8:	4613      	mov	r3, r2
 8015aea:	70bb      	strb	r3, [r7, #2]
    uint8_t index = id / 16;
 8015aec:	78fb      	ldrb	r3, [r7, #3]
 8015aee:	091b      	lsrs	r3, r3, #4
 8015af0:	73fb      	strb	r3, [r7, #15]

    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
 8015af2:	78bb      	ldrb	r3, [r7, #2]
 8015af4:	091b      	lsrs	r3, r3, #4
 8015af6:	b2db      	uxtb	r3, r3
 8015af8:	7bfa      	ldrb	r2, [r7, #15]
 8015afa:	429a      	cmp	r2, r3
 8015afc:	d803      	bhi.n	8015b06 <RegionCommonChanDisable+0x2a>
 8015afe:	78fa      	ldrb	r2, [r7, #3]
 8015b00:	78bb      	ldrb	r3, [r7, #2]
 8015b02:	429a      	cmp	r2, r3
 8015b04:	d301      	bcc.n	8015b0a <RegionCommonChanDisable+0x2e>
    {
        return false;
 8015b06:	2300      	movs	r3, #0
 8015b08:	e017      	b.n	8015b3a <RegionCommonChanDisable+0x5e>
    }

    // Deactivate channel
    channelsMask[index] &= ~( 1 << ( id % 16 ) );
 8015b0a:	7bfb      	ldrb	r3, [r7, #15]
 8015b0c:	005b      	lsls	r3, r3, #1
 8015b0e:	687a      	ldr	r2, [r7, #4]
 8015b10:	4413      	add	r3, r2
 8015b12:	881b      	ldrh	r3, [r3, #0]
 8015b14:	b21a      	sxth	r2, r3
 8015b16:	78fb      	ldrb	r3, [r7, #3]
 8015b18:	f003 030f 	and.w	r3, r3, #15
 8015b1c:	2101      	movs	r1, #1
 8015b1e:	fa01 f303 	lsl.w	r3, r1, r3
 8015b22:	b21b      	sxth	r3, r3
 8015b24:	43db      	mvns	r3, r3
 8015b26:	b21b      	sxth	r3, r3
 8015b28:	4013      	ands	r3, r2
 8015b2a:	b219      	sxth	r1, r3
 8015b2c:	7bfb      	ldrb	r3, [r7, #15]
 8015b2e:	005b      	lsls	r3, r3, #1
 8015b30:	687a      	ldr	r2, [r7, #4]
 8015b32:	4413      	add	r3, r2
 8015b34:	b28a      	uxth	r2, r1
 8015b36:	801a      	strh	r2, [r3, #0]

    return true;
 8015b38:	2301      	movs	r3, #1
}
 8015b3a:	4618      	mov	r0, r3
 8015b3c:	3714      	adds	r7, #20
 8015b3e:	46bd      	mov	sp, r7
 8015b40:	bc80      	pop	{r7}
 8015b42:	4770      	bx	lr

08015b44 <RegionCommonCountChannels>:

uint8_t RegionCommonCountChannels( uint16_t* channelsMask, uint8_t startIdx, uint8_t stopIdx )
{
 8015b44:	b580      	push	{r7, lr}
 8015b46:	b084      	sub	sp, #16
 8015b48:	af00      	add	r7, sp, #0
 8015b4a:	6078      	str	r0, [r7, #4]
 8015b4c:	460b      	mov	r3, r1
 8015b4e:	70fb      	strb	r3, [r7, #3]
 8015b50:	4613      	mov	r3, r2
 8015b52:	70bb      	strb	r3, [r7, #2]
    uint8_t nbChannels = 0;
 8015b54:	2300      	movs	r3, #0
 8015b56:	73fb      	strb	r3, [r7, #15]

    if( channelsMask == NULL )
 8015b58:	687b      	ldr	r3, [r7, #4]
 8015b5a:	2b00      	cmp	r3, #0
 8015b5c:	d101      	bne.n	8015b62 <RegionCommonCountChannels+0x1e>
    {
        return 0;
 8015b5e:	2300      	movs	r3, #0
 8015b60:	e018      	b.n	8015b94 <RegionCommonCountChannels+0x50>
    }

    for( uint8_t i = startIdx; i < stopIdx; i++ )
 8015b62:	78fb      	ldrb	r3, [r7, #3]
 8015b64:	73bb      	strb	r3, [r7, #14]
 8015b66:	e010      	b.n	8015b8a <RegionCommonCountChannels+0x46>
    {
        nbChannels += CountChannels( channelsMask[i], 16 );
 8015b68:	7bbb      	ldrb	r3, [r7, #14]
 8015b6a:	005b      	lsls	r3, r3, #1
 8015b6c:	687a      	ldr	r2, [r7, #4]
 8015b6e:	4413      	add	r3, r2
 8015b70:	881b      	ldrh	r3, [r3, #0]
 8015b72:	2110      	movs	r1, #16
 8015b74:	4618      	mov	r0, r3
 8015b76:	f7ff fef9 	bl	801596c <CountChannels>
 8015b7a:	4603      	mov	r3, r0
 8015b7c:	461a      	mov	r2, r3
 8015b7e:	7bfb      	ldrb	r3, [r7, #15]
 8015b80:	4413      	add	r3, r2
 8015b82:	73fb      	strb	r3, [r7, #15]
    for( uint8_t i = startIdx; i < stopIdx; i++ )
 8015b84:	7bbb      	ldrb	r3, [r7, #14]
 8015b86:	3301      	adds	r3, #1
 8015b88:	73bb      	strb	r3, [r7, #14]
 8015b8a:	7bba      	ldrb	r2, [r7, #14]
 8015b8c:	78bb      	ldrb	r3, [r7, #2]
 8015b8e:	429a      	cmp	r2, r3
 8015b90:	d3ea      	bcc.n	8015b68 <RegionCommonCountChannels+0x24>
    }

    return nbChannels;
 8015b92:	7bfb      	ldrb	r3, [r7, #15]
}
 8015b94:	4618      	mov	r0, r3
 8015b96:	3710      	adds	r7, #16
 8015b98:	46bd      	mov	sp, r7
 8015b9a:	bd80      	pop	{r7, pc}

08015b9c <RegionCommonChanMaskCopy>:

void RegionCommonChanMaskCopy( uint16_t* channelsMaskDest, uint16_t* channelsMaskSrc, uint8_t len )
{
 8015b9c:	b480      	push	{r7}
 8015b9e:	b087      	sub	sp, #28
 8015ba0:	af00      	add	r7, sp, #0
 8015ba2:	60f8      	str	r0, [r7, #12]
 8015ba4:	60b9      	str	r1, [r7, #8]
 8015ba6:	4613      	mov	r3, r2
 8015ba8:	71fb      	strb	r3, [r7, #7]
    if( ( channelsMaskDest != NULL ) && ( channelsMaskSrc != NULL ) )
 8015baa:	68fb      	ldr	r3, [r7, #12]
 8015bac:	2b00      	cmp	r3, #0
 8015bae:	d016      	beq.n	8015bde <RegionCommonChanMaskCopy+0x42>
 8015bb0:	68bb      	ldr	r3, [r7, #8]
 8015bb2:	2b00      	cmp	r3, #0
 8015bb4:	d013      	beq.n	8015bde <RegionCommonChanMaskCopy+0x42>
    {
        for( uint8_t i = 0; i < len; i++ )
 8015bb6:	2300      	movs	r3, #0
 8015bb8:	75fb      	strb	r3, [r7, #23]
 8015bba:	e00c      	b.n	8015bd6 <RegionCommonChanMaskCopy+0x3a>
        {
            channelsMaskDest[i] = channelsMaskSrc[i];
 8015bbc:	7dfb      	ldrb	r3, [r7, #23]
 8015bbe:	005b      	lsls	r3, r3, #1
 8015bc0:	68ba      	ldr	r2, [r7, #8]
 8015bc2:	441a      	add	r2, r3
 8015bc4:	7dfb      	ldrb	r3, [r7, #23]
 8015bc6:	005b      	lsls	r3, r3, #1
 8015bc8:	68f9      	ldr	r1, [r7, #12]
 8015bca:	440b      	add	r3, r1
 8015bcc:	8812      	ldrh	r2, [r2, #0]
 8015bce:	801a      	strh	r2, [r3, #0]
        for( uint8_t i = 0; i < len; i++ )
 8015bd0:	7dfb      	ldrb	r3, [r7, #23]
 8015bd2:	3301      	adds	r3, #1
 8015bd4:	75fb      	strb	r3, [r7, #23]
 8015bd6:	7dfa      	ldrb	r2, [r7, #23]
 8015bd8:	79fb      	ldrb	r3, [r7, #7]
 8015bda:	429a      	cmp	r2, r3
 8015bdc:	d3ee      	bcc.n	8015bbc <RegionCommonChanMaskCopy+0x20>
        }
    }
}
 8015bde:	bf00      	nop
 8015be0:	371c      	adds	r7, #28
 8015be2:	46bd      	mov	sp, r7
 8015be4:	bc80      	pop	{r7}
 8015be6:	4770      	bx	lr

08015be8 <RegionCommonSetBandTxDone>:

void RegionCommonSetBandTxDone( Band_t* band, TimerTime_t lastTxAirTime, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 8015be8:	b082      	sub	sp, #8
 8015bea:	b580      	push	{r7, lr}
 8015bec:	b086      	sub	sp, #24
 8015bee:	af00      	add	r7, sp, #0
 8015bf0:	60f8      	str	r0, [r7, #12]
 8015bf2:	60b9      	str	r1, [r7, #8]
 8015bf4:	627b      	str	r3, [r7, #36]	@ 0x24
 8015bf6:	4613      	mov	r3, r2
 8015bf8:	71fb      	strb	r3, [r7, #7]
    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    uint16_t dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 8015bfa:	79f9      	ldrb	r1, [r7, #7]
 8015bfc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8015c00:	cb0c      	ldmia	r3, {r2, r3}
 8015c02:	68f8      	ldr	r0, [r7, #12]
 8015c04:	f7ff fd8c 	bl	8015720 <GetDutyCycle>
 8015c08:	4603      	mov	r3, r0
 8015c0a:	82fb      	strh	r3, [r7, #22]

    // Reduce with transmission time
    if( band->TimeCredits > ( lastTxAirTime * dutyCycle ) )
 8015c0c:	68fb      	ldr	r3, [r7, #12]
 8015c0e:	68da      	ldr	r2, [r3, #12]
 8015c10:	8afb      	ldrh	r3, [r7, #22]
 8015c12:	68b9      	ldr	r1, [r7, #8]
 8015c14:	fb01 f303 	mul.w	r3, r1, r3
 8015c18:	429a      	cmp	r2, r3
 8015c1a:	d909      	bls.n	8015c30 <RegionCommonSetBandTxDone+0x48>
    {
        // Reduce time credits by the time of air
        band->TimeCredits -= ( lastTxAirTime * dutyCycle );
 8015c1c:	68fb      	ldr	r3, [r7, #12]
 8015c1e:	68da      	ldr	r2, [r3, #12]
 8015c20:	8afb      	ldrh	r3, [r7, #22]
 8015c22:	68b9      	ldr	r1, [r7, #8]
 8015c24:	fb01 f303 	mul.w	r3, r1, r3
 8015c28:	1ad2      	subs	r2, r2, r3
 8015c2a:	68fb      	ldr	r3, [r7, #12]
 8015c2c:	60da      	str	r2, [r3, #12]
    }
    else
    {
        band->TimeCredits = 0;
    }
}
 8015c2e:	e002      	b.n	8015c36 <RegionCommonSetBandTxDone+0x4e>
        band->TimeCredits = 0;
 8015c30:	68fb      	ldr	r3, [r7, #12]
 8015c32:	2200      	movs	r2, #0
 8015c34:	60da      	str	r2, [r3, #12]
}
 8015c36:	bf00      	nop
 8015c38:	3718      	adds	r7, #24
 8015c3a:	46bd      	mov	sp, r7
 8015c3c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8015c40:	b002      	add	sp, #8
 8015c42:	4770      	bx	lr

08015c44 <RegionCommonUpdateBandTimeOff>:

TimerTime_t RegionCommonUpdateBandTimeOff( bool joined, Band_t* bands,
                                           uint8_t nbBands, bool dutyCycleEnabled,
                                           bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                           TimerTime_t expectedTimeOnAir )
{
 8015c44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015c46:	b08f      	sub	sp, #60	@ 0x3c
 8015c48:	af04      	add	r7, sp, #16
 8015c4a:	6039      	str	r1, [r7, #0]
 8015c4c:	4611      	mov	r1, r2
 8015c4e:	461a      	mov	r2, r3
 8015c50:	4603      	mov	r3, r0
 8015c52:	71fb      	strb	r3, [r7, #7]
 8015c54:	460b      	mov	r3, r1
 8015c56:	71bb      	strb	r3, [r7, #6]
 8015c58:	4613      	mov	r3, r2
 8015c5a:	717b      	strb	r3, [r7, #5]
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
 8015c5c:	f04f 33ff 	mov.w	r3, #4294967295
 8015c60:	627b      	str	r3, [r7, #36]	@ 0x24
    TimerTime_t currentTime = TimerGetCurrentTime( );
 8015c62:	f004 ff37 	bl	801aad4 <UTIL_TIMER_GetCurrentTime>
 8015c66:	61f8      	str	r0, [r7, #28]
    TimerTime_t creditCosts = 0;
 8015c68:	2300      	movs	r3, #0
 8015c6a:	61bb      	str	r3, [r7, #24]
    uint16_t dutyCycle = 1;
 8015c6c:	2301      	movs	r3, #1
 8015c6e:	82fb      	strh	r3, [r7, #22]
    uint8_t validBands = 0;
 8015c70:	2300      	movs	r3, #0
 8015c72:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

    for( uint8_t i = 0; i < nbBands; i++ )
 8015c76:	2300      	movs	r3, #0
 8015c78:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8015c7c:	e0ba      	b.n	8015df4 <RegionCommonUpdateBandTimeOff+0x1b0>
        dutyCycle = UpdateTimeCredits( &bands[i], joined, dutyCycleEnabled,
                                       lastTxIsJoinRequest, elapsedTimeSinceStartup,
                                       currentTime, elapsedTime );
#else
        // Synchronization of bands and credits
        dutyCycle = UpdateTimeCredits( &bands[i], joined, dutyCycleEnabled,
 8015c7e:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8015c82:	4613      	mov	r3, r2
 8015c84:	005b      	lsls	r3, r3, #1
 8015c86:	4413      	add	r3, r2
 8015c88:	00db      	lsls	r3, r3, #3
 8015c8a:	461a      	mov	r2, r3
 8015c8c:	683b      	ldr	r3, [r7, #0]
 8015c8e:	189c      	adds	r4, r3, r2
 8015c90:	f897 6040 	ldrb.w	r6, [r7, #64]	@ 0x40
 8015c94:	797a      	ldrb	r2, [r7, #5]
 8015c96:	79fd      	ldrb	r5, [r7, #7]
 8015c98:	69fb      	ldr	r3, [r7, #28]
 8015c9a:	9302      	str	r3, [sp, #8]
 8015c9c:	46ec      	mov	ip, sp
 8015c9e:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8015ca2:	e893 0003 	ldmia.w	r3, {r0, r1}
 8015ca6:	e88c 0003 	stmia.w	ip, {r0, r1}
 8015caa:	4633      	mov	r3, r6
 8015cac:	4629      	mov	r1, r5
 8015cae:	4620      	mov	r0, r4
 8015cb0:	f7ff fe22 	bl	80158f8 <UpdateTimeCredits>
 8015cb4:	4603      	mov	r3, r0
 8015cb6:	82fb      	strh	r3, [r7, #22]
                                       currentTime );
#endif

        // Calculate the credit costs for the next transmission
        // with the duty cycle and the expected time on air
        creditCosts = expectedTimeOnAir * dutyCycle;
 8015cb8:	8afa      	ldrh	r2, [r7, #22]
 8015cba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8015cbc:	fb02 f303 	mul.w	r3, r2, r3
 8015cc0:	61bb      	str	r3, [r7, #24]

        // Check if the band is ready for transmission. Its ready,
        // when the duty cycle is off, or the TimeCredits of the band
        // is higher than the credit costs for the transmission.
        if( ( bands[i].TimeCredits > creditCosts ) ||
 8015cc2:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8015cc6:	4613      	mov	r3, r2
 8015cc8:	005b      	lsls	r3, r3, #1
 8015cca:	4413      	add	r3, r2
 8015ccc:	00db      	lsls	r3, r3, #3
 8015cce:	461a      	mov	r2, r3
 8015cd0:	683b      	ldr	r3, [r7, #0]
 8015cd2:	4413      	add	r3, r2
 8015cd4:	68db      	ldr	r3, [r3, #12]
 8015cd6:	69ba      	ldr	r2, [r7, #24]
 8015cd8:	429a      	cmp	r2, r3
 8015cda:	d308      	bcc.n	8015cee <RegionCommonUpdateBandTimeOff+0xaa>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 8015cdc:	797b      	ldrb	r3, [r7, #5]
 8015cde:	f083 0301 	eor.w	r3, r3, #1
 8015ce2:	b2db      	uxtb	r3, r3
        if( ( bands[i].TimeCredits > creditCosts ) ||
 8015ce4:	2b00      	cmp	r3, #0
 8015ce6:	d013      	beq.n	8015d10 <RegionCommonUpdateBandTimeOff+0xcc>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 8015ce8:	79fb      	ldrb	r3, [r7, #7]
 8015cea:	2b00      	cmp	r3, #0
 8015cec:	d010      	beq.n	8015d10 <RegionCommonUpdateBandTimeOff+0xcc>
        {
            bands[i].ReadyForTransmission = true;
 8015cee:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8015cf2:	4613      	mov	r3, r2
 8015cf4:	005b      	lsls	r3, r3, #1
 8015cf6:	4413      	add	r3, r2
 8015cf8:	00db      	lsls	r3, r3, #3
 8015cfa:	461a      	mov	r2, r3
 8015cfc:	683b      	ldr	r3, [r7, #0]
 8015cfe:	4413      	add	r3, r2
 8015d00:	2201      	movs	r2, #1
 8015d02:	751a      	strb	r2, [r3, #20]
            // This band is a potential candidate for an
            // upcoming transmission, so increase the counter.
            validBands++;
 8015d04:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8015d08:	3301      	adds	r3, #1
 8015d0a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8015d0e:	e06c      	b.n	8015dea <RegionCommonUpdateBandTimeOff+0x1a6>
        }
        else
        {
            // In this case, the band has not enough credits
            // for the next transmission.
            bands[i].ReadyForTransmission = false;
 8015d10:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8015d14:	4613      	mov	r3, r2
 8015d16:	005b      	lsls	r3, r3, #1
 8015d18:	4413      	add	r3, r2
 8015d1a:	00db      	lsls	r3, r3, #3
 8015d1c:	461a      	mov	r2, r3
 8015d1e:	683b      	ldr	r3, [r7, #0]
 8015d20:	4413      	add	r3, r2
 8015d22:	2200      	movs	r2, #0
 8015d24:	751a      	strb	r2, [r3, #20]

            if( bands[i].MaxTimeCredits > creditCosts )
 8015d26:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8015d2a:	4613      	mov	r3, r2
 8015d2c:	005b      	lsls	r3, r3, #1
 8015d2e:	4413      	add	r3, r2
 8015d30:	00db      	lsls	r3, r3, #3
 8015d32:	461a      	mov	r2, r3
 8015d34:	683b      	ldr	r3, [r7, #0]
 8015d36:	4413      	add	r3, r2
 8015d38:	691b      	ldr	r3, [r3, #16]
 8015d3a:	69ba      	ldr	r2, [r7, #24]
 8015d3c:	429a      	cmp	r2, r3
 8015d3e:	d215      	bcs.n	8015d6c <RegionCommonUpdateBandTimeOff+0x128>
                {
                    observationTimeDiff = bands[i].LastMaxCreditAssignTime - elapsedTime;
                }
                minTimeToWait = MIN( minTimeToWait, observationTimeDiff );
#else
                minTimeToWait = MIN( minTimeToWait, ( creditCosts - bands[i].TimeCredits ) );
 8015d40:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8015d44:	4613      	mov	r3, r2
 8015d46:	005b      	lsls	r3, r3, #1
 8015d48:	4413      	add	r3, r2
 8015d4a:	00db      	lsls	r3, r3, #3
 8015d4c:	461a      	mov	r2, r3
 8015d4e:	683b      	ldr	r3, [r7, #0]
 8015d50:	4413      	add	r3, r2
 8015d52:	68db      	ldr	r3, [r3, #12]
 8015d54:	69ba      	ldr	r2, [r7, #24]
 8015d56:	1ad3      	subs	r3, r2, r3
 8015d58:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8015d5a:	4293      	cmp	r3, r2
 8015d5c:	bf28      	it	cs
 8015d5e:	4613      	movcs	r3, r2
 8015d60:	627b      	str	r3, [r7, #36]	@ 0x24
#endif

                // This band is a potential candidate for an
                // upcoming transmission (even if its time credits are not enough
                // at the moment), so increase the counter.
                validBands++;
 8015d62:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8015d66:	3301      	adds	r3, #1
 8015d68:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
            }

#if (defined( REGION_VERSION ) && (( REGION_VERSION == 0x01010003 ) || ( REGION_VERSION == 0x02010001 )))
            // Apply a special calculation if the device is not joined.
            if( joined == false )
 8015d6c:	79fb      	ldrb	r3, [r7, #7]
 8015d6e:	f083 0301 	eor.w	r3, r3, #1
 8015d72:	b2db      	uxtb	r3, r3
 8015d74:	2b00      	cmp	r3, #0
 8015d76:	d038      	beq.n	8015dea <RegionCommonUpdateBandTimeOff+0x1a6>
            {
                SysTime_t backoffTimeRange = {
 8015d78:	2300      	movs	r3, #0
 8015d7a:	60fb      	str	r3, [r7, #12]
 8015d7c:	2300      	movs	r3, #0
 8015d7e:	823b      	strh	r3, [r7, #16]
                    .Seconds    = 0,
                    .SubSeconds = 0,
                };
                // Get the backoff time range based on the duty cycle definition
                if( dutyCycle == BACKOFF_DC_1_HOUR )
 8015d80:	8afb      	ldrh	r3, [r7, #22]
 8015d82:	2b64      	cmp	r3, #100	@ 0x64
 8015d84:	d103      	bne.n	8015d8e <RegionCommonUpdateBandTimeOff+0x14a>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_1_HOUR_IN_S;
 8015d86:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 8015d8a:	60fb      	str	r3, [r7, #12]
 8015d8c:	e009      	b.n	8015da2 <RegionCommonUpdateBandTimeOff+0x15e>
                }
                else if( dutyCycle == BACKOFF_DC_10_HOURS )
 8015d8e:	8afb      	ldrh	r3, [r7, #22]
 8015d90:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8015d94:	d103      	bne.n	8015d9e <RegionCommonUpdateBandTimeOff+0x15a>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_10_HOURS_IN_S;
 8015d96:	f649 23b0 	movw	r3, #39600	@ 0x9ab0
 8015d9a:	60fb      	str	r3, [r7, #12]
 8015d9c:	e001      	b.n	8015da2 <RegionCommonUpdateBandTimeOff+0x15e>
                }
                else
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 8015d9e:	4b1e      	ldr	r3, [pc, #120]	@ (8015e18 <RegionCommonUpdateBandTimeOff+0x1d4>)
 8015da0:	60fb      	str	r3, [r7, #12]
                }
                // Calculate the time to wait.
                if( elapsedTimeSinceStartup.Seconds > BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 8015da2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8015da4:	4a1c      	ldr	r2, [pc, #112]	@ (8015e18 <RegionCommonUpdateBandTimeOff+0x1d4>)
 8015da6:	4293      	cmp	r3, r2
 8015da8:	d90e      	bls.n	8015dc8 <RegionCommonUpdateBandTimeOff+0x184>
                {
                    backoffTimeRange.Seconds += BACKOFF_24_HOURS_IN_S * ( ( ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S ) + 1 );
 8015daa:	68fa      	ldr	r2, [r7, #12]
 8015dac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8015dae:	f5a3 33f6 	sub.w	r3, r3, #125952	@ 0x1ec00
 8015db2:	3b30      	subs	r3, #48	@ 0x30
 8015db4:	4919      	ldr	r1, [pc, #100]	@ (8015e1c <RegionCommonUpdateBandTimeOff+0x1d8>)
 8015db6:	fba1 1303 	umull	r1, r3, r1, r3
 8015dba:	0c1b      	lsrs	r3, r3, #16
 8015dbc:	3301      	adds	r3, #1
 8015dbe:	4918      	ldr	r1, [pc, #96]	@ (8015e20 <RegionCommonUpdateBandTimeOff+0x1dc>)
 8015dc0:	fb01 f303 	mul.w	r3, r1, r3
 8015dc4:	4413      	add	r3, r2
 8015dc6:	60fb      	str	r3, [r7, #12]
                }
                // Calculate the time difference between now and the next range
                backoffTimeRange  = SysTimeSub( backoffTimeRange, elapsedTimeSinceStartup );
 8015dc8:	f107 000c 	add.w	r0, r7, #12
 8015dcc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8015dce:	9300      	str	r3, [sp, #0]
 8015dd0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8015dd2:	f107 020c 	add.w	r2, r7, #12
 8015dd6:	ca06      	ldmia	r2, {r1, r2}
 8015dd8:	f004 f815 	bl	8019e06 <SysTimeSub>
                minTimeToWait = SysTimeToMs( backoffTimeRange );
 8015ddc:	f107 030c 	add.w	r3, r7, #12
 8015de0:	e893 0003 	ldmia.w	r3, {r0, r1}
 8015de4:	f004 f8ce 	bl	8019f84 <SysTimeToMs>
 8015de8:	6278      	str	r0, [r7, #36]	@ 0x24
    for( uint8_t i = 0; i < nbBands; i++ )
 8015dea:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8015dee:	3301      	adds	r3, #1
 8015df0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8015df4:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8015df8:	79bb      	ldrb	r3, [r7, #6]
 8015dfa:	429a      	cmp	r2, r3
 8015dfc:	f4ff af3f 	bcc.w	8015c7e <RegionCommonUpdateBandTimeOff+0x3a>
#endif

        }
    }

    if( validBands == 0 )
 8015e00:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8015e04:	2b00      	cmp	r3, #0
 8015e06:	d102      	bne.n	8015e0e <RegionCommonUpdateBandTimeOff+0x1ca>
    {
        // There is no valid band available to handle a transmission
        // in the given DUTY_CYCLE_TIME_PERIOD.
        return TIMERTIME_T_MAX;
 8015e08:	f04f 33ff 	mov.w	r3, #4294967295
 8015e0c:	e000      	b.n	8015e10 <RegionCommonUpdateBandTimeOff+0x1cc>
    }
    return minTimeToWait;
 8015e0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8015e10:	4618      	mov	r0, r3
 8015e12:	372c      	adds	r7, #44	@ 0x2c
 8015e14:	46bd      	mov	sp, r7
 8015e16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015e18:	0001ec30 	.word	0x0001ec30
 8015e1c:	c22e4507 	.word	0xc22e4507
 8015e20:	00015180 	.word	0x00015180

08015e24 <RegionCommonParseLinkAdrReq>:

uint8_t RegionCommonParseLinkAdrReq( uint8_t* payload, RegionCommonLinkAdrParams_t* linkAdrParams )
{
 8015e24:	b480      	push	{r7}
 8015e26:	b085      	sub	sp, #20
 8015e28:	af00      	add	r7, sp, #0
 8015e2a:	6078      	str	r0, [r7, #4]
 8015e2c:	6039      	str	r1, [r7, #0]
    uint8_t retIndex = 0;
 8015e2e:	2300      	movs	r3, #0
 8015e30:	73fb      	strb	r3, [r7, #15]

    if( payload[0] == SRV_MAC_LINK_ADR_REQ )
 8015e32:	687b      	ldr	r3, [r7, #4]
 8015e34:	781b      	ldrb	r3, [r3, #0]
 8015e36:	2b03      	cmp	r3, #3
 8015e38:	d13f      	bne.n	8015eba <RegionCommonParseLinkAdrReq+0x96>
    {
        // Parse datarate and tx power
        linkAdrParams->Datarate = payload[1];
 8015e3a:	687b      	ldr	r3, [r7, #4]
 8015e3c:	3301      	adds	r3, #1
 8015e3e:	781b      	ldrb	r3, [r3, #0]
 8015e40:	b25a      	sxtb	r2, r3
 8015e42:	683b      	ldr	r3, [r7, #0]
 8015e44:	705a      	strb	r2, [r3, #1]
        linkAdrParams->TxPower = linkAdrParams->Datarate & 0x0F;
 8015e46:	683b      	ldr	r3, [r7, #0]
 8015e48:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015e4c:	f003 030f 	and.w	r3, r3, #15
 8015e50:	b25a      	sxtb	r2, r3
 8015e52:	683b      	ldr	r3, [r7, #0]
 8015e54:	709a      	strb	r2, [r3, #2]
        linkAdrParams->Datarate = ( linkAdrParams->Datarate >> 4 ) & 0x0F;
 8015e56:	683b      	ldr	r3, [r7, #0]
 8015e58:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015e5c:	b2db      	uxtb	r3, r3
 8015e5e:	091b      	lsrs	r3, r3, #4
 8015e60:	b2db      	uxtb	r3, r3
 8015e62:	b25a      	sxtb	r2, r3
 8015e64:	683b      	ldr	r3, [r7, #0]
 8015e66:	705a      	strb	r2, [r3, #1]
        // Parse ChMask
        linkAdrParams->ChMask = ( uint16_t )payload[2];
 8015e68:	687b      	ldr	r3, [r7, #4]
 8015e6a:	3302      	adds	r3, #2
 8015e6c:	781b      	ldrb	r3, [r3, #0]
 8015e6e:	461a      	mov	r2, r3
 8015e70:	683b      	ldr	r3, [r7, #0]
 8015e72:	809a      	strh	r2, [r3, #4]
        linkAdrParams->ChMask |= ( uint16_t )payload[3] << 8;
 8015e74:	683b      	ldr	r3, [r7, #0]
 8015e76:	889b      	ldrh	r3, [r3, #4]
 8015e78:	b21a      	sxth	r2, r3
 8015e7a:	687b      	ldr	r3, [r7, #4]
 8015e7c:	3303      	adds	r3, #3
 8015e7e:	781b      	ldrb	r3, [r3, #0]
 8015e80:	021b      	lsls	r3, r3, #8
 8015e82:	b21b      	sxth	r3, r3
 8015e84:	4313      	orrs	r3, r2
 8015e86:	b21b      	sxth	r3, r3
 8015e88:	b29a      	uxth	r2, r3
 8015e8a:	683b      	ldr	r3, [r7, #0]
 8015e8c:	809a      	strh	r2, [r3, #4]
        // Parse ChMaskCtrl and nbRep
        linkAdrParams->NbRep = payload[4];
 8015e8e:	687b      	ldr	r3, [r7, #4]
 8015e90:	791a      	ldrb	r2, [r3, #4]
 8015e92:	683b      	ldr	r3, [r7, #0]
 8015e94:	701a      	strb	r2, [r3, #0]
        linkAdrParams->ChMaskCtrl = ( linkAdrParams->NbRep >> 4 ) & 0x07;
 8015e96:	683b      	ldr	r3, [r7, #0]
 8015e98:	781b      	ldrb	r3, [r3, #0]
 8015e9a:	091b      	lsrs	r3, r3, #4
 8015e9c:	b2db      	uxtb	r3, r3
 8015e9e:	f003 0307 	and.w	r3, r3, #7
 8015ea2:	b2da      	uxtb	r2, r3
 8015ea4:	683b      	ldr	r3, [r7, #0]
 8015ea6:	70da      	strb	r2, [r3, #3]
        linkAdrParams->NbRep &= 0x0F;
 8015ea8:	683b      	ldr	r3, [r7, #0]
 8015eaa:	781b      	ldrb	r3, [r3, #0]
 8015eac:	f003 030f 	and.w	r3, r3, #15
 8015eb0:	b2da      	uxtb	r2, r3
 8015eb2:	683b      	ldr	r3, [r7, #0]
 8015eb4:	701a      	strb	r2, [r3, #0]

        // LinkAdrReq has 4 bytes length + 1 byte CMD
        retIndex = 5;
 8015eb6:	2305      	movs	r3, #5
 8015eb8:	73fb      	strb	r3, [r7, #15]
    }
    return retIndex;
 8015eba:	7bfb      	ldrb	r3, [r7, #15]
}
 8015ebc:	4618      	mov	r0, r3
 8015ebe:	3714      	adds	r7, #20
 8015ec0:	46bd      	mov	sp, r7
 8015ec2:	bc80      	pop	{r7}
 8015ec4:	4770      	bx	lr

08015ec6 <RegionCommonLinkAdrReqVerifyParams>:

uint8_t RegionCommonLinkAdrReqVerifyParams( RegionCommonLinkAdrReqVerifyParams_t* verifyParams, int8_t* dr, int8_t* txPow, uint8_t* nbRep )
{
 8015ec6:	b5b0      	push	{r4, r5, r7, lr}
 8015ec8:	b088      	sub	sp, #32
 8015eca:	af02      	add	r7, sp, #8
 8015ecc:	60f8      	str	r0, [r7, #12]
 8015ece:	60b9      	str	r1, [r7, #8]
 8015ed0:	607a      	str	r2, [r7, #4]
 8015ed2:	603b      	str	r3, [r7, #0]
    uint8_t status = verifyParams->Status;
 8015ed4:	68fb      	ldr	r3, [r7, #12]
 8015ed6:	791b      	ldrb	r3, [r3, #4]
 8015ed8:	75fb      	strb	r3, [r7, #23]
    int8_t datarate = verifyParams->Datarate;
 8015eda:	68fb      	ldr	r3, [r7, #12]
 8015edc:	799b      	ldrb	r3, [r3, #6]
 8015ede:	75bb      	strb	r3, [r7, #22]
    int8_t txPower = verifyParams->TxPower;
 8015ee0:	68fb      	ldr	r3, [r7, #12]
 8015ee2:	79db      	ldrb	r3, [r3, #7]
 8015ee4:	757b      	strb	r3, [r7, #21]
    int8_t nbRepetitions = verifyParams->NbRep;
 8015ee6:	68fb      	ldr	r3, [r7, #12]
 8015ee8:	7a1b      	ldrb	r3, [r3, #8]
 8015eea:	753b      	strb	r3, [r7, #20]

    // Handle the case when ADR is off.
    if( verifyParams->AdrEnabled == false )
 8015eec:	68fb      	ldr	r3, [r7, #12]
 8015eee:	795b      	ldrb	r3, [r3, #5]
 8015ef0:	f083 0301 	eor.w	r3, r3, #1
 8015ef4:	b2db      	uxtb	r3, r3
 8015ef6:	2b00      	cmp	r3, #0
 8015ef8:	d008      	beq.n	8015f0c <RegionCommonLinkAdrReqVerifyParams+0x46>
    {
        // When ADR is off, we are allowed to change the channels mask
        nbRepetitions = verifyParams->CurrentNbRep;
 8015efa:	68fb      	ldr	r3, [r7, #12]
 8015efc:	7adb      	ldrb	r3, [r3, #11]
 8015efe:	753b      	strb	r3, [r7, #20]
        datarate =  verifyParams->CurrentDatarate;
 8015f00:	68fb      	ldr	r3, [r7, #12]
 8015f02:	7a5b      	ldrb	r3, [r3, #9]
 8015f04:	75bb      	strb	r3, [r7, #22]
        txPower =  verifyParams->CurrentTxPower;
 8015f06:	68fb      	ldr	r3, [r7, #12]
 8015f08:	7a9b      	ldrb	r3, [r3, #10]
 8015f0a:	757b      	strb	r3, [r7, #21]
    }

    if( status != 0 )
 8015f0c:	7dfb      	ldrb	r3, [r7, #23]
 8015f0e:	2b00      	cmp	r3, #0
 8015f10:	d04a      	beq.n	8015fa8 <RegionCommonLinkAdrReqVerifyParams+0xe2>
    {
        // Verify datarate. The variable phyParam. Value contains the minimum allowed datarate.
        if( datarate == 0x0F )
 8015f12:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8015f16:	2b0f      	cmp	r3, #15
 8015f18:	d103      	bne.n	8015f22 <RegionCommonLinkAdrReqVerifyParams+0x5c>
        { // 0xF means that the device MUST ignore that field, and keep the current parameter value.
            datarate =  verifyParams->CurrentDatarate;
 8015f1a:	68fb      	ldr	r3, [r7, #12]
 8015f1c:	7a5b      	ldrb	r3, [r3, #9]
 8015f1e:	75bb      	strb	r3, [r7, #22]
 8015f20:	e01d      	b.n	8015f5e <RegionCommonLinkAdrReqVerifyParams+0x98>
        }
        else if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 8015f22:	68fb      	ldr	r3, [r7, #12]
 8015f24:	7b18      	ldrb	r0, [r3, #12]
 8015f26:	68fb      	ldr	r3, [r7, #12]
 8015f28:	6919      	ldr	r1, [r3, #16]
 8015f2a:	68fb      	ldr	r3, [r7, #12]
 8015f2c:	f993 5014 	ldrsb.w	r5, [r3, #20]
 8015f30:	68fb      	ldr	r3, [r7, #12]
 8015f32:	f993 3015 	ldrsb.w	r3, [r3, #21]
 8015f36:	68fa      	ldr	r2, [r7, #12]
 8015f38:	6992      	ldr	r2, [r2, #24]
 8015f3a:	f997 4016 	ldrsb.w	r4, [r7, #22]
 8015f3e:	9201      	str	r2, [sp, #4]
 8015f40:	9300      	str	r3, [sp, #0]
 8015f42:	462b      	mov	r3, r5
 8015f44:	4622      	mov	r2, r4
 8015f46:	f7ff fd3a 	bl	80159be <RegionCommonChanVerifyDr>
 8015f4a:	4603      	mov	r3, r0
                                      verifyParams->MinDatarate, verifyParams->MaxDatarate, verifyParams->Channels  ) == false )
 8015f4c:	f083 0301 	eor.w	r3, r3, #1
 8015f50:	b2db      	uxtb	r3, r3
        else if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 8015f52:	2b00      	cmp	r3, #0
 8015f54:	d003      	beq.n	8015f5e <RegionCommonLinkAdrReqVerifyParams+0x98>
        {
            status &= 0xFD; // Datarate KO
 8015f56:	7dfb      	ldrb	r3, [r7, #23]
 8015f58:	f023 0302 	bic.w	r3, r3, #2
 8015f5c:	75fb      	strb	r3, [r7, #23]
        }

        // Verify tx power
        if( txPower == 0x0F )
 8015f5e:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8015f62:	2b0f      	cmp	r3, #15
 8015f64:	d103      	bne.n	8015f6e <RegionCommonLinkAdrReqVerifyParams+0xa8>
        { // 0xF means that the device MUST ignore that field, and keep the current parameter value.
            txPower =  verifyParams->CurrentTxPower;
 8015f66:	68fb      	ldr	r3, [r7, #12]
 8015f68:	7a9b      	ldrb	r3, [r3, #10]
 8015f6a:	757b      	strb	r3, [r7, #21]
 8015f6c:	e01c      	b.n	8015fa8 <RegionCommonLinkAdrReqVerifyParams+0xe2>
        }
        else if( RegionCommonValueInRange( txPower, verifyParams->MaxTxPower, verifyParams->MinTxPower ) == 0 )
 8015f6e:	68fb      	ldr	r3, [r7, #12]
 8015f70:	f993 101d 	ldrsb.w	r1, [r3, #29]
 8015f74:	68fb      	ldr	r3, [r7, #12]
 8015f76:	f993 201c 	ldrsb.w	r2, [r3, #28]
 8015f7a:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8015f7e:	4618      	mov	r0, r3
 8015f80:	f7ff fd8f 	bl	8015aa2 <RegionCommonValueInRange>
 8015f84:	4603      	mov	r3, r0
 8015f86:	2b00      	cmp	r3, #0
 8015f88:	d10e      	bne.n	8015fa8 <RegionCommonLinkAdrReqVerifyParams+0xe2>
        {
            // Verify if the maximum TX power is exceeded
            if( verifyParams->MaxTxPower > txPower )
 8015f8a:	68fb      	ldr	r3, [r7, #12]
 8015f8c:	f993 301d 	ldrsb.w	r3, [r3, #29]
 8015f90:	f997 2015 	ldrsb.w	r2, [r7, #21]
 8015f94:	429a      	cmp	r2, r3
 8015f96:	da03      	bge.n	8015fa0 <RegionCommonLinkAdrReqVerifyParams+0xda>
            { // Apply maximum TX power. Accept TX power.
                txPower = verifyParams->MaxTxPower;
 8015f98:	68fb      	ldr	r3, [r7, #12]
 8015f9a:	7f5b      	ldrb	r3, [r3, #29]
 8015f9c:	757b      	strb	r3, [r7, #21]
 8015f9e:	e003      	b.n	8015fa8 <RegionCommonLinkAdrReqVerifyParams+0xe2>
            }
            else
            {
                status &= 0xFB; // TxPower KO
 8015fa0:	7dfb      	ldrb	r3, [r7, #23]
 8015fa2:	f023 0304 	bic.w	r3, r3, #4
 8015fa6:	75fb      	strb	r3, [r7, #23]
            }
        }
    }

    // If the status is ok, verify the NbRep
    if( status == 0x07 )
 8015fa8:	7dfb      	ldrb	r3, [r7, #23]
 8015faa:	2b07      	cmp	r3, #7
 8015fac:	d105      	bne.n	8015fba <RegionCommonLinkAdrReqVerifyParams+0xf4>
    {
        if( nbRepetitions == 0 )
 8015fae:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8015fb2:	2b00      	cmp	r3, #0
 8015fb4:	d101      	bne.n	8015fba <RegionCommonLinkAdrReqVerifyParams+0xf4>
        { // Set nbRep to the default value of 1.
            nbRepetitions = 1;
 8015fb6:	2301      	movs	r3, #1
 8015fb8:	753b      	strb	r3, [r7, #20]
        }
    }

    // Apply changes
    *dr = datarate;
 8015fba:	68bb      	ldr	r3, [r7, #8]
 8015fbc:	7dba      	ldrb	r2, [r7, #22]
 8015fbe:	701a      	strb	r2, [r3, #0]
    *txPow = txPower;
 8015fc0:	687b      	ldr	r3, [r7, #4]
 8015fc2:	7d7a      	ldrb	r2, [r7, #21]
 8015fc4:	701a      	strb	r2, [r3, #0]
    *nbRep = nbRepetitions;
 8015fc6:	7d3a      	ldrb	r2, [r7, #20]
 8015fc8:	683b      	ldr	r3, [r7, #0]
 8015fca:	701a      	strb	r2, [r3, #0]

    return status;
 8015fcc:	7dfb      	ldrb	r3, [r7, #23]
}
 8015fce:	4618      	mov	r0, r3
 8015fd0:	3718      	adds	r7, #24
 8015fd2:	46bd      	mov	sp, r7
 8015fd4:	bdb0      	pop	{r4, r5, r7, pc}
	...

08015fd8 <RegionCommonComputeSymbolTimeLoRa>:

uint32_t RegionCommonComputeSymbolTimeLoRa( uint8_t phyDr, uint32_t bandwidthInHz )
{
 8015fd8:	b480      	push	{r7}
 8015fda:	b083      	sub	sp, #12
 8015fdc:	af00      	add	r7, sp, #0
 8015fde:	4603      	mov	r3, r0
 8015fe0:	6039      	str	r1, [r7, #0]
 8015fe2:	71fb      	strb	r3, [r7, #7]
    return ( 1 << phyDr ) * 1000000 / bandwidthInHz;
 8015fe4:	79fb      	ldrb	r3, [r7, #7]
 8015fe6:	4a06      	ldr	r2, [pc, #24]	@ (8016000 <RegionCommonComputeSymbolTimeLoRa+0x28>)
 8015fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8015fec:	461a      	mov	r2, r3
 8015fee:	683b      	ldr	r3, [r7, #0]
 8015ff0:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8015ff4:	4618      	mov	r0, r3
 8015ff6:	370c      	adds	r7, #12
 8015ff8:	46bd      	mov	sp, r7
 8015ffa:	bc80      	pop	{r7}
 8015ffc:	4770      	bx	lr
 8015ffe:	bf00      	nop
 8016000:	000f4240 	.word	0x000f4240

08016004 <RegionCommonComputeSymbolTimeFsk>:

uint32_t RegionCommonComputeSymbolTimeFsk( uint8_t phyDrInKbps )
{
 8016004:	b480      	push	{r7}
 8016006:	b083      	sub	sp, #12
 8016008:	af00      	add	r7, sp, #0
 801600a:	4603      	mov	r3, r0
 801600c:	71fb      	strb	r3, [r7, #7]
    return 8000 / ( uint32_t )phyDrInKbps; // 1 symbol equals 1 byte
 801600e:	79fb      	ldrb	r3, [r7, #7]
 8016010:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8016014:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8016018:	4618      	mov	r0, r3
 801601a:	370c      	adds	r7, #12
 801601c:	46bd      	mov	sp, r7
 801601e:	bc80      	pop	{r7}
 8016020:	4770      	bx	lr
	...

08016024 <RegionCommonComputeRxWindowParameters>:

void RegionCommonComputeRxWindowParameters( uint32_t tSymbolInUs, uint8_t minRxSymbols, uint32_t rxErrorInMs, uint32_t wakeUpTimeInMs, uint32_t* windowTimeoutInSymbols, int32_t* windowOffsetInMs )
{
 8016024:	b480      	push	{r7}
 8016026:	b085      	sub	sp, #20
 8016028:	af00      	add	r7, sp, #0
 801602a:	60f8      	str	r0, [r7, #12]
 801602c:	607a      	str	r2, [r7, #4]
 801602e:	603b      	str	r3, [r7, #0]
 8016030:	460b      	mov	r3, r1
 8016032:	72fb      	strb	r3, [r7, #11]
    *windowTimeoutInSymbols = MAX( DIV_CEIL( ( ( 2 * minRxSymbols - 8 ) * tSymbolInUs + 2 * ( rxErrorInMs * 1000 ) ),  tSymbolInUs ), minRxSymbols ); // Computed number of symbols
 8016034:	7afa      	ldrb	r2, [r7, #11]
 8016036:	7afb      	ldrb	r3, [r7, #11]
 8016038:	3b04      	subs	r3, #4
 801603a:	4619      	mov	r1, r3
 801603c:	68fb      	ldr	r3, [r7, #12]
 801603e:	fb03 f101 	mul.w	r1, r3, r1
 8016042:	687b      	ldr	r3, [r7, #4]
 8016044:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8016048:	fb00 f303 	mul.w	r3, r0, r3
 801604c:	440b      	add	r3, r1
 801604e:	005b      	lsls	r3, r3, #1
 8016050:	2b00      	cmp	r3, #0
 8016052:	d013      	beq.n	801607c <RegionCommonComputeRxWindowParameters+0x58>
 8016054:	7afb      	ldrb	r3, [r7, #11]
 8016056:	3b04      	subs	r3, #4
 8016058:	4619      	mov	r1, r3
 801605a:	68fb      	ldr	r3, [r7, #12]
 801605c:	fb03 f101 	mul.w	r1, r3, r1
 8016060:	687b      	ldr	r3, [r7, #4]
 8016062:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8016066:	fb00 f303 	mul.w	r3, r0, r3
 801606a:	440b      	add	r3, r1
 801606c:	0059      	lsls	r1, r3, #1
 801606e:	68fb      	ldr	r3, [r7, #12]
 8016070:	440b      	add	r3, r1
 8016072:	1e59      	subs	r1, r3, #1
 8016074:	68fb      	ldr	r3, [r7, #12]
 8016076:	fbb1 f3f3 	udiv	r3, r1, r3
 801607a:	e00f      	b.n	801609c <RegionCommonComputeRxWindowParameters+0x78>
 801607c:	7afb      	ldrb	r3, [r7, #11]
 801607e:	3b04      	subs	r3, #4
 8016080:	4619      	mov	r1, r3
 8016082:	68fb      	ldr	r3, [r7, #12]
 8016084:	fb03 f101 	mul.w	r1, r3, r1
 8016088:	687b      	ldr	r3, [r7, #4]
 801608a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 801608e:	fb00 f303 	mul.w	r3, r0, r3
 8016092:	440b      	add	r3, r1
 8016094:	0059      	lsls	r1, r3, #1
 8016096:	68fb      	ldr	r3, [r7, #12]
 8016098:	fbb1 f3f3 	udiv	r3, r1, r3
 801609c:	429a      	cmp	r2, r3
 801609e:	bf38      	it	cc
 80160a0:	461a      	movcc	r2, r3
 80160a2:	69bb      	ldr	r3, [r7, #24]
 80160a4:	601a      	str	r2, [r3, #0]
    *windowOffsetInMs = ( int32_t )DIV_CEIL( ( int32_t )( 4 * tSymbolInUs ) -
 80160a6:	68fb      	ldr	r3, [r7, #12]
 80160a8:	009b      	lsls	r3, r3, #2
 80160aa:	4619      	mov	r1, r3
 80160ac:	69bb      	ldr	r3, [r7, #24]
 80160ae:	681b      	ldr	r3, [r3, #0]
 80160b0:	68fa      	ldr	r2, [r7, #12]
 80160b2:	fb02 f303 	mul.w	r3, r2, r3
 80160b6:	2b00      	cmp	r3, #0
 80160b8:	d007      	beq.n	80160ca <RegionCommonComputeRxWindowParameters+0xa6>
 80160ba:	69bb      	ldr	r3, [r7, #24]
 80160bc:	681b      	ldr	r3, [r3, #0]
 80160be:	68fa      	ldr	r2, [r7, #12]
 80160c0:	fb02 f303 	mul.w	r3, r2, r3
 80160c4:	3301      	adds	r3, #1
 80160c6:	085b      	lsrs	r3, r3, #1
 80160c8:	e005      	b.n	80160d6 <RegionCommonComputeRxWindowParameters+0xb2>
 80160ca:	69bb      	ldr	r3, [r7, #24]
 80160cc:	681b      	ldr	r3, [r3, #0]
 80160ce:	68fa      	ldr	r2, [r7, #12]
 80160d0:	fb02 f303 	mul.w	r3, r2, r3
 80160d4:	085b      	lsrs	r3, r3, #1
 80160d6:	1acb      	subs	r3, r1, r3
 80160d8:	683a      	ldr	r2, [r7, #0]
 80160da:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80160de:	fb01 f202 	mul.w	r2, r1, r2
 80160e2:	1a9b      	subs	r3, r3, r2
 80160e4:	2b00      	cmp	r3, #0
 80160e6:	dd27      	ble.n	8016138 <RegionCommonComputeRxWindowParameters+0x114>
 80160e8:	68fb      	ldr	r3, [r7, #12]
 80160ea:	009b      	lsls	r3, r3, #2
 80160ec:	4619      	mov	r1, r3
 80160ee:	69bb      	ldr	r3, [r7, #24]
 80160f0:	681b      	ldr	r3, [r3, #0]
 80160f2:	68fa      	ldr	r2, [r7, #12]
 80160f4:	fb02 f303 	mul.w	r3, r2, r3
 80160f8:	2b00      	cmp	r3, #0
 80160fa:	d007      	beq.n	801610c <RegionCommonComputeRxWindowParameters+0xe8>
 80160fc:	69bb      	ldr	r3, [r7, #24]
 80160fe:	681b      	ldr	r3, [r3, #0]
 8016100:	68fa      	ldr	r2, [r7, #12]
 8016102:	fb02 f303 	mul.w	r3, r2, r3
 8016106:	3301      	adds	r3, #1
 8016108:	085b      	lsrs	r3, r3, #1
 801610a:	e005      	b.n	8016118 <RegionCommonComputeRxWindowParameters+0xf4>
 801610c:	69bb      	ldr	r3, [r7, #24]
 801610e:	681b      	ldr	r3, [r3, #0]
 8016110:	68fa      	ldr	r2, [r7, #12]
 8016112:	fb02 f303 	mul.w	r3, r2, r3
 8016116:	085b      	lsrs	r3, r3, #1
 8016118:	1acb      	subs	r3, r1, r3
 801611a:	683a      	ldr	r2, [r7, #0]
 801611c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8016120:	fb01 f202 	mul.w	r2, r1, r2
 8016124:	1a9b      	subs	r3, r3, r2
 8016126:	f203 33e7 	addw	r3, r3, #999	@ 0x3e7
 801612a:	4a19      	ldr	r2, [pc, #100]	@ (8016190 <RegionCommonComputeRxWindowParameters+0x16c>)
 801612c:	fb82 1203 	smull	r1, r2, r2, r3
 8016130:	1192      	asrs	r2, r2, #6
 8016132:	17db      	asrs	r3, r3, #31
 8016134:	1ad3      	subs	r3, r2, r3
 8016136:	e024      	b.n	8016182 <RegionCommonComputeRxWindowParameters+0x15e>
 8016138:	68fb      	ldr	r3, [r7, #12]
 801613a:	009b      	lsls	r3, r3, #2
 801613c:	4619      	mov	r1, r3
 801613e:	69bb      	ldr	r3, [r7, #24]
 8016140:	681b      	ldr	r3, [r3, #0]
 8016142:	68fa      	ldr	r2, [r7, #12]
 8016144:	fb02 f303 	mul.w	r3, r2, r3
 8016148:	2b00      	cmp	r3, #0
 801614a:	d007      	beq.n	801615c <RegionCommonComputeRxWindowParameters+0x138>
 801614c:	69bb      	ldr	r3, [r7, #24]
 801614e:	681b      	ldr	r3, [r3, #0]
 8016150:	68fa      	ldr	r2, [r7, #12]
 8016152:	fb02 f303 	mul.w	r3, r2, r3
 8016156:	3301      	adds	r3, #1
 8016158:	085b      	lsrs	r3, r3, #1
 801615a:	e005      	b.n	8016168 <RegionCommonComputeRxWindowParameters+0x144>
 801615c:	69bb      	ldr	r3, [r7, #24]
 801615e:	681b      	ldr	r3, [r3, #0]
 8016160:	68fa      	ldr	r2, [r7, #12]
 8016162:	fb02 f303 	mul.w	r3, r2, r3
 8016166:	085b      	lsrs	r3, r3, #1
 8016168:	1acb      	subs	r3, r1, r3
 801616a:	683a      	ldr	r2, [r7, #0]
 801616c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8016170:	fb01 f202 	mul.w	r2, r1, r2
 8016174:	1a9b      	subs	r3, r3, r2
 8016176:	4a06      	ldr	r2, [pc, #24]	@ (8016190 <RegionCommonComputeRxWindowParameters+0x16c>)
 8016178:	fb82 1203 	smull	r1, r2, r2, r3
 801617c:	1192      	asrs	r2, r2, #6
 801617e:	17db      	asrs	r3, r3, #31
 8016180:	1ad3      	subs	r3, r2, r3
 8016182:	69fa      	ldr	r2, [r7, #28]
 8016184:	6013      	str	r3, [r2, #0]
                                               ( int32_t )DIV_CEIL( ( *windowTimeoutInSymbols * tSymbolInUs ), 2 ) -
                                               ( int32_t )( wakeUpTimeInMs * 1000 ), 1000 );
}
 8016186:	bf00      	nop
 8016188:	3714      	adds	r7, #20
 801618a:	46bd      	mov	sp, r7
 801618c:	bc80      	pop	{r7}
 801618e:	4770      	bx	lr
 8016190:	10624dd3 	.word	0x10624dd3

08016194 <RegionCommonComputeTxPower>:

int8_t RegionCommonComputeTxPower( int8_t txPowerIndex, float maxEirp, float antennaGain )
{
 8016194:	b580      	push	{r7, lr}
 8016196:	b086      	sub	sp, #24
 8016198:	af00      	add	r7, sp, #0
 801619a:	4603      	mov	r3, r0
 801619c:	60b9      	str	r1, [r7, #8]
 801619e:	607a      	str	r2, [r7, #4]
 80161a0:	73fb      	strb	r3, [r7, #15]
    int8_t phyTxPower = 0;
 80161a2:	2300      	movs	r3, #0
 80161a4:	75fb      	strb	r3, [r7, #23]

    phyTxPower = ( int8_t )floor( ( maxEirp - ( txPowerIndex * 2U ) ) - antennaGain );
 80161a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80161aa:	005b      	lsls	r3, r3, #1
 80161ac:	4618      	mov	r0, r3
 80161ae:	f7ea fb0d 	bl	80007cc <__aeabi_ui2f>
 80161b2:	4603      	mov	r3, r0
 80161b4:	4619      	mov	r1, r3
 80161b6:	68b8      	ldr	r0, [r7, #8]
 80161b8:	f7ea fa56 	bl	8000668 <__aeabi_fsub>
 80161bc:	4603      	mov	r3, r0
 80161be:	6879      	ldr	r1, [r7, #4]
 80161c0:	4618      	mov	r0, r3
 80161c2:	f7ea fa51 	bl	8000668 <__aeabi_fsub>
 80161c6:	4603      	mov	r3, r0
 80161c8:	4618      	mov	r0, r3
 80161ca:	f7ea f941 	bl	8000450 <__aeabi_f2d>
 80161ce:	4602      	mov	r2, r0
 80161d0:	460b      	mov	r3, r1
 80161d2:	4610      	mov	r0, r2
 80161d4:	4619      	mov	r1, r3
 80161d6:	f005 f813 	bl	801b200 <floor>
 80161da:	4602      	mov	r2, r0
 80161dc:	460b      	mov	r3, r1
 80161de:	4610      	mov	r0, r2
 80161e0:	4619      	mov	r1, r3
 80161e2:	f7ea fa15 	bl	8000610 <__aeabi_d2iz>
 80161e6:	4603      	mov	r3, r0
 80161e8:	75fb      	strb	r3, [r7, #23]

    return phyTxPower;
 80161ea:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80161ee:	4618      	mov	r0, r3
 80161f0:	3718      	adds	r7, #24
 80161f2:	46bd      	mov	sp, r7
 80161f4:	bd80      	pop	{r7, pc}

080161f6 <RegionCommonCountNbOfEnabledChannels>:
    MW_LOG(TS_ON, VLEVEL_M, "RX_BC on freq %d Hz at DR %d\r\n", rxBeaconSetupParams->Frequency, rxBeaconSetupParams->BeaconDatarate );
}

void RegionCommonCountNbOfEnabledChannels( RegionCommonCountNbOfEnabledChannelsParams_t* countNbOfEnabledChannelsParams,
                                           uint8_t* enabledChannels, uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels )
{
 80161f6:	b590      	push	{r4, r7, lr}
 80161f8:	b087      	sub	sp, #28
 80161fa:	af00      	add	r7, sp, #0
 80161fc:	60f8      	str	r0, [r7, #12]
 80161fe:	60b9      	str	r1, [r7, #8]
 8016200:	607a      	str	r2, [r7, #4]
 8016202:	603b      	str	r3, [r7, #0]
    uint8_t nbChannelCount = 0;
 8016204:	2300      	movs	r3, #0
 8016206:	75fb      	strb	r3, [r7, #23]
    uint8_t nbRestrictedChannelsCount = 0;
 8016208:	2300      	movs	r3, #0
 801620a:	75bb      	strb	r3, [r7, #22]

    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 801620c:	2300      	movs	r3, #0
 801620e:	757b      	strb	r3, [r7, #21]
 8016210:	2300      	movs	r3, #0
 8016212:	753b      	strb	r3, [r7, #20]
 8016214:	e09c      	b.n	8016350 <RegionCommonCountNbOfEnabledChannels+0x15a>
    {
        for( uint8_t j = 0; j < 16; j++ )
 8016216:	2300      	movs	r3, #0
 8016218:	74fb      	strb	r3, [r7, #19]
 801621a:	e08f      	b.n	801633c <RegionCommonCountNbOfEnabledChannels+0x146>
        {
            if( ( countNbOfEnabledChannelsParams->ChannelsMask[k] & ( 1 << j ) ) != 0 )
 801621c:	68fb      	ldr	r3, [r7, #12]
 801621e:	685a      	ldr	r2, [r3, #4]
 8016220:	7d3b      	ldrb	r3, [r7, #20]
 8016222:	005b      	lsls	r3, r3, #1
 8016224:	4413      	add	r3, r2
 8016226:	881b      	ldrh	r3, [r3, #0]
 8016228:	461a      	mov	r2, r3
 801622a:	7cfb      	ldrb	r3, [r7, #19]
 801622c:	fa42 f303 	asr.w	r3, r2, r3
 8016230:	f003 0301 	and.w	r3, r3, #1
 8016234:	2b00      	cmp	r3, #0
 8016236:	d07e      	beq.n	8016336 <RegionCommonCountNbOfEnabledChannels+0x140>
            {
                if( countNbOfEnabledChannelsParams->Channels[i + j].Frequency == 0 )
 8016238:	68fb      	ldr	r3, [r7, #12]
 801623a:	689a      	ldr	r2, [r3, #8]
 801623c:	7d79      	ldrb	r1, [r7, #21]
 801623e:	7cfb      	ldrb	r3, [r7, #19]
 8016240:	440b      	add	r3, r1
 8016242:	4619      	mov	r1, r3
 8016244:	460b      	mov	r3, r1
 8016246:	005b      	lsls	r3, r3, #1
 8016248:	440b      	add	r3, r1
 801624a:	009b      	lsls	r3, r3, #2
 801624c:	4413      	add	r3, r2
 801624e:	681b      	ldr	r3, [r3, #0]
 8016250:	2b00      	cmp	r3, #0
 8016252:	d06b      	beq.n	801632c <RegionCommonCountNbOfEnabledChannels+0x136>
                { // Check if the channel is enabled
                    continue;
                }
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 8016254:	68fb      	ldr	r3, [r7, #12]
 8016256:	781b      	ldrb	r3, [r3, #0]
 8016258:	f083 0301 	eor.w	r3, r3, #1
 801625c:	b2db      	uxtb	r3, r3
 801625e:	2b00      	cmp	r3, #0
 8016260:	d011      	beq.n	8016286 <RegionCommonCountNbOfEnabledChannels+0x90>
                    ( countNbOfEnabledChannelsParams->JoinChannels != NULL ) )
 8016262:	68fb      	ldr	r3, [r7, #12]
 8016264:	695b      	ldr	r3, [r3, #20]
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 8016266:	2b00      	cmp	r3, #0
 8016268:	d00d      	beq.n	8016286 <RegionCommonCountNbOfEnabledChannels+0x90>
                {
                    if( ( countNbOfEnabledChannelsParams->JoinChannels[k] & ( 1 << j ) ) == 0 )
 801626a:	68fb      	ldr	r3, [r7, #12]
 801626c:	695a      	ldr	r2, [r3, #20]
 801626e:	7d3b      	ldrb	r3, [r7, #20]
 8016270:	005b      	lsls	r3, r3, #1
 8016272:	4413      	add	r3, r2
 8016274:	881b      	ldrh	r3, [r3, #0]
 8016276:	461a      	mov	r2, r3
 8016278:	7cfb      	ldrb	r3, [r7, #19]
 801627a:	fa42 f303 	asr.w	r3, r2, r3
 801627e:	f003 0301 	and.w	r3, r3, #1
 8016282:	2b00      	cmp	r3, #0
 8016284:	d054      	beq.n	8016330 <RegionCommonCountNbOfEnabledChannels+0x13a>
                    {
                        continue;
                    }
                }
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 8016286:	68fb      	ldr	r3, [r7, #12]
 8016288:	785b      	ldrb	r3, [r3, #1]
 801628a:	b258      	sxtb	r0, r3
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Min,
 801628c:	68fb      	ldr	r3, [r7, #12]
 801628e:	689a      	ldr	r2, [r3, #8]
 8016290:	7d79      	ldrb	r1, [r7, #21]
 8016292:	7cfb      	ldrb	r3, [r7, #19]
 8016294:	440b      	add	r3, r1
 8016296:	4619      	mov	r1, r3
 8016298:	460b      	mov	r3, r1
 801629a:	005b      	lsls	r3, r3, #1
 801629c:	440b      	add	r3, r1
 801629e:	009b      	lsls	r3, r3, #2
 80162a0:	4413      	add	r3, r2
 80162a2:	7a1b      	ldrb	r3, [r3, #8]
 80162a4:	f343 0303 	sbfx	r3, r3, #0, #4
 80162a8:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 80162aa:	461c      	mov	r4, r3
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Max ) == false )
 80162ac:	68fb      	ldr	r3, [r7, #12]
 80162ae:	689a      	ldr	r2, [r3, #8]
 80162b0:	7d79      	ldrb	r1, [r7, #21]
 80162b2:	7cfb      	ldrb	r3, [r7, #19]
 80162b4:	440b      	add	r3, r1
 80162b6:	4619      	mov	r1, r3
 80162b8:	460b      	mov	r3, r1
 80162ba:	005b      	lsls	r3, r3, #1
 80162bc:	440b      	add	r3, r1
 80162be:	009b      	lsls	r3, r3, #2
 80162c0:	4413      	add	r3, r2
 80162c2:	7a1b      	ldrb	r3, [r3, #8]
 80162c4:	f343 1303 	sbfx	r3, r3, #4, #4
 80162c8:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 80162ca:	461a      	mov	r2, r3
 80162cc:	4621      	mov	r1, r4
 80162ce:	f7ff fbe8 	bl	8015aa2 <RegionCommonValueInRange>
 80162d2:	4603      	mov	r3, r0
 80162d4:	2b00      	cmp	r3, #0
 80162d6:	d02d      	beq.n	8016334 <RegionCommonCountNbOfEnabledChannels+0x13e>
                { // Check if the current channel selection supports the given datarate
                    continue;
                }
                if( countNbOfEnabledChannelsParams->Bands[countNbOfEnabledChannelsParams->Channels[i + j].Band].ReadyForTransmission == false )
 80162d8:	68fb      	ldr	r3, [r7, #12]
 80162da:	68da      	ldr	r2, [r3, #12]
 80162dc:	68fb      	ldr	r3, [r7, #12]
 80162de:	6899      	ldr	r1, [r3, #8]
 80162e0:	7d78      	ldrb	r0, [r7, #21]
 80162e2:	7cfb      	ldrb	r3, [r7, #19]
 80162e4:	4403      	add	r3, r0
 80162e6:	4618      	mov	r0, r3
 80162e8:	4603      	mov	r3, r0
 80162ea:	005b      	lsls	r3, r3, #1
 80162ec:	4403      	add	r3, r0
 80162ee:	009b      	lsls	r3, r3, #2
 80162f0:	440b      	add	r3, r1
 80162f2:	7a5b      	ldrb	r3, [r3, #9]
 80162f4:	4619      	mov	r1, r3
 80162f6:	460b      	mov	r3, r1
 80162f8:	005b      	lsls	r3, r3, #1
 80162fa:	440b      	add	r3, r1
 80162fc:	00db      	lsls	r3, r3, #3
 80162fe:	4413      	add	r3, r2
 8016300:	7d1b      	ldrb	r3, [r3, #20]
 8016302:	f083 0301 	eor.w	r3, r3, #1
 8016306:	b2db      	uxtb	r3, r3
 8016308:	2b00      	cmp	r3, #0
 801630a:	d003      	beq.n	8016314 <RegionCommonCountNbOfEnabledChannels+0x11e>
                { // Check if the band is available for transmission
                    nbRestrictedChannelsCount++;
 801630c:	7dbb      	ldrb	r3, [r7, #22]
 801630e:	3301      	adds	r3, #1
 8016310:	75bb      	strb	r3, [r7, #22]
                    continue;
 8016312:	e010      	b.n	8016336 <RegionCommonCountNbOfEnabledChannels+0x140>
                }
                enabledChannels[nbChannelCount++] = i + j;
 8016314:	7dfb      	ldrb	r3, [r7, #23]
 8016316:	1c5a      	adds	r2, r3, #1
 8016318:	75fa      	strb	r2, [r7, #23]
 801631a:	461a      	mov	r2, r3
 801631c:	68bb      	ldr	r3, [r7, #8]
 801631e:	4413      	add	r3, r2
 8016320:	7d79      	ldrb	r1, [r7, #21]
 8016322:	7cfa      	ldrb	r2, [r7, #19]
 8016324:	440a      	add	r2, r1
 8016326:	b2d2      	uxtb	r2, r2
 8016328:	701a      	strb	r2, [r3, #0]
 801632a:	e004      	b.n	8016336 <RegionCommonCountNbOfEnabledChannels+0x140>
                    continue;
 801632c:	bf00      	nop
 801632e:	e002      	b.n	8016336 <RegionCommonCountNbOfEnabledChannels+0x140>
                        continue;
 8016330:	bf00      	nop
 8016332:	e000      	b.n	8016336 <RegionCommonCountNbOfEnabledChannels+0x140>
                    continue;
 8016334:	bf00      	nop
        for( uint8_t j = 0; j < 16; j++ )
 8016336:	7cfb      	ldrb	r3, [r7, #19]
 8016338:	3301      	adds	r3, #1
 801633a:	74fb      	strb	r3, [r7, #19]
 801633c:	7cfb      	ldrb	r3, [r7, #19]
 801633e:	2b0f      	cmp	r3, #15
 8016340:	f67f af6c 	bls.w	801621c <RegionCommonCountNbOfEnabledChannels+0x26>
    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 8016344:	7d7b      	ldrb	r3, [r7, #21]
 8016346:	3310      	adds	r3, #16
 8016348:	757b      	strb	r3, [r7, #21]
 801634a:	7d3b      	ldrb	r3, [r7, #20]
 801634c:	3301      	adds	r3, #1
 801634e:	753b      	strb	r3, [r7, #20]
 8016350:	7d7b      	ldrb	r3, [r7, #21]
 8016352:	b29a      	uxth	r2, r3
 8016354:	68fb      	ldr	r3, [r7, #12]
 8016356:	8a1b      	ldrh	r3, [r3, #16]
 8016358:	429a      	cmp	r2, r3
 801635a:	f4ff af5c 	bcc.w	8016216 <RegionCommonCountNbOfEnabledChannels+0x20>
            }
        }
    }
    *nbEnabledChannels = nbChannelCount;
 801635e:	687b      	ldr	r3, [r7, #4]
 8016360:	7dfa      	ldrb	r2, [r7, #23]
 8016362:	701a      	strb	r2, [r3, #0]
    *nbRestrictedChannels = nbRestrictedChannelsCount;
 8016364:	683b      	ldr	r3, [r7, #0]
 8016366:	7dba      	ldrb	r2, [r7, #22]
 8016368:	701a      	strb	r2, [r3, #0]
}
 801636a:	bf00      	nop
 801636c:	371c      	adds	r7, #28
 801636e:	46bd      	mov	sp, r7
 8016370:	bd90      	pop	{r4, r7, pc}

08016372 <RegionCommonIdentifyChannels>:

LoRaMacStatus_t RegionCommonIdentifyChannels( RegionCommonIdentifyChannelsParam_t* identifyChannelsParam,
                                              TimerTime_t* aggregatedTimeOff, uint8_t* enabledChannels,
                                              uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels,
                                              TimerTime_t* nextTxDelay )
{
 8016372:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016374:	b08b      	sub	sp, #44	@ 0x2c
 8016376:	af04      	add	r7, sp, #16
 8016378:	60f8      	str	r0, [r7, #12]
 801637a:	60b9      	str	r1, [r7, #8]
 801637c:	607a      	str	r2, [r7, #4]
 801637e:	603b      	str	r3, [r7, #0]
    TimerTime_t elapsed = TimerGetElapsedTime( identifyChannelsParam->LastAggrTx );
 8016380:	68fb      	ldr	r3, [r7, #12]
 8016382:	685b      	ldr	r3, [r3, #4]
 8016384:	4618      	mov	r0, r3
 8016386:	f004 fbb7 	bl	801aaf8 <UTIL_TIMER_GetElapsedTime>
 801638a:	6178      	str	r0, [r7, #20]
    *nextTxDelay = identifyChannelsParam->AggrTimeOff - elapsed;
 801638c:	68fb      	ldr	r3, [r7, #12]
 801638e:	681a      	ldr	r2, [r3, #0]
 8016390:	697b      	ldr	r3, [r7, #20]
 8016392:	1ad2      	subs	r2, r2, r3
 8016394:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016396:	601a      	str	r2, [r3, #0]
    *nbRestrictedChannels = 1;
 8016398:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801639a:	2201      	movs	r2, #1
 801639c:	701a      	strb	r2, [r3, #0]
    *nbEnabledChannels = 0;
 801639e:	683b      	ldr	r3, [r7, #0]
 80163a0:	2200      	movs	r2, #0
 80163a2:	701a      	strb	r2, [r3, #0]

    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 80163a4:	68fb      	ldr	r3, [r7, #12]
 80163a6:	685b      	ldr	r3, [r3, #4]
 80163a8:	2b00      	cmp	r3, #0
 80163aa:	d004      	beq.n	80163b6 <RegionCommonIdentifyChannels+0x44>
        ( identifyChannelsParam->AggrTimeOff <= elapsed ) )
 80163ac:	68fb      	ldr	r3, [r7, #12]
 80163ae:	681b      	ldr	r3, [r3, #0]
    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 80163b0:	697a      	ldr	r2, [r7, #20]
 80163b2:	429a      	cmp	r2, r3
 80163b4:	d32b      	bcc.n	801640e <RegionCommonIdentifyChannels+0x9c>
    {
        // Reset Aggregated time off
        *aggregatedTimeOff = 0;
 80163b6:	68bb      	ldr	r3, [r7, #8]
 80163b8:	2200      	movs	r2, #0
 80163ba:	601a      	str	r2, [r3, #0]

        // Update bands Time OFF
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 80163bc:	68fb      	ldr	r3, [r7, #12]
 80163be:	69db      	ldr	r3, [r3, #28]
 80163c0:	781c      	ldrb	r4, [r3, #0]
                                                      identifyChannelsParam->CountNbOfEnabledChannelsParam->Bands,
 80163c2:	68fb      	ldr	r3, [r7, #12]
 80163c4:	69db      	ldr	r3, [r3, #28]
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 80163c6:	68dd      	ldr	r5, [r3, #12]
 80163c8:	68fb      	ldr	r3, [r7, #12]
 80163ca:	7a5e      	ldrb	r6, [r3, #9]
 80163cc:	68fb      	ldr	r3, [r7, #12]
 80163ce:	f893 c008 	ldrb.w	ip, [r3, #8]
 80163d2:	68fb      	ldr	r3, [r7, #12]
 80163d4:	7d1b      	ldrb	r3, [r3, #20]
 80163d6:	68fa      	ldr	r2, [r7, #12]
 80163d8:	6992      	ldr	r2, [r2, #24]
 80163da:	9203      	str	r2, [sp, #12]
 80163dc:	68fa      	ldr	r2, [r7, #12]
 80163de:	f10d 0e04 	add.w	lr, sp, #4
 80163e2:	320c      	adds	r2, #12
 80163e4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80163e8:	e88e 0003 	stmia.w	lr, {r0, r1}
 80163ec:	9300      	str	r3, [sp, #0]
 80163ee:	4663      	mov	r3, ip
 80163f0:	4632      	mov	r2, r6
 80163f2:	4629      	mov	r1, r5
 80163f4:	4620      	mov	r0, r4
 80163f6:	f7ff fc25 	bl	8015c44 <RegionCommonUpdateBandTimeOff>
 80163fa:	4602      	mov	r2, r0
 80163fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80163fe:	601a      	str	r2, [r3, #0]
                                                      identifyChannelsParam->DutyCycleEnabled,
                                                      identifyChannelsParam->LastTxIsJoinRequest,
                                                      identifyChannelsParam->ElapsedTimeSinceStartUp,
                                                      identifyChannelsParam->ExpectedTimeOnAir );

        RegionCommonCountNbOfEnabledChannels( identifyChannelsParam->CountNbOfEnabledChannelsParam, enabledChannels,
 8016400:	68fb      	ldr	r3, [r7, #12]
 8016402:	69d8      	ldr	r0, [r3, #28]
 8016404:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016406:	683a      	ldr	r2, [r7, #0]
 8016408:	6879      	ldr	r1, [r7, #4]
 801640a:	f7ff fef4 	bl	80161f6 <RegionCommonCountNbOfEnabledChannels>
                                              nbEnabledChannels, nbRestrictedChannels );
    }

    if( *nbEnabledChannels > 0 )
 801640e:	683b      	ldr	r3, [r7, #0]
 8016410:	781b      	ldrb	r3, [r3, #0]
 8016412:	2b00      	cmp	r3, #0
 8016414:	d004      	beq.n	8016420 <RegionCommonIdentifyChannels+0xae>
    {
        *nextTxDelay = 0;
 8016416:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016418:	2200      	movs	r2, #0
 801641a:	601a      	str	r2, [r3, #0]
        return LORAMAC_STATUS_OK;
 801641c:	2300      	movs	r3, #0
 801641e:	e006      	b.n	801642e <RegionCommonIdentifyChannels+0xbc>
    }
    else if( *nbRestrictedChannels > 0 )
 8016420:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016422:	781b      	ldrb	r3, [r3, #0]
 8016424:	2b00      	cmp	r3, #0
 8016426:	d001      	beq.n	801642c <RegionCommonIdentifyChannels+0xba>
    {
        return LORAMAC_STATUS_DUTYCYCLE_RESTRICTED;
 8016428:	230b      	movs	r3, #11
 801642a:	e000      	b.n	801642e <RegionCommonIdentifyChannels+0xbc>
    }
    else
    {
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
 801642c:	230c      	movs	r3, #12
    }
}
 801642e:	4618      	mov	r0, r3
 8016430:	371c      	adds	r7, #28
 8016432:	46bd      	mov	sp, r7
 8016434:	bdf0      	pop	{r4, r5, r6, r7, pc}

08016436 <RegionCommonGetNextLowerTxDr>:

int8_t RegionCommonGetNextLowerTxDr( RegionCommonGetNextLowerTxDrParams_t *params )
{
 8016436:	b5b0      	push	{r4, r5, r7, lr}
 8016438:	b086      	sub	sp, #24
 801643a:	af02      	add	r7, sp, #8
 801643c:	6078      	str	r0, [r7, #4]
    int8_t drLocal = params->CurrentDr;
 801643e:	687b      	ldr	r3, [r7, #4]
 8016440:	781b      	ldrb	r3, [r3, #0]
 8016442:	73fb      	strb	r3, [r7, #15]

    if( params->CurrentDr == params->MinDr )
 8016444:	687b      	ldr	r3, [r7, #4]
 8016446:	f993 2000 	ldrsb.w	r2, [r3]
 801644a:	687b      	ldr	r3, [r7, #4]
 801644c:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8016450:	429a      	cmp	r2, r3
 8016452:	d103      	bne.n	801645c <RegionCommonGetNextLowerTxDr+0x26>
    {
        return params->MinDr;
 8016454:	687b      	ldr	r3, [r7, #4]
 8016456:	f993 3002 	ldrsb.w	r3, [r3, #2]
 801645a:	e026      	b.n	80164aa <RegionCommonGetNextLowerTxDr+0x74>
    }
    else
    {
        do
        {
            drLocal = ( drLocal - 1 );
 801645c:	7bfb      	ldrb	r3, [r7, #15]
 801645e:	3b01      	subs	r3, #1
 8016460:	b2db      	uxtb	r3, r3
 8016462:	73fb      	strb	r3, [r7, #15]
        } while( ( drLocal != params->MinDr ) &&
 8016464:	687b      	ldr	r3, [r7, #4]
 8016466:	f993 3002 	ldrsb.w	r3, [r3, #2]
 801646a:	f997 200f 	ldrsb.w	r2, [r7, #15]
 801646e:	429a      	cmp	r2, r3
 8016470:	d019      	beq.n	80164a6 <RegionCommonGetNextLowerTxDr+0x70>
                 ( RegionCommonChanVerifyDr( params->NbChannels, params->ChannelsMask, drLocal, params->MinDr, params->MaxDr, params->Channels  ) == false ) );
 8016472:	687b      	ldr	r3, [r7, #4]
 8016474:	78d8      	ldrb	r0, [r3, #3]
 8016476:	687b      	ldr	r3, [r7, #4]
 8016478:	6859      	ldr	r1, [r3, #4]
 801647a:	687b      	ldr	r3, [r7, #4]
 801647c:	f993 5002 	ldrsb.w	r5, [r3, #2]
 8016480:	687b      	ldr	r3, [r7, #4]
 8016482:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8016486:	687a      	ldr	r2, [r7, #4]
 8016488:	6892      	ldr	r2, [r2, #8]
 801648a:	f997 400f 	ldrsb.w	r4, [r7, #15]
 801648e:	9201      	str	r2, [sp, #4]
 8016490:	9300      	str	r3, [sp, #0]
 8016492:	462b      	mov	r3, r5
 8016494:	4622      	mov	r2, r4
 8016496:	f7ff fa92 	bl	80159be <RegionCommonChanVerifyDr>
 801649a:	4603      	mov	r3, r0
 801649c:	f083 0301 	eor.w	r3, r3, #1
 80164a0:	b2db      	uxtb	r3, r3
        } while( ( drLocal != params->MinDr ) &&
 80164a2:	2b00      	cmp	r3, #0
 80164a4:	d1da      	bne.n	801645c <RegionCommonGetNextLowerTxDr+0x26>

        return drLocal;
 80164a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
    }
}
 80164aa:	4618      	mov	r0, r3
 80164ac:	3710      	adds	r7, #16
 80164ae:	46bd      	mov	sp, r7
 80164b0:	bdb0      	pop	{r4, r5, r7, pc}

080164b2 <RegionCommonLimitTxPower>:

int8_t RegionCommonLimitTxPower( int8_t txPower, int8_t maxBandTxPower )
{
 80164b2:	b480      	push	{r7}
 80164b4:	b083      	sub	sp, #12
 80164b6:	af00      	add	r7, sp, #0
 80164b8:	4603      	mov	r3, r0
 80164ba:	460a      	mov	r2, r1
 80164bc:	71fb      	strb	r3, [r7, #7]
 80164be:	4613      	mov	r3, r2
 80164c0:	71bb      	strb	r3, [r7, #6]
    // Limit tx power to the band max
    return MAX( txPower, maxBandTxPower );
 80164c2:	f997 2006 	ldrsb.w	r2, [r7, #6]
 80164c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80164ca:	4293      	cmp	r3, r2
 80164cc:	bfb8      	it	lt
 80164ce:	4613      	movlt	r3, r2
 80164d0:	b25b      	sxtb	r3, r3
}
 80164d2:	4618      	mov	r0, r3
 80164d4:	370c      	adds	r7, #12
 80164d6:	46bd      	mov	sp, r7
 80164d8:	bc80      	pop	{r7}
 80164da:	4770      	bx	lr

080164dc <RegionCommonGetBandwidth>:

uint32_t RegionCommonGetBandwidth( uint32_t drIndex, const uint32_t* bandwidths )
{
 80164dc:	b480      	push	{r7}
 80164de:	b083      	sub	sp, #12
 80164e0:	af00      	add	r7, sp, #0
 80164e2:	6078      	str	r0, [r7, #4]
 80164e4:	6039      	str	r1, [r7, #0]
    switch( bandwidths[drIndex] )
 80164e6:	687b      	ldr	r3, [r7, #4]
 80164e8:	009b      	lsls	r3, r3, #2
 80164ea:	683a      	ldr	r2, [r7, #0]
 80164ec:	4413      	add	r3, r2
 80164ee:	681b      	ldr	r3, [r3, #0]
 80164f0:	4a07      	ldr	r2, [pc, #28]	@ (8016510 <RegionCommonGetBandwidth+0x34>)
 80164f2:	4293      	cmp	r3, r2
 80164f4:	d004      	beq.n	8016500 <RegionCommonGetBandwidth+0x24>
 80164f6:	4a07      	ldr	r2, [pc, #28]	@ (8016514 <RegionCommonGetBandwidth+0x38>)
 80164f8:	4293      	cmp	r3, r2
 80164fa:	d003      	beq.n	8016504 <RegionCommonGetBandwidth+0x28>
    {
        default:
        case 125000:
            return 0;
 80164fc:	2300      	movs	r3, #0
 80164fe:	e002      	b.n	8016506 <RegionCommonGetBandwidth+0x2a>
        case 250000:
            return 1;
 8016500:	2301      	movs	r3, #1
 8016502:	e000      	b.n	8016506 <RegionCommonGetBandwidth+0x2a>
        case 500000:
            return 2;
 8016504:	2302      	movs	r3, #2
    }
}
 8016506:	4618      	mov	r0, r3
 8016508:	370c      	adds	r7, #12
 801650a:	46bd      	mov	sp, r7
 801650c:	bc80      	pop	{r7}
 801650e:	4770      	bx	lr
 8016510:	0003d090 	.word	0x0003d090
 8016514:	0007a120 	.word	0x0007a120

08016518 <RegionCommonRxConfigPrint>:

void RegionCommonRxConfigPrint(LoRaMacRxSlot_t rxSlot, uint32_t frequency, int8_t dr)
{
 8016518:	b580      	push	{r7, lr}
 801651a:	b086      	sub	sp, #24
 801651c:	af04      	add	r7, sp, #16
 801651e:	4603      	mov	r3, r0
 8016520:	6039      	str	r1, [r7, #0]
 8016522:	71fb      	strb	r3, [r7, #7]
 8016524:	4613      	mov	r3, r2
 8016526:	71bb      	strb	r3, [r7, #6]
    if ( rxSlot < RX_SLOT_NONE )
 8016528:	79fb      	ldrb	r3, [r7, #7]
 801652a:	2b05      	cmp	r3, #5
 801652c:	d810      	bhi.n	8016550 <RegionCommonRxConfigPrint+0x38>
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX_%s on freq %d Hz at DR %d\r\n", EventRXSlotStrings[rxSlot], frequency, dr );
 801652e:	79fb      	ldrb	r3, [r7, #7]
 8016530:	4a0f      	ldr	r2, [pc, #60]	@ (8016570 <RegionCommonRxConfigPrint+0x58>)
 8016532:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8016536:	f997 2006 	ldrsb.w	r2, [r7, #6]
 801653a:	9202      	str	r2, [sp, #8]
 801653c:	683a      	ldr	r2, [r7, #0]
 801653e:	9201      	str	r2, [sp, #4]
 8016540:	9300      	str	r3, [sp, #0]
 8016542:	4b0c      	ldr	r3, [pc, #48]	@ (8016574 <RegionCommonRxConfigPrint+0x5c>)
 8016544:	2201      	movs	r2, #1
 8016546:	2100      	movs	r1, #0
 8016548:	2002      	movs	r0, #2
 801654a:	f004 fbb3 	bl	801acb4 <UTIL_ADV_TRACE_COND_FSend>
    }
    else
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
    }
}
 801654e:	e00a      	b.n	8016566 <RegionCommonRxConfigPrint+0x4e>
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
 8016550:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8016554:	9301      	str	r3, [sp, #4]
 8016556:	683b      	ldr	r3, [r7, #0]
 8016558:	9300      	str	r3, [sp, #0]
 801655a:	4b07      	ldr	r3, [pc, #28]	@ (8016578 <RegionCommonRxConfigPrint+0x60>)
 801655c:	2201      	movs	r2, #1
 801655e:	2100      	movs	r1, #0
 8016560:	2002      	movs	r0, #2
 8016562:	f004 fba7 	bl	801acb4 <UTIL_ADV_TRACE_COND_FSend>
}
 8016566:	bf00      	nop
 8016568:	3708      	adds	r7, #8
 801656a:	46bd      	mov	sp, r7
 801656c:	bd80      	pop	{r7, pc}
 801656e:	bf00      	nop
 8016570:	20000108 	.word	0x20000108
 8016574:	0801b6bc 	.word	0x0801b6bc
 8016578:	0801b6dc 	.word	0x0801b6dc

0801657c <RegionCommonTxConfigPrint>:

void RegionCommonTxConfigPrint(uint32_t frequency, int8_t dr)
{
 801657c:	b580      	push	{r7, lr}
 801657e:	b084      	sub	sp, #16
 8016580:	af02      	add	r7, sp, #8
 8016582:	6078      	str	r0, [r7, #4]
 8016584:	460b      	mov	r3, r1
 8016586:	70fb      	strb	r3, [r7, #3]
    MW_LOG(TS_ON, VLEVEL_M,  "TX on freq %d Hz at DR %d\r\n", frequency, dr );
 8016588:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801658c:	9301      	str	r3, [sp, #4]
 801658e:	687b      	ldr	r3, [r7, #4]
 8016590:	9300      	str	r3, [sp, #0]
 8016592:	4b05      	ldr	r3, [pc, #20]	@ (80165a8 <RegionCommonTxConfigPrint+0x2c>)
 8016594:	2201      	movs	r2, #1
 8016596:	2100      	movs	r1, #0
 8016598:	2002      	movs	r0, #2
 801659a:	f004 fb8b 	bl	801acb4 <UTIL_ADV_TRACE_COND_FSend>
}
 801659e:	bf00      	nop
 80165a0:	3708      	adds	r7, #8
 80165a2:	46bd      	mov	sp, r7
 80165a4:	bd80      	pop	{r7, pc}
 80165a6:	bf00      	nop
 80165a8:	0801b6f8 	.word	0x0801b6f8

080165ac <rand1>:
static uint32_t next = 1;

static int32_t rand1( void );

static int32_t rand1( void )
{
 80165ac:	b480      	push	{r7}
 80165ae:	af00      	add	r7, sp, #0
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
 80165b0:	4b0d      	ldr	r3, [pc, #52]	@ (80165e8 <rand1+0x3c>)
 80165b2:	681b      	ldr	r3, [r3, #0]
 80165b4:	4a0d      	ldr	r2, [pc, #52]	@ (80165ec <rand1+0x40>)
 80165b6:	fb02 f303 	mul.w	r3, r2, r3
 80165ba:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 80165be:	3339      	adds	r3, #57	@ 0x39
 80165c0:	4a09      	ldr	r2, [pc, #36]	@ (80165e8 <rand1+0x3c>)
 80165c2:	6013      	str	r3, [r2, #0]
 80165c4:	4b08      	ldr	r3, [pc, #32]	@ (80165e8 <rand1+0x3c>)
 80165c6:	681a      	ldr	r2, [r3, #0]
 80165c8:	2303      	movs	r3, #3
 80165ca:	fba3 1302 	umull	r1, r3, r3, r2
 80165ce:	1ad1      	subs	r1, r2, r3
 80165d0:	0849      	lsrs	r1, r1, #1
 80165d2:	440b      	add	r3, r1
 80165d4:	0f99      	lsrs	r1, r3, #30
 80165d6:	460b      	mov	r3, r1
 80165d8:	07db      	lsls	r3, r3, #31
 80165da:	1a5b      	subs	r3, r3, r1
 80165dc:	1ad1      	subs	r1, r2, r3
 80165de:	460b      	mov	r3, r1
}
 80165e0:	4618      	mov	r0, r3
 80165e2:	46bd      	mov	sp, r7
 80165e4:	bc80      	pop	{r7}
 80165e6:	4770      	bx	lr
 80165e8:	20000120 	.word	0x20000120
 80165ec:	41c64e6d 	.word	0x41c64e6d

080165f0 <srand1>:

void srand1( uint32_t seed )
{
 80165f0:	b480      	push	{r7}
 80165f2:	b083      	sub	sp, #12
 80165f4:	af00      	add	r7, sp, #0
 80165f6:	6078      	str	r0, [r7, #4]
    next = seed;
 80165f8:	4a03      	ldr	r2, [pc, #12]	@ (8016608 <srand1+0x18>)
 80165fa:	687b      	ldr	r3, [r7, #4]
 80165fc:	6013      	str	r3, [r2, #0]
}
 80165fe:	bf00      	nop
 8016600:	370c      	adds	r7, #12
 8016602:	46bd      	mov	sp, r7
 8016604:	bc80      	pop	{r7}
 8016606:	4770      	bx	lr
 8016608:	20000120 	.word	0x20000120

0801660c <randr>:
// Standard random functions redefinition end

int32_t randr( int32_t min, int32_t max )
{
 801660c:	b580      	push	{r7, lr}
 801660e:	b082      	sub	sp, #8
 8016610:	af00      	add	r7, sp, #0
 8016612:	6078      	str	r0, [r7, #4]
 8016614:	6039      	str	r1, [r7, #0]
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
 8016616:	f7ff ffc9 	bl	80165ac <rand1>
 801661a:	4602      	mov	r2, r0
 801661c:	6839      	ldr	r1, [r7, #0]
 801661e:	687b      	ldr	r3, [r7, #4]
 8016620:	1acb      	subs	r3, r1, r3
 8016622:	3301      	adds	r3, #1
 8016624:	fb92 f1f3 	sdiv	r1, r2, r3
 8016628:	fb01 f303 	mul.w	r3, r1, r3
 801662c:	1ad2      	subs	r2, r2, r3
 801662e:	687b      	ldr	r3, [r7, #4]
 8016630:	4413      	add	r3, r2
}
 8016632:	4618      	mov	r0, r3
 8016634:	3708      	adds	r7, #8
 8016636:	46bd      	mov	sp, r7
 8016638:	bd80      	pop	{r7, pc}

0801663a <memcpy1>:

void memcpy1( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 801663a:	b480      	push	{r7}
 801663c:	b085      	sub	sp, #20
 801663e:	af00      	add	r7, sp, #0
 8016640:	60f8      	str	r0, [r7, #12]
 8016642:	60b9      	str	r1, [r7, #8]
 8016644:	4613      	mov	r3, r2
 8016646:	80fb      	strh	r3, [r7, #6]
    while( size-- )
 8016648:	e007      	b.n	801665a <memcpy1+0x20>
    {
        *dst++ = *src++;
 801664a:	68ba      	ldr	r2, [r7, #8]
 801664c:	1c53      	adds	r3, r2, #1
 801664e:	60bb      	str	r3, [r7, #8]
 8016650:	68fb      	ldr	r3, [r7, #12]
 8016652:	1c59      	adds	r1, r3, #1
 8016654:	60f9      	str	r1, [r7, #12]
 8016656:	7812      	ldrb	r2, [r2, #0]
 8016658:	701a      	strb	r2, [r3, #0]
    while( size-- )
 801665a:	88fb      	ldrh	r3, [r7, #6]
 801665c:	1e5a      	subs	r2, r3, #1
 801665e:	80fa      	strh	r2, [r7, #6]
 8016660:	2b00      	cmp	r3, #0
 8016662:	d1f2      	bne.n	801664a <memcpy1+0x10>
    }
}
 8016664:	bf00      	nop
 8016666:	bf00      	nop
 8016668:	3714      	adds	r7, #20
 801666a:	46bd      	mov	sp, r7
 801666c:	bc80      	pop	{r7}
 801666e:	4770      	bx	lr

08016670 <memcpyr>:

void memcpyr( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 8016670:	b480      	push	{r7}
 8016672:	b085      	sub	sp, #20
 8016674:	af00      	add	r7, sp, #0
 8016676:	60f8      	str	r0, [r7, #12]
 8016678:	60b9      	str	r1, [r7, #8]
 801667a:	4613      	mov	r3, r2
 801667c:	80fb      	strh	r3, [r7, #6]
    dst = dst + ( size - 1 );
 801667e:	88fb      	ldrh	r3, [r7, #6]
 8016680:	3b01      	subs	r3, #1
 8016682:	68fa      	ldr	r2, [r7, #12]
 8016684:	4413      	add	r3, r2
 8016686:	60fb      	str	r3, [r7, #12]
    while( size-- )
 8016688:	e007      	b.n	801669a <memcpyr+0x2a>
    {
        *dst-- = *src++;
 801668a:	68ba      	ldr	r2, [r7, #8]
 801668c:	1c53      	adds	r3, r2, #1
 801668e:	60bb      	str	r3, [r7, #8]
 8016690:	68fb      	ldr	r3, [r7, #12]
 8016692:	1e59      	subs	r1, r3, #1
 8016694:	60f9      	str	r1, [r7, #12]
 8016696:	7812      	ldrb	r2, [r2, #0]
 8016698:	701a      	strb	r2, [r3, #0]
    while( size-- )
 801669a:	88fb      	ldrh	r3, [r7, #6]
 801669c:	1e5a      	subs	r2, r3, #1
 801669e:	80fa      	strh	r2, [r7, #6]
 80166a0:	2b00      	cmp	r3, #0
 80166a2:	d1f2      	bne.n	801668a <memcpyr+0x1a>
    }
}
 80166a4:	bf00      	nop
 80166a6:	bf00      	nop
 80166a8:	3714      	adds	r7, #20
 80166aa:	46bd      	mov	sp, r7
 80166ac:	bc80      	pop	{r7}
 80166ae:	4770      	bx	lr

080166b0 <memset1>:

void memset1( uint8_t *dst, uint8_t value, uint16_t size )
{
 80166b0:	b480      	push	{r7}
 80166b2:	b083      	sub	sp, #12
 80166b4:	af00      	add	r7, sp, #0
 80166b6:	6078      	str	r0, [r7, #4]
 80166b8:	460b      	mov	r3, r1
 80166ba:	70fb      	strb	r3, [r7, #3]
 80166bc:	4613      	mov	r3, r2
 80166be:	803b      	strh	r3, [r7, #0]
    while( size-- )
 80166c0:	e004      	b.n	80166cc <memset1+0x1c>
    {
        *dst++ = value;
 80166c2:	687b      	ldr	r3, [r7, #4]
 80166c4:	1c5a      	adds	r2, r3, #1
 80166c6:	607a      	str	r2, [r7, #4]
 80166c8:	78fa      	ldrb	r2, [r7, #3]
 80166ca:	701a      	strb	r2, [r3, #0]
    while( size-- )
 80166cc:	883b      	ldrh	r3, [r7, #0]
 80166ce:	1e5a      	subs	r2, r3, #1
 80166d0:	803a      	strh	r2, [r7, #0]
 80166d2:	2b00      	cmp	r3, #0
 80166d4:	d1f5      	bne.n	80166c2 <memset1+0x12>
    }
}
 80166d6:	bf00      	nop
 80166d8:	bf00      	nop
 80166da:	370c      	adds	r7, #12
 80166dc:	46bd      	mov	sp, r7
 80166de:	bc80      	pop	{r7}
 80166e0:	4770      	bx	lr
	...

080166e4 <Crc32>:
        return '?';
    }
}

uint32_t Crc32( uint8_t *buffer, uint16_t length )
{
 80166e4:	b480      	push	{r7}
 80166e6:	b085      	sub	sp, #20
 80166e8:	af00      	add	r7, sp, #0
 80166ea:	6078      	str	r0, [r7, #4]
 80166ec:	460b      	mov	r3, r1
 80166ee:	807b      	strh	r3, [r7, #2]
    // CRC initial value
    uint32_t crc = 0xFFFFFFFF;
 80166f0:	f04f 33ff 	mov.w	r3, #4294967295
 80166f4:	60fb      	str	r3, [r7, #12]

    if( buffer == NULL )
 80166f6:	687b      	ldr	r3, [r7, #4]
 80166f8:	2b00      	cmp	r3, #0
 80166fa:	d101      	bne.n	8016700 <Crc32+0x1c>
    {
        return 0;
 80166fc:	2300      	movs	r3, #0
 80166fe:	e026      	b.n	801674e <Crc32+0x6a>
    }

    for( uint16_t i = 0; i < length; ++i )
 8016700:	2300      	movs	r3, #0
 8016702:	817b      	strh	r3, [r7, #10]
 8016704:	e01d      	b.n	8016742 <Crc32+0x5e>
    {
        crc ^= ( uint32_t )buffer[i];
 8016706:	897b      	ldrh	r3, [r7, #10]
 8016708:	687a      	ldr	r2, [r7, #4]
 801670a:	4413      	add	r3, r2
 801670c:	781b      	ldrb	r3, [r3, #0]
 801670e:	461a      	mov	r2, r3
 8016710:	68fb      	ldr	r3, [r7, #12]
 8016712:	4053      	eors	r3, r2
 8016714:	60fb      	str	r3, [r7, #12]
        for( uint16_t i = 0; i < 8; i++ )
 8016716:	2300      	movs	r3, #0
 8016718:	813b      	strh	r3, [r7, #8]
 801671a:	e00c      	b.n	8016736 <Crc32+0x52>
        {
            crc = ( crc >> 1 ) ^ ( reversedPolynom & ~( ( crc & 0x01 ) - 1 ) );
 801671c:	68fb      	ldr	r3, [r7, #12]
 801671e:	085a      	lsrs	r2, r3, #1
 8016720:	68fb      	ldr	r3, [r7, #12]
 8016722:	f003 0301 	and.w	r3, r3, #1
 8016726:	425b      	negs	r3, r3
 8016728:	490b      	ldr	r1, [pc, #44]	@ (8016758 <Crc32+0x74>)
 801672a:	400b      	ands	r3, r1
 801672c:	4053      	eors	r3, r2
 801672e:	60fb      	str	r3, [r7, #12]
        for( uint16_t i = 0; i < 8; i++ )
 8016730:	893b      	ldrh	r3, [r7, #8]
 8016732:	3301      	adds	r3, #1
 8016734:	813b      	strh	r3, [r7, #8]
 8016736:	893b      	ldrh	r3, [r7, #8]
 8016738:	2b07      	cmp	r3, #7
 801673a:	d9ef      	bls.n	801671c <Crc32+0x38>
    for( uint16_t i = 0; i < length; ++i )
 801673c:	897b      	ldrh	r3, [r7, #10]
 801673e:	3301      	adds	r3, #1
 8016740:	817b      	strh	r3, [r7, #10]
 8016742:	897a      	ldrh	r2, [r7, #10]
 8016744:	887b      	ldrh	r3, [r7, #2]
 8016746:	429a      	cmp	r2, r3
 8016748:	d3dd      	bcc.n	8016706 <Crc32+0x22>
        }
    }

    return ~crc;
 801674a:	68fb      	ldr	r3, [r7, #12]
 801674c:	43db      	mvns	r3, r3
}
 801674e:	4618      	mov	r0, r3
 8016750:	3714      	adds	r7, #20
 8016752:	46bd      	mov	sp, r7
 8016754:	bc80      	pop	{r7}
 8016756:	4770      	bx	lr
 8016758:	edb88320 	.word	0xedb88320

0801675c <RadioInit>:
TimerEvent_t RxTimeoutTimer;

/* Private  functions ---------------------------------------------------------*/

static void RadioInit( RadioEvents_t *events )
{
 801675c:	b580      	push	{r7, lr}
 801675e:	b084      	sub	sp, #16
 8016760:	af02      	add	r7, sp, #8
 8016762:	6078      	str	r0, [r7, #4]
    RadioEvents = events;
 8016764:	4a24      	ldr	r2, [pc, #144]	@ (80167f8 <RadioInit+0x9c>)
 8016766:	687b      	ldr	r3, [r7, #4]
 8016768:	6013      	str	r3, [r2, #0]

    SubgRf.RxContinuous = false;
 801676a:	4b24      	ldr	r3, [pc, #144]	@ (80167fc <RadioInit+0xa0>)
 801676c:	2200      	movs	r2, #0
 801676e:	705a      	strb	r2, [r3, #1]
    SubgRf.TxTimeout = 0;
 8016770:	4b22      	ldr	r3, [pc, #136]	@ (80167fc <RadioInit+0xa0>)
 8016772:	2200      	movs	r2, #0
 8016774:	605a      	str	r2, [r3, #4]
    SubgRf.RxTimeout = 0;
 8016776:	4b21      	ldr	r3, [pc, #132]	@ (80167fc <RadioInit+0xa0>)
 8016778:	2200      	movs	r2, #0
 801677a:	609a      	str	r2, [r3, #8]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 801677c:	4b1f      	ldr	r3, [pc, #124]	@ (80167fc <RadioInit+0xa0>)
 801677e:	2200      	movs	r2, #0
 8016780:	659a      	str	r2, [r3, #88]	@ 0x58
#if( RADIO_LR_FHSS_IS_ON == 1 )
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    SUBGRF_Init( RadioOnDioIrq );
 8016782:	481f      	ldr	r0, [pc, #124]	@ (8016800 <RadioInit+0xa4>)
 8016784:	f001 ffc2 	bl	801870c <SUBGRF_Init>
    /*SubgRf.publicNetwork set to false*/
    SubgRf.PublicNetwork.Current = false;
 8016788:	4b1c      	ldr	r3, [pc, #112]	@ (80167fc <RadioInit+0xa0>)
 801678a:	2200      	movs	r2, #0
 801678c:	735a      	strb	r2, [r3, #13]
    SubgRf.PublicNetwork.Previous = false;
 801678e:	4b1b      	ldr	r3, [pc, #108]	@ (80167fc <RadioInit+0xa0>)
 8016790:	2200      	movs	r2, #0
 8016792:	731a      	strb	r2, [r3, #12]

    RADIO_IRQ_PROCESS_INIT();

    SUBGRF_SetRegulatorMode( );
 8016794:	f002 fa56 	bl	8018c44 <SUBGRF_SetRegulatorMode>

    SUBGRF_SetBufferBaseAddress( 0x00, 0x00 );
 8016798:	2100      	movs	r1, #0
 801679a:	2000      	movs	r0, #0
 801679c:	f002 fe22 	bl	80193e4 <SUBGRF_SetBufferBaseAddress>
    SUBGRF_SetTxParams( RFO_LP, 0, RADIO_RAMP_200_US );
 80167a0:	2204      	movs	r2, #4
 80167a2:	2100      	movs	r1, #0
 80167a4:	2001      	movs	r0, #1
 80167a6:	f002 fbdf 	bl	8018f68 <SUBGRF_SetTxParams>
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 80167aa:	2300      	movs	r3, #0
 80167ac:	2200      	movs	r2, #0
 80167ae:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80167b2:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80167b6:	f002 fb0f 	bl	8018dd8 <SUBGRF_SetDioIrqParams>

    RadioSleep();
 80167ba:	f000 fe99 	bl	80174f0 <RadioSleep>
    // Initialize driver timeout timers
    TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
 80167be:	2300      	movs	r3, #0
 80167c0:	9300      	str	r3, [sp, #0]
 80167c2:	4b10      	ldr	r3, [pc, #64]	@ (8016804 <RadioInit+0xa8>)
 80167c4:	2200      	movs	r2, #0
 80167c6:	f04f 31ff 	mov.w	r1, #4294967295
 80167ca:	480f      	ldr	r0, [pc, #60]	@ (8016808 <RadioInit+0xac>)
 80167cc:	f004 f844 	bl	801a858 <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutTimer, RadioOnRxTimeoutIrq );
 80167d0:	2300      	movs	r3, #0
 80167d2:	9300      	str	r3, [sp, #0]
 80167d4:	4b0d      	ldr	r3, [pc, #52]	@ (801680c <RadioInit+0xb0>)
 80167d6:	2200      	movs	r2, #0
 80167d8:	f04f 31ff 	mov.w	r1, #4294967295
 80167dc:	480c      	ldr	r0, [pc, #48]	@ (8016810 <RadioInit+0xb4>)
 80167de:	f004 f83b 	bl	801a858 <UTIL_TIMER_Create>
    TimerStop( &TxTimeoutTimer );
 80167e2:	4809      	ldr	r0, [pc, #36]	@ (8016808 <RadioInit+0xac>)
 80167e4:	f004 f8dc 	bl	801a9a0 <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutTimer );
 80167e8:	4809      	ldr	r0, [pc, #36]	@ (8016810 <RadioInit+0xb4>)
 80167ea:	f004 f8d9 	bl	801a9a0 <UTIL_TIMER_Stop>
}
 80167ee:	bf00      	nop
 80167f0:	3708      	adds	r7, #8
 80167f2:	46bd      	mov	sp, r7
 80167f4:	bd80      	pop	{r7, pc}
 80167f6:	bf00      	nop
 80167f8:	200014e8 	.word	0x200014e8
 80167fc:	200014ec 	.word	0x200014ec
 8016800:	080178e5 	.word	0x080178e5
 8016804:	0801786d 	.word	0x0801786d
 8016808:	20001548 	.word	0x20001548
 801680c:	08017881 	.word	0x08017881
 8016810:	20001560 	.word	0x20001560

08016814 <RadioGetStatus>:

static RadioState_t RadioGetStatus( void )
{
 8016814:	b580      	push	{r7, lr}
 8016816:	af00      	add	r7, sp, #0
    switch( SUBGRF_GetOperatingMode( ) )
 8016818:	f001 ffc0 	bl	801879c <SUBGRF_GetOperatingMode>
 801681c:	4603      	mov	r3, r0
 801681e:	2b07      	cmp	r3, #7
 8016820:	d00a      	beq.n	8016838 <RadioGetStatus+0x24>
 8016822:	2b07      	cmp	r3, #7
 8016824:	dc0a      	bgt.n	801683c <RadioGetStatus+0x28>
 8016826:	2b04      	cmp	r3, #4
 8016828:	d002      	beq.n	8016830 <RadioGetStatus+0x1c>
 801682a:	2b05      	cmp	r3, #5
 801682c:	d002      	beq.n	8016834 <RadioGetStatus+0x20>
 801682e:	e005      	b.n	801683c <RadioGetStatus+0x28>
    {
        case MODE_TX:
            return RF_TX_RUNNING;
 8016830:	2302      	movs	r3, #2
 8016832:	e004      	b.n	801683e <RadioGetStatus+0x2a>
        case MODE_RX:
            return RF_RX_RUNNING;
 8016834:	2301      	movs	r3, #1
 8016836:	e002      	b.n	801683e <RadioGetStatus+0x2a>
        case MODE_CAD:
            return RF_CAD;
 8016838:	2303      	movs	r3, #3
 801683a:	e000      	b.n	801683e <RadioGetStatus+0x2a>
        default:
            return RF_IDLE;
 801683c:	2300      	movs	r3, #0
    }
}
 801683e:	4618      	mov	r0, r3
 8016840:	bd80      	pop	{r7, pc}
	...

08016844 <RadioSetModem>:

static void RadioSetModem( RadioModems_t modem )
{
 8016844:	b580      	push	{r7, lr}
 8016846:	b082      	sub	sp, #8
 8016848:	af00      	add	r7, sp, #0
 801684a:	4603      	mov	r3, r0
 801684c:	71fb      	strb	r3, [r7, #7]
    SubgRf.Modem = modem;
 801684e:	4a2a      	ldr	r2, [pc, #168]	@ (80168f8 <RadioSetModem+0xb4>)
 8016850:	79fb      	ldrb	r3, [r7, #7]
 8016852:	7013      	strb	r3, [r2, #0]
    RFW_SetRadioModem( modem );
 8016854:	79fb      	ldrb	r3, [r7, #7]
 8016856:	4618      	mov	r0, r3
 8016858:	f003 f9b1 	bl	8019bbe <RFW_SetRadioModem>
    switch( modem )
 801685c:	79fb      	ldrb	r3, [r7, #7]
 801685e:	2b05      	cmp	r3, #5
 8016860:	d80e      	bhi.n	8016880 <RadioSetModem+0x3c>
 8016862:	a201      	add	r2, pc, #4	@ (adr r2, 8016868 <RadioSetModem+0x24>)
 8016864:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016868:	0801688f 	.word	0x0801688f
 801686c:	0801689d 	.word	0x0801689d
 8016870:	08016881 	.word	0x08016881
 8016874:	080168c3 	.word	0x080168c3
 8016878:	080168d1 	.word	0x080168d1
 801687c:	080168df 	.word	0x080168df
    {
    default:
    case MODEM_MSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GMSK );
 8016880:	2003      	movs	r0, #3
 8016882:	f002 fb4b 	bl	8018f1c <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8016886:	4b1c      	ldr	r3, [pc, #112]	@ (80168f8 <RadioSetModem+0xb4>)
 8016888:	2200      	movs	r2, #0
 801688a:	735a      	strb	r2, [r3, #13]
        break;
 801688c:	e02f      	b.n	80168ee <RadioSetModem+0xaa>
    case MODEM_FSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 801688e:	2000      	movs	r0, #0
 8016890:	f002 fb44 	bl	8018f1c <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8016894:	4b18      	ldr	r3, [pc, #96]	@ (80168f8 <RadioSetModem+0xb4>)
 8016896:	2200      	movs	r2, #0
 8016898:	735a      	strb	r2, [r3, #13]
        break;
 801689a:	e028      	b.n	80168ee <RadioSetModem+0xaa>
    case MODEM_LORA:
        SUBGRF_SetPacketType( PACKET_TYPE_LORA );
 801689c:	2001      	movs	r0, #1
 801689e:	f002 fb3d 	bl	8018f1c <SUBGRF_SetPacketType>
        // Public/Private network register is reset when switching modems
        if( SubgRf.PublicNetwork.Current != SubgRf.PublicNetwork.Previous )
 80168a2:	4b15      	ldr	r3, [pc, #84]	@ (80168f8 <RadioSetModem+0xb4>)
 80168a4:	7b5a      	ldrb	r2, [r3, #13]
 80168a6:	4b14      	ldr	r3, [pc, #80]	@ (80168f8 <RadioSetModem+0xb4>)
 80168a8:	7b1b      	ldrb	r3, [r3, #12]
 80168aa:	429a      	cmp	r2, r3
 80168ac:	d01e      	beq.n	80168ec <RadioSetModem+0xa8>
        {
            SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous;
 80168ae:	4b12      	ldr	r3, [pc, #72]	@ (80168f8 <RadioSetModem+0xb4>)
 80168b0:	7b1a      	ldrb	r2, [r3, #12]
 80168b2:	4b11      	ldr	r3, [pc, #68]	@ (80168f8 <RadioSetModem+0xb4>)
 80168b4:	735a      	strb	r2, [r3, #13]
            RadioSetPublicNetwork( SubgRf.PublicNetwork.Current );
 80168b6:	4b10      	ldr	r3, [pc, #64]	@ (80168f8 <RadioSetModem+0xb4>)
 80168b8:	7b5b      	ldrb	r3, [r3, #13]
 80168ba:	4618      	mov	r0, r3
 80168bc:	f000 ffa0 	bl	8017800 <RadioSetPublicNetwork>
        }
        break;
 80168c0:	e014      	b.n	80168ec <RadioSetModem+0xa8>
    case MODEM_BPSK:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 80168c2:	2002      	movs	r0, #2
 80168c4:	f002 fb2a 	bl	8018f1c <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 80168c8:	4b0b      	ldr	r3, [pc, #44]	@ (80168f8 <RadioSetModem+0xb4>)
 80168ca:	2200      	movs	r2, #0
 80168cc:	735a      	strb	r2, [r3, #13]
        break;
 80168ce:	e00e      	b.n	80168ee <RadioSetModem+0xaa>
#if (RADIO_SIGFOX_ENABLE == 1)
    case MODEM_SIGFOX_TX:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 80168d0:	2002      	movs	r0, #2
 80168d2:	f002 fb23 	bl	8018f1c <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 80168d6:	4b08      	ldr	r3, [pc, #32]	@ (80168f8 <RadioSetModem+0xb4>)
 80168d8:	2200      	movs	r2, #0
 80168da:	735a      	strb	r2, [r3, #13]
        break;
 80168dc:	e007      	b.n	80168ee <RadioSetModem+0xaa>
    case MODEM_SIGFOX_RX:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 80168de:	2000      	movs	r0, #0
 80168e0:	f002 fb1c 	bl	8018f1c <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 80168e4:	4b04      	ldr	r3, [pc, #16]	@ (80168f8 <RadioSetModem+0xb4>)
 80168e6:	2200      	movs	r2, #0
 80168e8:	735a      	strb	r2, [r3, #13]
        break;
 80168ea:	e000      	b.n	80168ee <RadioSetModem+0xaa>
        break;
 80168ec:	bf00      	nop
#endif /*RADIO_SIGFOX_ENABLE == 1*/
    }
}
 80168ee:	bf00      	nop
 80168f0:	3708      	adds	r7, #8
 80168f2:	46bd      	mov	sp, r7
 80168f4:	bd80      	pop	{r7, pc}
 80168f6:	bf00      	nop
 80168f8:	200014ec 	.word	0x200014ec

080168fc <RadioSetChannel>:

static void RadioSetChannel( uint32_t freq )
{
 80168fc:	b580      	push	{r7, lr}
 80168fe:	b082      	sub	sp, #8
 8016900:	af00      	add	r7, sp, #0
 8016902:	6078      	str	r0, [r7, #4]
    SUBGRF_SetRfFrequency( freq );
 8016904:	6878      	ldr	r0, [r7, #4]
 8016906:	f002 fac3 	bl	8018e90 <SUBGRF_SetRfFrequency>
}
 801690a:	bf00      	nop
 801690c:	3708      	adds	r7, #8
 801690e:	46bd      	mov	sp, r7
 8016910:	bd80      	pop	{r7, pc}

08016912 <RadioIsChannelFree>:

static bool RadioIsChannelFree( uint32_t freq, uint32_t rxBandwidth, int16_t rssiThresh, uint32_t maxCarrierSenseTime )
{
 8016912:	b580      	push	{r7, lr}
 8016914:	b090      	sub	sp, #64	@ 0x40
 8016916:	af0a      	add	r7, sp, #40	@ 0x28
 8016918:	60f8      	str	r0, [r7, #12]
 801691a:	60b9      	str	r1, [r7, #8]
 801691c:	603b      	str	r3, [r7, #0]
 801691e:	4613      	mov	r3, r2
 8016920:	80fb      	strh	r3, [r7, #6]
    bool status = true;
 8016922:	2301      	movs	r3, #1
 8016924:	75fb      	strb	r3, [r7, #23]
    int16_t rssi = 0;
 8016926:	2300      	movs	r3, #0
 8016928:	82bb      	strh	r3, [r7, #20]
    uint32_t carrierSenseTime = 0;
 801692a:	2300      	movs	r3, #0
 801692c:	613b      	str	r3, [r7, #16]

    RadioStandby( );
 801692e:	f000 fdf2 	bl	8017516 <RadioStandby>

    RadioSetModem( MODEM_FSK );
 8016932:	2000      	movs	r0, #0
 8016934:	f7ff ff86 	bl	8016844 <RadioSetModem>

    RadioSetChannel( freq );
 8016938:	68f8      	ldr	r0, [r7, #12]
 801693a:	f7ff ffdf 	bl	80168fc <RadioSetChannel>

    // Set Rx bandwidth. Other parameters are not used.
    RadioSetRxConfig( MODEM_FSK, rxBandwidth, 600, 0, rxBandwidth, 3, 0, false,
 801693e:	2301      	movs	r3, #1
 8016940:	9309      	str	r3, [sp, #36]	@ 0x24
 8016942:	2300      	movs	r3, #0
 8016944:	9308      	str	r3, [sp, #32]
 8016946:	2300      	movs	r3, #0
 8016948:	9307      	str	r3, [sp, #28]
 801694a:	2300      	movs	r3, #0
 801694c:	9306      	str	r3, [sp, #24]
 801694e:	2300      	movs	r3, #0
 8016950:	9305      	str	r3, [sp, #20]
 8016952:	2300      	movs	r3, #0
 8016954:	9304      	str	r3, [sp, #16]
 8016956:	2300      	movs	r3, #0
 8016958:	9303      	str	r3, [sp, #12]
 801695a:	2300      	movs	r3, #0
 801695c:	9302      	str	r3, [sp, #8]
 801695e:	2303      	movs	r3, #3
 8016960:	9301      	str	r3, [sp, #4]
 8016962:	68bb      	ldr	r3, [r7, #8]
 8016964:	9300      	str	r3, [sp, #0]
 8016966:	2300      	movs	r3, #0
 8016968:	f44f 7216 	mov.w	r2, #600	@ 0x258
 801696c:	68b9      	ldr	r1, [r7, #8]
 801696e:	2000      	movs	r0, #0
 8016970:	f000 f83c 	bl	80169ec <RadioSetRxConfig>
                      0, false, 0, 0, false, true );
    RadioRx( 0 );
 8016974:	2000      	movs	r0, #0
 8016976:	f000 fdd5 	bl	8017524 <RadioRx>

    RADIO_DELAY_MS( RadioGetWakeupTime( ) );
 801697a:	f000 ff6f 	bl	801785c <RadioGetWakeupTime>
 801697e:	4603      	mov	r3, r0
 8016980:	4618      	mov	r0, r3
 8016982:	f7eb f95b 	bl	8001c3c <HAL_Delay>

    carrierSenseTime = TimerGetCurrentTime( );
 8016986:	f004 f8a5 	bl	801aad4 <UTIL_TIMER_GetCurrentTime>
 801698a:	6138      	str	r0, [r7, #16]

    // Perform carrier sense for maxCarrierSenseTime
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 801698c:	e00d      	b.n	80169aa <RadioIsChannelFree+0x98>
    {
        rssi = RadioRssi( MODEM_FSK );
 801698e:	2000      	movs	r0, #0
 8016990:	f000 feb6 	bl	8017700 <RadioRssi>
 8016994:	4603      	mov	r3, r0
 8016996:	82bb      	strh	r3, [r7, #20]

        if( rssi > rssiThresh )
 8016998:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 801699c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80169a0:	429a      	cmp	r2, r3
 80169a2:	dd02      	ble.n	80169aa <RadioIsChannelFree+0x98>
        {
            status = false;
 80169a4:	2300      	movs	r3, #0
 80169a6:	75fb      	strb	r3, [r7, #23]
            break;
 80169a8:	e006      	b.n	80169b8 <RadioIsChannelFree+0xa6>
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 80169aa:	6938      	ldr	r0, [r7, #16]
 80169ac:	f004 f8a4 	bl	801aaf8 <UTIL_TIMER_GetElapsedTime>
 80169b0:	4602      	mov	r2, r0
 80169b2:	683b      	ldr	r3, [r7, #0]
 80169b4:	4293      	cmp	r3, r2
 80169b6:	d8ea      	bhi.n	801698e <RadioIsChannelFree+0x7c>
        }
    }
    RadioStandby( );
 80169b8:	f000 fdad 	bl	8017516 <RadioStandby>

    return status;
 80169bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80169be:	4618      	mov	r0, r3
 80169c0:	3718      	adds	r7, #24
 80169c2:	46bd      	mov	sp, r7
 80169c4:	bd80      	pop	{r7, pc}

080169c6 <RadioRandom>:

static uint32_t RadioRandom( void )
{
 80169c6:	b580      	push	{r7, lr}
 80169c8:	b082      	sub	sp, #8
 80169ca:	af00      	add	r7, sp, #0
    uint32_t rnd = 0;
 80169cc:	2300      	movs	r3, #0
 80169ce:	607b      	str	r3, [r7, #4]

    /*
     * Radio setup for random number generation
     */
    // Disable modem interrupts
    SUBGRF_SetDioIrqParams( IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 80169d0:	2300      	movs	r3, #0
 80169d2:	2200      	movs	r2, #0
 80169d4:	2100      	movs	r1, #0
 80169d6:	2000      	movs	r0, #0
 80169d8:	f002 f9fe 	bl	8018dd8 <SUBGRF_SetDioIrqParams>

    rnd = SUBGRF_GetRandom();
 80169dc:	f001 ffaf 	bl	801893e <SUBGRF_GetRandom>
 80169e0:	6078      	str	r0, [r7, #4]

    return rnd;
 80169e2:	687b      	ldr	r3, [r7, #4]
}
 80169e4:	4618      	mov	r0, r3
 80169e6:	3708      	adds	r7, #8
 80169e8:	46bd      	mov	sp, r7
 80169ea:	bd80      	pop	{r7, pc}

080169ec <RadioSetRxConfig>:
                              uint32_t bandwidthAfc, uint16_t preambleLen,
                              uint16_t symbTimeout, bool fixLen,
                              uint8_t payloadLen,
                              bool crcOn, bool freqHopOn, uint8_t hopPeriod,
                              bool iqInverted, bool rxContinuous )
{
 80169ec:	b580      	push	{r7, lr}
 80169ee:	b08a      	sub	sp, #40	@ 0x28
 80169f0:	af00      	add	r7, sp, #0
 80169f2:	60b9      	str	r1, [r7, #8]
 80169f4:	607a      	str	r2, [r7, #4]
 80169f6:	461a      	mov	r2, r3
 80169f8:	4603      	mov	r3, r0
 80169fa:	73fb      	strb	r3, [r7, #15]
 80169fc:	4613      	mov	r3, r2
 80169fe:	73bb      	strb	r3, [r7, #14]
#if (RADIO_SIGFOX_ENABLE == 1)
    uint8_t modReg;
#endif
    SubgRf.RxContinuous = rxContinuous;
 8016a00:	4ab9      	ldr	r2, [pc, #740]	@ (8016ce8 <RadioSetRxConfig+0x2fc>)
 8016a02:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8016a06:	7053      	strb	r3, [r2, #1]
    RFW_DeInit();
 8016a08:	f003 f897 	bl	8019b3a <RFW_DeInit>
    if( rxContinuous == true )
 8016a0c:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8016a10:	2b00      	cmp	r3, #0
 8016a12:	d001      	beq.n	8016a18 <RadioSetRxConfig+0x2c>
    {
        symbTimeout = 0;
 8016a14:	2300      	movs	r3, #0
 8016a16:	873b      	strh	r3, [r7, #56]	@ 0x38
    }
    if( fixLen == true )
 8016a18:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8016a1c:	2b00      	cmp	r3, #0
 8016a1e:	d004      	beq.n	8016a2a <RadioSetRxConfig+0x3e>
    {
        MaxPayloadLength = payloadLen;
 8016a20:	4ab2      	ldr	r2, [pc, #712]	@ (8016cec <RadioSetRxConfig+0x300>)
 8016a22:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8016a26:	7013      	strb	r3, [r2, #0]
 8016a28:	e002      	b.n	8016a30 <RadioSetRxConfig+0x44>
    }
    else
    {
        MaxPayloadLength = 0xFF;
 8016a2a:	4bb0      	ldr	r3, [pc, #704]	@ (8016cec <RadioSetRxConfig+0x300>)
 8016a2c:	22ff      	movs	r2, #255	@ 0xff
 8016a2e:	701a      	strb	r2, [r3, #0]
    }

    switch( modem )
 8016a30:	7bfb      	ldrb	r3, [r7, #15]
 8016a32:	2b05      	cmp	r3, #5
 8016a34:	d009      	beq.n	8016a4a <RadioSetRxConfig+0x5e>
 8016a36:	2b05      	cmp	r3, #5
 8016a38:	f300 81d7 	bgt.w	8016dea <RadioSetRxConfig+0x3fe>
 8016a3c:	2b00      	cmp	r3, #0
 8016a3e:	f000 80bf 	beq.w	8016bc0 <RadioSetRxConfig+0x1d4>
 8016a42:	2b01      	cmp	r3, #1
 8016a44:	f000 8124 	beq.w	8016c90 <RadioSetRxConfig+0x2a4>
            // Timeout Max, Timeout handled directly in SetRx function
            SubgRf.RxTimeout = 0xFFFF;

            break;
        default:
            break;
 8016a48:	e1cf      	b.n	8016dea <RadioSetRxConfig+0x3fe>
            SUBGRF_SetStopRxTimerOnPreambleDetect( true );
 8016a4a:	2001      	movs	r0, #1
 8016a4c:	f002 f8bc 	bl	8018bc8 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8016a50:	4ba5      	ldr	r3, [pc, #660]	@ (8016ce8 <RadioSetRxConfig+0x2fc>)
 8016a52:	2200      	movs	r2, #0
 8016a54:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8016a58:	4aa3      	ldr	r2, [pc, #652]	@ (8016ce8 <RadioSetRxConfig+0x2fc>)
 8016a5a:	687b      	ldr	r3, [r7, #4]
 8016a5c:	63d3      	str	r3, [r2, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_05;
 8016a5e:	4ba2      	ldr	r3, [pc, #648]	@ (8016ce8 <RadioSetRxConfig+0x2fc>)
 8016a60:	2209      	movs	r2, #9
 8016a62:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            SubgRf.ModulationParams.Params.Gfsk.Fdev = 800;
 8016a66:	4ba0      	ldr	r3, [pc, #640]	@ (8016ce8 <RadioSetRxConfig+0x2fc>)
 8016a68:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8016a6c:	641a      	str	r2, [r3, #64]	@ 0x40
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8016a6e:	68b8      	ldr	r0, [r7, #8]
 8016a70:	f002 ff96 	bl	80199a0 <SUBGRF_GetFskBandwidthRegValue>
 8016a74:	4603      	mov	r3, r0
 8016a76:	461a      	mov	r2, r3
 8016a78:	4b9b      	ldr	r3, [pc, #620]	@ (8016ce8 <RadioSetRxConfig+0x2fc>)
 8016a7a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8016a7e:	4b9a      	ldr	r3, [pc, #616]	@ (8016ce8 <RadioSetRxConfig+0x2fc>)
 8016a80:	2200      	movs	r2, #0
 8016a82:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8016a84:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8016a86:	00db      	lsls	r3, r3, #3
 8016a88:	b29a      	uxth	r2, r3
 8016a8a:	4b97      	ldr	r3, [pc, #604]	@ (8016ce8 <RadioSetRxConfig+0x2fc>)
 8016a8c:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_OFF;
 8016a8e:	4b96      	ldr	r3, [pc, #600]	@ (8016ce8 <RadioSetRxConfig+0x2fc>)
 8016a90:	2200      	movs	r2, #0
 8016a92:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 2 << 3; // convert byte into bit
 8016a94:	4b94      	ldr	r3, [pc, #592]	@ (8016ce8 <RadioSetRxConfig+0x2fc>)
 8016a96:	2210      	movs	r2, #16
 8016a98:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8016a9a:	4b93      	ldr	r3, [pc, #588]	@ (8016ce8 <RadioSetRxConfig+0x2fc>)
 8016a9c:	2200      	movs	r2, #0
 8016a9e:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = RADIO_PACKET_FIXED_LENGTH;
 8016aa0:	4b91      	ldr	r3, [pc, #580]	@ (8016ce8 <RadioSetRxConfig+0x2fc>)
 8016aa2:	2200      	movs	r2, #0
 8016aa4:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 8016aa6:	4b91      	ldr	r3, [pc, #580]	@ (8016cec <RadioSetRxConfig+0x300>)
 8016aa8:	781a      	ldrb	r2, [r3, #0]
 8016aaa:	4b8f      	ldr	r3, [pc, #572]	@ (8016ce8 <RadioSetRxConfig+0x2fc>)
 8016aac:	759a      	strb	r2, [r3, #22]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8016aae:	4b8e      	ldr	r3, [pc, #568]	@ (8016ce8 <RadioSetRxConfig+0x2fc>)
 8016ab0:	2201      	movs	r2, #1
 8016ab2:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREE_OFF;
 8016ab4:	4b8c      	ldr	r3, [pc, #560]	@ (8016ce8 <RadioSetRxConfig+0x2fc>)
 8016ab6:	2200      	movs	r2, #0
 8016ab8:	761a      	strb	r2, [r3, #24]
            RadioSetModem( MODEM_SIGFOX_RX );
 8016aba:	2005      	movs	r0, #5
 8016abc:	f7ff fec2 	bl	8016844 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8016ac0:	488b      	ldr	r0, [pc, #556]	@ (8016cf0 <RadioSetRxConfig+0x304>)
 8016ac2:	f002 fb1f 	bl	8019104 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8016ac6:	488b      	ldr	r0, [pc, #556]	@ (8016cf4 <RadioSetRxConfig+0x308>)
 8016ac8:	f002 fbee 	bl	80192a8 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){0xB2, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8016acc:	4a8a      	ldr	r2, [pc, #552]	@ (8016cf8 <RadioSetRxConfig+0x30c>)
 8016ace:	f107 031c 	add.w	r3, r7, #28
 8016ad2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8016ad6:	e883 0003 	stmia.w	r3, {r0, r1}
 8016ada:	f107 031c 	add.w	r3, r7, #28
 8016ade:	4618      	mov	r0, r3
 8016ae0:	f001 feab 	bl	801883a <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8016ae4:	f240 10ff 	movw	r0, #511	@ 0x1ff
 8016ae8:	f001 fef6 	bl	80188d8 <SUBGRF_SetWhiteningSeed>
            modReg= RadioRead(SUBGHZ_AGCGFORSTCFGR);
 8016aec:	f640 00b8 	movw	r0, #2232	@ 0x8b8
 8016af0:	f000 fe24 	bl	801773c <RadioRead>
 8016af4:	4603      	mov	r3, r0
 8016af6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            modReg&=RADIO_BIT_MASK(4);
 8016afa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8016afe:	f023 0310 	bic.w	r3, r3, #16
 8016b02:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            RadioWrite(SUBGHZ_AGCGFORSTCFGR, modReg);
 8016b06:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8016b0a:	4619      	mov	r1, r3
 8016b0c:	f640 00b8 	movw	r0, #2232	@ 0x8b8
 8016b10:	f000 fe02 	bl	8017718 <RadioWrite>
            RadioWrite(SUBGHZ_AGCGFORSTPOWTHR, 0x4 );
 8016b14:	2104      	movs	r1, #4
 8016b16:	f640 00b9 	movw	r0, #2233	@ 0x8b9
 8016b1a:	f000 fdfd 	bl	8017718 <RadioWrite>
            modReg= RadioRead(SUBGHZ_AGCRSSICTL0R);
 8016b1e:	f640 009b 	movw	r0, #2203	@ 0x89b
 8016b22:	f000 fe0b 	bl	801773c <RadioRead>
 8016b26:	4603      	mov	r3, r0
 8016b28:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            modReg&=( RADIO_BIT_MASK(2) & RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 8016b2c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8016b30:	f023 031c 	bic.w	r3, r3, #28
 8016b34:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            RadioWrite(SUBGHZ_AGCRSSICTL0R, (modReg| (0x1<<3) ) );
 8016b38:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8016b3c:	f043 0308 	orr.w	r3, r3, #8
 8016b40:	b2db      	uxtb	r3, r3
 8016b42:	4619      	mov	r1, r3
 8016b44:	f640 009b 	movw	r0, #2203	@ 0x89b
 8016b48:	f000 fde6 	bl	8017718 <RadioWrite>
            modReg= RadioRead(SUBGHZ_GAFCR);
 8016b4c:	f240 60d1 	movw	r0, #1745	@ 0x6d1
 8016b50:	f000 fdf4 	bl	801773c <RadioRead>
 8016b54:	4603      	mov	r3, r0
 8016b56:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            modReg&=( RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 8016b5a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8016b5e:	f023 0318 	bic.w	r3, r3, #24
 8016b62:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            RadioWrite(SUBGHZ_GAFCR, (modReg| (0x3<<3) ));
 8016b66:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8016b6a:	f043 0318 	orr.w	r3, r3, #24
 8016b6e:	b2db      	uxtb	r3, r3
 8016b70:	4619      	mov	r1, r3
 8016b72:	f240 60d1 	movw	r0, #1745	@ 0x6d1
 8016b76:	f000 fdcf 	bl	8017718 <RadioWrite>
            modReg= RadioRead(SUBGHZ_GBSYNCR);
 8016b7a:	f240 60ac 	movw	r0, #1708	@ 0x6ac
 8016b7e:	f000 fddd 	bl	801773c <RadioRead>
 8016b82:	4603      	mov	r3, r0
 8016b84:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            modReg&=( RADIO_BIT_MASK(4) & RADIO_BIT_MASK(5) & RADIO_BIT_MASK(6) );
 8016b88:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8016b8c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8016b90:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            RadioWrite(SUBGHZ_GBSYNCR, (modReg| (0x5<<4) ));
 8016b94:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8016b98:	f043 0350 	orr.w	r3, r3, #80	@ 0x50
 8016b9c:	b2db      	uxtb	r3, r3
 8016b9e:	4619      	mov	r1, r3
 8016ba0:	f240 60ac 	movw	r0, #1708	@ 0x6ac
 8016ba4:	f000 fdb8 	bl	8017718 <RadioWrite>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 8016ba8:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8016baa:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8016bae:	fb02 f303 	mul.w	r3, r2, r3
 8016bb2:	461a      	mov	r2, r3
 8016bb4:	687b      	ldr	r3, [r7, #4]
 8016bb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8016bba:	4a4b      	ldr	r2, [pc, #300]	@ (8016ce8 <RadioSetRxConfig+0x2fc>)
 8016bbc:	6093      	str	r3, [r2, #8]
            break;
 8016bbe:	e115      	b.n	8016dec <RadioSetRxConfig+0x400>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 8016bc0:	2000      	movs	r0, #0
 8016bc2:	f002 f801 	bl	8018bc8 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8016bc6:	4b48      	ldr	r3, [pc, #288]	@ (8016ce8 <RadioSetRxConfig+0x2fc>)
 8016bc8:	2200      	movs	r2, #0
 8016bca:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8016bce:	4a46      	ldr	r2, [pc, #280]	@ (8016ce8 <RadioSetRxConfig+0x2fc>)
 8016bd0:	687b      	ldr	r3, [r7, #4]
 8016bd2:	63d3      	str	r3, [r2, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8016bd4:	4b44      	ldr	r3, [pc, #272]	@ (8016ce8 <RadioSetRxConfig+0x2fc>)
 8016bd6:	220b      	movs	r2, #11
 8016bd8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8016bdc:	68b8      	ldr	r0, [r7, #8]
 8016bde:	f002 fedf 	bl	80199a0 <SUBGRF_GetFskBandwidthRegValue>
 8016be2:	4603      	mov	r3, r0
 8016be4:	461a      	mov	r2, r3
 8016be6:	4b40      	ldr	r3, [pc, #256]	@ (8016ce8 <RadioSetRxConfig+0x2fc>)
 8016be8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8016bec:	4b3e      	ldr	r3, [pc, #248]	@ (8016ce8 <RadioSetRxConfig+0x2fc>)
 8016bee:	2200      	movs	r2, #0
 8016bf0:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8016bf2:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8016bf4:	00db      	lsls	r3, r3, #3
 8016bf6:	b29a      	uxth	r2, r3
 8016bf8:	4b3b      	ldr	r3, [pc, #236]	@ (8016ce8 <RadioSetRxConfig+0x2fc>)
 8016bfa:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 8016bfc:	4b3a      	ldr	r3, [pc, #232]	@ (8016ce8 <RadioSetRxConfig+0x2fc>)
 8016bfe:	2204      	movs	r2, #4
 8016c00:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 8016c02:	4b39      	ldr	r3, [pc, #228]	@ (8016ce8 <RadioSetRxConfig+0x2fc>)
 8016c04:	2218      	movs	r2, #24
 8016c06:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8016c08:	4b37      	ldr	r3, [pc, #220]	@ (8016ce8 <RadioSetRxConfig+0x2fc>)
 8016c0a:	2200      	movs	r2, #0
 8016c0c:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 8016c0e:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8016c12:	f083 0301 	eor.w	r3, r3, #1
 8016c16:	b2db      	uxtb	r3, r3
 8016c18:	461a      	mov	r2, r3
 8016c1a:	4b33      	ldr	r3, [pc, #204]	@ (8016ce8 <RadioSetRxConfig+0x2fc>)
 8016c1c:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 8016c1e:	4b33      	ldr	r3, [pc, #204]	@ (8016cec <RadioSetRxConfig+0x300>)
 8016c20:	781a      	ldrb	r2, [r3, #0]
 8016c22:	4b31      	ldr	r3, [pc, #196]	@ (8016ce8 <RadioSetRxConfig+0x2fc>)
 8016c24:	759a      	strb	r2, [r3, #22]
            if( crcOn == true )
 8016c26:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8016c2a:	2b00      	cmp	r3, #0
 8016c2c:	d003      	beq.n	8016c36 <RadioSetRxConfig+0x24a>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 8016c2e:	4b2e      	ldr	r3, [pc, #184]	@ (8016ce8 <RadioSetRxConfig+0x2fc>)
 8016c30:	22f2      	movs	r2, #242	@ 0xf2
 8016c32:	75da      	strb	r2, [r3, #23]
 8016c34:	e002      	b.n	8016c3c <RadioSetRxConfig+0x250>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8016c36:	4b2c      	ldr	r3, [pc, #176]	@ (8016ce8 <RadioSetRxConfig+0x2fc>)
 8016c38:	2201      	movs	r2, #1
 8016c3a:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8016c3c:	4b2a      	ldr	r3, [pc, #168]	@ (8016ce8 <RadioSetRxConfig+0x2fc>)
 8016c3e:	2201      	movs	r2, #1
 8016c40:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 8016c42:	f000 fc68 	bl	8017516 <RadioStandby>
            RadioSetModem( MODEM_FSK );
 8016c46:	2000      	movs	r0, #0
 8016c48:	f7ff fdfc 	bl	8016844 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8016c4c:	4828      	ldr	r0, [pc, #160]	@ (8016cf0 <RadioSetRxConfig+0x304>)
 8016c4e:	f002 fa59 	bl	8019104 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8016c52:	4828      	ldr	r0, [pc, #160]	@ (8016cf4 <RadioSetRxConfig+0x308>)
 8016c54:	f002 fb28 	bl	80192a8 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8016c58:	4a28      	ldr	r2, [pc, #160]	@ (8016cfc <RadioSetRxConfig+0x310>)
 8016c5a:	f107 0314 	add.w	r3, r7, #20
 8016c5e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8016c62:	e883 0003 	stmia.w	r3, {r0, r1}
 8016c66:	f107 0314 	add.w	r3, r7, #20
 8016c6a:	4618      	mov	r0, r3
 8016c6c:	f001 fde5 	bl	801883a <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8016c70:	f240 10ff 	movw	r0, #511	@ 0x1ff
 8016c74:	f001 fe30 	bl	80188d8 <SUBGRF_SetWhiteningSeed>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 8016c78:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8016c7a:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8016c7e:	fb02 f303 	mul.w	r3, r2, r3
 8016c82:	461a      	mov	r2, r3
 8016c84:	687b      	ldr	r3, [r7, #4]
 8016c86:	fbb2 f3f3 	udiv	r3, r2, r3
 8016c8a:	4a17      	ldr	r2, [pc, #92]	@ (8016ce8 <RadioSetRxConfig+0x2fc>)
 8016c8c:	6093      	str	r3, [r2, #8]
            break;
 8016c8e:	e0ad      	b.n	8016dec <RadioSetRxConfig+0x400>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 8016c90:	2000      	movs	r0, #0
 8016c92:	f001 ff99 	bl	8018bc8 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8016c96:	4b14      	ldr	r3, [pc, #80]	@ (8016ce8 <RadioSetRxConfig+0x2fc>)
 8016c98:	2201      	movs	r2, #1
 8016c9a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 8016c9e:	687b      	ldr	r3, [r7, #4]
 8016ca0:	b2da      	uxtb	r2, r3
 8016ca2:	4b11      	ldr	r3, [pc, #68]	@ (8016ce8 <RadioSetRxConfig+0x2fc>)
 8016ca4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 8016ca8:	4a15      	ldr	r2, [pc, #84]	@ (8016d00 <RadioSetRxConfig+0x314>)
 8016caa:	68bb      	ldr	r3, [r7, #8]
 8016cac:	4413      	add	r3, r2
 8016cae:	781a      	ldrb	r2, [r3, #0]
 8016cb0:	4b0d      	ldr	r3, [pc, #52]	@ (8016ce8 <RadioSetRxConfig+0x2fc>)
 8016cb2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t )coderate;
 8016cb6:	4a0c      	ldr	r2, [pc, #48]	@ (8016ce8 <RadioSetRxConfig+0x2fc>)
 8016cb8:	7bbb      	ldrb	r3, [r7, #14]
 8016cba:	f882 3052 	strb.w	r3, [r2, #82]	@ 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8016cbe:	68bb      	ldr	r3, [r7, #8]
 8016cc0:	2b00      	cmp	r3, #0
 8016cc2:	d105      	bne.n	8016cd0 <RadioSetRxConfig+0x2e4>
 8016cc4:	687b      	ldr	r3, [r7, #4]
 8016cc6:	2b0b      	cmp	r3, #11
 8016cc8:	d008      	beq.n	8016cdc <RadioSetRxConfig+0x2f0>
 8016cca:	687b      	ldr	r3, [r7, #4]
 8016ccc:	2b0c      	cmp	r3, #12
 8016cce:	d005      	beq.n	8016cdc <RadioSetRxConfig+0x2f0>
 8016cd0:	68bb      	ldr	r3, [r7, #8]
 8016cd2:	2b01      	cmp	r3, #1
 8016cd4:	d116      	bne.n	8016d04 <RadioSetRxConfig+0x318>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8016cd6:	687b      	ldr	r3, [r7, #4]
 8016cd8:	2b0c      	cmp	r3, #12
 8016cda:	d113      	bne.n	8016d04 <RadioSetRxConfig+0x318>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 8016cdc:	4b02      	ldr	r3, [pc, #8]	@ (8016ce8 <RadioSetRxConfig+0x2fc>)
 8016cde:	2201      	movs	r2, #1
 8016ce0:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
 8016ce4:	e012      	b.n	8016d0c <RadioSetRxConfig+0x320>
 8016ce6:	bf00      	nop
 8016ce8:	200014ec 	.word	0x200014ec
 8016cec:	20000124 	.word	0x20000124
 8016cf0:	20001524 	.word	0x20001524
 8016cf4:	200014fa 	.word	0x200014fa
 8016cf8:	0801b714 	.word	0x0801b714
 8016cfc:	0801b71c 	.word	0x0801b71c
 8016d00:	0801bd94 	.word	0x0801bd94
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8016d04:	4b3b      	ldr	r3, [pc, #236]	@ (8016df4 <RadioSetRxConfig+0x408>)
 8016d06:	2200      	movs	r2, #0
 8016d08:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8016d0c:	4b39      	ldr	r3, [pc, #228]	@ (8016df4 <RadioSetRxConfig+0x408>)
 8016d0e:	2201      	movs	r2, #1
 8016d10:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8016d12:	4b38      	ldr	r3, [pc, #224]	@ (8016df4 <RadioSetRxConfig+0x408>)
 8016d14:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8016d18:	2b05      	cmp	r3, #5
 8016d1a:	d004      	beq.n	8016d26 <RadioSetRxConfig+0x33a>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 8016d1c:	4b35      	ldr	r3, [pc, #212]	@ (8016df4 <RadioSetRxConfig+0x408>)
 8016d1e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8016d22:	2b06      	cmp	r3, #6
 8016d24:	d10a      	bne.n	8016d3c <RadioSetRxConfig+0x350>
                if( preambleLen < 12 )
 8016d26:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8016d28:	2b0b      	cmp	r3, #11
 8016d2a:	d803      	bhi.n	8016d34 <RadioSetRxConfig+0x348>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 8016d2c:	4b31      	ldr	r3, [pc, #196]	@ (8016df4 <RadioSetRxConfig+0x408>)
 8016d2e:	220c      	movs	r2, #12
 8016d30:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 8016d32:	e006      	b.n	8016d42 <RadioSetRxConfig+0x356>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8016d34:	4a2f      	ldr	r2, [pc, #188]	@ (8016df4 <RadioSetRxConfig+0x408>)
 8016d36:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8016d38:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 8016d3a:	e002      	b.n	8016d42 <RadioSetRxConfig+0x356>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8016d3c:	4a2d      	ldr	r2, [pc, #180]	@ (8016df4 <RadioSetRxConfig+0x408>)
 8016d3e:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8016d40:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 8016d42:	f897 203c 	ldrb.w	r2, [r7, #60]	@ 0x3c
 8016d46:	4b2b      	ldr	r3, [pc, #172]	@ (8016df4 <RadioSetRxConfig+0x408>)
 8016d48:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8016d4a:	4b2b      	ldr	r3, [pc, #172]	@ (8016df8 <RadioSetRxConfig+0x40c>)
 8016d4c:	781a      	ldrb	r2, [r3, #0]
 8016d4e:	4b29      	ldr	r3, [pc, #164]	@ (8016df4 <RadioSetRxConfig+0x408>)
 8016d50:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 8016d52:	f897 2044 	ldrb.w	r2, [r7, #68]	@ 0x44
 8016d56:	4b27      	ldr	r3, [pc, #156]	@ (8016df4 <RadioSetRxConfig+0x408>)
 8016d58:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 8016d5c:	f897 2050 	ldrb.w	r2, [r7, #80]	@ 0x50
 8016d60:	4b24      	ldr	r3, [pc, #144]	@ (8016df4 <RadioSetRxConfig+0x408>)
 8016d62:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
            RadioStandby( );
 8016d66:	f000 fbd6 	bl	8017516 <RadioStandby>
            RadioSetModem( MODEM_LORA );
 8016d6a:	2001      	movs	r0, #1
 8016d6c:	f7ff fd6a 	bl	8016844 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8016d70:	4822      	ldr	r0, [pc, #136]	@ (8016dfc <RadioSetRxConfig+0x410>)
 8016d72:	f002 f9c7 	bl	8019104 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8016d76:	4822      	ldr	r0, [pc, #136]	@ (8016e00 <RadioSetRxConfig+0x414>)
 8016d78:	f002 fa96 	bl	80192a8 <SUBGRF_SetPacketParams>
            SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 8016d7c:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8016d7e:	b2db      	uxtb	r3, r3
 8016d80:	4618      	mov	r0, r3
 8016d82:	f001 ff30 	bl	8018be6 <SUBGRF_SetLoRaSymbNumTimeout>
            SUBGRF_WriteRegister(SUBGHZ_AGCCFG,SUBGRF_ReadRegister(SUBGHZ_AGCCFG)&0x1);
 8016d86:	f640 00a3 	movw	r0, #2211	@ 0x8a3
 8016d8a:	f002 fbf7 	bl	801957c <SUBGRF_ReadRegister>
 8016d8e:	4603      	mov	r3, r0
 8016d90:	f003 0301 	and.w	r3, r3, #1
 8016d94:	b2db      	uxtb	r3, r3
 8016d96:	4619      	mov	r1, r3
 8016d98:	f640 00a3 	movw	r0, #2211	@ 0x8a3
 8016d9c:	f002 fbcc 	bl	8019538 <SUBGRF_WriteRegister>
            if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 8016da0:	4b14      	ldr	r3, [pc, #80]	@ (8016df4 <RadioSetRxConfig+0x408>)
 8016da2:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8016da6:	2b01      	cmp	r3, #1
 8016da8:	d10d      	bne.n	8016dc6 <RadioSetRxConfig+0x3da>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 8016daa:	f240 7036 	movw	r0, #1846	@ 0x736
 8016dae:	f002 fbe5 	bl	801957c <SUBGRF_ReadRegister>
 8016db2:	4603      	mov	r3, r0
 8016db4:	f023 0304 	bic.w	r3, r3, #4
 8016db8:	b2db      	uxtb	r3, r3
 8016dba:	4619      	mov	r1, r3
 8016dbc:	f240 7036 	movw	r0, #1846	@ 0x736
 8016dc0:	f002 fbba 	bl	8019538 <SUBGRF_WriteRegister>
 8016dc4:	e00c      	b.n	8016de0 <RadioSetRxConfig+0x3f4>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 8016dc6:	f240 7036 	movw	r0, #1846	@ 0x736
 8016dca:	f002 fbd7 	bl	801957c <SUBGRF_ReadRegister>
 8016dce:	4603      	mov	r3, r0
 8016dd0:	f043 0304 	orr.w	r3, r3, #4
 8016dd4:	b2db      	uxtb	r3, r3
 8016dd6:	4619      	mov	r1, r3
 8016dd8:	f240 7036 	movw	r0, #1846	@ 0x736
 8016ddc:	f002 fbac 	bl	8019538 <SUBGRF_WriteRegister>
            SubgRf.RxTimeout = 0xFFFF;
 8016de0:	4b04      	ldr	r3, [pc, #16]	@ (8016df4 <RadioSetRxConfig+0x408>)
 8016de2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8016de6:	609a      	str	r2, [r3, #8]
            break;
 8016de8:	e000      	b.n	8016dec <RadioSetRxConfig+0x400>
            break;
 8016dea:	bf00      	nop
    }
}
 8016dec:	bf00      	nop
 8016dee:	3728      	adds	r7, #40	@ 0x28
 8016df0:	46bd      	mov	sp, r7
 8016df2:	bd80      	pop	{r7, pc}
 8016df4:	200014ec 	.word	0x200014ec
 8016df8:	20000124 	.word	0x20000124
 8016dfc:	20001524 	.word	0x20001524
 8016e00:	200014fa 	.word	0x200014fa

08016e04 <RadioSetTxConfig>:
static void RadioSetTxConfig( RadioModems_t modem, int8_t power, uint32_t fdev,
                              uint32_t bandwidth, uint32_t datarate,
                              uint8_t coderate, uint16_t preambleLen,
                              bool fixLen, bool crcOn, bool freqHopOn,
                              uint8_t hopPeriod, bool iqInverted, uint32_t timeout )
{
 8016e04:	b580      	push	{r7, lr}
 8016e06:	b086      	sub	sp, #24
 8016e08:	af00      	add	r7, sp, #0
 8016e0a:	60ba      	str	r2, [r7, #8]
 8016e0c:	607b      	str	r3, [r7, #4]
 8016e0e:	4603      	mov	r3, r0
 8016e10:	73fb      	strb	r3, [r7, #15]
 8016e12:	460b      	mov	r3, r1
 8016e14:	73bb      	strb	r3, [r7, #14]
#if( RADIO_LR_FHSS_IS_ON == 1 )
    /*disable LrFhss*/
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    RFW_DeInit();
 8016e16:	f002 fe90 	bl	8019b3a <RFW_DeInit>
    switch( modem )
 8016e1a:	7bfb      	ldrb	r3, [r7, #15]
 8016e1c:	2b04      	cmp	r3, #4
 8016e1e:	f000 80c7 	beq.w	8016fb0 <RadioSetTxConfig+0x1ac>
 8016e22:	2b04      	cmp	r3, #4
 8016e24:	f300 80d6 	bgt.w	8016fd4 <RadioSetTxConfig+0x1d0>
 8016e28:	2b00      	cmp	r3, #0
 8016e2a:	d002      	beq.n	8016e32 <RadioSetTxConfig+0x2e>
 8016e2c:	2b01      	cmp	r3, #1
 8016e2e:	d059      	beq.n	8016ee4 <RadioSetTxConfig+0xe0>
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
            break;
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 8016e30:	e0d0      	b.n	8016fd4 <RadioSetTxConfig+0x1d0>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8016e32:	4b77      	ldr	r3, [pc, #476]	@ (8017010 <RadioSetTxConfig+0x20c>)
 8016e34:	2200      	movs	r2, #0
 8016e36:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8016e3a:	4a75      	ldr	r2, [pc, #468]	@ (8017010 <RadioSetTxConfig+0x20c>)
 8016e3c:	6a3b      	ldr	r3, [r7, #32]
 8016e3e:	63d3      	str	r3, [r2, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8016e40:	4b73      	ldr	r3, [pc, #460]	@ (8017010 <RadioSetTxConfig+0x20c>)
 8016e42:	220b      	movs	r2, #11
 8016e44:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8016e48:	6878      	ldr	r0, [r7, #4]
 8016e4a:	f002 fda9 	bl	80199a0 <SUBGRF_GetFskBandwidthRegValue>
 8016e4e:	4603      	mov	r3, r0
 8016e50:	461a      	mov	r2, r3
 8016e52:	4b6f      	ldr	r3, [pc, #444]	@ (8017010 <RadioSetTxConfig+0x20c>)
 8016e54:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            SubgRf.ModulationParams.Params.Gfsk.Fdev = fdev;
 8016e58:	4a6d      	ldr	r2, [pc, #436]	@ (8017010 <RadioSetTxConfig+0x20c>)
 8016e5a:	68bb      	ldr	r3, [r7, #8]
 8016e5c:	6413      	str	r3, [r2, #64]	@ 0x40
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8016e5e:	4b6c      	ldr	r3, [pc, #432]	@ (8017010 <RadioSetTxConfig+0x20c>)
 8016e60:	2200      	movs	r2, #0
 8016e62:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8016e64:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8016e66:	00db      	lsls	r3, r3, #3
 8016e68:	b29a      	uxth	r2, r3
 8016e6a:	4b69      	ldr	r3, [pc, #420]	@ (8017010 <RadioSetTxConfig+0x20c>)
 8016e6c:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 8016e6e:	4b68      	ldr	r3, [pc, #416]	@ (8017010 <RadioSetTxConfig+0x20c>)
 8016e70:	2204      	movs	r2, #4
 8016e72:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3 ; // convert byte into bit
 8016e74:	4b66      	ldr	r3, [pc, #408]	@ (8017010 <RadioSetTxConfig+0x20c>)
 8016e76:	2218      	movs	r2, #24
 8016e78:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8016e7a:	4b65      	ldr	r3, [pc, #404]	@ (8017010 <RadioSetTxConfig+0x20c>)
 8016e7c:	2200      	movs	r2, #0
 8016e7e:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 8016e80:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8016e84:	f083 0301 	eor.w	r3, r3, #1
 8016e88:	b2db      	uxtb	r3, r3
 8016e8a:	461a      	mov	r2, r3
 8016e8c:	4b60      	ldr	r3, [pc, #384]	@ (8017010 <RadioSetTxConfig+0x20c>)
 8016e8e:	755a      	strb	r2, [r3, #21]
            if( crcOn == true )
 8016e90:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8016e94:	2b00      	cmp	r3, #0
 8016e96:	d003      	beq.n	8016ea0 <RadioSetTxConfig+0x9c>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 8016e98:	4b5d      	ldr	r3, [pc, #372]	@ (8017010 <RadioSetTxConfig+0x20c>)
 8016e9a:	22f2      	movs	r2, #242	@ 0xf2
 8016e9c:	75da      	strb	r2, [r3, #23]
 8016e9e:	e002      	b.n	8016ea6 <RadioSetTxConfig+0xa2>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8016ea0:	4b5b      	ldr	r3, [pc, #364]	@ (8017010 <RadioSetTxConfig+0x20c>)
 8016ea2:	2201      	movs	r2, #1
 8016ea4:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8016ea6:	4b5a      	ldr	r3, [pc, #360]	@ (8017010 <RadioSetTxConfig+0x20c>)
 8016ea8:	2201      	movs	r2, #1
 8016eaa:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 8016eac:	f000 fb33 	bl	8017516 <RadioStandby>
            RadioSetModem(  MODEM_FSK  );
 8016eb0:	2000      	movs	r0, #0
 8016eb2:	f7ff fcc7 	bl	8016844 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8016eb6:	4857      	ldr	r0, [pc, #348]	@ (8017014 <RadioSetTxConfig+0x210>)
 8016eb8:	f002 f924 	bl	8019104 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8016ebc:	4856      	ldr	r0, [pc, #344]	@ (8017018 <RadioSetTxConfig+0x214>)
 8016ebe:	f002 f9f3 	bl	80192a8 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8016ec2:	4a56      	ldr	r2, [pc, #344]	@ (801701c <RadioSetTxConfig+0x218>)
 8016ec4:	f107 0310 	add.w	r3, r7, #16
 8016ec8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8016ecc:	e883 0003 	stmia.w	r3, {r0, r1}
 8016ed0:	f107 0310 	add.w	r3, r7, #16
 8016ed4:	4618      	mov	r0, r3
 8016ed6:	f001 fcb0 	bl	801883a <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8016eda:	f240 10ff 	movw	r0, #511	@ 0x1ff
 8016ede:	f001 fcfb 	bl	80188d8 <SUBGRF_SetWhiteningSeed>
            break;
 8016ee2:	e078      	b.n	8016fd6 <RadioSetTxConfig+0x1d2>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8016ee4:	4b4a      	ldr	r3, [pc, #296]	@ (8017010 <RadioSetTxConfig+0x20c>)
 8016ee6:	2201      	movs	r2, #1
 8016ee8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 8016eec:	6a3b      	ldr	r3, [r7, #32]
 8016eee:	b2da      	uxtb	r2, r3
 8016ef0:	4b47      	ldr	r3, [pc, #284]	@ (8017010 <RadioSetTxConfig+0x20c>)
 8016ef2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 8016ef6:	4a4a      	ldr	r2, [pc, #296]	@ (8017020 <RadioSetTxConfig+0x21c>)
 8016ef8:	687b      	ldr	r3, [r7, #4]
 8016efa:	4413      	add	r3, r2
 8016efc:	781a      	ldrb	r2, [r3, #0]
 8016efe:	4b44      	ldr	r3, [pc, #272]	@ (8017010 <RadioSetTxConfig+0x20c>)
 8016f00:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate= ( RadioLoRaCodingRates_t )coderate;
 8016f04:	4a42      	ldr	r2, [pc, #264]	@ (8017010 <RadioSetTxConfig+0x20c>)
 8016f06:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8016f0a:	f882 3052 	strb.w	r3, [r2, #82]	@ 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8016f0e:	687b      	ldr	r3, [r7, #4]
 8016f10:	2b00      	cmp	r3, #0
 8016f12:	d105      	bne.n	8016f20 <RadioSetTxConfig+0x11c>
 8016f14:	6a3b      	ldr	r3, [r7, #32]
 8016f16:	2b0b      	cmp	r3, #11
 8016f18:	d008      	beq.n	8016f2c <RadioSetTxConfig+0x128>
 8016f1a:	6a3b      	ldr	r3, [r7, #32]
 8016f1c:	2b0c      	cmp	r3, #12
 8016f1e:	d005      	beq.n	8016f2c <RadioSetTxConfig+0x128>
 8016f20:	687b      	ldr	r3, [r7, #4]
 8016f22:	2b01      	cmp	r3, #1
 8016f24:	d107      	bne.n	8016f36 <RadioSetTxConfig+0x132>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8016f26:	6a3b      	ldr	r3, [r7, #32]
 8016f28:	2b0c      	cmp	r3, #12
 8016f2a:	d104      	bne.n	8016f36 <RadioSetTxConfig+0x132>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 8016f2c:	4b38      	ldr	r3, [pc, #224]	@ (8017010 <RadioSetTxConfig+0x20c>)
 8016f2e:	2201      	movs	r2, #1
 8016f30:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
 8016f34:	e003      	b.n	8016f3e <RadioSetTxConfig+0x13a>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8016f36:	4b36      	ldr	r3, [pc, #216]	@ (8017010 <RadioSetTxConfig+0x20c>)
 8016f38:	2200      	movs	r2, #0
 8016f3a:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8016f3e:	4b34      	ldr	r3, [pc, #208]	@ (8017010 <RadioSetTxConfig+0x20c>)
 8016f40:	2201      	movs	r2, #1
 8016f42:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8016f44:	4b32      	ldr	r3, [pc, #200]	@ (8017010 <RadioSetTxConfig+0x20c>)
 8016f46:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8016f4a:	2b05      	cmp	r3, #5
 8016f4c:	d004      	beq.n	8016f58 <RadioSetTxConfig+0x154>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 8016f4e:	4b30      	ldr	r3, [pc, #192]	@ (8017010 <RadioSetTxConfig+0x20c>)
 8016f50:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8016f54:	2b06      	cmp	r3, #6
 8016f56:	d10a      	bne.n	8016f6e <RadioSetTxConfig+0x16a>
                if( preambleLen < 12 )
 8016f58:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8016f5a:	2b0b      	cmp	r3, #11
 8016f5c:	d803      	bhi.n	8016f66 <RadioSetTxConfig+0x162>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 8016f5e:	4b2c      	ldr	r3, [pc, #176]	@ (8017010 <RadioSetTxConfig+0x20c>)
 8016f60:	220c      	movs	r2, #12
 8016f62:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 8016f64:	e006      	b.n	8016f74 <RadioSetTxConfig+0x170>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8016f66:	4a2a      	ldr	r2, [pc, #168]	@ (8017010 <RadioSetTxConfig+0x20c>)
 8016f68:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8016f6a:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 8016f6c:	e002      	b.n	8016f74 <RadioSetTxConfig+0x170>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8016f6e:	4a28      	ldr	r2, [pc, #160]	@ (8017010 <RadioSetTxConfig+0x20c>)
 8016f70:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8016f72:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 8016f74:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8016f78:	4b25      	ldr	r3, [pc, #148]	@ (8017010 <RadioSetTxConfig+0x20c>)
 8016f7a:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8016f7c:	4b29      	ldr	r3, [pc, #164]	@ (8017024 <RadioSetTxConfig+0x220>)
 8016f7e:	781a      	ldrb	r2, [r3, #0]
 8016f80:	4b23      	ldr	r3, [pc, #140]	@ (8017010 <RadioSetTxConfig+0x20c>)
 8016f82:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 8016f84:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8016f88:	4b21      	ldr	r3, [pc, #132]	@ (8017010 <RadioSetTxConfig+0x20c>)
 8016f8a:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 8016f8e:	f897 203c 	ldrb.w	r2, [r7, #60]	@ 0x3c
 8016f92:	4b1f      	ldr	r3, [pc, #124]	@ (8017010 <RadioSetTxConfig+0x20c>)
 8016f94:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
            RadioStandby( );
 8016f98:	f000 fabd 	bl	8017516 <RadioStandby>
            RadioSetModem( MODEM_LORA );
 8016f9c:	2001      	movs	r0, #1
 8016f9e:	f7ff fc51 	bl	8016844 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8016fa2:	481c      	ldr	r0, [pc, #112]	@ (8017014 <RadioSetTxConfig+0x210>)
 8016fa4:	f002 f8ae 	bl	8019104 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8016fa8:	481b      	ldr	r0, [pc, #108]	@ (8017018 <RadioSetTxConfig+0x214>)
 8016faa:	f002 f97d 	bl	80192a8 <SUBGRF_SetPacketParams>
            break;
 8016fae:	e012      	b.n	8016fd6 <RadioSetTxConfig+0x1d2>
            RadioSetModem(MODEM_SIGFOX_TX);
 8016fb0:	2004      	movs	r0, #4
 8016fb2:	f7ff fc47 	bl	8016844 <RadioSetModem>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 8016fb6:	4b16      	ldr	r3, [pc, #88]	@ (8017010 <RadioSetTxConfig+0x20c>)
 8016fb8:	2202      	movs	r2, #2
 8016fba:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Bpsk.BitRate           = datarate;
 8016fbe:	4a14      	ldr	r2, [pc, #80]	@ (8017010 <RadioSetTxConfig+0x20c>)
 8016fc0:	6a3b      	ldr	r3, [r7, #32]
 8016fc2:	6493      	str	r3, [r2, #72]	@ 0x48
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 8016fc4:	4b12      	ldr	r3, [pc, #72]	@ (8017010 <RadioSetTxConfig+0x20c>)
 8016fc6:	2216      	movs	r2, #22
 8016fc8:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8016fcc:	4811      	ldr	r0, [pc, #68]	@ (8017014 <RadioSetTxConfig+0x210>)
 8016fce:	f002 f899 	bl	8019104 <SUBGRF_SetModulationParams>
            break;
 8016fd2:	e000      	b.n	8016fd6 <RadioSetTxConfig+0x1d2>
            break;
 8016fd4:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 8016fd6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8016fda:	4618      	mov	r0, r3
 8016fdc:	f002 fbe2 	bl	80197a4 <SUBGRF_SetRfTxPower>
 8016fe0:	4603      	mov	r3, r0
 8016fe2:	461a      	mov	r2, r3
 8016fe4:	4b0a      	ldr	r3, [pc, #40]	@ (8017010 <RadioSetTxConfig+0x20c>)
 8016fe6:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 8016fea:	210e      	movs	r1, #14
 8016fec:	f640 101f 	movw	r0, #2335	@ 0x91f
 8016ff0:	f002 faa2 	bl	8019538 <SUBGRF_WriteRegister>
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 8016ff4:	4b06      	ldr	r3, [pc, #24]	@ (8017010 <RadioSetTxConfig+0x20c>)
 8016ff6:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8016ffa:	4618      	mov	r0, r3
 8016ffc:	f002 fdb1 	bl	8019b62 <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 8017000:	4a03      	ldr	r2, [pc, #12]	@ (8017010 <RadioSetTxConfig+0x20c>)
 8017002:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8017004:	6053      	str	r3, [r2, #4]
}
 8017006:	bf00      	nop
 8017008:	3718      	adds	r7, #24
 801700a:	46bd      	mov	sp, r7
 801700c:	bd80      	pop	{r7, pc}
 801700e:	bf00      	nop
 8017010:	200014ec 	.word	0x200014ec
 8017014:	20001524 	.word	0x20001524
 8017018:	200014fa 	.word	0x200014fa
 801701c:	0801b71c 	.word	0x0801b71c
 8017020:	0801bd94 	.word	0x0801bd94
 8017024:	20000124 	.word	0x20000124

08017028 <RadioCheckRfFrequency>:

static bool RadioCheckRfFrequency( uint32_t frequency )
{
 8017028:	b480      	push	{r7}
 801702a:	b083      	sub	sp, #12
 801702c:	af00      	add	r7, sp, #0
 801702e:	6078      	str	r0, [r7, #4]
    return true;
 8017030:	2301      	movs	r3, #1
}
 8017032:	4618      	mov	r0, r3
 8017034:	370c      	adds	r7, #12
 8017036:	46bd      	mov	sp, r7
 8017038:	bc80      	pop	{r7}
 801703a:	4770      	bx	lr

0801703c <RadioGetLoRaBandwidthInHz>:

static uint32_t RadioGetLoRaBandwidthInHz( RadioLoRaBandwidths_t bw )
{
 801703c:	b480      	push	{r7}
 801703e:	b085      	sub	sp, #20
 8017040:	af00      	add	r7, sp, #0
 8017042:	4603      	mov	r3, r0
 8017044:	71fb      	strb	r3, [r7, #7]
    uint32_t bandwidthInHz = 0;
 8017046:	2300      	movs	r3, #0
 8017048:	60fb      	str	r3, [r7, #12]

    switch( bw )
 801704a:	79fb      	ldrb	r3, [r7, #7]
 801704c:	2b0a      	cmp	r3, #10
 801704e:	d83e      	bhi.n	80170ce <RadioGetLoRaBandwidthInHz+0x92>
 8017050:	a201      	add	r2, pc, #4	@ (adr r2, 8017058 <RadioGetLoRaBandwidthInHz+0x1c>)
 8017052:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017056:	bf00      	nop
 8017058:	08017085 	.word	0x08017085
 801705c:	08017095 	.word	0x08017095
 8017060:	080170a5 	.word	0x080170a5
 8017064:	080170b5 	.word	0x080170b5
 8017068:	080170bd 	.word	0x080170bd
 801706c:	080170c3 	.word	0x080170c3
 8017070:	080170c9 	.word	0x080170c9
 8017074:	080170cf 	.word	0x080170cf
 8017078:	0801708d 	.word	0x0801708d
 801707c:	0801709d 	.word	0x0801709d
 8017080:	080170ad 	.word	0x080170ad
    {
    case LORA_BW_007:
        bandwidthInHz = 7812UL;
 8017084:	f641 6384 	movw	r3, #7812	@ 0x1e84
 8017088:	60fb      	str	r3, [r7, #12]
        break;
 801708a:	e020      	b.n	80170ce <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_010:
        bandwidthInHz = 10417UL;
 801708c:	f642 03b1 	movw	r3, #10417	@ 0x28b1
 8017090:	60fb      	str	r3, [r7, #12]
        break;
 8017092:	e01c      	b.n	80170ce <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_015:
        bandwidthInHz = 15625UL;
 8017094:	f643 5309 	movw	r3, #15625	@ 0x3d09
 8017098:	60fb      	str	r3, [r7, #12]
        break;
 801709a:	e018      	b.n	80170ce <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_020:
        bandwidthInHz = 20833UL;
 801709c:	f245 1361 	movw	r3, #20833	@ 0x5161
 80170a0:	60fb      	str	r3, [r7, #12]
        break;
 80170a2:	e014      	b.n	80170ce <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_031:
        bandwidthInHz = 31250UL;
 80170a4:	f647 2312 	movw	r3, #31250	@ 0x7a12
 80170a8:	60fb      	str	r3, [r7, #12]
        break;
 80170aa:	e010      	b.n	80170ce <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_041:
        bandwidthInHz = 41667UL;
 80170ac:	f24a 23c3 	movw	r3, #41667	@ 0xa2c3
 80170b0:	60fb      	str	r3, [r7, #12]
        break;
 80170b2:	e00c      	b.n	80170ce <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_062:
        bandwidthInHz = 62500UL;
 80170b4:	f24f 4324 	movw	r3, #62500	@ 0xf424
 80170b8:	60fb      	str	r3, [r7, #12]
        break;
 80170ba:	e008      	b.n	80170ce <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_125:
        bandwidthInHz = 125000UL;
 80170bc:	4b07      	ldr	r3, [pc, #28]	@ (80170dc <RadioGetLoRaBandwidthInHz+0xa0>)
 80170be:	60fb      	str	r3, [r7, #12]
        break;
 80170c0:	e005      	b.n	80170ce <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_250:
        bandwidthInHz = 250000UL;
 80170c2:	4b07      	ldr	r3, [pc, #28]	@ (80170e0 <RadioGetLoRaBandwidthInHz+0xa4>)
 80170c4:	60fb      	str	r3, [r7, #12]
        break;
 80170c6:	e002      	b.n	80170ce <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_500:
        bandwidthInHz = 500000UL;
 80170c8:	4b06      	ldr	r3, [pc, #24]	@ (80170e4 <RadioGetLoRaBandwidthInHz+0xa8>)
 80170ca:	60fb      	str	r3, [r7, #12]
        break;
 80170cc:	bf00      	nop
    }

    return bandwidthInHz;
 80170ce:	68fb      	ldr	r3, [r7, #12]
}
 80170d0:	4618      	mov	r0, r3
 80170d2:	3714      	adds	r7, #20
 80170d4:	46bd      	mov	sp, r7
 80170d6:	bc80      	pop	{r7}
 80170d8:	4770      	bx	lr
 80170da:	bf00      	nop
 80170dc:	0001e848 	.word	0x0001e848
 80170e0:	0003d090 	.word	0x0003d090
 80170e4:	0007a120 	.word	0x0007a120

080170e8 <RadioGetGfskTimeOnAirNumerator>:

static uint32_t RadioGetGfskTimeOnAirNumerator( uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 80170e8:	b480      	push	{r7}
 80170ea:	b083      	sub	sp, #12
 80170ec:	af00      	add	r7, sp, #0
 80170ee:	6078      	str	r0, [r7, #4]
 80170f0:	4608      	mov	r0, r1
 80170f2:	4611      	mov	r1, r2
 80170f4:	461a      	mov	r2, r3
 80170f6:	4603      	mov	r3, r0
 80170f8:	70fb      	strb	r3, [r7, #3]
 80170fa:	460b      	mov	r3, r1
 80170fc:	803b      	strh	r3, [r7, #0]
 80170fe:	4613      	mov	r3, r2
 8017100:	70bb      	strb	r3, [r7, #2]
    return ( preambleLen << 3 ) +
 8017102:	883b      	ldrh	r3, [r7, #0]
 8017104:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8017106:	78ba      	ldrb	r2, [r7, #2]
 8017108:	f082 0201 	eor.w	r2, r2, #1
 801710c:	b2d2      	uxtb	r2, r2
 801710e:	2a00      	cmp	r2, #0
 8017110:	d001      	beq.n	8017116 <RadioGetGfskTimeOnAirNumerator+0x2e>
 8017112:	2208      	movs	r2, #8
 8017114:	e000      	b.n	8017118 <RadioGetGfskTimeOnAirNumerator+0x30>
 8017116:	2200      	movs	r2, #0
    return ( preambleLen << 3 ) +
 8017118:	4413      	add	r3, r2
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 801711a:	f103 0218 	add.w	r2, r3, #24
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 801711e:	7c3b      	ldrb	r3, [r7, #16]
 8017120:	7d39      	ldrb	r1, [r7, #20]
 8017122:	2900      	cmp	r1, #0
 8017124:	d001      	beq.n	801712a <RadioGetGfskTimeOnAirNumerator+0x42>
 8017126:	2102      	movs	r1, #2
 8017128:	e000      	b.n	801712c <RadioGetGfskTimeOnAirNumerator+0x44>
 801712a:	2100      	movs	r1, #0
 801712c:	440b      	add	r3, r1
 801712e:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8017130:	4413      	add	r3, r2
}
 8017132:	4618      	mov	r0, r3
 8017134:	370c      	adds	r7, #12
 8017136:	46bd      	mov	sp, r7
 8017138:	bc80      	pop	{r7}
 801713a:	4770      	bx	lr

0801713c <RadioGetLoRaTimeOnAirNumerator>:

static uint32_t RadioGetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                                                uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 801713c:	b480      	push	{r7}
 801713e:	b08b      	sub	sp, #44	@ 0x2c
 8017140:	af00      	add	r7, sp, #0
 8017142:	60f8      	str	r0, [r7, #12]
 8017144:	60b9      	str	r1, [r7, #8]
 8017146:	4611      	mov	r1, r2
 8017148:	461a      	mov	r2, r3
 801714a:	460b      	mov	r3, r1
 801714c:	71fb      	strb	r3, [r7, #7]
 801714e:	4613      	mov	r3, r2
 8017150:	80bb      	strh	r3, [r7, #4]
    int32_t crDenom           = coderate + 4;
 8017152:	79fb      	ldrb	r3, [r7, #7]
 8017154:	3304      	adds	r3, #4
 8017156:	617b      	str	r3, [r7, #20]
    bool    lowDatareOptimize = false;
 8017158:	2300      	movs	r3, #0
 801715a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    // Ensure that the preamble length is at least 12 symbols when using SF5 or SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 801715e:	68bb      	ldr	r3, [r7, #8]
 8017160:	2b05      	cmp	r3, #5
 8017162:	d002      	beq.n	801716a <RadioGetLoRaTimeOnAirNumerator+0x2e>
 8017164:	68bb      	ldr	r3, [r7, #8]
 8017166:	2b06      	cmp	r3, #6
 8017168:	d104      	bne.n	8017174 <RadioGetLoRaTimeOnAirNumerator+0x38>
    {
        if( preambleLen < 12 )
 801716a:	88bb      	ldrh	r3, [r7, #4]
 801716c:	2b0b      	cmp	r3, #11
 801716e:	d801      	bhi.n	8017174 <RadioGetLoRaTimeOnAirNumerator+0x38>
        {
            preambleLen = 12;
 8017170:	230c      	movs	r3, #12
 8017172:	80bb      	strh	r3, [r7, #4]
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8017174:	68fb      	ldr	r3, [r7, #12]
 8017176:	2b00      	cmp	r3, #0
 8017178:	d105      	bne.n	8017186 <RadioGetLoRaTimeOnAirNumerator+0x4a>
 801717a:	68bb      	ldr	r3, [r7, #8]
 801717c:	2b0b      	cmp	r3, #11
 801717e:	d008      	beq.n	8017192 <RadioGetLoRaTimeOnAirNumerator+0x56>
 8017180:	68bb      	ldr	r3, [r7, #8]
 8017182:	2b0c      	cmp	r3, #12
 8017184:	d005      	beq.n	8017192 <RadioGetLoRaTimeOnAirNumerator+0x56>
 8017186:	68fb      	ldr	r3, [r7, #12]
 8017188:	2b01      	cmp	r3, #1
 801718a:	d105      	bne.n	8017198 <RadioGetLoRaTimeOnAirNumerator+0x5c>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 801718c:	68bb      	ldr	r3, [r7, #8]
 801718e:	2b0c      	cmp	r3, #12
 8017190:	d102      	bne.n	8017198 <RadioGetLoRaTimeOnAirNumerator+0x5c>
    {
        lowDatareOptimize = true;
 8017192:	2301      	movs	r3, #1
 8017194:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8017198:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 801719c:	00db      	lsls	r3, r3, #3
                            ( crcOn ? 16 : 0 ) -
 801719e:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80171a2:	2a00      	cmp	r2, #0
 80171a4:	d001      	beq.n	80171aa <RadioGetLoRaTimeOnAirNumerator+0x6e>
 80171a6:	2210      	movs	r2, #16
 80171a8:	e000      	b.n	80171ac <RadioGetLoRaTimeOnAirNumerator+0x70>
 80171aa:	2200      	movs	r2, #0
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 80171ac:	4413      	add	r3, r2
 80171ae:	461a      	mov	r2, r3
                            ( 4 * datarate ) +
 80171b0:	68bb      	ldr	r3, [r7, #8]
 80171b2:	009b      	lsls	r3, r3, #2
                            ( crcOn ? 16 : 0 ) -
 80171b4:	1ad3      	subs	r3, r2, r3
                            ( fixLen ? 0 : 20 );
 80171b6:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 80171ba:	2a00      	cmp	r2, #0
 80171bc:	d001      	beq.n	80171c2 <RadioGetLoRaTimeOnAirNumerator+0x86>
 80171be:	2200      	movs	r2, #0
 80171c0:	e000      	b.n	80171c4 <RadioGetLoRaTimeOnAirNumerator+0x88>
 80171c2:	2214      	movs	r2, #20
                            ( 4 * datarate ) +
 80171c4:	4413      	add	r3, r2
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 80171c6:	61fb      	str	r3, [r7, #28]

    if( datarate <= 6 )
 80171c8:	68bb      	ldr	r3, [r7, #8]
 80171ca:	2b06      	cmp	r3, #6
 80171cc:	d803      	bhi.n	80171d6 <RadioGetLoRaTimeOnAirNumerator+0x9a>
    {
        ceilDenominator = 4 * datarate;
 80171ce:	68bb      	ldr	r3, [r7, #8]
 80171d0:	009b      	lsls	r3, r3, #2
 80171d2:	623b      	str	r3, [r7, #32]
 80171d4:	e00e      	b.n	80171f4 <RadioGetLoRaTimeOnAirNumerator+0xb8>
    }
    else
    {
        ceilNumerator += 8;
 80171d6:	69fb      	ldr	r3, [r7, #28]
 80171d8:	3308      	adds	r3, #8
 80171da:	61fb      	str	r3, [r7, #28]

        if( lowDatareOptimize == true )
 80171dc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80171e0:	2b00      	cmp	r3, #0
 80171e2:	d004      	beq.n	80171ee <RadioGetLoRaTimeOnAirNumerator+0xb2>
        {
            ceilDenominator = 4 * ( datarate - 2 );
 80171e4:	68bb      	ldr	r3, [r7, #8]
 80171e6:	3b02      	subs	r3, #2
 80171e8:	009b      	lsls	r3, r3, #2
 80171ea:	623b      	str	r3, [r7, #32]
 80171ec:	e002      	b.n	80171f4 <RadioGetLoRaTimeOnAirNumerator+0xb8>
        }
        else
        {
            ceilDenominator = 4 * datarate;
 80171ee:	68bb      	ldr	r3, [r7, #8]
 80171f0:	009b      	lsls	r3, r3, #2
 80171f2:	623b      	str	r3, [r7, #32]
        }
    }

    if( ceilNumerator < 0 )
 80171f4:	69fb      	ldr	r3, [r7, #28]
 80171f6:	2b00      	cmp	r3, #0
 80171f8:	da01      	bge.n	80171fe <RadioGetLoRaTimeOnAirNumerator+0xc2>
    {
        ceilNumerator = 0;
 80171fa:	2300      	movs	r3, #0
 80171fc:	61fb      	str	r3, [r7, #28]
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 80171fe:	69fa      	ldr	r2, [r7, #28]
 8017200:	6a3b      	ldr	r3, [r7, #32]
 8017202:	4413      	add	r3, r2
 8017204:	1e5a      	subs	r2, r3, #1
 8017206:	6a3b      	ldr	r3, [r7, #32]
 8017208:	fb92 f3f3 	sdiv	r3, r2, r3
 801720c:	697a      	ldr	r2, [r7, #20]
 801720e:	fb03 f202 	mul.w	r2, r3, r2
 8017212:	88bb      	ldrh	r3, [r7, #4]
 8017214:	4413      	add	r3, r2
    int32_t intermediate =
 8017216:	330c      	adds	r3, #12
 8017218:	61bb      	str	r3, [r7, #24]

    if( datarate <= 6 )
 801721a:	68bb      	ldr	r3, [r7, #8]
 801721c:	2b06      	cmp	r3, #6
 801721e:	d802      	bhi.n	8017226 <RadioGetLoRaTimeOnAirNumerator+0xea>
    {
        intermediate += 2;
 8017220:	69bb      	ldr	r3, [r7, #24]
 8017222:	3302      	adds	r3, #2
 8017224:	61bb      	str	r3, [r7, #24]
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 8017226:	69bb      	ldr	r3, [r7, #24]
 8017228:	009b      	lsls	r3, r3, #2
 801722a:	1c5a      	adds	r2, r3, #1
 801722c:	68bb      	ldr	r3, [r7, #8]
 801722e:	3b02      	subs	r3, #2
 8017230:	fa02 f303 	lsl.w	r3, r2, r3
}
 8017234:	4618      	mov	r0, r3
 8017236:	372c      	adds	r7, #44	@ 0x2c
 8017238:	46bd      	mov	sp, r7
 801723a:	bc80      	pop	{r7}
 801723c:	4770      	bx	lr
	...

08017240 <RadioTimeOnAir>:

static uint32_t RadioTimeOnAir( RadioModems_t modem, uint32_t bandwidth,
                                uint32_t datarate, uint8_t coderate,
                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                bool crcOn )
{
 8017240:	b580      	push	{r7, lr}
 8017242:	b08a      	sub	sp, #40	@ 0x28
 8017244:	af04      	add	r7, sp, #16
 8017246:	60b9      	str	r1, [r7, #8]
 8017248:	607a      	str	r2, [r7, #4]
 801724a:	461a      	mov	r2, r3
 801724c:	4603      	mov	r3, r0
 801724e:	73fb      	strb	r3, [r7, #15]
 8017250:	4613      	mov	r3, r2
 8017252:	73bb      	strb	r3, [r7, #14]
    uint32_t numerator = 0;
 8017254:	2300      	movs	r3, #0
 8017256:	617b      	str	r3, [r7, #20]
    uint32_t denominator = 1;
 8017258:	2301      	movs	r3, #1
 801725a:	613b      	str	r3, [r7, #16]

    switch( modem )
 801725c:	7bfb      	ldrb	r3, [r7, #15]
 801725e:	2b00      	cmp	r3, #0
 8017260:	d002      	beq.n	8017268 <RadioTimeOnAir+0x28>
 8017262:	2b01      	cmp	r3, #1
 8017264:	d017      	beq.n	8017296 <RadioTimeOnAir+0x56>
                                                                  fixLen, payloadLen, crcOn );
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
        }
        break;
    default:
        break;
 8017266:	e035      	b.n	80172d4 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetGfskTimeOnAirNumerator( datarate, coderate,
 8017268:	f897 0024 	ldrb.w	r0, [r7, #36]	@ 0x24
 801726c:	8c3a      	ldrh	r2, [r7, #32]
 801726e:	7bb9      	ldrb	r1, [r7, #14]
 8017270:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8017274:	9301      	str	r3, [sp, #4]
 8017276:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 801727a:	9300      	str	r3, [sp, #0]
 801727c:	4603      	mov	r3, r0
 801727e:	6878      	ldr	r0, [r7, #4]
 8017280:	f7ff ff32 	bl	80170e8 <RadioGetGfskTimeOnAirNumerator>
 8017284:	4603      	mov	r3, r0
 8017286:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 801728a:	fb02 f303 	mul.w	r3, r2, r3
 801728e:	617b      	str	r3, [r7, #20]
            denominator = datarate;
 8017290:	687b      	ldr	r3, [r7, #4]
 8017292:	613b      	str	r3, [r7, #16]
        break;
 8017294:	e01e      	b.n	80172d4 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
 8017296:	8c39      	ldrh	r1, [r7, #32]
 8017298:	7bba      	ldrb	r2, [r7, #14]
 801729a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 801729e:	9302      	str	r3, [sp, #8]
 80172a0:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80172a4:	9301      	str	r3, [sp, #4]
 80172a6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80172aa:	9300      	str	r3, [sp, #0]
 80172ac:	460b      	mov	r3, r1
 80172ae:	6879      	ldr	r1, [r7, #4]
 80172b0:	68b8      	ldr	r0, [r7, #8]
 80172b2:	f7ff ff43 	bl	801713c <RadioGetLoRaTimeOnAirNumerator>
 80172b6:	4603      	mov	r3, r0
 80172b8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80172bc:	fb02 f303 	mul.w	r3, r2, r3
 80172c0:	617b      	str	r3, [r7, #20]
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
 80172c2:	4a0a      	ldr	r2, [pc, #40]	@ (80172ec <RadioTimeOnAir+0xac>)
 80172c4:	68bb      	ldr	r3, [r7, #8]
 80172c6:	4413      	add	r3, r2
 80172c8:	781b      	ldrb	r3, [r3, #0]
 80172ca:	4618      	mov	r0, r3
 80172cc:	f7ff feb6 	bl	801703c <RadioGetLoRaBandwidthInHz>
 80172d0:	6138      	str	r0, [r7, #16]
        break;
 80172d2:	bf00      	nop
    }
    // Perform integral ceil()
    return DIVC( numerator, denominator );
 80172d4:	697a      	ldr	r2, [r7, #20]
 80172d6:	693b      	ldr	r3, [r7, #16]
 80172d8:	4413      	add	r3, r2
 80172da:	1e5a      	subs	r2, r3, #1
 80172dc:	693b      	ldr	r3, [r7, #16]
 80172de:	fbb2 f3f3 	udiv	r3, r2, r3
}
 80172e2:	4618      	mov	r0, r3
 80172e4:	3718      	adds	r7, #24
 80172e6:	46bd      	mov	sp, r7
 80172e8:	bd80      	pop	{r7, pc}
 80172ea:	bf00      	nop
 80172ec:	0801bd94 	.word	0x0801bd94

080172f0 <RadioSend>:

static radio_status_t RadioSend( uint8_t *buffer, uint8_t size )
{
 80172f0:	b580      	push	{r7, lr}
 80172f2:	b084      	sub	sp, #16
 80172f4:	af00      	add	r7, sp, #0
 80172f6:	6078      	str	r0, [r7, #4]
 80172f8:	460b      	mov	r3, r1
 80172fa:	70fb      	strb	r3, [r7, #3]
    SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_TX_DBG,
 80172fc:	2300      	movs	r3, #0
 80172fe:	2200      	movs	r2, #0
 8017300:	f240 2101 	movw	r1, #513	@ 0x201
 8017304:	f240 2001 	movw	r0, #513	@ 0x201
 8017308:	f001 fd66 	bl	8018dd8 <SUBGRF_SetDioIrqParams>

    /* Set DBG pin */
    DBG_GPIO_RADIO_TX( SET );

    /* Set RF switch */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 801730c:	4b73      	ldr	r3, [pc, #460]	@ (80174dc <RadioSend+0x1ec>)
 801730e:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8017312:	2101      	movs	r1, #1
 8017314:	4618      	mov	r0, r3
 8017316:	f002 fa1d 	bl	8019754 <SUBGRF_SetSwitch>
    /* WORKAROUND - Modulation Quality with 500 kHz LoRaTM Bandwidth*/
    /* RegTxModulation = @address 0x0889 */
    if( ( SubgRf.Modem == MODEM_LORA ) && ( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 ) )
 801731a:	4b70      	ldr	r3, [pc, #448]	@ (80174dc <RadioSend+0x1ec>)
 801731c:	781b      	ldrb	r3, [r3, #0]
 801731e:	2b01      	cmp	r3, #1
 8017320:	d112      	bne.n	8017348 <RadioSend+0x58>
 8017322:	4b6e      	ldr	r3, [pc, #440]	@ (80174dc <RadioSend+0x1ec>)
 8017324:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8017328:	2b06      	cmp	r3, #6
 801732a:	d10d      	bne.n	8017348 <RadioSend+0x58>
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 801732c:	f640 0089 	movw	r0, #2185	@ 0x889
 8017330:	f002 f924 	bl	801957c <SUBGRF_ReadRegister>
 8017334:	4603      	mov	r3, r0
 8017336:	f023 0304 	bic.w	r3, r3, #4
 801733a:	b2db      	uxtb	r3, r3
 801733c:	4619      	mov	r1, r3
 801733e:	f640 0089 	movw	r0, #2185	@ 0x889
 8017342:	f002 f8f9 	bl	8019538 <SUBGRF_WriteRegister>
 8017346:	e00c      	b.n	8017362 <RadioSend+0x72>
    }
    else
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 8017348:	f640 0089 	movw	r0, #2185	@ 0x889
 801734c:	f002 f916 	bl	801957c <SUBGRF_ReadRegister>
 8017350:	4603      	mov	r3, r0
 8017352:	f043 0304 	orr.w	r3, r3, #4
 8017356:	b2db      	uxtb	r3, r3
 8017358:	4619      	mov	r1, r3
 801735a:	f640 0089 	movw	r0, #2185	@ 0x889
 801735e:	f002 f8eb 	bl	8019538 <SUBGRF_WriteRegister>
    }
    else
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    {
        /* WORKAROUND END */
        switch( SubgRf.Modem )
 8017362:	4b5e      	ldr	r3, [pc, #376]	@ (80174dc <RadioSend+0x1ec>)
 8017364:	781b      	ldrb	r3, [r3, #0]
 8017366:	2b04      	cmp	r3, #4
 8017368:	f200 80a8 	bhi.w	80174bc <RadioSend+0x1cc>
 801736c:	a201      	add	r2, pc, #4	@ (adr r2, 8017374 <RadioSend+0x84>)
 801736e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017372:	bf00      	nop
 8017374:	080173a3 	.word	0x080173a3
 8017378:	08017389 	.word	0x08017389
 801737c:	080173a3 	.word	0x080173a3
 8017380:	08017405 	.word	0x08017405
 8017384:	08017425 	.word	0x08017425
        {
        case MODEM_LORA:
        {
            SubgRf.PacketParams.Params.LoRa.PayloadLength = size;
 8017388:	4a54      	ldr	r2, [pc, #336]	@ (80174dc <RadioSend+0x1ec>)
 801738a:	78fb      	ldrb	r3, [r7, #3]
 801738c:	77d3      	strb	r3, [r2, #31]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801738e:	4854      	ldr	r0, [pc, #336]	@ (80174e0 <RadioSend+0x1f0>)
 8017390:	f001 ff8a 	bl	80192a8 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 8017394:	78fb      	ldrb	r3, [r7, #3]
 8017396:	2200      	movs	r2, #0
 8017398:	4619      	mov	r1, r3
 801739a:	6878      	ldr	r0, [r7, #4]
 801739c:	f001 fa3a 	bl	8018814 <SUBGRF_SendPayload>
            break;
 80173a0:	e08d      	b.n	80174be <RadioSend+0x1ce>
        }
        case MODEM_MSK:
        case MODEM_FSK:
        {
            if ( 1UL == RFW_Is_Init( ) )
 80173a2:	f002 fbd0 	bl	8019b46 <RFW_Is_Init>
 80173a6:	4603      	mov	r3, r0
 80173a8:	2b01      	cmp	r3, #1
 80173aa:	d11e      	bne.n	80173ea <RadioSend+0xfa>
            {
                uint8_t outsize;
                if ( 0UL == RFW_TransmitInit( buffer,size, &outsize ) )
 80173ac:	f107 020d 	add.w	r2, r7, #13
 80173b0:	78fb      	ldrb	r3, [r7, #3]
 80173b2:	4619      	mov	r1, r3
 80173b4:	6878      	ldr	r0, [r7, #4]
 80173b6:	f002 fbde 	bl	8019b76 <RFW_TransmitInit>
 80173ba:	4603      	mov	r3, r0
 80173bc:	2b00      	cmp	r3, #0
 80173be:	d10c      	bne.n	80173da <RadioSend+0xea>
                {
                    SubgRf.PacketParams.Params.Gfsk.PayloadLength = outsize;
 80173c0:	7b7a      	ldrb	r2, [r7, #13]
 80173c2:	4b46      	ldr	r3, [pc, #280]	@ (80174dc <RadioSend+0x1ec>)
 80173c4:	759a      	strb	r2, [r3, #22]
                    SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80173c6:	4846      	ldr	r0, [pc, #280]	@ (80174e0 <RadioSend+0x1f0>)
 80173c8:	f001 ff6e 	bl	80192a8 <SUBGRF_SetPacketParams>
                    SUBGRF_SendPayload( buffer, outsize, 0 );
 80173cc:	7b7b      	ldrb	r3, [r7, #13]
 80173ce:	2200      	movs	r2, #0
 80173d0:	4619      	mov	r1, r3
 80173d2:	6878      	ldr	r0, [r7, #4]
 80173d4:	f001 fa1e 	bl	8018814 <SUBGRF_SendPayload>
            {
                SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
                SUBGRF_SetPacketParams( &SubgRf.PacketParams );
                SUBGRF_SendPayload( buffer, size, 0 );
            }
            break;
 80173d8:	e071      	b.n	80174be <RadioSend+0x1ce>
                    MW_LOG( TS_ON, VLEVEL_M, "RadioSend Oversize\r\n" );
 80173da:	4b42      	ldr	r3, [pc, #264]	@ (80174e4 <RadioSend+0x1f4>)
 80173dc:	2201      	movs	r2, #1
 80173de:	2100      	movs	r1, #0
 80173e0:	2002      	movs	r0, #2
 80173e2:	f003 fc67 	bl	801acb4 <UTIL_ADV_TRACE_COND_FSend>
                    return RADIO_STATUS_ERROR;
 80173e6:	2303      	movs	r3, #3
 80173e8:	e073      	b.n	80174d2 <RadioSend+0x1e2>
                SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
 80173ea:	4a3c      	ldr	r2, [pc, #240]	@ (80174dc <RadioSend+0x1ec>)
 80173ec:	78fb      	ldrb	r3, [r7, #3]
 80173ee:	7593      	strb	r3, [r2, #22]
                SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80173f0:	483b      	ldr	r0, [pc, #236]	@ (80174e0 <RadioSend+0x1f0>)
 80173f2:	f001 ff59 	bl	80192a8 <SUBGRF_SetPacketParams>
                SUBGRF_SendPayload( buffer, size, 0 );
 80173f6:	78fb      	ldrb	r3, [r7, #3]
 80173f8:	2200      	movs	r2, #0
 80173fa:	4619      	mov	r1, r3
 80173fc:	6878      	ldr	r0, [r7, #4]
 80173fe:	f001 fa09 	bl	8018814 <SUBGRF_SendPayload>
            break;
 8017402:	e05c      	b.n	80174be <RadioSend+0x1ce>
        }
        case MODEM_BPSK:
        {
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 8017404:	4b35      	ldr	r3, [pc, #212]	@ (80174dc <RadioSend+0x1ec>)
 8017406:	2202      	movs	r2, #2
 8017408:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size;
 801740a:	4a34      	ldr	r2, [pc, #208]	@ (80174dc <RadioSend+0x1ec>)
 801740c:	78fb      	ldrb	r3, [r7, #3]
 801740e:	7693      	strb	r3, [r2, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8017410:	4833      	ldr	r0, [pc, #204]	@ (80174e0 <RadioSend+0x1f0>)
 8017412:	f001 ff49 	bl	80192a8 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 8017416:	78fb      	ldrb	r3, [r7, #3]
 8017418:	2200      	movs	r2, #0
 801741a:	4619      	mov	r1, r3
 801741c:	6878      	ldr	r0, [r7, #4]
 801741e:	f001 f9f9 	bl	8018814 <SUBGRF_SendPayload>
            break;
 8017422:	e04c      	b.n	80174be <RadioSend+0x1ce>
        case MODEM_SIGFOX_TX:
        {
            /* from bpsk to dbpsk */
            /* first 1 bit duplicated */
            /* RadioBuffer is 1 bytes more */
            payload_integration( RadioBuffer, buffer, size );
 8017424:	78fb      	ldrb	r3, [r7, #3]
 8017426:	461a      	mov	r2, r3
 8017428:	6879      	ldr	r1, [r7, #4]
 801742a:	482f      	ldr	r0, [pc, #188]	@ (80174e8 <RadioSend+0x1f8>)
 801742c:	f000 fcca 	bl	8017dc4 <payload_integration>

            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 8017430:	4b2a      	ldr	r3, [pc, #168]	@ (80174dc <RadioSend+0x1ec>)
 8017432:	2202      	movs	r2, #2
 8017434:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size + 1;
 8017436:	78fb      	ldrb	r3, [r7, #3]
 8017438:	3301      	adds	r3, #1
 801743a:	b2da      	uxtb	r2, r3
 801743c:	4b27      	ldr	r3, [pc, #156]	@ (80174dc <RadioSend+0x1ec>)
 801743e:	769a      	strb	r2, [r3, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8017440:	4827      	ldr	r0, [pc, #156]	@ (80174e0 <RadioSend+0x1f0>)
 8017442:	f001 ff31 	bl	80192a8 <SUBGRF_SetPacketParams>

            RadioWrite( SUBGHZ_RAM_RAMPUPL, 0 ); // clean start-up LSB
 8017446:	2100      	movs	r1, #0
 8017448:	20f1      	movs	r0, #241	@ 0xf1
 801744a:	f000 f965 	bl	8017718 <RadioWrite>
            RadioWrite( SUBGHZ_RAM_RAMPUPH, 0 ); // clean start-up MSB
 801744e:	2100      	movs	r1, #0
 8017450:	20f0      	movs	r0, #240	@ 0xf0
 8017452:	f000 f961 	bl	8017718 <RadioWrite>
            if( SubgRf.ModulationParams.Params.Bpsk.BitRate == 100 )
 8017456:	4b21      	ldr	r3, [pc, #132]	@ (80174dc <RadioSend+0x1ec>)
 8017458:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801745a:	2b64      	cmp	r3, #100	@ 0x64
 801745c:	d108      	bne.n	8017470 <RadioSend+0x180>
            {
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0x70 ); // clean end of frame LSB
 801745e:	2170      	movs	r1, #112	@ 0x70
 8017460:	20f3      	movs	r0, #243	@ 0xf3
 8017462:	f000 f959 	bl	8017718 <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x1D ); // clean end of frame MSB
 8017466:	211d      	movs	r1, #29
 8017468:	20f2      	movs	r0, #242	@ 0xf2
 801746a:	f000 f955 	bl	8017718 <RadioWrite>
 801746e:	e007      	b.n	8017480 <RadioSend+0x190>
            }
            else // 600 bps
            {
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0xE1 ); // clean end of frame LSB
 8017470:	21e1      	movs	r1, #225	@ 0xe1
 8017472:	20f3      	movs	r0, #243	@ 0xf3
 8017474:	f000 f950 	bl	8017718 <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x04 ); // clean end of frame MSB
 8017478:	2104      	movs	r1, #4
 801747a:	20f2      	movs	r0, #242	@ 0xf2
 801747c:	f000 f94c 	bl	8017718 <RadioWrite>
            }

            uint16_t bitNum = ( size * 8 ) + 2;
 8017480:	78fb      	ldrb	r3, [r7, #3]
 8017482:	b29b      	uxth	r3, r3
 8017484:	00db      	lsls	r3, r3, #3
 8017486:	b29b      	uxth	r3, r3
 8017488:	3302      	adds	r3, #2
 801748a:	81fb      	strh	r3, [r7, #14]
            RadioWrite( SUBGHZ_RAM_FRAMELIMH, ( bitNum >> 8 ) & 0x00FF );    // limit frame
 801748c:	89fb      	ldrh	r3, [r7, #14]
 801748e:	0a1b      	lsrs	r3, r3, #8
 8017490:	b29b      	uxth	r3, r3
 8017492:	b2db      	uxtb	r3, r3
 8017494:	4619      	mov	r1, r3
 8017496:	20f4      	movs	r0, #244	@ 0xf4
 8017498:	f000 f93e 	bl	8017718 <RadioWrite>
            RadioWrite( SUBGHZ_RAM_FRAMELIML, bitNum & 0x00FF );             // limit frame
 801749c:	89fb      	ldrh	r3, [r7, #14]
 801749e:	b2db      	uxtb	r3, r3
 80174a0:	4619      	mov	r1, r3
 80174a2:	20f5      	movs	r0, #245	@ 0xf5
 80174a4:	f000 f938 	bl	8017718 <RadioWrite>
            SUBGRF_SendPayload( RadioBuffer, size + 1, 0xFFFFFF );
 80174a8:	78fb      	ldrb	r3, [r7, #3]
 80174aa:	3301      	adds	r3, #1
 80174ac:	b2db      	uxtb	r3, r3
 80174ae:	f06f 427f 	mvn.w	r2, #4278190080	@ 0xff000000
 80174b2:	4619      	mov	r1, r3
 80174b4:	480c      	ldr	r0, [pc, #48]	@ (80174e8 <RadioSend+0x1f8>)
 80174b6:	f001 f9ad 	bl	8018814 <SUBGRF_SendPayload>
            break;
 80174ba:	e000      	b.n	80174be <RadioSend+0x1ce>
        }
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 80174bc:	bf00      	nop
        }

        TimerSetValue( &TxTimeoutTimer, SubgRf.TxTimeout );
 80174be:	4b07      	ldr	r3, [pc, #28]	@ (80174dc <RadioSend+0x1ec>)
 80174c0:	685b      	ldr	r3, [r3, #4]
 80174c2:	4619      	mov	r1, r3
 80174c4:	4809      	ldr	r0, [pc, #36]	@ (80174ec <RadioSend+0x1fc>)
 80174c6:	f003 fadb 	bl	801aa80 <UTIL_TIMER_SetPeriod>
        TimerStart( &TxTimeoutTimer );
 80174ca:	4808      	ldr	r0, [pc, #32]	@ (80174ec <RadioSend+0x1fc>)
 80174cc:	f003 f9fa 	bl	801a8c4 <UTIL_TIMER_Start>
    }

    return RADIO_STATUS_OK;
 80174d0:	2300      	movs	r3, #0
}
 80174d2:	4618      	mov	r0, r3
 80174d4:	3710      	adds	r7, #16
 80174d6:	46bd      	mov	sp, r7
 80174d8:	bd80      	pop	{r7, pc}
 80174da:	bf00      	nop
 80174dc:	200014ec 	.word	0x200014ec
 80174e0:	200014fa 	.word	0x200014fa
 80174e4:	0801b724 	.word	0x0801b724
 80174e8:	200013e8 	.word	0x200013e8
 80174ec:	20001548 	.word	0x20001548

080174f0 <RadioSleep>:

static void RadioSleep( void )
{
 80174f0:	b580      	push	{r7, lr}
 80174f2:	b082      	sub	sp, #8
 80174f4:	af00      	add	r7, sp, #0
    SleepParams_t params = { 0 };
 80174f6:	2300      	movs	r3, #0
 80174f8:	713b      	strb	r3, [r7, #4]

    params.Fields.WarmStart = 1;
 80174fa:	793b      	ldrb	r3, [r7, #4]
 80174fc:	f043 0304 	orr.w	r3, r3, #4
 8017500:	713b      	strb	r3, [r7, #4]
    SUBGRF_SetSleep( params );
 8017502:	7938      	ldrb	r0, [r7, #4]
 8017504:	f001 fa62 	bl	80189cc <SUBGRF_SetSleep>

    RADIO_DELAY_MS( 2 );
 8017508:	2002      	movs	r0, #2
 801750a:	f7ea fb97 	bl	8001c3c <HAL_Delay>
}
 801750e:	bf00      	nop
 8017510:	3708      	adds	r7, #8
 8017512:	46bd      	mov	sp, r7
 8017514:	bd80      	pop	{r7, pc}

08017516 <RadioStandby>:

static void RadioStandby( void )
{
 8017516:	b580      	push	{r7, lr}
 8017518:	af00      	add	r7, sp, #0
    SUBGRF_SetStandby( STDBY_RC );
 801751a:	2000      	movs	r0, #0
 801751c:	f001 fa88 	bl	8018a30 <SUBGRF_SetStandby>
}
 8017520:	bf00      	nop
 8017522:	bd80      	pop	{r7, pc}

08017524 <RadioRx>:

static void RadioRx( uint32_t timeout )
{
 8017524:	b580      	push	{r7, lr}
 8017526:	b082      	sub	sp, #8
 8017528:	af00      	add	r7, sp, #0
 801752a:	6078      	str	r0, [r7, #4]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    if( 1UL == RFW_Is_Init( ) )
 801752c:	f002 fb0b 	bl	8019b46 <RFW_Is_Init>
 8017530:	4603      	mov	r3, r0
 8017532:	2b01      	cmp	r3, #1
 8017534:	d102      	bne.n	801753c <RadioRx+0x18>
    {
        RFW_ReceiveInit( );
 8017536:	f002 fb2e 	bl	8019b96 <RFW_ReceiveInit>
 801753a:	e007      	b.n	801754c <RadioRx+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 801753c:	2300      	movs	r3, #0
 801753e:	2200      	movs	r2, #0
 8017540:	f240 2162 	movw	r1, #610	@ 0x262
 8017544:	f240 2062 	movw	r0, #610	@ 0x262
 8017548:	f001 fc46 	bl	8018dd8 <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }

    if( timeout != 0 )
 801754c:	687b      	ldr	r3, [r7, #4]
 801754e:	2b00      	cmp	r3, #0
 8017550:	d006      	beq.n	8017560 <RadioRx+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 8017552:	6879      	ldr	r1, [r7, #4]
 8017554:	4811      	ldr	r0, [pc, #68]	@ (801759c <RadioRx+0x78>)
 8017556:	f003 fa93 	bl	801aa80 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 801755a:	4810      	ldr	r0, [pc, #64]	@ (801759c <RadioRx+0x78>)
 801755c:	f003 f9b2 	bl	801a8c4 <UTIL_TIMER_Start>
    }
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8017560:	4b0f      	ldr	r3, [pc, #60]	@ (80175a0 <RadioRx+0x7c>)
 8017562:	2200      	movs	r2, #0
 8017564:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8017566:	4b0e      	ldr	r3, [pc, #56]	@ (80175a0 <RadioRx+0x7c>)
 8017568:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 801756c:	2100      	movs	r1, #0
 801756e:	4618      	mov	r0, r3
 8017570:	f002 f8f0 	bl	8019754 <SUBGRF_SetSwitch>

    if( SubgRf.RxContinuous == true )
 8017574:	4b0a      	ldr	r3, [pc, #40]	@ (80175a0 <RadioRx+0x7c>)
 8017576:	785b      	ldrb	r3, [r3, #1]
 8017578:	2b00      	cmp	r3, #0
 801757a:	d004      	beq.n	8017586 <RadioRx+0x62>
    {
        SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 801757c:	f06f 407f 	mvn.w	r0, #4278190080	@ 0xff000000
 8017580:	f001 fa92 	bl	8018aa8 <SUBGRF_SetRx>
    }
    else
    {
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
    }
}
 8017584:	e005      	b.n	8017592 <RadioRx+0x6e>
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
 8017586:	4b06      	ldr	r3, [pc, #24]	@ (80175a0 <RadioRx+0x7c>)
 8017588:	689b      	ldr	r3, [r3, #8]
 801758a:	019b      	lsls	r3, r3, #6
 801758c:	4618      	mov	r0, r3
 801758e:	f001 fa8b 	bl	8018aa8 <SUBGRF_SetRx>
}
 8017592:	bf00      	nop
 8017594:	3708      	adds	r7, #8
 8017596:	46bd      	mov	sp, r7
 8017598:	bd80      	pop	{r7, pc}
 801759a:	bf00      	nop
 801759c:	20001560 	.word	0x20001560
 80175a0:	200014ec 	.word	0x200014ec

080175a4 <RadioRxBoosted>:

static void RadioRxBoosted( uint32_t timeout )
{
 80175a4:	b580      	push	{r7, lr}
 80175a6:	b082      	sub	sp, #8
 80175a8:	af00      	add	r7, sp, #0
 80175aa:	6078      	str	r0, [r7, #4]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    if( 1UL == RFW_Is_Init() )
 80175ac:	f002 facb 	bl	8019b46 <RFW_Is_Init>
 80175b0:	4603      	mov	r3, r0
 80175b2:	2b01      	cmp	r3, #1
 80175b4:	d102      	bne.n	80175bc <RadioRxBoosted+0x18>
    {
        RFW_ReceiveInit();
 80175b6:	f002 faee 	bl	8019b96 <RFW_ReceiveInit>
 80175ba:	e007      	b.n	80175cc <RadioRxBoosted+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 80175bc:	2300      	movs	r3, #0
 80175be:	2200      	movs	r2, #0
 80175c0:	f240 2162 	movw	r1, #610	@ 0x262
 80175c4:	f240 2062 	movw	r0, #610	@ 0x262
 80175c8:	f001 fc06 	bl	8018dd8 <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }
    if( timeout != 0 )
 80175cc:	687b      	ldr	r3, [r7, #4]
 80175ce:	2b00      	cmp	r3, #0
 80175d0:	d006      	beq.n	80175e0 <RadioRxBoosted+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 80175d2:	6879      	ldr	r1, [r7, #4]
 80175d4:	4811      	ldr	r0, [pc, #68]	@ (801761c <RadioRxBoosted+0x78>)
 80175d6:	f003 fa53 	bl	801aa80 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 80175da:	4810      	ldr	r0, [pc, #64]	@ (801761c <RadioRxBoosted+0x78>)
 80175dc:	f003 f972 	bl	801a8c4 <UTIL_TIMER_Start>
    }
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 80175e0:	4b0f      	ldr	r3, [pc, #60]	@ (8017620 <RadioRxBoosted+0x7c>)
 80175e2:	2200      	movs	r2, #0
 80175e4:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 80175e6:	4b0e      	ldr	r3, [pc, #56]	@ (8017620 <RadioRxBoosted+0x7c>)
 80175e8:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 80175ec:	2100      	movs	r1, #0
 80175ee:	4618      	mov	r0, r3
 80175f0:	f002 f8b0 	bl	8019754 <SUBGRF_SetSwitch>

    if( SubgRf.RxContinuous == true )
 80175f4:	4b0a      	ldr	r3, [pc, #40]	@ (8017620 <RadioRxBoosted+0x7c>)
 80175f6:	785b      	ldrb	r3, [r3, #1]
 80175f8:	2b00      	cmp	r3, #0
 80175fa:	d004      	beq.n	8017606 <RadioRxBoosted+0x62>
    {
        SUBGRF_SetRxBoosted( 0xFFFFFF ); // Rx Continuous
 80175fc:	f06f 407f 	mvn.w	r0, #4278190080	@ 0xff000000
 8017600:	f001 fa72 	bl	8018ae8 <SUBGRF_SetRxBoosted>
    }
    else
    {
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
    }
}
 8017604:	e005      	b.n	8017612 <RadioRxBoosted+0x6e>
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
 8017606:	4b06      	ldr	r3, [pc, #24]	@ (8017620 <RadioRxBoosted+0x7c>)
 8017608:	689b      	ldr	r3, [r3, #8]
 801760a:	019b      	lsls	r3, r3, #6
 801760c:	4618      	mov	r0, r3
 801760e:	f001 fa6b 	bl	8018ae8 <SUBGRF_SetRxBoosted>
}
 8017612:	bf00      	nop
 8017614:	3708      	adds	r7, #8
 8017616:	46bd      	mov	sp, r7
 8017618:	bd80      	pop	{r7, pc}
 801761a:	bf00      	nop
 801761c:	20001560 	.word	0x20001560
 8017620:	200014ec 	.word	0x200014ec

08017624 <RadioSetRxDutyCycle>:

static void RadioSetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 8017624:	b580      	push	{r7, lr}
 8017626:	b082      	sub	sp, #8
 8017628:	af00      	add	r7, sp, #0
 801762a:	6078      	str	r0, [r7, #4]
 801762c:	6039      	str	r1, [r7, #0]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 2 * rxTime + sleepTime;
 801762e:	687b      	ldr	r3, [r7, #4]
 8017630:	005a      	lsls	r2, r3, #1
 8017632:	683b      	ldr	r3, [r7, #0]
 8017634:	4413      	add	r3, r2
 8017636:	4a0c      	ldr	r2, [pc, #48]	@ (8017668 <RadioSetRxDutyCycle+0x44>)
 8017638:	6593      	str	r3, [r2, #88]	@ 0x58
    /*Enable also the IRQ_PREAMBLE_DETECTED*/
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 801763a:	2300      	movs	r3, #0
 801763c:	2200      	movs	r2, #0
 801763e:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8017642:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8017646:	f001 fbc7 	bl	8018dd8 <SUBGRF_SetDioIrqParams>
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 801764a:	4b07      	ldr	r3, [pc, #28]	@ (8017668 <RadioSetRxDutyCycle+0x44>)
 801764c:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8017650:	2100      	movs	r1, #0
 8017652:	4618      	mov	r0, r3
 8017654:	f002 f87e 	bl	8019754 <SUBGRF_SetSwitch>
    /* Start Rx DutyCycle*/
    SUBGRF_SetRxDutyCycle( rxTime, sleepTime );
 8017658:	6839      	ldr	r1, [r7, #0]
 801765a:	6878      	ldr	r0, [r7, #4]
 801765c:	f001 fa68 	bl	8018b30 <SUBGRF_SetRxDutyCycle>
}
 8017660:	bf00      	nop
 8017662:	3708      	adds	r7, #8
 8017664:	46bd      	mov	sp, r7
 8017666:	bd80      	pop	{r7, pc}
 8017668:	200014ec 	.word	0x200014ec

0801766c <RadioStartCad>:

static void RadioStartCad( void )
{
 801766c:	b580      	push	{r7, lr}
 801766e:	af00      	add	r7, sp, #0
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8017670:	4b09      	ldr	r3, [pc, #36]	@ (8017698 <RadioStartCad+0x2c>)
 8017672:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8017676:	2100      	movs	r1, #0
 8017678:	4618      	mov	r0, r3
 801767a:	f002 f86b 	bl	8019754 <SUBGRF_SetSwitch>

    SUBGRF_SetDioIrqParams( IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
 801767e:	2300      	movs	r3, #0
 8017680:	2200      	movs	r2, #0
 8017682:	f44f 71c0 	mov.w	r1, #384	@ 0x180
 8017686:	f44f 70c0 	mov.w	r0, #384	@ 0x180
 801768a:	f001 fba5 	bl	8018dd8 <SUBGRF_SetDioIrqParams>
                            IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
                            IRQ_RADIO_NONE,
                            IRQ_RADIO_NONE );
    SUBGRF_SetCad( );
 801768e:	f001 fa7b 	bl	8018b88 <SUBGRF_SetCad>
}
 8017692:	bf00      	nop
 8017694:	bd80      	pop	{r7, pc}
 8017696:	bf00      	nop
 8017698:	200014ec 	.word	0x200014ec

0801769c <RadioSetTxContinuousWave>:

static void RadioSetTxContinuousWave( uint32_t freq, int8_t power, uint16_t time )
{
 801769c:	b580      	push	{r7, lr}
 801769e:	b084      	sub	sp, #16
 80176a0:	af00      	add	r7, sp, #0
 80176a2:	6078      	str	r0, [r7, #4]
 80176a4:	460b      	mov	r3, r1
 80176a6:	70fb      	strb	r3, [r7, #3]
 80176a8:	4613      	mov	r3, r2
 80176aa:	803b      	strh	r3, [r7, #0]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    uint32_t timeout = ( uint32_t )time * 1000;
 80176ac:	883b      	ldrh	r3, [r7, #0]
 80176ae:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80176b2:	fb02 f303 	mul.w	r3, r2, r3
 80176b6:	60fb      	str	r3, [r7, #12]
    uint8_t antswitchpow;

    SUBGRF_SetRfFrequency( freq );
 80176b8:	6878      	ldr	r0, [r7, #4]
 80176ba:	f001 fbe9 	bl	8018e90 <SUBGRF_SetRfFrequency>

    antswitchpow = SUBGRF_SetRfTxPower( power );
 80176be:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80176c2:	4618      	mov	r0, r3
 80176c4:	f002 f86e 	bl	80197a4 <SUBGRF_SetRfTxPower>
 80176c8:	4603      	mov	r3, r0
 80176ca:	72fb      	strb	r3, [r7, #11]

    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 80176cc:	210e      	movs	r1, #14
 80176ce:	f640 101f 	movw	r0, #2335	@ 0x91f
 80176d2:	f001 ff31 	bl	8019538 <SUBGRF_WriteRegister>

    /* Set RF switch */
    SUBGRF_SetSwitch( antswitchpow, RFSWITCH_TX );
 80176d6:	7afb      	ldrb	r3, [r7, #11]
 80176d8:	2101      	movs	r1, #1
 80176da:	4618      	mov	r0, r3
 80176dc:	f002 f83a 	bl	8019754 <SUBGRF_SetSwitch>

    SUBGRF_SetTxContinuousWave( );
 80176e0:	f001 fa60 	bl	8018ba4 <SUBGRF_SetTxContinuousWave>

    TimerSetValue( &TxTimeoutTimer, timeout );
 80176e4:	68f9      	ldr	r1, [r7, #12]
 80176e6:	4805      	ldr	r0, [pc, #20]	@ (80176fc <RadioSetTxContinuousWave+0x60>)
 80176e8:	f003 f9ca 	bl	801aa80 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 80176ec:	4803      	ldr	r0, [pc, #12]	@ (80176fc <RadioSetTxContinuousWave+0x60>)
 80176ee:	f003 f8e9 	bl	801a8c4 <UTIL_TIMER_Start>
}
 80176f2:	bf00      	nop
 80176f4:	3710      	adds	r7, #16
 80176f6:	46bd      	mov	sp, r7
 80176f8:	bd80      	pop	{r7, pc}
 80176fa:	bf00      	nop
 80176fc:	20001548 	.word	0x20001548

08017700 <RadioRssi>:

static int16_t RadioRssi( RadioModems_t modem )
{
 8017700:	b580      	push	{r7, lr}
 8017702:	b082      	sub	sp, #8
 8017704:	af00      	add	r7, sp, #0
 8017706:	4603      	mov	r3, r0
 8017708:	71fb      	strb	r3, [r7, #7]
    return SUBGRF_GetRssiInst( );
 801770a:	f001 fe82 	bl	8019412 <SUBGRF_GetRssiInst>
 801770e:	4603      	mov	r3, r0
}
 8017710:	4618      	mov	r0, r3
 8017712:	3708      	adds	r7, #8
 8017714:	46bd      	mov	sp, r7
 8017716:	bd80      	pop	{r7, pc}

08017718 <RadioWrite>:

static void RadioWrite( uint16_t addr, uint8_t data )
{
 8017718:	b580      	push	{r7, lr}
 801771a:	b082      	sub	sp, #8
 801771c:	af00      	add	r7, sp, #0
 801771e:	4603      	mov	r3, r0
 8017720:	460a      	mov	r2, r1
 8017722:	80fb      	strh	r3, [r7, #6]
 8017724:	4613      	mov	r3, r2
 8017726:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegister( addr, data );
 8017728:	797a      	ldrb	r2, [r7, #5]
 801772a:	88fb      	ldrh	r3, [r7, #6]
 801772c:	4611      	mov	r1, r2
 801772e:	4618      	mov	r0, r3
 8017730:	f001 ff02 	bl	8019538 <SUBGRF_WriteRegister>
}
 8017734:	bf00      	nop
 8017736:	3708      	adds	r7, #8
 8017738:	46bd      	mov	sp, r7
 801773a:	bd80      	pop	{r7, pc}

0801773c <RadioRead>:

static uint8_t RadioRead( uint16_t addr )
{
 801773c:	b580      	push	{r7, lr}
 801773e:	b082      	sub	sp, #8
 8017740:	af00      	add	r7, sp, #0
 8017742:	4603      	mov	r3, r0
 8017744:	80fb      	strh	r3, [r7, #6]
    return SUBGRF_ReadRegister( addr );
 8017746:	88fb      	ldrh	r3, [r7, #6]
 8017748:	4618      	mov	r0, r3
 801774a:	f001 ff17 	bl	801957c <SUBGRF_ReadRegister>
 801774e:	4603      	mov	r3, r0
}
 8017750:	4618      	mov	r0, r3
 8017752:	3708      	adds	r7, #8
 8017754:	46bd      	mov	sp, r7
 8017756:	bd80      	pop	{r7, pc}

08017758 <RadioWriteRegisters>:

static void RadioWriteRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 8017758:	b580      	push	{r7, lr}
 801775a:	b082      	sub	sp, #8
 801775c:	af00      	add	r7, sp, #0
 801775e:	4603      	mov	r3, r0
 8017760:	6039      	str	r1, [r7, #0]
 8017762:	80fb      	strh	r3, [r7, #6]
 8017764:	4613      	mov	r3, r2
 8017766:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegisters( addr, buffer, size );
 8017768:	797b      	ldrb	r3, [r7, #5]
 801776a:	b29a      	uxth	r2, r3
 801776c:	88fb      	ldrh	r3, [r7, #6]
 801776e:	6839      	ldr	r1, [r7, #0]
 8017770:	4618      	mov	r0, r3
 8017772:	f001 ff23 	bl	80195bc <SUBGRF_WriteRegisters>
}
 8017776:	bf00      	nop
 8017778:	3708      	adds	r7, #8
 801777a:	46bd      	mov	sp, r7
 801777c:	bd80      	pop	{r7, pc}

0801777e <RadioReadRegisters>:

static void RadioReadRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 801777e:	b580      	push	{r7, lr}
 8017780:	b082      	sub	sp, #8
 8017782:	af00      	add	r7, sp, #0
 8017784:	4603      	mov	r3, r0
 8017786:	6039      	str	r1, [r7, #0]
 8017788:	80fb      	strh	r3, [r7, #6]
 801778a:	4613      	mov	r3, r2
 801778c:	717b      	strb	r3, [r7, #5]
    SUBGRF_ReadRegisters( addr, buffer, size );
 801778e:	797b      	ldrb	r3, [r7, #5]
 8017790:	b29a      	uxth	r2, r3
 8017792:	88fb      	ldrh	r3, [r7, #6]
 8017794:	6839      	ldr	r1, [r7, #0]
 8017796:	4618      	mov	r0, r3
 8017798:	f001 ff32 	bl	8019600 <SUBGRF_ReadRegisters>
}
 801779c:	bf00      	nop
 801779e:	3708      	adds	r7, #8
 80177a0:	46bd      	mov	sp, r7
 80177a2:	bd80      	pop	{r7, pc}

080177a4 <RadioSetMaxPayloadLength>:

static void RadioSetMaxPayloadLength( RadioModems_t modem, uint8_t max )
{
 80177a4:	b580      	push	{r7, lr}
 80177a6:	b082      	sub	sp, #8
 80177a8:	af00      	add	r7, sp, #0
 80177aa:	4603      	mov	r3, r0
 80177ac:	460a      	mov	r2, r1
 80177ae:	71fb      	strb	r3, [r7, #7]
 80177b0:	4613      	mov	r3, r2
 80177b2:	71bb      	strb	r3, [r7, #6]
    if( modem == MODEM_LORA )
 80177b4:	79fb      	ldrb	r3, [r7, #7]
 80177b6:	2b01      	cmp	r3, #1
 80177b8:	d10a      	bne.n	80177d0 <RadioSetMaxPayloadLength+0x2c>
    {
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength = max;
 80177ba:	4a0e      	ldr	r2, [pc, #56]	@ (80177f4 <RadioSetMaxPayloadLength+0x50>)
 80177bc:	79bb      	ldrb	r3, [r7, #6]
 80177be:	7013      	strb	r3, [r2, #0]
 80177c0:	4b0c      	ldr	r3, [pc, #48]	@ (80177f4 <RadioSetMaxPayloadLength+0x50>)
 80177c2:	781a      	ldrb	r2, [r3, #0]
 80177c4:	4b0c      	ldr	r3, [pc, #48]	@ (80177f8 <RadioSetMaxPayloadLength+0x54>)
 80177c6:	77da      	strb	r2, [r3, #31]
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80177c8:	480c      	ldr	r0, [pc, #48]	@ (80177fc <RadioSetMaxPayloadLength+0x58>)
 80177ca:	f001 fd6d 	bl	80192a8 <SUBGRF_SetPacketParams>
        {
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
        }
    }
}
 80177ce:	e00d      	b.n	80177ec <RadioSetMaxPayloadLength+0x48>
        if( SubgRf.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_VARIABLE_LENGTH )
 80177d0:	4b09      	ldr	r3, [pc, #36]	@ (80177f8 <RadioSetMaxPayloadLength+0x54>)
 80177d2:	7d5b      	ldrb	r3, [r3, #21]
 80177d4:	2b01      	cmp	r3, #1
 80177d6:	d109      	bne.n	80177ec <RadioSetMaxPayloadLength+0x48>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
 80177d8:	4a06      	ldr	r2, [pc, #24]	@ (80177f4 <RadioSetMaxPayloadLength+0x50>)
 80177da:	79bb      	ldrb	r3, [r7, #6]
 80177dc:	7013      	strb	r3, [r2, #0]
 80177de:	4b05      	ldr	r3, [pc, #20]	@ (80177f4 <RadioSetMaxPayloadLength+0x50>)
 80177e0:	781a      	ldrb	r2, [r3, #0]
 80177e2:	4b05      	ldr	r3, [pc, #20]	@ (80177f8 <RadioSetMaxPayloadLength+0x54>)
 80177e4:	759a      	strb	r2, [r3, #22]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80177e6:	4805      	ldr	r0, [pc, #20]	@ (80177fc <RadioSetMaxPayloadLength+0x58>)
 80177e8:	f001 fd5e 	bl	80192a8 <SUBGRF_SetPacketParams>
}
 80177ec:	bf00      	nop
 80177ee:	3708      	adds	r7, #8
 80177f0:	46bd      	mov	sp, r7
 80177f2:	bd80      	pop	{r7, pc}
 80177f4:	20000124 	.word	0x20000124
 80177f8:	200014ec 	.word	0x200014ec
 80177fc:	200014fa 	.word	0x200014fa

08017800 <RadioSetPublicNetwork>:

static void RadioSetPublicNetwork( bool enable )
{
 8017800:	b580      	push	{r7, lr}
 8017802:	b082      	sub	sp, #8
 8017804:	af00      	add	r7, sp, #0
 8017806:	4603      	mov	r3, r0
 8017808:	71fb      	strb	r3, [r7, #7]
    SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous = enable;
 801780a:	4a13      	ldr	r2, [pc, #76]	@ (8017858 <RadioSetPublicNetwork+0x58>)
 801780c:	79fb      	ldrb	r3, [r7, #7]
 801780e:	7313      	strb	r3, [r2, #12]
 8017810:	4b11      	ldr	r3, [pc, #68]	@ (8017858 <RadioSetPublicNetwork+0x58>)
 8017812:	7b1a      	ldrb	r2, [r3, #12]
 8017814:	4b10      	ldr	r3, [pc, #64]	@ (8017858 <RadioSetPublicNetwork+0x58>)
 8017816:	735a      	strb	r2, [r3, #13]

    RadioSetModem( MODEM_LORA );
 8017818:	2001      	movs	r0, #1
 801781a:	f7ff f813 	bl	8016844 <RadioSetModem>
    if( enable == true )
 801781e:	79fb      	ldrb	r3, [r7, #7]
 8017820:	2b00      	cmp	r3, #0
 8017822:	d00a      	beq.n	801783a <RadioSetPublicNetwork+0x3a>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PUBLIC_SYNCWORD >> 8 ) & 0xFF );
 8017824:	2134      	movs	r1, #52	@ 0x34
 8017826:	f44f 60e8 	mov.w	r0, #1856	@ 0x740
 801782a:	f001 fe85 	bl	8019538 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF );
 801782e:	2144      	movs	r1, #68	@ 0x44
 8017830:	f240 7041 	movw	r0, #1857	@ 0x741
 8017834:	f001 fe80 	bl	8019538 <SUBGRF_WriteRegister>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
    }
}
 8017838:	e009      	b.n	801784e <RadioSetPublicNetwork+0x4e>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 801783a:	2114      	movs	r1, #20
 801783c:	f44f 60e8 	mov.w	r0, #1856	@ 0x740
 8017840:	f001 fe7a 	bl	8019538 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 8017844:	2124      	movs	r1, #36	@ 0x24
 8017846:	f240 7041 	movw	r0, #1857	@ 0x741
 801784a:	f001 fe75 	bl	8019538 <SUBGRF_WriteRegister>
}
 801784e:	bf00      	nop
 8017850:	3708      	adds	r7, #8
 8017852:	46bd      	mov	sp, r7
 8017854:	bd80      	pop	{r7, pc}
 8017856:	bf00      	nop
 8017858:	200014ec 	.word	0x200014ec

0801785c <RadioGetWakeupTime>:

static uint32_t RadioGetWakeupTime( void )
{
 801785c:	b580      	push	{r7, lr}
 801785e:	af00      	add	r7, sp, #0
    return SUBGRF_GetRadioWakeUpTime() + RADIO_WAKEUP_TIME;
 8017860:	f001 ffd4 	bl	801980c <SUBGRF_GetRadioWakeUpTime>
 8017864:	4603      	mov	r3, r0
 8017866:	3303      	adds	r3, #3
}
 8017868:	4618      	mov	r0, r3
 801786a:	bd80      	pop	{r7, pc}

0801786c <RadioOnTxTimeoutIrq>:

static void RadioOnTxTimeoutIrq( void *context )
{
 801786c:	b580      	push	{r7, lr}
 801786e:	b082      	sub	sp, #8
 8017870:	af00      	add	r7, sp, #0
 8017872:	6078      	str	r0, [r7, #4]
    RADIO_TX_TIMEOUT_PROCESS();
 8017874:	f000 f80e 	bl	8017894 <RadioOnTxTimeoutProcess>
}
 8017878:	bf00      	nop
 801787a:	3708      	adds	r7, #8
 801787c:	46bd      	mov	sp, r7
 801787e:	bd80      	pop	{r7, pc}

08017880 <RadioOnRxTimeoutIrq>:

static void RadioOnRxTimeoutIrq( void *context )
{
 8017880:	b580      	push	{r7, lr}
 8017882:	b082      	sub	sp, #8
 8017884:	af00      	add	r7, sp, #0
 8017886:	6078      	str	r0, [r7, #4]
    RADIO_RX_TIMEOUT_PROCESS();
 8017888:	f000 f818 	bl	80178bc <RadioOnRxTimeoutProcess>
}
 801788c:	bf00      	nop
 801788e:	3708      	adds	r7, #8
 8017890:	46bd      	mov	sp, r7
 8017892:	bd80      	pop	{r7, pc}

08017894 <RadioOnTxTimeoutProcess>:

static void RadioOnTxTimeoutProcess( void )
{
 8017894:	b580      	push	{r7, lr}
 8017896:	af00      	add	r7, sp, #0
    DBG_GPIO_RADIO_TX( RST );

    if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8017898:	4b07      	ldr	r3, [pc, #28]	@ (80178b8 <RadioOnTxTimeoutProcess+0x24>)
 801789a:	681b      	ldr	r3, [r3, #0]
 801789c:	2b00      	cmp	r3, #0
 801789e:	d008      	beq.n	80178b2 <RadioOnTxTimeoutProcess+0x1e>
 80178a0:	4b05      	ldr	r3, [pc, #20]	@ (80178b8 <RadioOnTxTimeoutProcess+0x24>)
 80178a2:	681b      	ldr	r3, [r3, #0]
 80178a4:	685b      	ldr	r3, [r3, #4]
 80178a6:	2b00      	cmp	r3, #0
 80178a8:	d003      	beq.n	80178b2 <RadioOnTxTimeoutProcess+0x1e>
    {
        RadioEvents->TxTimeout( );
 80178aa:	4b03      	ldr	r3, [pc, #12]	@ (80178b8 <RadioOnTxTimeoutProcess+0x24>)
 80178ac:	681b      	ldr	r3, [r3, #0]
 80178ae:	685b      	ldr	r3, [r3, #4]
 80178b0:	4798      	blx	r3
    }
}
 80178b2:	bf00      	nop
 80178b4:	bd80      	pop	{r7, pc}
 80178b6:	bf00      	nop
 80178b8:	200014e8 	.word	0x200014e8

080178bc <RadioOnRxTimeoutProcess>:

static void RadioOnRxTimeoutProcess( void )
{
 80178bc:	b580      	push	{r7, lr}
 80178be:	af00      	add	r7, sp, #0
    DBG_GPIO_RADIO_RX( RST );

    if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 80178c0:	4b07      	ldr	r3, [pc, #28]	@ (80178e0 <RadioOnRxTimeoutProcess+0x24>)
 80178c2:	681b      	ldr	r3, [r3, #0]
 80178c4:	2b00      	cmp	r3, #0
 80178c6:	d008      	beq.n	80178da <RadioOnRxTimeoutProcess+0x1e>
 80178c8:	4b05      	ldr	r3, [pc, #20]	@ (80178e0 <RadioOnRxTimeoutProcess+0x24>)
 80178ca:	681b      	ldr	r3, [r3, #0]
 80178cc:	68db      	ldr	r3, [r3, #12]
 80178ce:	2b00      	cmp	r3, #0
 80178d0:	d003      	beq.n	80178da <RadioOnRxTimeoutProcess+0x1e>
    {
        RadioEvents->RxTimeout( );
 80178d2:	4b03      	ldr	r3, [pc, #12]	@ (80178e0 <RadioOnRxTimeoutProcess+0x24>)
 80178d4:	681b      	ldr	r3, [r3, #0]
 80178d6:	68db      	ldr	r3, [r3, #12]
 80178d8:	4798      	blx	r3
    }
}
 80178da:	bf00      	nop
 80178dc:	bd80      	pop	{r7, pc}
 80178de:	bf00      	nop
 80178e0:	200014e8 	.word	0x200014e8

080178e4 <RadioOnDioIrq>:

static void RadioOnDioIrq( RadioIrqMasks_t radioIrq )
{
 80178e4:	b580      	push	{r7, lr}
 80178e6:	b082      	sub	sp, #8
 80178e8:	af00      	add	r7, sp, #0
 80178ea:	4603      	mov	r3, r0
 80178ec:	80fb      	strh	r3, [r7, #6]
    SubgRf.RadioIrq = radioIrq;
 80178ee:	4a05      	ldr	r2, [pc, #20]	@ (8017904 <RadioOnDioIrq+0x20>)
 80178f0:	88fb      	ldrh	r3, [r7, #6]
 80178f2:	f8a2 3054 	strh.w	r3, [r2, #84]	@ 0x54

    RADIO_IRQ_PROCESS();
 80178f6:	f000 f807 	bl	8017908 <RadioIrqProcess>
}
 80178fa:	bf00      	nop
 80178fc:	3708      	adds	r7, #8
 80178fe:	46bd      	mov	sp, r7
 8017900:	bd80      	pop	{r7, pc}
 8017902:	bf00      	nop
 8017904:	200014ec 	.word	0x200014ec

08017908 <RadioIrqProcess>:

static void RadioIrqProcess( void )
{
 8017908:	b5b0      	push	{r4, r5, r7, lr}
 801790a:	b082      	sub	sp, #8
 801790c:	af00      	add	r7, sp, #0
    uint8_t size = 0;
 801790e:	2300      	movs	r3, #0
 8017910:	71fb      	strb	r3, [r7, #7]
    int32_t cfo = 0;
 8017912:	2300      	movs	r3, #0
 8017914:	603b      	str	r3, [r7, #0]

    switch( SubgRf.RadioIrq )
 8017916:	4ba8      	ldr	r3, [pc, #672]	@ (8017bb8 <RadioIrqProcess+0x2b0>)
 8017918:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 801791c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8017920:	f000 810d 	beq.w	8017b3e <RadioIrqProcess+0x236>
 8017924:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8017928:	f300 81e8 	bgt.w	8017cfc <RadioIrqProcess+0x3f4>
 801792c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8017930:	f000 80f1 	beq.w	8017b16 <RadioIrqProcess+0x20e>
 8017934:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8017938:	f300 81e0 	bgt.w	8017cfc <RadioIrqProcess+0x3f4>
 801793c:	2b80      	cmp	r3, #128	@ 0x80
 801793e:	f000 80d6 	beq.w	8017aee <RadioIrqProcess+0x1e6>
 8017942:	2b80      	cmp	r3, #128	@ 0x80
 8017944:	f300 81da 	bgt.w	8017cfc <RadioIrqProcess+0x3f4>
 8017948:	2b20      	cmp	r3, #32
 801794a:	dc49      	bgt.n	80179e0 <RadioIrqProcess+0xd8>
 801794c:	2b00      	cmp	r3, #0
 801794e:	f340 81d5 	ble.w	8017cfc <RadioIrqProcess+0x3f4>
 8017952:	3b01      	subs	r3, #1
 8017954:	2b1f      	cmp	r3, #31
 8017956:	f200 81d1 	bhi.w	8017cfc <RadioIrqProcess+0x3f4>
 801795a:	a201      	add	r2, pc, #4	@ (adr r2, 8017960 <RadioIrqProcess+0x58>)
 801795c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017960:	080179e9 	.word	0x080179e9
 8017964:	08017a23 	.word	0x08017a23
 8017968:	08017cfd 	.word	0x08017cfd
 801796c:	08017bd9 	.word	0x08017bd9
 8017970:	08017cfd 	.word	0x08017cfd
 8017974:	08017cfd 	.word	0x08017cfd
 8017978:	08017cfd 	.word	0x08017cfd
 801797c:	08017c55 	.word	0x08017c55
 8017980:	08017cfd 	.word	0x08017cfd
 8017984:	08017cfd 	.word	0x08017cfd
 8017988:	08017cfd 	.word	0x08017cfd
 801798c:	08017cfd 	.word	0x08017cfd
 8017990:	08017cfd 	.word	0x08017cfd
 8017994:	08017cfd 	.word	0x08017cfd
 8017998:	08017cfd 	.word	0x08017cfd
 801799c:	08017c71 	.word	0x08017c71
 80179a0:	08017cfd 	.word	0x08017cfd
 80179a4:	08017cfd 	.word	0x08017cfd
 80179a8:	08017cfd 	.word	0x08017cfd
 80179ac:	08017cfd 	.word	0x08017cfd
 80179b0:	08017cfd 	.word	0x08017cfd
 80179b4:	08017cfd 	.word	0x08017cfd
 80179b8:	08017cfd 	.word	0x08017cfd
 80179bc:	08017cfd 	.word	0x08017cfd
 80179c0:	08017cfd 	.word	0x08017cfd
 80179c4:	08017cfd 	.word	0x08017cfd
 80179c8:	08017cfd 	.word	0x08017cfd
 80179cc:	08017cfd 	.word	0x08017cfd
 80179d0:	08017cfd 	.word	0x08017cfd
 80179d4:	08017cfd 	.word	0x08017cfd
 80179d8:	08017cfd 	.word	0x08017cfd
 80179dc:	08017c7f 	.word	0x08017c7f
 80179e0:	2b40      	cmp	r3, #64	@ 0x40
 80179e2:	f000 816d 	beq.w	8017cc0 <RadioIrqProcess+0x3b8>
        MW_LOG( TS_ON, VLEVEL_M,  "HOP\r\n" );
        break;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    default:
        break;
 80179e6:	e189      	b.n	8017cfc <RadioIrqProcess+0x3f4>
        TimerStop( &TxTimeoutTimer );
 80179e8:	4874      	ldr	r0, [pc, #464]	@ (8017bbc <RadioIrqProcess+0x2b4>)
 80179ea:	f002 ffd9 	bl	801a9a0 <UTIL_TIMER_Stop>
        SUBGRF_SetStandby( STDBY_RC );
 80179ee:	2000      	movs	r0, #0
 80179f0:	f001 f81e 	bl	8018a30 <SUBGRF_SetStandby>
        if( RFW_Is_LongPacketModeEnabled() == 1 )
 80179f4:	f002 f8ae 	bl	8019b54 <RFW_Is_LongPacketModeEnabled>
 80179f8:	4603      	mov	r3, r0
 80179fa:	2b01      	cmp	r3, #1
 80179fc:	d101      	bne.n	8017a02 <RadioIrqProcess+0xfa>
            RFW_DeInit_TxLongPacket( );
 80179fe:	f002 f8d2 	bl	8019ba6 <RFW_DeInit_TxLongPacket>
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 8017a02:	4b6f      	ldr	r3, [pc, #444]	@ (8017bc0 <RadioIrqProcess+0x2b8>)
 8017a04:	681b      	ldr	r3, [r3, #0]
 8017a06:	2b00      	cmp	r3, #0
 8017a08:	f000 817a 	beq.w	8017d00 <RadioIrqProcess+0x3f8>
 8017a0c:	4b6c      	ldr	r3, [pc, #432]	@ (8017bc0 <RadioIrqProcess+0x2b8>)
 8017a0e:	681b      	ldr	r3, [r3, #0]
 8017a10:	681b      	ldr	r3, [r3, #0]
 8017a12:	2b00      	cmp	r3, #0
 8017a14:	f000 8174 	beq.w	8017d00 <RadioIrqProcess+0x3f8>
            RadioEvents->TxDone( );
 8017a18:	4b69      	ldr	r3, [pc, #420]	@ (8017bc0 <RadioIrqProcess+0x2b8>)
 8017a1a:	681b      	ldr	r3, [r3, #0]
 8017a1c:	681b      	ldr	r3, [r3, #0]
 8017a1e:	4798      	blx	r3
        break;
 8017a20:	e16e      	b.n	8017d00 <RadioIrqProcess+0x3f8>
        TimerStop( &RxTimeoutTimer );
 8017a22:	4868      	ldr	r0, [pc, #416]	@ (8017bc4 <RadioIrqProcess+0x2bc>)
 8017a24:	f002 ffbc 	bl	801a9a0 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 8017a28:	4b63      	ldr	r3, [pc, #396]	@ (8017bb8 <RadioIrqProcess+0x2b0>)
 8017a2a:	785b      	ldrb	r3, [r3, #1]
 8017a2c:	f083 0301 	eor.w	r3, r3, #1
 8017a30:	b2db      	uxtb	r3, r3
 8017a32:	2b00      	cmp	r3, #0
 8017a34:	d014      	beq.n	8017a60 <RadioIrqProcess+0x158>
            SUBGRF_SetStandby( STDBY_RC );
 8017a36:	2000      	movs	r0, #0
 8017a38:	f000 fffa 	bl	8018a30 <SUBGRF_SetStandby>
            SUBGRF_WriteRegister( SUBGHZ_RTCCTLR, 0x00 );
 8017a3c:	2100      	movs	r1, #0
 8017a3e:	f640 1002 	movw	r0, #2306	@ 0x902
 8017a42:	f001 fd79 	bl	8019538 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( SUBGHZ_EVENTMASKR, SUBGRF_ReadRegister( SUBGHZ_EVENTMASKR ) | ( 1 << 1 ) );
 8017a46:	f640 1044 	movw	r0, #2372	@ 0x944
 8017a4a:	f001 fd97 	bl	801957c <SUBGRF_ReadRegister>
 8017a4e:	4603      	mov	r3, r0
 8017a50:	f043 0302 	orr.w	r3, r3, #2
 8017a54:	b2db      	uxtb	r3, r3
 8017a56:	4619      	mov	r1, r3
 8017a58:	f640 1044 	movw	r0, #2372	@ 0x944
 8017a5c:	f001 fd6c 	bl	8019538 <SUBGRF_WriteRegister>
        SUBGRF_GetPayload( RadioBuffer, &size, 255 );
 8017a60:	1dfb      	adds	r3, r7, #7
 8017a62:	22ff      	movs	r2, #255	@ 0xff
 8017a64:	4619      	mov	r1, r3
 8017a66:	4858      	ldr	r0, [pc, #352]	@ (8017bc8 <RadioIrqProcess+0x2c0>)
 8017a68:	f000 feb2 	bl	80187d0 <SUBGRF_GetPayload>
        SUBGRF_GetPacketStatus( &( SubgRf.PacketStatus ) );
 8017a6c:	4857      	ldr	r0, [pc, #348]	@ (8017bcc <RadioIrqProcess+0x2c4>)
 8017a6e:	f001 fd11 	bl	8019494 <SUBGRF_GetPacketStatus>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 8017a72:	4b53      	ldr	r3, [pc, #332]	@ (8017bc0 <RadioIrqProcess+0x2b8>)
 8017a74:	681b      	ldr	r3, [r3, #0]
 8017a76:	2b00      	cmp	r3, #0
 8017a78:	f000 8144 	beq.w	8017d04 <RadioIrqProcess+0x3fc>
 8017a7c:	4b50      	ldr	r3, [pc, #320]	@ (8017bc0 <RadioIrqProcess+0x2b8>)
 8017a7e:	681b      	ldr	r3, [r3, #0]
 8017a80:	689b      	ldr	r3, [r3, #8]
 8017a82:	2b00      	cmp	r3, #0
 8017a84:	f000 813e 	beq.w	8017d04 <RadioIrqProcess+0x3fc>
            switch( SubgRf.PacketStatus.packetType )
 8017a88:	4b4b      	ldr	r3, [pc, #300]	@ (8017bb8 <RadioIrqProcess+0x2b0>)
 8017a8a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8017a8e:	2b01      	cmp	r3, #1
 8017a90:	d10e      	bne.n	8017ab0 <RadioIrqProcess+0x1a8>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.LoRa.RssiPkt,
 8017a92:	4b4b      	ldr	r3, [pc, #300]	@ (8017bc0 <RadioIrqProcess+0x2b8>)
 8017a94:	681b      	ldr	r3, [r3, #0]
 8017a96:	689c      	ldr	r4, [r3, #8]
 8017a98:	79fb      	ldrb	r3, [r7, #7]
 8017a9a:	4619      	mov	r1, r3
 8017a9c:	4b46      	ldr	r3, [pc, #280]	@ (8017bb8 <RadioIrqProcess+0x2b0>)
 8017a9e:	f993 3030 	ldrsb.w	r3, [r3, #48]	@ 0x30
 8017aa2:	461a      	mov	r2, r3
 8017aa4:	4b44      	ldr	r3, [pc, #272]	@ (8017bb8 <RadioIrqProcess+0x2b0>)
 8017aa6:	f993 3031 	ldrsb.w	r3, [r3, #49]	@ 0x31
 8017aaa:	4847      	ldr	r0, [pc, #284]	@ (8017bc8 <RadioIrqProcess+0x2c0>)
 8017aac:	47a0      	blx	r4
                break;
 8017aae:	e01d      	b.n	8017aec <RadioIrqProcess+0x1e4>
                SUBGRF_GetCFO( SubgRf.ModulationParams.Params.Gfsk.BitRate, &cfo );
 8017ab0:	4b41      	ldr	r3, [pc, #260]	@ (8017bb8 <RadioIrqProcess+0x2b0>)
 8017ab2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8017ab4:	463a      	mov	r2, r7
 8017ab6:	4611      	mov	r1, r2
 8017ab8:	4618      	mov	r0, r3
 8017aba:	f001 ff99 	bl	80199f0 <SUBGRF_GetCFO>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.Gfsk.RssiAvg, ( int8_t ) DIVR( cfo, 1000 ) );
 8017abe:	4b40      	ldr	r3, [pc, #256]	@ (8017bc0 <RadioIrqProcess+0x2b8>)
 8017ac0:	681b      	ldr	r3, [r3, #0]
 8017ac2:	689c      	ldr	r4, [r3, #8]
 8017ac4:	79fb      	ldrb	r3, [r7, #7]
 8017ac6:	4619      	mov	r1, r3
 8017ac8:	4b3b      	ldr	r3, [pc, #236]	@ (8017bb8 <RadioIrqProcess+0x2b0>)
 8017aca:	f993 3029 	ldrsb.w	r3, [r3, #41]	@ 0x29
 8017ace:	4618      	mov	r0, r3
 8017ad0:	683b      	ldr	r3, [r7, #0]
 8017ad2:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8017ad6:	4a3e      	ldr	r2, [pc, #248]	@ (8017bd0 <RadioIrqProcess+0x2c8>)
 8017ad8:	fb82 5203 	smull	r5, r2, r2, r3
 8017adc:	1192      	asrs	r2, r2, #6
 8017ade:	17db      	asrs	r3, r3, #31
 8017ae0:	1ad3      	subs	r3, r2, r3
 8017ae2:	b25b      	sxtb	r3, r3
 8017ae4:	4602      	mov	r2, r0
 8017ae6:	4838      	ldr	r0, [pc, #224]	@ (8017bc8 <RadioIrqProcess+0x2c0>)
 8017ae8:	47a0      	blx	r4
                break;
 8017aea:	bf00      	nop
        break;
 8017aec:	e10a      	b.n	8017d04 <RadioIrqProcess+0x3fc>
        SUBGRF_SetStandby( STDBY_RC );
 8017aee:	2000      	movs	r0, #0
 8017af0:	f000 ff9e 	bl	8018a30 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8017af4:	4b32      	ldr	r3, [pc, #200]	@ (8017bc0 <RadioIrqProcess+0x2b8>)
 8017af6:	681b      	ldr	r3, [r3, #0]
 8017af8:	2b00      	cmp	r3, #0
 8017afa:	f000 8105 	beq.w	8017d08 <RadioIrqProcess+0x400>
 8017afe:	4b30      	ldr	r3, [pc, #192]	@ (8017bc0 <RadioIrqProcess+0x2b8>)
 8017b00:	681b      	ldr	r3, [r3, #0]
 8017b02:	699b      	ldr	r3, [r3, #24]
 8017b04:	2b00      	cmp	r3, #0
 8017b06:	f000 80ff 	beq.w	8017d08 <RadioIrqProcess+0x400>
            RadioEvents->CadDone( false );
 8017b0a:	4b2d      	ldr	r3, [pc, #180]	@ (8017bc0 <RadioIrqProcess+0x2b8>)
 8017b0c:	681b      	ldr	r3, [r3, #0]
 8017b0e:	699b      	ldr	r3, [r3, #24]
 8017b10:	2000      	movs	r0, #0
 8017b12:	4798      	blx	r3
        break;
 8017b14:	e0f8      	b.n	8017d08 <RadioIrqProcess+0x400>
        SUBGRF_SetStandby( STDBY_RC );
 8017b16:	2000      	movs	r0, #0
 8017b18:	f000 ff8a 	bl	8018a30 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8017b1c:	4b28      	ldr	r3, [pc, #160]	@ (8017bc0 <RadioIrqProcess+0x2b8>)
 8017b1e:	681b      	ldr	r3, [r3, #0]
 8017b20:	2b00      	cmp	r3, #0
 8017b22:	f000 80f3 	beq.w	8017d0c <RadioIrqProcess+0x404>
 8017b26:	4b26      	ldr	r3, [pc, #152]	@ (8017bc0 <RadioIrqProcess+0x2b8>)
 8017b28:	681b      	ldr	r3, [r3, #0]
 8017b2a:	699b      	ldr	r3, [r3, #24]
 8017b2c:	2b00      	cmp	r3, #0
 8017b2e:	f000 80ed 	beq.w	8017d0c <RadioIrqProcess+0x404>
            RadioEvents->CadDone( true );
 8017b32:	4b23      	ldr	r3, [pc, #140]	@ (8017bc0 <RadioIrqProcess+0x2b8>)
 8017b34:	681b      	ldr	r3, [r3, #0]
 8017b36:	699b      	ldr	r3, [r3, #24]
 8017b38:	2001      	movs	r0, #1
 8017b3a:	4798      	blx	r3
        break;
 8017b3c:	e0e6      	b.n	8017d0c <RadioIrqProcess+0x404>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_RX_TX_TIMEOUT\r\n" );
 8017b3e:	4b25      	ldr	r3, [pc, #148]	@ (8017bd4 <RadioIrqProcess+0x2cc>)
 8017b40:	2201      	movs	r2, #1
 8017b42:	2100      	movs	r1, #0
 8017b44:	2002      	movs	r0, #2
 8017b46:	f003 f8b5 	bl	801acb4 <UTIL_ADV_TRACE_COND_FSend>
        if( SUBGRF_GetOperatingMode( ) == MODE_TX )
 8017b4a:	f000 fe27 	bl	801879c <SUBGRF_GetOperatingMode>
 8017b4e:	4603      	mov	r3, r0
 8017b50:	2b04      	cmp	r3, #4
 8017b52:	d115      	bne.n	8017b80 <RadioIrqProcess+0x278>
            TimerStop( &TxTimeoutTimer );
 8017b54:	4819      	ldr	r0, [pc, #100]	@ (8017bbc <RadioIrqProcess+0x2b4>)
 8017b56:	f002 ff23 	bl	801a9a0 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 8017b5a:	2000      	movs	r0, #0
 8017b5c:	f000 ff68 	bl	8018a30 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8017b60:	4b17      	ldr	r3, [pc, #92]	@ (8017bc0 <RadioIrqProcess+0x2b8>)
 8017b62:	681b      	ldr	r3, [r3, #0]
 8017b64:	2b00      	cmp	r3, #0
 8017b66:	f000 80d3 	beq.w	8017d10 <RadioIrqProcess+0x408>
 8017b6a:	4b15      	ldr	r3, [pc, #84]	@ (8017bc0 <RadioIrqProcess+0x2b8>)
 8017b6c:	681b      	ldr	r3, [r3, #0]
 8017b6e:	685b      	ldr	r3, [r3, #4]
 8017b70:	2b00      	cmp	r3, #0
 8017b72:	f000 80cd 	beq.w	8017d10 <RadioIrqProcess+0x408>
                RadioEvents->TxTimeout( );
 8017b76:	4b12      	ldr	r3, [pc, #72]	@ (8017bc0 <RadioIrqProcess+0x2b8>)
 8017b78:	681b      	ldr	r3, [r3, #0]
 8017b7a:	685b      	ldr	r3, [r3, #4]
 8017b7c:	4798      	blx	r3
        break;
 8017b7e:	e0c7      	b.n	8017d10 <RadioIrqProcess+0x408>
        else if( SUBGRF_GetOperatingMode( ) == MODE_RX )
 8017b80:	f000 fe0c 	bl	801879c <SUBGRF_GetOperatingMode>
 8017b84:	4603      	mov	r3, r0
 8017b86:	2b05      	cmp	r3, #5
 8017b88:	f040 80c2 	bne.w	8017d10 <RadioIrqProcess+0x408>
            TimerStop( &RxTimeoutTimer );
 8017b8c:	480d      	ldr	r0, [pc, #52]	@ (8017bc4 <RadioIrqProcess+0x2bc>)
 8017b8e:	f002 ff07 	bl	801a9a0 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 8017b92:	2000      	movs	r0, #0
 8017b94:	f000 ff4c 	bl	8018a30 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8017b98:	4b09      	ldr	r3, [pc, #36]	@ (8017bc0 <RadioIrqProcess+0x2b8>)
 8017b9a:	681b      	ldr	r3, [r3, #0]
 8017b9c:	2b00      	cmp	r3, #0
 8017b9e:	f000 80b7 	beq.w	8017d10 <RadioIrqProcess+0x408>
 8017ba2:	4b07      	ldr	r3, [pc, #28]	@ (8017bc0 <RadioIrqProcess+0x2b8>)
 8017ba4:	681b      	ldr	r3, [r3, #0]
 8017ba6:	68db      	ldr	r3, [r3, #12]
 8017ba8:	2b00      	cmp	r3, #0
 8017baa:	f000 80b1 	beq.w	8017d10 <RadioIrqProcess+0x408>
                RadioEvents->RxTimeout( );
 8017bae:	4b04      	ldr	r3, [pc, #16]	@ (8017bc0 <RadioIrqProcess+0x2b8>)
 8017bb0:	681b      	ldr	r3, [r3, #0]
 8017bb2:	68db      	ldr	r3, [r3, #12]
 8017bb4:	4798      	blx	r3
        break;
 8017bb6:	e0ab      	b.n	8017d10 <RadioIrqProcess+0x408>
 8017bb8:	200014ec 	.word	0x200014ec
 8017bbc:	20001548 	.word	0x20001548
 8017bc0:	200014e8 	.word	0x200014e8
 8017bc4:	20001560 	.word	0x20001560
 8017bc8:	200013e8 	.word	0x200013e8
 8017bcc:	20001510 	.word	0x20001510
 8017bd0:	10624dd3 	.word	0x10624dd3
 8017bd4:	0801b73c 	.word	0x0801b73c
        MW_LOG( TS_ON, VLEVEL_M,  "PRE OK\r\n" );
 8017bd8:	4b54      	ldr	r3, [pc, #336]	@ (8017d2c <RadioIrqProcess+0x424>)
 8017bda:	2201      	movs	r2, #1
 8017bdc:	2100      	movs	r1, #0
 8017bde:	2002      	movs	r0, #2
 8017be0:	f003 f868 	bl	801acb4 <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxDcPreambleDetectTimeout != 0 )
 8017be4:	4b52      	ldr	r3, [pc, #328]	@ (8017d30 <RadioIrqProcess+0x428>)
 8017be6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8017be8:	2b00      	cmp	r3, #0
 8017bea:	f000 8093 	beq.w	8017d14 <RadioIrqProcess+0x40c>
            Radio.Write( SUBGHZ_RTCPRDR2, ( SubgRf.RxDcPreambleDetectTimeout >> 16 ) & 0xFF ); /*Update Radio RTC Period MSB*/
 8017bee:	4a51      	ldr	r2, [pc, #324]	@ (8017d34 <RadioIrqProcess+0x42c>)
 8017bf0:	4b4f      	ldr	r3, [pc, #316]	@ (8017d30 <RadioIrqProcess+0x428>)
 8017bf2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8017bf4:	0c1b      	lsrs	r3, r3, #16
 8017bf6:	b2db      	uxtb	r3, r3
 8017bf8:	4619      	mov	r1, r3
 8017bfa:	f640 1003 	movw	r0, #2307	@ 0x903
 8017bfe:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCPRDR1, ( SubgRf.RxDcPreambleDetectTimeout >> 8 ) & 0xFF ); /*Update Radio RTC Period MidByte*/
 8017c00:	4a4c      	ldr	r2, [pc, #304]	@ (8017d34 <RadioIrqProcess+0x42c>)
 8017c02:	4b4b      	ldr	r3, [pc, #300]	@ (8017d30 <RadioIrqProcess+0x428>)
 8017c04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8017c06:	0a1b      	lsrs	r3, r3, #8
 8017c08:	b2db      	uxtb	r3, r3
 8017c0a:	4619      	mov	r1, r3
 8017c0c:	f640 1004 	movw	r0, #2308	@ 0x904
 8017c10:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCPRDR0, ( SubgRf.RxDcPreambleDetectTimeout ) & 0xFF ); /*Update Radio RTC Period lsb*/
 8017c12:	4a48      	ldr	r2, [pc, #288]	@ (8017d34 <RadioIrqProcess+0x42c>)
 8017c14:	4b46      	ldr	r3, [pc, #280]	@ (8017d30 <RadioIrqProcess+0x428>)
 8017c16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8017c18:	b2db      	uxtb	r3, r3
 8017c1a:	4619      	mov	r1, r3
 8017c1c:	f640 1005 	movw	r0, #2309	@ 0x905
 8017c20:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCCTLR, Radio.Read( SUBGHZ_RTCCTLR ) | 0x1 ); /*restart Radio RTC*/
 8017c22:	4c44      	ldr	r4, [pc, #272]	@ (8017d34 <RadioIrqProcess+0x42c>)
 8017c24:	4b44      	ldr	r3, [pc, #272]	@ (8017d38 <RadioIrqProcess+0x430>)
 8017c26:	f640 1002 	movw	r0, #2306	@ 0x902
 8017c2a:	4798      	blx	r3
 8017c2c:	4603      	mov	r3, r0
 8017c2e:	f043 0301 	orr.w	r3, r3, #1
 8017c32:	b2db      	uxtb	r3, r3
 8017c34:	4619      	mov	r1, r3
 8017c36:	f640 1002 	movw	r0, #2306	@ 0x902
 8017c3a:	47a0      	blx	r4
            SubgRf.RxDcPreambleDetectTimeout = 0;
 8017c3c:	4b3c      	ldr	r3, [pc, #240]	@ (8017d30 <RadioIrqProcess+0x428>)
 8017c3e:	2200      	movs	r2, #0
 8017c40:	659a      	str	r2, [r3, #88]	@ 0x58
            SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8017c42:	2300      	movs	r3, #0
 8017c44:	2200      	movs	r2, #0
 8017c46:	f240 2162 	movw	r1, #610	@ 0x262
 8017c4a:	f240 2062 	movw	r0, #610	@ 0x262
 8017c4e:	f001 f8c3 	bl	8018dd8 <SUBGRF_SetDioIrqParams>
        break;
 8017c52:	e05f      	b.n	8017d14 <RadioIrqProcess+0x40c>
        MW_LOG( TS_ON, VLEVEL_M,  "SYNC OK\r\n" );
 8017c54:	4b39      	ldr	r3, [pc, #228]	@ (8017d3c <RadioIrqProcess+0x434>)
 8017c56:	2201      	movs	r2, #1
 8017c58:	2100      	movs	r1, #0
 8017c5a:	2002      	movs	r0, #2
 8017c5c:	f003 f82a 	bl	801acb4 <UTIL_ADV_TRACE_COND_FSend>
        if( 1UL == RFW_Is_Init( ) )
 8017c60:	f001 ff71 	bl	8019b46 <RFW_Is_Init>
 8017c64:	4603      	mov	r3, r0
 8017c66:	2b01      	cmp	r3, #1
 8017c68:	d156      	bne.n	8017d18 <RadioIrqProcess+0x410>
            RFW_ReceivePayload( );
 8017c6a:	f001 ffa2 	bl	8019bb2 <RFW_ReceivePayload>
        break;
 8017c6e:	e053      	b.n	8017d18 <RadioIrqProcess+0x410>
        MW_LOG( TS_ON, VLEVEL_M,  "HDR OK\r\n" );
 8017c70:	4b33      	ldr	r3, [pc, #204]	@ (8017d40 <RadioIrqProcess+0x438>)
 8017c72:	2201      	movs	r2, #1
 8017c74:	2100      	movs	r1, #0
 8017c76:	2002      	movs	r0, #2
 8017c78:	f003 f81c 	bl	801acb4 <UTIL_ADV_TRACE_COND_FSend>
        break;
 8017c7c:	e051      	b.n	8017d22 <RadioIrqProcess+0x41a>
        TimerStop( &RxTimeoutTimer );
 8017c7e:	4831      	ldr	r0, [pc, #196]	@ (8017d44 <RadioIrqProcess+0x43c>)
 8017c80:	f002 fe8e 	bl	801a9a0 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 8017c84:	4b2a      	ldr	r3, [pc, #168]	@ (8017d30 <RadioIrqProcess+0x428>)
 8017c86:	785b      	ldrb	r3, [r3, #1]
 8017c88:	f083 0301 	eor.w	r3, r3, #1
 8017c8c:	b2db      	uxtb	r3, r3
 8017c8e:	2b00      	cmp	r3, #0
 8017c90:	d002      	beq.n	8017c98 <RadioIrqProcess+0x390>
            SUBGRF_SetStandby( STDBY_RC );
 8017c92:	2000      	movs	r0, #0
 8017c94:	f000 fecc 	bl	8018a30 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8017c98:	4b2b      	ldr	r3, [pc, #172]	@ (8017d48 <RadioIrqProcess+0x440>)
 8017c9a:	681b      	ldr	r3, [r3, #0]
 8017c9c:	2b00      	cmp	r3, #0
 8017c9e:	d03d      	beq.n	8017d1c <RadioIrqProcess+0x414>
 8017ca0:	4b29      	ldr	r3, [pc, #164]	@ (8017d48 <RadioIrqProcess+0x440>)
 8017ca2:	681b      	ldr	r3, [r3, #0]
 8017ca4:	68db      	ldr	r3, [r3, #12]
 8017ca6:	2b00      	cmp	r3, #0
 8017ca8:	d038      	beq.n	8017d1c <RadioIrqProcess+0x414>
            RadioEvents->RxTimeout( );
 8017caa:	4b27      	ldr	r3, [pc, #156]	@ (8017d48 <RadioIrqProcess+0x440>)
 8017cac:	681b      	ldr	r3, [r3, #0]
 8017cae:	68db      	ldr	r3, [r3, #12]
 8017cb0:	4798      	blx	r3
            MW_LOG( TS_ON, VLEVEL_M,  "HDR KO\r\n" );
 8017cb2:	4b26      	ldr	r3, [pc, #152]	@ (8017d4c <RadioIrqProcess+0x444>)
 8017cb4:	2201      	movs	r2, #1
 8017cb6:	2100      	movs	r1, #0
 8017cb8:	2002      	movs	r0, #2
 8017cba:	f002 fffb 	bl	801acb4 <UTIL_ADV_TRACE_COND_FSend>
        break;
 8017cbe:	e02d      	b.n	8017d1c <RadioIrqProcess+0x414>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_CRC_ERROR\r\n" );
 8017cc0:	4b23      	ldr	r3, [pc, #140]	@ (8017d50 <RadioIrqProcess+0x448>)
 8017cc2:	2201      	movs	r2, #1
 8017cc4:	2100      	movs	r1, #0
 8017cc6:	2002      	movs	r0, #2
 8017cc8:	f002 fff4 	bl	801acb4 <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxContinuous == false )
 8017ccc:	4b18      	ldr	r3, [pc, #96]	@ (8017d30 <RadioIrqProcess+0x428>)
 8017cce:	785b      	ldrb	r3, [r3, #1]
 8017cd0:	f083 0301 	eor.w	r3, r3, #1
 8017cd4:	b2db      	uxtb	r3, r3
 8017cd6:	2b00      	cmp	r3, #0
 8017cd8:	d002      	beq.n	8017ce0 <RadioIrqProcess+0x3d8>
            SUBGRF_SetStandby( STDBY_RC );
 8017cda:	2000      	movs	r0, #0
 8017cdc:	f000 fea8 	bl	8018a30 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError ) )
 8017ce0:	4b19      	ldr	r3, [pc, #100]	@ (8017d48 <RadioIrqProcess+0x440>)
 8017ce2:	681b      	ldr	r3, [r3, #0]
 8017ce4:	2b00      	cmp	r3, #0
 8017ce6:	d01b      	beq.n	8017d20 <RadioIrqProcess+0x418>
 8017ce8:	4b17      	ldr	r3, [pc, #92]	@ (8017d48 <RadioIrqProcess+0x440>)
 8017cea:	681b      	ldr	r3, [r3, #0]
 8017cec:	691b      	ldr	r3, [r3, #16]
 8017cee:	2b00      	cmp	r3, #0
 8017cf0:	d016      	beq.n	8017d20 <RadioIrqProcess+0x418>
            RadioEvents->RxError( );
 8017cf2:	4b15      	ldr	r3, [pc, #84]	@ (8017d48 <RadioIrqProcess+0x440>)
 8017cf4:	681b      	ldr	r3, [r3, #0]
 8017cf6:	691b      	ldr	r3, [r3, #16]
 8017cf8:	4798      	blx	r3
        break;
 8017cfa:	e011      	b.n	8017d20 <RadioIrqProcess+0x418>
        break;
 8017cfc:	bf00      	nop
 8017cfe:	e010      	b.n	8017d22 <RadioIrqProcess+0x41a>
        break;
 8017d00:	bf00      	nop
 8017d02:	e00e      	b.n	8017d22 <RadioIrqProcess+0x41a>
        break;
 8017d04:	bf00      	nop
 8017d06:	e00c      	b.n	8017d22 <RadioIrqProcess+0x41a>
        break;
 8017d08:	bf00      	nop
 8017d0a:	e00a      	b.n	8017d22 <RadioIrqProcess+0x41a>
        break;
 8017d0c:	bf00      	nop
 8017d0e:	e008      	b.n	8017d22 <RadioIrqProcess+0x41a>
        break;
 8017d10:	bf00      	nop
 8017d12:	e006      	b.n	8017d22 <RadioIrqProcess+0x41a>
        break;
 8017d14:	bf00      	nop
 8017d16:	e004      	b.n	8017d22 <RadioIrqProcess+0x41a>
        break;
 8017d18:	bf00      	nop
 8017d1a:	e002      	b.n	8017d22 <RadioIrqProcess+0x41a>
        break;
 8017d1c:	bf00      	nop
 8017d1e:	e000      	b.n	8017d22 <RadioIrqProcess+0x41a>
        break;
 8017d20:	bf00      	nop
    }
}
 8017d22:	bf00      	nop
 8017d24:	3708      	adds	r7, #8
 8017d26:	46bd      	mov	sp, r7
 8017d28:	bdb0      	pop	{r4, r5, r7, pc}
 8017d2a:	bf00      	nop
 8017d2c:	0801b750 	.word	0x0801b750
 8017d30:	200014ec 	.word	0x200014ec
 8017d34:	08017719 	.word	0x08017719
 8017d38:	0801773d 	.word	0x0801773d
 8017d3c:	0801b75c 	.word	0x0801b75c
 8017d40:	0801b768 	.word	0x0801b768
 8017d44:	20001560 	.word	0x20001560
 8017d48:	200014e8 	.word	0x200014e8
 8017d4c:	0801b774 	.word	0x0801b774
 8017d50:	0801b780 	.word	0x0801b780

08017d54 <RadioTxPrbs>:

static void RadioTxPrbs( void )
{
 8017d54:	b580      	push	{r7, lr}
 8017d56:	af00      	add	r7, sp, #0
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 8017d58:	4b09      	ldr	r3, [pc, #36]	@ (8017d80 <RadioTxPrbs+0x2c>)
 8017d5a:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8017d5e:	2101      	movs	r1, #1
 8017d60:	4618      	mov	r0, r3
 8017d62:	f001 fcf7 	bl	8019754 <SUBGRF_SetSwitch>
    Radio.Write( SUBGHZ_GPKTCTL1AR, 0x2d );  // sel mode prbs9 instead of preamble
 8017d66:	4b07      	ldr	r3, [pc, #28]	@ (8017d84 <RadioTxPrbs+0x30>)
 8017d68:	212d      	movs	r1, #45	@ 0x2d
 8017d6a:	f44f 60d7 	mov.w	r0, #1720	@ 0x6b8
 8017d6e:	4798      	blx	r3
    SUBGRF_SetTxInfinitePreamble( );
 8017d70:	f000 ff21 	bl	8018bb6 <SUBGRF_SetTxInfinitePreamble>
    SUBGRF_SetTx( 0x0fffff );
 8017d74:	4804      	ldr	r0, [pc, #16]	@ (8017d88 <RadioTxPrbs+0x34>)
 8017d76:	f000 fe77 	bl	8018a68 <SUBGRF_SetTx>
}
 8017d7a:	bf00      	nop
 8017d7c:	bd80      	pop	{r7, pc}
 8017d7e:	bf00      	nop
 8017d80:	200014ec 	.word	0x200014ec
 8017d84:	08017719 	.word	0x08017719
 8017d88:	000fffff 	.word	0x000fffff

08017d8c <RadioTxCw>:

static void RadioTxCw( int8_t power )
{
 8017d8c:	b580      	push	{r7, lr}
 8017d8e:	b084      	sub	sp, #16
 8017d90:	af00      	add	r7, sp, #0
 8017d92:	4603      	mov	r3, r0
 8017d94:	71fb      	strb	r3, [r7, #7]
    uint8_t paselect = SUBGRF_SetRfTxPower( power );
 8017d96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8017d9a:	4618      	mov	r0, r3
 8017d9c:	f001 fd02 	bl	80197a4 <SUBGRF_SetRfTxPower>
 8017da0:	4603      	mov	r3, r0
 8017da2:	73fb      	strb	r3, [r7, #15]
    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 8017da4:	210e      	movs	r1, #14
 8017da6:	f640 101f 	movw	r0, #2335	@ 0x91f
 8017daa:	f001 fbc5 	bl	8019538 <SUBGRF_WriteRegister>
    SUBGRF_SetSwitch( paselect, RFSWITCH_TX );
 8017dae:	7bfb      	ldrb	r3, [r7, #15]
 8017db0:	2101      	movs	r1, #1
 8017db2:	4618      	mov	r0, r3
 8017db4:	f001 fcce 	bl	8019754 <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 8017db8:	f000 fef4 	bl	8018ba4 <SUBGRF_SetTxContinuousWave>
}
 8017dbc:	bf00      	nop
 8017dbe:	3710      	adds	r7, #16
 8017dc0:	46bd      	mov	sp, r7
 8017dc2:	bd80      	pop	{r7, pc}

08017dc4 <payload_integration>:

#if (RADIO_SIGFOX_ENABLE == 1)
static void payload_integration( uint8_t *outBuffer, uint8_t *inBuffer, uint8_t size )
{
 8017dc4:	b480      	push	{r7}
 8017dc6:	b089      	sub	sp, #36	@ 0x24
 8017dc8:	af00      	add	r7, sp, #0
 8017dca:	60f8      	str	r0, [r7, #12]
 8017dcc:	60b9      	str	r1, [r7, #8]
 8017dce:	4613      	mov	r3, r2
 8017dd0:	71fb      	strb	r3, [r7, #7]
    uint8_t prevInt = 0;
 8017dd2:	2300      	movs	r3, #0
 8017dd4:	77fb      	strb	r3, [r7, #31]
    uint8_t currBit;
    uint8_t index_bit;
    uint8_t index_byte;
    uint8_t index_bit_out;
    uint8_t index_byte_out;
    int32_t i = 0;
 8017dd6:	2300      	movs	r3, #0
 8017dd8:	61bb      	str	r3, [r7, #24]

    for( i = 0; i < size; i++ )
 8017dda:	2300      	movs	r3, #0
 8017ddc:	61bb      	str	r3, [r7, #24]
 8017dde:	e011      	b.n	8017e04 <payload_integration+0x40>
    {
        /* reverse all inputs */
        inBuffer[i] = ~inBuffer[i];
 8017de0:	69bb      	ldr	r3, [r7, #24]
 8017de2:	68ba      	ldr	r2, [r7, #8]
 8017de4:	4413      	add	r3, r2
 8017de6:	781a      	ldrb	r2, [r3, #0]
 8017de8:	69bb      	ldr	r3, [r7, #24]
 8017dea:	68b9      	ldr	r1, [r7, #8]
 8017dec:	440b      	add	r3, r1
 8017dee:	43d2      	mvns	r2, r2
 8017df0:	b2d2      	uxtb	r2, r2
 8017df2:	701a      	strb	r2, [r3, #0]
        /* init outBuffer */
        outBuffer[i] = 0;
 8017df4:	69bb      	ldr	r3, [r7, #24]
 8017df6:	68fa      	ldr	r2, [r7, #12]
 8017df8:	4413      	add	r3, r2
 8017dfa:	2200      	movs	r2, #0
 8017dfc:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < size; i++ )
 8017dfe:	69bb      	ldr	r3, [r7, #24]
 8017e00:	3301      	adds	r3, #1
 8017e02:	61bb      	str	r3, [r7, #24]
 8017e04:	79fb      	ldrb	r3, [r7, #7]
 8017e06:	69ba      	ldr	r2, [r7, #24]
 8017e08:	429a      	cmp	r2, r3
 8017e0a:	dbe9      	blt.n	8017de0 <payload_integration+0x1c>
    }

    for( i = 0; i < ( size * 8 ); i++ )
 8017e0c:	2300      	movs	r3, #0
 8017e0e:	61bb      	str	r3, [r7, #24]
 8017e10:	e049      	b.n	8017ea6 <payload_integration+0xe2>
    {
        /* index to take bit in inBuffer */
        index_bit = 7 - ( i % 8 );
 8017e12:	69bb      	ldr	r3, [r7, #24]
 8017e14:	425a      	negs	r2, r3
 8017e16:	f003 0307 	and.w	r3, r3, #7
 8017e1a:	f002 0207 	and.w	r2, r2, #7
 8017e1e:	bf58      	it	pl
 8017e20:	4253      	negpl	r3, r2
 8017e22:	b2db      	uxtb	r3, r3
 8017e24:	f1c3 0307 	rsb	r3, r3, #7
 8017e28:	75fb      	strb	r3, [r7, #23]
        index_byte = i / 8;
 8017e2a:	69bb      	ldr	r3, [r7, #24]
 8017e2c:	2b00      	cmp	r3, #0
 8017e2e:	da00      	bge.n	8017e32 <payload_integration+0x6e>
 8017e30:	3307      	adds	r3, #7
 8017e32:	10db      	asrs	r3, r3, #3
 8017e34:	75bb      	strb	r3, [r7, #22]
        /* index to place bit in outBuffer is shifted 1 bit right */
        index_bit_out = 7 - ( ( i + 1 ) % 8 );
 8017e36:	69bb      	ldr	r3, [r7, #24]
 8017e38:	3301      	adds	r3, #1
 8017e3a:	425a      	negs	r2, r3
 8017e3c:	f003 0307 	and.w	r3, r3, #7
 8017e40:	f002 0207 	and.w	r2, r2, #7
 8017e44:	bf58      	it	pl
 8017e46:	4253      	negpl	r3, r2
 8017e48:	b2db      	uxtb	r3, r3
 8017e4a:	f1c3 0307 	rsb	r3, r3, #7
 8017e4e:	757b      	strb	r3, [r7, #21]
        index_byte_out = ( i + 1 ) / 8;
 8017e50:	69bb      	ldr	r3, [r7, #24]
 8017e52:	3301      	adds	r3, #1
 8017e54:	2b00      	cmp	r3, #0
 8017e56:	da00      	bge.n	8017e5a <payload_integration+0x96>
 8017e58:	3307      	adds	r3, #7
 8017e5a:	10db      	asrs	r3, r3, #3
 8017e5c:	753b      	strb	r3, [r7, #20]
        /* extract current bit from input */
        currBit = ( inBuffer[index_byte] >> index_bit ) & 0x01;
 8017e5e:	7dbb      	ldrb	r3, [r7, #22]
 8017e60:	68ba      	ldr	r2, [r7, #8]
 8017e62:	4413      	add	r3, r2
 8017e64:	781b      	ldrb	r3, [r3, #0]
 8017e66:	461a      	mov	r2, r3
 8017e68:	7dfb      	ldrb	r3, [r7, #23]
 8017e6a:	fa42 f303 	asr.w	r3, r2, r3
 8017e6e:	b2db      	uxtb	r3, r3
 8017e70:	f003 0301 	and.w	r3, r3, #1
 8017e74:	74fb      	strb	r3, [r7, #19]
        /* integration */
        prevInt ^= currBit;
 8017e76:	7ffa      	ldrb	r2, [r7, #31]
 8017e78:	7cfb      	ldrb	r3, [r7, #19]
 8017e7a:	4053      	eors	r3, r2
 8017e7c:	77fb      	strb	r3, [r7, #31]
        /* write result integration in output */
        outBuffer[index_byte_out] |= ( prevInt << index_bit_out );
 8017e7e:	7d3b      	ldrb	r3, [r7, #20]
 8017e80:	68fa      	ldr	r2, [r7, #12]
 8017e82:	4413      	add	r3, r2
 8017e84:	781b      	ldrb	r3, [r3, #0]
 8017e86:	b25a      	sxtb	r2, r3
 8017e88:	7ff9      	ldrb	r1, [r7, #31]
 8017e8a:	7d7b      	ldrb	r3, [r7, #21]
 8017e8c:	fa01 f303 	lsl.w	r3, r1, r3
 8017e90:	b25b      	sxtb	r3, r3
 8017e92:	4313      	orrs	r3, r2
 8017e94:	b259      	sxtb	r1, r3
 8017e96:	7d3b      	ldrb	r3, [r7, #20]
 8017e98:	68fa      	ldr	r2, [r7, #12]
 8017e9a:	4413      	add	r3, r2
 8017e9c:	b2ca      	uxtb	r2, r1
 8017e9e:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < ( size * 8 ); i++ )
 8017ea0:	69bb      	ldr	r3, [r7, #24]
 8017ea2:	3301      	adds	r3, #1
 8017ea4:	61bb      	str	r3, [r7, #24]
 8017ea6:	79fb      	ldrb	r3, [r7, #7]
 8017ea8:	00db      	lsls	r3, r3, #3
 8017eaa:	69ba      	ldr	r2, [r7, #24]
 8017eac:	429a      	cmp	r2, r3
 8017eae:	dbb0      	blt.n	8017e12 <payload_integration+0x4e>
    }

    outBuffer[size] = ( prevInt << 7 ) | ( prevInt << 6 ) | ( ( ( !prevInt ) & 0x01 ) << 5 ) ;
 8017eb0:	7ffb      	ldrb	r3, [r7, #31]
 8017eb2:	01db      	lsls	r3, r3, #7
 8017eb4:	b25a      	sxtb	r2, r3
 8017eb6:	7ffb      	ldrb	r3, [r7, #31]
 8017eb8:	019b      	lsls	r3, r3, #6
 8017eba:	b25b      	sxtb	r3, r3
 8017ebc:	4313      	orrs	r3, r2
 8017ebe:	b25b      	sxtb	r3, r3
 8017ec0:	7ffa      	ldrb	r2, [r7, #31]
 8017ec2:	2a00      	cmp	r2, #0
 8017ec4:	d101      	bne.n	8017eca <payload_integration+0x106>
 8017ec6:	2220      	movs	r2, #32
 8017ec8:	e000      	b.n	8017ecc <payload_integration+0x108>
 8017eca:	2200      	movs	r2, #0
 8017ecc:	4313      	orrs	r3, r2
 8017ece:	b259      	sxtb	r1, r3
 8017ed0:	79fb      	ldrb	r3, [r7, #7]
 8017ed2:	68fa      	ldr	r2, [r7, #12]
 8017ed4:	4413      	add	r3, r2
 8017ed6:	b2ca      	uxtb	r2, r1
 8017ed8:	701a      	strb	r2, [r3, #0]
}
 8017eda:	bf00      	nop
 8017edc:	3724      	adds	r7, #36	@ 0x24
 8017ede:	46bd      	mov	sp, r7
 8017ee0:	bc80      	pop	{r7}
 8017ee2:	4770      	bx	lr

08017ee4 <RadioSetRxGenericConfig>:
#endif /*RADIO_SIGFOX_ENABLE == 1*/

static int32_t RadioSetRxGenericConfig( GenericModems_t modem, RxConfigGeneric_t *config, uint32_t rxContinuous,
                                        uint32_t symbTimeout )
{
 8017ee4:	b580      	push	{r7, lr}
 8017ee6:	b08c      	sub	sp, #48	@ 0x30
 8017ee8:	af00      	add	r7, sp, #0
 8017eea:	60b9      	str	r1, [r7, #8]
 8017eec:	607a      	str	r2, [r7, #4]
 8017eee:	603b      	str	r3, [r7, #0]
 8017ef0:	4603      	mov	r3, r0
 8017ef2:	73fb      	strb	r3, [r7, #15]
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    int32_t status = 0;
 8017ef4:	2300      	movs	r3, #0
 8017ef6:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint8_t syncword[8] = {0};
 8017ef8:	2300      	movs	r3, #0
 8017efa:	623b      	str	r3, [r7, #32]
 8017efc:	2300      	movs	r3, #0
 8017efe:	627b      	str	r3, [r7, #36]	@ 0x24
    uint8_t MaxPayloadLength;

    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 8017f00:	f001 fe1b 	bl	8019b3a <RFW_DeInit>

    if( rxContinuous != 0 )
 8017f04:	687b      	ldr	r3, [r7, #4]
 8017f06:	2b00      	cmp	r3, #0
 8017f08:	d001      	beq.n	8017f0e <RadioSetRxGenericConfig+0x2a>
    {
        symbTimeout = 0;
 8017f0a:	2300      	movs	r3, #0
 8017f0c:	603b      	str	r3, [r7, #0]
    }
    SubgRf.RxContinuous = ( rxContinuous == 0 ) ? false : true;
 8017f0e:	687b      	ldr	r3, [r7, #4]
 8017f10:	2b00      	cmp	r3, #0
 8017f12:	bf14      	ite	ne
 8017f14:	2301      	movne	r3, #1
 8017f16:	2300      	moveq	r3, #0
 8017f18:	b2da      	uxtb	r2, r3
 8017f1a:	4ba4      	ldr	r3, [pc, #656]	@ (80181ac <RadioSetRxGenericConfig+0x2c8>)
 8017f1c:	705a      	strb	r2, [r3, #1]

    switch( modem )
 8017f1e:	7bfb      	ldrb	r3, [r7, #15]
 8017f20:	2b00      	cmp	r3, #0
 8017f22:	d003      	beq.n	8017f2c <RadioSetRxGenericConfig+0x48>
 8017f24:	2b01      	cmp	r3, #1
 8017f26:	f000 80dc 	beq.w	80180e2 <RadioSetRxGenericConfig+0x1fe>

        // Timeout Max, Timeout handled directly in SetRx function
        SubgRf.RxTimeout = 0xFFFF;
        break;
    default:
        break;
 8017f2a:	e196      	b.n	801825a <RadioSetRxGenericConfig+0x376>
        if( ( config->fsk.BitRate == 0 ) || ( config->fsk.PreambleLen == 0 ) )
 8017f2c:	68bb      	ldr	r3, [r7, #8]
 8017f2e:	689b      	ldr	r3, [r3, #8]
 8017f30:	2b00      	cmp	r3, #0
 8017f32:	d003      	beq.n	8017f3c <RadioSetRxGenericConfig+0x58>
 8017f34:	68bb      	ldr	r3, [r7, #8]
 8017f36:	68db      	ldr	r3, [r3, #12]
 8017f38:	2b00      	cmp	r3, #0
 8017f3a:	d102      	bne.n	8017f42 <RadioSetRxGenericConfig+0x5e>
            return -1;
 8017f3c:	f04f 33ff 	mov.w	r3, #4294967295
 8017f40:	e18c      	b.n	801825c <RadioSetRxGenericConfig+0x378>
        if( config->fsk.SyncWordLength > 8 )
 8017f42:	68bb      	ldr	r3, [r7, #8]
 8017f44:	7f9b      	ldrb	r3, [r3, #30]
 8017f46:	2b08      	cmp	r3, #8
 8017f48:	d902      	bls.n	8017f50 <RadioSetRxGenericConfig+0x6c>
            return -1;
 8017f4a:	f04f 33ff 	mov.w	r3, #4294967295
 8017f4e:	e185      	b.n	801825c <RadioSetRxGenericConfig+0x378>
            RADIO_MEMCPY8( syncword, config->fsk.SyncWord, config->fsk.SyncWordLength );
 8017f50:	68bb      	ldr	r3, [r7, #8]
 8017f52:	6919      	ldr	r1, [r3, #16]
 8017f54:	68bb      	ldr	r3, [r7, #8]
 8017f56:	7f9b      	ldrb	r3, [r3, #30]
 8017f58:	461a      	mov	r2, r3
 8017f5a:	f107 0320 	add.w	r3, r7, #32
 8017f5e:	4618      	mov	r0, r3
 8017f60:	f001 fede 	bl	8019d20 <UTIL_MEM_cpy_8>
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->fsk.StopTimerOnPreambleDetect == 0 ) ? false : true );
 8017f64:	68bb      	ldr	r3, [r7, #8]
 8017f66:	681b      	ldr	r3, [r3, #0]
 8017f68:	2b00      	cmp	r3, #0
 8017f6a:	bf14      	ite	ne
 8017f6c:	2301      	movne	r3, #1
 8017f6e:	2300      	moveq	r3, #0
 8017f70:	b2db      	uxtb	r3, r3
 8017f72:	4618      	mov	r0, r3
 8017f74:	f000 fe28 	bl	8018bc8 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8017f78:	4b8c      	ldr	r3, [pc, #560]	@ (80181ac <RadioSetRxGenericConfig+0x2c8>)
 8017f7a:	2200      	movs	r2, #0
 8017f7c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 8017f80:	68bb      	ldr	r3, [r7, #8]
 8017f82:	689b      	ldr	r3, [r3, #8]
 8017f84:	4a89      	ldr	r2, [pc, #548]	@ (80181ac <RadioSetRxGenericConfig+0x2c8>)
 8017f86:	63d3      	str	r3, [r2, #60]	@ 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 8017f88:	68bb      	ldr	r3, [r7, #8]
 8017f8a:	f893 2020 	ldrb.w	r2, [r3, #32]
 8017f8e:	4b87      	ldr	r3, [pc, #540]	@ (80181ac <RadioSetRxGenericConfig+0x2c8>)
 8017f90:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
        SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( config->fsk.Bandwidth );
 8017f94:	68bb      	ldr	r3, [r7, #8]
 8017f96:	685b      	ldr	r3, [r3, #4]
 8017f98:	4618      	mov	r0, r3
 8017f9a:	f001 fd01 	bl	80199a0 <SUBGRF_GetFskBandwidthRegValue>
 8017f9e:	4603      	mov	r3, r0
 8017fa0:	461a      	mov	r2, r3
 8017fa2:	4b82      	ldr	r3, [pc, #520]	@ (80181ac <RadioSetRxGenericConfig+0x2c8>)
 8017fa4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8017fa8:	4b80      	ldr	r3, [pc, #512]	@ (80181ac <RadioSetRxGenericConfig+0x2c8>)
 8017faa:	2200      	movs	r2, #0
 8017fac:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3 ; // convert byte into bit
 8017fae:	68bb      	ldr	r3, [r7, #8]
 8017fb0:	68db      	ldr	r3, [r3, #12]
 8017fb2:	b29b      	uxth	r3, r3
 8017fb4:	00db      	lsls	r3, r3, #3
 8017fb6:	b29a      	uxth	r2, r3
 8017fb8:	4b7c      	ldr	r3, [pc, #496]	@ (80181ac <RadioSetRxGenericConfig+0x2c8>)
 8017fba:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = ( RadioPreambleDetection_t ) config->fsk.PreambleMinDetect;
 8017fbc:	68bb      	ldr	r3, [r7, #8]
 8017fbe:	7fda      	ldrb	r2, [r3, #31]
 8017fc0:	4b7a      	ldr	r3, [pc, #488]	@ (80181ac <RadioSetRxGenericConfig+0x2c8>)
 8017fc2:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 8017fc4:	68bb      	ldr	r3, [r7, #8]
 8017fc6:	7f9b      	ldrb	r3, [r3, #30]
 8017fc8:	00db      	lsls	r3, r3, #3
 8017fca:	b2da      	uxtb	r2, r3
 8017fcc:	4b77      	ldr	r3, [pc, #476]	@ (80181ac <RadioSetRxGenericConfig+0x2c8>)
 8017fce:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = ( RadioAddressComp_t ) config->fsk.AddrComp;
 8017fd0:	68bb      	ldr	r3, [r7, #8]
 8017fd2:	f893 2021 	ldrb.w	r2, [r3, #33]	@ 0x21
 8017fd6:	4b75      	ldr	r3, [pc, #468]	@ (80181ac <RadioSetRxGenericConfig+0x2c8>)
 8017fd8:	751a      	strb	r2, [r3, #20]
        if( config->fsk.LengthMode == RADIO_FSK_PACKET_FIXED_LENGTH )
 8017fda:	68bb      	ldr	r3, [r7, #8]
 8017fdc:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8017fe0:	2b00      	cmp	r3, #0
 8017fe2:	d105      	bne.n	8017ff0 <RadioSetRxGenericConfig+0x10c>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = config->fsk.MaxPayloadLength;
 8017fe4:	68bb      	ldr	r3, [r7, #8]
 8017fe6:	695b      	ldr	r3, [r3, #20]
 8017fe8:	b2da      	uxtb	r2, r3
 8017fea:	4b70      	ldr	r3, [pc, #448]	@ (80181ac <RadioSetRxGenericConfig+0x2c8>)
 8017fec:	759a      	strb	r2, [r3, #22]
 8017fee:	e00b      	b.n	8018008 <RadioSetRxGenericConfig+0x124>
        else if( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH )
 8017ff0:	68bb      	ldr	r3, [r7, #8]
 8017ff2:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8017ff6:	2b02      	cmp	r3, #2
 8017ff8:	d103      	bne.n	8018002 <RadioSetRxGenericConfig+0x11e>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 8017ffa:	4b6c      	ldr	r3, [pc, #432]	@ (80181ac <RadioSetRxGenericConfig+0x2c8>)
 8017ffc:	22ff      	movs	r2, #255	@ 0xff
 8017ffe:	759a      	strb	r2, [r3, #22]
 8018000:	e002      	b.n	8018008 <RadioSetRxGenericConfig+0x124>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 8018002:	4b6a      	ldr	r3, [pc, #424]	@ (80181ac <RadioSetRxGenericConfig+0x2c8>)
 8018004:	22ff      	movs	r2, #255	@ 0xff
 8018006:	759a      	strb	r2, [r3, #22]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 8018008:	68bb      	ldr	r3, [r7, #8]
 801800a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 801800e:	2b02      	cmp	r3, #2
 8018010:	d004      	beq.n	801801c <RadioSetRxGenericConfig+0x138>
            || ( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 8018012:	68bb      	ldr	r3, [r7, #8]
 8018014:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8018018:	2b02      	cmp	r3, #2
 801801a:	d12d      	bne.n	8018078 <RadioSetRxGenericConfig+0x194>
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 801801c:	68bb      	ldr	r3, [r7, #8]
 801801e:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8018022:	2bf1      	cmp	r3, #241	@ 0xf1
 8018024:	d00c      	beq.n	8018040 <RadioSetRxGenericConfig+0x15c>
 8018026:	68bb      	ldr	r3, [r7, #8]
 8018028:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 801802c:	2bf2      	cmp	r3, #242	@ 0xf2
 801802e:	d007      	beq.n	8018040 <RadioSetRxGenericConfig+0x15c>
                && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 8018030:	68bb      	ldr	r3, [r7, #8]
 8018032:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8018036:	2b01      	cmp	r3, #1
 8018038:	d002      	beq.n	8018040 <RadioSetRxGenericConfig+0x15c>
                return -1;
 801803a:	f04f 33ff 	mov.w	r3, #4294967295
 801803e:	e10d      	b.n	801825c <RadioSetRxGenericConfig+0x378>
            ConfigGeneric.rtx = CONFIG_RX;
 8018040:	2300      	movs	r3, #0
 8018042:	773b      	strb	r3, [r7, #28]
            ConfigGeneric.RxConfig = config;
 8018044:	68bb      	ldr	r3, [r7, #8]
 8018046:	61bb      	str	r3, [r7, #24]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &RxTimeoutTimer ) )
 8018048:	4b59      	ldr	r3, [pc, #356]	@ (80181b0 <RadioSetRxGenericConfig+0x2cc>)
 801804a:	6819      	ldr	r1, [r3, #0]
 801804c:	f107 0314 	add.w	r3, r7, #20
 8018050:	4a58      	ldr	r2, [pc, #352]	@ (80181b4 <RadioSetRxGenericConfig+0x2d0>)
 8018052:	4618      	mov	r0, r3
 8018054:	f001 fd64 	bl	8019b20 <RFW_Init>
 8018058:	4603      	mov	r3, r0
 801805a:	2b00      	cmp	r3, #0
 801805c:	d002      	beq.n	8018064 <RadioSetRxGenericConfig+0x180>
                return -1;
 801805e:	f04f 33ff 	mov.w	r3, #4294967295
 8018062:	e0fb      	b.n	801825c <RadioSetRxGenericConfig+0x378>
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 8018064:	4b51      	ldr	r3, [pc, #324]	@ (80181ac <RadioSetRxGenericConfig+0x2c8>)
 8018066:	2200      	movs	r2, #0
 8018068:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 801806a:	4b50      	ldr	r3, [pc, #320]	@ (80181ac <RadioSetRxGenericConfig+0x2c8>)
 801806c:	2201      	movs	r2, #1
 801806e:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 8018070:	4b4e      	ldr	r3, [pc, #312]	@ (80181ac <RadioSetRxGenericConfig+0x2c8>)
 8018072:	2200      	movs	r2, #0
 8018074:	755a      	strb	r2, [r3, #21]
        {
 8018076:	e00e      	b.n	8018096 <RadioSetRxGenericConfig+0x1b2>
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 8018078:	68bb      	ldr	r3, [r7, #8]
 801807a:	f893 2023 	ldrb.w	r2, [r3, #35]	@ 0x23
 801807e:	4b4b      	ldr	r3, [pc, #300]	@ (80181ac <RadioSetRxGenericConfig+0x2c8>)
 8018080:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 8018082:	68bb      	ldr	r3, [r7, #8]
 8018084:	f893 2024 	ldrb.w	r2, [r3, #36]	@ 0x24
 8018088:	4b48      	ldr	r3, [pc, #288]	@ (80181ac <RadioSetRxGenericConfig+0x2c8>)
 801808a:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.LengthMode;
 801808c:	68bb      	ldr	r3, [r7, #8]
 801808e:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
 8018092:	4b46      	ldr	r3, [pc, #280]	@ (80181ac <RadioSetRxGenericConfig+0x2c8>)
 8018094:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 8018096:	f7ff fa3e 	bl	8017516 <RadioStandby>
        RadioSetModem( MODEM_FSK );
 801809a:	2000      	movs	r0, #0
 801809c:	f7fe fbd2 	bl	8016844 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80180a0:	4845      	ldr	r0, [pc, #276]	@ (80181b8 <RadioSetRxGenericConfig+0x2d4>)
 80180a2:	f001 f82f 	bl	8019104 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80180a6:	4845      	ldr	r0, [pc, #276]	@ (80181bc <RadioSetRxGenericConfig+0x2d8>)
 80180a8:	f001 f8fe 	bl	80192a8 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 80180ac:	f107 0320 	add.w	r3, r7, #32
 80180b0:	4618      	mov	r0, r3
 80180b2:	f000 fbc2 	bl	801883a <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 80180b6:	68bb      	ldr	r3, [r7, #8]
 80180b8:	8b9b      	ldrh	r3, [r3, #28]
 80180ba:	4618      	mov	r0, r3
 80180bc:	f000 fc0c 	bl	80188d8 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 80180c0:	68bb      	ldr	r3, [r7, #8]
 80180c2:	8b1b      	ldrh	r3, [r3, #24]
 80180c4:	4618      	mov	r0, r3
 80180c6:	f000 fbe7 	bl	8018898 <SUBGRF_SetCrcPolynomial>
        SubgRf.RxTimeout = ( uint32_t )( ( symbTimeout * 1000 * 8 ) / config->fsk.BitRate );
 80180ca:	683b      	ldr	r3, [r7, #0]
 80180cc:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 80180d0:	fb03 f202 	mul.w	r2, r3, r2
 80180d4:	68bb      	ldr	r3, [r7, #8]
 80180d6:	689b      	ldr	r3, [r3, #8]
 80180d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80180dc:	4a33      	ldr	r2, [pc, #204]	@ (80181ac <RadioSetRxGenericConfig+0x2c8>)
 80180de:	6093      	str	r3, [r2, #8]
        break;
 80180e0:	e0bb      	b.n	801825a <RadioSetRxGenericConfig+0x376>
        if( config->lora.PreambleLen == 0 )
 80180e2:	68bb      	ldr	r3, [r7, #8]
 80180e4:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 80180e6:	2b00      	cmp	r3, #0
 80180e8:	d102      	bne.n	80180f0 <RadioSetRxGenericConfig+0x20c>
            return -1;
 80180ea:	f04f 33ff 	mov.w	r3, #4294967295
 80180ee:	e0b5      	b.n	801825c <RadioSetRxGenericConfig+0x378>
        if( config->lora.LengthMode == RADIO_LORA_PACKET_FIXED_LENGTH )
 80180f0:	68bb      	ldr	r3, [r7, #8]
 80180f2:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80180f6:	2b01      	cmp	r3, #1
 80180f8:	d105      	bne.n	8018106 <RadioSetRxGenericConfig+0x222>
            MaxPayloadLength = config->lora.MaxPayloadLength;
 80180fa:	68bb      	ldr	r3, [r7, #8]
 80180fc:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8018100:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8018104:	e002      	b.n	801810c <RadioSetRxGenericConfig+0x228>
            MaxPayloadLength = 0xFF;
 8018106:	23ff      	movs	r3, #255	@ 0xff
 8018108:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->lora.StopTimerOnPreambleDetect == 0 ) ? false : true );
 801810c:	68bb      	ldr	r3, [r7, #8]
 801810e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018110:	2b00      	cmp	r3, #0
 8018112:	bf14      	ite	ne
 8018114:	2301      	movne	r3, #1
 8018116:	2300      	moveq	r3, #0
 8018118:	b2db      	uxtb	r3, r3
 801811a:	4618      	mov	r0, r3
 801811c:	f000 fd54 	bl	8018bc8 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 8018120:	683b      	ldr	r3, [r7, #0]
 8018122:	b2db      	uxtb	r3, r3
 8018124:	4618      	mov	r0, r3
 8018126:	f000 fd5e 	bl	8018be6 <SUBGRF_SetLoRaSymbNumTimeout>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 801812a:	4b20      	ldr	r3, [pc, #128]	@ (80181ac <RadioSetRxGenericConfig+0x2c8>)
 801812c:	2201      	movs	r2, #1
 801812e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 8018132:	68bb      	ldr	r3, [r7, #8]
 8018134:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 8018138:	4b1c      	ldr	r3, [pc, #112]	@ (80181ac <RadioSetRxGenericConfig+0x2c8>)
 801813a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 801813e:	68bb      	ldr	r3, [r7, #8]
 8018140:	f893 202d 	ldrb.w	r2, [r3, #45]	@ 0x2d
 8018144:	4b19      	ldr	r3, [pc, #100]	@ (80181ac <RadioSetRxGenericConfig+0x2c8>)
 8018146:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 801814a:	68bb      	ldr	r3, [r7, #8]
 801814c:	f893 202e 	ldrb.w	r2, [r3, #46]	@ 0x2e
 8018150:	4b16      	ldr	r3, [pc, #88]	@ (80181ac <RadioSetRxGenericConfig+0x2c8>)
 8018152:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
        switch( config->lora.LowDatarateOptimize )
 8018156:	68bb      	ldr	r3, [r7, #8]
 8018158:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 801815c:	2b02      	cmp	r3, #2
 801815e:	d010      	beq.n	8018182 <RadioSetRxGenericConfig+0x29e>
 8018160:	2b02      	cmp	r3, #2
 8018162:	dc2d      	bgt.n	80181c0 <RadioSetRxGenericConfig+0x2dc>
 8018164:	2b00      	cmp	r3, #0
 8018166:	d002      	beq.n	801816e <RadioSetRxGenericConfig+0x28a>
 8018168:	2b01      	cmp	r3, #1
 801816a:	d005      	beq.n	8018178 <RadioSetRxGenericConfig+0x294>
            break;
 801816c:	e028      	b.n	80181c0 <RadioSetRxGenericConfig+0x2dc>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 801816e:	4b0f      	ldr	r3, [pc, #60]	@ (80181ac <RadioSetRxGenericConfig+0x2c8>)
 8018170:	2200      	movs	r2, #0
 8018172:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 8018176:	e024      	b.n	80181c2 <RadioSetRxGenericConfig+0x2de>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8018178:	4b0c      	ldr	r3, [pc, #48]	@ (80181ac <RadioSetRxGenericConfig+0x2c8>)
 801817a:	2201      	movs	r2, #1
 801817c:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 8018180:	e01f      	b.n	80181c2 <RadioSetRxGenericConfig+0x2de>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 8018182:	68bb      	ldr	r3, [r7, #8]
 8018184:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8018188:	2b0b      	cmp	r3, #11
 801818a:	d004      	beq.n	8018196 <RadioSetRxGenericConfig+0x2b2>
 801818c:	68bb      	ldr	r3, [r7, #8]
 801818e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8018192:	2b0c      	cmp	r3, #12
 8018194:	d104      	bne.n	80181a0 <RadioSetRxGenericConfig+0x2bc>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8018196:	4b05      	ldr	r3, [pc, #20]	@ (80181ac <RadioSetRxGenericConfig+0x2c8>)
 8018198:	2201      	movs	r2, #1
 801819a:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 801819e:	e010      	b.n	80181c2 <RadioSetRxGenericConfig+0x2de>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 80181a0:	4b02      	ldr	r3, [pc, #8]	@ (80181ac <RadioSetRxGenericConfig+0x2c8>)
 80181a2:	2200      	movs	r2, #0
 80181a4:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 80181a8:	e00b      	b.n	80181c2 <RadioSetRxGenericConfig+0x2de>
 80181aa:	bf00      	nop
 80181ac:	200014ec 	.word	0x200014ec
 80181b0:	200014e8 	.word	0x200014e8
 80181b4:	20001560 	.word	0x20001560
 80181b8:	20001524 	.word	0x20001524
 80181bc:	200014fa 	.word	0x200014fa
            break;
 80181c0:	bf00      	nop
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 80181c2:	4b28      	ldr	r3, [pc, #160]	@ (8018264 <RadioSetRxGenericConfig+0x380>)
 80181c4:	2201      	movs	r2, #1
 80181c6:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 80181c8:	68bb      	ldr	r3, [r7, #8]
 80181ca:	8e1a      	ldrh	r2, [r3, #48]	@ 0x30
 80181cc:	4b25      	ldr	r3, [pc, #148]	@ (8018264 <RadioSetRxGenericConfig+0x380>)
 80181ce:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 80181d0:	68bb      	ldr	r3, [r7, #8]
 80181d2:	f893 2032 	ldrb.w	r2, [r3, #50]	@ 0x32
 80181d6:	4b23      	ldr	r3, [pc, #140]	@ (8018264 <RadioSetRxGenericConfig+0x380>)
 80181d8:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 80181da:	4a22      	ldr	r2, [pc, #136]	@ (8018264 <RadioSetRxGenericConfig+0x380>)
 80181dc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80181e0:	77d3      	strb	r3, [r2, #31]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 80181e2:	68bb      	ldr	r3, [r7, #8]
 80181e4:	f893 2034 	ldrb.w	r2, [r3, #52]	@ 0x34
 80181e8:	4b1e      	ldr	r3, [pc, #120]	@ (8018264 <RadioSetRxGenericConfig+0x380>)
 80181ea:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 80181ee:	68bb      	ldr	r3, [r7, #8]
 80181f0:	f893 2035 	ldrb.w	r2, [r3, #53]	@ 0x35
 80181f4:	4b1b      	ldr	r3, [pc, #108]	@ (8018264 <RadioSetRxGenericConfig+0x380>)
 80181f6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
        RadioStandby( );
 80181fa:	f7ff f98c 	bl	8017516 <RadioStandby>
        RadioSetModem( MODEM_LORA );
 80181fe:	2001      	movs	r0, #1
 8018200:	f7fe fb20 	bl	8016844 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8018204:	4818      	ldr	r0, [pc, #96]	@ (8018268 <RadioSetRxGenericConfig+0x384>)
 8018206:	f000 ff7d 	bl	8019104 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801820a:	4818      	ldr	r0, [pc, #96]	@ (801826c <RadioSetRxGenericConfig+0x388>)
 801820c:	f001 f84c 	bl	80192a8 <SUBGRF_SetPacketParams>
        if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 8018210:	4b14      	ldr	r3, [pc, #80]	@ (8018264 <RadioSetRxGenericConfig+0x380>)
 8018212:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8018216:	2b01      	cmp	r3, #1
 8018218:	d10d      	bne.n	8018236 <RadioSetRxGenericConfig+0x352>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 801821a:	f240 7036 	movw	r0, #1846	@ 0x736
 801821e:	f001 f9ad 	bl	801957c <SUBGRF_ReadRegister>
 8018222:	4603      	mov	r3, r0
 8018224:	f023 0304 	bic.w	r3, r3, #4
 8018228:	b2db      	uxtb	r3, r3
 801822a:	4619      	mov	r1, r3
 801822c:	f240 7036 	movw	r0, #1846	@ 0x736
 8018230:	f001 f982 	bl	8019538 <SUBGRF_WriteRegister>
 8018234:	e00c      	b.n	8018250 <RadioSetRxGenericConfig+0x36c>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 8018236:	f240 7036 	movw	r0, #1846	@ 0x736
 801823a:	f001 f99f 	bl	801957c <SUBGRF_ReadRegister>
 801823e:	4603      	mov	r3, r0
 8018240:	f043 0304 	orr.w	r3, r3, #4
 8018244:	b2db      	uxtb	r3, r3
 8018246:	4619      	mov	r1, r3
 8018248:	f240 7036 	movw	r0, #1846	@ 0x736
 801824c:	f001 f974 	bl	8019538 <SUBGRF_WriteRegister>
        SubgRf.RxTimeout = 0xFFFF;
 8018250:	4b04      	ldr	r3, [pc, #16]	@ (8018264 <RadioSetRxGenericConfig+0x380>)
 8018252:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8018256:	609a      	str	r2, [r3, #8]
        break;
 8018258:	bf00      	nop
    }
    return status;
 801825a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 801825c:	4618      	mov	r0, r3
 801825e:	3730      	adds	r7, #48	@ 0x30
 8018260:	46bd      	mov	sp, r7
 8018262:	bd80      	pop	{r7, pc}
 8018264:	200014ec 	.word	0x200014ec
 8018268:	20001524 	.word	0x20001524
 801826c:	200014fa 	.word	0x200014fa

08018270 <RadioSetTxGenericConfig>:

static int32_t RadioSetTxGenericConfig( GenericModems_t modem, TxConfigGeneric_t *config, int8_t power,
                                        uint32_t timeout )
{
 8018270:	b580      	push	{r7, lr}
 8018272:	b08e      	sub	sp, #56	@ 0x38
 8018274:	af00      	add	r7, sp, #0
 8018276:	60b9      	str	r1, [r7, #8]
 8018278:	607b      	str	r3, [r7, #4]
 801827a:	4603      	mov	r3, r0
 801827c:	73fb      	strb	r3, [r7, #15]
 801827e:	4613      	mov	r3, r2
 8018280:	73bb      	strb	r3, [r7, #14]
#if( RADIO_LR_FHSS_IS_ON == 1 )
    /*disable LrFhss*/
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    uint8_t syncword[8] = {0};
 8018282:	2300      	movs	r3, #0
 8018284:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8018286:	2300      	movs	r3, #0
 8018288:	633b      	str	r3, [r7, #48]	@ 0x30
    RadioModems_t radio_modem;
    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 801828a:	f001 fc56 	bl	8019b3a <RFW_DeInit>
    switch( modem )
 801828e:	7bfb      	ldrb	r3, [r7, #15]
 8018290:	2b03      	cmp	r3, #3
 8018292:	f200 8204 	bhi.w	801869e <RadioSetTxGenericConfig+0x42e>
 8018296:	a201      	add	r2, pc, #4	@ (adr r2, 801829c <RadioSetTxGenericConfig+0x2c>)
 8018298:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801829c:	08018421 	.word	0x08018421
 80182a0:	08018569 	.word	0x08018569
 80182a4:	08018661 	.word	0x08018661
 80182a8:	080182ad 	.word	0x080182ad
    {
    case GENERIC_MSK:
        if( config->msk.SyncWordLength > 8 )
 80182ac:	68bb      	ldr	r3, [r7, #8]
 80182ae:	7c9b      	ldrb	r3, [r3, #18]
 80182b0:	2b08      	cmp	r3, #8
 80182b2:	d902      	bls.n	80182ba <RadioSetTxGenericConfig+0x4a>
        {
            return -1;
 80182b4:	f04f 33ff 	mov.w	r3, #4294967295
 80182b8:	e206      	b.n	80186c8 <RadioSetTxGenericConfig+0x458>
        }
        else
        {
            RADIO_MEMCPY8( syncword, config->msk.SyncWord, config->msk.SyncWordLength );
 80182ba:	68bb      	ldr	r3, [r7, #8]
 80182bc:	6899      	ldr	r1, [r3, #8]
 80182be:	68bb      	ldr	r3, [r7, #8]
 80182c0:	7c9b      	ldrb	r3, [r3, #18]
 80182c2:	461a      	mov	r2, r3
 80182c4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80182c8:	4618      	mov	r0, r3
 80182ca:	f001 fd29 	bl	8019d20 <UTIL_MEM_cpy_8>
        }
        if( ( config->msk.BitRate == 0 ) )
 80182ce:	68bb      	ldr	r3, [r7, #8]
 80182d0:	681b      	ldr	r3, [r3, #0]
 80182d2:	2b00      	cmp	r3, #0
 80182d4:	d102      	bne.n	80182dc <RadioSetTxGenericConfig+0x6c>
        {
            return -1;
 80182d6:	f04f 33ff 	mov.w	r3, #4294967295
 80182da:	e1f5      	b.n	80186c8 <RadioSetTxGenericConfig+0x458>
        }
        else if( config->msk.BitRate <= 10000 )
 80182dc:	68bb      	ldr	r3, [r7, #8]
 80182de:	681b      	ldr	r3, [r3, #0]
 80182e0:	f242 7210 	movw	r2, #10000	@ 0x2710
 80182e4:	4293      	cmp	r3, r2
 80182e6:	d813      	bhi.n	8018310 <RadioSetTxGenericConfig+0xa0>
        {
            /*max msk modulator datarate is 10kbps*/
            radio_modem = MODEM_MSK;
 80182e8:	2302      	movs	r3, #2
 80182ea:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GMSK;
 80182ee:	4b99      	ldr	r3, [pc, #612]	@ (8018554 <RadioSetTxGenericConfig+0x2e4>)
 80182f0:	2203      	movs	r2, #3
 80182f2:	739a      	strb	r2, [r3, #14]
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GMSK;
 80182f4:	4b97      	ldr	r3, [pc, #604]	@ (8018554 <RadioSetTxGenericConfig+0x2e4>)
 80182f6:	2203      	movs	r2, #3
 80182f8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 80182fc:	68bb      	ldr	r3, [r7, #8]
 80182fe:	681b      	ldr	r3, [r3, #0]
 8018300:	4a94      	ldr	r2, [pc, #592]	@ (8018554 <RadioSetTxGenericConfig+0x2e4>)
 8018302:	63d3      	str	r3, [r2, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 8018304:	68bb      	ldr	r3, [r7, #8]
 8018306:	7cda      	ldrb	r2, [r3, #19]
 8018308:	4b92      	ldr	r3, [pc, #584]	@ (8018554 <RadioSetTxGenericConfig+0x2e4>)
 801830a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 801830e:	e017      	b.n	8018340 <RadioSetTxGenericConfig+0xd0>
        }
        else
        {
            radio_modem = MODEM_FSK;
 8018310:	2300      	movs	r3, #0
 8018312:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8018316:	4b8f      	ldr	r3, [pc, #572]	@ (8018554 <RadioSetTxGenericConfig+0x2e4>)
 8018318:	2200      	movs	r2, #0
 801831a:	739a      	strb	r2, [r3, #14]
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801831c:	4b8d      	ldr	r3, [pc, #564]	@ (8018554 <RadioSetTxGenericConfig+0x2e4>)
 801831e:	2200      	movs	r2, #0
 8018320:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 8018324:	68bb      	ldr	r3, [r7, #8]
 8018326:	681b      	ldr	r3, [r3, #0]
 8018328:	4a8a      	ldr	r2, [pc, #552]	@ (8018554 <RadioSetTxGenericConfig+0x2e4>)
 801832a:	63d3      	str	r3, [r2, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 801832c:	68bb      	ldr	r3, [r7, #8]
 801832e:	7cda      	ldrb	r2, [r3, #19]
 8018330:	4b88      	ldr	r3, [pc, #544]	@ (8018554 <RadioSetTxGenericConfig+0x2e4>)
 8018332:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            /*do msk with gfsk modulator*/
            SubgRf.ModulationParams.Params.Gfsk.Fdev = config->msk.BitRate / 4;
 8018336:	68bb      	ldr	r3, [r7, #8]
 8018338:	681b      	ldr	r3, [r3, #0]
 801833a:	089b      	lsrs	r3, r3, #2
 801833c:	4a85      	ldr	r2, [pc, #532]	@ (8018554 <RadioSetTxGenericConfig+0x2e4>)
 801833e:	6413      	str	r3, [r2, #64]	@ 0x40
        }

        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->msk.PreambleLen ) << 3; // convert byte into bit
 8018340:	68bb      	ldr	r3, [r7, #8]
 8018342:	685b      	ldr	r3, [r3, #4]
 8018344:	b29b      	uxth	r3, r3
 8018346:	00db      	lsls	r3, r3, #3
 8018348:	b29a      	uxth	r2, r3
 801834a:	4b82      	ldr	r3, [pc, #520]	@ (8018554 <RadioSetTxGenericConfig+0x2e4>)
 801834c:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 801834e:	4b81      	ldr	r3, [pc, #516]	@ (8018554 <RadioSetTxGenericConfig+0x2e4>)
 8018350:	2204      	movs	r2, #4
 8018352:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->msk.SyncWordLength ) << 3; // convert byte into bit
 8018354:	68bb      	ldr	r3, [r7, #8]
 8018356:	7c9b      	ldrb	r3, [r3, #18]
 8018358:	00db      	lsls	r3, r3, #3
 801835a:	b2da      	uxtb	r2, r3
 801835c:	4b7d      	ldr	r3, [pc, #500]	@ (8018554 <RadioSetTxGenericConfig+0x2e4>)
 801835e:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 8018360:	4b7c      	ldr	r3, [pc, #496]	@ (8018554 <RadioSetTxGenericConfig+0x2e4>)
 8018362:	2200      	movs	r2, #0
 8018364:	751a      	strb	r2, [r3, #20]

        if( ( config->msk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 8018366:	68bb      	ldr	r3, [r7, #8]
 8018368:	7d9b      	ldrb	r3, [r3, #22]
 801836a:	2b02      	cmp	r3, #2
 801836c:	d003      	beq.n	8018376 <RadioSetTxGenericConfig+0x106>
            || ( config->msk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 801836e:	68bb      	ldr	r3, [r7, #8]
 8018370:	7d1b      	ldrb	r3, [r3, #20]
 8018372:	2b02      	cmp	r3, #2
 8018374:	d12b      	bne.n	80183ce <RadioSetTxGenericConfig+0x15e>
        {
            /* Supports only RADIO_FSK_CRC_2_BYTES_IBM or RADIO_FSK_CRC_2_BYTES_CCIT */
            if( ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 8018376:	68bb      	ldr	r3, [r7, #8]
 8018378:	7d5b      	ldrb	r3, [r3, #21]
 801837a:	2bf1      	cmp	r3, #241	@ 0xf1
 801837c:	d00a      	beq.n	8018394 <RadioSetTxGenericConfig+0x124>
 801837e:	68bb      	ldr	r3, [r7, #8]
 8018380:	7d5b      	ldrb	r3, [r3, #21]
 8018382:	2bf2      	cmp	r3, #242	@ 0xf2
 8018384:	d006      	beq.n	8018394 <RadioSetTxGenericConfig+0x124>
                && ( config->msk.CrcLength != RADIO_FSK_CRC_OFF ) )
 8018386:	68bb      	ldr	r3, [r7, #8]
 8018388:	7d5b      	ldrb	r3, [r3, #21]
 801838a:	2b01      	cmp	r3, #1
 801838c:	d002      	beq.n	8018394 <RadioSetTxGenericConfig+0x124>
            {
                return -1;
 801838e:	f04f 33ff 	mov.w	r3, #4294967295
 8018392:	e199      	b.n	80186c8 <RadioSetTxGenericConfig+0x458>
            }
            ConfigGeneric_t ConfigGeneric;
            /*msk and fsk are union, no need for copy as fsk/msk struct are on same address*/
            ConfigGeneric.TxConfig = config;
 8018394:	68bb      	ldr	r3, [r7, #8]
 8018396:	623b      	str	r3, [r7, #32]
            ConfigGeneric.rtx = CONFIG_TX;
 8018398:	2301      	movs	r3, #1
 801839a:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 801839e:	4b6e      	ldr	r3, [pc, #440]	@ (8018558 <RadioSetTxGenericConfig+0x2e8>)
 80183a0:	6819      	ldr	r1, [r3, #0]
 80183a2:	f107 0320 	add.w	r3, r7, #32
 80183a6:	4a6d      	ldr	r2, [pc, #436]	@ (801855c <RadioSetTxGenericConfig+0x2ec>)
 80183a8:	4618      	mov	r0, r3
 80183aa:	f001 fbb9 	bl	8019b20 <RFW_Init>
 80183ae:	4603      	mov	r3, r0
 80183b0:	2b00      	cmp	r3, #0
 80183b2:	d002      	beq.n	80183ba <RadioSetTxGenericConfig+0x14a>
            {
                return -1;
 80183b4:	f04f 33ff 	mov.w	r3, #4294967295
 80183b8:	e186      	b.n	80186c8 <RadioSetTxGenericConfig+0x458>
            }
            /* whitening off, will be processed by FW, switch off built-in radio whitening */
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 80183ba:	4b66      	ldr	r3, [pc, #408]	@ (8018554 <RadioSetTxGenericConfig+0x2e4>)
 80183bc:	2200      	movs	r2, #0
 80183be:	761a      	strb	r2, [r3, #24]
            /* Crc processed by FW, switch off built-in radio Crc */
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 80183c0:	4b64      	ldr	r3, [pc, #400]	@ (8018554 <RadioSetTxGenericConfig+0x2e4>)
 80183c2:	2201      	movs	r2, #1
 80183c4:	75da      	strb	r2, [r3, #23]
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 80183c6:	4b63      	ldr	r3, [pc, #396]	@ (8018554 <RadioSetTxGenericConfig+0x2e4>)
 80183c8:	2200      	movs	r2, #0
 80183ca:	755a      	strb	r2, [r3, #21]
        {
 80183cc:	e00b      	b.n	80183e6 <RadioSetTxGenericConfig+0x176>
        }
        else
        {
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->msk.CrcLength;
 80183ce:	68bb      	ldr	r3, [r7, #8]
 80183d0:	7d5a      	ldrb	r2, [r3, #21]
 80183d2:	4b60      	ldr	r3, [pc, #384]	@ (8018554 <RadioSetTxGenericConfig+0x2e4>)
 80183d4:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->msk.Whitening;
 80183d6:	68bb      	ldr	r3, [r7, #8]
 80183d8:	7d9a      	ldrb	r2, [r3, #22]
 80183da:	4b5e      	ldr	r3, [pc, #376]	@ (8018554 <RadioSetTxGenericConfig+0x2e4>)
 80183dc:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->msk.HeaderType;
 80183de:	68bb      	ldr	r3, [r7, #8]
 80183e0:	7d1a      	ldrb	r2, [r3, #20]
 80183e2:	4b5c      	ldr	r3, [pc, #368]	@ (8018554 <RadioSetTxGenericConfig+0x2e4>)
 80183e4:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 80183e6:	f7ff f896 	bl	8017516 <RadioStandby>
        RadioSetModem( radio_modem );
 80183ea:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80183ee:	4618      	mov	r0, r3
 80183f0:	f7fe fa28 	bl	8016844 <RadioSetModem>

        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80183f4:	485a      	ldr	r0, [pc, #360]	@ (8018560 <RadioSetTxGenericConfig+0x2f0>)
 80183f6:	f000 fe85 	bl	8019104 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80183fa:	485a      	ldr	r0, [pc, #360]	@ (8018564 <RadioSetTxGenericConfig+0x2f4>)
 80183fc:	f000 ff54 	bl	80192a8 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 8018400:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8018404:	4618      	mov	r0, r3
 8018406:	f000 fa18 	bl	801883a <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->msk.whiteSeed );
 801840a:	68bb      	ldr	r3, [r7, #8]
 801840c:	8a1b      	ldrh	r3, [r3, #16]
 801840e:	4618      	mov	r0, r3
 8018410:	f000 fa62 	bl	80188d8 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->msk.CrcPolynomial );
 8018414:	68bb      	ldr	r3, [r7, #8]
 8018416:	899b      	ldrh	r3, [r3, #12]
 8018418:	4618      	mov	r0, r3
 801841a:	f000 fa3d 	bl	8018898 <SUBGRF_SetCrcPolynomial>
        break;
 801841e:	e13f      	b.n	80186a0 <RadioSetTxGenericConfig+0x430>
    case GENERIC_FSK:
        if( config->fsk.BitRate == 0 )
 8018420:	68bb      	ldr	r3, [r7, #8]
 8018422:	681b      	ldr	r3, [r3, #0]
 8018424:	2b00      	cmp	r3, #0
 8018426:	d102      	bne.n	801842e <RadioSetTxGenericConfig+0x1be>
        {
            return -1;
 8018428:	f04f 33ff 	mov.w	r3, #4294967295
 801842c:	e14c      	b.n	80186c8 <RadioSetTxGenericConfig+0x458>
        }
        if( config->fsk.SyncWordLength > 8 )
 801842e:	68bb      	ldr	r3, [r7, #8]
 8018430:	7c9b      	ldrb	r3, [r3, #18]
 8018432:	2b08      	cmp	r3, #8
 8018434:	d902      	bls.n	801843c <RadioSetTxGenericConfig+0x1cc>
        {
            return -1;
 8018436:	f04f 33ff 	mov.w	r3, #4294967295
 801843a:	e145      	b.n	80186c8 <RadioSetTxGenericConfig+0x458>
        }
        else
        {
            RADIO_MEMCPY8( syncword, config->fsk.SyncWord, config->fsk.SyncWordLength );
 801843c:	68bb      	ldr	r3, [r7, #8]
 801843e:	6899      	ldr	r1, [r3, #8]
 8018440:	68bb      	ldr	r3, [r7, #8]
 8018442:	7c9b      	ldrb	r3, [r3, #18]
 8018444:	461a      	mov	r2, r3
 8018446:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 801844a:	4618      	mov	r0, r3
 801844c:	f001 fc68 	bl	8019d20 <UTIL_MEM_cpy_8>
        }
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8018450:	4b40      	ldr	r3, [pc, #256]	@ (8018554 <RadioSetTxGenericConfig+0x2e4>)
 8018452:	2200      	movs	r2, #0
 8018454:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 8018458:	68bb      	ldr	r3, [r7, #8]
 801845a:	681b      	ldr	r3, [r3, #0]
 801845c:	4a3d      	ldr	r2, [pc, #244]	@ (8018554 <RadioSetTxGenericConfig+0x2e4>)
 801845e:	63d3      	str	r3, [r2, #60]	@ 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 8018460:	68bb      	ldr	r3, [r7, #8]
 8018462:	7cda      	ldrb	r2, [r3, #19]
 8018464:	4b3b      	ldr	r3, [pc, #236]	@ (8018554 <RadioSetTxGenericConfig+0x2e4>)
 8018466:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
        SubgRf.ModulationParams.Params.Gfsk.Fdev = config->fsk.FrequencyDeviation;
 801846a:	68bb      	ldr	r3, [r7, #8]
 801846c:	699b      	ldr	r3, [r3, #24]
 801846e:	4a39      	ldr	r2, [pc, #228]	@ (8018554 <RadioSetTxGenericConfig+0x2e4>)
 8018470:	6413      	str	r3, [r2, #64]	@ 0x40

        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8018472:	4b38      	ldr	r3, [pc, #224]	@ (8018554 <RadioSetTxGenericConfig+0x2e4>)
 8018474:	2200      	movs	r2, #0
 8018476:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3; // convert byte into bit
 8018478:	68bb      	ldr	r3, [r7, #8]
 801847a:	685b      	ldr	r3, [r3, #4]
 801847c:	b29b      	uxth	r3, r3
 801847e:	00db      	lsls	r3, r3, #3
 8018480:	b29a      	uxth	r2, r3
 8018482:	4b34      	ldr	r3, [pc, #208]	@ (8018554 <RadioSetTxGenericConfig+0x2e4>)
 8018484:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 8018486:	4b33      	ldr	r3, [pc, #204]	@ (8018554 <RadioSetTxGenericConfig+0x2e4>)
 8018488:	2204      	movs	r2, #4
 801848a:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 801848c:	68bb      	ldr	r3, [r7, #8]
 801848e:	7c9b      	ldrb	r3, [r3, #18]
 8018490:	00db      	lsls	r3, r3, #3
 8018492:	b2da      	uxtb	r2, r3
 8018494:	4b2f      	ldr	r3, [pc, #188]	@ (8018554 <RadioSetTxGenericConfig+0x2e4>)
 8018496:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 8018498:	4b2e      	ldr	r3, [pc, #184]	@ (8018554 <RadioSetTxGenericConfig+0x2e4>)
 801849a:	2200      	movs	r2, #0
 801849c:	751a      	strb	r2, [r3, #20]

        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 801849e:	68bb      	ldr	r3, [r7, #8]
 80184a0:	7d9b      	ldrb	r3, [r3, #22]
 80184a2:	2b02      	cmp	r3, #2
 80184a4:	d003      	beq.n	80184ae <RadioSetTxGenericConfig+0x23e>
            || ( config->fsk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 80184a6:	68bb      	ldr	r3, [r7, #8]
 80184a8:	7d1b      	ldrb	r3, [r3, #20]
 80184aa:	2b02      	cmp	r3, #2
 80184ac:	d12a      	bne.n	8018504 <RadioSetTxGenericConfig+0x294>
        {
            /* Supports only RADIO_FSK_CRC_2_BYTES_IBM or RADIO_FSK_CRC_2_BYTES_CCIT */
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 80184ae:	68bb      	ldr	r3, [r7, #8]
 80184b0:	7d5b      	ldrb	r3, [r3, #21]
 80184b2:	2bf1      	cmp	r3, #241	@ 0xf1
 80184b4:	d00a      	beq.n	80184cc <RadioSetTxGenericConfig+0x25c>
 80184b6:	68bb      	ldr	r3, [r7, #8]
 80184b8:	7d5b      	ldrb	r3, [r3, #21]
 80184ba:	2bf2      	cmp	r3, #242	@ 0xf2
 80184bc:	d006      	beq.n	80184cc <RadioSetTxGenericConfig+0x25c>
                && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 80184be:	68bb      	ldr	r3, [r7, #8]
 80184c0:	7d5b      	ldrb	r3, [r3, #21]
 80184c2:	2b01      	cmp	r3, #1
 80184c4:	d002      	beq.n	80184cc <RadioSetTxGenericConfig+0x25c>
            {
                return -1;
 80184c6:	f04f 33ff 	mov.w	r3, #4294967295
 80184ca:	e0fd      	b.n	80186c8 <RadioSetTxGenericConfig+0x458>
            }
            ConfigGeneric_t ConfigGeneric;
            ConfigGeneric.rtx = CONFIG_TX;
 80184cc:	2301      	movs	r3, #1
 80184ce:	773b      	strb	r3, [r7, #28]
            ConfigGeneric.TxConfig = config;
 80184d0:	68bb      	ldr	r3, [r7, #8]
 80184d2:	617b      	str	r3, [r7, #20]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 80184d4:	4b20      	ldr	r3, [pc, #128]	@ (8018558 <RadioSetTxGenericConfig+0x2e8>)
 80184d6:	6819      	ldr	r1, [r3, #0]
 80184d8:	f107 0314 	add.w	r3, r7, #20
 80184dc:	4a1f      	ldr	r2, [pc, #124]	@ (801855c <RadioSetTxGenericConfig+0x2ec>)
 80184de:	4618      	mov	r0, r3
 80184e0:	f001 fb1e 	bl	8019b20 <RFW_Init>
 80184e4:	4603      	mov	r3, r0
 80184e6:	2b00      	cmp	r3, #0
 80184e8:	d002      	beq.n	80184f0 <RadioSetTxGenericConfig+0x280>
            {
                return -1;
 80184ea:	f04f 33ff 	mov.w	r3, #4294967295
 80184ee:	e0eb      	b.n	80186c8 <RadioSetTxGenericConfig+0x458>
            }
            /* whitening off, will be processed by FW, switch off built-in radio whitening */
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 80184f0:	4b18      	ldr	r3, [pc, #96]	@ (8018554 <RadioSetTxGenericConfig+0x2e4>)
 80184f2:	2200      	movs	r2, #0
 80184f4:	761a      	strb	r2, [r3, #24]
            /* Crc processed by FW, switch off built-in radio Crc */
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 80184f6:	4b17      	ldr	r3, [pc, #92]	@ (8018554 <RadioSetTxGenericConfig+0x2e4>)
 80184f8:	2201      	movs	r2, #1
 80184fa:	75da      	strb	r2, [r3, #23]
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 80184fc:	4b15      	ldr	r3, [pc, #84]	@ (8018554 <RadioSetTxGenericConfig+0x2e4>)
 80184fe:	2200      	movs	r2, #0
 8018500:	755a      	strb	r2, [r3, #21]
        {
 8018502:	e00b      	b.n	801851c <RadioSetTxGenericConfig+0x2ac>
        }
        else
        {
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 8018504:	68bb      	ldr	r3, [r7, #8]
 8018506:	7d5a      	ldrb	r2, [r3, #21]
 8018508:	4b12      	ldr	r3, [pc, #72]	@ (8018554 <RadioSetTxGenericConfig+0x2e4>)
 801850a:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 801850c:	68bb      	ldr	r3, [r7, #8]
 801850e:	7d9a      	ldrb	r2, [r3, #22]
 8018510:	4b10      	ldr	r3, [pc, #64]	@ (8018554 <RadioSetTxGenericConfig+0x2e4>)
 8018512:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.HeaderType;
 8018514:	68bb      	ldr	r3, [r7, #8]
 8018516:	7d1a      	ldrb	r2, [r3, #20]
 8018518:	4b0e      	ldr	r3, [pc, #56]	@ (8018554 <RadioSetTxGenericConfig+0x2e4>)
 801851a:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 801851c:	f7fe fffb 	bl	8017516 <RadioStandby>
        RadioSetModem( MODEM_FSK );
 8018520:	2000      	movs	r0, #0
 8018522:	f7fe f98f 	bl	8016844 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8018526:	480e      	ldr	r0, [pc, #56]	@ (8018560 <RadioSetTxGenericConfig+0x2f0>)
 8018528:	f000 fdec 	bl	8019104 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801852c:	480d      	ldr	r0, [pc, #52]	@ (8018564 <RadioSetTxGenericConfig+0x2f4>)
 801852e:	f000 febb 	bl	80192a8 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 8018532:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8018536:	4618      	mov	r0, r3
 8018538:	f000 f97f 	bl	801883a <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 801853c:	68bb      	ldr	r3, [r7, #8]
 801853e:	8a1b      	ldrh	r3, [r3, #16]
 8018540:	4618      	mov	r0, r3
 8018542:	f000 f9c9 	bl	80188d8 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 8018546:	68bb      	ldr	r3, [r7, #8]
 8018548:	899b      	ldrh	r3, [r3, #12]
 801854a:	4618      	mov	r0, r3
 801854c:	f000 f9a4 	bl	8018898 <SUBGRF_SetCrcPolynomial>
        break;
 8018550:	e0a6      	b.n	80186a0 <RadioSetTxGenericConfig+0x430>
 8018552:	bf00      	nop
 8018554:	200014ec 	.word	0x200014ec
 8018558:	200014e8 	.word	0x200014e8
 801855c:	20001548 	.word	0x20001548
 8018560:	20001524 	.word	0x20001524
 8018564:	200014fa 	.word	0x200014fa
    case GENERIC_LORA:
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8018568:	4b59      	ldr	r3, [pc, #356]	@ (80186d0 <RadioSetTxGenericConfig+0x460>)
 801856a:	2201      	movs	r2, #1
 801856c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 8018570:	68bb      	ldr	r3, [r7, #8]
 8018572:	781a      	ldrb	r2, [r3, #0]
 8018574:	4b56      	ldr	r3, [pc, #344]	@ (80186d0 <RadioSetTxGenericConfig+0x460>)
 8018576:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 801857a:	68bb      	ldr	r3, [r7, #8]
 801857c:	785a      	ldrb	r2, [r3, #1]
 801857e:	4b54      	ldr	r3, [pc, #336]	@ (80186d0 <RadioSetTxGenericConfig+0x460>)
 8018580:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 8018584:	68bb      	ldr	r3, [r7, #8]
 8018586:	789a      	ldrb	r2, [r3, #2]
 8018588:	4b51      	ldr	r3, [pc, #324]	@ (80186d0 <RadioSetTxGenericConfig+0x460>)
 801858a:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
        switch( config->lora.LowDatarateOptimize )
 801858e:	68bb      	ldr	r3, [r7, #8]
 8018590:	78db      	ldrb	r3, [r3, #3]
 8018592:	2b02      	cmp	r3, #2
 8018594:	d010      	beq.n	80185b8 <RadioSetTxGenericConfig+0x348>
 8018596:	2b02      	cmp	r3, #2
 8018598:	dc20      	bgt.n	80185dc <RadioSetTxGenericConfig+0x36c>
 801859a:	2b00      	cmp	r3, #0
 801859c:	d002      	beq.n	80185a4 <RadioSetTxGenericConfig+0x334>
 801859e:	2b01      	cmp	r3, #1
 80185a0:	d005      	beq.n	80185ae <RadioSetTxGenericConfig+0x33e>
            {
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
            }
            break;
        default:
            break;
 80185a2:	e01b      	b.n	80185dc <RadioSetTxGenericConfig+0x36c>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 80185a4:	4b4a      	ldr	r3, [pc, #296]	@ (80186d0 <RadioSetTxGenericConfig+0x460>)
 80185a6:	2200      	movs	r2, #0
 80185a8:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 80185ac:	e017      	b.n	80185de <RadioSetTxGenericConfig+0x36e>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 80185ae:	4b48      	ldr	r3, [pc, #288]	@ (80186d0 <RadioSetTxGenericConfig+0x460>)
 80185b0:	2201      	movs	r2, #1
 80185b2:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 80185b6:	e012      	b.n	80185de <RadioSetTxGenericConfig+0x36e>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 80185b8:	68bb      	ldr	r3, [r7, #8]
 80185ba:	781b      	ldrb	r3, [r3, #0]
 80185bc:	2b0b      	cmp	r3, #11
 80185be:	d003      	beq.n	80185c8 <RadioSetTxGenericConfig+0x358>
 80185c0:	68bb      	ldr	r3, [r7, #8]
 80185c2:	781b      	ldrb	r3, [r3, #0]
 80185c4:	2b0c      	cmp	r3, #12
 80185c6:	d104      	bne.n	80185d2 <RadioSetTxGenericConfig+0x362>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 80185c8:	4b41      	ldr	r3, [pc, #260]	@ (80186d0 <RadioSetTxGenericConfig+0x460>)
 80185ca:	2201      	movs	r2, #1
 80185cc:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 80185d0:	e005      	b.n	80185de <RadioSetTxGenericConfig+0x36e>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 80185d2:	4b3f      	ldr	r3, [pc, #252]	@ (80186d0 <RadioSetTxGenericConfig+0x460>)
 80185d4:	2200      	movs	r2, #0
 80185d6:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 80185da:	e000      	b.n	80185de <RadioSetTxGenericConfig+0x36e>
            break;
 80185dc:	bf00      	nop
        }

        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 80185de:	4b3c      	ldr	r3, [pc, #240]	@ (80186d0 <RadioSetTxGenericConfig+0x460>)
 80185e0:	2201      	movs	r2, #1
 80185e2:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 80185e4:	68bb      	ldr	r3, [r7, #8]
 80185e6:	889a      	ldrh	r2, [r3, #4]
 80185e8:	4b39      	ldr	r3, [pc, #228]	@ (80186d0 <RadioSetTxGenericConfig+0x460>)
 80185ea:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 80185ec:	68bb      	ldr	r3, [r7, #8]
 80185ee:	799a      	ldrb	r2, [r3, #6]
 80185f0:	4b37      	ldr	r3, [pc, #220]	@ (80186d0 <RadioSetTxGenericConfig+0x460>)
 80185f2:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 80185f4:	68bb      	ldr	r3, [r7, #8]
 80185f6:	79da      	ldrb	r2, [r3, #7]
 80185f8:	4b35      	ldr	r3, [pc, #212]	@ (80186d0 <RadioSetTxGenericConfig+0x460>)
 80185fa:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 80185fe:	68bb      	ldr	r3, [r7, #8]
 8018600:	7a1a      	ldrb	r2, [r3, #8]
 8018602:	4b33      	ldr	r3, [pc, #204]	@ (80186d0 <RadioSetTxGenericConfig+0x460>)
 8018604:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        RadioStandby( );
 8018608:	f7fe ff85 	bl	8017516 <RadioStandby>
        RadioSetModem( MODEM_LORA );
 801860c:	2001      	movs	r0, #1
 801860e:	f7fe f919 	bl	8016844 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8018612:	4830      	ldr	r0, [pc, #192]	@ (80186d4 <RadioSetTxGenericConfig+0x464>)
 8018614:	f000 fd76 	bl	8019104 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8018618:	482f      	ldr	r0, [pc, #188]	@ (80186d8 <RadioSetTxGenericConfig+0x468>)
 801861a:	f000 fe45 	bl	80192a8 <SUBGRF_SetPacketParams>

        /* WORKAROUND - Modulation Quality with 500 kHz LoRa Bandwidth, see STM32WL Erratasheet */
        if( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 )
 801861e:	4b2c      	ldr	r3, [pc, #176]	@ (80186d0 <RadioSetTxGenericConfig+0x460>)
 8018620:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8018624:	2b06      	cmp	r3, #6
 8018626:	d10d      	bne.n	8018644 <RadioSetTxGenericConfig+0x3d4>
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 8018628:	f640 0089 	movw	r0, #2185	@ 0x889
 801862c:	f000 ffa6 	bl	801957c <SUBGRF_ReadRegister>
 8018630:	4603      	mov	r3, r0
 8018632:	f023 0304 	bic.w	r3, r3, #4
 8018636:	b2db      	uxtb	r3, r3
 8018638:	4619      	mov	r1, r3
 801863a:	f640 0089 	movw	r0, #2185	@ 0x889
 801863e:	f000 ff7b 	bl	8019538 <SUBGRF_WriteRegister>
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
        }
        /* WORKAROUND END */
        break;
 8018642:	e02d      	b.n	80186a0 <RadioSetTxGenericConfig+0x430>
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 8018644:	f640 0089 	movw	r0, #2185	@ 0x889
 8018648:	f000 ff98 	bl	801957c <SUBGRF_ReadRegister>
 801864c:	4603      	mov	r3, r0
 801864e:	f043 0304 	orr.w	r3, r3, #4
 8018652:	b2db      	uxtb	r3, r3
 8018654:	4619      	mov	r1, r3
 8018656:	f640 0089 	movw	r0, #2185	@ 0x889
 801865a:	f000 ff6d 	bl	8019538 <SUBGRF_WriteRegister>
        break;
 801865e:	e01f      	b.n	80186a0 <RadioSetTxGenericConfig+0x430>
    case GENERIC_BPSK:
        if( ( config->bpsk.BitRate == 0 ) || ( config->bpsk.BitRate > 1000 ) )
 8018660:	68bb      	ldr	r3, [r7, #8]
 8018662:	681b      	ldr	r3, [r3, #0]
 8018664:	2b00      	cmp	r3, #0
 8018666:	d004      	beq.n	8018672 <RadioSetTxGenericConfig+0x402>
 8018668:	68bb      	ldr	r3, [r7, #8]
 801866a:	681b      	ldr	r3, [r3, #0]
 801866c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8018670:	d902      	bls.n	8018678 <RadioSetTxGenericConfig+0x408>
        {
            return -1;
 8018672:	f04f 33ff 	mov.w	r3, #4294967295
 8018676:	e027      	b.n	80186c8 <RadioSetTxGenericConfig+0x458>
        }
        RadioSetModem( MODEM_BPSK );
 8018678:	2003      	movs	r0, #3
 801867a:	f7fe f8e3 	bl	8016844 <RadioSetModem>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 801867e:	4b14      	ldr	r3, [pc, #80]	@ (80186d0 <RadioSetTxGenericConfig+0x460>)
 8018680:	2202      	movs	r2, #2
 8018682:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        SubgRf.ModulationParams.Params.Bpsk.BitRate = config->bpsk.BitRate;
 8018686:	68bb      	ldr	r3, [r7, #8]
 8018688:	681b      	ldr	r3, [r3, #0]
 801868a:	4a11      	ldr	r2, [pc, #68]	@ (80186d0 <RadioSetTxGenericConfig+0x460>)
 801868c:	6493      	str	r3, [r2, #72]	@ 0x48
        SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 801868e:	4b10      	ldr	r3, [pc, #64]	@ (80186d0 <RadioSetTxGenericConfig+0x460>)
 8018690:	2216      	movs	r2, #22
 8018692:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8018696:	480f      	ldr	r0, [pc, #60]	@ (80186d4 <RadioSetTxGenericConfig+0x464>)
 8018698:	f000 fd34 	bl	8019104 <SUBGRF_SetModulationParams>
        break;
 801869c:	e000      	b.n	80186a0 <RadioSetTxGenericConfig+0x430>
    default:
        break;
 801869e:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 80186a0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80186a4:	4618      	mov	r0, r3
 80186a6:	f001 f87d 	bl	80197a4 <SUBGRF_SetRfTxPower>
 80186aa:	4603      	mov	r3, r0
 80186ac:	461a      	mov	r2, r3
 80186ae:	4b08      	ldr	r3, [pc, #32]	@ (80186d0 <RadioSetTxGenericConfig+0x460>)
 80186b0:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 80186b4:	4b06      	ldr	r3, [pc, #24]	@ (80186d0 <RadioSetTxGenericConfig+0x460>)
 80186b6:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 80186ba:	4618      	mov	r0, r3
 80186bc:	f001 fa51 	bl	8019b62 <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 80186c0:	4a03      	ldr	r2, [pc, #12]	@ (80186d0 <RadioSetTxGenericConfig+0x460>)
 80186c2:	687b      	ldr	r3, [r7, #4]
 80186c4:	6053      	str	r3, [r2, #4]
    return 0;
 80186c6:	2300      	movs	r3, #0
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 80186c8:	4618      	mov	r0, r3
 80186ca:	3738      	adds	r7, #56	@ 0x38
 80186cc:	46bd      	mov	sp, r7
 80186ce:	bd80      	pop	{r7, pc}
 80186d0:	200014ec 	.word	0x200014ec
 80186d4:	20001524 	.word	0x20001524
 80186d8:	200014fa 	.word	0x200014fa

080186dc <RadioLrFhssSetCfg>:
    return ( prbs31_val - 1 ) % ( max );
}
#endif /* RADIO_LR_FHSS_IS_ON == 1 */

static radio_status_t RadioLrFhssSetCfg( const radio_lr_fhss_cfg_params_t *cfg_params )
{
 80186dc:	b480      	push	{r7}
 80186de:	b085      	sub	sp, #20
 80186e0:	af00      	add	r7, sp, #0
 80186e2:	6078      	str	r0, [r7, #4]
    radio_status_t status = RADIO_STATUS_UNSUPPORTED_FEATURE;
 80186e4:	2301      	movs	r3, #1
 80186e6:	73fb      	strb	r3, [r7, #15]
    {
        return status;
    }
    SubgRf.lr_fhss.is_lr_fhss_on = true;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    return  status;
 80186e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80186ea:	4618      	mov	r0, r3
 80186ec:	3714      	adds	r7, #20
 80186ee:	46bd      	mov	sp, r7
 80186f0:	bc80      	pop	{r7}
 80186f2:	4770      	bx	lr

080186f4 <RadioLrFhssGetTimeOnAirInMs>:

static radio_status_t RadioLrFhssGetTimeOnAirInMs( const radio_lr_fhss_time_on_air_params_t *params,
                                                    uint32_t *time_on_air_in_ms )
{
 80186f4:	b480      	push	{r7}
 80186f6:	b083      	sub	sp, #12
 80186f8:	af00      	add	r7, sp, #0
 80186fa:	6078      	str	r0, [r7, #4]
 80186fc:	6039      	str	r1, [r7, #0]
    *time_on_air_in_ms = lr_fhss_get_time_on_air_in_ms( &params->radio_lr_fhss_params.lr_fhss_params,
                                                        params->pld_len_in_bytes );

    return RADIO_STATUS_OK;
#else
    return RADIO_STATUS_UNSUPPORTED_FEATURE;
 80186fe:	2301      	movs	r3, #1
#endif /* RADIO_LR_FHSS_IS_ON */
 8018700:	4618      	mov	r0, r3
 8018702:	370c      	adds	r7, #12
 8018704:	46bd      	mov	sp, r7
 8018706:	bc80      	pop	{r7}
 8018708:	4770      	bx	lr
	...

0801870c <SUBGRF_Init>:
 */
static DioIrqHandler RadioOnDioIrqCb;

/* Exported functions ---------------------------------------------------------*/
void SUBGRF_Init( DioIrqHandler dioIrq )
{
 801870c:	b580      	push	{r7, lr}
 801870e:	b084      	sub	sp, #16
 8018710:	af00      	add	r7, sp, #0
 8018712:	6078      	str	r0, [r7, #4]
    if ( dioIrq != NULL)
 8018714:	687b      	ldr	r3, [r7, #4]
 8018716:	2b00      	cmp	r3, #0
 8018718:	d002      	beq.n	8018720 <SUBGRF_Init+0x14>
    {
        RadioOnDioIrqCb = dioIrq;
 801871a:	4a1d      	ldr	r2, [pc, #116]	@ (8018790 <SUBGRF_Init+0x84>)
 801871c:	687b      	ldr	r3, [r7, #4]
 801871e:	6013      	str	r3, [r2, #0]
    }

    RADIO_INIT();
 8018720:	f7e9 f8c8 	bl	80018b4 <MX_SUBGHZ_Init>

    /* set default SMPS current drive to default*/
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 8018724:	2002      	movs	r0, #2
 8018726:	f001 f919 	bl	801995c <Radio_SMPS_Set>

    ImageCalibrated = false;
 801872a:	4b1a      	ldr	r3, [pc, #104]	@ (8018794 <SUBGRF_Init+0x88>)
 801872c:	2200      	movs	r2, #0
 801872e:	701a      	strb	r2, [r3, #0]

    SUBGRF_SetStandby( STDBY_RC );
 8018730:	2000      	movs	r0, #0
 8018732:	f000 f97d 	bl	8018a30 <SUBGRF_SetStandby>

    // Initialize TCXO control
    if (1U == RBI_IsTCXO() )
 8018736:	f7f1 ff02 	bl	800a53e <RBI_IsTCXO>
 801873a:	4603      	mov	r3, r0
 801873c:	2b01      	cmp	r3, #1
 801873e:	d10e      	bne.n	801875e <SUBGRF_Init+0x52>
    {
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 8018740:	2140      	movs	r1, #64	@ 0x40
 8018742:	2001      	movs	r0, #1
 8018744:	f000 fb82 	bl	8018e4c <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 8018748:	2100      	movs	r1, #0
 801874a:	f640 1011 	movw	r0, #2321	@ 0x911
 801874e:	f000 fef3 	bl	8019538 <SUBGRF_WriteRegister>

        /*enable calibration for cut1.1 and later*/
        CalibrationParams_t calibParam;
        calibParam.Value = 0x7F;
 8018752:	237f      	movs	r3, #127	@ 0x7f
 8018754:	733b      	strb	r3, [r7, #12]
        SUBGRF_Calibrate( calibParam );
 8018756:	7b38      	ldrb	r0, [r7, #12]
 8018758:	f000 fa8b 	bl	8018c72 <SUBGRF_Calibrate>
 801875c:	e009      	b.n	8018772 <SUBGRF_Init+0x66>
    }
    else
    {
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 801875e:	2120      	movs	r1, #32
 8018760:	f640 1011 	movw	r0, #2321	@ 0x911
 8018764:	f000 fee8 	bl	8019538 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 8018768:	2120      	movs	r1, #32
 801876a:	f640 1012 	movw	r0, #2322	@ 0x912
 801876e:	f000 fee3 	bl	8019538 <SUBGRF_WriteRegister>
    }

    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 8018772:	210e      	movs	r1, #14
 8018774:	f640 101f 	movw	r0, #2335	@ 0x91f
 8018778:	f000 fede 	bl	8019538 <SUBGRF_WriteRegister>

    /* Init RF Switch */
    RBI_Init();
 801877c:	f7f1 febc 	bl	800a4f8 <RBI_Init>

    OperatingMode = MODE_STDBY_RC;
 8018780:	4b05      	ldr	r3, [pc, #20]	@ (8018798 <SUBGRF_Init+0x8c>)
 8018782:	2201      	movs	r2, #1
 8018784:	701a      	strb	r2, [r3, #0]
}
 8018786:	bf00      	nop
 8018788:	3710      	adds	r7, #16
 801878a:	46bd      	mov	sp, r7
 801878c:	bd80      	pop	{r7, pc}
 801878e:	bf00      	nop
 8018790:	20001584 	.word	0x20001584
 8018794:	20001580 	.word	0x20001580
 8018798:	20001578 	.word	0x20001578

0801879c <SUBGRF_GetOperatingMode>:

RadioOperatingModes_t SUBGRF_GetOperatingMode( void )
{
 801879c:	b480      	push	{r7}
 801879e:	af00      	add	r7, sp, #0
    return OperatingMode;
 80187a0:	4b02      	ldr	r3, [pc, #8]	@ (80187ac <SUBGRF_GetOperatingMode+0x10>)
 80187a2:	781b      	ldrb	r3, [r3, #0]
}
 80187a4:	4618      	mov	r0, r3
 80187a6:	46bd      	mov	sp, r7
 80187a8:	bc80      	pop	{r7}
 80187aa:	4770      	bx	lr
 80187ac:	20001578 	.word	0x20001578

080187b0 <SUBGRF_SetPayload>:

void SUBGRF_SetPayload( uint8_t *payload, uint8_t size )
{
 80187b0:	b580      	push	{r7, lr}
 80187b2:	b082      	sub	sp, #8
 80187b4:	af00      	add	r7, sp, #0
 80187b6:	6078      	str	r0, [r7, #4]
 80187b8:	460b      	mov	r3, r1
 80187ba:	70fb      	strb	r3, [r7, #3]
    SUBGRF_WriteBuffer( 0x00, payload, size );
 80187bc:	78fb      	ldrb	r3, [r7, #3]
 80187be:	461a      	mov	r2, r3
 80187c0:	6879      	ldr	r1, [r7, #4]
 80187c2:	2000      	movs	r0, #0
 80187c4:	f000 ff3e 	bl	8019644 <SUBGRF_WriteBuffer>
}
 80187c8:	bf00      	nop
 80187ca:	3708      	adds	r7, #8
 80187cc:	46bd      	mov	sp, r7
 80187ce:	bd80      	pop	{r7, pc}

080187d0 <SUBGRF_GetPayload>:

uint8_t SUBGRF_GetPayload( uint8_t *buffer, uint8_t *size,  uint8_t maxSize )
{
 80187d0:	b580      	push	{r7, lr}
 80187d2:	b086      	sub	sp, #24
 80187d4:	af00      	add	r7, sp, #0
 80187d6:	60f8      	str	r0, [r7, #12]
 80187d8:	60b9      	str	r1, [r7, #8]
 80187da:	4613      	mov	r3, r2
 80187dc:	71fb      	strb	r3, [r7, #7]
    uint8_t offset = 0;
 80187de:	2300      	movs	r3, #0
 80187e0:	75fb      	strb	r3, [r7, #23]

    SUBGRF_GetRxBufferStatus( size, &offset );
 80187e2:	f107 0317 	add.w	r3, r7, #23
 80187e6:	4619      	mov	r1, r3
 80187e8:	68b8      	ldr	r0, [r7, #8]
 80187ea:	f000 fe27 	bl	801943c <SUBGRF_GetRxBufferStatus>
    if( *size > maxSize )
 80187ee:	68bb      	ldr	r3, [r7, #8]
 80187f0:	781b      	ldrb	r3, [r3, #0]
 80187f2:	79fa      	ldrb	r2, [r7, #7]
 80187f4:	429a      	cmp	r2, r3
 80187f6:	d201      	bcs.n	80187fc <SUBGRF_GetPayload+0x2c>
    {
        return 1;
 80187f8:	2301      	movs	r3, #1
 80187fa:	e007      	b.n	801880c <SUBGRF_GetPayload+0x3c>
    }
    SUBGRF_ReadBuffer( offset, buffer, *size );
 80187fc:	7df8      	ldrb	r0, [r7, #23]
 80187fe:	68bb      	ldr	r3, [r7, #8]
 8018800:	781b      	ldrb	r3, [r3, #0]
 8018802:	461a      	mov	r2, r3
 8018804:	68f9      	ldr	r1, [r7, #12]
 8018806:	f000 ff3f 	bl	8019688 <SUBGRF_ReadBuffer>

    return 0;
 801880a:	2300      	movs	r3, #0
}
 801880c:	4618      	mov	r0, r3
 801880e:	3718      	adds	r7, #24
 8018810:	46bd      	mov	sp, r7
 8018812:	bd80      	pop	{r7, pc}

08018814 <SUBGRF_SendPayload>:

void SUBGRF_SendPayload( uint8_t *payload, uint8_t size, uint32_t timeout)
{
 8018814:	b580      	push	{r7, lr}
 8018816:	b084      	sub	sp, #16
 8018818:	af00      	add	r7, sp, #0
 801881a:	60f8      	str	r0, [r7, #12]
 801881c:	460b      	mov	r3, r1
 801881e:	607a      	str	r2, [r7, #4]
 8018820:	72fb      	strb	r3, [r7, #11]
    SUBGRF_SetPayload( payload, size );
 8018822:	7afb      	ldrb	r3, [r7, #11]
 8018824:	4619      	mov	r1, r3
 8018826:	68f8      	ldr	r0, [r7, #12]
 8018828:	f7ff ffc2 	bl	80187b0 <SUBGRF_SetPayload>
    SUBGRF_SetTx( timeout );
 801882c:	6878      	ldr	r0, [r7, #4]
 801882e:	f000 f91b 	bl	8018a68 <SUBGRF_SetTx>
}
 8018832:	bf00      	nop
 8018834:	3710      	adds	r7, #16
 8018836:	46bd      	mov	sp, r7
 8018838:	bd80      	pop	{r7, pc}

0801883a <SUBGRF_SetSyncWord>:

uint8_t SUBGRF_SetSyncWord( uint8_t *syncWord )
{
 801883a:	b580      	push	{r7, lr}
 801883c:	b082      	sub	sp, #8
 801883e:	af00      	add	r7, sp, #0
 8018840:	6078      	str	r0, [r7, #4]
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
 8018842:	2208      	movs	r2, #8
 8018844:	6879      	ldr	r1, [r7, #4]
 8018846:	f44f 60d8 	mov.w	r0, #1728	@ 0x6c0
 801884a:	f000 feb7 	bl	80195bc <SUBGRF_WriteRegisters>
    return 0;
 801884e:	2300      	movs	r3, #0
}
 8018850:	4618      	mov	r0, r3
 8018852:	3708      	adds	r7, #8
 8018854:	46bd      	mov	sp, r7
 8018856:	bd80      	pop	{r7, pc}

08018858 <SUBGRF_SetCrcSeed>:

void SUBGRF_SetCrcSeed( uint16_t seed )
{
 8018858:	b580      	push	{r7, lr}
 801885a:	b084      	sub	sp, #16
 801885c:	af00      	add	r7, sp, #0
 801885e:	4603      	mov	r3, r0
 8018860:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 8018862:	88fb      	ldrh	r3, [r7, #6]
 8018864:	0a1b      	lsrs	r3, r3, #8
 8018866:	b29b      	uxth	r3, r3
 8018868:	b2db      	uxtb	r3, r3
 801886a:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( seed & 0xFF );
 801886c:	88fb      	ldrh	r3, [r7, #6]
 801886e:	b2db      	uxtb	r3, r3
 8018870:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 8018872:	f000 fb6f 	bl	8018f54 <SUBGRF_GetPacketType>
 8018876:	4603      	mov	r3, r0
 8018878:	2b00      	cmp	r3, #0
 801887a:	d108      	bne.n	801888e <SUBGRF_SetCrcSeed+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 801887c:	f107 030c 	add.w	r3, r7, #12
 8018880:	2202      	movs	r2, #2
 8018882:	4619      	mov	r1, r3
 8018884:	f240 60bc 	movw	r0, #1724	@ 0x6bc
 8018888:	f000 fe98 	bl	80195bc <SUBGRF_WriteRegisters>
            break;
 801888c:	e000      	b.n	8018890 <SUBGRF_SetCrcSeed+0x38>

        default:
            break;
 801888e:	bf00      	nop
    }
}
 8018890:	bf00      	nop
 8018892:	3710      	adds	r7, #16
 8018894:	46bd      	mov	sp, r7
 8018896:	bd80      	pop	{r7, pc}

08018898 <SUBGRF_SetCrcPolynomial>:

void SUBGRF_SetCrcPolynomial( uint16_t polynomial )
{
 8018898:	b580      	push	{r7, lr}
 801889a:	b084      	sub	sp, #16
 801889c:	af00      	add	r7, sp, #0
 801889e:	4603      	mov	r3, r0
 80188a0:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 80188a2:	88fb      	ldrh	r3, [r7, #6]
 80188a4:	0a1b      	lsrs	r3, r3, #8
 80188a6:	b29b      	uxth	r3, r3
 80188a8:	b2db      	uxtb	r3, r3
 80188aa:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 80188ac:	88fb      	ldrh	r3, [r7, #6]
 80188ae:	b2db      	uxtb	r3, r3
 80188b0:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 80188b2:	f000 fb4f 	bl	8018f54 <SUBGRF_GetPacketType>
 80188b6:	4603      	mov	r3, r0
 80188b8:	2b00      	cmp	r3, #0
 80188ba:	d108      	bne.n	80188ce <SUBGRF_SetCrcPolynomial+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 80188bc:	f107 030c 	add.w	r3, r7, #12
 80188c0:	2202      	movs	r2, #2
 80188c2:	4619      	mov	r1, r3
 80188c4:	f240 60be 	movw	r0, #1726	@ 0x6be
 80188c8:	f000 fe78 	bl	80195bc <SUBGRF_WriteRegisters>
            break;
 80188cc:	e000      	b.n	80188d0 <SUBGRF_SetCrcPolynomial+0x38>

        default:
            break;
 80188ce:	bf00      	nop
    }
}
 80188d0:	bf00      	nop
 80188d2:	3710      	adds	r7, #16
 80188d4:	46bd      	mov	sp, r7
 80188d6:	bd80      	pop	{r7, pc}

080188d8 <SUBGRF_SetWhiteningSeed>:

void SUBGRF_SetWhiteningSeed( uint16_t seed )
{
 80188d8:	b580      	push	{r7, lr}
 80188da:	b084      	sub	sp, #16
 80188dc:	af00      	add	r7, sp, #0
 80188de:	4603      	mov	r3, r0
 80188e0:	80fb      	strh	r3, [r7, #6]
    uint8_t regValue = 0;
 80188e2:	2300      	movs	r3, #0
 80188e4:	73fb      	strb	r3, [r7, #15]

    switch( SUBGRF_GetPacketType( ) )
 80188e6:	f000 fb35 	bl	8018f54 <SUBGRF_GetPacketType>
 80188ea:	4603      	mov	r3, r0
 80188ec:	2b00      	cmp	r3, #0
 80188ee:	d121      	bne.n	8018934 <SUBGRF_SetWhiteningSeed+0x5c>
    {
        case PACKET_TYPE_GFSK:
            regValue = SUBGRF_ReadRegister( REG_LR_WHITSEEDBASEADDR_MSB ) & 0xFE;
 80188f0:	f44f 60d7 	mov.w	r0, #1720	@ 0x6b8
 80188f4:	f000 fe42 	bl	801957c <SUBGRF_ReadRegister>
 80188f8:	4603      	mov	r3, r0
 80188fa:	f023 0301 	bic.w	r3, r3, #1
 80188fe:	73fb      	strb	r3, [r7, #15]
            regValue = ( ( seed >> 8 ) & 0x01 ) | regValue;
 8018900:	88fb      	ldrh	r3, [r7, #6]
 8018902:	0a1b      	lsrs	r3, r3, #8
 8018904:	b29b      	uxth	r3, r3
 8018906:	b25b      	sxtb	r3, r3
 8018908:	f003 0301 	and.w	r3, r3, #1
 801890c:	b25a      	sxtb	r2, r3
 801890e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8018912:	4313      	orrs	r3, r2
 8018914:	b25b      	sxtb	r3, r3
 8018916:	73fb      	strb	r3, [r7, #15]
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_MSB, regValue ); // only 1 bit.
 8018918:	7bfb      	ldrb	r3, [r7, #15]
 801891a:	4619      	mov	r1, r3
 801891c:	f44f 60d7 	mov.w	r0, #1720	@ 0x6b8
 8018920:	f000 fe0a 	bl	8019538 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_LSB, (uint8_t)seed );
 8018924:	88fb      	ldrh	r3, [r7, #6]
 8018926:	b2db      	uxtb	r3, r3
 8018928:	4619      	mov	r1, r3
 801892a:	f240 60b9 	movw	r0, #1721	@ 0x6b9
 801892e:	f000 fe03 	bl	8019538 <SUBGRF_WriteRegister>
            break;
 8018932:	e000      	b.n	8018936 <SUBGRF_SetWhiteningSeed+0x5e>

        default:
            break;
 8018934:	bf00      	nop
    }
}
 8018936:	bf00      	nop
 8018938:	3710      	adds	r7, #16
 801893a:	46bd      	mov	sp, r7
 801893c:	bd80      	pop	{r7, pc}

0801893e <SUBGRF_GetRandom>:

uint32_t SUBGRF_GetRandom( void )
{
 801893e:	b580      	push	{r7, lr}
 8018940:	b082      	sub	sp, #8
 8018942:	af00      	add	r7, sp, #0
    uint32_t number = 0;
 8018944:	2300      	movs	r3, #0
 8018946:	603b      	str	r3, [r7, #0]
    uint8_t regAnaLna = 0;
 8018948:	2300      	movs	r3, #0
 801894a:	71fb      	strb	r3, [r7, #7]
    uint8_t regAnaMixer = 0;
 801894c:	2300      	movs	r3, #0
 801894e:	71bb      	strb	r3, [r7, #6]

    regAnaLna = SUBGRF_ReadRegister( REG_ANA_LNA );
 8018950:	f640 00e2 	movw	r0, #2274	@ 0x8e2
 8018954:	f000 fe12 	bl	801957c <SUBGRF_ReadRegister>
 8018958:	4603      	mov	r3, r0
 801895a:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 801895c:	79fb      	ldrb	r3, [r7, #7]
 801895e:	f023 0301 	bic.w	r3, r3, #1
 8018962:	b2db      	uxtb	r3, r3
 8018964:	4619      	mov	r1, r3
 8018966:	f640 00e2 	movw	r0, #2274	@ 0x8e2
 801896a:	f000 fde5 	bl	8019538 <SUBGRF_WriteRegister>

    regAnaMixer = SUBGRF_ReadRegister( REG_ANA_MIXER );
 801896e:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 8018972:	f000 fe03 	bl	801957c <SUBGRF_ReadRegister>
 8018976:	4603      	mov	r3, r0
 8018978:	71bb      	strb	r3, [r7, #6]
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 801897a:	79bb      	ldrb	r3, [r7, #6]
 801897c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8018980:	b2db      	uxtb	r3, r3
 8018982:	4619      	mov	r1, r3
 8018984:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 8018988:	f000 fdd6 	bl	8019538 <SUBGRF_WriteRegister>

    // Set radio in continuous reception
    SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 801898c:	f06f 407f 	mvn.w	r0, #4278190080	@ 0xff000000
 8018990:	f000 f88a 	bl	8018aa8 <SUBGRF_SetRx>

    SUBGRF_ReadRegisters( RANDOM_NUMBER_GENERATORBASEADDR, ( uint8_t* )&number, 4 );
 8018994:	463b      	mov	r3, r7
 8018996:	2204      	movs	r2, #4
 8018998:	4619      	mov	r1, r3
 801899a:	f640 0019 	movw	r0, #2073	@ 0x819
 801899e:	f000 fe2f 	bl	8019600 <SUBGRF_ReadRegisters>

    SUBGRF_SetStandby( STDBY_RC );
 80189a2:	2000      	movs	r0, #0
 80189a4:	f000 f844 	bl	8018a30 <SUBGRF_SetStandby>

    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna );
 80189a8:	79fb      	ldrb	r3, [r7, #7]
 80189aa:	4619      	mov	r1, r3
 80189ac:	f640 00e2 	movw	r0, #2274	@ 0x8e2
 80189b0:	f000 fdc2 	bl	8019538 <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer );
 80189b4:	79bb      	ldrb	r3, [r7, #6]
 80189b6:	4619      	mov	r1, r3
 80189b8:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 80189bc:	f000 fdbc 	bl	8019538 <SUBGRF_WriteRegister>

    return number;
 80189c0:	683b      	ldr	r3, [r7, #0]
}
 80189c2:	4618      	mov	r0, r3
 80189c4:	3708      	adds	r7, #8
 80189c6:	46bd      	mov	sp, r7
 80189c8:	bd80      	pop	{r7, pc}
	...

080189cc <SUBGRF_SetSleep>:

void SUBGRF_SetSleep( SleepParams_t sleepConfig )
{
 80189cc:	b580      	push	{r7, lr}
 80189ce:	b084      	sub	sp, #16
 80189d0:	af00      	add	r7, sp, #0
 80189d2:	7138      	strb	r0, [r7, #4]
    /* switch the antenna OFF by SW */
    RBI_ConfigRFSwitch(RBI_SWITCH_OFF);
 80189d4:	2000      	movs	r0, #0
 80189d6:	f7f1 fd9a 	bl	800a50e <RBI_ConfigRFSwitch>

    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 80189da:	2002      	movs	r0, #2
 80189dc:	f000 ffbe 	bl	801995c <Radio_SMPS_Set>

    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 80189e0:	793b      	ldrb	r3, [r7, #4]
 80189e2:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80189e6:	b2db      	uxtb	r3, r3
 80189e8:	009b      	lsls	r3, r3, #2
 80189ea:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 80189ec:	793b      	ldrb	r3, [r7, #4]
 80189ee:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80189f2:	b2db      	uxtb	r3, r3
 80189f4:	005b      	lsls	r3, r3, #1
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 80189f6:	b25b      	sxtb	r3, r3
 80189f8:	4313      	orrs	r3, r2
 80189fa:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.WakeUpRTC ) );
 80189fc:	793b      	ldrb	r3, [r7, #4]
 80189fe:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8018a02:	b2db      	uxtb	r3, r3
 8018a04:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 8018a06:	4313      	orrs	r3, r2
 8018a08:	b25b      	sxtb	r3, r3
 8018a0a:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8018a0c:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
 8018a0e:	f107 030f 	add.w	r3, r7, #15
 8018a12:	2201      	movs	r2, #1
 8018a14:	4619      	mov	r1, r3
 8018a16:	2084      	movs	r0, #132	@ 0x84
 8018a18:	f000 fe58 	bl	80196cc <SUBGRF_WriteCommand>
    OperatingMode = MODE_SLEEP;
 8018a1c:	4b03      	ldr	r3, [pc, #12]	@ (8018a2c <SUBGRF_SetSleep+0x60>)
 8018a1e:	2200      	movs	r2, #0
 8018a20:	701a      	strb	r2, [r3, #0]
}
 8018a22:	bf00      	nop
 8018a24:	3710      	adds	r7, #16
 8018a26:	46bd      	mov	sp, r7
 8018a28:	bd80      	pop	{r7, pc}
 8018a2a:	bf00      	nop
 8018a2c:	20001578 	.word	0x20001578

08018a30 <SUBGRF_SetStandby>:

void SUBGRF_SetStandby( RadioStandbyModes_t standbyConfig )
{
 8018a30:	b580      	push	{r7, lr}
 8018a32:	b082      	sub	sp, #8
 8018a34:	af00      	add	r7, sp, #0
 8018a36:	4603      	mov	r3, r0
 8018a38:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 8018a3a:	1dfb      	adds	r3, r7, #7
 8018a3c:	2201      	movs	r2, #1
 8018a3e:	4619      	mov	r1, r3
 8018a40:	2080      	movs	r0, #128	@ 0x80
 8018a42:	f000 fe43 	bl	80196cc <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 8018a46:	79fb      	ldrb	r3, [r7, #7]
 8018a48:	2b00      	cmp	r3, #0
 8018a4a:	d103      	bne.n	8018a54 <SUBGRF_SetStandby+0x24>
    {
        OperatingMode = MODE_STDBY_RC;
 8018a4c:	4b05      	ldr	r3, [pc, #20]	@ (8018a64 <SUBGRF_SetStandby+0x34>)
 8018a4e:	2201      	movs	r2, #1
 8018a50:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        OperatingMode = MODE_STDBY_XOSC;
    }
}
 8018a52:	e002      	b.n	8018a5a <SUBGRF_SetStandby+0x2a>
        OperatingMode = MODE_STDBY_XOSC;
 8018a54:	4b03      	ldr	r3, [pc, #12]	@ (8018a64 <SUBGRF_SetStandby+0x34>)
 8018a56:	2202      	movs	r2, #2
 8018a58:	701a      	strb	r2, [r3, #0]
}
 8018a5a:	bf00      	nop
 8018a5c:	3708      	adds	r7, #8
 8018a5e:	46bd      	mov	sp, r7
 8018a60:	bd80      	pop	{r7, pc}
 8018a62:	bf00      	nop
 8018a64:	20001578 	.word	0x20001578

08018a68 <SUBGRF_SetTx>:
    SUBGRF_WriteCommand( RADIO_SET_FS, 0, 0 );
    OperatingMode = MODE_FS;
}

void SUBGRF_SetTx( uint32_t timeout )
{
 8018a68:	b580      	push	{r7, lr}
 8018a6a:	b084      	sub	sp, #16
 8018a6c:	af00      	add	r7, sp, #0
 8018a6e:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_TX;
 8018a70:	4b0c      	ldr	r3, [pc, #48]	@ (8018aa4 <SUBGRF_SetTx+0x3c>)
 8018a72:	2204      	movs	r2, #4
 8018a74:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8018a76:	687b      	ldr	r3, [r7, #4]
 8018a78:	0c1b      	lsrs	r3, r3, #16
 8018a7a:	b2db      	uxtb	r3, r3
 8018a7c:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8018a7e:	687b      	ldr	r3, [r7, #4]
 8018a80:	0a1b      	lsrs	r3, r3, #8
 8018a82:	b2db      	uxtb	r3, r3
 8018a84:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8018a86:	687b      	ldr	r3, [r7, #4]
 8018a88:	b2db      	uxtb	r3, r3
 8018a8a:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 8018a8c:	f107 030c 	add.w	r3, r7, #12
 8018a90:	2203      	movs	r2, #3
 8018a92:	4619      	mov	r1, r3
 8018a94:	2083      	movs	r0, #131	@ 0x83
 8018a96:	f000 fe19 	bl	80196cc <SUBGRF_WriteCommand>
}
 8018a9a:	bf00      	nop
 8018a9c:	3710      	adds	r7, #16
 8018a9e:	46bd      	mov	sp, r7
 8018aa0:	bd80      	pop	{r7, pc}
 8018aa2:	bf00      	nop
 8018aa4:	20001578 	.word	0x20001578

08018aa8 <SUBGRF_SetRx>:

void SUBGRF_SetRx( uint32_t timeout )
{
 8018aa8:	b580      	push	{r7, lr}
 8018aaa:	b084      	sub	sp, #16
 8018aac:	af00      	add	r7, sp, #0
 8018aae:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 8018ab0:	4b0c      	ldr	r3, [pc, #48]	@ (8018ae4 <SUBGRF_SetRx+0x3c>)
 8018ab2:	2205      	movs	r2, #5
 8018ab4:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8018ab6:	687b      	ldr	r3, [r7, #4]
 8018ab8:	0c1b      	lsrs	r3, r3, #16
 8018aba:	b2db      	uxtb	r3, r3
 8018abc:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8018abe:	687b      	ldr	r3, [r7, #4]
 8018ac0:	0a1b      	lsrs	r3, r3, #8
 8018ac2:	b2db      	uxtb	r3, r3
 8018ac4:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8018ac6:	687b      	ldr	r3, [r7, #4]
 8018ac8:	b2db      	uxtb	r3, r3
 8018aca:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 8018acc:	f107 030c 	add.w	r3, r7, #12
 8018ad0:	2203      	movs	r2, #3
 8018ad2:	4619      	mov	r1, r3
 8018ad4:	2082      	movs	r0, #130	@ 0x82
 8018ad6:	f000 fdf9 	bl	80196cc <SUBGRF_WriteCommand>
}
 8018ada:	bf00      	nop
 8018adc:	3710      	adds	r7, #16
 8018ade:	46bd      	mov	sp, r7
 8018ae0:	bd80      	pop	{r7, pc}
 8018ae2:	bf00      	nop
 8018ae4:	20001578 	.word	0x20001578

08018ae8 <SUBGRF_SetRxBoosted>:

void SUBGRF_SetRxBoosted( uint32_t timeout )
{
 8018ae8:	b580      	push	{r7, lr}
 8018aea:	b084      	sub	sp, #16
 8018aec:	af00      	add	r7, sp, #0
 8018aee:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 8018af0:	4b0e      	ldr	r3, [pc, #56]	@ (8018b2c <SUBGRF_SetRxBoosted+0x44>)
 8018af2:	2205      	movs	r2, #5
 8018af4:	701a      	strb	r2, [r3, #0]

    SUBGRF_WriteRegister( REG_RX_GAIN, 0x97 ); // max LNA gain, increase current by ~2mA for around ~3dB in sensitivity
 8018af6:	2197      	movs	r1, #151	@ 0x97
 8018af8:	f640 00ac 	movw	r0, #2220	@ 0x8ac
 8018afc:	f000 fd1c 	bl	8019538 <SUBGRF_WriteRegister>

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8018b00:	687b      	ldr	r3, [r7, #4]
 8018b02:	0c1b      	lsrs	r3, r3, #16
 8018b04:	b2db      	uxtb	r3, r3
 8018b06:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8018b08:	687b      	ldr	r3, [r7, #4]
 8018b0a:	0a1b      	lsrs	r3, r3, #8
 8018b0c:	b2db      	uxtb	r3, r3
 8018b0e:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8018b10:	687b      	ldr	r3, [r7, #4]
 8018b12:	b2db      	uxtb	r3, r3
 8018b14:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 8018b16:	f107 030c 	add.w	r3, r7, #12
 8018b1a:	2203      	movs	r2, #3
 8018b1c:	4619      	mov	r1, r3
 8018b1e:	2082      	movs	r0, #130	@ 0x82
 8018b20:	f000 fdd4 	bl	80196cc <SUBGRF_WriteCommand>
}
 8018b24:	bf00      	nop
 8018b26:	3710      	adds	r7, #16
 8018b28:	46bd      	mov	sp, r7
 8018b2a:	bd80      	pop	{r7, pc}
 8018b2c:	20001578 	.word	0x20001578

08018b30 <SUBGRF_SetRxDutyCycle>:

void SUBGRF_SetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 8018b30:	b580      	push	{r7, lr}
 8018b32:	b084      	sub	sp, #16
 8018b34:	af00      	add	r7, sp, #0
 8018b36:	6078      	str	r0, [r7, #4]
 8018b38:	6039      	str	r1, [r7, #0]
    uint8_t buf[6];

    buf[0] = ( uint8_t )( ( rxTime >> 16 ) & 0xFF );
 8018b3a:	687b      	ldr	r3, [r7, #4]
 8018b3c:	0c1b      	lsrs	r3, r3, #16
 8018b3e:	b2db      	uxtb	r3, r3
 8018b40:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( rxTime >> 8 ) & 0xFF );
 8018b42:	687b      	ldr	r3, [r7, #4]
 8018b44:	0a1b      	lsrs	r3, r3, #8
 8018b46:	b2db      	uxtb	r3, r3
 8018b48:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( rxTime & 0xFF );
 8018b4a:	687b      	ldr	r3, [r7, #4]
 8018b4c:	b2db      	uxtb	r3, r3
 8018b4e:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( ( sleepTime >> 16 ) & 0xFF );
 8018b50:	683b      	ldr	r3, [r7, #0]
 8018b52:	0c1b      	lsrs	r3, r3, #16
 8018b54:	b2db      	uxtb	r3, r3
 8018b56:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 8018b58:	683b      	ldr	r3, [r7, #0]
 8018b5a:	0a1b      	lsrs	r3, r3, #8
 8018b5c:	b2db      	uxtb	r3, r3
 8018b5e:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( sleepTime & 0xFF );
 8018b60:	683b      	ldr	r3, [r7, #0]
 8018b62:	b2db      	uxtb	r3, r3
 8018b64:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_RXDUTYCYCLE, buf, 6 );
 8018b66:	f107 0308 	add.w	r3, r7, #8
 8018b6a:	2206      	movs	r2, #6
 8018b6c:	4619      	mov	r1, r3
 8018b6e:	2094      	movs	r0, #148	@ 0x94
 8018b70:	f000 fdac 	bl	80196cc <SUBGRF_WriteCommand>
    OperatingMode = MODE_RX_DC;
 8018b74:	4b03      	ldr	r3, [pc, #12]	@ (8018b84 <SUBGRF_SetRxDutyCycle+0x54>)
 8018b76:	2206      	movs	r2, #6
 8018b78:	701a      	strb	r2, [r3, #0]
}
 8018b7a:	bf00      	nop
 8018b7c:	3710      	adds	r7, #16
 8018b7e:	46bd      	mov	sp, r7
 8018b80:	bd80      	pop	{r7, pc}
 8018b82:	bf00      	nop
 8018b84:	20001578 	.word	0x20001578

08018b88 <SUBGRF_SetCad>:

void SUBGRF_SetCad( void )
{
 8018b88:	b580      	push	{r7, lr}
 8018b8a:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_CAD, 0, 0 );
 8018b8c:	2200      	movs	r2, #0
 8018b8e:	2100      	movs	r1, #0
 8018b90:	20c5      	movs	r0, #197	@ 0xc5
 8018b92:	f000 fd9b 	bl	80196cc <SUBGRF_WriteCommand>
    OperatingMode = MODE_CAD;
 8018b96:	4b02      	ldr	r3, [pc, #8]	@ (8018ba0 <SUBGRF_SetCad+0x18>)
 8018b98:	2207      	movs	r2, #7
 8018b9a:	701a      	strb	r2, [r3, #0]
}
 8018b9c:	bf00      	nop
 8018b9e:	bd80      	pop	{r7, pc}
 8018ba0:	20001578 	.word	0x20001578

08018ba4 <SUBGRF_SetTxContinuousWave>:

void SUBGRF_SetTxContinuousWave( void )
{
 8018ba4:	b580      	push	{r7, lr}
 8018ba6:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSWAVE, 0, 0 );
 8018ba8:	2200      	movs	r2, #0
 8018baa:	2100      	movs	r1, #0
 8018bac:	20d1      	movs	r0, #209	@ 0xd1
 8018bae:	f000 fd8d 	bl	80196cc <SUBGRF_WriteCommand>
}
 8018bb2:	bf00      	nop
 8018bb4:	bd80      	pop	{r7, pc}

08018bb6 <SUBGRF_SetTxInfinitePreamble>:

void SUBGRF_SetTxInfinitePreamble( void )
{
 8018bb6:	b580      	push	{r7, lr}
 8018bb8:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
 8018bba:	2200      	movs	r2, #0
 8018bbc:	2100      	movs	r1, #0
 8018bbe:	20d2      	movs	r0, #210	@ 0xd2
 8018bc0:	f000 fd84 	bl	80196cc <SUBGRF_WriteCommand>
}
 8018bc4:	bf00      	nop
 8018bc6:	bd80      	pop	{r7, pc}

08018bc8 <SUBGRF_SetStopRxTimerOnPreambleDetect>:

void SUBGRF_SetStopRxTimerOnPreambleDetect( bool enable )
{
 8018bc8:	b580      	push	{r7, lr}
 8018bca:	b082      	sub	sp, #8
 8018bcc:	af00      	add	r7, sp, #0
 8018bce:	4603      	mov	r3, r0
 8018bd0:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 8018bd2:	1dfb      	adds	r3, r7, #7
 8018bd4:	2201      	movs	r2, #1
 8018bd6:	4619      	mov	r1, r3
 8018bd8:	209f      	movs	r0, #159	@ 0x9f
 8018bda:	f000 fd77 	bl	80196cc <SUBGRF_WriteCommand>
}
 8018bde:	bf00      	nop
 8018be0:	3708      	adds	r7, #8
 8018be2:	46bd      	mov	sp, r7
 8018be4:	bd80      	pop	{r7, pc}

08018be6 <SUBGRF_SetLoRaSymbNumTimeout>:

void SUBGRF_SetLoRaSymbNumTimeout( uint8_t symbNum )
{
 8018be6:	b580      	push	{r7, lr}
 8018be8:	b084      	sub	sp, #16
 8018bea:	af00      	add	r7, sp, #0
 8018bec:	4603      	mov	r3, r0
 8018bee:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_LORASYMBTIMEOUT, &symbNum, 1 );
 8018bf0:	1dfb      	adds	r3, r7, #7
 8018bf2:	2201      	movs	r2, #1
 8018bf4:	4619      	mov	r1, r3
 8018bf6:	20a0      	movs	r0, #160	@ 0xa0
 8018bf8:	f000 fd68 	bl	80196cc <SUBGRF_WriteCommand>

    if( symbNum >= 64 )
 8018bfc:	79fb      	ldrb	r3, [r7, #7]
 8018bfe:	2b3f      	cmp	r3, #63	@ 0x3f
 8018c00:	d91c      	bls.n	8018c3c <SUBGRF_SetLoRaSymbNumTimeout+0x56>
    {
        uint8_t mant = symbNum >> 1;
 8018c02:	79fb      	ldrb	r3, [r7, #7]
 8018c04:	085b      	lsrs	r3, r3, #1
 8018c06:	73fb      	strb	r3, [r7, #15]
        uint8_t exp  = 0;
 8018c08:	2300      	movs	r3, #0
 8018c0a:	73bb      	strb	r3, [r7, #14]
        uint8_t reg  = 0;
 8018c0c:	2300      	movs	r3, #0
 8018c0e:	737b      	strb	r3, [r7, #13]

        while( mant > 31 )
 8018c10:	e005      	b.n	8018c1e <SUBGRF_SetLoRaSymbNumTimeout+0x38>
        {
            mant >>= 2;
 8018c12:	7bfb      	ldrb	r3, [r7, #15]
 8018c14:	089b      	lsrs	r3, r3, #2
 8018c16:	73fb      	strb	r3, [r7, #15]
            exp++;
 8018c18:	7bbb      	ldrb	r3, [r7, #14]
 8018c1a:	3301      	adds	r3, #1
 8018c1c:	73bb      	strb	r3, [r7, #14]
        while( mant > 31 )
 8018c1e:	7bfb      	ldrb	r3, [r7, #15]
 8018c20:	2b1f      	cmp	r3, #31
 8018c22:	d8f6      	bhi.n	8018c12 <SUBGRF_SetLoRaSymbNumTimeout+0x2c>
        }

        reg = exp + ( mant << 3 );
 8018c24:	7bfb      	ldrb	r3, [r7, #15]
 8018c26:	00db      	lsls	r3, r3, #3
 8018c28:	b2da      	uxtb	r2, r3
 8018c2a:	7bbb      	ldrb	r3, [r7, #14]
 8018c2c:	4413      	add	r3, r2
 8018c2e:	737b      	strb	r3, [r7, #13]
        SUBGRF_WriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
 8018c30:	7b7b      	ldrb	r3, [r7, #13]
 8018c32:	4619      	mov	r1, r3
 8018c34:	f240 7006 	movw	r0, #1798	@ 0x706
 8018c38:	f000 fc7e 	bl	8019538 <SUBGRF_WriteRegister>
    }
}
 8018c3c:	bf00      	nop
 8018c3e:	3710      	adds	r7, #16
 8018c40:	46bd      	mov	sp, r7
 8018c42:	bd80      	pop	{r7, pc}

08018c44 <SUBGRF_SetRegulatorMode>:

void SUBGRF_SetRegulatorMode( void )
{
 8018c44:	b580      	push	{r7, lr}
 8018c46:	b082      	sub	sp, #8
 8018c48:	af00      	add	r7, sp, #0
    RadioRegulatorMode_t mode;

    if ( ( 1UL == RBI_IsDCDC() ) && ( 1UL == DCDC_ENABLE ) )
 8018c4a:	f7f1 fc83 	bl	800a554 <RBI_IsDCDC>
 8018c4e:	4603      	mov	r3, r0
 8018c50:	2b01      	cmp	r3, #1
 8018c52:	d102      	bne.n	8018c5a <SUBGRF_SetRegulatorMode+0x16>
    {
        mode = USE_DCDC ;
 8018c54:	2301      	movs	r3, #1
 8018c56:	71fb      	strb	r3, [r7, #7]
 8018c58:	e001      	b.n	8018c5e <SUBGRF_SetRegulatorMode+0x1a>
    }
    else
    {
        mode = USE_LDO ;
 8018c5a:	2300      	movs	r3, #0
 8018c5c:	71fb      	strb	r3, [r7, #7]
    }
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 8018c5e:	1dfb      	adds	r3, r7, #7
 8018c60:	2201      	movs	r2, #1
 8018c62:	4619      	mov	r1, r3
 8018c64:	2096      	movs	r0, #150	@ 0x96
 8018c66:	f000 fd31 	bl	80196cc <SUBGRF_WriteCommand>
}
 8018c6a:	bf00      	nop
 8018c6c:	3708      	adds	r7, #8
 8018c6e:	46bd      	mov	sp, r7
 8018c70:	bd80      	pop	{r7, pc}

08018c72 <SUBGRF_Calibrate>:

void SUBGRF_Calibrate( CalibrationParams_t calibParam )
{
 8018c72:	b580      	push	{r7, lr}
 8018c74:	b084      	sub	sp, #16
 8018c76:	af00      	add	r7, sp, #0
 8018c78:	7138      	strb	r0, [r7, #4]
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8018c7a:	793b      	ldrb	r3, [r7, #4]
 8018c7c:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8018c80:	b2db      	uxtb	r3, r3
 8018c82:	019b      	lsls	r3, r3, #6
 8018c84:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 8018c86:	793b      	ldrb	r3, [r7, #4]
 8018c88:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8018c8c:	b2db      	uxtb	r3, r3
 8018c8e:	015b      	lsls	r3, r3, #5
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8018c90:	b25b      	sxtb	r3, r3
 8018c92:	4313      	orrs	r3, r2
 8018c94:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 8018c96:	793b      	ldrb	r3, [r7, #4]
 8018c98:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8018c9c:	b2db      	uxtb	r3, r3
 8018c9e:	011b      	lsls	r3, r3, #4
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 8018ca0:	b25b      	sxtb	r3, r3
 8018ca2:	4313      	orrs	r3, r2
 8018ca4:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 8018ca6:	793b      	ldrb	r3, [r7, #4]
 8018ca8:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8018cac:	b2db      	uxtb	r3, r3
 8018cae:	00db      	lsls	r3, r3, #3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 8018cb0:	b25b      	sxtb	r3, r3
 8018cb2:	4313      	orrs	r3, r2
 8018cb4:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 8018cb6:	793b      	ldrb	r3, [r7, #4]
 8018cb8:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8018cbc:	b2db      	uxtb	r3, r3
 8018cbe:	009b      	lsls	r3, r3, #2
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 8018cc0:	b25b      	sxtb	r3, r3
 8018cc2:	4313      	orrs	r3, r2
 8018cc4:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 8018cc6:	793b      	ldrb	r3, [r7, #4]
 8018cc8:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8018ccc:	b2db      	uxtb	r3, r3
 8018cce:	005b      	lsls	r3, r3, #1
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 8018cd0:	b25b      	sxtb	r3, r3
 8018cd2:	4313      	orrs	r3, r2
 8018cd4:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 8018cd6:	793b      	ldrb	r3, [r7, #4]
 8018cd8:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8018cdc:	b2db      	uxtb	r3, r3
 8018cde:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 8018ce0:	4313      	orrs	r3, r2
 8018ce2:	b25b      	sxtb	r3, r3
 8018ce4:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8018ce6:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 8018ce8:	f107 030f 	add.w	r3, r7, #15
 8018cec:	2201      	movs	r2, #1
 8018cee:	4619      	mov	r1, r3
 8018cf0:	2089      	movs	r0, #137	@ 0x89
 8018cf2:	f000 fceb 	bl	80196cc <SUBGRF_WriteCommand>
}
 8018cf6:	bf00      	nop
 8018cf8:	3710      	adds	r7, #16
 8018cfa:	46bd      	mov	sp, r7
 8018cfc:	bd80      	pop	{r7, pc}
	...

08018d00 <SUBGRF_CalibrateImage>:

void SUBGRF_CalibrateImage( uint32_t freq )
{
 8018d00:	b580      	push	{r7, lr}
 8018d02:	b084      	sub	sp, #16
 8018d04:	af00      	add	r7, sp, #0
 8018d06:	6078      	str	r0, [r7, #4]
    uint8_t calFreq[2];

    if( freq > 900000000 )
 8018d08:	687b      	ldr	r3, [r7, #4]
 8018d0a:	4a1d      	ldr	r2, [pc, #116]	@ (8018d80 <SUBGRF_CalibrateImage+0x80>)
 8018d0c:	4293      	cmp	r3, r2
 8018d0e:	d904      	bls.n	8018d1a <SUBGRF_CalibrateImage+0x1a>
    {
        calFreq[0] = 0xE1;
 8018d10:	23e1      	movs	r3, #225	@ 0xe1
 8018d12:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xE9;
 8018d14:	23e9      	movs	r3, #233	@ 0xe9
 8018d16:	737b      	strb	r3, [r7, #13]
 8018d18:	e027      	b.n	8018d6a <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 850000000 )
 8018d1a:	687b      	ldr	r3, [r7, #4]
 8018d1c:	4a19      	ldr	r2, [pc, #100]	@ (8018d84 <SUBGRF_CalibrateImage+0x84>)
 8018d1e:	4293      	cmp	r3, r2
 8018d20:	d904      	bls.n	8018d2c <SUBGRF_CalibrateImage+0x2c>
    {
        calFreq[0] = 0xD7;
 8018d22:	23d7      	movs	r3, #215	@ 0xd7
 8018d24:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xDB;
 8018d26:	23db      	movs	r3, #219	@ 0xdb
 8018d28:	737b      	strb	r3, [r7, #13]
 8018d2a:	e01e      	b.n	8018d6a <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 770000000 )
 8018d2c:	687b      	ldr	r3, [r7, #4]
 8018d2e:	4a16      	ldr	r2, [pc, #88]	@ (8018d88 <SUBGRF_CalibrateImage+0x88>)
 8018d30:	4293      	cmp	r3, r2
 8018d32:	d904      	bls.n	8018d3e <SUBGRF_CalibrateImage+0x3e>
    {
        calFreq[0] = 0xC1;
 8018d34:	23c1      	movs	r3, #193	@ 0xc1
 8018d36:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xC5;
 8018d38:	23c5      	movs	r3, #197	@ 0xc5
 8018d3a:	737b      	strb	r3, [r7, #13]
 8018d3c:	e015      	b.n	8018d6a <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 460000000 )
 8018d3e:	687b      	ldr	r3, [r7, #4]
 8018d40:	4a12      	ldr	r2, [pc, #72]	@ (8018d8c <SUBGRF_CalibrateImage+0x8c>)
 8018d42:	4293      	cmp	r3, r2
 8018d44:	d904      	bls.n	8018d50 <SUBGRF_CalibrateImage+0x50>
    {
        calFreq[0] = 0x75;
 8018d46:	2375      	movs	r3, #117	@ 0x75
 8018d48:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x81;
 8018d4a:	2381      	movs	r3, #129	@ 0x81
 8018d4c:	737b      	strb	r3, [r7, #13]
 8018d4e:	e00c      	b.n	8018d6a <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 425000000 )
 8018d50:	687b      	ldr	r3, [r7, #4]
 8018d52:	4a0f      	ldr	r2, [pc, #60]	@ (8018d90 <SUBGRF_CalibrateImage+0x90>)
 8018d54:	4293      	cmp	r3, r2
 8018d56:	d904      	bls.n	8018d62 <SUBGRF_CalibrateImage+0x62>
    {
        calFreq[0] = 0x6B;
 8018d58:	236b      	movs	r3, #107	@ 0x6b
 8018d5a:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x6F;
 8018d5c:	236f      	movs	r3, #111	@ 0x6f
 8018d5e:	737b      	strb	r3, [r7, #13]
 8018d60:	e003      	b.n	8018d6a <SUBGRF_CalibrateImage+0x6a>
    }
    else /* freq <= 425000000*/
    {
        /* [ 156MHz - 171MHz ] */
        calFreq[0] = 0x29;
 8018d62:	2329      	movs	r3, #41	@ 0x29
 8018d64:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x2B ;
 8018d66:	232b      	movs	r3, #43	@ 0x2b
 8018d68:	737b      	strb	r3, [r7, #13]
    }
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 8018d6a:	f107 030c 	add.w	r3, r7, #12
 8018d6e:	2202      	movs	r2, #2
 8018d70:	4619      	mov	r1, r3
 8018d72:	2098      	movs	r0, #152	@ 0x98
 8018d74:	f000 fcaa 	bl	80196cc <SUBGRF_WriteCommand>
}
 8018d78:	bf00      	nop
 8018d7a:	3710      	adds	r7, #16
 8018d7c:	46bd      	mov	sp, r7
 8018d7e:	bd80      	pop	{r7, pc}
 8018d80:	35a4e900 	.word	0x35a4e900
 8018d84:	32a9f880 	.word	0x32a9f880
 8018d88:	2de54480 	.word	0x2de54480
 8018d8c:	1b6b0b00 	.word	0x1b6b0b00
 8018d90:	1954fc40 	.word	0x1954fc40

08018d94 <SUBGRF_SetPaConfig>:

void SUBGRF_SetPaConfig( uint8_t paDutyCycle, uint8_t hpMax, uint8_t deviceSel, uint8_t paLut )
{
 8018d94:	b590      	push	{r4, r7, lr}
 8018d96:	b085      	sub	sp, #20
 8018d98:	af00      	add	r7, sp, #0
 8018d9a:	4604      	mov	r4, r0
 8018d9c:	4608      	mov	r0, r1
 8018d9e:	4611      	mov	r1, r2
 8018da0:	461a      	mov	r2, r3
 8018da2:	4623      	mov	r3, r4
 8018da4:	71fb      	strb	r3, [r7, #7]
 8018da6:	4603      	mov	r3, r0
 8018da8:	71bb      	strb	r3, [r7, #6]
 8018daa:	460b      	mov	r3, r1
 8018dac:	717b      	strb	r3, [r7, #5]
 8018dae:	4613      	mov	r3, r2
 8018db0:	713b      	strb	r3, [r7, #4]
    uint8_t buf[4];

    buf[0] = paDutyCycle;
 8018db2:	79fb      	ldrb	r3, [r7, #7]
 8018db4:	733b      	strb	r3, [r7, #12]
    buf[1] = hpMax;
 8018db6:	79bb      	ldrb	r3, [r7, #6]
 8018db8:	737b      	strb	r3, [r7, #13]
    buf[2] = deviceSel;
 8018dba:	797b      	ldrb	r3, [r7, #5]
 8018dbc:	73bb      	strb	r3, [r7, #14]
    buf[3] = paLut;
 8018dbe:	793b      	ldrb	r3, [r7, #4]
 8018dc0:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 8018dc2:	f107 030c 	add.w	r3, r7, #12
 8018dc6:	2204      	movs	r2, #4
 8018dc8:	4619      	mov	r1, r3
 8018dca:	2095      	movs	r0, #149	@ 0x95
 8018dcc:	f000 fc7e 	bl	80196cc <SUBGRF_WriteCommand>
}
 8018dd0:	bf00      	nop
 8018dd2:	3714      	adds	r7, #20
 8018dd4:	46bd      	mov	sp, r7
 8018dd6:	bd90      	pop	{r4, r7, pc}

08018dd8 <SUBGRF_SetDioIrqParams>:
{
    SUBGRF_WriteCommand( RADIO_SET_TXFALLBACKMODE, &fallbackMode, 1 );
}

void SUBGRF_SetDioIrqParams( uint16_t irqMask, uint16_t dio1Mask, uint16_t dio2Mask, uint16_t dio3Mask )
{
 8018dd8:	b590      	push	{r4, r7, lr}
 8018dda:	b085      	sub	sp, #20
 8018ddc:	af00      	add	r7, sp, #0
 8018dde:	4604      	mov	r4, r0
 8018de0:	4608      	mov	r0, r1
 8018de2:	4611      	mov	r1, r2
 8018de4:	461a      	mov	r2, r3
 8018de6:	4623      	mov	r3, r4
 8018de8:	80fb      	strh	r3, [r7, #6]
 8018dea:	4603      	mov	r3, r0
 8018dec:	80bb      	strh	r3, [r7, #4]
 8018dee:	460b      	mov	r3, r1
 8018df0:	807b      	strh	r3, [r7, #2]
 8018df2:	4613      	mov	r3, r2
 8018df4:	803b      	strh	r3, [r7, #0]
    uint8_t buf[8];

    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 8018df6:	88fb      	ldrh	r3, [r7, #6]
 8018df8:	0a1b      	lsrs	r3, r3, #8
 8018dfa:	b29b      	uxth	r3, r3
 8018dfc:	b2db      	uxtb	r3, r3
 8018dfe:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 8018e00:	88fb      	ldrh	r3, [r7, #6]
 8018e02:	b2db      	uxtb	r3, r3
 8018e04:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 8018e06:	88bb      	ldrh	r3, [r7, #4]
 8018e08:	0a1b      	lsrs	r3, r3, #8
 8018e0a:	b29b      	uxth	r3, r3
 8018e0c:	b2db      	uxtb	r3, r3
 8018e0e:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 8018e10:	88bb      	ldrh	r3, [r7, #4]
 8018e12:	b2db      	uxtb	r3, r3
 8018e14:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 8018e16:	887b      	ldrh	r3, [r7, #2]
 8018e18:	0a1b      	lsrs	r3, r3, #8
 8018e1a:	b29b      	uxth	r3, r3
 8018e1c:	b2db      	uxtb	r3, r3
 8018e1e:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 8018e20:	887b      	ldrh	r3, [r7, #2]
 8018e22:	b2db      	uxtb	r3, r3
 8018e24:	737b      	strb	r3, [r7, #13]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 8018e26:	883b      	ldrh	r3, [r7, #0]
 8018e28:	0a1b      	lsrs	r3, r3, #8
 8018e2a:	b29b      	uxth	r3, r3
 8018e2c:	b2db      	uxtb	r3, r3
 8018e2e:	73bb      	strb	r3, [r7, #14]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 8018e30:	883b      	ldrh	r3, [r7, #0]
 8018e32:	b2db      	uxtb	r3, r3
 8018e34:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 8018e36:	f107 0308 	add.w	r3, r7, #8
 8018e3a:	2208      	movs	r2, #8
 8018e3c:	4619      	mov	r1, r3
 8018e3e:	2008      	movs	r0, #8
 8018e40:	f000 fc44 	bl	80196cc <SUBGRF_WriteCommand>
}
 8018e44:	bf00      	nop
 8018e46:	3714      	adds	r7, #20
 8018e48:	46bd      	mov	sp, r7
 8018e4a:	bd90      	pop	{r4, r7, pc}

08018e4c <SUBGRF_SetTcxoMode>:
    SUBGRF_ReadCommand( RADIO_GET_IRQSTATUS, irqStatus, 2 );
    return ( irqStatus[0] << 8 ) | irqStatus[1];
}

void SUBGRF_SetTcxoMode (RadioTcxoCtrlVoltage_t tcxoVoltage, uint32_t timeout )
{
 8018e4c:	b580      	push	{r7, lr}
 8018e4e:	b084      	sub	sp, #16
 8018e50:	af00      	add	r7, sp, #0
 8018e52:	4603      	mov	r3, r0
 8018e54:	6039      	str	r1, [r7, #0]
 8018e56:	71fb      	strb	r3, [r7, #7]
    uint8_t buf[4];

    buf[0] = tcxoVoltage & 0x07;
 8018e58:	79fb      	ldrb	r3, [r7, #7]
 8018e5a:	f003 0307 	and.w	r3, r3, #7
 8018e5e:	b2db      	uxtb	r3, r3
 8018e60:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8018e62:	683b      	ldr	r3, [r7, #0]
 8018e64:	0c1b      	lsrs	r3, r3, #16
 8018e66:	b2db      	uxtb	r3, r3
 8018e68:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8018e6a:	683b      	ldr	r3, [r7, #0]
 8018e6c:	0a1b      	lsrs	r3, r3, #8
 8018e6e:	b2db      	uxtb	r3, r3
 8018e70:	73bb      	strb	r3, [r7, #14]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 8018e72:	683b      	ldr	r3, [r7, #0]
 8018e74:	b2db      	uxtb	r3, r3
 8018e76:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 8018e78:	f107 030c 	add.w	r3, r7, #12
 8018e7c:	2204      	movs	r2, #4
 8018e7e:	4619      	mov	r1, r3
 8018e80:	2097      	movs	r0, #151	@ 0x97
 8018e82:	f000 fc23 	bl	80196cc <SUBGRF_WriteCommand>
}
 8018e86:	bf00      	nop
 8018e88:	3710      	adds	r7, #16
 8018e8a:	46bd      	mov	sp, r7
 8018e8c:	bd80      	pop	{r7, pc}
	...

08018e90 <SUBGRF_SetRfFrequency>:

void SUBGRF_SetRfFrequency( uint32_t frequency )
{
 8018e90:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8018e94:	b084      	sub	sp, #16
 8018e96:	af00      	add	r7, sp, #0
 8018e98:	6078      	str	r0, [r7, #4]
    uint8_t buf[4];
    uint32_t chan = 0;
 8018e9a:	2300      	movs	r3, #0
 8018e9c:	60fb      	str	r3, [r7, #12]

    if( ImageCalibrated == false )
 8018e9e:	4b1d      	ldr	r3, [pc, #116]	@ (8018f14 <SUBGRF_SetRfFrequency+0x84>)
 8018ea0:	781b      	ldrb	r3, [r3, #0]
 8018ea2:	f083 0301 	eor.w	r3, r3, #1
 8018ea6:	b2db      	uxtb	r3, r3
 8018ea8:	2b00      	cmp	r3, #0
 8018eaa:	d005      	beq.n	8018eb8 <SUBGRF_SetRfFrequency+0x28>
    {
        SUBGRF_CalibrateImage( frequency );
 8018eac:	6878      	ldr	r0, [r7, #4]
 8018eae:	f7ff ff27 	bl	8018d00 <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 8018eb2:	4b18      	ldr	r3, [pc, #96]	@ (8018f14 <SUBGRF_SetRfFrequency+0x84>)
 8018eb4:	2201      	movs	r2, #1
 8018eb6:	701a      	strb	r2, [r3, #0]
    }
    SX_FREQ_TO_CHANNEL(chan, frequency);
 8018eb8:	687b      	ldr	r3, [r7, #4]
 8018eba:	2200      	movs	r2, #0
 8018ebc:	461c      	mov	r4, r3
 8018ebe:	4615      	mov	r5, r2
 8018ec0:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 8018ec4:	ea4f 6844 	mov.w	r8, r4, lsl #25
 8018ec8:	4a13      	ldr	r2, [pc, #76]	@ (8018f18 <SUBGRF_SetRfFrequency+0x88>)
 8018eca:	f04f 0300 	mov.w	r3, #0
 8018ece:	4640      	mov	r0, r8
 8018ed0:	4649      	mov	r1, r9
 8018ed2:	f7e7 fcf9 	bl	80008c8 <__aeabi_uldivmod>
 8018ed6:	4602      	mov	r2, r0
 8018ed8:	460b      	mov	r3, r1
 8018eda:	4613      	mov	r3, r2
 8018edc:	60fb      	str	r3, [r7, #12]
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 8018ede:	68fb      	ldr	r3, [r7, #12]
 8018ee0:	0e1b      	lsrs	r3, r3, #24
 8018ee2:	b2db      	uxtb	r3, r3
 8018ee4:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 8018ee6:	68fb      	ldr	r3, [r7, #12]
 8018ee8:	0c1b      	lsrs	r3, r3, #16
 8018eea:	b2db      	uxtb	r3, r3
 8018eec:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 8018eee:	68fb      	ldr	r3, [r7, #12]
 8018ef0:	0a1b      	lsrs	r3, r3, #8
 8018ef2:	b2db      	uxtb	r3, r3
 8018ef4:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( chan & 0xFF );
 8018ef6:	68fb      	ldr	r3, [r7, #12]
 8018ef8:	b2db      	uxtb	r3, r3
 8018efa:	72fb      	strb	r3, [r7, #11]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 8018efc:	f107 0308 	add.w	r3, r7, #8
 8018f00:	2204      	movs	r2, #4
 8018f02:	4619      	mov	r1, r3
 8018f04:	2086      	movs	r0, #134	@ 0x86
 8018f06:	f000 fbe1 	bl	80196cc <SUBGRF_WriteCommand>
}
 8018f0a:	bf00      	nop
 8018f0c:	3710      	adds	r7, #16
 8018f0e:	46bd      	mov	sp, r7
 8018f10:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8018f14:	20001580 	.word	0x20001580
 8018f18:	01e84800 	.word	0x01e84800

08018f1c <SUBGRF_SetPacketType>:

void SUBGRF_SetPacketType( RadioPacketTypes_t packetType )
{
 8018f1c:	b580      	push	{r7, lr}
 8018f1e:	b082      	sub	sp, #8
 8018f20:	af00      	add	r7, sp, #0
 8018f22:	4603      	mov	r3, r0
 8018f24:	71fb      	strb	r3, [r7, #7]
    // Save packet type internally to avoid questioning the radio
    PacketType = packetType;
 8018f26:	79fa      	ldrb	r2, [r7, #7]
 8018f28:	4b09      	ldr	r3, [pc, #36]	@ (8018f50 <SUBGRF_SetPacketType+0x34>)
 8018f2a:	701a      	strb	r2, [r3, #0]

    if( packetType == PACKET_TYPE_GFSK )
 8018f2c:	79fb      	ldrb	r3, [r7, #7]
 8018f2e:	2b00      	cmp	r3, #0
 8018f30:	d104      	bne.n	8018f3c <SUBGRF_SetPacketType+0x20>
    {
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 8018f32:	2100      	movs	r1, #0
 8018f34:	f240 60ac 	movw	r0, #1708	@ 0x6ac
 8018f38:	f000 fafe 	bl	8019538 <SUBGRF_WriteRegister>
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 8018f3c:	1dfb      	adds	r3, r7, #7
 8018f3e:	2201      	movs	r2, #1
 8018f40:	4619      	mov	r1, r3
 8018f42:	208a      	movs	r0, #138	@ 0x8a
 8018f44:	f000 fbc2 	bl	80196cc <SUBGRF_WriteCommand>
}
 8018f48:	bf00      	nop
 8018f4a:	3708      	adds	r7, #8
 8018f4c:	46bd      	mov	sp, r7
 8018f4e:	bd80      	pop	{r7, pc}
 8018f50:	20001579 	.word	0x20001579

08018f54 <SUBGRF_GetPacketType>:

RadioPacketTypes_t SUBGRF_GetPacketType( void )
{
 8018f54:	b480      	push	{r7}
 8018f56:	af00      	add	r7, sp, #0
    return PacketType;
 8018f58:	4b02      	ldr	r3, [pc, #8]	@ (8018f64 <SUBGRF_GetPacketType+0x10>)
 8018f5a:	781b      	ldrb	r3, [r3, #0]
}
 8018f5c:	4618      	mov	r0, r3
 8018f5e:	46bd      	mov	sp, r7
 8018f60:	bc80      	pop	{r7}
 8018f62:	4770      	bx	lr
 8018f64:	20001579 	.word	0x20001579

08018f68 <SUBGRF_SetTxParams>:

void SUBGRF_SetTxParams( uint8_t paSelect, int8_t power, RadioRampTimes_t rampTime )
{
 8018f68:	b580      	push	{r7, lr}
 8018f6a:	b084      	sub	sp, #16
 8018f6c:	af00      	add	r7, sp, #0
 8018f6e:	4603      	mov	r3, r0
 8018f70:	71fb      	strb	r3, [r7, #7]
 8018f72:	460b      	mov	r3, r1
 8018f74:	71bb      	strb	r3, [r7, #6]
 8018f76:	4613      	mov	r3, r2
 8018f78:	717b      	strb	r3, [r7, #5]
    uint8_t buf[2];
    int32_t max_power;

    if (paSelect == RFO_LP)
 8018f7a:	79fb      	ldrb	r3, [r7, #7]
 8018f7c:	2b01      	cmp	r3, #1
 8018f7e:	d149      	bne.n	8019014 <SUBGRF_SetTxParams+0xac>
    {
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_LP_MAXPOWER);
 8018f80:	2000      	movs	r0, #0
 8018f82:	f7f1 faf2 	bl	800a56a <RBI_GetRFOMaxPowerConfig>
 8018f86:	60f8      	str	r0, [r7, #12]
        if (power >  max_power)
 8018f88:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8018f8c:	68fa      	ldr	r2, [r7, #12]
 8018f8e:	429a      	cmp	r2, r3
 8018f90:	da01      	bge.n	8018f96 <SUBGRF_SetTxParams+0x2e>
        {
          power = max_power;
 8018f92:	68fb      	ldr	r3, [r7, #12]
 8018f94:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 14)
 8018f96:	68fb      	ldr	r3, [r7, #12]
 8018f98:	2b0e      	cmp	r3, #14
 8018f9a:	d10e      	bne.n	8018fba <SUBGRF_SetTxParams+0x52>
        {
            SUBGRF_SetPaConfig(0x04, 0x00, 0x01, 0x01);
 8018f9c:	2301      	movs	r3, #1
 8018f9e:	2201      	movs	r2, #1
 8018fa0:	2100      	movs	r1, #0
 8018fa2:	2004      	movs	r0, #4
 8018fa4:	f7ff fef6 	bl	8018d94 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 8018fa8:	79ba      	ldrb	r2, [r7, #6]
 8018faa:	68fb      	ldr	r3, [r7, #12]
 8018fac:	b2db      	uxtb	r3, r3
 8018fae:	1ad3      	subs	r3, r2, r3
 8018fb0:	b2db      	uxtb	r3, r3
 8018fb2:	330e      	adds	r3, #14
 8018fb4:	b2db      	uxtb	r3, r3
 8018fb6:	71bb      	strb	r3, [r7, #6]
 8018fb8:	e01f      	b.n	8018ffa <SUBGRF_SetTxParams+0x92>
        }
        else if (max_power == 10)
 8018fba:	68fb      	ldr	r3, [r7, #12]
 8018fbc:	2b0a      	cmp	r3, #10
 8018fbe:	d10e      	bne.n	8018fde <SUBGRF_SetTxParams+0x76>
        {
            SUBGRF_SetPaConfig(0x01, 0x00, 0x01, 0x01);
 8018fc0:	2301      	movs	r3, #1
 8018fc2:	2201      	movs	r2, #1
 8018fc4:	2100      	movs	r1, #0
 8018fc6:	2001      	movs	r0, #1
 8018fc8:	f7ff fee4 	bl	8018d94 <SUBGRF_SetPaConfig>
            power = 0x0D - (max_power - power);
 8018fcc:	79ba      	ldrb	r2, [r7, #6]
 8018fce:	68fb      	ldr	r3, [r7, #12]
 8018fd0:	b2db      	uxtb	r3, r3
 8018fd2:	1ad3      	subs	r3, r2, r3
 8018fd4:	b2db      	uxtb	r3, r3
 8018fd6:	330d      	adds	r3, #13
 8018fd8:	b2db      	uxtb	r3, r3
 8018fda:	71bb      	strb	r3, [r7, #6]
 8018fdc:	e00d      	b.n	8018ffa <SUBGRF_SetTxParams+0x92>
        }
        else /*default 15dBm*/
        {
            SUBGRF_SetPaConfig(0x07, 0x00, 0x01, 0x01);
 8018fde:	2301      	movs	r3, #1
 8018fe0:	2201      	movs	r2, #1
 8018fe2:	2100      	movs	r1, #0
 8018fe4:	2007      	movs	r0, #7
 8018fe6:	f7ff fed5 	bl	8018d94 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 8018fea:	79ba      	ldrb	r2, [r7, #6]
 8018fec:	68fb      	ldr	r3, [r7, #12]
 8018fee:	b2db      	uxtb	r3, r3
 8018ff0:	1ad3      	subs	r3, r2, r3
 8018ff2:	b2db      	uxtb	r3, r3
 8018ff4:	330e      	adds	r3, #14
 8018ff6:	b2db      	uxtb	r3, r3
 8018ff8:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -17)
 8018ffa:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8018ffe:	f113 0f11 	cmn.w	r3, #17
 8019002:	da01      	bge.n	8019008 <SUBGRF_SetTxParams+0xa0>
        {
            power = -17;
 8019004:	23ef      	movs	r3, #239	@ 0xef
 8019006:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x18);   /* current max is 80 mA for the whole device*/
 8019008:	2118      	movs	r1, #24
 801900a:	f640 00e7 	movw	r0, #2279	@ 0x8e7
 801900e:	f000 fa93 	bl	8019538 <SUBGRF_WriteRegister>
 8019012:	e067      	b.n	80190e4 <SUBGRF_SetTxParams+0x17c>
    }
    else /* rfo_hp*/
    {
        /* WORKAROUND - Better Resistance of the RFO High Power Tx to Antenna Mismatch, see STM32WL Erratasheet*/
        SUBGRF_WriteRegister(REG_TX_CLAMP, SUBGRF_ReadRegister(REG_TX_CLAMP) | (0x0F << 1));
 8019014:	f640 00d8 	movw	r0, #2264	@ 0x8d8
 8019018:	f000 fab0 	bl	801957c <SUBGRF_ReadRegister>
 801901c:	4603      	mov	r3, r0
 801901e:	f043 031e 	orr.w	r3, r3, #30
 8019022:	b2db      	uxtb	r3, r3
 8019024:	4619      	mov	r1, r3
 8019026:	f640 00d8 	movw	r0, #2264	@ 0x8d8
 801902a:	f000 fa85 	bl	8019538 <SUBGRF_WriteRegister>
        /* WORKAROUND END*/
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_HP_MAXPOWER);
 801902e:	2001      	movs	r0, #1
 8019030:	f7f1 fa9b 	bl	800a56a <RBI_GetRFOMaxPowerConfig>
 8019034:	60f8      	str	r0, [r7, #12]
        if (power > max_power)
 8019036:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801903a:	68fa      	ldr	r2, [r7, #12]
 801903c:	429a      	cmp	r2, r3
 801903e:	da01      	bge.n	8019044 <SUBGRF_SetTxParams+0xdc>
        {
            power = max_power;
 8019040:	68fb      	ldr	r3, [r7, #12]
 8019042:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 20)
 8019044:	68fb      	ldr	r3, [r7, #12]
 8019046:	2b14      	cmp	r3, #20
 8019048:	d10e      	bne.n	8019068 <SUBGRF_SetTxParams+0x100>
        {
            SUBGRF_SetPaConfig(0x03, 0x05, 0x00, 0x01);
 801904a:	2301      	movs	r3, #1
 801904c:	2200      	movs	r2, #0
 801904e:	2105      	movs	r1, #5
 8019050:	2003      	movs	r0, #3
 8019052:	f7ff fe9f 	bl	8018d94 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 8019056:	79ba      	ldrb	r2, [r7, #6]
 8019058:	68fb      	ldr	r3, [r7, #12]
 801905a:	b2db      	uxtb	r3, r3
 801905c:	1ad3      	subs	r3, r2, r3
 801905e:	b2db      	uxtb	r3, r3
 8019060:	3316      	adds	r3, #22
 8019062:	b2db      	uxtb	r3, r3
 8019064:	71bb      	strb	r3, [r7, #6]
 8019066:	e031      	b.n	80190cc <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 17)
 8019068:	68fb      	ldr	r3, [r7, #12]
 801906a:	2b11      	cmp	r3, #17
 801906c:	d10e      	bne.n	801908c <SUBGRF_SetTxParams+0x124>
        {
            SUBGRF_SetPaConfig(0x02, 0x03, 0x00, 0x01);
 801906e:	2301      	movs	r3, #1
 8019070:	2200      	movs	r2, #0
 8019072:	2103      	movs	r1, #3
 8019074:	2002      	movs	r0, #2
 8019076:	f7ff fe8d 	bl	8018d94 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 801907a:	79ba      	ldrb	r2, [r7, #6]
 801907c:	68fb      	ldr	r3, [r7, #12]
 801907e:	b2db      	uxtb	r3, r3
 8019080:	1ad3      	subs	r3, r2, r3
 8019082:	b2db      	uxtb	r3, r3
 8019084:	3316      	adds	r3, #22
 8019086:	b2db      	uxtb	r3, r3
 8019088:	71bb      	strb	r3, [r7, #6]
 801908a:	e01f      	b.n	80190cc <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 14)
 801908c:	68fb      	ldr	r3, [r7, #12]
 801908e:	2b0e      	cmp	r3, #14
 8019090:	d10e      	bne.n	80190b0 <SUBGRF_SetTxParams+0x148>
        {
            SUBGRF_SetPaConfig(0x02, 0x02, 0x00, 0x01);
 8019092:	2301      	movs	r3, #1
 8019094:	2200      	movs	r2, #0
 8019096:	2102      	movs	r1, #2
 8019098:	2002      	movs	r0, #2
 801909a:	f7ff fe7b 	bl	8018d94 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 801909e:	79ba      	ldrb	r2, [r7, #6]
 80190a0:	68fb      	ldr	r3, [r7, #12]
 80190a2:	b2db      	uxtb	r3, r3
 80190a4:	1ad3      	subs	r3, r2, r3
 80190a6:	b2db      	uxtb	r3, r3
 80190a8:	330e      	adds	r3, #14
 80190aa:	b2db      	uxtb	r3, r3
 80190ac:	71bb      	strb	r3, [r7, #6]
 80190ae:	e00d      	b.n	80190cc <SUBGRF_SetTxParams+0x164>
        }
        else /*22dBm*/
        {
            SUBGRF_SetPaConfig(0x04, 0x07, 0x00, 0x01);
 80190b0:	2301      	movs	r3, #1
 80190b2:	2200      	movs	r2, #0
 80190b4:	2107      	movs	r1, #7
 80190b6:	2004      	movs	r0, #4
 80190b8:	f7ff fe6c 	bl	8018d94 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 80190bc:	79ba      	ldrb	r2, [r7, #6]
 80190be:	68fb      	ldr	r3, [r7, #12]
 80190c0:	b2db      	uxtb	r3, r3
 80190c2:	1ad3      	subs	r3, r2, r3
 80190c4:	b2db      	uxtb	r3, r3
 80190c6:	3316      	adds	r3, #22
 80190c8:	b2db      	uxtb	r3, r3
 80190ca:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -9)
 80190cc:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80190d0:	f113 0f09 	cmn.w	r3, #9
 80190d4:	da01      	bge.n	80190da <SUBGRF_SetTxParams+0x172>
        {
            power = -9;
 80190d6:	23f7      	movs	r3, #247	@ 0xf7
 80190d8:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x38);   /*current max 160mA for the whole device*/
 80190da:	2138      	movs	r1, #56	@ 0x38
 80190dc:	f640 00e7 	movw	r0, #2279	@ 0x8e7
 80190e0:	f000 fa2a 	bl	8019538 <SUBGRF_WriteRegister>
    }
    buf[0] = power;
 80190e4:	79bb      	ldrb	r3, [r7, #6]
 80190e6:	723b      	strb	r3, [r7, #8]
    buf[1] = (uint8_t)rampTime;
 80190e8:	797b      	ldrb	r3, [r7, #5]
 80190ea:	727b      	strb	r3, [r7, #9]
    SUBGRF_WriteCommand(RADIO_SET_TXPARAMS, buf, 2);
 80190ec:	f107 0308 	add.w	r3, r7, #8
 80190f0:	2202      	movs	r2, #2
 80190f2:	4619      	mov	r1, r3
 80190f4:	208e      	movs	r0, #142	@ 0x8e
 80190f6:	f000 fae9 	bl	80196cc <SUBGRF_WriteCommand>
}
 80190fa:	bf00      	nop
 80190fc:	3710      	adds	r7, #16
 80190fe:	46bd      	mov	sp, r7
 8019100:	bd80      	pop	{r7, pc}
	...

08019104 <SUBGRF_SetModulationParams>:

void SUBGRF_SetModulationParams( ModulationParams_t *modulationParams )
{
 8019104:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8019108:	b086      	sub	sp, #24
 801910a:	af00      	add	r7, sp, #0
 801910c:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint32_t tempVal = 0;
 801910e:	2300      	movs	r3, #0
 8019110:	617b      	str	r3, [r7, #20]
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8019112:	4a61      	ldr	r2, [pc, #388]	@ (8019298 <SUBGRF_SetModulationParams+0x194>)
 8019114:	f107 0308 	add.w	r3, r7, #8
 8019118:	e892 0003 	ldmia.w	r2, {r0, r1}
 801911c:	e883 0003 	stmia.w	r3, {r0, r1}

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != modulationParams->PacketType )
 8019120:	687b      	ldr	r3, [r7, #4]
 8019122:	781a      	ldrb	r2, [r3, #0]
 8019124:	4b5d      	ldr	r3, [pc, #372]	@ (801929c <SUBGRF_SetModulationParams+0x198>)
 8019126:	781b      	ldrb	r3, [r3, #0]
 8019128:	429a      	cmp	r2, r3
 801912a:	d004      	beq.n	8019136 <SUBGRF_SetModulationParams+0x32>
    {
        SUBGRF_SetPacketType( modulationParams->PacketType );
 801912c:	687b      	ldr	r3, [r7, #4]
 801912e:	781b      	ldrb	r3, [r3, #0]
 8019130:	4618      	mov	r0, r3
 8019132:	f7ff fef3 	bl	8018f1c <SUBGRF_SetPacketType>
    }

    switch( modulationParams->PacketType )
 8019136:	687b      	ldr	r3, [r7, #4]
 8019138:	781b      	ldrb	r3, [r3, #0]
 801913a:	2b03      	cmp	r3, #3
 801913c:	f200 80a5 	bhi.w	801928a <SUBGRF_SetModulationParams+0x186>
 8019140:	a201      	add	r2, pc, #4	@ (adr r2, 8019148 <SUBGRF_SetModulationParams+0x44>)
 8019142:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019146:	bf00      	nop
 8019148:	08019159 	.word	0x08019159
 801914c:	08019219 	.word	0x08019219
 8019150:	080191db 	.word	0x080191db
 8019154:	08019247 	.word	0x08019247
    {
    case PACKET_TYPE_GFSK:
        n = 8;
 8019158:	2308      	movs	r3, #8
 801915a:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 801915c:	687b      	ldr	r3, [r7, #4]
 801915e:	685b      	ldr	r3, [r3, #4]
 8019160:	4a4f      	ldr	r2, [pc, #316]	@ (80192a0 <SUBGRF_SetModulationParams+0x19c>)
 8019162:	fbb2 f3f3 	udiv	r3, r2, r3
 8019166:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8019168:	697b      	ldr	r3, [r7, #20]
 801916a:	0c1b      	lsrs	r3, r3, #16
 801916c:	b2db      	uxtb	r3, r3
 801916e:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8019170:	697b      	ldr	r3, [r7, #20]
 8019172:	0a1b      	lsrs	r3, r3, #8
 8019174:	b2db      	uxtb	r3, r3
 8019176:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 8019178:	697b      	ldr	r3, [r7, #20]
 801917a:	b2db      	uxtb	r3, r3
 801917c:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 801917e:	687b      	ldr	r3, [r7, #4]
 8019180:	7b1b      	ldrb	r3, [r3, #12]
 8019182:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 8019184:	687b      	ldr	r3, [r7, #4]
 8019186:	7b5b      	ldrb	r3, [r3, #13]
 8019188:	733b      	strb	r3, [r7, #12]
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 801918a:	687b      	ldr	r3, [r7, #4]
 801918c:	689b      	ldr	r3, [r3, #8]
 801918e:	2200      	movs	r2, #0
 8019190:	461c      	mov	r4, r3
 8019192:	4615      	mov	r5, r2
 8019194:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 8019198:	ea4f 6844 	mov.w	r8, r4, lsl #25
 801919c:	4a41      	ldr	r2, [pc, #260]	@ (80192a4 <SUBGRF_SetModulationParams+0x1a0>)
 801919e:	f04f 0300 	mov.w	r3, #0
 80191a2:	4640      	mov	r0, r8
 80191a4:	4649      	mov	r1, r9
 80191a6:	f7e7 fb8f 	bl	80008c8 <__aeabi_uldivmod>
 80191aa:	4602      	mov	r2, r0
 80191ac:	460b      	mov	r3, r1
 80191ae:	4613      	mov	r3, r2
 80191b0:	617b      	str	r3, [r7, #20]
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 80191b2:	697b      	ldr	r3, [r7, #20]
 80191b4:	0c1b      	lsrs	r3, r3, #16
 80191b6:	b2db      	uxtb	r3, r3
 80191b8:	737b      	strb	r3, [r7, #13]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 80191ba:	697b      	ldr	r3, [r7, #20]
 80191bc:	0a1b      	lsrs	r3, r3, #8
 80191be:	b2db      	uxtb	r3, r3
 80191c0:	73bb      	strb	r3, [r7, #14]
        buf[7] = ( tempVal& 0xFF );
 80191c2:	697b      	ldr	r3, [r7, #20]
 80191c4:	b2db      	uxtb	r3, r3
 80191c6:	73fb      	strb	r3, [r7, #15]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 80191c8:	7cfb      	ldrb	r3, [r7, #19]
 80191ca:	b29a      	uxth	r2, r3
 80191cc:	f107 0308 	add.w	r3, r7, #8
 80191d0:	4619      	mov	r1, r3
 80191d2:	208b      	movs	r0, #139	@ 0x8b
 80191d4:	f000 fa7a 	bl	80196cc <SUBGRF_WriteCommand>
        break;
 80191d8:	e058      	b.n	801928c <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_BPSK:
        n = 4;
 80191da:	2304      	movs	r3, #4
 80191dc:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 80191de:	687b      	ldr	r3, [r7, #4]
 80191e0:	691b      	ldr	r3, [r3, #16]
 80191e2:	4a2f      	ldr	r2, [pc, #188]	@ (80192a0 <SUBGRF_SetModulationParams+0x19c>)
 80191e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80191e8:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 80191ea:	697b      	ldr	r3, [r7, #20]
 80191ec:	0c1b      	lsrs	r3, r3, #16
 80191ee:	b2db      	uxtb	r3, r3
 80191f0:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 80191f2:	697b      	ldr	r3, [r7, #20]
 80191f4:	0a1b      	lsrs	r3, r3, #8
 80191f6:	b2db      	uxtb	r3, r3
 80191f8:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 80191fa:	697b      	ldr	r3, [r7, #20]
 80191fc:	b2db      	uxtb	r3, r3
 80191fe:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 8019200:	687b      	ldr	r3, [r7, #4]
 8019202:	7d1b      	ldrb	r3, [r3, #20]
 8019204:	72fb      	strb	r3, [r7, #11]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8019206:	7cfb      	ldrb	r3, [r7, #19]
 8019208:	b29a      	uxth	r2, r3
 801920a:	f107 0308 	add.w	r3, r7, #8
 801920e:	4619      	mov	r1, r3
 8019210:	208b      	movs	r0, #139	@ 0x8b
 8019212:	f000 fa5b 	bl	80196cc <SUBGRF_WriteCommand>
        break;
 8019216:	e039      	b.n	801928c <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_LORA:
        n = 4;
 8019218:	2304      	movs	r3, #4
 801921a:	74fb      	strb	r3, [r7, #19]
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 801921c:	687b      	ldr	r3, [r7, #4]
 801921e:	7e1b      	ldrb	r3, [r3, #24]
 8019220:	723b      	strb	r3, [r7, #8]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 8019222:	687b      	ldr	r3, [r7, #4]
 8019224:	7e5b      	ldrb	r3, [r3, #25]
 8019226:	727b      	strb	r3, [r7, #9]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 8019228:	687b      	ldr	r3, [r7, #4]
 801922a:	7e9b      	ldrb	r3, [r3, #26]
 801922c:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 801922e:	687b      	ldr	r3, [r7, #4]
 8019230:	7edb      	ldrb	r3, [r3, #27]
 8019232:	72fb      	strb	r3, [r7, #11]

        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8019234:	7cfb      	ldrb	r3, [r7, #19]
 8019236:	b29a      	uxth	r2, r3
 8019238:	f107 0308 	add.w	r3, r7, #8
 801923c:	4619      	mov	r1, r3
 801923e:	208b      	movs	r0, #139	@ 0x8b
 8019240:	f000 fa44 	bl	80196cc <SUBGRF_WriteCommand>

        break;
 8019244:	e022      	b.n	801928c <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_GMSK:
        n = 5;
 8019246:	2305      	movs	r3, #5
 8019248:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 801924a:	687b      	ldr	r3, [r7, #4]
 801924c:	685b      	ldr	r3, [r3, #4]
 801924e:	4a14      	ldr	r2, [pc, #80]	@ (80192a0 <SUBGRF_SetModulationParams+0x19c>)
 8019250:	fbb2 f3f3 	udiv	r3, r2, r3
 8019254:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8019256:	697b      	ldr	r3, [r7, #20]
 8019258:	0c1b      	lsrs	r3, r3, #16
 801925a:	b2db      	uxtb	r3, r3
 801925c:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 801925e:	697b      	ldr	r3, [r7, #20]
 8019260:	0a1b      	lsrs	r3, r3, #8
 8019262:	b2db      	uxtb	r3, r3
 8019264:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 8019266:	697b      	ldr	r3, [r7, #20]
 8019268:	b2db      	uxtb	r3, r3
 801926a:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 801926c:	687b      	ldr	r3, [r7, #4]
 801926e:	7b1b      	ldrb	r3, [r3, #12]
 8019270:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 8019272:	687b      	ldr	r3, [r7, #4]
 8019274:	7b5b      	ldrb	r3, [r3, #13]
 8019276:	733b      	strb	r3, [r7, #12]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8019278:	7cfb      	ldrb	r3, [r7, #19]
 801927a:	b29a      	uxth	r2, r3
 801927c:	f107 0308 	add.w	r3, r7, #8
 8019280:	4619      	mov	r1, r3
 8019282:	208b      	movs	r0, #139	@ 0x8b
 8019284:	f000 fa22 	bl	80196cc <SUBGRF_WriteCommand>
        break;
 8019288:	e000      	b.n	801928c <SUBGRF_SetModulationParams+0x188>
    default:
    case PACKET_TYPE_NONE:
      break;
 801928a:	bf00      	nop
    }
}
 801928c:	bf00      	nop
 801928e:	3718      	adds	r7, #24
 8019290:	46bd      	mov	sp, r7
 8019292:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8019296:	bf00      	nop
 8019298:	0801b790 	.word	0x0801b790
 801929c:	20001579 	.word	0x20001579
 80192a0:	3d090000 	.word	0x3d090000
 80192a4:	01e84800 	.word	0x01e84800

080192a8 <SUBGRF_SetPacketParams>:

void SUBGRF_SetPacketParams( PacketParams_t *packetParams )
{
 80192a8:	b580      	push	{r7, lr}
 80192aa:	b086      	sub	sp, #24
 80192ac:	af00      	add	r7, sp, #0
 80192ae:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint8_t crcVal = 0;
 80192b0:	2300      	movs	r3, #0
 80192b2:	75bb      	strb	r3, [r7, #22]
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 80192b4:	4a48      	ldr	r2, [pc, #288]	@ (80193d8 <SUBGRF_SetPacketParams+0x130>)
 80192b6:	f107 030c 	add.w	r3, r7, #12
 80192ba:	ca07      	ldmia	r2, {r0, r1, r2}
 80192bc:	c303      	stmia	r3!, {r0, r1}
 80192be:	701a      	strb	r2, [r3, #0]

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != packetParams->PacketType )
 80192c0:	687b      	ldr	r3, [r7, #4]
 80192c2:	781a      	ldrb	r2, [r3, #0]
 80192c4:	4b45      	ldr	r3, [pc, #276]	@ (80193dc <SUBGRF_SetPacketParams+0x134>)
 80192c6:	781b      	ldrb	r3, [r3, #0]
 80192c8:	429a      	cmp	r2, r3
 80192ca:	d004      	beq.n	80192d6 <SUBGRF_SetPacketParams+0x2e>
    {
        SUBGRF_SetPacketType( packetParams->PacketType );
 80192cc:	687b      	ldr	r3, [r7, #4]
 80192ce:	781b      	ldrb	r3, [r3, #0]
 80192d0:	4618      	mov	r0, r3
 80192d2:	f7ff fe23 	bl	8018f1c <SUBGRF_SetPacketType>
    }

    switch( packetParams->PacketType )
 80192d6:	687b      	ldr	r3, [r7, #4]
 80192d8:	781b      	ldrb	r3, [r3, #0]
 80192da:	2b03      	cmp	r3, #3
 80192dc:	d878      	bhi.n	80193d0 <SUBGRF_SetPacketParams+0x128>
 80192de:	a201      	add	r2, pc, #4	@ (adr r2, 80192e4 <SUBGRF_SetPacketParams+0x3c>)
 80192e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80192e4:	080192f5 	.word	0x080192f5
 80192e8:	08019385 	.word	0x08019385
 80192ec:	08019379 	.word	0x08019379
 80192f0:	080192f5 	.word	0x080192f5
    {
    case PACKET_TYPE_GMSK:
    case PACKET_TYPE_GFSK:
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 80192f4:	687b      	ldr	r3, [r7, #4]
 80192f6:	7a5b      	ldrb	r3, [r3, #9]
 80192f8:	2bf1      	cmp	r3, #241	@ 0xf1
 80192fa:	d10a      	bne.n	8019312 <SUBGRF_SetPacketParams+0x6a>
        {
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 80192fc:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8019300:	f7ff faaa 	bl	8018858 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 8019304:	f248 0005 	movw	r0, #32773	@ 0x8005
 8019308:	f7ff fac6 	bl	8018898 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 801930c:	2302      	movs	r3, #2
 801930e:	75bb      	strb	r3, [r7, #22]
 8019310:	e011      	b.n	8019336 <SUBGRF_SetPacketParams+0x8e>
        }
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 8019312:	687b      	ldr	r3, [r7, #4]
 8019314:	7a5b      	ldrb	r3, [r3, #9]
 8019316:	2bf2      	cmp	r3, #242	@ 0xf2
 8019318:	d10a      	bne.n	8019330 <SUBGRF_SetPacketParams+0x88>
        {
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 801931a:	f641 500f 	movw	r0, #7439	@ 0x1d0f
 801931e:	f7ff fa9b 	bl	8018858 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 8019322:	f241 0021 	movw	r0, #4129	@ 0x1021
 8019326:	f7ff fab7 	bl	8018898 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 801932a:	2306      	movs	r3, #6
 801932c:	75bb      	strb	r3, [r7, #22]
 801932e:	e002      	b.n	8019336 <SUBGRF_SetPacketParams+0x8e>
        }
        else
        {
            crcVal = packetParams->Params.Gfsk.CrcLength;
 8019330:	687b      	ldr	r3, [r7, #4]
 8019332:	7a5b      	ldrb	r3, [r3, #9]
 8019334:	75bb      	strb	r3, [r7, #22]
        }
        n = 9;
 8019336:	2309      	movs	r3, #9
 8019338:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 801933a:	687b      	ldr	r3, [r7, #4]
 801933c:	885b      	ldrh	r3, [r3, #2]
 801933e:	0a1b      	lsrs	r3, r3, #8
 8019340:	b29b      	uxth	r3, r3
 8019342:	b2db      	uxtb	r3, r3
 8019344:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 8019346:	687b      	ldr	r3, [r7, #4]
 8019348:	885b      	ldrh	r3, [r3, #2]
 801934a:	b2db      	uxtb	r3, r3
 801934c:	737b      	strb	r3, [r7, #13]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 801934e:	687b      	ldr	r3, [r7, #4]
 8019350:	791b      	ldrb	r3, [r3, #4]
 8019352:	73bb      	strb	r3, [r7, #14]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 8019354:	687b      	ldr	r3, [r7, #4]
 8019356:	795b      	ldrb	r3, [r3, #5]
 8019358:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 801935a:	687b      	ldr	r3, [r7, #4]
 801935c:	799b      	ldrb	r3, [r3, #6]
 801935e:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 8019360:	687b      	ldr	r3, [r7, #4]
 8019362:	79db      	ldrb	r3, [r3, #7]
 8019364:	747b      	strb	r3, [r7, #17]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 8019366:	687b      	ldr	r3, [r7, #4]
 8019368:	7a1b      	ldrb	r3, [r3, #8]
 801936a:	74bb      	strb	r3, [r7, #18]
        buf[7] = crcVal;
 801936c:	7dbb      	ldrb	r3, [r7, #22]
 801936e:	74fb      	strb	r3, [r7, #19]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 8019370:	687b      	ldr	r3, [r7, #4]
 8019372:	7a9b      	ldrb	r3, [r3, #10]
 8019374:	753b      	strb	r3, [r7, #20]
        break;
 8019376:	e022      	b.n	80193be <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_BPSK:
        n = 1;
 8019378:	2301      	movs	r3, #1
 801937a:	75fb      	strb	r3, [r7, #23]
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 801937c:	687b      	ldr	r3, [r7, #4]
 801937e:	7b1b      	ldrb	r3, [r3, #12]
 8019380:	733b      	strb	r3, [r7, #12]
        break;
 8019382:	e01c      	b.n	80193be <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_LORA:
        n = 6;
 8019384:	2306      	movs	r3, #6
 8019386:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 8019388:	687b      	ldr	r3, [r7, #4]
 801938a:	89db      	ldrh	r3, [r3, #14]
 801938c:	0a1b      	lsrs	r3, r3, #8
 801938e:	b29b      	uxth	r3, r3
 8019390:	b2db      	uxtb	r3, r3
 8019392:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 8019394:	687b      	ldr	r3, [r7, #4]
 8019396:	89db      	ldrh	r3, [r3, #14]
 8019398:	b2db      	uxtb	r3, r3
 801939a:	737b      	strb	r3, [r7, #13]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 801939c:	687b      	ldr	r3, [r7, #4]
 801939e:	7c1a      	ldrb	r2, [r3, #16]
 80193a0:	4b0f      	ldr	r3, [pc, #60]	@ (80193e0 <SUBGRF_SetPacketParams+0x138>)
 80193a2:	4611      	mov	r1, r2
 80193a4:	7019      	strb	r1, [r3, #0]
 80193a6:	4613      	mov	r3, r2
 80193a8:	73bb      	strb	r3, [r7, #14]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 80193aa:	687b      	ldr	r3, [r7, #4]
 80193ac:	7c5b      	ldrb	r3, [r3, #17]
 80193ae:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 80193b0:	687b      	ldr	r3, [r7, #4]
 80193b2:	7c9b      	ldrb	r3, [r3, #18]
 80193b4:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 80193b6:	687b      	ldr	r3, [r7, #4]
 80193b8:	7cdb      	ldrb	r3, [r3, #19]
 80193ba:	747b      	strb	r3, [r7, #17]
        break;
 80193bc:	bf00      	nop
    default:
    case PACKET_TYPE_NONE:
        return;
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 80193be:	7dfb      	ldrb	r3, [r7, #23]
 80193c0:	b29a      	uxth	r2, r3
 80193c2:	f107 030c 	add.w	r3, r7, #12
 80193c6:	4619      	mov	r1, r3
 80193c8:	208c      	movs	r0, #140	@ 0x8c
 80193ca:	f000 f97f 	bl	80196cc <SUBGRF_WriteCommand>
 80193ce:	e000      	b.n	80193d2 <SUBGRF_SetPacketParams+0x12a>
        return;
 80193d0:	bf00      	nop
}
 80193d2:	3718      	adds	r7, #24
 80193d4:	46bd      	mov	sp, r7
 80193d6:	bd80      	pop	{r7, pc}
 80193d8:	0801b798 	.word	0x0801b798
 80193dc:	20001579 	.word	0x20001579
 80193e0:	2000157a 	.word	0x2000157a

080193e4 <SUBGRF_SetBufferBaseAddress>:
    SUBGRF_WriteCommand( RADIO_SET_CADPARAMS, buf, 7 );
    OperatingMode = MODE_CAD;
}

void SUBGRF_SetBufferBaseAddress( uint8_t txBaseAddress, uint8_t rxBaseAddress )
{
 80193e4:	b580      	push	{r7, lr}
 80193e6:	b084      	sub	sp, #16
 80193e8:	af00      	add	r7, sp, #0
 80193ea:	4603      	mov	r3, r0
 80193ec:	460a      	mov	r2, r1
 80193ee:	71fb      	strb	r3, [r7, #7]
 80193f0:	4613      	mov	r3, r2
 80193f2:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = txBaseAddress;
 80193f4:	79fb      	ldrb	r3, [r7, #7]
 80193f6:	733b      	strb	r3, [r7, #12]
    buf[1] = rxBaseAddress;
 80193f8:	79bb      	ldrb	r3, [r7, #6]
 80193fa:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 80193fc:	f107 030c 	add.w	r3, r7, #12
 8019400:	2202      	movs	r2, #2
 8019402:	4619      	mov	r1, r3
 8019404:	208f      	movs	r0, #143	@ 0x8f
 8019406:	f000 f961 	bl	80196cc <SUBGRF_WriteCommand>
}
 801940a:	bf00      	nop
 801940c:	3710      	adds	r7, #16
 801940e:	46bd      	mov	sp, r7
 8019410:	bd80      	pop	{r7, pc}

08019412 <SUBGRF_GetRssiInst>:
    status.Fields.ChipMode = ( stat & ( 0x07 << 4 ) ) >> 4;
    return status;
}

int8_t SUBGRF_GetRssiInst( void )
{
 8019412:	b580      	push	{r7, lr}
 8019414:	b082      	sub	sp, #8
 8019416:	af00      	add	r7, sp, #0
    uint8_t buf[1];
    int8_t rssi = 0;
 8019418:	2300      	movs	r3, #0
 801941a:	71fb      	strb	r3, [r7, #7]

    SUBGRF_ReadCommand( RADIO_GET_RSSIINST, buf, 1 );
 801941c:	1d3b      	adds	r3, r7, #4
 801941e:	2201      	movs	r2, #1
 8019420:	4619      	mov	r1, r3
 8019422:	2015      	movs	r0, #21
 8019424:	f000 f974 	bl	8019710 <SUBGRF_ReadCommand>
    rssi = -buf[0] >> 1;
 8019428:	793b      	ldrb	r3, [r7, #4]
 801942a:	425b      	negs	r3, r3
 801942c:	105b      	asrs	r3, r3, #1
 801942e:	71fb      	strb	r3, [r7, #7]
    return rssi;
 8019430:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8019434:	4618      	mov	r0, r3
 8019436:	3708      	adds	r7, #8
 8019438:	46bd      	mov	sp, r7
 801943a:	bd80      	pop	{r7, pc}

0801943c <SUBGRF_GetRxBufferStatus>:

void SUBGRF_GetRxBufferStatus( uint8_t *payloadLength, uint8_t *rxStartBufferPointer )
{
 801943c:	b580      	push	{r7, lr}
 801943e:	b084      	sub	sp, #16
 8019440:	af00      	add	r7, sp, #0
 8019442:	6078      	str	r0, [r7, #4]
 8019444:	6039      	str	r1, [r7, #0]
    uint8_t status[2];

    SUBGRF_ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 8019446:	f107 030c 	add.w	r3, r7, #12
 801944a:	2202      	movs	r2, #2
 801944c:	4619      	mov	r1, r3
 801944e:	2013      	movs	r0, #19
 8019450:	f000 f95e 	bl	8019710 <SUBGRF_ReadCommand>

    // In case of LORA fixed header, the payloadLength is obtained by reading
    // the register REG_LR_PAYLOADLENGTH
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 8019454:	f7ff fd7e 	bl	8018f54 <SUBGRF_GetPacketType>
 8019458:	4603      	mov	r3, r0
 801945a:	2b01      	cmp	r3, #1
 801945c:	d10d      	bne.n	801947a <SUBGRF_GetRxBufferStatus+0x3e>
 801945e:	4b0c      	ldr	r3, [pc, #48]	@ (8019490 <SUBGRF_GetRxBufferStatus+0x54>)
 8019460:	781b      	ldrb	r3, [r3, #0]
 8019462:	b2db      	uxtb	r3, r3
 8019464:	2b01      	cmp	r3, #1
 8019466:	d108      	bne.n	801947a <SUBGRF_GetRxBufferStatus+0x3e>
    {
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 8019468:	f240 7002 	movw	r0, #1794	@ 0x702
 801946c:	f000 f886 	bl	801957c <SUBGRF_ReadRegister>
 8019470:	4603      	mov	r3, r0
 8019472:	461a      	mov	r2, r3
 8019474:	687b      	ldr	r3, [r7, #4]
 8019476:	701a      	strb	r2, [r3, #0]
 8019478:	e002      	b.n	8019480 <SUBGRF_GetRxBufferStatus+0x44>
    }
    else
    {
        *payloadLength = status[0];
 801947a:	7b3a      	ldrb	r2, [r7, #12]
 801947c:	687b      	ldr	r3, [r7, #4]
 801947e:	701a      	strb	r2, [r3, #0]
    }
    *rxStartBufferPointer = status[1];
 8019480:	7b7a      	ldrb	r2, [r7, #13]
 8019482:	683b      	ldr	r3, [r7, #0]
 8019484:	701a      	strb	r2, [r3, #0]
}
 8019486:	bf00      	nop
 8019488:	3710      	adds	r7, #16
 801948a:	46bd      	mov	sp, r7
 801948c:	bd80      	pop	{r7, pc}
 801948e:	bf00      	nop
 8019490:	2000157a 	.word	0x2000157a

08019494 <SUBGRF_GetPacketStatus>:

void SUBGRF_GetPacketStatus( PacketStatus_t *pktStatus )
{
 8019494:	b580      	push	{r7, lr}
 8019496:	b084      	sub	sp, #16
 8019498:	af00      	add	r7, sp, #0
 801949a:	6078      	str	r0, [r7, #4]
    uint8_t status[3];

    SUBGRF_ReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 801949c:	f107 030c 	add.w	r3, r7, #12
 80194a0:	2203      	movs	r2, #3
 80194a2:	4619      	mov	r1, r3
 80194a4:	2014      	movs	r0, #20
 80194a6:	f000 f933 	bl	8019710 <SUBGRF_ReadCommand>

    pktStatus->packetType = SUBGRF_GetPacketType( );
 80194aa:	f7ff fd53 	bl	8018f54 <SUBGRF_GetPacketType>
 80194ae:	4603      	mov	r3, r0
 80194b0:	461a      	mov	r2, r3
 80194b2:	687b      	ldr	r3, [r7, #4]
 80194b4:	701a      	strb	r2, [r3, #0]
    switch( pktStatus->packetType )
 80194b6:	687b      	ldr	r3, [r7, #4]
 80194b8:	781b      	ldrb	r3, [r3, #0]
 80194ba:	2b00      	cmp	r3, #0
 80194bc:	d002      	beq.n	80194c4 <SUBGRF_GetPacketStatus+0x30>
 80194be:	2b01      	cmp	r3, #1
 80194c0:	d013      	beq.n	80194ea <SUBGRF_GetPacketStatus+0x56>
 80194c2:	e02a      	b.n	801951a <SUBGRF_GetPacketStatus+0x86>
    {
        case PACKET_TYPE_GFSK:
            pktStatus->Params.Gfsk.RxStatus = status[0];
 80194c4:	7b3a      	ldrb	r2, [r7, #12]
 80194c6:	687b      	ldr	r3, [r7, #4]
 80194c8:	711a      	strb	r2, [r3, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 80194ca:	7b7b      	ldrb	r3, [r7, #13]
 80194cc:	425b      	negs	r3, r3
 80194ce:	105b      	asrs	r3, r3, #1
 80194d0:	b25a      	sxtb	r2, r3
 80194d2:	687b      	ldr	r3, [r7, #4]
 80194d4:	719a      	strb	r2, [r3, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 80194d6:	7bbb      	ldrb	r3, [r7, #14]
 80194d8:	425b      	negs	r3, r3
 80194da:	105b      	asrs	r3, r3, #1
 80194dc:	b25a      	sxtb	r2, r3
 80194de:	687b      	ldr	r3, [r7, #4]
 80194e0:	715a      	strb	r2, [r3, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 80194e2:	687b      	ldr	r3, [r7, #4]
 80194e4:	2200      	movs	r2, #0
 80194e6:	609a      	str	r2, [r3, #8]
            break;
 80194e8:	e020      	b.n	801952c <SUBGRF_GetPacketStatus+0x98>

        case PACKET_TYPE_LORA:
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 80194ea:	7b3b      	ldrb	r3, [r7, #12]
 80194ec:	425b      	negs	r3, r3
 80194ee:	105b      	asrs	r3, r3, #1
 80194f0:	b25a      	sxtb	r2, r3
 80194f2:	687b      	ldr	r3, [r7, #4]
 80194f4:	731a      	strb	r2, [r3, #12]
            // Returns SNR value [dB] rounded to the nearest integer value
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 80194f6:	7b7b      	ldrb	r3, [r7, #13]
 80194f8:	b25b      	sxtb	r3, r3
 80194fa:	3302      	adds	r3, #2
 80194fc:	109b      	asrs	r3, r3, #2
 80194fe:	b25a      	sxtb	r2, r3
 8019500:	687b      	ldr	r3, [r7, #4]
 8019502:	735a      	strb	r2, [r3, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 8019504:	7bbb      	ldrb	r3, [r7, #14]
 8019506:	425b      	negs	r3, r3
 8019508:	105b      	asrs	r3, r3, #1
 801950a:	b25a      	sxtb	r2, r3
 801950c:	687b      	ldr	r3, [r7, #4]
 801950e:	739a      	strb	r2, [r3, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 8019510:	4b08      	ldr	r3, [pc, #32]	@ (8019534 <SUBGRF_GetPacketStatus+0xa0>)
 8019512:	681a      	ldr	r2, [r3, #0]
 8019514:	687b      	ldr	r3, [r7, #4]
 8019516:	611a      	str	r2, [r3, #16]
            break;
 8019518:	e008      	b.n	801952c <SUBGRF_GetPacketStatus+0x98>

        default:
        case PACKET_TYPE_NONE:
            // In that specific case, we set everything in the pktStatus to zeros
            // and reset the packet type accordingly
            RADIO_MEMSET8( pktStatus, 0, sizeof( PacketStatus_t ) );
 801951a:	2214      	movs	r2, #20
 801951c:	2100      	movs	r1, #0
 801951e:	6878      	ldr	r0, [r7, #4]
 8019520:	f000 fc1d 	bl	8019d5e <UTIL_MEM_set_8>
            pktStatus->packetType = PACKET_TYPE_NONE;
 8019524:	687b      	ldr	r3, [r7, #4]
 8019526:	220f      	movs	r2, #15
 8019528:	701a      	strb	r2, [r3, #0]
            break;
 801952a:	bf00      	nop
    }
}
 801952c:	bf00      	nop
 801952e:	3710      	adds	r7, #16
 8019530:	46bd      	mov	sp, r7
 8019532:	bd80      	pop	{r7, pc}
 8019534:	2000157c 	.word	0x2000157c

08019538 <SUBGRF_WriteRegister>:
    buf[1] = ( uint8_t )( ( uint16_t )irq & 0x00FF );
    SUBGRF_WriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
}

void SUBGRF_WriteRegister( uint16_t addr, uint8_t data )
{
 8019538:	b580      	push	{r7, lr}
 801953a:	b086      	sub	sp, #24
 801953c:	af00      	add	r7, sp, #0
 801953e:	4603      	mov	r3, r0
 8019540:	460a      	mov	r2, r1
 8019542:	80fb      	strh	r3, [r7, #6]
 8019544:	4613      	mov	r3, r2
 8019546:	717b      	strb	r3, [r7, #5]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019548:	f3ef 8310 	mrs	r3, PRIMASK
 801954c:	60fb      	str	r3, [r7, #12]
  return(result);
 801954e:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8019550:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8019552:	b672      	cpsid	i
}
 8019554:	bf00      	nop
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 8019556:	1d7a      	adds	r2, r7, #5
 8019558:	88f9      	ldrh	r1, [r7, #6]
 801955a:	2301      	movs	r3, #1
 801955c:	4806      	ldr	r0, [pc, #24]	@ (8019578 <SUBGRF_WriteRegister+0x40>)
 801955e:	f7ed ff39 	bl	80073d4 <HAL_SUBGHZ_WriteRegisters>
 8019562:	697b      	ldr	r3, [r7, #20]
 8019564:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019566:	693b      	ldr	r3, [r7, #16]
 8019568:	f383 8810 	msr	PRIMASK, r3
}
 801956c:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801956e:	bf00      	nop
 8019570:	3718      	adds	r7, #24
 8019572:	46bd      	mov	sp, r7
 8019574:	bd80      	pop	{r7, pc}
 8019576:	bf00      	nop
 8019578:	200001f4 	.word	0x200001f4

0801957c <SUBGRF_ReadRegister>:

uint8_t SUBGRF_ReadRegister( uint16_t addr )
{
 801957c:	b580      	push	{r7, lr}
 801957e:	b086      	sub	sp, #24
 8019580:	af00      	add	r7, sp, #0
 8019582:	4603      	mov	r3, r0
 8019584:	80fb      	strh	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019586:	f3ef 8310 	mrs	r3, PRIMASK
 801958a:	60fb      	str	r3, [r7, #12]
  return(result);
 801958c:	68fb      	ldr	r3, [r7, #12]
    uint8_t data;
    CRITICAL_SECTION_BEGIN();
 801958e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8019590:	b672      	cpsid	i
}
 8019592:	bf00      	nop
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 8019594:	f107 020b 	add.w	r2, r7, #11
 8019598:	88f9      	ldrh	r1, [r7, #6]
 801959a:	2301      	movs	r3, #1
 801959c:	4806      	ldr	r0, [pc, #24]	@ (80195b8 <SUBGRF_ReadRegister+0x3c>)
 801959e:	f7ed ff78 	bl	8007492 <HAL_SUBGHZ_ReadRegisters>
 80195a2:	697b      	ldr	r3, [r7, #20]
 80195a4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80195a6:	693b      	ldr	r3, [r7, #16]
 80195a8:	f383 8810 	msr	PRIMASK, r3
}
 80195ac:	bf00      	nop
    CRITICAL_SECTION_END();
    return data;
 80195ae:	7afb      	ldrb	r3, [r7, #11]
}
 80195b0:	4618      	mov	r0, r3
 80195b2:	3718      	adds	r7, #24
 80195b4:	46bd      	mov	sp, r7
 80195b6:	bd80      	pop	{r7, pc}
 80195b8:	200001f4 	.word	0x200001f4

080195bc <SUBGRF_WriteRegisters>:

void SUBGRF_WriteRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 80195bc:	b580      	push	{r7, lr}
 80195be:	b086      	sub	sp, #24
 80195c0:	af00      	add	r7, sp, #0
 80195c2:	4603      	mov	r3, r0
 80195c4:	6039      	str	r1, [r7, #0]
 80195c6:	80fb      	strh	r3, [r7, #6]
 80195c8:	4613      	mov	r3, r2
 80195ca:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80195cc:	f3ef 8310 	mrs	r3, PRIMASK
 80195d0:	60fb      	str	r3, [r7, #12]
  return(result);
 80195d2:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 80195d4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80195d6:	b672      	cpsid	i
}
 80195d8:	bf00      	nop
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 80195da:	88bb      	ldrh	r3, [r7, #4]
 80195dc:	88f9      	ldrh	r1, [r7, #6]
 80195de:	683a      	ldr	r2, [r7, #0]
 80195e0:	4806      	ldr	r0, [pc, #24]	@ (80195fc <SUBGRF_WriteRegisters+0x40>)
 80195e2:	f7ed fef7 	bl	80073d4 <HAL_SUBGHZ_WriteRegisters>
 80195e6:	697b      	ldr	r3, [r7, #20]
 80195e8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80195ea:	693b      	ldr	r3, [r7, #16]
 80195ec:	f383 8810 	msr	PRIMASK, r3
}
 80195f0:	bf00      	nop
    CRITICAL_SECTION_END();
}
 80195f2:	bf00      	nop
 80195f4:	3718      	adds	r7, #24
 80195f6:	46bd      	mov	sp, r7
 80195f8:	bd80      	pop	{r7, pc}
 80195fa:	bf00      	nop
 80195fc:	200001f4 	.word	0x200001f4

08019600 <SUBGRF_ReadRegisters>:

void SUBGRF_ReadRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 8019600:	b580      	push	{r7, lr}
 8019602:	b086      	sub	sp, #24
 8019604:	af00      	add	r7, sp, #0
 8019606:	4603      	mov	r3, r0
 8019608:	6039      	str	r1, [r7, #0]
 801960a:	80fb      	strh	r3, [r7, #6]
 801960c:	4613      	mov	r3, r2
 801960e:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019610:	f3ef 8310 	mrs	r3, PRIMASK
 8019614:	60fb      	str	r3, [r7, #12]
  return(result);
 8019616:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8019618:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801961a:	b672      	cpsid	i
}
 801961c:	bf00      	nop
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
 801961e:	88bb      	ldrh	r3, [r7, #4]
 8019620:	88f9      	ldrh	r1, [r7, #6]
 8019622:	683a      	ldr	r2, [r7, #0]
 8019624:	4806      	ldr	r0, [pc, #24]	@ (8019640 <SUBGRF_ReadRegisters+0x40>)
 8019626:	f7ed ff34 	bl	8007492 <HAL_SUBGHZ_ReadRegisters>
 801962a:	697b      	ldr	r3, [r7, #20]
 801962c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801962e:	693b      	ldr	r3, [r7, #16]
 8019630:	f383 8810 	msr	PRIMASK, r3
}
 8019634:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8019636:	bf00      	nop
 8019638:	3718      	adds	r7, #24
 801963a:	46bd      	mov	sp, r7
 801963c:	bd80      	pop	{r7, pc}
 801963e:	bf00      	nop
 8019640:	200001f4 	.word	0x200001f4

08019644 <SUBGRF_WriteBuffer>:

void SUBGRF_WriteBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 8019644:	b580      	push	{r7, lr}
 8019646:	b086      	sub	sp, #24
 8019648:	af00      	add	r7, sp, #0
 801964a:	4603      	mov	r3, r0
 801964c:	6039      	str	r1, [r7, #0]
 801964e:	71fb      	strb	r3, [r7, #7]
 8019650:	4613      	mov	r3, r2
 8019652:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019654:	f3ef 8310 	mrs	r3, PRIMASK
 8019658:	60fb      	str	r3, [r7, #12]
  return(result);
 801965a:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801965c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801965e:	b672      	cpsid	i
}
 8019660:	bf00      	nop
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 8019662:	79bb      	ldrb	r3, [r7, #6]
 8019664:	b29b      	uxth	r3, r3
 8019666:	79f9      	ldrb	r1, [r7, #7]
 8019668:	683a      	ldr	r2, [r7, #0]
 801966a:	4806      	ldr	r0, [pc, #24]	@ (8019684 <SUBGRF_WriteBuffer+0x40>)
 801966c:	f7ee f825 	bl	80076ba <HAL_SUBGHZ_WriteBuffer>
 8019670:	697b      	ldr	r3, [r7, #20]
 8019672:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019674:	693b      	ldr	r3, [r7, #16]
 8019676:	f383 8810 	msr	PRIMASK, r3
}
 801967a:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801967c:	bf00      	nop
 801967e:	3718      	adds	r7, #24
 8019680:	46bd      	mov	sp, r7
 8019682:	bd80      	pop	{r7, pc}
 8019684:	200001f4 	.word	0x200001f4

08019688 <SUBGRF_ReadBuffer>:

void SUBGRF_ReadBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 8019688:	b580      	push	{r7, lr}
 801968a:	b086      	sub	sp, #24
 801968c:	af00      	add	r7, sp, #0
 801968e:	4603      	mov	r3, r0
 8019690:	6039      	str	r1, [r7, #0]
 8019692:	71fb      	strb	r3, [r7, #7]
 8019694:	4613      	mov	r3, r2
 8019696:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019698:	f3ef 8310 	mrs	r3, PRIMASK
 801969c:	60fb      	str	r3, [r7, #12]
  return(result);
 801969e:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 80196a0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80196a2:	b672      	cpsid	i
}
 80196a4:	bf00      	nop
    HAL_SUBGHZ_ReadBuffer( &hsubghz, offset, buffer, size );
 80196a6:	79bb      	ldrb	r3, [r7, #6]
 80196a8:	b29b      	uxth	r3, r3
 80196aa:	79f9      	ldrb	r1, [r7, #7]
 80196ac:	683a      	ldr	r2, [r7, #0]
 80196ae:	4806      	ldr	r0, [pc, #24]	@ (80196c8 <SUBGRF_ReadBuffer+0x40>)
 80196b0:	f7ee f856 	bl	8007760 <HAL_SUBGHZ_ReadBuffer>
 80196b4:	697b      	ldr	r3, [r7, #20]
 80196b6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80196b8:	693b      	ldr	r3, [r7, #16]
 80196ba:	f383 8810 	msr	PRIMASK, r3
}
 80196be:	bf00      	nop
    CRITICAL_SECTION_END();
}
 80196c0:	bf00      	nop
 80196c2:	3718      	adds	r7, #24
 80196c4:	46bd      	mov	sp, r7
 80196c6:	bd80      	pop	{r7, pc}
 80196c8:	200001f4 	.word	0x200001f4

080196cc <SUBGRF_WriteCommand>:

void SUBGRF_WriteCommand( SUBGHZ_RadioSetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 80196cc:	b580      	push	{r7, lr}
 80196ce:	b086      	sub	sp, #24
 80196d0:	af00      	add	r7, sp, #0
 80196d2:	4603      	mov	r3, r0
 80196d4:	6039      	str	r1, [r7, #0]
 80196d6:	71fb      	strb	r3, [r7, #7]
 80196d8:	4613      	mov	r3, r2
 80196da:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80196dc:	f3ef 8310 	mrs	r3, PRIMASK
 80196e0:	60fb      	str	r3, [r7, #12]
  return(result);
 80196e2:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 80196e4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80196e6:	b672      	cpsid	i
}
 80196e8:	bf00      	nop
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 80196ea:	88bb      	ldrh	r3, [r7, #4]
 80196ec:	79f9      	ldrb	r1, [r7, #7]
 80196ee:	683a      	ldr	r2, [r7, #0]
 80196f0:	4806      	ldr	r0, [pc, #24]	@ (801970c <SUBGRF_WriteCommand+0x40>)
 80196f2:	f7ed ff2f 	bl	8007554 <HAL_SUBGHZ_ExecSetCmd>
 80196f6:	697b      	ldr	r3, [r7, #20]
 80196f8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80196fa:	693b      	ldr	r3, [r7, #16]
 80196fc:	f383 8810 	msr	PRIMASK, r3
}
 8019700:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8019702:	bf00      	nop
 8019704:	3718      	adds	r7, #24
 8019706:	46bd      	mov	sp, r7
 8019708:	bd80      	pop	{r7, pc}
 801970a:	bf00      	nop
 801970c:	200001f4 	.word	0x200001f4

08019710 <SUBGRF_ReadCommand>:

void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 8019710:	b580      	push	{r7, lr}
 8019712:	b086      	sub	sp, #24
 8019714:	af00      	add	r7, sp, #0
 8019716:	4603      	mov	r3, r0
 8019718:	6039      	str	r1, [r7, #0]
 801971a:	71fb      	strb	r3, [r7, #7]
 801971c:	4613      	mov	r3, r2
 801971e:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019720:	f3ef 8310 	mrs	r3, PRIMASK
 8019724:	60fb      	str	r3, [r7, #12]
  return(result);
 8019726:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8019728:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801972a:	b672      	cpsid	i
}
 801972c:	bf00      	nop
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
 801972e:	88bb      	ldrh	r3, [r7, #4]
 8019730:	79f9      	ldrb	r1, [r7, #7]
 8019732:	683a      	ldr	r2, [r7, #0]
 8019734:	4806      	ldr	r0, [pc, #24]	@ (8019750 <SUBGRF_ReadCommand+0x40>)
 8019736:	f7ed ff6c 	bl	8007612 <HAL_SUBGHZ_ExecGetCmd>
 801973a:	697b      	ldr	r3, [r7, #20]
 801973c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801973e:	693b      	ldr	r3, [r7, #16]
 8019740:	f383 8810 	msr	PRIMASK, r3
}
 8019744:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8019746:	bf00      	nop
 8019748:	3718      	adds	r7, #24
 801974a:	46bd      	mov	sp, r7
 801974c:	bd80      	pop	{r7, pc}
 801974e:	bf00      	nop
 8019750:	200001f4 	.word	0x200001f4

08019754 <SUBGRF_SetSwitch>:

void SUBGRF_SetSwitch( uint8_t paSelect, RFState_t rxtx )
{
 8019754:	b580      	push	{r7, lr}
 8019756:	b084      	sub	sp, #16
 8019758:	af00      	add	r7, sp, #0
 801975a:	4603      	mov	r3, r0
 801975c:	460a      	mov	r2, r1
 801975e:	71fb      	strb	r3, [r7, #7]
 8019760:	4613      	mov	r3, r2
 8019762:	71bb      	strb	r3, [r7, #6]
    RBI_Switch_TypeDef state = RBI_SWITCH_RX;
 8019764:	2301      	movs	r3, #1
 8019766:	73fb      	strb	r3, [r7, #15]

    if (rxtx == RFSWITCH_TX)
 8019768:	79bb      	ldrb	r3, [r7, #6]
 801976a:	2b01      	cmp	r3, #1
 801976c:	d10d      	bne.n	801978a <SUBGRF_SetSwitch+0x36>
    {
        if (paSelect == RFO_LP)
 801976e:	79fb      	ldrb	r3, [r7, #7]
 8019770:	2b01      	cmp	r3, #1
 8019772:	d104      	bne.n	801977e <SUBGRF_SetSwitch+0x2a>
        {
            state = RBI_SWITCH_RFO_LP;
 8019774:	2302      	movs	r3, #2
 8019776:	73fb      	strb	r3, [r7, #15]
            Radio_SMPS_Set(SMPS_DRIVE_SETTING_MAX);
 8019778:	2004      	movs	r0, #4
 801977a:	f000 f8ef 	bl	801995c <Radio_SMPS_Set>
        }
        if (paSelect == RFO_HP)
 801977e:	79fb      	ldrb	r3, [r7, #7]
 8019780:	2b02      	cmp	r3, #2
 8019782:	d107      	bne.n	8019794 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RFO_HP;
 8019784:	2303      	movs	r3, #3
 8019786:	73fb      	strb	r3, [r7, #15]
 8019788:	e004      	b.n	8019794 <SUBGRF_SetSwitch+0x40>
        }
    }
    else
    {
        if (rxtx == RFSWITCH_RX)
 801978a:	79bb      	ldrb	r3, [r7, #6]
 801978c:	2b00      	cmp	r3, #0
 801978e:	d101      	bne.n	8019794 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RX;
 8019790:	2301      	movs	r3, #1
 8019792:	73fb      	strb	r3, [r7, #15]
        }
    }
    RBI_ConfigRFSwitch(state);
 8019794:	7bfb      	ldrb	r3, [r7, #15]
 8019796:	4618      	mov	r0, r3
 8019798:	f7f0 feb9 	bl	800a50e <RBI_ConfigRFSwitch>
}
 801979c:	bf00      	nop
 801979e:	3710      	adds	r7, #16
 80197a0:	46bd      	mov	sp, r7
 80197a2:	bd80      	pop	{r7, pc}

080197a4 <SUBGRF_SetRfTxPower>:

uint8_t SUBGRF_SetRfTxPower( int8_t power )
{
 80197a4:	b580      	push	{r7, lr}
 80197a6:	b084      	sub	sp, #16
 80197a8:	af00      	add	r7, sp, #0
 80197aa:	4603      	mov	r3, r0
 80197ac:	71fb      	strb	r3, [r7, #7]
    uint8_t paSelect= RFO_LP;
 80197ae:	2301      	movs	r3, #1
 80197b0:	73fb      	strb	r3, [r7, #15]

    int32_t TxConfig = RBI_GetTxConfig();
 80197b2:	f7f0 feb9 	bl	800a528 <RBI_GetTxConfig>
 80197b6:	60b8      	str	r0, [r7, #8]

    switch (TxConfig)
 80197b8:	68bb      	ldr	r3, [r7, #8]
 80197ba:	2b02      	cmp	r3, #2
 80197bc:	d016      	beq.n	80197ec <SUBGRF_SetRfTxPower+0x48>
 80197be:	68bb      	ldr	r3, [r7, #8]
 80197c0:	2b02      	cmp	r3, #2
 80197c2:	dc16      	bgt.n	80197f2 <SUBGRF_SetRfTxPower+0x4e>
 80197c4:	68bb      	ldr	r3, [r7, #8]
 80197c6:	2b00      	cmp	r3, #0
 80197c8:	d003      	beq.n	80197d2 <SUBGRF_SetRfTxPower+0x2e>
 80197ca:	68bb      	ldr	r3, [r7, #8]
 80197cc:	2b01      	cmp	r3, #1
 80197ce:	d00a      	beq.n	80197e6 <SUBGRF_SetRfTxPower+0x42>
        {
            paSelect = RFO_HP;
            break;
        }
        default:
            break;
 80197d0:	e00f      	b.n	80197f2 <SUBGRF_SetRfTxPower+0x4e>
            if (power > 15)
 80197d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80197d6:	2b0f      	cmp	r3, #15
 80197d8:	dd02      	ble.n	80197e0 <SUBGRF_SetRfTxPower+0x3c>
                paSelect = RFO_HP;
 80197da:	2302      	movs	r3, #2
 80197dc:	73fb      	strb	r3, [r7, #15]
            break;
 80197de:	e009      	b.n	80197f4 <SUBGRF_SetRfTxPower+0x50>
                paSelect = RFO_LP;
 80197e0:	2301      	movs	r3, #1
 80197e2:	73fb      	strb	r3, [r7, #15]
            break;
 80197e4:	e006      	b.n	80197f4 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_LP;
 80197e6:	2301      	movs	r3, #1
 80197e8:	73fb      	strb	r3, [r7, #15]
            break;
 80197ea:	e003      	b.n	80197f4 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_HP;
 80197ec:	2302      	movs	r3, #2
 80197ee:	73fb      	strb	r3, [r7, #15]
            break;
 80197f0:	e000      	b.n	80197f4 <SUBGRF_SetRfTxPower+0x50>
            break;
 80197f2:	bf00      	nop
    }

    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 80197f4:	f997 1007 	ldrsb.w	r1, [r7, #7]
 80197f8:	7bfb      	ldrb	r3, [r7, #15]
 80197fa:	2202      	movs	r2, #2
 80197fc:	4618      	mov	r0, r3
 80197fe:	f7ff fbb3 	bl	8018f68 <SUBGRF_SetTxParams>

    return paSelect;
 8019802:	7bfb      	ldrb	r3, [r7, #15]
}
 8019804:	4618      	mov	r0, r3
 8019806:	3710      	adds	r7, #16
 8019808:	46bd      	mov	sp, r7
 801980a:	bd80      	pop	{r7, pc}

0801980c <SUBGRF_GetRadioWakeUpTime>:

uint32_t SUBGRF_GetRadioWakeUpTime( void )
{
 801980c:	b480      	push	{r7}
 801980e:	af00      	add	r7, sp, #0
    return RF_WAKEUP_TIME;
 8019810:	2301      	movs	r3, #1
}
 8019812:	4618      	mov	r0, r3
 8019814:	46bd      	mov	sp, r7
 8019816:	bc80      	pop	{r7}
 8019818:	4770      	bx	lr
	...

0801981c <HAL_SUBGHZ_TxCpltCallback>:

/* HAL_SUBGHz Callbacks definitions */
void HAL_SUBGHZ_TxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801981c:	b580      	push	{r7, lr}
 801981e:	b082      	sub	sp, #8
 8019820:	af00      	add	r7, sp, #0
 8019822:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_TX_DONE );
 8019824:	4b03      	ldr	r3, [pc, #12]	@ (8019834 <HAL_SUBGHZ_TxCpltCallback+0x18>)
 8019826:	681b      	ldr	r3, [r3, #0]
 8019828:	2001      	movs	r0, #1
 801982a:	4798      	blx	r3
}
 801982c:	bf00      	nop
 801982e:	3708      	adds	r7, #8
 8019830:	46bd      	mov	sp, r7
 8019832:	bd80      	pop	{r7, pc}
 8019834:	20001584 	.word	0x20001584

08019838 <HAL_SUBGHZ_RxCpltCallback>:

void HAL_SUBGHZ_RxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8019838:	b580      	push	{r7, lr}
 801983a:	b082      	sub	sp, #8
 801983c:	af00      	add	r7, sp, #0
 801983e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_DONE );
 8019840:	4b03      	ldr	r3, [pc, #12]	@ (8019850 <HAL_SUBGHZ_RxCpltCallback+0x18>)
 8019842:	681b      	ldr	r3, [r3, #0]
 8019844:	2002      	movs	r0, #2
 8019846:	4798      	blx	r3
}
 8019848:	bf00      	nop
 801984a:	3708      	adds	r7, #8
 801984c:	46bd      	mov	sp, r7
 801984e:	bd80      	pop	{r7, pc}
 8019850:	20001584 	.word	0x20001584

08019854 <HAL_SUBGHZ_CRCErrorCallback>:

void HAL_SUBGHZ_CRCErrorCallback (SUBGHZ_HandleTypeDef *hsubghz)
{
 8019854:	b580      	push	{r7, lr}
 8019856:	b082      	sub	sp, #8
 8019858:	af00      	add	r7, sp, #0
 801985a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 801985c:	4b03      	ldr	r3, [pc, #12]	@ (801986c <HAL_SUBGHZ_CRCErrorCallback+0x18>)
 801985e:	681b      	ldr	r3, [r3, #0]
 8019860:	2040      	movs	r0, #64	@ 0x40
 8019862:	4798      	blx	r3
}
 8019864:	bf00      	nop
 8019866:	3708      	adds	r7, #8
 8019868:	46bd      	mov	sp, r7
 801986a:	bd80      	pop	{r7, pc}
 801986c:	20001584 	.word	0x20001584

08019870 <HAL_SUBGHZ_CADStatusCallback>:

void HAL_SUBGHZ_CADStatusCallback(SUBGHZ_HandleTypeDef *hsubghz, HAL_SUBGHZ_CadStatusTypeDef cadstatus)
{
 8019870:	b580      	push	{r7, lr}
 8019872:	b082      	sub	sp, #8
 8019874:	af00      	add	r7, sp, #0
 8019876:	6078      	str	r0, [r7, #4]
 8019878:	460b      	mov	r3, r1
 801987a:	70fb      	strb	r3, [r7, #3]
    switch (cadstatus)
 801987c:	78fb      	ldrb	r3, [r7, #3]
 801987e:	2b00      	cmp	r3, #0
 8019880:	d002      	beq.n	8019888 <HAL_SUBGHZ_CADStatusCallback+0x18>
 8019882:	2b01      	cmp	r3, #1
 8019884:	d005      	beq.n	8019892 <HAL_SUBGHZ_CADStatusCallback+0x22>
            break;
        case HAL_SUBGHZ_CAD_DETECTED:
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
            break;
        default:
            break;
 8019886:	e00a      	b.n	801989e <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 8019888:	4b07      	ldr	r3, [pc, #28]	@ (80198a8 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 801988a:	681b      	ldr	r3, [r3, #0]
 801988c:	2080      	movs	r0, #128	@ 0x80
 801988e:	4798      	blx	r3
            break;
 8019890:	e005      	b.n	801989e <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 8019892:	4b05      	ldr	r3, [pc, #20]	@ (80198a8 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 8019894:	681b      	ldr	r3, [r3, #0]
 8019896:	f44f 7080 	mov.w	r0, #256	@ 0x100
 801989a:	4798      	blx	r3
            break;
 801989c:	bf00      	nop
    }
}
 801989e:	bf00      	nop
 80198a0:	3708      	adds	r7, #8
 80198a2:	46bd      	mov	sp, r7
 80198a4:	bd80      	pop	{r7, pc}
 80198a6:	bf00      	nop
 80198a8:	20001584 	.word	0x20001584

080198ac <HAL_SUBGHZ_RxTxTimeoutCallback>:

void HAL_SUBGHZ_RxTxTimeoutCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 80198ac:	b580      	push	{r7, lr}
 80198ae:	b082      	sub	sp, #8
 80198b0:	af00      	add	r7, sp, #0
 80198b2:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 80198b4:	4b04      	ldr	r3, [pc, #16]	@ (80198c8 <HAL_SUBGHZ_RxTxTimeoutCallback+0x1c>)
 80198b6:	681b      	ldr	r3, [r3, #0]
 80198b8:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80198bc:	4798      	blx	r3
}
 80198be:	bf00      	nop
 80198c0:	3708      	adds	r7, #8
 80198c2:	46bd      	mov	sp, r7
 80198c4:	bd80      	pop	{r7, pc}
 80198c6:	bf00      	nop
 80198c8:	20001584 	.word	0x20001584

080198cc <HAL_SUBGHZ_HeaderErrorCallback>:

void HAL_SUBGHZ_HeaderErrorCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 80198cc:	b580      	push	{r7, lr}
 80198ce:	b082      	sub	sp, #8
 80198d0:	af00      	add	r7, sp, #0
 80198d2:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 80198d4:	4b03      	ldr	r3, [pc, #12]	@ (80198e4 <HAL_SUBGHZ_HeaderErrorCallback+0x18>)
 80198d6:	681b      	ldr	r3, [r3, #0]
 80198d8:	2020      	movs	r0, #32
 80198da:	4798      	blx	r3
}
 80198dc:	bf00      	nop
 80198de:	3708      	adds	r7, #8
 80198e0:	46bd      	mov	sp, r7
 80198e2:	bd80      	pop	{r7, pc}
 80198e4:	20001584 	.word	0x20001584

080198e8 <HAL_SUBGHZ_PreambleDetectedCallback>:

void HAL_SUBGHZ_PreambleDetectedCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 80198e8:	b580      	push	{r7, lr}
 80198ea:	b082      	sub	sp, #8
 80198ec:	af00      	add	r7, sp, #0
 80198ee:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 80198f0:	4b03      	ldr	r3, [pc, #12]	@ (8019900 <HAL_SUBGHZ_PreambleDetectedCallback+0x18>)
 80198f2:	681b      	ldr	r3, [r3, #0]
 80198f4:	2004      	movs	r0, #4
 80198f6:	4798      	blx	r3
}
 80198f8:	bf00      	nop
 80198fa:	3708      	adds	r7, #8
 80198fc:	46bd      	mov	sp, r7
 80198fe:	bd80      	pop	{r7, pc}
 8019900:	20001584 	.word	0x20001584

08019904 <HAL_SUBGHZ_SyncWordValidCallback>:

void HAL_SUBGHZ_SyncWordValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8019904:	b580      	push	{r7, lr}
 8019906:	b082      	sub	sp, #8
 8019908:	af00      	add	r7, sp, #0
 801990a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 801990c:	4b03      	ldr	r3, [pc, #12]	@ (801991c <HAL_SUBGHZ_SyncWordValidCallback+0x18>)
 801990e:	681b      	ldr	r3, [r3, #0]
 8019910:	2008      	movs	r0, #8
 8019912:	4798      	blx	r3
}
 8019914:	bf00      	nop
 8019916:	3708      	adds	r7, #8
 8019918:	46bd      	mov	sp, r7
 801991a:	bd80      	pop	{r7, pc}
 801991c:	20001584 	.word	0x20001584

08019920 <HAL_SUBGHZ_HeaderValidCallback>:

void HAL_SUBGHZ_HeaderValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8019920:	b580      	push	{r7, lr}
 8019922:	b082      	sub	sp, #8
 8019924:	af00      	add	r7, sp, #0
 8019926:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 8019928:	4b03      	ldr	r3, [pc, #12]	@ (8019938 <HAL_SUBGHZ_HeaderValidCallback+0x18>)
 801992a:	681b      	ldr	r3, [r3, #0]
 801992c:	2010      	movs	r0, #16
 801992e:	4798      	blx	r3
}
 8019930:	bf00      	nop
 8019932:	3708      	adds	r7, #8
 8019934:	46bd      	mov	sp, r7
 8019936:	bd80      	pop	{r7, pc}
 8019938:	20001584 	.word	0x20001584

0801993c <HAL_SUBGHZ_LrFhssHopCallback>:

void HAL_SUBGHZ_LrFhssHopCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801993c:	b580      	push	{r7, lr}
 801993e:	b082      	sub	sp, #8
 8019940:	af00      	add	r7, sp, #0
 8019942:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_LR_FHSS_HOP );
 8019944:	4b04      	ldr	r3, [pc, #16]	@ (8019958 <HAL_SUBGHZ_LrFhssHopCallback+0x1c>)
 8019946:	681b      	ldr	r3, [r3, #0]
 8019948:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 801994c:	4798      	blx	r3
}
 801994e:	bf00      	nop
 8019950:	3708      	adds	r7, #8
 8019952:	46bd      	mov	sp, r7
 8019954:	bd80      	pop	{r7, pc}
 8019956:	bf00      	nop
 8019958:	20001584 	.word	0x20001584

0801995c <Radio_SMPS_Set>:

static void Radio_SMPS_Set(uint8_t level)
{
 801995c:	b580      	push	{r7, lr}
 801995e:	b084      	sub	sp, #16
 8019960:	af00      	add	r7, sp, #0
 8019962:	4603      	mov	r3, r0
 8019964:	71fb      	strb	r3, [r7, #7]
  if ( 1U == RBI_IsDCDC() )
 8019966:	f7f0 fdf5 	bl	800a554 <RBI_IsDCDC>
 801996a:	4603      	mov	r3, r0
 801996c:	2b01      	cmp	r3, #1
 801996e:	d112      	bne.n	8019996 <Radio_SMPS_Set+0x3a>
  {
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 8019970:	f640 1023 	movw	r0, #2339	@ 0x923
 8019974:	f7ff fe02 	bl	801957c <SUBGRF_ReadRegister>
 8019978:	4603      	mov	r3, r0
 801997a:	73fb      	strb	r3, [r7, #15]
    modReg&= (~SMPS_DRV_MASK);
 801997c:	7bfb      	ldrb	r3, [r7, #15]
 801997e:	f023 0306 	bic.w	r3, r3, #6
 8019982:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 8019984:	7bfa      	ldrb	r2, [r7, #15]
 8019986:	79fb      	ldrb	r3, [r7, #7]
 8019988:	4313      	orrs	r3, r2
 801998a:	b2db      	uxtb	r3, r3
 801998c:	4619      	mov	r1, r3
 801998e:	f640 1023 	movw	r0, #2339	@ 0x923
 8019992:	f7ff fdd1 	bl	8019538 <SUBGRF_WriteRegister>
  }
}
 8019996:	bf00      	nop
 8019998:	3710      	adds	r7, #16
 801999a:	46bd      	mov	sp, r7
 801999c:	bd80      	pop	{r7, pc}
	...

080199a0 <SUBGRF_GetFskBandwidthRegValue>:

uint8_t SUBGRF_GetFskBandwidthRegValue( uint32_t bandwidth )
{
 80199a0:	b480      	push	{r7}
 80199a2:	b085      	sub	sp, #20
 80199a4:	af00      	add	r7, sp, #0
 80199a6:	6078      	str	r0, [r7, #4]
    uint8_t i;

    if( bandwidth == 0 )
 80199a8:	687b      	ldr	r3, [r7, #4]
 80199aa:	2b00      	cmp	r3, #0
 80199ac:	d101      	bne.n	80199b2 <SUBGRF_GetFskBandwidthRegValue+0x12>
    {
        return( 0x1F );
 80199ae:	231f      	movs	r3, #31
 80199b0:	e017      	b.n	80199e2 <SUBGRF_GetFskBandwidthRegValue+0x42>
    }

    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 80199b2:	2300      	movs	r3, #0
 80199b4:	73fb      	strb	r3, [r7, #15]
 80199b6:	e00f      	b.n	80199d8 <SUBGRF_GetFskBandwidthRegValue+0x38>
    {
        if ( bandwidth < FskBandwidths[i].bandwidth )
 80199b8:	7bfb      	ldrb	r3, [r7, #15]
 80199ba:	4a0c      	ldr	r2, [pc, #48]	@ (80199ec <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 80199bc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80199c0:	687a      	ldr	r2, [r7, #4]
 80199c2:	429a      	cmp	r2, r3
 80199c4:	d205      	bcs.n	80199d2 <SUBGRF_GetFskBandwidthRegValue+0x32>
        {
            return FskBandwidths[i].RegValue;
 80199c6:	7bfb      	ldrb	r3, [r7, #15]
 80199c8:	4a08      	ldr	r2, [pc, #32]	@ (80199ec <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 80199ca:	00db      	lsls	r3, r3, #3
 80199cc:	4413      	add	r3, r2
 80199ce:	791b      	ldrb	r3, [r3, #4]
 80199d0:	e007      	b.n	80199e2 <SUBGRF_GetFskBandwidthRegValue+0x42>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 80199d2:	7bfb      	ldrb	r3, [r7, #15]
 80199d4:	3301      	adds	r3, #1
 80199d6:	73fb      	strb	r3, [r7, #15]
 80199d8:	7bfb      	ldrb	r3, [r7, #15]
 80199da:	2b15      	cmp	r3, #21
 80199dc:	d9ec      	bls.n	80199b8 <SUBGRF_GetFskBandwidthRegValue+0x18>
        }
    }
    // ERROR: Value not found
    while( 1 );
 80199de:	bf00      	nop
 80199e0:	e7fd      	b.n	80199de <SUBGRF_GetFskBandwidthRegValue+0x3e>
}
 80199e2:	4618      	mov	r0, r3
 80199e4:	3714      	adds	r7, #20
 80199e6:	46bd      	mov	sp, r7
 80199e8:	bc80      	pop	{r7}
 80199ea:	4770      	bx	lr
 80199ec:	0801bd98 	.word	0x0801bd98

080199f0 <SUBGRF_GetCFO>:
void SUBGRF_GetCFO( uint32_t bitRate, int32_t *cfo)
{
 80199f0:	b580      	push	{r7, lr}
 80199f2:	b08a      	sub	sp, #40	@ 0x28
 80199f4:	af00      	add	r7, sp, #0
 80199f6:	6078      	str	r0, [r7, #4]
 80199f8:	6039      	str	r1, [r7, #0]
  uint8_t BwMant[] = {4, 8, 10, 12};
 80199fa:	4b35      	ldr	r3, [pc, #212]	@ (8019ad0 <SUBGRF_GetCFO+0xe0>)
 80199fc:	60fb      	str	r3, [r7, #12]
  /* read demod bandwidth: mant bit4:3, exp bits 2:0 */
  uint8_t reg = (SUBGRF_ReadRegister( SUBGHZ_BWSELR ));
 80199fe:	f640 0007 	movw	r0, #2055	@ 0x807
 8019a02:	f7ff fdbb 	bl	801957c <SUBGRF_ReadRegister>
 8019a06:	4603      	mov	r3, r0
 8019a08:	77fb      	strb	r3, [r7, #31]
  uint8_t bandwidth_mant = BwMant[( reg >> 3 ) & 0x3];
 8019a0a:	7ffb      	ldrb	r3, [r7, #31]
 8019a0c:	08db      	lsrs	r3, r3, #3
 8019a0e:	b2db      	uxtb	r3, r3
 8019a10:	f003 0303 	and.w	r3, r3, #3
 8019a14:	3328      	adds	r3, #40	@ 0x28
 8019a16:	443b      	add	r3, r7
 8019a18:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8019a1c:	77bb      	strb	r3, [r7, #30]
  uint8_t bandwidth_exp = reg & 0x7;
 8019a1e:	7ffb      	ldrb	r3, [r7, #31]
 8019a20:	f003 0307 	and.w	r3, r3, #7
 8019a24:	777b      	strb	r3, [r7, #29]
  uint32_t cf_fs = XTAL_FREQ / ( bandwidth_mant * ( 1 << ( bandwidth_exp + 1 )));
 8019a26:	7fba      	ldrb	r2, [r7, #30]
 8019a28:	7f7b      	ldrb	r3, [r7, #29]
 8019a2a:	3301      	adds	r3, #1
 8019a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8019a30:	461a      	mov	r2, r3
 8019a32:	4b28      	ldr	r3, [pc, #160]	@ (8019ad4 <SUBGRF_GetCFO+0xe4>)
 8019a34:	fbb3 f3f2 	udiv	r3, r3, r2
 8019a38:	61bb      	str	r3, [r7, #24]
  uint32_t cf_osr = cf_fs / bitRate;
 8019a3a:	69ba      	ldr	r2, [r7, #24]
 8019a3c:	687b      	ldr	r3, [r7, #4]
 8019a3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8019a42:	617b      	str	r3, [r7, #20]
  uint8_t interp = 1;
 8019a44:	2301      	movs	r3, #1
 8019a46:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  /* calculate demod interpolation factor */
  if (cf_osr * interp < 8)
 8019a4a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8019a4e:	697a      	ldr	r2, [r7, #20]
 8019a50:	fb02 f303 	mul.w	r3, r2, r3
 8019a54:	2b07      	cmp	r3, #7
 8019a56:	d802      	bhi.n	8019a5e <SUBGRF_GetCFO+0x6e>
  {
    interp = 2;
 8019a58:	2302      	movs	r3, #2
 8019a5a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }
  if (cf_osr * interp < 4)
 8019a5e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8019a62:	697a      	ldr	r2, [r7, #20]
 8019a64:	fb02 f303 	mul.w	r3, r2, r3
 8019a68:	2b03      	cmp	r3, #3
 8019a6a:	d802      	bhi.n	8019a72 <SUBGRF_GetCFO+0x82>
  {
    interp = 4;
 8019a6c:	2304      	movs	r3, #4
 8019a6e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }
  /* calculate demod sampling frequency */
  uint32_t fs = cf_fs* interp;
 8019a72:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8019a76:	69bb      	ldr	r3, [r7, #24]
 8019a78:	fb02 f303 	mul.w	r3, r2, r3
 8019a7c:	613b      	str	r3, [r7, #16]
  /* get the cfo registers */
  int32_t cfo_bin = ( SUBGRF_ReadRegister( SUBGHZ_GCFORH ) & 0xF ) << 8;
 8019a7e:	f44f 60d6 	mov.w	r0, #1712	@ 0x6b0
 8019a82:	f7ff fd7b 	bl	801957c <SUBGRF_ReadRegister>
 8019a86:	4603      	mov	r3, r0
 8019a88:	021b      	lsls	r3, r3, #8
 8019a8a:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8019a8e:	623b      	str	r3, [r7, #32]
  cfo_bin |= SUBGRF_ReadRegister( SUBGHZ_GCFORL );
 8019a90:	f240 60b1 	movw	r0, #1713	@ 0x6b1
 8019a94:	f7ff fd72 	bl	801957c <SUBGRF_ReadRegister>
 8019a98:	4603      	mov	r3, r0
 8019a9a:	461a      	mov	r2, r3
 8019a9c:	6a3b      	ldr	r3, [r7, #32]
 8019a9e:	4313      	orrs	r3, r2
 8019aa0:	623b      	str	r3, [r7, #32]
  /* negate if 12 bits sign bit is 1 */
  if (( cfo_bin & 0x800 ) == 0x800 )
 8019aa2:	6a3b      	ldr	r3, [r7, #32]
 8019aa4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8019aa8:	2b00      	cmp	r3, #0
 8019aaa:	d005      	beq.n	8019ab8 <SUBGRF_GetCFO+0xc8>
  {
    cfo_bin |= 0xFFFFF000;
 8019aac:	6a3b      	ldr	r3, [r7, #32]
 8019aae:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 8019ab2:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 8019ab6:	623b      	str	r3, [r7, #32]
  }
  /* calculate cfo in Hz */
  /* shift by 5 first to not saturate, cfo_bin on 12bits */
  *cfo = ((int32_t)( cfo_bin * ( fs >> 5 ))) >> ( 12 - 5 );
 8019ab8:	693b      	ldr	r3, [r7, #16]
 8019aba:	095b      	lsrs	r3, r3, #5
 8019abc:	6a3a      	ldr	r2, [r7, #32]
 8019abe:	fb02 f303 	mul.w	r3, r2, r3
 8019ac2:	11da      	asrs	r2, r3, #7
 8019ac4:	683b      	ldr	r3, [r7, #0]
 8019ac6:	601a      	str	r2, [r3, #0]
}
 8019ac8:	bf00      	nop
 8019aca:	3728      	adds	r7, #40	@ 0x28
 8019acc:	46bd      	mov	sp, r7
 8019ace:	bd80      	pop	{r7, pc}
 8019ad0:	0c0a0804 	.word	0x0c0a0804
 8019ad4:	01e84800 	.word	0x01e84800

08019ad8 <RFW_TransmitLongPacket>:
#endif /* RFW_ENABLE == 1 */

/* Exported functions --------------------------------------------------------*/
int32_t RFW_TransmitLongPacket( uint16_t payload_size, uint32_t timeout,
                                void ( *TxLongPacketGetNextChunkCb )( uint8_t **buffer, uint8_t buffer_size ) )
{
 8019ad8:	b480      	push	{r7}
 8019ada:	b087      	sub	sp, #28
 8019adc:	af00      	add	r7, sp, #0
 8019ade:	4603      	mov	r3, r0
 8019ae0:	60b9      	str	r1, [r7, #8]
 8019ae2:	607a      	str	r2, [r7, #4]
 8019ae4:	81fb      	strh	r3, [r7, #14]
    int32_t status = 0;
 8019ae6:	2300      	movs	r3, #0
 8019ae8:	617b      	str	r3, [r7, #20]
        default:
            break;
        }
    }
#else
    status = -1;
 8019aea:	f04f 33ff 	mov.w	r3, #4294967295
 8019aee:	617b      	str	r3, [r7, #20]
#endif /* RFW_LONGPACKET_ENABLE == 1 */
    return status;
 8019af0:	697b      	ldr	r3, [r7, #20]
}
 8019af2:	4618      	mov	r0, r3
 8019af4:	371c      	adds	r7, #28
 8019af6:	46bd      	mov	sp, r7
 8019af8:	bc80      	pop	{r7}
 8019afa:	4770      	bx	lr

08019afc <RFW_ReceiveLongPacket>:

int32_t RFW_ReceiveLongPacket( uint8_t boosted_mode, uint32_t timeout,
                               void ( *RxLongPacketStoreChunkCb )( uint8_t *buffer, uint8_t chunk_size ) )
{
 8019afc:	b480      	push	{r7}
 8019afe:	b087      	sub	sp, #28
 8019b00:	af00      	add	r7, sp, #0
 8019b02:	4603      	mov	r3, r0
 8019b04:	60b9      	str	r1, [r7, #8]
 8019b06:	607a      	str	r2, [r7, #4]
 8019b08:	73fb      	strb	r3, [r7, #15]
    int32_t status = 0;
 8019b0a:	2300      	movs	r3, #0
 8019b0c:	617b      	str	r3, [r7, #20]
        {
            SUBGRF_SetRx( 0xFFFFFF ); /* Rx Continuous */
        }
    }
#else
    status = -1;
 8019b0e:	f04f 33ff 	mov.w	r3, #4294967295
 8019b12:	617b      	str	r3, [r7, #20]
#endif /* RFW_LONGPACKET_ENABLE == 1 */
    return status;
 8019b14:	697b      	ldr	r3, [r7, #20]
}
 8019b16:	4618      	mov	r0, r3
 8019b18:	371c      	adds	r7, #28
 8019b1a:	46bd      	mov	sp, r7
 8019b1c:	bc80      	pop	{r7}
 8019b1e:	4770      	bx	lr

08019b20 <RFW_Init>:

int32_t RFW_Init( ConfigGeneric_t *config, RadioEvents_t *RadioEvents, TimerEvent_t *TimeoutTimerEvent )
{
 8019b20:	b480      	push	{r7}
 8019b22:	b085      	sub	sp, #20
 8019b24:	af00      	add	r7, sp, #0
 8019b26:	60f8      	str	r0, [r7, #12]
 8019b28:	60b9      	str	r1, [r7, #8]
 8019b2a:	607a      	str	r2, [r7, #4]
    RFWPacket.Init.Enable = 1;
    /* Initialize Timer for end of fixed packet, started at sync*/
    TimerInit( &RFWPacket.Timer, RFW_GetPayloadTimerEvent );
    return 0;
#else
    return -1;
 8019b2c:	f04f 33ff 	mov.w	r3, #4294967295
#endif /* RFW_ENABLE == 1 */
}
 8019b30:	4618      	mov	r0, r3
 8019b32:	3714      	adds	r7, #20
 8019b34:	46bd      	mov	sp, r7
 8019b36:	bc80      	pop	{r7}
 8019b38:	4770      	bx	lr

08019b3a <RFW_DeInit>:

void RFW_DeInit( void )
{
 8019b3a:	b480      	push	{r7}
 8019b3c:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    RFWPacket.Init.Enable = 0; /*Disable the RFWPacket decoding*/
#endif /* RFW_ENABLE == 1 */
}
 8019b3e:	bf00      	nop
 8019b40:	46bd      	mov	sp, r7
 8019b42:	bc80      	pop	{r7}
 8019b44:	4770      	bx	lr

08019b46 <RFW_Is_Init>:

uint8_t RFW_Is_Init( void )
{
 8019b46:	b480      	push	{r7}
 8019b48:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    return RFWPacket.Init.Enable;
#else
    return 0;
 8019b4a:	2300      	movs	r3, #0
#endif /* RFW_ENABLE == 1 */
}
 8019b4c:	4618      	mov	r0, r3
 8019b4e:	46bd      	mov	sp, r7
 8019b50:	bc80      	pop	{r7}
 8019b52:	4770      	bx	lr

08019b54 <RFW_Is_LongPacketModeEnabled>:

uint8_t RFW_Is_LongPacketModeEnabled( void )
{
 8019b54:	b480      	push	{r7}
 8019b56:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    return RFWPacket.LongPacketModeEnable;
#else
    return 0;
 8019b58:	2300      	movs	r3, #0
#endif /* RFW_ENABLE == 1 */
}
 8019b5a:	4618      	mov	r0, r3
 8019b5c:	46bd      	mov	sp, r7
 8019b5e:	bc80      	pop	{r7}
 8019b60:	4770      	bx	lr

08019b62 <RFW_SetAntSwitch>:

void RFW_SetAntSwitch( uint8_t AntSwitch )
{
 8019b62:	b480      	push	{r7}
 8019b64:	b083      	sub	sp, #12
 8019b66:	af00      	add	r7, sp, #0
 8019b68:	4603      	mov	r3, r0
 8019b6a:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE == 1 )
    RFWPacket.AntSwitchPaSelect = AntSwitch;
#endif /* RFW_ENABLE == 1 */
}
 8019b6c:	bf00      	nop
 8019b6e:	370c      	adds	r7, #12
 8019b70:	46bd      	mov	sp, r7
 8019b72:	bc80      	pop	{r7}
 8019b74:	4770      	bx	lr

08019b76 <RFW_TransmitInit>:

int32_t RFW_TransmitInit( uint8_t *inOutBuffer, uint8_t size, uint8_t *outSize )
{
 8019b76:	b480      	push	{r7}
 8019b78:	b087      	sub	sp, #28
 8019b7a:	af00      	add	r7, sp, #0
 8019b7c:	60f8      	str	r0, [r7, #12]
 8019b7e:	460b      	mov	r3, r1
 8019b80:	607a      	str	r2, [r7, #4]
 8019b82:	72fb      	strb	r3, [r7, #11]
    int32_t status = -1;
 8019b84:	f04f 33ff 	mov.w	r3, #4294967295
 8019b88:	617b      	str	r3, [r7, #20]
        RFWPacket.LongPacketModeEnable = 0;

        status = 0;
    }
#endif /* RFW_ENABLE == 1 */
    return status;
 8019b8a:	697b      	ldr	r3, [r7, #20]
}
 8019b8c:	4618      	mov	r0, r3
 8019b8e:	371c      	adds	r7, #28
 8019b90:	46bd      	mov	sp, r7
 8019b92:	bc80      	pop	{r7}
 8019b94:	4770      	bx	lr

08019b96 <RFW_ReceiveInit>:

int32_t RFW_ReceiveInit( void )
{
 8019b96:	b480      	push	{r7}
 8019b98:	af00      	add	r7, sp, #0
    RFWPacket.RxPayloadOffset = 0;

    RFWPacket.LongPacketModeEnable = 0;
    return 0;
#else
    return -1;
 8019b9a:	f04f 33ff 	mov.w	r3, #4294967295
#endif /* RFW_ENABLE == 1 */
}
 8019b9e:	4618      	mov	r0, r3
 8019ba0:	46bd      	mov	sp, r7
 8019ba2:	bc80      	pop	{r7}
 8019ba4:	4770      	bx	lr

08019ba6 <RFW_DeInit_TxLongPacket>:

void RFW_DeInit_TxLongPacket( void )
{
 8019ba6:	b480      	push	{r7}
 8019ba8:	af00      	add	r7, sp, #0
    /*long packet WA*/
    uint8_t reg = SUBGRF_ReadRegister( SUBGHZ_GPKTCTL1AR );
    SUBGRF_WriteRegister( SUBGHZ_GPKTCTL1AR, reg & ~0x02 ); /* clear infinite_sequence bit */
    SUBGRF_WriteRegister( SUBGHZ_GRTXPLDLEN, 0xFF ); /* RxTxPldLen: reset to 0xFF */
#endif /* RFW_LONGPACKET_ENABLE == 1 */
}
 8019baa:	bf00      	nop
 8019bac:	46bd      	mov	sp, r7
 8019bae:	bc80      	pop	{r7}
 8019bb0:	4770      	bx	lr

08019bb2 <RFW_ReceivePayload>:

void RFW_ReceivePayload( void )
{
 8019bb2:	b480      	push	{r7}
 8019bb4:	af00      	add	r7, sp, #0
        /*timeout*/
        SUBGRF_SetStandby( STDBY_RC );
        RFWPacket.Init.RadioEvents->RxTimeout( );
    }
#endif /* RFW_ENABLE == 1 */
}
 8019bb6:	bf00      	nop
 8019bb8:	46bd      	mov	sp, r7
 8019bba:	bc80      	pop	{r7}
 8019bbc:	4770      	bx	lr

08019bbe <RFW_SetRadioModem>:

void RFW_SetRadioModem( RadioModems_t Modem )
{
 8019bbe:	b480      	push	{r7}
 8019bc0:	b083      	sub	sp, #12
 8019bc2:	af00      	add	r7, sp, #0
 8019bc4:	4603      	mov	r3, r0
 8019bc6:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE == 1 )
    RFWPacket.Init.Modem = Modem;
#endif /* RFW_ENABLE == 1 */
}
 8019bc8:	bf00      	nop
 8019bca:	370c      	adds	r7, #12
 8019bcc:	46bd      	mov	sp, r7
 8019bce:	bc80      	pop	{r7}
 8019bd0:	4770      	bx	lr
	...

08019bd4 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 8019bd4:	b480      	push	{r7}
 8019bd6:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 8019bd8:	4b04      	ldr	r3, [pc, #16]	@ (8019bec <UTIL_LPM_Init+0x18>)
 8019bda:	2200      	movs	r2, #0
 8019bdc:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 8019bde:	4b04      	ldr	r3, [pc, #16]	@ (8019bf0 <UTIL_LPM_Init+0x1c>)
 8019be0:	2200      	movs	r2, #0
 8019be2:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 8019be4:	bf00      	nop
 8019be6:	46bd      	mov	sp, r7
 8019be8:	bc80      	pop	{r7}
 8019bea:	4770      	bx	lr
 8019bec:	20001588 	.word	0x20001588
 8019bf0:	2000158c 	.word	0x2000158c

08019bf4 <UTIL_LPM_SetStopMode>:
void UTIL_LPM_DeInit( void )
{
}

void UTIL_LPM_SetStopMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 8019bf4:	b480      	push	{r7}
 8019bf6:	b087      	sub	sp, #28
 8019bf8:	af00      	add	r7, sp, #0
 8019bfa:	6078      	str	r0, [r7, #4]
 8019bfc:	460b      	mov	r3, r1
 8019bfe:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019c00:	f3ef 8310 	mrs	r3, PRIMASK
 8019c04:	613b      	str	r3, [r7, #16]
  return(result);
 8019c06:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 8019c08:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8019c0a:	b672      	cpsid	i
}
 8019c0c:	bf00      	nop
  
  switch( state )
 8019c0e:	78fb      	ldrb	r3, [r7, #3]
 8019c10:	2b00      	cmp	r3, #0
 8019c12:	d008      	beq.n	8019c26 <UTIL_LPM_SetStopMode+0x32>
 8019c14:	2b01      	cmp	r3, #1
 8019c16:	d10e      	bne.n	8019c36 <UTIL_LPM_SetStopMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      StopModeDisable |= lpm_id_bm;
 8019c18:	4b0d      	ldr	r3, [pc, #52]	@ (8019c50 <UTIL_LPM_SetStopMode+0x5c>)
 8019c1a:	681a      	ldr	r2, [r3, #0]
 8019c1c:	687b      	ldr	r3, [r7, #4]
 8019c1e:	4313      	orrs	r3, r2
 8019c20:	4a0b      	ldr	r2, [pc, #44]	@ (8019c50 <UTIL_LPM_SetStopMode+0x5c>)
 8019c22:	6013      	str	r3, [r2, #0]
      break;
 8019c24:	e008      	b.n	8019c38 <UTIL_LPM_SetStopMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      StopModeDisable &= ( ~lpm_id_bm );
 8019c26:	687b      	ldr	r3, [r7, #4]
 8019c28:	43da      	mvns	r2, r3
 8019c2a:	4b09      	ldr	r3, [pc, #36]	@ (8019c50 <UTIL_LPM_SetStopMode+0x5c>)
 8019c2c:	681b      	ldr	r3, [r3, #0]
 8019c2e:	4013      	ands	r3, r2
 8019c30:	4a07      	ldr	r2, [pc, #28]	@ (8019c50 <UTIL_LPM_SetStopMode+0x5c>)
 8019c32:	6013      	str	r3, [r2, #0]
      break;
 8019c34:	e000      	b.n	8019c38 <UTIL_LPM_SetStopMode+0x44>
    }
  default :
    {
      break;
 8019c36:	bf00      	nop
 8019c38:	697b      	ldr	r3, [r7, #20]
 8019c3a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019c3c:	68fb      	ldr	r3, [r7, #12]
 8019c3e:	f383 8810 	msr	PRIMASK, r3
}
 8019c42:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8019c44:	bf00      	nop
 8019c46:	371c      	adds	r7, #28
 8019c48:	46bd      	mov	sp, r7
 8019c4a:	bc80      	pop	{r7}
 8019c4c:	4770      	bx	lr
 8019c4e:	bf00      	nop
 8019c50:	20001588 	.word	0x20001588

08019c54 <UTIL_LPM_SetOffMode>:

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 8019c54:	b480      	push	{r7}
 8019c56:	b087      	sub	sp, #28
 8019c58:	af00      	add	r7, sp, #0
 8019c5a:	6078      	str	r0, [r7, #4]
 8019c5c:	460b      	mov	r3, r1
 8019c5e:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019c60:	f3ef 8310 	mrs	r3, PRIMASK
 8019c64:	613b      	str	r3, [r7, #16]
  return(result);
 8019c66:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 8019c68:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8019c6a:	b672      	cpsid	i
}
 8019c6c:	bf00      	nop
  
  switch(state)
 8019c6e:	78fb      	ldrb	r3, [r7, #3]
 8019c70:	2b00      	cmp	r3, #0
 8019c72:	d008      	beq.n	8019c86 <UTIL_LPM_SetOffMode+0x32>
 8019c74:	2b01      	cmp	r3, #1
 8019c76:	d10e      	bne.n	8019c96 <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 8019c78:	4b0d      	ldr	r3, [pc, #52]	@ (8019cb0 <UTIL_LPM_SetOffMode+0x5c>)
 8019c7a:	681a      	ldr	r2, [r3, #0]
 8019c7c:	687b      	ldr	r3, [r7, #4]
 8019c7e:	4313      	orrs	r3, r2
 8019c80:	4a0b      	ldr	r2, [pc, #44]	@ (8019cb0 <UTIL_LPM_SetOffMode+0x5c>)
 8019c82:	6013      	str	r3, [r2, #0]
      break;
 8019c84:	e008      	b.n	8019c98 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 8019c86:	687b      	ldr	r3, [r7, #4]
 8019c88:	43da      	mvns	r2, r3
 8019c8a:	4b09      	ldr	r3, [pc, #36]	@ (8019cb0 <UTIL_LPM_SetOffMode+0x5c>)
 8019c8c:	681b      	ldr	r3, [r3, #0]
 8019c8e:	4013      	ands	r3, r2
 8019c90:	4a07      	ldr	r2, [pc, #28]	@ (8019cb0 <UTIL_LPM_SetOffMode+0x5c>)
 8019c92:	6013      	str	r3, [r2, #0]
      break;
 8019c94:	e000      	b.n	8019c98 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 8019c96:	bf00      	nop
 8019c98:	697b      	ldr	r3, [r7, #20]
 8019c9a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019c9c:	68fb      	ldr	r3, [r7, #12]
 8019c9e:	f383 8810 	msr	PRIMASK, r3
}
 8019ca2:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8019ca4:	bf00      	nop
 8019ca6:	371c      	adds	r7, #28
 8019ca8:	46bd      	mov	sp, r7
 8019caa:	bc80      	pop	{r7}
 8019cac:	4770      	bx	lr
 8019cae:	bf00      	nop
 8019cb0:	2000158c 	.word	0x2000158c

08019cb4 <UTIL_LPM_EnterLowPower>:

  return mode_selected;
}

void UTIL_LPM_EnterLowPower( void )
{
 8019cb4:	b580      	push	{r7, lr}
 8019cb6:	b084      	sub	sp, #16
 8019cb8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019cba:	f3ef 8310 	mrs	r3, PRIMASK
 8019cbe:	60bb      	str	r3, [r7, #8]
  return(result);
 8019cc0:	68bb      	ldr	r3, [r7, #8]
  UTIL_LPM_ENTER_CRITICAL_SECTION_ELP( );
 8019cc2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8019cc4:	b672      	cpsid	i
}
 8019cc6:	bf00      	nop

  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 8019cc8:	4b12      	ldr	r3, [pc, #72]	@ (8019d14 <UTIL_LPM_EnterLowPower+0x60>)
 8019cca:	681b      	ldr	r3, [r3, #0]
 8019ccc:	2b00      	cmp	r3, #0
 8019cce:	d006      	beq.n	8019cde <UTIL_LPM_EnterLowPower+0x2a>
  {
    /**
     * At least one user disallows Stop Mode
     * SLEEP mode is required
     */
      UTIL_PowerDriver.EnterSleepMode( );
 8019cd0:	4b11      	ldr	r3, [pc, #68]	@ (8019d18 <UTIL_LPM_EnterLowPower+0x64>)
 8019cd2:	681b      	ldr	r3, [r3, #0]
 8019cd4:	4798      	blx	r3
      UTIL_PowerDriver.ExitSleepMode( );
 8019cd6:	4b10      	ldr	r3, [pc, #64]	@ (8019d18 <UTIL_LPM_EnterLowPower+0x64>)
 8019cd8:	685b      	ldr	r3, [r3, #4]
 8019cda:	4798      	blx	r3
 8019cdc:	e010      	b.n	8019d00 <UTIL_LPM_EnterLowPower+0x4c>
  }
  else
  { 
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 8019cde:	4b0f      	ldr	r3, [pc, #60]	@ (8019d1c <UTIL_LPM_EnterLowPower+0x68>)
 8019ce0:	681b      	ldr	r3, [r3, #0]
 8019ce2:	2b00      	cmp	r3, #0
 8019ce4:	d006      	beq.n	8019cf4 <UTIL_LPM_EnterLowPower+0x40>
    {
      /**
       * At least one user disallows Off Mode
       * STOP mode is required
       */
        UTIL_PowerDriver.EnterStopMode( );
 8019ce6:	4b0c      	ldr	r3, [pc, #48]	@ (8019d18 <UTIL_LPM_EnterLowPower+0x64>)
 8019ce8:	689b      	ldr	r3, [r3, #8]
 8019cea:	4798      	blx	r3
        UTIL_PowerDriver.ExitStopMode( );
 8019cec:	4b0a      	ldr	r3, [pc, #40]	@ (8019d18 <UTIL_LPM_EnterLowPower+0x64>)
 8019cee:	68db      	ldr	r3, [r3, #12]
 8019cf0:	4798      	blx	r3
 8019cf2:	e005      	b.n	8019d00 <UTIL_LPM_EnterLowPower+0x4c>
    else
    {
      /**
       * OFF mode is required
       */
      UTIL_PowerDriver.EnterOffMode( );
 8019cf4:	4b08      	ldr	r3, [pc, #32]	@ (8019d18 <UTIL_LPM_EnterLowPower+0x64>)
 8019cf6:	691b      	ldr	r3, [r3, #16]
 8019cf8:	4798      	blx	r3
      UTIL_PowerDriver.ExitOffMode( );
 8019cfa:	4b07      	ldr	r3, [pc, #28]	@ (8019d18 <UTIL_LPM_EnterLowPower+0x64>)
 8019cfc:	695b      	ldr	r3, [r3, #20]
 8019cfe:	4798      	blx	r3
 8019d00:	68fb      	ldr	r3, [r7, #12]
 8019d02:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019d04:	687b      	ldr	r3, [r7, #4]
 8019d06:	f383 8810 	msr	PRIMASK, r3
}
 8019d0a:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION_ELP( );
}
 8019d0c:	bf00      	nop
 8019d0e:	3710      	adds	r7, #16
 8019d10:	46bd      	mov	sp, r7
 8019d12:	bd80      	pop	{r7, pc}
 8019d14:	20001588 	.word	0x20001588
 8019d18:	0801b7fc 	.word	0x0801b7fc
 8019d1c:	2000158c 	.word	0x2000158c

08019d20 <UTIL_MEM_cpy_8>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

void UTIL_MEM_cpy_8( void *dst, const void *src, uint16_t size )
{
 8019d20:	b480      	push	{r7}
 8019d22:	b087      	sub	sp, #28
 8019d24:	af00      	add	r7, sp, #0
 8019d26:	60f8      	str	r0, [r7, #12]
 8019d28:	60b9      	str	r1, [r7, #8]
 8019d2a:	4613      	mov	r3, r2
 8019d2c:	80fb      	strh	r3, [r7, #6]
  uint8_t* dst8= (uint8_t *) dst;
 8019d2e:	68fb      	ldr	r3, [r7, #12]
 8019d30:	617b      	str	r3, [r7, #20]
  uint8_t* src8= (uint8_t *) src;
 8019d32:	68bb      	ldr	r3, [r7, #8]
 8019d34:	613b      	str	r3, [r7, #16]

  while( size-- )
 8019d36:	e007      	b.n	8019d48 <UTIL_MEM_cpy_8+0x28>
    {
        *dst8++ = *src8++;
 8019d38:	693a      	ldr	r2, [r7, #16]
 8019d3a:	1c53      	adds	r3, r2, #1
 8019d3c:	613b      	str	r3, [r7, #16]
 8019d3e:	697b      	ldr	r3, [r7, #20]
 8019d40:	1c59      	adds	r1, r3, #1
 8019d42:	6179      	str	r1, [r7, #20]
 8019d44:	7812      	ldrb	r2, [r2, #0]
 8019d46:	701a      	strb	r2, [r3, #0]
  while( size-- )
 8019d48:	88fb      	ldrh	r3, [r7, #6]
 8019d4a:	1e5a      	subs	r2, r3, #1
 8019d4c:	80fa      	strh	r2, [r7, #6]
 8019d4e:	2b00      	cmp	r3, #0
 8019d50:	d1f2      	bne.n	8019d38 <UTIL_MEM_cpy_8+0x18>
    }
}
 8019d52:	bf00      	nop
 8019d54:	bf00      	nop
 8019d56:	371c      	adds	r7, #28
 8019d58:	46bd      	mov	sp, r7
 8019d5a:	bc80      	pop	{r7}
 8019d5c:	4770      	bx	lr

08019d5e <UTIL_MEM_set_8>:
        *dst8-- = *src8++;
    }
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
 8019d5e:	b480      	push	{r7}
 8019d60:	b085      	sub	sp, #20
 8019d62:	af00      	add	r7, sp, #0
 8019d64:	6078      	str	r0, [r7, #4]
 8019d66:	460b      	mov	r3, r1
 8019d68:	70fb      	strb	r3, [r7, #3]
 8019d6a:	4613      	mov	r3, r2
 8019d6c:	803b      	strh	r3, [r7, #0]
  uint8_t* dst8= (uint8_t *) dst;
 8019d6e:	687b      	ldr	r3, [r7, #4]
 8019d70:	60fb      	str	r3, [r7, #12]
  while( size-- )
 8019d72:	e004      	b.n	8019d7e <UTIL_MEM_set_8+0x20>
  {
    *dst8++ = value;
 8019d74:	68fb      	ldr	r3, [r7, #12]
 8019d76:	1c5a      	adds	r2, r3, #1
 8019d78:	60fa      	str	r2, [r7, #12]
 8019d7a:	78fa      	ldrb	r2, [r7, #3]
 8019d7c:	701a      	strb	r2, [r3, #0]
  while( size-- )
 8019d7e:	883b      	ldrh	r3, [r7, #0]
 8019d80:	1e5a      	subs	r2, r3, #1
 8019d82:	803a      	strh	r2, [r7, #0]
 8019d84:	2b00      	cmp	r3, #0
 8019d86:	d1f5      	bne.n	8019d74 <UTIL_MEM_set_8+0x16>
  }
}
 8019d88:	bf00      	nop
 8019d8a:	bf00      	nop
 8019d8c:	3714      	adds	r7, #20
 8019d8e:	46bd      	mov	sp, r7
 8019d90:	bc80      	pop	{r7}
 8019d92:	4770      	bx	lr

08019d94 <SysTimeAdd>:
  * @addtogroup SYSTIME_exported_function
  *  @{
  */

SysTime_t SysTimeAdd( SysTime_t a, SysTime_t b )
{
 8019d94:	b082      	sub	sp, #8
 8019d96:	b480      	push	{r7}
 8019d98:	b087      	sub	sp, #28
 8019d9a:	af00      	add	r7, sp, #0
 8019d9c:	60f8      	str	r0, [r7, #12]
 8019d9e:	1d38      	adds	r0, r7, #4
 8019da0:	e880 0006 	stmia.w	r0, {r1, r2}
 8019da4:	627b      	str	r3, [r7, #36]	@ 0x24
  SysTime_t c =  { .Seconds = 0, .SubSeconds = 0 };
 8019da6:	2300      	movs	r3, #0
 8019da8:	613b      	str	r3, [r7, #16]
 8019daa:	2300      	movs	r3, #0
 8019dac:	82bb      	strh	r3, [r7, #20]

  c.Seconds = a.Seconds + b.Seconds;
 8019dae:	687a      	ldr	r2, [r7, #4]
 8019db0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019db2:	4413      	add	r3, r2
 8019db4:	613b      	str	r3, [r7, #16]
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 8019db6:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8019dba:	b29a      	uxth	r2, r3
 8019dbc:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 8019dc0:	b29b      	uxth	r3, r3
 8019dc2:	4413      	add	r3, r2
 8019dc4:	b29b      	uxth	r3, r3
 8019dc6:	b21b      	sxth	r3, r3
 8019dc8:	82bb      	strh	r3, [r7, #20]
  if( c.SubSeconds >= 1000 )
 8019dca:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8019dce:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8019dd2:	db0a      	blt.n	8019dea <SysTimeAdd+0x56>
  {
    c.Seconds++;
 8019dd4:	693b      	ldr	r3, [r7, #16]
 8019dd6:	3301      	adds	r3, #1
 8019dd8:	613b      	str	r3, [r7, #16]
    c.SubSeconds -= 1000;
 8019dda:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8019dde:	b29b      	uxth	r3, r3
 8019de0:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8019de4:	b29b      	uxth	r3, r3
 8019de6:	b21b      	sxth	r3, r3
 8019de8:	82bb      	strh	r3, [r7, #20]
  }
  return c;
 8019dea:	68fb      	ldr	r3, [r7, #12]
 8019dec:	461a      	mov	r2, r3
 8019dee:	f107 0310 	add.w	r3, r7, #16
 8019df2:	e893 0003 	ldmia.w	r3, {r0, r1}
 8019df6:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8019dfa:	68f8      	ldr	r0, [r7, #12]
 8019dfc:	371c      	adds	r7, #28
 8019dfe:	46bd      	mov	sp, r7
 8019e00:	bc80      	pop	{r7}
 8019e02:	b002      	add	sp, #8
 8019e04:	4770      	bx	lr

08019e06 <SysTimeSub>:

SysTime_t SysTimeSub( SysTime_t a, SysTime_t b )
{
 8019e06:	b082      	sub	sp, #8
 8019e08:	b480      	push	{r7}
 8019e0a:	b087      	sub	sp, #28
 8019e0c:	af00      	add	r7, sp, #0
 8019e0e:	60f8      	str	r0, [r7, #12]
 8019e10:	1d38      	adds	r0, r7, #4
 8019e12:	e880 0006 	stmia.w	r0, {r1, r2}
 8019e16:	627b      	str	r3, [r7, #36]	@ 0x24
  SysTime_t c = { .Seconds = 0, .SubSeconds = 0 };
 8019e18:	2300      	movs	r3, #0
 8019e1a:	613b      	str	r3, [r7, #16]
 8019e1c:	2300      	movs	r3, #0
 8019e1e:	82bb      	strh	r3, [r7, #20]

  c.Seconds = a.Seconds - b.Seconds;
 8019e20:	687a      	ldr	r2, [r7, #4]
 8019e22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019e24:	1ad3      	subs	r3, r2, r3
 8019e26:	613b      	str	r3, [r7, #16]
  c.SubSeconds = a.SubSeconds - b.SubSeconds;
 8019e28:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8019e2c:	b29a      	uxth	r2, r3
 8019e2e:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 8019e32:	b29b      	uxth	r3, r3
 8019e34:	1ad3      	subs	r3, r2, r3
 8019e36:	b29b      	uxth	r3, r3
 8019e38:	b21b      	sxth	r3, r3
 8019e3a:	82bb      	strh	r3, [r7, #20]
  if( c.SubSeconds < 0 )
 8019e3c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8019e40:	2b00      	cmp	r3, #0
 8019e42:	da0a      	bge.n	8019e5a <SysTimeSub+0x54>
  {
    c.Seconds--;
 8019e44:	693b      	ldr	r3, [r7, #16]
 8019e46:	3b01      	subs	r3, #1
 8019e48:	613b      	str	r3, [r7, #16]
    c.SubSeconds += 1000;
 8019e4a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8019e4e:	b29b      	uxth	r3, r3
 8019e50:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8019e54:	b29b      	uxth	r3, r3
 8019e56:	b21b      	sxth	r3, r3
 8019e58:	82bb      	strh	r3, [r7, #20]
  }
  return c;
 8019e5a:	68fb      	ldr	r3, [r7, #12]
 8019e5c:	461a      	mov	r2, r3
 8019e5e:	f107 0310 	add.w	r3, r7, #16
 8019e62:	e893 0003 	ldmia.w	r3, {r0, r1}
 8019e66:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8019e6a:	68f8      	ldr	r0, [r7, #12]
 8019e6c:	371c      	adds	r7, #28
 8019e6e:	46bd      	mov	sp, r7
 8019e70:	bc80      	pop	{r7}
 8019e72:	b002      	add	sp, #8
 8019e74:	4770      	bx	lr
	...

08019e78 <SysTimeSet>:

void SysTimeSet( SysTime_t sysTime )
{
 8019e78:	b580      	push	{r7, lr}
 8019e7a:	b088      	sub	sp, #32
 8019e7c:	af02      	add	r7, sp, #8
 8019e7e:	463b      	mov	r3, r7
 8019e80:	e883 0003 	stmia.w	r3, {r0, r1}
  SysTime_t DeltaTime;

  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 8019e84:	2300      	movs	r3, #0
 8019e86:	60bb      	str	r3, [r7, #8]
 8019e88:	2300      	movs	r3, #0
 8019e8a:	81bb      	strh	r3, [r7, #12]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 8019e8c:	4b10      	ldr	r3, [pc, #64]	@ (8019ed0 <SysTimeSet+0x58>)
 8019e8e:	691b      	ldr	r3, [r3, #16]
 8019e90:	f107 0208 	add.w	r2, r7, #8
 8019e94:	3204      	adds	r2, #4
 8019e96:	4610      	mov	r0, r2
 8019e98:	4798      	blx	r3
 8019e9a:	4603      	mov	r3, r0
 8019e9c:	60bb      	str	r3, [r7, #8]

  // sysTime is UNIX epoch
  DeltaTime = SysTimeSub( sysTime, calendarTime );
 8019e9e:	f107 0010 	add.w	r0, r7, #16
 8019ea2:	68fb      	ldr	r3, [r7, #12]
 8019ea4:	9300      	str	r3, [sp, #0]
 8019ea6:	68bb      	ldr	r3, [r7, #8]
 8019ea8:	463a      	mov	r2, r7
 8019eaa:	ca06      	ldmia	r2, {r1, r2}
 8019eac:	f7ff ffab 	bl	8019e06 <SysTimeSub>

  UTIL_SYSTIMDriver.BKUPWrite_Seconds( DeltaTime.Seconds );
 8019eb0:	4b07      	ldr	r3, [pc, #28]	@ (8019ed0 <SysTimeSet+0x58>)
 8019eb2:	681b      	ldr	r3, [r3, #0]
 8019eb4:	693a      	ldr	r2, [r7, #16]
 8019eb6:	4610      	mov	r0, r2
 8019eb8:	4798      	blx	r3
  UTIL_SYSTIMDriver.BKUPWrite_SubSeconds( ( uint32_t ) DeltaTime.SubSeconds );
 8019eba:	4b05      	ldr	r3, [pc, #20]	@ (8019ed0 <SysTimeSet+0x58>)
 8019ebc:	689b      	ldr	r3, [r3, #8]
 8019ebe:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8019ec2:	4610      	mov	r0, r2
 8019ec4:	4798      	blx	r3
}
 8019ec6:	bf00      	nop
 8019ec8:	3718      	adds	r7, #24
 8019eca:	46bd      	mov	sp, r7
 8019ecc:	bd80      	pop	{r7, pc}
 8019ece:	bf00      	nop
 8019ed0:	0801b8e0 	.word	0x0801b8e0

08019ed4 <SysTimeGet>:

SysTime_t SysTimeGet( void )
{
 8019ed4:	b580      	push	{r7, lr}
 8019ed6:	b08a      	sub	sp, #40	@ 0x28
 8019ed8:	af02      	add	r7, sp, #8
 8019eda:	6078      	str	r0, [r7, #4]
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 8019edc:	2300      	movs	r3, #0
 8019ede:	61bb      	str	r3, [r7, #24]
 8019ee0:	2300      	movs	r3, #0
 8019ee2:	83bb      	strh	r3, [r7, #28]
  SysTime_t sysTime = { .Seconds = 0, .SubSeconds = 0 };
 8019ee4:	2300      	movs	r3, #0
 8019ee6:	613b      	str	r3, [r7, #16]
 8019ee8:	2300      	movs	r3, #0
 8019eea:	82bb      	strh	r3, [r7, #20]
  SysTime_t DeltaTime;

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 8019eec:	4b14      	ldr	r3, [pc, #80]	@ (8019f40 <SysTimeGet+0x6c>)
 8019eee:	691b      	ldr	r3, [r3, #16]
 8019ef0:	f107 0218 	add.w	r2, r7, #24
 8019ef4:	3204      	adds	r2, #4
 8019ef6:	4610      	mov	r0, r2
 8019ef8:	4798      	blx	r3
 8019efa:	4603      	mov	r3, r0
 8019efc:	61bb      	str	r3, [r7, #24]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 8019efe:	4b10      	ldr	r3, [pc, #64]	@ (8019f40 <SysTimeGet+0x6c>)
 8019f00:	68db      	ldr	r3, [r3, #12]
 8019f02:	4798      	blx	r3
 8019f04:	4603      	mov	r3, r0
 8019f06:	b21b      	sxth	r3, r3
 8019f08:	81bb      	strh	r3, [r7, #12]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 8019f0a:	4b0d      	ldr	r3, [pc, #52]	@ (8019f40 <SysTimeGet+0x6c>)
 8019f0c:	685b      	ldr	r3, [r3, #4]
 8019f0e:	4798      	blx	r3
 8019f10:	4603      	mov	r3, r0
 8019f12:	60bb      	str	r3, [r7, #8]

  sysTime = SysTimeAdd( DeltaTime, calendarTime );
 8019f14:	f107 0010 	add.w	r0, r7, #16
 8019f18:	69fb      	ldr	r3, [r7, #28]
 8019f1a:	9300      	str	r3, [sp, #0]
 8019f1c:	69bb      	ldr	r3, [r7, #24]
 8019f1e:	f107 0208 	add.w	r2, r7, #8
 8019f22:	ca06      	ldmia	r2, {r1, r2}
 8019f24:	f7ff ff36 	bl	8019d94 <SysTimeAdd>

  return sysTime;
 8019f28:	687b      	ldr	r3, [r7, #4]
 8019f2a:	461a      	mov	r2, r3
 8019f2c:	f107 0310 	add.w	r3, r7, #16
 8019f30:	e893 0003 	ldmia.w	r3, {r0, r1}
 8019f34:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8019f38:	6878      	ldr	r0, [r7, #4]
 8019f3a:	3720      	adds	r7, #32
 8019f3c:	46bd      	mov	sp, r7
 8019f3e:	bd80      	pop	{r7, pc}
 8019f40:	0801b8e0 	.word	0x0801b8e0

08019f44 <SysTimeGetMcuTime>:


SysTime_t SysTimeGetMcuTime( void )
{
 8019f44:	b580      	push	{r7, lr}
 8019f46:	b084      	sub	sp, #16
 8019f48:	af00      	add	r7, sp, #0
 8019f4a:	6078      	str	r0, [r7, #4]
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 8019f4c:	2300      	movs	r3, #0
 8019f4e:	60bb      	str	r3, [r7, #8]
 8019f50:	2300      	movs	r3, #0
 8019f52:	81bb      	strh	r3, [r7, #12]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 8019f54:	4b0a      	ldr	r3, [pc, #40]	@ (8019f80 <SysTimeGetMcuTime+0x3c>)
 8019f56:	691b      	ldr	r3, [r3, #16]
 8019f58:	f107 0208 	add.w	r2, r7, #8
 8019f5c:	3204      	adds	r2, #4
 8019f5e:	4610      	mov	r0, r2
 8019f60:	4798      	blx	r3
 8019f62:	4603      	mov	r3, r0
 8019f64:	60bb      	str	r3, [r7, #8]

  return calendarTime;
 8019f66:	687b      	ldr	r3, [r7, #4]
 8019f68:	461a      	mov	r2, r3
 8019f6a:	f107 0308 	add.w	r3, r7, #8
 8019f6e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8019f72:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8019f76:	6878      	ldr	r0, [r7, #4]
 8019f78:	3710      	adds	r7, #16
 8019f7a:	46bd      	mov	sp, r7
 8019f7c:	bd80      	pop	{r7, pc}
 8019f7e:	bf00      	nop
 8019f80:	0801b8e0 	.word	0x0801b8e0

08019f84 <SysTimeToMs>:

uint32_t SysTimeToMs( SysTime_t sysTime )
{
 8019f84:	b580      	push	{r7, lr}
 8019f86:	b088      	sub	sp, #32
 8019f88:	af02      	add	r7, sp, #8
 8019f8a:	463b      	mov	r3, r7
 8019f8c:	e883 0003 	stmia.w	r3, {r0, r1}
  SysTime_t DeltaTime;
  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 8019f90:	4b0f      	ldr	r3, [pc, #60]	@ (8019fd0 <SysTimeToMs+0x4c>)
 8019f92:	68db      	ldr	r3, [r3, #12]
 8019f94:	4798      	blx	r3
 8019f96:	4603      	mov	r3, r0
 8019f98:	b21b      	sxth	r3, r3
 8019f9a:	82bb      	strh	r3, [r7, #20]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 8019f9c:	4b0c      	ldr	r3, [pc, #48]	@ (8019fd0 <SysTimeToMs+0x4c>)
 8019f9e:	685b      	ldr	r3, [r3, #4]
 8019fa0:	4798      	blx	r3
 8019fa2:	4603      	mov	r3, r0
 8019fa4:	613b      	str	r3, [r7, #16]

  SysTime_t calendarTime = SysTimeSub( sysTime, DeltaTime );
 8019fa6:	f107 0008 	add.w	r0, r7, #8
 8019faa:	697b      	ldr	r3, [r7, #20]
 8019fac:	9300      	str	r3, [sp, #0]
 8019fae:	693b      	ldr	r3, [r7, #16]
 8019fb0:	463a      	mov	r2, r7
 8019fb2:	ca06      	ldmia	r2, {r1, r2}
 8019fb4:	f7ff ff27 	bl	8019e06 <SysTimeSub>
  return calendarTime.Seconds * 1000 + calendarTime.SubSeconds;
 8019fb8:	68bb      	ldr	r3, [r7, #8]
 8019fba:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8019fbe:	fb02 f303 	mul.w	r3, r2, r3
 8019fc2:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8019fc6:	4413      	add	r3, r2
}
 8019fc8:	4618      	mov	r0, r3
 8019fca:	3718      	adds	r7, #24
 8019fcc:	46bd      	mov	sp, r7
 8019fce:	bd80      	pop	{r7, pc}
 8019fd0:	0801b8e0 	.word	0x0801b8e0

08019fd4 <SysTimeFromMs>:

SysTime_t SysTimeFromMs( uint32_t timeMs )
{
 8019fd4:	b580      	push	{r7, lr}
 8019fd6:	b08a      	sub	sp, #40	@ 0x28
 8019fd8:	af02      	add	r7, sp, #8
 8019fda:	6078      	str	r0, [r7, #4]
 8019fdc:	6039      	str	r1, [r7, #0]
  uint32_t seconds = timeMs / 1000;
 8019fde:	683b      	ldr	r3, [r7, #0]
 8019fe0:	4a19      	ldr	r2, [pc, #100]	@ (801a048 <SysTimeFromMs+0x74>)
 8019fe2:	fba2 2303 	umull	r2, r3, r2, r3
 8019fe6:	099b      	lsrs	r3, r3, #6
 8019fe8:	61fb      	str	r3, [r7, #28]
  SysTime_t sysTime = { .Seconds = seconds, .SubSeconds =  timeMs - seconds * 1000 };
 8019fea:	69fb      	ldr	r3, [r7, #28]
 8019fec:	617b      	str	r3, [r7, #20]
 8019fee:	683b      	ldr	r3, [r7, #0]
 8019ff0:	b29a      	uxth	r2, r3
 8019ff2:	69fb      	ldr	r3, [r7, #28]
 8019ff4:	b29b      	uxth	r3, r3
 8019ff6:	4619      	mov	r1, r3
 8019ff8:	0149      	lsls	r1, r1, #5
 8019ffa:	1ac9      	subs	r1, r1, r3
 8019ffc:	0089      	lsls	r1, r1, #2
 8019ffe:	440b      	add	r3, r1
 801a000:	00db      	lsls	r3, r3, #3
 801a002:	b29b      	uxth	r3, r3
 801a004:	1ad3      	subs	r3, r2, r3
 801a006:	b29b      	uxth	r3, r3
 801a008:	b21b      	sxth	r3, r3
 801a00a:	833b      	strh	r3, [r7, #24]
  SysTime_t DeltaTime = { 0 };
 801a00c:	f107 030c 	add.w	r3, r7, #12
 801a010:	2200      	movs	r2, #0
 801a012:	601a      	str	r2, [r3, #0]
 801a014:	605a      	str	r2, [r3, #4]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 801a016:	4b0d      	ldr	r3, [pc, #52]	@ (801a04c <SysTimeFromMs+0x78>)
 801a018:	68db      	ldr	r3, [r3, #12]
 801a01a:	4798      	blx	r3
 801a01c:	4603      	mov	r3, r0
 801a01e:	b21b      	sxth	r3, r3
 801a020:	823b      	strh	r3, [r7, #16]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 801a022:	4b0a      	ldr	r3, [pc, #40]	@ (801a04c <SysTimeFromMs+0x78>)
 801a024:	685b      	ldr	r3, [r3, #4]
 801a026:	4798      	blx	r3
 801a028:	4603      	mov	r3, r0
 801a02a:	60fb      	str	r3, [r7, #12]
  return SysTimeAdd( sysTime, DeltaTime );
 801a02c:	6878      	ldr	r0, [r7, #4]
 801a02e:	693b      	ldr	r3, [r7, #16]
 801a030:	9300      	str	r3, [sp, #0]
 801a032:	68fb      	ldr	r3, [r7, #12]
 801a034:	f107 0214 	add.w	r2, r7, #20
 801a038:	ca06      	ldmia	r2, {r1, r2}
 801a03a:	f7ff feab 	bl	8019d94 <SysTimeAdd>
}
 801a03e:	6878      	ldr	r0, [r7, #4]
 801a040:	3720      	adds	r7, #32
 801a042:	46bd      	mov	sp, r7
 801a044:	bd80      	pop	{r7, pc}
 801a046:	bf00      	nop
 801a048:	10624dd3 	.word	0x10624dd3
 801a04c:	0801b8e0 	.word	0x0801b8e0

0801a050 <ee_skip_atoi>:
  return sc - s;
}
#endif

static int ee_skip_atoi(const char **s)
{
 801a050:	b480      	push	{r7}
 801a052:	b085      	sub	sp, #20
 801a054:	af00      	add	r7, sp, #0
 801a056:	6078      	str	r0, [r7, #4]
  int i = 0;
 801a058:	2300      	movs	r3, #0
 801a05a:	60fb      	str	r3, [r7, #12]
  while (is_digit(**s)) i = i*10 + *((*s)++) - '0';
 801a05c:	e00e      	b.n	801a07c <ee_skip_atoi+0x2c>
 801a05e:	68fa      	ldr	r2, [r7, #12]
 801a060:	4613      	mov	r3, r2
 801a062:	009b      	lsls	r3, r3, #2
 801a064:	4413      	add	r3, r2
 801a066:	005b      	lsls	r3, r3, #1
 801a068:	4618      	mov	r0, r3
 801a06a:	687b      	ldr	r3, [r7, #4]
 801a06c:	681b      	ldr	r3, [r3, #0]
 801a06e:	1c59      	adds	r1, r3, #1
 801a070:	687a      	ldr	r2, [r7, #4]
 801a072:	6011      	str	r1, [r2, #0]
 801a074:	781b      	ldrb	r3, [r3, #0]
 801a076:	4403      	add	r3, r0
 801a078:	3b30      	subs	r3, #48	@ 0x30
 801a07a:	60fb      	str	r3, [r7, #12]
 801a07c:	687b      	ldr	r3, [r7, #4]
 801a07e:	681b      	ldr	r3, [r3, #0]
 801a080:	781b      	ldrb	r3, [r3, #0]
 801a082:	2b2f      	cmp	r3, #47	@ 0x2f
 801a084:	d904      	bls.n	801a090 <ee_skip_atoi+0x40>
 801a086:	687b      	ldr	r3, [r7, #4]
 801a088:	681b      	ldr	r3, [r3, #0]
 801a08a:	781b      	ldrb	r3, [r3, #0]
 801a08c:	2b39      	cmp	r3, #57	@ 0x39
 801a08e:	d9e6      	bls.n	801a05e <ee_skip_atoi+0xe>
  return i;
 801a090:	68fb      	ldr	r3, [r7, #12]
}
 801a092:	4618      	mov	r0, r3
 801a094:	3714      	adds	r7, #20
 801a096:	46bd      	mov	sp, r7
 801a098:	bc80      	pop	{r7}
 801a09a:	4770      	bx	lr

0801a09c <ee_number>:

#define ASSIGN_STR(_c)  do { *str++ = (_c); max_size--; if (max_size == 0) return str; } while (0)

static char *ee_number(char *str, int max_size, long num, int base, int size, int precision, int type)
{
 801a09c:	b480      	push	{r7}
 801a09e:	b099      	sub	sp, #100	@ 0x64
 801a0a0:	af00      	add	r7, sp, #0
 801a0a2:	60f8      	str	r0, [r7, #12]
 801a0a4:	60b9      	str	r1, [r7, #8]
 801a0a6:	607a      	str	r2, [r7, #4]
 801a0a8:	603b      	str	r3, [r7, #0]
  char c;
  char sign, tmp[66];
  char *dig = lower_digits;
 801a0aa:	4b71      	ldr	r3, [pc, #452]	@ (801a270 <ee_number+0x1d4>)
 801a0ac:	681b      	ldr	r3, [r3, #0]
 801a0ae:	65bb      	str	r3, [r7, #88]	@ 0x58
  int i;

  if (type & UPPERCASE)  dig = upper_digits;
 801a0b0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801a0b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801a0b6:	2b00      	cmp	r3, #0
 801a0b8:	d002      	beq.n	801a0c0 <ee_number+0x24>
 801a0ba:	4b6e      	ldr	r3, [pc, #440]	@ (801a274 <ee_number+0x1d8>)
 801a0bc:	681b      	ldr	r3, [r3, #0]
 801a0be:	65bb      	str	r3, [r7, #88]	@ 0x58
#ifdef TINY_PRINTF
#else
  if (type & LEFT) type &= ~ZEROPAD;
#endif
  if (base < 2 || base > 36) return 0;
 801a0c0:	683b      	ldr	r3, [r7, #0]
 801a0c2:	2b01      	cmp	r3, #1
 801a0c4:	dd02      	ble.n	801a0cc <ee_number+0x30>
 801a0c6:	683b      	ldr	r3, [r7, #0]
 801a0c8:	2b24      	cmp	r3, #36	@ 0x24
 801a0ca:	dd01      	ble.n	801a0d0 <ee_number+0x34>
 801a0cc:	2300      	movs	r3, #0
 801a0ce:	e0ca      	b.n	801a266 <ee_number+0x1ca>

  c = (type & ZEROPAD) ? '0' : ' ';
 801a0d0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801a0d2:	f003 0301 	and.w	r3, r3, #1
 801a0d6:	2b00      	cmp	r3, #0
 801a0d8:	d001      	beq.n	801a0de <ee_number+0x42>
 801a0da:	2330      	movs	r3, #48	@ 0x30
 801a0dc:	e000      	b.n	801a0e0 <ee_number+0x44>
 801a0de:	2320      	movs	r3, #32
 801a0e0:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  sign = 0;
 801a0e4:	2300      	movs	r3, #0
 801a0e6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
  if (type & SIGN)
 801a0ea:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801a0ec:	f003 0302 	and.w	r3, r3, #2
 801a0f0:	2b00      	cmp	r3, #0
 801a0f2:	d00b      	beq.n	801a10c <ee_number+0x70>
  {
    if (num < 0)
 801a0f4:	687b      	ldr	r3, [r7, #4]
 801a0f6:	2b00      	cmp	r3, #0
 801a0f8:	da08      	bge.n	801a10c <ee_number+0x70>
    {
      sign = '-';
 801a0fa:	232d      	movs	r3, #45	@ 0x2d
 801a0fc:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
      num = -num;
 801a100:	687b      	ldr	r3, [r7, #4]
 801a102:	425b      	negs	r3, r3
 801a104:	607b      	str	r3, [r7, #4]
      size--;
 801a106:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801a108:	3b01      	subs	r3, #1
 801a10a:	66bb      	str	r3, [r7, #104]	@ 0x68
    else if (base == 8)
      size--;
  }
#endif

  i = 0;
 801a10c:	2300      	movs	r3, #0
 801a10e:	657b      	str	r3, [r7, #84]	@ 0x54

  if (num == 0)
 801a110:	687b      	ldr	r3, [r7, #4]
 801a112:	2b00      	cmp	r3, #0
 801a114:	d11e      	bne.n	801a154 <ee_number+0xb8>
    tmp[i++] = '0';
 801a116:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a118:	1c5a      	adds	r2, r3, #1
 801a11a:	657a      	str	r2, [r7, #84]	@ 0x54
 801a11c:	3360      	adds	r3, #96	@ 0x60
 801a11e:	443b      	add	r3, r7
 801a120:	2230      	movs	r2, #48	@ 0x30
 801a122:	f803 2c50 	strb.w	r2, [r3, #-80]
 801a126:	e018      	b.n	801a15a <ee_number+0xbe>
  else
  {
    while (num != 0)
    {
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 801a128:	687b      	ldr	r3, [r7, #4]
 801a12a:	683a      	ldr	r2, [r7, #0]
 801a12c:	fbb3 f1f2 	udiv	r1, r3, r2
 801a130:	fb01 f202 	mul.w	r2, r1, r2
 801a134:	1a9b      	subs	r3, r3, r2
 801a136:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801a138:	441a      	add	r2, r3
 801a13a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a13c:	1c59      	adds	r1, r3, #1
 801a13e:	6579      	str	r1, [r7, #84]	@ 0x54
 801a140:	7812      	ldrb	r2, [r2, #0]
 801a142:	3360      	adds	r3, #96	@ 0x60
 801a144:	443b      	add	r3, r7
 801a146:	f803 2c50 	strb.w	r2, [r3, #-80]
      num = ((unsigned long) num) / (unsigned) base;
 801a14a:	687a      	ldr	r2, [r7, #4]
 801a14c:	683b      	ldr	r3, [r7, #0]
 801a14e:	fbb2 f3f3 	udiv	r3, r2, r3
 801a152:	607b      	str	r3, [r7, #4]
    while (num != 0)
 801a154:	687b      	ldr	r3, [r7, #4]
 801a156:	2b00      	cmp	r3, #0
 801a158:	d1e6      	bne.n	801a128 <ee_number+0x8c>
    }
  }

  if (i > precision) precision = i;
 801a15a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801a15c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801a15e:	429a      	cmp	r2, r3
 801a160:	dd01      	ble.n	801a166 <ee_number+0xca>
 801a162:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a164:	66fb      	str	r3, [r7, #108]	@ 0x6c
  size -= precision;
 801a166:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 801a168:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801a16a:	1ad3      	subs	r3, r2, r3
 801a16c:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 801a16e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801a170:	f003 0301 	and.w	r3, r3, #1
 801a174:	2b00      	cmp	r3, #0
 801a176:	d112      	bne.n	801a19e <ee_number+0x102>
 801a178:	e00c      	b.n	801a194 <ee_number+0xf8>
 801a17a:	68fb      	ldr	r3, [r7, #12]
 801a17c:	1c5a      	adds	r2, r3, #1
 801a17e:	60fa      	str	r2, [r7, #12]
 801a180:	2220      	movs	r2, #32
 801a182:	701a      	strb	r2, [r3, #0]
 801a184:	68bb      	ldr	r3, [r7, #8]
 801a186:	3b01      	subs	r3, #1
 801a188:	60bb      	str	r3, [r7, #8]
 801a18a:	68bb      	ldr	r3, [r7, #8]
 801a18c:	2b00      	cmp	r3, #0
 801a18e:	d101      	bne.n	801a194 <ee_number+0xf8>
 801a190:	68fb      	ldr	r3, [r7, #12]
 801a192:	e068      	b.n	801a266 <ee_number+0x1ca>
 801a194:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801a196:	1e5a      	subs	r2, r3, #1
 801a198:	66ba      	str	r2, [r7, #104]	@ 0x68
 801a19a:	2b00      	cmp	r3, #0
 801a19c:	dced      	bgt.n	801a17a <ee_number+0xde>
  if (sign) ASSIGN_STR(sign);
 801a19e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801a1a2:	2b00      	cmp	r3, #0
 801a1a4:	d01b      	beq.n	801a1de <ee_number+0x142>
 801a1a6:	68fb      	ldr	r3, [r7, #12]
 801a1a8:	1c5a      	adds	r2, r3, #1
 801a1aa:	60fa      	str	r2, [r7, #12]
 801a1ac:	f897 205f 	ldrb.w	r2, [r7, #95]	@ 0x5f
 801a1b0:	701a      	strb	r2, [r3, #0]
 801a1b2:	68bb      	ldr	r3, [r7, #8]
 801a1b4:	3b01      	subs	r3, #1
 801a1b6:	60bb      	str	r3, [r7, #8]
 801a1b8:	68bb      	ldr	r3, [r7, #8]
 801a1ba:	2b00      	cmp	r3, #0
 801a1bc:	d10f      	bne.n	801a1de <ee_number+0x142>
 801a1be:	68fb      	ldr	r3, [r7, #12]
 801a1c0:	e051      	b.n	801a266 <ee_number+0x1ca>
    }
  }
#endif

#ifdef TINY_PRINTF
  while (size-- > 0) ASSIGN_STR(c);
 801a1c2:	68fb      	ldr	r3, [r7, #12]
 801a1c4:	1c5a      	adds	r2, r3, #1
 801a1c6:	60fa      	str	r2, [r7, #12]
 801a1c8:	f897 2053 	ldrb.w	r2, [r7, #83]	@ 0x53
 801a1cc:	701a      	strb	r2, [r3, #0]
 801a1ce:	68bb      	ldr	r3, [r7, #8]
 801a1d0:	3b01      	subs	r3, #1
 801a1d2:	60bb      	str	r3, [r7, #8]
 801a1d4:	68bb      	ldr	r3, [r7, #8]
 801a1d6:	2b00      	cmp	r3, #0
 801a1d8:	d101      	bne.n	801a1de <ee_number+0x142>
 801a1da:	68fb      	ldr	r3, [r7, #12]
 801a1dc:	e043      	b.n	801a266 <ee_number+0x1ca>
 801a1de:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801a1e0:	1e5a      	subs	r2, r3, #1
 801a1e2:	66ba      	str	r2, [r7, #104]	@ 0x68
 801a1e4:	2b00      	cmp	r3, #0
 801a1e6:	dcec      	bgt.n	801a1c2 <ee_number+0x126>
#else
  if (!(type & LEFT)) while (size-- > 0) ASSIGN_STR(c);
#endif
  while (i < precision--) ASSIGN_STR('0');
 801a1e8:	e00c      	b.n	801a204 <ee_number+0x168>
 801a1ea:	68fb      	ldr	r3, [r7, #12]
 801a1ec:	1c5a      	adds	r2, r3, #1
 801a1ee:	60fa      	str	r2, [r7, #12]
 801a1f0:	2230      	movs	r2, #48	@ 0x30
 801a1f2:	701a      	strb	r2, [r3, #0]
 801a1f4:	68bb      	ldr	r3, [r7, #8]
 801a1f6:	3b01      	subs	r3, #1
 801a1f8:	60bb      	str	r3, [r7, #8]
 801a1fa:	68bb      	ldr	r3, [r7, #8]
 801a1fc:	2b00      	cmp	r3, #0
 801a1fe:	d101      	bne.n	801a204 <ee_number+0x168>
 801a200:	68fb      	ldr	r3, [r7, #12]
 801a202:	e030      	b.n	801a266 <ee_number+0x1ca>
 801a204:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801a206:	1e5a      	subs	r2, r3, #1
 801a208:	66fa      	str	r2, [r7, #108]	@ 0x6c
 801a20a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801a20c:	429a      	cmp	r2, r3
 801a20e:	dbec      	blt.n	801a1ea <ee_number+0x14e>
  while (i-- > 0) ASSIGN_STR(tmp[i]);
 801a210:	e010      	b.n	801a234 <ee_number+0x198>
 801a212:	68fb      	ldr	r3, [r7, #12]
 801a214:	1c5a      	adds	r2, r3, #1
 801a216:	60fa      	str	r2, [r7, #12]
 801a218:	f107 0110 	add.w	r1, r7, #16
 801a21c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801a21e:	440a      	add	r2, r1
 801a220:	7812      	ldrb	r2, [r2, #0]
 801a222:	701a      	strb	r2, [r3, #0]
 801a224:	68bb      	ldr	r3, [r7, #8]
 801a226:	3b01      	subs	r3, #1
 801a228:	60bb      	str	r3, [r7, #8]
 801a22a:	68bb      	ldr	r3, [r7, #8]
 801a22c:	2b00      	cmp	r3, #0
 801a22e:	d101      	bne.n	801a234 <ee_number+0x198>
 801a230:	68fb      	ldr	r3, [r7, #12]
 801a232:	e018      	b.n	801a266 <ee_number+0x1ca>
 801a234:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a236:	1e5a      	subs	r2, r3, #1
 801a238:	657a      	str	r2, [r7, #84]	@ 0x54
 801a23a:	2b00      	cmp	r3, #0
 801a23c:	dce9      	bgt.n	801a212 <ee_number+0x176>
  while (size-- > 0) ASSIGN_STR(' ');
 801a23e:	e00c      	b.n	801a25a <ee_number+0x1be>
 801a240:	68fb      	ldr	r3, [r7, #12]
 801a242:	1c5a      	adds	r2, r3, #1
 801a244:	60fa      	str	r2, [r7, #12]
 801a246:	2220      	movs	r2, #32
 801a248:	701a      	strb	r2, [r3, #0]
 801a24a:	68bb      	ldr	r3, [r7, #8]
 801a24c:	3b01      	subs	r3, #1
 801a24e:	60bb      	str	r3, [r7, #8]
 801a250:	68bb      	ldr	r3, [r7, #8]
 801a252:	2b00      	cmp	r3, #0
 801a254:	d101      	bne.n	801a25a <ee_number+0x1be>
 801a256:	68fb      	ldr	r3, [r7, #12]
 801a258:	e005      	b.n	801a266 <ee_number+0x1ca>
 801a25a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801a25c:	1e5a      	subs	r2, r3, #1
 801a25e:	66ba      	str	r2, [r7, #104]	@ 0x68
 801a260:	2b00      	cmp	r3, #0
 801a262:	dced      	bgt.n	801a240 <ee_number+0x1a4>

  return str;
 801a264:	68fb      	ldr	r3, [r7, #12]
}
 801a266:	4618      	mov	r0, r3
 801a268:	3764      	adds	r7, #100	@ 0x64
 801a26a:	46bd      	mov	sp, r7
 801a26c:	bc80      	pop	{r7}
 801a26e:	4770      	bx	lr
 801a270:	20000128 	.word	0x20000128
 801a274:	2000012c 	.word	0x2000012c

0801a278 <tiny_vsnprintf_like>:

#define CHECK_STR_SIZE(_buf, _str, _size) \
  if ((((_str) - (_buf)) >= ((_size)-1))) { break; }

int tiny_vsnprintf_like(char *buf, const int size, const char *fmt, va_list args)
{
 801a278:	b580      	push	{r7, lr}
 801a27a:	b092      	sub	sp, #72	@ 0x48
 801a27c:	af04      	add	r7, sp, #16
 801a27e:	60f8      	str	r0, [r7, #12]
 801a280:	60b9      	str	r1, [r7, #8]
 801a282:	607a      	str	r2, [r7, #4]
 801a284:	603b      	str	r3, [r7, #0]

  int field_width;      // Width of output field
  int precision;        // Min. # of digits for integers; max number of chars for from string
  int qualifier;        // 'h', 'l', or 'L' for integer fields

  if (size <= 0)
 801a286:	68bb      	ldr	r3, [r7, #8]
 801a288:	2b00      	cmp	r3, #0
 801a28a:	dc01      	bgt.n	801a290 <tiny_vsnprintf_like+0x18>
  {
    return 0;
 801a28c:	2300      	movs	r3, #0
 801a28e:	e13e      	b.n	801a50e <tiny_vsnprintf_like+0x296>
  }

  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 801a290:	68fb      	ldr	r3, [r7, #12]
 801a292:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801a294:	e128      	b.n	801a4e8 <tiny_vsnprintf_like+0x270>
  {
    CHECK_STR_SIZE(buf, str, size);
 801a296:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801a298:	68fb      	ldr	r3, [r7, #12]
 801a29a:	1ad2      	subs	r2, r2, r3
 801a29c:	68bb      	ldr	r3, [r7, #8]
 801a29e:	3b01      	subs	r3, #1
 801a2a0:	429a      	cmp	r2, r3
 801a2a2:	f280 812e 	bge.w	801a502 <tiny_vsnprintf_like+0x28a>

    if (*fmt != '%')
 801a2a6:	687b      	ldr	r3, [r7, #4]
 801a2a8:	781b      	ldrb	r3, [r3, #0]
 801a2aa:	2b25      	cmp	r3, #37	@ 0x25
 801a2ac:	d006      	beq.n	801a2bc <tiny_vsnprintf_like+0x44>
    {
      *str++ = *fmt;
 801a2ae:	687a      	ldr	r2, [r7, #4]
 801a2b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a2b2:	1c59      	adds	r1, r3, #1
 801a2b4:	62f9      	str	r1, [r7, #44]	@ 0x2c
 801a2b6:	7812      	ldrb	r2, [r2, #0]
 801a2b8:	701a      	strb	r2, [r3, #0]
      continue;
 801a2ba:	e112      	b.n	801a4e2 <tiny_vsnprintf_like+0x26a>
    }

    // Process flags
    flags = 0;
 801a2bc:	2300      	movs	r3, #0
 801a2be:	623b      	str	r3, [r7, #32]
#ifdef TINY_PRINTF
    /* Support %0, but not %-, %+, %space and %# */
    fmt++;
 801a2c0:	687b      	ldr	r3, [r7, #4]
 801a2c2:	3301      	adds	r3, #1
 801a2c4:	607b      	str	r3, [r7, #4]
    if (*fmt == '0')
 801a2c6:	687b      	ldr	r3, [r7, #4]
 801a2c8:	781b      	ldrb	r3, [r3, #0]
 801a2ca:	2b30      	cmp	r3, #48	@ 0x30
 801a2cc:	d103      	bne.n	801a2d6 <tiny_vsnprintf_like+0x5e>
    {
      flags |= ZEROPAD;
 801a2ce:	6a3b      	ldr	r3, [r7, #32]
 801a2d0:	f043 0301 	orr.w	r3, r3, #1
 801a2d4:	623b      	str	r3, [r7, #32]
      case '0': flags |= ZEROPAD; goto repeat;
    }
#endif

    // Get field width
    field_width = -1;
 801a2d6:	f04f 33ff 	mov.w	r3, #4294967295
 801a2da:	61fb      	str	r3, [r7, #28]
    if (is_digit(*fmt))
 801a2dc:	687b      	ldr	r3, [r7, #4]
 801a2de:	781b      	ldrb	r3, [r3, #0]
 801a2e0:	2b2f      	cmp	r3, #47	@ 0x2f
 801a2e2:	d908      	bls.n	801a2f6 <tiny_vsnprintf_like+0x7e>
 801a2e4:	687b      	ldr	r3, [r7, #4]
 801a2e6:	781b      	ldrb	r3, [r3, #0]
 801a2e8:	2b39      	cmp	r3, #57	@ 0x39
 801a2ea:	d804      	bhi.n	801a2f6 <tiny_vsnprintf_like+0x7e>
      field_width = ee_skip_atoi(&fmt);
 801a2ec:	1d3b      	adds	r3, r7, #4
 801a2ee:	4618      	mov	r0, r3
 801a2f0:	f7ff feae 	bl	801a050 <ee_skip_atoi>
 801a2f4:	61f8      	str	r0, [r7, #28]
      }
    }
#endif

    // Get the precision
    precision = -1;
 801a2f6:	f04f 33ff 	mov.w	r3, #4294967295
 801a2fa:	61bb      	str	r3, [r7, #24]
      if (precision < 0) precision = 0;
    }
#endif

    // Get the conversion qualifier
    qualifier = -1;
 801a2fc:	f04f 33ff 	mov.w	r3, #4294967295
 801a300:	617b      	str	r3, [r7, #20]
      fmt++;
    }
#endif

    // Default base
    base = 10;
 801a302:	230a      	movs	r3, #10
 801a304:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (*fmt)
 801a306:	687b      	ldr	r3, [r7, #4]
 801a308:	781b      	ldrb	r3, [r3, #0]
 801a30a:	3b58      	subs	r3, #88	@ 0x58
 801a30c:	2b20      	cmp	r3, #32
 801a30e:	f200 8094 	bhi.w	801a43a <tiny_vsnprintf_like+0x1c2>
 801a312:	a201      	add	r2, pc, #4	@ (adr r2, 801a318 <tiny_vsnprintf_like+0xa0>)
 801a314:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a318:	0801a423 	.word	0x0801a423
 801a31c:	0801a43b 	.word	0x0801a43b
 801a320:	0801a43b 	.word	0x0801a43b
 801a324:	0801a43b 	.word	0x0801a43b
 801a328:	0801a43b 	.word	0x0801a43b
 801a32c:	0801a43b 	.word	0x0801a43b
 801a330:	0801a43b 	.word	0x0801a43b
 801a334:	0801a43b 	.word	0x0801a43b
 801a338:	0801a43b 	.word	0x0801a43b
 801a33c:	0801a43b 	.word	0x0801a43b
 801a340:	0801a43b 	.word	0x0801a43b
 801a344:	0801a3a7 	.word	0x0801a3a7
 801a348:	0801a431 	.word	0x0801a431
 801a34c:	0801a43b 	.word	0x0801a43b
 801a350:	0801a43b 	.word	0x0801a43b
 801a354:	0801a43b 	.word	0x0801a43b
 801a358:	0801a43b 	.word	0x0801a43b
 801a35c:	0801a431 	.word	0x0801a431
 801a360:	0801a43b 	.word	0x0801a43b
 801a364:	0801a43b 	.word	0x0801a43b
 801a368:	0801a43b 	.word	0x0801a43b
 801a36c:	0801a43b 	.word	0x0801a43b
 801a370:	0801a43b 	.word	0x0801a43b
 801a374:	0801a43b 	.word	0x0801a43b
 801a378:	0801a43b 	.word	0x0801a43b
 801a37c:	0801a43b 	.word	0x0801a43b
 801a380:	0801a43b 	.word	0x0801a43b
 801a384:	0801a3c7 	.word	0x0801a3c7
 801a388:	0801a43b 	.word	0x0801a43b
 801a38c:	0801a487 	.word	0x0801a487
 801a390:	0801a43b 	.word	0x0801a43b
 801a394:	0801a43b 	.word	0x0801a43b
 801a398:	0801a42b 	.word	0x0801a42b
      case 'c':
#ifdef TINY_PRINTF
#else
        if (!(flags & LEFT))
#endif
          while (--field_width > 0) *str++ = ' ';
 801a39c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a39e:	1c5a      	adds	r2, r3, #1
 801a3a0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801a3a2:	2220      	movs	r2, #32
 801a3a4:	701a      	strb	r2, [r3, #0]
 801a3a6:	69fb      	ldr	r3, [r7, #28]
 801a3a8:	3b01      	subs	r3, #1
 801a3aa:	61fb      	str	r3, [r7, #28]
 801a3ac:	69fb      	ldr	r3, [r7, #28]
 801a3ae:	2b00      	cmp	r3, #0
 801a3b0:	dcf4      	bgt.n	801a39c <tiny_vsnprintf_like+0x124>
        *str++ = (unsigned char) va_arg(args, int);
 801a3b2:	683b      	ldr	r3, [r7, #0]
 801a3b4:	1d1a      	adds	r2, r3, #4
 801a3b6:	603a      	str	r2, [r7, #0]
 801a3b8:	6819      	ldr	r1, [r3, #0]
 801a3ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a3bc:	1c5a      	adds	r2, r3, #1
 801a3be:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801a3c0:	b2ca      	uxtb	r2, r1
 801a3c2:	701a      	strb	r2, [r3, #0]
#ifdef TINY_PRINTF
#else
        while (--field_width > 0) *str++ = ' ';
#endif
        continue;
 801a3c4:	e08d      	b.n	801a4e2 <tiny_vsnprintf_like+0x26a>

      case 's':
        s = va_arg(args, char *);
 801a3c6:	683b      	ldr	r3, [r7, #0]
 801a3c8:	1d1a      	adds	r2, r3, #4
 801a3ca:	603a      	str	r2, [r7, #0]
 801a3cc:	681b      	ldr	r3, [r3, #0]
 801a3ce:	627b      	str	r3, [r7, #36]	@ 0x24
        if (!s) s = "<NULL>";
 801a3d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a3d2:	2b00      	cmp	r3, #0
 801a3d4:	d101      	bne.n	801a3da <tiny_vsnprintf_like+0x162>
 801a3d6:	4b50      	ldr	r3, [pc, #320]	@ (801a518 <tiny_vsnprintf_like+0x2a0>)
 801a3d8:	627b      	str	r3, [r7, #36]	@ 0x24
#ifdef TINY_PRINTF
        len = strlen(s);
 801a3da:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801a3dc:	f7e5 fecc 	bl	8000178 <strlen>
 801a3e0:	4603      	mov	r3, r0
 801a3e2:	613b      	str	r3, [r7, #16]
#else
        len = strnlen(s, precision);
        if (!(flags & LEFT))
#endif
          while (len < field_width--) *str++ = ' ';
 801a3e4:	e004      	b.n	801a3f0 <tiny_vsnprintf_like+0x178>
 801a3e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a3e8:	1c5a      	adds	r2, r3, #1
 801a3ea:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801a3ec:	2220      	movs	r2, #32
 801a3ee:	701a      	strb	r2, [r3, #0]
 801a3f0:	69fb      	ldr	r3, [r7, #28]
 801a3f2:	1e5a      	subs	r2, r3, #1
 801a3f4:	61fa      	str	r2, [r7, #28]
 801a3f6:	693a      	ldr	r2, [r7, #16]
 801a3f8:	429a      	cmp	r2, r3
 801a3fa:	dbf4      	blt.n	801a3e6 <tiny_vsnprintf_like+0x16e>
        for (i = 0; i < len; ++i) *str++ = *s++;
 801a3fc:	2300      	movs	r3, #0
 801a3fe:	62bb      	str	r3, [r7, #40]	@ 0x28
 801a400:	e00a      	b.n	801a418 <tiny_vsnprintf_like+0x1a0>
 801a402:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801a404:	1c53      	adds	r3, r2, #1
 801a406:	627b      	str	r3, [r7, #36]	@ 0x24
 801a408:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a40a:	1c59      	adds	r1, r3, #1
 801a40c:	62f9      	str	r1, [r7, #44]	@ 0x2c
 801a40e:	7812      	ldrb	r2, [r2, #0]
 801a410:	701a      	strb	r2, [r3, #0]
 801a412:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a414:	3301      	adds	r3, #1
 801a416:	62bb      	str	r3, [r7, #40]	@ 0x28
 801a418:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801a41a:	693b      	ldr	r3, [r7, #16]
 801a41c:	429a      	cmp	r2, r3
 801a41e:	dbf0      	blt.n	801a402 <tiny_vsnprintf_like+0x18a>
#ifdef TINY_PRINTF
#else
        while (len < field_width--) *str++ = ' ';
#endif
        continue;
 801a420:	e05f      	b.n	801a4e2 <tiny_vsnprintf_like+0x26a>
        base = 8;
        break;
#endif

      case 'X':
        flags |= UPPERCASE;
 801a422:	6a3b      	ldr	r3, [r7, #32]
 801a424:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801a428:	623b      	str	r3, [r7, #32]

      case 'x':
        base = 16;
 801a42a:	2310      	movs	r3, #16
 801a42c:	633b      	str	r3, [r7, #48]	@ 0x30
        break;
 801a42e:	e02b      	b.n	801a488 <tiny_vsnprintf_like+0x210>

      case 'd':
      case 'i':
        flags |= SIGN;
 801a430:	6a3b      	ldr	r3, [r7, #32]
 801a432:	f043 0302 	orr.w	r3, r3, #2
 801a436:	623b      	str	r3, [r7, #32]

      case 'u':
        break;
 801a438:	e025      	b.n	801a486 <tiny_vsnprintf_like+0x20e>
        continue;

#endif

      default:
        if (*fmt != '%') *str++ = '%';
 801a43a:	687b      	ldr	r3, [r7, #4]
 801a43c:	781b      	ldrb	r3, [r3, #0]
 801a43e:	2b25      	cmp	r3, #37	@ 0x25
 801a440:	d004      	beq.n	801a44c <tiny_vsnprintf_like+0x1d4>
 801a442:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a444:	1c5a      	adds	r2, r3, #1
 801a446:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801a448:	2225      	movs	r2, #37	@ 0x25
 801a44a:	701a      	strb	r2, [r3, #0]
        CHECK_STR_SIZE(buf, str, size);
 801a44c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801a44e:	68fb      	ldr	r3, [r7, #12]
 801a450:	1ad2      	subs	r2, r2, r3
 801a452:	68bb      	ldr	r3, [r7, #8]
 801a454:	3b01      	subs	r3, #1
 801a456:	429a      	cmp	r2, r3
 801a458:	da16      	bge.n	801a488 <tiny_vsnprintf_like+0x210>
        if (*fmt)
 801a45a:	687b      	ldr	r3, [r7, #4]
 801a45c:	781b      	ldrb	r3, [r3, #0]
 801a45e:	2b00      	cmp	r3, #0
 801a460:	d006      	beq.n	801a470 <tiny_vsnprintf_like+0x1f8>
          *str++ = *fmt;
 801a462:	687a      	ldr	r2, [r7, #4]
 801a464:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a466:	1c59      	adds	r1, r3, #1
 801a468:	62f9      	str	r1, [r7, #44]	@ 0x2c
 801a46a:	7812      	ldrb	r2, [r2, #0]
 801a46c:	701a      	strb	r2, [r3, #0]
 801a46e:	e002      	b.n	801a476 <tiny_vsnprintf_like+0x1fe>
        else
          --fmt;
 801a470:	687b      	ldr	r3, [r7, #4]
 801a472:	3b01      	subs	r3, #1
 801a474:	607b      	str	r3, [r7, #4]
        CHECK_STR_SIZE(buf, str, size);
 801a476:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801a478:	68fb      	ldr	r3, [r7, #12]
 801a47a:	1ad2      	subs	r2, r2, r3
 801a47c:	68bb      	ldr	r3, [r7, #8]
 801a47e:	3b01      	subs	r3, #1
 801a480:	429a      	cmp	r2, r3
 801a482:	db2d      	blt.n	801a4e0 <tiny_vsnprintf_like+0x268>
 801a484:	e000      	b.n	801a488 <tiny_vsnprintf_like+0x210>
        break;
 801a486:	bf00      	nop
        continue;
    }

    if (qualifier == 'l')
 801a488:	697b      	ldr	r3, [r7, #20]
 801a48a:	2b6c      	cmp	r3, #108	@ 0x6c
 801a48c:	d105      	bne.n	801a49a <tiny_vsnprintf_like+0x222>
      num = va_arg(args, unsigned long);
 801a48e:	683b      	ldr	r3, [r7, #0]
 801a490:	1d1a      	adds	r2, r3, #4
 801a492:	603a      	str	r2, [r7, #0]
 801a494:	681b      	ldr	r3, [r3, #0]
 801a496:	637b      	str	r3, [r7, #52]	@ 0x34
 801a498:	e00f      	b.n	801a4ba <tiny_vsnprintf_like+0x242>
    else if (flags & SIGN)
 801a49a:	6a3b      	ldr	r3, [r7, #32]
 801a49c:	f003 0302 	and.w	r3, r3, #2
 801a4a0:	2b00      	cmp	r3, #0
 801a4a2:	d005      	beq.n	801a4b0 <tiny_vsnprintf_like+0x238>
      num = va_arg(args, int);
 801a4a4:	683b      	ldr	r3, [r7, #0]
 801a4a6:	1d1a      	adds	r2, r3, #4
 801a4a8:	603a      	str	r2, [r7, #0]
 801a4aa:	681b      	ldr	r3, [r3, #0]
 801a4ac:	637b      	str	r3, [r7, #52]	@ 0x34
 801a4ae:	e004      	b.n	801a4ba <tiny_vsnprintf_like+0x242>
    else
      num = va_arg(args, unsigned int);
 801a4b0:	683b      	ldr	r3, [r7, #0]
 801a4b2:	1d1a      	adds	r2, r3, #4
 801a4b4:	603a      	str	r2, [r7, #0]
 801a4b6:	681b      	ldr	r3, [r3, #0]
 801a4b8:	637b      	str	r3, [r7, #52]	@ 0x34

    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 801a4ba:	68bb      	ldr	r3, [r7, #8]
 801a4bc:	1e5a      	subs	r2, r3, #1
 801a4be:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801a4c0:	68fb      	ldr	r3, [r7, #12]
 801a4c2:	1acb      	subs	r3, r1, r3
 801a4c4:	1ad1      	subs	r1, r2, r3
 801a4c6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801a4c8:	6a3b      	ldr	r3, [r7, #32]
 801a4ca:	9302      	str	r3, [sp, #8]
 801a4cc:	69bb      	ldr	r3, [r7, #24]
 801a4ce:	9301      	str	r3, [sp, #4]
 801a4d0:	69fb      	ldr	r3, [r7, #28]
 801a4d2:	9300      	str	r3, [sp, #0]
 801a4d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a4d6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801a4d8:	f7ff fde0 	bl	801a09c <ee_number>
 801a4dc:	62f8      	str	r0, [r7, #44]	@ 0x2c
 801a4de:	e000      	b.n	801a4e2 <tiny_vsnprintf_like+0x26a>
        continue;
 801a4e0:	bf00      	nop
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 801a4e2:	687b      	ldr	r3, [r7, #4]
 801a4e4:	3301      	adds	r3, #1
 801a4e6:	607b      	str	r3, [r7, #4]
 801a4e8:	687b      	ldr	r3, [r7, #4]
 801a4ea:	781b      	ldrb	r3, [r3, #0]
 801a4ec:	2b00      	cmp	r3, #0
 801a4ee:	f47f aed2 	bne.w	801a296 <tiny_vsnprintf_like+0x1e>
 801a4f2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801a4f4:	68fb      	ldr	r3, [r7, #12]
 801a4f6:	1ad2      	subs	r2, r2, r3
 801a4f8:	68bb      	ldr	r3, [r7, #8]
 801a4fa:	3b01      	subs	r3, #1
 801a4fc:	429a      	cmp	r2, r3
 801a4fe:	f6bf aeca 	bge.w	801a296 <tiny_vsnprintf_like+0x1e>
  }

  *str = '\0';
 801a502:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a504:	2200      	movs	r2, #0
 801a506:	701a      	strb	r2, [r3, #0]
  return str - buf;
 801a508:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801a50a:	68fb      	ldr	r3, [r7, #12]
 801a50c:	1ad3      	subs	r3, r2, r3
}
 801a50e:	4618      	mov	r0, r3
 801a510:	3738      	adds	r7, #56	@ 0x38
 801a512:	46bd      	mov	sp, r7
 801a514:	bd80      	pop	{r7, pc}
 801a516:	bf00      	nop
 801a518:	0801b7f4 	.word	0x0801b7f4

0801a51c <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 801a51c:	b580      	push	{r7, lr}
 801a51e:	b090      	sub	sp, #64	@ 0x40
 801a520:	af00      	add	r7, sp, #0
 801a522:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 801a524:	4b73      	ldr	r3, [pc, #460]	@ (801a6f4 <UTIL_SEQ_Run+0x1d8>)
 801a526:	681b      	ldr	r3, [r3, #0]
 801a528:	62bb      	str	r3, [r7, #40]	@ 0x28
  SuperMask &= Mask_bm;
 801a52a:	4b72      	ldr	r3, [pc, #456]	@ (801a6f4 <UTIL_SEQ_Run+0x1d8>)
 801a52c:	681a      	ldr	r2, [r3, #0]
 801a52e:	687b      	ldr	r3, [r7, #4]
 801a530:	4013      	ands	r3, r2
 801a532:	4a70      	ldr	r2, [pc, #448]	@ (801a6f4 <UTIL_SEQ_Run+0x1d8>)
 801a534:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 801a536:	4b70      	ldr	r3, [pc, #448]	@ (801a6f8 <UTIL_SEQ_Run+0x1dc>)
 801a538:	681b      	ldr	r3, [r3, #0]
 801a53a:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 801a53c:	4b6f      	ldr	r3, [pc, #444]	@ (801a6fc <UTIL_SEQ_Run+0x1e0>)
 801a53e:	681b      	ldr	r3, [r3, #0]
 801a540:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 801a542:	4b6f      	ldr	r3, [pc, #444]	@ (801a700 <UTIL_SEQ_Run+0x1e4>)
 801a544:	681b      	ldr	r3, [r3, #0]
 801a546:	633b      	str	r3, [r7, #48]	@ 0x30
  local_evtwaited =  EvtWaited;
 801a548:	4b6e      	ldr	r3, [pc, #440]	@ (801a704 <UTIL_SEQ_Run+0x1e8>)
 801a54a:	681b      	ldr	r3, [r3, #0]
 801a54c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 801a54e:	e08d      	b.n	801a66c <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 801a550:	2300      	movs	r3, #0
 801a552:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 801a554:	e002      	b.n	801a55c <UTIL_SEQ_Run+0x40>
    {
      counter++;
 801a556:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801a558:	3301      	adds	r3, #1
 801a55a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 801a55c:	4a6a      	ldr	r2, [pc, #424]	@ (801a708 <UTIL_SEQ_Run+0x1ec>)
 801a55e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801a560:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801a564:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a566:	401a      	ands	r2, r3
 801a568:	4b62      	ldr	r3, [pc, #392]	@ (801a6f4 <UTIL_SEQ_Run+0x1d8>)
 801a56a:	681b      	ldr	r3, [r3, #0]
 801a56c:	4013      	ands	r3, r2
 801a56e:	2b00      	cmp	r3, #0
 801a570:	d0f1      	beq.n	801a556 <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 801a572:	4a65      	ldr	r2, [pc, #404]	@ (801a708 <UTIL_SEQ_Run+0x1ec>)
 801a574:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801a576:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801a57a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a57c:	401a      	ands	r2, r3
 801a57e:	4b5d      	ldr	r3, [pc, #372]	@ (801a6f4 <UTIL_SEQ_Run+0x1d8>)
 801a580:	681b      	ldr	r3, [r3, #0]
 801a582:	4013      	ands	r3, r2
 801a584:	627b      	str	r3, [r7, #36]	@ 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 801a586:	4a60      	ldr	r2, [pc, #384]	@ (801a708 <UTIL_SEQ_Run+0x1ec>)
 801a588:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801a58a:	00db      	lsls	r3, r3, #3
 801a58c:	4413      	add	r3, r2
 801a58e:	685a      	ldr	r2, [r3, #4]
 801a590:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a592:	4013      	ands	r3, r2
 801a594:	2b00      	cmp	r3, #0
 801a596:	d106      	bne.n	801a5a6 <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 801a598:	4a5b      	ldr	r2, [pc, #364]	@ (801a708 <UTIL_SEQ_Run+0x1ec>)
 801a59a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801a59c:	00db      	lsls	r3, r3, #3
 801a59e:	4413      	add	r3, r2
 801a5a0:	f04f 32ff 	mov.w	r2, #4294967295
 801a5a4:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 801a5a6:	4a58      	ldr	r2, [pc, #352]	@ (801a708 <UTIL_SEQ_Run+0x1ec>)
 801a5a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801a5aa:	00db      	lsls	r3, r3, #3
 801a5ac:	4413      	add	r3, r2
 801a5ae:	685a      	ldr	r2, [r3, #4]
 801a5b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a5b2:	4013      	ands	r3, r2
 801a5b4:	4618      	mov	r0, r3
 801a5b6:	f000 f907 	bl	801a7c8 <SEQ_BitPosition>
 801a5ba:	4603      	mov	r3, r0
 801a5bc:	461a      	mov	r2, r3
 801a5be:	4b53      	ldr	r3, [pc, #332]	@ (801a70c <UTIL_SEQ_Run+0x1f0>)
 801a5c0:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 801a5c2:	4a51      	ldr	r2, [pc, #324]	@ (801a708 <UTIL_SEQ_Run+0x1ec>)
 801a5c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801a5c6:	00db      	lsls	r3, r3, #3
 801a5c8:	4413      	add	r3, r2
 801a5ca:	685a      	ldr	r2, [r3, #4]
 801a5cc:	4b4f      	ldr	r3, [pc, #316]	@ (801a70c <UTIL_SEQ_Run+0x1f0>)
 801a5ce:	681b      	ldr	r3, [r3, #0]
 801a5d0:	2101      	movs	r1, #1
 801a5d2:	fa01 f303 	lsl.w	r3, r1, r3
 801a5d6:	43db      	mvns	r3, r3
 801a5d8:	401a      	ands	r2, r3
 801a5da:	494b      	ldr	r1, [pc, #300]	@ (801a708 <UTIL_SEQ_Run+0x1ec>)
 801a5dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801a5de:	00db      	lsls	r3, r3, #3
 801a5e0:	440b      	add	r3, r1
 801a5e2:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a5e4:	f3ef 8310 	mrs	r3, PRIMASK
 801a5e8:	61bb      	str	r3, [r7, #24]
  return(result);
 801a5ea:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801a5ec:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 801a5ee:	b672      	cpsid	i
}
 801a5f0:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 801a5f2:	4b46      	ldr	r3, [pc, #280]	@ (801a70c <UTIL_SEQ_Run+0x1f0>)
 801a5f4:	681b      	ldr	r3, [r3, #0]
 801a5f6:	2201      	movs	r2, #1
 801a5f8:	fa02 f303 	lsl.w	r3, r2, r3
 801a5fc:	43da      	mvns	r2, r3
 801a5fe:	4b3e      	ldr	r3, [pc, #248]	@ (801a6f8 <UTIL_SEQ_Run+0x1dc>)
 801a600:	681b      	ldr	r3, [r3, #0]
 801a602:	4013      	ands	r3, r2
 801a604:	4a3c      	ldr	r2, [pc, #240]	@ (801a6f8 <UTIL_SEQ_Run+0x1dc>)
 801a606:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 801a608:	2301      	movs	r3, #1
 801a60a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801a60c:	e013      	b.n	801a636 <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 801a60e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801a610:	3b01      	subs	r3, #1
 801a612:	4a3d      	ldr	r2, [pc, #244]	@ (801a708 <UTIL_SEQ_Run+0x1ec>)
 801a614:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 801a618:	4b3c      	ldr	r3, [pc, #240]	@ (801a70c <UTIL_SEQ_Run+0x1f0>)
 801a61a:	681b      	ldr	r3, [r3, #0]
 801a61c:	2201      	movs	r2, #1
 801a61e:	fa02 f303 	lsl.w	r3, r2, r3
 801a622:	43da      	mvns	r2, r3
 801a624:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801a626:	3b01      	subs	r3, #1
 801a628:	400a      	ands	r2, r1
 801a62a:	4937      	ldr	r1, [pc, #220]	@ (801a708 <UTIL_SEQ_Run+0x1ec>)
 801a62c:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 801a630:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801a632:	3b01      	subs	r3, #1
 801a634:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801a636:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801a638:	2b00      	cmp	r3, #0
 801a63a:	d1e8      	bne.n	801a60e <UTIL_SEQ_Run+0xf2>
 801a63c:	6a3b      	ldr	r3, [r7, #32]
 801a63e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a640:	697b      	ldr	r3, [r7, #20]
 801a642:	f383 8810 	msr	PRIMASK, r3
}
 801a646:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 801a648:	4b30      	ldr	r3, [pc, #192]	@ (801a70c <UTIL_SEQ_Run+0x1f0>)
 801a64a:	681b      	ldr	r3, [r3, #0]
 801a64c:	4a30      	ldr	r2, [pc, #192]	@ (801a710 <UTIL_SEQ_Run+0x1f4>)
 801a64e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801a652:	4798      	blx	r3

    local_taskset = TaskSet;
 801a654:	4b28      	ldr	r3, [pc, #160]	@ (801a6f8 <UTIL_SEQ_Run+0x1dc>)
 801a656:	681b      	ldr	r3, [r3, #0]
 801a658:	63bb      	str	r3, [r7, #56]	@ 0x38
    local_evtset = EvtSet;
 801a65a:	4b28      	ldr	r3, [pc, #160]	@ (801a6fc <UTIL_SEQ_Run+0x1e0>)
 801a65c:	681b      	ldr	r3, [r3, #0]
 801a65e:	637b      	str	r3, [r7, #52]	@ 0x34
    local_taskmask = TaskMask;
 801a660:	4b27      	ldr	r3, [pc, #156]	@ (801a700 <UTIL_SEQ_Run+0x1e4>)
 801a662:	681b      	ldr	r3, [r3, #0]
 801a664:	633b      	str	r3, [r7, #48]	@ 0x30
    local_evtwaited = EvtWaited;
 801a666:	4b27      	ldr	r3, [pc, #156]	@ (801a704 <UTIL_SEQ_Run+0x1e8>)
 801a668:	681b      	ldr	r3, [r3, #0]
 801a66a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 801a66c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801a66e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a670:	401a      	ands	r2, r3
 801a672:	4b20      	ldr	r3, [pc, #128]	@ (801a6f4 <UTIL_SEQ_Run+0x1d8>)
 801a674:	681b      	ldr	r3, [r3, #0]
 801a676:	4013      	ands	r3, r2
 801a678:	2b00      	cmp	r3, #0
 801a67a:	d005      	beq.n	801a688 <UTIL_SEQ_Run+0x16c>
 801a67c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801a67e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a680:	4013      	ands	r3, r2
 801a682:	2b00      	cmp	r3, #0
 801a684:	f43f af64 	beq.w	801a550 <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 801a688:	4b20      	ldr	r3, [pc, #128]	@ (801a70c <UTIL_SEQ_Run+0x1f0>)
 801a68a:	f04f 32ff 	mov.w	r2, #4294967295
 801a68e:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 801a690:	f000 f88e 	bl	801a7b0 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a694:	f3ef 8310 	mrs	r3, PRIMASK
 801a698:	613b      	str	r3, [r7, #16]
  return(result);
 801a69a:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 801a69c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801a69e:	b672      	cpsid	i
}
 801a6a0:	bf00      	nop
  local_taskset = TaskSet;
 801a6a2:	4b15      	ldr	r3, [pc, #84]	@ (801a6f8 <UTIL_SEQ_Run+0x1dc>)
 801a6a4:	681b      	ldr	r3, [r3, #0]
 801a6a6:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 801a6a8:	4b14      	ldr	r3, [pc, #80]	@ (801a6fc <UTIL_SEQ_Run+0x1e0>)
 801a6aa:	681b      	ldr	r3, [r3, #0]
 801a6ac:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 801a6ae:	4b14      	ldr	r3, [pc, #80]	@ (801a700 <UTIL_SEQ_Run+0x1e4>)
 801a6b0:	681b      	ldr	r3, [r3, #0]
 801a6b2:	633b      	str	r3, [r7, #48]	@ 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 801a6b4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801a6b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a6b8:	401a      	ands	r2, r3
 801a6ba:	4b0e      	ldr	r3, [pc, #56]	@ (801a6f4 <UTIL_SEQ_Run+0x1d8>)
 801a6bc:	681b      	ldr	r3, [r3, #0]
 801a6be:	4013      	ands	r3, r2
 801a6c0:	2b00      	cmp	r3, #0
 801a6c2:	d107      	bne.n	801a6d4 <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 801a6c4:	4b0f      	ldr	r3, [pc, #60]	@ (801a704 <UTIL_SEQ_Run+0x1e8>)
 801a6c6:	681a      	ldr	r2, [r3, #0]
 801a6c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a6ca:	4013      	ands	r3, r2
 801a6cc:	2b00      	cmp	r3, #0
 801a6ce:	d101      	bne.n	801a6d4 <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 801a6d0:	f7e7 f974 	bl	80019bc <UTIL_SEQ_Idle>
 801a6d4:	69fb      	ldr	r3, [r7, #28]
 801a6d6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a6d8:	68fb      	ldr	r3, [r7, #12]
 801a6da:	f383 8810 	msr	PRIMASK, r3
}
 801a6de:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 801a6e0:	f000 f86c 	bl	801a7bc <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 801a6e4:	4a03      	ldr	r2, [pc, #12]	@ (801a6f4 <UTIL_SEQ_Run+0x1d8>)
 801a6e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a6e8:	6013      	str	r3, [r2, #0]

  return;
 801a6ea:	bf00      	nop
}
 801a6ec:	3740      	adds	r7, #64	@ 0x40
 801a6ee:	46bd      	mov	sp, r7
 801a6f0:	bd80      	pop	{r7, pc}
 801a6f2:	bf00      	nop
 801a6f4:	20000134 	.word	0x20000134
 801a6f8:	20001590 	.word	0x20001590
 801a6fc:	20001594 	.word	0x20001594
 801a700:	20000130 	.word	0x20000130
 801a704:	20001598 	.word	0x20001598
 801a708:	200015b0 	.word	0x200015b0
 801a70c:	2000159c 	.word	0x2000159c
 801a710:	200015a0 	.word	0x200015a0

0801a714 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 801a714:	b580      	push	{r7, lr}
 801a716:	b088      	sub	sp, #32
 801a718:	af00      	add	r7, sp, #0
 801a71a:	60f8      	str	r0, [r7, #12]
 801a71c:	60b9      	str	r1, [r7, #8]
 801a71e:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a720:	f3ef 8310 	mrs	r3, PRIMASK
 801a724:	617b      	str	r3, [r7, #20]
  return(result);
 801a726:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 801a728:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801a72a:	b672      	cpsid	i
}
 801a72c:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 801a72e:	68f8      	ldr	r0, [r7, #12]
 801a730:	f000 f84a 	bl	801a7c8 <SEQ_BitPosition>
 801a734:	4603      	mov	r3, r0
 801a736:	4619      	mov	r1, r3
 801a738:	4a06      	ldr	r2, [pc, #24]	@ (801a754 <UTIL_SEQ_RegTask+0x40>)
 801a73a:	687b      	ldr	r3, [r7, #4]
 801a73c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 801a740:	69fb      	ldr	r3, [r7, #28]
 801a742:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a744:	69bb      	ldr	r3, [r7, #24]
 801a746:	f383 8810 	msr	PRIMASK, r3
}
 801a74a:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 801a74c:	bf00      	nop
}
 801a74e:	3720      	adds	r7, #32
 801a750:	46bd      	mov	sp, r7
 801a752:	bd80      	pop	{r7, pc}
 801a754:	200015a0 	.word	0x200015a0

0801a758 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 801a758:	b480      	push	{r7}
 801a75a:	b087      	sub	sp, #28
 801a75c:	af00      	add	r7, sp, #0
 801a75e:	6078      	str	r0, [r7, #4]
 801a760:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a762:	f3ef 8310 	mrs	r3, PRIMASK
 801a766:	60fb      	str	r3, [r7, #12]
  return(result);
 801a768:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801a76a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801a76c:	b672      	cpsid	i
}
 801a76e:	bf00      	nop

  TaskSet |= TaskId_bm;
 801a770:	4b0d      	ldr	r3, [pc, #52]	@ (801a7a8 <UTIL_SEQ_SetTask+0x50>)
 801a772:	681a      	ldr	r2, [r3, #0]
 801a774:	687b      	ldr	r3, [r7, #4]
 801a776:	4313      	orrs	r3, r2
 801a778:	4a0b      	ldr	r2, [pc, #44]	@ (801a7a8 <UTIL_SEQ_SetTask+0x50>)
 801a77a:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 801a77c:	4a0b      	ldr	r2, [pc, #44]	@ (801a7ac <UTIL_SEQ_SetTask+0x54>)
 801a77e:	683b      	ldr	r3, [r7, #0]
 801a780:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801a784:	687b      	ldr	r3, [r7, #4]
 801a786:	431a      	orrs	r2, r3
 801a788:	4908      	ldr	r1, [pc, #32]	@ (801a7ac <UTIL_SEQ_SetTask+0x54>)
 801a78a:	683b      	ldr	r3, [r7, #0]
 801a78c:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 801a790:	697b      	ldr	r3, [r7, #20]
 801a792:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a794:	693b      	ldr	r3, [r7, #16]
 801a796:	f383 8810 	msr	PRIMASK, r3
}
 801a79a:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 801a79c:	bf00      	nop
}
 801a79e:	371c      	adds	r7, #28
 801a7a0:	46bd      	mov	sp, r7
 801a7a2:	bc80      	pop	{r7}
 801a7a4:	4770      	bx	lr
 801a7a6:	bf00      	nop
 801a7a8:	20001590 	.word	0x20001590
 801a7ac:	200015b0 	.word	0x200015b0

0801a7b0 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 801a7b0:	b480      	push	{r7}
 801a7b2:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 801a7b4:	bf00      	nop
}
 801a7b6:	46bd      	mov	sp, r7
 801a7b8:	bc80      	pop	{r7}
 801a7ba:	4770      	bx	lr

0801a7bc <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 801a7bc:	b480      	push	{r7}
 801a7be:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 801a7c0:	bf00      	nop
}
 801a7c2:	46bd      	mov	sp, r7
 801a7c4:	bc80      	pop	{r7}
 801a7c6:	4770      	bx	lr

0801a7c8 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 801a7c8:	b480      	push	{r7}
 801a7ca:	b085      	sub	sp, #20
 801a7cc:	af00      	add	r7, sp, #0
 801a7ce:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 801a7d0:	2300      	movs	r3, #0
 801a7d2:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 801a7d4:	687b      	ldr	r3, [r7, #4]
 801a7d6:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 801a7d8:	68bb      	ldr	r3, [r7, #8]
 801a7da:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801a7de:	d204      	bcs.n	801a7ea <SEQ_BitPosition+0x22>
 801a7e0:	2310      	movs	r3, #16
 801a7e2:	73fb      	strb	r3, [r7, #15]
 801a7e4:	68bb      	ldr	r3, [r7, #8]
 801a7e6:	041b      	lsls	r3, r3, #16
 801a7e8:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 801a7ea:	68bb      	ldr	r3, [r7, #8]
 801a7ec:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801a7f0:	d205      	bcs.n	801a7fe <SEQ_BitPosition+0x36>
 801a7f2:	7bfb      	ldrb	r3, [r7, #15]
 801a7f4:	3308      	adds	r3, #8
 801a7f6:	73fb      	strb	r3, [r7, #15]
 801a7f8:	68bb      	ldr	r3, [r7, #8]
 801a7fa:	021b      	lsls	r3, r3, #8
 801a7fc:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 801a7fe:	68bb      	ldr	r3, [r7, #8]
 801a800:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801a804:	d205      	bcs.n	801a812 <SEQ_BitPosition+0x4a>
 801a806:	7bfb      	ldrb	r3, [r7, #15]
 801a808:	3304      	adds	r3, #4
 801a80a:	73fb      	strb	r3, [r7, #15]
 801a80c:	68bb      	ldr	r3, [r7, #8]
 801a80e:	011b      	lsls	r3, r3, #4
 801a810:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 801a812:	68bb      	ldr	r3, [r7, #8]
 801a814:	0f1b      	lsrs	r3, r3, #28
 801a816:	4a07      	ldr	r2, [pc, #28]	@ (801a834 <SEQ_BitPosition+0x6c>)
 801a818:	5cd2      	ldrb	r2, [r2, r3]
 801a81a:	7bfb      	ldrb	r3, [r7, #15]
 801a81c:	4413      	add	r3, r2
 801a81e:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 801a820:	7bfb      	ldrb	r3, [r7, #15]
 801a822:	f1c3 031f 	rsb	r3, r3, #31
 801a826:	b2db      	uxtb	r3, r3
}
 801a828:	4618      	mov	r0, r3
 801a82a:	3714      	adds	r7, #20
 801a82c:	46bd      	mov	sp, r7
 801a82e:	bc80      	pop	{r7}
 801a830:	4770      	bx	lr
 801a832:	bf00      	nop
 801a834:	0801be48 	.word	0x0801be48

0801a838 <UTIL_TIMER_Init>:
  * @addtogroup TIMER_SERVER_exported_function
  *  @{
  */

UTIL_TIMER_Status_t UTIL_TIMER_Init(void)
{
 801a838:	b580      	push	{r7, lr}
 801a83a:	af00      	add	r7, sp, #0
  UTIL_TIMER_INIT_CRITICAL_SECTION();
  TimerListHead = NULL;
 801a83c:	4b04      	ldr	r3, [pc, #16]	@ (801a850 <UTIL_TIMER_Init+0x18>)
 801a83e:	2200      	movs	r2, #0
 801a840:	601a      	str	r2, [r3, #0]
  return UTIL_TimerDriver.InitTimer();
 801a842:	4b04      	ldr	r3, [pc, #16]	@ (801a854 <UTIL_TIMER_Init+0x1c>)
 801a844:	681b      	ldr	r3, [r3, #0]
 801a846:	4798      	blx	r3
 801a848:	4603      	mov	r3, r0
}
 801a84a:	4618      	mov	r0, r3
 801a84c:	bd80      	pop	{r7, pc}
 801a84e:	bf00      	nop
 801a850:	200015b8 	.word	0x200015b8
 801a854:	0801b8b4 	.word	0x0801b8b4

0801a858 <UTIL_TIMER_Create>:
{
  return UTIL_TimerDriver.DeInitTimer();
}

UTIL_TIMER_Status_t UTIL_TIMER_Create( UTIL_TIMER_Object_t *TimerObject, uint32_t PeriodValue, UTIL_TIMER_Mode_t Mode, void ( *Callback )( void *), void *Argument)
{
 801a858:	b580      	push	{r7, lr}
 801a85a:	b084      	sub	sp, #16
 801a85c:	af00      	add	r7, sp, #0
 801a85e:	60f8      	str	r0, [r7, #12]
 801a860:	60b9      	str	r1, [r7, #8]
 801a862:	603b      	str	r3, [r7, #0]
 801a864:	4613      	mov	r3, r2
 801a866:	71fb      	strb	r3, [r7, #7]
  if((TimerObject != NULL) && (Callback != NULL))
 801a868:	68fb      	ldr	r3, [r7, #12]
 801a86a:	2b00      	cmp	r3, #0
 801a86c:	d023      	beq.n	801a8b6 <UTIL_TIMER_Create+0x5e>
 801a86e:	683b      	ldr	r3, [r7, #0]
 801a870:	2b00      	cmp	r3, #0
 801a872:	d020      	beq.n	801a8b6 <UTIL_TIMER_Create+0x5e>
  {
    TimerObject->Timestamp = 0U;
 801a874:	68fb      	ldr	r3, [r7, #12]
 801a876:	2200      	movs	r2, #0
 801a878:	601a      	str	r2, [r3, #0]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 801a87a:	4b11      	ldr	r3, [pc, #68]	@ (801a8c0 <UTIL_TIMER_Create+0x68>)
 801a87c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801a87e:	68b8      	ldr	r0, [r7, #8]
 801a880:	4798      	blx	r3
 801a882:	4602      	mov	r2, r0
 801a884:	68fb      	ldr	r3, [r7, #12]
 801a886:	605a      	str	r2, [r3, #4]
    TimerObject->IsPending = 0U;
 801a888:	68fb      	ldr	r3, [r7, #12]
 801a88a:	2200      	movs	r2, #0
 801a88c:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 0U;
 801a88e:	68fb      	ldr	r3, [r7, #12]
 801a890:	2200      	movs	r2, #0
 801a892:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 801a894:	68fb      	ldr	r3, [r7, #12]
 801a896:	2200      	movs	r2, #0
 801a898:	729a      	strb	r2, [r3, #10]
    TimerObject->Callback = Callback;
 801a89a:	68fb      	ldr	r3, [r7, #12]
 801a89c:	683a      	ldr	r2, [r7, #0]
 801a89e:	60da      	str	r2, [r3, #12]
    TimerObject->argument = Argument;
 801a8a0:	68fb      	ldr	r3, [r7, #12]
 801a8a2:	69ba      	ldr	r2, [r7, #24]
 801a8a4:	611a      	str	r2, [r3, #16]
    TimerObject->Mode = Mode;
 801a8a6:	68fb      	ldr	r3, [r7, #12]
 801a8a8:	79fa      	ldrb	r2, [r7, #7]
 801a8aa:	72da      	strb	r2, [r3, #11]
    TimerObject->Next = NULL;
 801a8ac:	68fb      	ldr	r3, [r7, #12]
 801a8ae:	2200      	movs	r2, #0
 801a8b0:	615a      	str	r2, [r3, #20]
    return UTIL_TIMER_OK;
 801a8b2:	2300      	movs	r3, #0
 801a8b4:	e000      	b.n	801a8b8 <UTIL_TIMER_Create+0x60>
  }
  else
  {
    return UTIL_TIMER_INVALID_PARAM;
 801a8b6:	2301      	movs	r3, #1
  }
}
 801a8b8:	4618      	mov	r0, r3
 801a8ba:	3710      	adds	r7, #16
 801a8bc:	46bd      	mov	sp, r7
 801a8be:	bd80      	pop	{r7, pc}
 801a8c0:	0801b8b4 	.word	0x0801b8b4

0801a8c4 <UTIL_TIMER_Start>:

UTIL_TIMER_Status_t UTIL_TIMER_Start( UTIL_TIMER_Object_t *TimerObject)
{
 801a8c4:	b580      	push	{r7, lr}
 801a8c6:	b08a      	sub	sp, #40	@ 0x28
 801a8c8:	af00      	add	r7, sp, #0
 801a8ca:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801a8cc:	2300      	movs	r3, #0
 801a8ce:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t elapsedTime;
  uint32_t minValue;
  uint32_t ticks;
    
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 801a8d2:	687b      	ldr	r3, [r7, #4]
 801a8d4:	2b00      	cmp	r3, #0
 801a8d6:	d056      	beq.n	801a986 <UTIL_TIMER_Start+0xc2>
 801a8d8:	6878      	ldr	r0, [r7, #4]
 801a8da:	f000 f929 	bl	801ab30 <TimerExists>
 801a8de:	4603      	mov	r3, r0
 801a8e0:	f083 0301 	eor.w	r3, r3, #1
 801a8e4:	b2db      	uxtb	r3, r3
 801a8e6:	2b00      	cmp	r3, #0
 801a8e8:	d04d      	beq.n	801a986 <UTIL_TIMER_Start+0xc2>
 801a8ea:	687b      	ldr	r3, [r7, #4]
 801a8ec:	7a5b      	ldrb	r3, [r3, #9]
 801a8ee:	2b00      	cmp	r3, #0
 801a8f0:	d149      	bne.n	801a986 <UTIL_TIMER_Start+0xc2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a8f2:	f3ef 8310 	mrs	r3, PRIMASK
 801a8f6:	613b      	str	r3, [r7, #16]
  return(result);
 801a8f8:	693b      	ldr	r3, [r7, #16]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801a8fa:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801a8fc:	b672      	cpsid	i
}
 801a8fe:	bf00      	nop
    ticks = TimerObject->ReloadValue;
 801a900:	687b      	ldr	r3, [r7, #4]
 801a902:	685b      	ldr	r3, [r3, #4]
 801a904:	623b      	str	r3, [r7, #32]
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 801a906:	4b24      	ldr	r3, [pc, #144]	@ (801a998 <UTIL_TIMER_Start+0xd4>)
 801a908:	6a1b      	ldr	r3, [r3, #32]
 801a90a:	4798      	blx	r3
 801a90c:	61b8      	str	r0, [r7, #24]
    
    if( ticks < minValue )
 801a90e:	6a3a      	ldr	r2, [r7, #32]
 801a910:	69bb      	ldr	r3, [r7, #24]
 801a912:	429a      	cmp	r2, r3
 801a914:	d201      	bcs.n	801a91a <UTIL_TIMER_Start+0x56>
    {
      ticks = minValue;
 801a916:	69bb      	ldr	r3, [r7, #24]
 801a918:	623b      	str	r3, [r7, #32]
    }
    
    TimerObject->Timestamp = ticks;
 801a91a:	687b      	ldr	r3, [r7, #4]
 801a91c:	6a3a      	ldr	r2, [r7, #32]
 801a91e:	601a      	str	r2, [r3, #0]
    TimerObject->IsPending = 0U;
 801a920:	687b      	ldr	r3, [r7, #4]
 801a922:	2200      	movs	r2, #0
 801a924:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 1U;
 801a926:	687b      	ldr	r3, [r7, #4]
 801a928:	2201      	movs	r2, #1
 801a92a:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 801a92c:	687b      	ldr	r3, [r7, #4]
 801a92e:	2200      	movs	r2, #0
 801a930:	729a      	strb	r2, [r3, #10]
    if( TimerListHead == NULL )
 801a932:	4b1a      	ldr	r3, [pc, #104]	@ (801a99c <UTIL_TIMER_Start+0xd8>)
 801a934:	681b      	ldr	r3, [r3, #0]
 801a936:	2b00      	cmp	r3, #0
 801a938:	d106      	bne.n	801a948 <UTIL_TIMER_Start+0x84>
    {
      UTIL_TimerDriver.SetTimerContext();
 801a93a:	4b17      	ldr	r3, [pc, #92]	@ (801a998 <UTIL_TIMER_Start+0xd4>)
 801a93c:	691b      	ldr	r3, [r3, #16]
 801a93e:	4798      	blx	r3
      TimerInsertNewHeadTimer( TimerObject ); /* insert a timeout at now+obj->Timestamp */
 801a940:	6878      	ldr	r0, [r7, #4]
 801a942:	f000 f96b 	bl	801ac1c <TimerInsertNewHeadTimer>
 801a946:	e017      	b.n	801a978 <UTIL_TIMER_Start+0xb4>
    }
    else 
    {
      elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime( );
 801a948:	4b13      	ldr	r3, [pc, #76]	@ (801a998 <UTIL_TIMER_Start+0xd4>)
 801a94a:	699b      	ldr	r3, [r3, #24]
 801a94c:	4798      	blx	r3
 801a94e:	6178      	str	r0, [r7, #20]
      TimerObject->Timestamp += elapsedTime;
 801a950:	687b      	ldr	r3, [r7, #4]
 801a952:	681a      	ldr	r2, [r3, #0]
 801a954:	697b      	ldr	r3, [r7, #20]
 801a956:	441a      	add	r2, r3
 801a958:	687b      	ldr	r3, [r7, #4]
 801a95a:	601a      	str	r2, [r3, #0]
      
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 801a95c:	687b      	ldr	r3, [r7, #4]
 801a95e:	681a      	ldr	r2, [r3, #0]
 801a960:	4b0e      	ldr	r3, [pc, #56]	@ (801a99c <UTIL_TIMER_Start+0xd8>)
 801a962:	681b      	ldr	r3, [r3, #0]
 801a964:	681b      	ldr	r3, [r3, #0]
 801a966:	429a      	cmp	r2, r3
 801a968:	d203      	bcs.n	801a972 <UTIL_TIMER_Start+0xae>
      {
        TimerInsertNewHeadTimer( TimerObject);
 801a96a:	6878      	ldr	r0, [r7, #4]
 801a96c:	f000 f956 	bl	801ac1c <TimerInsertNewHeadTimer>
 801a970:	e002      	b.n	801a978 <UTIL_TIMER_Start+0xb4>
      }
      else
      {
        TimerInsertTimer( TimerObject);
 801a972:	6878      	ldr	r0, [r7, #4]
 801a974:	f000 f922 	bl	801abbc <TimerInsertTimer>
 801a978:	69fb      	ldr	r3, [r7, #28]
 801a97a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a97c:	68fb      	ldr	r3, [r7, #12]
 801a97e:	f383 8810 	msr	PRIMASK, r3
}
 801a982:	bf00      	nop
  {
 801a984:	e002      	b.n	801a98c <UTIL_TIMER_Start+0xc8>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret =  UTIL_TIMER_INVALID_PARAM;
 801a986:	2301      	movs	r3, #1
 801a988:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }
  return ret;
 801a98c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 801a990:	4618      	mov	r0, r3
 801a992:	3728      	adds	r7, #40	@ 0x28
 801a994:	46bd      	mov	sp, r7
 801a996:	bd80      	pop	{r7, pc}
 801a998:	0801b8b4 	.word	0x0801b8b4
 801a99c:	200015b8 	.word	0x200015b8

0801a9a0 <UTIL_TIMER_Stop>:
  }
  return ret;
}

UTIL_TIMER_Status_t UTIL_TIMER_Stop( UTIL_TIMER_Object_t *TimerObject )
{
 801a9a0:	b580      	push	{r7, lr}
 801a9a2:	b088      	sub	sp, #32
 801a9a4:	af00      	add	r7, sp, #0
 801a9a6:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801a9a8:	2300      	movs	r3, #0
 801a9aa:	77fb      	strb	r3, [r7, #31]

  if (NULL != TimerObject)
 801a9ac:	687b      	ldr	r3, [r7, #4]
 801a9ae:	2b00      	cmp	r3, #0
 801a9b0:	d05b      	beq.n	801aa6a <UTIL_TIMER_Stop+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a9b2:	f3ef 8310 	mrs	r3, PRIMASK
 801a9b6:	60fb      	str	r3, [r7, #12]
  return(result);
 801a9b8:	68fb      	ldr	r3, [r7, #12]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801a9ba:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 801a9bc:	b672      	cpsid	i
}
 801a9be:	bf00      	nop
    UTIL_TIMER_Object_t* prev = TimerListHead;
 801a9c0:	4b2d      	ldr	r3, [pc, #180]	@ (801aa78 <UTIL_TIMER_Stop+0xd8>)
 801a9c2:	681b      	ldr	r3, [r3, #0]
 801a9c4:	61bb      	str	r3, [r7, #24]
    UTIL_TIMER_Object_t* cur = TimerListHead;
 801a9c6:	4b2c      	ldr	r3, [pc, #176]	@ (801aa78 <UTIL_TIMER_Stop+0xd8>)
 801a9c8:	681b      	ldr	r3, [r3, #0]
 801a9ca:	617b      	str	r3, [r7, #20]
    TimerObject->IsReloadStopped = 1U;
 801a9cc:	687b      	ldr	r3, [r7, #4]
 801a9ce:	2201      	movs	r2, #1
 801a9d0:	729a      	strb	r2, [r3, #10]
    
    /* List is empty or the Obj to stop does not exist  */
    if(NULL != TimerListHead)
 801a9d2:	4b29      	ldr	r3, [pc, #164]	@ (801aa78 <UTIL_TIMER_Stop+0xd8>)
 801a9d4:	681b      	ldr	r3, [r3, #0]
 801a9d6:	2b00      	cmp	r3, #0
 801a9d8:	d041      	beq.n	801aa5e <UTIL_TIMER_Stop+0xbe>
    {
      TimerObject->IsRunning = 0U;
 801a9da:	687b      	ldr	r3, [r7, #4]
 801a9dc:	2200      	movs	r2, #0
 801a9de:	725a      	strb	r2, [r3, #9]
      
      if( TimerListHead == TimerObject ) /* Stop the Head */
 801a9e0:	4b25      	ldr	r3, [pc, #148]	@ (801aa78 <UTIL_TIMER_Stop+0xd8>)
 801a9e2:	681b      	ldr	r3, [r3, #0]
 801a9e4:	687a      	ldr	r2, [r7, #4]
 801a9e6:	429a      	cmp	r2, r3
 801a9e8:	d134      	bne.n	801aa54 <UTIL_TIMER_Stop+0xb4>
      {
          TimerListHead->IsPending = 0;
 801a9ea:	4b23      	ldr	r3, [pc, #140]	@ (801aa78 <UTIL_TIMER_Stop+0xd8>)
 801a9ec:	681b      	ldr	r3, [r3, #0]
 801a9ee:	2200      	movs	r2, #0
 801a9f0:	721a      	strb	r2, [r3, #8]
          if( TimerListHead->Next != NULL )
 801a9f2:	4b21      	ldr	r3, [pc, #132]	@ (801aa78 <UTIL_TIMER_Stop+0xd8>)
 801a9f4:	681b      	ldr	r3, [r3, #0]
 801a9f6:	695b      	ldr	r3, [r3, #20]
 801a9f8:	2b00      	cmp	r3, #0
 801a9fa:	d00a      	beq.n	801aa12 <UTIL_TIMER_Stop+0x72>
          {
            TimerListHead = TimerListHead->Next;
 801a9fc:	4b1e      	ldr	r3, [pc, #120]	@ (801aa78 <UTIL_TIMER_Stop+0xd8>)
 801a9fe:	681b      	ldr	r3, [r3, #0]
 801aa00:	695b      	ldr	r3, [r3, #20]
 801aa02:	4a1d      	ldr	r2, [pc, #116]	@ (801aa78 <UTIL_TIMER_Stop+0xd8>)
 801aa04:	6013      	str	r3, [r2, #0]
            TimerSetTimeout( TimerListHead );
 801aa06:	4b1c      	ldr	r3, [pc, #112]	@ (801aa78 <UTIL_TIMER_Stop+0xd8>)
 801aa08:	681b      	ldr	r3, [r3, #0]
 801aa0a:	4618      	mov	r0, r3
 801aa0c:	f000 f8ac 	bl	801ab68 <TimerSetTimeout>
 801aa10:	e023      	b.n	801aa5a <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            UTIL_TimerDriver.StopTimerEvt( );
 801aa12:	4b1a      	ldr	r3, [pc, #104]	@ (801aa7c <UTIL_TIMER_Stop+0xdc>)
 801aa14:	68db      	ldr	r3, [r3, #12]
 801aa16:	4798      	blx	r3
            TimerListHead = NULL;
 801aa18:	4b17      	ldr	r3, [pc, #92]	@ (801aa78 <UTIL_TIMER_Stop+0xd8>)
 801aa1a:	2200      	movs	r2, #0
 801aa1c:	601a      	str	r2, [r3, #0]
 801aa1e:	e01c      	b.n	801aa5a <UTIL_TIMER_Stop+0xba>
      }
      else /* Stop an object within the list */
      {      
        while( cur != NULL )
        {
          if( cur == TimerObject )
 801aa20:	697a      	ldr	r2, [r7, #20]
 801aa22:	687b      	ldr	r3, [r7, #4]
 801aa24:	429a      	cmp	r2, r3
 801aa26:	d110      	bne.n	801aa4a <UTIL_TIMER_Stop+0xaa>
          {
            if( cur->Next != NULL )
 801aa28:	697b      	ldr	r3, [r7, #20]
 801aa2a:	695b      	ldr	r3, [r3, #20]
 801aa2c:	2b00      	cmp	r3, #0
 801aa2e:	d006      	beq.n	801aa3e <UTIL_TIMER_Stop+0x9e>
            {
              cur = cur->Next;
 801aa30:	697b      	ldr	r3, [r7, #20]
 801aa32:	695b      	ldr	r3, [r3, #20]
 801aa34:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 801aa36:	69bb      	ldr	r3, [r7, #24]
 801aa38:	697a      	ldr	r2, [r7, #20]
 801aa3a:	615a      	str	r2, [r3, #20]
            else
            {
              cur = NULL;
              prev->Next = cur;
            }
            break;
 801aa3c:	e00d      	b.n	801aa5a <UTIL_TIMER_Stop+0xba>
              cur = NULL;
 801aa3e:	2300      	movs	r3, #0
 801aa40:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 801aa42:	69bb      	ldr	r3, [r7, #24]
 801aa44:	697a      	ldr	r2, [r7, #20]
 801aa46:	615a      	str	r2, [r3, #20]
            break;
 801aa48:	e007      	b.n	801aa5a <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            prev = cur;
 801aa4a:	697b      	ldr	r3, [r7, #20]
 801aa4c:	61bb      	str	r3, [r7, #24]
            cur = cur->Next;
 801aa4e:	697b      	ldr	r3, [r7, #20]
 801aa50:	695b      	ldr	r3, [r3, #20]
 801aa52:	617b      	str	r3, [r7, #20]
        while( cur != NULL )
 801aa54:	697b      	ldr	r3, [r7, #20]
 801aa56:	2b00      	cmp	r3, #0
 801aa58:	d1e2      	bne.n	801aa20 <UTIL_TIMER_Stop+0x80>
          }
        }   
      }
      ret = UTIL_TIMER_OK;
 801aa5a:	2300      	movs	r3, #0
 801aa5c:	77fb      	strb	r3, [r7, #31]
 801aa5e:	693b      	ldr	r3, [r7, #16]
 801aa60:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801aa62:	68bb      	ldr	r3, [r7, #8]
 801aa64:	f383 8810 	msr	PRIMASK, r3
}
 801aa68:	e001      	b.n	801aa6e <UTIL_TIMER_Stop+0xce>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret = UTIL_TIMER_INVALID_PARAM;
 801aa6a:	2301      	movs	r3, #1
 801aa6c:	77fb      	strb	r3, [r7, #31]
  }
  return ret;
 801aa6e:	7ffb      	ldrb	r3, [r7, #31]
}
 801aa70:	4618      	mov	r0, r3
 801aa72:	3720      	adds	r7, #32
 801aa74:	46bd      	mov	sp, r7
 801aa76:	bd80      	pop	{r7, pc}
 801aa78:	200015b8 	.word	0x200015b8
 801aa7c:	0801b8b4 	.word	0x0801b8b4

0801aa80 <UTIL_TIMER_SetPeriod>:

UTIL_TIMER_Status_t UTIL_TIMER_SetPeriod(UTIL_TIMER_Object_t *TimerObject, uint32_t NewPeriodValue)
{
 801aa80:	b580      	push	{r7, lr}
 801aa82:	b084      	sub	sp, #16
 801aa84:	af00      	add	r7, sp, #0
 801aa86:	6078      	str	r0, [r7, #4]
 801aa88:	6039      	str	r1, [r7, #0]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801aa8a:	2300      	movs	r3, #0
 801aa8c:	73fb      	strb	r3, [r7, #15]
  
  if(NULL == TimerObject)
 801aa8e:	687b      	ldr	r3, [r7, #4]
 801aa90:	2b00      	cmp	r3, #0
 801aa92:	d102      	bne.n	801aa9a <UTIL_TIMER_SetPeriod+0x1a>
  {
	  ret = UTIL_TIMER_INVALID_PARAM;
 801aa94:	2301      	movs	r3, #1
 801aa96:	73fb      	strb	r3, [r7, #15]
 801aa98:	e014      	b.n	801aac4 <UTIL_TIMER_SetPeriod+0x44>
  }
  else
  {
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 801aa9a:	4b0d      	ldr	r3, [pc, #52]	@ (801aad0 <UTIL_TIMER_SetPeriod+0x50>)
 801aa9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801aa9e:	6838      	ldr	r0, [r7, #0]
 801aaa0:	4798      	blx	r3
 801aaa2:	4602      	mov	r2, r0
 801aaa4:	687b      	ldr	r3, [r7, #4]
 801aaa6:	605a      	str	r2, [r3, #4]
    if(TimerExists(TimerObject))
 801aaa8:	6878      	ldr	r0, [r7, #4]
 801aaaa:	f000 f841 	bl	801ab30 <TimerExists>
 801aaae:	4603      	mov	r3, r0
 801aab0:	2b00      	cmp	r3, #0
 801aab2:	d007      	beq.n	801aac4 <UTIL_TIMER_SetPeriod+0x44>
    {
      (void)UTIL_TIMER_Stop(TimerObject);
 801aab4:	6878      	ldr	r0, [r7, #4]
 801aab6:	f7ff ff73 	bl	801a9a0 <UTIL_TIMER_Stop>
      ret = UTIL_TIMER_Start(TimerObject);
 801aaba:	6878      	ldr	r0, [r7, #4]
 801aabc:	f7ff ff02 	bl	801a8c4 <UTIL_TIMER_Start>
 801aac0:	4603      	mov	r3, r0
 801aac2:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret;
 801aac4:	7bfb      	ldrb	r3, [r7, #15]
}
 801aac6:	4618      	mov	r0, r3
 801aac8:	3710      	adds	r7, #16
 801aaca:	46bd      	mov	sp, r7
 801aacc:	bd80      	pop	{r7, pc}
 801aace:	bf00      	nop
 801aad0:	0801b8b4 	.word	0x0801b8b4

0801aad4 <UTIL_TIMER_GetCurrentTime>:
  }
  UTIL_TIMER_EXIT_CRITICAL_SECTION();
}

UTIL_TIMER_Time_t UTIL_TIMER_GetCurrentTime(void)
{
 801aad4:	b580      	push	{r7, lr}
 801aad6:	b082      	sub	sp, #8
 801aad8:	af00      	add	r7, sp, #0
  uint32_t now = UTIL_TimerDriver.GetTimerValue( );
 801aada:	4b06      	ldr	r3, [pc, #24]	@ (801aaf4 <UTIL_TIMER_GetCurrentTime+0x20>)
 801aadc:	69db      	ldr	r3, [r3, #28]
 801aade:	4798      	blx	r3
 801aae0:	6078      	str	r0, [r7, #4]
  return  UTIL_TimerDriver.Tick2ms(now);
 801aae2:	4b04      	ldr	r3, [pc, #16]	@ (801aaf4 <UTIL_TIMER_GetCurrentTime+0x20>)
 801aae4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801aae6:	6878      	ldr	r0, [r7, #4]
 801aae8:	4798      	blx	r3
 801aaea:	4603      	mov	r3, r0
}
 801aaec:	4618      	mov	r0, r3
 801aaee:	3708      	adds	r7, #8
 801aaf0:	46bd      	mov	sp, r7
 801aaf2:	bd80      	pop	{r7, pc}
 801aaf4:	0801b8b4 	.word	0x0801b8b4

0801aaf8 <UTIL_TIMER_GetElapsedTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetElapsedTime(UTIL_TIMER_Time_t past )
{
 801aaf8:	b580      	push	{r7, lr}
 801aafa:	b084      	sub	sp, #16
 801aafc:	af00      	add	r7, sp, #0
 801aafe:	6078      	str	r0, [r7, #4]
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 801ab00:	4b0a      	ldr	r3, [pc, #40]	@ (801ab2c <UTIL_TIMER_GetElapsedTime+0x34>)
 801ab02:	69db      	ldr	r3, [r3, #28]
 801ab04:	4798      	blx	r3
 801ab06:	60f8      	str	r0, [r7, #12]
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 801ab08:	4b08      	ldr	r3, [pc, #32]	@ (801ab2c <UTIL_TIMER_GetElapsedTime+0x34>)
 801ab0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801ab0c:	6878      	ldr	r0, [r7, #4]
 801ab0e:	4798      	blx	r3
 801ab10:	60b8      	str	r0, [r7, #8]
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return UTIL_TimerDriver.Tick2ms( nowInTicks- pastInTicks );
 801ab12:	4b06      	ldr	r3, [pc, #24]	@ (801ab2c <UTIL_TIMER_GetElapsedTime+0x34>)
 801ab14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801ab16:	68f9      	ldr	r1, [r7, #12]
 801ab18:	68ba      	ldr	r2, [r7, #8]
 801ab1a:	1a8a      	subs	r2, r1, r2
 801ab1c:	4610      	mov	r0, r2
 801ab1e:	4798      	blx	r3
 801ab20:	4603      	mov	r3, r0
}
 801ab22:	4618      	mov	r0, r3
 801ab24:	3710      	adds	r7, #16
 801ab26:	46bd      	mov	sp, r7
 801ab28:	bd80      	pop	{r7, pc}
 801ab2a:	bf00      	nop
 801ab2c:	0801b8b4 	.word	0x0801b8b4

0801ab30 <TimerExists>:
 *
 * @param TimerObject Structure containing the timer object parameters
 * @retval 1 (the object is already in the list) or 0
 */
bool TimerExists( UTIL_TIMER_Object_t *TimerObject )
{
 801ab30:	b480      	push	{r7}
 801ab32:	b085      	sub	sp, #20
 801ab34:	af00      	add	r7, sp, #0
 801ab36:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801ab38:	4b0a      	ldr	r3, [pc, #40]	@ (801ab64 <TimerExists+0x34>)
 801ab3a:	681b      	ldr	r3, [r3, #0]
 801ab3c:	60fb      	str	r3, [r7, #12]

  while( cur != NULL )
 801ab3e:	e008      	b.n	801ab52 <TimerExists+0x22>
  {
    if( cur == TimerObject )
 801ab40:	68fa      	ldr	r2, [r7, #12]
 801ab42:	687b      	ldr	r3, [r7, #4]
 801ab44:	429a      	cmp	r2, r3
 801ab46:	d101      	bne.n	801ab4c <TimerExists+0x1c>
    {
      return true;
 801ab48:	2301      	movs	r3, #1
 801ab4a:	e006      	b.n	801ab5a <TimerExists+0x2a>
    }
    cur = cur->Next;
 801ab4c:	68fb      	ldr	r3, [r7, #12]
 801ab4e:	695b      	ldr	r3, [r3, #20]
 801ab50:	60fb      	str	r3, [r7, #12]
  while( cur != NULL )
 801ab52:	68fb      	ldr	r3, [r7, #12]
 801ab54:	2b00      	cmp	r3, #0
 801ab56:	d1f3      	bne.n	801ab40 <TimerExists+0x10>
  }
  return false;
 801ab58:	2300      	movs	r3, #0
}
 801ab5a:	4618      	mov	r0, r3
 801ab5c:	3714      	adds	r7, #20
 801ab5e:	46bd      	mov	sp, r7
 801ab60:	bc80      	pop	{r7}
 801ab62:	4770      	bx	lr
 801ab64:	200015b8 	.word	0x200015b8

0801ab68 <TimerSetTimeout>:
 * @brief Sets a timeout with the duration "timestamp"
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout( UTIL_TIMER_Object_t *TimerObject )
{
 801ab68:	b590      	push	{r4, r7, lr}
 801ab6a:	b085      	sub	sp, #20
 801ab6c:	af00      	add	r7, sp, #0
 801ab6e:	6078      	str	r0, [r7, #4]
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 801ab70:	4b11      	ldr	r3, [pc, #68]	@ (801abb8 <TimerSetTimeout+0x50>)
 801ab72:	6a1b      	ldr	r3, [r3, #32]
 801ab74:	4798      	blx	r3
 801ab76:	60f8      	str	r0, [r7, #12]
  TimerObject->IsPending = 1;
 801ab78:	687b      	ldr	r3, [r7, #4]
 801ab7a:	2201      	movs	r2, #1
 801ab7c:	721a      	strb	r2, [r3, #8]

  /* In case deadline too soon */
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 801ab7e:	687b      	ldr	r3, [r7, #4]
 801ab80:	681c      	ldr	r4, [r3, #0]
 801ab82:	4b0d      	ldr	r3, [pc, #52]	@ (801abb8 <TimerSetTimeout+0x50>)
 801ab84:	699b      	ldr	r3, [r3, #24]
 801ab86:	4798      	blx	r3
 801ab88:	4602      	mov	r2, r0
 801ab8a:	68fb      	ldr	r3, [r7, #12]
 801ab8c:	4413      	add	r3, r2
 801ab8e:	429c      	cmp	r4, r3
 801ab90:	d207      	bcs.n	801aba2 <TimerSetTimeout+0x3a>
  {
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 801ab92:	4b09      	ldr	r3, [pc, #36]	@ (801abb8 <TimerSetTimeout+0x50>)
 801ab94:	699b      	ldr	r3, [r3, #24]
 801ab96:	4798      	blx	r3
 801ab98:	4602      	mov	r2, r0
 801ab9a:	68fb      	ldr	r3, [r7, #12]
 801ab9c:	441a      	add	r2, r3
 801ab9e:	687b      	ldr	r3, [r7, #4]
 801aba0:	601a      	str	r2, [r3, #0]
  }
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 801aba2:	4b05      	ldr	r3, [pc, #20]	@ (801abb8 <TimerSetTimeout+0x50>)
 801aba4:	689b      	ldr	r3, [r3, #8]
 801aba6:	687a      	ldr	r2, [r7, #4]
 801aba8:	6812      	ldr	r2, [r2, #0]
 801abaa:	4610      	mov	r0, r2
 801abac:	4798      	blx	r3
}
 801abae:	bf00      	nop
 801abb0:	3714      	adds	r7, #20
 801abb2:	46bd      	mov	sp, r7
 801abb4:	bd90      	pop	{r4, r7, pc}
 801abb6:	bf00      	nop
 801abb8:	0801b8b4 	.word	0x0801b8b4

0801abbc <TimerInsertTimer>:
 *     next timer to expire.
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer( UTIL_TIMER_Object_t *TimerObject)
{
 801abbc:	b480      	push	{r7}
 801abbe:	b085      	sub	sp, #20
 801abc0:	af00      	add	r7, sp, #0
 801abc2:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801abc4:	4b14      	ldr	r3, [pc, #80]	@ (801ac18 <TimerInsertTimer+0x5c>)
 801abc6:	681b      	ldr	r3, [r3, #0]
 801abc8:	60fb      	str	r3, [r7, #12]
  UTIL_TIMER_Object_t* next = TimerListHead->Next;
 801abca:	4b13      	ldr	r3, [pc, #76]	@ (801ac18 <TimerInsertTimer+0x5c>)
 801abcc:	681b      	ldr	r3, [r3, #0]
 801abce:	695b      	ldr	r3, [r3, #20]
 801abd0:	60bb      	str	r3, [r7, #8]

  while (cur->Next != NULL )
 801abd2:	e012      	b.n	801abfa <TimerInsertTimer+0x3e>
  {  
    if( TimerObject->Timestamp  > next->Timestamp )
 801abd4:	687b      	ldr	r3, [r7, #4]
 801abd6:	681a      	ldr	r2, [r3, #0]
 801abd8:	68bb      	ldr	r3, [r7, #8]
 801abda:	681b      	ldr	r3, [r3, #0]
 801abdc:	429a      	cmp	r2, r3
 801abde:	d905      	bls.n	801abec <TimerInsertTimer+0x30>
    {
        cur = next;
 801abe0:	68bb      	ldr	r3, [r7, #8]
 801abe2:	60fb      	str	r3, [r7, #12]
        next = next->Next;
 801abe4:	68bb      	ldr	r3, [r7, #8]
 801abe6:	695b      	ldr	r3, [r3, #20]
 801abe8:	60bb      	str	r3, [r7, #8]
 801abea:	e006      	b.n	801abfa <TimerInsertTimer+0x3e>
    }
    else
    {
        cur->Next = TimerObject;
 801abec:	68fb      	ldr	r3, [r7, #12]
 801abee:	687a      	ldr	r2, [r7, #4]
 801abf0:	615a      	str	r2, [r3, #20]
        TimerObject->Next = next;
 801abf2:	687b      	ldr	r3, [r7, #4]
 801abf4:	68ba      	ldr	r2, [r7, #8]
 801abf6:	615a      	str	r2, [r3, #20]
        return;
 801abf8:	e009      	b.n	801ac0e <TimerInsertTimer+0x52>
  while (cur->Next != NULL )
 801abfa:	68fb      	ldr	r3, [r7, #12]
 801abfc:	695b      	ldr	r3, [r3, #20]
 801abfe:	2b00      	cmp	r3, #0
 801ac00:	d1e8      	bne.n	801abd4 <TimerInsertTimer+0x18>

    }
  }
  cur->Next = TimerObject;
 801ac02:	68fb      	ldr	r3, [r7, #12]
 801ac04:	687a      	ldr	r2, [r7, #4]
 801ac06:	615a      	str	r2, [r3, #20]
  TimerObject->Next = NULL;
 801ac08:	687b      	ldr	r3, [r7, #4]
 801ac0a:	2200      	movs	r2, #0
 801ac0c:	615a      	str	r2, [r3, #20]
}
 801ac0e:	3714      	adds	r7, #20
 801ac10:	46bd      	mov	sp, r7
 801ac12:	bc80      	pop	{r7}
 801ac14:	4770      	bx	lr
 801ac16:	bf00      	nop
 801ac18:	200015b8 	.word	0x200015b8

0801ac1c <TimerInsertNewHeadTimer>:
 *
 * @remark The list is automatically sorted. The list head always contains the
 *         next timer to expire.
 */
void TimerInsertNewHeadTimer( UTIL_TIMER_Object_t *TimerObject )
{
 801ac1c:	b580      	push	{r7, lr}
 801ac1e:	b084      	sub	sp, #16
 801ac20:	af00      	add	r7, sp, #0
 801ac22:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801ac24:	4b0b      	ldr	r3, [pc, #44]	@ (801ac54 <TimerInsertNewHeadTimer+0x38>)
 801ac26:	681b      	ldr	r3, [r3, #0]
 801ac28:	60fb      	str	r3, [r7, #12]

  if( cur != NULL )
 801ac2a:	68fb      	ldr	r3, [r7, #12]
 801ac2c:	2b00      	cmp	r3, #0
 801ac2e:	d002      	beq.n	801ac36 <TimerInsertNewHeadTimer+0x1a>
  {
    cur->IsPending = 0;
 801ac30:	68fb      	ldr	r3, [r7, #12]
 801ac32:	2200      	movs	r2, #0
 801ac34:	721a      	strb	r2, [r3, #8]
  }

  TimerObject->Next = cur;
 801ac36:	687b      	ldr	r3, [r7, #4]
 801ac38:	68fa      	ldr	r2, [r7, #12]
 801ac3a:	615a      	str	r2, [r3, #20]
  TimerListHead = TimerObject;
 801ac3c:	4a05      	ldr	r2, [pc, #20]	@ (801ac54 <TimerInsertNewHeadTimer+0x38>)
 801ac3e:	687b      	ldr	r3, [r7, #4]
 801ac40:	6013      	str	r3, [r2, #0]
  TimerSetTimeout( TimerListHead );
 801ac42:	4b04      	ldr	r3, [pc, #16]	@ (801ac54 <TimerInsertNewHeadTimer+0x38>)
 801ac44:	681b      	ldr	r3, [r3, #0]
 801ac46:	4618      	mov	r0, r3
 801ac48:	f7ff ff8e 	bl	801ab68 <TimerSetTimeout>
}
 801ac4c:	bf00      	nop
 801ac4e:	3710      	adds	r7, #16
 801ac50:	46bd      	mov	sp, r7
 801ac52:	bd80      	pop	{r7, pc}
 801ac54:	200015b8 	.word	0x200015b8

0801ac58 <UTIL_ADV_TRACE_Init>:

/** @addtogroup ADV_TRACE_exported_function
 *  @{
 */
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_Init(void)
{
 801ac58:	b580      	push	{r7, lr}
 801ac5a:	af00      	add	r7, sp, #0
  /* initialize the Ptr for Read/Write */
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Ctx, 0x0, sizeof(ADV_TRACE_Context));
 801ac5c:	2218      	movs	r2, #24
 801ac5e:	2100      	movs	r1, #0
 801ac60:	4807      	ldr	r0, [pc, #28]	@ (801ac80 <UTIL_ADV_TRACE_Init+0x28>)
 801ac62:	f7ff f87c 	bl	8019d5e <UTIL_MEM_set_8>
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Buffer, 0x0, sizeof(ADV_TRACE_Buffer));
 801ac66:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 801ac6a:	2100      	movs	r1, #0
 801ac6c:	4805      	ldr	r0, [pc, #20]	@ (801ac84 <UTIL_ADV_TRACE_Init+0x2c>)
 801ac6e:	f7ff f876 	bl	8019d5e <UTIL_MEM_set_8>
#endif
  /* Allocate Lock resource */
  UTIL_ADV_TRACE_INIT_CRITICAL_SECTION();

  /* Initialize the Low Level interface */
  return UTIL_TraceDriver.Init(TRACE_TxCpltCallback);
 801ac72:	4b05      	ldr	r3, [pc, #20]	@ (801ac88 <UTIL_ADV_TRACE_Init+0x30>)
 801ac74:	681b      	ldr	r3, [r3, #0]
 801ac76:	4805      	ldr	r0, [pc, #20]	@ (801ac8c <UTIL_ADV_TRACE_Init+0x34>)
 801ac78:	4798      	blx	r3
 801ac7a:	4603      	mov	r3, r0
}
 801ac7c:	4618      	mov	r0, r3
 801ac7e:	bd80      	pop	{r7, pc}
 801ac80:	200015bc 	.word	0x200015bc
 801ac84:	200015d4 	.word	0x200015d4
 801ac88:	0801b8f4 	.word	0x0801b8f4
 801ac8c:	0801aef9 	.word	0x0801aef9

0801ac90 <UTIL_ADV_TRACE_IsBufferEmpty>:
  /* Un-initialize the Low Level interface */
  return UTIL_TraceDriver.DeInit();
}

uint8_t UTIL_ADV_TRACE_IsBufferEmpty(void)
{
 801ac90:	b480      	push	{r7}
 801ac92:	af00      	add	r7, sp, #0
  /* check of the buffer is empty */
  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 801ac94:	4b06      	ldr	r3, [pc, #24]	@ (801acb0 <UTIL_ADV_TRACE_IsBufferEmpty+0x20>)
 801ac96:	8a5a      	ldrh	r2, [r3, #18]
 801ac98:	4b05      	ldr	r3, [pc, #20]	@ (801acb0 <UTIL_ADV_TRACE_IsBufferEmpty+0x20>)
 801ac9a:	8a1b      	ldrh	r3, [r3, #16]
 801ac9c:	429a      	cmp	r2, r3
 801ac9e:	d101      	bne.n	801aca4 <UTIL_ADV_TRACE_IsBufferEmpty+0x14>
    return 1;
 801aca0:	2301      	movs	r3, #1
 801aca2:	e000      	b.n	801aca6 <UTIL_ADV_TRACE_IsBufferEmpty+0x16>
  return 0;
 801aca4:	2300      	movs	r3, #0
}
 801aca6:	4618      	mov	r0, r3
 801aca8:	46bd      	mov	sp, r7
 801acaa:	bc80      	pop	{r7}
 801acac:	4770      	bx	lr
 801acae:	bf00      	nop
 801acb0:	200015bc 	.word	0x200015bc

0801acb4 <UTIL_ADV_TRACE_COND_FSend>:
  return UTIL_TraceDriver.StartRx(UserCallback);
}

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_COND_FSend(uint32_t VerboseLevel, uint32_t Region, uint32_t TimeStampState, const char *strFormat, ...)
{
 801acb4:	b408      	push	{r3}
 801acb6:	b580      	push	{r7, lr}
 801acb8:	b08d      	sub	sp, #52	@ 0x34
 801acba:	af00      	add	r7, sp, #0
 801acbc:	60f8      	str	r0, [r7, #12]
 801acbe:	60b9      	str	r1, [r7, #8]
 801acc0:	607a      	str	r2, [r7, #4]
  va_list vaArgs;
#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  uint8_t buf[UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
  uint16_t timestamp_size = 0u;
 801acc2:	2300      	movs	r3, #0
 801acc4:	82fb      	strh	r3, [r7, #22]
  uint16_t writepos;
  uint16_t idx;
#else
  uint8_t buf[UTIL_ADV_TRACE_TMP_BUF_SIZE+UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
#endif
  uint16_t buff_size = 0u;
 801acc6:	2300      	movs	r3, #0
 801acc8:	85bb      	strh	r3, [r7, #44]	@ 0x2c

  /* check verbose level */
  if(!(ADV_TRACE_Ctx.CurrentVerboseLevel >= VerboseLevel))
 801acca:	4b37      	ldr	r3, [pc, #220]	@ (801ada8 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801accc:	7a1b      	ldrb	r3, [r3, #8]
 801acce:	461a      	mov	r2, r3
 801acd0:	68fb      	ldr	r3, [r7, #12]
 801acd2:	4293      	cmp	r3, r2
 801acd4:	d902      	bls.n	801acdc <UTIL_ADV_TRACE_COND_FSend+0x28>
  {
    return UTIL_ADV_TRACE_GIVEUP;
 801acd6:	f06f 0304 	mvn.w	r3, #4
 801acda:	e05e      	b.n	801ad9a <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

  if((Region & ADV_TRACE_Ctx.RegionMask) != Region)
 801acdc:	4b32      	ldr	r3, [pc, #200]	@ (801ada8 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801acde:	68da      	ldr	r2, [r3, #12]
 801ace0:	68bb      	ldr	r3, [r7, #8]
 801ace2:	4013      	ands	r3, r2
 801ace4:	68ba      	ldr	r2, [r7, #8]
 801ace6:	429a      	cmp	r2, r3
 801ace8:	d002      	beq.n	801acf0 <UTIL_ADV_TRACE_COND_FSend+0x3c>
  {
    return UTIL_ADV_TRACE_REGIONMASKED;
 801acea:	f06f 0305 	mvn.w	r3, #5
 801acee:	e054      	b.n	801ad9a <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if((ADV_TRACE_Ctx.timestamp_func != NULL) && (TimeStampState != 0u))
 801acf0:	4b2d      	ldr	r3, [pc, #180]	@ (801ada8 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801acf2:	685b      	ldr	r3, [r3, #4]
 801acf4:	2b00      	cmp	r3, #0
 801acf6:	d00a      	beq.n	801ad0e <UTIL_ADV_TRACE_COND_FSend+0x5a>
 801acf8:	687b      	ldr	r3, [r7, #4]
 801acfa:	2b00      	cmp	r3, #0
 801acfc:	d007      	beq.n	801ad0e <UTIL_ADV_TRACE_COND_FSend+0x5a>
  {
    ADV_TRACE_Ctx.timestamp_func(buf,&timestamp_size);
 801acfe:	4b2a      	ldr	r3, [pc, #168]	@ (801ada8 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801ad00:	685b      	ldr	r3, [r3, #4]
 801ad02:	f107 0116 	add.w	r1, r7, #22
 801ad06:	f107 0218 	add.w	r2, r7, #24
 801ad0a:	4610      	mov	r0, r2
 801ad0c:	4798      	blx	r3
  }

  va_start( vaArgs, strFormat);
 801ad0e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 801ad12:	62bb      	str	r3, [r7, #40]	@ 0x28
  buff_size =(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)sztmp,UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 801ad14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ad16:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801ad18:	f44f 7100 	mov.w	r1, #512	@ 0x200
 801ad1c:	4823      	ldr	r0, [pc, #140]	@ (801adac <UTIL_ADV_TRACE_COND_FSend+0xf8>)
 801ad1e:	f7ff faab 	bl	801a278 <tiny_vsnprintf_like>
 801ad22:	4603      	mov	r3, r0
 801ad24:	85bb      	strh	r3, [r7, #44]	@ 0x2c

  TRACE_Lock();
 801ad26:	f000 f9f1 	bl	801b10c <TRACE_Lock>

  /* if allocation is ok, write data into the buffer */
  if (TRACE_AllocateBufer((buff_size+timestamp_size),&writepos) != -1)
 801ad2a:	8afa      	ldrh	r2, [r7, #22]
 801ad2c:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 801ad2e:	4413      	add	r3, r2
 801ad30:	b29b      	uxth	r3, r3
 801ad32:	f107 0214 	add.w	r2, r7, #20
 801ad36:	4611      	mov	r1, r2
 801ad38:	4618      	mov	r0, r3
 801ad3a:	f000 f969 	bl	801b010 <TRACE_AllocateBufer>
 801ad3e:	4603      	mov	r3, r0
 801ad40:	f1b3 3fff 	cmp.w	r3, #4294967295
 801ad44:	d025      	beq.n	801ad92 <UTIL_ADV_TRACE_COND_FSend+0xde>
    }
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

    /* copy the timestamp */
    for (idx = 0u; idx < timestamp_size; idx++)
 801ad46:	2300      	movs	r3, #0
 801ad48:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 801ad4a:	e00e      	b.n	801ad6a <UTIL_ADV_TRACE_COND_FSend+0xb6>
    {
      ADV_TRACE_Buffer[writepos] = buf[idx];
 801ad4c:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801ad4e:	8aba      	ldrh	r2, [r7, #20]
 801ad50:	3330      	adds	r3, #48	@ 0x30
 801ad52:	443b      	add	r3, r7
 801ad54:	f813 1c18 	ldrb.w	r1, [r3, #-24]
 801ad58:	4b15      	ldr	r3, [pc, #84]	@ (801adb0 <UTIL_ADV_TRACE_COND_FSend+0xfc>)
 801ad5a:	5499      	strb	r1, [r3, r2]
      writepos = writepos + 1u;
 801ad5c:	8abb      	ldrh	r3, [r7, #20]
 801ad5e:	3301      	adds	r3, #1
 801ad60:	b29b      	uxth	r3, r3
 801ad62:	82bb      	strh	r3, [r7, #20]
    for (idx = 0u; idx < timestamp_size; idx++)
 801ad64:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801ad66:	3301      	adds	r3, #1
 801ad68:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 801ad6a:	8afb      	ldrh	r3, [r7, #22]
 801ad6c:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 801ad6e:	429a      	cmp	r2, r3
 801ad70:	d3ec      	bcc.n	801ad4c <UTIL_ADV_TRACE_COND_FSend+0x98>
    }

    /* copy the data */
    (void)UTIL_ADV_TRACE_VSNPRINTF((char *)(&ADV_TRACE_Buffer[writepos]), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 801ad72:	8abb      	ldrh	r3, [r7, #20]
 801ad74:	461a      	mov	r2, r3
 801ad76:	4b0e      	ldr	r3, [pc, #56]	@ (801adb0 <UTIL_ADV_TRACE_COND_FSend+0xfc>)
 801ad78:	18d0      	adds	r0, r2, r3
 801ad7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ad7c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801ad7e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 801ad82:	f7ff fa79 	bl	801a278 <tiny_vsnprintf_like>
    va_end(vaArgs);

    TRACE_UnLock();
 801ad86:	f000 f9df 	bl	801b148 <TRACE_UnLock>

    return TRACE_Send();
 801ad8a:	f000 f831 	bl	801adf0 <TRACE_Send>
 801ad8e:	4603      	mov	r3, r0
 801ad90:	e003      	b.n	801ad9a <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

  va_end(vaArgs);
  TRACE_UnLock();
 801ad92:	f000 f9d9 	bl	801b148 <TRACE_UnLock>
    ADV_TRACE_Ctx.OverRunStatus = TRACE_OVERRUN_INDICATION;
  }
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

  return UTIL_ADV_TRACE_MEM_FULL;
 801ad96:	f06f 0302 	mvn.w	r3, #2
  buff_size += (uint16_t) UTIL_ADV_TRACE_VSNPRINTF((char* )(buf + buff_size), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
  va_end(vaArgs);

  return UTIL_ADV_TRACE_Send(buf, buff_size);
#endif
}
 801ad9a:	4618      	mov	r0, r3
 801ad9c:	3734      	adds	r7, #52	@ 0x34
 801ad9e:	46bd      	mov	sp, r7
 801ada0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801ada4:	b001      	add	sp, #4
 801ada6:	4770      	bx	lr
 801ada8:	200015bc 	.word	0x200015bc
 801adac:	200019d4 	.word	0x200019d4
 801adb0:	200015d4 	.word	0x200015d4

0801adb4 <UTIL_ADV_TRACE_RegisterTimeStampFunction>:
}
#endif

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
void UTIL_ADV_TRACE_RegisterTimeStampFunction(cb_timestamp *cb)
{
 801adb4:	b480      	push	{r7}
 801adb6:	b083      	sub	sp, #12
 801adb8:	af00      	add	r7, sp, #0
 801adba:	6078      	str	r0, [r7, #4]
  ADV_TRACE_Ctx.timestamp_func = *cb;
 801adbc:	4a03      	ldr	r2, [pc, #12]	@ (801adcc <UTIL_ADV_TRACE_RegisterTimeStampFunction+0x18>)
 801adbe:	687b      	ldr	r3, [r7, #4]
 801adc0:	6053      	str	r3, [r2, #4]
}
 801adc2:	bf00      	nop
 801adc4:	370c      	adds	r7, #12
 801adc6:	46bd      	mov	sp, r7
 801adc8:	bc80      	pop	{r7}
 801adca:	4770      	bx	lr
 801adcc:	200015bc 	.word	0x200015bc

0801add0 <UTIL_ADV_TRACE_SetVerboseLevel>:

void UTIL_ADV_TRACE_SetVerboseLevel(uint8_t Level)
{
 801add0:	b480      	push	{r7}
 801add2:	b083      	sub	sp, #12
 801add4:	af00      	add	r7, sp, #0
 801add6:	4603      	mov	r3, r0
 801add8:	71fb      	strb	r3, [r7, #7]
  ADV_TRACE_Ctx.CurrentVerboseLevel = Level;
 801adda:	4a04      	ldr	r2, [pc, #16]	@ (801adec <UTIL_ADV_TRACE_SetVerboseLevel+0x1c>)
 801addc:	79fb      	ldrb	r3, [r7, #7]
 801adde:	7213      	strb	r3, [r2, #8]
}
 801ade0:	bf00      	nop
 801ade2:	370c      	adds	r7, #12
 801ade4:	46bd      	mov	sp, r7
 801ade6:	bc80      	pop	{r7}
 801ade8:	4770      	bx	lr
 801adea:	bf00      	nop
 801adec:	200015bc 	.word	0x200015bc

0801adf0 <TRACE_Send>:
/**
 * @brief send the data of the trace to low layer
 * @retval Status based on @ref UTIL_ADV_TRACE_Status_t
 */
static UTIL_ADV_TRACE_Status_t TRACE_Send(void)
{
 801adf0:	b580      	push	{r7, lr}
 801adf2:	b088      	sub	sp, #32
 801adf4:	af00      	add	r7, sp, #0
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;
 801adf6:	2300      	movs	r3, #0
 801adf8:	77fb      	strb	r3, [r7, #31]
  uint8_t *ptr = NULL;
 801adfa:	2300      	movs	r3, #0
 801adfc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801adfe:	f3ef 8310 	mrs	r3, PRIMASK
 801ae02:	613b      	str	r3, [r7, #16]
  return(result);
 801ae04:	693b      	ldr	r3, [r7, #16]

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801ae06:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801ae08:	b672      	cpsid	i
}
 801ae0a:	bf00      	nop

  if(TRACE_IsLocked() == 0u)
 801ae0c:	f000 f9ba 	bl	801b184 <TRACE_IsLocked>
 801ae10:	4603      	mov	r3, r0
 801ae12:	2b00      	cmp	r3, #0
 801ae14:	d15d      	bne.n	801aed2 <TRACE_Send+0xe2>
  {
    TRACE_Lock();
 801ae16:	f000 f979 	bl	801b10c <TRACE_Lock>

    if(ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr)
 801ae1a:	4b34      	ldr	r3, [pc, #208]	@ (801aeec <TRACE_Send+0xfc>)
 801ae1c:	8a1a      	ldrh	r2, [r3, #16]
 801ae1e:	4b33      	ldr	r3, [pc, #204]	@ (801aeec <TRACE_Send+0xfc>)
 801ae20:	8a5b      	ldrh	r3, [r3, #18]
 801ae22:	429a      	cmp	r2, r3
 801ae24:	d04d      	beq.n	801aec2 <TRACE_Send+0xd2>
    {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
      if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 801ae26:	4b31      	ldr	r3, [pc, #196]	@ (801aeec <TRACE_Send+0xfc>)
 801ae28:	789b      	ldrb	r3, [r3, #2]
 801ae2a:	2b01      	cmp	r3, #1
 801ae2c:	d117      	bne.n	801ae5e <TRACE_Send+0x6e>
      {
        ADV_TRACE_Ctx.TraceSentSize = (uint16_t) (ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr);
 801ae2e:	4b2f      	ldr	r3, [pc, #188]	@ (801aeec <TRACE_Send+0xfc>)
 801ae30:	881a      	ldrh	r2, [r3, #0]
 801ae32:	4b2e      	ldr	r3, [pc, #184]	@ (801aeec <TRACE_Send+0xfc>)
 801ae34:	8a1b      	ldrh	r3, [r3, #16]
 801ae36:	1ad3      	subs	r3, r2, r3
 801ae38:	b29a      	uxth	r2, r3
 801ae3a:	4b2c      	ldr	r3, [pc, #176]	@ (801aeec <TRACE_Send+0xfc>)
 801ae3c:	829a      	strh	r2, [r3, #20]
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 801ae3e:	4b2b      	ldr	r3, [pc, #172]	@ (801aeec <TRACE_Send+0xfc>)
 801ae40:	2202      	movs	r2, #2
 801ae42:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = 0;
 801ae44:	4b29      	ldr	r3, [pc, #164]	@ (801aeec <TRACE_Send+0xfc>)
 801ae46:	2200      	movs	r2, #0
 801ae48:	801a      	strh	r2, [r3, #0]

        UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n", ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);

        if(0u == ADV_TRACE_Ctx.TraceSentSize)
 801ae4a:	4b28      	ldr	r3, [pc, #160]	@ (801aeec <TRACE_Send+0xfc>)
 801ae4c:	8a9b      	ldrh	r3, [r3, #20]
 801ae4e:	2b00      	cmp	r3, #0
 801ae50:	d105      	bne.n	801ae5e <TRACE_Send+0x6e>
        {
          ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801ae52:	4b26      	ldr	r3, [pc, #152]	@ (801aeec <TRACE_Send+0xfc>)
 801ae54:	2200      	movs	r2, #0
 801ae56:	709a      	strb	r2, [r3, #2]
          ADV_TRACE_Ctx.TraceRdPtr = 0;
 801ae58:	4b24      	ldr	r3, [pc, #144]	@ (801aeec <TRACE_Send+0xfc>)
 801ae5a:	2200      	movs	r2, #0
 801ae5c:	821a      	strh	r2, [r3, #16]
        }
      }

      if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 801ae5e:	4b23      	ldr	r3, [pc, #140]	@ (801aeec <TRACE_Send+0xfc>)
 801ae60:	789b      	ldrb	r3, [r3, #2]
 801ae62:	2b00      	cmp	r3, #0
 801ae64:	d115      	bne.n	801ae92 <TRACE_Send+0xa2>
      {
#endif
        if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801ae66:	4b21      	ldr	r3, [pc, #132]	@ (801aeec <TRACE_Send+0xfc>)
 801ae68:	8a5a      	ldrh	r2, [r3, #18]
 801ae6a:	4b20      	ldr	r3, [pc, #128]	@ (801aeec <TRACE_Send+0xfc>)
 801ae6c:	8a1b      	ldrh	r3, [r3, #16]
 801ae6e:	429a      	cmp	r2, r3
 801ae70:	d908      	bls.n	801ae84 <TRACE_Send+0x94>
        {
          ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 801ae72:	4b1e      	ldr	r3, [pc, #120]	@ (801aeec <TRACE_Send+0xfc>)
 801ae74:	8a5a      	ldrh	r2, [r3, #18]
 801ae76:	4b1d      	ldr	r3, [pc, #116]	@ (801aeec <TRACE_Send+0xfc>)
 801ae78:	8a1b      	ldrh	r3, [r3, #16]
 801ae7a:	1ad3      	subs	r3, r2, r3
 801ae7c:	b29a      	uxth	r2, r3
 801ae7e:	4b1b      	ldr	r3, [pc, #108]	@ (801aeec <TRACE_Send+0xfc>)
 801ae80:	829a      	strh	r2, [r3, #20]
 801ae82:	e006      	b.n	801ae92 <TRACE_Send+0xa2>
        }
        else /* TraceRdPtr > TraceWrPtr */
        {
          ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 801ae84:	4b19      	ldr	r3, [pc, #100]	@ (801aeec <TRACE_Send+0xfc>)
 801ae86:	8a1b      	ldrh	r3, [r3, #16]
 801ae88:	f5c3 6380 	rsb	r3, r3, #1024	@ 0x400
 801ae8c:	b29a      	uxth	r2, r3
 801ae8e:	4b17      	ldr	r3, [pc, #92]	@ (801aeec <TRACE_Send+0xfc>)
 801ae90:	829a      	strh	r2, [r3, #20]

        }
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
      }
#endif
      ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 801ae92:	4b16      	ldr	r3, [pc, #88]	@ (801aeec <TRACE_Send+0xfc>)
 801ae94:	8a1b      	ldrh	r3, [r3, #16]
 801ae96:	461a      	mov	r2, r3
 801ae98:	4b15      	ldr	r3, [pc, #84]	@ (801aef0 <TRACE_Send+0x100>)
 801ae9a:	4413      	add	r3, r2
 801ae9c:	61bb      	str	r3, [r7, #24]
 801ae9e:	697b      	ldr	r3, [r7, #20]
 801aea0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801aea2:	68fb      	ldr	r3, [r7, #12]
 801aea4:	f383 8810 	msr	PRIMASK, r3
}
 801aea8:	bf00      	nop

      UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
      UTIL_ADV_TRACE_PreSendHook();
 801aeaa:	f7e6 fe8d 	bl	8001bc8 <UTIL_ADV_TRACE_PreSendHook>

      UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n", ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
      ret = UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 801aeae:	4b11      	ldr	r3, [pc, #68]	@ (801aef4 <TRACE_Send+0x104>)
 801aeb0:	68db      	ldr	r3, [r3, #12]
 801aeb2:	4a0e      	ldr	r2, [pc, #56]	@ (801aeec <TRACE_Send+0xfc>)
 801aeb4:	8a92      	ldrh	r2, [r2, #20]
 801aeb6:	4611      	mov	r1, r2
 801aeb8:	69b8      	ldr	r0, [r7, #24]
 801aeba:	4798      	blx	r3
 801aebc:	4603      	mov	r3, r0
 801aebe:	77fb      	strb	r3, [r7, #31]
 801aec0:	e00d      	b.n	801aede <TRACE_Send+0xee>
    }
    else
    {
      TRACE_UnLock();
 801aec2:	f000 f941 	bl	801b148 <TRACE_UnLock>
 801aec6:	697b      	ldr	r3, [r7, #20]
 801aec8:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801aeca:	68bb      	ldr	r3, [r7, #8]
 801aecc:	f383 8810 	msr	PRIMASK, r3
}
 801aed0:	e005      	b.n	801aede <TRACE_Send+0xee>
 801aed2:	697b      	ldr	r3, [r7, #20]
 801aed4:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801aed6:	687b      	ldr	r3, [r7, #4]
 801aed8:	f383 8810 	msr	PRIMASK, r3
}
 801aedc:	bf00      	nop
  else
  {
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  }

  return ret;
 801aede:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801aee2:	4618      	mov	r0, r3
 801aee4:	3720      	adds	r7, #32
 801aee6:	46bd      	mov	sp, r7
 801aee8:	bd80      	pop	{r7, pc}
 801aeea:	bf00      	nop
 801aeec:	200015bc 	.word	0x200015bc
 801aef0:	200015d4 	.word	0x200015d4
 801aef4:	0801b8f4 	.word	0x0801b8f4

0801aef8 <TRACE_TxCpltCallback>:
 * @brief Tx callback called by the low layer level to inform a transfer complete
 * @param Ptr pointer not used only for HAL compatibility
 * @retval none
 */
static void TRACE_TxCpltCallback(void *Ptr)
{
 801aef8:	b580      	push	{r7, lr}
 801aefa:	b088      	sub	sp, #32
 801aefc:	af00      	add	r7, sp, #0
 801aefe:	6078      	str	r0, [r7, #4]
  uint8_t *ptr = NULL;
 801af00:	2300      	movs	r3, #0
 801af02:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801af04:	f3ef 8310 	mrs	r3, PRIMASK
 801af08:	617b      	str	r3, [r7, #20]
  return(result);
 801af0a:	697b      	ldr	r3, [r7, #20]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801af0c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 801af0e:	b672      	cpsid	i
}
 801af10:	bf00      	nop
    ADV_TRACE_Ctx.TraceSentSize = 0u;
  }
#endif

#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if(TRACE_UNCHUNK_TRANSFER == ADV_TRACE_Ctx.unchunk_status)
 801af12:	4b3c      	ldr	r3, [pc, #240]	@ (801b004 <TRACE_TxCpltCallback+0x10c>)
 801af14:	789b      	ldrb	r3, [r3, #2]
 801af16:	2b02      	cmp	r3, #2
 801af18:	d106      	bne.n	801af28 <TRACE_TxCpltCallback+0x30>
  {
    ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801af1a:	4b3a      	ldr	r3, [pc, #232]	@ (801b004 <TRACE_TxCpltCallback+0x10c>)
 801af1c:	2200      	movs	r2, #0
 801af1e:	709a      	strb	r2, [r3, #2]
    ADV_TRACE_Ctx.TraceRdPtr = 0;
 801af20:	4b38      	ldr	r3, [pc, #224]	@ (801b004 <TRACE_TxCpltCallback+0x10c>)
 801af22:	2200      	movs	r2, #0
 801af24:	821a      	strh	r2, [r3, #16]
 801af26:	e00a      	b.n	801af3e <TRACE_TxCpltCallback+0x46>
    UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk complete\n");
  }
  else
  {
    ADV_TRACE_Ctx.TraceRdPtr = (ADV_TRACE_Ctx.TraceRdPtr + ADV_TRACE_Ctx.TraceSentSize) % UTIL_ADV_TRACE_FIFO_SIZE;
 801af28:	4b36      	ldr	r3, [pc, #216]	@ (801b004 <TRACE_TxCpltCallback+0x10c>)
 801af2a:	8a1a      	ldrh	r2, [r3, #16]
 801af2c:	4b35      	ldr	r3, [pc, #212]	@ (801b004 <TRACE_TxCpltCallback+0x10c>)
 801af2e:	8a9b      	ldrh	r3, [r3, #20]
 801af30:	4413      	add	r3, r2
 801af32:	b29b      	uxth	r3, r3
 801af34:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801af38:	b29a      	uxth	r2, r3
 801af3a:	4b32      	ldr	r3, [pc, #200]	@ (801b004 <TRACE_TxCpltCallback+0x10c>)
 801af3c:	821a      	strh	r2, [r3, #16]
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
    return;
  }
#endif

  if((ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr) && (1u == ADV_TRACE_Ctx.TraceLock))
 801af3e:	4b31      	ldr	r3, [pc, #196]	@ (801b004 <TRACE_TxCpltCallback+0x10c>)
 801af40:	8a1a      	ldrh	r2, [r3, #16]
 801af42:	4b30      	ldr	r3, [pc, #192]	@ (801b004 <TRACE_TxCpltCallback+0x10c>)
 801af44:	8a5b      	ldrh	r3, [r3, #18]
 801af46:	429a      	cmp	r2, r3
 801af48:	d04d      	beq.n	801afe6 <TRACE_TxCpltCallback+0xee>
 801af4a:	4b2e      	ldr	r3, [pc, #184]	@ (801b004 <TRACE_TxCpltCallback+0x10c>)
 801af4c:	8adb      	ldrh	r3, [r3, #22]
 801af4e:	2b01      	cmp	r3, #1
 801af50:	d149      	bne.n	801afe6 <TRACE_TxCpltCallback+0xee>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 801af52:	4b2c      	ldr	r3, [pc, #176]	@ (801b004 <TRACE_TxCpltCallback+0x10c>)
 801af54:	789b      	ldrb	r3, [r3, #2]
 801af56:	2b01      	cmp	r3, #1
 801af58:	d117      	bne.n	801af8a <TRACE_TxCpltCallback+0x92>
    {
      ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr;
 801af5a:	4b2a      	ldr	r3, [pc, #168]	@ (801b004 <TRACE_TxCpltCallback+0x10c>)
 801af5c:	881a      	ldrh	r2, [r3, #0]
 801af5e:	4b29      	ldr	r3, [pc, #164]	@ (801b004 <TRACE_TxCpltCallback+0x10c>)
 801af60:	8a1b      	ldrh	r3, [r3, #16]
 801af62:	1ad3      	subs	r3, r2, r3
 801af64:	b29a      	uxth	r2, r3
 801af66:	4b27      	ldr	r3, [pc, #156]	@ (801b004 <TRACE_TxCpltCallback+0x10c>)
 801af68:	829a      	strh	r2, [r3, #20]
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 801af6a:	4b26      	ldr	r3, [pc, #152]	@ (801b004 <TRACE_TxCpltCallback+0x10c>)
 801af6c:	2202      	movs	r2, #2
 801af6e:	709a      	strb	r2, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = 0;
 801af70:	4b24      	ldr	r3, [pc, #144]	@ (801b004 <TRACE_TxCpltCallback+0x10c>)
 801af72:	2200      	movs	r2, #0
 801af74:	801a      	strh	r2, [r3, #0]

      UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n", ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);

      if(0u == ADV_TRACE_Ctx.TraceSentSize)
 801af76:	4b23      	ldr	r3, [pc, #140]	@ (801b004 <TRACE_TxCpltCallback+0x10c>)
 801af78:	8a9b      	ldrh	r3, [r3, #20]
 801af7a:	2b00      	cmp	r3, #0
 801af7c:	d105      	bne.n	801af8a <TRACE_TxCpltCallback+0x92>
      {
        /* this case occurs when an ongoing write aligned the Rd position with chunk position */
        /* in that case the unchunk is forgot */
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801af7e:	4b21      	ldr	r3, [pc, #132]	@ (801b004 <TRACE_TxCpltCallback+0x10c>)
 801af80:	2200      	movs	r2, #0
 801af82:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.TraceRdPtr = 0;
 801af84:	4b1f      	ldr	r3, [pc, #124]	@ (801b004 <TRACE_TxCpltCallback+0x10c>)
 801af86:	2200      	movs	r2, #0
 801af88:	821a      	strh	r2, [r3, #16]
      }
    }

    if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 801af8a:	4b1e      	ldr	r3, [pc, #120]	@ (801b004 <TRACE_TxCpltCallback+0x10c>)
 801af8c:	789b      	ldrb	r3, [r3, #2]
 801af8e:	2b00      	cmp	r3, #0
 801af90:	d115      	bne.n	801afbe <TRACE_TxCpltCallback+0xc6>
    {
#endif
      if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801af92:	4b1c      	ldr	r3, [pc, #112]	@ (801b004 <TRACE_TxCpltCallback+0x10c>)
 801af94:	8a5a      	ldrh	r2, [r3, #18]
 801af96:	4b1b      	ldr	r3, [pc, #108]	@ (801b004 <TRACE_TxCpltCallback+0x10c>)
 801af98:	8a1b      	ldrh	r3, [r3, #16]
 801af9a:	429a      	cmp	r2, r3
 801af9c:	d908      	bls.n	801afb0 <TRACE_TxCpltCallback+0xb8>
      {
        ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 801af9e:	4b19      	ldr	r3, [pc, #100]	@ (801b004 <TRACE_TxCpltCallback+0x10c>)
 801afa0:	8a5a      	ldrh	r2, [r3, #18]
 801afa2:	4b18      	ldr	r3, [pc, #96]	@ (801b004 <TRACE_TxCpltCallback+0x10c>)
 801afa4:	8a1b      	ldrh	r3, [r3, #16]
 801afa6:	1ad3      	subs	r3, r2, r3
 801afa8:	b29a      	uxth	r2, r3
 801afaa:	4b16      	ldr	r3, [pc, #88]	@ (801b004 <TRACE_TxCpltCallback+0x10c>)
 801afac:	829a      	strh	r2, [r3, #20]
 801afae:	e006      	b.n	801afbe <TRACE_TxCpltCallback+0xc6>
      }
      else /* TraceRdPtr > TraceWrPtr */
      {
        ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 801afb0:	4b14      	ldr	r3, [pc, #80]	@ (801b004 <TRACE_TxCpltCallback+0x10c>)
 801afb2:	8a1b      	ldrh	r3, [r3, #16]
 801afb4:	f5c3 6380 	rsb	r3, r3, #1024	@ 0x400
 801afb8:	b29a      	uxth	r2, r3
 801afba:	4b12      	ldr	r3, [pc, #72]	@ (801b004 <TRACE_TxCpltCallback+0x10c>)
 801afbc:	829a      	strh	r2, [r3, #20]
      }
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    }
#endif
    ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 801afbe:	4b11      	ldr	r3, [pc, #68]	@ (801b004 <TRACE_TxCpltCallback+0x10c>)
 801afc0:	8a1b      	ldrh	r3, [r3, #16]
 801afc2:	461a      	mov	r2, r3
 801afc4:	4b10      	ldr	r3, [pc, #64]	@ (801b008 <TRACE_TxCpltCallback+0x110>)
 801afc6:	4413      	add	r3, r2
 801afc8:	61fb      	str	r3, [r7, #28]
 801afca:	69bb      	ldr	r3, [r7, #24]
 801afcc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801afce:	693b      	ldr	r3, [r7, #16]
 801afd0:	f383 8810 	msr	PRIMASK, r3
}
 801afd4:	bf00      	nop
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
    UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n", ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 801afd6:	4b0d      	ldr	r3, [pc, #52]	@ (801b00c <TRACE_TxCpltCallback+0x114>)
 801afd8:	68db      	ldr	r3, [r3, #12]
 801afda:	4a0a      	ldr	r2, [pc, #40]	@ (801b004 <TRACE_TxCpltCallback+0x10c>)
 801afdc:	8a92      	ldrh	r2, [r2, #20]
 801afde:	4611      	mov	r1, r2
 801afe0:	69f8      	ldr	r0, [r7, #28]
 801afe2:	4798      	blx	r3
 801afe4:	e00a      	b.n	801affc <TRACE_TxCpltCallback+0x104>
 801afe6:	69bb      	ldr	r3, [r7, #24]
 801afe8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801afea:	68fb      	ldr	r3, [r7, #12]
 801afec:	f383 8810 	msr	PRIMASK, r3
}
 801aff0:	bf00      	nop
  }
  else
  {
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
    UTIL_ADV_TRACE_PostSendHook();
 801aff2:	f7e6 fdf1 	bl	8001bd8 <UTIL_ADV_TRACE_PostSendHook>
    TRACE_UnLock();
 801aff6:	f000 f8a7 	bl	801b148 <TRACE_UnLock>
  }
}
 801affa:	bf00      	nop
 801affc:	bf00      	nop
 801affe:	3720      	adds	r7, #32
 801b000:	46bd      	mov	sp, r7
 801b002:	bd80      	pop	{r7, pc}
 801b004:	200015bc 	.word	0x200015bc
 801b008:	200015d4 	.word	0x200015d4
 801b00c:	0801b8f4 	.word	0x0801b8f4

0801b010 <TRACE_AllocateBufer>:
 * @param  Size to allocate within fifo
 * @param  Pos position within the fifo
 * @retval write position inside the buffer is -1 no space available.
 */
static int16_t TRACE_AllocateBufer(uint16_t Size, uint16_t *Pos)
{
 801b010:	b480      	push	{r7}
 801b012:	b087      	sub	sp, #28
 801b014:	af00      	add	r7, sp, #0
 801b016:	4603      	mov	r3, r0
 801b018:	6039      	str	r1, [r7, #0]
 801b01a:	80fb      	strh	r3, [r7, #6]
  uint16_t freesize;
  int16_t ret = -1;
 801b01c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801b020:	82bb      	strh	r3, [r7, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b022:	f3ef 8310 	mrs	r3, PRIMASK
 801b026:	60fb      	str	r3, [r7, #12]
  return(result);
 801b028:	68fb      	ldr	r3, [r7, #12]

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801b02a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 801b02c:	b672      	cpsid	i
}
 801b02e:	bf00      	nop

  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 801b030:	4b35      	ldr	r3, [pc, #212]	@ (801b108 <TRACE_AllocateBufer+0xf8>)
 801b032:	8a5a      	ldrh	r2, [r3, #18]
 801b034:	4b34      	ldr	r3, [pc, #208]	@ (801b108 <TRACE_AllocateBufer+0xf8>)
 801b036:	8a1b      	ldrh	r3, [r3, #16]
 801b038:	429a      	cmp	r2, r3
 801b03a:	d11b      	bne.n	801b074 <TRACE_AllocateBufer+0x64>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 801b03c:	4b32      	ldr	r3, [pc, #200]	@ (801b108 <TRACE_AllocateBufer+0xf8>)
 801b03e:	8a5b      	ldrh	r3, [r3, #18]
 801b040:	f5c3 6380 	rsb	r3, r3, #1024	@ 0x400
 801b044:	82fb      	strh	r3, [r7, #22]
    if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size))
 801b046:	88fa      	ldrh	r2, [r7, #6]
 801b048:	8afb      	ldrh	r3, [r7, #22]
 801b04a:	429a      	cmp	r2, r3
 801b04c:	d33a      	bcc.n	801b0c4 <TRACE_AllocateBufer+0xb4>
 801b04e:	4b2e      	ldr	r3, [pc, #184]	@ (801b108 <TRACE_AllocateBufer+0xf8>)
 801b050:	8a1b      	ldrh	r3, [r3, #16]
 801b052:	88fa      	ldrh	r2, [r7, #6]
 801b054:	429a      	cmp	r2, r3
 801b056:	d235      	bcs.n	801b0c4 <TRACE_AllocateBufer+0xb4>
    {
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 801b058:	4b2b      	ldr	r3, [pc, #172]	@ (801b108 <TRACE_AllocateBufer+0xf8>)
 801b05a:	2201      	movs	r2, #1
 801b05c:	709a      	strb	r2, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 801b05e:	4b2a      	ldr	r3, [pc, #168]	@ (801b108 <TRACE_AllocateBufer+0xf8>)
 801b060:	8a5a      	ldrh	r2, [r3, #18]
 801b062:	4b29      	ldr	r3, [pc, #164]	@ (801b108 <TRACE_AllocateBufer+0xf8>)
 801b064:	801a      	strh	r2, [r3, #0]
      freesize = ADV_TRACE_Ctx.TraceRdPtr;
 801b066:	4b28      	ldr	r3, [pc, #160]	@ (801b108 <TRACE_AllocateBufer+0xf8>)
 801b068:	8a1b      	ldrh	r3, [r3, #16]
 801b06a:	82fb      	strh	r3, [r7, #22]
      ADV_TRACE_Ctx.TraceWrPtr = 0;
 801b06c:	4b26      	ldr	r3, [pc, #152]	@ (801b108 <TRACE_AllocateBufer+0xf8>)
 801b06e:	2200      	movs	r2, #0
 801b070:	825a      	strh	r2, [r3, #18]
 801b072:	e027      	b.n	801b0c4 <TRACE_AllocateBufer+0xb4>
#endif
  }
  else
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801b074:	4b24      	ldr	r3, [pc, #144]	@ (801b108 <TRACE_AllocateBufer+0xf8>)
 801b076:	8a5a      	ldrh	r2, [r3, #18]
 801b078:	4b23      	ldr	r3, [pc, #140]	@ (801b108 <TRACE_AllocateBufer+0xf8>)
 801b07a:	8a1b      	ldrh	r3, [r3, #16]
 801b07c:	429a      	cmp	r2, r3
 801b07e:	d91b      	bls.n	801b0b8 <TRACE_AllocateBufer+0xa8>
    {
      freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 801b080:	4b21      	ldr	r3, [pc, #132]	@ (801b108 <TRACE_AllocateBufer+0xf8>)
 801b082:	8a5b      	ldrh	r3, [r3, #18]
 801b084:	f5c3 6380 	rsb	r3, r3, #1024	@ 0x400
 801b088:	82fb      	strh	r3, [r7, #22]
      if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size)) 
 801b08a:	88fa      	ldrh	r2, [r7, #6]
 801b08c:	8afb      	ldrh	r3, [r7, #22]
 801b08e:	429a      	cmp	r2, r3
 801b090:	d318      	bcc.n	801b0c4 <TRACE_AllocateBufer+0xb4>
 801b092:	4b1d      	ldr	r3, [pc, #116]	@ (801b108 <TRACE_AllocateBufer+0xf8>)
 801b094:	8a1b      	ldrh	r3, [r3, #16]
 801b096:	88fa      	ldrh	r2, [r7, #6]
 801b098:	429a      	cmp	r2, r3
 801b09a:	d213      	bcs.n	801b0c4 <TRACE_AllocateBufer+0xb4>
      {
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 801b09c:	4b1a      	ldr	r3, [pc, #104]	@ (801b108 <TRACE_AllocateBufer+0xf8>)
 801b09e:	2201      	movs	r2, #1
 801b0a0:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 801b0a2:	4b19      	ldr	r3, [pc, #100]	@ (801b108 <TRACE_AllocateBufer+0xf8>)
 801b0a4:	8a5a      	ldrh	r2, [r3, #18]
 801b0a6:	4b18      	ldr	r3, [pc, #96]	@ (801b108 <TRACE_AllocateBufer+0xf8>)
 801b0a8:	801a      	strh	r2, [r3, #0]
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
 801b0aa:	4b17      	ldr	r3, [pc, #92]	@ (801b108 <TRACE_AllocateBufer+0xf8>)
 801b0ac:	8a1b      	ldrh	r3, [r3, #16]
 801b0ae:	82fb      	strh	r3, [r7, #22]
        ADV_TRACE_Ctx.TraceWrPtr = 0;
 801b0b0:	4b15      	ldr	r3, [pc, #84]	@ (801b108 <TRACE_AllocateBufer+0xf8>)
 801b0b2:	2200      	movs	r2, #0
 801b0b4:	825a      	strh	r2, [r3, #18]
 801b0b6:	e005      	b.n	801b0c4 <TRACE_AllocateBufer+0xb4>
      }
    }
    else
    {
      freesize = (uint16_t)(ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr);
 801b0b8:	4b13      	ldr	r3, [pc, #76]	@ (801b108 <TRACE_AllocateBufer+0xf8>)
 801b0ba:	8a1a      	ldrh	r2, [r3, #16]
 801b0bc:	4b12      	ldr	r3, [pc, #72]	@ (801b108 <TRACE_AllocateBufer+0xf8>)
 801b0be:	8a5b      	ldrh	r3, [r3, #18]
 801b0c0:	1ad3      	subs	r3, r2, r3
 801b0c2:	82fb      	strh	r3, [r7, #22]
      freesize = ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr;
    }
#endif
  }

  if(freesize > Size)
 801b0c4:	8afa      	ldrh	r2, [r7, #22]
 801b0c6:	88fb      	ldrh	r3, [r7, #6]
 801b0c8:	429a      	cmp	r2, r3
 801b0ca:	d90f      	bls.n	801b0ec <TRACE_AllocateBufer+0xdc>
  {
    *Pos = ADV_TRACE_Ctx.TraceWrPtr;
 801b0cc:	4b0e      	ldr	r3, [pc, #56]	@ (801b108 <TRACE_AllocateBufer+0xf8>)
 801b0ce:	8a5a      	ldrh	r2, [r3, #18]
 801b0d0:	683b      	ldr	r3, [r7, #0]
 801b0d2:	801a      	strh	r2, [r3, #0]
    ADV_TRACE_Ctx.TraceWrPtr = (ADV_TRACE_Ctx.TraceWrPtr + Size) % UTIL_ADV_TRACE_FIFO_SIZE;
 801b0d4:	4b0c      	ldr	r3, [pc, #48]	@ (801b108 <TRACE_AllocateBufer+0xf8>)
 801b0d6:	8a5a      	ldrh	r2, [r3, #18]
 801b0d8:	88fb      	ldrh	r3, [r7, #6]
 801b0da:	4413      	add	r3, r2
 801b0dc:	b29b      	uxth	r3, r3
 801b0de:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801b0e2:	b29a      	uxth	r2, r3
 801b0e4:	4b08      	ldr	r3, [pc, #32]	@ (801b108 <TRACE_AllocateBufer+0xf8>)
 801b0e6:	825a      	strh	r2, [r3, #18]
    ret = 0;
 801b0e8:	2300      	movs	r3, #0
 801b0ea:	82bb      	strh	r3, [r7, #20]
 801b0ec:	693b      	ldr	r3, [r7, #16]
 801b0ee:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b0f0:	68bb      	ldr	r3, [r7, #8]
 801b0f2:	f383 8810 	msr	PRIMASK, r3
}
 801b0f6:	bf00      	nop
    }
  }
#endif

  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  return ret;
 801b0f8:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
}
 801b0fc:	4618      	mov	r0, r3
 801b0fe:	371c      	adds	r7, #28
 801b100:	46bd      	mov	sp, r7
 801b102:	bc80      	pop	{r7}
 801b104:	4770      	bx	lr
 801b106:	bf00      	nop
 801b108:	200015bc 	.word	0x200015bc

0801b10c <TRACE_Lock>:
/**
 * @brief  Lock the trace buffer.
 * @retval None.
 */
static void TRACE_Lock(void)
{
 801b10c:	b480      	push	{r7}
 801b10e:	b085      	sub	sp, #20
 801b110:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b112:	f3ef 8310 	mrs	r3, PRIMASK
 801b116:	607b      	str	r3, [r7, #4]
  return(result);
 801b118:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801b11a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801b11c:	b672      	cpsid	i
}
 801b11e:	bf00      	nop
  ADV_TRACE_Ctx.TraceLock++;
 801b120:	4b08      	ldr	r3, [pc, #32]	@ (801b144 <TRACE_Lock+0x38>)
 801b122:	8adb      	ldrh	r3, [r3, #22]
 801b124:	3301      	adds	r3, #1
 801b126:	b29a      	uxth	r2, r3
 801b128:	4b06      	ldr	r3, [pc, #24]	@ (801b144 <TRACE_Lock+0x38>)
 801b12a:	82da      	strh	r2, [r3, #22]
 801b12c:	68fb      	ldr	r3, [r7, #12]
 801b12e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b130:	68bb      	ldr	r3, [r7, #8]
 801b132:	f383 8810 	msr	PRIMASK, r3
}
 801b136:	bf00      	nop
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 801b138:	bf00      	nop
 801b13a:	3714      	adds	r7, #20
 801b13c:	46bd      	mov	sp, r7
 801b13e:	bc80      	pop	{r7}
 801b140:	4770      	bx	lr
 801b142:	bf00      	nop
 801b144:	200015bc 	.word	0x200015bc

0801b148 <TRACE_UnLock>:
/**
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static void TRACE_UnLock(void)
{
 801b148:	b480      	push	{r7}
 801b14a:	b085      	sub	sp, #20
 801b14c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b14e:	f3ef 8310 	mrs	r3, PRIMASK
 801b152:	607b      	str	r3, [r7, #4]
  return(result);
 801b154:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801b156:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801b158:	b672      	cpsid	i
}
 801b15a:	bf00      	nop
  ADV_TRACE_Ctx.TraceLock--;
 801b15c:	4b08      	ldr	r3, [pc, #32]	@ (801b180 <TRACE_UnLock+0x38>)
 801b15e:	8adb      	ldrh	r3, [r3, #22]
 801b160:	3b01      	subs	r3, #1
 801b162:	b29a      	uxth	r2, r3
 801b164:	4b06      	ldr	r3, [pc, #24]	@ (801b180 <TRACE_UnLock+0x38>)
 801b166:	82da      	strh	r2, [r3, #22]
 801b168:	68fb      	ldr	r3, [r7, #12]
 801b16a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b16c:	68bb      	ldr	r3, [r7, #8]
 801b16e:	f383 8810 	msr	PRIMASK, r3
}
 801b172:	bf00      	nop
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 801b174:	bf00      	nop
 801b176:	3714      	adds	r7, #20
 801b178:	46bd      	mov	sp, r7
 801b17a:	bc80      	pop	{r7}
 801b17c:	4770      	bx	lr
 801b17e:	bf00      	nop
 801b180:	200015bc 	.word	0x200015bc

0801b184 <TRACE_IsLocked>:
/**
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static uint32_t TRACE_IsLocked(void)
{
 801b184:	b480      	push	{r7}
 801b186:	af00      	add	r7, sp, #0
  return (ADV_TRACE_Ctx.TraceLock == 0u? 0u: 1u);
 801b188:	4b05      	ldr	r3, [pc, #20]	@ (801b1a0 <TRACE_IsLocked+0x1c>)
 801b18a:	8adb      	ldrh	r3, [r3, #22]
 801b18c:	2b00      	cmp	r3, #0
 801b18e:	bf14      	ite	ne
 801b190:	2301      	movne	r3, #1
 801b192:	2300      	moveq	r3, #0
 801b194:	b2db      	uxtb	r3, r3
}
 801b196:	4618      	mov	r0, r3
 801b198:	46bd      	mov	sp, r7
 801b19a:	bc80      	pop	{r7}
 801b19c:	4770      	bx	lr
 801b19e:	bf00      	nop
 801b1a0:	200015bc 	.word	0x200015bc

0801b1a4 <memset>:
 801b1a4:	4402      	add	r2, r0
 801b1a6:	4603      	mov	r3, r0
 801b1a8:	4293      	cmp	r3, r2
 801b1aa:	d100      	bne.n	801b1ae <memset+0xa>
 801b1ac:	4770      	bx	lr
 801b1ae:	f803 1b01 	strb.w	r1, [r3], #1
 801b1b2:	e7f9      	b.n	801b1a8 <memset+0x4>

0801b1b4 <__libc_init_array>:
 801b1b4:	b570      	push	{r4, r5, r6, lr}
 801b1b6:	4d0d      	ldr	r5, [pc, #52]	@ (801b1ec <__libc_init_array+0x38>)
 801b1b8:	4c0d      	ldr	r4, [pc, #52]	@ (801b1f0 <__libc_init_array+0x3c>)
 801b1ba:	1b64      	subs	r4, r4, r5
 801b1bc:	10a4      	asrs	r4, r4, #2
 801b1be:	2600      	movs	r6, #0
 801b1c0:	42a6      	cmp	r6, r4
 801b1c2:	d109      	bne.n	801b1d8 <__libc_init_array+0x24>
 801b1c4:	4d0b      	ldr	r5, [pc, #44]	@ (801b1f4 <__libc_init_array+0x40>)
 801b1c6:	4c0c      	ldr	r4, [pc, #48]	@ (801b1f8 <__libc_init_array+0x44>)
 801b1c8:	f000 f89a 	bl	801b300 <_init>
 801b1cc:	1b64      	subs	r4, r4, r5
 801b1ce:	10a4      	asrs	r4, r4, #2
 801b1d0:	2600      	movs	r6, #0
 801b1d2:	42a6      	cmp	r6, r4
 801b1d4:	d105      	bne.n	801b1e2 <__libc_init_array+0x2e>
 801b1d6:	bd70      	pop	{r4, r5, r6, pc}
 801b1d8:	f855 3b04 	ldr.w	r3, [r5], #4
 801b1dc:	4798      	blx	r3
 801b1de:	3601      	adds	r6, #1
 801b1e0:	e7ee      	b.n	801b1c0 <__libc_init_array+0xc>
 801b1e2:	f855 3b04 	ldr.w	r3, [r5], #4
 801b1e6:	4798      	blx	r3
 801b1e8:	3601      	adds	r6, #1
 801b1ea:	e7f2      	b.n	801b1d2 <__libc_init_array+0x1e>
 801b1ec:	0801bf38 	.word	0x0801bf38
 801b1f0:	0801bf38 	.word	0x0801bf38
 801b1f4:	0801bf38 	.word	0x0801bf38
 801b1f8:	0801bf3c 	.word	0x0801bf3c
 801b1fc:	00000000 	.word	0x00000000

0801b200 <floor>:
 801b200:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b204:	f3c1 570a 	ubfx	r7, r1, #20, #11
 801b208:	f2a7 36ff 	subw	r6, r7, #1023	@ 0x3ff
 801b20c:	2e13      	cmp	r6, #19
 801b20e:	4602      	mov	r2, r0
 801b210:	460b      	mov	r3, r1
 801b212:	460c      	mov	r4, r1
 801b214:	4605      	mov	r5, r0
 801b216:	4680      	mov	r8, r0
 801b218:	dc35      	bgt.n	801b286 <floor+0x86>
 801b21a:	2e00      	cmp	r6, #0
 801b21c:	da17      	bge.n	801b24e <floor+0x4e>
 801b21e:	a334      	add	r3, pc, #208	@ (adr r3, 801b2f0 <floor+0xf0>)
 801b220:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b224:	f7e4 ffb6 	bl	8000194 <__adddf3>
 801b228:	2200      	movs	r2, #0
 801b22a:	2300      	movs	r3, #0
 801b22c:	f7e5 f9e6 	bl	80005fc <__aeabi_dcmpgt>
 801b230:	b150      	cbz	r0, 801b248 <floor+0x48>
 801b232:	2c00      	cmp	r4, #0
 801b234:	da57      	bge.n	801b2e6 <floor+0xe6>
 801b236:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 801b23a:	432c      	orrs	r4, r5
 801b23c:	2500      	movs	r5, #0
 801b23e:	42ac      	cmp	r4, r5
 801b240:	4c2d      	ldr	r4, [pc, #180]	@ (801b2f8 <floor+0xf8>)
 801b242:	bf08      	it	eq
 801b244:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 801b248:	4623      	mov	r3, r4
 801b24a:	462a      	mov	r2, r5
 801b24c:	e024      	b.n	801b298 <floor+0x98>
 801b24e:	4f2b      	ldr	r7, [pc, #172]	@ (801b2fc <floor+0xfc>)
 801b250:	4137      	asrs	r7, r6
 801b252:	ea01 0c07 	and.w	ip, r1, r7
 801b256:	ea5c 0c00 	orrs.w	ip, ip, r0
 801b25a:	d01d      	beq.n	801b298 <floor+0x98>
 801b25c:	a324      	add	r3, pc, #144	@ (adr r3, 801b2f0 <floor+0xf0>)
 801b25e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b262:	f7e4 ff97 	bl	8000194 <__adddf3>
 801b266:	2200      	movs	r2, #0
 801b268:	2300      	movs	r3, #0
 801b26a:	f7e5 f9c7 	bl	80005fc <__aeabi_dcmpgt>
 801b26e:	2800      	cmp	r0, #0
 801b270:	d0ea      	beq.n	801b248 <floor+0x48>
 801b272:	2c00      	cmp	r4, #0
 801b274:	bfbe      	ittt	lt
 801b276:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 801b27a:	4133      	asrlt	r3, r6
 801b27c:	18e4      	addlt	r4, r4, r3
 801b27e:	ea24 0407 	bic.w	r4, r4, r7
 801b282:	2500      	movs	r5, #0
 801b284:	e7e0      	b.n	801b248 <floor+0x48>
 801b286:	2e33      	cmp	r6, #51	@ 0x33
 801b288:	dd0a      	ble.n	801b2a0 <floor+0xa0>
 801b28a:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 801b28e:	d103      	bne.n	801b298 <floor+0x98>
 801b290:	f7e4 ff80 	bl	8000194 <__adddf3>
 801b294:	4602      	mov	r2, r0
 801b296:	460b      	mov	r3, r1
 801b298:	4610      	mov	r0, r2
 801b29a:	4619      	mov	r1, r3
 801b29c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b2a0:	f2a7 4713 	subw	r7, r7, #1043	@ 0x413
 801b2a4:	f04f 3cff 	mov.w	ip, #4294967295
 801b2a8:	fa2c f707 	lsr.w	r7, ip, r7
 801b2ac:	4207      	tst	r7, r0
 801b2ae:	d0f3      	beq.n	801b298 <floor+0x98>
 801b2b0:	a30f      	add	r3, pc, #60	@ (adr r3, 801b2f0 <floor+0xf0>)
 801b2b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b2b6:	f7e4 ff6d 	bl	8000194 <__adddf3>
 801b2ba:	2200      	movs	r2, #0
 801b2bc:	2300      	movs	r3, #0
 801b2be:	f7e5 f99d 	bl	80005fc <__aeabi_dcmpgt>
 801b2c2:	2800      	cmp	r0, #0
 801b2c4:	d0c0      	beq.n	801b248 <floor+0x48>
 801b2c6:	2c00      	cmp	r4, #0
 801b2c8:	da0a      	bge.n	801b2e0 <floor+0xe0>
 801b2ca:	2e14      	cmp	r6, #20
 801b2cc:	d101      	bne.n	801b2d2 <floor+0xd2>
 801b2ce:	3401      	adds	r4, #1
 801b2d0:	e006      	b.n	801b2e0 <floor+0xe0>
 801b2d2:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 801b2d6:	2301      	movs	r3, #1
 801b2d8:	40b3      	lsls	r3, r6
 801b2da:	441d      	add	r5, r3
 801b2dc:	4545      	cmp	r5, r8
 801b2de:	d3f6      	bcc.n	801b2ce <floor+0xce>
 801b2e0:	ea25 0507 	bic.w	r5, r5, r7
 801b2e4:	e7b0      	b.n	801b248 <floor+0x48>
 801b2e6:	2500      	movs	r5, #0
 801b2e8:	462c      	mov	r4, r5
 801b2ea:	e7ad      	b.n	801b248 <floor+0x48>
 801b2ec:	f3af 8000 	nop.w
 801b2f0:	8800759c 	.word	0x8800759c
 801b2f4:	7e37e43c 	.word	0x7e37e43c
 801b2f8:	bff00000 	.word	0xbff00000
 801b2fc:	000fffff 	.word	0x000fffff

0801b300 <_init>:
 801b300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b302:	bf00      	nop
 801b304:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b306:	bc08      	pop	{r3}
 801b308:	469e      	mov	lr, r3
 801b30a:	4770      	bx	lr

0801b30c <_fini>:
 801b30c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b30e:	bf00      	nop
 801b310:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b312:	bc08      	pop	{r3}
 801b314:	469e      	mov	lr, r3
 801b316:	4770      	bx	lr
